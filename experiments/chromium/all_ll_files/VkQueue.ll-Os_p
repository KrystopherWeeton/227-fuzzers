; ModuleID = '../../third_party/swiftshader/src/Vulkan/VkQueue.cpp'
source_filename = "../../third_party/swiftshader/src/Vulkan/VkQueue.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.vk::CommandBuffer::ExecutionState" = type { %"class.sw::Renderer"*, %"class.sw::CountedEvent"*, %"class.vk::RenderPass"*, %"class.vk::Framebuffer"*, %"struct.std::__1::array.253", %"struct.vk::DynamicState", %"struct.vk::Pipeline::PushConstantStorage", [16 x %"struct.vk::VertexInputBinding"], %"struct.vk::VertexInputBinding", i32, i32, [8 x i8] }
%"class.sw::Renderer" = type { i32 (...)**, %"class.marl::BoundedPool", %"class.marl::BoundedPool.36", %"struct.std::__1::atomic", %"class.vk::Query"*, %"class.marl::Ticket::Queue", [16 x %"class.marl::Ticket::Queue"], %"class.sw::VertexProcessor", [8 x i8], %"class.sw::PixelProcessor", %"class.sw::SetupProcessor", %"struct.sw::VertexProcessor::State", %"struct.sw::SetupProcessor::State", [4 x i8], %"struct.sw::PixelProcessor::State", %"class.rr::RoutineT", %"class.rr::RoutineT.79", %"class.rr::RoutineT.80", %"class.vk::Device"* }
%"class.marl::BoundedPool" = type { %"class.std::__1::shared_ptr" }
%"class.std::__1::shared_ptr" = type { %"class.marl::BoundedPool<sw::DrawCall, 16, marl::PoolPolicy::Preserve>::Storage"*, %"class.std::__1::__shared_weak_count"* }
%"class.marl::BoundedPool<sw::DrawCall, 16, marl::PoolPolicy::Preserve>::Storage" = type opaque
%"class.std::__1::__shared_weak_count" = type { %"class.std::__1::__shared_count", i64 }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"class.marl::BoundedPool.36" = type { %"class.std::__1::shared_ptr.39" }
%"class.std::__1::shared_ptr.39" = type { %"class.marl::BoundedPool<sw::DrawCall::BatchData, 16, marl::PoolPolicy::Preserve>::Storage"*, %"class.std::__1::__shared_weak_count"* }
%"class.marl::BoundedPool<sw::DrawCall::BatchData, 16, marl::PoolPolicy::Preserve>::Storage" = type opaque
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.40" }
%"struct.std::__1::__atomic_base.40" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.vk::Query" = type opaque
%"class.marl::Ticket::Queue" = type { %"class.std::__1::shared_ptr.41", %"class.marl::UnboundedPool" }
%"class.std::__1::shared_ptr.41" = type { %"struct.marl::Ticket::Shared"*, %"class.std::__1::__shared_weak_count"* }
%"struct.marl::Ticket::Shared" = type { %"class.marl::mutex", %"struct.marl::Ticket::Record" }
%"class.marl::mutex" = type { %"class.std::__1::mutex" }
%"class.std::__1::mutex" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"struct.marl::Ticket::Record" = type <{ %"class.marl::ConditionVariable", %"class.std::__1::shared_ptr.41", %"struct.marl::Ticket::Record"*, %"struct.marl::Ticket::Record"*, %"class.std::__1::function", i8, %"struct.std::__1::atomic.118", [6 x i8] }>
%"class.marl::ConditionVariable" = type { %"class.marl::mutex", %"class.marl::containers::list", %"class.std::__1::condition_variable", %"struct.std::__1::atomic", %"struct.std::__1::atomic" }
%"class.marl::containers::list" = type { %"class.marl::Allocator"*, i64, i64, %"struct.marl::containers::list<marl::Scheduler::Fiber *>::AllocationChain"*, %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"*, %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"* }
%"class.marl::Allocator" = type { i32 (...)** }
%"struct.marl::containers::list<marl::Scheduler::Fiber *>::AllocationChain" = type { %"struct.marl::Allocation", %"struct.marl::containers::list<marl::Scheduler::Fiber *>::AllocationChain"* }
%"struct.marl::Allocation" = type { i8*, %"struct.marl::Allocation::Request" }
%"struct.marl::Allocation::Request" = type <{ i64, i64, i8, i8, [6 x i8] }>
%"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry" = type { %"class.marl::Scheduler::Fiber"*, %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"*, %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"* }
%"class.marl::Scheduler::Fiber" = type <{ i32, [4 x i8], %"class.std::__1::unique_ptr.133", %"class.marl::Scheduler::Worker"*, i32, [4 x i8] }>
%"class.std::__1::unique_ptr.133" = type { %"class.std::__1::__compressed_pair.134" }
%"class.std::__1::__compressed_pair.134" = type { %"struct.std::__1::__compressed_pair_elem.135", %"struct.std::__1::__compressed_pair_elem.136" }
%"struct.std::__1::__compressed_pair_elem.135" = type { %"class.marl::OSFiber"* }
%"class.marl::OSFiber" = type opaque
%"struct.std::__1::__compressed_pair_elem.136" = type { %"struct.marl::Allocator::Deleter" }
%"struct.marl::Allocator::Deleter" = type { %"class.marl::Allocator"*, i64 }
%"class.marl::Scheduler::Worker" = type <{ i32, i32, %"class.marl::Scheduler"*, %"class.std::__1::unique_ptr.130", %"class.marl::Scheduler::Fiber"*, %"class.marl::Thread", %"struct.marl::Scheduler::Worker::Work", %"class.std::__1::unordered_set", %"class.marl::containers::vector.204", %"class.marl::Scheduler::Worker::FastRnd", i8, [7 x i8] }>
%"class.marl::Scheduler" = type { %"struct.marl::Scheduler::Config", %"struct.std::__1::array.128", %"struct.std::__1::atomic.86", %"struct.std::__1::atomic.86", %"struct.std::__1::array.129", %"struct.marl::Scheduler::SingleThreadedWorkers" }
%"struct.marl::Scheduler::Config" = type { %"struct.marl::Scheduler::Config::WorkerThread", %"class.marl::Allocator"*, i64 }
%"struct.marl::Scheduler::Config::WorkerThread" = type { i32, %"class.std::__1::function.122", %"class.std::__1::shared_ptr.127" }
%"class.std::__1::function.122" = type { %"class.std::__1::__function::__policy_func.125" }
%"class.std::__1::__function::__policy_func.125" = type { %"union.std::__1::__function::__policy_storage", %"struct.std::__1::__function::__policy_invoker.126", %"struct.std::__1::__function::__policy"* }
%"union.std::__1::__function::__policy_storage" = type { i8*, [8 x i8] }
%"struct.std::__1::__function::__policy_invoker.126" = type { void (%"union.std::__1::__function::__policy_storage"*, i32)* }
%"struct.std::__1::__function::__policy" = type { i8* (i8*)*, void (i8*)*, i8, %"class.std::type_info"* }
%"class.std::type_info" = type { i32 (...)**, i8* }
%"class.std::__1::shared_ptr.127" = type { %"class.marl::Thread::Affinity::Policy"*, %"class.std::__1::__shared_weak_count"* }
%"class.marl::Thread::Affinity::Policy" = type { i32 (...)** }
%"struct.std::__1::array.128" = type { [8 x %"struct.std::__1::atomic"] }
%"struct.std::__1::atomic.86" = type { %"struct.std::__1::__atomic_base.87" }
%"struct.std::__1::__atomic_base.87" = type { %"struct.std::__1::__atomic_base.88" }
%"struct.std::__1::__atomic_base.88" = type { %"struct.std::__1::__cxx_atomic_impl.89" }
%"struct.std::__1::__cxx_atomic_impl.89" = type { %"struct.std::__1::__cxx_atomic_base_impl.90" }
%"struct.std::__1::__cxx_atomic_base_impl.90" = type { i32 }
%"struct.std::__1::array.129" = type { [256 x %"class.marl::Scheduler::Worker"*] }
%"struct.marl::Scheduler::SingleThreadedWorkers" = type { %"class.marl::mutex", %"class.std::__1::condition_variable", %"class.std::__1::unordered_map.205" }
%"class.std::__1::unordered_map.205" = type { %"class.std::__1::__hash_table.206" }
%"class.std::__1::__hash_table.206" = type <{ %"class.std::__1::unique_ptr.207", %"class.std::__1::__compressed_pair.216", %"class.std::__1::__compressed_pair.220", %"class.std::__1::__compressed_pair.225", [4 x i8] }>
%"class.std::__1::unique_ptr.207" = type { %"class.std::__1::__compressed_pair.208" }
%"class.std::__1::__compressed_pair.208" = type { %"struct.std::__1::__compressed_pair_elem.209", %"struct.std::__1::__compressed_pair_elem.211" }
%"struct.std::__1::__compressed_pair_elem.209" = type { %"struct.std::__1::__hash_node_base.210"** }
%"struct.std::__1::__hash_node_base.210" = type { %"struct.std::__1::__hash_node_base.210"* }
%"struct.std::__1::__compressed_pair_elem.211" = type { %"class.std::__1::__bucket_list_deallocator.212" }
%"class.std::__1::__bucket_list_deallocator.212" = type { %"class.std::__1::__compressed_pair.213" }
%"class.std::__1::__compressed_pair.213" = type { %"struct.std::__1::__compressed_pair_elem.100", %"struct.std::__1::__compressed_pair_elem.214" }
%"struct.std::__1::__compressed_pair_elem.100" = type { i64 }
%"struct.std::__1::__compressed_pair_elem.214" = type { %"struct.marl::StlAllocator.215" }
%"struct.marl::StlAllocator.215" = type { %"class.marl::Allocator"* }
%"class.std::__1::__compressed_pair.216" = type { %"struct.std::__1::__compressed_pair_elem.217", %"struct.std::__1::__compressed_pair_elem.218" }
%"struct.std::__1::__compressed_pair_elem.217" = type { %"struct.std::__1::__hash_node_base.210" }
%"struct.std::__1::__compressed_pair_elem.218" = type { %"struct.marl::StlAllocator.219" }
%"struct.marl::StlAllocator.219" = type { %"class.marl::Allocator"* }
%"class.std::__1::__compressed_pair.220" = type { %"struct.std::__1::__compressed_pair_elem.100" }
%"class.std::__1::__compressed_pair.225" = type { %"struct.std::__1::__compressed_pair_elem.182" }
%"struct.std::__1::__compressed_pair_elem.182" = type { float }
%"class.std::__1::unique_ptr.130" = type { %"class.std::__1::__compressed_pair.131" }
%"class.std::__1::__compressed_pair.131" = type { %"struct.std::__1::__compressed_pair_elem.132", %"struct.std::__1::__compressed_pair_elem.136" }
%"struct.std::__1::__compressed_pair_elem.132" = type { %"class.marl::Scheduler::Fiber"* }
%"class.marl::Thread" = type { %"class.marl::Thread::Impl"* }
%"class.marl::Thread::Impl" = type opaque
%"struct.marl::Scheduler::Worker::Work" = type { %"struct.std::__1::atomic.137", i64, %"class.std::__1::deque.142", %"class.std::__1::deque.151", %"struct.marl::Scheduler::WaitingFibers", i8, %"class.std::__1::condition_variable", %"class.marl::mutex" }
%"struct.std::__1::atomic.137" = type { %"struct.std::__1::__atomic_base.138" }
%"struct.std::__1::__atomic_base.138" = type { %"struct.std::__1::__atomic_base.139" }
%"struct.std::__1::__atomic_base.139" = type { %"struct.std::__1::__cxx_atomic_impl.140" }
%"struct.std::__1::__cxx_atomic_impl.140" = type { %"struct.std::__1::__cxx_atomic_base_impl.141" }
%"struct.std::__1::__cxx_atomic_base_impl.141" = type { i64 }
%"class.std::__1::deque.142" = type { %"class.std::__1::__deque_base.143" }
%"class.std::__1::__deque_base.143" = type { %"struct.std::__1::__split_buffer.144", i64, %"class.std::__1::__compressed_pair.148" }
%"struct.std::__1::__split_buffer.144" = type { %"class.marl::Task"**, %"class.marl::Task"**, %"class.marl::Task"**, %"class.std::__1::__compressed_pair.145" }
%"class.marl::Task" = type <{ %"class.std::__1::function", i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.145" = type { %"struct.std::__1::__compressed_pair_elem.146", %"struct.std::__1::__compressed_pair_elem.147" }
%"struct.std::__1::__compressed_pair_elem.146" = type { %"class.marl::Task"** }
%"struct.std::__1::__compressed_pair_elem.147" = type { %"struct.marl::StlAllocator" }
%"struct.marl::StlAllocator" = type { %"class.marl::Allocator"* }
%"class.std::__1::__compressed_pair.148" = type { %"struct.std::__1::__compressed_pair_elem.100", %"struct.std::__1::__compressed_pair_elem.149" }
%"struct.std::__1::__compressed_pair_elem.149" = type { %"struct.marl::StlAllocator.150" }
%"struct.marl::StlAllocator.150" = type { %"class.marl::Allocator"* }
%"class.std::__1::deque.151" = type { %"class.std::__1::__deque_base.152" }
%"class.std::__1::__deque_base.152" = type { %"struct.std::__1::__split_buffer.153", i64, %"class.std::__1::__compressed_pair.158" }
%"struct.std::__1::__split_buffer.153" = type { %"class.marl::Scheduler::Fiber"***, %"class.marl::Scheduler::Fiber"***, %"class.marl::Scheduler::Fiber"***, %"class.std::__1::__compressed_pair.154" }
%"class.std::__1::__compressed_pair.154" = type { %"struct.std::__1::__compressed_pair_elem.155", %"struct.std::__1::__compressed_pair_elem.156" }
%"struct.std::__1::__compressed_pair_elem.155" = type { %"class.marl::Scheduler::Fiber"*** }
%"struct.std::__1::__compressed_pair_elem.156" = type { %"struct.marl::StlAllocator.157" }
%"struct.marl::StlAllocator.157" = type { %"class.marl::Allocator"* }
%"class.std::__1::__compressed_pair.158" = type { %"struct.std::__1::__compressed_pair_elem.100", %"struct.std::__1::__compressed_pair_elem.159" }
%"struct.std::__1::__compressed_pair_elem.159" = type { %"struct.marl::StlAllocator.160" }
%"struct.marl::StlAllocator.160" = type { %"class.marl::Allocator"* }
%"struct.marl::Scheduler::WaitingFibers" = type { %"class.std::__1::set", %"class.std::__1::unordered_map" }
%"class.std::__1::set" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.161", %"class.std::__1::__compressed_pair.165" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.161" = type { %"struct.std::__1::__compressed_pair_elem.162", %"struct.std::__1::__compressed_pair_elem.163" }
%"struct.std::__1::__compressed_pair_elem.162" = type { %"class.std::__1::__tree_end_node" }
%"struct.std::__1::__compressed_pair_elem.163" = type { %"struct.marl::StlAllocator.164" }
%"struct.marl::StlAllocator.164" = type { %"class.marl::Allocator"* }
%"class.std::__1::__compressed_pair.165" = type { %"struct.std::__1::__compressed_pair_elem.100" }
%"class.std::__1::unordered_map" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.167", %"class.std::__1::__compressed_pair.174", %"class.std::__1::__compressed_pair.178", %"class.std::__1::__compressed_pair.181", [4 x i8] }>
%"class.std::__1::unique_ptr.167" = type { %"class.std::__1::__compressed_pair.168" }
%"class.std::__1::__compressed_pair.168" = type { %"struct.std::__1::__compressed_pair_elem.169", %"struct.std::__1::__compressed_pair_elem.170" }
%"struct.std::__1::__compressed_pair_elem.169" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.170" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.171" }
%"class.std::__1::__compressed_pair.171" = type { %"struct.std::__1::__compressed_pair_elem.100", %"struct.std::__1::__compressed_pair_elem.172" }
%"struct.std::__1::__compressed_pair_elem.172" = type { %"struct.marl::StlAllocator.173" }
%"struct.marl::StlAllocator.173" = type { %"class.marl::Allocator"* }
%"class.std::__1::__compressed_pair.174" = type { %"struct.std::__1::__compressed_pair_elem.175", %"struct.std::__1::__compressed_pair_elem.176" }
%"struct.std::__1::__compressed_pair_elem.175" = type { %"struct.std::__1::__hash_node_base" }
%"struct.std::__1::__compressed_pair_elem.176" = type { %"struct.marl::StlAllocator.177" }
%"struct.marl::StlAllocator.177" = type { %"class.marl::Allocator"* }
%"class.std::__1::__compressed_pair.178" = type { %"struct.std::__1::__compressed_pair_elem.100" }
%"class.std::__1::__compressed_pair.181" = type { %"struct.std::__1::__compressed_pair_elem.182" }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table.185" }
%"class.std::__1::__hash_table.185" = type <{ %"class.std::__1::unique_ptr.186", %"class.std::__1::__compressed_pair.195", %"class.std::__1::__compressed_pair.199", %"class.std::__1::__compressed_pair.201", [4 x i8] }>
%"class.std::__1::unique_ptr.186" = type { %"class.std::__1::__compressed_pair.187" }
%"class.std::__1::__compressed_pair.187" = type { %"struct.std::__1::__compressed_pair_elem.188", %"struct.std::__1::__compressed_pair_elem.190" }
%"struct.std::__1::__compressed_pair_elem.188" = type { %"struct.std::__1::__hash_node_base.189"** }
%"struct.std::__1::__hash_node_base.189" = type { %"struct.std::__1::__hash_node_base.189"* }
%"struct.std::__1::__compressed_pair_elem.190" = type { %"class.std::__1::__bucket_list_deallocator.191" }
%"class.std::__1::__bucket_list_deallocator.191" = type { %"class.std::__1::__compressed_pair.192" }
%"class.std::__1::__compressed_pair.192" = type { %"struct.std::__1::__compressed_pair_elem.100", %"struct.std::__1::__compressed_pair_elem.193" }
%"struct.std::__1::__compressed_pair_elem.193" = type { %"struct.marl::StlAllocator.194" }
%"struct.marl::StlAllocator.194" = type { %"class.marl::Allocator"* }
%"class.std::__1::__compressed_pair.195" = type { %"struct.std::__1::__compressed_pair_elem.196", %"struct.std::__1::__compressed_pair_elem.197" }
%"struct.std::__1::__compressed_pair_elem.196" = type { %"struct.std::__1::__hash_node_base.189" }
%"struct.std::__1::__compressed_pair_elem.197" = type { %"struct.marl::StlAllocator.198" }
%"struct.marl::StlAllocator.198" = type { %"class.marl::Allocator"* }
%"class.std::__1::__compressed_pair.199" = type { %"struct.std::__1::__compressed_pair_elem.100" }
%"class.std::__1::__compressed_pair.201" = type { %"struct.std::__1::__compressed_pair_elem.182" }
%"class.marl::containers::vector.204" = type { %"class.marl::Allocator"*, i64, i64, [16 x %"struct.marl::aligned_storage<24, 8>::type"], %"struct.marl::aligned_storage<24, 8>::type"*, %"struct.marl::Allocation" }
%"struct.marl::aligned_storage<24, 8>::type" = type { [24 x i8] }
%"class.marl::Scheduler::Worker::FastRnd" = type { i64 }
%"class.std::__1::condition_variable" = type { %union.pthread_cond_t }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon.91, %union.anon.93, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon.91 = type { i64 }
%union.anon.93 = type { i64 }
%"class.std::__1::function" = type { %"class.std::__1::__function::__policy_func" }
%"class.std::__1::__function::__policy_func" = type { %"union.std::__1::__function::__policy_storage", %"struct.std::__1::__function::__policy_invoker", %"struct.std::__1::__function::__policy"* }
%"struct.std::__1::__function::__policy_invoker" = type { void (%"union.std::__1::__function::__policy_storage"*)* }
%"struct.std::__1::atomic.118" = type { %"struct.std::__1::__atomic_base.119" }
%"struct.std::__1::__atomic_base.119" = type { %"struct.std::__1::__cxx_atomic_impl.120" }
%"struct.std::__1::__cxx_atomic_impl.120" = type { %"struct.std::__1::__cxx_atomic_base_impl.121" }
%"struct.std::__1::__cxx_atomic_base_impl.121" = type { i8 }
%"class.marl::UnboundedPool" = type { %"class.marl::Allocator"*, %"class.std::__1::shared_ptr.44" }
%"class.std::__1::shared_ptr.44" = type { %"class.marl::UnboundedPool<marl::Ticket::Record, marl::PoolPolicy::Reconstruct>::Storage"*, %"class.std::__1::__shared_weak_count"* }
%"class.marl::UnboundedPool<marl::Ticket::Record, marl::PoolPolicy::Reconstruct>::Storage" = type { %"class.marl::Pool<marl::Ticket::Record>::Storage", %"class.marl::Allocator"*, %"class.marl::mutex", %"class.marl::containers::vector.291", %"struct.marl::Pool<marl::Ticket::Record>::Item"* }
%"class.marl::Pool<marl::Ticket::Record>::Storage" = type { i32 (...)** }
%"class.marl::containers::vector.291" = type { %"class.marl::Allocator"*, i64, i64, [4 x %"struct.marl::aligned_storage<8, 8>::type"], %"struct.marl::aligned_storage<8, 8>::type"*, %"struct.marl::Allocation" }
%"struct.marl::aligned_storage<8, 8>::type" = type { [8 x i8] }
%"struct.marl::Pool<marl::Ticket::Record>::Item" = type { %"struct.marl::aligned_storage<216, 8>::type", %"struct.std::__1::atomic", %"struct.marl::Pool<marl::Ticket::Record>::Item"* }
%"struct.marl::aligned_storage<216, 8>::type" = type { [216 x i8] }
%"class.sw::VertexProcessor" = type { %"class.std::__1::unique_ptr.45" }
%"class.std::__1::unique_ptr.45" = type { %"class.std::__1::__compressed_pair.46" }
%"class.std::__1::__compressed_pair.46" = type { %"struct.std::__1::__compressed_pair_elem.47" }
%"struct.std::__1::__compressed_pair_elem.47" = type { %"class.sw::LRUCache"* }
%"class.sw::LRUCache" = type opaque
%"class.sw::PixelProcessor" = type { %"struct.sw::PixelProcessor::Factor", %"class.std::__1::unique_ptr.52", [8 x i8] }
%"struct.sw::PixelProcessor::Factor" = type { %"struct.sw::vec", [4 x %"struct.sw::vec"], [8 x i8], [4 x %"struct.sw::vec.49"], [4 x %"struct.sw::vec"], [4 x %"struct.sw::vec.49"] }
%"struct.sw::vec" = type { %union.anon }
%union.anon = type { [4 x i16] }
%"struct.sw::vec.49" = type { %union.anon.50 }
%union.anon.50 = type { [4 x float] }
%"class.std::__1::unique_ptr.52" = type { %"class.std::__1::__compressed_pair.53" }
%"class.std::__1::__compressed_pair.53" = type { %"struct.std::__1::__compressed_pair_elem.54" }
%"struct.std::__1::__compressed_pair_elem.54" = type { %"class.sw::LRUCache.55"* }
%"class.sw::LRUCache.55" = type opaque
%"class.sw::SetupProcessor" = type { %"class.std::__1::unique_ptr.59" }
%"class.std::__1::unique_ptr.59" = type { %"class.std::__1::__compressed_pair.60" }
%"class.std::__1::__compressed_pair.60" = type { %"struct.std::__1::__compressed_pair_elem.61" }
%"struct.std::__1::__compressed_pair_elem.61" = type { %"class.sw::LRUCache.62"* }
%"class.sw::LRUCache.62" = type opaque
%"struct.sw::VertexProcessor::State" = type { %"struct.sw::VertexProcessor::States.base", i32, [4 x i8] }
%"struct.sw::VertexProcessor::States.base" = type <{ i64, i32, [32 x %"struct.sw::VertexProcessor::States::Input"], i8 }>
%"struct.sw::VertexProcessor::States::Input" = type { i32, i8 }
%"struct.sw::SetupProcessor::State" = type { %"struct.sw::SetupProcessor::States.base", i32 }
%"struct.sw::SetupProcessor::States.base" = type <{ i16, [2 x i8], i32, i32, i16, [128 x %"struct.sw::SpirvShader::InterfaceComponent"] }>
%"struct.sw::SpirvShader::InterfaceComponent" = type { i8, %union.anon.68 }
%union.anon.68 = type { %struct.anon.69 }
%struct.anon.69 = type { i8 }
%"struct.sw::PixelProcessor::State" = type <{ %"struct.sw::PixelProcessor::States", i32, [4 x i8] }>
%"struct.sw::PixelProcessor::States" = type { i64, i32, i32, i32, i32, i8, i8, %"struct.sw::PixelProcessor::States::StencilOpState", %"struct.sw::PixelProcessor::States::StencilOpState", i8, i8, i8, i8, [8 x %"struct.vk::BlendState"], i32, [8 x %"class.vk::Format"], i32, i32, i8, i8, i8, i8, float, float, float, i32, %"class.vk::Format", i8, i8, float, float }
%"struct.sw::PixelProcessor::States::StencilOpState" = type { i32, i32, i32, i32, i32, i32 }
%"struct.vk::BlendState" = type { i8, i32, i32, i32, i32, i32, i32 }
%"class.vk::Format" = type { i32 }
%"class.rr::RoutineT" = type { %"class.std::__1::shared_ptr.74", void (%"struct.sw::Vertex"*, i32*, %"struct.sw::VertexTask"*, %"struct.sw::DrawData"*)* }
%"class.std::__1::shared_ptr.74" = type { %"class.rr::Routine"*, %"class.std::__1::__shared_weak_count"* }
%"class.rr::Routine" = type { i32 (...)** }
%"struct.sw::Vertex" = type { %union.anon.75, float, i32, i32, [8 x float], [8 x float], [4 x i8], %struct.anon.77, [128 x float] }
%union.anon.75 = type { %struct.anon.76 }
%struct.anon.76 = type { float, float, float, float }
%struct.anon.77 = type { i32, i32, float, float }
%"struct.sw::VertexTask" = type { i32, i32, [8 x i8], %"struct.sw::VertexCache" }
%"struct.sw::VertexCache" = type { [64 x %"struct.sw::Vertex"], [64 x i32], i32, [12 x i8] }
%"struct.sw::DrawData" = type { %"struct.sw::Constants"*, %"struct.std::__1::array", %"struct.std::__1::array.78", [32 x i8*], [32 x i32], [32 x i32], i8*, i32, i32, float, i32, [2 x %"struct.sw::PixelProcessor::Stencil"], %"struct.sw::PixelProcessor::Factor", [16 x i32], %"struct.sw::vec.49", %"struct.sw::vec.49", %"struct.sw::vec.49", %"struct.sw::vec.49", %"struct.sw::vec.49", %"struct.sw::vec.49", float, float, float, float, float, float, float, i8, [8 x i32*], [8 x i32], [8 x i32], float*, i32, i32, i8*, i32, i32, i32, i32, i32, i32, %"struct.sw::vec.49", %"struct.sw::vec.49", %"struct.sw::vec.49", %"struct.sw::vec.49", %"struct.vk::Pipeline::PushConstantStorage" }
%"struct.sw::Constants" = type opaque
%"struct.std::__1::array" = type { [4 x i8*] }
%"struct.std::__1::array.78" = type { [12 x i32] }
%"struct.sw::PixelProcessor::Stencil" = type { i64, i64, i64, i64, i64, i64 }
%"class.rr::RoutineT.79" = type { %"class.std::__1::shared_ptr.74", i32 (%"struct.sw::Primitive"*, %"struct.sw::Triangle"*, %"struct.sw::Polygon"*, %"struct.sw::DrawData"*)* }
%"struct.sw::Primitive" = type { i32, i32, [8 x i8], %"struct.sw::vec.49", %"struct.sw::vec.49", float, float, float, [4 x i8], %"struct.sw::PlaneEquation", %"struct.sw::vec.49", %"struct.sw::PlaneEquation", [128 x %"struct.sw::PlaneEquation"], [8 x %"struct.sw::PlaneEquation"], [8 x %"struct.sw::PlaneEquation"], i64, i64, [2 x %"struct.sw::Primitive::Span"], [8192 x %"struct.sw::Primitive::Span"], [2 x %"struct.sw::Primitive::Span"] }
%"struct.sw::PlaneEquation" = type { %"struct.sw::vec.49", %"struct.sw::vec.49", %"struct.sw::vec.49" }
%"struct.sw::Primitive::Span" = type { i16, i16 }
%"struct.sw::Triangle" = type { %"struct.sw::Vertex", %"struct.sw::Vertex", %"struct.sw::Vertex" }
%"struct.sw::Polygon" = type opaque
%"class.rr::RoutineT.80" = type { %"class.std::__1::shared_ptr.74", void (%"struct.sw::Primitive"*, i32, i32, i32, %"struct.sw::DrawData"*)* }
%"class.vk::Device" = type opaque
%"class.sw::CountedEvent" = type { %"class.marl::WaitGroup", %"class.marl::Event" }
%"class.marl::WaitGroup" = type { %"class.std::__1::shared_ptr.85" }
%"class.std::__1::shared_ptr.85" = type { %"struct.marl::WaitGroup::Data"*, %"class.std::__1::__shared_weak_count"* }
%"struct.marl::WaitGroup::Data" = type { %"struct.std::__1::atomic.86", %"class.marl::ConditionVariable", %"class.marl::mutex" }
%"class.marl::Event" = type { %"class.std::__1::shared_ptr.95" }
%"class.std::__1::shared_ptr.95" = type { %"struct.marl::Event::Shared"*, %"class.std::__1::__shared_weak_count"* }
%"struct.marl::Event::Shared" = type <{ %"class.marl::mutex", %"class.marl::ConditionVariable", %"class.marl::containers::vector", i8, i8, [6 x i8] }>
%"class.marl::containers::vector" = type { %"class.marl::Allocator"*, i64, i64, [1 x %"struct.marl::aligned_storage<16, 8>::type"], %"struct.marl::aligned_storage<16, 8>::type"*, %"struct.marl::Allocation" }
%"struct.marl::aligned_storage<16, 8>::type" = type { [16 x i8] }
%"class.vk::RenderPass" = type opaque
%"class.vk::Framebuffer" = type opaque
%"struct.std::__1::array.253" = type { [2 x %"struct.vk::CommandBuffer::ExecutionState::PipelineState"] }
%"struct.vk::CommandBuffer::ExecutionState::PipelineState" = type { %"class.vk::Pipeline"*, %"struct.std::__1::array.254", %"struct.std::__1::array", %"struct.std::__1::array.78" }
%"class.vk::Pipeline" = type <{ i32 (...)**, %"class.vk::PipelineLayout"*, %"class.vk::Device"*, i8, [7 x i8] }>
%"class.vk::PipelineLayout" = type opaque
%"struct.std::__1::array.254" = type { [4 x %"class.vk::DescriptorSet"*] }
%"class.vk::DescriptorSet" = type <{ %"struct.vk::DescriptorSetHeader", [1 x i8], [15 x i8] }>
%"struct.vk::DescriptorSetHeader" = type { %"class.vk::DescriptorSetLayout"*, %"class.marl::mutex" }
%"class.vk::DescriptorSetLayout" = type opaque
%"struct.vk::DynamicState" = type { %struct.VkViewport, %struct.VkRect2D, [8 x i8], %"struct.sw::vec.49", float, float, float, float, float, [2 x i32], [2 x i32], [2 x i32], [4 x i8] }
%struct.VkViewport = type { float, float, float, float, float, float }
%struct.VkRect2D = type { %struct.VkOffset2D, %struct.VkExtent2D }
%struct.VkOffset2D = type { i32, i32 }
%struct.VkExtent2D = type { i32, i32 }
%"struct.vk::Pipeline::PushConstantStorage" = type { [128 x i8] }
%"struct.vk::VertexInputBinding" = type { %"class.vk::Buffer"*, i64 }
%"class.vk::Buffer" = type opaque
%"class.vk::Queue" = type { %union.VK_LOADER_DATA, %"class.vk::Device"*, %"class.std::__1::unique_ptr", %"class.sw::Chan", %"class.sw::Chan.104", %"class.std::__1::thread" }
%union.VK_LOADER_DATA = type { i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.sw::Renderer"* }
%"class.sw::Chan" = type { %"class.marl::mutex", %"class.std::__1::queue", %"class.std::__1::condition_variable" }
%"class.std::__1::queue" = type { %"class.std::__1::deque" }
%"class.std::__1::deque" = type { %"class.std::__1::__deque_base" }
%"class.std::__1::__deque_base" = type { %"struct.std::__1::__split_buffer", i64, %"class.std::__1::__compressed_pair.99" }
%"struct.std::__1::__split_buffer" = type { %"struct.vk::Queue::Task"**, %"struct.vk::Queue::Task"**, %"struct.vk::Queue::Task"**, %"class.std::__1::__compressed_pair.96" }
%"struct.vk::Queue::Task" = type <{ i32, [4 x i8], %struct.VkSubmitInfo*, %"class.std::__1::shared_ptr.84", i32, [4 x i8] }>
%struct.VkSubmitInfo = type { i32, i8*, i32, %class.VkNonDispatchableHandle.1*, i32*, i32, %struct.VkCommandBuffer_T**, i32, %class.VkNonDispatchableHandle.1* }
%struct.VkCommandBuffer_T = type opaque
%class.VkNonDispatchableHandle.1 = type { i64 }
%"class.std::__1::shared_ptr.84" = type { %"class.sw::CountedEvent"*, %"class.std::__1::__shared_weak_count"* }
%"class.std::__1::__compressed_pair.96" = type { %"struct.std::__1::__compressed_pair_elem.97" }
%"struct.std::__1::__compressed_pair_elem.97" = type { %"struct.vk::Queue::Task"** }
%"class.std::__1::__compressed_pair.99" = type { %"struct.std::__1::__compressed_pair_elem.100" }
%"class.sw::Chan.104" = type { %"class.marl::mutex", %"class.std::__1::queue.105", %"class.std::__1::condition_variable" }
%"class.std::__1::queue.105" = type { %"class.std::__1::deque.106" }
%"class.std::__1::deque.106" = type { %"class.std::__1::__deque_base.107" }
%"class.std::__1::__deque_base.107" = type { %"struct.std::__1::__split_buffer.108", i64, %"class.std::__1::__compressed_pair.114" }
%"struct.std::__1::__split_buffer.108" = type { %struct.VkSubmitInfo***, %struct.VkSubmitInfo***, %struct.VkSubmitInfo***, %"class.std::__1::__compressed_pair.109" }
%"class.std::__1::__compressed_pair.109" = type { %"struct.std::__1::__compressed_pair_elem.110" }
%"struct.std::__1::__compressed_pair_elem.110" = type { %struct.VkSubmitInfo*** }
%"class.std::__1::__compressed_pair.114" = type { %"struct.std::__1::__compressed_pair_elem.100" }
%"class.std::__1::thread" = type { i64 }
%class.VkNonDispatchableHandle = type { i64 }
%class.VkNonDispatchableHandle.0 = type { i64 }
%class.VkNonDispatchableHandle.2 = type { i64 }
%class.VkNonDispatchableHandle.3 = type { i64 }
%class.VkNonDispatchableHandle.4 = type { i64 }
%class.VkNonDispatchableHandle.5 = type { i64 }
%class.VkNonDispatchableHandle.6 = type { i64 }
%class.VkNonDispatchableHandle.7 = type { i64 }
%class.VkNonDispatchableHandle.8 = type { i64 }
%class.VkNonDispatchableHandle.9 = type { i64 }
%class.VkNonDispatchableHandle.10 = type { i64 }
%class.VkNonDispatchableHandle.11 = type { i64 }
%class.VkNonDispatchableHandle.12 = type { i64 }
%class.VkNonDispatchableHandle.13 = type { i64 }
%class.VkNonDispatchableHandle.14 = type { i64 }
%class.VkNonDispatchableHandle.15 = type { i64 }
%class.VkNonDispatchableHandle.16 = type { i64 }
%class.VkNonDispatchableHandle.17 = type { i64 }
%class.VkNonDispatchableHandle.18 = type { i64 }
%class.VkNonDispatchableHandle.19 = type { i64 }
%class.VkNonDispatchableHandle.20 = type { i64 }
%class.VkNonDispatchableHandle.21 = type { i64 }
%class.VkNonDispatchableHandle.22 = type { i64 }
%class.VkNonDispatchableHandle.23 = type { i64 }
%class.VkNonDispatchableHandle.24 = type { i64 }
%class.VkNonDispatchableHandle.25 = type { i64 }
%class.VkNonDispatchableHandle.26 = type { i64 }
%class.VkNonDispatchableHandle.27 = type { i64 }
%class.VkNonDispatchableHandle.28 = type { i64 }
%class.VkNonDispatchableHandle.29 = type { i64 }
%class.VkNonDispatchableHandle.30 = type { i64 }
%class.VkNonDispatchableHandle.31 = type { i64 }
%class.VkNonDispatchableHandle.32 = type { i64 }
%class.VkNonDispatchableHandle.33 = type { i64 }
%class.VkNonDispatchableHandle.34 = type { i64 }
%class.VkNonDispatchableHandle.35 = type { i64 }
%"class.std::__1::__thread_struct" = type { %"class.std::__1::__thread_struct_imp"* }
%"class.std::__1::__thread_struct_imp" = type opaque
%union.pthread_attr_t = type { i64, [48 x i8] }
%struct.VkAllocationCallbacks = type { i8*, i8* (i8*, i64, i64, i32)*, i8* (i8*, i8*, i64, i64, i32)*, void (i8*, i8*)*, void (i8*, i64, i32, i32)*, void (i8*, i64, i32, i32)* }
%"class.vk::Fence" = type { %"class.std::__1::shared_ptr.84" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.231" }
%"class.std::__1::__compressed_pair.231" = type { %"struct.std::__1::__compressed_pair_elem.232" }
%"struct.std::__1::__compressed_pair_elem.232" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.233 }
%union.anon.233 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon.234 }
%struct.anon.234 = type { i8 }
%struct.VkBaseInStructure = type { i32, %struct.VkBaseInStructure* }
%struct.VkTimelineSemaphoreSubmitInfo = type { i32, i8*, i32, i64*, i32, i64* }
%"class.vk::Semaphore" = type { i32 (...)**, i32, %"class.marl::mutex" }
%"class.vk::TimelineSemaphore" = type { %"class.vk::Semaphore", %"class.std::__1::shared_ptr.240" }
%"class.std::__1::shared_ptr.240" = type { %"struct.vk::TimelineSemaphore::Shared"*, %"class.std::__1::__shared_weak_count"* }
%"struct.vk::TimelineSemaphore::Shared" = type <{ %"class.marl::mutex", %"class.marl::ConditionVariable", i64, %"class.marl::containers::vector.241", %"class.std::__1::map", i32, [4 x i8] }>
%"class.marl::containers::vector.241" = type { %"class.marl::Allocator"*, i64, i64, [1 x %"struct.marl::aligned_storage<16, 8>::type"], %"struct.marl::aligned_storage<16, 8>::type"*, %"struct.marl::Allocation" }
%"class.std::__1::map" = type { %"class.std::__1::__tree.242" }
%"class.std::__1::__tree.242" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.243", %"class.std::__1::__compressed_pair.247" }
%"class.std::__1::__compressed_pair.243" = type { %"struct.std::__1::__compressed_pair_elem.162" }
%"class.std::__1::__compressed_pair.247" = type { %"struct.std::__1::__compressed_pair_elem.100" }
%"class.vk::BinarySemaphore" = type { %"class.vk::Semaphore", %struct.VkAllocationCallbacks*, i32, %"class.marl::Event", %"class.vk::BinarySemaphore::External"*, %"class.vk::BinarySemaphore::External"* }
%"class.vk::BinarySemaphore::External" = type opaque
%"class.vk::DispatchableObject" = type { %union.VK_LOADER_DATA, %"class.vk::CommandBuffer" }
%"class.vk::CommandBuffer" = type { %"class.vk::Device"*, i32, i32, %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.std::__1::unique_ptr.257"*, %"class.std::__1::unique_ptr.257"*, %"class.std::__1::__compressed_pair.258" }
%"class.std::__1::unique_ptr.257" = type opaque
%"class.std::__1::__compressed_pair.258" = type { %"struct.std::__1::__compressed_pair_elem.259" }
%"struct.std::__1::__compressed_pair_elem.259" = type { %"class.std::__1::unique_ptr.257"* }
%"class.marl::lock" = type { %"class.std::__1::unique_lock" }
%"class.std::__1::unique_lock" = type <{ %"class.std::__1::mutex"*, i8, [7 x i8] }>
%class.anon.295 = type { %"struct.marl::Event::Shared"* }
%struct.VkPresentInfoKHR = type { i32, i8*, i32, %class.VkNonDispatchableHandle.1*, i32, %class.VkNonDispatchableHandle.22*, i32*, i32* }
%"class.vk::SwapchainKHR" = type <{ %"class.vk::SurfaceKHR"*, %"class.vk::PresentImage"*, i32, i8, [3 x i8] }>
%"class.vk::SurfaceKHR" = type { i32 (...)**, %"class.vk::SwapchainKHR"* }
%"class.vk::PresentImage" = type <{ %"class.vk::Image"*, %"class.vk::DeviceMemory"*, i32, [4 x i8] }>
%"class.vk::Image" = type { %"class.vk::DeviceMemory"*, %"class.vk::Device"*, i64, i32, i32, %"class.vk::Format", %struct.VkExtent3D, i32, i32, i32, i32, i32, %"class.vk::Image"*, i32, %"class.marl::mutex", %"class.std::__1::unordered_set.267" }
%struct.VkExtent3D = type { i32, i32, i32 }
%"class.std::__1::unordered_set.267" = type { %"class.std::__1::__hash_table.268" }
%"class.std::__1::__hash_table.268" = type <{ %"class.std::__1::unique_ptr.269", %"class.std::__1::__compressed_pair.279", %"class.std::__1::__compressed_pair.284", %"class.std::__1::__compressed_pair.286", [4 x i8] }>
%"class.std::__1::unique_ptr.269" = type { %"class.std::__1::__compressed_pair.270" }
%"class.std::__1::__compressed_pair.270" = type { %"struct.std::__1::__compressed_pair_elem.271", %"struct.std::__1::__compressed_pair_elem.273" }
%"struct.std::__1::__compressed_pair_elem.271" = type { %"struct.std::__1::__hash_node_base.272"** }
%"struct.std::__1::__hash_node_base.272" = type { %"struct.std::__1::__hash_node_base.272"* }
%"struct.std::__1::__compressed_pair_elem.273" = type { %"class.std::__1::__bucket_list_deallocator.274" }
%"class.std::__1::__bucket_list_deallocator.274" = type { %"class.std::__1::__compressed_pair.275" }
%"class.std::__1::__compressed_pair.275" = type { %"struct.std::__1::__compressed_pair_elem.100" }
%"class.std::__1::__compressed_pair.279" = type { %"struct.std::__1::__compressed_pair_elem.280" }
%"struct.std::__1::__compressed_pair_elem.280" = type { %"struct.std::__1::__hash_node_base.272" }
%"class.std::__1::__compressed_pair.284" = type <{ %"struct.std::__1::__compressed_pair_elem.100", %"struct.std::__1::__compressed_pair_elem.285", [4 x i8] }>
%"struct.std::__1::__compressed_pair_elem.285" = type { %"class.vk::Image::Subresource" }
%"class.vk::Image::Subresource" = type { %struct.VkImageSubresource }
%struct.VkImageSubresource = type { i32, i32, i32 }
%"class.std::__1::__compressed_pair.286" = type { %"struct.std::__1::__compressed_pair_elem.182" }
%"class.vk::DeviceMemory" = type opaque
%struct.VkDebugUtilsLabelEXT = type { i32, i8*, i8*, [4 x float] }
%"class.std::__1::function.296" = type { %"class.std::__1::__function::__policy_func.299" }
%"class.std::__1::__function::__policy_func.299" = type { %"union.std::__1::__function::__policy_storage", %"struct.std::__1::__function::__policy_invoker.300", %"struct.std::__1::__function::__policy"* }
%"struct.std::__1::__function::__policy_invoker.300" = type { i1 (%"union.std::__1::__function::__policy_storage"*)* }
%"class.std::__1::__thread_specific_ptr" = type { i32 }
%"class.std::__1::unique_ptr.301" = type { %"class.std::__1::__compressed_pair.302" }
%"class.std::__1::__compressed_pair.302" = type { %"struct.std::__1::__compressed_pair_elem.303" }
%"struct.std::__1::__compressed_pair_elem.303" = type { %"class.std::__1::__thread_struct"* }
%"struct.std::__1::__split_buffer.319" = type { %"struct.vk::Queue::Task"**, %"struct.vk::Queue::Task"**, %"struct.vk::Queue::Task"**, %"class.std::__1::__compressed_pair.320" }
%"class.std::__1::__compressed_pair.320" = type { %"struct.std::__1::__compressed_pair_elem.97", %"struct.std::__1::__compressed_pair_elem.321" }
%"struct.std::__1::__compressed_pair_elem.321" = type { %"class.std::__1::allocator"* }
%"class.std::__1::allocator" = type { i8 }
%"struct.std::__1::__split_buffer.326" = type { %struct.VkSubmitInfo***, %struct.VkSubmitInfo***, %struct.VkSubmitInfo***, %"class.std::__1::__compressed_pair.327" }
%"class.std::__1::__compressed_pair.327" = type { %"struct.std::__1::__compressed_pair_elem.110", %"struct.std::__1::__compressed_pair_elem.328" }
%"struct.std::__1::__compressed_pair_elem.328" = type { %"class.std::__1::allocator.112"* }
%"class.std::__1::allocator.112" = type { i8 }
%"struct.std::__1::__shared_ptr_emplace" = type { %"class.std::__1::__shared_weak_count", %"struct.std::__1::__shared_ptr_emplace<sw::CountedEvent, std::__1::allocator<sw::CountedEvent> >::_Storage" }
%"struct.std::__1::__shared_ptr_emplace<sw::CountedEvent, std::__1::allocator<sw::CountedEvent> >::_Storage" = type { [32 x i8] }
%"struct.std::__1::__shared_ptr_emplace.348" = type { %"class.std::__1::__shared_weak_count", %"struct.std::__1::__shared_ptr_emplace<marl::WaitGroup::Data, std::__1::allocator<marl::WaitGroup::Data> >::_Storage" }
%"struct.std::__1::__shared_ptr_emplace<marl::WaitGroup::Data, std::__1::allocator<marl::WaitGroup::Data> >::_Storage" = type { [192 x i8] }
%"class.std::__1::__shared_ptr_pointer" = type { %"class.std::__1::__shared_weak_count", %"class.std::__1::__compressed_pair.352" }
%"class.std::__1::__compressed_pair.352" = type { %"struct.std::__1::__compressed_pair_elem.353" }
%"struct.std::__1::__compressed_pair_elem.353" = type { %"class.std::__1::__compressed_pair.354" }
%"class.std::__1::__compressed_pair.354" = type { %"struct.std::__1::__compressed_pair_elem.355", %"struct.std::__1::__compressed_pair_elem.136" }
%"struct.std::__1::__compressed_pair_elem.355" = type { %"struct.marl::Event::Shared"* }

$_ZNK23VkNonDispatchableHandleIP10VkBuffer_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP10VkBuffer_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP9VkImage_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP9VkImage_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP13VkSemaphore_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP13VkSemaphore_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP9VkFence_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP9VkFence_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP16VkDeviceMemory_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP16VkDeviceMemory_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP9VkEvent_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP9VkEvent_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP13VkQueryPool_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP13VkQueryPool_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP14VkBufferView_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP14VkBufferView_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP13VkImageView_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP13VkImageView_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP16VkShaderModule_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP16VkShaderModule_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP17VkPipelineCache_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP17VkPipelineCache_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP18VkPipelineLayout_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP18VkPipelineLayout_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP12VkPipeline_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP12VkPipeline_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP14VkRenderPass_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP14VkRenderPass_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP23VkDescriptorSetLayout_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP23VkDescriptorSetLayout_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP11VkSampler_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP11VkSampler_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP17VkDescriptorSet_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP17VkDescriptorSet_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP18VkDescriptorPool_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP18VkDescriptorPool_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP15VkFramebuffer_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP15VkFramebuffer_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP15VkCommandPool_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP15VkCommandPool_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP26VkSamplerYcbcrConversion_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP26VkSamplerYcbcrConversion_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP28VkDescriptorUpdateTemplate_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP28VkDescriptorUpdateTemplate_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP14VkSurfaceKHR_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP14VkSurfaceKHR_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP16VkSwapchainKHR_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP16VkSwapchainKHR_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP14VkDisplayKHR_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP14VkDisplayKHR_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP18VkDisplayModeKHR_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP18VkDisplayModeKHR_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP24VkDeferredOperationKHR_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP24VkDeferredOperationKHR_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP26VkDebugReportCallbackEXT_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP26VkDebugReportCallbackEXT_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP15VkCuModuleNVX_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP15VkCuModuleNVX_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP17VkCuFunctionNVX_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP17VkCuFunctionNVX_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP26VkDebugUtilsMessengerEXT_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP26VkDebugUtilsMessengerEXT_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP22VkValidationCacheEXT_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP22VkValidationCacheEXT_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP27VkAccelerationStructureNV_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP27VkAccelerationStructureNV_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP33VkPerformanceConfigurationINTEL_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP33VkPerformanceConfigurationINTEL_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP28VkIndirectCommandsLayoutNV_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP28VkIndirectCommandsLayoutNV_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP22VkPrivateDataSlotEXT_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP22VkPrivateDataSlotEXT_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP28VkAccelerationStructureKHR_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP28VkAccelerationStructureKHR_TEaSEm = comdat any

$_ZNSt3__16threadC2IMN2vk5QueueEFvPN4marl9SchedulerEEJPS3_RS6_EvEEOT_DpOT0_ = comdat any

$_ZN2sw4ChanIN2vk5Queue4TaskEE3putERKS3_ = comdat any

$_ZN2sw4ChanIP12VkSubmitInfoE3putERKS2_ = comdat any

$_ZN2sw4ChanIN2vk5Queue4TaskEE4takeEv = comdat any

$_ZNSt3__110shared_ptrIN2sw12CountedEventEED2Ev = comdat any

$_ZN2sw4ChanIP12VkSubmitInfoE7tryTakeEv = comdat any

$_ZNSt3__112__deque_baseIP12VkSubmitInfoNS_9allocatorIS2_EEED2Ev = comdat any

$_ZNSt3__112__deque_baseIP12VkSubmitInfoNS_9allocatorIS2_EEE5clearEv = comdat any

$_ZNSt3__114__split_bufferIPP12VkSubmitInfoNS_9allocatorIS3_EEED2Ev = comdat any

$_ZNSt3__112__deque_baseIN2vk5Queue4TaskENS_9allocatorIS3_EEED2Ev = comdat any

$_ZNSt3__112__deque_baseIN2vk5Queue4TaskENS_9allocatorIS3_EEE5clearEv = comdat any

$_ZNSt3__114__split_bufferIPN2vk5Queue4TaskENS_9allocatorIS4_EEED2Ev = comdat any

$_ZN4marl5Event6Shared6signalEv = comdat any

$_ZNSt3__110shared_ptrIN4marl5Event6SharedEED2Ev = comdat any

$_ZN4marl17ConditionVariable4waitIZNS_5Event6Shared4waitEvEUlvE_EEvRNS_4lockEOT_ = comdat any

$_ZNSt3__110__function16__policy_invokerIFbvEE11__call_implINS0_20__default_alloc_funcIZN4marl5Event6Shared4waitEvEUlvE_S2_EEEEbPKNS0_16__policy_storageE = comdat any

$_ZNSt3__114__thread_proxyINS_5tupleIJNS_10unique_ptrINS_15__thread_structENS_14default_deleteIS3_EEEEMN2vk5QueueEFvPN4marl9SchedulerEEPS8_SB_EEEEEPvSG_ = comdat any

$_ZNSt3__110unique_ptrINS_15__thread_structENS_14default_deleteIS1_EEE5resetEPS1_ = comdat any

$_ZNSt3__15dequeIN2vk5Queue4TaskENS_9allocatorIS3_EEE9push_backERKS3_ = comdat any

$_ZNSt3__15dequeIN2vk5Queue4TaskENS_9allocatorIS3_EEE19__add_back_capacityEv = comdat any

$_ZNSt3__114__split_bufferIPN2vk5Queue4TaskENS_9allocatorIS4_EEE9push_backEOS4_ = comdat any

$_ZNSt3__114__split_bufferIPN2vk5Queue4TaskENS_9allocatorIS4_EEE10push_frontEOS4_ = comdat any

$_ZNSt3__114__split_bufferIPN2vk5Queue4TaskERNS_9allocatorIS4_EEE9push_backEOS4_ = comdat any

$_ZNSt3__114__split_bufferIPN2vk5Queue4TaskERNS_9allocatorIS4_EEE10push_frontERKS4_ = comdat any

$_ZNSt3__15dequeIP12VkSubmitInfoNS_9allocatorIS2_EEE9push_backERKS2_ = comdat any

$_ZNSt3__15dequeIP12VkSubmitInfoNS_9allocatorIS2_EEE19__add_back_capacityEv = comdat any

$_ZNSt3__114__split_bufferIPP12VkSubmitInfoNS_9allocatorIS3_EEE9push_backEOS3_ = comdat any

$_ZNSt3__114__split_bufferIPP12VkSubmitInfoNS_9allocatorIS3_EEE10push_frontEOS3_ = comdat any

$_ZNSt3__114__split_bufferIPP12VkSubmitInfoRNS_9allocatorIS3_EEE9push_backEOS3_ = comdat any

$_ZNSt3__114__split_bufferIPP12VkSubmitInfoRNS_9allocatorIS3_EEE10push_frontERKS3_ = comdat any

$_ZNSt3__15dequeIN2vk5Queue4TaskENS_9allocatorIS3_EEE9pop_frontEv = comdat any

$_ZNSt3__15dequeIN2vk5Queue4TaskENS_9allocatorIS3_EEE26__maybe_remove_front_spareEb = comdat any

$_ZN2sw12CountedEventC2Eb = comdat any

$_ZNSt3__120__shared_ptr_emplaceIN2sw12CountedEventENS_9allocatorIS2_EEED2Ev = comdat any

$_ZNSt3__120__shared_ptr_emplaceIN2sw12CountedEventENS_9allocatorIS2_EEED0Ev = comdat any

$_ZNSt3__120__shared_ptr_emplaceIN2sw12CountedEventENS_9allocatorIS2_EEE16__on_zero_sharedEv = comdat any

$_ZNSt3__120__shared_ptr_emplaceIN2sw12CountedEventENS_9allocatorIS2_EEE21__on_zero_shared_weakEv = comdat any

$_ZNSt3__120__shared_ptr_emplaceIN4marl9WaitGroup4DataENS_9allocatorIS3_EEED2Ev = comdat any

$_ZNSt3__120__shared_ptr_emplaceIN4marl9WaitGroup4DataENS_9allocatorIS3_EEED0Ev = comdat any

$_ZNSt3__120__shared_ptr_emplaceIN4marl9WaitGroup4DataENS_9allocatorIS3_EEE16__on_zero_sharedEv = comdat any

$_ZNSt3__120__shared_ptr_emplaceIN4marl9WaitGroup4DataENS_9allocatorIS3_EEE21__on_zero_shared_weakEv = comdat any

$_ZNSt3__110shared_ptrIN4marl9WaitGroup4DataEED2Ev = comdat any

$_ZNSt3__120__shared_ptr_pointerIPN4marl5Event6SharedENS1_9Allocator7DeleterENS_9allocatorIS3_EEED0Ev = comdat any

$_ZNSt3__120__shared_ptr_pointerIPN4marl5Event6SharedENS1_9Allocator7DeleterENS_9allocatorIS3_EEE16__on_zero_sharedEv = comdat any

$_ZNSt3__120__shared_ptr_pointerIPN4marl5Event6SharedENS1_9Allocator7DeleterENS_9allocatorIS3_EEE21__on_zero_shared_weakEv = comdat any

$_ZNSt3__15dequeIP12VkSubmitInfoNS_9allocatorIS2_EEE26__maybe_remove_front_spareEb = comdat any

$_ZZNSt3__110__function8__policy15__choose_policyINS0_20__default_alloc_funcIZN4marl5Event6Shared4waitEvEUlvE_FbvEEEEEPKS1_NS_17integral_constantIbLb1EEEE9__policy_ = comdat any

$_ZTVNSt3__120__shared_ptr_emplaceIN2sw12CountedEventENS_9allocatorIS2_EEEE = comdat any

$_ZTVNSt3__120__shared_ptr_emplaceIN4marl9WaitGroup4DataENS_9allocatorIS3_EEEE = comdat any

$_ZTVNSt3__120__shared_ptr_pointerIPN4marl5Event6SharedENS1_9Allocator7DeleterENS_9allocatorIS3_EEEE = comdat any

@.str = private unnamed_addr constant [45 x i8] c"%s:%d WARNING: submitInfo.pNext->sType = %s\0A\00", align 1
@.str.1 = private unnamed_addr constant [53 x i8] c"../../third_party/swiftshader/src/Vulkan/VkQueue.cpp\00", align 1
@.str.2 = private unnamed_addr constant [52 x i8] c"%s:%d WARNING: UNSUPPORTED: Unknown semaphore type\0A\00", align 1
@__const._ZN2vk5Queue11submitQueueERKNS0_4TaskE.executionState = private unnamed_addr constant %"struct.vk::CommandBuffer::ExecutionState" { %"class.sw::Renderer"* inttoptr (i64 -6148914691236517206 to %"class.sw::Renderer"*), %"class.sw::CountedEvent"* inttoptr (i64 -6148914691236517206 to %"class.sw::CountedEvent"*), %"class.vk::RenderPass"* inttoptr (i64 -6148914691236517206 to %"class.vk::RenderPass"*), %"class.vk::Framebuffer"* inttoptr (i64 -6148914691236517206 to %"class.vk::Framebuffer"*), %"struct.std::__1::array.253" { [2 x %"struct.vk::CommandBuffer::ExecutionState::PipelineState"] [%"struct.vk::CommandBuffer::ExecutionState::PipelineState" { %"class.vk::Pipeline"* inttoptr (i64 -6148914691236517206 to %"class.vk::Pipeline"*), %"struct.std::__1::array.254" { [4 x %"class.vk::DescriptorSet"*] [%"class.vk::DescriptorSet"* inttoptr (i64 -6148914691236517206 to %"class.vk::DescriptorSet"*), %"class.vk::DescriptorSet"* inttoptr (i64 -6148914691236517206 to %"class.vk::DescriptorSet"*), %"class.vk::DescriptorSet"* inttoptr (i64 -6148914691236517206 to %"class.vk::DescriptorSet"*), %"class.vk::DescriptorSet"* inttoptr (i64 -6148914691236517206 to %"class.vk::DescriptorSet"*)] }, %"struct.std::__1::array" { [4 x i8*] [i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*)] }, %"struct.std::__1::array.78" { [12 x i32] [i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766] } }, %"struct.vk::CommandBuffer::ExecutionState::PipelineState" { %"class.vk::Pipeline"* inttoptr (i64 -6148914691236517206 to %"class.vk::Pipeline"*), %"struct.std::__1::array.254" { [4 x %"class.vk::DescriptorSet"*] [%"class.vk::DescriptorSet"* inttoptr (i64 -6148914691236517206 to %"class.vk::DescriptorSet"*), %"class.vk::DescriptorSet"* inttoptr (i64 -6148914691236517206 to %"class.vk::DescriptorSet"*), %"class.vk::DescriptorSet"* inttoptr (i64 -6148914691236517206 to %"class.vk::DescriptorSet"*), %"class.vk::DescriptorSet"* inttoptr (i64 -6148914691236517206 to %"class.vk::DescriptorSet"*)] }, %"struct.std::__1::array" { [4 x i8*] [i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*)] }, %"struct.std::__1::array.78" { [12 x i32] [i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766] } }] }, %"struct.vk::DynamicState" { %struct.VkViewport { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, %struct.VkRect2D { %struct.VkOffset2D { i32 -1431655766, i32 -1431655766 }, %struct.VkExtent2D { i32 -1431655766, i32 -1431655766 } }, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA", %"struct.sw::vec.49" { %union.anon.50 { [4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000] } }, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, [2 x i32] [i32 -1431655766, i32 -1431655766], [2 x i32] [i32 -1431655766, i32 -1431655766], [2 x i32] [i32 -1431655766, i32 -1431655766], [4 x i8] c"\AA\AA\AA\AA" }, %"struct.vk::Pipeline::PushConstantStorage" { [128 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA" }, [16 x %"struct.vk::VertexInputBinding"] [%"struct.vk::VertexInputBinding" { %"class.vk::Buffer"* inttoptr (i64 -6148914691236517206 to %"class.vk::Buffer"*), i64 -6148914691236517206 }, %"struct.vk::VertexInputBinding" { %"class.vk::Buffer"* inttoptr (i64 -6148914691236517206 to %"class.vk::Buffer"*), i64 -6148914691236517206 }, %"struct.vk::VertexInputBinding" { %"class.vk::Buffer"* inttoptr (i64 -6148914691236517206 to %"class.vk::Buffer"*), i64 -6148914691236517206 }, %"struct.vk::VertexInputBinding" { %"class.vk::Buffer"* inttoptr (i64 -6148914691236517206 to %"class.vk::Buffer"*), i64 -6148914691236517206 }, %"struct.vk::VertexInputBinding" { %"class.vk::Buffer"* inttoptr (i64 -6148914691236517206 to %"class.vk::Buffer"*), i64 -6148914691236517206 }, %"struct.vk::VertexInputBinding" { %"class.vk::Buffer"* inttoptr (i64 -6148914691236517206 to %"class.vk::Buffer"*), i64 -6148914691236517206 }, %"struct.vk::VertexInputBinding" { %"class.vk::Buffer"* inttoptr (i64 -6148914691236517206 to %"class.vk::Buffer"*), i64 -6148914691236517206 }, %"struct.vk::VertexInputBinding" { %"class.vk::Buffer"* inttoptr (i64 -6148914691236517206 to %"class.vk::Buffer"*), i64 -6148914691236517206 }, %"struct.vk::VertexInputBinding" { %"class.vk::Buffer"* inttoptr (i64 -6148914691236517206 to %"class.vk::Buffer"*), i64 -6148914691236517206 }, %"struct.vk::VertexInputBinding" { %"class.vk::Buffer"* inttoptr (i64 -6148914691236517206 to %"class.vk::Buffer"*), i64 -6148914691236517206 }, %"struct.vk::VertexInputBinding" { %"class.vk::Buffer"* inttoptr (i64 -6148914691236517206 to %"class.vk::Buffer"*), i64 -6148914691236517206 }, %"struct.vk::VertexInputBinding" { %"class.vk::Buffer"* inttoptr (i64 -6148914691236517206 to %"class.vk::Buffer"*), i64 -6148914691236517206 }, %"struct.vk::VertexInputBinding" { %"class.vk::Buffer"* inttoptr (i64 -6148914691236517206 to %"class.vk::Buffer"*), i64 -6148914691236517206 }, %"struct.vk::VertexInputBinding" { %"class.vk::Buffer"* inttoptr (i64 -6148914691236517206 to %"class.vk::Buffer"*), i64 -6148914691236517206 }, %"struct.vk::VertexInputBinding" { %"class.vk::Buffer"* inttoptr (i64 -6148914691236517206 to %"class.vk::Buffer"*), i64 -6148914691236517206 }, %"struct.vk::VertexInputBinding" { %"class.vk::Buffer"* inttoptr (i64 -6148914691236517206 to %"class.vk::Buffer"*), i64 -6148914691236517206 }], %"struct.vk::VertexInputBinding" { %"class.vk::Buffer"* inttoptr (i64 -6148914691236517206 to %"class.vk::Buffer"*), i64 -6148914691236517206 }, i32 -1431655766, i32 -1431655766, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, align 16
@.str.3 = private unnamed_addr constant [10 x i8] c"Queue<%p>\00", align 1
@.str.4 = private unnamed_addr constant [42 x i8] c"%s:%d WARNING: UNREACHABLE: task.type %d\0A\00", align 1
@.str.5 = private unnamed_addr constant [48 x i8] c"%s:%d WARNING: submitInfo[%d]->pNext sType: %s\0A\00", align 1
@_ZZNSt3__110__function8__policy15__choose_policyINS0_20__default_alloc_funcIZN4marl5Event6Shared4waitEvEUlvE_FbvEEEEEPKS1_NS_17integral_constantIbLb1EEEE9__policy_ = linkonce_odr hidden constant %"struct.std::__1::__function::__policy" zeroinitializer, comdat, align 8
@.str.6 = private unnamed_addr constant [26 x i8] c"thread constructor failed\00", align 1
@_ZTVNSt3__120__shared_ptr_emplaceIN2sw12CountedEventENS_9allocatorIS2_EEEE = linkonce_odr hidden unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%"struct.std::__1::__shared_ptr_emplace"*)* @_ZNSt3__120__shared_ptr_emplaceIN2sw12CountedEventENS_9allocatorIS2_EEED2Ev to i8*), i8* bitcast (void (%"struct.std::__1::__shared_ptr_emplace"*)* @_ZNSt3__120__shared_ptr_emplaceIN2sw12CountedEventENS_9allocatorIS2_EEED0Ev to i8*), i8* bitcast (void (%"struct.std::__1::__shared_ptr_emplace"*)* @_ZNSt3__120__shared_ptr_emplaceIN2sw12CountedEventENS_9allocatorIS2_EEE16__on_zero_sharedEv to i8*), i8* bitcast (i8* (%"class.std::__1::__shared_weak_count"*, %"class.std::type_info"*)* @_ZNKSt3__119__shared_weak_count13__get_deleterERKSt9type_info to i8*), i8* bitcast (void (%"struct.std::__1::__shared_ptr_emplace"*)* @_ZNSt3__120__shared_ptr_emplaceIN2sw12CountedEventENS_9allocatorIS2_EEE21__on_zero_shared_weakEv to i8*)] }, comdat, align 8
@_ZN4marl9Allocator7DefaultE = external local_unnamed_addr global %"class.marl::Allocator"*, align 8
@_ZTVNSt3__120__shared_ptr_emplaceIN4marl9WaitGroup4DataENS_9allocatorIS3_EEEE = linkonce_odr hidden unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%"struct.std::__1::__shared_ptr_emplace.348"*)* @_ZNSt3__120__shared_ptr_emplaceIN4marl9WaitGroup4DataENS_9allocatorIS3_EEED2Ev to i8*), i8* bitcast (void (%"struct.std::__1::__shared_ptr_emplace.348"*)* @_ZNSt3__120__shared_ptr_emplaceIN4marl9WaitGroup4DataENS_9allocatorIS3_EEED0Ev to i8*), i8* bitcast (void (%"struct.std::__1::__shared_ptr_emplace.348"*)* @_ZNSt3__120__shared_ptr_emplaceIN4marl9WaitGroup4DataENS_9allocatorIS3_EEE16__on_zero_sharedEv to i8*), i8* bitcast (i8* (%"class.std::__1::__shared_weak_count"*, %"class.std::type_info"*)* @_ZNKSt3__119__shared_weak_count13__get_deleterERKSt9type_info to i8*), i8* bitcast (void (%"struct.std::__1::__shared_ptr_emplace.348"*)* @_ZNSt3__120__shared_ptr_emplaceIN4marl9WaitGroup4DataENS_9allocatorIS3_EEE21__on_zero_shared_weakEv to i8*)] }, comdat, align 8
@_ZTVNSt3__120__shared_ptr_pointerIPN4marl5Event6SharedENS1_9Allocator7DeleterENS_9allocatorIS3_EEEE = linkonce_odr hidden unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.std::__1::__shared_weak_count"*)* @_ZNSt3__119__shared_weak_countD2Ev to i8*), i8* bitcast (void (%"class.std::__1::__shared_ptr_pointer"*)* @_ZNSt3__120__shared_ptr_pointerIPN4marl5Event6SharedENS1_9Allocator7DeleterENS_9allocatorIS3_EEED0Ev to i8*), i8* bitcast (void (%"class.std::__1::__shared_ptr_pointer"*)* @_ZNSt3__120__shared_ptr_pointerIPN4marl5Event6SharedENS1_9Allocator7DeleterENS_9allocatorIS3_EEE16__on_zero_sharedEv to i8*), i8* bitcast (i8* (%"class.std::__1::__shared_weak_count"*, %"class.std::type_info"*)* @_ZNKSt3__119__shared_weak_count13__get_deleterERKSt9type_info to i8*), i8* bitcast (void (%"class.std::__1::__shared_ptr_pointer"*)* @_ZNSt3__120__shared_ptr_pointerIPN4marl5Event6SharedENS1_9Allocator7DeleterENS_9allocatorIS3_EEE21__on_zero_shared_weakEv to i8*)] }, comdat, align 8

@_ZN2vk5QueueC1EPNS_6DeviceEPN4marl9SchedulerE = hidden unnamed_addr alias void (%"class.vk::Queue"*, %"class.vk::Device"*, %"class.marl::Scheduler"*), void (%"class.vk::Queue"*, %"class.vk::Device"*, %"class.marl::Scheduler"*)* @_ZN2vk5QueueC2EPNS_6DeviceEPN4marl9SchedulerE
@_ZN2vk5QueueD1Ev = hidden unnamed_addr alias void (%"class.vk::Queue"*), void (%"class.vk::Queue"*)* @_ZN2vk5QueueD2Ev

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP10VkBuffer_TEcvPvEv(%class.VkNonDispatchableHandle*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP10VkBuffer_TEaSEm(%class.VkNonDispatchableHandle*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle, %class.VkNonDispatchableHandle* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP9VkImage_TEcvPvEv(%class.VkNonDispatchableHandle.0*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.0* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP9VkImage_TEaSEm(%class.VkNonDispatchableHandle.0*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.0, %class.VkNonDispatchableHandle.0* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP13VkSemaphore_TEcvPvEv(%class.VkNonDispatchableHandle.1*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.1* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP13VkSemaphore_TEaSEm(%class.VkNonDispatchableHandle.1*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.1, %class.VkNonDispatchableHandle.1* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP9VkFence_TEcvPvEv(%class.VkNonDispatchableHandle.2*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.2* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP9VkFence_TEaSEm(%class.VkNonDispatchableHandle.2*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.2, %class.VkNonDispatchableHandle.2* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP16VkDeviceMemory_TEcvPvEv(%class.VkNonDispatchableHandle.3*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.3* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP16VkDeviceMemory_TEaSEm(%class.VkNonDispatchableHandle.3*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.3, %class.VkNonDispatchableHandle.3* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP9VkEvent_TEcvPvEv(%class.VkNonDispatchableHandle.4*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.4* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP9VkEvent_TEaSEm(%class.VkNonDispatchableHandle.4*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.4, %class.VkNonDispatchableHandle.4* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP13VkQueryPool_TEcvPvEv(%class.VkNonDispatchableHandle.5*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.5* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP13VkQueryPool_TEaSEm(%class.VkNonDispatchableHandle.5*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.5, %class.VkNonDispatchableHandle.5* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP14VkBufferView_TEcvPvEv(%class.VkNonDispatchableHandle.6*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.6* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP14VkBufferView_TEaSEm(%class.VkNonDispatchableHandle.6*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.6, %class.VkNonDispatchableHandle.6* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP13VkImageView_TEcvPvEv(%class.VkNonDispatchableHandle.7*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.7* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP13VkImageView_TEaSEm(%class.VkNonDispatchableHandle.7*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.7, %class.VkNonDispatchableHandle.7* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP16VkShaderModule_TEcvPvEv(%class.VkNonDispatchableHandle.8*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.8* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP16VkShaderModule_TEaSEm(%class.VkNonDispatchableHandle.8*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.8, %class.VkNonDispatchableHandle.8* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP17VkPipelineCache_TEcvPvEv(%class.VkNonDispatchableHandle.9*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.9* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP17VkPipelineCache_TEaSEm(%class.VkNonDispatchableHandle.9*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.9, %class.VkNonDispatchableHandle.9* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP18VkPipelineLayout_TEcvPvEv(%class.VkNonDispatchableHandle.10*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.10* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP18VkPipelineLayout_TEaSEm(%class.VkNonDispatchableHandle.10*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.10, %class.VkNonDispatchableHandle.10* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP12VkPipeline_TEcvPvEv(%class.VkNonDispatchableHandle.11*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.11* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP12VkPipeline_TEaSEm(%class.VkNonDispatchableHandle.11*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.11, %class.VkNonDispatchableHandle.11* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP14VkRenderPass_TEcvPvEv(%class.VkNonDispatchableHandle.12*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.12* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP14VkRenderPass_TEaSEm(%class.VkNonDispatchableHandle.12*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.12, %class.VkNonDispatchableHandle.12* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP23VkDescriptorSetLayout_TEcvPvEv(%class.VkNonDispatchableHandle.13*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.13* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP23VkDescriptorSetLayout_TEaSEm(%class.VkNonDispatchableHandle.13*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.13, %class.VkNonDispatchableHandle.13* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP11VkSampler_TEcvPvEv(%class.VkNonDispatchableHandle.14*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.14* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP11VkSampler_TEaSEm(%class.VkNonDispatchableHandle.14*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.14, %class.VkNonDispatchableHandle.14* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP17VkDescriptorSet_TEcvPvEv(%class.VkNonDispatchableHandle.15*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.15* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP17VkDescriptorSet_TEaSEm(%class.VkNonDispatchableHandle.15*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.15, %class.VkNonDispatchableHandle.15* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP18VkDescriptorPool_TEcvPvEv(%class.VkNonDispatchableHandle.16*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.16* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP18VkDescriptorPool_TEaSEm(%class.VkNonDispatchableHandle.16*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.16, %class.VkNonDispatchableHandle.16* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP15VkFramebuffer_TEcvPvEv(%class.VkNonDispatchableHandle.17*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.17* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP15VkFramebuffer_TEaSEm(%class.VkNonDispatchableHandle.17*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.17, %class.VkNonDispatchableHandle.17* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP15VkCommandPool_TEcvPvEv(%class.VkNonDispatchableHandle.18*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.18* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP15VkCommandPool_TEaSEm(%class.VkNonDispatchableHandle.18*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.18, %class.VkNonDispatchableHandle.18* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP26VkSamplerYcbcrConversion_TEcvPvEv(%class.VkNonDispatchableHandle.19*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.19* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP26VkSamplerYcbcrConversion_TEaSEm(%class.VkNonDispatchableHandle.19*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.19, %class.VkNonDispatchableHandle.19* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP28VkDescriptorUpdateTemplate_TEcvPvEv(%class.VkNonDispatchableHandle.20*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.20* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP28VkDescriptorUpdateTemplate_TEaSEm(%class.VkNonDispatchableHandle.20*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.20, %class.VkNonDispatchableHandle.20* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP14VkSurfaceKHR_TEcvPvEv(%class.VkNonDispatchableHandle.21*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.21* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP14VkSurfaceKHR_TEaSEm(%class.VkNonDispatchableHandle.21*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.21, %class.VkNonDispatchableHandle.21* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP16VkSwapchainKHR_TEcvPvEv(%class.VkNonDispatchableHandle.22*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.22* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP16VkSwapchainKHR_TEaSEm(%class.VkNonDispatchableHandle.22*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.22, %class.VkNonDispatchableHandle.22* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP14VkDisplayKHR_TEcvPvEv(%class.VkNonDispatchableHandle.23*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.23* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP14VkDisplayKHR_TEaSEm(%class.VkNonDispatchableHandle.23*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.23, %class.VkNonDispatchableHandle.23* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP18VkDisplayModeKHR_TEcvPvEv(%class.VkNonDispatchableHandle.24*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.24* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP18VkDisplayModeKHR_TEaSEm(%class.VkNonDispatchableHandle.24*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.24, %class.VkNonDispatchableHandle.24* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP24VkDeferredOperationKHR_TEcvPvEv(%class.VkNonDispatchableHandle.25*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.25* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP24VkDeferredOperationKHR_TEaSEm(%class.VkNonDispatchableHandle.25*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.25, %class.VkNonDispatchableHandle.25* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP26VkDebugReportCallbackEXT_TEcvPvEv(%class.VkNonDispatchableHandle.26*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.26* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP26VkDebugReportCallbackEXT_TEaSEm(%class.VkNonDispatchableHandle.26*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.26, %class.VkNonDispatchableHandle.26* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP15VkCuModuleNVX_TEcvPvEv(%class.VkNonDispatchableHandle.27*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.27* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP15VkCuModuleNVX_TEaSEm(%class.VkNonDispatchableHandle.27*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.27, %class.VkNonDispatchableHandle.27* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP17VkCuFunctionNVX_TEcvPvEv(%class.VkNonDispatchableHandle.28*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.28* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP17VkCuFunctionNVX_TEaSEm(%class.VkNonDispatchableHandle.28*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.28, %class.VkNonDispatchableHandle.28* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP26VkDebugUtilsMessengerEXT_TEcvPvEv(%class.VkNonDispatchableHandle.29*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.29* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP26VkDebugUtilsMessengerEXT_TEaSEm(%class.VkNonDispatchableHandle.29*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.29, %class.VkNonDispatchableHandle.29* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP22VkValidationCacheEXT_TEcvPvEv(%class.VkNonDispatchableHandle.30*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.30* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP22VkValidationCacheEXT_TEaSEm(%class.VkNonDispatchableHandle.30*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.30, %class.VkNonDispatchableHandle.30* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP27VkAccelerationStructureNV_TEcvPvEv(%class.VkNonDispatchableHandle.31*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.31* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP27VkAccelerationStructureNV_TEaSEm(%class.VkNonDispatchableHandle.31*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.31, %class.VkNonDispatchableHandle.31* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP33VkPerformanceConfigurationINTEL_TEcvPvEv(%class.VkNonDispatchableHandle.32*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.32* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP33VkPerformanceConfigurationINTEL_TEaSEm(%class.VkNonDispatchableHandle.32*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.32, %class.VkNonDispatchableHandle.32* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP28VkIndirectCommandsLayoutNV_TEcvPvEv(%class.VkNonDispatchableHandle.33*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.33* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP28VkIndirectCommandsLayoutNV_TEaSEm(%class.VkNonDispatchableHandle.33*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.33, %class.VkNonDispatchableHandle.33* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP22VkPrivateDataSlotEXT_TEcvPvEv(%class.VkNonDispatchableHandle.34*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.34* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP22VkPrivateDataSlotEXT_TEaSEm(%class.VkNonDispatchableHandle.34*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.34, %class.VkNonDispatchableHandle.34* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP28VkAccelerationStructureKHR_TEcvPvEv(%class.VkNonDispatchableHandle.35*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.35* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP28VkAccelerationStructureKHR_TEaSEm(%class.VkNonDispatchableHandle.35*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.35, %class.VkNonDispatchableHandle.35* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN2vk5QueueC2EPNS_6DeviceEPN4marl9SchedulerE(%"class.vk::Queue"*, %"class.vk::Device"*, %"class.marl::Scheduler"*) unnamed_addr #0 align 2 {
  %4 = alloca %"class.marl::Scheduler"*, align 8
  %5 = alloca %"class.std::__1::thread", align 8
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { i64, i64 }*
  %8 = alloca %"class.vk::Queue"*, align 8
  store %"class.marl::Scheduler"* %2, %"class.marl::Scheduler"** %4, align 8
  %9 = getelementptr inbounds %"class.vk::Queue", %"class.vk::Queue"* %0, i64 0, i32 0, i32 0
  store i64 30261470, i64* %9, align 8
  %10 = getelementptr inbounds %"class.vk::Queue", %"class.vk::Queue"* %0, i64 0, i32 1
  store %"class.vk::Device"* %1, %"class.vk::Device"** %10, align 8
  %11 = getelementptr inbounds %"class.vk::Queue", %"class.vk::Queue"* %0, i64 0, i32 2
  %12 = getelementptr inbounds %"class.vk::Queue", %"class.vk::Queue"* %0, i64 0, i32 5, i32 0
  %13 = bitcast %"class.std::__1::thread"* %5 to i8*
  %14 = bitcast %"class.std::__1::unique_ptr"* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %14, i8 0, i64 288, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %13) #10
  %15 = bitcast <2 x i64>* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %15) #10
  store <2 x i64> <i64 ptrtoint (void (%"class.vk::Queue"*, %"class.marl::Scheduler"*)* @_ZN2vk5Queue8taskLoopEPN4marl9SchedulerE to i64), i64 0>, <2 x i64>* %6, align 16
  %16 = bitcast %"class.vk::Queue"** %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #10
  store %"class.vk::Queue"* %0, %"class.vk::Queue"** %8, align 8
  call void @_ZNSt3__16threadC2IMN2vk5QueueEFvPN4marl9SchedulerEEJPS3_RS6_EvEEOT_DpOT0_(%"class.std::__1::thread"* nonnull %5, { i64, i64 }* nonnull dereferenceable(16) %7, %"class.vk::Queue"** nonnull dereferenceable(8) %8, %"class.marl::Scheduler"** nonnull dereferenceable(8) %4) #11
  %17 = load i64, i64* %12, align 8
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %20, label %19

19:                                               ; preds = %3
  call void @_ZSt9terminatev() #12
  unreachable

20:                                               ; preds = %3
  %21 = getelementptr inbounds %"class.std::__1::thread", %"class.std::__1::thread"* %5, i64 0, i32 0
  %22 = load i64, i64* %21, align 8
  store i64 %22, i64* %12, align 8
  store i64 0, i64* %21, align 8
  call void @_ZNSt3__16threadD1Ev(%"class.std::__1::thread"* nonnull %5) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %15) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %13) #10
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN2vk5Queue8taskLoopEPN4marl9SchedulerE(%"class.vk::Queue"*, %"class.marl::Scheduler"*) #0 align 2 {
  %3 = alloca %"struct.vk::Queue::Task", align 8
  tail call void (i8*, ...) @_ZN4marl6Thread7setNameEPKcz(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i64 0, i64 0), %"class.vk::Queue"* %0) #13
  tail call void @_ZN4marl9Scheduler4bindEv(%"class.marl::Scheduler"* %1) #13
  %4 = bitcast %"struct.vk::Queue::Task"* %3 to i8*
  %5 = getelementptr inbounds %"class.vk::Queue", %"class.vk::Queue"* %0, i64 0, i32 3
  %6 = getelementptr inbounds %"struct.vk::Queue::Task", %"struct.vk::Queue::Task"* %3, i64 0, i32 4
  %7 = getelementptr inbounds %"struct.vk::Queue::Task", %"struct.vk::Queue::Task"* %3, i64 0, i32 3, i32 1
  br label %8

8:                                                ; preds = %25, %2
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %4) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4, i8 -86, i64 40, i1 false)
  call void @_ZN2sw4ChanIN2vk5Queue4TaskEE4takeEv(%"struct.vk::Queue::Task"* nonnull sret %3, %"class.sw::Chan"* %5) #11
  %9 = load i32, i32* %6, align 8
  switch i32 %9, label %11 [
    i32 0, label %26
    i32 1, label %10
  ]

10:                                               ; preds = %8
  call void @_ZN2vk5Queue11submitQueueERKNS0_4TaskE(%"class.vk::Queue"* %0, %"struct.vk::Queue::Task"* nonnull dereferenceable(40) %3) #11
  br label %12

11:                                               ; preds = %8
  call void (i8*, ...) @_ZN2sw4warnEPKcz(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.1, i64 0, i64 0), i32 277, i32 %9) #13
  br label %12

12:                                               ; preds = %10, %11
  %13 = load %"class.std::__1::__shared_weak_count"*, %"class.std::__1::__shared_weak_count"** %7, align 8
  %14 = icmp eq %"class.std::__1::__shared_weak_count"* %13, null
  br i1 %14, label %25, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds %"class.std::__1::__shared_weak_count", %"class.std::__1::__shared_weak_count"* %13, i64 0, i32 0, i32 1
  %17 = atomicrmw add i64* %16, i64 -1 acq_rel
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %19, label %25

19:                                               ; preds = %15
  %20 = getelementptr inbounds %"class.std::__1::__shared_weak_count", %"class.std::__1::__shared_weak_count"* %13, i64 0, i32 0
  %21 = bitcast %"class.std::__1::__shared_weak_count"* %13 to void (%"class.std::__1::__shared_count"*)***
  %22 = load void (%"class.std::__1::__shared_count"*)**, void (%"class.std::__1::__shared_count"*)*** %21, align 8
  %23 = getelementptr inbounds void (%"class.std::__1::__shared_count"*)*, void (%"class.std::__1::__shared_count"*)** %22, i64 2
  %24 = load void (%"class.std::__1::__shared_count"*)*, void (%"class.std::__1::__shared_count"*)** %23, align 8
  call void %24(%"class.std::__1::__shared_count"* %20) #13
  call void @_ZNSt3__119__shared_weak_count14__release_weakEv(%"class.std::__1::__shared_weak_count"* nonnull %13) #13
  br label %25

25:                                               ; preds = %12, %15, %19
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %4) #10
  br label %8

26:                                               ; preds = %8
  %27 = load %"class.std::__1::__shared_weak_count"*, %"class.std::__1::__shared_weak_count"** %7, align 8
  %28 = icmp eq %"class.std::__1::__shared_weak_count"* %27, null
  br i1 %28, label %39, label %29

29:                                               ; preds = %26
  %30 = getelementptr inbounds %"class.std::__1::__shared_weak_count", %"class.std::__1::__shared_weak_count"* %27, i64 0, i32 0, i32 1
  %31 = atomicrmw add i64* %30, i64 -1 acq_rel
  %32 = icmp eq i64 %31, 0
  br i1 %32, label %33, label %39

33:                                               ; preds = %29
  %34 = getelementptr inbounds %"class.std::__1::__shared_weak_count", %"class.std::__1::__shared_weak_count"* %27, i64 0, i32 0
  %35 = bitcast %"class.std::__1::__shared_weak_count"* %27 to void (%"class.std::__1::__shared_count"*)***
  %36 = load void (%"class.std::__1::__shared_count"*)**, void (%"class.std::__1::__shared_count"*)*** %35, align 8
  %37 = getelementptr inbounds void (%"class.std::__1::__shared_count"*)*, void (%"class.std::__1::__shared_count"*)** %36, i64 2
  %38 = load void (%"class.std::__1::__shared_count"*)*, void (%"class.std::__1::__shared_count"*)** %37, align 8
  call void %38(%"class.std::__1::__shared_count"* %34) #13
  call void @_ZNSt3__119__shared_weak_count14__release_weakEv(%"class.std::__1::__shared_weak_count"* nonnull %27) #13
  br label %39

39:                                               ; preds = %26, %29, %33
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %4) #10
  call void @_ZN4marl9Scheduler6unbindEv() #13
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16threadC2IMN2vk5QueueEFvPN4marl9SchedulerEEJPS3_RS6_EvEEOT_DpOT0_(%"class.std::__1::thread"*, { i64, i64 }* dereferenceable(16), %"class.vk::Queue"** dereferenceable(8), %"class.marl::Scheduler"** dereferenceable(8)) unnamed_addr #0 comdat align 2 {
  %5 = tail call i8* @_Znwm(i64 8) #14
  %6 = bitcast i8* %5 to %"class.std::__1::__thread_struct"*
  tail call void @_ZNSt3__115__thread_structC1Ev(%"class.std::__1::__thread_struct"* nonnull %6) #13
  %7 = ptrtoint i8* %5 to i64
  %8 = tail call i8* @_Znwm(i64 40) #14
  %9 = bitcast { i64, i64 }* %1 to <2 x i64>*
  %10 = load <2 x i64>, <2 x i64>* %9, align 8
  %11 = bitcast %"class.vk::Queue"** %2 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = bitcast %"class.marl::Scheduler"** %3 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = bitcast i8* %8 to i64*
  store i64 %7, i64* %15, align 8
  %16 = getelementptr inbounds i8, i8* %8, i64 8
  %17 = bitcast i8* %16 to <2 x i64>*
  store <2 x i64> %10, <2 x i64>* %17, align 8
  %18 = getelementptr inbounds i8, i8* %8, i64 24
  %19 = bitcast i8* %18 to i64*
  store i64 %12, i64* %19, align 8
  %20 = getelementptr inbounds i8, i8* %8, i64 32
  %21 = bitcast i8* %20 to i64*
  store i64 %14, i64* %21, align 8
  %22 = getelementptr inbounds %"class.std::__1::thread", %"class.std::__1::thread"* %0, i64 0, i32 0
  %23 = tail call i32 @pthread_create(i64* %22, %union.pthread_attr_t* null, i8* (i8*)* nonnull @_ZNSt3__114__thread_proxyINS_5tupleIJNS_10unique_ptrINS_15__thread_structENS_14default_deleteIS3_EEEEMN2vk5QueueEFvPN4marl9SchedulerEEPS8_SB_EEEEEPvSG_, i8* nonnull %8) #13
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %26

25:                                               ; preds = %4
  ret void

26:                                               ; preds = %4
  tail call void @_ZNSt3__120__throw_system_errorEiPKc(i32 %23, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.6, i64 0, i64 0)) #12
  unreachable
}

; Function Attrs: nounwind optsize
declare void @_ZNSt3__16threadD1Ev(%"class.std::__1::thread"*) unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN2vk5QueueD2Ev(%"class.vk::Queue"*) unnamed_addr #0 align 2 {
  %2 = alloca %"struct.vk::Queue::Task", align 8
  %3 = bitcast %"struct.vk::Queue::Task"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %3) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %3, i8 -86, i64 40, i1 false)
  %4 = getelementptr inbounds %"struct.vk::Queue::Task", %"struct.vk::Queue::Task"* %2, i64 0, i32 0
  store i32 0, i32* %4, align 8
  %5 = getelementptr inbounds %"struct.vk::Queue::Task", %"struct.vk::Queue::Task"* %2, i64 0, i32 2
  %6 = getelementptr inbounds %"class.vk::Queue", %"class.vk::Queue"* %0, i64 0, i32 3
  %7 = bitcast %struct.VkSubmitInfo** %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 28, i1 false)
  call void @_ZN2sw4ChanIN2vk5Queue4TaskEE3putERKS3_(%"class.sw::Chan"* %6, %"struct.vk::Queue::Task"* nonnull dereferenceable(40) %2) #11
  %8 = getelementptr inbounds %"class.vk::Queue", %"class.vk::Queue"* %0, i64 0, i32 5
  call void @_ZNSt3__16thread4joinEv(%"class.std::__1::thread"* %8) #13
  call void @_ZN2vk5Queue14garbageCollectEv(%"class.vk::Queue"* %0) #11
  %9 = getelementptr inbounds %"struct.vk::Queue::Task", %"struct.vk::Queue::Task"* %2, i64 0, i32 3, i32 1
  %10 = load %"class.std::__1::__shared_weak_count"*, %"class.std::__1::__shared_weak_count"** %9, align 8
  %11 = icmp eq %"class.std::__1::__shared_weak_count"* %10, null
  br i1 %11, label %22, label %12

12:                                               ; preds = %1
  %13 = getelementptr inbounds %"class.std::__1::__shared_weak_count", %"class.std::__1::__shared_weak_count"* %10, i64 0, i32 0, i32 1
  %14 = atomicrmw add i64* %13, i64 -1 acq_rel
  %15 = icmp eq i64 %14, 0
  br i1 %15, label %16, label %22

16:                                               ; preds = %12
  %17 = getelementptr inbounds %"class.std::__1::__shared_weak_count", %"class.std::__1::__shared_weak_count"* %10, i64 0, i32 0
  %18 = bitcast %"class.std::__1::__shared_weak_count"* %10 to void (%"class.std::__1::__shared_count"*)***
  %19 = load void (%"class.std::__1::__shared_count"*)**, void (%"class.std::__1::__shared_count"*)*** %18, align 8
  %20 = getelementptr inbounds void (%"class.std::__1::__shared_count"*)*, void (%"class.std::__1::__shared_count"*)** %19, i64 2
  %21 = load void (%"class.std::__1::__shared_count"*)*, void (%"class.std::__1::__shared_count"*)** %20, align 8
  call void %21(%"class.std::__1::__shared_count"* %17) #13
  call void @_ZNSt3__119__shared_weak_count14__release_weakEv(%"class.std::__1::__shared_weak_count"* nonnull %10) #13
  br label %22

22:                                               ; preds = %1, %12, %16
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %3) #10
  call void @_ZNSt3__16threadD1Ev(%"class.std::__1::thread"* %8) #13
  %23 = getelementptr inbounds %"class.vk::Queue", %"class.vk::Queue"* %0, i64 0, i32 4, i32 2
  call void @_ZNSt3__118condition_variableD1Ev(%"class.std::__1::condition_variable"* %23) #13
  %24 = getelementptr inbounds %"class.vk::Queue", %"class.vk::Queue"* %0, i64 0, i32 4, i32 1, i32 0, i32 0
  call void @_ZNSt3__112__deque_baseIP12VkSubmitInfoNS_9allocatorIS2_EEED2Ev(%"class.std::__1::__deque_base.107"* %24) #13
  %25 = getelementptr inbounds %"class.vk::Queue", %"class.vk::Queue"* %0, i64 0, i32 3, i32 2
  call void @_ZNSt3__118condition_variableD1Ev(%"class.std::__1::condition_variable"* %25) #13
  %26 = getelementptr inbounds %"class.vk::Queue", %"class.vk::Queue"* %0, i64 0, i32 3, i32 1, i32 0, i32 0
  call void @_ZNSt3__112__deque_baseIN2vk5Queue4TaskENS_9allocatorIS3_EEED2Ev(%"class.std::__1::__deque_base"* %26) #13
  %27 = getelementptr inbounds %"class.vk::Queue", %"class.vk::Queue"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %28 = load %"class.sw::Renderer"*, %"class.sw::Renderer"** %27, align 8
  store %"class.sw::Renderer"* null, %"class.sw::Renderer"** %27, align 8
  %29 = icmp eq %"class.sw::Renderer"* %28, null
  br i1 %29, label %35, label %30

30:                                               ; preds = %22
  %31 = bitcast %"class.sw::Renderer"* %28 to void (%"class.sw::Renderer"*)***
  %32 = load void (%"class.sw::Renderer"*)**, void (%"class.sw::Renderer"*)*** %31, align 16
  %33 = getelementptr inbounds void (%"class.sw::Renderer"*)*, void (%"class.sw::Renderer"*)** %32, i64 1
  %34 = load void (%"class.sw::Renderer"*)*, void (%"class.sw::Renderer"*)** %33, align 8
  call void %34(%"class.sw::Renderer"* nonnull %28) #13
  br label %35

35:                                               ; preds = %22, %30
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZN2sw4ChanIN2vk5Queue4TaskEE3putERKS3_(%"class.sw::Chan"*, %"struct.vk::Queue::Task"* dereferenceable(40)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.sw::Chan", %"class.sw::Chan"* %0, i64 0, i32 0, i32 0
  tail call void @_ZNSt3__15mutex4lockEv(%"class.std::__1::mutex"* %3) #13
  %4 = getelementptr inbounds %"class.sw::Chan", %"class.sw::Chan"* %0, i64 0, i32 1, i32 0
  tail call void @_ZNSt3__15dequeIN2vk5Queue4TaskENS_9allocatorIS3_EEE9push_backERKS3_(%"class.std::__1::deque"* %4, %"struct.vk::Queue::Task"* dereferenceable(40) %1) #13
  %5 = getelementptr inbounds %"class.sw::Chan", %"class.sw::Chan"* %0, i64 0, i32 2
  tail call void @_ZNSt3__118condition_variable10notify_oneEv(%"class.std::__1::condition_variable"* %5) #13
  tail call void @_ZNSt3__15mutex6unlockEv(%"class.std::__1::mutex"* %3) #13
  ret void
}

; Function Attrs: optsize
declare void @_ZNSt3__16thread4joinEv(%"class.std::__1::thread"*) local_unnamed_addr #3

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN2vk5Queue14garbageCollectEv(%"class.vk::Queue"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.vk::Queue", %"class.vk::Queue"* %0, i64 0, i32 4
  %3 = tail call { %struct.VkSubmitInfo*, i8 } @_ZN2sw4ChanIP12VkSubmitInfoE7tryTakeEv(%"class.sw::Chan.104"* %2) #11
  %4 = extractvalue { %struct.VkSubmitInfo*, i8 } %3, 1
  %5 = and i8 %4, 1
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %15, label %7

7:                                                ; preds = %1, %7
  %8 = phi { %struct.VkSubmitInfo*, i8 } [ %11, %7 ], [ %3, %1 ]
  %9 = extractvalue { %struct.VkSubmitInfo*, i8 } %8, 0
  %10 = bitcast %struct.VkSubmitInfo* %9 to i8*
  tail call void @_ZN2vk10deallocateEPvPK21VkAllocationCallbacks(i8* %10, %struct.VkAllocationCallbacks* null) #13
  %11 = tail call { %struct.VkSubmitInfo*, i8 } @_ZN2sw4ChanIP12VkSubmitInfoE7tryTakeEv(%"class.sw::Chan.104"* %2) #11
  %12 = extractvalue { %struct.VkSubmitInfo*, i8 } %11, 1
  %13 = and i8 %12, 1
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %15, label %7

15:                                               ; preds = %7, %1
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden i32 @_ZN2vk5Queue6submitEjPK12VkSubmitInfoPNS_5FenceE(%"class.vk::Queue"*, i32, %struct.VkSubmitInfo* nocapture readonly, %"class.vk::Fence"* readonly) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.std::__1::basic_string", align 8
  %6 = alloca %"class.std::__1::basic_string", align 8
  %7 = alloca %"struct.vk::Queue::Task", align 8
  tail call void @_ZN2vk5Queue14garbageCollectEv(%"class.vk::Queue"* %0) #11
  %8 = bitcast %"struct.vk::Queue::Task"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %8) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 -86, i64 40, i1 false)
  %9 = getelementptr inbounds %"struct.vk::Queue::Task", %"struct.vk::Queue::Task"* %7, i64 0, i32 0
  %10 = getelementptr inbounds %"struct.vk::Queue::Task", %"struct.vk::Queue::Task"* %7, i64 0, i32 2
  %11 = getelementptr inbounds %"struct.vk::Queue::Task", %"struct.vk::Queue::Task"* %7, i64 0, i32 4
  %12 = bitcast %struct.VkSubmitInfo** %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 24, i1 false) #10
  store i32 1, i32* %11, align 8
  store i32 %1, i32* %9, align 8
  %13 = zext i32 %1 to i64
  %14 = mul nuw nsw i64 %13, 72
  %15 = icmp eq i32 %1, 0
  br i1 %15, label %16, label %20

16:                                               ; preds = %4
  %17 = tail call i8* @_ZN2vk8allocateEmmPK21VkAllocationCallbacks23VkSystemAllocationScope(i64 %14, i64 16, %struct.VkAllocationCallbacks* null, i32 1) #13
  %18 = bitcast i8* %17 to %struct.VkSubmitInfo*
  %19 = bitcast %struct.VkSubmitInfo* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %17, i8* align 8 %19, i64 %14, i1 false) #10
  br label %193

20:                                               ; preds = %4
  %21 = bitcast %"class.std::__1::basic_string"* %5 to i8*
  %22 = bitcast %"class.std::__1::basic_string"* %5 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %23 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %22, i64 0, i32 1, i32 0
  %24 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  br label %34

25:                                               ; preds = %58
  %26 = call i8* @_ZN2vk8allocateEmmPK21VkAllocationCallbacks23VkSystemAllocationScope(i64 %59, i64 16, %struct.VkAllocationCallbacks* null, i32 1) #13
  %27 = bitcast i8* %26 to %struct.VkSubmitInfo*
  %28 = bitcast %struct.VkSubmitInfo* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %26, i8* align 8 %28, i64 %14, i1 false) #10
  %29 = getelementptr inbounds i8, i8* %26, i64 %14
  %30 = bitcast %"class.std::__1::basic_string"* %6 to i8*
  %31 = bitcast %"class.std::__1::basic_string"* %6 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %32 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %31, i64 0, i32 1, i32 0
  %33 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  br label %94

34:                                               ; preds = %58, %20
  %35 = phi i64 [ 0, %20 ], [ %60, %58 ]
  %36 = phi i64 [ %14, %20 ], [ %59, %58 ]
  %37 = getelementptr inbounds %struct.VkSubmitInfo, %struct.VkSubmitInfo* %2, i64 %35, i32 2
  %38 = load i32, i32* %37, align 8
  %39 = zext i32 %38 to i64
  %40 = shl nuw nsw i64 %39, 2
  %41 = getelementptr inbounds %struct.VkSubmitInfo, %struct.VkSubmitInfo* %2, i64 %35, i32 7
  %42 = load i32, i32* %41, align 8
  %43 = zext i32 %42 to i64
  %44 = getelementptr inbounds %struct.VkSubmitInfo, %struct.VkSubmitInfo* %2, i64 %35, i32 5
  %45 = load i32, i32* %44, align 8
  %46 = zext i32 %45 to i64
  %47 = add nuw nsw i64 %43, %39
  %48 = add nuw nsw i64 %47, %46
  %49 = shl nuw nsw i64 %48, 3
  %50 = add i64 %40, %36
  %51 = add i64 %50, %49
  %52 = getelementptr inbounds %struct.VkSubmitInfo, %struct.VkSubmitInfo* %2, i64 %35, i32 1
  %53 = bitcast i8** %52 to %struct.VkBaseInStructure**
  %54 = load %struct.VkBaseInStructure*, %struct.VkBaseInStructure** %53, align 8
  %55 = icmp eq %struct.VkBaseInStructure* %54, null
  br i1 %55, label %58, label %56

56:                                               ; preds = %34
  %57 = trunc i64 %35 to i32
  br label %62

58:                                               ; preds = %89, %34
  %59 = phi i64 [ %51, %34 ], [ %90, %89 ]
  %60 = add nuw nsw i64 %35, 1
  %61 = icmp eq i64 %60, %13
  br i1 %61, label %25, label %34

62:                                               ; preds = %89, %56
  %63 = phi %struct.VkBaseInStructure* [ %92, %89 ], [ %54, %56 ]
  %64 = phi i64 [ %90, %89 ], [ %51, %56 ]
  %65 = getelementptr inbounds %struct.VkBaseInStructure, %struct.VkBaseInStructure* %63, i64 0, i32 0
  %66 = load i32, i32* %65, align 8
  %67 = icmp eq i32 %66, 1000207003
  br i1 %67, label %68, label %79

68:                                               ; preds = %62
  %69 = getelementptr inbounds %struct.VkBaseInStructure, %struct.VkBaseInStructure* %63, i64 1, i32 0
  %70 = load i32, i32* %69, align 8
  %71 = zext i32 %70 to i64
  %72 = getelementptr inbounds %struct.VkBaseInStructure, %struct.VkBaseInStructure* %63, i64 2, i32 0
  %73 = load i32, i32* %72, align 8
  %74 = zext i32 %73 to i64
  %75 = add nuw nsw i64 %74, %71
  %76 = shl nuw nsw i64 %75, 3
  %77 = add i64 %64, 48
  %78 = add i64 %77, %76
  br label %89

79:                                               ; preds = %62
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %21) #10
  call void @_ZN2vk9StringifyE15VkStructureType(%"class.std::__1::basic_string"* nonnull sret %5, i32 %66) #13
  %80 = load i8, i8* %23, align 1
  %81 = icmp slt i8 %80, 0
  %82 = load i8*, i8** %24, align 8
  %83 = select i1 %81, i8* %82, i8* %21
  call void (i8*, ...) @_ZN2sw4warnEPKcz(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.1, i64 0, i64 0), i32 58, i32 %57, i8* %83) #13
  %84 = load i8, i8* %23, align 1
  %85 = icmp slt i8 %84, 0
  br i1 %85, label %86, label %88

86:                                               ; preds = %79
  %87 = load i8*, i8** %24, align 8
  call void @_ZdlPv(i8* %87) #14
  br label %88

88:                                               ; preds = %86, %79
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %21) #10
  br label %89

89:                                               ; preds = %88, %68
  %90 = phi i64 [ %78, %68 ], [ %64, %88 ]
  %91 = getelementptr inbounds %struct.VkBaseInStructure, %struct.VkBaseInStructure* %63, i64 0, i32 1
  %92 = load %struct.VkBaseInStructure*, %struct.VkBaseInStructure** %91, align 8
  %93 = icmp eq %struct.VkBaseInStructure* %92, null
  br i1 %93, label %58, label %62

94:                                               ; preds = %143, %25
  %95 = phi i64 [ 0, %25 ], [ %145, %143 ]
  %96 = phi i8* [ %29, %25 ], [ %144, %143 ]
  %97 = getelementptr inbounds %struct.VkSubmitInfo, %struct.VkSubmitInfo* %2, i64 %95, i32 2
  %98 = load i32, i32* %97, align 8
  %99 = zext i32 %98 to i64
  %100 = shl nuw nsw i64 %99, 3
  %101 = getelementptr inbounds %struct.VkSubmitInfo, %struct.VkSubmitInfo* %27, i64 %95, i32 3
  %102 = bitcast %class.VkNonDispatchableHandle.1** %101 to i8**
  store i8* %96, i8** %102, align 8
  %103 = getelementptr inbounds %struct.VkSubmitInfo, %struct.VkSubmitInfo* %2, i64 %95, i32 3
  %104 = bitcast %class.VkNonDispatchableHandle.1** %103 to i8**
  %105 = load i8*, i8** %104, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %96, i8* align 8 %105, i64 %100, i1 false) #10
  %106 = getelementptr inbounds i8, i8* %96, i64 %100
  %107 = load i32, i32* %97, align 8
  %108 = zext i32 %107 to i64
  %109 = shl nuw nsw i64 %108, 2
  %110 = getelementptr inbounds %struct.VkSubmitInfo, %struct.VkSubmitInfo* %27, i64 %95, i32 4
  %111 = bitcast i32** %110 to i8**
  store i8* %106, i8** %111, align 8
  %112 = getelementptr inbounds %struct.VkSubmitInfo, %struct.VkSubmitInfo* %2, i64 %95, i32 4
  %113 = bitcast i32** %112 to i8**
  %114 = load i8*, i8** %113, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %106, i8* align 4 %114, i64 %109, i1 false) #10
  %115 = getelementptr inbounds i8, i8* %106, i64 %109
  %116 = getelementptr inbounds %struct.VkSubmitInfo, %struct.VkSubmitInfo* %2, i64 %95, i32 7
  %117 = load i32, i32* %116, align 8
  %118 = zext i32 %117 to i64
  %119 = shl nuw nsw i64 %118, 3
  %120 = getelementptr inbounds %struct.VkSubmitInfo, %struct.VkSubmitInfo* %27, i64 %95, i32 8
  %121 = bitcast %class.VkNonDispatchableHandle.1** %120 to i8**
  store i8* %115, i8** %121, align 8
  %122 = getelementptr inbounds %struct.VkSubmitInfo, %struct.VkSubmitInfo* %2, i64 %95, i32 8
  %123 = bitcast %class.VkNonDispatchableHandle.1** %122 to i8**
  %124 = load i8*, i8** %123, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %115, i8* align 8 %124, i64 %119, i1 false) #10
  %125 = getelementptr inbounds i8, i8* %115, i64 %119
  %126 = getelementptr inbounds %struct.VkSubmitInfo, %struct.VkSubmitInfo* %2, i64 %95, i32 5
  %127 = load i32, i32* %126, align 8
  %128 = zext i32 %127 to i64
  %129 = shl nuw nsw i64 %128, 3
  %130 = getelementptr inbounds %struct.VkSubmitInfo, %struct.VkSubmitInfo* %27, i64 %95, i32 6
  %131 = bitcast %struct.VkCommandBuffer_T*** %130 to i8**
  store i8* %125, i8** %131, align 8
  %132 = getelementptr inbounds %struct.VkSubmitInfo, %struct.VkSubmitInfo* %2, i64 %95, i32 6
  %133 = bitcast %struct.VkCommandBuffer_T*** %132 to i8**
  %134 = load i8*, i8** %133, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %125, i8* align 8 %134, i64 %129, i1 false) #10
  %135 = getelementptr inbounds i8, i8* %125, i64 %129
  %136 = getelementptr inbounds %struct.VkSubmitInfo, %struct.VkSubmitInfo* %2, i64 %95, i32 1
  %137 = bitcast i8** %136 to %struct.VkBaseInStructure**
  %138 = load %struct.VkBaseInStructure*, %struct.VkBaseInStructure** %137, align 8
  %139 = icmp eq %struct.VkBaseInStructure* %138, null
  br i1 %139, label %143, label %140

140:                                              ; preds = %94
  %141 = getelementptr inbounds %struct.VkSubmitInfo, %struct.VkSubmitInfo* %27, i64 %95, i32 1
  %142 = trunc i64 %95 to i32
  br label %147

143:                                              ; preds = %188, %94
  %144 = phi i8* [ %135, %94 ], [ %189, %188 ]
  %145 = add nuw nsw i64 %95, 1
  %146 = icmp eq i64 %145, %13
  br i1 %146, label %193, label %94

147:                                              ; preds = %188, %140
  %148 = phi %struct.VkBaseInStructure* [ %138, %140 ], [ %191, %188 ]
  %149 = phi i8* [ %135, %140 ], [ %189, %188 ]
  %150 = getelementptr inbounds %struct.VkBaseInStructure, %struct.VkBaseInStructure* %148, i64 0, i32 0
  %151 = load i32, i32* %150, align 8
  %152 = icmp eq i32 %151, 1000207003
  br i1 %152, label %153, label %178

153:                                              ; preds = %147
  %154 = bitcast %struct.VkBaseInStructure* %148 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %149, i8* nonnull align 8 %154, i64 48, i1 false) #10
  %155 = getelementptr inbounds i8, i8* %149, i64 8
  %156 = bitcast i8* %155 to i8**
  store i8* null, i8** %156, align 8
  %157 = getelementptr inbounds i8, i8* %149, i64 48
  %158 = getelementptr inbounds %struct.VkBaseInStructure, %struct.VkBaseInStructure* %148, i64 1, i32 0
  %159 = load i32, i32* %158, align 8
  %160 = zext i32 %159 to i64
  %161 = shl nuw nsw i64 %160, 3
  %162 = getelementptr inbounds i8, i8* %149, i64 24
  %163 = bitcast i8* %162 to i8**
  store i8* %157, i8** %163, align 8
  %164 = getelementptr inbounds %struct.VkBaseInStructure, %struct.VkBaseInStructure* %148, i64 1, i32 1
  %165 = bitcast %struct.VkBaseInStructure** %164 to i8**
  %166 = load i8*, i8** %165, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %157, i8* align 8 %166, i64 %161, i1 false) #10
  %167 = getelementptr inbounds i8, i8* %157, i64 %161
  %168 = getelementptr inbounds %struct.VkBaseInStructure, %struct.VkBaseInStructure* %148, i64 2, i32 0
  %169 = load i32, i32* %168, align 8
  %170 = zext i32 %169 to i64
  %171 = shl nuw nsw i64 %170, 3
  %172 = getelementptr inbounds i8, i8* %149, i64 40
  %173 = bitcast i8* %172 to i8**
  store i8* %167, i8** %173, align 8
  %174 = getelementptr inbounds %struct.VkBaseInStructure, %struct.VkBaseInStructure* %148, i64 2, i32 1
  %175 = bitcast %struct.VkBaseInStructure** %174 to i8**
  %176 = load i8*, i8** %175, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %167, i8* align 8 %176, i64 %171, i1 false) #10
  %177 = getelementptr inbounds i8, i8* %167, i64 %171
  store i8* %149, i8** %141, align 8
  br label %188

178:                                              ; preds = %147
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %30) #10
  call void @_ZN2vk9StringifyE15VkStructureType(%"class.std::__1::basic_string"* nonnull sret %6, i32 %151) #13
  %179 = load i8, i8* %32, align 1
  %180 = icmp slt i8 %179, 0
  %181 = load i8*, i8** %33, align 8
  %182 = select i1 %180, i8* %181, i8* %30
  call void (i8*, ...) @_ZN2sw4warnEPKcz(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.1, i64 0, i64 0), i32 123, i32 %142, i8* %182) #13
  %183 = load i8, i8* %32, align 1
  %184 = icmp slt i8 %183, 0
  br i1 %184, label %185, label %187

185:                                              ; preds = %178
  %186 = load i8*, i8** %33, align 8
  call void @_ZdlPv(i8* %186) #14
  br label %187

187:                                              ; preds = %185, %178
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %30) #10
  br label %188

188:                                              ; preds = %187, %153
  %189 = phi i8* [ %177, %153 ], [ %149, %187 ]
  %190 = getelementptr inbounds %struct.VkBaseInStructure, %struct.VkBaseInStructure* %148, i64 0, i32 1
  %191 = load %struct.VkBaseInStructure*, %struct.VkBaseInStructure** %190, align 8
  %192 = icmp eq %struct.VkBaseInStructure* %191, null
  br i1 %192, label %143, label %147

193:                                              ; preds = %143, %16
  %194 = phi %struct.VkSubmitInfo* [ %18, %16 ], [ %27, %143 ]
  store %struct.VkSubmitInfo* %194, %struct.VkSubmitInfo** %10, align 8
  %195 = icmp eq %"class.vk::Fence"* %3, null
  br i1 %195, label %230, label %196

196:                                              ; preds = %193
  %197 = getelementptr inbounds %"struct.vk::Queue::Task", %"struct.vk::Queue::Task"* %7, i64 0, i32 3
  %198 = bitcast %"class.vk::Fence"* %3 to i64*
  %199 = load i64, i64* %198, align 8
  %200 = getelementptr inbounds %"class.vk::Fence", %"class.vk::Fence"* %3, i64 0, i32 0, i32 1
  %201 = load %"class.std::__1::__shared_weak_count"*, %"class.std::__1::__shared_weak_count"** %200, align 8
  %202 = ptrtoint %"class.std::__1::__shared_weak_count"* %201 to i64
  %203 = icmp eq %"class.std::__1::__shared_weak_count"* %201, null
  br i1 %203, label %207, label %204

204:                                              ; preds = %196
  %205 = getelementptr inbounds %"class.std::__1::__shared_weak_count", %"class.std::__1::__shared_weak_count"* %201, i64 0, i32 0, i32 1
  %206 = atomicrmw add i64* %205, i64 1 monotonic
  br label %207

207:                                              ; preds = %204, %196
  %208 = bitcast %"class.std::__1::shared_ptr.84"* %197 to i64*
  store i64 %199, i64* %208, align 8
  %209 = getelementptr inbounds %"struct.vk::Queue::Task", %"struct.vk::Queue::Task"* %7, i64 0, i32 3, i32 1
  %210 = bitcast %"class.std::__1::__shared_weak_count"** %209 to i64*
  %211 = load %"class.std::__1::__shared_weak_count"*, %"class.std::__1::__shared_weak_count"** %209, align 8
  store i64 %202, i64* %210, align 8
  %212 = icmp eq %"class.std::__1::__shared_weak_count"* %211, null
  br i1 %212, label %223, label %213

213:                                              ; preds = %207
  %214 = getelementptr inbounds %"class.std::__1::__shared_weak_count", %"class.std::__1::__shared_weak_count"* %211, i64 0, i32 0, i32 1
  %215 = atomicrmw add i64* %214, i64 -1 acq_rel
  %216 = icmp eq i64 %215, 0
  br i1 %216, label %217, label %223

217:                                              ; preds = %213
  %218 = getelementptr inbounds %"class.std::__1::__shared_weak_count", %"class.std::__1::__shared_weak_count"* %211, i64 0, i32 0
  %219 = bitcast %"class.std::__1::__shared_weak_count"* %211 to void (%"class.std::__1::__shared_count"*)***
  %220 = load void (%"class.std::__1::__shared_count"*)**, void (%"class.std::__1::__shared_count"*)*** %219, align 8
  %221 = getelementptr inbounds void (%"class.std::__1::__shared_count"*)*, void (%"class.std::__1::__shared_count"*)** %220, i64 2
  %222 = load void (%"class.std::__1::__shared_count"*)*, void (%"class.std::__1::__shared_count"*)** %221, align 8
  call void %222(%"class.std::__1::__shared_count"* %218) #13
  call void @_ZNSt3__119__shared_weak_count14__release_weakEv(%"class.std::__1::__shared_weak_count"* nonnull %211) #13
  br label %223

223:                                              ; preds = %207, %213, %217
  %224 = getelementptr inbounds %"class.std::__1::shared_ptr.84", %"class.std::__1::shared_ptr.84"* %197, i64 0, i32 0
  %225 = load %"class.sw::CountedEvent"*, %"class.sw::CountedEvent"** %224, align 8
  %226 = getelementptr inbounds %"class.sw::CountedEvent", %"class.sw::CountedEvent"* %225, i64 0, i32 0, i32 0, i32 0
  %227 = load %"struct.marl::WaitGroup::Data"*, %"struct.marl::WaitGroup::Data"** %226, align 8
  %228 = getelementptr inbounds %"struct.marl::WaitGroup::Data", %"struct.marl::WaitGroup::Data"* %227, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %229 = atomicrmw add i32* %228, i32 1 seq_cst
  br label %230

230:                                              ; preds = %193, %223
  %231 = getelementptr inbounds %"class.vk::Queue", %"class.vk::Queue"* %0, i64 0, i32 3
  call void @_ZN2sw4ChanIN2vk5Queue4TaskEE3putERKS3_(%"class.sw::Chan"* %231, %"struct.vk::Queue::Task"* nonnull dereferenceable(40) %7) #11
  %232 = getelementptr inbounds %"struct.vk::Queue::Task", %"struct.vk::Queue::Task"* %7, i64 0, i32 3, i32 1
  %233 = load %"class.std::__1::__shared_weak_count"*, %"class.std::__1::__shared_weak_count"** %232, align 8
  %234 = icmp eq %"class.std::__1::__shared_weak_count"* %233, null
  br i1 %234, label %245, label %235

235:                                              ; preds = %230
  %236 = getelementptr inbounds %"class.std::__1::__shared_weak_count", %"class.std::__1::__shared_weak_count"* %233, i64 0, i32 0, i32 1
  %237 = atomicrmw add i64* %236, i64 -1 acq_rel
  %238 = icmp eq i64 %237, 0
  br i1 %238, label %239, label %245

239:                                              ; preds = %235
  %240 = getelementptr inbounds %"class.std::__1::__shared_weak_count", %"class.std::__1::__shared_weak_count"* %233, i64 0, i32 0
  %241 = bitcast %"class.std::__1::__shared_weak_count"* %233 to void (%"class.std::__1::__shared_count"*)***
  %242 = load void (%"class.std::__1::__shared_count"*)**, void (%"class.std::__1::__shared_count"*)*** %241, align 8
  %243 = getelementptr inbounds void (%"class.std::__1::__shared_count"*)*, void (%"class.std::__1::__shared_count"*)** %242, i64 2
  %244 = load void (%"class.std::__1::__shared_count"*)*, void (%"class.std::__1::__shared_count"*)** %243, align 8
  call void %244(%"class.std::__1::__shared_count"* %240) #13
  call void @_ZNSt3__119__shared_weak_count14__release_weakEv(%"class.std::__1::__shared_weak_count"* nonnull %233) #13
  br label %245

245:                                              ; preds = %230, %235, %239
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %8) #10
  ret i32 0
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN2vk5Queue11submitQueueERKNS0_4TaskE(%"class.vk::Queue"*, %"struct.vk::Queue::Task"* dereferenceable(40)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.std::__1::basic_string", align 8
  %4 = alloca %"struct.vk::CommandBuffer::ExecutionState", align 16
  %5 = getelementptr inbounds %"class.vk::Queue", %"class.vk::Queue"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %6 = load %"class.sw::Renderer"*, %"class.sw::Renderer"** %5, align 8
  %7 = icmp eq %"class.sw::Renderer"* %6, null
  br i1 %7, label %8, label %21

8:                                                ; preds = %2
  %9 = tail call i8* @_ZN2sw8RenderernwEm(i64 2016) #13
  %10 = bitcast i8* %9 to %"class.sw::Renderer"*
  %11 = getelementptr inbounds %"class.vk::Queue", %"class.vk::Queue"* %0, i64 0, i32 1
  %12 = load %"class.vk::Device"*, %"class.vk::Device"** %11, align 8
  tail call void @_ZN2sw8RendererC1EPN2vk6DeviceE(%"class.sw::Renderer"* %10, %"class.vk::Device"* %12) #13
  %13 = load %"class.sw::Renderer"*, %"class.sw::Renderer"** %5, align 8
  %14 = bitcast %"class.sw::Renderer"** %5 to i8**
  store i8* %9, i8** %14, align 8
  %15 = icmp eq %"class.sw::Renderer"* %13, null
  br i1 %15, label %21, label %16

16:                                               ; preds = %8
  %17 = bitcast %"class.sw::Renderer"* %13 to void (%"class.sw::Renderer"*)***
  %18 = load void (%"class.sw::Renderer"*)**, void (%"class.sw::Renderer"*)*** %17, align 16
  %19 = getelementptr inbounds void (%"class.sw::Renderer"*)*, void (%"class.sw::Renderer"*)** %18, i64 1
  %20 = load void (%"class.sw::Renderer"*)*, void (%"class.sw::Renderer"*)** %19, align 8
  tail call void %20(%"class.sw::Renderer"* nonnull %13) #13
  br label %21

21:                                               ; preds = %16, %8, %2
  %22 = getelementptr inbounds %"struct.vk::Queue::Task", %"struct.vk::Queue::Task"* %1, i64 0, i32 0
  %23 = load i32, i32* %22, align 8
  %24 = icmp eq i32 %23, 0
  %25 = getelementptr inbounds %"struct.vk::Queue::Task", %"struct.vk::Queue::Task"* %1, i64 0, i32 2
  %26 = load %struct.VkSubmitInfo*, %struct.VkSubmitInfo** %25, align 8
  br i1 %24, label %46, label %27

27:                                               ; preds = %21
  %28 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  %29 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %30 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %29, i64 0, i32 1, i32 0
  %31 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %32 = bitcast %"struct.vk::CommandBuffer::ExecutionState"* %4 to i8*
  %33 = getelementptr inbounds %"struct.vk::CommandBuffer::ExecutionState", %"struct.vk::CommandBuffer::ExecutionState"* %4, i64 0, i32 5, i32 4
  %34 = getelementptr inbounds %"struct.vk::CommandBuffer::ExecutionState", %"struct.vk::CommandBuffer::ExecutionState"* %4, i64 0, i32 7, i64 0
  %35 = bitcast %"struct.vk::VertexInputBinding"* %34 to i8*
  %36 = getelementptr inbounds %"struct.vk::CommandBuffer::ExecutionState", %"struct.vk::CommandBuffer::ExecutionState"* %4, i64 0, i32 10
  %37 = bitcast float* %33 to i8*
  %38 = bitcast %"class.sw::Renderer"** %5 to i64*
  %39 = bitcast %"struct.vk::CommandBuffer::ExecutionState"* %4 to i64*
  %40 = getelementptr inbounds %"struct.vk::Queue::Task", %"struct.vk::Queue::Task"* %1, i64 0, i32 3, i32 0
  %41 = bitcast %"class.sw::CountedEvent"** %40 to i64*
  %42 = getelementptr inbounds %"struct.vk::CommandBuffer::ExecutionState", %"struct.vk::CommandBuffer::ExecutionState"* %4, i64 0, i32 1
  %43 = bitcast %"class.sw::CountedEvent"** %42 to i64*
  %44 = getelementptr inbounds %"struct.vk::CommandBuffer::ExecutionState", %"struct.vk::CommandBuffer::ExecutionState"* %4, i64 0, i32 2
  %45 = bitcast %"class.vk::RenderPass"** %44 to i8*
  br label %49

46:                                               ; preds = %149, %21
  %47 = phi %struct.VkSubmitInfo* [ %26, %21 ], [ %154, %149 ]
  %48 = icmp eq %struct.VkSubmitInfo* %47, null
  br i1 %48, label %189, label %187

49:                                               ; preds = %27, %149
  %50 = phi i64 [ 0, %27 ], [ %150, %149 ]
  %51 = phi %struct.VkSubmitInfo* [ %26, %27 ], [ %154, %149 ]
  %52 = getelementptr inbounds %struct.VkSubmitInfo, %struct.VkSubmitInfo* %51, i64 %50, i32 1
  %53 = bitcast i8** %52 to %struct.VkBaseInStructure**
  %54 = load %struct.VkBaseInStructure*, %struct.VkBaseInStructure** %53, align 8
  %55 = icmp eq %struct.VkBaseInStructure* %54, null
  br i1 %55, label %58, label %56

56:                                               ; preds = %49
  %57 = bitcast i8** %52 to %struct.VkTimelineSemaphoreSubmitInfo**
  br label %66

58:                                               ; preds = %84, %49
  %59 = phi %struct.VkTimelineSemaphoreSubmitInfo* [ null, %49 ], [ %85, %84 ]
  %60 = getelementptr inbounds %struct.VkSubmitInfo, %struct.VkSubmitInfo* %51, i64 %50, i32 2
  %61 = load i32, i32* %60, align 8
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %89, label %63

63:                                               ; preds = %58
  %64 = getelementptr inbounds %struct.VkSubmitInfo, %struct.VkSubmitInfo* %51, i64 %50, i32 3
  %65 = getelementptr inbounds %struct.VkTimelineSemaphoreSubmitInfo, %struct.VkTimelineSemaphoreSubmitInfo* %59, i64 0, i32 3
  br label %97

66:                                               ; preds = %56, %84
  %67 = phi %struct.VkBaseInStructure* [ %54, %56 ], [ %87, %84 ]
  %68 = phi %struct.VkTimelineSemaphoreSubmitInfo* [ null, %56 ], [ %85, %84 ]
  %69 = getelementptr inbounds %struct.VkBaseInStructure, %struct.VkBaseInStructure* %67, i64 0, i32 0
  %70 = load i32, i32* %69, align 8
  %71 = icmp eq i32 %70, 1000207003
  br i1 %71, label %72, label %74

72:                                               ; preds = %66
  %73 = load %struct.VkTimelineSemaphoreSubmitInfo*, %struct.VkTimelineSemaphoreSubmitInfo** %57, align 8
  br label %84

74:                                               ; preds = %66
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %28) #10
  call void @_ZN2vk9StringifyE15VkStructureType(%"class.std::__1::basic_string"* nonnull sret %3, i32 %70) #13
  %75 = load i8, i8* %30, align 1
  %76 = icmp slt i8 %75, 0
  %77 = load i8*, i8** %31, align 8
  %78 = select i1 %76, i8* %77, i8* %28
  call void (i8*, ...) @_ZN2sw4warnEPKcz(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.1, i64 0, i64 0), i32 192, i8* %78) #13
  %79 = load i8, i8* %30, align 1
  %80 = icmp slt i8 %79, 0
  br i1 %80, label %81, label %83

81:                                               ; preds = %74
  %82 = load i8*, i8** %31, align 8
  call void @_ZdlPv(i8* %82) #14
  br label %83

83:                                               ; preds = %74, %81
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %28) #10
  br label %84

84:                                               ; preds = %72, %83
  %85 = phi %struct.VkTimelineSemaphoreSubmitInfo* [ %73, %72 ], [ %68, %83 ]
  %86 = getelementptr inbounds %struct.VkBaseInStructure, %struct.VkBaseInStructure* %67, i64 0, i32 1
  %87 = load %struct.VkBaseInStructure*, %struct.VkBaseInStructure** %86, align 8
  %88 = icmp eq %struct.VkBaseInStructure* %87, null
  br i1 %88, label %58, label %66

89:                                               ; preds = %124, %58
  call void @llvm.lifetime.start.p0i8(i64 800, i8* nonnull %32) #10
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %32, i8* align 16 bitcast (%"struct.vk::CommandBuffer::ExecutionState"* @__const._ZN2vk5Queue11submitQueueERKNS0_4TaskE.executionState to i8*), i64 800, i1 false)
  call void @llvm.memset.p0i8.i64(i8* align 16 %35, i8 0, i64 256, i1 false) #10
  store i32 0, i32* %36, align 4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %45, i8 0, i64 256, i1 false) #10
  call void @llvm.memset.p0i8.i64(i8* align 16 %37, i8 0, i64 44, i1 false) #10
  %90 = load i64, i64* %38, align 8
  store i64 %90, i64* %39, align 16
  %91 = load i64, i64* %41, align 8
  store i64 %91, i64* %43, align 8
  %92 = getelementptr inbounds %struct.VkSubmitInfo, %struct.VkSubmitInfo* %51, i64 %50, i32 5
  %93 = load i32, i32* %92, align 8
  %94 = icmp eq i32 %93, 0
  br i1 %94, label %129, label %95

95:                                               ; preds = %89
  %96 = getelementptr inbounds %struct.VkSubmitInfo, %struct.VkSubmitInfo* %51, i64 %50, i32 6
  br label %136

97:                                               ; preds = %63, %124
  %98 = phi i64 [ 0, %63 ], [ %125, %124 ]
  %99 = load %class.VkNonDispatchableHandle.1*, %class.VkNonDispatchableHandle.1** %64, align 8
  %100 = getelementptr inbounds %class.VkNonDispatchableHandle.1, %class.VkNonDispatchableHandle.1* %99, i64 %98, i32 0
  %101 = load i64, i64* %100, align 8
  %102 = icmp eq i64 %101, 0
  br i1 %102, label %123, label %103

103:                                              ; preds = %97
  %104 = inttoptr i64 %101 to %"class.vk::Semaphore"*
  %105 = call i32 @_ZNK2vk9Semaphore16getSemaphoreTypeEv(%"class.vk::Semaphore"* nonnull %104) #13
  %106 = icmp eq i32 %105, 1
  br i1 %106, label %107, label %112

107:                                              ; preds = %103
  %108 = inttoptr i64 %101 to %"class.vk::TimelineSemaphore"*
  %109 = load i64*, i64** %65, align 8
  %110 = getelementptr inbounds i64, i64* %109, i64 %98
  %111 = load i64, i64* %110, align 8
  call void @_ZN2vk17TimelineSemaphore4waitEm(%"class.vk::TimelineSemaphore"* nonnull %108, i64 %111) #13
  br label %124

112:                                              ; preds = %103
  %113 = load %class.VkNonDispatchableHandle.1*, %class.VkNonDispatchableHandle.1** %64, align 8
  %114 = getelementptr inbounds %class.VkNonDispatchableHandle.1, %class.VkNonDispatchableHandle.1* %113, i64 %98, i32 0
  %115 = load i64, i64* %114, align 8
  %116 = icmp eq i64 %115, 0
  br i1 %116, label %123, label %117

117:                                              ; preds = %112
  %118 = inttoptr i64 %115 to %"class.vk::Semaphore"*
  %119 = call i32 @_ZNK2vk9Semaphore16getSemaphoreTypeEv(%"class.vk::Semaphore"* nonnull %118) #13
  %120 = icmp eq i32 %119, 0
  br i1 %120, label %121, label %123

121:                                              ; preds = %117
  %122 = inttoptr i64 %115 to %"class.vk::BinarySemaphore"*
  call void @_ZN2vk15BinarySemaphore4waitEv(%"class.vk::BinarySemaphore"* nonnull %122) #13
  br label %124

123:                                              ; preds = %97, %117, %112
  call void (i8*, ...) @_ZN2sw4warnEPKcz(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.1, i64 0, i64 0), i32 211) #13
  br label %124

124:                                              ; preds = %121, %123, %107
  %125 = add nuw nsw i64 %98, 1
  %126 = load i32, i32* %60, align 8
  %127 = zext i32 %126 to i64
  %128 = icmp ult i64 %125, %127
  br i1 %128, label %97, label %89

129:                                              ; preds = %136, %89
  call void @llvm.lifetime.end.p0i8(i64 800, i8* nonnull %32) #10
  %130 = getelementptr inbounds %struct.VkSubmitInfo, %struct.VkSubmitInfo* %51, i64 %50, i32 7
  %131 = load i32, i32* %130, align 8
  %132 = icmp eq i32 %131, 0
  br i1 %132, label %149, label %133

133:                                              ; preds = %129
  %134 = getelementptr inbounds %struct.VkSubmitInfo, %struct.VkSubmitInfo* %51, i64 %50, i32 8
  %135 = getelementptr inbounds %struct.VkTimelineSemaphoreSubmitInfo, %struct.VkTimelineSemaphoreSubmitInfo* %59, i64 0, i32 5
  br label %155

136:                                              ; preds = %95, %136
  %137 = phi i64 [ 0, %95 ], [ %145, %136 ]
  %138 = load %struct.VkCommandBuffer_T**, %struct.VkCommandBuffer_T*** %96, align 8
  %139 = getelementptr inbounds %struct.VkCommandBuffer_T*, %struct.VkCommandBuffer_T** %138, i64 %137
  %140 = load %struct.VkCommandBuffer_T*, %struct.VkCommandBuffer_T** %139, align 8
  %141 = icmp eq %struct.VkCommandBuffer_T* %140, null
  %142 = bitcast %struct.VkCommandBuffer_T* %140 to %"class.vk::DispatchableObject"*
  %143 = getelementptr inbounds %"class.vk::DispatchableObject", %"class.vk::DispatchableObject"* %142, i64 0, i32 1
  %144 = select i1 %141, %"class.vk::CommandBuffer"* null, %"class.vk::CommandBuffer"* %143
  call void @_ZN2vk13CommandBuffer6submitERNS0_14ExecutionStateE(%"class.vk::CommandBuffer"* %144, %"struct.vk::CommandBuffer::ExecutionState"* nonnull dereferenceable(800) %4) #13
  %145 = add nuw nsw i64 %137, 1
  %146 = load i32, i32* %92, align 8
  %147 = zext i32 %146 to i64
  %148 = icmp ult i64 %145, %147
  br i1 %148, label %136, label %129

149:                                              ; preds = %182, %129
  %150 = add nuw nsw i64 %50, 1
  %151 = load i32, i32* %22, align 8
  %152 = zext i32 %151 to i64
  %153 = icmp ult i64 %150, %152
  %154 = load %struct.VkSubmitInfo*, %struct.VkSubmitInfo** %25, align 8
  br i1 %153, label %49, label %46

155:                                              ; preds = %133, %182
  %156 = phi i64 [ 0, %133 ], [ %183, %182 ]
  %157 = load %class.VkNonDispatchableHandle.1*, %class.VkNonDispatchableHandle.1** %134, align 8
  %158 = getelementptr inbounds %class.VkNonDispatchableHandle.1, %class.VkNonDispatchableHandle.1* %157, i64 %156, i32 0
  %159 = load i64, i64* %158, align 8
  %160 = icmp eq i64 %159, 0
  br i1 %160, label %181, label %161

161:                                              ; preds = %155
  %162 = inttoptr i64 %159 to %"class.vk::Semaphore"*
  %163 = call i32 @_ZNK2vk9Semaphore16getSemaphoreTypeEv(%"class.vk::Semaphore"* nonnull %162) #13
  %164 = icmp eq i32 %163, 1
  br i1 %164, label %165, label %170

165:                                              ; preds = %161
  %166 = inttoptr i64 %159 to %"class.vk::TimelineSemaphore"*
  %167 = load i64*, i64** %135, align 8
  %168 = getelementptr inbounds i64, i64* %167, i64 %156
  %169 = load i64, i64* %168, align 8
  call void @_ZN2vk17TimelineSemaphore6signalEm(%"class.vk::TimelineSemaphore"* nonnull %166, i64 %169) #13
  br label %182

170:                                              ; preds = %161
  %171 = load %class.VkNonDispatchableHandle.1*, %class.VkNonDispatchableHandle.1** %134, align 8
  %172 = getelementptr inbounds %class.VkNonDispatchableHandle.1, %class.VkNonDispatchableHandle.1* %171, i64 %156, i32 0
  %173 = load i64, i64* %172, align 8
  %174 = icmp eq i64 %173, 0
  br i1 %174, label %181, label %175

175:                                              ; preds = %170
  %176 = inttoptr i64 %173 to %"class.vk::Semaphore"*
  %177 = call i32 @_ZNK2vk9Semaphore16getSemaphoreTypeEv(%"class.vk::Semaphore"* nonnull %176) #13
  %178 = icmp eq i32 %177, 0
  br i1 %178, label %179, label %181

179:                                              ; preds = %175
  %180 = inttoptr i64 %173 to %"class.vk::BinarySemaphore"*
  call void @_ZN2vk15BinarySemaphore6signalEv(%"class.vk::BinarySemaphore"* nonnull %180) #13
  br label %182

181:                                              ; preds = %155, %175, %170
  call void (i8*, ...) @_ZN2sw4warnEPKcz(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.1, i64 0, i64 0), i32 239) #13
  br label %182

182:                                              ; preds = %179, %181, %165
  %183 = add nuw nsw i64 %156, 1
  %184 = load i32, i32* %130, align 8
  %185 = zext i32 %184 to i64
  %186 = icmp ult i64 %183, %185
  br i1 %186, label %155, label %149

187:                                              ; preds = %46
  %188 = getelementptr inbounds %"class.vk::Queue", %"class.vk::Queue"* %0, i64 0, i32 4
  call void @_ZN2sw4ChanIP12VkSubmitInfoE3putERKS2_(%"class.sw::Chan.104"* %188, %struct.VkSubmitInfo** dereferenceable(8) %25) #11
  br label %189

189:                                              ; preds = %46, %187
  %190 = getelementptr inbounds %"struct.vk::Queue::Task", %"struct.vk::Queue::Task"* %1, i64 0, i32 3, i32 0
  %191 = load %"class.sw::CountedEvent"*, %"class.sw::CountedEvent"** %190, align 8
  %192 = icmp eq %"class.sw::CountedEvent"* %191, null
  br i1 %192, label %229, label %193

193:                                              ; preds = %189
  %194 = load %"class.sw::Renderer"*, %"class.sw::Renderer"** %5, align 8
  call void @_ZN2sw8Renderer11synchronizeEv(%"class.sw::Renderer"* %194) #13
  %195 = load %"class.sw::CountedEvent"*, %"class.sw::CountedEvent"** %190, align 8
  %196 = getelementptr inbounds %"class.sw::CountedEvent", %"class.sw::CountedEvent"* %195, i64 0, i32 0, i32 0, i32 0
  %197 = load %"struct.marl::WaitGroup::Data"*, %"struct.marl::WaitGroup::Data"** %196, align 8
  %198 = getelementptr inbounds %"struct.marl::WaitGroup::Data", %"struct.marl::WaitGroup::Data"* %197, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %199 = atomicrmw sub i32* %198, i32 1 seq_cst
  %200 = icmp eq i32 %199, 1
  br i1 %200, label %201, label %229

201:                                              ; preds = %193
  %202 = load %"struct.marl::WaitGroup::Data"*, %"struct.marl::WaitGroup::Data"** %196, align 8
  %203 = getelementptr inbounds %"struct.marl::WaitGroup::Data", %"struct.marl::WaitGroup::Data"* %202, i64 0, i32 2, i32 0
  call void @_ZNSt3__15mutex4lockEv(%"class.std::__1::mutex"* %203) #13
  %204 = load %"struct.marl::WaitGroup::Data"*, %"struct.marl::WaitGroup::Data"** %196, align 8
  %205 = getelementptr inbounds %"struct.marl::WaitGroup::Data", %"struct.marl::WaitGroup::Data"* %204, i64 0, i32 1, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0
  %206 = load atomic i32, i32* %205 seq_cst, align 4
  %207 = icmp eq i32 %206, 0
  br i1 %207, label %226, label %208

208:                                              ; preds = %201
  %209 = getelementptr inbounds %"struct.marl::WaitGroup::Data", %"struct.marl::WaitGroup::Data"* %204, i64 0, i32 1, i32 0, i32 0
  call void @_ZNSt3__15mutex4lockEv(%"class.std::__1::mutex"* %209) #13
  %210 = getelementptr inbounds %"struct.marl::WaitGroup::Data", %"struct.marl::WaitGroup::Data"* %204, i64 0, i32 1, i32 1, i32 5
  %211 = load %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"*, %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"** %210, align 8
  %212 = icmp eq %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"* %211, null
  br i1 %212, label %213, label %217

213:                                              ; preds = %217, %208
  call void @_ZNSt3__15mutex6unlockEv(%"class.std::__1::mutex"* %209) #13
  %214 = getelementptr inbounds %"struct.marl::WaitGroup::Data", %"struct.marl::WaitGroup::Data"* %204, i64 0, i32 1, i32 4, i32 0, i32 0, i32 0, i32 0, i32 0
  %215 = load atomic i32, i32* %214 seq_cst, align 4
  %216 = icmp sgt i32 %215, 0
  br i1 %216, label %224, label %226

217:                                              ; preds = %208, %217
  %218 = phi %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"* [ %222, %217 ], [ %211, %208 ]
  %219 = getelementptr inbounds %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry", %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"* %218, i64 0, i32 0
  %220 = load %"class.marl::Scheduler::Fiber"*, %"class.marl::Scheduler::Fiber"** %219, align 8
  call void @_ZN4marl9Scheduler5Fiber6notifyEv(%"class.marl::Scheduler::Fiber"* %220) #13
  %221 = getelementptr inbounds %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry", %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"* %218, i64 0, i32 1
  %222 = load %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"*, %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"** %221, align 8
  %223 = icmp eq %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"* %222, null
  br i1 %223, label %213, label %217

224:                                              ; preds = %213
  %225 = getelementptr inbounds %"struct.marl::WaitGroup::Data", %"struct.marl::WaitGroup::Data"* %204, i64 0, i32 1, i32 2
  call void @_ZNSt3__118condition_variable10notify_allEv(%"class.std::__1::condition_variable"* %225) #13
  br label %226

226:                                              ; preds = %201, %213, %224
  call void @_ZNSt3__15mutex6unlockEv(%"class.std::__1::mutex"* %203) #13
  %227 = getelementptr inbounds %"class.sw::CountedEvent", %"class.sw::CountedEvent"* %195, i64 0, i32 1, i32 0, i32 0
  %228 = load %"struct.marl::Event::Shared"*, %"struct.marl::Event::Shared"** %227, align 8
  call void @_ZN4marl5Event6Shared6signalEv(%"struct.marl::Event::Shared"* %228) #13
  br label %229

229:                                              ; preds = %189, %226, %193
  ret void
}

; Function Attrs: optsize
declare i8* @_ZN2sw8RenderernwEm(i64) local_unnamed_addr #3

; Function Attrs: optsize
declare void @_ZN2sw8RendererC1EPN2vk6DeviceE(%"class.sw::Renderer"*, %"class.vk::Device"*) unnamed_addr #3

; Function Attrs: optsize
declare void @_ZN2sw4warnEPKcz(i8*, ...) local_unnamed_addr #3

; Function Attrs: optsize
declare void @_ZN2vk9StringifyE15VkStructureType(%"class.std::__1::basic_string"* sret, i32) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: optsize
declare void @_ZN2vk17TimelineSemaphore4waitEm(%"class.vk::TimelineSemaphore"*, i64) local_unnamed_addr #3

; Function Attrs: optsize
declare void @_ZN2vk13CommandBuffer6submitERNS0_14ExecutionStateE(%"class.vk::CommandBuffer"*, %"struct.vk::CommandBuffer::ExecutionState"* dereferenceable(800)) local_unnamed_addr #3

; Function Attrs: optsize
declare void @_ZN2vk17TimelineSemaphore6signalEm(%"class.vk::TimelineSemaphore"*, i64) local_unnamed_addr #3

; Function Attrs: optsize
declare void @_ZN2vk15BinarySemaphore6signalEv(%"class.vk::BinarySemaphore"*) local_unnamed_addr #3

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZN2sw4ChanIP12VkSubmitInfoE3putERKS2_(%"class.sw::Chan.104"*, %struct.VkSubmitInfo** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.sw::Chan.104", %"class.sw::Chan.104"* %0, i64 0, i32 0, i32 0
  tail call void @_ZNSt3__15mutex4lockEv(%"class.std::__1::mutex"* %3) #13
  %4 = getelementptr inbounds %"class.sw::Chan.104", %"class.sw::Chan.104"* %0, i64 0, i32 1, i32 0
  tail call void @_ZNSt3__15dequeIP12VkSubmitInfoNS_9allocatorIS2_EEE9push_backERKS2_(%"class.std::__1::deque.106"* %4, %struct.VkSubmitInfo** dereferenceable(8) %1) #13
  %5 = getelementptr inbounds %"class.sw::Chan.104", %"class.sw::Chan.104"* %0, i64 0, i32 2
  tail call void @_ZNSt3__118condition_variable10notify_oneEv(%"class.std::__1::condition_variable"* %5) #13
  tail call void @_ZNSt3__15mutex6unlockEv(%"class.std::__1::mutex"* %3) #13
  ret void
}

; Function Attrs: optsize
declare void @_ZN2sw8Renderer11synchronizeEv(%"class.sw::Renderer"*) local_unnamed_addr #3

; Function Attrs: optsize
declare void @_ZN4marl6Thread7setNameEPKcz(i8*, ...) local_unnamed_addr #3

; Function Attrs: optsize
declare void @_ZN4marl9Scheduler4bindEv(%"class.marl::Scheduler"*) local_unnamed_addr #3

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZN2sw4ChanIN2vk5Queue4TaskEE4takeEv(%"struct.vk::Queue::Task"* noalias sret, %"class.sw::Chan"*) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.marl::lock", align 8
  %4 = bitcast %"class.marl::lock"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %4) #10
  %5 = getelementptr inbounds %"class.marl::lock", %"class.marl::lock"* %3, i64 0, i32 0, i32 0
  %6 = getelementptr inbounds %"class.marl::lock", %"class.marl::lock"* %3, i64 0, i32 0, i32 1
  %7 = getelementptr inbounds %"class.sw::Chan", %"class.sw::Chan"* %1, i64 0, i32 0, i32 0
  %8 = bitcast %"class.marl::lock"* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 -86, i64 16, i1 false)
  store %"class.std::__1::mutex"* %7, %"class.std::__1::mutex"** %5, align 8
  store i8 1, i8* %6, align 8
  tail call void @_ZNSt3__15mutex4lockEv(%"class.std::__1::mutex"* %7) #13
  %9 = getelementptr inbounds %"class.sw::Chan", %"class.sw::Chan"* %1, i64 0, i32 2
  %10 = getelementptr inbounds %"class.marl::lock", %"class.marl::lock"* %3, i64 0, i32 0
  %11 = getelementptr inbounds %"class.sw::Chan", %"class.sw::Chan"* %1, i64 0, i32 1, i32 0, i32 0, i32 2, i32 0, i32 0
  %12 = load i64, i64* %11, align 8
  %13 = icmp eq i64 %12, 0
  br i1 %13, label %14, label %17

14:                                               ; preds = %2, %14
  call void @_ZNSt3__118condition_variable4waitERNS_11unique_lockINS_5mutexEEE(%"class.std::__1::condition_variable"* %9, %"class.std::__1::unique_lock"* nonnull dereferenceable(16) %10) #13
  %15 = load i64, i64* %11, align 8
  %16 = icmp eq i64 %15, 0
  br i1 %16, label %14, label %17

17:                                               ; preds = %14, %2
  %18 = bitcast %"struct.vk::Queue::Task"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %18, i8 -86, i64 40, i1 false)
  %19 = getelementptr inbounds %"class.sw::Chan", %"class.sw::Chan"* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1
  %20 = load %"struct.vk::Queue::Task"**, %"struct.vk::Queue::Task"*** %19, align 8
  %21 = getelementptr inbounds %"class.sw::Chan", %"class.sw::Chan"* %1, i64 0, i32 1, i32 0, i32 0, i32 1
  %22 = load i64, i64* %21, align 8
  %23 = udiv i64 %22, 102
  %24 = getelementptr inbounds %"struct.vk::Queue::Task"*, %"struct.vk::Queue::Task"** %20, i64 %23
  %25 = load %"struct.vk::Queue::Task"*, %"struct.vk::Queue::Task"** %24, align 8
  %26 = urem i64 %22, 102
  %27 = getelementptr inbounds %"struct.vk::Queue::Task", %"struct.vk::Queue::Task"* %25, i64 %26
  %28 = bitcast %"struct.vk::Queue::Task"* %27 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %18, i8* align 8 %28, i64 16, i1 false) #10
  %29 = getelementptr inbounds %"struct.vk::Queue::Task", %"struct.vk::Queue::Task"* %0, i64 0, i32 3
  %30 = getelementptr inbounds %"struct.vk::Queue::Task", %"struct.vk::Queue::Task"* %25, i64 %26, i32 3
  %31 = bitcast %"class.std::__1::shared_ptr.84"* %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = bitcast %"class.std::__1::shared_ptr.84"* %29 to i64*
  store i64 %32, i64* %33, align 8
  %34 = getelementptr inbounds %"struct.vk::Queue::Task", %"struct.vk::Queue::Task"* %0, i64 0, i32 3, i32 1
  %35 = getelementptr inbounds %"struct.vk::Queue::Task", %"struct.vk::Queue::Task"* %25, i64 %26, i32 3, i32 1
  %36 = load %"class.std::__1::__shared_weak_count"*, %"class.std::__1::__shared_weak_count"** %35, align 8
  store %"class.std::__1::__shared_weak_count"* %36, %"class.std::__1::__shared_weak_count"** %34, align 8
  %37 = icmp eq %"class.std::__1::__shared_weak_count"* %36, null
  br i1 %37, label %41, label %38

38:                                               ; preds = %17
  %39 = getelementptr inbounds %"class.std::__1::__shared_weak_count", %"class.std::__1::__shared_weak_count"* %36, i64 0, i32 0, i32 1
  %40 = atomicrmw add i64* %39, i64 1 monotonic
  br label %41

41:                                               ; preds = %17, %38
  %42 = getelementptr inbounds %"struct.vk::Queue::Task", %"struct.vk::Queue::Task"* %0, i64 0, i32 4
  %43 = getelementptr inbounds %"struct.vk::Queue::Task", %"struct.vk::Queue::Task"* %25, i64 %26, i32 4
  %44 = load i32, i32* %43, align 8
  store i32 %44, i32* %42, align 8
  %45 = getelementptr inbounds %"class.sw::Chan", %"class.sw::Chan"* %1, i64 0, i32 1, i32 0
  call void @_ZNSt3__15dequeIN2vk5Queue4TaskENS_9allocatorIS3_EEE9pop_frontEv(%"class.std::__1::deque"* %45) #13
  %46 = load i8, i8* %6, align 8, !range !2
  %47 = icmp eq i8 %46, 0
  br i1 %47, label %50, label %48

48:                                               ; preds = %41
  %49 = load %"class.std::__1::mutex"*, %"class.std::__1::mutex"** %5, align 8
  call void @_ZNSt3__15mutex6unlockEv(%"class.std::__1::mutex"* %49) #13
  br label %50

50:                                               ; preds = %41, %48
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %4) #10
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden i32 @_ZN2vk5Queue8waitIdleEv(%"class.vk::Queue"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.marl::lock", align 8
  %3 = alloca %class.anon.295, align 8
  %4 = alloca %"struct.vk::Queue::Task", align 8
  %5 = tail call i8* @_Znwm(i64 56) #14
  %6 = bitcast i8* %5 to i32 (...)***
  %7 = getelementptr inbounds i8, i8* %5, i64 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 16, i1 false) #10
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVNSt3__120__shared_ptr_emplaceIN2sw12CountedEventENS_9allocatorIS2_EEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %6, align 8
  %8 = getelementptr inbounds i8, i8* %5, i64 24
  %9 = bitcast i8* %8 to %"class.sw::CountedEvent"*
  tail call void @_ZN2sw12CountedEventC2Eb(%"class.sw::CountedEvent"* %9, i1 zeroext false) #13
  %10 = bitcast i8* %5 to %"class.std::__1::__shared_weak_count"*
  %11 = ptrtoint i8* %8 to i64
  %12 = bitcast i8* %8 to %"struct.marl::WaitGroup::Data"**
  %13 = load %"struct.marl::WaitGroup::Data"*, %"struct.marl::WaitGroup::Data"** %12, align 8
  %14 = getelementptr inbounds %"struct.marl::WaitGroup::Data", %"struct.marl::WaitGroup::Data"* %13, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %15 = atomicrmw add i32* %14, i32 1 seq_cst
  %16 = bitcast %"struct.vk::Queue::Task"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %16) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %16, i8 -86, i64 40, i1 false)
  %17 = getelementptr inbounds %"struct.vk::Queue::Task", %"struct.vk::Queue::Task"* %4, i64 0, i32 0
  store i32 0, i32* %17, align 8
  %18 = getelementptr inbounds %"struct.vk::Queue::Task", %"struct.vk::Queue::Task"* %4, i64 0, i32 2
  %19 = getelementptr inbounds %"struct.vk::Queue::Task", %"struct.vk::Queue::Task"* %4, i64 0, i32 4
  %20 = bitcast %struct.VkSubmitInfo** %18 to i64*
  store i64 0, i64* %20, align 8
  store i32 1, i32* %19, align 8
  %21 = getelementptr inbounds %"struct.vk::Queue::Task", %"struct.vk::Queue::Task"* %4, i64 0, i32 3
  %22 = ptrtoint i8* %5 to i64
  %23 = bitcast i8* %7 to i64*
  %24 = atomicrmw add i64* %23, i64 1 monotonic
  %25 = bitcast %"class.std::__1::shared_ptr.84"* %21 to i64*
  store i64 %11, i64* %25, align 8
  %26 = getelementptr inbounds %"struct.vk::Queue::Task", %"struct.vk::Queue::Task"* %4, i64 0, i32 3, i32 1
  %27 = bitcast %"class.std::__1::__shared_weak_count"** %26 to i64*
  store i64 %22, i64* %27, align 8
  %28 = getelementptr inbounds %"class.vk::Queue", %"class.vk::Queue"* %0, i64 0, i32 3
  call void @_ZN2sw4ChanIN2vk5Queue4TaskEE3putERKS3_(%"class.sw::Chan"* %28, %"struct.vk::Queue::Task"* nonnull dereferenceable(40) %4) #11
  %29 = getelementptr inbounds i8, i8* %5, i64 40
  %30 = bitcast i8* %29 to %"struct.marl::Event::Shared"**
  %31 = load %"struct.marl::Event::Shared"*, %"struct.marl::Event::Shared"** %30, align 8
  %32 = bitcast %"class.marl::lock"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %32) #10
  %33 = getelementptr inbounds %"class.marl::lock", %"class.marl::lock"* %2, i64 0, i32 0, i32 0
  %34 = getelementptr inbounds %"class.marl::lock", %"class.marl::lock"* %2, i64 0, i32 0, i32 1
  %35 = getelementptr inbounds %"struct.marl::Event::Shared", %"struct.marl::Event::Shared"* %31, i64 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %32, i8 -86, i64 16, i1 false) #10
  store %"class.std::__1::mutex"* %35, %"class.std::__1::mutex"** %33, align 8
  store i8 1, i8* %34, align 8
  call void @_ZNSt3__15mutex4lockEv(%"class.std::__1::mutex"* %35) #13
  %36 = getelementptr inbounds %"struct.marl::Event::Shared", %"struct.marl::Event::Shared"* %31, i64 0, i32 1
  %37 = bitcast %class.anon.295* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %37) #10
  %38 = getelementptr inbounds %class.anon.295, %class.anon.295* %3, i64 0, i32 0
  store %"struct.marl::Event::Shared"* %31, %"struct.marl::Event::Shared"** %38, align 8
  call void @_ZN4marl17ConditionVariable4waitIZNS_5Event6Shared4waitEvEUlvE_EEvRNS_4lockEOT_(%"class.marl::ConditionVariable"* %36, %"class.marl::lock"* nonnull dereferenceable(16) %2, %class.anon.295* nonnull dereferenceable(8) %3) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37) #10
  %39 = getelementptr inbounds %"struct.marl::Event::Shared", %"struct.marl::Event::Shared"* %31, i64 0, i32 3
  %40 = load i8, i8* %39, align 8
  %41 = icmp eq i8 %40, 0
  br i1 %41, label %42, label %44

42:                                               ; preds = %1
  %43 = getelementptr inbounds %"struct.marl::Event::Shared", %"struct.marl::Event::Shared"* %31, i64 0, i32 4
  store i8 0, i8* %43, align 1
  br label %44

44:                                               ; preds = %42, %1
  %45 = load i8, i8* %34, align 8, !range !2
  %46 = icmp eq i8 %45, 0
  br i1 %46, label %49, label %47

47:                                               ; preds = %44
  %48 = load %"class.std::__1::mutex"*, %"class.std::__1::mutex"** %33, align 8
  call void @_ZNSt3__15mutex6unlockEv(%"class.std::__1::mutex"* %48) #13
  br label %49

49:                                               ; preds = %44, %47
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %32) #10
  call void @_ZN2vk5Queue14garbageCollectEv(%"class.vk::Queue"* %0) #11
  %50 = load %"class.std::__1::__shared_weak_count"*, %"class.std::__1::__shared_weak_count"** %26, align 8
  %51 = icmp eq %"class.std::__1::__shared_weak_count"* %50, null
  br i1 %51, label %62, label %52

52:                                               ; preds = %49
  %53 = getelementptr inbounds %"class.std::__1::__shared_weak_count", %"class.std::__1::__shared_weak_count"* %50, i64 0, i32 0, i32 1
  %54 = atomicrmw add i64* %53, i64 -1 acq_rel
  %55 = icmp eq i64 %54, 0
  br i1 %55, label %56, label %62

56:                                               ; preds = %52
  %57 = getelementptr inbounds %"class.std::__1::__shared_weak_count", %"class.std::__1::__shared_weak_count"* %50, i64 0, i32 0
  %58 = bitcast %"class.std::__1::__shared_weak_count"* %50 to void (%"class.std::__1::__shared_count"*)***
  %59 = load void (%"class.std::__1::__shared_count"*)**, void (%"class.std::__1::__shared_count"*)*** %58, align 8
  %60 = getelementptr inbounds void (%"class.std::__1::__shared_count"*)*, void (%"class.std::__1::__shared_count"*)** %59, i64 2
  %61 = load void (%"class.std::__1::__shared_count"*)*, void (%"class.std::__1::__shared_count"*)** %60, align 8
  call void %61(%"class.std::__1::__shared_count"* %57) #13
  call void @_ZNSt3__119__shared_weak_count14__release_weakEv(%"class.std::__1::__shared_weak_count"* nonnull %50) #13
  br label %62

62:                                               ; preds = %56, %52, %49
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %16) #10
  %63 = atomicrmw add i64* %23, i64 -1 acq_rel
  %64 = icmp eq i64 %63, 0
  br i1 %64, label %65, label %71

65:                                               ; preds = %62
  %66 = bitcast i8* %5 to %"class.std::__1::__shared_count"*
  %67 = bitcast i8* %5 to void (%"class.std::__1::__shared_count"*)***
  %68 = load void (%"class.std::__1::__shared_count"*)**, void (%"class.std::__1::__shared_count"*)*** %67, align 8
  %69 = getelementptr inbounds void (%"class.std::__1::__shared_count"*)*, void (%"class.std::__1::__shared_count"*)** %68, i64 2
  %70 = load void (%"class.std::__1::__shared_count"*)*, void (%"class.std::__1::__shared_count"*)** %69, align 8
  call void %70(%"class.std::__1::__shared_count"* nonnull %66) #13
  call void @_ZNSt3__119__shared_weak_count14__release_weakEv(%"class.std::__1::__shared_weak_count"* nonnull %10) #13
  br label %71

71:                                               ; preds = %62, %65
  ret i32 0
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZNSt3__110shared_ptrIN2sw12CountedEventEED2Ev(%"class.std::__1::shared_ptr.84"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.std::__1::shared_ptr.84", %"class.std::__1::shared_ptr.84"* %0, i64 0, i32 1
  %3 = load %"class.std::__1::__shared_weak_count"*, %"class.std::__1::__shared_weak_count"** %2, align 8
  %4 = icmp eq %"class.std::__1::__shared_weak_count"* %3, null
  br i1 %4, label %15, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.std::__1::__shared_weak_count", %"class.std::__1::__shared_weak_count"* %3, i64 0, i32 0, i32 1
  %7 = atomicrmw add i64* %6, i64 -1 acq_rel
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %9, label %15

9:                                                ; preds = %5
  %10 = getelementptr inbounds %"class.std::__1::__shared_weak_count", %"class.std::__1::__shared_weak_count"* %3, i64 0, i32 0
  %11 = bitcast %"class.std::__1::__shared_weak_count"* %3 to void (%"class.std::__1::__shared_count"*)***
  %12 = load void (%"class.std::__1::__shared_count"*)**, void (%"class.std::__1::__shared_count"*)*** %11, align 8
  %13 = getelementptr inbounds void (%"class.std::__1::__shared_count"*)*, void (%"class.std::__1::__shared_count"*)** %12, i64 2
  %14 = load void (%"class.std::__1::__shared_count"*)*, void (%"class.std::__1::__shared_count"*)** %13, align 8
  tail call void %14(%"class.std::__1::__shared_count"* %10) #13
  tail call void @_ZNSt3__119__shared_weak_count14__release_weakEv(%"class.std::__1::__shared_weak_count"* nonnull %3) #13
  br label %15

15:                                               ; preds = %9, %5, %1
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden { %struct.VkSubmitInfo*, i8 } @_ZN2sw4ChanIP12VkSubmitInfoE7tryTakeEv(%"class.sw::Chan.104"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.sw::Chan.104", %"class.sw::Chan.104"* %0, i64 0, i32 0, i32 0
  tail call void @_ZNSt3__15mutex4lockEv(%"class.std::__1::mutex"* %2) #13
  %3 = getelementptr inbounds %"class.sw::Chan.104", %"class.sw::Chan.104"* %0, i64 0, i32 1, i32 0, i32 0, i32 2, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %21, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.sw::Chan.104", %"class.sw::Chan.104"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1
  %8 = load %struct.VkSubmitInfo***, %struct.VkSubmitInfo**** %7, align 8
  %9 = getelementptr inbounds %"class.sw::Chan.104", %"class.sw::Chan.104"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  %10 = load i64, i64* %9, align 8
  %11 = lshr i64 %10, 9
  %12 = getelementptr inbounds %struct.VkSubmitInfo**, %struct.VkSubmitInfo*** %8, i64 %11
  %13 = load %struct.VkSubmitInfo**, %struct.VkSubmitInfo*** %12, align 8
  %14 = and i64 %10, 511
  %15 = getelementptr inbounds %struct.VkSubmitInfo*, %struct.VkSubmitInfo** %13, i64 %14
  %16 = load %struct.VkSubmitInfo*, %struct.VkSubmitInfo** %15, align 8
  %17 = getelementptr inbounds %"class.sw::Chan.104", %"class.sw::Chan.104"* %0, i64 0, i32 1, i32 0
  %18 = add i64 %4, -1
  store i64 %18, i64* %3, align 8
  %19 = add i64 %10, 1
  store i64 %19, i64* %9, align 8
  %20 = tail call zeroext i1 @_ZNSt3__15dequeIP12VkSubmitInfoNS_9allocatorIS2_EEE26__maybe_remove_front_spareEb(%"class.std::__1::deque.106"* %17, i1 zeroext true) #13
  br label %21

21:                                               ; preds = %1, %6
  %22 = phi %struct.VkSubmitInfo* [ %16, %6 ], [ null, %1 ]
  %23 = phi i8 [ 1, %6 ], [ 0, %1 ]
  tail call void @_ZNSt3__15mutex6unlockEv(%"class.std::__1::mutex"* %2) #13
  %24 = insertvalue { %struct.VkSubmitInfo*, i8 } undef, %struct.VkSubmitInfo* %22, 0
  %25 = insertvalue { %struct.VkSubmitInfo*, i8 } %24, i8 %23, 1
  ret { %struct.VkSubmitInfo*, i8 } %25
}

; Function Attrs: optsize
declare void @_ZN2vk10deallocateEPvPK21VkAllocationCallbacks(i8*, %struct.VkAllocationCallbacks*) local_unnamed_addr #3

; Function Attrs: nounwind optsize ssp uwtable
define hidden i32 @_ZN2vk5Queue7presentEPK16VkPresentInfoKHR(%"class.vk::Queue"*, %struct.VkPresentInfoKHR* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = tail call i32 @_ZN2vk5Queue8waitIdleEv(%"class.vk::Queue"* %0) #11
  %4 = getelementptr inbounds %struct.VkPresentInfoKHR, %struct.VkPresentInfoKHR* %1, i64 0, i32 2
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %9, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %struct.VkPresentInfoKHR, %struct.VkPresentInfoKHR* %1, i64 0, i32 3
  br label %17

9:                                                ; preds = %29, %2
  %10 = getelementptr inbounds %struct.VkPresentInfoKHR, %struct.VkPresentInfoKHR* %1, i64 0, i32 4
  %11 = load i32, i32* %10, align 8
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %35, label %13

13:                                               ; preds = %9
  %14 = getelementptr inbounds %struct.VkPresentInfoKHR, %struct.VkPresentInfoKHR* %1, i64 0, i32 5
  %15 = getelementptr inbounds %struct.VkPresentInfoKHR, %struct.VkPresentInfoKHR* %1, i64 0, i32 6
  %16 = getelementptr inbounds %struct.VkPresentInfoKHR, %struct.VkPresentInfoKHR* %1, i64 0, i32 7
  br label %37

17:                                               ; preds = %7, %29
  %18 = phi i64 [ 0, %7 ], [ %31, %29 ]
  %19 = load %class.VkNonDispatchableHandle.1*, %class.VkNonDispatchableHandle.1** %8, align 8
  %20 = getelementptr inbounds %class.VkNonDispatchableHandle.1, %class.VkNonDispatchableHandle.1* %19, i64 %18, i32 0
  %21 = load i64, i64* %20, align 8
  %22 = icmp eq i64 %21, 0
  br i1 %22, label %29, label %23

23:                                               ; preds = %17
  %24 = inttoptr i64 %21 to %"class.vk::Semaphore"*
  %25 = tail call i32 @_ZNK2vk9Semaphore16getSemaphoreTypeEv(%"class.vk::Semaphore"* nonnull %24) #13
  %26 = icmp eq i32 %25, 0
  %27 = inttoptr i64 %21 to %"class.vk::BinarySemaphore"*
  %28 = select i1 %26, %"class.vk::BinarySemaphore"* %27, %"class.vk::BinarySemaphore"* null
  br label %29

29:                                               ; preds = %17, %23
  %30 = phi %"class.vk::BinarySemaphore"* [ %28, %23 ], [ null, %17 ]
  tail call void @_ZN2vk15BinarySemaphore4waitEv(%"class.vk::BinarySemaphore"* %30) #13
  %31 = add nuw nsw i64 %18, 1
  %32 = load i32, i32* %4, align 8
  %33 = zext i32 %32 to i64
  %34 = icmp ult i64 %31, %33
  br i1 %34, label %17, label %9

35:                                               ; preds = %56, %9
  %36 = phi i32 [ 0, %9 ], [ %57, %56 ]
  ret i32 %36

37:                                               ; preds = %13, %56
  %38 = phi i64 [ 0, %13 ], [ %58, %56 ]
  %39 = phi i32 [ 0, %13 ], [ %57, %56 ]
  %40 = load %class.VkNonDispatchableHandle.22*, %class.VkNonDispatchableHandle.22** %14, align 8
  %41 = getelementptr inbounds %class.VkNonDispatchableHandle.22, %class.VkNonDispatchableHandle.22* %40, i64 %38, i32 0
  %42 = bitcast i64* %41 to %"class.vk::SwapchainKHR"**
  %43 = load %"class.vk::SwapchainKHR"*, %"class.vk::SwapchainKHR"** %42, align 8
  %44 = load i32*, i32** %15, align 8
  %45 = getelementptr inbounds i32, i32* %44, i64 %38
  %46 = load i32, i32* %45, align 4
  %47 = tail call i32 @_ZN2vk12SwapchainKHR7presentEj(%"class.vk::SwapchainKHR"* %43, i32 %46) #13
  %48 = load i32*, i32** %16, align 8
  %49 = icmp eq i32* %48, null
  br i1 %49, label %52, label %50

50:                                               ; preds = %37
  %51 = getelementptr inbounds i32, i32* %48, i64 %38
  store i32 %47, i32* %51, align 4
  br label %52

52:                                               ; preds = %37, %50
  %53 = icmp eq i32 %47, 0
  br i1 %53, label %56, label %54

54:                                               ; preds = %52
  switch i32 %39, label %56 [
    i32 1000001003, label %55
    i32 0, label %55
  ]

55:                                               ; preds = %54, %54
  br label %56

56:                                               ; preds = %54, %52, %55
  %57 = phi i32 [ %47, %55 ], [ %39, %54 ], [ %39, %52 ]
  %58 = add nuw nsw i64 %38, 1
  %59 = load i32, i32* %10, align 8
  %60 = zext i32 %59 to i64
  %61 = icmp ult i64 %58, %60
  br i1 %61, label %37, label %35
}

; Function Attrs: optsize
declare void @_ZN2vk15BinarySemaphore4waitEv(%"class.vk::BinarySemaphore"*) local_unnamed_addr #3

; Function Attrs: optsize
declare i32 @_ZN2vk12SwapchainKHR7presentEj(%"class.vk::SwapchainKHR"*, i32) local_unnamed_addr #3

; Function Attrs: norecurse nounwind optsize readnone ssp uwtable
define hidden void @_ZN2vk5Queue20beginDebugUtilsLabelEPK20VkDebugUtilsLabelEXT(%"class.vk::Queue"* nocapture, %struct.VkDebugUtilsLabelEXT* nocapture) local_unnamed_addr #4 align 2 {
  ret void
}

; Function Attrs: norecurse nounwind optsize readnone ssp uwtable
define hidden void @_ZN2vk5Queue18endDebugUtilsLabelEv(%"class.vk::Queue"* nocapture) local_unnamed_addr #4 align 2 {
  ret void
}

; Function Attrs: norecurse nounwind optsize readnone ssp uwtable
define hidden void @_ZN2vk5Queue21insertDebugUtilsLabelEPK20VkDebugUtilsLabelEXT(%"class.vk::Queue"* nocapture, %struct.VkDebugUtilsLabelEXT* nocapture) local_unnamed_addr #4 align 2 {
  ret void
}

; Function Attrs: noreturn nounwind optsize
declare void @_ZSt9terminatev() local_unnamed_addr #5

; Function Attrs: nounwind optsize
declare void @_ZNSt3__118condition_variableD1Ev(%"class.std::__1::condition_variable"*) unnamed_addr #2

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZNSt3__112__deque_baseIP12VkSubmitInfoNS_9allocatorIS2_EEED2Ev(%"class.std::__1::__deque_base.107"*) unnamed_addr #0 comdat align 2 {
  tail call void @_ZNSt3__112__deque_baseIP12VkSubmitInfoNS_9allocatorIS2_EEE5clearEv(%"class.std::__1::__deque_base.107"* %0) #13
  %2 = getelementptr inbounds %"class.std::__1::__deque_base.107", %"class.std::__1::__deque_base.107"* %0, i64 0, i32 0
  %3 = getelementptr inbounds %"class.std::__1::__deque_base.107", %"class.std::__1::__deque_base.107"* %0, i64 0, i32 0, i32 1
  %4 = load %struct.VkSubmitInfo***, %struct.VkSubmitInfo**** %3, align 8
  %5 = getelementptr inbounds %"class.std::__1::__deque_base.107", %"class.std::__1::__deque_base.107"* %0, i64 0, i32 0, i32 2
  %6 = load %struct.VkSubmitInfo***, %struct.VkSubmitInfo**** %5, align 8
  %7 = icmp eq %struct.VkSubmitInfo*** %4, %6
  br i1 %7, label %14, label %8

8:                                                ; preds = %1, %8
  %9 = phi %struct.VkSubmitInfo*** [ %12, %8 ], [ %4, %1 ]
  %10 = bitcast %struct.VkSubmitInfo*** %9 to i8**
  %11 = load i8*, i8** %10, align 8
  tail call void @_ZdlPv(i8* %11) #14
  %12 = getelementptr inbounds %struct.VkSubmitInfo**, %struct.VkSubmitInfo*** %9, i64 1
  %13 = icmp eq %struct.VkSubmitInfo*** %12, %6
  br i1 %13, label %14, label %8

14:                                               ; preds = %8, %1
  tail call void @_ZNSt3__114__split_bufferIPP12VkSubmitInfoNS_9allocatorIS3_EEED2Ev(%"struct.std::__1::__split_buffer.108"* %2) #13
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZNSt3__112__deque_baseIP12VkSubmitInfoNS_9allocatorIS2_EEE5clearEv(%"class.std::__1::__deque_base.107"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.std::__1::__deque_base.107", %"class.std::__1::__deque_base.107"* %0, i64 0, i32 0, i32 1
  %3 = load %struct.VkSubmitInfo***, %struct.VkSubmitInfo**** %2, align 8
  %4 = getelementptr inbounds %"class.std::__1::__deque_base.107", %"class.std::__1::__deque_base.107"* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = lshr i64 %5, 9
  %7 = getelementptr inbounds %struct.VkSubmitInfo**, %struct.VkSubmitInfo*** %3, i64 %6
  %8 = getelementptr inbounds %"class.std::__1::__deque_base.107", %"class.std::__1::__deque_base.107"* %0, i64 0, i32 0, i32 2
  %9 = load %struct.VkSubmitInfo***, %struct.VkSubmitInfo**** %8, align 8
  %10 = icmp eq %struct.VkSubmitInfo*** %9, %3
  %11 = ptrtoint %struct.VkSubmitInfo*** %9 to i64
  %12 = ptrtoint %struct.VkSubmitInfo*** %3 to i64
  br i1 %10, label %13, label %15

13:                                               ; preds = %1
  %14 = getelementptr inbounds %"class.std::__1::__deque_base.107", %"class.std::__1::__deque_base.107"* %0, i64 0, i32 2, i32 0, i32 0
  br label %28

15:                                               ; preds = %1
  %16 = load %struct.VkSubmitInfo**, %struct.VkSubmitInfo*** %7, align 8
  %17 = and i64 %5, 511
  %18 = getelementptr inbounds %struct.VkSubmitInfo*, %struct.VkSubmitInfo** %16, i64 %17
  %19 = getelementptr inbounds %"class.std::__1::__deque_base.107", %"class.std::__1::__deque_base.107"* %0, i64 0, i32 2, i32 0, i32 0
  %20 = load i64, i64* %19, align 8
  %21 = add i64 %20, %5
  %22 = lshr i64 %21, 9
  %23 = getelementptr inbounds %struct.VkSubmitInfo**, %struct.VkSubmitInfo*** %3, i64 %22
  %24 = load %struct.VkSubmitInfo**, %struct.VkSubmitInfo*** %23, align 8
  %25 = and i64 %21, 511
  %26 = getelementptr inbounds %struct.VkSubmitInfo*, %struct.VkSubmitInfo** %24, i64 %25
  %27 = icmp eq %struct.VkSubmitInfo** %26, %18
  br i1 %27, label %28, label %34

28:                                               ; preds = %47, %13, %15
  %29 = phi i64* [ %14, %13 ], [ %19, %15 ], [ %19, %47 ]
  store i64 0, i64* %29, align 8
  %30 = bitcast %struct.VkSubmitInfo**** %8 to i64*
  %31 = sub i64 %11, %12
  %32 = ashr exact i64 %31, 3
  %33 = icmp ugt i64 %32, 2
  br i1 %33, label %52, label %63

34:                                               ; preds = %15, %47
  %35 = phi %struct.VkSubmitInfo** [ %50, %47 ], [ %18, %15 ]
  %36 = phi %struct.VkSubmitInfo*** [ %49, %47 ], [ %7, %15 ]
  %37 = getelementptr inbounds %struct.VkSubmitInfo*, %struct.VkSubmitInfo** %35, i64 1
  %38 = ptrtoint %struct.VkSubmitInfo** %37 to i64
  %39 = bitcast %struct.VkSubmitInfo*** %36 to i64*
  %40 = load i64, i64* %39, align 8
  %41 = sub i64 %38, %40
  %42 = icmp eq i64 %41, 4096
  br i1 %42, label %43, label %47

43:                                               ; preds = %34
  %44 = getelementptr inbounds %struct.VkSubmitInfo**, %struct.VkSubmitInfo*** %36, i64 1
  %45 = bitcast %struct.VkSubmitInfo*** %44 to i64*
  %46 = load i64, i64* %45, align 8
  br label %47

47:                                               ; preds = %34, %43
  %48 = phi i64 [ %46, %43 ], [ %38, %34 ]
  %49 = phi %struct.VkSubmitInfo*** [ %44, %43 ], [ %36, %34 ]
  %50 = inttoptr i64 %48 to %struct.VkSubmitInfo**
  %51 = icmp eq %struct.VkSubmitInfo** %26, %50
  br i1 %51, label %28, label %34

52:                                               ; preds = %28, %52
  %53 = phi %struct.VkSubmitInfo*** [ %57, %52 ], [ %3, %28 ]
  %54 = bitcast %struct.VkSubmitInfo*** %53 to i8**
  %55 = load i8*, i8** %54, align 8
  tail call void @_ZdlPv(i8* %55) #14
  %56 = load %struct.VkSubmitInfo***, %struct.VkSubmitInfo**** %2, align 8
  %57 = getelementptr inbounds %struct.VkSubmitInfo**, %struct.VkSubmitInfo*** %56, i64 1
  store %struct.VkSubmitInfo*** %57, %struct.VkSubmitInfo**** %2, align 8
  %58 = load i64, i64* %30, align 8
  %59 = ptrtoint %struct.VkSubmitInfo*** %57 to i64
  %60 = sub i64 %58, %59
  %61 = ashr exact i64 %60, 3
  %62 = icmp ugt i64 %61, 2
  br i1 %62, label %52, label %63

63:                                               ; preds = %52, %28
  %64 = phi i64 [ %32, %28 ], [ %61, %52 ]
  switch i64 %64, label %68 [
    i64 1, label %66
    i64 2, label %65
  ]

65:                                               ; preds = %63
  br label %66

66:                                               ; preds = %63, %65
  %67 = phi i64 [ 512, %65 ], [ 256, %63 ]
  store i64 %67, i64* %4, align 8
  br label %68

68:                                               ; preds = %66, %63
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIPP12VkSubmitInfoNS_9allocatorIS3_EEED2Ev(%"struct.std::__1::__split_buffer.108"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"struct.std::__1::__split_buffer.108", %"struct.std::__1::__split_buffer.108"* %0, i64 0, i32 1
  %3 = load %struct.VkSubmitInfo***, %struct.VkSubmitInfo**** %2, align 8
  %4 = getelementptr inbounds %"struct.std::__1::__split_buffer.108", %"struct.std::__1::__split_buffer.108"* %0, i64 0, i32 2
  %5 = load %struct.VkSubmitInfo***, %struct.VkSubmitInfo**** %4, align 8
  %6 = icmp eq %struct.VkSubmitInfo*** %5, %3
  br i1 %6, label %15, label %7

7:                                                ; preds = %1
  %8 = ptrtoint %struct.VkSubmitInfo*** %3 to i64
  %9 = getelementptr %struct.VkSubmitInfo**, %struct.VkSubmitInfo*** %5, i64 -1
  %10 = ptrtoint %struct.VkSubmitInfo*** %9 to i64
  %11 = sub i64 %10, %8
  %12 = lshr i64 %11, 3
  %13 = xor i64 %12, -1
  %14 = getelementptr %struct.VkSubmitInfo**, %struct.VkSubmitInfo*** %5, i64 %13
  store %struct.VkSubmitInfo*** %14, %struct.VkSubmitInfo**** %4, align 8
  br label %15

15:                                               ; preds = %1, %7
  %16 = getelementptr inbounds %"struct.std::__1::__split_buffer.108", %"struct.std::__1::__split_buffer.108"* %0, i64 0, i32 0
  %17 = load %struct.VkSubmitInfo***, %struct.VkSubmitInfo**** %16, align 8
  %18 = icmp eq %struct.VkSubmitInfo*** %17, null
  br i1 %18, label %21, label %19

19:                                               ; preds = %15
  %20 = bitcast %struct.VkSubmitInfo*** %17 to i8*
  tail call void @_ZdlPv(i8* %20) #14
  br label %21

21:                                               ; preds = %15, %19
  ret void
}

; Function Attrs: nobuiltin nounwind optsize
declare void @_ZdlPv(i8*) local_unnamed_addr #6

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZNSt3__112__deque_baseIN2vk5Queue4TaskENS_9allocatorIS3_EEED2Ev(%"class.std::__1::__deque_base"*) unnamed_addr #0 comdat align 2 {
  tail call void @_ZNSt3__112__deque_baseIN2vk5Queue4TaskENS_9allocatorIS3_EEE5clearEv(%"class.std::__1::__deque_base"* %0) #13
  %2 = getelementptr inbounds %"class.std::__1::__deque_base", %"class.std::__1::__deque_base"* %0, i64 0, i32 0
  %3 = getelementptr inbounds %"class.std::__1::__deque_base", %"class.std::__1::__deque_base"* %0, i64 0, i32 0, i32 1
  %4 = load %"struct.vk::Queue::Task"**, %"struct.vk::Queue::Task"*** %3, align 8
  %5 = getelementptr inbounds %"class.std::__1::__deque_base", %"class.std::__1::__deque_base"* %0, i64 0, i32 0, i32 2
  %6 = load %"struct.vk::Queue::Task"**, %"struct.vk::Queue::Task"*** %5, align 8
  %7 = icmp eq %"struct.vk::Queue::Task"** %4, %6
  br i1 %7, label %14, label %8

8:                                                ; preds = %1, %8
  %9 = phi %"struct.vk::Queue::Task"** [ %12, %8 ], [ %4, %1 ]
  %10 = bitcast %"struct.vk::Queue::Task"** %9 to i8**
  %11 = load i8*, i8** %10, align 8
  tail call void @_ZdlPv(i8* %11) #14
  %12 = getelementptr inbounds %"struct.vk::Queue::Task"*, %"struct.vk::Queue::Task"** %9, i64 1
  %13 = icmp eq %"struct.vk::Queue::Task"** %12, %6
  br i1 %13, label %14, label %8

14:                                               ; preds = %8, %1
  tail call void @_ZNSt3__114__split_bufferIPN2vk5Queue4TaskENS_9allocatorIS4_EEED2Ev(%"struct.std::__1::__split_buffer"* %2) #13
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZNSt3__112__deque_baseIN2vk5Queue4TaskENS_9allocatorIS3_EEE5clearEv(%"class.std::__1::__deque_base"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.std::__1::__deque_base", %"class.std::__1::__deque_base"* %0, i64 0, i32 0, i32 1
  %3 = load %"struct.vk::Queue::Task"**, %"struct.vk::Queue::Task"*** %2, align 8
  %4 = getelementptr inbounds %"class.std::__1::__deque_base", %"class.std::__1::__deque_base"* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = udiv i64 %5, 102
  %7 = urem i64 %5, 102
  %8 = getelementptr inbounds %"struct.vk::Queue::Task"*, %"struct.vk::Queue::Task"** %3, i64 %6
  %9 = getelementptr inbounds %"class.std::__1::__deque_base", %"class.std::__1::__deque_base"* %0, i64 0, i32 0, i32 2
  %10 = load %"struct.vk::Queue::Task"**, %"struct.vk::Queue::Task"*** %9, align 8
  %11 = icmp eq %"struct.vk::Queue::Task"** %10, %3
  %12 = ptrtoint %"struct.vk::Queue::Task"** %10 to i64
  %13 = ptrtoint %"struct.vk::Queue::Task"** %3 to i64
  %14 = bitcast %"struct.vk::Queue::Task"** %3 to i8**
  br i1 %11, label %15, label %17

15:                                               ; preds = %1
  %16 = getelementptr inbounds %"class.std::__1::__deque_base", %"class.std::__1::__deque_base"* %0, i64 0, i32 2, i32 0, i32 0
  br label %29

17:                                               ; preds = %1
  %18 = load %"struct.vk::Queue::Task"*, %"struct.vk::Queue::Task"** %8, align 8
  %19 = getelementptr inbounds %"struct.vk::Queue::Task", %"struct.vk::Queue::Task"* %18, i64 %7
  %20 = getelementptr inbounds %"class.std::__1::__deque_base", %"class.std::__1::__deque_base"* %0, i64 0, i32 2, i32 0, i32 0
  %21 = load i64, i64* %20, align 8
  %22 = add i64 %21, %5
  %23 = udiv i64 %22, 102
  %24 = getelementptr inbounds %"struct.vk::Queue::Task"*, %"struct.vk::Queue::Task"** %3, i64 %23
  %25 = load %"struct.vk::Queue::Task"*, %"struct.vk::Queue::Task"** %24, align 8
  %26 = urem i64 %22, 102
  %27 = getelementptr inbounds %"struct.vk::Queue::Task", %"struct.vk::Queue::Task"* %25, i64 %26
  %28 = icmp eq %"struct.vk::Queue::Task"* %27, %19
  br i1 %28, label %29, label %47

29:                                               ; preds = %15, %17
  %30 = phi i64* [ %16, %15 ], [ %20, %17 ]
  %31 = bitcast %"struct.vk::Queue::Task"*** %9 to i64*
  br label %38

32:                                               ; preds = %61
  %33 = bitcast %"struct.vk::Queue::Task"*** %9 to i64*
  %34 = load i64, i64* %33, align 8
  %35 = bitcast %"struct.vk::Queue::Task"*** %2 to i64*
  %36 = load i64, i64* %35, align 8
  %37 = inttoptr i64 %36 to i8**
  br label %38

38:                                               ; preds = %29, %32
  %39 = phi i64* [ %30, %29 ], [ %20, %32 ]
  %40 = phi i64* [ %31, %29 ], [ %33, %32 ]
  %41 = phi i8** [ %14, %29 ], [ %37, %32 ]
  %42 = phi i64 [ %13, %29 ], [ %36, %32 ]
  %43 = phi i64 [ %12, %29 ], [ %34, %32 ]
  store i64 0, i64* %39, align 8
  %44 = sub i64 %43, %42
  %45 = ashr exact i64 %44, 3
  %46 = icmp ugt i64 %45, 2
  br i1 %46, label %66, label %77

47:                                               ; preds = %17, %61
  %48 = phi %"struct.vk::Queue::Task"* [ %64, %61 ], [ %19, %17 ]
  %49 = phi %"struct.vk::Queue::Task"** [ %63, %61 ], [ %8, %17 ]
  %50 = getelementptr inbounds %"struct.vk::Queue::Task", %"struct.vk::Queue::Task"* %48, i64 0, i32 3
  tail call void @_ZNSt3__110shared_ptrIN2sw12CountedEventEED2Ev(%"class.std::__1::shared_ptr.84"* %50) #13
  %51 = getelementptr inbounds %"struct.vk::Queue::Task", %"struct.vk::Queue::Task"* %48, i64 1
  %52 = ptrtoint %"struct.vk::Queue::Task"* %51 to i64
  %53 = bitcast %"struct.vk::Queue::Task"** %49 to i64*
  %54 = load i64, i64* %53, align 8
  %55 = sub i64 %52, %54
  %56 = icmp eq i64 %55, 4080
  br i1 %56, label %57, label %61

57:                                               ; preds = %47
  %58 = getelementptr inbounds %"struct.vk::Queue::Task"*, %"struct.vk::Queue::Task"** %49, i64 1
  %59 = bitcast %"struct.vk::Queue::Task"** %58 to i64*
  %60 = load i64, i64* %59, align 8
  br label %61

61:                                               ; preds = %47, %57
  %62 = phi i64 [ %60, %57 ], [ %52, %47 ]
  %63 = phi %"struct.vk::Queue::Task"** [ %58, %57 ], [ %49, %47 ]
  %64 = inttoptr i64 %62 to %"struct.vk::Queue::Task"*
  %65 = icmp eq %"struct.vk::Queue::Task"* %27, %64
  br i1 %65, label %32, label %47

66:                                               ; preds = %38, %66
  %67 = phi i8** [ %76, %66 ], [ %41, %38 ]
  %68 = load i8*, i8** %67, align 8
  tail call void @_ZdlPv(i8* %68) #14
  %69 = load %"struct.vk::Queue::Task"**, %"struct.vk::Queue::Task"*** %2, align 8
  %70 = getelementptr inbounds %"struct.vk::Queue::Task"*, %"struct.vk::Queue::Task"** %69, i64 1
  store %"struct.vk::Queue::Task"** %70, %"struct.vk::Queue::Task"*** %2, align 8
  %71 = load i64, i64* %40, align 8
  %72 = ptrtoint %"struct.vk::Queue::Task"** %70 to i64
  %73 = sub i64 %71, %72
  %74 = ashr exact i64 %73, 3
  %75 = icmp ugt i64 %74, 2
  %76 = bitcast %"struct.vk::Queue::Task"** %70 to i8**
  br i1 %75, label %66, label %77

77:                                               ; preds = %66, %38
  %78 = phi i64 [ %45, %38 ], [ %74, %66 ]
  switch i64 %78, label %82 [
    i64 1, label %80
    i64 2, label %79
  ]

79:                                               ; preds = %77
  br label %80

80:                                               ; preds = %77, %79
  %81 = phi i64 [ 102, %79 ], [ 51, %77 ]
  store i64 %81, i64* %4, align 8
  br label %82

82:                                               ; preds = %80, %77
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIPN2vk5Queue4TaskENS_9allocatorIS4_EEED2Ev(%"struct.std::__1::__split_buffer"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 1
  %3 = load %"struct.vk::Queue::Task"**, %"struct.vk::Queue::Task"*** %2, align 8
  %4 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 2
  %5 = load %"struct.vk::Queue::Task"**, %"struct.vk::Queue::Task"*** %4, align 8
  %6 = icmp eq %"struct.vk::Queue::Task"** %5, %3
  br i1 %6, label %15, label %7

7:                                                ; preds = %1
  %8 = ptrtoint %"struct.vk::Queue::Task"** %3 to i64
  %9 = getelementptr %"struct.vk::Queue::Task"*, %"struct.vk::Queue::Task"** %5, i64 -1
  %10 = ptrtoint %"struct.vk::Queue::Task"** %9 to i64
  %11 = sub i64 %10, %8
  %12 = lshr i64 %11, 3
  %13 = xor i64 %12, -1
  %14 = getelementptr %"struct.vk::Queue::Task"*, %"struct.vk::Queue::Task"** %5, i64 %13
  store %"struct.vk::Queue::Task"** %14, %"struct.vk::Queue::Task"*** %4, align 8
  br label %15

15:                                               ; preds = %1, %7
  %16 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 0
  %17 = load %"struct.vk::Queue::Task"**, %"struct.vk::Queue::Task"*** %16, align 8
  %18 = icmp eq %"struct.vk::Queue::Task"** %17, null
  br i1 %18, label %21, label %19

19:                                               ; preds = %15
  %20 = bitcast %"struct.vk::Queue::Task"** %17 to i8*
  tail call void @_ZdlPv(i8* %20) #14
  br label %21

21:                                               ; preds = %15, %19
  ret void
}

; Function Attrs: optsize
declare i8* @_ZN2vk8allocateEmmPK21VkAllocationCallbacks23VkSystemAllocationScope(i64, i64, %struct.VkAllocationCallbacks*, i32) local_unnamed_addr #3

; Function Attrs: optsize
declare void @_ZNSt3__15mutex4lockEv(%"class.std::__1::mutex"*) local_unnamed_addr #3

; Function Attrs: optsize
declare void @_ZN4marl9Scheduler5Fiber6notifyEv(%"class.marl::Scheduler::Fiber"*) local_unnamed_addr #3

; Function Attrs: nounwind optsize
declare void @_ZNSt3__118condition_variable10notify_allEv(%"class.std::__1::condition_variable"*) local_unnamed_addr #2

; Function Attrs: nounwind optsize
declare void @_ZNSt3__15mutex6unlockEv(%"class.std::__1::mutex"*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZN4marl5Event6Shared6signalEv(%"struct.marl::Event::Shared"*) local_unnamed_addr #7 comdat align 2 {
  %2 = getelementptr inbounds %"struct.marl::Event::Shared", %"struct.marl::Event::Shared"* %0, i64 0, i32 0, i32 0
  tail call void @_ZNSt3__15mutex4lockEv(%"class.std::__1::mutex"* %2) #13
  %3 = getelementptr inbounds %"struct.marl::Event::Shared", %"struct.marl::Event::Shared"* %0, i64 0, i32 4
  %4 = load i8, i8* %3, align 1, !range !2
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %6, label %82

6:                                                ; preds = %1
  store i8 1, i8* %3, align 1
  %7 = getelementptr inbounds %"struct.marl::Event::Shared", %"struct.marl::Event::Shared"* %0, i64 0, i32 3
  %8 = load i8, i8* %7, align 8
  %9 = icmp eq i8 %8, 0
  %10 = getelementptr inbounds %"struct.marl::Event::Shared", %"struct.marl::Event::Shared"* %0, i64 0, i32 1
  %11 = getelementptr inbounds %"struct.marl::Event::Shared", %"struct.marl::Event::Shared"* %0, i64 0, i32 1, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = load atomic i32, i32* %11 seq_cst, align 4
  %13 = icmp eq i32 %12, 0
  br i1 %9, label %14, label %31

14:                                               ; preds = %6
  br i1 %13, label %50, label %15

15:                                               ; preds = %14
  %16 = getelementptr inbounds %"class.marl::ConditionVariable", %"class.marl::ConditionVariable"* %10, i64 0, i32 0, i32 0
  tail call void @_ZNSt3__15mutex4lockEv(%"class.std::__1::mutex"* %16) #13
  %17 = getelementptr inbounds %"struct.marl::Event::Shared", %"struct.marl::Event::Shared"* %0, i64 0, i32 1, i32 1, i32 1
  %18 = load i64, i64* %17, align 8
  %19 = icmp eq i64 %18, 0
  br i1 %19, label %25, label %20

20:                                               ; preds = %15
  %21 = getelementptr inbounds %"struct.marl::Event::Shared", %"struct.marl::Event::Shared"* %0, i64 0, i32 1, i32 1, i32 5
  %22 = load %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"*, %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"** %21, align 8
  %23 = getelementptr inbounds %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry", %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"* %22, i64 0, i32 0
  %24 = load %"class.marl::Scheduler::Fiber"*, %"class.marl::Scheduler::Fiber"** %23, align 8
  tail call void @_ZN4marl9Scheduler5Fiber6notifyEv(%"class.marl::Scheduler::Fiber"* %24) #13
  br label %25

25:                                               ; preds = %20, %15
  tail call void @_ZNSt3__15mutex6unlockEv(%"class.std::__1::mutex"* %16) #13
  %26 = getelementptr inbounds %"struct.marl::Event::Shared", %"struct.marl::Event::Shared"* %0, i64 0, i32 1, i32 4, i32 0, i32 0, i32 0, i32 0, i32 0
  %27 = load atomic i32, i32* %26 seq_cst, align 4
  %28 = icmp sgt i32 %27, 0
  br i1 %28, label %29, label %50

29:                                               ; preds = %25
  %30 = getelementptr inbounds %"struct.marl::Event::Shared", %"struct.marl::Event::Shared"* %0, i64 0, i32 1, i32 2
  tail call void @_ZNSt3__118condition_variable10notify_oneEv(%"class.std::__1::condition_variable"* %30) #13
  br label %50

31:                                               ; preds = %6
  br i1 %13, label %50, label %32

32:                                               ; preds = %31
  %33 = getelementptr inbounds %"class.marl::ConditionVariable", %"class.marl::ConditionVariable"* %10, i64 0, i32 0, i32 0
  tail call void @_ZNSt3__15mutex4lockEv(%"class.std::__1::mutex"* %33) #13
  %34 = getelementptr inbounds %"struct.marl::Event::Shared", %"struct.marl::Event::Shared"* %0, i64 0, i32 1, i32 1, i32 5
  %35 = load %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"*, %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"** %34, align 8
  %36 = icmp eq %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"* %35, null
  br i1 %36, label %37, label %41

37:                                               ; preds = %41, %32
  tail call void @_ZNSt3__15mutex6unlockEv(%"class.std::__1::mutex"* %33) #13
  %38 = getelementptr inbounds %"struct.marl::Event::Shared", %"struct.marl::Event::Shared"* %0, i64 0, i32 1, i32 4, i32 0, i32 0, i32 0, i32 0, i32 0
  %39 = load atomic i32, i32* %38 seq_cst, align 4
  %40 = icmp sgt i32 %39, 0
  br i1 %40, label %48, label %50

41:                                               ; preds = %32, %41
  %42 = phi %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"* [ %46, %41 ], [ %35, %32 ]
  %43 = getelementptr inbounds %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry", %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"* %42, i64 0, i32 0
  %44 = load %"class.marl::Scheduler::Fiber"*, %"class.marl::Scheduler::Fiber"** %43, align 8
  tail call void @_ZN4marl9Scheduler5Fiber6notifyEv(%"class.marl::Scheduler::Fiber"* %44) #13
  %45 = getelementptr inbounds %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry", %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"* %42, i64 0, i32 1
  %46 = load %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"*, %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"** %45, align 8
  %47 = icmp eq %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"* %46, null
  br i1 %47, label %37, label %41

48:                                               ; preds = %37
  %49 = getelementptr inbounds %"struct.marl::Event::Shared", %"struct.marl::Event::Shared"* %0, i64 0, i32 1, i32 2
  tail call void @_ZNSt3__118condition_variable10notify_allEv(%"class.std::__1::condition_variable"* %49) #13
  br label %50

50:                                               ; preds = %48, %37, %31, %29, %25, %14
  %51 = getelementptr inbounds %"struct.marl::Event::Shared", %"struct.marl::Event::Shared"* %0, i64 0, i32 2, i32 4
  %52 = bitcast %"struct.marl::aligned_storage<16, 8>::type"** %51 to %"class.std::__1::shared_ptr.95"**
  %53 = load %"class.std::__1::shared_ptr.95"*, %"class.std::__1::shared_ptr.95"** %52, align 8
  %54 = getelementptr inbounds %"struct.marl::Event::Shared", %"struct.marl::Event::Shared"* %0, i64 0, i32 2, i32 1
  %55 = load i64, i64* %54, align 8
  %56 = getelementptr inbounds %"class.std::__1::shared_ptr.95", %"class.std::__1::shared_ptr.95"* %53, i64 %55
  %57 = icmp eq i64 %55, 0
  br i1 %57, label %82, label %58

58:                                               ; preds = %50, %79
  %59 = phi %"class.std::__1::shared_ptr.95"* [ %80, %79 ], [ %53, %50 ]
  %60 = bitcast %"class.std::__1::shared_ptr.95"* %59 to i64*
  %61 = load i64, i64* %60, align 8
  %62 = getelementptr inbounds %"class.std::__1::shared_ptr.95", %"class.std::__1::shared_ptr.95"* %59, i64 0, i32 1
  %63 = load %"class.std::__1::__shared_weak_count"*, %"class.std::__1::__shared_weak_count"** %62, align 8
  %64 = icmp eq %"class.std::__1::__shared_weak_count"* %63, null
  br i1 %64, label %65, label %67

65:                                               ; preds = %58
  %66 = inttoptr i64 %61 to %"struct.marl::Event::Shared"*
  tail call void @_ZN4marl5Event6Shared6signalEv(%"struct.marl::Event::Shared"* %66) #11
  br label %79

67:                                               ; preds = %58
  %68 = getelementptr inbounds %"class.std::__1::__shared_weak_count", %"class.std::__1::__shared_weak_count"* %63, i64 0, i32 0, i32 1
  %69 = atomicrmw add i64* %68, i64 1 monotonic
  %70 = inttoptr i64 %61 to %"struct.marl::Event::Shared"*
  tail call void @_ZN4marl5Event6Shared6signalEv(%"struct.marl::Event::Shared"* %70) #11
  %71 = atomicrmw add i64* %68, i64 -1 acq_rel
  %72 = icmp eq i64 %71, 0
  br i1 %72, label %73, label %79

73:                                               ; preds = %67
  %74 = getelementptr inbounds %"class.std::__1::__shared_weak_count", %"class.std::__1::__shared_weak_count"* %63, i64 0, i32 0
  %75 = bitcast %"class.std::__1::__shared_weak_count"* %63 to void (%"class.std::__1::__shared_count"*)***
  %76 = load void (%"class.std::__1::__shared_count"*)**, void (%"class.std::__1::__shared_count"*)*** %75, align 8
  %77 = getelementptr inbounds void (%"class.std::__1::__shared_count"*)*, void (%"class.std::__1::__shared_count"*)** %76, i64 2
  %78 = load void (%"class.std::__1::__shared_count"*)*, void (%"class.std::__1::__shared_count"*)** %77, align 8
  tail call void %78(%"class.std::__1::__shared_count"* %74) #13
  tail call void @_ZNSt3__119__shared_weak_count14__release_weakEv(%"class.std::__1::__shared_weak_count"* nonnull %63) #13
  br label %79

79:                                               ; preds = %65, %67, %73
  %80 = getelementptr inbounds %"class.std::__1::shared_ptr.95", %"class.std::__1::shared_ptr.95"* %59, i64 1
  %81 = icmp eq %"class.std::__1::shared_ptr.95"* %80, %56
  br i1 %81, label %82, label %58

82:                                               ; preds = %79, %50, %1
  tail call void @_ZNSt3__15mutex6unlockEv(%"class.std::__1::mutex"* %2) #13
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZNSt3__110shared_ptrIN4marl5Event6SharedEED2Ev(%"class.std::__1::shared_ptr.95"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.std::__1::shared_ptr.95", %"class.std::__1::shared_ptr.95"* %0, i64 0, i32 1
  %3 = load %"class.std::__1::__shared_weak_count"*, %"class.std::__1::__shared_weak_count"** %2, align 8
  %4 = icmp eq %"class.std::__1::__shared_weak_count"* %3, null
  br i1 %4, label %15, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.std::__1::__shared_weak_count", %"class.std::__1::__shared_weak_count"* %3, i64 0, i32 0, i32 1
  %7 = atomicrmw add i64* %6, i64 -1 acq_rel
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %9, label %15

9:                                                ; preds = %5
  %10 = getelementptr inbounds %"class.std::__1::__shared_weak_count", %"class.std::__1::__shared_weak_count"* %3, i64 0, i32 0
  %11 = bitcast %"class.std::__1::__shared_weak_count"* %3 to void (%"class.std::__1::__shared_count"*)***
  %12 = load void (%"class.std::__1::__shared_count"*)**, void (%"class.std::__1::__shared_count"*)*** %11, align 8
  %13 = getelementptr inbounds void (%"class.std::__1::__shared_count"*)*, void (%"class.std::__1::__shared_count"*)** %12, i64 2
  %14 = load void (%"class.std::__1::__shared_count"*)*, void (%"class.std::__1::__shared_count"*)** %13, align 8
  tail call void %14(%"class.std::__1::__shared_count"* %10) #13
  tail call void @_ZNSt3__119__shared_weak_count14__release_weakEv(%"class.std::__1::__shared_weak_count"* nonnull %3) #13
  br label %15

15:                                               ; preds = %9, %5, %1
  ret void
}

; Function Attrs: nounwind optsize
declare void @_ZNSt3__118condition_variable10notify_oneEv(%"class.std::__1::condition_variable"*) local_unnamed_addr #2

; Function Attrs: nounwind optsize
declare void @_ZNSt3__119__shared_weak_count14__release_weakEv(%"class.std::__1::__shared_weak_count"*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZN4marl17ConditionVariable4waitIZNS_5Event6Shared4waitEvEUlvE_EEvRNS_4lockEOT_(%"class.marl::ConditionVariable"*, %"class.marl::lock"* dereferenceable(16), %class.anon.295* dereferenceable(8)) local_unnamed_addr #7 comdat align 2 {
  %4 = alloca %"struct.marl::Allocation::Request", align 8
  %5 = alloca %"struct.marl::Allocation", align 8
  %6 = alloca %"class.std::__1::function.296", align 8
  %7 = getelementptr inbounds %class.anon.295, %class.anon.295* %2, i64 0, i32 0
  %8 = load %"struct.marl::Event::Shared"*, %"struct.marl::Event::Shared"** %7, align 8
  %9 = getelementptr inbounds %"struct.marl::Event::Shared", %"struct.marl::Event::Shared"* %8, i64 0, i32 4
  %10 = load i8, i8* %9, align 1, !range !2
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %12, label %167

12:                                               ; preds = %3
  %13 = getelementptr inbounds %"class.marl::ConditionVariable", %"class.marl::ConditionVariable"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0
  %14 = atomicrmw add i32* %13, i32 1 seq_cst
  %15 = tail call %"class.marl::Scheduler::Fiber"* @_ZN4marl9Scheduler5Fiber7currentEv() #13
  %16 = ptrtoint %"class.marl::Scheduler::Fiber"* %15 to i64
  %17 = icmp eq %"class.marl::Scheduler::Fiber"* %15, null
  br i1 %17, label %151, label %18

18:                                               ; preds = %12
  %19 = getelementptr inbounds %"class.marl::ConditionVariable", %"class.marl::ConditionVariable"* %0, i64 0, i32 0, i32 0
  tail call void @_ZNSt3__15mutex4lockEv(%"class.std::__1::mutex"* %19) #13
  %20 = getelementptr inbounds %"class.marl::ConditionVariable", %"class.marl::ConditionVariable"* %0, i64 0, i32 1, i32 4
  %21 = load %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"*, %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"** %20, align 8
  %22 = icmp eq %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"* %21, null
  br i1 %22, label %25, label %23

23:                                               ; preds = %18
  %24 = bitcast %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"** %20 to i64*
  br label %74

25:                                               ; preds = %18
  %26 = getelementptr inbounds %"class.marl::ConditionVariable", %"class.marl::ConditionVariable"* %0, i64 0, i32 1, i32 2
  %27 = load i64, i64* %26, align 8
  %28 = icmp ugt i64 %27, 8
  %29 = select i1 %28, i64 %27, i64 8
  %30 = mul i64 %29, 24
  %31 = add i64 %30, 40
  %32 = bitcast %"struct.marl::Allocation::Request"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %32) #10
  %33 = getelementptr inbounds %"struct.marl::Allocation::Request", %"struct.marl::Allocation::Request"* %4, i64 0, i32 0
  %34 = getelementptr inbounds %"struct.marl::Allocation::Request", %"struct.marl::Allocation::Request"* %4, i64 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %32, i8 -86, i64 24, i1 false) #10
  %35 = getelementptr inbounds %"struct.marl::Allocation::Request", %"struct.marl::Allocation::Request"* %4, i64 0, i32 2
  %36 = bitcast i8* %35 to i16*
  store i16 1024, i16* %36, align 8
  store i64 %31, i64* %33, align 8
  store i64 8, i64* %34, align 8
  %37 = bitcast %"struct.marl::Allocation"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %37) #10
  %38 = getelementptr inbounds %"class.marl::ConditionVariable", %"class.marl::ConditionVariable"* %0, i64 0, i32 1, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %37, i8 -86, i64 32, i1 false) #10
  %39 = load %"class.marl::Allocator"*, %"class.marl::Allocator"** %38, align 8
  %40 = bitcast %"class.marl::Allocator"* %39 to void (%"struct.marl::Allocation"*, %"class.marl::Allocator"*, %"struct.marl::Allocation::Request"*)***
  %41 = load void (%"struct.marl::Allocation"*, %"class.marl::Allocator"*, %"struct.marl::Allocation::Request"*)**, void (%"struct.marl::Allocation"*, %"class.marl::Allocator"*, %"struct.marl::Allocation::Request"*)*** %40, align 8
  %42 = getelementptr inbounds void (%"struct.marl::Allocation"*, %"class.marl::Allocator"*, %"struct.marl::Allocation::Request"*)*, void (%"struct.marl::Allocation"*, %"class.marl::Allocator"*, %"struct.marl::Allocation::Request"*)** %41, i64 2
  %43 = load void (%"struct.marl::Allocation"*, %"class.marl::Allocator"*, %"struct.marl::Allocation::Request"*)*, void (%"struct.marl::Allocation"*, %"class.marl::Allocator"*, %"struct.marl::Allocation::Request"*)** %42, align 8
  call void %43(%"struct.marl::Allocation"* nonnull sret %5, %"class.marl::Allocator"* %39, %"struct.marl::Allocation::Request"* nonnull dereferenceable(24) %4) #13
  %44 = bitcast %"struct.marl::Allocation"* %5 to %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"**
  %45 = load %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"*, %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"** %44, align 8
  %46 = bitcast %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"** %20 to i64*
  br label %47

47:                                               ; preds = %58, %25
  %48 = phi i64 [ 0, %25 ], [ %59, %58 ]
  %49 = getelementptr inbounds %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry", %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"* %45, i64 %48
  %50 = getelementptr inbounds %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry", %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"* %45, i64 %48, i32 2
  store %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"* null, %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"** %50, align 8
  %51 = load i64, i64* %46, align 8
  %52 = getelementptr inbounds %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry", %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"* %45, i64 %48, i32 1
  %53 = bitcast %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"** %52 to i64*
  store i64 %51, i64* %53, align 8
  %54 = load %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"*, %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"** %20, align 8
  %55 = icmp eq %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"* %54, null
  br i1 %55, label %58, label %56

56:                                               ; preds = %47
  %57 = getelementptr inbounds %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry", %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"* %54, i64 0, i32 2
  store %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"* %49, %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"** %57, align 8
  br label %58

58:                                               ; preds = %56, %47
  store %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"* %49, %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"** %20, align 8
  %59 = add nuw i64 %48, 1
  %60 = icmp eq i64 %59, %29
  br i1 %60, label %61, label %47

61:                                               ; preds = %58
  %62 = getelementptr inbounds %"struct.marl::Allocation", %"struct.marl::Allocation"* %5, i64 0, i32 0
  %63 = load i8*, i8** %62, align 8
  %64 = getelementptr inbounds i8, i8* %63, i64 %30
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %64, i8* nonnull align 8 %37, i64 32, i1 false) #10
  %65 = getelementptr inbounds %"class.marl::ConditionVariable", %"class.marl::ConditionVariable"* %0, i64 0, i32 1, i32 3
  %66 = bitcast %"struct.marl::containers::list<marl::Scheduler::Fiber *>::AllocationChain"** %65 to i64*
  %67 = load i64, i64* %66, align 8
  %68 = getelementptr inbounds i8, i8* %64, i64 32
  %69 = bitcast i8* %68 to i64*
  store i64 %67, i64* %69, align 8
  %70 = bitcast %"struct.marl::containers::list<marl::Scheduler::Fiber *>::AllocationChain"** %65 to i8**
  store i8* %64, i8** %70, align 8
  %71 = load i64, i64* %26, align 8
  %72 = add i64 %71, %29
  store i64 %72, i64* %26, align 8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %37) #10
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %32) #10
  %73 = load %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"*, %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"** %20, align 8
  br label %74

74:                                               ; preds = %61, %23
  %75 = phi i64* [ %24, %23 ], [ %46, %61 ]
  %76 = phi %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"* [ %21, %23 ], [ %73, %61 ]
  %77 = getelementptr inbounds %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry", %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"* %76, i64 0, i32 1
  %78 = bitcast %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"** %77 to i64*
  %79 = load i64, i64* %78, align 8
  store i64 %79, i64* %75, align 8
  %80 = getelementptr inbounds %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry", %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"* %76, i64 0, i32 2
  %81 = load %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"*, %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"** %80, align 8
  %82 = icmp eq %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"* %81, null
  br i1 %82, label %87, label %83

83:                                               ; preds = %74
  %84 = load i64, i64* %78, align 8
  %85 = getelementptr inbounds %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry", %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"* %81, i64 0, i32 1
  %86 = bitcast %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"** %85 to i64*
  store i64 %84, i64* %86, align 8
  br label %87

87:                                               ; preds = %83, %74
  %88 = load %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"*, %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"** %77, align 8
  %89 = icmp eq %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"* %88, null
  br i1 %89, label %95, label %90

90:                                               ; preds = %87
  %91 = bitcast %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"** %80 to i64*
  %92 = load i64, i64* %91, align 8
  %93 = getelementptr inbounds %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry", %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"* %88, i64 0, i32 2
  %94 = bitcast %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"** %93 to i64*
  store i64 %92, i64* %94, align 8
  br label %95

95:                                               ; preds = %90, %87
  %96 = bitcast %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"** %77 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %96, i8 0, i64 16, i1 false) #10
  %97 = getelementptr inbounds %"class.marl::ConditionVariable", %"class.marl::ConditionVariable"* %0, i64 0, i32 1, i32 5
  %98 = load %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"*, %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"** %97, align 8
  %99 = icmp eq %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"* %98, null
  br i1 %99, label %103, label %100

100:                                              ; preds = %95
  store %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"* %98, %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"** %77, align 8
  %101 = load %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"*, %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"** %97, align 8
  %102 = getelementptr inbounds %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry", %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"* %101, i64 0, i32 2
  store %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"* %76, %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"** %102, align 8
  br label %103

103:                                              ; preds = %95, %100
  store %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"* %76, %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"** %97, align 8
  %104 = bitcast %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"* %76 to i64*
  store i64 %16, i64* %104, align 8
  %105 = getelementptr inbounds %"class.marl::ConditionVariable", %"class.marl::ConditionVariable"* %0, i64 0, i32 1, i32 1
  %106 = load i64, i64* %105, align 8
  %107 = add i64 %106, 1
  store i64 %107, i64* %105, align 8
  call void @_ZNSt3__15mutex6unlockEv(%"class.std::__1::mutex"* %19) #13
  %108 = bitcast %"class.std::__1::function.296"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %108) #10
  %109 = bitcast %class.anon.295* %2 to i64*
  %110 = load i64, i64* %109, align 8
  %111 = getelementptr inbounds %"class.std::__1::function.296", %"class.std::__1::function.296"* %6, i64 0, i32 0, i32 1, i32 0
  %112 = getelementptr inbounds %"class.std::__1::function.296", %"class.std::__1::function.296"* %6, i64 0, i32 0, i32 2
  store i1 (%"union.std::__1::__function::__policy_storage"*)* @_ZNSt3__110__function16__policy_invokerIFbvEE11__call_implINS0_20__default_alloc_funcIZN4marl5Event6Shared4waitEvEUlvE_S2_EEEEbPKNS0_16__policy_storageE, i1 (%"union.std::__1::__function::__policy_storage"*)** %111, align 8
  store %"struct.std::__1::__function::__policy"* @_ZZNSt3__110__function8__policy15__choose_policyINS0_20__default_alloc_funcIZN4marl5Event6Shared4waitEvEUlvE_FbvEEEEEPKS1_NS_17integral_constantIbLb1EEEE9__policy_, %"struct.std::__1::__function::__policy"** %112, align 8
  %113 = bitcast %"class.std::__1::function.296"* %6 to i64*
  store i64 %110, i64* %113, align 8
  call void @_ZN4marl9Scheduler5Fiber4waitERNS_4lockERKNSt3__18functionIFbvEEE(%"class.marl::Scheduler::Fiber"* nonnull %15, %"class.marl::lock"* dereferenceable(16) %1, %"class.std::__1::function.296"* nonnull dereferenceable(32) %6) #13
  %114 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %112, align 8
  %115 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %114, i64 0, i32 1
  %116 = load void (i8*)*, void (i8*)** %115, align 8
  %117 = icmp eq void (i8*)* %116, null
  br i1 %117, label %121, label %118

118:                                              ; preds = %103
  %119 = getelementptr inbounds %"class.std::__1::function.296", %"class.std::__1::function.296"* %6, i64 0, i32 0, i32 0, i32 0
  %120 = load i8*, i8** %119, align 8
  call void %116(i8* %120) #13
  br label %121

121:                                              ; preds = %103, %118
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %108) #10
  call void @_ZNSt3__15mutex4lockEv(%"class.std::__1::mutex"* %19) #13
  %122 = load %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"*, %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"** %97, align 8
  %123 = icmp eq %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"* %122, %76
  br i1 %123, label %124, label %127

124:                                              ; preds = %121
  %125 = load i64, i64* %78, align 8
  %126 = bitcast %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"** %97 to i64*
  store i64 %125, i64* %126, align 8
  br label %127

127:                                              ; preds = %124, %121
  %128 = load %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"*, %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"** %80, align 8
  %129 = icmp eq %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"* %128, null
  br i1 %129, label %134, label %130

130:                                              ; preds = %127
  %131 = load i64, i64* %78, align 8
  %132 = getelementptr inbounds %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry", %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"* %128, i64 0, i32 1
  %133 = bitcast %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"** %132 to i64*
  store i64 %131, i64* %133, align 8
  br label %134

134:                                              ; preds = %130, %127
  %135 = load %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"*, %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"** %77, align 8
  %136 = icmp eq %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"* %135, null
  br i1 %136, label %142, label %137

137:                                              ; preds = %134
  %138 = bitcast %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"** %80 to i64*
  %139 = load i64, i64* %138, align 8
  %140 = getelementptr inbounds %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry", %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"* %135, i64 0, i32 2
  %141 = bitcast %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"** %140 to i64*
  store i64 %139, i64* %141, align 8
  br label %142

142:                                              ; preds = %137, %134
  call void @llvm.memset.p0i8.i64(i8* align 8 %96, i8 0, i64 16, i1 false) #10
  %143 = load %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"*, %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"** %20, align 8
  %144 = icmp eq %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"* %143, null
  br i1 %144, label %148, label %145

145:                                              ; preds = %142
  store %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"* %143, %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"** %77, align 8
  %146 = load %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"*, %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"** %20, align 8
  %147 = getelementptr inbounds %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry", %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"* %146, i64 0, i32 2
  store %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"* %76, %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"** %147, align 8
  br label %148

148:                                              ; preds = %142, %145
  store %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"* %76, %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"** %20, align 8
  %149 = load i64, i64* %105, align 8
  %150 = add i64 %149, -1
  store i64 %150, i64* %105, align 8
  call void @_ZNSt3__15mutex6unlockEv(%"class.std::__1::mutex"* %19) #13
  br label %165

151:                                              ; preds = %12
  %152 = getelementptr inbounds %"class.marl::ConditionVariable", %"class.marl::ConditionVariable"* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0, i32 0
  %153 = atomicrmw add i32* %152, i32 1 seq_cst
  %154 = getelementptr inbounds %"class.marl::ConditionVariable", %"class.marl::ConditionVariable"* %0, i64 0, i32 2
  %155 = getelementptr inbounds %"class.marl::lock", %"class.marl::lock"* %1, i64 0, i32 0
  %156 = load %"struct.marl::Event::Shared"*, %"struct.marl::Event::Shared"** %7, align 8
  %157 = getelementptr inbounds %"struct.marl::Event::Shared", %"struct.marl::Event::Shared"* %156, i64 0, i32 4
  %158 = load i8, i8* %157, align 1, !range !2
  %159 = icmp eq i8 %158, 0
  br i1 %159, label %160, label %163

160:                                              ; preds = %151, %160
  tail call void @_ZNSt3__118condition_variable4waitERNS_11unique_lockINS_5mutexEEE(%"class.std::__1::condition_variable"* %154, %"class.std::__1::unique_lock"* dereferenceable(16) %155) #13
  %161 = load i8, i8* %157, align 1, !range !2
  %162 = icmp eq i8 %161, 0
  br i1 %162, label %160, label %163

163:                                              ; preds = %160, %151
  %164 = atomicrmw sub i32* %152, i32 1 seq_cst
  br label %165

165:                                              ; preds = %163, %148
  %166 = atomicrmw sub i32* %13, i32 1 seq_cst
  br label %167

167:                                              ; preds = %3, %165
  ret void
}

; Function Attrs: optsize
declare %"class.marl::Scheduler::Fiber"* @_ZN4marl9Scheduler5Fiber7currentEv() local_unnamed_addr #3

; Function Attrs: optsize
declare void @_ZN4marl9Scheduler5Fiber4waitERNS_4lockERKNSt3__18functionIFbvEEE(%"class.marl::Scheduler::Fiber"*, %"class.marl::lock"* dereferenceable(16), %"class.std::__1::function.296"* dereferenceable(32)) local_unnamed_addr #3

; Function Attrs: noreturn nounwind optsize
declare void @abort() local_unnamed_addr #5

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNSt3__110__function16__policy_invokerIFbvEE11__call_implINS0_20__default_alloc_funcIZN4marl5Event6Shared4waitEvEUlvE_S2_EEEEbPKNS0_16__policy_storageE(%"union.std::__1::__function::__policy_storage"*) #0 comdat align 2 {
  %2 = bitcast %"union.std::__1::__function::__policy_storage"* %0 to %"struct.marl::Event::Shared"**
  %3 = load %"struct.marl::Event::Shared"*, %"struct.marl::Event::Shared"** %2, align 8
  %4 = getelementptr inbounds %"struct.marl::Event::Shared", %"struct.marl::Event::Shared"* %3, i64 0, i32 4
  %5 = load i8, i8* %4, align 1, !range !2
  %6 = icmp ne i8 %5, 0
  ret i1 %6
}

; Function Attrs: nounwind optsize
declare void @_ZNSt3__118condition_variable4waitERNS_11unique_lockINS_5mutexEEE(%"class.std::__1::condition_variable"*, %"class.std::__1::unique_lock"* dereferenceable(16)) local_unnamed_addr #2

; Function Attrs: nobuiltin nofree optsize
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #8

; Function Attrs: optsize
declare void @_ZNSt3__115__thread_structC1Ev(%"class.std::__1::__thread_struct"*) unnamed_addr #3

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden i8* @_ZNSt3__114__thread_proxyINS_5tupleIJNS_10unique_ptrINS_15__thread_structENS_14default_deleteIS3_EEEEMN2vk5QueueEFvPN4marl9SchedulerEEPS8_SB_EEEEEPvSG_(i8*) #0 comdat {
  %2 = tail call dereferenceable(4) %"class.std::__1::__thread_specific_ptr"* @_ZNSt3__119__thread_local_dataEv() #13
  %3 = bitcast i8* %0 to %"class.std::__1::unique_ptr.301"*
  %4 = bitcast i8* %0 to %"class.std::__1::__thread_struct"**
  %5 = bitcast i8* %0 to i8**
  %6 = load i8*, i8** %5, align 8
  store %"class.std::__1::__thread_struct"* null, %"class.std::__1::__thread_struct"** %4, align 8
  %7 = getelementptr inbounds %"class.std::__1::__thread_specific_ptr", %"class.std::__1::__thread_specific_ptr"* %2, i64 0, i32 0
  %8 = load i32, i32* %7, align 4
  %9 = tail call i32 @pthread_setspecific(i32 %8, i8* %6) #13
  %10 = getelementptr inbounds i8, i8* %0, i64 24
  %11 = getelementptr inbounds i8, i8* %0, i64 32
  %12 = bitcast i8* %11 to %"class.marl::Scheduler"**
  %13 = bitcast i8* %10 to i8**
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds i8, i8* %0, i64 8
  %16 = bitcast i8* %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = getelementptr inbounds i8, i8* %0, i64 16
  %19 = bitcast i8* %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = getelementptr inbounds i8, i8* %14, i64 %20
  %22 = bitcast i8* %21 to %"class.vk::Queue"*
  %23 = and i64 %17, 1
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %32, label %25

25:                                               ; preds = %1
  %26 = bitcast i8* %21 to i8**
  %27 = load i8*, i8** %26, align 8
  %28 = add i64 %17, -1
  %29 = getelementptr i8, i8* %27, i64 %28
  %30 = bitcast i8* %29 to void (%"class.vk::Queue"*, %"class.marl::Scheduler"*)**
  %31 = load void (%"class.vk::Queue"*, %"class.marl::Scheduler"*)*, void (%"class.vk::Queue"*, %"class.marl::Scheduler"*)** %30, align 8
  br label %34

32:                                               ; preds = %1
  %33 = inttoptr i64 %17 to void (%"class.vk::Queue"*, %"class.marl::Scheduler"*)*
  br label %34

34:                                               ; preds = %25, %32
  %35 = phi void (%"class.vk::Queue"*, %"class.marl::Scheduler"*)* [ %31, %25 ], [ %33, %32 ]
  %36 = load %"class.marl::Scheduler"*, %"class.marl::Scheduler"** %12, align 8
  tail call void %35(%"class.vk::Queue"* %22, %"class.marl::Scheduler"* %36) #13
  %37 = icmp eq i8* %0, null
  br i1 %37, label %39, label %38

38:                                               ; preds = %34
  tail call void @_ZNSt3__110unique_ptrINS_15__thread_structENS_14default_deleteIS1_EEE5resetEPS1_(%"class.std::__1::unique_ptr.301"* nonnull %3, %"class.std::__1::__thread_struct"* null) #13
  tail call void @_ZdlPv(i8* nonnull %0) #14
  br label %39

39:                                               ; preds = %34, %38
  ret i8* null
}

; Function Attrs: noreturn optsize
declare void @_ZNSt3__120__throw_system_errorEiPKc(i32, i8*) local_unnamed_addr #9

; Function Attrs: nounwind optsize
declare i32 @pthread_create(i64*, %union.pthread_attr_t*, i8* (i8*)*, i8*) local_unnamed_addr #2

; Function Attrs: optsize
declare dereferenceable(4) %"class.std::__1::__thread_specific_ptr"* @_ZNSt3__119__thread_local_dataEv() local_unnamed_addr #3

; Function Attrs: nounwind optsize
declare i32 @pthread_setspecific(i32, i8*) local_unnamed_addr #2

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZNSt3__110unique_ptrINS_15__thread_structENS_14default_deleteIS1_EEE5resetEPS1_(%"class.std::__1::unique_ptr.301"*, %"class.std::__1::__thread_struct"*) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::unique_ptr.301", %"class.std::__1::unique_ptr.301"* %0, i64 0, i32 0, i32 0, i32 0
  %4 = load %"class.std::__1::__thread_struct"*, %"class.std::__1::__thread_struct"** %3, align 8
  store %"class.std::__1::__thread_struct"* %1, %"class.std::__1::__thread_struct"** %3, align 8
  %5 = icmp eq %"class.std::__1::__thread_struct"* %4, null
  br i1 %5, label %8, label %6

6:                                                ; preds = %2
  tail call void @_ZNSt3__115__thread_structD1Ev(%"class.std::__1::__thread_struct"* nonnull %4) #13
  %7 = bitcast %"class.std::__1::__thread_struct"* %4 to i8*
  tail call void @_ZdlPv(i8* %7) #14
  br label %8

8:                                                ; preds = %2, %6
  ret void
}

; Function Attrs: nounwind optsize
declare void @_ZNSt3__115__thread_structD1Ev(%"class.std::__1::__thread_struct"*) unnamed_addr #2

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZNSt3__15dequeIN2vk5Queue4TaskENS_9allocatorIS3_EEE9push_backERKS3_(%"class.std::__1::deque"*, %"struct.vk::Queue::Task"* dereferenceable(40)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = bitcast %"struct.vk::Queue::Task"*** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 1
  %7 = bitcast %"struct.vk::Queue::Task"*** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = ashr exact i64 %9, 3
  %11 = icmp eq i64 %9, 0
  %12 = mul i64 %10, 102
  %13 = add i64 %12, -1
  %14 = select i1 %11, i64 0, i64 %13
  %15 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 1
  %16 = load i64, i64* %15, align 8
  %17 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %18 = load i64, i64* %17, align 8
  %19 = add i64 %18, %16
  %20 = icmp eq i64 %14, %19
  %21 = inttoptr i64 %8 to %"struct.vk::Queue::Task"**
  %22 = inttoptr i64 %5 to %"struct.vk::Queue::Task"**
  br i1 %20, label %23, label %29

23:                                               ; preds = %2
  tail call void @_ZNSt3__15dequeIN2vk5Queue4TaskENS_9allocatorIS3_EEE19__add_back_capacityEv(%"class.std::__1::deque"* %0) #11
  %24 = load i64, i64* %17, align 8
  %25 = load i64, i64* %15, align 8
  %26 = load %"struct.vk::Queue::Task"**, %"struct.vk::Queue::Task"*** %6, align 8
  %27 = load %"struct.vk::Queue::Task"**, %"struct.vk::Queue::Task"*** %3, align 8
  %28 = add i64 %25, %24
  br label %29

29:                                               ; preds = %23, %2
  %30 = phi i64 [ %28, %23 ], [ %19, %2 ]
  %31 = phi %"struct.vk::Queue::Task"** [ %27, %23 ], [ %22, %2 ]
  %32 = phi %"struct.vk::Queue::Task"** [ %26, %23 ], [ %21, %2 ]
  %33 = icmp eq %"struct.vk::Queue::Task"** %31, %32
  br i1 %33, label %40, label %34

34:                                               ; preds = %29
  %35 = udiv i64 %30, 102
  %36 = getelementptr inbounds %"struct.vk::Queue::Task"*, %"struct.vk::Queue::Task"** %32, i64 %35
  %37 = load %"struct.vk::Queue::Task"*, %"struct.vk::Queue::Task"** %36, align 8
  %38 = urem i64 %30, 102
  %39 = getelementptr inbounds %"struct.vk::Queue::Task", %"struct.vk::Queue::Task"* %37, i64 %38
  br label %40

40:                                               ; preds = %29, %34
  %41 = phi %"struct.vk::Queue::Task"* [ %39, %34 ], [ null, %29 ]
  %42 = bitcast %"struct.vk::Queue::Task"* %41 to i8*
  %43 = bitcast %"struct.vk::Queue::Task"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %42, i8* align 8 %43, i64 16, i1 false) #10
  %44 = getelementptr inbounds %"struct.vk::Queue::Task", %"struct.vk::Queue::Task"* %41, i64 0, i32 3
  %45 = getelementptr inbounds %"struct.vk::Queue::Task", %"struct.vk::Queue::Task"* %1, i64 0, i32 3
  %46 = bitcast %"class.std::__1::shared_ptr.84"* %45 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = bitcast %"class.std::__1::shared_ptr.84"* %44 to i64*
  store i64 %47, i64* %48, align 8
  %49 = getelementptr inbounds %"struct.vk::Queue::Task", %"struct.vk::Queue::Task"* %41, i64 0, i32 3, i32 1
  %50 = getelementptr inbounds %"struct.vk::Queue::Task", %"struct.vk::Queue::Task"* %1, i64 0, i32 3, i32 1
  %51 = load %"class.std::__1::__shared_weak_count"*, %"class.std::__1::__shared_weak_count"** %50, align 8
  store %"class.std::__1::__shared_weak_count"* %51, %"class.std::__1::__shared_weak_count"** %49, align 8
  %52 = icmp eq %"class.std::__1::__shared_weak_count"* %51, null
  br i1 %52, label %56, label %53

53:                                               ; preds = %40
  %54 = getelementptr inbounds %"class.std::__1::__shared_weak_count", %"class.std::__1::__shared_weak_count"* %51, i64 0, i32 0, i32 1
  %55 = atomicrmw add i64* %54, i64 1 monotonic
  br label %56

56:                                               ; preds = %40, %53
  %57 = getelementptr inbounds %"struct.vk::Queue::Task", %"struct.vk::Queue::Task"* %41, i64 0, i32 4
  %58 = getelementptr inbounds %"struct.vk::Queue::Task", %"struct.vk::Queue::Task"* %1, i64 0, i32 4
  %59 = load i32, i32* %58, align 8
  store i32 %59, i32* %57, align 8
  %60 = load i64, i64* %17, align 8
  %61 = add i64 %60, 1
  store i64 %61, i64* %17, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZNSt3__15dequeIN2vk5Queue4TaskENS_9allocatorIS3_EEE19__add_back_capacityEv(%"class.std::__1::deque"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"struct.vk::Queue::Task"*, align 8
  %3 = alloca %"struct.vk::Queue::Task"*, align 8
  %4 = alloca %"struct.std::__1::__split_buffer.319", align 16
  %5 = alloca %"struct.vk::Queue::Task"*, align 8
  %6 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 1
  %7 = load i64, i64* %6, align 8
  %8 = icmp ugt i64 %7, 101
  br i1 %8, label %9, label %102

9:                                                ; preds = %1
  %10 = add i64 %7, -102
  store i64 %10, i64* %6, align 8
  %11 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 1
  %12 = load %"struct.vk::Queue::Task"**, %"struct.vk::Queue::Task"*** %11, align 8
  %13 = bitcast %"struct.vk::Queue::Task"** %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds %"struct.vk::Queue::Task"*, %"struct.vk::Queue::Task"** %12, i64 1
  store %"struct.vk::Queue::Task"** %15, %"struct.vk::Queue::Task"*** %11, align 8
  %16 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 2
  %17 = load %"struct.vk::Queue::Task"**, %"struct.vk::Queue::Task"*** %16, align 8
  %18 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %19 = load %"struct.vk::Queue::Task"**, %"struct.vk::Queue::Task"*** %18, align 8
  %20 = icmp eq %"struct.vk::Queue::Task"** %17, %19
  %21 = ptrtoint %"struct.vk::Queue::Task"** %19 to i64
  %22 = bitcast %"struct.vk::Queue::Task"** %17 to i64*
  br i1 %20, label %23, label %98

23:                                               ; preds = %9
  %24 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 0
  %25 = load %"struct.vk::Queue::Task"**, %"struct.vk::Queue::Task"*** %24, align 8
  %26 = icmp ugt %"struct.vk::Queue::Task"** %15, %25
  %27 = ptrtoint %"struct.vk::Queue::Task"** %25 to i64
  br i1 %26, label %28, label %48

28:                                               ; preds = %23
  %29 = ptrtoint %"struct.vk::Queue::Task"** %15 to i64
  %30 = sub i64 %29, %27
  %31 = ashr exact i64 %30, 3
  %32 = add nsw i64 %31, 1
  %33 = sdiv i64 %32, -2
  %34 = getelementptr inbounds %"struct.vk::Queue::Task"*, %"struct.vk::Queue::Task"** %15, i64 %33
  %35 = ptrtoint %"struct.vk::Queue::Task"** %17 to i64
  %36 = sub i64 %35, %29
  %37 = ashr exact i64 %36, 3
  %38 = icmp eq i64 %36, 0
  br i1 %38, label %43, label %39

39:                                               ; preds = %28
  %40 = bitcast %"struct.vk::Queue::Task"** %34 to i8*
  %41 = bitcast %"struct.vk::Queue::Task"** %15 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %40, i8* align 8 %41, i64 %36, i1 false) #10
  %42 = load %"struct.vk::Queue::Task"**, %"struct.vk::Queue::Task"*** %11, align 8
  br label %43

43:                                               ; preds = %39, %28
  %44 = phi %"struct.vk::Queue::Task"** [ %15, %28 ], [ %42, %39 ]
  %45 = getelementptr inbounds %"struct.vk::Queue::Task"*, %"struct.vk::Queue::Task"** %34, i64 %37
  store %"struct.vk::Queue::Task"** %45, %"struct.vk::Queue::Task"*** %16, align 8
  %46 = getelementptr inbounds %"struct.vk::Queue::Task"*, %"struct.vk::Queue::Task"** %44, i64 %33
  store %"struct.vk::Queue::Task"** %46, %"struct.vk::Queue::Task"*** %11, align 8
  %47 = bitcast %"struct.vk::Queue::Task"** %45 to i64*
  br label %98

48:                                               ; preds = %23
  %49 = bitcast %"struct.vk::Queue::Task"*** %18 to i64*
  %50 = bitcast %"class.std::__1::deque"* %0 to i64*
  %51 = sub i64 %21, %27
  %52 = ashr exact i64 %51, 2
  %53 = icmp eq i64 %51, 0
  %54 = select i1 %53, i64 1, i64 %52
  %55 = icmp ugt i64 %54, 2305843009213693951
  br i1 %55, label %56, label %57

56:                                               ; preds = %48
  tail call void @abort() #12
  unreachable

57:                                               ; preds = %48
  %58 = lshr i64 %54, 2
  %59 = shl i64 %54, 3
  %60 = tail call i8* @_Znwm(i64 %59) #14
  %61 = bitcast i8* %60 to %"struct.vk::Queue::Task"**
  %62 = ptrtoint i8* %60 to i64
  %63 = getelementptr inbounds %"struct.vk::Queue::Task"*, %"struct.vk::Queue::Task"** %61, i64 %58
  %64 = ptrtoint %"struct.vk::Queue::Task"** %63 to i64
  %65 = getelementptr inbounds %"struct.vk::Queue::Task"*, %"struct.vk::Queue::Task"** %61, i64 %54
  %66 = ptrtoint %"struct.vk::Queue::Task"** %65 to i64
  %67 = ptrtoint %"struct.vk::Queue::Task"** %15 to i64
  %68 = ptrtoint %"struct.vk::Queue::Task"** %17 to i64
  %69 = sub i64 %68, %67
  %70 = ashr exact i64 %69, 3
  %71 = getelementptr inbounds %"struct.vk::Queue::Task"*, %"struct.vk::Queue::Task"** %63, i64 %70
  %72 = icmp eq i64 %69, 0
  br i1 %72, label %87, label %73

73:                                               ; preds = %57, %73
  %74 = phi %"struct.vk::Queue::Task"** [ %80, %73 ], [ %63, %57 ]
  %75 = phi i64 [ %81, %73 ], [ %64, %57 ]
  %76 = phi %"struct.vk::Queue::Task"** [ %82, %73 ], [ %15, %57 ]
  %77 = bitcast %"struct.vk::Queue::Task"** %76 to i64*
  %78 = load i64, i64* %77, align 8
  %79 = inttoptr i64 %75 to i64*
  store i64 %78, i64* %79, align 8
  %80 = getelementptr inbounds %"struct.vk::Queue::Task"*, %"struct.vk::Queue::Task"** %74, i64 1
  %81 = ptrtoint %"struct.vk::Queue::Task"** %80 to i64
  %82 = getelementptr inbounds %"struct.vk::Queue::Task"*, %"struct.vk::Queue::Task"** %76, i64 1
  %83 = icmp eq %"struct.vk::Queue::Task"** %71, %80
  br i1 %83, label %84, label %73

84:                                               ; preds = %73
  %85 = ptrtoint %"struct.vk::Queue::Task"** %71 to i64
  %86 = load %"struct.vk::Queue::Task"**, %"struct.vk::Queue::Task"*** %24, align 8
  br label %87

87:                                               ; preds = %84, %57
  %88 = phi %"struct.vk::Queue::Task"** [ %86, %84 ], [ %25, %57 ]
  %89 = phi i64 [ %85, %84 ], [ %64, %57 ]
  store i64 %62, i64* %50, align 8
  %90 = bitcast %"struct.vk::Queue::Task"*** %11 to i64*
  store i64 %64, i64* %90, align 8
  %91 = bitcast %"struct.vk::Queue::Task"*** %16 to i64*
  store i64 %89, i64* %91, align 8
  store i64 %66, i64* %49, align 8
  %92 = icmp eq %"struct.vk::Queue::Task"** %88, null
  %93 = inttoptr i64 %89 to i64*
  br i1 %92, label %98, label %94

94:                                               ; preds = %87
  %95 = bitcast %"struct.vk::Queue::Task"** %88 to i8*
  tail call void @_ZdlPv(i8* %95) #14
  %96 = bitcast %"struct.vk::Queue::Task"*** %16 to i64**
  %97 = load i64*, i64** %96, align 8
  br label %98

98:                                               ; preds = %9, %43, %87, %94
  %99 = phi i64* [ %97, %94 ], [ %93, %87 ], [ %47, %43 ], [ %22, %9 ]
  store i64 %14, i64* %99, align 8
  %100 = load %"struct.vk::Queue::Task"**, %"struct.vk::Queue::Task"*** %16, align 8
  %101 = getelementptr inbounds %"struct.vk::Queue::Task"*, %"struct.vk::Queue::Task"** %100, i64 1
  store %"struct.vk::Queue::Task"** %101, %"struct.vk::Queue::Task"*** %16, align 8
  br label %279

102:                                              ; preds = %1
  %103 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0
  %104 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 2
  %105 = bitcast %"struct.vk::Queue::Task"*** %104 to i64*
  %106 = load i64, i64* %105, align 8
  %107 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 1
  %108 = bitcast %"struct.vk::Queue::Task"*** %107 to i64*
  %109 = load i64, i64* %108, align 8
  %110 = sub i64 %106, %109
  %111 = ashr exact i64 %110, 3
  %112 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %113 = bitcast %"struct.vk::Queue::Task"*** %112 to i64*
  %114 = load i64, i64* %113, align 8
  %115 = bitcast %"class.std::__1::deque"* %0 to i64*
  %116 = load i64, i64* %115, align 8
  %117 = sub i64 %114, %116
  %118 = ashr exact i64 %117, 3
  %119 = icmp ult i64 %111, %118
  br i1 %119, label %120, label %214

120:                                              ; preds = %102
  %121 = icmp eq i64 %114, %106
  br i1 %121, label %126, label %122

122:                                              ; preds = %120
  %123 = bitcast %"struct.vk::Queue::Task"** %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %123) #10
  %124 = tail call i8* @_Znwm(i64 4080) #14
  %125 = bitcast %"struct.vk::Queue::Task"** %2 to i8**
  store i8* %124, i8** %125, align 8
  call void @_ZNSt3__114__split_bufferIPN2vk5Queue4TaskENS_9allocatorIS4_EEE9push_backEOS4_(%"struct.std::__1::__split_buffer"* %103, %"struct.vk::Queue::Task"** nonnull dereferenceable(8) %2) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %123) #10
  br label %279

126:                                              ; preds = %120
  %127 = bitcast %"struct.vk::Queue::Task"** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %127) #10
  %128 = tail call i8* @_Znwm(i64 4080) #14
  %129 = bitcast %"struct.vk::Queue::Task"** %3 to i8**
  store i8* %128, i8** %129, align 8
  call void @_ZNSt3__114__split_bufferIPN2vk5Queue4TaskENS_9allocatorIS4_EEE10push_frontEOS4_(%"struct.std::__1::__split_buffer"* %103, %"struct.vk::Queue::Task"** nonnull dereferenceable(8) %3) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %127) #10
  %130 = load %"struct.vk::Queue::Task"**, %"struct.vk::Queue::Task"*** %107, align 8
  %131 = bitcast %"struct.vk::Queue::Task"** %130 to i64*
  %132 = load i64, i64* %131, align 8
  %133 = getelementptr inbounds %"struct.vk::Queue::Task"*, %"struct.vk::Queue::Task"** %130, i64 1
  store %"struct.vk::Queue::Task"** %133, %"struct.vk::Queue::Task"*** %107, align 8
  %134 = load %"struct.vk::Queue::Task"**, %"struct.vk::Queue::Task"*** %104, align 8
  %135 = load %"struct.vk::Queue::Task"**, %"struct.vk::Queue::Task"*** %112, align 8
  %136 = icmp eq %"struct.vk::Queue::Task"** %134, %135
  %137 = ptrtoint %"struct.vk::Queue::Task"** %135 to i64
  %138 = bitcast %"struct.vk::Queue::Task"** %134 to i64*
  br i1 %136, label %139, label %210

139:                                              ; preds = %126
  %140 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 0
  %141 = load %"struct.vk::Queue::Task"**, %"struct.vk::Queue::Task"*** %140, align 8
  %142 = icmp ugt %"struct.vk::Queue::Task"** %133, %141
  %143 = ptrtoint %"struct.vk::Queue::Task"** %141 to i64
  br i1 %142, label %144, label %164

144:                                              ; preds = %139
  %145 = ptrtoint %"struct.vk::Queue::Task"** %133 to i64
  %146 = sub i64 %145, %143
  %147 = ashr exact i64 %146, 3
  %148 = add nsw i64 %147, 1
  %149 = sdiv i64 %148, -2
  %150 = getelementptr inbounds %"struct.vk::Queue::Task"*, %"struct.vk::Queue::Task"** %133, i64 %149
  %151 = ptrtoint %"struct.vk::Queue::Task"** %134 to i64
  %152 = sub i64 %151, %145
  %153 = ashr exact i64 %152, 3
  %154 = icmp eq i64 %152, 0
  br i1 %154, label %159, label %155

155:                                              ; preds = %144
  %156 = bitcast %"struct.vk::Queue::Task"** %150 to i8*
  %157 = bitcast %"struct.vk::Queue::Task"** %133 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %156, i8* align 8 %157, i64 %152, i1 false) #10
  %158 = load %"struct.vk::Queue::Task"**, %"struct.vk::Queue::Task"*** %107, align 8
  br label %159

159:                                              ; preds = %155, %144
  %160 = phi %"struct.vk::Queue::Task"** [ %133, %144 ], [ %158, %155 ]
  %161 = getelementptr inbounds %"struct.vk::Queue::Task"*, %"struct.vk::Queue::Task"** %150, i64 %153
  store %"struct.vk::Queue::Task"** %161, %"struct.vk::Queue::Task"*** %104, align 8
  %162 = getelementptr inbounds %"struct.vk::Queue::Task"*, %"struct.vk::Queue::Task"** %160, i64 %149
  store %"struct.vk::Queue::Task"** %162, %"struct.vk::Queue::Task"*** %107, align 8
  %163 = bitcast %"struct.vk::Queue::Task"** %161 to i64*
  br label %210

164:                                              ; preds = %139
  %165 = sub i64 %137, %143
  %166 = ashr exact i64 %165, 2
  %167 = icmp eq i64 %165, 0
  %168 = select i1 %167, i64 1, i64 %166
  %169 = icmp ugt i64 %168, 2305843009213693951
  br i1 %169, label %170, label %171

170:                                              ; preds = %164
  call void @abort() #12
  unreachable

171:                                              ; preds = %164
  %172 = lshr i64 %168, 2
  %173 = shl i64 %168, 3
  %174 = call i8* @_Znwm(i64 %173) #14
  %175 = bitcast i8* %174 to %"struct.vk::Queue::Task"**
  %176 = ptrtoint i8* %174 to i64
  %177 = getelementptr inbounds %"struct.vk::Queue::Task"*, %"struct.vk::Queue::Task"** %175, i64 %172
  %178 = ptrtoint %"struct.vk::Queue::Task"** %177 to i64
  %179 = getelementptr inbounds %"struct.vk::Queue::Task"*, %"struct.vk::Queue::Task"** %175, i64 %168
  %180 = ptrtoint %"struct.vk::Queue::Task"** %179 to i64
  %181 = ptrtoint %"struct.vk::Queue::Task"** %133 to i64
  %182 = ptrtoint %"struct.vk::Queue::Task"** %134 to i64
  %183 = sub i64 %182, %181
  %184 = ashr exact i64 %183, 3
  %185 = getelementptr inbounds %"struct.vk::Queue::Task"*, %"struct.vk::Queue::Task"** %177, i64 %184
  %186 = icmp eq i64 %183, 0
  br i1 %186, label %201, label %187

187:                                              ; preds = %171, %187
  %188 = phi %"struct.vk::Queue::Task"** [ %194, %187 ], [ %177, %171 ]
  %189 = phi i64 [ %195, %187 ], [ %178, %171 ]
  %190 = phi %"struct.vk::Queue::Task"** [ %196, %187 ], [ %133, %171 ]
  %191 = bitcast %"struct.vk::Queue::Task"** %190 to i64*
  %192 = load i64, i64* %191, align 8
  %193 = inttoptr i64 %189 to i64*
  store i64 %192, i64* %193, align 8
  %194 = getelementptr inbounds %"struct.vk::Queue::Task"*, %"struct.vk::Queue::Task"** %188, i64 1
  %195 = ptrtoint %"struct.vk::Queue::Task"** %194 to i64
  %196 = getelementptr inbounds %"struct.vk::Queue::Task"*, %"struct.vk::Queue::Task"** %190, i64 1
  %197 = icmp eq %"struct.vk::Queue::Task"** %185, %194
  br i1 %197, label %198, label %187

198:                                              ; preds = %187
  %199 = ptrtoint %"struct.vk::Queue::Task"** %185 to i64
  %200 = load %"struct.vk::Queue::Task"**, %"struct.vk::Queue::Task"*** %140, align 8
  br label %201

201:                                              ; preds = %198, %171
  %202 = phi %"struct.vk::Queue::Task"** [ %200, %198 ], [ %141, %171 ]
  %203 = phi i64 [ %199, %198 ], [ %178, %171 ]
  store i64 %176, i64* %115, align 8
  store i64 %178, i64* %108, align 8
  store i64 %203, i64* %105, align 8
  store i64 %180, i64* %113, align 8
  %204 = icmp eq %"struct.vk::Queue::Task"** %202, null
  %205 = inttoptr i64 %203 to i64*
  br i1 %204, label %210, label %206

206:                                              ; preds = %201
  %207 = bitcast %"struct.vk::Queue::Task"** %202 to i8*
  call void @_ZdlPv(i8* %207) #14
  %208 = bitcast %"struct.vk::Queue::Task"*** %104 to i64**
  %209 = load i64*, i64** %208, align 8
  br label %210

210:                                              ; preds = %126, %159, %201, %206
  %211 = phi i64* [ %209, %206 ], [ %205, %201 ], [ %163, %159 ], [ %138, %126 ]
  store i64 %132, i64* %211, align 8
  %212 = load %"struct.vk::Queue::Task"**, %"struct.vk::Queue::Task"*** %104, align 8
  %213 = getelementptr inbounds %"struct.vk::Queue::Task"*, %"struct.vk::Queue::Task"** %212, i64 1
  store %"struct.vk::Queue::Task"** %213, %"struct.vk::Queue::Task"*** %104, align 8
  br label %279

214:                                              ; preds = %102
  %215 = bitcast %"struct.std::__1::__split_buffer.319"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %215) #10
  %216 = getelementptr inbounds %"struct.std::__1::__split_buffer.319", %"struct.std::__1::__split_buffer.319"* %4, i64 0, i32 1
  %217 = getelementptr inbounds %"struct.std::__1::__split_buffer.319", %"struct.std::__1::__split_buffer.319"* %4, i64 0, i32 2
  %218 = getelementptr inbounds %"struct.std::__1::__split_buffer.319", %"struct.std::__1::__split_buffer.319"* %4, i64 0, i32 3, i32 0, i32 0
  %219 = getelementptr inbounds %"struct.std::__1::__split_buffer.319", %"struct.std::__1::__split_buffer.319"* %4, i64 0, i32 3, i32 1, i32 0
  %220 = ashr exact i64 %117, 2
  %221 = icmp eq i64 %117, 0
  %222 = select i1 %221, i64 1, i64 %220
  %223 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 3
  %224 = bitcast %"struct.std::__1::__split_buffer.319"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %224, i8 -86, i64 24, i1 false)
  store %"struct.vk::Queue::Task"** null, %"struct.vk::Queue::Task"*** %218, align 8
  %225 = bitcast %"class.std::__1::allocator"** %219 to %"class.std::__1::__compressed_pair.96"**
  store %"class.std::__1::__compressed_pair.96"* %223, %"class.std::__1::__compressed_pair.96"** %225, align 8
  %226 = icmp ugt i64 %222, 2305843009213693951
  br i1 %226, label %227, label %228

227:                                              ; preds = %214
  tail call void @abort() #12
  unreachable

228:                                              ; preds = %214
  %229 = shl i64 %222, 3
  %230 = tail call i8* @_Znwm(i64 %229) #14
  %231 = bitcast i8* %230 to %"struct.vk::Queue::Task"**
  %232 = bitcast %"struct.std::__1::__split_buffer.319"* %4 to i8**
  store i8* %230, i8** %232, align 16
  %233 = getelementptr inbounds %"struct.vk::Queue::Task"*, %"struct.vk::Queue::Task"** %231, i64 %111
  store %"struct.vk::Queue::Task"** %233, %"struct.vk::Queue::Task"*** %217, align 16
  store %"struct.vk::Queue::Task"** %233, %"struct.vk::Queue::Task"*** %216, align 8
  %234 = getelementptr inbounds %"struct.vk::Queue::Task"*, %"struct.vk::Queue::Task"** %231, i64 %222
  store %"struct.vk::Queue::Task"** %234, %"struct.vk::Queue::Task"*** %218, align 8
  %235 = tail call i8* @_Znwm(i64 4080) #14
  %236 = bitcast %"struct.vk::Queue::Task"** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %236) #10
  %237 = bitcast %"struct.vk::Queue::Task"** %5 to i8**
  store i8* %235, i8** %237, align 8
  call void @_ZNSt3__114__split_bufferIPN2vk5Queue4TaskERNS_9allocatorIS4_EEE9push_backEOS4_(%"struct.std::__1::__split_buffer.319"* nonnull %4, %"struct.vk::Queue::Task"** nonnull dereferenceable(8) %5) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %236) #10
  %238 = load %"struct.vk::Queue::Task"**, %"struct.vk::Queue::Task"*** %104, align 8
  %239 = load %"struct.vk::Queue::Task"**, %"struct.vk::Queue::Task"*** %107, align 8
  %240 = icmp eq %"struct.vk::Queue::Task"** %238, %239
  %241 = ptrtoint %"struct.vk::Queue::Task"** %238 to i64
  br i1 %240, label %244, label %274

242:                                              ; preds = %274
  %243 = load i64, i64* %105, align 8
  br label %244

244:                                              ; preds = %242, %228
  %245 = phi i64 [ %243, %242 ], [ %241, %228 ]
  %246 = phi %"struct.vk::Queue::Task"** [ %277, %242 ], [ %239, %228 ]
  %247 = ptrtoint %"struct.vk::Queue::Task"** %246 to i64
  %248 = load i64, i64* %115, align 8
  %249 = bitcast %"struct.std::__1::__split_buffer.319"* %4 to i64*
  %250 = bitcast %"struct.vk::Queue::Task"*** %216 to i64*
  %251 = bitcast %"struct.std::__1::__split_buffer.319"* %4 to <2 x i64>*
  %252 = load <2 x i64>, <2 x i64>* %251, align 16
  store i64 %248, i64* %249, align 16
  %253 = bitcast %"class.std::__1::deque"* %0 to <2 x i64>*
  store <2 x i64> %252, <2 x i64>* %253, align 8
  store i64 %247, i64* %250, align 8
  %254 = bitcast %"struct.vk::Queue::Task"*** %217 to i64*
  %255 = bitcast %"struct.vk::Queue::Task"*** %218 to i64*
  %256 = bitcast %"struct.vk::Queue::Task"*** %217 to <2 x i64>*
  %257 = load <2 x i64>, <2 x i64>* %256, align 16
  store i64 %245, i64* %254, align 16
  %258 = load i64, i64* %113, align 8
  %259 = bitcast %"struct.vk::Queue::Task"*** %104 to <2 x i64>*
  store <2 x i64> %257, <2 x i64>* %259, align 8
  store i64 %258, i64* %255, align 8
  %260 = inttoptr i64 %245 to %"struct.vk::Queue::Task"**
  %261 = icmp eq %"struct.vk::Queue::Task"** %246, %260
  br i1 %261, label %269, label %262

262:                                              ; preds = %244
  %263 = getelementptr %"struct.vk::Queue::Task"*, %"struct.vk::Queue::Task"** %260, i64 -1
  %264 = ptrtoint %"struct.vk::Queue::Task"** %263 to i64
  %265 = sub i64 %264, %247
  %266 = lshr i64 %265, 3
  %267 = xor i64 %266, -1
  %268 = getelementptr %"struct.vk::Queue::Task"*, %"struct.vk::Queue::Task"** %260, i64 %267
  store %"struct.vk::Queue::Task"** %268, %"struct.vk::Queue::Task"*** %217, align 16
  br label %269

269:                                              ; preds = %262, %244
  %270 = icmp eq i64 %248, 0
  br i1 %270, label %273, label %271

271:                                              ; preds = %269
  %272 = inttoptr i64 %248 to i8*
  call void @_ZdlPv(i8* %272) #14
  br label %273

273:                                              ; preds = %269, %271
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %215) #10
  br label %279

274:                                              ; preds = %228, %274
  %275 = phi %"struct.vk::Queue::Task"** [ %276, %274 ], [ %238, %228 ]
  %276 = getelementptr inbounds %"struct.vk::Queue::Task"*, %"struct.vk::Queue::Task"** %275, i64 -1
  call void @_ZNSt3__114__split_bufferIPN2vk5Queue4TaskERNS_9allocatorIS4_EEE10push_frontERKS4_(%"struct.std::__1::__split_buffer.319"* nonnull %4, %"struct.vk::Queue::Task"** dereferenceable(8) %276) #11
  %277 = load %"struct.vk::Queue::Task"**, %"struct.vk::Queue::Task"*** %107, align 8
  %278 = icmp eq %"struct.vk::Queue::Task"** %276, %277
  br i1 %278, label %242, label %274

279:                                              ; preds = %273, %210, %122, %98
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIPN2vk5Queue4TaskENS_9allocatorIS4_EEE9push_backEOS4_(%"struct.std::__1::__split_buffer"*, %"struct.vk::Queue::Task"** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 2
  %4 = load %"struct.vk::Queue::Task"**, %"struct.vk::Queue::Task"*** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 3, i32 0, i32 0
  %6 = load %"struct.vk::Queue::Task"**, %"struct.vk::Queue::Task"*** %5, align 8
  %7 = icmp eq %"struct.vk::Queue::Task"** %4, %6
  %8 = ptrtoint %"struct.vk::Queue::Task"** %6 to i64
  %9 = bitcast %"struct.vk::Queue::Task"** %4 to i64*
  br i1 %7, label %10, label %87

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 1
  %12 = load %"struct.vk::Queue::Task"**, %"struct.vk::Queue::Task"*** %11, align 8
  %13 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 0
  %14 = load %"struct.vk::Queue::Task"**, %"struct.vk::Queue::Task"*** %13, align 8
  %15 = icmp ugt %"struct.vk::Queue::Task"** %12, %14
  %16 = ptrtoint %"struct.vk::Queue::Task"** %14 to i64
  br i1 %15, label %17, label %37

17:                                               ; preds = %10
  %18 = ptrtoint %"struct.vk::Queue::Task"** %12 to i64
  %19 = sub i64 %18, %16
  %20 = ashr exact i64 %19, 3
  %21 = add nsw i64 %20, 1
  %22 = sdiv i64 %21, -2
  %23 = getelementptr inbounds %"struct.vk::Queue::Task"*, %"struct.vk::Queue::Task"** %12, i64 %22
  %24 = ptrtoint %"struct.vk::Queue::Task"** %4 to i64
  %25 = sub i64 %24, %18
  %26 = ashr exact i64 %25, 3
  %27 = icmp eq i64 %25, 0
  br i1 %27, label %32, label %28

28:                                               ; preds = %17
  %29 = bitcast %"struct.vk::Queue::Task"** %23 to i8*
  %30 = bitcast %"struct.vk::Queue::Task"** %12 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %29, i8* align 8 %30, i64 %25, i1 false) #10
  %31 = load %"struct.vk::Queue::Task"**, %"struct.vk::Queue::Task"*** %11, align 8
  br label %32

32:                                               ; preds = %17, %28
  %33 = phi %"struct.vk::Queue::Task"** [ %12, %17 ], [ %31, %28 ]
  %34 = getelementptr inbounds %"struct.vk::Queue::Task"*, %"struct.vk::Queue::Task"** %23, i64 %26
  store %"struct.vk::Queue::Task"** %34, %"struct.vk::Queue::Task"*** %3, align 8
  %35 = getelementptr inbounds %"struct.vk::Queue::Task"*, %"struct.vk::Queue::Task"** %33, i64 %22
  store %"struct.vk::Queue::Task"** %35, %"struct.vk::Queue::Task"*** %11, align 8
  %36 = bitcast %"struct.vk::Queue::Task"** %34 to i64*
  br label %87

37:                                               ; preds = %10
  %38 = bitcast %"struct.vk::Queue::Task"*** %5 to i64*
  %39 = bitcast %"struct.std::__1::__split_buffer"* %0 to i64*
  %40 = sub i64 %8, %16
  %41 = ashr exact i64 %40, 2
  %42 = icmp eq i64 %40, 0
  %43 = select i1 %42, i64 1, i64 %41
  %44 = icmp ugt i64 %43, 2305843009213693951
  br i1 %44, label %45, label %46

45:                                               ; preds = %37
  tail call void @abort() #12
  unreachable

46:                                               ; preds = %37
  %47 = lshr i64 %43, 2
  %48 = shl i64 %43, 3
  %49 = tail call i8* @_Znwm(i64 %48) #14
  %50 = bitcast i8* %49 to %"struct.vk::Queue::Task"**
  %51 = ptrtoint i8* %49 to i64
  %52 = getelementptr inbounds %"struct.vk::Queue::Task"*, %"struct.vk::Queue::Task"** %50, i64 %47
  %53 = ptrtoint %"struct.vk::Queue::Task"** %52 to i64
  %54 = getelementptr inbounds %"struct.vk::Queue::Task"*, %"struct.vk::Queue::Task"** %50, i64 %43
  %55 = ptrtoint %"struct.vk::Queue::Task"** %54 to i64
  %56 = ptrtoint %"struct.vk::Queue::Task"** %12 to i64
  %57 = ptrtoint %"struct.vk::Queue::Task"** %4 to i64
  %58 = sub i64 %57, %56
  %59 = ashr exact i64 %58, 3
  %60 = getelementptr inbounds %"struct.vk::Queue::Task"*, %"struct.vk::Queue::Task"** %52, i64 %59
  %61 = icmp eq i64 %58, 0
  br i1 %61, label %76, label %62

62:                                               ; preds = %46, %62
  %63 = phi %"struct.vk::Queue::Task"** [ %69, %62 ], [ %52, %46 ]
  %64 = phi i64 [ %70, %62 ], [ %53, %46 ]
  %65 = phi %"struct.vk::Queue::Task"** [ %71, %62 ], [ %12, %46 ]
  %66 = bitcast %"struct.vk::Queue::Task"** %65 to i64*
  %67 = load i64, i64* %66, align 8
  %68 = inttoptr i64 %64 to i64*
  store i64 %67, i64* %68, align 8
  %69 = getelementptr inbounds %"struct.vk::Queue::Task"*, %"struct.vk::Queue::Task"** %63, i64 1
  %70 = ptrtoint %"struct.vk::Queue::Task"** %69 to i64
  %71 = getelementptr inbounds %"struct.vk::Queue::Task"*, %"struct.vk::Queue::Task"** %65, i64 1
  %72 = icmp eq %"struct.vk::Queue::Task"** %60, %69
  br i1 %72, label %73, label %62

73:                                               ; preds = %62
  %74 = ptrtoint %"struct.vk::Queue::Task"** %60 to i64
  %75 = load %"struct.vk::Queue::Task"**, %"struct.vk::Queue::Task"*** %13, align 8
  br label %76

76:                                               ; preds = %46, %73
  %77 = phi %"struct.vk::Queue::Task"** [ %75, %73 ], [ %14, %46 ]
  %78 = phi i64 [ %74, %73 ], [ %53, %46 ]
  store i64 %51, i64* %39, align 8
  %79 = bitcast %"struct.vk::Queue::Task"*** %11 to i64*
  store i64 %53, i64* %79, align 8
  %80 = bitcast %"struct.vk::Queue::Task"*** %3 to i64*
  store i64 %78, i64* %80, align 8
  store i64 %55, i64* %38, align 8
  %81 = icmp eq %"struct.vk::Queue::Task"** %77, null
  %82 = inttoptr i64 %78 to i64*
  br i1 %81, label %87, label %83

83:                                               ; preds = %76
  %84 = bitcast %"struct.vk::Queue::Task"** %77 to i8*
  tail call void @_ZdlPv(i8* %84) #14
  %85 = bitcast %"struct.vk::Queue::Task"*** %3 to i64**
  %86 = load i64*, i64** %85, align 8
  br label %87

87:                                               ; preds = %83, %76, %32, %2
  %88 = phi i64* [ %86, %83 ], [ %82, %76 ], [ %36, %32 ], [ %9, %2 ]
  %89 = bitcast %"struct.vk::Queue::Task"** %1 to i64*
  %90 = load i64, i64* %89, align 8
  store i64 %90, i64* %88, align 8
  %91 = load %"struct.vk::Queue::Task"**, %"struct.vk::Queue::Task"*** %3, align 8
  %92 = getelementptr inbounds %"struct.vk::Queue::Task"*, %"struct.vk::Queue::Task"** %91, i64 1
  store %"struct.vk::Queue::Task"** %92, %"struct.vk::Queue::Task"*** %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIPN2vk5Queue4TaskENS_9allocatorIS4_EEE10push_frontEOS4_(%"struct.std::__1::__split_buffer"*, %"struct.vk::Queue::Task"** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 1
  %4 = load %"struct.vk::Queue::Task"**, %"struct.vk::Queue::Task"*** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 0
  %6 = load %"struct.vk::Queue::Task"**, %"struct.vk::Queue::Task"*** %5, align 8
  %7 = icmp eq %"struct.vk::Queue::Task"** %4, %6
  %8 = ptrtoint %"struct.vk::Queue::Task"** %6 to i64
  br i1 %7, label %9, label %86

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 2
  %11 = load %"struct.vk::Queue::Task"**, %"struct.vk::Queue::Task"*** %10, align 8
  %12 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 3, i32 0, i32 0
  %13 = load %"struct.vk::Queue::Task"**, %"struct.vk::Queue::Task"*** %12, align 8
  %14 = icmp ult %"struct.vk::Queue::Task"** %11, %13
  %15 = bitcast %"struct.vk::Queue::Task"*** %12 to i64*
  %16 = ptrtoint %"struct.vk::Queue::Task"** %13 to i64
  br i1 %14, label %17, label %38

17:                                               ; preds = %9
  %18 = ptrtoint %"struct.vk::Queue::Task"** %11 to i64
  %19 = sub i64 %16, %18
  %20 = ashr exact i64 %19, 3
  %21 = add nsw i64 %20, 1
  %22 = sdiv i64 %21, 2
  %23 = getelementptr inbounds %"struct.vk::Queue::Task"*, %"struct.vk::Queue::Task"** %11, i64 %22
  %24 = ptrtoint %"struct.vk::Queue::Task"** %4 to i64
  %25 = sub i64 %18, %24
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %34, label %27

27:                                               ; preds = %17
  %28 = ashr exact i64 %25, 3
  %29 = sub nsw i64 0, %28
  %30 = getelementptr inbounds %"struct.vk::Queue::Task"*, %"struct.vk::Queue::Task"** %23, i64 %29
  %31 = bitcast %"struct.vk::Queue::Task"** %30 to i8*
  %32 = bitcast %"struct.vk::Queue::Task"** %4 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %31, i8* align 8 %32, i64 %25, i1 false) #10
  %33 = load %"struct.vk::Queue::Task"**, %"struct.vk::Queue::Task"*** %10, align 8
  br label %34

34:                                               ; preds = %17, %27
  %35 = phi %"struct.vk::Queue::Task"** [ %33, %27 ], [ %11, %17 ]
  %36 = phi %"struct.vk::Queue::Task"** [ %30, %27 ], [ %23, %17 ]
  store %"struct.vk::Queue::Task"** %36, %"struct.vk::Queue::Task"*** %3, align 8
  %37 = getelementptr inbounds %"struct.vk::Queue::Task"*, %"struct.vk::Queue::Task"** %35, i64 %22
  store %"struct.vk::Queue::Task"** %37, %"struct.vk::Queue::Task"*** %10, align 8
  br label %86

38:                                               ; preds = %9
  %39 = bitcast %"struct.std::__1::__split_buffer"* %0 to i64*
  %40 = sub i64 %16, %8
  %41 = ashr exact i64 %40, 2
  %42 = icmp eq i64 %40, 0
  %43 = select i1 %42, i64 1, i64 %41
  %44 = icmp ugt i64 %43, 2305843009213693951
  br i1 %44, label %45, label %46

45:                                               ; preds = %38
  tail call void @abort() #12
  unreachable

46:                                               ; preds = %38
  %47 = add nuw nsw i64 %43, 3
  %48 = lshr i64 %47, 2
  %49 = shl i64 %43, 3
  %50 = tail call i8* @_Znwm(i64 %49) #14
  %51 = bitcast i8* %50 to %"struct.vk::Queue::Task"**
  %52 = ptrtoint i8* %50 to i64
  %53 = getelementptr inbounds %"struct.vk::Queue::Task"*, %"struct.vk::Queue::Task"** %51, i64 %48
  %54 = ptrtoint %"struct.vk::Queue::Task"** %53 to i64
  %55 = getelementptr inbounds %"struct.vk::Queue::Task"*, %"struct.vk::Queue::Task"** %51, i64 %43
  %56 = ptrtoint %"struct.vk::Queue::Task"** %55 to i64
  %57 = ptrtoint %"struct.vk::Queue::Task"** %4 to i64
  %58 = ptrtoint %"struct.vk::Queue::Task"** %11 to i64
  %59 = sub i64 %58, %57
  %60 = ashr exact i64 %59, 3
  %61 = getelementptr inbounds %"struct.vk::Queue::Task"*, %"struct.vk::Queue::Task"** %53, i64 %60
  %62 = icmp eq i64 %59, 0
  br i1 %62, label %77, label %63

63:                                               ; preds = %46, %63
  %64 = phi %"struct.vk::Queue::Task"** [ %70, %63 ], [ %53, %46 ]
  %65 = phi i64 [ %71, %63 ], [ %54, %46 ]
  %66 = phi %"struct.vk::Queue::Task"** [ %72, %63 ], [ %4, %46 ]
  %67 = bitcast %"struct.vk::Queue::Task"** %66 to i64*
  %68 = load i64, i64* %67, align 8
  %69 = inttoptr i64 %65 to i64*
  store i64 %68, i64* %69, align 8
  %70 = getelementptr inbounds %"struct.vk::Queue::Task"*, %"struct.vk::Queue::Task"** %64, i64 1
  %71 = ptrtoint %"struct.vk::Queue::Task"** %70 to i64
  %72 = getelementptr inbounds %"struct.vk::Queue::Task"*, %"struct.vk::Queue::Task"** %66, i64 1
  %73 = icmp eq %"struct.vk::Queue::Task"** %61, %70
  br i1 %73, label %74, label %63

74:                                               ; preds = %63
  %75 = ptrtoint %"struct.vk::Queue::Task"** %61 to i64
  %76 = load %"struct.vk::Queue::Task"**, %"struct.vk::Queue::Task"*** %5, align 8
  br label %77

77:                                               ; preds = %46, %74
  %78 = phi %"struct.vk::Queue::Task"** [ %76, %74 ], [ %4, %46 ]
  %79 = phi i64 [ %75, %74 ], [ %54, %46 ]
  store i64 %52, i64* %39, align 8
  %80 = bitcast %"struct.vk::Queue::Task"*** %3 to i64*
  store i64 %54, i64* %80, align 8
  %81 = bitcast %"struct.vk::Queue::Task"*** %10 to i64*
  store i64 %79, i64* %81, align 8
  store i64 %56, i64* %15, align 8
  %82 = icmp eq %"struct.vk::Queue::Task"** %78, null
  br i1 %82, label %86, label %83

83:                                               ; preds = %77
  %84 = bitcast %"struct.vk::Queue::Task"** %78 to i8*
  tail call void @_ZdlPv(i8* %84) #14
  %85 = load %"struct.vk::Queue::Task"**, %"struct.vk::Queue::Task"*** %3, align 8
  br label %86

86:                                               ; preds = %83, %77, %34, %2
  %87 = phi %"struct.vk::Queue::Task"** [ %85, %83 ], [ %53, %77 ], [ %36, %34 ], [ %4, %2 ]
  %88 = getelementptr inbounds %"struct.vk::Queue::Task"*, %"struct.vk::Queue::Task"** %87, i64 -1
  %89 = bitcast %"struct.vk::Queue::Task"** %1 to i64*
  %90 = load i64, i64* %89, align 8
  %91 = bitcast %"struct.vk::Queue::Task"** %88 to i64*
  store i64 %90, i64* %91, align 8
  %92 = load %"struct.vk::Queue::Task"**, %"struct.vk::Queue::Task"*** %3, align 8
  %93 = getelementptr inbounds %"struct.vk::Queue::Task"*, %"struct.vk::Queue::Task"** %92, i64 -1
  store %"struct.vk::Queue::Task"** %93, %"struct.vk::Queue::Task"*** %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIPN2vk5Queue4TaskERNS_9allocatorIS4_EEE9push_backEOS4_(%"struct.std::__1::__split_buffer.319"*, %"struct.vk::Queue::Task"** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.std::__1::__split_buffer.319", %"struct.std::__1::__split_buffer.319"* %0, i64 0, i32 2
  %4 = load %"struct.vk::Queue::Task"**, %"struct.vk::Queue::Task"*** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__split_buffer.319", %"struct.std::__1::__split_buffer.319"* %0, i64 0, i32 3, i32 0, i32 0
  %6 = load %"struct.vk::Queue::Task"**, %"struct.vk::Queue::Task"*** %5, align 8
  %7 = icmp eq %"struct.vk::Queue::Task"** %4, %6
  %8 = ptrtoint %"struct.vk::Queue::Task"** %6 to i64
  %9 = bitcast %"struct.vk::Queue::Task"** %4 to i64*
  br i1 %7, label %10, label %87

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"struct.std::__1::__split_buffer.319", %"struct.std::__1::__split_buffer.319"* %0, i64 0, i32 1
  %12 = load %"struct.vk::Queue::Task"**, %"struct.vk::Queue::Task"*** %11, align 8
  %13 = getelementptr inbounds %"struct.std::__1::__split_buffer.319", %"struct.std::__1::__split_buffer.319"* %0, i64 0, i32 0
  %14 = load %"struct.vk::Queue::Task"**, %"struct.vk::Queue::Task"*** %13, align 8
  %15 = icmp ugt %"struct.vk::Queue::Task"** %12, %14
  %16 = ptrtoint %"struct.vk::Queue::Task"** %14 to i64
  br i1 %15, label %17, label %37

17:                                               ; preds = %10
  %18 = ptrtoint %"struct.vk::Queue::Task"** %12 to i64
  %19 = sub i64 %18, %16
  %20 = ashr exact i64 %19, 3
  %21 = add nsw i64 %20, 1
  %22 = sdiv i64 %21, -2
  %23 = getelementptr inbounds %"struct.vk::Queue::Task"*, %"struct.vk::Queue::Task"** %12, i64 %22
  %24 = ptrtoint %"struct.vk::Queue::Task"** %4 to i64
  %25 = sub i64 %24, %18
  %26 = ashr exact i64 %25, 3
  %27 = icmp eq i64 %25, 0
  br i1 %27, label %32, label %28

28:                                               ; preds = %17
  %29 = bitcast %"struct.vk::Queue::Task"** %23 to i8*
  %30 = bitcast %"struct.vk::Queue::Task"** %12 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %29, i8* align 8 %30, i64 %25, i1 false) #10
  %31 = load %"struct.vk::Queue::Task"**, %"struct.vk::Queue::Task"*** %11, align 8
  br label %32

32:                                               ; preds = %17, %28
  %33 = phi %"struct.vk::Queue::Task"** [ %12, %17 ], [ %31, %28 ]
  %34 = getelementptr inbounds %"struct.vk::Queue::Task"*, %"struct.vk::Queue::Task"** %23, i64 %26
  store %"struct.vk::Queue::Task"** %34, %"struct.vk::Queue::Task"*** %3, align 8
  %35 = getelementptr inbounds %"struct.vk::Queue::Task"*, %"struct.vk::Queue::Task"** %33, i64 %22
  store %"struct.vk::Queue::Task"** %35, %"struct.vk::Queue::Task"*** %11, align 8
  %36 = bitcast %"struct.vk::Queue::Task"** %34 to i64*
  br label %87

37:                                               ; preds = %10
  %38 = bitcast %"struct.vk::Queue::Task"*** %5 to i64*
  %39 = bitcast %"struct.std::__1::__split_buffer.319"* %0 to i64*
  %40 = sub i64 %8, %16
  %41 = ashr exact i64 %40, 2
  %42 = icmp eq i64 %40, 0
  %43 = select i1 %42, i64 1, i64 %41
  %44 = icmp ugt i64 %43, 2305843009213693951
  br i1 %44, label %45, label %46

45:                                               ; preds = %37
  tail call void @abort() #12
  unreachable

46:                                               ; preds = %37
  %47 = lshr i64 %43, 2
  %48 = shl i64 %43, 3
  %49 = tail call i8* @_Znwm(i64 %48) #14
  %50 = bitcast i8* %49 to %"struct.vk::Queue::Task"**
  %51 = ptrtoint i8* %49 to i64
  %52 = getelementptr inbounds %"struct.vk::Queue::Task"*, %"struct.vk::Queue::Task"** %50, i64 %47
  %53 = ptrtoint %"struct.vk::Queue::Task"** %52 to i64
  %54 = getelementptr inbounds %"struct.vk::Queue::Task"*, %"struct.vk::Queue::Task"** %50, i64 %43
  %55 = ptrtoint %"struct.vk::Queue::Task"** %54 to i64
  %56 = ptrtoint %"struct.vk::Queue::Task"** %12 to i64
  %57 = ptrtoint %"struct.vk::Queue::Task"** %4 to i64
  %58 = sub i64 %57, %56
  %59 = ashr exact i64 %58, 3
  %60 = getelementptr inbounds %"struct.vk::Queue::Task"*, %"struct.vk::Queue::Task"** %52, i64 %59
  %61 = icmp eq i64 %58, 0
  br i1 %61, label %76, label %62

62:                                               ; preds = %46, %62
  %63 = phi %"struct.vk::Queue::Task"** [ %69, %62 ], [ %52, %46 ]
  %64 = phi i64 [ %70, %62 ], [ %53, %46 ]
  %65 = phi %"struct.vk::Queue::Task"** [ %71, %62 ], [ %12, %46 ]
  %66 = bitcast %"struct.vk::Queue::Task"** %65 to i64*
  %67 = load i64, i64* %66, align 8
  %68 = inttoptr i64 %64 to i64*
  store i64 %67, i64* %68, align 8
  %69 = getelementptr inbounds %"struct.vk::Queue::Task"*, %"struct.vk::Queue::Task"** %63, i64 1
  %70 = ptrtoint %"struct.vk::Queue::Task"** %69 to i64
  %71 = getelementptr inbounds %"struct.vk::Queue::Task"*, %"struct.vk::Queue::Task"** %65, i64 1
  %72 = icmp eq %"struct.vk::Queue::Task"** %60, %69
  br i1 %72, label %73, label %62

73:                                               ; preds = %62
  %74 = ptrtoint %"struct.vk::Queue::Task"** %60 to i64
  %75 = load %"struct.vk::Queue::Task"**, %"struct.vk::Queue::Task"*** %13, align 8
  br label %76

76:                                               ; preds = %46, %73
  %77 = phi %"struct.vk::Queue::Task"** [ %75, %73 ], [ %14, %46 ]
  %78 = phi i64 [ %74, %73 ], [ %53, %46 ]
  store i64 %51, i64* %39, align 8
  %79 = bitcast %"struct.vk::Queue::Task"*** %11 to i64*
  store i64 %53, i64* %79, align 8
  %80 = bitcast %"struct.vk::Queue::Task"*** %3 to i64*
  store i64 %78, i64* %80, align 8
  store i64 %55, i64* %38, align 8
  %81 = icmp eq %"struct.vk::Queue::Task"** %77, null
  %82 = inttoptr i64 %78 to i64*
  br i1 %81, label %87, label %83

83:                                               ; preds = %76
  %84 = bitcast %"struct.vk::Queue::Task"** %77 to i8*
  tail call void @_ZdlPv(i8* %84) #14
  %85 = bitcast %"struct.vk::Queue::Task"*** %3 to i64**
  %86 = load i64*, i64** %85, align 8
  br label %87

87:                                               ; preds = %83, %76, %32, %2
  %88 = phi i64* [ %86, %83 ], [ %82, %76 ], [ %36, %32 ], [ %9, %2 ]
  %89 = bitcast %"struct.vk::Queue::Task"** %1 to i64*
  %90 = load i64, i64* %89, align 8
  store i64 %90, i64* %88, align 8
  %91 = load %"struct.vk::Queue::Task"**, %"struct.vk::Queue::Task"*** %3, align 8
  %92 = getelementptr inbounds %"struct.vk::Queue::Task"*, %"struct.vk::Queue::Task"** %91, i64 1
  store %"struct.vk::Queue::Task"** %92, %"struct.vk::Queue::Task"*** %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIPN2vk5Queue4TaskERNS_9allocatorIS4_EEE10push_frontERKS4_(%"struct.std::__1::__split_buffer.319"*, %"struct.vk::Queue::Task"** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.std::__1::__split_buffer.319", %"struct.std::__1::__split_buffer.319"* %0, i64 0, i32 1
  %4 = load %"struct.vk::Queue::Task"**, %"struct.vk::Queue::Task"*** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__split_buffer.319", %"struct.std::__1::__split_buffer.319"* %0, i64 0, i32 0
  %6 = load %"struct.vk::Queue::Task"**, %"struct.vk::Queue::Task"*** %5, align 8
  %7 = icmp eq %"struct.vk::Queue::Task"** %4, %6
  %8 = ptrtoint %"struct.vk::Queue::Task"** %6 to i64
  br i1 %7, label %9, label %86

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"struct.std::__1::__split_buffer.319", %"struct.std::__1::__split_buffer.319"* %0, i64 0, i32 2
  %11 = load %"struct.vk::Queue::Task"**, %"struct.vk::Queue::Task"*** %10, align 8
  %12 = getelementptr inbounds %"struct.std::__1::__split_buffer.319", %"struct.std::__1::__split_buffer.319"* %0, i64 0, i32 3, i32 0, i32 0
  %13 = load %"struct.vk::Queue::Task"**, %"struct.vk::Queue::Task"*** %12, align 8
  %14 = icmp ult %"struct.vk::Queue::Task"** %11, %13
  %15 = bitcast %"struct.vk::Queue::Task"*** %12 to i64*
  %16 = ptrtoint %"struct.vk::Queue::Task"** %13 to i64
  br i1 %14, label %17, label %38

17:                                               ; preds = %9
  %18 = ptrtoint %"struct.vk::Queue::Task"** %11 to i64
  %19 = sub i64 %16, %18
  %20 = ashr exact i64 %19, 3
  %21 = add nsw i64 %20, 1
  %22 = sdiv i64 %21, 2
  %23 = getelementptr inbounds %"struct.vk::Queue::Task"*, %"struct.vk::Queue::Task"** %11, i64 %22
  %24 = ptrtoint %"struct.vk::Queue::Task"** %4 to i64
  %25 = sub i64 %18, %24
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %34, label %27

27:                                               ; preds = %17
  %28 = ashr exact i64 %25, 3
  %29 = sub nsw i64 0, %28
  %30 = getelementptr inbounds %"struct.vk::Queue::Task"*, %"struct.vk::Queue::Task"** %23, i64 %29
  %31 = bitcast %"struct.vk::Queue::Task"** %30 to i8*
  %32 = bitcast %"struct.vk::Queue::Task"** %4 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %31, i8* align 8 %32, i64 %25, i1 false) #10
  %33 = load %"struct.vk::Queue::Task"**, %"struct.vk::Queue::Task"*** %10, align 8
  br label %34

34:                                               ; preds = %17, %27
  %35 = phi %"struct.vk::Queue::Task"** [ %33, %27 ], [ %11, %17 ]
  %36 = phi %"struct.vk::Queue::Task"** [ %30, %27 ], [ %23, %17 ]
  store %"struct.vk::Queue::Task"** %36, %"struct.vk::Queue::Task"*** %3, align 8
  %37 = getelementptr inbounds %"struct.vk::Queue::Task"*, %"struct.vk::Queue::Task"** %35, i64 %22
  store %"struct.vk::Queue::Task"** %37, %"struct.vk::Queue::Task"*** %10, align 8
  br label %86

38:                                               ; preds = %9
  %39 = bitcast %"struct.std::__1::__split_buffer.319"* %0 to i64*
  %40 = sub i64 %16, %8
  %41 = ashr exact i64 %40, 2
  %42 = icmp eq i64 %40, 0
  %43 = select i1 %42, i64 1, i64 %41
  %44 = icmp ugt i64 %43, 2305843009213693951
  br i1 %44, label %45, label %46

45:                                               ; preds = %38
  tail call void @abort() #12
  unreachable

46:                                               ; preds = %38
  %47 = add nuw nsw i64 %43, 3
  %48 = lshr i64 %47, 2
  %49 = shl i64 %43, 3
  %50 = tail call i8* @_Znwm(i64 %49) #14
  %51 = bitcast i8* %50 to %"struct.vk::Queue::Task"**
  %52 = ptrtoint i8* %50 to i64
  %53 = getelementptr inbounds %"struct.vk::Queue::Task"*, %"struct.vk::Queue::Task"** %51, i64 %48
  %54 = ptrtoint %"struct.vk::Queue::Task"** %53 to i64
  %55 = getelementptr inbounds %"struct.vk::Queue::Task"*, %"struct.vk::Queue::Task"** %51, i64 %43
  %56 = ptrtoint %"struct.vk::Queue::Task"** %55 to i64
  %57 = ptrtoint %"struct.vk::Queue::Task"** %4 to i64
  %58 = ptrtoint %"struct.vk::Queue::Task"** %11 to i64
  %59 = sub i64 %58, %57
  %60 = ashr exact i64 %59, 3
  %61 = getelementptr inbounds %"struct.vk::Queue::Task"*, %"struct.vk::Queue::Task"** %53, i64 %60
  %62 = icmp eq i64 %59, 0
  br i1 %62, label %77, label %63

63:                                               ; preds = %46, %63
  %64 = phi %"struct.vk::Queue::Task"** [ %70, %63 ], [ %53, %46 ]
  %65 = phi i64 [ %71, %63 ], [ %54, %46 ]
  %66 = phi %"struct.vk::Queue::Task"** [ %72, %63 ], [ %4, %46 ]
  %67 = bitcast %"struct.vk::Queue::Task"** %66 to i64*
  %68 = load i64, i64* %67, align 8
  %69 = inttoptr i64 %65 to i64*
  store i64 %68, i64* %69, align 8
  %70 = getelementptr inbounds %"struct.vk::Queue::Task"*, %"struct.vk::Queue::Task"** %64, i64 1
  %71 = ptrtoint %"struct.vk::Queue::Task"** %70 to i64
  %72 = getelementptr inbounds %"struct.vk::Queue::Task"*, %"struct.vk::Queue::Task"** %66, i64 1
  %73 = icmp eq %"struct.vk::Queue::Task"** %61, %70
  br i1 %73, label %74, label %63

74:                                               ; preds = %63
  %75 = ptrtoint %"struct.vk::Queue::Task"** %61 to i64
  %76 = load %"struct.vk::Queue::Task"**, %"struct.vk::Queue::Task"*** %5, align 8
  br label %77

77:                                               ; preds = %46, %74
  %78 = phi %"struct.vk::Queue::Task"** [ %76, %74 ], [ %4, %46 ]
  %79 = phi i64 [ %75, %74 ], [ %54, %46 ]
  store i64 %52, i64* %39, align 8
  %80 = bitcast %"struct.vk::Queue::Task"*** %3 to i64*
  store i64 %54, i64* %80, align 8
  %81 = bitcast %"struct.vk::Queue::Task"*** %10 to i64*
  store i64 %79, i64* %81, align 8
  store i64 %56, i64* %15, align 8
  %82 = icmp eq %"struct.vk::Queue::Task"** %78, null
  br i1 %82, label %86, label %83

83:                                               ; preds = %77
  %84 = bitcast %"struct.vk::Queue::Task"** %78 to i8*
  tail call void @_ZdlPv(i8* %84) #14
  %85 = load %"struct.vk::Queue::Task"**, %"struct.vk::Queue::Task"*** %3, align 8
  br label %86

86:                                               ; preds = %83, %77, %34, %2
  %87 = phi %"struct.vk::Queue::Task"** [ %85, %83 ], [ %53, %77 ], [ %36, %34 ], [ %4, %2 ]
  %88 = getelementptr inbounds %"struct.vk::Queue::Task"*, %"struct.vk::Queue::Task"** %87, i64 -1
  %89 = bitcast %"struct.vk::Queue::Task"** %1 to i64*
  %90 = load i64, i64* %89, align 8
  %91 = bitcast %"struct.vk::Queue::Task"** %88 to i64*
  store i64 %90, i64* %91, align 8
  %92 = load %"struct.vk::Queue::Task"**, %"struct.vk::Queue::Task"*** %3, align 8
  %93 = getelementptr inbounds %"struct.vk::Queue::Task"*, %"struct.vk::Queue::Task"** %92, i64 -1
  store %"struct.vk::Queue::Task"** %93, %"struct.vk::Queue::Task"*** %3, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: optsize
declare i32 @_ZNK2vk9Semaphore16getSemaphoreTypeEv(%"class.vk::Semaphore"*) local_unnamed_addr #3

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZNSt3__15dequeIP12VkSubmitInfoNS_9allocatorIS2_EEE9push_backERKS2_(%"class.std::__1::deque.106"*, %struct.VkSubmitInfo** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::deque.106", %"class.std::__1::deque.106"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = bitcast %struct.VkSubmitInfo**** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::deque.106", %"class.std::__1::deque.106"* %0, i64 0, i32 0, i32 0, i32 1
  %7 = bitcast %struct.VkSubmitInfo**** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = icmp eq i64 %9, 0
  %11 = shl i64 %9, 6
  %12 = add i64 %11, -1
  %13 = select i1 %10, i64 0, i64 %12
  %14 = getelementptr inbounds %"class.std::__1::deque.106", %"class.std::__1::deque.106"* %0, i64 0, i32 0, i32 1
  %15 = load i64, i64* %14, align 8
  %16 = getelementptr inbounds %"class.std::__1::deque.106", %"class.std::__1::deque.106"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %17 = load i64, i64* %16, align 8
  %18 = add i64 %17, %15
  %19 = icmp eq i64 %13, %18
  %20 = inttoptr i64 %8 to %struct.VkSubmitInfo***
  %21 = inttoptr i64 %5 to %struct.VkSubmitInfo***
  br i1 %19, label %22, label %28

22:                                               ; preds = %2
  tail call void @_ZNSt3__15dequeIP12VkSubmitInfoNS_9allocatorIS2_EEE19__add_back_capacityEv(%"class.std::__1::deque.106"* %0) #11
  %23 = load i64, i64* %16, align 8
  %24 = load i64, i64* %14, align 8
  %25 = load %struct.VkSubmitInfo***, %struct.VkSubmitInfo**** %6, align 8
  %26 = load %struct.VkSubmitInfo***, %struct.VkSubmitInfo**** %3, align 8
  %27 = add i64 %24, %23
  br label %28

28:                                               ; preds = %22, %2
  %29 = phi i64 [ %27, %22 ], [ %18, %2 ]
  %30 = phi %struct.VkSubmitInfo*** [ %26, %22 ], [ %21, %2 ]
  %31 = phi %struct.VkSubmitInfo*** [ %25, %22 ], [ %20, %2 ]
  %32 = icmp eq %struct.VkSubmitInfo*** %30, %31
  br i1 %32, label %40, label %33

33:                                               ; preds = %28
  %34 = lshr i64 %29, 9
  %35 = getelementptr inbounds %struct.VkSubmitInfo**, %struct.VkSubmitInfo*** %31, i64 %34
  %36 = load %struct.VkSubmitInfo**, %struct.VkSubmitInfo*** %35, align 8
  %37 = and i64 %29, 511
  %38 = getelementptr inbounds %struct.VkSubmitInfo*, %struct.VkSubmitInfo** %36, i64 %37
  %39 = bitcast %struct.VkSubmitInfo** %38 to i64*
  br label %40

40:                                               ; preds = %28, %33
  %41 = phi i64* [ %39, %33 ], [ null, %28 ]
  %42 = bitcast %struct.VkSubmitInfo** %1 to i64*
  %43 = load i64, i64* %42, align 8
  store i64 %43, i64* %41, align 8
  %44 = load i64, i64* %16, align 8
  %45 = add i64 %44, 1
  store i64 %45, i64* %16, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZNSt3__15dequeIP12VkSubmitInfoNS_9allocatorIS2_EEE19__add_back_capacityEv(%"class.std::__1::deque.106"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %struct.VkSubmitInfo**, align 8
  %3 = alloca %struct.VkSubmitInfo**, align 8
  %4 = alloca %"struct.std::__1::__split_buffer.326", align 16
  %5 = alloca %struct.VkSubmitInfo**, align 8
  %6 = getelementptr inbounds %"class.std::__1::deque.106", %"class.std::__1::deque.106"* %0, i64 0, i32 0, i32 1
  %7 = load i64, i64* %6, align 8
  %8 = icmp ugt i64 %7, 511
  br i1 %8, label %9, label %102

9:                                                ; preds = %1
  %10 = add i64 %7, -512
  store i64 %10, i64* %6, align 8
  %11 = getelementptr inbounds %"class.std::__1::deque.106", %"class.std::__1::deque.106"* %0, i64 0, i32 0, i32 0, i32 1
  %12 = load %struct.VkSubmitInfo***, %struct.VkSubmitInfo**** %11, align 8
  %13 = bitcast %struct.VkSubmitInfo*** %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds %struct.VkSubmitInfo**, %struct.VkSubmitInfo*** %12, i64 1
  store %struct.VkSubmitInfo*** %15, %struct.VkSubmitInfo**** %11, align 8
  %16 = getelementptr inbounds %"class.std::__1::deque.106", %"class.std::__1::deque.106"* %0, i64 0, i32 0, i32 0, i32 2
  %17 = load %struct.VkSubmitInfo***, %struct.VkSubmitInfo**** %16, align 8
  %18 = getelementptr inbounds %"class.std::__1::deque.106", %"class.std::__1::deque.106"* %0, i64 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %19 = load %struct.VkSubmitInfo***, %struct.VkSubmitInfo**** %18, align 8
  %20 = icmp eq %struct.VkSubmitInfo*** %17, %19
  %21 = ptrtoint %struct.VkSubmitInfo*** %19 to i64
  %22 = bitcast %struct.VkSubmitInfo*** %17 to i64*
  br i1 %20, label %23, label %98

23:                                               ; preds = %9
  %24 = getelementptr inbounds %"class.std::__1::deque.106", %"class.std::__1::deque.106"* %0, i64 0, i32 0, i32 0, i32 0
  %25 = load %struct.VkSubmitInfo***, %struct.VkSubmitInfo**** %24, align 8
  %26 = icmp ugt %struct.VkSubmitInfo*** %15, %25
  %27 = ptrtoint %struct.VkSubmitInfo*** %25 to i64
  br i1 %26, label %28, label %48

28:                                               ; preds = %23
  %29 = ptrtoint %struct.VkSubmitInfo*** %15 to i64
  %30 = sub i64 %29, %27
  %31 = ashr exact i64 %30, 3
  %32 = add nsw i64 %31, 1
  %33 = sdiv i64 %32, -2
  %34 = getelementptr inbounds %struct.VkSubmitInfo**, %struct.VkSubmitInfo*** %15, i64 %33
  %35 = ptrtoint %struct.VkSubmitInfo*** %17 to i64
  %36 = sub i64 %35, %29
  %37 = ashr exact i64 %36, 3
  %38 = icmp eq i64 %36, 0
  br i1 %38, label %43, label %39

39:                                               ; preds = %28
  %40 = bitcast %struct.VkSubmitInfo*** %34 to i8*
  %41 = bitcast %struct.VkSubmitInfo*** %15 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %40, i8* align 8 %41, i64 %36, i1 false) #10
  %42 = load %struct.VkSubmitInfo***, %struct.VkSubmitInfo**** %11, align 8
  br label %43

43:                                               ; preds = %39, %28
  %44 = phi %struct.VkSubmitInfo*** [ %15, %28 ], [ %42, %39 ]
  %45 = getelementptr inbounds %struct.VkSubmitInfo**, %struct.VkSubmitInfo*** %34, i64 %37
  store %struct.VkSubmitInfo*** %45, %struct.VkSubmitInfo**** %16, align 8
  %46 = getelementptr inbounds %struct.VkSubmitInfo**, %struct.VkSubmitInfo*** %44, i64 %33
  store %struct.VkSubmitInfo*** %46, %struct.VkSubmitInfo**** %11, align 8
  %47 = bitcast %struct.VkSubmitInfo*** %45 to i64*
  br label %98

48:                                               ; preds = %23
  %49 = bitcast %struct.VkSubmitInfo**** %18 to i64*
  %50 = bitcast %"class.std::__1::deque.106"* %0 to i64*
  %51 = sub i64 %21, %27
  %52 = ashr exact i64 %51, 2
  %53 = icmp eq i64 %51, 0
  %54 = select i1 %53, i64 1, i64 %52
  %55 = icmp ugt i64 %54, 2305843009213693951
  br i1 %55, label %56, label %57

56:                                               ; preds = %48
  tail call void @abort() #12
  unreachable

57:                                               ; preds = %48
  %58 = lshr i64 %54, 2
  %59 = shl i64 %54, 3
  %60 = tail call i8* @_Znwm(i64 %59) #14
  %61 = bitcast i8* %60 to %struct.VkSubmitInfo***
  %62 = ptrtoint i8* %60 to i64
  %63 = getelementptr inbounds %struct.VkSubmitInfo**, %struct.VkSubmitInfo*** %61, i64 %58
  %64 = ptrtoint %struct.VkSubmitInfo*** %63 to i64
  %65 = getelementptr inbounds %struct.VkSubmitInfo**, %struct.VkSubmitInfo*** %61, i64 %54
  %66 = ptrtoint %struct.VkSubmitInfo*** %65 to i64
  %67 = ptrtoint %struct.VkSubmitInfo*** %15 to i64
  %68 = ptrtoint %struct.VkSubmitInfo*** %17 to i64
  %69 = sub i64 %68, %67
  %70 = ashr exact i64 %69, 3
  %71 = getelementptr inbounds %struct.VkSubmitInfo**, %struct.VkSubmitInfo*** %63, i64 %70
  %72 = icmp eq i64 %69, 0
  br i1 %72, label %87, label %73

73:                                               ; preds = %57, %73
  %74 = phi %struct.VkSubmitInfo*** [ %80, %73 ], [ %63, %57 ]
  %75 = phi i64 [ %81, %73 ], [ %64, %57 ]
  %76 = phi %struct.VkSubmitInfo*** [ %82, %73 ], [ %15, %57 ]
  %77 = bitcast %struct.VkSubmitInfo*** %76 to i64*
  %78 = load i64, i64* %77, align 8
  %79 = inttoptr i64 %75 to i64*
  store i64 %78, i64* %79, align 8
  %80 = getelementptr inbounds %struct.VkSubmitInfo**, %struct.VkSubmitInfo*** %74, i64 1
  %81 = ptrtoint %struct.VkSubmitInfo*** %80 to i64
  %82 = getelementptr inbounds %struct.VkSubmitInfo**, %struct.VkSubmitInfo*** %76, i64 1
  %83 = icmp eq %struct.VkSubmitInfo*** %71, %80
  br i1 %83, label %84, label %73

84:                                               ; preds = %73
  %85 = ptrtoint %struct.VkSubmitInfo*** %71 to i64
  %86 = load %struct.VkSubmitInfo***, %struct.VkSubmitInfo**** %24, align 8
  br label %87

87:                                               ; preds = %84, %57
  %88 = phi %struct.VkSubmitInfo*** [ %86, %84 ], [ %25, %57 ]
  %89 = phi i64 [ %85, %84 ], [ %64, %57 ]
  store i64 %62, i64* %50, align 8
  %90 = bitcast %struct.VkSubmitInfo**** %11 to i64*
  store i64 %64, i64* %90, align 8
  %91 = bitcast %struct.VkSubmitInfo**** %16 to i64*
  store i64 %89, i64* %91, align 8
  store i64 %66, i64* %49, align 8
  %92 = icmp eq %struct.VkSubmitInfo*** %88, null
  %93 = inttoptr i64 %89 to i64*
  br i1 %92, label %98, label %94

94:                                               ; preds = %87
  %95 = bitcast %struct.VkSubmitInfo*** %88 to i8*
  tail call void @_ZdlPv(i8* %95) #14
  %96 = bitcast %struct.VkSubmitInfo**** %16 to i64**
  %97 = load i64*, i64** %96, align 8
  br label %98

98:                                               ; preds = %9, %43, %87, %94
  %99 = phi i64* [ %97, %94 ], [ %93, %87 ], [ %47, %43 ], [ %22, %9 ]
  store i64 %14, i64* %99, align 8
  %100 = load %struct.VkSubmitInfo***, %struct.VkSubmitInfo**** %16, align 8
  %101 = getelementptr inbounds %struct.VkSubmitInfo**, %struct.VkSubmitInfo*** %100, i64 1
  store %struct.VkSubmitInfo*** %101, %struct.VkSubmitInfo**** %16, align 8
  br label %279

102:                                              ; preds = %1
  %103 = getelementptr inbounds %"class.std::__1::deque.106", %"class.std::__1::deque.106"* %0, i64 0, i32 0, i32 0
  %104 = getelementptr inbounds %"class.std::__1::deque.106", %"class.std::__1::deque.106"* %0, i64 0, i32 0, i32 0, i32 2
  %105 = bitcast %struct.VkSubmitInfo**** %104 to i64*
  %106 = load i64, i64* %105, align 8
  %107 = getelementptr inbounds %"class.std::__1::deque.106", %"class.std::__1::deque.106"* %0, i64 0, i32 0, i32 0, i32 1
  %108 = bitcast %struct.VkSubmitInfo**** %107 to i64*
  %109 = load i64, i64* %108, align 8
  %110 = sub i64 %106, %109
  %111 = ashr exact i64 %110, 3
  %112 = getelementptr inbounds %"class.std::__1::deque.106", %"class.std::__1::deque.106"* %0, i64 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %113 = bitcast %struct.VkSubmitInfo**** %112 to i64*
  %114 = load i64, i64* %113, align 8
  %115 = bitcast %"class.std::__1::deque.106"* %0 to i64*
  %116 = load i64, i64* %115, align 8
  %117 = sub i64 %114, %116
  %118 = ashr exact i64 %117, 3
  %119 = icmp ult i64 %111, %118
  br i1 %119, label %120, label %214

120:                                              ; preds = %102
  %121 = icmp eq i64 %114, %106
  br i1 %121, label %126, label %122

122:                                              ; preds = %120
  %123 = bitcast %struct.VkSubmitInfo*** %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %123) #10
  %124 = tail call i8* @_Znwm(i64 4096) #14
  %125 = bitcast %struct.VkSubmitInfo*** %2 to i8**
  store i8* %124, i8** %125, align 8
  call void @_ZNSt3__114__split_bufferIPP12VkSubmitInfoNS_9allocatorIS3_EEE9push_backEOS3_(%"struct.std::__1::__split_buffer.108"* %103, %struct.VkSubmitInfo*** nonnull dereferenceable(8) %2) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %123) #10
  br label %279

126:                                              ; preds = %120
  %127 = bitcast %struct.VkSubmitInfo*** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %127) #10
  %128 = tail call i8* @_Znwm(i64 4096) #14
  %129 = bitcast %struct.VkSubmitInfo*** %3 to i8**
  store i8* %128, i8** %129, align 8
  call void @_ZNSt3__114__split_bufferIPP12VkSubmitInfoNS_9allocatorIS3_EEE10push_frontEOS3_(%"struct.std::__1::__split_buffer.108"* %103, %struct.VkSubmitInfo*** nonnull dereferenceable(8) %3) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %127) #10
  %130 = load %struct.VkSubmitInfo***, %struct.VkSubmitInfo**** %107, align 8
  %131 = bitcast %struct.VkSubmitInfo*** %130 to i64*
  %132 = load i64, i64* %131, align 8
  %133 = getelementptr inbounds %struct.VkSubmitInfo**, %struct.VkSubmitInfo*** %130, i64 1
  store %struct.VkSubmitInfo*** %133, %struct.VkSubmitInfo**** %107, align 8
  %134 = load %struct.VkSubmitInfo***, %struct.VkSubmitInfo**** %104, align 8
  %135 = load %struct.VkSubmitInfo***, %struct.VkSubmitInfo**** %112, align 8
  %136 = icmp eq %struct.VkSubmitInfo*** %134, %135
  %137 = ptrtoint %struct.VkSubmitInfo*** %135 to i64
  %138 = bitcast %struct.VkSubmitInfo*** %134 to i64*
  br i1 %136, label %139, label %210

139:                                              ; preds = %126
  %140 = getelementptr inbounds %"class.std::__1::deque.106", %"class.std::__1::deque.106"* %0, i64 0, i32 0, i32 0, i32 0
  %141 = load %struct.VkSubmitInfo***, %struct.VkSubmitInfo**** %140, align 8
  %142 = icmp ugt %struct.VkSubmitInfo*** %133, %141
  %143 = ptrtoint %struct.VkSubmitInfo*** %141 to i64
  br i1 %142, label %144, label %164

144:                                              ; preds = %139
  %145 = ptrtoint %struct.VkSubmitInfo*** %133 to i64
  %146 = sub i64 %145, %143
  %147 = ashr exact i64 %146, 3
  %148 = add nsw i64 %147, 1
  %149 = sdiv i64 %148, -2
  %150 = getelementptr inbounds %struct.VkSubmitInfo**, %struct.VkSubmitInfo*** %133, i64 %149
  %151 = ptrtoint %struct.VkSubmitInfo*** %134 to i64
  %152 = sub i64 %151, %145
  %153 = ashr exact i64 %152, 3
  %154 = icmp eq i64 %152, 0
  br i1 %154, label %159, label %155

155:                                              ; preds = %144
  %156 = bitcast %struct.VkSubmitInfo*** %150 to i8*
  %157 = bitcast %struct.VkSubmitInfo*** %133 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %156, i8* align 8 %157, i64 %152, i1 false) #10
  %158 = load %struct.VkSubmitInfo***, %struct.VkSubmitInfo**** %107, align 8
  br label %159

159:                                              ; preds = %155, %144
  %160 = phi %struct.VkSubmitInfo*** [ %133, %144 ], [ %158, %155 ]
  %161 = getelementptr inbounds %struct.VkSubmitInfo**, %struct.VkSubmitInfo*** %150, i64 %153
  store %struct.VkSubmitInfo*** %161, %struct.VkSubmitInfo**** %104, align 8
  %162 = getelementptr inbounds %struct.VkSubmitInfo**, %struct.VkSubmitInfo*** %160, i64 %149
  store %struct.VkSubmitInfo*** %162, %struct.VkSubmitInfo**** %107, align 8
  %163 = bitcast %struct.VkSubmitInfo*** %161 to i64*
  br label %210

164:                                              ; preds = %139
  %165 = sub i64 %137, %143
  %166 = ashr exact i64 %165, 2
  %167 = icmp eq i64 %165, 0
  %168 = select i1 %167, i64 1, i64 %166
  %169 = icmp ugt i64 %168, 2305843009213693951
  br i1 %169, label %170, label %171

170:                                              ; preds = %164
  call void @abort() #12
  unreachable

171:                                              ; preds = %164
  %172 = lshr i64 %168, 2
  %173 = shl i64 %168, 3
  %174 = call i8* @_Znwm(i64 %173) #14
  %175 = bitcast i8* %174 to %struct.VkSubmitInfo***
  %176 = ptrtoint i8* %174 to i64
  %177 = getelementptr inbounds %struct.VkSubmitInfo**, %struct.VkSubmitInfo*** %175, i64 %172
  %178 = ptrtoint %struct.VkSubmitInfo*** %177 to i64
  %179 = getelementptr inbounds %struct.VkSubmitInfo**, %struct.VkSubmitInfo*** %175, i64 %168
  %180 = ptrtoint %struct.VkSubmitInfo*** %179 to i64
  %181 = ptrtoint %struct.VkSubmitInfo*** %133 to i64
  %182 = ptrtoint %struct.VkSubmitInfo*** %134 to i64
  %183 = sub i64 %182, %181
  %184 = ashr exact i64 %183, 3
  %185 = getelementptr inbounds %struct.VkSubmitInfo**, %struct.VkSubmitInfo*** %177, i64 %184
  %186 = icmp eq i64 %183, 0
  br i1 %186, label %201, label %187

187:                                              ; preds = %171, %187
  %188 = phi %struct.VkSubmitInfo*** [ %194, %187 ], [ %177, %171 ]
  %189 = phi i64 [ %195, %187 ], [ %178, %171 ]
  %190 = phi %struct.VkSubmitInfo*** [ %196, %187 ], [ %133, %171 ]
  %191 = bitcast %struct.VkSubmitInfo*** %190 to i64*
  %192 = load i64, i64* %191, align 8
  %193 = inttoptr i64 %189 to i64*
  store i64 %192, i64* %193, align 8
  %194 = getelementptr inbounds %struct.VkSubmitInfo**, %struct.VkSubmitInfo*** %188, i64 1
  %195 = ptrtoint %struct.VkSubmitInfo*** %194 to i64
  %196 = getelementptr inbounds %struct.VkSubmitInfo**, %struct.VkSubmitInfo*** %190, i64 1
  %197 = icmp eq %struct.VkSubmitInfo*** %185, %194
  br i1 %197, label %198, label %187

198:                                              ; preds = %187
  %199 = ptrtoint %struct.VkSubmitInfo*** %185 to i64
  %200 = load %struct.VkSubmitInfo***, %struct.VkSubmitInfo**** %140, align 8
  br label %201

201:                                              ; preds = %198, %171
  %202 = phi %struct.VkSubmitInfo*** [ %200, %198 ], [ %141, %171 ]
  %203 = phi i64 [ %199, %198 ], [ %178, %171 ]
  store i64 %176, i64* %115, align 8
  store i64 %178, i64* %108, align 8
  store i64 %203, i64* %105, align 8
  store i64 %180, i64* %113, align 8
  %204 = icmp eq %struct.VkSubmitInfo*** %202, null
  %205 = inttoptr i64 %203 to i64*
  br i1 %204, label %210, label %206

206:                                              ; preds = %201
  %207 = bitcast %struct.VkSubmitInfo*** %202 to i8*
  call void @_ZdlPv(i8* %207) #14
  %208 = bitcast %struct.VkSubmitInfo**** %104 to i64**
  %209 = load i64*, i64** %208, align 8
  br label %210

210:                                              ; preds = %126, %159, %201, %206
  %211 = phi i64* [ %209, %206 ], [ %205, %201 ], [ %163, %159 ], [ %138, %126 ]
  store i64 %132, i64* %211, align 8
  %212 = load %struct.VkSubmitInfo***, %struct.VkSubmitInfo**** %104, align 8
  %213 = getelementptr inbounds %struct.VkSubmitInfo**, %struct.VkSubmitInfo*** %212, i64 1
  store %struct.VkSubmitInfo*** %213, %struct.VkSubmitInfo**** %104, align 8
  br label %279

214:                                              ; preds = %102
  %215 = bitcast %"struct.std::__1::__split_buffer.326"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %215) #10
  %216 = getelementptr inbounds %"struct.std::__1::__split_buffer.326", %"struct.std::__1::__split_buffer.326"* %4, i64 0, i32 1
  %217 = getelementptr inbounds %"struct.std::__1::__split_buffer.326", %"struct.std::__1::__split_buffer.326"* %4, i64 0, i32 2
  %218 = getelementptr inbounds %"struct.std::__1::__split_buffer.326", %"struct.std::__1::__split_buffer.326"* %4, i64 0, i32 3, i32 0, i32 0
  %219 = getelementptr inbounds %"struct.std::__1::__split_buffer.326", %"struct.std::__1::__split_buffer.326"* %4, i64 0, i32 3, i32 1, i32 0
  %220 = ashr exact i64 %117, 2
  %221 = icmp eq i64 %117, 0
  %222 = select i1 %221, i64 1, i64 %220
  %223 = getelementptr inbounds %"class.std::__1::deque.106", %"class.std::__1::deque.106"* %0, i64 0, i32 0, i32 0, i32 3
  %224 = bitcast %"struct.std::__1::__split_buffer.326"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %224, i8 -86, i64 24, i1 false)
  store %struct.VkSubmitInfo*** null, %struct.VkSubmitInfo**** %218, align 8
  %225 = bitcast %"class.std::__1::allocator.112"** %219 to %"class.std::__1::__compressed_pair.109"**
  store %"class.std::__1::__compressed_pair.109"* %223, %"class.std::__1::__compressed_pair.109"** %225, align 8
  %226 = icmp ugt i64 %222, 2305843009213693951
  br i1 %226, label %227, label %228

227:                                              ; preds = %214
  tail call void @abort() #12
  unreachable

228:                                              ; preds = %214
  %229 = shl i64 %222, 3
  %230 = tail call i8* @_Znwm(i64 %229) #14
  %231 = bitcast i8* %230 to %struct.VkSubmitInfo***
  %232 = bitcast %"struct.std::__1::__split_buffer.326"* %4 to i8**
  store i8* %230, i8** %232, align 16
  %233 = getelementptr inbounds %struct.VkSubmitInfo**, %struct.VkSubmitInfo*** %231, i64 %111
  store %struct.VkSubmitInfo*** %233, %struct.VkSubmitInfo**** %217, align 16
  store %struct.VkSubmitInfo*** %233, %struct.VkSubmitInfo**** %216, align 8
  %234 = getelementptr inbounds %struct.VkSubmitInfo**, %struct.VkSubmitInfo*** %231, i64 %222
  store %struct.VkSubmitInfo*** %234, %struct.VkSubmitInfo**** %218, align 8
  %235 = tail call i8* @_Znwm(i64 4096) #14
  %236 = bitcast %struct.VkSubmitInfo*** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %236) #10
  %237 = bitcast %struct.VkSubmitInfo*** %5 to i8**
  store i8* %235, i8** %237, align 8
  call void @_ZNSt3__114__split_bufferIPP12VkSubmitInfoRNS_9allocatorIS3_EEE9push_backEOS3_(%"struct.std::__1::__split_buffer.326"* nonnull %4, %struct.VkSubmitInfo*** nonnull dereferenceable(8) %5) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %236) #10
  %238 = load %struct.VkSubmitInfo***, %struct.VkSubmitInfo**** %104, align 8
  %239 = load %struct.VkSubmitInfo***, %struct.VkSubmitInfo**** %107, align 8
  %240 = icmp eq %struct.VkSubmitInfo*** %238, %239
  %241 = ptrtoint %struct.VkSubmitInfo*** %238 to i64
  br i1 %240, label %244, label %274

242:                                              ; preds = %274
  %243 = load i64, i64* %105, align 8
  br label %244

244:                                              ; preds = %242, %228
  %245 = phi i64 [ %243, %242 ], [ %241, %228 ]
  %246 = phi %struct.VkSubmitInfo*** [ %277, %242 ], [ %239, %228 ]
  %247 = ptrtoint %struct.VkSubmitInfo*** %246 to i64
  %248 = load i64, i64* %115, align 8
  %249 = bitcast %"struct.std::__1::__split_buffer.326"* %4 to i64*
  %250 = bitcast %struct.VkSubmitInfo**** %216 to i64*
  %251 = bitcast %"struct.std::__1::__split_buffer.326"* %4 to <2 x i64>*
  %252 = load <2 x i64>, <2 x i64>* %251, align 16
  store i64 %248, i64* %249, align 16
  %253 = bitcast %"class.std::__1::deque.106"* %0 to <2 x i64>*
  store <2 x i64> %252, <2 x i64>* %253, align 8
  store i64 %247, i64* %250, align 8
  %254 = bitcast %struct.VkSubmitInfo**** %217 to i64*
  %255 = bitcast %struct.VkSubmitInfo**** %218 to i64*
  %256 = bitcast %struct.VkSubmitInfo**** %217 to <2 x i64>*
  %257 = load <2 x i64>, <2 x i64>* %256, align 16
  store i64 %245, i64* %254, align 16
  %258 = load i64, i64* %113, align 8
  %259 = bitcast %struct.VkSubmitInfo**** %104 to <2 x i64>*
  store <2 x i64> %257, <2 x i64>* %259, align 8
  store i64 %258, i64* %255, align 8
  %260 = inttoptr i64 %245 to %struct.VkSubmitInfo***
  %261 = icmp eq %struct.VkSubmitInfo*** %246, %260
  br i1 %261, label %269, label %262

262:                                              ; preds = %244
  %263 = getelementptr %struct.VkSubmitInfo**, %struct.VkSubmitInfo*** %260, i64 -1
  %264 = ptrtoint %struct.VkSubmitInfo*** %263 to i64
  %265 = sub i64 %264, %247
  %266 = lshr i64 %265, 3
  %267 = xor i64 %266, -1
  %268 = getelementptr %struct.VkSubmitInfo**, %struct.VkSubmitInfo*** %260, i64 %267
  store %struct.VkSubmitInfo*** %268, %struct.VkSubmitInfo**** %217, align 16
  br label %269

269:                                              ; preds = %262, %244
  %270 = icmp eq i64 %248, 0
  br i1 %270, label %273, label %271

271:                                              ; preds = %269
  %272 = inttoptr i64 %248 to i8*
  call void @_ZdlPv(i8* %272) #14
  br label %273

273:                                              ; preds = %269, %271
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %215) #10
  br label %279

274:                                              ; preds = %228, %274
  %275 = phi %struct.VkSubmitInfo*** [ %276, %274 ], [ %238, %228 ]
  %276 = getelementptr inbounds %struct.VkSubmitInfo**, %struct.VkSubmitInfo*** %275, i64 -1
  call void @_ZNSt3__114__split_bufferIPP12VkSubmitInfoRNS_9allocatorIS3_EEE10push_frontERKS3_(%"struct.std::__1::__split_buffer.326"* nonnull %4, %struct.VkSubmitInfo*** dereferenceable(8) %276) #11
  %277 = load %struct.VkSubmitInfo***, %struct.VkSubmitInfo**** %107, align 8
  %278 = icmp eq %struct.VkSubmitInfo*** %276, %277
  br i1 %278, label %242, label %274

279:                                              ; preds = %273, %210, %122, %98
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIPP12VkSubmitInfoNS_9allocatorIS3_EEE9push_backEOS3_(%"struct.std::__1::__split_buffer.108"*, %struct.VkSubmitInfo*** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.std::__1::__split_buffer.108", %"struct.std::__1::__split_buffer.108"* %0, i64 0, i32 2
  %4 = load %struct.VkSubmitInfo***, %struct.VkSubmitInfo**** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__split_buffer.108", %"struct.std::__1::__split_buffer.108"* %0, i64 0, i32 3, i32 0, i32 0
  %6 = load %struct.VkSubmitInfo***, %struct.VkSubmitInfo**** %5, align 8
  %7 = icmp eq %struct.VkSubmitInfo*** %4, %6
  %8 = ptrtoint %struct.VkSubmitInfo*** %6 to i64
  %9 = bitcast %struct.VkSubmitInfo*** %4 to i64*
  br i1 %7, label %10, label %87

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"struct.std::__1::__split_buffer.108", %"struct.std::__1::__split_buffer.108"* %0, i64 0, i32 1
  %12 = load %struct.VkSubmitInfo***, %struct.VkSubmitInfo**** %11, align 8
  %13 = getelementptr inbounds %"struct.std::__1::__split_buffer.108", %"struct.std::__1::__split_buffer.108"* %0, i64 0, i32 0
  %14 = load %struct.VkSubmitInfo***, %struct.VkSubmitInfo**** %13, align 8
  %15 = icmp ugt %struct.VkSubmitInfo*** %12, %14
  %16 = ptrtoint %struct.VkSubmitInfo*** %14 to i64
  br i1 %15, label %17, label %37

17:                                               ; preds = %10
  %18 = ptrtoint %struct.VkSubmitInfo*** %12 to i64
  %19 = sub i64 %18, %16
  %20 = ashr exact i64 %19, 3
  %21 = add nsw i64 %20, 1
  %22 = sdiv i64 %21, -2
  %23 = getelementptr inbounds %struct.VkSubmitInfo**, %struct.VkSubmitInfo*** %12, i64 %22
  %24 = ptrtoint %struct.VkSubmitInfo*** %4 to i64
  %25 = sub i64 %24, %18
  %26 = ashr exact i64 %25, 3
  %27 = icmp eq i64 %25, 0
  br i1 %27, label %32, label %28

28:                                               ; preds = %17
  %29 = bitcast %struct.VkSubmitInfo*** %23 to i8*
  %30 = bitcast %struct.VkSubmitInfo*** %12 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %29, i8* align 8 %30, i64 %25, i1 false) #10
  %31 = load %struct.VkSubmitInfo***, %struct.VkSubmitInfo**** %11, align 8
  br label %32

32:                                               ; preds = %17, %28
  %33 = phi %struct.VkSubmitInfo*** [ %12, %17 ], [ %31, %28 ]
  %34 = getelementptr inbounds %struct.VkSubmitInfo**, %struct.VkSubmitInfo*** %23, i64 %26
  store %struct.VkSubmitInfo*** %34, %struct.VkSubmitInfo**** %3, align 8
  %35 = getelementptr inbounds %struct.VkSubmitInfo**, %struct.VkSubmitInfo*** %33, i64 %22
  store %struct.VkSubmitInfo*** %35, %struct.VkSubmitInfo**** %11, align 8
  %36 = bitcast %struct.VkSubmitInfo*** %34 to i64*
  br label %87

37:                                               ; preds = %10
  %38 = bitcast %struct.VkSubmitInfo**** %5 to i64*
  %39 = bitcast %"struct.std::__1::__split_buffer.108"* %0 to i64*
  %40 = sub i64 %8, %16
  %41 = ashr exact i64 %40, 2
  %42 = icmp eq i64 %40, 0
  %43 = select i1 %42, i64 1, i64 %41
  %44 = icmp ugt i64 %43, 2305843009213693951
  br i1 %44, label %45, label %46

45:                                               ; preds = %37
  tail call void @abort() #12
  unreachable

46:                                               ; preds = %37
  %47 = lshr i64 %43, 2
  %48 = shl i64 %43, 3
  %49 = tail call i8* @_Znwm(i64 %48) #14
  %50 = bitcast i8* %49 to %struct.VkSubmitInfo***
  %51 = ptrtoint i8* %49 to i64
  %52 = getelementptr inbounds %struct.VkSubmitInfo**, %struct.VkSubmitInfo*** %50, i64 %47
  %53 = ptrtoint %struct.VkSubmitInfo*** %52 to i64
  %54 = getelementptr inbounds %struct.VkSubmitInfo**, %struct.VkSubmitInfo*** %50, i64 %43
  %55 = ptrtoint %struct.VkSubmitInfo*** %54 to i64
  %56 = ptrtoint %struct.VkSubmitInfo*** %12 to i64
  %57 = ptrtoint %struct.VkSubmitInfo*** %4 to i64
  %58 = sub i64 %57, %56
  %59 = ashr exact i64 %58, 3
  %60 = getelementptr inbounds %struct.VkSubmitInfo**, %struct.VkSubmitInfo*** %52, i64 %59
  %61 = icmp eq i64 %58, 0
  br i1 %61, label %76, label %62

62:                                               ; preds = %46, %62
  %63 = phi %struct.VkSubmitInfo*** [ %69, %62 ], [ %52, %46 ]
  %64 = phi i64 [ %70, %62 ], [ %53, %46 ]
  %65 = phi %struct.VkSubmitInfo*** [ %71, %62 ], [ %12, %46 ]
  %66 = bitcast %struct.VkSubmitInfo*** %65 to i64*
  %67 = load i64, i64* %66, align 8
  %68 = inttoptr i64 %64 to i64*
  store i64 %67, i64* %68, align 8
  %69 = getelementptr inbounds %struct.VkSubmitInfo**, %struct.VkSubmitInfo*** %63, i64 1
  %70 = ptrtoint %struct.VkSubmitInfo*** %69 to i64
  %71 = getelementptr inbounds %struct.VkSubmitInfo**, %struct.VkSubmitInfo*** %65, i64 1
  %72 = icmp eq %struct.VkSubmitInfo*** %60, %69
  br i1 %72, label %73, label %62

73:                                               ; preds = %62
  %74 = ptrtoint %struct.VkSubmitInfo*** %60 to i64
  %75 = load %struct.VkSubmitInfo***, %struct.VkSubmitInfo**** %13, align 8
  br label %76

76:                                               ; preds = %46, %73
  %77 = phi %struct.VkSubmitInfo*** [ %75, %73 ], [ %14, %46 ]
  %78 = phi i64 [ %74, %73 ], [ %53, %46 ]
  store i64 %51, i64* %39, align 8
  %79 = bitcast %struct.VkSubmitInfo**** %11 to i64*
  store i64 %53, i64* %79, align 8
  %80 = bitcast %struct.VkSubmitInfo**** %3 to i64*
  store i64 %78, i64* %80, align 8
  store i64 %55, i64* %38, align 8
  %81 = icmp eq %struct.VkSubmitInfo*** %77, null
  %82 = inttoptr i64 %78 to i64*
  br i1 %81, label %87, label %83

83:                                               ; preds = %76
  %84 = bitcast %struct.VkSubmitInfo*** %77 to i8*
  tail call void @_ZdlPv(i8* %84) #14
  %85 = bitcast %struct.VkSubmitInfo**** %3 to i64**
  %86 = load i64*, i64** %85, align 8
  br label %87

87:                                               ; preds = %83, %76, %32, %2
  %88 = phi i64* [ %86, %83 ], [ %82, %76 ], [ %36, %32 ], [ %9, %2 ]
  %89 = bitcast %struct.VkSubmitInfo*** %1 to i64*
  %90 = load i64, i64* %89, align 8
  store i64 %90, i64* %88, align 8
  %91 = load %struct.VkSubmitInfo***, %struct.VkSubmitInfo**** %3, align 8
  %92 = getelementptr inbounds %struct.VkSubmitInfo**, %struct.VkSubmitInfo*** %91, i64 1
  store %struct.VkSubmitInfo*** %92, %struct.VkSubmitInfo**** %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIPP12VkSubmitInfoNS_9allocatorIS3_EEE10push_frontEOS3_(%"struct.std::__1::__split_buffer.108"*, %struct.VkSubmitInfo*** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.std::__1::__split_buffer.108", %"struct.std::__1::__split_buffer.108"* %0, i64 0, i32 1
  %4 = load %struct.VkSubmitInfo***, %struct.VkSubmitInfo**** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__split_buffer.108", %"struct.std::__1::__split_buffer.108"* %0, i64 0, i32 0
  %6 = load %struct.VkSubmitInfo***, %struct.VkSubmitInfo**** %5, align 8
  %7 = icmp eq %struct.VkSubmitInfo*** %4, %6
  %8 = ptrtoint %struct.VkSubmitInfo*** %6 to i64
  br i1 %7, label %9, label %86

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"struct.std::__1::__split_buffer.108", %"struct.std::__1::__split_buffer.108"* %0, i64 0, i32 2
  %11 = load %struct.VkSubmitInfo***, %struct.VkSubmitInfo**** %10, align 8
  %12 = getelementptr inbounds %"struct.std::__1::__split_buffer.108", %"struct.std::__1::__split_buffer.108"* %0, i64 0, i32 3, i32 0, i32 0
  %13 = load %struct.VkSubmitInfo***, %struct.VkSubmitInfo**** %12, align 8
  %14 = icmp ult %struct.VkSubmitInfo*** %11, %13
  %15 = bitcast %struct.VkSubmitInfo**** %12 to i64*
  %16 = ptrtoint %struct.VkSubmitInfo*** %13 to i64
  br i1 %14, label %17, label %38

17:                                               ; preds = %9
  %18 = ptrtoint %struct.VkSubmitInfo*** %11 to i64
  %19 = sub i64 %16, %18
  %20 = ashr exact i64 %19, 3
  %21 = add nsw i64 %20, 1
  %22 = sdiv i64 %21, 2
  %23 = getelementptr inbounds %struct.VkSubmitInfo**, %struct.VkSubmitInfo*** %11, i64 %22
  %24 = ptrtoint %struct.VkSubmitInfo*** %4 to i64
  %25 = sub i64 %18, %24
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %34, label %27

27:                                               ; preds = %17
  %28 = ashr exact i64 %25, 3
  %29 = sub nsw i64 0, %28
  %30 = getelementptr inbounds %struct.VkSubmitInfo**, %struct.VkSubmitInfo*** %23, i64 %29
  %31 = bitcast %struct.VkSubmitInfo*** %30 to i8*
  %32 = bitcast %struct.VkSubmitInfo*** %4 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %31, i8* align 8 %32, i64 %25, i1 false) #10
  %33 = load %struct.VkSubmitInfo***, %struct.VkSubmitInfo**** %10, align 8
  br label %34

34:                                               ; preds = %17, %27
  %35 = phi %struct.VkSubmitInfo*** [ %33, %27 ], [ %11, %17 ]
  %36 = phi %struct.VkSubmitInfo*** [ %30, %27 ], [ %23, %17 ]
  store %struct.VkSubmitInfo*** %36, %struct.VkSubmitInfo**** %3, align 8
  %37 = getelementptr inbounds %struct.VkSubmitInfo**, %struct.VkSubmitInfo*** %35, i64 %22
  store %struct.VkSubmitInfo*** %37, %struct.VkSubmitInfo**** %10, align 8
  br label %86

38:                                               ; preds = %9
  %39 = bitcast %"struct.std::__1::__split_buffer.108"* %0 to i64*
  %40 = sub i64 %16, %8
  %41 = ashr exact i64 %40, 2
  %42 = icmp eq i64 %40, 0
  %43 = select i1 %42, i64 1, i64 %41
  %44 = icmp ugt i64 %43, 2305843009213693951
  br i1 %44, label %45, label %46

45:                                               ; preds = %38
  tail call void @abort() #12
  unreachable

46:                                               ; preds = %38
  %47 = add nuw nsw i64 %43, 3
  %48 = lshr i64 %47, 2
  %49 = shl i64 %43, 3
  %50 = tail call i8* @_Znwm(i64 %49) #14
  %51 = bitcast i8* %50 to %struct.VkSubmitInfo***
  %52 = ptrtoint i8* %50 to i64
  %53 = getelementptr inbounds %struct.VkSubmitInfo**, %struct.VkSubmitInfo*** %51, i64 %48
  %54 = ptrtoint %struct.VkSubmitInfo*** %53 to i64
  %55 = getelementptr inbounds %struct.VkSubmitInfo**, %struct.VkSubmitInfo*** %51, i64 %43
  %56 = ptrtoint %struct.VkSubmitInfo*** %55 to i64
  %57 = ptrtoint %struct.VkSubmitInfo*** %4 to i64
  %58 = ptrtoint %struct.VkSubmitInfo*** %11 to i64
  %59 = sub i64 %58, %57
  %60 = ashr exact i64 %59, 3
  %61 = getelementptr inbounds %struct.VkSubmitInfo**, %struct.VkSubmitInfo*** %53, i64 %60
  %62 = icmp eq i64 %59, 0
  br i1 %62, label %77, label %63

63:                                               ; preds = %46, %63
  %64 = phi %struct.VkSubmitInfo*** [ %70, %63 ], [ %53, %46 ]
  %65 = phi i64 [ %71, %63 ], [ %54, %46 ]
  %66 = phi %struct.VkSubmitInfo*** [ %72, %63 ], [ %4, %46 ]
  %67 = bitcast %struct.VkSubmitInfo*** %66 to i64*
  %68 = load i64, i64* %67, align 8
  %69 = inttoptr i64 %65 to i64*
  store i64 %68, i64* %69, align 8
  %70 = getelementptr inbounds %struct.VkSubmitInfo**, %struct.VkSubmitInfo*** %64, i64 1
  %71 = ptrtoint %struct.VkSubmitInfo*** %70 to i64
  %72 = getelementptr inbounds %struct.VkSubmitInfo**, %struct.VkSubmitInfo*** %66, i64 1
  %73 = icmp eq %struct.VkSubmitInfo*** %61, %70
  br i1 %73, label %74, label %63

74:                                               ; preds = %63
  %75 = ptrtoint %struct.VkSubmitInfo*** %61 to i64
  %76 = load %struct.VkSubmitInfo***, %struct.VkSubmitInfo**** %5, align 8
  br label %77

77:                                               ; preds = %46, %74
  %78 = phi %struct.VkSubmitInfo*** [ %76, %74 ], [ %4, %46 ]
  %79 = phi i64 [ %75, %74 ], [ %54, %46 ]
  store i64 %52, i64* %39, align 8
  %80 = bitcast %struct.VkSubmitInfo**** %3 to i64*
  store i64 %54, i64* %80, align 8
  %81 = bitcast %struct.VkSubmitInfo**** %10 to i64*
  store i64 %79, i64* %81, align 8
  store i64 %56, i64* %15, align 8
  %82 = icmp eq %struct.VkSubmitInfo*** %78, null
  br i1 %82, label %86, label %83

83:                                               ; preds = %77
  %84 = bitcast %struct.VkSubmitInfo*** %78 to i8*
  tail call void @_ZdlPv(i8* %84) #14
  %85 = load %struct.VkSubmitInfo***, %struct.VkSubmitInfo**** %3, align 8
  br label %86

86:                                               ; preds = %83, %77, %34, %2
  %87 = phi %struct.VkSubmitInfo*** [ %85, %83 ], [ %53, %77 ], [ %36, %34 ], [ %4, %2 ]
  %88 = getelementptr inbounds %struct.VkSubmitInfo**, %struct.VkSubmitInfo*** %87, i64 -1
  %89 = bitcast %struct.VkSubmitInfo*** %1 to i64*
  %90 = load i64, i64* %89, align 8
  %91 = bitcast %struct.VkSubmitInfo*** %88 to i64*
  store i64 %90, i64* %91, align 8
  %92 = load %struct.VkSubmitInfo***, %struct.VkSubmitInfo**** %3, align 8
  %93 = getelementptr inbounds %struct.VkSubmitInfo**, %struct.VkSubmitInfo*** %92, i64 -1
  store %struct.VkSubmitInfo*** %93, %struct.VkSubmitInfo**** %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIPP12VkSubmitInfoRNS_9allocatorIS3_EEE9push_backEOS3_(%"struct.std::__1::__split_buffer.326"*, %struct.VkSubmitInfo*** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.std::__1::__split_buffer.326", %"struct.std::__1::__split_buffer.326"* %0, i64 0, i32 2
  %4 = load %struct.VkSubmitInfo***, %struct.VkSubmitInfo**** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__split_buffer.326", %"struct.std::__1::__split_buffer.326"* %0, i64 0, i32 3, i32 0, i32 0
  %6 = load %struct.VkSubmitInfo***, %struct.VkSubmitInfo**** %5, align 8
  %7 = icmp eq %struct.VkSubmitInfo*** %4, %6
  %8 = ptrtoint %struct.VkSubmitInfo*** %6 to i64
  %9 = bitcast %struct.VkSubmitInfo*** %4 to i64*
  br i1 %7, label %10, label %87

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"struct.std::__1::__split_buffer.326", %"struct.std::__1::__split_buffer.326"* %0, i64 0, i32 1
  %12 = load %struct.VkSubmitInfo***, %struct.VkSubmitInfo**** %11, align 8
  %13 = getelementptr inbounds %"struct.std::__1::__split_buffer.326", %"struct.std::__1::__split_buffer.326"* %0, i64 0, i32 0
  %14 = load %struct.VkSubmitInfo***, %struct.VkSubmitInfo**** %13, align 8
  %15 = icmp ugt %struct.VkSubmitInfo*** %12, %14
  %16 = ptrtoint %struct.VkSubmitInfo*** %14 to i64
  br i1 %15, label %17, label %37

17:                                               ; preds = %10
  %18 = ptrtoint %struct.VkSubmitInfo*** %12 to i64
  %19 = sub i64 %18, %16
  %20 = ashr exact i64 %19, 3
  %21 = add nsw i64 %20, 1
  %22 = sdiv i64 %21, -2
  %23 = getelementptr inbounds %struct.VkSubmitInfo**, %struct.VkSubmitInfo*** %12, i64 %22
  %24 = ptrtoint %struct.VkSubmitInfo*** %4 to i64
  %25 = sub i64 %24, %18
  %26 = ashr exact i64 %25, 3
  %27 = icmp eq i64 %25, 0
  br i1 %27, label %32, label %28

28:                                               ; preds = %17
  %29 = bitcast %struct.VkSubmitInfo*** %23 to i8*
  %30 = bitcast %struct.VkSubmitInfo*** %12 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %29, i8* align 8 %30, i64 %25, i1 false) #10
  %31 = load %struct.VkSubmitInfo***, %struct.VkSubmitInfo**** %11, align 8
  br label %32

32:                                               ; preds = %17, %28
  %33 = phi %struct.VkSubmitInfo*** [ %12, %17 ], [ %31, %28 ]
  %34 = getelementptr inbounds %struct.VkSubmitInfo**, %struct.VkSubmitInfo*** %23, i64 %26
  store %struct.VkSubmitInfo*** %34, %struct.VkSubmitInfo**** %3, align 8
  %35 = getelementptr inbounds %struct.VkSubmitInfo**, %struct.VkSubmitInfo*** %33, i64 %22
  store %struct.VkSubmitInfo*** %35, %struct.VkSubmitInfo**** %11, align 8
  %36 = bitcast %struct.VkSubmitInfo*** %34 to i64*
  br label %87

37:                                               ; preds = %10
  %38 = bitcast %struct.VkSubmitInfo**** %5 to i64*
  %39 = bitcast %"struct.std::__1::__split_buffer.326"* %0 to i64*
  %40 = sub i64 %8, %16
  %41 = ashr exact i64 %40, 2
  %42 = icmp eq i64 %40, 0
  %43 = select i1 %42, i64 1, i64 %41
  %44 = icmp ugt i64 %43, 2305843009213693951
  br i1 %44, label %45, label %46

45:                                               ; preds = %37
  tail call void @abort() #12
  unreachable

46:                                               ; preds = %37
  %47 = lshr i64 %43, 2
  %48 = shl i64 %43, 3
  %49 = tail call i8* @_Znwm(i64 %48) #14
  %50 = bitcast i8* %49 to %struct.VkSubmitInfo***
  %51 = ptrtoint i8* %49 to i64
  %52 = getelementptr inbounds %struct.VkSubmitInfo**, %struct.VkSubmitInfo*** %50, i64 %47
  %53 = ptrtoint %struct.VkSubmitInfo*** %52 to i64
  %54 = getelementptr inbounds %struct.VkSubmitInfo**, %struct.VkSubmitInfo*** %50, i64 %43
  %55 = ptrtoint %struct.VkSubmitInfo*** %54 to i64
  %56 = ptrtoint %struct.VkSubmitInfo*** %12 to i64
  %57 = ptrtoint %struct.VkSubmitInfo*** %4 to i64
  %58 = sub i64 %57, %56
  %59 = ashr exact i64 %58, 3
  %60 = getelementptr inbounds %struct.VkSubmitInfo**, %struct.VkSubmitInfo*** %52, i64 %59
  %61 = icmp eq i64 %58, 0
  br i1 %61, label %76, label %62

62:                                               ; preds = %46, %62
  %63 = phi %struct.VkSubmitInfo*** [ %69, %62 ], [ %52, %46 ]
  %64 = phi i64 [ %70, %62 ], [ %53, %46 ]
  %65 = phi %struct.VkSubmitInfo*** [ %71, %62 ], [ %12, %46 ]
  %66 = bitcast %struct.VkSubmitInfo*** %65 to i64*
  %67 = load i64, i64* %66, align 8
  %68 = inttoptr i64 %64 to i64*
  store i64 %67, i64* %68, align 8
  %69 = getelementptr inbounds %struct.VkSubmitInfo**, %struct.VkSubmitInfo*** %63, i64 1
  %70 = ptrtoint %struct.VkSubmitInfo*** %69 to i64
  %71 = getelementptr inbounds %struct.VkSubmitInfo**, %struct.VkSubmitInfo*** %65, i64 1
  %72 = icmp eq %struct.VkSubmitInfo*** %60, %69
  br i1 %72, label %73, label %62

73:                                               ; preds = %62
  %74 = ptrtoint %struct.VkSubmitInfo*** %60 to i64
  %75 = load %struct.VkSubmitInfo***, %struct.VkSubmitInfo**** %13, align 8
  br label %76

76:                                               ; preds = %46, %73
  %77 = phi %struct.VkSubmitInfo*** [ %75, %73 ], [ %14, %46 ]
  %78 = phi i64 [ %74, %73 ], [ %53, %46 ]
  store i64 %51, i64* %39, align 8
  %79 = bitcast %struct.VkSubmitInfo**** %11 to i64*
  store i64 %53, i64* %79, align 8
  %80 = bitcast %struct.VkSubmitInfo**** %3 to i64*
  store i64 %78, i64* %80, align 8
  store i64 %55, i64* %38, align 8
  %81 = icmp eq %struct.VkSubmitInfo*** %77, null
  %82 = inttoptr i64 %78 to i64*
  br i1 %81, label %87, label %83

83:                                               ; preds = %76
  %84 = bitcast %struct.VkSubmitInfo*** %77 to i8*
  tail call void @_ZdlPv(i8* %84) #14
  %85 = bitcast %struct.VkSubmitInfo**** %3 to i64**
  %86 = load i64*, i64** %85, align 8
  br label %87

87:                                               ; preds = %83, %76, %32, %2
  %88 = phi i64* [ %86, %83 ], [ %82, %76 ], [ %36, %32 ], [ %9, %2 ]
  %89 = bitcast %struct.VkSubmitInfo*** %1 to i64*
  %90 = load i64, i64* %89, align 8
  store i64 %90, i64* %88, align 8
  %91 = load %struct.VkSubmitInfo***, %struct.VkSubmitInfo**** %3, align 8
  %92 = getelementptr inbounds %struct.VkSubmitInfo**, %struct.VkSubmitInfo*** %91, i64 1
  store %struct.VkSubmitInfo*** %92, %struct.VkSubmitInfo**** %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIPP12VkSubmitInfoRNS_9allocatorIS3_EEE10push_frontERKS3_(%"struct.std::__1::__split_buffer.326"*, %struct.VkSubmitInfo*** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.std::__1::__split_buffer.326", %"struct.std::__1::__split_buffer.326"* %0, i64 0, i32 1
  %4 = load %struct.VkSubmitInfo***, %struct.VkSubmitInfo**** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__split_buffer.326", %"struct.std::__1::__split_buffer.326"* %0, i64 0, i32 0
  %6 = load %struct.VkSubmitInfo***, %struct.VkSubmitInfo**** %5, align 8
  %7 = icmp eq %struct.VkSubmitInfo*** %4, %6
  %8 = ptrtoint %struct.VkSubmitInfo*** %6 to i64
  br i1 %7, label %9, label %86

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"struct.std::__1::__split_buffer.326", %"struct.std::__1::__split_buffer.326"* %0, i64 0, i32 2
  %11 = load %struct.VkSubmitInfo***, %struct.VkSubmitInfo**** %10, align 8
  %12 = getelementptr inbounds %"struct.std::__1::__split_buffer.326", %"struct.std::__1::__split_buffer.326"* %0, i64 0, i32 3, i32 0, i32 0
  %13 = load %struct.VkSubmitInfo***, %struct.VkSubmitInfo**** %12, align 8
  %14 = icmp ult %struct.VkSubmitInfo*** %11, %13
  %15 = bitcast %struct.VkSubmitInfo**** %12 to i64*
  %16 = ptrtoint %struct.VkSubmitInfo*** %13 to i64
  br i1 %14, label %17, label %38

17:                                               ; preds = %9
  %18 = ptrtoint %struct.VkSubmitInfo*** %11 to i64
  %19 = sub i64 %16, %18
  %20 = ashr exact i64 %19, 3
  %21 = add nsw i64 %20, 1
  %22 = sdiv i64 %21, 2
  %23 = getelementptr inbounds %struct.VkSubmitInfo**, %struct.VkSubmitInfo*** %11, i64 %22
  %24 = ptrtoint %struct.VkSubmitInfo*** %4 to i64
  %25 = sub i64 %18, %24
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %34, label %27

27:                                               ; preds = %17
  %28 = ashr exact i64 %25, 3
  %29 = sub nsw i64 0, %28
  %30 = getelementptr inbounds %struct.VkSubmitInfo**, %struct.VkSubmitInfo*** %23, i64 %29
  %31 = bitcast %struct.VkSubmitInfo*** %30 to i8*
  %32 = bitcast %struct.VkSubmitInfo*** %4 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %31, i8* align 8 %32, i64 %25, i1 false) #10
  %33 = load %struct.VkSubmitInfo***, %struct.VkSubmitInfo**** %10, align 8
  br label %34

34:                                               ; preds = %17, %27
  %35 = phi %struct.VkSubmitInfo*** [ %33, %27 ], [ %11, %17 ]
  %36 = phi %struct.VkSubmitInfo*** [ %30, %27 ], [ %23, %17 ]
  store %struct.VkSubmitInfo*** %36, %struct.VkSubmitInfo**** %3, align 8
  %37 = getelementptr inbounds %struct.VkSubmitInfo**, %struct.VkSubmitInfo*** %35, i64 %22
  store %struct.VkSubmitInfo*** %37, %struct.VkSubmitInfo**** %10, align 8
  br label %86

38:                                               ; preds = %9
  %39 = bitcast %"struct.std::__1::__split_buffer.326"* %0 to i64*
  %40 = sub i64 %16, %8
  %41 = ashr exact i64 %40, 2
  %42 = icmp eq i64 %40, 0
  %43 = select i1 %42, i64 1, i64 %41
  %44 = icmp ugt i64 %43, 2305843009213693951
  br i1 %44, label %45, label %46

45:                                               ; preds = %38
  tail call void @abort() #12
  unreachable

46:                                               ; preds = %38
  %47 = add nuw nsw i64 %43, 3
  %48 = lshr i64 %47, 2
  %49 = shl i64 %43, 3
  %50 = tail call i8* @_Znwm(i64 %49) #14
  %51 = bitcast i8* %50 to %struct.VkSubmitInfo***
  %52 = ptrtoint i8* %50 to i64
  %53 = getelementptr inbounds %struct.VkSubmitInfo**, %struct.VkSubmitInfo*** %51, i64 %48
  %54 = ptrtoint %struct.VkSubmitInfo*** %53 to i64
  %55 = getelementptr inbounds %struct.VkSubmitInfo**, %struct.VkSubmitInfo*** %51, i64 %43
  %56 = ptrtoint %struct.VkSubmitInfo*** %55 to i64
  %57 = ptrtoint %struct.VkSubmitInfo*** %4 to i64
  %58 = ptrtoint %struct.VkSubmitInfo*** %11 to i64
  %59 = sub i64 %58, %57
  %60 = ashr exact i64 %59, 3
  %61 = getelementptr inbounds %struct.VkSubmitInfo**, %struct.VkSubmitInfo*** %53, i64 %60
  %62 = icmp eq i64 %59, 0
  br i1 %62, label %77, label %63

63:                                               ; preds = %46, %63
  %64 = phi %struct.VkSubmitInfo*** [ %70, %63 ], [ %53, %46 ]
  %65 = phi i64 [ %71, %63 ], [ %54, %46 ]
  %66 = phi %struct.VkSubmitInfo*** [ %72, %63 ], [ %4, %46 ]
  %67 = bitcast %struct.VkSubmitInfo*** %66 to i64*
  %68 = load i64, i64* %67, align 8
  %69 = inttoptr i64 %65 to i64*
  store i64 %68, i64* %69, align 8
  %70 = getelementptr inbounds %struct.VkSubmitInfo**, %struct.VkSubmitInfo*** %64, i64 1
  %71 = ptrtoint %struct.VkSubmitInfo*** %70 to i64
  %72 = getelementptr inbounds %struct.VkSubmitInfo**, %struct.VkSubmitInfo*** %66, i64 1
  %73 = icmp eq %struct.VkSubmitInfo*** %61, %70
  br i1 %73, label %74, label %63

74:                                               ; preds = %63
  %75 = ptrtoint %struct.VkSubmitInfo*** %61 to i64
  %76 = load %struct.VkSubmitInfo***, %struct.VkSubmitInfo**** %5, align 8
  br label %77

77:                                               ; preds = %46, %74
  %78 = phi %struct.VkSubmitInfo*** [ %76, %74 ], [ %4, %46 ]
  %79 = phi i64 [ %75, %74 ], [ %54, %46 ]
  store i64 %52, i64* %39, align 8
  %80 = bitcast %struct.VkSubmitInfo**** %3 to i64*
  store i64 %54, i64* %80, align 8
  %81 = bitcast %struct.VkSubmitInfo**** %10 to i64*
  store i64 %79, i64* %81, align 8
  store i64 %56, i64* %15, align 8
  %82 = icmp eq %struct.VkSubmitInfo*** %78, null
  br i1 %82, label %86, label %83

83:                                               ; preds = %77
  %84 = bitcast %struct.VkSubmitInfo*** %78 to i8*
  tail call void @_ZdlPv(i8* %84) #14
  %85 = load %struct.VkSubmitInfo***, %struct.VkSubmitInfo**** %3, align 8
  br label %86

86:                                               ; preds = %83, %77, %34, %2
  %87 = phi %struct.VkSubmitInfo*** [ %85, %83 ], [ %53, %77 ], [ %36, %34 ], [ %4, %2 ]
  %88 = getelementptr inbounds %struct.VkSubmitInfo**, %struct.VkSubmitInfo*** %87, i64 -1
  %89 = bitcast %struct.VkSubmitInfo*** %1 to i64*
  %90 = load i64, i64* %89, align 8
  %91 = bitcast %struct.VkSubmitInfo*** %88 to i64*
  store i64 %90, i64* %91, align 8
  %92 = load %struct.VkSubmitInfo***, %struct.VkSubmitInfo**** %3, align 8
  %93 = getelementptr inbounds %struct.VkSubmitInfo**, %struct.VkSubmitInfo*** %92, i64 -1
  store %struct.VkSubmitInfo*** %93, %struct.VkSubmitInfo**** %3, align 8
  ret void
}

; Function Attrs: optsize
declare void @_ZN4marl9Scheduler6unbindEv() local_unnamed_addr #3

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZNSt3__15dequeIN2vk5Queue4TaskENS_9allocatorIS3_EEE9pop_frontEv(%"class.std::__1::deque"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 1
  %3 = load %"struct.vk::Queue::Task"**, %"struct.vk::Queue::Task"*** %2, align 8
  %4 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = udiv i64 %5, 102
  %7 = getelementptr inbounds %"struct.vk::Queue::Task"*, %"struct.vk::Queue::Task"** %3, i64 %6
  %8 = load %"struct.vk::Queue::Task"*, %"struct.vk::Queue::Task"** %7, align 8
  %9 = urem i64 %5, 102
  %10 = getelementptr inbounds %"struct.vk::Queue::Task", %"struct.vk::Queue::Task"* %8, i64 %9, i32 3
  tail call void @_ZNSt3__110shared_ptrIN2sw12CountedEventEED2Ev(%"class.std::__1::shared_ptr.84"* %10) #13
  %11 = bitcast i64* %4 to <2 x i64>*
  %12 = load <2 x i64>, <2 x i64>* %11, align 8
  %13 = add <2 x i64> %12, <i64 1, i64 -1>
  %14 = bitcast i64* %4 to <2 x i64>*
  store <2 x i64> %13, <2 x i64>* %14, align 8
  %15 = tail call zeroext i1 @_ZNSt3__15dequeIN2vk5Queue4TaskENS_9allocatorIS3_EEE26__maybe_remove_front_spareEb(%"class.std::__1::deque"* %0, i1 zeroext true) #11
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNSt3__15dequeIN2vk5Queue4TaskENS_9allocatorIS3_EEE26__maybe_remove_front_spareEb(%"class.std::__1::deque"*, i1 zeroext) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 1
  %4 = load i64, i64* %3, align 8
  %5 = icmp ult i64 %4, 204
  %6 = icmp ult i64 %4, 102
  %7 = or i1 %6, %1
  %8 = and i1 %5, %7
  br i1 %8, label %18, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 1
  %11 = bitcast %"struct.vk::Queue::Task"*** %10 to i8***
  %12 = load i8**, i8*** %11, align 8
  %13 = load i8*, i8** %12, align 8
  tail call void @_ZdlPv(i8* %13) #14
  %14 = load %"struct.vk::Queue::Task"**, %"struct.vk::Queue::Task"*** %10, align 8
  %15 = getelementptr inbounds %"struct.vk::Queue::Task"*, %"struct.vk::Queue::Task"** %14, i64 1
  store %"struct.vk::Queue::Task"** %15, %"struct.vk::Queue::Task"*** %10, align 8
  %16 = load i64, i64* %3, align 8
  %17 = add i64 %16, -102
  store i64 %17, i64* %3, align 8
  br label %18

18:                                               ; preds = %2, %9
  %19 = phi i1 [ true, %9 ], [ false, %2 ]
  ret i1 %19
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZN2sw12CountedEventC2Eb(%"class.sw::CountedEvent"*, i1 zeroext) unnamed_addr #0 comdat align 2 {
  %3 = alloca %"struct.marl::Allocation::Request", align 16
  %4 = alloca %"struct.marl::Allocation", align 8
  %5 = load i64, i64* bitcast (%"class.marl::Allocator"** @_ZN4marl9Allocator7DefaultE to i64*), align 8
  %6 = tail call i8* @_Znwm(i64 216) #14
  %7 = bitcast i8* %6 to i32 (...)***
  %8 = getelementptr inbounds i8, i8* %6, i64 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 16, i1 false) #10
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVNSt3__120__shared_ptr_emplaceIN4marl9WaitGroup4DataENS_9allocatorIS3_EEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %7, align 8
  %9 = getelementptr inbounds i8, i8* %6, i64 24
  %10 = bitcast i8* %9 to i32*
  store i32 0, i32* %10, align 4
  %11 = getelementptr inbounds i8, i8* %6, i64 32
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 40, i1 false) #10
  %12 = getelementptr inbounds i8, i8* %6, i64 72
  %13 = bitcast i8* %12 to i64*
  store i64 %5, i64* %13, align 8
  %14 = getelementptr inbounds i8, i8* %6, i64 80
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %14, i8 0, i64 136, i1 false) #10
  %15 = bitcast %"class.sw::CountedEvent"* %0 to i8**
  store i8* %9, i8** %15, align 8
  %16 = getelementptr inbounds %"class.sw::CountedEvent", %"class.sw::CountedEvent"* %0, i64 0, i32 0, i32 0, i32 1
  %17 = bitcast %"class.std::__1::__shared_weak_count"** %16 to i8**
  store i8* %6, i8** %17, align 8
  store atomic i32 0, i32* %10 seq_cst, align 4
  %18 = load %"class.marl::Allocator"*, %"class.marl::Allocator"** @_ZN4marl9Allocator7DefaultE, align 8
  %19 = zext i1 %1 to i8
  %20 = ptrtoint %"class.marl::Allocator"* %18 to i64
  %21 = bitcast %"struct.marl::Allocation::Request"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %21) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %21, i8 -86, i64 24, i1 false) #10
  %22 = getelementptr inbounds %"struct.marl::Allocation::Request", %"struct.marl::Allocation::Request"* %3, i64 0, i32 2
  %23 = bitcast i8* %22 to i16*
  store i16 512, i16* %23, align 16
  %24 = bitcast %"struct.marl::Allocation::Request"* %3 to <2 x i64>*
  store <2 x i64> <i64 272, i64 8>, <2 x i64>* %24, align 16
  %25 = bitcast %"struct.marl::Allocation"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %25) #10
  %26 = bitcast %"class.marl::Allocator"* %18 to void (%"struct.marl::Allocation"*, %"class.marl::Allocator"*, %"struct.marl::Allocation::Request"*)***
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %25, i8 -86, i64 32, i1 false) #10
  %27 = load void (%"struct.marl::Allocation"*, %"class.marl::Allocator"*, %"struct.marl::Allocation::Request"*)**, void (%"struct.marl::Allocation"*, %"class.marl::Allocator"*, %"struct.marl::Allocation::Request"*)*** %26, align 8
  %28 = getelementptr inbounds void (%"struct.marl::Allocation"*, %"class.marl::Allocator"*, %"struct.marl::Allocation::Request"*)*, void (%"struct.marl::Allocation"*, %"class.marl::Allocator"*, %"struct.marl::Allocation::Request"*)** %27, i64 2
  %29 = load void (%"struct.marl::Allocation"*, %"class.marl::Allocator"*, %"struct.marl::Allocation::Request"*)*, void (%"struct.marl::Allocation"*, %"class.marl::Allocator"*, %"struct.marl::Allocation::Request"*)** %28, align 8
  call void %29(%"struct.marl::Allocation"* nonnull sret %4, %"class.marl::Allocator"* %18, %"struct.marl::Allocation::Request"* nonnull dereferenceable(24) %3) #13
  %30 = bitcast %"struct.marl::Allocation"* %4 to %"struct.marl::Event::Shared"**
  %31 = load %"struct.marl::Event::Shared"*, %"struct.marl::Event::Shared"** %30, align 8
  %32 = getelementptr inbounds %"struct.marl::Event::Shared", %"struct.marl::Event::Shared"* %31, i64 0, i32 1, i32 1, i32 0
  %33 = bitcast %"struct.marl::Event::Shared"* %31 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %33, i8 0, i64 80, i1 false) #10
  %34 = bitcast %"class.marl::Allocator"** %32 to i64*
  store i64 %20, i64* %34, align 8
  %35 = getelementptr inbounds %"struct.marl::Event::Shared", %"struct.marl::Event::Shared"* %31, i64 0, i32 1, i32 1, i32 1
  %36 = bitcast i64* %35 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %36, i8 0, i64 96, i1 false) #10
  %37 = getelementptr inbounds %"struct.marl::Event::Shared", %"struct.marl::Event::Shared"* %31, i64 0, i32 2
  %38 = load i64, i64* bitcast (%"class.marl::Allocator"** @_ZN4marl9Allocator7DefaultE to i64*), align 8
  %39 = bitcast %"class.marl::containers::vector"* %37 to i64*
  store i64 %38, i64* %39, align 8
  %40 = getelementptr inbounds %"struct.marl::Event::Shared", %"struct.marl::Event::Shared"* %31, i64 0, i32 2, i32 1
  %41 = bitcast i64* %40 to <2 x i64>*
  store <2 x i64> <i64 0, i64 1>, <2 x i64>* %41, align 8
  %42 = getelementptr inbounds %"struct.marl::Event::Shared", %"struct.marl::Event::Shared"* %31, i64 0, i32 2, i32 4
  %43 = getelementptr inbounds %"struct.marl::Event::Shared", %"struct.marl::Event::Shared"* %31, i64 0, i32 2, i32 3, i64 0
  store %"struct.marl::aligned_storage<16, 8>::type"* %43, %"struct.marl::aligned_storage<16, 8>::type"** %42, align 8
  %44 = getelementptr inbounds %"struct.marl::Event::Shared", %"struct.marl::Event::Shared"* %31, i64 0, i32 2, i32 5
  %45 = bitcast %"struct.marl::Allocation"* %44 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %45, i8 0, i64 26, i1 false) #10
  %46 = getelementptr inbounds %"struct.marl::Event::Shared", %"struct.marl::Event::Shared"* %31, i64 0, i32 3
  store i8 1, i8* %46, align 8
  %47 = getelementptr inbounds %"struct.marl::Event::Shared", %"struct.marl::Event::Shared"* %31, i64 0, i32 4
  store i8 %19, i8* %47, align 1
  %48 = call i8* @_Znwm(i64 48) #14
  %49 = ptrtoint %"struct.marl::Event::Shared"* %31 to i64
  %50 = bitcast i8* %48 to i32 (...)***
  %51 = getelementptr inbounds i8, i8* %48, i64 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %51, i8 0, i64 16, i1 false) #10
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVNSt3__120__shared_ptr_pointerIPN4marl5Event6SharedENS1_9Allocator7DeleterENS_9allocatorIS3_EEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %50, align 8
  %52 = getelementptr inbounds i8, i8* %48, i64 24
  %53 = bitcast i8* %52 to i64*
  store i64 %49, i64* %53, align 8
  %54 = getelementptr inbounds i8, i8* %48, i64 32
  %55 = bitcast i8* %54 to %"class.marl::Allocator"**
  store %"class.marl::Allocator"* %18, %"class.marl::Allocator"** %55, align 8
  %56 = getelementptr inbounds i8, i8* %48, i64 40
  %57 = bitcast i8* %56 to i64*
  store i64 1, i64* %57, align 8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %25) #10
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %21) #10
  %58 = getelementptr inbounds %"class.sw::CountedEvent", %"class.sw::CountedEvent"* %0, i64 0, i32 1, i32 0, i32 0
  store %"struct.marl::Event::Shared"* %31, %"struct.marl::Event::Shared"** %58, align 8
  %59 = getelementptr inbounds %"class.sw::CountedEvent", %"class.sw::CountedEvent"* %0, i64 0, i32 1, i32 0, i32 1
  %60 = bitcast %"class.std::__1::__shared_weak_count"** %59 to i8**
  store i8* %48, i8** %60, align 8
  ret void
}

; Function Attrs: inlinehint nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZNSt3__120__shared_ptr_emplaceIN2sw12CountedEventENS_9allocatorIS2_EEED2Ev(%"struct.std::__1::__shared_ptr_emplace"*) unnamed_addr #7 comdat align 2 {
  %2 = getelementptr inbounds %"struct.std::__1::__shared_ptr_emplace", %"struct.std::__1::__shared_ptr_emplace"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVNSt3__120__shared_ptr_emplaceIN2sw12CountedEventENS_9allocatorIS2_EEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"struct.std::__1::__shared_ptr_emplace", %"struct.std::__1::__shared_ptr_emplace"* %0, i64 0, i32 0
  tail call void @_ZNSt3__119__shared_weak_countD2Ev(%"class.std::__1::__shared_weak_count"* %3) #13
  ret void
}

; Function Attrs: inlinehint nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZNSt3__120__shared_ptr_emplaceIN2sw12CountedEventENS_9allocatorIS2_EEED0Ev(%"struct.std::__1::__shared_ptr_emplace"*) unnamed_addr #7 comdat align 2 {
  %2 = getelementptr inbounds %"struct.std::__1::__shared_ptr_emplace", %"struct.std::__1::__shared_ptr_emplace"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVNSt3__120__shared_ptr_emplaceIN2sw12CountedEventENS_9allocatorIS2_EEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"struct.std::__1::__shared_ptr_emplace", %"struct.std::__1::__shared_ptr_emplace"* %0, i64 0, i32 0
  tail call void @_ZNSt3__119__shared_weak_countD2Ev(%"class.std::__1::__shared_weak_count"* %3) #13
  %4 = bitcast %"struct.std::__1::__shared_ptr_emplace"* %0 to i8*
  tail call void @_ZdlPv(i8* %4) #14
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZNSt3__120__shared_ptr_emplaceIN2sw12CountedEventENS_9allocatorIS2_EEE16__on_zero_sharedEv(%"struct.std::__1::__shared_ptr_emplace"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"struct.std::__1::__shared_ptr_emplace", %"struct.std::__1::__shared_ptr_emplace"* %0, i64 0, i32 1
  %3 = getelementptr inbounds %"struct.std::__1::__shared_ptr_emplace", %"struct.std::__1::__shared_ptr_emplace"* %0, i64 0, i32 1, i32 0, i64 16
  %4 = bitcast i8* %3 to %"class.std::__1::shared_ptr.95"*
  tail call void @_ZNSt3__110shared_ptrIN4marl5Event6SharedEED2Ev(%"class.std::__1::shared_ptr.95"* %4) #13
  %5 = bitcast %"struct.std::__1::__shared_ptr_emplace<sw::CountedEvent, std::__1::allocator<sw::CountedEvent> >::_Storage"* %2 to %"class.std::__1::shared_ptr.85"*
  tail call void @_ZNSt3__110shared_ptrIN4marl9WaitGroup4DataEED2Ev(%"class.std::__1::shared_ptr.85"* %5) #13
  ret void
}

; Function Attrs: nounwind optsize
declare i8* @_ZNKSt3__119__shared_weak_count13__get_deleterERKSt9type_info(%"class.std::__1::__shared_weak_count"*, %"class.std::type_info"* dereferenceable(16)) unnamed_addr #2

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZNSt3__120__shared_ptr_emplaceIN2sw12CountedEventENS_9allocatorIS2_EEE21__on_zero_shared_weakEv(%"struct.std::__1::__shared_ptr_emplace"*) unnamed_addr #0 comdat align 2 {
  %2 = bitcast %"struct.std::__1::__shared_ptr_emplace"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #14
  ret void
}

; Function Attrs: inlinehint nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZNSt3__120__shared_ptr_emplaceIN4marl9WaitGroup4DataENS_9allocatorIS3_EEED2Ev(%"struct.std::__1::__shared_ptr_emplace.348"*) unnamed_addr #7 comdat align 2 {
  %2 = getelementptr inbounds %"struct.std::__1::__shared_ptr_emplace.348", %"struct.std::__1::__shared_ptr_emplace.348"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVNSt3__120__shared_ptr_emplaceIN4marl9WaitGroup4DataENS_9allocatorIS3_EEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"struct.std::__1::__shared_ptr_emplace.348", %"struct.std::__1::__shared_ptr_emplace.348"* %0, i64 0, i32 0
  tail call void @_ZNSt3__119__shared_weak_countD2Ev(%"class.std::__1::__shared_weak_count"* %3) #13
  ret void
}

; Function Attrs: inlinehint nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZNSt3__120__shared_ptr_emplaceIN4marl9WaitGroup4DataENS_9allocatorIS3_EEED0Ev(%"struct.std::__1::__shared_ptr_emplace.348"*) unnamed_addr #7 comdat align 2 {
  %2 = getelementptr inbounds %"struct.std::__1::__shared_ptr_emplace.348", %"struct.std::__1::__shared_ptr_emplace.348"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVNSt3__120__shared_ptr_emplaceIN4marl9WaitGroup4DataENS_9allocatorIS3_EEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"struct.std::__1::__shared_ptr_emplace.348", %"struct.std::__1::__shared_ptr_emplace.348"* %0, i64 0, i32 0
  tail call void @_ZNSt3__119__shared_weak_countD2Ev(%"class.std::__1::__shared_weak_count"* %3) #13
  %4 = bitcast %"struct.std::__1::__shared_ptr_emplace.348"* %0 to i8*
  tail call void @_ZdlPv(i8* %4) #14
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZNSt3__120__shared_ptr_emplaceIN4marl9WaitGroup4DataENS_9allocatorIS3_EEE16__on_zero_sharedEv(%"struct.std::__1::__shared_ptr_emplace.348"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"struct.std::__1::__shared_ptr_emplace.348", %"struct.std::__1::__shared_ptr_emplace.348"* %0, i64 0, i32 1, i32 0, i64 96
  %3 = bitcast i8* %2 to %"class.std::__1::condition_variable"*
  tail call void @_ZNSt3__118condition_variableD1Ev(%"class.std::__1::condition_variable"* %3) #13
  %4 = getelementptr inbounds %"struct.std::__1::__shared_ptr_emplace.348", %"struct.std::__1::__shared_ptr_emplace.348"* %0, i64 0, i32 1, i32 0, i64 88
  %5 = bitcast i8* %4 to %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"**
  br label %6

6:                                                ; preds = %6, %1
  %7 = phi %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"** [ %5, %1 ], [ %10, %6 ]
  %8 = load %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"*, %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"** %7, align 8
  %9 = icmp eq %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"* %8, null
  %10 = getelementptr inbounds %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry", %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"* %8, i64 0, i32 1
  br i1 %9, label %11, label %6

11:                                               ; preds = %6
  %12 = getelementptr inbounds %"struct.std::__1::__shared_ptr_emplace.348", %"struct.std::__1::__shared_ptr_emplace.348"* %0, i64 0, i32 1, i32 0, i64 72
  %13 = bitcast i8* %12 to %"struct.marl::containers::list<marl::Scheduler::Fiber *>::AllocationChain"**
  %14 = load %"struct.marl::containers::list<marl::Scheduler::Fiber *>::AllocationChain"*, %"struct.marl::containers::list<marl::Scheduler::Fiber *>::AllocationChain"** %13, align 8
  %15 = icmp eq %"struct.marl::containers::list<marl::Scheduler::Fiber *>::AllocationChain"* %14, null
  br i1 %15, label %30, label %16

16:                                               ; preds = %11
  %17 = getelementptr inbounds %"struct.std::__1::__shared_ptr_emplace.348", %"struct.std::__1::__shared_ptr_emplace.348"* %0, i64 0, i32 1, i32 0, i64 48
  %18 = bitcast i8* %17 to %"class.marl::Allocator"**
  br label %19

19:                                               ; preds = %19, %16
  %20 = phi %"struct.marl::containers::list<marl::Scheduler::Fiber *>::AllocationChain"* [ %14, %16 ], [ %22, %19 ]
  %21 = getelementptr inbounds %"struct.marl::containers::list<marl::Scheduler::Fiber *>::AllocationChain", %"struct.marl::containers::list<marl::Scheduler::Fiber *>::AllocationChain"* %20, i64 0, i32 1
  %22 = load %"struct.marl::containers::list<marl::Scheduler::Fiber *>::AllocationChain"*, %"struct.marl::containers::list<marl::Scheduler::Fiber *>::AllocationChain"** %21, align 8
  %23 = load %"class.marl::Allocator"*, %"class.marl::Allocator"** %18, align 8
  %24 = getelementptr inbounds %"struct.marl::containers::list<marl::Scheduler::Fiber *>::AllocationChain", %"struct.marl::containers::list<marl::Scheduler::Fiber *>::AllocationChain"* %20, i64 0, i32 0
  %25 = bitcast %"class.marl::Allocator"* %23 to void (%"class.marl::Allocator"*, %"struct.marl::Allocation"*)***
  %26 = load void (%"class.marl::Allocator"*, %"struct.marl::Allocation"*)**, void (%"class.marl::Allocator"*, %"struct.marl::Allocation"*)*** %25, align 8
  %27 = getelementptr inbounds void (%"class.marl::Allocator"*, %"struct.marl::Allocation"*)*, void (%"class.marl::Allocator"*, %"struct.marl::Allocation"*)** %26, i64 3
  %28 = load void (%"class.marl::Allocator"*, %"struct.marl::Allocation"*)*, void (%"class.marl::Allocator"*, %"struct.marl::Allocation"*)** %27, align 8
  tail call void %28(%"class.marl::Allocator"* %23, %"struct.marl::Allocation"* dereferenceable(32) %24) #13
  %29 = icmp eq %"struct.marl::containers::list<marl::Scheduler::Fiber *>::AllocationChain"* %22, null
  br i1 %29, label %30, label %19

30:                                               ; preds = %19, %11
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZNSt3__120__shared_ptr_emplaceIN4marl9WaitGroup4DataENS_9allocatorIS3_EEE21__on_zero_shared_weakEv(%"struct.std::__1::__shared_ptr_emplace.348"*) unnamed_addr #0 comdat align 2 {
  %2 = bitcast %"struct.std::__1::__shared_ptr_emplace.348"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #14
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZNSt3__110shared_ptrIN4marl9WaitGroup4DataEED2Ev(%"class.std::__1::shared_ptr.85"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.std::__1::shared_ptr.85", %"class.std::__1::shared_ptr.85"* %0, i64 0, i32 1
  %3 = load %"class.std::__1::__shared_weak_count"*, %"class.std::__1::__shared_weak_count"** %2, align 8
  %4 = icmp eq %"class.std::__1::__shared_weak_count"* %3, null
  br i1 %4, label %15, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.std::__1::__shared_weak_count", %"class.std::__1::__shared_weak_count"* %3, i64 0, i32 0, i32 1
  %7 = atomicrmw add i64* %6, i64 -1 acq_rel
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %9, label %15

9:                                                ; preds = %5
  %10 = getelementptr inbounds %"class.std::__1::__shared_weak_count", %"class.std::__1::__shared_weak_count"* %3, i64 0, i32 0
  %11 = bitcast %"class.std::__1::__shared_weak_count"* %3 to void (%"class.std::__1::__shared_count"*)***
  %12 = load void (%"class.std::__1::__shared_count"*)**, void (%"class.std::__1::__shared_count"*)*** %11, align 8
  %13 = getelementptr inbounds void (%"class.std::__1::__shared_count"*)*, void (%"class.std::__1::__shared_count"*)** %12, i64 2
  %14 = load void (%"class.std::__1::__shared_count"*)*, void (%"class.std::__1::__shared_count"*)** %13, align 8
  tail call void %14(%"class.std::__1::__shared_count"* %10) #13
  tail call void @_ZNSt3__119__shared_weak_count14__release_weakEv(%"class.std::__1::__shared_weak_count"* nonnull %3) #13
  br label %15

15:                                               ; preds = %9, %5, %1
  ret void
}

; Function Attrs: nounwind optsize
declare void @_ZNSt3__119__shared_weak_countD2Ev(%"class.std::__1::__shared_weak_count"*) unnamed_addr #2

; Function Attrs: inlinehint nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZNSt3__120__shared_ptr_pointerIPN4marl5Event6SharedENS1_9Allocator7DeleterENS_9allocatorIS3_EEED0Ev(%"class.std::__1::__shared_ptr_pointer"*) unnamed_addr #7 comdat align 2 {
  %2 = getelementptr inbounds %"class.std::__1::__shared_ptr_pointer", %"class.std::__1::__shared_ptr_pointer"* %0, i64 0, i32 0
  tail call void @_ZNSt3__119__shared_weak_countD2Ev(%"class.std::__1::__shared_weak_count"* %2) #13
  %3 = bitcast %"class.std::__1::__shared_ptr_pointer"* %0 to i8*
  tail call void @_ZdlPv(i8* %3) #14
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZNSt3__120__shared_ptr_pointerIPN4marl5Event6SharedENS1_9Allocator7DeleterENS_9allocatorIS3_EEE16__on_zero_sharedEv(%"class.std::__1::__shared_ptr_pointer"*) unnamed_addr #0 comdat align 2 {
  %2 = alloca %"struct.marl::Allocation", align 8
  %3 = getelementptr inbounds %"class.std::__1::__shared_ptr_pointer", %"class.std::__1::__shared_ptr_pointer"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %4 = load %"struct.marl::Event::Shared"*, %"struct.marl::Event::Shared"** %3, align 8
  %5 = getelementptr inbounds %"struct.marl::Event::Shared", %"struct.marl::Event::Shared"* %4, i64 0, i32 2, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %11, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"struct.marl::Event::Shared", %"struct.marl::Event::Shared"* %4, i64 0, i32 2, i32 4
  %10 = bitcast %"struct.marl::aligned_storage<16, 8>::type"** %9 to %"class.std::__1::shared_ptr.95"**
  br label %16

11:                                               ; preds = %16, %1
  %12 = getelementptr inbounds %"struct.marl::Event::Shared", %"struct.marl::Event::Shared"* %4, i64 0, i32 2, i32 5
  %13 = getelementptr inbounds %"struct.marl::Allocation", %"struct.marl::Allocation"* %12, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %32, label %23

16:                                               ; preds = %16, %8
  %17 = phi i64 [ 0, %8 ], [ %20, %16 ]
  %18 = load %"class.std::__1::shared_ptr.95"*, %"class.std::__1::shared_ptr.95"** %10, align 8
  %19 = getelementptr inbounds %"class.std::__1::shared_ptr.95", %"class.std::__1::shared_ptr.95"* %18, i64 %17
  tail call void @_ZNSt3__110shared_ptrIN4marl5Event6SharedEED2Ev(%"class.std::__1::shared_ptr.95"* %19) #13
  %20 = add nuw i64 %17, 1
  %21 = load i64, i64* %5, align 8
  %22 = icmp ult i64 %20, %21
  br i1 %22, label %16, label %11

23:                                               ; preds = %11
  %24 = getelementptr inbounds %"struct.marl::Event::Shared", %"struct.marl::Event::Shared"* %4, i64 0, i32 2, i32 0
  %25 = load %"class.marl::Allocator"*, %"class.marl::Allocator"** %24, align 8
  %26 = bitcast %"class.marl::Allocator"* %25 to void (%"class.marl::Allocator"*, %"struct.marl::Allocation"*)***
  %27 = load void (%"class.marl::Allocator"*, %"struct.marl::Allocation"*)**, void (%"class.marl::Allocator"*, %"struct.marl::Allocation"*)*** %26, align 8
  %28 = getelementptr inbounds void (%"class.marl::Allocator"*, %"struct.marl::Allocation"*)*, void (%"class.marl::Allocator"*, %"struct.marl::Allocation"*)** %27, i64 3
  %29 = load void (%"class.marl::Allocator"*, %"struct.marl::Allocation"*)*, void (%"class.marl::Allocator"*, %"struct.marl::Allocation"*)** %28, align 8
  tail call void %29(%"class.marl::Allocator"* %25, %"struct.marl::Allocation"* dereferenceable(32) %12) #13
  %30 = getelementptr inbounds %"struct.marl::Event::Shared", %"struct.marl::Event::Shared"* %4, i64 0, i32 2, i32 4
  %31 = bitcast %"struct.marl::aligned_storage<16, 8>::type"** %30 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %31, i8 0, i64 34, i1 false) #10
  br label %32

32:                                               ; preds = %23, %11
  %33 = getelementptr inbounds %"struct.marl::Event::Shared", %"struct.marl::Event::Shared"* %4, i64 0, i32 1, i32 2
  tail call void @_ZNSt3__118condition_variableD1Ev(%"class.std::__1::condition_variable"* %33) #13
  %34 = getelementptr inbounds %"struct.marl::Event::Shared", %"struct.marl::Event::Shared"* %4, i64 0, i32 1, i32 1, i32 5
  br label %35

35:                                               ; preds = %35, %32
  %36 = phi %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"** [ %34, %32 ], [ %39, %35 ]
  %37 = load %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"*, %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"** %36, align 8
  %38 = icmp eq %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"* %37, null
  %39 = getelementptr inbounds %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry", %"struct.marl::containers::list<marl::Scheduler::Fiber *>::Entry"* %37, i64 0, i32 1
  br i1 %38, label %40, label %35

40:                                               ; preds = %35
  %41 = getelementptr inbounds %"struct.marl::Event::Shared", %"struct.marl::Event::Shared"* %4, i64 0, i32 1, i32 1, i32 3
  %42 = load %"struct.marl::containers::list<marl::Scheduler::Fiber *>::AllocationChain"*, %"struct.marl::containers::list<marl::Scheduler::Fiber *>::AllocationChain"** %41, align 8
  %43 = icmp eq %"struct.marl::containers::list<marl::Scheduler::Fiber *>::AllocationChain"* %42, null
  br i1 %43, label %57, label %44

44:                                               ; preds = %40
  %45 = getelementptr inbounds %"struct.marl::Event::Shared", %"struct.marl::Event::Shared"* %4, i64 0, i32 1, i32 1, i32 0
  br label %46

46:                                               ; preds = %46, %44
  %47 = phi %"struct.marl::containers::list<marl::Scheduler::Fiber *>::AllocationChain"* [ %42, %44 ], [ %49, %46 ]
  %48 = getelementptr inbounds %"struct.marl::containers::list<marl::Scheduler::Fiber *>::AllocationChain", %"struct.marl::containers::list<marl::Scheduler::Fiber *>::AllocationChain"* %47, i64 0, i32 1
  %49 = load %"struct.marl::containers::list<marl::Scheduler::Fiber *>::AllocationChain"*, %"struct.marl::containers::list<marl::Scheduler::Fiber *>::AllocationChain"** %48, align 8
  %50 = load %"class.marl::Allocator"*, %"class.marl::Allocator"** %45, align 8
  %51 = getelementptr inbounds %"struct.marl::containers::list<marl::Scheduler::Fiber *>::AllocationChain", %"struct.marl::containers::list<marl::Scheduler::Fiber *>::AllocationChain"* %47, i64 0, i32 0
  %52 = bitcast %"class.marl::Allocator"* %50 to void (%"class.marl::Allocator"*, %"struct.marl::Allocation"*)***
  %53 = load void (%"class.marl::Allocator"*, %"struct.marl::Allocation"*)**, void (%"class.marl::Allocator"*, %"struct.marl::Allocation"*)*** %52, align 8
  %54 = getelementptr inbounds void (%"class.marl::Allocator"*, %"struct.marl::Allocation"*)*, void (%"class.marl::Allocator"*, %"struct.marl::Allocation"*)** %53, i64 3
  %55 = load void (%"class.marl::Allocator"*, %"struct.marl::Allocation"*)*, void (%"class.marl::Allocator"*, %"struct.marl::Allocation"*)** %54, align 8
  tail call void %55(%"class.marl::Allocator"* %50, %"struct.marl::Allocation"* dereferenceable(32) %51) #13
  %56 = icmp eq %"struct.marl::containers::list<marl::Scheduler::Fiber *>::AllocationChain"* %49, null
  br i1 %56, label %57, label %46

57:                                               ; preds = %46, %40
  %58 = bitcast %"struct.marl::Allocation"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %58) #10
  %59 = getelementptr inbounds %"struct.marl::Allocation", %"struct.marl::Allocation"* %2, i64 0, i32 1, i32 0
  %60 = getelementptr inbounds %"struct.marl::Allocation", %"struct.marl::Allocation"* %2, i64 0, i32 1, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %58, i8 -86, i64 32, i1 false) #10
  %61 = getelementptr inbounds %"struct.marl::Allocation", %"struct.marl::Allocation"* %2, i64 0, i32 1, i32 2
  %62 = bitcast i8* %61 to i16*
  store i16 512, i16* %62, align 8
  %63 = bitcast %"struct.marl::Allocation"* %2 to %"struct.marl::Event::Shared"**
  store %"struct.marl::Event::Shared"* %4, %"struct.marl::Event::Shared"** %63, align 8
  %64 = getelementptr inbounds %"class.std::__1::__shared_ptr_pointer", %"class.std::__1::__shared_ptr_pointer"* %0, i64 0, i32 1, i32 0, i32 0, i32 1, i32 0, i32 1
  %65 = load i64, i64* %64, align 8
  %66 = mul i64 %65, 272
  store i64 %66, i64* %59, align 8
  store i64 8, i64* %60, align 8
  %67 = getelementptr inbounds %"class.std::__1::__shared_ptr_pointer", %"class.std::__1::__shared_ptr_pointer"* %0, i64 0, i32 1, i32 0, i32 0, i32 1, i32 0, i32 0
  %68 = load %"class.marl::Allocator"*, %"class.marl::Allocator"** %67, align 8
  %69 = bitcast %"class.marl::Allocator"* %68 to void (%"class.marl::Allocator"*, %"struct.marl::Allocation"*)***
  %70 = load void (%"class.marl::Allocator"*, %"struct.marl::Allocation"*)**, void (%"class.marl::Allocator"*, %"struct.marl::Allocation"*)*** %69, align 8
  %71 = getelementptr inbounds void (%"class.marl::Allocator"*, %"struct.marl::Allocation"*)*, void (%"class.marl::Allocator"*, %"struct.marl::Allocation"*)** %70, i64 3
  %72 = load void (%"class.marl::Allocator"*, %"struct.marl::Allocation"*)*, void (%"class.marl::Allocator"*, %"struct.marl::Allocation"*)** %71, align 8
  call void %72(%"class.marl::Allocator"* %68, %"struct.marl::Allocation"* nonnull dereferenceable(32) %2) #13
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %58) #10
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZNSt3__120__shared_ptr_pointerIPN4marl5Event6SharedENS1_9Allocator7DeleterENS_9allocatorIS3_EEE21__on_zero_shared_weakEv(%"class.std::__1::__shared_ptr_pointer"*) unnamed_addr #0 comdat align 2 {
  %2 = bitcast %"class.std::__1::__shared_ptr_pointer"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #14
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNSt3__15dequeIP12VkSubmitInfoNS_9allocatorIS2_EEE26__maybe_remove_front_spareEb(%"class.std::__1::deque.106"*, i1 zeroext) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::deque.106", %"class.std::__1::deque.106"* %0, i64 0, i32 0, i32 1
  %4 = load i64, i64* %3, align 8
  %5 = icmp ult i64 %4, 1024
  %6 = icmp ult i64 %4, 512
  %7 = or i1 %6, %1
  %8 = and i1 %5, %7
  br i1 %8, label %18, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.std::__1::deque.106", %"class.std::__1::deque.106"* %0, i64 0, i32 0, i32 0, i32 1
  %11 = bitcast %struct.VkSubmitInfo**** %10 to i8***
  %12 = load i8**, i8*** %11, align 8
  %13 = load i8*, i8** %12, align 8
  tail call void @_ZdlPv(i8* %13) #14
  %14 = load %struct.VkSubmitInfo***, %struct.VkSubmitInfo**** %10, align 8
  %15 = getelementptr inbounds %struct.VkSubmitInfo**, %struct.VkSubmitInfo*** %14, i64 1
  store %struct.VkSubmitInfo*** %15, %struct.VkSubmitInfo**** %10, align 8
  %16 = load i64, i64* %3, align 8
  %17 = add i64 %16, -512
  store i64 %17, i64* %3, align 8
  br label %18

18:                                               ; preds = %2, %9
  %19 = phi i1 [ true, %9 ], [ false, %2 ]
  ret i1 %19
}

attributes #0 = { nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind optsize readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn nounwind optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { inlinehint nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nofree optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noreturn optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { optsize }
attributes #12 = { noreturn nounwind optsize }
attributes #13 = { nounwind optsize }
attributes #14 = { builtin nounwind optsize }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
