; ModuleID = '../../skia/ext/convolver_SSE2.cc'
source_filename = "../../skia/ext/convolver_SSE2.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.skia::ConvolutionFilter1D" = type <{ %"class.std::__1::vector", %"class.std::__1::vector.1", i32, [4 x i8] }>
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.skia::ConvolutionFilter1D::FilterInstance"*, %"struct.skia::ConvolutionFilter1D::FilterInstance"*, %"class.std::__1::__compressed_pair" }
%"struct.skia::ConvolutionFilter1D::FilterInstance" = type { i32, i32, i32, i32 }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.skia::ConvolutionFilter1D::FilterInstance"* }
%"class.std::__1::vector.1" = type { %"class.std::__1::__vector_base.2" }
%"class.std::__1::__vector_base.2" = type { i16*, i16*, %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { i16* }

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4skia25ConvolveHorizontally_SSE2EPKhRKNS_19ConvolutionFilter1DEPhb(i8* nocapture readonly, %"class.skia::ConvolutionFilter1D"* nocapture readonly dereferenceable(56), i8* nocapture, i1 zeroext) local_unnamed_addr #0 {
  %5 = alloca [4 x <2 x i64>], align 16
  %6 = getelementptr inbounds %"class.skia::ConvolutionFilter1D", %"class.skia::ConvolutionFilter1D"* %1, i64 0, i32 0, i32 0, i32 1
  %7 = bitcast %"struct.skia::ConvolutionFilter1D::FilterInstance"** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = bitcast %"class.skia::ConvolutionFilter1D"* %1 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = sub i64 %8, %10
  %12 = lshr exact i64 %11, 4
  %13 = trunc i64 %12 to i32
  %14 = bitcast [4 x <2 x i64>]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %14) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 -86, i64 16, i1 false)
  %15 = getelementptr inbounds [4 x <2 x i64>], [4 x <2 x i64>]* %5, i64 0, i64 1
  store <2 x i64> <i64 65535, i64 0>, <2 x i64>* %15, align 16
  %16 = getelementptr inbounds [4 x <2 x i64>], [4 x <2 x i64>]* %5, i64 0, i64 2
  store <2 x i64> <i64 4294967295, i64 0>, <2 x i64>* %16, align 16
  %17 = getelementptr inbounds [4 x <2 x i64>], [4 x <2 x i64>]* %5, i64 0, i64 3
  store <2 x i64> <i64 281474976710655, i64 0>, <2 x i64>* %17, align 16
  %18 = icmp sgt i32 %13, 0
  br i1 %18, label %19, label %24

19:                                               ; preds = %4
  %20 = inttoptr i64 %10 to %"struct.skia::ConvolutionFilter1D::FilterInstance"*
  %21 = getelementptr inbounds %"class.skia::ConvolutionFilter1D", %"class.skia::ConvolutionFilter1D"* %1, i64 0, i32 0, i32 0, i32 0
  %22 = getelementptr inbounds %"class.skia::ConvolutionFilter1D", %"class.skia::ConvolutionFilter1D"* %1, i64 0, i32 1, i32 0, i32 0
  %23 = and i64 %12, 4294967295
  br label %25

24:                                               ; preds = %132, %4
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %14) #4
  ret void

25:                                               ; preds = %142, %19
  %26 = phi %"struct.skia::ConvolutionFilter1D::FilterInstance"* [ %20, %19 ], [ %144, %142 ]
  %27 = phi i64 [ 0, %19 ], [ %140, %142 ]
  %28 = phi i8* [ %2, %19 ], [ %143, %142 ]
  %29 = getelementptr inbounds %"struct.skia::ConvolutionFilter1D::FilterInstance", %"struct.skia::ConvolutionFilter1D::FilterInstance"* %26, i64 %27, i32 2
  %30 = load i32, i32* %29, align 4
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %132, label %32

32:                                               ; preds = %25
  %33 = getelementptr inbounds %"struct.skia::ConvolutionFilter1D::FilterInstance", %"struct.skia::ConvolutionFilter1D::FilterInstance"* %26, i64 %27, i32 1
  %34 = load i32, i32* %33, align 4
  %35 = getelementptr inbounds %"struct.skia::ConvolutionFilter1D::FilterInstance", %"struct.skia::ConvolutionFilter1D::FilterInstance"* %26, i64 %27, i32 0
  %36 = load i32, i32* %35, align 4
  %37 = sext i32 %36 to i64
  %38 = load i16*, i16** %22, align 8
  %39 = getelementptr inbounds i16, i16* %38, i64 %37
  %40 = shl i32 %34, 2
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i8, i8* %0, i64 %41
  %43 = bitcast i8* %42 to <2 x i64>*
  %44 = ashr i32 %30, 2
  %45 = icmp sgt i32 %30, 3
  br i1 %45, label %46, label %55

46:                                               ; preds = %32
  %47 = icmp sgt i32 %44, 1
  %48 = select i1 %47, i32 %44, i32 1
  %49 = add nsw i32 %48, -1
  %50 = zext i32 %49 to i64
  %51 = shl nuw nsw i64 %50, 2
  br label %61

52:                                               ; preds = %61
  %53 = getelementptr i16, i16* %39, i64 4
  %54 = getelementptr i16, i16* %53, i64 %51
  br label %55

55:                                               ; preds = %52, %32
  %56 = phi <2 x i64>* [ %43, %32 ], [ %96, %52 ]
  %57 = phi <4 x i32> [ zeroinitializer, %32 ], [ %95, %52 ]
  %58 = phi i16* [ %39, %32 ], [ %54, %52 ]
  %59 = and i32 %30, 3
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %132, label %100

61:                                               ; preds = %46, %61
  %62 = phi i16* [ %97, %61 ], [ %39, %46 ]
  %63 = phi <4 x i32> [ %95, %61 ], [ zeroinitializer, %46 ]
  %64 = phi <2 x i64>* [ %96, %61 ], [ %43, %46 ]
  %65 = phi i32 [ %98, %61 ], [ 0, %46 ]
  %66 = bitcast i16* %62 to i64*
  %67 = load i64, i64* %66, align 1
  %68 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %67, i32 0
  %69 = bitcast <2 x i64> %68 to <8 x i16>
  %70 = shufflevector <8 x i16> %69, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 undef, i32 undef, i32 undef, i32 undef>
  %71 = shufflevector <8 x i16> %70, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>
  %72 = bitcast <2 x i64>* %64 to <16 x i8>*
  %73 = load <16 x i8>, <16 x i8>* %72, align 1
  %74 = shufflevector <16 x i8> %73, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %75 = bitcast <16 x i8> %74 to <8 x i16>
  %76 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %75, <8 x i16> %71) #4
  %77 = mul <8 x i16> %71, %75
  %78 = shufflevector <8 x i16> %77, <8 x i16> %76, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %79 = bitcast <8 x i16> %78 to <4 x i32>
  %80 = add <4 x i32> %63, %79
  %81 = shufflevector <8 x i16> %77, <8 x i16> %76, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %82 = bitcast <8 x i16> %81 to <4 x i32>
  %83 = add <4 x i32> %80, %82
  %84 = shufflevector <8 x i16> %69, <8 x i16> undef, <8 x i32> <i32 2, i32 2, i32 3, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %85 = shufflevector <8 x i16> %84, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>
  %86 = shufflevector <16 x i8> %73, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %87 = bitcast <16 x i8> %86 to <8 x i16>
  %88 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %87, <8 x i16> %85) #4
  %89 = mul <8 x i16> %85, %87
  %90 = shufflevector <8 x i16> %89, <8 x i16> %88, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %91 = bitcast <8 x i16> %90 to <4 x i32>
  %92 = add <4 x i32> %83, %91
  %93 = shufflevector <8 x i16> %89, <8 x i16> %88, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %94 = bitcast <8 x i16> %93 to <4 x i32>
  %95 = add <4 x i32> %92, %94
  %96 = getelementptr inbounds <2 x i64>, <2 x i64>* %64, i64 1
  %97 = getelementptr inbounds i16, i16* %62, i64 4
  %98 = add nuw nsw i32 %65, 1
  %99 = icmp slt i32 %98, %44
  br i1 %99, label %61, label %52

100:                                              ; preds = %55
  %101 = bitcast i16* %58 to i64*
  %102 = load i64, i64* %101, align 1
  %103 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %102, i32 0
  %104 = zext i32 %59 to i64
  %105 = getelementptr inbounds [4 x <2 x i64>], [4 x <2 x i64>]* %5, i64 0, i64 %104
  %106 = load <2 x i64>, <2 x i64>* %105, align 16
  %107 = and <2 x i64> %106, %103
  %108 = bitcast <2 x i64> %107 to <8 x i16>
  %109 = shufflevector <8 x i16> %108, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 undef, i32 undef, i32 undef, i32 undef>
  %110 = shufflevector <8 x i16> %109, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>
  %111 = bitcast <2 x i64>* %56 to <16 x i8>*
  %112 = load <16 x i8>, <16 x i8>* %111, align 1
  %113 = shufflevector <16 x i8> %112, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %114 = bitcast <16 x i8> %113 to <8 x i16>
  %115 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %114, <8 x i16> %110) #4
  %116 = mul <8 x i16> %110, %114
  %117 = shufflevector <8 x i16> %116, <8 x i16> %115, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %118 = bitcast <8 x i16> %117 to <4 x i32>
  %119 = add <4 x i32> %57, %118
  %120 = shufflevector <8 x i16> %116, <8 x i16> %115, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %121 = bitcast <8 x i16> %120 to <4 x i32>
  %122 = add <4 x i32> %119, %121
  %123 = shufflevector <16 x i8> %112, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %124 = shufflevector <8 x i16> %108, <8 x i16> undef, <8 x i32> <i32 2, i32 2, i32 3, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %125 = shufflevector <8 x i16> %124, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>
  %126 = bitcast <16 x i8> %123 to <8 x i16>
  %127 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %126, <8 x i16> %125) #4
  %128 = mul <8 x i16> %125, %126
  %129 = shufflevector <8 x i16> %128, <8 x i16> %127, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %130 = bitcast <8 x i16> %129 to <4 x i32>
  %131 = add <4 x i32> %122, %130
  br label %132

132:                                              ; preds = %25, %55, %100
  %133 = phi <4 x i32> [ %131, %100 ], [ %57, %55 ], [ zeroinitializer, %25 ]
  %134 = ashr <4 x i32> %133, <i32 14, i32 14, i32 14, i32 14>
  %135 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %134, <4 x i32> undef) #4
  %136 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %135, <8 x i16> undef) #4
  %137 = bitcast <16 x i8> %136 to <4 x i32>
  %138 = extractelement <4 x i32> %137, i32 0
  %139 = bitcast i8* %28 to i32*
  store i32 %138, i32* %139, align 4
  %140 = add nuw nsw i64 %27, 1
  %141 = icmp eq i64 %140, %23
  br i1 %141, label %24, label %142

142:                                              ; preds = %132
  %143 = getelementptr inbounds i8, i8* %28, i64 4
  %144 = load %"struct.skia::ConvolutionFilter1D::FilterInstance"*, %"struct.skia::ConvolutionFilter1D::FilterInstance"** %21, align 8
  br label %25
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4skia30Convolve4RowsHorizontally_SSE2EPPKhRKNS_19ConvolutionFilter1DEPPh(i8** nocapture readonly, %"class.skia::ConvolutionFilter1D"* nocapture readonly dereferenceable(56), i8** nocapture) local_unnamed_addr #0 {
  %4 = alloca [4 x <2 x i64>], align 16
  %5 = getelementptr inbounds %"class.skia::ConvolutionFilter1D", %"class.skia::ConvolutionFilter1D"* %1, i64 0, i32 0, i32 0, i32 1
  %6 = bitcast %"struct.skia::ConvolutionFilter1D::FilterInstance"** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = bitcast %"class.skia::ConvolutionFilter1D"* %1 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %7, %9
  %11 = lshr exact i64 %10, 4
  %12 = trunc i64 %11 to i32
  %13 = bitcast [4 x <2 x i64>]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %13) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 16, i1 false)
  %14 = getelementptr inbounds [4 x <2 x i64>], [4 x <2 x i64>]* %4, i64 0, i64 1
  store <2 x i64> <i64 65535, i64 0>, <2 x i64>* %14, align 16
  %15 = getelementptr inbounds [4 x <2 x i64>], [4 x <2 x i64>]* %4, i64 0, i64 2
  store <2 x i64> <i64 4294967295, i64 0>, <2 x i64>* %15, align 16
  %16 = getelementptr inbounds [4 x <2 x i64>], [4 x <2 x i64>]* %4, i64 0, i64 3
  store <2 x i64> <i64 281474976710655, i64 0>, <2 x i64>* %16, align 16
  %17 = icmp sgt i32 %12, 0
  br i1 %17, label %18, label %37

18:                                               ; preds = %3
  %19 = inttoptr i64 %9 to %"struct.skia::ConvolutionFilter1D::FilterInstance"*
  %20 = getelementptr inbounds %"class.skia::ConvolutionFilter1D", %"class.skia::ConvolutionFilter1D"* %1, i64 0, i32 0, i32 0, i32 0
  %21 = getelementptr inbounds %"class.skia::ConvolutionFilter1D", %"class.skia::ConvolutionFilter1D"* %1, i64 0, i32 1, i32 0, i32 0
  %22 = getelementptr inbounds i8*, i8** %0, i64 1
  %23 = getelementptr inbounds i8*, i8** %0, i64 2
  %24 = getelementptr inbounds i8*, i8** %0, i64 3
  %25 = bitcast i8** %2 to i32**
  %26 = getelementptr inbounds i8*, i8** %2, i64 1
  %27 = bitcast i8** %26 to i32**
  %28 = getelementptr inbounds i8*, i8** %2, i64 2
  %29 = bitcast i8** %28 to i32**
  %30 = getelementptr inbounds i8*, i8** %2, i64 3
  %31 = bitcast i8** %30 to i32**
  %32 = and i64 %11, 4294967295
  %33 = bitcast i8** %2 to <2 x i8*>*
  %34 = bitcast i8** %2 to <2 x i8*>*
  %35 = bitcast i8** %28 to <2 x i8*>*
  %36 = bitcast i8** %28 to <2 x i8*>*
  br label %38

37:                                               ; preds = %294, %3
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %13) #4
  ret void

38:                                               ; preds = %329, %18
  %39 = phi %"struct.skia::ConvolutionFilter1D::FilterInstance"* [ %19, %18 ], [ %330, %329 ]
  %40 = phi i64 [ 0, %18 ], [ %327, %329 ]
  %41 = getelementptr inbounds %"struct.skia::ConvolutionFilter1D::FilterInstance", %"struct.skia::ConvolutionFilter1D::FilterInstance"* %39, i64 %40, i32 2
  %42 = load i32, i32* %41, align 4
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %294, label %44

44:                                               ; preds = %38
  %45 = getelementptr inbounds %"struct.skia::ConvolutionFilter1D::FilterInstance", %"struct.skia::ConvolutionFilter1D::FilterInstance"* %39, i64 %40, i32 1
  %46 = load i32, i32* %45, align 4
  %47 = getelementptr inbounds %"struct.skia::ConvolutionFilter1D::FilterInstance", %"struct.skia::ConvolutionFilter1D::FilterInstance"* %39, i64 %40, i32 0
  %48 = load i32, i32* %47, align 4
  %49 = sext i32 %48 to i64
  %50 = load i16*, i16** %21, align 8
  %51 = getelementptr inbounds i16, i16* %50, i64 %49
  %52 = shl i32 %46, 2
  %53 = ashr i32 %42, 2
  %54 = icmp sgt i32 %42, 3
  br i1 %54, label %55, label %63

55:                                               ; preds = %44
  %56 = load i8*, i8** %0, align 8
  %57 = load i8*, i8** %22, align 8
  %58 = load i8*, i8** %23, align 8
  %59 = load i8*, i8** %24, align 8
  %60 = sext i32 %52 to i64
  br label %72

61:                                               ; preds = %72
  %62 = trunc i64 %180 to i32
  br label %63

63:                                               ; preds = %61, %44
  %64 = phi i32 [ %52, %44 ], [ %62, %61 ]
  %65 = phi <4 x i32> [ zeroinitializer, %44 ], [ %179, %61 ]
  %66 = phi <4 x i32> [ zeroinitializer, %44 ], [ %156, %61 ]
  %67 = phi <4 x i32> [ zeroinitializer, %44 ], [ %133, %61 ]
  %68 = phi <4 x i32> [ zeroinitializer, %44 ], [ %110, %61 ]
  %69 = phi i16* [ %51, %44 ], [ %181, %61 ]
  %70 = and i32 %42, 3
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %294, label %184

72:                                               ; preds = %55, %72
  %73 = phi i64 [ %60, %55 ], [ %180, %72 ]
  %74 = phi i16* [ %51, %55 ], [ %181, %72 ]
  %75 = phi <4 x i32> [ zeroinitializer, %55 ], [ %110, %72 ]
  %76 = phi <4 x i32> [ zeroinitializer, %55 ], [ %133, %72 ]
  %77 = phi <4 x i32> [ zeroinitializer, %55 ], [ %156, %72 ]
  %78 = phi <4 x i32> [ zeroinitializer, %55 ], [ %179, %72 ]
  %79 = phi i32 [ 0, %55 ], [ %182, %72 ]
  %80 = bitcast i16* %74 to i64*
  %81 = load i64, i64* %80, align 1
  %82 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %81, i32 0
  %83 = bitcast <2 x i64> %82 to <8 x i16>
  %84 = shufflevector <8 x i16> %83, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 undef, i32 undef, i32 undef, i32 undef>
  %85 = shufflevector <8 x i16> %84, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>
  %86 = shufflevector <8 x i16> %83, <8 x i16> undef, <8 x i32> <i32 2, i32 2, i32 3, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %87 = shufflevector <8 x i16> %86, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>
  %88 = getelementptr inbounds i8, i8* %56, i64 %73
  %89 = bitcast i8* %88 to <16 x i8>*
  %90 = load <16 x i8>, <16 x i8>* %89, align 1
  %91 = shufflevector <16 x i8> %90, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %92 = bitcast <16 x i8> %91 to <8 x i16>
  %93 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %92, <8 x i16> %85) #4
  %94 = mul <8 x i16> %85, %92
  %95 = shufflevector <8 x i16> %94, <8 x i16> %93, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %96 = bitcast <8 x i16> %95 to <4 x i32>
  %97 = add <4 x i32> %75, %96
  %98 = shufflevector <8 x i16> %94, <8 x i16> %93, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %99 = bitcast <8 x i16> %98 to <4 x i32>
  %100 = add <4 x i32> %97, %99
  %101 = shufflevector <16 x i8> %90, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %102 = bitcast <16 x i8> %101 to <8 x i16>
  %103 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %102, <8 x i16> %87) #4
  %104 = mul <8 x i16> %87, %102
  %105 = shufflevector <8 x i16> %104, <8 x i16> %103, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %106 = bitcast <8 x i16> %105 to <4 x i32>
  %107 = add <4 x i32> %100, %106
  %108 = shufflevector <8 x i16> %104, <8 x i16> %103, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %109 = bitcast <8 x i16> %108 to <4 x i32>
  %110 = add <4 x i32> %107, %109
  %111 = getelementptr inbounds i8, i8* %57, i64 %73
  %112 = bitcast i8* %111 to <16 x i8>*
  %113 = load <16 x i8>, <16 x i8>* %112, align 1
  %114 = shufflevector <16 x i8> %113, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %115 = bitcast <16 x i8> %114 to <8 x i16>
  %116 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %115, <8 x i16> %85) #4
  %117 = mul <8 x i16> %85, %115
  %118 = shufflevector <8 x i16> %117, <8 x i16> %116, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %119 = bitcast <8 x i16> %118 to <4 x i32>
  %120 = add <4 x i32> %76, %119
  %121 = shufflevector <8 x i16> %117, <8 x i16> %116, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %122 = bitcast <8 x i16> %121 to <4 x i32>
  %123 = add <4 x i32> %120, %122
  %124 = shufflevector <16 x i8> %113, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %125 = bitcast <16 x i8> %124 to <8 x i16>
  %126 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %125, <8 x i16> %87) #4
  %127 = mul <8 x i16> %87, %125
  %128 = shufflevector <8 x i16> %127, <8 x i16> %126, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %129 = bitcast <8 x i16> %128 to <4 x i32>
  %130 = add <4 x i32> %123, %129
  %131 = shufflevector <8 x i16> %127, <8 x i16> %126, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %132 = bitcast <8 x i16> %131 to <4 x i32>
  %133 = add <4 x i32> %130, %132
  %134 = getelementptr inbounds i8, i8* %58, i64 %73
  %135 = bitcast i8* %134 to <16 x i8>*
  %136 = load <16 x i8>, <16 x i8>* %135, align 1
  %137 = shufflevector <16 x i8> %136, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %138 = bitcast <16 x i8> %137 to <8 x i16>
  %139 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %138, <8 x i16> %85) #4
  %140 = mul <8 x i16> %85, %138
  %141 = shufflevector <8 x i16> %140, <8 x i16> %139, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %142 = bitcast <8 x i16> %141 to <4 x i32>
  %143 = add <4 x i32> %77, %142
  %144 = shufflevector <8 x i16> %140, <8 x i16> %139, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %145 = bitcast <8 x i16> %144 to <4 x i32>
  %146 = add <4 x i32> %143, %145
  %147 = shufflevector <16 x i8> %136, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %148 = bitcast <16 x i8> %147 to <8 x i16>
  %149 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %148, <8 x i16> %87) #4
  %150 = mul <8 x i16> %87, %148
  %151 = shufflevector <8 x i16> %150, <8 x i16> %149, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %152 = bitcast <8 x i16> %151 to <4 x i32>
  %153 = add <4 x i32> %146, %152
  %154 = shufflevector <8 x i16> %150, <8 x i16> %149, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %155 = bitcast <8 x i16> %154 to <4 x i32>
  %156 = add <4 x i32> %153, %155
  %157 = getelementptr inbounds i8, i8* %59, i64 %73
  %158 = bitcast i8* %157 to <16 x i8>*
  %159 = load <16 x i8>, <16 x i8>* %158, align 1
  %160 = shufflevector <16 x i8> %159, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %161 = bitcast <16 x i8> %160 to <8 x i16>
  %162 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %161, <8 x i16> %85) #4
  %163 = mul <8 x i16> %85, %161
  %164 = shufflevector <8 x i16> %163, <8 x i16> %162, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %165 = bitcast <8 x i16> %164 to <4 x i32>
  %166 = add <4 x i32> %78, %165
  %167 = shufflevector <8 x i16> %163, <8 x i16> %162, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %168 = bitcast <8 x i16> %167 to <4 x i32>
  %169 = add <4 x i32> %166, %168
  %170 = shufflevector <16 x i8> %159, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %171 = bitcast <16 x i8> %170 to <8 x i16>
  %172 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %171, <8 x i16> %87) #4
  %173 = mul <8 x i16> %87, %171
  %174 = shufflevector <8 x i16> %173, <8 x i16> %172, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %175 = bitcast <8 x i16> %174 to <4 x i32>
  %176 = add <4 x i32> %169, %175
  %177 = shufflevector <8 x i16> %173, <8 x i16> %172, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %178 = bitcast <8 x i16> %177 to <4 x i32>
  %179 = add <4 x i32> %176, %178
  %180 = add nsw i64 %73, 16
  %181 = getelementptr inbounds i16, i16* %74, i64 4
  %182 = add nuw nsw i32 %79, 1
  %183 = icmp slt i32 %182, %53
  br i1 %183, label %72, label %61

184:                                              ; preds = %63
  %185 = bitcast i16* %69 to i64*
  %186 = load i64, i64* %185, align 1
  %187 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %186, i32 0
  %188 = zext i32 %70 to i64
  %189 = getelementptr inbounds [4 x <2 x i64>], [4 x <2 x i64>]* %4, i64 0, i64 %188
  %190 = load <2 x i64>, <2 x i64>* %189, align 16
  %191 = and <2 x i64> %190, %187
  %192 = bitcast <2 x i64> %191 to <8 x i16>
  %193 = shufflevector <8 x i16> %192, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 undef, i32 undef, i32 undef, i32 undef>
  %194 = shufflevector <8 x i16> %193, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>
  %195 = shufflevector <8 x i16> %192, <8 x i16> undef, <8 x i32> <i32 2, i32 2, i32 3, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %196 = shufflevector <8 x i16> %195, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>
  %197 = load i8*, i8** %0, align 8
  %198 = sext i32 %64 to i64
  %199 = getelementptr inbounds i8, i8* %197, i64 %198
  %200 = bitcast i8* %199 to <16 x i8>*
  %201 = load <16 x i8>, <16 x i8>* %200, align 1
  %202 = shufflevector <16 x i8> %201, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %203 = bitcast <16 x i8> %202 to <8 x i16>
  %204 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %203, <8 x i16> %194) #4
  %205 = mul <8 x i16> %194, %203
  %206 = shufflevector <8 x i16> %205, <8 x i16> %204, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %207 = bitcast <8 x i16> %206 to <4 x i32>
  %208 = add <4 x i32> %68, %207
  %209 = shufflevector <8 x i16> %205, <8 x i16> %204, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %210 = bitcast <8 x i16> %209 to <4 x i32>
  %211 = add <4 x i32> %208, %210
  %212 = shufflevector <16 x i8> %201, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %213 = bitcast <16 x i8> %212 to <8 x i16>
  %214 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %213, <8 x i16> %196) #4
  %215 = mul <8 x i16> %196, %213
  %216 = shufflevector <8 x i16> %215, <8 x i16> %214, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %217 = bitcast <8 x i16> %216 to <4 x i32>
  %218 = add <4 x i32> %211, %217
  %219 = shufflevector <8 x i16> %215, <8 x i16> %214, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %220 = bitcast <8 x i16> %219 to <4 x i32>
  %221 = add <4 x i32> %218, %220
  %222 = load i8*, i8** %22, align 8
  %223 = getelementptr inbounds i8, i8* %222, i64 %198
  %224 = bitcast i8* %223 to <16 x i8>*
  %225 = load <16 x i8>, <16 x i8>* %224, align 1
  %226 = shufflevector <16 x i8> %225, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %227 = bitcast <16 x i8> %226 to <8 x i16>
  %228 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %227, <8 x i16> %194) #4
  %229 = mul <8 x i16> %194, %227
  %230 = shufflevector <8 x i16> %229, <8 x i16> %228, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %231 = bitcast <8 x i16> %230 to <4 x i32>
  %232 = add <4 x i32> %67, %231
  %233 = shufflevector <8 x i16> %229, <8 x i16> %228, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %234 = bitcast <8 x i16> %233 to <4 x i32>
  %235 = add <4 x i32> %232, %234
  %236 = shufflevector <16 x i8> %225, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %237 = bitcast <16 x i8> %236 to <8 x i16>
  %238 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %237, <8 x i16> %196) #4
  %239 = mul <8 x i16> %196, %237
  %240 = shufflevector <8 x i16> %239, <8 x i16> %238, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %241 = bitcast <8 x i16> %240 to <4 x i32>
  %242 = add <4 x i32> %235, %241
  %243 = shufflevector <8 x i16> %239, <8 x i16> %238, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %244 = bitcast <8 x i16> %243 to <4 x i32>
  %245 = add <4 x i32> %242, %244
  %246 = load i8*, i8** %23, align 8
  %247 = getelementptr inbounds i8, i8* %246, i64 %198
  %248 = bitcast i8* %247 to <16 x i8>*
  %249 = load <16 x i8>, <16 x i8>* %248, align 1
  %250 = shufflevector <16 x i8> %249, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %251 = bitcast <16 x i8> %250 to <8 x i16>
  %252 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %251, <8 x i16> %194) #4
  %253 = mul <8 x i16> %194, %251
  %254 = shufflevector <8 x i16> %253, <8 x i16> %252, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %255 = bitcast <8 x i16> %254 to <4 x i32>
  %256 = add <4 x i32> %66, %255
  %257 = shufflevector <8 x i16> %253, <8 x i16> %252, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %258 = bitcast <8 x i16> %257 to <4 x i32>
  %259 = add <4 x i32> %256, %258
  %260 = shufflevector <16 x i8> %249, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %261 = bitcast <16 x i8> %260 to <8 x i16>
  %262 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %261, <8 x i16> %196) #4
  %263 = mul <8 x i16> %196, %261
  %264 = shufflevector <8 x i16> %263, <8 x i16> %262, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %265 = bitcast <8 x i16> %264 to <4 x i32>
  %266 = add <4 x i32> %259, %265
  %267 = shufflevector <8 x i16> %263, <8 x i16> %262, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %268 = bitcast <8 x i16> %267 to <4 x i32>
  %269 = add <4 x i32> %266, %268
  %270 = load i8*, i8** %24, align 8
  %271 = getelementptr inbounds i8, i8* %270, i64 %198
  %272 = bitcast i8* %271 to <16 x i8>*
  %273 = load <16 x i8>, <16 x i8>* %272, align 1
  %274 = shufflevector <16 x i8> %273, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %275 = bitcast <16 x i8> %274 to <8 x i16>
  %276 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %275, <8 x i16> %194) #4
  %277 = mul <8 x i16> %194, %275
  %278 = shufflevector <8 x i16> %277, <8 x i16> %276, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %279 = bitcast <8 x i16> %278 to <4 x i32>
  %280 = add <4 x i32> %65, %279
  %281 = shufflevector <8 x i16> %277, <8 x i16> %276, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %282 = bitcast <8 x i16> %281 to <4 x i32>
  %283 = add <4 x i32> %280, %282
  %284 = shufflevector <16 x i8> %273, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %285 = bitcast <16 x i8> %284 to <8 x i16>
  %286 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %285, <8 x i16> %196) #4
  %287 = mul <8 x i16> %196, %285
  %288 = shufflevector <8 x i16> %287, <8 x i16> %286, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %289 = bitcast <8 x i16> %288 to <4 x i32>
  %290 = add <4 x i32> %283, %289
  %291 = shufflevector <8 x i16> %287, <8 x i16> %286, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %292 = bitcast <8 x i16> %291 to <4 x i32>
  %293 = add <4 x i32> %290, %292
  br label %294

294:                                              ; preds = %38, %63, %184
  %295 = phi <4 x i32> [ %293, %184 ], [ %65, %63 ], [ zeroinitializer, %38 ]
  %296 = phi <4 x i32> [ %269, %184 ], [ %66, %63 ], [ zeroinitializer, %38 ]
  %297 = phi <4 x i32> [ %245, %184 ], [ %67, %63 ], [ zeroinitializer, %38 ]
  %298 = phi <4 x i32> [ %221, %184 ], [ %68, %63 ], [ zeroinitializer, %38 ]
  %299 = ashr <4 x i32> %298, <i32 14, i32 14, i32 14, i32 14>
  %300 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %299, <4 x i32> undef) #4
  %301 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %300, <8 x i16> undef) #4
  %302 = ashr <4 x i32> %297, <i32 14, i32 14, i32 14, i32 14>
  %303 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %302, <4 x i32> undef) #4
  %304 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %303, <8 x i16> undef) #4
  %305 = ashr <4 x i32> %296, <i32 14, i32 14, i32 14, i32 14>
  %306 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %305, <4 x i32> undef) #4
  %307 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %306, <8 x i16> undef) #4
  %308 = ashr <4 x i32> %295, <i32 14, i32 14, i32 14, i32 14>
  %309 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %308, <4 x i32> undef) #4
  %310 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %309, <8 x i16> undef) #4
  %311 = bitcast <16 x i8> %301 to <4 x i32>
  %312 = extractelement <4 x i32> %311, i32 0
  %313 = load i32*, i32** %25, align 8
  store i32 %312, i32* %313, align 4
  %314 = bitcast <16 x i8> %304 to <4 x i32>
  %315 = extractelement <4 x i32> %314, i32 0
  %316 = load i32*, i32** %27, align 8
  store i32 %315, i32* %316, align 4
  %317 = bitcast <16 x i8> %307 to <4 x i32>
  %318 = extractelement <4 x i32> %317, i32 0
  %319 = load i32*, i32** %29, align 8
  store i32 %318, i32* %319, align 4
  %320 = bitcast <16 x i8> %310 to <4 x i32>
  %321 = extractelement <4 x i32> %320, i32 0
  %322 = load i32*, i32** %31, align 8
  store i32 %321, i32* %322, align 4
  %323 = load <2 x i8*>, <2 x i8*>* %33, align 8
  %324 = getelementptr i8, <2 x i8*> %323, <2 x i64> <i64 4, i64 4>
  store <2 x i8*> %324, <2 x i8*>* %34, align 8
  %325 = load <2 x i8*>, <2 x i8*>* %35, align 8
  %326 = getelementptr i8, <2 x i8*> %325, <2 x i64> <i64 4, i64 4>
  store <2 x i8*> %326, <2 x i8*>* %36, align 8
  %327 = add nuw nsw i64 %40, 1
  %328 = icmp eq i64 %327, %32
  br i1 %328, label %37, label %329

329:                                              ; preds = %294
  %330 = load %"struct.skia::ConvolutionFilter1D::FilterInstance"*, %"struct.skia::ConvolutionFilter1D::FilterInstance"** %20, align 8
  br label %38
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @_ZN4skia23ConvolveVertically_SSE2EPKsiPKPhiS2_b(i16* nocapture readonly, i32, i8** nocapture readonly, i32, i8* nocapture, i1 zeroext) local_unnamed_addr #2 {
  %7 = and i32 %3, -4
  %8 = icmp sgt i32 %7, 0
  br i1 %5, label %9, label %206

9:                                                ; preds = %6
  br i1 %8, label %10, label %21

10:                                               ; preds = %9
  %11 = icmp sgt i32 %1, 0
  %12 = sext i32 %7 to i64
  %13 = zext i32 %1 to i64
  br label %14

14:                                               ; preds = %31, %10
  %15 = phi i64 [ 0, %10 ], [ %59, %31 ]
  %16 = phi i8* [ %4, %10 ], [ %58, %31 ]
  br i1 %11, label %17, label %31

17:                                               ; preds = %14
  %18 = trunc i64 %15 to i32
  %19 = shl i32 %18, 2
  %20 = sext i32 %19 to i64
  br label %61

21:                                               ; preds = %31, %9
  %22 = phi i8* [ %4, %9 ], [ %58, %31 ]
  %23 = and i32 %3, 3
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %367, label %25

25:                                               ; preds = %21
  %26 = icmp sgt i32 %1, 0
  br i1 %26, label %27, label %102

27:                                               ; preds = %25
  %28 = shl i32 %7, 2
  %29 = sext i32 %28 to i64
  %30 = zext i32 %1 to i64
  br label %147

31:                                               ; preds = %61, %14
  %32 = phi <4 x i32> [ zeroinitializer, %14 ], [ %95, %61 ]
  %33 = phi <4 x i32> [ zeroinitializer, %14 ], [ %92, %61 ]
  %34 = phi <4 x i32> [ zeroinitializer, %14 ], [ %85, %61 ]
  %35 = phi <4 x i32> [ zeroinitializer, %14 ], [ %82, %61 ]
  %36 = ashr <4 x i32> %35, <i32 14, i32 14, i32 14, i32 14>
  %37 = ashr <4 x i32> %34, <i32 14, i32 14, i32 14, i32 14>
  %38 = ashr <4 x i32> %33, <i32 14, i32 14, i32 14, i32 14>
  %39 = ashr <4 x i32> %32, <i32 14, i32 14, i32 14, i32 14>
  %40 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %36, <4 x i32> %37) #4
  %41 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %38, <4 x i32> %39) #4
  %42 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %40, <8 x i16> %41) #4
  %43 = bitcast <16 x i8> %42 to <4 x i32>
  %44 = lshr <4 x i32> %43, <i32 8, i32 8, i32 8, i32 8>
  %45 = bitcast <4 x i32> %44 to <16 x i8>
  %46 = icmp ult <16 x i8> %42, %45
  %47 = select <16 x i1> %46, <16 x i8> %45, <16 x i8> %42
  %48 = lshr <4 x i32> %43, <i32 16, i32 16, i32 16, i32 16>
  %49 = bitcast <4 x i32> %48 to <16 x i8>
  %50 = icmp ult <16 x i8> %47, %49
  %51 = select <16 x i1> %50, <16 x i8> %49, <16 x i8> %47
  %52 = bitcast <16 x i8> %51 to <4 x i32>
  %53 = shl <4 x i32> %52, <i32 24, i32 24, i32 24, i32 24>
  %54 = bitcast <4 x i32> %53 to <16 x i8>
  %55 = icmp ult <16 x i8> %42, %54
  %56 = select <16 x i1> %55, <16 x i8> %54, <16 x i8> %42
  %57 = bitcast i8* %16 to <16 x i8>*
  store <16 x i8> %56, <16 x i8>* %57, align 1
  %58 = getelementptr inbounds i8, i8* %16, i64 16
  %59 = add nuw nsw i64 %15, 4
  %60 = icmp slt i64 %59, %12
  br i1 %60, label %14, label %21

61:                                               ; preds = %61, %17
  %62 = phi i64 [ 0, %17 ], [ %96, %61 ]
  %63 = phi <4 x i32> [ zeroinitializer, %17 ], [ %82, %61 ]
  %64 = phi <4 x i32> [ zeroinitializer, %17 ], [ %85, %61 ]
  %65 = phi <4 x i32> [ zeroinitializer, %17 ], [ %92, %61 ]
  %66 = phi <4 x i32> [ zeroinitializer, %17 ], [ %95, %61 ]
  %67 = getelementptr inbounds i16, i16* %0, i64 %62
  %68 = load i16, i16* %67, align 2
  %69 = insertelement <8 x i16> undef, i16 %68, i32 0
  %70 = shufflevector <8 x i16> %69, <8 x i16> undef, <8 x i32> zeroinitializer
  %71 = getelementptr inbounds i8*, i8** %2, i64 %62
  %72 = load i8*, i8** %71, align 8
  %73 = getelementptr inbounds i8, i8* %72, i64 %20
  %74 = bitcast i8* %73 to <16 x i8>*
  %75 = load <16 x i8>, <16 x i8>* %74, align 1
  %76 = shufflevector <16 x i8> %75, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %77 = bitcast <16 x i8> %76 to <8 x i16>
  %78 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %77, <8 x i16> %70) #4
  %79 = mul <8 x i16> %70, %77
  %80 = shufflevector <8 x i16> %79, <8 x i16> %78, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %81 = bitcast <8 x i16> %80 to <4 x i32>
  %82 = add <4 x i32> %63, %81
  %83 = shufflevector <8 x i16> %79, <8 x i16> %78, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %84 = bitcast <8 x i16> %83 to <4 x i32>
  %85 = add <4 x i32> %64, %84
  %86 = shufflevector <16 x i8> %75, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %87 = bitcast <16 x i8> %86 to <8 x i16>
  %88 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %87, <8 x i16> %70) #4
  %89 = mul <8 x i16> %70, %87
  %90 = shufflevector <8 x i16> %89, <8 x i16> %88, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %91 = bitcast <8 x i16> %90 to <4 x i32>
  %92 = add <4 x i32> %65, %91
  %93 = shufflevector <8 x i16> %89, <8 x i16> %88, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %94 = bitcast <8 x i16> %93 to <4 x i32>
  %95 = add <4 x i32> %66, %94
  %96 = add nuw nsw i64 %62, 1
  %97 = icmp eq i64 %96, %13
  br i1 %97, label %31, label %61

98:                                               ; preds = %147
  %99 = ashr <4 x i32> %167, <i32 14, i32 14, i32 14, i32 14>
  %100 = ashr <4 x i32> %170, <i32 14, i32 14, i32 14, i32 14>
  %101 = ashr <4 x i32> %177, <i32 14, i32 14, i32 14, i32 14>
  br label %102

102:                                              ; preds = %98, %25
  %103 = phi <4 x i32> [ zeroinitializer, %25 ], [ %101, %98 ]
  %104 = phi <4 x i32> [ zeroinitializer, %25 ], [ %100, %98 ]
  %105 = phi <4 x i32> [ zeroinitializer, %25 ], [ %99, %98 ]
  %106 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %105, <4 x i32> %104) #4
  %107 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %103, <4 x i32> zeroinitializer) #4
  %108 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %106, <8 x i16> %107) #4
  %109 = bitcast <16 x i8> %108 to <4 x i32>
  %110 = lshr <4 x i32> %109, <i32 8, i32 8, i32 8, i32 8>
  %111 = bitcast <4 x i32> %110 to <16 x i8>
  %112 = icmp ult <16 x i8> %108, %111
  %113 = select <16 x i1> %112, <16 x i8> %111, <16 x i8> %108
  %114 = lshr <4 x i32> %109, <i32 16, i32 16, i32 16, i32 16>
  %115 = bitcast <4 x i32> %114 to <16 x i8>
  %116 = icmp ult <16 x i8> %113, %115
  %117 = select <16 x i1> %116, <16 x i8> %115, <16 x i8> %113
  %118 = bitcast <16 x i8> %117 to <4 x i32>
  %119 = shl <4 x i32> %118, <i32 24, i32 24, i32 24, i32 24>
  %120 = bitcast <4 x i32> %119 to <16 x i8>
  %121 = icmp slt i32 %7, %3
  br i1 %121, label %122, label %367

122:                                              ; preds = %102
  %123 = icmp ult <16 x i8> %108, %120
  %124 = select <16 x i1> %123, <16 x i8> %120, <16 x i8> %108
  %125 = xor i32 %7, -1
  %126 = add i32 %125, %3
  %127 = and i32 %3, 3
  %128 = icmp eq i32 %127, 0
  br i1 %128, label %142, label %129

129:                                              ; preds = %122, %129
  %130 = phi i32 [ %139, %129 ], [ %7, %122 ]
  %131 = phi i8* [ %138, %129 ], [ %22, %122 ]
  %132 = phi <16 x i8> [ %137, %129 ], [ %124, %122 ]
  %133 = phi i32 [ %140, %129 ], [ %127, %122 ]
  %134 = bitcast <16 x i8> %132 to <4 x i32>
  %135 = extractelement <4 x i32> %134, i32 0
  %136 = bitcast i8* %131 to i32*
  store i32 %135, i32* %136, align 4
  %137 = shufflevector <16 x i8> %132, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %138 = getelementptr inbounds i8, i8* %131, i64 4
  %139 = add nsw i32 %130, 1
  %140 = add i32 %133, -1
  %141 = icmp eq i32 %140, 0
  br i1 %141, label %142, label %129, !llvm.loop !2

142:                                              ; preds = %129, %122
  %143 = phi i32 [ %7, %122 ], [ %139, %129 ]
  %144 = phi i8* [ %22, %122 ], [ %138, %129 ]
  %145 = phi <16 x i8> [ %124, %122 ], [ %137, %129 ]
  %146 = icmp ult i32 %126, 3
  br i1 %146, label %367, label %180

147:                                              ; preds = %147, %27
  %148 = phi i64 [ 0, %27 ], [ %178, %147 ]
  %149 = phi <4 x i32> [ zeroinitializer, %27 ], [ %167, %147 ]
  %150 = phi <4 x i32> [ zeroinitializer, %27 ], [ %170, %147 ]
  %151 = phi <4 x i32> [ zeroinitializer, %27 ], [ %177, %147 ]
  %152 = getelementptr inbounds i16, i16* %0, i64 %148
  %153 = load i16, i16* %152, align 2
  %154 = insertelement <8 x i16> undef, i16 %153, i32 0
  %155 = shufflevector <8 x i16> %154, <8 x i16> undef, <8 x i32> zeroinitializer
  %156 = getelementptr inbounds i8*, i8** %2, i64 %148
  %157 = load i8*, i8** %156, align 8
  %158 = getelementptr inbounds i8, i8* %157, i64 %29
  %159 = bitcast i8* %158 to <16 x i8>*
  %160 = load <16 x i8>, <16 x i8>* %159, align 1
  %161 = shufflevector <16 x i8> %160, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %162 = bitcast <16 x i8> %161 to <8 x i16>
  %163 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %162, <8 x i16> %155) #4
  %164 = mul <8 x i16> %155, %162
  %165 = shufflevector <8 x i16> %164, <8 x i16> %163, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %166 = bitcast <8 x i16> %165 to <4 x i32>
  %167 = add <4 x i32> %149, %166
  %168 = shufflevector <8 x i16> %164, <8 x i16> %163, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %169 = bitcast <8 x i16> %168 to <4 x i32>
  %170 = add <4 x i32> %150, %169
  %171 = shufflevector <16 x i8> %160, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %172 = bitcast <16 x i8> %171 to <8 x i16>
  %173 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %172, <8 x i16> %155) #4
  %174 = mul <8 x i16> %155, %172
  %175 = shufflevector <8 x i16> %174, <8 x i16> %173, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %176 = bitcast <8 x i16> %175 to <4 x i32>
  %177 = add <4 x i32> %151, %176
  %178 = add nuw nsw i64 %148, 1
  %179 = icmp eq i64 %178, %30
  br i1 %179, label %98, label %147

180:                                              ; preds = %142, %180
  %181 = phi i32 [ %204, %180 ], [ %143, %142 ]
  %182 = phi i8* [ %203, %180 ], [ %144, %142 ]
  %183 = phi <16 x i8> [ %202, %180 ], [ %145, %142 ]
  %184 = bitcast <16 x i8> %183 to <4 x i32>
  %185 = extractelement <4 x i32> %184, i32 0
  %186 = bitcast i8* %182 to i32*
  store i32 %185, i32* %186, align 4
  %187 = shufflevector <16 x i8> %183, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %188 = getelementptr inbounds i8, i8* %182, i64 4
  %189 = bitcast <16 x i8> %187 to <4 x i32>
  %190 = extractelement <4 x i32> %189, i32 0
  %191 = bitcast i8* %188 to i32*
  store i32 %190, i32* %191, align 4
  %192 = shufflevector <16 x i8> %187, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %193 = getelementptr inbounds i8, i8* %182, i64 8
  %194 = bitcast <16 x i8> %192 to <4 x i32>
  %195 = extractelement <4 x i32> %194, i32 0
  %196 = bitcast i8* %193 to i32*
  store i32 %195, i32* %196, align 4
  %197 = shufflevector <16 x i8> %192, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %198 = getelementptr inbounds i8, i8* %182, i64 12
  %199 = bitcast <16 x i8> %197 to <4 x i32>
  %200 = extractelement <4 x i32> %199, i32 0
  %201 = bitcast i8* %198 to i32*
  store i32 %200, i32* %201, align 4
  %202 = shufflevector <16 x i8> %197, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %203 = getelementptr inbounds i8, i8* %182, i64 16
  %204 = add nsw i32 %181, 4
  %205 = icmp eq i32 %204, %3
  br i1 %205, label %367, label %180

206:                                              ; preds = %6
  br i1 %8, label %207, label %218

207:                                              ; preds = %206
  %208 = icmp sgt i32 %1, 0
  %209 = sext i32 %7 to i64
  %210 = zext i32 %1 to i64
  br label %211

211:                                              ; preds = %228, %207
  %212 = phi i64 [ 0, %207 ], [ %244, %228 ]
  %213 = phi i8* [ %4, %207 ], [ %243, %228 ]
  br i1 %208, label %214, label %228

214:                                              ; preds = %211
  %215 = trunc i64 %212 to i32
  %216 = shl i32 %215, 2
  %217 = sext i32 %216 to i64
  br label %246

218:                                              ; preds = %228, %206
  %219 = phi i8* [ %4, %206 ], [ %243, %228 ]
  %220 = and i32 %3, 3
  %221 = icmp eq i32 %220, 0
  br i1 %221, label %367, label %222

222:                                              ; preds = %218
  %223 = icmp sgt i32 %1, 0
  br i1 %223, label %224, label %287

224:                                              ; preds = %222
  %225 = shl i32 %7, 2
  %226 = sext i32 %225 to i64
  %227 = zext i32 %1 to i64
  br label %316

228:                                              ; preds = %246, %211
  %229 = phi <4 x i32> [ zeroinitializer, %211 ], [ %280, %246 ]
  %230 = phi <4 x i32> [ zeroinitializer, %211 ], [ %277, %246 ]
  %231 = phi <4 x i32> [ zeroinitializer, %211 ], [ %270, %246 ]
  %232 = phi <4 x i32> [ zeroinitializer, %211 ], [ %267, %246 ]
  %233 = ashr <4 x i32> %232, <i32 14, i32 14, i32 14, i32 14>
  %234 = ashr <4 x i32> %231, <i32 14, i32 14, i32 14, i32 14>
  %235 = ashr <4 x i32> %230, <i32 14, i32 14, i32 14, i32 14>
  %236 = ashr <4 x i32> %229, <i32 14, i32 14, i32 14, i32 14>
  %237 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %233, <4 x i32> %234) #4
  %238 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %235, <4 x i32> %236) #4
  %239 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %237, <8 x i16> %238) #4
  %240 = bitcast <16 x i8> %239 to <2 x i64>
  %241 = or <2 x i64> %240, <i64 -72057589759737856, i64 -72057589759737856>
  %242 = bitcast i8* %213 to <2 x i64>*
  store <2 x i64> %241, <2 x i64>* %242, align 1
  %243 = getelementptr inbounds i8, i8* %213, i64 16
  %244 = add nuw nsw i64 %212, 4
  %245 = icmp slt i64 %244, %209
  br i1 %245, label %211, label %218

246:                                              ; preds = %246, %214
  %247 = phi i64 [ 0, %214 ], [ %281, %246 ]
  %248 = phi <4 x i32> [ zeroinitializer, %214 ], [ %267, %246 ]
  %249 = phi <4 x i32> [ zeroinitializer, %214 ], [ %270, %246 ]
  %250 = phi <4 x i32> [ zeroinitializer, %214 ], [ %277, %246 ]
  %251 = phi <4 x i32> [ zeroinitializer, %214 ], [ %280, %246 ]
  %252 = getelementptr inbounds i16, i16* %0, i64 %247
  %253 = load i16, i16* %252, align 2
  %254 = insertelement <8 x i16> undef, i16 %253, i32 0
  %255 = shufflevector <8 x i16> %254, <8 x i16> undef, <8 x i32> zeroinitializer
  %256 = getelementptr inbounds i8*, i8** %2, i64 %247
  %257 = load i8*, i8** %256, align 8
  %258 = getelementptr inbounds i8, i8* %257, i64 %217
  %259 = bitcast i8* %258 to <16 x i8>*
  %260 = load <16 x i8>, <16 x i8>* %259, align 1
  %261 = shufflevector <16 x i8> %260, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %262 = bitcast <16 x i8> %261 to <8 x i16>
  %263 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %262, <8 x i16> %255) #4
  %264 = mul <8 x i16> %255, %262
  %265 = shufflevector <8 x i16> %264, <8 x i16> %263, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %266 = bitcast <8 x i16> %265 to <4 x i32>
  %267 = add <4 x i32> %248, %266
  %268 = shufflevector <8 x i16> %264, <8 x i16> %263, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %269 = bitcast <8 x i16> %268 to <4 x i32>
  %270 = add <4 x i32> %249, %269
  %271 = shufflevector <16 x i8> %260, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %272 = bitcast <16 x i8> %271 to <8 x i16>
  %273 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %272, <8 x i16> %255) #4
  %274 = mul <8 x i16> %255, %272
  %275 = shufflevector <8 x i16> %274, <8 x i16> %273, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %276 = bitcast <8 x i16> %275 to <4 x i32>
  %277 = add <4 x i32> %250, %276
  %278 = shufflevector <8 x i16> %274, <8 x i16> %273, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %279 = bitcast <8 x i16> %278 to <4 x i32>
  %280 = add <4 x i32> %251, %279
  %281 = add nuw nsw i64 %247, 1
  %282 = icmp eq i64 %281, %210
  br i1 %282, label %228, label %246

283:                                              ; preds = %316
  %284 = ashr <4 x i32> %336, <i32 14, i32 14, i32 14, i32 14>
  %285 = ashr <4 x i32> %339, <i32 14, i32 14, i32 14, i32 14>
  %286 = ashr <4 x i32> %346, <i32 14, i32 14, i32 14, i32 14>
  br label %287

287:                                              ; preds = %283, %222
  %288 = phi <4 x i32> [ zeroinitializer, %222 ], [ %286, %283 ]
  %289 = phi <4 x i32> [ zeroinitializer, %222 ], [ %285, %283 ]
  %290 = phi <4 x i32> [ zeroinitializer, %222 ], [ %284, %283 ]
  %291 = icmp slt i32 %7, %3
  br i1 %291, label %292, label %367

292:                                              ; preds = %287
  %293 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %290, <4 x i32> %289) #4
  %294 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %288, <4 x i32> zeroinitializer) #4
  %295 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %293, <8 x i16> %294) #4
  %296 = bitcast <16 x i8> %295 to <2 x i64>
  %297 = or <2 x i64> %296, <i64 -72057589759737856, i64 -72057589759737856>
  %298 = xor i32 %7, -1
  %299 = and i32 %3, 1
  %300 = icmp eq i32 %299, 0
  br i1 %300, label %310, label %301

301:                                              ; preds = %292
  %302 = bitcast <2 x i64> %297 to <4 x i32>
  %303 = extractelement <4 x i32> %302, i32 0
  %304 = bitcast i8* %219 to i32*
  store i32 %303, i32* %304, align 4
  %305 = bitcast <2 x i64> %297 to <16 x i8>
  %306 = shufflevector <16 x i8> %305, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %307 = bitcast <16 x i8> %306 to <2 x i64>
  %308 = getelementptr inbounds i8, i8* %219, i64 4
  %309 = or i32 %7, 1
  br label %310

310:                                              ; preds = %292, %301
  %311 = phi i32 [ %7, %292 ], [ %309, %301 ]
  %312 = phi i8* [ %219, %292 ], [ %308, %301 ]
  %313 = phi <2 x i64> [ %297, %292 ], [ %307, %301 ]
  %314 = sub i32 0, %3
  %315 = icmp eq i32 %298, %314
  br i1 %315, label %367, label %349

316:                                              ; preds = %316, %224
  %317 = phi i64 [ 0, %224 ], [ %347, %316 ]
  %318 = phi <4 x i32> [ zeroinitializer, %224 ], [ %336, %316 ]
  %319 = phi <4 x i32> [ zeroinitializer, %224 ], [ %339, %316 ]
  %320 = phi <4 x i32> [ zeroinitializer, %224 ], [ %346, %316 ]
  %321 = getelementptr inbounds i16, i16* %0, i64 %317
  %322 = load i16, i16* %321, align 2
  %323 = insertelement <8 x i16> undef, i16 %322, i32 0
  %324 = shufflevector <8 x i16> %323, <8 x i16> undef, <8 x i32> zeroinitializer
  %325 = getelementptr inbounds i8*, i8** %2, i64 %317
  %326 = load i8*, i8** %325, align 8
  %327 = getelementptr inbounds i8, i8* %326, i64 %226
  %328 = bitcast i8* %327 to <16 x i8>*
  %329 = load <16 x i8>, <16 x i8>* %328, align 1
  %330 = shufflevector <16 x i8> %329, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %331 = bitcast <16 x i8> %330 to <8 x i16>
  %332 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %331, <8 x i16> %324) #4
  %333 = mul <8 x i16> %324, %331
  %334 = shufflevector <8 x i16> %333, <8 x i16> %332, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %335 = bitcast <8 x i16> %334 to <4 x i32>
  %336 = add <4 x i32> %318, %335
  %337 = shufflevector <8 x i16> %333, <8 x i16> %332, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %338 = bitcast <8 x i16> %337 to <4 x i32>
  %339 = add <4 x i32> %319, %338
  %340 = shufflevector <16 x i8> %329, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %341 = bitcast <16 x i8> %340 to <8 x i16>
  %342 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %341, <8 x i16> %324) #4
  %343 = mul <8 x i16> %324, %341
  %344 = shufflevector <8 x i16> %343, <8 x i16> %342, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %345 = bitcast <8 x i16> %344 to <4 x i32>
  %346 = add <4 x i32> %320, %345
  %347 = add nuw nsw i64 %317, 1
  %348 = icmp eq i64 %347, %227
  br i1 %348, label %283, label %316

349:                                              ; preds = %310, %349
  %350 = phi i32 [ %365, %349 ], [ %311, %310 ]
  %351 = phi i8* [ %364, %349 ], [ %312, %310 ]
  %352 = phi <2 x i64> [ %363, %349 ], [ %313, %310 ]
  %353 = bitcast <2 x i64> %352 to <4 x i32>
  %354 = extractelement <4 x i32> %353, i32 0
  %355 = bitcast i8* %351 to i32*
  store i32 %354, i32* %355, align 4
  %356 = bitcast <2 x i64> %352 to <16 x i8>
  %357 = shufflevector <16 x i8> %356, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %358 = getelementptr inbounds i8, i8* %351, i64 4
  %359 = bitcast <16 x i8> %357 to <4 x i32>
  %360 = extractelement <4 x i32> %359, i32 0
  %361 = bitcast i8* %358 to i32*
  store i32 %360, i32* %361, align 4
  %362 = shufflevector <16 x i8> %357, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %363 = bitcast <16 x i8> %362 to <2 x i64>
  %364 = getelementptr inbounds i8, i8* %351, i64 8
  %365 = add nsw i32 %350, 2
  %366 = icmp eq i32 %365, %3
  br i1 %366, label %367, label %349

367:                                              ; preds = %310, %349, %142, %180, %287, %218, %102, %21
  ret void
}

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16>, <8 x i16>) #3

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32>, <4 x i32>) #3

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16>, <8 x i16>) #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
