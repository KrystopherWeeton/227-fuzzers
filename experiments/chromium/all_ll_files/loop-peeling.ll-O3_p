; ModuleID = '../../v8/src/compiler/loop-peeling.cc'
source_filename = "../../v8/src/compiler/loop-peeling.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.v8::internal::compiler::PeeledIteration" = type { i8 }
%"class.v8::internal::compiler::Node" = type { %"class.v8::internal::compiler::Operator"*, %"class.v8::internal::compiler::Type", i32, i32, %"struct.v8::internal::compiler::Node::Use"* }
%"class.v8::internal::compiler::Operator" = type <{ i32 (...)**, i8*, i16, %"class.v8::base::Flags", i8, i32, i32, i32, i32, i8, [3 x i8], i32, [4 x i8] }>
%"class.v8::base::Flags" = type { i8 }
%"class.v8::internal::compiler::Type" = type { i64 }
%"struct.v8::internal::compiler::Node::Use" = type { %"struct.v8::internal::compiler::Node::Use"*, %"struct.v8::internal::compiler::Node::Use"*, i32 }
%"class.v8::internal::compiler::LoopPeeler" = type { %"class.v8::internal::compiler::Graph"*, %"class.v8::internal::compiler::CommonOperatorBuilder"*, %"class.v8::internal::compiler::LoopTree"*, %"class.v8::internal::Zone"*, %"class.v8::internal::compiler::SourcePositionTable"*, %"class.v8::internal::compiler::NodeOriginTable"* }
%"class.v8::internal::compiler::Graph" = type { %"class.v8::internal::Zone"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, i32, i32, %"class.v8::internal::ZoneVector.11" }
%"class.v8::internal::ZoneVector.11" = type { %"class.std::__1::vector.12" }
%"class.std::__1::vector.12" = type { %"class.std::__1::__vector_base.13" }
%"class.std::__1::__vector_base.13" = type { %"class.v8::internal::compiler::GraphDecorator"**, %"class.v8::internal::compiler::GraphDecorator"**, %"class.std::__1::__compressed_pair.14" }
%"class.v8::internal::compiler::GraphDecorator" = type { i32 (...)** }
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.15", %"struct.std::__1::__compressed_pair_elem.16" }
%"struct.std::__1::__compressed_pair_elem.15" = type { %"class.v8::internal::compiler::GraphDecorator"** }
%"struct.std::__1::__compressed_pair_elem.16" = type { %"class.v8::internal::ZoneAllocator.17" }
%"class.v8::internal::ZoneAllocator.17" = type { %"class.v8::internal::Zone"* }
%"class.v8::internal::compiler::CommonOperatorBuilder" = type { %"struct.v8::internal::compiler::CommonOperatorGlobalCache"*, %"class.v8::internal::Zone"* }
%"struct.v8::internal::compiler::CommonOperatorGlobalCache" = type opaque
%"class.v8::internal::compiler::LoopTree" = type { %"class.v8::internal::Zone"*, %"class.v8::internal::ZoneVector.18", %"class.v8::internal::ZoneVector.25", %"class.v8::internal::ZoneVector.32", %"class.v8::internal::ZoneVector" }
%"class.v8::internal::ZoneVector.18" = type { %"class.std::__1::vector.19" }
%"class.std::__1::vector.19" = type { %"class.std::__1::__vector_base.20" }
%"class.std::__1::__vector_base.20" = type { %"class.v8::internal::compiler::LoopTree::Loop"**, %"class.v8::internal::compiler::LoopTree::Loop"**, %"class.std::__1::__compressed_pair.21" }
%"class.std::__1::__compressed_pair.21" = type { %"struct.std::__1::__compressed_pair_elem.22", %"struct.std::__1::__compressed_pair_elem.23" }
%"struct.std::__1::__compressed_pair_elem.22" = type { %"class.v8::internal::compiler::LoopTree::Loop"** }
%"struct.std::__1::__compressed_pair_elem.23" = type { %"class.v8::internal::ZoneAllocator.24" }
%"class.v8::internal::ZoneAllocator.24" = type { %"class.v8::internal::Zone"* }
%"class.v8::internal::ZoneVector.25" = type { %"class.std::__1::vector.26" }
%"class.std::__1::vector.26" = type { %"class.std::__1::__vector_base.27" }
%"class.std::__1::__vector_base.27" = type { %"class.v8::internal::compiler::LoopTree::Loop"*, %"class.v8::internal::compiler::LoopTree::Loop"*, %"class.std::__1::__compressed_pair.28" }
%"class.std::__1::__compressed_pair.28" = type { %"struct.std::__1::__compressed_pair_elem.29", %"struct.std::__1::__compressed_pair_elem.30" }
%"struct.std::__1::__compressed_pair_elem.29" = type { %"class.v8::internal::compiler::LoopTree::Loop"* }
%"struct.std::__1::__compressed_pair_elem.30" = type { %"class.v8::internal::ZoneAllocator.31" }
%"class.v8::internal::ZoneAllocator.31" = type { %"class.v8::internal::Zone"* }
%"class.v8::internal::ZoneVector.32" = type { %"class.std::__1::vector.33" }
%"class.std::__1::vector.33" = type { %"class.std::__1::__vector_base.34" }
%"class.std::__1::__vector_base.34" = type { i32*, i32*, %"class.std::__1::__compressed_pair.35" }
%"class.std::__1::__compressed_pair.35" = type { %"struct.std::__1::__compressed_pair_elem.36", %"struct.std::__1::__compressed_pair_elem.37" }
%"struct.std::__1::__compressed_pair_elem.36" = type { i32* }
%"struct.std::__1::__compressed_pair_elem.37" = type { %"class.v8::internal::ZoneAllocator.38" }
%"class.v8::internal::ZoneAllocator.38" = type { %"class.v8::internal::Zone"* }
%"class.v8::internal::ZoneVector" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"**, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem", %"struct.std::__1::__compressed_pair_elem.0" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.v8::internal::compiler::Node"** }
%"struct.std::__1::__compressed_pair_elem.0" = type { %"class.v8::internal::ZoneAllocator" }
%"class.v8::internal::ZoneAllocator" = type { %"class.v8::internal::Zone"* }
%"class.v8::internal::Zone" = type <{ i64, i64, i64, i64, %"class.v8::internal::AccountingAllocator"*, %"class.v8::internal::Segment"*, i8*, i8, i8, [6 x i8] }>
%"class.v8::internal::AccountingAllocator" = type { i32 (...)**, %"struct.std::__1::atomic", %"struct.std::__1::atomic", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr.5" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.1" }
%"struct.std::__1::__atomic_base.1" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %"class.v8::internal::VirtualMemory"* }
%"class.v8::internal::VirtualMemory" = type { %"class.v8::PageAllocator"*, %"class.v8::base::AddressRegion" }
%"class.v8::PageAllocator" = type { i32 (...)** }
%"class.v8::base::AddressRegion" = type { i64, i64 }
%"class.std::__1::unique_ptr.5" = type { %"class.std::__1::__compressed_pair.6" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %"class.v8::base::BoundedPageAllocator"* }
%"class.v8::base::BoundedPageAllocator" = type opaque
%"class.v8::internal::Segment" = type { %"class.v8::internal::Zone"*, %"class.v8::internal::Segment"*, i64 }
%"class.v8::internal::compiler::SourcePositionTable" = type { %"class.v8::internal::compiler::Graph"*, %"class.v8::internal::compiler::SourcePositionTable::Decorator"*, %"class.v8::internal::SourcePosition", %"class.v8::internal::compiler::NodeAuxData" }
%"class.v8::internal::compiler::SourcePositionTable::Decorator" = type opaque
%"class.v8::internal::SourcePosition" = type { i64 }
%"class.v8::internal::compiler::NodeAuxData" = type { %"class.v8::internal::ZoneVector.39" }
%"class.v8::internal::ZoneVector.39" = type { %"class.std::__1::vector.40" }
%"class.std::__1::vector.40" = type { %"class.std::__1::__vector_base.41" }
%"class.std::__1::__vector_base.41" = type { %"class.v8::internal::SourcePosition"*, %"class.v8::internal::SourcePosition"*, %"class.std::__1::__compressed_pair.42" }
%"class.std::__1::__compressed_pair.42" = type { %"struct.std::__1::__compressed_pair_elem.43", %"struct.std::__1::__compressed_pair_elem.44" }
%"struct.std::__1::__compressed_pair_elem.43" = type { %"class.v8::internal::SourcePosition"* }
%"struct.std::__1::__compressed_pair_elem.44" = type { %"class.v8::internal::ZoneAllocator.45" }
%"class.v8::internal::ZoneAllocator.45" = type { %"class.v8::internal::Zone"* }
%"class.v8::internal::compiler::NodeOriginTable" = type { %"class.v8::internal::compiler::Graph"*, %"class.v8::internal::compiler::NodeOriginTable::Decorator"*, %"class.v8::internal::compiler::NodeOrigin", i8*, %"class.v8::internal::compiler::NodeAuxData.46" }
%"class.v8::internal::compiler::NodeOriginTable::Decorator" = type opaque
%"class.v8::internal::compiler::NodeOrigin" = type { i8*, i8*, i32, i64 }
%"class.v8::internal::compiler::NodeAuxData.46" = type { %"class.v8::internal::ZoneVector.47" }
%"class.v8::internal::ZoneVector.47" = type { %"class.std::__1::vector.48" }
%"class.std::__1::vector.48" = type { %"class.std::__1::__vector_base.49" }
%"class.std::__1::__vector_base.49" = type { %"class.v8::internal::compiler::NodeOrigin"*, %"class.v8::internal::compiler::NodeOrigin"*, %"class.std::__1::__compressed_pair.50" }
%"class.std::__1::__compressed_pair.50" = type { %"struct.std::__1::__compressed_pair_elem.51", %"struct.std::__1::__compressed_pair_elem.52" }
%"struct.std::__1::__compressed_pair_elem.51" = type { %"class.v8::internal::compiler::NodeOrigin"* }
%"struct.std::__1::__compressed_pair_elem.52" = type { %"class.v8::internal::ZoneAllocator.53" }
%"class.v8::internal::ZoneAllocator.53" = type { %"class.v8::internal::Zone"* }
%"class.v8::internal::compiler::LoopTree::Loop" = type { %"class.v8::internal::compiler::LoopTree::Loop"*, i32, %"class.v8::internal::ZoneVector.18", i32, i32, i32, i32 }
%"class.v8::internal::compiler::NodeCopier" = type <{ %"class.v8::internal::compiler::NodeMarker", %"class.v8::internal::ZoneVector"*, i32, [4 x i8] }>
%"class.v8::internal::compiler::NodeMarker" = type { %"class.v8::internal::compiler::NodeMarkerBase" }
%"class.v8::internal::compiler::NodeMarkerBase" = type { i32, i32 }
%"class.v8::internal::compiler::PeeledIterationImpl" = type { %"class.v8::internal::ZoneVector" }
%"struct.v8::internal::compiler::Node::OutOfLineInputs" = type { %"class.v8::internal::compiler::Node"*, i32, i32 }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.v8::internal::ZoneAllocator.72" = type { %"class.v8::internal::Zone"* }
%"class.v8::internal::ZoneDeque" = type { %"class.std::__1::deque" }
%"class.std::__1::deque" = type { %"class.std::__1::__deque_base" }
%"class.std::__1::__deque_base" = type { %"struct.std::__1::__split_buffer", i64, %"class.std::__1::__compressed_pair.59" }
%"struct.std::__1::__split_buffer" = type { %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"***, %"class.std::__1::__compressed_pair.55" }
%"class.std::__1::__compressed_pair.55" = type { %"struct.std::__1::__compressed_pair_elem.56", %"struct.std::__1::__compressed_pair_elem.57" }
%"struct.std::__1::__compressed_pair_elem.56" = type { %"class.v8::internal::compiler::Node"*** }
%"struct.std::__1::__compressed_pair_elem.57" = type { %"class.v8::internal::RecyclingZoneAllocator" }
%"class.v8::internal::RecyclingZoneAllocator" = type { %"class.v8::internal::ZoneAllocator.58", %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"* }
%"class.v8::internal::ZoneAllocator.58" = type { %"class.v8::internal::Zone"* }
%"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock" = type { %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"*, i64 }
%"class.std::__1::__compressed_pair.59" = type { %"struct.std::__1::__compressed_pair_elem.60", %"struct.std::__1::__compressed_pair_elem.61" }
%"struct.std::__1::__compressed_pair_elem.60" = type { i64 }
%"struct.std::__1::__compressed_pair_elem.61" = type { %"class.v8::internal::RecyclingZoneAllocator.62" }
%"class.v8::internal::RecyclingZoneAllocator.62" = type { %"class.v8::internal::ZoneAllocator", %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock"* }
%"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock" = type { %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock"*, i64 }
%"class.v8::internal::ZoneQueue" = type { %"class.std::__1::queue" }
%"class.std::__1::queue" = type { %"class.v8::internal::ZoneDeque" }
%"class.v8::internal::ZoneVector.63" = type { %"class.std::__1::vector.64" }
%"class.std::__1::vector.64" = type { i64*, i64, %"class.std::__1::__compressed_pair.65" }
%"class.std::__1::__compressed_pair.65" = type { %"struct.std::__1::__compressed_pair_elem.60", %"struct.std::__1::__compressed_pair_elem.66" }
%"struct.std::__1::__compressed_pair_elem.66" = type { %"class.v8::internal::ZoneAllocator.67" }
%"class.v8::internal::ZoneAllocator.67" = type { %"class.v8::internal::Zone"* }
%"struct.std::__1::__split_buffer.73" = type { %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"***, %"class.std::__1::__compressed_pair.74" }
%"class.std::__1::__compressed_pair.74" = type { %"struct.std::__1::__compressed_pair_elem.56", %"struct.std::__1::__compressed_pair_elem.75" }
%"struct.std::__1::__compressed_pair_elem.75" = type { %"class.v8::internal::RecyclingZoneAllocator"* }

$_ZN2v88internal8compiler10NodeCopier9CopyNodesIPPNS1_4NodeEEEvPNS1_5GraphEPNS0_4ZoneES5_NS_4base14iterator_rangeIT_EEPNS1_19SourcePositionTableEPNS1_15NodeOriginTableE = comdat any

$_ZNSt3__112__deque_baseIPN2v88internal8compiler4NodeENS2_22RecyclingZoneAllocatorIS5_EEED2Ev = comdat any

$_ZNSt3__16vectorIbN2v88internal13ZoneAllocatorIbEEEC2EmRKbRKS4_ = comdat any

$_ZNSt3__15dequeIPN2v88internal8compiler4NodeENS2_22RecyclingZoneAllocatorIS5_EEE19__add_back_capacityEv = comdat any

$_ZNSt3__114__split_bufferIPPN2v88internal8compiler4NodeENS2_22RecyclingZoneAllocatorIS6_EEE9push_backERKS6_ = comdat any

$_ZNSt3__114__split_bufferIPPN2v88internal8compiler4NodeENS2_22RecyclingZoneAllocatorIS6_EEE9push_backEOS6_ = comdat any

$_ZNSt3__114__split_bufferIPPN2v88internal8compiler4NodeENS2_22RecyclingZoneAllocatorIS6_EEE10push_frontEOS6_ = comdat any

$_ZNSt3__114__split_bufferIPPN2v88internal8compiler4NodeERNS2_22RecyclingZoneAllocatorIS6_EEE9push_backEOS6_ = comdat any

$_ZNSt3__114__split_bufferIPPN2v88internal8compiler4NodeERNS2_22RecyclingZoneAllocatorIS6_EEE10push_frontERKS6_ = comdat any

@_ZN2v88internal21FLAG_trace_turbo_loopE = external local_unnamed_addr global i8, align 1
@.str = private unnamed_addr constant [27 x i8] c"Peeling loop with header: \00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%i \00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.3 = private unnamed_addr constant [17 x i8] c"unreachable code\00", align 1
@.str.4 = private unnamed_addr constant [18 x i8] c"Check failed: %s.\00", align 1
@.str.6 = private unnamed_addr constant [39 x i8] c"index < node->op()->EffectInputCount()\00", align 1
@.str.7 = private unnamed_addr constant [40 x i8] c"index < node->op()->ControlInputCount()\00", align 1
@.str.8 = private unnamed_addr constant [11 x i8] c"copy nodes\00", align 1
@.str.9 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler15PeeledIteration3mapEPNS1_4NodeE(%"class.v8::internal::compiler::PeeledIteration"* nocapture readonly, %"class.v8::internal::compiler::Node"* readnone) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::compiler::PeeledIteration", %"class.v8::internal::compiler::PeeledIteration"* %0, i64 8
  %4 = bitcast %"class.v8::internal::compiler::PeeledIteration"* %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.v8::internal::compiler::PeeledIteration"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = icmp eq i64 %5, %7
  %9 = inttoptr i64 %7 to %"class.v8::internal::compiler::Node"**
  br i1 %8, label %25, label %10

10:                                               ; preds = %2
  %11 = sub i64 %5, %7
  %12 = ashr exact i64 %11, 3
  br label %13

13:                                               ; preds = %10, %18
  %14 = phi i64 [ 0, %10 ], [ %19, %18 ]
  %15 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %9, i64 %14
  %16 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %15, align 8
  %17 = icmp eq %"class.v8::internal::compiler::Node"* %16, %1
  br i1 %17, label %21, label %18

18:                                               ; preds = %13
  %19 = add i64 %14, 2
  %20 = icmp ult i64 %19, %12
  br i1 %20, label %13, label %25

21:                                               ; preds = %13
  %22 = or i64 %14, 1
  %23 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %9, i64 %22
  %24 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %23, align 8
  br label %25

25:                                               ; preds = %18, %2, %21
  %26 = phi %"class.v8::internal::compiler::Node"* [ %24, %21 ], [ %1, %2 ], [ %1, %18 ]
  ret %"class.v8::internal::compiler::Node"* %26
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::compiler::PeeledIteration"* @_ZN2v88internal8compiler10LoopPeeler4PeelEPNS1_8LoopTree4LoopE(%"class.v8::internal::compiler::LoopPeeler"* nocapture readonly, %"class.v8::internal::compiler::LoopTree::Loop"*) local_unnamed_addr #2 align 2 {
  %3 = alloca %"class.v8::internal::compiler::NodeCopier", align 8
  %4 = alloca %"class.v8::internal::ZoneVector", align 8
  %5 = getelementptr inbounds %"class.v8::internal::compiler::LoopPeeler", %"class.v8::internal::compiler::LoopPeeler"* %0, i64 0, i32 2
  %6 = load %"class.v8::internal::compiler::LoopTree"*, %"class.v8::internal::compiler::LoopTree"** %5, align 8
  %7 = tail call zeroext i1 @_ZN2v88internal8compiler10LoopFinder14HasMarkedExitsEPNS1_8LoopTreeEPKNS3_4LoopE(%"class.v8::internal::compiler::LoopTree"* %6, %"class.v8::internal::compiler::LoopTree::Loop"* %1) #6
  br i1 %7, label %8, label %1193

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.v8::internal::compiler::LoopPeeler", %"class.v8::internal::compiler::LoopPeeler"* %0, i64 0, i32 3
  %10 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %9, align 8
  %11 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %10, i64 0, i32 2
  %12 = load i64, i64* %11, align 8
  %13 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %10, i64 0, i32 3
  %14 = load i64, i64* %13, align 8
  %15 = sub i64 %14, %12
  %16 = icmp ult i64 %15, 32
  br i1 %16, label %17, label %19, !prof !2

17:                                               ; preds = %8
  %18 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %10, i64 32) #6
  br label %21

19:                                               ; preds = %8
  %20 = add i64 %12, 32
  store i64 %20, i64* %11, align 8
  br label %21

21:                                               ; preds = %17, %19
  %22 = phi i64 [ %18, %17 ], [ %12, %19 ]
  %23 = inttoptr i64 %22 to i8*
  %24 = inttoptr i64 %22 to %"class.v8::internal::compiler::PeeledIterationImpl"*
  %25 = bitcast %"class.v8::internal::Zone"** %9 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = getelementptr inbounds %"class.v8::internal::compiler::PeeledIterationImpl", %"class.v8::internal::compiler::PeeledIterationImpl"* %24, i64 0, i32 0, i32 0, i32 0, i32 2, i32 1
  %28 = bitcast %"struct.std::__1::__compressed_pair_elem.0"* %27 to i64*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %23, i8 0, i64 24, i1 false) #6
  store i64 %26, i64* %28, align 8
  %29 = getelementptr inbounds %"class.v8::internal::compiler::LoopTree::Loop", %"class.v8::internal::compiler::LoopTree::Loop"* %1, i64 0, i32 6
  %30 = load i32, i32* %29, align 4
  %31 = getelementptr inbounds %"class.v8::internal::compiler::LoopTree::Loop", %"class.v8::internal::compiler::LoopTree::Loop"* %1, i64 0, i32 3
  %32 = load i32, i32* %31, align 8
  %33 = sub nsw i32 %30, %32
  %34 = shl i32 %33, 1
  %35 = add i32 %34, 5
  %36 = bitcast %"class.v8::internal::compiler::NodeCopier"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %36) #6
  %37 = getelementptr inbounds %"class.v8::internal::compiler::LoopPeeler", %"class.v8::internal::compiler::LoopPeeler"* %0, i64 0, i32 0
  %38 = load %"class.v8::internal::compiler::Graph"*, %"class.v8::internal::compiler::Graph"** %37, align 8
  %39 = getelementptr inbounds %"class.v8::internal::compiler::PeeledIterationImpl", %"class.v8::internal::compiler::PeeledIterationImpl"* %24, i64 0, i32 0
  %40 = getelementptr inbounds %"class.v8::internal::compiler::NodeCopier", %"class.v8::internal::compiler::NodeCopier"* %3, i64 0, i32 0, i32 0
  call void @_ZN2v88internal8compiler14NodeMarkerBaseC2EPNS1_5GraphEj(%"class.v8::internal::compiler::NodeMarkerBase"* nonnull %40, %"class.v8::internal::compiler::Graph"* %38, i32 %35) #6
  %41 = getelementptr inbounds %"class.v8::internal::compiler::NodeCopier", %"class.v8::internal::compiler::NodeCopier"* %3, i64 0, i32 1
  store %"class.v8::internal::ZoneVector"* %39, %"class.v8::internal::ZoneVector"** %41, align 8
  %42 = getelementptr inbounds %"class.v8::internal::compiler::NodeCopier", %"class.v8::internal::compiler::NodeCopier"* %3, i64 0, i32 2
  store i32 1, i32* %42, align 8
  %43 = load %"class.v8::internal::compiler::Graph"*, %"class.v8::internal::compiler::Graph"** %37, align 8
  %44 = getelementptr inbounds %"class.v8::internal::compiler::LoopPeeler", %"class.v8::internal::compiler::LoopPeeler"* %0, i64 0, i32 1
  %45 = load %"class.v8::internal::compiler::CommonOperatorBuilder"*, %"class.v8::internal::compiler::CommonOperatorBuilder"** %44, align 8
  %46 = call %"class.v8::internal::compiler::Operator"* @_ZN2v88internal8compiler21CommonOperatorBuilder4DeadEv(%"class.v8::internal::compiler::CommonOperatorBuilder"* %45) #6
  %47 = call %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler5Graph7NewNodeEPKNS1_8OperatorEiPKPNS1_4NodeEb(%"class.v8::internal::compiler::Graph"* %43, %"class.v8::internal::compiler::Operator"* %46, i32 0, %"class.v8::internal::compiler::Node"** null, i1 zeroext false) #6
  %48 = load %"class.v8::internal::compiler::LoopTree"*, %"class.v8::internal::compiler::LoopTree"** %5, align 8
  %49 = getelementptr inbounds %"class.v8::internal::compiler::LoopTree", %"class.v8::internal::compiler::LoopTree"* %48, i64 0, i32 4, i32 0, i32 0, i32 0
  %50 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %49, align 8
  %51 = load i32, i32* %31, align 8
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds %"class.v8::internal::compiler::LoopTree::Loop", %"class.v8::internal::compiler::LoopTree::Loop"* %1, i64 0, i32 4
  %54 = load i32, i32* %53, align 4
  %55 = sext i32 %54 to i64
  %56 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %50, i64 %55
  %57 = icmp eq i32 %51, %54
  br i1 %57, label %66, label %58

58:                                               ; preds = %21
  %59 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %50, i64 %52
  br label %122

60:                                               ; preds = %135
  %61 = load %"class.v8::internal::compiler::LoopTree"*, %"class.v8::internal::compiler::LoopTree"** %5, align 8
  %62 = getelementptr inbounds %"class.v8::internal::compiler::LoopTree", %"class.v8::internal::compiler::LoopTree"* %61, i64 0, i32 4, i32 0, i32 0, i32 0
  %63 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %62, align 8
  %64 = load i32, i32* %53, align 4
  %65 = sext i32 %64 to i64
  br label %66

66:                                               ; preds = %60, %21
  %67 = phi i64 [ %65, %60 ], [ %52, %21 ]
  %68 = phi %"class.v8::internal::compiler::Node"** [ %63, %60 ], [ %50, %21 ]
  %69 = load %"class.v8::internal::compiler::Graph"*, %"class.v8::internal::compiler::Graph"** %37, align 8
  %70 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %9, align 8
  %71 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %68, i64 %67
  %72 = getelementptr inbounds %"class.v8::internal::compiler::LoopTree::Loop", %"class.v8::internal::compiler::LoopTree::Loop"* %1, i64 0, i32 5
  %73 = load i32, i32* %72, align 8
  %74 = sext i32 %73 to i64
  %75 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %68, i64 %74
  %76 = getelementptr inbounds %"class.v8::internal::compiler::LoopPeeler", %"class.v8::internal::compiler::LoopPeeler"* %0, i64 0, i32 4
  %77 = load %"class.v8::internal::compiler::SourcePositionTable"*, %"class.v8::internal::compiler::SourcePositionTable"** %76, align 8
  %78 = getelementptr inbounds %"class.v8::internal::compiler::LoopPeeler", %"class.v8::internal::compiler::LoopPeeler"* %0, i64 0, i32 5
  %79 = load %"class.v8::internal::compiler::NodeOriginTable"*, %"class.v8::internal::compiler::NodeOriginTable"** %78, align 8
  call void @_ZN2v88internal8compiler10NodeCopier9CopyNodesIPPNS1_4NodeEEEvPNS1_5GraphEPNS0_4ZoneES5_NS_4base14iterator_rangeIT_EEPNS1_19SourcePositionTableEPNS1_15NodeOriginTableE(%"class.v8::internal::compiler::NodeCopier"* nonnull %3, %"class.v8::internal::compiler::Graph"* %69, %"class.v8::internal::Zone"* %70, %"class.v8::internal::compiler::Node"* %47, %"class.v8::internal::compiler::Node"** %71, %"class.v8::internal::compiler::Node"** %75, %"class.v8::internal::compiler::SourcePositionTable"* %77, %"class.v8::internal::compiler::NodeOriginTable"* %79)
  %80 = load %"class.v8::internal::compiler::LoopTree"*, %"class.v8::internal::compiler::LoopTree"** %5, align 8
  %81 = getelementptr inbounds %"class.v8::internal::compiler::LoopTree", %"class.v8::internal::compiler::LoopTree"* %80, i64 0, i32 4, i32 0, i32 0, i32 0
  %82 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %81, align 8
  %83 = load i32, i32* %31, align 8
  %84 = load i32, i32* %53, align 4
  %85 = sext i32 %84 to i64
  %86 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %82, i64 %85
  %87 = icmp eq i32 %83, %84
  br i1 %87, label %102, label %88

88:                                               ; preds = %66
  %89 = sext i32 %83 to i64
  %90 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %82, i64 %89
  br label %93

91:                                               ; preds = %93
  %92 = icmp eq %"class.v8::internal::compiler::Node"** %101, %86
  br i1 %92, label %102, label %93

93:                                               ; preds = %91, %88
  %94 = phi %"class.v8::internal::compiler::Node"** [ %101, %91 ], [ %90, %88 ]
  %95 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %94, align 8
  %96 = getelementptr inbounds %"class.v8::internal::compiler::Node", %"class.v8::internal::compiler::Node"* %95, i64 0, i32 0
  %97 = load %"class.v8::internal::compiler::Operator"*, %"class.v8::internal::compiler::Operator"** %96, align 8
  %98 = getelementptr inbounds %"class.v8::internal::compiler::Operator", %"class.v8::internal::compiler::Operator"* %97, i64 0, i32 2
  %99 = load i16, i16* %98, align 8
  %100 = icmp eq i16 %99, 1
  %101 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %94, i64 1
  br i1 %100, label %103, label %91

102:                                              ; preds = %91, %66
  call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.3, i64 0, i64 0)) #7
  unreachable

103:                                              ; preds = %93
  %104 = getelementptr inbounds %"class.v8::internal::compiler::Node", %"class.v8::internal::compiler::Node"* %95, i64 0, i32 3
  %105 = load i32, i32* %104, align 4
  %106 = and i32 %105, 251658240
  %107 = icmp eq i32 %106, 251658240
  br i1 %107, label %111, label %108

108:                                              ; preds = %103
  %109 = lshr i32 %105, 24
  %110 = and i32 %109, 15
  br label %118

111:                                              ; preds = %103
  %112 = ptrtoint %"class.v8::internal::compiler::Node"* %95 to i64
  %113 = add i64 %112, 32
  %114 = inttoptr i64 %113 to %"struct.v8::internal::compiler::Node::OutOfLineInputs"**
  %115 = load %"struct.v8::internal::compiler::Node::OutOfLineInputs"*, %"struct.v8::internal::compiler::Node::OutOfLineInputs"** %114, align 8
  %116 = getelementptr inbounds %"struct.v8::internal::compiler::Node::OutOfLineInputs", %"struct.v8::internal::compiler::Node::OutOfLineInputs"* %115, i64 0, i32 1
  %117 = load i32, i32* %116, align 8
  br label %118

118:                                              ; preds = %108, %111
  %119 = phi i32 [ %110, %108 ], [ %117, %111 ]
  %120 = add i32 %119, -1
  %121 = icmp sgt i32 %120, 1
  br i1 %121, label %141, label %1000

122:                                              ; preds = %58, %135
  %123 = phi %"class.v8::internal::compiler::Node"** [ %139, %135 ], [ %59, %58 ]
  %124 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %123, align 8
  %125 = getelementptr inbounds %"class.v8::internal::compiler::Node", %"class.v8::internal::compiler::Node"* %124, i64 0, i32 3
  %126 = load i32, i32* %125, align 4
  %127 = and i32 %126, 251658240
  %128 = icmp eq i32 %127, 251658240
  %129 = ptrtoint %"class.v8::internal::compiler::Node"* %124 to i64
  %130 = add i64 %129, 32
  br i1 %128, label %131, label %135

131:                                              ; preds = %122
  %132 = inttoptr i64 %130 to i64*
  %133 = load i64, i64* %132, align 8
  %134 = add i64 %133, 16
  br label %135

135:                                              ; preds = %122, %131
  %136 = phi i64 [ %134, %131 ], [ %130, %122 ]
  %137 = inttoptr i64 %136 to %"class.v8::internal::compiler::Node"**
  %138 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %137, align 8
  call void @_ZN2v88internal8compiler10NodeCopier6InsertEPNS1_4NodeES4_(%"class.v8::internal::compiler::NodeCopier"* nonnull %3, %"class.v8::internal::compiler::Node"* %124, %"class.v8::internal::compiler::Node"* %138) #6
  %139 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %123, i64 1
  %140 = icmp eq %"class.v8::internal::compiler::Node"** %139, %56
  br i1 %140, label %60, label %122

141:                                              ; preds = %118
  %142 = bitcast %"class.v8::internal::ZoneVector"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %142) #6
  %143 = load i64, i64* %25, align 8
  %144 = getelementptr inbounds %"class.v8::internal::ZoneVector", %"class.v8::internal::ZoneVector"* %4, i64 0, i32 0, i32 0, i32 2, i32 1
  %145 = bitcast %"struct.std::__1::__compressed_pair_elem.0"* %144 to i64*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %142, i8 0, i64 24, i1 false) #6
  store i64 %143, i64* %145, align 8
  %146 = ptrtoint %"class.v8::internal::compiler::Node"* %95 to i64
  %147 = add i64 %146, 32
  %148 = inttoptr i64 %147 to %"struct.v8::internal::compiler::Node::OutOfLineInputs"**
  %149 = inttoptr i64 %147 to i64*
  %150 = getelementptr inbounds %"class.v8::internal::ZoneVector", %"class.v8::internal::ZoneVector"* %4, i64 0, i32 0, i32 0, i32 1
  %151 = getelementptr inbounds %"class.v8::internal::ZoneVector", %"class.v8::internal::ZoneVector"* %4, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %152 = bitcast %"class.v8::internal::compiler::Node"*** %150 to i64*
  %153 = bitcast %"class.v8::internal::ZoneVector"* %4 to i64*
  %154 = bitcast %"class.v8::internal::compiler::Node"*** %151 to i64*
  %155 = getelementptr inbounds %"class.v8::internal::ZoneVector", %"class.v8::internal::ZoneVector"* %4, i64 0, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %156 = getelementptr inbounds %"class.v8::internal::ZoneVector", %"class.v8::internal::ZoneVector"* %4, i64 0, i32 0, i32 0, i32 0
  br label %157

157:                                              ; preds = %433, %141
  %158 = phi i64 [ %434, %433 ], [ 1, %141 ]
  %159 = load i32, i32* %104, align 4
  %160 = and i32 %159, 251658240
  %161 = icmp eq i32 %160, 251658240
  br i1 %161, label %165, label %162

162:                                              ; preds = %157
  %163 = lshr i32 %159, 24
  %164 = and i32 %163, 15
  br label %169

165:                                              ; preds = %157
  %166 = load %"struct.v8::internal::compiler::Node::OutOfLineInputs"*, %"struct.v8::internal::compiler::Node::OutOfLineInputs"** %148, align 8
  %167 = getelementptr inbounds %"struct.v8::internal::compiler::Node::OutOfLineInputs", %"struct.v8::internal::compiler::Node::OutOfLineInputs"* %166, i64 0, i32 1
  %168 = load i32, i32* %167, align 8
  br label %169

169:                                              ; preds = %162, %165
  %170 = phi i32 [ %164, %162 ], [ %168, %165 ]
  %171 = sext i32 %170 to i64
  %172 = icmp slt i64 %158, %171
  br i1 %172, label %193, label %173

173:                                              ; preds = %169
  %174 = load %"class.v8::internal::compiler::Graph"*, %"class.v8::internal::compiler::Graph"** %37, align 8
  %175 = load %"class.v8::internal::compiler::CommonOperatorBuilder"*, %"class.v8::internal::compiler::CommonOperatorBuilder"** %44, align 8
  %176 = call %"class.v8::internal::compiler::Operator"* @_ZN2v88internal8compiler21CommonOperatorBuilder5MergeEi(%"class.v8::internal::compiler::CommonOperatorBuilder"* %175, i32 %120) #6
  %177 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %156, align 8
  %178 = call %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler5Graph7NewNodeEPKNS1_8OperatorEiPKPNS1_4NodeEb(%"class.v8::internal::compiler::Graph"* %174, %"class.v8::internal::compiler::Operator"* %176, i32 %120, %"class.v8::internal::compiler::Node"** %177, i1 zeroext false) #6
  %179 = ptrtoint %"class.v8::internal::compiler::Node"* %178 to i64
  %180 = load %"class.v8::internal::compiler::LoopTree"*, %"class.v8::internal::compiler::LoopTree"** %5, align 8
  %181 = getelementptr inbounds %"class.v8::internal::compiler::LoopTree", %"class.v8::internal::compiler::LoopTree"* %180, i64 0, i32 4, i32 0, i32 0, i32 0
  %182 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %181, align 8
  %183 = load i32, i32* %31, align 8
  %184 = load i32, i32* %53, align 4
  %185 = sext i32 %184 to i64
  %186 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %182, i64 %185
  %187 = icmp eq i32 %183, %184
  br i1 %187, label %435, label %188

188:                                              ; preds = %173
  %189 = sext i32 %183 to i64
  %190 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %182, i64 %189
  %191 = icmp sgt i32 %120, 0
  %192 = zext i32 %120 to i64
  br label %441

193:                                              ; preds = %169
  br i1 %161, label %194, label %197

194:                                              ; preds = %193
  %195 = load i64, i64* %149, align 8
  %196 = add i64 %195, 16
  br label %197

197:                                              ; preds = %193, %194
  %198 = phi i64 [ %196, %194 ], [ %147, %193 ]
  %199 = inttoptr i64 %198 to %"class.v8::internal::compiler::Node"**
  %200 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %199, i64 %158
  %201 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %200, align 8
  %202 = call %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler10NodeCopier3mapEPNS1_4NodeEj(%"class.v8::internal::compiler::NodeCopier"* nonnull %3, %"class.v8::internal::compiler::Node"* %201, i32 0) #6
  %203 = ptrtoint %"class.v8::internal::compiler::Node"* %202 to i64
  %204 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %150, align 8
  %205 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %151, align 8
  %206 = icmp ult %"class.v8::internal::compiler::Node"** %204, %205
  %207 = ptrtoint %"class.v8::internal::compiler::Node"** %205 to i64
  br i1 %206, label %208, label %212

208:                                              ; preds = %197
  %209 = bitcast %"class.v8::internal::compiler::Node"** %204 to i64*
  store i64 %203, i64* %209, align 8
  %210 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %204, i64 1
  %211 = ptrtoint %"class.v8::internal::compiler::Node"** %210 to i64
  store i64 %211, i64* %152, align 8
  br label %433

212:                                              ; preds = %197
  %213 = ptrtoint %"class.v8::internal::compiler::Node"** %204 to i64
  %214 = load i64, i64* %153, align 8
  %215 = sub i64 %213, %214
  %216 = ashr exact i64 %215, 3
  %217 = add nsw i64 %216, 1
  %218 = icmp ugt i64 %217, 268435455
  br i1 %218, label %219, label %221

219:                                              ; preds = %212
  %220 = bitcast %"class.v8::internal::ZoneVector"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %220) #7
  unreachable

221:                                              ; preds = %212
  %222 = sub i64 %207, %214
  %223 = ashr exact i64 %222, 3
  %224 = icmp ult i64 %223, 134217727
  br i1 %224, label %225, label %230

225:                                              ; preds = %221
  %226 = ashr exact i64 %222, 2
  %227 = icmp ult i64 %226, %217
  %228 = select i1 %227, i64 %217, i64 %226
  %229 = icmp eq i64 %228, 0
  br i1 %229, label %247, label %230

230:                                              ; preds = %225, %221
  %231 = phi i64 [ %228, %225 ], [ 268435455, %221 ]
  %232 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %155, align 8
  %233 = shl i64 %231, 3
  %234 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %232, i64 0, i32 2
  %235 = load i64, i64* %234, align 8
  %236 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %232, i64 0, i32 3
  %237 = load i64, i64* %236, align 8
  %238 = sub i64 %237, %235
  %239 = icmp ugt i64 %233, %238
  br i1 %239, label %240, label %242, !prof !2

240:                                              ; preds = %230
  %241 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %232, i64 %233) #6
  br label %244

242:                                              ; preds = %230
  %243 = add i64 %235, %233
  store i64 %243, i64* %234, align 8
  br label %244

244:                                              ; preds = %242, %240
  %245 = phi i64 [ %241, %240 ], [ %235, %242 ]
  %246 = inttoptr i64 %245 to %"class.v8::internal::compiler::Node"**
  br label %247

247:                                              ; preds = %244, %225
  %248 = phi i64 [ %231, %244 ], [ 0, %225 ]
  %249 = phi %"class.v8::internal::compiler::Node"** [ %246, %244 ], [ null, %225 ]
  %250 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %249, i64 %216
  %251 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %249, i64 %248
  %252 = ptrtoint %"class.v8::internal::compiler::Node"** %251 to i64
  %253 = bitcast %"class.v8::internal::compiler::Node"** %250 to i64*
  store i64 %203, i64* %253, align 8
  %254 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %250, i64 1
  %255 = ptrtoint %"class.v8::internal::compiler::Node"** %254 to i64
  %256 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %156, align 8
  %257 = ptrtoint %"class.v8::internal::compiler::Node"** %256 to i64
  %258 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %150, align 8
  %259 = icmp eq %"class.v8::internal::compiler::Node"** %258, %256
  br i1 %259, label %430, label %260

260:                                              ; preds = %247
  %261 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %258, i64 -1
  %262 = ptrtoint %"class.v8::internal::compiler::Node"** %261 to i64
  %263 = sub i64 %262, %257
  %264 = lshr i64 %263, 3
  %265 = add nuw nsw i64 %264, 1
  %266 = icmp ult i64 %265, 4
  br i1 %266, label %360, label %267

267:                                              ; preds = %260
  %268 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %249, i64 -1
  %269 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %258, i64 -1
  %270 = ptrtoint %"class.v8::internal::compiler::Node"** %269 to i64
  %271 = sub i64 %270, %257
  %272 = lshr i64 %271, 3
  %273 = sub nsw i64 %216, %272
  %274 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %268, i64 %273
  %275 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %258, i64 -1
  %276 = sub nsw i64 0, %272
  %277 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %275, i64 %276
  %278 = icmp ult %"class.v8::internal::compiler::Node"** %274, %258
  %279 = icmp ult %"class.v8::internal::compiler::Node"** %277, %250
  %280 = and i1 %278, %279
  br i1 %280, label %360, label %281

281:                                              ; preds = %267
  %282 = and i64 %265, 4611686018427387900
  %283 = sub nsw i64 0, %282
  %284 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %250, i64 %283
  %285 = sub nsw i64 0, %282
  %286 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %258, i64 %285
  %287 = add nsw i64 %282, -4
  %288 = lshr exact i64 %287, 2
  %289 = add nuw nsw i64 %288, 1
  %290 = and i64 %289, 1
  %291 = icmp eq i64 %287, 0
  br i1 %291, label %336, label %292

292:                                              ; preds = %281
  %293 = sub nuw nsw i64 %289, %290
  %294 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %250, i64 -1
  %295 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %258, i64 -1
  %296 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %250, i64 -1
  %297 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %258, i64 -1
  br label %298

298:                                              ; preds = %298, %292
  %299 = phi i64 [ 0, %292 ], [ %333, %298 ]
  %300 = phi i64 [ %293, %292 ], [ %334, %298 ]
  %301 = sub i64 0, %299
  %302 = sub i64 0, %299
  %303 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %294, i64 %301
  %304 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %295, i64 %302
  %305 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %304, i64 -1
  %306 = bitcast %"class.v8::internal::compiler::Node"** %305 to <2 x i64>*
  %307 = load <2 x i64>, <2 x i64>* %306, align 8, !alias.scope !3
  %308 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %304, i64 -2
  %309 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %308, i64 -1
  %310 = bitcast %"class.v8::internal::compiler::Node"** %309 to <2 x i64>*
  %311 = load <2 x i64>, <2 x i64>* %310, align 8, !alias.scope !3
  %312 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %303, i64 -1
  %313 = bitcast %"class.v8::internal::compiler::Node"** %312 to <2 x i64>*
  store <2 x i64> %307, <2 x i64>* %313, align 8, !alias.scope !6, !noalias !3
  %314 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %303, i64 -2
  %315 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %314, i64 -1
  %316 = bitcast %"class.v8::internal::compiler::Node"** %315 to <2 x i64>*
  store <2 x i64> %311, <2 x i64>* %316, align 8, !alias.scope !6, !noalias !3
  %317 = sub nuw nsw i64 -4, %299
  %318 = sub nuw nsw i64 -4, %299
  %319 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %296, i64 %317
  %320 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %297, i64 %318
  %321 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %320, i64 -1
  %322 = bitcast %"class.v8::internal::compiler::Node"** %321 to <2 x i64>*
  %323 = load <2 x i64>, <2 x i64>* %322, align 8, !alias.scope !3
  %324 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %320, i64 -2
  %325 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %324, i64 -1
  %326 = bitcast %"class.v8::internal::compiler::Node"** %325 to <2 x i64>*
  %327 = load <2 x i64>, <2 x i64>* %326, align 8, !alias.scope !3
  %328 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %319, i64 -1
  %329 = bitcast %"class.v8::internal::compiler::Node"** %328 to <2 x i64>*
  store <2 x i64> %323, <2 x i64>* %329, align 8, !alias.scope !6, !noalias !3
  %330 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %319, i64 -2
  %331 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %330, i64 -1
  %332 = bitcast %"class.v8::internal::compiler::Node"** %331 to <2 x i64>*
  store <2 x i64> %327, <2 x i64>* %332, align 8, !alias.scope !6, !noalias !3
  %333 = add i64 %299, 8
  %334 = add i64 %300, -2
  %335 = icmp eq i64 %334, 0
  br i1 %335, label %336, label %298, !llvm.loop !8

336:                                              ; preds = %298, %281
  %337 = phi i64 [ 0, %281 ], [ %333, %298 ]
  %338 = icmp eq i64 %290, 0
  br i1 %338, label %358, label %339

339:                                              ; preds = %336
  %340 = sub i64 0, %337
  %341 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %250, i64 -1
  %342 = sub i64 0, %337
  %343 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %258, i64 -1
  %344 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %341, i64 %340
  %345 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %343, i64 %342
  %346 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %345, i64 -1
  %347 = bitcast %"class.v8::internal::compiler::Node"** %346 to <2 x i64>*
  %348 = load <2 x i64>, <2 x i64>* %347, align 8, !alias.scope !3
  %349 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %345, i64 -2
  %350 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %349, i64 -1
  %351 = bitcast %"class.v8::internal::compiler::Node"** %350 to <2 x i64>*
  %352 = load <2 x i64>, <2 x i64>* %351, align 8, !alias.scope !3
  %353 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %344, i64 -1
  %354 = bitcast %"class.v8::internal::compiler::Node"** %353 to <2 x i64>*
  store <2 x i64> %348, <2 x i64>* %354, align 8, !alias.scope !6, !noalias !3
  %355 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %344, i64 -2
  %356 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %355, i64 -1
  %357 = bitcast %"class.v8::internal::compiler::Node"** %356 to <2 x i64>*
  store <2 x i64> %352, <2 x i64>* %357, align 8, !alias.scope !6, !noalias !3
  br label %358

358:                                              ; preds = %336, %339
  %359 = icmp eq i64 %265, %282
  br i1 %359, label %430, label %360

360:                                              ; preds = %358, %267, %260
  %361 = phi %"class.v8::internal::compiler::Node"** [ %250, %267 ], [ %250, %260 ], [ %284, %358 ]
  %362 = phi %"class.v8::internal::compiler::Node"** [ %258, %267 ], [ %258, %260 ], [ %286, %358 ]
  %363 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %362, i64 -1
  %364 = ptrtoint %"class.v8::internal::compiler::Node"** %363 to i64
  %365 = sub i64 %364, %257
  %366 = lshr i64 %365, 3
  %367 = add nuw nsw i64 %366, 1
  %368 = and i64 %367, 7
  %369 = icmp eq i64 %368, 0
  br i1 %369, label %381, label %370

370:                                              ; preds = %360, %370
  %371 = phi %"class.v8::internal::compiler::Node"** [ %374, %370 ], [ %361, %360 ]
  %372 = phi %"class.v8::internal::compiler::Node"** [ %375, %370 ], [ %362, %360 ]
  %373 = phi i64 [ %379, %370 ], [ %368, %360 ]
  %374 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %371, i64 -1
  %375 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %372, i64 -1
  %376 = bitcast %"class.v8::internal::compiler::Node"** %375 to i64*
  %377 = load i64, i64* %376, align 8
  %378 = bitcast %"class.v8::internal::compiler::Node"** %374 to i64*
  store i64 %377, i64* %378, align 8
  %379 = add i64 %373, -1
  %380 = icmp eq i64 %379, 0
  br i1 %380, label %381, label %370, !llvm.loop !10

381:                                              ; preds = %370, %360
  %382 = phi %"class.v8::internal::compiler::Node"** [ undef, %360 ], [ %374, %370 ]
  %383 = phi %"class.v8::internal::compiler::Node"** [ %361, %360 ], [ %374, %370 ]
  %384 = phi %"class.v8::internal::compiler::Node"** [ %362, %360 ], [ %375, %370 ]
  %385 = icmp ult i64 %365, 56
  br i1 %385, label %430, label %386

386:                                              ; preds = %381, %386
  %387 = phi %"class.v8::internal::compiler::Node"** [ %424, %386 ], [ %383, %381 ]
  %388 = phi %"class.v8::internal::compiler::Node"** [ %425, %386 ], [ %384, %381 ]
  %389 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %387, i64 -1
  %390 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %388, i64 -1
  %391 = bitcast %"class.v8::internal::compiler::Node"** %390 to i64*
  %392 = load i64, i64* %391, align 8
  %393 = bitcast %"class.v8::internal::compiler::Node"** %389 to i64*
  store i64 %392, i64* %393, align 8
  %394 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %387, i64 -2
  %395 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %388, i64 -2
  %396 = bitcast %"class.v8::internal::compiler::Node"** %395 to i64*
  %397 = load i64, i64* %396, align 8
  %398 = bitcast %"class.v8::internal::compiler::Node"** %394 to i64*
  store i64 %397, i64* %398, align 8
  %399 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %387, i64 -3
  %400 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %388, i64 -3
  %401 = bitcast %"class.v8::internal::compiler::Node"** %400 to i64*
  %402 = load i64, i64* %401, align 8
  %403 = bitcast %"class.v8::internal::compiler::Node"** %399 to i64*
  store i64 %402, i64* %403, align 8
  %404 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %387, i64 -4
  %405 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %388, i64 -4
  %406 = bitcast %"class.v8::internal::compiler::Node"** %405 to i64*
  %407 = load i64, i64* %406, align 8
  %408 = bitcast %"class.v8::internal::compiler::Node"** %404 to i64*
  store i64 %407, i64* %408, align 8
  %409 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %387, i64 -5
  %410 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %388, i64 -5
  %411 = bitcast %"class.v8::internal::compiler::Node"** %410 to i64*
  %412 = load i64, i64* %411, align 8
  %413 = bitcast %"class.v8::internal::compiler::Node"** %409 to i64*
  store i64 %412, i64* %413, align 8
  %414 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %387, i64 -6
  %415 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %388, i64 -6
  %416 = bitcast %"class.v8::internal::compiler::Node"** %415 to i64*
  %417 = load i64, i64* %416, align 8
  %418 = bitcast %"class.v8::internal::compiler::Node"** %414 to i64*
  store i64 %417, i64* %418, align 8
  %419 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %387, i64 -7
  %420 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %388, i64 -7
  %421 = bitcast %"class.v8::internal::compiler::Node"** %420 to i64*
  %422 = load i64, i64* %421, align 8
  %423 = bitcast %"class.v8::internal::compiler::Node"** %419 to i64*
  store i64 %422, i64* %423, align 8
  %424 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %387, i64 -8
  %425 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %388, i64 -8
  %426 = bitcast %"class.v8::internal::compiler::Node"** %425 to i64*
  %427 = load i64, i64* %426, align 8
  %428 = bitcast %"class.v8::internal::compiler::Node"** %424 to i64*
  store i64 %427, i64* %428, align 8
  %429 = icmp eq %"class.v8::internal::compiler::Node"** %425, %256
  br i1 %429, label %430, label %386, !llvm.loop !12

430:                                              ; preds = %381, %386, %358, %247
  %431 = phi %"class.v8::internal::compiler::Node"** [ %250, %247 ], [ %284, %358 ], [ %382, %381 ], [ %424, %386 ]
  %432 = ptrtoint %"class.v8::internal::compiler::Node"** %431 to i64
  store i64 %432, i64* %153, align 8
  store i64 %255, i64* %152, align 8
  store i64 %252, i64* %154, align 8
  br label %433

433:                                              ; preds = %208, %430
  %434 = add nuw nsw i64 %158, 1
  br label %157

435:                                              ; preds = %981, %173
  %436 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %156, align 8
  %437 = icmp eq %"class.v8::internal::compiler::Node"** %436, null
  br i1 %437, label %440, label %438

438:                                              ; preds = %435
  %439 = ptrtoint %"class.v8::internal::compiler::Node"** %436 to i64
  store i64 %439, i64* %152, align 8
  br label %440

440:                                              ; preds = %435, %438
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %142) #6
  br label %1048

441:                                              ; preds = %188, %981
  %442 = phi %"class.v8::internal::compiler::Node"** [ %190, %188 ], [ %982, %981 ]
  %443 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %442, align 8
  %444 = getelementptr inbounds %"class.v8::internal::compiler::Node", %"class.v8::internal::compiler::Node"* %443, i64 0, i32 0
  %445 = load %"class.v8::internal::compiler::Operator"*, %"class.v8::internal::compiler::Operator"** %444, align 8
  %446 = getelementptr inbounds %"class.v8::internal::compiler::Operator", %"class.v8::internal::compiler::Operator"* %445, i64 0, i32 2
  %447 = load i16, i16* %446, align 8
  %448 = icmp eq i16 %447, 1
  br i1 %448, label %981, label %449

449:                                              ; preds = %441
  %450 = load i64, i64* %153, align 8
  store i64 %450, i64* %152, align 8
  br i1 %191, label %451, label %981

451:                                              ; preds = %449
  %452 = getelementptr inbounds %"class.v8::internal::compiler::Node", %"class.v8::internal::compiler::Node"* %443, i64 0, i32 3
  %453 = ptrtoint %"class.v8::internal::compiler::Node"* %443 to i64
  %454 = add i64 %453, 32
  %455 = inttoptr i64 %454 to i64*
  br label %462

456:                                              ; preds = %707
  %457 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %156, align 8
  %458 = ptrtoint %"class.v8::internal::compiler::Node"** %457 to i64
  %459 = icmp eq %"class.v8::internal::compiler::Node"** %457, %708
  br i1 %459, label %981, label %460

460:                                              ; preds = %456
  %461 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %457, align 8
  br label %710

462:                                              ; preds = %707, %451
  %463 = phi i64 [ 0, %451 ], [ %464, %707 ]
  %464 = add nuw nsw i64 %463, 1
  %465 = load i32, i32* %452, align 4
  %466 = and i32 %465, 251658240
  %467 = icmp eq i32 %466, 251658240
  br i1 %467, label %468, label %471

468:                                              ; preds = %462
  %469 = load i64, i64* %455, align 8
  %470 = add i64 %469, 16
  br label %471

471:                                              ; preds = %462, %468
  %472 = phi i64 [ %470, %468 ], [ %454, %462 ]
  %473 = inttoptr i64 %472 to %"class.v8::internal::compiler::Node"**
  %474 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %473, i64 %464
  %475 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %474, align 8
  %476 = call %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler10NodeCopier3mapEPNS1_4NodeEj(%"class.v8::internal::compiler::NodeCopier"* nonnull %3, %"class.v8::internal::compiler::Node"* %475, i32 0) #6
  %477 = ptrtoint %"class.v8::internal::compiler::Node"* %476 to i64
  %478 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %150, align 8
  %479 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %151, align 8
  %480 = icmp ult %"class.v8::internal::compiler::Node"** %478, %479
  %481 = ptrtoint %"class.v8::internal::compiler::Node"** %479 to i64
  br i1 %480, label %482, label %486

482:                                              ; preds = %471
  %483 = bitcast %"class.v8::internal::compiler::Node"** %478 to i64*
  store i64 %477, i64* %483, align 8
  %484 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %478, i64 1
  %485 = ptrtoint %"class.v8::internal::compiler::Node"** %484 to i64
  store i64 %485, i64* %152, align 8
  br label %707

486:                                              ; preds = %471
  %487 = ptrtoint %"class.v8::internal::compiler::Node"** %478 to i64
  %488 = load i64, i64* %153, align 8
  %489 = sub i64 %487, %488
  %490 = ashr exact i64 %489, 3
  %491 = add nsw i64 %490, 1
  %492 = icmp ugt i64 %491, 268435455
  br i1 %492, label %493, label %495

493:                                              ; preds = %486
  %494 = bitcast %"class.v8::internal::ZoneVector"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %494) #7
  unreachable

495:                                              ; preds = %486
  %496 = sub i64 %481, %488
  %497 = ashr exact i64 %496, 3
  %498 = icmp ult i64 %497, 134217727
  br i1 %498, label %499, label %504

499:                                              ; preds = %495
  %500 = ashr exact i64 %496, 2
  %501 = icmp ult i64 %500, %491
  %502 = select i1 %501, i64 %491, i64 %500
  %503 = icmp eq i64 %502, 0
  br i1 %503, label %521, label %504

504:                                              ; preds = %499, %495
  %505 = phi i64 [ %502, %499 ], [ 268435455, %495 ]
  %506 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %155, align 8
  %507 = shl i64 %505, 3
  %508 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %506, i64 0, i32 2
  %509 = load i64, i64* %508, align 8
  %510 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %506, i64 0, i32 3
  %511 = load i64, i64* %510, align 8
  %512 = sub i64 %511, %509
  %513 = icmp ugt i64 %507, %512
  br i1 %513, label %514, label %516, !prof !2

514:                                              ; preds = %504
  %515 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %506, i64 %507) #6
  br label %518

516:                                              ; preds = %504
  %517 = add i64 %509, %507
  store i64 %517, i64* %508, align 8
  br label %518

518:                                              ; preds = %516, %514
  %519 = phi i64 [ %515, %514 ], [ %509, %516 ]
  %520 = inttoptr i64 %519 to %"class.v8::internal::compiler::Node"**
  br label %521

521:                                              ; preds = %518, %499
  %522 = phi i64 [ %505, %518 ], [ 0, %499 ]
  %523 = phi %"class.v8::internal::compiler::Node"** [ %520, %518 ], [ null, %499 ]
  %524 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %523, i64 %490
  %525 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %523, i64 %522
  %526 = ptrtoint %"class.v8::internal::compiler::Node"** %525 to i64
  %527 = bitcast %"class.v8::internal::compiler::Node"** %524 to i64*
  store i64 %477, i64* %527, align 8
  %528 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %524, i64 1
  %529 = ptrtoint %"class.v8::internal::compiler::Node"** %528 to i64
  %530 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %156, align 8
  %531 = ptrtoint %"class.v8::internal::compiler::Node"** %530 to i64
  %532 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %150, align 8
  %533 = icmp eq %"class.v8::internal::compiler::Node"** %532, %530
  br i1 %533, label %704, label %534

534:                                              ; preds = %521
  %535 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %532, i64 -1
  %536 = ptrtoint %"class.v8::internal::compiler::Node"** %535 to i64
  %537 = sub i64 %536, %531
  %538 = lshr i64 %537, 3
  %539 = add nuw nsw i64 %538, 1
  %540 = icmp ult i64 %539, 4
  br i1 %540, label %634, label %541

541:                                              ; preds = %534
  %542 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %523, i64 -1
  %543 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %532, i64 -1
  %544 = ptrtoint %"class.v8::internal::compiler::Node"** %543 to i64
  %545 = sub i64 %544, %531
  %546 = lshr i64 %545, 3
  %547 = sub nsw i64 %490, %546
  %548 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %542, i64 %547
  %549 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %532, i64 -1
  %550 = sub nsw i64 0, %546
  %551 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %549, i64 %550
  %552 = icmp ult %"class.v8::internal::compiler::Node"** %548, %532
  %553 = icmp ult %"class.v8::internal::compiler::Node"** %551, %524
  %554 = and i1 %552, %553
  br i1 %554, label %634, label %555

555:                                              ; preds = %541
  %556 = and i64 %539, 4611686018427387900
  %557 = sub nsw i64 0, %556
  %558 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %524, i64 %557
  %559 = sub nsw i64 0, %556
  %560 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %532, i64 %559
  %561 = add nsw i64 %556, -4
  %562 = lshr exact i64 %561, 2
  %563 = add nuw nsw i64 %562, 1
  %564 = and i64 %563, 1
  %565 = icmp eq i64 %561, 0
  br i1 %565, label %610, label %566

566:                                              ; preds = %555
  %567 = sub nuw nsw i64 %563, %564
  %568 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %524, i64 -1
  %569 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %532, i64 -1
  %570 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %524, i64 -1
  %571 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %532, i64 -1
  br label %572

572:                                              ; preds = %572, %566
  %573 = phi i64 [ 0, %566 ], [ %607, %572 ]
  %574 = phi i64 [ %567, %566 ], [ %608, %572 ]
  %575 = sub i64 0, %573
  %576 = sub i64 0, %573
  %577 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %568, i64 %575
  %578 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %569, i64 %576
  %579 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %578, i64 -1
  %580 = bitcast %"class.v8::internal::compiler::Node"** %579 to <2 x i64>*
  %581 = load <2 x i64>, <2 x i64>* %580, align 8, !alias.scope !13
  %582 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %578, i64 -2
  %583 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %582, i64 -1
  %584 = bitcast %"class.v8::internal::compiler::Node"** %583 to <2 x i64>*
  %585 = load <2 x i64>, <2 x i64>* %584, align 8, !alias.scope !13
  %586 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %577, i64 -1
  %587 = bitcast %"class.v8::internal::compiler::Node"** %586 to <2 x i64>*
  store <2 x i64> %581, <2 x i64>* %587, align 8, !alias.scope !16, !noalias !13
  %588 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %577, i64 -2
  %589 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %588, i64 -1
  %590 = bitcast %"class.v8::internal::compiler::Node"** %589 to <2 x i64>*
  store <2 x i64> %585, <2 x i64>* %590, align 8, !alias.scope !16, !noalias !13
  %591 = sub nuw nsw i64 -4, %573
  %592 = sub nuw nsw i64 -4, %573
  %593 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %570, i64 %591
  %594 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %571, i64 %592
  %595 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %594, i64 -1
  %596 = bitcast %"class.v8::internal::compiler::Node"** %595 to <2 x i64>*
  %597 = load <2 x i64>, <2 x i64>* %596, align 8, !alias.scope !13
  %598 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %594, i64 -2
  %599 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %598, i64 -1
  %600 = bitcast %"class.v8::internal::compiler::Node"** %599 to <2 x i64>*
  %601 = load <2 x i64>, <2 x i64>* %600, align 8, !alias.scope !13
  %602 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %593, i64 -1
  %603 = bitcast %"class.v8::internal::compiler::Node"** %602 to <2 x i64>*
  store <2 x i64> %597, <2 x i64>* %603, align 8, !alias.scope !16, !noalias !13
  %604 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %593, i64 -2
  %605 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %604, i64 -1
  %606 = bitcast %"class.v8::internal::compiler::Node"** %605 to <2 x i64>*
  store <2 x i64> %601, <2 x i64>* %606, align 8, !alias.scope !16, !noalias !13
  %607 = add i64 %573, 8
  %608 = add i64 %574, -2
  %609 = icmp eq i64 %608, 0
  br i1 %609, label %610, label %572, !llvm.loop !18

610:                                              ; preds = %572, %555
  %611 = phi i64 [ 0, %555 ], [ %607, %572 ]
  %612 = icmp eq i64 %564, 0
  br i1 %612, label %632, label %613

613:                                              ; preds = %610
  %614 = sub i64 0, %611
  %615 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %524, i64 -1
  %616 = sub i64 0, %611
  %617 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %532, i64 -1
  %618 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %615, i64 %614
  %619 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %617, i64 %616
  %620 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %619, i64 -1
  %621 = bitcast %"class.v8::internal::compiler::Node"** %620 to <2 x i64>*
  %622 = load <2 x i64>, <2 x i64>* %621, align 8, !alias.scope !13
  %623 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %619, i64 -2
  %624 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %623, i64 -1
  %625 = bitcast %"class.v8::internal::compiler::Node"** %624 to <2 x i64>*
  %626 = load <2 x i64>, <2 x i64>* %625, align 8, !alias.scope !13
  %627 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %618, i64 -1
  %628 = bitcast %"class.v8::internal::compiler::Node"** %627 to <2 x i64>*
  store <2 x i64> %622, <2 x i64>* %628, align 8, !alias.scope !16, !noalias !13
  %629 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %618, i64 -2
  %630 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %629, i64 -1
  %631 = bitcast %"class.v8::internal::compiler::Node"** %630 to <2 x i64>*
  store <2 x i64> %626, <2 x i64>* %631, align 8, !alias.scope !16, !noalias !13
  br label %632

632:                                              ; preds = %610, %613
  %633 = icmp eq i64 %539, %556
  br i1 %633, label %704, label %634

634:                                              ; preds = %632, %541, %534
  %635 = phi %"class.v8::internal::compiler::Node"** [ %524, %541 ], [ %524, %534 ], [ %558, %632 ]
  %636 = phi %"class.v8::internal::compiler::Node"** [ %532, %541 ], [ %532, %534 ], [ %560, %632 ]
  %637 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %636, i64 -1
  %638 = ptrtoint %"class.v8::internal::compiler::Node"** %637 to i64
  %639 = sub i64 %638, %531
  %640 = lshr i64 %639, 3
  %641 = add nuw nsw i64 %640, 1
  %642 = and i64 %641, 7
  %643 = icmp eq i64 %642, 0
  br i1 %643, label %655, label %644

644:                                              ; preds = %634, %644
  %645 = phi %"class.v8::internal::compiler::Node"** [ %648, %644 ], [ %635, %634 ]
  %646 = phi %"class.v8::internal::compiler::Node"** [ %649, %644 ], [ %636, %634 ]
  %647 = phi i64 [ %653, %644 ], [ %642, %634 ]
  %648 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %645, i64 -1
  %649 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %646, i64 -1
  %650 = bitcast %"class.v8::internal::compiler::Node"** %649 to i64*
  %651 = load i64, i64* %650, align 8
  %652 = bitcast %"class.v8::internal::compiler::Node"** %648 to i64*
  store i64 %651, i64* %652, align 8
  %653 = add i64 %647, -1
  %654 = icmp eq i64 %653, 0
  br i1 %654, label %655, label %644, !llvm.loop !19

655:                                              ; preds = %644, %634
  %656 = phi %"class.v8::internal::compiler::Node"** [ undef, %634 ], [ %648, %644 ]
  %657 = phi %"class.v8::internal::compiler::Node"** [ %635, %634 ], [ %648, %644 ]
  %658 = phi %"class.v8::internal::compiler::Node"** [ %636, %634 ], [ %649, %644 ]
  %659 = icmp ult i64 %639, 56
  br i1 %659, label %704, label %660

660:                                              ; preds = %655, %660
  %661 = phi %"class.v8::internal::compiler::Node"** [ %698, %660 ], [ %657, %655 ]
  %662 = phi %"class.v8::internal::compiler::Node"** [ %699, %660 ], [ %658, %655 ]
  %663 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %661, i64 -1
  %664 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %662, i64 -1
  %665 = bitcast %"class.v8::internal::compiler::Node"** %664 to i64*
  %666 = load i64, i64* %665, align 8
  %667 = bitcast %"class.v8::internal::compiler::Node"** %663 to i64*
  store i64 %666, i64* %667, align 8
  %668 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %661, i64 -2
  %669 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %662, i64 -2
  %670 = bitcast %"class.v8::internal::compiler::Node"** %669 to i64*
  %671 = load i64, i64* %670, align 8
  %672 = bitcast %"class.v8::internal::compiler::Node"** %668 to i64*
  store i64 %671, i64* %672, align 8
  %673 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %661, i64 -3
  %674 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %662, i64 -3
  %675 = bitcast %"class.v8::internal::compiler::Node"** %674 to i64*
  %676 = load i64, i64* %675, align 8
  %677 = bitcast %"class.v8::internal::compiler::Node"** %673 to i64*
  store i64 %676, i64* %677, align 8
  %678 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %661, i64 -4
  %679 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %662, i64 -4
  %680 = bitcast %"class.v8::internal::compiler::Node"** %679 to i64*
  %681 = load i64, i64* %680, align 8
  %682 = bitcast %"class.v8::internal::compiler::Node"** %678 to i64*
  store i64 %681, i64* %682, align 8
  %683 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %661, i64 -5
  %684 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %662, i64 -5
  %685 = bitcast %"class.v8::internal::compiler::Node"** %684 to i64*
  %686 = load i64, i64* %685, align 8
  %687 = bitcast %"class.v8::internal::compiler::Node"** %683 to i64*
  store i64 %686, i64* %687, align 8
  %688 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %661, i64 -6
  %689 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %662, i64 -6
  %690 = bitcast %"class.v8::internal::compiler::Node"** %689 to i64*
  %691 = load i64, i64* %690, align 8
  %692 = bitcast %"class.v8::internal::compiler::Node"** %688 to i64*
  store i64 %691, i64* %692, align 8
  %693 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %661, i64 -7
  %694 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %662, i64 -7
  %695 = bitcast %"class.v8::internal::compiler::Node"** %694 to i64*
  %696 = load i64, i64* %695, align 8
  %697 = bitcast %"class.v8::internal::compiler::Node"** %693 to i64*
  store i64 %696, i64* %697, align 8
  %698 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %661, i64 -8
  %699 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %662, i64 -8
  %700 = bitcast %"class.v8::internal::compiler::Node"** %699 to i64*
  %701 = load i64, i64* %700, align 8
  %702 = bitcast %"class.v8::internal::compiler::Node"** %698 to i64*
  store i64 %701, i64* %702, align 8
  %703 = icmp eq %"class.v8::internal::compiler::Node"** %699, %530
  br i1 %703, label %704, label %660, !llvm.loop !20

704:                                              ; preds = %655, %660, %632, %521
  %705 = phi %"class.v8::internal::compiler::Node"** [ %524, %521 ], [ %558, %632 ], [ %656, %655 ], [ %698, %660 ]
  %706 = ptrtoint %"class.v8::internal::compiler::Node"** %705 to i64
  store i64 %706, i64* %153, align 8
  store i64 %529, i64* %152, align 8
  store i64 %526, i64* %154, align 8
  br label %707

707:                                              ; preds = %482, %704
  %708 = phi %"class.v8::internal::compiler::Node"** [ %484, %482 ], [ %528, %704 ]
  %709 = icmp eq i64 %464, %192
  br i1 %709, label %456, label %462

710:                                              ; preds = %460, %714
  %711 = phi %"class.v8::internal::compiler::Node"** [ %457, %460 ], [ %712, %714 ]
  %712 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %711, i64 1
  %713 = icmp eq %"class.v8::internal::compiler::Node"** %712, %708
  br i1 %713, label %981, label %714

714:                                              ; preds = %710
  %715 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %712, align 8
  %716 = icmp eq %"class.v8::internal::compiler::Node"* %715, %461
  br i1 %716, label %710, label %717

717:                                              ; preds = %714
  %718 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %151, align 8
  %719 = icmp eq %"class.v8::internal::compiler::Node"** %708, %718
  %720 = ptrtoint %"class.v8::internal::compiler::Node"** %718 to i64
  br i1 %719, label %725, label %721

721:                                              ; preds = %717
  %722 = bitcast %"class.v8::internal::compiler::Node"** %708 to i64*
  store i64 %179, i64* %722, align 8
  %723 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %708, i64 1
  %724 = ptrtoint %"class.v8::internal::compiler::Node"** %723 to i64
  store i64 %724, i64* %152, align 8
  br label %945

725:                                              ; preds = %717
  %726 = ptrtoint %"class.v8::internal::compiler::Node"** %708 to i64
  %727 = sub i64 %726, %458
  %728 = ashr exact i64 %727, 3
  %729 = add nsw i64 %728, 1
  %730 = icmp ugt i64 %729, 268435455
  br i1 %730, label %731, label %733

731:                                              ; preds = %725
  %732 = bitcast %"class.v8::internal::ZoneVector"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %732) #7
  unreachable

733:                                              ; preds = %725
  %734 = sub i64 %720, %458
  %735 = ashr exact i64 %734, 3
  %736 = icmp ult i64 %735, 134217727
  br i1 %736, label %737, label %742

737:                                              ; preds = %733
  %738 = ashr exact i64 %734, 2
  %739 = icmp ult i64 %738, %729
  %740 = select i1 %739, i64 %729, i64 %738
  %741 = icmp eq i64 %740, 0
  br i1 %741, label %759, label %742

742:                                              ; preds = %737, %733
  %743 = phi i64 [ %740, %737 ], [ 268435455, %733 ]
  %744 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %155, align 8
  %745 = shl i64 %743, 3
  %746 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %744, i64 0, i32 2
  %747 = load i64, i64* %746, align 8
  %748 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %744, i64 0, i32 3
  %749 = load i64, i64* %748, align 8
  %750 = sub i64 %749, %747
  %751 = icmp ugt i64 %745, %750
  br i1 %751, label %752, label %754, !prof !2

752:                                              ; preds = %742
  %753 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %744, i64 %745) #6
  br label %756

754:                                              ; preds = %742
  %755 = add i64 %747, %745
  store i64 %755, i64* %746, align 8
  br label %756

756:                                              ; preds = %754, %752
  %757 = phi i64 [ %753, %752 ], [ %747, %754 ]
  %758 = inttoptr i64 %757 to %"class.v8::internal::compiler::Node"**
  br label %759

759:                                              ; preds = %756, %737
  %760 = phi i64 [ %743, %756 ], [ 0, %737 ]
  %761 = phi %"class.v8::internal::compiler::Node"** [ %758, %756 ], [ null, %737 ]
  %762 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %761, i64 %728
  %763 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %761, i64 %760
  %764 = ptrtoint %"class.v8::internal::compiler::Node"** %763 to i64
  %765 = bitcast %"class.v8::internal::compiler::Node"** %762 to i64*
  store i64 %179, i64* %765, align 8
  %766 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %762, i64 1
  %767 = ptrtoint %"class.v8::internal::compiler::Node"** %766 to i64
  %768 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %156, align 8
  %769 = ptrtoint %"class.v8::internal::compiler::Node"** %768 to i64
  %770 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %150, align 8
  %771 = icmp eq %"class.v8::internal::compiler::Node"** %770, %768
  br i1 %771, label %942, label %772

772:                                              ; preds = %759
  %773 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %770, i64 -1
  %774 = ptrtoint %"class.v8::internal::compiler::Node"** %773 to i64
  %775 = sub i64 %774, %769
  %776 = lshr i64 %775, 3
  %777 = add nuw nsw i64 %776, 1
  %778 = icmp ult i64 %777, 4
  br i1 %778, label %872, label %779

779:                                              ; preds = %772
  %780 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %761, i64 -1
  %781 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %770, i64 -1
  %782 = ptrtoint %"class.v8::internal::compiler::Node"** %781 to i64
  %783 = sub i64 %782, %769
  %784 = lshr i64 %783, 3
  %785 = sub nsw i64 %728, %784
  %786 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %780, i64 %785
  %787 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %770, i64 -1
  %788 = sub nsw i64 0, %784
  %789 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %787, i64 %788
  %790 = icmp ult %"class.v8::internal::compiler::Node"** %786, %770
  %791 = icmp ult %"class.v8::internal::compiler::Node"** %789, %762
  %792 = and i1 %790, %791
  br i1 %792, label %872, label %793

793:                                              ; preds = %779
  %794 = and i64 %777, 4611686018427387900
  %795 = sub nsw i64 0, %794
  %796 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %762, i64 %795
  %797 = sub nsw i64 0, %794
  %798 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %770, i64 %797
  %799 = add nsw i64 %794, -4
  %800 = lshr exact i64 %799, 2
  %801 = add nuw nsw i64 %800, 1
  %802 = and i64 %801, 1
  %803 = icmp eq i64 %799, 0
  br i1 %803, label %848, label %804

804:                                              ; preds = %793
  %805 = sub nuw nsw i64 %801, %802
  %806 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %762, i64 -1
  %807 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %770, i64 -1
  %808 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %762, i64 -1
  %809 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %770, i64 -1
  br label %810

810:                                              ; preds = %810, %804
  %811 = phi i64 [ 0, %804 ], [ %845, %810 ]
  %812 = phi i64 [ %805, %804 ], [ %846, %810 ]
  %813 = sub i64 0, %811
  %814 = sub i64 0, %811
  %815 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %806, i64 %813
  %816 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %807, i64 %814
  %817 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %816, i64 -1
  %818 = bitcast %"class.v8::internal::compiler::Node"** %817 to <2 x i64>*
  %819 = load <2 x i64>, <2 x i64>* %818, align 8, !alias.scope !21
  %820 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %816, i64 -2
  %821 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %820, i64 -1
  %822 = bitcast %"class.v8::internal::compiler::Node"** %821 to <2 x i64>*
  %823 = load <2 x i64>, <2 x i64>* %822, align 8, !alias.scope !21
  %824 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %815, i64 -1
  %825 = bitcast %"class.v8::internal::compiler::Node"** %824 to <2 x i64>*
  store <2 x i64> %819, <2 x i64>* %825, align 8, !alias.scope !24, !noalias !21
  %826 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %815, i64 -2
  %827 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %826, i64 -1
  %828 = bitcast %"class.v8::internal::compiler::Node"** %827 to <2 x i64>*
  store <2 x i64> %823, <2 x i64>* %828, align 8, !alias.scope !24, !noalias !21
  %829 = sub nuw nsw i64 -4, %811
  %830 = sub nuw nsw i64 -4, %811
  %831 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %808, i64 %829
  %832 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %809, i64 %830
  %833 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %832, i64 -1
  %834 = bitcast %"class.v8::internal::compiler::Node"** %833 to <2 x i64>*
  %835 = load <2 x i64>, <2 x i64>* %834, align 8, !alias.scope !21
  %836 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %832, i64 -2
  %837 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %836, i64 -1
  %838 = bitcast %"class.v8::internal::compiler::Node"** %837 to <2 x i64>*
  %839 = load <2 x i64>, <2 x i64>* %838, align 8, !alias.scope !21
  %840 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %831, i64 -1
  %841 = bitcast %"class.v8::internal::compiler::Node"** %840 to <2 x i64>*
  store <2 x i64> %835, <2 x i64>* %841, align 8, !alias.scope !24, !noalias !21
  %842 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %831, i64 -2
  %843 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %842, i64 -1
  %844 = bitcast %"class.v8::internal::compiler::Node"** %843 to <2 x i64>*
  store <2 x i64> %839, <2 x i64>* %844, align 8, !alias.scope !24, !noalias !21
  %845 = add i64 %811, 8
  %846 = add i64 %812, -2
  %847 = icmp eq i64 %846, 0
  br i1 %847, label %848, label %810, !llvm.loop !26

848:                                              ; preds = %810, %793
  %849 = phi i64 [ 0, %793 ], [ %845, %810 ]
  %850 = icmp eq i64 %802, 0
  br i1 %850, label %870, label %851

851:                                              ; preds = %848
  %852 = sub i64 0, %849
  %853 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %762, i64 -1
  %854 = sub i64 0, %849
  %855 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %770, i64 -1
  %856 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %853, i64 %852
  %857 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %855, i64 %854
  %858 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %857, i64 -1
  %859 = bitcast %"class.v8::internal::compiler::Node"** %858 to <2 x i64>*
  %860 = load <2 x i64>, <2 x i64>* %859, align 8, !alias.scope !21
  %861 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %857, i64 -2
  %862 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %861, i64 -1
  %863 = bitcast %"class.v8::internal::compiler::Node"** %862 to <2 x i64>*
  %864 = load <2 x i64>, <2 x i64>* %863, align 8, !alias.scope !21
  %865 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %856, i64 -1
  %866 = bitcast %"class.v8::internal::compiler::Node"** %865 to <2 x i64>*
  store <2 x i64> %860, <2 x i64>* %866, align 8, !alias.scope !24, !noalias !21
  %867 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %856, i64 -2
  %868 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %867, i64 -1
  %869 = bitcast %"class.v8::internal::compiler::Node"** %868 to <2 x i64>*
  store <2 x i64> %864, <2 x i64>* %869, align 8, !alias.scope !24, !noalias !21
  br label %870

870:                                              ; preds = %848, %851
  %871 = icmp eq i64 %777, %794
  br i1 %871, label %942, label %872

872:                                              ; preds = %870, %779, %772
  %873 = phi %"class.v8::internal::compiler::Node"** [ %762, %779 ], [ %762, %772 ], [ %796, %870 ]
  %874 = phi %"class.v8::internal::compiler::Node"** [ %770, %779 ], [ %770, %772 ], [ %798, %870 ]
  %875 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %874, i64 -1
  %876 = ptrtoint %"class.v8::internal::compiler::Node"** %875 to i64
  %877 = sub i64 %876, %769
  %878 = lshr i64 %877, 3
  %879 = add nuw nsw i64 %878, 1
  %880 = and i64 %879, 7
  %881 = icmp eq i64 %880, 0
  br i1 %881, label %893, label %882

882:                                              ; preds = %872, %882
  %883 = phi %"class.v8::internal::compiler::Node"** [ %886, %882 ], [ %873, %872 ]
  %884 = phi %"class.v8::internal::compiler::Node"** [ %887, %882 ], [ %874, %872 ]
  %885 = phi i64 [ %891, %882 ], [ %880, %872 ]
  %886 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %883, i64 -1
  %887 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %884, i64 -1
  %888 = bitcast %"class.v8::internal::compiler::Node"** %887 to i64*
  %889 = load i64, i64* %888, align 8
  %890 = bitcast %"class.v8::internal::compiler::Node"** %886 to i64*
  store i64 %889, i64* %890, align 8
  %891 = add i64 %885, -1
  %892 = icmp eq i64 %891, 0
  br i1 %892, label %893, label %882, !llvm.loop !27

893:                                              ; preds = %882, %872
  %894 = phi %"class.v8::internal::compiler::Node"** [ undef, %872 ], [ %886, %882 ]
  %895 = phi %"class.v8::internal::compiler::Node"** [ %873, %872 ], [ %886, %882 ]
  %896 = phi %"class.v8::internal::compiler::Node"** [ %874, %872 ], [ %887, %882 ]
  %897 = icmp ult i64 %877, 56
  br i1 %897, label %942, label %898

898:                                              ; preds = %893, %898
  %899 = phi %"class.v8::internal::compiler::Node"** [ %936, %898 ], [ %895, %893 ]
  %900 = phi %"class.v8::internal::compiler::Node"** [ %937, %898 ], [ %896, %893 ]
  %901 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %899, i64 -1
  %902 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %900, i64 -1
  %903 = bitcast %"class.v8::internal::compiler::Node"** %902 to i64*
  %904 = load i64, i64* %903, align 8
  %905 = bitcast %"class.v8::internal::compiler::Node"** %901 to i64*
  store i64 %904, i64* %905, align 8
  %906 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %899, i64 -2
  %907 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %900, i64 -2
  %908 = bitcast %"class.v8::internal::compiler::Node"** %907 to i64*
  %909 = load i64, i64* %908, align 8
  %910 = bitcast %"class.v8::internal::compiler::Node"** %906 to i64*
  store i64 %909, i64* %910, align 8
  %911 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %899, i64 -3
  %912 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %900, i64 -3
  %913 = bitcast %"class.v8::internal::compiler::Node"** %912 to i64*
  %914 = load i64, i64* %913, align 8
  %915 = bitcast %"class.v8::internal::compiler::Node"** %911 to i64*
  store i64 %914, i64* %915, align 8
  %916 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %899, i64 -4
  %917 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %900, i64 -4
  %918 = bitcast %"class.v8::internal::compiler::Node"** %917 to i64*
  %919 = load i64, i64* %918, align 8
  %920 = bitcast %"class.v8::internal::compiler::Node"** %916 to i64*
  store i64 %919, i64* %920, align 8
  %921 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %899, i64 -5
  %922 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %900, i64 -5
  %923 = bitcast %"class.v8::internal::compiler::Node"** %922 to i64*
  %924 = load i64, i64* %923, align 8
  %925 = bitcast %"class.v8::internal::compiler::Node"** %921 to i64*
  store i64 %924, i64* %925, align 8
  %926 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %899, i64 -6
  %927 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %900, i64 -6
  %928 = bitcast %"class.v8::internal::compiler::Node"** %927 to i64*
  %929 = load i64, i64* %928, align 8
  %930 = bitcast %"class.v8::internal::compiler::Node"** %926 to i64*
  store i64 %929, i64* %930, align 8
  %931 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %899, i64 -7
  %932 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %900, i64 -7
  %933 = bitcast %"class.v8::internal::compiler::Node"** %932 to i64*
  %934 = load i64, i64* %933, align 8
  %935 = bitcast %"class.v8::internal::compiler::Node"** %931 to i64*
  store i64 %934, i64* %935, align 8
  %936 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %899, i64 -8
  %937 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %900, i64 -8
  %938 = bitcast %"class.v8::internal::compiler::Node"** %937 to i64*
  %939 = load i64, i64* %938, align 8
  %940 = bitcast %"class.v8::internal::compiler::Node"** %936 to i64*
  store i64 %939, i64* %940, align 8
  %941 = icmp eq %"class.v8::internal::compiler::Node"** %937, %768
  br i1 %941, label %942, label %898, !llvm.loop !28

942:                                              ; preds = %893, %898, %870, %759
  %943 = phi %"class.v8::internal::compiler::Node"** [ %762, %759 ], [ %796, %870 ], [ %894, %893 ], [ %936, %898 ]
  %944 = ptrtoint %"class.v8::internal::compiler::Node"** %943 to i64
  store i64 %944, i64* %153, align 8
  store i64 %767, i64* %152, align 8
  store i64 %764, i64* %154, align 8
  br label %945

945:                                              ; preds = %721, %942
  %946 = load %"class.v8::internal::compiler::CommonOperatorBuilder"*, %"class.v8::internal::compiler::CommonOperatorBuilder"** %44, align 8
  %947 = load %"class.v8::internal::compiler::Operator"*, %"class.v8::internal::compiler::Operator"** %444, align 8
  %948 = call %"class.v8::internal::compiler::Operator"* @_ZN2v88internal8compiler21CommonOperatorBuilder16ResizeMergeOrPhiEPKNS1_8OperatorEi(%"class.v8::internal::compiler::CommonOperatorBuilder"* %946, %"class.v8::internal::compiler::Operator"* %947, i32 %120) #6
  %949 = load %"class.v8::internal::compiler::Graph"*, %"class.v8::internal::compiler::Graph"** %37, align 8
  %950 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %156, align 8
  %951 = call %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler5Graph7NewNodeEPKNS1_8OperatorEiPKPNS1_4NodeEb(%"class.v8::internal::compiler::Graph"* %949, %"class.v8::internal::compiler::Operator"* %948, i32 %119, %"class.v8::internal::compiler::Node"** %950, i1 zeroext false) #6
  %952 = getelementptr inbounds %"class.v8::internal::compiler::Node", %"class.v8::internal::compiler::Node"* %443, i64 0, i32 3
  %953 = load i32, i32* %952, align 4
  %954 = and i32 %953, 251658240
  %955 = icmp eq i32 %954, 251658240
  %956 = ptrtoint %"class.v8::internal::compiler::Node"* %443 to i64
  %957 = add i64 %956, 32
  br i1 %955, label %958, label %962

958:                                              ; preds = %945
  %959 = inttoptr i64 %957 to i64*
  %960 = load i64, i64* %959, align 8
  %961 = add i64 %960, 16
  br label %962

962:                                              ; preds = %945, %958
  %963 = phi i64 [ %961, %958 ], [ %957, %945 ]
  %964 = inttoptr i64 %963 to %"class.v8::internal::compiler::Node"**
  %965 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %964, align 8
  %966 = icmp eq %"class.v8::internal::compiler::Node"* %965, %951
  br i1 %966, label %981, label %967

967:                                              ; preds = %962
  br i1 %955, label %970, label %968

968:                                              ; preds = %967
  %969 = bitcast %"class.v8::internal::compiler::Node"* %443 to %"struct.v8::internal::compiler::Node::Use"*
  br label %973

970:                                              ; preds = %967
  %971 = inttoptr i64 %957 to %"struct.v8::internal::compiler::Node::Use"**
  %972 = load %"struct.v8::internal::compiler::Node::Use"*, %"struct.v8::internal::compiler::Node::Use"** %971, align 8
  br label %973

973:                                              ; preds = %970, %968
  %974 = phi %"struct.v8::internal::compiler::Node::Use"* [ %969, %968 ], [ %972, %970 ]
  %975 = getelementptr inbounds %"struct.v8::internal::compiler::Node::Use", %"struct.v8::internal::compiler::Node::Use"* %974, i64 -1
  %976 = icmp eq %"class.v8::internal::compiler::Node"* %965, null
  br i1 %976, label %978, label %977

977:                                              ; preds = %973
  call void @_ZN2v88internal8compiler4Node9RemoveUseEPNS2_3UseE(%"class.v8::internal::compiler::Node"* nonnull %965, %"struct.v8::internal::compiler::Node::Use"* %975) #6
  br label %978

978:                                              ; preds = %977, %973
  store %"class.v8::internal::compiler::Node"* %951, %"class.v8::internal::compiler::Node"** %964, align 8
  %979 = icmp eq %"class.v8::internal::compiler::Node"* %951, null
  br i1 %979, label %981, label %980

980:                                              ; preds = %978
  call void @_ZN2v88internal8compiler4Node9AppendUseEPNS2_3UseE(%"class.v8::internal::compiler::Node"* nonnull %951, %"struct.v8::internal::compiler::Node::Use"* %975) #6
  br label %981

981:                                              ; preds = %710, %449, %456, %962, %978, %980, %441
  %982 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %442, i64 1
  %983 = icmp eq %"class.v8::internal::compiler::Node"** %982, %186
  br i1 %983, label %435, label %441

984:                                              ; preds = %1045
  %985 = load i32, i32* %104, align 4
  %986 = and i32 %985, 251658240
  %987 = icmp eq i32 %986, 251658240
  %988 = ptrtoint %"class.v8::internal::compiler::Node"* %95 to i64
  %989 = add i64 %988, 32
  br i1 %987, label %990, label %994

990:                                              ; preds = %984
  %991 = inttoptr i64 %989 to i64*
  %992 = load i64, i64* %991, align 8
  %993 = add i64 %992, 16
  br label %994

994:                                              ; preds = %984, %990
  %995 = phi i64 [ %993, %990 ], [ %989, %984 ]
  %996 = inttoptr i64 %995 to %"class.v8::internal::compiler::Node"**
  %997 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %996, i64 1
  %998 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %997, align 8
  %999 = call %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler10NodeCopier3mapEPNS1_4NodeEj(%"class.v8::internal::compiler::NodeCopier"* nonnull %3, %"class.v8::internal::compiler::Node"* %998, i32 0) #6
  br label %1048

1000:                                             ; preds = %118, %1045
  %1001 = phi %"class.v8::internal::compiler::Node"** [ %1046, %1045 ], [ %90, %118 ]
  %1002 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1001, align 8
  %1003 = getelementptr inbounds %"class.v8::internal::compiler::Node", %"class.v8::internal::compiler::Node"* %1002, i64 0, i32 3
  %1004 = load i32, i32* %1003, align 4
  %1005 = and i32 %1004, 251658240
  %1006 = icmp eq i32 %1005, 251658240
  %1007 = ptrtoint %"class.v8::internal::compiler::Node"* %1002 to i64
  %1008 = add i64 %1007, 32
  br i1 %1006, label %1009, label %1013

1009:                                             ; preds = %1000
  %1010 = inttoptr i64 %1008 to i64*
  %1011 = load i64, i64* %1010, align 8
  %1012 = add i64 %1011, 16
  br label %1013

1013:                                             ; preds = %1000, %1009
  %1014 = phi i64 [ %1012, %1009 ], [ %1008, %1000 ]
  %1015 = inttoptr i64 %1014 to %"class.v8::internal::compiler::Node"**
  %1016 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1015, i64 1
  %1017 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1016, align 8
  %1018 = call %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler10NodeCopier3mapEPNS1_4NodeEj(%"class.v8::internal::compiler::NodeCopier"* nonnull %3, %"class.v8::internal::compiler::Node"* %1017, i32 0) #6
  %1019 = load i32, i32* %1003, align 4
  %1020 = and i32 %1019, 251658240
  %1021 = icmp eq i32 %1020, 251658240
  br i1 %1021, label %1022, label %1026

1022:                                             ; preds = %1013
  %1023 = inttoptr i64 %1008 to i64*
  %1024 = load i64, i64* %1023, align 8
  %1025 = add i64 %1024, 16
  br label %1026

1026:                                             ; preds = %1013, %1022
  %1027 = phi i64 [ %1025, %1022 ], [ %1008, %1013 ]
  %1028 = inttoptr i64 %1027 to %"class.v8::internal::compiler::Node"**
  %1029 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1028, align 8
  %1030 = icmp eq %"class.v8::internal::compiler::Node"* %1029, %1018
  br i1 %1030, label %1045, label %1031

1031:                                             ; preds = %1026
  br i1 %1021, label %1034, label %1032

1032:                                             ; preds = %1031
  %1033 = bitcast %"class.v8::internal::compiler::Node"* %1002 to %"struct.v8::internal::compiler::Node::Use"*
  br label %1037

1034:                                             ; preds = %1031
  %1035 = inttoptr i64 %1008 to %"struct.v8::internal::compiler::Node::Use"**
  %1036 = load %"struct.v8::internal::compiler::Node::Use"*, %"struct.v8::internal::compiler::Node::Use"** %1035, align 8
  br label %1037

1037:                                             ; preds = %1034, %1032
  %1038 = phi %"struct.v8::internal::compiler::Node::Use"* [ %1033, %1032 ], [ %1036, %1034 ]
  %1039 = getelementptr inbounds %"struct.v8::internal::compiler::Node::Use", %"struct.v8::internal::compiler::Node::Use"* %1038, i64 -1
  %1040 = icmp eq %"class.v8::internal::compiler::Node"* %1029, null
  br i1 %1040, label %1042, label %1041

1041:                                             ; preds = %1037
  call void @_ZN2v88internal8compiler4Node9RemoveUseEPNS2_3UseE(%"class.v8::internal::compiler::Node"* nonnull %1029, %"struct.v8::internal::compiler::Node::Use"* %1039) #6
  br label %1042

1042:                                             ; preds = %1041, %1037
  store %"class.v8::internal::compiler::Node"* %1018, %"class.v8::internal::compiler::Node"** %1028, align 8
  %1043 = icmp eq %"class.v8::internal::compiler::Node"* %1018, null
  br i1 %1043, label %1045, label %1044

1044:                                             ; preds = %1042
  call void @_ZN2v88internal8compiler4Node9AppendUseEPNS2_3UseE(%"class.v8::internal::compiler::Node"* nonnull %1018, %"struct.v8::internal::compiler::Node::Use"* %1039) #6
  br label %1045

1045:                                             ; preds = %1026, %1042, %1044
  %1046 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1001, i64 1
  %1047 = icmp eq %"class.v8::internal::compiler::Node"** %1046, %86
  br i1 %1047, label %984, label %1000

1048:                                             ; preds = %994, %440
  %1049 = phi i64 [ %989, %994 ], [ %147, %440 ]
  %1050 = phi %"class.v8::internal::compiler::Node"* [ %999, %994 ], [ %178, %440 ]
  %1051 = load i32, i32* %104, align 4
  %1052 = and i32 %1051, 251658240
  %1053 = icmp eq i32 %1052, 251658240
  br i1 %1053, label %1054, label %1058

1054:                                             ; preds = %1048
  %1055 = inttoptr i64 %1049 to i64*
  %1056 = load i64, i64* %1055, align 8
  %1057 = add i64 %1056, 16
  br label %1058

1058:                                             ; preds = %1048, %1054
  %1059 = phi i64 [ %1057, %1054 ], [ %1049, %1048 ]
  %1060 = inttoptr i64 %1059 to %"class.v8::internal::compiler::Node"**
  %1061 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1060, align 8
  %1062 = icmp eq %"class.v8::internal::compiler::Node"* %1061, %1050
  br i1 %1062, label %1077, label %1063

1063:                                             ; preds = %1058
  br i1 %1053, label %1066, label %1064

1064:                                             ; preds = %1063
  %1065 = bitcast %"class.v8::internal::compiler::Node"* %95 to %"struct.v8::internal::compiler::Node::Use"*
  br label %1069

1066:                                             ; preds = %1063
  %1067 = inttoptr i64 %1049 to %"struct.v8::internal::compiler::Node::Use"**
  %1068 = load %"struct.v8::internal::compiler::Node::Use"*, %"struct.v8::internal::compiler::Node::Use"** %1067, align 8
  br label %1069

1069:                                             ; preds = %1066, %1064
  %1070 = phi %"struct.v8::internal::compiler::Node::Use"* [ %1065, %1064 ], [ %1068, %1066 ]
  %1071 = getelementptr inbounds %"struct.v8::internal::compiler::Node::Use", %"struct.v8::internal::compiler::Node::Use"* %1070, i64 -1
  %1072 = icmp eq %"class.v8::internal::compiler::Node"* %1061, null
  br i1 %1072, label %1074, label %1073

1073:                                             ; preds = %1069
  call void @_ZN2v88internal8compiler4Node9RemoveUseEPNS2_3UseE(%"class.v8::internal::compiler::Node"* nonnull %1061, %"struct.v8::internal::compiler::Node::Use"* %1071) #6
  br label %1074

1074:                                             ; preds = %1073, %1069
  store %"class.v8::internal::compiler::Node"* %1050, %"class.v8::internal::compiler::Node"** %1060, align 8
  %1075 = icmp eq %"class.v8::internal::compiler::Node"* %1050, null
  br i1 %1075, label %1077, label %1076

1076:                                             ; preds = %1074
  call void @_ZN2v88internal8compiler4Node9AppendUseEPNS2_3UseE(%"class.v8::internal::compiler::Node"* nonnull %1050, %"struct.v8::internal::compiler::Node::Use"* %1071) #6
  br label %1077

1077:                                             ; preds = %1058, %1074, %1076
  %1078 = load %"class.v8::internal::compiler::LoopTree"*, %"class.v8::internal::compiler::LoopTree"** %5, align 8
  %1079 = getelementptr inbounds %"class.v8::internal::compiler::LoopTree", %"class.v8::internal::compiler::LoopTree"* %1078, i64 0, i32 4, i32 0, i32 0, i32 0
  %1080 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %1079, align 8
  %1081 = load i32, i32* %72, align 8
  %1082 = load i32, i32* %29, align 4
  %1083 = sext i32 %1082 to i64
  %1084 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1080, i64 %1083
  %1085 = icmp eq i32 %1081, %1082
  br i1 %1085, label %1089, label %1086

1086:                                             ; preds = %1077
  %1087 = sext i32 %1081 to i64
  %1088 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1080, i64 %1087
  br label %1091

1089:                                             ; preds = %1190, %1077
  %1090 = inttoptr i64 %22 to %"class.v8::internal::compiler::PeeledIteration"*
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %36) #6
  br label %1193

1091:                                             ; preds = %1086, %1190
  %1092 = phi %"class.v8::internal::compiler::Node"** [ %1191, %1190 ], [ %1088, %1086 ]
  %1093 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1092, align 8
  %1094 = getelementptr inbounds %"class.v8::internal::compiler::Node", %"class.v8::internal::compiler::Node"* %1093, i64 0, i32 0
  %1095 = load %"class.v8::internal::compiler::Operator"*, %"class.v8::internal::compiler::Operator"** %1094, align 8
  %1096 = getelementptr inbounds %"class.v8::internal::compiler::Operator", %"class.v8::internal::compiler::Operator"* %1095, i64 0, i32 2
  %1097 = load i16, i16* %1096, align 8
  switch i16 %1097, label %1190 [
    i16 52, label %1098
    i16 53, label %1144
    i16 54, label %1167
  ]

1098:                                             ; preds = %1091
  %1099 = getelementptr inbounds %"class.v8::internal::compiler::Node", %"class.v8::internal::compiler::Node"* %1093, i64 0, i32 3
  %1100 = load i32, i32* %1099, align 4
  %1101 = and i32 %1100, 251658240
  %1102 = icmp eq i32 %1101, 251658240
  %1103 = ptrtoint %"class.v8::internal::compiler::Node"* %1093 to i64
  %1104 = add i64 %1103, 32
  br i1 %1102, label %1105, label %1109

1105:                                             ; preds = %1098
  %1106 = inttoptr i64 %1104 to i64*
  %1107 = load i64, i64* %1106, align 8
  %1108 = add i64 %1107, 16
  br label %1109

1109:                                             ; preds = %1098, %1105
  %1110 = phi i64 [ %1108, %1105 ], [ %1104, %1098 ]
  %1111 = inttoptr i64 %1110 to %"class.v8::internal::compiler::Node"**
  %1112 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1111, align 8
  %1113 = call %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler10NodeCopier3mapEPNS1_4NodeEj(%"class.v8::internal::compiler::NodeCopier"* nonnull %3, %"class.v8::internal::compiler::Node"* %1112, i32 0) #6
  %1114 = load i32, i32* %1099, align 4
  %1115 = and i32 %1114, 251658240
  %1116 = icmp eq i32 %1115, 251658240
  br i1 %1116, label %1117, label %1121

1117:                                             ; preds = %1109
  %1118 = inttoptr i64 %1104 to i64*
  %1119 = load i64, i64* %1118, align 8
  %1120 = add i64 %1119, 16
  br label %1121

1121:                                             ; preds = %1109, %1117
  %1122 = phi i64 [ %1120, %1117 ], [ %1104, %1109 ]
  %1123 = inttoptr i64 %1122 to %"class.v8::internal::compiler::Node"**
  %1124 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1123, i64 1
  %1125 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1124, align 8
  %1126 = icmp eq %"class.v8::internal::compiler::Node"* %1125, %1113
  br i1 %1126, label %1141, label %1127

1127:                                             ; preds = %1121
  br i1 %1116, label %1130, label %1128

1128:                                             ; preds = %1127
  %1129 = bitcast %"class.v8::internal::compiler::Node"* %1093 to %"struct.v8::internal::compiler::Node::Use"*
  br label %1133

1130:                                             ; preds = %1127
  %1131 = inttoptr i64 %1104 to %"struct.v8::internal::compiler::Node::Use"**
  %1132 = load %"struct.v8::internal::compiler::Node::Use"*, %"struct.v8::internal::compiler::Node::Use"** %1131, align 8
  br label %1133

1133:                                             ; preds = %1130, %1128
  %1134 = phi %"struct.v8::internal::compiler::Node::Use"* [ %1129, %1128 ], [ %1132, %1130 ]
  %1135 = getelementptr inbounds %"struct.v8::internal::compiler::Node::Use", %"struct.v8::internal::compiler::Node::Use"* %1134, i64 -2
  %1136 = icmp eq %"class.v8::internal::compiler::Node"* %1125, null
  br i1 %1136, label %1138, label %1137

1137:                                             ; preds = %1133
  call void @_ZN2v88internal8compiler4Node9RemoveUseEPNS2_3UseE(%"class.v8::internal::compiler::Node"* nonnull %1125, %"struct.v8::internal::compiler::Node::Use"* %1135) #6
  br label %1138

1138:                                             ; preds = %1137, %1133
  store %"class.v8::internal::compiler::Node"* %1113, %"class.v8::internal::compiler::Node"** %1124, align 8
  %1139 = icmp eq %"class.v8::internal::compiler::Node"* %1113, null
  br i1 %1139, label %1141, label %1140

1140:                                             ; preds = %1138
  call void @_ZN2v88internal8compiler4Node9AppendUseEPNS2_3UseE(%"class.v8::internal::compiler::Node"* nonnull %1113, %"struct.v8::internal::compiler::Node::Use"* %1135) #6
  br label %1141

1141:                                             ; preds = %1121, %1138, %1140
  %1142 = load %"class.v8::internal::compiler::CommonOperatorBuilder"*, %"class.v8::internal::compiler::CommonOperatorBuilder"** %44, align 8
  %1143 = call %"class.v8::internal::compiler::Operator"* @_ZN2v88internal8compiler21CommonOperatorBuilder5MergeEi(%"class.v8::internal::compiler::CommonOperatorBuilder"* %1142, i32 2) #6
  br label %1188

1144:                                             ; preds = %1091
  %1145 = load %"class.v8::internal::compiler::Graph"*, %"class.v8::internal::compiler::Graph"** %37, align 8
  %1146 = getelementptr inbounds %"class.v8::internal::compiler::Graph", %"class.v8::internal::compiler::Graph"* %1145, i64 0, i32 0
  %1147 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %1146, align 8
  %1148 = getelementptr inbounds %"class.v8::internal::compiler::Node", %"class.v8::internal::compiler::Node"* %1093, i64 0, i32 3
  %1149 = load i32, i32* %1148, align 4
  %1150 = and i32 %1149, 251658240
  %1151 = icmp eq i32 %1150, 251658240
  %1152 = ptrtoint %"class.v8::internal::compiler::Node"* %1093 to i64
  %1153 = add i64 %1152, 32
  br i1 %1151, label %1154, label %1158

1154:                                             ; preds = %1144
  %1155 = inttoptr i64 %1153 to i64*
  %1156 = load i64, i64* %1155, align 8
  %1157 = add i64 %1156, 16
  br label %1158

1158:                                             ; preds = %1144, %1154
  %1159 = phi i64 [ %1157, %1154 ], [ %1153, %1144 ]
  %1160 = inttoptr i64 %1159 to %"class.v8::internal::compiler::Node"**
  %1161 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1160, align 8
  %1162 = call %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler10NodeCopier3mapEPNS1_4NodeEj(%"class.v8::internal::compiler::NodeCopier"* nonnull %3, %"class.v8::internal::compiler::Node"* %1161, i32 0) #6
  call void @_ZN2v88internal8compiler4Node11InsertInputEPNS0_4ZoneEiPS2_(%"class.v8::internal::compiler::Node"* %1093, %"class.v8::internal::Zone"* %1147, i32 1, %"class.v8::internal::compiler::Node"* %1162) #6
  %1163 = load %"class.v8::internal::compiler::CommonOperatorBuilder"*, %"class.v8::internal::compiler::CommonOperatorBuilder"** %44, align 8
  %1164 = load %"class.v8::internal::compiler::Operator"*, %"class.v8::internal::compiler::Operator"** %1094, align 8
  %1165 = call zeroext i8 @_ZN2v88internal8compiler29LoopExitValueRepresentationOfEPKNS1_8OperatorE(%"class.v8::internal::compiler::Operator"* %1164) #6
  %1166 = call %"class.v8::internal::compiler::Operator"* @_ZN2v88internal8compiler21CommonOperatorBuilder3PhiENS0_21MachineRepresentationEi(%"class.v8::internal::compiler::CommonOperatorBuilder"* %1163, i8 zeroext %1165, i32 2) #6
  br label %1188

1167:                                             ; preds = %1091
  %1168 = load %"class.v8::internal::compiler::Graph"*, %"class.v8::internal::compiler::Graph"** %37, align 8
  %1169 = getelementptr inbounds %"class.v8::internal::compiler::Graph", %"class.v8::internal::compiler::Graph"* %1168, i64 0, i32 0
  %1170 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %1169, align 8
  %1171 = getelementptr inbounds %"class.v8::internal::compiler::Node", %"class.v8::internal::compiler::Node"* %1093, i64 0, i32 3
  %1172 = load i32, i32* %1171, align 4
  %1173 = and i32 %1172, 251658240
  %1174 = icmp eq i32 %1173, 251658240
  %1175 = ptrtoint %"class.v8::internal::compiler::Node"* %1093 to i64
  %1176 = add i64 %1175, 32
  br i1 %1174, label %1177, label %1181

1177:                                             ; preds = %1167
  %1178 = inttoptr i64 %1176 to i64*
  %1179 = load i64, i64* %1178, align 8
  %1180 = add i64 %1179, 16
  br label %1181

1181:                                             ; preds = %1167, %1177
  %1182 = phi i64 [ %1180, %1177 ], [ %1176, %1167 ]
  %1183 = inttoptr i64 %1182 to %"class.v8::internal::compiler::Node"**
  %1184 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1183, align 8
  %1185 = call %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler10NodeCopier3mapEPNS1_4NodeEj(%"class.v8::internal::compiler::NodeCopier"* nonnull %3, %"class.v8::internal::compiler::Node"* %1184, i32 0) #6
  call void @_ZN2v88internal8compiler4Node11InsertInputEPNS0_4ZoneEiPS2_(%"class.v8::internal::compiler::Node"* %1093, %"class.v8::internal::Zone"* %1170, i32 1, %"class.v8::internal::compiler::Node"* %1185) #6
  %1186 = load %"class.v8::internal::compiler::CommonOperatorBuilder"*, %"class.v8::internal::compiler::CommonOperatorBuilder"** %44, align 8
  %1187 = call %"class.v8::internal::compiler::Operator"* @_ZN2v88internal8compiler21CommonOperatorBuilder9EffectPhiEi(%"class.v8::internal::compiler::CommonOperatorBuilder"* %1186, i32 2) #6
  br label %1188

1188:                                             ; preds = %1141, %1158, %1181
  %1189 = phi %"class.v8::internal::compiler::Operator"* [ %1187, %1181 ], [ %1166, %1158 ], [ %1143, %1141 ]
  call void @_ZN2v88internal8compiler14NodeProperties8ChangeOpEPNS1_4NodeEPKNS1_8OperatorE(%"class.v8::internal::compiler::Node"* %1093, %"class.v8::internal::compiler::Operator"* %1189) #6
  br label %1190

1190:                                             ; preds = %1188, %1091
  %1191 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %1092, i64 1
  %1192 = icmp eq %"class.v8::internal::compiler::Node"** %1191, %1084
  br i1 %1192, label %1089, label %1091

1193:                                             ; preds = %2, %1089
  %1194 = phi %"class.v8::internal::compiler::PeeledIteration"* [ %1090, %1089 ], [ null, %2 ]
  ret %"class.v8::internal::compiler::PeeledIteration"* %1194
}

declare %"class.v8::internal::compiler::Operator"* @_ZN2v88internal8compiler21CommonOperatorBuilder4DeadEv(%"class.v8::internal::compiler::CommonOperatorBuilder"*) local_unnamed_addr #3

declare void @_ZN2v88internal8compiler10NodeCopier6InsertEPNS1_4NodeES4_(%"class.v8::internal::compiler::NodeCopier"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal8compiler10NodeCopier9CopyNodesIPPNS1_4NodeEEEvPNS1_5GraphEPNS0_4ZoneES5_NS_4base14iterator_rangeIT_EEPNS1_19SourcePositionTableEPNS1_15NodeOriginTableE(%"class.v8::internal::compiler::NodeCopier"*, %"class.v8::internal::compiler::Graph"*, %"class.v8::internal::Zone"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::SourcePositionTable"*, %"class.v8::internal::compiler::NodeOriginTable"*) local_unnamed_addr #2 comdat align 2 {
  %9 = icmp eq %"class.v8::internal::compiler::Node"** %4, %5
  br i1 %9, label %561, label %10

10:                                               ; preds = %8
  %11 = getelementptr inbounds %"class.v8::internal::compiler::SourcePositionTable", %"class.v8::internal::compiler::SourcePositionTable"* %6, i64 0, i32 2, i32 0
  %12 = icmp eq %"class.v8::internal::compiler::NodeOriginTable"* %7, null
  %13 = getelementptr inbounds %"class.v8::internal::compiler::NodeOriginTable", %"class.v8::internal::compiler::NodeOriginTable"* %7, i64 0, i32 2, i32 0
  %14 = getelementptr inbounds %"class.v8::internal::compiler::NodeOriginTable", %"class.v8::internal::compiler::NodeOriginTable"* %7, i64 0, i32 2, i32 1
  %15 = getelementptr inbounds %"class.v8::internal::compiler::NodeOriginTable", %"class.v8::internal::compiler::NodeOriginTable"* %7, i64 0, i32 2, i32 2
  %16 = bitcast i32* %15 to i64*
  %17 = getelementptr inbounds %"class.v8::internal::compiler::NodeOriginTable", %"class.v8::internal::compiler::NodeOriginTable"* %7, i64 0, i32 2, i32 3
  %18 = getelementptr inbounds %"class.v8::internal::compiler::NodeOriginTable", %"class.v8::internal::compiler::NodeOriginTable"* %7, i64 0, i32 3
  %19 = bitcast i8** %18 to i64*
  %20 = bitcast i8** %13 to i64*
  %21 = getelementptr inbounds %"class.v8::internal::compiler::NodeCopier", %"class.v8::internal::compiler::NodeCopier"* %0, i64 0, i32 1
  %22 = bitcast %"class.v8::internal::ZoneVector"** %21 to %"class.std::__1::vector"**
  %23 = getelementptr inbounds %"class.v8::internal::compiler::NodeCopier", %"class.v8::internal::compiler::NodeCopier"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = getelementptr inbounds %"class.v8::internal::compiler::NodeCopier", %"class.v8::internal::compiler::NodeCopier"* %0, i64 0, i32 2
  %25 = bitcast i8** %13 to <2 x i8*>*
  %26 = bitcast i8** %13 to <2 x i8*>*
  br label %31

27:                                               ; preds = %312
  br i1 %9, label %561, label %28

28:                                               ; preds = %27
  %29 = getelementptr inbounds %"class.v8::internal::compiler::NodeCopier", %"class.v8::internal::compiler::NodeCopier"* %0, i64 0, i32 2
  %30 = load i32, i32* %29, align 8
  br label %562

31:                                               ; preds = %10, %312
  %32 = phi %"class.v8::internal::compiler::Node"** [ %4, %10 ], [ %313, %312 ]
  %33 = phi i64 [ undef, %10 ], [ %53, %312 ]
  %34 = bitcast %"class.v8::internal::compiler::Node"** %32 to i64*
  %35 = load i64, i64* %34, align 8
  %36 = inttoptr i64 %35 to %"class.v8::internal::compiler::Node"*
  %37 = tail call i64 @_ZNK2v88internal8compiler19SourcePositionTable17GetSourcePositionEPNS1_4NodeE(%"class.v8::internal::compiler::SourcePositionTable"* %6, %"class.v8::internal::compiler::Node"* %36) #6
  %38 = load i64, i64* %11, align 8
  %39 = and i64 %37, 140737488355327
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %42, label %41

41:                                               ; preds = %31
  store i64 %37, i64* %11, align 8
  br label %42

42:                                               ; preds = %31, %41
  br i1 %12, label %52, label %43

43:                                               ; preds = %42
  %44 = load <2 x i8*>, <2 x i8*>* %25, align 8
  %45 = load i64, i64* %16, align 8
  %46 = load i64, i64* %17, align 8
  %47 = load i64, i64* %19, align 8
  %48 = getelementptr inbounds %"class.v8::internal::compiler::Node", %"class.v8::internal::compiler::Node"* %36, i64 0, i32 3
  %49 = load i32, i32* %48, align 4
  %50 = and i32 %49, 16777215
  %51 = zext i32 %50 to i64
  store i64 %47, i64* %20, align 8
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.8, i64 0, i64 0), i8** %14, align 8
  store i32 1, i32* %15, align 8
  store i64 %51, i64* %17, align 8
  br label %52

52:                                               ; preds = %42, %43
  %53 = phi i64 [ %33, %42 ], [ %45, %43 ]
  %54 = phi i64 [ -9223372036854775808, %42 ], [ %46, %43 ]
  %55 = phi <2 x i8*> [ <i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.9, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.9, i64 0, i64 0)>, %42 ], [ %44, %43 ]
  %56 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %22, align 8
  %57 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %56, i64 0, i32 0, i32 1
  %58 = bitcast %"class.v8::internal::compiler::Node"*** %57 to i64*
  %59 = load i64, i64* %58, align 8
  %60 = bitcast %"class.std::__1::vector"* %56 to i64*
  %61 = load i64, i64* %60, align 8
  %62 = sub i64 %59, %61
  %63 = lshr exact i64 %62, 3
  %64 = trunc i64 %63 to i32
  %65 = load i32, i32* %23, align 4
  %66 = add i32 %65, 1
  %67 = add i32 %66, %64
  %68 = getelementptr inbounds %"class.v8::internal::compiler::Node", %"class.v8::internal::compiler::Node"* %36, i64 0, i32 2
  store i32 %67, i32* %68, align 8
  %69 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %22, align 8
  %70 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %69, i64 0, i32 0, i32 1
  %71 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %70, align 8
  %72 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %69, i64 0, i32 0, i32 2, i32 0, i32 0
  %73 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %72, align 8
  %74 = icmp eq %"class.v8::internal::compiler::Node"** %71, %73
  %75 = ptrtoint %"class.v8::internal::compiler::Node"** %73 to i64
  br i1 %74, label %81, label %76

76:                                               ; preds = %52
  %77 = bitcast %"class.v8::internal::compiler::Node"** %71 to i64*
  store i64 %35, i64* %77, align 8
  %78 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %71, i64 1
  %79 = ptrtoint %"class.v8::internal::compiler::Node"** %78 to i64
  %80 = bitcast %"class.v8::internal::compiler::Node"*** %70 to i64*
  store i64 %79, i64* %80, align 8
  br label %307

81:                                               ; preds = %52
  %82 = ptrtoint %"class.v8::internal::compiler::Node"** %71 to i64
  %83 = bitcast %"class.v8::internal::compiler::Node"*** %70 to i64*
  %84 = bitcast %"class.std::__1::vector"* %69 to i64*
  %85 = load i64, i64* %84, align 8
  %86 = sub i64 %82, %85
  %87 = ashr exact i64 %86, 3
  %88 = add nsw i64 %87, 1
  %89 = icmp ugt i64 %88, 268435455
  br i1 %89, label %90, label %92

90:                                               ; preds = %81
  %91 = bitcast %"class.std::__1::vector"* %69 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %91) #7
  unreachable

92:                                               ; preds = %81
  %93 = bitcast %"class.v8::internal::compiler::Node"*** %72 to i64*
  %94 = sub i64 %75, %85
  %95 = ashr exact i64 %94, 3
  %96 = icmp ult i64 %95, 134217727
  br i1 %96, label %97, label %102

97:                                               ; preds = %92
  %98 = ashr exact i64 %94, 2
  %99 = icmp ult i64 %98, %88
  %100 = select i1 %99, i64 %88, i64 %98
  %101 = icmp eq i64 %100, 0
  br i1 %101, label %120, label %102

102:                                              ; preds = %97, %92
  %103 = phi i64 [ %100, %97 ], [ 268435455, %92 ]
  %104 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %69, i64 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %105 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %104, align 8
  %106 = shl i64 %103, 3
  %107 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %105, i64 0, i32 2
  %108 = load i64, i64* %107, align 8
  %109 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %105, i64 0, i32 3
  %110 = load i64, i64* %109, align 8
  %111 = sub i64 %110, %108
  %112 = icmp ugt i64 %106, %111
  br i1 %112, label %113, label %115, !prof !2

113:                                              ; preds = %102
  %114 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %105, i64 %106) #6
  br label %117

115:                                              ; preds = %102
  %116 = add i64 %108, %106
  store i64 %116, i64* %107, align 8
  br label %117

117:                                              ; preds = %115, %113
  %118 = phi i64 [ %114, %113 ], [ %108, %115 ]
  %119 = inttoptr i64 %118 to %"class.v8::internal::compiler::Node"**
  br label %120

120:                                              ; preds = %117, %97
  %121 = phi i64 [ %103, %117 ], [ 0, %97 ]
  %122 = phi %"class.v8::internal::compiler::Node"** [ %119, %117 ], [ null, %97 ]
  %123 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %122, i64 %87
  %124 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %122, i64 %121
  %125 = ptrtoint %"class.v8::internal::compiler::Node"** %124 to i64
  %126 = bitcast %"class.v8::internal::compiler::Node"** %123 to i64*
  store i64 %35, i64* %126, align 8
  %127 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %123, i64 1
  %128 = ptrtoint %"class.v8::internal::compiler::Node"** %127 to i64
  %129 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %69, i64 0, i32 0, i32 0
  %130 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %129, align 8
  %131 = ptrtoint %"class.v8::internal::compiler::Node"** %130 to i64
  %132 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %70, align 8
  %133 = icmp eq %"class.v8::internal::compiler::Node"** %132, %130
  br i1 %133, label %304, label %134

134:                                              ; preds = %120
  %135 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %132, i64 -1
  %136 = ptrtoint %"class.v8::internal::compiler::Node"** %135 to i64
  %137 = sub i64 %136, %131
  %138 = lshr i64 %137, 3
  %139 = add nuw nsw i64 %138, 1
  %140 = icmp ult i64 %139, 4
  br i1 %140, label %234, label %141

141:                                              ; preds = %134
  %142 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %122, i64 -1
  %143 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %132, i64 -1
  %144 = ptrtoint %"class.v8::internal::compiler::Node"** %143 to i64
  %145 = sub i64 %144, %131
  %146 = lshr i64 %145, 3
  %147 = sub nsw i64 %87, %146
  %148 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %142, i64 %147
  %149 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %132, i64 -1
  %150 = sub nsw i64 0, %146
  %151 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %149, i64 %150
  %152 = icmp ult %"class.v8::internal::compiler::Node"** %148, %132
  %153 = icmp ult %"class.v8::internal::compiler::Node"** %151, %123
  %154 = and i1 %152, %153
  br i1 %154, label %234, label %155

155:                                              ; preds = %141
  %156 = and i64 %139, 4611686018427387900
  %157 = sub nsw i64 0, %156
  %158 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %123, i64 %157
  %159 = sub nsw i64 0, %156
  %160 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %132, i64 %159
  %161 = add nsw i64 %156, -4
  %162 = lshr exact i64 %161, 2
  %163 = add nuw nsw i64 %162, 1
  %164 = and i64 %163, 1
  %165 = icmp eq i64 %161, 0
  br i1 %165, label %210, label %166

166:                                              ; preds = %155
  %167 = sub nuw nsw i64 %163, %164
  %168 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %123, i64 -1
  %169 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %132, i64 -1
  %170 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %123, i64 -1
  %171 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %132, i64 -1
  br label %172

172:                                              ; preds = %172, %166
  %173 = phi i64 [ 0, %166 ], [ %207, %172 ]
  %174 = phi i64 [ %167, %166 ], [ %208, %172 ]
  %175 = sub i64 0, %173
  %176 = sub i64 0, %173
  %177 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %168, i64 %175
  %178 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %169, i64 %176
  %179 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %178, i64 -1
  %180 = bitcast %"class.v8::internal::compiler::Node"** %179 to <2 x i64>*
  %181 = load <2 x i64>, <2 x i64>* %180, align 8, !alias.scope !29
  %182 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %178, i64 -2
  %183 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %182, i64 -1
  %184 = bitcast %"class.v8::internal::compiler::Node"** %183 to <2 x i64>*
  %185 = load <2 x i64>, <2 x i64>* %184, align 8, !alias.scope !29
  %186 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %177, i64 -1
  %187 = bitcast %"class.v8::internal::compiler::Node"** %186 to <2 x i64>*
  store <2 x i64> %181, <2 x i64>* %187, align 8, !alias.scope !32, !noalias !29
  %188 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %177, i64 -2
  %189 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %188, i64 -1
  %190 = bitcast %"class.v8::internal::compiler::Node"** %189 to <2 x i64>*
  store <2 x i64> %185, <2 x i64>* %190, align 8, !alias.scope !32, !noalias !29
  %191 = sub nuw nsw i64 -4, %173
  %192 = sub nuw nsw i64 -4, %173
  %193 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %170, i64 %191
  %194 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %171, i64 %192
  %195 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %194, i64 -1
  %196 = bitcast %"class.v8::internal::compiler::Node"** %195 to <2 x i64>*
  %197 = load <2 x i64>, <2 x i64>* %196, align 8, !alias.scope !29
  %198 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %194, i64 -2
  %199 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %198, i64 -1
  %200 = bitcast %"class.v8::internal::compiler::Node"** %199 to <2 x i64>*
  %201 = load <2 x i64>, <2 x i64>* %200, align 8, !alias.scope !29
  %202 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %193, i64 -1
  %203 = bitcast %"class.v8::internal::compiler::Node"** %202 to <2 x i64>*
  store <2 x i64> %197, <2 x i64>* %203, align 8, !alias.scope !32, !noalias !29
  %204 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %193, i64 -2
  %205 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %204, i64 -1
  %206 = bitcast %"class.v8::internal::compiler::Node"** %205 to <2 x i64>*
  store <2 x i64> %201, <2 x i64>* %206, align 8, !alias.scope !32, !noalias !29
  %207 = add i64 %173, 8
  %208 = add i64 %174, -2
  %209 = icmp eq i64 %208, 0
  br i1 %209, label %210, label %172, !llvm.loop !34

210:                                              ; preds = %172, %155
  %211 = phi i64 [ 0, %155 ], [ %207, %172 ]
  %212 = icmp eq i64 %164, 0
  br i1 %212, label %232, label %213

213:                                              ; preds = %210
  %214 = sub i64 0, %211
  %215 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %123, i64 -1
  %216 = sub i64 0, %211
  %217 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %132, i64 -1
  %218 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %215, i64 %214
  %219 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %217, i64 %216
  %220 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %219, i64 -1
  %221 = bitcast %"class.v8::internal::compiler::Node"** %220 to <2 x i64>*
  %222 = load <2 x i64>, <2 x i64>* %221, align 8, !alias.scope !29
  %223 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %219, i64 -2
  %224 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %223, i64 -1
  %225 = bitcast %"class.v8::internal::compiler::Node"** %224 to <2 x i64>*
  %226 = load <2 x i64>, <2 x i64>* %225, align 8, !alias.scope !29
  %227 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %218, i64 -1
  %228 = bitcast %"class.v8::internal::compiler::Node"** %227 to <2 x i64>*
  store <2 x i64> %222, <2 x i64>* %228, align 8, !alias.scope !32, !noalias !29
  %229 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %218, i64 -2
  %230 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %229, i64 -1
  %231 = bitcast %"class.v8::internal::compiler::Node"** %230 to <2 x i64>*
  store <2 x i64> %226, <2 x i64>* %231, align 8, !alias.scope !32, !noalias !29
  br label %232

232:                                              ; preds = %210, %213
  %233 = icmp eq i64 %139, %156
  br i1 %233, label %304, label %234

234:                                              ; preds = %232, %141, %134
  %235 = phi %"class.v8::internal::compiler::Node"** [ %123, %141 ], [ %123, %134 ], [ %158, %232 ]
  %236 = phi %"class.v8::internal::compiler::Node"** [ %132, %141 ], [ %132, %134 ], [ %160, %232 ]
  %237 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %236, i64 -1
  %238 = ptrtoint %"class.v8::internal::compiler::Node"** %237 to i64
  %239 = sub i64 %238, %131
  %240 = lshr i64 %239, 3
  %241 = add nuw nsw i64 %240, 1
  %242 = and i64 %241, 7
  %243 = icmp eq i64 %242, 0
  br i1 %243, label %255, label %244

244:                                              ; preds = %234, %244
  %245 = phi %"class.v8::internal::compiler::Node"** [ %248, %244 ], [ %235, %234 ]
  %246 = phi %"class.v8::internal::compiler::Node"** [ %249, %244 ], [ %236, %234 ]
  %247 = phi i64 [ %253, %244 ], [ %242, %234 ]
  %248 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %245, i64 -1
  %249 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %246, i64 -1
  %250 = bitcast %"class.v8::internal::compiler::Node"** %249 to i64*
  %251 = load i64, i64* %250, align 8
  %252 = bitcast %"class.v8::internal::compiler::Node"** %248 to i64*
  store i64 %251, i64* %252, align 8
  %253 = add i64 %247, -1
  %254 = icmp eq i64 %253, 0
  br i1 %254, label %255, label %244, !llvm.loop !35

255:                                              ; preds = %244, %234
  %256 = phi %"class.v8::internal::compiler::Node"** [ undef, %234 ], [ %248, %244 ]
  %257 = phi %"class.v8::internal::compiler::Node"** [ %235, %234 ], [ %248, %244 ]
  %258 = phi %"class.v8::internal::compiler::Node"** [ %236, %234 ], [ %249, %244 ]
  %259 = icmp ult i64 %239, 56
  br i1 %259, label %304, label %260

260:                                              ; preds = %255, %260
  %261 = phi %"class.v8::internal::compiler::Node"** [ %298, %260 ], [ %257, %255 ]
  %262 = phi %"class.v8::internal::compiler::Node"** [ %299, %260 ], [ %258, %255 ]
  %263 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %261, i64 -1
  %264 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %262, i64 -1
  %265 = bitcast %"class.v8::internal::compiler::Node"** %264 to i64*
  %266 = load i64, i64* %265, align 8
  %267 = bitcast %"class.v8::internal::compiler::Node"** %263 to i64*
  store i64 %266, i64* %267, align 8
  %268 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %261, i64 -2
  %269 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %262, i64 -2
  %270 = bitcast %"class.v8::internal::compiler::Node"** %269 to i64*
  %271 = load i64, i64* %270, align 8
  %272 = bitcast %"class.v8::internal::compiler::Node"** %268 to i64*
  store i64 %271, i64* %272, align 8
  %273 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %261, i64 -3
  %274 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %262, i64 -3
  %275 = bitcast %"class.v8::internal::compiler::Node"** %274 to i64*
  %276 = load i64, i64* %275, align 8
  %277 = bitcast %"class.v8::internal::compiler::Node"** %273 to i64*
  store i64 %276, i64* %277, align 8
  %278 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %261, i64 -4
  %279 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %262, i64 -4
  %280 = bitcast %"class.v8::internal::compiler::Node"** %279 to i64*
  %281 = load i64, i64* %280, align 8
  %282 = bitcast %"class.v8::internal::compiler::Node"** %278 to i64*
  store i64 %281, i64* %282, align 8
  %283 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %261, i64 -5
  %284 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %262, i64 -5
  %285 = bitcast %"class.v8::internal::compiler::Node"** %284 to i64*
  %286 = load i64, i64* %285, align 8
  %287 = bitcast %"class.v8::internal::compiler::Node"** %283 to i64*
  store i64 %286, i64* %287, align 8
  %288 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %261, i64 -6
  %289 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %262, i64 -6
  %290 = bitcast %"class.v8::internal::compiler::Node"** %289 to i64*
  %291 = load i64, i64* %290, align 8
  %292 = bitcast %"class.v8::internal::compiler::Node"** %288 to i64*
  store i64 %291, i64* %292, align 8
  %293 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %261, i64 -7
  %294 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %262, i64 -7
  %295 = bitcast %"class.v8::internal::compiler::Node"** %294 to i64*
  %296 = load i64, i64* %295, align 8
  %297 = bitcast %"class.v8::internal::compiler::Node"** %293 to i64*
  store i64 %296, i64* %297, align 8
  %298 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %261, i64 -8
  %299 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %262, i64 -8
  %300 = bitcast %"class.v8::internal::compiler::Node"** %299 to i64*
  %301 = load i64, i64* %300, align 8
  %302 = bitcast %"class.v8::internal::compiler::Node"** %298 to i64*
  store i64 %301, i64* %302, align 8
  %303 = icmp eq %"class.v8::internal::compiler::Node"** %299, %130
  br i1 %303, label %304, label %260, !llvm.loop !36

304:                                              ; preds = %255, %260, %232, %120
  %305 = phi %"class.v8::internal::compiler::Node"** [ %123, %120 ], [ %158, %232 ], [ %256, %255 ], [ %298, %260 ]
  %306 = ptrtoint %"class.v8::internal::compiler::Node"** %305 to i64
  store i64 %306, i64* %84, align 8
  store i64 %128, i64* %83, align 8
  store i64 %125, i64* %93, align 8
  br label %307

307:                                              ; preds = %76, %304
  %308 = load i32, i32* %24, align 8
  %309 = icmp eq i32 %308, 0
  br i1 %309, label %310, label %315

310:                                              ; preds = %557, %307
  br i1 %12, label %312, label %311

311:                                              ; preds = %310
  store <2 x i8*> %55, <2 x i8*>* %26, align 8
  store i64 %53, i64* %16, align 8
  store i64 %54, i64* %17, align 8
  br label %312

312:                                              ; preds = %310, %311
  store i64 %38, i64* %11, align 8
  %313 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %32, i64 1
  %314 = icmp eq %"class.v8::internal::compiler::Node"** %313, %5
  br i1 %314, label %27, label %31

315:                                              ; preds = %307, %557
  %316 = phi i32 [ %558, %557 ], [ 0, %307 ]
  %317 = tail call %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler5Graph9CloneNodeEPKNS1_4NodeE(%"class.v8::internal::compiler::Graph"* %1, %"class.v8::internal::compiler::Node"* %36) #6
  %318 = ptrtoint %"class.v8::internal::compiler::Node"* %317 to i64
  %319 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %22, align 8
  %320 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %319, i64 0, i32 0, i32 1
  %321 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %320, align 8
  %322 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %319, i64 0, i32 0, i32 2, i32 0, i32 0
  %323 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %322, align 8
  %324 = icmp eq %"class.v8::internal::compiler::Node"** %321, %323
  %325 = ptrtoint %"class.v8::internal::compiler::Node"** %323 to i64
  br i1 %324, label %331, label %326

326:                                              ; preds = %315
  %327 = bitcast %"class.v8::internal::compiler::Node"** %321 to i64*
  store i64 %318, i64* %327, align 8
  %328 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %321, i64 1
  %329 = ptrtoint %"class.v8::internal::compiler::Node"** %328 to i64
  %330 = bitcast %"class.v8::internal::compiler::Node"*** %320 to i64*
  store i64 %329, i64* %330, align 8
  br label %557

331:                                              ; preds = %315
  %332 = ptrtoint %"class.v8::internal::compiler::Node"** %321 to i64
  %333 = bitcast %"class.v8::internal::compiler::Node"*** %320 to i64*
  %334 = bitcast %"class.std::__1::vector"* %319 to i64*
  %335 = load i64, i64* %334, align 8
  %336 = sub i64 %332, %335
  %337 = ashr exact i64 %336, 3
  %338 = add nsw i64 %337, 1
  %339 = icmp ugt i64 %338, 268435455
  br i1 %339, label %340, label %342

340:                                              ; preds = %331
  %341 = bitcast %"class.std::__1::vector"* %319 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %341) #7
  unreachable

342:                                              ; preds = %331
  %343 = bitcast %"class.v8::internal::compiler::Node"*** %322 to i64*
  %344 = sub i64 %325, %335
  %345 = ashr exact i64 %344, 3
  %346 = icmp ult i64 %345, 134217727
  br i1 %346, label %347, label %352

347:                                              ; preds = %342
  %348 = ashr exact i64 %344, 2
  %349 = icmp ult i64 %348, %338
  %350 = select i1 %349, i64 %338, i64 %348
  %351 = icmp eq i64 %350, 0
  br i1 %351, label %370, label %352

352:                                              ; preds = %347, %342
  %353 = phi i64 [ %350, %347 ], [ 268435455, %342 ]
  %354 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %319, i64 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %355 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %354, align 8
  %356 = shl i64 %353, 3
  %357 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %355, i64 0, i32 2
  %358 = load i64, i64* %357, align 8
  %359 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %355, i64 0, i32 3
  %360 = load i64, i64* %359, align 8
  %361 = sub i64 %360, %358
  %362 = icmp ugt i64 %356, %361
  br i1 %362, label %363, label %365, !prof !2

363:                                              ; preds = %352
  %364 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %355, i64 %356) #6
  br label %367

365:                                              ; preds = %352
  %366 = add i64 %358, %356
  store i64 %366, i64* %357, align 8
  br label %367

367:                                              ; preds = %365, %363
  %368 = phi i64 [ %364, %363 ], [ %358, %365 ]
  %369 = inttoptr i64 %368 to %"class.v8::internal::compiler::Node"**
  br label %370

370:                                              ; preds = %367, %347
  %371 = phi i64 [ %353, %367 ], [ 0, %347 ]
  %372 = phi %"class.v8::internal::compiler::Node"** [ %369, %367 ], [ null, %347 ]
  %373 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %372, i64 %337
  %374 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %372, i64 %371
  %375 = ptrtoint %"class.v8::internal::compiler::Node"** %374 to i64
  %376 = bitcast %"class.v8::internal::compiler::Node"** %373 to i64*
  store i64 %318, i64* %376, align 8
  %377 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %373, i64 1
  %378 = ptrtoint %"class.v8::internal::compiler::Node"** %377 to i64
  %379 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %319, i64 0, i32 0, i32 0
  %380 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %379, align 8
  %381 = ptrtoint %"class.v8::internal::compiler::Node"** %380 to i64
  %382 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %320, align 8
  %383 = icmp eq %"class.v8::internal::compiler::Node"** %382, %380
  br i1 %383, label %554, label %384

384:                                              ; preds = %370
  %385 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %382, i64 -1
  %386 = ptrtoint %"class.v8::internal::compiler::Node"** %385 to i64
  %387 = sub i64 %386, %381
  %388 = lshr i64 %387, 3
  %389 = add nuw nsw i64 %388, 1
  %390 = icmp ult i64 %389, 4
  br i1 %390, label %484, label %391

391:                                              ; preds = %384
  %392 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %372, i64 -1
  %393 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %382, i64 -1
  %394 = ptrtoint %"class.v8::internal::compiler::Node"** %393 to i64
  %395 = sub i64 %394, %381
  %396 = lshr i64 %395, 3
  %397 = sub nsw i64 %337, %396
  %398 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %392, i64 %397
  %399 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %382, i64 -1
  %400 = sub nsw i64 0, %396
  %401 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %399, i64 %400
  %402 = icmp ult %"class.v8::internal::compiler::Node"** %398, %382
  %403 = icmp ult %"class.v8::internal::compiler::Node"** %401, %373
  %404 = and i1 %402, %403
  br i1 %404, label %484, label %405

405:                                              ; preds = %391
  %406 = and i64 %389, 4611686018427387900
  %407 = sub nsw i64 0, %406
  %408 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %373, i64 %407
  %409 = sub nsw i64 0, %406
  %410 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %382, i64 %409
  %411 = add nsw i64 %406, -4
  %412 = lshr exact i64 %411, 2
  %413 = add nuw nsw i64 %412, 1
  %414 = and i64 %413, 1
  %415 = icmp eq i64 %411, 0
  br i1 %415, label %460, label %416

416:                                              ; preds = %405
  %417 = sub nuw nsw i64 %413, %414
  %418 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %373, i64 -1
  %419 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %382, i64 -1
  %420 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %373, i64 -1
  %421 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %382, i64 -1
  br label %422

422:                                              ; preds = %422, %416
  %423 = phi i64 [ 0, %416 ], [ %457, %422 ]
  %424 = phi i64 [ %417, %416 ], [ %458, %422 ]
  %425 = sub i64 0, %423
  %426 = sub i64 0, %423
  %427 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %418, i64 %425
  %428 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %419, i64 %426
  %429 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %428, i64 -1
  %430 = bitcast %"class.v8::internal::compiler::Node"** %429 to <2 x i64>*
  %431 = load <2 x i64>, <2 x i64>* %430, align 8, !alias.scope !37
  %432 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %428, i64 -2
  %433 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %432, i64 -1
  %434 = bitcast %"class.v8::internal::compiler::Node"** %433 to <2 x i64>*
  %435 = load <2 x i64>, <2 x i64>* %434, align 8, !alias.scope !37
  %436 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %427, i64 -1
  %437 = bitcast %"class.v8::internal::compiler::Node"** %436 to <2 x i64>*
  store <2 x i64> %431, <2 x i64>* %437, align 8, !alias.scope !40, !noalias !37
  %438 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %427, i64 -2
  %439 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %438, i64 -1
  %440 = bitcast %"class.v8::internal::compiler::Node"** %439 to <2 x i64>*
  store <2 x i64> %435, <2 x i64>* %440, align 8, !alias.scope !40, !noalias !37
  %441 = sub nuw nsw i64 -4, %423
  %442 = sub nuw nsw i64 -4, %423
  %443 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %420, i64 %441
  %444 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %421, i64 %442
  %445 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %444, i64 -1
  %446 = bitcast %"class.v8::internal::compiler::Node"** %445 to <2 x i64>*
  %447 = load <2 x i64>, <2 x i64>* %446, align 8, !alias.scope !37
  %448 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %444, i64 -2
  %449 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %448, i64 -1
  %450 = bitcast %"class.v8::internal::compiler::Node"** %449 to <2 x i64>*
  %451 = load <2 x i64>, <2 x i64>* %450, align 8, !alias.scope !37
  %452 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %443, i64 -1
  %453 = bitcast %"class.v8::internal::compiler::Node"** %452 to <2 x i64>*
  store <2 x i64> %447, <2 x i64>* %453, align 8, !alias.scope !40, !noalias !37
  %454 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %443, i64 -2
  %455 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %454, i64 -1
  %456 = bitcast %"class.v8::internal::compiler::Node"** %455 to <2 x i64>*
  store <2 x i64> %451, <2 x i64>* %456, align 8, !alias.scope !40, !noalias !37
  %457 = add i64 %423, 8
  %458 = add i64 %424, -2
  %459 = icmp eq i64 %458, 0
  br i1 %459, label %460, label %422, !llvm.loop !42

460:                                              ; preds = %422, %405
  %461 = phi i64 [ 0, %405 ], [ %457, %422 ]
  %462 = icmp eq i64 %414, 0
  br i1 %462, label %482, label %463

463:                                              ; preds = %460
  %464 = sub i64 0, %461
  %465 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %373, i64 -1
  %466 = sub i64 0, %461
  %467 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %382, i64 -1
  %468 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %465, i64 %464
  %469 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %467, i64 %466
  %470 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %469, i64 -1
  %471 = bitcast %"class.v8::internal::compiler::Node"** %470 to <2 x i64>*
  %472 = load <2 x i64>, <2 x i64>* %471, align 8, !alias.scope !37
  %473 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %469, i64 -2
  %474 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %473, i64 -1
  %475 = bitcast %"class.v8::internal::compiler::Node"** %474 to <2 x i64>*
  %476 = load <2 x i64>, <2 x i64>* %475, align 8, !alias.scope !37
  %477 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %468, i64 -1
  %478 = bitcast %"class.v8::internal::compiler::Node"** %477 to <2 x i64>*
  store <2 x i64> %472, <2 x i64>* %478, align 8, !alias.scope !40, !noalias !37
  %479 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %468, i64 -2
  %480 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %479, i64 -1
  %481 = bitcast %"class.v8::internal::compiler::Node"** %480 to <2 x i64>*
  store <2 x i64> %476, <2 x i64>* %481, align 8, !alias.scope !40, !noalias !37
  br label %482

482:                                              ; preds = %460, %463
  %483 = icmp eq i64 %389, %406
  br i1 %483, label %554, label %484

484:                                              ; preds = %482, %391, %384
  %485 = phi %"class.v8::internal::compiler::Node"** [ %373, %391 ], [ %373, %384 ], [ %408, %482 ]
  %486 = phi %"class.v8::internal::compiler::Node"** [ %382, %391 ], [ %382, %384 ], [ %410, %482 ]
  %487 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %486, i64 -1
  %488 = ptrtoint %"class.v8::internal::compiler::Node"** %487 to i64
  %489 = sub i64 %488, %381
  %490 = lshr i64 %489, 3
  %491 = add nuw nsw i64 %490, 1
  %492 = and i64 %491, 7
  %493 = icmp eq i64 %492, 0
  br i1 %493, label %505, label %494

494:                                              ; preds = %484, %494
  %495 = phi %"class.v8::internal::compiler::Node"** [ %498, %494 ], [ %485, %484 ]
  %496 = phi %"class.v8::internal::compiler::Node"** [ %499, %494 ], [ %486, %484 ]
  %497 = phi i64 [ %503, %494 ], [ %492, %484 ]
  %498 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %495, i64 -1
  %499 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %496, i64 -1
  %500 = bitcast %"class.v8::internal::compiler::Node"** %499 to i64*
  %501 = load i64, i64* %500, align 8
  %502 = bitcast %"class.v8::internal::compiler::Node"** %498 to i64*
  store i64 %501, i64* %502, align 8
  %503 = add i64 %497, -1
  %504 = icmp eq i64 %503, 0
  br i1 %504, label %505, label %494, !llvm.loop !43

505:                                              ; preds = %494, %484
  %506 = phi %"class.v8::internal::compiler::Node"** [ undef, %484 ], [ %498, %494 ]
  %507 = phi %"class.v8::internal::compiler::Node"** [ %485, %484 ], [ %498, %494 ]
  %508 = phi %"class.v8::internal::compiler::Node"** [ %486, %484 ], [ %499, %494 ]
  %509 = icmp ult i64 %489, 56
  br i1 %509, label %554, label %510

510:                                              ; preds = %505, %510
  %511 = phi %"class.v8::internal::compiler::Node"** [ %548, %510 ], [ %507, %505 ]
  %512 = phi %"class.v8::internal::compiler::Node"** [ %549, %510 ], [ %508, %505 ]
  %513 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %511, i64 -1
  %514 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %512, i64 -1
  %515 = bitcast %"class.v8::internal::compiler::Node"** %514 to i64*
  %516 = load i64, i64* %515, align 8
  %517 = bitcast %"class.v8::internal::compiler::Node"** %513 to i64*
  store i64 %516, i64* %517, align 8
  %518 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %511, i64 -2
  %519 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %512, i64 -2
  %520 = bitcast %"class.v8::internal::compiler::Node"** %519 to i64*
  %521 = load i64, i64* %520, align 8
  %522 = bitcast %"class.v8::internal::compiler::Node"** %518 to i64*
  store i64 %521, i64* %522, align 8
  %523 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %511, i64 -3
  %524 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %512, i64 -3
  %525 = bitcast %"class.v8::internal::compiler::Node"** %524 to i64*
  %526 = load i64, i64* %525, align 8
  %527 = bitcast %"class.v8::internal::compiler::Node"** %523 to i64*
  store i64 %526, i64* %527, align 8
  %528 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %511, i64 -4
  %529 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %512, i64 -4
  %530 = bitcast %"class.v8::internal::compiler::Node"** %529 to i64*
  %531 = load i64, i64* %530, align 8
  %532 = bitcast %"class.v8::internal::compiler::Node"** %528 to i64*
  store i64 %531, i64* %532, align 8
  %533 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %511, i64 -5
  %534 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %512, i64 -5
  %535 = bitcast %"class.v8::internal::compiler::Node"** %534 to i64*
  %536 = load i64, i64* %535, align 8
  %537 = bitcast %"class.v8::internal::compiler::Node"** %533 to i64*
  store i64 %536, i64* %537, align 8
  %538 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %511, i64 -6
  %539 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %512, i64 -6
  %540 = bitcast %"class.v8::internal::compiler::Node"** %539 to i64*
  %541 = load i64, i64* %540, align 8
  %542 = bitcast %"class.v8::internal::compiler::Node"** %538 to i64*
  store i64 %541, i64* %542, align 8
  %543 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %511, i64 -7
  %544 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %512, i64 -7
  %545 = bitcast %"class.v8::internal::compiler::Node"** %544 to i64*
  %546 = load i64, i64* %545, align 8
  %547 = bitcast %"class.v8::internal::compiler::Node"** %543 to i64*
  store i64 %546, i64* %547, align 8
  %548 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %511, i64 -8
  %549 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %512, i64 -8
  %550 = bitcast %"class.v8::internal::compiler::Node"** %549 to i64*
  %551 = load i64, i64* %550, align 8
  %552 = bitcast %"class.v8::internal::compiler::Node"** %548 to i64*
  store i64 %551, i64* %552, align 8
  %553 = icmp eq %"class.v8::internal::compiler::Node"** %549, %380
  br i1 %553, label %554, label %510, !llvm.loop !44

554:                                              ; preds = %505, %510, %482, %370
  %555 = phi %"class.v8::internal::compiler::Node"** [ %373, %370 ], [ %408, %482 ], [ %506, %505 ], [ %548, %510 ]
  %556 = ptrtoint %"class.v8::internal::compiler::Node"** %555 to i64
  store i64 %556, i64* %334, align 8
  store i64 %378, i64* %333, align 8
  store i64 %375, i64* %343, align 8
  br label %557

557:                                              ; preds = %326, %554
  %558 = add nuw i32 %316, 1
  %559 = load i32, i32* %24, align 8
  %560 = icmp ult i32 %558, %559
  br i1 %560, label %315, label %310

561:                                              ; preds = %572, %8, %27
  ret void

562:                                              ; preds = %28, %572
  %563 = phi i32 [ %30, %28 ], [ %573, %572 ]
  %564 = phi %"class.v8::internal::compiler::Node"** [ %4, %28 ], [ %574, %572 ]
  %565 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %564, align 8
  %566 = icmp eq i32 %563, 0
  br i1 %566, label %572, label %567

567:                                              ; preds = %562
  %568 = getelementptr inbounds %"class.v8::internal::compiler::Node", %"class.v8::internal::compiler::Node"* %565, i64 0, i32 3
  %569 = ptrtoint %"class.v8::internal::compiler::Node"* %565 to i64
  %570 = add i64 %569, 32
  %571 = inttoptr i64 %570 to i64*
  br label %576

572:                                              ; preds = %602, %562
  %573 = phi i32 [ 0, %562 ], [ %604, %602 ]
  %574 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %564, i64 1
  %575 = icmp eq %"class.v8::internal::compiler::Node"** %574, %5
  br i1 %575, label %561, label %562

576:                                              ; preds = %567, %602
  %577 = phi i32 [ 0, %567 ], [ %603, %602 ]
  %578 = tail call %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler10NodeCopier3mapEPNS1_4NodeEj(%"class.v8::internal::compiler::NodeCopier"* %0, %"class.v8::internal::compiler::Node"* %565, i32 %577) #6
  %579 = getelementptr inbounds %"class.v8::internal::compiler::Node", %"class.v8::internal::compiler::Node"* %578, i64 0, i32 3
  %580 = ptrtoint %"class.v8::internal::compiler::Node"* %578 to i64
  %581 = add i64 %580, 32
  %582 = inttoptr i64 %581 to %"struct.v8::internal::compiler::Node::OutOfLineInputs"**
  %583 = inttoptr i64 %581 to i64*
  %584 = bitcast %"class.v8::internal::compiler::Node"* %578 to %"struct.v8::internal::compiler::Node::Use"*
  %585 = inttoptr i64 %581 to %"struct.v8::internal::compiler::Node::Use"**
  br label %586

586:                                              ; preds = %643, %576
  %587 = phi i64 [ %644, %643 ], [ 0, %576 ]
  %588 = load i32, i32* %579, align 4
  %589 = and i32 %588, 251658240
  %590 = icmp eq i32 %589, 251658240
  br i1 %590, label %594, label %591

591:                                              ; preds = %586
  %592 = lshr i32 %588, 24
  %593 = and i32 %592, 15
  br label %598

594:                                              ; preds = %586
  %595 = load %"struct.v8::internal::compiler::Node::OutOfLineInputs"*, %"struct.v8::internal::compiler::Node::OutOfLineInputs"** %582, align 8
  %596 = getelementptr inbounds %"struct.v8::internal::compiler::Node::OutOfLineInputs", %"struct.v8::internal::compiler::Node::OutOfLineInputs"* %595, i64 0, i32 1
  %597 = load i32, i32* %596, align 8
  br label %598

598:                                              ; preds = %591, %594
  %599 = phi i32 [ %593, %591 ], [ %597, %594 ]
  %600 = sext i32 %599 to i64
  %601 = icmp slt i64 %587, %600
  br i1 %601, label %606, label %602

602:                                              ; preds = %598
  %603 = add nuw i32 %577, 1
  %604 = load i32, i32* %29, align 8
  %605 = icmp ult i32 %603, %604
  br i1 %605, label %576, label %572

606:                                              ; preds = %598
  %607 = load i32, i32* %568, align 4
  %608 = and i32 %607, 251658240
  %609 = icmp eq i32 %608, 251658240
  br i1 %609, label %610, label %613

610:                                              ; preds = %606
  %611 = load i64, i64* %571, align 8
  %612 = add i64 %611, 16
  br label %613

613:                                              ; preds = %606, %610
  %614 = phi i64 [ %612, %610 ], [ %570, %606 ]
  %615 = inttoptr i64 %614 to %"class.v8::internal::compiler::Node"**
  %616 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %615, i64 %587
  %617 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %616, align 8
  %618 = tail call %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler10NodeCopier3mapEPNS1_4NodeEj(%"class.v8::internal::compiler::NodeCopier"* %0, %"class.v8::internal::compiler::Node"* %617, i32 %577) #6
  %619 = load i32, i32* %579, align 4
  %620 = and i32 %619, 251658240
  %621 = icmp eq i32 %620, 251658240
  br i1 %621, label %622, label %625

622:                                              ; preds = %613
  %623 = load i64, i64* %583, align 8
  %624 = add i64 %623, 16
  br label %625

625:                                              ; preds = %613, %622
  %626 = phi i64 [ %624, %622 ], [ %581, %613 ]
  %627 = inttoptr i64 %626 to %"class.v8::internal::compiler::Node"**
  %628 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %627, i64 %587
  %629 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %628, align 8
  %630 = icmp eq %"class.v8::internal::compiler::Node"* %629, %618
  br i1 %630, label %643, label %631

631:                                              ; preds = %625
  br i1 %621, label %632, label %634

632:                                              ; preds = %631
  %633 = load %"struct.v8::internal::compiler::Node::Use"*, %"struct.v8::internal::compiler::Node::Use"** %585, align 8
  br label %634

634:                                              ; preds = %631, %632
  %635 = phi %"struct.v8::internal::compiler::Node::Use"* [ %633, %632 ], [ %584, %631 ]
  %636 = xor i64 %587, -1
  %637 = getelementptr inbounds %"struct.v8::internal::compiler::Node::Use", %"struct.v8::internal::compiler::Node::Use"* %635, i64 %636
  %638 = icmp eq %"class.v8::internal::compiler::Node"* %629, null
  br i1 %638, label %640, label %639

639:                                              ; preds = %634
  tail call void @_ZN2v88internal8compiler4Node9RemoveUseEPNS2_3UseE(%"class.v8::internal::compiler::Node"* nonnull %629, %"struct.v8::internal::compiler::Node::Use"* %637) #6
  br label %640

640:                                              ; preds = %639, %634
  store %"class.v8::internal::compiler::Node"* %618, %"class.v8::internal::compiler::Node"** %628, align 8
  %641 = icmp eq %"class.v8::internal::compiler::Node"* %618, null
  br i1 %641, label %643, label %642

642:                                              ; preds = %640
  tail call void @_ZN2v88internal8compiler4Node9AppendUseEPNS2_3UseE(%"class.v8::internal::compiler::Node"* nonnull %618, %"struct.v8::internal::compiler::Node::Use"* %637) #6
  br label %643

643:                                              ; preds = %625, %640, %642
  %644 = add nuw nsw i64 %587, 1
  br label %586
}

declare %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler5Graph7NewNodeEPKNS1_8OperatorEiPKPNS1_4NodeEb(%"class.v8::internal::compiler::Graph"*, %"class.v8::internal::compiler::Operator"*, i32, %"class.v8::internal::compiler::Node"**, i1 zeroext) local_unnamed_addr #3

declare %"class.v8::internal::compiler::Operator"* @_ZN2v88internal8compiler21CommonOperatorBuilder5MergeEi(%"class.v8::internal::compiler::CommonOperatorBuilder"*, i32) local_unnamed_addr #3

declare %"class.v8::internal::compiler::Operator"* @_ZN2v88internal8compiler21CommonOperatorBuilder16ResizeMergeOrPhiEPKNS1_8OperatorEi(%"class.v8::internal::compiler::CommonOperatorBuilder"*, %"class.v8::internal::compiler::Operator"*, i32) local_unnamed_addr #3

declare void @_ZN2v88internal8compiler14NodeProperties8ChangeOpEPNS1_4NodeEPKNS1_8OperatorE(%"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Operator"*) local_unnamed_addr #3

declare void @_ZN2v88internal8compiler4Node11InsertInputEPNS0_4ZoneEiPS2_(%"class.v8::internal::compiler::Node"*, %"class.v8::internal::Zone"*, i32, %"class.v8::internal::compiler::Node"*) local_unnamed_addr #3

declare %"class.v8::internal::compiler::Operator"* @_ZN2v88internal8compiler21CommonOperatorBuilder3PhiENS0_21MachineRepresentationEi(%"class.v8::internal::compiler::CommonOperatorBuilder"*, i8 zeroext, i32) local_unnamed_addr #3

declare zeroext i8 @_ZN2v88internal8compiler29LoopExitValueRepresentationOfEPKNS1_8OperatorE(%"class.v8::internal::compiler::Operator"*) local_unnamed_addr #3

declare %"class.v8::internal::compiler::Operator"* @_ZN2v88internal8compiler21CommonOperatorBuilder9EffectPhiEi(%"class.v8::internal::compiler::CommonOperatorBuilder"*, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal8compiler10LoopPeeler14PeelInnerLoopsEPNS1_8LoopTree4LoopE(%"class.v8::internal::compiler::LoopPeeler"* nocapture readonly, %"class.v8::internal::compiler::LoopTree::Loop"*) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::compiler::LoopTree::Loop", %"class.v8::internal::compiler::LoopTree::Loop"* %1, i64 0, i32 2, i32 0, i32 0, i32 0
  %4 = load %"class.v8::internal::compiler::LoopTree::Loop"**, %"class.v8::internal::compiler::LoopTree::Loop"*** %3, align 8
  %5 = getelementptr inbounds %"class.v8::internal::compiler::LoopTree::Loop", %"class.v8::internal::compiler::LoopTree::Loop"* %1, i64 0, i32 2, i32 0, i32 0, i32 1
  %6 = load %"class.v8::internal::compiler::LoopTree::Loop"**, %"class.v8::internal::compiler::LoopTree::Loop"*** %5, align 8
  %7 = icmp eq %"class.v8::internal::compiler::LoopTree::Loop"** %4, %6
  br i1 %7, label %13, label %8

8:                                                ; preds = %2, %8
  %9 = phi %"class.v8::internal::compiler::LoopTree::Loop"** [ %11, %8 ], [ %4, %2 ]
  %10 = load %"class.v8::internal::compiler::LoopTree::Loop"*, %"class.v8::internal::compiler::LoopTree::Loop"** %9, align 8
  tail call void @_ZN2v88internal8compiler10LoopPeeler14PeelInnerLoopsEPNS1_8LoopTree4LoopE(%"class.v8::internal::compiler::LoopPeeler"* %0, %"class.v8::internal::compiler::LoopTree::Loop"* %10)
  %11 = getelementptr inbounds %"class.v8::internal::compiler::LoopTree::Loop"*, %"class.v8::internal::compiler::LoopTree::Loop"** %9, i64 1
  %12 = icmp eq %"class.v8::internal::compiler::LoopTree::Loop"** %11, %6
  br i1 %12, label %48, label %8

13:                                               ; preds = %2
  %14 = getelementptr inbounds %"class.v8::internal::compiler::LoopTree::Loop", %"class.v8::internal::compiler::LoopTree::Loop"* %1, i64 0, i32 6
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds %"class.v8::internal::compiler::LoopTree::Loop", %"class.v8::internal::compiler::LoopTree::Loop"* %1, i64 0, i32 3
  %17 = load i32, i32* %16, align 8
  %18 = sub nsw i32 %15, %17
  %19 = icmp ugt i32 %18, 1000
  br i1 %19, label %48, label %20

20:                                               ; preds = %13
  %21 = load i8, i8* @_ZN2v88internal21FLAG_trace_turbo_loopE, align 1, !range !45
  %22 = icmp eq i8 %21, 0
  br i1 %22, label %46, label %23

23:                                               ; preds = %20
  tail call void (i8*, ...) @_ZN2v88internal6PrintFEPKcz(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i64 0, i64 0)) #6
  %24 = getelementptr inbounds %"class.v8::internal::compiler::LoopPeeler", %"class.v8::internal::compiler::LoopPeeler"* %0, i64 0, i32 2
  %25 = load %"class.v8::internal::compiler::LoopTree"*, %"class.v8::internal::compiler::LoopTree"** %24, align 8
  %26 = getelementptr inbounds %"class.v8::internal::compiler::LoopTree", %"class.v8::internal::compiler::LoopTree"* %25, i64 0, i32 4, i32 0, i32 0, i32 0
  %27 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %26, align 8
  %28 = load i32, i32* %16, align 8
  %29 = getelementptr inbounds %"class.v8::internal::compiler::LoopTree::Loop", %"class.v8::internal::compiler::LoopTree::Loop"* %1, i64 0, i32 4
  %30 = load i32, i32* %29, align 4
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %27, i64 %31
  %33 = icmp eq i32 %28, %30
  br i1 %33, label %37, label %34

34:                                               ; preds = %23
  %35 = sext i32 %28 to i64
  %36 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %27, i64 %35
  br label %38

37:                                               ; preds = %38, %23
  tail call void (i8*, ...) @_ZN2v88internal6PrintFEPKcz(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)) #6
  br label %46

38:                                               ; preds = %34, %38
  %39 = phi %"class.v8::internal::compiler::Node"** [ %44, %38 ], [ %36, %34 ]
  %40 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %39, align 8
  %41 = getelementptr inbounds %"class.v8::internal::compiler::Node", %"class.v8::internal::compiler::Node"* %40, i64 0, i32 3
  %42 = load i32, i32* %41, align 4
  %43 = and i32 %42, 16777215
  tail call void (i8*, ...) @_ZN2v88internal6PrintFEPKcz(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 %43) #6
  %44 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %39, i64 1
  %45 = icmp eq %"class.v8::internal::compiler::Node"** %44, %32
  br i1 %45, label %37, label %38

46:                                               ; preds = %20, %37
  %47 = tail call %"class.v8::internal::compiler::PeeledIteration"* @_ZN2v88internal8compiler10LoopPeeler4PeelEPNS1_8LoopTree4LoopE(%"class.v8::internal::compiler::LoopPeeler"* %0, %"class.v8::internal::compiler::LoopTree::Loop"* %1)
  br label %48

48:                                               ; preds = %8, %13, %46
  ret void
}

declare void @_ZN2v88internal6PrintFEPKcz(i8*, ...) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal8compiler10LoopPeeler17EliminateLoopExitEPNS1_4NodeE(%"class.v8::internal::compiler::Node"*) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::compiler::Node", %"class.v8::internal::compiler::Node"* %0, i64 0, i32 4
  %3 = load %"struct.v8::internal::compiler::Node::Use"*, %"struct.v8::internal::compiler::Node::Use"** %2, align 8
  %4 = icmp eq %"struct.v8::internal::compiler::Node::Use"* %3, null
  br i1 %4, label %5, label %42

5:                                                ; preds = %124, %1
  %6 = getelementptr inbounds %"class.v8::internal::compiler::Node", %"class.v8::internal::compiler::Node"* %0, i64 0, i32 0
  %7 = load %"class.v8::internal::compiler::Operator"*, %"class.v8::internal::compiler::Operator"** %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::compiler::Operator", %"class.v8::internal::compiler::Operator"* %7, i64 0, i32 7
  %9 = load i32, i32* %8, align 4
  %10 = icmp sgt i32 %9, 0
  br i1 %10, label %12, label %11, !prof !46

11:                                               ; preds = %5
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.7, i64 0, i64 0)) #7
  unreachable

12:                                               ; preds = %5
  %13 = getelementptr inbounds %"class.v8::internal::compiler::Operator", %"class.v8::internal::compiler::Operator"* %7, i64 0, i32 5
  %14 = load i32, i32* %13, align 4
  %15 = tail call zeroext i1 @_ZN2v88internal8compiler18OperatorProperties15HasContextInputEPKNS1_8OperatorE(%"class.v8::internal::compiler::Operator"* %7) #6
  %16 = zext i1 %15 to i32
  %17 = load %"class.v8::internal::compiler::Operator"*, %"class.v8::internal::compiler::Operator"** %6, align 8
  %18 = tail call zeroext i1 @_ZN2v88internal8compiler18OperatorProperties18HasFrameStateInputEPKNS1_8OperatorE(%"class.v8::internal::compiler::Operator"* %17) #6
  %19 = zext i1 %18 to i32
  %20 = load %"class.v8::internal::compiler::Operator"*, %"class.v8::internal::compiler::Operator"** %6, align 8
  %21 = getelementptr inbounds %"class.v8::internal::compiler::Operator", %"class.v8::internal::compiler::Operator"* %20, i64 0, i32 6
  %22 = load i32, i32* %21, align 8
  %23 = add i32 %14, %16
  %24 = add i32 %23, %19
  %25 = add i32 %24, %22
  %26 = getelementptr inbounds %"class.v8::internal::compiler::Node", %"class.v8::internal::compiler::Node"* %0, i64 0, i32 3
  %27 = load i32, i32* %26, align 4
  %28 = and i32 %27, 251658240
  %29 = icmp eq i32 %28, 251658240
  %30 = ptrtoint %"class.v8::internal::compiler::Node"* %0 to i64
  %31 = add i64 %30, 32
  br i1 %29, label %32, label %36

32:                                               ; preds = %12
  %33 = inttoptr i64 %31 to i64*
  %34 = load i64, i64* %33, align 8
  %35 = add i64 %34, 16
  br label %36

36:                                               ; preds = %12, %32
  %37 = phi i64 [ %35, %32 ], [ %31, %12 ]
  %38 = inttoptr i64 %37 to %"class.v8::internal::compiler::Node"**
  %39 = sext i32 %25 to i64
  %40 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %38, i64 %39
  %41 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %40, align 8
  tail call void @_ZN2v88internal8compiler14NodeProperties11ReplaceUsesEPNS1_4NodeES4_S4_S4_S4_(%"class.v8::internal::compiler::Node"* %0, %"class.v8::internal::compiler::Node"* null, %"class.v8::internal::compiler::Node"* null, %"class.v8::internal::compiler::Node"* %41, %"class.v8::internal::compiler::Node"* null) #6
  tail call void @_ZN2v88internal8compiler4Node4KillEv(%"class.v8::internal::compiler::Node"* %0) #6
  ret void

42:                                               ; preds = %1, %124
  %43 = phi %"struct.v8::internal::compiler::Node::Use"* [ %45, %124 ], [ %3, %1 ]
  %44 = getelementptr inbounds %"struct.v8::internal::compiler::Node::Use", %"struct.v8::internal::compiler::Node::Use"* %43, i64 0, i32 0
  %45 = load %"struct.v8::internal::compiler::Node::Use"*, %"struct.v8::internal::compiler::Node::Use"** %44, align 8
  %46 = getelementptr inbounds %"struct.v8::internal::compiler::Node::Use", %"struct.v8::internal::compiler::Node::Use"* %43, i64 0, i32 2
  %47 = load i32, i32* %46, align 8
  %48 = lshr i32 %47, 1
  %49 = getelementptr inbounds %"struct.v8::internal::compiler::Node::Use", %"struct.v8::internal::compiler::Node::Use"* %43, i64 1
  %50 = zext i32 %48 to i64
  %51 = getelementptr inbounds %"struct.v8::internal::compiler::Node::Use", %"struct.v8::internal::compiler::Node::Use"* %49, i64 %50
  %52 = and i32 %47, 1
  %53 = icmp eq i32 %52, 0
  %54 = ptrtoint %"struct.v8::internal::compiler::Node::Use"* %51 to i64
  %55 = select i1 %53, i64 16, i64 32
  %56 = add i64 %55, %54
  %57 = inttoptr i64 %56 to %"class.v8::internal::compiler::Node"**
  %58 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %57, i64 %50
  %59 = tail call zeroext i1 @_ZN2v88internal8compiler14NodeProperties13IsControlEdgeENS1_4EdgeE(%"struct.v8::internal::compiler::Node::Use"* nonnull %43, %"class.v8::internal::compiler::Node"** %58) #6
  br i1 %59, label %60, label %124

60:                                               ; preds = %42
  %61 = load i32, i32* %46, align 8
  %62 = lshr i32 %61, 1
  %63 = zext i32 %62 to i64
  %64 = getelementptr inbounds %"struct.v8::internal::compiler::Node::Use", %"struct.v8::internal::compiler::Node::Use"* %49, i64 %63
  %65 = and i32 %61, 1
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %69, label %67

67:                                               ; preds = %60
  %68 = bitcast %"struct.v8::internal::compiler::Node::Use"* %64 to %"class.v8::internal::compiler::Node"*
  br label %72

69:                                               ; preds = %60
  %70 = bitcast %"struct.v8::internal::compiler::Node::Use"* %64 to %"class.v8::internal::compiler::Node"**
  %71 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %70, align 8
  br label %72

72:                                               ; preds = %67, %69
  %73 = phi %"class.v8::internal::compiler::Node"* [ %68, %67 ], [ %71, %69 ]
  %74 = getelementptr inbounds %"class.v8::internal::compiler::Node", %"class.v8::internal::compiler::Node"* %73, i64 0, i32 0
  %75 = load %"class.v8::internal::compiler::Operator"*, %"class.v8::internal::compiler::Operator"** %74, align 8
  %76 = getelementptr inbounds %"class.v8::internal::compiler::Operator", %"class.v8::internal::compiler::Operator"* %75, i64 0, i32 2
  %77 = load i16, i16* %76, align 8
  switch i16 %77, label %124 [
    i16 53, label %78
    i16 54, label %93
  ]

78:                                               ; preds = %72
  %79 = getelementptr inbounds %"class.v8::internal::compiler::Node", %"class.v8::internal::compiler::Node"* %73, i64 0, i32 3
  %80 = load i32, i32* %79, align 4
  %81 = and i32 %80, 251658240
  %82 = icmp eq i32 %81, 251658240
  %83 = ptrtoint %"class.v8::internal::compiler::Node"* %73 to i64
  %84 = add i64 %83, 32
  br i1 %82, label %85, label %89

85:                                               ; preds = %78
  %86 = inttoptr i64 %84 to i64*
  %87 = load i64, i64* %86, align 8
  %88 = add i64 %87, 16
  br label %89

89:                                               ; preds = %78, %85
  %90 = phi i64 [ %88, %85 ], [ %84, %78 ]
  %91 = inttoptr i64 %90 to %"class.v8::internal::compiler::Node"**
  %92 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %91, align 8
  tail call void @_ZN2v88internal8compiler14NodeProperties11ReplaceUsesEPNS1_4NodeES4_S4_S4_S4_(%"class.v8::internal::compiler::Node"* %73, %"class.v8::internal::compiler::Node"* %92, %"class.v8::internal::compiler::Node"* null, %"class.v8::internal::compiler::Node"* null, %"class.v8::internal::compiler::Node"* null) #6
  tail call void @_ZN2v88internal8compiler4Node4KillEv(%"class.v8::internal::compiler::Node"* %73) #6
  br label %124

93:                                               ; preds = %72
  %94 = getelementptr inbounds %"class.v8::internal::compiler::Operator", %"class.v8::internal::compiler::Operator"* %75, i64 0, i32 6
  %95 = load i32, i32* %94, align 8
  %96 = icmp sgt i32 %95, 0
  br i1 %96, label %98, label %97, !prof !46

97:                                               ; preds = %93
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.6, i64 0, i64 0)) #7
  unreachable

98:                                               ; preds = %93
  %99 = getelementptr inbounds %"class.v8::internal::compiler::Operator", %"class.v8::internal::compiler::Operator"* %75, i64 0, i32 5
  %100 = load i32, i32* %99, align 4
  %101 = tail call zeroext i1 @_ZN2v88internal8compiler18OperatorProperties15HasContextInputEPKNS1_8OperatorE(%"class.v8::internal::compiler::Operator"* %75) #6
  %102 = zext i1 %101 to i32
  %103 = load %"class.v8::internal::compiler::Operator"*, %"class.v8::internal::compiler::Operator"** %74, align 8
  %104 = tail call zeroext i1 @_ZN2v88internal8compiler18OperatorProperties18HasFrameStateInputEPKNS1_8OperatorE(%"class.v8::internal::compiler::Operator"* %103) #6
  %105 = zext i1 %104 to i32
  %106 = add i32 %100, %102
  %107 = add i32 %106, %105
  %108 = getelementptr inbounds %"class.v8::internal::compiler::Node", %"class.v8::internal::compiler::Node"* %73, i64 0, i32 3
  %109 = load i32, i32* %108, align 4
  %110 = and i32 %109, 251658240
  %111 = icmp eq i32 %110, 251658240
  %112 = ptrtoint %"class.v8::internal::compiler::Node"* %73 to i64
  %113 = add i64 %112, 32
  br i1 %111, label %114, label %118

114:                                              ; preds = %98
  %115 = inttoptr i64 %113 to i64*
  %116 = load i64, i64* %115, align 8
  %117 = add i64 %116, 16
  br label %118

118:                                              ; preds = %98, %114
  %119 = phi i64 [ %117, %114 ], [ %113, %98 ]
  %120 = inttoptr i64 %119 to %"class.v8::internal::compiler::Node"**
  %121 = sext i32 %107 to i64
  %122 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %120, i64 %121
  %123 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %122, align 8
  tail call void @_ZN2v88internal8compiler14NodeProperties11ReplaceUsesEPNS1_4NodeES4_S4_S4_S4_(%"class.v8::internal::compiler::Node"* %73, %"class.v8::internal::compiler::Node"* null, %"class.v8::internal::compiler::Node"* %123, %"class.v8::internal::compiler::Node"* null, %"class.v8::internal::compiler::Node"* null) #6
  tail call void @_ZN2v88internal8compiler4Node4KillEv(%"class.v8::internal::compiler::Node"* %73) #6
  br label %124

124:                                              ; preds = %72, %89, %118, %42
  %125 = icmp eq %"struct.v8::internal::compiler::Node::Use"* %45, null
  br i1 %125, label %5, label %42
}

declare zeroext i1 @_ZN2v88internal8compiler14NodeProperties13IsControlEdgeENS1_4EdgeE(%"struct.v8::internal::compiler::Node::Use"*, %"class.v8::internal::compiler::Node"**) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare void @_ZN2v88internal8compiler14NodeProperties11ReplaceUsesEPNS1_4NodeES4_S4_S4_S4_(%"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*) local_unnamed_addr #3

declare void @_ZN2v88internal8compiler4Node4KillEv(%"class.v8::internal::compiler::Node"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal8compiler10LoopPeeler20PeelInnerLoopsOfTreeEv(%"class.v8::internal::compiler::LoopPeeler"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::compiler::LoopPeeler", %"class.v8::internal::compiler::LoopPeeler"* %0, i64 0, i32 2
  %3 = load %"class.v8::internal::compiler::LoopTree"*, %"class.v8::internal::compiler::LoopTree"** %2, align 8
  %4 = getelementptr inbounds %"class.v8::internal::compiler::LoopTree", %"class.v8::internal::compiler::LoopTree"* %3, i64 0, i32 1, i32 0, i32 0, i32 0
  %5 = load %"class.v8::internal::compiler::LoopTree::Loop"**, %"class.v8::internal::compiler::LoopTree::Loop"*** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::compiler::LoopTree", %"class.v8::internal::compiler::LoopTree"* %3, i64 0, i32 1, i32 0, i32 0, i32 1
  %7 = load %"class.v8::internal::compiler::LoopTree::Loop"**, %"class.v8::internal::compiler::LoopTree::Loop"*** %6, align 8
  %8 = icmp eq %"class.v8::internal::compiler::LoopTree::Loop"** %5, %7
  br i1 %8, label %9, label %14

9:                                                ; preds = %14, %1
  %10 = getelementptr inbounds %"class.v8::internal::compiler::LoopPeeler", %"class.v8::internal::compiler::LoopPeeler"* %0, i64 0, i32 0
  %11 = load %"class.v8::internal::compiler::Graph"*, %"class.v8::internal::compiler::Graph"** %10, align 8
  %12 = getelementptr inbounds %"class.v8::internal::compiler::LoopPeeler", %"class.v8::internal::compiler::LoopPeeler"* %0, i64 0, i32 3
  %13 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %12, align 8
  tail call void @_ZN2v88internal8compiler10LoopPeeler18EliminateLoopExitsEPNS1_5GraphEPNS0_4ZoneE(%"class.v8::internal::compiler::Graph"* %11, %"class.v8::internal::Zone"* %13)
  ret void

14:                                               ; preds = %1, %14
  %15 = phi %"class.v8::internal::compiler::LoopTree::Loop"** [ %17, %14 ], [ %5, %1 ]
  %16 = load %"class.v8::internal::compiler::LoopTree::Loop"*, %"class.v8::internal::compiler::LoopTree::Loop"** %15, align 8
  tail call void @_ZN2v88internal8compiler10LoopPeeler14PeelInnerLoopsEPNS1_8LoopTree4LoopE(%"class.v8::internal::compiler::LoopPeeler"* %0, %"class.v8::internal::compiler::LoopTree::Loop"* %16)
  %17 = getelementptr inbounds %"class.v8::internal::compiler::LoopTree::Loop"*, %"class.v8::internal::compiler::LoopTree::Loop"** %15, i64 1
  %18 = icmp eq %"class.v8::internal::compiler::LoopTree::Loop"** %17, %7
  br i1 %18, label %9, label %14
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal8compiler10LoopPeeler18EliminateLoopExitsEPNS1_5GraphEPNS0_4ZoneE(%"class.v8::internal::compiler::Graph"* nocapture readonly, %"class.v8::internal::Zone"*) local_unnamed_addr #2 align 2 {
  %3 = alloca i8, align 1
  %4 = alloca %"class.v8::internal::ZoneAllocator.72", align 8
  %5 = alloca %"class.v8::internal::ZoneDeque", align 8
  %6 = alloca %"class.v8::internal::ZoneQueue", align 8
  %7 = alloca %"class.v8::internal::ZoneVector.63", align 8
  %8 = bitcast %"class.v8::internal::ZoneQueue"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %8) #6
  %9 = bitcast %"class.v8::internal::ZoneDeque"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %9) #6
  %10 = ptrtoint %"class.v8::internal::Zone"* %1 to i64
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 0, i64 32, i1 false) #6
  %11 = getelementptr inbounds %"class.v8::internal::ZoneDeque", %"class.v8::internal::ZoneDeque"* %5, i64 0, i32 0, i32 0, i32 0, i32 3, i32 1
  %12 = bitcast %"struct.std::__1::__compressed_pair_elem.57"* %11 to i64*
  store i64 %10, i64* %12, align 8
  %13 = getelementptr inbounds %"class.v8::internal::ZoneDeque", %"class.v8::internal::ZoneDeque"* %5, i64 0, i32 0, i32 0, i32 0, i32 3, i32 1, i32 0, i32 1
  %14 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"** %13 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %14, i8 0, i64 24, i1 false) #6
  %15 = getelementptr inbounds %"class.v8::internal::ZoneDeque", %"class.v8::internal::ZoneDeque"* %5, i64 0, i32 0, i32 0, i32 2, i32 1
  %16 = bitcast %"struct.std::__1::__compressed_pair_elem.61"* %15 to i64*
  store i64 %10, i64* %16, align 8
  %17 = getelementptr inbounds %"class.v8::internal::ZoneDeque", %"class.v8::internal::ZoneDeque"* %5, i64 0, i32 0, i32 0, i32 2, i32 1, i32 0, i32 1
  store %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock"* null, %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock"** %17, align 8
  %18 = getelementptr inbounds %"class.v8::internal::ZoneQueue", %"class.v8::internal::ZoneQueue"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3
  %19 = getelementptr inbounds %"class.v8::internal::ZoneDeque", %"class.v8::internal::ZoneDeque"* %5, i64 0, i32 0, i32 0, i32 0, i32 3
  %20 = bitcast %"class.std::__1::__compressed_pair.55"* %18 to i8*
  %21 = bitcast %"class.std::__1::__compressed_pair.55"* %19 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 0, i64 24, i1 false) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %20, i8* align 8 %21, i64 24, i1 false) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 0, i64 32, i1 false) #6
  %22 = getelementptr inbounds %"class.v8::internal::ZoneQueue", %"class.v8::internal::ZoneQueue"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %23 = getelementptr inbounds %"class.v8::internal::ZoneDeque", %"class.v8::internal::ZoneDeque"* %5, i64 0, i32 0, i32 0, i32 1
  store i64 0, i64* %22, align 8
  %24 = getelementptr inbounds %"class.v8::internal::ZoneQueue", %"class.v8::internal::ZoneQueue"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %25 = getelementptr inbounds %"class.v8::internal::ZoneDeque", %"class.v8::internal::ZoneDeque"* %5, i64 0, i32 0, i32 0, i32 2
  %26 = bitcast %"class.std::__1::__compressed_pair.59"* %24 to i8*
  %27 = bitcast %"class.std::__1::__compressed_pair.59"* %25 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %26, i8* align 8 %27, i64 24, i1 false) #6
  %28 = bitcast i64* %23 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %28, i8 0, i64 16, i1 false) #6
  %29 = getelementptr inbounds %"class.v8::internal::ZoneDeque", %"class.v8::internal::ZoneDeque"* %5, i64 0, i32 0, i32 0
  call void @_ZNSt3__112__deque_baseIPN2v88internal8compiler4NodeENS2_22RecyclingZoneAllocatorIS5_EEED2Ev(%"class.std::__1::__deque_base"* nonnull %29) #6
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %9) #6
  %30 = bitcast %"class.v8::internal::ZoneVector.63"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %30) #6
  %31 = getelementptr inbounds %"class.v8::internal::compiler::Graph", %"class.v8::internal::compiler::Graph"* %0, i64 0, i32 4
  %32 = load i32, i32* %31, align 4
  %33 = zext i32 %32 to i64
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %3)
  store i8 0, i8* %3, align 1
  %34 = getelementptr inbounds %"class.v8::internal::ZoneVector.63", %"class.v8::internal::ZoneVector.63"* %7, i64 0, i32 0
  %35 = bitcast %"class.v8::internal::ZoneAllocator.72"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %35) #6
  %36 = getelementptr inbounds %"class.v8::internal::ZoneAllocator.72", %"class.v8::internal::ZoneAllocator.72"* %4, i64 0, i32 0
  store %"class.v8::internal::Zone"* %1, %"class.v8::internal::Zone"** %36, align 8
  call void @_ZNSt3__16vectorIbN2v88internal13ZoneAllocatorIbEEEC2EmRKbRKS4_(%"class.std::__1::vector.64"* nonnull %34, i64 %33, i8* nonnull dereferenceable(1) %3, %"class.v8::internal::ZoneAllocator.72"* nonnull dereferenceable(8) %4) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %35) #6
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %3)
  %37 = getelementptr inbounds %"class.v8::internal::compiler::Graph", %"class.v8::internal::compiler::Graph"* %0, i64 0, i32 2
  %38 = bitcast %"class.v8::internal::compiler::Node"** %37 to i64*
  %39 = load i64, i64* %38, align 8
  %40 = getelementptr inbounds %"class.v8::internal::ZoneQueue", %"class.v8::internal::ZoneQueue"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %41 = bitcast %"class.v8::internal::compiler::Node"**** %40 to i64*
  %42 = getelementptr inbounds %"class.v8::internal::ZoneQueue", %"class.v8::internal::ZoneQueue"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %43 = bitcast %"class.v8::internal::compiler::Node"**** %42 to i64*
  %44 = getelementptr inbounds %"class.v8::internal::ZoneQueue", %"class.v8::internal::ZoneQueue"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %45 = load i64, i64* %44, align 8
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %47, label %62

47:                                               ; preds = %2
  %48 = getelementptr inbounds %"class.v8::internal::ZoneQueue", %"class.v8::internal::ZoneQueue"* %6, i64 0, i32 0, i32 0, i32 0
  call void @_ZNSt3__15dequeIPN2v88internal8compiler4NodeENS2_22RecyclingZoneAllocatorIS5_EEE19__add_back_capacityEv(%"class.std::__1::deque"* nonnull %48) #6
  %49 = load i64, i64* %44, align 8
  %50 = load i64, i64* %22, align 8
  %51 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %42, align 8
  %52 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %40, align 8
  %53 = add i64 %50, %49
  %54 = icmp eq %"class.v8::internal::compiler::Node"*** %52, %51
  br i1 %54, label %62, label %55

55:                                               ; preds = %47
  %56 = lshr i64 %53, 9
  %57 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %51, i64 %56
  %58 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %57, align 8
  %59 = and i64 %53, 511
  %60 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %58, i64 %59
  %61 = bitcast %"class.v8::internal::compiler::Node"** %60 to i64*
  br label %62

62:                                               ; preds = %2, %47, %55
  %63 = phi i64* [ %61, %55 ], [ null, %47 ], [ null, %2 ]
  store i64 %39, i64* %63, align 8
  %64 = load i64, i64* %44, align 8
  %65 = add i64 %64, 1
  store i64 %65, i64* %44, align 8
  %66 = icmp eq i64 %65, 0
  br i1 %66, label %294, label %67

67:                                               ; preds = %62
  %68 = getelementptr inbounds %"class.v8::internal::ZoneQueue", %"class.v8::internal::ZoneQueue"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 2, i32 1, i32 0, i32 1
  %69 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock"** %68 to i64*
  %70 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock"** %68 to %"class.v8::internal::compiler::Node"***
  %71 = getelementptr inbounds %"class.v8::internal::ZoneVector.63", %"class.v8::internal::ZoneVector.63"* %7, i64 0, i32 0, i32 0
  %72 = getelementptr inbounds %"class.v8::internal::ZoneQueue", %"class.v8::internal::ZoneQueue"* %6, i64 0, i32 0, i32 0, i32 0
  br label %73

73:                                               ; preds = %67, %291
  %74 = phi i64 [ %65, %67 ], [ %292, %291 ]
  %75 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %42, align 8
  %76 = load i64, i64* %22, align 8
  %77 = lshr i64 %76, 9
  %78 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %75, i64 %77
  %79 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %78, align 8
  %80 = and i64 %76, 511
  %81 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %79, i64 %80
  %82 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %81, align 8
  %83 = add i64 %74, -1
  store i64 %83, i64* %44, align 8
  %84 = add i64 %76, 1
  store i64 %84, i64* %22, align 8
  %85 = icmp ult i64 %84, 1024
  br i1 %85, label %106, label %86

86:                                               ; preds = %73
  %87 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %75, align 8
  %88 = load %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock"*, %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock"** %68, align 8
  %89 = icmp eq %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock"* %88, null
  br i1 %89, label %94, label %90

90:                                               ; preds = %86
  %91 = getelementptr inbounds %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock", %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock"* %88, i64 0, i32 1
  %92 = load i64, i64* %91, align 8
  %93 = icmp ugt i64 %92, 512
  br i1 %93, label %101, label %94

94:                                               ; preds = %90, %86
  %95 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %87, i64 1
  %96 = bitcast %"class.v8::internal::compiler::Node"** %95 to i64*
  store i64 512, i64* %96, align 8
  %97 = load i64, i64* %69, align 8
  %98 = bitcast %"class.v8::internal::compiler::Node"** %87 to i64*
  store i64 %97, i64* %98, align 8
  store %"class.v8::internal::compiler::Node"** %87, %"class.v8::internal::compiler::Node"*** %70, align 8
  %99 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %42, align 8
  %100 = load i64, i64* %22, align 8
  br label %101

101:                                              ; preds = %94, %90
  %102 = phi i64 [ %84, %90 ], [ %100, %94 ]
  %103 = phi %"class.v8::internal::compiler::Node"*** [ %75, %90 ], [ %99, %94 ]
  %104 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %103, i64 1
  store %"class.v8::internal::compiler::Node"*** %104, %"class.v8::internal::compiler::Node"**** %42, align 8
  %105 = add i64 %102, -512
  store i64 %105, i64* %22, align 8
  br label %106

106:                                              ; preds = %73, %101
  %107 = getelementptr inbounds %"class.v8::internal::compiler::Node", %"class.v8::internal::compiler::Node"* %82, i64 0, i32 0
  %108 = load %"class.v8::internal::compiler::Operator"*, %"class.v8::internal::compiler::Operator"** %107, align 8
  %109 = getelementptr inbounds %"class.v8::internal::compiler::Operator", %"class.v8::internal::compiler::Operator"* %108, i64 0, i32 2
  %110 = load i16, i16* %109, align 8
  %111 = icmp eq i16 %110, 52
  %112 = getelementptr inbounds %"class.v8::internal::compiler::Operator", %"class.v8::internal::compiler::Operator"* %108, i64 0, i32 7
  %113 = load i32, i32* %112, align 4
  %114 = icmp sgt i32 %113, 0
  br i1 %111, label %121, label %115

115:                                              ; preds = %106
  br i1 %114, label %116, label %289

116:                                              ; preds = %115
  %117 = getelementptr inbounds %"class.v8::internal::compiler::Node", %"class.v8::internal::compiler::Node"* %82, i64 0, i32 3
  %118 = ptrtoint %"class.v8::internal::compiler::Node"* %82 to i64
  %119 = add i64 %118, 32
  %120 = inttoptr i64 %119 to i64*
  br label %203

121:                                              ; preds = %106
  br i1 %114, label %123, label %122, !prof !46

122:                                              ; preds = %121
  call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.7, i64 0, i64 0)) #7
  unreachable

123:                                              ; preds = %121
  %124 = getelementptr inbounds %"class.v8::internal::compiler::Operator", %"class.v8::internal::compiler::Operator"* %108, i64 0, i32 5
  %125 = load i32, i32* %124, align 4
  %126 = call zeroext i1 @_ZN2v88internal8compiler18OperatorProperties15HasContextInputEPKNS1_8OperatorE(%"class.v8::internal::compiler::Operator"* %108) #6
  %127 = zext i1 %126 to i32
  %128 = load %"class.v8::internal::compiler::Operator"*, %"class.v8::internal::compiler::Operator"** %107, align 8
  %129 = call zeroext i1 @_ZN2v88internal8compiler18OperatorProperties18HasFrameStateInputEPKNS1_8OperatorE(%"class.v8::internal::compiler::Operator"* %128) #6
  %130 = zext i1 %129 to i32
  %131 = load %"class.v8::internal::compiler::Operator"*, %"class.v8::internal::compiler::Operator"** %107, align 8
  %132 = getelementptr inbounds %"class.v8::internal::compiler::Operator", %"class.v8::internal::compiler::Operator"* %131, i64 0, i32 6
  %133 = load i32, i32* %132, align 8
  %134 = add i32 %125, %127
  %135 = add i32 %134, %130
  %136 = add i32 %135, %133
  %137 = getelementptr inbounds %"class.v8::internal::compiler::Node", %"class.v8::internal::compiler::Node"* %82, i64 0, i32 3
  %138 = load i32, i32* %137, align 4
  %139 = and i32 %138, 251658240
  %140 = icmp eq i32 %139, 251658240
  %141 = ptrtoint %"class.v8::internal::compiler::Node"* %82 to i64
  %142 = add i64 %141, 32
  br i1 %140, label %143, label %147

143:                                              ; preds = %123
  %144 = inttoptr i64 %142 to i64*
  %145 = load i64, i64* %144, align 8
  %146 = add i64 %145, 16
  br label %147

147:                                              ; preds = %123, %143
  %148 = phi i64 [ %146, %143 ], [ %142, %123 ]
  %149 = inttoptr i64 %148 to %"class.v8::internal::compiler::Node"**
  %150 = sext i32 %136 to i64
  %151 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %149, i64 %150
  %152 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %151, align 8
  %153 = ptrtoint %"class.v8::internal::compiler::Node"* %152 to i64
  call void @_ZN2v88internal8compiler10LoopPeeler17EliminateLoopExitEPNS1_4NodeE(%"class.v8::internal::compiler::Node"* %82)
  %154 = getelementptr inbounds %"class.v8::internal::compiler::Node", %"class.v8::internal::compiler::Node"* %152, i64 0, i32 3
  %155 = load i32, i32* %154, align 4
  %156 = and i32 %155, 16777215
  %157 = zext i32 %156 to i64
  %158 = load i64*, i64** %71, align 8
  %159 = lshr i64 %157, 6
  %160 = getelementptr inbounds i64, i64* %158, i64 %159
  %161 = and i64 %157, 63
  %162 = shl i64 1, %161
  %163 = load i64, i64* %160, align 8
  %164 = and i64 %162, %163
  %165 = icmp eq i64 %164, 0
  br i1 %165, label %166, label %289

166:                                              ; preds = %147
  %167 = or i64 %162, %163
  store i64 %167, i64* %160, align 8
  %168 = load i64, i64* %41, align 8
  %169 = load i64, i64* %43, align 8
  %170 = sub i64 %168, %169
  %171 = icmp eq i64 %170, 0
  %172 = shl i64 %170, 6
  %173 = add i64 %172, -1
  %174 = select i1 %171, i64 0, i64 %173
  %175 = load i64, i64* %22, align 8
  %176 = load i64, i64* %44, align 8
  %177 = add i64 %176, %175
  %178 = icmp eq i64 %174, %177
  %179 = inttoptr i64 %169 to %"class.v8::internal::compiler::Node"***
  %180 = inttoptr i64 %168 to %"class.v8::internal::compiler::Node"***
  br i1 %178, label %181, label %187

181:                                              ; preds = %166
  call void @_ZNSt3__15dequeIPN2v88internal8compiler4NodeENS2_22RecyclingZoneAllocatorIS5_EEE19__add_back_capacityEv(%"class.std::__1::deque"* nonnull %72) #6
  %182 = load i64, i64* %44, align 8
  %183 = load i64, i64* %22, align 8
  %184 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %42, align 8
  %185 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %40, align 8
  %186 = add i64 %183, %182
  br label %187

187:                                              ; preds = %181, %166
  %188 = phi i64 [ %186, %181 ], [ %177, %166 ]
  %189 = phi %"class.v8::internal::compiler::Node"*** [ %185, %181 ], [ %180, %166 ]
  %190 = phi %"class.v8::internal::compiler::Node"*** [ %184, %181 ], [ %179, %166 ]
  %191 = icmp eq %"class.v8::internal::compiler::Node"*** %189, %190
  br i1 %191, label %199, label %192

192:                                              ; preds = %187
  %193 = lshr i64 %188, 9
  %194 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %190, i64 %193
  %195 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %194, align 8
  %196 = and i64 %188, 511
  %197 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %195, i64 %196
  %198 = bitcast %"class.v8::internal::compiler::Node"** %197 to i64*
  br label %199

199:                                              ; preds = %187, %192
  %200 = phi i64* [ %198, %192 ], [ null, %187 ]
  store i64 %153, i64* %200, align 8
  %201 = load i64, i64* %44, align 8
  %202 = add i64 %201, 1
  store i64 %202, i64* %44, align 8
  br label %291

203:                                              ; preds = %116, %283
  %204 = phi %"class.v8::internal::compiler::Operator"* [ %108, %116 ], [ %284, %283 ]
  %205 = phi i32 [ 0, %116 ], [ %285, %283 ]
  %206 = getelementptr inbounds %"class.v8::internal::compiler::Operator", %"class.v8::internal::compiler::Operator"* %204, i64 0, i32 5
  %207 = load i32, i32* %206, align 4
  %208 = call zeroext i1 @_ZN2v88internal8compiler18OperatorProperties15HasContextInputEPKNS1_8OperatorE(%"class.v8::internal::compiler::Operator"* %204) #6
  %209 = zext i1 %208 to i32
  %210 = load %"class.v8::internal::compiler::Operator"*, %"class.v8::internal::compiler::Operator"** %107, align 8
  %211 = call zeroext i1 @_ZN2v88internal8compiler18OperatorProperties18HasFrameStateInputEPKNS1_8OperatorE(%"class.v8::internal::compiler::Operator"* %210) #6
  %212 = zext i1 %211 to i32
  %213 = load %"class.v8::internal::compiler::Operator"*, %"class.v8::internal::compiler::Operator"** %107, align 8
  %214 = getelementptr inbounds %"class.v8::internal::compiler::Operator", %"class.v8::internal::compiler::Operator"* %213, i64 0, i32 6
  %215 = load i32, i32* %214, align 8
  %216 = add i32 %207, %205
  %217 = add i32 %216, %209
  %218 = add i32 %217, %212
  %219 = add i32 %218, %215
  %220 = load i32, i32* %117, align 4
  %221 = and i32 %220, 251658240
  %222 = icmp eq i32 %221, 251658240
  br i1 %222, label %223, label %226

223:                                              ; preds = %203
  %224 = load i64, i64* %120, align 8
  %225 = add i64 %224, 16
  br label %226

226:                                              ; preds = %203, %223
  %227 = phi i64 [ %225, %223 ], [ %119, %203 ]
  %228 = inttoptr i64 %227 to %"class.v8::internal::compiler::Node"**
  %229 = sext i32 %219 to i64
  %230 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %228, i64 %229
  %231 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %230, align 8
  %232 = ptrtoint %"class.v8::internal::compiler::Node"* %231 to i64
  %233 = getelementptr inbounds %"class.v8::internal::compiler::Node", %"class.v8::internal::compiler::Node"* %231, i64 0, i32 3
  %234 = load i32, i32* %233, align 4
  %235 = and i32 %234, 16777215
  %236 = zext i32 %235 to i64
  %237 = load i64*, i64** %71, align 8
  %238 = lshr i64 %236, 6
  %239 = getelementptr inbounds i64, i64* %237, i64 %238
  %240 = and i64 %236, 63
  %241 = shl i64 1, %240
  %242 = load i64, i64* %239, align 8
  %243 = and i64 %241, %242
  %244 = icmp eq i64 %243, 0
  br i1 %244, label %245, label %283

245:                                              ; preds = %226
  %246 = or i64 %241, %242
  store i64 %246, i64* %239, align 8
  %247 = load i64, i64* %41, align 8
  %248 = load i64, i64* %43, align 8
  %249 = sub i64 %247, %248
  %250 = icmp eq i64 %249, 0
  %251 = shl i64 %249, 6
  %252 = add i64 %251, -1
  %253 = select i1 %250, i64 0, i64 %252
  %254 = load i64, i64* %22, align 8
  %255 = load i64, i64* %44, align 8
  %256 = add i64 %255, %254
  %257 = icmp eq i64 %253, %256
  %258 = inttoptr i64 %248 to %"class.v8::internal::compiler::Node"***
  %259 = inttoptr i64 %247 to %"class.v8::internal::compiler::Node"***
  br i1 %257, label %260, label %266

260:                                              ; preds = %245
  call void @_ZNSt3__15dequeIPN2v88internal8compiler4NodeENS2_22RecyclingZoneAllocatorIS5_EEE19__add_back_capacityEv(%"class.std::__1::deque"* nonnull %72) #6
  %261 = load i64, i64* %44, align 8
  %262 = load i64, i64* %22, align 8
  %263 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %42, align 8
  %264 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %40, align 8
  %265 = add i64 %262, %261
  br label %266

266:                                              ; preds = %260, %245
  %267 = phi i64 [ %265, %260 ], [ %256, %245 ]
  %268 = phi %"class.v8::internal::compiler::Node"*** [ %264, %260 ], [ %259, %245 ]
  %269 = phi %"class.v8::internal::compiler::Node"*** [ %263, %260 ], [ %258, %245 ]
  %270 = icmp eq %"class.v8::internal::compiler::Node"*** %268, %269
  br i1 %270, label %278, label %271

271:                                              ; preds = %266
  %272 = lshr i64 %267, 9
  %273 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %269, i64 %272
  %274 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %273, align 8
  %275 = and i64 %267, 511
  %276 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %274, i64 %275
  %277 = bitcast %"class.v8::internal::compiler::Node"** %276 to i64*
  br label %278

278:                                              ; preds = %266, %271
  %279 = phi i64* [ %277, %271 ], [ null, %266 ]
  store i64 %232, i64* %279, align 8
  %280 = load i64, i64* %44, align 8
  %281 = add i64 %280, 1
  store i64 %281, i64* %44, align 8
  %282 = load %"class.v8::internal::compiler::Operator"*, %"class.v8::internal::compiler::Operator"** %107, align 8
  br label %283

283:                                              ; preds = %226, %278
  %284 = phi %"class.v8::internal::compiler::Operator"* [ %213, %226 ], [ %282, %278 ]
  %285 = add nuw nsw i32 %205, 1
  %286 = getelementptr inbounds %"class.v8::internal::compiler::Operator", %"class.v8::internal::compiler::Operator"* %284, i64 0, i32 7
  %287 = load i32, i32* %286, align 4
  %288 = icmp slt i32 %285, %287
  br i1 %288, label %203, label %289

289:                                              ; preds = %283, %147, %115
  %290 = load i64, i64* %44, align 8
  br label %291

291:                                              ; preds = %289, %199
  %292 = phi i64 [ %290, %289 ], [ %202, %199 ]
  %293 = icmp eq i64 %292, 0
  br i1 %293, label %294, label %73

294:                                              ; preds = %291, %62
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %30) #6
  %295 = getelementptr inbounds %"class.v8::internal::ZoneQueue", %"class.v8::internal::ZoneQueue"* %6, i64 0, i32 0, i32 0, i32 0, i32 0
  call void @_ZNSt3__112__deque_baseIPN2v88internal8compiler4NodeENS2_22RecyclingZoneAllocatorIS5_EEED2Ev(%"class.std::__1::__deque_base"* nonnull %295) #6
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %8) #6
  ret void
}

declare zeroext i1 @_ZN2v88internal8compiler10LoopFinder14HasMarkedExitsEPNS1_8LoopTreeEPKNS3_4LoopE(%"class.v8::internal::compiler::LoopTree"*, %"class.v8::internal::compiler::LoopTree::Loop"*) local_unnamed_addr #3

declare void @_ZN2v88internal8compiler14NodeMarkerBaseC2EPNS1_5GraphEj(%"class.v8::internal::compiler::NodeMarkerBase"*, %"class.v8::internal::compiler::Graph"*, i32) unnamed_addr #3

; Function Attrs: noreturn
declare void @_Z8V8_FatalPKcz(i8*, ...) local_unnamed_addr #4

declare %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler10NodeCopier3mapEPNS1_4NodeEj(%"class.v8::internal::compiler::NodeCopier"*, %"class.v8::internal::compiler::Node"*, i32) local_unnamed_addr #3

declare void @_ZN2v88internal8compiler4Node9RemoveUseEPNS2_3UseE(%"class.v8::internal::compiler::Node"*, %"struct.v8::internal::compiler::Node::Use"*) local_unnamed_addr #3

declare void @_ZN2v88internal8compiler4Node9AppendUseEPNS2_3UseE(%"class.v8::internal::compiler::Node"*, %"struct.v8::internal::compiler::Node::Use"*) local_unnamed_addr #3

declare zeroext i1 @_ZN2v88internal8compiler18OperatorProperties15HasContextInputEPKNS1_8OperatorE(%"class.v8::internal::compiler::Operator"*) local_unnamed_addr #3

declare zeroext i1 @_ZN2v88internal8compiler18OperatorProperties18HasFrameStateInputEPKNS1_8OperatorE(%"class.v8::internal::compiler::Operator"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__112__deque_baseIPN2v88internal8compiler4NodeENS2_22RecyclingZoneAllocatorIS5_EEED2Ev(%"class.std::__1::__deque_base"*) unnamed_addr #2 comdat align 2 {
  %2 = getelementptr inbounds %"class.std::__1::__deque_base", %"class.std::__1::__deque_base"* %0, i64 0, i32 0, i32 1
  %3 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %2, align 8
  %4 = getelementptr inbounds %"class.std::__1::__deque_base", %"class.std::__1::__deque_base"* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = lshr i64 %5, 9
  %7 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %3, i64 %6
  %8 = getelementptr inbounds %"class.std::__1::__deque_base", %"class.std::__1::__deque_base"* %0, i64 0, i32 0, i32 2
  %9 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %8, align 8
  %10 = icmp eq %"class.v8::internal::compiler::Node"*** %9, %3
  %11 = ptrtoint %"class.v8::internal::compiler::Node"*** %9 to i64
  %12 = ptrtoint %"class.v8::internal::compiler::Node"*** %3 to i64
  br i1 %10, label %13, label %15

13:                                               ; preds = %1
  %14 = getelementptr inbounds %"class.std::__1::__deque_base", %"class.std::__1::__deque_base"* %0, i64 0, i32 2, i32 0, i32 0
  br label %28

15:                                               ; preds = %1
  %16 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %7, align 8
  %17 = and i64 %5, 511
  %18 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %16, i64 %17
  %19 = getelementptr inbounds %"class.std::__1::__deque_base", %"class.std::__1::__deque_base"* %0, i64 0, i32 2, i32 0, i32 0
  %20 = load i64, i64* %19, align 8
  %21 = add i64 %20, %5
  %22 = lshr i64 %21, 9
  %23 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %3, i64 %22
  %24 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %23, align 8
  %25 = and i64 %21, 511
  %26 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %24, i64 %25
  %27 = icmp eq %"class.v8::internal::compiler::Node"** %26, %18
  br i1 %27, label %28, label %39

28:                                               ; preds = %52, %15, %13
  %29 = phi i64* [ %14, %13 ], [ %19, %15 ], [ %19, %52 ]
  store i64 0, i64* %29, align 8
  %30 = bitcast %"class.v8::internal::compiler::Node"**** %8 to i64*
  %31 = sub i64 %11, %12
  %32 = ashr exact i64 %31, 3
  %33 = icmp ugt i64 %32, 2
  br i1 %33, label %34, label %89

34:                                               ; preds = %28
  %35 = getelementptr inbounds %"class.std::__1::__deque_base", %"class.std::__1::__deque_base"* %0, i64 0, i32 2, i32 1, i32 0, i32 1
  %36 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock"** %35 to i64*
  %37 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock"** %35 to %"class.v8::internal::compiler::Node"***
  %38 = load %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock"*, %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock"** %35, align 8
  br label %57

39:                                               ; preds = %15, %52
  %40 = phi %"class.v8::internal::compiler::Node"** [ %55, %52 ], [ %18, %15 ]
  %41 = phi %"class.v8::internal::compiler::Node"*** [ %53, %52 ], [ %7, %15 ]
  %42 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %40, i64 1
  %43 = ptrtoint %"class.v8::internal::compiler::Node"** %42 to i64
  %44 = bitcast %"class.v8::internal::compiler::Node"*** %41 to i64*
  %45 = load i64, i64* %44, align 8
  %46 = sub i64 %43, %45
  %47 = icmp eq i64 %46, 4096
  br i1 %47, label %48, label %52

48:                                               ; preds = %39
  %49 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %41, i64 1
  %50 = bitcast %"class.v8::internal::compiler::Node"*** %49 to i64*
  %51 = load i64, i64* %50, align 8
  br label %52

52:                                               ; preds = %48, %39
  %53 = phi %"class.v8::internal::compiler::Node"*** [ %49, %48 ], [ %41, %39 ]
  %54 = phi i64 [ %51, %48 ], [ %43, %39 ]
  %55 = inttoptr i64 %54 to %"class.v8::internal::compiler::Node"**
  %56 = icmp eq %"class.v8::internal::compiler::Node"** %26, %55
  br i1 %56, label %28, label %39

57:                                               ; preds = %78, %34
  %58 = phi %"class.v8::internal::compiler::Node"*** [ %9, %34 ], [ %79, %78 ]
  %59 = phi %"class.v8::internal::compiler::Node"*** [ %9, %34 ], [ %80, %78 ]
  %60 = phi i64 [ %11, %34 ], [ %81, %78 ]
  %61 = phi %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock"* [ %38, %34 ], [ %83, %78 ]
  %62 = phi %"class.v8::internal::compiler::Node"*** [ %3, %34 ], [ %84, %78 ]
  %63 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %62, align 8
  %64 = icmp eq %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock"* %61, null
  br i1 %64, label %69, label %65

65:                                               ; preds = %57
  %66 = getelementptr inbounds %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock", %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock"* %61, i64 0, i32 1
  %67 = load i64, i64* %66, align 8
  %68 = icmp ugt i64 %67, 512
  br i1 %68, label %78, label %69

69:                                               ; preds = %65, %57
  %70 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %63, i64 1
  %71 = bitcast %"class.v8::internal::compiler::Node"** %70 to i64*
  store i64 512, i64* %71, align 8
  %72 = load i64, i64* %36, align 8
  %73 = bitcast %"class.v8::internal::compiler::Node"** %63 to i64*
  store i64 %72, i64* %73, align 8
  store %"class.v8::internal::compiler::Node"** %63, %"class.v8::internal::compiler::Node"*** %37, align 8
  %74 = bitcast %"class.v8::internal::compiler::Node"** %63 to %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock"*
  %75 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %2, align 8
  %76 = load i64, i64* %30, align 8
  %77 = inttoptr i64 %76 to %"class.v8::internal::compiler::Node"***
  br label %78

78:                                               ; preds = %69, %65
  %79 = phi %"class.v8::internal::compiler::Node"*** [ %58, %65 ], [ %77, %69 ]
  %80 = phi %"class.v8::internal::compiler::Node"*** [ %59, %65 ], [ %77, %69 ]
  %81 = phi i64 [ %60, %65 ], [ %76, %69 ]
  %82 = phi %"class.v8::internal::compiler::Node"*** [ %62, %65 ], [ %75, %69 ]
  %83 = phi %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock"* [ %61, %65 ], [ %74, %69 ]
  %84 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %82, i64 1
  store %"class.v8::internal::compiler::Node"*** %84, %"class.v8::internal::compiler::Node"**** %2, align 8
  %85 = ptrtoint %"class.v8::internal::compiler::Node"*** %84 to i64
  %86 = sub i64 %81, %85
  %87 = ashr exact i64 %86, 3
  %88 = icmp ugt i64 %87, 2
  br i1 %88, label %57, label %89

89:                                               ; preds = %78, %28
  %90 = phi %"class.v8::internal::compiler::Node"*** [ %9, %28 ], [ %79, %78 ]
  %91 = phi %"class.v8::internal::compiler::Node"*** [ %9, %28 ], [ %80, %78 ]
  %92 = phi %"class.v8::internal::compiler::Node"*** [ %3, %28 ], [ %84, %78 ]
  %93 = phi i64 [ %32, %28 ], [ %87, %78 ]
  %94 = ptrtoint %"class.v8::internal::compiler::Node"*** %92 to i64
  switch i64 %93, label %98 [
    i64 1, label %96
    i64 2, label %95
  ]

95:                                               ; preds = %89
  br label %96

96:                                               ; preds = %89, %95
  %97 = phi i64 [ 512, %95 ], [ 256, %89 ]
  store i64 %97, i64* %4, align 8
  br label %98

98:                                               ; preds = %96, %89
  %99 = icmp eq %"class.v8::internal::compiler::Node"*** %92, %91
  br i1 %99, label %153, label %100

100:                                              ; preds = %98
  %101 = getelementptr inbounds %"class.std::__1::__deque_base", %"class.std::__1::__deque_base"* %0, i64 0, i32 2, i32 1, i32 0, i32 1
  %102 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock"** %101 to i64*
  %103 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock"** %101 to %"class.v8::internal::compiler::Node"***
  %104 = load %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock"*, %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock"** %101, align 8
  %105 = getelementptr %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %91, i64 -1
  %106 = ptrtoint %"class.v8::internal::compiler::Node"*** %105 to i64
  %107 = sub i64 %106, %94
  %108 = and i64 %107, 8
  %109 = icmp eq i64 %108, 0
  br i1 %109, label %110, label %126

110:                                              ; preds = %100
  %111 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %92, align 8
  %112 = icmp eq %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock"* %104, null
  br i1 %112, label %117, label %113

113:                                              ; preds = %110
  %114 = getelementptr inbounds %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock", %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock"* %104, i64 0, i32 1
  %115 = load i64, i64* %114, align 8
  %116 = icmp ugt i64 %115, 512
  br i1 %116, label %123, label %117

117:                                              ; preds = %113, %110
  %118 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %111, i64 1
  %119 = bitcast %"class.v8::internal::compiler::Node"** %118 to i64*
  store i64 512, i64* %119, align 8
  %120 = load i64, i64* %102, align 8
  %121 = bitcast %"class.v8::internal::compiler::Node"** %111 to i64*
  store i64 %120, i64* %121, align 8
  store %"class.v8::internal::compiler::Node"** %111, %"class.v8::internal::compiler::Node"*** %103, align 8
  %122 = bitcast %"class.v8::internal::compiler::Node"** %111 to %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock"*
  br label %123

123:                                              ; preds = %117, %113
  %124 = phi %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock"* [ %104, %113 ], [ %122, %117 ]
  %125 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %92, i64 1
  br label %126

126:                                              ; preds = %123, %100
  %127 = phi %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock"* [ %104, %100 ], [ %124, %123 ]
  %128 = phi %"class.v8::internal::compiler::Node"*** [ %92, %100 ], [ %125, %123 ]
  %129 = icmp ult i64 %107, 8
  br i1 %129, label %150, label %130

130:                                              ; preds = %126, %203
  %131 = phi %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock"* [ %204, %203 ], [ %127, %126 ]
  %132 = phi %"class.v8::internal::compiler::Node"*** [ %205, %203 ], [ %128, %126 ]
  %133 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %132, align 8
  %134 = icmp eq %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock"* %131, null
  br i1 %134, label %139, label %135

135:                                              ; preds = %130
  %136 = getelementptr inbounds %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock", %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock"* %131, i64 0, i32 1
  %137 = load i64, i64* %136, align 8
  %138 = icmp ugt i64 %137, 512
  br i1 %138, label %145, label %139

139:                                              ; preds = %135, %130
  %140 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %133, i64 1
  %141 = bitcast %"class.v8::internal::compiler::Node"** %140 to i64*
  store i64 512, i64* %141, align 8
  %142 = load i64, i64* %102, align 8
  %143 = bitcast %"class.v8::internal::compiler::Node"** %133 to i64*
  store i64 %142, i64* %143, align 8
  store %"class.v8::internal::compiler::Node"** %133, %"class.v8::internal::compiler::Node"*** %103, align 8
  %144 = bitcast %"class.v8::internal::compiler::Node"** %133 to %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock"*
  br label %145

145:                                              ; preds = %135, %139
  %146 = phi %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock"* [ %131, %135 ], [ %144, %139 ]
  %147 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %132, i64 1
  %148 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %147, align 8
  %149 = icmp eq %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock"* %146, null
  br i1 %149, label %197, label %193

150:                                              ; preds = %203, %126
  %151 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %2, align 8
  %152 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %8, align 8
  br label %153

153:                                              ; preds = %150, %98
  %154 = phi %"class.v8::internal::compiler::Node"*** [ %152, %150 ], [ %90, %98 ]
  %155 = phi %"class.v8::internal::compiler::Node"*** [ %151, %150 ], [ %91, %98 ]
  %156 = icmp eq %"class.v8::internal::compiler::Node"*** %154, %155
  br i1 %156, label %165, label %157

157:                                              ; preds = %153
  %158 = ptrtoint %"class.v8::internal::compiler::Node"*** %155 to i64
  %159 = getelementptr %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %154, i64 -1
  %160 = ptrtoint %"class.v8::internal::compiler::Node"*** %159 to i64
  %161 = sub i64 %160, %158
  %162 = lshr i64 %161, 3
  %163 = xor i64 %162, -1
  %164 = getelementptr %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %154, i64 %163
  store %"class.v8::internal::compiler::Node"*** %164, %"class.v8::internal::compiler::Node"**** %8, align 8
  br label %165

165:                                              ; preds = %157, %153
  %166 = getelementptr inbounds %"class.std::__1::__deque_base", %"class.std::__1::__deque_base"* %0, i64 0, i32 0, i32 0
  %167 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %166, align 8
  %168 = icmp eq %"class.v8::internal::compiler::Node"*** %167, null
  br i1 %168, label %192, label %169

169:                                              ; preds = %165
  %170 = ptrtoint %"class.v8::internal::compiler::Node"*** %167 to i64
  %171 = getelementptr inbounds %"class.std::__1::__deque_base", %"class.std::__1::__deque_base"* %0, i64 0, i32 0, i32 3, i32 0, i32 0
  %172 = bitcast %"class.v8::internal::compiler::Node"**** %171 to i64*
  %173 = load i64, i64* %172, align 8
  %174 = sub i64 %173, %170
  %175 = ashr exact i64 %174, 3
  %176 = icmp ult i64 %174, 16
  br i1 %176, label %192, label %177

177:                                              ; preds = %169
  %178 = getelementptr inbounds %"class.std::__1::__deque_base", %"class.std::__1::__deque_base"* %0, i64 0, i32 0, i32 3, i32 1, i32 0, i32 1
  %179 = load %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"*, %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"** %178, align 8
  %180 = icmp eq %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"* %179, null
  br i1 %180, label %185, label %181

181:                                              ; preds = %177
  %182 = getelementptr inbounds %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock", %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"* %179, i64 0, i32 1
  %183 = load i64, i64* %182, align 8
  %184 = icmp ugt i64 %183, %175
  br i1 %184, label %192, label %185

185:                                              ; preds = %181, %177
  %186 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %167, i64 1
  %187 = bitcast %"class.v8::internal::compiler::Node"*** %186 to i64*
  store i64 %175, i64* %187, align 8
  %188 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"** %178 to i64*
  %189 = load i64, i64* %188, align 8
  %190 = bitcast %"class.v8::internal::compiler::Node"*** %167 to i64*
  store i64 %189, i64* %190, align 8
  %191 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"** %178 to %"class.v8::internal::compiler::Node"****
  store %"class.v8::internal::compiler::Node"*** %167, %"class.v8::internal::compiler::Node"**** %191, align 8
  br label %192

192:                                              ; preds = %165, %169, %181, %185
  ret void

193:                                              ; preds = %145
  %194 = getelementptr inbounds %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock", %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock"* %146, i64 0, i32 1
  %195 = load i64, i64* %194, align 8
  %196 = icmp ugt i64 %195, 512
  br i1 %196, label %203, label %197

197:                                              ; preds = %193, %145
  %198 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %148, i64 1
  %199 = bitcast %"class.v8::internal::compiler::Node"** %198 to i64*
  store i64 512, i64* %199, align 8
  %200 = load i64, i64* %102, align 8
  %201 = bitcast %"class.v8::internal::compiler::Node"** %148 to i64*
  store i64 %200, i64* %201, align 8
  store %"class.v8::internal::compiler::Node"** %148, %"class.v8::internal::compiler::Node"*** %103, align 8
  %202 = bitcast %"class.v8::internal::compiler::Node"** %148 to %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock"*
  br label %203

203:                                              ; preds = %197, %193
  %204 = phi %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock"* [ %146, %193 ], [ %202, %197 ]
  %205 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %132, i64 2
  %206 = icmp eq %"class.v8::internal::compiler::Node"*** %205, %91
  br i1 %206, label %150, label %130
}

declare i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"*, i64) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare i64 @_ZNK2v88internal8compiler19SourcePositionTable17GetSourcePositionEPNS1_4NodeE(%"class.v8::internal::compiler::SourcePositionTable"*, %"class.v8::internal::compiler::Node"*) local_unnamed_addr #3

declare %"class.v8::internal::compiler::Node"* @_ZN2v88internal8compiler5Graph9CloneNodeEPKNS1_4NodeE(%"class.v8::internal::compiler::Graph"*, %"class.v8::internal::compiler::Node"*) local_unnamed_addr #3

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIbN2v88internal13ZoneAllocatorIbEEEC2EmRKbRKS4_(%"class.std::__1::vector.64"*, i64, i8* dereferenceable(1), %"class.v8::internal::ZoneAllocator.72"* dereferenceable(8)) unnamed_addr #2 comdat align 2 {
  %5 = getelementptr inbounds %"class.std::__1::vector.64", %"class.std::__1::vector.64"* %0, i64 0, i32 0
  %6 = getelementptr inbounds %"class.std::__1::vector.64", %"class.std::__1::vector.64"* %0, i64 0, i32 1
  %7 = bitcast %"class.v8::internal::ZoneAllocator.72"* %3 to i64*
  %8 = bitcast %"class.std::__1::vector.64"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 16, i1 false)
  %9 = load i64, i64* %7, align 8
  %10 = getelementptr inbounds %"class.std::__1::vector.64", %"class.std::__1::vector.64"* %0, i64 0, i32 2, i32 0, i32 0
  store i64 0, i64* %10, align 8
  %11 = getelementptr inbounds %"class.std::__1::vector.64", %"class.std::__1::vector.64"* %0, i64 0, i32 2, i32 1
  %12 = bitcast %"struct.std::__1::__compressed_pair_elem.66"* %11 to i64*
  store i64 %9, i64* %12, align 8
  %13 = icmp eq i64 %1, 0
  %14 = inttoptr i64 %9 to %"class.v8::internal::Zone"*
  br i1 %13, label %68, label %15

15:                                               ; preds = %4
  %16 = icmp ugt i64 %1, 17179869120
  br i1 %16, label %17, label %19

17:                                               ; preds = %15
  %18 = bitcast %"class.std::__1::vector.64"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %18) #7
  unreachable

19:                                               ; preds = %15
  %20 = add nsw i64 %1, -1
  %21 = lshr i64 %20, 6
  %22 = add nuw nsw i64 %21, 1
  %23 = shl nuw nsw i64 %22, 3
  %24 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %14, i64 0, i32 2
  %25 = load i64, i64* %24, align 8
  %26 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %14, i64 0, i32 3
  %27 = load i64, i64* %26, align 8
  %28 = sub i64 %27, %25
  %29 = icmp ugt i64 %23, %28
  br i1 %29, label %30, label %32, !prof !2

30:                                               ; preds = %19
  %31 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %14, i64 %23) #6
  br label %34

32:                                               ; preds = %19
  %33 = add i64 %25, %23
  store i64 %33, i64* %24, align 8
  br label %34

34:                                               ; preds = %32, %30
  %35 = phi i64 [ %31, %30 ], [ %25, %32 ]
  %36 = inttoptr i64 %35 to i64*
  store i64* %36, i64** %5, align 8
  store i64 0, i64* %6, align 8
  store i64 %22, i64* %10, align 8
  %37 = load i8, i8* %2, align 1, !range !45
  %38 = icmp eq i8 %37, 0
  store i64 %1, i64* %6, align 8
  %39 = icmp ult i64 %1, 65
  %40 = getelementptr inbounds i64, i64* %36, i64 %21
  %41 = select i1 %39, i64* %36, i64* %40
  store i64 0, i64* %41, align 8
  %42 = bitcast %"class.std::__1::vector.64"* %0 to i64*
  %43 = load i64, i64* %42, align 8, !noalias !47
  %44 = inttoptr i64 %43 to i8*
  %45 = lshr i64 %1, 6
  %46 = shl nuw nsw i64 %45, 3
  br i1 %38, label %57, label %47

47:                                               ; preds = %34
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %44, i8 -1, i64 %46, i1 false) #6
  %48 = and i64 %1, 63
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %68, label %50

50:                                               ; preds = %47
  %51 = inttoptr i64 %43 to i64*
  %52 = getelementptr inbounds i64, i64* %51, i64 %45
  %53 = sub nuw nsw i64 64, %48
  %54 = lshr i64 -1, %53
  %55 = load i64, i64* %52, align 8
  %56 = or i64 %55, %54
  store i64 %56, i64* %52, align 8
  br label %68

57:                                               ; preds = %34
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %44, i8 0, i64 %46, i1 false) #6
  %58 = and i64 %1, 63
  %59 = icmp eq i64 %58, 0
  br i1 %59, label %68, label %60

60:                                               ; preds = %57
  %61 = inttoptr i64 %43 to i64*
  %62 = getelementptr inbounds i64, i64* %61, i64 %45
  %63 = sub nuw nsw i64 64, %58
  %64 = lshr i64 -1, %63
  %65 = xor i64 %64, -1
  %66 = load i64, i64* %62, align 8
  %67 = and i64 %66, %65
  store i64 %67, i64* %62, align 8
  br label %68

68:                                               ; preds = %60, %57, %50, %47, %4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__15dequeIPN2v88internal8compiler4NodeENS2_22RecyclingZoneAllocatorIS5_EEE19__add_back_capacityEv(%"class.std::__1::deque"*) local_unnamed_addr #2 comdat align 2 {
  %2 = alloca %"class.v8::internal::compiler::Node"**, align 8
  %3 = alloca %"class.v8::internal::compiler::Node"**, align 8
  %4 = alloca %"class.v8::internal::compiler::Node"**, align 8
  %5 = alloca %"class.v8::internal::compiler::Node"**, align 8
  %6 = alloca %"struct.std::__1::__split_buffer.73", align 16
  %7 = alloca %"class.v8::internal::compiler::Node"**, align 8
  %8 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 2, i32 1, i32 0
  %9 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 1
  %10 = load i64, i64* %9, align 8
  %11 = icmp ugt i64 %10, 511
  br i1 %11, label %12, label %22

12:                                               ; preds = %1
  %13 = add i64 %10, -512
  store i64 %13, i64* %9, align 8
  %14 = bitcast %"class.v8::internal::compiler::Node"*** %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %14) #6
  %15 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0
  %16 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 1
  %17 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %16, align 8
  %18 = bitcast %"class.v8::internal::compiler::Node"*** %17 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = bitcast %"class.v8::internal::compiler::Node"*** %2 to i64*
  store i64 %19, i64* %20, align 8
  %21 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %17, i64 1
  store %"class.v8::internal::compiler::Node"*** %21, %"class.v8::internal::compiler::Node"**** %16, align 8
  call void @_ZNSt3__114__split_bufferIPPN2v88internal8compiler4NodeENS2_22RecyclingZoneAllocatorIS6_EEE9push_backERKS6_(%"struct.std::__1::__split_buffer"* %15, %"class.v8::internal::compiler::Node"*** nonnull dereferenceable(8) %2)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %14) #6
  br label %247

22:                                               ; preds = %1
  %23 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0
  %24 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 2
  %25 = bitcast %"class.v8::internal::compiler::Node"**** %24 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 1
  %28 = bitcast %"class.v8::internal::compiler::Node"**** %27 to i64*
  %29 = load i64, i64* %28, align 8
  %30 = sub i64 %26, %29
  %31 = ashr exact i64 %30, 3
  %32 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %33 = bitcast %"class.v8::internal::compiler::Node"**** %32 to i64*
  %34 = load i64, i64* %33, align 8
  %35 = bitcast %"class.std::__1::deque"* %0 to i64*
  %36 = load i64, i64* %35, align 8
  %37 = sub i64 %34, %36
  %38 = ashr exact i64 %37, 3
  %39 = icmp ult i64 %31, %38
  br i1 %39, label %40, label %112

40:                                               ; preds = %22
  %41 = icmp eq i64 %34, %26
  br i1 %41, label %74, label %42

42:                                               ; preds = %40
  %43 = bitcast %"class.v8::internal::compiler::Node"*** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %43) #6
  %44 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 2, i32 1, i32 0, i32 1
  %45 = load %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock"*, %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock"** %44, align 8
  %46 = icmp eq %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock"* %45, null
  br i1 %46, label %56, label %47

47:                                               ; preds = %42
  %48 = getelementptr inbounds %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock", %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock"* %45, i64 0, i32 1
  %49 = load i64, i64* %48, align 8
  %50 = icmp ult i64 %49, 512
  br i1 %50, label %56, label %51

51:                                               ; preds = %47
  %52 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock"* %45 to %"class.v8::internal::compiler::Node"**
  %53 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock"* %45 to i64*
  %54 = load i64, i64* %53, align 8
  %55 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock"** %44 to i64*
  store i64 %54, i64* %55, align 8
  br label %72

56:                                               ; preds = %47, %42
  %57 = getelementptr inbounds %"class.v8::internal::RecyclingZoneAllocator.62", %"class.v8::internal::RecyclingZoneAllocator.62"* %8, i64 0, i32 0, i32 0
  %58 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %57, align 8
  %59 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %58, i64 0, i32 2
  %60 = load i64, i64* %59, align 8
  %61 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %58, i64 0, i32 3
  %62 = load i64, i64* %61, align 8
  %63 = sub i64 %62, %60
  %64 = icmp ult i64 %63, 4096
  br i1 %64, label %65, label %67, !prof !2

65:                                               ; preds = %56
  %66 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %58, i64 4096) #6
  br label %69

67:                                               ; preds = %56
  %68 = add i64 %60, 4096
  store i64 %68, i64* %59, align 8
  br label %69

69:                                               ; preds = %67, %65
  %70 = phi i64 [ %66, %65 ], [ %60, %67 ]
  %71 = inttoptr i64 %70 to %"class.v8::internal::compiler::Node"**
  br label %72

72:                                               ; preds = %51, %69
  %73 = phi %"class.v8::internal::compiler::Node"** [ %52, %51 ], [ %71, %69 ]
  store %"class.v8::internal::compiler::Node"** %73, %"class.v8::internal::compiler::Node"*** %3, align 8
  call void @_ZNSt3__114__split_bufferIPPN2v88internal8compiler4NodeENS2_22RecyclingZoneAllocatorIS6_EEE9push_backEOS6_(%"struct.std::__1::__split_buffer"* %23, %"class.v8::internal::compiler::Node"*** nonnull dereferenceable(8) %3)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %43) #6
  br label %247

74:                                               ; preds = %40
  %75 = bitcast %"class.v8::internal::compiler::Node"*** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %75) #6
  %76 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 2, i32 1, i32 0, i32 1
  %77 = load %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock"*, %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock"** %76, align 8
  %78 = icmp eq %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock"* %77, null
  br i1 %78, label %88, label %79

79:                                               ; preds = %74
  %80 = getelementptr inbounds %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock", %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock"* %77, i64 0, i32 1
  %81 = load i64, i64* %80, align 8
  %82 = icmp ult i64 %81, 512
  br i1 %82, label %88, label %83

83:                                               ; preds = %79
  %84 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock"* %77 to %"class.v8::internal::compiler::Node"**
  %85 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock"* %77 to i64*
  %86 = load i64, i64* %85, align 8
  %87 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock"** %76 to i64*
  store i64 %86, i64* %87, align 8
  br label %104

88:                                               ; preds = %79, %74
  %89 = getelementptr inbounds %"class.v8::internal::RecyclingZoneAllocator.62", %"class.v8::internal::RecyclingZoneAllocator.62"* %8, i64 0, i32 0, i32 0
  %90 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %89, align 8
  %91 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %90, i64 0, i32 2
  %92 = load i64, i64* %91, align 8
  %93 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %90, i64 0, i32 3
  %94 = load i64, i64* %93, align 8
  %95 = sub i64 %94, %92
  %96 = icmp ult i64 %95, 4096
  br i1 %96, label %97, label %99, !prof !2

97:                                               ; preds = %88
  %98 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %90, i64 4096) #6
  br label %101

99:                                               ; preds = %88
  %100 = add i64 %92, 4096
  store i64 %100, i64* %91, align 8
  br label %101

101:                                              ; preds = %99, %97
  %102 = phi i64 [ %98, %97 ], [ %92, %99 ]
  %103 = inttoptr i64 %102 to %"class.v8::internal::compiler::Node"**
  br label %104

104:                                              ; preds = %83, %101
  %105 = phi %"class.v8::internal::compiler::Node"** [ %84, %83 ], [ %103, %101 ]
  store %"class.v8::internal::compiler::Node"** %105, %"class.v8::internal::compiler::Node"*** %4, align 8
  call void @_ZNSt3__114__split_bufferIPPN2v88internal8compiler4NodeENS2_22RecyclingZoneAllocatorIS6_EEE10push_frontEOS6_(%"struct.std::__1::__split_buffer"* %23, %"class.v8::internal::compiler::Node"*** nonnull dereferenceable(8) %4)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %75) #6
  %106 = bitcast %"class.v8::internal::compiler::Node"*** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %106) #6
  %107 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %27, align 8
  %108 = bitcast %"class.v8::internal::compiler::Node"*** %107 to i64*
  %109 = load i64, i64* %108, align 8
  %110 = bitcast %"class.v8::internal::compiler::Node"*** %5 to i64*
  store i64 %109, i64* %110, align 8
  %111 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %107, i64 1
  store %"class.v8::internal::compiler::Node"*** %111, %"class.v8::internal::compiler::Node"**** %27, align 8
  call void @_ZNSt3__114__split_bufferIPPN2v88internal8compiler4NodeENS2_22RecyclingZoneAllocatorIS6_EEE9push_backERKS6_(%"struct.std::__1::__split_buffer"* %23, %"class.v8::internal::compiler::Node"*** nonnull dereferenceable(8) %5)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %106) #6
  br label %247

112:                                              ; preds = %22
  %113 = bitcast %"struct.std::__1::__split_buffer.73"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %113) #6
  %114 = ashr exact i64 %37, 2
  %115 = icmp eq i64 %37, 0
  %116 = select i1 %115, i64 1, i64 %114
  %117 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 3, i32 1, i32 0
  %118 = getelementptr inbounds %"struct.std::__1::__split_buffer.73", %"struct.std::__1::__split_buffer.73"* %6, i64 0, i32 3, i32 0, i32 0
  store %"class.v8::internal::compiler::Node"*** null, %"class.v8::internal::compiler::Node"**** %118, align 8
  %119 = getelementptr inbounds %"struct.std::__1::__split_buffer.73", %"struct.std::__1::__split_buffer.73"* %6, i64 0, i32 3, i32 1, i32 0
  store %"class.v8::internal::RecyclingZoneAllocator"* %117, %"class.v8::internal::RecyclingZoneAllocator"** %119, align 8
  %120 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 3, i32 1, i32 0, i32 1
  %121 = load %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"*, %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"** %120, align 8
  %122 = icmp eq %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"* %121, null
  br i1 %122, label %132, label %123

123:                                              ; preds = %112
  %124 = getelementptr inbounds %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock", %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"* %121, i64 0, i32 1
  %125 = load i64, i64* %124, align 8
  %126 = icmp ult i64 %125, %116
  br i1 %126, label %132, label %127

127:                                              ; preds = %123
  %128 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"* %121 to %"class.v8::internal::compiler::Node"***
  %129 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"* %121 to i64*
  %130 = load i64, i64* %129, align 8
  %131 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"** %120 to i64*
  store i64 %130, i64* %131, align 8
  br label %149

132:                                              ; preds = %123, %112
  %133 = getelementptr inbounds %"class.v8::internal::RecyclingZoneAllocator", %"class.v8::internal::RecyclingZoneAllocator"* %117, i64 0, i32 0, i32 0
  %134 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %133, align 8
  %135 = shl i64 %116, 3
  %136 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %134, i64 0, i32 2
  %137 = load i64, i64* %136, align 8
  %138 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %134, i64 0, i32 3
  %139 = load i64, i64* %138, align 8
  %140 = sub i64 %139, %137
  %141 = icmp ugt i64 %135, %140
  br i1 %141, label %142, label %144, !prof !2

142:                                              ; preds = %132
  %143 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %134, i64 %135) #6
  br label %146

144:                                              ; preds = %132
  %145 = add i64 %137, %135
  store i64 %145, i64* %136, align 8
  br label %146

146:                                              ; preds = %144, %142
  %147 = phi i64 [ %143, %142 ], [ %137, %144 ]
  %148 = inttoptr i64 %147 to %"class.v8::internal::compiler::Node"***
  br label %149

149:                                              ; preds = %127, %146
  %150 = phi %"class.v8::internal::compiler::Node"*** [ %128, %127 ], [ %148, %146 ]
  %151 = getelementptr inbounds %"struct.std::__1::__split_buffer.73", %"struct.std::__1::__split_buffer.73"* %6, i64 0, i32 0
  store %"class.v8::internal::compiler::Node"*** %150, %"class.v8::internal::compiler::Node"**** %151, align 16
  %152 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %150, i64 %31
  %153 = getelementptr inbounds %"struct.std::__1::__split_buffer.73", %"struct.std::__1::__split_buffer.73"* %6, i64 0, i32 2
  store %"class.v8::internal::compiler::Node"*** %152, %"class.v8::internal::compiler::Node"**** %153, align 16
  %154 = getelementptr inbounds %"struct.std::__1::__split_buffer.73", %"struct.std::__1::__split_buffer.73"* %6, i64 0, i32 1
  store %"class.v8::internal::compiler::Node"*** %152, %"class.v8::internal::compiler::Node"**** %154, align 8
  %155 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %150, i64 %116
  store %"class.v8::internal::compiler::Node"*** %155, %"class.v8::internal::compiler::Node"**** %118, align 8
  %156 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 2, i32 1, i32 0, i32 1
  %157 = load %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock"*, %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock"** %156, align 8
  %158 = icmp eq %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock"* %157, null
  br i1 %158, label %168, label %159

159:                                              ; preds = %149
  %160 = getelementptr inbounds %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock", %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock"* %157, i64 0, i32 1
  %161 = load i64, i64* %160, align 8
  %162 = icmp ult i64 %161, 512
  br i1 %162, label %168, label %163

163:                                              ; preds = %159
  %164 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock"* %157 to %"class.v8::internal::compiler::Node"**
  %165 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock"* %157 to i64*
  %166 = load i64, i64* %165, align 8
  %167 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock"** %156 to i64*
  store i64 %166, i64* %167, align 8
  br label %184

168:                                              ; preds = %159, %149
  %169 = getelementptr inbounds %"class.v8::internal::RecyclingZoneAllocator.62", %"class.v8::internal::RecyclingZoneAllocator.62"* %8, i64 0, i32 0, i32 0
  %170 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %169, align 8
  %171 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %170, i64 0, i32 2
  %172 = load i64, i64* %171, align 8
  %173 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %170, i64 0, i32 3
  %174 = load i64, i64* %173, align 8
  %175 = sub i64 %174, %172
  %176 = icmp ult i64 %175, 4096
  br i1 %176, label %177, label %179, !prof !2

177:                                              ; preds = %168
  %178 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %170, i64 4096) #6
  br label %181

179:                                              ; preds = %168
  %180 = add i64 %172, 4096
  store i64 %180, i64* %171, align 8
  br label %181

181:                                              ; preds = %179, %177
  %182 = phi i64 [ %178, %177 ], [ %172, %179 ]
  %183 = inttoptr i64 %182 to %"class.v8::internal::compiler::Node"**
  br label %184

184:                                              ; preds = %163, %181
  %185 = phi %"class.v8::internal::compiler::Node"** [ %164, %163 ], [ %183, %181 ]
  %186 = bitcast %"class.v8::internal::compiler::Node"*** %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %186) #6
  store %"class.v8::internal::compiler::Node"** %185, %"class.v8::internal::compiler::Node"*** %7, align 8
  call void @_ZNSt3__114__split_bufferIPPN2v88internal8compiler4NodeERNS2_22RecyclingZoneAllocatorIS6_EEE9push_backEOS6_(%"struct.std::__1::__split_buffer.73"* nonnull %6, %"class.v8::internal::compiler::Node"*** nonnull dereferenceable(8) %7)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %186) #6
  %187 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %24, align 8
  %188 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %27, align 8
  %189 = icmp eq %"class.v8::internal::compiler::Node"*** %187, %188
  %190 = ptrtoint %"class.v8::internal::compiler::Node"*** %187 to i64
  br i1 %189, label %193, label %242

191:                                              ; preds = %242
  %192 = load i64, i64* %25, align 8
  br label %193

193:                                              ; preds = %191, %184
  %194 = phi i64 [ %192, %191 ], [ %190, %184 ]
  %195 = phi %"class.v8::internal::compiler::Node"*** [ %245, %191 ], [ %188, %184 ]
  %196 = ptrtoint %"class.v8::internal::compiler::Node"*** %195 to i64
  %197 = load i64, i64* %35, align 8
  %198 = bitcast %"struct.std::__1::__split_buffer.73"* %6 to i64*
  %199 = bitcast %"class.v8::internal::compiler::Node"**** %154 to i64*
  %200 = bitcast %"struct.std::__1::__split_buffer.73"* %6 to <2 x i64>*
  %201 = load <2 x i64>, <2 x i64>* %200, align 16
  store i64 %197, i64* %198, align 16
  %202 = bitcast %"class.std::__1::deque"* %0 to <2 x i64>*
  store <2 x i64> %201, <2 x i64>* %202, align 8
  store i64 %196, i64* %199, align 8
  %203 = bitcast %"class.v8::internal::compiler::Node"**** %153 to i64*
  %204 = bitcast %"class.v8::internal::compiler::Node"**** %118 to i64*
  %205 = bitcast %"class.v8::internal::compiler::Node"**** %153 to <2 x i64>*
  %206 = load <2 x i64>, <2 x i64>* %205, align 16
  store i64 %194, i64* %203, align 16
  %207 = load i64, i64* %33, align 8
  %208 = bitcast %"class.v8::internal::compiler::Node"**** %24 to <2 x i64>*
  store <2 x i64> %206, <2 x i64>* %208, align 8
  store i64 %207, i64* %204, align 8
  %209 = inttoptr i64 %194 to %"class.v8::internal::compiler::Node"***
  %210 = icmp eq %"class.v8::internal::compiler::Node"*** %195, %209
  %211 = inttoptr i64 %197 to %"class.v8::internal::compiler::Node"***
  br i1 %210, label %219, label %212

212:                                              ; preds = %193
  %213 = getelementptr %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %209, i64 -1
  %214 = ptrtoint %"class.v8::internal::compiler::Node"*** %213 to i64
  %215 = sub i64 %214, %196
  %216 = lshr i64 %215, 3
  %217 = xor i64 %216, -1
  %218 = getelementptr %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %209, i64 %217
  store %"class.v8::internal::compiler::Node"*** %218, %"class.v8::internal::compiler::Node"**** %153, align 16
  br label %219

219:                                              ; preds = %212, %193
  %220 = icmp eq i64 %197, 0
  br i1 %220, label %241, label %221

221:                                              ; preds = %219
  %222 = sub i64 %207, %197
  %223 = ashr exact i64 %222, 3
  %224 = icmp ult i64 %222, 16
  br i1 %224, label %241, label %225

225:                                              ; preds = %221
  %226 = load %"class.v8::internal::RecyclingZoneAllocator"*, %"class.v8::internal::RecyclingZoneAllocator"** %119, align 8
  %227 = getelementptr inbounds %"class.v8::internal::RecyclingZoneAllocator", %"class.v8::internal::RecyclingZoneAllocator"* %226, i64 0, i32 1
  %228 = load %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"*, %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"** %227, align 8
  %229 = icmp eq %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"* %228, null
  br i1 %229, label %234, label %230

230:                                              ; preds = %225
  %231 = getelementptr inbounds %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock", %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"* %228, i64 0, i32 1
  %232 = load i64, i64* %231, align 8
  %233 = icmp ugt i64 %232, %223
  br i1 %233, label %241, label %234

234:                                              ; preds = %230, %225
  %235 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %211, i64 1
  %236 = bitcast %"class.v8::internal::compiler::Node"*** %235 to i64*
  store i64 %223, i64* %236, align 8
  %237 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"** %227 to i64*
  %238 = load i64, i64* %237, align 8
  %239 = inttoptr i64 %197 to i64*
  store i64 %238, i64* %239, align 8
  %240 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"** %227 to %"class.v8::internal::compiler::Node"****
  store %"class.v8::internal::compiler::Node"*** %211, %"class.v8::internal::compiler::Node"**** %240, align 8
  br label %241

241:                                              ; preds = %219, %221, %230, %234
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %113) #6
  br label %247

242:                                              ; preds = %184, %242
  %243 = phi %"class.v8::internal::compiler::Node"*** [ %244, %242 ], [ %187, %184 ]
  %244 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %243, i64 -1
  call void @_ZNSt3__114__split_bufferIPPN2v88internal8compiler4NodeERNS2_22RecyclingZoneAllocatorIS6_EEE10push_frontERKS6_(%"struct.std::__1::__split_buffer.73"* nonnull %6, %"class.v8::internal::compiler::Node"*** dereferenceable(8) %244)
  %245 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %27, align 8
  %246 = icmp eq %"class.v8::internal::compiler::Node"*** %244, %245
  br i1 %246, label %191, label %242

247:                                              ; preds = %241, %104, %72, %12
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIPPN2v88internal8compiler4NodeENS2_22RecyclingZoneAllocatorIS6_EEE9push_backERKS6_(%"struct.std::__1::__split_buffer"*, %"class.v8::internal::compiler::Node"*** dereferenceable(8)) local_unnamed_addr #5 comdat align 2 {
  %3 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 2
  %4 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 3, i32 0, i32 0
  %6 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %5, align 8
  %7 = icmp eq %"class.v8::internal::compiler::Node"*** %4, %6
  %8 = ptrtoint %"class.v8::internal::compiler::Node"*** %6 to i64
  %9 = ptrtoint %"class.v8::internal::compiler::Node"*** %4 to i64
  %10 = bitcast %"class.v8::internal::compiler::Node"*** %4 to i64*
  br i1 %7, label %11, label %195

11:                                               ; preds = %2
  %12 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 1
  %13 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %12, align 8
  %14 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 0
  %15 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %14, align 8
  %16 = icmp ugt %"class.v8::internal::compiler::Node"*** %13, %15
  %17 = ptrtoint %"class.v8::internal::compiler::Node"*** %15 to i64
  br i1 %16, label %18, label %37

18:                                               ; preds = %11
  %19 = ptrtoint %"class.v8::internal::compiler::Node"*** %13 to i64
  %20 = sub i64 %19, %17
  %21 = ashr exact i64 %20, 3
  %22 = add nsw i64 %21, 1
  %23 = sdiv i64 %22, -2
  %24 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %13, i64 %23
  %25 = sub i64 %9, %19
  %26 = ashr exact i64 %25, 3
  %27 = icmp eq i64 %25, 0
  br i1 %27, label %32, label %28

28:                                               ; preds = %18
  %29 = bitcast %"class.v8::internal::compiler::Node"*** %24 to i8*
  %30 = bitcast %"class.v8::internal::compiler::Node"*** %13 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %29, i8* align 8 %30, i64 %25, i1 false) #6
  %31 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %12, align 8
  br label %32

32:                                               ; preds = %18, %28
  %33 = phi %"class.v8::internal::compiler::Node"*** [ %13, %18 ], [ %31, %28 ]
  %34 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %24, i64 %26
  store %"class.v8::internal::compiler::Node"*** %34, %"class.v8::internal::compiler::Node"**** %3, align 8
  %35 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %33, i64 %23
  store %"class.v8::internal::compiler::Node"*** %35, %"class.v8::internal::compiler::Node"**** %12, align 8
  %36 = bitcast %"class.v8::internal::compiler::Node"*** %34 to i64*
  br label %195

37:                                               ; preds = %11
  %38 = bitcast %"class.v8::internal::compiler::Node"**** %5 to i64*
  %39 = bitcast %"struct.std::__1::__split_buffer"* %0 to i64*
  %40 = sub i64 %8, %17
  %41 = ashr exact i64 %40, 2
  %42 = icmp eq i64 %40, 0
  %43 = select i1 %42, i64 1, i64 %41
  %44 = lshr i64 %43, 2
  %45 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 3, i32 1, i32 0, i32 1
  %46 = load %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"*, %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"** %45, align 8
  %47 = icmp eq %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"* %46, null
  br i1 %47, label %58, label %48

48:                                               ; preds = %37
  %49 = getelementptr inbounds %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock", %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"* %46, i64 0, i32 1
  %50 = load i64, i64* %49, align 8
  %51 = icmp ult i64 %50, %43
  br i1 %51, label %58, label %52

52:                                               ; preds = %48
  %53 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"* %46 to %"class.v8::internal::compiler::Node"***
  %54 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"* %46 to i64*
  %55 = load i64, i64* %54, align 8
  %56 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"** %45 to i64*
  store i64 %55, i64* %56, align 8
  %57 = bitcast %"class.v8::internal::compiler::Node"**** %3 to i64*
  br label %78

58:                                               ; preds = %48, %37
  %59 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %60 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %59, align 8
  %61 = shl i64 %43, 3
  %62 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %60, i64 0, i32 2
  %63 = load i64, i64* %62, align 8
  %64 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %60, i64 0, i32 3
  %65 = load i64, i64* %64, align 8
  %66 = sub i64 %65, %63
  %67 = icmp ugt i64 %61, %66
  br i1 %67, label %68, label %70, !prof !2

68:                                               ; preds = %58
  %69 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %60, i64 %61) #6
  br label %72

70:                                               ; preds = %58
  %71 = add i64 %63, %61
  store i64 %71, i64* %62, align 8
  br label %72

72:                                               ; preds = %70, %68
  %73 = phi i64 [ %69, %68 ], [ %63, %70 ]
  %74 = inttoptr i64 %73 to %"class.v8::internal::compiler::Node"***
  %75 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %12, align 8
  %76 = bitcast %"class.v8::internal::compiler::Node"**** %3 to i64*
  %77 = load i64, i64* %76, align 8
  br label %78

78:                                               ; preds = %52, %72
  %79 = phi i64* [ %57, %52 ], [ %76, %72 ]
  %80 = phi i64 [ %9, %52 ], [ %77, %72 ]
  %81 = phi %"class.v8::internal::compiler::Node"*** [ %13, %52 ], [ %75, %72 ]
  %82 = phi %"class.v8::internal::compiler::Node"*** [ %53, %52 ], [ %74, %72 ]
  %83 = ptrtoint %"class.v8::internal::compiler::Node"*** %82 to i64
  %84 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %82, i64 %44
  %85 = ptrtoint %"class.v8::internal::compiler::Node"*** %84 to i64
  %86 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %82, i64 %43
  %87 = ptrtoint %"class.v8::internal::compiler::Node"*** %86 to i64
  %88 = ptrtoint %"class.v8::internal::compiler::Node"*** %81 to i64
  %89 = sub i64 %80, %88
  %90 = ashr exact i64 %89, 3
  %91 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %84, i64 %90
  %92 = icmp eq i64 %89, 0
  br i1 %92, label %167, label %93

93:                                               ; preds = %78
  %94 = add i64 %89, -8
  %95 = lshr i64 %94, 3
  %96 = add nuw nsw i64 %95, 1
  %97 = and i64 %96, 7
  %98 = icmp eq i64 %97, 0
  br i1 %98, label %114, label %99

99:                                               ; preds = %93, %99
  %100 = phi %"class.v8::internal::compiler::Node"*** [ %107, %99 ], [ %84, %93 ]
  %101 = phi i64 [ %108, %99 ], [ %85, %93 ]
  %102 = phi %"class.v8::internal::compiler::Node"*** [ %109, %99 ], [ %81, %93 ]
  %103 = phi i64 [ %110, %99 ], [ %97, %93 ]
  %104 = bitcast %"class.v8::internal::compiler::Node"*** %102 to i64*
  %105 = load i64, i64* %104, align 8
  %106 = inttoptr i64 %101 to i64*
  store i64 %105, i64* %106, align 8
  %107 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %100, i64 1
  %108 = ptrtoint %"class.v8::internal::compiler::Node"*** %107 to i64
  %109 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %102, i64 1
  %110 = add i64 %103, -1
  %111 = icmp eq i64 %110, 0
  br i1 %111, label %112, label %99, !llvm.loop !50

112:                                              ; preds = %99
  %113 = ptrtoint %"class.v8::internal::compiler::Node"*** %107 to i64
  br label %114

114:                                              ; preds = %93, %112
  %115 = phi %"class.v8::internal::compiler::Node"*** [ %84, %93 ], [ %107, %112 ]
  %116 = phi i64 [ %85, %93 ], [ %113, %112 ]
  %117 = phi %"class.v8::internal::compiler::Node"*** [ %81, %93 ], [ %109, %112 ]
  %118 = icmp ult i64 %94, 56
  br i1 %118, label %165, label %119

119:                                              ; preds = %114, %119
  %120 = phi %"class.v8::internal::compiler::Node"*** [ %161, %119 ], [ %115, %114 ]
  %121 = phi i64 [ %162, %119 ], [ %116, %114 ]
  %122 = phi %"class.v8::internal::compiler::Node"*** [ %163, %119 ], [ %117, %114 ]
  %123 = bitcast %"class.v8::internal::compiler::Node"*** %122 to i64*
  %124 = load i64, i64* %123, align 8
  %125 = inttoptr i64 %121 to i64*
  store i64 %124, i64* %125, align 8
  %126 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %120, i64 1
  %127 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %122, i64 1
  %128 = bitcast %"class.v8::internal::compiler::Node"*** %127 to i64*
  %129 = load i64, i64* %128, align 8
  %130 = bitcast %"class.v8::internal::compiler::Node"*** %126 to i64*
  store i64 %129, i64* %130, align 8
  %131 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %120, i64 2
  %132 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %122, i64 2
  %133 = bitcast %"class.v8::internal::compiler::Node"*** %132 to i64*
  %134 = load i64, i64* %133, align 8
  %135 = bitcast %"class.v8::internal::compiler::Node"*** %131 to i64*
  store i64 %134, i64* %135, align 8
  %136 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %120, i64 3
  %137 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %122, i64 3
  %138 = bitcast %"class.v8::internal::compiler::Node"*** %137 to i64*
  %139 = load i64, i64* %138, align 8
  %140 = bitcast %"class.v8::internal::compiler::Node"*** %136 to i64*
  store i64 %139, i64* %140, align 8
  %141 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %120, i64 4
  %142 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %122, i64 4
  %143 = bitcast %"class.v8::internal::compiler::Node"*** %142 to i64*
  %144 = load i64, i64* %143, align 8
  %145 = bitcast %"class.v8::internal::compiler::Node"*** %141 to i64*
  store i64 %144, i64* %145, align 8
  %146 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %120, i64 5
  %147 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %122, i64 5
  %148 = bitcast %"class.v8::internal::compiler::Node"*** %147 to i64*
  %149 = load i64, i64* %148, align 8
  %150 = bitcast %"class.v8::internal::compiler::Node"*** %146 to i64*
  store i64 %149, i64* %150, align 8
  %151 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %120, i64 6
  %152 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %122, i64 6
  %153 = bitcast %"class.v8::internal::compiler::Node"*** %152 to i64*
  %154 = load i64, i64* %153, align 8
  %155 = bitcast %"class.v8::internal::compiler::Node"*** %151 to i64*
  store i64 %154, i64* %155, align 8
  %156 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %120, i64 7
  %157 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %122, i64 7
  %158 = bitcast %"class.v8::internal::compiler::Node"*** %157 to i64*
  %159 = load i64, i64* %158, align 8
  %160 = bitcast %"class.v8::internal::compiler::Node"*** %156 to i64*
  store i64 %159, i64* %160, align 8
  %161 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %120, i64 8
  %162 = ptrtoint %"class.v8::internal::compiler::Node"*** %161 to i64
  %163 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %122, i64 8
  %164 = icmp eq %"class.v8::internal::compiler::Node"*** %91, %161
  br i1 %164, label %165, label %119

165:                                              ; preds = %119, %114
  %166 = ptrtoint %"class.v8::internal::compiler::Node"*** %91 to i64
  br label %167

167:                                              ; preds = %78, %165
  %168 = phi i64 [ %166, %165 ], [ %85, %78 ]
  %169 = load i64, i64* %39, align 8
  store i64 %83, i64* %39, align 8
  %170 = bitcast %"class.v8::internal::compiler::Node"**** %12 to i64*
  store i64 %85, i64* %170, align 8
  store i64 %168, i64* %79, align 8
  %171 = load i64, i64* %38, align 8
  store i64 %87, i64* %38, align 8
  %172 = inttoptr i64 %169 to %"class.v8::internal::compiler::Node"***
  %173 = icmp eq i64 %169, 0
  %174 = inttoptr i64 %168 to i64*
  br i1 %173, label %195, label %175

175:                                              ; preds = %167
  %176 = sub i64 %171, %169
  %177 = ashr exact i64 %176, 3
  %178 = icmp ult i64 %176, 16
  br i1 %178, label %195, label %179

179:                                              ; preds = %175
  %180 = load %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"*, %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"** %45, align 8
  %181 = icmp eq %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"* %180, null
  br i1 %181, label %186, label %182

182:                                              ; preds = %179
  %183 = getelementptr inbounds %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock", %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"* %180, i64 0, i32 1
  %184 = load i64, i64* %183, align 8
  %185 = icmp ugt i64 %184, %177
  br i1 %185, label %195, label %186

186:                                              ; preds = %182, %179
  %187 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %172, i64 1
  %188 = bitcast %"class.v8::internal::compiler::Node"*** %187 to i64*
  store i64 %177, i64* %188, align 8
  %189 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"** %45 to i64*
  %190 = load i64, i64* %189, align 8
  %191 = inttoptr i64 %169 to i64*
  store i64 %190, i64* %191, align 8
  %192 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"** %45 to %"class.v8::internal::compiler::Node"****
  store %"class.v8::internal::compiler::Node"*** %172, %"class.v8::internal::compiler::Node"**** %192, align 8
  %193 = bitcast %"class.v8::internal::compiler::Node"**** %3 to i64**
  %194 = load i64*, i64** %193, align 8
  br label %195

195:                                              ; preds = %186, %182, %175, %167, %32, %2
  %196 = phi i64* [ %194, %186 ], [ %174, %182 ], [ %174, %175 ], [ %174, %167 ], [ %36, %32 ], [ %10, %2 ]
  %197 = bitcast %"class.v8::internal::compiler::Node"*** %1 to i64*
  %198 = load i64, i64* %197, align 8
  store i64 %198, i64* %196, align 8
  %199 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %3, align 8
  %200 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %199, i64 1
  store %"class.v8::internal::compiler::Node"*** %200, %"class.v8::internal::compiler::Node"**** %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIPPN2v88internal8compiler4NodeENS2_22RecyclingZoneAllocatorIS6_EEE9push_backEOS6_(%"struct.std::__1::__split_buffer"*, %"class.v8::internal::compiler::Node"*** dereferenceable(8)) local_unnamed_addr #2 comdat align 2 {
  %3 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 2
  %4 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 3, i32 0, i32 0
  %6 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %5, align 8
  %7 = icmp eq %"class.v8::internal::compiler::Node"*** %4, %6
  %8 = ptrtoint %"class.v8::internal::compiler::Node"*** %6 to i64
  %9 = ptrtoint %"class.v8::internal::compiler::Node"*** %4 to i64
  %10 = bitcast %"class.v8::internal::compiler::Node"*** %4 to i64*
  br i1 %7, label %11, label %195

11:                                               ; preds = %2
  %12 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 1
  %13 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %12, align 8
  %14 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 0
  %15 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %14, align 8
  %16 = icmp ugt %"class.v8::internal::compiler::Node"*** %13, %15
  %17 = ptrtoint %"class.v8::internal::compiler::Node"*** %15 to i64
  br i1 %16, label %18, label %37

18:                                               ; preds = %11
  %19 = ptrtoint %"class.v8::internal::compiler::Node"*** %13 to i64
  %20 = sub i64 %19, %17
  %21 = ashr exact i64 %20, 3
  %22 = add nsw i64 %21, 1
  %23 = sdiv i64 %22, -2
  %24 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %13, i64 %23
  %25 = sub i64 %9, %19
  %26 = ashr exact i64 %25, 3
  %27 = icmp eq i64 %25, 0
  br i1 %27, label %32, label %28

28:                                               ; preds = %18
  %29 = bitcast %"class.v8::internal::compiler::Node"*** %24 to i8*
  %30 = bitcast %"class.v8::internal::compiler::Node"*** %13 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %29, i8* align 8 %30, i64 %25, i1 false) #6
  %31 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %12, align 8
  br label %32

32:                                               ; preds = %18, %28
  %33 = phi %"class.v8::internal::compiler::Node"*** [ %13, %18 ], [ %31, %28 ]
  %34 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %24, i64 %26
  store %"class.v8::internal::compiler::Node"*** %34, %"class.v8::internal::compiler::Node"**** %3, align 8
  %35 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %33, i64 %23
  store %"class.v8::internal::compiler::Node"*** %35, %"class.v8::internal::compiler::Node"**** %12, align 8
  %36 = bitcast %"class.v8::internal::compiler::Node"*** %34 to i64*
  br label %195

37:                                               ; preds = %11
  %38 = bitcast %"class.v8::internal::compiler::Node"**** %5 to i64*
  %39 = bitcast %"struct.std::__1::__split_buffer"* %0 to i64*
  %40 = sub i64 %8, %17
  %41 = ashr exact i64 %40, 2
  %42 = icmp eq i64 %40, 0
  %43 = select i1 %42, i64 1, i64 %41
  %44 = lshr i64 %43, 2
  %45 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 3, i32 1, i32 0, i32 1
  %46 = load %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"*, %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"** %45, align 8
  %47 = icmp eq %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"* %46, null
  br i1 %47, label %58, label %48

48:                                               ; preds = %37
  %49 = getelementptr inbounds %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock", %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"* %46, i64 0, i32 1
  %50 = load i64, i64* %49, align 8
  %51 = icmp ult i64 %50, %43
  br i1 %51, label %58, label %52

52:                                               ; preds = %48
  %53 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"* %46 to %"class.v8::internal::compiler::Node"***
  %54 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"* %46 to i64*
  %55 = load i64, i64* %54, align 8
  %56 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"** %45 to i64*
  store i64 %55, i64* %56, align 8
  %57 = bitcast %"class.v8::internal::compiler::Node"**** %3 to i64*
  br label %78

58:                                               ; preds = %48, %37
  %59 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %60 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %59, align 8
  %61 = shl i64 %43, 3
  %62 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %60, i64 0, i32 2
  %63 = load i64, i64* %62, align 8
  %64 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %60, i64 0, i32 3
  %65 = load i64, i64* %64, align 8
  %66 = sub i64 %65, %63
  %67 = icmp ugt i64 %61, %66
  br i1 %67, label %68, label %70, !prof !2

68:                                               ; preds = %58
  %69 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %60, i64 %61) #6
  br label %72

70:                                               ; preds = %58
  %71 = add i64 %63, %61
  store i64 %71, i64* %62, align 8
  br label %72

72:                                               ; preds = %70, %68
  %73 = phi i64 [ %69, %68 ], [ %63, %70 ]
  %74 = inttoptr i64 %73 to %"class.v8::internal::compiler::Node"***
  %75 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %12, align 8
  %76 = bitcast %"class.v8::internal::compiler::Node"**** %3 to i64*
  %77 = load i64, i64* %76, align 8
  br label %78

78:                                               ; preds = %52, %72
  %79 = phi i64* [ %57, %52 ], [ %76, %72 ]
  %80 = phi i64 [ %9, %52 ], [ %77, %72 ]
  %81 = phi %"class.v8::internal::compiler::Node"*** [ %13, %52 ], [ %75, %72 ]
  %82 = phi %"class.v8::internal::compiler::Node"*** [ %53, %52 ], [ %74, %72 ]
  %83 = ptrtoint %"class.v8::internal::compiler::Node"*** %82 to i64
  %84 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %82, i64 %44
  %85 = ptrtoint %"class.v8::internal::compiler::Node"*** %84 to i64
  %86 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %82, i64 %43
  %87 = ptrtoint %"class.v8::internal::compiler::Node"*** %86 to i64
  %88 = ptrtoint %"class.v8::internal::compiler::Node"*** %81 to i64
  %89 = sub i64 %80, %88
  %90 = ashr exact i64 %89, 3
  %91 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %84, i64 %90
  %92 = icmp eq i64 %89, 0
  br i1 %92, label %167, label %93

93:                                               ; preds = %78
  %94 = add i64 %89, -8
  %95 = lshr i64 %94, 3
  %96 = add nuw nsw i64 %95, 1
  %97 = and i64 %96, 7
  %98 = icmp eq i64 %97, 0
  br i1 %98, label %114, label %99

99:                                               ; preds = %93, %99
  %100 = phi %"class.v8::internal::compiler::Node"*** [ %107, %99 ], [ %84, %93 ]
  %101 = phi i64 [ %108, %99 ], [ %85, %93 ]
  %102 = phi %"class.v8::internal::compiler::Node"*** [ %109, %99 ], [ %81, %93 ]
  %103 = phi i64 [ %110, %99 ], [ %97, %93 ]
  %104 = bitcast %"class.v8::internal::compiler::Node"*** %102 to i64*
  %105 = load i64, i64* %104, align 8
  %106 = inttoptr i64 %101 to i64*
  store i64 %105, i64* %106, align 8
  %107 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %100, i64 1
  %108 = ptrtoint %"class.v8::internal::compiler::Node"*** %107 to i64
  %109 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %102, i64 1
  %110 = add i64 %103, -1
  %111 = icmp eq i64 %110, 0
  br i1 %111, label %112, label %99, !llvm.loop !51

112:                                              ; preds = %99
  %113 = ptrtoint %"class.v8::internal::compiler::Node"*** %107 to i64
  br label %114

114:                                              ; preds = %93, %112
  %115 = phi %"class.v8::internal::compiler::Node"*** [ %84, %93 ], [ %107, %112 ]
  %116 = phi i64 [ %85, %93 ], [ %113, %112 ]
  %117 = phi %"class.v8::internal::compiler::Node"*** [ %81, %93 ], [ %109, %112 ]
  %118 = icmp ult i64 %94, 56
  br i1 %118, label %165, label %119

119:                                              ; preds = %114, %119
  %120 = phi %"class.v8::internal::compiler::Node"*** [ %161, %119 ], [ %115, %114 ]
  %121 = phi i64 [ %162, %119 ], [ %116, %114 ]
  %122 = phi %"class.v8::internal::compiler::Node"*** [ %163, %119 ], [ %117, %114 ]
  %123 = bitcast %"class.v8::internal::compiler::Node"*** %122 to i64*
  %124 = load i64, i64* %123, align 8
  %125 = inttoptr i64 %121 to i64*
  store i64 %124, i64* %125, align 8
  %126 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %120, i64 1
  %127 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %122, i64 1
  %128 = bitcast %"class.v8::internal::compiler::Node"*** %127 to i64*
  %129 = load i64, i64* %128, align 8
  %130 = bitcast %"class.v8::internal::compiler::Node"*** %126 to i64*
  store i64 %129, i64* %130, align 8
  %131 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %120, i64 2
  %132 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %122, i64 2
  %133 = bitcast %"class.v8::internal::compiler::Node"*** %132 to i64*
  %134 = load i64, i64* %133, align 8
  %135 = bitcast %"class.v8::internal::compiler::Node"*** %131 to i64*
  store i64 %134, i64* %135, align 8
  %136 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %120, i64 3
  %137 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %122, i64 3
  %138 = bitcast %"class.v8::internal::compiler::Node"*** %137 to i64*
  %139 = load i64, i64* %138, align 8
  %140 = bitcast %"class.v8::internal::compiler::Node"*** %136 to i64*
  store i64 %139, i64* %140, align 8
  %141 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %120, i64 4
  %142 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %122, i64 4
  %143 = bitcast %"class.v8::internal::compiler::Node"*** %142 to i64*
  %144 = load i64, i64* %143, align 8
  %145 = bitcast %"class.v8::internal::compiler::Node"*** %141 to i64*
  store i64 %144, i64* %145, align 8
  %146 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %120, i64 5
  %147 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %122, i64 5
  %148 = bitcast %"class.v8::internal::compiler::Node"*** %147 to i64*
  %149 = load i64, i64* %148, align 8
  %150 = bitcast %"class.v8::internal::compiler::Node"*** %146 to i64*
  store i64 %149, i64* %150, align 8
  %151 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %120, i64 6
  %152 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %122, i64 6
  %153 = bitcast %"class.v8::internal::compiler::Node"*** %152 to i64*
  %154 = load i64, i64* %153, align 8
  %155 = bitcast %"class.v8::internal::compiler::Node"*** %151 to i64*
  store i64 %154, i64* %155, align 8
  %156 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %120, i64 7
  %157 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %122, i64 7
  %158 = bitcast %"class.v8::internal::compiler::Node"*** %157 to i64*
  %159 = load i64, i64* %158, align 8
  %160 = bitcast %"class.v8::internal::compiler::Node"*** %156 to i64*
  store i64 %159, i64* %160, align 8
  %161 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %120, i64 8
  %162 = ptrtoint %"class.v8::internal::compiler::Node"*** %161 to i64
  %163 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %122, i64 8
  %164 = icmp eq %"class.v8::internal::compiler::Node"*** %91, %161
  br i1 %164, label %165, label %119

165:                                              ; preds = %119, %114
  %166 = ptrtoint %"class.v8::internal::compiler::Node"*** %91 to i64
  br label %167

167:                                              ; preds = %78, %165
  %168 = phi i64 [ %166, %165 ], [ %85, %78 ]
  %169 = load i64, i64* %39, align 8
  store i64 %83, i64* %39, align 8
  %170 = bitcast %"class.v8::internal::compiler::Node"**** %12 to i64*
  store i64 %85, i64* %170, align 8
  store i64 %168, i64* %79, align 8
  %171 = load i64, i64* %38, align 8
  store i64 %87, i64* %38, align 8
  %172 = inttoptr i64 %169 to %"class.v8::internal::compiler::Node"***
  %173 = icmp eq i64 %169, 0
  %174 = inttoptr i64 %168 to i64*
  br i1 %173, label %195, label %175

175:                                              ; preds = %167
  %176 = sub i64 %171, %169
  %177 = ashr exact i64 %176, 3
  %178 = icmp ult i64 %176, 16
  br i1 %178, label %195, label %179

179:                                              ; preds = %175
  %180 = load %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"*, %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"** %45, align 8
  %181 = icmp eq %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"* %180, null
  br i1 %181, label %186, label %182

182:                                              ; preds = %179
  %183 = getelementptr inbounds %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock", %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"* %180, i64 0, i32 1
  %184 = load i64, i64* %183, align 8
  %185 = icmp ugt i64 %184, %177
  br i1 %185, label %195, label %186

186:                                              ; preds = %182, %179
  %187 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %172, i64 1
  %188 = bitcast %"class.v8::internal::compiler::Node"*** %187 to i64*
  store i64 %177, i64* %188, align 8
  %189 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"** %45 to i64*
  %190 = load i64, i64* %189, align 8
  %191 = inttoptr i64 %169 to i64*
  store i64 %190, i64* %191, align 8
  %192 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"** %45 to %"class.v8::internal::compiler::Node"****
  store %"class.v8::internal::compiler::Node"*** %172, %"class.v8::internal::compiler::Node"**** %192, align 8
  %193 = bitcast %"class.v8::internal::compiler::Node"**** %3 to i64**
  %194 = load i64*, i64** %193, align 8
  br label %195

195:                                              ; preds = %186, %182, %175, %167, %32, %2
  %196 = phi i64* [ %194, %186 ], [ %174, %182 ], [ %174, %175 ], [ %174, %167 ], [ %36, %32 ], [ %10, %2 ]
  %197 = bitcast %"class.v8::internal::compiler::Node"*** %1 to i64*
  %198 = load i64, i64* %197, align 8
  store i64 %198, i64* %196, align 8
  %199 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %3, align 8
  %200 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %199, i64 1
  store %"class.v8::internal::compiler::Node"*** %200, %"class.v8::internal::compiler::Node"**** %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIPPN2v88internal8compiler4NodeENS2_22RecyclingZoneAllocatorIS6_EEE10push_frontEOS6_(%"struct.std::__1::__split_buffer"*, %"class.v8::internal::compiler::Node"*** dereferenceable(8)) local_unnamed_addr #2 comdat align 2 {
  %3 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 1
  %4 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 0
  %6 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %5, align 8
  %7 = icmp eq %"class.v8::internal::compiler::Node"*** %4, %6
  %8 = ptrtoint %"class.v8::internal::compiler::Node"*** %6 to i64
  br i1 %7, label %9, label %194

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 2
  %11 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %10, align 8
  %12 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 3, i32 0, i32 0
  %13 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %12, align 8
  %14 = icmp ult %"class.v8::internal::compiler::Node"*** %11, %13
  %15 = bitcast %"class.v8::internal::compiler::Node"**** %12 to i64*
  %16 = ptrtoint %"class.v8::internal::compiler::Node"*** %13 to i64
  %17 = ptrtoint %"class.v8::internal::compiler::Node"*** %11 to i64
  br i1 %14, label %18, label %38

18:                                               ; preds = %9
  %19 = sub i64 %16, %17
  %20 = ashr exact i64 %19, 3
  %21 = add nsw i64 %20, 1
  %22 = sdiv i64 %21, 2
  %23 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %11, i64 %22
  %24 = ptrtoint %"class.v8::internal::compiler::Node"*** %4 to i64
  %25 = sub i64 %17, %24
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %34, label %27

27:                                               ; preds = %18
  %28 = ashr exact i64 %25, 3
  %29 = sub nsw i64 0, %28
  %30 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %23, i64 %29
  %31 = bitcast %"class.v8::internal::compiler::Node"*** %30 to i8*
  %32 = bitcast %"class.v8::internal::compiler::Node"*** %4 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %31, i8* align 8 %32, i64 %25, i1 false) #6
  %33 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %10, align 8
  br label %34

34:                                               ; preds = %18, %27
  %35 = phi %"class.v8::internal::compiler::Node"*** [ %33, %27 ], [ %11, %18 ]
  %36 = phi %"class.v8::internal::compiler::Node"*** [ %30, %27 ], [ %23, %18 ]
  store %"class.v8::internal::compiler::Node"*** %36, %"class.v8::internal::compiler::Node"**** %3, align 8
  %37 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %35, i64 %22
  store %"class.v8::internal::compiler::Node"*** %37, %"class.v8::internal::compiler::Node"**** %10, align 8
  br label %194

38:                                               ; preds = %9
  %39 = bitcast %"struct.std::__1::__split_buffer"* %0 to i64*
  %40 = sub i64 %16, %8
  %41 = ashr exact i64 %40, 2
  %42 = icmp eq i64 %40, 0
  %43 = select i1 %42, i64 1, i64 %41
  %44 = add nsw i64 %43, 3
  %45 = lshr i64 %44, 2
  %46 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 3, i32 1, i32 0, i32 1
  %47 = load %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"*, %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"** %46, align 8
  %48 = icmp eq %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"* %47, null
  br i1 %48, label %59, label %49

49:                                               ; preds = %38
  %50 = getelementptr inbounds %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock", %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"* %47, i64 0, i32 1
  %51 = load i64, i64* %50, align 8
  %52 = icmp ult i64 %51, %43
  br i1 %52, label %59, label %53

53:                                               ; preds = %49
  %54 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"* %47 to %"class.v8::internal::compiler::Node"***
  %55 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"* %47 to i64*
  %56 = load i64, i64* %55, align 8
  %57 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"** %46 to i64*
  store i64 %56, i64* %57, align 8
  %58 = bitcast %"class.v8::internal::compiler::Node"**** %10 to i64*
  br label %79

59:                                               ; preds = %49, %38
  %60 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %61 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %60, align 8
  %62 = shl i64 %43, 3
  %63 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %61, i64 0, i32 2
  %64 = load i64, i64* %63, align 8
  %65 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %61, i64 0, i32 3
  %66 = load i64, i64* %65, align 8
  %67 = sub i64 %66, %64
  %68 = icmp ugt i64 %62, %67
  br i1 %68, label %69, label %71, !prof !2

69:                                               ; preds = %59
  %70 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %61, i64 %62) #6
  br label %73

71:                                               ; preds = %59
  %72 = add i64 %64, %62
  store i64 %72, i64* %63, align 8
  br label %73

73:                                               ; preds = %71, %69
  %74 = phi i64 [ %70, %69 ], [ %64, %71 ]
  %75 = inttoptr i64 %74 to %"class.v8::internal::compiler::Node"***
  %76 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %3, align 8
  %77 = bitcast %"class.v8::internal::compiler::Node"**** %10 to i64*
  %78 = load i64, i64* %77, align 8
  br label %79

79:                                               ; preds = %53, %73
  %80 = phi i64* [ %58, %53 ], [ %77, %73 ]
  %81 = phi i64 [ %17, %53 ], [ %78, %73 ]
  %82 = phi %"class.v8::internal::compiler::Node"*** [ %4, %53 ], [ %76, %73 ]
  %83 = phi %"class.v8::internal::compiler::Node"*** [ %54, %53 ], [ %75, %73 ]
  %84 = ptrtoint %"class.v8::internal::compiler::Node"*** %83 to i64
  %85 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %83, i64 %45
  %86 = ptrtoint %"class.v8::internal::compiler::Node"*** %85 to i64
  %87 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %83, i64 %43
  %88 = ptrtoint %"class.v8::internal::compiler::Node"*** %87 to i64
  %89 = ptrtoint %"class.v8::internal::compiler::Node"*** %82 to i64
  %90 = sub i64 %81, %89
  %91 = ashr exact i64 %90, 3
  %92 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %85, i64 %91
  %93 = icmp eq i64 %90, 0
  br i1 %93, label %168, label %94

94:                                               ; preds = %79
  %95 = add i64 %90, -8
  %96 = lshr i64 %95, 3
  %97 = add nuw nsw i64 %96, 1
  %98 = and i64 %97, 7
  %99 = icmp eq i64 %98, 0
  br i1 %99, label %115, label %100

100:                                              ; preds = %94, %100
  %101 = phi %"class.v8::internal::compiler::Node"*** [ %108, %100 ], [ %85, %94 ]
  %102 = phi i64 [ %109, %100 ], [ %86, %94 ]
  %103 = phi %"class.v8::internal::compiler::Node"*** [ %110, %100 ], [ %82, %94 ]
  %104 = phi i64 [ %111, %100 ], [ %98, %94 ]
  %105 = bitcast %"class.v8::internal::compiler::Node"*** %103 to i64*
  %106 = load i64, i64* %105, align 8
  %107 = inttoptr i64 %102 to i64*
  store i64 %106, i64* %107, align 8
  %108 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %101, i64 1
  %109 = ptrtoint %"class.v8::internal::compiler::Node"*** %108 to i64
  %110 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %103, i64 1
  %111 = add i64 %104, -1
  %112 = icmp eq i64 %111, 0
  br i1 %112, label %113, label %100, !llvm.loop !52

113:                                              ; preds = %100
  %114 = ptrtoint %"class.v8::internal::compiler::Node"*** %108 to i64
  br label %115

115:                                              ; preds = %94, %113
  %116 = phi %"class.v8::internal::compiler::Node"*** [ %85, %94 ], [ %108, %113 ]
  %117 = phi i64 [ %86, %94 ], [ %114, %113 ]
  %118 = phi %"class.v8::internal::compiler::Node"*** [ %82, %94 ], [ %110, %113 ]
  %119 = icmp ult i64 %95, 56
  br i1 %119, label %166, label %120

120:                                              ; preds = %115, %120
  %121 = phi %"class.v8::internal::compiler::Node"*** [ %162, %120 ], [ %116, %115 ]
  %122 = phi i64 [ %163, %120 ], [ %117, %115 ]
  %123 = phi %"class.v8::internal::compiler::Node"*** [ %164, %120 ], [ %118, %115 ]
  %124 = bitcast %"class.v8::internal::compiler::Node"*** %123 to i64*
  %125 = load i64, i64* %124, align 8
  %126 = inttoptr i64 %122 to i64*
  store i64 %125, i64* %126, align 8
  %127 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %121, i64 1
  %128 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %123, i64 1
  %129 = bitcast %"class.v8::internal::compiler::Node"*** %128 to i64*
  %130 = load i64, i64* %129, align 8
  %131 = bitcast %"class.v8::internal::compiler::Node"*** %127 to i64*
  store i64 %130, i64* %131, align 8
  %132 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %121, i64 2
  %133 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %123, i64 2
  %134 = bitcast %"class.v8::internal::compiler::Node"*** %133 to i64*
  %135 = load i64, i64* %134, align 8
  %136 = bitcast %"class.v8::internal::compiler::Node"*** %132 to i64*
  store i64 %135, i64* %136, align 8
  %137 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %121, i64 3
  %138 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %123, i64 3
  %139 = bitcast %"class.v8::internal::compiler::Node"*** %138 to i64*
  %140 = load i64, i64* %139, align 8
  %141 = bitcast %"class.v8::internal::compiler::Node"*** %137 to i64*
  store i64 %140, i64* %141, align 8
  %142 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %121, i64 4
  %143 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %123, i64 4
  %144 = bitcast %"class.v8::internal::compiler::Node"*** %143 to i64*
  %145 = load i64, i64* %144, align 8
  %146 = bitcast %"class.v8::internal::compiler::Node"*** %142 to i64*
  store i64 %145, i64* %146, align 8
  %147 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %121, i64 5
  %148 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %123, i64 5
  %149 = bitcast %"class.v8::internal::compiler::Node"*** %148 to i64*
  %150 = load i64, i64* %149, align 8
  %151 = bitcast %"class.v8::internal::compiler::Node"*** %147 to i64*
  store i64 %150, i64* %151, align 8
  %152 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %121, i64 6
  %153 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %123, i64 6
  %154 = bitcast %"class.v8::internal::compiler::Node"*** %153 to i64*
  %155 = load i64, i64* %154, align 8
  %156 = bitcast %"class.v8::internal::compiler::Node"*** %152 to i64*
  store i64 %155, i64* %156, align 8
  %157 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %121, i64 7
  %158 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %123, i64 7
  %159 = bitcast %"class.v8::internal::compiler::Node"*** %158 to i64*
  %160 = load i64, i64* %159, align 8
  %161 = bitcast %"class.v8::internal::compiler::Node"*** %157 to i64*
  store i64 %160, i64* %161, align 8
  %162 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %121, i64 8
  %163 = ptrtoint %"class.v8::internal::compiler::Node"*** %162 to i64
  %164 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %123, i64 8
  %165 = icmp eq %"class.v8::internal::compiler::Node"*** %92, %162
  br i1 %165, label %166, label %120

166:                                              ; preds = %120, %115
  %167 = ptrtoint %"class.v8::internal::compiler::Node"*** %92 to i64
  br label %168

168:                                              ; preds = %79, %166
  %169 = phi i64 [ %167, %166 ], [ %86, %79 ]
  %170 = load i64, i64* %39, align 8
  store i64 %84, i64* %39, align 8
  %171 = bitcast %"class.v8::internal::compiler::Node"**** %3 to i64*
  store i64 %86, i64* %171, align 8
  store i64 %169, i64* %80, align 8
  %172 = load i64, i64* %15, align 8
  store i64 %88, i64* %15, align 8
  %173 = inttoptr i64 %170 to %"class.v8::internal::compiler::Node"***
  %174 = icmp eq i64 %170, 0
  br i1 %174, label %194, label %175

175:                                              ; preds = %168
  %176 = sub i64 %172, %170
  %177 = ashr exact i64 %176, 3
  %178 = icmp ult i64 %176, 16
  br i1 %178, label %194, label %179

179:                                              ; preds = %175
  %180 = load %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"*, %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"** %46, align 8
  %181 = icmp eq %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"* %180, null
  br i1 %181, label %186, label %182

182:                                              ; preds = %179
  %183 = getelementptr inbounds %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock", %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"* %180, i64 0, i32 1
  %184 = load i64, i64* %183, align 8
  %185 = icmp ugt i64 %184, %177
  br i1 %185, label %194, label %186

186:                                              ; preds = %182, %179
  %187 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %173, i64 1
  %188 = bitcast %"class.v8::internal::compiler::Node"*** %187 to i64*
  store i64 %177, i64* %188, align 8
  %189 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"** %46 to i64*
  %190 = load i64, i64* %189, align 8
  %191 = inttoptr i64 %170 to i64*
  store i64 %190, i64* %191, align 8
  %192 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"** %46 to %"class.v8::internal::compiler::Node"****
  store %"class.v8::internal::compiler::Node"*** %173, %"class.v8::internal::compiler::Node"**** %192, align 8
  %193 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %3, align 8
  br label %194

194:                                              ; preds = %186, %182, %175, %168, %34, %2
  %195 = phi %"class.v8::internal::compiler::Node"*** [ %193, %186 ], [ %85, %182 ], [ %85, %175 ], [ %85, %168 ], [ %36, %34 ], [ %4, %2 ]
  %196 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %195, i64 -1
  %197 = bitcast %"class.v8::internal::compiler::Node"*** %1 to i64*
  %198 = load i64, i64* %197, align 8
  %199 = bitcast %"class.v8::internal::compiler::Node"*** %196 to i64*
  store i64 %198, i64* %199, align 8
  %200 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %3, align 8
  %201 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %200, i64 -1
  store %"class.v8::internal::compiler::Node"*** %201, %"class.v8::internal::compiler::Node"**** %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIPPN2v88internal8compiler4NodeERNS2_22RecyclingZoneAllocatorIS6_EEE9push_backEOS6_(%"struct.std::__1::__split_buffer.73"*, %"class.v8::internal::compiler::Node"*** dereferenceable(8)) local_unnamed_addr #2 comdat align 2 {
  %3 = getelementptr inbounds %"struct.std::__1::__split_buffer.73", %"struct.std::__1::__split_buffer.73"* %0, i64 0, i32 2
  %4 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__split_buffer.73", %"struct.std::__1::__split_buffer.73"* %0, i64 0, i32 3, i32 0, i32 0
  %6 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %5, align 8
  %7 = icmp eq %"class.v8::internal::compiler::Node"*** %4, %6
  %8 = ptrtoint %"class.v8::internal::compiler::Node"*** %6 to i64
  %9 = bitcast %"class.v8::internal::compiler::Node"*** %4 to i64*
  br i1 %7, label %10, label %193

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"struct.std::__1::__split_buffer.73", %"struct.std::__1::__split_buffer.73"* %0, i64 0, i32 1
  %12 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %11, align 8
  %13 = getelementptr inbounds %"struct.std::__1::__split_buffer.73", %"struct.std::__1::__split_buffer.73"* %0, i64 0, i32 0
  %14 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %13, align 8
  %15 = icmp ugt %"class.v8::internal::compiler::Node"*** %12, %14
  %16 = ptrtoint %"class.v8::internal::compiler::Node"*** %14 to i64
  br i1 %15, label %17, label %37

17:                                               ; preds = %10
  %18 = ptrtoint %"class.v8::internal::compiler::Node"*** %12 to i64
  %19 = sub i64 %18, %16
  %20 = ashr exact i64 %19, 3
  %21 = add nsw i64 %20, 1
  %22 = sdiv i64 %21, -2
  %23 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %12, i64 %22
  %24 = ptrtoint %"class.v8::internal::compiler::Node"*** %4 to i64
  %25 = sub i64 %24, %18
  %26 = ashr exact i64 %25, 3
  %27 = icmp eq i64 %25, 0
  br i1 %27, label %32, label %28

28:                                               ; preds = %17
  %29 = bitcast %"class.v8::internal::compiler::Node"*** %23 to i8*
  %30 = bitcast %"class.v8::internal::compiler::Node"*** %12 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %29, i8* align 8 %30, i64 %25, i1 false) #6
  %31 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %11, align 8
  br label %32

32:                                               ; preds = %17, %28
  %33 = phi %"class.v8::internal::compiler::Node"*** [ %12, %17 ], [ %31, %28 ]
  %34 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %23, i64 %26
  store %"class.v8::internal::compiler::Node"*** %34, %"class.v8::internal::compiler::Node"**** %3, align 8
  %35 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %33, i64 %22
  store %"class.v8::internal::compiler::Node"*** %35, %"class.v8::internal::compiler::Node"**** %11, align 8
  %36 = bitcast %"class.v8::internal::compiler::Node"*** %34 to i64*
  br label %193

37:                                               ; preds = %10
  %38 = bitcast %"class.v8::internal::compiler::Node"**** %5 to i64*
  %39 = bitcast %"struct.std::__1::__split_buffer.73"* %0 to i64*
  %40 = sub i64 %8, %16
  %41 = ashr exact i64 %40, 2
  %42 = icmp eq i64 %40, 0
  %43 = select i1 %42, i64 1, i64 %41
  %44 = lshr i64 %43, 2
  %45 = getelementptr inbounds %"struct.std::__1::__split_buffer.73", %"struct.std::__1::__split_buffer.73"* %0, i64 0, i32 3, i32 1, i32 0
  %46 = load %"class.v8::internal::RecyclingZoneAllocator"*, %"class.v8::internal::RecyclingZoneAllocator"** %45, align 8
  %47 = getelementptr inbounds %"class.v8::internal::RecyclingZoneAllocator", %"class.v8::internal::RecyclingZoneAllocator"* %46, i64 0, i32 1
  %48 = load %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"*, %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"** %47, align 8
  %49 = icmp eq %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"* %48, null
  br i1 %49, label %59, label %50

50:                                               ; preds = %37
  %51 = getelementptr inbounds %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock", %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"* %48, i64 0, i32 1
  %52 = load i64, i64* %51, align 8
  %53 = icmp ult i64 %52, %43
  br i1 %53, label %59, label %54

54:                                               ; preds = %50
  %55 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"* %48 to %"class.v8::internal::compiler::Node"***
  %56 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"* %48 to i64*
  %57 = load i64, i64* %56, align 8
  %58 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"** %47 to i64*
  store i64 %57, i64* %58, align 8
  br label %76

59:                                               ; preds = %50, %37
  %60 = getelementptr inbounds %"class.v8::internal::RecyclingZoneAllocator", %"class.v8::internal::RecyclingZoneAllocator"* %46, i64 0, i32 0, i32 0
  %61 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %60, align 8
  %62 = shl i64 %43, 3
  %63 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %61, i64 0, i32 2
  %64 = load i64, i64* %63, align 8
  %65 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %61, i64 0, i32 3
  %66 = load i64, i64* %65, align 8
  %67 = sub i64 %66, %64
  %68 = icmp ugt i64 %62, %67
  br i1 %68, label %69, label %71, !prof !2

69:                                               ; preds = %59
  %70 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %61, i64 %62) #6
  br label %73

71:                                               ; preds = %59
  %72 = add i64 %64, %62
  store i64 %72, i64* %63, align 8
  br label %73

73:                                               ; preds = %71, %69
  %74 = phi i64 [ %70, %69 ], [ %64, %71 ]
  %75 = inttoptr i64 %74 to %"class.v8::internal::compiler::Node"***
  br label %76

76:                                               ; preds = %54, %73
  %77 = phi %"class.v8::internal::compiler::Node"*** [ %55, %54 ], [ %75, %73 ]
  %78 = ptrtoint %"class.v8::internal::compiler::Node"*** %77 to i64
  %79 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %77, i64 %44
  %80 = ptrtoint %"class.v8::internal::compiler::Node"*** %79 to i64
  %81 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %77, i64 %43
  %82 = ptrtoint %"class.v8::internal::compiler::Node"*** %81 to i64
  %83 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %11, align 8
  %84 = bitcast %"class.v8::internal::compiler::Node"**** %3 to i64*
  %85 = load i64, i64* %84, align 8
  %86 = ptrtoint %"class.v8::internal::compiler::Node"*** %83 to i64
  %87 = sub i64 %85, %86
  %88 = ashr exact i64 %87, 3
  %89 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %79, i64 %88
  %90 = icmp eq i64 %87, 0
  br i1 %90, label %165, label %91

91:                                               ; preds = %76
  %92 = add i64 %87, -8
  %93 = lshr i64 %92, 3
  %94 = add nuw nsw i64 %93, 1
  %95 = and i64 %94, 7
  %96 = icmp eq i64 %95, 0
  br i1 %96, label %112, label %97

97:                                               ; preds = %91, %97
  %98 = phi %"class.v8::internal::compiler::Node"*** [ %105, %97 ], [ %79, %91 ]
  %99 = phi i64 [ %106, %97 ], [ %80, %91 ]
  %100 = phi %"class.v8::internal::compiler::Node"*** [ %107, %97 ], [ %83, %91 ]
  %101 = phi i64 [ %108, %97 ], [ %95, %91 ]
  %102 = bitcast %"class.v8::internal::compiler::Node"*** %100 to i64*
  %103 = load i64, i64* %102, align 8
  %104 = inttoptr i64 %99 to i64*
  store i64 %103, i64* %104, align 8
  %105 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %98, i64 1
  %106 = ptrtoint %"class.v8::internal::compiler::Node"*** %105 to i64
  %107 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %100, i64 1
  %108 = add i64 %101, -1
  %109 = icmp eq i64 %108, 0
  br i1 %109, label %110, label %97, !llvm.loop !53

110:                                              ; preds = %97
  %111 = ptrtoint %"class.v8::internal::compiler::Node"*** %105 to i64
  br label %112

112:                                              ; preds = %91, %110
  %113 = phi %"class.v8::internal::compiler::Node"*** [ %79, %91 ], [ %105, %110 ]
  %114 = phi i64 [ %80, %91 ], [ %111, %110 ]
  %115 = phi %"class.v8::internal::compiler::Node"*** [ %83, %91 ], [ %107, %110 ]
  %116 = icmp ult i64 %92, 56
  br i1 %116, label %163, label %117

117:                                              ; preds = %112, %117
  %118 = phi %"class.v8::internal::compiler::Node"*** [ %159, %117 ], [ %113, %112 ]
  %119 = phi i64 [ %160, %117 ], [ %114, %112 ]
  %120 = phi %"class.v8::internal::compiler::Node"*** [ %161, %117 ], [ %115, %112 ]
  %121 = bitcast %"class.v8::internal::compiler::Node"*** %120 to i64*
  %122 = load i64, i64* %121, align 8
  %123 = inttoptr i64 %119 to i64*
  store i64 %122, i64* %123, align 8
  %124 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %118, i64 1
  %125 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %120, i64 1
  %126 = bitcast %"class.v8::internal::compiler::Node"*** %125 to i64*
  %127 = load i64, i64* %126, align 8
  %128 = bitcast %"class.v8::internal::compiler::Node"*** %124 to i64*
  store i64 %127, i64* %128, align 8
  %129 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %118, i64 2
  %130 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %120, i64 2
  %131 = bitcast %"class.v8::internal::compiler::Node"*** %130 to i64*
  %132 = load i64, i64* %131, align 8
  %133 = bitcast %"class.v8::internal::compiler::Node"*** %129 to i64*
  store i64 %132, i64* %133, align 8
  %134 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %118, i64 3
  %135 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %120, i64 3
  %136 = bitcast %"class.v8::internal::compiler::Node"*** %135 to i64*
  %137 = load i64, i64* %136, align 8
  %138 = bitcast %"class.v8::internal::compiler::Node"*** %134 to i64*
  store i64 %137, i64* %138, align 8
  %139 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %118, i64 4
  %140 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %120, i64 4
  %141 = bitcast %"class.v8::internal::compiler::Node"*** %140 to i64*
  %142 = load i64, i64* %141, align 8
  %143 = bitcast %"class.v8::internal::compiler::Node"*** %139 to i64*
  store i64 %142, i64* %143, align 8
  %144 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %118, i64 5
  %145 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %120, i64 5
  %146 = bitcast %"class.v8::internal::compiler::Node"*** %145 to i64*
  %147 = load i64, i64* %146, align 8
  %148 = bitcast %"class.v8::internal::compiler::Node"*** %144 to i64*
  store i64 %147, i64* %148, align 8
  %149 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %118, i64 6
  %150 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %120, i64 6
  %151 = bitcast %"class.v8::internal::compiler::Node"*** %150 to i64*
  %152 = load i64, i64* %151, align 8
  %153 = bitcast %"class.v8::internal::compiler::Node"*** %149 to i64*
  store i64 %152, i64* %153, align 8
  %154 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %118, i64 7
  %155 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %120, i64 7
  %156 = bitcast %"class.v8::internal::compiler::Node"*** %155 to i64*
  %157 = load i64, i64* %156, align 8
  %158 = bitcast %"class.v8::internal::compiler::Node"*** %154 to i64*
  store i64 %157, i64* %158, align 8
  %159 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %118, i64 8
  %160 = ptrtoint %"class.v8::internal::compiler::Node"*** %159 to i64
  %161 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %120, i64 8
  %162 = icmp eq %"class.v8::internal::compiler::Node"*** %89, %159
  br i1 %162, label %163, label %117

163:                                              ; preds = %117, %112
  %164 = ptrtoint %"class.v8::internal::compiler::Node"*** %89 to i64
  br label %165

165:                                              ; preds = %76, %163
  %166 = phi i64 [ %164, %163 ], [ %80, %76 ]
  %167 = load i64, i64* %39, align 8
  store i64 %78, i64* %39, align 8
  %168 = bitcast %"class.v8::internal::compiler::Node"**** %11 to i64*
  store i64 %80, i64* %168, align 8
  store i64 %166, i64* %84, align 8
  %169 = load i64, i64* %38, align 8
  store i64 %82, i64* %38, align 8
  %170 = inttoptr i64 %167 to %"class.v8::internal::compiler::Node"***
  %171 = icmp eq i64 %167, 0
  %172 = inttoptr i64 %166 to i64*
  br i1 %171, label %193, label %173

173:                                              ; preds = %165
  %174 = sub i64 %169, %167
  %175 = ashr exact i64 %174, 3
  %176 = icmp ult i64 %174, 16
  br i1 %176, label %193, label %177

177:                                              ; preds = %173
  %178 = load %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"*, %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"** %47, align 8
  %179 = icmp eq %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"* %178, null
  br i1 %179, label %184, label %180

180:                                              ; preds = %177
  %181 = getelementptr inbounds %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock", %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"* %178, i64 0, i32 1
  %182 = load i64, i64* %181, align 8
  %183 = icmp ugt i64 %182, %175
  br i1 %183, label %193, label %184

184:                                              ; preds = %180, %177
  %185 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %170, i64 1
  %186 = bitcast %"class.v8::internal::compiler::Node"*** %185 to i64*
  store i64 %175, i64* %186, align 8
  %187 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"** %47 to i64*
  %188 = load i64, i64* %187, align 8
  %189 = inttoptr i64 %167 to i64*
  store i64 %188, i64* %189, align 8
  %190 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"** %47 to %"class.v8::internal::compiler::Node"****
  store %"class.v8::internal::compiler::Node"*** %170, %"class.v8::internal::compiler::Node"**** %190, align 8
  %191 = bitcast %"class.v8::internal::compiler::Node"**** %3 to i64**
  %192 = load i64*, i64** %191, align 8
  br label %193

193:                                              ; preds = %184, %180, %173, %165, %32, %2
  %194 = phi i64* [ %192, %184 ], [ %172, %180 ], [ %172, %173 ], [ %172, %165 ], [ %36, %32 ], [ %9, %2 ]
  %195 = bitcast %"class.v8::internal::compiler::Node"*** %1 to i64*
  %196 = load i64, i64* %195, align 8
  store i64 %196, i64* %194, align 8
  %197 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %3, align 8
  %198 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %197, i64 1
  store %"class.v8::internal::compiler::Node"*** %198, %"class.v8::internal::compiler::Node"**** %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIPPN2v88internal8compiler4NodeERNS2_22RecyclingZoneAllocatorIS6_EEE10push_frontERKS6_(%"struct.std::__1::__split_buffer.73"*, %"class.v8::internal::compiler::Node"*** dereferenceable(8)) local_unnamed_addr #2 comdat align 2 {
  %3 = getelementptr inbounds %"struct.std::__1::__split_buffer.73", %"struct.std::__1::__split_buffer.73"* %0, i64 0, i32 1
  %4 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__split_buffer.73", %"struct.std::__1::__split_buffer.73"* %0, i64 0, i32 0
  %6 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %5, align 8
  %7 = icmp eq %"class.v8::internal::compiler::Node"*** %4, %6
  %8 = ptrtoint %"class.v8::internal::compiler::Node"*** %6 to i64
  br i1 %7, label %9, label %192

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"struct.std::__1::__split_buffer.73", %"struct.std::__1::__split_buffer.73"* %0, i64 0, i32 2
  %11 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %10, align 8
  %12 = getelementptr inbounds %"struct.std::__1::__split_buffer.73", %"struct.std::__1::__split_buffer.73"* %0, i64 0, i32 3, i32 0, i32 0
  %13 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %12, align 8
  %14 = icmp ult %"class.v8::internal::compiler::Node"*** %11, %13
  %15 = bitcast %"class.v8::internal::compiler::Node"**** %12 to i64*
  %16 = ptrtoint %"class.v8::internal::compiler::Node"*** %13 to i64
  br i1 %14, label %17, label %38

17:                                               ; preds = %9
  %18 = ptrtoint %"class.v8::internal::compiler::Node"*** %11 to i64
  %19 = sub i64 %16, %18
  %20 = ashr exact i64 %19, 3
  %21 = add nsw i64 %20, 1
  %22 = sdiv i64 %21, 2
  %23 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %11, i64 %22
  %24 = ptrtoint %"class.v8::internal::compiler::Node"*** %4 to i64
  %25 = sub i64 %18, %24
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %34, label %27

27:                                               ; preds = %17
  %28 = ashr exact i64 %25, 3
  %29 = sub nsw i64 0, %28
  %30 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %23, i64 %29
  %31 = bitcast %"class.v8::internal::compiler::Node"*** %30 to i8*
  %32 = bitcast %"class.v8::internal::compiler::Node"*** %4 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %31, i8* align 8 %32, i64 %25, i1 false) #6
  %33 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %10, align 8
  br label %34

34:                                               ; preds = %17, %27
  %35 = phi %"class.v8::internal::compiler::Node"*** [ %33, %27 ], [ %11, %17 ]
  %36 = phi %"class.v8::internal::compiler::Node"*** [ %30, %27 ], [ %23, %17 ]
  store %"class.v8::internal::compiler::Node"*** %36, %"class.v8::internal::compiler::Node"**** %3, align 8
  %37 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %35, i64 %22
  store %"class.v8::internal::compiler::Node"*** %37, %"class.v8::internal::compiler::Node"**** %10, align 8
  br label %192

38:                                               ; preds = %9
  %39 = bitcast %"struct.std::__1::__split_buffer.73"* %0 to i64*
  %40 = sub i64 %16, %8
  %41 = ashr exact i64 %40, 2
  %42 = icmp eq i64 %40, 0
  %43 = select i1 %42, i64 1, i64 %41
  %44 = add nsw i64 %43, 3
  %45 = lshr i64 %44, 2
  %46 = getelementptr inbounds %"struct.std::__1::__split_buffer.73", %"struct.std::__1::__split_buffer.73"* %0, i64 0, i32 3, i32 1, i32 0
  %47 = load %"class.v8::internal::RecyclingZoneAllocator"*, %"class.v8::internal::RecyclingZoneAllocator"** %46, align 8
  %48 = getelementptr inbounds %"class.v8::internal::RecyclingZoneAllocator", %"class.v8::internal::RecyclingZoneAllocator"* %47, i64 0, i32 1
  %49 = load %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"*, %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"** %48, align 8
  %50 = icmp eq %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"* %49, null
  br i1 %50, label %60, label %51

51:                                               ; preds = %38
  %52 = getelementptr inbounds %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock", %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"* %49, i64 0, i32 1
  %53 = load i64, i64* %52, align 8
  %54 = icmp ult i64 %53, %43
  br i1 %54, label %60, label %55

55:                                               ; preds = %51
  %56 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"* %49 to %"class.v8::internal::compiler::Node"***
  %57 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"* %49 to i64*
  %58 = load i64, i64* %57, align 8
  %59 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"** %48 to i64*
  store i64 %58, i64* %59, align 8
  br label %77

60:                                               ; preds = %51, %38
  %61 = getelementptr inbounds %"class.v8::internal::RecyclingZoneAllocator", %"class.v8::internal::RecyclingZoneAllocator"* %47, i64 0, i32 0, i32 0
  %62 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %61, align 8
  %63 = shl i64 %43, 3
  %64 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %62, i64 0, i32 2
  %65 = load i64, i64* %64, align 8
  %66 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %62, i64 0, i32 3
  %67 = load i64, i64* %66, align 8
  %68 = sub i64 %67, %65
  %69 = icmp ugt i64 %63, %68
  br i1 %69, label %70, label %72, !prof !2

70:                                               ; preds = %60
  %71 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %62, i64 %63) #6
  br label %74

72:                                               ; preds = %60
  %73 = add i64 %65, %63
  store i64 %73, i64* %64, align 8
  br label %74

74:                                               ; preds = %72, %70
  %75 = phi i64 [ %71, %70 ], [ %65, %72 ]
  %76 = inttoptr i64 %75 to %"class.v8::internal::compiler::Node"***
  br label %77

77:                                               ; preds = %55, %74
  %78 = phi %"class.v8::internal::compiler::Node"*** [ %56, %55 ], [ %76, %74 ]
  %79 = ptrtoint %"class.v8::internal::compiler::Node"*** %78 to i64
  %80 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %78, i64 %45
  %81 = ptrtoint %"class.v8::internal::compiler::Node"*** %80 to i64
  %82 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %78, i64 %43
  %83 = ptrtoint %"class.v8::internal::compiler::Node"*** %82 to i64
  %84 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %3, align 8
  %85 = bitcast %"class.v8::internal::compiler::Node"**** %10 to i64*
  %86 = load i64, i64* %85, align 8
  %87 = ptrtoint %"class.v8::internal::compiler::Node"*** %84 to i64
  %88 = sub i64 %86, %87
  %89 = ashr exact i64 %88, 3
  %90 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %80, i64 %89
  %91 = icmp eq i64 %88, 0
  br i1 %91, label %166, label %92

92:                                               ; preds = %77
  %93 = add i64 %88, -8
  %94 = lshr i64 %93, 3
  %95 = add nuw nsw i64 %94, 1
  %96 = and i64 %95, 7
  %97 = icmp eq i64 %96, 0
  br i1 %97, label %113, label %98

98:                                               ; preds = %92, %98
  %99 = phi %"class.v8::internal::compiler::Node"*** [ %106, %98 ], [ %80, %92 ]
  %100 = phi i64 [ %107, %98 ], [ %81, %92 ]
  %101 = phi %"class.v8::internal::compiler::Node"*** [ %108, %98 ], [ %84, %92 ]
  %102 = phi i64 [ %109, %98 ], [ %96, %92 ]
  %103 = bitcast %"class.v8::internal::compiler::Node"*** %101 to i64*
  %104 = load i64, i64* %103, align 8
  %105 = inttoptr i64 %100 to i64*
  store i64 %104, i64* %105, align 8
  %106 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %99, i64 1
  %107 = ptrtoint %"class.v8::internal::compiler::Node"*** %106 to i64
  %108 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %101, i64 1
  %109 = add i64 %102, -1
  %110 = icmp eq i64 %109, 0
  br i1 %110, label %111, label %98, !llvm.loop !54

111:                                              ; preds = %98
  %112 = ptrtoint %"class.v8::internal::compiler::Node"*** %106 to i64
  br label %113

113:                                              ; preds = %92, %111
  %114 = phi %"class.v8::internal::compiler::Node"*** [ %80, %92 ], [ %106, %111 ]
  %115 = phi i64 [ %81, %92 ], [ %112, %111 ]
  %116 = phi %"class.v8::internal::compiler::Node"*** [ %84, %92 ], [ %108, %111 ]
  %117 = icmp ult i64 %93, 56
  br i1 %117, label %164, label %118

118:                                              ; preds = %113, %118
  %119 = phi %"class.v8::internal::compiler::Node"*** [ %160, %118 ], [ %114, %113 ]
  %120 = phi i64 [ %161, %118 ], [ %115, %113 ]
  %121 = phi %"class.v8::internal::compiler::Node"*** [ %162, %118 ], [ %116, %113 ]
  %122 = bitcast %"class.v8::internal::compiler::Node"*** %121 to i64*
  %123 = load i64, i64* %122, align 8
  %124 = inttoptr i64 %120 to i64*
  store i64 %123, i64* %124, align 8
  %125 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %119, i64 1
  %126 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %121, i64 1
  %127 = bitcast %"class.v8::internal::compiler::Node"*** %126 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = bitcast %"class.v8::internal::compiler::Node"*** %125 to i64*
  store i64 %128, i64* %129, align 8
  %130 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %119, i64 2
  %131 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %121, i64 2
  %132 = bitcast %"class.v8::internal::compiler::Node"*** %131 to i64*
  %133 = load i64, i64* %132, align 8
  %134 = bitcast %"class.v8::internal::compiler::Node"*** %130 to i64*
  store i64 %133, i64* %134, align 8
  %135 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %119, i64 3
  %136 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %121, i64 3
  %137 = bitcast %"class.v8::internal::compiler::Node"*** %136 to i64*
  %138 = load i64, i64* %137, align 8
  %139 = bitcast %"class.v8::internal::compiler::Node"*** %135 to i64*
  store i64 %138, i64* %139, align 8
  %140 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %119, i64 4
  %141 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %121, i64 4
  %142 = bitcast %"class.v8::internal::compiler::Node"*** %141 to i64*
  %143 = load i64, i64* %142, align 8
  %144 = bitcast %"class.v8::internal::compiler::Node"*** %140 to i64*
  store i64 %143, i64* %144, align 8
  %145 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %119, i64 5
  %146 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %121, i64 5
  %147 = bitcast %"class.v8::internal::compiler::Node"*** %146 to i64*
  %148 = load i64, i64* %147, align 8
  %149 = bitcast %"class.v8::internal::compiler::Node"*** %145 to i64*
  store i64 %148, i64* %149, align 8
  %150 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %119, i64 6
  %151 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %121, i64 6
  %152 = bitcast %"class.v8::internal::compiler::Node"*** %151 to i64*
  %153 = load i64, i64* %152, align 8
  %154 = bitcast %"class.v8::internal::compiler::Node"*** %150 to i64*
  store i64 %153, i64* %154, align 8
  %155 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %119, i64 7
  %156 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %121, i64 7
  %157 = bitcast %"class.v8::internal::compiler::Node"*** %156 to i64*
  %158 = load i64, i64* %157, align 8
  %159 = bitcast %"class.v8::internal::compiler::Node"*** %155 to i64*
  store i64 %158, i64* %159, align 8
  %160 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %119, i64 8
  %161 = ptrtoint %"class.v8::internal::compiler::Node"*** %160 to i64
  %162 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %121, i64 8
  %163 = icmp eq %"class.v8::internal::compiler::Node"*** %90, %160
  br i1 %163, label %164, label %118

164:                                              ; preds = %118, %113
  %165 = ptrtoint %"class.v8::internal::compiler::Node"*** %90 to i64
  br label %166

166:                                              ; preds = %77, %164
  %167 = phi i64 [ %165, %164 ], [ %81, %77 ]
  %168 = load i64, i64* %39, align 8
  store i64 %79, i64* %39, align 8
  %169 = bitcast %"class.v8::internal::compiler::Node"**** %3 to i64*
  store i64 %81, i64* %169, align 8
  store i64 %167, i64* %85, align 8
  %170 = load i64, i64* %15, align 8
  store i64 %83, i64* %15, align 8
  %171 = inttoptr i64 %168 to %"class.v8::internal::compiler::Node"***
  %172 = icmp eq i64 %168, 0
  br i1 %172, label %192, label %173

173:                                              ; preds = %166
  %174 = sub i64 %170, %168
  %175 = ashr exact i64 %174, 3
  %176 = icmp ult i64 %174, 16
  br i1 %176, label %192, label %177

177:                                              ; preds = %173
  %178 = load %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"*, %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"** %48, align 8
  %179 = icmp eq %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"* %178, null
  br i1 %179, label %184, label %180

180:                                              ; preds = %177
  %181 = getelementptr inbounds %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock", %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"* %178, i64 0, i32 1
  %182 = load i64, i64* %181, align 8
  %183 = icmp ugt i64 %182, %175
  br i1 %183, label %192, label %184

184:                                              ; preds = %180, %177
  %185 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %171, i64 1
  %186 = bitcast %"class.v8::internal::compiler::Node"*** %185 to i64*
  store i64 %175, i64* %186, align 8
  %187 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"** %48 to i64*
  %188 = load i64, i64* %187, align 8
  %189 = inttoptr i64 %168 to i64*
  store i64 %188, i64* %189, align 8
  %190 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"** %48 to %"class.v8::internal::compiler::Node"****
  store %"class.v8::internal::compiler::Node"*** %171, %"class.v8::internal::compiler::Node"**** %190, align 8
  %191 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %3, align 8
  br label %192

192:                                              ; preds = %184, %180, %173, %166, %34, %2
  %193 = phi %"class.v8::internal::compiler::Node"*** [ %191, %184 ], [ %80, %180 ], [ %80, %173 ], [ %80, %166 ], [ %36, %34 ], [ %4, %2 ]
  %194 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %193, i64 -1
  %195 = bitcast %"class.v8::internal::compiler::Node"*** %1 to i64*
  %196 = load i64, i64* %195, align 8
  %197 = bitcast %"class.v8::internal::compiler::Node"*** %194 to i64*
  store i64 %196, i64* %197, align 8
  %198 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %3, align 8
  %199 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %198, i64 -1
  store %"class.v8::internal::compiler::Node"*** %199, %"class.v8::internal::compiler::Node"**** %3, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

attributes #0 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{!4}
!4 = distinct !{!4, !5}
!5 = distinct !{!5, !"LVerDomain"}
!6 = !{!7}
!7 = distinct !{!7, !5}
!8 = distinct !{!8, !9}
!9 = !{!"llvm.loop.isvectorized", i32 1}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.unroll.disable"}
!12 = distinct !{!12, !9}
!13 = !{!14}
!14 = distinct !{!14, !15}
!15 = distinct !{!15, !"LVerDomain"}
!16 = !{!17}
!17 = distinct !{!17, !15}
!18 = distinct !{!18, !9}
!19 = distinct !{!19, !11}
!20 = distinct !{!20, !9}
!21 = !{!22}
!22 = distinct !{!22, !23}
!23 = distinct !{!23, !"LVerDomain"}
!24 = !{!25}
!25 = distinct !{!25, !23}
!26 = distinct !{!26, !9}
!27 = distinct !{!27, !11}
!28 = distinct !{!28, !9}
!29 = !{!30}
!30 = distinct !{!30, !31}
!31 = distinct !{!31, !"LVerDomain"}
!32 = !{!33}
!33 = distinct !{!33, !31}
!34 = distinct !{!34, !9}
!35 = distinct !{!35, !11}
!36 = distinct !{!36, !9}
!37 = !{!38}
!38 = distinct !{!38, !39}
!39 = distinct !{!39, !"LVerDomain"}
!40 = !{!41}
!41 = distinct !{!41, !39}
!42 = distinct !{!42, !9}
!43 = distinct !{!43, !11}
!44 = distinct !{!44, !9}
!45 = !{i8 0, i8 2}
!46 = !{!"branch_weights", i32 2000, i32 1}
!47 = !{!48}
!48 = distinct !{!48, !49, !"_ZNSt3__16vectorIbN2v88internal13ZoneAllocatorIbEEE11__make_iterEm: argument 0"}
!49 = distinct !{!49, !"_ZNSt3__16vectorIbN2v88internal13ZoneAllocatorIbEEE11__make_iterEm"}
!50 = distinct !{!50, !11}
!51 = distinct !{!51, !11}
!52 = distinct !{!52, !11}
!53 = distinct !{!53, !11}
!54 = distinct !{!54, !11}
