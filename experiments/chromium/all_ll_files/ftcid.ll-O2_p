; ModuleID = '../../third_party/freetype/src/src/base/ftcid.c'
source_filename = "../../third_party/freetype/src/src/base/ftcid.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.FT_FaceRec_ = type { i64, i64, i64, i64, i64, i8*, i8*, i32, %struct.FT_Bitmap_Size_*, i32, %struct.FT_CharMapRec_**, %struct.FT_Generic_, %struct.FT_BBox_, i16, i16, i16, i16, i16, i16, i16, i16, %struct.FT_GlyphSlotRec_*, %struct.FT_SizeRec_*, %struct.FT_CharMapRec_*, %struct.FT_DriverRec_*, %struct.FT_MemoryRec_*, %struct.FT_StreamRec_*, %struct.FT_ListRec_, %struct.FT_Generic_, i8*, %struct.FT_Face_InternalRec_* }
%struct.FT_Bitmap_Size_ = type { i16, i16, i64, i64, i64 }
%struct.FT_BBox_ = type { i64, i64, i64, i64 }
%struct.FT_GlyphSlotRec_ = type { %struct.FT_LibraryRec_*, %struct.FT_FaceRec_*, %struct.FT_GlyphSlotRec_*, i32, %struct.FT_Generic_, %struct.FT_Glyph_Metrics_, i64, i64, %struct.FT_Vector_, i32, %struct.FT_Bitmap_, i32, i32, %struct.FT_Outline_, i32, %struct.FT_SubGlyphRec_*, i8*, i64, i64, i64, i8*, %struct.FT_Slot_InternalRec_* }
%struct.FT_LibraryRec_ = type { %struct.FT_MemoryRec_*, i32, i32, i32, i32, [32 x %struct.FT_ModuleRec_*], %struct.FT_ListRec_, %struct.FT_RendererRec_*, %struct.FT_ModuleRec_*, [4 x i32 (i8*)*], [5 x i8], void (%struct.FT_Bitmap_*, i8*)*, i32 }
%struct.FT_RendererRec_ = type { %struct.FT_ModuleRec_, %struct.FT_Renderer_Class_*, i32, %struct.FT_Glyph_Class_, %struct.FT_RasterRec_*, i32 (%struct.FT_RasterRec_*, %struct.FT_Raster_Params_*)*, i32 (%struct.FT_RendererRec_*, %struct.FT_GlyphSlotRec_*, i32, %struct.FT_Vector_*)* }
%struct.FT_ModuleRec_ = type { %struct.FT_Module_Class_*, %struct.FT_LibraryRec_*, %struct.FT_MemoryRec_* }
%struct.FT_Module_Class_ = type { i64, i64, i8*, i64, i64, i8*, i32 (%struct.FT_ModuleRec_*)*, void (%struct.FT_ModuleRec_*)*, i8* (%struct.FT_ModuleRec_*, i8*)* }
%struct.FT_Renderer_Class_ = type { %struct.FT_Module_Class_, i32, i32 (%struct.FT_RendererRec_*, %struct.FT_GlyphSlotRec_*, i32, %struct.FT_Vector_*)*, i32 (%struct.FT_RendererRec_*, %struct.FT_GlyphSlotRec_*, %struct.FT_Matrix_*, %struct.FT_Vector_*)*, void (%struct.FT_RendererRec_*, %struct.FT_GlyphSlotRec_*, %struct.FT_BBox_*)*, i32 (%struct.FT_RendererRec_*, i64, i8*)*, %struct.FT_Raster_Funcs_* }
%struct.FT_Matrix_ = type { i64, i64, i64, i64 }
%struct.FT_Raster_Funcs_ = type { i32, i32 (i8*, %struct.FT_RasterRec_**)*, void (%struct.FT_RasterRec_*, i8*, i64)*, i32 (%struct.FT_RasterRec_*, i64, i8*)*, i32 (%struct.FT_RasterRec_*, %struct.FT_Raster_Params_*)*, void (%struct.FT_RasterRec_*)* }
%struct.FT_Glyph_Class_ = type { i64, i32, i32 (%struct.FT_GlyphRec_*, %struct.FT_GlyphSlotRec_*)*, void (%struct.FT_GlyphRec_*)*, i32 (%struct.FT_GlyphRec_*, %struct.FT_GlyphRec_*)*, void (%struct.FT_GlyphRec_*, %struct.FT_Matrix_*, %struct.FT_Vector_*)*, void (%struct.FT_GlyphRec_*, %struct.FT_BBox_*)*, i32 (%struct.FT_GlyphRec_*, %struct.FT_GlyphSlotRec_*)* }
%struct.FT_GlyphRec_ = type { %struct.FT_LibraryRec_*, %struct.FT_Glyph_Class_*, i32, %struct.FT_Vector_ }
%struct.FT_RasterRec_ = type opaque
%struct.FT_Raster_Params_ = type { %struct.FT_Bitmap_*, i8*, i32, void (i32, i32, %struct.FT_Span_*, i8*)*, void (i32, i32, %struct.FT_Span_*, i8*)*, i32 (i32, i32, i8*)*, void (i32, i32, i8*)*, i8*, %struct.FT_BBox_ }
%struct.FT_Span_ = type { i16, i16, i8 }
%struct.FT_Glyph_Metrics_ = type { i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.FT_Vector_ = type { i64, i64 }
%struct.FT_Bitmap_ = type { i32, i32, i32, i8*, i16, i8, i8, i8* }
%struct.FT_Outline_ = type { i16, i16, %struct.FT_Vector_*, i8*, i16*, i32 }
%struct.FT_SubGlyphRec_ = type { i32, i16, i32, i32, %struct.FT_Matrix_ }
%struct.FT_Slot_InternalRec_ = type { %struct.FT_GlyphLoaderRec_*, i32, i8, %struct.FT_Matrix_, %struct.FT_Vector_, i8*, i32 }
%struct.FT_GlyphLoaderRec_ = type { %struct.FT_MemoryRec_*, i32, i32, i32, i8, %struct.FT_GlyphLoadRec_, %struct.FT_GlyphLoadRec_, i8* }
%struct.FT_GlyphLoadRec_ = type { %struct.FT_Outline_, %struct.FT_Vector_*, %struct.FT_Vector_*, i32, %struct.FT_SubGlyphRec_* }
%struct.FT_SizeRec_ = type { %struct.FT_FaceRec_*, %struct.FT_Generic_, %struct.FT_Size_Metrics_, %struct.FT_Size_InternalRec_* }
%struct.FT_Size_Metrics_ = type { i16, i16, i64, i64, i64, i64, i64, i64 }
%struct.FT_Size_InternalRec_ = type { i8*, i32, %struct.FT_Size_Metrics_ }
%struct.FT_CharMapRec_ = type { %struct.FT_FaceRec_*, i32, i16, i16 }
%struct.FT_DriverRec_ = type { %struct.FT_ModuleRec_, %struct.FT_Driver_ClassRec_*, %struct.FT_ListRec_, %struct.FT_GlyphLoaderRec_* }
%struct.FT_Driver_ClassRec_ = type { %struct.FT_Module_Class_, i64, i64, i64, i32 (%struct.FT_StreamRec_*, %struct.FT_FaceRec_*, i32, i32, %struct.FT_Parameter_*)*, void (%struct.FT_FaceRec_*)*, i32 (%struct.FT_SizeRec_*)*, void (%struct.FT_SizeRec_*)*, i32 (%struct.FT_GlyphSlotRec_*)*, void (%struct.FT_GlyphSlotRec_*)*, i32 (%struct.FT_GlyphSlotRec_*, %struct.FT_SizeRec_*, i32, i32)*, i32 (%struct.FT_FaceRec_*, i32, i32, %struct.FT_Vector_*)*, i32 (%struct.FT_FaceRec_*, %struct.FT_StreamRec_*)*, i32 (%struct.FT_FaceRec_*, i32, i32, i32, i64*)*, i32 (%struct.FT_SizeRec_*, %struct.FT_Size_RequestRec_*)*, i32 (%struct.FT_SizeRec_*, i64)* }
%struct.FT_Parameter_ = type { i64, i8* }
%struct.FT_Size_RequestRec_ = type { i32, i64, i64, i32, i32 }
%struct.FT_MemoryRec_ = type { i8*, i8* (%struct.FT_MemoryRec_*, i64)*, void (%struct.FT_MemoryRec_*, i8*)*, i8* (%struct.FT_MemoryRec_*, i64, i64, i8*)* }
%struct.FT_StreamRec_ = type { i8*, i64, i64, %union.FT_StreamDesc_, %union.FT_StreamDesc_, i64 (%struct.FT_StreamRec_*, i64, i8*, i64)*, void (%struct.FT_StreamRec_*)*, %struct.FT_MemoryRec_*, i8*, i8* }
%union.FT_StreamDesc_ = type { i64 }
%struct.FT_ListRec_ = type { %struct.FT_ListNodeRec_*, %struct.FT_ListNodeRec_* }
%struct.FT_ListNodeRec_ = type { %struct.FT_ListNodeRec_*, %struct.FT_ListNodeRec_*, i8* }
%struct.FT_Generic_ = type { i8*, void (i8*)* }
%struct.FT_Face_InternalRec_ = type { %struct.FT_Matrix_, %struct.FT_Vector_, i32, %struct.FT_ServiceCacheRec_, %struct.FT_Incremental_InterfaceRec_*, i8, i32, [5 x i8], void (%struct.FT_Bitmap_*, i8*)*, i32 }
%struct.FT_ServiceCacheRec_ = type { i8*, i8*, i8*, i8*, i8*, i8* }
%struct.FT_Incremental_InterfaceRec_ = type { %struct.FT_Incremental_FuncsRec_*, %struct.FT_IncrementalRec_* }
%struct.FT_Incremental_FuncsRec_ = type { i32 (%struct.FT_IncrementalRec_*, i32, %struct.FT_Data_*)*, void (%struct.FT_IncrementalRec_*, %struct.FT_Data_*)*, i32 (%struct.FT_IncrementalRec_*, i32, i8, %struct.FT_Incremental_MetricsRec_*)* }
%struct.FT_Data_ = type { i8*, i32 }
%struct.FT_Incremental_MetricsRec_ = type { i64, i64, i64, i64 }
%struct.FT_IncrementalRec_ = type opaque

@.str = private unnamed_addr constant [4 x i8] c"CID\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @FT_Get_CID_Registry_Ordering_Supplement(%struct.FT_FaceRec_*, i8**, i8**, i32*) local_unnamed_addr #0 {
  %5 = alloca i8*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i32, align 4
  %8 = bitcast i8** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #2
  store i8* null, i8** %5, align 8
  %9 = bitcast i8** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #2
  store i8* null, i8** %6, align 8
  %10 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #2
  store i32 0, i32* %7, align 4
  %11 = icmp eq %struct.FT_FaceRec_* %0, null
  br i1 %11, label %30, label %12

12:                                               ; preds = %4
  %13 = getelementptr inbounds %struct.FT_FaceRec_, %struct.FT_FaceRec_* %0, i64 0, i32 24
  %14 = bitcast %struct.FT_DriverRec_** %13 to %struct.FT_ModuleRec_**
  %15 = load %struct.FT_ModuleRec_*, %struct.FT_ModuleRec_** %14, align 8
  %16 = getelementptr inbounds %struct.FT_ModuleRec_, %struct.FT_ModuleRec_* %15, i64 0, i32 0
  %17 = load %struct.FT_Module_Class_*, %struct.FT_Module_Class_** %16, align 8
  %18 = getelementptr inbounds %struct.FT_Module_Class_, %struct.FT_Module_Class_* %17, i64 0, i32 8
  %19 = load i8* (%struct.FT_ModuleRec_*, i8*)*, i8* (%struct.FT_ModuleRec_*, i8*)** %18, align 8
  %20 = icmp eq i8* (%struct.FT_ModuleRec_*, i8*)* %19, null
  br i1 %20, label %30, label %21

21:                                               ; preds = %12
  %22 = tail call i8* %19(%struct.FT_ModuleRec_* %15, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0)) #2
  %23 = icmp eq i8* %22, null
  br i1 %23, label %30, label %24

24:                                               ; preds = %21
  %25 = bitcast i8* %22 to i32 (%struct.FT_FaceRec_*, i8**, i8**, i32*)**
  %26 = load i32 (%struct.FT_FaceRec_*, i8**, i8**, i32*)*, i32 (%struct.FT_FaceRec_*, i8**, i8**, i32*)** %25, align 8
  %27 = icmp eq i32 (%struct.FT_FaceRec_*, i8**, i8**, i32*)* %26, null
  br i1 %27, label %30, label %28

28:                                               ; preds = %24
  %29 = call i32 %26(%struct.FT_FaceRec_* nonnull %0, i8** nonnull %5, i8** nonnull %6, i32* nonnull %7) #2
  br label %30

30:                                               ; preds = %12, %28, %21, %24, %4
  %31 = phi i32 [ 6, %4 ], [ %29, %28 ], [ 6, %24 ], [ 6, %21 ], [ 6, %12 ]
  %32 = icmp eq i8** %1, null
  br i1 %32, label %37, label %33

33:                                               ; preds = %30
  %34 = bitcast i8** %5 to i64*
  %35 = load i64, i64* %34, align 8
  %36 = bitcast i8** %1 to i64*
  store i64 %35, i64* %36, align 8
  br label %37

37:                                               ; preds = %30, %33
  %38 = icmp eq i8** %2, null
  br i1 %38, label %43, label %39

39:                                               ; preds = %37
  %40 = bitcast i8** %6 to i64*
  %41 = load i64, i64* %40, align 8
  %42 = bitcast i8** %2 to i64*
  store i64 %41, i64* %42, align 8
  br label %43

43:                                               ; preds = %37, %39
  %44 = icmp eq i32* %3, null
  br i1 %44, label %47, label %45

45:                                               ; preds = %43
  %46 = load i32, i32* %7, align 4
  store i32 %46, i32* %3, align 4
  br label %47

47:                                               ; preds = %43, %45
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #2
  ret i32 %31
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @FT_Get_CID_Is_Internally_CID_Keyed(%struct.FT_FaceRec_*, i8*) local_unnamed_addr #0 {
  %3 = alloca i8, align 1
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %3) #2
  store i8 0, i8* %3, align 1
  %4 = icmp eq %struct.FT_FaceRec_* %0, null
  br i1 %4, label %24, label %5

5:                                                ; preds = %2
  %6 = getelementptr inbounds %struct.FT_FaceRec_, %struct.FT_FaceRec_* %0, i64 0, i32 24
  %7 = bitcast %struct.FT_DriverRec_** %6 to %struct.FT_ModuleRec_**
  %8 = load %struct.FT_ModuleRec_*, %struct.FT_ModuleRec_** %7, align 8
  %9 = getelementptr inbounds %struct.FT_ModuleRec_, %struct.FT_ModuleRec_* %8, i64 0, i32 0
  %10 = load %struct.FT_Module_Class_*, %struct.FT_Module_Class_** %9, align 8
  %11 = getelementptr inbounds %struct.FT_Module_Class_, %struct.FT_Module_Class_* %10, i64 0, i32 8
  %12 = load i8* (%struct.FT_ModuleRec_*, i8*)*, i8* (%struct.FT_ModuleRec_*, i8*)** %11, align 8
  %13 = icmp eq i8* (%struct.FT_ModuleRec_*, i8*)* %12, null
  br i1 %13, label %24, label %14

14:                                               ; preds = %5
  %15 = tail call i8* %12(%struct.FT_ModuleRec_* %8, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0)) #2
  %16 = icmp eq i8* %15, null
  br i1 %16, label %24, label %17

17:                                               ; preds = %14
  %18 = getelementptr inbounds i8, i8* %15, i64 8
  %19 = bitcast i8* %18 to i32 (%struct.FT_FaceRec_*, i8*)**
  %20 = load i32 (%struct.FT_FaceRec_*, i8*)*, i32 (%struct.FT_FaceRec_*, i8*)** %19, align 8
  %21 = icmp eq i32 (%struct.FT_FaceRec_*, i8*)* %20, null
  br i1 %21, label %24, label %22

22:                                               ; preds = %17
  %23 = call i32 %20(%struct.FT_FaceRec_* nonnull %0, i8* nonnull %3) #2
  br label %24

24:                                               ; preds = %5, %22, %14, %17, %2
  %25 = phi i32 [ 6, %2 ], [ %23, %22 ], [ 6, %17 ], [ 6, %14 ], [ 6, %5 ]
  %26 = icmp eq i8* %1, null
  br i1 %26, label %29, label %27

27:                                               ; preds = %24
  %28 = load i8, i8* %3, align 1
  store i8 %28, i8* %1, align 1
  br label %29

29:                                               ; preds = %24, %27
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %3) #2
  ret i32 %25
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @FT_Get_CID_From_Glyph_Index(%struct.FT_FaceRec_*, i32, i32*) local_unnamed_addr #0 {
  %4 = alloca i32, align 4
  %5 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #2
  store i32 0, i32* %4, align 4
  %6 = icmp eq %struct.FT_FaceRec_* %0, null
  br i1 %6, label %26, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.FT_FaceRec_, %struct.FT_FaceRec_* %0, i64 0, i32 24
  %9 = bitcast %struct.FT_DriverRec_** %8 to %struct.FT_ModuleRec_**
  %10 = load %struct.FT_ModuleRec_*, %struct.FT_ModuleRec_** %9, align 8
  %11 = getelementptr inbounds %struct.FT_ModuleRec_, %struct.FT_ModuleRec_* %10, i64 0, i32 0
  %12 = load %struct.FT_Module_Class_*, %struct.FT_Module_Class_** %11, align 8
  %13 = getelementptr inbounds %struct.FT_Module_Class_, %struct.FT_Module_Class_* %12, i64 0, i32 8
  %14 = load i8* (%struct.FT_ModuleRec_*, i8*)*, i8* (%struct.FT_ModuleRec_*, i8*)** %13, align 8
  %15 = icmp eq i8* (%struct.FT_ModuleRec_*, i8*)* %14, null
  br i1 %15, label %26, label %16

16:                                               ; preds = %7
  %17 = tail call i8* %14(%struct.FT_ModuleRec_* %10, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0)) #2
  %18 = icmp eq i8* %17, null
  br i1 %18, label %26, label %19

19:                                               ; preds = %16
  %20 = getelementptr inbounds i8, i8* %17, i64 16
  %21 = bitcast i8* %20 to i32 (%struct.FT_FaceRec_*, i32, i32*)**
  %22 = load i32 (%struct.FT_FaceRec_*, i32, i32*)*, i32 (%struct.FT_FaceRec_*, i32, i32*)** %21, align 8
  %23 = icmp eq i32 (%struct.FT_FaceRec_*, i32, i32*)* %22, null
  br i1 %23, label %26, label %24

24:                                               ; preds = %19
  %25 = call i32 %22(%struct.FT_FaceRec_* nonnull %0, i32 %1, i32* nonnull %4) #2
  br label %26

26:                                               ; preds = %7, %24, %16, %19, %3
  %27 = phi i32 [ 6, %3 ], [ %25, %24 ], [ 6, %19 ], [ 6, %16 ], [ 6, %7 ]
  %28 = icmp eq i32* %2, null
  br i1 %28, label %31, label %29

29:                                               ; preds = %26
  %30 = load i32, i32* %4, align 4
  store i32 %30, i32* %2, align 4
  br label %31

31:                                               ; preds = %26, %29
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #2
  ret i32 %27
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
