; ModuleID = '../../third_party/blink/renderer/modules/mediasource/media_source_attachment_supplement.cc'
source_filename = "../../third_party/blink/renderer/modules/mediasource/media_source_attachment_supplement.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::URLRegistry" = type { i32 (...)** }
%"class.blink::MediaSourceAttachmentSupplement" = type { %"class.blink::MediaSourceAttachment.base", [4 x i8] }
%"class.blink::MediaSourceAttachment.base" = type <{ %"class.blink::URLRegistrable", %"class.WTF::ThreadSafeRefCounted" }>
%"class.blink::URLRegistrable" = type { i32 (...)** }
%"class.WTF::ThreadSafeRefCounted" = type { %"class.base::RefCountedThreadSafe" }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.blink::MediaSourceAttachment" = type <{ %"class.blink::URLRegistrable", %"class.WTF::ThreadSafeRefCounted", [4 x i8] }>
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic.1" }
%"struct.std::__1::atomic.1" = type { %"struct.std::__1::__atomic_base.2" }
%"struct.std::__1::__atomic_base.2" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__cxx_atomic_impl.4" }
%"struct.std::__1::__cxx_atomic_impl.4" = type { %"struct.std::__1::__cxx_atomic_base_impl.5" }
%"struct.std::__1::__cxx_atomic_base_impl.5" = type { i32 }
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr.6 }
%class.scoped_refptr.6 = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe.7", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe.7" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::PassKey" = type { i8 }
%"class.mojo::PendingReceiver" = type { %"struct.mojo::internal::PendingReceiverState" }
%"struct.mojo::internal::PendingReceiverState" = type { %"class.mojo::ScopedHandleBase", %"class.mojo::ConnectionGroup::Ref" }
%"class.mojo::ScopedHandleBase" = type { %"class.mojo::MessagePipeHandle" }
%"class.mojo::MessagePipeHandle" = type { %"class.mojo::Handle" }
%"class.mojo::Handle" = type { i32 }
%"class.mojo::ConnectionGroup::Ref" = type { i32, %class.scoped_refptr.10 }
%class.scoped_refptr.10 = type { %"class.mojo::ConnectionGroup"* }
%"class.mojo::ConnectionGroup" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.11", [4 x i8], %"class.base::RepeatingCallback", %class.scoped_refptr.12, %"class.mojo::ConnectionGroup::Ref", %"struct.std::__1::atomic.1", [4 x i8] }>
%"class.base::RefCountedThreadSafe.11" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::RepeatingCallback" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.base::internal::CallbackBaseCopyable" = type { %"class.base::internal::CallbackBase" }
%class.scoped_refptr.12 = type { %"class.base::SequencedTaskRunner"* }
%"class.base::SequencedTaskRunner" = type { %"class.base::TaskRunner.base", [4 x i8] }
%"class.base::TaskRunner.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.13" }>
%"class.base::RefCountedThreadSafe.13" = type { %"class.base::subtle::RefCountedThreadSafeBase" }

$_ZNK5blink21MediaSourceAttachment8RegistryEv = comdat any

$_ZN5blink14URLRegistrable10IsMojoBlobEv = comdat any

$_ZN5blink14URLRegistrable13CloneMojoBlobEN4mojo15PendingReceiverINS_5mojom5blink4BlobEEE = comdat any

@_ZTVN5blink31MediaSourceAttachmentSupplementE = hidden unnamed_addr constant { [32 x i8*] } { [32 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.blink::MediaSourceAttachmentSupplement"*)* @_ZN5blink31MediaSourceAttachmentSupplementD2Ev to i8*), i8* bitcast (void (%"class.blink::MediaSourceAttachmentSupplement"*)* @_ZN5blink31MediaSourceAttachmentSupplementD0Ev to i8*), i8* bitcast (%"class.blink::URLRegistry"* (%"class.blink::MediaSourceAttachment"*)* @_ZNK5blink21MediaSourceAttachment8RegistryEv to i8*), i8* bitcast (i1 (%"class.blink::URLRegistrable"*)* @_ZN5blink14URLRegistrable10IsMojoBlobEv to i8*), i8* bitcast (void (%"class.blink::URLRegistrable"*, %"class.mojo::PendingReceiver"*)* @_ZN5blink14URLRegistrable13CloneMojoBlobEN4mojo15PendingReceiverINS_5mojom5blink4BlobEEE to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void (%"class.blink::MediaSourceAttachmentSupplement"*, %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"*, i1)* @_ZN5blink31MediaSourceAttachmentSupplement37AddMainThreadAudioTrackToMediaElementEN3WTF6StringES2_S2_S2_b to i8*), i8* bitcast (void (%"class.blink::MediaSourceAttachmentSupplement"*, %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"*, i1)* @_ZN5blink31MediaSourceAttachmentSupplement37AddMainThreadVideoTrackToMediaElementEN3WTF6StringES2_S2_S2_b to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (i1 (%"class.blink::MediaSourceAttachmentSupplement"*, i1, %"class.base::OnceCallback"*)* @_ZN5blink31MediaSourceAttachmentSupplement14RunExclusivelyEbN4base12OnceCallbackIFvNS1_7PassKeyIS0_EEEEE to i8*), i8* bitcast (i1 (%"class.blink::MediaSourceAttachmentSupplement"*)* @_ZNK5blink31MediaSourceAttachmentSupplement25FullyAttachedOrSameThreadEN4base7PassKeyINS_12SourceBufferEEE to i8*), i8* bitcast (void (%"class.blink::MediaSourceAttachmentSupplement"*)* @_ZN5blink31MediaSourceAttachmentSupplement44AssertCrossThreadMutexIsAcquiredForDebuggingEv to i8*)] }, align 8
@_ZN5blink21MediaSourceAttachment9registry_E = external local_unnamed_addr global %"class.blink::URLRegistry"*, align 8

@_ZN5blink31MediaSourceAttachmentSupplementD1Ev = hidden unnamed_addr alias void (%"class.blink::MediaSourceAttachmentSupplement"*), void (%"class.blink::MediaSourceAttachmentSupplement"*)* @_ZN5blink31MediaSourceAttachmentSupplementD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink31MediaSourceAttachmentSupplementC2Ev(%"class.blink::MediaSourceAttachmentSupplement"*) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.blink::MediaSourceAttachmentSupplement"* %0 to %"class.blink::MediaSourceAttachment"*
  tail call void @_ZN5blink21MediaSourceAttachmentC2Ev(%"class.blink::MediaSourceAttachment"* %2) #7
  %3 = getelementptr inbounds %"class.blink::MediaSourceAttachmentSupplement", %"class.blink::MediaSourceAttachmentSupplement"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [32 x i8*] }, { [32 x i8*] }* @_ZTVN5blink31MediaSourceAttachmentSupplementE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  ret void
}

declare void @_ZN5blink21MediaSourceAttachmentC2Ev(%"class.blink::MediaSourceAttachment"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN5blink21MediaSourceAttachmentD2Ev(%"class.blink::MediaSourceAttachment"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink31MediaSourceAttachmentSupplementD2Ev(%"class.blink::MediaSourceAttachmentSupplement"*) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.blink::MediaSourceAttachmentSupplement"* %0 to %"class.blink::MediaSourceAttachment"*
  tail call void @_ZN5blink21MediaSourceAttachmentD2Ev(%"class.blink::MediaSourceAttachment"* %2) #7
  ret void
}

; Function Attrs: noreturn nounwind ssp uwtable
define hidden void @_ZN5blink31MediaSourceAttachmentSupplementD0Ev(%"class.blink::MediaSourceAttachmentSupplement"* nocapture readnone) unnamed_addr #3 align 2 {
  tail call void @llvm.trap() #8
  unreachable
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink31MediaSourceAttachmentSupplement37AddMainThreadAudioTrackToMediaElementEN3WTF6StringES2_S2_S2_b(%"class.blink::MediaSourceAttachmentSupplement"* nocapture readnone, %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"*, i1 zeroext) unnamed_addr #0 align 2 {
  %7 = icmp eq %"class.WTF::StringImpl"* %4, null
  br i1 %7, label %21, label %8

8:                                                ; preds = %6
  %9 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = load atomic i32, i32* %9 monotonic, align 4
  %11 = and i32 %10, 2
  %12 = icmp eq i32 %11, 0
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 0, i32 0
  %14 = load i32, i32* %13, align 4
  br i1 %12, label %15, label %17

15:                                               ; preds = %8
  %16 = add i32 %14, -1
  store i32 %16, i32* %13, align 4
  br label %17

17:                                               ; preds = %15, %8
  %18 = phi i32 [ %16, %15 ], [ %14, %8 ]
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %21

20:                                               ; preds = %17
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %4) #7
  br label %21

21:                                               ; preds = %6, %17, %20
  %22 = icmp eq %"class.WTF::StringImpl"* %3, null
  br i1 %22, label %36, label %23

23:                                               ; preds = %21
  %24 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %3, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %25 = load atomic i32, i32* %24 monotonic, align 4
  %26 = and i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %3, i64 0, i32 0
  %29 = load i32, i32* %28, align 4
  br i1 %27, label %30, label %32

30:                                               ; preds = %23
  %31 = add i32 %29, -1
  store i32 %31, i32* %28, align 4
  br label %32

32:                                               ; preds = %30, %23
  %33 = phi i32 [ %31, %30 ], [ %29, %23 ]
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %36

35:                                               ; preds = %32
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %3) #7
  br label %36

36:                                               ; preds = %21, %32, %35
  %37 = icmp eq %"class.WTF::StringImpl"* %2, null
  br i1 %37, label %51, label %38

38:                                               ; preds = %36
  %39 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %40 = load atomic i32, i32* %39 monotonic, align 4
  %41 = and i32 %40, 2
  %42 = icmp eq i32 %41, 0
  %43 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2, i64 0, i32 0
  %44 = load i32, i32* %43, align 4
  br i1 %42, label %45, label %47

45:                                               ; preds = %38
  %46 = add i32 %44, -1
  store i32 %46, i32* %43, align 4
  br label %47

47:                                               ; preds = %45, %38
  %48 = phi i32 [ %46, %45 ], [ %44, %38 ]
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %50, label %51

50:                                               ; preds = %47
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %2) #7
  br label %51

51:                                               ; preds = %36, %47, %50
  %52 = icmp eq %"class.WTF::StringImpl"* %1, null
  br i1 %52, label %66, label %53

53:                                               ; preds = %51
  %54 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %55 = load atomic i32, i32* %54 monotonic, align 4
  %56 = and i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 0
  %59 = load i32, i32* %58, align 4
  br i1 %57, label %60, label %62

60:                                               ; preds = %53
  %61 = add i32 %59, -1
  store i32 %61, i32* %58, align 4
  br label %62

62:                                               ; preds = %60, %53
  %63 = phi i32 [ %61, %60 ], [ %59, %53 ]
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %65, label %66

65:                                               ; preds = %62
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1) #7
  br label %66

66:                                               ; preds = %51, %62, %65
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink31MediaSourceAttachmentSupplement37AddMainThreadVideoTrackToMediaElementEN3WTF6StringES2_S2_S2_b(%"class.blink::MediaSourceAttachmentSupplement"* nocapture readnone, %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"*, i1 zeroext) unnamed_addr #0 align 2 {
  %7 = icmp eq %"class.WTF::StringImpl"* %4, null
  br i1 %7, label %21, label %8

8:                                                ; preds = %6
  %9 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = load atomic i32, i32* %9 monotonic, align 4
  %11 = and i32 %10, 2
  %12 = icmp eq i32 %11, 0
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 0, i32 0
  %14 = load i32, i32* %13, align 4
  br i1 %12, label %15, label %17

15:                                               ; preds = %8
  %16 = add i32 %14, -1
  store i32 %16, i32* %13, align 4
  br label %17

17:                                               ; preds = %15, %8
  %18 = phi i32 [ %16, %15 ], [ %14, %8 ]
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %21

20:                                               ; preds = %17
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %4) #7
  br label %21

21:                                               ; preds = %6, %17, %20
  %22 = icmp eq %"class.WTF::StringImpl"* %3, null
  br i1 %22, label %36, label %23

23:                                               ; preds = %21
  %24 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %3, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %25 = load atomic i32, i32* %24 monotonic, align 4
  %26 = and i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %3, i64 0, i32 0
  %29 = load i32, i32* %28, align 4
  br i1 %27, label %30, label %32

30:                                               ; preds = %23
  %31 = add i32 %29, -1
  store i32 %31, i32* %28, align 4
  br label %32

32:                                               ; preds = %30, %23
  %33 = phi i32 [ %31, %30 ], [ %29, %23 ]
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %36

35:                                               ; preds = %32
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %3) #7
  br label %36

36:                                               ; preds = %21, %32, %35
  %37 = icmp eq %"class.WTF::StringImpl"* %2, null
  br i1 %37, label %51, label %38

38:                                               ; preds = %36
  %39 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %40 = load atomic i32, i32* %39 monotonic, align 4
  %41 = and i32 %40, 2
  %42 = icmp eq i32 %41, 0
  %43 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2, i64 0, i32 0
  %44 = load i32, i32* %43, align 4
  br i1 %42, label %45, label %47

45:                                               ; preds = %38
  %46 = add i32 %44, -1
  store i32 %46, i32* %43, align 4
  br label %47

47:                                               ; preds = %45, %38
  %48 = phi i32 [ %46, %45 ], [ %44, %38 ]
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %50, label %51

50:                                               ; preds = %47
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %2) #7
  br label %51

51:                                               ; preds = %36, %47, %50
  %52 = icmp eq %"class.WTF::StringImpl"* %1, null
  br i1 %52, label %66, label %53

53:                                               ; preds = %51
  %54 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %55 = load atomic i32, i32* %54 monotonic, align 4
  %56 = and i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 0
  %59 = load i32, i32* %58, align 4
  br i1 %57, label %60, label %62

60:                                               ; preds = %53
  %61 = add i32 %59, -1
  store i32 %61, i32* %58, align 4
  br label %62

62:                                               ; preds = %60, %53
  %63 = phi i32 [ %61, %60 ], [ %59, %53 ]
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %65, label %66

65:                                               ; preds = %62
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1) #7
  br label %66

66:                                               ; preds = %51, %62, %65
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink31MediaSourceAttachmentSupplement14RunExclusivelyEbN4base12OnceCallbackIFvNS1_7PassKeyIS0_EEEEE(%"class.blink::MediaSourceAttachmentSupplement"* nocapture readnone, i1 zeroext, %"class.base::OnceCallback"* nocapture) unnamed_addr #0 align 2 {
  %4 = alloca %"class.base::PassKey", align 1
  %5 = alloca %"class.base::OnceCallback", align 8
  %6 = getelementptr inbounds %"class.base::PassKey", %"class.base::PassKey"* %4, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %6)
  %7 = bitcast %"class.base::OnceCallback"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #7
  %8 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %2, i64 0, i32 0, i32 0, i32 0
  %9 = bitcast %"class.base::OnceCallback"* %2 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %"class.base::OnceCallback"* %5 to i64*
  store i64 %10, i64* %11, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %8, align 8
  %12 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %5, i64 0, i32 0
  %13 = inttoptr i64 %10 to %"class.base::internal::BindStateBase"*
  %14 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %13, i64 0, i32 1
  %15 = bitcast void ()** %14 to void (%"class.base::internal::BindStateBase"*, %"class.base::PassKey"*)**
  %16 = load void (%"class.base::internal::BindStateBase"*, %"class.base::PassKey"*)*, void (%"class.base::internal::BindStateBase"*, %"class.base::PassKey"*)** %15, align 8
  call void %16(%"class.base::internal::BindStateBase"* %13, %"class.base::PassKey"* nonnull dereferenceable(1) %4) #7
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %12) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #7
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %6)
  ret i1 true
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZNK5blink31MediaSourceAttachmentSupplement25FullyAttachedOrSameThreadEN4base7PassKeyINS_12SourceBufferEEE(%"class.blink::MediaSourceAttachmentSupplement"* nocapture readnone) unnamed_addr #5 align 2 {
  ret i1 true
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN5blink31MediaSourceAttachmentSupplement44AssertCrossThreadMutexIsAcquiredForDebuggingEv(%"class.blink::MediaSourceAttachmentSupplement"* nocapture) unnamed_addr #5 align 2 {
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZNK5blink31MediaSourceAttachmentSupplement15GetExclusiveKeyEv(%"class.blink::MediaSourceAttachmentSupplement"* nocapture) local_unnamed_addr #5 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(8) %"class.blink::URLRegistry"* @_ZNK5blink21MediaSourceAttachment8RegistryEv(%"class.blink::MediaSourceAttachment"*) unnamed_addr #0 comdat align 2 {
  %2 = load %"class.blink::URLRegistry"*, %"class.blink::URLRegistry"** @_ZN5blink21MediaSourceAttachment9registry_E, align 8
  ret %"class.blink::URLRegistry"* %2
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN5blink14URLRegistrable10IsMojoBlobEv(%"class.blink::URLRegistrable"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink14URLRegistrable13CloneMojoBlobEN4mojo15PendingReceiverINS_5mojom5blink4BlobEEE(%"class.blink::URLRegistrable"*, %"class.mojo::PendingReceiver"*) unnamed_addr #0 comdat align 2 {
  ret void
}

declare void @__cxa_pure_virtual() unnamed_addr

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #6

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #6

; Function Attrs: nounwind
declare void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"*) unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { cold noreturn nounwind }
attributes #5 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { argmemonly nounwind }
attributes #7 = { nounwind }
attributes #8 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
