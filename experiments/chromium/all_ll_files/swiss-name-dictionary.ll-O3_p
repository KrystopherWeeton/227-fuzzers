; ModuleID = '../../v8/src/objects/swiss-name-dictionary.cc'
source_filename = "../../v8/src/objects/swiss-name-dictionary.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.v8::internal::SoleReadOnlyHeap" = type { %"class.v8::internal::ReadOnlyHeap", [587 x i64] }
%"class.v8::internal::ReadOnlyHeap" = type { i32 (...)**, i8, %"class.v8::internal::ReadOnlySpace"*, %"class.std::__1::vector.541" }
%"class.v8::internal::ReadOnlySpace" = type { %"class.v8::internal::BaseSpace", i8, %"class.v8::internal::AllocationStats", %"class.std::__1::vector.139", i64, i64, i8, i64, i64 }
%"class.v8::internal::BaseSpace" = type { i32 (...)**, %"class.v8::internal::Heap"*, i32, %"struct.std::__1::atomic.19", i64 }
%"class.v8::internal::Heap" = type { %"class.std::__1::unordered_map", %"struct.std::__1::atomic.19", %"class.v8::internal::Heap::ExternalMemoryAccounting", %"class.v8::internal::Isolate"*, i64, i64, i64, i64, %"struct.std::__1::atomic.19", i64, i64, i64, i64, i64, i8, i64, i64, %"struct.std::__1::atomic.19", i64, i64, %"struct.std::__1::atomic.19", %"struct.std::__1::atomic.29", %"class.std::__1::vector", i32, %"class.v8::internal::NewSpace"*, %"class.v8::internal::OldSpace"*, %"class.v8::internal::CodeSpace"*, %"class.v8::internal::MapSpace"*, %"class.v8::internal::OldLargeObjectSpace"*, %"class.v8::internal::CodeLargeObjectSpace"*, %"class.v8::internal::NewLargeObjectSpace"*, %"class.v8::internal::ReadOnlySpace"*, %"class.v8::internal::OldSpace"*, %"class.v8::internal::MapSpace"*, %"class.std::__1::unique_ptr.146", %"class.std::__1::unique_ptr.146", [8 x %"class.v8::internal::Space"*], %"class.v8::internal::LocalHeap"*, %"class.v8::internal::ArrayBufferExtension"*, %"class.v8::internal::ArrayBufferExtension"*, i8, i64, %"struct.std::__1::atomic.161", i32, i32, i32, i32, %"class.v8::internal::AllocationObserver"*, %"class.v8::internal::StressScavengeObserver"*, double, i32, i32, i32, i64, i32, [128 x i64], %"struct.std::__1::atomic.19", i64, i8, %"struct.std::__1::atomic.19", %"class.v8::internal::Object", %"class.v8::internal::Object", %"class.v8::internal::Object", %"class.std::__1::vector.165", %"class.std::__1::vector.165", i64 ()*, [113 x i32], i64, double, double, i64, i64, double, i32, i32, i32, i32, double, double, double, %"class.std::__1::unique_ptr.172", %"class.std::__1::unique_ptr.178", %"class.v8::internal::MinorMarkCompactCollector"*, %"class.std::__1::unique_ptr.308", %"class.std::__1::unique_ptr.314", %"class.std::__1::unique_ptr.320", %"class.std::__1::unique_ptr.359", %"class.std::__1::unique_ptr.398", %"class.std::__1::unique_ptr.428", %"class.std::__1::unique_ptr.434", %"class.std::__1::unique_ptr.444", %"class.std::__1::unique_ptr.450", %"class.std::__1::unique_ptr.450", %"class.std::__1::unique_ptr.456", %"class.std::__1::unique_ptr.462", %"class.std::__1::unique_ptr.462", %"class.std::__1::unique_ptr.468", %"class.std::__1::unique_ptr.474", %"class.std::__1::shared_ptr.480", %"class.v8::CppHeap"*, %"class.v8::EmbedderRootsHandler"*, %"class.v8::internal::StrongRootsEntry"*, %"class.v8::base::Mutex", i8, i64, i64, i64, i64, %"class.std::__1::unordered_map.503", %"class.std::__1::unique_ptr.529", [512 x i8], i8, i8, i64, i8, i32, i32, %"class.std::__1::unique_ptr.535", i8, %"class.v8::internal::Heap::ExternalStringTable", %"class.v8::base::Mutex", %"class.std::__1::unique_ptr.548", i32, i8, i8, i8, i8, i8, %"class.v8::internal::HeapObject", %"class.v8::base::SharedMutex", %"class.v8::base::Mutex", %"class.std::__1::unordered_set.330", i8, [7 x i8], %"class.std::__1::unordered_map.554", %"class.std::__1::unordered_map.580", %"class.std::__1::unordered_map.554", %"class.std::__1::unordered_map.604", %"class.std::__1::vector.632", i8, %"class.std::__1::unique_ptr.639", i32, i32 }
%"class.std::__1::unordered_map" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.2", %"class.std::__1::__compressed_pair.9", %"class.std::__1::__compressed_pair.14", %"class.std::__1::__compressed_pair.16", [4 x i8] }>
%"class.std::__1::unique_ptr.2" = type { %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4", %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.5" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.6" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { i64 }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::__compressed_pair_elem.17" = type { float }
%"class.v8::internal::Heap::ExternalMemoryAccounting" = type { %"struct.std::__1::atomic.24", %"struct.std::__1::atomic.24", %"struct.std::__1::atomic.24" }
%"struct.std::__1::atomic.24" = type { %"struct.std::__1::__atomic_base.25" }
%"struct.std::__1::__atomic_base.25" = type { %"struct.std::__1::__atomic_base.26" }
%"struct.std::__1::__atomic_base.26" = type { %"struct.std::__1::__cxx_atomic_impl.27" }
%"struct.std::__1::__cxx_atomic_impl.27" = type { %"struct.std::__1::__cxx_atomic_base_impl.28" }
%"struct.std::__1::__cxx_atomic_base_impl.28" = type { i64 }
%"class.v8::internal::Isolate" = type { %"class.v8::internal::IsolateData", %"class.std::__1::unique_ptr", %"class.v8::internal::Heap", %"class.v8::internal::ReadOnlyHeap"*, %"class.std::__1::shared_ptr.645", %"class.std::__1::unique_ptr.666", i32, %"class.v8::internal::Isolate::EntryStackItem"*, i32, %"class.v8::internal::StringStream"*, [13 x i64], %"class.v8::internal::Bootstrapper"*, %"class.v8::internal::RuntimeProfiler"*, %"class.v8::internal::CompilationCache"*, %"class.std::__1::shared_ptr.676", %"class.v8::base::RecursiveMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::internal::Logger"*, %"class.v8::internal::StubCache"*, %"class.v8::internal::StubCache"*, %"class.v8::internal::Deoptimizer"*, i8, %"class.v8::internal::MaterializedObjectStore"*, i8, i32, i32, %"class.v8::internal::DescriptorLookupCache"*, %"struct.v8::internal::HandleScopeData", %"class.v8::internal::HandleScopeImplementer"*, %"class.v8::internal::UnicodeCache"*, %"class.v8::internal::AccountingAllocator"*, %"class.v8::internal::InnerPointerToCodeCache"*, %"class.v8::internal::GlobalHandles"*, %"class.v8::internal::EternalHandles"*, %"class.v8::internal::ThreadManager"*, %"class.v8::bigint::Processor"*, %"class.v8::internal::RuntimeState", %"class.v8::internal::Builtins", %"class.v8::internal::SetupIsolateDelegate"*, %"class.v8::internal::RegExpStack"*, %"class.std::__1::vector.815", %"class.v8::internal::DateCache"*, %"class.v8::base::RandomNumberGenerator"*, %"class.v8::base::RandomNumberGenerator"*, %"struct.std::__1::atomic.828", {}*, i8*, void (i32, %"class.v8::Promise"*, %"class.v8::Value"*)*, {}*, {}*, %"struct.std::__1::atomic.838", {}*, %"class.v8::base::Mutex", double, %"class.std::__1::basic_string", %"class.std::__1::unordered_map.849", %"struct.std::__1::atomic.152", i8, i8, i8, i8, i8, i8, double, %"class.v8::internal::Debug"*, %"class.v8::internal::HeapProfiler"*, %"class.std::__1::unique_ptr.924", %"class.v8::internal::AstStringConstants"*, %"class.v8::internal::interpreter::Interpreter"*, %"class.v8::internal::compiler::PerIsolateCompilerCache"*, %"class.v8::internal::Zone"*, %"class.v8::internal::CompilerDispatcher"*, %"class.std::__1::queue", void (i8*, i8*)*, void (i8*, i1)*, void (i8*, i32)*, i1 (%"class.v8::Context"*, %"class.v8::String"*)*, { i8, %"class.v8::String"* } (%"class.v8::Context"*, %"class.v8::Value"*)*, { i8, %"class.v8::String"* } (%"class.v8::Context"*, %"class.v8::Value"*, i1)*, i1 (%"class.v8::Context"*, %"class.v8::String"*)*, i1 (%"class.v8::FunctionCallbackInfo"*)*, i1 (%"class.v8::FunctionCallbackInfo"*)*, i1 (%"class.v8::Context"*)*, void (%"class.v8::FunctionCallbackInfo"*)*, %"class.v8::String"* (%"class.v8::Isolate"*, i8*)*, i1 (%"class.v8::Context"*)*, i1 (%"class.v8::Context"*)*, %"class.v8::internal::Relocatable"*, %"class.std::__1::vector.967"*, %"class.v8::internal::Object", i64*, %"class.v8::internal::AddressToIndexHashMap"*, %"class.v8::internal::HeapObjectToIndexHashMap"*, %"class.v8::internal::MicrotaskQueue"*, %"class.v8::internal::CompilationStatistics"*, %"class.v8::internal::CodeTracer"*, i32, void (%"class.v8::PromiseRejectMessage"*)*, %"class.v8::StartupData"*, i32, i32, i32, i64, i8, i8, i32, i8, i32, %"class.v8_inspector::V8Inspector"*, i8, i8, i8, i32, i32, %"class.v8::internal::compiler::NodeObserver"*, i8, [128 x i32], [256 x i32], [251 x i32], [251 x i32], %"class.v8::internal::OptimizingCompileDispatcher"*, %"class.std::__1::unique_ptr.975", i32, i8, i8, i32, i32, %"class.std::__1::vector.981", %"class.std::__1::vector.981", void (%"class.v8::Isolate"*, i32)*, %"class.std::__1::shared_ptr.988", i64, %"class.std::__1::unordered_map.989", i64, %"struct.v8::metrics::LongTaskStats", %"class.std::__1::vector.541", %"class.v8::internal::BuiltinsConstantsTableBuilder"*, i8*, i32, i8*, i32, %"class.v8::ArrayBuffer::Allocator"*, %"class.std::__1::shared_ptr.160", %"class.v8::internal::FutexWaitListNode", %"class.v8::internal::CancelableTaskManager"*, %"class.v8::debug::ConsoleDelegate"*, %"class.v8::debug::AsyncEventDelegate"*, i32, i32, %"class.std::__1::unique_ptr.1045", i1 (%"class.v8::Isolate"*)*, i8, %"class.v8::base::Mutex", %"struct.v8::internal::ManagedPtrDestructor"*, i64, i64, %"class.v8::internal::wasm::WasmEngine"*, %"class.std::__1::unique_ptr.1083", %"class.v8::internal::EmbeddedFileWriterInterface"*, %"class.v8::Context::BackupIncumbentScope"*, {}*, %"class.v8::base::Mutex", %"class.v8::internal::Isolate::ThreadDataTable", i8, %"class.v8::internal::Isolate"*, %"class.v8::base::Mutex", %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"*, %"struct.std::__1::atomic.1117", %"class.std::__1::vector.1121", %"class.std::__1::vector.1121", void (i32, %"class.std::__1::basic_string"*)* }
%"class.v8::internal::IsolateData" = type { [4 x i8*], i64, i64, i64, i64, i64, %"class.v8::internal::StackGuard", %"class.v8::internal::RootsTable", %"class.v8::internal::ExternalReferenceTable", %"class.v8::internal::ThreadLocalTop", [1711 x i64], [1711 x i64], i8, [15 x i8] }
%"class.v8::internal::StackGuard" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::StackGuard::ThreadLocal" }
%"class.v8::internal::StackGuard::ThreadLocal" = type { i64, i64, i64, i64, %"class.v8::internal::InterruptsScope"*, i64 }
%"class.v8::internal::InterruptsScope" = type { i32 (...)**, %"class.v8::internal::StackGuard"*, i64, i64, i32, %"class.v8::internal::InterruptsScope"* }
%"class.v8::internal::RootsTable" = type { [669 x i64] }
%"class.v8::internal::ExternalReferenceTable" = type { [1042 x i64], i32, i32 }
%"class.v8::internal::ThreadLocalTop" = type { %"class.v8::TryCatch"*, %"class.v8::internal::Isolate"*, %"class.v8::internal::Context", %"struct.std::__1::atomic", %"class.v8::internal::Object", %"class.v8::internal::Context", i64, i64, i64, i64, i64, %"class.v8::internal::Object", i8, i8, %"class.v8::internal::Object", i64, i64, i64, %"class.v8::internal::PromiseOnStack"*, %"class.v8::internal::Simulator"*, i64, %"class.v8::internal::ExternalCallbackScope"*, i32, void (%"class.v8::Object"*, i32, %"class.v8::Value"*)*, i64 }
%"class.v8::TryCatch" = type <{ %"class.v8::internal::Isolate"*, %"class.v8::TryCatch"*, i8*, i8*, i8*, i8, [7 x i8] }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { %"class.v8::internal::ThreadId" }
%"class.v8::internal::ThreadId" = type { i32 }
%"class.v8::internal::Context" = type { %"class.v8::internal::TorqueGeneratedContext" }
%"class.v8::internal::TorqueGeneratedContext" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::PromiseOnStack" = type { %"class.v8::internal::Handle", %"class.v8::internal::PromiseOnStack"* }
%"class.v8::internal::Handle" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::HandleBase" = type { i64* }
%"class.v8::internal::Simulator" = type opaque
%"class.v8::internal::ExternalCallbackScope" = type opaque
%"class.v8::Object" = type { i8 }
%"class.v8::Value" = type { i8 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.v8::internal::IsolateAllocator"* }
%"class.v8::internal::IsolateAllocator" = type { i8*, %"class.v8::PageAllocator"* }
%"class.v8::PageAllocator" = type { i32 (...)** }
%"class.std::__1::shared_ptr.645" = type { %"class.v8::internal::ReadOnlyArtifacts"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::ReadOnlyArtifacts" = type { i32 (...)**, %"class.std::__1::vector.139", %"class.v8::internal::AllocationStats", %"class.std::__1::unique_ptr.646", %"class.std::__1::unique_ptr.660" }
%"class.std::__1::unique_ptr.646" = type { %"class.std::__1::__compressed_pair.647" }
%"class.std::__1::__compressed_pair.647" = type { %"struct.std::__1::__compressed_pair_elem.648" }
%"struct.std::__1::__compressed_pair_elem.648" = type { %"class.v8::internal::SharedReadOnlySpace"* }
%"class.v8::internal::SharedReadOnlySpace" = type { %"class.v8::internal::ReadOnlySpace", %"class.std::__1::vector.649" }
%"class.std::__1::vector.649" = type { %"class.std::__1::__vector_base.650" }
%"class.std::__1::__vector_base.650" = type { %"class.std::__1::unique_ptr.651"*, %"class.std::__1::unique_ptr.651"*, %"class.std::__1::__compressed_pair.652" }
%"class.std::__1::unique_ptr.651" = type { %"class.std::__1::__compressed_pair.1140" }
%"class.std::__1::__compressed_pair.1140" = type { %"struct.std::__1::__compressed_pair_elem.1141" }
%"struct.std::__1::__compressed_pair_elem.1141" = type { %"class.v8::PageAllocator::SharedMemoryMapping"* }
%"class.v8::PageAllocator::SharedMemoryMapping" = type { i32 (...)** }
%"class.std::__1::__compressed_pair.652" = type { %"struct.std::__1::__compressed_pair_elem.653" }
%"struct.std::__1::__compressed_pair_elem.653" = type { %"class.std::__1::unique_ptr.651"* }
%"class.std::__1::unique_ptr.660" = type { %"class.std::__1::__compressed_pair.661" }
%"class.std::__1::__compressed_pair.661" = type { %"struct.std::__1::__compressed_pair_elem.662" }
%"struct.std::__1::__compressed_pair_elem.662" = type { %"class.v8::internal::ReadOnlyHeap"* }
%"class.std::__1::__shared_weak_count" = type { %"class.std::__1::__shared_count", i64 }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"class.std::__1::unique_ptr.666" = type { %"class.std::__1::__compressed_pair.667" }
%"class.std::__1::__compressed_pair.667" = type { %"struct.std::__1::__compressed_pair_elem.668" }
%"struct.std::__1::__compressed_pair_elem.668" = type { %"class.v8::internal::StringTable"* }
%"class.v8::internal::StringTable" = type { %"struct.std::__1::atomic.669", %"class.v8::base::Mutex" }
%"struct.std::__1::atomic.669" = type { %"struct.std::__1::__atomic_base.670" }
%"struct.std::__1::__atomic_base.670" = type { %"struct.std::__1::__cxx_atomic_impl.671" }
%"struct.std::__1::__cxx_atomic_impl.671" = type { %"struct.std::__1::__cxx_atomic_base_impl.672" }
%"struct.std::__1::__cxx_atomic_base_impl.672" = type { %"class.v8::internal::StringTable::Data"* }
%"class.v8::internal::StringTable::Data" = type opaque
%"class.v8::internal::Isolate::EntryStackItem" = type { i32, %"class.v8::internal::Isolate::PerIsolateThreadData"*, %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate::EntryStackItem"* }
%"class.v8::internal::Isolate::PerIsolateThreadData" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::ThreadId", i64, %"class.v8::internal::ThreadState"* }
%"class.v8::internal::ThreadState" = type opaque
%"class.v8::internal::StringStream" = type opaque
%"class.v8::internal::Bootstrapper" = type { %"class.v8::internal::Isolate"*, i32, %"class.v8::internal::SourceCodeCache" }
%"class.v8::internal::SourceCodeCache" = type { i32, %"class.v8::internal::FixedArray" }
%"class.v8::internal::FixedArray" = type { %"class.v8::internal::TorqueGeneratedFixedArray" }
%"class.v8::internal::TorqueGeneratedFixedArray" = type { %"class.v8::internal::FixedArrayBase" }
%"class.v8::internal::FixedArrayBase" = type { %"class.v8::internal::TorqueGeneratedFixedArrayBase" }
%"class.v8::internal::TorqueGeneratedFixedArrayBase" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::RuntimeProfiler" = type opaque
%"class.v8::internal::CompilationCache" = type opaque
%"class.std::__1::shared_ptr.676" = type { %"class.v8::internal::Counters"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::Counters" = type { %"class.std::__1::enable_shared_from_this", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::AggregatableHistogramTimer", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounterThreadSafe", %"class.v8::internal::StatsCounterThreadSafe", %"class.v8::internal::StatsCounterThreadSafe", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::RuntimeCallStats", %"class.v8::internal::WorkerThreadRuntimeCallStats", %"class.v8::internal::Isolate"*, %"class.v8::internal::StatsTable" }
%"class.std::__1::enable_shared_from_this" = type { %"class.std::__1::weak_ptr" }
%"class.std::__1::weak_ptr" = type { %"class.v8::internal::Counters"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::HistogramTimer" = type { %"class.v8::internal::TimedHistogram.base", %"class.v8::base::ElapsedTimer" }
%"class.v8::internal::TimedHistogram.base" = type <{ %"class.v8::internal::Histogram", i32 }>
%"class.v8::base::ElapsedTimer" = type { %"class.v8::base::TimeTicks" }
%"class.v8::base::TimeTicks" = type { %"class.v8::base::time_internal::TimeBase" }
%"class.v8::base::time_internal::TimeBase" = type { i64 }
%"class.v8::internal::TimedHistogram" = type <{ %"class.v8::internal::Histogram", i32, [4 x i8] }>
%"class.v8::internal::AggregatableHistogramTimer" = type { %"class.v8::internal::Histogram", %"class.v8::base::TimeDelta" }
%"class.v8::base::TimeDelta" = type { i64 }
%"class.v8::internal::Histogram" = type { i8*, i32, i32, i32, i8*, %"class.v8::internal::Counters"* }
%"class.v8::internal::StatsCounterThreadSafe" = type { %"class.v8::internal::StatsCounterBase", %"class.v8::base::Mutex" }
%"class.v8::internal::StatsCounterBase" = type { %"class.v8::internal::Counters"*, i8*, i32* }
%"class.v8::internal::StatsCounter" = type <{ %"class.v8::internal::StatsCounterBase", i8, [7 x i8] }>
%"class.v8::internal::RuntimeCallStats" = type { %"class.v8::base::AtomicValue", %"class.v8::base::AtomicValue.677", i8, i32, %"class.v8::internal::ThreadId", [1370 x %"class.v8::internal::RuntimeCallCounter"] }
%"class.v8::base::AtomicValue" = type { i64 }
%"class.v8::base::AtomicValue.677" = type { i64 }
%"class.v8::internal::RuntimeCallCounter" = type { i8*, i64, i64 }
%"class.v8::internal::WorkerThreadRuntimeCallStats" = type <{ %"class.v8::base::Mutex", %"class.std::__1::vector.678", %"class.v8::base::Optional", %"class.v8::internal::ThreadId", [4 x i8] }>
%"class.std::__1::vector.678" = type { %"class.std::__1::__vector_base.679" }
%"class.std::__1::__vector_base.679" = type { %"class.std::__1::unique_ptr.680"*, %"class.std::__1::unique_ptr.680"*, %"class.std::__1::__compressed_pair.681" }
%"class.std::__1::unique_ptr.680" = type opaque
%"class.std::__1::__compressed_pair.681" = type { %"struct.std::__1::__compressed_pair_elem.682" }
%"struct.std::__1::__compressed_pair_elem.682" = type { %"class.std::__1::unique_ptr.680"* }
%"class.v8::base::Optional" = type { %"class.v8::base::internal::OptionalBase" }
%"class.v8::base::internal::OptionalBase" = type { %"struct.v8::base::internal::OptionalStorage" }
%"struct.v8::base::internal::OptionalStorage" = type { %"struct.v8::base::internal::OptionalStorageBase" }
%"struct.v8::base::internal::OptionalStorageBase" = type { i8, %union.anon }
%union.anon = type { i32 }
%"class.v8::internal::StatsTable" = type { i32* (i8*)*, i8* (i8*, i32, i32, i64)*, void (i8*, i32)* }
%"class.v8::base::RecursiveMutex" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.v8::internal::Logger" = type { %"class.v8::internal::CodeEventListener", %"class.v8::internal::Isolate"*, %"class.std::__1::unique_ptr.686", %"class.std::__1::unique_ptr.692", %"struct.std::__1::atomic.152", %"class.std::__1::unique_ptr.698", %"class.std::__1::unique_ptr.704", %"class.std::__1::unique_ptr.710", %"class.std::__1::unique_ptr.716", %"class.std::__1::unique_ptr.722", %"class.std::__1::set.728", i32, i8, %"class.v8::internal::ExistingCodeLogger", %"class.v8::base::ElapsedTimer" }
%"class.v8::internal::CodeEventListener" = type { i32 (...)** }
%"class.std::__1::unique_ptr.686" = type { %"class.std::__1::__compressed_pair.687" }
%"class.std::__1::__compressed_pair.687" = type { %"struct.std::__1::__compressed_pair_elem.688" }
%"struct.std::__1::__compressed_pair_elem.688" = type { %"class.v8::internal::Ticker"* }
%"class.v8::internal::Ticker" = type opaque
%"class.std::__1::unique_ptr.692" = type { %"class.std::__1::__compressed_pair.693" }
%"class.std::__1::__compressed_pair.693" = type { %"struct.std::__1::__compressed_pair_elem.694" }
%"struct.std::__1::__compressed_pair_elem.694" = type { %"class.v8::internal::Profiler"* }
%"class.v8::internal::Profiler" = type opaque
%"class.std::__1::unique_ptr.698" = type { %"class.std::__1::__compressed_pair.699" }
%"class.std::__1::__compressed_pair.699" = type { %"struct.std::__1::__compressed_pair_elem.700" }
%"struct.std::__1::__compressed_pair_elem.700" = type { %"class.v8::internal::Log"* }
%"class.v8::internal::Log" = type opaque
%"class.std::__1::unique_ptr.704" = type { %"class.std::__1::__compressed_pair.705" }
%"class.std::__1::__compressed_pair.705" = type { %"struct.std::__1::__compressed_pair_elem.706" }
%"struct.std::__1::__compressed_pair_elem.706" = type { %"class.v8::internal::PerfBasicLogger"* }
%"class.v8::internal::PerfBasicLogger" = type opaque
%"class.std::__1::unique_ptr.710" = type { %"class.std::__1::__compressed_pair.711" }
%"class.std::__1::__compressed_pair.711" = type { %"struct.std::__1::__compressed_pair_elem.712" }
%"struct.std::__1::__compressed_pair_elem.712" = type { %"class.v8::internal::PerfJitLogger"* }
%"class.v8::internal::PerfJitLogger" = type opaque
%"class.std::__1::unique_ptr.716" = type { %"class.std::__1::__compressed_pair.717" }
%"class.std::__1::__compressed_pair.717" = type { %"struct.std::__1::__compressed_pair_elem.718" }
%"struct.std::__1::__compressed_pair_elem.718" = type { %"class.v8::internal::LowLevelLogger"* }
%"class.v8::internal::LowLevelLogger" = type opaque
%"class.std::__1::unique_ptr.722" = type { %"class.std::__1::__compressed_pair.723" }
%"class.std::__1::__compressed_pair.723" = type { %"struct.std::__1::__compressed_pair_elem.724" }
%"struct.std::__1::__compressed_pair_elem.724" = type { %"class.v8::internal::JitLogger"* }
%"class.v8::internal::JitLogger" = type opaque
%"class.std::__1::set.728" = type { %"class.std::__1::__tree.729" }
%"class.std::__1::__tree.729" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.730", %"class.std::__1::__compressed_pair.734" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.730" = type { %"struct.std::__1::__compressed_pair_elem.80" }
%"struct.std::__1::__compressed_pair_elem.80" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.734" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.v8::internal::ExistingCodeLogger" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::CodeEventListener"* }
%"class.v8::internal::StubCache" = type { [2048 x %"struct.v8::internal::StubCache::Entry"], [512 x %"struct.v8::internal::StubCache::Entry"], %"class.v8::internal::Isolate"* }
%"struct.v8::internal::StubCache::Entry" = type { %"class.v8::internal::StrongTaggedValue", %"class.v8::internal::TaggedValue", %"class.v8::internal::StrongTaggedValue" }
%"class.v8::internal::TaggedValue" = type { %"class.v8::internal::TaggedImpl.737" }
%"class.v8::internal::TaggedImpl.737" = type { i32 }
%"class.v8::internal::StrongTaggedValue" = type { %"class.v8::internal::TaggedImpl.736" }
%"class.v8::internal::TaggedImpl.736" = type { i32 }
%"class.v8::internal::Deoptimizer" = type opaque
%"class.v8::internal::MaterializedObjectStore" = type opaque
%"class.v8::internal::DescriptorLookupCache" = type { [64 x %"struct.v8::internal::DescriptorLookupCache::Key"], [64 x i32] }
%"struct.v8::internal::DescriptorLookupCache::Key" = type { %"class.v8::internal::Map", %"class.v8::internal::Name" }
%"class.v8::internal::Map" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::Name" = type { %"class.v8::internal::TorqueGeneratedName" }
%"class.v8::internal::TorqueGeneratedName" = type { %"class.v8::internal::PrimitiveHeapObject" }
%"class.v8::internal::PrimitiveHeapObject" = type { %"class.v8::internal::TorqueGeneratedPrimitiveHeapObject" }
%"class.v8::internal::TorqueGeneratedPrimitiveHeapObject" = type { %"class.v8::internal::HeapObject" }
%"struct.v8::internal::HandleScopeData" = type { i64*, i64*, i32, i32, %"class.v8::internal::CanonicalHandleScope"* }
%"class.v8::internal::CanonicalHandleScope" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::OptimizedCompilationInfo"*, %"class.v8::internal::Zone"*, %"class.v8::internal::RootIndexMap"*, %"class.std::__1::unique_ptr.744", i32, %"class.v8::internal::CanonicalHandleScope"* }
%"class.v8::internal::OptimizedCompilationInfo" = type opaque
%"class.v8::internal::RootIndexMap" = type opaque
%"class.std::__1::unique_ptr.744" = type { %"class.std::__1::__compressed_pair.745" }
%"class.std::__1::__compressed_pair.745" = type { %"struct.std::__1::__compressed_pair_elem.746" }
%"struct.std::__1::__compressed_pair_elem.746" = type { %"class.v8::internal::IdentityMap"* }
%"class.v8::internal::IdentityMap" = type opaque
%"class.v8::internal::HandleScopeImplementer" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::DetachableVector", %"class.v8::internal::DetachableVector.750", %"class.v8::internal::DetachableVector.751", %"class.v8::internal::DetachableVector.750", i64*, i64*, %"struct.v8::internal::HandleScopeData" }
%"class.v8::internal::DetachableVector" = type { %"class.v8::internal::DetachableVectorBase" }
%"class.v8::internal::DetachableVectorBase" = type { i8*, i64, i64 }
%"class.v8::internal::DetachableVector.751" = type { %"class.v8::internal::DetachableVectorBase" }
%"class.v8::internal::DetachableVector.750" = type { %"class.v8::internal::DetachableVectorBase" }
%"class.v8::internal::UnicodeCache" = type opaque
%"class.v8::internal::AccountingAllocator" = type { i32 (...)**, %"struct.std::__1::atomic.19", %"struct.std::__1::atomic.19", %"class.std::__1::unique_ptr.738", %"class.std::__1::unique_ptr.481" }
%"class.std::__1::unique_ptr.738" = type { %"class.std::__1::__compressed_pair.739" }
%"class.std::__1::__compressed_pair.739" = type { %"struct.std::__1::__compressed_pair_elem.740" }
%"struct.std::__1::__compressed_pair_elem.740" = type { %"class.v8::internal::VirtualMemory"* }
%"class.v8::internal::VirtualMemory" = type { %"class.v8::PageAllocator"*, %"class.v8::base::AddressRegion" }
%"class.v8::base::AddressRegion" = type { i64, i64 }
%"class.std::__1::unique_ptr.481" = type { %"class.std::__1::__compressed_pair.482" }
%"class.std::__1::__compressed_pair.482" = type { %"struct.std::__1::__compressed_pair_elem.483" }
%"struct.std::__1::__compressed_pair_elem.483" = type { %"class.v8::base::BoundedPageAllocator"* }
%"class.v8::base::BoundedPageAllocator" = type { %"class.v8::PageAllocator", %"class.v8::base::Mutex", i64, i64, %"class.v8::PageAllocator"*, %"class.v8::base::RegionAllocator" }
%"class.v8::base::RegionAllocator" = type { %"class.v8::base::RegionAllocator::Region", i64, i64, i64, i64, %"class.std::__1::set.484", %"class.std::__1::set.492" }
%"class.v8::base::RegionAllocator::Region" = type <{ %"class.v8::base::AddressRegion", i32, [4 x i8] }>
%"class.std::__1::set.484" = type { %"class.std::__1::__tree.485" }
%"class.std::__1::__tree.485" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.486", %"class.std::__1::__compressed_pair.490" }
%"class.std::__1::__compressed_pair.486" = type { %"struct.std::__1::__compressed_pair_elem.80" }
%"class.std::__1::__compressed_pair.490" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::set.492" = type { %"class.std::__1::__tree.493" }
%"class.std::__1::__tree.493" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.486", %"class.std::__1::__compressed_pair.494" }
%"class.std::__1::__compressed_pair.494" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.v8::internal::InnerPointerToCodeCache" = type opaque
%"class.v8::internal::GlobalHandles" = type { %"class.v8::internal::Isolate"*, %"class.std::__1::unique_ptr.752", %"class.std::__1::vector.758", %"class.std::__1::unique_ptr.765", %"class.std::__1::vector.772", %"class.std::__1::unique_ptr.779", i64, %"class.std::__1::vector.785", %"class.std::__1::vector.793", %"class.std::__1::vector.801", i8, i8, i32 }
%"class.std::__1::unique_ptr.752" = type { %"class.std::__1::__compressed_pair.753" }
%"class.std::__1::__compressed_pair.753" = type { %"struct.std::__1::__compressed_pair_elem.754" }
%"struct.std::__1::__compressed_pair_elem.754" = type { %"class.v8::internal::GlobalHandles::NodeSpace"* }
%"class.v8::internal::GlobalHandles::NodeSpace" = type opaque
%"class.std::__1::vector.758" = type { %"class.std::__1::__vector_base.759" }
%"class.std::__1::__vector_base.759" = type { %"class.v8::internal::GlobalHandles::Node"**, %"class.v8::internal::GlobalHandles::Node"**, %"class.std::__1::__compressed_pair.760" }
%"class.v8::internal::GlobalHandles::Node" = type opaque
%"class.std::__1::__compressed_pair.760" = type { %"struct.std::__1::__compressed_pair_elem.761" }
%"struct.std::__1::__compressed_pair_elem.761" = type { %"class.v8::internal::GlobalHandles::Node"** }
%"class.std::__1::unique_ptr.765" = type { %"class.std::__1::__compressed_pair.766" }
%"class.std::__1::__compressed_pair.766" = type { %"struct.std::__1::__compressed_pair_elem.767" }
%"struct.std::__1::__compressed_pair_elem.767" = type { %"class.v8::internal::GlobalHandles::NodeSpace.768"* }
%"class.v8::internal::GlobalHandles::NodeSpace.768" = type opaque
%"class.std::__1::vector.772" = type { %"class.std::__1::__vector_base.773" }
%"class.std::__1::__vector_base.773" = type { %"class.v8::internal::GlobalHandles::TracedNode"**, %"class.v8::internal::GlobalHandles::TracedNode"**, %"class.std::__1::__compressed_pair.774" }
%"class.v8::internal::GlobalHandles::TracedNode" = type opaque
%"class.std::__1::__compressed_pair.774" = type { %"struct.std::__1::__compressed_pair_elem.775" }
%"struct.std::__1::__compressed_pair_elem.775" = type { %"class.v8::internal::GlobalHandles::TracedNode"** }
%"class.std::__1::unique_ptr.779" = type { %"class.std::__1::__compressed_pair.780" }
%"class.std::__1::__compressed_pair.780" = type { %"struct.std::__1::__compressed_pair_elem.781" }
%"struct.std::__1::__compressed_pair_elem.781" = type { %"class.v8::internal::GlobalHandles::OnStackTracedNodeSpace"* }
%"class.v8::internal::GlobalHandles::OnStackTracedNodeSpace" = type opaque
%"class.std::__1::vector.785" = type { %"class.std::__1::__vector_base.786" }
%"class.std::__1::__vector_base.786" = type { %"struct.std::__1::pair.787"*, %"struct.std::__1::pair.787"*, %"class.std::__1::__compressed_pair.788" }
%"struct.std::__1::pair.787" = type opaque
%"class.std::__1::__compressed_pair.788" = type { %"struct.std::__1::__compressed_pair_elem.789" }
%"struct.std::__1::__compressed_pair_elem.789" = type { %"struct.std::__1::pair.787"* }
%"class.std::__1::vector.793" = type { %"class.std::__1::__vector_base.794" }
%"class.std::__1::__vector_base.794" = type { %"struct.std::__1::pair.795"*, %"struct.std::__1::pair.795"*, %"class.std::__1::__compressed_pair.796" }
%"struct.std::__1::pair.795" = type opaque
%"class.std::__1::__compressed_pair.796" = type { %"struct.std::__1::__compressed_pair_elem.797" }
%"struct.std::__1::__compressed_pair_elem.797" = type { %"struct.std::__1::pair.795"* }
%"class.std::__1::vector.801" = type { %"class.std::__1::__vector_base.802" }
%"class.std::__1::__vector_base.802" = type { %"class.v8::internal::GlobalHandles::PendingPhantomCallback"*, %"class.v8::internal::GlobalHandles::PendingPhantomCallback"*, %"class.std::__1::__compressed_pair.803" }
%"class.v8::internal::GlobalHandles::PendingPhantomCallback" = type { void (%"class.v8::WeakCallbackInfo"*)*, i8*, [2 x i8*] }
%"class.v8::WeakCallbackInfo" = type { %"class.v8::Isolate"*, i8*, {}**, [2 x i8*] }
%"class.v8::Isolate" = type { i8 }
%"class.std::__1::__compressed_pair.803" = type { %"struct.std::__1::__compressed_pair_elem.804" }
%"struct.std::__1::__compressed_pair_elem.804" = type { %"class.v8::internal::GlobalHandles::PendingPhantomCallback"* }
%"class.v8::internal::EternalHandles" = type { i32, %"class.std::__1::vector.808", %"class.std::__1::vector.815" }
%"class.std::__1::vector.808" = type { %"class.std::__1::__vector_base.809" }
%"class.std::__1::__vector_base.809" = type { i64**, i64**, %"class.std::__1::__compressed_pair.810" }
%"class.std::__1::__compressed_pair.810" = type { %"struct.std::__1::__compressed_pair_elem.811" }
%"struct.std::__1::__compressed_pair_elem.811" = type { i64** }
%"class.v8::internal::ThreadManager" = type opaque
%"class.v8::bigint::Processor" = type opaque
%"class.v8::internal::RuntimeState" = type { %"class.std::__1::unique_ptr.822" }
%"class.std::__1::unique_ptr.822" = type { %"class.std::__1::__compressed_pair.823" }
%"class.std::__1::__compressed_pair.823" = type { %"struct.std::__1::__compressed_pair_elem.824" }
%"struct.std::__1::__compressed_pair_elem.824" = type { %"struct.v8::internal::Runtime::Function"* }
%"struct.v8::internal::Runtime::Function" = type { i32, i32, i8*, i64, i8, i8 }
%"class.v8::internal::Builtins" = type { %"class.v8::internal::Isolate"*, i8, i32 }
%"class.v8::internal::SetupIsolateDelegate" = type opaque
%"class.v8::internal::RegExpStack" = type opaque
%"class.std::__1::vector.815" = type { %"class.std::__1::__vector_base.816" }
%"class.std::__1::__vector_base.816" = type { i32*, i32*, %"class.std::__1::__compressed_pair.817" }
%"class.std::__1::__compressed_pair.817" = type { %"struct.std::__1::__compressed_pair_elem.818" }
%"struct.std::__1::__compressed_pair_elem.818" = type { i32* }
%"class.v8::internal::DateCache" = type opaque
%"class.v8::base::RandomNumberGenerator" = type { i64, i64, i64 }
%"struct.std::__1::atomic.828" = type { %"struct.std::__1::__atomic_base.829" }
%"struct.std::__1::__atomic_base.829" = type { %"struct.std::__1::__cxx_atomic_impl.830" }
%"struct.std::__1::__cxx_atomic_impl.830" = type { %"struct.std::__1::__cxx_atomic_base_impl.831" }
%"struct.std::__1::__cxx_atomic_base_impl.831" = type { i32 }
%"class.v8::Promise" = type { i8 }
%"struct.std::__1::atomic.838" = type { %"struct.std::__1::__atomic_base.839" }
%"struct.std::__1::__atomic_base.839" = type { %"struct.std::__1::__cxx_atomic_impl.840" }
%"struct.std::__1::__cxx_atomic_impl.840" = type { %"struct.std::__1::__cxx_atomic_base_impl.841" }
%"struct.std::__1::__cxx_atomic_base_impl.841" = type { i32 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.843" }
%"class.std::__1::__compressed_pair.843" = type { %"struct.std::__1::__compressed_pair_elem.844" }
%"struct.std::__1::__compressed_pair_elem.844" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.845 }
%union.anon.845 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::unordered_map.849" = type { %"class.std::__1::__hash_table.850" }
%"class.std::__1::__hash_table.850" = type <{ %"class.std::__1::unique_ptr.851", %"class.std::__1::__compressed_pair.861", %"class.std::__1::__compressed_pair.866", %"class.std::__1::__compressed_pair.869", [4 x i8] }>
%"class.std::__1::unique_ptr.851" = type { %"class.std::__1::__compressed_pair.852" }
%"class.std::__1::__compressed_pair.852" = type { %"struct.std::__1::__compressed_pair_elem.853", %"struct.std::__1::__compressed_pair_elem.855" }
%"struct.std::__1::__compressed_pair_elem.853" = type { %"struct.std::__1::__hash_node_base.854"** }
%"struct.std::__1::__hash_node_base.854" = type { %"struct.std::__1::__hash_node_base.854"* }
%"struct.std::__1::__compressed_pair_elem.855" = type { %"class.std::__1::__bucket_list_deallocator.856" }
%"class.std::__1::__bucket_list_deallocator.856" = type { %"class.std::__1::__compressed_pair.857" }
%"class.std::__1::__compressed_pair.857" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.861" = type { %"struct.std::__1::__compressed_pair_elem.862" }
%"struct.std::__1::__compressed_pair_elem.862" = type { %"struct.std::__1::__hash_node_base.854" }
%"class.std::__1::__compressed_pair.866" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.869" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::atomic.152" = type { %"struct.std::__1::__atomic_base.153" }
%"struct.std::__1::__atomic_base.153" = type { %"struct.std::__1::__cxx_atomic_impl.154" }
%"struct.std::__1::__cxx_atomic_impl.154" = type { %"struct.std::__1::__cxx_atomic_base_impl.155" }
%"struct.std::__1::__cxx_atomic_base_impl.155" = type { i8 }
%"class.v8::internal::Debug" = type { %"class.v8::debug::DebugDelegate"*, i8, i8, i8, i8, i8, i8, i8, i8, i8, %"class.v8::internal::DebugInfoListNode"*, %"class.std::__1::unique_ptr.875", %"class.v8::internal::Handle.881", %"class.v8::internal::DebugFeatureTracker", %"class.v8::internal::Debug::ThreadLocal", %"class.v8::internal::Handle.882", %"class.v8::internal::Isolate"* }
%"class.v8::debug::DebugDelegate" = type { i32 (...)** }
%"class.v8::internal::DebugInfoListNode" = type { i64*, %"class.v8::internal::DebugInfoListNode"* }
%"class.std::__1::unique_ptr.875" = type { %"class.std::__1::__compressed_pair.876" }
%"class.std::__1::__compressed_pair.876" = type { %"struct.std::__1::__compressed_pair_elem.877" }
%"struct.std::__1::__compressed_pair_elem.877" = type { %"class.v8::internal::Debug::TemporaryObjectsTracker"* }
%"class.v8::internal::Debug::TemporaryObjectsTracker" = type opaque
%"class.v8::internal::Handle.881" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::DebugFeatureTracker" = type <{ %"class.v8::internal::Isolate"*, i32, [4 x i8] }>
%"class.v8::internal::Debug::ThreadLocal" = type <{ i64, i32, i8, [3 x i8], %"class.v8::internal::Object", i8, [3 x i8], i32, i32, i32, %"class.v8::internal::Object", %"class.v8::internal::Object", i32, i8, [3 x i8] }>
%"class.v8::internal::Handle.882" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::HeapProfiler" = type { %"class.v8::internal::HeapObjectAllocationTracker", %"class.std::__1::unique_ptr.883", %"class.std::__1::vector.889", %"class.std::__1::unique_ptr.897", %"class.std::__1::unique_ptr.903", i8, i8, %"class.v8::base::Mutex", %"class.std::__1::unique_ptr.909", %"class.std::__1::vector.915", %"struct.std::__1::pair.923" }
%"class.v8::internal::HeapObjectAllocationTracker" = type { i32 (...)** }
%"class.std::__1::unique_ptr.883" = type { %"class.std::__1::__compressed_pair.884" }
%"class.std::__1::__compressed_pair.884" = type { %"struct.std::__1::__compressed_pair_elem.885" }
%"struct.std::__1::__compressed_pair_elem.885" = type { %"class.v8::internal::HeapObjectsMap"* }
%"class.v8::internal::HeapObjectsMap" = type opaque
%"class.std::__1::vector.889" = type { %"class.std::__1::__vector_base.890" }
%"class.std::__1::__vector_base.890" = type { %"class.std::__1::unique_ptr.891"*, %"class.std::__1::unique_ptr.891"*, %"class.std::__1::__compressed_pair.892" }
%"class.std::__1::unique_ptr.891" = type opaque
%"class.std::__1::__compressed_pair.892" = type { %"struct.std::__1::__compressed_pair_elem.893" }
%"struct.std::__1::__compressed_pair_elem.893" = type { %"class.std::__1::unique_ptr.891"* }
%"class.std::__1::unique_ptr.897" = type { %"class.std::__1::__compressed_pair.898" }
%"class.std::__1::__compressed_pair.898" = type { %"struct.std::__1::__compressed_pair_elem.899" }
%"struct.std::__1::__compressed_pair_elem.899" = type { %"class.v8::internal::StringsStorage"* }
%"class.v8::internal::StringsStorage" = type opaque
%"class.std::__1::unique_ptr.903" = type { %"class.std::__1::__compressed_pair.904" }
%"class.std::__1::__compressed_pair.904" = type { %"struct.std::__1::__compressed_pair_elem.905" }
%"struct.std::__1::__compressed_pair_elem.905" = type { %"class.v8::internal::AllocationTracker"* }
%"class.v8::internal::AllocationTracker" = type opaque
%"class.std::__1::unique_ptr.909" = type { %"class.std::__1::__compressed_pair.910" }
%"class.std::__1::__compressed_pair.910" = type { %"struct.std::__1::__compressed_pair_elem.911" }
%"struct.std::__1::__compressed_pair_elem.911" = type { %"class.v8::internal::SamplingHeapProfiler"* }
%"class.v8::internal::SamplingHeapProfiler" = type opaque
%"class.std::__1::vector.915" = type { %"class.std::__1::__vector_base.916" }
%"class.std::__1::__vector_base.916" = type { %"struct.std::__1::pair.917"*, %"struct.std::__1::pair.917"*, %"class.std::__1::__compressed_pair.918" }
%"struct.std::__1::pair.917" = type opaque
%"class.std::__1::__compressed_pair.918" = type { %"struct.std::__1::__compressed_pair_elem.919" }
%"struct.std::__1::__compressed_pair_elem.919" = type { %"struct.std::__1::pair.917"* }
%"struct.std::__1::pair.923" = type { i8 (%"class.v8::Isolate"*, %"class.v8::Local.0"*, i16, i8*)*, i8* }
%"class.v8::Local.0" = type { %"class.v8::Value"* }
%"class.std::__1::unique_ptr.924" = type { %"class.std::__1::__compressed_pair.925" }
%"class.std::__1::__compressed_pair.925" = type { %"struct.std::__1::__compressed_pair_elem.926" }
%"struct.std::__1::__compressed_pair_elem.926" = type { %"class.v8::internal::CodeEventDispatcher"* }
%"class.v8::internal::CodeEventDispatcher" = type { %"class.v8::internal::CodeEventListener", %"class.std::__1::unordered_set.927", %"class.v8::base::Mutex" }
%"class.std::__1::unordered_set.927" = type { %"class.std::__1::__hash_table.928" }
%"class.std::__1::__hash_table.928" = type <{ %"class.std::__1::unique_ptr.929", %"class.std::__1::__compressed_pair.939", %"class.std::__1::__compressed_pair.944", %"class.std::__1::__compressed_pair.948", [4 x i8] }>
%"class.std::__1::unique_ptr.929" = type { %"class.std::__1::__compressed_pair.930" }
%"class.std::__1::__compressed_pair.930" = type { %"struct.std::__1::__compressed_pair_elem.931", %"struct.std::__1::__compressed_pair_elem.933" }
%"struct.std::__1::__compressed_pair_elem.931" = type { %"struct.std::__1::__hash_node_base.932"** }
%"struct.std::__1::__hash_node_base.932" = type { %"struct.std::__1::__hash_node_base.932"* }
%"struct.std::__1::__compressed_pair_elem.933" = type { %"class.std::__1::__bucket_list_deallocator.934" }
%"class.std::__1::__bucket_list_deallocator.934" = type { %"class.std::__1::__compressed_pair.935" }
%"class.std::__1::__compressed_pair.935" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.939" = type { %"struct.std::__1::__compressed_pair_elem.940" }
%"struct.std::__1::__compressed_pair_elem.940" = type { %"struct.std::__1::__hash_node_base.932" }
%"class.std::__1::__compressed_pair.944" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.948" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.v8::internal::AstStringConstants" = type opaque
%"class.v8::internal::interpreter::Interpreter" = type opaque
%"class.v8::internal::compiler::PerIsolateCompilerCache" = type opaque
%"class.v8::internal::Zone" = type <{ i64, i64, i64, i64, %"class.v8::internal::AccountingAllocator"*, %"class.v8::internal::Segment"*, i8*, i8, i8, [6 x i8] }>
%"class.v8::internal::Segment" = type { %"class.v8::internal::Zone"*, %"class.v8::internal::Segment"*, i64 }
%"class.v8::internal::CompilerDispatcher" = type opaque
%"class.std::__1::queue" = type { %"class.std::__1::deque" }
%"class.std::__1::deque" = type { %"class.std::__1::__deque_base" }
%"class.std::__1::__deque_base" = type { %"struct.std::__1::__split_buffer", i64, %"class.std::__1::__compressed_pair.962" }
%"struct.std::__1::__split_buffer" = type { %"struct.std::__1::pair.956"**, %"struct.std::__1::pair.956"**, %"struct.std::__1::pair.956"**, %"class.std::__1::__compressed_pair.957" }
%"struct.std::__1::pair.956" = type opaque
%"class.std::__1::__compressed_pair.957" = type { %"struct.std::__1::__compressed_pair_elem.958" }
%"struct.std::__1::__compressed_pair_elem.958" = type { %"struct.std::__1::pair.956"** }
%"class.std::__1::__compressed_pair.962" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.v8::String" = type { i8 }
%"class.v8::Context" = type { i8 }
%"class.v8::FunctionCallbackInfo" = type <{ i64*, i64*, i32, [4 x i8] }>
%"class.v8::internal::Relocatable" = type { i32 (...)**, %"class.v8::internal::Isolate"*, %"class.v8::internal::Relocatable"* }
%"class.std::__1::vector.967" = type { %"class.std::__1::__vector_base.968" }
%"class.std::__1::__vector_base.968" = type { %"class.v8::internal::Handle.969"*, %"class.v8::internal::Handle.969"*, %"class.std::__1::__compressed_pair.970" }
%"class.v8::internal::Handle.969" = type { %"class.v8::internal::HandleBase" }
%"class.std::__1::__compressed_pair.970" = type { %"struct.std::__1::__compressed_pair_elem.971" }
%"struct.std::__1::__compressed_pair_elem.971" = type { %"class.v8::internal::Handle.969"* }
%"class.v8::internal::AddressToIndexHashMap" = type opaque
%"class.v8::internal::HeapObjectToIndexHashMap" = type opaque
%"class.v8::internal::MicrotaskQueue" = type opaque
%"class.v8::internal::CompilationStatistics" = type opaque
%"class.v8::internal::CodeTracer" = type <{ %"class.v8::internal::EmbeddedVector", %struct._IO_FILE*, i32, [4 x i8] }>
%"class.v8::internal::EmbeddedVector" = type { %"class.v8::internal::Vector", [128 x i8] }
%"class.v8::internal::Vector" = type { i8*, i64 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%"class.v8::PromiseRejectMessage" = type { %"class.v8::Local.833", i32, %"class.v8::Local.0" }
%"class.v8::Local.833" = type { %"class.v8::Promise"* }
%"class.v8::StartupData" = type { i8*, i32 }
%"class.v8_inspector::V8Inspector" = type opaque
%"class.v8::internal::compiler::NodeObserver" = type opaque
%"class.v8::internal::OptimizingCompileDispatcher" = type opaque
%"class.std::__1::unique_ptr.975" = type { %"class.std::__1::__compressed_pair.976" }
%"class.std::__1::__compressed_pair.976" = type { %"struct.std::__1::__compressed_pair_elem.977" }
%"struct.std::__1::__compressed_pair_elem.977" = type { %"class.v8::internal::PersistentHandlesList"* }
%"class.v8::internal::PersistentHandlesList" = type { %"class.v8::base::Mutex", %"class.v8::internal::PersistentHandles"* }
%"class.v8::internal::PersistentHandles" = type { %"class.v8::internal::Isolate"*, %"class.std::__1::vector.808", i64*, i64*, %"class.v8::internal::PersistentHandles"*, %"class.v8::internal::PersistentHandles"* }
%"class.std::__1::vector.981" = type { %"class.std::__1::__vector_base.982" }
%"class.std::__1::__vector_base.982" = type { void (%"class.v8::Isolate"*)**, void (%"class.v8::Isolate"*)**, %"class.std::__1::__compressed_pair.983" }
%"class.std::__1::__compressed_pair.983" = type { %"struct.std::__1::__compressed_pair_elem.984" }
%"struct.std::__1::__compressed_pair_elem.984" = type { void (%"class.v8::Isolate"*)** }
%"class.std::__1::shared_ptr.988" = type { %"class.v8::internal::metrics::Recorder"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::metrics::Recorder" = type opaque
%"class.std::__1::unordered_map.989" = type { %"class.std::__1::__hash_table.990" }
%"class.std::__1::__hash_table.990" = type <{ %"class.std::__1::unique_ptr.991", %"class.std::__1::__compressed_pair.1001", %"class.std::__1::__compressed_pair.1006", %"class.std::__1::__compressed_pair.1009", [4 x i8] }>
%"class.std::__1::unique_ptr.991" = type { %"class.std::__1::__compressed_pair.992" }
%"class.std::__1::__compressed_pair.992" = type { %"struct.std::__1::__compressed_pair_elem.993", %"struct.std::__1::__compressed_pair_elem.995" }
%"struct.std::__1::__compressed_pair_elem.993" = type { %"struct.std::__1::__hash_node_base.994"** }
%"struct.std::__1::__hash_node_base.994" = type { %"struct.std::__1::__hash_node_base.994"* }
%"struct.std::__1::__compressed_pair_elem.995" = type { %"class.std::__1::__bucket_list_deallocator.996" }
%"class.std::__1::__bucket_list_deallocator.996" = type { %"class.std::__1::__compressed_pair.997" }
%"class.std::__1::__compressed_pair.997" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.1001" = type { %"struct.std::__1::__compressed_pair_elem.1002" }
%"struct.std::__1::__compressed_pair_elem.1002" = type { %"struct.std::__1::__hash_node_base.994" }
%"class.std::__1::__compressed_pair.1006" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.1009" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.v8::metrics::LongTaskStats" = type { i64, i64, i64 }
%"class.v8::internal::BuiltinsConstantsTableBuilder" = type opaque
%"class.v8::ArrayBuffer::Allocator" = type { i32 (...)** }
%"class.std::__1::shared_ptr.160" = type { %"class.v8::ArrayBuffer::Allocator"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::FutexWaitListNode" = type { %"class.v8::internal::Isolate"*, %"class.std::__1::shared_ptr.1013", %"class.v8::internal::CancelableTaskManager"*, %"class.v8::base::ConditionVariable", %"class.v8::internal::FutexWaitListNode"*, %"class.v8::internal::FutexWaitListNode"*, %"class.std::__1::weak_ptr.1042", i64, i8*, i8, i8, %"class.v8::Global", %"class.v8::Global.1043", %"class.v8::base::TimeTicks", i64 }
%"class.std::__1::shared_ptr.1013" = type { %"class.v8::TaskRunner"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::TaskRunner" = type { i32 (...)** }
%"class.v8::base::ConditionVariable" = type { %union.pthread_cond_t }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon.1038, %union.anon.1040, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon.1038 = type { i64 }
%union.anon.1040 = type { i64 }
%"class.std::__1::weak_ptr.1042" = type { %"class.v8::internal::BackingStore"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::BackingStore" = type <{ i8*, %"struct.std::__1::atomic.19", i64, %"union.v8::internal::BackingStore::TypeSpecificData", i16, [6 x i8] }>
%"union.v8::internal::BackingStore::TypeSpecificData" = type { %"class.std::__1::shared_ptr.160" }
%"class.v8::Global" = type { %"class.v8::PersistentBase" }
%"class.v8::PersistentBase" = type { %"class.v8::Promise"* }
%"class.v8::Global.1043" = type { %"class.v8::PersistentBase.1044" }
%"class.v8::PersistentBase.1044" = type { %"class.v8::Context"* }
%"class.v8::internal::CancelableTaskManager" = type <{ i64, %"class.std::__1::unordered_map.1014", %"class.v8::base::ConditionVariable", %"class.v8::base::Mutex", i8, [7 x i8] }>
%"class.std::__1::unordered_map.1014" = type { %"class.std::__1::__hash_table.1015" }
%"class.std::__1::__hash_table.1015" = type <{ %"class.std::__1::unique_ptr.1016", %"class.std::__1::__compressed_pair.1026", %"class.std::__1::__compressed_pair.1031", %"class.std::__1::__compressed_pair.1034", [4 x i8] }>
%"class.std::__1::unique_ptr.1016" = type { %"class.std::__1::__compressed_pair.1017" }
%"class.std::__1::__compressed_pair.1017" = type { %"struct.std::__1::__compressed_pair_elem.1018", %"struct.std::__1::__compressed_pair_elem.1020" }
%"struct.std::__1::__compressed_pair_elem.1018" = type { %"struct.std::__1::__hash_node_base.1019"** }
%"struct.std::__1::__hash_node_base.1019" = type { %"struct.std::__1::__hash_node_base.1019"* }
%"struct.std::__1::__compressed_pair_elem.1020" = type { %"class.std::__1::__bucket_list_deallocator.1021" }
%"class.std::__1::__bucket_list_deallocator.1021" = type { %"class.std::__1::__compressed_pair.1022" }
%"class.std::__1::__compressed_pair.1022" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.1026" = type { %"struct.std::__1::__compressed_pair_elem.1027" }
%"struct.std::__1::__compressed_pair_elem.1027" = type { %"struct.std::__1::__hash_node_base.1019" }
%"class.std::__1::__compressed_pair.1031" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.1034" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.v8::debug::ConsoleDelegate" = type { i32 (...)** }
%"class.v8::debug::AsyncEventDelegate" = type { i32 (...)** }
%"class.std::__1::unique_ptr.1045" = type { %"class.std::__1::__compressed_pair.1046" }
%"class.std::__1::__compressed_pair.1046" = type { %"struct.std::__1::__compressed_pair_elem.1047" }
%"struct.std::__1::__compressed_pair_elem.1047" = type { %"class.v8::internal::LocalIsolate"* }
%"class.v8::internal::LocalIsolate" = type { %"class.v8::internal::HiddenLocalFactory", %"class.v8::internal::LocalHeap", %"class.v8::internal::Isolate"*, %"class.std::__1::unique_ptr.1074", %"class.v8::internal::ThreadId", i64, %"class.v8::internal::RuntimeCallStats"* }
%"class.v8::internal::HiddenLocalFactory" = type { %"class.v8::internal::LocalFactory" }
%"class.v8::internal::LocalFactory" = type { %"class.v8::internal::ReadOnlyRoots" }
%"class.v8::internal::ReadOnlyRoots" = type { i64* }
%"class.v8::internal::LocalHeap" = type { %"class.v8::internal::Heap"*, i8, %"struct.std::__1::atomic.1050", i8, i8, %"class.v8::internal::LocalHeap"*, %"class.v8::internal::LocalHeap"*, %"class.std::__1::unique_ptr.1054", %"class.std::__1::unique_ptr.1060", %"class.std::__1::unique_ptr.474", %"class.std::__1::vector.1066", %"class.v8::internal::ConcurrentAllocator" }
%"struct.std::__1::atomic.1050" = type { %"struct.std::__1::__atomic_base.1051" }
%"struct.std::__1::__atomic_base.1051" = type { %"struct.std::__1::__cxx_atomic_impl.1052" }
%"struct.std::__1::__cxx_atomic_impl.1052" = type { %"struct.std::__1::__cxx_atomic_base_impl.1053" }
%"struct.std::__1::__cxx_atomic_base_impl.1053" = type { i32 }
%"class.std::__1::unique_ptr.1054" = type { %"class.std::__1::__compressed_pair.1055" }
%"class.std::__1::__compressed_pair.1055" = type { %"struct.std::__1::__compressed_pair_elem.1056" }
%"struct.std::__1::__compressed_pair_elem.1056" = type { %"class.v8::internal::LocalHandles"* }
%"class.v8::internal::LocalHandles" = type { %"struct.v8::internal::HandleScopeData", %"class.std::__1::vector.808" }
%"class.std::__1::unique_ptr.1060" = type { %"class.std::__1::__compressed_pair.1061" }
%"class.std::__1::__compressed_pair.1061" = type { %"struct.std::__1::__compressed_pair_elem.1062" }
%"struct.std::__1::__compressed_pair_elem.1062" = type { %"class.v8::internal::PersistentHandles"* }
%"class.std::__1::vector.1066" = type { %"class.std::__1::__vector_base.1067" }
%"class.std::__1::__vector_base.1067" = type { %"struct.std::__1::pair.1068"*, %"struct.std::__1::pair.1068"*, %"class.std::__1::__compressed_pair.1069" }
%"struct.std::__1::pair.1068" = type opaque
%"class.std::__1::__compressed_pair.1069" = type { %"struct.std::__1::__compressed_pair_elem.1070" }
%"struct.std::__1::__compressed_pair_elem.1070" = type { %"struct.std::__1::pair.1068"* }
%"class.v8::internal::ConcurrentAllocator" = type { %"class.v8::internal::LocalHeap"*, %"class.v8::internal::PagedSpace"*, %"class.v8::internal::LocalAllocationBuffer" }
%"class.v8::internal::PagedSpace" = type { %"class.v8::internal::SpaceWithLinearArea", i32, i32, i64, %"class.v8::internal::AllocationStats", %"class.v8::base::Mutex", i64, i64 }
%"class.v8::internal::SpaceWithLinearArea" = type { %"class.v8::internal::Space", %"class.v8::internal::LinearAllocationArea", [3 x i64] }
%"class.v8::internal::Space" = type { %"class.v8::internal::BaseSpace", %"class.v8::internal::AllocationCounter", %"class.v8::internal::heap::List", %"struct.std::__1::atomic.19"*, %"class.std::__1::unique_ptr.97" }
%"class.v8::internal::AllocationCounter" = type <{ %"class.std::__1::vector.38", %"class.std::__1::vector.38", %"class.std::__1::unordered_set", i8, [7 x i8], i64, i64, i8, [7 x i8] }>
%"class.std::__1::vector.38" = type { %"class.std::__1::__vector_base.39" }
%"class.std::__1::__vector_base.39" = type { %"struct.v8::internal::AllocationCounter::AllocationObserverCounter"*, %"struct.v8::internal::AllocationCounter::AllocationObserverCounter"*, %"class.std::__1::__compressed_pair.40" }
%"struct.v8::internal::AllocationCounter::AllocationObserverCounter" = type { %"class.v8::internal::AllocationObserver"*, i64, i64 }
%"class.std::__1::__compressed_pair.40" = type { %"struct.std::__1::__compressed_pair_elem.41" }
%"struct.std::__1::__compressed_pair_elem.41" = type { %"struct.v8::internal::AllocationCounter::AllocationObserverCounter"* }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table.45" }
%"class.std::__1::__hash_table.45" = type <{ %"class.std::__1::unique_ptr.46", %"class.std::__1::__compressed_pair.56", %"class.std::__1::__compressed_pair.61", %"class.std::__1::__compressed_pair.63", [4 x i8] }>
%"class.std::__1::unique_ptr.46" = type { %"class.std::__1::__compressed_pair.47" }
%"class.std::__1::__compressed_pair.47" = type { %"struct.std::__1::__compressed_pair_elem.48", %"struct.std::__1::__compressed_pair_elem.50" }
%"struct.std::__1::__compressed_pair_elem.48" = type { %"struct.std::__1::__hash_node_base.49"** }
%"struct.std::__1::__hash_node_base.49" = type { %"struct.std::__1::__hash_node_base.49"* }
%"struct.std::__1::__compressed_pair_elem.50" = type { %"class.std::__1::__bucket_list_deallocator.51" }
%"class.std::__1::__bucket_list_deallocator.51" = type { %"class.std::__1::__compressed_pair.52" }
%"class.std::__1::__compressed_pair.52" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.56" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%"struct.std::__1::__compressed_pair_elem.57" = type { %"struct.std::__1::__hash_node_base.49" }
%"class.std::__1::__compressed_pair.61" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.63" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.v8::internal::heap::List" = type { %"class.v8::internal::MemoryChunk"*, %"class.v8::internal::MemoryChunk"* }
%"class.v8::internal::MemoryChunk" = type { %"class.v8::internal::BasicMemoryChunk", [2 x %"class.v8::internal::SlotSet"*], %"struct.std::__1::atomic.19", %"struct.std::__1::atomic.24", %"class.v8::internal::SlotSet"*, [2 x %"class.v8::internal::TypedSlotSet"*], [2 x %"class.std::__1::set"*], %"class.v8::base::Mutex"*, %"struct.std::__1::atomic.86", %"class.v8::base::Mutex"*, i64, [2 x %"struct.std::__1::atomic.19"], %"class.v8::internal::heap::ListNode", %"class.v8::internal::FreeListCategory"**, %"struct.std::__1::atomic.24", %"class.v8::internal::Bitmap"*, %"class.v8::internal::CodeObjectRegistry"*, %"class.v8::internal::PossiblyEmptyBuckets" }
%"class.v8::internal::BasicMemoryChunk" = type { i64, i64, %"class.v8::internal::Heap"*, i64, i64, i64, i64, %"struct.std::__1::atomic.24", %"struct.std::__1::atomic.68", %"class.v8::internal::VirtualMemory" }
%"struct.std::__1::atomic.68" = type { %"struct.std::__1::__atomic_base.69" }
%"struct.std::__1::__atomic_base.69" = type { %"struct.std::__1::__cxx_atomic_impl.70" }
%"struct.std::__1::__cxx_atomic_impl.70" = type { %"struct.std::__1::__cxx_atomic_base_impl.71" }
%"struct.std::__1::__cxx_atomic_base_impl.71" = type { %"class.v8::internal::BaseSpace"* }
%"class.v8::internal::SlotSet" = type { i8 }
%"class.v8::internal::TypedSlotSet" = type { %"class.v8::internal::TypedSlots", i64 }
%"class.v8::internal::TypedSlots" = type { i32 (...)**, %"struct.v8::internal::TypedSlots::Chunk"*, %"struct.v8::internal::TypedSlots::Chunk"* }
%"struct.v8::internal::TypedSlots::Chunk" = type { %"struct.v8::internal::TypedSlots::Chunk"*, %"class.std::__1::vector.72" }
%"class.std::__1::vector.72" = type { %"class.std::__1::__vector_base.73" }
%"class.std::__1::__vector_base.73" = type { %"struct.v8::internal::TypedSlots::TypedSlot"*, %"struct.v8::internal::TypedSlots::TypedSlot"*, %"class.std::__1::__compressed_pair.74" }
%"struct.v8::internal::TypedSlots::TypedSlot" = type { i32 }
%"class.std::__1::__compressed_pair.74" = type { %"struct.std::__1::__compressed_pair_elem.75" }
%"struct.std::__1::__compressed_pair_elem.75" = type { %"struct.v8::internal::TypedSlots::TypedSlot"* }
%"class.std::__1::set" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.79", %"class.std::__1::__compressed_pair.84" }
%"class.std::__1::__compressed_pair.79" = type { %"struct.std::__1::__compressed_pair_elem.80" }
%"class.std::__1::__compressed_pair.84" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::atomic.86" = type { %"struct.std::__1::__atomic_base.87" }
%"struct.std::__1::__atomic_base.87" = type { %"struct.std::__1::__cxx_atomic_impl.88" }
%"struct.std::__1::__cxx_atomic_impl.88" = type { %"struct.std::__1::__cxx_atomic_base_impl.89" }
%"struct.std::__1::__cxx_atomic_base_impl.89" = type { i64 }
%"class.v8::internal::heap::ListNode" = type { %"class.v8::internal::MemoryChunk"*, %"class.v8::internal::MemoryChunk"* }
%"class.v8::internal::FreeListCategory" = type { i32, i32, %"class.v8::internal::FreeSpace", %"class.v8::internal::FreeListCategory"*, %"class.v8::internal::FreeListCategory"* }
%"class.v8::internal::FreeSpace" = type { %"class.v8::internal::TorqueGeneratedFreeSpace" }
%"class.v8::internal::TorqueGeneratedFreeSpace" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::Bitmap" = type { i8 }
%"class.v8::internal::CodeObjectRegistry" = type <{ %"class.std::__1::vector.90", i8, [7 x i8] }>
%"class.std::__1::vector.90" = type { %"class.std::__1::__vector_base.91" }
%"class.std::__1::__vector_base.91" = type { i64*, i64*, %"class.std::__1::__compressed_pair.92" }
%"class.std::__1::__compressed_pair.92" = type { %"struct.std::__1::__compressed_pair_elem.93" }
%"struct.std::__1::__compressed_pair_elem.93" = type { i64* }
%"class.v8::internal::PossiblyEmptyBuckets" = type { i64 }
%"class.std::__1::unique_ptr.97" = type { %"class.std::__1::__compressed_pair.98" }
%"class.std::__1::__compressed_pair.98" = type { %"struct.std::__1::__compressed_pair_elem.99" }
%"struct.std::__1::__compressed_pair_elem.99" = type { %"class.v8::internal::FreeList"* }
%"class.v8::internal::FreeList" = type { i32 (...)**, i32, i32, i64, %"struct.std::__1::atomic.19", %"class.v8::internal::FreeListCategory"**, i64 }
%"class.v8::internal::LinearAllocationArea" = type { i64, i64, i64 }
%"class.v8::internal::LocalAllocationBuffer" = type { %"class.v8::internal::Heap"*, %"class.v8::internal::LinearAllocationArea" }
%"class.std::__1::unique_ptr.1074" = type { %"class.std::__1::__compressed_pair.1075" }
%"class.std::__1::__compressed_pair.1075" = type { %"struct.std::__1::__compressed_pair_elem.1076" }
%"struct.std::__1::__compressed_pair_elem.1076" = type { %"class.v8::internal::LocalLogger"* }
%"class.v8::internal::LocalLogger" = type opaque
%"struct.v8::internal::ManagedPtrDestructor" = type { i64, %"struct.v8::internal::ManagedPtrDestructor"*, %"struct.v8::internal::ManagedPtrDestructor"*, i8*, void (i8*)*, i64* }
%"class.v8::internal::wasm::WasmEngine" = type opaque
%"class.std::__1::unique_ptr.1083" = type { %"class.std::__1::__compressed_pair.1084" }
%"class.std::__1::__compressed_pair.1084" = type { %"struct.std::__1::__compressed_pair_elem.1085" }
%"struct.std::__1::__compressed_pair_elem.1085" = type { %"class.v8::internal::TracingCpuProfilerImpl"* }
%"class.v8::internal::TracingCpuProfilerImpl" = type opaque
%"class.v8::internal::EmbeddedFileWriterInterface" = type opaque
%"class.v8::Context::BackupIncumbentScope" = type { %"class.v8::Local.834", i64, %"class.v8::Context::BackupIncumbentScope"* }
%"class.v8::Local.834" = type { %"class.v8::Context"* }
%"class.v8::internal::Isolate::ThreadDataTable" = type { %"class.std::__1::unordered_map.1091" }
%"class.std::__1::unordered_map.1091" = type { %"class.std::__1::__hash_table.1092" }
%"class.std::__1::__hash_table.1092" = type <{ %"class.std::__1::unique_ptr.1093", %"class.std::__1::__compressed_pair.1103", %"class.std::__1::__compressed_pair.1108", %"class.std::__1::__compressed_pair.1111", [4 x i8] }>
%"class.std::__1::unique_ptr.1093" = type { %"class.std::__1::__compressed_pair.1094" }
%"class.std::__1::__compressed_pair.1094" = type { %"struct.std::__1::__compressed_pair_elem.1095", %"struct.std::__1::__compressed_pair_elem.1097" }
%"struct.std::__1::__compressed_pair_elem.1095" = type { %"struct.std::__1::__hash_node_base.1096"** }
%"struct.std::__1::__hash_node_base.1096" = type { %"struct.std::__1::__hash_node_base.1096"* }
%"struct.std::__1::__compressed_pair_elem.1097" = type { %"class.std::__1::__bucket_list_deallocator.1098" }
%"class.std::__1::__bucket_list_deallocator.1098" = type { %"class.std::__1::__compressed_pair.1099" }
%"class.std::__1::__compressed_pair.1099" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.1103" = type { %"struct.std::__1::__compressed_pair_elem.1104" }
%"struct.std::__1::__compressed_pair_elem.1104" = type { %"struct.std::__1::__hash_node_base.1096" }
%"class.std::__1::__compressed_pair.1108" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.1111" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::atomic.1117" = type { %"struct.std::__1::__atomic_base.1118" }
%"struct.std::__1::__atomic_base.1118" = type { %"struct.std::__1::__cxx_atomic_impl.1119" }
%"struct.std::__1::__cxx_atomic_impl.1119" = type { %"struct.std::__1::__cxx_atomic_base_impl.1120" }
%"struct.std::__1::__cxx_atomic_base_impl.1120" = type { %"class.std::__1::vector.1121"* }
%"class.std::__1::vector.1121" = type { %"class.std::__1::__vector_base.1122" }
%"class.std::__1::__vector_base.1122" = type { %"struct.v8::MemoryRange"*, %"struct.v8::MemoryRange"*, %"class.std::__1::__compressed_pair.1123" }
%"struct.v8::MemoryRange" = type { i8*, i64 }
%"class.std::__1::__compressed_pair.1123" = type { %"struct.std::__1::__compressed_pair_elem.1124" }
%"struct.std::__1::__compressed_pair_elem.1124" = type { %"struct.v8::MemoryRange"* }
%"struct.std::__1::atomic.29" = type { %"struct.std::__1::__atomic_base.30" }
%"struct.std::__1::__atomic_base.30" = type { %"struct.std::__1::__cxx_atomic_impl.31" }
%"struct.std::__1::__cxx_atomic_impl.31" = type { %"struct.std::__1::__cxx_atomic_base_impl.32" }
%"struct.std::__1::__cxx_atomic_base_impl.32" = type { i32 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.33" }
%"struct.std::__1::pair" = type opaque
%"class.std::__1::__compressed_pair.33" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"struct.std::__1::__compressed_pair_elem.34" = type { %"struct.std::__1::pair"* }
%"class.v8::internal::NewSpace" = type { %"class.v8::internal::SpaceWithLinearArea", %"class.v8::base::Mutex", %"struct.std::__1::atomic.19", %"struct.std::__1::atomic.19", %"class.v8::internal::SemiSpace", %"class.v8::internal::SemiSpace", %"class.v8::internal::VirtualMemory", %"class.std::__1::vector.103" }
%"class.v8::internal::SemiSpace" = type { %"class.v8::internal::Space", i64, i64, i64, i64, i64, i32, %"class.v8::internal::Page"* }
%"class.v8::internal::Page" = type { %"class.v8::internal::MemoryChunk" }
%"class.std::__1::vector.103" = type { %"class.std::__1::__vector_base.104" }
%"class.std::__1::__vector_base.104" = type { %"struct.std::__1::pair.105"*, %"struct.std::__1::pair.105"*, %"class.std::__1::__compressed_pair.106" }
%"struct.std::__1::pair.105" = type { i32, i64 }
%"class.std::__1::__compressed_pair.106" = type { %"struct.std::__1::__compressed_pair_elem.107" }
%"struct.std::__1::__compressed_pair_elem.107" = type { %"struct.std::__1::pair.105"* }
%"class.v8::internal::CodeSpace" = type { %"class.v8::internal::PagedSpace" }
%"class.v8::internal::OldLargeObjectSpace" = type { %"class.v8::internal::LargeObjectSpace" }
%"class.v8::internal::LargeObjectSpace" = type { %"class.v8::internal::Space", %"struct.std::__1::atomic.19", i32, %"struct.std::__1::atomic.19", %"class.v8::base::Mutex", %"struct.std::__1::atomic.19" }
%"class.v8::internal::CodeLargeObjectSpace" = type { %"class.v8::internal::OldLargeObjectSpace", %"class.std::__1::unordered_map.111" }
%"class.std::__1::unordered_map.111" = type { %"class.std::__1::__hash_table.112" }
%"class.std::__1::__hash_table.112" = type <{ %"class.std::__1::unique_ptr.113", %"class.std::__1::__compressed_pair.123", %"class.std::__1::__compressed_pair.128", %"class.std::__1::__compressed_pair.133", [4 x i8] }>
%"class.std::__1::unique_ptr.113" = type { %"class.std::__1::__compressed_pair.114" }
%"class.std::__1::__compressed_pair.114" = type { %"struct.std::__1::__compressed_pair_elem.115", %"struct.std::__1::__compressed_pair_elem.117" }
%"struct.std::__1::__compressed_pair_elem.115" = type { %"struct.std::__1::__hash_node_base.116"** }
%"struct.std::__1::__hash_node_base.116" = type { %"struct.std::__1::__hash_node_base.116"* }
%"struct.std::__1::__compressed_pair_elem.117" = type { %"class.std::__1::__bucket_list_deallocator.118" }
%"class.std::__1::__bucket_list_deallocator.118" = type { %"class.std::__1::__compressed_pair.119" }
%"class.std::__1::__compressed_pair.119" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.123" = type { %"struct.std::__1::__compressed_pair_elem.124" }
%"struct.std::__1::__compressed_pair_elem.124" = type { %"struct.std::__1::__hash_node_base.116" }
%"class.std::__1::__compressed_pair.128" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.133" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.v8::internal::NewLargeObjectSpace" = type { %"class.v8::internal::LargeObjectSpace", i64 }
%"class.v8::internal::OldSpace" = type { %"class.v8::internal::PagedSpace" }
%"class.v8::internal::MapSpace" = type { %"class.v8::internal::PagedSpace" }
%"class.std::__1::unique_ptr.146" = type { %"class.std::__1::__compressed_pair.147" }
%"class.std::__1::__compressed_pair.147" = type { %"struct.std::__1::__compressed_pair_elem.148" }
%"struct.std::__1::__compressed_pair_elem.148" = type { %"class.v8::internal::ConcurrentAllocator"* }
%"class.v8::internal::ArrayBufferExtension" = type { %"struct.std::__1::atomic.152", %"struct.std::__1::atomic.156", %"class.std::__1::shared_ptr", %"class.v8::internal::ArrayBufferExtension"*, %"struct.std::__1::atomic.19" }
%"struct.std::__1::atomic.156" = type { %"struct.std::__1::__atomic_base.157" }
%"struct.std::__1::__atomic_base.157" = type { %"struct.std::__1::__cxx_atomic_impl.158" }
%"struct.std::__1::__cxx_atomic_impl.158" = type { %"struct.std::__1::__cxx_atomic_base_impl.159" }
%"struct.std::__1::__cxx_atomic_base_impl.159" = type { i8 }
%"class.std::__1::shared_ptr" = type { %"class.v8::internal::BackingStore"*, %"class.std::__1::__shared_weak_count"* }
%"struct.std::__1::atomic.161" = type { %"struct.std::__1::__atomic_base.162" }
%"struct.std::__1::__atomic_base.162" = type { %"struct.std::__1::__cxx_atomic_impl.163" }
%"struct.std::__1::__cxx_atomic_impl.163" = type { %"struct.std::__1::__cxx_atomic_base_impl.164" }
%"struct.std::__1::__cxx_atomic_base_impl.164" = type { i32 }
%"class.v8::internal::AllocationObserver" = type { i32 (...)**, i64 }
%"class.v8::internal::StressScavengeObserver" = type opaque
%"class.v8::internal::Object" = type { %"class.v8::internal::TaggedImpl" }
%"class.v8::internal::TaggedImpl" = type { i64 }
%"class.std::__1::vector.165" = type { %"class.std::__1::__vector_base.166" }
%"class.std::__1::__vector_base.166" = type { %"struct.v8::internal::Heap::GCCallbackTuple"*, %"struct.v8::internal::Heap::GCCallbackTuple"*, %"class.std::__1::__compressed_pair.167" }
%"struct.v8::internal::Heap::GCCallbackTuple" = type { void (%"class.v8::Isolate"*, i32, i32, i8*)*, i32, i8* }
%"class.std::__1::__compressed_pair.167" = type { %"struct.std::__1::__compressed_pair_elem.168" }
%"struct.std::__1::__compressed_pair_elem.168" = type { %"struct.v8::internal::Heap::GCCallbackTuple"* }
%"class.std::__1::unique_ptr.172" = type { %"class.std::__1::__compressed_pair.173" }
%"class.std::__1::__compressed_pair.173" = type { %"struct.std::__1::__compressed_pair_elem.174" }
%"struct.std::__1::__compressed_pair_elem.174" = type { %"class.v8::internal::GCTracer"* }
%"class.v8::internal::GCTracer" = type opaque
%"class.std::__1::unique_ptr.178" = type { %"class.std::__1::__compressed_pair.179" }
%"class.std::__1::__compressed_pair.179" = type { %"struct.std::__1::__compressed_pair_elem.180" }
%"struct.std::__1::__compressed_pair_elem.180" = type { %"class.v8::internal::MarkCompactCollector"* }
%"class.v8::internal::MarkCompactCollector" = type <{ %"class.v8::internal::MarkCompactCollectorBase", %"class.v8::base::Mutex", %"class.v8::base::Semaphore", i8, i8, i8, i8, i8, i8, [2 x i8], %"class.v8::internal::MarkingWorklists", %"class.v8::internal::WeakObjects", %"struct.v8::internal::EphemeronMarking", %"class.std::__1::unique_ptr.220", %"class.std::__1::unique_ptr.226", %"class.v8::internal::NativeContextInferrer", [7 x i8], %"class.v8::internal::NativeContextStats", %"class.std::__1::vector.280", %"class.std::__1::vector.280", %"class.std::__1::vector.280", %"class.std::__1::vector.287", %"class.v8::internal::Sweeper"*, %"class.v8::internal::MajorMarkingState", %"class.v8::internal::MajorNonAtomicMarkingState", [2 x i8], i32, i32, [4 x i8] }>
%"class.v8::internal::MarkCompactCollectorBase" = type { i32 (...)**, %"class.v8::internal::Heap"* }
%"class.v8::base::Semaphore" = type { %union.sem_t }
%union.sem_t = type { i64, [24 x i8] }
%"class.v8::internal::MarkingWorklists" = type { %"class.heap::base::Worklist", %"class.heap::base::Worklist", %"class.heap::base::Worklist.181", %"class.std::__1::vector.182", %"class.std::__1::vector.189", %"class.heap::base::Worklist" }
%"class.heap::base::Worklist.181" = type { %"class.v8::base::Mutex", %"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Segment"*, %"struct.std::__1::atomic.19" }
%"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Segment" = type opaque
%"class.std::__1::vector.182" = type { %"class.std::__1::__vector_base.183" }
%"class.std::__1::__vector_base.183" = type { %"struct.v8::internal::ContextWorklistPair"*, %"struct.v8::internal::ContextWorklistPair"*, %"class.std::__1::__compressed_pair.184" }
%"struct.v8::internal::ContextWorklistPair" = type { i64, %"class.heap::base::Worklist"* }
%"class.std::__1::__compressed_pair.184" = type { %"struct.std::__1::__compressed_pair_elem.185" }
%"struct.std::__1::__compressed_pair_elem.185" = type { %"struct.v8::internal::ContextWorklistPair"* }
%"class.std::__1::vector.189" = type { %"class.std::__1::__vector_base.190" }
%"class.std::__1::__vector_base.190" = type { %"class.std::__1::unique_ptr.191"*, %"class.std::__1::unique_ptr.191"*, %"class.std::__1::__compressed_pair.192" }
%"class.std::__1::unique_ptr.191" = type opaque
%"class.std::__1::__compressed_pair.192" = type { %"struct.std::__1::__compressed_pair_elem.193" }
%"struct.std::__1::__compressed_pair_elem.193" = type { %"class.std::__1::unique_ptr.191"* }
%"class.heap::base::Worklist" = type { %"class.v8::base::Mutex", %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Segment"*, %"struct.std::__1::atomic.19" }
%"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Segment" = type opaque
%"class.v8::internal::WeakObjects" = type { %"class.v8::internal::Worklist", %"class.v8::internal::Worklist.197", %"class.v8::internal::Worklist.199", %"class.v8::internal::Worklist.199", %"class.v8::internal::Worklist.199", %"class.v8::internal::Worklist.201", %"class.v8::internal::Worklist.203", %"class.v8::internal::Worklist.205", %"class.v8::internal::Worklist.207", %"class.v8::internal::Worklist.209", %"class.v8::internal::Worklist.211" }
%"class.v8::internal::Worklist" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::TransitionArray, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::TransitionArray, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment"*, %"struct.std::__1::atomic.19" }
%"class.v8::internal::Worklist.197" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"*, %"struct.std::__1::atomic.19" }
%"class.v8::internal::Worklist.199" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::Ephemeron, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::Ephemeron, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"*, %"struct.std::__1::atomic.19" }
%"class.v8::internal::Worklist.201" = type <{ [8 x %"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"*, %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"*, %"struct.std::__1::atomic.19" }
%"class.v8::internal::Worklist.203" = type <{ [8 x %"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"*, %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"*, %"struct.std::__1::atomic.19" }
%"class.v8::internal::Worklist.205" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"*, %"struct.std::__1::atomic.19" }
%"class.v8::internal::Worklist.207" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::WeakCell, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::WeakCell, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment"*, %"struct.std::__1::atomic.19" }
%"class.v8::internal::Worklist.209" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment"*, %"struct.std::__1::atomic.19" }
%"class.v8::internal::Worklist.211" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::JSFunction, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::JSFunction, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"*, %"struct.std::__1::atomic.19" }
%"struct.v8::internal::EphemeronMarking" = type { %"class.std::__1::vector.213", i8, i64 }
%"class.std::__1::vector.213" = type { %"class.std::__1::__vector_base.214" }
%"class.std::__1::__vector_base.214" = type { %"class.v8::internal::HeapObject"*, %"class.v8::internal::HeapObject"*, %"class.std::__1::__compressed_pair.215" }
%"class.std::__1::__compressed_pair.215" = type { %"struct.std::__1::__compressed_pair_elem.216" }
%"struct.std::__1::__compressed_pair_elem.216" = type { %"class.v8::internal::HeapObject"* }
%"class.std::__1::unique_ptr.220" = type { %"class.std::__1::__compressed_pair.221" }
%"class.std::__1::__compressed_pair.221" = type { %"struct.std::__1::__compressed_pair_elem.222" }
%"struct.std::__1::__compressed_pair_elem.222" = type { %"class.v8::internal::MainMarkingVisitor"* }
%"class.v8::internal::MainMarkingVisitor" = type opaque
%"class.std::__1::unique_ptr.226" = type { %"class.std::__1::__compressed_pair.227" }
%"class.std::__1::__compressed_pair.227" = type { %"struct.std::__1::__compressed_pair_elem.228" }
%"struct.std::__1::__compressed_pair_elem.228" = type { %"class.v8::internal::MarkingWorklists::Local"* }
%"class.v8::internal::MarkingWorklists::Local" = type { %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local", %"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Local", %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local", i64, %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local"*, i8, [7 x i8], %"class.std::__1::unordered_map.229" }
%"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Local" = type { %"class.heap::base::Worklist.181"*, %"class.heap::base::internal::SegmentBase"*, %"class.heap::base::internal::SegmentBase"* }
%"class.heap::base::internal::SegmentBase" = type { i16, i16 }
%"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local" = type { %"class.heap::base::Worklist"*, %"class.heap::base::internal::SegmentBase"*, %"class.heap::base::internal::SegmentBase"* }
%"class.std::__1::unordered_map.229" = type { %"class.std::__1::__hash_table.230" }
%"class.std::__1::__hash_table.230" = type <{ %"class.std::__1::unique_ptr.231", %"class.std::__1::__compressed_pair.241", %"class.std::__1::__compressed_pair.246", %"class.std::__1::__compressed_pair.249", [4 x i8] }>
%"class.std::__1::unique_ptr.231" = type { %"class.std::__1::__compressed_pair.232" }
%"class.std::__1::__compressed_pair.232" = type { %"struct.std::__1::__compressed_pair_elem.233", %"struct.std::__1::__compressed_pair_elem.235" }
%"struct.std::__1::__compressed_pair_elem.233" = type { %"struct.std::__1::__hash_node_base.234"** }
%"struct.std::__1::__hash_node_base.234" = type { %"struct.std::__1::__hash_node_base.234"* }
%"struct.std::__1::__compressed_pair_elem.235" = type { %"class.std::__1::__bucket_list_deallocator.236" }
%"class.std::__1::__bucket_list_deallocator.236" = type { %"class.std::__1::__compressed_pair.237" }
%"class.std::__1::__compressed_pair.237" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.241" = type { %"struct.std::__1::__compressed_pair_elem.242" }
%"struct.std::__1::__compressed_pair_elem.242" = type { %"struct.std::__1::__hash_node_base.234" }
%"class.std::__1::__compressed_pair.246" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.249" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.v8::internal::NativeContextInferrer" = type { i8 }
%"class.v8::internal::NativeContextStats" = type { %"class.std::__1::unordered_map.256" }
%"class.std::__1::unordered_map.256" = type { %"class.std::__1::__hash_table.257" }
%"class.std::__1::__hash_table.257" = type <{ %"class.std::__1::unique_ptr.258", %"class.std::__1::__compressed_pair.268", %"class.std::__1::__compressed_pair.273", %"class.std::__1::__compressed_pair.276", [4 x i8] }>
%"class.std::__1::unique_ptr.258" = type { %"class.std::__1::__compressed_pair.259" }
%"class.std::__1::__compressed_pair.259" = type { %"struct.std::__1::__compressed_pair_elem.260", %"struct.std::__1::__compressed_pair_elem.262" }
%"struct.std::__1::__compressed_pair_elem.260" = type { %"struct.std::__1::__hash_node_base.261"** }
%"struct.std::__1::__hash_node_base.261" = type { %"struct.std::__1::__hash_node_base.261"* }
%"struct.std::__1::__compressed_pair_elem.262" = type { %"class.std::__1::__bucket_list_deallocator.263" }
%"class.std::__1::__bucket_list_deallocator.263" = type { %"class.std::__1::__compressed_pair.264" }
%"class.std::__1::__compressed_pair.264" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.268" = type { %"struct.std::__1::__compressed_pair_elem.269" }
%"struct.std::__1::__compressed_pair_elem.269" = type { %"struct.std::__1::__hash_node_base.261" }
%"class.std::__1::__compressed_pair.273" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.276" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::vector.280" = type { %"class.std::__1::__vector_base.281" }
%"class.std::__1::__vector_base.281" = type { %"class.v8::internal::Page"**, %"class.v8::internal::Page"**, %"class.std::__1::__compressed_pair.282" }
%"class.std::__1::__compressed_pair.282" = type { %"struct.std::__1::__compressed_pair_elem.283" }
%"struct.std::__1::__compressed_pair_elem.283" = type { %"class.v8::internal::Page"** }
%"class.std::__1::vector.287" = type { %"class.std::__1::__vector_base.288" }
%"class.std::__1::__vector_base.288" = type { %"struct.std::__1::pair.289"*, %"struct.std::__1::pair.289"*, %"class.std::__1::__compressed_pair.290" }
%"struct.std::__1::pair.289" = type opaque
%"class.std::__1::__compressed_pair.290" = type { %"struct.std::__1::__compressed_pair_elem.291" }
%"struct.std::__1::__compressed_pair_elem.291" = type { %"struct.std::__1::pair.289"* }
%"class.v8::internal::Sweeper" = type <{ %"class.v8::internal::Heap"*, %"class.v8::internal::MajorNonAtomicMarkingState"*, %"class.std::__1::unique_ptr.295", %"class.v8::base::Mutex", [3 x %"class.std::__1::vector.280"], [3 x %"class.std::__1::vector.280"], i8, %"struct.std::__1::atomic.152", [6 x i8], %"class.std::__1::vector.280", i64, %"class.v8::base::Semaphore", i8, i8, i8, [5 x i8] }>
%"class.std::__1::unique_ptr.295" = type { %"class.std::__1::__compressed_pair.296" }
%"class.std::__1::__compressed_pair.296" = type { %"struct.std::__1::__compressed_pair_elem.297" }
%"struct.std::__1::__compressed_pair_elem.297" = type { %"class.v8::JobHandle"* }
%"class.v8::JobHandle" = type { i32 (...)** }
%"class.v8::internal::MajorMarkingState" = type { i8 }
%"class.v8::internal::MajorNonAtomicMarkingState" = type { i8 }
%"class.v8::internal::MinorMarkCompactCollector" = type <{ %"class.v8::internal::MarkCompactCollectorBase", %"class.v8::internal::Worklist.305"*, %"class.v8::internal::YoungGenerationMarkingVisitor"*, %"class.v8::base::Semaphore", %"class.std::__1::vector.280", %"class.std::__1::vector.280", %"class.v8::internal::MinorMarkingState", %"class.v8::internal::MinorNonAtomicMarkingState", [6 x i8] }>
%"class.v8::internal::Worklist.305" = type opaque
%"class.v8::internal::YoungGenerationMarkingVisitor" = type opaque
%"class.v8::internal::MinorMarkingState" = type { i8 }
%"class.v8::internal::MinorNonAtomicMarkingState" = type { i8 }
%"class.std::__1::unique_ptr.308" = type { %"class.std::__1::__compressed_pair.309" }
%"class.std::__1::__compressed_pair.309" = type { %"struct.std::__1::__compressed_pair_elem.310" }
%"struct.std::__1::__compressed_pair_elem.310" = type { %"class.v8::internal::ScavengerCollector"* }
%"class.v8::internal::ScavengerCollector" = type opaque
%"class.std::__1::unique_ptr.314" = type { %"class.std::__1::__compressed_pair.315" }
%"class.std::__1::__compressed_pair.315" = type { %"struct.std::__1::__compressed_pair_elem.316" }
%"struct.std::__1::__compressed_pair_elem.316" = type { %"class.v8::internal::ArrayBufferSweeper"* }
%"class.v8::internal::ArrayBufferSweeper" = type opaque
%"class.std::__1::unique_ptr.320" = type { %"class.std::__1::__compressed_pair.321" }
%"class.std::__1::__compressed_pair.321" = type { %"struct.std::__1::__compressed_pair_elem.322" }
%"struct.std::__1::__compressed_pair_elem.322" = type { %"class.v8::internal::MemoryAllocator"* }
%"class.v8::internal::MemoryAllocator" = type { %"class.v8::internal::Isolate"*, %"class.v8::PageAllocator"*, %"class.v8::PageAllocator"*, i64, %"struct.std::__1::atomic.19", %"struct.std::__1::atomic.19", %"struct.std::__1::atomic.19", %"struct.std::__1::atomic.19", %"class.v8::internal::VirtualMemory", %"class.v8::internal::MemoryAllocator::Unmapper", %"class.std::__1::unordered_set.330", %"class.v8::base::Mutex" }
%"class.v8::internal::MemoryAllocator::Unmapper" = type { %"class.v8::internal::Heap"*, %"class.v8::internal::MemoryAllocator"*, %"class.v8::base::Mutex", [3 x %"class.std::__1::vector.323"], %"class.std::__1::unique_ptr.295" }
%"class.std::__1::vector.323" = type { %"class.std::__1::__vector_base.324" }
%"class.std::__1::__vector_base.324" = type { %"class.v8::internal::MemoryChunk"**, %"class.v8::internal::MemoryChunk"**, %"class.std::__1::__compressed_pair.325" }
%"class.std::__1::__compressed_pair.325" = type { %"struct.std::__1::__compressed_pair_elem.326" }
%"struct.std::__1::__compressed_pair_elem.326" = type { %"class.v8::internal::MemoryChunk"** }
%"class.std::__1::unique_ptr.359" = type { %"class.std::__1::__compressed_pair.360" }
%"class.std::__1::__compressed_pair.360" = type { %"struct.std::__1::__compressed_pair_elem.361" }
%"struct.std::__1::__compressed_pair_elem.361" = type { %"class.v8::internal::IncrementalMarking"* }
%"class.v8::internal::IncrementalMarking" = type { %"class.v8::internal::Heap"*, %"class.v8::internal::MarkCompactCollector"*, %"class.v8::internal::WeakObjects"*, double, double, i64, i64, i64, i64, double, i64, %"struct.std::__1::atomic.362", i8, i8, i8, i8, [3 x i8], %"class.v8::internal::IncrementalMarkingJob", %"struct.std::__1::atomic.366", %"class.v8::internal::IncrementalMarking::Observer", %"class.v8::internal::IncrementalMarking::Observer", %"class.v8::internal::MajorMarkingState", %"class.v8::internal::MajorAtomicMarkingState", %"class.v8::internal::MajorNonAtomicMarkingState", %"class.v8::base::Mutex", %"class.std::__1::unordered_map.371" }
%"struct.std::__1::atomic.362" = type { %"struct.std::__1::__atomic_base.363" }
%"struct.std::__1::__atomic_base.363" = type { %"struct.std::__1::__cxx_atomic_impl.364" }
%"struct.std::__1::__cxx_atomic_impl.364" = type { %"struct.std::__1::__cxx_atomic_base_impl.365" }
%"struct.std::__1::__cxx_atomic_base_impl.365" = type { i8 }
%"class.v8::internal::IncrementalMarkingJob" = type <{ %"class.v8::base::Mutex", double, i8, i8, [6 x i8] }>
%"struct.std::__1::atomic.366" = type { %"struct.std::__1::__atomic_base.367" }
%"struct.std::__1::__atomic_base.367" = type { %"struct.std::__1::__cxx_atomic_impl.368" }
%"struct.std::__1::__cxx_atomic_impl.368" = type { %"struct.std::__1::__cxx_atomic_base_impl.369" }
%"struct.std::__1::__cxx_atomic_base_impl.369" = type { i32 }
%"class.v8::internal::IncrementalMarking::Observer" = type { %"class.v8::internal::AllocationObserver", %"class.v8::internal::IncrementalMarking"* }
%"class.v8::internal::MajorAtomicMarkingState" = type { i8 }
%"class.std::__1::unordered_map.371" = type { %"class.std::__1::__hash_table.372" }
%"class.std::__1::__hash_table.372" = type <{ %"class.std::__1::unique_ptr.373", %"class.std::__1::__compressed_pair.383", %"class.std::__1::__compressed_pair.388", %"class.std::__1::__compressed_pair.391", [4 x i8] }>
%"class.std::__1::unique_ptr.373" = type { %"class.std::__1::__compressed_pair.374" }
%"class.std::__1::__compressed_pair.374" = type { %"struct.std::__1::__compressed_pair_elem.375", %"struct.std::__1::__compressed_pair_elem.377" }
%"struct.std::__1::__compressed_pair_elem.375" = type { %"struct.std::__1::__hash_node_base.376"** }
%"struct.std::__1::__hash_node_base.376" = type { %"struct.std::__1::__hash_node_base.376"* }
%"struct.std::__1::__compressed_pair_elem.377" = type { %"class.std::__1::__bucket_list_deallocator.378" }
%"class.std::__1::__bucket_list_deallocator.378" = type { %"class.std::__1::__compressed_pair.379" }
%"class.std::__1::__compressed_pair.379" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.383" = type { %"struct.std::__1::__compressed_pair_elem.384" }
%"struct.std::__1::__compressed_pair_elem.384" = type { %"struct.std::__1::__hash_node_base.376" }
%"class.std::__1::__compressed_pair.388" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.391" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::unique_ptr.398" = type { %"class.std::__1::__compressed_pair.399" }
%"class.std::__1::__compressed_pair.399" = type { %"struct.std::__1::__compressed_pair_elem.400" }
%"struct.std::__1::__compressed_pair_elem.400" = type { %"class.v8::internal::ConcurrentMarking"* }
%"class.v8::internal::ConcurrentMarking" = type <{ %"class.std::__1::unique_ptr.295", %"class.v8::internal::Heap"*, %"class.v8::internal::MarkingWorklists"*, %"class.v8::internal::WeakObjects"*, [8 x %"struct.v8::internal::ConcurrentMarking::TaskState"], %"struct.std::__1::atomic.19", %"struct.std::__1::atomic.152", [7 x i8] }>
%"struct.v8::internal::ConcurrentMarking::TaskState" = type { i64, %"class.std::__1::unordered_map.401", %"class.v8::internal::NativeContextInferrer", [7 x i8], %"class.v8::internal::NativeContextStats", [64 x i8] }
%"class.std::__1::unordered_map.401" = type { %"class.std::__1::__hash_table.402" }
%"class.std::__1::__hash_table.402" = type <{ %"class.std::__1::unique_ptr.403", %"class.std::__1::__compressed_pair.413", %"class.std::__1::__compressed_pair.418", %"class.std::__1::__compressed_pair.421", [4 x i8] }>
%"class.std::__1::unique_ptr.403" = type { %"class.std::__1::__compressed_pair.404" }
%"class.std::__1::__compressed_pair.404" = type { %"struct.std::__1::__compressed_pair_elem.405", %"struct.std::__1::__compressed_pair_elem.407" }
%"struct.std::__1::__compressed_pair_elem.405" = type { %"struct.std::__1::__hash_node_base.406"** }
%"struct.std::__1::__hash_node_base.406" = type { %"struct.std::__1::__hash_node_base.406"* }
%"struct.std::__1::__compressed_pair_elem.407" = type { %"class.std::__1::__bucket_list_deallocator.408" }
%"class.std::__1::__bucket_list_deallocator.408" = type { %"class.std::__1::__compressed_pair.409" }
%"class.std::__1::__compressed_pair.409" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.413" = type { %"struct.std::__1::__compressed_pair_elem.414" }
%"struct.std::__1::__compressed_pair_elem.414" = type { %"struct.std::__1::__hash_node_base.406" }
%"class.std::__1::__compressed_pair.418" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.421" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::unique_ptr.428" = type { %"class.std::__1::__compressed_pair.429" }
%"class.std::__1::__compressed_pair.429" = type { %"struct.std::__1::__compressed_pair_elem.430" }
%"struct.std::__1::__compressed_pair_elem.430" = type { %"class.v8::internal::GCIdleTimeHandler"* }
%"class.v8::internal::GCIdleTimeHandler" = type opaque
%"class.std::__1::unique_ptr.434" = type { %"class.std::__1::__compressed_pair.435" }
%"class.std::__1::__compressed_pair.435" = type { %"struct.std::__1::__compressed_pair_elem.436" }
%"struct.std::__1::__compressed_pair_elem.436" = type { %"class.v8::internal::MemoryMeasurement"* }
%"class.v8::internal::MemoryMeasurement" = type { %"class.std::__1::list", %"class.std::__1::list", %"class.std::__1::list", %"class.v8::internal::Isolate"*, i8, i8, i8, %"class.v8::base::RandomNumberGenerator" }
%"class.std::__1::list" = type { %"class.std::__1::__list_imp" }
%"class.std::__1::__list_imp" = type { %"struct.std::__1::__list_node_base", %"class.std::__1::__compressed_pair.437" }
%"struct.std::__1::__list_node_base" = type { %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"* }
%"class.std::__1::__compressed_pair.437" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::unique_ptr.444" = type { %"class.std::__1::__compressed_pair.445" }
%"class.std::__1::__compressed_pair.445" = type { %"struct.std::__1::__compressed_pair_elem.446" }
%"struct.std::__1::__compressed_pair_elem.446" = type { %"class.v8::internal::MemoryReducer"* }
%"class.v8::internal::MemoryReducer" = type opaque
%"class.std::__1::unique_ptr.450" = type { %"class.std::__1::__compressed_pair.451" }
%"class.std::__1::__compressed_pair.451" = type { %"struct.std::__1::__compressed_pair_elem.452" }
%"struct.std::__1::__compressed_pair_elem.452" = type { %"class.v8::internal::ObjectStats"* }
%"class.v8::internal::ObjectStats" = type opaque
%"class.std::__1::unique_ptr.456" = type { %"class.std::__1::__compressed_pair.457" }
%"class.std::__1::__compressed_pair.457" = type { %"struct.std::__1::__compressed_pair_elem.458" }
%"struct.std::__1::__compressed_pair_elem.458" = type { %"class.v8::internal::ScavengeJob"* }
%"class.v8::internal::ScavengeJob" = type opaque
%"class.std::__1::unique_ptr.462" = type { %"class.std::__1::__compressed_pair.463" }
%"class.std::__1::__compressed_pair.463" = type { %"struct.std::__1::__compressed_pair_elem.464" }
%"struct.std::__1::__compressed_pair_elem.464" = type { %"class.v8::internal::AllocationObserver"* }
%"class.std::__1::unique_ptr.468" = type { %"class.std::__1::__compressed_pair.469" }
%"class.std::__1::__compressed_pair.469" = type { %"struct.std::__1::__compressed_pair_elem.470" }
%"struct.std::__1::__compressed_pair_elem.470" = type { %"class.v8::internal::LocalEmbedderHeapTracer"* }
%"class.v8::internal::LocalEmbedderHeapTracer" = type opaque
%"class.std::__1::unique_ptr.474" = type { %"class.std::__1::__compressed_pair.475" }
%"class.std::__1::__compressed_pair.475" = type { %"struct.std::__1::__compressed_pair_elem.476" }
%"struct.std::__1::__compressed_pair_elem.476" = type { %"class.v8::internal::MarkingBarrier"* }
%"class.v8::internal::MarkingBarrier" = type opaque
%"class.std::__1::shared_ptr.480" = type { %"class.v8::internal::CodeRange"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::CodeRange" = type { %"class.v8::internal::VirtualMemoryCage", %"struct.std::__1::atomic.499", %"class.v8::base::Mutex" }
%"class.v8::internal::VirtualMemoryCage" = type { i32 (...)**, i64, %"class.std::__1::unique_ptr.481", %"class.v8::internal::VirtualMemory" }
%"struct.std::__1::atomic.499" = type { %"struct.std::__1::__atomic_base.500" }
%"struct.std::__1::__atomic_base.500" = type { %"struct.std::__1::__cxx_atomic_impl.501" }
%"struct.std::__1::__cxx_atomic_impl.501" = type { %"struct.std::__1::__cxx_atomic_base_impl.502" }
%"struct.std::__1::__cxx_atomic_base_impl.502" = type { i8* }
%"class.v8::CppHeap" = type opaque
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"class.v8::internal::StrongRootsEntry" = type { %"class.v8::internal::FullObjectSlot", %"class.v8::internal::FullObjectSlot", %"class.v8::internal::StrongRootsEntry"*, %"class.v8::internal::StrongRootsEntry"* }
%"class.v8::internal::FullObjectSlot" = type { %"class.v8::internal::SlotBase" }
%"class.v8::internal::SlotBase" = type { i64 }
%"class.std::__1::unordered_map.503" = type { %"class.std::__1::__hash_table.504" }
%"class.std::__1::__hash_table.504" = type <{ %"class.std::__1::unique_ptr.505", %"class.std::__1::__compressed_pair.515", %"class.std::__1::__compressed_pair.520", %"class.std::__1::__compressed_pair.523", [4 x i8] }>
%"class.std::__1::unique_ptr.505" = type { %"class.std::__1::__compressed_pair.506" }
%"class.std::__1::__compressed_pair.506" = type { %"struct.std::__1::__compressed_pair_elem.507", %"struct.std::__1::__compressed_pair_elem.509" }
%"struct.std::__1::__compressed_pair_elem.507" = type { %"struct.std::__1::__hash_node_base.508"** }
%"struct.std::__1::__hash_node_base.508" = type { %"struct.std::__1::__hash_node_base.508"* }
%"struct.std::__1::__compressed_pair_elem.509" = type { %"class.std::__1::__bucket_list_deallocator.510" }
%"class.std::__1::__bucket_list_deallocator.510" = type { %"class.std::__1::__compressed_pair.511" }
%"class.std::__1::__compressed_pair.511" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.515" = type { %"struct.std::__1::__compressed_pair_elem.516" }
%"struct.std::__1::__compressed_pair_elem.516" = type { %"struct.std::__1::__hash_node_base.508" }
%"class.std::__1::__compressed_pair.520" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.523" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::unique_ptr.529" = type { %"class.std::__1::__compressed_pair.530" }
%"class.std::__1::__compressed_pair.530" = type { %"struct.std::__1::__compressed_pair_elem.531" }
%"struct.std::__1::__compressed_pair_elem.531" = type { %"class.v8::internal::GlobalHandleVector"* }
%"class.v8::internal::GlobalHandleVector" = type opaque
%"class.std::__1::unique_ptr.535" = type { %"class.std::__1::__compressed_pair.536" }
%"class.std::__1::__compressed_pair.536" = type { %"struct.std::__1::__compressed_pair_elem.537" }
%"struct.std::__1::__compressed_pair_elem.537" = type { %"class.v8::internal::GlobalSafepoint"* }
%"class.v8::internal::GlobalSafepoint" = type opaque
%"class.v8::internal::Heap::ExternalStringTable" = type { %"class.v8::internal::Heap"*, %"class.std::__1::vector.541", %"class.std::__1::vector.541" }
%"class.std::__1::unique_ptr.548" = type { %"class.std::__1::__compressed_pair.549" }
%"class.std::__1::__compressed_pair.549" = type { %"struct.std::__1::__compressed_pair_elem.550" }
%"struct.std::__1::__compressed_pair_elem.550" = type { %"class.v8::internal::CollectionBarrier"* }
%"class.v8::internal::CollectionBarrier" = type opaque
%"class.v8::internal::HeapObject" = type { %"class.v8::internal::Object" }
%"class.v8::base::SharedMutex" = type { %union.pthread_rwlock_t }
%union.pthread_rwlock_t = type { %struct.__pthread_rwlock_arch_t }
%struct.__pthread_rwlock_arch_t = type { i32, i32, i32, i32, i32, i32, i32, i32, i8, [7 x i8], i64, i32 }
%"class.v8::base::Mutex" = type { %union.pthread_mutex_t }
%"class.std::__1::unordered_set.330" = type { %"class.std::__1::__hash_table.331" }
%"class.std::__1::__hash_table.331" = type <{ %"class.std::__1::unique_ptr.332", %"class.std::__1::__compressed_pair.342", %"class.std::__1::__compressed_pair.347", %"class.std::__1::__compressed_pair.351", [4 x i8] }>
%"class.std::__1::unique_ptr.332" = type { %"class.std::__1::__compressed_pair.333" }
%"class.std::__1::__compressed_pair.333" = type { %"struct.std::__1::__compressed_pair_elem.334", %"struct.std::__1::__compressed_pair_elem.336" }
%"struct.std::__1::__compressed_pair_elem.334" = type { %"struct.std::__1::__hash_node_base.335"** }
%"struct.std::__1::__hash_node_base.335" = type { %"struct.std::__1::__hash_node_base.335"* }
%"struct.std::__1::__compressed_pair_elem.336" = type { %"class.std::__1::__bucket_list_deallocator.337" }
%"class.std::__1::__bucket_list_deallocator.337" = type { %"class.std::__1::__compressed_pair.338" }
%"class.std::__1::__compressed_pair.338" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.342" = type { %"struct.std::__1::__compressed_pair_elem.343" }
%"struct.std::__1::__compressed_pair_elem.343" = type { %"struct.std::__1::__hash_node_base.335" }
%"class.std::__1::__compressed_pair.347" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.351" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::unordered_map.580" = type { %"class.std::__1::__hash_table.581" }
%"class.std::__1::__hash_table.581" = type <{ %"class.std::__1::unique_ptr.582", %"class.std::__1::__compressed_pair.592", %"class.std::__1::__compressed_pair.597", %"class.std::__1::__compressed_pair.600", [4 x i8] }>
%"class.std::__1::unique_ptr.582" = type { %"class.std::__1::__compressed_pair.583" }
%"class.std::__1::__compressed_pair.583" = type { %"struct.std::__1::__compressed_pair_elem.584", %"struct.std::__1::__compressed_pair_elem.586" }
%"struct.std::__1::__compressed_pair_elem.584" = type { %"struct.std::__1::__hash_node_base.585"** }
%"struct.std::__1::__hash_node_base.585" = type { %"struct.std::__1::__hash_node_base.585"* }
%"struct.std::__1::__compressed_pair_elem.586" = type { %"class.std::__1::__bucket_list_deallocator.587" }
%"class.std::__1::__bucket_list_deallocator.587" = type { %"class.std::__1::__compressed_pair.588" }
%"class.std::__1::__compressed_pair.588" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.592" = type { %"struct.std::__1::__compressed_pair_elem.593" }
%"struct.std::__1::__compressed_pair_elem.593" = type { %"struct.std::__1::__hash_node_base.585" }
%"class.std::__1::__compressed_pair.597" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.600" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::unordered_map.554" = type { %"class.std::__1::__hash_table.555" }
%"class.std::__1::__hash_table.555" = type <{ %"class.std::__1::unique_ptr.556", %"class.std::__1::__compressed_pair.566", %"class.std::__1::__compressed_pair.571", %"class.std::__1::__compressed_pair.574", [4 x i8] }>
%"class.std::__1::unique_ptr.556" = type { %"class.std::__1::__compressed_pair.557" }
%"class.std::__1::__compressed_pair.557" = type { %"struct.std::__1::__compressed_pair_elem.558", %"struct.std::__1::__compressed_pair_elem.560" }
%"struct.std::__1::__compressed_pair_elem.558" = type { %"struct.std::__1::__hash_node_base.559"** }
%"struct.std::__1::__hash_node_base.559" = type { %"struct.std::__1::__hash_node_base.559"* }
%"struct.std::__1::__compressed_pair_elem.560" = type { %"class.std::__1::__bucket_list_deallocator.561" }
%"class.std::__1::__bucket_list_deallocator.561" = type { %"class.std::__1::__compressed_pair.562" }
%"class.std::__1::__compressed_pair.562" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.566" = type { %"struct.std::__1::__compressed_pair_elem.567" }
%"struct.std::__1::__compressed_pair_elem.567" = type { %"struct.std::__1::__hash_node_base.559" }
%"class.std::__1::__compressed_pair.571" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.574" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::unordered_map.604" = type { %"class.std::__1::__hash_table.605" }
%"class.std::__1::__hash_table.605" = type <{ %"class.std::__1::unique_ptr.606", %"class.std::__1::__compressed_pair.616", %"class.std::__1::__compressed_pair.621", %"class.std::__1::__compressed_pair.626", [4 x i8] }>
%"class.std::__1::unique_ptr.606" = type { %"class.std::__1::__compressed_pair.607" }
%"class.std::__1::__compressed_pair.607" = type { %"struct.std::__1::__compressed_pair_elem.608", %"struct.std::__1::__compressed_pair_elem.610" }
%"struct.std::__1::__compressed_pair_elem.608" = type { %"struct.std::__1::__hash_node_base.609"** }
%"struct.std::__1::__hash_node_base.609" = type { %"struct.std::__1::__hash_node_base.609"* }
%"struct.std::__1::__compressed_pair_elem.610" = type { %"class.std::__1::__bucket_list_deallocator.611" }
%"class.std::__1::__bucket_list_deallocator.611" = type { %"class.std::__1::__compressed_pair.612" }
%"class.std::__1::__compressed_pair.612" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.616" = type { %"struct.std::__1::__compressed_pair_elem.617" }
%"struct.std::__1::__compressed_pair_elem.617" = type { %"struct.std::__1::__hash_node_base.609" }
%"class.std::__1::__compressed_pair.621" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.626" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::vector.632" = type { %"class.std::__1::__vector_base.633" }
%"class.std::__1::__vector_base.633" = type { %"class.v8::internal::HeapObjectAllocationTracker"**, %"class.v8::internal::HeapObjectAllocationTracker"**, %"class.std::__1::__compressed_pair.634" }
%"class.std::__1::__compressed_pair.634" = type { %"struct.std::__1::__compressed_pair_elem.635" }
%"struct.std::__1::__compressed_pair_elem.635" = type { %"class.v8::internal::HeapObjectAllocationTracker"** }
%"class.std::__1::unique_ptr.639" = type { %"class.std::__1::__compressed_pair.640" }
%"class.std::__1::__compressed_pair.640" = type { %"struct.std::__1::__compressed_pair_elem.641" }
%"struct.std::__1::__compressed_pair_elem.641" = type { %"class.v8::internal::third_party_heap::Heap"* }
%"class.v8::internal::third_party_heap::Heap" = type { i8 }
%"struct.std::__1::atomic.19" = type { %"struct.std::__1::__atomic_base.20" }
%"struct.std::__1::__atomic_base.20" = type { %"struct.std::__1::__atomic_base.21" }
%"struct.std::__1::__atomic_base.21" = type { %"struct.std::__1::__cxx_atomic_impl.22" }
%"struct.std::__1::__cxx_atomic_impl.22" = type { %"struct.std::__1::__cxx_atomic_base_impl.23" }
%"struct.std::__1::__cxx_atomic_base_impl.23" = type { i64 }
%"class.v8::internal::AllocationStats" = type { %"struct.std::__1::atomic.19", i64, %"struct.std::__1::atomic.19" }
%"class.std::__1::vector.139" = type { %"class.std::__1::__vector_base.140" }
%"class.std::__1::__vector_base.140" = type { %"class.v8::internal::ReadOnlyPage"**, %"class.v8::internal::ReadOnlyPage"**, %"class.std::__1::__compressed_pair.141" }
%"class.v8::internal::ReadOnlyPage" = type { %"class.v8::internal::BasicMemoryChunk" }
%"class.std::__1::__compressed_pair.141" = type { %"struct.std::__1::__compressed_pair_elem.142" }
%"struct.std::__1::__compressed_pair_elem.142" = type { %"class.v8::internal::ReadOnlyPage"** }
%"class.std::__1::vector.541" = type { %"class.std::__1::__vector_base.542" }
%"class.std::__1::__vector_base.542" = type { %"class.v8::internal::Object"*, %"class.v8::internal::Object"*, %"class.std::__1::__compressed_pair.543" }
%"class.std::__1::__compressed_pair.543" = type { %"struct.std::__1::__compressed_pair_elem.544" }
%"struct.std::__1::__compressed_pair_elem.544" = type { %"class.v8::internal::Object"* }
%"class.v8::internal::SwissNameDictionary" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::Handle<v8::internal::SwissNameDictionary>::ObjectRef" = type { %"class.v8::internal::SwissNameDictionary" }
%"class.v8::internal::FactoryBase.1048" = type { i8 }
%"class.v8::internal::FactoryBase" = type { i8 }
%"class.std::__1::vector.1133" = type { %"class.std::__1::__vector_base.1134" }
%"class.std::__1::__vector_base.1134" = type { %struct.Entry*, %struct.Entry*, %"class.std::__1::__compressed_pair.1135" }
%struct.Entry = type <{ %"class.v8::internal::Name", %"class.v8::internal::Object", %"class.v8::internal::PropertyDetails", [4 x i8] }>
%"class.v8::internal::PropertyDetails" = type { i32 }
%"class.std::__1::__compressed_pair.1135" = type { %"struct.std::__1::__compressed_pair_elem.1136" }
%"struct.std::__1::__compressed_pair_elem.1136" = type { %struct.Entry* }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZN2v88internal19SwissNameDictionary10InitializeINS0_7IsolateEEEvPT_NS0_9ByteArrayEi = comdat any

$_ZN2v88internal19SwissNameDictionary10InitializeINS0_12LocalIsolateEEEvPT_NS0_9ByteArrayEi = comdat any

$_ZN2v88internal19SwissNameDictionary6RehashINS0_12LocalIsolateEEENS0_6HandleIS1_EEPT_S5_i = comdat any

$_ZN2v88internal19SwissNameDictionary11AddInternalENS0_4NameENS0_6ObjectENS0_15PropertyDetailsE = comdat any

$_ZN2v88internal19SwissNameDictionary6RehashINS0_7IsolateEEENS0_6HandleIS1_EEPT_S5_i = comdat any

$_ZN2v88internal19SwissNameDictionary19ClearDataTableEntryEPNS0_7IsolateEi = comdat any

@_ZN2v88internal19SwissNameDictionary16kInitialCapacityE = hidden local_unnamed_addr constant i32 4, align 4
@_ZN2v88internal19SwissNameDictionary11kGroupWidthE = hidden local_unnamed_addr constant i32 16, align 4
@_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E = external local_unnamed_addr global %"class.v8::internal::SoleReadOnlyHeap"*, align 8

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN2v88internal19SwissNameDictionary10InitializeINS0_7IsolateEEEvPT_NS0_9ByteArrayEi(%"class.v8::internal::SwissNameDictionary"*, %"class.v8::internal::Isolate"*, i64, i32) local_unnamed_addr #0 comdat align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::SwissNameDictionary", %"class.v8::internal::SwissNameDictionary"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = add i64 %6, 7
  %8 = inttoptr i64 %7 to i32*
  store i32 %3, i32* %8, align 4
  %9 = load i64, i64* %5, align 8
  %10 = add i64 %9, 3
  %11 = inttoptr i64 %10 to i32*
  store i32 0, i32* %11, align 4
  %12 = load i64, i64* %5, align 8
  %13 = add i64 %12, 7
  %14 = inttoptr i64 %13 to i32*
  %15 = load i32, i32* %14, align 4
  %16 = shl i32 %15, 3
  %17 = sext i32 %16 to i64
  %18 = add i64 %12, 15
  %19 = add i64 %18, %17
  %20 = inttoptr i64 %19 to i8*
  %21 = add nsw i32 %3, 16
  %22 = sext i32 %21 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %20, i8 -128, i64 %22, i1 false)
  %23 = load i64, i64* %5, align 8
  %24 = add i64 %23, 15
  %25 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 0, i32 7, i32 0, i64 5
  %26 = load i64, i64* %25, align 8
  %27 = shl nsw i32 %3, 1
  %28 = sext i32 %27 to i64
  %29 = inttoptr i64 %24 to i32*
  %30 = trunc i64 %26 to i32
  %31 = tail call { i64, i32* } asm sideeffect "cld;rep ; stosl", "=&{cx},=&{di},{ax},0,1,~{memory},~{cc},~{dirflag},~{fpsr},~{flags}"(i32 %30, i64 %28, i32* %29) #9, !srcloc !2
  %32 = load i64, i64* %5, align 8
  %33 = add i64 %32, 11
  %34 = inttoptr i64 %33 to i32*
  %35 = trunc i64 %2 to i32
  store atomic volatile i32 %35, i32* %34 monotonic, align 4
  %36 = load i64, i64* %5, align 8
  %37 = add i64 %36, 11
  %38 = and i64 %2, 1
  %39 = icmp eq i64 %38, 0
  br i1 %39, label %53, label %40

40:                                               ; preds = %4
  %41 = and i64 %36, -262144
  %42 = or i64 %41, 8
  %43 = inttoptr i64 %42 to i64*
  %44 = load i64, i64* %43, align 8
  %45 = and i64 %44, 262144
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %53, label %47

47:                                               ; preds = %40
  %48 = or i64 %41, 16
  %49 = inttoptr i64 %48 to %"class.v8::internal::Heap"**
  %50 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %49, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %50, i64 %36, i64 %37, i64 %2) #9
  %51 = load i64, i64* %5, align 8
  %52 = add i64 %51, 11
  br label %53

53:                                               ; preds = %47, %40, %4
  %54 = phi i64 [ %52, %47 ], [ %37, %40 ], [ %37, %4 ]
  %55 = phi i64 [ %51, %47 ], [ %36, %40 ], [ %36, %4 ]
  %56 = and i64 %2, -262144
  %57 = or i64 %56, 8
  %58 = inttoptr i64 %57 to i64*
  %59 = load i64, i64* %58, align 8
  %60 = and i64 %59, 24
  %61 = icmp eq i64 %60, 0
  br i1 %61, label %72, label %62

62:                                               ; preds = %53
  %63 = and i64 %55, -262144
  %64 = or i64 %63, 8
  %65 = inttoptr i64 %64 to i64*
  %66 = load i64, i64* %65, align 8
  %67 = and i64 %66, 24
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %69, label %72

69:                                               ; preds = %62
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %55, i64 %54, i64 %2) #9
  %70 = load i64, i64* %5, align 8
  %71 = add i64 %70, 11
  br label %72

72:                                               ; preds = %53, %62, %69
  %73 = phi i64 [ %54, %53 ], [ %54, %62 ], [ %71, %69 ]
  %74 = phi i64 [ %55, %53 ], [ %55, %62 ], [ %70, %69 ]
  %75 = add i64 %74, 7
  %76 = inttoptr i64 %75 to i32*
  %77 = load i32, i32* %76, align 4
  %78 = and i64 %74, -4294967296
  %79 = inttoptr i64 %73 to i32*
  %80 = load i32, i32* %79, align 4
  %81 = zext i32 %80 to i64
  %82 = or i64 %78, %81
  %83 = icmp slt i32 %77, 257
  br i1 %83, label %84, label %87

84:                                               ; preds = %72
  %85 = add i64 %82, 7
  %86 = inttoptr i64 %85 to i8*
  store i8 0, i8* %86, align 1
  br label %94

87:                                               ; preds = %72
  %88 = icmp slt i32 %77, 65537
  %89 = add i64 %82, 7
  br i1 %88, label %90, label %92

90:                                               ; preds = %87
  %91 = inttoptr i64 %89 to i16*
  store i16 0, i16* %91, align 2
  br label %94

92:                                               ; preds = %87
  %93 = inttoptr i64 %89 to i32*
  store i32 0, i32* %93, align 4
  br label %94

94:                                               ; preds = %84, %90, %92
  %95 = load i64, i64* %5, align 8
  %96 = add i64 %95, 7
  %97 = inttoptr i64 %96 to i32*
  %98 = load i32, i32* %97, align 4
  %99 = and i64 %95, -4294967296
  %100 = add i64 %95, 11
  %101 = inttoptr i64 %100 to i32*
  %102 = load i32, i32* %101, align 4
  %103 = zext i32 %102 to i64
  %104 = or i64 %99, %103
  %105 = icmp slt i32 %98, 257
  br i1 %105, label %106, label %110

106:                                              ; preds = %94
  %107 = add i64 %104, 7
  %108 = inttoptr i64 %107 to i8*
  %109 = getelementptr inbounds i8, i8* %108, i64 1
  store i8 0, i8* %109, align 1
  br label %119

110:                                              ; preds = %94
  %111 = icmp slt i32 %98, 65537
  %112 = add i64 %104, 7
  br i1 %111, label %113, label %116

113:                                              ; preds = %110
  %114 = inttoptr i64 %112 to i16*
  %115 = getelementptr inbounds i16, i16* %114, i64 1
  store i16 0, i16* %115, align 2
  br label %119

116:                                              ; preds = %110
  %117 = inttoptr i64 %112 to i32*
  %118 = getelementptr inbounds i32, i32* %117, i64 1
  store i32 0, i32* %118, align 4
  br label %119

119:                                              ; preds = %106, %113, %116
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN2v88internal19SwissNameDictionary10InitializeINS0_12LocalIsolateEEEvPT_NS0_9ByteArrayEi(%"class.v8::internal::SwissNameDictionary"*, %"class.v8::internal::LocalIsolate"*, i64, i32) local_unnamed_addr #0 comdat align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::LocalIsolate", %"class.v8::internal::LocalIsolate"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %6 = load i64*, i64** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::SwissNameDictionary", %"class.v8::internal::SwissNameDictionary"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %8 = load i64, i64* %7, align 8
  %9 = add i64 %8, 7
  %10 = inttoptr i64 %9 to i32*
  store i32 %3, i32* %10, align 4
  %11 = load i64, i64* %7, align 8
  %12 = add i64 %11, 3
  %13 = inttoptr i64 %12 to i32*
  store i32 0, i32* %13, align 4
  %14 = load i64, i64* %7, align 8
  %15 = add i64 %14, 7
  %16 = inttoptr i64 %15 to i32*
  %17 = load i32, i32* %16, align 4
  %18 = shl i32 %17, 3
  %19 = sext i32 %18 to i64
  %20 = add i64 %14, 15
  %21 = add i64 %20, %19
  %22 = inttoptr i64 %21 to i8*
  %23 = add nsw i32 %3, 16
  %24 = sext i32 %23 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %22, i8 -128, i64 %24, i1 false)
  %25 = load i64, i64* %7, align 8
  %26 = add i64 %25, 15
  %27 = getelementptr inbounds i64, i64* %6, i64 5
  %28 = load i64, i64* %27, align 8
  %29 = shl nsw i32 %3, 1
  %30 = sext i32 %29 to i64
  %31 = inttoptr i64 %26 to i32*
  %32 = trunc i64 %28 to i32
  %33 = tail call { i64, i32* } asm sideeffect "cld;rep ; stosl", "=&{cx},=&{di},{ax},0,1,~{memory},~{cc},~{dirflag},~{fpsr},~{flags}"(i32 %32, i64 %30, i32* %31) #9, !srcloc !2
  %34 = load i64, i64* %7, align 8
  %35 = add i64 %34, 11
  %36 = inttoptr i64 %35 to i32*
  %37 = trunc i64 %2 to i32
  store atomic volatile i32 %37, i32* %36 monotonic, align 4
  %38 = load i64, i64* %7, align 8
  %39 = add i64 %38, 11
  %40 = and i64 %2, 1
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %55, label %42

42:                                               ; preds = %4
  %43 = and i64 %38, -262144
  %44 = or i64 %43, 8
  %45 = inttoptr i64 %44 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = and i64 %46, 262144
  %48 = icmp eq i64 %47, 0
  br i1 %48, label %55, label %49

49:                                               ; preds = %42
  %50 = or i64 %43, 16
  %51 = inttoptr i64 %50 to %"class.v8::internal::Heap"**
  %52 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %51, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %52, i64 %38, i64 %39, i64 %2) #9
  %53 = load i64, i64* %7, align 8
  %54 = add i64 %53, 11
  br label %55

55:                                               ; preds = %49, %42, %4
  %56 = phi i64 [ %54, %49 ], [ %39, %42 ], [ %39, %4 ]
  %57 = phi i64 [ %53, %49 ], [ %38, %42 ], [ %38, %4 ]
  %58 = and i64 %2, -262144
  %59 = or i64 %58, 8
  %60 = inttoptr i64 %59 to i64*
  %61 = load i64, i64* %60, align 8
  %62 = and i64 %61, 24
  %63 = icmp eq i64 %62, 0
  br i1 %63, label %74, label %64

64:                                               ; preds = %55
  %65 = and i64 %57, -262144
  %66 = or i64 %65, 8
  %67 = inttoptr i64 %66 to i64*
  %68 = load i64, i64* %67, align 8
  %69 = and i64 %68, 24
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %71, label %74

71:                                               ; preds = %64
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %57, i64 %56, i64 %2) #9
  %72 = load i64, i64* %7, align 8
  %73 = add i64 %72, 11
  br label %74

74:                                               ; preds = %55, %64, %71
  %75 = phi i64 [ %56, %55 ], [ %56, %64 ], [ %73, %71 ]
  %76 = phi i64 [ %57, %55 ], [ %57, %64 ], [ %72, %71 ]
  %77 = add i64 %76, 7
  %78 = inttoptr i64 %77 to i32*
  %79 = load i32, i32* %78, align 4
  %80 = and i64 %76, -4294967296
  %81 = inttoptr i64 %75 to i32*
  %82 = load i32, i32* %81, align 4
  %83 = zext i32 %82 to i64
  %84 = or i64 %80, %83
  %85 = icmp slt i32 %79, 257
  br i1 %85, label %86, label %89

86:                                               ; preds = %74
  %87 = add i64 %84, 7
  %88 = inttoptr i64 %87 to i8*
  store i8 0, i8* %88, align 1
  br label %96

89:                                               ; preds = %74
  %90 = icmp slt i32 %79, 65537
  %91 = add i64 %84, 7
  br i1 %90, label %92, label %94

92:                                               ; preds = %89
  %93 = inttoptr i64 %91 to i16*
  store i16 0, i16* %93, align 2
  br label %96

94:                                               ; preds = %89
  %95 = inttoptr i64 %91 to i32*
  store i32 0, i32* %95, align 4
  br label %96

96:                                               ; preds = %86, %92, %94
  %97 = load i64, i64* %7, align 8
  %98 = add i64 %97, 7
  %99 = inttoptr i64 %98 to i32*
  %100 = load i32, i32* %99, align 4
  %101 = and i64 %97, -4294967296
  %102 = add i64 %97, 11
  %103 = inttoptr i64 %102 to i32*
  %104 = load i32, i32* %103, align 4
  %105 = zext i32 %104 to i64
  %106 = or i64 %101, %105
  %107 = icmp slt i32 %100, 257
  br i1 %107, label %108, label %112

108:                                              ; preds = %96
  %109 = add i64 %106, 7
  %110 = inttoptr i64 %109 to i8*
  %111 = getelementptr inbounds i8, i8* %110, i64 1
  store i8 0, i8* %111, align 1
  br label %121

112:                                              ; preds = %96
  %113 = icmp slt i32 %100, 65537
  %114 = add i64 %106, 7
  br i1 %113, label %115, label %118

115:                                              ; preds = %112
  %116 = inttoptr i64 %114 to i16*
  %117 = getelementptr inbounds i16, i16* %116, i64 1
  store i16 0, i16* %117, align 2
  br label %121

118:                                              ; preds = %112
  %119 = inttoptr i64 %114 to i32*
  %120 = getelementptr inbounds i32, i32* %119, i64 1
  store i32 0, i32* %120, align 4
  br label %121

121:                                              ; preds = %108, %115, %118
  ret void
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64* @_ZN2v88internal19SwissNameDictionary6RehashINS0_12LocalIsolateEEENS0_6HandleIS1_EEPT_S5_i(%"class.v8::internal::LocalIsolate"*, i64*, i32) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca %"class.v8::internal::Handle<v8::internal::SwissNameDictionary>::ObjectRef", align 8
  %5 = getelementptr inbounds %"class.v8::internal::LocalIsolate", %"class.v8::internal::LocalIsolate"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %6 = load i64*, i64** %5, align 8
  %7 = bitcast %"class.v8::internal::LocalIsolate"* %0 to %"class.v8::internal::FactoryBase.1048"*
  %8 = load i64, i64* %1, align 8
  %9 = and i64 %8, -262144
  %10 = inttoptr i64 %9 to %"class.v8::internal::BasicMemoryChunk"*
  %11 = getelementptr inbounds %"class.v8::internal::BasicMemoryChunk", %"class.v8::internal::BasicMemoryChunk"* %10, i64 0, i32 1
  %12 = load i64, i64* %11, align 8
  %13 = and i64 %12, 24
  %14 = icmp eq i64 %13, 0
  %15 = zext i1 %14 to i8
  %16 = tail call i64* @_ZN2v88internal11FactoryBaseINS0_12LocalFactoryEE34NewSwissNameDictionaryWithCapacityEiNS0_14AllocationTypeE(%"class.v8::internal::FactoryBase.1048"* %7, i32 %2, i8 zeroext %15) #9
  %17 = load i64, i64* %16, align 8
  %18 = load i64, i64* %1, align 8
  %19 = add i64 %18, 7
  %20 = inttoptr i64 %19 to i32*
  %21 = load i32, i32* %20, align 4
  %22 = and i64 %18, -4294967296
  %23 = add i64 %18, 11
  %24 = inttoptr i64 %23 to i32*
  %25 = load i32, i32* %24, align 4
  %26 = zext i32 %25 to i64
  %27 = or i64 %22, %26
  %28 = icmp slt i32 %21, 257
  br i1 %28, label %29, label %34

29:                                               ; preds = %3
  %30 = add i64 %27, 7
  %31 = inttoptr i64 %30 to i8*
  %32 = load i8, i8* %31, align 1
  %33 = zext i8 %32 to i32
  br label %44

34:                                               ; preds = %3
  %35 = icmp slt i32 %21, 65537
  %36 = add i64 %27, 7
  br i1 %35, label %37, label %41

37:                                               ; preds = %34
  %38 = inttoptr i64 %36 to i16*
  %39 = load i16, i16* %38, align 2
  %40 = zext i16 %39 to i32
  br label %44

41:                                               ; preds = %34
  %42 = inttoptr i64 %36 to i32*
  %43 = load i32, i32* %42, align 4
  br label %44

44:                                               ; preds = %29, %37, %41
  %45 = phi i32 [ %33, %29 ], [ %40, %37 ], [ %43, %41 ]
  %46 = add i64 %17, 7
  %47 = inttoptr i64 %46 to i32*
  %48 = load i32, i32* %47, align 4
  %49 = and i64 %17, -4294967296
  %50 = add i64 %17, 11
  %51 = inttoptr i64 %50 to i32*
  %52 = load i32, i32* %51, align 4
  %53 = zext i32 %52 to i64
  %54 = or i64 %49, %53
  %55 = icmp slt i32 %48, 257
  br i1 %55, label %56, label %60

56:                                               ; preds = %44
  %57 = add i64 %54, 7
  %58 = inttoptr i64 %57 to i8*
  %59 = trunc i32 %45 to i8
  store i8 %59, i8* %58, align 1
  br label %68

60:                                               ; preds = %44
  %61 = icmp slt i32 %48, 65537
  %62 = add i64 %54, 7
  br i1 %61, label %63, label %66

63:                                               ; preds = %60
  %64 = inttoptr i64 %62 to i16*
  %65 = trunc i32 %45 to i16
  store i16 %65, i16* %64, align 2
  br label %68

66:                                               ; preds = %60
  %67 = inttoptr i64 %62 to i32*
  store i32 %45, i32* %67, align 4
  br label %68

68:                                               ; preds = %56, %63, %66
  %69 = getelementptr inbounds i64, i64* %6, i64 5
  %70 = bitcast %"class.v8::internal::Handle<v8::internal::SwissNameDictionary>::ObjectRef"* %4 to i8*
  %71 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::SwissNameDictionary>::ObjectRef", %"class.v8::internal::Handle<v8::internal::SwissNameDictionary>::ObjectRef"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %72 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::SwissNameDictionary>::ObjectRef", %"class.v8::internal::Handle<v8::internal::SwissNameDictionary>::ObjectRef"* %4, i64 0, i32 0
  br label %73

73:                                               ; preds = %208, %68
  %74 = phi i64 [ %210, %208 ], [ 0, %68 ]
  %75 = phi i32 [ %209, %208 ], [ 0, %68 ]
  %76 = load i64, i64* %1, align 8
  %77 = add i64 %76, 7
  %78 = inttoptr i64 %77 to i32*
  %79 = load i32, i32* %78, align 4
  %80 = and i64 %76, -4294967296
  %81 = add i64 %76, 11
  %82 = inttoptr i64 %81 to i32*
  %83 = load i32, i32* %82, align 4
  %84 = zext i32 %83 to i64
  %85 = or i64 %80, %84
  %86 = icmp slt i32 %79, 257
  br i1 %86, label %90, label %87

87:                                               ; preds = %73
  %88 = icmp slt i32 %79, 65537
  %89 = add i64 %85, 7
  br i1 %88, label %98, label %105

90:                                               ; preds = %73
  %91 = add i64 %85, 7
  %92 = inttoptr i64 %91 to i8*
  %93 = load i8, i8* %92, align 1
  %94 = zext i8 %93 to i32
  %95 = getelementptr inbounds i8, i8* %92, i64 1
  %96 = load i8, i8* %95, align 1
  %97 = zext i8 %96 to i32
  br label %110

98:                                               ; preds = %87
  %99 = inttoptr i64 %89 to i16*
  %100 = load i16, i16* %99, align 2
  %101 = zext i16 %100 to i32
  %102 = getelementptr inbounds i16, i16* %99, i64 1
  %103 = load i16, i16* %102, align 2
  %104 = zext i16 %103 to i32
  br label %110

105:                                              ; preds = %87
  %106 = inttoptr i64 %89 to i32*
  %107 = load i32, i32* %106, align 4
  %108 = getelementptr inbounds i32, i32* %106, i64 1
  %109 = load i32, i32* %108, align 4
  br label %110

110:                                              ; preds = %90, %98, %105
  %111 = phi i32 [ %94, %90 ], [ %101, %98 ], [ %107, %105 ]
  %112 = phi i32 [ %97, %90 ], [ %104, %98 ], [ %109, %105 ]
  %113 = add nsw i32 %112, %111
  %114 = sext i32 %113 to i64
  %115 = icmp slt i64 %74, %114
  br i1 %115, label %123, label %116

116:                                              ; preds = %110
  %117 = load i64, i64* %16, align 8
  %118 = add i64 %76, 3
  %119 = inttoptr i64 %118 to i32*
  %120 = load i32, i32* %119, align 4
  %121 = add i64 %117, 3
  %122 = inttoptr i64 %121 to i32*
  store i32 %120, i32* %122, align 4
  ret i64* %16

123:                                              ; preds = %110
  %124 = add nuw nsw i64 %74, 2
  br i1 %86, label %125, label %131

125:                                              ; preds = %123
  %126 = add i64 %85, 7
  %127 = inttoptr i64 %126 to i8*
  %128 = getelementptr inbounds i8, i8* %127, i64 %124
  %129 = load i8, i8* %128, align 1
  %130 = zext i8 %129 to i32
  br label %143

131:                                              ; preds = %123
  %132 = icmp slt i32 %79, 65537
  %133 = add i64 %85, 7
  br i1 %132, label %134, label %139

134:                                              ; preds = %131
  %135 = inttoptr i64 %133 to i16*
  %136 = getelementptr inbounds i16, i16* %135, i64 %124
  %137 = load i16, i16* %136, align 2
  %138 = zext i16 %137 to i32
  br label %143

139:                                              ; preds = %131
  %140 = inttoptr i64 %133 to i32*
  %141 = getelementptr inbounds i32, i32* %140, i64 %124
  %142 = load i32, i32* %141, align 4
  br label %143

143:                                              ; preds = %125, %134, %139
  %144 = phi i32 [ %130, %125 ], [ %138, %134 ], [ %142, %139 ]
  %145 = shl i32 %144, 3
  %146 = sext i32 %145 to i64
  %147 = add i64 %76, 15
  %148 = add i64 %147, %146
  %149 = inttoptr i64 %148 to i32*
  %150 = load atomic i32, i32* %149 monotonic, align 4
  %151 = load i64, i64* %69, align 8
  %152 = trunc i64 %151 to i32
  %153 = icmp eq i32 %150, %152
  br i1 %153, label %208, label %154

154:                                              ; preds = %143
  %155 = zext i32 %150 to i64
  %156 = or i64 %80, %155
  %157 = or i32 %145, 4
  %158 = sext i32 %157 to i64
  %159 = add i64 %147, %158
  %160 = inttoptr i64 %159 to i32*
  %161 = load atomic i32, i32* %160 monotonic, align 4
  %162 = zext i32 %161 to i64
  %163 = or i64 %80, %162
  %164 = mul i32 %79, 9
  %165 = add i32 %164, 32
  %166 = sext i32 %165 to i64
  %167 = add i64 %76, -1
  %168 = add i64 %167, %166
  %169 = inttoptr i64 %168 to i8*
  %170 = sext i32 %144 to i64
  %171 = getelementptr inbounds i8, i8* %169, i64 %170
  %172 = load i8, i8* %171, align 1
  %173 = zext i8 %172 to i32
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %70) #9
  %174 = load i64, i64* %16, align 8
  store i64 %174, i64* %71, align 8
  %175 = call i32 @_ZN2v88internal19SwissNameDictionary11AddInternalENS0_4NameENS0_6ObjectENS0_15PropertyDetailsE(%"class.v8::internal::SwissNameDictionary"* nonnull %72, i64 %156, i64 %163, i32 %173)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %70) #9
  %176 = load i64, i64* %16, align 8
  %177 = add nsw i32 %75, 2
  %178 = add i64 %176, 7
  %179 = inttoptr i64 %178 to i32*
  %180 = load i32, i32* %179, align 4
  %181 = and i64 %176, -4294967296
  %182 = add i64 %176, 11
  %183 = inttoptr i64 %182 to i32*
  %184 = load i32, i32* %183, align 4
  %185 = zext i32 %184 to i64
  %186 = or i64 %181, %185
  %187 = icmp slt i32 %180, 257
  br i1 %187, label %188, label %194

188:                                              ; preds = %154
  %189 = add i64 %186, 7
  %190 = inttoptr i64 %189 to i8*
  %191 = trunc i32 %175 to i8
  %192 = sext i32 %177 to i64
  %193 = getelementptr inbounds i8, i8* %190, i64 %192
  store i8 %191, i8* %193, align 1
  br label %206

194:                                              ; preds = %154
  %195 = icmp slt i32 %180, 65537
  %196 = add i64 %186, 7
  br i1 %195, label %197, label %202

197:                                              ; preds = %194
  %198 = inttoptr i64 %196 to i16*
  %199 = trunc i32 %175 to i16
  %200 = sext i32 %177 to i64
  %201 = getelementptr inbounds i16, i16* %198, i64 %200
  store i16 %199, i16* %201, align 2
  br label %206

202:                                              ; preds = %194
  %203 = inttoptr i64 %196 to i32*
  %204 = sext i32 %177 to i64
  %205 = getelementptr inbounds i32, i32* %203, i64 %204
  store i32 %175, i32* %205, align 4
  br label %206

206:                                              ; preds = %188, %197, %202
  %207 = add nsw i32 %75, 1
  br label %208

208:                                              ; preds = %143, %206
  %209 = phi i32 [ %207, %206 ], [ %75, %143 ]
  %210 = add nuw nsw i64 %74, 1
  br label %73
}

declare i64* @_ZN2v88internal11FactoryBaseINS0_12LocalFactoryEE34NewSwissNameDictionaryWithCapacityEiNS0_14AllocationTypeE(%"class.v8::internal::FactoryBase.1048"*, i32, i8 zeroext) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN2v88internal19SwissNameDictionary11AddInternalENS0_4NameENS0_6ObjectENS0_15PropertyDetailsE(%"class.v8::internal::SwissNameDictionary"*, i64, i64, i32) local_unnamed_addr #3 comdat align 2 {
  %5 = add i64 %1, 3
  %6 = inttoptr i64 %5 to i32*
  %7 = load i32, i32* %6, align 4
  %8 = lshr i32 %7, 2
  %9 = getelementptr inbounds %"class.v8::internal::SwissNameDictionary", %"class.v8::internal::SwissNameDictionary"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %10 = load i64, i64* %9, align 8
  %11 = add i64 %10, 7
  %12 = inttoptr i64 %11 to i32*
  %13 = load i32, i32* %12, align 4
  %14 = icmp eq i32 %13, 0
  %15 = zext i1 %14 to i32
  %16 = or i32 %13, %15
  %17 = lshr i32 %7, 9
  %18 = add nsw i32 %16, -1
  %19 = and i32 %18, %17
  %20 = shl i32 %13, 3
  %21 = sext i32 %20 to i64
  %22 = add i64 %10, 15
  %23 = add i64 %22, %21
  %24 = inttoptr i64 %23 to i8*
  %25 = zext i32 %19 to i64
  %26 = getelementptr inbounds i8, i8* %24, i64 %25
  %27 = bitcast i8* %26 to <16 x i8>*
  %28 = load <16 x i8>, <16 x i8>* %27, align 1
  %29 = icmp eq <16 x i8> %28, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %30 = bitcast <16 x i1> %29 to i16
  %31 = icmp eq i16 %30, 0
  br i1 %31, label %32, label %45

32:                                               ; preds = %4, %32
  %33 = phi i32 [ %37, %32 ], [ %19, %4 ]
  %34 = phi i32 [ %35, %32 ], [ 0, %4 ]
  %35 = add i32 %34, 16
  %36 = add i32 %35, %33
  %37 = and i32 %36, %18
  %38 = zext i32 %37 to i64
  %39 = getelementptr inbounds i8, i8* %24, i64 %38
  %40 = bitcast i8* %39 to <16 x i8>*
  %41 = load <16 x i8>, <16 x i8>* %40, align 1
  %42 = icmp eq <16 x i8> %41, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %43 = bitcast <16 x i1> %42 to i16
  %44 = icmp eq i16 %43, 0
  br i1 %44, label %32, label %45

45:                                               ; preds = %32, %4
  %46 = phi i32 [ %19, %4 ], [ %37, %32 ]
  %47 = phi i16 [ %30, %4 ], [ %43, %32 ]
  %48 = zext i16 %47 to i32
  %49 = tail call i32 @llvm.cttz.i32(i32 %48, i1 true) #9, !range !3
  %50 = add i32 %49, %46
  %51 = and i32 %50, %18
  %52 = trunc i32 %8 to i8
  %53 = and i8 %52, 127
  %54 = sext i32 %51 to i64
  %55 = getelementptr inbounds i8, i8* %24, i64 %54
  store i8 %53, i8* %55, align 1
  %56 = add nsw i32 %13, -1
  %57 = add i32 %51, -16
  %58 = and i32 %57, %56
  %59 = and i32 %56, 15
  %60 = add nuw nsw i32 %59, 1
  %61 = add i32 %60, %58
  %62 = sext i32 %61 to i64
  %63 = getelementptr inbounds i8, i8* %24, i64 %62
  store i8 %53, i8* %63, align 1
  %64 = shl i32 %51, 3
  %65 = load i64, i64* %9, align 8
  %66 = sext i32 %64 to i64
  %67 = add nsw i64 %66, 15
  %68 = add i64 %67, %65
  %69 = inttoptr i64 %68 to i32*
  %70 = trunc i64 %1 to i32
  store atomic volatile i32 %70, i32* %69 monotonic, align 4
  %71 = load i64, i64* %9, align 8
  %72 = add i64 %67, %71
  %73 = and i64 %1, 1
  %74 = icmp eq i64 %73, 0
  br i1 %74, label %106, label %75

75:                                               ; preds = %45
  %76 = and i64 %71, -262144
  %77 = or i64 %76, 8
  %78 = inttoptr i64 %77 to i64*
  %79 = load i64, i64* %78, align 8
  %80 = and i64 %79, 262144
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %88, label %82

82:                                               ; preds = %75
  %83 = or i64 %76, 16
  %84 = inttoptr i64 %83 to %"class.v8::internal::Heap"**
  %85 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %84, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %85, i64 %71, i64 %72, i64 %1) #9
  %86 = load i64, i64* %9, align 8
  %87 = add i64 %86, %67
  br label %88

88:                                               ; preds = %82, %75
  %89 = phi i64 [ %72, %75 ], [ %87, %82 ]
  %90 = phi i64 [ %71, %75 ], [ %86, %82 ]
  %91 = and i64 %1, -262144
  %92 = or i64 %91, 8
  %93 = inttoptr i64 %92 to i64*
  %94 = load i64, i64* %93, align 8
  %95 = and i64 %94, 24
  %96 = icmp eq i64 %95, 0
  br i1 %96, label %106, label %97

97:                                               ; preds = %88
  %98 = and i64 %90, -262144
  %99 = or i64 %98, 8
  %100 = inttoptr i64 %99 to i64*
  %101 = load i64, i64* %100, align 8
  %102 = and i64 %101, 24
  %103 = icmp eq i64 %102, 0
  br i1 %103, label %104, label %106

104:                                              ; preds = %97
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %90, i64 %89, i64 %1) #9
  %105 = load i64, i64* %9, align 8
  br label %106

106:                                              ; preds = %45, %88, %97, %104
  %107 = phi i64 [ %71, %45 ], [ %90, %88 ], [ %90, %97 ], [ %105, %104 ]
  %108 = or i32 %64, 4
  %109 = sext i32 %108 to i64
  %110 = add nsw i64 %109, 15
  %111 = add i64 %107, %110
  %112 = inttoptr i64 %111 to i32*
  %113 = trunc i64 %2 to i32
  store atomic volatile i32 %113, i32* %112 monotonic, align 4
  %114 = load i64, i64* %9, align 8
  %115 = add i64 %114, %110
  %116 = and i64 %2, 1
  %117 = icmp eq i64 %116, 0
  br i1 %117, label %149, label %118

118:                                              ; preds = %106
  %119 = and i64 %114, -262144
  %120 = or i64 %119, 8
  %121 = inttoptr i64 %120 to i64*
  %122 = load i64, i64* %121, align 8
  %123 = and i64 %122, 262144
  %124 = icmp eq i64 %123, 0
  br i1 %124, label %131, label %125

125:                                              ; preds = %118
  %126 = or i64 %119, 16
  %127 = inttoptr i64 %126 to %"class.v8::internal::Heap"**
  %128 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %127, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %128, i64 %114, i64 %115, i64 %2) #9
  %129 = load i64, i64* %9, align 8
  %130 = add i64 %129, %110
  br label %131

131:                                              ; preds = %125, %118
  %132 = phi i64 [ %115, %118 ], [ %130, %125 ]
  %133 = phi i64 [ %114, %118 ], [ %129, %125 ]
  %134 = and i64 %2, -262144
  %135 = or i64 %134, 8
  %136 = inttoptr i64 %135 to i64*
  %137 = load i64, i64* %136, align 8
  %138 = and i64 %137, 24
  %139 = icmp eq i64 %138, 0
  br i1 %139, label %149, label %140

140:                                              ; preds = %131
  %141 = and i64 %133, -262144
  %142 = or i64 %141, 8
  %143 = inttoptr i64 %142 to i64*
  %144 = load i64, i64* %143, align 8
  %145 = and i64 %144, 24
  %146 = icmp eq i64 %145, 0
  br i1 %146, label %147, label %149

147:                                              ; preds = %140
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %133, i64 %132, i64 %2) #9
  %148 = load i64, i64* %9, align 8
  br label %149

149:                                              ; preds = %106, %131, %140, %147
  %150 = phi i64 [ %114, %106 ], [ %133, %131 ], [ %133, %140 ], [ %148, %147 ]
  %151 = trunc i32 %3 to i8
  %152 = add i64 %150, 7
  %153 = inttoptr i64 %152 to i32*
  %154 = load i32, i32* %153, align 4
  %155 = mul i32 %154, 9
  %156 = add i32 %155, 32
  %157 = sext i32 %156 to i64
  %158 = add i64 %150, -1
  %159 = add i64 %158, %157
  %160 = inttoptr i64 %159 to i8*
  %161 = getelementptr inbounds i8, i8* %160, i64 %54
  store i8 %151, i8* %161, align 1
  ret i32 %51
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64* @_ZN2v88internal19SwissNameDictionary6RehashINS0_7IsolateEEENS0_6HandleIS1_EEPT_S5_i(%"class.v8::internal::Isolate"*, i64*, i32) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca %"class.v8::internal::Handle<v8::internal::SwissNameDictionary>::ObjectRef", align 8
  %5 = bitcast %"class.v8::internal::Isolate"* %0 to %"class.v8::internal::FactoryBase"*
  %6 = load i64, i64* %1, align 8
  %7 = and i64 %6, -262144
  %8 = inttoptr i64 %7 to %"class.v8::internal::BasicMemoryChunk"*
  %9 = getelementptr inbounds %"class.v8::internal::BasicMemoryChunk", %"class.v8::internal::BasicMemoryChunk"* %8, i64 0, i32 1
  %10 = load i64, i64* %9, align 8
  %11 = and i64 %10, 24
  %12 = icmp eq i64 %11, 0
  %13 = zext i1 %12 to i8
  %14 = tail call i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE34NewSwissNameDictionaryWithCapacityEiNS0_14AllocationTypeE(%"class.v8::internal::FactoryBase"* %5, i32 %2, i8 zeroext %13) #9
  %15 = load i64, i64* %14, align 8
  %16 = load i64, i64* %1, align 8
  %17 = add i64 %16, 7
  %18 = inttoptr i64 %17 to i32*
  %19 = load i32, i32* %18, align 4
  %20 = and i64 %16, -4294967296
  %21 = add i64 %16, 11
  %22 = inttoptr i64 %21 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = zext i32 %23 to i64
  %25 = or i64 %20, %24
  %26 = icmp slt i32 %19, 257
  br i1 %26, label %27, label %32

27:                                               ; preds = %3
  %28 = add i64 %25, 7
  %29 = inttoptr i64 %28 to i8*
  %30 = load i8, i8* %29, align 1
  %31 = zext i8 %30 to i32
  br label %42

32:                                               ; preds = %3
  %33 = icmp slt i32 %19, 65537
  %34 = add i64 %25, 7
  br i1 %33, label %35, label %39

35:                                               ; preds = %32
  %36 = inttoptr i64 %34 to i16*
  %37 = load i16, i16* %36, align 2
  %38 = zext i16 %37 to i32
  br label %42

39:                                               ; preds = %32
  %40 = inttoptr i64 %34 to i32*
  %41 = load i32, i32* %40, align 4
  br label %42

42:                                               ; preds = %27, %35, %39
  %43 = phi i32 [ %31, %27 ], [ %38, %35 ], [ %41, %39 ]
  %44 = add i64 %15, 7
  %45 = inttoptr i64 %44 to i32*
  %46 = load i32, i32* %45, align 4
  %47 = and i64 %15, -4294967296
  %48 = add i64 %15, 11
  %49 = inttoptr i64 %48 to i32*
  %50 = load i32, i32* %49, align 4
  %51 = zext i32 %50 to i64
  %52 = or i64 %47, %51
  %53 = icmp slt i32 %46, 257
  br i1 %53, label %54, label %58

54:                                               ; preds = %42
  %55 = add i64 %52, 7
  %56 = inttoptr i64 %55 to i8*
  %57 = trunc i32 %43 to i8
  store i8 %57, i8* %56, align 1
  br label %66

58:                                               ; preds = %42
  %59 = icmp slt i32 %46, 65537
  %60 = add i64 %52, 7
  br i1 %59, label %61, label %64

61:                                               ; preds = %58
  %62 = inttoptr i64 %60 to i16*
  %63 = trunc i32 %43 to i16
  store i16 %63, i16* %62, align 2
  br label %66

64:                                               ; preds = %58
  %65 = inttoptr i64 %60 to i32*
  store i32 %43, i32* %65, align 4
  br label %66

66:                                               ; preds = %54, %61, %64
  %67 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 0, i32 7, i32 0, i64 5
  %68 = bitcast %"class.v8::internal::Handle<v8::internal::SwissNameDictionary>::ObjectRef"* %4 to i8*
  %69 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::SwissNameDictionary>::ObjectRef", %"class.v8::internal::Handle<v8::internal::SwissNameDictionary>::ObjectRef"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %70 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::SwissNameDictionary>::ObjectRef", %"class.v8::internal::Handle<v8::internal::SwissNameDictionary>::ObjectRef"* %4, i64 0, i32 0
  br label %71

71:                                               ; preds = %206, %66
  %72 = phi i64 [ %208, %206 ], [ 0, %66 ]
  %73 = phi i32 [ %207, %206 ], [ 0, %66 ]
  %74 = load i64, i64* %1, align 8
  %75 = add i64 %74, 7
  %76 = inttoptr i64 %75 to i32*
  %77 = load i32, i32* %76, align 4
  %78 = and i64 %74, -4294967296
  %79 = add i64 %74, 11
  %80 = inttoptr i64 %79 to i32*
  %81 = load i32, i32* %80, align 4
  %82 = zext i32 %81 to i64
  %83 = or i64 %78, %82
  %84 = icmp slt i32 %77, 257
  br i1 %84, label %88, label %85

85:                                               ; preds = %71
  %86 = icmp slt i32 %77, 65537
  %87 = add i64 %83, 7
  br i1 %86, label %96, label %103

88:                                               ; preds = %71
  %89 = add i64 %83, 7
  %90 = inttoptr i64 %89 to i8*
  %91 = load i8, i8* %90, align 1
  %92 = zext i8 %91 to i32
  %93 = getelementptr inbounds i8, i8* %90, i64 1
  %94 = load i8, i8* %93, align 1
  %95 = zext i8 %94 to i32
  br label %108

96:                                               ; preds = %85
  %97 = inttoptr i64 %87 to i16*
  %98 = load i16, i16* %97, align 2
  %99 = zext i16 %98 to i32
  %100 = getelementptr inbounds i16, i16* %97, i64 1
  %101 = load i16, i16* %100, align 2
  %102 = zext i16 %101 to i32
  br label %108

103:                                              ; preds = %85
  %104 = inttoptr i64 %87 to i32*
  %105 = load i32, i32* %104, align 4
  %106 = getelementptr inbounds i32, i32* %104, i64 1
  %107 = load i32, i32* %106, align 4
  br label %108

108:                                              ; preds = %88, %96, %103
  %109 = phi i32 [ %92, %88 ], [ %99, %96 ], [ %105, %103 ]
  %110 = phi i32 [ %95, %88 ], [ %102, %96 ], [ %107, %103 ]
  %111 = add nsw i32 %110, %109
  %112 = sext i32 %111 to i64
  %113 = icmp slt i64 %72, %112
  br i1 %113, label %121, label %114

114:                                              ; preds = %108
  %115 = load i64, i64* %14, align 8
  %116 = add i64 %74, 3
  %117 = inttoptr i64 %116 to i32*
  %118 = load i32, i32* %117, align 4
  %119 = add i64 %115, 3
  %120 = inttoptr i64 %119 to i32*
  store i32 %118, i32* %120, align 4
  ret i64* %14

121:                                              ; preds = %108
  %122 = add nuw nsw i64 %72, 2
  br i1 %84, label %123, label %129

123:                                              ; preds = %121
  %124 = add i64 %83, 7
  %125 = inttoptr i64 %124 to i8*
  %126 = getelementptr inbounds i8, i8* %125, i64 %122
  %127 = load i8, i8* %126, align 1
  %128 = zext i8 %127 to i32
  br label %141

129:                                              ; preds = %121
  %130 = icmp slt i32 %77, 65537
  %131 = add i64 %83, 7
  br i1 %130, label %132, label %137

132:                                              ; preds = %129
  %133 = inttoptr i64 %131 to i16*
  %134 = getelementptr inbounds i16, i16* %133, i64 %122
  %135 = load i16, i16* %134, align 2
  %136 = zext i16 %135 to i32
  br label %141

137:                                              ; preds = %129
  %138 = inttoptr i64 %131 to i32*
  %139 = getelementptr inbounds i32, i32* %138, i64 %122
  %140 = load i32, i32* %139, align 4
  br label %141

141:                                              ; preds = %123, %132, %137
  %142 = phi i32 [ %128, %123 ], [ %136, %132 ], [ %140, %137 ]
  %143 = shl i32 %142, 3
  %144 = sext i32 %143 to i64
  %145 = add i64 %74, 15
  %146 = add i64 %145, %144
  %147 = inttoptr i64 %146 to i32*
  %148 = load atomic i32, i32* %147 monotonic, align 4
  %149 = load i64, i64* %67, align 8
  %150 = trunc i64 %149 to i32
  %151 = icmp eq i32 %148, %150
  br i1 %151, label %206, label %152

152:                                              ; preds = %141
  %153 = zext i32 %148 to i64
  %154 = or i64 %78, %153
  %155 = or i32 %143, 4
  %156 = sext i32 %155 to i64
  %157 = add i64 %145, %156
  %158 = inttoptr i64 %157 to i32*
  %159 = load atomic i32, i32* %158 monotonic, align 4
  %160 = zext i32 %159 to i64
  %161 = or i64 %78, %160
  %162 = mul i32 %77, 9
  %163 = add i32 %162, 32
  %164 = sext i32 %163 to i64
  %165 = add i64 %74, -1
  %166 = add i64 %165, %164
  %167 = inttoptr i64 %166 to i8*
  %168 = sext i32 %142 to i64
  %169 = getelementptr inbounds i8, i8* %167, i64 %168
  %170 = load i8, i8* %169, align 1
  %171 = zext i8 %170 to i32
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %68) #9
  %172 = load i64, i64* %14, align 8
  store i64 %172, i64* %69, align 8
  %173 = call i32 @_ZN2v88internal19SwissNameDictionary11AddInternalENS0_4NameENS0_6ObjectENS0_15PropertyDetailsE(%"class.v8::internal::SwissNameDictionary"* nonnull %70, i64 %154, i64 %161, i32 %171)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %68) #9
  %174 = load i64, i64* %14, align 8
  %175 = add nsw i32 %73, 2
  %176 = add i64 %174, 7
  %177 = inttoptr i64 %176 to i32*
  %178 = load i32, i32* %177, align 4
  %179 = and i64 %174, -4294967296
  %180 = add i64 %174, 11
  %181 = inttoptr i64 %180 to i32*
  %182 = load i32, i32* %181, align 4
  %183 = zext i32 %182 to i64
  %184 = or i64 %179, %183
  %185 = icmp slt i32 %178, 257
  br i1 %185, label %186, label %192

186:                                              ; preds = %152
  %187 = add i64 %184, 7
  %188 = inttoptr i64 %187 to i8*
  %189 = trunc i32 %173 to i8
  %190 = sext i32 %175 to i64
  %191 = getelementptr inbounds i8, i8* %188, i64 %190
  store i8 %189, i8* %191, align 1
  br label %204

192:                                              ; preds = %152
  %193 = icmp slt i32 %178, 65537
  %194 = add i64 %184, 7
  br i1 %193, label %195, label %200

195:                                              ; preds = %192
  %196 = inttoptr i64 %194 to i16*
  %197 = trunc i32 %173 to i16
  %198 = sext i32 %175 to i64
  %199 = getelementptr inbounds i16, i16* %196, i64 %198
  store i16 %197, i16* %199, align 2
  br label %204

200:                                              ; preds = %192
  %201 = inttoptr i64 %194 to i32*
  %202 = sext i32 %175 to i64
  %203 = getelementptr inbounds i32, i32* %201, i64 %202
  store i32 %173, i32* %203, align 4
  br label %204

204:                                              ; preds = %186, %195, %200
  %205 = add nsw i32 %73, 1
  br label %206

206:                                              ; preds = %141, %204
  %207 = phi i32 [ %205, %204 ], [ %73, %141 ]
  %208 = add nuw nsw i64 %72, 1
  br label %71
}

declare i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE34NewSwissNameDictionaryWithCapacityEiNS0_14AllocationTypeE(%"class.v8::internal::FactoryBase"*, i32, i8 zeroext) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal19SwissNameDictionary11DeleteEntryEPNS0_7IsolateENS0_6HandleIS1_EENS0_13InternalIndexE(%"class.v8::internal::Isolate"*, i64*, i64) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.v8::internal::Handle<v8::internal::SwissNameDictionary>::ObjectRef", align 8
  %5 = trunc i64 %2 to i32
  %6 = load i64, i64* %1, align 8
  %7 = add i64 %6, 7
  %8 = inttoptr i64 %7 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = shl i32 %9, 3
  %11 = sext i32 %10 to i64
  %12 = add i64 %6, 15
  %13 = add i64 %12, %11
  %14 = inttoptr i64 %13 to i8*
  %15 = shl i64 %2, 32
  %16 = ashr exact i64 %15, 32
  %17 = getelementptr inbounds i8, i8* %14, i64 %16
  store i8 -2, i8* %17, align 1
  %18 = add nsw i32 %9, -1
  %19 = add i32 %5, -16
  %20 = and i32 %18, %19
  %21 = add i32 %20, 1
  %22 = and i32 %18, 15
  %23 = add i32 %21, %22
  %24 = sext i32 %23 to i64
  %25 = getelementptr inbounds i8, i8* %14, i64 %24
  store i8 -2, i8* %25, align 1
  %26 = bitcast %"class.v8::internal::Handle<v8::internal::SwissNameDictionary>::ObjectRef"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %26) #9
  %27 = load i64, i64* %1, align 8
  %28 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::SwissNameDictionary>::ObjectRef", %"class.v8::internal::Handle<v8::internal::SwissNameDictionary>::ObjectRef"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %27, i64* %28, align 8
  %29 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::SwissNameDictionary>::ObjectRef", %"class.v8::internal::Handle<v8::internal::SwissNameDictionary>::ObjectRef"* %4, i64 0, i32 0
  call void @_ZN2v88internal19SwissNameDictionary19ClearDataTableEntryEPNS0_7IsolateEi(%"class.v8::internal::SwissNameDictionary"* nonnull %29, %"class.v8::internal::Isolate"* %0, i32 %5)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %26) #9
  %30 = load i64, i64* %1, align 8
  %31 = add i64 %30, 7
  %32 = inttoptr i64 %31 to i32*
  %33 = load i32, i32* %32, align 4
  %34 = and i64 %30, -4294967296
  %35 = add i64 %30, 11
  %36 = inttoptr i64 %35 to i32*
  %37 = load i32, i32* %36, align 4
  %38 = zext i32 %37 to i64
  %39 = or i64 %34, %38
  %40 = icmp slt i32 %33, 257
  br i1 %40, label %44, label %41

41:                                               ; preds = %3
  %42 = icmp slt i32 %33, 65537
  %43 = add i64 %39, 7
  br i1 %42, label %49, label %53

44:                                               ; preds = %3
  %45 = add i64 %39, 7
  %46 = inttoptr i64 %45 to i8*
  %47 = load i8, i8* %46, align 1
  %48 = add i8 %47, -1
  store i8 %48, i8* %46, align 1
  br label %57

49:                                               ; preds = %41
  %50 = inttoptr i64 %43 to i16*
  %51 = load i16, i16* %50, align 2
  %52 = add i16 %51, -1
  store i16 %52, i16* %50, align 2
  br label %57

53:                                               ; preds = %41
  %54 = inttoptr i64 %43 to i32*
  %55 = load i32, i32* %54, align 4
  %56 = add nsw i32 %55, -1
  store i32 %56, i32* %54, align 4
  br label %57

57:                                               ; preds = %44, %49, %53
  %58 = load i64, i64* %1, align 8
  %59 = add i64 %58, 7
  %60 = inttoptr i64 %59 to i32*
  %61 = load i32, i32* %60, align 4
  %62 = and i64 %58, -4294967296
  %63 = add i64 %58, 11
  %64 = inttoptr i64 %63 to i32*
  %65 = load i32, i32* %64, align 4
  %66 = zext i32 %65 to i64
  %67 = or i64 %62, %66
  %68 = icmp slt i32 %61, 257
  br i1 %68, label %72, label %69

69:                                               ; preds = %57
  %70 = icmp slt i32 %61, 65537
  %71 = add i64 %67, 7
  br i1 %70, label %78, label %83

72:                                               ; preds = %57
  %73 = add i64 %67, 7
  %74 = inttoptr i64 %73 to i8*
  %75 = getelementptr inbounds i8, i8* %74, i64 1
  %76 = load i8, i8* %75, align 1
  %77 = add i8 %76, 1
  store i8 %77, i8* %75, align 1
  br label %88

78:                                               ; preds = %69
  %79 = inttoptr i64 %71 to i16*
  %80 = getelementptr inbounds i16, i16* %79, i64 1
  %81 = load i16, i16* %80, align 2
  %82 = add i16 %81, 1
  store i16 %82, i16* %80, align 2
  br label %88

83:                                               ; preds = %69
  %84 = inttoptr i64 %71 to i32*
  %85 = getelementptr inbounds i32, i32* %84, i64 1
  %86 = load i32, i32* %85, align 4
  %87 = add nsw i32 %86, 1
  store i32 %87, i32* %85, align 4
  br label %88

88:                                               ; preds = %72, %78, %83
  %89 = load i64, i64* %1, align 8
  %90 = add i64 %89, 7
  %91 = inttoptr i64 %90 to i32*
  %92 = load i32, i32* %91, align 4
  %93 = and i64 %89, -4294967296
  %94 = add i64 %89, 11
  %95 = inttoptr i64 %94 to i32*
  %96 = load i32, i32* %95, align 4
  %97 = zext i32 %96 to i64
  %98 = or i64 %93, %97
  %99 = icmp slt i32 %92, 257
  br i1 %99, label %100, label %105

100:                                              ; preds = %88
  %101 = add i64 %98, 7
  %102 = inttoptr i64 %101 to i8*
  %103 = load i8, i8* %102, align 1
  %104 = zext i8 %103 to i32
  br label %115

105:                                              ; preds = %88
  %106 = icmp slt i32 %92, 65537
  %107 = add i64 %98, 7
  br i1 %106, label %108, label %112

108:                                              ; preds = %105
  %109 = inttoptr i64 %107 to i16*
  %110 = load i16, i16* %109, align 2
  %111 = zext i16 %110 to i32
  br label %115

112:                                              ; preds = %105
  %113 = inttoptr i64 %107 to i32*
  %114 = load i32, i32* %113, align 4
  br label %115

115:                                              ; preds = %112, %108, %100
  %116 = phi i32 [ %104, %100 ], [ %111, %108 ], [ %114, %112 ]
  %117 = ashr i32 %92, 2
  %118 = icmp slt i32 %116, %117
  br i1 %118, label %119, label %124

119:                                              ; preds = %115
  %120 = sdiv i32 %92, 2
  %121 = icmp sgt i32 %120, 4
  %122 = select i1 %121, i32 %120, i32 4
  %123 = call i64* @_ZN2v88internal19SwissNameDictionary6RehashINS0_7IsolateEEENS0_6HandleIS1_EEPT_S5_i(%"class.v8::internal::Isolate"* %0, i64* %1, i32 %122) #9
  br label %124

124:                                              ; preds = %115, %119
  %125 = phi i64* [ %123, %119 ], [ %1, %115 ]
  ret i64* %125
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal19SwissNameDictionary19ClearDataTableEntryEPNS0_7IsolateEi(%"class.v8::internal::SwissNameDictionary"*, %"class.v8::internal::Isolate"*, i32) local_unnamed_addr #4 comdat align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 0, i32 7, i32 0, i64 5
  %5 = load i64, i64* %4, align 8
  %6 = shl i32 %2, 3
  %7 = getelementptr inbounds %"class.v8::internal::SwissNameDictionary", %"class.v8::internal::SwissNameDictionary"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %8 = load i64, i64* %7, align 8
  %9 = sext i32 %6 to i64
  %10 = add nsw i64 %9, 15
  %11 = add i64 %8, %10
  %12 = inttoptr i64 %11 to i32*
  %13 = trunc i64 %5 to i32
  store atomic volatile i32 %13, i32* %12 monotonic, align 4
  %14 = load i64, i64* %7, align 8
  %15 = add i64 %14, %10
  %16 = and i64 %5, 1
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %49, label %18

18:                                               ; preds = %3
  %19 = and i64 %14, -262144
  %20 = or i64 %19, 8
  %21 = inttoptr i64 %20 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = and i64 %22, 262144
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %31, label %25

25:                                               ; preds = %18
  %26 = or i64 %19, 16
  %27 = inttoptr i64 %26 to %"class.v8::internal::Heap"**
  %28 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %27, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %28, i64 %14, i64 %15, i64 %5) #9
  %29 = load i64, i64* %7, align 8
  %30 = add i64 %29, %10
  br label %31

31:                                               ; preds = %25, %18
  %32 = phi i64 [ %15, %18 ], [ %30, %25 ]
  %33 = phi i64 [ %14, %18 ], [ %29, %25 ]
  %34 = and i64 %5, -262144
  %35 = or i64 %34, 8
  %36 = inttoptr i64 %35 to i64*
  %37 = load i64, i64* %36, align 8
  %38 = and i64 %37, 24
  %39 = icmp eq i64 %38, 0
  br i1 %39, label %49, label %40

40:                                               ; preds = %31
  %41 = and i64 %33, -262144
  %42 = or i64 %41, 8
  %43 = inttoptr i64 %42 to i64*
  %44 = load i64, i64* %43, align 8
  %45 = and i64 %44, 24
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %47, label %49

47:                                               ; preds = %40
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %33, i64 %32, i64 %5) #9
  %48 = load i64, i64* %7, align 8
  br label %49

49:                                               ; preds = %3, %31, %40, %47
  %50 = phi i64 [ %14, %3 ], [ %33, %31 ], [ %33, %40 ], [ %48, %47 ]
  %51 = load i64, i64* %4, align 8
  %52 = or i32 %6, 4
  %53 = sext i32 %52 to i64
  %54 = add nsw i64 %53, 15
  %55 = add i64 %50, %54
  %56 = inttoptr i64 %55 to i32*
  %57 = trunc i64 %51 to i32
  store atomic volatile i32 %57, i32* %56 monotonic, align 4
  %58 = load i64, i64* %7, align 8
  %59 = add i64 %58, %54
  %60 = and i64 %51, 1
  %61 = icmp eq i64 %60, 0
  br i1 %61, label %92, label %62

62:                                               ; preds = %49
  %63 = and i64 %58, -262144
  %64 = or i64 %63, 8
  %65 = inttoptr i64 %64 to i64*
  %66 = load i64, i64* %65, align 8
  %67 = and i64 %66, 262144
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %75, label %69

69:                                               ; preds = %62
  %70 = or i64 %63, 16
  %71 = inttoptr i64 %70 to %"class.v8::internal::Heap"**
  %72 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %71, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %72, i64 %58, i64 %59, i64 %51) #9
  %73 = load i64, i64* %7, align 8
  %74 = add i64 %73, %54
  br label %75

75:                                               ; preds = %69, %62
  %76 = phi i64 [ %59, %62 ], [ %74, %69 ]
  %77 = phi i64 [ %58, %62 ], [ %73, %69 ]
  %78 = and i64 %51, -262144
  %79 = or i64 %78, 8
  %80 = inttoptr i64 %79 to i64*
  %81 = load i64, i64* %80, align 8
  %82 = and i64 %81, 24
  %83 = icmp eq i64 %82, 0
  br i1 %83, label %92, label %84

84:                                               ; preds = %75
  %85 = and i64 %77, -262144
  %86 = or i64 %85, 8
  %87 = inttoptr i64 %86 to i64*
  %88 = load i64, i64* %87, align 8
  %89 = and i64 %88, 24
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %91, label %92

91:                                               ; preds = %84
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %77, i64 %76, i64 %51) #9
  br label %92

92:                                               ; preds = %49, %75, %84, %91
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal19SwissNameDictionary6ShrinkEPNS0_7IsolateENS0_6HandleIS1_EE(%"class.v8::internal::Isolate"*, i64*) local_unnamed_addr #0 align 2 {
  %3 = load i64, i64* %1, align 8
  %4 = add i64 %3, 7
  %5 = inttoptr i64 %4 to i32*
  %6 = load i32, i32* %5, align 4
  %7 = and i64 %3, -4294967296
  %8 = add i64 %3, 11
  %9 = inttoptr i64 %8 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = zext i32 %10 to i64
  %12 = or i64 %7, %11
  %13 = icmp slt i32 %6, 257
  br i1 %13, label %14, label %19

14:                                               ; preds = %2
  %15 = add i64 %12, 7
  %16 = inttoptr i64 %15 to i8*
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i32
  br label %29

19:                                               ; preds = %2
  %20 = icmp slt i32 %6, 65537
  %21 = add i64 %12, 7
  br i1 %20, label %22, label %26

22:                                               ; preds = %19
  %23 = inttoptr i64 %21 to i16*
  %24 = load i16, i16* %23, align 2
  %25 = zext i16 %24 to i32
  br label %29

26:                                               ; preds = %19
  %27 = inttoptr i64 %21 to i32*
  %28 = load i32, i32* %27, align 4
  br label %29

29:                                               ; preds = %14, %22, %26
  %30 = phi i32 [ %18, %14 ], [ %25, %22 ], [ %28, %26 ]
  %31 = ashr i32 %6, 2
  %32 = icmp slt i32 %30, %31
  br i1 %32, label %33, label %38

33:                                               ; preds = %29
  %34 = sdiv i32 %6, 2
  %35 = icmp sgt i32 %34, 4
  %36 = select i1 %35, i32 %34, i32 4
  %37 = tail call i64* @_ZN2v88internal19SwissNameDictionary6RehashINS0_7IsolateEEENS0_6HandleIS1_EEPT_S5_i(%"class.v8::internal::Isolate"* %0, i64* %1, i32 %36)
  br label %38

38:                                               ; preds = %29, %33
  %39 = phi i64* [ %37, %33 ], [ %1, %29 ]
  ret i64* %39
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2v88internal19SwissNameDictionary16EqualsForTestingES1_(%"class.v8::internal::SwissNameDictionary"* nocapture readonly, i64) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::SwissNameDictionary", %"class.v8::internal::SwissNameDictionary"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = add i64 %4, 7
  %6 = inttoptr i64 %5 to i32*
  %7 = load i32, i32* %6, align 4
  %8 = add i64 %1, 7
  %9 = inttoptr i64 %8 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = icmp eq i32 %7, %10
  br i1 %11, label %12, label %254

12:                                               ; preds = %2
  %13 = and i64 %4, -4294967296
  %14 = add i64 %4, 11
  %15 = inttoptr i64 %14 to i32*
  %16 = load i32, i32* %15, align 4
  %17 = zext i32 %16 to i64
  %18 = or i64 %13, %17
  %19 = icmp slt i32 %7, 257
  br i1 %19, label %30, label %20

20:                                               ; preds = %12
  %21 = icmp slt i32 %7, 65537
  %22 = add i64 %18, 7
  br i1 %21, label %23, label %27

23:                                               ; preds = %20
  %24 = inttoptr i64 %22 to i16*
  %25 = load i16, i16* %24, align 2
  %26 = zext i16 %25 to i32
  br label %45

27:                                               ; preds = %20
  %28 = inttoptr i64 %22 to i32*
  %29 = load i32, i32* %28, align 4
  br label %45

30:                                               ; preds = %12
  %31 = add i64 %18, 7
  %32 = inttoptr i64 %31 to i8*
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i32
  %35 = and i64 %1, -4294967296
  %36 = add i64 %1, 11
  %37 = inttoptr i64 %36 to i32*
  %38 = load i32, i32* %37, align 4
  %39 = zext i32 %38 to i64
  %40 = or i64 %35, %39
  %41 = add i64 %40, 7
  %42 = inttoptr i64 %41 to i8*
  %43 = load i8, i8* %42, align 1
  %44 = zext i8 %43 to i32
  br label %62

45:                                               ; preds = %23, %27
  %46 = phi i32 [ %29, %27 ], [ %26, %23 ]
  %47 = and i64 %1, -4294967296
  %48 = add i64 %1, 11
  %49 = inttoptr i64 %48 to i32*
  %50 = load i32, i32* %49, align 4
  %51 = zext i32 %50 to i64
  %52 = or i64 %47, %51
  %53 = icmp slt i32 %7, 65537
  %54 = add i64 %52, 7
  br i1 %53, label %55, label %59

55:                                               ; preds = %45
  %56 = inttoptr i64 %54 to i16*
  %57 = load i16, i16* %56, align 2
  %58 = zext i16 %57 to i32
  br label %62

59:                                               ; preds = %45
  %60 = inttoptr i64 %54 to i32*
  %61 = load i32, i32* %60, align 4
  br label %62

62:                                               ; preds = %30, %55, %59
  %63 = phi i64 [ %40, %30 ], [ %52, %55 ], [ %52, %59 ]
  %64 = phi i32 [ %34, %30 ], [ %46, %55 ], [ %46, %59 ]
  %65 = phi i32 [ %44, %30 ], [ %58, %55 ], [ %61, %59 ]
  %66 = icmp eq i32 %64, %65
  br i1 %66, label %67, label %254

67:                                               ; preds = %62
  br i1 %19, label %71, label %68

68:                                               ; preds = %67
  %69 = icmp slt i32 %7, 65537
  %70 = add i64 %18, 7
  br i1 %69, label %82, label %92

71:                                               ; preds = %67
  %72 = add i64 %18, 7
  %73 = inttoptr i64 %72 to i8*
  %74 = getelementptr inbounds i8, i8* %73, i64 1
  %75 = load i8, i8* %74, align 1
  %76 = zext i8 %75 to i32
  %77 = add i64 %63, 7
  %78 = inttoptr i64 %77 to i8*
  %79 = getelementptr inbounds i8, i8* %78, i64 1
  %80 = load i8, i8* %79, align 1
  %81 = zext i8 %80 to i32
  br label %100

82:                                               ; preds = %68
  %83 = inttoptr i64 %70 to i16*
  %84 = getelementptr inbounds i16, i16* %83, i64 1
  %85 = load i16, i16* %84, align 2
  %86 = zext i16 %85 to i32
  %87 = add i64 %63, 7
  %88 = inttoptr i64 %87 to i16*
  %89 = getelementptr inbounds i16, i16* %88, i64 1
  %90 = load i16, i16* %89, align 2
  %91 = zext i16 %90 to i32
  br label %100

92:                                               ; preds = %68
  %93 = inttoptr i64 %70 to i32*
  %94 = getelementptr inbounds i32, i32* %93, i64 1
  %95 = load i32, i32* %94, align 4
  %96 = add i64 %63, 7
  %97 = inttoptr i64 %96 to i32*
  %98 = getelementptr inbounds i32, i32* %97, i64 1
  %99 = load i32, i32* %98, align 4
  br label %100

100:                                              ; preds = %71, %82, %92
  %101 = phi i32 [ %76, %71 ], [ %86, %82 ], [ %95, %92 ]
  %102 = phi i32 [ %81, %71 ], [ %91, %82 ], [ %99, %92 ]
  %103 = icmp eq i32 %101, %102
  br i1 %103, label %104, label %254

104:                                              ; preds = %100
  %105 = add i64 %4, 3
  %106 = inttoptr i64 %105 to i32*
  %107 = load i32, i32* %106, align 4
  %108 = add i64 %1, 3
  %109 = inttoptr i64 %108 to i32*
  %110 = load i32, i32* %109, align 4
  %111 = icmp eq i32 %107, %110
  br i1 %111, label %112, label %254

112:                                              ; preds = %104
  %113 = add i32 %7, 16
  %114 = icmp sgt i32 %113, 0
  br i1 %114, label %115, label %127

115:                                              ; preds = %112
  %116 = shl i32 %7, 3
  %117 = sext i32 %116 to i64
  %118 = add i64 %4, 15
  %119 = add i64 %118, %117
  %120 = inttoptr i64 %119 to i8*
  %121 = add i64 %1, 15
  %122 = add i64 %121, %117
  %123 = inttoptr i64 %122 to i8*
  %124 = zext i32 %113 to i64
  br label %145

125:                                              ; preds = %145
  %126 = icmp eq i64 %152, %124
  br i1 %126, label %127, label %145

127:                                              ; preds = %125, %112
  %128 = icmp sgt i32 %7, 0
  br i1 %128, label %129, label %153

129:                                              ; preds = %127
  %130 = shl i32 %7, 3
  %131 = sext i32 %130 to i64
  %132 = add i64 %4, 15
  %133 = add i64 %132, %131
  %134 = inttoptr i64 %133 to i8*
  %135 = mul i32 %7, 9
  %136 = add i32 %135, 32
  %137 = sext i32 %136 to i64
  %138 = add i64 %4, -1
  %139 = add i64 %138, %137
  %140 = inttoptr i64 %139 to i8*
  %141 = add i64 %1, -1
  %142 = add i64 %141, %137
  %143 = inttoptr i64 %142 to i8*
  %144 = zext i32 %7 to i64
  br label %206

145:                                              ; preds = %125, %115
  %146 = phi i64 [ 0, %115 ], [ %152, %125 ]
  %147 = getelementptr inbounds i8, i8* %120, i64 %146
  %148 = load i8, i8* %147, align 1
  %149 = getelementptr inbounds i8, i8* %123, i64 %146
  %150 = load i8, i8* %149, align 1
  %151 = icmp eq i8 %148, %150
  %152 = add nuw nsw i64 %146, 1
  br i1 %151, label %125, label %254

153:                                              ; preds = %240, %127
  %154 = add i64 %18, 7
  %155 = inttoptr i64 %154 to i32*
  %156 = getelementptr inbounds i32, i32* %155, i64 1
  %157 = inttoptr i64 %154 to i16*
  %158 = getelementptr inbounds i16, i16* %157, i64 1
  %159 = inttoptr i64 %154 to i8*
  %160 = add i64 %63, 7
  %161 = inttoptr i64 %160 to i32*
  %162 = inttoptr i64 %160 to i16*
  %163 = inttoptr i64 %160 to i8*
  br i1 %19, label %164, label %182

164:                                              ; preds = %153
  %165 = getelementptr inbounds i8, i8* %159, i64 1
  %166 = load i8, i8* %159, align 1
  %167 = load i8, i8* %165, align 1
  %168 = zext i8 %166 to i64
  %169 = zext i8 %167 to i64
  %170 = add nuw nsw i64 %169, %168
  br label %171

171:                                              ; preds = %164, %174
  %172 = phi i64 [ 0, %164 ], [ %181, %174 ]
  %173 = icmp ult i64 %172, %170
  br i1 %173, label %174, label %254

174:                                              ; preds = %171
  %175 = add nuw nsw i64 %172, 2
  %176 = getelementptr inbounds i8, i8* %159, i64 %175
  %177 = load i8, i8* %176, align 1
  %178 = getelementptr inbounds i8, i8* %163, i64 %175
  %179 = load i8, i8* %178, align 1
  %180 = icmp eq i8 %179, %177
  %181 = add nuw nsw i64 %172, 1
  br i1 %180, label %171, label %254

182:                                              ; preds = %153
  %183 = icmp slt i32 %7, 65537
  br i1 %183, label %189, label %184

184:                                              ; preds = %182
  %185 = load i32, i32* %155, align 4
  %186 = load i32, i32* %156, align 4
  %187 = add nsw i32 %186, %185
  %188 = sext i32 %187 to i64
  br label %243

189:                                              ; preds = %182
  %190 = load i16, i16* %157, align 2
  %191 = load i16, i16* %158, align 2
  %192 = zext i16 %190 to i64
  %193 = zext i16 %191 to i64
  %194 = add nuw nsw i64 %193, %192
  br label %195

195:                                              ; preds = %189, %198
  %196 = phi i64 [ 0, %189 ], [ %205, %198 ]
  %197 = icmp ult i64 %196, %194
  br i1 %197, label %198, label %254

198:                                              ; preds = %195
  %199 = add nuw nsw i64 %196, 2
  %200 = getelementptr inbounds i16, i16* %157, i64 %199
  %201 = load i16, i16* %200, align 2
  %202 = getelementptr inbounds i16, i16* %162, i64 %199
  %203 = load i16, i16* %202, align 2
  %204 = icmp eq i16 %201, %203
  %205 = add nuw nsw i64 %196, 1
  br i1 %204, label %195, label %254

206:                                              ; preds = %240, %129
  %207 = phi i64 [ 0, %129 ], [ %241, %240 ]
  %208 = trunc i64 %207 to i32
  %209 = shl i32 %208, 3
  %210 = sext i32 %209 to i64
  %211 = add nsw i64 %210, 15
  %212 = add i64 %211, %4
  %213 = inttoptr i64 %212 to i32*
  %214 = load atomic i32, i32* %213 monotonic, align 4
  %215 = add i64 %211, %1
  %216 = inttoptr i64 %215 to i32*
  %217 = load atomic i32, i32* %216 monotonic, align 4
  %218 = icmp eq i32 %214, %217
  br i1 %218, label %219, label %254

219:                                              ; preds = %206
  %220 = or i32 %209, 4
  %221 = sext i32 %220 to i64
  %222 = add nsw i64 %221, 15
  %223 = add i64 %222, %4
  %224 = inttoptr i64 %223 to i32*
  %225 = load atomic i32, i32* %224 monotonic, align 4
  %226 = add i64 %222, %1
  %227 = inttoptr i64 %226 to i32*
  %228 = load atomic i32, i32* %227 monotonic, align 4
  %229 = icmp eq i32 %225, %228
  br i1 %229, label %230, label %254

230:                                              ; preds = %219
  %231 = getelementptr inbounds i8, i8* %134, i64 %207
  %232 = load i8, i8* %231, align 1
  %233 = icmp sgt i8 %232, -1
  br i1 %233, label %234, label %240

234:                                              ; preds = %230
  %235 = getelementptr inbounds i8, i8* %140, i64 %207
  %236 = load i8, i8* %235, align 1
  %237 = getelementptr inbounds i8, i8* %143, i64 %207
  %238 = load i8, i8* %237, align 1
  %239 = icmp eq i8 %236, %238
  br i1 %239, label %240, label %254

240:                                              ; preds = %234, %230
  %241 = add nuw nsw i64 %207, 1
  %242 = icmp eq i64 %241, %144
  br i1 %242, label %153, label %206

243:                                              ; preds = %184, %246
  %244 = phi i64 [ 0, %184 ], [ %253, %246 ]
  %245 = icmp slt i64 %244, %188
  br i1 %245, label %246, label %254

246:                                              ; preds = %243
  %247 = add nuw nsw i64 %244, 2
  %248 = getelementptr inbounds i32, i32* %155, i64 %247
  %249 = load i32, i32* %248, align 4
  %250 = getelementptr inbounds i32, i32* %161, i64 %247
  %251 = load i32, i32* %250, align 4
  %252 = icmp eq i32 %249, %251
  %253 = add nuw nsw i64 %244, 1
  br i1 %252, label %243, label %254

254:                                              ; preds = %145, %234, %219, %206, %243, %246, %195, %198, %174, %171, %104, %100, %62, %2
  %255 = phi i1 [ false, %2 ], [ false, %62 ], [ false, %100 ], [ false, %104 ], [ false, %174 ], [ true, %171 ], [ true, %195 ], [ false, %198 ], [ true, %243 ], [ false, %246 ], [ false, %206 ], [ false, %219 ], [ false, %234 ], [ false, %145 ]
  ret i1 %255
}

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal19SwissNameDictionary11ShallowCopyEPNS0_7IsolateENS0_6HandleIS1_EE(%"class.v8::internal::Isolate"*, i64*) local_unnamed_addr #0 align 2 {
  %3 = load i64, i64* %1, align 8
  %4 = add i64 %3, 7
  %5 = inttoptr i64 %4 to i32*
  %6 = load i32, i32* %5, align 4
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %309, label %8

8:                                                ; preds = %2
  %9 = and i64 %3, -4294967296
  %10 = add i64 %3, 11
  %11 = inttoptr i64 %10 to i32*
  %12 = load i32, i32* %11, align 4
  %13 = zext i32 %12 to i64
  %14 = or i64 %9, %13
  %15 = icmp slt i32 %6, 257
  br i1 %15, label %19, label %16

16:                                               ; preds = %8
  %17 = icmp slt i32 %6, 65537
  %18 = add i64 %14, 7
  br i1 %17, label %27, label %34

19:                                               ; preds = %8
  %20 = add i64 %14, 7
  %21 = inttoptr i64 %20 to i8*
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i32
  %24 = getelementptr inbounds i8, i8* %21, i64 1
  %25 = load i8, i8* %24, align 1
  %26 = zext i8 %25 to i32
  br label %39

27:                                               ; preds = %16
  %28 = inttoptr i64 %18 to i16*
  %29 = load i16, i16* %28, align 2
  %30 = zext i16 %29 to i32
  %31 = getelementptr inbounds i16, i16* %28, i64 1
  %32 = load i16, i16* %31, align 2
  %33 = zext i16 %32 to i32
  br label %39

34:                                               ; preds = %16
  %35 = inttoptr i64 %18 to i32*
  %36 = load i32, i32* %35, align 4
  %37 = getelementptr inbounds i32, i32* %35, i64 1
  %38 = load i32, i32* %37, align 4
  br label %39

39:                                               ; preds = %19, %27, %34
  %40 = phi i32 [ %23, %19 ], [ %30, %27 ], [ %36, %34 ]
  %41 = phi i32 [ %26, %19 ], [ %33, %27 ], [ %38, %34 ]
  %42 = bitcast %"class.v8::internal::Isolate"* %0 to %"class.v8::internal::FactoryBase"*
  %43 = and i64 %3, -262144
  %44 = inttoptr i64 %43 to %"class.v8::internal::BasicMemoryChunk"*
  %45 = getelementptr inbounds %"class.v8::internal::BasicMemoryChunk", %"class.v8::internal::BasicMemoryChunk"* %44, i64 0, i32 1
  %46 = load i64, i64* %45, align 8
  %47 = and i64 %46, 24
  %48 = icmp eq i64 %47, 0
  %49 = zext i1 %48 to i8
  %50 = tail call i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE34NewSwissNameDictionaryWithCapacityEiNS0_14AllocationTypeE(%"class.v8::internal::FactoryBase"* %42, i32 %6, i8 zeroext %49) #9
  %51 = load i64, i64* %50, align 8
  %52 = load i64, i64* %1, align 8
  %53 = add i64 %52, 3
  %54 = inttoptr i64 %53 to i32*
  %55 = load i32, i32* %54, align 4
  %56 = add i64 %51, 3
  %57 = inttoptr i64 %56 to i32*
  store i32 %55, i32* %57, align 4
  %58 = load i64, i64* %50, align 8
  %59 = and i64 %58, -262144
  %60 = or i64 %59, 8
  %61 = inttoptr i64 %60 to i64*
  %62 = load i64, i64* %61, align 8
  %63 = and i64 %62, 262144
  %64 = icmp ne i64 %63, 0
  %65 = and i64 %62, 24
  %66 = icmp eq i64 %65, 0
  %67 = or i1 %64, %66
  br i1 %67, label %68, label %73

68:                                               ; preds = %39
  %69 = icmp sgt i32 %6, 0
  %70 = load i64, i64* %1, align 8
  br i1 %69, label %71, label %110

71:                                               ; preds = %68
  %72 = zext i32 %6 to i64
  br label %158

73:                                               ; preds = %39
  %74 = load i64, i64* %1, align 8
  %75 = add i64 %74, 15
  %76 = inttoptr i64 %75 to i8*
  %77 = add i64 %58, 15
  %78 = inttoptr i64 %77 to i8*
  %79 = shl i32 %6, 3
  %80 = add nsw i32 %6, 16
  %81 = add nsw i32 %80, %79
  %82 = sext i32 %81 to i64
  switch i64 %82, label %109 [
    i64 1, label %83
    i64 2, label %85
    i64 3, label %89
    i64 4, label %90
    i64 5, label %94
    i64 6, label %95
    i64 7, label %96
    i64 8, label %97
    i64 9, label %101
    i64 10, label %102
    i64 11, label %103
    i64 12, label %104
    i64 13, label %105
    i64 14, label %106
    i64 15, label %107
    i64 16, label %108
  ]

83:                                               ; preds = %73
  %84 = load i8, i8* %76, align 1
  store i8 %84, i8* %78, align 1
  br label %242

85:                                               ; preds = %73
  %86 = inttoptr i64 %75 to i16*
  %87 = inttoptr i64 %77 to i16*
  %88 = load i16, i16* %86, align 1
  store i16 %88, i16* %87, align 1
  br label %242

89:                                               ; preds = %73
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %78, i8* align 1 %76, i64 3, i1 false) #9
  br label %242

90:                                               ; preds = %73
  %91 = inttoptr i64 %75 to i32*
  %92 = inttoptr i64 %77 to i32*
  %93 = load i32, i32* %91, align 1
  store i32 %93, i32* %92, align 1
  br label %242

94:                                               ; preds = %73
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %78, i8* align 1 %76, i64 5, i1 false) #9
  br label %242

95:                                               ; preds = %73
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %78, i8* align 1 %76, i64 6, i1 false) #9
  br label %242

96:                                               ; preds = %73
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %78, i8* align 1 %76, i64 7, i1 false) #9
  br label %242

97:                                               ; preds = %73
  %98 = inttoptr i64 %75 to i64*
  %99 = inttoptr i64 %77 to i64*
  %100 = load i64, i64* %98, align 1
  store i64 %100, i64* %99, align 1
  br label %242

101:                                              ; preds = %73
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %78, i8* align 1 %76, i64 9, i1 false) #9
  br label %242

102:                                              ; preds = %73
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %78, i8* align 1 %76, i64 10, i1 false) #9
  br label %242

103:                                              ; preds = %73
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %78, i8* align 1 %76, i64 11, i1 false) #9
  br label %242

104:                                              ; preds = %73
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %78, i8* align 1 %76, i64 12, i1 false) #9
  br label %242

105:                                              ; preds = %73
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %78, i8* align 1 %76, i64 13, i1 false) #9
  br label %242

106:                                              ; preds = %73
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %78, i8* align 1 %76, i64 14, i1 false) #9
  br label %242

107:                                              ; preds = %73
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %78, i8* align 1 %76, i64 15, i1 false) #9
  br label %242

108:                                              ; preds = %73
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %78, i8* align 1 %76, i64 16, i1 false) #9
  br label %242

109:                                              ; preds = %73
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %78, i8* align 1 %76, i64 %82, i1 false) #9
  br label %242

110:                                              ; preds = %237, %68
  %111 = phi i64 [ %58, %68 ], [ %241, %237 ]
  %112 = phi i64 [ %70, %68 ], [ %239, %237 ]
  %113 = add i64 %112, 7
  %114 = inttoptr i64 %113 to i32*
  %115 = load i32, i32* %114, align 4
  %116 = shl i32 %115, 3
  %117 = sext i32 %116 to i64
  %118 = add i64 %112, 15
  %119 = add i64 %118, %117
  %120 = inttoptr i64 %119 to i8*
  %121 = add i64 %111, 7
  %122 = inttoptr i64 %121 to i32*
  %123 = load i32, i32* %122, align 4
  %124 = shl i32 %123, 3
  %125 = sext i32 %124 to i64
  %126 = add i64 %111, 15
  %127 = add i64 %126, %125
  %128 = inttoptr i64 %127 to i8*
  %129 = add nsw i32 %6, 16
  %130 = sext i32 %129 to i64
  switch i64 %130, label %157 [
    i64 1, label %131
    i64 2, label %133
    i64 3, label %137
    i64 4, label %138
    i64 5, label %142
    i64 6, label %143
    i64 7, label %144
    i64 8, label %145
    i64 9, label %149
    i64 10, label %150
    i64 11, label %151
    i64 12, label %152
    i64 13, label %153
    i64 14, label %154
    i64 15, label %155
    i64 16, label %156
  ]

131:                                              ; preds = %110
  %132 = load i8, i8* %120, align 1
  store i8 %132, i8* %128, align 1
  br label %242

133:                                              ; preds = %110
  %134 = inttoptr i64 %119 to i16*
  %135 = inttoptr i64 %127 to i16*
  %136 = load i16, i16* %134, align 1
  store i16 %136, i16* %135, align 1
  br label %242

137:                                              ; preds = %110
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %128, i8* align 1 %120, i64 3, i1 false) #9
  br label %242

138:                                              ; preds = %110
  %139 = inttoptr i64 %119 to i32*
  %140 = inttoptr i64 %127 to i32*
  %141 = load i32, i32* %139, align 1
  store i32 %141, i32* %140, align 1
  br label %242

142:                                              ; preds = %110
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %128, i8* align 1 %120, i64 5, i1 false) #9
  br label %242

143:                                              ; preds = %110
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %128, i8* align 1 %120, i64 6, i1 false) #9
  br label %242

144:                                              ; preds = %110
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %128, i8* align 1 %120, i64 7, i1 false) #9
  br label %242

145:                                              ; preds = %110
  %146 = inttoptr i64 %119 to i64*
  %147 = inttoptr i64 %127 to i64*
  %148 = load i64, i64* %146, align 1
  store i64 %148, i64* %147, align 1
  br label %242

149:                                              ; preds = %110
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %128, i8* align 1 %120, i64 9, i1 false) #9
  br label %242

150:                                              ; preds = %110
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %128, i8* align 1 %120, i64 10, i1 false) #9
  br label %242

151:                                              ; preds = %110
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %128, i8* align 1 %120, i64 11, i1 false) #9
  br label %242

152:                                              ; preds = %110
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %128, i8* align 1 %120, i64 12, i1 false) #9
  br label %242

153:                                              ; preds = %110
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %128, i8* align 1 %120, i64 13, i1 false) #9
  br label %242

154:                                              ; preds = %110
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %128, i8* align 1 %120, i64 14, i1 false) #9
  br label %242

155:                                              ; preds = %110
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %128, i8* align 1 %120, i64 15, i1 false) #9
  br label %242

156:                                              ; preds = %110
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %128, i8* align 1 %120, i64 16, i1 false) #9
  br label %242

157:                                              ; preds = %110
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %128, i8* align 1 %120, i64 %130, i1 false) #9
  br label %242

158:                                              ; preds = %237, %71
  %159 = phi i64 [ %58, %71 ], [ %241, %237 ]
  %160 = phi i64 [ 0, %71 ], [ %238, %237 ]
  %161 = phi i64 [ %70, %71 ], [ %239, %237 ]
  %162 = and i64 %161, -4294967296
  %163 = trunc i64 %160 to i32
  %164 = shl i32 %163, 3
  %165 = sext i32 %164 to i64
  %166 = add i64 %161, 15
  %167 = add i64 %166, %165
  %168 = inttoptr i64 %167 to i32*
  %169 = load atomic i32, i32* %168 monotonic, align 4
  %170 = zext i32 %169 to i64
  %171 = or i64 %162, %170
  %172 = or i32 %164, 4
  %173 = sext i32 %172 to i64
  %174 = add i64 %166, %173
  %175 = inttoptr i64 %174 to i32*
  %176 = load atomic i32, i32* %175 monotonic, align 4
  %177 = zext i32 %176 to i64
  %178 = or i64 %162, %177
  %179 = add nsw i64 %165, 15
  %180 = add i64 %179, %159
  %181 = inttoptr i64 %180 to i32*
  store atomic volatile i32 %169, i32* %181 monotonic, align 4
  %182 = and i64 %170, 1
  %183 = icmp eq i64 %182, 0
  br i1 %183, label %207, label %184

184:                                              ; preds = %158
  %185 = and i64 %159, -262144
  %186 = or i64 %185, 8
  %187 = inttoptr i64 %186 to i64*
  %188 = load i64, i64* %187, align 8
  %189 = and i64 %188, 262144
  %190 = icmp eq i64 %189, 0
  br i1 %190, label %195, label %191

191:                                              ; preds = %184
  %192 = or i64 %185, 16
  %193 = inttoptr i64 %192 to %"class.v8::internal::Heap"**
  %194 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %193, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %194, i64 %159, i64 %180, i64 %171) #9
  br label %195

195:                                              ; preds = %191, %184
  %196 = and i64 %171, -262144
  %197 = or i64 %196, 8
  %198 = inttoptr i64 %197 to i64*
  %199 = load i64, i64* %198, align 8
  %200 = and i64 %199, 24
  %201 = icmp eq i64 %200, 0
  br i1 %201, label %207, label %202

202:                                              ; preds = %195
  %203 = load i64, i64* %187, align 8
  %204 = and i64 %203, 24
  %205 = icmp eq i64 %204, 0
  br i1 %205, label %206, label %207

206:                                              ; preds = %202
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %159, i64 %180, i64 %171) #9
  br label %207

207:                                              ; preds = %158, %195, %202, %206
  %208 = load i64, i64* %50, align 8
  %209 = add nsw i64 %173, 15
  %210 = add i64 %209, %208
  %211 = inttoptr i64 %210 to i32*
  store atomic volatile i32 %176, i32* %211 monotonic, align 4
  %212 = and i64 %177, 1
  %213 = icmp eq i64 %212, 0
  br i1 %213, label %237, label %214

214:                                              ; preds = %207
  %215 = and i64 %208, -262144
  %216 = or i64 %215, 8
  %217 = inttoptr i64 %216 to i64*
  %218 = load i64, i64* %217, align 8
  %219 = and i64 %218, 262144
  %220 = icmp eq i64 %219, 0
  br i1 %220, label %225, label %221

221:                                              ; preds = %214
  %222 = or i64 %215, 16
  %223 = inttoptr i64 %222 to %"class.v8::internal::Heap"**
  %224 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %223, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %224, i64 %208, i64 %210, i64 %178) #9
  br label %225

225:                                              ; preds = %221, %214
  %226 = and i64 %178, -262144
  %227 = or i64 %226, 8
  %228 = inttoptr i64 %227 to i64*
  %229 = load i64, i64* %228, align 8
  %230 = and i64 %229, 24
  %231 = icmp eq i64 %230, 0
  br i1 %231, label %237, label %232

232:                                              ; preds = %225
  %233 = load i64, i64* %217, align 8
  %234 = and i64 %233, 24
  %235 = icmp eq i64 %234, 0
  br i1 %235, label %236, label %237

236:                                              ; preds = %232
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %208, i64 %210, i64 %178) #9
  br label %237

237:                                              ; preds = %207, %225, %232, %236
  %238 = add nuw nsw i64 %160, 1
  %239 = load i64, i64* %1, align 8
  %240 = icmp eq i64 %238, %72
  %241 = load i64, i64* %50, align 8
  br i1 %240, label %110, label %158

242:                                              ; preds = %157, %156, %155, %154, %153, %152, %151, %150, %149, %145, %144, %143, %142, %138, %137, %133, %131, %109, %108, %107, %106, %105, %104, %103, %102, %101, %97, %96, %95, %94, %90, %89, %85, %83
  %243 = icmp sgt i32 %6, 0
  br i1 %243, label %244, label %246

244:                                              ; preds = %242
  %245 = zext i32 %6 to i64
  br label %272

246:                                              ; preds = %306, %242
  %247 = icmp slt i32 %6, 65537
  %248 = select i1 %247, i32 2, i32 4
  %249 = select i1 %15, i32 1, i32 %248
  %250 = add i32 %40, 2
  %251 = add i32 %250, %41
  %252 = mul nsw i32 %251, %249
  %253 = load i64, i64* %50, align 8
  %254 = and i64 %253, -4294967296
  %255 = add i64 %253, 11
  %256 = inttoptr i64 %255 to i32*
  %257 = load i32, i32* %256, align 4
  %258 = zext i32 %257 to i64
  %259 = or i64 %254, %258
  %260 = load i64, i64* %1, align 8
  %261 = and i64 %260, -4294967296
  %262 = add i64 %260, 11
  %263 = inttoptr i64 %262 to i32*
  %264 = load i32, i32* %263, align 4
  %265 = zext i32 %264 to i64
  %266 = or i64 %261, %265
  %267 = add i64 %266, 7
  %268 = inttoptr i64 %267 to i8*
  %269 = add i64 %259, 7
  %270 = inttoptr i64 %269 to i8*
  %271 = sext i32 %252 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %270, i8* align 1 %268, i64 %271, i1 false) #9
  br label %309

272:                                              ; preds = %306, %244
  %273 = phi i64 [ 0, %244 ], [ %307, %306 ]
  %274 = load i64, i64* %1, align 8
  %275 = add i64 %274, 7
  %276 = inttoptr i64 %275 to i32*
  %277 = load i32, i32* %276, align 4
  %278 = shl i32 %277, 3
  %279 = sext i32 %278 to i64
  %280 = add i64 %274, 15
  %281 = add i64 %280, %279
  %282 = inttoptr i64 %281 to i8*
  %283 = getelementptr inbounds i8, i8* %282, i64 %273
  %284 = load i8, i8* %283, align 1
  %285 = icmp sgt i8 %284, -1
  br i1 %285, label %286, label %306

286:                                              ; preds = %272
  %287 = load i64, i64* %50, align 8
  %288 = mul i32 %277, 9
  %289 = add i32 %288, 32
  %290 = sext i32 %289 to i64
  %291 = add i64 %274, -1
  %292 = add i64 %291, %290
  %293 = inttoptr i64 %292 to i8*
  %294 = getelementptr inbounds i8, i8* %293, i64 %273
  %295 = load i8, i8* %294, align 1
  %296 = add i64 %287, 7
  %297 = inttoptr i64 %296 to i32*
  %298 = load i32, i32* %297, align 4
  %299 = mul i32 %298, 9
  %300 = add i32 %299, 32
  %301 = sext i32 %300 to i64
  %302 = add i64 %287, -1
  %303 = add i64 %302, %301
  %304 = inttoptr i64 %303 to i8*
  %305 = getelementptr inbounds i8, i8* %304, i64 %273
  store i8 %295, i8* %305, align 1
  br label %306

306:                                              ; preds = %272, %286
  %307 = add nuw nsw i64 %273, 1
  %308 = icmp eq i64 %307, %245
  br i1 %308, label %246, label %272

309:                                              ; preds = %2, %246
  %310 = phi i64* [ %50, %246 ], [ %1, %2 ]
  ret i64* %310
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal19SwissNameDictionary6RehashEPNS0_7IsolateE(%"class.v8::internal::SwissNameDictionary"*, %"class.v8::internal::Isolate"*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.std::__1::vector.1133", align 8
  %4 = getelementptr inbounds %"class.v8::internal::SwissNameDictionary", %"class.v8::internal::SwissNameDictionary"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %5 = load i64, i64* %4, align 8
  %6 = add i64 %5, 7
  %7 = inttoptr i64 %6 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %251, label %10

10:                                               ; preds = %2
  %11 = bitcast %"class.std::__1::vector.1133"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %11) #9
  %12 = and i64 %5, -4294967296
  %13 = add i64 %5, 11
  %14 = inttoptr i64 %13 to i32*
  %15 = load i32, i32* %14, align 4
  %16 = zext i32 %15 to i64
  %17 = or i64 %12, %16
  %18 = icmp slt i32 %8, 257
  br i1 %18, label %19, label %24

19:                                               ; preds = %10
  %20 = add i64 %17, 7
  %21 = inttoptr i64 %20 to i8*
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i32
  br label %34

24:                                               ; preds = %10
  %25 = icmp slt i32 %8, 65537
  %26 = add i64 %17, 7
  br i1 %25, label %27, label %31

27:                                               ; preds = %24
  %28 = inttoptr i64 %26 to i16*
  %29 = load i16, i16* %28, align 2
  %30 = zext i16 %29 to i32
  br label %34

31:                                               ; preds = %24
  %32 = inttoptr i64 %26 to i32*
  %33 = load i32, i32* %32, align 4
  br label %34

34:                                               ; preds = %19, %27, %31
  %35 = phi i32 [ %23, %19 ], [ %30, %27 ], [ %33, %31 ]
  %36 = sext i32 %35 to i64
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 0, i64 24, i1 false) #9
  %37 = icmp eq i32 %35, 0
  br i1 %37, label %59, label %38

38:                                               ; preds = %34
  %39 = icmp slt i32 %35, 0
  br i1 %39, label %40, label %42

40:                                               ; preds = %38
  %41 = bitcast %"class.std::__1::vector.1133"* %3 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %41) #10
  unreachable

42:                                               ; preds = %38
  %43 = mul nsw i64 %36, 24
  %44 = tail call i8* @_Znwm(i64 %43) #11
  %45 = bitcast i8* %44 to %struct.Entry*
  %46 = getelementptr inbounds %"class.std::__1::vector.1133", %"class.std::__1::vector.1133"* %3, i64 0, i32 0, i32 1
  %47 = bitcast %struct.Entry** %46 to i8**
  store i8* %44, i8** %47, align 8
  %48 = bitcast %"class.std::__1::vector.1133"* %3 to i8**
  store i8* %44, i8** %48, align 8
  %49 = getelementptr inbounds %struct.Entry, %struct.Entry* %45, i64 %36
  %50 = getelementptr inbounds %"class.std::__1::vector.1133", %"class.std::__1::vector.1133"* %3, i64 0, i32 0, i32 2, i32 0, i32 0
  store %struct.Entry* %49, %struct.Entry** %50, align 8
  br label %51

51:                                               ; preds = %51, %42
  %52 = phi %struct.Entry* [ %45, %42 ], [ %53, %51 ]
  %53 = getelementptr inbounds %struct.Entry, %struct.Entry* %52, i64 1
  %54 = icmp eq %struct.Entry* %53, %49
  %55 = bitcast %struct.Entry* %52 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %55, i8 0, i64 20, i1 false)
  br i1 %54, label %56, label %51

56:                                               ; preds = %51
  %57 = bitcast %struct.Entry** %46 to i64*
  %58 = ptrtoint %struct.Entry* %49 to i64
  store i64 %58, i64* %57, align 8
  br label %59

59:                                               ; preds = %34, %56
  %60 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 0, i32 7, i32 0, i64 5
  %61 = getelementptr inbounds %"class.std::__1::vector.1133", %"class.std::__1::vector.1133"* %3, i64 0, i32 0, i32 0
  br label %62

62:                                               ; preds = %198, %59
  %63 = phi i64 [ %200, %198 ], [ 0, %59 ]
  %64 = phi i32 [ %199, %198 ], [ 0, %59 ]
  %65 = load i64, i64* %4, align 8
  %66 = add i64 %65, 7
  %67 = inttoptr i64 %66 to i32*
  %68 = load i32, i32* %67, align 4
  %69 = and i64 %65, -4294967296
  %70 = add i64 %65, 11
  %71 = inttoptr i64 %70 to i32*
  %72 = load i32, i32* %71, align 4
  %73 = zext i32 %72 to i64
  %74 = or i64 %69, %73
  %75 = icmp slt i32 %68, 257
  br i1 %75, label %79, label %76

76:                                               ; preds = %62
  %77 = icmp slt i32 %68, 65537
  %78 = add i64 %74, 7
  br i1 %77, label %87, label %94

79:                                               ; preds = %62
  %80 = add i64 %74, 7
  %81 = inttoptr i64 %80 to i8*
  %82 = load i8, i8* %81, align 1
  %83 = zext i8 %82 to i32
  %84 = getelementptr inbounds i8, i8* %81, i64 1
  %85 = load i8, i8* %84, align 1
  %86 = zext i8 %85 to i32
  br label %99

87:                                               ; preds = %76
  %88 = inttoptr i64 %78 to i16*
  %89 = load i16, i16* %88, align 2
  %90 = zext i16 %89 to i32
  %91 = getelementptr inbounds i16, i16* %88, i64 1
  %92 = load i16, i16* %91, align 2
  %93 = zext i16 %92 to i32
  br label %99

94:                                               ; preds = %76
  %95 = inttoptr i64 %78 to i32*
  %96 = load i32, i32* %95, align 4
  %97 = getelementptr inbounds i32, i32* %95, i64 1
  %98 = load i32, i32* %97, align 4
  br label %99

99:                                               ; preds = %79, %87, %94
  %100 = phi i32 [ %83, %79 ], [ %90, %87 ], [ %96, %94 ]
  %101 = phi i32 [ %86, %79 ], [ %93, %87 ], [ %98, %94 ]
  %102 = add nsw i32 %101, %100
  %103 = sext i32 %102 to i64
  %104 = icmp slt i64 %63, %103
  br i1 %104, label %141, label %105

105:                                              ; preds = %99
  tail call void @_ZN2v88internal19SwissNameDictionary10InitializeINS0_7IsolateEEEvPT_NS0_9ByteArrayEi(%"class.v8::internal::SwissNameDictionary"* %0, %"class.v8::internal::Isolate"* %1, i64 %74, i32 %68)
  %106 = getelementptr inbounds %"class.std::__1::vector.1133", %"class.std::__1::vector.1133"* %3, i64 0, i32 0, i32 1
  %107 = bitcast %struct.Entry** %106 to i64*
  %108 = load i64, i64* %107, align 8
  %109 = bitcast %"class.std::__1::vector.1133"* %3 to i64*
  %110 = load i64, i64* %109, align 8
  %111 = sub i64 %108, %110
  %112 = sdiv exact i64 %111, 24
  %113 = trunc i64 %112 to i32
  %114 = load i64, i64* %4, align 8
  %115 = add i64 %114, 7
  %116 = inttoptr i64 %115 to i32*
  %117 = load i32, i32* %116, align 4
  %118 = and i64 %114, -4294967296
  %119 = add i64 %114, 11
  %120 = inttoptr i64 %119 to i32*
  %121 = load i32, i32* %120, align 4
  %122 = zext i32 %121 to i64
  %123 = or i64 %118, %122
  %124 = icmp slt i32 %117, 257
  br i1 %124, label %125, label %129

125:                                              ; preds = %105
  %126 = add i64 %123, 7
  %127 = inttoptr i64 %126 to i8*
  %128 = trunc i64 %112 to i8
  store i8 %128, i8* %127, align 1
  br label %137

129:                                              ; preds = %105
  %130 = icmp slt i32 %117, 65537
  %131 = add i64 %123, 7
  br i1 %130, label %132, label %135

132:                                              ; preds = %129
  %133 = inttoptr i64 %131 to i16*
  %134 = trunc i64 %112 to i16
  store i16 %134, i16* %133, align 2
  br label %137

135:                                              ; preds = %129
  %136 = inttoptr i64 %131 to i32*
  store i32 %113, i32* %136, align 4
  br label %137

137:                                              ; preds = %125, %132, %135
  %138 = load %struct.Entry*, %struct.Entry** %61, align 8
  %139 = load %struct.Entry*, %struct.Entry** %106, align 8
  %140 = icmp eq %struct.Entry* %138, %139
  br i1 %140, label %203, label %210

141:                                              ; preds = %99
  %142 = add nuw nsw i64 %63, 2
  br i1 %75, label %143, label %149

143:                                              ; preds = %141
  %144 = add i64 %74, 7
  %145 = inttoptr i64 %144 to i8*
  %146 = getelementptr inbounds i8, i8* %145, i64 %142
  %147 = load i8, i8* %146, align 1
  %148 = zext i8 %147 to i32
  br label %161

149:                                              ; preds = %141
  %150 = icmp slt i32 %68, 65537
  %151 = add i64 %74, 7
  br i1 %150, label %152, label %157

152:                                              ; preds = %149
  %153 = inttoptr i64 %151 to i16*
  %154 = getelementptr inbounds i16, i16* %153, i64 %142
  %155 = load i16, i16* %154, align 2
  %156 = zext i16 %155 to i32
  br label %161

157:                                              ; preds = %149
  %158 = inttoptr i64 %151 to i32*
  %159 = getelementptr inbounds i32, i32* %158, i64 %142
  %160 = load i32, i32* %159, align 4
  br label %161

161:                                              ; preds = %143, %152, %157
  %162 = phi i32 [ %148, %143 ], [ %156, %152 ], [ %160, %157 ]
  %163 = shl i32 %162, 3
  %164 = sext i32 %163 to i64
  %165 = add i64 %65, 15
  %166 = add i64 %165, %164
  %167 = inttoptr i64 %166 to i32*
  %168 = load atomic i32, i32* %167 monotonic, align 4
  %169 = load i64, i64* %60, align 8
  %170 = trunc i64 %169 to i32
  %171 = icmp eq i32 %168, %170
  br i1 %171, label %198, label %172

172:                                              ; preds = %161
  %173 = zext i32 %168 to i64
  %174 = or i64 %69, %173
  %175 = or i32 %163, 4
  %176 = sext i32 %175 to i64
  %177 = add i64 %165, %176
  %178 = inttoptr i64 %177 to i32*
  %179 = load atomic i32, i32* %178 monotonic, align 4
  %180 = zext i32 %179 to i64
  %181 = or i64 %69, %180
  %182 = mul i32 %68, 9
  %183 = add i32 %182, 32
  %184 = sext i32 %183 to i64
  %185 = add i64 %65, -1
  %186 = add i64 %185, %184
  %187 = inttoptr i64 %186 to i8*
  %188 = sext i32 %162 to i64
  %189 = getelementptr inbounds i8, i8* %187, i64 %188
  %190 = load i8, i8* %189, align 1
  %191 = zext i8 %190 to i32
  %192 = add nsw i32 %64, 1
  %193 = sext i32 %64 to i64
  %194 = load %struct.Entry*, %struct.Entry** %61, align 8
  %195 = getelementptr inbounds %struct.Entry, %struct.Entry* %194, i64 %193, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %174, i64* %195, align 8
  %196 = getelementptr inbounds %struct.Entry, %struct.Entry* %194, i64 %193, i32 1, i32 0, i32 0
  store i64 %181, i64* %196, align 8
  %197 = getelementptr inbounds %struct.Entry, %struct.Entry* %194, i64 %193, i32 2, i32 0
  store i32 %191, i32* %197, align 8
  br label %198

198:                                              ; preds = %161, %172
  %199 = phi i32 [ %192, %172 ], [ %64, %161 ]
  %200 = add nuw nsw i64 %63, 1
  br label %62

201:                                              ; preds = %247
  %202 = load %struct.Entry*, %struct.Entry** %61, align 8
  br label %203

203:                                              ; preds = %201, %137
  %204 = phi %struct.Entry* [ %202, %201 ], [ %138, %137 ]
  %205 = icmp eq %struct.Entry* %204, null
  br i1 %205, label %209, label %206

206:                                              ; preds = %203
  %207 = ptrtoint %struct.Entry* %204 to i64
  store i64 %207, i64* %107, align 8
  %208 = bitcast %struct.Entry* %204 to i8*
  tail call void @_ZdlPv(i8* %208) #11
  br label %209

209:                                              ; preds = %203, %206
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %11) #9
  br label %251

210:                                              ; preds = %137, %247
  %211 = phi i64 [ %248, %247 ], [ 0, %137 ]
  %212 = phi %struct.Entry* [ %249, %247 ], [ %138, %137 ]
  %213 = getelementptr inbounds %struct.Entry, %struct.Entry* %212, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %214 = load i64, i64* %213, align 8
  %215 = getelementptr inbounds %struct.Entry, %struct.Entry* %212, i64 0, i32 1, i32 0, i32 0
  %216 = load i64, i64* %215, align 8
  %217 = getelementptr inbounds %struct.Entry, %struct.Entry* %212, i64 0, i32 2, i32 0
  %218 = load i32, i32* %217, align 8
  %219 = tail call i32 @_ZN2v88internal19SwissNameDictionary11AddInternalENS0_4NameENS0_6ObjectENS0_15PropertyDetailsE(%"class.v8::internal::SwissNameDictionary"* %0, i64 %214, i64 %216, i32 %218)
  %220 = add nuw nsw i64 %211, 2
  %221 = load i64, i64* %4, align 8
  %222 = add i64 %221, 7
  %223 = inttoptr i64 %222 to i32*
  %224 = load i32, i32* %223, align 4
  %225 = and i64 %221, -4294967296
  %226 = add i64 %221, 11
  %227 = inttoptr i64 %226 to i32*
  %228 = load i32, i32* %227, align 4
  %229 = zext i32 %228 to i64
  %230 = or i64 %225, %229
  %231 = icmp slt i32 %224, 257
  br i1 %231, label %232, label %237

232:                                              ; preds = %210
  %233 = add i64 %230, 7
  %234 = inttoptr i64 %233 to i8*
  %235 = trunc i32 %219 to i8
  %236 = getelementptr inbounds i8, i8* %234, i64 %220
  store i8 %235, i8* %236, align 1
  br label %247

237:                                              ; preds = %210
  %238 = icmp slt i32 %224, 65537
  %239 = add i64 %230, 7
  br i1 %238, label %240, label %244

240:                                              ; preds = %237
  %241 = inttoptr i64 %239 to i16*
  %242 = trunc i32 %219 to i16
  %243 = getelementptr inbounds i16, i16* %241, i64 %220
  store i16 %242, i16* %243, align 2
  br label %247

244:                                              ; preds = %237
  %245 = inttoptr i64 %239 to i32*
  %246 = getelementptr inbounds i32, i32* %245, i64 %220
  store i32 %219, i32* %246, align 4
  br label %247

247:                                              ; preds = %232, %240, %244
  %248 = add nuw i64 %211, 1
  %249 = getelementptr inbounds %struct.Entry, %struct.Entry* %212, i64 1
  %250 = icmp eq %struct.Entry* %249, %139
  br i1 %250, label %201, label %210

251:                                              ; preds = %2, %209
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2v88internal19SwissNameDictionary28NumberOfEnumerablePropertiesEv(%"class.v8::internal::SwissNameDictionary"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::SwissNameDictionary", %"class.v8::internal::SwissNameDictionary"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = load %"class.v8::internal::SoleReadOnlyHeap"*, %"class.v8::internal::SoleReadOnlyHeap"** @_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E, align 8
  %5 = icmp eq %"class.v8::internal::SoleReadOnlyHeap"* %4, null
  br i1 %5, label %12, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %4, i64 0, i32 0, i32 1
  %8 = load i8, i8* %7, align 8, !range !4
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %12, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %4, i64 0, i32 1, i64 0
  br label %20

12:                                               ; preds = %6, %1
  %13 = and i64 %3, -262144
  %14 = or i64 %13, 16
  %15 = inttoptr i64 %14 to i64*
  %16 = load i64, i64* %15, align 16
  %17 = add i64 %16, -41416
  %18 = inttoptr i64 %17 to %"class.v8::internal::Isolate"*
  %19 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %18, i64 0, i32 0, i32 7, i32 0, i64 0
  br label %20

20:                                               ; preds = %10, %12
  %21 = phi i64* [ %19, %12 ], [ %11, %10 ]
  %22 = add i64 %3, 7
  %23 = inttoptr i64 %22 to i32*
  %24 = load i32, i32* %23, align 4
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %138, label %26

26:                                               ; preds = %20
  %27 = and i64 %3, -262144
  %28 = or i64 %27, 8
  %29 = inttoptr i64 %28 to i64*
  %30 = load i64, i64* %29, align 8
  %31 = and i64 %30, 2097152
  %32 = icmp eq i64 %31, 0
  br i1 %32, label %33, label %39

33:                                               ; preds = %26
  %34 = or i64 %27, 16
  %35 = inttoptr i64 %34 to i64*
  %36 = load i64, i64* %35, align 16
  %37 = add i64 %36, -41416
  %38 = inttoptr i64 %37 to %"class.v8::internal::Isolate"*
  br label %39

39:                                               ; preds = %33, %26
  %40 = phi %"class.v8::internal::Isolate"* [ %38, %33 ], [ null, %26 ]
  %41 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %40, i64 0, i32 31, i32 4
  %42 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %41, align 8
  %43 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %42, null
  br i1 %43, label %46, label %44

44:                                               ; preds = %39
  %45 = tail call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %42, i64 %3) #9
  br label %59

46:                                               ; preds = %39
  %47 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %40, i64 0, i32 31, i32 0
  %48 = load i64*, i64** %47, align 8
  %49 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %40, i64 0, i32 31, i32 1
  %50 = load i64*, i64** %49, align 8
  %51 = icmp eq i64* %48, %50
  br i1 %51, label %52, label %54

52:                                               ; preds = %46
  %53 = tail call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %40) #9
  br label %54

54:                                               ; preds = %52, %46
  %55 = phi i64* [ %53, %52 ], [ %48, %46 ]
  %56 = ptrtoint i64* %55 to i64
  %57 = add i64 %56, 8
  %58 = inttoptr i64 %57 to i64*
  store i64* %58, i64** %47, align 8
  store i64 %3, i64* %55, align 8
  br label %59

59:                                               ; preds = %44, %54
  %60 = phi i64* [ %45, %44 ], [ %55, %54 ]
  %61 = icmp eq i64* %60, null
  br i1 %61, label %138, label %62

62:                                               ; preds = %59
  %63 = load i64, i64* %60, align 8
  %64 = add i64 %63, 7
  %65 = inttoptr i64 %64 to i32*
  %66 = load i32, i32* %65, align 4
  %67 = and i64 %63, -4294967296
  %68 = add i64 %63, 11
  %69 = inttoptr i64 %68 to i32*
  %70 = load i32, i32* %69, align 4
  %71 = zext i32 %70 to i64
  %72 = or i64 %67, %71
  %73 = icmp slt i32 %66, 257
  br i1 %73, label %77, label %74

74:                                               ; preds = %62
  %75 = icmp slt i32 %66, 65537
  %76 = add i64 %72, 7
  br i1 %75, label %94, label %110

77:                                               ; preds = %62
  %78 = add i64 %72, 7
  %79 = inttoptr i64 %78 to i8*
  %80 = load i8, i8* %79, align 1
  %81 = zext i8 %80 to i32
  %82 = getelementptr inbounds i8, i8* %79, i64 1
  %83 = load i8, i8* %82, align 1
  %84 = zext i8 %83 to i32
  %85 = add nuw nsw i32 %84, %81
  %86 = add i64 %72, 7
  %87 = inttoptr i64 %86 to i8*
  %88 = load i8, i8* %87, align 1
  %89 = zext i8 %88 to i32
  %90 = getelementptr inbounds i8, i8* %87, i64 1
  %91 = load i8, i8* %90, align 1
  %92 = zext i8 %91 to i32
  %93 = add nuw nsw i32 %92, %89
  br label %122

94:                                               ; preds = %74
  %95 = inttoptr i64 %76 to i16*
  %96 = load i16, i16* %95, align 2
  %97 = zext i16 %96 to i32
  %98 = getelementptr inbounds i16, i16* %95, i64 1
  %99 = load i16, i16* %98, align 2
  %100 = zext i16 %99 to i32
  %101 = add nuw nsw i32 %100, %97
  %102 = add i64 %72, 7
  %103 = inttoptr i64 %102 to i16*
  %104 = load i16, i16* %103, align 2
  %105 = zext i16 %104 to i32
  %106 = getelementptr inbounds i16, i16* %103, i64 1
  %107 = load i16, i16* %106, align 2
  %108 = zext i16 %107 to i32
  %109 = add nuw nsw i32 %108, %105
  br label %122

110:                                              ; preds = %74
  %111 = inttoptr i64 %76 to i32*
  %112 = load i32, i32* %111, align 4
  %113 = getelementptr inbounds i32, i32* %111, i64 1
  %114 = load i32, i32* %113, align 4
  %115 = add nsw i32 %114, %112
  %116 = add i64 %72, 7
  %117 = inttoptr i64 %116 to i32*
  %118 = load i32, i32* %117, align 4
  %119 = getelementptr inbounds i32, i32* %117, i64 1
  %120 = load i32, i32* %119, align 4
  %121 = add nsw i32 %120, %118
  br label %122

122:                                              ; preds = %77, %94, %110
  %123 = phi i32 [ %115, %110 ], [ %101, %94 ], [ %85, %77 ]
  %124 = phi i32 [ %121, %110 ], [ %109, %94 ], [ %93, %77 ]
  %125 = icmp eq i32 %124, 0
  br i1 %125, label %138, label %126

126:                                              ; preds = %122
  %127 = load i64, i64* %2, align 8
  %128 = add i64 %127, 15
  %129 = getelementptr inbounds i64, i64* %21, i64 5
  %130 = load i64, i64* %129, align 8
  %131 = trunc i64 %130 to i32
  %132 = and i64 %127, -4294967296
  %133 = add i64 %127, 7
  %134 = inttoptr i64 %133 to i32*
  %135 = add i64 %127, -1
  %136 = zext i32 %124 to i64
  %137 = zext i32 %123 to i64
  br label %140

138:                                              ; preds = %216, %20, %59, %122
  %139 = phi i32 [ 0, %122 ], [ 0, %59 ], [ 0, %20 ], [ %217, %216 ]
  ret i32 %139

140:                                              ; preds = %126, %216
  %141 = phi i64 [ 0, %126 ], [ %218, %216 ]
  %142 = phi i32 [ 0, %126 ], [ %217, %216 ]
  %143 = icmp eq i64 %141, %137
  br i1 %143, label %178, label %144

144:                                              ; preds = %140
  %145 = load i64, i64* %60, align 8
  %146 = add nuw nsw i64 %141, 2
  %147 = add i64 %145, 7
  %148 = inttoptr i64 %147 to i32*
  %149 = load i32, i32* %148, align 4
  %150 = and i64 %145, -4294967296
  %151 = add i64 %145, 11
  %152 = inttoptr i64 %151 to i32*
  %153 = load i32, i32* %152, align 4
  %154 = zext i32 %153 to i64
  %155 = or i64 %150, %154
  %156 = icmp slt i32 %149, 257
  br i1 %156, label %157, label %163

157:                                              ; preds = %144
  %158 = add i64 %155, 7
  %159 = inttoptr i64 %158 to i8*
  %160 = getelementptr inbounds i8, i8* %159, i64 %146
  %161 = load i8, i8* %160, align 1
  %162 = zext i8 %161 to i32
  br label %175

163:                                              ; preds = %144
  %164 = icmp slt i32 %149, 65537
  %165 = add i64 %155, 7
  br i1 %164, label %166, label %171

166:                                              ; preds = %163
  %167 = inttoptr i64 %165 to i16*
  %168 = getelementptr inbounds i16, i16* %167, i64 %146
  %169 = load i16, i16* %168, align 2
  %170 = zext i16 %169 to i32
  br label %175

171:                                              ; preds = %163
  %172 = inttoptr i64 %165 to i32*
  %173 = getelementptr inbounds i32, i32* %172, i64 %146
  %174 = load i32, i32* %173, align 4
  br label %175

175:                                              ; preds = %171, %166, %157
  %176 = phi i32 [ %162, %157 ], [ %170, %166 ], [ %174, %171 ]
  %177 = sext i32 %176 to i64
  br label %178

178:                                              ; preds = %140, %175
  %179 = phi i64 [ %177, %175 ], [ -1, %140 ]
  %180 = trunc i64 %179 to i32
  %181 = shl i32 %180, 3
  %182 = sext i32 %181 to i64
  %183 = add i64 %128, %182
  %184 = inttoptr i64 %183 to i32*
  %185 = load atomic i32, i32* %184 monotonic, align 4
  %186 = icmp eq i32 %185, %131
  br i1 %186, label %216, label %187

187:                                              ; preds = %178
  %188 = zext i32 %185 to i64
  %189 = and i64 %188, 1
  %190 = icmp eq i64 %189, 0
  br i1 %190, label %202, label %191

191:                                              ; preds = %187
  %192 = or i64 %132, %188
  %193 = add i64 %192, -1
  %194 = inttoptr i64 %193 to i32*
  %195 = load atomic i32, i32* %194 monotonic, align 4
  %196 = zext i32 %195 to i64
  %197 = or i64 %132, %196
  %198 = add i64 %197, 7
  %199 = inttoptr i64 %198 to i16*
  %200 = load atomic i16, i16* %199 monotonic, align 2
  %201 = icmp eq i16 %200, 64
  br i1 %201, label %216, label %202

202:                                              ; preds = %187, %191
  %203 = load i32, i32* %134, align 4
  %204 = mul i32 %203, 9
  %205 = add i32 %204, 32
  %206 = sext i32 %205 to i64
  %207 = add i64 %135, %206
  %208 = inttoptr i64 %207 to i8*
  %209 = getelementptr inbounds i8, i8* %208, i64 %179
  %210 = load i8, i8* %209, align 1
  %211 = lshr i8 %210, 4
  %212 = and i8 %211, 1
  %213 = xor i8 %212, 1
  %214 = zext i8 %213 to i32
  %215 = add nsw i32 %142, %214
  br label %216

216:                                              ; preds = %191, %178, %202
  %217 = phi i32 [ %215, %202 ], [ %142, %178 ], [ %142, %191 ]
  %218 = add nuw nsw i64 %141, 1
  %219 = icmp eq i64 %218, %136
  br i1 %219, label %138, label %140
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN2v88internal19SwissNameDictionary17SlowReverseLookupEPNS0_7IsolateENS0_6ObjectE(%"class.v8::internal::SwissNameDictionary"* nocapture readonly, %"class.v8::internal::Isolate"*, i64) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::SwissNameDictionary", %"class.v8::internal::SwissNameDictionary"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %5 = load i64, i64* %4, align 8
  %6 = add i64 %5, 7
  %7 = inttoptr i64 %6 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %171, label %10

10:                                               ; preds = %3
  %11 = and i64 %5, -262144
  %12 = or i64 %11, 8
  %13 = inttoptr i64 %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = and i64 %14, 2097152
  %16 = icmp eq i64 %15, 0
  br i1 %16, label %17, label %23

17:                                               ; preds = %10
  %18 = or i64 %11, 16
  %19 = inttoptr i64 %18 to i64*
  %20 = load i64, i64* %19, align 16
  %21 = add i64 %20, -41416
  %22 = inttoptr i64 %21 to %"class.v8::internal::Isolate"*
  br label %23

23:                                               ; preds = %17, %10
  %24 = phi %"class.v8::internal::Isolate"* [ %22, %17 ], [ null, %10 ]
  %25 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %24, i64 0, i32 31, i32 4
  %26 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %25, align 8
  %27 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %26, null
  br i1 %27, label %30, label %28

28:                                               ; preds = %23
  %29 = tail call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %26, i64 %5) #9
  br label %43

30:                                               ; preds = %23
  %31 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %24, i64 0, i32 31, i32 0
  %32 = load i64*, i64** %31, align 8
  %33 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %24, i64 0, i32 31, i32 1
  %34 = load i64*, i64** %33, align 8
  %35 = icmp eq i64* %32, %34
  br i1 %35, label %36, label %38

36:                                               ; preds = %30
  %37 = tail call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %24) #9
  br label %38

38:                                               ; preds = %36, %30
  %39 = phi i64* [ %37, %36 ], [ %32, %30 ]
  %40 = ptrtoint i64* %39 to i64
  %41 = add i64 %40, 8
  %42 = inttoptr i64 %41 to i64*
  store i64* %42, i64** %31, align 8
  store i64 %5, i64* %39, align 8
  br label %43

43:                                               ; preds = %28, %38
  %44 = phi i64* [ %29, %28 ], [ %39, %38 ]
  %45 = icmp eq i64* %44, null
  br i1 %45, label %171, label %46

46:                                               ; preds = %43
  %47 = load i64, i64* %44, align 8
  %48 = add i64 %47, 7
  %49 = inttoptr i64 %48 to i32*
  %50 = load i32, i32* %49, align 4
  %51 = and i64 %47, -4294967296
  %52 = add i64 %47, 11
  %53 = inttoptr i64 %52 to i32*
  %54 = load i32, i32* %53, align 4
  %55 = zext i32 %54 to i64
  %56 = or i64 %51, %55
  %57 = icmp slt i32 %50, 257
  br i1 %57, label %61, label %58

58:                                               ; preds = %46
  %59 = icmp slt i32 %50, 65537
  %60 = add i64 %56, 7
  br i1 %59, label %78, label %94

61:                                               ; preds = %46
  %62 = add i64 %56, 7
  %63 = inttoptr i64 %62 to i8*
  %64 = load i8, i8* %63, align 1
  %65 = zext i8 %64 to i32
  %66 = getelementptr inbounds i8, i8* %63, i64 1
  %67 = load i8, i8* %66, align 1
  %68 = zext i8 %67 to i32
  %69 = add nuw nsw i32 %68, %65
  %70 = add i64 %56, 7
  %71 = inttoptr i64 %70 to i8*
  %72 = load i8, i8* %71, align 1
  %73 = zext i8 %72 to i32
  %74 = getelementptr inbounds i8, i8* %71, i64 1
  %75 = load i8, i8* %74, align 1
  %76 = zext i8 %75 to i32
  %77 = add nuw nsw i32 %76, %73
  br label %106

78:                                               ; preds = %58
  %79 = inttoptr i64 %60 to i16*
  %80 = load i16, i16* %79, align 2
  %81 = zext i16 %80 to i32
  %82 = getelementptr inbounds i16, i16* %79, i64 1
  %83 = load i16, i16* %82, align 2
  %84 = zext i16 %83 to i32
  %85 = add nuw nsw i32 %84, %81
  %86 = add i64 %56, 7
  %87 = inttoptr i64 %86 to i16*
  %88 = load i16, i16* %87, align 2
  %89 = zext i16 %88 to i32
  %90 = getelementptr inbounds i16, i16* %87, i64 1
  %91 = load i16, i16* %90, align 2
  %92 = zext i16 %91 to i32
  %93 = add nuw nsw i32 %92, %89
  br label %106

94:                                               ; preds = %58
  %95 = inttoptr i64 %60 to i32*
  %96 = load i32, i32* %95, align 4
  %97 = getelementptr inbounds i32, i32* %95, i64 1
  %98 = load i32, i32* %97, align 4
  %99 = add nsw i32 %98, %96
  %100 = add i64 %56, 7
  %101 = inttoptr i64 %100 to i32*
  %102 = load i32, i32* %101, align 4
  %103 = getelementptr inbounds i32, i32* %101, i64 1
  %104 = load i32, i32* %103, align 4
  %105 = add nsw i32 %104, %102
  br label %106

106:                                              ; preds = %61, %78, %94
  %107 = phi i32 [ %99, %94 ], [ %85, %78 ], [ %69, %61 ]
  %108 = phi i32 [ %105, %94 ], [ %93, %78 ], [ %77, %61 ]
  %109 = icmp eq i32 %108, 0
  br i1 %109, label %171, label %110

110:                                              ; preds = %106
  %111 = load i64, i64* %4, align 8
  %112 = add i64 %111, 15
  %113 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 0, i32 7, i32 0, i64 5
  %114 = load i64, i64* %113, align 8
  %115 = trunc i64 %114 to i32
  %116 = trunc i64 %2 to i32
  %117 = zext i32 %108 to i64
  %118 = zext i32 %107 to i64
  br label %119

119:                                              ; preds = %110, %168
  %120 = phi i64 [ 0, %110 ], [ %169, %168 ]
  %121 = icmp eq i64 %120, %118
  br i1 %121, label %153, label %122

122:                                              ; preds = %119
  %123 = load i64, i64* %44, align 8
  %124 = add nuw nsw i64 %120, 2
  %125 = add i64 %123, 7
  %126 = inttoptr i64 %125 to i32*
  %127 = load i32, i32* %126, align 4
  %128 = and i64 %123, -4294967296
  %129 = add i64 %123, 11
  %130 = inttoptr i64 %129 to i32*
  %131 = load i32, i32* %130, align 4
  %132 = zext i32 %131 to i64
  %133 = or i64 %128, %132
  %134 = icmp slt i32 %127, 257
  br i1 %134, label %135, label %141

135:                                              ; preds = %122
  %136 = add i64 %133, 7
  %137 = inttoptr i64 %136 to i8*
  %138 = getelementptr inbounds i8, i8* %137, i64 %124
  %139 = load i8, i8* %138, align 1
  %140 = zext i8 %139 to i32
  br label %153

141:                                              ; preds = %122
  %142 = icmp slt i32 %127, 65537
  %143 = add i64 %133, 7
  br i1 %142, label %144, label %149

144:                                              ; preds = %141
  %145 = inttoptr i64 %143 to i16*
  %146 = getelementptr inbounds i16, i16* %145, i64 %124
  %147 = load i16, i16* %146, align 2
  %148 = zext i16 %147 to i32
  br label %153

149:                                              ; preds = %141
  %150 = inttoptr i64 %143 to i32*
  %151 = getelementptr inbounds i32, i32* %150, i64 %124
  %152 = load i32, i32* %151, align 4
  br label %153

153:                                              ; preds = %135, %144, %149, %119
  %154 = phi i32 [ -1, %119 ], [ %140, %135 ], [ %148, %144 ], [ %152, %149 ]
  %155 = shl i32 %154, 3
  %156 = sext i32 %155 to i64
  %157 = add i64 %112, %156
  %158 = inttoptr i64 %157 to i32*
  %159 = load atomic i32, i32* %158 monotonic, align 4
  %160 = icmp eq i32 %159, %115
  br i1 %160, label %168, label %161

161:                                              ; preds = %153
  %162 = or i32 %155, 4
  %163 = sext i32 %162 to i64
  %164 = add i64 %112, %163
  %165 = inttoptr i64 %164 to i32*
  %166 = load atomic i32, i32* %165 monotonic, align 4
  %167 = icmp eq i32 %166, %116
  br i1 %167, label %174, label %168

168:                                              ; preds = %161, %153
  %169 = add nuw nsw i64 %120, 1
  %170 = icmp eq i64 %169, %117
  br i1 %170, label %171, label %119

171:                                              ; preds = %168, %3, %43, %106
  %172 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 0, i32 7, i32 0, i64 4
  %173 = load i64, i64* %172, align 8
  br label %178

174:                                              ; preds = %161
  %175 = and i64 %111, -4294967296
  %176 = zext i32 %159 to i64
  %177 = or i64 %175, %176
  br label %178

178:                                              ; preds = %174, %171
  %179 = phi i64 [ %173, %171 ], [ %177, %174 ]
  ret i64 %179
}

declare void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"*, i64, i64, i64) local_unnamed_addr #2

declare void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64, i64, i64) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.cttz.i32(i32, i1 immarg) #5

declare i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"*, i64) local_unnamed_addr #2

declare i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"*) local_unnamed_addr #2

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #6

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #7

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #8

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { noreturn nounwind }
attributes #11 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 17772186}
!3 = !{i32 0, i32 33}
!4 = !{i8 0, i8 2}
