; ModuleID = '../../third_party/swiftshader/third_party/llvm-subzero/lib/Support/Regex.cpp'
source_filename = "../../third_party/swiftshader/third_party/llvm-subzero/lib/Support/Regex.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.llvm::Regex" = type <{ %struct.llvm_regex*, i32, [4 x i8] }>
%struct.llvm_regex = type { i32, i64, i8*, %struct.re_guts* }
%struct.re_guts = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.llvm::SmallVectorImpl" = type { %"class.llvm::SmallVectorTemplateBase" }
%"class.llvm::SmallVectorTemplateBase" = type { %"class.llvm::SmallVectorTemplateCommon" }
%"class.llvm::SmallVectorTemplateCommon" = type { %"class.llvm::SmallVectorBase", %"struct.llvm::AlignedCharArrayUnion" }
%"class.llvm::SmallVectorBase" = type { i8*, i8*, i8* }
%"struct.llvm::AlignedCharArrayUnion" = type { %"struct.llvm::AlignedCharArray" }
%"struct.llvm::AlignedCharArray" = type { [16 x i8] }
%"class.llvm::SmallVector" = type { %"class.llvm::SmallVectorImpl.1", %"struct.llvm::SmallVectorStorage" }
%"class.llvm::SmallVectorImpl.1" = type { %"class.llvm::SmallVectorTemplateBase.2" }
%"class.llvm::SmallVectorTemplateBase.2" = type { %"class.llvm::SmallVectorTemplateCommon.3" }
%"class.llvm::SmallVectorTemplateCommon.3" = type { %"class.llvm::SmallVectorBase", %"struct.llvm::AlignedCharArrayUnion.4" }
%"struct.llvm::AlignedCharArrayUnion.4" = type { %"struct.llvm::AlignedCharArray" }
%"struct.llvm::SmallVectorStorage" = type { [7 x %"struct.llvm::AlignedCharArrayUnion.4"] }
%"class.llvm::StringRef" = type { i8*, i64 }
%struct.llvm_regmatch_t = type { i64, i64 }
%"class.llvm::SmallVector.5" = type { %"class.llvm::SmallVectorImpl", %"struct.llvm::SmallVectorStorage.6" }
%"struct.llvm::SmallVectorStorage.6" = type { [7 x %"struct.llvm::AlignedCharArrayUnion"] }
%"struct.std::__1::pair" = type { %"class.llvm::StringRef", %"class.llvm::StringRef" }
%"class.llvm::Twine" = type <{ %"union.llvm::Twine::Child", %"union.llvm::Twine::Child", i8, i8, [6 x i8] }>
%"union.llvm::Twine::Child" = type { %"class.llvm::Twine"* }
%"class.std::__1::__basic_string_common" = type { i8 }

$_ZN4llvm15SmallVectorImplI15llvm_regmatch_tE6resizeEm = comdat any

$_ZN4llvm23SmallVectorTemplateBaseINS_9StringRefELb1EE9push_backERKS1_ = comdat any

$_ZNK4llvm9StringRef5splitEc = comdat any

$_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc = comdat any

@.str = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.1 = private unnamed_addr constant [48 x i8] c"replacement string contained trailing backslash\00", align 1
@.str.2 = private unnamed_addr constant [11 x i8] c"0123456789\00", align 1
@.str.3 = private unnamed_addr constant [31 x i8] c"invalid backreference string '\00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"'\00", align 1
@_ZL14RegexMetachars = internal constant [15 x i8] c"()^$|*+?.[]\5C{}\00", align 1

@_ZN4llvm5RegexC1Ev = hidden unnamed_addr alias void (%"class.llvm::Regex"*), void (%"class.llvm::Regex"*)* @_ZN4llvm5RegexC2Ev
@_ZN4llvm5RegexC1ENS_9StringRefEj = hidden unnamed_addr alias void (%"class.llvm::Regex"*, i8*, i64, i32), void (%"class.llvm::Regex"*, i8*, i64, i32)* @_ZN4llvm5RegexC2ENS_9StringRefEj
@_ZN4llvm5RegexC1EOS0_ = hidden unnamed_addr alias void (%"class.llvm::Regex"*, %"class.llvm::Regex"*), void (%"class.llvm::Regex"*, %"class.llvm::Regex"*)* @_ZN4llvm5RegexC2EOS0_
@_ZN4llvm5RegexD1Ev = hidden unnamed_addr alias void (%"class.llvm::Regex"*), void (%"class.llvm::Regex"*)* @_ZN4llvm5RegexD2Ev

; Function Attrs: nofree norecurse nounwind optsize ssp uwtable writeonly
define hidden void @_ZN4llvm5RegexC2Ev(%"class.llvm::Regex"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.llvm::Regex", %"class.llvm::Regex"* %0, i64 0, i32 0
  store %struct.llvm_regex* null, %struct.llvm_regex** %2, align 8
  %3 = getelementptr inbounds %"class.llvm::Regex", %"class.llvm::Regex"* %0, i64 0, i32 1
  store i32 2, i32* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN4llvm5RegexC2ENS_9StringRefEj(%"class.llvm::Regex"* nocapture, i8*, i64, i32) unnamed_addr #1 align 2 {
  %5 = tail call i8* @_Znwm(i64 32) #13
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %5, i8 0, i64 32, i1 false)
  %6 = bitcast %"class.llvm::Regex"* %0 to i8**
  store i8* %5, i8** %6, align 8
  %7 = getelementptr inbounds i8, i8* %1, i64 %2
  %8 = getelementptr inbounds i8, i8* %5, i64 16
  %9 = bitcast i8* %8 to i8**
  store i8* %7, i8** %9, align 8
  %10 = shl i32 %3, 1
  %11 = and i32 %10, 2
  %12 = shl i32 %3, 2
  %13 = and i32 %12, 8
  %14 = or i32 %13, %11
  %15 = lshr i32 %3, 2
  %16 = and i32 %15, 1
  %17 = or i32 %14, %16
  %18 = bitcast i8* %5 to %struct.llvm_regex*
  %19 = xor i32 %17, 33
  %20 = tail call i32 @llvm_regcomp(%struct.llvm_regex* nonnull %18, i8* %1, i32 %19) #14
  %21 = getelementptr inbounds %"class.llvm::Regex", %"class.llvm::Regex"* %0, i64 0, i32 1
  store i32 %20, i32* %21, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nobuiltin nofree optsize
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: optsize
declare i32 @llvm_regcomp(%struct.llvm_regex*, i8*, i32) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree norecurse nounwind optsize ssp uwtable
define hidden void @_ZN4llvm5RegexC2EOS0_(%"class.llvm::Regex"* nocapture, %"class.llvm::Regex"* nocapture dereferenceable(16)) unnamed_addr #5 align 2 {
  %3 = getelementptr inbounds %"class.llvm::Regex", %"class.llvm::Regex"* %1, i64 0, i32 0
  %4 = bitcast %"class.llvm::Regex"* %1 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.llvm::Regex"* %0 to i64*
  store i64 %5, i64* %6, align 8
  %7 = getelementptr inbounds %"class.llvm::Regex", %"class.llvm::Regex"* %1, i64 0, i32 1
  %8 = load i32, i32* %7, align 8
  %9 = getelementptr inbounds %"class.llvm::Regex", %"class.llvm::Regex"* %0, i64 0, i32 1
  store i32 %8, i32* %9, align 8
  store %struct.llvm_regex* null, %struct.llvm_regex** %3, align 8
  store i32 2, i32* %7, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN4llvm5RegexD2Ev(%"class.llvm::Regex"* nocapture readonly) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.llvm::Regex", %"class.llvm::Regex"* %0, i64 0, i32 0
  %3 = load %struct.llvm_regex*, %struct.llvm_regex** %2, align 8
  %4 = icmp eq %struct.llvm_regex* %3, null
  br i1 %4, label %10, label %5

5:                                                ; preds = %1
  tail call void @llvm_regfree(%struct.llvm_regex* nonnull %3) #14
  %6 = load %struct.llvm_regex*, %struct.llvm_regex** %2, align 8
  %7 = icmp eq %struct.llvm_regex* %6, null
  br i1 %7, label %10, label %8

8:                                                ; preds = %5
  %9 = bitcast %struct.llvm_regex* %6 to i8*
  tail call void @_ZdlPv(i8* %9) #13
  br label %10

10:                                               ; preds = %1, %5, %8
  ret void
}

; Function Attrs: optsize
declare void @llvm_regfree(%struct.llvm_regex*) local_unnamed_addr #4

; Function Attrs: nobuiltin nounwind optsize
declare void @_ZdlPv(i8*) local_unnamed_addr #6

; Function Attrs: nounwind optsize ssp uwtable
define hidden zeroext i1 @_ZN4llvm5Regex7isValidERNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%"class.llvm::Regex"* nocapture readonly, %"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.llvm::Regex", %"class.llvm::Regex"* %0, i64 0, i32 1
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %22, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.llvm::Regex", %"class.llvm::Regex"* %0, i64 0, i32 0
  %8 = load %struct.llvm_regex*, %struct.llvm_regex** %7, align 8
  %9 = tail call i64 @llvm_regerror(i32 %4, %struct.llvm_regex* %8, i8* null, i64 0) #14
  %10 = add i64 %9, -1
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(%"class.std::__1::basic_string"* %1, i64 %10, i8 signext 0) #14
  %11 = load i32, i32* %3, align 8
  %12 = load %struct.llvm_regex*, %struct.llvm_regex** %7, align 8
  %13 = bitcast %"class.std::__1::basic_string"* %1 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %14 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %13, i64 0, i32 1, i32 0
  %15 = load i8, i8* %14, align 1
  %16 = icmp slt i8 %15, 0
  %17 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %18 = load i8*, i8** %17, align 8
  %19 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  %20 = select i1 %16, i8* %18, i8* %19
  %21 = tail call i64 @llvm_regerror(i32 %11, %struct.llvm_regex* %12, i8* %20, i64 %9) #14
  br label %22

22:                                               ; preds = %2, %6
  %23 = phi i1 [ false, %6 ], [ true, %2 ]
  ret i1 %23
}

; Function Attrs: optsize
declare i64 @llvm_regerror(i32, %struct.llvm_regex*, i8*, i64) local_unnamed_addr #4

; Function Attrs: norecurse nounwind optsize readonly ssp uwtable
define hidden i32 @_ZNK4llvm5Regex13getNumMatchesEv(%"class.llvm::Regex"* nocapture readonly) local_unnamed_addr #7 align 2 {
  %2 = getelementptr inbounds %"class.llvm::Regex", %"class.llvm::Regex"* %0, i64 0, i32 0
  %3 = load %struct.llvm_regex*, %struct.llvm_regex** %2, align 8
  %4 = getelementptr inbounds %struct.llvm_regex, %struct.llvm_regex* %3, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = trunc i64 %5 to i32
  ret i32 %6
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden zeroext i1 @_ZN4llvm5Regex5matchENS_9StringRefEPNS_15SmallVectorImplIS1_EE(%"class.llvm::Regex"* nocapture, i8*, i64, %"class.llvm::SmallVectorImpl"*) local_unnamed_addr #1 align 2 {
  %5 = alloca %"class.llvm::SmallVector", align 8
  %6 = alloca %"class.llvm::StringRef", align 8
  %7 = alloca %"class.llvm::StringRef", align 8
  %8 = getelementptr inbounds %"class.llvm::Regex", %"class.llvm::Regex"* %0, i64 0, i32 1
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %79

11:                                               ; preds = %4
  %12 = icmp ne %"class.llvm::SmallVectorImpl"* %3, null
  br i1 %12, label %13, label %20

13:                                               ; preds = %11
  %14 = getelementptr inbounds %"class.llvm::Regex", %"class.llvm::Regex"* %0, i64 0, i32 0
  %15 = load %struct.llvm_regex*, %struct.llvm_regex** %14, align 8
  %16 = getelementptr inbounds %struct.llvm_regex, %struct.llvm_regex* %15, i64 0, i32 1
  %17 = load i64, i64* %16, align 8
  %18 = trunc i64 %17 to i32
  %19 = add i32 %18, 1
  br label %20

20:                                               ; preds = %11, %13
  %21 = phi i32 [ %19, %13 ], [ 0, %11 ]
  %22 = bitcast %"class.llvm::SmallVector"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 152, i8* nonnull %22) #15
  %23 = getelementptr inbounds %"class.llvm::SmallVector", %"class.llvm::SmallVector"* %5, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %23, i8 -86, i64 128, i1 false)
  %24 = getelementptr inbounds %"class.llvm::SmallVector", %"class.llvm::SmallVector"* %5, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i64 0
  %25 = getelementptr inbounds %"class.llvm::SmallVector", %"class.llvm::SmallVector"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %24, i8** %25, align 8
  %26 = getelementptr inbounds %"class.llvm::SmallVector", %"class.llvm::SmallVector"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i8* %24, i8** %26, align 8
  %27 = getelementptr inbounds %"class.llvm::SmallVector", %"class.llvm::SmallVector"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %28 = getelementptr inbounds %"class.llvm::SmallVector", %"class.llvm::SmallVector"* %5, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i64 128
  store i8* %28, i8** %27, align 8
  %29 = getelementptr inbounds %"class.llvm::SmallVector", %"class.llvm::SmallVector"* %5, i64 0, i32 0
  %30 = icmp eq i32 %21, 0
  %31 = select i1 %30, i32 1, i32 %21
  %32 = zext i32 %31 to i64
  call void @_ZN4llvm15SmallVectorImplI15llvm_regmatch_tE6resizeEm(%"class.llvm::SmallVectorImpl.1"* nonnull %29, i64 %32) #16
  %33 = bitcast %"class.llvm::SmallVector"* %5 to %struct.llvm_regmatch_t**
  %34 = load %struct.llvm_regmatch_t*, %struct.llvm_regmatch_t** %33, align 8
  %35 = getelementptr inbounds %struct.llvm_regmatch_t, %struct.llvm_regmatch_t* %34, i64 0, i32 0
  store i64 0, i64* %35, align 8
  %36 = load %struct.llvm_regmatch_t*, %struct.llvm_regmatch_t** %33, align 8
  %37 = getelementptr inbounds %struct.llvm_regmatch_t, %struct.llvm_regmatch_t* %36, i64 0, i32 1
  store i64 %2, i64* %37, align 8
  %38 = getelementptr inbounds %"class.llvm::Regex", %"class.llvm::Regex"* %0, i64 0, i32 0
  %39 = load %struct.llvm_regex*, %struct.llvm_regex** %38, align 8
  %40 = zext i32 %21 to i64
  %41 = call i32 @llvm_regexec(%struct.llvm_regex* %39, i8* %1, i64 %40, %struct.llvm_regmatch_t* %36, i32 4) #14
  switch i32 %41, label %42 [
    i32 1, label %73
    i32 0, label %43
  ]

42:                                               ; preds = %20
  store i32 %41, i32* %8, align 8
  br label %73

43:                                               ; preds = %20
  br i1 %12, label %44, label %73

44:                                               ; preds = %43
  %45 = bitcast %"class.llvm::SmallVectorImpl"* %3 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = getelementptr inbounds %"class.llvm::SmallVectorImpl", %"class.llvm::SmallVectorImpl"* %3, i64 0, i32 0, i32 0, i32 0, i32 1
  %48 = bitcast i8** %47 to i64*
  store i64 %46, i64* %48, align 8
  br i1 %30, label %73, label %49

49:                                               ; preds = %44
  %50 = getelementptr inbounds %"class.llvm::SmallVectorImpl", %"class.llvm::SmallVectorImpl"* %3, i64 0, i32 0
  %51 = bitcast %"class.llvm::StringRef"* %7 to i8*
  %52 = getelementptr inbounds %"class.llvm::StringRef", %"class.llvm::StringRef"* %7, i64 0, i32 0
  %53 = getelementptr inbounds %"class.llvm::StringRef", %"class.llvm::StringRef"* %7, i64 0, i32 1
  %54 = bitcast %"class.llvm::StringRef"* %6 to i8*
  %55 = bitcast %"class.llvm::StringRef"* %6 to i8*
  br label %56

56:                                               ; preds = %49, %68
  %57 = phi i64 [ 0, %49 ], [ %71, %68 ]
  %58 = load %struct.llvm_regmatch_t*, %struct.llvm_regmatch_t** %33, align 8
  %59 = getelementptr inbounds %struct.llvm_regmatch_t, %struct.llvm_regmatch_t* %58, i64 %57, i32 0
  %60 = load i64, i64* %59, align 8
  %61 = icmp eq i64 %60, -1
  br i1 %61, label %62, label %63

62:                                               ; preds = %56
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %54) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %55, i8 0, i64 16, i1 false)
  br label %68

63:                                               ; preds = %56
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %51) #15
  %64 = getelementptr inbounds i8, i8* %1, i64 %60
  %65 = getelementptr inbounds %struct.llvm_regmatch_t, %struct.llvm_regmatch_t* %58, i64 %57, i32 1
  %66 = load i64, i64* %65, align 8
  %67 = sub nsw i64 %66, %60
  store i8* %64, i8** %52, align 8
  store i64 %67, i64* %53, align 8
  br label %68

68:                                               ; preds = %63, %62
  %69 = phi %"class.llvm::StringRef"* [ %7, %63 ], [ %6, %62 ]
  %70 = phi i8* [ %51, %63 ], [ %54, %62 ]
  call void @_ZN4llvm23SmallVectorTemplateBaseINS_9StringRefELb1EE9push_backERKS1_(%"class.llvm::SmallVectorTemplateBase"* %50, %"class.llvm::StringRef"* nonnull dereferenceable(16) %69) #16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %70) #15
  %71 = add nuw nsw i64 %57, 1
  %72 = icmp eq i64 %71, %40
  br i1 %72, label %73, label %56

73:                                               ; preds = %68, %44, %43, %20, %42
  %74 = phi i1 [ false, %42 ], [ false, %20 ], [ true, %43 ], [ true, %44 ], [ true, %68 ]
  %75 = load i8*, i8** %25, align 8
  %76 = icmp eq i8* %75, %24
  br i1 %76, label %78, label %77

77:                                               ; preds = %73
  call void @free(i8* %75) #14
  br label %78

78:                                               ; preds = %73, %77
  call void @llvm.lifetime.end.p0i8(i64 152, i8* nonnull %22) #15
  br label %79

79:                                               ; preds = %4, %78
  %80 = phi i1 [ %74, %78 ], [ false, %4 ]
  ret i1 %80
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZN4llvm15SmallVectorImplI15llvm_regmatch_tE6resizeEm(%"class.llvm::SmallVectorImpl.1"*, i64) local_unnamed_addr #1 comdat align 2 {
  %3 = getelementptr inbounds %"class.llvm::SmallVectorImpl.1", %"class.llvm::SmallVectorImpl.1"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %4 = bitcast i8** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.llvm::SmallVectorImpl.1"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 4
  %10 = icmp ugt i64 %9, %1
  %11 = inttoptr i64 %5 to %struct.llvm_regmatch_t*
  %12 = inttoptr i64 %7 to %struct.llvm_regmatch_t*
  br i1 %10, label %13, label %15

13:                                               ; preds = %2
  %14 = bitcast i8** %3 to %struct.llvm_regmatch_t**
  br label %53

15:                                               ; preds = %2
  %16 = icmp ult i64 %9, %1
  br i1 %16, label %17, label %57

17:                                               ; preds = %15
  %18 = getelementptr inbounds %"class.llvm::SmallVectorImpl.1", %"class.llvm::SmallVectorImpl.1"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %19 = bitcast i8** %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = sub i64 %20, %7
  %22 = ashr exact i64 %21, 4
  %23 = icmp ult i64 %22, %1
  br i1 %23, label %27, label %24

24:                                               ; preds = %17
  %25 = bitcast i8** %3 to %struct.llvm_regmatch_t**
  %26 = bitcast %"class.llvm::SmallVectorImpl.1"* %0 to %struct.llvm_regmatch_t**
  br label %35

27:                                               ; preds = %17
  %28 = shl i64 %1, 4
  %29 = getelementptr inbounds %"class.llvm::SmallVectorImpl.1", %"class.llvm::SmallVectorImpl.1"* %0, i64 0, i32 0, i32 0, i32 0
  %30 = getelementptr inbounds %"class.llvm::SmallVectorImpl.1", %"class.llvm::SmallVectorImpl.1"* %0, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i64 0
  tail call void @_ZN4llvm15SmallVectorBase8grow_podEPvmm(%"class.llvm::SmallVectorBase"* %29, i8* %30, i64 %28, i64 16) #14
  %31 = bitcast i8** %3 to %struct.llvm_regmatch_t**
  %32 = load %struct.llvm_regmatch_t*, %struct.llvm_regmatch_t** %31, align 8
  %33 = bitcast %"class.llvm::SmallVectorImpl.1"* %0 to %struct.llvm_regmatch_t**
  %34 = load %struct.llvm_regmatch_t*, %struct.llvm_regmatch_t** %33, align 8
  br label %35

35:                                               ; preds = %24, %27
  %36 = phi %struct.llvm_regmatch_t** [ %26, %24 ], [ %33, %27 ]
  %37 = phi %struct.llvm_regmatch_t** [ %25, %24 ], [ %31, %27 ]
  %38 = phi %struct.llvm_regmatch_t* [ %12, %24 ], [ %34, %27 ]
  %39 = phi %struct.llvm_regmatch_t* [ %11, %24 ], [ %32, %27 ]
  %40 = getelementptr inbounds %struct.llvm_regmatch_t, %struct.llvm_regmatch_t* %38, i64 %1
  %41 = icmp eq %struct.llvm_regmatch_t* %39, %40
  br i1 %41, label %51, label %42

42:                                               ; preds = %35
  %43 = bitcast %struct.llvm_regmatch_t* %39 to i8*
  %44 = ptrtoint %struct.llvm_regmatch_t* %39 to i64
  %45 = add i64 %1, -1
  %46 = getelementptr %struct.llvm_regmatch_t, %struct.llvm_regmatch_t* %38, i64 %45, i32 0
  %47 = ptrtoint i64* %46 to i64
  %48 = sub i64 %47, %44
  %49 = add i64 %48, 16
  %50 = and i64 %49, -16
  call void @llvm.memset.p0i8.i64(i8* align 8 %43, i8 0, i64 %50, i1 false)
  br label %51

51:                                               ; preds = %42, %35
  %52 = load %struct.llvm_regmatch_t*, %struct.llvm_regmatch_t** %36, align 8
  br label %53

53:                                               ; preds = %13, %51
  %54 = phi %struct.llvm_regmatch_t* [ %52, %51 ], [ %12, %13 ]
  %55 = phi %struct.llvm_regmatch_t** [ %37, %51 ], [ %14, %13 ]
  %56 = getelementptr inbounds %struct.llvm_regmatch_t, %struct.llvm_regmatch_t* %54, i64 %1
  store %struct.llvm_regmatch_t* %56, %struct.llvm_regmatch_t** %55, align 8
  br label %57

57:                                               ; preds = %53, %15
  ret void
}

; Function Attrs: optsize
declare i32 @llvm_regexec(%struct.llvm_regex*, i8*, i64, %struct.llvm_regmatch_t*, i32) local_unnamed_addr #4

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZN4llvm23SmallVectorTemplateBaseINS_9StringRefELb1EE9push_backERKS1_(%"class.llvm::SmallVectorTemplateBase"*, %"class.llvm::StringRef"* dereferenceable(16)) local_unnamed_addr #1 comdat align 2 {
  %3 = getelementptr inbounds %"class.llvm::SmallVectorTemplateBase", %"class.llvm::SmallVectorTemplateBase"* %0, i64 0, i32 0, i32 0, i32 1
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.llvm::SmallVectorTemplateBase", %"class.llvm::SmallVectorTemplateBase"* %0, i64 0, i32 0, i32 0, i32 2
  %6 = load i8*, i8** %5, align 8
  %7 = icmp ult i8* %4, %6
  br i1 %7, label %12, label %8, !prof !2

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.llvm::SmallVectorTemplateBase", %"class.llvm::SmallVectorTemplateBase"* %0, i64 0, i32 0, i32 0
  %10 = getelementptr inbounds %"class.llvm::SmallVectorTemplateBase", %"class.llvm::SmallVectorTemplateBase"* %0, i64 0, i32 0, i32 1, i32 0, i32 0, i64 0
  tail call void @_ZN4llvm15SmallVectorBase8grow_podEPvmm(%"class.llvm::SmallVectorBase"* %9, i8* %10, i64 0, i64 16) #14
  %11 = load i8*, i8** %3, align 8
  br label %12

12:                                               ; preds = %2, %8
  %13 = phi i8* [ %4, %2 ], [ %11, %8 ]
  %14 = bitcast i8** %3 to %"class.llvm::StringRef"**
  %15 = bitcast %"class.llvm::StringRef"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %13, i8* align 8 %15, i64 16, i1 false)
  %16 = load %"class.llvm::StringRef"*, %"class.llvm::StringRef"** %14, align 8
  %17 = getelementptr inbounds %"class.llvm::StringRef", %"class.llvm::StringRef"* %16, i64 1
  store %"class.llvm::StringRef"* %17, %"class.llvm::StringRef"** %14, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN4llvm5Regex3subENS_9StringRefES1_PNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE(%"class.std::__1::basic_string"* noalias sret, %"class.llvm::Regex"* nocapture, i8*, i64, i8*, i64, %"class.std::__1::basic_string"*) local_unnamed_addr #1 align 2 {
  %8 = alloca i64, align 8
  %9 = alloca %"class.llvm::StringRef", align 8
  %10 = alloca %"class.llvm::SmallVector.5", align 8
  %11 = alloca %"class.std::__1::basic_string", align 8
  %12 = alloca %"struct.std::__1::pair", align 8
  %13 = alloca %"class.llvm::StringRef", align 8
  %14 = alloca %"class.std::__1::basic_string", align 8
  %15 = alloca %"class.llvm::Twine", align 8
  %16 = alloca %"class.llvm::Twine", align 8
  %17 = getelementptr inbounds %"class.llvm::StringRef", %"class.llvm::StringRef"* %9, i64 0, i32 0
  store i8* %2, i8** %17, align 8
  %18 = getelementptr inbounds %"class.llvm::StringRef", %"class.llvm::StringRef"* %9, i64 0, i32 1
  store i64 %3, i64* %18, align 8
  %19 = bitcast %"class.llvm::SmallVector.5"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 152, i8* nonnull %19) #15
  %20 = getelementptr inbounds %"class.llvm::SmallVector.5", %"class.llvm::SmallVector.5"* %10, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %20, i8 -86, i64 128, i1 false)
  %21 = getelementptr inbounds %"class.llvm::SmallVector.5", %"class.llvm::SmallVector.5"* %10, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i64 0
  %22 = getelementptr inbounds %"class.llvm::SmallVector.5", %"class.llvm::SmallVector.5"* %10, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %21, i8** %22, align 8
  %23 = getelementptr inbounds %"class.llvm::SmallVector.5", %"class.llvm::SmallVector.5"* %10, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i8* %21, i8** %23, align 8
  %24 = getelementptr inbounds %"class.llvm::SmallVector.5", %"class.llvm::SmallVector.5"* %10, i64 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %25 = getelementptr inbounds %"class.llvm::SmallVector.5", %"class.llvm::SmallVector.5"* %10, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i64 128
  store i8* %25, i8** %24, align 8
  %26 = icmp ne %"class.std::__1::basic_string"* %6, null
  br i1 %26, label %27, label %42

27:                                               ; preds = %7
  %28 = bitcast %"class.std::__1::basic_string"* %6 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %29 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %28, i64 0, i32 1, i32 0
  %30 = load i8, i8* %29, align 1
  %31 = icmp slt i8 %30, 0
  br i1 %31, label %32, label %35

32:                                               ; preds = %27
  %33 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %34 = load i64, i64* %33, align 8
  br label %37

35:                                               ; preds = %27
  %36 = zext i8 %30 to i64
  br label %37

37:                                               ; preds = %32, %35
  %38 = phi i64 [ %34, %32 ], [ %36, %35 ]
  %39 = icmp eq i64 %38, 0
  br i1 %39, label %42, label %40

40:                                               ; preds = %37
  %41 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(%"class.std::__1::basic_string"* nonnull %6, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0)) #14
  br label %42

42:                                               ; preds = %40, %37, %7
  %43 = getelementptr inbounds %"class.llvm::SmallVector.5", %"class.llvm::SmallVector.5"* %10, i64 0, i32 0
  %44 = call zeroext i1 @_ZN4llvm5Regex5matchENS_9StringRefEPNS_15SmallVectorImplIS1_EE(%"class.llvm::Regex"* %1, i8* %4, i64 %5, %"class.llvm::SmallVectorImpl"* nonnull %43) #16
  br i1 %44, label %74, label %45

45:                                               ; preds = %42
  %46 = icmp eq i8* %4, null
  br i1 %46, label %47, label %49

47:                                               ; preds = %45
  %48 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %48, i8 0, i64 24, i1 false) #15, !alias.scope !3
  br label %262

49:                                               ; preds = %45
  %50 = icmp ugt i64 %5, -17
  br i1 %50, label %51, label %53

51:                                               ; preds = %49
  %52 = bitcast %"class.std::__1::basic_string"* %0 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %52) #17
  unreachable

53:                                               ; preds = %49
  %54 = icmp ult i64 %5, 23
  br i1 %54, label %63, label %55

55:                                               ; preds = %53
  %56 = add nuw i64 %5, 16
  %57 = and i64 %56, -16
  %58 = call i8* @_Znwm(i64 %57) #13
  %59 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %58, i8** %59, align 8
  %60 = or i64 %57, -9223372036854775808
  %61 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %60, i64* %61, align 8
  %62 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %5, i64* %62, align 8
  br label %69

63:                                               ; preds = %53
  %64 = trunc i64 %5 to i8
  %65 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %66 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %65, i64 0, i32 1, i32 0
  store i8 %64, i8* %66, align 1
  %67 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  %68 = icmp eq i64 %5, 0
  br i1 %68, label %71, label %69

69:                                               ; preds = %63, %55
  %70 = phi i8* [ %58, %55 ], [ %67, %63 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %70, i8* nonnull align 1 %4, i64 %5, i1 false) #15
  br label %71

71:                                               ; preds = %63, %69
  %72 = phi i8* [ %67, %63 ], [ %70, %69 ]
  %73 = getelementptr inbounds i8, i8* %72, i64 %5
  store i8 0, i8* %73, align 1
  br label %262

74:                                               ; preds = %42
  %75 = bitcast %"class.std::__1::basic_string"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %75) #15
  %76 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %77 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %78 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %79 = bitcast %"class.llvm::SmallVector.5"* %10 to %"class.llvm::StringRef"**
  %80 = bitcast %"class.std::__1::basic_string"* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %80, i8 -86, i64 24, i1 false)
  %81 = load %"class.llvm::StringRef"*, %"class.llvm::StringRef"** %79, align 8
  %82 = getelementptr inbounds %"class.llvm::StringRef", %"class.llvm::StringRef"* %81, i64 0, i32 0
  %83 = load i8*, i8** %82, align 8
  %84 = ptrtoint i8* %83 to i64
  %85 = ptrtoint i8* %4 to i64
  %86 = sub i64 %84, %85
  %87 = icmp ugt i64 %86, -17
  br i1 %87, label %88, label %90

88:                                               ; preds = %74
  %89 = bitcast %"class.std::__1::basic_string"* %11 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %89) #17
  unreachable

90:                                               ; preds = %74
  %91 = icmp ult i64 %86, 23
  br i1 %91, label %92, label %96

92:                                               ; preds = %90
  %93 = trunc i64 %86 to i8
  %94 = bitcast %"class.std::__1::basic_string"* %11 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %95 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %94, i64 0, i32 1, i32 0
  store i8 %93, i8* %95, align 1
  br label %101

96:                                               ; preds = %90
  %97 = add nuw i64 %86, 16
  %98 = and i64 %97, -16
  %99 = call i8* @_Znwm(i64 %98) #13
  store i8* %99, i8** %76, align 8
  %100 = or i64 %98, -9223372036854775808
  store i64 %100, i64* %78, align 8
  store i64 %86, i64* %77, align 8
  br label %101

101:                                              ; preds = %96, %92
  %102 = phi i8* [ %75, %92 ], [ %99, %96 ]
  %103 = icmp eq i8* %83, %4
  br i1 %103, label %111, label %104

104:                                              ; preds = %101, %104
  %105 = phi i8* [ %108, %104 ], [ %4, %101 ]
  %106 = phi i8* [ %109, %104 ], [ %102, %101 ]
  %107 = load i8, i8* %105, align 1
  store i8 %107, i8* %106, align 1
  %108 = getelementptr inbounds i8, i8* %105, i64 1
  %109 = getelementptr inbounds i8, i8* %106, i64 1
  %110 = icmp eq i8* %108, %83
  br i1 %110, label %111, label %104

111:                                              ; preds = %104, %101
  %112 = phi i8* [ %102, %101 ], [ %109, %104 ]
  store i8 0, i8* %112, align 1
  %113 = load i64, i64* %18, align 8
  %114 = icmp eq i64 %113, 0
  br i1 %114, label %249, label %115

115:                                              ; preds = %111
  %116 = bitcast %"struct.std::__1::pair"* %12 to i8*
  %117 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %12, i64 0, i32 0, i32 0
  %118 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %12, i64 0, i32 0, i32 1
  %119 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %12, i64 0, i32 1
  %120 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %12, i64 0, i32 1, i32 1
  %121 = bitcast %"class.llvm::StringRef"* %9 to i8*
  %122 = bitcast %"class.llvm::StringRef"* %119 to i8*
  %123 = bitcast %"class.llvm::StringRef"* %13 to i8*
  %124 = getelementptr inbounds %"class.llvm::StringRef", %"class.llvm::StringRef"* %13, i64 0, i32 0
  %125 = getelementptr inbounds %"class.llvm::StringRef", %"class.llvm::StringRef"* %13, i64 0, i32 1
  %126 = bitcast i64* %8 to i8*
  %127 = bitcast i8** %23 to i64*
  %128 = bitcast %"class.llvm::SmallVector.5"* %10 to i64*
  %129 = bitcast %"class.std::__1::basic_string"* %6 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %130 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %129, i64 0, i32 1, i32 0
  %131 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %132 = bitcast %"class.std::__1::basic_string"* %14 to i8*
  %133 = bitcast %"class.llvm::Twine"* %15 to i8*
  %134 = bitcast %"class.llvm::Twine"* %16 to i8*
  %135 = ptrtoint %"class.llvm::StringRef"* %13 to i64
  %136 = bitcast %"class.llvm::Twine"* %16 to i64*
  %137 = getelementptr inbounds %"class.llvm::Twine", %"class.llvm::Twine"* %16, i64 0, i32 1, i32 0
  %138 = bitcast %"class.llvm::Twine"** %137 to i64*
  %139 = getelementptr inbounds %"class.llvm::Twine", %"class.llvm::Twine"* %16, i64 0, i32 2
  %140 = getelementptr inbounds %"class.llvm::Twine", %"class.llvm::Twine"* %16, i64 0, i32 3
  %141 = getelementptr inbounds %"class.llvm::Twine", %"class.llvm::Twine"* %15, i64 0, i32 0, i32 0
  %142 = getelementptr inbounds %"class.llvm::Twine", %"class.llvm::Twine"* %15, i64 0, i32 1, i32 0
  %143 = bitcast %"class.llvm::Twine"** %142 to i64*
  %144 = getelementptr inbounds %"class.llvm::Twine", %"class.llvm::Twine"* %15, i64 0, i32 2
  %145 = getelementptr inbounds %"class.llvm::Twine", %"class.llvm::Twine"* %15, i64 0, i32 3
  %146 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %147 = bitcast %"class.std::__1::basic_string"* %6 to i8*
  %148 = bitcast %"struct.std::__1::pair"* %12 to i8*
  %149 = bitcast %"class.llvm::StringRef"* %13 to i8*
  br label %150

150:                                              ; preds = %115, %244
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %116) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %148, i8 -86, i64 32, i1 false)
  call void @_ZNK4llvm9StringRef5splitEc(%"struct.std::__1::pair"* nonnull sret %12, %"class.llvm::StringRef"* nonnull %9, i8 signext 92) #16
  %151 = load i8*, i8** %117, align 8
  %152 = load i64, i64* %118, align 8
  %153 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* nonnull %11, i8* %151, i64 %152) #14
  %154 = load i64, i64* %120, align 8
  %155 = icmp eq i64 %154, 0
  br i1 %155, label %156, label %173

156:                                              ; preds = %150
  %157 = load i64, i64* %18, align 8
  %158 = load i64, i64* %118, align 8
  %159 = icmp ne i64 %157, %158
  %160 = and i1 %26, %159
  br i1 %160, label %161, label %248

161:                                              ; preds = %156
  %162 = load i8, i8* %130, align 1
  %163 = icmp slt i8 %162, 0
  br i1 %163, label %164, label %166

164:                                              ; preds = %161
  %165 = load i64, i64* %131, align 8
  br label %168

166:                                              ; preds = %161
  %167 = zext i8 %162 to i64
  br label %168

168:                                              ; preds = %164, %166
  %169 = phi i64 [ %165, %164 ], [ %167, %166 ]
  %170 = icmp eq i64 %169, 0
  br i1 %170, label %171, label %247

171:                                              ; preds = %168
  %172 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(%"class.std::__1::basic_string"* nonnull %6, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.1, i64 0, i64 0)) #14
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %116) #15
  br label %249

173:                                              ; preds = %150
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %121, i8* align 8 %122, i64 16, i1 false)
  %174 = load i8*, i8** %17, align 8
  %175 = load i8, i8* %174, align 1
  %176 = sext i8 %175 to i32
  switch i32 %176, label %177 [
    i32 116, label %184
    i32 110, label %191
    i32 48, label %198
    i32 49, label %198
    i32 50, label %198
    i32 51, label %198
    i32 52, label %198
    i32 53, label %198
    i32 54, label %198
    i32 55, label %198
    i32 56, label %198
    i32 57, label %198
  ]

177:                                              ; preds = %173
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"* nonnull %11, i8 signext %175) #14
  %178 = load i64, i64* %18, align 8
  %179 = icmp ne i64 %178, 0
  %180 = zext i1 %179 to i64
  %181 = load i8*, i8** %17, align 8
  %182 = getelementptr inbounds i8, i8* %181, i64 %180
  %183 = sub i64 %178, %180
  store i8* %182, i8** %17, align 8
  store i64 %183, i64* %18, align 8
  br label %244

184:                                              ; preds = %173
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"* nonnull %11, i8 signext 9) #14
  %185 = load i64, i64* %18, align 8
  %186 = icmp ne i64 %185, 0
  %187 = zext i1 %186 to i64
  %188 = load i8*, i8** %17, align 8
  %189 = getelementptr inbounds i8, i8* %188, i64 %187
  %190 = sub i64 %185, %187
  store i8* %189, i8** %17, align 8
  store i64 %190, i64* %18, align 8
  br label %244

191:                                              ; preds = %173
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"* nonnull %11, i8 signext 10) #14
  %192 = load i64, i64* %18, align 8
  %193 = icmp ne i64 %192, 0
  %194 = zext i1 %193 to i64
  %195 = load i8*, i8** %17, align 8
  %196 = getelementptr inbounds i8, i8* %195, i64 %194
  %197 = sub i64 %192, %194
  store i8* %196, i8** %17, align 8
  store i64 %197, i64* %18, align 8
  br label %244

198:                                              ; preds = %173, %173, %173, %173, %173, %173, %173, %173, %173, %173
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %123) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %149, i8 -86, i64 16, i1 false)
  %199 = call i64 @_ZNK4llvm9StringRef17find_first_not_ofES0_m(%"class.llvm::StringRef"* nonnull %9, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i64 0, i64 0), i64 10, i64 0) #14
  %200 = load i64, i64* %18, align 8
  %201 = icmp ult i64 %200, %199
  %202 = select i1 %201, i64 %200, i64 %199
  %203 = load i8*, i8** %17, align 8
  store i8* %203, i8** %124, align 8
  store i64 %202, i64* %125, align 8
  %204 = getelementptr inbounds i8, i8* %203, i64 %202
  %205 = sub i64 %200, %202
  store i8* %204, i8** %17, align 8
  store i64 %205, i64* %18, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %126) #15
  store i64 -6148914691236517206, i64* %8, align 8
  %206 = call zeroext i1 @_ZN4llvm20getAsUnsignedIntegerENS_9StringRefEjRy(i8* %203, i64 %202, i32 10, i64* nonnull dereferenceable(8) %8) #14
  br i1 %206, label %210, label %207

207:                                              ; preds = %198
  %208 = load i64, i64* %8, align 8
  %209 = icmp ugt i64 %208, 4294967295
  br i1 %209, label %210, label %211

210:                                              ; preds = %207, %198
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %126) #15
  br label %225

211:                                              ; preds = %207
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %126) #15
  %212 = and i64 %208, 4294967295
  %213 = load i64, i64* %127, align 8
  %214 = load i64, i64* %128, align 8
  %215 = sub i64 %213, %214
  %216 = ashr exact i64 %215, 4
  %217 = icmp ugt i64 %216, %212
  %218 = inttoptr i64 %214 to %"class.llvm::StringRef"*
  br i1 %217, label %219, label %225

219:                                              ; preds = %211
  %220 = getelementptr inbounds %"class.llvm::StringRef", %"class.llvm::StringRef"* %218, i64 %212, i32 0
  %221 = load i8*, i8** %220, align 8
  %222 = getelementptr inbounds %"class.llvm::StringRef", %"class.llvm::StringRef"* %218, i64 %212, i32 1
  %223 = load i64, i64* %222, align 8
  %224 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* nonnull %11, i8* %221, i64 %223) #14
  br label %242

225:                                              ; preds = %210, %211
  br i1 %26, label %226, label %242

226:                                              ; preds = %225
  %227 = load i8, i8* %130, align 1
  %228 = icmp slt i8 %227, 0
  br i1 %228, label %229, label %231

229:                                              ; preds = %226
  %230 = load i64, i64* %131, align 8
  br label %233

231:                                              ; preds = %226
  %232 = zext i8 %227 to i64
  br label %233

233:                                              ; preds = %229, %231
  %234 = phi i64 [ %230, %229 ], [ %232, %231 ]
  %235 = icmp eq i64 %234, 0
  br i1 %235, label %236, label %242

236:                                              ; preds = %233
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %132) #15
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %133) #15
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %134) #15
  store i64 ptrtoint ([31 x i8]* @.str.3 to i64), i64* %136, align 8, !alias.scope !8
  store i64 %135, i64* %138, align 8, !alias.scope !8
  store i8 3, i8* %139, align 8, !alias.scope !8
  store i8 5, i8* %140, align 1, !alias.scope !8
  store %"class.llvm::Twine"* %16, %"class.llvm::Twine"** %141, align 8, !alias.scope !13
  store i64 ptrtoint ([2 x i8]* @.str.4 to i64), i64* %143, align 8, !alias.scope !13
  store i8 2, i8* %144, align 8, !alias.scope !13
  store i8 3, i8* %145, align 1, !alias.scope !13
  call void @_ZNK4llvm5Twine3strEv(%"class.std::__1::basic_string"* nonnull sret %14, %"class.llvm::Twine"* nonnull %15) #14
  %237 = load i8, i8* %130, align 1
  %238 = icmp slt i8 %237, 0
  br i1 %238, label %239, label %241

239:                                              ; preds = %236
  %240 = load i8*, i8** %146, align 8
  call void @_ZdlPv(i8* %240) #13
  br label %241

241:                                              ; preds = %239, %236
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %147, i8* nonnull align 8 %132, i64 24, i1 false) #15
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %134) #15
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %133) #15
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %132) #15
  br label %242

242:                                              ; preds = %225, %233, %241, %219
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %123) #15
  %243 = load i64, i64* %18, align 8
  br label %244

244:                                              ; preds = %177, %184, %191, %242
  %245 = phi i64 [ %183, %177 ], [ %190, %184 ], [ %197, %191 ], [ %243, %242 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %116) #15
  %246 = icmp eq i64 %245, 0
  br i1 %246, label %249, label %150

247:                                              ; preds = %168
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %116) #15
  br label %249

248:                                              ; preds = %156
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %116) #15
  br label %249

249:                                              ; preds = %244, %171, %247, %248, %111
  %250 = load %"class.llvm::StringRef"*, %"class.llvm::StringRef"** %79, align 8
  %251 = getelementptr inbounds %"class.llvm::StringRef", %"class.llvm::StringRef"* %250, i64 0, i32 0
  %252 = load i8*, i8** %251, align 8
  %253 = getelementptr inbounds %"class.llvm::StringRef", %"class.llvm::StringRef"* %250, i64 0, i32 1
  %254 = load i64, i64* %253, align 8
  %255 = getelementptr inbounds i8, i8* %252, i64 %254
  %256 = getelementptr inbounds i8, i8* %4, i64 %5
  %257 = ptrtoint i8* %256 to i64
  %258 = ptrtoint i8* %255 to i64
  %259 = sub i64 %257, %258
  %260 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* nonnull %11, i8* %255, i64 %259) #14
  %261 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %261, i8* nonnull align 8 %75, i64 24, i1 false) #15
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %75) #15
  br label %262

262:                                              ; preds = %71, %47, %249
  %263 = load i8*, i8** %22, align 8
  %264 = icmp eq i8* %263, %21
  br i1 %264, label %266, label %265

265:                                              ; preds = %262
  call void @free(i8* %263) #14
  br label %266

266:                                              ; preds = %262, %265
  call void @llvm.lifetime.end.p0i8(i64 152, i8* nonnull %19) #15
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZNK4llvm9StringRef5splitEc(%"struct.std::__1::pair"* noalias sret, %"class.llvm::StringRef"*, i8 signext) local_unnamed_addr #1 comdat align 2 {
  %4 = getelementptr inbounds %"class.llvm::StringRef", %"class.llvm::StringRef"* %1, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %18, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.llvm::StringRef", %"class.llvm::StringRef"* %1, i64 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = sext i8 %2 to i32
  %11 = tail call i8* @memchr(i8* %9, i32 %10, i64 %5) #18
  %12 = icmp eq i8* %11, null
  %13 = ptrtoint i8* %11 to i64
  %14 = ptrtoint i8* %9 to i64
  %15 = sub i64 %13, %14
  %16 = icmp eq i64 %15, -1
  %17 = or i1 %12, %16
  br i1 %17, label %18, label %23

18:                                               ; preds = %3, %7
  %19 = bitcast %"struct.std::__1::pair"* %0 to i8*
  %20 = bitcast %"class.llvm::StringRef"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %19, i8* align 8 %20, i64 16, i1 false) #15
  %21 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %0, i64 0, i32 1
  %22 = bitcast %"class.llvm::StringRef"* %21 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %22, i8 0, i64 16, i1 false)
  br label %35

23:                                               ; preds = %7
  %24 = icmp ult i64 %5, %15
  %25 = select i1 %24, i64 %5, i64 %15
  %26 = add nuw i64 %15, 1
  %27 = icmp ult i64 %5, %26
  %28 = select i1 %27, i64 %5, i64 %26
  %29 = getelementptr inbounds i8, i8* %9, i64 %28
  %30 = sub i64 %5, %28
  %31 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %0, i64 0, i32 0, i32 0
  store i8* %9, i8** %31, align 8
  %32 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %0, i64 0, i32 0, i32 1
  store i64 %25, i64* %32, align 8
  %33 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %0, i64 0, i32 1, i32 0
  store i8* %29, i8** %33, align 8
  %34 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %0, i64 0, i32 1, i32 1
  store i64 %30, i64* %34, align 8
  br label %35

35:                                               ; preds = %23, %18
  ret void
}

; Function Attrs: optsize
declare i64 @_ZNK4llvm9StringRef17find_first_not_ofES0_m(%"class.llvm::StringRef"*, i8*, i64, i64) local_unnamed_addr #4

; Function Attrs: optsize
declare void @_ZNK4llvm5Twine3strEv(%"class.std::__1::basic_string"* sret, %"class.llvm::Twine"*) local_unnamed_addr #4

; Function Attrs: nounwind optsize ssp uwtable
define hidden zeroext i1 @_ZN4llvm5Regex12isLiteralEREENS_9StringRefE(i8*, i64) local_unnamed_addr #1 align 2 {
  %3 = alloca %"class.llvm::StringRef", align 8
  %4 = getelementptr inbounds %"class.llvm::StringRef", %"class.llvm::StringRef"* %3, i64 0, i32 0
  store i8* %0, i8** %4, align 8
  %5 = getelementptr inbounds %"class.llvm::StringRef", %"class.llvm::StringRef"* %3, i64 0, i32 1
  store i64 %1, i64* %5, align 8
  %6 = call i64 @_ZNK4llvm9StringRef13find_first_ofES0_m(%"class.llvm::StringRef"* nonnull %3, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @_ZL14RegexMetachars, i64 0, i64 0), i64 14, i64 0) #14
  %7 = icmp eq i64 %6, -1
  ret i1 %7
}

; Function Attrs: optsize
declare i64 @_ZNK4llvm9StringRef13find_first_ofES0_m(%"class.llvm::StringRef"*, i8*, i64, i64) local_unnamed_addr #4

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN4llvm5Regex6escapeENS_9StringRefE(%"class.std::__1::basic_string"* noalias sret, i8*, i64) local_unnamed_addr #1 align 2 {
  %4 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 0, i64 24, i1 false) #15
  %5 = trunc i64 %2 to i32
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %22, label %7

7:                                                ; preds = %3
  %8 = and i64 %2, 4294967295
  br label %9

9:                                                ; preds = %7, %18
  %10 = phi i64 [ 0, %7 ], [ %20, %18 ]
  %11 = getelementptr inbounds i8, i8* %1, i64 %10
  %12 = load i8, i8* %11, align 1
  %13 = sext i8 %12 to i32
  %14 = tail call i8* @memchr(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @_ZL14RegexMetachars, i64 0, i64 0), i32 %13, i64 15)
  %15 = icmp eq i8* %14, null
  br i1 %15, label %18, label %16

16:                                               ; preds = %9
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"* %0, i8 signext 92) #14
  %17 = load i8, i8* %11, align 1
  br label %18

18:                                               ; preds = %9, %16
  %19 = phi i8 [ %12, %9 ], [ %17, %16 ]
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"* %0, i8 signext %19) #14
  %20 = add nuw nsw i64 %10, 1
  %21 = icmp eq i64 %20, %8
  br i1 %21, label %22, label %9

22:                                               ; preds = %18, %3
  ret void
}

; Function Attrs: nounwind optsize
declare void @free(i8* nocapture) local_unnamed_addr #8

; Function Attrs: noreturn optsize
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #9

; Function Attrs: nofree nounwind optsize readonly
declare i8* @memchr(i8*, i32, i64) local_unnamed_addr #10

; Function Attrs: optsize
declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #4

; Function Attrs: argmemonly nofree nounwind optsize readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #11

; Function Attrs: optsize
declare void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(%"class.std::__1::basic_string"*, i64, i8 signext) local_unnamed_addr #4

; Function Attrs: optsize
declare void @_ZN4llvm15SmallVectorBase8grow_podEPvmm(%"class.llvm::SmallVectorBase"*, i8*, i64, i64) local_unnamed_addr #4

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(%"class.std::__1::basic_string"*, i8*) local_unnamed_addr #1 comdat align 2 {
  %3 = load i8, i8* %1, align 1
  %4 = tail call i1 @llvm.is.constant.i8(i8 %3)
  br i1 %4, label %5, label %28

5:                                                ; preds = %2
  %6 = tail call i64 @strlen(i8* %1) #14
  %7 = icmp ult i64 %6, 23
  br i1 %7, label %8, label %26

8:                                                ; preds = %5
  %9 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %10 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %9, i64 0, i32 1, i32 0
  %11 = load i8, i8* %10, align 1
  %12 = icmp slt i8 %11, 0
  br i1 %12, label %13, label %17

13:                                               ; preds = %8
  %14 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %6, i64* %14, align 8
  %15 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %16 = load i8*, i8** %15, align 8
  br label %20

17:                                               ; preds = %8
  %18 = trunc i64 %6 to i8
  store i8 %18, i8* %10, align 1
  %19 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  br label %20

20:                                               ; preds = %17, %13
  %21 = phi i8* [ %16, %13 ], [ %19, %17 ]
  %22 = icmp eq i64 %6, 0
  br i1 %22, label %24, label %23

23:                                               ; preds = %20
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %21, i8* align 1 %1, i64 %6, i1 false) #15
  br label %24

24:                                               ; preds = %20, %23
  %25 = getelementptr inbounds i8, i8* %21, i64 %6
  store i8 0, i8* %25, align 1
  br label %30

26:                                               ; preds = %5
  %27 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_externalEPKcm(%"class.std::__1::basic_string"* %0, i8* %1, i64 %6) #14
  br label %30

28:                                               ; preds = %2
  %29 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_externalEPKc(%"class.std::__1::basic_string"* %0, i8* %1) #14
  br label %30

30:                                               ; preds = %24, %26, %28
  %31 = phi %"class.std::__1::basic_string"* [ %29, %28 ], [ %0, %24 ], [ %27, %26 ]
  ret %"class.std::__1::basic_string"* %31
}

; Function Attrs: nounwind readnone
declare i1 @llvm.is.constant.i8(i8) #12

; Function Attrs: optsize
declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_externalEPKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #4

; Function Attrs: optsize
declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_externalEPKc(%"class.std::__1::basic_string"*, i8*) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: optsize
declare void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"*, i8 signext) local_unnamed_addr #4

; Function Attrs: optsize
declare zeroext i1 @_ZN4llvm20getAsUnsignedIntegerENS_9StringRefEjRy(i8*, i64, i32, i64* dereferenceable(8)) local_unnamed_addr #4

attributes #0 = { nofree norecurse nounwind optsize ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nobuiltin nofree optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree norecurse nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { norecurse nounwind optsize readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noreturn optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nofree nounwind optsize readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { argmemonly nofree nounwind optsize readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nounwind readnone }
attributes #13 = { builtin nounwind optsize }
attributes #14 = { nounwind optsize }
attributes #15 = { nounwind }
attributes #16 = { optsize }
attributes #17 = { noreturn nounwind optsize }
attributes #18 = { nounwind optsize readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = !{!4, !6}
!4 = distinct !{!4, !5, !"_ZNK4llvm9StringRef3strEv: argument 0"}
!5 = distinct !{!5, !"_ZNK4llvm9StringRef3strEv"}
!6 = distinct !{!6, !7, !"_ZNK4llvm9StringRefcvNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEv: argument 0"}
!7 = distinct !{!7, !"_ZNK4llvm9StringRefcvNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEv"}
!8 = !{!9, !11}
!9 = distinct !{!9, !10, !"_ZNK4llvm5Twine6concatERKS0_: argument 0"}
!10 = distinct !{!10, !"_ZNK4llvm5Twine6concatERKS0_"}
!11 = distinct !{!11, !12, !"_ZN4llvmplERKNS_5TwineES2_: argument 0"}
!12 = distinct !{!12, !"_ZN4llvmplERKNS_5TwineES2_"}
!13 = !{!14, !16}
!14 = distinct !{!14, !15, !"_ZNK4llvm5Twine6concatERKS0_: argument 0"}
!15 = distinct !{!15, !"_ZNK4llvm5Twine6concatERKS0_"}
!16 = distinct !{!16, !17, !"_ZN4llvmplERKNS_5TwineES2_: argument 0"}
!17 = distinct !{!17, !"_ZN4llvmplERKNS_5TwineES2_"}
