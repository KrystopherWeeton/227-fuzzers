; ModuleID = '../../third_party/blink/renderer/platform/fonts/shaping/shaping_line_breaker.cc'
source_filename = "../../third_party/blink/renderer/platform/fonts/shaping/shaping_line_breaker.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic.33" }
%"struct.std::__1::atomic.33" = type { %"struct.std::__1::__atomic_base.34" }
%"struct.std::__1::__atomic_base.34" = type { %"struct.std::__1::__atomic_base.35" }
%"struct.std::__1::__atomic_base.35" = type { %"struct.std::__1::__cxx_atomic_impl.36" }
%"struct.std::__1::__cxx_atomic_impl.36" = type { %"struct.std::__1::__cxx_atomic_base_impl.37" }
%"struct.std::__1::__cxx_atomic_base_impl.37" = type { i32 }
%"class.blink::ShapingLineBreaker" = type <{ %"class.blink::ShapeResult"* (i8*, i32, i32)*, i8*, %class.scoped_refptr.31, %"class.blink::LazyLineBreakIterator"*, %"class.blink::Hyphenation"*, i8, [7 x i8] }>
%class.scoped_refptr.31 = type { %"class.blink::ShapeResult"* }
%"class.blink::ShapeResult" = type <{ %"class.WTF::RefCounted", float, %"class.blink::FloatRect", %"class.WTF::Vector", %class.scoped_refptr.1, %"class.std::__1::unique_ptr.20", i32, i32, i32, [4 x i8] }>
%"class.WTF::RefCounted" = type { %"class.base::RefCounted" }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.blink::FloatRect" = type { %"class.blink::FloatPoint", %"class.blink::FloatSize" }
%"class.blink::FloatPoint" = type { float, float }
%"class.blink::FloatSize" = type { float, float }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { %class.scoped_refptr.0*, i32, i32 }
%class.scoped_refptr.0 = type opaque
%class.scoped_refptr.1 = type { %"class.blink::SimpleFontData"* }
%"class.blink::SimpleFontData" = type { %"class.blink::FontData.base", %"class.blink::FontMetrics", float, float, [4 x i8], %"class.blink::FontPlatformData", %class.SkFont, i16, float, i16, %"class.std::__1::unique_ptr", %class.scoped_refptr.17, i32, i32, %"struct.blink::FontHeight" }
%"class.blink::FontData.base" = type <{ i32 (...)**, %"class.WTF::RefCounted.2" }>
%"class.WTF::RefCounted.2" = type { %"class.base::RefCounted.3" }
%"class.base::RefCounted.3" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::FontMetrics" = type <{ i32, float, float, float, float, float, float, %"class.absl::optional", %"class.absl::optional", i32, i32, i8, i8, [2 x i8] }>
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { float }
%"class.blink::FontPlatformData" = type <{ %class.sk_sp, %"class.std::__1::basic_string", float, i8, i8, i8, i8, i32, %"struct.blink::WebFontRenderStyle", [5 x i8], %class.scoped_refptr.12, i8, [7 x i8] }>
%class.sk_sp = type { %class.SkTypeface* }
%class.SkTypeface = type <{ %class.SkWeakRefCnt, i32, %class.SkFontStyle, %struct.SkRect, %class.SkOnce, i8, [6 x i8] }>
%class.SkWeakRefCnt = type { %class.SkRefCnt.base, %"struct.std::__1::atomic" }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.4" }
%"struct.std::__1::__atomic_base.4" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.SkFontStyle = type { i32 }
%struct.SkRect = type { float, float, float, float }
%class.SkOnce = type { %"struct.std::__1::atomic.5" }
%"struct.std::__1::atomic.5" = type { %"struct.std::__1::__atomic_base.6" }
%"struct.std::__1::__atomic_base.6" = type { %"struct.std::__1::__atomic_base.7" }
%"struct.std::__1::__atomic_base.7" = type { %"struct.std::__1::__cxx_atomic_impl.8" }
%"struct.std::__1::__cxx_atomic_impl.8" = type { %"struct.std::__1::__cxx_atomic_base_impl.9" }
%"struct.std::__1::__cxx_atomic_base_impl.9" = type { i8 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.10 }
%union.anon.10 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.blink::WebFontRenderStyle" = type { i8, i8, i8, i8, i8, i8, i8 }
%class.scoped_refptr.12 = type { %"class.blink::HarfBuzzFace"* }
%"class.blink::HarfBuzzFace" = type opaque
%class.SkFont = type <{ %class.sk_sp, float, float, float, i8, i8, i8, i8 }>
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.13" }
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem.14" }
%"struct.std::__1::__compressed_pair_elem.14" = type { %"struct.blink::SimpleFontData::DerivedFontData"* }
%"struct.blink::SimpleFontData::DerivedFontData" = type { %class.scoped_refptr.15, %class.scoped_refptr.15 }
%class.scoped_refptr.15 = type { %"class.blink::SimpleFontData"* }
%class.scoped_refptr.17 = type { %"class.blink::CustomFontData"* }
%"class.blink::CustomFontData" = type <{ i32 (...)**, %"class.WTF::RefCounted.18", [4 x i8] }>
%"class.WTF::RefCounted.18" = type { %"class.base::RefCounted.19" }
%"class.base::RefCounted.19" = type { %"class.base::subtle::RefCountedBase" }
%"struct.blink::FontHeight" = type { %"class.blink::LayoutUnit", %"class.blink::LayoutUnit" }
%"class.blink::LayoutUnit" = type { i32 }
%"class.std::__1::unique_ptr.20" = type { %"class.std::__1::__compressed_pair.21" }
%"class.std::__1::__compressed_pair.21" = type { %"struct.std::__1::__compressed_pair_elem.22" }
%"struct.std::__1::__compressed_pair_elem.22" = type { %"class.blink::ShapeResult::CharacterPositionData"* }
%"class.blink::ShapeResult::CharacterPositionData" = type { %"class.WTF::Vector.23", i32, float }
%"class.WTF::Vector.23" = type { %"class.WTF::VectorBuffer.24" }
%"class.WTF::VectorBuffer.24" = type { %"class.WTF::VectorBufferBase.25" }
%"class.WTF::VectorBufferBase.25" = type { %"struct.blink::ShapeResultCharacterData"*, i32, i32 }
%"struct.blink::ShapeResultCharacterData" = type { float, i8 }
%"class.blink::LazyLineBreakIterator" = type <{ %"class.WTF::String", %"class.WTF::AtomicString", %"class.icu_69::BreakIterator"*, [2 x i16], [4 x i8], %"struct.blink::LazyLineBreakIterator::PriorContext", i32, i32, i32, [4 x i8] }>
%"class.WTF::String" = type { %class.scoped_refptr.32 }
%class.scoped_refptr.32 = type { %"class.WTF::StringImpl"* }
%"class.WTF::AtomicString" = type { %"class.WTF::String" }
%"class.icu_69::BreakIterator" = type <{ %"class.icu_69::UObject", [157 x i8], [157 x i8], [6 x i8] }>
%"class.icu_69::UObject" = type { i32 (...)** }
%"struct.blink::LazyLineBreakIterator::PriorContext" = type <{ i16*, i32, [4 x i8] }>
%"class.blink::Hyphenation" = type <{ i32 (...)**, %"class.WTF::RefCounted.38", [4 x i8] }>
%"class.WTF::RefCounted.38" = type { %"class.base::RefCounted.39" }
%"class.base::RefCounted.39" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::StringView" = type <{ %"class.WTF::StringImpl"*, i8*, i32, [4 x i8] }>
%"class.blink::ShapeResultView" = type { %"class.WTF::RefCounted.46", %class.scoped_refptr.1, i32, i32, i32, i32, float, i32, [0 x %struct.anon.48] }
%"class.WTF::RefCounted.46" = type { %"class.base::RefCounted.47" }
%"class.base::RefCounted.47" = type { %"class.base::subtle::RefCountedBase" }
%struct.anon.48 = type { i8* }
%"struct.blink::ShapingLineBreaker::Result" = type <{ %"class.absl::optional.40", i32, i8, i8, i8, i8 }>
%"class.absl::optional.40" = type { %"class.absl::optional_internal::optional_data.41" }
%"class.absl::optional_internal::optional_data.41" = type { %"class.absl::optional_internal::optional_data_base.42" }
%"class.absl::optional_internal::optional_data_base.42" = type { %"class.absl::optional_internal::optional_data_dtor_base.43" }
%"class.absl::optional_internal::optional_data_dtor_base.43" = type { i8, %union.anon.44 }
%union.anon.44 = type { i32 }
%"struct.blink::ShapeResultView::Segment" = type { %"class.blink::ShapeResult"*, %"class.blink::ShapeResultView"*, i32, i32 }
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }

@_ZN3WTF10StringImpl6empty_E = external local_unnamed_addr global %"class.WTF::StringImpl"*, align 8
@.str = private unnamed_addr constant [15 x i8] c"offset > start\00", align 1
@.str.1 = private unnamed_addr constant [80 x i8] c"../../third_party/blink/renderer/platform/fonts/shaping/shaping_line_breaker.cc\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"offset <= end\00", align 1

@_ZN5blink18ShapingLineBreakerC1E13scoped_refptrIKNS_11ShapeResultEEPKNS_21LazyLineBreakIteratorEPKNS_11HyphenationEPFS1_IS2_EPvjjESC_ = hidden unnamed_addr alias void (%"class.blink::ShapingLineBreaker"*, %"class.blink::ShapeResult"*, %"class.blink::LazyLineBreakIterator"*, %"class.blink::Hyphenation"*, %"class.blink::ShapeResult"* (i8*, i32, i32)*, i8*), void (%"class.blink::ShapingLineBreaker"*, %"class.blink::ShapeResult"*, %"class.blink::LazyLineBreakIterator"*, %"class.blink::Hyphenation"*, %"class.blink::ShapeResult"* (i8*, i32, i32)*, i8*)* @_ZN5blink18ShapingLineBreakerC2E13scoped_refptrIKNS_11ShapeResultEEPKNS_21LazyLineBreakIteratorEPKNS_11HyphenationEPFS1_IS2_EPvjjESC_

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink18ShapingLineBreakerC2E13scoped_refptrIKNS_11ShapeResultEEPKNS_21LazyLineBreakIteratorEPKNS_11HyphenationEPFS1_IS2_EPvjjESC_(%"class.blink::ShapingLineBreaker"* nocapture, %"class.blink::ShapeResult"*, %"class.blink::LazyLineBreakIterator"*, %"class.blink::Hyphenation"*, %"class.blink::ShapeResult"* (i8*, i32, i32)*, i8*) unnamed_addr #0 align 2 {
  %7 = getelementptr inbounds %"class.blink::ShapingLineBreaker", %"class.blink::ShapingLineBreaker"* %0, i64 0, i32 0
  store %"class.blink::ShapeResult"* (i8*, i32, i32)* %4, %"class.blink::ShapeResult"* (i8*, i32, i32)** %7, align 8
  %8 = getelementptr inbounds %"class.blink::ShapingLineBreaker", %"class.blink::ShapingLineBreaker"* %0, i64 0, i32 1
  store i8* %5, i8** %8, align 8
  %9 = getelementptr inbounds %"class.blink::ShapingLineBreaker", %"class.blink::ShapingLineBreaker"* %0, i64 0, i32 2, i32 0
  store %"class.blink::ShapeResult"* %1, %"class.blink::ShapeResult"** %9, align 8
  %10 = icmp eq %"class.blink::ShapeResult"* %1, null
  br i1 %10, label %22, label %11

11:                                               ; preds = %6
  %12 = getelementptr inbounds %"class.blink::ShapeResult", %"class.blink::ShapeResult"* %1, i64 0, i32 0, i32 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase10AddRefImplEv(%"class.base::subtle::RefCountedBase"* %12) #7
  %13 = getelementptr inbounds %"class.blink::ShapingLineBreaker", %"class.blink::ShapingLineBreaker"* %0, i64 0, i32 3
  store %"class.blink::LazyLineBreakIterator"* %2, %"class.blink::LazyLineBreakIterator"** %13, align 8
  %14 = getelementptr inbounds %"class.blink::ShapingLineBreaker", %"class.blink::ShapingLineBreaker"* %0, i64 0, i32 4
  store %"class.blink::Hyphenation"* %3, %"class.blink::Hyphenation"** %14, align 8
  %15 = getelementptr inbounds %"class.blink::ShapingLineBreaker", %"class.blink::ShapingLineBreaker"* %0, i64 0, i32 5
  store i8 1, i8* %15, align 8
  %16 = load %"class.blink::ShapeResult"*, %"class.blink::ShapeResult"** %9, align 8
  tail call void @_ZNK5blink11ShapeResult18EnsurePositionDataEv(%"class.blink::ShapeResult"* %16) #7
  tail call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %12) #7
  %17 = getelementptr inbounds %"class.blink::ShapeResult", %"class.blink::ShapeResult"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %18 = load i32, i32* %17, align 4
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %26

20:                                               ; preds = %11
  tail call void @_ZN5blink11ShapeResultD1Ev(%"class.blink::ShapeResult"* nonnull %1) #7
  %21 = bitcast %"class.blink::ShapeResult"* %1 to i8*
  tail call void @free(i8* %21) #7
  br label %26

22:                                               ; preds = %6
  %23 = getelementptr inbounds %"class.blink::ShapingLineBreaker", %"class.blink::ShapingLineBreaker"* %0, i64 0, i32 3
  store %"class.blink::LazyLineBreakIterator"* %2, %"class.blink::LazyLineBreakIterator"** %23, align 8
  %24 = getelementptr inbounds %"class.blink::ShapingLineBreaker", %"class.blink::ShapingLineBreaker"* %0, i64 0, i32 4
  store %"class.blink::Hyphenation"* %3, %"class.blink::Hyphenation"** %24, align 8
  %25 = getelementptr inbounds %"class.blink::ShapingLineBreaker", %"class.blink::ShapingLineBreaker"* %0, i64 0, i32 5
  store i8 1, i8* %25, align 8
  tail call void @_ZNK5blink11ShapeResult18EnsurePositionDataEv(%"class.blink::ShapeResult"* null) #7
  br label %26

26:                                               ; preds = %22, %11, %20
  ret void
}

declare void @_ZNK5blink11ShapeResult18EnsurePositionDataEv(%"class.blink::ShapeResult"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK5blink18ShapingLineBreaker9HyphenateEjjjb(%"class.blink::ShapingLineBreaker"* nocapture readonly, i32, i32, i32, i1 zeroext) local_unnamed_addr #0 align 2 {
  %6 = alloca %"class.WTF::StringView", align 8
  %7 = sub i32 %3, %2
  %8 = icmp ult i32 %7, 3
  br i1 %8, label %67, label %9

9:                                                ; preds = %5
  %10 = getelementptr inbounds %"class.blink::ShapingLineBreaker", %"class.blink::ShapingLineBreaker"* %0, i64 0, i32 3
  %11 = load %"class.blink::LazyLineBreakIterator"*, %"class.blink::LazyLineBreakIterator"** %10, align 8
  %12 = bitcast %"class.WTF::StringView"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %12) #7
  %13 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %6, i64 0, i32 1
  %14 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %6, i64 0, i32 2
  %15 = getelementptr inbounds %"class.blink::LazyLineBreakIterator", %"class.blink::LazyLineBreakIterator"* %11, i64 0, i32 0, i32 0, i32 0
  %16 = bitcast %"class.WTF::StringView"* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %16, i8 -86, i64 24, i1 false)
  %17 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %15, align 8
  %18 = icmp eq %"class.WTF::StringImpl"* %17, null
  br i1 %18, label %35, label %19

19:                                               ; preds = %9
  %20 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %6, i64 0, i32 0
  store i32 %7, i32* %14, align 8
  store %"class.WTF::StringImpl"* %17, %"class.WTF::StringImpl"** %20, align 8
  %21 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %17, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %22 = load atomic i32, i32* %21 monotonic, align 4
  %23 = and i32 %22, 1
  %24 = icmp eq i32 %23, 0
  %25 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %17, i64 1
  br i1 %24, label %30, label %26

26:                                               ; preds = %19
  %27 = bitcast %"class.WTF::StringImpl"* %25 to i8*
  %28 = zext i32 %2 to i64
  %29 = getelementptr inbounds i8, i8* %27, i64 %28
  store i8* %29, i8** %13, align 8
  br label %38

30:                                               ; preds = %19
  %31 = bitcast %"class.WTF::StringImpl"* %25 to i16*
  %32 = zext i32 %2 to i64
  %33 = getelementptr inbounds i16, i16* %31, i64 %32
  %34 = bitcast i8** %13 to i16**
  store i16* %33, i16** %34, align 8
  br label %38

35:                                               ; preds = %9
  store i32 0, i32* %14, align 8
  store i8* null, i8** %13, align 8
  %36 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %37 = bitcast %"class.WTF::StringView"* %6 to i64*
  store i64 %36, i64* %37, align 8
  br label %38

38:                                               ; preds = %26, %30, %35
  %39 = sub i32 %1, %2
  br i1 %4, label %40, label %51

40:                                               ; preds = %38
  %41 = icmp ult i32 %39, 2
  br i1 %41, label %65, label %42

42:                                               ; preds = %40
  %43 = getelementptr inbounds %"class.blink::ShapingLineBreaker", %"class.blink::ShapingLineBreaker"* %0, i64 0, i32 4
  %44 = load %"class.blink::Hyphenation"*, %"class.blink::Hyphenation"** %43, align 8
  %45 = add i32 %39, 1
  %46 = bitcast %"class.blink::Hyphenation"* %44 to i32 (%"class.blink::Hyphenation"*, %"class.WTF::StringView"*, i32)***
  %47 = load i32 (%"class.blink::Hyphenation"*, %"class.WTF::StringView"*, i32)**, i32 (%"class.blink::Hyphenation"*, %"class.WTF::StringView"*, i32)*** %46, align 8
  %48 = getelementptr inbounds i32 (%"class.blink::Hyphenation"*, %"class.WTF::StringView"*, i32)*, i32 (%"class.blink::Hyphenation"*, %"class.WTF::StringView"*, i32)** %47, i64 2
  %49 = load i32 (%"class.blink::Hyphenation"*, %"class.WTF::StringView"*, i32)*, i32 (%"class.blink::Hyphenation"*, %"class.WTF::StringView"*, i32)** %48, align 8
  %50 = call i32 %49(%"class.blink::Hyphenation"* %44, %"class.WTF::StringView"* nonnull dereferenceable(24) %6, i32 %45) #7
  br label %65

51:                                               ; preds = %38
  %52 = sub i32 %7, %39
  %53 = icmp ult i32 %52, 2
  br i1 %53, label %65, label %54

54:                                               ; preds = %51
  %55 = getelementptr inbounds %"class.blink::ShapingLineBreaker", %"class.blink::ShapingLineBreaker"* %0, i64 0, i32 4
  %56 = load %"class.blink::Hyphenation"*, %"class.blink::Hyphenation"** %55, align 8
  %57 = icmp eq i32 %39, 0
  %58 = add i32 %39, -1
  %59 = select i1 %57, i32 0, i32 %58
  %60 = bitcast %"class.blink::Hyphenation"* %56 to i32 (%"class.blink::Hyphenation"*, %"class.WTF::StringView"*, i32)***
  %61 = load i32 (%"class.blink::Hyphenation"*, %"class.WTF::StringView"*, i32)**, i32 (%"class.blink::Hyphenation"*, %"class.WTF::StringView"*, i32)*** %60, align 8
  %62 = getelementptr inbounds i32 (%"class.blink::Hyphenation"*, %"class.WTF::StringView"*, i32)*, i32 (%"class.blink::Hyphenation"*, %"class.WTF::StringView"*, i32)** %61, i64 3
  %63 = load i32 (%"class.blink::Hyphenation"*, %"class.WTF::StringView"*, i32)*, i32 (%"class.blink::Hyphenation"*, %"class.WTF::StringView"*, i32)** %62, align 8
  %64 = call i32 %63(%"class.blink::Hyphenation"* %56, %"class.WTF::StringView"* nonnull dereferenceable(24) %6, i32 %59) #7
  br label %65

65:                                               ; preds = %51, %40, %54, %42
  %66 = phi i32 [ %50, %42 ], [ %64, %54 ], [ 0, %40 ], [ 0, %51 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %12) #7
  br label %67

67:                                               ; preds = %5, %65
  %68 = phi i32 [ %66, %65 ], [ 0, %5 ]
  ret i32 %68
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden { i64, i64 } @_ZNK5blink18ShapingLineBreaker9HyphenateEjjb(%"class.blink::ShapingLineBreaker"* nocapture readonly, i32, i32, i1 zeroext) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.WTF::StringView", align 8
  %6 = getelementptr inbounds %"class.blink::ShapingLineBreaker", %"class.blink::ShapingLineBreaker"* %0, i64 0, i32 3
  %7 = load %"class.blink::LazyLineBreakIterator"*, %"class.blink::LazyLineBreakIterator"** %6, align 8
  %8 = tail call i32 @_ZNK5blink21LazyLineBreakIterator20NextBreakOpportunityEj(%"class.blink::LazyLineBreakIterator"* %7, i32 %1) #7
  %9 = icmp eq i32 %8, %1
  br i1 %9, label %241, label %10

10:                                               ; preds = %4
  %11 = add i32 %8, -1
  %12 = getelementptr inbounds %"class.blink::LazyLineBreakIterator", %"class.blink::LazyLineBreakIterator"* %7, i64 0, i32 0, i32 0, i32 0
  %13 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %12, align 8
  %14 = icmp eq %"class.WTF::StringImpl"* %13, null
  br i1 %14, label %74, label %15

15:                                               ; preds = %10
  %16 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %13, i64 0, i32 1
  %17 = load i32, i32* %16, align 4
  %18 = icmp ugt i32 %17, %11
  br i1 %18, label %19, label %74

19:                                               ; preds = %15
  %20 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %13, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %21 = load atomic i32, i32* %20 monotonic, align 4
  %22 = and i32 %21, 1
  %23 = icmp eq i32 %22, 0
  %24 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %13, i64 1
  br i1 %23, label %31, label %25

25:                                               ; preds = %19
  %26 = bitcast %"class.WTF::StringImpl"* %24 to i8*
  %27 = zext i32 %11 to i64
  %28 = getelementptr inbounds i8, i8* %26, i64 %27
  %29 = load i8, i8* %28, align 1
  %30 = zext i8 %29 to i16
  br label %36

31:                                               ; preds = %19
  %32 = bitcast %"class.WTF::StringImpl"* %24 to i16*
  %33 = zext i32 %11 to i64
  %34 = getelementptr inbounds i16, i16* %32, i64 %33
  %35 = load i16, i16* %34, align 2
  br label %36

36:                                               ; preds = %25, %31
  %37 = phi i16 [ %30, %25 ], [ %35, %31 ]
  switch i16 %37, label %74 [
    i16 32, label %38
    i16 9, label %38
    i16 10, label %38
    i16 12288, label %38
  ]

38:                                               ; preds = %36, %36, %36, %36
  %39 = icmp eq i32 %11, 0
  br i1 %39, label %70, label %40

40:                                               ; preds = %38
  %41 = bitcast %"class.WTF::StringImpl"* %24 to i8*
  %42 = bitcast %"class.WTF::StringImpl"* %24 to i16*
  %43 = zext i32 %11 to i64
  br label %44

44:                                               ; preds = %40, %63
  %45 = phi i64 [ %43, %40 ], [ %65, %63 ]
  %46 = trunc i64 %45 to i32
  %47 = add i32 %46, -1
  %48 = icmp ugt i32 %17, %47
  br i1 %48, label %49, label %66

49:                                               ; preds = %44
  %50 = load atomic i32, i32* %20 monotonic, align 4
  %51 = and i32 %50, 1
  %52 = icmp eq i32 %51, 0
  %53 = zext i32 %47 to i64
  br i1 %52, label %58, label %54

54:                                               ; preds = %49
  %55 = getelementptr inbounds i8, i8* %41, i64 %53
  %56 = load i8, i8* %55, align 1
  %57 = zext i8 %56 to i16
  br label %61

58:                                               ; preds = %49
  %59 = getelementptr inbounds i16, i16* %42, i64 %53
  %60 = load i16, i16* %59, align 2
  br label %61

61:                                               ; preds = %58, %54
  %62 = phi i16 [ %57, %54 ], [ %60, %58 ]
  switch i16 %62, label %68 [
    i16 32, label %63
    i16 9, label %63
    i16 10, label %63
    i16 12288, label %63
  ]

63:                                               ; preds = %61, %61, %61, %61
  %64 = icmp eq i32 %47, 0
  %65 = add nsw i64 %45, -1
  br i1 %64, label %70, label %44

66:                                               ; preds = %44
  %67 = trunc i64 %45 to i32
  br label %70

68:                                               ; preds = %61
  %69 = trunc i64 %45 to i32
  br label %70

70:                                               ; preds = %63, %66, %68, %38
  %71 = phi i32 [ 0, %38 ], [ %67, %66 ], [ %69, %68 ], [ 0, %63 ]
  %72 = icmp ugt i32 %71, %1
  %73 = select i1 %72, i32 %71, i32 %1
  br label %74

74:                                               ; preds = %10, %15, %36, %70
  %75 = phi i32 [ %73, %70 ], [ %8, %36 ], [ %8, %15 ], [ %8, %10 ]
  %76 = icmp eq i32 %75, %1
  br i1 %76, label %241, label %77

77:                                               ; preds = %74
  %78 = load %"class.blink::LazyLineBreakIterator"*, %"class.blink::LazyLineBreakIterator"** %6, align 8
  %79 = tail call i32 @_ZNK5blink21LazyLineBreakIterator24PreviousBreakOpportunityEjj(%"class.blink::LazyLineBreakIterator"* %78, i32 %1, i32 %2) #7
  %80 = getelementptr inbounds %"class.blink::LazyLineBreakIterator", %"class.blink::LazyLineBreakIterator"* %7, i64 0, i32 0, i32 0, i32 0
  %81 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %80, align 8
  %82 = icmp eq %"class.WTF::StringImpl"* %81, null
  %83 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %81, i64 0, i32 1
  %84 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %81, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %85 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %81, i64 1
  %86 = bitcast %"class.WTF::StringImpl"* %85 to i8*
  %87 = bitcast %"class.WTF::StringImpl"* %85 to i16*
  %88 = zext i32 %79 to i64
  br i1 %82, label %115, label %89

89:                                               ; preds = %77
  %90 = load i32, i32* %83, align 4
  %91 = zext i32 %90 to i64
  br label %92

92:                                               ; preds = %89, %113
  %93 = phi i64 [ %114, %113 ], [ %88, %89 ]
  %94 = icmp uge i64 %93, %91
  %95 = or i1 %82, %94
  br i1 %95, label %115, label %96

96:                                               ; preds = %92
  %97 = load i32, i32* %83, align 4
  %98 = zext i32 %97 to i64
  %99 = icmp ult i64 %93, %98
  br i1 %99, label %100, label %115

100:                                              ; preds = %96
  %101 = load atomic i32, i32* %84 monotonic, align 4
  %102 = and i32 %101, 1
  %103 = icmp eq i32 %102, 0
  br i1 %103, label %108, label %104

104:                                              ; preds = %100
  %105 = getelementptr inbounds i8, i8* %86, i64 %93
  %106 = load i8, i8* %105, align 1
  %107 = zext i8 %106 to i16
  br label %111

108:                                              ; preds = %100
  %109 = getelementptr inbounds i16, i16* %87, i64 %93
  %110 = load i16, i16* %109, align 2
  br label %111

111:                                              ; preds = %104, %108
  %112 = phi i16 [ %107, %104 ], [ %110, %108 ]
  switch i16 %112, label %115 [
    i16 32, label %113
    i16 9, label %113
    i16 10, label %113
  ]

113:                                              ; preds = %111, %111, %111
  %114 = add nuw nsw i64 %93, 1
  br i1 %82, label %115, label %92

115:                                              ; preds = %92, %96, %111, %113, %77
  %116 = phi i64 [ %88, %77 ], [ %93, %92 ], [ %93, %96 ], [ %93, %111 ], [ %114, %113 ]
  %117 = trunc i64 %116 to i32
  %118 = icmp ugt i32 %117, %1
  br i1 %118, label %239, label %119

119:                                              ; preds = %115
  %120 = icmp ule i32 %79, %2
  %121 = or i1 %120, %82
  br i1 %121, label %176, label %122

122:                                              ; preds = %119
  %123 = load i32, i32* %83, align 4
  %124 = sub i32 %123, %75
  %125 = load atomic i32, i32* %84 monotonic, align 4
  %126 = and i32 %125, 1
  %127 = icmp eq i32 %126, 0
  %128 = zext i32 %75 to i64
  %129 = getelementptr inbounds i16, i16* %87, i64 %128
  %130 = bitcast i16* %129 to i8*
  %131 = getelementptr inbounds i8, i8* %86, i64 %128
  %132 = select i1 %127, i8* %130, i8* %131
  %133 = zext i32 %124 to i64
  %134 = icmp eq i32 %124, 0
  %135 = load atomic i32, i32* %84 monotonic, align 4
  br i1 %134, label %158, label %136

136:                                              ; preds = %122
  %137 = and i32 %135, 1
  %138 = icmp eq i32 %137, 0
  br i1 %138, label %146, label %139

139:                                              ; preds = %136, %143
  %140 = phi i64 [ %144, %143 ], [ 0, %136 ]
  %141 = getelementptr inbounds i8, i8* %132, i64 %140
  %142 = load i8, i8* %141, align 1
  switch i8 %142, label %176 [
    i8 32, label %143
    i8 9, label %143
    i8 10, label %143
  ]

143:                                              ; preds = %139, %139, %139
  %144 = add nuw nsw i64 %140, 1
  %145 = icmp eq i64 %144, %133
  br i1 %145, label %155, label %139

146:                                              ; preds = %136
  %147 = bitcast i8* %132 to i16*
  br label %148

148:                                              ; preds = %152, %146
  %149 = phi i64 [ %153, %152 ], [ 0, %146 ]
  %150 = getelementptr inbounds i16, i16* %147, i64 %149
  %151 = load i16, i16* %150, align 2
  switch i16 %151, label %176 [
    i16 32, label %152
    i16 9, label %152
    i16 10, label %152
    i16 12288, label %152
  ]

152:                                              ; preds = %148, %148, %148, %148
  %153 = add nuw nsw i64 %149, 1
  %154 = icmp eq i64 %153, %133
  br i1 %154, label %155, label %148

155:                                              ; preds = %143, %152
  %156 = load atomic i32, i32* %84 monotonic, align 4
  %157 = icmp eq i32 %79, 0
  br i1 %157, label %176, label %158

158:                                              ; preds = %122, %155
  %159 = load atomic i32, i32* %84 monotonic, align 4
  %160 = and i32 %159, 1
  %161 = icmp eq i32 %160, 0
  br i1 %161, label %169, label %162

162:                                              ; preds = %158, %166
  %163 = phi i64 [ %167, %166 ], [ 0, %158 ]
  %164 = getelementptr inbounds i8, i8* %86, i64 %163
  %165 = load i8, i8* %164, align 1
  switch i8 %165, label %239 [
    i8 32, label %166
    i8 9, label %166
    i8 10, label %166
  ]

166:                                              ; preds = %162, %162, %162
  %167 = add nuw nsw i64 %163, 1
  %168 = icmp eq i64 %167, %88
  br i1 %168, label %176, label %162

169:                                              ; preds = %158, %173
  %170 = phi i64 [ %174, %173 ], [ 0, %158 ]
  %171 = getelementptr inbounds i16, i16* %87, i64 %170
  %172 = load i16, i16* %171, align 2
  switch i16 %172, label %239 [
    i16 32, label %173
    i16 9, label %173
    i16 10, label %173
    i16 12288, label %173
  ]

173:                                              ; preds = %169, %169, %169, %169
  %174 = add nuw nsw i64 %170, 1
  %175 = icmp eq i64 %174, %88
  br i1 %175, label %176, label %169

176:                                              ; preds = %139, %148, %166, %173, %119, %155
  %177 = sub i32 %75, %117
  %178 = icmp ult i32 %177, 3
  br i1 %178, label %239, label %179

179:                                              ; preds = %176
  %180 = load %"class.blink::LazyLineBreakIterator"*, %"class.blink::LazyLineBreakIterator"** %6, align 8
  %181 = bitcast %"class.WTF::StringView"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %181) #7
  %182 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %5, i64 0, i32 1
  %183 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %5, i64 0, i32 2
  %184 = getelementptr inbounds %"class.blink::LazyLineBreakIterator", %"class.blink::LazyLineBreakIterator"* %180, i64 0, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %181, i8 -86, i64 24, i1 false) #7
  %185 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %184, align 8
  %186 = icmp eq %"class.WTF::StringImpl"* %185, null
  br i1 %186, label %203, label %187

187:                                              ; preds = %179
  %188 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %5, i64 0, i32 0
  store i32 %177, i32* %183, align 8
  store %"class.WTF::StringImpl"* %185, %"class.WTF::StringImpl"** %188, align 8
  %189 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %185, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %190 = load atomic i32, i32* %189 monotonic, align 4
  %191 = and i32 %190, 1
  %192 = icmp eq i32 %191, 0
  %193 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %185, i64 1
  br i1 %192, label %198, label %194

194:                                              ; preds = %187
  %195 = bitcast %"class.WTF::StringImpl"* %193 to i8*
  %196 = and i64 %116, 4294967295
  %197 = getelementptr inbounds i8, i8* %195, i64 %196
  store i8* %197, i8** %182, align 8
  br label %206

198:                                              ; preds = %187
  %199 = bitcast %"class.WTF::StringImpl"* %193 to i16*
  %200 = and i64 %116, 4294967295
  %201 = getelementptr inbounds i16, i16* %199, i64 %200
  %202 = bitcast i8** %182 to i16**
  store i16* %201, i16** %202, align 8
  br label %206

203:                                              ; preds = %179
  store i32 0, i32* %183, align 8
  store i8* null, i8** %182, align 8
  %204 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %205 = bitcast %"class.WTF::StringView"* %5 to i64*
  store i64 %204, i64* %205, align 8
  br label %206

206:                                              ; preds = %203, %198, %194
  %207 = sub i32 %1, %117
  br i1 %3, label %208, label %219

208:                                              ; preds = %206
  %209 = icmp ult i32 %207, 2
  br i1 %209, label %233, label %210

210:                                              ; preds = %208
  %211 = getelementptr inbounds %"class.blink::ShapingLineBreaker", %"class.blink::ShapingLineBreaker"* %0, i64 0, i32 4
  %212 = load %"class.blink::Hyphenation"*, %"class.blink::Hyphenation"** %211, align 8
  %213 = add i32 %207, 1
  %214 = bitcast %"class.blink::Hyphenation"* %212 to i32 (%"class.blink::Hyphenation"*, %"class.WTF::StringView"*, i32)***
  %215 = load i32 (%"class.blink::Hyphenation"*, %"class.WTF::StringView"*, i32)**, i32 (%"class.blink::Hyphenation"*, %"class.WTF::StringView"*, i32)*** %214, align 8
  %216 = getelementptr inbounds i32 (%"class.blink::Hyphenation"*, %"class.WTF::StringView"*, i32)*, i32 (%"class.blink::Hyphenation"*, %"class.WTF::StringView"*, i32)** %215, i64 2
  %217 = load i32 (%"class.blink::Hyphenation"*, %"class.WTF::StringView"*, i32)*, i32 (%"class.blink::Hyphenation"*, %"class.WTF::StringView"*, i32)** %216, align 8
  %218 = call i32 %217(%"class.blink::Hyphenation"* %212, %"class.WTF::StringView"* nonnull dereferenceable(24) %5, i32 %213) #7
  br label %234

219:                                              ; preds = %206
  %220 = sub i32 %177, %207
  %221 = icmp ult i32 %220, 2
  br i1 %221, label %233, label %222

222:                                              ; preds = %219
  %223 = getelementptr inbounds %"class.blink::ShapingLineBreaker", %"class.blink::ShapingLineBreaker"* %0, i64 0, i32 4
  %224 = load %"class.blink::Hyphenation"*, %"class.blink::Hyphenation"** %223, align 8
  %225 = icmp eq i32 %207, 0
  %226 = add i32 %207, -1
  %227 = select i1 %225, i32 0, i32 %226
  %228 = bitcast %"class.blink::Hyphenation"* %224 to i32 (%"class.blink::Hyphenation"*, %"class.WTF::StringView"*, i32)***
  %229 = load i32 (%"class.blink::Hyphenation"*, %"class.WTF::StringView"*, i32)**, i32 (%"class.blink::Hyphenation"*, %"class.WTF::StringView"*, i32)*** %228, align 8
  %230 = getelementptr inbounds i32 (%"class.blink::Hyphenation"*, %"class.WTF::StringView"*, i32)*, i32 (%"class.blink::Hyphenation"*, %"class.WTF::StringView"*, i32)** %229, i64 3
  %231 = load i32 (%"class.blink::Hyphenation"*, %"class.WTF::StringView"*, i32)*, i32 (%"class.blink::Hyphenation"*, %"class.WTF::StringView"*, i32)** %230, align 8
  %232 = call i32 %231(%"class.blink::Hyphenation"* %224, %"class.WTF::StringView"* nonnull dereferenceable(24) %5, i32 %227) #7
  br label %234

233:                                              ; preds = %208, %219
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %181) #7
  br label %239

234:                                              ; preds = %210, %222
  %235 = phi i32 [ %218, %210 ], [ %232, %222 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %181) #7
  %236 = icmp eq i32 %235, 0
  br i1 %236, label %239, label %237

237:                                              ; preds = %234
  %238 = add i32 %235, %117
  br label %241

239:                                              ; preds = %162, %169, %176, %233, %234, %115
  %240 = select i1 %3, i32 %79, i32 %75
  br label %241

241:                                              ; preds = %4, %74, %239, %237
  %242 = phi i32 [ %240, %239 ], [ %238, %237 ], [ %1, %74 ], [ %1, %4 ]
  %243 = phi i64 [ 0, %239 ], [ 4294967296, %237 ], [ 0, %74 ], [ 0, %4 ]
  %244 = zext i32 %242 to i64
  %245 = insertvalue { i64, i64 } undef, i64 %244, 0
  %246 = insertvalue { i64, i64 } %245, i64 %243, 1
  ret { i64, i64 } %246
}

declare i32 @_ZNK5blink21LazyLineBreakIterator20NextBreakOpportunityEj(%"class.blink::LazyLineBreakIterator"*, i32) local_unnamed_addr #1

declare i32 @_ZNK5blink21LazyLineBreakIterator24PreviousBreakOpportunityEjj(%"class.blink::LazyLineBreakIterator"*, i32, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden { i64, i64 } @_ZNK5blink18ShapingLineBreaker24PreviousBreakOpportunityEjj(%"class.blink::ShapingLineBreaker"* nocapture readonly, i32, i32) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.blink::ShapingLineBreaker", %"class.blink::ShapingLineBreaker"* %0, i64 0, i32 3
  %5 = load %"class.blink::LazyLineBreakIterator"*, %"class.blink::LazyLineBreakIterator"** %4, align 8
  %6 = getelementptr inbounds %"class.blink::ShapingLineBreaker", %"class.blink::ShapingLineBreaker"* %0, i64 0, i32 5
  %7 = load i8, i8* %6, align 8, !range !2
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %9, label %106, !prof !3

9:                                                ; preds = %3
  %10 = getelementptr inbounds %"class.blink::LazyLineBreakIterator", %"class.blink::LazyLineBreakIterator"* %5, i64 0, i32 0, i32 0, i32 0
  %11 = tail call i32 @_ZNK5blink21LazyLineBreakIterator24PreviousBreakOpportunityEjj(%"class.blink::LazyLineBreakIterator"* %5, i32 %1, i32 %2) #7
  %12 = icmp ugt i32 %11, %2
  br i1 %12, label %13, label %48

13:                                               ; preds = %9, %44
  %14 = phi i32 [ %46, %44 ], [ %11, %9 ]
  %15 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %10, align 8
  %16 = icmp eq %"class.WTF::StringImpl"* %15, null
  br i1 %16, label %176, label %17

17:                                               ; preds = %13
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %15, i64 0, i32 1
  %19 = load i32, i32* %18, align 4
  %20 = icmp ult i32 %14, %19
  br i1 %20, label %21, label %52

21:                                               ; preds = %17
  %22 = add i32 %14, -1
  %23 = icmp ugt i32 %19, %22
  br i1 %23, label %24, label %52

24:                                               ; preds = %21
  %25 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %15, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %26 = load atomic i32, i32* %25 monotonic, align 4
  %27 = and i32 %26, 1
  %28 = icmp eq i32 %27, 0
  %29 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %15, i64 1
  br i1 %28, label %36, label %30

30:                                               ; preds = %24
  %31 = bitcast %"class.WTF::StringImpl"* %29 to i8*
  %32 = zext i32 %22 to i64
  %33 = getelementptr inbounds i8, i8* %31, i64 %32
  %34 = load i8, i8* %33, align 1
  %35 = zext i8 %34 to i16
  br label %41

36:                                               ; preds = %24
  %37 = bitcast %"class.WTF::StringImpl"* %29 to i16*
  %38 = zext i32 %22 to i64
  %39 = getelementptr inbounds i16, i16* %37, i64 %38
  %40 = load i16, i16* %39, align 2
  br label %41

41:                                               ; preds = %30, %36
  %42 = phi i16 [ %35, %30 ], [ %40, %36 ]
  %43 = icmp eq i16 %42, 173
  br i1 %43, label %44, label %52

44:                                               ; preds = %41
  %45 = load %"class.blink::LazyLineBreakIterator"*, %"class.blink::LazyLineBreakIterator"** %4, align 8
  %46 = tail call i32 @_ZNK5blink21LazyLineBreakIterator24PreviousBreakOpportunityEjj(%"class.blink::LazyLineBreakIterator"* %45, i32 %22, i32 %2) #7
  %47 = icmp ugt i32 %46, %2
  br i1 %47, label %13, label %48

48:                                               ; preds = %44, %9
  %49 = phi i32 [ %11, %9 ], [ %46, %44 ]
  %50 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %10, align 8
  %51 = icmp eq %"class.WTF::StringImpl"* %50, null
  br i1 %51, label %176, label %52

52:                                               ; preds = %17, %41, %21, %48
  %53 = phi i32 [ %49, %48 ], [ %14, %21 ], [ %14, %41 ], [ %14, %17 ]
  %54 = phi %"class.WTF::StringImpl"* [ %50, %48 ], [ %15, %21 ], [ %15, %41 ], [ %15, %17 ]
  %55 = add i32 %53, -1
  %56 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %54, i64 0, i32 1
  %57 = load i32, i32* %56, align 4
  %58 = icmp ugt i32 %57, %55
  br i1 %58, label %59, label %176

59:                                               ; preds = %52
  %60 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %54, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %61 = load atomic i32, i32* %60 monotonic, align 4
  %62 = and i32 %61, 1
  %63 = icmp eq i32 %62, 0
  %64 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %54, i64 1
  br i1 %63, label %71, label %65

65:                                               ; preds = %59
  %66 = bitcast %"class.WTF::StringImpl"* %64 to i8*
  %67 = zext i32 %55 to i64
  %68 = getelementptr inbounds i8, i8* %66, i64 %67
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i16
  br label %76

71:                                               ; preds = %59
  %72 = bitcast %"class.WTF::StringImpl"* %64 to i16*
  %73 = zext i32 %55 to i64
  %74 = getelementptr inbounds i16, i16* %72, i64 %73
  %75 = load i16, i16* %74, align 2
  br label %76

76:                                               ; preds = %65, %71
  %77 = phi i16 [ %70, %65 ], [ %75, %71 ]
  switch i16 %77, label %176 [
    i16 32, label %78
    i16 9, label %78
    i16 10, label %78
    i16 12288, label %78
  ]

78:                                               ; preds = %76, %76, %76, %76
  %79 = icmp eq i32 %55, 0
  br i1 %79, label %176, label %80

80:                                               ; preds = %78
  %81 = bitcast %"class.WTF::StringImpl"* %64 to i8*
  %82 = bitcast %"class.WTF::StringImpl"* %64 to i16*
  %83 = zext i32 %55 to i64
  br label %84

84:                                               ; preds = %80, %103
  %85 = phi i64 [ %83, %80 ], [ %105, %103 ]
  %86 = trunc i64 %85 to i32
  %87 = add i32 %86, -1
  %88 = icmp ugt i32 %57, %87
  br i1 %88, label %89, label %176

89:                                               ; preds = %84
  %90 = load atomic i32, i32* %60 monotonic, align 4
  %91 = and i32 %90, 1
  %92 = icmp eq i32 %91, 0
  %93 = zext i32 %87 to i64
  br i1 %92, label %98, label %94

94:                                               ; preds = %89
  %95 = getelementptr inbounds i8, i8* %81, i64 %93
  %96 = load i8, i8* %95, align 1
  %97 = zext i8 %96 to i16
  br label %101

98:                                               ; preds = %89
  %99 = getelementptr inbounds i16, i16* %82, i64 %93
  %100 = load i16, i16* %99, align 2
  br label %101

101:                                              ; preds = %98, %94
  %102 = phi i16 [ %97, %94 ], [ %100, %98 ]
  switch i16 %102, label %176 [
    i16 32, label %103
    i16 9, label %103
    i16 10, label %103
    i16 12288, label %103
  ]

103:                                              ; preds = %101, %101, %101, %101
  %104 = icmp eq i32 %87, 0
  %105 = add nsw i64 %85, -1
  br i1 %104, label %176, label %84

106:                                              ; preds = %3
  %107 = getelementptr inbounds %"class.blink::ShapingLineBreaker", %"class.blink::ShapingLineBreaker"* %0, i64 0, i32 4
  %108 = load %"class.blink::Hyphenation"*, %"class.blink::Hyphenation"** %107, align 8
  %109 = icmp eq %"class.blink::Hyphenation"* %108, null
  br i1 %109, label %119, label %110, !prof !4

110:                                              ; preds = %106
  %111 = tail call { i64, i64 } @_ZNK5blink18ShapingLineBreaker9HyphenateEjjb(%"class.blink::ShapingLineBreaker"* %0, i32 %1, i32 %2, i1 zeroext true)
  %112 = extractvalue { i64, i64 } %111, 0
  %113 = trunc i64 %112 to i32
  %114 = extractvalue { i64, i64 } %111, 1
  %115 = and i64 %112, -1099511627776
  %116 = and i64 %112, 1095216660480
  %117 = and i64 %114, -1099511627776
  %118 = and i64 %114, 1095216660480
  br label %176

119:                                              ; preds = %106
  %120 = tail call i32 @_ZNK5blink21LazyLineBreakIterator24PreviousBreakOpportunityEjj(%"class.blink::LazyLineBreakIterator"* %5, i32 %1, i32 %2) #7
  %121 = add i32 %120, -1
  %122 = getelementptr inbounds %"class.blink::LazyLineBreakIterator", %"class.blink::LazyLineBreakIterator"* %5, i64 0, i32 0, i32 0, i32 0
  %123 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %122, align 8
  %124 = icmp eq %"class.WTF::StringImpl"* %123, null
  br i1 %124, label %176, label %125

125:                                              ; preds = %119
  %126 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %123, i64 0, i32 1
  %127 = load i32, i32* %126, align 4
  %128 = icmp ugt i32 %127, %121
  br i1 %128, label %129, label %176

129:                                              ; preds = %125
  %130 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %123, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %131 = load atomic i32, i32* %130 monotonic, align 4
  %132 = and i32 %131, 1
  %133 = icmp eq i32 %132, 0
  %134 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %123, i64 1
  br i1 %133, label %141, label %135

135:                                              ; preds = %129
  %136 = bitcast %"class.WTF::StringImpl"* %134 to i8*
  %137 = zext i32 %121 to i64
  %138 = getelementptr inbounds i8, i8* %136, i64 %137
  %139 = load i8, i8* %138, align 1
  %140 = zext i8 %139 to i16
  br label %146

141:                                              ; preds = %129
  %142 = bitcast %"class.WTF::StringImpl"* %134 to i16*
  %143 = zext i32 %121 to i64
  %144 = getelementptr inbounds i16, i16* %142, i64 %143
  %145 = load i16, i16* %144, align 2
  br label %146

146:                                              ; preds = %135, %141
  %147 = phi i16 [ %140, %135 ], [ %145, %141 ]
  switch i16 %147, label %176 [
    i16 32, label %148
    i16 9, label %148
    i16 10, label %148
    i16 12288, label %148
  ]

148:                                              ; preds = %146, %146, %146, %146
  %149 = icmp eq i32 %121, 0
  br i1 %149, label %176, label %150

150:                                              ; preds = %148
  %151 = bitcast %"class.WTF::StringImpl"* %134 to i8*
  %152 = bitcast %"class.WTF::StringImpl"* %134 to i16*
  %153 = zext i32 %121 to i64
  br label %154

154:                                              ; preds = %150, %173
  %155 = phi i64 [ %153, %150 ], [ %175, %173 ]
  %156 = trunc i64 %155 to i32
  %157 = add i32 %156, -1
  %158 = icmp ugt i32 %127, %157
  br i1 %158, label %159, label %176

159:                                              ; preds = %154
  %160 = load atomic i32, i32* %130 monotonic, align 4
  %161 = and i32 %160, 1
  %162 = icmp eq i32 %161, 0
  %163 = zext i32 %157 to i64
  br i1 %162, label %168, label %164

164:                                              ; preds = %159
  %165 = getelementptr inbounds i8, i8* %151, i64 %163
  %166 = load i8, i8* %165, align 1
  %167 = zext i8 %166 to i16
  br label %171

168:                                              ; preds = %159
  %169 = getelementptr inbounds i16, i16* %152, i64 %163
  %170 = load i16, i16* %169, align 2
  br label %171

171:                                              ; preds = %168, %164
  %172 = phi i16 [ %167, %164 ], [ %170, %168 ]
  switch i16 %172, label %176 [
    i16 32, label %173
    i16 9, label %173
    i16 10, label %173
    i16 12288, label %173
  ]

173:                                              ; preds = %171, %171, %171, %171
  %174 = icmp eq i32 %157, 0
  %175 = add nsw i64 %155, -1
  br i1 %174, label %176, label %154

176:                                              ; preds = %173, %154, %171, %13, %103, %84, %101, %119, %125, %48, %52, %146, %148, %76, %78, %110
  %177 = phi i64 [ %115, %110 ], [ 0, %78 ], [ 0, %76 ], [ 0, %148 ], [ 0, %146 ], [ 0, %52 ], [ 0, %48 ], [ 0, %125 ], [ 0, %119 ], [ 0, %101 ], [ 0, %84 ], [ 0, %103 ], [ 0, %13 ], [ 0, %171 ], [ 0, %154 ], [ 0, %173 ]
  %178 = phi i64 [ %117, %110 ], [ 0, %78 ], [ 0, %76 ], [ 0, %148 ], [ 0, %146 ], [ 0, %52 ], [ 0, %48 ], [ 0, %125 ], [ 0, %119 ], [ 0, %101 ], [ 0, %84 ], [ 0, %103 ], [ 0, %13 ], [ 0, %171 ], [ 0, %154 ], [ 0, %173 ]
  %179 = phi i64 [ %118, %110 ], [ 0, %78 ], [ 0, %76 ], [ 0, %148 ], [ 0, %146 ], [ 0, %52 ], [ 0, %48 ], [ 0, %125 ], [ 0, %119 ], [ 0, %101 ], [ 0, %84 ], [ 0, %103 ], [ 0, %13 ], [ 0, %171 ], [ 0, %154 ], [ 0, %173 ]
  %180 = phi i64 [ %114, %110 ], [ 0, %78 ], [ 0, %76 ], [ 0, %148 ], [ 0, %146 ], [ 0, %52 ], [ 0, %48 ], [ 0, %125 ], [ 0, %119 ], [ 0, %103 ], [ %85, %84 ], [ %85, %101 ], [ 0, %13 ], [ 0, %173 ], [ %155, %154 ], [ %155, %171 ]
  %181 = phi i64 [ %116, %110 ], [ 4294967296, %78 ], [ 0, %76 ], [ 4294967296, %148 ], [ 0, %146 ], [ 0, %52 ], [ 0, %48 ], [ 0, %125 ], [ 0, %119 ], [ 4294967296, %101 ], [ 4294967296, %84 ], [ 4294967296, %103 ], [ 0, %13 ], [ 4294967296, %171 ], [ 4294967296, %154 ], [ 4294967296, %173 ]
  %182 = phi i32 [ %113, %110 ], [ 1, %78 ], [ %53, %76 ], [ 1, %148 ], [ %120, %146 ], [ %53, %52 ], [ %49, %48 ], [ %120, %125 ], [ %120, %119 ], [ %53, %101 ], [ %53, %84 ], [ %53, %103 ], [ %14, %13 ], [ %120, %171 ], [ %120, %154 ], [ %120, %173 ]
  %183 = or i64 %181, %177
  %184 = zext i32 %182 to i64
  %185 = or i64 %183, %184
  %186 = insertvalue { i64, i64 } undef, i64 %185, 0
  %187 = or i64 %179, %178
  %188 = and i64 %180, 4294967295
  %189 = or i64 %187, %188
  %190 = insertvalue { i64, i64 } %186, i64 %189, 1
  ret { i64, i64 } %190
}

; Function Attrs: nounwind ssp uwtable
define hidden { i64, i64 } @_ZNK5blink18ShapingLineBreaker20NextBreakOpportunityEjjj(%"class.blink::ShapingLineBreaker"* nocapture readonly, i32, i32, i32) local_unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"class.blink::ShapingLineBreaker", %"class.blink::ShapingLineBreaker"* %0, i64 0, i32 3
  %6 = load %"class.blink::LazyLineBreakIterator"*, %"class.blink::LazyLineBreakIterator"** %5, align 8
  %7 = getelementptr inbounds %"class.blink::ShapingLineBreaker", %"class.blink::ShapingLineBreaker"* %0, i64 0, i32 5
  %8 = load i8, i8* %7, align 8, !range !2
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %10, label %99, !prof !3

10:                                               ; preds = %4
  %11 = tail call i32 @_ZNK5blink21LazyLineBreakIterator20NextBreakOpportunityEj(%"class.blink::LazyLineBreakIterator"* %6, i32 %1) #7
  %12 = getelementptr inbounds %"class.blink::LazyLineBreakIterator", %"class.blink::LazyLineBreakIterator"* %6, i64 0, i32 0, i32 0, i32 0
  %13 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %12, align 8
  %14 = icmp eq %"class.WTF::StringImpl"* %13, null
  br i1 %14, label %169, label %15

15:                                               ; preds = %10, %93
  %16 = phi %"class.WTF::StringImpl"* [ %97, %93 ], [ %13, %10 ]
  %17 = phi i32 [ %96, %93 ], [ %11, %10 ]
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %16, i64 0, i32 1
  %19 = load i32, i32* %18, align 4
  %20 = icmp ult i32 %17, %19
  %21 = add i32 %17, -1
  %22 = icmp ugt i32 %19, %21
  %23 = and i1 %20, %22
  br i1 %23, label %24, label %44

24:                                               ; preds = %15
  %25 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %16, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %26 = load atomic i32, i32* %25 monotonic, align 4
  %27 = and i32 %26, 1
  %28 = icmp eq i32 %27, 0
  %29 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %16, i64 1
  br i1 %28, label %36, label %30

30:                                               ; preds = %24
  %31 = bitcast %"class.WTF::StringImpl"* %29 to i8*
  %32 = zext i32 %21 to i64
  %33 = getelementptr inbounds i8, i8* %31, i64 %32
  %34 = load i8, i8* %33, align 1
  %35 = zext i8 %34 to i16
  br label %41

36:                                               ; preds = %24
  %37 = bitcast %"class.WTF::StringImpl"* %29 to i16*
  %38 = zext i32 %21 to i64
  %39 = getelementptr inbounds i16, i16* %37, i64 %38
  %40 = load i16, i16* %39, align 2
  br label %41

41:                                               ; preds = %30, %36
  %42 = phi i16 [ %35, %30 ], [ %40, %36 ]
  %43 = icmp eq i16 %42, 173
  br i1 %43, label %93, label %44

44:                                               ; preds = %41, %15
  %45 = icmp ugt i32 %19, %21
  br i1 %45, label %46, label %169

46:                                               ; preds = %44
  %47 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %16, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %48 = load atomic i32, i32* %47 monotonic, align 4
  %49 = and i32 %48, 1
  %50 = icmp eq i32 %49, 0
  %51 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %16, i64 1
  br i1 %50, label %58, label %52

52:                                               ; preds = %46
  %53 = bitcast %"class.WTF::StringImpl"* %51 to i8*
  %54 = zext i32 %21 to i64
  %55 = getelementptr inbounds i8, i8* %53, i64 %54
  %56 = load i8, i8* %55, align 1
  %57 = zext i8 %56 to i16
  br label %63

58:                                               ; preds = %46
  %59 = bitcast %"class.WTF::StringImpl"* %51 to i16*
  %60 = zext i32 %21 to i64
  %61 = getelementptr inbounds i16, i16* %59, i64 %60
  %62 = load i16, i16* %61, align 2
  br label %63

63:                                               ; preds = %52, %58
  %64 = phi i16 [ %57, %52 ], [ %62, %58 ]
  switch i16 %64, label %169 [
    i16 32, label %65
    i16 9, label %65
    i16 10, label %65
    i16 12288, label %65
  ]

65:                                               ; preds = %63, %63, %63, %63
  %66 = icmp eq i32 %21, 0
  br i1 %66, label %169, label %67

67:                                               ; preds = %65
  %68 = bitcast %"class.WTF::StringImpl"* %51 to i8*
  %69 = bitcast %"class.WTF::StringImpl"* %51 to i16*
  %70 = zext i32 %21 to i64
  br label %71

71:                                               ; preds = %67, %90
  %72 = phi i64 [ %70, %67 ], [ %92, %90 ]
  %73 = trunc i64 %72 to i32
  %74 = add i32 %73, -1
  %75 = icmp ugt i32 %19, %74
  br i1 %75, label %76, label %169

76:                                               ; preds = %71
  %77 = load atomic i32, i32* %47 monotonic, align 4
  %78 = and i32 %77, 1
  %79 = icmp eq i32 %78, 0
  %80 = zext i32 %74 to i64
  br i1 %79, label %85, label %81

81:                                               ; preds = %76
  %82 = getelementptr inbounds i8, i8* %68, i64 %80
  %83 = load i8, i8* %82, align 1
  %84 = zext i8 %83 to i16
  br label %88

85:                                               ; preds = %76
  %86 = getelementptr inbounds i16, i16* %69, i64 %80
  %87 = load i16, i16* %86, align 2
  br label %88

88:                                               ; preds = %85, %81
  %89 = phi i16 [ %84, %81 ], [ %87, %85 ]
  switch i16 %89, label %169 [
    i16 32, label %90
    i16 9, label %90
    i16 10, label %90
    i16 12288, label %90
  ]

90:                                               ; preds = %88, %88, %88, %88
  %91 = icmp eq i32 %74, 0
  %92 = add nsw i64 %72, -1
  br i1 %91, label %169, label %71

93:                                               ; preds = %41
  %94 = add nuw i32 %17, 1
  %95 = load %"class.blink::LazyLineBreakIterator"*, %"class.blink::LazyLineBreakIterator"** %5, align 8
  %96 = tail call i32 @_ZNK5blink21LazyLineBreakIterator20NextBreakOpportunityEj(%"class.blink::LazyLineBreakIterator"* %95, i32 %94) #7
  %97 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %12, align 8
  %98 = icmp eq %"class.WTF::StringImpl"* %97, null
  br i1 %98, label %169, label %15

99:                                               ; preds = %4
  %100 = getelementptr inbounds %"class.blink::ShapingLineBreaker", %"class.blink::ShapingLineBreaker"* %0, i64 0, i32 4
  %101 = load %"class.blink::Hyphenation"*, %"class.blink::Hyphenation"** %100, align 8
  %102 = icmp eq %"class.blink::Hyphenation"* %101, null
  br i1 %102, label %112, label %103, !prof !4

103:                                              ; preds = %99
  %104 = tail call { i64, i64 } @_ZNK5blink18ShapingLineBreaker9HyphenateEjjb(%"class.blink::ShapingLineBreaker"* %0, i32 %1, i32 %2, i1 zeroext false)
  %105 = extractvalue { i64, i64 } %104, 0
  %106 = trunc i64 %105 to i32
  %107 = extractvalue { i64, i64 } %104, 1
  %108 = and i64 %105, -1099511627776
  %109 = and i64 %105, 1095216660480
  %110 = and i64 %107, -1099511627776
  %111 = and i64 %107, 1095216660480
  br label %169

112:                                              ; preds = %99
  %113 = tail call i32 @_ZNK5blink21LazyLineBreakIterator20NextBreakOpportunityEjj(%"class.blink::LazyLineBreakIterator"* %6, i32 %1, i32 %3) #7
  %114 = add i32 %113, -1
  %115 = getelementptr inbounds %"class.blink::LazyLineBreakIterator", %"class.blink::LazyLineBreakIterator"* %6, i64 0, i32 0, i32 0, i32 0
  %116 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %115, align 8
  %117 = icmp eq %"class.WTF::StringImpl"* %116, null
  br i1 %117, label %169, label %118

118:                                              ; preds = %112
  %119 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %116, i64 0, i32 1
  %120 = load i32, i32* %119, align 4
  %121 = icmp ugt i32 %120, %114
  br i1 %121, label %122, label %169

122:                                              ; preds = %118
  %123 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %116, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %124 = load atomic i32, i32* %123 monotonic, align 4
  %125 = and i32 %124, 1
  %126 = icmp eq i32 %125, 0
  %127 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %116, i64 1
  br i1 %126, label %134, label %128

128:                                              ; preds = %122
  %129 = bitcast %"class.WTF::StringImpl"* %127 to i8*
  %130 = zext i32 %114 to i64
  %131 = getelementptr inbounds i8, i8* %129, i64 %130
  %132 = load i8, i8* %131, align 1
  %133 = zext i8 %132 to i16
  br label %139

134:                                              ; preds = %122
  %135 = bitcast %"class.WTF::StringImpl"* %127 to i16*
  %136 = zext i32 %114 to i64
  %137 = getelementptr inbounds i16, i16* %135, i64 %136
  %138 = load i16, i16* %137, align 2
  br label %139

139:                                              ; preds = %128, %134
  %140 = phi i16 [ %133, %128 ], [ %138, %134 ]
  switch i16 %140, label %169 [
    i16 32, label %141
    i16 9, label %141
    i16 10, label %141
    i16 12288, label %141
  ]

141:                                              ; preds = %139, %139, %139, %139
  %142 = icmp eq i32 %114, 0
  br i1 %142, label %169, label %143

143:                                              ; preds = %141
  %144 = bitcast %"class.WTF::StringImpl"* %127 to i8*
  %145 = bitcast %"class.WTF::StringImpl"* %127 to i16*
  %146 = zext i32 %114 to i64
  br label %147

147:                                              ; preds = %143, %166
  %148 = phi i64 [ %146, %143 ], [ %168, %166 ]
  %149 = trunc i64 %148 to i32
  %150 = add i32 %149, -1
  %151 = icmp ugt i32 %120, %150
  br i1 %151, label %152, label %169

152:                                              ; preds = %147
  %153 = load atomic i32, i32* %123 monotonic, align 4
  %154 = and i32 %153, 1
  %155 = icmp eq i32 %154, 0
  %156 = zext i32 %150 to i64
  br i1 %155, label %161, label %157

157:                                              ; preds = %152
  %158 = getelementptr inbounds i8, i8* %144, i64 %156
  %159 = load i8, i8* %158, align 1
  %160 = zext i8 %159 to i16
  br label %164

161:                                              ; preds = %152
  %162 = getelementptr inbounds i16, i16* %145, i64 %156
  %163 = load i16, i16* %162, align 2
  br label %164

164:                                              ; preds = %161, %157
  %165 = phi i16 [ %160, %157 ], [ %163, %161 ]
  switch i16 %165, label %169 [
    i16 32, label %166
    i16 9, label %166
    i16 10, label %166
    i16 12288, label %166
  ]

166:                                              ; preds = %164, %164, %164, %164
  %167 = icmp eq i32 %150, 0
  %168 = add nsw i64 %148, -1
  br i1 %167, label %169, label %147

169:                                              ; preds = %166, %147, %164, %93, %90, %71, %88, %10, %112, %118, %44, %139, %141, %63, %65, %103
  %170 = phi i64 [ %108, %103 ], [ 0, %65 ], [ 0, %63 ], [ 0, %141 ], [ 0, %139 ], [ 0, %44 ], [ 0, %118 ], [ 0, %112 ], [ 0, %10 ], [ 0, %88 ], [ 0, %71 ], [ 0, %90 ], [ 0, %93 ], [ 0, %164 ], [ 0, %147 ], [ 0, %166 ]
  %171 = phi i64 [ %110, %103 ], [ 0, %65 ], [ 0, %63 ], [ 0, %141 ], [ 0, %139 ], [ 0, %44 ], [ 0, %118 ], [ 0, %112 ], [ 0, %10 ], [ 0, %88 ], [ 0, %71 ], [ 0, %90 ], [ 0, %93 ], [ 0, %164 ], [ 0, %147 ], [ 0, %166 ]
  %172 = phi i64 [ %111, %103 ], [ 0, %65 ], [ 0, %63 ], [ 0, %141 ], [ 0, %139 ], [ 0, %44 ], [ 0, %118 ], [ 0, %112 ], [ 0, %10 ], [ 0, %88 ], [ 0, %71 ], [ 0, %90 ], [ 0, %93 ], [ 0, %164 ], [ 0, %147 ], [ 0, %166 ]
  %173 = phi i64 [ %107, %103 ], [ 0, %65 ], [ 0, %63 ], [ 0, %141 ], [ 0, %139 ], [ 0, %44 ], [ 0, %118 ], [ 0, %112 ], [ 0, %10 ], [ 0, %90 ], [ %72, %71 ], [ %72, %88 ], [ 0, %93 ], [ 0, %166 ], [ %148, %147 ], [ %148, %164 ]
  %174 = phi i64 [ %109, %103 ], [ 4294967296, %65 ], [ 0, %63 ], [ 4294967296, %141 ], [ 0, %139 ], [ 0, %44 ], [ 0, %118 ], [ 0, %112 ], [ 0, %10 ], [ 4294967296, %88 ], [ 4294967296, %71 ], [ 4294967296, %90 ], [ 0, %93 ], [ 4294967296, %164 ], [ 4294967296, %147 ], [ 4294967296, %166 ]
  %175 = phi i32 [ %106, %103 ], [ %17, %65 ], [ %17, %63 ], [ 1, %141 ], [ %113, %139 ], [ %17, %44 ], [ %113, %118 ], [ %113, %112 ], [ %11, %10 ], [ %17, %88 ], [ %17, %71 ], [ %17, %90 ], [ %96, %93 ], [ %113, %164 ], [ %113, %147 ], [ %113, %166 ]
  %176 = or i64 %174, %170
  %177 = zext i32 %175 to i64
  %178 = or i64 %176, %177
  %179 = insertvalue { i64, i64 } undef, i64 %178, 0
  %180 = or i64 %172, %171
  %181 = and i64 %173, 4294967295
  %182 = or i64 %180, %181
  %183 = insertvalue { i64, i64 } %179, i64 %182, 1
  ret { i64, i64 } %183
}

declare i32 @_ZNK5blink21LazyLineBreakIterator20NextBreakOpportunityEjj(%"class.blink::LazyLineBreakIterator"*, i32, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::ShapeResultView"* @_ZN5blink18ShapingLineBreaker9ShapeLineEjNS_10LayoutUnitEjPNS0_6ResultE(%"class.blink::ShapingLineBreaker"* nocapture readonly, i32, i32, i32, %"struct.blink::ShapingLineBreaker::Result"* nocapture) local_unnamed_addr #0 align 2 {
  %6 = alloca { i64, i64 }, align 8
  %7 = alloca [3 x %"struct.blink::ShapeResultView::Segment"], align 16
  %8 = getelementptr inbounds %"class.blink::ShapingLineBreaker", %"class.blink::ShapingLineBreaker"* %0, i64 0, i32 2, i32 0
  %9 = load %"class.blink::ShapeResult"*, %"class.blink::ShapeResult"** %8, align 8
  %10 = getelementptr inbounds %"class.blink::ShapeResult", %"class.blink::ShapeResult"* %9, i64 0, i32 6
  %11 = load i32, i32* %10, align 8
  %12 = getelementptr inbounds %"class.blink::ShapeResult", %"class.blink::ShapeResult"* %9, i64 0, i32 7
  %13 = load i32, i32* %12, align 4
  %14 = add i32 %13, %11
  %15 = getelementptr inbounds %"struct.blink::ShapingLineBreaker::Result", %"struct.blink::ShapingLineBreaker::Result"* %4, i64 0, i32 3
  store i8 0, i8* %15, align 1
  %16 = getelementptr inbounds %"struct.blink::ShapingLineBreaker::Result", %"struct.blink::ShapingLineBreaker::Result"* %4, i64 0, i32 4
  store i8 0, i8* %16, align 2
  %17 = getelementptr inbounds %"struct.blink::ShapingLineBreaker::Result", %"struct.blink::ShapingLineBreaker::Result"* %4, i64 0, i32 2
  store i8 0, i8* %17, align 4
  %18 = getelementptr inbounds %"class.blink::ShapingLineBreaker", %"class.blink::ShapingLineBreaker"* %0, i64 0, i32 3
  %19 = load %"class.blink::LazyLineBreakIterator"*, %"class.blink::LazyLineBreakIterator"** %18, align 8
  %20 = getelementptr inbounds %"class.blink::LazyLineBreakIterator", %"class.blink::LazyLineBreakIterator"* %19, i64 0, i32 8
  %21 = load i32, i32* %20, align 8
  %22 = icmp eq i32 %21, 3
  %23 = load %"class.blink::ShapeResult"*, %"class.blink::ShapeResult"** %8, align 8
  %24 = sub i32 %1, %11
  %25 = tail call float @_ZNK5blink11ShapeResult23CachedPositionForOffsetEj(%"class.blink::ShapeResult"* %23, i32 %24) #7
  %26 = load %"class.blink::ShapeResult"*, %"class.blink::ShapeResult"** %8, align 8
  %27 = getelementptr inbounds %"class.blink::ShapeResult", %"class.blink::ShapeResult"* %26, i64 0, i32 8
  %28 = load i32, i32* %27, align 8
  %29 = and i32 %28, 536870912
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %42, label %31

31:                                               ; preds = %5
  %32 = tail call i1 @llvm.is.constant.i32(i32 %2) #7
  br i1 %32, label %33, label %37

33:                                               ; preds = %31
  %34 = sub i32 0, %2
  %35 = icmp eq i32 %34, -2147483648
  %36 = select i1 %35, i32 2147483647, i32 %34
  br label %42

37:                                               ; preds = %31
  %38 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %2) #7
  %39 = extractvalue { i32, i1 } %38, 1
  %40 = extractvalue { i32, i1 } %38, 0
  %41 = select i1 %39, i32 2147483647, i32 %40
  br label %42

42:                                               ; preds = %5, %33, %37
  %43 = phi i32 [ %2, %5 ], [ %36, %33 ], [ %41, %37 ]
  %44 = sitofp i32 %43 to float
  %45 = fmul float %44, 1.562500e-02
  %46 = fadd float %25, %45
  %47 = tail call i32 @_ZNK5blink11ShapeResult23CachedOffsetForPositionEf(%"class.blink::ShapeResult"* %26, float %46) #7
  %48 = add i32 %47, %11
  %49 = and i32 %3, 1
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %51, label %54

51:                                               ; preds = %42
  %52 = load %"class.blink::ShapeResult"*, %"class.blink::ShapeResult"** %8, align 8
  %53 = tail call i32 @_ZNK5blink11ShapeResult27CachedNextSafeToBreakOffsetEj(%"class.blink::ShapeResult"* %52, i32 %1) #7
  br label %54

54:                                               ; preds = %42, %51
  %55 = phi i32 [ %53, %51 ], [ %1, %42 ]
  %56 = icmp ult i32 %48, %14
  br i1 %56, label %90, label %57

57:                                               ; preds = %54
  %58 = getelementptr inbounds %"struct.blink::ShapingLineBreaker::Result", %"struct.blink::ShapingLineBreaker::Result"* %4, i64 0, i32 1
  store i32 %14, i32* %58, align 4
  %59 = add i32 %14, -1
  %60 = getelementptr inbounds %"class.blink::LazyLineBreakIterator", %"class.blink::LazyLineBreakIterator"* %19, i64 0, i32 0, i32 0, i32 0
  %61 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %60, align 8
  %62 = icmp eq %"class.WTF::StringImpl"* %61, null
  br i1 %62, label %84, label %63

63:                                               ; preds = %57
  %64 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %61, i64 0, i32 1
  %65 = load i32, i32* %64, align 4
  %66 = icmp ugt i32 %65, %59
  br i1 %66, label %67, label %84

67:                                               ; preds = %63
  %68 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %61, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %69 = load atomic i32, i32* %68 monotonic, align 4
  %70 = and i32 %69, 1
  %71 = icmp eq i32 %70, 0
  %72 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %61, i64 1
  br i1 %71, label %79, label %73

73:                                               ; preds = %67
  %74 = bitcast %"class.WTF::StringImpl"* %72 to i8*
  %75 = zext i32 %59 to i64
  %76 = getelementptr inbounds i8, i8* %74, i64 %75
  %77 = load i8, i8* %76, align 1
  %78 = zext i8 %77 to i16
  br label %84

79:                                               ; preds = %67
  %80 = bitcast %"class.WTF::StringImpl"* %72 to i16*
  %81 = zext i32 %59 to i64
  %82 = getelementptr inbounds i16, i16* %80, i64 %81
  %83 = load i16, i16* %82, align 2
  br label %84

84:                                               ; preds = %57, %63, %73, %79
  %85 = phi i16 [ 0, %63 ], [ 0, %57 ], [ %78, %73 ], [ %83, %79 ]
  %86 = icmp eq i16 %85, 173
  %87 = zext i1 %86 to i8
  store i8 %87, i8* %16, align 2
  %88 = tail call %"class.blink::ShapeResultView"* @_ZN5blink18ShapingLineBreaker10ShapeToEndEjjjj(%"class.blink::ShapingLineBreaker"* %0, i32 %1, i32 %55, i32 %11, i32 %14)
  %89 = ptrtoint %"class.blink::ShapeResultView"* %88 to i64
  br label %674

90:                                               ; preds = %54
  %91 = icmp ult i32 %48, %1
  %92 = select i1 %91, i32 %1, i32 %48
  %93 = bitcast { i64, i64 }* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %93)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %93, i8 -86, i64 16, i1 false)
  %94 = getelementptr inbounds %"class.blink::LazyLineBreakIterator", %"class.blink::LazyLineBreakIterator"* %19, i64 0, i32 0, i32 0, i32 0
  %95 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %94, align 8
  %96 = icmp eq %"class.WTF::StringImpl"* %95, null
  br i1 %96, label %121, label %97

97:                                               ; preds = %90
  %98 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %95, i64 0, i32 1
  %99 = load i32, i32* %98, align 4
  %100 = icmp ugt i32 %99, %92
  br i1 %100, label %101, label %121

101:                                              ; preds = %97
  %102 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %95, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %103 = load atomic i32, i32* %102 monotonic, align 4
  %104 = and i32 %103, 1
  %105 = icmp eq i32 %104, 0
  %106 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %95, i64 1
  br i1 %105, label %113, label %107

107:                                              ; preds = %101
  %108 = bitcast %"class.WTF::StringImpl"* %106 to i8*
  %109 = zext i32 %92 to i64
  %110 = getelementptr inbounds i8, i8* %108, i64 %109
  %111 = load i8, i8* %110, align 1
  %112 = zext i8 %111 to i16
  br label %118

113:                                              ; preds = %101
  %114 = bitcast %"class.WTF::StringImpl"* %106 to i16*
  %115 = zext i32 %92 to i64
  %116 = getelementptr inbounds i16, i16* %114, i64 %115
  %117 = load i16, i16* %116, align 2
  br label %118

118:                                              ; preds = %107, %113
  %119 = phi i16 [ %112, %107 ], [ %117, %113 ]
  switch i16 %119, label %121 [
    i16 32, label %120
    i16 9, label %120
    i16 10, label %120
    i16 12288, label %120
  ]

120:                                              ; preds = %118, %118, %118, %118
  br i1 %22, label %121, label %123

121:                                              ; preds = %90, %97, %118, %120
  %122 = tail call { i64, i64 } @_ZNK5blink18ShapingLineBreaker24PreviousBreakOpportunityEjj(%"class.blink::ShapingLineBreaker"* %0, i32 %92, i32 %1)
  br label %128

123:                                              ; preds = %120
  %124 = add i32 %1, 1
  %125 = icmp ult i32 %92, %124
  %126 = select i1 %125, i32 %124, i32 %92
  %127 = tail call { i64, i64 } @_ZNK5blink18ShapingLineBreaker20NextBreakOpportunityEjjj(%"class.blink::ShapingLineBreaker"* %0, i32 %126, i32 %1, i32 %14)
  br label %128

128:                                              ; preds = %123, %121
  %129 = phi { i64, i64 } [ %127, %123 ], [ %122, %121 ]
  %130 = extractvalue { i64, i64 } %129, 0
  %131 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i64 0, i32 0
  store i64 %130, i64* %131, align 8
  %132 = extractvalue { i64, i64 } %129, 1
  %133 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i64 0, i32 1
  store i64 %132, i64* %133, align 8
  %134 = lshr i64 %132, 32
  %135 = trunc i64 %134 to i8
  %136 = trunc i64 %130 to i32
  %137 = bitcast { i64, i64 }* %6 to i32*
  %138 = icmp ule i32 %136, %1
  %139 = zext i1 %138 to i8
  store i8 %139, i8* %15, align 1
  br i1 %138, label %140, label %157

140:                                              ; preds = %128
  %141 = and i32 %3, 4
  %142 = icmp eq i32 %141, 0
  br i1 %142, label %143, label %672

143:                                              ; preds = %140
  %144 = add i32 %1, 1
  %145 = icmp ult i32 %92, %144
  %146 = select i1 %145, i32 %144, i32 %92
  %147 = tail call { i64, i64 } @_ZNK5blink18ShapingLineBreaker20NextBreakOpportunityEjjj(%"class.blink::ShapingLineBreaker"* %0, i32 %146, i32 %1, i32 %14)
  %148 = extractvalue { i64, i64 } %147, 0
  %149 = extractvalue { i64, i64 } %147, 1
  %150 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i64 0, i32 0
  store i64 %148, i64* %150, align 8
  %151 = trunc i64 %149 to i40
  %152 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i64 0, i32 1
  %153 = bitcast i64* %152 to i40*
  store i40 %151, i40* %153, align 8
  %154 = trunc i64 %148 to i32
  %155 = lshr i40 %151, 32
  %156 = trunc i40 %155 to i8
  br label %157

157:                                              ; preds = %143, %128
  %158 = phi i32 [ %154, %143 ], [ %136, %128 ]
  %159 = phi i8 [ %156, %143 ], [ %135, %128 ]
  %160 = phi i64 [ %149, %143 ], [ %132, %128 ]
  %161 = phi i64 [ %148, %143 ], [ %130, %128 ]
  %162 = lshr i64 %161, 32
  %163 = trunc i64 %162 to i8
  %164 = trunc i64 %160 to i32
  br i1 %22, label %206, label %165

165:                                              ; preds = %157
  %166 = getelementptr inbounds i8, i8* %93, i64 4
  %167 = icmp eq i8 %163, 0
  %168 = icmp ugt i32 %164, %1
  %169 = or i1 %167, %168
  br i1 %169, label %206, label %170

170:                                              ; preds = %165
  %171 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %94, align 8
  %172 = icmp eq %"class.WTF::StringImpl"* %171, null
  br i1 %172, label %206, label %173

173:                                              ; preds = %170
  %174 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %171, i64 0, i32 1
  %175 = load i32, i32* %174, align 4
  %176 = icmp ugt i32 %175, %92
  br i1 %176, label %177, label %206

177:                                              ; preds = %173
  %178 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %171, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %179 = load atomic i32, i32* %178 monotonic, align 4
  %180 = and i32 %179, 1
  %181 = icmp eq i32 %180, 0
  %182 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %171, i64 1
  br i1 %181, label %189, label %183

183:                                              ; preds = %177
  %184 = bitcast %"class.WTF::StringImpl"* %182 to i8*
  %185 = zext i32 %92 to i64
  %186 = getelementptr inbounds i8, i8* %184, i64 %185
  %187 = load i8, i8* %186, align 1
  %188 = zext i8 %187 to i16
  br label %194

189:                                              ; preds = %177
  %190 = bitcast %"class.WTF::StringImpl"* %182 to i16*
  %191 = zext i32 %92 to i64
  %192 = getelementptr inbounds i16, i16* %190, i64 %191
  %193 = load i16, i16* %192, align 2
  br label %194

194:                                              ; preds = %183, %189
  %195 = phi i16 [ %188, %183 ], [ %193, %189 ]
  switch i16 %195, label %206 [
    i16 32, label %196
    i16 9, label %196
    i16 10, label %196
    i16 12288, label %196
  ]

196:                                              ; preds = %194, %194, %194, %194
  store i8 1, i8* %17, align 4
  %197 = icmp ult i32 %158, %14
  %198 = select i1 %197, i32 %158, i32 %14
  %199 = getelementptr inbounds %"struct.blink::ShapingLineBreaker::Result", %"struct.blink::ShapingLineBreaker::Result"* %4, i64 0, i32 1
  store i32 %198, i32* %199, align 4
  %200 = bitcast %"struct.blink::ShapingLineBreaker::Result"* %4 to i64*
  %201 = bitcast i8* %166 to i64*
  %202 = load i64, i64* %201, align 4
  store i64 %202, i64* %200, align 4
  store i8 0, i8* %16, align 2
  %203 = load %"class.blink::ShapeResult"*, %"class.blink::ShapeResult"** %8, align 8
  %204 = tail call %"class.blink::ShapeResultView"* @_ZN5blink15ShapeResultView6CreateEPKNS_11ShapeResultEjj(%"class.blink::ShapeResult"* %203, i32 %1, i32 %198) #7
  %205 = ptrtoint %"class.blink::ShapeResultView"* %204 to i64
  br label %672

206:                                              ; preds = %165, %170, %173, %194, %157
  %207 = icmp ult i32 %158, %14
  br i1 %207, label %310, label %208

208:                                              ; preds = %206
  %209 = getelementptr inbounds %"struct.blink::ShapingLineBreaker::Result", %"struct.blink::ShapingLineBreaker::Result"* %4, i64 0, i32 1
  store i32 %14, i32* %209, align 4
  %210 = add i32 %14, -1
  %211 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %94, align 8
  %212 = icmp eq %"class.WTF::StringImpl"* %211, null
  br i1 %212, label %234, label %213

213:                                              ; preds = %208
  %214 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %211, i64 0, i32 1
  %215 = load i32, i32* %214, align 4
  %216 = icmp ugt i32 %215, %210
  br i1 %216, label %217, label %234

217:                                              ; preds = %213
  %218 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %211, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %219 = load atomic i32, i32* %218 monotonic, align 4
  %220 = and i32 %219, 1
  %221 = icmp eq i32 %220, 0
  %222 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %211, i64 1
  br i1 %221, label %229, label %223

223:                                              ; preds = %217
  %224 = bitcast %"class.WTF::StringImpl"* %222 to i8*
  %225 = zext i32 %210 to i64
  %226 = getelementptr inbounds i8, i8* %224, i64 %225
  %227 = load i8, i8* %226, align 1
  %228 = zext i8 %227 to i16
  br label %234

229:                                              ; preds = %217
  %230 = bitcast %"class.WTF::StringImpl"* %222 to i16*
  %231 = zext i32 %210 to i64
  %232 = getelementptr inbounds i16, i16* %230, i64 %231
  %233 = load i16, i16* %232, align 2
  br label %234

234:                                              ; preds = %208, %213, %223, %229
  %235 = phi i16 [ 0, %213 ], [ 0, %208 ], [ %228, %223 ], [ %233, %229 ]
  %236 = icmp eq i16 %235, 173
  %237 = zext i1 %236 to i8
  store i8 %237, i8* %16, align 2
  %238 = load i8, i8* %15, align 1, !range !2
  %239 = icmp eq i8 %238, 0
  br i1 %239, label %243, label %240

240:                                              ; preds = %234
  %241 = tail call %"class.blink::ShapeResultView"* @_ZN5blink18ShapingLineBreaker10ShapeToEndEjjjj(%"class.blink::ShapingLineBreaker"* %0, i32 %1, i32 %55, i32 %11, i32 %14)
  %242 = ptrtoint %"class.blink::ShapeResultView"* %241 to i64
  br label %672

243:                                              ; preds = %234
  store i32 %14, i32* %137, align 8
  %244 = getelementptr inbounds i8, i8* %93, i64 4
  %245 = icmp ne i8 %163, 0
  %246 = icmp ult i32 %14, %164
  %247 = and i1 %245, %246
  br i1 %247, label %248, label %249

248:                                              ; preds = %243
  store i8 0, i8* %244, align 4
  br label %249

249:                                              ; preds = %243, %248
  %250 = phi i8 [ %163, %243 ], [ 0, %248 ]
  %251 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %94, align 8
  %252 = icmp eq %"class.WTF::StringImpl"* %251, null
  br i1 %252, label %310, label %253

253:                                              ; preds = %249
  %254 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %251, i64 0, i32 1
  %255 = load i32, i32* %254, align 4
  %256 = icmp ugt i32 %255, %210
  br i1 %256, label %257, label %310

257:                                              ; preds = %253
  %258 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %251, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %259 = load atomic i32, i32* %258 monotonic, align 4
  %260 = and i32 %259, 1
  %261 = icmp eq i32 %260, 0
  %262 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %251, i64 1
  br i1 %261, label %269, label %263

263:                                              ; preds = %257
  %264 = bitcast %"class.WTF::StringImpl"* %262 to i8*
  %265 = zext i32 %210 to i64
  %266 = getelementptr inbounds i8, i8* %264, i64 %265
  %267 = load i8, i8* %266, align 1
  %268 = zext i8 %267 to i16
  br label %274

269:                                              ; preds = %257
  %270 = bitcast %"class.WTF::StringImpl"* %262 to i16*
  %271 = zext i32 %210 to i64
  %272 = getelementptr inbounds i16, i16* %270, i64 %271
  %273 = load i16, i16* %272, align 2
  br label %274

274:                                              ; preds = %263, %269
  %275 = phi i16 [ %268, %263 ], [ %273, %269 ]
  switch i16 %275, label %310 [
    i16 32, label %276
    i16 9, label %276
    i16 10, label %276
    i16 12288, label %276
  ]

276:                                              ; preds = %274, %274, %274, %274
  %277 = icmp eq i32 %210, 0
  br i1 %277, label %304, label %278

278:                                              ; preds = %276
  %279 = bitcast %"class.WTF::StringImpl"* %262 to i8*
  %280 = bitcast %"class.WTF::StringImpl"* %262 to i16*
  %281 = zext i32 %210 to i64
  br label %282

282:                                              ; preds = %278, %301
  %283 = phi i64 [ %281, %278 ], [ %303, %301 ]
  %284 = trunc i64 %283 to i32
  %285 = add i32 %284, -1
  %286 = icmp ugt i32 %255, %285
  br i1 %286, label %287, label %304

287:                                              ; preds = %282
  %288 = load atomic i32, i32* %258 monotonic, align 4
  %289 = and i32 %288, 1
  %290 = icmp eq i32 %289, 0
  %291 = zext i32 %285 to i64
  br i1 %290, label %296, label %292

292:                                              ; preds = %287
  %293 = getelementptr inbounds i8, i8* %279, i64 %291
  %294 = load i8, i8* %293, align 1
  %295 = zext i8 %294 to i16
  br label %299

296:                                              ; preds = %287
  %297 = getelementptr inbounds i16, i16* %280, i64 %291
  %298 = load i16, i16* %297, align 2
  br label %299

299:                                              ; preds = %296, %292
  %300 = phi i16 [ %295, %292 ], [ %298, %296 ]
  switch i16 %300, label %304 [
    i16 32, label %301
    i16 9, label %301
    i16 10, label %301
    i16 12288, label %301
  ]

301:                                              ; preds = %299, %299, %299, %299
  %302 = icmp eq i32 %285, 0
  %303 = add nsw i64 %283, -1
  br i1 %302, label %304, label %282

304:                                              ; preds = %299, %282, %301, %276
  %305 = phi i64 [ 0, %276 ], [ %283, %299 ], [ %283, %282 ], [ 0, %301 ]
  %306 = shl i64 %305, 32
  %307 = or i64 %306, 1
  %308 = bitcast i8* %244 to i64*
  store i64 %307, i64* %308, align 4
  %309 = trunc i64 %305 to i32
  br label %310

310:                                              ; preds = %249, %253, %274, %206, %304
  %311 = phi i32 [ %14, %249 ], [ %14, %253 ], [ %14, %274 ], [ %158, %206 ], [ %14, %304 ]
  %312 = phi i32 [ %164, %249 ], [ %164, %253 ], [ %164, %274 ], [ %164, %206 ], [ %309, %304 ]
  %313 = phi i8 [ %250, %249 ], [ %250, %253 ], [ %250, %274 ], [ %163, %206 ], [ 1, %304 ]
  tail call fastcc void @_ZN5blink12_GLOBAL__N_116CheckBreakOffsetEjjj(i32 %311, i32 %1, i32 %14)
  %314 = icmp eq i32 %55, %1
  br i1 %314, label %388, label %315

315:                                              ; preds = %310
  %316 = icmp ult i32 %55, %311
  br i1 %316, label %378, label %317

317:                                              ; preds = %315
  %318 = icmp eq i8 %313, 0
  %319 = or i1 %22, %318
  br i1 %319, label %324, label %320

320:                                              ; preds = %317
  %321 = add i32 %1, 1
  %322 = icmp ult i32 %321, %312
  %323 = select i1 %322, i32 %312, i32 %321
  store i32 %323, i32* %137, align 8
  br label %324

324:                                              ; preds = %320, %317
  %325 = phi i32 [ %323, %320 ], [ %311, %317 ]
  %326 = getelementptr inbounds %"struct.blink::ShapingLineBreaker::Result", %"struct.blink::ShapingLineBreaker::Result"* %4, i64 0, i32 1
  store i32 %325, i32* %326, align 4
  %327 = icmp eq i8 %159, 0
  br i1 %327, label %328, label %357

328:                                              ; preds = %324
  %329 = add i32 %325, -1
  %330 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %94, align 8
  %331 = icmp eq %"class.WTF::StringImpl"* %330, null
  br i1 %331, label %353, label %332

332:                                              ; preds = %328
  %333 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %330, i64 0, i32 1
  %334 = load i32, i32* %333, align 4
  %335 = icmp ugt i32 %334, %329
  br i1 %335, label %336, label %353

336:                                              ; preds = %332
  %337 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %330, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %338 = load atomic i32, i32* %337 monotonic, align 4
  %339 = and i32 %338, 1
  %340 = icmp eq i32 %339, 0
  %341 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %330, i64 1
  br i1 %340, label %348, label %342

342:                                              ; preds = %336
  %343 = bitcast %"class.WTF::StringImpl"* %341 to i8*
  %344 = zext i32 %329 to i64
  %345 = getelementptr inbounds i8, i8* %343, i64 %344
  %346 = load i8, i8* %345, align 1
  %347 = zext i8 %346 to i16
  br label %353

348:                                              ; preds = %336
  %349 = bitcast %"class.WTF::StringImpl"* %341 to i16*
  %350 = zext i32 %329 to i64
  %351 = getelementptr inbounds i16, i16* %349, i64 %350
  %352 = load i16, i16* %351, align 2
  br label %353

353:                                              ; preds = %348, %342, %332, %328
  %354 = phi i16 [ 0, %332 ], [ 0, %328 ], [ %347, %342 ], [ %352, %348 ]
  %355 = icmp eq i16 %354, 173
  %356 = zext i1 %355 to i8
  br label %357

357:                                              ; preds = %353, %324
  %358 = phi i8 [ 1, %324 ], [ %356, %353 ]
  store i8 %358, i8* %16, align 2
  %359 = bitcast %"struct.blink::ShapingLineBreaker::Result"* %4 to i64*
  %360 = getelementptr inbounds i8, i8* %93, i64 4
  %361 = bitcast i8* %360 to i64*
  %362 = load i64, i64* %361, align 4
  store i64 %362, i64* %359, align 4
  tail call fastcc void @_ZN5blink12_GLOBAL__N_116CheckBreakOffsetEjjj(i32 %325, i32 %1, i32 %14)
  %363 = getelementptr inbounds %"class.blink::ShapingLineBreaker", %"class.blink::ShapingLineBreaker"* %0, i64 0, i32 0
  %364 = load %"class.blink::ShapeResult"* (i8*, i32, i32)*, %"class.blink::ShapeResult"* (i8*, i32, i32)** %363, align 8
  %365 = getelementptr inbounds %"class.blink::ShapingLineBreaker", %"class.blink::ShapingLineBreaker"* %0, i64 0, i32 1
  %366 = load i8*, i8** %365, align 8
  %367 = tail call %"class.blink::ShapeResult"* %364(i8* %366, i32 %1, i32 %325) #7
  %368 = tail call %"class.blink::ShapeResultView"* @_ZN5blink15ShapeResultView6CreateEPKNS_11ShapeResultE(%"class.blink::ShapeResult"* %367) #7
  %369 = ptrtoint %"class.blink::ShapeResultView"* %368 to i64
  %370 = icmp eq %"class.blink::ShapeResult"* %367, null
  br i1 %370, label %672, label %371

371:                                              ; preds = %357
  %372 = getelementptr inbounds %"class.blink::ShapeResult", %"class.blink::ShapeResult"* %367, i64 0, i32 0, i32 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %372) #7
  %373 = getelementptr inbounds %"class.blink::ShapeResult", %"class.blink::ShapeResult"* %367, i64 0, i32 0, i32 0, i32 0, i32 0
  %374 = load i32, i32* %373, align 4
  %375 = icmp eq i32 %374, 0
  br i1 %375, label %376, label %672

376:                                              ; preds = %371
  tail call void @_ZN5blink11ShapeResultD1Ev(%"class.blink::ShapeResult"* nonnull %367) #7
  %377 = bitcast %"class.blink::ShapeResult"* %367 to i8*
  tail call void @free(i8* %377) #7
  br label %672

378:                                              ; preds = %315
  %379 = load %"class.blink::ShapeResult"*, %"class.blink::ShapeResult"** %8, align 8
  %380 = sub i32 %55, %11
  %381 = tail call float @_ZNK5blink11ShapeResult23CachedPositionForOffsetEj(%"class.blink::ShapeResult"* %379, i32 %380) #7
  %382 = getelementptr inbounds %"class.blink::ShapingLineBreaker", %"class.blink::ShapingLineBreaker"* %0, i64 0, i32 0
  %383 = load %"class.blink::ShapeResult"* (i8*, i32, i32)*, %"class.blink::ShapeResult"* (i8*, i32, i32)** %382, align 8
  %384 = getelementptr inbounds %"class.blink::ShapingLineBreaker", %"class.blink::ShapingLineBreaker"* %0, i64 0, i32 1
  %385 = load i8*, i8** %384, align 8
  %386 = tail call %"class.blink::ShapeResult"* %383(i8* %385, i32 %1, i32 %55) #7
  %387 = ptrtoint %"class.blink::ShapeResult"* %386 to i64
  br label %388

388:                                              ; preds = %310, %378
  %389 = phi i64 [ 0, %310 ], [ %387, %378 ]
  %390 = and i32 %3, 2
  %391 = icmp eq i32 %390, 0
  br i1 %391, label %420, label %392

392:                                              ; preds = %388
  %393 = add i32 %311, -1
  %394 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %94, align 8
  %395 = icmp eq %"class.WTF::StringImpl"* %394, null
  br i1 %395, label %420, label %396

396:                                              ; preds = %392
  %397 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %394, i64 0, i32 1
  %398 = load i32, i32* %397, align 4
  %399 = icmp ugt i32 %398, %393
  br i1 %399, label %400, label %420

400:                                              ; preds = %396
  %401 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %394, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %402 = load atomic i32, i32* %401 monotonic, align 4
  %403 = and i32 %402, 1
  %404 = icmp eq i32 %403, 0
  %405 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %394, i64 1
  br i1 %404, label %412, label %406

406:                                              ; preds = %400
  %407 = bitcast %"class.WTF::StringImpl"* %405 to i8*
  %408 = zext i32 %393 to i64
  %409 = getelementptr inbounds i8, i8* %407, i64 %408
  %410 = load i8, i8* %409, align 1
  %411 = zext i8 %410 to i16
  br label %417

412:                                              ; preds = %400
  %413 = bitcast %"class.WTF::StringImpl"* %405 to i16*
  %414 = zext i32 %393 to i64
  %415 = getelementptr inbounds i16, i16* %413, i64 %414
  %416 = load i16, i16* %415, align 2
  br label %417

417:                                              ; preds = %406, %412
  %418 = phi i16 [ %411, %406 ], [ %416, %412 ]
  switch i16 %418, label %420 [
    i16 32, label %419
    i16 9, label %419
    i16 10, label %419
    i16 12288, label %419
  ]

419:                                              ; preds = %417, %417, %417, %417
  br label %420

420:                                              ; preds = %392, %396, %419, %417, %388
  %421 = phi i1 [ true, %388 ], [ false, %419 ], [ true, %417 ], [ true, %396 ], [ true, %392 ]
  %422 = icmp ne i32 %311, %14
  %423 = and i1 %421, %422
  %424 = icmp eq i8 %313, 0
  %425 = or i1 %22, %424
  br i1 %425, label %430, label %426

426:                                              ; preds = %420
  %427 = add i32 %1, 1
  %428 = icmp ult i32 %427, %312
  %429 = select i1 %428, i32 %312, i32 %427
  store i32 %429, i32* %137, align 8
  br label %430

430:                                              ; preds = %426, %420
  %431 = phi i32 [ %429, %426 ], [ %311, %420 ]
  br i1 %423, label %432, label %571

432:                                              ; preds = %430
  %433 = add i32 %1, 1
  %434 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i64 0, i32 1
  %435 = getelementptr inbounds %"class.blink::ShapingLineBreaker", %"class.blink::ShapingLineBreaker"* %0, i64 0, i32 0
  %436 = getelementptr inbounds %"class.blink::ShapingLineBreaker", %"class.blink::ShapingLineBreaker"* %0, i64 0, i32 1
  %437 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i64 0, i32 0
  %438 = bitcast i64* %434 to i40*
  %439 = icmp ult i32 %92, %433
  %440 = select i1 %439, i32 %433, i32 %92
  br label %441

441:                                              ; preds = %432, %561
  %442 = phi i32 [ %563, %561 ], [ %431, %432 ]
  %443 = phi i8 [ %562, %561 ], [ %159, %432 ]
  %444 = phi i32 [ %568, %561 ], [ %312, %432 ]
  %445 = phi i8 [ %567, %561 ], [ %313, %432 ]
  %446 = phi i64 [ %470, %561 ], [ %389, %432 ]
  %447 = icmp eq i8 %445, 0
  %448 = or i1 %22, %447
  br i1 %448, label %452, label %449

449:                                              ; preds = %441
  %450 = icmp ult i32 %433, %444
  %451 = select i1 %450, i32 %444, i32 %433
  store i32 %451, i32* %137, align 8
  br label %452

452:                                              ; preds = %449, %441
  %453 = phi i32 [ %451, %449 ], [ %442, %441 ]
  %454 = load %"class.blink::ShapeResult"*, %"class.blink::ShapeResult"** %8, align 8
  %455 = tail call i32 @_ZNK5blink11ShapeResult31CachedPreviousSafeToBreakOffsetEj(%"class.blink::ShapeResult"* %454, i32 %453) #7
  %456 = icmp ult i32 %455, %453
  br i1 %456, label %457, label %571, !prof !5

457:                                              ; preds = %452
  %458 = icmp ult i32 %455, %55
  br i1 %458, label %459, label %469, !prof !3

459:                                              ; preds = %457
  %460 = inttoptr i64 %446 to %"class.blink::ShapeResult"*
  %461 = icmp eq i64 %446, 0
  br i1 %461, label %469, label %462

462:                                              ; preds = %459
  %463 = getelementptr inbounds %"class.blink::ShapeResult", %"class.blink::ShapeResult"* %460, i64 0, i32 0, i32 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %463) #7
  %464 = getelementptr inbounds %"class.blink::ShapeResult", %"class.blink::ShapeResult"* %460, i64 0, i32 0, i32 0, i32 0, i32 0
  %465 = load i32, i32* %464, align 4
  %466 = icmp eq i32 %465, 0
  br i1 %466, label %467, label %469

467:                                              ; preds = %462
  tail call void @_ZN5blink11ShapeResultD1Ev(%"class.blink::ShapeResult"* nonnull %460) #7
  %468 = inttoptr i64 %446 to i8*
  tail call void @free(i8* %468) #7
  br label %469

469:                                              ; preds = %467, %462, %459, %457
  %470 = phi i64 [ %446, %457 ], [ 0, %459 ], [ 0, %462 ], [ 0, %467 ]
  %471 = phi i32 [ %455, %457 ], [ %1, %459 ], [ %1, %462 ], [ %1, %467 ]
  %472 = load i8, i8* %15, align 1, !range !2
  %473 = icmp eq i8 %472, 0
  br i1 %473, label %479, label %474, !prof !4

474:                                              ; preds = %469
  %475 = load %"class.blink::ShapeResult"* (i8*, i32, i32)*, %"class.blink::ShapeResult"* (i8*, i32, i32)** %435, align 8
  %476 = load i8*, i8** %436, align 8
  %477 = tail call %"class.blink::ShapeResult"* %475(i8* %476, i32 %471, i32 %453) #7
  %478 = ptrtoint %"class.blink::ShapeResult"* %477 to i64
  br label %571

479:                                              ; preds = %469
  %480 = load %"class.blink::ShapeResult"*, %"class.blink::ShapeResult"** %8, align 8
  %481 = sub i32 %471, %11
  %482 = tail call float @_ZNK5blink11ShapeResult23CachedPositionForOffsetEj(%"class.blink::ShapeResult"* %480, i32 %481) #7
  %483 = load %"class.blink::ShapeResult"* (i8*, i32, i32)*, %"class.blink::ShapeResult"* (i8*, i32, i32)** %435, align 8
  %484 = load i8*, i8** %436, align 8
  %485 = tail call %"class.blink::ShapeResult"* %483(i8* %484, i32 %471, i32 %453) #7
  %486 = getelementptr inbounds %"class.blink::ShapeResult", %"class.blink::ShapeResult"* %485, i64 0, i32 1
  %487 = load float, float* %486, align 4
  %488 = fsub float %46, %482
  %489 = fsub float -0.000000e+00, %488
  %490 = select i1 %30, float %488, float %489
  %491 = fcmp ugt float %487, %490
  br i1 %491, label %492, label %569

492:                                              ; preds = %479
  %493 = icmp eq %"class.blink::ShapeResult"* %485, null
  br i1 %493, label %501, label %494

494:                                              ; preds = %492
  %495 = getelementptr inbounds %"class.blink::ShapeResult", %"class.blink::ShapeResult"* %485, i64 0, i32 0, i32 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %495) #7
  %496 = getelementptr inbounds %"class.blink::ShapeResult", %"class.blink::ShapeResult"* %485, i64 0, i32 0, i32 0, i32 0, i32 0
  %497 = load i32, i32* %496, align 4
  %498 = icmp eq i32 %497, 0
  br i1 %498, label %499, label %501

499:                                              ; preds = %494
  tail call void @_ZN5blink11ShapeResultD1Ev(%"class.blink::ShapeResult"* nonnull %485) #7
  %500 = bitcast %"class.blink::ShapeResult"* %485 to i8*
  tail call void @free(i8* %500) #7
  br label %501

501:                                              ; preds = %492, %494, %499
  %502 = add i32 %453, -1
  %503 = tail call { i64, i64 } @_ZNK5blink18ShapingLineBreaker24PreviousBreakOpportunityEjj(%"class.blink::ShapingLineBreaker"* %0, i32 %502, i32 %1)
  %504 = extractvalue { i64, i64 } %503, 0
  %505 = extractvalue { i64, i64 } %503, 1
  store i64 %504, i64* %437, align 8
  %506 = trunc i64 %505 to i40
  store i40 %506, i40* %438, align 8
  %507 = trunc i64 %504 to i32
  %508 = icmp ugt i32 %507, %1
  %509 = lshr i40 %506, 32
  %510 = trunc i40 %509 to i8
  br i1 %508, label %561, label %511

511:                                              ; preds = %501
  store i8 1, i8* %15, align 1
  %512 = tail call { i64, i64 } @_ZNK5blink18ShapingLineBreaker24PreviousBreakOpportunityEjj(%"class.blink::ShapingLineBreaker"* %0, i32 %92, i32 %1)
  %513 = extractvalue { i64, i64 } %512, 0
  %514 = extractvalue { i64, i64 } %512, 1
  store i64 %513, i64* %437, align 8
  %515 = trunc i64 %514 to i40
  store i40 %515, i40* %438, align 8
  %516 = trunc i64 %513 to i32
  %517 = icmp ugt i32 %516, %1
  %518 = lshr i40 %515, 32
  %519 = trunc i40 %518 to i8
  br i1 %517, label %561, label %520

520:                                              ; preds = %511
  %521 = tail call { i64, i64 } @_ZNK5blink18ShapingLineBreaker20NextBreakOpportunityEjjj(%"class.blink::ShapingLineBreaker"* %0, i32 %440, i32 %1, i32 %14)
  %522 = extractvalue { i64, i64 } %521, 0
  %523 = extractvalue { i64, i64 } %521, 1
  store i64 %522, i64* %437, align 8
  %524 = trunc i64 %523 to i40
  store i40 %524, i40* %438, align 8
  %525 = trunc i64 %522 to i32
  %526 = icmp ugt i32 %14, %525
  %527 = lshr i40 %524, 32
  %528 = trunc i40 %527 to i8
  br i1 %526, label %561, label %529

529:                                              ; preds = %520
  %530 = getelementptr inbounds %"struct.blink::ShapingLineBreaker::Result", %"struct.blink::ShapingLineBreaker::Result"* %4, i64 0, i32 1
  store i32 %14, i32* %530, align 4
  %531 = add i32 %14, -1
  %532 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %94, align 8
  %533 = icmp eq %"class.WTF::StringImpl"* %532, null
  br i1 %533, label %555, label %534

534:                                              ; preds = %529
  %535 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %532, i64 0, i32 1
  %536 = load i32, i32* %535, align 4
  %537 = icmp ugt i32 %536, %531
  br i1 %537, label %538, label %555

538:                                              ; preds = %534
  %539 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %532, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %540 = load atomic i32, i32* %539 monotonic, align 4
  %541 = and i32 %540, 1
  %542 = icmp eq i32 %541, 0
  %543 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %532, i64 1
  br i1 %542, label %550, label %544

544:                                              ; preds = %538
  %545 = bitcast %"class.WTF::StringImpl"* %543 to i8*
  %546 = zext i32 %531 to i64
  %547 = getelementptr inbounds i8, i8* %545, i64 %546
  %548 = load i8, i8* %547, align 1
  %549 = zext i8 %548 to i16
  br label %555

550:                                              ; preds = %538
  %551 = bitcast %"class.WTF::StringImpl"* %543 to i16*
  %552 = zext i32 %531 to i64
  %553 = getelementptr inbounds i16, i16* %551, i64 %552
  %554 = load i16, i16* %553, align 2
  br label %555

555:                                              ; preds = %529, %534, %544, %550
  %556 = phi i16 [ 0, %534 ], [ 0, %529 ], [ %549, %544 ], [ %554, %550 ]
  %557 = icmp eq i16 %556, 173
  %558 = zext i1 %557 to i8
  store i8 %558, i8* %16, align 2
  %559 = tail call %"class.blink::ShapeResultView"* @_ZN5blink18ShapingLineBreaker10ShapeToEndEjjjj(%"class.blink::ShapingLineBreaker"* %0, i32 %1, i32 %55, i32 %11, i32 %14)
  %560 = ptrtoint %"class.blink::ShapeResultView"* %559 to i64
  br label %660

561:                                              ; preds = %511, %520, %501
  %562 = phi i8 [ %519, %511 ], [ %528, %520 ], [ %510, %501 ]
  %563 = phi i32 [ %516, %511 ], [ %525, %520 ], [ %507, %501 ]
  %564 = phi i64 [ %514, %511 ], [ %523, %520 ], [ %505, %501 ]
  %565 = phi i64 [ %513, %511 ], [ %522, %520 ], [ %504, %501 ]
  %566 = lshr i64 %565, 32
  %567 = trunc i64 %566 to i8
  %568 = trunc i64 %564 to i32
  br label %441

569:                                              ; preds = %479
  %570 = ptrtoint %"class.blink::ShapeResult"* %485 to i64
  br label %571

571:                                              ; preds = %452, %569, %474, %430
  %572 = phi i8 [ %159, %430 ], [ %443, %474 ], [ %443, %569 ], [ %443, %452 ]
  %573 = phi i32 [ %431, %430 ], [ %453, %474 ], [ %453, %569 ], [ %453, %452 ]
  %574 = phi i64 [ 0, %430 ], [ %478, %474 ], [ %570, %569 ], [ 0, %452 ]
  %575 = phi i64 [ %389, %430 ], [ %470, %474 ], [ %470, %569 ], [ %446, %452 ]
  %576 = phi i32 [ %431, %430 ], [ %471, %474 ], [ %471, %569 ], [ %455, %452 ]
  tail call fastcc void @_ZN5blink12_GLOBAL__N_116CheckBreakOffsetEjjj(i32 %573, i32 %1, i32 %14)
  %577 = bitcast [3 x %"struct.blink::ShapeResultView::Segment"]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %577) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %577, i8 -86, i64 72, i1 false)
  %578 = icmp eq i64 %575, 0
  br i1 %578, label %585, label %579

579:                                              ; preds = %571
  %580 = inttoptr i64 %575 to %"class.blink::ShapeResult"*
  %581 = getelementptr inbounds [3 x %"struct.blink::ShapeResultView::Segment"], [3 x %"struct.blink::ShapeResultView::Segment"]* %7, i64 0, i64 0, i32 0
  store %"class.blink::ShapeResult"* %580, %"class.blink::ShapeResult"** %581, align 16
  %582 = getelementptr inbounds [3 x %"struct.blink::ShapeResultView::Segment"], [3 x %"struct.blink::ShapeResultView::Segment"]* %7, i64 0, i64 0, i32 1
  store %"class.blink::ShapeResultView"* null, %"class.blink::ShapeResultView"** %582, align 8
  %583 = getelementptr inbounds [3 x %"struct.blink::ShapeResultView::Segment"], [3 x %"struct.blink::ShapeResultView::Segment"]* %7, i64 0, i64 0, i32 2
  store i32 0, i32* %583, align 16
  %584 = getelementptr inbounds [3 x %"struct.blink::ShapeResultView::Segment"], [3 x %"struct.blink::ShapeResultView::Segment"]* %7, i64 0, i64 0, i32 3
  store i32 -1, i32* %584, align 4
  br label %585

585:                                              ; preds = %571, %579
  %586 = phi i32 [ 1, %579 ], [ 0, %571 ]
  %587 = icmp ugt i32 %576, %55
  br i1 %587, label %588, label %598

588:                                              ; preds = %585
  %589 = bitcast %"class.blink::ShapeResult"** %8 to i64*
  %590 = load i64, i64* %589, align 8
  %591 = add nuw nsw i32 %586, 1
  %592 = zext i32 %586 to i64
  %593 = getelementptr inbounds [3 x %"struct.blink::ShapeResultView::Segment"], [3 x %"struct.blink::ShapeResultView::Segment"]* %7, i64 0, i64 %592
  %594 = bitcast %"struct.blink::ShapeResultView::Segment"* %593 to i64*
  store i64 %590, i64* %594, align 8
  %595 = getelementptr inbounds [3 x %"struct.blink::ShapeResultView::Segment"], [3 x %"struct.blink::ShapeResultView::Segment"]* %7, i64 0, i64 %592, i32 1
  store %"class.blink::ShapeResultView"* null, %"class.blink::ShapeResultView"** %595, align 8
  %596 = getelementptr inbounds [3 x %"struct.blink::ShapeResultView::Segment"], [3 x %"struct.blink::ShapeResultView::Segment"]* %7, i64 0, i64 %592, i32 2
  store i32 %55, i32* %596, align 8
  %597 = getelementptr inbounds [3 x %"struct.blink::ShapeResultView::Segment"], [3 x %"struct.blink::ShapeResultView::Segment"]* %7, i64 0, i64 %592, i32 3
  store i32 %576, i32* %597, align 4
  br label %598

598:                                              ; preds = %588, %585
  %599 = phi i32 [ %591, %588 ], [ %586, %585 ]
  %600 = icmp eq i64 %574, 0
  br i1 %600, label %609, label %601

601:                                              ; preds = %598
  %602 = inttoptr i64 %574 to %"class.blink::ShapeResult"*
  %603 = add nuw nsw i32 %599, 1
  %604 = zext i32 %599 to i64
  %605 = getelementptr inbounds [3 x %"struct.blink::ShapeResultView::Segment"], [3 x %"struct.blink::ShapeResultView::Segment"]* %7, i64 0, i64 %604, i32 0
  store %"class.blink::ShapeResult"* %602, %"class.blink::ShapeResult"** %605, align 8
  %606 = getelementptr inbounds [3 x %"struct.blink::ShapeResultView::Segment"], [3 x %"struct.blink::ShapeResultView::Segment"]* %7, i64 0, i64 %604, i32 1
  store %"class.blink::ShapeResultView"* null, %"class.blink::ShapeResultView"** %606, align 8
  %607 = getelementptr inbounds [3 x %"struct.blink::ShapeResultView::Segment"], [3 x %"struct.blink::ShapeResultView::Segment"]* %7, i64 0, i64 %604, i32 2
  store i32 %576, i32* %607, align 8
  %608 = getelementptr inbounds [3 x %"struct.blink::ShapeResultView::Segment"], [3 x %"struct.blink::ShapeResultView::Segment"]* %7, i64 0, i64 %604, i32 3
  store i32 -1, i32* %608, align 4
  br label %609

609:                                              ; preds = %598, %601
  %610 = phi i32 [ %603, %601 ], [ %599, %598 ]
  %611 = getelementptr inbounds [3 x %"struct.blink::ShapeResultView::Segment"], [3 x %"struct.blink::ShapeResultView::Segment"]* %7, i64 0, i64 0
  %612 = zext i32 %610 to i64
  %613 = call %"class.blink::ShapeResultView"* @_ZN5blink15ShapeResultView6CreateEPKNS0_7SegmentEm(%"struct.blink::ShapeResultView::Segment"* nonnull %611, i64 %612) #7
  %614 = ptrtoint %"class.blink::ShapeResultView"* %613 to i64
  %615 = getelementptr inbounds %"struct.blink::ShapingLineBreaker::Result", %"struct.blink::ShapingLineBreaker::Result"* %4, i64 0, i32 1
  store i32 %573, i32* %615, align 4
  %616 = icmp eq i8 %572, 0
  br i1 %616, label %617, label %646

617:                                              ; preds = %609
  %618 = add i32 %573, -1
  %619 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %94, align 8
  %620 = icmp eq %"class.WTF::StringImpl"* %619, null
  br i1 %620, label %642, label %621

621:                                              ; preds = %617
  %622 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %619, i64 0, i32 1
  %623 = load i32, i32* %622, align 4
  %624 = icmp ugt i32 %623, %618
  br i1 %624, label %625, label %642

625:                                              ; preds = %621
  %626 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %619, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %627 = load atomic i32, i32* %626 monotonic, align 4
  %628 = and i32 %627, 1
  %629 = icmp eq i32 %628, 0
  %630 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %619, i64 1
  br i1 %629, label %637, label %631

631:                                              ; preds = %625
  %632 = bitcast %"class.WTF::StringImpl"* %630 to i8*
  %633 = zext i32 %618 to i64
  %634 = getelementptr inbounds i8, i8* %632, i64 %633
  %635 = load i8, i8* %634, align 1
  %636 = zext i8 %635 to i16
  br label %642

637:                                              ; preds = %625
  %638 = bitcast %"class.WTF::StringImpl"* %630 to i16*
  %639 = zext i32 %618 to i64
  %640 = getelementptr inbounds i16, i16* %638, i64 %639
  %641 = load i16, i16* %640, align 2
  br label %642

642:                                              ; preds = %637, %631, %621, %617
  %643 = phi i16 [ 0, %621 ], [ 0, %617 ], [ %636, %631 ], [ %641, %637 ]
  %644 = icmp eq i16 %643, 173
  %645 = zext i1 %644 to i8
  br label %646

646:                                              ; preds = %609, %642
  %647 = phi i8 [ 1, %609 ], [ %645, %642 ]
  store i8 %647, i8* %16, align 2
  %648 = bitcast %"struct.blink::ShapingLineBreaker::Result"* %4 to i64*
  %649 = getelementptr inbounds i8, i8* %93, i64 4
  %650 = bitcast i8* %649 to i64*
  %651 = load i64, i64* %650, align 4
  store i64 %651, i64* %648, align 4
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %577) #7
  %652 = inttoptr i64 %574 to %"class.blink::ShapeResult"*
  br i1 %600, label %660, label %653

653:                                              ; preds = %646
  %654 = getelementptr inbounds %"class.blink::ShapeResult", %"class.blink::ShapeResult"* %652, i64 0, i32 0, i32 0, i32 0
  call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %654) #7
  %655 = getelementptr inbounds %"class.blink::ShapeResult", %"class.blink::ShapeResult"* %652, i64 0, i32 0, i32 0, i32 0, i32 0
  %656 = load i32, i32* %655, align 4
  %657 = icmp eq i32 %656, 0
  br i1 %657, label %658, label %660

658:                                              ; preds = %653
  call void @_ZN5blink11ShapeResultD1Ev(%"class.blink::ShapeResult"* nonnull %652) #7
  %659 = inttoptr i64 %574 to i8*
  call void @free(i8* %659) #7
  br label %660

660:                                              ; preds = %658, %653, %646, %555
  %661 = phi i64 [ %470, %555 ], [ %575, %646 ], [ %575, %653 ], [ %575, %658 ]
  %662 = phi i64 [ %560, %555 ], [ %614, %646 ], [ %614, %653 ], [ %614, %658 ]
  %663 = inttoptr i64 %661 to %"class.blink::ShapeResult"*
  %664 = icmp eq i64 %661, 0
  br i1 %664, label %672, label %665

665:                                              ; preds = %660
  %666 = getelementptr inbounds %"class.blink::ShapeResult", %"class.blink::ShapeResult"* %663, i64 0, i32 0, i32 0, i32 0
  call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %666) #7
  %667 = getelementptr inbounds %"class.blink::ShapeResult", %"class.blink::ShapeResult"* %663, i64 0, i32 0, i32 0, i32 0, i32 0
  %668 = load i32, i32* %667, align 4
  %669 = icmp eq i32 %668, 0
  br i1 %669, label %670, label %672

670:                                              ; preds = %665
  call void @_ZN5blink11ShapeResultD1Ev(%"class.blink::ShapeResult"* nonnull %663) #7
  %671 = inttoptr i64 %661 to i8*
  call void @free(i8* %671) #7
  br label %672

672:                                              ; preds = %376, %371, %357, %670, %665, %660, %140, %240, %196
  %673 = phi i64 [ %242, %240 ], [ %205, %196 ], [ 0, %140 ], [ %662, %660 ], [ %662, %665 ], [ %662, %670 ], [ %369, %357 ], [ %369, %371 ], [ %369, %376 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %93)
  br label %674

674:                                              ; preds = %672, %84
  %675 = phi i64 [ %673, %672 ], [ %89, %84 ]
  %676 = inttoptr i64 %675 to %"class.blink::ShapeResultView"*
  ret %"class.blink::ShapeResultView"* %676
}

declare float @_ZNK5blink11ShapeResult23CachedPositionForOffsetEj(%"class.blink::ShapeResult"*, i32) local_unnamed_addr #1

declare i32 @_ZNK5blink11ShapeResult23CachedOffsetForPositionEf(%"class.blink::ShapeResult"*, float) local_unnamed_addr #1

declare i32 @_ZNK5blink11ShapeResult27CachedNextSafeToBreakOffsetEj(%"class.blink::ShapeResult"*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::ShapeResultView"* @_ZN5blink18ShapingLineBreaker10ShapeToEndEjjjj(%"class.blink::ShapingLineBreaker"* nocapture readonly, i32, i32, i32, i32) local_unnamed_addr #0 align 2 {
  %6 = alloca [2 x %"struct.blink::ShapeResultView::Segment"], align 16
  %7 = icmp eq i32 %1, %3
  br i1 %7, label %8, label %13

8:                                                ; preds = %5
  %9 = getelementptr inbounds %"class.blink::ShapingLineBreaker", %"class.blink::ShapingLineBreaker"* %0, i64 0, i32 2, i32 0
  %10 = load %"class.blink::ShapeResult"*, %"class.blink::ShapeResult"** %9, align 8
  %11 = tail call %"class.blink::ShapeResultView"* @_ZN5blink15ShapeResultView6CreateEPKNS_11ShapeResultE(%"class.blink::ShapeResult"* %10) #7
  %12 = ptrtoint %"class.blink::ShapeResultView"* %11 to i64
  br label %64

13:                                               ; preds = %5
  %14 = icmp eq i32 %1, %2
  br i1 %14, label %15, label %20

15:                                               ; preds = %13
  %16 = getelementptr inbounds %"class.blink::ShapingLineBreaker", %"class.blink::ShapingLineBreaker"* %0, i64 0, i32 2, i32 0
  %17 = load %"class.blink::ShapeResult"*, %"class.blink::ShapeResult"** %16, align 8
  %18 = tail call %"class.blink::ShapeResultView"* @_ZN5blink15ShapeResultView6CreateEPKNS_11ShapeResultEjj(%"class.blink::ShapeResult"* %17, i32 %1, i32 %4) #7
  %19 = ptrtoint %"class.blink::ShapeResultView"* %18 to i64
  br label %64

20:                                               ; preds = %13
  %21 = icmp ult i32 %2, %4
  %22 = getelementptr inbounds %"class.blink::ShapingLineBreaker", %"class.blink::ShapingLineBreaker"* %0, i64 0, i32 0
  %23 = load %"class.blink::ShapeResult"* (i8*, i32, i32)*, %"class.blink::ShapeResult"* (i8*, i32, i32)** %22, align 8
  %24 = getelementptr inbounds %"class.blink::ShapingLineBreaker", %"class.blink::ShapingLineBreaker"* %0, i64 0, i32 1
  %25 = load i8*, i8** %24, align 8
  br i1 %21, label %38, label %26

26:                                               ; preds = %20
  %27 = tail call %"class.blink::ShapeResult"* %23(i8* %25, i32 %1, i32 %4) #7
  %28 = tail call %"class.blink::ShapeResultView"* @_ZN5blink15ShapeResultView6CreateEPKNS_11ShapeResultE(%"class.blink::ShapeResult"* %27) #7
  %29 = ptrtoint %"class.blink::ShapeResultView"* %28 to i64
  %30 = icmp eq %"class.blink::ShapeResult"* %27, null
  br i1 %30, label %64, label %31

31:                                               ; preds = %26
  %32 = getelementptr inbounds %"class.blink::ShapeResult", %"class.blink::ShapeResult"* %27, i64 0, i32 0, i32 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %32) #7
  %33 = getelementptr inbounds %"class.blink::ShapeResult", %"class.blink::ShapeResult"* %27, i64 0, i32 0, i32 0, i32 0, i32 0
  %34 = load i32, i32* %33, align 4
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %36, label %64

36:                                               ; preds = %31
  tail call void @_ZN5blink11ShapeResultD1Ev(%"class.blink::ShapeResult"* nonnull %27) #7
  %37 = bitcast %"class.blink::ShapeResult"* %27 to i8*
  tail call void @free(i8* %37) #7
  br label %64

38:                                               ; preds = %20
  %39 = tail call %"class.blink::ShapeResult"* %23(i8* %25, i32 %1, i32 %2) #7
  %40 = bitcast [2 x %"struct.blink::ShapeResultView::Segment"]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %40) #7
  %41 = getelementptr inbounds [2 x %"struct.blink::ShapeResultView::Segment"], [2 x %"struct.blink::ShapeResultView::Segment"]* %6, i64 0, i64 0
  %42 = getelementptr inbounds [2 x %"struct.blink::ShapeResultView::Segment"], [2 x %"struct.blink::ShapeResultView::Segment"]* %6, i64 0, i64 0, i32 0
  store %"class.blink::ShapeResult"* %39, %"class.blink::ShapeResult"** %42, align 16
  %43 = getelementptr inbounds [2 x %"struct.blink::ShapeResultView::Segment"], [2 x %"struct.blink::ShapeResultView::Segment"]* %6, i64 0, i64 0, i32 1
  store %"class.blink::ShapeResultView"* null, %"class.blink::ShapeResultView"** %43, align 8
  %44 = getelementptr inbounds [2 x %"struct.blink::ShapeResultView::Segment"], [2 x %"struct.blink::ShapeResultView::Segment"]* %6, i64 0, i64 0, i32 2
  store i32 0, i32* %44, align 16
  %45 = getelementptr inbounds [2 x %"struct.blink::ShapeResultView::Segment"], [2 x %"struct.blink::ShapeResultView::Segment"]* %6, i64 0, i64 0, i32 3
  store i32 -1, i32* %45, align 4
  %46 = getelementptr inbounds [2 x %"struct.blink::ShapeResultView::Segment"], [2 x %"struct.blink::ShapeResultView::Segment"]* %6, i64 0, i64 1
  %47 = getelementptr inbounds %"class.blink::ShapingLineBreaker", %"class.blink::ShapingLineBreaker"* %0, i64 0, i32 2, i32 0
  %48 = bitcast %"class.blink::ShapeResult"** %47 to i64*
  %49 = load i64, i64* %48, align 8
  %50 = bitcast %"struct.blink::ShapeResultView::Segment"* %46 to i64*
  store i64 %49, i64* %50, align 8
  %51 = getelementptr inbounds [2 x %"struct.blink::ShapeResultView::Segment"], [2 x %"struct.blink::ShapeResultView::Segment"]* %6, i64 0, i64 1, i32 1
  store %"class.blink::ShapeResultView"* null, %"class.blink::ShapeResultView"** %51, align 8
  %52 = getelementptr inbounds [2 x %"struct.blink::ShapeResultView::Segment"], [2 x %"struct.blink::ShapeResultView::Segment"]* %6, i64 0, i64 1, i32 2
  store i32 %2, i32* %52, align 8
  %53 = getelementptr inbounds [2 x %"struct.blink::ShapeResultView::Segment"], [2 x %"struct.blink::ShapeResultView::Segment"]* %6, i64 0, i64 1, i32 3
  store i32 %4, i32* %53, align 4
  %54 = call %"class.blink::ShapeResultView"* @_ZN5blink15ShapeResultView6CreateEPKNS0_7SegmentEm(%"struct.blink::ShapeResultView::Segment"* nonnull %41, i64 2) #7
  %55 = ptrtoint %"class.blink::ShapeResultView"* %54 to i64
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %40) #7
  %56 = icmp eq %"class.blink::ShapeResult"* %39, null
  br i1 %56, label %64, label %57

57:                                               ; preds = %38
  %58 = getelementptr inbounds %"class.blink::ShapeResult", %"class.blink::ShapeResult"* %39, i64 0, i32 0, i32 0, i32 0
  call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %58) #7
  %59 = getelementptr inbounds %"class.blink::ShapeResult", %"class.blink::ShapeResult"* %39, i64 0, i32 0, i32 0, i32 0, i32 0
  %60 = load i32, i32* %59, align 4
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %62, label %64

62:                                               ; preds = %57
  call void @_ZN5blink11ShapeResultD1Ev(%"class.blink::ShapeResult"* nonnull %39) #7
  %63 = bitcast %"class.blink::ShapeResult"* %39 to i8*
  call void @free(i8* %63) #7
  br label %64

64:                                               ; preds = %62, %57, %38, %36, %31, %26, %15, %8
  %65 = phi i64 [ %12, %8 ], [ %19, %15 ], [ %29, %26 ], [ %29, %31 ], [ %29, %36 ], [ %55, %38 ], [ %55, %57 ], [ %55, %62 ]
  %66 = inttoptr i64 %65 to %"class.blink::ShapeResultView"*
  ret %"class.blink::ShapeResultView"* %66
}

declare %"class.blink::ShapeResultView"* @_ZN5blink15ShapeResultView6CreateEPKNS_11ShapeResultEjj(%"class.blink::ShapeResult"*, i32, i32) local_unnamed_addr #1

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc void @_ZN5blink12_GLOBAL__N_116CheckBreakOffsetEjjj(i32, i32, i32) unnamed_addr #3 {
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckOpResult", align 8
  %6 = alloca %"class.logging::CheckOpResult", align 8
  %7 = alloca %"class.logging::CheckError", align 8
  %8 = alloca %"class.logging::CheckOpResult", align 8
  %9 = alloca %"class.logging::CheckError", align 8
  %10 = bitcast %"class.logging::CheckOpResult"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10) #7
  %11 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %6, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %11, align 8
  %12 = bitcast %"class.logging::CheckOpResult"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12)
  %13 = icmp ugt i32 %0, %1
  br i1 %13, label %14, label %15

14:                                               ; preds = %3
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12)
  store i8* null, i8** %11, align 8
  br label %24

15:                                               ; preds = %3
  %16 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %0) #7
  %17 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #7
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %5, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i8* %16, i8* %17) #7
  %18 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %5, i64 0, i32 0
  %19 = load i8*, i8** %18, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12)
  store i8* %19, i8** %11, align 8
  %20 = icmp eq i8* %19, null
  br i1 %20, label %24, label %21

21:                                               ; preds = %15
  %22 = bitcast %"class.logging::CheckError"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %22) #7
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %7, i8* getelementptr inbounds ([80 x i8], [80 x i8]* @.str.1, i64 0, i64 0), i32 71, %"class.logging::CheckOpResult"* nonnull %6) #7
  %23 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %7) #7
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %7) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22) #7
  br label %24

24:                                               ; preds = %14, %15, %21
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #7
  %25 = bitcast %"class.logging::CheckOpResult"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %25) #7
  %26 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %8, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %26, align 8
  %27 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %27)
  %28 = icmp ugt i32 %0, %2
  br i1 %28, label %30, label %29

29:                                               ; preds = %24
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %27)
  store i8* null, i8** %26, align 8
  br label %39

30:                                               ; preds = %24
  %31 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %0) #7
  %32 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %2) #7
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %4, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i8* %31, i8* %32) #7
  %33 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  %34 = load i8*, i8** %33, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %27)
  store i8* %34, i8** %26, align 8
  %35 = icmp eq i8* %34, null
  br i1 %35, label %39, label %36

36:                                               ; preds = %30
  %37 = bitcast %"class.logging::CheckError"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %37) #7
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %9, i8* getelementptr inbounds ([80 x i8], [80 x i8]* @.str.1, i64 0, i64 0), i32 74, %"class.logging::CheckOpResult"* nonnull %8) #7
  %38 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %9) #7
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %9) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37) #7
  br label %39

39:                                               ; preds = %29, %30, %36
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %25) #7
  ret void
}

declare %"class.blink::ShapeResultView"* @_ZN5blink15ShapeResultView6CreateEPKNS_11ShapeResultE(%"class.blink::ShapeResult"*) local_unnamed_addr #1

declare i32 @_ZNK5blink11ShapeResult31CachedPreviousSafeToBreakOffsetEj(%"class.blink::ShapeResult"*, i32) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare %"class.blink::ShapeResultView"* @_ZN5blink15ShapeResultView6CreateEPKNS0_7SegmentEm(%"struct.blink::ShapeResultView::Segment"*, i64) local_unnamed_addr #1

; Function Attrs: nounwind readnone
declare i1 @llvm.is.constant.i32(i32) #4

; Function Attrs: nounwind readnone speculatable
declare { i32, i1 } @llvm.ssub.with.overflow.i32(i32, i32) #5

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #1

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #6

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #1

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #1

declare void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN5blink11ShapeResultD1Ev(%"class.blink::ShapeResult"*) unnamed_addr #6

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #6

declare void @_ZNK4base6subtle14RefCountedBase10AddRefImplEv(%"class.base::subtle::RefCountedBase"*) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!"branch_weights", i32 1, i32 2000}
!4 = !{!"branch_weights", i32 2000, i32 1}
!5 = !{!"branch_weights", i32 2000, i32 2002}
