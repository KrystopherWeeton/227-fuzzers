; ModuleID = '../../v8/src/regexp/regexp-parser.cc'
source_filename = "../../v8/src/regexp/regexp-parser.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%"class.std::__1::locale::id" = type <{ %"struct.std::__1::once_flag", i32, [4 x i8] }>
%"struct.std::__1::once_flag" = type { i64 }
%"class.v8::internal::RegExpParser" = type <{ %"class.v8::internal::Isolate"*, %"class.v8::internal::Zone"*, i32, i32, %"class.v8::internal::ZoneList"*, %"class.v8::internal::ZoneSet"*, %"class.v8::internal::ZoneList.1140"*, %"class.v8::internal::FlatStringReader"*, i32, %"class.v8::base::Flags", i32, i32, i32, i8, i8, i8, i8, i8, i8, [6 x i8] }>
%"class.v8::internal::ZoneList" = type { %"class.v8::internal::RegExpCapture"**, i32, i32 }
%"class.v8::internal::RegExpCapture" = type { %"class.v8::internal::RegExpTree", %"class.v8::internal::RegExpTree"*, i32, i32, i32, %"class.v8::internal::ZoneVector"* }
%"class.v8::internal::RegExpTree" = type { i32 (...)** }
%"class.v8::internal::ZoneVector" = type { %"class.std::__1::vector.1128" }
%"class.std::__1::vector.1128" = type { %"class.std::__1::__vector_base.1129" }
%"class.std::__1::__vector_base.1129" = type { i16*, i16*, %"class.std::__1::__compressed_pair.1130" }
%"class.std::__1::__compressed_pair.1130" = type { %"struct.std::__1::__compressed_pair_elem.1131", %"struct.std::__1::__compressed_pair_elem.1132" }
%"struct.std::__1::__compressed_pair_elem.1131" = type { i16* }
%"struct.std::__1::__compressed_pair_elem.1132" = type { %"class.v8::internal::ZoneAllocator" }
%"class.v8::internal::ZoneAllocator" = type { %"class.v8::internal::Zone"* }
%"class.v8::internal::ZoneSet" = type { %"class.std::__1::set.1133" }
%"class.std::__1::set.1133" = type { %"class.std::__1::__tree.1134" }
%"class.std::__1::__tree.1134" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.1135", %"class.std::__1::__compressed_pair.1138" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.1135" = type { %"struct.std::__1::__compressed_pair_elem.80", %"struct.std::__1::__compressed_pair_elem.1136" }
%"struct.std::__1::__compressed_pair_elem.80" = type { %"class.std::__1::__tree_end_node" }
%"struct.std::__1::__compressed_pair_elem.1136" = type { %"class.v8::internal::ZoneAllocator.1137" }
%"class.v8::internal::ZoneAllocator.1137" = type { %"class.v8::internal::Zone"* }
%"class.std::__1::__compressed_pair.1138" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { i64 }
%"class.v8::internal::ZoneList.1140" = type { %"class.v8::internal::RegExpBackReference"**, i32, i32 }
%"class.v8::internal::RegExpBackReference" = type <{ %"class.v8::internal::RegExpTree", %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::ZoneVector"*, %"class.v8::base::Flags", [4 x i8] }>
%"class.v8::base::Flags" = type { i32 }
%"class.v8::internal::FlatStringReader" = type { %"class.v8::internal::Relocatable", %"class.v8::internal::Handle.1141", i8, i32, i8* }
%"class.v8::internal::Relocatable" = type { i32 (...)**, %"class.v8::internal::Isolate"*, %"class.v8::internal::Relocatable"* }
%"class.v8::internal::Handle.1141" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::HandleBase" = type { i64* }
%"class.v8::internal::Isolate" = type { %"class.v8::internal::IsolateData", %"class.std::__1::unique_ptr", %"class.v8::internal::Heap", %"class.v8::internal::ReadOnlyHeap"*, %"class.std::__1::shared_ptr.645", %"class.std::__1::unique_ptr.666", i32, %"class.v8::internal::Isolate::EntryStackItem"*, i32, %"class.v8::internal::StringStream"*, [13 x i64], %"class.v8::internal::Bootstrapper"*, %"class.v8::internal::RuntimeProfiler"*, %"class.v8::internal::CompilationCache"*, %"class.std::__1::shared_ptr.676", %"class.v8::base::RecursiveMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::internal::Logger"*, %"class.v8::internal::StubCache"*, %"class.v8::internal::StubCache"*, %"class.v8::internal::Deoptimizer"*, i8, %"class.v8::internal::MaterializedObjectStore"*, i8, i32, i32, %"class.v8::internal::DescriptorLookupCache"*, %"struct.v8::internal::HandleScopeData", %"class.v8::internal::HandleScopeImplementer"*, %"class.v8::internal::UnicodeCache"*, %"class.v8::internal::AccountingAllocator"*, %"class.v8::internal::InnerPointerToCodeCache"*, %"class.v8::internal::GlobalHandles"*, %"class.v8::internal::EternalHandles"*, %"class.v8::internal::ThreadManager"*, %"class.v8::bigint::Processor"*, %"class.v8::internal::RuntimeState", %"class.v8::internal::Builtins", %"class.v8::internal::SetupIsolateDelegate"*, %"class.v8::internal::RegExpStack"*, %"class.std::__1::vector.815", %"class.v8::internal::DateCache"*, %"class.v8::base::RandomNumberGenerator"*, %"class.v8::base::RandomNumberGenerator"*, %"struct.std::__1::atomic.828", {}*, i8*, void (i32, %"class.v8::Promise"*, %"class.v8::Value"*)*, {}*, {}*, %"struct.std::__1::atomic.838", {}*, %"class.v8::base::Mutex", double, %"class.std::__1::basic_string", %"class.std::__1::unordered_map.849", %"struct.std::__1::atomic.152", i8, i8, i8, i8, i8, i8, double, %"class.v8::internal::Debug"*, %"class.v8::internal::HeapProfiler"*, %"class.std::__1::unique_ptr.924", %"class.v8::internal::AstStringConstants"*, %"class.v8::internal::interpreter::Interpreter"*, %"class.v8::internal::compiler::PerIsolateCompilerCache"*, %"class.v8::internal::Zone"*, %"class.v8::internal::CompilerDispatcher"*, %"class.std::__1::queue", void (i8*, i8*)*, void (i8*, i1)*, void (i8*, i32)*, i1 (%"class.v8::Context"*, %"class.v8::String"*)*, { i8, %"class.v8::String"* } (%"class.v8::Context"*, %"class.v8::Value"*)*, { i8, %"class.v8::String"* } (%"class.v8::Context"*, %"class.v8::Value"*, i1)*, i1 (%"class.v8::Context"*, %"class.v8::String"*)*, i1 (%"class.v8::FunctionCallbackInfo"*)*, i1 (%"class.v8::FunctionCallbackInfo"*)*, i1 (%"class.v8::Context"*)*, void (%"class.v8::FunctionCallbackInfo"*)*, %"class.v8::String"* (%"class.v8::Isolate"*, i8*)*, i1 (%"class.v8::Context"*)*, i1 (%"class.v8::Context"*)*, %"class.v8::internal::Relocatable"*, %"class.std::__1::vector.967"*, %"class.v8::internal::Object", i64*, %"class.v8::internal::AddressToIndexHashMap"*, %"class.v8::internal::HeapObjectToIndexHashMap"*, %"class.v8::internal::MicrotaskQueue"*, %"class.v8::internal::CompilationStatistics"*, %"class.v8::internal::CodeTracer"*, i32, void (%"class.v8::PromiseRejectMessage"*)*, %"class.v8::StartupData"*, i32, i32, i32, i64, i8, i8, i32, i8, i32, %"class.v8_inspector::V8Inspector"*, i8, i8, i8, i32, i32, %"class.v8::internal::compiler::NodeObserver"*, i8, [128 x i32], [256 x i32], [251 x i32], [251 x i32], %"class.v8::internal::OptimizingCompileDispatcher"*, %"class.std::__1::unique_ptr.975", i32, i8, i8, i32, i32, %"class.std::__1::vector.981", %"class.std::__1::vector.981", void (%"class.v8::Isolate"*, i32)*, %"class.std::__1::shared_ptr.988", i64, %"class.std::__1::unordered_map.989", i64, %"struct.v8::metrics::LongTaskStats", %"class.std::__1::vector.541", %"class.v8::internal::BuiltinsConstantsTableBuilder"*, i8*, i32, i8*, i32, %"class.v8::ArrayBuffer::Allocator"*, %"class.std::__1::shared_ptr.160", %"class.v8::internal::FutexWaitListNode", %"class.v8::internal::CancelableTaskManager"*, %"class.v8::debug::ConsoleDelegate"*, %"class.v8::debug::AsyncEventDelegate"*, i32, i32, %"class.std::__1::unique_ptr.1045", i1 (%"class.v8::Isolate"*)*, i8, %"class.v8::base::Mutex", %"struct.v8::internal::ManagedPtrDestructor"*, i64, i64, %"class.v8::internal::wasm::WasmEngine"*, %"class.std::__1::unique_ptr.1083", %"class.v8::internal::EmbeddedFileWriterInterface"*, %"class.v8::Context::BackupIncumbentScope"*, {}*, %"class.v8::base::Mutex", %"class.v8::internal::Isolate::ThreadDataTable", i8, %"class.v8::internal::Isolate"*, %"class.v8::base::Mutex", %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"*, %"struct.std::__1::atomic.1117", %"class.std::__1::vector.1121", %"class.std::__1::vector.1121", void (i32, %"class.std::__1::basic_string"*)* }
%"class.v8::internal::IsolateData" = type { [4 x i8*], i64, i64, i64, i64, i64, %"class.v8::internal::StackGuard", %"class.v8::internal::RootsTable", %"class.v8::internal::ExternalReferenceTable", %"class.v8::internal::ThreadLocalTop", [1711 x i64], [1711 x i64], i8, [15 x i8] }
%"class.v8::internal::StackGuard" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::StackGuard::ThreadLocal" }
%"class.v8::internal::StackGuard::ThreadLocal" = type { i64, i64, i64, i64, %"class.v8::internal::InterruptsScope"*, i64 }
%"class.v8::internal::InterruptsScope" = type { i32 (...)**, %"class.v8::internal::StackGuard"*, i64, i64, i32, %"class.v8::internal::InterruptsScope"* }
%"class.v8::internal::RootsTable" = type { [669 x i64] }
%"class.v8::internal::ExternalReferenceTable" = type { [1042 x i64], i32, i32 }
%"class.v8::internal::ThreadLocalTop" = type { %"class.v8::TryCatch"*, %"class.v8::internal::Isolate"*, %"class.v8::internal::Context", %"struct.std::__1::atomic", %"class.v8::internal::Object", %"class.v8::internal::Context", i64, i64, i64, i64, i64, %"class.v8::internal::Object", i8, i8, %"class.v8::internal::Object", i64, i64, i64, %"class.v8::internal::PromiseOnStack"*, %"class.v8::internal::Simulator"*, i64, %"class.v8::internal::ExternalCallbackScope"*, i32, void (%"class.v8::Object"*, i32, %"class.v8::Value"*)*, i64 }
%"class.v8::TryCatch" = type <{ %"class.v8::internal::Isolate"*, %"class.v8::TryCatch"*, i8*, i8*, i8*, i8, [7 x i8] }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { %"class.v8::internal::ThreadId" }
%"class.v8::internal::ThreadId" = type { i32 }
%"class.v8::internal::Context" = type { %"class.v8::internal::TorqueGeneratedContext" }
%"class.v8::internal::TorqueGeneratedContext" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::HeapObject" = type { %"class.v8::internal::Object" }
%"class.v8::internal::PromiseOnStack" = type { %"class.v8::internal::Handle", %"class.v8::internal::PromiseOnStack"* }
%"class.v8::internal::Handle" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::Simulator" = type opaque
%"class.v8::internal::ExternalCallbackScope" = type opaque
%"class.v8::Object" = type { i8 }
%"class.v8::Value" = type { i8 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.v8::internal::IsolateAllocator"* }
%"class.v8::internal::IsolateAllocator" = type { i8*, %"class.v8::PageAllocator"* }
%"class.v8::PageAllocator" = type { i32 (...)** }
%"class.v8::internal::Heap" = type { %"class.std::__1::unordered_map", %"struct.std::__1::atomic.19", %"class.v8::internal::Heap::ExternalMemoryAccounting", %"class.v8::internal::Isolate"*, i64, i64, i64, i64, %"struct.std::__1::atomic.19", i64, i64, i64, i64, i64, i8, i64, i64, %"struct.std::__1::atomic.19", i64, i64, %"struct.std::__1::atomic.19", %"struct.std::__1::atomic.29", %"class.std::__1::vector", i32, %"class.v8::internal::NewSpace"*, %"class.v8::internal::OldSpace"*, %"class.v8::internal::CodeSpace"*, %"class.v8::internal::MapSpace"*, %"class.v8::internal::OldLargeObjectSpace"*, %"class.v8::internal::CodeLargeObjectSpace"*, %"class.v8::internal::NewLargeObjectSpace"*, %"class.v8::internal::ReadOnlySpace"*, %"class.v8::internal::OldSpace"*, %"class.v8::internal::MapSpace"*, %"class.std::__1::unique_ptr.146", %"class.std::__1::unique_ptr.146", [8 x %"class.v8::internal::Space"*], %"class.v8::internal::LocalHeap"*, %"class.v8::internal::ArrayBufferExtension"*, %"class.v8::internal::ArrayBufferExtension"*, i8, i64, %"struct.std::__1::atomic.161", i32, i32, i32, i32, %"class.v8::internal::AllocationObserver"*, %"class.v8::internal::StressScavengeObserver"*, double, i32, i32, i32, i64, i32, [128 x i64], %"struct.std::__1::atomic.19", i64, i8, %"struct.std::__1::atomic.19", %"class.v8::internal::Object", %"class.v8::internal::Object", %"class.v8::internal::Object", %"class.std::__1::vector.165", %"class.std::__1::vector.165", i64 ()*, [113 x i32], i64, double, double, i64, i64, double, i32, i32, i32, i32, double, double, double, %"class.std::__1::unique_ptr.172", %"class.std::__1::unique_ptr.178", %"class.v8::internal::MinorMarkCompactCollector"*, %"class.std::__1::unique_ptr.308", %"class.std::__1::unique_ptr.314", %"class.std::__1::unique_ptr.320", %"class.std::__1::unique_ptr.359", %"class.std::__1::unique_ptr.398", %"class.std::__1::unique_ptr.428", %"class.std::__1::unique_ptr.434", %"class.std::__1::unique_ptr.444", %"class.std::__1::unique_ptr.450", %"class.std::__1::unique_ptr.450", %"class.std::__1::unique_ptr.456", %"class.std::__1::unique_ptr.462", %"class.std::__1::unique_ptr.462", %"class.std::__1::unique_ptr.468", %"class.std::__1::unique_ptr.474", %"class.std::__1::shared_ptr.480", %"class.v8::CppHeap"*, %"class.v8::EmbedderRootsHandler"*, %"class.v8::internal::StrongRootsEntry"*, %"class.v8::base::Mutex", i8, i64, i64, i64, i64, %"class.std::__1::unordered_map.503", %"class.std::__1::unique_ptr.529", [512 x i8], i8, i8, i64, i8, i32, i32, %"class.std::__1::unique_ptr.535", i8, %"class.v8::internal::Heap::ExternalStringTable", %"class.v8::base::Mutex", %"class.std::__1::unique_ptr.548", i32, i8, i8, i8, i8, i8, %"class.v8::internal::HeapObject", %"class.v8::base::SharedMutex", %"class.v8::base::Mutex", %"class.std::__1::unordered_set.330", i8, [7 x i8], %"class.std::__1::unordered_map.554", %"class.std::__1::unordered_map.580", %"class.std::__1::unordered_map.554", %"class.std::__1::unordered_map.604", %"class.std::__1::vector.632", i8, %"class.std::__1::unique_ptr.639", i32, i32 }
%"class.std::__1::unordered_map" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.2", %"class.std::__1::__compressed_pair.9", %"class.std::__1::__compressed_pair.14", %"class.std::__1::__compressed_pair.16", [4 x i8] }>
%"class.std::__1::unique_ptr.2" = type { %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4", %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.5" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.6" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::__compressed_pair_elem.17" = type { float }
%"class.v8::internal::Heap::ExternalMemoryAccounting" = type { %"struct.std::__1::atomic.24", %"struct.std::__1::atomic.24", %"struct.std::__1::atomic.24" }
%"struct.std::__1::atomic.24" = type { %"struct.std::__1::__atomic_base.25" }
%"struct.std::__1::__atomic_base.25" = type { %"struct.std::__1::__atomic_base.26" }
%"struct.std::__1::__atomic_base.26" = type { %"struct.std::__1::__cxx_atomic_impl.27" }
%"struct.std::__1::__cxx_atomic_impl.27" = type { %"struct.std::__1::__cxx_atomic_base_impl.28" }
%"struct.std::__1::__cxx_atomic_base_impl.28" = type { i64 }
%"struct.std::__1::atomic.29" = type { %"struct.std::__1::__atomic_base.30" }
%"struct.std::__1::__atomic_base.30" = type { %"struct.std::__1::__cxx_atomic_impl.31" }
%"struct.std::__1::__cxx_atomic_impl.31" = type { %"struct.std::__1::__cxx_atomic_base_impl.32" }
%"struct.std::__1::__cxx_atomic_base_impl.32" = type { i32 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.33" }
%"struct.std::__1::pair" = type opaque
%"class.std::__1::__compressed_pair.33" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"struct.std::__1::__compressed_pair_elem.34" = type { %"struct.std::__1::pair"* }
%"class.v8::internal::NewSpace" = type { %"class.v8::internal::SpaceWithLinearArea", %"class.v8::base::Mutex", %"struct.std::__1::atomic.19", %"struct.std::__1::atomic.19", %"class.v8::internal::SemiSpace", %"class.v8::internal::SemiSpace", %"class.v8::internal::VirtualMemory", %"class.std::__1::vector.103" }
%"class.v8::internal::SpaceWithLinearArea" = type { %"class.v8::internal::Space", %"class.v8::internal::LinearAllocationArea", [3 x i64] }
%"class.v8::internal::Space" = type { %"class.v8::internal::BaseSpace", %"class.v8::internal::AllocationCounter", %"class.v8::internal::heap::List", %"struct.std::__1::atomic.19"*, %"class.std::__1::unique_ptr.97" }
%"class.v8::internal::BaseSpace" = type { i32 (...)**, %"class.v8::internal::Heap"*, i32, %"struct.std::__1::atomic.19", i64 }
%"class.v8::internal::AllocationCounter" = type <{ %"class.std::__1::vector.38", %"class.std::__1::vector.38", %"class.std::__1::unordered_set", i8, [7 x i8], i64, i64, i8, [7 x i8] }>
%"class.std::__1::vector.38" = type { %"class.std::__1::__vector_base.39" }
%"class.std::__1::__vector_base.39" = type { %"struct.v8::internal::AllocationCounter::AllocationObserverCounter"*, %"struct.v8::internal::AllocationCounter::AllocationObserverCounter"*, %"class.std::__1::__compressed_pair.40" }
%"struct.v8::internal::AllocationCounter::AllocationObserverCounter" = type { %"class.v8::internal::AllocationObserver"*, i64, i64 }
%"class.std::__1::__compressed_pair.40" = type { %"struct.std::__1::__compressed_pair_elem.41" }
%"struct.std::__1::__compressed_pair_elem.41" = type { %"struct.v8::internal::AllocationCounter::AllocationObserverCounter"* }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table.45" }
%"class.std::__1::__hash_table.45" = type <{ %"class.std::__1::unique_ptr.46", %"class.std::__1::__compressed_pair.56", %"class.std::__1::__compressed_pair.61", %"class.std::__1::__compressed_pair.63", [4 x i8] }>
%"class.std::__1::unique_ptr.46" = type { %"class.std::__1::__compressed_pair.47" }
%"class.std::__1::__compressed_pair.47" = type { %"struct.std::__1::__compressed_pair_elem.48", %"struct.std::__1::__compressed_pair_elem.50" }
%"struct.std::__1::__compressed_pair_elem.48" = type { %"struct.std::__1::__hash_node_base.49"** }
%"struct.std::__1::__hash_node_base.49" = type { %"struct.std::__1::__hash_node_base.49"* }
%"struct.std::__1::__compressed_pair_elem.50" = type { %"class.std::__1::__bucket_list_deallocator.51" }
%"class.std::__1::__bucket_list_deallocator.51" = type { %"class.std::__1::__compressed_pair.52" }
%"class.std::__1::__compressed_pair.52" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.56" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%"struct.std::__1::__compressed_pair_elem.57" = type { %"struct.std::__1::__hash_node_base.49" }
%"class.std::__1::__compressed_pair.61" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.63" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.v8::internal::heap::List" = type { %"class.v8::internal::MemoryChunk"*, %"class.v8::internal::MemoryChunk"* }
%"class.v8::internal::MemoryChunk" = type { %"class.v8::internal::BasicMemoryChunk", [2 x %"class.v8::internal::SlotSet"*], %"struct.std::__1::atomic.19", %"struct.std::__1::atomic.24", %"class.v8::internal::SlotSet"*, [2 x %"class.v8::internal::TypedSlotSet"*], [2 x %"class.std::__1::set"*], %"class.v8::base::Mutex"*, %"struct.std::__1::atomic.86", %"class.v8::base::Mutex"*, i64, [2 x %"struct.std::__1::atomic.19"], %"class.v8::internal::heap::ListNode", %"class.v8::internal::FreeListCategory"**, %"struct.std::__1::atomic.24", %"class.v8::internal::Bitmap"*, %"class.v8::internal::CodeObjectRegistry"*, %"class.v8::internal::PossiblyEmptyBuckets" }
%"class.v8::internal::BasicMemoryChunk" = type { i64, i64, %"class.v8::internal::Heap"*, i64, i64, i64, i64, %"struct.std::__1::atomic.24", %"struct.std::__1::atomic.68", %"class.v8::internal::VirtualMemory" }
%"struct.std::__1::atomic.68" = type { %"struct.std::__1::__atomic_base.69" }
%"struct.std::__1::__atomic_base.69" = type { %"struct.std::__1::__cxx_atomic_impl.70" }
%"struct.std::__1::__cxx_atomic_impl.70" = type { %"struct.std::__1::__cxx_atomic_base_impl.71" }
%"struct.std::__1::__cxx_atomic_base_impl.71" = type { %"class.v8::internal::BaseSpace"* }
%"class.v8::internal::SlotSet" = type { i8 }
%"class.v8::internal::TypedSlotSet" = type { %"class.v8::internal::TypedSlots", i64 }
%"class.v8::internal::TypedSlots" = type { i32 (...)**, %"struct.v8::internal::TypedSlots::Chunk"*, %"struct.v8::internal::TypedSlots::Chunk"* }
%"struct.v8::internal::TypedSlots::Chunk" = type { %"struct.v8::internal::TypedSlots::Chunk"*, %"class.std::__1::vector.72" }
%"class.std::__1::vector.72" = type { %"class.std::__1::__vector_base.73" }
%"class.std::__1::__vector_base.73" = type { %"struct.v8::internal::TypedSlots::TypedSlot"*, %"struct.v8::internal::TypedSlots::TypedSlot"*, %"class.std::__1::__compressed_pair.74" }
%"struct.v8::internal::TypedSlots::TypedSlot" = type { i32 }
%"class.std::__1::__compressed_pair.74" = type { %"struct.std::__1::__compressed_pair_elem.75" }
%"struct.std::__1::__compressed_pair_elem.75" = type { %"struct.v8::internal::TypedSlots::TypedSlot"* }
%"class.std::__1::set" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.79", %"class.std::__1::__compressed_pair.84" }
%"class.std::__1::__compressed_pair.79" = type { %"struct.std::__1::__compressed_pair_elem.80" }
%"class.std::__1::__compressed_pair.84" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::atomic.86" = type { %"struct.std::__1::__atomic_base.87" }
%"struct.std::__1::__atomic_base.87" = type { %"struct.std::__1::__cxx_atomic_impl.88" }
%"struct.std::__1::__cxx_atomic_impl.88" = type { %"struct.std::__1::__cxx_atomic_base_impl.89" }
%"struct.std::__1::__cxx_atomic_base_impl.89" = type { i64 }
%"class.v8::internal::heap::ListNode" = type { %"class.v8::internal::MemoryChunk"*, %"class.v8::internal::MemoryChunk"* }
%"class.v8::internal::FreeListCategory" = type { i32, i32, %"class.v8::internal::FreeSpace", %"class.v8::internal::FreeListCategory"*, %"class.v8::internal::FreeListCategory"* }
%"class.v8::internal::FreeSpace" = type { %"class.v8::internal::TorqueGeneratedFreeSpace" }
%"class.v8::internal::TorqueGeneratedFreeSpace" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::Bitmap" = type { i8 }
%"class.v8::internal::CodeObjectRegistry" = type <{ %"class.std::__1::vector.90", i8, [7 x i8] }>
%"class.std::__1::vector.90" = type { %"class.std::__1::__vector_base.91" }
%"class.std::__1::__vector_base.91" = type { i64*, i64*, %"class.std::__1::__compressed_pair.92" }
%"class.std::__1::__compressed_pair.92" = type { %"struct.std::__1::__compressed_pair_elem.93" }
%"struct.std::__1::__compressed_pair_elem.93" = type { i64* }
%"class.v8::internal::PossiblyEmptyBuckets" = type { i64 }
%"class.std::__1::unique_ptr.97" = type { %"class.std::__1::__compressed_pair.98" }
%"class.std::__1::__compressed_pair.98" = type { %"struct.std::__1::__compressed_pair_elem.99" }
%"struct.std::__1::__compressed_pair_elem.99" = type { %"class.v8::internal::FreeList"* }
%"class.v8::internal::FreeList" = type { i32 (...)**, i32, i32, i64, %"struct.std::__1::atomic.19", %"class.v8::internal::FreeListCategory"**, i64 }
%"class.v8::internal::LinearAllocationArea" = type { i64, i64, i64 }
%"class.v8::internal::SemiSpace" = type { %"class.v8::internal::Space", i64, i64, i64, i64, i64, i32, %"class.v8::internal::Page"* }
%"class.v8::internal::Page" = type { %"class.v8::internal::MemoryChunk" }
%"class.v8::internal::VirtualMemory" = type { %"class.v8::PageAllocator"*, %"class.v8::base::AddressRegion" }
%"class.v8::base::AddressRegion" = type { i64, i64 }
%"class.std::__1::vector.103" = type { %"class.std::__1::__vector_base.104" }
%"class.std::__1::__vector_base.104" = type { %"struct.std::__1::pair.105"*, %"struct.std::__1::pair.105"*, %"class.std::__1::__compressed_pair.106" }
%"struct.std::__1::pair.105" = type { i32, i64 }
%"class.std::__1::__compressed_pair.106" = type { %"struct.std::__1::__compressed_pair_elem.107" }
%"struct.std::__1::__compressed_pair_elem.107" = type { %"struct.std::__1::pair.105"* }
%"class.v8::internal::CodeSpace" = type { %"class.v8::internal::PagedSpace" }
%"class.v8::internal::PagedSpace" = type { %"class.v8::internal::SpaceWithLinearArea", i32, i32, i64, %"class.v8::internal::AllocationStats", %"class.v8::base::Mutex", i64, i64 }
%"class.v8::internal::AllocationStats" = type { %"struct.std::__1::atomic.19", i64, %"struct.std::__1::atomic.19" }
%"class.v8::internal::OldLargeObjectSpace" = type { %"class.v8::internal::LargeObjectSpace" }
%"class.v8::internal::LargeObjectSpace" = type { %"class.v8::internal::Space", %"struct.std::__1::atomic.19", i32, %"struct.std::__1::atomic.19", %"class.v8::base::Mutex", %"struct.std::__1::atomic.19" }
%"class.v8::internal::CodeLargeObjectSpace" = type { %"class.v8::internal::OldLargeObjectSpace", %"class.std::__1::unordered_map.111" }
%"class.std::__1::unordered_map.111" = type { %"class.std::__1::__hash_table.112" }
%"class.std::__1::__hash_table.112" = type <{ %"class.std::__1::unique_ptr.113", %"class.std::__1::__compressed_pair.123", %"class.std::__1::__compressed_pair.128", %"class.std::__1::__compressed_pair.133", [4 x i8] }>
%"class.std::__1::unique_ptr.113" = type { %"class.std::__1::__compressed_pair.114" }
%"class.std::__1::__compressed_pair.114" = type { %"struct.std::__1::__compressed_pair_elem.115", %"struct.std::__1::__compressed_pair_elem.117" }
%"struct.std::__1::__compressed_pair_elem.115" = type { %"struct.std::__1::__hash_node_base.116"** }
%"struct.std::__1::__hash_node_base.116" = type { %"struct.std::__1::__hash_node_base.116"* }
%"struct.std::__1::__compressed_pair_elem.117" = type { %"class.std::__1::__bucket_list_deallocator.118" }
%"class.std::__1::__bucket_list_deallocator.118" = type { %"class.std::__1::__compressed_pair.119" }
%"class.std::__1::__compressed_pair.119" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.123" = type { %"struct.std::__1::__compressed_pair_elem.124" }
%"struct.std::__1::__compressed_pair_elem.124" = type { %"struct.std::__1::__hash_node_base.116" }
%"class.std::__1::__compressed_pair.128" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.133" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.v8::internal::NewLargeObjectSpace" = type { %"class.v8::internal::LargeObjectSpace", i64 }
%"class.v8::internal::ReadOnlySpace" = type { %"class.v8::internal::BaseSpace", i8, %"class.v8::internal::AllocationStats", %"class.std::__1::vector.139", i64, i64, i8, i64, i64 }
%"class.std::__1::vector.139" = type { %"class.std::__1::__vector_base.140" }
%"class.std::__1::__vector_base.140" = type { %"class.v8::internal::ReadOnlyPage"**, %"class.v8::internal::ReadOnlyPage"**, %"class.std::__1::__compressed_pair.141" }
%"class.v8::internal::ReadOnlyPage" = type { %"class.v8::internal::BasicMemoryChunk" }
%"class.std::__1::__compressed_pair.141" = type { %"struct.std::__1::__compressed_pair_elem.142" }
%"struct.std::__1::__compressed_pair_elem.142" = type { %"class.v8::internal::ReadOnlyPage"** }
%"class.v8::internal::OldSpace" = type { %"class.v8::internal::PagedSpace" }
%"class.v8::internal::MapSpace" = type { %"class.v8::internal::PagedSpace" }
%"class.std::__1::unique_ptr.146" = type { %"class.std::__1::__compressed_pair.147" }
%"class.std::__1::__compressed_pair.147" = type { %"struct.std::__1::__compressed_pair_elem.148" }
%"struct.std::__1::__compressed_pair_elem.148" = type { %"class.v8::internal::ConcurrentAllocator"* }
%"class.v8::internal::ConcurrentAllocator" = type { %"class.v8::internal::LocalHeap"*, %"class.v8::internal::PagedSpace"*, %"class.v8::internal::LocalAllocationBuffer" }
%"class.v8::internal::LocalAllocationBuffer" = type { %"class.v8::internal::Heap"*, %"class.v8::internal::LinearAllocationArea" }
%"class.v8::internal::LocalHeap" = type { %"class.v8::internal::Heap"*, i8, %"struct.std::__1::atomic.1050", i8, i8, %"class.v8::internal::LocalHeap"*, %"class.v8::internal::LocalHeap"*, %"class.std::__1::unique_ptr.1054", %"class.std::__1::unique_ptr.1060", %"class.std::__1::unique_ptr.474", %"class.std::__1::vector.1066", %"class.v8::internal::ConcurrentAllocator" }
%"struct.std::__1::atomic.1050" = type { %"struct.std::__1::__atomic_base.1051" }
%"struct.std::__1::__atomic_base.1051" = type { %"struct.std::__1::__cxx_atomic_impl.1052" }
%"struct.std::__1::__cxx_atomic_impl.1052" = type { %"struct.std::__1::__cxx_atomic_base_impl.1053" }
%"struct.std::__1::__cxx_atomic_base_impl.1053" = type { i32 }
%"class.std::__1::unique_ptr.1054" = type { %"class.std::__1::__compressed_pair.1055" }
%"class.std::__1::__compressed_pair.1055" = type { %"struct.std::__1::__compressed_pair_elem.1056" }
%"struct.std::__1::__compressed_pair_elem.1056" = type { %"class.v8::internal::LocalHandles"* }
%"class.v8::internal::LocalHandles" = type { %"struct.v8::internal::HandleScopeData", %"class.std::__1::vector.808" }
%"class.std::__1::vector.808" = type { %"class.std::__1::__vector_base.809" }
%"class.std::__1::__vector_base.809" = type { i64**, i64**, %"class.std::__1::__compressed_pair.810" }
%"class.std::__1::__compressed_pair.810" = type { %"struct.std::__1::__compressed_pair_elem.811" }
%"struct.std::__1::__compressed_pair_elem.811" = type { i64** }
%"class.std::__1::unique_ptr.1060" = type { %"class.std::__1::__compressed_pair.1061" }
%"class.std::__1::__compressed_pair.1061" = type { %"struct.std::__1::__compressed_pair_elem.1062" }
%"struct.std::__1::__compressed_pair_elem.1062" = type { %"class.v8::internal::PersistentHandles"* }
%"class.v8::internal::PersistentHandles" = type { %"class.v8::internal::Isolate"*, %"class.std::__1::vector.808", i64*, i64*, %"class.v8::internal::PersistentHandles"*, %"class.v8::internal::PersistentHandles"* }
%"class.std::__1::vector.1066" = type { %"class.std::__1::__vector_base.1067" }
%"class.std::__1::__vector_base.1067" = type { %"struct.std::__1::pair.1068"*, %"struct.std::__1::pair.1068"*, %"class.std::__1::__compressed_pair.1069" }
%"struct.std::__1::pair.1068" = type opaque
%"class.std::__1::__compressed_pair.1069" = type { %"struct.std::__1::__compressed_pair_elem.1070" }
%"struct.std::__1::__compressed_pair_elem.1070" = type { %"struct.std::__1::pair.1068"* }
%"class.v8::internal::ArrayBufferExtension" = type { %"struct.std::__1::atomic.152", %"struct.std::__1::atomic.156", %"class.std::__1::shared_ptr", %"class.v8::internal::ArrayBufferExtension"*, %"struct.std::__1::atomic.19" }
%"struct.std::__1::atomic.156" = type { %"struct.std::__1::__atomic_base.157" }
%"struct.std::__1::__atomic_base.157" = type { %"struct.std::__1::__cxx_atomic_impl.158" }
%"struct.std::__1::__cxx_atomic_impl.158" = type { %"struct.std::__1::__cxx_atomic_base_impl.159" }
%"struct.std::__1::__cxx_atomic_base_impl.159" = type { i8 }
%"class.std::__1::shared_ptr" = type { %"class.v8::internal::BackingStore"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::BackingStore" = type <{ i8*, %"struct.std::__1::atomic.19", i64, %"union.v8::internal::BackingStore::TypeSpecificData", i16, [6 x i8] }>
%"union.v8::internal::BackingStore::TypeSpecificData" = type { %"class.std::__1::shared_ptr.160" }
%"class.std::__1::__shared_weak_count" = type { %"class.std::__1::__shared_count", i64 }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"struct.std::__1::atomic.161" = type { %"struct.std::__1::__atomic_base.162" }
%"struct.std::__1::__atomic_base.162" = type { %"struct.std::__1::__cxx_atomic_impl.163" }
%"struct.std::__1::__cxx_atomic_impl.163" = type { %"struct.std::__1::__cxx_atomic_base_impl.164" }
%"struct.std::__1::__cxx_atomic_base_impl.164" = type { i32 }
%"class.v8::internal::AllocationObserver" = type { i32 (...)**, i64 }
%"class.v8::internal::StressScavengeObserver" = type opaque
%"struct.std::__1::atomic.19" = type { %"struct.std::__1::__atomic_base.20" }
%"struct.std::__1::__atomic_base.20" = type { %"struct.std::__1::__atomic_base.21" }
%"struct.std::__1::__atomic_base.21" = type { %"struct.std::__1::__cxx_atomic_impl.22" }
%"struct.std::__1::__cxx_atomic_impl.22" = type { %"struct.std::__1::__cxx_atomic_base_impl.23" }
%"struct.std::__1::__cxx_atomic_base_impl.23" = type { i64 }
%"class.std::__1::vector.165" = type { %"class.std::__1::__vector_base.166" }
%"class.std::__1::__vector_base.166" = type { %"struct.v8::internal::Heap::GCCallbackTuple"*, %"struct.v8::internal::Heap::GCCallbackTuple"*, %"class.std::__1::__compressed_pair.167" }
%"struct.v8::internal::Heap::GCCallbackTuple" = type { void (%"class.v8::Isolate"*, i32, i32, i8*)*, i32, i8* }
%"class.v8::Isolate" = type { i8 }
%"class.std::__1::__compressed_pair.167" = type { %"struct.std::__1::__compressed_pair_elem.168" }
%"struct.std::__1::__compressed_pair_elem.168" = type { %"struct.v8::internal::Heap::GCCallbackTuple"* }
%"class.std::__1::unique_ptr.172" = type { %"class.std::__1::__compressed_pair.173" }
%"class.std::__1::__compressed_pair.173" = type { %"struct.std::__1::__compressed_pair_elem.174" }
%"struct.std::__1::__compressed_pair_elem.174" = type { %"class.v8::internal::GCTracer"* }
%"class.v8::internal::GCTracer" = type opaque
%"class.std::__1::unique_ptr.178" = type { %"class.std::__1::__compressed_pair.179" }
%"class.std::__1::__compressed_pair.179" = type { %"struct.std::__1::__compressed_pair_elem.180" }
%"struct.std::__1::__compressed_pair_elem.180" = type { %"class.v8::internal::MarkCompactCollector"* }
%"class.v8::internal::MarkCompactCollector" = type <{ %"class.v8::internal::MarkCompactCollectorBase", %"class.v8::base::Mutex", %"class.v8::base::Semaphore", i8, i8, i8, i8, i8, i8, [2 x i8], %"class.v8::internal::MarkingWorklists", %"class.v8::internal::WeakObjects", %"struct.v8::internal::EphemeronMarking", %"class.std::__1::unique_ptr.220", %"class.std::__1::unique_ptr.226", %"class.v8::internal::NativeContextInferrer", [7 x i8], %"class.v8::internal::NativeContextStats", %"class.std::__1::vector.280", %"class.std::__1::vector.280", %"class.std::__1::vector.280", %"class.std::__1::vector.287", %"class.v8::internal::Sweeper"*, %"class.v8::internal::MajorMarkingState", %"class.v8::internal::MajorNonAtomicMarkingState", [2 x i8], i32, i32, [4 x i8] }>
%"class.v8::internal::MarkCompactCollectorBase" = type { i32 (...)**, %"class.v8::internal::Heap"* }
%"class.v8::base::Semaphore" = type { %union.sem_t }
%union.sem_t = type { i64, [24 x i8] }
%"class.v8::internal::MarkingWorklists" = type { %"class.heap::base::Worklist", %"class.heap::base::Worklist", %"class.heap::base::Worklist.181", %"class.std::__1::vector.182", %"class.std::__1::vector.189", %"class.heap::base::Worklist" }
%"class.heap::base::Worklist.181" = type { %"class.v8::base::Mutex", %"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Segment"*, %"struct.std::__1::atomic.19" }
%"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Segment" = type opaque
%"class.std::__1::vector.182" = type { %"class.std::__1::__vector_base.183" }
%"class.std::__1::__vector_base.183" = type { %"struct.v8::internal::ContextWorklistPair"*, %"struct.v8::internal::ContextWorklistPair"*, %"class.std::__1::__compressed_pair.184" }
%"struct.v8::internal::ContextWorklistPair" = type { i64, %"class.heap::base::Worklist"* }
%"class.std::__1::__compressed_pair.184" = type { %"struct.std::__1::__compressed_pair_elem.185" }
%"struct.std::__1::__compressed_pair_elem.185" = type { %"struct.v8::internal::ContextWorklistPair"* }
%"class.std::__1::vector.189" = type { %"class.std::__1::__vector_base.190" }
%"class.std::__1::__vector_base.190" = type { %"class.std::__1::unique_ptr.191"*, %"class.std::__1::unique_ptr.191"*, %"class.std::__1::__compressed_pair.192" }
%"class.std::__1::unique_ptr.191" = type opaque
%"class.std::__1::__compressed_pair.192" = type { %"struct.std::__1::__compressed_pair_elem.193" }
%"struct.std::__1::__compressed_pair_elem.193" = type { %"class.std::__1::unique_ptr.191"* }
%"class.heap::base::Worklist" = type { %"class.v8::base::Mutex", %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Segment"*, %"struct.std::__1::atomic.19" }
%"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Segment" = type opaque
%"class.v8::internal::WeakObjects" = type { %"class.v8::internal::Worklist", %"class.v8::internal::Worklist.197", %"class.v8::internal::Worklist.199", %"class.v8::internal::Worklist.199", %"class.v8::internal::Worklist.199", %"class.v8::internal::Worklist.201", %"class.v8::internal::Worklist.203", %"class.v8::internal::Worklist.205", %"class.v8::internal::Worklist.207", %"class.v8::internal::Worklist.209", %"class.v8::internal::Worklist.211" }
%"class.v8::internal::Worklist" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::TransitionArray, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::TransitionArray, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment"*, %"struct.std::__1::atomic.19" }
%"class.v8::internal::Worklist.197" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"*, %"struct.std::__1::atomic.19" }
%"class.v8::internal::Worklist.199" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::Ephemeron, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::Ephemeron, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"*, %"struct.std::__1::atomic.19" }
%"class.v8::internal::Worklist.201" = type <{ [8 x %"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"*, %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"*, %"struct.std::__1::atomic.19" }
%"class.v8::internal::Worklist.203" = type <{ [8 x %"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"*, %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"*, %"struct.std::__1::atomic.19" }
%"class.v8::internal::Worklist.205" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"*, %"struct.std::__1::atomic.19" }
%"class.v8::internal::Worklist.207" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::WeakCell, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::WeakCell, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment"*, %"struct.std::__1::atomic.19" }
%"class.v8::internal::Worklist.209" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment"*, %"struct.std::__1::atomic.19" }
%"class.v8::internal::Worklist.211" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::JSFunction, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::JSFunction, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"*, %"struct.std::__1::atomic.19" }
%"struct.v8::internal::EphemeronMarking" = type { %"class.std::__1::vector.213", i8, i64 }
%"class.std::__1::vector.213" = type { %"class.std::__1::__vector_base.214" }
%"class.std::__1::__vector_base.214" = type { %"class.v8::internal::HeapObject"*, %"class.v8::internal::HeapObject"*, %"class.std::__1::__compressed_pair.215" }
%"class.std::__1::__compressed_pair.215" = type { %"struct.std::__1::__compressed_pair_elem.216" }
%"struct.std::__1::__compressed_pair_elem.216" = type { %"class.v8::internal::HeapObject"* }
%"class.std::__1::unique_ptr.220" = type { %"class.std::__1::__compressed_pair.221" }
%"class.std::__1::__compressed_pair.221" = type { %"struct.std::__1::__compressed_pair_elem.222" }
%"struct.std::__1::__compressed_pair_elem.222" = type { %"class.v8::internal::MainMarkingVisitor"* }
%"class.v8::internal::MainMarkingVisitor" = type opaque
%"class.std::__1::unique_ptr.226" = type { %"class.std::__1::__compressed_pair.227" }
%"class.std::__1::__compressed_pair.227" = type { %"struct.std::__1::__compressed_pair_elem.228" }
%"struct.std::__1::__compressed_pair_elem.228" = type { %"class.v8::internal::MarkingWorklists::Local"* }
%"class.v8::internal::MarkingWorklists::Local" = type { %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local", %"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Local", %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local", i64, %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local"*, i8, [7 x i8], %"class.std::__1::unordered_map.229" }
%"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Local" = type { %"class.heap::base::Worklist.181"*, %"class.heap::base::internal::SegmentBase"*, %"class.heap::base::internal::SegmentBase"* }
%"class.heap::base::internal::SegmentBase" = type { i16, i16 }
%"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local" = type { %"class.heap::base::Worklist"*, %"class.heap::base::internal::SegmentBase"*, %"class.heap::base::internal::SegmentBase"* }
%"class.std::__1::unordered_map.229" = type { %"class.std::__1::__hash_table.230" }
%"class.std::__1::__hash_table.230" = type <{ %"class.std::__1::unique_ptr.231", %"class.std::__1::__compressed_pair.241", %"class.std::__1::__compressed_pair.246", %"class.std::__1::__compressed_pair.249", [4 x i8] }>
%"class.std::__1::unique_ptr.231" = type { %"class.std::__1::__compressed_pair.232" }
%"class.std::__1::__compressed_pair.232" = type { %"struct.std::__1::__compressed_pair_elem.233", %"struct.std::__1::__compressed_pair_elem.235" }
%"struct.std::__1::__compressed_pair_elem.233" = type { %"struct.std::__1::__hash_node_base.234"** }
%"struct.std::__1::__hash_node_base.234" = type { %"struct.std::__1::__hash_node_base.234"* }
%"struct.std::__1::__compressed_pair_elem.235" = type { %"class.std::__1::__bucket_list_deallocator.236" }
%"class.std::__1::__bucket_list_deallocator.236" = type { %"class.std::__1::__compressed_pair.237" }
%"class.std::__1::__compressed_pair.237" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.241" = type { %"struct.std::__1::__compressed_pair_elem.242" }
%"struct.std::__1::__compressed_pair_elem.242" = type { %"struct.std::__1::__hash_node_base.234" }
%"class.std::__1::__compressed_pair.246" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.249" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.v8::internal::NativeContextInferrer" = type { i8 }
%"class.v8::internal::NativeContextStats" = type { %"class.std::__1::unordered_map.256" }
%"class.std::__1::unordered_map.256" = type { %"class.std::__1::__hash_table.257" }
%"class.std::__1::__hash_table.257" = type <{ %"class.std::__1::unique_ptr.258", %"class.std::__1::__compressed_pair.268", %"class.std::__1::__compressed_pair.273", %"class.std::__1::__compressed_pair.276", [4 x i8] }>
%"class.std::__1::unique_ptr.258" = type { %"class.std::__1::__compressed_pair.259" }
%"class.std::__1::__compressed_pair.259" = type { %"struct.std::__1::__compressed_pair_elem.260", %"struct.std::__1::__compressed_pair_elem.262" }
%"struct.std::__1::__compressed_pair_elem.260" = type { %"struct.std::__1::__hash_node_base.261"** }
%"struct.std::__1::__hash_node_base.261" = type { %"struct.std::__1::__hash_node_base.261"* }
%"struct.std::__1::__compressed_pair_elem.262" = type { %"class.std::__1::__bucket_list_deallocator.263" }
%"class.std::__1::__bucket_list_deallocator.263" = type { %"class.std::__1::__compressed_pair.264" }
%"class.std::__1::__compressed_pair.264" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.268" = type { %"struct.std::__1::__compressed_pair_elem.269" }
%"struct.std::__1::__compressed_pair_elem.269" = type { %"struct.std::__1::__hash_node_base.261" }
%"class.std::__1::__compressed_pair.273" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.276" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::vector.280" = type { %"class.std::__1::__vector_base.281" }
%"class.std::__1::__vector_base.281" = type { %"class.v8::internal::Page"**, %"class.v8::internal::Page"**, %"class.std::__1::__compressed_pair.282" }
%"class.std::__1::__compressed_pair.282" = type { %"struct.std::__1::__compressed_pair_elem.283" }
%"struct.std::__1::__compressed_pair_elem.283" = type { %"class.v8::internal::Page"** }
%"class.std::__1::vector.287" = type { %"class.std::__1::__vector_base.288" }
%"class.std::__1::__vector_base.288" = type { %"struct.std::__1::pair.289"*, %"struct.std::__1::pair.289"*, %"class.std::__1::__compressed_pair.290" }
%"struct.std::__1::pair.289" = type opaque
%"class.std::__1::__compressed_pair.290" = type { %"struct.std::__1::__compressed_pair_elem.291" }
%"struct.std::__1::__compressed_pair_elem.291" = type { %"struct.std::__1::pair.289"* }
%"class.v8::internal::Sweeper" = type <{ %"class.v8::internal::Heap"*, %"class.v8::internal::MajorNonAtomicMarkingState"*, %"class.std::__1::unique_ptr.295", %"class.v8::base::Mutex", [3 x %"class.std::__1::vector.280"], [3 x %"class.std::__1::vector.280"], i8, %"struct.std::__1::atomic.152", [6 x i8], %"class.std::__1::vector.280", i64, %"class.v8::base::Semaphore", i8, i8, i8, [5 x i8] }>
%"class.std::__1::unique_ptr.295" = type { %"class.std::__1::__compressed_pair.296" }
%"class.std::__1::__compressed_pair.296" = type { %"struct.std::__1::__compressed_pair_elem.297" }
%"struct.std::__1::__compressed_pair_elem.297" = type { %"class.v8::JobHandle"* }
%"class.v8::JobHandle" = type { i32 (...)** }
%"class.v8::internal::MajorMarkingState" = type { i8 }
%"class.v8::internal::MajorNonAtomicMarkingState" = type { i8 }
%"class.v8::internal::MinorMarkCompactCollector" = type <{ %"class.v8::internal::MarkCompactCollectorBase", %"class.v8::internal::Worklist.305"*, %"class.v8::internal::YoungGenerationMarkingVisitor"*, %"class.v8::base::Semaphore", %"class.std::__1::vector.280", %"class.std::__1::vector.280", %"class.v8::internal::MinorMarkingState", %"class.v8::internal::MinorNonAtomicMarkingState", [6 x i8] }>
%"class.v8::internal::Worklist.305" = type opaque
%"class.v8::internal::YoungGenerationMarkingVisitor" = type opaque
%"class.v8::internal::MinorMarkingState" = type { i8 }
%"class.v8::internal::MinorNonAtomicMarkingState" = type { i8 }
%"class.std::__1::unique_ptr.308" = type { %"class.std::__1::__compressed_pair.309" }
%"class.std::__1::__compressed_pair.309" = type { %"struct.std::__1::__compressed_pair_elem.310" }
%"struct.std::__1::__compressed_pair_elem.310" = type { %"class.v8::internal::ScavengerCollector"* }
%"class.v8::internal::ScavengerCollector" = type opaque
%"class.std::__1::unique_ptr.314" = type { %"class.std::__1::__compressed_pair.315" }
%"class.std::__1::__compressed_pair.315" = type { %"struct.std::__1::__compressed_pair_elem.316" }
%"struct.std::__1::__compressed_pair_elem.316" = type { %"class.v8::internal::ArrayBufferSweeper"* }
%"class.v8::internal::ArrayBufferSweeper" = type opaque
%"class.std::__1::unique_ptr.320" = type { %"class.std::__1::__compressed_pair.321" }
%"class.std::__1::__compressed_pair.321" = type { %"struct.std::__1::__compressed_pair_elem.322" }
%"struct.std::__1::__compressed_pair_elem.322" = type { %"class.v8::internal::MemoryAllocator"* }
%"class.v8::internal::MemoryAllocator" = type { %"class.v8::internal::Isolate"*, %"class.v8::PageAllocator"*, %"class.v8::PageAllocator"*, i64, %"struct.std::__1::atomic.19", %"struct.std::__1::atomic.19", %"struct.std::__1::atomic.19", %"struct.std::__1::atomic.19", %"class.v8::internal::VirtualMemory", %"class.v8::internal::MemoryAllocator::Unmapper", %"class.std::__1::unordered_set.330", %"class.v8::base::Mutex" }
%"class.v8::internal::MemoryAllocator::Unmapper" = type { %"class.v8::internal::Heap"*, %"class.v8::internal::MemoryAllocator"*, %"class.v8::base::Mutex", [3 x %"class.std::__1::vector.323"], %"class.std::__1::unique_ptr.295" }
%"class.std::__1::vector.323" = type { %"class.std::__1::__vector_base.324" }
%"class.std::__1::__vector_base.324" = type { %"class.v8::internal::MemoryChunk"**, %"class.v8::internal::MemoryChunk"**, %"class.std::__1::__compressed_pair.325" }
%"class.std::__1::__compressed_pair.325" = type { %"struct.std::__1::__compressed_pair_elem.326" }
%"struct.std::__1::__compressed_pair_elem.326" = type { %"class.v8::internal::MemoryChunk"** }
%"class.std::__1::unique_ptr.359" = type { %"class.std::__1::__compressed_pair.360" }
%"class.std::__1::__compressed_pair.360" = type { %"struct.std::__1::__compressed_pair_elem.361" }
%"struct.std::__1::__compressed_pair_elem.361" = type { %"class.v8::internal::IncrementalMarking"* }
%"class.v8::internal::IncrementalMarking" = type { %"class.v8::internal::Heap"*, %"class.v8::internal::MarkCompactCollector"*, %"class.v8::internal::WeakObjects"*, double, double, i64, i64, i64, i64, double, i64, %"struct.std::__1::atomic.362", i8, i8, i8, i8, [3 x i8], %"class.v8::internal::IncrementalMarkingJob", %"struct.std::__1::atomic.366", %"class.v8::internal::IncrementalMarking::Observer", %"class.v8::internal::IncrementalMarking::Observer", %"class.v8::internal::MajorMarkingState", %"class.v8::internal::MajorAtomicMarkingState", %"class.v8::internal::MajorNonAtomicMarkingState", %"class.v8::base::Mutex", %"class.std::__1::unordered_map.371" }
%"struct.std::__1::atomic.362" = type { %"struct.std::__1::__atomic_base.363" }
%"struct.std::__1::__atomic_base.363" = type { %"struct.std::__1::__cxx_atomic_impl.364" }
%"struct.std::__1::__cxx_atomic_impl.364" = type { %"struct.std::__1::__cxx_atomic_base_impl.365" }
%"struct.std::__1::__cxx_atomic_base_impl.365" = type { i8 }
%"class.v8::internal::IncrementalMarkingJob" = type <{ %"class.v8::base::Mutex", double, i8, i8, [6 x i8] }>
%"struct.std::__1::atomic.366" = type { %"struct.std::__1::__atomic_base.367" }
%"struct.std::__1::__atomic_base.367" = type { %"struct.std::__1::__cxx_atomic_impl.368" }
%"struct.std::__1::__cxx_atomic_impl.368" = type { %"struct.std::__1::__cxx_atomic_base_impl.369" }
%"struct.std::__1::__cxx_atomic_base_impl.369" = type { i32 }
%"class.v8::internal::IncrementalMarking::Observer" = type { %"class.v8::internal::AllocationObserver", %"class.v8::internal::IncrementalMarking"* }
%"class.v8::internal::MajorAtomicMarkingState" = type { i8 }
%"class.std::__1::unordered_map.371" = type { %"class.std::__1::__hash_table.372" }
%"class.std::__1::__hash_table.372" = type <{ %"class.std::__1::unique_ptr.373", %"class.std::__1::__compressed_pair.383", %"class.std::__1::__compressed_pair.388", %"class.std::__1::__compressed_pair.391", [4 x i8] }>
%"class.std::__1::unique_ptr.373" = type { %"class.std::__1::__compressed_pair.374" }
%"class.std::__1::__compressed_pair.374" = type { %"struct.std::__1::__compressed_pair_elem.375", %"struct.std::__1::__compressed_pair_elem.377" }
%"struct.std::__1::__compressed_pair_elem.375" = type { %"struct.std::__1::__hash_node_base.376"** }
%"struct.std::__1::__hash_node_base.376" = type { %"struct.std::__1::__hash_node_base.376"* }
%"struct.std::__1::__compressed_pair_elem.377" = type { %"class.std::__1::__bucket_list_deallocator.378" }
%"class.std::__1::__bucket_list_deallocator.378" = type { %"class.std::__1::__compressed_pair.379" }
%"class.std::__1::__compressed_pair.379" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.383" = type { %"struct.std::__1::__compressed_pair_elem.384" }
%"struct.std::__1::__compressed_pair_elem.384" = type { %"struct.std::__1::__hash_node_base.376" }
%"class.std::__1::__compressed_pair.388" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.391" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::unique_ptr.398" = type { %"class.std::__1::__compressed_pair.399" }
%"class.std::__1::__compressed_pair.399" = type { %"struct.std::__1::__compressed_pair_elem.400" }
%"struct.std::__1::__compressed_pair_elem.400" = type { %"class.v8::internal::ConcurrentMarking"* }
%"class.v8::internal::ConcurrentMarking" = type <{ %"class.std::__1::unique_ptr.295", %"class.v8::internal::Heap"*, %"class.v8::internal::MarkingWorklists"*, %"class.v8::internal::WeakObjects"*, [8 x %"struct.v8::internal::ConcurrentMarking::TaskState"], %"struct.std::__1::atomic.19", %"struct.std::__1::atomic.152", [7 x i8] }>
%"struct.v8::internal::ConcurrentMarking::TaskState" = type { i64, %"class.std::__1::unordered_map.401", %"class.v8::internal::NativeContextInferrer", [7 x i8], %"class.v8::internal::NativeContextStats", [64 x i8] }
%"class.std::__1::unordered_map.401" = type { %"class.std::__1::__hash_table.402" }
%"class.std::__1::__hash_table.402" = type <{ %"class.std::__1::unique_ptr.403", %"class.std::__1::__compressed_pair.413", %"class.std::__1::__compressed_pair.418", %"class.std::__1::__compressed_pair.421", [4 x i8] }>
%"class.std::__1::unique_ptr.403" = type { %"class.std::__1::__compressed_pair.404" }
%"class.std::__1::__compressed_pair.404" = type { %"struct.std::__1::__compressed_pair_elem.405", %"struct.std::__1::__compressed_pair_elem.407" }
%"struct.std::__1::__compressed_pair_elem.405" = type { %"struct.std::__1::__hash_node_base.406"** }
%"struct.std::__1::__hash_node_base.406" = type { %"struct.std::__1::__hash_node_base.406"* }
%"struct.std::__1::__compressed_pair_elem.407" = type { %"class.std::__1::__bucket_list_deallocator.408" }
%"class.std::__1::__bucket_list_deallocator.408" = type { %"class.std::__1::__compressed_pair.409" }
%"class.std::__1::__compressed_pair.409" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.413" = type { %"struct.std::__1::__compressed_pair_elem.414" }
%"struct.std::__1::__compressed_pair_elem.414" = type { %"struct.std::__1::__hash_node_base.406" }
%"class.std::__1::__compressed_pair.418" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.421" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::unique_ptr.428" = type { %"class.std::__1::__compressed_pair.429" }
%"class.std::__1::__compressed_pair.429" = type { %"struct.std::__1::__compressed_pair_elem.430" }
%"struct.std::__1::__compressed_pair_elem.430" = type { %"class.v8::internal::GCIdleTimeHandler"* }
%"class.v8::internal::GCIdleTimeHandler" = type opaque
%"class.std::__1::unique_ptr.434" = type { %"class.std::__1::__compressed_pair.435" }
%"class.std::__1::__compressed_pair.435" = type { %"struct.std::__1::__compressed_pair_elem.436" }
%"struct.std::__1::__compressed_pair_elem.436" = type { %"class.v8::internal::MemoryMeasurement"* }
%"class.v8::internal::MemoryMeasurement" = type { %"class.std::__1::list", %"class.std::__1::list", %"class.std::__1::list", %"class.v8::internal::Isolate"*, i8, i8, i8, %"class.v8::base::RandomNumberGenerator" }
%"class.std::__1::list" = type { %"class.std::__1::__list_imp" }
%"class.std::__1::__list_imp" = type { %"struct.std::__1::__list_node_base", %"class.std::__1::__compressed_pair.437" }
%"struct.std::__1::__list_node_base" = type { %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"* }
%"class.std::__1::__compressed_pair.437" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.v8::base::RandomNumberGenerator" = type { i64, i64, i64 }
%"class.std::__1::unique_ptr.444" = type { %"class.std::__1::__compressed_pair.445" }
%"class.std::__1::__compressed_pair.445" = type { %"struct.std::__1::__compressed_pair_elem.446" }
%"struct.std::__1::__compressed_pair_elem.446" = type { %"class.v8::internal::MemoryReducer"* }
%"class.v8::internal::MemoryReducer" = type opaque
%"class.std::__1::unique_ptr.450" = type { %"class.std::__1::__compressed_pair.451" }
%"class.std::__1::__compressed_pair.451" = type { %"struct.std::__1::__compressed_pair_elem.452" }
%"struct.std::__1::__compressed_pair_elem.452" = type { %"class.v8::internal::ObjectStats"* }
%"class.v8::internal::ObjectStats" = type opaque
%"class.std::__1::unique_ptr.456" = type { %"class.std::__1::__compressed_pair.457" }
%"class.std::__1::__compressed_pair.457" = type { %"struct.std::__1::__compressed_pair_elem.458" }
%"struct.std::__1::__compressed_pair_elem.458" = type { %"class.v8::internal::ScavengeJob"* }
%"class.v8::internal::ScavengeJob" = type opaque
%"class.std::__1::unique_ptr.462" = type { %"class.std::__1::__compressed_pair.463" }
%"class.std::__1::__compressed_pair.463" = type { %"struct.std::__1::__compressed_pair_elem.464" }
%"struct.std::__1::__compressed_pair_elem.464" = type { %"class.v8::internal::AllocationObserver"* }
%"class.std::__1::unique_ptr.468" = type { %"class.std::__1::__compressed_pair.469" }
%"class.std::__1::__compressed_pair.469" = type { %"struct.std::__1::__compressed_pair_elem.470" }
%"struct.std::__1::__compressed_pair_elem.470" = type { %"class.v8::internal::LocalEmbedderHeapTracer"* }
%"class.v8::internal::LocalEmbedderHeapTracer" = type opaque
%"class.std::__1::unique_ptr.474" = type { %"class.std::__1::__compressed_pair.475" }
%"class.std::__1::__compressed_pair.475" = type { %"struct.std::__1::__compressed_pair_elem.476" }
%"struct.std::__1::__compressed_pair_elem.476" = type { %"class.v8::internal::MarkingBarrier"* }
%"class.v8::internal::MarkingBarrier" = type opaque
%"class.std::__1::shared_ptr.480" = type { %"class.v8::internal::CodeRange"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::CodeRange" = type { %"class.v8::internal::VirtualMemoryCage", %"struct.std::__1::atomic.499", %"class.v8::base::Mutex" }
%"class.v8::internal::VirtualMemoryCage" = type { i32 (...)**, i64, %"class.std::__1::unique_ptr.481", %"class.v8::internal::VirtualMemory" }
%"class.std::__1::unique_ptr.481" = type { %"class.std::__1::__compressed_pair.482" }
%"class.std::__1::__compressed_pair.482" = type { %"struct.std::__1::__compressed_pair_elem.483" }
%"struct.std::__1::__compressed_pair_elem.483" = type { %"class.v8::base::BoundedPageAllocator"* }
%"class.v8::base::BoundedPageAllocator" = type { %"class.v8::PageAllocator", %"class.v8::base::Mutex", i64, i64, %"class.v8::PageAllocator"*, %"class.v8::base::RegionAllocator" }
%"class.v8::base::RegionAllocator" = type { %"class.v8::base::RegionAllocator::Region", i64, i64, i64, i64, %"class.std::__1::set.484", %"class.std::__1::set.492" }
%"class.v8::base::RegionAllocator::Region" = type <{ %"class.v8::base::AddressRegion", i32, [4 x i8] }>
%"class.std::__1::set.484" = type { %"class.std::__1::__tree.485" }
%"class.std::__1::__tree.485" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.486", %"class.std::__1::__compressed_pair.490" }
%"class.std::__1::__compressed_pair.486" = type { %"struct.std::__1::__compressed_pair_elem.80" }
%"class.std::__1::__compressed_pair.490" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::set.492" = type { %"class.std::__1::__tree.493" }
%"class.std::__1::__tree.493" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.486", %"class.std::__1::__compressed_pair.494" }
%"class.std::__1::__compressed_pair.494" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::atomic.499" = type { %"struct.std::__1::__atomic_base.500" }
%"struct.std::__1::__atomic_base.500" = type { %"struct.std::__1::__cxx_atomic_impl.501" }
%"struct.std::__1::__cxx_atomic_impl.501" = type { %"struct.std::__1::__cxx_atomic_base_impl.502" }
%"struct.std::__1::__cxx_atomic_base_impl.502" = type { i8* }
%"class.v8::CppHeap" = type opaque
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"class.v8::internal::StrongRootsEntry" = type { %"class.v8::internal::FullObjectSlot", %"class.v8::internal::FullObjectSlot", %"class.v8::internal::StrongRootsEntry"*, %"class.v8::internal::StrongRootsEntry"* }
%"class.v8::internal::FullObjectSlot" = type { %"class.v8::internal::SlotBase" }
%"class.v8::internal::SlotBase" = type { i64 }
%"class.std::__1::unordered_map.503" = type { %"class.std::__1::__hash_table.504" }
%"class.std::__1::__hash_table.504" = type <{ %"class.std::__1::unique_ptr.505", %"class.std::__1::__compressed_pair.515", %"class.std::__1::__compressed_pair.520", %"class.std::__1::__compressed_pair.523", [4 x i8] }>
%"class.std::__1::unique_ptr.505" = type { %"class.std::__1::__compressed_pair.506" }
%"class.std::__1::__compressed_pair.506" = type { %"struct.std::__1::__compressed_pair_elem.507", %"struct.std::__1::__compressed_pair_elem.509" }
%"struct.std::__1::__compressed_pair_elem.507" = type { %"struct.std::__1::__hash_node_base.508"** }
%"struct.std::__1::__hash_node_base.508" = type { %"struct.std::__1::__hash_node_base.508"* }
%"struct.std::__1::__compressed_pair_elem.509" = type { %"class.std::__1::__bucket_list_deallocator.510" }
%"class.std::__1::__bucket_list_deallocator.510" = type { %"class.std::__1::__compressed_pair.511" }
%"class.std::__1::__compressed_pair.511" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.515" = type { %"struct.std::__1::__compressed_pair_elem.516" }
%"struct.std::__1::__compressed_pair_elem.516" = type { %"struct.std::__1::__hash_node_base.508" }
%"class.std::__1::__compressed_pair.520" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.523" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::unique_ptr.529" = type { %"class.std::__1::__compressed_pair.530" }
%"class.std::__1::__compressed_pair.530" = type { %"struct.std::__1::__compressed_pair_elem.531" }
%"struct.std::__1::__compressed_pair_elem.531" = type { %"class.v8::internal::GlobalHandleVector"* }
%"class.v8::internal::GlobalHandleVector" = type opaque
%"class.std::__1::unique_ptr.535" = type { %"class.std::__1::__compressed_pair.536" }
%"class.std::__1::__compressed_pair.536" = type { %"struct.std::__1::__compressed_pair_elem.537" }
%"struct.std::__1::__compressed_pair_elem.537" = type { %"class.v8::internal::GlobalSafepoint"* }
%"class.v8::internal::GlobalSafepoint" = type opaque
%"class.v8::internal::Heap::ExternalStringTable" = type { %"class.v8::internal::Heap"*, %"class.std::__1::vector.541", %"class.std::__1::vector.541" }
%"class.std::__1::unique_ptr.548" = type { %"class.std::__1::__compressed_pair.549" }
%"class.std::__1::__compressed_pair.549" = type { %"struct.std::__1::__compressed_pair_elem.550" }
%"struct.std::__1::__compressed_pair_elem.550" = type { %"class.v8::internal::CollectionBarrier"* }
%"class.v8::internal::CollectionBarrier" = type opaque
%"class.std::__1::unordered_set.330" = type { %"class.std::__1::__hash_table.331" }
%"class.std::__1::__hash_table.331" = type <{ %"class.std::__1::unique_ptr.332", %"class.std::__1::__compressed_pair.342", %"class.std::__1::__compressed_pair.347", %"class.std::__1::__compressed_pair.351", [4 x i8] }>
%"class.std::__1::unique_ptr.332" = type { %"class.std::__1::__compressed_pair.333" }
%"class.std::__1::__compressed_pair.333" = type { %"struct.std::__1::__compressed_pair_elem.334", %"struct.std::__1::__compressed_pair_elem.336" }
%"struct.std::__1::__compressed_pair_elem.334" = type { %"struct.std::__1::__hash_node_base.335"** }
%"struct.std::__1::__hash_node_base.335" = type { %"struct.std::__1::__hash_node_base.335"* }
%"struct.std::__1::__compressed_pair_elem.336" = type { %"class.std::__1::__bucket_list_deallocator.337" }
%"class.std::__1::__bucket_list_deallocator.337" = type { %"class.std::__1::__compressed_pair.338" }
%"class.std::__1::__compressed_pair.338" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.342" = type { %"struct.std::__1::__compressed_pair_elem.343" }
%"struct.std::__1::__compressed_pair_elem.343" = type { %"struct.std::__1::__hash_node_base.335" }
%"class.std::__1::__compressed_pair.347" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.351" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::unordered_map.580" = type { %"class.std::__1::__hash_table.581" }
%"class.std::__1::__hash_table.581" = type <{ %"class.std::__1::unique_ptr.582", %"class.std::__1::__compressed_pair.592", %"class.std::__1::__compressed_pair.597", %"class.std::__1::__compressed_pair.600", [4 x i8] }>
%"class.std::__1::unique_ptr.582" = type { %"class.std::__1::__compressed_pair.583" }
%"class.std::__1::__compressed_pair.583" = type { %"struct.std::__1::__compressed_pair_elem.584", %"struct.std::__1::__compressed_pair_elem.586" }
%"struct.std::__1::__compressed_pair_elem.584" = type { %"struct.std::__1::__hash_node_base.585"** }
%"struct.std::__1::__hash_node_base.585" = type { %"struct.std::__1::__hash_node_base.585"* }
%"struct.std::__1::__compressed_pair_elem.586" = type { %"class.std::__1::__bucket_list_deallocator.587" }
%"class.std::__1::__bucket_list_deallocator.587" = type { %"class.std::__1::__compressed_pair.588" }
%"class.std::__1::__compressed_pair.588" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.592" = type { %"struct.std::__1::__compressed_pair_elem.593" }
%"struct.std::__1::__compressed_pair_elem.593" = type { %"struct.std::__1::__hash_node_base.585" }
%"class.std::__1::__compressed_pair.597" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.600" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::unordered_map.554" = type { %"class.std::__1::__hash_table.555" }
%"class.std::__1::__hash_table.555" = type <{ %"class.std::__1::unique_ptr.556", %"class.std::__1::__compressed_pair.566", %"class.std::__1::__compressed_pair.571", %"class.std::__1::__compressed_pair.574", [4 x i8] }>
%"class.std::__1::unique_ptr.556" = type { %"class.std::__1::__compressed_pair.557" }
%"class.std::__1::__compressed_pair.557" = type { %"struct.std::__1::__compressed_pair_elem.558", %"struct.std::__1::__compressed_pair_elem.560" }
%"struct.std::__1::__compressed_pair_elem.558" = type { %"struct.std::__1::__hash_node_base.559"** }
%"struct.std::__1::__hash_node_base.559" = type { %"struct.std::__1::__hash_node_base.559"* }
%"struct.std::__1::__compressed_pair_elem.560" = type { %"class.std::__1::__bucket_list_deallocator.561" }
%"class.std::__1::__bucket_list_deallocator.561" = type { %"class.std::__1::__compressed_pair.562" }
%"class.std::__1::__compressed_pair.562" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.566" = type { %"struct.std::__1::__compressed_pair_elem.567" }
%"struct.std::__1::__compressed_pair_elem.567" = type { %"struct.std::__1::__hash_node_base.559" }
%"class.std::__1::__compressed_pair.571" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.574" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::unordered_map.604" = type { %"class.std::__1::__hash_table.605" }
%"class.std::__1::__hash_table.605" = type <{ %"class.std::__1::unique_ptr.606", %"class.std::__1::__compressed_pair.616", %"class.std::__1::__compressed_pair.621", %"class.std::__1::__compressed_pair.626", [4 x i8] }>
%"class.std::__1::unique_ptr.606" = type { %"class.std::__1::__compressed_pair.607" }
%"class.std::__1::__compressed_pair.607" = type { %"struct.std::__1::__compressed_pair_elem.608", %"struct.std::__1::__compressed_pair_elem.610" }
%"struct.std::__1::__compressed_pair_elem.608" = type { %"struct.std::__1::__hash_node_base.609"** }
%"struct.std::__1::__hash_node_base.609" = type { %"struct.std::__1::__hash_node_base.609"* }
%"struct.std::__1::__compressed_pair_elem.610" = type { %"class.std::__1::__bucket_list_deallocator.611" }
%"class.std::__1::__bucket_list_deallocator.611" = type { %"class.std::__1::__compressed_pair.612" }
%"class.std::__1::__compressed_pair.612" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.616" = type { %"struct.std::__1::__compressed_pair_elem.617" }
%"struct.std::__1::__compressed_pair_elem.617" = type { %"struct.std::__1::__hash_node_base.609" }
%"class.std::__1::__compressed_pair.621" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.626" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::vector.632" = type { %"class.std::__1::__vector_base.633" }
%"class.std::__1::__vector_base.633" = type { %"class.v8::internal::HeapObjectAllocationTracker"**, %"class.v8::internal::HeapObjectAllocationTracker"**, %"class.std::__1::__compressed_pair.634" }
%"class.v8::internal::HeapObjectAllocationTracker" = type { i32 (...)** }
%"class.std::__1::__compressed_pair.634" = type { %"struct.std::__1::__compressed_pair_elem.635" }
%"struct.std::__1::__compressed_pair_elem.635" = type { %"class.v8::internal::HeapObjectAllocationTracker"** }
%"class.std::__1::unique_ptr.639" = type { %"class.std::__1::__compressed_pair.640" }
%"class.std::__1::__compressed_pair.640" = type { %"struct.std::__1::__compressed_pair_elem.641" }
%"struct.std::__1::__compressed_pair_elem.641" = type { %"class.v8::internal::third_party_heap::Heap"* }
%"class.v8::internal::third_party_heap::Heap" = type { i8 }
%"class.v8::internal::ReadOnlyHeap" = type { i32 (...)**, i8, %"class.v8::internal::ReadOnlySpace"*, %"class.std::__1::vector.541" }
%"class.std::__1::shared_ptr.645" = type { %"class.v8::internal::ReadOnlyArtifacts"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::ReadOnlyArtifacts" = type { i32 (...)**, %"class.std::__1::vector.139", %"class.v8::internal::AllocationStats", %"class.std::__1::unique_ptr.646", %"class.std::__1::unique_ptr.660" }
%"class.std::__1::unique_ptr.646" = type { %"class.std::__1::__compressed_pair.647" }
%"class.std::__1::__compressed_pair.647" = type { %"struct.std::__1::__compressed_pair_elem.648" }
%"struct.std::__1::__compressed_pair_elem.648" = type { %"class.v8::internal::SharedReadOnlySpace"* }
%"class.v8::internal::SharedReadOnlySpace" = type { %"class.v8::internal::ReadOnlySpace", %"class.std::__1::vector.649" }
%"class.std::__1::vector.649" = type { %"class.std::__1::__vector_base.650" }
%"class.std::__1::__vector_base.650" = type { %"class.std::__1::unique_ptr.651"*, %"class.std::__1::unique_ptr.651"*, %"class.std::__1::__compressed_pair.652" }
%"class.std::__1::unique_ptr.651" = type { %"class.std::__1::__compressed_pair.1168" }
%"class.std::__1::__compressed_pair.1168" = type { %"struct.std::__1::__compressed_pair_elem.1169" }
%"struct.std::__1::__compressed_pair_elem.1169" = type { %"class.v8::PageAllocator::SharedMemoryMapping"* }
%"class.v8::PageAllocator::SharedMemoryMapping" = type { i32 (...)** }
%"class.std::__1::__compressed_pair.652" = type { %"struct.std::__1::__compressed_pair_elem.653" }
%"struct.std::__1::__compressed_pair_elem.653" = type { %"class.std::__1::unique_ptr.651"* }
%"class.std::__1::unique_ptr.660" = type { %"class.std::__1::__compressed_pair.661" }
%"class.std::__1::__compressed_pair.661" = type { %"struct.std::__1::__compressed_pair_elem.662" }
%"struct.std::__1::__compressed_pair_elem.662" = type { %"class.v8::internal::ReadOnlyHeap"* }
%"class.std::__1::unique_ptr.666" = type { %"class.std::__1::__compressed_pair.667" }
%"class.std::__1::__compressed_pair.667" = type { %"struct.std::__1::__compressed_pair_elem.668" }
%"struct.std::__1::__compressed_pair_elem.668" = type { %"class.v8::internal::StringTable"* }
%"class.v8::internal::StringTable" = type { %"struct.std::__1::atomic.669", %"class.v8::base::Mutex" }
%"struct.std::__1::atomic.669" = type { %"struct.std::__1::__atomic_base.670" }
%"struct.std::__1::__atomic_base.670" = type { %"struct.std::__1::__cxx_atomic_impl.671" }
%"struct.std::__1::__cxx_atomic_impl.671" = type { %"struct.std::__1::__cxx_atomic_base_impl.672" }
%"struct.std::__1::__cxx_atomic_base_impl.672" = type { %"class.v8::internal::StringTable::Data"* }
%"class.v8::internal::StringTable::Data" = type opaque
%"class.v8::internal::Isolate::EntryStackItem" = type { i32, %"class.v8::internal::Isolate::PerIsolateThreadData"*, %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate::EntryStackItem"* }
%"class.v8::internal::Isolate::PerIsolateThreadData" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::ThreadId", i64, %"class.v8::internal::ThreadState"* }
%"class.v8::internal::ThreadState" = type opaque
%"class.v8::internal::StringStream" = type opaque
%"class.v8::internal::Bootstrapper" = type { %"class.v8::internal::Isolate"*, i32, %"class.v8::internal::SourceCodeCache" }
%"class.v8::internal::SourceCodeCache" = type { i32, %"class.v8::internal::FixedArray" }
%"class.v8::internal::FixedArray" = type { %"class.v8::internal::TorqueGeneratedFixedArray" }
%"class.v8::internal::TorqueGeneratedFixedArray" = type { %"class.v8::internal::FixedArrayBase" }
%"class.v8::internal::FixedArrayBase" = type { %"class.v8::internal::TorqueGeneratedFixedArrayBase" }
%"class.v8::internal::TorqueGeneratedFixedArrayBase" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::RuntimeProfiler" = type opaque
%"class.v8::internal::CompilationCache" = type opaque
%"class.std::__1::shared_ptr.676" = type { %"class.v8::internal::Counters"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::Counters" = type { %"class.std::__1::enable_shared_from_this", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::AggregatableHistogramTimer", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounterThreadSafe", %"class.v8::internal::StatsCounterThreadSafe", %"class.v8::internal::StatsCounterThreadSafe", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::RuntimeCallStats", %"class.v8::internal::WorkerThreadRuntimeCallStats", %"class.v8::internal::Isolate"*, %"class.v8::internal::StatsTable" }
%"class.std::__1::enable_shared_from_this" = type { %"class.std::__1::weak_ptr" }
%"class.std::__1::weak_ptr" = type { %"class.v8::internal::Counters"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::HistogramTimer" = type { %"class.v8::internal::TimedHistogram.base", %"class.v8::base::ElapsedTimer" }
%"class.v8::internal::TimedHistogram.base" = type <{ %"class.v8::internal::Histogram", i32 }>
%"class.v8::base::ElapsedTimer" = type { %"class.v8::base::TimeTicks" }
%"class.v8::base::TimeTicks" = type { %"class.v8::base::time_internal::TimeBase" }
%"class.v8::base::time_internal::TimeBase" = type { i64 }
%"class.v8::internal::TimedHistogram" = type <{ %"class.v8::internal::Histogram", i32, [4 x i8] }>
%"class.v8::internal::AggregatableHistogramTimer" = type { %"class.v8::internal::Histogram", %"class.v8::base::TimeDelta" }
%"class.v8::base::TimeDelta" = type { i64 }
%"class.v8::internal::Histogram" = type { i8*, i32, i32, i32, i8*, %"class.v8::internal::Counters"* }
%"class.v8::internal::StatsCounterThreadSafe" = type { %"class.v8::internal::StatsCounterBase", %"class.v8::base::Mutex" }
%"class.v8::internal::StatsCounterBase" = type { %"class.v8::internal::Counters"*, i8*, i32* }
%"class.v8::internal::StatsCounter" = type <{ %"class.v8::internal::StatsCounterBase", i8, [7 x i8] }>
%"class.v8::internal::RuntimeCallStats" = type { %"class.v8::base::AtomicValue", %"class.v8::base::AtomicValue.677", i8, i32, %"class.v8::internal::ThreadId", [1370 x %"class.v8::internal::RuntimeCallCounter"] }
%"class.v8::base::AtomicValue" = type { i64 }
%"class.v8::base::AtomicValue.677" = type { i64 }
%"class.v8::internal::RuntimeCallCounter" = type { i8*, i64, i64 }
%"class.v8::internal::WorkerThreadRuntimeCallStats" = type <{ %"class.v8::base::Mutex", %"class.std::__1::vector.678", %"class.v8::base::Optional", %"class.v8::internal::ThreadId", [4 x i8] }>
%"class.std::__1::vector.678" = type { %"class.std::__1::__vector_base.679" }
%"class.std::__1::__vector_base.679" = type { %"class.std::__1::unique_ptr.680"*, %"class.std::__1::unique_ptr.680"*, %"class.std::__1::__compressed_pair.681" }
%"class.std::__1::unique_ptr.680" = type opaque
%"class.std::__1::__compressed_pair.681" = type { %"struct.std::__1::__compressed_pair_elem.682" }
%"struct.std::__1::__compressed_pair_elem.682" = type { %"class.std::__1::unique_ptr.680"* }
%"class.v8::base::Optional" = type { %"class.v8::base::internal::OptionalBase" }
%"class.v8::base::internal::OptionalBase" = type { %"struct.v8::base::internal::OptionalStorage" }
%"struct.v8::base::internal::OptionalStorage" = type { %"struct.v8::base::internal::OptionalStorageBase" }
%"struct.v8::base::internal::OptionalStorageBase" = type { i8, %union.anon }
%union.anon = type { i32 }
%"class.v8::internal::StatsTable" = type { i32* (i8*)*, i8* (i8*, i32, i32, i64)*, void (i8*, i32)* }
%"class.v8::base::RecursiveMutex" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.v8::base::SharedMutex" = type { %union.pthread_rwlock_t }
%union.pthread_rwlock_t = type { %struct.__pthread_rwlock_arch_t }
%struct.__pthread_rwlock_arch_t = type { i32, i32, i32, i32, i32, i32, i32, i32, i8, [7 x i8], i64, i32 }
%"class.v8::internal::Logger" = type { %"class.v8::internal::CodeEventListener", %"class.v8::internal::Isolate"*, %"class.std::__1::unique_ptr.686", %"class.std::__1::unique_ptr.692", %"struct.std::__1::atomic.152", %"class.std::__1::unique_ptr.698", %"class.std::__1::unique_ptr.704", %"class.std::__1::unique_ptr.710", %"class.std::__1::unique_ptr.716", %"class.std::__1::unique_ptr.722", %"class.std::__1::set.728", i32, i8, %"class.v8::internal::ExistingCodeLogger", %"class.v8::base::ElapsedTimer" }
%"class.v8::internal::CodeEventListener" = type { i32 (...)** }
%"class.std::__1::unique_ptr.686" = type { %"class.std::__1::__compressed_pair.687" }
%"class.std::__1::__compressed_pair.687" = type { %"struct.std::__1::__compressed_pair_elem.688" }
%"struct.std::__1::__compressed_pair_elem.688" = type { %"class.v8::internal::Ticker"* }
%"class.v8::internal::Ticker" = type opaque
%"class.std::__1::unique_ptr.692" = type { %"class.std::__1::__compressed_pair.693" }
%"class.std::__1::__compressed_pair.693" = type { %"struct.std::__1::__compressed_pair_elem.694" }
%"struct.std::__1::__compressed_pair_elem.694" = type { %"class.v8::internal::Profiler"* }
%"class.v8::internal::Profiler" = type opaque
%"class.std::__1::unique_ptr.698" = type { %"class.std::__1::__compressed_pair.699" }
%"class.std::__1::__compressed_pair.699" = type { %"struct.std::__1::__compressed_pair_elem.700" }
%"struct.std::__1::__compressed_pair_elem.700" = type { %"class.v8::internal::Log"* }
%"class.v8::internal::Log" = type opaque
%"class.std::__1::unique_ptr.704" = type { %"class.std::__1::__compressed_pair.705" }
%"class.std::__1::__compressed_pair.705" = type { %"struct.std::__1::__compressed_pair_elem.706" }
%"struct.std::__1::__compressed_pair_elem.706" = type { %"class.v8::internal::PerfBasicLogger"* }
%"class.v8::internal::PerfBasicLogger" = type opaque
%"class.std::__1::unique_ptr.710" = type { %"class.std::__1::__compressed_pair.711" }
%"class.std::__1::__compressed_pair.711" = type { %"struct.std::__1::__compressed_pair_elem.712" }
%"struct.std::__1::__compressed_pair_elem.712" = type { %"class.v8::internal::PerfJitLogger"* }
%"class.v8::internal::PerfJitLogger" = type opaque
%"class.std::__1::unique_ptr.716" = type { %"class.std::__1::__compressed_pair.717" }
%"class.std::__1::__compressed_pair.717" = type { %"struct.std::__1::__compressed_pair_elem.718" }
%"struct.std::__1::__compressed_pair_elem.718" = type { %"class.v8::internal::LowLevelLogger"* }
%"class.v8::internal::LowLevelLogger" = type opaque
%"class.std::__1::unique_ptr.722" = type { %"class.std::__1::__compressed_pair.723" }
%"class.std::__1::__compressed_pair.723" = type { %"struct.std::__1::__compressed_pair_elem.724" }
%"struct.std::__1::__compressed_pair_elem.724" = type { %"class.v8::internal::JitLogger"* }
%"class.v8::internal::JitLogger" = type opaque
%"class.std::__1::set.728" = type { %"class.std::__1::__tree.729" }
%"class.std::__1::__tree.729" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.730", %"class.std::__1::__compressed_pair.734" }
%"class.std::__1::__compressed_pair.730" = type { %"struct.std::__1::__compressed_pair_elem.80" }
%"class.std::__1::__compressed_pair.734" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.v8::internal::ExistingCodeLogger" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::CodeEventListener"* }
%"class.v8::internal::StubCache" = type { [2048 x %"struct.v8::internal::StubCache::Entry"], [512 x %"struct.v8::internal::StubCache::Entry"], %"class.v8::internal::Isolate"* }
%"struct.v8::internal::StubCache::Entry" = type { %"class.v8::internal::StrongTaggedValue", %"class.v8::internal::TaggedValue", %"class.v8::internal::StrongTaggedValue" }
%"class.v8::internal::TaggedValue" = type { %"class.v8::internal::TaggedImpl.737" }
%"class.v8::internal::TaggedImpl.737" = type { i32 }
%"class.v8::internal::StrongTaggedValue" = type { %"class.v8::internal::TaggedImpl.736" }
%"class.v8::internal::TaggedImpl.736" = type { i32 }
%"class.v8::internal::Deoptimizer" = type opaque
%"class.v8::internal::MaterializedObjectStore" = type opaque
%"class.v8::internal::DescriptorLookupCache" = type { [64 x %"struct.v8::internal::DescriptorLookupCache::Key"], [64 x i32] }
%"struct.v8::internal::DescriptorLookupCache::Key" = type { %"class.v8::internal::Map", %"class.v8::internal::Name" }
%"class.v8::internal::Map" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::Name" = type { %"class.v8::internal::TorqueGeneratedName" }
%"class.v8::internal::TorqueGeneratedName" = type { %"class.v8::internal::PrimitiveHeapObject" }
%"class.v8::internal::PrimitiveHeapObject" = type { %"class.v8::internal::TorqueGeneratedPrimitiveHeapObject" }
%"class.v8::internal::TorqueGeneratedPrimitiveHeapObject" = type { %"class.v8::internal::HeapObject" }
%"struct.v8::internal::HandleScopeData" = type { i64*, i64*, i32, i32, %"class.v8::internal::CanonicalHandleScope"* }
%"class.v8::internal::CanonicalHandleScope" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::OptimizedCompilationInfo"*, %"class.v8::internal::Zone"*, %"class.v8::internal::RootIndexMap"*, %"class.std::__1::unique_ptr.744", i32, %"class.v8::internal::CanonicalHandleScope"* }
%"class.v8::internal::OptimizedCompilationInfo" = type opaque
%"class.v8::internal::RootIndexMap" = type opaque
%"class.std::__1::unique_ptr.744" = type { %"class.std::__1::__compressed_pair.745" }
%"class.std::__1::__compressed_pair.745" = type { %"struct.std::__1::__compressed_pair_elem.746" }
%"struct.std::__1::__compressed_pair_elem.746" = type { %"class.v8::internal::IdentityMap"* }
%"class.v8::internal::IdentityMap" = type opaque
%"class.v8::internal::HandleScopeImplementer" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::DetachableVector", %"class.v8::internal::DetachableVector.750", %"class.v8::internal::DetachableVector.751", %"class.v8::internal::DetachableVector.750", i64*, i64*, %"struct.v8::internal::HandleScopeData" }
%"class.v8::internal::DetachableVector" = type { %"class.v8::internal::DetachableVectorBase" }
%"class.v8::internal::DetachableVectorBase" = type { i8*, i64, i64 }
%"class.v8::internal::DetachableVector.751" = type { %"class.v8::internal::DetachableVectorBase" }
%"class.v8::internal::DetachableVector.750" = type { %"class.v8::internal::DetachableVectorBase" }
%"class.v8::internal::UnicodeCache" = type opaque
%"class.v8::internal::AccountingAllocator" = type { i32 (...)**, %"struct.std::__1::atomic.19", %"struct.std::__1::atomic.19", %"class.std::__1::unique_ptr.738", %"class.std::__1::unique_ptr.481" }
%"class.std::__1::unique_ptr.738" = type { %"class.std::__1::__compressed_pair.739" }
%"class.std::__1::__compressed_pair.739" = type { %"struct.std::__1::__compressed_pair_elem.740" }
%"struct.std::__1::__compressed_pair_elem.740" = type { %"class.v8::internal::VirtualMemory"* }
%"class.v8::internal::InnerPointerToCodeCache" = type opaque
%"class.v8::internal::GlobalHandles" = type { %"class.v8::internal::Isolate"*, %"class.std::__1::unique_ptr.752", %"class.std::__1::vector.758", %"class.std::__1::unique_ptr.765", %"class.std::__1::vector.772", %"class.std::__1::unique_ptr.779", i64, %"class.std::__1::vector.785", %"class.std::__1::vector.793", %"class.std::__1::vector.801", i8, i8, i32 }
%"class.std::__1::unique_ptr.752" = type { %"class.std::__1::__compressed_pair.753" }
%"class.std::__1::__compressed_pair.753" = type { %"struct.std::__1::__compressed_pair_elem.754" }
%"struct.std::__1::__compressed_pair_elem.754" = type { %"class.v8::internal::GlobalHandles::NodeSpace"* }
%"class.v8::internal::GlobalHandles::NodeSpace" = type opaque
%"class.std::__1::vector.758" = type { %"class.std::__1::__vector_base.759" }
%"class.std::__1::__vector_base.759" = type { %"class.v8::internal::GlobalHandles::Node"**, %"class.v8::internal::GlobalHandles::Node"**, %"class.std::__1::__compressed_pair.760" }
%"class.v8::internal::GlobalHandles::Node" = type opaque
%"class.std::__1::__compressed_pair.760" = type { %"struct.std::__1::__compressed_pair_elem.761" }
%"struct.std::__1::__compressed_pair_elem.761" = type { %"class.v8::internal::GlobalHandles::Node"** }
%"class.std::__1::unique_ptr.765" = type { %"class.std::__1::__compressed_pair.766" }
%"class.std::__1::__compressed_pair.766" = type { %"struct.std::__1::__compressed_pair_elem.767" }
%"struct.std::__1::__compressed_pair_elem.767" = type { %"class.v8::internal::GlobalHandles::NodeSpace.768"* }
%"class.v8::internal::GlobalHandles::NodeSpace.768" = type opaque
%"class.std::__1::vector.772" = type { %"class.std::__1::__vector_base.773" }
%"class.std::__1::__vector_base.773" = type { %"class.v8::internal::GlobalHandles::TracedNode"**, %"class.v8::internal::GlobalHandles::TracedNode"**, %"class.std::__1::__compressed_pair.774" }
%"class.v8::internal::GlobalHandles::TracedNode" = type opaque
%"class.std::__1::__compressed_pair.774" = type { %"struct.std::__1::__compressed_pair_elem.775" }
%"struct.std::__1::__compressed_pair_elem.775" = type { %"class.v8::internal::GlobalHandles::TracedNode"** }
%"class.std::__1::unique_ptr.779" = type { %"class.std::__1::__compressed_pair.780" }
%"class.std::__1::__compressed_pair.780" = type { %"struct.std::__1::__compressed_pair_elem.781" }
%"struct.std::__1::__compressed_pair_elem.781" = type { %"class.v8::internal::GlobalHandles::OnStackTracedNodeSpace"* }
%"class.v8::internal::GlobalHandles::OnStackTracedNodeSpace" = type opaque
%"class.std::__1::vector.785" = type { %"class.std::__1::__vector_base.786" }
%"class.std::__1::__vector_base.786" = type { %"struct.std::__1::pair.787"*, %"struct.std::__1::pair.787"*, %"class.std::__1::__compressed_pair.788" }
%"struct.std::__1::pair.787" = type opaque
%"class.std::__1::__compressed_pair.788" = type { %"struct.std::__1::__compressed_pair_elem.789" }
%"struct.std::__1::__compressed_pair_elem.789" = type { %"struct.std::__1::pair.787"* }
%"class.std::__1::vector.793" = type { %"class.std::__1::__vector_base.794" }
%"class.std::__1::__vector_base.794" = type { %"struct.std::__1::pair.795"*, %"struct.std::__1::pair.795"*, %"class.std::__1::__compressed_pair.796" }
%"struct.std::__1::pair.795" = type opaque
%"class.std::__1::__compressed_pair.796" = type { %"struct.std::__1::__compressed_pair_elem.797" }
%"struct.std::__1::__compressed_pair_elem.797" = type { %"struct.std::__1::pair.795"* }
%"class.std::__1::vector.801" = type { %"class.std::__1::__vector_base.802" }
%"class.std::__1::__vector_base.802" = type { %"class.v8::internal::GlobalHandles::PendingPhantomCallback"*, %"class.v8::internal::GlobalHandles::PendingPhantomCallback"*, %"class.std::__1::__compressed_pair.803" }
%"class.v8::internal::GlobalHandles::PendingPhantomCallback" = type { void (%"class.v8::WeakCallbackInfo"*)*, i8*, [2 x i8*] }
%"class.v8::WeakCallbackInfo" = type { %"class.v8::Isolate"*, i8*, {}**, [2 x i8*] }
%"class.std::__1::__compressed_pair.803" = type { %"struct.std::__1::__compressed_pair_elem.804" }
%"struct.std::__1::__compressed_pair_elem.804" = type { %"class.v8::internal::GlobalHandles::PendingPhantomCallback"* }
%"class.v8::internal::EternalHandles" = type { i32, %"class.std::__1::vector.808", %"class.std::__1::vector.815" }
%"class.v8::internal::ThreadManager" = type opaque
%"class.v8::bigint::Processor" = type opaque
%"class.v8::internal::RuntimeState" = type { %"class.std::__1::unique_ptr.822" }
%"class.std::__1::unique_ptr.822" = type { %"class.std::__1::__compressed_pair.823" }
%"class.std::__1::__compressed_pair.823" = type { %"struct.std::__1::__compressed_pair_elem.824" }
%"struct.std::__1::__compressed_pair_elem.824" = type { %"struct.v8::internal::Runtime::Function"* }
%"struct.v8::internal::Runtime::Function" = type { i32, i32, i8*, i64, i8, i8 }
%"class.v8::internal::Builtins" = type { %"class.v8::internal::Isolate"*, i8, i32 }
%"class.v8::internal::SetupIsolateDelegate" = type opaque
%"class.v8::internal::RegExpStack" = type opaque
%"class.std::__1::vector.815" = type { %"class.std::__1::__vector_base.816" }
%"class.std::__1::__vector_base.816" = type { i32*, i32*, %"class.std::__1::__compressed_pair.817" }
%"class.std::__1::__compressed_pair.817" = type { %"struct.std::__1::__compressed_pair_elem.818" }
%"struct.std::__1::__compressed_pair_elem.818" = type { i32* }
%"class.v8::internal::DateCache" = type opaque
%"struct.std::__1::atomic.828" = type { %"struct.std::__1::__atomic_base.829" }
%"struct.std::__1::__atomic_base.829" = type { %"struct.std::__1::__cxx_atomic_impl.830" }
%"struct.std::__1::__cxx_atomic_impl.830" = type { %"struct.std::__1::__cxx_atomic_base_impl.831" }
%"struct.std::__1::__cxx_atomic_base_impl.831" = type { i32 }
%"class.v8::Promise" = type { i8 }
%"struct.std::__1::atomic.838" = type { %"struct.std::__1::__atomic_base.839" }
%"struct.std::__1::__atomic_base.839" = type { %"struct.std::__1::__cxx_atomic_impl.840" }
%"struct.std::__1::__cxx_atomic_impl.840" = type { %"struct.std::__1::__cxx_atomic_base_impl.841" }
%"struct.std::__1::__cxx_atomic_base_impl.841" = type { i32 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.843" }
%"class.std::__1::__compressed_pair.843" = type { %"struct.std::__1::__compressed_pair_elem.844" }
%"struct.std::__1::__compressed_pair_elem.844" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.845 }
%union.anon.845 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::unordered_map.849" = type { %"class.std::__1::__hash_table.850" }
%"class.std::__1::__hash_table.850" = type <{ %"class.std::__1::unique_ptr.851", %"class.std::__1::__compressed_pair.861", %"class.std::__1::__compressed_pair.866", %"class.std::__1::__compressed_pair.869", [4 x i8] }>
%"class.std::__1::unique_ptr.851" = type { %"class.std::__1::__compressed_pair.852" }
%"class.std::__1::__compressed_pair.852" = type { %"struct.std::__1::__compressed_pair_elem.853", %"struct.std::__1::__compressed_pair_elem.855" }
%"struct.std::__1::__compressed_pair_elem.853" = type { %"struct.std::__1::__hash_node_base.854"** }
%"struct.std::__1::__hash_node_base.854" = type { %"struct.std::__1::__hash_node_base.854"* }
%"struct.std::__1::__compressed_pair_elem.855" = type { %"class.std::__1::__bucket_list_deallocator.856" }
%"class.std::__1::__bucket_list_deallocator.856" = type { %"class.std::__1::__compressed_pair.857" }
%"class.std::__1::__compressed_pair.857" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.861" = type { %"struct.std::__1::__compressed_pair_elem.862" }
%"struct.std::__1::__compressed_pair_elem.862" = type { %"struct.std::__1::__hash_node_base.854" }
%"class.std::__1::__compressed_pair.866" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.869" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::atomic.152" = type { %"struct.std::__1::__atomic_base.153" }
%"struct.std::__1::__atomic_base.153" = type { %"struct.std::__1::__cxx_atomic_impl.154" }
%"struct.std::__1::__cxx_atomic_impl.154" = type { %"struct.std::__1::__cxx_atomic_base_impl.155" }
%"struct.std::__1::__cxx_atomic_base_impl.155" = type { i8 }
%"class.v8::internal::Debug" = type { %"class.v8::debug::DebugDelegate"*, i8, i8, i8, i8, i8, i8, i8, i8, i8, %"class.v8::internal::DebugInfoListNode"*, %"class.std::__1::unique_ptr.875", %"class.v8::internal::Handle.881", %"class.v8::internal::DebugFeatureTracker", %"class.v8::internal::Debug::ThreadLocal", %"class.v8::internal::Handle.882", %"class.v8::internal::Isolate"* }
%"class.v8::debug::DebugDelegate" = type { i32 (...)** }
%"class.v8::internal::DebugInfoListNode" = type { i64*, %"class.v8::internal::DebugInfoListNode"* }
%"class.std::__1::unique_ptr.875" = type { %"class.std::__1::__compressed_pair.876" }
%"class.std::__1::__compressed_pair.876" = type { %"struct.std::__1::__compressed_pair_elem.877" }
%"struct.std::__1::__compressed_pair_elem.877" = type { %"class.v8::internal::Debug::TemporaryObjectsTracker"* }
%"class.v8::internal::Debug::TemporaryObjectsTracker" = type opaque
%"class.v8::internal::Handle.881" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::DebugFeatureTracker" = type <{ %"class.v8::internal::Isolate"*, i32, [4 x i8] }>
%"class.v8::internal::Debug::ThreadLocal" = type <{ i64, i32, i8, [3 x i8], %"class.v8::internal::Object", i8, [3 x i8], i32, i32, i32, %"class.v8::internal::Object", %"class.v8::internal::Object", i32, i8, [3 x i8] }>
%"class.v8::internal::Handle.882" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::HeapProfiler" = type { %"class.v8::internal::HeapObjectAllocationTracker", %"class.std::__1::unique_ptr.883", %"class.std::__1::vector.889", %"class.std::__1::unique_ptr.897", %"class.std::__1::unique_ptr.903", i8, i8, %"class.v8::base::Mutex", %"class.std::__1::unique_ptr.909", %"class.std::__1::vector.915", %"struct.std::__1::pair.923" }
%"class.std::__1::unique_ptr.883" = type { %"class.std::__1::__compressed_pair.884" }
%"class.std::__1::__compressed_pair.884" = type { %"struct.std::__1::__compressed_pair_elem.885" }
%"struct.std::__1::__compressed_pair_elem.885" = type { %"class.v8::internal::HeapObjectsMap"* }
%"class.v8::internal::HeapObjectsMap" = type opaque
%"class.std::__1::vector.889" = type { %"class.std::__1::__vector_base.890" }
%"class.std::__1::__vector_base.890" = type { %"class.std::__1::unique_ptr.891"*, %"class.std::__1::unique_ptr.891"*, %"class.std::__1::__compressed_pair.892" }
%"class.std::__1::unique_ptr.891" = type opaque
%"class.std::__1::__compressed_pair.892" = type { %"struct.std::__1::__compressed_pair_elem.893" }
%"struct.std::__1::__compressed_pair_elem.893" = type { %"class.std::__1::unique_ptr.891"* }
%"class.std::__1::unique_ptr.897" = type { %"class.std::__1::__compressed_pair.898" }
%"class.std::__1::__compressed_pair.898" = type { %"struct.std::__1::__compressed_pair_elem.899" }
%"struct.std::__1::__compressed_pair_elem.899" = type { %"class.v8::internal::StringsStorage"* }
%"class.v8::internal::StringsStorage" = type opaque
%"class.std::__1::unique_ptr.903" = type { %"class.std::__1::__compressed_pair.904" }
%"class.std::__1::__compressed_pair.904" = type { %"struct.std::__1::__compressed_pair_elem.905" }
%"struct.std::__1::__compressed_pair_elem.905" = type { %"class.v8::internal::AllocationTracker"* }
%"class.v8::internal::AllocationTracker" = type opaque
%"class.std::__1::unique_ptr.909" = type { %"class.std::__1::__compressed_pair.910" }
%"class.std::__1::__compressed_pair.910" = type { %"struct.std::__1::__compressed_pair_elem.911" }
%"struct.std::__1::__compressed_pair_elem.911" = type { %"class.v8::internal::SamplingHeapProfiler"* }
%"class.v8::internal::SamplingHeapProfiler" = type opaque
%"class.std::__1::vector.915" = type { %"class.std::__1::__vector_base.916" }
%"class.std::__1::__vector_base.916" = type { %"struct.std::__1::pair.917"*, %"struct.std::__1::pair.917"*, %"class.std::__1::__compressed_pair.918" }
%"struct.std::__1::pair.917" = type opaque
%"class.std::__1::__compressed_pair.918" = type { %"struct.std::__1::__compressed_pair_elem.919" }
%"struct.std::__1::__compressed_pair_elem.919" = type { %"struct.std::__1::pair.917"* }
%"struct.std::__1::pair.923" = type { i8 (%"class.v8::Isolate"*, %"class.v8::Local.0"*, i16, i8*)*, i8* }
%"class.v8::Local.0" = type { %"class.v8::Value"* }
%"class.std::__1::unique_ptr.924" = type { %"class.std::__1::__compressed_pair.925" }
%"class.std::__1::__compressed_pair.925" = type { %"struct.std::__1::__compressed_pair_elem.926" }
%"struct.std::__1::__compressed_pair_elem.926" = type { %"class.v8::internal::CodeEventDispatcher"* }
%"class.v8::internal::CodeEventDispatcher" = type { %"class.v8::internal::CodeEventListener", %"class.std::__1::unordered_set.927", %"class.v8::base::Mutex" }
%"class.std::__1::unordered_set.927" = type { %"class.std::__1::__hash_table.928" }
%"class.std::__1::__hash_table.928" = type <{ %"class.std::__1::unique_ptr.929", %"class.std::__1::__compressed_pair.939", %"class.std::__1::__compressed_pair.944", %"class.std::__1::__compressed_pair.948", [4 x i8] }>
%"class.std::__1::unique_ptr.929" = type { %"class.std::__1::__compressed_pair.930" }
%"class.std::__1::__compressed_pair.930" = type { %"struct.std::__1::__compressed_pair_elem.931", %"struct.std::__1::__compressed_pair_elem.933" }
%"struct.std::__1::__compressed_pair_elem.931" = type { %"struct.std::__1::__hash_node_base.932"** }
%"struct.std::__1::__hash_node_base.932" = type { %"struct.std::__1::__hash_node_base.932"* }
%"struct.std::__1::__compressed_pair_elem.933" = type { %"class.std::__1::__bucket_list_deallocator.934" }
%"class.std::__1::__bucket_list_deallocator.934" = type { %"class.std::__1::__compressed_pair.935" }
%"class.std::__1::__compressed_pair.935" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.939" = type { %"struct.std::__1::__compressed_pair_elem.940" }
%"struct.std::__1::__compressed_pair_elem.940" = type { %"struct.std::__1::__hash_node_base.932" }
%"class.std::__1::__compressed_pair.944" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.948" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.v8::internal::AstStringConstants" = type opaque
%"class.v8::internal::interpreter::Interpreter" = type opaque
%"class.v8::internal::compiler::PerIsolateCompilerCache" = type opaque
%"class.v8::internal::CompilerDispatcher" = type opaque
%"class.std::__1::queue" = type { %"class.std::__1::deque" }
%"class.std::__1::deque" = type { %"class.std::__1::__deque_base" }
%"class.std::__1::__deque_base" = type { %"struct.std::__1::__split_buffer", i64, %"class.std::__1::__compressed_pair.962" }
%"struct.std::__1::__split_buffer" = type { %"struct.std::__1::pair.956"**, %"struct.std::__1::pair.956"**, %"struct.std::__1::pair.956"**, %"class.std::__1::__compressed_pair.957" }
%"struct.std::__1::pair.956" = type opaque
%"class.std::__1::__compressed_pair.957" = type { %"struct.std::__1::__compressed_pair_elem.958" }
%"struct.std::__1::__compressed_pair_elem.958" = type { %"struct.std::__1::pair.956"** }
%"class.std::__1::__compressed_pair.962" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.v8::String" = type { i8 }
%"class.v8::Context" = type { i8 }
%"class.v8::FunctionCallbackInfo" = type <{ i64*, i64*, i32, [4 x i8] }>
%"class.std::__1::vector.967" = type { %"class.std::__1::__vector_base.968" }
%"class.std::__1::__vector_base.968" = type { %"class.v8::internal::Handle.969"*, %"class.v8::internal::Handle.969"*, %"class.std::__1::__compressed_pair.970" }
%"class.v8::internal::Handle.969" = type { %"class.v8::internal::HandleBase" }
%"class.std::__1::__compressed_pair.970" = type { %"struct.std::__1::__compressed_pair_elem.971" }
%"struct.std::__1::__compressed_pair_elem.971" = type { %"class.v8::internal::Handle.969"* }
%"class.v8::internal::Object" = type { %"class.v8::internal::TaggedImpl" }
%"class.v8::internal::TaggedImpl" = type { i64 }
%"class.v8::internal::AddressToIndexHashMap" = type opaque
%"class.v8::internal::HeapObjectToIndexHashMap" = type opaque
%"class.v8::internal::MicrotaskQueue" = type opaque
%"class.v8::internal::CompilationStatistics" = type opaque
%"class.v8::internal::CodeTracer" = type <{ %"class.v8::internal::EmbeddedVector", %struct._IO_FILE*, i32, [4 x i8] }>
%"class.v8::internal::EmbeddedVector" = type { %"class.v8::internal::Vector", [128 x i8] }
%"class.v8::internal::Vector" = type { i8*, i64 }
%"class.v8::PromiseRejectMessage" = type { %"class.v8::Local.833", i32, %"class.v8::Local.0" }
%"class.v8::Local.833" = type { %"class.v8::Promise"* }
%"class.v8::StartupData" = type { i8*, i32 }
%"class.v8_inspector::V8Inspector" = type opaque
%"class.v8::internal::compiler::NodeObserver" = type opaque
%"class.v8::internal::OptimizingCompileDispatcher" = type opaque
%"class.std::__1::unique_ptr.975" = type { %"class.std::__1::__compressed_pair.976" }
%"class.std::__1::__compressed_pair.976" = type { %"struct.std::__1::__compressed_pair_elem.977" }
%"struct.std::__1::__compressed_pair_elem.977" = type { %"class.v8::internal::PersistentHandlesList"* }
%"class.v8::internal::PersistentHandlesList" = type { %"class.v8::base::Mutex", %"class.v8::internal::PersistentHandles"* }
%"class.std::__1::vector.981" = type { %"class.std::__1::__vector_base.982" }
%"class.std::__1::__vector_base.982" = type { void (%"class.v8::Isolate"*)**, void (%"class.v8::Isolate"*)**, %"class.std::__1::__compressed_pair.983" }
%"class.std::__1::__compressed_pair.983" = type { %"struct.std::__1::__compressed_pair_elem.984" }
%"struct.std::__1::__compressed_pair_elem.984" = type { void (%"class.v8::Isolate"*)** }
%"class.std::__1::shared_ptr.988" = type { %"class.v8::internal::metrics::Recorder"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::metrics::Recorder" = type opaque
%"class.std::__1::unordered_map.989" = type { %"class.std::__1::__hash_table.990" }
%"class.std::__1::__hash_table.990" = type <{ %"class.std::__1::unique_ptr.991", %"class.std::__1::__compressed_pair.1001", %"class.std::__1::__compressed_pair.1006", %"class.std::__1::__compressed_pair.1009", [4 x i8] }>
%"class.std::__1::unique_ptr.991" = type { %"class.std::__1::__compressed_pair.992" }
%"class.std::__1::__compressed_pair.992" = type { %"struct.std::__1::__compressed_pair_elem.993", %"struct.std::__1::__compressed_pair_elem.995" }
%"struct.std::__1::__compressed_pair_elem.993" = type { %"struct.std::__1::__hash_node_base.994"** }
%"struct.std::__1::__hash_node_base.994" = type { %"struct.std::__1::__hash_node_base.994"* }
%"struct.std::__1::__compressed_pair_elem.995" = type { %"class.std::__1::__bucket_list_deallocator.996" }
%"class.std::__1::__bucket_list_deallocator.996" = type { %"class.std::__1::__compressed_pair.997" }
%"class.std::__1::__compressed_pair.997" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.1001" = type { %"struct.std::__1::__compressed_pair_elem.1002" }
%"struct.std::__1::__compressed_pair_elem.1002" = type { %"struct.std::__1::__hash_node_base.994" }
%"class.std::__1::__compressed_pair.1006" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.1009" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.v8::metrics::LongTaskStats" = type { i64, i64, i64 }
%"class.std::__1::vector.541" = type { %"class.std::__1::__vector_base.542" }
%"class.std::__1::__vector_base.542" = type { %"class.v8::internal::Object"*, %"class.v8::internal::Object"*, %"class.std::__1::__compressed_pair.543" }
%"class.std::__1::__compressed_pair.543" = type { %"struct.std::__1::__compressed_pair_elem.544" }
%"struct.std::__1::__compressed_pair_elem.544" = type { %"class.v8::internal::Object"* }
%"class.v8::internal::BuiltinsConstantsTableBuilder" = type opaque
%"class.v8::ArrayBuffer::Allocator" = type { i32 (...)** }
%"class.std::__1::shared_ptr.160" = type { %"class.v8::ArrayBuffer::Allocator"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::FutexWaitListNode" = type { %"class.v8::internal::Isolate"*, %"class.std::__1::shared_ptr.1013", %"class.v8::internal::CancelableTaskManager"*, %"class.v8::base::ConditionVariable", %"class.v8::internal::FutexWaitListNode"*, %"class.v8::internal::FutexWaitListNode"*, %"class.std::__1::weak_ptr.1042", i64, i8*, i8, i8, %"class.v8::Global", %"class.v8::Global.1043", %"class.v8::base::TimeTicks", i64 }
%"class.std::__1::shared_ptr.1013" = type { %"class.v8::TaskRunner"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::TaskRunner" = type { i32 (...)** }
%"class.v8::base::ConditionVariable" = type { %union.pthread_cond_t }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon.1038, %union.anon.1040, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon.1038 = type { i64 }
%union.anon.1040 = type { i64 }
%"class.std::__1::weak_ptr.1042" = type { %"class.v8::internal::BackingStore"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::Global" = type { %"class.v8::PersistentBase" }
%"class.v8::PersistentBase" = type { %"class.v8::Promise"* }
%"class.v8::Global.1043" = type { %"class.v8::PersistentBase.1044" }
%"class.v8::PersistentBase.1044" = type { %"class.v8::Context"* }
%"class.v8::internal::CancelableTaskManager" = type <{ i64, %"class.std::__1::unordered_map.1014", %"class.v8::base::ConditionVariable", %"class.v8::base::Mutex", i8, [7 x i8] }>
%"class.std::__1::unordered_map.1014" = type { %"class.std::__1::__hash_table.1015" }
%"class.std::__1::__hash_table.1015" = type <{ %"class.std::__1::unique_ptr.1016", %"class.std::__1::__compressed_pair.1026", %"class.std::__1::__compressed_pair.1031", %"class.std::__1::__compressed_pair.1034", [4 x i8] }>
%"class.std::__1::unique_ptr.1016" = type { %"class.std::__1::__compressed_pair.1017" }
%"class.std::__1::__compressed_pair.1017" = type { %"struct.std::__1::__compressed_pair_elem.1018", %"struct.std::__1::__compressed_pair_elem.1020" }
%"struct.std::__1::__compressed_pair_elem.1018" = type { %"struct.std::__1::__hash_node_base.1019"** }
%"struct.std::__1::__hash_node_base.1019" = type { %"struct.std::__1::__hash_node_base.1019"* }
%"struct.std::__1::__compressed_pair_elem.1020" = type { %"class.std::__1::__bucket_list_deallocator.1021" }
%"class.std::__1::__bucket_list_deallocator.1021" = type { %"class.std::__1::__compressed_pair.1022" }
%"class.std::__1::__compressed_pair.1022" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.1026" = type { %"struct.std::__1::__compressed_pair_elem.1027" }
%"struct.std::__1::__compressed_pair_elem.1027" = type { %"struct.std::__1::__hash_node_base.1019" }
%"class.std::__1::__compressed_pair.1031" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.1034" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.v8::debug::ConsoleDelegate" = type { i32 (...)** }
%"class.v8::debug::AsyncEventDelegate" = type { i32 (...)** }
%"class.std::__1::unique_ptr.1045" = type { %"class.std::__1::__compressed_pair.1046" }
%"class.std::__1::__compressed_pair.1046" = type { %"struct.std::__1::__compressed_pair_elem.1047" }
%"struct.std::__1::__compressed_pair_elem.1047" = type { %"class.v8::internal::LocalIsolate"* }
%"class.v8::internal::LocalIsolate" = type { %"class.v8::internal::HiddenLocalFactory", %"class.v8::internal::LocalHeap", %"class.v8::internal::Isolate"*, %"class.std::__1::unique_ptr.1074", %"class.v8::internal::ThreadId", i64, %"class.v8::internal::RuntimeCallStats"* }
%"class.v8::internal::HiddenLocalFactory" = type { %"class.v8::internal::LocalFactory" }
%"class.v8::internal::LocalFactory" = type { %"class.v8::internal::ReadOnlyRoots" }
%"class.v8::internal::ReadOnlyRoots" = type { i64* }
%"class.std::__1::unique_ptr.1074" = type { %"class.std::__1::__compressed_pair.1075" }
%"class.std::__1::__compressed_pair.1075" = type { %"struct.std::__1::__compressed_pair_elem.1076" }
%"struct.std::__1::__compressed_pair_elem.1076" = type { %"class.v8::internal::LocalLogger"* }
%"class.v8::internal::LocalLogger" = type opaque
%"struct.v8::internal::ManagedPtrDestructor" = type { i64, %"struct.v8::internal::ManagedPtrDestructor"*, %"struct.v8::internal::ManagedPtrDestructor"*, i8*, void (i8*)*, i64* }
%"class.v8::internal::wasm::WasmEngine" = type opaque
%"class.std::__1::unique_ptr.1083" = type { %"class.std::__1::__compressed_pair.1084" }
%"class.std::__1::__compressed_pair.1084" = type { %"struct.std::__1::__compressed_pair_elem.1085" }
%"struct.std::__1::__compressed_pair_elem.1085" = type { %"class.v8::internal::TracingCpuProfilerImpl"* }
%"class.v8::internal::TracingCpuProfilerImpl" = type opaque
%"class.v8::internal::EmbeddedFileWriterInterface" = type opaque
%"class.v8::Context::BackupIncumbentScope" = type { %"class.v8::Local.834", i64, %"class.v8::Context::BackupIncumbentScope"* }
%"class.v8::Local.834" = type { %"class.v8::Context"* }
%"class.v8::internal::Isolate::ThreadDataTable" = type { %"class.std::__1::unordered_map.1091" }
%"class.std::__1::unordered_map.1091" = type { %"class.std::__1::__hash_table.1092" }
%"class.std::__1::__hash_table.1092" = type <{ %"class.std::__1::unique_ptr.1093", %"class.std::__1::__compressed_pair.1103", %"class.std::__1::__compressed_pair.1108", %"class.std::__1::__compressed_pair.1111", [4 x i8] }>
%"class.std::__1::unique_ptr.1093" = type { %"class.std::__1::__compressed_pair.1094" }
%"class.std::__1::__compressed_pair.1094" = type { %"struct.std::__1::__compressed_pair_elem.1095", %"struct.std::__1::__compressed_pair_elem.1097" }
%"struct.std::__1::__compressed_pair_elem.1095" = type { %"struct.std::__1::__hash_node_base.1096"** }
%"struct.std::__1::__hash_node_base.1096" = type { %"struct.std::__1::__hash_node_base.1096"* }
%"struct.std::__1::__compressed_pair_elem.1097" = type { %"class.std::__1::__bucket_list_deallocator.1098" }
%"class.std::__1::__bucket_list_deallocator.1098" = type { %"class.std::__1::__compressed_pair.1099" }
%"class.std::__1::__compressed_pair.1099" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.1103" = type { %"struct.std::__1::__compressed_pair_elem.1104" }
%"struct.std::__1::__compressed_pair_elem.1104" = type { %"struct.std::__1::__hash_node_base.1096" }
%"class.std::__1::__compressed_pair.1108" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.1111" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.v8::base::Mutex" = type { %union.pthread_mutex_t }
%"struct.std::__1::atomic.1117" = type { %"struct.std::__1::__atomic_base.1118" }
%"struct.std::__1::__atomic_base.1118" = type { %"struct.std::__1::__cxx_atomic_impl.1119" }
%"struct.std::__1::__cxx_atomic_impl.1119" = type { %"struct.std::__1::__cxx_atomic_base_impl.1120" }
%"struct.std::__1::__cxx_atomic_base_impl.1120" = type { %"class.std::__1::vector.1121"* }
%"class.std::__1::vector.1121" = type { %"class.std::__1::__vector_base.1122" }
%"class.std::__1::__vector_base.1122" = type { %"struct.v8::MemoryRange"*, %"struct.v8::MemoryRange"*, %"class.std::__1::__compressed_pair.1123" }
%"struct.v8::MemoryRange" = type { i8*, i64 }
%"class.std::__1::__compressed_pair.1123" = type { %"struct.std::__1::__compressed_pair_elem.1124" }
%"struct.std::__1::__compressed_pair_elem.1124" = type { %"struct.v8::MemoryRange"* }
%"class.v8::internal::Zone" = type <{ i64, i64, i64, i64, %"class.v8::internal::AccountingAllocator"*, %"class.v8::internal::Segment"*, i8*, i8, i8, [6 x i8] }>
%"class.v8::internal::Segment" = type { %"class.v8::internal::Zone"*, %"class.v8::internal::Segment"*, i64 }
%"class.v8::internal::RegExpBuilder" = type { %"class.v8::internal::Zone"*, i8, %"class.v8::base::Flags", %"class.v8::internal::ZoneList.1143"*, i16, %"class.v8::internal::BufferedZoneList", %"class.v8::internal::BufferedZoneList", %"class.v8::internal::BufferedZoneList" }
%"class.v8::internal::ZoneList.1143" = type { i16*, i32, i32 }
%"class.v8::internal::BufferedZoneList" = type { %"class.v8::internal::ZoneList.1144"*, %"class.v8::internal::RegExpTree"* }
%"class.v8::internal::ZoneList.1144" = type { %"class.v8::internal::RegExpTree"**, i32, i32 }
%"class.v8::internal::RegExpAtom" = type <{ %"class.v8::internal::RegExpTree", %"class.v8::internal::Vector.1142", %"class.v8::base::Flags", [4 x i8] }>
%"class.v8::internal::Vector.1142" = type { i16*, i64 }
%"class.v8::internal::RegExpParser::RegExpParserState" = type { %"class.v8::internal::RegExpParser::RegExpParserState"*, %"class.v8::internal::RegExpBuilder"*, i32, i32, i32, %"class.v8::internal::ZoneVector"* }
%"class.v8::internal::ZoneList.1145" = type { %"class.v8::internal::CharacterRange"*, i32, i32 }
%"class.v8::internal::CharacterRange" = type { i32, i32 }
%"class.v8::internal::ZoneVector.1147" = type { %"class.std::__1::vector.1148" }
%"class.std::__1::vector.1148" = type { %"class.std::__1::__vector_base.1149" }
%"class.std::__1::__vector_base.1149" = type { i8*, i8*, %"class.std::__1::__compressed_pair.1150" }
%"class.std::__1::__compressed_pair.1150" = type { %"struct.std::__1::__compressed_pair_elem.1151", %"struct.std::__1::__compressed_pair_elem.1152" }
%"struct.std::__1::__compressed_pair_elem.1151" = type { i8* }
%"struct.std::__1::__compressed_pair_elem.1152" = type { %"class.v8::internal::ZoneAllocator.1153" }
%"class.v8::internal::ZoneAllocator.1153" = type { %"class.v8::internal::Zone"* }
%"class.v8::internal::RegExpGroup" = type { %"class.v8::internal::RegExpTree", %"class.v8::internal::RegExpTree"*, i32, i32 }
%"class.v8::internal::RegExpLookaround" = type { %"class.v8::internal::RegExpTree", %"class.v8::internal::RegExpTree"*, i8, i32, i32, i32 }
%"class.v8::internal::RegExpAssertion" = type { %"class.v8::internal::RegExpTree", i32, %"class.v8::base::Flags" }
%"class.v8::internal::RegExpCharacterClass" = type { %"class.v8::internal::RegExpTree", %"class.v8::internal::CharacterSet", %"class.v8::base::Flags", %"class.v8::base::Flags.1146" }
%"class.v8::internal::CharacterSet" = type <{ %"class.v8::internal::ZoneList.1145"*, i16, [6 x i8] }>
%"class.v8::base::Flags.1146" = type { i32 }
%"class.std::__1::__tree_node" = type { %"class.std::__1::__tree_node_base.base", %"class.v8::internal::RegExpCapture"* }
%"class.std::__1::__tree_node_base.base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8 }>
%"class.v8::internal::RegExpEmpty" = type { %"class.v8::internal::RegExpTree" }
%"class.v8::internal::RegExpDisjunction" = type { %"class.v8::internal::RegExpTree", %"class.v8::internal::ZoneList.1144"*, i32, i32 }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.icu_69::UnicodeSet" = type <{ %"class.icu_69::UnicodeFilter", i32*, i32, i32, i8, [7 x i8], %"class.icu_69::BMPSet"*, i32*, i32, [4 x i8], i16*, i32, [4 x i8], %"class.icu_69::UVector"*, %"class.icu_69::UnicodeSetStringSpan"*, [25 x i32], [4 x i8] }>
%"class.icu_69::UnicodeFilter" = type { %"class.icu_69::UnicodeFunctor", %"class.icu_69::UnicodeMatcher" }
%"class.icu_69::UnicodeFunctor" = type { %"class.icu_69::UObject" }
%"class.icu_69::UObject" = type { i32 (...)** }
%"class.icu_69::UnicodeMatcher" = type { i32 (...)** }
%"class.icu_69::BMPSet" = type opaque
%"class.icu_69::UVector" = type opaque
%"class.icu_69::UnicodeSetStringSpan" = type opaque
%"class.v8::internal::RegExpQuantifier" = type <{ %"class.v8::internal::RegExpTree", %"class.v8::internal::RegExpTree"*, i32, i32, i32, i32, i32, [4 x i8] }>
%"class.v8::internal::RegExpText" = type <{ %"class.v8::internal::RegExpTree", %"class.v8::internal::ZoneList.1167", i32, [4 x i8] }>
%"class.v8::internal::ZoneList.1167" = type { %"class.v8::internal::TextElement"*, i32, i32 }
%"class.v8::internal::TextElement" = type { i32, i32, %"class.v8::internal::RegExpTree"* }
%"class.v8::internal::ZoneAllocator.1162" = type { %"class.v8::internal::Zone"* }
%"class.v8::internal::ZoneVector.1156" = type { %"class.std::__1::vector.1157" }
%"class.std::__1::vector.1157" = type { %"class.std::__1::__vector_base.1158" }
%"class.std::__1::__vector_base.1158" = type { %"class.v8::internal::RegExpCapture"**, %"class.v8::internal::RegExpCapture"**, %"class.std::__1::__compressed_pair.1159" }
%"class.std::__1::__compressed_pair.1159" = type { %"struct.std::__1::__compressed_pair_elem.1160", %"struct.std::__1::__compressed_pair_elem.1161" }
%"struct.std::__1::__compressed_pair_elem.1160" = type { %"class.v8::internal::RegExpCapture"** }
%"struct.std::__1::__compressed_pair_elem.1161" = type { %"class.v8::internal::ZoneAllocator.1162" }
%"class.v8::internal::FactoryBase" = type { i8 }
%"struct.v8::internal::RegExpCompileData" = type <{ %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpNode"*, %"class.v8::internal::Handle.1163", i8, i8, [6 x i8], %"class.v8::internal::Handle.1155", i32, i32, i32, i32, i32, [4 x i8] }>
%"class.v8::internal::RegExpNode" = type opaque
%"class.v8::internal::Handle.1163" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::Handle.1155" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::CombinationAssertScope" = type { i8 }
%"class.v8::internal::StdoutStream" = type { %"class.v8::internal::OFStream.base", %"class.v8::base::LockGuard", %"class.std::__1::basic_ios.base" }
%"class.v8::internal::OFStream.base" = type { %"class.std::__1::basic_ostream.base", %"class.v8::internal::OFStreamBase" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.v8::internal::OFStreamBase" = type { %"class.std::__1::basic_streambuf", %struct._IO_FILE* }
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.v8::base::LockGuard" = type { %"class.v8::base::RecursiveMutex"* }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.v8::internal::OFStream" = type { %"class.std::__1::basic_ostream.base", %"class.v8::internal::OFStreamBase", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32, [4 x i8] }>
%"class.v8::internal::RegExpAlternative" = type { %"class.v8::internal::RegExpTree", %"class.v8::internal::ZoneList.1144"*, i32, i32 }
%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry" = type { i8, %"class.std::__1::basic_ostream"* }
%"class.std::__1::locale::facet" = type { %"class.std::__1::__shared_count" }
%"class.std::__1::ctype" = type <{ %"class.std::__1::locale::facet", i16*, i8, [7 x i8] }>
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }

$_ZN2v88internal4Zone3NewINS0_20RegExpCharacterClassEJPS1_RPNS0_8ZoneListINS0_14CharacterRangeEEENS_4base5FlagsINS0_8JSRegExp4FlagEiEEEEEPT_DpOT0_ = comdat any

$_ZN2v88internal4Zone3NewINS0_20RegExpCharacterClassEJPS1_RPNS0_8ZoneListINS0_14CharacterRangeEEERNS_4base5FlagsINS0_8JSRegExp4FlagEiEEEEEPT_DpOT0_ = comdat any

$_ZN2v88internal4Zone3NewINS0_20RegExpCharacterClassEJPS1_RPNS0_8ZoneListINS0_14CharacterRangeEEENS_4base5FlagsINS0_8JSRegExp4FlagEiEERNSB_INS3_4FlagEiEEEEEPT_DpOT0_ = comdat any

$_ZN2v88internal12StdoutStreamD1Ev = comdat any

$_ZN2v88internal16BufferedZoneListINS0_10RegExpTreeELi2EE3AddEPS2_PNS0_4ZoneE = comdat any

$_ZN2v88internal4Zone3NewINS0_20RegExpCharacterClassEJPS1_PNS0_8ZoneListINS0_14CharacterRangeEEERNS_4base5FlagsINS0_8JSRegExp4FlagEiEEEEEPT_DpOT0_ = comdat any

$_ZN2v88internal14CharacterRange4ListEPNS0_4ZoneES1_ = comdat any

$_ZN2v88internal16BufferedZoneListINS0_10RegExpTreeELi2EE7GetListEPNS0_4ZoneE = comdat any

$_ZN2v88internal8OFStreamD1Ev = comdat any

$_ZN2v88internal8OFStreamD0Ev = comdat any

$_ZTv0_n24_N2v88internal8OFStreamD1Ev = comdat any

$_ZTv0_n24_N2v88internal8OFStreamD0Ev = comdat any

$_ZN2v88internal12StdoutStreamD0Ev = comdat any

$_ZTv0_n24_N2v88internal12StdoutStreamD1Ev = comdat any

$_ZTv0_n24_N2v88internal12StdoutStreamD0Ev = comdat any

$_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m = comdat any

$_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_ = comdat any

$_ZNSt3__16__treeIPN2v88internal13RegExpCaptureENS2_12RegExpParser21RegExpCaptureNameLessENS2_13ZoneAllocatorIS4_EEE25__emplace_unique_key_argsIS4_JRS4_EEENS_4pairINS_15__tree_iteratorIS4_PNS_11__tree_nodeIS4_PvEElEEbEERKT_DpOT0_ = comdat any

$_ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_ = comdat any

$_ZNSt3__16vectorIPN2v88internal13RegExpCaptureENS2_13ZoneAllocatorIS4_EEEC2INS_21__tree_const_iteratorIS4_PNS_11__tree_nodeIS4_PvEElEEEET_SF_RKS6_PNS_9enable_ifIXaasr27__is_cpp17_forward_iteratorISF_EE5valuesr16is_constructibleIS4_NS_15iterator_traitsISF_E9referenceEEE5valueEvE4typeE = comdat any

$_ZN2v88internal8ZoneListItE17ResizeAddInternalERKtPNS0_4ZoneE = comdat any

$_ZTVN2v88internal12StdoutStreamE = comdat any

$_ZTTN2v88internal12StdoutStreamE = comdat any

$_ZTCN2v88internal12StdoutStreamE0_NS0_8OFStreamE = comdat any

$_ZTCN2v88internal12StdoutStreamE0_NSt3__113basic_ostreamIcNS1_11char_traitsIcEEEE = comdat any

$_ZTVN2v88internal8OFStreamE = comdat any

$_ZTTN2v88internal8OFStreamE = comdat any

$_ZTCN2v88internal8OFStreamE0_NSt3__113basic_ostreamIcNS1_11char_traitsIcEEEE = comdat any

@_ZN2v88internal36FLAG_correctness_fuzzer_suppressionsE = external local_unnamed_addr global i8, align 1
@.str = private unnamed_addr constant [27 x i8] c"Aborting on stack overflow\00", align 1
@.str.1 = private unnamed_addr constant [35 x i8] c"Aborting on excess zone allocation\00", align 1
@_ZN2v88internal26FLAG_regexp_mode_modifiersE = external local_unnamed_addr global i8, align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"N\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"Y\00", align 1
@_ZN2v88internal28FLAG_harmony_regexp_sequenceE = external local_unnamed_addr global i8, align 1
@.str.4 = private unnamed_addr constant [20 x i8] c"Emoji_Flag_Sequence\00", align 1
@_ZN2v88internal24UnicodePropertySequences19kEmojiFlagSequencesE = external local_unnamed_addr constant [0 x i32], align 4
@.str.5 = private unnamed_addr constant [19 x i8] c"Emoji_Tag_Sequence\00", align 1
@_ZN2v88internal24UnicodePropertySequences18kEmojiTagSequencesE = external local_unnamed_addr constant [0 x i32], align 4
@.str.6 = private unnamed_addr constant [19 x i8] c"Emoji_ZWJ_Sequence\00", align 1
@_ZN2v88internal24UnicodePropertySequences18kEmojiZWJSequencesE = external local_unnamed_addr constant [0 x i32], align 4
@.str.7 = private unnamed_addr constant [22 x i8] c"Emoji_Keycap_Sequence\00", align 1
@.str.8 = private unnamed_addr constant [24 x i8] c"Emoji_Modifier_Sequence\00", align 1
@_ZN2v88internal24FLAG_trace_regexp_parserE = external local_unnamed_addr global i8, align 1
@.str.9 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.10 = private unnamed_addr constant [17 x i8] c"unreachable code\00", align 1
@_ZN2v88internalL17kOneByteCharFlagsE = internal unnamed_addr constant [256 x i8] calign 16
@.str.11 = private unnamed_addr constant [4 x i8] c"Any\00", align 1
@.str.12 = private unnamed_addr constant [6 x i8] c"ASCII\00", align 1
@.str.13 = private unnamed_addr constant [9 x i8] c"Assigned\00", align 1
@.str.14 = private unnamed_addr constant [11 x i8] c"Unassigned\00", align 1
@stdout = external local_unnamed_addr global %struct._IO_FILE*, align 8
@_ZTVN2v88internal12StdoutStreamE = linkonce_odr hidden unnamed_addr constant { [5 x i8*], [5 x i8*] } { [5 x i8*] [i8* inttoptr (i64 88 to i8*), i8* null, i8* null, i8* bitcast (void (%"class.v8::internal::StdoutStream"*)* @_ZN2v88internal12StdoutStreamD1Ev to i8*), i8* bitcast (void (%"class.v8::internal::StdoutStream"*)* @_ZN2v88internal12StdoutStreamD0Ev to i8*)], [5 x i8*] [i8* inttoptr (i64 -88 to i8*), i8* inttoptr (i64 -88 to i8*), i8* null, i8* bitcast (void (%"class.v8::internal::StdoutStream"*)* @_ZTv0_n24_N2v88internal12StdoutStreamD1Ev to i8*), i8* bitcast (void (%"class.v8::internal::StdoutStream"*)* @_ZTv0_n24_N2v88internal12StdoutStreamD0Ev to i8*)] }, comdat, align 8
@_ZTTN2v88internal12StdoutStreamE = linkonce_odr hidden unnamed_addr constant [6 x i8*] [i8* bitcast (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTVN2v88internal12StdoutStreamE, i32 0, inrange i32 0, i32 3) to i8*), i8* bitcast (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTCN2v88internal12StdoutStreamE0_NS0_8OFStreamE, i32 0, inrange i32 0, i32 3) to i8*), i8* bitcast (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTCN2v88internal12StdoutStreamE0_NSt3__113basic_ostreamIcNS1_11char_traitsIcEEEE, i32 0, inrange i32 0, i32 3) to i8*), i8* bitcast (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTCN2v88internal12StdoutStreamE0_NSt3__113basic_ostreamIcNS1_11char_traitsIcEEEE, i32 0, inrange i32 1, i32 3) to i8*), i8* bitcast (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTCN2v88internal12StdoutStreamE0_NS0_8OFStreamE, i32 0, inrange i32 1, i32 3) to i8*), i8* bitcast (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTVN2v88internal12StdoutStreamE, i32 0, inrange i32 1, i32 3) to i8*)], comdat, align 8
@_ZTCN2v88internal12StdoutStreamE0_NS0_8OFStreamE = linkonce_odr hidden unnamed_addr constant { [5 x i8*], [5 x i8*] } { [5 x i8*] [i8* inttoptr (i64 88 to i8*), i8* null, i8* null, i8* bitcast (void (%"class.v8::internal::OFStream"*)* @_ZN2v88internal8OFStreamD1Ev to i8*), i8* bitcast (void (%"class.v8::internal::OFStream"*)* @_ZN2v88internal8OFStreamD0Ev to i8*)], [5 x i8*] [i8* inttoptr (i64 -88 to i8*), i8* inttoptr (i64 -88 to i8*), i8* null, i8* bitcast (void (%"class.v8::internal::OFStream"*)* @_ZTv0_n24_N2v88internal8OFStreamD1Ev to i8*), i8* bitcast (void (%"class.v8::internal::OFStream"*)* @_ZTv0_n24_N2v88internal8OFStreamD0Ev to i8*)] }, comdat, align 8
@_ZTCN2v88internal12StdoutStreamE0_NSt3__113basic_ostreamIcNS1_11char_traitsIcEEEE = linkonce_odr hidden unnamed_addr constant { [5 x i8*], [5 x i8*] } { [5 x i8*] [i8* inttoptr (i64 88 to i8*), i8* null, i8* null, i8* bitcast (void (%"class.std::__1::basic_ostream"*)* @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev to i8*), i8* bitcast (void (%"class.std::__1::basic_ostream"*)* @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev to i8*)], [5 x i8*] [i8* inttoptr (i64 -88 to i8*), i8* inttoptr (i64 -88 to i8*), i8* null, i8* bitcast (void (%"class.std::__1::basic_ostream"*)* @_ZTv0_n24_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev to i8*), i8* bitcast (void (%"class.std::__1::basic_ostream"*)* @_ZTv0_n24_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev to i8*)] }, comdat, align 8
@_ZTVNSt3__19basic_iosIcNS_11char_traitsIcEEEE = external unnamed_addr constant { [4 x i8*] }, align 8
@_ZTVN2v88internal8OFStreamE = linkonce_odr hidden unnamed_addr constant { [5 x i8*], [5 x i8*] } { [5 x i8*] [i8* inttoptr (i64 80 to i8*), i8* null, i8* null, i8* bitcast (void (%"class.v8::internal::OFStream"*)* @_ZN2v88internal8OFStreamD1Ev to i8*), i8* bitcast (void (%"class.v8::internal::OFStream"*)* @_ZN2v88internal8OFStreamD0Ev to i8*)], [5 x i8*] [i8* inttoptr (i64 -80 to i8*), i8* inttoptr (i64 -80 to i8*), i8* null, i8* bitcast (void (%"class.v8::internal::OFStream"*)* @_ZTv0_n24_N2v88internal8OFStreamD1Ev to i8*), i8* bitcast (void (%"class.v8::internal::OFStream"*)* @_ZTv0_n24_N2v88internal8OFStreamD0Ev to i8*)] }, comdat, align 8
@_ZTTN2v88internal8OFStreamE = linkonce_odr hidden unnamed_addr constant [4 x i8*] [i8* bitcast (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTVN2v88internal8OFStreamE, i32 0, inrange i32 0, i32 3) to i8*), i8* bitcast (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTCN2v88internal8OFStreamE0_NSt3__113basic_ostreamIcNS1_11char_traitsIcEEEE, i32 0, inrange i32 0, i32 3) to i8*), i8* bitcast (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTCN2v88internal8OFStreamE0_NSt3__113basic_ostreamIcNS1_11char_traitsIcEEEE, i32 0, inrange i32 1, i32 3) to i8*), i8* bitcast (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTVN2v88internal8OFStreamE, i32 0, inrange i32 1, i32 3) to i8*)], comdat, align 8
@_ZTCN2v88internal8OFStreamE0_NSt3__113basic_ostreamIcNS1_11char_traitsIcEEEE = linkonce_odr hidden unnamed_addr constant { [5 x i8*], [5 x i8*] } { [5 x i8*] [i8* inttoptr (i64 80 to i8*), i8* null, i8* null, i8* bitcast (void (%"class.std::__1::basic_ostream"*)* @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev to i8*), i8* bitcast (void (%"class.std::__1::basic_ostream"*)* @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev to i8*)], [5 x i8*] [i8* inttoptr (i64 -80 to i8*), i8* inttoptr (i64 -80 to i8*), i8* null, i8* bitcast (void (%"class.std::__1::basic_ostream"*)* @_ZTv0_n24_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev to i8*), i8* bitcast (void (%"class.std::__1::basic_ostream"*)* @_ZTv0_n24_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev to i8*)] }, comdat, align 8
@_ZNSt3__15ctypeIcE2idE = external global %"class.std::__1::locale::id", align 8
@_ZTVN2v88internal11RegExpGroupE = external unnamed_addr constant { [37 x i8*] }, align 8
@_ZTVN2v88internal16RegExpLookaroundE = external unnamed_addr constant { [37 x i8*] }, align 8
@_ZTVN2v88internal15RegExpAssertionE = external unnamed_addr constant { [37 x i8*] }, align 8
@_ZTVN2v88internal20RegExpCharacterClassE = external unnamed_addr constant { [37 x i8*] }, align 8
@_ZTVN2v88internal19RegExpBackReferenceE = external unnamed_addr constant { [37 x i8*] }, align 8
@_ZTVN2v88internal13RegExpCaptureE = external unnamed_addr constant { [37 x i8*] }, align 8
@_ZTVN2v88internal10RegExpAtomE = external unnamed_addr constant { [37 x i8*] }, align 8
@_ZTVN2v88internal10RegExpTextE = external unnamed_addr constant { [37 x i8*] }, align 8
@_ZTVN2v88internal11RegExpEmptyE = external unnamed_addr constant { [37 x i8*] }, align 8
@_ZTVN2v88internal16RegExpQuantifierE = external unnamed_addr constant { [37 x i8*] }, align 8

@_ZN2v88internal12RegExpParserC1EPNS0_16FlatStringReaderENS_4base5FlagsINS0_8JSRegExp4FlagEiEEPNS0_7IsolateEPNS0_4ZoneE = hidden unnamed_addr alias void (%"class.v8::internal::RegExpParser"*, %"class.v8::internal::FlatStringReader"*, i32, %"class.v8::internal::Isolate"*, %"class.v8::internal::Zone"*), void (%"class.v8::internal::RegExpParser"*, %"class.v8::internal::FlatStringReader"*, i32, %"class.v8::internal::Isolate"*, %"class.v8::internal::Zone"*)* @_ZN2v88internal12RegExpParserC2EPNS0_16FlatStringReaderENS_4base5FlagsINS0_8JSRegExp4FlagEiEEPNS0_7IsolateEPNS0_4ZoneE
@_ZN2v88internal13RegExpBuilderC1EPNS0_4ZoneENS_4base5FlagsINS0_8JSRegExp4FlagEiEE = hidden unnamed_addr alias void (%"class.v8::internal::RegExpBuilder"*, %"class.v8::internal::Zone"*, i32), void (%"class.v8::internal::RegExpBuilder"*, %"class.v8::internal::Zone"*, i32)* @_ZN2v88internal13RegExpBuilderC2EPNS0_4ZoneENS_4base5FlagsINS0_8JSRegExp4FlagEiEE

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal12RegExpParserC2EPNS0_16FlatStringReaderENS_4base5FlagsINS0_8JSRegExp4FlagEiEEPNS0_7IsolateEPNS0_4ZoneE(%"class.v8::internal::RegExpParser"*, %"class.v8::internal::FlatStringReader"*, i32, %"class.v8::internal::Isolate"*, %"class.v8::internal::Zone"*) unnamed_addr #0 align 2 {
  %6 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 0
  store %"class.v8::internal::Isolate"* %3, %"class.v8::internal::Isolate"** %6, align 8
  %7 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 1
  store %"class.v8::internal::Zone"* %4, %"class.v8::internal::Zone"** %7, align 8
  %8 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 2
  %9 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 7
  %10 = bitcast i32* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 32, i1 false)
  store %"class.v8::internal::FlatStringReader"* %1, %"class.v8::internal::FlatStringReader"** %9, align 8
  %11 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 8
  store i32 2097152, i32* %11, align 8
  %12 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 9, i32 0
  store i32 %2, i32* %12, align 4
  %13 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 10
  store i32 0, i32* %13, align 8
  %14 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 11
  store i32 0, i32* %14, align 4
  %15 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 12
  store i32 0, i32* %15, align 8
  %16 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 13
  store i8 1, i8* %16, align 4
  %17 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 14
  call void @llvm.memset.p0i8.i64(i8* align 1 %17, i8 0, i64 5, i1 false)
  tail call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 10
  %3 = load i32, i32* %2, align 8
  %4 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 7
  %5 = load %"class.v8::internal::FlatStringReader"*, %"class.v8::internal::FlatStringReader"** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %5, i64 0, i32 3
  %7 = load i32, i32* %6, align 4
  %8 = icmp slt i32 %3, %7
  br i1 %8, label %9, label %119

9:                                                ; preds = %1
  %10 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 0
  %11 = load %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"** %10, align 8
  %12 = tail call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #13
  %13 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %11, i64 0, i32 0, i32 6, i32 1, i32 1
  %14 = load i64, i64* %13, align 8
  %15 = icmp ult i64 %12, %14
  br i1 %15, label %16, label %33

16:                                               ; preds = %9
  %17 = load i8, i8* @_ZN2v88internal36FLAG_correctness_fuzzer_suppressionsE, align 1, !range !2
  %18 = icmp eq i8 %17, 0
  br i1 %18, label %20, label %19

19:                                               ; preds = %16
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i64 0, i64 0)) #14
  unreachable

20:                                               ; preds = %16
  %21 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 18
  %22 = load i8, i8* %21, align 1, !range !2
  %23 = icmp eq i8 %22, 0
  br i1 %23, label %24, label %124

24:                                               ; preds = %20
  store i8 1, i8* %21, align 1
  %25 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 2
  store i32 1, i32* %25, align 8
  %26 = load i32, i32* %2, align 8
  %27 = add nsw i32 %26, -1
  %28 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 3
  store i32 %27, i32* %28, align 4
  %29 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 8
  store i32 2097152, i32* %29, align 8
  %30 = load %"class.v8::internal::FlatStringReader"*, %"class.v8::internal::FlatStringReader"** %4, align 8
  %31 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %30, i64 0, i32 3
  %32 = load i32, i32* %31, align 4
  store i32 %32, i32* %2, align 8
  br label %124

33:                                               ; preds = %9
  %34 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 1
  %35 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %34, align 8
  %36 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %35, i64 0, i32 1
  %37 = load i64, i64* %36, align 8
  %38 = icmp ugt i64 %37, 268435456
  br i1 %38, label %39, label %56

39:                                               ; preds = %33
  %40 = load i8, i8* @_ZN2v88internal36FLAG_correctness_fuzzer_suppressionsE, align 1, !range !2
  %41 = icmp eq i8 %40, 0
  br i1 %41, label %43, label %42

42:                                               ; preds = %39
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i64 0, i64 0)) #14
  unreachable

43:                                               ; preds = %39
  %44 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 18
  %45 = load i8, i8* %44, align 1, !range !2
  %46 = icmp eq i8 %45, 0
  br i1 %46, label %47, label %124

47:                                               ; preds = %43
  store i8 1, i8* %44, align 1
  %48 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 2
  store i32 3, i32* %48, align 8
  %49 = load i32, i32* %2, align 8
  %50 = add nsw i32 %49, -1
  %51 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 3
  store i32 %50, i32* %51, align 4
  %52 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 8
  store i32 2097152, i32* %52, align 8
  %53 = load %"class.v8::internal::FlatStringReader"*, %"class.v8::internal::FlatStringReader"** %4, align 8
  %54 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %53, i64 0, i32 3
  %55 = load i32, i32* %54, align 4
  store i32 %55, i32* %2, align 8
  br label %124

56:                                               ; preds = %33
  %57 = load i32, i32* %2, align 8
  %58 = load %"class.v8::internal::FlatStringReader"*, %"class.v8::internal::FlatStringReader"** %4, align 8
  %59 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %58, i64 0, i32 2
  %60 = load i8, i8* %59, align 8, !range !2
  %61 = icmp eq i8 %60, 0
  %62 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %58, i64 0, i32 4
  br i1 %61, label %70, label %63

63:                                               ; preds = %56
  %64 = load i8*, i8** %62, align 8
  %65 = sext i32 %57 to i64
  %66 = getelementptr inbounds i8, i8* %64, i64 %65
  %67 = load i8, i8* %66, align 1
  %68 = zext i8 %67 to i32
  %69 = bitcast i8* %64 to i16*
  br label %78

70:                                               ; preds = %56
  %71 = bitcast i8** %62 to i16**
  %72 = load i16*, i16** %71, align 8
  %73 = sext i32 %57 to i64
  %74 = getelementptr inbounds i16, i16* %72, i64 %73
  %75 = load i16, i16* %74, align 2
  %76 = zext i16 %75 to i32
  %77 = bitcast i16* %72 to i8*
  br label %78

78:                                               ; preds = %70, %63
  %79 = phi i16* [ %69, %63 ], [ %72, %70 ]
  %80 = phi i8* [ %64, %63 ], [ %77, %70 ]
  %81 = phi i32 [ %68, %63 ], [ %76, %70 ]
  %82 = add nsw i32 %57, 1
  %83 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 9, i32 0
  %84 = load i32, i32* %83, align 4
  %85 = and i32 %84, 16
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %115, label %87

87:                                               ; preds = %78
  %88 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %58, i64 0, i32 3
  %89 = load i32, i32* %88, align 4
  %90 = icmp slt i32 %82, %89
  %91 = and i32 %81, 64512
  %92 = icmp eq i32 %91, 55296
  %93 = and i1 %92, %90
  br i1 %93, label %94, label %115

94:                                               ; preds = %87
  %95 = sext i32 %82 to i64
  br i1 %61, label %100, label %96

96:                                               ; preds = %94
  %97 = getelementptr inbounds i8, i8* %80, i64 %95
  %98 = load i8, i8* %97, align 1
  %99 = zext i8 %98 to i32
  br label %104

100:                                              ; preds = %94
  %101 = getelementptr inbounds i16, i16* %79, i64 %95
  %102 = load i16, i16* %101, align 2
  %103 = zext i16 %102 to i32
  br label %104

104:                                              ; preds = %100, %96
  %105 = phi i32 [ %99, %96 ], [ %103, %100 ]
  %106 = and i32 %105, 64512
  %107 = icmp eq i32 %106, 56320
  br i1 %107, label %108, label %115

108:                                              ; preds = %104
  %109 = shl nuw nsw i32 %81, 10
  %110 = and i32 %109, 1047552
  %111 = add nuw nsw i32 %110, 65536
  %112 = and i32 %105, 1023
  %113 = or i32 %112, %111
  %114 = add nsw i32 %57, 2
  br label %115

115:                                              ; preds = %78, %87, %104, %108
  %116 = phi i32 [ %81, %87 ], [ %81, %78 ], [ %113, %108 ], [ %81, %104 ]
  %117 = phi i32 [ %82, %87 ], [ %82, %78 ], [ %114, %108 ], [ %82, %104 ]
  store i32 %117, i32* %2, align 8
  %118 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 8
  store i32 %116, i32* %118, align 8
  br label %124

119:                                              ; preds = %1
  %120 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 8
  store i32 2097152, i32* %120, align 8
  %121 = load i32, i32* %6, align 4
  %122 = add nsw i32 %121, 1
  store i32 %122, i32* %2, align 8
  %123 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 13
  store i8 0, i8* %123, align 4
  br label %124

124:                                              ; preds = %115, %20, %24, %43, %47, %119
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZN2v88internal12RegExpParser4NextEv(%"class.v8::internal::RegExpParser"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 10
  %3 = load i32, i32* %2, align 8
  %4 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 7
  %5 = load %"class.v8::internal::FlatStringReader"*, %"class.v8::internal::FlatStringReader"** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %5, i64 0, i32 3
  %7 = load i32, i32* %6, align 4
  %8 = icmp slt i32 %3, %7
  br i1 %8, label %9, label %63

9:                                                ; preds = %1
  %10 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %5, i64 0, i32 2
  %11 = load i8, i8* %10, align 8, !range !2
  %12 = icmp eq i8 %11, 0
  %13 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %5, i64 0, i32 4
  br i1 %12, label %21, label %14

14:                                               ; preds = %9
  %15 = load i8*, i8** %13, align 8
  %16 = sext i32 %3 to i64
  %17 = getelementptr inbounds i8, i8* %15, i64 %16
  %18 = load i8, i8* %17, align 1
  %19 = zext i8 %18 to i32
  %20 = bitcast i8* %15 to i16*
  br label %29

21:                                               ; preds = %9
  %22 = bitcast i8** %13 to i16**
  %23 = load i16*, i16** %22, align 8
  %24 = sext i32 %3 to i64
  %25 = getelementptr inbounds i16, i16* %23, i64 %24
  %26 = load i16, i16* %25, align 2
  %27 = zext i16 %26 to i32
  %28 = bitcast i16* %23 to i8*
  br label %29

29:                                               ; preds = %21, %14
  %30 = phi i16* [ %20, %14 ], [ %23, %21 ]
  %31 = phi i8* [ %15, %14 ], [ %28, %21 ]
  %32 = phi i32 [ %19, %14 ], [ %27, %21 ]
  %33 = add nsw i32 %3, 1
  %34 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 9, i32 0
  %35 = load i32, i32* %34, align 4
  %36 = and i32 %35, 16
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %63, label %38

38:                                               ; preds = %29
  %39 = icmp slt i32 %33, %7
  %40 = and i32 %32, 64512
  %41 = icmp eq i32 %40, 55296
  %42 = and i1 %39, %41
  br i1 %42, label %43, label %63

43:                                               ; preds = %38
  %44 = sext i32 %33 to i64
  br i1 %12, label %49, label %45

45:                                               ; preds = %43
  %46 = getelementptr inbounds i8, i8* %31, i64 %44
  %47 = load i8, i8* %46, align 1
  %48 = zext i8 %47 to i32
  br label %53

49:                                               ; preds = %43
  %50 = getelementptr inbounds i16, i16* %30, i64 %44
  %51 = load i16, i16* %50, align 2
  %52 = zext i16 %51 to i32
  br label %53

53:                                               ; preds = %49, %45
  %54 = phi i32 [ %48, %45 ], [ %52, %49 ]
  %55 = and i32 %54, 64512
  %56 = icmp eq i32 %55, 56320
  br i1 %56, label %57, label %63

57:                                               ; preds = %53
  %58 = shl nuw nsw i32 %32, 10
  %59 = and i32 %58, 1047552
  %60 = add nuw nsw i32 %59, 65536
  %61 = and i32 %54, 1023
  %62 = or i32 %61, %60
  br label %63

63:                                               ; preds = %57, %53, %38, %29, %1
  %64 = phi i32 [ 2097152, %1 ], [ %32, %38 ], [ %32, %29 ], [ %62, %57 ], [ %32, %53 ]
  ret i32 %64
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: noreturn
declare void @_Z8V8_FatalPKcz(i8*, ...) local_unnamed_addr #3

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden noalias %"class.v8::internal::RegExpTree"* @_ZN2v88internal12RegExpParser11ReportErrorENS0_11RegExpErrorE(%"class.v8::internal::RegExpParser"* nocapture, i32) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 18
  %4 = load i8, i8* %3, align 1, !range !2
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %6, label %17

6:                                                ; preds = %2
  store i8 1, i8* %3, align 1
  %7 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 2
  store i32 %1, i32* %7, align 8
  %8 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 10
  %9 = load i32, i32* %8, align 8
  %10 = add nsw i32 %9, -1
  %11 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 3
  store i32 %10, i32* %11, align 4
  %12 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 8
  store i32 2097152, i32* %12, align 8
  %13 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 7
  %14 = load %"class.v8::internal::FlatStringReader"*, %"class.v8::internal::FlatStringReader"** %13, align 8
  %15 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %14, i64 0, i32 3
  %16 = load i32, i32* %15, align 4
  store i32 %16, i32* %8, align 8
  br label %17

17:                                               ; preds = %2, %6
  ret %"class.v8::internal::RegExpTree"* null
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal12RegExpParser5ResetEi(%"class.v8::internal::RegExpParser"*, i32) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 10
  store i32 %1, i32* %3, align 8
  %4 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 7
  %5 = load %"class.v8::internal::FlatStringReader"*, %"class.v8::internal::FlatStringReader"** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %5, i64 0, i32 3
  %7 = load i32, i32* %6, align 4
  %8 = icmp sgt i32 %7, %1
  %9 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 13
  %10 = zext i1 %8 to i8
  store i8 %10, i8* %9, align 4
  tail call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal12RegExpParser7AdvanceEi(%"class.v8::internal::RegExpParser"*, i32) local_unnamed_addr #0 align 2 {
  %3 = add nsw i32 %1, -1
  %4 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 10
  %5 = load i32, i32* %4, align 8
  %6 = add nsw i32 %3, %5
  store i32 %6, i32* %4, align 8
  tail call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0)
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZN2v88internal12RegExpParser6simpleEv(%"class.v8::internal::RegExpParser"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 14
  %3 = load i8, i8* %2, align 1, !range !2
  %4 = icmp ne i8 %3, 0
  ret i1 %4
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZN2v88internal12RegExpParser24IsSyntaxCharacterOrSlashEj(i32) local_unnamed_addr #5 align 2 {
  switch i32 %0, label %2 [
    i32 94, label %3
    i32 36, label %3
    i32 92, label %3
    i32 46, label %3
    i32 42, label %3
    i32 43, label %3
    i32 63, label %3
    i32 40, label %3
    i32 41, label %3
    i32 91, label %3
    i32 93, label %3
    i32 123, label %3
    i32 125, label %3
    i32 124, label %3
    i32 47, label %3
  ]

2:                                                ; preds = %1
  br label %3

3:                                                ; preds = %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %2
  %4 = phi i1 [ false, %2 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ], [ true, %1 ]
  ret i1 %4
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::RegExpTree"* @_ZN2v88internal12RegExpParser12ParsePatternEv(%"class.v8::internal::RegExpParser"*) local_unnamed_addr #0 align 2 {
  %2 = tail call %"class.v8::internal::RegExpTree"* @_ZN2v88internal12RegExpParser16ParseDisjunctionEv(%"class.v8::internal::RegExpParser"* %0)
  %3 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 18
  %4 = load i8, i8* %3, align 1, !range !2
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %6, label %31

6:                                                ; preds = %1
  tail call void @_ZN2v88internal12RegExpParser24PatchNamedBackReferencesEv(%"class.v8::internal::RegExpParser"* %0)
  %7 = load i8, i8* %3, align 1, !range !2
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %9, label %31

9:                                                ; preds = %6
  %10 = bitcast %"class.v8::internal::RegExpTree"* %2 to i1 (%"class.v8::internal::RegExpTree"*)***
  %11 = load i1 (%"class.v8::internal::RegExpTree"*)**, i1 (%"class.v8::internal::RegExpTree"*)*** %10, align 8
  %12 = getelementptr inbounds i1 (%"class.v8::internal::RegExpTree"*)*, i1 (%"class.v8::internal::RegExpTree"*)** %11, i64 20
  %13 = load i1 (%"class.v8::internal::RegExpTree"*)*, i1 (%"class.v8::internal::RegExpTree"*)** %12, align 8
  %14 = tail call zeroext i1 %13(%"class.v8::internal::RegExpTree"* %2) #13
  br i1 %14, label %15, label %31

15:                                               ; preds = %9
  %16 = bitcast %"class.v8::internal::RegExpTree"* %2 to %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)***
  %17 = load %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)**, %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)*** %16, align 8
  %18 = getelementptr inbounds %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)*, %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)** %17, i64 19
  %19 = load %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)*, %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)** %18, align 8
  %20 = tail call %"class.v8::internal::RegExpAtom"* %19(%"class.v8::internal::RegExpTree"* %2) #13
  %21 = getelementptr inbounds %"class.v8::internal::RegExpAtom", %"class.v8::internal::RegExpAtom"* %20, i64 0, i32 1, i32 1
  %22 = load i64, i64* %21, align 8
  %23 = trunc i64 %22 to i32
  %24 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 7
  %25 = load %"class.v8::internal::FlatStringReader"*, %"class.v8::internal::FlatStringReader"** %24, align 8
  %26 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %25, i64 0, i32 3
  %27 = load i32, i32* %26, align 4
  %28 = icmp eq i32 %27, %23
  br i1 %28, label %29, label %31

29:                                               ; preds = %15
  %30 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 14
  store i8 1, i8* %30, align 1
  br label %31

31:                                               ; preds = %9, %15, %29, %6, %1
  %32 = phi %"class.v8::internal::RegExpTree"* [ null, %1 ], [ null, %6 ], [ %2, %29 ], [ %2, %15 ], [ %2, %9 ]
  ret %"class.v8::internal::RegExpTree"* %32
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::RegExpTree"* @_ZN2v88internal12RegExpParser16ParseDisjunctionEv(%"class.v8::internal::RegExpParser"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.v8::internal::RegExpParser::RegExpParserState", align 8
  %3 = alloca %"class.v8::internal::ZoneList.1145"*, align 8
  %4 = alloca %"class.v8::internal::Zone"*, align 8
  %5 = alloca %"class.v8::base::Flags", align 4
  %6 = alloca %"class.v8::internal::ZoneList.1145"*, align 8
  %7 = alloca %"class.v8::internal::Zone"*, align 8
  %8 = alloca %"class.v8::base::Flags", align 4
  %9 = alloca %"class.v8::internal::ZoneList.1145"*, align 8
  %10 = alloca %"class.v8::internal::ZoneVector.1147", align 8
  %11 = alloca %"class.v8::internal::ZoneVector.1147", align 8
  %12 = alloca %"class.v8::internal::Zone"*, align 8
  %13 = alloca %"class.v8::base::Flags", align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = bitcast %"class.v8::internal::RegExpParser::RegExpParserState"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %19) #13
  %20 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 9, i32 0
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 1
  %23 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %22, align 8
  %24 = ptrtoint %"class.v8::internal::Zone"* %23 to i64
  %25 = getelementptr inbounds %"class.v8::internal::RegExpParser::RegExpParserState", %"class.v8::internal::RegExpParser::RegExpParserState"* %2, i64 0, i32 0
  store %"class.v8::internal::RegExpParser::RegExpParserState"* null, %"class.v8::internal::RegExpParser::RegExpParserState"** %25, align 8
  %26 = getelementptr inbounds %"class.v8::internal::RegExpParser::RegExpParserState", %"class.v8::internal::RegExpParser::RegExpParserState"* %2, i64 0, i32 1
  %27 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %23, i64 0, i32 2
  %28 = load i64, i64* %27, align 8
  %29 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %23, i64 0, i32 3
  %30 = load i64, i64* %29, align 8
  %31 = sub i64 %30, %28
  %32 = icmp ult i64 %31, 80
  br i1 %32, label %33, label %35, !prof !3

33:                                               ; preds = %1
  %34 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %23, i64 80) #13
  br label %37

35:                                               ; preds = %1
  %36 = add i64 %28, 80
  store i64 %36, i64* %27, align 8
  br label %37

37:                                               ; preds = %33, %35
  %38 = phi i64 [ %34, %33 ], [ %28, %35 ]
  %39 = inttoptr i64 %38 to %"class.v8::internal::RegExpBuilder"*
  %40 = inttoptr i64 %38 to i64*
  store i64 %24, i64* %40, align 8
  %41 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %39, i64 0, i32 1
  store i8 0, i8* %41, align 8
  %42 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %39, i64 0, i32 2, i32 0
  store i32 %21, i32* %42, align 4
  %43 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %39, i64 0, i32 3
  store %"class.v8::internal::ZoneList.1143"* null, %"class.v8::internal::ZoneList.1143"** %43, align 8
  %44 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %39, i64 0, i32 4
  store i16 0, i16* %44, align 8
  %45 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %39, i64 0, i32 5
  %46 = bitcast %"class.v8::internal::BufferedZoneList"* %45 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %46, i8 0, i64 48, i1 false) #13
  store %"class.v8::internal::RegExpBuilder"* %39, %"class.v8::internal::RegExpBuilder"** %26, align 8
  %47 = getelementptr inbounds %"class.v8::internal::RegExpParser::RegExpParserState", %"class.v8::internal::RegExpParser::RegExpParserState"* %2, i64 0, i32 2
  store i32 0, i32* %47, align 8
  %48 = getelementptr inbounds %"class.v8::internal::RegExpParser::RegExpParserState", %"class.v8::internal::RegExpParser::RegExpParserState"* %2, i64 0, i32 3
  store i32 0, i32* %48, align 4
  %49 = getelementptr inbounds %"class.v8::internal::RegExpParser::RegExpParserState", %"class.v8::internal::RegExpParser::RegExpParserState"* %2, i64 0, i32 4
  store i32 0, i32* %49, align 8
  %50 = getelementptr inbounds %"class.v8::internal::RegExpParser::RegExpParserState", %"class.v8::internal::RegExpParser::RegExpParserState"* %2, i64 0, i32 5
  store %"class.v8::internal::ZoneVector"* null, %"class.v8::internal::ZoneVector"** %50, align 8
  %51 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 8
  %52 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 10
  %53 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 7
  %54 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 15
  %55 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 18
  %56 = bitcast i32* %16 to i8*
  %57 = bitcast i32* %15 to i8*
  %58 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 13
  %59 = bitcast i32* %14 to i8*
  %60 = bitcast %"class.v8::internal::ZoneList.1145"** %9 to i8*
  %61 = bitcast %"class.v8::internal::ZoneVector.1147"* %10 to i8*
  %62 = bitcast %"class.v8::internal::Zone"** %22 to i64*
  %63 = getelementptr inbounds %"class.v8::internal::ZoneVector.1147", %"class.v8::internal::ZoneVector.1147"* %10, i64 0, i32 0, i32 0, i32 2, i32 1
  %64 = bitcast %"struct.std::__1::__compressed_pair_elem.1152"* %63 to i64*
  %65 = bitcast %"class.v8::internal::ZoneVector.1147"* %11 to i8*
  %66 = getelementptr inbounds %"class.v8::internal::ZoneVector.1147", %"class.v8::internal::ZoneVector.1147"* %11, i64 0, i32 0, i32 0, i32 2, i32 1
  %67 = bitcast %"struct.std::__1::__compressed_pair_elem.1152"* %66 to i64*
  %68 = getelementptr inbounds %"class.v8::internal::ZoneVector.1147", %"class.v8::internal::ZoneVector.1147"* %11, i64 0, i32 0, i32 0, i32 0
  %69 = getelementptr inbounds %"class.v8::internal::ZoneVector.1147", %"class.v8::internal::ZoneVector.1147"* %11, i64 0, i32 0, i32 0, i32 1
  %70 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 2
  %71 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 3
  %72 = bitcast %"class.v8::internal::Zone"** %12 to i8*
  %73 = bitcast %"class.v8::base::Flags"* %13 to i8*
  %74 = getelementptr inbounds %"class.v8::base::Flags", %"class.v8::base::Flags"* %13, i64 0, i32 0
  %75 = bitcast i8** %69 to i64*
  %76 = getelementptr inbounds %"class.v8::internal::ZoneVector.1147", %"class.v8::internal::ZoneVector.1147"* %10, i64 0, i32 0, i32 0, i32 0
  %77 = getelementptr inbounds %"class.v8::internal::ZoneVector.1147", %"class.v8::internal::ZoneVector.1147"* %10, i64 0, i32 0, i32 0, i32 1
  %78 = bitcast i8** %77 to i64*
  %79 = bitcast %"class.v8::internal::ZoneList.1145"** %6 to i8*
  %80 = bitcast %"class.v8::internal::Zone"** %7 to i8*
  %81 = bitcast %"class.v8::base::Flags"* %8 to i8*
  %82 = getelementptr inbounds %"class.v8::base::Flags", %"class.v8::base::Flags"* %8, i64 0, i32 0
  %83 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 17
  %84 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 16
  %85 = bitcast %"class.v8::internal::ZoneList.1145"** %3 to i8*
  %86 = bitcast %"class.v8::internal::Zone"** %4 to i8*
  %87 = bitcast %"class.v8::base::Flags"* %5 to i8*
  %88 = getelementptr inbounds %"class.v8::base::Flags", %"class.v8::base::Flags"* %5, i64 0, i32 0
  %89 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 11
  %90 = bitcast i32* %17 to i8*
  %91 = bitcast i32* %18 to i8*
  br label %92

92:                                               ; preds = %356, %37
  %93 = phi %"class.v8::internal::RegExpBuilder"* [ %39, %37 ], [ %357, %356 ]
  %94 = phi %"class.v8::internal::RegExpParser::RegExpParserState"* [ %2, %37 ], [ %358, %356 ]
  %95 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %93, i64 0, i32 2, i32 0
  %96 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %93, i64 0, i32 5
  %97 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %93, i64 0, i32 0
  br label %98

98:                                               ; preds = %274, %92
  %99 = load i32, i32* %51, align 8
  switch i32 %99, label %1127 [
    i32 2097152, label %100
    i32 41, label %115
    i32 124, label %240
    i32 42, label %241
    i32 43, label %241
    i32 63, label %241
    i32 94, label %250
    i32 36, label %288
    i32 46, label %312
    i32 40, label %349
    i32 91, label %359
    i32 92, label %369
    i32 123, label %1100
    i32 125, label %1112
    i32 93, label %1112
  ]

100:                                              ; preds = %98
  %101 = getelementptr inbounds %"class.v8::internal::RegExpParser::RegExpParserState", %"class.v8::internal::RegExpParser::RegExpParserState"* %94, i64 0, i32 0
  %102 = load %"class.v8::internal::RegExpParser::RegExpParserState"*, %"class.v8::internal::RegExpParser::RegExpParserState"** %101, align 8
  %103 = icmp eq %"class.v8::internal::RegExpParser::RegExpParserState"* %102, null
  br i1 %103, label %113, label %104

104:                                              ; preds = %100
  %105 = load i8, i8* %55, align 1, !range !2
  %106 = icmp eq i8 %105, 0
  br i1 %106, label %107, label %1188

107:                                              ; preds = %104
  store i8 1, i8* %55, align 1
  store i32 4, i32* %70, align 8
  %108 = load i32, i32* %52, align 8
  %109 = add nsw i32 %108, -1
  store i32 %109, i32* %71, align 4
  store i32 2097152, i32* %51, align 8
  %110 = load %"class.v8::internal::FlatStringReader"*, %"class.v8::internal::FlatStringReader"** %53, align 8
  %111 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %110, i64 0, i32 3
  %112 = load i32, i32* %111, align 4
  store i32 %112, i32* %52, align 8
  br label %1188

113:                                              ; preds = %100
  %114 = call %"class.v8::internal::RegExpTree"* @_ZN2v88internal13RegExpBuilder8ToRegExpEv(%"class.v8::internal::RegExpBuilder"* %93)
  br label %1188

115:                                              ; preds = %98
  %116 = getelementptr inbounds %"class.v8::internal::RegExpParser::RegExpParserState", %"class.v8::internal::RegExpParser::RegExpParserState"* %94, i64 0, i32 0
  %117 = load %"class.v8::internal::RegExpParser::RegExpParserState"*, %"class.v8::internal::RegExpParser::RegExpParserState"** %116, align 8
  %118 = icmp eq %"class.v8::internal::RegExpParser::RegExpParserState"* %117, null
  br i1 %118, label %119, label %128

119:                                              ; preds = %115
  %120 = load i8, i8* %55, align 1, !range !2
  %121 = icmp eq i8 %120, 0
  br i1 %121, label %122, label %1188

122:                                              ; preds = %119
  store i8 1, i8* %55, align 1
  store i32 5, i32* %70, align 8
  %123 = load i32, i32* %52, align 8
  %124 = add nsw i32 %123, -1
  store i32 %124, i32* %71, align 4
  store i32 2097152, i32* %51, align 8
  %125 = load %"class.v8::internal::FlatStringReader"*, %"class.v8::internal::FlatStringReader"** %53, align 8
  %126 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %125, i64 0, i32 3
  %127 = load i32, i32* %126, align 4
  store i32 %127, i32* %52, align 8
  br label %1188

128:                                              ; preds = %115
  call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0)
  %129 = call %"class.v8::internal::RegExpTree"* @_ZN2v88internal13RegExpBuilder8ToRegExpEv(%"class.v8::internal::RegExpBuilder"* %93)
  %130 = ptrtoint %"class.v8::internal::RegExpTree"* %129 to i64
  %131 = getelementptr inbounds %"class.v8::internal::RegExpParser::RegExpParserState", %"class.v8::internal::RegExpParser::RegExpParserState"* %94, i64 0, i32 4
  %132 = load i32, i32* %131, align 8
  %133 = getelementptr inbounds %"class.v8::internal::RegExpParser::RegExpParserState", %"class.v8::internal::RegExpParser::RegExpParserState"* %94, i64 0, i32 2
  %134 = load i32, i32* %133, align 8
  switch i32 %134, label %186 [
    i32 1, label %135
    i32 4, label %158
  ]

135:                                              ; preds = %128
  %136 = getelementptr inbounds %"class.v8::internal::RegExpParser::RegExpParserState", %"class.v8::internal::RegExpParser::RegExpParserState"* %94, i64 0, i32 5
  %137 = load %"class.v8::internal::ZoneVector"*, %"class.v8::internal::ZoneVector"** %136, align 8
  %138 = icmp eq %"class.v8::internal::ZoneVector"* %137, null
  br i1 %138, label %143, label %139

139:                                              ; preds = %135
  %140 = call zeroext i1 @_ZN2v88internal12RegExpParser25CreateNamedCaptureAtIndexEPKNS0_10ZoneVectorItEEi(%"class.v8::internal::RegExpParser"* %0, %"class.v8::internal::ZoneVector"* nonnull %137, i32 %132)
  %141 = load i8, i8* %55, align 1, !range !2
  %142 = icmp eq i8 %141, 0
  br i1 %142, label %143, label %1188

143:                                              ; preds = %135, %139
  %144 = call %"class.v8::internal::RegExpCapture"* @_ZN2v88internal12RegExpParser10GetCaptureEi(%"class.v8::internal::RegExpParser"* %0, i32 %132)
  %145 = getelementptr inbounds %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %144, i64 0, i32 1
  store %"class.v8::internal::RegExpTree"* %129, %"class.v8::internal::RegExpTree"** %145, align 8
  %146 = bitcast %"class.v8::internal::RegExpTree"* %129 to i32 (%"class.v8::internal::RegExpTree"*)***
  %147 = load i32 (%"class.v8::internal::RegExpTree"*)**, i32 (%"class.v8::internal::RegExpTree"*)*** %146, align 8
  %148 = getelementptr inbounds i32 (%"class.v8::internal::RegExpTree"*)*, i32 (%"class.v8::internal::RegExpTree"*)** %147, i64 7
  %149 = load i32 (%"class.v8::internal::RegExpTree"*)*, i32 (%"class.v8::internal::RegExpTree"*)** %148, align 8
  %150 = call i32 %149(%"class.v8::internal::RegExpTree"* %129) #13
  %151 = getelementptr inbounds %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %144, i64 0, i32 3
  store i32 %150, i32* %151, align 4
  %152 = load i32 (%"class.v8::internal::RegExpTree"*)**, i32 (%"class.v8::internal::RegExpTree"*)*** %146, align 8
  %153 = getelementptr inbounds i32 (%"class.v8::internal::RegExpTree"*)*, i32 (%"class.v8::internal::RegExpTree"*)** %152, i64 8
  %154 = load i32 (%"class.v8::internal::RegExpTree"*)*, i32 (%"class.v8::internal::RegExpTree"*)** %153, align 8
  %155 = call i32 %154(%"class.v8::internal::RegExpTree"* %129) #13
  %156 = getelementptr inbounds %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %144, i64 0, i32 4
  store i32 %155, i32* %156, align 8
  %157 = ptrtoint %"class.v8::internal::RegExpCapture"* %144 to i64
  br label %214

158:                                              ; preds = %128
  %159 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %22, align 8
  %160 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %159, i64 0, i32 2
  %161 = load i64, i64* %160, align 8
  %162 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %159, i64 0, i32 3
  %163 = load i64, i64* %162, align 8
  %164 = sub i64 %163, %161
  %165 = icmp ult i64 %164, 24
  br i1 %165, label %166, label %168, !prof !3

166:                                              ; preds = %158
  %167 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %159, i64 24) #13
  br label %170

168:                                              ; preds = %158
  %169 = add i64 %161, 24
  store i64 %169, i64* %160, align 8
  br label %170

170:                                              ; preds = %166, %168
  %171 = phi i64 [ %167, %166 ], [ %161, %168 ]
  %172 = inttoptr i64 %171 to %"class.v8::internal::RegExpGroup"*
  %173 = getelementptr inbounds %"class.v8::internal::RegExpGroup", %"class.v8::internal::RegExpGroup"* %172, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [37 x i8*] }, { [37 x i8*] }* @_ZTVN2v88internal11RegExpGroupE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %173, align 8
  %174 = getelementptr inbounds %"class.v8::internal::RegExpGroup", %"class.v8::internal::RegExpGroup"* %172, i64 0, i32 1
  store %"class.v8::internal::RegExpTree"* %129, %"class.v8::internal::RegExpTree"** %174, align 8
  %175 = getelementptr inbounds %"class.v8::internal::RegExpGroup", %"class.v8::internal::RegExpGroup"* %172, i64 0, i32 2
  %176 = bitcast %"class.v8::internal::RegExpTree"* %129 to i32 (%"class.v8::internal::RegExpTree"*)***
  %177 = load i32 (%"class.v8::internal::RegExpTree"*)**, i32 (%"class.v8::internal::RegExpTree"*)*** %176, align 8
  %178 = getelementptr inbounds i32 (%"class.v8::internal::RegExpTree"*)*, i32 (%"class.v8::internal::RegExpTree"*)** %177, i64 7
  %179 = load i32 (%"class.v8::internal::RegExpTree"*)*, i32 (%"class.v8::internal::RegExpTree"*)** %178, align 8
  %180 = call i32 %179(%"class.v8::internal::RegExpTree"* %129) #13
  store i32 %180, i32* %175, align 8
  %181 = getelementptr inbounds %"class.v8::internal::RegExpGroup", %"class.v8::internal::RegExpGroup"* %172, i64 0, i32 3
  %182 = load i32 (%"class.v8::internal::RegExpTree"*)**, i32 (%"class.v8::internal::RegExpTree"*)*** %176, align 8
  %183 = getelementptr inbounds i32 (%"class.v8::internal::RegExpTree"*)*, i32 (%"class.v8::internal::RegExpTree"*)** %182, i64 8
  %184 = load i32 (%"class.v8::internal::RegExpTree"*)*, i32 (%"class.v8::internal::RegExpTree"*)** %183, align 8
  %185 = call i32 %184(%"class.v8::internal::RegExpTree"* %129) #13
  store i32 %185, i32* %181, align 4
  br label %214

186:                                              ; preds = %128
  %187 = load i32, i32* %89, align 4
  %188 = icmp eq i32 %134, 2
  %189 = zext i1 %188 to i8
  %190 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %22, align 8
  %191 = sub nsw i32 %187, %132
  %192 = getelementptr inbounds %"class.v8::internal::RegExpParser::RegExpParserState", %"class.v8::internal::RegExpParser::RegExpParserState"* %94, i64 0, i32 3
  %193 = load i32, i32* %192, align 4
  %194 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %190, i64 0, i32 2
  %195 = load i64, i64* %194, align 8
  %196 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %190, i64 0, i32 3
  %197 = load i64, i64* %196, align 8
  %198 = sub i64 %197, %195
  %199 = icmp ult i64 %198, 32
  br i1 %199, label %200, label %202, !prof !3

200:                                              ; preds = %186
  %201 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %190, i64 32) #13
  br label %204

202:                                              ; preds = %186
  %203 = add i64 %195, 32
  store i64 %203, i64* %194, align 8
  br label %204

204:                                              ; preds = %200, %202
  %205 = phi i64 [ %201, %200 ], [ %195, %202 ]
  %206 = inttoptr i64 %205 to %"class.v8::internal::RegExpLookaround"*
  %207 = getelementptr inbounds %"class.v8::internal::RegExpLookaround", %"class.v8::internal::RegExpLookaround"* %206, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [37 x i8*] }, { [37 x i8*] }* @_ZTVN2v88internal16RegExpLookaroundE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %207, align 8
  %208 = getelementptr inbounds %"class.v8::internal::RegExpLookaround", %"class.v8::internal::RegExpLookaround"* %206, i64 0, i32 1
  %209 = bitcast %"class.v8::internal::RegExpTree"** %208 to i64*
  store i64 %130, i64* %209, align 8
  %210 = getelementptr inbounds %"class.v8::internal::RegExpLookaround", %"class.v8::internal::RegExpLookaround"* %206, i64 0, i32 2
  store i8 %189, i8* %210, align 8
  %211 = getelementptr inbounds %"class.v8::internal::RegExpLookaround", %"class.v8::internal::RegExpLookaround"* %206, i64 0, i32 3
  store i32 %191, i32* %211, align 4
  %212 = getelementptr inbounds %"class.v8::internal::RegExpLookaround", %"class.v8::internal::RegExpLookaround"* %206, i64 0, i32 4
  store i32 %132, i32* %212, align 8
  %213 = getelementptr inbounds %"class.v8::internal::RegExpLookaround", %"class.v8::internal::RegExpLookaround"* %206, i64 0, i32 5
  store i32 %193, i32* %213, align 4
  br label %214

214:                                              ; preds = %170, %204, %143
  %215 = phi i64 [ %205, %204 ], [ %171, %170 ], [ %157, %143 ]
  %216 = load %"class.v8::internal::RegExpParser::RegExpParserState"*, %"class.v8::internal::RegExpParser::RegExpParserState"** %116, align 8
  %217 = getelementptr inbounds %"class.v8::internal::RegExpParser::RegExpParserState", %"class.v8::internal::RegExpParser::RegExpParserState"* %216, i64 0, i32 1
  %218 = load %"class.v8::internal::RegExpBuilder"*, %"class.v8::internal::RegExpBuilder"** %217, align 8
  %219 = inttoptr i64 %215 to %"class.v8::internal::RegExpTree"*
  %220 = inttoptr i64 %215 to i1 (%"class.v8::internal::RegExpTree"*)***
  %221 = load i1 (%"class.v8::internal::RegExpTree"*)**, i1 (%"class.v8::internal::RegExpTree"*)*** %220, align 8
  %222 = getelementptr inbounds i1 (%"class.v8::internal::RegExpTree"*)*, i1 (%"class.v8::internal::RegExpTree"*)** %221, i64 32
  %223 = load i1 (%"class.v8::internal::RegExpTree"*)*, i1 (%"class.v8::internal::RegExpTree"*)** %222, align 8
  %224 = call zeroext i1 %223(%"class.v8::internal::RegExpTree"* %219) #13
  br i1 %224, label %225, label %227

225:                                              ; preds = %214
  %226 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %218, i64 0, i32 1
  store i8 1, i8* %226, align 8
  br label %1129

227:                                              ; preds = %214
  %228 = load i1 (%"class.v8::internal::RegExpTree"*)**, i1 (%"class.v8::internal::RegExpTree"*)*** %220, align 8
  %229 = getelementptr inbounds i1 (%"class.v8::internal::RegExpTree"*)*, i1 (%"class.v8::internal::RegExpTree"*)** %228, i64 4
  %230 = load i1 (%"class.v8::internal::RegExpTree"*)*, i1 (%"class.v8::internal::RegExpTree"*)** %229, align 8
  %231 = call zeroext i1 %230(%"class.v8::internal::RegExpTree"* %219) #13
  br i1 %231, label %232, label %236

232:                                              ; preds = %227
  call void @_ZN2v88internal13RegExpBuilder15FlushCharactersEv(%"class.v8::internal::RegExpBuilder"* %218) #13
  %233 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %218, i64 0, i32 6
  %234 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %218, i64 0, i32 0
  %235 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %234, align 8
  call void @_ZN2v88internal16BufferedZoneListINS0_10RegExpTreeELi2EE3AddEPS2_PNS0_4ZoneE(%"class.v8::internal::BufferedZoneList"* %233, %"class.v8::internal::RegExpTree"* %219, %"class.v8::internal::Zone"* %235) #13
  br label %1129

236:                                              ; preds = %227
  call void @_ZN2v88internal13RegExpBuilder9FlushTextEv(%"class.v8::internal::RegExpBuilder"* %218) #13
  %237 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %218, i64 0, i32 5
  %238 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %218, i64 0, i32 0
  %239 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %238, align 8
  call void @_ZN2v88internal16BufferedZoneListINS0_10RegExpTreeELi2EE3AddEPS2_PNS0_4ZoneE(%"class.v8::internal::BufferedZoneList"* %237, %"class.v8::internal::RegExpTree"* %219, %"class.v8::internal::Zone"* %239) #13
  br label %1129

240:                                              ; preds = %98
  call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0)
  call void @_ZN2v88internal13RegExpBuilder10FlushTermsEv(%"class.v8::internal::RegExpBuilder"* %93) #13
  br label %274

241:                                              ; preds = %98, %98, %98
  %242 = load i8, i8* %55, align 1, !range !2
  %243 = icmp eq i8 %242, 0
  br i1 %243, label %244, label %1188

244:                                              ; preds = %241
  store i8 1, i8* %55, align 1
  store i32 11, i32* %70, align 8
  %245 = load i32, i32* %52, align 8
  %246 = add nsw i32 %245, -1
  store i32 %246, i32* %71, align 4
  store i32 2097152, i32* %51, align 8
  %247 = load %"class.v8::internal::FlatStringReader"*, %"class.v8::internal::FlatStringReader"** %53, align 8
  %248 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %247, i64 0, i32 3
  %249 = load i32, i32* %248, align 4
  store i32 %249, i32* %52, align 8
  br label %1188

250:                                              ; preds = %98
  call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0)
  %251 = load i32, i32* %95, align 4
  %252 = and i32 %251, 4
  %253 = icmp eq i32 %252, 0
  %254 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %22, align 8
  %255 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %254, i64 0, i32 2
  %256 = load i64, i64* %255, align 8
  %257 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %254, i64 0, i32 3
  %258 = load i64, i64* %257, align 8
  %259 = sub i64 %258, %256
  %260 = icmp ult i64 %259, 16
  br i1 %253, label %275, label %261

261:                                              ; preds = %250
  br i1 %260, label %262, label %264, !prof !3

262:                                              ; preds = %261
  %263 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %254, i64 16) #13
  br label %266

264:                                              ; preds = %261
  %265 = add i64 %256, 16
  store i64 %265, i64* %255, align 8
  br label %266

266:                                              ; preds = %262, %264
  %267 = phi i64 [ %263, %262 ], [ %256, %264 ]
  %268 = inttoptr i64 %267 to %"class.v8::internal::RegExpAssertion"*
  %269 = getelementptr inbounds %"class.v8::internal::RegExpAssertion", %"class.v8::internal::RegExpAssertion"* %268, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [37 x i8*] }, { [37 x i8*] }* @_ZTVN2v88internal15RegExpAssertionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %269, align 8
  %270 = getelementptr inbounds %"class.v8::internal::RegExpAssertion", %"class.v8::internal::RegExpAssertion"* %268, i64 0, i32 1
  store i32 0, i32* %270, align 8
  %271 = getelementptr inbounds %"class.v8::internal::RegExpAssertion", %"class.v8::internal::RegExpAssertion"* %268, i64 0, i32 2, i32 0
  store i32 %251, i32* %271, align 4
  %272 = getelementptr inbounds %"class.v8::internal::RegExpAssertion", %"class.v8::internal::RegExpAssertion"* %268, i64 0, i32 0
  call void @_ZN2v88internal13RegExpBuilder9FlushTextEv(%"class.v8::internal::RegExpBuilder"* %93) #13
  %273 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %97, align 8
  call void @_ZN2v88internal16BufferedZoneListINS0_10RegExpTreeELi2EE3AddEPS2_PNS0_4ZoneE(%"class.v8::internal::BufferedZoneList"* %96, %"class.v8::internal::RegExpTree"* %272, %"class.v8::internal::Zone"* %273) #13
  br label %274

274:                                              ; preds = %266, %280, %240, %304, %450, %471
  br label %98

275:                                              ; preds = %250
  br i1 %260, label %276, label %278, !prof !3

276:                                              ; preds = %275
  %277 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %254, i64 16) #13
  br label %280

278:                                              ; preds = %275
  %279 = add i64 %256, 16
  store i64 %279, i64* %255, align 8
  br label %280

280:                                              ; preds = %276, %278
  %281 = phi i64 [ %277, %276 ], [ %256, %278 ]
  %282 = inttoptr i64 %281 to %"class.v8::internal::RegExpAssertion"*
  %283 = getelementptr inbounds %"class.v8::internal::RegExpAssertion", %"class.v8::internal::RegExpAssertion"* %282, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [37 x i8*] }, { [37 x i8*] }* @_ZTVN2v88internal15RegExpAssertionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %283, align 8
  %284 = getelementptr inbounds %"class.v8::internal::RegExpAssertion", %"class.v8::internal::RegExpAssertion"* %282, i64 0, i32 1
  store i32 1, i32* %284, align 8
  %285 = getelementptr inbounds %"class.v8::internal::RegExpAssertion", %"class.v8::internal::RegExpAssertion"* %282, i64 0, i32 2, i32 0
  store i32 %251, i32* %285, align 4
  %286 = getelementptr inbounds %"class.v8::internal::RegExpAssertion", %"class.v8::internal::RegExpAssertion"* %282, i64 0, i32 0
  call void @_ZN2v88internal13RegExpBuilder9FlushTextEv(%"class.v8::internal::RegExpBuilder"* %93) #13
  %287 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %97, align 8
  call void @_ZN2v88internal16BufferedZoneListINS0_10RegExpTreeELi2EE3AddEPS2_PNS0_4ZoneE(%"class.v8::internal::BufferedZoneList"* %96, %"class.v8::internal::RegExpTree"* %286, %"class.v8::internal::Zone"* %287) #13
  store i8 1, i8* %54, align 2
  br label %274

288:                                              ; preds = %98
  call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0)
  %289 = load i32, i32* %95, align 4
  %290 = and i32 %289, 4
  %291 = icmp eq i32 %290, 0
  %292 = select i1 %291, i32 3, i32 2
  %293 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %22, align 8
  %294 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %293, i64 0, i32 2
  %295 = load i64, i64* %294, align 8
  %296 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %293, i64 0, i32 3
  %297 = load i64, i64* %296, align 8
  %298 = sub i64 %297, %295
  %299 = icmp ult i64 %298, 16
  br i1 %299, label %300, label %302, !prof !3

300:                                              ; preds = %288
  %301 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %293, i64 16) #13
  br label %304

302:                                              ; preds = %288
  %303 = add i64 %295, 16
  store i64 %303, i64* %294, align 8
  br label %304

304:                                              ; preds = %300, %302
  %305 = phi i64 [ %301, %300 ], [ %295, %302 ]
  %306 = inttoptr i64 %305 to %"class.v8::internal::RegExpAssertion"*
  %307 = getelementptr inbounds %"class.v8::internal::RegExpAssertion", %"class.v8::internal::RegExpAssertion"* %306, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [37 x i8*] }, { [37 x i8*] }* @_ZTVN2v88internal15RegExpAssertionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %307, align 8
  %308 = getelementptr inbounds %"class.v8::internal::RegExpAssertion", %"class.v8::internal::RegExpAssertion"* %306, i64 0, i32 1
  store i32 %292, i32* %308, align 8
  %309 = getelementptr inbounds %"class.v8::internal::RegExpAssertion", %"class.v8::internal::RegExpAssertion"* %306, i64 0, i32 2, i32 0
  store i32 %289, i32* %309, align 4
  %310 = getelementptr inbounds %"class.v8::internal::RegExpAssertion", %"class.v8::internal::RegExpAssertion"* %306, i64 0, i32 0
  call void @_ZN2v88internal13RegExpBuilder9FlushTextEv(%"class.v8::internal::RegExpBuilder"* %93) #13
  %311 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %97, align 8
  call void @_ZN2v88internal16BufferedZoneListINS0_10RegExpTreeELi2EE3AddEPS2_PNS0_4ZoneE(%"class.v8::internal::BufferedZoneList"* %96, %"class.v8::internal::RegExpTree"* %310, %"class.v8::internal::Zone"* %311) #13
  br label %274

312:                                              ; preds = %98
  call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0)
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %85) #13
  %313 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %22, align 8
  %314 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %313, i64 0, i32 2
  %315 = load i64, i64* %314, align 8
  %316 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %313, i64 0, i32 3
  %317 = load i64, i64* %316, align 8
  %318 = sub i64 %317, %315
  %319 = icmp ult i64 %318, 16
  br i1 %319, label %320, label %322, !prof !3

320:                                              ; preds = %312
  %321 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %313, i64 16) #13
  br label %324

322:                                              ; preds = %312
  %323 = add i64 %315, 16
  store i64 %323, i64* %314, align 8
  br label %324

324:                                              ; preds = %320, %322
  %325 = phi i64 [ %321, %320 ], [ %315, %322 ]
  %326 = inttoptr i64 %325 to %"class.v8::internal::ZoneList.1145"*
  %327 = getelementptr inbounds %"class.v8::internal::ZoneList.1145", %"class.v8::internal::ZoneList.1145"* %326, i64 0, i32 0
  store %"class.v8::internal::CharacterRange"* null, %"class.v8::internal::CharacterRange"** %327, align 8
  %328 = getelementptr inbounds %"class.v8::internal::ZoneList.1145", %"class.v8::internal::ZoneList.1145"* %326, i64 0, i32 1
  store i32 2, i32* %328, align 8
  %329 = getelementptr inbounds %"class.v8::internal::ZoneList.1145", %"class.v8::internal::ZoneList.1145"* %326, i64 0, i32 2
  store i32 0, i32* %329, align 4
  %330 = load i64, i64* %314, align 8
  %331 = load i64, i64* %316, align 8
  %332 = sub i64 %331, %330
  %333 = icmp ult i64 %332, 16
  br i1 %333, label %334, label %336, !prof !3

334:                                              ; preds = %324
  %335 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %313, i64 16) #13
  br label %338

336:                                              ; preds = %324
  %337 = add i64 %330, 16
  store i64 %337, i64* %314, align 8
  br label %338

338:                                              ; preds = %334, %336
  %339 = phi i64 [ %335, %334 ], [ %330, %336 ]
  %340 = inttoptr i64 %339 to %"class.v8::internal::CharacterRange"*
  store %"class.v8::internal::CharacterRange"* %340, %"class.v8::internal::CharacterRange"** %327, align 8
  store %"class.v8::internal::ZoneList.1145"* %326, %"class.v8::internal::ZoneList.1145"** %3, align 8
  %341 = load i32, i32* %95, align 4
  %342 = and i32 %341, 32
  %343 = icmp eq i32 %342, 0
  %344 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %22, align 8
  %345 = select i1 %343, i8 46, i8 42
  call void @_ZN2v88internal14CharacterRange14AddClassEscapeEcPNS0_8ZoneListIS1_EEbPNS0_4ZoneE(i8 signext %345, %"class.v8::internal::ZoneList.1145"* %326, i1 zeroext false, %"class.v8::internal::Zone"* %344) #13
  %346 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %22, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %86) #13
  store %"class.v8::internal::Zone"* %346, %"class.v8::internal::Zone"** %4, align 8
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %87) #13
  %347 = load i32, i32* %95, align 4
  store i32 %347, i32* %88, align 4
  %348 = call %"class.v8::internal::RegExpCharacterClass"* @_ZN2v88internal4Zone3NewINS0_20RegExpCharacterClassEJPS1_RPNS0_8ZoneListINS0_14CharacterRangeEEENS_4base5FlagsINS0_8JSRegExp4FlagEiEEEEEPT_DpOT0_(%"class.v8::internal::Zone"* %346, %"class.v8::internal::Zone"** nonnull dereferenceable(8) %4, %"class.v8::internal::ZoneList.1145"** nonnull dereferenceable(8) %3, %"class.v8::base::Flags"* nonnull dereferenceable(4) %5)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %87) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %86) #13
  call void @_ZN2v88internal13RegExpBuilder17AddCharacterClassEPNS0_20RegExpCharacterClassE(%"class.v8::internal::RegExpBuilder"* %93, %"class.v8::internal::RegExpCharacterClass"* %348)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %85) #13
  br label %1129

349:                                              ; preds = %98
  %350 = call %"class.v8::internal::RegExpParser::RegExpParserState"* @_ZN2v88internal12RegExpParser20ParseOpenParenthesisEPNS1_17RegExpParserStateE(%"class.v8::internal::RegExpParser"* %0, %"class.v8::internal::RegExpParser::RegExpParserState"* %94)
  %351 = load i8, i8* %55, align 1, !range !2
  %352 = icmp eq i8 %351, 0
  br i1 %352, label %353, label %1188

353:                                              ; preds = %349
  %354 = getelementptr inbounds %"class.v8::internal::RegExpParser::RegExpParserState", %"class.v8::internal::RegExpParser::RegExpParserState"* %350, i64 0, i32 1
  %355 = load %"class.v8::internal::RegExpBuilder"*, %"class.v8::internal::RegExpBuilder"** %354, align 8
  br label %356

356:                                              ; preds = %353, %1186
  %357 = phi %"class.v8::internal::RegExpBuilder"* [ %355, %353 ], [ %1130, %1186 ]
  %358 = phi %"class.v8::internal::RegExpParser::RegExpParserState"* [ %350, %353 ], [ %1131, %1186 ]
  br label %92

359:                                              ; preds = %98
  %360 = call %"class.v8::internal::RegExpTree"* @_ZN2v88internal12RegExpParser19ParseCharacterClassEPKNS0_13RegExpBuilderE(%"class.v8::internal::RegExpParser"* %0, %"class.v8::internal::RegExpBuilder"* %93)
  %361 = load i8, i8* %55, align 1, !range !2
  %362 = icmp eq i8 %361, 0
  br i1 %362, label %363, label %1188

363:                                              ; preds = %359
  %364 = bitcast %"class.v8::internal::RegExpTree"* %360 to %"class.v8::internal::RegExpCharacterClass"* (%"class.v8::internal::RegExpTree"*)***
  %365 = load %"class.v8::internal::RegExpCharacterClass"* (%"class.v8::internal::RegExpTree"*)**, %"class.v8::internal::RegExpCharacterClass"* (%"class.v8::internal::RegExpTree"*)*** %364, align 8
  %366 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass"* (%"class.v8::internal::RegExpTree"*)*, %"class.v8::internal::RegExpCharacterClass"* (%"class.v8::internal::RegExpTree"*)** %365, i64 17
  %367 = load %"class.v8::internal::RegExpCharacterClass"* (%"class.v8::internal::RegExpTree"*)*, %"class.v8::internal::RegExpCharacterClass"* (%"class.v8::internal::RegExpTree"*)** %366, align 8
  %368 = call %"class.v8::internal::RegExpCharacterClass"* %367(%"class.v8::internal::RegExpTree"* %360) #13
  call void @_ZN2v88internal13RegExpBuilder17AddCharacterClassEPNS0_20RegExpCharacterClassE(%"class.v8::internal::RegExpBuilder"* %93, %"class.v8::internal::RegExpCharacterClass"* %368)
  br label %1129

369:                                              ; preds = %98
  %370 = load i32, i32* %52, align 8
  %371 = load %"class.v8::internal::FlatStringReader"*, %"class.v8::internal::FlatStringReader"** %53, align 8
  %372 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %371, i64 0, i32 3
  %373 = load i32, i32* %372, align 4
  %374 = icmp slt i32 %370, %373
  br i1 %374, label %375, label %430

375:                                              ; preds = %369
  %376 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %371, i64 0, i32 2
  %377 = load i8, i8* %376, align 8, !range !2
  %378 = icmp eq i8 %377, 0
  %379 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %371, i64 0, i32 4
  br i1 %378, label %387, label %380

380:                                              ; preds = %375
  %381 = load i8*, i8** %379, align 8
  %382 = sext i32 %370 to i64
  %383 = getelementptr inbounds i8, i8* %381, i64 %382
  %384 = load i8, i8* %383, align 1
  %385 = zext i8 %384 to i32
  %386 = bitcast i8* %381 to i16*
  br label %395

387:                                              ; preds = %375
  %388 = bitcast i8** %379 to i16**
  %389 = load i16*, i16** %388, align 8
  %390 = sext i32 %370 to i64
  %391 = getelementptr inbounds i16, i16* %389, i64 %390
  %392 = load i16, i16* %391, align 2
  %393 = zext i16 %392 to i32
  %394 = bitcast i16* %389 to i8*
  br label %395

395:                                              ; preds = %387, %380
  %396 = phi i16* [ %386, %380 ], [ %389, %387 ]
  %397 = phi i8* [ %381, %380 ], [ %394, %387 ]
  %398 = phi i32 [ %385, %380 ], [ %393, %387 ]
  %399 = add nsw i32 %370, 1
  %400 = load i32, i32* %20, align 4
  %401 = and i32 %400, 16
  %402 = icmp eq i32 %401, 0
  br i1 %402, label %428, label %403

403:                                              ; preds = %395
  %404 = icmp slt i32 %399, %373
  %405 = and i32 %398, 64512
  %406 = icmp eq i32 %405, 55296
  %407 = and i1 %404, %406
  br i1 %407, label %408, label %428

408:                                              ; preds = %403
  %409 = sext i32 %399 to i64
  br i1 %378, label %414, label %410

410:                                              ; preds = %408
  %411 = getelementptr inbounds i8, i8* %397, i64 %409
  %412 = load i8, i8* %411, align 1
  %413 = zext i8 %412 to i32
  br label %418

414:                                              ; preds = %408
  %415 = getelementptr inbounds i16, i16* %396, i64 %409
  %416 = load i16, i16* %415, align 2
  %417 = zext i16 %416 to i32
  br label %418

418:                                              ; preds = %414, %410
  %419 = phi i32 [ %413, %410 ], [ %417, %414 ]
  %420 = and i32 %419, 64512
  %421 = icmp eq i32 %420, 56320
  br i1 %421, label %422, label %428

422:                                              ; preds = %418
  %423 = shl nuw nsw i32 %398, 10
  %424 = and i32 %423, 1047552
  %425 = add nuw nsw i32 %424, 65536
  %426 = and i32 %419, 1023
  %427 = or i32 %426, %425
  br label %428

428:                                              ; preds = %395, %403, %418, %422
  %429 = phi i32 [ %398, %403 ], [ %398, %395 ], [ %427, %422 ], [ %398, %418 ]
  switch i32 %429, label %1082 [
    i32 107, label %1064
    i32 98, label %437
    i32 66, label %458
    i32 100, label %479
    i32 68, label %479
    i32 115, label %479
    i32 83, label %479
    i32 119, label %479
    i32 87, label %479
    i32 112, label %561
    i32 80, label %561
    i32 49, label %697
    i32 50, label %697
    i32 51, label %697
    i32 52, label %697
    i32 53, label %697
    i32 54, label %697
    i32 55, label %697
    i32 56, label %697
    i32 57, label %697
    i32 48, label %808
    i32 102, label %921
    i32 110, label %922
    i32 114, label %923
    i32 116, label %924
    i32 118, label %925
    i32 99, label %926
    i32 120, label %1007
    i32 117, label %1044
  ]

430:                                              ; preds = %369
  %431 = load i8, i8* %55, align 1, !range !2
  %432 = icmp eq i8 %431, 0
  br i1 %432, label %433, label %1188

433:                                              ; preds = %430
  %434 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %371, i64 0, i32 3
  store i8 1, i8* %55, align 1
  store i32 6, i32* %70, align 8
  %435 = add nsw i32 %370, -1
  store i32 %435, i32* %71, align 4
  store i32 2097152, i32* %51, align 8
  %436 = load i32, i32* %434, align 4
  store i32 %436, i32* %52, align 8
  br label %1188

437:                                              ; preds = %428
  store i32 %399, i32* %52, align 8
  call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0) #13
  %438 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %22, align 8
  %439 = load i32, i32* %95, align 4
  %440 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %438, i64 0, i32 2
  %441 = load i64, i64* %440, align 8
  %442 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %438, i64 0, i32 3
  %443 = load i64, i64* %442, align 8
  %444 = sub i64 %443, %441
  %445 = icmp ult i64 %444, 16
  br i1 %445, label %446, label %448, !prof !3

446:                                              ; preds = %437
  %447 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %438, i64 16) #13
  br label %450

448:                                              ; preds = %437
  %449 = add i64 %441, 16
  store i64 %449, i64* %440, align 8
  br label %450

450:                                              ; preds = %446, %448
  %451 = phi i64 [ %447, %446 ], [ %441, %448 ]
  %452 = inttoptr i64 %451 to %"class.v8::internal::RegExpAssertion"*
  %453 = getelementptr inbounds %"class.v8::internal::RegExpAssertion", %"class.v8::internal::RegExpAssertion"* %452, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [37 x i8*] }, { [37 x i8*] }* @_ZTVN2v88internal15RegExpAssertionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %453, align 8
  %454 = getelementptr inbounds %"class.v8::internal::RegExpAssertion", %"class.v8::internal::RegExpAssertion"* %452, i64 0, i32 1
  store i32 4, i32* %454, align 8
  %455 = getelementptr inbounds %"class.v8::internal::RegExpAssertion", %"class.v8::internal::RegExpAssertion"* %452, i64 0, i32 2, i32 0
  store i32 %439, i32* %455, align 4
  %456 = getelementptr inbounds %"class.v8::internal::RegExpAssertion", %"class.v8::internal::RegExpAssertion"* %452, i64 0, i32 0
  call void @_ZN2v88internal13RegExpBuilder9FlushTextEv(%"class.v8::internal::RegExpBuilder"* %93) #13
  %457 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %97, align 8
  call void @_ZN2v88internal16BufferedZoneListINS0_10RegExpTreeELi2EE3AddEPS2_PNS0_4ZoneE(%"class.v8::internal::BufferedZoneList"* %96, %"class.v8::internal::RegExpTree"* %456, %"class.v8::internal::Zone"* %457) #13
  br label %274

458:                                              ; preds = %428
  store i32 %399, i32* %52, align 8
  call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0) #13
  %459 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %22, align 8
  %460 = load i32, i32* %95, align 4
  %461 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %459, i64 0, i32 2
  %462 = load i64, i64* %461, align 8
  %463 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %459, i64 0, i32 3
  %464 = load i64, i64* %463, align 8
  %465 = sub i64 %464, %462
  %466 = icmp ult i64 %465, 16
  br i1 %466, label %467, label %469, !prof !3

467:                                              ; preds = %458
  %468 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %459, i64 16) #13
  br label %471

469:                                              ; preds = %458
  %470 = add i64 %462, 16
  store i64 %470, i64* %461, align 8
  br label %471

471:                                              ; preds = %467, %469
  %472 = phi i64 [ %468, %467 ], [ %462, %469 ]
  %473 = inttoptr i64 %472 to %"class.v8::internal::RegExpAssertion"*
  %474 = getelementptr inbounds %"class.v8::internal::RegExpAssertion", %"class.v8::internal::RegExpAssertion"* %473, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [37 x i8*] }, { [37 x i8*] }* @_ZTVN2v88internal15RegExpAssertionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %474, align 8
  %475 = getelementptr inbounds %"class.v8::internal::RegExpAssertion", %"class.v8::internal::RegExpAssertion"* %473, i64 0, i32 1
  store i32 5, i32* %475, align 8
  %476 = getelementptr inbounds %"class.v8::internal::RegExpAssertion", %"class.v8::internal::RegExpAssertion"* %473, i64 0, i32 2, i32 0
  store i32 %460, i32* %476, align 4
  %477 = getelementptr inbounds %"class.v8::internal::RegExpAssertion", %"class.v8::internal::RegExpAssertion"* %473, i64 0, i32 0
  call void @_ZN2v88internal13RegExpBuilder9FlushTextEv(%"class.v8::internal::RegExpBuilder"* %93) #13
  %478 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %97, align 8
  call void @_ZN2v88internal16BufferedZoneListINS0_10RegExpTreeELi2EE3AddEPS2_PNS0_4ZoneE(%"class.v8::internal::BufferedZoneList"* %96, %"class.v8::internal::RegExpTree"* %477, %"class.v8::internal::Zone"* %478) #13
  br label %274

479:                                              ; preds = %428, %428, %428, %428, %428, %428
  %480 = sext i32 %370 to i64
  br i1 %378, label %486, label %481

481:                                              ; preds = %479
  %482 = getelementptr inbounds i8, i8* %397, i64 %480
  %483 = load i8, i8* %482, align 1
  %484 = zext i8 %483 to i32
  %485 = bitcast i8* %397 to i16*
  br label %491

486:                                              ; preds = %479
  %487 = getelementptr inbounds i16, i16* %396, i64 %480
  %488 = load i16, i16* %487, align 2
  %489 = zext i16 %488 to i32
  %490 = bitcast i16* %396 to i8*
  br label %491

491:                                              ; preds = %486, %481
  %492 = phi i16* [ %485, %481 ], [ %396, %486 ]
  %493 = phi i8* [ %397, %481 ], [ %490, %486 ]
  %494 = phi i32 [ %484, %481 ], [ %489, %486 ]
  br i1 %402, label %517, label %495

495:                                              ; preds = %491
  %496 = icmp slt i32 %399, %373
  %497 = and i32 %494, 64512
  %498 = icmp eq i32 %497, 55296
  %499 = and i1 %496, %498
  br i1 %499, label %500, label %517

500:                                              ; preds = %495
  %501 = sext i32 %399 to i64
  br i1 %378, label %506, label %502

502:                                              ; preds = %500
  %503 = getelementptr inbounds i8, i8* %493, i64 %501
  %504 = load i8, i8* %503, align 1
  %505 = zext i8 %504 to i32
  br label %510

506:                                              ; preds = %500
  %507 = getelementptr inbounds i16, i16* %492, i64 %501
  %508 = load i16, i16* %507, align 2
  %509 = zext i16 %508 to i32
  br label %510

510:                                              ; preds = %506, %502
  %511 = phi i32 [ %505, %502 ], [ %509, %506 ]
  %512 = and i32 %511, 64512
  %513 = icmp eq i32 %512, 56320
  br i1 %513, label %514, label %517

514:                                              ; preds = %510
  %515 = and i32 %511, 1023
  %516 = or i32 %515, 65536
  br label %517

517:                                              ; preds = %491, %495, %510, %514
  %518 = phi i32 [ %494, %495 ], [ %494, %491 ], [ %516, %514 ], [ %494, %510 ]
  store i32 %399, i32* %52, align 8
  call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0) #13
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %79) #13
  %519 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %22, align 8
  %520 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %519, i64 0, i32 2
  %521 = load i64, i64* %520, align 8
  %522 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %519, i64 0, i32 3
  %523 = load i64, i64* %522, align 8
  %524 = sub i64 %523, %521
  %525 = icmp ult i64 %524, 16
  br i1 %525, label %526, label %528, !prof !3

526:                                              ; preds = %517
  %527 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %519, i64 16) #13
  br label %530

528:                                              ; preds = %517
  %529 = add i64 %521, 16
  store i64 %529, i64* %520, align 8
  br label %530

530:                                              ; preds = %526, %528
  %531 = phi i64 [ %527, %526 ], [ %521, %528 ]
  %532 = inttoptr i64 %531 to %"class.v8::internal::ZoneList.1145"*
  %533 = getelementptr inbounds %"class.v8::internal::ZoneList.1145", %"class.v8::internal::ZoneList.1145"* %532, i64 0, i32 0
  store %"class.v8::internal::CharacterRange"* null, %"class.v8::internal::CharacterRange"** %533, align 8
  %534 = getelementptr inbounds %"class.v8::internal::ZoneList.1145", %"class.v8::internal::ZoneList.1145"* %532, i64 0, i32 1
  store i32 2, i32* %534, align 8
  %535 = getelementptr inbounds %"class.v8::internal::ZoneList.1145", %"class.v8::internal::ZoneList.1145"* %532, i64 0, i32 2
  store i32 0, i32* %535, align 4
  %536 = load i64, i64* %520, align 8
  %537 = load i64, i64* %522, align 8
  %538 = sub i64 %537, %536
  %539 = icmp ult i64 %538, 16
  br i1 %539, label %540, label %542, !prof !3

540:                                              ; preds = %530
  %541 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %519, i64 16) #13
  br label %544

542:                                              ; preds = %530
  %543 = add i64 %536, 16
  store i64 %543, i64* %520, align 8
  br label %544

544:                                              ; preds = %540, %542
  %545 = phi i64 [ %541, %540 ], [ %536, %542 ]
  %546 = inttoptr i64 %545 to %"class.v8::internal::CharacterRange"*
  store %"class.v8::internal::CharacterRange"* %546, %"class.v8::internal::CharacterRange"** %533, align 8
  store %"class.v8::internal::ZoneList.1145"* %532, %"class.v8::internal::ZoneList.1145"** %6, align 8
  %547 = trunc i32 %518 to i8
  %548 = load i32, i32* %20, align 4
  %549 = and i32 %548, 16
  %550 = icmp eq i32 %549, 0
  br i1 %550, label %555, label %551

551:                                              ; preds = %544
  %552 = load i32, i32* %95, align 4
  %553 = and i32 %552, 2
  %554 = icmp ne i32 %553, 0
  br label %555

555:                                              ; preds = %544, %551
  %556 = phi i1 [ false, %544 ], [ %554, %551 ]
  %557 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %22, align 8
  call void @_ZN2v88internal14CharacterRange14AddClassEscapeEcPNS0_8ZoneListIS1_EEbPNS0_4ZoneE(i8 signext %547, %"class.v8::internal::ZoneList.1145"* %532, i1 zeroext %556, %"class.v8::internal::Zone"* %557) #13
  %558 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %22, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %80) #13
  store %"class.v8::internal::Zone"* %558, %"class.v8::internal::Zone"** %7, align 8
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %81) #13
  %559 = load i32, i32* %95, align 4
  store i32 %559, i32* %82, align 4
  %560 = call %"class.v8::internal::RegExpCharacterClass"* @_ZN2v88internal4Zone3NewINS0_20RegExpCharacterClassEJPS1_RPNS0_8ZoneListINS0_14CharacterRangeEEENS_4base5FlagsINS0_8JSRegExp4FlagEiEEEEEPT_DpOT0_(%"class.v8::internal::Zone"* %558, %"class.v8::internal::Zone"** nonnull dereferenceable(8) %7, %"class.v8::internal::ZoneList.1145"** nonnull dereferenceable(8) %6, %"class.v8::base::Flags"* nonnull dereferenceable(4) %8)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %81) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %80) #13
  call void @_ZN2v88internal13RegExpBuilder17AddCharacterClassEPNS0_20RegExpCharacterClassE(%"class.v8::internal::RegExpBuilder"* %93, %"class.v8::internal::RegExpCharacterClass"* %560)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %79) #13
  br label %1129

561:                                              ; preds = %428, %428
  %562 = sext i32 %370 to i64
  br i1 %378, label %568, label %563

563:                                              ; preds = %561
  %564 = getelementptr inbounds i8, i8* %397, i64 %562
  %565 = load i8, i8* %564, align 1
  %566 = zext i8 %565 to i32
  %567 = bitcast i8* %397 to i16*
  br label %573

568:                                              ; preds = %561
  %569 = getelementptr inbounds i16, i16* %396, i64 %562
  %570 = load i16, i16* %569, align 2
  %571 = zext i16 %570 to i32
  %572 = bitcast i16* %396 to i8*
  br label %573

573:                                              ; preds = %568, %563
  %574 = phi i16* [ %567, %563 ], [ %396, %568 ]
  %575 = phi i8* [ %397, %563 ], [ %572, %568 ]
  %576 = phi i32 [ %566, %563 ], [ %571, %568 ]
  br i1 %402, label %602, label %577

577:                                              ; preds = %573
  %578 = icmp slt i32 %399, %373
  %579 = and i32 %576, 64512
  %580 = icmp eq i32 %579, 55296
  %581 = and i1 %578, %580
  br i1 %581, label %582, label %602

582:                                              ; preds = %577
  %583 = sext i32 %399 to i64
  br i1 %378, label %588, label %584

584:                                              ; preds = %582
  %585 = getelementptr inbounds i8, i8* %575, i64 %583
  %586 = load i8, i8* %585, align 1
  %587 = zext i8 %586 to i32
  br label %592

588:                                              ; preds = %582
  %589 = getelementptr inbounds i16, i16* %574, i64 %583
  %590 = load i16, i16* %589, align 2
  %591 = zext i16 %590 to i32
  br label %592

592:                                              ; preds = %588, %584
  %593 = phi i32 [ %587, %584 ], [ %591, %588 ]
  %594 = and i32 %593, 64512
  %595 = icmp eq i32 %594, 56320
  br i1 %595, label %596, label %602

596:                                              ; preds = %592
  %597 = shl nuw nsw i32 %576, 10
  %598 = and i32 %597, 1047552
  %599 = add nuw nsw i32 %598, 65536
  %600 = and i32 %593, 1023
  %601 = or i32 %600, %599
  br label %602

602:                                              ; preds = %573, %577, %592, %596
  %603 = phi i32 [ %576, %577 ], [ %576, %573 ], [ %601, %596 ], [ %576, %592 ]
  store i32 %399, i32* %52, align 8
  call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0) #13
  %604 = load i32, i32* %20, align 4
  %605 = and i32 %604, 16
  %606 = icmp eq i32 %605, 0
  br i1 %606, label %693, label %607

607:                                              ; preds = %602
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %60) #13
  %608 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %22, align 8
  %609 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %608, i64 0, i32 2
  %610 = load i64, i64* %609, align 8
  %611 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %608, i64 0, i32 3
  %612 = load i64, i64* %611, align 8
  %613 = sub i64 %612, %610
  %614 = icmp ult i64 %613, 16
  br i1 %614, label %615, label %617, !prof !3

615:                                              ; preds = %607
  %616 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %608, i64 16) #13
  br label %619

617:                                              ; preds = %607
  %618 = add i64 %610, 16
  store i64 %618, i64* %609, align 8
  br label %619

619:                                              ; preds = %615, %617
  %620 = phi i64 [ %616, %615 ], [ %610, %617 ]
  %621 = inttoptr i64 %620 to %"class.v8::internal::ZoneList.1145"*
  %622 = getelementptr inbounds %"class.v8::internal::ZoneList.1145", %"class.v8::internal::ZoneList.1145"* %621, i64 0, i32 0
  store %"class.v8::internal::CharacterRange"* null, %"class.v8::internal::CharacterRange"** %622, align 8
  %623 = getelementptr inbounds %"class.v8::internal::ZoneList.1145", %"class.v8::internal::ZoneList.1145"* %621, i64 0, i32 1
  store i32 2, i32* %623, align 8
  %624 = getelementptr inbounds %"class.v8::internal::ZoneList.1145", %"class.v8::internal::ZoneList.1145"* %621, i64 0, i32 2
  store i32 0, i32* %624, align 4
  %625 = load i64, i64* %609, align 8
  %626 = load i64, i64* %611, align 8
  %627 = sub i64 %626, %625
  %628 = icmp ult i64 %627, 16
  br i1 %628, label %629, label %631, !prof !3

629:                                              ; preds = %619
  %630 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %608, i64 16) #13
  br label %633

631:                                              ; preds = %619
  %632 = add i64 %625, 16
  store i64 %632, i64* %609, align 8
  br label %633

633:                                              ; preds = %629, %631
  %634 = phi i64 [ %630, %629 ], [ %625, %631 ]
  %635 = inttoptr i64 %634 to %"class.v8::internal::CharacterRange"*
  store %"class.v8::internal::CharacterRange"* %635, %"class.v8::internal::CharacterRange"** %622, align 8
  store %"class.v8::internal::ZoneList.1145"* %621, %"class.v8::internal::ZoneList.1145"** %9, align 8
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %61) #13
  %636 = load i64, i64* %62, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %61, i8 0, i64 24, i1 false) #13
  store i64 %636, i64* %64, align 8
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %65) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %65, i8 0, i64 24, i1 false) #13
  store i64 %636, i64* %67, align 8
  %637 = call zeroext i1 @_ZN2v88internal12RegExpParser22ParsePropertyClassNameEPNS0_10ZoneVectorIcEES4_(%"class.v8::internal::RegExpParser"* %0, %"class.v8::internal::ZoneVector.1147"* nonnull %10, %"class.v8::internal::ZoneVector.1147"* nonnull %11)
  br i1 %637, label %638, label %673

638:                                              ; preds = %633
  %639 = load %"class.v8::internal::ZoneList.1145"*, %"class.v8::internal::ZoneList.1145"** %9, align 8
  %640 = icmp eq i32 %603, 80
  %641 = call zeroext i1 @_ZN2v88internal12RegExpParser21AddPropertyClassRangeEPNS0_8ZoneListINS0_14CharacterRangeEEEbRKNS0_10ZoneVectorIcEES9_(%"class.v8::internal::RegExpParser"* %0, %"class.v8::internal::ZoneList.1145"* %639, i1 zeroext %640, %"class.v8::internal::ZoneVector.1147"* nonnull dereferenceable(32) %10, %"class.v8::internal::ZoneVector.1147"* nonnull dereferenceable(32) %11)
  br i1 %641, label %642, label %646

642:                                              ; preds = %638
  %643 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %22, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %72) #13
  store %"class.v8::internal::Zone"* %643, %"class.v8::internal::Zone"** %12, align 8
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %73) #13
  %644 = load i32, i32* %95, align 4
  store i32 %644, i32* %74, align 4
  %645 = call %"class.v8::internal::RegExpCharacterClass"* @_ZN2v88internal4Zone3NewINS0_20RegExpCharacterClassEJPS1_RPNS0_8ZoneListINS0_14CharacterRangeEEENS_4base5FlagsINS0_8JSRegExp4FlagEiEEEEEPT_DpOT0_(%"class.v8::internal::Zone"* %643, %"class.v8::internal::Zone"** nonnull dereferenceable(8) %12, %"class.v8::internal::ZoneList.1145"** nonnull dereferenceable(8) %9, %"class.v8::base::Flags"* nonnull dereferenceable(4) %13)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %73) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %72) #13
  call void @_ZN2v88internal13RegExpBuilder17AddCharacterClassEPNS0_20RegExpCharacterClassE(%"class.v8::internal::RegExpBuilder"* %93, %"class.v8::internal::RegExpCharacterClass"* %645)
  br label %682

646:                                              ; preds = %638
  %647 = icmp eq i32 %603, 112
  br i1 %647, label %648, label %673

648:                                              ; preds = %646
  %649 = load i8*, i8** %68, align 8
  %650 = load i8*, i8** %69, align 8
  %651 = icmp eq i8* %649, %650
  br i1 %651, label %652, label %673

652:                                              ; preds = %648
  %653 = call %"class.v8::internal::RegExpTree"* @_ZN2v88internal12RegExpParser19GetPropertySequenceERKNS0_10ZoneVectorIcEE(%"class.v8::internal::RegExpParser"* %0, %"class.v8::internal::ZoneVector.1147"* nonnull dereferenceable(32) %10)
  %654 = icmp eq %"class.v8::internal::RegExpTree"* %653, null
  br i1 %654, label %673, label %655

655:                                              ; preds = %652
  %656 = bitcast %"class.v8::internal::RegExpTree"* %653 to i1 (%"class.v8::internal::RegExpTree"*)***
  %657 = load i1 (%"class.v8::internal::RegExpTree"*)**, i1 (%"class.v8::internal::RegExpTree"*)*** %656, align 8
  %658 = getelementptr inbounds i1 (%"class.v8::internal::RegExpTree"*)*, i1 (%"class.v8::internal::RegExpTree"*)** %657, i64 32
  %659 = load i1 (%"class.v8::internal::RegExpTree"*)*, i1 (%"class.v8::internal::RegExpTree"*)** %658, align 8
  %660 = call zeroext i1 %659(%"class.v8::internal::RegExpTree"* nonnull %653) #13
  br i1 %660, label %661, label %663

661:                                              ; preds = %655
  %662 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %93, i64 0, i32 1
  store i8 1, i8* %662, align 8
  br label %682

663:                                              ; preds = %655
  %664 = load i1 (%"class.v8::internal::RegExpTree"*)**, i1 (%"class.v8::internal::RegExpTree"*)*** %656, align 8
  %665 = getelementptr inbounds i1 (%"class.v8::internal::RegExpTree"*)*, i1 (%"class.v8::internal::RegExpTree"*)** %664, i64 4
  %666 = load i1 (%"class.v8::internal::RegExpTree"*)*, i1 (%"class.v8::internal::RegExpTree"*)** %665, align 8
  %667 = call zeroext i1 %666(%"class.v8::internal::RegExpTree"* nonnull %653) #13
  br i1 %667, label %668, label %671

668:                                              ; preds = %663
  call void @_ZN2v88internal13RegExpBuilder15FlushCharactersEv(%"class.v8::internal::RegExpBuilder"* %93) #13
  %669 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %93, i64 0, i32 6
  %670 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %97, align 8
  call void @_ZN2v88internal16BufferedZoneListINS0_10RegExpTreeELi2EE3AddEPS2_PNS0_4ZoneE(%"class.v8::internal::BufferedZoneList"* %669, %"class.v8::internal::RegExpTree"* nonnull %653, %"class.v8::internal::Zone"* %670) #13
  br label %682

671:                                              ; preds = %663
  call void @_ZN2v88internal13RegExpBuilder9FlushTextEv(%"class.v8::internal::RegExpBuilder"* %93) #13
  %672 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %97, align 8
  call void @_ZN2v88internal16BufferedZoneListINS0_10RegExpTreeELi2EE3AddEPS2_PNS0_4ZoneE(%"class.v8::internal::BufferedZoneList"* %96, %"class.v8::internal::RegExpTree"* nonnull %653, %"class.v8::internal::Zone"* %672) #13
  br label %682

673:                                              ; preds = %652, %646, %648, %633
  %674 = load i8, i8* %55, align 1, !range !2
  %675 = icmp eq i8 %674, 0
  br i1 %675, label %676, label %682

676:                                              ; preds = %673
  store i8 1, i8* %55, align 1
  store i32 7, i32* %70, align 8
  %677 = load i32, i32* %52, align 8
  %678 = add nsw i32 %677, -1
  store i32 %678, i32* %71, align 4
  store i32 2097152, i32* %51, align 8
  %679 = load %"class.v8::internal::FlatStringReader"*, %"class.v8::internal::FlatStringReader"** %53, align 8
  %680 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %679, i64 0, i32 3
  %681 = load i32, i32* %680, align 4
  store i32 %681, i32* %52, align 8
  br label %682

682:                                              ; preds = %671, %668, %661, %676, %673, %642
  %683 = phi i32 [ 5, %642 ], [ 1, %673 ], [ 1, %676 ], [ 5, %661 ], [ 5, %668 ], [ 5, %671 ]
  %684 = load i8*, i8** %68, align 8
  %685 = icmp eq i8* %684, null
  br i1 %685, label %688, label %686

686:                                              ; preds = %682
  %687 = ptrtoint i8* %684 to i64
  store i64 %687, i64* %75, align 8
  br label %688

688:                                              ; preds = %682, %686
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %65) #13
  %689 = load i8*, i8** %76, align 8
  %690 = icmp eq i8* %689, null
  br i1 %690, label %695, label %691

691:                                              ; preds = %688
  %692 = ptrtoint i8* %689 to i64
  store i64 %692, i64* %78, align 8
  br label %695

693:                                              ; preds = %602
  %694 = trunc i32 %603 to i16
  call void @_ZN2v88internal13RegExpBuilder12AddCharacterEt(%"class.v8::internal::RegExpBuilder"* %93, i16 zeroext %694)
  br label %1129

695:                                              ; preds = %691, %688
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %61) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %60) #13
  %696 = icmp eq i32 %683, 5
  br i1 %696, label %1129, label %1188

697:                                              ; preds = %428, %428, %428, %428, %428, %428, %428, %428, %428
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %59) #13
  store i32 0, i32* %14, align 4
  %698 = call zeroext i1 @_ZN2v88internal12RegExpParser23ParseBackReferenceIndexEPi(%"class.v8::internal::RegExpParser"* %0, i32* nonnull %14)
  %699 = load i8, i8* %55, align 1, !range !2
  %700 = icmp eq i8 %699, 0
  br i1 %700, label %701, label %806

701:                                              ; preds = %697
  br i1 %698, label %702, label %763

702:                                              ; preds = %701
  %703 = load i32, i32* %14, align 4
  %704 = icmp eq %"class.v8::internal::RegExpParser::RegExpParserState"* %94, null
  br i1 %704, label %722, label %705

705:                                              ; preds = %702, %716
  %706 = phi %"class.v8::internal::RegExpParser::RegExpParserState"* [ %718, %716 ], [ %94, %702 ]
  %707 = getelementptr inbounds %"class.v8::internal::RegExpParser::RegExpParserState", %"class.v8::internal::RegExpParser::RegExpParserState"* %706, i64 0, i32 2
  %708 = load i32, i32* %707, align 8
  %709 = icmp eq i32 %708, 1
  br i1 %709, label %710, label %716

710:                                              ; preds = %705
  %711 = getelementptr inbounds %"class.v8::internal::RegExpParser::RegExpParserState", %"class.v8::internal::RegExpParser::RegExpParserState"* %706, i64 0, i32 4
  %712 = load i32, i32* %711, align 8
  %713 = icmp eq i32 %712, %703
  br i1 %713, label %720, label %714

714:                                              ; preds = %710
  %715 = icmp slt i32 %712, %703
  br i1 %715, label %722, label %716

716:                                              ; preds = %714, %705
  %717 = getelementptr inbounds %"class.v8::internal::RegExpParser::RegExpParserState", %"class.v8::internal::RegExpParser::RegExpParserState"* %706, i64 0, i32 0
  %718 = load %"class.v8::internal::RegExpParser::RegExpParserState"*, %"class.v8::internal::RegExpParser::RegExpParserState"** %717, align 8
  %719 = icmp eq %"class.v8::internal::RegExpParser::RegExpParserState"* %718, null
  br i1 %719, label %722, label %705

720:                                              ; preds = %710
  %721 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %93, i64 0, i32 1
  store i8 1, i8* %721, align 8
  br label %805

722:                                              ; preds = %714, %716, %702
  %723 = call %"class.v8::internal::RegExpCapture"* @_ZN2v88internal12RegExpParser10GetCaptureEi(%"class.v8::internal::RegExpParser"* %0, i32 %703)
  %724 = ptrtoint %"class.v8::internal::RegExpCapture"* %723 to i64
  %725 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %22, align 8
  %726 = load i32, i32* %95, align 4
  %727 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %725, i64 0, i32 2
  %728 = load i64, i64* %727, align 8
  %729 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %725, i64 0, i32 3
  %730 = load i64, i64* %729, align 8
  %731 = sub i64 %730, %728
  %732 = icmp ult i64 %731, 32
  br i1 %732, label %733, label %735, !prof !3

733:                                              ; preds = %722
  %734 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %725, i64 32) #13
  br label %737

735:                                              ; preds = %722
  %736 = add i64 %728, 32
  store i64 %736, i64* %727, align 8
  br label %737

737:                                              ; preds = %733, %735
  %738 = phi i64 [ %734, %733 ], [ %728, %735 ]
  %739 = inttoptr i64 %738 to %"class.v8::internal::RegExpBackReference"*
  %740 = getelementptr inbounds %"class.v8::internal::RegExpBackReference", %"class.v8::internal::RegExpBackReference"* %739, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [37 x i8*] }, { [37 x i8*] }* @_ZTVN2v88internal19RegExpBackReferenceE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %740, align 8
  %741 = getelementptr inbounds %"class.v8::internal::RegExpBackReference", %"class.v8::internal::RegExpBackReference"* %739, i64 0, i32 1
  %742 = bitcast %"class.v8::internal::RegExpCapture"** %741 to i64*
  store i64 %724, i64* %742, align 8
  %743 = getelementptr inbounds %"class.v8::internal::RegExpBackReference", %"class.v8::internal::RegExpBackReference"* %739, i64 0, i32 2
  store %"class.v8::internal::ZoneVector"* null, %"class.v8::internal::ZoneVector"** %743, align 8
  %744 = getelementptr inbounds %"class.v8::internal::RegExpBackReference", %"class.v8::internal::RegExpBackReference"* %739, i64 0, i32 3, i32 0
  store i32 %726, i32* %744, align 8
  %745 = getelementptr inbounds %"class.v8::internal::RegExpBackReference", %"class.v8::internal::RegExpBackReference"* %739, i64 0, i32 0
  %746 = inttoptr i64 %738 to i1 (%"class.v8::internal::RegExpTree"*)***
  %747 = load i1 (%"class.v8::internal::RegExpTree"*)**, i1 (%"class.v8::internal::RegExpTree"*)*** %746, align 8
  %748 = getelementptr inbounds i1 (%"class.v8::internal::RegExpTree"*)*, i1 (%"class.v8::internal::RegExpTree"*)** %747, i64 32
  %749 = load i1 (%"class.v8::internal::RegExpTree"*)*, i1 (%"class.v8::internal::RegExpTree"*)** %748, align 8
  %750 = call zeroext i1 %749(%"class.v8::internal::RegExpTree"* %745) #13
  br i1 %750, label %751, label %753

751:                                              ; preds = %737
  %752 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %93, i64 0, i32 1
  store i8 1, i8* %752, align 8
  br label %805

753:                                              ; preds = %737
  %754 = load i1 (%"class.v8::internal::RegExpTree"*)**, i1 (%"class.v8::internal::RegExpTree"*)*** %746, align 8
  %755 = getelementptr inbounds i1 (%"class.v8::internal::RegExpTree"*)*, i1 (%"class.v8::internal::RegExpTree"*)** %754, i64 4
  %756 = load i1 (%"class.v8::internal::RegExpTree"*)*, i1 (%"class.v8::internal::RegExpTree"*)** %755, align 8
  %757 = call zeroext i1 %756(%"class.v8::internal::RegExpTree"* %745) #13
  br i1 %757, label %758, label %761

758:                                              ; preds = %753
  call void @_ZN2v88internal13RegExpBuilder15FlushCharactersEv(%"class.v8::internal::RegExpBuilder"* %93) #13
  %759 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %93, i64 0, i32 6
  %760 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %97, align 8
  call void @_ZN2v88internal16BufferedZoneListINS0_10RegExpTreeELi2EE3AddEPS2_PNS0_4ZoneE(%"class.v8::internal::BufferedZoneList"* %759, %"class.v8::internal::RegExpTree"* %745, %"class.v8::internal::Zone"* %760) #13
  br label %805

761:                                              ; preds = %753
  call void @_ZN2v88internal13RegExpBuilder9FlushTextEv(%"class.v8::internal::RegExpBuilder"* %93) #13
  %762 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %97, align 8
  call void @_ZN2v88internal16BufferedZoneListINS0_10RegExpTreeELi2EE3AddEPS2_PNS0_4ZoneE(%"class.v8::internal::BufferedZoneList"* %96, %"class.v8::internal::RegExpTree"* %745, %"class.v8::internal::Zone"* %762) #13
  br label %805

763:                                              ; preds = %701
  %764 = load i32, i32* %20, align 4
  %765 = and i32 %764, 16
  %766 = icmp eq i32 %765, 0
  br i1 %766, label %773, label %767

767:                                              ; preds = %763
  store i8 1, i8* %55, align 1
  store i32 8, i32* %70, align 8
  %768 = load i32, i32* %52, align 8
  %769 = add nsw i32 %768, -1
  store i32 %769, i32* %71, align 4
  store i32 2097152, i32* %51, align 8
  %770 = load %"class.v8::internal::FlatStringReader"*, %"class.v8::internal::FlatStringReader"** %53, align 8
  %771 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %770, i64 0, i32 3
  %772 = load i32, i32* %771, align 4
  store i32 %772, i32* %52, align 8
  br label %806

773:                                              ; preds = %763
  %774 = load i32, i32* %52, align 8
  %775 = load %"class.v8::internal::FlatStringReader"*, %"class.v8::internal::FlatStringReader"** %53, align 8
  %776 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %775, i64 0, i32 3
  %777 = load i32, i32* %776, align 4
  %778 = icmp slt i32 %774, %777
  br i1 %778, label %779, label %807

779:                                              ; preds = %773
  %780 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %775, i64 0, i32 2
  %781 = load i8, i8* %780, align 8, !range !2
  %782 = icmp eq i8 %781, 0
  %783 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %775, i64 0, i32 4
  br i1 %782, label %790, label %784

784:                                              ; preds = %779
  %785 = load i8*, i8** %783, align 8
  %786 = sext i32 %774 to i64
  %787 = getelementptr inbounds i8, i8* %785, i64 %786
  %788 = load i8, i8* %787, align 1
  %789 = zext i8 %788 to i32
  br label %797

790:                                              ; preds = %779
  %791 = bitcast i8** %783 to i16**
  %792 = load i16*, i16** %791, align 8
  %793 = sext i32 %774 to i64
  %794 = getelementptr inbounds i16, i16* %792, i64 %793
  %795 = load i16, i16* %794, align 2
  %796 = zext i16 %795 to i32
  br label %797

797:                                              ; preds = %784, %790
  %798 = phi i32 [ %789, %784 ], [ %796, %790 ]
  %799 = or i32 %798, 1
  %800 = icmp eq i32 %799, 57
  br i1 %800, label %801, label %807

801:                                              ; preds = %797
  %802 = trunc i32 %798 to i16
  call void @_ZN2v88internal13RegExpBuilder12AddCharacterEt(%"class.v8::internal::RegExpBuilder"* %93, i16 zeroext %802)
  %803 = load i32, i32* %52, align 8
  %804 = add nsw i32 %803, 1
  store i32 %804, i32* %52, align 8
  call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0) #13
  br label %805

805:                                              ; preds = %720, %801, %751, %758, %761
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %59) #13
  br label %1129

806:                                              ; preds = %697, %767
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %59) #13
  br label %1188

807:                                              ; preds = %773, %797
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %59) #13
  br label %808

808:                                              ; preds = %428, %807
  call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0)
  %809 = load i32, i32* %20, align 4
  %810 = and i32 %809, 16
  %811 = icmp eq i32 %810, 0
  br i1 %811, label %899, label %812

812:                                              ; preds = %808
  %813 = load i32, i32* %52, align 8
  %814 = load %"class.v8::internal::FlatStringReader"*, %"class.v8::internal::FlatStringReader"** %53, align 8
  %815 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %814, i64 0, i32 3
  %816 = load i32, i32* %815, align 4
  %817 = icmp slt i32 %813, %816
  br i1 %817, label %818, label %899

818:                                              ; preds = %812
  %819 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %814, i64 0, i32 2
  %820 = load i8, i8* %819, align 8, !range !2
  %821 = icmp eq i8 %820, 0
  %822 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %814, i64 0, i32 4
  br i1 %821, label %830, label %823

823:                                              ; preds = %818
  %824 = load i8*, i8** %822, align 8
  %825 = sext i32 %813 to i64
  %826 = getelementptr inbounds i8, i8* %824, i64 %825
  %827 = load i8, i8* %826, align 1
  %828 = zext i8 %827 to i32
  %829 = bitcast i8* %824 to i16*
  br label %838

830:                                              ; preds = %818
  %831 = bitcast i8** %822 to i16**
  %832 = load i16*, i16** %831, align 8
  %833 = sext i32 %813 to i64
  %834 = getelementptr inbounds i16, i16* %832, i64 %833
  %835 = load i16, i16* %834, align 2
  %836 = zext i16 %835 to i32
  %837 = bitcast i16* %832 to i8*
  br label %838

838:                                              ; preds = %823, %830
  %839 = phi i16* [ %829, %823 ], [ %832, %830 ]
  %840 = phi i8* [ %824, %823 ], [ %837, %830 ]
  %841 = phi i32 [ %828, %823 ], [ %836, %830 ]
  %842 = add nsw i32 %813, 1
  %843 = icmp slt i32 %842, %816
  %844 = and i32 %841, 64512
  %845 = icmp eq i32 %844, 55296
  %846 = and i1 %843, %845
  br i1 %846, label %847, label %859

847:                                              ; preds = %838
  br i1 %821, label %848, label %853

848:                                              ; preds = %847
  %849 = sext i32 %842 to i64
  %850 = getelementptr inbounds i16, i16* %839, i64 %849
  %851 = load i16, i16* %850, align 2
  %852 = zext i16 %851 to i32
  br label %853

853:                                              ; preds = %847, %848
  %854 = phi i32 [ %852, %848 ], [ 0, %847 ]
  %855 = and i32 %854, 64512
  %856 = icmp eq i32 %855, 56320
  %857 = icmp ugt i32 %841, 47
  %858 = or i1 %857, %856
  br i1 %858, label %861, label %899

859:                                              ; preds = %838
  %860 = icmp ugt i32 %841, 47
  br i1 %860, label %861, label %899

861:                                              ; preds = %859, %853
  %862 = sext i32 %813 to i64
  br i1 %821, label %868, label %863

863:                                              ; preds = %861
  %864 = getelementptr inbounds i8, i8* %840, i64 %862
  %865 = load i8, i8* %864, align 1
  %866 = zext i8 %865 to i32
  %867 = bitcast i8* %840 to i16*
  br label %872

868:                                              ; preds = %861
  %869 = getelementptr inbounds i16, i16* %839, i64 %862
  %870 = load i16, i16* %869, align 2
  %871 = zext i16 %870 to i32
  br label %872

872:                                              ; preds = %863, %868
  %873 = phi i16* [ %867, %863 ], [ %839, %868 ]
  %874 = phi i32 [ %866, %863 ], [ %871, %868 ]
  %875 = and i32 %874, 64512
  %876 = icmp eq i32 %875, 55296
  %877 = and i1 %843, %876
  br i1 %877, label %878, label %890

878:                                              ; preds = %872
  br i1 %821, label %879, label %884

879:                                              ; preds = %878
  %880 = sext i32 %842 to i64
  %881 = getelementptr inbounds i16, i16* %873, i64 %880
  %882 = load i16, i16* %881, align 2
  %883 = zext i16 %882 to i32
  br label %884

884:                                              ; preds = %878, %879
  %885 = phi i32 [ %883, %879 ], [ 0, %878 ]
  %886 = and i32 %885, 64512
  %887 = icmp ne i32 %886, 56320
  %888 = icmp ult i32 %874, 58
  %889 = and i1 %888, %887
  br i1 %889, label %892, label %899

890:                                              ; preds = %872
  %891 = icmp ult i32 %874, 58
  br i1 %891, label %892, label %899

892:                                              ; preds = %884, %890
  %893 = load i8, i8* %55, align 1, !range !2
  %894 = icmp eq i8 %893, 0
  br i1 %894, label %895, label %1188

895:                                              ; preds = %892
  %896 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %814, i64 0, i32 3
  store i8 1, i8* %55, align 1
  store i32 9, i32* %70, align 8
  %897 = add nsw i32 %813, -1
  store i32 %897, i32* %71, align 4
  store i32 2097152, i32* %51, align 8
  %898 = load i32, i32* %896, align 4
  store i32 %898, i32* %52, align 8
  br label %1188

899:                                              ; preds = %808, %884, %853, %812, %890, %859
  %900 = load i32, i32* %51, align 8
  %901 = add i32 %900, -48
  call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0) #13
  %902 = load i32, i32* %51, align 8
  %903 = and i32 %902, -8
  %904 = icmp eq i32 %903, 48
  br i1 %904, label %905, label %918

905:                                              ; preds = %899
  %906 = shl i32 %901, 3
  %907 = add i32 %902, -48
  %908 = add i32 %907, %906
  call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0) #13
  %909 = icmp ult i32 %908, 32
  br i1 %909, label %910, label %918

910:                                              ; preds = %905
  %911 = load i32, i32* %51, align 8
  %912 = and i32 %911, -8
  %913 = icmp eq i32 %912, 48
  br i1 %913, label %914, label %918

914:                                              ; preds = %910
  %915 = shl i32 %908, 3
  %916 = add nsw i32 %915, -48
  %917 = add i32 %916, %911
  call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0) #13
  br label %918

918:                                              ; preds = %899, %905, %910, %914
  %919 = phi i32 [ %917, %914 ], [ %908, %910 ], [ %908, %905 ], [ %901, %899 ]
  %920 = trunc i32 %919 to i16
  call void @_ZN2v88internal13RegExpBuilder12AddCharacterEt(%"class.v8::internal::RegExpBuilder"* %93, i16 zeroext %920)
  br label %1129

921:                                              ; preds = %428
  store i32 %399, i32* %52, align 8
  call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0) #13
  call void @_ZN2v88internal13RegExpBuilder12AddCharacterEt(%"class.v8::internal::RegExpBuilder"* %93, i16 zeroext 12)
  br label %1129

922:                                              ; preds = %428
  store i32 %399, i32* %52, align 8
  call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0) #13
  call void @_ZN2v88internal13RegExpBuilder12AddCharacterEt(%"class.v8::internal::RegExpBuilder"* %93, i16 zeroext 10)
  br label %1129

923:                                              ; preds = %428
  store i32 %399, i32* %52, align 8
  call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0) #13
  call void @_ZN2v88internal13RegExpBuilder12AddCharacterEt(%"class.v8::internal::RegExpBuilder"* %93, i16 zeroext 13)
  br label %1129

924:                                              ; preds = %428
  store i32 %399, i32* %52, align 8
  call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0) #13
  call void @_ZN2v88internal13RegExpBuilder12AddCharacterEt(%"class.v8::internal::RegExpBuilder"* %93, i16 zeroext 9)
  br label %1129

925:                                              ; preds = %428
  store i32 %399, i32* %52, align 8
  call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0) #13
  call void @_ZN2v88internal13RegExpBuilder12AddCharacterEt(%"class.v8::internal::RegExpBuilder"* %93, i16 zeroext 11)
  br label %1129

926:                                              ; preds = %428
  call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0)
  %927 = load i32, i32* %52, align 8
  %928 = load %"class.v8::internal::FlatStringReader"*, %"class.v8::internal::FlatStringReader"** %53, align 8
  %929 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %928, i64 0, i32 3
  %930 = load i32, i32* %929, align 4
  %931 = icmp slt i32 %927, %930
  br i1 %931, label %934, label %932

932:                                              ; preds = %926
  %933 = load i32, i32* %20, align 4
  br label %992

934:                                              ; preds = %926
  %935 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %928, i64 0, i32 2
  %936 = load i8, i8* %935, align 8, !range !2
  %937 = icmp eq i8 %936, 0
  %938 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %928, i64 0, i32 4
  br i1 %937, label %946, label %939

939:                                              ; preds = %934
  %940 = load i8*, i8** %938, align 8
  %941 = sext i32 %927 to i64
  %942 = getelementptr inbounds i8, i8* %940, i64 %941
  %943 = load i8, i8* %942, align 1
  %944 = zext i8 %943 to i32
  %945 = bitcast i8* %940 to i16*
  br label %954

946:                                              ; preds = %934
  %947 = bitcast i8** %938 to i16**
  %948 = load i16*, i16** %947, align 8
  %949 = sext i32 %927 to i64
  %950 = getelementptr inbounds i16, i16* %948, i64 %949
  %951 = load i16, i16* %950, align 2
  %952 = zext i16 %951 to i32
  %953 = bitcast i16* %948 to i8*
  br label %954

954:                                              ; preds = %946, %939
  %955 = phi i16* [ %945, %939 ], [ %948, %946 ]
  %956 = phi i8* [ %940, %939 ], [ %953, %946 ]
  %957 = phi i32 [ %944, %939 ], [ %952, %946 ]
  %958 = add nsw i32 %927, 1
  %959 = load i32, i32* %20, align 4
  %960 = and i32 %959, 16
  %961 = icmp eq i32 %960, 0
  br i1 %961, label %987, label %962

962:                                              ; preds = %954
  %963 = icmp slt i32 %958, %930
  %964 = and i32 %957, 64512
  %965 = icmp eq i32 %964, 55296
  %966 = and i1 %963, %965
  br i1 %966, label %967, label %987

967:                                              ; preds = %962
  %968 = sext i32 %958 to i64
  br i1 %937, label %973, label %969

969:                                              ; preds = %967
  %970 = getelementptr inbounds i8, i8* %956, i64 %968
  %971 = load i8, i8* %970, align 1
  %972 = zext i8 %971 to i32
  br label %977

973:                                              ; preds = %967
  %974 = getelementptr inbounds i16, i16* %955, i64 %968
  %975 = load i16, i16* %974, align 2
  %976 = zext i16 %975 to i32
  br label %977

977:                                              ; preds = %973, %969
  %978 = phi i32 [ %972, %969 ], [ %976, %973 ]
  %979 = and i32 %978, 64512
  %980 = icmp eq i32 %979, 56320
  br i1 %980, label %981, label %987

981:                                              ; preds = %977
  %982 = shl nuw nsw i32 %957, 10
  %983 = and i32 %982, 1047552
  %984 = add nuw nsw i32 %983, 65536
  %985 = and i32 %978, 1023
  %986 = or i32 %985, %984
  br label %987

987:                                              ; preds = %954, %962, %977, %981
  %988 = phi i32 [ %957, %962 ], [ %957, %954 ], [ %986, %981 ], [ %957, %977 ]
  %989 = and i32 %988, -33
  %990 = add nsw i32 %989, -65
  %991 = icmp ugt i32 %990, 25
  br i1 %991, label %992, label %1004

992:                                              ; preds = %932, %987
  %993 = phi i32 [ %933, %932 ], [ %959, %987 ]
  %994 = and i32 %993, 16
  %995 = icmp eq i32 %994, 0
  br i1 %995, label %1003, label %996

996:                                              ; preds = %992
  %997 = load i8, i8* %55, align 1, !range !2
  %998 = icmp eq i8 %997, 0
  br i1 %998, label %999, label %1188

999:                                              ; preds = %996
  %1000 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %928, i64 0, i32 3
  store i8 1, i8* %55, align 1
  store i32 10, i32* %70, align 8
  %1001 = add nsw i32 %927, -1
  store i32 %1001, i32* %71, align 4
  store i32 2097152, i32* %51, align 8
  %1002 = load i32, i32* %1000, align 4
  store i32 %1002, i32* %52, align 8
  br label %1188

1003:                                             ; preds = %992
  call void @_ZN2v88internal13RegExpBuilder12AddCharacterEt(%"class.v8::internal::RegExpBuilder"* %93, i16 zeroext 92)
  br label %1129

1004:                                             ; preds = %987
  store i32 %958, i32* %52, align 8
  call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0) #13
  %1005 = trunc i32 %988 to i16
  %1006 = and i16 %1005, 31
  call void @_ZN2v88internal13RegExpBuilder12AddCharacterEt(%"class.v8::internal::RegExpBuilder"* %93, i16 zeroext %1006)
  br label %1129

1007:                                             ; preds = %428
  store i32 %399, i32* %52, align 8
  call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0) #13
  %1008 = load i32, i32* %52, align 8
  %1009 = add nsw i32 %1008, -1
  %1010 = load i32, i32* %51, align 8
  %1011 = add i32 %1010, -48
  %1012 = icmp ult i32 %1011, 10
  br i1 %1012, label %1020, label %1013

1013:                                             ; preds = %1007
  %1014 = or i32 %1011, 32
  %1015 = add i32 %1014, -49
  %1016 = icmp ugt i32 %1015, 5
  %1017 = add i32 %1014, -39
  %1018 = icmp slt i32 %1017, 0
  %1019 = or i1 %1016, %1018
  br i1 %1019, label %1025, label %1020

1020:                                             ; preds = %1013, %1007
  %1021 = phi i32 [ %1011, %1007 ], [ %1017, %1013 ]
  call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0) #13
  %1022 = load i32, i32* %51, align 8
  %1023 = add i32 %1022, -48
  %1024 = icmp ult i32 %1023, 10
  br i1 %1024, label %1197, label %1190

1025:                                             ; preds = %1190, %1013
  store i32 %1009, i32* %52, align 8
  %1026 = load %"class.v8::internal::FlatStringReader"*, %"class.v8::internal::FlatStringReader"** %53, align 8
  %1027 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %1026, i64 0, i32 3
  %1028 = load i32, i32* %1027, align 4
  %1029 = icmp sge i32 %1028, %1008
  %1030 = zext i1 %1029 to i8
  store i8 %1030, i8* %58, align 4
  call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0) #13
  %1031 = load i32, i32* %20, align 4
  %1032 = and i32 %1031, 16
  %1033 = icmp eq i32 %1032, 0
  br i1 %1033, label %1034, label %1035

1034:                                             ; preds = %1025
  call void @_ZN2v88internal13RegExpBuilder12AddCharacterEt(%"class.v8::internal::RegExpBuilder"* %93, i16 zeroext 120)
  br label %1129

1035:                                             ; preds = %1025
  %1036 = load i8, i8* %55, align 1, !range !2
  %1037 = icmp eq i8 %1036, 0
  br i1 %1037, label %1038, label %1188

1038:                                             ; preds = %1035
  store i8 1, i8* %55, align 1
  store i32 8, i32* %70, align 8
  %1039 = load i32, i32* %52, align 8
  %1040 = add nsw i32 %1039, -1
  store i32 %1040, i32* %71, align 4
  store i32 2097152, i32* %51, align 8
  %1041 = load %"class.v8::internal::FlatStringReader"*, %"class.v8::internal::FlatStringReader"** %53, align 8
  %1042 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %1041, i64 0, i32 3
  %1043 = load i32, i32* %1042, align 4
  store i32 %1043, i32* %52, align 8
  br label %1188

1044:                                             ; preds = %428
  store i32 %399, i32* %52, align 8
  call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0) #13
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %57) #13
  %1045 = call zeroext i1 @_ZN2v88internal12RegExpParser18ParseUnicodeEscapeEPj(%"class.v8::internal::RegExpParser"* %0, i32* nonnull %15)
  br i1 %1045, label %1046, label %1048

1046:                                             ; preds = %1044
  %1047 = load i32, i32* %15, align 4
  call void @_ZN2v88internal13RegExpBuilder26AddEscapedUnicodeCharacterEj(%"class.v8::internal::RegExpBuilder"* %93, i32 %1047)
  br label %1063

1048:                                             ; preds = %1044
  %1049 = load i32, i32* %20, align 4
  %1050 = and i32 %1049, 16
  %1051 = icmp eq i32 %1050, 0
  br i1 %1051, label %1052, label %1053

1052:                                             ; preds = %1048
  call void @_ZN2v88internal13RegExpBuilder12AddCharacterEt(%"class.v8::internal::RegExpBuilder"* %93, i16 zeroext 117)
  br label %1063

1053:                                             ; preds = %1048
  %1054 = load i8, i8* %55, align 1, !range !2
  %1055 = icmp eq i8 %1054, 0
  br i1 %1055, label %1056, label %1062

1056:                                             ; preds = %1053
  store i8 1, i8* %55, align 1
  store i32 10, i32* %70, align 8
  %1057 = load i32, i32* %52, align 8
  %1058 = add nsw i32 %1057, -1
  store i32 %1058, i32* %71, align 4
  store i32 2097152, i32* %51, align 8
  %1059 = load %"class.v8::internal::FlatStringReader"*, %"class.v8::internal::FlatStringReader"** %53, align 8
  %1060 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %1059, i64 0, i32 3
  %1061 = load i32, i32* %1060, align 4
  store i32 %1061, i32* %52, align 8
  br label %1062

1062:                                             ; preds = %1053, %1056
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %57) #13
  br label %1188

1063:                                             ; preds = %1046, %1052
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %57) #13
  br label %1129

1064:                                             ; preds = %428
  br i1 %402, label %1065, label %1077

1065:                                             ; preds = %1064
  %1066 = load i8, i8* %83, align 8, !range !2
  %1067 = icmp eq i8 %1066, 0
  br i1 %1067, label %1068, label %1077

1068:                                             ; preds = %1065
  %1069 = load i8, i8* %84, align 1, !range !2
  %1070 = icmp eq i8 %1069, 0
  br i1 %1070, label %1071, label %1082

1071:                                             ; preds = %1068
  call void @_ZN2v88internal12RegExpParser15ScanForCapturesEv(%"class.v8::internal::RegExpParser"* %0) #13
  %1072 = load i8, i8* %83, align 8, !range !2
  %1073 = icmp eq i8 %1072, 0
  br i1 %1073, label %1082, label %1074

1074:                                             ; preds = %1071
  %1075 = load i32, i32* %52, align 8
  %1076 = add nsw i32 %1075, 1
  br label %1077

1077:                                             ; preds = %1074, %1064, %1065
  %1078 = phi i32 [ %1076, %1074 ], [ %399, %1064 ], [ %399, %1065 ]
  store i32 %1078, i32* %52, align 8
  call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0) #13
  %1079 = call zeroext i1 @_ZN2v88internal12RegExpParser23ParseNamedBackReferenceEPNS0_13RegExpBuilderEPNS1_17RegExpParserStateE(%"class.v8::internal::RegExpParser"* %0, %"class.v8::internal::RegExpBuilder"* %93, %"class.v8::internal::RegExpParser::RegExpParserState"* %94)
  %1080 = load i8, i8* %55, align 1, !range !2
  %1081 = icmp eq i8 %1080, 0
  br i1 %1081, label %1129, label %1188

1082:                                             ; preds = %428, %1071, %1068
  call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0)
  %1083 = load i32, i32* %20, align 4
  %1084 = and i32 %1083, 16
  %1085 = icmp eq i32 %1084, 0
  %1086 = load i32, i32* %51, align 8
  br i1 %1085, label %1089, label %1087

1087:                                             ; preds = %1082
  %1088 = call zeroext i1 @_ZN2v88internal12RegExpParser24IsSyntaxCharacterOrSlashEj(i32 %1086)
  br i1 %1088, label %1089, label %1091

1089:                                             ; preds = %1082, %1087
  %1090 = trunc i32 %1086 to i16
  call void @_ZN2v88internal13RegExpBuilder12AddCharacterEt(%"class.v8::internal::RegExpBuilder"* %93, i16 zeroext %1090)
  call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0)
  br label %1129

1091:                                             ; preds = %1087
  %1092 = load i8, i8* %55, align 1, !range !2
  %1093 = icmp eq i8 %1092, 0
  br i1 %1093, label %1094, label %1188

1094:                                             ; preds = %1091
  store i8 1, i8* %55, align 1
  store i32 8, i32* %70, align 8
  %1095 = load i32, i32* %52, align 8
  %1096 = add nsw i32 %1095, -1
  store i32 %1096, i32* %71, align 4
  store i32 2097152, i32* %51, align 8
  %1097 = load %"class.v8::internal::FlatStringReader"*, %"class.v8::internal::FlatStringReader"** %53, align 8
  %1098 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %1097, i64 0, i32 3
  %1099 = load i32, i32* %1098, align 4
  store i32 %1099, i32* %52, align 8
  br label %1188

1100:                                             ; preds = %98
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %56) #13
  %1101 = call zeroext i1 @_ZN2v88internal12RegExpParser23ParseIntervalQuantifierEPiS2_(%"class.v8::internal::RegExpParser"* %0, i32* nonnull %16, i32* nonnull %16)
  %1102 = load i8, i8* %55, align 1, !range !2
  %1103 = icmp eq i8 %1102, 0
  br i1 %1103, label %1104, label %1187

1104:                                             ; preds = %1100
  br i1 %1101, label %1105, label %1111

1105:                                             ; preds = %1104
  store i8 1, i8* %55, align 1
  store i32 11, i32* %70, align 8
  %1106 = load i32, i32* %52, align 8
  %1107 = add nsw i32 %1106, -1
  store i32 %1107, i32* %71, align 4
  store i32 2097152, i32* %51, align 8
  %1108 = load %"class.v8::internal::FlatStringReader"*, %"class.v8::internal::FlatStringReader"** %53, align 8
  %1109 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %1108, i64 0, i32 3
  %1110 = load i32, i32* %1109, align 4
  store i32 %1110, i32* %52, align 8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %56) #13
  br label %1188

1111:                                             ; preds = %1104
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %56) #13
  br label %1112

1112:                                             ; preds = %98, %98, %1111
  %1113 = load i32, i32* %20, align 4
  %1114 = and i32 %1113, 16
  %1115 = icmp eq i32 %1114, 0
  br i1 %1115, label %1116, label %1118

1116:                                             ; preds = %1112
  %1117 = load i32, i32* %51, align 8
  br label %1127

1118:                                             ; preds = %1112
  %1119 = load i8, i8* %55, align 1, !range !2
  %1120 = icmp eq i8 %1119, 0
  br i1 %1120, label %1121, label %1188

1121:                                             ; preds = %1118
  store i8 1, i8* %55, align 1
  store i32 12, i32* %70, align 8
  %1122 = load i32, i32* %52, align 8
  %1123 = add nsw i32 %1122, -1
  store i32 %1123, i32* %71, align 4
  store i32 2097152, i32* %51, align 8
  %1124 = load %"class.v8::internal::FlatStringReader"*, %"class.v8::internal::FlatStringReader"** %53, align 8
  %1125 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %1124, i64 0, i32 3
  %1126 = load i32, i32* %1125, align 4
  store i32 %1126, i32* %52, align 8
  br label %1188

1127:                                             ; preds = %98, %1116
  %1128 = phi i32 [ %1117, %1116 ], [ %99, %98 ]
  call void @_ZN2v88internal13RegExpBuilder19AddUnicodeCharacterEj(%"class.v8::internal::RegExpBuilder"* %93, i32 %1128)
  call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0)
  br label %1129

1129:                                             ; preds = %236, %232, %225, %1034, %1197, %805, %693, %1063, %1004, %1003, %363, %1077, %555, %918, %921, %922, %923, %924, %925, %1089, %695, %1127, %338
  %1130 = phi %"class.v8::internal::RegExpBuilder"* [ %93, %1127 ], [ %93, %1089 ], [ %93, %1077 ], [ %93, %1063 ], [ %93, %1003 ], [ %93, %1004 ], [ %93, %925 ], [ %93, %924 ], [ %93, %923 ], [ %93, %922 ], [ %93, %921 ], [ %93, %918 ], [ %93, %695 ], [ %93, %555 ], [ %93, %363 ], [ %93, %338 ], [ %93, %693 ], [ %93, %805 ], [ %93, %1197 ], [ %93, %1034 ], [ %218, %225 ], [ %218, %232 ], [ %218, %236 ]
  %1131 = phi %"class.v8::internal::RegExpParser::RegExpParserState"* [ %94, %1127 ], [ %94, %1089 ], [ %94, %1077 ], [ %94, %1063 ], [ %94, %1003 ], [ %94, %1004 ], [ %94, %925 ], [ %94, %924 ], [ %94, %923 ], [ %94, %922 ], [ %94, %921 ], [ %94, %918 ], [ %94, %695 ], [ %94, %555 ], [ %94, %363 ], [ %94, %338 ], [ %94, %693 ], [ %94, %805 ], [ %94, %1197 ], [ %94, %1034 ], [ %216, %225 ], [ %216, %232 ], [ %216, %236 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %90) #13
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %91) #13
  %1132 = load i32, i32* %51, align 8
  switch i32 %1132, label %1186 [
    i32 42, label %1133
    i32 43, label %1134
    i32 63, label %1135
    i32 123, label %1136
  ]

1133:                                             ; preds = %1129
  store i32 0, i32* %17, align 4
  store i32 2147483647, i32* %18, align 4
  br label %1164

1134:                                             ; preds = %1129
  store i32 1, i32* %17, align 4
  store i32 2147483647, i32* %18, align 4
  br label %1164

1135:                                             ; preds = %1129
  store i32 0, i32* %17, align 4
  store i32 1, i32* %18, align 4
  br label %1164

1136:                                             ; preds = %1129
  %1137 = call zeroext i1 @_ZN2v88internal12RegExpParser23ParseIntervalQuantifierEPiS2_(%"class.v8::internal::RegExpParser"* %0, i32* nonnull %17, i32* nonnull %18)
  br i1 %1137, label %1138, label %1151

1138:                                             ; preds = %1136
  %1139 = load i32, i32* %18, align 4
  %1140 = load i32, i32* %17, align 4
  %1141 = icmp slt i32 %1139, %1140
  br i1 %1141, label %1142, label %1167

1142:                                             ; preds = %1138
  %1143 = load i8, i8* %55, align 1, !range !2
  %1144 = icmp eq i8 %1143, 0
  br i1 %1144, label %1145, label %1185

1145:                                             ; preds = %1142
  store i8 1, i8* %55, align 1
  store i32 13, i32* %70, align 8
  %1146 = load i32, i32* %52, align 8
  %1147 = add nsw i32 %1146, -1
  store i32 %1147, i32* %71, align 4
  store i32 2097152, i32* %51, align 8
  %1148 = load %"class.v8::internal::FlatStringReader"*, %"class.v8::internal::FlatStringReader"** %53, align 8
  %1149 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %1148, i64 0, i32 3
  %1150 = load i32, i32* %1149, align 4
  store i32 %1150, i32* %52, align 8
  br label %1185

1151:                                             ; preds = %1136
  %1152 = load i32, i32* %20, align 4
  %1153 = and i32 %1152, 16
  %1154 = icmp eq i32 %1153, 0
  br i1 %1154, label %1186, label %1155

1155:                                             ; preds = %1151
  %1156 = load i8, i8* %55, align 1, !range !2
  %1157 = icmp eq i8 %1156, 0
  br i1 %1157, label %1158, label %1185

1158:                                             ; preds = %1155
  store i8 1, i8* %55, align 1
  store i32 14, i32* %70, align 8
  %1159 = load i32, i32* %52, align 8
  %1160 = add nsw i32 %1159, -1
  store i32 %1160, i32* %71, align 4
  store i32 2097152, i32* %51, align 8
  %1161 = load %"class.v8::internal::FlatStringReader"*, %"class.v8::internal::FlatStringReader"** %53, align 8
  %1162 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %1161, i64 0, i32 3
  %1163 = load i32, i32* %1162, align 4
  store i32 %1163, i32* %52, align 8
  br label %1185

1164:                                             ; preds = %1133, %1134, %1135
  %1165 = phi i32 [ 2147483647, %1133 ], [ 2147483647, %1134 ], [ 1, %1135 ]
  %1166 = phi i32 [ 0, %1133 ], [ 1, %1134 ], [ 0, %1135 ]
  call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0)
  br label %1167

1167:                                             ; preds = %1164, %1138
  %1168 = phi i32 [ %1139, %1138 ], [ %1165, %1164 ]
  %1169 = phi i32 [ %1140, %1138 ], [ %1166, %1164 ]
  %1170 = load i32, i32* %51, align 8
  %1171 = icmp eq i32 %1170, 63
  br i1 %1171, label %1172, label %1173

1172:                                             ; preds = %1167
  call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0)
  br label %1173

1173:                                             ; preds = %1167, %1172
  %1174 = phi i32 [ 1, %1172 ], [ 0, %1167 ]
  %1175 = call zeroext i1 @_ZN2v88internal13RegExpBuilder19AddQuantifierToAtomEiiNS0_16RegExpQuantifier14QuantifierTypeE(%"class.v8::internal::RegExpBuilder"* %1130, i32 %1169, i32 %1168, i32 %1174)
  br i1 %1175, label %1186, label %1176

1176:                                             ; preds = %1173
  %1177 = load i8, i8* %55, align 1, !range !2
  %1178 = icmp eq i8 %1177, 0
  br i1 %1178, label %1179, label %1185

1179:                                             ; preds = %1176
  store i8 1, i8* %55, align 1
  store i32 15, i32* %70, align 8
  %1180 = load i32, i32* %52, align 8
  %1181 = add nsw i32 %1180, -1
  store i32 %1181, i32* %71, align 4
  store i32 2097152, i32* %51, align 8
  %1182 = load %"class.v8::internal::FlatStringReader"*, %"class.v8::internal::FlatStringReader"** %53, align 8
  %1183 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %1182, i64 0, i32 3
  %1184 = load i32, i32* %1183, align 4
  store i32 %1184, i32* %52, align 8
  br label %1185

1185:                                             ; preds = %1142, %1145, %1155, %1158, %1176, %1179
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %91) #13
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %90) #13
  br label %1188

1186:                                             ; preds = %1151, %1173, %1129
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %91) #13
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %90) #13
  br label %356

1187:                                             ; preds = %1100
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %56) #13
  br label %1188

1188:                                             ; preds = %139, %1077, %359, %695, %349, %1185, %1121, %1118, %1094, %1091, %1038, %1035, %999, %996, %895, %892, %806, %433, %430, %244, %241, %122, %119, %107, %104, %1187, %1105, %1062, %113
  %1189 = phi %"class.v8::internal::RegExpTree"* [ %114, %113 ], [ null, %1062 ], [ null, %1105 ], [ null, %1187 ], [ null, %104 ], [ null, %107 ], [ null, %119 ], [ null, %122 ], [ null, %241 ], [ null, %244 ], [ null, %430 ], [ null, %433 ], [ null, %806 ], [ null, %892 ], [ null, %895 ], [ null, %996 ], [ null, %999 ], [ null, %1035 ], [ null, %1038 ], [ null, %1091 ], [ null, %1094 ], [ null, %1118 ], [ null, %1121 ], [ null, %1185 ], [ null, %349 ], [ null, %695 ], [ null, %359 ], [ null, %1077 ], [ null, %139 ]
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %19) #13
  ret %"class.v8::internal::RegExpTree"* %1189

1190:                                             ; preds = %1020
  %1191 = or i32 %1023, 32
  %1192 = add i32 %1191, -49
  %1193 = icmp ugt i32 %1192, 5
  %1194 = add i32 %1191, -39
  %1195 = icmp slt i32 %1194, 0
  %1196 = or i1 %1193, %1195
  br i1 %1196, label %1025, label %1197

1197:                                             ; preds = %1190, %1020
  %1198 = phi i32 [ %1023, %1020 ], [ %1194, %1190 ]
  %1199 = shl i32 %1021, 4
  %1200 = add i32 %1198, %1199
  call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0) #13
  %1201 = trunc i32 %1200 to i16
  call void @_ZN2v88internal13RegExpBuilder12AddCharacterEt(%"class.v8::internal::RegExpBuilder"* %93, i16 zeroext %1201)
  br label %1129
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal12RegExpParser24PatchNamedBackReferencesEv(%"class.v8::internal::RegExpParser"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 6
  %3 = load %"class.v8::internal::ZoneList.1140"*, %"class.v8::internal::ZoneList.1140"** %2, align 8
  %4 = icmp eq %"class.v8::internal::ZoneList.1140"* %3, null
  br i1 %4, label %166, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 5
  %7 = load %"class.v8::internal::ZoneSet"*, %"class.v8::internal::ZoneSet"** %6, align 8
  %8 = icmp eq %"class.v8::internal::ZoneSet"* %7, null
  br i1 %8, label %16, label %9

9:                                                ; preds = %5
  %10 = getelementptr inbounds %"class.v8::internal::ZoneList.1140", %"class.v8::internal::ZoneList.1140"* %3, i64 0, i32 2
  %11 = load i32, i32* %10, align 4
  %12 = icmp sgt i32 %11, 0
  br i1 %12, label %13, label %166

13:                                               ; preds = %9
  %14 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 1
  %15 = bitcast %"class.v8::internal::ZoneSet"** %6 to %"class.std::__1::set.1133"**
  br label %31

16:                                               ; preds = %5
  %17 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 18
  %18 = load i8, i8* %17, align 1, !range !2
  %19 = icmp eq i8 %18, 0
  br i1 %19, label %20, label %166

20:                                               ; preds = %16
  store i8 1, i8* %17, align 1
  %21 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 2
  store i32 25, i32* %21, align 8
  %22 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 10
  %23 = load i32, i32* %22, align 8
  %24 = add nsw i32 %23, -1
  %25 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 3
  store i32 %24, i32* %25, align 4
  %26 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 8
  store i32 2097152, i32* %26, align 8
  %27 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 7
  %28 = load %"class.v8::internal::FlatStringReader"*, %"class.v8::internal::FlatStringReader"** %27, align 8
  %29 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %28, i64 0, i32 3
  %30 = load i32, i32* %29, align 4
  store i32 %30, i32* %22, align 8
  br label %166

31:                                               ; preds = %13, %140
  %32 = phi i64 [ 0, %13 ], [ %145, %140 ]
  %33 = phi %"class.v8::internal::ZoneList.1140"* [ %3, %13 ], [ %146, %140 ]
  %34 = getelementptr inbounds %"class.v8::internal::ZoneList.1140", %"class.v8::internal::ZoneList.1140"* %33, i64 0, i32 0
  %35 = load %"class.v8::internal::RegExpBackReference"**, %"class.v8::internal::RegExpBackReference"*** %34, align 8
  %36 = getelementptr inbounds %"class.v8::internal::RegExpBackReference"*, %"class.v8::internal::RegExpBackReference"** %35, i64 %32
  %37 = load %"class.v8::internal::RegExpBackReference"*, %"class.v8::internal::RegExpBackReference"** %36, align 8
  %38 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %14, align 8
  %39 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %38, i64 0, i32 2
  %40 = load i64, i64* %39, align 8
  %41 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %38, i64 0, i32 3
  %42 = load i64, i64* %41, align 8
  %43 = sub i64 %42, %40
  %44 = icmp ult i64 %43, 40
  br i1 %44, label %45, label %47, !prof !3

45:                                               ; preds = %31
  %46 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %38, i64 40) #13
  br label %49

47:                                               ; preds = %31
  %48 = add i64 %40, 40
  store i64 %48, i64* %39, align 8
  br label %49

49:                                               ; preds = %45, %47
  %50 = phi i64 [ %46, %45 ], [ %40, %47 ]
  %51 = inttoptr i64 %50 to %"class.v8::internal::RegExpCapture"*
  %52 = getelementptr inbounds %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %51, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [37 x i8*] }, { [37 x i8*] }* @_ZTVN2v88internal13RegExpCaptureE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %52, align 8
  %53 = getelementptr inbounds %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %51, i64 0, i32 1
  %54 = getelementptr inbounds %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %51, i64 0, i32 5
  store %"class.v8::internal::ZoneVector"* null, %"class.v8::internal::ZoneVector"** %54, align 8
  %55 = getelementptr inbounds %"class.v8::internal::RegExpBackReference", %"class.v8::internal::RegExpBackReference"* %37, i64 0, i32 2
  %56 = bitcast %"class.v8::internal::RegExpTree"** %53 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %56, i8 0, i64 20, i1 false)
  %57 = load %"class.v8::internal::ZoneVector"*, %"class.v8::internal::ZoneVector"** %55, align 8
  store %"class.v8::internal::ZoneVector"* %57, %"class.v8::internal::ZoneVector"** %54, align 8
  %58 = load %"class.std::__1::set.1133"*, %"class.std::__1::set.1133"** %15, align 8
  %59 = getelementptr inbounds %"class.std::__1::set.1133", %"class.std::__1::set.1133"* %58, i64 0, i32 0, i32 1, i32 0, i32 0
  %60 = bitcast %"class.std::__1::__tree_end_node"* %59 to %"class.std::__1::__tree_node"**
  %61 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %60, align 8
  %62 = icmp eq %"class.std::__1::__tree_node"* %61, null
  br i1 %62, label %151, label %63

63:                                               ; preds = %49
  %64 = getelementptr inbounds %"class.v8::internal::ZoneVector", %"class.v8::internal::ZoneVector"* %57, i64 0, i32 0, i32 0, i32 0
  %65 = load i16*, i16** %64, align 8
  %66 = getelementptr inbounds %"class.v8::internal::ZoneVector", %"class.v8::internal::ZoneVector"* %57, i64 0, i32 0, i32 0, i32 1
  %67 = load i16*, i16** %66, align 8
  %68 = icmp eq i16* %65, %67
  br i1 %68, label %69, label %74

69:                                               ; preds = %63, %69
  %70 = phi %"class.std::__1::__tree_node"* [ %72, %69 ], [ %61, %63 ]
  %71 = bitcast %"class.std::__1::__tree_node"* %70 to %"class.std::__1::__tree_node"**
  %72 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %71, align 8
  %73 = icmp eq %"class.std::__1::__tree_node"* %72, null
  br i1 %73, label %110, label %69

74:                                               ; preds = %63, %105
  %75 = phi %"class.std::__1::__tree_end_node"* [ %107, %105 ], [ %59, %63 ]
  %76 = phi %"class.std::__1::__tree_node"* [ %108, %105 ], [ %61, %63 ]
  %77 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %76, i64 0, i32 1
  %78 = load %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %77, align 8
  %79 = getelementptr inbounds %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %78, i64 0, i32 5
  %80 = load %"class.v8::internal::ZoneVector"*, %"class.v8::internal::ZoneVector"** %79, align 8
  %81 = getelementptr inbounds %"class.v8::internal::ZoneVector", %"class.v8::internal::ZoneVector"* %80, i64 0, i32 0, i32 0, i32 1
  %82 = load i16*, i16** %81, align 8
  %83 = getelementptr inbounds %"class.v8::internal::ZoneVector", %"class.v8::internal::ZoneVector"* %80, i64 0, i32 0, i32 0, i32 0
  %84 = load i16*, i16** %83, align 8
  br label %85

85:                                               ; preds = %95, %74
  %86 = phi i16* [ %96, %95 ], [ %84, %74 ]
  %87 = phi i16* [ %97, %95 ], [ %65, %74 ]
  %88 = icmp eq i16* %86, %82
  br i1 %88, label %102, label %89

89:                                               ; preds = %85
  %90 = load i16, i16* %86, align 2
  %91 = load i16, i16* %87, align 2
  %92 = icmp ult i16 %90, %91
  br i1 %92, label %102, label %93

93:                                               ; preds = %89
  %94 = icmp ult i16 %91, %90
  br i1 %94, label %99, label %95

95:                                               ; preds = %93
  %96 = getelementptr inbounds i16, i16* %86, i64 1
  %97 = getelementptr inbounds i16, i16* %87, i64 1
  %98 = icmp eq i16* %97, %67
  br i1 %98, label %99, label %85

99:                                               ; preds = %95, %93
  %100 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %76, i64 0, i32 0, i32 0
  %101 = bitcast %"class.std::__1::__tree_node"* %76 to %"class.std::__1::__tree_node"**
  br label %105

102:                                              ; preds = %89, %85
  %103 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %76, i64 0, i32 0, i32 1
  %104 = bitcast %"class.std::__1::__tree_node_base"** %103 to %"class.std::__1::__tree_node"**
  br label %105

105:                                              ; preds = %102, %99
  %106 = phi %"class.std::__1::__tree_node"** [ %104, %102 ], [ %101, %99 ]
  %107 = phi %"class.std::__1::__tree_end_node"* [ %75, %102 ], [ %100, %99 ]
  %108 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %106, align 8
  %109 = icmp eq %"class.std::__1::__tree_node"* %108, null
  br i1 %109, label %112, label %74

110:                                              ; preds = %69
  %111 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %70, i64 0, i32 0, i32 0
  br label %112

112:                                              ; preds = %105, %110
  %113 = phi %"class.std::__1::__tree_end_node"* [ %111, %110 ], [ %107, %105 ]
  %114 = icmp eq %"class.std::__1::__tree_end_node"* %113, %59
  br i1 %114, label %151, label %115

115:                                              ; preds = %112
  %116 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %113, i64 4
  %117 = bitcast %"class.std::__1::__tree_end_node"* %116 to %"class.v8::internal::RegExpCapture"**
  %118 = load %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %117, align 8
  %119 = getelementptr inbounds %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %118, i64 0, i32 5
  %120 = load %"class.v8::internal::ZoneVector"*, %"class.v8::internal::ZoneVector"** %119, align 8
  %121 = getelementptr inbounds %"class.v8::internal::ZoneVector", %"class.v8::internal::ZoneVector"* %120, i64 0, i32 0, i32 0, i32 0
  %122 = load i16*, i16** %121, align 8
  %123 = getelementptr inbounds %"class.v8::internal::ZoneVector", %"class.v8::internal::ZoneVector"* %120, i64 0, i32 0, i32 0, i32 1
  %124 = load i16*, i16** %123, align 8
  %125 = icmp eq i16* %122, %124
  br i1 %125, label %140, label %126

126:                                              ; preds = %115, %136
  %127 = phi i16* [ %137, %136 ], [ %65, %115 ]
  %128 = phi i16* [ %138, %136 ], [ %122, %115 ]
  %129 = icmp eq i16* %127, %67
  br i1 %129, label %151, label %130

130:                                              ; preds = %126
  %131 = load i16, i16* %127, align 2
  %132 = load i16, i16* %128, align 2
  %133 = icmp ult i16 %131, %132
  br i1 %133, label %151, label %134

134:                                              ; preds = %130
  %135 = icmp ult i16 %132, %131
  br i1 %135, label %140, label %136

136:                                              ; preds = %134
  %137 = getelementptr inbounds i16, i16* %127, i64 1
  %138 = getelementptr inbounds i16, i16* %128, i64 1
  %139 = icmp eq i16* %138, %124
  br i1 %139, label %140, label %126

140:                                              ; preds = %136, %134, %115
  %141 = getelementptr inbounds %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %118, i64 0, i32 2
  %142 = load i32, i32* %141, align 8
  %143 = tail call %"class.v8::internal::RegExpCapture"* @_ZN2v88internal12RegExpParser10GetCaptureEi(%"class.v8::internal::RegExpParser"* %0, i32 %142)
  %144 = getelementptr inbounds %"class.v8::internal::RegExpBackReference", %"class.v8::internal::RegExpBackReference"* %37, i64 0, i32 1
  store %"class.v8::internal::RegExpCapture"* %143, %"class.v8::internal::RegExpCapture"** %144, align 8
  %145 = add nuw nsw i64 %32, 1
  %146 = load %"class.v8::internal::ZoneList.1140"*, %"class.v8::internal::ZoneList.1140"** %2, align 8
  %147 = getelementptr inbounds %"class.v8::internal::ZoneList.1140", %"class.v8::internal::ZoneList.1140"* %146, i64 0, i32 2
  %148 = load i32, i32* %147, align 4
  %149 = sext i32 %148 to i64
  %150 = icmp slt i64 %145, %149
  br i1 %150, label %31, label %166

151:                                              ; preds = %49, %112, %126, %130
  %152 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 18
  %153 = load i8, i8* %152, align 1, !range !2
  %154 = icmp eq i8 %153, 0
  br i1 %154, label %155, label %166

155:                                              ; preds = %151
  store i8 1, i8* %152, align 1
  %156 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 2
  store i32 25, i32* %156, align 8
  %157 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 10
  %158 = load i32, i32* %157, align 8
  %159 = add nsw i32 %158, -1
  %160 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 3
  store i32 %159, i32* %160, align 4
  %161 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 8
  store i32 2097152, i32* %161, align 8
  %162 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 7
  %163 = load %"class.v8::internal::FlatStringReader"*, %"class.v8::internal::FlatStringReader"** %162, align 8
  %164 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %163, i64 0, i32 3
  %165 = load i32, i32* %164, align 4
  store i32 %165, i32* %157, align 8
  br label %166

166:                                              ; preds = %140, %9, %155, %151, %20, %16, %1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::RegExpTree"* @_ZN2v88internal13RegExpBuilder8ToRegExpEv(%"class.v8::internal::RegExpBuilder"*) local_unnamed_addr #0 align 2 {
  tail call void @_ZN2v88internal13RegExpBuilder10FlushTermsEv(%"class.v8::internal::RegExpBuilder"* %0)
  %2 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 7
  %3 = getelementptr inbounds %"class.v8::internal::BufferedZoneList", %"class.v8::internal::BufferedZoneList"* %2, i64 0, i32 0
  %4 = load %"class.v8::internal::ZoneList.1144"*, %"class.v8::internal::ZoneList.1144"** %3, align 8
  %5 = icmp eq %"class.v8::internal::ZoneList.1144"* %4, null
  br i1 %5, label %9, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.v8::internal::ZoneList.1144", %"class.v8::internal::ZoneList.1144"* %4, i64 0, i32 2
  %8 = load i32, i32* %7, align 4
  br label %9

9:                                                ; preds = %1, %6
  %10 = phi i32 [ %8, %6 ], [ 0, %1 ]
  %11 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 7, i32 1
  %12 = load %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %11, align 8
  %13 = icmp ne %"class.v8::internal::RegExpTree"* %12, null
  %14 = zext i1 %13 to i32
  %15 = add nsw i32 %10, %14
  switch i32 %15, label %35 [
    i32 0, label %16
    i32 1, label %53
  ]

16:                                               ; preds = %9
  %17 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 0
  %18 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %17, align 8
  %19 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %18, i64 0, i32 2
  %20 = load i64, i64* %19, align 8
  %21 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %18, i64 0, i32 3
  %22 = load i64, i64* %21, align 8
  %23 = sub i64 %22, %20
  %24 = icmp ult i64 %23, 8
  br i1 %24, label %25, label %27, !prof !3

25:                                               ; preds = %16
  %26 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %18, i64 8) #13
  br label %29

27:                                               ; preds = %16
  %28 = add i64 %20, 8
  store i64 %28, i64* %19, align 8
  br label %29

29:                                               ; preds = %25, %27
  %30 = phi i64 [ %26, %25 ], [ %20, %27 ]
  %31 = inttoptr i64 %30 to %"class.v8::internal::RegExpEmpty"*
  %32 = inttoptr i64 %30 to i64*
  store i64 0, i64* %32, align 8
  %33 = getelementptr inbounds %"class.v8::internal::RegExpEmpty", %"class.v8::internal::RegExpEmpty"* %31, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [37 x i8*] }, { [37 x i8*] }* @_ZTVN2v88internal11RegExpEmptyE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %33, align 8
  %34 = getelementptr inbounds %"class.v8::internal::RegExpEmpty", %"class.v8::internal::RegExpEmpty"* %31, i64 0, i32 0
  br label %53

35:                                               ; preds = %9
  %36 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 0
  %37 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %36, align 8
  %38 = tail call %"class.v8::internal::ZoneList.1144"* @_ZN2v88internal16BufferedZoneListINS0_10RegExpTreeELi2EE7GetListEPNS0_4ZoneE(%"class.v8::internal::BufferedZoneList"* %2, %"class.v8::internal::Zone"* %37)
  %39 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %37, i64 0, i32 2
  %40 = load i64, i64* %39, align 8
  %41 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %37, i64 0, i32 3
  %42 = load i64, i64* %41, align 8
  %43 = sub i64 %42, %40
  %44 = icmp ult i64 %43, 24
  br i1 %44, label %45, label %47, !prof !3

45:                                               ; preds = %35
  %46 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %37, i64 24) #13
  br label %49

47:                                               ; preds = %35
  %48 = add i64 %40, 24
  store i64 %48, i64* %39, align 8
  br label %49

49:                                               ; preds = %45, %47
  %50 = phi i64 [ %46, %45 ], [ %40, %47 ]
  %51 = inttoptr i64 %50 to %"class.v8::internal::RegExpDisjunction"*
  tail call void @_ZN2v88internal17RegExpDisjunctionC1EPNS0_8ZoneListIPNS0_10RegExpTreeEEE(%"class.v8::internal::RegExpDisjunction"* %51, %"class.v8::internal::ZoneList.1144"* %38) #13
  %52 = getelementptr inbounds %"class.v8::internal::RegExpDisjunction", %"class.v8::internal::RegExpDisjunction"* %51, i64 0, i32 0
  br label %53

53:                                               ; preds = %9, %49, %29
  %54 = phi %"class.v8::internal::RegExpTree"* [ %34, %29 ], [ %52, %49 ], [ %12, %9 ]
  ret %"class.v8::internal::RegExpTree"* %54
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2v88internal12RegExpParser25CreateNamedCaptureAtIndexEPKNS0_10ZoneVectorItEEi(%"class.v8::internal::RegExpParser"* nocapture, %"class.v8::internal::ZoneVector"*, i32) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.v8::internal::RegExpCapture"*, align 8
  %5 = bitcast %"class.v8::internal::RegExpCapture"** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #13
  %6 = tail call %"class.v8::internal::RegExpCapture"* @_ZN2v88internal12RegExpParser10GetCaptureEi(%"class.v8::internal::RegExpParser"* %0, i32 %2)
  store %"class.v8::internal::RegExpCapture"* %6, %"class.v8::internal::RegExpCapture"** %4, align 8
  %7 = getelementptr inbounds %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %6, i64 0, i32 5
  store %"class.v8::internal::ZoneVector"* %1, %"class.v8::internal::ZoneVector"** %7, align 8
  %8 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 5
  %9 = load %"class.v8::internal::ZoneSet"*, %"class.v8::internal::ZoneSet"** %8, align 8
  %10 = icmp eq %"class.v8::internal::ZoneSet"* %9, null
  br i1 %10, label %11, label %35

11:                                               ; preds = %3
  %12 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 1
  %13 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %12, align 8
  %14 = ptrtoint %"class.v8::internal::Zone"* %13 to i64
  %15 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %13, i64 0, i32 2
  %16 = load i64, i64* %15, align 8
  %17 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %13, i64 0, i32 3
  %18 = load i64, i64* %17, align 8
  %19 = sub i64 %18, %16
  %20 = icmp ult i64 %19, 32
  br i1 %20, label %21, label %23, !prof !3

21:                                               ; preds = %11
  %22 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %13, i64 32) #13
  br label %25

23:                                               ; preds = %11
  %24 = add i64 %16, 32
  store i64 %24, i64* %15, align 8
  br label %25

25:                                               ; preds = %21, %23
  %26 = phi i64 [ %22, %21 ], [ %16, %23 ]
  %27 = inttoptr i64 %26 to %"class.v8::internal::ZoneSet"*
  %28 = getelementptr inbounds %"class.v8::internal::ZoneSet", %"class.v8::internal::ZoneSet"* %27, i64 0, i32 0, i32 0, i32 0
  %29 = getelementptr inbounds %"class.v8::internal::ZoneSet", %"class.v8::internal::ZoneSet"* %27, i64 0, i32 0, i32 0, i32 1, i32 1
  %30 = bitcast %"struct.std::__1::__compressed_pair_elem.1136"* %29 to i64*
  %31 = getelementptr inbounds %"class.v8::internal::ZoneSet", %"class.v8::internal::ZoneSet"* %27, i64 0, i32 0, i32 0, i32 1
  %32 = bitcast %"class.std::__1::__compressed_pair.1135"* %31 to i64*
  store i64 0, i64* %32, align 8
  store i64 %14, i64* %30, align 8
  %33 = getelementptr inbounds %"class.v8::internal::ZoneSet", %"class.v8::internal::ZoneSet"* %27, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  store i64 0, i64* %33, align 8
  %34 = getelementptr inbounds %"class.v8::internal::ZoneSet", %"class.v8::internal::ZoneSet"* %27, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0
  store %"class.std::__1::__tree_end_node"* %34, %"class.std::__1::__tree_end_node"** %28, align 8
  store %"class.v8::internal::ZoneSet"* %27, %"class.v8::internal::ZoneSet"** %8, align 8
  br label %132

35:                                               ; preds = %3
  %36 = getelementptr inbounds %"class.v8::internal::ZoneSet", %"class.v8::internal::ZoneSet"* %9, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %37 = bitcast %"class.std::__1::__tree_end_node"* %36 to %"class.std::__1::__tree_node"**
  %38 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %37, align 8
  %39 = icmp eq %"class.std::__1::__tree_node"* %38, null
  br i1 %39, label %132, label %40

40:                                               ; preds = %35
  %41 = getelementptr inbounds %"class.v8::internal::ZoneVector", %"class.v8::internal::ZoneVector"* %1, i64 0, i32 0, i32 0, i32 0
  %42 = load i16*, i16** %41, align 8
  %43 = getelementptr inbounds %"class.v8::internal::ZoneVector", %"class.v8::internal::ZoneVector"* %1, i64 0, i32 0, i32 0, i32 1
  %44 = load i16*, i16** %43, align 8
  %45 = icmp eq i16* %42, %44
  br i1 %45, label %46, label %51

46:                                               ; preds = %40, %46
  %47 = phi %"class.std::__1::__tree_node"* [ %49, %46 ], [ %38, %40 ]
  %48 = bitcast %"class.std::__1::__tree_node"* %47 to %"class.std::__1::__tree_node"**
  %49 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %48, align 8
  %50 = icmp eq %"class.std::__1::__tree_node"* %49, null
  br i1 %50, label %87, label %46

51:                                               ; preds = %40, %82
  %52 = phi %"class.std::__1::__tree_end_node"* [ %84, %82 ], [ %36, %40 ]
  %53 = phi %"class.std::__1::__tree_node"* [ %85, %82 ], [ %38, %40 ]
  %54 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %53, i64 0, i32 1
  %55 = load %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %54, align 8
  %56 = getelementptr inbounds %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %55, i64 0, i32 5
  %57 = load %"class.v8::internal::ZoneVector"*, %"class.v8::internal::ZoneVector"** %56, align 8
  %58 = getelementptr inbounds %"class.v8::internal::ZoneVector", %"class.v8::internal::ZoneVector"* %57, i64 0, i32 0, i32 0, i32 1
  %59 = load i16*, i16** %58, align 8
  %60 = getelementptr inbounds %"class.v8::internal::ZoneVector", %"class.v8::internal::ZoneVector"* %57, i64 0, i32 0, i32 0, i32 0
  %61 = load i16*, i16** %60, align 8
  br label %62

62:                                               ; preds = %72, %51
  %63 = phi i16* [ %73, %72 ], [ %61, %51 ]
  %64 = phi i16* [ %74, %72 ], [ %42, %51 ]
  %65 = icmp eq i16* %63, %59
  br i1 %65, label %79, label %66

66:                                               ; preds = %62
  %67 = load i16, i16* %63, align 2
  %68 = load i16, i16* %64, align 2
  %69 = icmp ult i16 %67, %68
  br i1 %69, label %79, label %70

70:                                               ; preds = %66
  %71 = icmp ult i16 %68, %67
  br i1 %71, label %76, label %72

72:                                               ; preds = %70
  %73 = getelementptr inbounds i16, i16* %63, i64 1
  %74 = getelementptr inbounds i16, i16* %64, i64 1
  %75 = icmp eq i16* %74, %44
  br i1 %75, label %76, label %62

76:                                               ; preds = %72, %70
  %77 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %53, i64 0, i32 0, i32 0
  %78 = bitcast %"class.std::__1::__tree_node"* %53 to %"class.std::__1::__tree_node"**
  br label %82

79:                                               ; preds = %66, %62
  %80 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %53, i64 0, i32 0, i32 1
  %81 = bitcast %"class.std::__1::__tree_node_base"** %80 to %"class.std::__1::__tree_node"**
  br label %82

82:                                               ; preds = %79, %76
  %83 = phi %"class.std::__1::__tree_node"** [ %81, %79 ], [ %78, %76 ]
  %84 = phi %"class.std::__1::__tree_end_node"* [ %52, %79 ], [ %77, %76 ]
  %85 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %83, align 8
  %86 = icmp eq %"class.std::__1::__tree_node"* %85, null
  br i1 %86, label %89, label %51

87:                                               ; preds = %46
  %88 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %47, i64 0, i32 0, i32 0
  br label %89

89:                                               ; preds = %82, %87
  %90 = phi %"class.std::__1::__tree_end_node"* [ %88, %87 ], [ %84, %82 ]
  %91 = icmp eq %"class.std::__1::__tree_end_node"* %90, %36
  br i1 %91, label %132, label %92

92:                                               ; preds = %89
  %93 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %90, i64 4
  %94 = bitcast %"class.std::__1::__tree_end_node"* %93 to %"class.v8::internal::RegExpCapture"**
  %95 = load %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %94, align 8
  %96 = getelementptr inbounds %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %95, i64 0, i32 5
  %97 = load %"class.v8::internal::ZoneVector"*, %"class.v8::internal::ZoneVector"** %96, align 8
  %98 = getelementptr inbounds %"class.v8::internal::ZoneVector", %"class.v8::internal::ZoneVector"* %97, i64 0, i32 0, i32 0, i32 0
  %99 = load i16*, i16** %98, align 8
  %100 = getelementptr inbounds %"class.v8::internal::ZoneVector", %"class.v8::internal::ZoneVector"* %97, i64 0, i32 0, i32 0, i32 1
  %101 = load i16*, i16** %100, align 8
  %102 = icmp eq i16* %99, %101
  br i1 %102, label %117, label %103

103:                                              ; preds = %92, %113
  %104 = phi i16* [ %114, %113 ], [ %42, %92 ]
  %105 = phi i16* [ %115, %113 ], [ %99, %92 ]
  %106 = icmp eq i16* %104, %44
  br i1 %106, label %132, label %107

107:                                              ; preds = %103
  %108 = load i16, i16* %104, align 2
  %109 = load i16, i16* %105, align 2
  %110 = icmp ult i16 %108, %109
  br i1 %110, label %132, label %111

111:                                              ; preds = %107
  %112 = icmp ult i16 %109, %108
  br i1 %112, label %117, label %113

113:                                              ; preds = %111
  %114 = getelementptr inbounds i16, i16* %104, i64 1
  %115 = getelementptr inbounds i16, i16* %105, i64 1
  %116 = icmp eq i16* %115, %101
  br i1 %116, label %117, label %103

117:                                              ; preds = %113, %111, %92
  %118 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 18
  %119 = load i8, i8* %118, align 1, !range !2
  %120 = icmp eq i8 %119, 0
  br i1 %120, label %121, label %136

121:                                              ; preds = %117
  store i8 1, i8* %118, align 1
  %122 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 2
  store i32 23, i32* %122, align 8
  %123 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 10
  %124 = load i32, i32* %123, align 8
  %125 = add nsw i32 %124, -1
  %126 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 3
  store i32 %125, i32* %126, align 4
  %127 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 8
  store i32 2097152, i32* %127, align 8
  %128 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 7
  %129 = load %"class.v8::internal::FlatStringReader"*, %"class.v8::internal::FlatStringReader"** %128, align 8
  %130 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %129, i64 0, i32 3
  %131 = load i32, i32* %130, align 4
  store i32 %131, i32* %123, align 8
  br label %136

132:                                              ; preds = %103, %107, %35, %89, %25
  %133 = phi %"class.v8::internal::ZoneSet"* [ %9, %35 ], [ %9, %89 ], [ %27, %25 ], [ %9, %107 ], [ %9, %103 ]
  %134 = getelementptr inbounds %"class.v8::internal::ZoneSet", %"class.v8::internal::ZoneSet"* %133, i64 0, i32 0, i32 0
  %135 = call { %"class.std::__1::__tree_end_node"*, i8 } @_ZNSt3__16__treeIPN2v88internal13RegExpCaptureENS2_12RegExpParser21RegExpCaptureNameLessENS2_13ZoneAllocatorIS4_EEE25__emplace_unique_key_argsIS4_JRS4_EEENS_4pairINS_15__tree_iteratorIS4_PNS_11__tree_nodeIS4_PvEElEEbEERKT_DpOT0_(%"class.std::__1::__tree.1134"* %134, %"class.v8::internal::RegExpCapture"** nonnull dereferenceable(8) %4, %"class.v8::internal::RegExpCapture"** nonnull dereferenceable(8) %4) #13
  br label %136

136:                                              ; preds = %121, %117, %132
  %137 = phi i1 [ true, %132 ], [ false, %117 ], [ false, %121 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #13
  ret i1 %137
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::RegExpCapture"* @_ZN2v88internal12RegExpParser10GetCaptureEi(%"class.v8::internal::RegExpParser"* nocapture, i32) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 16
  %4 = load i8, i8* %3, align 1, !range !2
  %5 = icmp eq i8 %4, 0
  %6 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 12
  %7 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 11
  %8 = select i1 %5, i32* %7, i32* %6
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 4
  %11 = load %"class.v8::internal::ZoneList"*, %"class.v8::internal::ZoneList"** %10, align 8
  %12 = icmp eq %"class.v8::internal::ZoneList"* %11, null
  br i1 %12, label %13, label %49

13:                                               ; preds = %2
  %14 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 1
  %15 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %14, align 8
  %16 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %15, i64 0, i32 2
  %17 = load i64, i64* %16, align 8
  %18 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %15, i64 0, i32 3
  %19 = load i64, i64* %18, align 8
  %20 = sub i64 %19, %17
  %21 = icmp ult i64 %20, 16
  br i1 %21, label %22, label %24, !prof !3

22:                                               ; preds = %13
  %23 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %15, i64 16) #13
  br label %26

24:                                               ; preds = %13
  %25 = add i64 %17, 16
  store i64 %25, i64* %16, align 8
  br label %26

26:                                               ; preds = %24, %22
  %27 = phi i64 [ %23, %22 ], [ %17, %24 ]
  %28 = inttoptr i64 %27 to %"class.v8::internal::ZoneList"*
  %29 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %28, i64 0, i32 0
  store %"class.v8::internal::RegExpCapture"** null, %"class.v8::internal::RegExpCapture"*** %29, align 8
  %30 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %28, i64 0, i32 1
  store i32 %9, i32* %30, align 8
  %31 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %28, i64 0, i32 2
  store i32 0, i32* %31, align 4
  %32 = icmp sgt i32 %9, 0
  br i1 %32, label %33, label %47

33:                                               ; preds = %26
  %34 = sext i32 %9 to i64
  %35 = shl nsw i64 %34, 3
  %36 = load i64, i64* %16, align 8
  %37 = load i64, i64* %18, align 8
  %38 = sub i64 %37, %36
  %39 = icmp ugt i64 %35, %38
  br i1 %39, label %40, label %42, !prof !3

40:                                               ; preds = %33
  %41 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %15, i64 %35) #13
  br label %44

42:                                               ; preds = %33
  %43 = add i64 %36, %35
  store i64 %43, i64* %16, align 8
  br label %44

44:                                               ; preds = %42, %40
  %45 = phi i64 [ %41, %40 ], [ %36, %42 ]
  %46 = inttoptr i64 %45 to %"class.v8::internal::RegExpCapture"**
  br label %47

47:                                               ; preds = %26, %44
  %48 = phi %"class.v8::internal::RegExpCapture"** [ %46, %44 ], [ null, %26 ]
  store %"class.v8::internal::RegExpCapture"** %48, %"class.v8::internal::RegExpCapture"*** %29, align 8
  store %"class.v8::internal::ZoneList"* %28, %"class.v8::internal::ZoneList"** %10, align 8
  br label %49

49:                                               ; preds = %47, %2
  %50 = phi %"class.v8::internal::ZoneList"* [ %28, %47 ], [ %11, %2 ]
  %51 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %50, i64 0, i32 2
  %52 = load i32, i32* %51, align 4
  %53 = icmp slt i32 %52, %9
  br i1 %53, label %54, label %135

54:                                               ; preds = %49
  %55 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 1
  br label %56

56:                                               ; preds = %54, %124
  %57 = phi i32 [ %52, %54 ], [ %133, %124 ]
  %58 = phi i32* [ %51, %54 ], [ %132, %124 ]
  %59 = phi %"class.v8::internal::ZoneList"* [ %50, %54 ], [ %131, %124 ]
  %60 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %55, align 8
  %61 = add nsw i32 %57, 1
  %62 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %60, i64 0, i32 2
  %63 = load i64, i64* %62, align 8
  %64 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %60, i64 0, i32 3
  %65 = load i64, i64* %64, align 8
  %66 = sub i64 %65, %63
  %67 = icmp ult i64 %66, 40
  br i1 %67, label %68, label %70, !prof !3

68:                                               ; preds = %56
  %69 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %60, i64 40) #13
  br label %72

70:                                               ; preds = %56
  %71 = add i64 %63, 40
  store i64 %71, i64* %62, align 8
  br label %72

72:                                               ; preds = %68, %70
  %73 = phi i64 [ %69, %68 ], [ %63, %70 ]
  %74 = inttoptr i64 %73 to %"class.v8::internal::RegExpCapture"*
  %75 = getelementptr inbounds %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %74, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [37 x i8*] }, { [37 x i8*] }* @_ZTVN2v88internal13RegExpCaptureE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %75, align 8
  %76 = getelementptr inbounds %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %74, i64 0, i32 1
  store %"class.v8::internal::RegExpTree"* null, %"class.v8::internal::RegExpTree"** %76, align 8
  %77 = getelementptr inbounds %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %74, i64 0, i32 2
  store i32 %61, i32* %77, align 8
  %78 = getelementptr inbounds %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %74, i64 0, i32 3
  store i32 0, i32* %78, align 4
  %79 = getelementptr inbounds %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %74, i64 0, i32 4
  store i32 0, i32* %79, align 8
  %80 = getelementptr inbounds %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %74, i64 0, i32 5
  store %"class.v8::internal::ZoneVector"* null, %"class.v8::internal::ZoneVector"** %80, align 8
  %81 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %55, align 8
  %82 = load i32, i32* %58, align 4
  %83 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %59, i64 0, i32 1
  %84 = load i32, i32* %83, align 8
  %85 = icmp slt i32 %82, %84
  br i1 %85, label %86, label %89

86:                                               ; preds = %72
  %87 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %59, i64 0, i32 0
  %88 = load %"class.v8::internal::RegExpCapture"**, %"class.v8::internal::RegExpCapture"*** %87, align 8
  br label %124

89:                                               ; preds = %72
  %90 = shl nsw i32 %84, 1
  %91 = or i32 %90, 1
  %92 = sext i32 %91 to i64
  %93 = shl nsw i64 %92, 3
  %94 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %81, i64 0, i32 2
  %95 = load i64, i64* %94, align 8
  %96 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %81, i64 0, i32 3
  %97 = load i64, i64* %96, align 8
  %98 = sub i64 %97, %95
  %99 = icmp ugt i64 %93, %98
  br i1 %99, label %100, label %102, !prof !3

100:                                              ; preds = %89
  %101 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %81, i64 %93) #13
  br label %104

102:                                              ; preds = %89
  %103 = add i64 %95, %93
  store i64 %103, i64* %94, align 8
  br label %104

104:                                              ; preds = %102, %100
  %105 = phi i64 [ %101, %100 ], [ %95, %102 ]
  %106 = inttoptr i64 %105 to %"class.v8::internal::RegExpCapture"**
  %107 = load i32, i32* %58, align 4
  %108 = icmp sgt i32 %107, 0
  br i1 %108, label %109, label %121

109:                                              ; preds = %104
  %110 = inttoptr i64 %105 to i8*
  %111 = bitcast %"class.v8::internal::ZoneList"* %59 to i8**
  %112 = load i8*, i8** %111, align 8
  %113 = sext i32 %107 to i64
  %114 = shl nsw i64 %113, 3
  switch i64 %114, label %120 [
    i64 16, label %119
    i64 8, label %115
  ]

115:                                              ; preds = %109
  %116 = bitcast i8* %112 to i64*
  %117 = inttoptr i64 %105 to i64*
  %118 = load i64, i64* %116, align 1
  store i64 %118, i64* %117, align 1
  br label %121

119:                                              ; preds = %109
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %110, i8* align 1 %112, i64 16, i1 false) #13
  br label %121

120:                                              ; preds = %109
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %110, i8* align 1 %112, i64 %114, i1 false) #13
  br label %121

121:                                              ; preds = %120, %119, %115, %104
  %122 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %59, i64 0, i32 0
  store %"class.v8::internal::RegExpCapture"** %106, %"class.v8::internal::RegExpCapture"*** %122, align 8
  store i32 %91, i32* %83, align 8
  %123 = load i32, i32* %58, align 4
  br label %124

124:                                              ; preds = %86, %121
  %125 = phi i32 [ %82, %86 ], [ %123, %121 ]
  %126 = phi %"class.v8::internal::RegExpCapture"** [ %88, %86 ], [ %106, %121 ]
  %127 = add nsw i32 %125, 1
  store i32 %127, i32* %58, align 4
  %128 = sext i32 %125 to i64
  %129 = getelementptr inbounds %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %126, i64 %128
  %130 = bitcast %"class.v8::internal::RegExpCapture"** %129 to i64*
  store i64 %73, i64* %130, align 8
  %131 = load %"class.v8::internal::ZoneList"*, %"class.v8::internal::ZoneList"** %10, align 8
  %132 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %131, i64 0, i32 2
  %133 = load i32, i32* %132, align 4
  %134 = icmp slt i32 %133, %9
  br i1 %134, label %56, label %135

135:                                              ; preds = %124, %49
  %136 = phi %"class.v8::internal::ZoneList"* [ %50, %49 ], [ %131, %124 ]
  %137 = add nsw i32 %1, -1
  %138 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %136, i64 0, i32 0
  %139 = load %"class.v8::internal::RegExpCapture"**, %"class.v8::internal::RegExpCapture"*** %138, align 8
  %140 = sext i32 %137 to i64
  %141 = getelementptr inbounds %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %139, i64 %140
  %142 = load %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %141, align 8
  ret %"class.v8::internal::RegExpCapture"* %142
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal13RegExpBuilder7AddAtomEPNS0_10RegExpTreeE(%"class.v8::internal::RegExpBuilder"*, %"class.v8::internal::RegExpTree"*) local_unnamed_addr #0 align 2 {
  %3 = bitcast %"class.v8::internal::RegExpTree"* %1 to i1 (%"class.v8::internal::RegExpTree"*)***
  %4 = load i1 (%"class.v8::internal::RegExpTree"*)**, i1 (%"class.v8::internal::RegExpTree"*)*** %3, align 8
  %5 = getelementptr inbounds i1 (%"class.v8::internal::RegExpTree"*)*, i1 (%"class.v8::internal::RegExpTree"*)** %4, i64 32
  %6 = load i1 (%"class.v8::internal::RegExpTree"*)*, i1 (%"class.v8::internal::RegExpTree"*)** %5, align 8
  %7 = tail call zeroext i1 %6(%"class.v8::internal::RegExpTree"* %1) #13
  br i1 %7, label %8, label %10

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 1
  store i8 1, i8* %9, align 8
  br label %23

10:                                               ; preds = %2
  %11 = load i1 (%"class.v8::internal::RegExpTree"*)**, i1 (%"class.v8::internal::RegExpTree"*)*** %3, align 8
  %12 = getelementptr inbounds i1 (%"class.v8::internal::RegExpTree"*)*, i1 (%"class.v8::internal::RegExpTree"*)** %11, i64 4
  %13 = load i1 (%"class.v8::internal::RegExpTree"*)*, i1 (%"class.v8::internal::RegExpTree"*)** %12, align 8
  %14 = tail call zeroext i1 %13(%"class.v8::internal::RegExpTree"* %1) #13
  br i1 %14, label %15, label %19

15:                                               ; preds = %10
  tail call void @_ZN2v88internal13RegExpBuilder15FlushCharactersEv(%"class.v8::internal::RegExpBuilder"* %0)
  %16 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 6
  %17 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 0
  %18 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %17, align 8
  tail call void @_ZN2v88internal16BufferedZoneListINS0_10RegExpTreeELi2EE3AddEPS2_PNS0_4ZoneE(%"class.v8::internal::BufferedZoneList"* %16, %"class.v8::internal::RegExpTree"* %1, %"class.v8::internal::Zone"* %18)
  br label %23

19:                                               ; preds = %10
  tail call void @_ZN2v88internal13RegExpBuilder9FlushTextEv(%"class.v8::internal::RegExpBuilder"* %0)
  %20 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 5
  %21 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 0
  %22 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %21, align 8
  tail call void @_ZN2v88internal16BufferedZoneListINS0_10RegExpTreeELi2EE3AddEPS2_PNS0_4ZoneE(%"class.v8::internal::BufferedZoneList"* %20, %"class.v8::internal::RegExpTree"* %1, %"class.v8::internal::Zone"* %22)
  br label %23

23:                                               ; preds = %8, %19, %15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal13RegExpBuilder14NewAlternativeEv(%"class.v8::internal::RegExpBuilder"*) local_unnamed_addr #0 align 2 {
  tail call void @_ZN2v88internal13RegExpBuilder10FlushTermsEv(%"class.v8::internal::RegExpBuilder"* %0)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal13RegExpBuilder12AddAssertionEPNS0_10RegExpTreeE(%"class.v8::internal::RegExpBuilder"*, %"class.v8::internal::RegExpTree"*) local_unnamed_addr #0 align 2 {
  tail call void @_ZN2v88internal13RegExpBuilder9FlushTextEv(%"class.v8::internal::RegExpBuilder"* %0)
  %3 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 5
  %4 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 0
  %5 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %4, align 8
  tail call void @_ZN2v88internal16BufferedZoneListINS0_10RegExpTreeELi2EE3AddEPS2_PNS0_4ZoneE(%"class.v8::internal::BufferedZoneList"* %3, %"class.v8::internal::RegExpTree"* %1, %"class.v8::internal::Zone"* %5)
  ret void
}

declare void @_ZN2v88internal14CharacterRange14AddClassEscapeEcPNS0_8ZoneListIS1_EEbPNS0_4ZoneE(i8 signext, %"class.v8::internal::ZoneList.1145"*, i1 zeroext, %"class.v8::internal::Zone"*) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.v8::internal::RegExpCharacterClass"* @_ZN2v88internal4Zone3NewINS0_20RegExpCharacterClassEJPS1_RPNS0_8ZoneListINS0_14CharacterRangeEEENS_4base5FlagsINS0_8JSRegExp4FlagEiEEEEEPT_DpOT0_(%"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** dereferenceable(8), %"class.v8::internal::ZoneList.1145"** dereferenceable(8), %"class.v8::base::Flags"* dereferenceable(4)) local_unnamed_addr #0 comdat align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %0, i64 0, i32 2
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %0, i64 0, i32 3
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %8, %6
  %10 = icmp ult i64 %9, 32
  br i1 %10, label %11, label %13, !prof !3

11:                                               ; preds = %4
  %12 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %0, i64 32) #13
  br label %15

13:                                               ; preds = %4
  %14 = add i64 %6, 32
  store i64 %14, i64* %5, align 8
  br label %15

15:                                               ; preds = %11, %13
  %16 = phi i64 [ %12, %11 ], [ %6, %13 ]
  %17 = inttoptr i64 %16 to %"class.v8::internal::RegExpCharacterClass"*
  %18 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %1, align 8
  %19 = load %"class.v8::internal::ZoneList.1145"*, %"class.v8::internal::ZoneList.1145"** %2, align 8
  %20 = getelementptr inbounds %"class.v8::base::Flags", %"class.v8::base::Flags"* %3, i64 0, i32 0
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %17, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [37 x i8*] }, { [37 x i8*] }* @_ZTVN2v88internal20RegExpCharacterClassE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %22, align 8
  %23 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %17, i64 0, i32 1, i32 0
  store %"class.v8::internal::ZoneList.1145"* %19, %"class.v8::internal::ZoneList.1145"** %23, align 8
  %24 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %17, i64 0, i32 1, i32 1
  store i16 0, i16* %24, align 8
  %25 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %17, i64 0, i32 2, i32 0
  store i32 %21, i32* %25, align 8
  %26 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %17, i64 0, i32 3, i32 0
  store i32 0, i32* %26, align 4
  %27 = getelementptr inbounds %"class.v8::internal::ZoneList.1145", %"class.v8::internal::ZoneList.1145"* %19, i64 0, i32 2
  %28 = load i32, i32* %27, align 4
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %30, label %80

30:                                               ; preds = %15
  %31 = getelementptr inbounds %"class.v8::internal::ZoneList.1145", %"class.v8::internal::ZoneList.1145"* %19, i64 0, i32 1
  %32 = load i32, i32* %31, align 8
  %33 = icmp sgt i32 %32, 0
  br i1 %33, label %34, label %37

34:                                               ; preds = %30
  %35 = bitcast %"class.v8::internal::ZoneList.1145"* %19 to i64**
  %36 = load i64*, i64** %35, align 8
  store i32 1, i32* %27, align 4
  br label %76

37:                                               ; preds = %30
  %38 = shl nsw i32 %32, 1
  %39 = or i32 %38, 1
  %40 = sext i32 %39 to i64
  %41 = shl nsw i64 %40, 3
  %42 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %18, i64 0, i32 2
  %43 = load i64, i64* %42, align 8
  %44 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %18, i64 0, i32 3
  %45 = load i64, i64* %44, align 8
  %46 = sub i64 %45, %43
  %47 = icmp ugt i64 %41, %46
  br i1 %47, label %48, label %50, !prof !3

48:                                               ; preds = %37
  %49 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %18, i64 %41) #13
  br label %52

50:                                               ; preds = %37
  %51 = add i64 %43, %41
  store i64 %51, i64* %42, align 8
  br label %52

52:                                               ; preds = %50, %48
  %53 = phi i64 [ %49, %48 ], [ %43, %50 ]
  %54 = inttoptr i64 %53 to %"class.v8::internal::CharacterRange"*
  %55 = load i32, i32* %27, align 4
  %56 = icmp sgt i32 %55, 0
  br i1 %56, label %57, label %69

57:                                               ; preds = %52
  %58 = inttoptr i64 %53 to i8*
  %59 = bitcast %"class.v8::internal::ZoneList.1145"* %19 to i8**
  %60 = load i8*, i8** %59, align 8
  %61 = sext i32 %55 to i64
  %62 = shl nsw i64 %61, 3
  switch i64 %62, label %68 [
    i64 16, label %67
    i64 8, label %63
  ]

63:                                               ; preds = %57
  %64 = bitcast i8* %60 to i64*
  %65 = inttoptr i64 %53 to i64*
  %66 = load i64, i64* %64, align 1
  store i64 %66, i64* %65, align 1
  br label %69

67:                                               ; preds = %57
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %58, i8* align 1 %60, i64 16, i1 false) #13
  br label %69

68:                                               ; preds = %57
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %58, i8* align 1 %60, i64 %62, i1 false) #13
  br label %69

69:                                               ; preds = %68, %67, %63, %52
  %70 = getelementptr inbounds %"class.v8::internal::ZoneList.1145", %"class.v8::internal::ZoneList.1145"* %19, i64 0, i32 0
  store %"class.v8::internal::CharacterRange"* %54, %"class.v8::internal::CharacterRange"** %70, align 8
  store i32 %39, i32* %31, align 8
  %71 = load i32, i32* %27, align 4
  %72 = add nsw i32 %71, 1
  store i32 %72, i32* %27, align 4
  %73 = sext i32 %71 to i64
  %74 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %54, i64 %73
  %75 = bitcast %"class.v8::internal::CharacterRange"* %74 to i64*
  br label %76

76:                                               ; preds = %69, %34
  %77 = phi i64* [ %75, %69 ], [ %36, %34 ]
  store i64 4785070309113856, i64* %77, align 4
  %78 = load i32, i32* %26, align 4
  %79 = xor i32 %78, 1
  store i32 %79, i32* %26, align 4
  br label %80

80:                                               ; preds = %15, %76
  ret %"class.v8::internal::RegExpCharacterClass"* %17
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal13RegExpBuilder17AddCharacterClassEPNS0_20RegExpCharacterClassE(%"class.v8::internal::RegExpBuilder"*, %"class.v8::internal::RegExpCharacterClass"*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 2, i32 0
  %4 = load i32, i32* %3, align 4
  %5 = and i32 %4, 16
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %39, label %7

7:                                                ; preds = %2
  %8 = and i32 %4, 2
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %34

10:                                               ; preds = %7
  %11 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 0
  %12 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %11, align 8
  %13 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %1, i64 0, i32 1
  %14 = tail call %"class.v8::internal::ZoneList.1145"* @_ZN2v88internal12CharacterSet6rangesEPNS0_4ZoneE(%"class.v8::internal::CharacterSet"* %13, %"class.v8::internal::Zone"* %12) #13
  tail call void @_ZN2v88internal14CharacterRange12CanonicalizeEPNS0_8ZoneListIS1_EE(%"class.v8::internal::ZoneList.1145"* %14) #13
  %15 = getelementptr inbounds %"class.v8::internal::ZoneList.1145", %"class.v8::internal::ZoneList.1145"* %14, i64 0, i32 2
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %"class.v8::internal::ZoneList.1145", %"class.v8::internal::ZoneList.1145"* %14, i64 0, i32 0
  %18 = sext i32 %16 to i64
  br label %19

19:                                               ; preds = %28, %10
  %20 = phi i64 [ %21, %28 ], [ %18, %10 ]
  %21 = add nsw i64 %20, -1
  %22 = icmp sgt i64 %20, 0
  br i1 %22, label %23, label %39

23:                                               ; preds = %19
  %24 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %17, align 8
  %25 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %24, i64 %21, i32 1
  %26 = load i32, i32* %25, align 4
  %27 = icmp ugt i32 %26, 65535
  br i1 %27, label %34, label %28

28:                                               ; preds = %23
  %29 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %24, i64 %21, i32 0
  %30 = load i32, i32* %29, align 4
  %31 = icmp ult i32 %30, 57344
  %32 = icmp ugt i32 %26, 55295
  %33 = and i1 %32, %31
  br i1 %33, label %34, label %19

34:                                               ; preds = %28, %23, %7
  %35 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %1, i64 0, i32 0
  tail call void @_ZN2v88internal13RegExpBuilder9FlushTextEv(%"class.v8::internal::RegExpBuilder"* %0) #13
  %36 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 5
  %37 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 0
  %38 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %37, align 8
  tail call void @_ZN2v88internal16BufferedZoneListINS0_10RegExpTreeELi2EE3AddEPS2_PNS0_4ZoneE(%"class.v8::internal::BufferedZoneList"* %36, %"class.v8::internal::RegExpTree"* %35, %"class.v8::internal::Zone"* %38) #13
  br label %61

39:                                               ; preds = %19, %2
  %40 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %1, i64 0, i32 0
  %41 = bitcast %"class.v8::internal::RegExpCharacterClass"* %1 to i1 (%"class.v8::internal::RegExpTree"*)***
  %42 = load i1 (%"class.v8::internal::RegExpTree"*)**, i1 (%"class.v8::internal::RegExpTree"*)*** %41, align 8
  %43 = getelementptr inbounds i1 (%"class.v8::internal::RegExpTree"*)*, i1 (%"class.v8::internal::RegExpTree"*)** %42, i64 32
  %44 = load i1 (%"class.v8::internal::RegExpTree"*)*, i1 (%"class.v8::internal::RegExpTree"*)** %43, align 8
  %45 = tail call zeroext i1 %44(%"class.v8::internal::RegExpTree"* %40) #13
  br i1 %45, label %46, label %48

46:                                               ; preds = %39
  %47 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 1
  store i8 1, i8* %47, align 8
  br label %61

48:                                               ; preds = %39
  %49 = load i1 (%"class.v8::internal::RegExpTree"*)**, i1 (%"class.v8::internal::RegExpTree"*)*** %41, align 8
  %50 = getelementptr inbounds i1 (%"class.v8::internal::RegExpTree"*)*, i1 (%"class.v8::internal::RegExpTree"*)** %49, i64 4
  %51 = load i1 (%"class.v8::internal::RegExpTree"*)*, i1 (%"class.v8::internal::RegExpTree"*)** %50, align 8
  %52 = tail call zeroext i1 %51(%"class.v8::internal::RegExpTree"* %40) #13
  br i1 %52, label %53, label %57

53:                                               ; preds = %48
  tail call void @_ZN2v88internal13RegExpBuilder15FlushCharactersEv(%"class.v8::internal::RegExpBuilder"* %0) #13
  %54 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 6
  %55 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 0
  %56 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %55, align 8
  tail call void @_ZN2v88internal16BufferedZoneListINS0_10RegExpTreeELi2EE3AddEPS2_PNS0_4ZoneE(%"class.v8::internal::BufferedZoneList"* %54, %"class.v8::internal::RegExpTree"* %40, %"class.v8::internal::Zone"* %56) #13
  br label %61

57:                                               ; preds = %48
  tail call void @_ZN2v88internal13RegExpBuilder9FlushTextEv(%"class.v8::internal::RegExpBuilder"* %0) #13
  %58 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 5
  %59 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 0
  %60 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %59, align 8
  tail call void @_ZN2v88internal16BufferedZoneListINS0_10RegExpTreeELi2EE3AddEPS2_PNS0_4ZoneE(%"class.v8::internal::BufferedZoneList"* %58, %"class.v8::internal::RegExpTree"* %40, %"class.v8::internal::Zone"* %60) #13
  br label %61

61:                                               ; preds = %57, %53, %46, %34
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::RegExpParser::RegExpParserState"* @_ZN2v88internal12RegExpParser20ParseOpenParenthesisEPNS1_17RegExpParserStateE(%"class.v8::internal::RegExpParser"*, %"class.v8::internal::RegExpParser::RegExpParserState"*) local_unnamed_addr #0 align 2 {
  %3 = ptrtoint %"class.v8::internal::RegExpParser::RegExpParserState"* %1 to i64
  %4 = getelementptr inbounds %"class.v8::internal::RegExpParser::RegExpParserState", %"class.v8::internal::RegExpParser::RegExpParserState"* %1, i64 0, i32 3
  %5 = load i32, i32* %4, align 4
  tail call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0)
  %6 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 8
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 63
  br i1 %8, label %9, label %253

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 10
  %11 = load i32, i32* %10, align 8
  %12 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 7
  %13 = load %"class.v8::internal::FlatStringReader"*, %"class.v8::internal::FlatStringReader"** %12, align 8
  %14 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %13, i64 0, i32 3
  %15 = load i32, i32* %14, align 4
  %16 = icmp slt i32 %11, %15
  br i1 %16, label %17, label %244

17:                                               ; preds = %9
  %18 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %13, i64 0, i32 2
  %19 = load i8, i8* %18, align 8, !range !2
  %20 = icmp eq i8 %19, 0
  %21 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %13, i64 0, i32 4
  br i1 %20, label %29, label %22

22:                                               ; preds = %17
  %23 = load i8*, i8** %21, align 8
  %24 = sext i32 %11 to i64
  %25 = getelementptr inbounds i8, i8* %23, i64 %24
  %26 = load i8, i8* %25, align 1
  %27 = zext i8 %26 to i32
  %28 = bitcast i8* %23 to i16*
  br label %37

29:                                               ; preds = %17
  %30 = bitcast i8** %21 to i16**
  %31 = load i16*, i16** %30, align 8
  %32 = sext i32 %11 to i64
  %33 = getelementptr inbounds i16, i16* %31, i64 %32
  %34 = load i16, i16* %33, align 2
  %35 = zext i16 %34 to i32
  %36 = bitcast i16* %31 to i8*
  br label %37

37:                                               ; preds = %29, %22
  %38 = phi i16* [ %28, %22 ], [ %31, %29 ]
  %39 = phi i8* [ %23, %22 ], [ %36, %29 ]
  %40 = phi i32 [ %27, %22 ], [ %35, %29 ]
  %41 = add nsw i32 %11, 1
  %42 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 9, i32 0
  %43 = load i32, i32* %42, align 4
  %44 = and i32 %43, 16
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %71, label %46

46:                                               ; preds = %37
  %47 = icmp slt i32 %41, %15
  %48 = and i32 %40, 64512
  %49 = icmp eq i32 %48, 55296
  %50 = and i1 %47, %49
  br i1 %50, label %51, label %71

51:                                               ; preds = %46
  %52 = sext i32 %41 to i64
  br i1 %20, label %57, label %53

53:                                               ; preds = %51
  %54 = getelementptr inbounds i8, i8* %39, i64 %52
  %55 = load i8, i8* %54, align 1
  %56 = zext i8 %55 to i32
  br label %61

57:                                               ; preds = %51
  %58 = getelementptr inbounds i16, i16* %38, i64 %52
  %59 = load i16, i16* %58, align 2
  %60 = zext i16 %59 to i32
  br label %61

61:                                               ; preds = %57, %53
  %62 = phi i32 [ %56, %53 ], [ %60, %57 ]
  %63 = and i32 %62, 64512
  %64 = icmp eq i32 %63, 56320
  br i1 %64, label %65, label %71

65:                                               ; preds = %61
  %66 = shl nuw nsw i32 %40, 10
  %67 = and i32 %66, 1047552
  %68 = add nuw nsw i32 %67, 65536
  %69 = and i32 %62, 1023
  %70 = or i32 %69, %68
  br label %71

71:                                               ; preds = %37, %46, %61, %65
  %72 = phi i32 [ %40, %46 ], [ %40, %37 ], [ %70, %65 ], [ %40, %61 ]
  switch i32 %72, label %244 [
    i32 58, label %73
    i32 61, label %74
    i32 33, label %75
    i32 45, label %76
    i32 105, label %76
    i32 115, label %76
    i32 109, label %76
    i32 60, label %156
  ]

73:                                               ; preds = %71
  store i32 %41, i32* %10, align 8
  tail call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0) #13
  br label %280

74:                                               ; preds = %71
  store i32 %41, i32* %10, align 8
  tail call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0) #13
  br label %280

75:                                               ; preds = %71
  store i32 %41, i32* %10, align 8
  tail call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0) #13
  br label %280

76:                                               ; preds = %71, %71, %71, %71
  %77 = load i8, i8* @_ZN2v88internal26FLAG_regexp_mode_modifiersE, align 1, !range !2
  %78 = icmp eq i8 %77, 0
  br i1 %78, label %79, label %88

79:                                               ; preds = %76
  %80 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 18
  %81 = load i8, i8* %80, align 1, !range !2
  %82 = icmp eq i8 %81, 0
  br i1 %82, label %83, label %336

83:                                               ; preds = %79
  store i8 1, i8* %80, align 1
  %84 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 2
  store i32 16, i32* %84, align 8
  %85 = add nsw i32 %11, -1
  %86 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 3
  store i32 %85, i32* %86, align 4
  store i32 2097152, i32* %6, align 8
  %87 = load i32, i32* %14, align 4
  store i32 %87, i32* %10, align 8
  br label %336

88:                                               ; preds = %76, %128
  %89 = phi i8 [ %93, %128 ], [ 1, %76 ]
  %90 = phi i32 [ %133, %128 ], [ 0, %76 ]
  %91 = phi i32 [ %131, %128 ], [ 0, %76 ]
  br label %92

92:                                               ; preds = %95, %88
  %93 = phi i8 [ %89, %88 ], [ 0, %95 ]
  tail call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0)
  %94 = load i32, i32* %6, align 8
  switch i32 %94, label %144 [
    i32 45, label %95
    i32 58, label %143
    i32 41, label %134
    i32 105, label %109
    i32 109, label %111
    i32 115, label %110
  ]

95:                                               ; preds = %92
  %96 = icmp eq i8 %93, 0
  br i1 %96, label %97, label %92

97:                                               ; preds = %95
  %98 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 18
  %99 = load i8, i8* %98, align 1, !range !2
  %100 = icmp eq i8 %99, 0
  br i1 %100, label %101, label %336

101:                                              ; preds = %97
  store i8 1, i8* %98, align 1
  %102 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 2
  store i32 17, i32* %102, align 8
  %103 = load i32, i32* %10, align 8
  %104 = add nsw i32 %103, -1
  %105 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 3
  store i32 %104, i32* %105, align 4
  store i32 2097152, i32* %6, align 8
  %106 = load %"class.v8::internal::FlatStringReader"*, %"class.v8::internal::FlatStringReader"** %12, align 8
  %107 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %106, i64 0, i32 3
  %108 = load i32, i32* %107, align 4
  store i32 %108, i32* %10, align 8
  br label %336

109:                                              ; preds = %92
  br label %111

110:                                              ; preds = %92
  br label %111

111:                                              ; preds = %92, %110, %109
  %112 = phi i32 [ 2, %109 ], [ 32, %110 ], [ 4, %92 ]
  %113 = or i32 %90, %91
  %114 = and i32 %112, %113
  %115 = icmp eq i32 %114, 0
  br i1 %115, label %128, label %116

116:                                              ; preds = %111
  %117 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 18
  %118 = load i8, i8* %117, align 1, !range !2
  %119 = icmp eq i8 %118, 0
  br i1 %119, label %120, label %336

120:                                              ; preds = %116
  store i8 1, i8* %117, align 1
  %121 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 2
  store i32 19, i32* %121, align 8
  %122 = load i32, i32* %10, align 8
  %123 = add nsw i32 %122, -1
  %124 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 3
  store i32 %123, i32* %124, align 4
  store i32 2097152, i32* %6, align 8
  %125 = load %"class.v8::internal::FlatStringReader"*, %"class.v8::internal::FlatStringReader"** %12, align 8
  %126 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %125, i64 0, i32 3
  %127 = load i32, i32* %126, align 4
  store i32 %127, i32* %10, align 8
  br label %336

128:                                              ; preds = %111
  %129 = icmp eq i8 %93, 0
  %130 = select i1 %129, i32 %112, i32 0
  %131 = or i32 %130, %91
  %132 = select i1 %129, i32 0, i32 %112
  %133 = or i32 %132, %90
  br label %88

134:                                              ; preds = %92
  tail call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0)
  %135 = getelementptr inbounds %"class.v8::internal::RegExpParser::RegExpParserState", %"class.v8::internal::RegExpParser::RegExpParserState"* %1, i64 0, i32 1
  %136 = load %"class.v8::internal::RegExpBuilder"*, %"class.v8::internal::RegExpBuilder"** %135, align 8
  tail call void @_ZN2v88internal13RegExpBuilder9FlushTextEv(%"class.v8::internal::RegExpBuilder"* %136)
  %137 = load %"class.v8::internal::RegExpBuilder"*, %"class.v8::internal::RegExpBuilder"** %135, align 8
  %138 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %137, i64 0, i32 2, i32 0
  %139 = load i32, i32* %138, align 4
  %140 = or i32 %139, %90
  %141 = xor i32 %91, -1
  %142 = and i32 %140, %141
  store i32 %142, i32* %138, align 4
  br label %336

143:                                              ; preds = %92
  tail call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0)
  br label %280

144:                                              ; preds = %92
  %145 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 18
  %146 = load i8, i8* %145, align 1, !range !2
  %147 = icmp eq i8 %146, 0
  br i1 %147, label %148, label %336

148:                                              ; preds = %144
  store i8 1, i8* %145, align 1
  %149 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 2
  store i32 20, i32* %149, align 8
  %150 = load i32, i32* %10, align 8
  %151 = add nsw i32 %150, -1
  %152 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 3
  store i32 %151, i32* %152, align 4
  store i32 2097152, i32* %6, align 8
  %153 = load %"class.v8::internal::FlatStringReader"*, %"class.v8::internal::FlatStringReader"** %12, align 8
  %154 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %153, i64 0, i32 3
  %155 = load i32, i32* %154, align 4
  store i32 %155, i32* %10, align 8
  br label %336

156:                                              ; preds = %71
  tail call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0)
  %157 = load i32, i32* %10, align 8
  %158 = load %"class.v8::internal::FlatStringReader"*, %"class.v8::internal::FlatStringReader"** %12, align 8
  %159 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %158, i64 0, i32 3
  %160 = load i32, i32* %159, align 4
  %161 = icmp slt i32 %157, %160
  br i1 %161, label %162, label %242

162:                                              ; preds = %156
  %163 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %158, i64 0, i32 2
  %164 = load i8, i8* %163, align 8, !range !2
  %165 = icmp eq i8 %164, 0
  %166 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %158, i64 0, i32 4
  br i1 %165, label %174, label %167

167:                                              ; preds = %162
  %168 = load i8*, i8** %166, align 8
  %169 = sext i32 %157 to i64
  %170 = getelementptr inbounds i8, i8* %168, i64 %169
  %171 = load i8, i8* %170, align 1
  %172 = zext i8 %171 to i32
  %173 = bitcast i8* %168 to i16*
  br label %182

174:                                              ; preds = %162
  %175 = bitcast i8** %166 to i16**
  %176 = load i16*, i16** %175, align 8
  %177 = sext i32 %157 to i64
  %178 = getelementptr inbounds i16, i16* %176, i64 %177
  %179 = load i16, i16* %178, align 2
  %180 = zext i16 %179 to i32
  %181 = bitcast i16* %176 to i8*
  br label %182

182:                                              ; preds = %174, %167
  %183 = phi i16* [ %173, %167 ], [ %176, %174 ]
  %184 = phi i8* [ %168, %167 ], [ %181, %174 ]
  %185 = phi i32 [ %172, %167 ], [ %180, %174 ]
  %186 = add nsw i32 %157, 1
  %187 = load i32, i32* %42, align 4
  %188 = and i32 %187, 16
  %189 = icmp eq i32 %188, 0
  br i1 %189, label %206, label %190

190:                                              ; preds = %182
  %191 = icmp slt i32 %186, %160
  %192 = and i32 %185, 64512
  %193 = icmp eq i32 %192, 55296
  %194 = and i1 %191, %193
  br i1 %194, label %195, label %206

195:                                              ; preds = %190
  br i1 %165, label %196, label %202

196:                                              ; preds = %195
  %197 = sext i32 %186 to i64
  %198 = getelementptr inbounds i16, i16* %183, i64 %197
  %199 = load i16, i16* %198, align 2
  %200 = and i16 %199, -1024
  %201 = icmp ne i16 %200, -9216
  br label %202

202:                                              ; preds = %195, %196
  %203 = phi i1 [ %201, %196 ], [ true, %195 ]
  %204 = icmp eq i32 %185, 61
  %205 = and i1 %204, %203
  br i1 %205, label %208, label %209

206:                                              ; preds = %182, %190
  %207 = icmp eq i32 %185, 61
  br i1 %207, label %208, label %209

208:                                              ; preds = %202, %206
  store i32 %186, i32* %10, align 8
  tail call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0) #13
  br label %280

209:                                              ; preds = %202, %206
  %210 = sext i32 %157 to i64
  br i1 %165, label %216, label %211

211:                                              ; preds = %209
  %212 = getelementptr inbounds i8, i8* %184, i64 %210
  %213 = load i8, i8* %212, align 1
  %214 = zext i8 %213 to i32
  %215 = bitcast i8* %184 to i16*
  br label %220

216:                                              ; preds = %209
  %217 = getelementptr inbounds i16, i16* %183, i64 %210
  %218 = load i16, i16* %217, align 2
  %219 = zext i16 %218 to i32
  br label %220

220:                                              ; preds = %216, %211
  %221 = phi i16* [ %215, %211 ], [ %183, %216 ]
  %222 = phi i32 [ %214, %211 ], [ %219, %216 ]
  br i1 %189, label %239, label %223

223:                                              ; preds = %220
  %224 = icmp slt i32 %186, %160
  %225 = and i32 %222, 64512
  %226 = icmp eq i32 %225, 55296
  %227 = and i1 %224, %226
  br i1 %227, label %228, label %239

228:                                              ; preds = %223
  br i1 %165, label %229, label %235

229:                                              ; preds = %228
  %230 = sext i32 %186 to i64
  %231 = getelementptr inbounds i16, i16* %221, i64 %230
  %232 = load i16, i16* %231, align 2
  %233 = and i16 %232, -1024
  %234 = icmp ne i16 %233, -9216
  br label %235

235:                                              ; preds = %228, %229
  %236 = phi i1 [ %234, %229 ], [ true, %228 ]
  %237 = icmp eq i32 %222, 33
  %238 = and i1 %237, %236
  br i1 %238, label %241, label %242

239:                                              ; preds = %220, %223
  %240 = icmp eq i32 %222, 33
  br i1 %240, label %241, label %242

241:                                              ; preds = %235, %239
  store i32 %186, i32* %10, align 8
  tail call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0) #13
  br label %280

242:                                              ; preds = %235, %156, %239
  %243 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 17
  store i8 1, i8* %243, align 8
  tail call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0)
  br label %253

244:                                              ; preds = %9, %71
  %245 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 18
  %246 = load i8, i8* %245, align 1, !range !2
  %247 = icmp eq i8 %246, 0
  br i1 %247, label %248, label %336

248:                                              ; preds = %244
  store i8 1, i8* %245, align 1
  %249 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 2
  store i32 16, i32* %249, align 8
  %250 = add nsw i32 %11, -1
  %251 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 3
  store i32 %250, i32* %251, align 4
  store i32 2097152, i32* %6, align 8
  %252 = load i32, i32* %14, align 4
  store i32 %252, i32* %10, align 8
  br label %336

253:                                              ; preds = %2, %242
  %254 = phi i1 [ true, %242 ], [ false, %2 ]
  %255 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 11
  %256 = load i32, i32* %255, align 4
  %257 = icmp sgt i32 %256, 65535
  br i1 %257, label %258, label %272

258:                                              ; preds = %253
  %259 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 18
  %260 = load i8, i8* %259, align 1, !range !2
  %261 = icmp eq i8 %260, 0
  br i1 %261, label %262, label %336

262:                                              ; preds = %258
  store i8 1, i8* %259, align 1
  %263 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 2
  store i32 21, i32* %263, align 8
  %264 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 10
  %265 = load i32, i32* %264, align 8
  %266 = add nsw i32 %265, -1
  %267 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 3
  store i32 %266, i32* %267, align 4
  store i32 2097152, i32* %6, align 8
  %268 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 7
  %269 = load %"class.v8::internal::FlatStringReader"*, %"class.v8::internal::FlatStringReader"** %268, align 8
  %270 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %269, i64 0, i32 3
  %271 = load i32, i32* %270, align 4
  store i32 %271, i32* %264, align 8
  br label %336

272:                                              ; preds = %253
  %273 = add nsw i32 %256, 1
  store i32 %273, i32* %255, align 4
  br i1 %254, label %274, label %280

274:                                              ; preds = %272
  %275 = tail call %"class.v8::internal::ZoneVector"* @_ZN2v88internal12RegExpParser21ParseCaptureGroupNameEv(%"class.v8::internal::RegExpParser"* %0)
  %276 = ptrtoint %"class.v8::internal::ZoneVector"* %275 to i64
  %277 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 18
  %278 = load i8, i8* %277, align 1, !range !2
  %279 = icmp eq i8 %278, 0
  br i1 %279, label %280, label %336

280:                                              ; preds = %143, %73, %74, %75, %241, %208, %274, %272
  %281 = phi i32 [ %5, %274 ], [ %5, %272 ], [ %5, %73 ], [ 0, %74 ], [ 0, %75 ], [ 1, %241 ], [ 1, %208 ], [ %5, %143 ]
  %282 = phi i32 [ 0, %274 ], [ 0, %272 ], [ 0, %73 ], [ 0, %74 ], [ 0, %75 ], [ 0, %241 ], [ 0, %208 ], [ %90, %143 ]
  %283 = phi i32 [ 0, %274 ], [ 0, %272 ], [ 0, %73 ], [ 0, %74 ], [ 0, %75 ], [ 0, %241 ], [ 0, %208 ], [ %91, %143 ]
  %284 = phi i32 [ 1, %274 ], [ 1, %272 ], [ 4, %73 ], [ 2, %74 ], [ 3, %75 ], [ 3, %241 ], [ 2, %208 ], [ 4, %143 ]
  %285 = phi i64 [ %276, %274 ], [ 0, %272 ], [ 0, %73 ], [ 0, %74 ], [ 0, %75 ], [ 0, %241 ], [ 0, %208 ], [ 0, %143 ]
  %286 = getelementptr inbounds %"class.v8::internal::RegExpParser::RegExpParserState", %"class.v8::internal::RegExpParser::RegExpParserState"* %1, i64 0, i32 1
  %287 = load %"class.v8::internal::RegExpBuilder"*, %"class.v8::internal::RegExpBuilder"** %286, align 8
  %288 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %287, i64 0, i32 2, i32 0
  %289 = load i32, i32* %288, align 4
  %290 = or i32 %289, %282
  %291 = xor i32 %283, -1
  %292 = and i32 %290, %291
  %293 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 1
  %294 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %293, align 8
  %295 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 11
  %296 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %294, i64 0, i32 2
  %297 = load i64, i64* %296, align 8
  %298 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %294, i64 0, i32 3
  %299 = load i64, i64* %298, align 8
  %300 = sub i64 %299, %297
  %301 = icmp ult i64 %300, 40
  br i1 %301, label %302, label %304, !prof !3

302:                                              ; preds = %280
  %303 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %294, i64 40) #13
  br label %306

304:                                              ; preds = %280
  %305 = add i64 %297, 40
  store i64 %305, i64* %296, align 8
  br label %306

306:                                              ; preds = %304, %302
  %307 = phi i64 [ %303, %302 ], [ %297, %304 ]
  %308 = inttoptr i64 %307 to %"class.v8::internal::RegExpParser::RegExpParserState"*
  %309 = load i32, i32* %295, align 4
  %310 = ptrtoint %"class.v8::internal::Zone"* %294 to i64
  %311 = inttoptr i64 %307 to i64*
  store i64 %3, i64* %311, align 8
  %312 = getelementptr inbounds %"class.v8::internal::RegExpParser::RegExpParserState", %"class.v8::internal::RegExpParser::RegExpParserState"* %308, i64 0, i32 1
  %313 = load i64, i64* %296, align 8
  %314 = load i64, i64* %298, align 8
  %315 = sub i64 %314, %313
  %316 = icmp ult i64 %315, 80
  br i1 %316, label %317, label %319, !prof !3

317:                                              ; preds = %306
  %318 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %294, i64 80) #13
  br label %321

319:                                              ; preds = %306
  %320 = add i64 %313, 80
  store i64 %320, i64* %296, align 8
  br label %321

321:                                              ; preds = %317, %319
  %322 = phi i64 [ %318, %317 ], [ %313, %319 ]
  %323 = inttoptr i64 %322 to %"class.v8::internal::RegExpBuilder"*
  %324 = inttoptr i64 %322 to i64*
  store i64 %310, i64* %324, align 8
  %325 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %323, i64 0, i32 1
  store i8 0, i8* %325, align 8
  %326 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %323, i64 0, i32 2, i32 0
  store i32 %292, i32* %326, align 4
  %327 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %323, i64 0, i32 3
  store %"class.v8::internal::ZoneList.1143"* null, %"class.v8::internal::ZoneList.1143"** %327, align 8
  %328 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %323, i64 0, i32 4
  store i16 0, i16* %328, align 8
  %329 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %323, i64 0, i32 5
  %330 = bitcast %"class.v8::internal::BufferedZoneList"* %329 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %330, i8 0, i64 48, i1 false) #13
  store %"class.v8::internal::RegExpBuilder"* %323, %"class.v8::internal::RegExpBuilder"** %312, align 8
  %331 = getelementptr inbounds %"class.v8::internal::RegExpParser::RegExpParserState", %"class.v8::internal::RegExpParser::RegExpParserState"* %308, i64 0, i32 2
  store i32 %284, i32* %331, align 8
  %332 = getelementptr inbounds %"class.v8::internal::RegExpParser::RegExpParserState", %"class.v8::internal::RegExpParser::RegExpParserState"* %308, i64 0, i32 3
  store i32 %281, i32* %332, align 4
  %333 = getelementptr inbounds %"class.v8::internal::RegExpParser::RegExpParserState", %"class.v8::internal::RegExpParser::RegExpParserState"* %308, i64 0, i32 4
  store i32 %309, i32* %333, align 8
  %334 = getelementptr inbounds %"class.v8::internal::RegExpParser::RegExpParserState", %"class.v8::internal::RegExpParser::RegExpParserState"* %308, i64 0, i32 5
  %335 = bitcast %"class.v8::internal::ZoneVector"** %334 to i64*
  store i64 %285, i64* %335, align 8
  br label %336

336:                                              ; preds = %120, %116, %148, %144, %101, %97, %134, %262, %258, %248, %244, %83, %79, %274, %321
  %337 = phi %"class.v8::internal::RegExpParser::RegExpParserState"* [ %308, %321 ], [ null, %274 ], [ null, %79 ], [ null, %83 ], [ null, %244 ], [ null, %248 ], [ null, %258 ], [ null, %262 ], [ null, %148 ], [ null, %144 ], [ null, %101 ], [ null, %97 ], [ %1, %134 ], [ null, %116 ], [ null, %120 ]
  ret %"class.v8::internal::RegExpParser::RegExpParserState"* %337
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::RegExpTree"* @_ZN2v88internal12RegExpParser19ParseCharacterClassEPKNS0_13RegExpBuilderE(%"class.v8::internal::RegExpParser"*, %"class.v8::internal::RegExpBuilder"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.v8::internal::ZoneList.1145"*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i8, align 1
  %7 = alloca i8, align 1
  %8 = alloca %"class.v8::base::Flags.1146", align 4
  %9 = alloca %"class.v8::internal::Zone"*, align 8
  %10 = alloca %"class.v8::base::Flags", align 4
  tail call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0)
  %11 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 8
  %12 = load i32, i32* %11, align 8
  %13 = icmp eq i32 %12, 94
  br i1 %13, label %14, label %15

14:                                               ; preds = %2
  tail call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0)
  br label %15

15:                                               ; preds = %14, %2
  %16 = phi i32 [ 1, %14 ], [ 0, %2 ]
  %17 = bitcast %"class.v8::internal::ZoneList.1145"** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #13
  %18 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 1
  %19 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %18, align 8
  %20 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %19, i64 0, i32 2
  %21 = load i64, i64* %20, align 8
  %22 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %19, i64 0, i32 3
  %23 = load i64, i64* %22, align 8
  %24 = sub i64 %23, %21
  %25 = icmp ult i64 %24, 16
  br i1 %25, label %26, label %28, !prof !3

26:                                               ; preds = %15
  %27 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %19, i64 16) #13
  br label %30

28:                                               ; preds = %15
  %29 = add i64 %21, 16
  store i64 %29, i64* %20, align 8
  br label %30

30:                                               ; preds = %26, %28
  %31 = phi i64 [ %27, %26 ], [ %21, %28 ]
  %32 = inttoptr i64 %31 to %"class.v8::internal::ZoneList.1145"*
  %33 = getelementptr inbounds %"class.v8::internal::ZoneList.1145", %"class.v8::internal::ZoneList.1145"* %32, i64 0, i32 0
  store %"class.v8::internal::CharacterRange"* null, %"class.v8::internal::CharacterRange"** %33, align 8
  %34 = getelementptr inbounds %"class.v8::internal::ZoneList.1145", %"class.v8::internal::ZoneList.1145"* %32, i64 0, i32 1
  store i32 2, i32* %34, align 8
  %35 = getelementptr inbounds %"class.v8::internal::ZoneList.1145", %"class.v8::internal::ZoneList.1145"* %32, i64 0, i32 2
  store i32 0, i32* %35, align 4
  %36 = load i64, i64* %20, align 8
  %37 = load i64, i64* %22, align 8
  %38 = sub i64 %37, %36
  %39 = icmp ult i64 %38, 16
  br i1 %39, label %40, label %42, !prof !3

40:                                               ; preds = %30
  %41 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %19, i64 16) #13
  br label %44

42:                                               ; preds = %30
  %43 = add i64 %36, 16
  store i64 %43, i64* %20, align 8
  br label %44

44:                                               ; preds = %40, %42
  %45 = phi i64 [ %41, %40 ], [ %36, %42 ]
  %46 = inttoptr i64 %45 to %"class.v8::internal::CharacterRange"*
  store %"class.v8::internal::CharacterRange"* %46, %"class.v8::internal::CharacterRange"** %33, align 8
  store %"class.v8::internal::ZoneList.1145"* %32, %"class.v8::internal::ZoneList.1145"** %3, align 8
  %47 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 9, i32 0
  %48 = load i32, i32* %47, align 4
  %49 = and i32 %48, 16
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %56, label %51

51:                                               ; preds = %44
  %52 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %1, i64 0, i32 2, i32 0
  %53 = load i32, i32* %52, align 4
  %54 = and i32 %53, 2
  %55 = icmp ne i32 %54, 0
  br label %56

56:                                               ; preds = %44, %51
  %57 = phi i1 [ false, %44 ], [ %55, %51 ]
  %58 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 13
  %59 = load i8, i8* %58, align 4, !range !2
  %60 = icmp eq i8 %59, 0
  br i1 %60, label %526, label %61

61:                                               ; preds = %56
  %62 = bitcast i32* %4 to i8*
  %63 = bitcast i32* %5 to i8*
  %64 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 18
  br label %65

65:                                               ; preds = %61, %513
  %66 = load i32, i32* %11, align 8
  %67 = icmp eq i32 %66, 93
  br i1 %67, label %540, label %68

68:                                               ; preds = %65
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %62) #13
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %63) #13
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %6) #13
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %7) #13
  %69 = load %"class.v8::internal::ZoneList.1145"*, %"class.v8::internal::ZoneList.1145"** %3, align 8
  %70 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %18, align 8
  call void @_ZN2v88internal12RegExpParser16ParseClassEscapeEPNS0_8ZoneListINS0_14CharacterRangeEEEPNS0_4ZoneEbPjPb(%"class.v8::internal::RegExpParser"* %0, %"class.v8::internal::ZoneList.1145"* %69, %"class.v8::internal::Zone"* %70, i1 zeroext %57, i32* nonnull %4, i8* nonnull %6)
  %71 = load i8, i8* %64, align 1, !range !2
  %72 = icmp eq i8 %71, 0
  br i1 %72, label %73, label %512

73:                                               ; preds = %68
  %74 = load i32, i32* %11, align 8
  %75 = icmp eq i32 %74, 45
  br i1 %75, label %76, label %451

76:                                               ; preds = %73
  tail call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0)
  %77 = load i32, i32* %11, align 8
  switch i32 %77, label %184 [
    i32 2097152, label %523
    i32 93, label %78
  ]

78:                                               ; preds = %76
  %79 = load i8, i8* %6, align 1, !range !2
  %80 = icmp eq i8 %79, 0
  br i1 %80, label %81, label %138

81:                                               ; preds = %78
  %82 = load %"class.v8::internal::ZoneList.1145"*, %"class.v8::internal::ZoneList.1145"** %3, align 8
  %83 = load i32, i32* %4, align 4
  %84 = zext i32 %83 to i64
  %85 = shl nuw i64 %84, 32
  %86 = or i64 %85, %84
  %87 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %18, align 8
  %88 = getelementptr inbounds %"class.v8::internal::ZoneList.1145", %"class.v8::internal::ZoneList.1145"* %82, i64 0, i32 2
  %89 = load i32, i32* %88, align 4
  %90 = getelementptr inbounds %"class.v8::internal::ZoneList.1145", %"class.v8::internal::ZoneList.1145"* %82, i64 0, i32 1
  %91 = load i32, i32* %90, align 8
  %92 = icmp slt i32 %89, %91
  br i1 %92, label %93, label %96

93:                                               ; preds = %81
  %94 = getelementptr inbounds %"class.v8::internal::ZoneList.1145", %"class.v8::internal::ZoneList.1145"* %82, i64 0, i32 0
  %95 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %94, align 8
  br label %131

96:                                               ; preds = %81
  %97 = shl nsw i32 %91, 1
  %98 = or i32 %97, 1
  %99 = sext i32 %98 to i64
  %100 = shl nsw i64 %99, 3
  %101 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %87, i64 0, i32 2
  %102 = load i64, i64* %101, align 8
  %103 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %87, i64 0, i32 3
  %104 = load i64, i64* %103, align 8
  %105 = sub i64 %104, %102
  %106 = icmp ugt i64 %100, %105
  br i1 %106, label %107, label %109, !prof !3

107:                                              ; preds = %96
  %108 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %87, i64 %100) #13
  br label %111

109:                                              ; preds = %96
  %110 = add i64 %102, %100
  store i64 %110, i64* %101, align 8
  br label %111

111:                                              ; preds = %109, %107
  %112 = phi i64 [ %108, %107 ], [ %102, %109 ]
  %113 = inttoptr i64 %112 to %"class.v8::internal::CharacterRange"*
  %114 = load i32, i32* %88, align 4
  %115 = icmp sgt i32 %114, 0
  br i1 %115, label %116, label %128

116:                                              ; preds = %111
  %117 = inttoptr i64 %112 to i8*
  %118 = bitcast %"class.v8::internal::ZoneList.1145"* %82 to i8**
  %119 = load i8*, i8** %118, align 8
  %120 = sext i32 %114 to i64
  %121 = shl nsw i64 %120, 3
  switch i64 %121, label %127 [
    i64 16, label %126
    i64 8, label %122
  ]

122:                                              ; preds = %116
  %123 = bitcast i8* %119 to i64*
  %124 = inttoptr i64 %112 to i64*
  %125 = load i64, i64* %123, align 1
  store i64 %125, i64* %124, align 1
  br label %128

126:                                              ; preds = %116
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %117, i8* align 1 %119, i64 16, i1 false) #13
  br label %128

127:                                              ; preds = %116
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %117, i8* align 1 %119, i64 %121, i1 false) #13
  br label %128

128:                                              ; preds = %127, %126, %122, %111
  %129 = getelementptr inbounds %"class.v8::internal::ZoneList.1145", %"class.v8::internal::ZoneList.1145"* %82, i64 0, i32 0
  store %"class.v8::internal::CharacterRange"* %113, %"class.v8::internal::CharacterRange"** %129, align 8
  store i32 %98, i32* %90, align 8
  %130 = load i32, i32* %88, align 4
  br label %131

131:                                              ; preds = %93, %128
  %132 = phi i32 [ %130, %128 ], [ %89, %93 ]
  %133 = phi %"class.v8::internal::CharacterRange"* [ %113, %128 ], [ %95, %93 ]
  %134 = add nsw i32 %132, 1
  store i32 %134, i32* %88, align 4
  %135 = sext i32 %132 to i64
  %136 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %133, i64 %135
  %137 = bitcast %"class.v8::internal::CharacterRange"* %136 to i64*
  store i64 %86, i64* %137, align 4
  br label %138

138:                                              ; preds = %131, %78
  %139 = load %"class.v8::internal::ZoneList.1145"*, %"class.v8::internal::ZoneList.1145"** %3, align 8
  %140 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %18, align 8
  %141 = getelementptr inbounds %"class.v8::internal::ZoneList.1145", %"class.v8::internal::ZoneList.1145"* %139, i64 0, i32 2
  %142 = load i32, i32* %141, align 4
  %143 = getelementptr inbounds %"class.v8::internal::ZoneList.1145", %"class.v8::internal::ZoneList.1145"* %139, i64 0, i32 1
  %144 = load i32, i32* %143, align 8
  %145 = icmp slt i32 %142, %144
  br i1 %145, label %146, label %149

146:                                              ; preds = %138
  %147 = getelementptr inbounds %"class.v8::internal::ZoneList.1145", %"class.v8::internal::ZoneList.1145"* %139, i64 0, i32 0
  %148 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %147, align 8
  br label %516

149:                                              ; preds = %138
  %150 = shl nsw i32 %144, 1
  %151 = or i32 %150, 1
  %152 = sext i32 %151 to i64
  %153 = shl nsw i64 %152, 3
  %154 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %140, i64 0, i32 2
  %155 = load i64, i64* %154, align 8
  %156 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %140, i64 0, i32 3
  %157 = load i64, i64* %156, align 8
  %158 = sub i64 %157, %155
  %159 = icmp ugt i64 %153, %158
  br i1 %159, label %160, label %162, !prof !3

160:                                              ; preds = %149
  %161 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %140, i64 %153) #13
  br label %164

162:                                              ; preds = %149
  %163 = add i64 %155, %153
  store i64 %163, i64* %154, align 8
  br label %164

164:                                              ; preds = %162, %160
  %165 = phi i64 [ %161, %160 ], [ %155, %162 ]
  %166 = inttoptr i64 %165 to %"class.v8::internal::CharacterRange"*
  %167 = load i32, i32* %141, align 4
  %168 = icmp sgt i32 %167, 0
  br i1 %168, label %169, label %181

169:                                              ; preds = %164
  %170 = inttoptr i64 %165 to i8*
  %171 = bitcast %"class.v8::internal::ZoneList.1145"* %139 to i8**
  %172 = load i8*, i8** %171, align 8
  %173 = sext i32 %167 to i64
  %174 = shl nsw i64 %173, 3
  switch i64 %174, label %180 [
    i64 16, label %179
    i64 8, label %175
  ]

175:                                              ; preds = %169
  %176 = bitcast i8* %172 to i64*
  %177 = inttoptr i64 %165 to i64*
  %178 = load i64, i64* %176, align 1
  store i64 %178, i64* %177, align 1
  br label %181

179:                                              ; preds = %169
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %170, i8* align 1 %172, i64 16, i1 false) #13
  br label %181

180:                                              ; preds = %169
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %170, i8* align 1 %172, i64 %174, i1 false) #13
  br label %181

181:                                              ; preds = %180, %179, %175, %164
  %182 = getelementptr inbounds %"class.v8::internal::ZoneList.1145", %"class.v8::internal::ZoneList.1145"* %139, i64 0, i32 0
  store %"class.v8::internal::CharacterRange"* %166, %"class.v8::internal::CharacterRange"** %182, align 8
  store i32 %151, i32* %143, align 8
  %183 = load i32, i32* %141, align 4
  br label %516

184:                                              ; preds = %76
  %185 = load %"class.v8::internal::ZoneList.1145"*, %"class.v8::internal::ZoneList.1145"** %3, align 8
  %186 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %18, align 8
  call void @_ZN2v88internal12RegExpParser16ParseClassEscapeEPNS0_8ZoneListINS0_14CharacterRangeEEEPNS0_4ZoneEbPjPb(%"class.v8::internal::RegExpParser"* %0, %"class.v8::internal::ZoneList.1145"* %185, %"class.v8::internal::Zone"* %186, i1 zeroext %57, i32* nonnull %5, i8* nonnull %7)
  %187 = load i8, i8* %64, align 1, !range !2
  %188 = icmp eq i8 %187, 0
  br i1 %188, label %189, label %512

189:                                              ; preds = %184
  %190 = load i8, i8* %6, align 1, !range !2
  %191 = icmp eq i8 %190, 0
  %192 = load i8, i8* %7, align 1
  %193 = or i8 %192, %190
  %194 = icmp eq i8 %193, 0
  br i1 %194, label %379, label %195

195:                                              ; preds = %189
  %196 = load i32, i32* %47, align 4
  %197 = and i32 %196, 16
  %198 = icmp eq i32 %197, 0
  br i1 %198, label %209, label %199

199:                                              ; preds = %195
  store i8 1, i8* %64, align 1
  %200 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 2
  store i32 28, i32* %200, align 8
  %201 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 10
  %202 = load i32, i32* %201, align 8
  %203 = add nsw i32 %202, -1
  %204 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 3
  store i32 %203, i32* %204, align 4
  store i32 2097152, i32* %11, align 8
  %205 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 7
  %206 = load %"class.v8::internal::FlatStringReader"*, %"class.v8::internal::FlatStringReader"** %205, align 8
  %207 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %206, i64 0, i32 3
  %208 = load i32, i32* %207, align 4
  store i32 %208, i32* %201, align 8
  br label %512

209:                                              ; preds = %195
  br i1 %191, label %210, label %267

210:                                              ; preds = %209
  %211 = load %"class.v8::internal::ZoneList.1145"*, %"class.v8::internal::ZoneList.1145"** %3, align 8
  %212 = load i32, i32* %4, align 4
  %213 = zext i32 %212 to i64
  %214 = shl nuw i64 %213, 32
  %215 = or i64 %214, %213
  %216 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %18, align 8
  %217 = getelementptr inbounds %"class.v8::internal::ZoneList.1145", %"class.v8::internal::ZoneList.1145"* %211, i64 0, i32 2
  %218 = load i32, i32* %217, align 4
  %219 = getelementptr inbounds %"class.v8::internal::ZoneList.1145", %"class.v8::internal::ZoneList.1145"* %211, i64 0, i32 1
  %220 = load i32, i32* %219, align 8
  %221 = icmp slt i32 %218, %220
  br i1 %221, label %222, label %225

222:                                              ; preds = %210
  %223 = getelementptr inbounds %"class.v8::internal::ZoneList.1145", %"class.v8::internal::ZoneList.1145"* %211, i64 0, i32 0
  %224 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %223, align 8
  br label %260

225:                                              ; preds = %210
  %226 = shl nsw i32 %220, 1
  %227 = or i32 %226, 1
  %228 = sext i32 %227 to i64
  %229 = shl nsw i64 %228, 3
  %230 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %216, i64 0, i32 2
  %231 = load i64, i64* %230, align 8
  %232 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %216, i64 0, i32 3
  %233 = load i64, i64* %232, align 8
  %234 = sub i64 %233, %231
  %235 = icmp ugt i64 %229, %234
  br i1 %235, label %236, label %238, !prof !3

236:                                              ; preds = %225
  %237 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %216, i64 %229) #13
  br label %240

238:                                              ; preds = %225
  %239 = add i64 %231, %229
  store i64 %239, i64* %230, align 8
  br label %240

240:                                              ; preds = %238, %236
  %241 = phi i64 [ %237, %236 ], [ %231, %238 ]
  %242 = inttoptr i64 %241 to %"class.v8::internal::CharacterRange"*
  %243 = load i32, i32* %217, align 4
  %244 = icmp sgt i32 %243, 0
  br i1 %244, label %245, label %257

245:                                              ; preds = %240
  %246 = inttoptr i64 %241 to i8*
  %247 = bitcast %"class.v8::internal::ZoneList.1145"* %211 to i8**
  %248 = load i8*, i8** %247, align 8
  %249 = sext i32 %243 to i64
  %250 = shl nsw i64 %249, 3
  switch i64 %250, label %256 [
    i64 16, label %255
    i64 8, label %251
  ]

251:                                              ; preds = %245
  %252 = bitcast i8* %248 to i64*
  %253 = inttoptr i64 %241 to i64*
  %254 = load i64, i64* %252, align 1
  store i64 %254, i64* %253, align 1
  br label %257

255:                                              ; preds = %245
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %246, i8* align 1 %248, i64 16, i1 false) #13
  br label %257

256:                                              ; preds = %245
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %246, i8* align 1 %248, i64 %250, i1 false) #13
  br label %257

257:                                              ; preds = %256, %255, %251, %240
  %258 = getelementptr inbounds %"class.v8::internal::ZoneList.1145", %"class.v8::internal::ZoneList.1145"* %211, i64 0, i32 0
  store %"class.v8::internal::CharacterRange"* %242, %"class.v8::internal::CharacterRange"** %258, align 8
  store i32 %227, i32* %219, align 8
  %259 = load i32, i32* %217, align 4
  br label %260

260:                                              ; preds = %222, %257
  %261 = phi i32 [ %259, %257 ], [ %218, %222 ]
  %262 = phi %"class.v8::internal::CharacterRange"* [ %242, %257 ], [ %224, %222 ]
  %263 = add nsw i32 %261, 1
  store i32 %263, i32* %217, align 4
  %264 = sext i32 %261 to i64
  %265 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %262, i64 %264
  %266 = bitcast %"class.v8::internal::CharacterRange"* %265 to i64*
  store i64 %215, i64* %266, align 4
  br label %267

267:                                              ; preds = %260, %209
  %268 = load %"class.v8::internal::ZoneList.1145"*, %"class.v8::internal::ZoneList.1145"** %3, align 8
  %269 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %18, align 8
  %270 = getelementptr inbounds %"class.v8::internal::ZoneList.1145", %"class.v8::internal::ZoneList.1145"* %268, i64 0, i32 2
  %271 = load i32, i32* %270, align 4
  %272 = getelementptr inbounds %"class.v8::internal::ZoneList.1145", %"class.v8::internal::ZoneList.1145"* %268, i64 0, i32 1
  %273 = load i32, i32* %272, align 8
  %274 = icmp slt i32 %271, %273
  br i1 %274, label %275, label %278

275:                                              ; preds = %267
  %276 = getelementptr inbounds %"class.v8::internal::ZoneList.1145", %"class.v8::internal::ZoneList.1145"* %268, i64 0, i32 0
  %277 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %276, align 8
  br label %313

278:                                              ; preds = %267
  %279 = shl nsw i32 %273, 1
  %280 = or i32 %279, 1
  %281 = sext i32 %280 to i64
  %282 = shl nsw i64 %281, 3
  %283 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %269, i64 0, i32 2
  %284 = load i64, i64* %283, align 8
  %285 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %269, i64 0, i32 3
  %286 = load i64, i64* %285, align 8
  %287 = sub i64 %286, %284
  %288 = icmp ugt i64 %282, %287
  br i1 %288, label %289, label %291, !prof !3

289:                                              ; preds = %278
  %290 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %269, i64 %282) #13
  br label %293

291:                                              ; preds = %278
  %292 = add i64 %284, %282
  store i64 %292, i64* %283, align 8
  br label %293

293:                                              ; preds = %291, %289
  %294 = phi i64 [ %290, %289 ], [ %284, %291 ]
  %295 = inttoptr i64 %294 to %"class.v8::internal::CharacterRange"*
  %296 = load i32, i32* %270, align 4
  %297 = icmp sgt i32 %296, 0
  br i1 %297, label %298, label %310

298:                                              ; preds = %293
  %299 = inttoptr i64 %294 to i8*
  %300 = bitcast %"class.v8::internal::ZoneList.1145"* %268 to i8**
  %301 = load i8*, i8** %300, align 8
  %302 = sext i32 %296 to i64
  %303 = shl nsw i64 %302, 3
  switch i64 %303, label %309 [
    i64 16, label %308
    i64 8, label %304
  ]

304:                                              ; preds = %298
  %305 = bitcast i8* %301 to i64*
  %306 = inttoptr i64 %294 to i64*
  %307 = load i64, i64* %305, align 1
  store i64 %307, i64* %306, align 1
  br label %310

308:                                              ; preds = %298
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %299, i8* align 1 %301, i64 16, i1 false) #13
  br label %310

309:                                              ; preds = %298
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %299, i8* align 1 %301, i64 %303, i1 false) #13
  br label %310

310:                                              ; preds = %309, %308, %304, %293
  %311 = getelementptr inbounds %"class.v8::internal::ZoneList.1145", %"class.v8::internal::ZoneList.1145"* %268, i64 0, i32 0
  store %"class.v8::internal::CharacterRange"* %295, %"class.v8::internal::CharacterRange"** %311, align 8
  store i32 %280, i32* %272, align 8
  %312 = load i32, i32* %270, align 4
  br label %313

313:                                              ; preds = %275, %310
  %314 = phi i32 [ %271, %275 ], [ %312, %310 ]
  %315 = phi %"class.v8::internal::CharacterRange"* [ %277, %275 ], [ %295, %310 ]
  %316 = add nsw i32 %314, 1
  store i32 %316, i32* %270, align 4
  %317 = sext i32 %314 to i64
  %318 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %315, i64 %317
  %319 = bitcast %"class.v8::internal::CharacterRange"* %318 to i64*
  store i64 193273528365, i64* %319, align 4
  %320 = icmp eq i8 %192, 0
  br i1 %320, label %321, label %513

321:                                              ; preds = %313
  %322 = load %"class.v8::internal::ZoneList.1145"*, %"class.v8::internal::ZoneList.1145"** %3, align 8
  %323 = load i32, i32* %5, align 4
  %324 = zext i32 %323 to i64
  %325 = shl nuw i64 %324, 32
  %326 = or i64 %325, %324
  %327 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %18, align 8
  %328 = getelementptr inbounds %"class.v8::internal::ZoneList.1145", %"class.v8::internal::ZoneList.1145"* %322, i64 0, i32 2
  %329 = load i32, i32* %328, align 4
  %330 = getelementptr inbounds %"class.v8::internal::ZoneList.1145", %"class.v8::internal::ZoneList.1145"* %322, i64 0, i32 1
  %331 = load i32, i32* %330, align 8
  %332 = icmp slt i32 %329, %331
  br i1 %332, label %333, label %340

333:                                              ; preds = %321
  %334 = getelementptr inbounds %"class.v8::internal::ZoneList.1145", %"class.v8::internal::ZoneList.1145"* %322, i64 0, i32 0
  %335 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %334, align 8
  %336 = add nsw i32 %329, 1
  store i32 %336, i32* %328, align 4
  %337 = sext i32 %329 to i64
  %338 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %335, i64 %337
  %339 = bitcast %"class.v8::internal::CharacterRange"* %338 to i64*
  store i64 %326, i64* %339, align 4
  br label %513

340:                                              ; preds = %321
  %341 = shl nsw i32 %331, 1
  %342 = or i32 %341, 1
  %343 = sext i32 %342 to i64
  %344 = shl nsw i64 %343, 3
  %345 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %327, i64 0, i32 2
  %346 = load i64, i64* %345, align 8
  %347 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %327, i64 0, i32 3
  %348 = load i64, i64* %347, align 8
  %349 = sub i64 %348, %346
  %350 = icmp ugt i64 %344, %349
  br i1 %350, label %351, label %353, !prof !3

351:                                              ; preds = %340
  %352 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %327, i64 %344) #13
  br label %355

353:                                              ; preds = %340
  %354 = add i64 %346, %344
  store i64 %354, i64* %345, align 8
  br label %355

355:                                              ; preds = %353, %351
  %356 = phi i64 [ %352, %351 ], [ %346, %353 ]
  %357 = inttoptr i64 %356 to %"class.v8::internal::CharacterRange"*
  %358 = load i32, i32* %328, align 4
  %359 = icmp sgt i32 %358, 0
  br i1 %359, label %360, label %372

360:                                              ; preds = %355
  %361 = inttoptr i64 %356 to i8*
  %362 = bitcast %"class.v8::internal::ZoneList.1145"* %322 to i8**
  %363 = load i8*, i8** %362, align 8
  %364 = sext i32 %358 to i64
  %365 = shl nsw i64 %364, 3
  switch i64 %365, label %371 [
    i64 16, label %370
    i64 8, label %366
  ]

366:                                              ; preds = %360
  %367 = bitcast i8* %363 to i64*
  %368 = inttoptr i64 %356 to i64*
  %369 = load i64, i64* %367, align 1
  store i64 %369, i64* %368, align 1
  br label %372

370:                                              ; preds = %360
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %361, i8* align 1 %363, i64 16, i1 false) #13
  br label %372

371:                                              ; preds = %360
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %361, i8* align 1 %363, i64 %365, i1 false) #13
  br label %372

372:                                              ; preds = %371, %370, %366, %355
  %373 = getelementptr inbounds %"class.v8::internal::ZoneList.1145", %"class.v8::internal::ZoneList.1145"* %322, i64 0, i32 0
  store %"class.v8::internal::CharacterRange"* %357, %"class.v8::internal::CharacterRange"** %373, align 8
  store i32 %342, i32* %330, align 8
  %374 = load i32, i32* %328, align 4
  %375 = add nsw i32 %374, 1
  store i32 %375, i32* %328, align 4
  %376 = sext i32 %374 to i64
  %377 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %357, i64 %376
  %378 = bitcast %"class.v8::internal::CharacterRange"* %377 to i64*
  store i64 %326, i64* %378, align 4
  br label %513

379:                                              ; preds = %189
  %380 = load i32, i32* %4, align 4
  %381 = load i32, i32* %5, align 4
  %382 = icmp ugt i32 %380, %381
  br i1 %382, label %383, label %393

383:                                              ; preds = %379
  store i8 1, i8* %64, align 1
  %384 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 2
  store i32 30, i32* %384, align 8
  %385 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 10
  %386 = load i32, i32* %385, align 8
  %387 = add nsw i32 %386, -1
  %388 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 3
  store i32 %387, i32* %388, align 4
  store i32 2097152, i32* %11, align 8
  %389 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 7
  %390 = load %"class.v8::internal::FlatStringReader"*, %"class.v8::internal::FlatStringReader"** %389, align 8
  %391 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %390, i64 0, i32 3
  %392 = load i32, i32* %391, align 4
  store i32 %392, i32* %385, align 8
  br label %512

393:                                              ; preds = %379
  %394 = load %"class.v8::internal::ZoneList.1145"*, %"class.v8::internal::ZoneList.1145"** %3, align 8
  %395 = zext i32 %381 to i64
  %396 = shl nuw i64 %395, 32
  %397 = zext i32 %380 to i64
  %398 = or i64 %396, %397
  %399 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %18, align 8
  %400 = getelementptr inbounds %"class.v8::internal::ZoneList.1145", %"class.v8::internal::ZoneList.1145"* %394, i64 0, i32 2
  %401 = load i32, i32* %400, align 4
  %402 = getelementptr inbounds %"class.v8::internal::ZoneList.1145", %"class.v8::internal::ZoneList.1145"* %394, i64 0, i32 1
  %403 = load i32, i32* %402, align 8
  %404 = icmp slt i32 %401, %403
  br i1 %404, label %405, label %412

405:                                              ; preds = %393
  %406 = getelementptr inbounds %"class.v8::internal::ZoneList.1145", %"class.v8::internal::ZoneList.1145"* %394, i64 0, i32 0
  %407 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %406, align 8
  %408 = add nsw i32 %401, 1
  store i32 %408, i32* %400, align 4
  %409 = sext i32 %401 to i64
  %410 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %407, i64 %409
  %411 = bitcast %"class.v8::internal::CharacterRange"* %410 to i64*
  store i64 %398, i64* %411, align 4
  br label %513

412:                                              ; preds = %393
  %413 = shl nsw i32 %403, 1
  %414 = or i32 %413, 1
  %415 = sext i32 %414 to i64
  %416 = shl nsw i64 %415, 3
  %417 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %399, i64 0, i32 2
  %418 = load i64, i64* %417, align 8
  %419 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %399, i64 0, i32 3
  %420 = load i64, i64* %419, align 8
  %421 = sub i64 %420, %418
  %422 = icmp ugt i64 %416, %421
  br i1 %422, label %423, label %425, !prof !3

423:                                              ; preds = %412
  %424 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %399, i64 %416) #13
  br label %427

425:                                              ; preds = %412
  %426 = add i64 %418, %416
  store i64 %426, i64* %417, align 8
  br label %427

427:                                              ; preds = %425, %423
  %428 = phi i64 [ %424, %423 ], [ %418, %425 ]
  %429 = inttoptr i64 %428 to %"class.v8::internal::CharacterRange"*
  %430 = load i32, i32* %400, align 4
  %431 = icmp sgt i32 %430, 0
  br i1 %431, label %432, label %444

432:                                              ; preds = %427
  %433 = inttoptr i64 %428 to i8*
  %434 = bitcast %"class.v8::internal::ZoneList.1145"* %394 to i8**
  %435 = load i8*, i8** %434, align 8
  %436 = sext i32 %430 to i64
  %437 = shl nsw i64 %436, 3
  switch i64 %437, label %443 [
    i64 16, label %442
    i64 8, label %438
  ]

438:                                              ; preds = %432
  %439 = bitcast i8* %435 to i64*
  %440 = inttoptr i64 %428 to i64*
  %441 = load i64, i64* %439, align 1
  store i64 %441, i64* %440, align 1
  br label %444

442:                                              ; preds = %432
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %433, i8* align 1 %435, i64 16, i1 false) #13
  br label %444

443:                                              ; preds = %432
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %433, i8* align 1 %435, i64 %437, i1 false) #13
  br label %444

444:                                              ; preds = %443, %442, %438, %427
  %445 = getelementptr inbounds %"class.v8::internal::ZoneList.1145", %"class.v8::internal::ZoneList.1145"* %394, i64 0, i32 0
  store %"class.v8::internal::CharacterRange"* %429, %"class.v8::internal::CharacterRange"** %445, align 8
  store i32 %414, i32* %402, align 8
  %446 = load i32, i32* %400, align 4
  %447 = add nsw i32 %446, 1
  store i32 %447, i32* %400, align 4
  %448 = sext i32 %446 to i64
  %449 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %429, i64 %448
  %450 = bitcast %"class.v8::internal::CharacterRange"* %449 to i64*
  store i64 %398, i64* %450, align 4
  br label %513

451:                                              ; preds = %73
  %452 = load i8, i8* %6, align 1, !range !2
  %453 = icmp eq i8 %452, 0
  br i1 %453, label %454, label %513

454:                                              ; preds = %451
  %455 = load %"class.v8::internal::ZoneList.1145"*, %"class.v8::internal::ZoneList.1145"** %3, align 8
  %456 = load i32, i32* %4, align 4
  %457 = zext i32 %456 to i64
  %458 = shl nuw i64 %457, 32
  %459 = or i64 %458, %457
  %460 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %18, align 8
  %461 = getelementptr inbounds %"class.v8::internal::ZoneList.1145", %"class.v8::internal::ZoneList.1145"* %455, i64 0, i32 2
  %462 = load i32, i32* %461, align 4
  %463 = getelementptr inbounds %"class.v8::internal::ZoneList.1145", %"class.v8::internal::ZoneList.1145"* %455, i64 0, i32 1
  %464 = load i32, i32* %463, align 8
  %465 = icmp slt i32 %462, %464
  br i1 %465, label %466, label %473

466:                                              ; preds = %454
  %467 = getelementptr inbounds %"class.v8::internal::ZoneList.1145", %"class.v8::internal::ZoneList.1145"* %455, i64 0, i32 0
  %468 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %467, align 8
  %469 = add nsw i32 %462, 1
  store i32 %469, i32* %461, align 4
  %470 = sext i32 %462 to i64
  %471 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %468, i64 %470
  %472 = bitcast %"class.v8::internal::CharacterRange"* %471 to i64*
  store i64 %459, i64* %472, align 4
  br label %513

473:                                              ; preds = %454
  %474 = shl nsw i32 %464, 1
  %475 = or i32 %474, 1
  %476 = sext i32 %475 to i64
  %477 = shl nsw i64 %476, 3
  %478 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %460, i64 0, i32 2
  %479 = load i64, i64* %478, align 8
  %480 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %460, i64 0, i32 3
  %481 = load i64, i64* %480, align 8
  %482 = sub i64 %481, %479
  %483 = icmp ugt i64 %477, %482
  br i1 %483, label %484, label %486, !prof !3

484:                                              ; preds = %473
  %485 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %460, i64 %477) #13
  br label %488

486:                                              ; preds = %473
  %487 = add i64 %479, %477
  store i64 %487, i64* %478, align 8
  br label %488

488:                                              ; preds = %486, %484
  %489 = phi i64 [ %485, %484 ], [ %479, %486 ]
  %490 = inttoptr i64 %489 to %"class.v8::internal::CharacterRange"*
  %491 = load i32, i32* %461, align 4
  %492 = icmp sgt i32 %491, 0
  br i1 %492, label %493, label %505

493:                                              ; preds = %488
  %494 = inttoptr i64 %489 to i8*
  %495 = bitcast %"class.v8::internal::ZoneList.1145"* %455 to i8**
  %496 = load i8*, i8** %495, align 8
  %497 = sext i32 %491 to i64
  %498 = shl nsw i64 %497, 3
  switch i64 %498, label %504 [
    i64 16, label %503
    i64 8, label %499
  ]

499:                                              ; preds = %493
  %500 = bitcast i8* %496 to i64*
  %501 = inttoptr i64 %489 to i64*
  %502 = load i64, i64* %500, align 1
  store i64 %502, i64* %501, align 1
  br label %505

503:                                              ; preds = %493
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %494, i8* align 1 %496, i64 16, i1 false) #13
  br label %505

504:                                              ; preds = %493
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %494, i8* align 1 %496, i64 %498, i1 false) #13
  br label %505

505:                                              ; preds = %504, %503, %499, %488
  %506 = getelementptr inbounds %"class.v8::internal::ZoneList.1145", %"class.v8::internal::ZoneList.1145"* %455, i64 0, i32 0
  store %"class.v8::internal::CharacterRange"* %490, %"class.v8::internal::CharacterRange"** %506, align 8
  store i32 %475, i32* %463, align 8
  %507 = load i32, i32* %461, align 4
  %508 = add nsw i32 %507, 1
  store i32 %508, i32* %461, align 4
  %509 = sext i32 %507 to i64
  %510 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %490, i64 %509
  %511 = bitcast %"class.v8::internal::CharacterRange"* %510 to i64*
  store i64 %459, i64* %511, align 4
  br label %513

512:                                              ; preds = %68, %184, %199, %383
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %7) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %6) #13
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %63) #13
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %62) #13
  br label %551

513:                                              ; preds = %505, %466, %444, %405, %372, %333, %451, %313
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %7) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %6) #13
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %63) #13
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %62) #13
  %514 = load i8, i8* %58, align 4, !range !2
  %515 = icmp eq i8 %514, 0
  br i1 %515, label %526, label %65

516:                                              ; preds = %181, %146
  %517 = phi i32 [ %142, %146 ], [ %183, %181 ]
  %518 = phi %"class.v8::internal::CharacterRange"* [ %148, %146 ], [ %166, %181 ]
  %519 = add nsw i32 %517, 1
  store i32 %519, i32* %141, align 4
  %520 = sext i32 %517 to i64
  %521 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %518, i64 %520
  %522 = bitcast %"class.v8::internal::CharacterRange"* %521 to i64*
  store i64 193273528365, i64* %522, align 4
  br label %523

523:                                              ; preds = %76, %516
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %7) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %6) #13
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %63) #13
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %62) #13
  %524 = load i8, i8* %58, align 4
  %525 = icmp eq i8 %524, 0
  br i1 %525, label %526, label %540

526:                                              ; preds = %513, %56, %523
  %527 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 18
  %528 = load i8, i8* %527, align 1, !range !2
  %529 = icmp eq i8 %528, 0
  br i1 %529, label %530, label %551

530:                                              ; preds = %526
  store i8 1, i8* %527, align 1
  %531 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 2
  store i32 29, i32* %531, align 8
  %532 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 10
  %533 = load i32, i32* %532, align 8
  %534 = add nsw i32 %533, -1
  %535 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 3
  store i32 %534, i32* %535, align 4
  store i32 2097152, i32* %11, align 8
  %536 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 7
  %537 = load %"class.v8::internal::FlatStringReader"*, %"class.v8::internal::FlatStringReader"** %536, align 8
  %538 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %537, i64 0, i32 3
  %539 = load i32, i32* %538, align 4
  store i32 %539, i32* %532, align 8
  br label %551

540:                                              ; preds = %65, %523
  tail call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0)
  %541 = bitcast %"class.v8::base::Flags.1146"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %541) #13
  %542 = getelementptr inbounds %"class.v8::base::Flags.1146", %"class.v8::base::Flags.1146"* %8, i64 0, i32 0
  store i32 %16, i32* %542, align 4
  %543 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %18, align 8
  %544 = bitcast %"class.v8::internal::Zone"** %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %544) #13
  store %"class.v8::internal::Zone"* %543, %"class.v8::internal::Zone"** %9, align 8
  %545 = bitcast %"class.v8::base::Flags"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %545) #13
  %546 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %1, i64 0, i32 2, i32 0
  %547 = load i32, i32* %546, align 4
  %548 = getelementptr inbounds %"class.v8::base::Flags", %"class.v8::base::Flags"* %10, i64 0, i32 0
  store i32 %547, i32* %548, align 4
  %549 = call %"class.v8::internal::RegExpCharacterClass"* @_ZN2v88internal4Zone3NewINS0_20RegExpCharacterClassEJPS1_RPNS0_8ZoneListINS0_14CharacterRangeEEENS_4base5FlagsINS0_8JSRegExp4FlagEiEERNSB_INS3_4FlagEiEEEEEPT_DpOT0_(%"class.v8::internal::Zone"* %543, %"class.v8::internal::Zone"** nonnull dereferenceable(8) %9, %"class.v8::internal::ZoneList.1145"** nonnull dereferenceable(8) %3, %"class.v8::base::Flags"* nonnull dereferenceable(4) %10, %"class.v8::base::Flags.1146"* nonnull dereferenceable(4) %8)
  %550 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %549, i64 0, i32 0
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %545) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %544) #13
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %541) #13
  br label %551

551:                                              ; preds = %530, %526, %512, %540
  %552 = phi %"class.v8::internal::RegExpTree"* [ %550, %540 ], [ null, %512 ], [ null, %526 ], [ null, %530 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #13
  ret %"class.v8::internal::RegExpTree"* %552
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2v88internal12RegExpParser22ParsePropertyClassNameEPNS0_10ZoneVectorIcEES4_(%"class.v8::internal::RegExpParser"*, %"class.v8::internal::ZoneVector.1147"*, %"class.v8::internal::ZoneVector.1147"*) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 8
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %5, 123
  br i1 %6, label %7, label %743

7:                                                ; preds = %3
  tail call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0)
  %8 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 10
  %9 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 7
  %10 = getelementptr inbounds %"class.v8::internal::ZoneVector.1147", %"class.v8::internal::ZoneVector.1147"* %1, i64 0, i32 0, i32 0, i32 1
  %11 = getelementptr inbounds %"class.v8::internal::ZoneVector.1147", %"class.v8::internal::ZoneVector.1147"* %1, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %12 = bitcast i8** %10 to i64*
  %13 = bitcast %"class.v8::internal::ZoneVector.1147"* %1 to i64*
  %14 = bitcast i8** %11 to i64*
  %15 = getelementptr inbounds %"class.v8::internal::ZoneVector.1147", %"class.v8::internal::ZoneVector.1147"* %1, i64 0, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %16 = getelementptr inbounds %"class.v8::internal::ZoneVector.1147", %"class.v8::internal::ZoneVector.1147"* %1, i64 0, i32 0, i32 0, i32 0
  br label %17

17:                                               ; preds = %202, %7
  %18 = load i32, i32* %4, align 8
  switch i32 %18, label %19 [
    i32 125, label %576
    i32 61, label %203
  ]

19:                                               ; preds = %17
  %20 = trunc i32 %18 to i8
  %21 = and i8 %20, -33
  %22 = add i8 %21, -65
  %23 = icmp ult i8 %22, 26
  br i1 %23, label %29, label %24

24:                                               ; preds = %19
  %25 = add i8 %20, -48
  %26 = icmp ult i8 %25, 10
  %27 = icmp eq i8 %20, 95
  %28 = or i1 %27, %26
  br i1 %28, label %29, label %743

29:                                               ; preds = %19, %24
  %30 = load i32, i32* %8, align 8
  %31 = load %"class.v8::internal::FlatStringReader"*, %"class.v8::internal::FlatStringReader"** %9, align 8
  %32 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %31, i64 0, i32 3
  %33 = load i32, i32* %32, align 4
  %34 = icmp slt i32 %30, %33
  br i1 %34, label %35, label %743

35:                                               ; preds = %29
  %36 = load i8*, i8** %10, align 8
  %37 = load i8*, i8** %11, align 8
  %38 = icmp ult i8* %36, %37
  %39 = ptrtoint i8* %37 to i64
  br i1 %38, label %40, label %43

40:                                               ; preds = %35
  store i8 %20, i8* %36, align 1
  %41 = getelementptr inbounds i8, i8* %36, i64 1
  %42 = ptrtoint i8* %41 to i64
  store i64 %42, i64* %12, align 8
  br label %202

43:                                               ; preds = %35
  %44 = ptrtoint i8* %36 to i64
  %45 = load i64, i64* %13, align 8
  %46 = sub i64 %44, %45
  %47 = add i64 %46, 1
  %48 = icmp ugt i64 %47, 2147483647
  br i1 %48, label %49, label %51

49:                                               ; preds = %43
  %50 = bitcast %"class.v8::internal::ZoneVector.1147"* %1 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %50) #14
  unreachable

51:                                               ; preds = %43
  %52 = sub i64 %39, %45
  %53 = icmp ult i64 %52, 1073741823
  br i1 %53, label %54, label %59

54:                                               ; preds = %51
  %55 = shl i64 %52, 1
  %56 = icmp ult i64 %55, %47
  %57 = select i1 %56, i64 %47, i64 %55
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %77, label %59

59:                                               ; preds = %54, %51
  %60 = phi i64 [ %57, %54 ], [ 2147483647, %51 ]
  %61 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %15, align 8
  %62 = add nuw nsw i64 %60, 7
  %63 = and i64 %62, -8
  %64 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %61, i64 0, i32 2
  %65 = load i64, i64* %64, align 8
  %66 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %61, i64 0, i32 3
  %67 = load i64, i64* %66, align 8
  %68 = sub i64 %67, %65
  %69 = icmp ugt i64 %63, %68
  br i1 %69, label %70, label %72, !prof !3

70:                                               ; preds = %59
  %71 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %61, i64 %63) #13
  br label %74

72:                                               ; preds = %59
  %73 = add i64 %65, %63
  store i64 %73, i64* %64, align 8
  br label %74

74:                                               ; preds = %72, %70
  %75 = phi i64 [ %71, %70 ], [ %65, %72 ]
  %76 = inttoptr i64 %75 to i8*
  br label %77

77:                                               ; preds = %74, %54
  %78 = phi i64 [ %60, %74 ], [ 0, %54 ]
  %79 = phi i8* [ %76, %74 ], [ null, %54 ]
  %80 = getelementptr inbounds i8, i8* %79, i64 %46
  %81 = getelementptr inbounds i8, i8* %79, i64 %78
  %82 = ptrtoint i8* %81 to i64
  store i8 %20, i8* %80, align 1
  %83 = getelementptr inbounds i8, i8* %80, i64 1
  %84 = ptrtoint i8* %83 to i64
  %85 = load i8*, i8** %16, align 8
  %86 = load i8*, i8** %10, align 8
  %87 = ptrtoint i8* %86 to i64
  %88 = icmp eq i8* %86, %85
  br i1 %88, label %199, label %89

89:                                               ; preds = %77
  %90 = ptrtoint i8* %85 to i64
  %91 = ptrtoint i8* %86 to i64
  %92 = sub i64 %91, %90
  %93 = icmp ult i64 %92, 16
  br i1 %93, label %189, label %94

94:                                               ; preds = %89
  %95 = sub i64 %44, %87
  %96 = sub i64 %95, %45
  %97 = getelementptr i8, i8* %85, i64 %96
  %98 = ptrtoint i8* %97 to i64
  %99 = getelementptr i8, i8* %79, i64 %98
  %100 = icmp ult i8* %99, %86
  %101 = icmp ult i8* %85, %80
  %102 = and i1 %100, %101
  br i1 %102, label %189, label %103

103:                                              ; preds = %94
  %104 = and i64 %92, -16
  %105 = sub i64 0, %104
  %106 = getelementptr i8, i8* %80, i64 %105
  %107 = sub i64 0, %104
  %108 = getelementptr i8, i8* %86, i64 %107
  %109 = add i64 %104, -16
  %110 = lshr exact i64 %109, 4
  %111 = add nuw nsw i64 %110, 1
  %112 = and i64 %111, 3
  %113 = icmp ult i64 %109, 48
  br i1 %113, label %166, label %114

114:                                              ; preds = %103
  %115 = sub nsw i64 %111, %112
  %116 = getelementptr i8, i8* %80, i64 -1
  %117 = getelementptr inbounds i8, i8* %116, i64 -8
  %118 = getelementptr inbounds i8, i8* %86, i64 -16
  %119 = getelementptr inbounds i8, i8* %117, i64 -7
  %120 = getelementptr i8, i8* %80, i64 -1
  %121 = getelementptr inbounds i8, i8* %120, i64 -8
  %122 = getelementptr inbounds i8, i8* %86, i64 -16
  %123 = getelementptr inbounds i8, i8* %121, i64 -7
  %124 = getelementptr i8, i8* %80, i64 -1
  %125 = getelementptr inbounds i8, i8* %124, i64 -8
  %126 = getelementptr inbounds i8, i8* %86, i64 -16
  %127 = getelementptr inbounds i8, i8* %125, i64 -7
  %128 = getelementptr i8, i8* %80, i64 -1
  %129 = getelementptr inbounds i8, i8* %128, i64 -8
  %130 = getelementptr inbounds i8, i8* %86, i64 -16
  %131 = getelementptr inbounds i8, i8* %129, i64 -7
  br label %132

132:                                              ; preds = %132, %114
  %133 = phi i64 [ 0, %114 ], [ %163, %132 ]
  %134 = phi i64 [ %115, %114 ], [ %164, %132 ]
  %135 = sub i64 0, %133
  %136 = sub i64 0, %133
  %137 = getelementptr inbounds i8, i8* %118, i64 %136
  %138 = bitcast i8* %137 to <2 x i64>*
  %139 = load <2 x i64>, <2 x i64>* %138, align 1, !alias.scope !4
  %140 = getelementptr inbounds i8, i8* %119, i64 %135
  %141 = bitcast i8* %140 to <2 x i64>*
  store <2 x i64> %139, <2 x i64>* %141, align 1, !alias.scope !7, !noalias !4
  %142 = sub nuw nsw i64 -16, %133
  %143 = sub nuw nsw i64 -16, %133
  %144 = getelementptr inbounds i8, i8* %122, i64 %143
  %145 = bitcast i8* %144 to <2 x i64>*
  %146 = load <2 x i64>, <2 x i64>* %145, align 1, !alias.scope !4
  %147 = getelementptr inbounds i8, i8* %123, i64 %142
  %148 = bitcast i8* %147 to <2 x i64>*
  store <2 x i64> %146, <2 x i64>* %148, align 1, !alias.scope !7, !noalias !4
  %149 = sub nuw nsw i64 -32, %133
  %150 = sub nuw nsw i64 -32, %133
  %151 = getelementptr inbounds i8, i8* %126, i64 %150
  %152 = bitcast i8* %151 to <2 x i64>*
  %153 = load <2 x i64>, <2 x i64>* %152, align 1, !alias.scope !4
  %154 = getelementptr inbounds i8, i8* %127, i64 %149
  %155 = bitcast i8* %154 to <2 x i64>*
  store <2 x i64> %153, <2 x i64>* %155, align 1, !alias.scope !7, !noalias !4
  %156 = sub nuw nsw i64 -48, %133
  %157 = sub nuw nsw i64 -48, %133
  %158 = getelementptr inbounds i8, i8* %130, i64 %157
  %159 = bitcast i8* %158 to <2 x i64>*
  %160 = load <2 x i64>, <2 x i64>* %159, align 1, !alias.scope !4
  %161 = getelementptr inbounds i8, i8* %131, i64 %156
  %162 = bitcast i8* %161 to <2 x i64>*
  store <2 x i64> %160, <2 x i64>* %162, align 1, !alias.scope !7, !noalias !4
  %163 = add i64 %133, 64
  %164 = add i64 %134, -4
  %165 = icmp eq i64 %164, 0
  br i1 %165, label %166, label %132, !llvm.loop !9

166:                                              ; preds = %132, %103
  %167 = phi i64 [ 0, %103 ], [ %163, %132 ]
  %168 = icmp eq i64 %112, 0
  br i1 %168, label %187, label %169

169:                                              ; preds = %166
  %170 = getelementptr i8, i8* %80, i64 -1
  %171 = getelementptr inbounds i8, i8* %170, i64 -8
  %172 = getelementptr inbounds i8, i8* %86, i64 -16
  %173 = getelementptr inbounds i8, i8* %171, i64 -7
  br label %174

174:                                              ; preds = %174, %169
  %175 = phi i64 [ %167, %169 ], [ %184, %174 ]
  %176 = phi i64 [ %112, %169 ], [ %185, %174 ]
  %177 = sub i64 0, %175
  %178 = sub i64 0, %175
  %179 = getelementptr inbounds i8, i8* %172, i64 %178
  %180 = bitcast i8* %179 to <2 x i64>*
  %181 = load <2 x i64>, <2 x i64>* %180, align 1, !alias.scope !4
  %182 = getelementptr inbounds i8, i8* %173, i64 %177
  %183 = bitcast i8* %182 to <2 x i64>*
  store <2 x i64> %181, <2 x i64>* %183, align 1, !alias.scope !7, !noalias !4
  %184 = add i64 %175, 16
  %185 = add i64 %176, -1
  %186 = icmp eq i64 %185, 0
  br i1 %186, label %187, label %174, !llvm.loop !11

187:                                              ; preds = %174, %166
  %188 = icmp eq i64 %92, %104
  br i1 %188, label %199, label %189

189:                                              ; preds = %187, %94, %89
  %190 = phi i8* [ %80, %94 ], [ %80, %89 ], [ %106, %187 ]
  %191 = phi i8* [ %86, %94 ], [ %86, %89 ], [ %108, %187 ]
  br label %192

192:                                              ; preds = %189, %192
  %193 = phi i8* [ %195, %192 ], [ %190, %189 ]
  %194 = phi i8* [ %196, %192 ], [ %191, %189 ]
  %195 = getelementptr inbounds i8, i8* %193, i64 -1
  %196 = getelementptr inbounds i8, i8* %194, i64 -1
  %197 = load i8, i8* %196, align 1
  store i8 %197, i8* %195, align 1
  %198 = icmp eq i8* %196, %85
  br i1 %198, label %199, label %192, !llvm.loop !13

199:                                              ; preds = %192, %187, %77
  %200 = phi i8* [ %80, %77 ], [ %106, %187 ], [ %195, %192 ]
  %201 = ptrtoint i8* %200 to i64
  store i64 %201, i64* %13, align 8
  store i64 %84, i64* %12, align 8
  store i64 %82, i64* %14, align 8
  br label %202

202:                                              ; preds = %40, %199
  tail call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0)
  br label %17

203:                                              ; preds = %17
  tail call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0)
  %204 = load i32, i32* %4, align 8
  %205 = icmp eq i32 %204, 125
  br i1 %205, label %401, label %206

206:                                              ; preds = %203
  %207 = getelementptr inbounds %"class.v8::internal::ZoneVector.1147", %"class.v8::internal::ZoneVector.1147"* %2, i64 0, i32 0, i32 0, i32 1
  %208 = getelementptr inbounds %"class.v8::internal::ZoneVector.1147", %"class.v8::internal::ZoneVector.1147"* %2, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %209 = bitcast i8** %207 to i64*
  %210 = bitcast %"class.v8::internal::ZoneVector.1147"* %2 to i64*
  %211 = bitcast i8** %208 to i64*
  %212 = getelementptr inbounds %"class.v8::internal::ZoneVector.1147", %"class.v8::internal::ZoneVector.1147"* %2, i64 0, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %213 = getelementptr inbounds %"class.v8::internal::ZoneVector.1147", %"class.v8::internal::ZoneVector.1147"* %2, i64 0, i32 0, i32 0, i32 0
  br label %214

214:                                              ; preds = %206, %398
  %215 = phi i32 [ %204, %206 ], [ %399, %398 ]
  %216 = trunc i32 %215 to i8
  %217 = and i8 %216, -33
  %218 = add i8 %217, -65
  %219 = icmp ult i8 %218, 26
  br i1 %219, label %225, label %220

220:                                              ; preds = %214
  %221 = add i8 %216, -48
  %222 = icmp ult i8 %221, 10
  %223 = icmp eq i8 %216, 95
  %224 = or i1 %223, %222
  br i1 %224, label %225, label %743

225:                                              ; preds = %214, %220
  %226 = load i32, i32* %8, align 8
  %227 = load %"class.v8::internal::FlatStringReader"*, %"class.v8::internal::FlatStringReader"** %9, align 8
  %228 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %227, i64 0, i32 3
  %229 = load i32, i32* %228, align 4
  %230 = icmp slt i32 %226, %229
  br i1 %230, label %231, label %743

231:                                              ; preds = %225
  %232 = load i8*, i8** %207, align 8
  %233 = load i8*, i8** %208, align 8
  %234 = icmp ult i8* %232, %233
  %235 = ptrtoint i8* %233 to i64
  br i1 %234, label %236, label %239

236:                                              ; preds = %231
  store i8 %216, i8* %232, align 1
  %237 = getelementptr inbounds i8, i8* %232, i64 1
  %238 = ptrtoint i8* %237 to i64
  store i64 %238, i64* %209, align 8
  br label %398

239:                                              ; preds = %231
  %240 = ptrtoint i8* %232 to i64
  %241 = load i64, i64* %210, align 8
  %242 = sub i64 %240, %241
  %243 = add i64 %242, 1
  %244 = icmp ugt i64 %243, 2147483647
  br i1 %244, label %245, label %247

245:                                              ; preds = %239
  %246 = bitcast %"class.v8::internal::ZoneVector.1147"* %2 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %246) #14
  unreachable

247:                                              ; preds = %239
  %248 = sub i64 %235, %241
  %249 = icmp ult i64 %248, 1073741823
  br i1 %249, label %250, label %255

250:                                              ; preds = %247
  %251 = shl i64 %248, 1
  %252 = icmp ult i64 %251, %243
  %253 = select i1 %252, i64 %243, i64 %251
  %254 = icmp eq i64 %253, 0
  br i1 %254, label %273, label %255

255:                                              ; preds = %250, %247
  %256 = phi i64 [ %253, %250 ], [ 2147483647, %247 ]
  %257 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %212, align 8
  %258 = add nuw nsw i64 %256, 7
  %259 = and i64 %258, -8
  %260 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %257, i64 0, i32 2
  %261 = load i64, i64* %260, align 8
  %262 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %257, i64 0, i32 3
  %263 = load i64, i64* %262, align 8
  %264 = sub i64 %263, %261
  %265 = icmp ugt i64 %259, %264
  br i1 %265, label %266, label %268, !prof !3

266:                                              ; preds = %255
  %267 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %257, i64 %259) #13
  br label %270

268:                                              ; preds = %255
  %269 = add i64 %261, %259
  store i64 %269, i64* %260, align 8
  br label %270

270:                                              ; preds = %268, %266
  %271 = phi i64 [ %267, %266 ], [ %261, %268 ]
  %272 = inttoptr i64 %271 to i8*
  br label %273

273:                                              ; preds = %270, %250
  %274 = phi i64 [ %256, %270 ], [ 0, %250 ]
  %275 = phi i8* [ %272, %270 ], [ null, %250 ]
  %276 = getelementptr inbounds i8, i8* %275, i64 %242
  %277 = getelementptr inbounds i8, i8* %275, i64 %274
  %278 = ptrtoint i8* %277 to i64
  store i8 %216, i8* %276, align 1
  %279 = getelementptr inbounds i8, i8* %276, i64 1
  %280 = ptrtoint i8* %279 to i64
  %281 = load i8*, i8** %213, align 8
  %282 = load i8*, i8** %207, align 8
  %283 = ptrtoint i8* %282 to i64
  %284 = icmp eq i8* %282, %281
  br i1 %284, label %395, label %285

285:                                              ; preds = %273
  %286 = ptrtoint i8* %281 to i64
  %287 = ptrtoint i8* %282 to i64
  %288 = sub i64 %287, %286
  %289 = icmp ult i64 %288, 16
  br i1 %289, label %385, label %290

290:                                              ; preds = %285
  %291 = sub i64 %240, %283
  %292 = sub i64 %291, %241
  %293 = getelementptr i8, i8* %281, i64 %292
  %294 = ptrtoint i8* %293 to i64
  %295 = getelementptr i8, i8* %275, i64 %294
  %296 = icmp ult i8* %295, %282
  %297 = icmp ult i8* %281, %276
  %298 = and i1 %296, %297
  br i1 %298, label %385, label %299

299:                                              ; preds = %290
  %300 = and i64 %288, -16
  %301 = sub i64 0, %300
  %302 = getelementptr i8, i8* %276, i64 %301
  %303 = sub i64 0, %300
  %304 = getelementptr i8, i8* %282, i64 %303
  %305 = add i64 %300, -16
  %306 = lshr exact i64 %305, 4
  %307 = add nuw nsw i64 %306, 1
  %308 = and i64 %307, 3
  %309 = icmp ult i64 %305, 48
  br i1 %309, label %362, label %310

310:                                              ; preds = %299
  %311 = sub nsw i64 %307, %308
  %312 = getelementptr i8, i8* %276, i64 -1
  %313 = getelementptr inbounds i8, i8* %312, i64 -8
  %314 = getelementptr inbounds i8, i8* %282, i64 -16
  %315 = getelementptr inbounds i8, i8* %313, i64 -7
  %316 = getelementptr i8, i8* %276, i64 -1
  %317 = getelementptr inbounds i8, i8* %316, i64 -8
  %318 = getelementptr inbounds i8, i8* %282, i64 -16
  %319 = getelementptr inbounds i8, i8* %317, i64 -7
  %320 = getelementptr i8, i8* %276, i64 -1
  %321 = getelementptr inbounds i8, i8* %320, i64 -8
  %322 = getelementptr inbounds i8, i8* %282, i64 -16
  %323 = getelementptr inbounds i8, i8* %321, i64 -7
  %324 = getelementptr i8, i8* %276, i64 -1
  %325 = getelementptr inbounds i8, i8* %324, i64 -8
  %326 = getelementptr inbounds i8, i8* %282, i64 -16
  %327 = getelementptr inbounds i8, i8* %325, i64 -7
  br label %328

328:                                              ; preds = %328, %310
  %329 = phi i64 [ 0, %310 ], [ %359, %328 ]
  %330 = phi i64 [ %311, %310 ], [ %360, %328 ]
  %331 = sub i64 0, %329
  %332 = sub i64 0, %329
  %333 = getelementptr inbounds i8, i8* %314, i64 %332
  %334 = bitcast i8* %333 to <2 x i64>*
  %335 = load <2 x i64>, <2 x i64>* %334, align 1, !alias.scope !14
  %336 = getelementptr inbounds i8, i8* %315, i64 %331
  %337 = bitcast i8* %336 to <2 x i64>*
  store <2 x i64> %335, <2 x i64>* %337, align 1, !alias.scope !17, !noalias !14
  %338 = sub nuw nsw i64 -16, %329
  %339 = sub nuw nsw i64 -16, %329
  %340 = getelementptr inbounds i8, i8* %318, i64 %339
  %341 = bitcast i8* %340 to <2 x i64>*
  %342 = load <2 x i64>, <2 x i64>* %341, align 1, !alias.scope !14
  %343 = getelementptr inbounds i8, i8* %319, i64 %338
  %344 = bitcast i8* %343 to <2 x i64>*
  store <2 x i64> %342, <2 x i64>* %344, align 1, !alias.scope !17, !noalias !14
  %345 = sub nuw nsw i64 -32, %329
  %346 = sub nuw nsw i64 -32, %329
  %347 = getelementptr inbounds i8, i8* %322, i64 %346
  %348 = bitcast i8* %347 to <2 x i64>*
  %349 = load <2 x i64>, <2 x i64>* %348, align 1, !alias.scope !14
  %350 = getelementptr inbounds i8, i8* %323, i64 %345
  %351 = bitcast i8* %350 to <2 x i64>*
  store <2 x i64> %349, <2 x i64>* %351, align 1, !alias.scope !17, !noalias !14
  %352 = sub nuw nsw i64 -48, %329
  %353 = sub nuw nsw i64 -48, %329
  %354 = getelementptr inbounds i8, i8* %326, i64 %353
  %355 = bitcast i8* %354 to <2 x i64>*
  %356 = load <2 x i64>, <2 x i64>* %355, align 1, !alias.scope !14
  %357 = getelementptr inbounds i8, i8* %327, i64 %352
  %358 = bitcast i8* %357 to <2 x i64>*
  store <2 x i64> %356, <2 x i64>* %358, align 1, !alias.scope !17, !noalias !14
  %359 = add i64 %329, 64
  %360 = add i64 %330, -4
  %361 = icmp eq i64 %360, 0
  br i1 %361, label %362, label %328, !llvm.loop !19

362:                                              ; preds = %328, %299
  %363 = phi i64 [ 0, %299 ], [ %359, %328 ]
  %364 = icmp eq i64 %308, 0
  br i1 %364, label %383, label %365

365:                                              ; preds = %362
  %366 = getelementptr i8, i8* %276, i64 -1
  %367 = getelementptr inbounds i8, i8* %366, i64 -8
  %368 = getelementptr inbounds i8, i8* %282, i64 -16
  %369 = getelementptr inbounds i8, i8* %367, i64 -7
  br label %370

370:                                              ; preds = %370, %365
  %371 = phi i64 [ %363, %365 ], [ %380, %370 ]
  %372 = phi i64 [ %308, %365 ], [ %381, %370 ]
  %373 = sub i64 0, %371
  %374 = sub i64 0, %371
  %375 = getelementptr inbounds i8, i8* %368, i64 %374
  %376 = bitcast i8* %375 to <2 x i64>*
  %377 = load <2 x i64>, <2 x i64>* %376, align 1, !alias.scope !14
  %378 = getelementptr inbounds i8, i8* %369, i64 %373
  %379 = bitcast i8* %378 to <2 x i64>*
  store <2 x i64> %377, <2 x i64>* %379, align 1, !alias.scope !17, !noalias !14
  %380 = add i64 %371, 16
  %381 = add i64 %372, -1
  %382 = icmp eq i64 %381, 0
  br i1 %382, label %383, label %370, !llvm.loop !20

383:                                              ; preds = %370, %362
  %384 = icmp eq i64 %288, %300
  br i1 %384, label %395, label %385

385:                                              ; preds = %383, %290, %285
  %386 = phi i8* [ %276, %290 ], [ %276, %285 ], [ %302, %383 ]
  %387 = phi i8* [ %282, %290 ], [ %282, %285 ], [ %304, %383 ]
  br label %388

388:                                              ; preds = %385, %388
  %389 = phi i8* [ %391, %388 ], [ %386, %385 ]
  %390 = phi i8* [ %392, %388 ], [ %387, %385 ]
  %391 = getelementptr inbounds i8, i8* %389, i64 -1
  %392 = getelementptr inbounds i8, i8* %390, i64 -1
  %393 = load i8, i8* %392, align 1
  store i8 %393, i8* %391, align 1
  %394 = icmp eq i8* %392, %281
  br i1 %394, label %395, label %388, !llvm.loop !21

395:                                              ; preds = %388, %383, %273
  %396 = phi i8* [ %276, %273 ], [ %302, %383 ], [ %391, %388 ]
  %397 = ptrtoint i8* %396 to i64
  store i64 %397, i64* %210, align 8
  store i64 %280, i64* %209, align 8
  store i64 %278, i64* %211, align 8
  br label %398

398:                                              ; preds = %236, %395
  tail call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0)
  %399 = load i32, i32* %4, align 8
  %400 = icmp eq i32 %399, 125
  br i1 %400, label %401, label %214

401:                                              ; preds = %398, %203
  %402 = getelementptr inbounds %"class.v8::internal::ZoneVector.1147", %"class.v8::internal::ZoneVector.1147"* %2, i64 0, i32 0, i32 0, i32 1
  %403 = load i8*, i8** %402, align 8
  %404 = getelementptr inbounds %"class.v8::internal::ZoneVector.1147", %"class.v8::internal::ZoneVector.1147"* %2, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %405 = load i8*, i8** %404, align 8
  %406 = icmp ult i8* %403, %405
  %407 = ptrtoint i8* %405 to i64
  br i1 %406, label %408, label %412

408:                                              ; preds = %401
  store i8 0, i8* %403, align 1
  %409 = getelementptr inbounds i8, i8* %403, i64 1
  %410 = ptrtoint i8* %409 to i64
  %411 = bitcast i8** %402 to i64*
  store i64 %410, i64* %411, align 8
  br label %576

412:                                              ; preds = %401
  %413 = ptrtoint i8* %403 to i64
  %414 = bitcast i8** %402 to i64*
  %415 = bitcast %"class.v8::internal::ZoneVector.1147"* %2 to i64*
  %416 = load i64, i64* %415, align 8
  %417 = sub i64 %413, %416
  %418 = add i64 %417, 1
  %419 = icmp ugt i64 %418, 2147483647
  br i1 %419, label %420, label %422

420:                                              ; preds = %412
  %421 = bitcast %"class.v8::internal::ZoneVector.1147"* %2 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %421) #14
  unreachable

422:                                              ; preds = %412
  %423 = bitcast i8** %404 to i64*
  %424 = sub i64 %407, %416
  %425 = icmp ult i64 %424, 1073741823
  br i1 %425, label %426, label %431

426:                                              ; preds = %422
  %427 = shl i64 %424, 1
  %428 = icmp ult i64 %427, %418
  %429 = select i1 %428, i64 %418, i64 %427
  %430 = icmp eq i64 %429, 0
  br i1 %430, label %450, label %431

431:                                              ; preds = %426, %422
  %432 = phi i64 [ %429, %426 ], [ 2147483647, %422 ]
  %433 = getelementptr inbounds %"class.v8::internal::ZoneVector.1147", %"class.v8::internal::ZoneVector.1147"* %2, i64 0, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %434 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %433, align 8
  %435 = add nuw nsw i64 %432, 7
  %436 = and i64 %435, -8
  %437 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %434, i64 0, i32 2
  %438 = load i64, i64* %437, align 8
  %439 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %434, i64 0, i32 3
  %440 = load i64, i64* %439, align 8
  %441 = sub i64 %440, %438
  %442 = icmp ugt i64 %436, %441
  br i1 %442, label %443, label %445, !prof !3

443:                                              ; preds = %431
  %444 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %434, i64 %436) #13
  br label %447

445:                                              ; preds = %431
  %446 = add i64 %438, %436
  store i64 %446, i64* %437, align 8
  br label %447

447:                                              ; preds = %445, %443
  %448 = phi i64 [ %444, %443 ], [ %438, %445 ]
  %449 = inttoptr i64 %448 to i8*
  br label %450

450:                                              ; preds = %447, %426
  %451 = phi i64 [ %432, %447 ], [ 0, %426 ]
  %452 = phi i8* [ %449, %447 ], [ null, %426 ]
  %453 = getelementptr inbounds i8, i8* %452, i64 %417
  %454 = getelementptr inbounds i8, i8* %452, i64 %451
  %455 = ptrtoint i8* %454 to i64
  store i8 0, i8* %453, align 1
  %456 = getelementptr inbounds i8, i8* %453, i64 1
  %457 = ptrtoint i8* %456 to i64
  %458 = getelementptr inbounds %"class.v8::internal::ZoneVector.1147", %"class.v8::internal::ZoneVector.1147"* %2, i64 0, i32 0, i32 0, i32 0
  %459 = load i8*, i8** %458, align 8
  %460 = load i8*, i8** %402, align 8
  %461 = ptrtoint i8* %460 to i64
  %462 = icmp eq i8* %460, %459
  br i1 %462, label %573, label %463

463:                                              ; preds = %450
  %464 = ptrtoint i8* %459 to i64
  %465 = ptrtoint i8* %460 to i64
  %466 = sub i64 %465, %464
  %467 = icmp ult i64 %466, 16
  br i1 %467, label %563, label %468

468:                                              ; preds = %463
  %469 = sub i64 %413, %461
  %470 = sub i64 %469, %416
  %471 = getelementptr i8, i8* %459, i64 %470
  %472 = ptrtoint i8* %471 to i64
  %473 = getelementptr i8, i8* %452, i64 %472
  %474 = icmp ult i8* %473, %460
  %475 = icmp ult i8* %459, %453
  %476 = and i1 %474, %475
  br i1 %476, label %563, label %477

477:                                              ; preds = %468
  %478 = and i64 %466, -16
  %479 = sub i64 0, %478
  %480 = getelementptr i8, i8* %453, i64 %479
  %481 = sub i64 0, %478
  %482 = getelementptr i8, i8* %460, i64 %481
  %483 = add i64 %478, -16
  %484 = lshr exact i64 %483, 4
  %485 = add nuw nsw i64 %484, 1
  %486 = and i64 %485, 3
  %487 = icmp ult i64 %483, 48
  br i1 %487, label %540, label %488

488:                                              ; preds = %477
  %489 = sub nsw i64 %485, %486
  %490 = getelementptr i8, i8* %453, i64 -1
  %491 = getelementptr inbounds i8, i8* %490, i64 -8
  %492 = getelementptr inbounds i8, i8* %460, i64 -16
  %493 = getelementptr inbounds i8, i8* %491, i64 -7
  %494 = getelementptr i8, i8* %453, i64 -1
  %495 = getelementptr inbounds i8, i8* %494, i64 -8
  %496 = getelementptr inbounds i8, i8* %460, i64 -16
  %497 = getelementptr inbounds i8, i8* %495, i64 -7
  %498 = getelementptr i8, i8* %453, i64 -1
  %499 = getelementptr inbounds i8, i8* %498, i64 -8
  %500 = getelementptr inbounds i8, i8* %460, i64 -16
  %501 = getelementptr inbounds i8, i8* %499, i64 -7
  %502 = getelementptr i8, i8* %453, i64 -1
  %503 = getelementptr inbounds i8, i8* %502, i64 -8
  %504 = getelementptr inbounds i8, i8* %460, i64 -16
  %505 = getelementptr inbounds i8, i8* %503, i64 -7
  br label %506

506:                                              ; preds = %506, %488
  %507 = phi i64 [ 0, %488 ], [ %537, %506 ]
  %508 = phi i64 [ %489, %488 ], [ %538, %506 ]
  %509 = sub i64 0, %507
  %510 = sub i64 0, %507
  %511 = getelementptr inbounds i8, i8* %492, i64 %510
  %512 = bitcast i8* %511 to <2 x i64>*
  %513 = load <2 x i64>, <2 x i64>* %512, align 1, !alias.scope !22
  %514 = getelementptr inbounds i8, i8* %493, i64 %509
  %515 = bitcast i8* %514 to <2 x i64>*
  store <2 x i64> %513, <2 x i64>* %515, align 1, !alias.scope !25, !noalias !22
  %516 = sub nuw nsw i64 -16, %507
  %517 = sub nuw nsw i64 -16, %507
  %518 = getelementptr inbounds i8, i8* %496, i64 %517
  %519 = bitcast i8* %518 to <2 x i64>*
  %520 = load <2 x i64>, <2 x i64>* %519, align 1, !alias.scope !22
  %521 = getelementptr inbounds i8, i8* %497, i64 %516
  %522 = bitcast i8* %521 to <2 x i64>*
  store <2 x i64> %520, <2 x i64>* %522, align 1, !alias.scope !25, !noalias !22
  %523 = sub nuw nsw i64 -32, %507
  %524 = sub nuw nsw i64 -32, %507
  %525 = getelementptr inbounds i8, i8* %500, i64 %524
  %526 = bitcast i8* %525 to <2 x i64>*
  %527 = load <2 x i64>, <2 x i64>* %526, align 1, !alias.scope !22
  %528 = getelementptr inbounds i8, i8* %501, i64 %523
  %529 = bitcast i8* %528 to <2 x i64>*
  store <2 x i64> %527, <2 x i64>* %529, align 1, !alias.scope !25, !noalias !22
  %530 = sub nuw nsw i64 -48, %507
  %531 = sub nuw nsw i64 -48, %507
  %532 = getelementptr inbounds i8, i8* %504, i64 %531
  %533 = bitcast i8* %532 to <2 x i64>*
  %534 = load <2 x i64>, <2 x i64>* %533, align 1, !alias.scope !22
  %535 = getelementptr inbounds i8, i8* %505, i64 %530
  %536 = bitcast i8* %535 to <2 x i64>*
  store <2 x i64> %534, <2 x i64>* %536, align 1, !alias.scope !25, !noalias !22
  %537 = add i64 %507, 64
  %538 = add i64 %508, -4
  %539 = icmp eq i64 %538, 0
  br i1 %539, label %540, label %506, !llvm.loop !27

540:                                              ; preds = %506, %477
  %541 = phi i64 [ 0, %477 ], [ %537, %506 ]
  %542 = icmp eq i64 %486, 0
  br i1 %542, label %561, label %543

543:                                              ; preds = %540
  %544 = getelementptr i8, i8* %453, i64 -1
  %545 = getelementptr inbounds i8, i8* %544, i64 -8
  %546 = getelementptr inbounds i8, i8* %460, i64 -16
  %547 = getelementptr inbounds i8, i8* %545, i64 -7
  br label %548

548:                                              ; preds = %548, %543
  %549 = phi i64 [ %541, %543 ], [ %558, %548 ]
  %550 = phi i64 [ %486, %543 ], [ %559, %548 ]
  %551 = sub i64 0, %549
  %552 = sub i64 0, %549
  %553 = getelementptr inbounds i8, i8* %546, i64 %552
  %554 = bitcast i8* %553 to <2 x i64>*
  %555 = load <2 x i64>, <2 x i64>* %554, align 1, !alias.scope !22
  %556 = getelementptr inbounds i8, i8* %547, i64 %551
  %557 = bitcast i8* %556 to <2 x i64>*
  store <2 x i64> %555, <2 x i64>* %557, align 1, !alias.scope !25, !noalias !22
  %558 = add i64 %549, 16
  %559 = add i64 %550, -1
  %560 = icmp eq i64 %559, 0
  br i1 %560, label %561, label %548, !llvm.loop !28

561:                                              ; preds = %548, %540
  %562 = icmp eq i64 %466, %478
  br i1 %562, label %573, label %563

563:                                              ; preds = %561, %468, %463
  %564 = phi i8* [ %453, %468 ], [ %453, %463 ], [ %480, %561 ]
  %565 = phi i8* [ %460, %468 ], [ %460, %463 ], [ %482, %561 ]
  br label %566

566:                                              ; preds = %563, %566
  %567 = phi i8* [ %569, %566 ], [ %564, %563 ]
  %568 = phi i8* [ %570, %566 ], [ %565, %563 ]
  %569 = getelementptr inbounds i8, i8* %567, i64 -1
  %570 = getelementptr inbounds i8, i8* %568, i64 -1
  %571 = load i8, i8* %570, align 1
  store i8 %571, i8* %569, align 1
  %572 = icmp eq i8* %570, %459
  br i1 %572, label %573, label %566, !llvm.loop !29

573:                                              ; preds = %566, %561, %450
  %574 = phi i8* [ %453, %450 ], [ %480, %561 ], [ %569, %566 ]
  %575 = ptrtoint i8* %574 to i64
  store i64 %575, i64* %415, align 8
  store i64 %457, i64* %414, align 8
  store i64 %455, i64* %423, align 8
  br label %576

576:                                              ; preds = %17, %573, %408
  tail call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0)
  %577 = load i8*, i8** %10, align 8
  %578 = load i8*, i8** %11, align 8
  %579 = icmp ult i8* %577, %578
  %580 = ptrtoint i8* %578 to i64
  br i1 %579, label %581, label %584

581:                                              ; preds = %576
  store i8 0, i8* %577, align 1
  %582 = getelementptr inbounds i8, i8* %577, i64 1
  %583 = ptrtoint i8* %582 to i64
  store i64 %583, i64* %12, align 8
  br label %743

584:                                              ; preds = %576
  %585 = ptrtoint i8* %577 to i64
  %586 = load i64, i64* %13, align 8
  %587 = sub i64 %585, %586
  %588 = add i64 %587, 1
  %589 = icmp ugt i64 %588, 2147483647
  br i1 %589, label %590, label %592

590:                                              ; preds = %584
  %591 = bitcast %"class.v8::internal::ZoneVector.1147"* %1 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %591) #14
  unreachable

592:                                              ; preds = %584
  %593 = sub i64 %580, %586
  %594 = icmp ult i64 %593, 1073741823
  br i1 %594, label %595, label %600

595:                                              ; preds = %592
  %596 = shl i64 %593, 1
  %597 = icmp ult i64 %596, %588
  %598 = select i1 %597, i64 %588, i64 %596
  %599 = icmp eq i64 %598, 0
  br i1 %599, label %618, label %600

600:                                              ; preds = %595, %592
  %601 = phi i64 [ %598, %595 ], [ 2147483647, %592 ]
  %602 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %15, align 8
  %603 = add nuw nsw i64 %601, 7
  %604 = and i64 %603, -8
  %605 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %602, i64 0, i32 2
  %606 = load i64, i64* %605, align 8
  %607 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %602, i64 0, i32 3
  %608 = load i64, i64* %607, align 8
  %609 = sub i64 %608, %606
  %610 = icmp ugt i64 %604, %609
  br i1 %610, label %611, label %613, !prof !3

611:                                              ; preds = %600
  %612 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %602, i64 %604) #13
  br label %615

613:                                              ; preds = %600
  %614 = add i64 %606, %604
  store i64 %614, i64* %605, align 8
  br label %615

615:                                              ; preds = %613, %611
  %616 = phi i64 [ %612, %611 ], [ %606, %613 ]
  %617 = inttoptr i64 %616 to i8*
  br label %618

618:                                              ; preds = %615, %595
  %619 = phi i64 [ %601, %615 ], [ 0, %595 ]
  %620 = phi i8* [ %617, %615 ], [ null, %595 ]
  %621 = getelementptr inbounds i8, i8* %620, i64 %587
  %622 = getelementptr inbounds i8, i8* %620, i64 %619
  %623 = ptrtoint i8* %622 to i64
  store i8 0, i8* %621, align 1
  %624 = getelementptr inbounds i8, i8* %621, i64 1
  %625 = ptrtoint i8* %624 to i64
  %626 = load i8*, i8** %16, align 8
  %627 = load i8*, i8** %10, align 8
  %628 = ptrtoint i8* %627 to i64
  %629 = icmp eq i8* %627, %626
  br i1 %629, label %740, label %630

630:                                              ; preds = %618
  %631 = ptrtoint i8* %626 to i64
  %632 = ptrtoint i8* %627 to i64
  %633 = sub i64 %632, %631
  %634 = icmp ult i64 %633, 16
  br i1 %634, label %730, label %635

635:                                              ; preds = %630
  %636 = sub i64 %585, %628
  %637 = sub i64 %636, %586
  %638 = getelementptr i8, i8* %626, i64 %637
  %639 = ptrtoint i8* %638 to i64
  %640 = getelementptr i8, i8* %620, i64 %639
  %641 = icmp ult i8* %640, %627
  %642 = icmp ult i8* %626, %621
  %643 = and i1 %641, %642
  br i1 %643, label %730, label %644

644:                                              ; preds = %635
  %645 = and i64 %633, -16
  %646 = sub i64 0, %645
  %647 = getelementptr i8, i8* %621, i64 %646
  %648 = sub i64 0, %645
  %649 = getelementptr i8, i8* %627, i64 %648
  %650 = add i64 %645, -16
  %651 = lshr exact i64 %650, 4
  %652 = add nuw nsw i64 %651, 1
  %653 = and i64 %652, 3
  %654 = icmp ult i64 %650, 48
  br i1 %654, label %707, label %655

655:                                              ; preds = %644
  %656 = sub nsw i64 %652, %653
  %657 = getelementptr i8, i8* %621, i64 -1
  %658 = getelementptr inbounds i8, i8* %657, i64 -8
  %659 = getelementptr inbounds i8, i8* %627, i64 -16
  %660 = getelementptr inbounds i8, i8* %658, i64 -7
  %661 = getelementptr i8, i8* %621, i64 -1
  %662 = getelementptr inbounds i8, i8* %661, i64 -8
  %663 = getelementptr inbounds i8, i8* %627, i64 -16
  %664 = getelementptr inbounds i8, i8* %662, i64 -7
  %665 = getelementptr i8, i8* %621, i64 -1
  %666 = getelementptr inbounds i8, i8* %665, i64 -8
  %667 = getelementptr inbounds i8, i8* %627, i64 -16
  %668 = getelementptr inbounds i8, i8* %666, i64 -7
  %669 = getelementptr i8, i8* %621, i64 -1
  %670 = getelementptr inbounds i8, i8* %669, i64 -8
  %671 = getelementptr inbounds i8, i8* %627, i64 -16
  %672 = getelementptr inbounds i8, i8* %670, i64 -7
  br label %673

673:                                              ; preds = %673, %655
  %674 = phi i64 [ 0, %655 ], [ %704, %673 ]
  %675 = phi i64 [ %656, %655 ], [ %705, %673 ]
  %676 = sub i64 0, %674
  %677 = sub i64 0, %674
  %678 = getelementptr inbounds i8, i8* %659, i64 %677
  %679 = bitcast i8* %678 to <2 x i64>*
  %680 = load <2 x i64>, <2 x i64>* %679, align 1, !alias.scope !30
  %681 = getelementptr inbounds i8, i8* %660, i64 %676
  %682 = bitcast i8* %681 to <2 x i64>*
  store <2 x i64> %680, <2 x i64>* %682, align 1, !alias.scope !33, !noalias !30
  %683 = sub nuw nsw i64 -16, %674
  %684 = sub nuw nsw i64 -16, %674
  %685 = getelementptr inbounds i8, i8* %663, i64 %684
  %686 = bitcast i8* %685 to <2 x i64>*
  %687 = load <2 x i64>, <2 x i64>* %686, align 1, !alias.scope !30
  %688 = getelementptr inbounds i8, i8* %664, i64 %683
  %689 = bitcast i8* %688 to <2 x i64>*
  store <2 x i64> %687, <2 x i64>* %689, align 1, !alias.scope !33, !noalias !30
  %690 = sub nuw nsw i64 -32, %674
  %691 = sub nuw nsw i64 -32, %674
  %692 = getelementptr inbounds i8, i8* %667, i64 %691
  %693 = bitcast i8* %692 to <2 x i64>*
  %694 = load <2 x i64>, <2 x i64>* %693, align 1, !alias.scope !30
  %695 = getelementptr inbounds i8, i8* %668, i64 %690
  %696 = bitcast i8* %695 to <2 x i64>*
  store <2 x i64> %694, <2 x i64>* %696, align 1, !alias.scope !33, !noalias !30
  %697 = sub nuw nsw i64 -48, %674
  %698 = sub nuw nsw i64 -48, %674
  %699 = getelementptr inbounds i8, i8* %671, i64 %698
  %700 = bitcast i8* %699 to <2 x i64>*
  %701 = load <2 x i64>, <2 x i64>* %700, align 1, !alias.scope !30
  %702 = getelementptr inbounds i8, i8* %672, i64 %697
  %703 = bitcast i8* %702 to <2 x i64>*
  store <2 x i64> %701, <2 x i64>* %703, align 1, !alias.scope !33, !noalias !30
  %704 = add i64 %674, 64
  %705 = add i64 %675, -4
  %706 = icmp eq i64 %705, 0
  br i1 %706, label %707, label %673, !llvm.loop !35

707:                                              ; preds = %673, %644
  %708 = phi i64 [ 0, %644 ], [ %704, %673 ]
  %709 = icmp eq i64 %653, 0
  br i1 %709, label %728, label %710

710:                                              ; preds = %707
  %711 = getelementptr i8, i8* %621, i64 -1
  %712 = getelementptr inbounds i8, i8* %711, i64 -8
  %713 = getelementptr inbounds i8, i8* %627, i64 -16
  %714 = getelementptr inbounds i8, i8* %712, i64 -7
  br label %715

715:                                              ; preds = %715, %710
  %716 = phi i64 [ %708, %710 ], [ %725, %715 ]
  %717 = phi i64 [ %653, %710 ], [ %726, %715 ]
  %718 = sub i64 0, %716
  %719 = sub i64 0, %716
  %720 = getelementptr inbounds i8, i8* %713, i64 %719
  %721 = bitcast i8* %720 to <2 x i64>*
  %722 = load <2 x i64>, <2 x i64>* %721, align 1, !alias.scope !30
  %723 = getelementptr inbounds i8, i8* %714, i64 %718
  %724 = bitcast i8* %723 to <2 x i64>*
  store <2 x i64> %722, <2 x i64>* %724, align 1, !alias.scope !33, !noalias !30
  %725 = add i64 %716, 16
  %726 = add i64 %717, -1
  %727 = icmp eq i64 %726, 0
  br i1 %727, label %728, label %715, !llvm.loop !36

728:                                              ; preds = %715, %707
  %729 = icmp eq i64 %633, %645
  br i1 %729, label %740, label %730

730:                                              ; preds = %728, %635, %630
  %731 = phi i8* [ %621, %635 ], [ %621, %630 ], [ %647, %728 ]
  %732 = phi i8* [ %627, %635 ], [ %627, %630 ], [ %649, %728 ]
  br label %733

733:                                              ; preds = %730, %733
  %734 = phi i8* [ %736, %733 ], [ %731, %730 ]
  %735 = phi i8* [ %737, %733 ], [ %732, %730 ]
  %736 = getelementptr inbounds i8, i8* %734, i64 -1
  %737 = getelementptr inbounds i8, i8* %735, i64 -1
  %738 = load i8, i8* %737, align 1
  store i8 %738, i8* %736, align 1
  %739 = icmp eq i8* %737, %626
  br i1 %739, label %740, label %733, !llvm.loop !37

740:                                              ; preds = %733, %728, %618
  %741 = phi i8* [ %621, %618 ], [ %647, %728 ], [ %736, %733 ]
  %742 = ptrtoint i8* %741 to i64
  store i64 %742, i64* %13, align 8
  store i64 %625, i64* %12, align 8
  store i64 %623, i64* %14, align 8
  br label %743

743:                                              ; preds = %29, %24, %225, %220, %740, %581, %3
  %744 = phi i1 [ false, %3 ], [ true, %581 ], [ true, %740 ], [ false, %220 ], [ false, %225 ], [ false, %24 ], [ false, %29 ]
  ret i1 %744
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2v88internal12RegExpParser21AddPropertyClassRangeEPNS0_8ZoneListINS0_14CharacterRangeEEEbRKNS0_10ZoneVectorIcEES9_(%"class.v8::internal::RegExpParser"* nocapture readonly, %"class.v8::internal::ZoneList.1145"* nocapture, i1 zeroext, %"class.v8::internal::ZoneVector.1147"* nocapture readonly dereferenceable(32), %"class.v8::internal::ZoneVector.1147"* nocapture readonly dereferenceable(32)) local_unnamed_addr #0 align 2 {
  %6 = getelementptr inbounds %"class.v8::internal::ZoneVector.1147", %"class.v8::internal::ZoneVector.1147"* %4, i64 0, i32 0, i32 0, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::ZoneVector.1147", %"class.v8::internal::ZoneVector.1147"* %4, i64 0, i32 0, i32 0, i32 1
  %9 = load i8*, i8** %8, align 8
  %10 = icmp eq i8* %7, %9
  %11 = getelementptr inbounds %"class.v8::internal::ZoneVector.1147", %"class.v8::internal::ZoneVector.1147"* %3, i64 0, i32 0, i32 0, i32 0
  %12 = load i8*, i8** %11, align 8
  br i1 %10, label %13, label %158

13:                                               ; preds = %5
  %14 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 1
  %15 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %14, align 8
  %16 = tail call fastcc zeroext i1 @_ZN2v88internal12_GLOBAL__N_123LookupPropertyValueNameE9UPropertyPKcbPNS0_8ZoneListINS0_14CharacterRangeEEEPNS0_4ZoneE(i32 8192, i8* %12, i1 zeroext %2, %"class.v8::internal::ZoneList.1145"* %1, %"class.v8::internal::Zone"* %15)
  br i1 %16, label %181, label %17

17:                                               ; preds = %13
  %18 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %14, align 8
  %19 = tail call i32 @strncmp(i8* %12, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.11, i64 0, i64 0), i64 5) #15
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %74

21:                                               ; preds = %17
  br i1 %2, label %181, label %22

22:                                               ; preds = %21
  %23 = getelementptr inbounds %"class.v8::internal::ZoneList.1145", %"class.v8::internal::ZoneList.1145"* %1, i64 0, i32 2
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr inbounds %"class.v8::internal::ZoneList.1145", %"class.v8::internal::ZoneList.1145"* %1, i64 0, i32 1
  %26 = load i32, i32* %25, align 8
  %27 = icmp slt i32 %24, %26
  br i1 %27, label %28, label %35

28:                                               ; preds = %22
  %29 = getelementptr inbounds %"class.v8::internal::ZoneList.1145", %"class.v8::internal::ZoneList.1145"* %1, i64 0, i32 0
  %30 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %29, align 8
  %31 = add nsw i32 %24, 1
  store i32 %31, i32* %23, align 4
  %32 = sext i32 %24 to i64
  %33 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %30, i64 %32
  %34 = bitcast %"class.v8::internal::CharacterRange"* %33 to i64*
  store i64 4785070309113856, i64* %34, align 4
  br label %181

35:                                               ; preds = %22
  %36 = shl nsw i32 %26, 1
  %37 = or i32 %36, 1
  %38 = sext i32 %37 to i64
  %39 = shl nsw i64 %38, 3
  %40 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %18, i64 0, i32 2
  %41 = load i64, i64* %40, align 8
  %42 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %18, i64 0, i32 3
  %43 = load i64, i64* %42, align 8
  %44 = sub i64 %43, %41
  %45 = icmp ugt i64 %39, %44
  br i1 %45, label %46, label %48, !prof !3

46:                                               ; preds = %35
  %47 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %18, i64 %39) #13
  br label %50

48:                                               ; preds = %35
  %49 = add i64 %41, %39
  store i64 %49, i64* %40, align 8
  br label %50

50:                                               ; preds = %48, %46
  %51 = phi i64 [ %47, %46 ], [ %41, %48 ]
  %52 = inttoptr i64 %51 to %"class.v8::internal::CharacterRange"*
  %53 = load i32, i32* %23, align 4
  %54 = icmp sgt i32 %53, 0
  br i1 %54, label %55, label %67

55:                                               ; preds = %50
  %56 = inttoptr i64 %51 to i8*
  %57 = bitcast %"class.v8::internal::ZoneList.1145"* %1 to i8**
  %58 = load i8*, i8** %57, align 8
  %59 = sext i32 %53 to i64
  %60 = shl nsw i64 %59, 3
  switch i64 %60, label %66 [
    i64 16, label %65
    i64 8, label %61
  ]

61:                                               ; preds = %55
  %62 = bitcast i8* %58 to i64*
  %63 = inttoptr i64 %51 to i64*
  %64 = load i64, i64* %62, align 1
  store i64 %64, i64* %63, align 1
  br label %67

65:                                               ; preds = %55
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %56, i8* align 1 %58, i64 16, i1 false) #13
  br label %67

66:                                               ; preds = %55
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %56, i8* align 1 %58, i64 %60, i1 false) #13
  br label %67

67:                                               ; preds = %66, %65, %61, %50
  %68 = getelementptr inbounds %"class.v8::internal::ZoneList.1145", %"class.v8::internal::ZoneList.1145"* %1, i64 0, i32 0
  store %"class.v8::internal::CharacterRange"* %52, %"class.v8::internal::CharacterRange"** %68, align 8
  store i32 %37, i32* %25, align 8
  %69 = load i32, i32* %23, align 4
  %70 = add nsw i32 %69, 1
  store i32 %70, i32* %23, align 4
  %71 = sext i32 %69 to i64
  %72 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %52, i64 %71
  %73 = bitcast %"class.v8::internal::CharacterRange"* %72 to i64*
  store i64 4785070309113856, i64* %73, align 4
  br label %181

74:                                               ; preds = %17
  %75 = tail call i32 @strncmp(i8* %12, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.12, i64 0, i64 0), i64 7) #15
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %77, label %130

77:                                               ; preds = %74
  %78 = select i1 %2, i64 4785070309113984, i64 545460846592
  %79 = getelementptr inbounds %"class.v8::internal::ZoneList.1145", %"class.v8::internal::ZoneList.1145"* %1, i64 0, i32 2
  %80 = load i32, i32* %79, align 4
  %81 = getelementptr inbounds %"class.v8::internal::ZoneList.1145", %"class.v8::internal::ZoneList.1145"* %1, i64 0, i32 1
  %82 = load i32, i32* %81, align 8
  %83 = icmp slt i32 %80, %82
  br i1 %83, label %84, label %91

84:                                               ; preds = %77
  %85 = getelementptr inbounds %"class.v8::internal::ZoneList.1145", %"class.v8::internal::ZoneList.1145"* %1, i64 0, i32 0
  %86 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %85, align 8
  %87 = add nsw i32 %80, 1
  store i32 %87, i32* %79, align 4
  %88 = sext i32 %80 to i64
  %89 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %86, i64 %88
  %90 = bitcast %"class.v8::internal::CharacterRange"* %89 to i64*
  store i64 %78, i64* %90, align 4
  br label %181

91:                                               ; preds = %77
  %92 = shl nsw i32 %82, 1
  %93 = or i32 %92, 1
  %94 = sext i32 %93 to i64
  %95 = shl nsw i64 %94, 3
  %96 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %18, i64 0, i32 2
  %97 = load i64, i64* %96, align 8
  %98 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %18, i64 0, i32 3
  %99 = load i64, i64* %98, align 8
  %100 = sub i64 %99, %97
  %101 = icmp ugt i64 %95, %100
  br i1 %101, label %102, label %104, !prof !3

102:                                              ; preds = %91
  %103 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %18, i64 %95) #13
  br label %106

104:                                              ; preds = %91
  %105 = add i64 %97, %95
  store i64 %105, i64* %96, align 8
  br label %106

106:                                              ; preds = %104, %102
  %107 = phi i64 [ %103, %102 ], [ %97, %104 ]
  %108 = inttoptr i64 %107 to %"class.v8::internal::CharacterRange"*
  %109 = load i32, i32* %79, align 4
  %110 = icmp sgt i32 %109, 0
  br i1 %110, label %111, label %123

111:                                              ; preds = %106
  %112 = inttoptr i64 %107 to i8*
  %113 = bitcast %"class.v8::internal::ZoneList.1145"* %1 to i8**
  %114 = load i8*, i8** %113, align 8
  %115 = sext i32 %109 to i64
  %116 = shl nsw i64 %115, 3
  switch i64 %116, label %122 [
    i64 16, label %121
    i64 8, label %117
  ]

117:                                              ; preds = %111
  %118 = bitcast i8* %114 to i64*
  %119 = inttoptr i64 %107 to i64*
  %120 = load i64, i64* %118, align 1
  store i64 %120, i64* %119, align 1
  br label %123

121:                                              ; preds = %111
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %112, i8* align 1 %114, i64 16, i1 false) #13
  br label %123

122:                                              ; preds = %111
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %112, i8* align 1 %114, i64 %116, i1 false) #13
  br label %123

123:                                              ; preds = %122, %121, %117, %106
  %124 = getelementptr inbounds %"class.v8::internal::ZoneList.1145", %"class.v8::internal::ZoneList.1145"* %1, i64 0, i32 0
  store %"class.v8::internal::CharacterRange"* %108, %"class.v8::internal::CharacterRange"** %124, align 8
  store i32 %93, i32* %81, align 8
  %125 = load i32, i32* %79, align 4
  %126 = add nsw i32 %125, 1
  store i32 %126, i32* %79, align 4
  %127 = sext i32 %125 to i64
  %128 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %108, i64 %127
  %129 = bitcast %"class.v8::internal::CharacterRange"* %128 to i64*
  store i64 %78, i64* %129, align 4
  br label %181

130:                                              ; preds = %74
  %131 = tail call i32 @strncmp(i8* %12, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.13, i64 0, i64 0), i64 10) #15
  %132 = icmp eq i32 %131, 0
  br i1 %132, label %133, label %136

133:                                              ; preds = %130
  %134 = xor i1 %2, true
  %135 = tail call fastcc zeroext i1 @_ZN2v88internal12_GLOBAL__N_123LookupPropertyValueNameE9UPropertyPKcbPNS0_8ZoneListINS0_14CharacterRangeEEEPNS0_4ZoneE(i32 4101, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.14, i64 0, i64 0), i1 zeroext %134, %"class.v8::internal::ZoneList.1145"* %1, %"class.v8::internal::Zone"* %18) #13
  br i1 %135, label %181, label %136

136:                                              ; preds = %130, %133
  %137 = tail call i32 @u_getPropertyEnum_69(i8* %12) #13
  switch i32 %137, label %181 [
    i32 0, label %138
    i32 1, label %138
    i32 2, label %138
    i32 3, label %138
    i32 50, label %138
    i32 49, label %138
    i32 54, label %138
    i32 55, label %138
    i32 51, label %138
    i32 56, label %138
    i32 53, label %138
    i32 52, label %138
    i32 4, label %138
    i32 5, label %138
    i32 6, label %138
    i32 7, label %138
    i32 57, label %138
    i32 61, label %138
    i32 60, label %138
    i32 59, label %138
    i32 58, label %138
    i32 64, label %138
    i32 8, label %138
    i32 10, label %138
    i32 11, label %138
    i32 13, label %138
    i32 15, label %138
    i32 16, label %138
    i32 17, label %138
    i32 18, label %138
    i32 19, label %138
    i32 20, label %138
    i32 21, label %138
    i32 22, label %138
    i32 23, label %138
    i32 24, label %138
    i32 42, label %138
    i32 43, label %138
    i32 25, label %138
    i32 26, label %138
    i32 62, label %138
    i32 35, label %138
    i32 27, label %138
    i32 28, label %138
    i32 29, label %138
    i32 30, label %138
    i32 36, label %138
    i32 31, label %138
    i32 32, label %138
    i32 33, label %138
  ]

138:                                              ; preds = %136, %136, %136, %136, %136, %136, %136, %136, %136, %136, %136, %136, %136, %136, %136, %136, %136, %136, %136, %136, %136, %136, %136, %136, %136, %136, %136, %136, %136, %136, %136, %136, %136, %136, %136, %136, %136, %136, %136, %136, %136, %136, %136, %136, %136, %136, %136, %136, %136, %136
  %139 = tail call i8* @u_getPropertyName_69(i32 %137, i32 0) #13
  %140 = icmp eq i8* %139, null
  br i1 %140, label %144, label %141

141:                                              ; preds = %138
  %142 = tail call i32 @strcmp(i8* %12, i8* nonnull %139) #15
  %143 = icmp eq i32 %142, 0
  br i1 %143, label %153, label %144

144:                                              ; preds = %141, %138
  br label %145

145:                                              ; preds = %144, %150
  %146 = phi i32 [ %147, %150 ], [ 0, %144 ]
  %147 = add nuw nsw i32 %146, 1
  %148 = tail call i8* @u_getPropertyName_69(i32 %137, i32 %147) #13
  %149 = icmp eq i8* %148, null
  br i1 %149, label %181, label %150

150:                                              ; preds = %145
  %151 = tail call i32 @strcmp(i8* %12, i8* nonnull %148) #15
  %152 = icmp eq i32 %151, 0
  br i1 %152, label %153, label %145

153:                                              ; preds = %150, %141
  %154 = select i1 %2, [2 x i8]* @.str.2, [2 x i8]* @.str.3
  %155 = getelementptr inbounds [2 x i8], [2 x i8]* %154, i64 0, i64 0
  %156 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %14, align 8
  %157 = tail call fastcc zeroext i1 @_ZN2v88internal12_GLOBAL__N_123LookupPropertyValueNameE9UPropertyPKcbPNS0_8ZoneListINS0_14CharacterRangeEEEPNS0_4ZoneE(i32 %137, i8* nonnull %155, i1 zeroext false, %"class.v8::internal::ZoneList.1145"* %1, %"class.v8::internal::Zone"* %156)
  br label %181

158:                                              ; preds = %5
  %159 = tail call i32 @u_getPropertyEnum_69(i8* %12) #13
  %160 = tail call i8* @u_getPropertyName_69(i32 %159, i32 0) #13
  %161 = icmp eq i8* %160, null
  br i1 %161, label %165, label %162

162:                                              ; preds = %158
  %163 = tail call i32 @strcmp(i8* %12, i8* nonnull %160) #15
  %164 = icmp eq i32 %163, 0
  br i1 %164, label %174, label %165

165:                                              ; preds = %162, %158
  br label %166

166:                                              ; preds = %165, %171
  %167 = phi i32 [ %168, %171 ], [ 0, %165 ]
  %168 = add nuw nsw i32 %167, 1
  %169 = tail call i8* @u_getPropertyName_69(i32 %159, i32 %168) #13
  %170 = icmp eq i8* %169, null
  br i1 %170, label %181, label %171

171:                                              ; preds = %166
  %172 = tail call i32 @strcmp(i8* %12, i8* nonnull %169) #15
  %173 = icmp eq i32 %172, 0
  br i1 %173, label %174, label %166

174:                                              ; preds = %171, %162
  switch i32 %159, label %181 [
    i32 4101, label %176
    i32 28672, label %175
    i32 4106, label %175
  ]

175:                                              ; preds = %174, %174
  br label %176

176:                                              ; preds = %174, %175
  %177 = phi i32 [ 8192, %174 ], [ %159, %175 ]
  %178 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 1
  %179 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %178, align 8
  %180 = tail call fastcc zeroext i1 @_ZN2v88internal12_GLOBAL__N_123LookupPropertyValueNameE9UPropertyPKcbPNS0_8ZoneListINS0_14CharacterRangeEEEPNS0_4ZoneE(i32 %177, i8* %7, i1 zeroext %2, %"class.v8::internal::ZoneList.1145"* %1, %"class.v8::internal::Zone"* %179)
  br label %181

181:                                              ; preds = %166, %145, %123, %84, %67, %28, %21, %136, %174, %176, %13, %133, %153
  %182 = phi i1 [ true, %13 ], [ true, %133 ], [ %157, %153 ], [ %180, %176 ], [ false, %174 ], [ false, %136 ], [ true, %21 ], [ true, %28 ], [ true, %67 ], [ true, %84 ], [ true, %123 ], [ false, %145 ], [ false, %166 ]
  ret i1 %182
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::RegExpTree"* @_ZN2v88internal12RegExpParser19GetPropertySequenceERKNS0_10ZoneVectorIcEE(%"class.v8::internal::RegExpParser"* nocapture readonly, %"class.v8::internal::ZoneVector.1147"* nocapture readonly dereferenceable(32)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.v8::base::Flags", align 4
  %4 = alloca %"class.v8::internal::RegExpBuilder", align 8
  %5 = alloca %"class.v8::internal::RegExpBuilder", align 8
  %6 = alloca %"class.v8::internal::ZoneList.1145"*, align 8
  %7 = alloca %"class.v8::internal::Zone"*, align 8
  %8 = alloca %"class.v8::internal::RegExpBuilder", align 8
  %9 = alloca %"class.v8::internal::ZoneList.1145"*, align 8
  %10 = alloca %"class.v8::internal::Zone"*, align 8
  %11 = alloca %"class.v8::internal::ZoneList.1145"*, align 8
  %12 = alloca %"class.v8::internal::Zone"*, align 8
  %13 = load i8, i8* @_ZN2v88internal28FLAG_harmony_regexp_sequenceE, align 1, !range !2
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %343, label %15

15:                                               ; preds = %2
  %16 = getelementptr inbounds %"class.v8::internal::ZoneVector.1147", %"class.v8::internal::ZoneVector.1147"* %1, i64 0, i32 0, i32 0, i32 0
  %17 = load i8*, i8** %16, align 8
  %18 = bitcast %"class.v8::base::Flags"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %18) #13
  %19 = getelementptr inbounds %"class.v8::base::Flags", %"class.v8::base::Flags"* %3, i64 0, i32 0
  store i32 16, i32* %19, align 4
  %20 = tail call i32 @strncmp(i8* %17, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i64 0, i64 0), i64 21) #15
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %28, label %22

22:                                               ; preds = %15
  %23 = tail call i32 @strncmp(i8* %17, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.5, i64 0, i64 0), i64 20) #15
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %28, label %25

25:                                               ; preds = %22
  %26 = tail call i32 @strncmp(i8* %17, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.6, i64 0, i64 0), i64 20) #15
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %59

28:                                               ; preds = %25, %15, %22
  %29 = phi i32* [ getelementptr inbounds ([0 x i32], [0 x i32]* @_ZN2v88internal24UnicodePropertySequences18kEmojiTagSequencesE, i64 0, i64 0), %22 ], [ getelementptr inbounds ([0 x i32], [0 x i32]* @_ZN2v88internal24UnicodePropertySequences19kEmojiFlagSequencesE, i64 0, i64 0), %15 ], [ getelementptr inbounds ([0 x i32], [0 x i32]* @_ZN2v88internal24UnicodePropertySequences18kEmojiZWJSequencesE, i64 0, i64 0), %25 ]
  %30 = bitcast %"class.v8::internal::RegExpBuilder"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %30) #13
  %31 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 1
  %32 = bitcast %"class.v8::internal::Zone"** %31 to i64*
  %33 = load i64, i64* %32, align 8
  %34 = bitcast %"class.v8::internal::RegExpBuilder"* %4 to i64*
  store i64 %33, i64* %34, align 8
  %35 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %4, i64 0, i32 1
  store i8 0, i8* %35, align 8
  %36 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %4, i64 0, i32 2, i32 0
  store i32 16, i32* %36, align 4
  %37 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %4, i64 0, i32 3
  store %"class.v8::internal::ZoneList.1143"* null, %"class.v8::internal::ZoneList.1143"** %37, align 8
  %38 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %4, i64 0, i32 4
  store i16 0, i16* %38, align 8
  %39 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %4, i64 0, i32 5
  %40 = bitcast %"class.v8::internal::BufferedZoneList"* %39 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %40, i8 0, i64 48, i1 false) #13
  br label %41

41:                                               ; preds = %56, %28
  %42 = phi i32* [ %29, %28 ], [ %53, %56 ]
  %43 = load i32, i32* %42, align 4
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %51, label %45

45:                                               ; preds = %41, %45
  %46 = phi i32 [ %49, %45 ], [ %43, %41 ]
  %47 = phi i32* [ %48, %45 ], [ %42, %41 ]
  call void @_ZN2v88internal13RegExpBuilder19AddUnicodeCharacterEj(%"class.v8::internal::RegExpBuilder"* nonnull %4, i32 %46)
  %48 = getelementptr inbounds i32, i32* %47, i64 1
  %49 = load i32, i32* %48, align 4
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %51, label %45

51:                                               ; preds = %45, %41
  %52 = phi i32* [ %42, %41 ], [ %48, %45 ]
  %53 = getelementptr inbounds i32, i32* %52, i64 1
  %54 = load i32, i32* %53, align 4
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %57, label %56

56:                                               ; preds = %51
  call void @_ZN2v88internal13RegExpBuilder10FlushTermsEv(%"class.v8::internal::RegExpBuilder"* nonnull %4) #13
  br label %41

57:                                               ; preds = %51
  %58 = call %"class.v8::internal::RegExpTree"* @_ZN2v88internal13RegExpBuilder8ToRegExpEv(%"class.v8::internal::RegExpBuilder"* nonnull %4)
  br label %338

59:                                               ; preds = %25
  %60 = tail call i32 @strncmp(i8* %17, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7, i64 0, i64 0), i64 23) #15
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %62, label %256

62:                                               ; preds = %59
  %63 = bitcast %"class.v8::internal::RegExpBuilder"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %63) #13
  %64 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 1
  %65 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %64, align 8
  %66 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %5, i64 0, i32 0
  store %"class.v8::internal::Zone"* %65, %"class.v8::internal::Zone"** %66, align 8
  %67 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %5, i64 0, i32 1
  store i8 0, i8* %67, align 8
  %68 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %5, i64 0, i32 2, i32 0
  store i32 16, i32* %68, align 4
  %69 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %5, i64 0, i32 3
  store %"class.v8::internal::ZoneList.1143"* null, %"class.v8::internal::ZoneList.1143"** %69, align 8
  %70 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %5, i64 0, i32 4
  store i16 0, i16* %70, align 8
  %71 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %5, i64 0, i32 5
  %72 = bitcast %"class.v8::internal::BufferedZoneList"* %71 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %72, i8 0, i64 48, i1 false) #13
  %73 = bitcast %"class.v8::internal::ZoneList.1145"** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %73) #13
  %74 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %65, i64 0, i32 2
  %75 = load i64, i64* %74, align 8
  %76 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %65, i64 0, i32 3
  %77 = load i64, i64* %76, align 8
  %78 = sub i64 %77, %75
  %79 = icmp ult i64 %78, 16
  br i1 %79, label %80, label %82, !prof !3

80:                                               ; preds = %62
  %81 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %65, i64 16) #13
  br label %84

82:                                               ; preds = %62
  %83 = add i64 %75, 16
  store i64 %83, i64* %74, align 8
  br label %84

84:                                               ; preds = %80, %82
  %85 = phi i64 [ %81, %80 ], [ %75, %82 ]
  %86 = inttoptr i64 %85 to %"class.v8::internal::ZoneList.1145"*
  %87 = getelementptr inbounds %"class.v8::internal::ZoneList.1145", %"class.v8::internal::ZoneList.1145"* %86, i64 0, i32 0
  store %"class.v8::internal::CharacterRange"* null, %"class.v8::internal::CharacterRange"** %87, align 8
  %88 = getelementptr inbounds %"class.v8::internal::ZoneList.1145", %"class.v8::internal::ZoneList.1145"* %86, i64 0, i32 1
  store i32 2, i32* %88, align 8
  %89 = getelementptr inbounds %"class.v8::internal::ZoneList.1145", %"class.v8::internal::ZoneList.1145"* %86, i64 0, i32 2
  store i32 0, i32* %89, align 4
  %90 = load i64, i64* %74, align 8
  %91 = load i64, i64* %76, align 8
  %92 = sub i64 %91, %90
  %93 = icmp ult i64 %92, 16
  br i1 %93, label %94, label %96, !prof !3

94:                                               ; preds = %84
  %95 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %65, i64 16) #13
  br label %98

96:                                               ; preds = %84
  %97 = add i64 %90, 16
  store i64 %97, i64* %74, align 8
  br label %98

98:                                               ; preds = %94, %96
  %99 = phi i64 [ %95, %94 ], [ %90, %96 ]
  %100 = inttoptr i64 %99 to %"class.v8::internal::CharacterRange"*
  store %"class.v8::internal::CharacterRange"* %100, %"class.v8::internal::CharacterRange"** %87, align 8
  store %"class.v8::internal::ZoneList.1145"* %86, %"class.v8::internal::ZoneList.1145"** %6, align 8
  %101 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %64, align 8
  %102 = load i32, i32* %89, align 4
  %103 = load i32, i32* %88, align 8
  %104 = icmp slt i32 %102, %103
  br i1 %104, label %105, label %107

105:                                              ; preds = %98
  %106 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %87, align 8
  br label %141

107:                                              ; preds = %98
  %108 = shl nsw i32 %103, 1
  %109 = or i32 %108, 1
  %110 = sext i32 %109 to i64
  %111 = shl nsw i64 %110, 3
  %112 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %101, i64 0, i32 2
  %113 = load i64, i64* %112, align 8
  %114 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %101, i64 0, i32 3
  %115 = load i64, i64* %114, align 8
  %116 = sub i64 %115, %113
  %117 = icmp ugt i64 %111, %116
  br i1 %117, label %118, label %120, !prof !3

118:                                              ; preds = %107
  %119 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %101, i64 %111) #13
  br label %122

120:                                              ; preds = %107
  %121 = add i64 %113, %111
  store i64 %121, i64* %112, align 8
  br label %122

122:                                              ; preds = %120, %118
  %123 = phi i64 [ %119, %118 ], [ %113, %120 ]
  %124 = inttoptr i64 %123 to %"class.v8::internal::CharacterRange"*
  %125 = load i32, i32* %89, align 4
  %126 = icmp sgt i32 %125, 0
  br i1 %126, label %127, label %139

127:                                              ; preds = %122
  %128 = inttoptr i64 %123 to i8*
  %129 = inttoptr i64 %85 to i8**
  %130 = load i8*, i8** %129, align 8
  %131 = sext i32 %125 to i64
  %132 = shl nsw i64 %131, 3
  switch i64 %132, label %138 [
    i64 16, label %137
    i64 8, label %133
  ]

133:                                              ; preds = %127
  %134 = bitcast i8* %130 to i64*
  %135 = inttoptr i64 %123 to i64*
  %136 = load i64, i64* %134, align 1
  store i64 %136, i64* %135, align 1
  br label %139

137:                                              ; preds = %127
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %128, i8* align 1 %130, i64 16, i1 false) #13
  br label %139

138:                                              ; preds = %127
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %128, i8* align 1 %130, i64 %132, i1 false) #13
  br label %139

139:                                              ; preds = %138, %137, %133, %122
  store %"class.v8::internal::CharacterRange"* %124, %"class.v8::internal::CharacterRange"** %87, align 8
  store i32 %109, i32* %88, align 8
  %140 = load i32, i32* %89, align 4
  br label %141

141:                                              ; preds = %105, %139
  %142 = phi i32 [ %102, %105 ], [ %140, %139 ]
  %143 = phi %"class.v8::internal::CharacterRange"* [ %106, %105 ], [ %124, %139 ]
  %144 = add nsw i32 %142, 1
  store i32 %144, i32* %89, align 4
  %145 = sext i32 %142 to i64
  %146 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %143, i64 %145
  %147 = bitcast %"class.v8::internal::CharacterRange"* %146 to i64*
  store i64 244813135920, i64* %147, align 4
  %148 = load %"class.v8::internal::ZoneList.1145"*, %"class.v8::internal::ZoneList.1145"** %6, align 8
  %149 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %64, align 8
  %150 = getelementptr inbounds %"class.v8::internal::ZoneList.1145", %"class.v8::internal::ZoneList.1145"* %148, i64 0, i32 2
  %151 = load i32, i32* %150, align 4
  %152 = getelementptr inbounds %"class.v8::internal::ZoneList.1145", %"class.v8::internal::ZoneList.1145"* %148, i64 0, i32 1
  %153 = load i32, i32* %152, align 8
  %154 = icmp slt i32 %151, %153
  br i1 %154, label %155, label %158

155:                                              ; preds = %141
  %156 = getelementptr inbounds %"class.v8::internal::ZoneList.1145", %"class.v8::internal::ZoneList.1145"* %148, i64 0, i32 0
  %157 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %156, align 8
  br label %193

158:                                              ; preds = %141
  %159 = shl nsw i32 %153, 1
  %160 = or i32 %159, 1
  %161 = sext i32 %160 to i64
  %162 = shl nsw i64 %161, 3
  %163 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %149, i64 0, i32 2
  %164 = load i64, i64* %163, align 8
  %165 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %149, i64 0, i32 3
  %166 = load i64, i64* %165, align 8
  %167 = sub i64 %166, %164
  %168 = icmp ugt i64 %162, %167
  br i1 %168, label %169, label %171, !prof !3

169:                                              ; preds = %158
  %170 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %149, i64 %162) #13
  br label %173

171:                                              ; preds = %158
  %172 = add i64 %164, %162
  store i64 %172, i64* %163, align 8
  br label %173

173:                                              ; preds = %171, %169
  %174 = phi i64 [ %170, %169 ], [ %164, %171 ]
  %175 = inttoptr i64 %174 to %"class.v8::internal::CharacterRange"*
  %176 = load i32, i32* %150, align 4
  %177 = icmp sgt i32 %176, 0
  br i1 %177, label %178, label %190

178:                                              ; preds = %173
  %179 = inttoptr i64 %174 to i8*
  %180 = bitcast %"class.v8::internal::ZoneList.1145"* %148 to i8**
  %181 = load i8*, i8** %180, align 8
  %182 = sext i32 %176 to i64
  %183 = shl nsw i64 %182, 3
  switch i64 %183, label %189 [
    i64 16, label %188
    i64 8, label %184
  ]

184:                                              ; preds = %178
  %185 = bitcast i8* %181 to i64*
  %186 = inttoptr i64 %174 to i64*
  %187 = load i64, i64* %185, align 1
  store i64 %187, i64* %186, align 1
  br label %190

188:                                              ; preds = %178
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %179, i8* align 1 %181, i64 16, i1 false) #13
  br label %190

189:                                              ; preds = %178
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %179, i8* align 1 %181, i64 %183, i1 false) #13
  br label %190

190:                                              ; preds = %189, %188, %184, %173
  %191 = getelementptr inbounds %"class.v8::internal::ZoneList.1145", %"class.v8::internal::ZoneList.1145"* %148, i64 0, i32 0
  store %"class.v8::internal::CharacterRange"* %175, %"class.v8::internal::CharacterRange"** %191, align 8
  store i32 %160, i32* %152, align 8
  %192 = load i32, i32* %150, align 4
  br label %193

193:                                              ; preds = %155, %190
  %194 = phi i32 [ %151, %155 ], [ %192, %190 ]
  %195 = phi %"class.v8::internal::CharacterRange"* [ %157, %155 ], [ %175, %190 ]
  %196 = add nsw i32 %194, 1
  store i32 %196, i32* %150, align 4
  %197 = sext i32 %194 to i64
  %198 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %195, i64 %197
  %199 = bitcast %"class.v8::internal::CharacterRange"* %198 to i64*
  store i64 150323855395, i64* %199, align 4
  %200 = load %"class.v8::internal::ZoneList.1145"*, %"class.v8::internal::ZoneList.1145"** %6, align 8
  %201 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %64, align 8
  %202 = getelementptr inbounds %"class.v8::internal::ZoneList.1145", %"class.v8::internal::ZoneList.1145"* %200, i64 0, i32 2
  %203 = load i32, i32* %202, align 4
  %204 = getelementptr inbounds %"class.v8::internal::ZoneList.1145", %"class.v8::internal::ZoneList.1145"* %200, i64 0, i32 1
  %205 = load i32, i32* %204, align 8
  %206 = icmp slt i32 %203, %205
  br i1 %206, label %207, label %210

207:                                              ; preds = %193
  %208 = getelementptr inbounds %"class.v8::internal::ZoneList.1145", %"class.v8::internal::ZoneList.1145"* %200, i64 0, i32 0
  %209 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %208, align 8
  br label %245

210:                                              ; preds = %193
  %211 = shl nsw i32 %205, 1
  %212 = or i32 %211, 1
  %213 = sext i32 %212 to i64
  %214 = shl nsw i64 %213, 3
  %215 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %201, i64 0, i32 2
  %216 = load i64, i64* %215, align 8
  %217 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %201, i64 0, i32 3
  %218 = load i64, i64* %217, align 8
  %219 = sub i64 %218, %216
  %220 = icmp ugt i64 %214, %219
  br i1 %220, label %221, label %223, !prof !3

221:                                              ; preds = %210
  %222 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %201, i64 %214) #13
  br label %225

223:                                              ; preds = %210
  %224 = add i64 %216, %214
  store i64 %224, i64* %215, align 8
  br label %225

225:                                              ; preds = %223, %221
  %226 = phi i64 [ %222, %221 ], [ %216, %223 ]
  %227 = inttoptr i64 %226 to %"class.v8::internal::CharacterRange"*
  %228 = load i32, i32* %202, align 4
  %229 = icmp sgt i32 %228, 0
  br i1 %229, label %230, label %242

230:                                              ; preds = %225
  %231 = inttoptr i64 %226 to i8*
  %232 = bitcast %"class.v8::internal::ZoneList.1145"* %200 to i8**
  %233 = load i8*, i8** %232, align 8
  %234 = sext i32 %228 to i64
  %235 = shl nsw i64 %234, 3
  switch i64 %235, label %241 [
    i64 16, label %240
    i64 8, label %236
  ]

236:                                              ; preds = %230
  %237 = bitcast i8* %233 to i64*
  %238 = inttoptr i64 %226 to i64*
  %239 = load i64, i64* %237, align 1
  store i64 %239, i64* %238, align 1
  br label %242

240:                                              ; preds = %230
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %231, i8* align 1 %233, i64 16, i1 false) #13
  br label %242

241:                                              ; preds = %230
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %231, i8* align 1 %233, i64 %235, i1 false) #13
  br label %242

242:                                              ; preds = %241, %240, %236, %225
  %243 = getelementptr inbounds %"class.v8::internal::ZoneList.1145", %"class.v8::internal::ZoneList.1145"* %200, i64 0, i32 0
  store %"class.v8::internal::CharacterRange"* %227, %"class.v8::internal::CharacterRange"** %243, align 8
  store i32 %212, i32* %204, align 8
  %244 = load i32, i32* %202, align 4
  br label %245

245:                                              ; preds = %207, %242
  %246 = phi i32 [ %203, %207 ], [ %244, %242 ]
  %247 = phi %"class.v8::internal::CharacterRange"* [ %209, %207 ], [ %227, %242 ]
  %248 = add nsw i32 %246, 1
  store i32 %248, i32* %202, align 4
  %249 = sext i32 %246 to i64
  %250 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %247, i64 %249
  %251 = bitcast %"class.v8::internal::CharacterRange"* %250 to i64*
  store i64 180388626474, i64* %251, align 4
  %252 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %64, align 8
  %253 = bitcast %"class.v8::internal::Zone"** %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %253) #13
  store %"class.v8::internal::Zone"* %252, %"class.v8::internal::Zone"** %7, align 8
  %254 = call %"class.v8::internal::RegExpCharacterClass"* @_ZN2v88internal4Zone3NewINS0_20RegExpCharacterClassEJPS1_RPNS0_8ZoneListINS0_14CharacterRangeEEERNS_4base5FlagsINS0_8JSRegExp4FlagEiEEEEEPT_DpOT0_(%"class.v8::internal::Zone"* %252, %"class.v8::internal::Zone"** nonnull dereferenceable(8) %7, %"class.v8::internal::ZoneList.1145"** nonnull dereferenceable(8) %6, %"class.v8::base::Flags"* nonnull dereferenceable(4) %3)
  call void @_ZN2v88internal13RegExpBuilder17AddCharacterClassEPNS0_20RegExpCharacterClassE(%"class.v8::internal::RegExpBuilder"* nonnull %5, %"class.v8::internal::RegExpCharacterClass"* %254)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %253) #13
  call void @_ZN2v88internal13RegExpBuilder12AddCharacterEt(%"class.v8::internal::RegExpBuilder"* nonnull %5, i16 zeroext -497)
  call void @_ZN2v88internal13RegExpBuilder12AddCharacterEt(%"class.v8::internal::RegExpBuilder"* nonnull %5, i16 zeroext 8419)
  %255 = call %"class.v8::internal::RegExpTree"* @_ZN2v88internal13RegExpBuilder8ToRegExpEv(%"class.v8::internal::RegExpBuilder"* nonnull %5)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %73) #13
  br label %338

256:                                              ; preds = %59
  %257 = tail call i32 @strncmp(i8* %17, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.8, i64 0, i64 0), i64 25) #15
  %258 = icmp eq i32 %257, 0
  br i1 %258, label %259, label %341

259:                                              ; preds = %256
  %260 = bitcast %"class.v8::internal::RegExpBuilder"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %260) #13
  %261 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 1
  %262 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %261, align 8
  %263 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %8, i64 0, i32 0
  store %"class.v8::internal::Zone"* %262, %"class.v8::internal::Zone"** %263, align 8
  %264 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %8, i64 0, i32 1
  store i8 0, i8* %264, align 8
  %265 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %8, i64 0, i32 2, i32 0
  store i32 16, i32* %265, align 4
  %266 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %8, i64 0, i32 3
  store %"class.v8::internal::ZoneList.1143"* null, %"class.v8::internal::ZoneList.1143"** %266, align 8
  %267 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %8, i64 0, i32 4
  store i16 0, i16* %267, align 8
  %268 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %8, i64 0, i32 5
  %269 = bitcast %"class.v8::internal::BufferedZoneList"* %268 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %269, i8 0, i64 48, i1 false) #13
  %270 = bitcast %"class.v8::internal::ZoneList.1145"** %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %270) #13
  %271 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %262, i64 0, i32 2
  %272 = load i64, i64* %271, align 8
  %273 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %262, i64 0, i32 3
  %274 = load i64, i64* %273, align 8
  %275 = sub i64 %274, %272
  %276 = icmp ult i64 %275, 16
  br i1 %276, label %277, label %279, !prof !3

277:                                              ; preds = %259
  %278 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %262, i64 16) #13
  br label %281

279:                                              ; preds = %259
  %280 = add i64 %272, 16
  store i64 %280, i64* %271, align 8
  br label %281

281:                                              ; preds = %277, %279
  %282 = phi i64 [ %278, %277 ], [ %272, %279 ]
  %283 = inttoptr i64 %282 to %"class.v8::internal::ZoneList.1145"*
  %284 = getelementptr inbounds %"class.v8::internal::ZoneList.1145", %"class.v8::internal::ZoneList.1145"* %283, i64 0, i32 0
  store %"class.v8::internal::CharacterRange"* null, %"class.v8::internal::CharacterRange"** %284, align 8
  %285 = getelementptr inbounds %"class.v8::internal::ZoneList.1145", %"class.v8::internal::ZoneList.1145"* %283, i64 0, i32 1
  store i32 2, i32* %285, align 8
  %286 = getelementptr inbounds %"class.v8::internal::ZoneList.1145", %"class.v8::internal::ZoneList.1145"* %283, i64 0, i32 2
  store i32 0, i32* %286, align 4
  %287 = load i64, i64* %271, align 8
  %288 = load i64, i64* %273, align 8
  %289 = sub i64 %288, %287
  %290 = icmp ult i64 %289, 16
  br i1 %290, label %291, label %293, !prof !3

291:                                              ; preds = %281
  %292 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %262, i64 16) #13
  br label %295

293:                                              ; preds = %281
  %294 = add i64 %287, 16
  store i64 %294, i64* %271, align 8
  br label %295

295:                                              ; preds = %291, %293
  %296 = phi i64 [ %292, %291 ], [ %287, %293 ]
  %297 = inttoptr i64 %296 to %"class.v8::internal::CharacterRange"*
  store %"class.v8::internal::CharacterRange"* %297, %"class.v8::internal::CharacterRange"** %284, align 8
  store %"class.v8::internal::ZoneList.1145"* %283, %"class.v8::internal::ZoneList.1145"** %9, align 8
  %298 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %261, align 8
  %299 = tail call fastcc zeroext i1 @_ZN2v88internal12_GLOBAL__N_123LookupPropertyValueNameE9UPropertyPKcbPNS0_8ZoneListINS0_14CharacterRangeEEEPNS0_4ZoneE(i32 60, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0), i1 zeroext false, %"class.v8::internal::ZoneList.1145"* %283, %"class.v8::internal::Zone"* %298)
  %300 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %261, align 8
  %301 = bitcast %"class.v8::internal::Zone"** %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %301) #13
  store %"class.v8::internal::Zone"* %300, %"class.v8::internal::Zone"** %10, align 8
  %302 = call %"class.v8::internal::RegExpCharacterClass"* @_ZN2v88internal4Zone3NewINS0_20RegExpCharacterClassEJPS1_RPNS0_8ZoneListINS0_14CharacterRangeEEERNS_4base5FlagsINS0_8JSRegExp4FlagEiEEEEEPT_DpOT0_(%"class.v8::internal::Zone"* %300, %"class.v8::internal::Zone"** nonnull dereferenceable(8) %10, %"class.v8::internal::ZoneList.1145"** nonnull dereferenceable(8) %9, %"class.v8::base::Flags"* nonnull dereferenceable(4) %3)
  call void @_ZN2v88internal13RegExpBuilder17AddCharacterClassEPNS0_20RegExpCharacterClassE(%"class.v8::internal::RegExpBuilder"* nonnull %8, %"class.v8::internal::RegExpCharacterClass"* %302)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %301) #13
  %303 = bitcast %"class.v8::internal::ZoneList.1145"** %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %303) #13
  %304 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %261, align 8
  %305 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %304, i64 0, i32 2
  %306 = load i64, i64* %305, align 8
  %307 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %304, i64 0, i32 3
  %308 = load i64, i64* %307, align 8
  %309 = sub i64 %308, %306
  %310 = icmp ult i64 %309, 16
  br i1 %310, label %311, label %313, !prof !3

311:                                              ; preds = %295
  %312 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %304, i64 16) #13
  br label %315

313:                                              ; preds = %295
  %314 = add i64 %306, 16
  store i64 %314, i64* %305, align 8
  br label %315

315:                                              ; preds = %311, %313
  %316 = phi i64 [ %312, %311 ], [ %306, %313 ]
  %317 = inttoptr i64 %316 to %"class.v8::internal::ZoneList.1145"*
  %318 = getelementptr inbounds %"class.v8::internal::ZoneList.1145", %"class.v8::internal::ZoneList.1145"* %317, i64 0, i32 0
  store %"class.v8::internal::CharacterRange"* null, %"class.v8::internal::CharacterRange"** %318, align 8
  %319 = getelementptr inbounds %"class.v8::internal::ZoneList.1145", %"class.v8::internal::ZoneList.1145"* %317, i64 0, i32 1
  store i32 2, i32* %319, align 8
  %320 = getelementptr inbounds %"class.v8::internal::ZoneList.1145", %"class.v8::internal::ZoneList.1145"* %317, i64 0, i32 2
  store i32 0, i32* %320, align 4
  %321 = load i64, i64* %305, align 8
  %322 = load i64, i64* %307, align 8
  %323 = sub i64 %322, %321
  %324 = icmp ult i64 %323, 16
  br i1 %324, label %325, label %327, !prof !3

325:                                              ; preds = %315
  %326 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %304, i64 16) #13
  br label %329

327:                                              ; preds = %315
  %328 = add i64 %321, 16
  store i64 %328, i64* %305, align 8
  br label %329

329:                                              ; preds = %325, %327
  %330 = phi i64 [ %326, %325 ], [ %321, %327 ]
  %331 = inttoptr i64 %330 to %"class.v8::internal::CharacterRange"*
  store %"class.v8::internal::CharacterRange"* %331, %"class.v8::internal::CharacterRange"** %318, align 8
  store %"class.v8::internal::ZoneList.1145"* %317, %"class.v8::internal::ZoneList.1145"** %11, align 8
  %332 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %261, align 8
  %333 = call fastcc zeroext i1 @_ZN2v88internal12_GLOBAL__N_123LookupPropertyValueNameE9UPropertyPKcbPNS0_8ZoneListINS0_14CharacterRangeEEEPNS0_4ZoneE(i32 59, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0), i1 zeroext false, %"class.v8::internal::ZoneList.1145"* %317, %"class.v8::internal::Zone"* %332)
  %334 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %261, align 8
  %335 = bitcast %"class.v8::internal::Zone"** %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %335) #13
  store %"class.v8::internal::Zone"* %334, %"class.v8::internal::Zone"** %12, align 8
  %336 = call %"class.v8::internal::RegExpCharacterClass"* @_ZN2v88internal4Zone3NewINS0_20RegExpCharacterClassEJPS1_RPNS0_8ZoneListINS0_14CharacterRangeEEERNS_4base5FlagsINS0_8JSRegExp4FlagEiEEEEEPT_DpOT0_(%"class.v8::internal::Zone"* %334, %"class.v8::internal::Zone"** nonnull dereferenceable(8) %12, %"class.v8::internal::ZoneList.1145"** nonnull dereferenceable(8) %11, %"class.v8::base::Flags"* nonnull dereferenceable(4) %3)
  call void @_ZN2v88internal13RegExpBuilder17AddCharacterClassEPNS0_20RegExpCharacterClassE(%"class.v8::internal::RegExpBuilder"* nonnull %8, %"class.v8::internal::RegExpCharacterClass"* %336)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %335) #13
  %337 = call %"class.v8::internal::RegExpTree"* @_ZN2v88internal13RegExpBuilder8ToRegExpEv(%"class.v8::internal::RegExpBuilder"* nonnull %8)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %303) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %270) #13
  br label %338

338:                                              ; preds = %57, %245, %329
  %339 = phi i8* [ %260, %329 ], [ %63, %245 ], [ %30, %57 ]
  %340 = phi %"class.v8::internal::RegExpTree"* [ %337, %329 ], [ %255, %245 ], [ %58, %57 ]
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %339) #13
  br label %341

341:                                              ; preds = %338, %256
  %342 = phi %"class.v8::internal::RegExpTree"* [ null, %256 ], [ %340, %338 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %18) #13
  br label %343

343:                                              ; preds = %2, %341
  %344 = phi %"class.v8::internal::RegExpTree"* [ %342, %341 ], [ null, %2 ]
  ret %"class.v8::internal::RegExpTree"* %344
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal13RegExpBuilder12AddCharacterEt(%"class.v8::internal::RegExpBuilder"*, i16 zeroext) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.v8::internal::Zone"*, align 8
  %4 = alloca %"class.v8::internal::ZoneList.1145"*, align 8
  %5 = alloca %"class.icu_69::UnicodeSet", align 8
  %6 = alloca %"class.v8::internal::Zone"*, align 8
  %7 = alloca %"class.v8::internal::ZoneList.1145"*, align 8
  %8 = alloca i16, align 2
  store i16 %1, i16* %8, align 2
  %9 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 4
  %10 = load i16, i16* %9, align 8
  %11 = icmp eq i16 %10, 0
  br i1 %11, label %27, label %12

12:                                               ; preds = %2
  store i16 0, i16* %9, align 8
  %13 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 0
  %14 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %13, align 8
  %15 = bitcast %"class.v8::internal::Zone"** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15) #13
  store %"class.v8::internal::Zone"* %14, %"class.v8::internal::Zone"** %6, align 8
  %16 = bitcast %"class.v8::internal::ZoneList.1145"** %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #13
  %17 = zext i16 %10 to i64
  %18 = shl nuw nsw i64 %17, 32
  %19 = or i64 %18, %17
  %20 = tail call %"class.v8::internal::ZoneList.1145"* @_ZN2v88internal14CharacterRange4ListEPNS0_4ZoneES1_(%"class.v8::internal::Zone"* %14, i64 %19) #13
  store %"class.v8::internal::ZoneList.1145"* %20, %"class.v8::internal::ZoneList.1145"** %7, align 8
  %21 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 2
  %22 = call %"class.v8::internal::RegExpCharacterClass"* @_ZN2v88internal4Zone3NewINS0_20RegExpCharacterClassEJPS1_PNS0_8ZoneListINS0_14CharacterRangeEEERNS_4base5FlagsINS0_8JSRegExp4FlagEiEEEEEPT_DpOT0_(%"class.v8::internal::Zone"* %14, %"class.v8::internal::Zone"** nonnull dereferenceable(8) %6, %"class.v8::internal::ZoneList.1145"** nonnull dereferenceable(8) %7, %"class.v8::base::Flags"* dereferenceable(4) %21) #13
  %23 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %22, i64 0, i32 0
  call void @_ZN2v88internal13RegExpBuilder9FlushTextEv(%"class.v8::internal::RegExpBuilder"* %0) #13
  %24 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 5
  %25 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %13, align 8
  call void @_ZN2v88internal16BufferedZoneListINS0_10RegExpTreeELi2EE3AddEPS2_PNS0_4ZoneE(%"class.v8::internal::BufferedZoneList"* %24, %"class.v8::internal::RegExpTree"* %23, %"class.v8::internal::Zone"* %25) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15) #13
  %26 = load i16, i16* %8, align 2
  br label %27

27:                                               ; preds = %2, %12
  %28 = phi i16 [ %1, %2 ], [ %26, %12 ]
  %29 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 1
  store i8 0, i8* %29, align 8
  %30 = zext i16 %28 to i32
  %31 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 2, i32 0
  %32 = load i32, i32* %31, align 4
  %33 = and i32 %32, 18
  %34 = icmp eq i32 %33, 18
  br i1 %34, label %35, label %56

35:                                               ; preds = %27
  %36 = bitcast %"class.icu_69::UnicodeSet"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 200, i8* nonnull %36) #13
  call void @_ZN6icu_6910UnicodeSetC1Eii(%"class.icu_69::UnicodeSet"* nonnull %5, i32 %30, i32 %30) #13
  %37 = call dereferenceable(200) %"class.icu_69::UnicodeSet"* @_ZN6icu_6910UnicodeSet9closeOverEi(%"class.icu_69::UnicodeSet"* nonnull %5, i32 2) #13
  %38 = call dereferenceable(200) %"class.icu_69::UnicodeSet"* @_ZN6icu_6910UnicodeSet16removeAllStringsEv(%"class.icu_69::UnicodeSet"* nonnull %5) #13
  %39 = call i32 @_ZNK6icu_6910UnicodeSet4sizeEv(%"class.icu_69::UnicodeSet"* nonnull %5) #13
  %40 = icmp sgt i32 %39, 1
  call void @_ZN6icu_6910UnicodeSetD1Ev(%"class.icu_69::UnicodeSet"* nonnull %5) #13
  call void @llvm.lifetime.end.p0i8(i64 200, i8* nonnull %36) #13
  br i1 %40, label %41, label %56

41:                                               ; preds = %35
  %42 = load i16, i16* %8, align 2
  %43 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 0
  %44 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %43, align 8
  %45 = bitcast %"class.v8::internal::Zone"** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %45) #13
  store %"class.v8::internal::Zone"* %44, %"class.v8::internal::Zone"** %3, align 8
  %46 = bitcast %"class.v8::internal::ZoneList.1145"** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %46) #13
  %47 = zext i16 %42 to i64
  %48 = shl nuw nsw i64 %47, 32
  %49 = or i64 %48, %47
  %50 = call %"class.v8::internal::ZoneList.1145"* @_ZN2v88internal14CharacterRange4ListEPNS0_4ZoneES1_(%"class.v8::internal::Zone"* %44, i64 %49) #13
  store %"class.v8::internal::ZoneList.1145"* %50, %"class.v8::internal::ZoneList.1145"** %4, align 8
  %51 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 2
  %52 = call %"class.v8::internal::RegExpCharacterClass"* @_ZN2v88internal4Zone3NewINS0_20RegExpCharacterClassEJPS1_PNS0_8ZoneListINS0_14CharacterRangeEEERNS_4base5FlagsINS0_8JSRegExp4FlagEiEEEEEPT_DpOT0_(%"class.v8::internal::Zone"* %44, %"class.v8::internal::Zone"** nonnull dereferenceable(8) %3, %"class.v8::internal::ZoneList.1145"** nonnull dereferenceable(8) %4, %"class.v8::base::Flags"* dereferenceable(4) %51) #13
  %53 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %52, i64 0, i32 0
  call void @_ZN2v88internal13RegExpBuilder9FlushTextEv(%"class.v8::internal::RegExpBuilder"* %0) #13
  %54 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 5
  %55 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %43, align 8
  call void @_ZN2v88internal16BufferedZoneListINS0_10RegExpTreeELi2EE3AddEPS2_PNS0_4ZoneE(%"class.v8::internal::BufferedZoneList"* %54, %"class.v8::internal::RegExpTree"* %53, %"class.v8::internal::Zone"* %55) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %46) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %45) #13
  br label %107

56:                                               ; preds = %27, %35
  %57 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 3
  %58 = load %"class.v8::internal::ZoneList.1143"*, %"class.v8::internal::ZoneList.1143"** %57, align 8
  %59 = icmp eq %"class.v8::internal::ZoneList.1143"* %58, null
  br i1 %59, label %60, label %90

60:                                               ; preds = %56
  %61 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 0
  %62 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %61, align 8
  %63 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %62, i64 0, i32 2
  %64 = load i64, i64* %63, align 8
  %65 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %62, i64 0, i32 3
  %66 = load i64, i64* %65, align 8
  %67 = sub i64 %66, %64
  %68 = icmp ult i64 %67, 16
  br i1 %68, label %69, label %71, !prof !3

69:                                               ; preds = %60
  %70 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %62, i64 16) #13
  br label %73

71:                                               ; preds = %60
  %72 = add i64 %64, 16
  store i64 %72, i64* %63, align 8
  br label %73

73:                                               ; preds = %69, %71
  %74 = phi i64 [ %70, %69 ], [ %64, %71 ]
  %75 = inttoptr i64 %74 to %"class.v8::internal::ZoneList.1143"*
  %76 = getelementptr inbounds %"class.v8::internal::ZoneList.1143", %"class.v8::internal::ZoneList.1143"* %75, i64 0, i32 0
  store i16* null, i16** %76, align 8
  %77 = getelementptr inbounds %"class.v8::internal::ZoneList.1143", %"class.v8::internal::ZoneList.1143"* %75, i64 0, i32 1
  store i32 4, i32* %77, align 8
  %78 = getelementptr inbounds %"class.v8::internal::ZoneList.1143", %"class.v8::internal::ZoneList.1143"* %75, i64 0, i32 2
  store i32 0, i32* %78, align 4
  %79 = load i64, i64* %63, align 8
  %80 = load i64, i64* %65, align 8
  %81 = sub i64 %80, %79
  %82 = icmp ult i64 %81, 8
  br i1 %82, label %83, label %85, !prof !3

83:                                               ; preds = %73
  %84 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %62, i64 8) #13
  br label %87

85:                                               ; preds = %73
  %86 = add i64 %79, 8
  store i64 %86, i64* %63, align 8
  br label %87

87:                                               ; preds = %83, %85
  %88 = phi i64 [ %84, %83 ], [ %79, %85 ]
  %89 = inttoptr i64 %88 to i16*
  store i16* %89, i16** %76, align 8
  store %"class.v8::internal::ZoneList.1143"* %75, %"class.v8::internal::ZoneList.1143"** %57, align 8
  br label %90

90:                                               ; preds = %87, %56
  %91 = phi %"class.v8::internal::ZoneList.1143"* [ %75, %87 ], [ %58, %56 ]
  %92 = getelementptr inbounds %"class.v8::internal::ZoneList.1143", %"class.v8::internal::ZoneList.1143"* %91, i64 0, i32 2
  %93 = load i32, i32* %92, align 4
  %94 = getelementptr inbounds %"class.v8::internal::ZoneList.1143", %"class.v8::internal::ZoneList.1143"* %91, i64 0, i32 1
  %95 = load i32, i32* %94, align 8
  %96 = icmp slt i32 %93, %95
  br i1 %96, label %97, label %104

97:                                               ; preds = %90
  %98 = load i16, i16* %8, align 2
  %99 = getelementptr inbounds %"class.v8::internal::ZoneList.1143", %"class.v8::internal::ZoneList.1143"* %91, i64 0, i32 0
  %100 = load i16*, i16** %99, align 8
  %101 = add nsw i32 %93, 1
  store i32 %101, i32* %92, align 4
  %102 = sext i32 %93 to i64
  %103 = getelementptr inbounds i16, i16* %100, i64 %102
  store i16 %98, i16* %103, align 2
  br label %107

104:                                              ; preds = %90
  %105 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 0
  %106 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %105, align 8
  call void @_ZN2v88internal8ZoneListItE17ResizeAddInternalERKtPNS0_4ZoneE(%"class.v8::internal::ZoneList.1143"* %91, i16* nonnull dereferenceable(2) %8, %"class.v8::internal::Zone"* %106) #13
  br label %107

107:                                              ; preds = %104, %97, %41
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2v88internal12RegExpParser23ParseBackReferenceIndexEPi(%"class.v8::internal::RegExpParser"*, i32* nocapture) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 10
  %4 = load i32, i32* %3, align 8
  %5 = add nsw i32 %4, -1
  %6 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 7
  %7 = load %"class.v8::internal::FlatStringReader"*, %"class.v8::internal::FlatStringReader"** %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %7, i64 0, i32 3
  %9 = load i32, i32* %8, align 4
  %10 = icmp slt i32 %4, %9
  br i1 %10, label %13, label %11

11:                                               ; preds = %2
  %12 = add nsw i32 %4, 1
  br label %67

13:                                               ; preds = %2
  %14 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %7, i64 0, i32 2
  %15 = load i8, i8* %14, align 8, !range !2
  %16 = icmp eq i8 %15, 0
  %17 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %7, i64 0, i32 4
  br i1 %16, label %25, label %18

18:                                               ; preds = %13
  %19 = load i8*, i8** %17, align 8
  %20 = sext i32 %4 to i64
  %21 = getelementptr inbounds i8, i8* %19, i64 %20
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i32
  %24 = bitcast i8* %19 to i16*
  br label %33

25:                                               ; preds = %13
  %26 = bitcast i8** %17 to i16**
  %27 = load i16*, i16** %26, align 8
  %28 = sext i32 %4 to i64
  %29 = getelementptr inbounds i16, i16* %27, i64 %28
  %30 = load i16, i16* %29, align 2
  %31 = zext i16 %30 to i32
  %32 = bitcast i16* %27 to i8*
  br label %33

33:                                               ; preds = %25, %18
  %34 = phi i16* [ %24, %18 ], [ %27, %25 ]
  %35 = phi i8* [ %19, %18 ], [ %32, %25 ]
  %36 = phi i32 [ %23, %18 ], [ %31, %25 ]
  %37 = add nsw i32 %4, 1
  %38 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 9, i32 0
  %39 = load i32, i32* %38, align 4
  %40 = and i32 %39, 16
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %67, label %42

42:                                               ; preds = %33
  %43 = icmp slt i32 %37, %9
  %44 = and i32 %36, 64512
  %45 = icmp eq i32 %44, 55296
  %46 = and i1 %43, %45
  br i1 %46, label %47, label %67

47:                                               ; preds = %42
  %48 = sext i32 %37 to i64
  br i1 %16, label %53, label %49

49:                                               ; preds = %47
  %50 = getelementptr inbounds i8, i8* %35, i64 %48
  %51 = load i8, i8* %50, align 1
  %52 = zext i8 %51 to i32
  br label %57

53:                                               ; preds = %47
  %54 = getelementptr inbounds i16, i16* %34, i64 %48
  %55 = load i16, i16* %54, align 2
  %56 = zext i16 %55 to i32
  br label %57

57:                                               ; preds = %53, %49
  %58 = phi i32 [ %52, %49 ], [ %56, %53 ]
  %59 = and i32 %58, 64512
  %60 = icmp eq i32 %59, 56320
  br i1 %60, label %61, label %67

61:                                               ; preds = %57
  %62 = shl nuw nsw i32 %36, 10
  %63 = and i32 %62, 1047552
  %64 = add nuw nsw i32 %63, 65536
  %65 = and i32 %58, 1023
  %66 = or i32 %65, %64
  br label %67

67:                                               ; preds = %11, %33, %42, %57, %61
  %68 = phi i32 [ %12, %11 ], [ %37, %33 ], [ %37, %42 ], [ %37, %57 ], [ %37, %61 ]
  %69 = phi i32 [ 2097152, %11 ], [ %36, %33 ], [ %36, %42 ], [ %36, %57 ], [ %66, %61 ]
  %70 = add i32 %69, -48
  store i32 %68, i32* %3, align 8
  tail call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0) #13
  %71 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 8
  %72 = load i32, i32* %71, align 8
  %73 = add i32 %72, -48
  %74 = icmp ult i32 %73, 10
  br i1 %74, label %75, label %92

75:                                               ; preds = %67, %88
  %76 = phi i32 [ %90, %88 ], [ %73, %67 ]
  %77 = phi i32 [ %79, %88 ], [ %70, %67 ]
  %78 = mul nsw i32 %77, 10
  %79 = add i32 %76, %78
  %80 = icmp sgt i32 %79, 65536
  br i1 %80, label %81, label %88

81:                                               ; preds = %75
  store i32 %5, i32* %3, align 8
  %82 = load %"class.v8::internal::FlatStringReader"*, %"class.v8::internal::FlatStringReader"** %6, align 8
  %83 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %82, i64 0, i32 3
  %84 = load i32, i32* %83, align 4
  %85 = icmp sge i32 %84, %4
  %86 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 13
  %87 = zext i1 %85 to i8
  store i8 %87, i8* %86, align 4
  tail call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0) #13
  br label %114

88:                                               ; preds = %75
  tail call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0)
  %89 = load i32, i32* %71, align 8
  %90 = add i32 %89, -48
  %91 = icmp ult i32 %90, 10
  br i1 %91, label %75, label %92

92:                                               ; preds = %88, %67
  %93 = phi i32 [ %70, %67 ], [ %79, %88 ]
  %94 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 11
  %95 = load i32, i32* %94, align 4
  %96 = icmp sgt i32 %93, %95
  br i1 %96, label %97, label %113

97:                                               ; preds = %92
  %98 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 16
  %99 = load i8, i8* %98, align 1, !range !2
  %100 = icmp eq i8 %99, 0
  br i1 %100, label %101, label %102

101:                                              ; preds = %97
  tail call void @_ZN2v88internal12RegExpParser15ScanForCapturesEv(%"class.v8::internal::RegExpParser"* %0)
  br label %102

102:                                              ; preds = %97, %101
  %103 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 12
  %104 = load i32, i32* %103, align 8
  %105 = icmp sgt i32 %93, %104
  br i1 %105, label %106, label %113

106:                                              ; preds = %102
  store i32 %5, i32* %3, align 8
  %107 = load %"class.v8::internal::FlatStringReader"*, %"class.v8::internal::FlatStringReader"** %6, align 8
  %108 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %107, i64 0, i32 3
  %109 = load i32, i32* %108, align 4
  %110 = icmp sge i32 %109, %4
  %111 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 13
  %112 = zext i1 %110 to i8
  store i8 %112, i8* %111, align 4
  tail call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0) #13
  br label %114

113:                                              ; preds = %102, %92
  store i32 %93, i32* %1, align 4
  br label %114

114:                                              ; preds = %81, %113, %106
  %115 = phi i1 [ false, %106 ], [ true, %113 ], [ false, %81 ]
  ret i1 %115
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZN2v88internal12RegExpParser17RegExpParserState20IsInsideCaptureGroupEi(%"class.v8::internal::RegExpParser::RegExpParserState"* readonly, i32) local_unnamed_addr #2 align 2 {
  %3 = icmp eq %"class.v8::internal::RegExpParser::RegExpParserState"* %0, null
  br i1 %3, label %19, label %4

4:                                                ; preds = %2, %15
  %5 = phi %"class.v8::internal::RegExpParser::RegExpParserState"* [ %17, %15 ], [ %0, %2 ]
  %6 = getelementptr inbounds %"class.v8::internal::RegExpParser::RegExpParserState", %"class.v8::internal::RegExpParser::RegExpParserState"* %5, i64 0, i32 2
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 1
  br i1 %8, label %9, label %15

9:                                                ; preds = %4
  %10 = getelementptr inbounds %"class.v8::internal::RegExpParser::RegExpParserState", %"class.v8::internal::RegExpParser::RegExpParserState"* %5, i64 0, i32 4
  %11 = load i32, i32* %10, align 8
  %12 = icmp eq i32 %11, %1
  br i1 %12, label %19, label %13

13:                                               ; preds = %9
  %14 = icmp slt i32 %11, %1
  br i1 %14, label %19, label %15

15:                                               ; preds = %4, %13
  %16 = getelementptr inbounds %"class.v8::internal::RegExpParser::RegExpParserState", %"class.v8::internal::RegExpParser::RegExpParserState"* %5, i64 0, i32 0
  %17 = load %"class.v8::internal::RegExpParser::RegExpParserState"*, %"class.v8::internal::RegExpParser::RegExpParserState"** %16, align 8
  %18 = icmp eq %"class.v8::internal::RegExpParser::RegExpParserState"* %17, null
  br i1 %18, label %19, label %4

19:                                               ; preds = %15, %9, %13, %2
  %20 = phi i1 [ false, %2 ], [ false, %13 ], [ true, %9 ], [ false, %15 ]
  ret i1 %20
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN2v88internal13RegExpBuilder8AddEmptyEv(%"class.v8::internal::RegExpBuilder"* nocapture) local_unnamed_addr #7 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 1
  store i8 1, i8* %2, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2v88internal12RegExpParser17ParseOctalLiteralEv(%"class.v8::internal::RegExpParser"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 8
  %3 = load i32, i32* %2, align 8
  %4 = add i32 %3, -48
  tail call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0)
  %5 = load i32, i32* %2, align 8
  %6 = and i32 %5, -8
  %7 = icmp eq i32 %6, 48
  br i1 %7, label %8, label %21

8:                                                ; preds = %1
  %9 = shl i32 %4, 3
  %10 = add i32 %5, -48
  %11 = add i32 %10, %9
  tail call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0)
  %12 = icmp ult i32 %11, 32
  br i1 %12, label %13, label %21

13:                                               ; preds = %8
  %14 = load i32, i32* %2, align 8
  %15 = and i32 %14, -8
  %16 = icmp eq i32 %15, 48
  br i1 %16, label %17, label %21

17:                                               ; preds = %13
  %18 = shl i32 %11, 3
  %19 = add nsw i32 %18, -48
  %20 = add i32 %19, %14
  tail call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0)
  br label %21

21:                                               ; preds = %8, %13, %17, %1
  %22 = phi i32 [ %20, %17 ], [ %11, %13 ], [ %11, %8 ], [ %4, %1 ]
  ret i32 %22
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2v88internal12RegExpParser14ParseHexEscapeEiPj(%"class.v8::internal::RegExpParser"*, i32, i32* nocapture) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 10
  %5 = load i32, i32* %4, align 8
  %6 = add nsw i32 %5, -1
  %7 = icmp sgt i32 %1, 0
  br i1 %7, label %8, label %37

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 8
  br label %10

10:                                               ; preds = %23, %8
  %11 = phi i32 [ 0, %8 ], [ %26, %23 ]
  %12 = phi i32 [ 0, %8 ], [ %27, %23 ]
  %13 = load i32, i32* %9, align 8
  %14 = add i32 %13, -48
  %15 = icmp ult i32 %14, 10
  br i1 %15, label %23, label %16

16:                                               ; preds = %10
  %17 = or i32 %14, 32
  %18 = add i32 %17, -49
  %19 = icmp ugt i32 %18, 5
  %20 = add i32 %17, -39
  %21 = icmp slt i32 %20, 0
  %22 = or i1 %19, %21
  br i1 %22, label %29, label %23

23:                                               ; preds = %16, %10
  %24 = phi i32 [ %14, %10 ], [ %20, %16 ]
  %25 = shl i32 %11, 4
  %26 = add i32 %24, %25
  tail call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0)
  %27 = add nuw nsw i32 %12, 1
  %28 = icmp eq i32 %27, %1
  br i1 %28, label %37, label %10

29:                                               ; preds = %16
  store i32 %6, i32* %4, align 8
  %30 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 7
  %31 = load %"class.v8::internal::FlatStringReader"*, %"class.v8::internal::FlatStringReader"** %30, align 8
  %32 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %31, i64 0, i32 3
  %33 = load i32, i32* %32, align 4
  %34 = icmp sge i32 %33, %5
  %35 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 13
  %36 = zext i1 %34 to i8
  store i8 %36, i8* %35, align 4
  tail call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0) #13
  br label %39

37:                                               ; preds = %23, %3
  %38 = phi i32 [ 0, %3 ], [ %26, %23 ]
  store i32 %38, i32* %2, align 4
  br label %39

39:                                               ; preds = %29, %37
  %40 = phi i1 [ true, %37 ], [ false, %29 ]
  ret i1 %40
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2v88internal12RegExpParser18ParseUnicodeEscapeEPj(%"class.v8::internal::RegExpParser"*, i32* nocapture) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 8
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, 123
  br i1 %5, label %6, label %57

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 9, i32 0
  %8 = load i32, i32* %7, align 4
  %9 = and i32 %8, 16
  %10 = icmp eq i32 %9, 0
  %11 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 10
  %12 = load i32, i32* %11, align 8
  %13 = add nsw i32 %12, -1
  br i1 %10, label %75, label %14

14:                                               ; preds = %6
  tail call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0)
  %15 = load i32, i32* %3, align 8
  %16 = add i32 %15, -48
  %17 = icmp ult i32 %16, 10
  br i1 %17, label %25, label %18

18:                                               ; preds = %14
  %19 = or i32 %16, 32
  %20 = add i32 %19, -49
  %21 = icmp ugt i32 %20, 5
  %22 = add i32 %19, -39
  %23 = icmp slt i32 %22, 0
  %24 = or i1 %21, %23
  br i1 %24, label %49, label %25

25:                                               ; preds = %18, %14
  %26 = phi i32 [ %22, %18 ], [ %16, %14 ]
  br label %27

27:                                               ; preds = %25, %42
  %28 = phi i32 [ %43, %42 ], [ %26, %25 ]
  %29 = phi i32 [ %31, %42 ], [ 0, %25 ]
  %30 = shl i32 %29, 4
  %31 = add i32 %30, %28
  %32 = icmp ugt i32 %31, 1114111
  br i1 %32, label %49, label %33

33:                                               ; preds = %27
  tail call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0) #13
  %34 = load i32, i32* %3, align 8
  %35 = add i32 %34, -48
  %36 = icmp ult i32 %35, 10
  br i1 %36, label %42, label %37

37:                                               ; preds = %33
  %38 = or i32 %35, 32
  %39 = add i32 %38, -49
  %40 = icmp ult i32 %39, 6
  %41 = add i32 %38, -39
  br i1 %40, label %42, label %45

42:                                               ; preds = %37, %33
  %43 = phi i32 [ %35, %33 ], [ %41, %37 ]
  %44 = icmp sgt i32 %43, -1
  br i1 %44, label %27, label %45

45:                                               ; preds = %42, %37
  store i32 %31, i32* %1, align 4
  %46 = load i32, i32* %3, align 8
  %47 = icmp eq i32 %46, 125
  br i1 %47, label %48, label %49

48:                                               ; preds = %45
  tail call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0)
  br label %176

49:                                               ; preds = %27, %18, %45
  store i32 %13, i32* %11, align 8
  %50 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 7
  %51 = load %"class.v8::internal::FlatStringReader"*, %"class.v8::internal::FlatStringReader"** %50, align 8
  %52 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %51, i64 0, i32 3
  %53 = load i32, i32* %52, align 4
  %54 = icmp sge i32 %53, %12
  %55 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 13
  %56 = zext i1 %54 to i8
  store i8 %56, i8* %55, align 4
  tail call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0) #13
  br label %176

57:                                               ; preds = %2
  %58 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 10
  %59 = load i32, i32* %58, align 8
  %60 = add nsw i32 %59, -1
  %61 = add i32 %4, -48
  %62 = icmp ult i32 %61, 10
  br i1 %62, label %70, label %63

63:                                               ; preds = %57
  %64 = or i32 %61, 32
  %65 = add i32 %64, -49
  %66 = icmp ugt i32 %65, 5
  %67 = add i32 %64, -39
  %68 = icmp slt i32 %67, 0
  %69 = or i1 %66, %68
  br i1 %69, label %75, label %70

70:                                               ; preds = %63, %57
  %71 = phi i32 [ %61, %57 ], [ %67, %63 ]
  tail call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0) #13
  %72 = load i32, i32* %3, align 8
  %73 = add i32 %72, -48
  %74 = icmp ult i32 %73, 10
  br i1 %74, label %226, label %219

75:                                               ; preds = %6, %247, %233, %219, %63
  %76 = phi i32 [ %60, %247 ], [ %60, %233 ], [ %60, %219 ], [ %60, %63 ], [ %13, %6 ]
  %77 = phi i32 [ %59, %247 ], [ %59, %233 ], [ %59, %219 ], [ %59, %63 ], [ %12, %6 ]
  %78 = phi i32* [ %58, %247 ], [ %58, %233 ], [ %58, %219 ], [ %58, %63 ], [ %11, %6 ]
  store i32 %76, i32* %78, align 8
  %79 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 7
  %80 = load %"class.v8::internal::FlatStringReader"*, %"class.v8::internal::FlatStringReader"** %79, align 8
  %81 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %80, i64 0, i32 3
  %82 = load i32, i32* %81, align 4
  %83 = icmp sge i32 %82, %77
  %84 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 13
  %85 = zext i1 %83 to i8
  store i8 %85, i8* %84, align 4
  tail call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0) #13
  br label %176

86:                                               ; preds = %254
  %87 = load i32, i32* %3, align 8
  %88 = icmp eq i32 %87, 92
  br i1 %88, label %89, label %176

89:                                               ; preds = %86
  %90 = load i32, i32* %58, align 8
  %91 = add nsw i32 %90, -1
  %92 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 7
  %93 = load %"class.v8::internal::FlatStringReader"*, %"class.v8::internal::FlatStringReader"** %92, align 8
  %94 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %93, i64 0, i32 3
  %95 = load i32, i32* %94, align 4
  %96 = icmp slt i32 %90, %95
  br i1 %96, label %97, label %162

97:                                               ; preds = %89
  %98 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %93, i64 0, i32 2
  %99 = load i8, i8* %98, align 8, !range !2
  %100 = icmp eq i8 %99, 0
  %101 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %93, i64 0, i32 4
  br i1 %100, label %109, label %102

102:                                              ; preds = %97
  %103 = load i8*, i8** %101, align 8
  %104 = sext i32 %90 to i64
  %105 = getelementptr inbounds i8, i8* %103, i64 %104
  %106 = load i8, i8* %105, align 1
  %107 = zext i8 %106 to i32
  %108 = bitcast i8* %103 to i16*
  br label %116

109:                                              ; preds = %97
  %110 = bitcast i8** %101 to i16**
  %111 = load i16*, i16** %110, align 8
  %112 = sext i32 %90 to i64
  %113 = getelementptr inbounds i16, i16* %111, i64 %112
  %114 = load i16, i16* %113, align 2
  %115 = zext i16 %114 to i32
  br label %116

116:                                              ; preds = %102, %109
  %117 = phi i16* [ %108, %102 ], [ %111, %109 ]
  %118 = phi i32 [ %107, %102 ], [ %115, %109 ]
  %119 = add nsw i32 %90, 1
  %120 = icmp slt i32 %119, %95
  %121 = and i32 %118, 64512
  %122 = icmp eq i32 %121, 55296
  %123 = and i1 %120, %122
  br i1 %123, label %124, label %135

124:                                              ; preds = %116
  br i1 %100, label %125, label %131

125:                                              ; preds = %124
  %126 = sext i32 %119 to i64
  %127 = getelementptr inbounds i16, i16* %117, i64 %126
  %128 = load i16, i16* %127, align 2
  %129 = and i16 %128, -1024
  %130 = icmp ne i16 %129, -9216
  br label %131

131:                                              ; preds = %124, %125
  %132 = phi i1 [ %130, %125 ], [ true, %124 ]
  %133 = icmp eq i32 %118, 117
  %134 = and i1 %133, %132
  br i1 %134, label %137, label %162

135:                                              ; preds = %116
  %136 = icmp eq i32 %118, 117
  br i1 %136, label %137, label %162

137:                                              ; preds = %131, %135
  store i32 %119, i32* %58, align 8
  tail call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0) #13
  %138 = load i32, i32* %58, align 8
  %139 = add nsw i32 %138, -1
  %140 = load i32, i32* %3, align 8
  %141 = add i32 %140, -48
  %142 = icmp ult i32 %141, 10
  br i1 %142, label %150, label %143

143:                                              ; preds = %137
  %144 = or i32 %141, 32
  %145 = add i32 %144, -49
  %146 = icmp ugt i32 %145, 5
  %147 = add i32 %144, -39
  %148 = icmp slt i32 %147, 0
  %149 = or i1 %146, %148
  br i1 %149, label %155, label %150

150:                                              ; preds = %143, %137
  %151 = phi i32 [ %141, %137 ], [ %147, %143 ]
  tail call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0) #13
  %152 = load i32, i32* %3, align 8
  %153 = add i32 %152, -48
  %154 = icmp ult i32 %153, 10
  br i1 %154, label %185, label %178

155:                                              ; preds = %206, %192, %178, %143
  store i32 %139, i32* %58, align 8
  %156 = load %"class.v8::internal::FlatStringReader"*, %"class.v8::internal::FlatStringReader"** %92, align 8
  %157 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %156, i64 0, i32 3
  %158 = load i32, i32* %157, align 4
  %159 = icmp sge i32 %158, %138
  %160 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 13
  %161 = zext i1 %159 to i8
  store i8 %161, i8* %160, align 4
  tail call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0) #13
  br label %162

162:                                              ; preds = %131, %135, %89, %213, %155
  store i32 %91, i32* %58, align 8
  %163 = load %"class.v8::internal::FlatStringReader"*, %"class.v8::internal::FlatStringReader"** %92, align 8
  %164 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %163, i64 0, i32 3
  %165 = load i32, i32* %164, align 4
  %166 = icmp sge i32 %165, %90
  %167 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 13
  %168 = zext i1 %166 to i8
  store i8 %168, i8* %167, align 4
  tail call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0) #13
  br label %176

169:                                              ; preds = %213
  %170 = load i32, i32* %1, align 4
  %171 = shl i32 %170, 10
  %172 = and i32 %171, 1047552
  %173 = add nuw nsw i32 %172, 65536
  %174 = and i32 %216, 1023
  %175 = or i32 %173, %174
  store i32 %175, i32* %1, align 4
  br label %176

176:                                              ; preds = %254, %86, %75, %162, %169, %48, %49
  %177 = phi i1 [ true, %48 ], [ false, %49 ], [ true, %169 ], [ true, %86 ], [ true, %254 ], [ false, %75 ], [ true, %162 ]
  ret i1 %177

178:                                              ; preds = %150
  %179 = or i32 %153, 32
  %180 = add i32 %179, -49
  %181 = icmp ugt i32 %180, 5
  %182 = add i32 %179, -39
  %183 = icmp slt i32 %182, 0
  %184 = or i1 %181, %183
  br i1 %184, label %155, label %185

185:                                              ; preds = %178, %150
  %186 = phi i32 [ %153, %150 ], [ %182, %178 ]
  %187 = shl i32 %151, 4
  %188 = add i32 %186, %187
  tail call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0) #13
  %189 = load i32, i32* %3, align 8
  %190 = add i32 %189, -48
  %191 = icmp ult i32 %190, 10
  br i1 %191, label %199, label %192

192:                                              ; preds = %185
  %193 = or i32 %190, 32
  %194 = add i32 %193, -49
  %195 = icmp ugt i32 %194, 5
  %196 = add i32 %193, -39
  %197 = icmp slt i32 %196, 0
  %198 = or i1 %195, %197
  br i1 %198, label %155, label %199

199:                                              ; preds = %192, %185
  %200 = phi i32 [ %190, %185 ], [ %196, %192 ]
  %201 = shl i32 %188, 4
  %202 = add i32 %200, %201
  tail call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0) #13
  %203 = load i32, i32* %3, align 8
  %204 = add i32 %203, -48
  %205 = icmp ult i32 %204, 10
  br i1 %205, label %213, label %206

206:                                              ; preds = %199
  %207 = or i32 %204, 32
  %208 = add i32 %207, -49
  %209 = icmp ugt i32 %208, 5
  %210 = add i32 %207, -39
  %211 = icmp slt i32 %210, 0
  %212 = or i1 %209, %211
  br i1 %212, label %155, label %213

213:                                              ; preds = %206, %199
  %214 = phi i32 [ %204, %199 ], [ %210, %206 ]
  %215 = shl i32 %202, 4
  %216 = add i32 %214, %215
  tail call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0) #13
  %217 = and i32 %216, 64512
  %218 = icmp eq i32 %217, 56320
  br i1 %218, label %169, label %162

219:                                              ; preds = %70
  %220 = or i32 %73, 32
  %221 = add i32 %220, -49
  %222 = icmp ugt i32 %221, 5
  %223 = add i32 %220, -39
  %224 = icmp slt i32 %223, 0
  %225 = or i1 %222, %224
  br i1 %225, label %75, label %226

226:                                              ; preds = %219, %70
  %227 = phi i32 [ %73, %70 ], [ %223, %219 ]
  %228 = shl i32 %71, 4
  %229 = add i32 %227, %228
  tail call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0) #13
  %230 = load i32, i32* %3, align 8
  %231 = add i32 %230, -48
  %232 = icmp ult i32 %231, 10
  br i1 %232, label %240, label %233

233:                                              ; preds = %226
  %234 = or i32 %231, 32
  %235 = add i32 %234, -49
  %236 = icmp ugt i32 %235, 5
  %237 = add i32 %234, -39
  %238 = icmp slt i32 %237, 0
  %239 = or i1 %236, %238
  br i1 %239, label %75, label %240

240:                                              ; preds = %233, %226
  %241 = phi i32 [ %231, %226 ], [ %237, %233 ]
  %242 = shl i32 %229, 4
  %243 = add i32 %241, %242
  tail call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0) #13
  %244 = load i32, i32* %3, align 8
  %245 = add i32 %244, -48
  %246 = icmp ult i32 %245, 10
  br i1 %246, label %254, label %247

247:                                              ; preds = %240
  %248 = or i32 %245, 32
  %249 = add i32 %248, -49
  %250 = icmp ugt i32 %249, 5
  %251 = add i32 %248, -39
  %252 = icmp slt i32 %251, 0
  %253 = or i1 %250, %252
  br i1 %253, label %75, label %254

254:                                              ; preds = %247, %240
  %255 = phi i32 [ %245, %240 ], [ %251, %247 ]
  %256 = shl i32 %243, 4
  %257 = add i32 %255, %256
  tail call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0) #13
  store i32 %257, i32* %1, align 4
  %258 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 9, i32 0
  %259 = load i32, i32* %258, align 4
  %260 = and i32 %259, 16
  %261 = icmp ne i32 %260, 0
  %262 = and i32 %257, 64512
  %263 = icmp eq i32 %262, 55296
  %264 = and i1 %261, %263
  br i1 %264, label %86, label %176
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal13RegExpBuilder26AddEscapedUnicodeCharacterEj(%"class.v8::internal::RegExpBuilder"*, i32) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.v8::internal::Zone"*, align 8
  %4 = alloca %"class.v8::internal::ZoneList.1145"*, align 8
  %5 = alloca %"class.v8::internal::Zone"*, align 8
  %6 = alloca %"class.v8::internal::ZoneList.1145"*, align 8
  %7 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 4
  %8 = load i16, i16* %7, align 8
  %9 = icmp eq i16 %8, 0
  br i1 %9, label %24, label %10

10:                                               ; preds = %2
  store i16 0, i16* %7, align 8
  %11 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 0
  %12 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %11, align 8
  %13 = bitcast %"class.v8::internal::Zone"** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %13) #13
  store %"class.v8::internal::Zone"* %12, %"class.v8::internal::Zone"** %5, align 8
  %14 = bitcast %"class.v8::internal::ZoneList.1145"** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %14) #13
  %15 = zext i16 %8 to i64
  %16 = shl nuw nsw i64 %15, 32
  %17 = or i64 %16, %15
  %18 = tail call %"class.v8::internal::ZoneList.1145"* @_ZN2v88internal14CharacterRange4ListEPNS0_4ZoneES1_(%"class.v8::internal::Zone"* %12, i64 %17) #13
  store %"class.v8::internal::ZoneList.1145"* %18, %"class.v8::internal::ZoneList.1145"** %6, align 8
  %19 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 2
  %20 = call %"class.v8::internal::RegExpCharacterClass"* @_ZN2v88internal4Zone3NewINS0_20RegExpCharacterClassEJPS1_PNS0_8ZoneListINS0_14CharacterRangeEEERNS_4base5FlagsINS0_8JSRegExp4FlagEiEEEEEPT_DpOT0_(%"class.v8::internal::Zone"* %12, %"class.v8::internal::Zone"** nonnull dereferenceable(8) %5, %"class.v8::internal::ZoneList.1145"** nonnull dereferenceable(8) %6, %"class.v8::base::Flags"* dereferenceable(4) %19) #13
  %21 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %20, i64 0, i32 0
  call void @_ZN2v88internal13RegExpBuilder9FlushTextEv(%"class.v8::internal::RegExpBuilder"* %0) #13
  %22 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 5
  %23 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %11, align 8
  call void @_ZN2v88internal16BufferedZoneListINS0_10RegExpTreeELi2EE3AddEPS2_PNS0_4ZoneE(%"class.v8::internal::BufferedZoneList"* %22, %"class.v8::internal::RegExpTree"* %21, %"class.v8::internal::Zone"* %23) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %14) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %13) #13
  br label %24

24:                                               ; preds = %2, %10
  call void @_ZN2v88internal13RegExpBuilder19AddUnicodeCharacterEj(%"class.v8::internal::RegExpBuilder"* %0, i32 %1)
  %25 = load i16, i16* %7, align 8
  %26 = icmp eq i16 %25, 0
  br i1 %26, label %41, label %27

27:                                               ; preds = %24
  store i16 0, i16* %7, align 8
  %28 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 0
  %29 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %28, align 8
  %30 = bitcast %"class.v8::internal::Zone"** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %30) #13
  store %"class.v8::internal::Zone"* %29, %"class.v8::internal::Zone"** %3, align 8
  %31 = bitcast %"class.v8::internal::ZoneList.1145"** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %31) #13
  %32 = zext i16 %25 to i64
  %33 = shl nuw nsw i64 %32, 32
  %34 = or i64 %33, %32
  %35 = call %"class.v8::internal::ZoneList.1145"* @_ZN2v88internal14CharacterRange4ListEPNS0_4ZoneES1_(%"class.v8::internal::Zone"* %29, i64 %34) #13
  store %"class.v8::internal::ZoneList.1145"* %35, %"class.v8::internal::ZoneList.1145"** %4, align 8
  %36 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 2
  %37 = call %"class.v8::internal::RegExpCharacterClass"* @_ZN2v88internal4Zone3NewINS0_20RegExpCharacterClassEJPS1_PNS0_8ZoneListINS0_14CharacterRangeEEERNS_4base5FlagsINS0_8JSRegExp4FlagEiEEEEEPT_DpOT0_(%"class.v8::internal::Zone"* %29, %"class.v8::internal::Zone"** nonnull dereferenceable(8) %3, %"class.v8::internal::ZoneList.1145"** nonnull dereferenceable(8) %4, %"class.v8::base::Flags"* dereferenceable(4) %36) #13
  %38 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %37, i64 0, i32 0
  call void @_ZN2v88internal13RegExpBuilder9FlushTextEv(%"class.v8::internal::RegExpBuilder"* %0) #13
  %39 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 5
  %40 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %28, align 8
  call void @_ZN2v88internal16BufferedZoneListINS0_10RegExpTreeELi2EE3AddEPS2_PNS0_4ZoneE(%"class.v8::internal::BufferedZoneList"* %39, %"class.v8::internal::RegExpTree"* %38, %"class.v8::internal::Zone"* %40) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %31) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %30) #13
  br label %41

41:                                               ; preds = %24, %27
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2v88internal12RegExpParser16HasNamedCapturesEv(%"class.v8::internal::RegExpParser"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 17
  %3 = load i8, i8* %2, align 8, !range !2
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %5, label %12

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 16
  %7 = load i8, i8* %6, align 1, !range !2
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %9, label %12

9:                                                ; preds = %5
  tail call void @_ZN2v88internal12RegExpParser15ScanForCapturesEv(%"class.v8::internal::RegExpParser"* %0)
  %10 = load i8, i8* %2, align 8, !range !2
  %11 = icmp ne i8 %10, 0
  br label %12

12:                                               ; preds = %1, %5, %9
  %13 = phi i1 [ true, %1 ], [ false, %5 ], [ %11, %9 ]
  ret i1 %13
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2v88internal12RegExpParser23ParseNamedBackReferenceEPNS0_13RegExpBuilderEPNS1_17RegExpParserStateE(%"class.v8::internal::RegExpParser"*, %"class.v8::internal::RegExpBuilder"*, %"class.v8::internal::RegExpParser::RegExpParserState"* readonly) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 8
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %5, 60
  br i1 %6, label %21, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 18
  %9 = load i8, i8* %8, align 1, !range !2
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %11, label %199

11:                                               ; preds = %7
  store i8 1, i8* %8, align 1
  %12 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 2
  store i32 24, i32* %12, align 8
  %13 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 10
  %14 = load i32, i32* %13, align 8
  %15 = add nsw i32 %14, -1
  %16 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 3
  store i32 %15, i32* %16, align 4
  store i32 2097152, i32* %4, align 8
  %17 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 7
  %18 = load %"class.v8::internal::FlatStringReader"*, %"class.v8::internal::FlatStringReader"** %17, align 8
  %19 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %18, i64 0, i32 3
  %20 = load i32, i32* %19, align 4
  store i32 %20, i32* %13, align 8
  br label %199

21:                                               ; preds = %3
  tail call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0)
  %22 = tail call %"class.v8::internal::ZoneVector"* @_ZN2v88internal12RegExpParser21ParseCaptureGroupNameEv(%"class.v8::internal::RegExpParser"* %0)
  %23 = icmp eq %"class.v8::internal::ZoneVector"* %22, null
  br i1 %23, label %199, label %24

24:                                               ; preds = %21
  %25 = icmp eq %"class.v8::internal::RegExpParser::RegExpParserState"* %2, null
  br i1 %25, label %68, label %26

26:                                               ; preds = %24
  %27 = getelementptr inbounds %"class.v8::internal::ZoneVector", %"class.v8::internal::ZoneVector"* %22, i64 0, i32 0, i32 0, i32 1
  %28 = bitcast i16** %27 to i64*
  %29 = bitcast %"class.v8::internal::ZoneVector"* %22 to i64*
  br label %30

30:                                               ; preds = %62, %26
  %31 = phi %"class.v8::internal::RegExpParser::RegExpParserState"* [ %2, %26 ], [ %64, %62 ]
  %32 = getelementptr inbounds %"class.v8::internal::RegExpParser::RegExpParserState", %"class.v8::internal::RegExpParser::RegExpParserState"* %31, i64 0, i32 5
  %33 = load %"class.v8::internal::ZoneVector"*, %"class.v8::internal::ZoneVector"** %32, align 8
  %34 = icmp eq %"class.v8::internal::ZoneVector"* %33, null
  br i1 %34, label %62, label %35

35:                                               ; preds = %30
  %36 = getelementptr inbounds %"class.v8::internal::ZoneVector", %"class.v8::internal::ZoneVector"* %33, i64 0, i32 0, i32 0, i32 1
  %37 = bitcast i16** %36 to i64*
  %38 = load i64, i64* %37, align 8
  %39 = bitcast %"class.v8::internal::ZoneVector"* %33 to i64*
  %40 = load i64, i64* %39, align 8
  %41 = sub i64 %38, %40
  %42 = load i64, i64* %28, align 8
  %43 = load i64, i64* %29, align 8
  %44 = sub i64 %42, %43
  %45 = icmp eq i64 %41, %44
  %46 = inttoptr i64 %40 to i16*
  %47 = inttoptr i64 %38 to i16*
  br i1 %45, label %48, label %62

48:                                               ; preds = %35
  %49 = icmp eq i16* %46, %47
  br i1 %49, label %66, label %50

50:                                               ; preds = %48
  %51 = inttoptr i64 %43 to i16*
  br label %52

52:                                               ; preds = %58, %50
  %53 = phi i16* [ %60, %58 ], [ %51, %50 ]
  %54 = phi i16* [ %59, %58 ], [ %46, %50 ]
  %55 = load i16, i16* %54, align 2
  %56 = load i16, i16* %53, align 2
  %57 = icmp eq i16 %55, %56
  br i1 %57, label %58, label %62

58:                                               ; preds = %52
  %59 = getelementptr inbounds i16, i16* %54, i64 1
  %60 = getelementptr inbounds i16, i16* %53, i64 1
  %61 = icmp eq i16* %59, %47
  br i1 %61, label %66, label %52

62:                                               ; preds = %52, %35, %30
  %63 = getelementptr inbounds %"class.v8::internal::RegExpParser::RegExpParserState", %"class.v8::internal::RegExpParser::RegExpParserState"* %31, i64 0, i32 0
  %64 = load %"class.v8::internal::RegExpParser::RegExpParserState"*, %"class.v8::internal::RegExpParser::RegExpParserState"** %63, align 8
  %65 = icmp eq %"class.v8::internal::RegExpParser::RegExpParserState"* %64, null
  br i1 %65, label %68, label %30

66:                                               ; preds = %48, %58
  %67 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %1, i64 0, i32 1
  store i8 1, i8* %67, align 8
  br label %199

68:                                               ; preds = %62, %24
  %69 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 1
  %70 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %69, align 8
  %71 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %1, i64 0, i32 2, i32 0
  %72 = load i32, i32* %71, align 4
  %73 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %70, i64 0, i32 2
  %74 = load i64, i64* %73, align 8
  %75 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %70, i64 0, i32 3
  %76 = load i64, i64* %75, align 8
  %77 = sub i64 %76, %74
  %78 = icmp ult i64 %77, 32
  br i1 %78, label %79, label %81, !prof !3

79:                                               ; preds = %68
  %80 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %70, i64 32) #13
  br label %83

81:                                               ; preds = %68
  %82 = add i64 %74, 32
  store i64 %82, i64* %73, align 8
  br label %83

83:                                               ; preds = %79, %81
  %84 = phi i64 [ %80, %79 ], [ %74, %81 ]
  %85 = inttoptr i64 %84 to %"class.v8::internal::RegExpBackReference"*
  %86 = getelementptr inbounds %"class.v8::internal::RegExpBackReference", %"class.v8::internal::RegExpBackReference"* %85, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [37 x i8*] }, { [37 x i8*] }* @_ZTVN2v88internal19RegExpBackReferenceE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %86, align 8
  %87 = getelementptr inbounds %"class.v8::internal::RegExpBackReference", %"class.v8::internal::RegExpBackReference"* %85, i64 0, i32 1
  %88 = getelementptr inbounds %"class.v8::internal::RegExpBackReference", %"class.v8::internal::RegExpBackReference"* %85, i64 0, i32 3, i32 0
  %89 = bitcast %"class.v8::internal::RegExpCapture"** %87 to i64*
  store i64 0, i64* %89, align 8
  store i32 %72, i32* %88, align 8
  %90 = getelementptr inbounds %"class.v8::internal::RegExpBackReference", %"class.v8::internal::RegExpBackReference"* %85, i64 0, i32 2
  store %"class.v8::internal::ZoneVector"* %22, %"class.v8::internal::ZoneVector"** %90, align 8
  %91 = inttoptr i64 %84 to %"class.v8::internal::RegExpTree"*
  %92 = inttoptr i64 %84 to i1 (%"class.v8::internal::RegExpTree"*)***
  %93 = load i1 (%"class.v8::internal::RegExpTree"*)**, i1 (%"class.v8::internal::RegExpTree"*)*** %92, align 8
  %94 = getelementptr inbounds i1 (%"class.v8::internal::RegExpTree"*)*, i1 (%"class.v8::internal::RegExpTree"*)** %93, i64 32
  %95 = load i1 (%"class.v8::internal::RegExpTree"*)*, i1 (%"class.v8::internal::RegExpTree"*)** %94, align 8
  %96 = tail call zeroext i1 %95(%"class.v8::internal::RegExpTree"* %91) #13
  br i1 %96, label %97, label %99

97:                                               ; preds = %83
  %98 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %1, i64 0, i32 1
  store i8 1, i8* %98, align 8
  br label %112

99:                                               ; preds = %83
  %100 = load i1 (%"class.v8::internal::RegExpTree"*)**, i1 (%"class.v8::internal::RegExpTree"*)*** %92, align 8
  %101 = getelementptr inbounds i1 (%"class.v8::internal::RegExpTree"*)*, i1 (%"class.v8::internal::RegExpTree"*)** %100, i64 4
  %102 = load i1 (%"class.v8::internal::RegExpTree"*)*, i1 (%"class.v8::internal::RegExpTree"*)** %101, align 8
  %103 = tail call zeroext i1 %102(%"class.v8::internal::RegExpTree"* %91) #13
  br i1 %103, label %104, label %108

104:                                              ; preds = %99
  tail call void @_ZN2v88internal13RegExpBuilder15FlushCharactersEv(%"class.v8::internal::RegExpBuilder"* %1) #13
  %105 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %1, i64 0, i32 6
  %106 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %1, i64 0, i32 0
  %107 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %106, align 8
  tail call void @_ZN2v88internal16BufferedZoneListINS0_10RegExpTreeELi2EE3AddEPS2_PNS0_4ZoneE(%"class.v8::internal::BufferedZoneList"* %105, %"class.v8::internal::RegExpTree"* %91, %"class.v8::internal::Zone"* %107) #13
  br label %112

108:                                              ; preds = %99
  tail call void @_ZN2v88internal13RegExpBuilder9FlushTextEv(%"class.v8::internal::RegExpBuilder"* %1) #13
  %109 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %1, i64 0, i32 5
  %110 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %1, i64 0, i32 0
  %111 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %110, align 8
  tail call void @_ZN2v88internal16BufferedZoneListINS0_10RegExpTreeELi2EE3AddEPS2_PNS0_4ZoneE(%"class.v8::internal::BufferedZoneList"* %109, %"class.v8::internal::RegExpTree"* %91, %"class.v8::internal::Zone"* %111) #13
  br label %112

112:                                              ; preds = %97, %104, %108
  %113 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 6
  %114 = load %"class.v8::internal::ZoneList.1140"*, %"class.v8::internal::ZoneList.1140"** %113, align 8
  %115 = icmp eq %"class.v8::internal::ZoneList.1140"* %114, null
  br i1 %115, label %116, label %145

116:                                              ; preds = %112
  %117 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %69, align 8
  %118 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %117, i64 0, i32 2
  %119 = load i64, i64* %118, align 8
  %120 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %117, i64 0, i32 3
  %121 = load i64, i64* %120, align 8
  %122 = sub i64 %121, %119
  %123 = icmp ult i64 %122, 16
  br i1 %123, label %124, label %126, !prof !3

124:                                              ; preds = %116
  %125 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %117, i64 16) #13
  br label %128

126:                                              ; preds = %116
  %127 = add i64 %119, 16
  store i64 %127, i64* %118, align 8
  br label %128

128:                                              ; preds = %124, %126
  %129 = phi i64 [ %125, %124 ], [ %119, %126 ]
  %130 = inttoptr i64 %129 to %"class.v8::internal::ZoneList.1140"*
  %131 = getelementptr inbounds %"class.v8::internal::ZoneList.1140", %"class.v8::internal::ZoneList.1140"* %130, i64 0, i32 0
  store %"class.v8::internal::RegExpBackReference"** null, %"class.v8::internal::RegExpBackReference"*** %131, align 8
  %132 = getelementptr inbounds %"class.v8::internal::ZoneList.1140", %"class.v8::internal::ZoneList.1140"* %130, i64 0, i32 1
  store i32 1, i32* %132, align 8
  %133 = getelementptr inbounds %"class.v8::internal::ZoneList.1140", %"class.v8::internal::ZoneList.1140"* %130, i64 0, i32 2
  store i32 0, i32* %133, align 4
  %134 = load i64, i64* %118, align 8
  %135 = load i64, i64* %120, align 8
  %136 = sub i64 %135, %134
  %137 = icmp ult i64 %136, 8
  br i1 %137, label %138, label %140, !prof !3

138:                                              ; preds = %128
  %139 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %117, i64 8) #13
  br label %142

140:                                              ; preds = %128
  %141 = add i64 %134, 8
  store i64 %141, i64* %118, align 8
  br label %142

142:                                              ; preds = %138, %140
  %143 = phi i64 [ %139, %138 ], [ %134, %140 ]
  %144 = inttoptr i64 %143 to %"class.v8::internal::RegExpBackReference"**
  store %"class.v8::internal::RegExpBackReference"** %144, %"class.v8::internal::RegExpBackReference"*** %131, align 8
  store %"class.v8::internal::ZoneList.1140"* %130, %"class.v8::internal::ZoneList.1140"** %113, align 8
  br label %145

145:                                              ; preds = %142, %112
  %146 = phi %"class.v8::internal::ZoneList.1140"* [ %130, %142 ], [ %114, %112 ]
  %147 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %69, align 8
  %148 = getelementptr inbounds %"class.v8::internal::ZoneList.1140", %"class.v8::internal::ZoneList.1140"* %146, i64 0, i32 2
  %149 = load i32, i32* %148, align 4
  %150 = getelementptr inbounds %"class.v8::internal::ZoneList.1140", %"class.v8::internal::ZoneList.1140"* %146, i64 0, i32 1
  %151 = load i32, i32* %150, align 8
  %152 = icmp slt i32 %149, %151
  br i1 %152, label %153, label %160

153:                                              ; preds = %145
  %154 = getelementptr inbounds %"class.v8::internal::ZoneList.1140", %"class.v8::internal::ZoneList.1140"* %146, i64 0, i32 0
  %155 = load %"class.v8::internal::RegExpBackReference"**, %"class.v8::internal::RegExpBackReference"*** %154, align 8
  %156 = add nsw i32 %149, 1
  store i32 %156, i32* %148, align 4
  %157 = sext i32 %149 to i64
  %158 = getelementptr inbounds %"class.v8::internal::RegExpBackReference"*, %"class.v8::internal::RegExpBackReference"** %155, i64 %157
  %159 = bitcast %"class.v8::internal::RegExpBackReference"** %158 to i64*
  store i64 %84, i64* %159, align 8
  br label %199

160:                                              ; preds = %145
  %161 = shl nsw i32 %151, 1
  %162 = or i32 %161, 1
  %163 = sext i32 %162 to i64
  %164 = shl nsw i64 %163, 3
  %165 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %147, i64 0, i32 2
  %166 = load i64, i64* %165, align 8
  %167 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %147, i64 0, i32 3
  %168 = load i64, i64* %167, align 8
  %169 = sub i64 %168, %166
  %170 = icmp ugt i64 %164, %169
  br i1 %170, label %171, label %173, !prof !3

171:                                              ; preds = %160
  %172 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %147, i64 %164) #13
  br label %175

173:                                              ; preds = %160
  %174 = add i64 %166, %164
  store i64 %174, i64* %165, align 8
  br label %175

175:                                              ; preds = %173, %171
  %176 = phi i64 [ %172, %171 ], [ %166, %173 ]
  %177 = inttoptr i64 %176 to %"class.v8::internal::RegExpBackReference"**
  %178 = load i32, i32* %148, align 4
  %179 = icmp sgt i32 %178, 0
  br i1 %179, label %180, label %192

180:                                              ; preds = %175
  %181 = inttoptr i64 %176 to i8*
  %182 = bitcast %"class.v8::internal::ZoneList.1140"* %146 to i8**
  %183 = load i8*, i8** %182, align 8
  %184 = sext i32 %178 to i64
  %185 = shl nsw i64 %184, 3
  switch i64 %185, label %191 [
    i64 16, label %190
    i64 8, label %186
  ]

186:                                              ; preds = %180
  %187 = bitcast i8* %183 to i64*
  %188 = inttoptr i64 %176 to i64*
  %189 = load i64, i64* %187, align 1
  store i64 %189, i64* %188, align 1
  br label %192

190:                                              ; preds = %180
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %181, i8* align 1 %183, i64 16, i1 false) #13
  br label %192

191:                                              ; preds = %180
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %181, i8* align 1 %183, i64 %185, i1 false) #13
  br label %192

192:                                              ; preds = %191, %190, %186, %175
  %193 = getelementptr inbounds %"class.v8::internal::ZoneList.1140", %"class.v8::internal::ZoneList.1140"* %146, i64 0, i32 0
  store %"class.v8::internal::RegExpBackReference"** %177, %"class.v8::internal::RegExpBackReference"*** %193, align 8
  store i32 %162, i32* %150, align 8
  %194 = load i32, i32* %148, align 4
  %195 = add nsw i32 %194, 1
  store i32 %195, i32* %148, align 4
  %196 = sext i32 %194 to i64
  %197 = getelementptr inbounds %"class.v8::internal::RegExpBackReference"*, %"class.v8::internal::RegExpBackReference"** %177, i64 %196
  %198 = bitcast %"class.v8::internal::RegExpBackReference"** %197 to i64*
  store i64 %84, i64* %198, align 8
  br label %199

199:                                              ; preds = %192, %153, %11, %7, %21, %66
  %200 = phi i1 [ false, %21 ], [ true, %66 ], [ false, %7 ], [ false, %11 ], [ true, %153 ], [ true, %192 ]
  ret i1 %200
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2v88internal12RegExpParser23ParseIntervalQuantifierEPiS2_(%"class.v8::internal::RegExpParser"*, i32* nocapture, i32* nocapture) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 10
  %5 = load i32, i32* %4, align 8
  %6 = add nsw i32 %5, -1
  tail call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0)
  %7 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 8
  %8 = load i32, i32* %7, align 8
  %9 = add i32 %8, -48
  %10 = icmp ult i32 %9, 10
  br i1 %10, label %19, label %11

11:                                               ; preds = %3
  store i32 %6, i32* %4, align 8
  %12 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 7
  %13 = load %"class.v8::internal::FlatStringReader"*, %"class.v8::internal::FlatStringReader"** %12, align 8
  %14 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %13, i64 0, i32 3
  %15 = load i32, i32* %14, align 4
  %16 = icmp sge i32 %15, %5
  %17 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 13
  %18 = zext i1 %16 to i8
  store i8 %18, i8* %17, align 4
  tail call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0) #13
  br label %84

19:                                               ; preds = %3, %30
  %20 = phi i32 [ %34, %30 ], [ %9, %3 ]
  %21 = phi i32 [ %33, %30 ], [ %8, %3 ]
  %22 = phi i32 [ %32, %30 ], [ 0, %3 ]
  %23 = sub nuw i32 -2147483601, %21
  %24 = sdiv i32 %23, 10
  %25 = icmp sgt i32 %22, %24
  br i1 %25, label %26, label %30

26:                                               ; preds = %19, %26
  tail call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0)
  %27 = load i32, i32* %7, align 8
  %28 = add i32 %27, -48
  %29 = icmp ult i32 %28, 10
  br i1 %29, label %26, label %36

30:                                               ; preds = %19
  %31 = mul nsw i32 %22, 10
  %32 = add nsw i32 %20, %31
  tail call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0)
  %33 = load i32, i32* %7, align 8
  %34 = add i32 %33, -48
  %35 = icmp ult i32 %34, 10
  br i1 %35, label %19, label %36

36:                                               ; preds = %30, %26
  %37 = phi i32 [ %27, %26 ], [ %33, %30 ]
  %38 = phi i32 [ 2147483647, %26 ], [ %32, %30 ]
  switch i32 %37, label %74 [
    i32 125, label %82
    i32 44, label %39
  ]

39:                                               ; preds = %36
  tail call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0)
  %40 = load i32, i32* %7, align 8
  %41 = icmp eq i32 %40, 125
  br i1 %41, label %82, label %42

42:                                               ; preds = %39
  %43 = add i32 %40, -48
  %44 = icmp ult i32 %43, 10
  br i1 %44, label %45, label %62

45:                                               ; preds = %42, %56
  %46 = phi i32 [ %60, %56 ], [ %43, %42 ]
  %47 = phi i32 [ %59, %56 ], [ %40, %42 ]
  %48 = phi i32 [ %58, %56 ], [ 0, %42 ]
  %49 = sub nuw i32 -2147483601, %47
  %50 = sdiv i32 %49, 10
  %51 = icmp sgt i32 %48, %50
  br i1 %51, label %52, label %56

52:                                               ; preds = %45, %52
  tail call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0)
  %53 = load i32, i32* %7, align 8
  %54 = add i32 %53, -48
  %55 = icmp ult i32 %54, 10
  br i1 %55, label %52, label %62

56:                                               ; preds = %45
  %57 = mul nsw i32 %48, 10
  %58 = add nsw i32 %46, %57
  tail call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0)
  %59 = load i32, i32* %7, align 8
  %60 = add i32 %59, -48
  %61 = icmp ult i32 %60, 10
  br i1 %61, label %45, label %62

62:                                               ; preds = %56, %52, %42
  %63 = phi i32 [ %40, %42 ], [ %53, %52 ], [ %59, %56 ]
  %64 = phi i32 [ 0, %42 ], [ 2147483647, %52 ], [ %58, %56 ]
  %65 = icmp eq i32 %63, 125
  br i1 %65, label %82, label %66

66:                                               ; preds = %62
  store i32 %6, i32* %4, align 8
  %67 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 7
  %68 = load %"class.v8::internal::FlatStringReader"*, %"class.v8::internal::FlatStringReader"** %67, align 8
  %69 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %68, i64 0, i32 3
  %70 = load i32, i32* %69, align 4
  %71 = icmp sge i32 %70, %5
  %72 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 13
  %73 = zext i1 %71 to i8
  store i8 %73, i8* %72, align 4
  tail call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0) #13
  br label %84

74:                                               ; preds = %36
  store i32 %6, i32* %4, align 8
  %75 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 7
  %76 = load %"class.v8::internal::FlatStringReader"*, %"class.v8::internal::FlatStringReader"** %75, align 8
  %77 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %76, i64 0, i32 3
  %78 = load i32, i32* %77, align 4
  %79 = icmp sge i32 %78, %5
  %80 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 13
  %81 = zext i1 %79 to i8
  store i8 %81, i8* %80, align 4
  tail call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0) #13
  br label %84

82:                                               ; preds = %62, %39, %36
  %83 = phi i32 [ %38, %36 ], [ 2147483647, %39 ], [ %64, %62 ]
  tail call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0)
  store i32 %38, i32* %1, align 4
  store i32 %83, i32* %2, align 4
  br label %84

84:                                               ; preds = %66, %74, %82, %11
  %85 = phi i1 [ false, %11 ], [ true, %82 ], [ false, %66 ], [ false, %74 ]
  ret i1 %85
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal13RegExpBuilder19AddUnicodeCharacterEj(%"class.v8::internal::RegExpBuilder"*, i32) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.v8::internal::Zone"*, align 8
  %4 = alloca %"class.v8::internal::ZoneList.1145"*, align 8
  %5 = alloca %"class.v8::internal::Zone"*, align 8
  %6 = alloca %"class.v8::internal::ZoneList.1145"*, align 8
  %7 = icmp ugt i32 %1, 65535
  br i1 %7, label %8, label %35

8:                                                ; preds = %2
  %9 = add i32 %1, 983040
  %10 = lshr i32 %9, 10
  %11 = trunc i32 %10 to i16
  %12 = and i16 %11, 1023
  %13 = or i16 %12, -10240
  %14 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 4
  %15 = load i16, i16* %14, align 8
  %16 = icmp eq i16 %15, 0
  br i1 %16, label %31, label %17

17:                                               ; preds = %8
  store i16 0, i16* %14, align 8
  %18 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 0
  %19 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %18, align 8
  %20 = bitcast %"class.v8::internal::Zone"** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #13
  store %"class.v8::internal::Zone"* %19, %"class.v8::internal::Zone"** %5, align 8
  %21 = bitcast %"class.v8::internal::ZoneList.1145"** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #13
  %22 = zext i16 %15 to i64
  %23 = shl nuw nsw i64 %22, 32
  %24 = or i64 %23, %22
  %25 = tail call %"class.v8::internal::ZoneList.1145"* @_ZN2v88internal14CharacterRange4ListEPNS0_4ZoneES1_(%"class.v8::internal::Zone"* %19, i64 %24) #13
  store %"class.v8::internal::ZoneList.1145"* %25, %"class.v8::internal::ZoneList.1145"** %6, align 8
  %26 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 2
  %27 = call %"class.v8::internal::RegExpCharacterClass"* @_ZN2v88internal4Zone3NewINS0_20RegExpCharacterClassEJPS1_PNS0_8ZoneListINS0_14CharacterRangeEEERNS_4base5FlagsINS0_8JSRegExp4FlagEiEEEEEPT_DpOT0_(%"class.v8::internal::Zone"* %19, %"class.v8::internal::Zone"** nonnull dereferenceable(8) %5, %"class.v8::internal::ZoneList.1145"** nonnull dereferenceable(8) %6, %"class.v8::base::Flags"* dereferenceable(4) %26) #13
  %28 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %27, i64 0, i32 0
  call void @_ZN2v88internal13RegExpBuilder9FlushTextEv(%"class.v8::internal::RegExpBuilder"* %0) #13
  %29 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 5
  %30 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %18, align 8
  call void @_ZN2v88internal16BufferedZoneListINS0_10RegExpTreeELi2EE3AddEPS2_PNS0_4ZoneE(%"class.v8::internal::BufferedZoneList"* %29, %"class.v8::internal::RegExpTree"* %28, %"class.v8::internal::Zone"* %30) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #13
  br label %31

31:                                               ; preds = %8, %17
  store i16 %13, i16* %14, align 8
  %32 = trunc i32 %1 to i16
  %33 = and i16 %32, 1023
  %34 = or i16 %33, -9216
  call void @_ZN2v88internal13RegExpBuilder17AddTrailSurrogateEt(%"class.v8::internal::RegExpBuilder"* %0, i16 zeroext %34)
  br label %67

35:                                               ; preds = %2
  %36 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 2, i32 0
  %37 = load i32, i32* %36, align 4
  %38 = and i32 %37, 16
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %65, label %40

40:                                               ; preds = %35
  %41 = trunc i32 %1 to i16
  %42 = and i16 %41, -1024
  switch i16 %42, label %65 [
    i16 -10240, label %43
    i16 -9216, label %63
  ]

43:                                               ; preds = %40
  %44 = trunc i32 %1 to i16
  %45 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 4
  %46 = load i16, i16* %45, align 8
  %47 = icmp eq i16 %46, 0
  br i1 %47, label %62, label %48

48:                                               ; preds = %43
  store i16 0, i16* %45, align 8
  %49 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 0
  %50 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %49, align 8
  %51 = bitcast %"class.v8::internal::Zone"** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %51) #13
  store %"class.v8::internal::Zone"* %50, %"class.v8::internal::Zone"** %3, align 8
  %52 = bitcast %"class.v8::internal::ZoneList.1145"** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %52) #13
  %53 = zext i16 %46 to i64
  %54 = shl nuw nsw i64 %53, 32
  %55 = or i64 %54, %53
  %56 = tail call %"class.v8::internal::ZoneList.1145"* @_ZN2v88internal14CharacterRange4ListEPNS0_4ZoneES1_(%"class.v8::internal::Zone"* %50, i64 %55) #13
  store %"class.v8::internal::ZoneList.1145"* %56, %"class.v8::internal::ZoneList.1145"** %4, align 8
  %57 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 2
  %58 = call %"class.v8::internal::RegExpCharacterClass"* @_ZN2v88internal4Zone3NewINS0_20RegExpCharacterClassEJPS1_PNS0_8ZoneListINS0_14CharacterRangeEEERNS_4base5FlagsINS0_8JSRegExp4FlagEiEEEEEPT_DpOT0_(%"class.v8::internal::Zone"* %50, %"class.v8::internal::Zone"** nonnull dereferenceable(8) %3, %"class.v8::internal::ZoneList.1145"** nonnull dereferenceable(8) %4, %"class.v8::base::Flags"* dereferenceable(4) %57) #13
  %59 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %58, i64 0, i32 0
  call void @_ZN2v88internal13RegExpBuilder9FlushTextEv(%"class.v8::internal::RegExpBuilder"* %0) #13
  %60 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 5
  %61 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %49, align 8
  call void @_ZN2v88internal16BufferedZoneListINS0_10RegExpTreeELi2EE3AddEPS2_PNS0_4ZoneE(%"class.v8::internal::BufferedZoneList"* %60, %"class.v8::internal::RegExpTree"* %59, %"class.v8::internal::Zone"* %61) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %52) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %51) #13
  br label %62

62:                                               ; preds = %43, %48
  store i16 %44, i16* %45, align 8
  br label %67

63:                                               ; preds = %40
  %64 = trunc i32 %1 to i16
  tail call void @_ZN2v88internal13RegExpBuilder17AddTrailSurrogateEt(%"class.v8::internal::RegExpBuilder"* %0, i16 zeroext %64)
  br label %67

65:                                               ; preds = %40, %35
  %66 = trunc i32 %1 to i16
  tail call void @_ZN2v88internal13RegExpBuilder12AddCharacterEt(%"class.v8::internal::RegExpBuilder"* %0, i16 zeroext %66)
  br label %67

67:                                               ; preds = %62, %65, %63, %31
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2v88internal13RegExpBuilder19AddQuantifierToAtomEiiNS0_16RegExpQuantifier14QuantifierTypeE(%"class.v8::internal::RegExpBuilder"*, i32, i32, i32) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.v8::internal::Zone"*, align 8
  %6 = alloca %"class.v8::internal::ZoneList.1145"*, align 8
  %7 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 4
  %8 = load i16, i16* %7, align 8
  %9 = icmp eq i16 %8, 0
  br i1 %9, label %24, label %10

10:                                               ; preds = %4
  store i16 0, i16* %7, align 8
  %11 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 0
  %12 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %11, align 8
  %13 = bitcast %"class.v8::internal::Zone"** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %13) #13
  store %"class.v8::internal::Zone"* %12, %"class.v8::internal::Zone"** %5, align 8
  %14 = bitcast %"class.v8::internal::ZoneList.1145"** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %14) #13
  %15 = zext i16 %8 to i64
  %16 = shl nuw nsw i64 %15, 32
  %17 = or i64 %16, %15
  %18 = tail call %"class.v8::internal::ZoneList.1145"* @_ZN2v88internal14CharacterRange4ListEPNS0_4ZoneES1_(%"class.v8::internal::Zone"* %12, i64 %17) #13
  store %"class.v8::internal::ZoneList.1145"* %18, %"class.v8::internal::ZoneList.1145"** %6, align 8
  %19 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 2
  %20 = call %"class.v8::internal::RegExpCharacterClass"* @_ZN2v88internal4Zone3NewINS0_20RegExpCharacterClassEJPS1_PNS0_8ZoneListINS0_14CharacterRangeEEERNS_4base5FlagsINS0_8JSRegExp4FlagEiEEEEEPT_DpOT0_(%"class.v8::internal::Zone"* %12, %"class.v8::internal::Zone"** nonnull dereferenceable(8) %5, %"class.v8::internal::ZoneList.1145"** nonnull dereferenceable(8) %6, %"class.v8::base::Flags"* dereferenceable(4) %19) #13
  %21 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %20, i64 0, i32 0
  call void @_ZN2v88internal13RegExpBuilder9FlushTextEv(%"class.v8::internal::RegExpBuilder"* %0) #13
  %22 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 5
  %23 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %11, align 8
  call void @_ZN2v88internal16BufferedZoneListINS0_10RegExpTreeELi2EE3AddEPS2_PNS0_4ZoneE(%"class.v8::internal::BufferedZoneList"* %22, %"class.v8::internal::RegExpTree"* %21, %"class.v8::internal::Zone"* %23) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %14) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %13) #13
  br label %24

24:                                               ; preds = %4, %10
  %25 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 1
  %26 = load i8, i8* %25, align 8, !range !2
  %27 = icmp eq i8 %26, 0
  br i1 %27, label %29, label %28

28:                                               ; preds = %24
  store i8 0, i8* %25, align 8
  br label %251

29:                                               ; preds = %24
  %30 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 3
  %31 = load %"class.v8::internal::ZoneList.1143"*, %"class.v8::internal::ZoneList.1143"** %30, align 8
  %32 = icmp eq %"class.v8::internal::ZoneList.1143"* %31, null
  br i1 %32, label %98, label %33

33:                                               ; preds = %29
  %34 = getelementptr inbounds %"class.v8::internal::ZoneList.1143", %"class.v8::internal::ZoneList.1143"* %31, i64 0, i32 0
  %35 = load i16*, i16** %34, align 8
  %36 = getelementptr inbounds %"class.v8::internal::ZoneList.1143", %"class.v8::internal::ZoneList.1143"* %31, i64 0, i32 2
  %37 = load i32, i32* %36, align 4
  %38 = sext i32 %37 to i64
  %39 = ptrtoint i16* %35 to i64
  %40 = icmp sgt i32 %37, 1
  br i1 %40, label %41, label %72

41:                                               ; preds = %33
  %42 = add nsw i32 %37, -1
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 6
  %45 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 0
  %46 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %45, align 8
  %47 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %46, i64 0, i32 2
  %48 = load i64, i64* %47, align 8
  %49 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %46, i64 0, i32 3
  %50 = load i64, i64* %49, align 8
  %51 = sub i64 %50, %48
  %52 = icmp ult i64 %51, 32
  br i1 %52, label %53, label %55, !prof !3

53:                                               ; preds = %41
  %54 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %46, i64 32) #13
  br label %57

55:                                               ; preds = %41
  %56 = add i64 %48, 32
  store i64 %56, i64* %47, align 8
  br label %57

57:                                               ; preds = %53, %55
  %58 = phi i64 [ %54, %53 ], [ %48, %55 ]
  %59 = inttoptr i64 %58 to %"class.v8::internal::RegExpAtom"*
  %60 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 2, i32 0
  %61 = load i32, i32* %60, align 4
  %62 = getelementptr inbounds %"class.v8::internal::RegExpAtom", %"class.v8::internal::RegExpAtom"* %59, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [37 x i8*] }, { [37 x i8*] }* @_ZTVN2v88internal10RegExpAtomE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %62, align 8
  %63 = getelementptr inbounds %"class.v8::internal::RegExpAtom", %"class.v8::internal::RegExpAtom"* %59, i64 0, i32 1, i32 0
  %64 = bitcast i16** %63 to i64*
  store i64 %39, i64* %64, align 8
  %65 = getelementptr inbounds %"class.v8::internal::RegExpAtom", %"class.v8::internal::RegExpAtom"* %59, i64 0, i32 1, i32 1
  store i64 %43, i64* %65, align 8
  %66 = getelementptr inbounds %"class.v8::internal::RegExpAtom", %"class.v8::internal::RegExpAtom"* %59, i64 0, i32 2, i32 0
  store i32 %61, i32* %66, align 8
  %67 = getelementptr inbounds %"class.v8::internal::RegExpAtom", %"class.v8::internal::RegExpAtom"* %59, i64 0, i32 0
  %68 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %45, align 8
  call void @_ZN2v88internal16BufferedZoneListINS0_10RegExpTreeELi2EE3AddEPS2_PNS0_4ZoneE(%"class.v8::internal::BufferedZoneList"* %44, %"class.v8::internal::RegExpTree"* %67, %"class.v8::internal::Zone"* %68)
  %69 = getelementptr inbounds i16, i16* %35, i64 %43
  %70 = sub nsw i64 %38, %43
  %71 = ptrtoint i16* %69 to i64
  br label %72

72:                                               ; preds = %57, %33
  %73 = phi i64 [ %71, %57 ], [ %39, %33 ]
  %74 = phi i64 [ %70, %57 ], [ %38, %33 ]
  store %"class.v8::internal::ZoneList.1143"* null, %"class.v8::internal::ZoneList.1143"** %30, align 8
  %75 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 0
  %76 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %75, align 8
  %77 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %76, i64 0, i32 2
  %78 = load i64, i64* %77, align 8
  %79 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %76, i64 0, i32 3
  %80 = load i64, i64* %79, align 8
  %81 = sub i64 %80, %78
  %82 = icmp ult i64 %81, 32
  br i1 %82, label %83, label %85, !prof !3

83:                                               ; preds = %72
  %84 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %76, i64 32) #13
  br label %87

85:                                               ; preds = %72
  %86 = add i64 %78, 32
  store i64 %86, i64* %77, align 8
  br label %87

87:                                               ; preds = %83, %85
  %88 = phi i64 [ %84, %83 ], [ %78, %85 ]
  %89 = inttoptr i64 %88 to %"class.v8::internal::RegExpAtom"*
  %90 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 2, i32 0
  %91 = load i32, i32* %90, align 4
  %92 = getelementptr inbounds %"class.v8::internal::RegExpAtom", %"class.v8::internal::RegExpAtom"* %89, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [37 x i8*] }, { [37 x i8*] }* @_ZTVN2v88internal10RegExpAtomE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %92, align 8
  %93 = getelementptr inbounds %"class.v8::internal::RegExpAtom", %"class.v8::internal::RegExpAtom"* %89, i64 0, i32 1, i32 0
  %94 = bitcast i16** %93 to i64*
  store i64 %73, i64* %94, align 8
  %95 = getelementptr inbounds %"class.v8::internal::RegExpAtom", %"class.v8::internal::RegExpAtom"* %89, i64 0, i32 1, i32 1
  store i64 %74, i64* %95, align 8
  %96 = getelementptr inbounds %"class.v8::internal::RegExpAtom", %"class.v8::internal::RegExpAtom"* %89, i64 0, i32 2, i32 0
  store i32 %91, i32* %96, align 8
  %97 = getelementptr inbounds %"class.v8::internal::RegExpAtom", %"class.v8::internal::RegExpAtom"* %89, i64 0, i32 0
  br label %189

98:                                               ; preds = %29
  %99 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 6, i32 0
  %100 = load %"class.v8::internal::ZoneList.1144"*, %"class.v8::internal::ZoneList.1144"** %99, align 8
  %101 = icmp eq %"class.v8::internal::ZoneList.1144"* %100, null
  br i1 %101, label %105, label %102

102:                                              ; preds = %98
  %103 = getelementptr inbounds %"class.v8::internal::ZoneList.1144", %"class.v8::internal::ZoneList.1144"* %100, i64 0, i32 2
  %104 = load i32, i32* %103, align 4
  br label %105

105:                                              ; preds = %98, %102
  %106 = phi i32 [ %104, %102 ], [ 0, %98 ]
  %107 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 6, i32 1
  %108 = load %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %107, align 8
  %109 = icmp ne %"class.v8::internal::RegExpTree"* %108, null
  %110 = zext i1 %109 to i32
  %111 = add nsw i32 %106, %110
  %112 = icmp sgt i32 %111, 0
  br i1 %112, label %113, label %127

113:                                              ; preds = %105
  br i1 %101, label %125, label %114

114:                                              ; preds = %113
  %115 = getelementptr inbounds %"class.v8::internal::ZoneList.1144", %"class.v8::internal::ZoneList.1144"* %100, i64 0, i32 2
  %116 = load i32, i32* %115, align 4
  %117 = icmp sgt i32 %116, 0
  br i1 %117, label %118, label %125

118:                                              ; preds = %114
  %119 = add nsw i32 %116, -1
  %120 = getelementptr inbounds %"class.v8::internal::ZoneList.1144", %"class.v8::internal::ZoneList.1144"* %100, i64 0, i32 0
  %121 = load %"class.v8::internal::RegExpTree"**, %"class.v8::internal::RegExpTree"*** %120, align 8
  %122 = sext i32 %119 to i64
  %123 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %121, i64 %122
  %124 = load %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %123, align 8
  store i32 %119, i32* %115, align 4
  br label %125

125:                                              ; preds = %113, %114, %118
  %126 = phi %"class.v8::internal::RegExpTree"* [ %124, %118 ], [ null, %113 ], [ null, %114 ]
  store %"class.v8::internal::RegExpTree"* %126, %"class.v8::internal::RegExpTree"** %107, align 8
  br label %189

127:                                              ; preds = %105
  %128 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 5
  %129 = getelementptr inbounds %"class.v8::internal::BufferedZoneList", %"class.v8::internal::BufferedZoneList"* %128, i64 0, i32 0
  %130 = load %"class.v8::internal::ZoneList.1144"*, %"class.v8::internal::ZoneList.1144"** %129, align 8
  %131 = icmp eq %"class.v8::internal::ZoneList.1144"* %130, null
  br i1 %131, label %135, label %132

132:                                              ; preds = %127
  %133 = getelementptr inbounds %"class.v8::internal::ZoneList.1144", %"class.v8::internal::ZoneList.1144"* %130, i64 0, i32 2
  %134 = load i32, i32* %133, align 4
  br label %135

135:                                              ; preds = %127, %132
  %136 = phi i32 [ %134, %132 ], [ 0, %127 ]
  %137 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 5, i32 1
  %138 = load %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %137, align 8
  %139 = icmp ne %"class.v8::internal::RegExpTree"* %138, null
  %140 = zext i1 %139 to i32
  %141 = add nsw i32 %136, %140
  %142 = icmp sgt i32 %141, 0
  br i1 %142, label %143, label %188

143:                                              ; preds = %135
  br i1 %131, label %155, label %144

144:                                              ; preds = %143
  %145 = getelementptr inbounds %"class.v8::internal::ZoneList.1144", %"class.v8::internal::ZoneList.1144"* %130, i64 0, i32 2
  %146 = load i32, i32* %145, align 4
  %147 = icmp sgt i32 %146, 0
  br i1 %147, label %148, label %155

148:                                              ; preds = %144
  %149 = add nsw i32 %146, -1
  %150 = getelementptr inbounds %"class.v8::internal::ZoneList.1144", %"class.v8::internal::ZoneList.1144"* %130, i64 0, i32 0
  %151 = load %"class.v8::internal::RegExpTree"**, %"class.v8::internal::RegExpTree"*** %150, align 8
  %152 = sext i32 %149 to i64
  %153 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %151, i64 %152
  %154 = load %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %153, align 8
  store i32 %149, i32* %145, align 4
  br label %155

155:                                              ; preds = %143, %144, %148
  %156 = phi %"class.v8::internal::RegExpTree"* [ %154, %148 ], [ null, %143 ], [ null, %144 ]
  store %"class.v8::internal::RegExpTree"* %156, %"class.v8::internal::RegExpTree"** %137, align 8
  %157 = bitcast %"class.v8::internal::RegExpTree"* %138 to i1 (%"class.v8::internal::RegExpTree"*)***
  %158 = load i1 (%"class.v8::internal::RegExpTree"*)**, i1 (%"class.v8::internal::RegExpTree"*)*** %157, align 8
  %159 = getelementptr inbounds i1 (%"class.v8::internal::RegExpTree"*)*, i1 (%"class.v8::internal::RegExpTree"*)** %158, i64 28
  %160 = load i1 (%"class.v8::internal::RegExpTree"*)*, i1 (%"class.v8::internal::RegExpTree"*)** %159, align 8
  %161 = call zeroext i1 %160(%"class.v8::internal::RegExpTree"* %138) #13
  br i1 %161, label %162, label %176

162:                                              ; preds = %155
  %163 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 2, i32 0
  %164 = load i32, i32* %163, align 4
  %165 = and i32 %164, 16
  %166 = icmp eq i32 %165, 0
  br i1 %166, label %167, label %251

167:                                              ; preds = %162
  %168 = bitcast %"class.v8::internal::RegExpTree"* %138 to %"class.v8::internal::RegExpLookaround"* (%"class.v8::internal::RegExpTree"*)***
  %169 = load %"class.v8::internal::RegExpLookaround"* (%"class.v8::internal::RegExpTree"*)**, %"class.v8::internal::RegExpLookaround"* (%"class.v8::internal::RegExpTree"*)*** %168, align 8
  %170 = getelementptr inbounds %"class.v8::internal::RegExpLookaround"* (%"class.v8::internal::RegExpTree"*)*, %"class.v8::internal::RegExpLookaround"* (%"class.v8::internal::RegExpTree"*)** %169, i64 27
  %171 = load %"class.v8::internal::RegExpLookaround"* (%"class.v8::internal::RegExpTree"*)*, %"class.v8::internal::RegExpLookaround"* (%"class.v8::internal::RegExpTree"*)** %170, align 8
  %172 = call %"class.v8::internal::RegExpLookaround"* %171(%"class.v8::internal::RegExpTree"* %138) #13
  %173 = getelementptr inbounds %"class.v8::internal::RegExpLookaround", %"class.v8::internal::RegExpLookaround"* %172, i64 0, i32 5
  %174 = load i32, i32* %173, align 4
  %175 = icmp eq i32 %174, 1
  br i1 %175, label %251, label %176

176:                                              ; preds = %167, %155
  %177 = bitcast %"class.v8::internal::RegExpTree"* %138 to i32 (%"class.v8::internal::RegExpTree"*)***
  %178 = load i32 (%"class.v8::internal::RegExpTree"*)**, i32 (%"class.v8::internal::RegExpTree"*)*** %177, align 8
  %179 = getelementptr inbounds i32 (%"class.v8::internal::RegExpTree"*)*, i32 (%"class.v8::internal::RegExpTree"*)** %178, i64 8
  %180 = load i32 (%"class.v8::internal::RegExpTree"*)*, i32 (%"class.v8::internal::RegExpTree"*)** %179, align 8
  %181 = call i32 %180(%"class.v8::internal::RegExpTree"* %138) #13
  %182 = icmp eq i32 %181, 0
  br i1 %182, label %183, label %191

183:                                              ; preds = %176
  %184 = icmp eq i32 %1, 0
  br i1 %184, label %251, label %185

185:                                              ; preds = %183
  %186 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 0
  %187 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %186, align 8
  call void @_ZN2v88internal16BufferedZoneListINS0_10RegExpTreeELi2EE3AddEPS2_PNS0_4ZoneE(%"class.v8::internal::BufferedZoneList"* %128, %"class.v8::internal::RegExpTree"* %138, %"class.v8::internal::Zone"* %187)
  br label %251

188:                                              ; preds = %135
  call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.10, i64 0, i64 0)) #14
  unreachable

189:                                              ; preds = %87, %125
  %190 = phi %"class.v8::internal::RegExpTree"* [ %97, %87 ], [ %108, %125 ]
  call void @_ZN2v88internal13RegExpBuilder9FlushTextEv(%"class.v8::internal::RegExpBuilder"* %0)
  br label %191

191:                                              ; preds = %189, %176
  %192 = phi %"class.v8::internal::RegExpTree"* [ %138, %176 ], [ %190, %189 ]
  %193 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 5
  %194 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 0
  %195 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %194, align 8
  %196 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %195, i64 0, i32 2
  %197 = load i64, i64* %196, align 8
  %198 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %195, i64 0, i32 3
  %199 = load i64, i64* %198, align 8
  %200 = sub i64 %199, %197
  %201 = icmp ult i64 %200, 40
  br i1 %201, label %202, label %204, !prof !3

202:                                              ; preds = %191
  %203 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %195, i64 40) #13
  br label %206

204:                                              ; preds = %191
  %205 = add i64 %197, 40
  store i64 %205, i64* %196, align 8
  br label %206

206:                                              ; preds = %204, %202
  %207 = phi i64 [ %203, %202 ], [ %197, %204 ]
  %208 = inttoptr i64 %207 to %"class.v8::internal::RegExpQuantifier"*
  %209 = getelementptr inbounds %"class.v8::internal::RegExpQuantifier", %"class.v8::internal::RegExpQuantifier"* %208, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [37 x i8*] }, { [37 x i8*] }* @_ZTVN2v88internal16RegExpQuantifierE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %209, align 8
  %210 = getelementptr inbounds %"class.v8::internal::RegExpQuantifier", %"class.v8::internal::RegExpQuantifier"* %208, i64 0, i32 1
  store %"class.v8::internal::RegExpTree"* %192, %"class.v8::internal::RegExpTree"** %210, align 8
  %211 = getelementptr inbounds %"class.v8::internal::RegExpQuantifier", %"class.v8::internal::RegExpQuantifier"* %208, i64 0, i32 2
  store i32 %1, i32* %211, align 8
  %212 = getelementptr inbounds %"class.v8::internal::RegExpQuantifier", %"class.v8::internal::RegExpQuantifier"* %208, i64 0, i32 3
  store i32 %2, i32* %212, align 4
  %213 = getelementptr inbounds %"class.v8::internal::RegExpQuantifier", %"class.v8::internal::RegExpQuantifier"* %208, i64 0, i32 6
  store i32 %3, i32* %213, align 8
  %214 = icmp sgt i32 %1, 0
  %215 = bitcast %"class.v8::internal::RegExpTree"* %192 to i32 (%"class.v8::internal::RegExpTree"*)***
  br i1 %214, label %216, label %223

216:                                              ; preds = %206
  %217 = load i32 (%"class.v8::internal::RegExpTree"*)**, i32 (%"class.v8::internal::RegExpTree"*)*** %215, align 8
  %218 = getelementptr inbounds i32 (%"class.v8::internal::RegExpTree"*)*, i32 (%"class.v8::internal::RegExpTree"*)** %217, i64 7
  %219 = load i32 (%"class.v8::internal::RegExpTree"*)*, i32 (%"class.v8::internal::RegExpTree"*)** %218, align 8
  %220 = call i32 %219(%"class.v8::internal::RegExpTree"* %192) #13
  %221 = udiv i32 2147483647, %1
  %222 = icmp sgt i32 %220, %221
  br i1 %222, label %229, label %223

223:                                              ; preds = %216, %206
  %224 = load i32 (%"class.v8::internal::RegExpTree"*)**, i32 (%"class.v8::internal::RegExpTree"*)*** %215, align 8
  %225 = getelementptr inbounds i32 (%"class.v8::internal::RegExpTree"*)*, i32 (%"class.v8::internal::RegExpTree"*)** %224, i64 7
  %226 = load i32 (%"class.v8::internal::RegExpTree"*)*, i32 (%"class.v8::internal::RegExpTree"*)** %225, align 8
  %227 = call i32 %226(%"class.v8::internal::RegExpTree"* %192) #13
  %228 = mul nsw i32 %227, %1
  br label %229

229:                                              ; preds = %216, %223
  %230 = phi i32 [ %228, %223 ], [ 2147483647, %216 ]
  %231 = getelementptr inbounds %"class.v8::internal::RegExpQuantifier", %"class.v8::internal::RegExpQuantifier"* %208, i64 0, i32 4
  store i32 %230, i32* %231, align 8
  %232 = icmp sgt i32 %2, 0
  br i1 %232, label %233, label %240

233:                                              ; preds = %229
  %234 = load i32 (%"class.v8::internal::RegExpTree"*)**, i32 (%"class.v8::internal::RegExpTree"*)*** %215, align 8
  %235 = getelementptr inbounds i32 (%"class.v8::internal::RegExpTree"*)*, i32 (%"class.v8::internal::RegExpTree"*)** %234, i64 8
  %236 = load i32 (%"class.v8::internal::RegExpTree"*)*, i32 (%"class.v8::internal::RegExpTree"*)** %235, align 8
  %237 = call i32 %236(%"class.v8::internal::RegExpTree"* %192) #13
  %238 = udiv i32 2147483647, %2
  %239 = icmp sgt i32 %237, %238
  br i1 %239, label %246, label %240

240:                                              ; preds = %233, %229
  %241 = load i32 (%"class.v8::internal::RegExpTree"*)**, i32 (%"class.v8::internal::RegExpTree"*)*** %215, align 8
  %242 = getelementptr inbounds i32 (%"class.v8::internal::RegExpTree"*)*, i32 (%"class.v8::internal::RegExpTree"*)** %241, i64 8
  %243 = load i32 (%"class.v8::internal::RegExpTree"*)*, i32 (%"class.v8::internal::RegExpTree"*)** %242, align 8
  %244 = call i32 %243(%"class.v8::internal::RegExpTree"* %192) #13
  %245 = mul nsw i32 %244, %2
  br label %246

246:                                              ; preds = %233, %240
  %247 = phi i32 [ %245, %240 ], [ 2147483647, %233 ]
  %248 = getelementptr inbounds %"class.v8::internal::RegExpQuantifier", %"class.v8::internal::RegExpQuantifier"* %208, i64 0, i32 5
  store i32 %247, i32* %248, align 4
  %249 = getelementptr inbounds %"class.v8::internal::RegExpQuantifier", %"class.v8::internal::RegExpQuantifier"* %208, i64 0, i32 0
  %250 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %194, align 8
  call void @_ZN2v88internal16BufferedZoneListINS0_10RegExpTreeELi2EE3AddEPS2_PNS0_4ZoneE(%"class.v8::internal::BufferedZoneList"* %193, %"class.v8::internal::RegExpTree"* %249, %"class.v8::internal::Zone"* %250)
  br label %251

251:                                              ; preds = %162, %185, %246, %167, %183, %28
  %252 = phi i1 [ true, %28 ], [ true, %246 ], [ true, %185 ], [ false, %162 ], [ false, %167 ], [ true, %183 ]
  ret i1 %252
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal13RegExpBuilder9FlushTextEv(%"class.v8::internal::RegExpBuilder"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.v8::internal::Zone"*, align 8
  %3 = alloca %"class.v8::internal::ZoneList.1145"*, align 8
  %4 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 4
  %5 = load i16, i16* %4, align 8
  %6 = icmp eq i16 %5, 0
  br i1 %6, label %21, label %7

7:                                                ; preds = %1
  store i16 0, i16* %4, align 8
  %8 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 0
  %9 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %8, align 8
  %10 = bitcast %"class.v8::internal::Zone"** %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10) #13
  store %"class.v8::internal::Zone"* %9, %"class.v8::internal::Zone"** %2, align 8
  %11 = bitcast %"class.v8::internal::ZoneList.1145"** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11) #13
  %12 = zext i16 %5 to i64
  %13 = shl nuw nsw i64 %12, 32
  %14 = or i64 %13, %12
  %15 = tail call %"class.v8::internal::ZoneList.1145"* @_ZN2v88internal14CharacterRange4ListEPNS0_4ZoneES1_(%"class.v8::internal::Zone"* %9, i64 %14) #13
  store %"class.v8::internal::ZoneList.1145"* %15, %"class.v8::internal::ZoneList.1145"** %3, align 8
  %16 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 2
  %17 = call %"class.v8::internal::RegExpCharacterClass"* @_ZN2v88internal4Zone3NewINS0_20RegExpCharacterClassEJPS1_PNS0_8ZoneListINS0_14CharacterRangeEEERNS_4base5FlagsINS0_8JSRegExp4FlagEiEEEEEPT_DpOT0_(%"class.v8::internal::Zone"* %9, %"class.v8::internal::Zone"** nonnull dereferenceable(8) %2, %"class.v8::internal::ZoneList.1145"** nonnull dereferenceable(8) %3, %"class.v8::base::Flags"* dereferenceable(4) %16) #13
  %18 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %17, i64 0, i32 0
  call void @_ZN2v88internal13RegExpBuilder9FlushTextEv(%"class.v8::internal::RegExpBuilder"* %0) #13
  %19 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 5
  %20 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %8, align 8
  call void @_ZN2v88internal16BufferedZoneListINS0_10RegExpTreeELi2EE3AddEPS2_PNS0_4ZoneE(%"class.v8::internal::BufferedZoneList"* %19, %"class.v8::internal::RegExpTree"* %18, %"class.v8::internal::Zone"* %20) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #13
  br label %21

21:                                               ; preds = %1, %7
  %22 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 1
  store i8 0, i8* %22, align 8
  %23 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 3
  %24 = load %"class.v8::internal::ZoneList.1143"*, %"class.v8::internal::ZoneList.1143"** %23, align 8
  %25 = icmp eq %"class.v8::internal::ZoneList.1143"* %24, null
  br i1 %25, label %57, label %26

26:                                               ; preds = %21
  %27 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 0
  %28 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %27, align 8
  %29 = bitcast %"class.v8::internal::ZoneList.1143"* %24 to i64*
  %30 = load i64, i64* %29, align 8
  %31 = getelementptr inbounds %"class.v8::internal::ZoneList.1143", %"class.v8::internal::ZoneList.1143"* %24, i64 0, i32 2
  %32 = load i32, i32* %31, align 4
  %33 = sext i32 %32 to i64
  %34 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %28, i64 0, i32 2
  %35 = load i64, i64* %34, align 8
  %36 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %28, i64 0, i32 3
  %37 = load i64, i64* %36, align 8
  %38 = sub i64 %37, %35
  %39 = icmp ult i64 %38, 32
  br i1 %39, label %40, label %42, !prof !3

40:                                               ; preds = %26
  %41 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %28, i64 32) #13
  br label %44

42:                                               ; preds = %26
  %43 = add i64 %35, 32
  store i64 %43, i64* %34, align 8
  br label %44

44:                                               ; preds = %42, %40
  %45 = phi i64 [ %41, %40 ], [ %35, %42 ]
  %46 = inttoptr i64 %45 to %"class.v8::internal::RegExpAtom"*
  %47 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 2, i32 0
  %48 = load i32, i32* %47, align 4
  %49 = getelementptr inbounds %"class.v8::internal::RegExpAtom", %"class.v8::internal::RegExpAtom"* %46, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [37 x i8*] }, { [37 x i8*] }* @_ZTVN2v88internal10RegExpAtomE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %49, align 8
  %50 = getelementptr inbounds %"class.v8::internal::RegExpAtom", %"class.v8::internal::RegExpAtom"* %46, i64 0, i32 1, i32 0
  %51 = bitcast i16** %50 to i64*
  store i64 %30, i64* %51, align 8
  %52 = getelementptr inbounds %"class.v8::internal::RegExpAtom", %"class.v8::internal::RegExpAtom"* %46, i64 0, i32 1, i32 1
  store i64 %33, i64* %52, align 8
  %53 = getelementptr inbounds %"class.v8::internal::RegExpAtom", %"class.v8::internal::RegExpAtom"* %46, i64 0, i32 2, i32 0
  store i32 %48, i32* %53, align 8
  %54 = getelementptr inbounds %"class.v8::internal::RegExpAtom", %"class.v8::internal::RegExpAtom"* %46, i64 0, i32 0
  store %"class.v8::internal::ZoneList.1143"* null, %"class.v8::internal::ZoneList.1143"** %23, align 8
  %55 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 6
  %56 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %27, align 8
  call void @_ZN2v88internal16BufferedZoneListINS0_10RegExpTreeELi2EE3AddEPS2_PNS0_4ZoneE(%"class.v8::internal::BufferedZoneList"* %55, %"class.v8::internal::RegExpTree"* %54, %"class.v8::internal::Zone"* %56) #13
  br label %57

57:                                               ; preds = %21, %44
  %58 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 6
  %59 = getelementptr inbounds %"class.v8::internal::BufferedZoneList", %"class.v8::internal::BufferedZoneList"* %58, i64 0, i32 0
  %60 = load %"class.v8::internal::ZoneList.1144"*, %"class.v8::internal::ZoneList.1144"** %59, align 8
  %61 = icmp eq %"class.v8::internal::ZoneList.1144"* %60, null
  br i1 %61, label %65, label %62

62:                                               ; preds = %57
  %63 = getelementptr inbounds %"class.v8::internal::ZoneList.1144", %"class.v8::internal::ZoneList.1144"* %60, i64 0, i32 2
  %64 = load i32, i32* %63, align 4
  br label %65

65:                                               ; preds = %57, %62
  %66 = phi i32 [ %64, %62 ], [ 0, %57 ]
  %67 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 6, i32 1
  %68 = load %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %67, align 8
  %69 = icmp ne %"class.v8::internal::RegExpTree"* %68, null
  %70 = zext i1 %69 to i32
  %71 = add i32 %66, %70
  switch i32 %71, label %76 [
    i32 0, label %140
    i32 1, label %72
  ]

72:                                               ; preds = %65
  %73 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 5
  %74 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 0
  %75 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %74, align 8
  call void @_ZN2v88internal16BufferedZoneListINS0_10RegExpTreeELi2EE3AddEPS2_PNS0_4ZoneE(%"class.v8::internal::BufferedZoneList"* %73, %"class.v8::internal::RegExpTree"* %68, %"class.v8::internal::Zone"* %75)
  br label %138

76:                                               ; preds = %65
  %77 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 0
  %78 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %77, align 8
  %79 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %78, i64 0, i32 2
  %80 = load i64, i64* %79, align 8
  %81 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %78, i64 0, i32 3
  %82 = load i64, i64* %81, align 8
  %83 = sub i64 %82, %80
  %84 = icmp ult i64 %83, 32
  br i1 %84, label %85, label %87, !prof !3

85:                                               ; preds = %76
  %86 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %78, i64 32) #13
  br label %89

87:                                               ; preds = %76
  %88 = add i64 %80, 32
  store i64 %88, i64* %79, align 8
  br label %89

89:                                               ; preds = %87, %85
  %90 = phi i64 [ %86, %85 ], [ %80, %87 ]
  %91 = inttoptr i64 %90 to %"class.v8::internal::RegExpText"*
  %92 = getelementptr inbounds %"class.v8::internal::RegExpText", %"class.v8::internal::RegExpText"* %91, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [37 x i8*] }, { [37 x i8*] }* @_ZTVN2v88internal10RegExpTextE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %92, align 8
  %93 = getelementptr inbounds %"class.v8::internal::RegExpText", %"class.v8::internal::RegExpText"* %91, i64 0, i32 1, i32 0
  store %"class.v8::internal::TextElement"* null, %"class.v8::internal::TextElement"** %93, align 8
  %94 = getelementptr inbounds %"class.v8::internal::RegExpText", %"class.v8::internal::RegExpText"* %91, i64 0, i32 1, i32 1
  store i32 2, i32* %94, align 8
  %95 = getelementptr inbounds %"class.v8::internal::RegExpText", %"class.v8::internal::RegExpText"* %91, i64 0, i32 1, i32 2
  store i32 0, i32* %95, align 4
  %96 = load i64, i64* %79, align 8
  %97 = load i64, i64* %81, align 8
  %98 = sub i64 %97, %96
  %99 = icmp ult i64 %98, 32
  br i1 %99, label %100, label %102, !prof !3

100:                                              ; preds = %89
  %101 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %78, i64 32) #13
  br label %104

102:                                              ; preds = %89
  %103 = add i64 %96, 32
  store i64 %103, i64* %79, align 8
  br label %104

104:                                              ; preds = %100, %102
  %105 = phi i64 [ %101, %100 ], [ %96, %102 ]
  %106 = inttoptr i64 %105 to %"class.v8::internal::TextElement"*
  store %"class.v8::internal::TextElement"* %106, %"class.v8::internal::TextElement"** %93, align 8
  %107 = getelementptr inbounds %"class.v8::internal::RegExpText", %"class.v8::internal::RegExpText"* %91, i64 0, i32 2
  store i32 0, i32* %107, align 8
  %108 = icmp sgt i32 %71, 0
  br i1 %108, label %109, label %111

109:                                              ; preds = %104
  %110 = zext i32 %71 to i64
  br label %115

111:                                              ; preds = %128, %104
  %112 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 5
  %113 = getelementptr inbounds %"class.v8::internal::RegExpText", %"class.v8::internal::RegExpText"* %91, i64 0, i32 0
  %114 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %77, align 8
  call void @_ZN2v88internal16BufferedZoneListINS0_10RegExpTreeELi2EE3AddEPS2_PNS0_4ZoneE(%"class.v8::internal::BufferedZoneList"* %112, %"class.v8::internal::RegExpTree"* %113, %"class.v8::internal::Zone"* %114)
  br label %138

115:                                              ; preds = %128, %109
  %116 = phi i64 [ 0, %109 ], [ %136, %128 ]
  %117 = load %"class.v8::internal::ZoneList.1144"*, %"class.v8::internal::ZoneList.1144"** %59, align 8
  %118 = icmp eq %"class.v8::internal::ZoneList.1144"* %117, null
  br i1 %118, label %128, label %119

119:                                              ; preds = %115
  %120 = getelementptr inbounds %"class.v8::internal::ZoneList.1144", %"class.v8::internal::ZoneList.1144"* %117, i64 0, i32 2
  %121 = load i32, i32* %120, align 4
  %122 = zext i32 %121 to i64
  %123 = icmp eq i64 %116, %122
  br i1 %123, label %128, label %124

124:                                              ; preds = %119
  %125 = getelementptr inbounds %"class.v8::internal::ZoneList.1144", %"class.v8::internal::ZoneList.1144"* %117, i64 0, i32 0
  %126 = load %"class.v8::internal::RegExpTree"**, %"class.v8::internal::RegExpTree"*** %125, align 8
  %127 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %126, i64 %116
  br label %128

128:                                              ; preds = %119, %115, %124
  %129 = phi %"class.v8::internal::RegExpTree"** [ %127, %124 ], [ %67, %115 ], [ %67, %119 ]
  %130 = load %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %129, align 8
  %131 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %77, align 8
  %132 = bitcast %"class.v8::internal::RegExpTree"* %130 to void (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpText"*, %"class.v8::internal::Zone"*)***
  %133 = load void (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpText"*, %"class.v8::internal::Zone"*)**, void (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpText"*, %"class.v8::internal::Zone"*)*** %132, align 8
  %134 = getelementptr inbounds void (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpText"*, %"class.v8::internal::Zone"*)*, void (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpText"*, %"class.v8::internal::Zone"*)** %133, i64 10
  %135 = load void (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpText"*, %"class.v8::internal::Zone"*)*, void (%"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpText"*, %"class.v8::internal::Zone"*)** %134, align 8
  call void %135(%"class.v8::internal::RegExpTree"* %130, %"class.v8::internal::RegExpText"* %91, %"class.v8::internal::Zone"* %131) #13
  %136 = add nuw nsw i64 %116, 1
  %137 = icmp eq i64 %136, %110
  br i1 %137, label %111, label %115

138:                                              ; preds = %72, %111
  %139 = bitcast %"class.v8::internal::BufferedZoneList"* %58 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %139, i8 0, i64 16, i1 false) #13
  br label %140

140:                                              ; preds = %65, %138
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::ZoneVector"* @_ZN2v88internal12RegExpParser21ParseCaptureGroupNameEv(%"class.v8::internal::RegExpParser"*) local_unnamed_addr #0 align 2 {
  %2 = alloca i32, align 4
  %3 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 1
  %4 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %3, align 8
  %5 = ptrtoint %"class.v8::internal::Zone"* %4 to i64
  %6 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %4, i64 0, i32 2
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %4, i64 0, i32 3
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %9, %7
  %11 = icmp ult i64 %10, 32
  br i1 %11, label %12, label %14, !prof !3

12:                                               ; preds = %1
  %13 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %4, i64 32) #13
  br label %16

14:                                               ; preds = %1
  %15 = add i64 %7, 32
  store i64 %15, i64* %6, align 8
  br label %16

16:                                               ; preds = %12, %14
  %17 = phi i64 [ %13, %12 ], [ %7, %14 ]
  %18 = inttoptr i64 %17 to i8*
  %19 = inttoptr i64 %17 to %"class.v8::internal::ZoneVector"*
  %20 = getelementptr inbounds %"class.v8::internal::ZoneVector", %"class.v8::internal::ZoneVector"* %19, i64 0, i32 0, i32 0, i32 2, i32 1
  %21 = bitcast %"struct.std::__1::__compressed_pair_elem.1132"* %20 to i64*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %18, i8 0, i64 24, i1 false) #13
  store i64 %5, i64* %21, align 8
  %22 = bitcast i32* %2 to i8*
  %23 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 8
  %24 = getelementptr inbounds %"class.v8::internal::ZoneVector", %"class.v8::internal::ZoneVector"* %19, i64 0, i32 0, i32 0, i32 1
  %25 = getelementptr inbounds %"class.v8::internal::ZoneVector", %"class.v8::internal::ZoneVector"* %19, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %26 = bitcast i16** %24 to i64*
  %27 = inttoptr i64 %17 to i64*
  %28 = bitcast i16** %25 to i64*
  %29 = getelementptr inbounds %"class.v8::internal::ZoneVector", %"class.v8::internal::ZoneVector"* %19, i64 0, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %30 = getelementptr inbounds %"class.v8::internal::ZoneVector", %"class.v8::internal::ZoneVector"* %19, i64 0, i32 0, i32 0, i32 0
  br label %31

31:                                               ; preds = %1405, %16
  %32 = phi i8 [ 1, %16 ], [ %1406, %1405 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %22) #13
  %33 = load i32, i32* %23, align 8
  store i32 %33, i32* %2, align 4
  tail call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0)
  %34 = icmp eq i32 %33, 92
  br i1 %34, label %35, label %71

35:                                               ; preds = %31
  %36 = load i32, i32* %23, align 8
  %37 = icmp eq i32 %36, 117
  br i1 %37, label %38, label %57

38:                                               ; preds = %35
  tail call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0)
  %39 = call zeroext i1 @_ZN2v88internal12RegExpParser18ParseUnicodeEscapeEPj(%"class.v8::internal::RegExpParser"* %0, i32* nonnull %2)
  br i1 %39, label %54, label %40

40:                                               ; preds = %38
  %41 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 18
  %42 = load i8, i8* %41, align 1, !range !2
  %43 = icmp eq i8 %42, 0
  br i1 %43, label %44, label %1407

44:                                               ; preds = %40
  store i8 1, i8* %41, align 1
  %45 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 2
  store i32 10, i32* %45, align 8
  %46 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 10
  %47 = load i32, i32* %46, align 8
  %48 = add nsw i32 %47, -1
  %49 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 3
  store i32 %48, i32* %49, align 4
  store i32 2097152, i32* %23, align 8
  %50 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 7
  %51 = load %"class.v8::internal::FlatStringReader"*, %"class.v8::internal::FlatStringReader"** %50, align 8
  %52 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %51, i64 0, i32 3
  %53 = load i32, i32* %52, align 4
  store i32 %53, i32* %46, align 8
  br label %1407

54:                                               ; preds = %38
  %55 = load i32, i32* %2, align 4
  %56 = icmp eq i32 %55, 92
  br i1 %56, label %57, label %71

57:                                               ; preds = %35, %54
  %58 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 18
  %59 = load i8, i8* %58, align 1, !range !2
  %60 = icmp eq i8 %59, 0
  br i1 %60, label %61, label %1407

61:                                               ; preds = %57
  store i8 1, i8* %58, align 1
  %62 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 2
  store i32 22, i32* %62, align 8
  %63 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 10
  %64 = load i32, i32* %63, align 8
  %65 = add nsw i32 %64, -1
  %66 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 3
  store i32 %65, i32* %66, align 4
  store i32 2097152, i32* %23, align 8
  %67 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 7
  %68 = load %"class.v8::internal::FlatStringReader"*, %"class.v8::internal::FlatStringReader"** %67, align 8
  %69 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %68, i64 0, i32 3
  %70 = load i32, i32* %69, align 4
  store i32 %70, i32* %63, align 8
  br label %1407

71:                                               ; preds = %31, %54
  %72 = phi i32 [ %55, %54 ], [ %33, %31 ]
  %73 = and i8 %32, 1
  %74 = icmp eq i8 %73, 0
  br i1 %74, label %739, label %75

75:                                               ; preds = %71
  %76 = icmp ult i32 %72, 256
  br i1 %76, label %77, label %83

77:                                               ; preds = %75
  %78 = zext i32 %72 to i64
  %79 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN2v88internalL17kOneByteCharFlagsE, i64 0, i64 %78
  %80 = load i8, i8* %79, align 1
  %81 = and i8 %80, 1
  %82 = icmp eq i8 %81, 0
  br i1 %82, label %85, label %101

83:                                               ; preds = %75
  %84 = tail call zeroext i1 @_ZN2v88internal21IsIdentifierStartSlowEj(i32 %72) #13
  br i1 %84, label %99, label %85

85:                                               ; preds = %77, %83
  %86 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 18
  %87 = load i8, i8* %86, align 1, !range !2
  %88 = icmp eq i8 %87, 0
  br i1 %88, label %89, label %1407

89:                                               ; preds = %85
  store i8 1, i8* %86, align 1
  %90 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 2
  store i32 22, i32* %90, align 8
  %91 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 10
  %92 = load i32, i32* %91, align 8
  %93 = add nsw i32 %92, -1
  %94 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 3
  store i32 %93, i32* %94, align 4
  store i32 2097152, i32* %23, align 8
  %95 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 7
  %96 = load %"class.v8::internal::FlatStringReader"*, %"class.v8::internal::FlatStringReader"** %95, align 8
  %97 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %96, i64 0, i32 3
  %98 = load i32, i32* %97, align 4
  store i32 %98, i32* %91, align 8
  br label %1407

99:                                               ; preds = %83
  %100 = icmp ult i32 %72, 65536
  br i1 %100, label %101, label %311

101:                                              ; preds = %77, %99
  %102 = trunc i32 %72 to i16
  %103 = load i16*, i16** %24, align 8
  %104 = load i16*, i16** %25, align 8
  %105 = icmp ult i16* %103, %104
  %106 = ptrtoint i16* %104 to i64
  br i1 %105, label %107, label %110

107:                                              ; preds = %101
  store i16 %102, i16* %103, align 2
  %108 = getelementptr inbounds i16, i16* %103, i64 1
  %109 = ptrtoint i16* %108 to i64
  store i64 %109, i64* %26, align 8
  br label %1405

110:                                              ; preds = %101
  %111 = ptrtoint i16* %103 to i64
  %112 = load i64, i64* %27, align 8
  %113 = sub i64 %111, %112
  %114 = ashr exact i64 %113, 1
  %115 = add nsw i64 %114, 1
  %116 = icmp ugt i64 %115, 1073741823
  br i1 %116, label %117, label %119

117:                                              ; preds = %110
  %118 = inttoptr i64 %17 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %118) #14
  unreachable

119:                                              ; preds = %110
  %120 = sub i64 %106, %112
  %121 = ashr exact i64 %120, 1
  %122 = icmp ult i64 %121, 536870911
  %123 = icmp ult i64 %120, %115
  %124 = select i1 %123, i64 %115, i64 %120
  %125 = select i1 %122, i64 %124, i64 1073741823
  %126 = icmp eq i64 %125, 0
  br i1 %126, label %145, label %127

127:                                              ; preds = %119
  %128 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %29, align 8
  %129 = shl i64 %125, 1
  %130 = add i64 %129, 7
  %131 = and i64 %130, -8
  %132 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %128, i64 0, i32 2
  %133 = load i64, i64* %132, align 8
  %134 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %128, i64 0, i32 3
  %135 = load i64, i64* %134, align 8
  %136 = sub i64 %135, %133
  %137 = icmp ugt i64 %131, %136
  br i1 %137, label %138, label %140, !prof !3

138:                                              ; preds = %127
  %139 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %128, i64 %131) #13
  br label %142

140:                                              ; preds = %127
  %141 = add i64 %133, %131
  store i64 %141, i64* %132, align 8
  br label %142

142:                                              ; preds = %140, %138
  %143 = phi i64 [ %139, %138 ], [ %133, %140 ]
  %144 = inttoptr i64 %143 to i16*
  br label %145

145:                                              ; preds = %142, %119
  %146 = phi i16* [ %144, %142 ], [ null, %119 ]
  %147 = getelementptr inbounds i16, i16* %146, i64 %114
  %148 = getelementptr inbounds i16, i16* %146, i64 %125
  %149 = ptrtoint i16* %148 to i64
  store i16 %102, i16* %147, align 2
  %150 = getelementptr inbounds i16, i16* %147, i64 1
  %151 = ptrtoint i16* %150 to i64
  %152 = load i16*, i16** %30, align 8
  %153 = ptrtoint i16* %152 to i64
  %154 = load i16*, i16** %24, align 8
  %155 = icmp eq i16* %154, %152
  br i1 %155, label %308, label %156

156:                                              ; preds = %145
  %157 = getelementptr i16, i16* %154, i64 -1
  %158 = ptrtoint i16* %157 to i64
  %159 = sub i64 %158, %153
  %160 = lshr i64 %159, 1
  %161 = add nuw i64 %160, 1
  %162 = icmp ult i64 %161, 16
  br i1 %162, label %256, label %163

163:                                              ; preds = %156
  %164 = getelementptr i16, i16* %146, i64 -1
  %165 = getelementptr i16, i16* %154, i64 -1
  %166 = ptrtoint i16* %165 to i64
  %167 = sub i64 %166, %153
  %168 = lshr i64 %167, 1
  %169 = sub i64 %114, %168
  %170 = getelementptr i16, i16* %164, i64 %169
  %171 = getelementptr i16, i16* %154, i64 -1
  %172 = sub nsw i64 0, %168
  %173 = getelementptr i16, i16* %171, i64 %172
  %174 = icmp ult i16* %170, %154
  %175 = icmp ult i16* %173, %147
  %176 = and i1 %174, %175
  br i1 %176, label %256, label %177

177:                                              ; preds = %163
  %178 = and i64 %161, -16
  %179 = sub i64 0, %178
  %180 = getelementptr i16, i16* %147, i64 %179
  %181 = sub i64 0, %178
  %182 = getelementptr i16, i16* %154, i64 %181
  %183 = add i64 %178, -16
  %184 = lshr exact i64 %183, 4
  %185 = add nuw nsw i64 %184, 1
  %186 = and i64 %185, 1
  %187 = icmp eq i64 %183, 0
  br i1 %187, label %232, label %188

188:                                              ; preds = %177
  %189 = sub nuw nsw i64 %185, %186
  %190 = getelementptr i16, i16* %147, i64 -1
  %191 = getelementptr i16, i16* %154, i64 -1
  %192 = getelementptr i16, i16* %147, i64 -1
  %193 = getelementptr i16, i16* %154, i64 -1
  br label %194

194:                                              ; preds = %194, %188
  %195 = phi i64 [ 0, %188 ], [ %229, %194 ]
  %196 = phi i64 [ %189, %188 ], [ %230, %194 ]
  %197 = sub i64 0, %195
  %198 = sub i64 0, %195
  %199 = getelementptr inbounds i16, i16* %190, i64 %197
  %200 = getelementptr inbounds i16, i16* %191, i64 %198
  %201 = getelementptr inbounds i16, i16* %200, i64 -7
  %202 = bitcast i16* %201 to <8 x i16>*
  %203 = load <8 x i16>, <8 x i16>* %202, align 2, !alias.scope !38
  %204 = getelementptr inbounds i16, i16* %200, i64 -8
  %205 = getelementptr inbounds i16, i16* %204, i64 -7
  %206 = bitcast i16* %205 to <8 x i16>*
  %207 = load <8 x i16>, <8 x i16>* %206, align 2, !alias.scope !38
  %208 = getelementptr inbounds i16, i16* %199, i64 -7
  %209 = bitcast i16* %208 to <8 x i16>*
  store <8 x i16> %203, <8 x i16>* %209, align 2, !alias.scope !41, !noalias !38
  %210 = getelementptr inbounds i16, i16* %199, i64 -8
  %211 = getelementptr inbounds i16, i16* %210, i64 -7
  %212 = bitcast i16* %211 to <8 x i16>*
  store <8 x i16> %207, <8 x i16>* %212, align 2, !alias.scope !41, !noalias !38
  %213 = sub nuw nsw i64 -16, %195
  %214 = sub nuw nsw i64 -16, %195
  %215 = getelementptr inbounds i16, i16* %192, i64 %213
  %216 = getelementptr inbounds i16, i16* %193, i64 %214
  %217 = getelementptr inbounds i16, i16* %216, i64 -7
  %218 = bitcast i16* %217 to <8 x i16>*
  %219 = load <8 x i16>, <8 x i16>* %218, align 2, !alias.scope !38
  %220 = getelementptr inbounds i16, i16* %216, i64 -8
  %221 = getelementptr inbounds i16, i16* %220, i64 -7
  %222 = bitcast i16* %221 to <8 x i16>*
  %223 = load <8 x i16>, <8 x i16>* %222, align 2, !alias.scope !38
  %224 = getelementptr inbounds i16, i16* %215, i64 -7
  %225 = bitcast i16* %224 to <8 x i16>*
  store <8 x i16> %219, <8 x i16>* %225, align 2, !alias.scope !41, !noalias !38
  %226 = getelementptr inbounds i16, i16* %215, i64 -8
  %227 = getelementptr inbounds i16, i16* %226, i64 -7
  %228 = bitcast i16* %227 to <8 x i16>*
  store <8 x i16> %223, <8 x i16>* %228, align 2, !alias.scope !41, !noalias !38
  %229 = add i64 %195, 32
  %230 = add i64 %196, -2
  %231 = icmp eq i64 %230, 0
  br i1 %231, label %232, label %194, !llvm.loop !43

232:                                              ; preds = %194, %177
  %233 = phi i64 [ 0, %177 ], [ %229, %194 ]
  %234 = icmp eq i64 %186, 0
  br i1 %234, label %254, label %235

235:                                              ; preds = %232
  %236 = sub i64 0, %233
  %237 = getelementptr i16, i16* %147, i64 -1
  %238 = sub i64 0, %233
  %239 = getelementptr i16, i16* %154, i64 -1
  %240 = getelementptr inbounds i16, i16* %237, i64 %236
  %241 = getelementptr inbounds i16, i16* %239, i64 %238
  %242 = getelementptr inbounds i16, i16* %241, i64 -7
  %243 = bitcast i16* %242 to <8 x i16>*
  %244 = load <8 x i16>, <8 x i16>* %243, align 2, !alias.scope !38
  %245 = getelementptr inbounds i16, i16* %241, i64 -8
  %246 = getelementptr inbounds i16, i16* %245, i64 -7
  %247 = bitcast i16* %246 to <8 x i16>*
  %248 = load <8 x i16>, <8 x i16>* %247, align 2, !alias.scope !38
  %249 = getelementptr inbounds i16, i16* %240, i64 -7
  %250 = bitcast i16* %249 to <8 x i16>*
  store <8 x i16> %244, <8 x i16>* %250, align 2, !alias.scope !41, !noalias !38
  %251 = getelementptr inbounds i16, i16* %240, i64 -8
  %252 = getelementptr inbounds i16, i16* %251, i64 -7
  %253 = bitcast i16* %252 to <8 x i16>*
  store <8 x i16> %248, <8 x i16>* %253, align 2, !alias.scope !41, !noalias !38
  br label %254

254:                                              ; preds = %232, %235
  %255 = icmp eq i64 %161, %178
  br i1 %255, label %308, label %256

256:                                              ; preds = %254, %163, %156
  %257 = phi i16* [ %147, %163 ], [ %147, %156 ], [ %180, %254 ]
  %258 = phi i16* [ %154, %163 ], [ %154, %156 ], [ %182, %254 ]
  %259 = getelementptr i16, i16* %258, i64 -1
  %260 = ptrtoint i16* %259 to i64
  %261 = sub i64 %260, %153
  %262 = lshr i64 %261, 1
  %263 = add nuw i64 %262, 1
  %264 = and i64 %263, 7
  %265 = icmp eq i64 %264, 0
  br i1 %265, label %275, label %266

266:                                              ; preds = %256, %266
  %267 = phi i16* [ %270, %266 ], [ %257, %256 ]
  %268 = phi i16* [ %271, %266 ], [ %258, %256 ]
  %269 = phi i64 [ %273, %266 ], [ %264, %256 ]
  %270 = getelementptr inbounds i16, i16* %267, i64 -1
  %271 = getelementptr inbounds i16, i16* %268, i64 -1
  %272 = load i16, i16* %271, align 2
  store i16 %272, i16* %270, align 2
  %273 = add i64 %269, -1
  %274 = icmp eq i64 %273, 0
  br i1 %274, label %275, label %266, !llvm.loop !44

275:                                              ; preds = %266, %256
  %276 = phi i16* [ undef, %256 ], [ %270, %266 ]
  %277 = phi i16* [ %257, %256 ], [ %270, %266 ]
  %278 = phi i16* [ %258, %256 ], [ %271, %266 ]
  %279 = icmp ult i64 %261, 14
  br i1 %279, label %308, label %280

280:                                              ; preds = %275, %280
  %281 = phi i16* [ %304, %280 ], [ %277, %275 ]
  %282 = phi i16* [ %305, %280 ], [ %278, %275 ]
  %283 = getelementptr inbounds i16, i16* %281, i64 -1
  %284 = getelementptr inbounds i16, i16* %282, i64 -1
  %285 = load i16, i16* %284, align 2
  store i16 %285, i16* %283, align 2
  %286 = getelementptr inbounds i16, i16* %281, i64 -2
  %287 = getelementptr inbounds i16, i16* %282, i64 -2
  %288 = load i16, i16* %287, align 2
  store i16 %288, i16* %286, align 2
  %289 = getelementptr inbounds i16, i16* %281, i64 -3
  %290 = getelementptr inbounds i16, i16* %282, i64 -3
  %291 = load i16, i16* %290, align 2
  store i16 %291, i16* %289, align 2
  %292 = getelementptr inbounds i16, i16* %281, i64 -4
  %293 = getelementptr inbounds i16, i16* %282, i64 -4
  %294 = load i16, i16* %293, align 2
  store i16 %294, i16* %292, align 2
  %295 = getelementptr inbounds i16, i16* %281, i64 -5
  %296 = getelementptr inbounds i16, i16* %282, i64 -5
  %297 = load i16, i16* %296, align 2
  store i16 %297, i16* %295, align 2
  %298 = getelementptr inbounds i16, i16* %281, i64 -6
  %299 = getelementptr inbounds i16, i16* %282, i64 -6
  %300 = load i16, i16* %299, align 2
  store i16 %300, i16* %298, align 2
  %301 = getelementptr inbounds i16, i16* %281, i64 -7
  %302 = getelementptr inbounds i16, i16* %282, i64 -7
  %303 = load i16, i16* %302, align 2
  store i16 %303, i16* %301, align 2
  %304 = getelementptr inbounds i16, i16* %281, i64 -8
  %305 = getelementptr inbounds i16, i16* %282, i64 -8
  %306 = load i16, i16* %305, align 2
  store i16 %306, i16* %304, align 2
  %307 = icmp eq i16* %305, %152
  br i1 %307, label %308, label %280, !llvm.loop !45

308:                                              ; preds = %275, %280, %254, %145
  %309 = phi i16* [ %147, %145 ], [ %180, %254 ], [ %276, %275 ], [ %304, %280 ]
  %310 = ptrtoint i16* %309 to i64
  store i64 %310, i64* %27, align 8
  store i64 %151, i64* %26, align 8
  store i64 %149, i64* %28, align 8
  br label %1405

311:                                              ; preds = %99
  %312 = add i32 %72, 983040
  %313 = lshr i32 %312, 10
  %314 = trunc i32 %313 to i16
  %315 = and i16 %314, 1023
  %316 = or i16 %315, -10240
  %317 = load i16*, i16** %24, align 8
  %318 = load i16*, i16** %25, align 8
  %319 = icmp ult i16* %317, %318
  %320 = ptrtoint i16* %318 to i64
  br i1 %319, label %321, label %326

321:                                              ; preds = %311
  store i16 %316, i16* %317, align 2
  %322 = getelementptr inbounds i16, i16* %317, i64 1
  %323 = ptrtoint i16* %322 to i64
  store i64 %323, i64* %26, align 8
  %324 = load i16*, i16** %25, align 8
  %325 = ptrtoint i16* %324 to i64
  br label %527

326:                                              ; preds = %311
  %327 = ptrtoint i16* %317 to i64
  %328 = load i64, i64* %27, align 8
  %329 = sub i64 %327, %328
  %330 = ashr exact i64 %329, 1
  %331 = add nsw i64 %330, 1
  %332 = icmp ugt i64 %331, 1073741823
  br i1 %332, label %333, label %335

333:                                              ; preds = %326
  %334 = inttoptr i64 %17 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %334) #14
  unreachable

335:                                              ; preds = %326
  %336 = sub i64 %320, %328
  %337 = ashr exact i64 %336, 1
  %338 = icmp ult i64 %337, 536870911
  %339 = icmp ult i64 %336, %331
  %340 = select i1 %339, i64 %331, i64 %336
  %341 = select i1 %338, i64 %340, i64 1073741823
  %342 = icmp eq i64 %341, 0
  br i1 %342, label %361, label %343

343:                                              ; preds = %335
  %344 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %29, align 8
  %345 = shl i64 %341, 1
  %346 = add i64 %345, 7
  %347 = and i64 %346, -8
  %348 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %344, i64 0, i32 2
  %349 = load i64, i64* %348, align 8
  %350 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %344, i64 0, i32 3
  %351 = load i64, i64* %350, align 8
  %352 = sub i64 %351, %349
  %353 = icmp ugt i64 %347, %352
  br i1 %353, label %354, label %356, !prof !3

354:                                              ; preds = %343
  %355 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %344, i64 %347) #13
  br label %358

356:                                              ; preds = %343
  %357 = add i64 %349, %347
  store i64 %357, i64* %348, align 8
  br label %358

358:                                              ; preds = %356, %354
  %359 = phi i64 [ %355, %354 ], [ %349, %356 ]
  %360 = inttoptr i64 %359 to i16*
  br label %361

361:                                              ; preds = %358, %335
  %362 = phi i16* [ %360, %358 ], [ null, %335 ]
  %363 = getelementptr inbounds i16, i16* %362, i64 %330
  %364 = getelementptr inbounds i16, i16* %362, i64 %341
  %365 = ptrtoint i16* %364 to i64
  store i16 %316, i16* %363, align 2
  %366 = getelementptr inbounds i16, i16* %363, i64 1
  %367 = ptrtoint i16* %366 to i64
  %368 = load i16*, i16** %30, align 8
  %369 = ptrtoint i16* %368 to i64
  %370 = load i16*, i16** %24, align 8
  %371 = icmp eq i16* %370, %368
  br i1 %371, label %524, label %372

372:                                              ; preds = %361
  %373 = getelementptr i16, i16* %370, i64 -1
  %374 = ptrtoint i16* %373 to i64
  %375 = sub i64 %374, %369
  %376 = lshr i64 %375, 1
  %377 = add nuw i64 %376, 1
  %378 = icmp ult i64 %377, 16
  br i1 %378, label %472, label %379

379:                                              ; preds = %372
  %380 = getelementptr i16, i16* %362, i64 -1
  %381 = getelementptr i16, i16* %370, i64 -1
  %382 = ptrtoint i16* %381 to i64
  %383 = sub i64 %382, %369
  %384 = lshr i64 %383, 1
  %385 = sub i64 %330, %384
  %386 = getelementptr i16, i16* %380, i64 %385
  %387 = getelementptr i16, i16* %370, i64 -1
  %388 = sub nsw i64 0, %384
  %389 = getelementptr i16, i16* %387, i64 %388
  %390 = icmp ult i16* %386, %370
  %391 = icmp ult i16* %389, %363
  %392 = and i1 %390, %391
  br i1 %392, label %472, label %393

393:                                              ; preds = %379
  %394 = and i64 %377, -16
  %395 = sub i64 0, %394
  %396 = getelementptr i16, i16* %363, i64 %395
  %397 = sub i64 0, %394
  %398 = getelementptr i16, i16* %370, i64 %397
  %399 = add i64 %394, -16
  %400 = lshr exact i64 %399, 4
  %401 = add nuw nsw i64 %400, 1
  %402 = and i64 %401, 1
  %403 = icmp eq i64 %399, 0
  br i1 %403, label %448, label %404

404:                                              ; preds = %393
  %405 = sub nuw nsw i64 %401, %402
  %406 = getelementptr i16, i16* %363, i64 -1
  %407 = getelementptr i16, i16* %370, i64 -1
  %408 = getelementptr i16, i16* %363, i64 -1
  %409 = getelementptr i16, i16* %370, i64 -1
  br label %410

410:                                              ; preds = %410, %404
  %411 = phi i64 [ 0, %404 ], [ %445, %410 ]
  %412 = phi i64 [ %405, %404 ], [ %446, %410 ]
  %413 = sub i64 0, %411
  %414 = sub i64 0, %411
  %415 = getelementptr inbounds i16, i16* %406, i64 %413
  %416 = getelementptr inbounds i16, i16* %407, i64 %414
  %417 = getelementptr inbounds i16, i16* %416, i64 -7
  %418 = bitcast i16* %417 to <8 x i16>*
  %419 = load <8 x i16>, <8 x i16>* %418, align 2, !alias.scope !46
  %420 = getelementptr inbounds i16, i16* %416, i64 -8
  %421 = getelementptr inbounds i16, i16* %420, i64 -7
  %422 = bitcast i16* %421 to <8 x i16>*
  %423 = load <8 x i16>, <8 x i16>* %422, align 2, !alias.scope !46
  %424 = getelementptr inbounds i16, i16* %415, i64 -7
  %425 = bitcast i16* %424 to <8 x i16>*
  store <8 x i16> %419, <8 x i16>* %425, align 2, !alias.scope !49, !noalias !46
  %426 = getelementptr inbounds i16, i16* %415, i64 -8
  %427 = getelementptr inbounds i16, i16* %426, i64 -7
  %428 = bitcast i16* %427 to <8 x i16>*
  store <8 x i16> %423, <8 x i16>* %428, align 2, !alias.scope !49, !noalias !46
  %429 = sub nuw nsw i64 -16, %411
  %430 = sub nuw nsw i64 -16, %411
  %431 = getelementptr inbounds i16, i16* %408, i64 %429
  %432 = getelementptr inbounds i16, i16* %409, i64 %430
  %433 = getelementptr inbounds i16, i16* %432, i64 -7
  %434 = bitcast i16* %433 to <8 x i16>*
  %435 = load <8 x i16>, <8 x i16>* %434, align 2, !alias.scope !46
  %436 = getelementptr inbounds i16, i16* %432, i64 -8
  %437 = getelementptr inbounds i16, i16* %436, i64 -7
  %438 = bitcast i16* %437 to <8 x i16>*
  %439 = load <8 x i16>, <8 x i16>* %438, align 2, !alias.scope !46
  %440 = getelementptr inbounds i16, i16* %431, i64 -7
  %441 = bitcast i16* %440 to <8 x i16>*
  store <8 x i16> %435, <8 x i16>* %441, align 2, !alias.scope !49, !noalias !46
  %442 = getelementptr inbounds i16, i16* %431, i64 -8
  %443 = getelementptr inbounds i16, i16* %442, i64 -7
  %444 = bitcast i16* %443 to <8 x i16>*
  store <8 x i16> %439, <8 x i16>* %444, align 2, !alias.scope !49, !noalias !46
  %445 = add i64 %411, 32
  %446 = add i64 %412, -2
  %447 = icmp eq i64 %446, 0
  br i1 %447, label %448, label %410, !llvm.loop !51

448:                                              ; preds = %410, %393
  %449 = phi i64 [ 0, %393 ], [ %445, %410 ]
  %450 = icmp eq i64 %402, 0
  br i1 %450, label %470, label %451

451:                                              ; preds = %448
  %452 = sub i64 0, %449
  %453 = getelementptr i16, i16* %363, i64 -1
  %454 = sub i64 0, %449
  %455 = getelementptr i16, i16* %370, i64 -1
  %456 = getelementptr inbounds i16, i16* %453, i64 %452
  %457 = getelementptr inbounds i16, i16* %455, i64 %454
  %458 = getelementptr inbounds i16, i16* %457, i64 -7
  %459 = bitcast i16* %458 to <8 x i16>*
  %460 = load <8 x i16>, <8 x i16>* %459, align 2, !alias.scope !46
  %461 = getelementptr inbounds i16, i16* %457, i64 -8
  %462 = getelementptr inbounds i16, i16* %461, i64 -7
  %463 = bitcast i16* %462 to <8 x i16>*
  %464 = load <8 x i16>, <8 x i16>* %463, align 2, !alias.scope !46
  %465 = getelementptr inbounds i16, i16* %456, i64 -7
  %466 = bitcast i16* %465 to <8 x i16>*
  store <8 x i16> %460, <8 x i16>* %466, align 2, !alias.scope !49, !noalias !46
  %467 = getelementptr inbounds i16, i16* %456, i64 -8
  %468 = getelementptr inbounds i16, i16* %467, i64 -7
  %469 = bitcast i16* %468 to <8 x i16>*
  store <8 x i16> %464, <8 x i16>* %469, align 2, !alias.scope !49, !noalias !46
  br label %470

470:                                              ; preds = %448, %451
  %471 = icmp eq i64 %377, %394
  br i1 %471, label %524, label %472

472:                                              ; preds = %470, %379, %372
  %473 = phi i16* [ %363, %379 ], [ %363, %372 ], [ %396, %470 ]
  %474 = phi i16* [ %370, %379 ], [ %370, %372 ], [ %398, %470 ]
  %475 = getelementptr i16, i16* %474, i64 -1
  %476 = ptrtoint i16* %475 to i64
  %477 = sub i64 %476, %369
  %478 = lshr i64 %477, 1
  %479 = add nuw i64 %478, 1
  %480 = and i64 %479, 7
  %481 = icmp eq i64 %480, 0
  br i1 %481, label %491, label %482

482:                                              ; preds = %472, %482
  %483 = phi i16* [ %486, %482 ], [ %473, %472 ]
  %484 = phi i16* [ %487, %482 ], [ %474, %472 ]
  %485 = phi i64 [ %489, %482 ], [ %480, %472 ]
  %486 = getelementptr inbounds i16, i16* %483, i64 -1
  %487 = getelementptr inbounds i16, i16* %484, i64 -1
  %488 = load i16, i16* %487, align 2
  store i16 %488, i16* %486, align 2
  %489 = add i64 %485, -1
  %490 = icmp eq i64 %489, 0
  br i1 %490, label %491, label %482, !llvm.loop !52

491:                                              ; preds = %482, %472
  %492 = phi i16* [ undef, %472 ], [ %486, %482 ]
  %493 = phi i16* [ %473, %472 ], [ %486, %482 ]
  %494 = phi i16* [ %474, %472 ], [ %487, %482 ]
  %495 = icmp ult i64 %477, 14
  br i1 %495, label %524, label %496

496:                                              ; preds = %491, %496
  %497 = phi i16* [ %520, %496 ], [ %493, %491 ]
  %498 = phi i16* [ %521, %496 ], [ %494, %491 ]
  %499 = getelementptr inbounds i16, i16* %497, i64 -1
  %500 = getelementptr inbounds i16, i16* %498, i64 -1
  %501 = load i16, i16* %500, align 2
  store i16 %501, i16* %499, align 2
  %502 = getelementptr inbounds i16, i16* %497, i64 -2
  %503 = getelementptr inbounds i16, i16* %498, i64 -2
  %504 = load i16, i16* %503, align 2
  store i16 %504, i16* %502, align 2
  %505 = getelementptr inbounds i16, i16* %497, i64 -3
  %506 = getelementptr inbounds i16, i16* %498, i64 -3
  %507 = load i16, i16* %506, align 2
  store i16 %507, i16* %505, align 2
  %508 = getelementptr inbounds i16, i16* %497, i64 -4
  %509 = getelementptr inbounds i16, i16* %498, i64 -4
  %510 = load i16, i16* %509, align 2
  store i16 %510, i16* %508, align 2
  %511 = getelementptr inbounds i16, i16* %497, i64 -5
  %512 = getelementptr inbounds i16, i16* %498, i64 -5
  %513 = load i16, i16* %512, align 2
  store i16 %513, i16* %511, align 2
  %514 = getelementptr inbounds i16, i16* %497, i64 -6
  %515 = getelementptr inbounds i16, i16* %498, i64 -6
  %516 = load i16, i16* %515, align 2
  store i16 %516, i16* %514, align 2
  %517 = getelementptr inbounds i16, i16* %497, i64 -7
  %518 = getelementptr inbounds i16, i16* %498, i64 -7
  %519 = load i16, i16* %518, align 2
  store i16 %519, i16* %517, align 2
  %520 = getelementptr inbounds i16, i16* %497, i64 -8
  %521 = getelementptr inbounds i16, i16* %498, i64 -8
  %522 = load i16, i16* %521, align 2
  store i16 %522, i16* %520, align 2
  %523 = icmp eq i16* %521, %368
  br i1 %523, label %524, label %496, !llvm.loop !53

524:                                              ; preds = %491, %496, %470, %361
  %525 = phi i16* [ %363, %361 ], [ %396, %470 ], [ %492, %491 ], [ %520, %496 ]
  %526 = ptrtoint i16* %525 to i64
  store i64 %526, i64* %27, align 8
  store i64 %367, i64* %26, align 8
  store i64 %365, i64* %28, align 8
  br label %527

527:                                              ; preds = %321, %524
  %528 = phi i64 [ %325, %321 ], [ %365, %524 ]
  %529 = phi i16* [ %324, %321 ], [ %364, %524 ]
  %530 = phi i16* [ %322, %321 ], [ %366, %524 ]
  %531 = trunc i32 %72 to i16
  %532 = and i16 %531, 1023
  %533 = or i16 %532, -9216
  %534 = icmp ult i16* %530, %529
  br i1 %534, label %535, label %538

535:                                              ; preds = %527
  store i16 %533, i16* %530, align 2
  %536 = getelementptr inbounds i16, i16* %530, i64 1
  %537 = ptrtoint i16* %536 to i64
  store i64 %537, i64* %26, align 8
  br label %1405

538:                                              ; preds = %527
  %539 = ptrtoint i16* %530 to i64
  %540 = load i64, i64* %27, align 8
  %541 = sub i64 %539, %540
  %542 = ashr exact i64 %541, 1
  %543 = add nsw i64 %542, 1
  %544 = icmp ugt i64 %543, 1073741823
  br i1 %544, label %545, label %547

545:                                              ; preds = %538
  %546 = inttoptr i64 %17 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %546) #14
  unreachable

547:                                              ; preds = %538
  %548 = sub i64 %528, %540
  %549 = ashr exact i64 %548, 1
  %550 = icmp ult i64 %549, 536870911
  %551 = icmp ult i64 %548, %543
  %552 = select i1 %551, i64 %543, i64 %548
  %553 = select i1 %550, i64 %552, i64 1073741823
  %554 = icmp eq i64 %553, 0
  br i1 %554, label %573, label %555

555:                                              ; preds = %547
  %556 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %29, align 8
  %557 = shl i64 %553, 1
  %558 = add i64 %557, 7
  %559 = and i64 %558, -8
  %560 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %556, i64 0, i32 2
  %561 = load i64, i64* %560, align 8
  %562 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %556, i64 0, i32 3
  %563 = load i64, i64* %562, align 8
  %564 = sub i64 %563, %561
  %565 = icmp ugt i64 %559, %564
  br i1 %565, label %566, label %568, !prof !3

566:                                              ; preds = %555
  %567 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %556, i64 %559) #13
  br label %570

568:                                              ; preds = %555
  %569 = add i64 %561, %559
  store i64 %569, i64* %560, align 8
  br label %570

570:                                              ; preds = %568, %566
  %571 = phi i64 [ %567, %566 ], [ %561, %568 ]
  %572 = inttoptr i64 %571 to i16*
  br label %573

573:                                              ; preds = %570, %547
  %574 = phi i16* [ %572, %570 ], [ null, %547 ]
  %575 = getelementptr inbounds i16, i16* %574, i64 %542
  %576 = getelementptr inbounds i16, i16* %574, i64 %553
  %577 = ptrtoint i16* %576 to i64
  store i16 %533, i16* %575, align 2
  %578 = getelementptr inbounds i16, i16* %575, i64 1
  %579 = ptrtoint i16* %578 to i64
  %580 = load i16*, i16** %30, align 8
  %581 = ptrtoint i16* %580 to i64
  %582 = load i16*, i16** %24, align 8
  %583 = icmp eq i16* %582, %580
  br i1 %583, label %736, label %584

584:                                              ; preds = %573
  %585 = getelementptr i16, i16* %582, i64 -1
  %586 = ptrtoint i16* %585 to i64
  %587 = sub i64 %586, %581
  %588 = lshr i64 %587, 1
  %589 = add nuw i64 %588, 1
  %590 = icmp ult i64 %589, 16
  br i1 %590, label %684, label %591

591:                                              ; preds = %584
  %592 = getelementptr i16, i16* %574, i64 -1
  %593 = getelementptr i16, i16* %582, i64 -1
  %594 = ptrtoint i16* %593 to i64
  %595 = sub i64 %594, %581
  %596 = lshr i64 %595, 1
  %597 = sub i64 %542, %596
  %598 = getelementptr i16, i16* %592, i64 %597
  %599 = getelementptr i16, i16* %582, i64 -1
  %600 = sub nsw i64 0, %596
  %601 = getelementptr i16, i16* %599, i64 %600
  %602 = icmp ult i16* %598, %582
  %603 = icmp ult i16* %601, %575
  %604 = and i1 %602, %603
  br i1 %604, label %684, label %605

605:                                              ; preds = %591
  %606 = and i64 %589, -16
  %607 = sub i64 0, %606
  %608 = getelementptr i16, i16* %575, i64 %607
  %609 = sub i64 0, %606
  %610 = getelementptr i16, i16* %582, i64 %609
  %611 = add i64 %606, -16
  %612 = lshr exact i64 %611, 4
  %613 = add nuw nsw i64 %612, 1
  %614 = and i64 %613, 1
  %615 = icmp eq i64 %611, 0
  br i1 %615, label %660, label %616

616:                                              ; preds = %605
  %617 = sub nuw nsw i64 %613, %614
  %618 = getelementptr i16, i16* %575, i64 -1
  %619 = getelementptr i16, i16* %582, i64 -1
  %620 = getelementptr i16, i16* %575, i64 -1
  %621 = getelementptr i16, i16* %582, i64 -1
  br label %622

622:                                              ; preds = %622, %616
  %623 = phi i64 [ 0, %616 ], [ %657, %622 ]
  %624 = phi i64 [ %617, %616 ], [ %658, %622 ]
  %625 = sub i64 0, %623
  %626 = sub i64 0, %623
  %627 = getelementptr inbounds i16, i16* %618, i64 %625
  %628 = getelementptr inbounds i16, i16* %619, i64 %626
  %629 = getelementptr inbounds i16, i16* %628, i64 -7
  %630 = bitcast i16* %629 to <8 x i16>*
  %631 = load <8 x i16>, <8 x i16>* %630, align 2, !alias.scope !54
  %632 = getelementptr inbounds i16, i16* %628, i64 -8
  %633 = getelementptr inbounds i16, i16* %632, i64 -7
  %634 = bitcast i16* %633 to <8 x i16>*
  %635 = load <8 x i16>, <8 x i16>* %634, align 2, !alias.scope !54
  %636 = getelementptr inbounds i16, i16* %627, i64 -7
  %637 = bitcast i16* %636 to <8 x i16>*
  store <8 x i16> %631, <8 x i16>* %637, align 2, !alias.scope !57, !noalias !54
  %638 = getelementptr inbounds i16, i16* %627, i64 -8
  %639 = getelementptr inbounds i16, i16* %638, i64 -7
  %640 = bitcast i16* %639 to <8 x i16>*
  store <8 x i16> %635, <8 x i16>* %640, align 2, !alias.scope !57, !noalias !54
  %641 = sub nuw nsw i64 -16, %623
  %642 = sub nuw nsw i64 -16, %623
  %643 = getelementptr inbounds i16, i16* %620, i64 %641
  %644 = getelementptr inbounds i16, i16* %621, i64 %642
  %645 = getelementptr inbounds i16, i16* %644, i64 -7
  %646 = bitcast i16* %645 to <8 x i16>*
  %647 = load <8 x i16>, <8 x i16>* %646, align 2, !alias.scope !54
  %648 = getelementptr inbounds i16, i16* %644, i64 -8
  %649 = getelementptr inbounds i16, i16* %648, i64 -7
  %650 = bitcast i16* %649 to <8 x i16>*
  %651 = load <8 x i16>, <8 x i16>* %650, align 2, !alias.scope !54
  %652 = getelementptr inbounds i16, i16* %643, i64 -7
  %653 = bitcast i16* %652 to <8 x i16>*
  store <8 x i16> %647, <8 x i16>* %653, align 2, !alias.scope !57, !noalias !54
  %654 = getelementptr inbounds i16, i16* %643, i64 -8
  %655 = getelementptr inbounds i16, i16* %654, i64 -7
  %656 = bitcast i16* %655 to <8 x i16>*
  store <8 x i16> %651, <8 x i16>* %656, align 2, !alias.scope !57, !noalias !54
  %657 = add i64 %623, 32
  %658 = add i64 %624, -2
  %659 = icmp eq i64 %658, 0
  br i1 %659, label %660, label %622, !llvm.loop !59

660:                                              ; preds = %622, %605
  %661 = phi i64 [ 0, %605 ], [ %657, %622 ]
  %662 = icmp eq i64 %614, 0
  br i1 %662, label %682, label %663

663:                                              ; preds = %660
  %664 = sub i64 0, %661
  %665 = getelementptr i16, i16* %575, i64 -1
  %666 = sub i64 0, %661
  %667 = getelementptr i16, i16* %582, i64 -1
  %668 = getelementptr inbounds i16, i16* %665, i64 %664
  %669 = getelementptr inbounds i16, i16* %667, i64 %666
  %670 = getelementptr inbounds i16, i16* %669, i64 -7
  %671 = bitcast i16* %670 to <8 x i16>*
  %672 = load <8 x i16>, <8 x i16>* %671, align 2, !alias.scope !54
  %673 = getelementptr inbounds i16, i16* %669, i64 -8
  %674 = getelementptr inbounds i16, i16* %673, i64 -7
  %675 = bitcast i16* %674 to <8 x i16>*
  %676 = load <8 x i16>, <8 x i16>* %675, align 2, !alias.scope !54
  %677 = getelementptr inbounds i16, i16* %668, i64 -7
  %678 = bitcast i16* %677 to <8 x i16>*
  store <8 x i16> %672, <8 x i16>* %678, align 2, !alias.scope !57, !noalias !54
  %679 = getelementptr inbounds i16, i16* %668, i64 -8
  %680 = getelementptr inbounds i16, i16* %679, i64 -7
  %681 = bitcast i16* %680 to <8 x i16>*
  store <8 x i16> %676, <8 x i16>* %681, align 2, !alias.scope !57, !noalias !54
  br label %682

682:                                              ; preds = %660, %663
  %683 = icmp eq i64 %589, %606
  br i1 %683, label %736, label %684

684:                                              ; preds = %682, %591, %584
  %685 = phi i16* [ %575, %591 ], [ %575, %584 ], [ %608, %682 ]
  %686 = phi i16* [ %582, %591 ], [ %582, %584 ], [ %610, %682 ]
  %687 = getelementptr i16, i16* %686, i64 -1
  %688 = ptrtoint i16* %687 to i64
  %689 = sub i64 %688, %581
  %690 = lshr i64 %689, 1
  %691 = add nuw i64 %690, 1
  %692 = and i64 %691, 7
  %693 = icmp eq i64 %692, 0
  br i1 %693, label %703, label %694

694:                                              ; preds = %684, %694
  %695 = phi i16* [ %698, %694 ], [ %685, %684 ]
  %696 = phi i16* [ %699, %694 ], [ %686, %684 ]
  %697 = phi i64 [ %701, %694 ], [ %692, %684 ]
  %698 = getelementptr inbounds i16, i16* %695, i64 -1
  %699 = getelementptr inbounds i16, i16* %696, i64 -1
  %700 = load i16, i16* %699, align 2
  store i16 %700, i16* %698, align 2
  %701 = add i64 %697, -1
  %702 = icmp eq i64 %701, 0
  br i1 %702, label %703, label %694, !llvm.loop !60

703:                                              ; preds = %694, %684
  %704 = phi i16* [ undef, %684 ], [ %698, %694 ]
  %705 = phi i16* [ %685, %684 ], [ %698, %694 ]
  %706 = phi i16* [ %686, %684 ], [ %699, %694 ]
  %707 = icmp ult i64 %689, 14
  br i1 %707, label %736, label %708

708:                                              ; preds = %703, %708
  %709 = phi i16* [ %732, %708 ], [ %705, %703 ]
  %710 = phi i16* [ %733, %708 ], [ %706, %703 ]
  %711 = getelementptr inbounds i16, i16* %709, i64 -1
  %712 = getelementptr inbounds i16, i16* %710, i64 -1
  %713 = load i16, i16* %712, align 2
  store i16 %713, i16* %711, align 2
  %714 = getelementptr inbounds i16, i16* %709, i64 -2
  %715 = getelementptr inbounds i16, i16* %710, i64 -2
  %716 = load i16, i16* %715, align 2
  store i16 %716, i16* %714, align 2
  %717 = getelementptr inbounds i16, i16* %709, i64 -3
  %718 = getelementptr inbounds i16, i16* %710, i64 -3
  %719 = load i16, i16* %718, align 2
  store i16 %719, i16* %717, align 2
  %720 = getelementptr inbounds i16, i16* %709, i64 -4
  %721 = getelementptr inbounds i16, i16* %710, i64 -4
  %722 = load i16, i16* %721, align 2
  store i16 %722, i16* %720, align 2
  %723 = getelementptr inbounds i16, i16* %709, i64 -5
  %724 = getelementptr inbounds i16, i16* %710, i64 -5
  %725 = load i16, i16* %724, align 2
  store i16 %725, i16* %723, align 2
  %726 = getelementptr inbounds i16, i16* %709, i64 -6
  %727 = getelementptr inbounds i16, i16* %710, i64 -6
  %728 = load i16, i16* %727, align 2
  store i16 %728, i16* %726, align 2
  %729 = getelementptr inbounds i16, i16* %709, i64 -7
  %730 = getelementptr inbounds i16, i16* %710, i64 -7
  %731 = load i16, i16* %730, align 2
  store i16 %731, i16* %729, align 2
  %732 = getelementptr inbounds i16, i16* %709, i64 -8
  %733 = getelementptr inbounds i16, i16* %710, i64 -8
  %734 = load i16, i16* %733, align 2
  store i16 %734, i16* %732, align 2
  %735 = icmp eq i16* %733, %580
  br i1 %735, label %736, label %708, !llvm.loop !61

736:                                              ; preds = %703, %708, %682, %573
  %737 = phi i16* [ %575, %573 ], [ %608, %682 ], [ %704, %703 ], [ %732, %708 ]
  %738 = ptrtoint i16* %737 to i64
  store i64 %738, i64* %27, align 8
  store i64 %579, i64* %26, align 8
  store i64 %577, i64* %28, align 8
  br label %1405

739:                                              ; preds = %71
  %740 = icmp eq i32 %72, 62
  br i1 %740, label %1407, label %741

741:                                              ; preds = %739
  %742 = icmp ult i32 %72, 256
  br i1 %742, label %743, label %749

743:                                              ; preds = %741
  %744 = zext i32 %72 to i64
  %745 = getelementptr inbounds [256 x i8], [256 x i8]* @_ZN2v88internalL17kOneByteCharFlagsE, i64 0, i64 %744
  %746 = load i8, i8* %745, align 1
  %747 = and i8 %746, 2
  %748 = icmp eq i8 %747, 0
  br i1 %748, label %1391, label %753

749:                                              ; preds = %741
  %750 = tail call zeroext i1 @_ZN2v88internal20IsIdentifierPartSlowEj(i32 %72) #13
  br i1 %750, label %751, label %1391

751:                                              ; preds = %749
  %752 = icmp ult i32 %72, 65536
  br i1 %752, label %753, label %963

753:                                              ; preds = %743, %751
  %754 = trunc i32 %72 to i16
  %755 = load i16*, i16** %24, align 8
  %756 = load i16*, i16** %25, align 8
  %757 = icmp ult i16* %755, %756
  %758 = ptrtoint i16* %756 to i64
  br i1 %757, label %759, label %762

759:                                              ; preds = %753
  store i16 %754, i16* %755, align 2
  %760 = getelementptr inbounds i16, i16* %755, i64 1
  %761 = ptrtoint i16* %760 to i64
  store i64 %761, i64* %26, align 8
  br label %1405

762:                                              ; preds = %753
  %763 = ptrtoint i16* %755 to i64
  %764 = load i64, i64* %27, align 8
  %765 = sub i64 %763, %764
  %766 = ashr exact i64 %765, 1
  %767 = add nsw i64 %766, 1
  %768 = icmp ugt i64 %767, 1073741823
  br i1 %768, label %769, label %771

769:                                              ; preds = %762
  %770 = inttoptr i64 %17 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %770) #14
  unreachable

771:                                              ; preds = %762
  %772 = sub i64 %758, %764
  %773 = ashr exact i64 %772, 1
  %774 = icmp ult i64 %773, 536870911
  %775 = icmp ult i64 %772, %767
  %776 = select i1 %775, i64 %767, i64 %772
  %777 = select i1 %774, i64 %776, i64 1073741823
  %778 = icmp eq i64 %777, 0
  br i1 %778, label %797, label %779

779:                                              ; preds = %771
  %780 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %29, align 8
  %781 = shl i64 %777, 1
  %782 = add i64 %781, 7
  %783 = and i64 %782, -8
  %784 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %780, i64 0, i32 2
  %785 = load i64, i64* %784, align 8
  %786 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %780, i64 0, i32 3
  %787 = load i64, i64* %786, align 8
  %788 = sub i64 %787, %785
  %789 = icmp ugt i64 %783, %788
  br i1 %789, label %790, label %792, !prof !3

790:                                              ; preds = %779
  %791 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %780, i64 %783) #13
  br label %794

792:                                              ; preds = %779
  %793 = add i64 %785, %783
  store i64 %793, i64* %784, align 8
  br label %794

794:                                              ; preds = %792, %790
  %795 = phi i64 [ %791, %790 ], [ %785, %792 ]
  %796 = inttoptr i64 %795 to i16*
  br label %797

797:                                              ; preds = %794, %771
  %798 = phi i16* [ %796, %794 ], [ null, %771 ]
  %799 = getelementptr inbounds i16, i16* %798, i64 %766
  %800 = getelementptr inbounds i16, i16* %798, i64 %777
  %801 = ptrtoint i16* %800 to i64
  store i16 %754, i16* %799, align 2
  %802 = getelementptr inbounds i16, i16* %799, i64 1
  %803 = ptrtoint i16* %802 to i64
  %804 = load i16*, i16** %30, align 8
  %805 = ptrtoint i16* %804 to i64
  %806 = load i16*, i16** %24, align 8
  %807 = icmp eq i16* %806, %804
  br i1 %807, label %960, label %808

808:                                              ; preds = %797
  %809 = getelementptr i16, i16* %806, i64 -1
  %810 = ptrtoint i16* %809 to i64
  %811 = sub i64 %810, %805
  %812 = lshr i64 %811, 1
  %813 = add nuw i64 %812, 1
  %814 = icmp ult i64 %813, 16
  br i1 %814, label %908, label %815

815:                                              ; preds = %808
  %816 = getelementptr i16, i16* %798, i64 -1
  %817 = getelementptr i16, i16* %806, i64 -1
  %818 = ptrtoint i16* %817 to i64
  %819 = sub i64 %818, %805
  %820 = lshr i64 %819, 1
  %821 = sub i64 %766, %820
  %822 = getelementptr i16, i16* %816, i64 %821
  %823 = getelementptr i16, i16* %806, i64 -1
  %824 = sub nsw i64 0, %820
  %825 = getelementptr i16, i16* %823, i64 %824
  %826 = icmp ult i16* %822, %806
  %827 = icmp ult i16* %825, %799
  %828 = and i1 %826, %827
  br i1 %828, label %908, label %829

829:                                              ; preds = %815
  %830 = and i64 %813, -16
  %831 = sub i64 0, %830
  %832 = getelementptr i16, i16* %799, i64 %831
  %833 = sub i64 0, %830
  %834 = getelementptr i16, i16* %806, i64 %833
  %835 = add i64 %830, -16
  %836 = lshr exact i64 %835, 4
  %837 = add nuw nsw i64 %836, 1
  %838 = and i64 %837, 1
  %839 = icmp eq i64 %835, 0
  br i1 %839, label %884, label %840

840:                                              ; preds = %829
  %841 = sub nuw nsw i64 %837, %838
  %842 = getelementptr i16, i16* %799, i64 -1
  %843 = getelementptr i16, i16* %806, i64 -1
  %844 = getelementptr i16, i16* %799, i64 -1
  %845 = getelementptr i16, i16* %806, i64 -1
  br label %846

846:                                              ; preds = %846, %840
  %847 = phi i64 [ 0, %840 ], [ %881, %846 ]
  %848 = phi i64 [ %841, %840 ], [ %882, %846 ]
  %849 = sub i64 0, %847
  %850 = sub i64 0, %847
  %851 = getelementptr inbounds i16, i16* %842, i64 %849
  %852 = getelementptr inbounds i16, i16* %843, i64 %850
  %853 = getelementptr inbounds i16, i16* %852, i64 -7
  %854 = bitcast i16* %853 to <8 x i16>*
  %855 = load <8 x i16>, <8 x i16>* %854, align 2, !alias.scope !62
  %856 = getelementptr inbounds i16, i16* %852, i64 -8
  %857 = getelementptr inbounds i16, i16* %856, i64 -7
  %858 = bitcast i16* %857 to <8 x i16>*
  %859 = load <8 x i16>, <8 x i16>* %858, align 2, !alias.scope !62
  %860 = getelementptr inbounds i16, i16* %851, i64 -7
  %861 = bitcast i16* %860 to <8 x i16>*
  store <8 x i16> %855, <8 x i16>* %861, align 2, !alias.scope !65, !noalias !62
  %862 = getelementptr inbounds i16, i16* %851, i64 -8
  %863 = getelementptr inbounds i16, i16* %862, i64 -7
  %864 = bitcast i16* %863 to <8 x i16>*
  store <8 x i16> %859, <8 x i16>* %864, align 2, !alias.scope !65, !noalias !62
  %865 = sub nuw nsw i64 -16, %847
  %866 = sub nuw nsw i64 -16, %847
  %867 = getelementptr inbounds i16, i16* %844, i64 %865
  %868 = getelementptr inbounds i16, i16* %845, i64 %866
  %869 = getelementptr inbounds i16, i16* %868, i64 -7
  %870 = bitcast i16* %869 to <8 x i16>*
  %871 = load <8 x i16>, <8 x i16>* %870, align 2, !alias.scope !62
  %872 = getelementptr inbounds i16, i16* %868, i64 -8
  %873 = getelementptr inbounds i16, i16* %872, i64 -7
  %874 = bitcast i16* %873 to <8 x i16>*
  %875 = load <8 x i16>, <8 x i16>* %874, align 2, !alias.scope !62
  %876 = getelementptr inbounds i16, i16* %867, i64 -7
  %877 = bitcast i16* %876 to <8 x i16>*
  store <8 x i16> %871, <8 x i16>* %877, align 2, !alias.scope !65, !noalias !62
  %878 = getelementptr inbounds i16, i16* %867, i64 -8
  %879 = getelementptr inbounds i16, i16* %878, i64 -7
  %880 = bitcast i16* %879 to <8 x i16>*
  store <8 x i16> %875, <8 x i16>* %880, align 2, !alias.scope !65, !noalias !62
  %881 = add i64 %847, 32
  %882 = add i64 %848, -2
  %883 = icmp eq i64 %882, 0
  br i1 %883, label %884, label %846, !llvm.loop !67

884:                                              ; preds = %846, %829
  %885 = phi i64 [ 0, %829 ], [ %881, %846 ]
  %886 = icmp eq i64 %838, 0
  br i1 %886, label %906, label %887

887:                                              ; preds = %884
  %888 = sub i64 0, %885
  %889 = getelementptr i16, i16* %799, i64 -1
  %890 = sub i64 0, %885
  %891 = getelementptr i16, i16* %806, i64 -1
  %892 = getelementptr inbounds i16, i16* %889, i64 %888
  %893 = getelementptr inbounds i16, i16* %891, i64 %890
  %894 = getelementptr inbounds i16, i16* %893, i64 -7
  %895 = bitcast i16* %894 to <8 x i16>*
  %896 = load <8 x i16>, <8 x i16>* %895, align 2, !alias.scope !62
  %897 = getelementptr inbounds i16, i16* %893, i64 -8
  %898 = getelementptr inbounds i16, i16* %897, i64 -7
  %899 = bitcast i16* %898 to <8 x i16>*
  %900 = load <8 x i16>, <8 x i16>* %899, align 2, !alias.scope !62
  %901 = getelementptr inbounds i16, i16* %892, i64 -7
  %902 = bitcast i16* %901 to <8 x i16>*
  store <8 x i16> %896, <8 x i16>* %902, align 2, !alias.scope !65, !noalias !62
  %903 = getelementptr inbounds i16, i16* %892, i64 -8
  %904 = getelementptr inbounds i16, i16* %903, i64 -7
  %905 = bitcast i16* %904 to <8 x i16>*
  store <8 x i16> %900, <8 x i16>* %905, align 2, !alias.scope !65, !noalias !62
  br label %906

906:                                              ; preds = %884, %887
  %907 = icmp eq i64 %813, %830
  br i1 %907, label %960, label %908

908:                                              ; preds = %906, %815, %808
  %909 = phi i16* [ %799, %815 ], [ %799, %808 ], [ %832, %906 ]
  %910 = phi i16* [ %806, %815 ], [ %806, %808 ], [ %834, %906 ]
  %911 = getelementptr i16, i16* %910, i64 -1
  %912 = ptrtoint i16* %911 to i64
  %913 = sub i64 %912, %805
  %914 = lshr i64 %913, 1
  %915 = add nuw i64 %914, 1
  %916 = and i64 %915, 7
  %917 = icmp eq i64 %916, 0
  br i1 %917, label %927, label %918

918:                                              ; preds = %908, %918
  %919 = phi i16* [ %922, %918 ], [ %909, %908 ]
  %920 = phi i16* [ %923, %918 ], [ %910, %908 ]
  %921 = phi i64 [ %925, %918 ], [ %916, %908 ]
  %922 = getelementptr inbounds i16, i16* %919, i64 -1
  %923 = getelementptr inbounds i16, i16* %920, i64 -1
  %924 = load i16, i16* %923, align 2
  store i16 %924, i16* %922, align 2
  %925 = add i64 %921, -1
  %926 = icmp eq i64 %925, 0
  br i1 %926, label %927, label %918, !llvm.loop !68

927:                                              ; preds = %918, %908
  %928 = phi i16* [ undef, %908 ], [ %922, %918 ]
  %929 = phi i16* [ %909, %908 ], [ %922, %918 ]
  %930 = phi i16* [ %910, %908 ], [ %923, %918 ]
  %931 = icmp ult i64 %913, 14
  br i1 %931, label %960, label %932

932:                                              ; preds = %927, %932
  %933 = phi i16* [ %956, %932 ], [ %929, %927 ]
  %934 = phi i16* [ %957, %932 ], [ %930, %927 ]
  %935 = getelementptr inbounds i16, i16* %933, i64 -1
  %936 = getelementptr inbounds i16, i16* %934, i64 -1
  %937 = load i16, i16* %936, align 2
  store i16 %937, i16* %935, align 2
  %938 = getelementptr inbounds i16, i16* %933, i64 -2
  %939 = getelementptr inbounds i16, i16* %934, i64 -2
  %940 = load i16, i16* %939, align 2
  store i16 %940, i16* %938, align 2
  %941 = getelementptr inbounds i16, i16* %933, i64 -3
  %942 = getelementptr inbounds i16, i16* %934, i64 -3
  %943 = load i16, i16* %942, align 2
  store i16 %943, i16* %941, align 2
  %944 = getelementptr inbounds i16, i16* %933, i64 -4
  %945 = getelementptr inbounds i16, i16* %934, i64 -4
  %946 = load i16, i16* %945, align 2
  store i16 %946, i16* %944, align 2
  %947 = getelementptr inbounds i16, i16* %933, i64 -5
  %948 = getelementptr inbounds i16, i16* %934, i64 -5
  %949 = load i16, i16* %948, align 2
  store i16 %949, i16* %947, align 2
  %950 = getelementptr inbounds i16, i16* %933, i64 -6
  %951 = getelementptr inbounds i16, i16* %934, i64 -6
  %952 = load i16, i16* %951, align 2
  store i16 %952, i16* %950, align 2
  %953 = getelementptr inbounds i16, i16* %933, i64 -7
  %954 = getelementptr inbounds i16, i16* %934, i64 -7
  %955 = load i16, i16* %954, align 2
  store i16 %955, i16* %953, align 2
  %956 = getelementptr inbounds i16, i16* %933, i64 -8
  %957 = getelementptr inbounds i16, i16* %934, i64 -8
  %958 = load i16, i16* %957, align 2
  store i16 %958, i16* %956, align 2
  %959 = icmp eq i16* %957, %804
  br i1 %959, label %960, label %932, !llvm.loop !69

960:                                              ; preds = %927, %932, %906, %797
  %961 = phi i16* [ %799, %797 ], [ %832, %906 ], [ %928, %927 ], [ %956, %932 ]
  %962 = ptrtoint i16* %961 to i64
  store i64 %962, i64* %27, align 8
  store i64 %803, i64* %26, align 8
  store i64 %801, i64* %28, align 8
  br label %1405

963:                                              ; preds = %751
  %964 = add i32 %72, 983040
  %965 = lshr i32 %964, 10
  %966 = trunc i32 %965 to i16
  %967 = and i16 %966, 1023
  %968 = or i16 %967, -10240
  %969 = load i16*, i16** %24, align 8
  %970 = load i16*, i16** %25, align 8
  %971 = icmp ult i16* %969, %970
  %972 = ptrtoint i16* %970 to i64
  br i1 %971, label %973, label %978

973:                                              ; preds = %963
  store i16 %968, i16* %969, align 2
  %974 = getelementptr inbounds i16, i16* %969, i64 1
  %975 = ptrtoint i16* %974 to i64
  store i64 %975, i64* %26, align 8
  %976 = load i16*, i16** %25, align 8
  %977 = ptrtoint i16* %976 to i64
  br label %1179

978:                                              ; preds = %963
  %979 = ptrtoint i16* %969 to i64
  %980 = load i64, i64* %27, align 8
  %981 = sub i64 %979, %980
  %982 = ashr exact i64 %981, 1
  %983 = add nsw i64 %982, 1
  %984 = icmp ugt i64 %983, 1073741823
  br i1 %984, label %985, label %987

985:                                              ; preds = %978
  %986 = inttoptr i64 %17 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %986) #14
  unreachable

987:                                              ; preds = %978
  %988 = sub i64 %972, %980
  %989 = ashr exact i64 %988, 1
  %990 = icmp ult i64 %989, 536870911
  %991 = icmp ult i64 %988, %983
  %992 = select i1 %991, i64 %983, i64 %988
  %993 = select i1 %990, i64 %992, i64 1073741823
  %994 = icmp eq i64 %993, 0
  br i1 %994, label %1013, label %995

995:                                              ; preds = %987
  %996 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %29, align 8
  %997 = shl i64 %993, 1
  %998 = add i64 %997, 7
  %999 = and i64 %998, -8
  %1000 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %996, i64 0, i32 2
  %1001 = load i64, i64* %1000, align 8
  %1002 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %996, i64 0, i32 3
  %1003 = load i64, i64* %1002, align 8
  %1004 = sub i64 %1003, %1001
  %1005 = icmp ugt i64 %999, %1004
  br i1 %1005, label %1006, label %1008, !prof !3

1006:                                             ; preds = %995
  %1007 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %996, i64 %999) #13
  br label %1010

1008:                                             ; preds = %995
  %1009 = add i64 %1001, %999
  store i64 %1009, i64* %1000, align 8
  br label %1010

1010:                                             ; preds = %1008, %1006
  %1011 = phi i64 [ %1007, %1006 ], [ %1001, %1008 ]
  %1012 = inttoptr i64 %1011 to i16*
  br label %1013

1013:                                             ; preds = %1010, %987
  %1014 = phi i16* [ %1012, %1010 ], [ null, %987 ]
  %1015 = getelementptr inbounds i16, i16* %1014, i64 %982
  %1016 = getelementptr inbounds i16, i16* %1014, i64 %993
  %1017 = ptrtoint i16* %1016 to i64
  store i16 %968, i16* %1015, align 2
  %1018 = getelementptr inbounds i16, i16* %1015, i64 1
  %1019 = ptrtoint i16* %1018 to i64
  %1020 = load i16*, i16** %30, align 8
  %1021 = ptrtoint i16* %1020 to i64
  %1022 = load i16*, i16** %24, align 8
  %1023 = icmp eq i16* %1022, %1020
  br i1 %1023, label %1176, label %1024

1024:                                             ; preds = %1013
  %1025 = getelementptr i16, i16* %1022, i64 -1
  %1026 = ptrtoint i16* %1025 to i64
  %1027 = sub i64 %1026, %1021
  %1028 = lshr i64 %1027, 1
  %1029 = add nuw i64 %1028, 1
  %1030 = icmp ult i64 %1029, 16
  br i1 %1030, label %1124, label %1031

1031:                                             ; preds = %1024
  %1032 = getelementptr i16, i16* %1014, i64 -1
  %1033 = getelementptr i16, i16* %1022, i64 -1
  %1034 = ptrtoint i16* %1033 to i64
  %1035 = sub i64 %1034, %1021
  %1036 = lshr i64 %1035, 1
  %1037 = sub i64 %982, %1036
  %1038 = getelementptr i16, i16* %1032, i64 %1037
  %1039 = getelementptr i16, i16* %1022, i64 -1
  %1040 = sub nsw i64 0, %1036
  %1041 = getelementptr i16, i16* %1039, i64 %1040
  %1042 = icmp ult i16* %1038, %1022
  %1043 = icmp ult i16* %1041, %1015
  %1044 = and i1 %1042, %1043
  br i1 %1044, label %1124, label %1045

1045:                                             ; preds = %1031
  %1046 = and i64 %1029, -16
  %1047 = sub i64 0, %1046
  %1048 = getelementptr i16, i16* %1015, i64 %1047
  %1049 = sub i64 0, %1046
  %1050 = getelementptr i16, i16* %1022, i64 %1049
  %1051 = add i64 %1046, -16
  %1052 = lshr exact i64 %1051, 4
  %1053 = add nuw nsw i64 %1052, 1
  %1054 = and i64 %1053, 1
  %1055 = icmp eq i64 %1051, 0
  br i1 %1055, label %1100, label %1056

1056:                                             ; preds = %1045
  %1057 = sub nuw nsw i64 %1053, %1054
  %1058 = getelementptr i16, i16* %1015, i64 -1
  %1059 = getelementptr i16, i16* %1022, i64 -1
  %1060 = getelementptr i16, i16* %1015, i64 -1
  %1061 = getelementptr i16, i16* %1022, i64 -1
  br label %1062

1062:                                             ; preds = %1062, %1056
  %1063 = phi i64 [ 0, %1056 ], [ %1097, %1062 ]
  %1064 = phi i64 [ %1057, %1056 ], [ %1098, %1062 ]
  %1065 = sub i64 0, %1063
  %1066 = sub i64 0, %1063
  %1067 = getelementptr inbounds i16, i16* %1058, i64 %1065
  %1068 = getelementptr inbounds i16, i16* %1059, i64 %1066
  %1069 = getelementptr inbounds i16, i16* %1068, i64 -7
  %1070 = bitcast i16* %1069 to <8 x i16>*
  %1071 = load <8 x i16>, <8 x i16>* %1070, align 2, !alias.scope !70
  %1072 = getelementptr inbounds i16, i16* %1068, i64 -8
  %1073 = getelementptr inbounds i16, i16* %1072, i64 -7
  %1074 = bitcast i16* %1073 to <8 x i16>*
  %1075 = load <8 x i16>, <8 x i16>* %1074, align 2, !alias.scope !70
  %1076 = getelementptr inbounds i16, i16* %1067, i64 -7
  %1077 = bitcast i16* %1076 to <8 x i16>*
  store <8 x i16> %1071, <8 x i16>* %1077, align 2, !alias.scope !73, !noalias !70
  %1078 = getelementptr inbounds i16, i16* %1067, i64 -8
  %1079 = getelementptr inbounds i16, i16* %1078, i64 -7
  %1080 = bitcast i16* %1079 to <8 x i16>*
  store <8 x i16> %1075, <8 x i16>* %1080, align 2, !alias.scope !73, !noalias !70
  %1081 = sub nuw nsw i64 -16, %1063
  %1082 = sub nuw nsw i64 -16, %1063
  %1083 = getelementptr inbounds i16, i16* %1060, i64 %1081
  %1084 = getelementptr inbounds i16, i16* %1061, i64 %1082
  %1085 = getelementptr inbounds i16, i16* %1084, i64 -7
  %1086 = bitcast i16* %1085 to <8 x i16>*
  %1087 = load <8 x i16>, <8 x i16>* %1086, align 2, !alias.scope !70
  %1088 = getelementptr inbounds i16, i16* %1084, i64 -8
  %1089 = getelementptr inbounds i16, i16* %1088, i64 -7
  %1090 = bitcast i16* %1089 to <8 x i16>*
  %1091 = load <8 x i16>, <8 x i16>* %1090, align 2, !alias.scope !70
  %1092 = getelementptr inbounds i16, i16* %1083, i64 -7
  %1093 = bitcast i16* %1092 to <8 x i16>*
  store <8 x i16> %1087, <8 x i16>* %1093, align 2, !alias.scope !73, !noalias !70
  %1094 = getelementptr inbounds i16, i16* %1083, i64 -8
  %1095 = getelementptr inbounds i16, i16* %1094, i64 -7
  %1096 = bitcast i16* %1095 to <8 x i16>*
  store <8 x i16> %1091, <8 x i16>* %1096, align 2, !alias.scope !73, !noalias !70
  %1097 = add i64 %1063, 32
  %1098 = add i64 %1064, -2
  %1099 = icmp eq i64 %1098, 0
  br i1 %1099, label %1100, label %1062, !llvm.loop !75

1100:                                             ; preds = %1062, %1045
  %1101 = phi i64 [ 0, %1045 ], [ %1097, %1062 ]
  %1102 = icmp eq i64 %1054, 0
  br i1 %1102, label %1122, label %1103

1103:                                             ; preds = %1100
  %1104 = sub i64 0, %1101
  %1105 = getelementptr i16, i16* %1015, i64 -1
  %1106 = sub i64 0, %1101
  %1107 = getelementptr i16, i16* %1022, i64 -1
  %1108 = getelementptr inbounds i16, i16* %1105, i64 %1104
  %1109 = getelementptr inbounds i16, i16* %1107, i64 %1106
  %1110 = getelementptr inbounds i16, i16* %1109, i64 -7
  %1111 = bitcast i16* %1110 to <8 x i16>*
  %1112 = load <8 x i16>, <8 x i16>* %1111, align 2, !alias.scope !70
  %1113 = getelementptr inbounds i16, i16* %1109, i64 -8
  %1114 = getelementptr inbounds i16, i16* %1113, i64 -7
  %1115 = bitcast i16* %1114 to <8 x i16>*
  %1116 = load <8 x i16>, <8 x i16>* %1115, align 2, !alias.scope !70
  %1117 = getelementptr inbounds i16, i16* %1108, i64 -7
  %1118 = bitcast i16* %1117 to <8 x i16>*
  store <8 x i16> %1112, <8 x i16>* %1118, align 2, !alias.scope !73, !noalias !70
  %1119 = getelementptr inbounds i16, i16* %1108, i64 -8
  %1120 = getelementptr inbounds i16, i16* %1119, i64 -7
  %1121 = bitcast i16* %1120 to <8 x i16>*
  store <8 x i16> %1116, <8 x i16>* %1121, align 2, !alias.scope !73, !noalias !70
  br label %1122

1122:                                             ; preds = %1100, %1103
  %1123 = icmp eq i64 %1029, %1046
  br i1 %1123, label %1176, label %1124

1124:                                             ; preds = %1122, %1031, %1024
  %1125 = phi i16* [ %1015, %1031 ], [ %1015, %1024 ], [ %1048, %1122 ]
  %1126 = phi i16* [ %1022, %1031 ], [ %1022, %1024 ], [ %1050, %1122 ]
  %1127 = getelementptr i16, i16* %1126, i64 -1
  %1128 = ptrtoint i16* %1127 to i64
  %1129 = sub i64 %1128, %1021
  %1130 = lshr i64 %1129, 1
  %1131 = add nuw i64 %1130, 1
  %1132 = and i64 %1131, 7
  %1133 = icmp eq i64 %1132, 0
  br i1 %1133, label %1143, label %1134

1134:                                             ; preds = %1124, %1134
  %1135 = phi i16* [ %1138, %1134 ], [ %1125, %1124 ]
  %1136 = phi i16* [ %1139, %1134 ], [ %1126, %1124 ]
  %1137 = phi i64 [ %1141, %1134 ], [ %1132, %1124 ]
  %1138 = getelementptr inbounds i16, i16* %1135, i64 -1
  %1139 = getelementptr inbounds i16, i16* %1136, i64 -1
  %1140 = load i16, i16* %1139, align 2
  store i16 %1140, i16* %1138, align 2
  %1141 = add i64 %1137, -1
  %1142 = icmp eq i64 %1141, 0
  br i1 %1142, label %1143, label %1134, !llvm.loop !76

1143:                                             ; preds = %1134, %1124
  %1144 = phi i16* [ undef, %1124 ], [ %1138, %1134 ]
  %1145 = phi i16* [ %1125, %1124 ], [ %1138, %1134 ]
  %1146 = phi i16* [ %1126, %1124 ], [ %1139, %1134 ]
  %1147 = icmp ult i64 %1129, 14
  br i1 %1147, label %1176, label %1148

1148:                                             ; preds = %1143, %1148
  %1149 = phi i16* [ %1172, %1148 ], [ %1145, %1143 ]
  %1150 = phi i16* [ %1173, %1148 ], [ %1146, %1143 ]
  %1151 = getelementptr inbounds i16, i16* %1149, i64 -1
  %1152 = getelementptr inbounds i16, i16* %1150, i64 -1
  %1153 = load i16, i16* %1152, align 2
  store i16 %1153, i16* %1151, align 2
  %1154 = getelementptr inbounds i16, i16* %1149, i64 -2
  %1155 = getelementptr inbounds i16, i16* %1150, i64 -2
  %1156 = load i16, i16* %1155, align 2
  store i16 %1156, i16* %1154, align 2
  %1157 = getelementptr inbounds i16, i16* %1149, i64 -3
  %1158 = getelementptr inbounds i16, i16* %1150, i64 -3
  %1159 = load i16, i16* %1158, align 2
  store i16 %1159, i16* %1157, align 2
  %1160 = getelementptr inbounds i16, i16* %1149, i64 -4
  %1161 = getelementptr inbounds i16, i16* %1150, i64 -4
  %1162 = load i16, i16* %1161, align 2
  store i16 %1162, i16* %1160, align 2
  %1163 = getelementptr inbounds i16, i16* %1149, i64 -5
  %1164 = getelementptr inbounds i16, i16* %1150, i64 -5
  %1165 = load i16, i16* %1164, align 2
  store i16 %1165, i16* %1163, align 2
  %1166 = getelementptr inbounds i16, i16* %1149, i64 -6
  %1167 = getelementptr inbounds i16, i16* %1150, i64 -6
  %1168 = load i16, i16* %1167, align 2
  store i16 %1168, i16* %1166, align 2
  %1169 = getelementptr inbounds i16, i16* %1149, i64 -7
  %1170 = getelementptr inbounds i16, i16* %1150, i64 -7
  %1171 = load i16, i16* %1170, align 2
  store i16 %1171, i16* %1169, align 2
  %1172 = getelementptr inbounds i16, i16* %1149, i64 -8
  %1173 = getelementptr inbounds i16, i16* %1150, i64 -8
  %1174 = load i16, i16* %1173, align 2
  store i16 %1174, i16* %1172, align 2
  %1175 = icmp eq i16* %1173, %1020
  br i1 %1175, label %1176, label %1148, !llvm.loop !77

1176:                                             ; preds = %1143, %1148, %1122, %1013
  %1177 = phi i16* [ %1015, %1013 ], [ %1048, %1122 ], [ %1144, %1143 ], [ %1172, %1148 ]
  %1178 = ptrtoint i16* %1177 to i64
  store i64 %1178, i64* %27, align 8
  store i64 %1019, i64* %26, align 8
  store i64 %1017, i64* %28, align 8
  br label %1179

1179:                                             ; preds = %973, %1176
  %1180 = phi i64 [ %977, %973 ], [ %1017, %1176 ]
  %1181 = phi i16* [ %976, %973 ], [ %1016, %1176 ]
  %1182 = phi i16* [ %974, %973 ], [ %1018, %1176 ]
  %1183 = trunc i32 %72 to i16
  %1184 = and i16 %1183, 1023
  %1185 = or i16 %1184, -9216
  %1186 = icmp ult i16* %1182, %1181
  br i1 %1186, label %1187, label %1190

1187:                                             ; preds = %1179
  store i16 %1185, i16* %1182, align 2
  %1188 = getelementptr inbounds i16, i16* %1182, i64 1
  %1189 = ptrtoint i16* %1188 to i64
  store i64 %1189, i64* %26, align 8
  br label %1405

1190:                                             ; preds = %1179
  %1191 = ptrtoint i16* %1182 to i64
  %1192 = load i64, i64* %27, align 8
  %1193 = sub i64 %1191, %1192
  %1194 = ashr exact i64 %1193, 1
  %1195 = add nsw i64 %1194, 1
  %1196 = icmp ugt i64 %1195, 1073741823
  br i1 %1196, label %1197, label %1199

1197:                                             ; preds = %1190
  %1198 = inttoptr i64 %17 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %1198) #14
  unreachable

1199:                                             ; preds = %1190
  %1200 = sub i64 %1180, %1192
  %1201 = ashr exact i64 %1200, 1
  %1202 = icmp ult i64 %1201, 536870911
  %1203 = icmp ult i64 %1200, %1195
  %1204 = select i1 %1203, i64 %1195, i64 %1200
  %1205 = select i1 %1202, i64 %1204, i64 1073741823
  %1206 = icmp eq i64 %1205, 0
  br i1 %1206, label %1225, label %1207

1207:                                             ; preds = %1199
  %1208 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %29, align 8
  %1209 = shl i64 %1205, 1
  %1210 = add i64 %1209, 7
  %1211 = and i64 %1210, -8
  %1212 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1208, i64 0, i32 2
  %1213 = load i64, i64* %1212, align 8
  %1214 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1208, i64 0, i32 3
  %1215 = load i64, i64* %1214, align 8
  %1216 = sub i64 %1215, %1213
  %1217 = icmp ugt i64 %1211, %1216
  br i1 %1217, label %1218, label %1220, !prof !3

1218:                                             ; preds = %1207
  %1219 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %1208, i64 %1211) #13
  br label %1222

1220:                                             ; preds = %1207
  %1221 = add i64 %1213, %1211
  store i64 %1221, i64* %1212, align 8
  br label %1222

1222:                                             ; preds = %1220, %1218
  %1223 = phi i64 [ %1219, %1218 ], [ %1213, %1220 ]
  %1224 = inttoptr i64 %1223 to i16*
  br label %1225

1225:                                             ; preds = %1222, %1199
  %1226 = phi i16* [ %1224, %1222 ], [ null, %1199 ]
  %1227 = getelementptr inbounds i16, i16* %1226, i64 %1194
  %1228 = getelementptr inbounds i16, i16* %1226, i64 %1205
  %1229 = ptrtoint i16* %1228 to i64
  store i16 %1185, i16* %1227, align 2
  %1230 = getelementptr inbounds i16, i16* %1227, i64 1
  %1231 = ptrtoint i16* %1230 to i64
  %1232 = load i16*, i16** %30, align 8
  %1233 = ptrtoint i16* %1232 to i64
  %1234 = load i16*, i16** %24, align 8
  %1235 = icmp eq i16* %1234, %1232
  br i1 %1235, label %1388, label %1236

1236:                                             ; preds = %1225
  %1237 = getelementptr i16, i16* %1234, i64 -1
  %1238 = ptrtoint i16* %1237 to i64
  %1239 = sub i64 %1238, %1233
  %1240 = lshr i64 %1239, 1
  %1241 = add nuw i64 %1240, 1
  %1242 = icmp ult i64 %1241, 16
  br i1 %1242, label %1336, label %1243

1243:                                             ; preds = %1236
  %1244 = getelementptr i16, i16* %1226, i64 -1
  %1245 = getelementptr i16, i16* %1234, i64 -1
  %1246 = ptrtoint i16* %1245 to i64
  %1247 = sub i64 %1246, %1233
  %1248 = lshr i64 %1247, 1
  %1249 = sub i64 %1194, %1248
  %1250 = getelementptr i16, i16* %1244, i64 %1249
  %1251 = getelementptr i16, i16* %1234, i64 -1
  %1252 = sub nsw i64 0, %1248
  %1253 = getelementptr i16, i16* %1251, i64 %1252
  %1254 = icmp ult i16* %1250, %1234
  %1255 = icmp ult i16* %1253, %1227
  %1256 = and i1 %1254, %1255
  br i1 %1256, label %1336, label %1257

1257:                                             ; preds = %1243
  %1258 = and i64 %1241, -16
  %1259 = sub i64 0, %1258
  %1260 = getelementptr i16, i16* %1227, i64 %1259
  %1261 = sub i64 0, %1258
  %1262 = getelementptr i16, i16* %1234, i64 %1261
  %1263 = add i64 %1258, -16
  %1264 = lshr exact i64 %1263, 4
  %1265 = add nuw nsw i64 %1264, 1
  %1266 = and i64 %1265, 1
  %1267 = icmp eq i64 %1263, 0
  br i1 %1267, label %1312, label %1268

1268:                                             ; preds = %1257
  %1269 = sub nuw nsw i64 %1265, %1266
  %1270 = getelementptr i16, i16* %1227, i64 -1
  %1271 = getelementptr i16, i16* %1234, i64 -1
  %1272 = getelementptr i16, i16* %1227, i64 -1
  %1273 = getelementptr i16, i16* %1234, i64 -1
  br label %1274

1274:                                             ; preds = %1274, %1268
  %1275 = phi i64 [ 0, %1268 ], [ %1309, %1274 ]
  %1276 = phi i64 [ %1269, %1268 ], [ %1310, %1274 ]
  %1277 = sub i64 0, %1275
  %1278 = sub i64 0, %1275
  %1279 = getelementptr inbounds i16, i16* %1270, i64 %1277
  %1280 = getelementptr inbounds i16, i16* %1271, i64 %1278
  %1281 = getelementptr inbounds i16, i16* %1280, i64 -7
  %1282 = bitcast i16* %1281 to <8 x i16>*
  %1283 = load <8 x i16>, <8 x i16>* %1282, align 2, !alias.scope !78
  %1284 = getelementptr inbounds i16, i16* %1280, i64 -8
  %1285 = getelementptr inbounds i16, i16* %1284, i64 -7
  %1286 = bitcast i16* %1285 to <8 x i16>*
  %1287 = load <8 x i16>, <8 x i16>* %1286, align 2, !alias.scope !78
  %1288 = getelementptr inbounds i16, i16* %1279, i64 -7
  %1289 = bitcast i16* %1288 to <8 x i16>*
  store <8 x i16> %1283, <8 x i16>* %1289, align 2, !alias.scope !81, !noalias !78
  %1290 = getelementptr inbounds i16, i16* %1279, i64 -8
  %1291 = getelementptr inbounds i16, i16* %1290, i64 -7
  %1292 = bitcast i16* %1291 to <8 x i16>*
  store <8 x i16> %1287, <8 x i16>* %1292, align 2, !alias.scope !81, !noalias !78
  %1293 = sub nuw nsw i64 -16, %1275
  %1294 = sub nuw nsw i64 -16, %1275
  %1295 = getelementptr inbounds i16, i16* %1272, i64 %1293
  %1296 = getelementptr inbounds i16, i16* %1273, i64 %1294
  %1297 = getelementptr inbounds i16, i16* %1296, i64 -7
  %1298 = bitcast i16* %1297 to <8 x i16>*
  %1299 = load <8 x i16>, <8 x i16>* %1298, align 2, !alias.scope !78
  %1300 = getelementptr inbounds i16, i16* %1296, i64 -8
  %1301 = getelementptr inbounds i16, i16* %1300, i64 -7
  %1302 = bitcast i16* %1301 to <8 x i16>*
  %1303 = load <8 x i16>, <8 x i16>* %1302, align 2, !alias.scope !78
  %1304 = getelementptr inbounds i16, i16* %1295, i64 -7
  %1305 = bitcast i16* %1304 to <8 x i16>*
  store <8 x i16> %1299, <8 x i16>* %1305, align 2, !alias.scope !81, !noalias !78
  %1306 = getelementptr inbounds i16, i16* %1295, i64 -8
  %1307 = getelementptr inbounds i16, i16* %1306, i64 -7
  %1308 = bitcast i16* %1307 to <8 x i16>*
  store <8 x i16> %1303, <8 x i16>* %1308, align 2, !alias.scope !81, !noalias !78
  %1309 = add i64 %1275, 32
  %1310 = add i64 %1276, -2
  %1311 = icmp eq i64 %1310, 0
  br i1 %1311, label %1312, label %1274, !llvm.loop !83

1312:                                             ; preds = %1274, %1257
  %1313 = phi i64 [ 0, %1257 ], [ %1309, %1274 ]
  %1314 = icmp eq i64 %1266, 0
  br i1 %1314, label %1334, label %1315

1315:                                             ; preds = %1312
  %1316 = sub i64 0, %1313
  %1317 = getelementptr i16, i16* %1227, i64 -1
  %1318 = sub i64 0, %1313
  %1319 = getelementptr i16, i16* %1234, i64 -1
  %1320 = getelementptr inbounds i16, i16* %1317, i64 %1316
  %1321 = getelementptr inbounds i16, i16* %1319, i64 %1318
  %1322 = getelementptr inbounds i16, i16* %1321, i64 -7
  %1323 = bitcast i16* %1322 to <8 x i16>*
  %1324 = load <8 x i16>, <8 x i16>* %1323, align 2, !alias.scope !78
  %1325 = getelementptr inbounds i16, i16* %1321, i64 -8
  %1326 = getelementptr inbounds i16, i16* %1325, i64 -7
  %1327 = bitcast i16* %1326 to <8 x i16>*
  %1328 = load <8 x i16>, <8 x i16>* %1327, align 2, !alias.scope !78
  %1329 = getelementptr inbounds i16, i16* %1320, i64 -7
  %1330 = bitcast i16* %1329 to <8 x i16>*
  store <8 x i16> %1324, <8 x i16>* %1330, align 2, !alias.scope !81, !noalias !78
  %1331 = getelementptr inbounds i16, i16* %1320, i64 -8
  %1332 = getelementptr inbounds i16, i16* %1331, i64 -7
  %1333 = bitcast i16* %1332 to <8 x i16>*
  store <8 x i16> %1328, <8 x i16>* %1333, align 2, !alias.scope !81, !noalias !78
  br label %1334

1334:                                             ; preds = %1312, %1315
  %1335 = icmp eq i64 %1241, %1258
  br i1 %1335, label %1388, label %1336

1336:                                             ; preds = %1334, %1243, %1236
  %1337 = phi i16* [ %1227, %1243 ], [ %1227, %1236 ], [ %1260, %1334 ]
  %1338 = phi i16* [ %1234, %1243 ], [ %1234, %1236 ], [ %1262, %1334 ]
  %1339 = getelementptr i16, i16* %1338, i64 -1
  %1340 = ptrtoint i16* %1339 to i64
  %1341 = sub i64 %1340, %1233
  %1342 = lshr i64 %1341, 1
  %1343 = add nuw i64 %1342, 1
  %1344 = and i64 %1343, 7
  %1345 = icmp eq i64 %1344, 0
  br i1 %1345, label %1355, label %1346

1346:                                             ; preds = %1336, %1346
  %1347 = phi i16* [ %1350, %1346 ], [ %1337, %1336 ]
  %1348 = phi i16* [ %1351, %1346 ], [ %1338, %1336 ]
  %1349 = phi i64 [ %1353, %1346 ], [ %1344, %1336 ]
  %1350 = getelementptr inbounds i16, i16* %1347, i64 -1
  %1351 = getelementptr inbounds i16, i16* %1348, i64 -1
  %1352 = load i16, i16* %1351, align 2
  store i16 %1352, i16* %1350, align 2
  %1353 = add i64 %1349, -1
  %1354 = icmp eq i64 %1353, 0
  br i1 %1354, label %1355, label %1346, !llvm.loop !84

1355:                                             ; preds = %1346, %1336
  %1356 = phi i16* [ undef, %1336 ], [ %1350, %1346 ]
  %1357 = phi i16* [ %1337, %1336 ], [ %1350, %1346 ]
  %1358 = phi i16* [ %1338, %1336 ], [ %1351, %1346 ]
  %1359 = icmp ult i64 %1341, 14
  br i1 %1359, label %1388, label %1360

1360:                                             ; preds = %1355, %1360
  %1361 = phi i16* [ %1384, %1360 ], [ %1357, %1355 ]
  %1362 = phi i16* [ %1385, %1360 ], [ %1358, %1355 ]
  %1363 = getelementptr inbounds i16, i16* %1361, i64 -1
  %1364 = getelementptr inbounds i16, i16* %1362, i64 -1
  %1365 = load i16, i16* %1364, align 2
  store i16 %1365, i16* %1363, align 2
  %1366 = getelementptr inbounds i16, i16* %1361, i64 -2
  %1367 = getelementptr inbounds i16, i16* %1362, i64 -2
  %1368 = load i16, i16* %1367, align 2
  store i16 %1368, i16* %1366, align 2
  %1369 = getelementptr inbounds i16, i16* %1361, i64 -3
  %1370 = getelementptr inbounds i16, i16* %1362, i64 -3
  %1371 = load i16, i16* %1370, align 2
  store i16 %1371, i16* %1369, align 2
  %1372 = getelementptr inbounds i16, i16* %1361, i64 -4
  %1373 = getelementptr inbounds i16, i16* %1362, i64 -4
  %1374 = load i16, i16* %1373, align 2
  store i16 %1374, i16* %1372, align 2
  %1375 = getelementptr inbounds i16, i16* %1361, i64 -5
  %1376 = getelementptr inbounds i16, i16* %1362, i64 -5
  %1377 = load i16, i16* %1376, align 2
  store i16 %1377, i16* %1375, align 2
  %1378 = getelementptr inbounds i16, i16* %1361, i64 -6
  %1379 = getelementptr inbounds i16, i16* %1362, i64 -6
  %1380 = load i16, i16* %1379, align 2
  store i16 %1380, i16* %1378, align 2
  %1381 = getelementptr inbounds i16, i16* %1361, i64 -7
  %1382 = getelementptr inbounds i16, i16* %1362, i64 -7
  %1383 = load i16, i16* %1382, align 2
  store i16 %1383, i16* %1381, align 2
  %1384 = getelementptr inbounds i16, i16* %1361, i64 -8
  %1385 = getelementptr inbounds i16, i16* %1362, i64 -8
  %1386 = load i16, i16* %1385, align 2
  store i16 %1386, i16* %1384, align 2
  %1387 = icmp eq i16* %1385, %1232
  br i1 %1387, label %1388, label %1360, !llvm.loop !85

1388:                                             ; preds = %1355, %1360, %1334, %1225
  %1389 = phi i16* [ %1227, %1225 ], [ %1260, %1334 ], [ %1356, %1355 ], [ %1384, %1360 ]
  %1390 = ptrtoint i16* %1389 to i64
  store i64 %1390, i64* %27, align 8
  store i64 %1231, i64* %26, align 8
  store i64 %1229, i64* %28, align 8
  br label %1405

1391:                                             ; preds = %743, %749
  %1392 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 18
  %1393 = load i8, i8* %1392, align 1, !range !2
  %1394 = icmp eq i8 %1393, 0
  br i1 %1394, label %1395, label %1407

1395:                                             ; preds = %1391
  store i8 1, i8* %1392, align 1
  %1396 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 2
  store i32 22, i32* %1396, align 8
  %1397 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 10
  %1398 = load i32, i32* %1397, align 8
  %1399 = add nsw i32 %1398, -1
  %1400 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 3
  store i32 %1399, i32* %1400, align 4
  store i32 2097152, i32* %23, align 8
  %1401 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 7
  %1402 = load %"class.v8::internal::FlatStringReader"*, %"class.v8::internal::FlatStringReader"** %1401, align 8
  %1403 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %1402, i64 0, i32 3
  %1404 = load i32, i32* %1403, align 4
  store i32 %1404, i32* %1397, align 8
  br label %1407

1405:                                             ; preds = %759, %960, %1187, %1388, %107, %308, %535, %736
  %1406 = phi i8 [ 0, %736 ], [ 0, %535 ], [ 0, %308 ], [ 0, %107 ], [ %32, %1388 ], [ %32, %1187 ], [ %32, %960 ], [ %32, %759 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %22) #13
  br label %31

1407:                                             ; preds = %739, %1395, %1391, %89, %85, %61, %57, %44, %40
  %1408 = phi %"class.v8::internal::ZoneVector"* [ null, %40 ], [ null, %44 ], [ null, %57 ], [ null, %61 ], [ null, %85 ], [ null, %89 ], [ null, %1391 ], [ null, %1395 ], [ %19, %739 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %22) #13
  ret %"class.v8::internal::ZoneVector"* %1408
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal12RegExpParser15ScanForCapturesEv(%"class.v8::internal::RegExpParser"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 10
  %3 = load i32, i32* %2, align 8
  %4 = add nsw i32 %3, -1
  %5 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 11
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 8
  %8 = load i32, i32* %7, align 8
  %9 = icmp eq i32 %8, 2097152
  br i1 %9, label %43, label %10

10:                                               ; preds = %1
  %11 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 17
  br label %12

12:                                               ; preds = %10, %39
  %13 = phi i32 [ %8, %10 ], [ %40, %39 ]
  %14 = phi i32 [ %6, %10 ], [ %41, %39 ]
  tail call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0)
  switch i32 %13, label %36 [
    i32 92, label %18
    i32 91, label %15
    i32 40, label %25
  ]

15:                                               ; preds = %12
  %16 = load i32, i32* %7, align 8
  %17 = icmp eq i32 %16, 2097152
  br i1 %17, label %43, label %19

18:                                               ; preds = %12
  tail call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0)
  br label %36

19:                                               ; preds = %15, %22
  %20 = phi i32 [ %23, %22 ], [ %16, %15 ]
  tail call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0)
  switch i32 %20, label %22 [
    i32 92, label %21
    i32 93, label %36
  ]

21:                                               ; preds = %19
  tail call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0)
  br label %22

22:                                               ; preds = %19, %21
  %23 = load i32, i32* %7, align 8
  %24 = icmp eq i32 %23, 2097152
  br i1 %24, label %43, label %19

25:                                               ; preds = %12
  %26 = load i32, i32* %7, align 8
  %27 = icmp eq i32 %26, 63
  br i1 %27, label %28, label %34

28:                                               ; preds = %25
  tail call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0)
  %29 = load i32, i32* %7, align 8
  %30 = icmp eq i32 %29, 60
  br i1 %30, label %31, label %39

31:                                               ; preds = %28
  tail call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0)
  %32 = load i32, i32* %7, align 8
  switch i32 %32, label %33 [
    i32 61, label %39
    i32 33, label %39
  ]

33:                                               ; preds = %31
  store i8 1, i8* %11, align 8
  br label %34

34:                                               ; preds = %33, %25
  %35 = add nsw i32 %14, 1
  br label %36

36:                                               ; preds = %19, %18, %34, %12
  %37 = phi i32 [ %14, %18 ], [ %35, %34 ], [ %14, %12 ], [ %14, %19 ]
  %38 = load i32, i32* %7, align 8
  br label %39

39:                                               ; preds = %36, %31, %31, %28
  %40 = phi i32 [ %38, %36 ], [ %32, %31 ], [ %32, %31 ], [ %29, %28 ]
  %41 = phi i32 [ %37, %36 ], [ %14, %31 ], [ %14, %31 ], [ %14, %28 ]
  %42 = icmp eq i32 %40, 2097152
  br i1 %42, label %43, label %12

43:                                               ; preds = %15, %39, %22, %1
  %44 = phi i32 [ %6, %1 ], [ %14, %22 ], [ %14, %15 ], [ %41, %39 ]
  %45 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 12
  store i32 %44, i32* %45, align 8
  %46 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 16
  store i8 1, i8* %46, align 1
  store i32 %4, i32* %2, align 8
  %47 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 7
  %48 = load %"class.v8::internal::FlatStringReader"*, %"class.v8::internal::FlatStringReader"** %47, align 8
  %49 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %48, i64 0, i32 3
  %50 = load i32, i32* %49, align 4
  %51 = icmp sge i32 %50, %3
  %52 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 13
  %53 = zext i1 %51 to i8
  store i8 %53, i8* %52, align 4
  tail call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0) #13
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZN2v88internal12RegExpParser17RegExpParserState20IsInsideCaptureGroupEPKNS0_10ZoneVectorItEE(%"class.v8::internal::RegExpParser::RegExpParserState"* readonly, %"class.v8::internal::ZoneVector"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %3 = icmp eq %"class.v8::internal::RegExpParser::RegExpParserState"* %0, null
  br i1 %3, label %44, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.v8::internal::ZoneVector", %"class.v8::internal::ZoneVector"* %1, i64 0, i32 0, i32 0, i32 1
  %6 = bitcast i16** %5 to i64*
  %7 = bitcast %"class.v8::internal::ZoneVector"* %1 to i64*
  br label %8

8:                                                ; preds = %4, %40
  %9 = phi %"class.v8::internal::RegExpParser::RegExpParserState"* [ %0, %4 ], [ %42, %40 ]
  %10 = getelementptr inbounds %"class.v8::internal::RegExpParser::RegExpParserState", %"class.v8::internal::RegExpParser::RegExpParserState"* %9, i64 0, i32 5
  %11 = load %"class.v8::internal::ZoneVector"*, %"class.v8::internal::ZoneVector"** %10, align 8
  %12 = icmp eq %"class.v8::internal::ZoneVector"* %11, null
  br i1 %12, label %40, label %13

13:                                               ; preds = %8
  %14 = getelementptr inbounds %"class.v8::internal::ZoneVector", %"class.v8::internal::ZoneVector"* %11, i64 0, i32 0, i32 0, i32 1
  %15 = bitcast i16** %14 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = bitcast %"class.v8::internal::ZoneVector"* %11 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = sub i64 %16, %18
  %20 = load i64, i64* %6, align 8
  %21 = load i64, i64* %7, align 8
  %22 = sub i64 %20, %21
  %23 = icmp eq i64 %19, %22
  %24 = inttoptr i64 %18 to i16*
  %25 = inttoptr i64 %16 to i16*
  br i1 %23, label %26, label %40

26:                                               ; preds = %13
  %27 = icmp eq i16* %24, %25
  br i1 %27, label %44, label %28

28:                                               ; preds = %26
  %29 = inttoptr i64 %21 to i16*
  br label %30

30:                                               ; preds = %28, %36
  %31 = phi i16* [ %38, %36 ], [ %29, %28 ]
  %32 = phi i16* [ %37, %36 ], [ %24, %28 ]
  %33 = load i16, i16* %32, align 2
  %34 = load i16, i16* %31, align 2
  %35 = icmp eq i16 %33, %34
  br i1 %35, label %36, label %40

36:                                               ; preds = %30
  %37 = getelementptr inbounds i16, i16* %32, i64 1
  %38 = getelementptr inbounds i16, i16* %31, i64 1
  %39 = icmp eq i16* %37, %25
  br i1 %39, label %44, label %30

40:                                               ; preds = %30, %13, %8
  %41 = getelementptr inbounds %"class.v8::internal::RegExpParser::RegExpParserState", %"class.v8::internal::RegExpParser::RegExpParserState"* %9, i64 0, i32 0
  %42 = load %"class.v8::internal::RegExpParser::RegExpParserState"*, %"class.v8::internal::RegExpParser::RegExpParserState"** %41, align 8
  %43 = icmp eq %"class.v8::internal::RegExpParser::RegExpParserState"* %42, null
  br i1 %43, label %44, label %8

44:                                               ; preds = %26, %40, %36, %2
  %45 = phi i1 [ false, %2 ], [ true, %36 ], [ true, %26 ], [ false, %40 ]
  ret i1 %45
}

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal12RegExpParser20CreateCaptureNameMapEv(%"class.v8::internal::RegExpParser"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.v8::internal::ZoneAllocator.1162", align 8
  %3 = alloca %"class.v8::internal::ZoneVector.1156", align 8
  %4 = alloca %"class.v8::internal::Vector.1142", align 8
  %5 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 5
  %6 = load %"class.v8::internal::ZoneSet"*, %"class.v8::internal::ZoneSet"** %5, align 8
  %7 = icmp eq %"class.v8::internal::ZoneSet"* %6, null
  br i1 %7, label %115, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.v8::internal::ZoneSet", %"class.v8::internal::ZoneSet"* %6, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %10 = load i64, i64* %9, align 8
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %115, label %12

12:                                               ; preds = %8
  %13 = bitcast %"class.v8::internal::ZoneVector.1156"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %13) #13
  %14 = getelementptr inbounds %"class.v8::internal::ZoneSet", %"class.v8::internal::ZoneSet"* %6, i64 0, i32 0, i32 0, i32 0
  %15 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %14, align 8
  %16 = getelementptr inbounds %"class.v8::internal::ZoneSet", %"class.v8::internal::ZoneSet"* %6, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %17 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 1
  %18 = bitcast %"class.v8::internal::Zone"** %17 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = getelementptr inbounds %"class.v8::internal::ZoneVector.1156", %"class.v8::internal::ZoneVector.1156"* %3, i64 0, i32 0
  %21 = bitcast %"class.v8::internal::ZoneAllocator.1162"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #13
  %22 = bitcast %"class.v8::internal::ZoneAllocator.1162"* %2 to i64*
  store i64 %19, i64* %22, align 8
  call void @_ZNSt3__16vectorIPN2v88internal13RegExpCaptureENS2_13ZoneAllocatorIS4_EEEC2INS_21__tree_const_iteratorIS4_PNS_11__tree_nodeIS4_PvEElEEEET_SF_RKS6_PNS_9enable_ifIXaasr27__is_cpp17_forward_iteratorISF_EE5valuesr16is_constructibleIS4_NS_15iterator_traitsISF_E9referenceEEE5valueEvE4typeE(%"class.std::__1::vector.1157"* nonnull %20, %"class.std::__1::__tree_end_node"* %15, %"class.std::__1::__tree_end_node"* %16, %"class.v8::internal::ZoneAllocator.1162"* nonnull dereferenceable(8) %2, i8* null) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #13
  %23 = getelementptr inbounds %"class.v8::internal::ZoneVector.1156", %"class.v8::internal::ZoneVector.1156"* %3, i64 0, i32 0, i32 0, i32 0
  %24 = load %"class.v8::internal::RegExpCapture"**, %"class.v8::internal::RegExpCapture"*** %23, align 8
  %25 = getelementptr inbounds %"class.v8::internal::ZoneVector.1156", %"class.v8::internal::ZoneVector.1156"* %3, i64 0, i32 0, i32 0, i32 1
  %26 = load %"class.v8::internal::RegExpCapture"**, %"class.v8::internal::RegExpCapture"*** %25, align 8
  call fastcc void @_ZNSt3__16__sortIRN2v88internal12_GLOBAL__N_122RegExpCaptureIndexLessEPPNS2_13RegExpCaptureEEEvT0_S9_T_(%"class.v8::internal::RegExpCapture"** %24, %"class.v8::internal::RegExpCapture"** %26) #13
  %27 = bitcast %"class.v8::internal::RegExpParser"* %0 to %"class.v8::internal::FactoryBase"**
  %28 = load %"class.v8::internal::FactoryBase"*, %"class.v8::internal::FactoryBase"** %27, align 8
  %29 = bitcast %"class.v8::internal::RegExpCapture"*** %25 to i64*
  %30 = load i64, i64* %29, align 8
  %31 = bitcast %"class.v8::internal::ZoneVector.1156"* %3 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = sub i64 %30, %32
  %34 = lshr exact i64 %33, 2
  %35 = trunc i64 %34 to i32
  %36 = and i32 %35, -2
  %37 = call i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE13NewFixedArrayEiNS0_14AllocationTypeE(%"class.v8::internal::FactoryBase"* %28, i32 %36, i8 zeroext 0) #13
  %38 = load %"class.v8::internal::RegExpCapture"**, %"class.v8::internal::RegExpCapture"*** %23, align 8
  %39 = load %"class.v8::internal::RegExpCapture"**, %"class.v8::internal::RegExpCapture"*** %25, align 8
  %40 = icmp eq %"class.v8::internal::RegExpCapture"** %38, %39
  br i1 %40, label %47, label %41

41:                                               ; preds = %12
  %42 = bitcast %"class.v8::internal::Vector.1142"* %4 to i8*
  %43 = bitcast %"class.v8::internal::Vector.1142"* %4 to i64*
  %44 = getelementptr inbounds %"class.v8::internal::Vector.1142", %"class.v8::internal::Vector.1142"* %4, i64 0, i32 1
  br label %53

45:                                               ; preds = %101
  %46 = load %"class.v8::internal::RegExpCapture"**, %"class.v8::internal::RegExpCapture"*** %23, align 8
  br label %47

47:                                               ; preds = %45, %12
  %48 = phi %"class.v8::internal::RegExpCapture"** [ %46, %45 ], [ %38, %12 ]
  %49 = icmp eq %"class.v8::internal::RegExpCapture"** %48, null
  br i1 %49, label %52, label %50

50:                                               ; preds = %47
  %51 = ptrtoint %"class.v8::internal::RegExpCapture"** %48 to i64
  store i64 %51, i64* %29, align 8
  br label %52

52:                                               ; preds = %47, %50
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %13) #13
  br label %115

53:                                               ; preds = %41, %101
  %54 = phi i64 [ 0, %41 ], [ %112, %101 ]
  %55 = phi %"class.v8::internal::RegExpCapture"** [ %38, %41 ], [ %113, %101 ]
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %42) #13
  %56 = load %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %55, align 8
  %57 = getelementptr inbounds %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %56, i64 0, i32 5
  %58 = load %"class.v8::internal::ZoneVector"*, %"class.v8::internal::ZoneVector"** %57, align 8
  %59 = bitcast %"class.v8::internal::ZoneVector"* %58 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = getelementptr inbounds %"class.v8::internal::ZoneVector", %"class.v8::internal::ZoneVector"* %58, i64 0, i32 0, i32 0, i32 1
  %62 = bitcast i16** %61 to i64*
  %63 = load i64, i64* %62, align 8
  %64 = sub i64 %63, %60
  %65 = ashr exact i64 %64, 1
  store i64 %60, i64* %43, align 8
  store i64 %65, i64* %44, align 8
  %66 = call i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE17InternalizeStringERKNS0_6VectorIKtEEb(%"class.v8::internal::FactoryBase"* %28, %"class.v8::internal::Vector.1142"* nonnull dereferenceable(16) %4, i1 zeroext false) #13
  %67 = load i64, i64* %37, align 8
  %68 = trunc i64 %54 to i32
  %69 = shl i32 %68, 3
  %70 = load i64, i64* %66, align 8
  %71 = or i32 %69, 7
  %72 = sext i32 %71 to i64
  %73 = add i64 %67, %72
  %74 = inttoptr i64 %73 to i32*
  %75 = trunc i64 %70 to i32
  store atomic volatile i32 %75, i32* %74 monotonic, align 4
  %76 = and i64 %70, 1
  %77 = icmp eq i64 %76, 0
  br i1 %77, label %101, label %78

78:                                               ; preds = %53
  %79 = and i64 %67, -262144
  %80 = or i64 %79, 8
  %81 = inttoptr i64 %80 to i64*
  %82 = load i64, i64* %81, align 8
  %83 = and i64 %82, 262144
  %84 = icmp eq i64 %83, 0
  br i1 %84, label %89, label %85

85:                                               ; preds = %78
  %86 = or i64 %79, 16
  %87 = inttoptr i64 %86 to %"class.v8::internal::Heap"**
  %88 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %87, align 16
  call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %88, i64 %67, i64 %73, i64 %70) #13
  br label %89

89:                                               ; preds = %85, %78
  %90 = and i64 %70, -262144
  %91 = or i64 %90, 8
  %92 = inttoptr i64 %91 to i64*
  %93 = load i64, i64* %92, align 8
  %94 = and i64 %93, 24
  %95 = icmp eq i64 %94, 0
  br i1 %95, label %101, label %96

96:                                               ; preds = %89
  %97 = load i64, i64* %81, align 8
  %98 = and i64 %97, 24
  %99 = icmp eq i64 %98, 0
  br i1 %99, label %100, label %101

100:                                              ; preds = %96
  call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %67, i64 %73, i64 %70) #13
  br label %101

101:                                              ; preds = %53, %89, %96, %100
  %102 = load i64, i64* %37, align 8
  %103 = or i32 %69, 4
  %104 = load %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %55, align 8
  %105 = getelementptr inbounds %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %104, i64 0, i32 2
  %106 = load i32, i32* %105, align 8
  %107 = shl i32 %106, 1
  %108 = sext i32 %103 to i64
  %109 = add nsw i64 %108, 7
  %110 = add i64 %109, %102
  %111 = inttoptr i64 %110 to i32*
  store atomic volatile i32 %107, i32* %111 monotonic, align 4
  %112 = add nuw i64 %54, 1
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %42) #13
  %113 = getelementptr inbounds %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %55, i64 1
  %114 = icmp eq %"class.v8::internal::RegExpCapture"** %113, %39
  br i1 %114, label %45, label %53

115:                                              ; preds = %1, %8, %52
  %116 = phi i64* [ %37, %52 ], [ null, %8 ], [ null, %1 ]
  ret i64* %116
}

declare i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE13NewFixedArrayEiNS0_14AllocationTypeE(%"class.v8::internal::FactoryBase"*, i32, i8 zeroext) local_unnamed_addr #6

declare i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE17InternalizeStringERKNS0_6VectorIKtEEb(%"class.v8::internal::FactoryBase"*, %"class.v8::internal::Vector.1142"* dereferenceable(16), i1 zeroext) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2v88internal12RegExpParser29ParseUnlimitedLengthHexNumberEiPj(%"class.v8::internal::RegExpParser"*, i32, i32* nocapture) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 8
  %5 = load i32, i32* %4, align 8
  %6 = add i32 %5, -48
  %7 = icmp ult i32 %6, 10
  br i1 %7, label %15, label %8

8:                                                ; preds = %3
  %9 = or i32 %6, 32
  %10 = add i32 %9, -49
  %11 = icmp ugt i32 %10, 5
  %12 = add i32 %9, -39
  %13 = icmp slt i32 %12, 0
  %14 = or i1 %11, %13
  br i1 %14, label %36, label %15

15:                                               ; preds = %8, %3
  %16 = phi i32 [ %12, %8 ], [ %6, %3 ]
  br label %17

17:                                               ; preds = %15, %32
  %18 = phi i32 [ %33, %32 ], [ %16, %15 ]
  %19 = phi i32 [ %21, %32 ], [ 0, %15 ]
  %20 = shl i32 %19, 4
  %21 = add i32 %20, %18
  %22 = icmp ugt i32 %21, %1
  br i1 %22, label %36, label %23

23:                                               ; preds = %17
  tail call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0)
  %24 = load i32, i32* %4, align 8
  %25 = add i32 %24, -48
  %26 = icmp ult i32 %25, 10
  br i1 %26, label %32, label %27

27:                                               ; preds = %23
  %28 = or i32 %25, 32
  %29 = add i32 %28, -49
  %30 = icmp ult i32 %29, 6
  %31 = add i32 %28, -39
  br i1 %30, label %32, label %35

32:                                               ; preds = %27, %23
  %33 = phi i32 [ %25, %23 ], [ %31, %27 ]
  %34 = icmp sgt i32 %33, -1
  br i1 %34, label %17, label %35

35:                                               ; preds = %27, %32
  store i32 %21, i32* %2, align 4
  br label %36

36:                                               ; preds = %17, %8, %35
  %37 = phi i1 [ true, %35 ], [ false, %8 ], [ false, %17 ]
  ret i1 %37
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @_ZN2v88internal12_GLOBAL__N_123LookupPropertyValueNameE9UPropertyPKcbPNS0_8ZoneListINS0_14CharacterRangeEEEPNS0_4ZoneE(i32, i8*, i1 zeroext, %"class.v8::internal::ZoneList.1145"* nocapture, %"class.v8::internal::Zone"*) unnamed_addr #0 {
  %6 = alloca i32, align 4
  %7 = alloca %"class.icu_69::UnicodeSet", align 8
  %8 = icmp eq i32 %0, 28672
  %9 = select i1 %8, i32 4106, i32 %0
  %10 = tail call i32 @u_getPropertyValueEnum_69(i32 %9, i8* %1) #13
  %11 = icmp eq i32 %10, -1
  br i1 %11, label %106, label %12

12:                                               ; preds = %5
  %13 = tail call i8* @u_getPropertyValueName_69(i32 %9, i32 %10, i32 0) #13
  %14 = icmp eq i8* %13, null
  br i1 %14, label %18, label %15

15:                                               ; preds = %12
  %16 = tail call i32 @strcmp(i8* %1, i8* nonnull %13) #15
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %27, label %18

18:                                               ; preds = %15, %12
  br label %19

19:                                               ; preds = %18, %24
  %20 = phi i32 [ %21, %24 ], [ 0, %18 ]
  %21 = add nuw nsw i32 %20, 1
  %22 = tail call i8* @u_getPropertyValueName_69(i32 %9, i32 %10, i32 %21) #13
  %23 = icmp eq i8* %22, null
  br i1 %23, label %106, label %24

24:                                               ; preds = %19
  %25 = tail call i32 @strcmp(i8* %1, i8* nonnull %22) #15
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %27, label %19

27:                                               ; preds = %24, %15
  %28 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %28) #13
  store i32 0, i32* %6, align 4
  %29 = bitcast %"class.icu_69::UnicodeSet"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 200, i8* nonnull %29) #13
  call void @_ZN6icu_6910UnicodeSetC1Ev(%"class.icu_69::UnicodeSet"* nonnull %7) #13
  %30 = call dereferenceable(200) %"class.icu_69::UnicodeSet"* @_ZN6icu_6910UnicodeSet21applyIntPropertyValueE9UPropertyiR10UErrorCode(%"class.icu_69::UnicodeSet"* nonnull %7, i32 %0, i32 %10, i32* nonnull dereferenceable(4) %6) #13
  %31 = load i32, i32* %6, align 4
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %33, label %104

33:                                               ; preds = %27
  %34 = call signext i8 @_ZNK6icu_6910UnicodeSet7isEmptyEv(%"class.icu_69::UnicodeSet"* nonnull %7) #13
  %35 = icmp eq i8 %34, 0
  br i1 %35, label %36, label %104

36:                                               ; preds = %33
  %37 = call dereferenceable(200) %"class.icu_69::UnicodeSet"* @_ZN6icu_6910UnicodeSet16removeAllStringsEv(%"class.icu_69::UnicodeSet"* nonnull %7) #13
  br i1 %2, label %38, label %40

38:                                               ; preds = %36
  %39 = call dereferenceable(200) %"class.icu_69::UnicodeSet"* @_ZN6icu_6910UnicodeSet10complementEv(%"class.icu_69::UnicodeSet"* nonnull %7) #13
  br label %40

40:                                               ; preds = %38, %36
  %41 = call i32 @_ZNK6icu_6910UnicodeSet13getRangeCountEv(%"class.icu_69::UnicodeSet"* nonnull %7) #13
  %42 = icmp sgt i32 %41, 0
  br i1 %42, label %43, label %104

43:                                               ; preds = %40
  %44 = getelementptr inbounds %"class.v8::internal::ZoneList.1145", %"class.v8::internal::ZoneList.1145"* %3, i64 0, i32 2
  %45 = getelementptr inbounds %"class.v8::internal::ZoneList.1145", %"class.v8::internal::ZoneList.1145"* %3, i64 0, i32 1
  %46 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %4, i64 0, i32 2
  %47 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %4, i64 0, i32 3
  %48 = bitcast %"class.v8::internal::ZoneList.1145"* %3 to i8**
  %49 = getelementptr inbounds %"class.v8::internal::ZoneList.1145", %"class.v8::internal::ZoneList.1145"* %3, i64 0, i32 0
  br label %50

50:                                               ; preds = %43, %94
  %51 = phi i32 [ 0, %43 ], [ %101, %94 ]
  %52 = call i32 @_ZNK6icu_6910UnicodeSet13getRangeStartEi(%"class.icu_69::UnicodeSet"* nonnull %7, i32 %51) #13
  %53 = call i32 @_ZNK6icu_6910UnicodeSet11getRangeEndEi(%"class.icu_69::UnicodeSet"* nonnull %7, i32 %51) #13
  %54 = zext i32 %53 to i64
  %55 = shl nuw i64 %54, 32
  %56 = zext i32 %52 to i64
  %57 = or i64 %55, %56
  %58 = load i32, i32* %44, align 4
  %59 = load i32, i32* %45, align 8
  %60 = icmp slt i32 %58, %59
  br i1 %60, label %61, label %63

61:                                               ; preds = %50
  %62 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %49, align 8
  br label %94

63:                                               ; preds = %50
  %64 = shl nsw i32 %59, 1
  %65 = or i32 %64, 1
  %66 = sext i32 %65 to i64
  %67 = shl nsw i64 %66, 3
  %68 = load i64, i64* %46, align 8
  %69 = load i64, i64* %47, align 8
  %70 = sub i64 %69, %68
  %71 = icmp ugt i64 %67, %70
  br i1 %71, label %72, label %74, !prof !3

72:                                               ; preds = %63
  %73 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %4, i64 %67) #13
  br label %76

74:                                               ; preds = %63
  %75 = add i64 %68, %67
  store i64 %75, i64* %46, align 8
  br label %76

76:                                               ; preds = %74, %72
  %77 = phi i64 [ %73, %72 ], [ %68, %74 ]
  %78 = inttoptr i64 %77 to %"class.v8::internal::CharacterRange"*
  %79 = load i32, i32* %44, align 4
  %80 = icmp sgt i32 %79, 0
  br i1 %80, label %81, label %92

81:                                               ; preds = %76
  %82 = inttoptr i64 %77 to i8*
  %83 = load i8*, i8** %48, align 8
  %84 = sext i32 %79 to i64
  %85 = shl nsw i64 %84, 3
  switch i64 %85, label %91 [
    i64 16, label %90
    i64 8, label %86
  ]

86:                                               ; preds = %81
  %87 = bitcast i8* %83 to i64*
  %88 = inttoptr i64 %77 to i64*
  %89 = load i64, i64* %87, align 1
  store i64 %89, i64* %88, align 1
  br label %92

90:                                               ; preds = %81
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %82, i8* align 1 %83, i64 16, i1 false) #13
  br label %92

91:                                               ; preds = %81
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %82, i8* align 1 %83, i64 %85, i1 false) #13
  br label %92

92:                                               ; preds = %91, %90, %86, %76
  store %"class.v8::internal::CharacterRange"* %78, %"class.v8::internal::CharacterRange"** %49, align 8
  store i32 %65, i32* %45, align 8
  %93 = load i32, i32* %44, align 4
  br label %94

94:                                               ; preds = %61, %92
  %95 = phi i32 [ %58, %61 ], [ %93, %92 ]
  %96 = phi %"class.v8::internal::CharacterRange"* [ %62, %61 ], [ %78, %92 ]
  %97 = add nsw i32 %95, 1
  store i32 %97, i32* %44, align 4
  %98 = sext i32 %95 to i64
  %99 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %96, i64 %98
  %100 = bitcast %"class.v8::internal::CharacterRange"* %99 to i64*
  store i64 %57, i64* %100, align 4
  %101 = add nuw nsw i32 %51, 1
  %102 = call i32 @_ZNK6icu_6910UnicodeSet13getRangeCountEv(%"class.icu_69::UnicodeSet"* nonnull %7) #13
  %103 = icmp slt i32 %101, %102
  br i1 %103, label %50, label %104

104:                                              ; preds = %94, %40, %27, %33
  %105 = phi i1 [ false, %33 ], [ false, %27 ], [ true, %40 ], [ true, %94 ]
  call void @_ZN6icu_6910UnicodeSetD1Ev(%"class.icu_69::UnicodeSet"* nonnull %7) #13
  call void @llvm.lifetime.end.p0i8(i64 200, i8* nonnull %29) #13
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %28) #13
  br label %106

106:                                              ; preds = %19, %5, %104
  %107 = phi i1 [ %105, %104 ], [ false, %5 ], [ false, %19 ]
  ret i1 %107
}

declare i32 @u_getPropertyEnum_69(i8*) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.v8::internal::RegExpCharacterClass"* @_ZN2v88internal4Zone3NewINS0_20RegExpCharacterClassEJPS1_RPNS0_8ZoneListINS0_14CharacterRangeEEERNS_4base5FlagsINS0_8JSRegExp4FlagEiEEEEEPT_DpOT0_(%"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** dereferenceable(8), %"class.v8::internal::ZoneList.1145"** dereferenceable(8), %"class.v8::base::Flags"* dereferenceable(4)) local_unnamed_addr #0 comdat align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %0, i64 0, i32 2
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %0, i64 0, i32 3
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %8, %6
  %10 = icmp ult i64 %9, 32
  br i1 %10, label %11, label %13, !prof !3

11:                                               ; preds = %4
  %12 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %0, i64 32) #13
  br label %15

13:                                               ; preds = %4
  %14 = add i64 %6, 32
  store i64 %14, i64* %5, align 8
  br label %15

15:                                               ; preds = %11, %13
  %16 = phi i64 [ %12, %11 ], [ %6, %13 ]
  %17 = inttoptr i64 %16 to %"class.v8::internal::RegExpCharacterClass"*
  %18 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %1, align 8
  %19 = load %"class.v8::internal::ZoneList.1145"*, %"class.v8::internal::ZoneList.1145"** %2, align 8
  %20 = getelementptr inbounds %"class.v8::base::Flags", %"class.v8::base::Flags"* %3, i64 0, i32 0
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %17, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [37 x i8*] }, { [37 x i8*] }* @_ZTVN2v88internal20RegExpCharacterClassE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %22, align 8
  %23 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %17, i64 0, i32 1, i32 0
  store %"class.v8::internal::ZoneList.1145"* %19, %"class.v8::internal::ZoneList.1145"** %23, align 8
  %24 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %17, i64 0, i32 1, i32 1
  store i16 0, i16* %24, align 8
  %25 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %17, i64 0, i32 2, i32 0
  store i32 %21, i32* %25, align 8
  %26 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %17, i64 0, i32 3, i32 0
  store i32 0, i32* %26, align 4
  %27 = getelementptr inbounds %"class.v8::internal::ZoneList.1145", %"class.v8::internal::ZoneList.1145"* %19, i64 0, i32 2
  %28 = load i32, i32* %27, align 4
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %30, label %80

30:                                               ; preds = %15
  %31 = getelementptr inbounds %"class.v8::internal::ZoneList.1145", %"class.v8::internal::ZoneList.1145"* %19, i64 0, i32 1
  %32 = load i32, i32* %31, align 8
  %33 = icmp sgt i32 %32, 0
  br i1 %33, label %34, label %37

34:                                               ; preds = %30
  %35 = bitcast %"class.v8::internal::ZoneList.1145"* %19 to i64**
  %36 = load i64*, i64** %35, align 8
  store i32 1, i32* %27, align 4
  br label %76

37:                                               ; preds = %30
  %38 = shl nsw i32 %32, 1
  %39 = or i32 %38, 1
  %40 = sext i32 %39 to i64
  %41 = shl nsw i64 %40, 3
  %42 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %18, i64 0, i32 2
  %43 = load i64, i64* %42, align 8
  %44 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %18, i64 0, i32 3
  %45 = load i64, i64* %44, align 8
  %46 = sub i64 %45, %43
  %47 = icmp ugt i64 %41, %46
  br i1 %47, label %48, label %50, !prof !3

48:                                               ; preds = %37
  %49 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %18, i64 %41) #13
  br label %52

50:                                               ; preds = %37
  %51 = add i64 %43, %41
  store i64 %51, i64* %42, align 8
  br label %52

52:                                               ; preds = %50, %48
  %53 = phi i64 [ %49, %48 ], [ %43, %50 ]
  %54 = inttoptr i64 %53 to %"class.v8::internal::CharacterRange"*
  %55 = load i32, i32* %27, align 4
  %56 = icmp sgt i32 %55, 0
  br i1 %56, label %57, label %69

57:                                               ; preds = %52
  %58 = inttoptr i64 %53 to i8*
  %59 = bitcast %"class.v8::internal::ZoneList.1145"* %19 to i8**
  %60 = load i8*, i8** %59, align 8
  %61 = sext i32 %55 to i64
  %62 = shl nsw i64 %61, 3
  switch i64 %62, label %68 [
    i64 16, label %67
    i64 8, label %63
  ]

63:                                               ; preds = %57
  %64 = bitcast i8* %60 to i64*
  %65 = inttoptr i64 %53 to i64*
  %66 = load i64, i64* %64, align 1
  store i64 %66, i64* %65, align 1
  br label %69

67:                                               ; preds = %57
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %58, i8* align 1 %60, i64 16, i1 false) #13
  br label %69

68:                                               ; preds = %57
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %58, i8* align 1 %60, i64 %62, i1 false) #13
  br label %69

69:                                               ; preds = %68, %67, %63, %52
  %70 = getelementptr inbounds %"class.v8::internal::ZoneList.1145", %"class.v8::internal::ZoneList.1145"* %19, i64 0, i32 0
  store %"class.v8::internal::CharacterRange"* %54, %"class.v8::internal::CharacterRange"** %70, align 8
  store i32 %39, i32* %31, align 8
  %71 = load i32, i32* %27, align 4
  %72 = add nsw i32 %71, 1
  store i32 %72, i32* %27, align 4
  %73 = sext i32 %71 to i64
  %74 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %54, i64 %73
  %75 = bitcast %"class.v8::internal::CharacterRange"* %74 to i64*
  br label %76

76:                                               ; preds = %69, %34
  %77 = phi i64* [ %75, %69 ], [ %36, %34 ]
  store i64 4785070309113856, i64* %77, align 4
  %78 = load i32, i32* %26, align 4
  %79 = xor i32 %78, 1
  store i32 %79, i32* %26, align 4
  br label %80

80:                                               ; preds = %15, %76
  ret %"class.v8::internal::RegExpCharacterClass"* %17
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2v88internal12RegExpParser25ParseClassCharacterEscapeEv(%"class.v8::internal::RegExpParser"*) local_unnamed_addr #0 align 2 {
  %2 = alloca i32, align 4
  tail call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0)
  %3 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 8
  %4 = load i32, i32* %3, align 8
  switch i32 %4, label %297 [
    i32 98, label %5
    i32 102, label %6
    i32 110, label %7
    i32 114, label %8
    i32 116, label %9
    i32 118, label %10
    i32 99, label %11
    i32 48, label %105
    i32 49, label %191
    i32 50, label %191
    i32 51, label %191
    i32 52, label %191
    i32 53, label %191
    i32 54, label %191
    i32 55, label %191
    i32 120, label %228
    i32 117, label %271
  ]

5:                                                ; preds = %1
  tail call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0)
  br label %321

6:                                                ; preds = %1
  tail call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0)
  br label %321

7:                                                ; preds = %1
  tail call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0)
  br label %321

8:                                                ; preds = %1
  tail call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0)
  br label %321

9:                                                ; preds = %1
  tail call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0)
  br label %321

10:                                               ; preds = %1
  tail call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0)
  br label %321

11:                                               ; preds = %1
  %12 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 10
  %13 = load i32, i32* %12, align 8
  %14 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 7
  %15 = load %"class.v8::internal::FlatStringReader"*, %"class.v8::internal::FlatStringReader"** %14, align 8
  %16 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %15, i64 0, i32 3
  %17 = load i32, i32* %16, align 4
  %18 = icmp slt i32 %13, %17
  br i1 %18, label %22, label %19

19:                                               ; preds = %11
  %20 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 9, i32 0
  %21 = load i32, i32* %20, align 4
  br label %83

22:                                               ; preds = %11
  %23 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %15, i64 0, i32 2
  %24 = load i8, i8* %23, align 8, !range !2
  %25 = icmp eq i8 %24, 0
  %26 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %15, i64 0, i32 4
  br i1 %25, label %34, label %27

27:                                               ; preds = %22
  %28 = load i8*, i8** %26, align 8
  %29 = sext i32 %13 to i64
  %30 = getelementptr inbounds i8, i8* %28, i64 %29
  %31 = load i8, i8* %30, align 1
  %32 = zext i8 %31 to i32
  %33 = bitcast i8* %28 to i16*
  br label %42

34:                                               ; preds = %22
  %35 = bitcast i8** %26 to i16**
  %36 = load i16*, i16** %35, align 8
  %37 = sext i32 %13 to i64
  %38 = getelementptr inbounds i16, i16* %36, i64 %37
  %39 = load i16, i16* %38, align 2
  %40 = zext i16 %39 to i32
  %41 = bitcast i16* %36 to i8*
  br label %42

42:                                               ; preds = %34, %27
  %43 = phi i16* [ %33, %27 ], [ %36, %34 ]
  %44 = phi i8* [ %28, %27 ], [ %41, %34 ]
  %45 = phi i32 [ %32, %27 ], [ %40, %34 ]
  %46 = add nsw i32 %13, 1
  %47 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 9, i32 0
  %48 = load i32, i32* %47, align 4
  %49 = and i32 %48, 16
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %76, label %51

51:                                               ; preds = %42
  %52 = icmp slt i32 %46, %17
  %53 = and i32 %45, 64512
  %54 = icmp eq i32 %53, 55296
  %55 = and i1 %52, %54
  br i1 %55, label %56, label %76

56:                                               ; preds = %51
  %57 = sext i32 %46 to i64
  br i1 %25, label %62, label %58

58:                                               ; preds = %56
  %59 = getelementptr inbounds i8, i8* %44, i64 %57
  %60 = load i8, i8* %59, align 1
  %61 = zext i8 %60 to i32
  br label %66

62:                                               ; preds = %56
  %63 = getelementptr inbounds i16, i16* %43, i64 %57
  %64 = load i16, i16* %63, align 2
  %65 = zext i16 %64 to i32
  br label %66

66:                                               ; preds = %62, %58
  %67 = phi i32 [ %61, %58 ], [ %65, %62 ]
  %68 = and i32 %67, 64512
  %69 = icmp eq i32 %68, 56320
  br i1 %69, label %70, label %76

70:                                               ; preds = %66
  %71 = shl nuw nsw i32 %45, 10
  %72 = and i32 %71, 1047552
  %73 = add nuw nsw i32 %72, 65536
  %74 = and i32 %67, 1023
  %75 = or i32 %74, %73
  br label %76

76:                                               ; preds = %42, %51, %66, %70
  %77 = phi i32 [ %45, %51 ], [ %45, %42 ], [ %75, %70 ], [ %45, %66 ]
  %78 = and i32 %77, -33
  %79 = add nsw i32 %78, -65
  %80 = icmp ult i32 %79, 26
  br i1 %80, label %81, label %83

81:                                               ; preds = %76
  store i32 %46, i32* %12, align 8
  tail call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0) #13
  %82 = and i32 %77, 31
  br label %321

83:                                               ; preds = %19, %76
  %84 = phi i32 [ %48, %76 ], [ %21, %19 ]
  %85 = phi i32 [ %77, %76 ], [ 2097152, %19 ]
  %86 = and i32 %84, 16
  %87 = icmp eq i32 %86, 0
  br i1 %87, label %97, label %88

88:                                               ; preds = %83
  %89 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 18
  %90 = load i8, i8* %89, align 1, !range !2
  %91 = icmp eq i8 %90, 0
  br i1 %91, label %92, label %321

92:                                               ; preds = %88
  store i8 1, i8* %89, align 1
  %93 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 2
  store i32 26, i32* %93, align 8
  %94 = add nsw i32 %13, -1
  %95 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 3
  store i32 %94, i32* %95, align 4
  store i32 2097152, i32* %3, align 8
  %96 = load i32, i32* %16, align 4
  store i32 %96, i32* %12, align 8
  br label %321

97:                                               ; preds = %83
  %98 = add nsw i32 %85, -48
  %99 = icmp ult i32 %98, 10
  %100 = icmp eq i32 %85, 95
  %101 = or i1 %100, %99
  br i1 %101, label %102, label %321

102:                                              ; preds = %97
  %103 = add nsw i32 %13, 1
  store i32 %103, i32* %12, align 8
  tail call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0) #13
  %104 = and i32 %85, 31
  br label %321

105:                                              ; preds = %1
  %106 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 9, i32 0
  %107 = load i32, i32* %106, align 4
  %108 = and i32 %107, 16
  %109 = icmp eq i32 %108, 0
  br i1 %109, label %191, label %110

110:                                              ; preds = %105
  %111 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 10
  %112 = load i32, i32* %111, align 8
  %113 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 7
  %114 = load %"class.v8::internal::FlatStringReader"*, %"class.v8::internal::FlatStringReader"** %113, align 8
  %115 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %114, i64 0, i32 3
  %116 = load i32, i32* %115, align 4
  %117 = icmp slt i32 %112, %116
  br i1 %117, label %118, label %190

118:                                              ; preds = %110
  %119 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %114, i64 0, i32 2
  %120 = load i8, i8* %119, align 8, !range !2
  %121 = icmp eq i8 %120, 0
  %122 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %114, i64 0, i32 4
  br i1 %121, label %130, label %123

123:                                              ; preds = %118
  %124 = load i8*, i8** %122, align 8
  %125 = sext i32 %112 to i64
  %126 = getelementptr inbounds i8, i8* %124, i64 %125
  %127 = load i8, i8* %126, align 1
  %128 = zext i8 %127 to i32
  %129 = bitcast i8* %124 to i16*
  br label %138

130:                                              ; preds = %118
  %131 = bitcast i8** %122 to i16**
  %132 = load i16*, i16** %131, align 8
  %133 = sext i32 %112 to i64
  %134 = getelementptr inbounds i16, i16* %132, i64 %133
  %135 = load i16, i16* %134, align 2
  %136 = zext i16 %135 to i32
  %137 = bitcast i16* %132 to i8*
  br label %138

138:                                              ; preds = %123, %130
  %139 = phi i16* [ %129, %123 ], [ %132, %130 ]
  %140 = phi i8* [ %124, %123 ], [ %137, %130 ]
  %141 = phi i32 [ %128, %123 ], [ %136, %130 ]
  %142 = add nsw i32 %112, 1
  %143 = icmp slt i32 %142, %116
  %144 = and i32 %141, 64512
  %145 = icmp eq i32 %144, 55296
  %146 = and i1 %143, %145
  br i1 %146, label %147, label %158

147:                                              ; preds = %138
  br i1 %121, label %148, label %154

148:                                              ; preds = %147
  %149 = sext i32 %142 to i64
  %150 = getelementptr inbounds i16, i16* %139, i64 %149
  %151 = load i16, i16* %150, align 2
  %152 = and i16 %151, -1024
  %153 = icmp eq i16 %152, -9216
  br label %154

154:                                              ; preds = %147, %148
  %155 = phi i1 [ %153, %148 ], [ false, %147 ]
  %156 = icmp ugt i32 %141, 47
  %157 = or i1 %156, %155
  br i1 %157, label %160, label %190

158:                                              ; preds = %138
  %159 = icmp ugt i32 %141, 47
  br i1 %159, label %160, label %190

160:                                              ; preds = %158, %154
  %161 = sext i32 %112 to i64
  br i1 %121, label %167, label %162

162:                                              ; preds = %160
  %163 = getelementptr inbounds i8, i8* %140, i64 %161
  %164 = load i8, i8* %163, align 1
  %165 = zext i8 %164 to i32
  %166 = bitcast i8* %140 to i16*
  br label %171

167:                                              ; preds = %160
  %168 = getelementptr inbounds i16, i16* %139, i64 %161
  %169 = load i16, i16* %168, align 2
  %170 = zext i16 %169 to i32
  br label %171

171:                                              ; preds = %162, %167
  %172 = phi i16* [ %166, %162 ], [ %139, %167 ]
  %173 = phi i32 [ %165, %162 ], [ %170, %167 ]
  %174 = and i32 %173, 64512
  %175 = icmp eq i32 %174, 55296
  %176 = and i1 %143, %175
  br i1 %176, label %177, label %188

177:                                              ; preds = %171
  br i1 %121, label %178, label %184

178:                                              ; preds = %177
  %179 = sext i32 %142 to i64
  %180 = getelementptr inbounds i16, i16* %172, i64 %179
  %181 = load i16, i16* %180, align 2
  %182 = and i16 %181, -1024
  %183 = icmp ne i16 %182, -9216
  br label %184

184:                                              ; preds = %177, %178
  %185 = phi i1 [ %183, %178 ], [ true, %177 ]
  %186 = icmp ult i32 %173, 58
  %187 = and i1 %186, %185
  br i1 %187, label %191, label %190

188:                                              ; preds = %171
  %189 = icmp ult i32 %173, 58
  br i1 %189, label %191, label %190

190:                                              ; preds = %184, %154, %110, %188, %158
  tail call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0)
  br label %321

191:                                              ; preds = %105, %184, %188, %1, %1, %1, %1, %1, %1, %1
  %192 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 9, i32 0
  %193 = load i32, i32* %192, align 4
  %194 = and i32 %193, 16
  %195 = icmp eq i32 %194, 0
  br i1 %195, label %210, label %196

196:                                              ; preds = %191
  %197 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 18
  %198 = load i8, i8* %197, align 1, !range !2
  %199 = icmp eq i8 %198, 0
  br i1 %199, label %200, label %321

200:                                              ; preds = %196
  store i8 1, i8* %197, align 1
  %201 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 2
  store i32 26, i32* %201, align 8
  %202 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 10
  %203 = load i32, i32* %202, align 8
  %204 = add nsw i32 %203, -1
  %205 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 3
  store i32 %204, i32* %205, align 4
  store i32 2097152, i32* %3, align 8
  %206 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 7
  %207 = load %"class.v8::internal::FlatStringReader"*, %"class.v8::internal::FlatStringReader"** %206, align 8
  %208 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %207, i64 0, i32 3
  %209 = load i32, i32* %208, align 4
  store i32 %209, i32* %202, align 8
  br label %321

210:                                              ; preds = %191
  %211 = add nsw i32 %4, -48
  tail call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0) #13
  %212 = load i32, i32* %3, align 8
  %213 = and i32 %212, -8
  %214 = icmp eq i32 %213, 48
  br i1 %214, label %215, label %321

215:                                              ; preds = %210
  %216 = shl i32 %211, 3
  %217 = add nsw i32 %216, -48
  %218 = add i32 %217, %212
  tail call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0) #13
  %219 = icmp ult i32 %218, 32
  br i1 %219, label %220, label %321

220:                                              ; preds = %215
  %221 = load i32, i32* %3, align 8
  %222 = and i32 %221, -8
  %223 = icmp eq i32 %222, 48
  br i1 %223, label %224, label %321

224:                                              ; preds = %220
  %225 = shl i32 %218, 3
  %226 = add nsw i32 %225, -48
  %227 = add i32 %226, %221
  tail call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0) #13
  br label %321

228:                                              ; preds = %1
  tail call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0)
  %229 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 10
  %230 = load i32, i32* %229, align 8
  %231 = add nsw i32 %230, -1
  %232 = load i32, i32* %3, align 8
  %233 = add i32 %232, -48
  %234 = icmp ult i32 %233, 10
  br i1 %234, label %242, label %235

235:                                              ; preds = %228
  %236 = or i32 %233, 32
  %237 = add i32 %236, -49
  %238 = icmp ugt i32 %237, 5
  %239 = add i32 %236, -39
  %240 = icmp slt i32 %239, 0
  %241 = or i1 %238, %240
  br i1 %241, label %247, label %242

242:                                              ; preds = %235, %228
  %243 = phi i32 [ %233, %228 ], [ %239, %235 ]
  tail call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0) #13
  %244 = load i32, i32* %3, align 8
  %245 = add i32 %244, -48
  %246 = icmp ult i32 %245, 10
  br i1 %246, label %330, label %323

247:                                              ; preds = %323, %235
  store i32 %231, i32* %229, align 8
  %248 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 7
  %249 = load %"class.v8::internal::FlatStringReader"*, %"class.v8::internal::FlatStringReader"** %248, align 8
  %250 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %249, i64 0, i32 3
  %251 = load i32, i32* %250, align 4
  %252 = icmp sge i32 %251, %230
  %253 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 13
  %254 = zext i1 %252 to i8
  store i8 %254, i8* %253, align 4
  tail call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0) #13
  %255 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 9, i32 0
  %256 = load i32, i32* %255, align 4
  %257 = and i32 %256, 16
  %258 = icmp eq i32 %257, 0
  br i1 %258, label %321, label %259

259:                                              ; preds = %247
  %260 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 18
  %261 = load i8, i8* %260, align 1, !range !2
  %262 = icmp eq i8 %261, 0
  br i1 %262, label %263, label %321

263:                                              ; preds = %259
  store i8 1, i8* %260, align 1
  %264 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 2
  store i32 8, i32* %264, align 8
  %265 = load i32, i32* %229, align 8
  %266 = add nsw i32 %265, -1
  %267 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 3
  store i32 %266, i32* %267, align 4
  store i32 2097152, i32* %3, align 8
  %268 = load %"class.v8::internal::FlatStringReader"*, %"class.v8::internal::FlatStringReader"** %248, align 8
  %269 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %268, i64 0, i32 3
  %270 = load i32, i32* %269, align 4
  store i32 %270, i32* %229, align 8
  br label %321

271:                                              ; preds = %1
  tail call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0)
  %272 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %272) #13
  %273 = call zeroext i1 @_ZN2v88internal12RegExpParser18ParseUnicodeEscapeEPj(%"class.v8::internal::RegExpParser"* %0, i32* nonnull %2)
  br i1 %273, label %274, label %276

274:                                              ; preds = %271
  %275 = load i32, i32* %2, align 4
  br label %295

276:                                              ; preds = %271
  %277 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 9, i32 0
  %278 = load i32, i32* %277, align 4
  %279 = and i32 %278, 16
  %280 = icmp eq i32 %279, 0
  br i1 %280, label %295, label %281

281:                                              ; preds = %276
  %282 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 18
  %283 = load i8, i8* %282, align 1, !range !2
  %284 = icmp eq i8 %283, 0
  br i1 %284, label %285, label %295

285:                                              ; preds = %281
  store i8 1, i8* %282, align 1
  %286 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 2
  store i32 10, i32* %286, align 8
  %287 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 10
  %288 = load i32, i32* %287, align 8
  %289 = add nsw i32 %288, -1
  %290 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 3
  store i32 %289, i32* %290, align 4
  store i32 2097152, i32* %3, align 8
  %291 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 7
  %292 = load %"class.v8::internal::FlatStringReader"*, %"class.v8::internal::FlatStringReader"** %291, align 8
  %293 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %292, i64 0, i32 3
  %294 = load i32, i32* %293, align 4
  store i32 %294, i32* %287, align 8
  br label %295

295:                                              ; preds = %276, %285, %281, %274
  %296 = phi i32 [ %275, %274 ], [ 117, %276 ], [ 0, %281 ], [ 0, %285 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %272) #13
  br label %321

297:                                              ; preds = %1
  %298 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 9, i32 0
  %299 = load i32, i32* %298, align 4
  %300 = and i32 %299, 16
  %301 = icmp eq i32 %300, 0
  br i1 %301, label %306, label %302

302:                                              ; preds = %297
  %303 = tail call zeroext i1 @_ZN2v88internal12RegExpParser24IsSyntaxCharacterOrSlashEj(i32 %4)
  %304 = icmp eq i32 %4, 45
  %305 = or i1 %304, %303
  br i1 %305, label %306, label %307

306:                                              ; preds = %297, %302
  tail call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0)
  br label %321

307:                                              ; preds = %302
  %308 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 18
  %309 = load i8, i8* %308, align 1, !range !2
  %310 = icmp eq i8 %309, 0
  br i1 %310, label %311, label %321

311:                                              ; preds = %307
  store i8 1, i8* %308, align 1
  %312 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 2
  store i32 8, i32* %312, align 8
  %313 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 10
  %314 = load i32, i32* %313, align 8
  %315 = add nsw i32 %314, -1
  %316 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 3
  store i32 %315, i32* %316, align 4
  store i32 2097152, i32* %3, align 8
  %317 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 7
  %318 = load %"class.v8::internal::FlatStringReader"*, %"class.v8::internal::FlatStringReader"** %317, align 8
  %319 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %318, i64 0, i32 3
  %320 = load i32, i32* %319, align 4
  store i32 %320, i32* %313, align 8
  br label %321

321:                                              ; preds = %330, %247, %311, %307, %259, %263, %224, %220, %215, %210, %200, %196, %92, %88, %306, %81, %102, %97, %295, %190, %10, %9, %8, %7, %6, %5
  %322 = phi i32 [ %296, %295 ], [ 0, %190 ], [ 11, %10 ], [ 9, %9 ], [ 13, %8 ], [ 10, %7 ], [ 12, %6 ], [ 8, %5 ], [ %82, %81 ], [ %104, %102 ], [ 92, %97 ], [ %4, %306 ], [ 0, %88 ], [ 0, %92 ], [ 0, %196 ], [ 0, %200 ], [ %227, %224 ], [ %218, %220 ], [ %218, %215 ], [ %211, %210 ], [ 120, %247 ], [ 0, %259 ], [ 0, %263 ], [ 0, %307 ], [ 0, %311 ], [ %333, %330 ]
  ret i32 %322

323:                                              ; preds = %242
  %324 = or i32 %245, 32
  %325 = add i32 %324, -49
  %326 = icmp ugt i32 %325, 5
  %327 = add i32 %324, -39
  %328 = icmp slt i32 %327, 0
  %329 = or i1 %326, %328
  br i1 %329, label %247, label %330

330:                                              ; preds = %323, %242
  %331 = phi i32 [ %245, %242 ], [ %327, %323 ]
  %332 = shl i32 %243, 4
  %333 = add i32 %331, %332
  tail call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0) #13
  br label %321
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal12RegExpParser16ParseClassEscapeEPNS0_8ZoneListINS0_14CharacterRangeEEEPNS0_4ZoneEbPjPb(%"class.v8::internal::RegExpParser"*, %"class.v8::internal::ZoneList.1145"*, %"class.v8::internal::Zone"*, i1 zeroext, i32* nocapture, i8* nocapture) local_unnamed_addr #0 align 2 {
  %7 = alloca %"class.v8::internal::ZoneVector.1147", align 8
  %8 = alloca %"class.v8::internal::ZoneVector.1147", align 8
  %9 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 8
  %10 = load i32, i32* %9, align 8
  %11 = icmp eq i32 %10, 92
  br i1 %11, label %12, label %213

12:                                               ; preds = %6
  %13 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 10
  %14 = load i32, i32* %13, align 8
  %15 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 7
  %16 = load %"class.v8::internal::FlatStringReader"*, %"class.v8::internal::FlatStringReader"** %15, align 8
  %17 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %16, i64 0, i32 3
  %18 = load i32, i32* %17, align 4
  %19 = icmp slt i32 %14, %18
  br i1 %19, label %20, label %119

20:                                               ; preds = %12
  %21 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %16, i64 0, i32 2
  %22 = load i8, i8* %21, align 8, !range !2
  %23 = icmp eq i8 %22, 0
  %24 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %16, i64 0, i32 4
  br i1 %23, label %32, label %25

25:                                               ; preds = %20
  %26 = load i8*, i8** %24, align 8
  %27 = sext i32 %14 to i64
  %28 = getelementptr inbounds i8, i8* %26, i64 %27
  %29 = load i8, i8* %28, align 1
  %30 = zext i8 %29 to i32
  %31 = bitcast i8* %26 to i16*
  br label %40

32:                                               ; preds = %20
  %33 = bitcast i8** %24 to i16**
  %34 = load i16*, i16** %33, align 8
  %35 = sext i32 %14 to i64
  %36 = getelementptr inbounds i16, i16* %34, i64 %35
  %37 = load i16, i16* %36, align 2
  %38 = zext i16 %37 to i32
  %39 = bitcast i16* %34 to i8*
  br label %40

40:                                               ; preds = %32, %25
  %41 = phi i16* [ %31, %25 ], [ %34, %32 ]
  %42 = phi i8* [ %26, %25 ], [ %39, %32 ]
  %43 = phi i32 [ %30, %25 ], [ %38, %32 ]
  %44 = add nsw i32 %14, 1
  %45 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 9, i32 0
  %46 = load i32, i32* %45, align 4
  %47 = and i32 %46, 16
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %74, label %49

49:                                               ; preds = %40
  %50 = icmp slt i32 %44, %18
  %51 = and i32 %43, 64512
  %52 = icmp eq i32 %51, 55296
  %53 = and i1 %50, %52
  br i1 %53, label %54, label %74

54:                                               ; preds = %49
  %55 = sext i32 %44 to i64
  br i1 %23, label %60, label %56

56:                                               ; preds = %54
  %57 = getelementptr inbounds i8, i8* %42, i64 %55
  %58 = load i8, i8* %57, align 1
  %59 = zext i8 %58 to i32
  br label %64

60:                                               ; preds = %54
  %61 = getelementptr inbounds i16, i16* %41, i64 %55
  %62 = load i16, i16* %61, align 2
  %63 = zext i16 %62 to i32
  br label %64

64:                                               ; preds = %60, %56
  %65 = phi i32 [ %59, %56 ], [ %63, %60 ]
  %66 = and i32 %65, 64512
  %67 = icmp eq i32 %66, 56320
  br i1 %67, label %68, label %74

68:                                               ; preds = %64
  %69 = shl nuw nsw i32 %43, 10
  %70 = and i32 %69, 1047552
  %71 = add nuw nsw i32 %70, 65536
  %72 = and i32 %65, 1023
  %73 = or i32 %72, %71
  br label %74

74:                                               ; preds = %40, %49, %64, %68
  %75 = phi i32 [ %43, %49 ], [ %43, %40 ], [ %73, %68 ], [ %43, %64 ]
  switch i32 %75, label %211 [
    i32 119, label %76
    i32 87, label %76
    i32 100, label %76
    i32 68, label %76
    i32 115, label %76
    i32 83, label %76
    i32 80, label %128
    i32 112, label %128
  ]

76:                                               ; preds = %74, %74, %74, %74, %74, %74
  %77 = sext i32 %14 to i64
  br i1 %23, label %83, label %78

78:                                               ; preds = %76
  %79 = getelementptr inbounds i8, i8* %42, i64 %77
  %80 = load i8, i8* %79, align 1
  %81 = zext i8 %80 to i32
  %82 = bitcast i8* %42 to i16*
  br label %88

83:                                               ; preds = %76
  %84 = getelementptr inbounds i16, i16* %41, i64 %77
  %85 = load i16, i16* %84, align 2
  %86 = zext i16 %85 to i32
  %87 = bitcast i16* %41 to i8*
  br label %88

88:                                               ; preds = %83, %78
  %89 = phi i16* [ %82, %78 ], [ %41, %83 ]
  %90 = phi i8* [ %42, %78 ], [ %87, %83 ]
  %91 = phi i32 [ %81, %78 ], [ %86, %83 ]
  br i1 %48, label %114, label %92

92:                                               ; preds = %88
  %93 = icmp slt i32 %44, %18
  %94 = and i32 %91, 64512
  %95 = icmp eq i32 %94, 55296
  %96 = and i1 %93, %95
  br i1 %96, label %97, label %114

97:                                               ; preds = %92
  %98 = sext i32 %44 to i64
  br i1 %23, label %103, label %99

99:                                               ; preds = %97
  %100 = getelementptr inbounds i8, i8* %90, i64 %98
  %101 = load i8, i8* %100, align 1
  %102 = zext i8 %101 to i32
  br label %107

103:                                              ; preds = %97
  %104 = getelementptr inbounds i16, i16* %89, i64 %98
  %105 = load i16, i16* %104, align 2
  %106 = zext i16 %105 to i32
  br label %107

107:                                              ; preds = %103, %99
  %108 = phi i32 [ %102, %99 ], [ %106, %103 ]
  %109 = and i32 %108, 64512
  %110 = icmp eq i32 %109, 56320
  br i1 %110, label %111, label %114

111:                                              ; preds = %107
  %112 = and i32 %108, 1023
  %113 = or i32 %112, 65536
  br label %114

114:                                              ; preds = %88, %92, %107, %111
  %115 = phi i32 [ %91, %92 ], [ %91, %88 ], [ %113, %111 ], [ %91, %107 ]
  %116 = trunc i32 %115 to i8
  tail call void @_ZN2v88internal14CharacterRange14AddClassEscapeEcPNS0_8ZoneListIS1_EEbPNS0_4ZoneE(i8 signext %116, %"class.v8::internal::ZoneList.1145"* %1, i1 zeroext %3, %"class.v8::internal::Zone"* %2) #13
  %117 = load i32, i32* %13, align 8
  %118 = add nsw i32 %117, 1
  store i32 %118, i32* %13, align 8
  tail call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0) #13
  store i8 1, i8* %5, align 1
  br label %216

119:                                              ; preds = %12
  %120 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 18
  %121 = load i8, i8* %120, align 1, !range !2
  %122 = icmp eq i8 %121, 0
  br i1 %122, label %123, label %216

123:                                              ; preds = %119
  store i8 1, i8* %120, align 1
  %124 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 2
  store i32 6, i32* %124, align 8
  %125 = add nsw i32 %14, -1
  %126 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 3
  store i32 %125, i32* %126, align 4
  store i32 2097152, i32* %9, align 8
  %127 = load i32, i32* %17, align 4
  store i32 %127, i32* %13, align 8
  br label %216

128:                                              ; preds = %74, %74
  br i1 %48, label %211, label %129

129:                                              ; preds = %128
  %130 = sext i32 %14 to i64
  br i1 %23, label %136, label %131

131:                                              ; preds = %129
  %132 = getelementptr inbounds i8, i8* %42, i64 %130
  %133 = load i8, i8* %132, align 1
  %134 = zext i8 %133 to i32
  %135 = bitcast i8* %42 to i16*
  br label %141

136:                                              ; preds = %129
  %137 = getelementptr inbounds i16, i16* %41, i64 %130
  %138 = load i16, i16* %137, align 2
  %139 = zext i16 %138 to i32
  %140 = bitcast i16* %41 to i8*
  br label %141

141:                                              ; preds = %131, %136
  %142 = phi i16* [ %135, %131 ], [ %41, %136 ]
  %143 = phi i8* [ %42, %131 ], [ %140, %136 ]
  %144 = phi i32 [ %134, %131 ], [ %139, %136 ]
  %145 = icmp slt i32 %44, %18
  %146 = and i32 %144, 64512
  %147 = icmp eq i32 %146, 55296
  %148 = and i1 %145, %147
  br i1 %148, label %149, label %169

149:                                              ; preds = %141
  %150 = sext i32 %44 to i64
  br i1 %23, label %155, label %151

151:                                              ; preds = %149
  %152 = getelementptr inbounds i8, i8* %143, i64 %150
  %153 = load i8, i8* %152, align 1
  %154 = zext i8 %153 to i32
  br label %159

155:                                              ; preds = %149
  %156 = getelementptr inbounds i16, i16* %142, i64 %150
  %157 = load i16, i16* %156, align 2
  %158 = zext i16 %157 to i32
  br label %159

159:                                              ; preds = %155, %151
  %160 = phi i32 [ %154, %151 ], [ %158, %155 ]
  %161 = and i32 %160, 64512
  %162 = icmp eq i32 %161, 56320
  br i1 %162, label %163, label %169

163:                                              ; preds = %159
  %164 = shl nuw nsw i32 %144, 10
  %165 = and i32 %164, 1047552
  %166 = add nuw nsw i32 %165, 65536
  %167 = and i32 %160, 1023
  %168 = or i32 %167, %166
  br label %169

169:                                              ; preds = %141, %159, %163
  %170 = phi i32 [ %144, %141 ], [ %168, %163 ], [ %144, %159 ]
  store i32 %44, i32* %13, align 8
  tail call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0) #13
  %171 = bitcast %"class.v8::internal::ZoneVector.1147"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %171) #13
  %172 = ptrtoint %"class.v8::internal::Zone"* %2 to i64
  %173 = getelementptr inbounds %"class.v8::internal::ZoneVector.1147", %"class.v8::internal::ZoneVector.1147"* %7, i64 0, i32 0, i32 0, i32 2, i32 1
  %174 = bitcast %"struct.std::__1::__compressed_pair_elem.1152"* %173 to i64*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %171, i8 0, i64 24, i1 false) #13
  store i64 %172, i64* %174, align 8
  %175 = bitcast %"class.v8::internal::ZoneVector.1147"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %175) #13
  %176 = getelementptr inbounds %"class.v8::internal::ZoneVector.1147", %"class.v8::internal::ZoneVector.1147"* %8, i64 0, i32 0, i32 0, i32 2, i32 1
  %177 = bitcast %"struct.std::__1::__compressed_pair_elem.1152"* %176 to i64*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %175, i8 0, i64 24, i1 false) #13
  store i64 %172, i64* %177, align 8
  %178 = call zeroext i1 @_ZN2v88internal12RegExpParser22ParsePropertyClassNameEPNS0_10ZoneVectorIcEES4_(%"class.v8::internal::RegExpParser"* %0, %"class.v8::internal::ZoneVector.1147"* nonnull %7, %"class.v8::internal::ZoneVector.1147"* nonnull %8)
  br i1 %178, label %179, label %182

179:                                              ; preds = %169
  %180 = icmp eq i32 %170, 80
  %181 = call zeroext i1 @_ZN2v88internal12RegExpParser21AddPropertyClassRangeEPNS0_8ZoneListINS0_14CharacterRangeEEEbRKNS0_10ZoneVectorIcEES9_(%"class.v8::internal::RegExpParser"* %0, %"class.v8::internal::ZoneList.1145"* %1, i1 zeroext %180, %"class.v8::internal::ZoneVector.1147"* nonnull dereferenceable(32) %7, %"class.v8::internal::ZoneVector.1147"* nonnull dereferenceable(32) %8)
  br i1 %181, label %194, label %182

182:                                              ; preds = %179, %169
  %183 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 18
  %184 = load i8, i8* %183, align 1, !range !2
  %185 = icmp eq i8 %184, 0
  br i1 %185, label %186, label %194

186:                                              ; preds = %182
  store i8 1, i8* %183, align 1
  %187 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 2
  store i32 27, i32* %187, align 8
  %188 = load i32, i32* %13, align 8
  %189 = add nsw i32 %188, -1
  %190 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 3
  store i32 %189, i32* %190, align 4
  store i32 2097152, i32* %9, align 8
  %191 = load %"class.v8::internal::FlatStringReader"*, %"class.v8::internal::FlatStringReader"** %15, align 8
  %192 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %191, i64 0, i32 3
  %193 = load i32, i32* %192, align 4
  store i32 %193, i32* %13, align 8
  br label %194

194:                                              ; preds = %186, %182, %179
  store i8 1, i8* %5, align 1
  %195 = getelementptr inbounds %"class.v8::internal::ZoneVector.1147", %"class.v8::internal::ZoneVector.1147"* %8, i64 0, i32 0, i32 0, i32 0
  %196 = load i8*, i8** %195, align 8
  %197 = icmp eq i8* %196, null
  br i1 %197, label %202, label %198

198:                                              ; preds = %194
  %199 = ptrtoint i8* %196 to i64
  %200 = getelementptr inbounds %"class.v8::internal::ZoneVector.1147", %"class.v8::internal::ZoneVector.1147"* %8, i64 0, i32 0, i32 0, i32 1
  %201 = bitcast i8** %200 to i64*
  store i64 %199, i64* %201, align 8
  br label %202

202:                                              ; preds = %194, %198
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %175) #13
  %203 = getelementptr inbounds %"class.v8::internal::ZoneVector.1147", %"class.v8::internal::ZoneVector.1147"* %7, i64 0, i32 0, i32 0, i32 0
  %204 = load i8*, i8** %203, align 8
  %205 = icmp eq i8* %204, null
  br i1 %205, label %210, label %206

206:                                              ; preds = %202
  %207 = ptrtoint i8* %204 to i64
  %208 = getelementptr inbounds %"class.v8::internal::ZoneVector.1147", %"class.v8::internal::ZoneVector.1147"* %7, i64 0, i32 0, i32 0, i32 1
  %209 = bitcast i8** %208 to i64*
  store i64 %207, i64* %209, align 8
  br label %210

210:                                              ; preds = %202, %206
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %171) #13
  br label %216

211:                                              ; preds = %128, %74
  %212 = tail call i32 @_ZN2v88internal12RegExpParser25ParseClassCharacterEscapeEv(%"class.v8::internal::RegExpParser"* %0)
  br label %214

213:                                              ; preds = %6
  tail call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* %0)
  br label %214

214:                                              ; preds = %213, %211
  %215 = phi i32 [ %212, %211 ], [ %10, %213 ]
  store i32 %215, i32* %4, align 4
  store i8 0, i8* %5, align 1
  br label %216

216:                                              ; preds = %123, %119, %214, %210, %114
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.v8::internal::RegExpCharacterClass"* @_ZN2v88internal4Zone3NewINS0_20RegExpCharacterClassEJPS1_RPNS0_8ZoneListINS0_14CharacterRangeEEENS_4base5FlagsINS0_8JSRegExp4FlagEiEERNSB_INS3_4FlagEiEEEEEPT_DpOT0_(%"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** dereferenceable(8), %"class.v8::internal::ZoneList.1145"** dereferenceable(8), %"class.v8::base::Flags"* dereferenceable(4), %"class.v8::base::Flags.1146"* dereferenceable(4)) local_unnamed_addr #0 comdat align 2 {
  %6 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %0, i64 0, i32 2
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %0, i64 0, i32 3
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %9, %7
  %11 = icmp ult i64 %10, 32
  br i1 %11, label %12, label %14, !prof !3

12:                                               ; preds = %5
  %13 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %0, i64 32) #13
  br label %16

14:                                               ; preds = %5
  %15 = add i64 %7, 32
  store i64 %15, i64* %6, align 8
  br label %16

16:                                               ; preds = %12, %14
  %17 = phi i64 [ %13, %12 ], [ %7, %14 ]
  %18 = inttoptr i64 %17 to %"class.v8::internal::RegExpCharacterClass"*
  %19 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %1, align 8
  %20 = load %"class.v8::internal::ZoneList.1145"*, %"class.v8::internal::ZoneList.1145"** %2, align 8
  %21 = getelementptr inbounds %"class.v8::base::Flags", %"class.v8::base::Flags"* %3, i64 0, i32 0
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr inbounds %"class.v8::base::Flags.1146", %"class.v8::base::Flags.1146"* %4, i64 0, i32 0
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %18, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [37 x i8*] }, { [37 x i8*] }* @_ZTVN2v88internal20RegExpCharacterClassE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %25, align 8
  %26 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %18, i64 0, i32 1, i32 0
  store %"class.v8::internal::ZoneList.1145"* %20, %"class.v8::internal::ZoneList.1145"** %26, align 8
  %27 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %18, i64 0, i32 1, i32 1
  store i16 0, i16* %27, align 8
  %28 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %18, i64 0, i32 2, i32 0
  store i32 %22, i32* %28, align 8
  %29 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %18, i64 0, i32 3, i32 0
  store i32 %24, i32* %29, align 4
  %30 = getelementptr inbounds %"class.v8::internal::ZoneList.1145", %"class.v8::internal::ZoneList.1145"* %20, i64 0, i32 2
  %31 = load i32, i32* %30, align 4
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %33, label %83

33:                                               ; preds = %16
  %34 = getelementptr inbounds %"class.v8::internal::ZoneList.1145", %"class.v8::internal::ZoneList.1145"* %20, i64 0, i32 1
  %35 = load i32, i32* %34, align 8
  %36 = icmp sgt i32 %35, 0
  br i1 %36, label %37, label %40

37:                                               ; preds = %33
  %38 = bitcast %"class.v8::internal::ZoneList.1145"* %20 to i64**
  %39 = load i64*, i64** %38, align 8
  store i32 1, i32* %30, align 4
  br label %79

40:                                               ; preds = %33
  %41 = shl nsw i32 %35, 1
  %42 = or i32 %41, 1
  %43 = sext i32 %42 to i64
  %44 = shl nsw i64 %43, 3
  %45 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %19, i64 0, i32 2
  %46 = load i64, i64* %45, align 8
  %47 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %19, i64 0, i32 3
  %48 = load i64, i64* %47, align 8
  %49 = sub i64 %48, %46
  %50 = icmp ugt i64 %44, %49
  br i1 %50, label %51, label %53, !prof !3

51:                                               ; preds = %40
  %52 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %19, i64 %44) #13
  br label %55

53:                                               ; preds = %40
  %54 = add i64 %46, %44
  store i64 %54, i64* %45, align 8
  br label %55

55:                                               ; preds = %53, %51
  %56 = phi i64 [ %52, %51 ], [ %46, %53 ]
  %57 = inttoptr i64 %56 to %"class.v8::internal::CharacterRange"*
  %58 = load i32, i32* %30, align 4
  %59 = icmp sgt i32 %58, 0
  br i1 %59, label %60, label %72

60:                                               ; preds = %55
  %61 = inttoptr i64 %56 to i8*
  %62 = bitcast %"class.v8::internal::ZoneList.1145"* %20 to i8**
  %63 = load i8*, i8** %62, align 8
  %64 = sext i32 %58 to i64
  %65 = shl nsw i64 %64, 3
  switch i64 %65, label %71 [
    i64 16, label %70
    i64 8, label %66
  ]

66:                                               ; preds = %60
  %67 = bitcast i8* %63 to i64*
  %68 = inttoptr i64 %56 to i64*
  %69 = load i64, i64* %67, align 1
  store i64 %69, i64* %68, align 1
  br label %72

70:                                               ; preds = %60
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %61, i8* align 1 %63, i64 16, i1 false) #13
  br label %72

71:                                               ; preds = %60
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %61, i8* align 1 %63, i64 %65, i1 false) #13
  br label %72

72:                                               ; preds = %71, %70, %66, %55
  %73 = getelementptr inbounds %"class.v8::internal::ZoneList.1145", %"class.v8::internal::ZoneList.1145"* %20, i64 0, i32 0
  store %"class.v8::internal::CharacterRange"* %57, %"class.v8::internal::CharacterRange"** %73, align 8
  store i32 %42, i32* %34, align 8
  %74 = load i32, i32* %30, align 4
  %75 = add nsw i32 %74, 1
  store i32 %75, i32* %30, align 4
  %76 = sext i32 %74 to i64
  %77 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %57, i64 %76
  %78 = bitcast %"class.v8::internal::CharacterRange"* %77 to i64*
  br label %79

79:                                               ; preds = %72, %37
  %80 = phi i64* [ %78, %72 ], [ %39, %37 ]
  store i64 4785070309113856, i64* %80, align 4
  %81 = load i32, i32* %29, align 4
  %82 = xor i32 %81, 1
  store i32 %82, i32* %29, align 4
  br label %83

83:                                               ; preds = %16, %79
  ret %"class.v8::internal::RegExpCharacterClass"* %18
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2v88internal12RegExpParser5ParseEPNS0_17RegExpCompileDataERKNS0_22CombinationAssertScopeIJNS0_29PerThreadAssertScopeDebugOnlyILNS0_19PerThreadAssertTypeE0ELb0EEENS5_ILS6_1ELb0EEEEEE(%"class.v8::internal::RegExpParser"*, %"struct.v8::internal::RegExpCompileData"* nocapture, %"class.v8::internal::CombinationAssertScope"* nocapture readnone dereferenceable(1)) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.v8::internal::StdoutStream", align 8
  %5 = tail call %"class.v8::internal::RegExpTree"* @_ZN2v88internal12RegExpParser16ParseDisjunctionEv(%"class.v8::internal::RegExpParser"* %0) #13
  %6 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 18
  %7 = load i8, i8* %6, align 1, !range !2
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %9, label %37

9:                                                ; preds = %3
  tail call void @_ZN2v88internal12RegExpParser24PatchNamedBackReferencesEv(%"class.v8::internal::RegExpParser"* %0) #13
  %10 = load i8, i8* %6, align 1, !range !2
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %12, label %37

12:                                               ; preds = %9
  %13 = bitcast %"class.v8::internal::RegExpTree"* %5 to i1 (%"class.v8::internal::RegExpTree"*)***
  %14 = load i1 (%"class.v8::internal::RegExpTree"*)**, i1 (%"class.v8::internal::RegExpTree"*)*** %13, align 8
  %15 = getelementptr inbounds i1 (%"class.v8::internal::RegExpTree"*)*, i1 (%"class.v8::internal::RegExpTree"*)** %14, i64 20
  %16 = load i1 (%"class.v8::internal::RegExpTree"*)*, i1 (%"class.v8::internal::RegExpTree"*)** %15, align 8
  %17 = tail call zeroext i1 %16(%"class.v8::internal::RegExpTree"* %5) #13
  br i1 %17, label %18, label %34

18:                                               ; preds = %12
  %19 = bitcast %"class.v8::internal::RegExpTree"* %5 to %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)***
  %20 = load %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)**, %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)*** %19, align 8
  %21 = getelementptr inbounds %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)*, %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)** %20, i64 19
  %22 = load %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)*, %"class.v8::internal::RegExpAtom"* (%"class.v8::internal::RegExpTree"*)** %21, align 8
  %23 = tail call %"class.v8::internal::RegExpAtom"* %22(%"class.v8::internal::RegExpTree"* %5) #13
  %24 = getelementptr inbounds %"class.v8::internal::RegExpAtom", %"class.v8::internal::RegExpAtom"* %23, i64 0, i32 1, i32 1
  %25 = load i64, i64* %24, align 8
  %26 = trunc i64 %25 to i32
  %27 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 7
  %28 = load %"class.v8::internal::FlatStringReader"*, %"class.v8::internal::FlatStringReader"** %27, align 8
  %29 = getelementptr inbounds %"class.v8::internal::FlatStringReader", %"class.v8::internal::FlatStringReader"* %28, i64 0, i32 3
  %30 = load i32, i32* %29, align 4
  %31 = icmp eq i32 %30, %26
  br i1 %31, label %32, label %34

32:                                               ; preds = %18
  %33 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 14
  store i8 1, i8* %33, align 1
  br label %34

34:                                               ; preds = %12, %18, %32
  %35 = load i8, i8* %6, align 1
  %36 = icmp eq i8 %35, 0
  br i1 %36, label %44, label %37

37:                                               ; preds = %34, %9, %3
  %38 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 2
  %39 = load i32, i32* %38, align 8
  %40 = getelementptr inbounds %"struct.v8::internal::RegExpCompileData", %"struct.v8::internal::RegExpCompileData"* %1, i64 0, i32 7
  store i32 %39, i32* %40, align 8
  %41 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 3
  %42 = load i32, i32* %41, align 4
  %43 = getelementptr inbounds %"struct.v8::internal::RegExpCompileData", %"struct.v8::internal::RegExpCompileData"* %1, i64 0, i32 8
  store i32 %42, i32* %43, align 4
  br label %88

44:                                               ; preds = %34
  %45 = load i8, i8* @_ZN2v88internal24FLAG_trace_regexp_parserE, align 1, !range !2
  %46 = icmp eq i8 %45, 0
  br i1 %46, label %66, label %47

47:                                               ; preds = %44
  %48 = bitcast %"class.v8::internal::StdoutStream"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 240, i8* nonnull %48) #13
  %49 = getelementptr inbounds %"class.v8::internal::StdoutStream", %"class.v8::internal::StdoutStream"* %4, i64 0, i32 2, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVNSt3__19basic_iosIcNS_11char_traitsIcEEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %49, align 8
  %50 = bitcast %"class.v8::internal::StdoutStream"* %4 to %"class.v8::internal::OFStream"*
  %51 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  call void @_ZN2v88internal8OFStreamC2EP8_IO_FILE(%"class.v8::internal::OFStream"* nonnull %50, i8** getelementptr inbounds ([6 x i8*], [6 x i8*]* @_ZTTN2v88internal12StdoutStreamE, i64 0, i64 1), %struct._IO_FILE* %51) #13
  %52 = getelementptr inbounds %"class.v8::internal::StdoutStream", %"class.v8::internal::StdoutStream"* %4, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTVN2v88internal12StdoutStreamE, i64 0, inrange i32 0, i64 3) to i32 (...)**), i32 (...)*** %52, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTVN2v88internal12StdoutStreamE, i64 0, inrange i32 1, i64 3) to i32 (...)**), i32 (...)*** %49, align 8
  %53 = call %"class.v8::base::RecursiveMutex"* @_ZN2v88internal12StdoutStream14GetStdoutMutexEv() #13
  %54 = getelementptr inbounds %"class.v8::internal::StdoutStream", %"class.v8::internal::StdoutStream"* %4, i64 0, i32 1, i32 0
  store %"class.v8::base::RecursiveMutex"* %53, %"class.v8::base::RecursiveMutex"** %54, align 8
  call void @_ZN2v84base14RecursiveMutex4LockEv(%"class.v8::base::RecursiveMutex"* %53) #13
  %55 = bitcast %"class.v8::internal::StdoutStream"* %4 to %"class.std::__1::basic_ostream"*
  %56 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 1
  %57 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %56, align 8
  %58 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN2v88internal10RegExpTree5PrintERNSt3__113basic_ostreamIcNS2_11char_traitsIcEEEEPNS0_4ZoneE(%"class.v8::internal::RegExpTree"* %5, %"class.std::__1::basic_ostream"* nonnull dereferenceable(160) %55, %"class.v8::internal::Zone"* %57) #13
  %59 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* nonnull dereferenceable(160) %55, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i64 0, i64 0), i64 1) #13
  %60 = bitcast %"class.v8::internal::StdoutStream"* %4 to i64*
  store i64 ptrtoint (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTVN2v88internal12StdoutStreamE, i64 0, inrange i32 0, i64 3) to i64), i64* %60, align 8
  %61 = getelementptr inbounds %"class.v8::internal::StdoutStream", %"class.v8::internal::StdoutStream"* %4, i64 0, i32 2
  %62 = bitcast %"class.std::__1::basic_ios.base"* %61 to i64*
  store i64 ptrtoint (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTVN2v88internal12StdoutStreamE, i64 0, inrange i32 1, i64 3) to i64), i64* %62, align 8
  %63 = load %"class.v8::base::RecursiveMutex"*, %"class.v8::base::RecursiveMutex"** %54, align 8
  call void @_ZN2v84base14RecursiveMutex6UnlockEv(%"class.v8::base::RecursiveMutex"* %63) #13
  store i64 ptrtoint (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTCN2v88internal12StdoutStreamE0_NS0_8OFStreamE, i64 0, inrange i32 0, i64 3) to i64), i64* %60, align 8
  store i64 ptrtoint (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTCN2v88internal12StdoutStreamE0_NS0_8OFStreamE, i64 0, inrange i32 1, i64 3) to i64), i64* %62, align 8
  %64 = getelementptr inbounds %"class.v8::internal::StdoutStream", %"class.v8::internal::StdoutStream"* %4, i64 0, i32 0, i32 1, i32 0
  call void @_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_streambuf"* %64) #13
  call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_ostream"* nonnull %55, i8** getelementptr inbounds ([6 x i8*], [6 x i8*]* @_ZTTN2v88internal12StdoutStreamE, i64 0, i64 2)) #13
  %65 = bitcast %"class.std::__1::basic_ios.base"* %61 to %"class.std::__1::basic_ios"*
  call void @_ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_ios"* %65) #13
  call void @llvm.lifetime.end.p0i8(i64 240, i8* nonnull %48) #13
  br label %66

66:                                               ; preds = %44, %47
  %67 = getelementptr inbounds %"struct.v8::internal::RegExpCompileData", %"struct.v8::internal::RegExpCompileData"* %1, i64 0, i32 0
  store %"class.v8::internal::RegExpTree"* %5, %"class.v8::internal::RegExpTree"** %67, align 8
  %68 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 11
  %69 = load i32, i32* %68, align 4
  %70 = load i1 (%"class.v8::internal::RegExpTree"*)**, i1 (%"class.v8::internal::RegExpTree"*)*** %13, align 8
  %71 = getelementptr inbounds i1 (%"class.v8::internal::RegExpTree"*)*, i1 (%"class.v8::internal::RegExpTree"*)** %70, i64 20
  %72 = load i1 (%"class.v8::internal::RegExpTree"*)*, i1 (%"class.v8::internal::RegExpTree"*)** %71, align 8
  %73 = call zeroext i1 %72(%"class.v8::internal::RegExpTree"* %5) #13
  br i1 %73, label %74, label %81

74:                                               ; preds = %66
  %75 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 14
  %76 = load i8, i8* %75, align 1, !range !2
  %77 = icmp eq i8 %76, 0
  br i1 %77, label %81, label %78

78:                                               ; preds = %74
  %79 = icmp eq i32 %69, 0
  %80 = zext i1 %79 to i8
  br label %81

81:                                               ; preds = %74, %78, %66
  %82 = phi i8 [ 0, %74 ], [ 0, %66 ], [ %80, %78 ]
  %83 = getelementptr inbounds %"struct.v8::internal::RegExpCompileData", %"struct.v8::internal::RegExpCompileData"* %1, i64 0, i32 3
  store i8 %82, i8* %83, align 8
  %84 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %0, i64 0, i32 15
  %85 = load i8, i8* %84, align 2, !range !2
  %86 = getelementptr inbounds %"struct.v8::internal::RegExpCompileData", %"struct.v8::internal::RegExpCompileData"* %1, i64 0, i32 4
  store i8 %85, i8* %86, align 1
  %87 = getelementptr inbounds %"struct.v8::internal::RegExpCompileData", %"struct.v8::internal::RegExpCompileData"* %1, i64 0, i32 9
  store i32 %69, i32* %87, align 8
  br label %88

88:                                               ; preds = %81, %37
  %89 = load i8, i8* %6, align 1, !range !2
  %90 = icmp eq i8 %89, 0
  ret i1 %90
}

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN2v88internal10RegExpTree5PrintERNSt3__113basic_ostreamIcNS2_11char_traitsIcEEEEPNS0_4ZoneE(%"class.v8::internal::RegExpTree"*, %"class.std::__1::basic_ostream"* dereferenceable(160), %"class.v8::internal::Zone"*) local_unnamed_addr #6

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal12StdoutStreamD1Ev(%"class.v8::internal::StdoutStream"*) unnamed_addr #8 comdat align 2 {
  %2 = bitcast %"class.v8::internal::StdoutStream"* %0 to i64*
  store i64 ptrtoint (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTVN2v88internal12StdoutStreamE, i64 0, inrange i32 0, i64 3) to i64), i64* %2, align 8
  %3 = getelementptr inbounds %"class.v8::internal::StdoutStream", %"class.v8::internal::StdoutStream"* %0, i64 0, i32 2
  %4 = bitcast %"class.std::__1::basic_ios.base"* %3 to i64*
  store i64 ptrtoint (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTVN2v88internal12StdoutStreamE, i64 0, inrange i32 1, i64 3) to i64), i64* %4, align 8
  %5 = getelementptr inbounds %"class.v8::internal::StdoutStream", %"class.v8::internal::StdoutStream"* %0, i64 0, i32 1, i32 0
  %6 = load %"class.v8::base::RecursiveMutex"*, %"class.v8::base::RecursiveMutex"** %5, align 8
  tail call void @_ZN2v84base14RecursiveMutex6UnlockEv(%"class.v8::base::RecursiveMutex"* %6) #13
  store i64 ptrtoint (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTCN2v88internal12StdoutStreamE0_NS0_8OFStreamE, i64 0, inrange i32 0, i64 3) to i64), i64* %2, align 8
  store i64 ptrtoint (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTCN2v88internal12StdoutStreamE0_NS0_8OFStreamE, i64 0, inrange i32 1, i64 3) to i64), i64* %4, align 8
  %7 = getelementptr inbounds %"class.v8::internal::StdoutStream", %"class.v8::internal::StdoutStream"* %0, i64 0, i32 0, i32 1, i32 0
  tail call void @_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_streambuf"* %7) #13
  %8 = bitcast %"class.v8::internal::StdoutStream"* %0 to %"class.std::__1::basic_ostream"*
  tail call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_ostream"* %8, i8** getelementptr inbounds ([6 x i8*], [6 x i8*]* @_ZTTN2v88internal12StdoutStreamE, i64 0, i64 2)) #13
  %9 = bitcast %"class.std::__1::basic_ios.base"* %3 to %"class.std::__1::basic_ios"*
  tail call void @_ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_ios"* %9) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2v88internal12RegExpParser11ParseRegExpEPNS0_7IsolateEPNS0_4ZoneEPNS0_16FlatStringReaderENS_4base5FlagsINS0_8JSRegExp4FlagEiEEPNS0_17RegExpCompileDataE(%"class.v8::internal::Isolate"*, %"class.v8::internal::Zone"*, %"class.v8::internal::FlatStringReader"*, i32, %"struct.v8::internal::RegExpCompileData"* nocapture) local_unnamed_addr #0 align 2 {
  %6 = alloca %"class.v8::internal::RegExpParser", align 8
  %7 = bitcast %"class.v8::internal::RegExpParser"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 88, i8* nonnull %7) #13
  %8 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %6, i64 0, i32 0
  store %"class.v8::internal::Isolate"* %0, %"class.v8::internal::Isolate"** %8, align 8
  %9 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %6, i64 0, i32 1
  store %"class.v8::internal::Zone"* %1, %"class.v8::internal::Zone"** %9, align 8
  %10 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %6, i64 0, i32 2
  %11 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %6, i64 0, i32 7
  %12 = bitcast i32* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 32, i1 false) #13
  store %"class.v8::internal::FlatStringReader"* %2, %"class.v8::internal::FlatStringReader"** %11, align 8
  %13 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %6, i64 0, i32 8
  store i32 2097152, i32* %13, align 8
  %14 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %6, i64 0, i32 9, i32 0
  store i32 %3, i32* %14, align 4
  %15 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %6, i64 0, i32 10
  store i32 0, i32* %15, align 8
  %16 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %6, i64 0, i32 11
  store i32 0, i32* %16, align 4
  %17 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %6, i64 0, i32 12
  store i32 0, i32* %17, align 8
  %18 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %6, i64 0, i32 13
  store i8 1, i8* %18, align 4
  %19 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %6, i64 0, i32 14
  call void @llvm.memset.p0i8.i64(i8* align 1 %19, i8 0, i64 5, i1 false) #13
  call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* nonnull %6) #13
  %20 = call zeroext i1 @_ZN2v88internal12RegExpParser5ParseEPNS0_17RegExpCompileDataERKNS0_22CombinationAssertScopeIJNS0_29PerThreadAssertScopeDebugOnlyILNS0_19PerThreadAssertTypeE0ELb0EEENS5_ILS6_1ELb0EEEEEE(%"class.v8::internal::RegExpParser"* nonnull %6, %"struct.v8::internal::RegExpCompileData"* %4, %"class.v8::internal::CombinationAssertScope"* dereferenceable(1) undef)
  br i1 %20, label %21, label %24

21:                                               ; preds = %5
  %22 = call i64* @_ZN2v88internal12RegExpParser20CreateCaptureNameMapEv(%"class.v8::internal::RegExpParser"* nonnull %6)
  %23 = getelementptr inbounds %"struct.v8::internal::RegExpCompileData", %"struct.v8::internal::RegExpCompileData"* %4, i64 0, i32 6, i32 0, i32 0
  store i64* %22, i64** %23, align 8
  br label %24

24:                                               ; preds = %21, %5
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %7) #13
  ret i1 %20
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2v88internal12RegExpParser18VerifyRegExpSyntaxEPNS0_7IsolateEPNS0_4ZoneEPNS0_16FlatStringReaderENS_4base5FlagsINS0_8JSRegExp4FlagEiEEPNS0_17RegExpCompileDataERKNS0_22CombinationAssertScopeIJNS0_29PerThreadAssertScopeDebugOnlyILNS0_19PerThreadAssertTypeE0ELb0EEENSG_ILSH_1ELb0EEEEEE(%"class.v8::internal::Isolate"*, %"class.v8::internal::Zone"*, %"class.v8::internal::FlatStringReader"*, i32, %"struct.v8::internal::RegExpCompileData"* nocapture, %"class.v8::internal::CombinationAssertScope"* nocapture readnone dereferenceable(1)) local_unnamed_addr #0 align 2 {
  %7 = alloca %"class.v8::internal::RegExpParser", align 8
  %8 = bitcast %"class.v8::internal::RegExpParser"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 88, i8* nonnull %8) #13
  %9 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %7, i64 0, i32 0
  store %"class.v8::internal::Isolate"* %0, %"class.v8::internal::Isolate"** %9, align 8
  %10 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %7, i64 0, i32 1
  store %"class.v8::internal::Zone"* %1, %"class.v8::internal::Zone"** %10, align 8
  %11 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %7, i64 0, i32 2
  %12 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %7, i64 0, i32 7
  %13 = bitcast i32* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 32, i1 false) #13
  store %"class.v8::internal::FlatStringReader"* %2, %"class.v8::internal::FlatStringReader"** %12, align 8
  %14 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %7, i64 0, i32 8
  store i32 2097152, i32* %14, align 8
  %15 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %7, i64 0, i32 9, i32 0
  store i32 %3, i32* %15, align 4
  %16 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %7, i64 0, i32 10
  store i32 0, i32* %16, align 8
  %17 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %7, i64 0, i32 11
  store i32 0, i32* %17, align 4
  %18 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %7, i64 0, i32 12
  store i32 0, i32* %18, align 8
  %19 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %7, i64 0, i32 13
  store i8 1, i8* %19, align 4
  %20 = getelementptr inbounds %"class.v8::internal::RegExpParser", %"class.v8::internal::RegExpParser"* %7, i64 0, i32 14
  call void @llvm.memset.p0i8.i64(i8* align 1 %20, i8 0, i64 5, i1 false) #13
  call void @_ZN2v88internal12RegExpParser7AdvanceEv(%"class.v8::internal::RegExpParser"* nonnull %7) #13
  %21 = call zeroext i1 @_ZN2v88internal12RegExpParser5ParseEPNS0_17RegExpCompileDataERKNS0_22CombinationAssertScopeIJNS0_29PerThreadAssertScopeDebugOnlyILNS0_19PerThreadAssertTypeE0ELb0EEENS5_ILS6_1ELb0EEEEEE(%"class.v8::internal::RegExpParser"* nonnull %7, %"struct.v8::internal::RegExpCompileData"* %4, %"class.v8::internal::CombinationAssertScope"* dereferenceable(1) undef)
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %8) #13
  ret i1 %21
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal13RegExpBuilderC2EPNS0_4ZoneENS_4base5FlagsINS0_8JSRegExp4FlagEiEE(%"class.v8::internal::RegExpBuilder"* nocapture, %"class.v8::internal::Zone"*, i32) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 0
  store %"class.v8::internal::Zone"* %1, %"class.v8::internal::Zone"** %4, align 8
  %5 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 1
  store i8 0, i8* %5, align 8
  %6 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 2, i32 0
  store i32 %2, i32* %6, align 4
  %7 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 3
  store %"class.v8::internal::ZoneList.1143"* null, %"class.v8::internal::ZoneList.1143"** %7, align 8
  %8 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 4
  store i16 0, i16* %8, align 8
  %9 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 5
  %10 = bitcast %"class.v8::internal::BufferedZoneList"* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 48, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal13RegExpBuilder16AddLeadSurrogateEt(%"class.v8::internal::RegExpBuilder"*, i16 zeroext) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.v8::internal::Zone"*, align 8
  %4 = alloca %"class.v8::internal::ZoneList.1145"*, align 8
  %5 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 4
  %6 = load i16, i16* %5, align 8
  %7 = icmp eq i16 %6, 0
  br i1 %7, label %22, label %8

8:                                                ; preds = %2
  store i16 0, i16* %5, align 8
  %9 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 0
  %10 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %9, align 8
  %11 = bitcast %"class.v8::internal::Zone"** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11) #13
  store %"class.v8::internal::Zone"* %10, %"class.v8::internal::Zone"** %3, align 8
  %12 = bitcast %"class.v8::internal::ZoneList.1145"** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12) #13
  %13 = zext i16 %6 to i64
  %14 = shl nuw nsw i64 %13, 32
  %15 = or i64 %14, %13
  %16 = tail call %"class.v8::internal::ZoneList.1145"* @_ZN2v88internal14CharacterRange4ListEPNS0_4ZoneES1_(%"class.v8::internal::Zone"* %10, i64 %15) #13
  store %"class.v8::internal::ZoneList.1145"* %16, %"class.v8::internal::ZoneList.1145"** %4, align 8
  %17 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 2
  %18 = call %"class.v8::internal::RegExpCharacterClass"* @_ZN2v88internal4Zone3NewINS0_20RegExpCharacterClassEJPS1_PNS0_8ZoneListINS0_14CharacterRangeEEERNS_4base5FlagsINS0_8JSRegExp4FlagEiEEEEEPT_DpOT0_(%"class.v8::internal::Zone"* %10, %"class.v8::internal::Zone"** nonnull dereferenceable(8) %3, %"class.v8::internal::ZoneList.1145"** nonnull dereferenceable(8) %4, %"class.v8::base::Flags"* dereferenceable(4) %17) #13
  %19 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %18, i64 0, i32 0
  call void @_ZN2v88internal13RegExpBuilder9FlushTextEv(%"class.v8::internal::RegExpBuilder"* %0) #13
  %20 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 5
  %21 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %9, align 8
  call void @_ZN2v88internal16BufferedZoneListINS0_10RegExpTreeELi2EE3AddEPS2_PNS0_4ZoneE(%"class.v8::internal::BufferedZoneList"* %20, %"class.v8::internal::RegExpTree"* %19, %"class.v8::internal::Zone"* %21) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #13
  br label %22

22:                                               ; preds = %2, %8
  store i16 %1, i16* %5, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal13RegExpBuilder21FlushPendingSurrogateEv(%"class.v8::internal::RegExpBuilder"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.v8::internal::Zone"*, align 8
  %3 = alloca %"class.v8::internal::ZoneList.1145"*, align 8
  %4 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 4
  %5 = load i16, i16* %4, align 8
  %6 = icmp eq i16 %5, 0
  br i1 %6, label %21, label %7

7:                                                ; preds = %1
  store i16 0, i16* %4, align 8
  %8 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 0
  %9 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %8, align 8
  %10 = bitcast %"class.v8::internal::Zone"** %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10) #13
  store %"class.v8::internal::Zone"* %9, %"class.v8::internal::Zone"** %2, align 8
  %11 = bitcast %"class.v8::internal::ZoneList.1145"** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11) #13
  %12 = zext i16 %5 to i64
  %13 = shl nuw nsw i64 %12, 32
  %14 = or i64 %13, %12
  %15 = tail call %"class.v8::internal::ZoneList.1145"* @_ZN2v88internal14CharacterRange4ListEPNS0_4ZoneES1_(%"class.v8::internal::Zone"* %9, i64 %14) #13
  store %"class.v8::internal::ZoneList.1145"* %15, %"class.v8::internal::ZoneList.1145"** %3, align 8
  %16 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 2
  %17 = call %"class.v8::internal::RegExpCharacterClass"* @_ZN2v88internal4Zone3NewINS0_20RegExpCharacterClassEJPS1_PNS0_8ZoneListINS0_14CharacterRangeEEERNS_4base5FlagsINS0_8JSRegExp4FlagEiEEEEEPT_DpOT0_(%"class.v8::internal::Zone"* %9, %"class.v8::internal::Zone"** nonnull dereferenceable(8) %2, %"class.v8::internal::ZoneList.1145"** nonnull dereferenceable(8) %3, %"class.v8::base::Flags"* dereferenceable(4) %16) #13
  %18 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %17, i64 0, i32 0
  call void @_ZN2v88internal13RegExpBuilder9FlushTextEv(%"class.v8::internal::RegExpBuilder"* %0) #13
  %19 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 5
  %20 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %8, align 8
  call void @_ZN2v88internal16BufferedZoneListINS0_10RegExpTreeELi2EE3AddEPS2_PNS0_4ZoneE(%"class.v8::internal::BufferedZoneList"* %19, %"class.v8::internal::RegExpTree"* %18, %"class.v8::internal::Zone"* %20) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #13
  br label %21

21:                                               ; preds = %1, %7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal13RegExpBuilder17AddTrailSurrogateEt(%"class.v8::internal::RegExpBuilder"*, i16 zeroext) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.v8::internal::Zone"*, align 8
  %4 = alloca %"class.v8::internal::ZoneList.1145"*, align 8
  %5 = alloca %"class.icu_69::UnicodeSet", align 8
  %6 = alloca %"class.v8::internal::Zone"*, align 8
  %7 = alloca %"class.v8::internal::ZoneList.1145"*, align 8
  %8 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 4
  %9 = load i16, i16* %8, align 8
  %10 = icmp eq i16 %9, 0
  br i1 %10, label %99, label %11

11:                                               ; preds = %2
  store i16 0, i16* %8, align 8
  %12 = zext i16 %9 to i32
  %13 = shl nuw nsw i32 %12, 10
  %14 = and i32 %13, 1047552
  %15 = add nuw nsw i32 %14, 65536
  %16 = and i16 %1, 1023
  %17 = zext i16 %16 to i32
  %18 = or i32 %15, %17
  %19 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 2, i32 0
  %20 = load i32, i32* %19, align 4
  %21 = and i32 %20, 18
  %22 = icmp eq i32 %21, 18
  br i1 %22, label %23, label %43

23:                                               ; preds = %11
  %24 = bitcast %"class.icu_69::UnicodeSet"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 200, i8* nonnull %24) #13
  call void @_ZN6icu_6910UnicodeSetC1Eii(%"class.icu_69::UnicodeSet"* nonnull %5, i32 %18, i32 %18) #13
  %25 = call dereferenceable(200) %"class.icu_69::UnicodeSet"* @_ZN6icu_6910UnicodeSet9closeOverEi(%"class.icu_69::UnicodeSet"* nonnull %5, i32 2) #13
  %26 = call dereferenceable(200) %"class.icu_69::UnicodeSet"* @_ZN6icu_6910UnicodeSet16removeAllStringsEv(%"class.icu_69::UnicodeSet"* nonnull %5) #13
  %27 = call i32 @_ZNK6icu_6910UnicodeSet4sizeEv(%"class.icu_69::UnicodeSet"* nonnull %5) #13
  %28 = icmp sgt i32 %27, 1
  call void @_ZN6icu_6910UnicodeSetD1Ev(%"class.icu_69::UnicodeSet"* nonnull %5) #13
  call void @llvm.lifetime.end.p0i8(i64 200, i8* nonnull %24) #13
  br i1 %28, label %29, label %43

29:                                               ; preds = %23
  %30 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 0
  %31 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %30, align 8
  %32 = bitcast %"class.v8::internal::Zone"** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %32) #13
  store %"class.v8::internal::Zone"* %31, %"class.v8::internal::Zone"** %3, align 8
  %33 = bitcast %"class.v8::internal::ZoneList.1145"** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #13
  %34 = zext i32 %18 to i64
  %35 = shl nuw nsw i64 %34, 32
  %36 = or i64 %35, %34
  %37 = call %"class.v8::internal::ZoneList.1145"* @_ZN2v88internal14CharacterRange4ListEPNS0_4ZoneES1_(%"class.v8::internal::Zone"* %31, i64 %36) #13
  store %"class.v8::internal::ZoneList.1145"* %37, %"class.v8::internal::ZoneList.1145"** %4, align 8
  %38 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 2
  %39 = call %"class.v8::internal::RegExpCharacterClass"* @_ZN2v88internal4Zone3NewINS0_20RegExpCharacterClassEJPS1_PNS0_8ZoneListINS0_14CharacterRangeEEERNS_4base5FlagsINS0_8JSRegExp4FlagEiEEEEEPT_DpOT0_(%"class.v8::internal::Zone"* %31, %"class.v8::internal::Zone"** nonnull dereferenceable(8) %3, %"class.v8::internal::ZoneList.1145"** nonnull dereferenceable(8) %4, %"class.v8::base::Flags"* dereferenceable(4) %38) #13
  %40 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %39, i64 0, i32 0
  call void @_ZN2v88internal13RegExpBuilder9FlushTextEv(%"class.v8::internal::RegExpBuilder"* %0) #13
  %41 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 5
  %42 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %30, align 8
  call void @_ZN2v88internal16BufferedZoneListINS0_10RegExpTreeELi2EE3AddEPS2_PNS0_4ZoneE(%"class.v8::internal::BufferedZoneList"* %41, %"class.v8::internal::RegExpTree"* %40, %"class.v8::internal::Zone"* %42) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %32) #13
  br label %115

43:                                               ; preds = %11, %23
  %44 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 0
  %45 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %44, align 8
  %46 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %45, i64 0, i32 2
  %47 = load i64, i64* %46, align 8
  %48 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %45, i64 0, i32 3
  %49 = load i64, i64* %48, align 8
  %50 = sub i64 %49, %47
  %51 = icmp ult i64 %50, 8
  br i1 %51, label %52, label %54, !prof !3

52:                                               ; preds = %43
  %53 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %45, i64 8) #13
  br label %56

54:                                               ; preds = %43
  %55 = add i64 %47, 8
  store i64 %55, i64* %46, align 8
  br label %56

56:                                               ; preds = %52, %54
  %57 = phi i64 [ %53, %52 ], [ %47, %54 ]
  %58 = inttoptr i64 %57 to i16*
  store i16 %9, i16* %58, align 2
  %59 = getelementptr inbounds i16, i16* %58, i64 1
  store i16 %1, i16* %59, align 2
  %60 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %44, align 8
  %61 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %60, i64 0, i32 2
  %62 = load i64, i64* %61, align 8
  %63 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %60, i64 0, i32 3
  %64 = load i64, i64* %63, align 8
  %65 = sub i64 %64, %62
  %66 = icmp ult i64 %65, 32
  br i1 %66, label %67, label %69, !prof !3

67:                                               ; preds = %56
  %68 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %60, i64 32) #13
  br label %71

69:                                               ; preds = %56
  %70 = add i64 %62, 32
  store i64 %70, i64* %61, align 8
  br label %71

71:                                               ; preds = %67, %69
  %72 = phi i64 [ %68, %67 ], [ %62, %69 ]
  %73 = inttoptr i64 %72 to %"class.v8::internal::RegExpAtom"*
  %74 = load i32, i32* %19, align 4
  %75 = getelementptr inbounds %"class.v8::internal::RegExpAtom", %"class.v8::internal::RegExpAtom"* %73, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [37 x i8*] }, { [37 x i8*] }* @_ZTVN2v88internal10RegExpAtomE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %75, align 8
  %76 = getelementptr inbounds %"class.v8::internal::RegExpAtom", %"class.v8::internal::RegExpAtom"* %73, i64 0, i32 1, i32 0
  %77 = bitcast i16** %76 to i64*
  store i64 %57, i64* %77, align 8
  %78 = getelementptr inbounds %"class.v8::internal::RegExpAtom", %"class.v8::internal::RegExpAtom"* %73, i64 0, i32 1, i32 1
  store i64 2, i64* %78, align 8
  %79 = getelementptr inbounds %"class.v8::internal::RegExpAtom", %"class.v8::internal::RegExpAtom"* %73, i64 0, i32 2, i32 0
  store i32 %74, i32* %79, align 8
  %80 = getelementptr inbounds %"class.v8::internal::RegExpAtom", %"class.v8::internal::RegExpAtom"* %73, i64 0, i32 0
  %81 = inttoptr i64 %72 to i1 (%"class.v8::internal::RegExpTree"*)***
  %82 = load i1 (%"class.v8::internal::RegExpTree"*)**, i1 (%"class.v8::internal::RegExpTree"*)*** %81, align 8
  %83 = getelementptr inbounds i1 (%"class.v8::internal::RegExpTree"*)*, i1 (%"class.v8::internal::RegExpTree"*)** %82, i64 32
  %84 = load i1 (%"class.v8::internal::RegExpTree"*)*, i1 (%"class.v8::internal::RegExpTree"*)** %83, align 8
  %85 = call zeroext i1 %84(%"class.v8::internal::RegExpTree"* %80) #13
  br i1 %85, label %86, label %88

86:                                               ; preds = %71
  %87 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 1
  store i8 1, i8* %87, align 8
  br label %115

88:                                               ; preds = %71
  %89 = load i1 (%"class.v8::internal::RegExpTree"*)**, i1 (%"class.v8::internal::RegExpTree"*)*** %81, align 8
  %90 = getelementptr inbounds i1 (%"class.v8::internal::RegExpTree"*)*, i1 (%"class.v8::internal::RegExpTree"*)** %89, i64 4
  %91 = load i1 (%"class.v8::internal::RegExpTree"*)*, i1 (%"class.v8::internal::RegExpTree"*)** %90, align 8
  %92 = call zeroext i1 %91(%"class.v8::internal::RegExpTree"* %80) #13
  br i1 %92, label %93, label %96

93:                                               ; preds = %88
  call void @_ZN2v88internal13RegExpBuilder15FlushCharactersEv(%"class.v8::internal::RegExpBuilder"* %0) #13
  %94 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 6
  %95 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %44, align 8
  call void @_ZN2v88internal16BufferedZoneListINS0_10RegExpTreeELi2EE3AddEPS2_PNS0_4ZoneE(%"class.v8::internal::BufferedZoneList"* %94, %"class.v8::internal::RegExpTree"* %80, %"class.v8::internal::Zone"* %95) #13
  br label %115

96:                                               ; preds = %88
  call void @_ZN2v88internal13RegExpBuilder9FlushTextEv(%"class.v8::internal::RegExpBuilder"* %0) #13
  %97 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 5
  %98 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %44, align 8
  call void @_ZN2v88internal16BufferedZoneListINS0_10RegExpTreeELi2EE3AddEPS2_PNS0_4ZoneE(%"class.v8::internal::BufferedZoneList"* %97, %"class.v8::internal::RegExpTree"* %80, %"class.v8::internal::Zone"* %98) #13
  br label %115

99:                                               ; preds = %2
  store i16 %1, i16* %8, align 8
  %100 = icmp eq i16 %1, 0
  br i1 %100, label %115, label %101

101:                                              ; preds = %99
  store i16 0, i16* %8, align 8
  %102 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 0
  %103 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %102, align 8
  %104 = bitcast %"class.v8::internal::Zone"** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %104) #13
  store %"class.v8::internal::Zone"* %103, %"class.v8::internal::Zone"** %6, align 8
  %105 = bitcast %"class.v8::internal::ZoneList.1145"** %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %105) #13
  %106 = zext i16 %1 to i64
  %107 = shl nuw nsw i64 %106, 32
  %108 = or i64 %107, %106
  %109 = tail call %"class.v8::internal::ZoneList.1145"* @_ZN2v88internal14CharacterRange4ListEPNS0_4ZoneES1_(%"class.v8::internal::Zone"* %103, i64 %108) #13
  store %"class.v8::internal::ZoneList.1145"* %109, %"class.v8::internal::ZoneList.1145"** %7, align 8
  %110 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 2
  %111 = call %"class.v8::internal::RegExpCharacterClass"* @_ZN2v88internal4Zone3NewINS0_20RegExpCharacterClassEJPS1_PNS0_8ZoneListINS0_14CharacterRangeEEERNS_4base5FlagsINS0_8JSRegExp4FlagEiEEEEEPT_DpOT0_(%"class.v8::internal::Zone"* %103, %"class.v8::internal::Zone"** nonnull dereferenceable(8) %6, %"class.v8::internal::ZoneList.1145"** nonnull dereferenceable(8) %7, %"class.v8::base::Flags"* dereferenceable(4) %110) #13
  %112 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %111, i64 0, i32 0
  call void @_ZN2v88internal13RegExpBuilder9FlushTextEv(%"class.v8::internal::RegExpBuilder"* %0) #13
  %113 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 5
  %114 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %102, align 8
  call void @_ZN2v88internal16BufferedZoneListINS0_10RegExpTreeELi2EE3AddEPS2_PNS0_4ZoneE(%"class.v8::internal::BufferedZoneList"* %113, %"class.v8::internal::RegExpTree"* %112, %"class.v8::internal::Zone"* %114) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %105) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %104) #13
  br label %115

115:                                              ; preds = %101, %99, %29, %86, %93, %96
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2v88internal13RegExpBuilder28NeedsDesugaringForIgnoreCaseEj(%"class.v8::internal::RegExpBuilder"* nocapture readonly, i32) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.icu_69::UnicodeSet", align 8
  %4 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 2, i32 0
  %5 = load i32, i32* %4, align 4
  %6 = and i32 %5, 18
  %7 = icmp eq i32 %6, 18
  br i1 %7, label %8, label %14

8:                                                ; preds = %2
  %9 = bitcast %"class.icu_69::UnicodeSet"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 200, i8* nonnull %9) #13
  call void @_ZN6icu_6910UnicodeSetC1Eii(%"class.icu_69::UnicodeSet"* nonnull %3, i32 %1, i32 %1) #13
  %10 = call dereferenceable(200) %"class.icu_69::UnicodeSet"* @_ZN6icu_6910UnicodeSet9closeOverEi(%"class.icu_69::UnicodeSet"* nonnull %3, i32 2) #13
  %11 = call dereferenceable(200) %"class.icu_69::UnicodeSet"* @_ZN6icu_6910UnicodeSet16removeAllStringsEv(%"class.icu_69::UnicodeSet"* nonnull %3) #13
  %12 = call i32 @_ZNK6icu_6910UnicodeSet4sizeEv(%"class.icu_69::UnicodeSet"* nonnull %3) #13
  %13 = icmp sgt i32 %12, 1
  call void @_ZN6icu_6910UnicodeSetD1Ev(%"class.icu_69::UnicodeSet"* nonnull %3) #13
  call void @llvm.lifetime.end.p0i8(i64 200, i8* nonnull %9) #13
  br label %14

14:                                               ; preds = %2, %8
  %15 = phi i1 [ %13, %8 ], [ false, %2 ]
  ret i1 %15
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal13RegExpBuilder30AddCharacterClassForDesugaringEj(%"class.v8::internal::RegExpBuilder"*, i32) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.v8::internal::Zone"*, align 8
  %4 = alloca %"class.v8::internal::ZoneList.1145"*, align 8
  %5 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 0
  %6 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %5, align 8
  %7 = bitcast %"class.v8::internal::Zone"** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #13
  store %"class.v8::internal::Zone"* %6, %"class.v8::internal::Zone"** %3, align 8
  %8 = bitcast %"class.v8::internal::ZoneList.1145"** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #13
  %9 = zext i32 %1 to i64
  %10 = shl nuw i64 %9, 32
  %11 = or i64 %10, %9
  %12 = tail call %"class.v8::internal::ZoneList.1145"* @_ZN2v88internal14CharacterRange4ListEPNS0_4ZoneES1_(%"class.v8::internal::Zone"* %6, i64 %11)
  store %"class.v8::internal::ZoneList.1145"* %12, %"class.v8::internal::ZoneList.1145"** %4, align 8
  %13 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 2
  %14 = call %"class.v8::internal::RegExpCharacterClass"* @_ZN2v88internal4Zone3NewINS0_20RegExpCharacterClassEJPS1_PNS0_8ZoneListINS0_14CharacterRangeEEERNS_4base5FlagsINS0_8JSRegExp4FlagEiEEEEEPT_DpOT0_(%"class.v8::internal::Zone"* %6, %"class.v8::internal::Zone"** nonnull dereferenceable(8) %3, %"class.v8::internal::ZoneList.1145"** nonnull dereferenceable(8) %4, %"class.v8::base::Flags"* dereferenceable(4) %13)
  %15 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %14, i64 0, i32 0
  call void @_ZN2v88internal13RegExpBuilder9FlushTextEv(%"class.v8::internal::RegExpBuilder"* %0) #13
  %16 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 5
  %17 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %5, align 8
  call void @_ZN2v88internal16BufferedZoneListINS0_10RegExpTreeELi2EE3AddEPS2_PNS0_4ZoneE(%"class.v8::internal::BufferedZoneList"* %16, %"class.v8::internal::RegExpTree"* %15, %"class.v8::internal::Zone"* %17) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal13RegExpBuilder15FlushCharactersEv(%"class.v8::internal::RegExpBuilder"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.v8::internal::Zone"*, align 8
  %3 = alloca %"class.v8::internal::ZoneList.1145"*, align 8
  %4 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 4
  %5 = load i16, i16* %4, align 8
  %6 = icmp eq i16 %5, 0
  br i1 %6, label %21, label %7

7:                                                ; preds = %1
  store i16 0, i16* %4, align 8
  %8 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 0
  %9 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %8, align 8
  %10 = bitcast %"class.v8::internal::Zone"** %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10) #13
  store %"class.v8::internal::Zone"* %9, %"class.v8::internal::Zone"** %2, align 8
  %11 = bitcast %"class.v8::internal::ZoneList.1145"** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11) #13
  %12 = zext i16 %5 to i64
  %13 = shl nuw nsw i64 %12, 32
  %14 = or i64 %13, %12
  %15 = tail call %"class.v8::internal::ZoneList.1145"* @_ZN2v88internal14CharacterRange4ListEPNS0_4ZoneES1_(%"class.v8::internal::Zone"* %9, i64 %14) #13
  store %"class.v8::internal::ZoneList.1145"* %15, %"class.v8::internal::ZoneList.1145"** %3, align 8
  %16 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 2
  %17 = call %"class.v8::internal::RegExpCharacterClass"* @_ZN2v88internal4Zone3NewINS0_20RegExpCharacterClassEJPS1_PNS0_8ZoneListINS0_14CharacterRangeEEERNS_4base5FlagsINS0_8JSRegExp4FlagEiEEEEEPT_DpOT0_(%"class.v8::internal::Zone"* %9, %"class.v8::internal::Zone"** nonnull dereferenceable(8) %2, %"class.v8::internal::ZoneList.1145"** nonnull dereferenceable(8) %3, %"class.v8::base::Flags"* dereferenceable(4) %16) #13
  %18 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %17, i64 0, i32 0
  call void @_ZN2v88internal13RegExpBuilder9FlushTextEv(%"class.v8::internal::RegExpBuilder"* %0) #13
  %19 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 5
  %20 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %8, align 8
  call void @_ZN2v88internal16BufferedZoneListINS0_10RegExpTreeELi2EE3AddEPS2_PNS0_4ZoneE(%"class.v8::internal::BufferedZoneList"* %19, %"class.v8::internal::RegExpTree"* %18, %"class.v8::internal::Zone"* %20) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #13
  br label %21

21:                                               ; preds = %1, %7
  %22 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 1
  store i8 0, i8* %22, align 8
  %23 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 3
  %24 = load %"class.v8::internal::ZoneList.1143"*, %"class.v8::internal::ZoneList.1143"** %23, align 8
  %25 = icmp eq %"class.v8::internal::ZoneList.1143"* %24, null
  br i1 %25, label %57, label %26

26:                                               ; preds = %21
  %27 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 0
  %28 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %27, align 8
  %29 = bitcast %"class.v8::internal::ZoneList.1143"* %24 to i64*
  %30 = load i64, i64* %29, align 8
  %31 = getelementptr inbounds %"class.v8::internal::ZoneList.1143", %"class.v8::internal::ZoneList.1143"* %24, i64 0, i32 2
  %32 = load i32, i32* %31, align 4
  %33 = sext i32 %32 to i64
  %34 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %28, i64 0, i32 2
  %35 = load i64, i64* %34, align 8
  %36 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %28, i64 0, i32 3
  %37 = load i64, i64* %36, align 8
  %38 = sub i64 %37, %35
  %39 = icmp ult i64 %38, 32
  br i1 %39, label %40, label %42, !prof !3

40:                                               ; preds = %26
  %41 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %28, i64 32) #13
  br label %44

42:                                               ; preds = %26
  %43 = add i64 %35, 32
  store i64 %43, i64* %34, align 8
  br label %44

44:                                               ; preds = %40, %42
  %45 = phi i64 [ %41, %40 ], [ %35, %42 ]
  %46 = inttoptr i64 %45 to %"class.v8::internal::RegExpAtom"*
  %47 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 2, i32 0
  %48 = load i32, i32* %47, align 4
  %49 = getelementptr inbounds %"class.v8::internal::RegExpAtom", %"class.v8::internal::RegExpAtom"* %46, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [37 x i8*] }, { [37 x i8*] }* @_ZTVN2v88internal10RegExpAtomE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %49, align 8
  %50 = getelementptr inbounds %"class.v8::internal::RegExpAtom", %"class.v8::internal::RegExpAtom"* %46, i64 0, i32 1, i32 0
  %51 = bitcast i16** %50 to i64*
  store i64 %30, i64* %51, align 8
  %52 = getelementptr inbounds %"class.v8::internal::RegExpAtom", %"class.v8::internal::RegExpAtom"* %46, i64 0, i32 1, i32 1
  store i64 %33, i64* %52, align 8
  %53 = getelementptr inbounds %"class.v8::internal::RegExpAtom", %"class.v8::internal::RegExpAtom"* %46, i64 0, i32 2, i32 0
  store i32 %48, i32* %53, align 8
  %54 = getelementptr inbounds %"class.v8::internal::RegExpAtom", %"class.v8::internal::RegExpAtom"* %46, i64 0, i32 0
  store %"class.v8::internal::ZoneList.1143"* null, %"class.v8::internal::ZoneList.1143"** %23, align 8
  %55 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 6
  %56 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %27, align 8
  call void @_ZN2v88internal16BufferedZoneListINS0_10RegExpTreeELi2EE3AddEPS2_PNS0_4ZoneE(%"class.v8::internal::BufferedZoneList"* %55, %"class.v8::internal::RegExpTree"* %54, %"class.v8::internal::Zone"* %56)
  br label %57

57:                                               ; preds = %21, %44
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal16BufferedZoneListINS0_10RegExpTreeELi2EE3AddEPS2_PNS0_4ZoneE(%"class.v8::internal::BufferedZoneList"*, %"class.v8::internal::RegExpTree"*, %"class.v8::internal::Zone"*) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::BufferedZoneList", %"class.v8::internal::BufferedZoneList"* %0, i64 0, i32 1
  %5 = load %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %4, align 8
  %6 = icmp eq %"class.v8::internal::RegExpTree"* %5, null
  br i1 %6, label %96, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.v8::internal::BufferedZoneList", %"class.v8::internal::BufferedZoneList"* %0, i64 0, i32 0
  %9 = load %"class.v8::internal::ZoneList.1144"*, %"class.v8::internal::ZoneList.1144"** %8, align 8
  %10 = icmp eq %"class.v8::internal::ZoneList.1144"* %9, null
  br i1 %10, label %11, label %39

11:                                               ; preds = %7
  %12 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2, i64 0, i32 2
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2, i64 0, i32 3
  %15 = load i64, i64* %14, align 8
  %16 = sub i64 %15, %13
  %17 = icmp ult i64 %16, 16
  br i1 %17, label %18, label %20, !prof !3

18:                                               ; preds = %11
  %19 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %2, i64 16) #13
  br label %22

20:                                               ; preds = %11
  %21 = add i64 %13, 16
  store i64 %21, i64* %12, align 8
  br label %22

22:                                               ; preds = %18, %20
  %23 = phi i64 [ %19, %18 ], [ %13, %20 ]
  %24 = inttoptr i64 %23 to %"class.v8::internal::ZoneList.1144"*
  %25 = getelementptr inbounds %"class.v8::internal::ZoneList.1144", %"class.v8::internal::ZoneList.1144"* %24, i64 0, i32 0
  store %"class.v8::internal::RegExpTree"** null, %"class.v8::internal::RegExpTree"*** %25, align 8
  %26 = getelementptr inbounds %"class.v8::internal::ZoneList.1144", %"class.v8::internal::ZoneList.1144"* %24, i64 0, i32 1
  store i32 2, i32* %26, align 8
  %27 = getelementptr inbounds %"class.v8::internal::ZoneList.1144", %"class.v8::internal::ZoneList.1144"* %24, i64 0, i32 2
  store i32 0, i32* %27, align 4
  %28 = load i64, i64* %12, align 8
  %29 = load i64, i64* %14, align 8
  %30 = sub i64 %29, %28
  %31 = icmp ult i64 %30, 16
  br i1 %31, label %32, label %34, !prof !3

32:                                               ; preds = %22
  %33 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %2, i64 16) #13
  br label %36

34:                                               ; preds = %22
  %35 = add i64 %28, 16
  store i64 %35, i64* %12, align 8
  br label %36

36:                                               ; preds = %32, %34
  %37 = phi i64 [ %33, %32 ], [ %28, %34 ]
  %38 = inttoptr i64 %37 to %"class.v8::internal::RegExpTree"**
  store %"class.v8::internal::RegExpTree"** %38, %"class.v8::internal::RegExpTree"*** %25, align 8
  store %"class.v8::internal::ZoneList.1144"* %24, %"class.v8::internal::ZoneList.1144"** %8, align 8
  br label %39

39:                                               ; preds = %36, %7
  %40 = phi %"class.v8::internal::ZoneList.1144"* [ %24, %36 ], [ %9, %7 ]
  %41 = getelementptr inbounds %"class.v8::internal::ZoneList.1144", %"class.v8::internal::ZoneList.1144"* %40, i64 0, i32 2
  %42 = load i32, i32* %41, align 4
  %43 = getelementptr inbounds %"class.v8::internal::ZoneList.1144", %"class.v8::internal::ZoneList.1144"* %40, i64 0, i32 1
  %44 = load i32, i32* %43, align 8
  %45 = icmp slt i32 %42, %44
  br i1 %45, label %46, label %51

46:                                               ; preds = %39
  %47 = bitcast %"class.v8::internal::RegExpTree"** %4 to i64*
  %48 = load i64, i64* %47, align 8
  %49 = getelementptr inbounds %"class.v8::internal::ZoneList.1144", %"class.v8::internal::ZoneList.1144"* %40, i64 0, i32 0
  %50 = load %"class.v8::internal::RegExpTree"**, %"class.v8::internal::RegExpTree"*** %49, align 8
  br label %88

51:                                               ; preds = %39
  %52 = shl nsw i32 %44, 1
  %53 = or i32 %52, 1
  %54 = bitcast %"class.v8::internal::RegExpTree"** %4 to i64*
  %55 = load i64, i64* %54, align 8
  %56 = sext i32 %53 to i64
  %57 = shl nsw i64 %56, 3
  %58 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2, i64 0, i32 2
  %59 = load i64, i64* %58, align 8
  %60 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2, i64 0, i32 3
  %61 = load i64, i64* %60, align 8
  %62 = sub i64 %61, %59
  %63 = icmp ugt i64 %57, %62
  br i1 %63, label %64, label %66, !prof !3

64:                                               ; preds = %51
  %65 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %2, i64 %57) #13
  br label %68

66:                                               ; preds = %51
  %67 = add i64 %59, %57
  store i64 %67, i64* %58, align 8
  br label %68

68:                                               ; preds = %66, %64
  %69 = phi i64 [ %65, %64 ], [ %59, %66 ]
  %70 = inttoptr i64 %69 to %"class.v8::internal::RegExpTree"**
  %71 = load i32, i32* %41, align 4
  %72 = icmp sgt i32 %71, 0
  br i1 %72, label %73, label %85

73:                                               ; preds = %68
  %74 = inttoptr i64 %69 to i8*
  %75 = bitcast %"class.v8::internal::ZoneList.1144"* %40 to i8**
  %76 = load i8*, i8** %75, align 8
  %77 = sext i32 %71 to i64
  %78 = shl nsw i64 %77, 3
  switch i64 %78, label %84 [
    i64 16, label %83
    i64 8, label %79
  ]

79:                                               ; preds = %73
  %80 = bitcast i8* %76 to i64*
  %81 = inttoptr i64 %69 to i64*
  %82 = load i64, i64* %80, align 1
  store i64 %82, i64* %81, align 1
  br label %85

83:                                               ; preds = %73
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %74, i8* align 1 %76, i64 16, i1 false) #13
  br label %85

84:                                               ; preds = %73
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %74, i8* align 1 %76, i64 %78, i1 false) #13
  br label %85

85:                                               ; preds = %84, %83, %79, %68
  %86 = getelementptr inbounds %"class.v8::internal::ZoneList.1144", %"class.v8::internal::ZoneList.1144"* %40, i64 0, i32 0
  store %"class.v8::internal::RegExpTree"** %70, %"class.v8::internal::RegExpTree"*** %86, align 8
  store i32 %53, i32* %43, align 8
  %87 = load i32, i32* %41, align 4
  br label %88

88:                                               ; preds = %46, %85
  %89 = phi i32 [ %87, %85 ], [ %42, %46 ]
  %90 = phi %"class.v8::internal::RegExpTree"** [ %70, %85 ], [ %50, %46 ]
  %91 = phi i64 [ %55, %85 ], [ %48, %46 ]
  %92 = add nsw i32 %89, 1
  store i32 %92, i32* %41, align 4
  %93 = sext i32 %89 to i64
  %94 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %90, i64 %93
  %95 = bitcast %"class.v8::internal::RegExpTree"** %94 to i64*
  store i64 %91, i64* %95, align 8
  br label %96

96:                                               ; preds = %88, %3
  store %"class.v8::internal::RegExpTree"* %1, %"class.v8::internal::RegExpTree"** %4, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2v88internal13RegExpBuilder25NeedsDesugaringForUnicodeEPNS0_20RegExpCharacterClassE(%"class.v8::internal::RegExpBuilder"* nocapture readonly, %"class.v8::internal::RegExpCharacterClass"*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 2, i32 0
  %4 = load i32, i32* %3, align 4
  %5 = and i32 %4, 16
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %34, label %7

7:                                                ; preds = %2
  %8 = and i32 %4, 2
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %34

10:                                               ; preds = %7
  %11 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 0
  %12 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %11, align 8
  %13 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %1, i64 0, i32 1
  %14 = tail call %"class.v8::internal::ZoneList.1145"* @_ZN2v88internal12CharacterSet6rangesEPNS0_4ZoneE(%"class.v8::internal::CharacterSet"* %13, %"class.v8::internal::Zone"* %12) #13
  tail call void @_ZN2v88internal14CharacterRange12CanonicalizeEPNS0_8ZoneListIS1_EE(%"class.v8::internal::ZoneList.1145"* %14) #13
  %15 = getelementptr inbounds %"class.v8::internal::ZoneList.1145", %"class.v8::internal::ZoneList.1145"* %14, i64 0, i32 2
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %"class.v8::internal::ZoneList.1145", %"class.v8::internal::ZoneList.1145"* %14, i64 0, i32 0
  %18 = sext i32 %16 to i64
  br label %19

19:                                               ; preds = %28, %10
  %20 = phi i64 [ %21, %28 ], [ %18, %10 ]
  %21 = add nsw i64 %20, -1
  %22 = icmp sgt i64 %20, 0
  br i1 %22, label %23, label %34

23:                                               ; preds = %19
  %24 = load %"class.v8::internal::CharacterRange"*, %"class.v8::internal::CharacterRange"** %17, align 8
  %25 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %24, i64 %21, i32 1
  %26 = load i32, i32* %25, align 4
  %27 = icmp ugt i32 %26, 65535
  br i1 %27, label %34, label %28

28:                                               ; preds = %23
  %29 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %24, i64 %21, i32 0
  %30 = load i32, i32* %29, align 4
  %31 = icmp ult i32 %30, 57344
  %32 = icmp ugt i32 %26, 55295
  %33 = and i1 %32, %31
  br i1 %33, label %34, label %19

34:                                               ; preds = %28, %23, %19, %7, %2
  %35 = phi i1 [ false, %2 ], [ true, %7 ], [ true, %28 ], [ false, %19 ], [ true, %23 ]
  ret i1 %35
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal13RegExpBuilder7AddTermEPNS0_10RegExpTreeE(%"class.v8::internal::RegExpBuilder"*, %"class.v8::internal::RegExpTree"*) local_unnamed_addr #0 align 2 {
  tail call void @_ZN2v88internal13RegExpBuilder9FlushTextEv(%"class.v8::internal::RegExpBuilder"* %0)
  %3 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 5
  %4 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 0
  %5 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %4, align 8
  tail call void @_ZN2v88internal16BufferedZoneListINS0_10RegExpTreeELi2EE3AddEPS2_PNS0_4ZoneE(%"class.v8::internal::BufferedZoneList"* %3, %"class.v8::internal::RegExpTree"* %1, %"class.v8::internal::Zone"* %5)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.v8::internal::RegExpCharacterClass"* @_ZN2v88internal4Zone3NewINS0_20RegExpCharacterClassEJPS1_PNS0_8ZoneListINS0_14CharacterRangeEEERNS_4base5FlagsINS0_8JSRegExp4FlagEiEEEEEPT_DpOT0_(%"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** dereferenceable(8), %"class.v8::internal::ZoneList.1145"** dereferenceable(8), %"class.v8::base::Flags"* dereferenceable(4)) local_unnamed_addr #0 comdat align 2 {
  %5 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %0, i64 0, i32 2
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %0, i64 0, i32 3
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %8, %6
  %10 = icmp ult i64 %9, 32
  br i1 %10, label %11, label %13, !prof !3

11:                                               ; preds = %4
  %12 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %0, i64 32) #13
  br label %15

13:                                               ; preds = %4
  %14 = add i64 %6, 32
  store i64 %14, i64* %5, align 8
  br label %15

15:                                               ; preds = %11, %13
  %16 = phi i64 [ %12, %11 ], [ %6, %13 ]
  %17 = inttoptr i64 %16 to %"class.v8::internal::RegExpCharacterClass"*
  %18 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %1, align 8
  %19 = load %"class.v8::internal::ZoneList.1145"*, %"class.v8::internal::ZoneList.1145"** %2, align 8
  %20 = getelementptr inbounds %"class.v8::base::Flags", %"class.v8::base::Flags"* %3, i64 0, i32 0
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %17, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [37 x i8*] }, { [37 x i8*] }* @_ZTVN2v88internal20RegExpCharacterClassE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %22, align 8
  %23 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %17, i64 0, i32 1, i32 0
  store %"class.v8::internal::ZoneList.1145"* %19, %"class.v8::internal::ZoneList.1145"** %23, align 8
  %24 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %17, i64 0, i32 1, i32 1
  store i16 0, i16* %24, align 8
  %25 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %17, i64 0, i32 2, i32 0
  store i32 %21, i32* %25, align 8
  %26 = getelementptr inbounds %"class.v8::internal::RegExpCharacterClass", %"class.v8::internal::RegExpCharacterClass"* %17, i64 0, i32 3, i32 0
  store i32 0, i32* %26, align 4
  %27 = getelementptr inbounds %"class.v8::internal::ZoneList.1145", %"class.v8::internal::ZoneList.1145"* %19, i64 0, i32 2
  %28 = load i32, i32* %27, align 4
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %30, label %80

30:                                               ; preds = %15
  %31 = getelementptr inbounds %"class.v8::internal::ZoneList.1145", %"class.v8::internal::ZoneList.1145"* %19, i64 0, i32 1
  %32 = load i32, i32* %31, align 8
  %33 = icmp sgt i32 %32, 0
  br i1 %33, label %34, label %37

34:                                               ; preds = %30
  %35 = bitcast %"class.v8::internal::ZoneList.1145"* %19 to i64**
  %36 = load i64*, i64** %35, align 8
  store i32 1, i32* %27, align 4
  br label %76

37:                                               ; preds = %30
  %38 = shl nsw i32 %32, 1
  %39 = or i32 %38, 1
  %40 = sext i32 %39 to i64
  %41 = shl nsw i64 %40, 3
  %42 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %18, i64 0, i32 2
  %43 = load i64, i64* %42, align 8
  %44 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %18, i64 0, i32 3
  %45 = load i64, i64* %44, align 8
  %46 = sub i64 %45, %43
  %47 = icmp ugt i64 %41, %46
  br i1 %47, label %48, label %50, !prof !3

48:                                               ; preds = %37
  %49 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %18, i64 %41) #13
  br label %52

50:                                               ; preds = %37
  %51 = add i64 %43, %41
  store i64 %51, i64* %42, align 8
  br label %52

52:                                               ; preds = %50, %48
  %53 = phi i64 [ %49, %48 ], [ %43, %50 ]
  %54 = inttoptr i64 %53 to %"class.v8::internal::CharacterRange"*
  %55 = load i32, i32* %27, align 4
  %56 = icmp sgt i32 %55, 0
  br i1 %56, label %57, label %69

57:                                               ; preds = %52
  %58 = inttoptr i64 %53 to i8*
  %59 = bitcast %"class.v8::internal::ZoneList.1145"* %19 to i8**
  %60 = load i8*, i8** %59, align 8
  %61 = sext i32 %55 to i64
  %62 = shl nsw i64 %61, 3
  switch i64 %62, label %68 [
    i64 16, label %67
    i64 8, label %63
  ]

63:                                               ; preds = %57
  %64 = bitcast i8* %60 to i64*
  %65 = inttoptr i64 %53 to i64*
  %66 = load i64, i64* %64, align 1
  store i64 %66, i64* %65, align 1
  br label %69

67:                                               ; preds = %57
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %58, i8* align 1 %60, i64 16, i1 false) #13
  br label %69

68:                                               ; preds = %57
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %58, i8* align 1 %60, i64 %62, i1 false) #13
  br label %69

69:                                               ; preds = %68, %67, %63, %52
  %70 = getelementptr inbounds %"class.v8::internal::ZoneList.1145", %"class.v8::internal::ZoneList.1145"* %19, i64 0, i32 0
  store %"class.v8::internal::CharacterRange"* %54, %"class.v8::internal::CharacterRange"** %70, align 8
  store i32 %39, i32* %31, align 8
  %71 = load i32, i32* %27, align 4
  %72 = add nsw i32 %71, 1
  store i32 %72, i32* %27, align 4
  %73 = sext i32 %71 to i64
  %74 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %54, i64 %73
  %75 = bitcast %"class.v8::internal::CharacterRange"* %74 to i64*
  br label %76

76:                                               ; preds = %69, %34
  %77 = phi i64* [ %75, %69 ], [ %36, %34 ]
  store i64 4785070309113856, i64* %77, align 4
  %78 = load i32, i32* %26, align 4
  %79 = xor i32 %78, 1
  store i32 %79, i32* %26, align 4
  br label %80

80:                                               ; preds = %15, %76
  ret %"class.v8::internal::RegExpCharacterClass"* %17
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden %"class.v8::internal::ZoneList.1145"* @_ZN2v88internal14CharacterRange4ListEPNS0_4ZoneES1_(%"class.v8::internal::Zone"*, i64) local_unnamed_addr #8 comdat align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %0, i64 0, i32 2
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %0, i64 0, i32 3
  %6 = load i64, i64* %5, align 8
  %7 = sub i64 %6, %4
  %8 = icmp ult i64 %7, 16
  br i1 %8, label %9, label %11, !prof !3

9:                                                ; preds = %2
  %10 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %0, i64 16) #13
  br label %13

11:                                               ; preds = %2
  %12 = add i64 %4, 16
  store i64 %12, i64* %3, align 8
  br label %13

13:                                               ; preds = %9, %11
  %14 = phi i64 [ %10, %9 ], [ %4, %11 ]
  %15 = inttoptr i64 %14 to %"class.v8::internal::ZoneList.1145"*
  %16 = getelementptr inbounds %"class.v8::internal::ZoneList.1145", %"class.v8::internal::ZoneList.1145"* %15, i64 0, i32 0
  store %"class.v8::internal::CharacterRange"* null, %"class.v8::internal::CharacterRange"** %16, align 8
  %17 = getelementptr inbounds %"class.v8::internal::ZoneList.1145", %"class.v8::internal::ZoneList.1145"* %15, i64 0, i32 1
  store i32 1, i32* %17, align 8
  %18 = getelementptr inbounds %"class.v8::internal::ZoneList.1145", %"class.v8::internal::ZoneList.1145"* %15, i64 0, i32 2
  store i32 0, i32* %18, align 4
  %19 = load i64, i64* %3, align 8
  %20 = load i64, i64* %5, align 8
  %21 = sub i64 %20, %19
  %22 = icmp ult i64 %21, 8
  br i1 %22, label %23, label %25, !prof !3

23:                                               ; preds = %13
  %24 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %0, i64 8) #13
  br label %27

25:                                               ; preds = %13
  %26 = add i64 %19, 8
  store i64 %26, i64* %3, align 8
  br label %27

27:                                               ; preds = %23, %25
  %28 = phi i64 [ %24, %23 ], [ %19, %25 ]
  %29 = inttoptr i64 %28 to %"class.v8::internal::CharacterRange"*
  store %"class.v8::internal::CharacterRange"* %29, %"class.v8::internal::CharacterRange"** %16, align 8
  %30 = load i32, i32* %18, align 4
  %31 = load i32, i32* %17, align 8
  %32 = icmp slt i32 %30, %31
  br i1 %32, label %65, label %33

33:                                               ; preds = %27
  %34 = shl nsw i32 %31, 1
  %35 = or i32 %34, 1
  %36 = sext i32 %35 to i64
  %37 = shl nsw i64 %36, 3
  %38 = load i64, i64* %3, align 8
  %39 = load i64, i64* %5, align 8
  %40 = sub i64 %39, %38
  %41 = icmp ugt i64 %37, %40
  br i1 %41, label %42, label %44, !prof !3

42:                                               ; preds = %33
  %43 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %0, i64 %37) #13
  br label %46

44:                                               ; preds = %33
  %45 = add i64 %38, %37
  store i64 %45, i64* %3, align 8
  br label %46

46:                                               ; preds = %44, %42
  %47 = phi i64 [ %43, %42 ], [ %38, %44 ]
  %48 = inttoptr i64 %47 to %"class.v8::internal::CharacterRange"*
  %49 = load i32, i32* %18, align 4
  %50 = icmp sgt i32 %49, 0
  br i1 %50, label %51, label %63

51:                                               ; preds = %46
  %52 = inttoptr i64 %47 to i8*
  %53 = inttoptr i64 %14 to i8**
  %54 = load i8*, i8** %53, align 8
  %55 = sext i32 %49 to i64
  %56 = shl nsw i64 %55, 3
  switch i64 %56, label %62 [
    i64 16, label %61
    i64 8, label %57
  ]

57:                                               ; preds = %51
  %58 = bitcast i8* %54 to i64*
  %59 = inttoptr i64 %47 to i64*
  %60 = load i64, i64* %58, align 1
  store i64 %60, i64* %59, align 1
  br label %63

61:                                               ; preds = %51
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %52, i8* align 1 %54, i64 16, i1 false) #13
  br label %63

62:                                               ; preds = %51
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %52, i8* align 1 %54, i64 %56, i1 false) #13
  br label %63

63:                                               ; preds = %62, %61, %57, %46
  store %"class.v8::internal::CharacterRange"* %48, %"class.v8::internal::CharacterRange"** %16, align 8
  store i32 %35, i32* %17, align 8
  %64 = load i32, i32* %18, align 4
  br label %65

65:                                               ; preds = %27, %63
  %66 = phi i32 [ %64, %63 ], [ %30, %27 ]
  %67 = phi %"class.v8::internal::CharacterRange"* [ %48, %63 ], [ %29, %27 ]
  %68 = add nsw i32 %66, 1
  store i32 %68, i32* %18, align 4
  %69 = sext i32 %66 to i64
  %70 = getelementptr inbounds %"class.v8::internal::CharacterRange", %"class.v8::internal::CharacterRange"* %67, i64 %69
  %71 = bitcast %"class.v8::internal::CharacterRange"* %70 to i64*
  store i64 %1, i64* %71, align 4
  ret %"class.v8::internal::ZoneList.1145"* %15
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal13RegExpBuilder10FlushTermsEv(%"class.v8::internal::RegExpBuilder"*) local_unnamed_addr #0 align 2 {
  tail call void @_ZN2v88internal13RegExpBuilder9FlushTextEv(%"class.v8::internal::RegExpBuilder"* %0)
  %2 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 5
  %3 = getelementptr inbounds %"class.v8::internal::BufferedZoneList", %"class.v8::internal::BufferedZoneList"* %2, i64 0, i32 0
  %4 = load %"class.v8::internal::ZoneList.1144"*, %"class.v8::internal::ZoneList.1144"** %3, align 8
  %5 = icmp eq %"class.v8::internal::ZoneList.1144"* %4, null
  br i1 %5, label %9, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.v8::internal::ZoneList.1144", %"class.v8::internal::ZoneList.1144"* %4, i64 0, i32 2
  %8 = load i32, i32* %7, align 4
  br label %9

9:                                                ; preds = %1, %6
  %10 = phi i32 [ %8, %6 ], [ 0, %1 ]
  %11 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 5, i32 1
  %12 = load %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %11, align 8
  %13 = icmp ne %"class.v8::internal::RegExpTree"* %12, null
  %14 = zext i1 %13 to i32
  %15 = add nsw i32 %10, %14
  switch i32 %15, label %35 [
    i32 0, label %16
    i32 1, label %53
  ]

16:                                               ; preds = %9
  %17 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 0
  %18 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %17, align 8
  %19 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %18, i64 0, i32 2
  %20 = load i64, i64* %19, align 8
  %21 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %18, i64 0, i32 3
  %22 = load i64, i64* %21, align 8
  %23 = sub i64 %22, %20
  %24 = icmp ult i64 %23, 8
  br i1 %24, label %25, label %27, !prof !3

25:                                               ; preds = %16
  %26 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %18, i64 8) #13
  br label %29

27:                                               ; preds = %16
  %28 = add i64 %20, 8
  store i64 %28, i64* %19, align 8
  br label %29

29:                                               ; preds = %25, %27
  %30 = phi i64 [ %26, %25 ], [ %20, %27 ]
  %31 = inttoptr i64 %30 to %"class.v8::internal::RegExpEmpty"*
  %32 = inttoptr i64 %30 to i64*
  store i64 0, i64* %32, align 8
  %33 = getelementptr inbounds %"class.v8::internal::RegExpEmpty", %"class.v8::internal::RegExpEmpty"* %31, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [37 x i8*] }, { [37 x i8*] }* @_ZTVN2v88internal11RegExpEmptyE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %33, align 8
  %34 = getelementptr inbounds %"class.v8::internal::RegExpEmpty", %"class.v8::internal::RegExpEmpty"* %31, i64 0, i32 0
  br label %53

35:                                               ; preds = %9
  %36 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 0
  %37 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %36, align 8
  %38 = tail call %"class.v8::internal::ZoneList.1144"* @_ZN2v88internal16BufferedZoneListINS0_10RegExpTreeELi2EE7GetListEPNS0_4ZoneE(%"class.v8::internal::BufferedZoneList"* %2, %"class.v8::internal::Zone"* %37)
  %39 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %37, i64 0, i32 2
  %40 = load i64, i64* %39, align 8
  %41 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %37, i64 0, i32 3
  %42 = load i64, i64* %41, align 8
  %43 = sub i64 %42, %40
  %44 = icmp ult i64 %43, 24
  br i1 %44, label %45, label %47, !prof !3

45:                                               ; preds = %35
  %46 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %37, i64 24) #13
  br label %49

47:                                               ; preds = %35
  %48 = add i64 %40, 24
  store i64 %48, i64* %39, align 8
  br label %49

49:                                               ; preds = %45, %47
  %50 = phi i64 [ %46, %45 ], [ %40, %47 ]
  %51 = inttoptr i64 %50 to %"class.v8::internal::RegExpAlternative"*
  tail call void @_ZN2v88internal17RegExpAlternativeC1EPNS0_8ZoneListIPNS0_10RegExpTreeEEE(%"class.v8::internal::RegExpAlternative"* %51, %"class.v8::internal::ZoneList.1144"* %38) #13
  %52 = getelementptr inbounds %"class.v8::internal::RegExpAlternative", %"class.v8::internal::RegExpAlternative"* %51, i64 0, i32 0
  br label %53

53:                                               ; preds = %9, %49, %29
  %54 = phi %"class.v8::internal::RegExpTree"* [ %34, %29 ], [ %52, %49 ], [ %12, %9 ]
  %55 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 7
  %56 = getelementptr inbounds %"class.v8::internal::RegExpBuilder", %"class.v8::internal::RegExpBuilder"* %0, i64 0, i32 0
  %57 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %56, align 8
  tail call void @_ZN2v88internal16BufferedZoneListINS0_10RegExpTreeELi2EE3AddEPS2_PNS0_4ZoneE(%"class.v8::internal::BufferedZoneList"* %55, %"class.v8::internal::RegExpTree"* %54, %"class.v8::internal::Zone"* %57)
  %58 = bitcast %"class.v8::internal::BufferedZoneList"* %2 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %58, i8 0, i64 16, i1 false) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.v8::internal::ZoneList.1144"* @_ZN2v88internal16BufferedZoneListINS0_10RegExpTreeELi2EE7GetListEPNS0_4ZoneE(%"class.v8::internal::BufferedZoneList"*, %"class.v8::internal::Zone"*) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::BufferedZoneList", %"class.v8::internal::BufferedZoneList"* %0, i64 0, i32 0
  %4 = load %"class.v8::internal::ZoneList.1144"*, %"class.v8::internal::ZoneList.1144"** %3, align 8
  %5 = icmp eq %"class.v8::internal::ZoneList.1144"* %4, null
  br i1 %5, label %6, label %34

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1, i64 0, i32 2
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1, i64 0, i32 3
  %10 = load i64, i64* %9, align 8
  %11 = sub i64 %10, %8
  %12 = icmp ult i64 %11, 16
  br i1 %12, label %13, label %15, !prof !3

13:                                               ; preds = %6
  %14 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %1, i64 16) #13
  br label %17

15:                                               ; preds = %6
  %16 = add i64 %8, 16
  store i64 %16, i64* %7, align 8
  br label %17

17:                                               ; preds = %13, %15
  %18 = phi i64 [ %14, %13 ], [ %8, %15 ]
  %19 = inttoptr i64 %18 to %"class.v8::internal::ZoneList.1144"*
  %20 = getelementptr inbounds %"class.v8::internal::ZoneList.1144", %"class.v8::internal::ZoneList.1144"* %19, i64 0, i32 0
  store %"class.v8::internal::RegExpTree"** null, %"class.v8::internal::RegExpTree"*** %20, align 8
  %21 = getelementptr inbounds %"class.v8::internal::ZoneList.1144", %"class.v8::internal::ZoneList.1144"* %19, i64 0, i32 1
  store i32 2, i32* %21, align 8
  %22 = getelementptr inbounds %"class.v8::internal::ZoneList.1144", %"class.v8::internal::ZoneList.1144"* %19, i64 0, i32 2
  store i32 0, i32* %22, align 4
  %23 = load i64, i64* %7, align 8
  %24 = load i64, i64* %9, align 8
  %25 = sub i64 %24, %23
  %26 = icmp ult i64 %25, 16
  br i1 %26, label %27, label %29, !prof !3

27:                                               ; preds = %17
  %28 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %1, i64 16) #13
  br label %31

29:                                               ; preds = %17
  %30 = add i64 %23, 16
  store i64 %30, i64* %7, align 8
  br label %31

31:                                               ; preds = %27, %29
  %32 = phi i64 [ %28, %27 ], [ %23, %29 ]
  %33 = inttoptr i64 %32 to %"class.v8::internal::RegExpTree"**
  store %"class.v8::internal::RegExpTree"** %33, %"class.v8::internal::RegExpTree"*** %20, align 8
  store %"class.v8::internal::ZoneList.1144"* %19, %"class.v8::internal::ZoneList.1144"** %3, align 8
  br label %34

34:                                               ; preds = %31, %2
  %35 = phi %"class.v8::internal::ZoneList.1144"* [ %19, %31 ], [ %4, %2 ]
  %36 = getelementptr inbounds %"class.v8::internal::BufferedZoneList", %"class.v8::internal::BufferedZoneList"* %0, i64 0, i32 1
  %37 = load %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %36, align 8
  %38 = icmp eq %"class.v8::internal::RegExpTree"* %37, null
  %39 = ptrtoint %"class.v8::internal::RegExpTree"* %37 to i64
  br i1 %38, label %92, label %40

40:                                               ; preds = %34
  %41 = getelementptr inbounds %"class.v8::internal::ZoneList.1144", %"class.v8::internal::ZoneList.1144"* %35, i64 0, i32 2
  %42 = load i32, i32* %41, align 4
  %43 = getelementptr inbounds %"class.v8::internal::ZoneList.1144", %"class.v8::internal::ZoneList.1144"* %35, i64 0, i32 1
  %44 = load i32, i32* %43, align 8
  %45 = icmp slt i32 %42, %44
  br i1 %45, label %46, label %49

46:                                               ; preds = %40
  %47 = getelementptr inbounds %"class.v8::internal::ZoneList.1144", %"class.v8::internal::ZoneList.1144"* %35, i64 0, i32 0
  %48 = load %"class.v8::internal::RegExpTree"**, %"class.v8::internal::RegExpTree"*** %47, align 8
  br label %84

49:                                               ; preds = %40
  %50 = shl nsw i32 %44, 1
  %51 = or i32 %50, 1
  %52 = sext i32 %51 to i64
  %53 = shl nsw i64 %52, 3
  %54 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1, i64 0, i32 2
  %55 = load i64, i64* %54, align 8
  %56 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1, i64 0, i32 3
  %57 = load i64, i64* %56, align 8
  %58 = sub i64 %57, %55
  %59 = icmp ugt i64 %53, %58
  br i1 %59, label %60, label %62, !prof !3

60:                                               ; preds = %49
  %61 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %1, i64 %53) #13
  br label %64

62:                                               ; preds = %49
  %63 = add i64 %55, %53
  store i64 %63, i64* %54, align 8
  br label %64

64:                                               ; preds = %62, %60
  %65 = phi i64 [ %61, %60 ], [ %55, %62 ]
  %66 = inttoptr i64 %65 to %"class.v8::internal::RegExpTree"**
  %67 = load i32, i32* %41, align 4
  %68 = icmp sgt i32 %67, 0
  br i1 %68, label %69, label %81

69:                                               ; preds = %64
  %70 = inttoptr i64 %65 to i8*
  %71 = bitcast %"class.v8::internal::ZoneList.1144"* %35 to i8**
  %72 = load i8*, i8** %71, align 8
  %73 = sext i32 %67 to i64
  %74 = shl nsw i64 %73, 3
  switch i64 %74, label %80 [
    i64 16, label %79
    i64 8, label %75
  ]

75:                                               ; preds = %69
  %76 = bitcast i8* %72 to i64*
  %77 = inttoptr i64 %65 to i64*
  %78 = load i64, i64* %76, align 1
  store i64 %78, i64* %77, align 1
  br label %81

79:                                               ; preds = %69
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %70, i8* align 1 %72, i64 16, i1 false) #13
  br label %81

80:                                               ; preds = %69
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %70, i8* align 1 %72, i64 %74, i1 false) #13
  br label %81

81:                                               ; preds = %80, %79, %75, %64
  %82 = getelementptr inbounds %"class.v8::internal::ZoneList.1144", %"class.v8::internal::ZoneList.1144"* %35, i64 0, i32 0
  store %"class.v8::internal::RegExpTree"** %66, %"class.v8::internal::RegExpTree"*** %82, align 8
  store i32 %51, i32* %43, align 8
  %83 = load i32, i32* %41, align 4
  br label %84

84:                                               ; preds = %46, %81
  %85 = phi i32 [ %42, %46 ], [ %83, %81 ]
  %86 = phi %"class.v8::internal::RegExpTree"** [ %48, %46 ], [ %66, %81 ]
  %87 = add nsw i32 %85, 1
  store i32 %87, i32* %41, align 4
  %88 = sext i32 %85 to i64
  %89 = getelementptr inbounds %"class.v8::internal::RegExpTree"*, %"class.v8::internal::RegExpTree"** %86, i64 %88
  %90 = bitcast %"class.v8::internal::RegExpTree"** %89 to i64*
  store i64 %39, i64* %90, align 8
  store %"class.v8::internal::RegExpTree"* null, %"class.v8::internal::RegExpTree"** %36, align 8
  %91 = load %"class.v8::internal::ZoneList.1144"*, %"class.v8::internal::ZoneList.1144"** %3, align 8
  br label %92

92:                                               ; preds = %34, %84
  %93 = phi %"class.v8::internal::ZoneList.1144"* [ %35, %34 ], [ %91, %84 ]
  ret %"class.v8::internal::ZoneList.1144"* %93
}

declare void @_ZN2v88internal14CharacterRange12CanonicalizeEPNS0_8ZoneListIS1_EE(%"class.v8::internal::ZoneList.1145"*) local_unnamed_addr #6

declare void @_ZN6icu_6910UnicodeSetC1Eii(%"class.icu_69::UnicodeSet"*, i32, i32) unnamed_addr #6

declare dereferenceable(200) %"class.icu_69::UnicodeSet"* @_ZN6icu_6910UnicodeSet9closeOverEi(%"class.icu_69::UnicodeSet"*, i32) local_unnamed_addr #6

declare dereferenceable(200) %"class.icu_69::UnicodeSet"* @_ZN6icu_6910UnicodeSet16removeAllStringsEv(%"class.icu_69::UnicodeSet"*) unnamed_addr #6

declare i32 @_ZNK6icu_6910UnicodeSet4sizeEv(%"class.icu_69::UnicodeSet"*) unnamed_addr #6

; Function Attrs: nounwind
declare void @_ZN6icu_6910UnicodeSetD1Ev(%"class.icu_69::UnicodeSet"*) unnamed_addr #9

declare i64 @_ZN2v88internal23GetCurrentStackPositionEv() local_unnamed_addr #6

declare i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"*, i64) local_unnamed_addr #6

declare zeroext i1 @_ZN2v88internal21IsIdentifierStartSlowEj(i32) local_unnamed_addr #6

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #3

declare zeroext i1 @_ZN2v88internal20IsIdentifierPartSlowEj(i32) local_unnamed_addr #6

declare void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"*, i64, i64, i64) local_unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64, i64, i64) local_unnamed_addr #6

declare i32 @u_getPropertyValueEnum_69(i32, i8*) local_unnamed_addr #6

declare void @_ZN6icu_6910UnicodeSetC1Ev(%"class.icu_69::UnicodeSet"*) unnamed_addr #6

declare dereferenceable(200) %"class.icu_69::UnicodeSet"* @_ZN6icu_6910UnicodeSet21applyIntPropertyValueE9UPropertyiR10UErrorCode(%"class.icu_69::UnicodeSet"*, i32, i32, i32* dereferenceable(4)) local_unnamed_addr #6

declare signext i8 @_ZNK6icu_6910UnicodeSet7isEmptyEv(%"class.icu_69::UnicodeSet"*) unnamed_addr #6

declare dereferenceable(200) %"class.icu_69::UnicodeSet"* @_ZN6icu_6910UnicodeSet10complementEv(%"class.icu_69::UnicodeSet"*) unnamed_addr #6

declare i32 @_ZNK6icu_6910UnicodeSet13getRangeCountEv(%"class.icu_69::UnicodeSet"*) unnamed_addr #6

declare i32 @_ZNK6icu_6910UnicodeSet13getRangeStartEi(%"class.icu_69::UnicodeSet"*, i32) unnamed_addr #6

declare i32 @_ZNK6icu_6910UnicodeSet11getRangeEndEi(%"class.icu_69::UnicodeSet"*, i32) unnamed_addr #6

declare i8* @u_getPropertyValueName_69(i32, i32, i32) local_unnamed_addr #6

; Function Attrs: nofree nounwind readonly
declare i32 @strcmp(i8* nocapture, i8* nocapture) local_unnamed_addr #10

; Function Attrs: nofree nounwind readonly
declare i32 @strncmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #10

declare i8* @u_getPropertyName_69(i32, i32) local_unnamed_addr #6

declare void @_ZN2v88internal8OFStreamC2EP8_IO_FILE(%"class.v8::internal::OFStream"*, i8**, %struct._IO_FILE*) unnamed_addr #6

declare %"class.v8::base::RecursiveMutex"* @_ZN2v88internal12StdoutStream14GetStdoutMutexEv() local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal8OFStreamD1Ev(%"class.v8::internal::OFStream"*) unnamed_addr #0 comdat align 2 {
  %2 = bitcast %"class.v8::internal::OFStream"* %0 to i64*
  store i64 ptrtoint (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTVN2v88internal8OFStreamE, i64 0, inrange i32 0, i64 3) to i64), i64* %2, align 8
  %3 = getelementptr inbounds %"class.v8::internal::OFStream", %"class.v8::internal::OFStream"* %0, i64 0, i32 2
  %4 = bitcast %"class.std::__1::basic_ios.base"* %3 to i64*
  store i64 ptrtoint (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTVN2v88internal8OFStreamE, i64 0, inrange i32 1, i64 3) to i64), i64* %4, align 8
  %5 = getelementptr inbounds %"class.v8::internal::OFStream", %"class.v8::internal::OFStream"* %0, i64 0, i32 1, i32 0
  tail call void @_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_streambuf"* %5) #13
  %6 = bitcast %"class.v8::internal::OFStream"* %0 to %"class.std::__1::basic_ostream"*
  tail call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_ostream"* %6, i8** getelementptr inbounds ([4 x i8*], [4 x i8*]* @_ZTTN2v88internal8OFStreamE, i64 0, i64 1)) #13
  %7 = bitcast %"class.std::__1::basic_ios.base"* %3 to %"class.std::__1::basic_ios"*
  tail call void @_ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_ios"* %7) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal8OFStreamD0Ev(%"class.v8::internal::OFStream"*) unnamed_addr #0 comdat align 2 {
  %2 = bitcast %"class.v8::internal::OFStream"* %0 to i64*
  store i64 ptrtoint (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTVN2v88internal8OFStreamE, i64 0, inrange i32 0, i64 3) to i64), i64* %2, align 8
  %3 = getelementptr inbounds %"class.v8::internal::OFStream", %"class.v8::internal::OFStream"* %0, i64 0, i32 2
  %4 = bitcast %"class.std::__1::basic_ios.base"* %3 to i64*
  store i64 ptrtoint (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTVN2v88internal8OFStreamE, i64 0, inrange i32 1, i64 3) to i64), i64* %4, align 8
  %5 = getelementptr inbounds %"class.v8::internal::OFStream", %"class.v8::internal::OFStream"* %0, i64 0, i32 1, i32 0
  tail call void @_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_streambuf"* %5) #13
  %6 = bitcast %"class.v8::internal::OFStream"* %0 to %"class.std::__1::basic_ostream"*
  tail call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_ostream"* %6, i8** getelementptr inbounds ([4 x i8*], [4 x i8*]* @_ZTTN2v88internal8OFStreamE, i64 0, i64 1)) #13
  %7 = bitcast %"class.std::__1::basic_ios.base"* %3 to %"class.std::__1::basic_ios"*
  tail call void @_ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_ios"* %7) #13
  %8 = bitcast %"class.v8::internal::OFStream"* %0 to i8*
  tail call void @_ZdlPv(i8* %8) #16
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZTv0_n24_N2v88internal8OFStreamD1Ev(%"class.v8::internal::OFStream"*) unnamed_addr #0 comdat align 2 {
  %2 = bitcast %"class.v8::internal::OFStream"* %0 to i8*
  %3 = bitcast %"class.v8::internal::OFStream"* %0 to i8**
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds i8, i8* %4, i64 -24
  %6 = bitcast i8* %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds i8, i8* %2, i64 %7
  %9 = bitcast i8* %8 to i64*
  store i64 ptrtoint (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTVN2v88internal8OFStreamE, i64 0, inrange i32 0, i64 3) to i64), i64* %9, align 8
  %10 = getelementptr inbounds i8, i8* %8, i64 80
  %11 = bitcast i8* %10 to i64*
  store i64 ptrtoint (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTVN2v88internal8OFStreamE, i64 0, inrange i32 1, i64 3) to i64), i64* %11, align 8
  %12 = getelementptr inbounds i8, i8* %8, i64 8
  %13 = bitcast i8* %12 to %"class.std::__1::basic_streambuf"*
  tail call void @_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_streambuf"* %13) #13
  %14 = bitcast i8* %8 to %"class.std::__1::basic_ostream"*
  tail call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_ostream"* %14, i8** getelementptr inbounds ([4 x i8*], [4 x i8*]* @_ZTTN2v88internal8OFStreamE, i64 0, i64 1)) #13
  %15 = bitcast i8* %10 to %"class.std::__1::basic_ios"*
  tail call void @_ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_ios"* %15) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZTv0_n24_N2v88internal8OFStreamD0Ev(%"class.v8::internal::OFStream"*) unnamed_addr #0 comdat align 2 {
  %2 = bitcast %"class.v8::internal::OFStream"* %0 to i8*
  %3 = bitcast %"class.v8::internal::OFStream"* %0 to i8**
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds i8, i8* %4, i64 -24
  %6 = bitcast i8* %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds i8, i8* %2, i64 %7
  %9 = bitcast i8* %8 to i64*
  store i64 ptrtoint (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTVN2v88internal8OFStreamE, i64 0, inrange i32 0, i64 3) to i64), i64* %9, align 8
  %10 = getelementptr inbounds i8, i8* %8, i64 80
  %11 = bitcast i8* %10 to i64*
  store i64 ptrtoint (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTVN2v88internal8OFStreamE, i64 0, inrange i32 1, i64 3) to i64), i64* %11, align 8
  %12 = getelementptr inbounds i8, i8* %8, i64 8
  %13 = bitcast i8* %12 to %"class.std::__1::basic_streambuf"*
  tail call void @_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_streambuf"* %13) #13
  %14 = bitcast i8* %8 to %"class.std::__1::basic_ostream"*
  tail call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_ostream"* %14, i8** getelementptr inbounds ([4 x i8*], [4 x i8*]* @_ZTTN2v88internal8OFStreamE, i64 0, i64 1)) #13
  %15 = bitcast i8* %10 to %"class.std::__1::basic_ios"*
  tail call void @_ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_ios"* %15) #13
  tail call void @_ZdlPv(i8* %8) #16
  ret void
}

; Function Attrs: nounwind
declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev(%"class.std::__1::basic_ostream"*) unnamed_addr #9

; Function Attrs: nounwind
declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev(%"class.std::__1::basic_ostream"*) unnamed_addr #9

; Function Attrs: nounwind ssp uwtable
declare void @_ZTv0_n24_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev(%"class.std::__1::basic_ostream"*) unnamed_addr #0 align 2

; Function Attrs: nounwind ssp uwtable
declare void @_ZTv0_n24_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev(%"class.std::__1::basic_ostream"*) unnamed_addr #0 align 2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal12StdoutStreamD0Ev(%"class.v8::internal::StdoutStream"*) unnamed_addr #8 comdat align 2 {
  %2 = bitcast %"class.v8::internal::StdoutStream"* %0 to i64*
  store i64 ptrtoint (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTVN2v88internal12StdoutStreamE, i64 0, inrange i32 0, i64 3) to i64), i64* %2, align 8
  %3 = getelementptr inbounds %"class.v8::internal::StdoutStream", %"class.v8::internal::StdoutStream"* %0, i64 0, i32 2
  %4 = bitcast %"class.std::__1::basic_ios.base"* %3 to i64*
  store i64 ptrtoint (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTVN2v88internal12StdoutStreamE, i64 0, inrange i32 1, i64 3) to i64), i64* %4, align 8
  %5 = getelementptr inbounds %"class.v8::internal::StdoutStream", %"class.v8::internal::StdoutStream"* %0, i64 0, i32 1, i32 0
  %6 = load %"class.v8::base::RecursiveMutex"*, %"class.v8::base::RecursiveMutex"** %5, align 8
  tail call void @_ZN2v84base14RecursiveMutex6UnlockEv(%"class.v8::base::RecursiveMutex"* %6) #13
  store i64 ptrtoint (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTCN2v88internal12StdoutStreamE0_NS0_8OFStreamE, i64 0, inrange i32 0, i64 3) to i64), i64* %2, align 8
  store i64 ptrtoint (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTCN2v88internal12StdoutStreamE0_NS0_8OFStreamE, i64 0, inrange i32 1, i64 3) to i64), i64* %4, align 8
  %7 = getelementptr inbounds %"class.v8::internal::StdoutStream", %"class.v8::internal::StdoutStream"* %0, i64 0, i32 0, i32 1, i32 0
  tail call void @_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_streambuf"* %7) #13
  %8 = bitcast %"class.v8::internal::StdoutStream"* %0 to %"class.std::__1::basic_ostream"*
  tail call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_ostream"* %8, i8** getelementptr inbounds ([6 x i8*], [6 x i8*]* @_ZTTN2v88internal12StdoutStreamE, i64 0, i64 2)) #13
  %9 = bitcast %"class.std::__1::basic_ios.base"* %3 to %"class.std::__1::basic_ios"*
  tail call void @_ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_ios"* %9) #13
  %10 = bitcast %"class.v8::internal::StdoutStream"* %0 to i8*
  tail call void @_ZdlPv(i8* %10) #16
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZTv0_n24_N2v88internal12StdoutStreamD1Ev(%"class.v8::internal::StdoutStream"*) unnamed_addr #8 comdat align 2 {
  %2 = bitcast %"class.v8::internal::StdoutStream"* %0 to i8*
  %3 = bitcast %"class.v8::internal::StdoutStream"* %0 to i8**
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds i8, i8* %4, i64 -24
  %6 = bitcast i8* %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds i8, i8* %2, i64 %7
  %9 = bitcast i8* %8 to i64*
  store i64 ptrtoint (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTVN2v88internal12StdoutStreamE, i64 0, inrange i32 0, i64 3) to i64), i64* %9, align 8
  %10 = getelementptr inbounds i8, i8* %8, i64 88
  %11 = bitcast i8* %10 to i64*
  store i64 ptrtoint (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTVN2v88internal12StdoutStreamE, i64 0, inrange i32 1, i64 3) to i64), i64* %11, align 8
  %12 = getelementptr inbounds i8, i8* %8, i64 80
  %13 = bitcast i8* %12 to %"class.v8::base::RecursiveMutex"**
  %14 = load %"class.v8::base::RecursiveMutex"*, %"class.v8::base::RecursiveMutex"** %13, align 8
  tail call void @_ZN2v84base14RecursiveMutex6UnlockEv(%"class.v8::base::RecursiveMutex"* %14) #13
  store i64 ptrtoint (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTCN2v88internal12StdoutStreamE0_NS0_8OFStreamE, i64 0, inrange i32 0, i64 3) to i64), i64* %9, align 8
  store i64 ptrtoint (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTCN2v88internal12StdoutStreamE0_NS0_8OFStreamE, i64 0, inrange i32 1, i64 3) to i64), i64* %11, align 8
  %15 = getelementptr inbounds i8, i8* %8, i64 8
  %16 = bitcast i8* %15 to %"class.std::__1::basic_streambuf"*
  tail call void @_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_streambuf"* %16) #13
  %17 = bitcast i8* %8 to %"class.std::__1::basic_ostream"*
  tail call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_ostream"* %17, i8** getelementptr inbounds ([6 x i8*], [6 x i8*]* @_ZTTN2v88internal12StdoutStreamE, i64 0, i64 2)) #13
  %18 = bitcast i8* %10 to %"class.std::__1::basic_ios"*
  tail call void @_ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_ios"* %18) #13
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZTv0_n24_N2v88internal12StdoutStreamD0Ev(%"class.v8::internal::StdoutStream"*) unnamed_addr #8 comdat align 2 {
  %2 = bitcast %"class.v8::internal::StdoutStream"* %0 to i8*
  %3 = bitcast %"class.v8::internal::StdoutStream"* %0 to i8**
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds i8, i8* %4, i64 -24
  %6 = bitcast i8* %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds i8, i8* %2, i64 %7
  %9 = bitcast i8* %8 to i64*
  store i64 ptrtoint (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTVN2v88internal12StdoutStreamE, i64 0, inrange i32 0, i64 3) to i64), i64* %9, align 8
  %10 = getelementptr inbounds i8, i8* %8, i64 88
  %11 = bitcast i8* %10 to i64*
  store i64 ptrtoint (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTVN2v88internal12StdoutStreamE, i64 0, inrange i32 1, i64 3) to i64), i64* %11, align 8
  %12 = getelementptr inbounds i8, i8* %8, i64 80
  %13 = bitcast i8* %12 to %"class.v8::base::RecursiveMutex"**
  %14 = load %"class.v8::base::RecursiveMutex"*, %"class.v8::base::RecursiveMutex"** %13, align 8
  tail call void @_ZN2v84base14RecursiveMutex6UnlockEv(%"class.v8::base::RecursiveMutex"* %14) #13
  store i64 ptrtoint (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTCN2v88internal12StdoutStreamE0_NS0_8OFStreamE, i64 0, inrange i32 0, i64 3) to i64), i64* %9, align 8
  store i64 ptrtoint (i8** getelementptr inbounds ({ [5 x i8*], [5 x i8*] }, { [5 x i8*], [5 x i8*] }* @_ZTCN2v88internal12StdoutStreamE0_NS0_8OFStreamE, i64 0, inrange i32 1, i64 3) to i64), i64* %11, align 8
  %15 = getelementptr inbounds i8, i8* %8, i64 8
  %16 = bitcast i8* %15 to %"class.std::__1::basic_streambuf"*
  tail call void @_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_streambuf"* %16) #13
  %17 = bitcast i8* %8 to %"class.std::__1::basic_ostream"*
  tail call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_ostream"* %17, i8** getelementptr inbounds ([6 x i8*], [6 x i8*]* @_ZTTN2v88internal12StdoutStreamE, i64 0, i64 2)) #13
  %18 = bitcast i8* %10 to %"class.std::__1::basic_ios"*
  tail call void @_ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_ios"* %18) #13
  tail call void @_ZdlPv(i8* %8) #16
  ret void
}

declare void @_ZN2v84base14RecursiveMutex4LockEv(%"class.v8::base::RecursiveMutex"*) local_unnamed_addr #6

; Function Attrs: nounwind
declare void @_ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_ios"*) unnamed_addr #9

; Function Attrs: nounwind
declare void @_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_streambuf"*) unnamed_addr #9

; Function Attrs: nounwind
declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED2Ev(%"class.std::__1::basic_ostream"*, i8**) unnamed_addr #9

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #11

declare void @_ZN2v84base14RecursiveMutex6UnlockEv(%"class.v8::base::RecursiveMutex"*) local_unnamed_addr #6

declare %"class.v8::internal::ZoneList.1145"* @_ZN2v88internal12CharacterSet6rangesEPNS0_4ZoneE(%"class.v8::internal::CharacterSet"*, %"class.v8::internal::Zone"*) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160), i8*, i64) local_unnamed_addr #0 comdat {
  %4 = alloca %"class.std::__1::locale", align 8
  %5 = alloca %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry", align 8
  %6 = getelementptr inbounds %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry", %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* %5, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #13
  call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* nonnull %5, %"class.std::__1::basic_ostream"* dereferenceable(160) %0) #13
  %7 = load i8, i8* %6, align 8, !range !2
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %58, label %9

9:                                                ; preds = %3
  %10 = bitcast %"class.std::__1::basic_ostream"* %0 to i8**
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr i8, i8* %11, i64 -24
  %13 = bitcast i8* %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = bitcast %"class.std::__1::basic_ostream"* %0 to i8*
  %16 = getelementptr inbounds i8, i8* %15, i64 %14
  %17 = getelementptr inbounds i8, i8* %16, i64 40
  %18 = bitcast i8* %17 to %"class.std::__1::basic_streambuf"**
  %19 = load %"class.std::__1::basic_streambuf"*, %"class.std::__1::basic_streambuf"** %18, align 8
  %20 = bitcast i8* %16 to %"class.std::__1::ios_base"*
  %21 = getelementptr inbounds i8, i8* %16, i64 8
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 8
  %24 = and i32 %23, 176
  %25 = icmp eq i32 %24, 32
  %26 = getelementptr inbounds i8, i8* %1, i64 %2
  %27 = select i1 %25, i8* %26, i8* %1
  %28 = getelementptr inbounds i8, i8* %16, i64 144
  %29 = bitcast i8* %28 to i32*
  %30 = load i32, i32* %29, align 8
  %31 = icmp eq i32 %30, -1
  br i1 %31, label %32, label %42

32:                                               ; preds = %9
  %33 = bitcast %"class.std::__1::locale"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #13
  call void @_ZNKSt3__18ios_base6getlocEv(%"class.std::__1::locale"* nonnull sret %4, %"class.std::__1::ios_base"* %20) #13
  %34 = call %"class.std::__1::locale::facet"* @_ZNKSt3__16locale9use_facetERNS0_2idE(%"class.std::__1::locale"* nonnull %4, %"class.std::__1::locale::id"* nonnull dereferenceable(16) @_ZNSt3__15ctypeIcE2idE) #13
  %35 = bitcast %"class.std::__1::locale::facet"* %34 to %"class.std::__1::ctype"*
  %36 = bitcast %"class.std::__1::locale::facet"* %34 to i8 (%"class.std::__1::ctype"*, i8)***
  %37 = load i8 (%"class.std::__1::ctype"*, i8)**, i8 (%"class.std::__1::ctype"*, i8)*** %36, align 8
  %38 = getelementptr inbounds i8 (%"class.std::__1::ctype"*, i8)*, i8 (%"class.std::__1::ctype"*, i8)** %37, i64 7
  %39 = load i8 (%"class.std::__1::ctype"*, i8)*, i8 (%"class.std::__1::ctype"*, i8)** %38, align 8
  %40 = call signext i8 %39(%"class.std::__1::ctype"* %35, i8 signext 32) #13
  call void @_ZNSt3__16localeD1Ev(%"class.std::__1::locale"* nonnull %4) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #13
  %41 = sext i8 %40 to i32
  store i32 %41, i32* %29, align 8
  br label %42

42:                                               ; preds = %9, %32
  %43 = phi i32 [ %41, %32 ], [ %30, %9 ]
  %44 = trunc i32 %43 to i8
  %45 = call %"class.std::__1::basic_streambuf"* @_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(%"class.std::__1::basic_streambuf"* %19, i8* %1, i8* %27, i8* %26, %"class.std::__1::ios_base"* dereferenceable(136) %20, i8 signext %44)
  %46 = icmp eq %"class.std::__1::basic_streambuf"* %45, null
  br i1 %46, label %47, label %58

47:                                               ; preds = %42
  %48 = load i8*, i8** %10, align 8
  %49 = getelementptr i8, i8* %48, i64 -24
  %50 = bitcast i8* %49 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = getelementptr inbounds i8, i8* %15, i64 %51
  %53 = bitcast i8* %52 to %"class.std::__1::ios_base"*
  %54 = getelementptr inbounds i8, i8* %52, i64 32
  %55 = bitcast i8* %54 to i32*
  %56 = load i32, i32* %55, align 8
  %57 = or i32 %56, 5
  call void @_ZNSt3__18ios_base5clearEj(%"class.std::__1::ios_base"* %53, i32 %57) #13
  br label %58

58:                                               ; preds = %3, %42, %47
  call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* nonnull %5) #13
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #13
  ret %"class.std::__1::basic_ostream"* %0
}

declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"*, %"class.std::__1::basic_ostream"* dereferenceable(160)) unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.std::__1::basic_streambuf"* @_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(%"class.std::__1::basic_streambuf"*, i8*, i8*, i8*, %"class.std::__1::ios_base"* dereferenceable(136), i8 signext) local_unnamed_addr #0 comdat {
  %7 = alloca %"class.std::__1::basic_string", align 8
  %8 = icmp eq %"class.std::__1::basic_streambuf"* %0, null
  br i1 %8, label %78, label %9

9:                                                ; preds = %6
  %10 = ptrtoint i8* %3 to i64
  %11 = ptrtoint i8* %1 to i64
  %12 = sub i64 %10, %11
  %13 = getelementptr inbounds %"class.std::__1::ios_base", %"class.std::__1::ios_base"* %4, i64 0, i32 3
  %14 = load i64, i64* %13, align 8
  %15 = icmp sgt i64 %14, %12
  %16 = sub nsw i64 %14, %12
  %17 = select i1 %15, i64 %16, i64 0
  %18 = ptrtoint i8* %2 to i64
  %19 = sub i64 %18, %11
  %20 = icmp sgt i64 %19, 0
  br i1 %20, label %21, label %28

21:                                               ; preds = %9
  %22 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %23 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %22, align 8
  %24 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %23, i64 12
  %25 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %24, align 8
  %26 = tail call i64 %25(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %1, i64 %19) #13
  %27 = icmp eq i64 %26, %19
  br i1 %27, label %28, label %78

28:                                               ; preds = %21, %9
  %29 = icmp sgt i64 %17, 0
  br i1 %29, label %30, label %67

30:                                               ; preds = %28
  %31 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %31) #13
  %32 = icmp ult i64 %17, 23
  br i1 %32, label %42, label %33

33:                                               ; preds = %30
  %34 = add nuw i64 %17, 16
  %35 = and i64 %34, -16
  %36 = tail call i8* @_Znwm(i64 %35) #16
  %37 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %36, i8** %37, align 8
  %38 = or i64 %35, -9223372036854775808
  %39 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %38, i64* %39, align 8
  %40 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %17, i64* %40, align 8
  %41 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  br label %46

42:                                               ; preds = %30
  %43 = trunc i64 %17 to i8
  %44 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %45 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %44, i64 0, i32 1, i32 0
  store i8 %43, i8* %45, align 1
  br label %46

46:                                               ; preds = %33, %42
  %47 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %41, %33 ], [ %44, %42 ]
  %48 = phi i8* [ %36, %33 ], [ %31, %42 ]
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %48, i8 %5, i64 %17, i1 false) #13
  %49 = getelementptr inbounds i8, i8* %48, i64 %17
  store i8 0, i8* %49, align 1
  %50 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %47, i64 0, i32 1, i32 0
  %51 = load i8, i8* %50, align 1
  %52 = icmp slt i8 %51, 0
  %53 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  %55 = select i1 %52, i8* %54, i8* %31
  %56 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %57 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %56, align 8
  %58 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %57, i64 12
  %59 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %58, align 8
  %60 = call i64 %59(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %55, i64 %17) #13
  %61 = icmp eq i64 %60, %17
  %62 = load i8, i8* %50, align 1
  %63 = icmp slt i8 %62, 0
  br i1 %63, label %64, label %66

64:                                               ; preds = %46
  %65 = load i8*, i8** %53, align 8
  call void @_ZdlPv(i8* %65) #16
  br label %66

66:                                               ; preds = %46, %64
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %31) #13
  br i1 %61, label %67, label %78

67:                                               ; preds = %66, %28
  %68 = sub i64 %10, %18
  %69 = icmp sgt i64 %68, 0
  br i1 %69, label %70, label %77

70:                                               ; preds = %67
  %71 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %72 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %71, align 8
  %73 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %72, i64 12
  %74 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %73, align 8
  %75 = call i64 %74(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %2, i64 %68) #13
  %76 = icmp eq i64 %75, %68
  br i1 %76, label %77, label %78

77:                                               ; preds = %70, %67
  store i64 0, i64* %13, align 8
  br label %78

78:                                               ; preds = %77, %66, %21, %70, %6
  %79 = phi %"class.std::__1::basic_streambuf"* [ null, %6 ], [ %0, %77 ], [ null, %66 ], [ null, %21 ], [ null, %70 ]
  ret %"class.std::__1::basic_streambuf"* %79
}

; Function Attrs: nounwind
declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"*) unnamed_addr #9

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #12

declare void @_ZNKSt3__18ios_base6getlocEv(%"class.std::__1::locale"* sret, %"class.std::__1::ios_base"*) local_unnamed_addr #6

; Function Attrs: nounwind
declare void @_ZNSt3__16localeD1Ev(%"class.std::__1::locale"*) unnamed_addr #9

declare %"class.std::__1::locale::facet"* @_ZNKSt3__16locale9use_facetERNS0_2idE(%"class.std::__1::locale"*, %"class.std::__1::locale::id"* dereferenceable(16)) local_unnamed_addr #6

declare void @_ZNSt3__18ios_base5clearEj(%"class.std::__1::ios_base"*, i32) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"class.std::__1::__tree_end_node"*, i8 } @_ZNSt3__16__treeIPN2v88internal13RegExpCaptureENS2_12RegExpParser21RegExpCaptureNameLessENS2_13ZoneAllocatorIS4_EEE25__emplace_unique_key_argsIS4_JRS4_EEENS_4pairINS_15__tree_iteratorIS4_PNS_11__tree_nodeIS4_PvEElEEbEERKT_DpOT0_(%"class.std::__1::__tree.1134"*, %"class.v8::internal::RegExpCapture"** dereferenceable(8), %"class.v8::internal::RegExpCapture"** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.std::__1::__tree.1134", %"class.std::__1::__tree.1134"* %0, i64 0, i32 1, i32 0, i32 0
  %5 = bitcast %"class.std::__1::__tree_end_node"* %4 to %"class.std::__1::__tree_node"**
  %6 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %5, align 8
  %7 = icmp eq %"class.std::__1::__tree_node"* %6, null
  br i1 %7, label %113, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.std::__1::__tree.1134", %"class.std::__1::__tree.1134"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %10 = load %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %1, align 8
  %11 = getelementptr inbounds %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %10, i64 0, i32 5
  %12 = load %"class.v8::internal::ZoneVector"*, %"class.v8::internal::ZoneVector"** %11, align 8
  %13 = getelementptr inbounds %"class.v8::internal::ZoneVector", %"class.v8::internal::ZoneVector"* %12, i64 0, i32 0, i32 0, i32 1
  %14 = load i16*, i16** %13, align 8
  %15 = getelementptr inbounds %"class.v8::internal::ZoneVector", %"class.v8::internal::ZoneVector"* %12, i64 0, i32 0, i32 0, i32 0
  %16 = load i16*, i16** %15, align 8
  %17 = icmp eq i16* %16, %14
  br i1 %17, label %18, label %45

18:                                               ; preds = %8
  %19 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %6, i64 0, i32 1
  %20 = load %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %19, align 8
  %21 = getelementptr inbounds %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %20, i64 0, i32 5
  %22 = load %"class.v8::internal::ZoneVector"*, %"class.v8::internal::ZoneVector"** %21, align 8
  %23 = getelementptr inbounds %"class.v8::internal::ZoneVector", %"class.v8::internal::ZoneVector"* %22, i64 0, i32 0, i32 0, i32 0
  %24 = load i16*, i16** %23, align 8
  %25 = getelementptr inbounds %"class.v8::internal::ZoneVector", %"class.v8::internal::ZoneVector"* %22, i64 0, i32 0, i32 0, i32 1
  %26 = load i16*, i16** %25, align 8
  %27 = icmp eq i16* %24, %26
  br i1 %27, label %105, label %28

28:                                               ; preds = %18, %33
  %29 = phi %"class.std::__1::__tree_node"* [ %34, %33 ], [ %6, %18 ]
  %30 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %29, i64 0, i32 0, i32 0, i32 0
  %31 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %30, align 8
  %32 = icmp eq %"class.std::__1::__tree_node_base"* %31, null
  br i1 %32, label %76, label %33

33:                                               ; preds = %28
  %34 = bitcast %"class.std::__1::__tree_node_base"* %31 to %"class.std::__1::__tree_node"*
  %35 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %31, i64 1
  %36 = bitcast %"class.std::__1::__tree_node_base"* %35 to %"class.v8::internal::RegExpCapture"**
  %37 = load %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %36, align 8
  %38 = getelementptr inbounds %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %37, i64 0, i32 5
  %39 = load %"class.v8::internal::ZoneVector"*, %"class.v8::internal::ZoneVector"** %38, align 8
  %40 = getelementptr inbounds %"class.v8::internal::ZoneVector", %"class.v8::internal::ZoneVector"* %39, i64 0, i32 0, i32 0, i32 0
  %41 = load i16*, i16** %40, align 8
  %42 = getelementptr inbounds %"class.v8::internal::ZoneVector", %"class.v8::internal::ZoneVector"* %39, i64 0, i32 0, i32 0, i32 1
  %43 = load i16*, i16** %42, align 8
  %44 = icmp eq i16* %41, %43
  br i1 %44, label %102, label %28

45:                                               ; preds = %8, %109
  %46 = phi %"class.std::__1::__tree_node"* [ %112, %109 ], [ %6, %8 ]
  %47 = phi %"class.std::__1::__tree_node_base"** [ %111, %109 ], [ %9, %8 ]
  %48 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %46, i64 0, i32 1
  %49 = load %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %48, align 8
  %50 = getelementptr inbounds %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %49, i64 0, i32 5
  %51 = load %"class.v8::internal::ZoneVector"*, %"class.v8::internal::ZoneVector"** %50, align 8
  %52 = getelementptr inbounds %"class.v8::internal::ZoneVector", %"class.v8::internal::ZoneVector"* %51, i64 0, i32 0, i32 0, i32 0
  %53 = load i16*, i16** %52, align 8
  %54 = getelementptr inbounds %"class.v8::internal::ZoneVector", %"class.v8::internal::ZoneVector"* %51, i64 0, i32 0, i32 0, i32 1
  %55 = load i16*, i16** %54, align 8
  %56 = icmp eq i16* %53, %55
  br i1 %56, label %57, label %58

57:                                               ; preds = %66, %68, %45
  br label %82

58:                                               ; preds = %45, %68
  %59 = phi i16* [ %69, %68 ], [ %16, %45 ]
  %60 = phi i16* [ %70, %68 ], [ %53, %45 ]
  %61 = icmp eq i16* %59, %14
  br i1 %61, label %72, label %62

62:                                               ; preds = %58
  %63 = load i16, i16* %59, align 2
  %64 = load i16, i16* %60, align 2
  %65 = icmp ult i16 %63, %64
  br i1 %65, label %72, label %66

66:                                               ; preds = %62
  %67 = icmp ult i16 %64, %63
  br i1 %67, label %57, label %68

68:                                               ; preds = %66
  %69 = getelementptr inbounds i16, i16* %59, i64 1
  %70 = getelementptr inbounds i16, i16* %60, i64 1
  %71 = icmp eq i16* %70, %55
  br i1 %71, label %57, label %58

72:                                               ; preds = %62, %58
  %73 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %46, i64 0, i32 0, i32 0, i32 0
  %74 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %73, align 8
  %75 = icmp eq %"class.std::__1::__tree_node_base"* %74, null
  br i1 %75, label %78, label %109

76:                                               ; preds = %28
  %77 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %29, i64 0, i32 0, i32 0, i32 0
  br label %78

78:                                               ; preds = %72, %76
  %79 = phi %"class.std::__1::__tree_node"* [ %29, %76 ], [ %46, %72 ]
  %80 = phi %"class.std::__1::__tree_node_base"** [ %77, %76 ], [ %73, %72 ]
  %81 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %79, i64 0, i32 0, i32 0
  br label %115

82:                                               ; preds = %57, %92
  %83 = phi i16* [ %93, %92 ], [ %53, %57 ]
  %84 = phi i16* [ %94, %92 ], [ %16, %57 ]
  %85 = icmp eq i16* %83, %55
  br i1 %85, label %96, label %86

86:                                               ; preds = %82
  %87 = load i16, i16* %83, align 2
  %88 = load i16, i16* %84, align 2
  %89 = icmp ult i16 %87, %88
  br i1 %89, label %96, label %90

90:                                               ; preds = %86
  %91 = icmp ult i16 %88, %87
  br i1 %91, label %105, label %92

92:                                               ; preds = %90
  %93 = getelementptr inbounds i16, i16* %83, i64 1
  %94 = getelementptr inbounds i16, i16* %84, i64 1
  %95 = icmp eq i16* %94, %14
  br i1 %95, label %105, label %82

96:                                               ; preds = %86, %82
  %97 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %46, i64 0, i32 0, i32 1
  %98 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %97, align 8
  %99 = icmp eq %"class.std::__1::__tree_node_base"* %98, null
  br i1 %99, label %100, label %109

100:                                              ; preds = %96
  %101 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %46, i64 0, i32 0, i32 0
  br label %115

102:                                              ; preds = %33
  %103 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %29, i64 0, i32 0, i32 0, i32 0
  %104 = bitcast %"class.std::__1::__tree_node_base"* %31 to %"class.std::__1::__tree_node"*
  br label %105

105:                                              ; preds = %92, %90, %102, %18
  %106 = phi %"class.std::__1::__tree_node"* [ %6, %18 ], [ %104, %102 ], [ %46, %90 ], [ %46, %92 ]
  %107 = phi %"class.std::__1::__tree_node_base"** [ %9, %18 ], [ %103, %102 ], [ %47, %90 ], [ %47, %92 ]
  %108 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %106, i64 0, i32 0, i32 0
  br label %115

109:                                              ; preds = %96, %72
  %110 = phi %"class.std::__1::__tree_node_base"* [ %74, %72 ], [ %98, %96 ]
  %111 = phi %"class.std::__1::__tree_node_base"** [ %73, %72 ], [ %97, %96 ]
  %112 = bitcast %"class.std::__1::__tree_node_base"* %110 to %"class.std::__1::__tree_node"*
  br label %45

113:                                              ; preds = %3
  %114 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %4, i64 0, i32 0
  br label %115

115:                                              ; preds = %78, %100, %105, %113
  %116 = phi %"class.std::__1::__tree_end_node"* [ %4, %113 ], [ %108, %105 ], [ %101, %100 ], [ %81, %78 ]
  %117 = phi %"class.std::__1::__tree_node_base"** [ %114, %113 ], [ %107, %105 ], [ %97, %100 ], [ %80, %78 ]
  %118 = bitcast %"class.std::__1::__tree_node_base"** %117 to %"class.std::__1::__tree_node"**
  %119 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %118, align 8
  %120 = icmp eq %"class.std::__1::__tree_node"* %119, null
  br i1 %120, label %121, label %160

121:                                              ; preds = %115
  %122 = getelementptr inbounds %"class.std::__1::__tree.1134", %"class.std::__1::__tree.1134"* %0, i64 0, i32 1, i32 1, i32 0, i32 0
  %123 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %122, align 8, !noalias !86
  %124 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %123, i64 0, i32 2
  %125 = load i64, i64* %124, align 8, !noalias !86
  %126 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %123, i64 0, i32 3
  %127 = load i64, i64* %126, align 8, !noalias !86
  %128 = sub i64 %127, %125
  %129 = icmp ult i64 %128, 40
  br i1 %129, label %130, label %132, !prof !3

130:                                              ; preds = %121
  %131 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %123, i64 40) #13, !noalias !86
  br label %134

132:                                              ; preds = %121
  %133 = add i64 %125, 40
  store i64 %133, i64* %124, align 8, !noalias !86
  br label %134

134:                                              ; preds = %130, %132
  %135 = phi i64 [ %131, %130 ], [ %125, %132 ]
  %136 = inttoptr i64 %135 to %"class.std::__1::__tree_node"*
  %137 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %136, i64 0, i32 1
  %138 = bitcast %"class.v8::internal::RegExpCapture"** %2 to i64*
  %139 = load i64, i64* %138, align 8, !noalias !86
  %140 = bitcast %"class.v8::internal::RegExpCapture"** %137 to i64*
  store i64 %139, i64* %140, align 8, !noalias !86
  %141 = inttoptr i64 %135 to %"class.std::__1::__tree_node_base"*
  %142 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %141, i64 0, i32 2
  %143 = inttoptr i64 %135 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %143, i8 0, i64 16, i1 false) #13
  store %"class.std::__1::__tree_end_node"* %116, %"class.std::__1::__tree_end_node"** %142, align 8
  store %"class.std::__1::__tree_node_base"* %141, %"class.std::__1::__tree_node_base"** %117, align 8
  %144 = getelementptr inbounds %"class.std::__1::__tree.1134", %"class.std::__1::__tree.1134"* %0, i64 0, i32 0
  %145 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %144, align 8
  %146 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %145, i64 0, i32 0
  %147 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %146, align 8
  %148 = icmp eq %"class.std::__1::__tree_node_base"* %147, null
  br i1 %148, label %153, label %149

149:                                              ; preds = %134
  %150 = ptrtoint %"class.std::__1::__tree_node_base"* %147 to i64
  %151 = bitcast %"class.std::__1::__tree.1134"* %0 to i64*
  store i64 %150, i64* %151, align 8
  %152 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %117, align 8
  br label %153

153:                                              ; preds = %134, %149
  %154 = phi %"class.std::__1::__tree_node_base"* [ %141, %134 ], [ %152, %149 ]
  %155 = getelementptr inbounds %"class.std::__1::__tree.1134", %"class.std::__1::__tree.1134"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %156 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %155, align 8
  tail call void @_ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(%"class.std::__1::__tree_node_base"* %156, %"class.std::__1::__tree_node_base"* %154) #13
  %157 = getelementptr inbounds %"class.std::__1::__tree.1134", %"class.std::__1::__tree.1134"* %0, i64 0, i32 2, i32 0, i32 0
  %158 = load i64, i64* %157, align 8
  %159 = add i64 %158, 1
  store i64 %159, i64* %157, align 8
  br label %160

160:                                              ; preds = %153, %115
  %161 = phi i8 [ 1, %153 ], [ 0, %115 ]
  %162 = phi %"class.std::__1::__tree_node"* [ %136, %153 ], [ %119, %115 ]
  %163 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %162, i64 0, i32 0, i32 0
  %164 = insertvalue { %"class.std::__1::__tree_end_node"*, i8 } undef, %"class.std::__1::__tree_end_node"* %163, 0
  %165 = insertvalue { %"class.std::__1::__tree_end_node"*, i8 } %164, i8 %161, 1
  ret { %"class.std::__1::__tree_end_node"*, i8 } %165
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(%"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"*) local_unnamed_addr #0 comdat {
  %3 = icmp eq %"class.std::__1::__tree_node_base"* %1, %0
  %4 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %1, i64 0, i32 3
  %5 = zext i1 %3 to i8
  store i8 %5, i8* %4, align 8
  br i1 %3, label %156, label %6

6:                                                ; preds = %2, %149
  %7 = phi %"class.std::__1::__tree_node_base"* [ %20, %149 ], [ %1, %2 ]
  %8 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 2
  %9 = bitcast %"class.std::__1::__tree_end_node"** %8 to %"class.std::__1::__tree_node_base"**
  %10 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %9, align 8
  %11 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 3
  %12 = load i8, i8* %11, align 8, !range !2
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %14, label %156

14:                                               ; preds = %6
  %15 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 2
  %16 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %15, align 8
  %17 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %16, i64 0, i32 0
  %18 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %17, align 8
  %19 = icmp eq %"class.std::__1::__tree_node_base"* %18, %10
  %20 = bitcast %"class.std::__1::__tree_end_node"* %16 to %"class.std::__1::__tree_node_base"*
  br i1 %19, label %21, label %87

21:                                               ; preds = %14
  %22 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %16, i64 1, i32 0
  %23 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %22, align 8
  %24 = icmp eq %"class.std::__1::__tree_node_base"* %23, null
  br i1 %24, label %29, label %25

25:                                               ; preds = %21
  %26 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %23, i64 0, i32 3
  %27 = load i8, i8* %26, align 8, !range !2
  %28 = icmp eq i8 %27, 0
  br i1 %28, label %149, label %29

29:                                               ; preds = %25, %21
  %30 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 2
  %31 = bitcast %"class.std::__1::__tree_end_node"* %16 to %"class.std::__1::__tree_node_base"*
  %32 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0, i32 0
  %33 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %32, align 8
  %34 = icmp eq %"class.std::__1::__tree_node_base"* %33, %7
  br i1 %34, label %61, label %35

35:                                               ; preds = %29
  %36 = ptrtoint %"class.std::__1::__tree_end_node"* %16 to i64
  %37 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 1
  %38 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %37, align 8
  %39 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 0, i32 0
  %40 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %39, align 8
  store %"class.std::__1::__tree_node_base"* %40, %"class.std::__1::__tree_node_base"** %37, align 8
  %41 = icmp eq %"class.std::__1::__tree_node_base"* %40, null
  br i1 %41, label %47, label %42

42:                                               ; preds = %35
  %43 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0
  %44 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %40, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %43, %"class.std::__1::__tree_end_node"** %44, align 8
  %45 = bitcast %"class.std::__1::__tree_end_node"** %30 to i64*
  %46 = load i64, i64* %45, align 8
  br label %47

47:                                               ; preds = %35, %42
  %48 = phi i64 [ %46, %42 ], [ %36, %35 ]
  %49 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 2
  %50 = bitcast %"class.std::__1::__tree_end_node"** %49 to i64*
  store i64 %48, i64* %50, align 8
  %51 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %30, align 8
  %52 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %51, i64 0, i32 0
  %53 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %52, align 8
  %54 = icmp eq %"class.std::__1::__tree_node_base"* %53, %10
  %55 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %51, i64 1, i32 0
  %56 = select i1 %54, %"class.std::__1::__tree_node_base"** %52, %"class.std::__1::__tree_node_base"** %55
  store %"class.std::__1::__tree_node_base"* %38, %"class.std::__1::__tree_node_base"** %56, align 8
  store %"class.std::__1::__tree_node_base"* %10, %"class.std::__1::__tree_node_base"** %39, align 8
  %57 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %57, %"class.std::__1::__tree_end_node"** %30, align 8
  %58 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 2
  %59 = bitcast %"class.std::__1::__tree_end_node"** %58 to %"class.std::__1::__tree_node_base"**
  %60 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %59, align 8
  br label %61

61:                                               ; preds = %47, %29
  %62 = phi %"class.std::__1::__tree_node_base"* [ %31, %29 ], [ %60, %47 ]
  %63 = phi %"class.std::__1::__tree_node_base"* [ %10, %29 ], [ %38, %47 ]
  %64 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %63, i64 0, i32 3
  store i8 1, i8* %64, align 8
  %65 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 3
  store i8 0, i8* %65, align 8
  %66 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 0, i32 0
  %67 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %66, align 8
  %68 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %67, i64 0, i32 1
  %69 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %68, align 8
  store %"class.std::__1::__tree_node_base"* %69, %"class.std::__1::__tree_node_base"** %66, align 8
  %70 = icmp eq %"class.std::__1::__tree_node_base"* %69, null
  br i1 %70, label %74, label %71

71:                                               ; preds = %61
  %72 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 0
  %73 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %69, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %72, %"class.std::__1::__tree_end_node"** %73, align 8
  br label %74

74:                                               ; preds = %71, %61
  %75 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 2
  %76 = bitcast %"class.std::__1::__tree_end_node"** %75 to i64*
  %77 = load i64, i64* %76, align 8
  %78 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %67, i64 0, i32 2
  %79 = bitcast %"class.std::__1::__tree_end_node"** %78 to i64*
  store i64 %77, i64* %79, align 8
  %80 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %75, align 8
  %81 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %80, i64 0, i32 0
  %82 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %81, align 8
  %83 = icmp eq %"class.std::__1::__tree_node_base"* %82, %62
  %84 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %80, i64 1, i32 0
  %85 = select i1 %83, %"class.std::__1::__tree_node_base"** %81, %"class.std::__1::__tree_node_base"** %84
  store %"class.std::__1::__tree_node_base"* %67, %"class.std::__1::__tree_node_base"** %85, align 8
  store %"class.std::__1::__tree_node_base"* %62, %"class.std::__1::__tree_node_base"** %68, align 8
  %86 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %67, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %86, %"class.std::__1::__tree_end_node"** %75, align 8
  br label %156

87:                                               ; preds = %14
  %88 = icmp eq %"class.std::__1::__tree_node_base"* %18, null
  br i1 %88, label %93, label %89

89:                                               ; preds = %87
  %90 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %18, i64 0, i32 3
  %91 = load i8, i8* %90, align 8, !range !2
  %92 = icmp eq i8 %91, 0
  br i1 %92, label %149, label %93

93:                                               ; preds = %89, %87
  %94 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 2
  %95 = bitcast %"class.std::__1::__tree_end_node"* %16 to %"class.std::__1::__tree_node_base"*
  %96 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0, i32 0
  %97 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %96, align 8
  %98 = icmp eq %"class.std::__1::__tree_node_base"* %97, %7
  br i1 %98, label %99, label %123

99:                                               ; preds = %93
  %100 = ptrtoint %"class.std::__1::__tree_end_node"* %16 to i64
  %101 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0, i32 0
  %102 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 1
  %103 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %102, align 8
  store %"class.std::__1::__tree_node_base"* %103, %"class.std::__1::__tree_node_base"** %101, align 8
  %104 = icmp eq %"class.std::__1::__tree_node_base"* %103, null
  br i1 %104, label %110, label %105

105:                                              ; preds = %99
  %106 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0
  %107 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %103, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %106, %"class.std::__1::__tree_end_node"** %107, align 8
  %108 = bitcast %"class.std::__1::__tree_end_node"** %94 to i64*
  %109 = load i64, i64* %108, align 8
  br label %110

110:                                              ; preds = %99, %105
  %111 = phi i64 [ %109, %105 ], [ %100, %99 ]
  %112 = bitcast %"class.std::__1::__tree_end_node"** %8 to i64*
  store i64 %111, i64* %112, align 8
  %113 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %94, align 8
  %114 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %113, i64 0, i32 0
  %115 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %114, align 8
  %116 = icmp eq %"class.std::__1::__tree_node_base"* %115, %10
  %117 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %113, i64 1, i32 0
  %118 = select i1 %116, %"class.std::__1::__tree_node_base"** %114, %"class.std::__1::__tree_node_base"** %117
  store %"class.std::__1::__tree_node_base"* %7, %"class.std::__1::__tree_node_base"** %118, align 8
  store %"class.std::__1::__tree_node_base"* %10, %"class.std::__1::__tree_node_base"** %102, align 8
  %119 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %119, %"class.std::__1::__tree_end_node"** %94, align 8
  %120 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 2
  %121 = bitcast %"class.std::__1::__tree_end_node"** %120 to %"class.std::__1::__tree_node_base"**
  %122 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %121, align 8
  br label %123

123:                                              ; preds = %93, %110
  %124 = phi %"class.std::__1::__tree_node_base"* [ %122, %110 ], [ %95, %93 ]
  %125 = phi %"class.std::__1::__tree_node_base"* [ %7, %110 ], [ %10, %93 ]
  %126 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %125, i64 0, i32 3
  store i8 1, i8* %126, align 8
  %127 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 3
  store i8 0, i8* %127, align 8
  %128 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 1
  %129 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %128, align 8
  %130 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %129, i64 0, i32 0, i32 0
  %131 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %130, align 8
  store %"class.std::__1::__tree_node_base"* %131, %"class.std::__1::__tree_node_base"** %128, align 8
  %132 = icmp eq %"class.std::__1::__tree_node_base"* %131, null
  br i1 %132, label %136, label %133

133:                                              ; preds = %123
  %134 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 0
  %135 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %131, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %134, %"class.std::__1::__tree_end_node"** %135, align 8
  br label %136

136:                                              ; preds = %133, %123
  %137 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 2
  %138 = bitcast %"class.std::__1::__tree_end_node"** %137 to i64*
  %139 = load i64, i64* %138, align 8
  %140 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %129, i64 0, i32 2
  %141 = bitcast %"class.std::__1::__tree_end_node"** %140 to i64*
  store i64 %139, i64* %141, align 8
  %142 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %137, align 8
  %143 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %142, i64 0, i32 0
  %144 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %143, align 8
  %145 = icmp eq %"class.std::__1::__tree_node_base"* %144, %124
  %146 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %142, i64 1, i32 0
  %147 = select i1 %145, %"class.std::__1::__tree_node_base"** %143, %"class.std::__1::__tree_node_base"** %146
  store %"class.std::__1::__tree_node_base"* %129, %"class.std::__1::__tree_node_base"** %147, align 8
  store %"class.std::__1::__tree_node_base"* %124, %"class.std::__1::__tree_node_base"** %130, align 8
  %148 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %129, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %148, %"class.std::__1::__tree_end_node"** %137, align 8
  br label %156

149:                                              ; preds = %89, %25
  %150 = phi i8* [ %26, %25 ], [ %90, %89 ]
  store i8 1, i8* %11, align 8
  %151 = icmp eq %"class.std::__1::__tree_node_base"* %20, %0
  %152 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %16, i64 3
  %153 = bitcast %"class.std::__1::__tree_end_node"* %152 to i8*
  %154 = zext i1 %151 to i8
  store i8 %154, i8* %153, align 8
  store i8 1, i8* %150, align 8
  %155 = icmp eq %"class.std::__1::__tree_node_base"* %20, %0
  br i1 %155, label %156, label %6

156:                                              ; preds = %6, %149, %2, %136, %74
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIPN2v88internal13RegExpCaptureENS2_13ZoneAllocatorIS4_EEEC2INS_21__tree_const_iteratorIS4_PNS_11__tree_nodeIS4_PvEElEEEET_SF_RKS6_PNS_9enable_ifIXaasr27__is_cpp17_forward_iteratorISF_EE5valuesr16is_constructibleIS4_NS_15iterator_traitsISF_E9referenceEEE5valueEvE4typeE(%"class.std::__1::vector.1157"*, %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"*, %"class.v8::internal::ZoneAllocator.1162"* dereferenceable(8), i8*) unnamed_addr #0 comdat align 2 {
  %6 = getelementptr inbounds %"class.std::__1::vector.1157", %"class.std::__1::vector.1157"* %0, i64 0, i32 0, i32 2, i32 1
  %7 = bitcast %"class.v8::internal::ZoneAllocator.1162"* %3 to i64*
  %8 = bitcast %"struct.std::__1::__compressed_pair_elem.1161"* %6 to i64*
  %9 = bitcast %"class.std::__1::vector.1157"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 24, i1 false) #13
  %10 = load i64, i64* %7, align 8
  store i64 %10, i64* %8, align 8
  %11 = icmp eq %"class.std::__1::__tree_end_node"* %1, %2
  %12 = inttoptr i64 %10 to %"class.v8::internal::Zone"*
  br i1 %11, label %113, label %13

13:                                               ; preds = %5, %44
  %14 = phi i64 [ %16, %44 ], [ 0, %5 ]
  %15 = phi %"class.std::__1::__tree_end_node"* [ %45, %44 ], [ %1, %5 ]
  %16 = add nuw nsw i64 %14, 1
  %17 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %15, i64 1, i32 0
  %18 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %17, align 8
  %19 = icmp eq %"class.std::__1::__tree_node_base"* %18, null
  br i1 %19, label %20, label %28

20:                                               ; preds = %13
  %21 = bitcast %"class.std::__1::__tree_end_node"* %15 to %"class.std::__1::__tree_node_base"*
  %22 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %15, i64 2
  %23 = bitcast %"class.std::__1::__tree_end_node"* %22 to %"class.std::__1::__tree_end_node"**
  %24 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %23, align 8
  %25 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %24, i64 0, i32 0
  %26 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %25, align 8
  %27 = icmp eq %"class.std::__1::__tree_node_base"* %26, %21
  br i1 %27, label %44, label %35

28:                                               ; preds = %13, %28
  %29 = phi %"class.std::__1::__tree_node_base"* [ %31, %28 ], [ %18, %13 ]
  %30 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %29, i64 0, i32 0, i32 0
  %31 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %30, align 8
  %32 = icmp eq %"class.std::__1::__tree_node_base"* %31, null
  br i1 %32, label %33, label %28

33:                                               ; preds = %28
  %34 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %29, i64 0, i32 0
  br label %44

35:                                               ; preds = %20, %35
  %36 = phi %"class.std::__1::__tree_end_node"** [ %39, %35 ], [ %23, %20 ]
  %37 = bitcast %"class.std::__1::__tree_end_node"** %36 to %"class.std::__1::__tree_node_base"**
  %38 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %37, align 8
  %39 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 2
  %40 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %39, align 8
  %41 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %40, i64 0, i32 0
  %42 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %41, align 8
  %43 = icmp eq %"class.std::__1::__tree_node_base"* %42, %38
  br i1 %43, label %44, label %35

44:                                               ; preds = %35, %33, %20
  %45 = phi %"class.std::__1::__tree_end_node"* [ %34, %33 ], [ %24, %20 ], [ %40, %35 ]
  %46 = icmp eq %"class.std::__1::__tree_end_node"* %45, %2
  br i1 %46, label %47, label %13

47:                                               ; preds = %44
  %48 = icmp ugt i64 %14, 268435454
  br i1 %48, label %49, label %51

49:                                               ; preds = %47
  %50 = bitcast %"class.std::__1::vector.1157"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %50) #14
  unreachable

51:                                               ; preds = %47
  %52 = shl i64 %16, 3
  %53 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %12, i64 0, i32 2
  %54 = load i64, i64* %53, align 8
  %55 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %12, i64 0, i32 3
  %56 = load i64, i64* %55, align 8
  %57 = sub i64 %56, %54
  %58 = icmp ugt i64 %52, %57
  br i1 %58, label %59, label %61, !prof !3

59:                                               ; preds = %51
  %60 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %12, i64 %52) #13
  br label %63

61:                                               ; preds = %51
  %62 = add i64 %54, %52
  store i64 %62, i64* %53, align 8
  br label %63

63:                                               ; preds = %61, %59
  %64 = phi i64 [ %60, %59 ], [ %54, %61 ]
  %65 = inttoptr i64 %64 to %"class.v8::internal::RegExpCapture"**
  %66 = getelementptr inbounds %"class.std::__1::vector.1157", %"class.std::__1::vector.1157"* %0, i64 0, i32 0, i32 1
  store %"class.v8::internal::RegExpCapture"** %65, %"class.v8::internal::RegExpCapture"*** %66, align 8
  %67 = getelementptr inbounds %"class.std::__1::vector.1157", %"class.std::__1::vector.1157"* %0, i64 0, i32 0, i32 0
  store %"class.v8::internal::RegExpCapture"** %65, %"class.v8::internal::RegExpCapture"*** %67, align 8
  %68 = getelementptr inbounds %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %65, i64 %16
  %69 = getelementptr inbounds %"class.std::__1::vector.1157", %"class.std::__1::vector.1157"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  store %"class.v8::internal::RegExpCapture"** %68, %"class.v8::internal::RegExpCapture"*** %69, align 8
  %70 = bitcast %"class.v8::internal::RegExpCapture"*** %66 to i64*
  %71 = inttoptr i64 %64 to i64*
  br label %72

72:                                               ; preds = %106, %63
  %73 = phi %"class.v8::internal::RegExpCapture"** [ %65, %63 ], [ %108, %106 ]
  %74 = phi i64* [ %71, %63 ], [ %110, %106 ]
  %75 = phi %"class.std::__1::__tree_end_node"* [ %1, %63 ], [ %107, %106 ]
  %76 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %75, i64 4
  %77 = bitcast %"class.std::__1::__tree_end_node"* %76 to i64*
  %78 = load i64, i64* %77, align 8
  store i64 %78, i64* %74, align 8
  %79 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %75, i64 1, i32 0
  %80 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %79, align 8
  %81 = icmp eq %"class.std::__1::__tree_node_base"* %80, null
  br i1 %81, label %82, label %90

82:                                               ; preds = %72
  %83 = bitcast %"class.std::__1::__tree_end_node"* %75 to %"class.std::__1::__tree_node_base"*
  %84 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %75, i64 2
  %85 = bitcast %"class.std::__1::__tree_end_node"* %84 to %"class.std::__1::__tree_end_node"**
  %86 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %85, align 8
  %87 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %86, i64 0, i32 0
  %88 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %87, align 8
  %89 = icmp eq %"class.std::__1::__tree_node_base"* %88, %83
  br i1 %89, label %106, label %97

90:                                               ; preds = %72, %90
  %91 = phi %"class.std::__1::__tree_node_base"* [ %93, %90 ], [ %80, %72 ]
  %92 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %91, i64 0, i32 0, i32 0
  %93 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %92, align 8
  %94 = icmp eq %"class.std::__1::__tree_node_base"* %93, null
  br i1 %94, label %95, label %90

95:                                               ; preds = %90
  %96 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %91, i64 0, i32 0
  br label %106

97:                                               ; preds = %82, %97
  %98 = phi %"class.std::__1::__tree_end_node"** [ %101, %97 ], [ %85, %82 ]
  %99 = bitcast %"class.std::__1::__tree_end_node"** %98 to %"class.std::__1::__tree_node_base"**
  %100 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %99, align 8
  %101 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %100, i64 0, i32 2
  %102 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %101, align 8
  %103 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %102, i64 0, i32 0
  %104 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %103, align 8
  %105 = icmp eq %"class.std::__1::__tree_node_base"* %104, %100
  br i1 %105, label %106, label %97

106:                                              ; preds = %97, %95, %82
  %107 = phi %"class.std::__1::__tree_end_node"* [ %96, %95 ], [ %86, %82 ], [ %102, %97 ]
  %108 = getelementptr inbounds %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %73, i64 1
  %109 = icmp eq %"class.std::__1::__tree_end_node"* %107, %2
  %110 = bitcast %"class.v8::internal::RegExpCapture"** %108 to i64*
  br i1 %109, label %111, label %72

111:                                              ; preds = %106
  %112 = ptrtoint %"class.v8::internal::RegExpCapture"** %108 to i64
  store i64 %112, i64* %70, align 8
  br label %113

113:                                              ; preds = %5, %111
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZNSt3__16__sortIRN2v88internal12_GLOBAL__N_122RegExpCaptureIndexLessEPPNS2_13RegExpCaptureEEEvT0_S9_T_(%"class.v8::internal::RegExpCapture"**, %"class.v8::internal::RegExpCapture"**) unnamed_addr #0 {
  br label %3

3:                                                ; preds = %425, %2
  %4 = phi %"class.v8::internal::RegExpCapture"** [ %1, %2 ], [ %401, %425 ]
  %5 = phi %"class.v8::internal::RegExpCapture"** [ %0, %2 ], [ %16, %425 ]
  %6 = ptrtoint %"class.v8::internal::RegExpCapture"** %4 to i64
  %7 = getelementptr inbounds %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %4, i64 -1
  %8 = bitcast %"class.v8::internal::RegExpCapture"** %7 to i64*
  %9 = bitcast %"class.v8::internal::RegExpCapture"** %7 to i64*
  %10 = bitcast %"class.v8::internal::RegExpCapture"** %7 to i64*
  %11 = bitcast %"class.v8::internal::RegExpCapture"** %7 to i64*
  %12 = ptrtoint %"class.v8::internal::RegExpCapture"** %4 to i64
  br label %13

13:                                               ; preds = %434, %3
  %14 = phi %"class.v8::internal::RegExpCapture"** [ %5, %3 ], [ %435, %434 ]
  br label %15

15:                                               ; preds = %342, %13
  %16 = phi %"class.v8::internal::RegExpCapture"** [ %14, %13 ], [ %327, %342 ]
  %17 = ptrtoint %"class.v8::internal::RegExpCapture"** %16 to i64
  %18 = sub i64 %6, %17
  %19 = ashr exact i64 %18, 3
  switch i64 %19, label %156 [
    i64 0, label %438
    i64 1, label %438
    i64 2, label %20
    i64 3, label %34
    i64 4, label %80
    i64 5, label %150
  ]

20:                                               ; preds = %15
  %21 = getelementptr inbounds %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %4, i64 -1
  %22 = load %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %21, align 8
  %23 = load %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %16, align 8
  %24 = getelementptr %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %22, i64 0, i32 2
  %25 = load i32, i32* %24, align 8
  %26 = getelementptr %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %23, i64 0, i32 2
  %27 = load i32, i32* %26, align 8
  %28 = icmp slt i32 %25, %27
  br i1 %28, label %29, label %438

29:                                               ; preds = %20
  %30 = ptrtoint %"class.v8::internal::RegExpCapture"* %22 to i64
  %31 = ptrtoint %"class.v8::internal::RegExpCapture"* %23 to i64
  %32 = bitcast %"class.v8::internal::RegExpCapture"** %16 to i64*
  %33 = bitcast %"class.v8::internal::RegExpCapture"** %21 to i64*
  store i64 %30, i64* %32, align 8
  store i64 %31, i64* %33, align 8
  br label %438

34:                                               ; preds = %15
  %35 = getelementptr inbounds %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %16, i64 1
  %36 = getelementptr inbounds %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %4, i64 -1
  %37 = load %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %35, align 8
  %38 = load %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %16, align 8
  %39 = getelementptr %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %37, i64 0, i32 2
  %40 = load i32, i32* %39, align 8
  %41 = getelementptr %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %38, i64 0, i32 2
  %42 = load i32, i32* %41, align 8
  %43 = icmp slt i32 %40, %42
  %44 = load %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %36, align 8
  %45 = getelementptr %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %44, i64 0, i32 2
  %46 = load i32, i32* %45, align 8
  %47 = icmp slt i32 %46, %40
  %48 = ptrtoint %"class.v8::internal::RegExpCapture"* %37 to i64
  %49 = ptrtoint %"class.v8::internal::RegExpCapture"* %44 to i64
  %50 = ptrtoint %"class.v8::internal::RegExpCapture"* %38 to i64
  br i1 %43, label %66, label %51

51:                                               ; preds = %34
  br i1 %47, label %52, label %438

52:                                               ; preds = %51
  %53 = bitcast %"class.v8::internal::RegExpCapture"** %35 to i64*
  %54 = bitcast %"class.v8::internal::RegExpCapture"** %36 to i64*
  store i64 %49, i64* %53, align 8
  store i64 %48, i64* %54, align 8
  %55 = load %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %35, align 8
  %56 = load %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %16, align 8
  %57 = getelementptr %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %55, i64 0, i32 2
  %58 = load i32, i32* %57, align 8
  %59 = getelementptr %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %56, i64 0, i32 2
  %60 = load i32, i32* %59, align 8
  %61 = icmp slt i32 %58, %60
  br i1 %61, label %62, label %438

62:                                               ; preds = %52
  %63 = ptrtoint %"class.v8::internal::RegExpCapture"* %55 to i64
  %64 = ptrtoint %"class.v8::internal::RegExpCapture"* %56 to i64
  %65 = bitcast %"class.v8::internal::RegExpCapture"** %16 to i64*
  store i64 %63, i64* %65, align 8
  store i64 %64, i64* %53, align 8
  br label %438

66:                                               ; preds = %34
  %67 = bitcast %"class.v8::internal::RegExpCapture"** %16 to i64*
  br i1 %47, label %68, label %70

68:                                               ; preds = %66
  %69 = bitcast %"class.v8::internal::RegExpCapture"** %36 to i64*
  store i64 %49, i64* %67, align 8
  store i64 %50, i64* %69, align 8
  br label %438

70:                                               ; preds = %66
  %71 = bitcast %"class.v8::internal::RegExpCapture"** %35 to i64*
  store i64 %48, i64* %67, align 8
  store i64 %50, i64* %71, align 8
  %72 = load %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %36, align 8
  %73 = getelementptr %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %72, i64 0, i32 2
  %74 = load i32, i32* %73, align 8
  %75 = load i32, i32* %41, align 8
  %76 = icmp slt i32 %74, %75
  br i1 %76, label %77, label %438

77:                                               ; preds = %70
  %78 = ptrtoint %"class.v8::internal::RegExpCapture"* %72 to i64
  %79 = bitcast %"class.v8::internal::RegExpCapture"** %36 to i64*
  store i64 %78, i64* %71, align 8
  store i64 %50, i64* %79, align 8
  br label %438

80:                                               ; preds = %15
  %81 = getelementptr inbounds %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %16, i64 1
  %82 = getelementptr inbounds %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %16, i64 2
  %83 = getelementptr inbounds %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %4, i64 -1
  %84 = load %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %81, align 8
  %85 = load %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %16, align 8
  %86 = getelementptr %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %84, i64 0, i32 2
  %87 = load i32, i32* %86, align 8
  %88 = getelementptr %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %85, i64 0, i32 2
  %89 = load i32, i32* %88, align 8
  %90 = icmp slt i32 %87, %89
  %91 = load %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %82, align 8
  %92 = getelementptr %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %91, i64 0, i32 2
  %93 = load i32, i32* %92, align 8
  %94 = icmp slt i32 %93, %87
  %95 = ptrtoint %"class.v8::internal::RegExpCapture"* %84 to i64
  %96 = ptrtoint %"class.v8::internal::RegExpCapture"* %91 to i64
  %97 = ptrtoint %"class.v8::internal::RegExpCapture"* %85 to i64
  br i1 %90, label %107, label %98

98:                                               ; preds = %80
  br i1 %94, label %99, label %118

99:                                               ; preds = %98
  %100 = bitcast %"class.v8::internal::RegExpCapture"** %81 to i64*
  %101 = bitcast %"class.v8::internal::RegExpCapture"** %82 to i64*
  store i64 %96, i64* %100, align 8
  store i64 %95, i64* %101, align 8
  %102 = load i32, i32* %92, align 8
  %103 = load i32, i32* %88, align 8
  %104 = icmp slt i32 %102, %103
  br i1 %104, label %105, label %118

105:                                              ; preds = %99
  %106 = bitcast %"class.v8::internal::RegExpCapture"** %16 to i64*
  store i64 %96, i64* %106, align 8
  store i64 %97, i64* %100, align 8
  br label %118

107:                                              ; preds = %80
  %108 = bitcast %"class.v8::internal::RegExpCapture"** %16 to i64*
  br i1 %94, label %109, label %111

109:                                              ; preds = %107
  %110 = bitcast %"class.v8::internal::RegExpCapture"** %82 to i64*
  store i64 %96, i64* %108, align 8
  store i64 %97, i64* %110, align 8
  br label %118

111:                                              ; preds = %107
  %112 = bitcast %"class.v8::internal::RegExpCapture"** %81 to i64*
  store i64 %95, i64* %108, align 8
  store i64 %97, i64* %112, align 8
  %113 = load i32, i32* %92, align 8
  %114 = load i32, i32* %88, align 8
  %115 = icmp slt i32 %113, %114
  br i1 %115, label %116, label %118

116:                                              ; preds = %111
  %117 = bitcast %"class.v8::internal::RegExpCapture"** %82 to i64*
  store i64 %96, i64* %112, align 8
  store i64 %97, i64* %117, align 8
  br label %118

118:                                              ; preds = %116, %111, %109, %105, %99, %98
  %119 = phi i64 [ %97, %109 ], [ %96, %98 ], [ %95, %105 ], [ %95, %99 ], [ %97, %116 ], [ %96, %111 ]
  %120 = phi %"class.v8::internal::RegExpCapture"* [ %85, %109 ], [ %91, %98 ], [ %84, %105 ], [ %84, %99 ], [ %85, %116 ], [ %91, %111 ]
  %121 = load %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %83, align 8
  %122 = getelementptr %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %121, i64 0, i32 2
  %123 = load i32, i32* %122, align 8
  %124 = getelementptr %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %120, i64 0, i32 2
  %125 = load i32, i32* %124, align 8
  %126 = icmp slt i32 %123, %125
  br i1 %126, label %127, label %438

127:                                              ; preds = %118
  %128 = ptrtoint %"class.v8::internal::RegExpCapture"* %121 to i64
  %129 = bitcast %"class.v8::internal::RegExpCapture"** %82 to i64*
  %130 = bitcast %"class.v8::internal::RegExpCapture"** %83 to i64*
  store i64 %128, i64* %129, align 8
  store i64 %119, i64* %130, align 8
  %131 = load %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %82, align 8
  %132 = load %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %81, align 8
  %133 = getelementptr %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %131, i64 0, i32 2
  %134 = load i32, i32* %133, align 8
  %135 = getelementptr %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %132, i64 0, i32 2
  %136 = load i32, i32* %135, align 8
  %137 = icmp slt i32 %134, %136
  br i1 %137, label %138, label %438

138:                                              ; preds = %127
  %139 = ptrtoint %"class.v8::internal::RegExpCapture"* %131 to i64
  %140 = ptrtoint %"class.v8::internal::RegExpCapture"* %132 to i64
  %141 = bitcast %"class.v8::internal::RegExpCapture"** %81 to i64*
  store i64 %139, i64* %141, align 8
  store i64 %140, i64* %129, align 8
  %142 = load %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %16, align 8
  %143 = load i32, i32* %133, align 8
  %144 = getelementptr %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %142, i64 0, i32 2
  %145 = load i32, i32* %144, align 8
  %146 = icmp slt i32 %143, %145
  br i1 %146, label %147, label %438

147:                                              ; preds = %138
  %148 = ptrtoint %"class.v8::internal::RegExpCapture"* %142 to i64
  %149 = bitcast %"class.v8::internal::RegExpCapture"** %16 to i64*
  store i64 %139, i64* %149, align 8
  store i64 %148, i64* %141, align 8
  br label %438

150:                                              ; preds = %15
  %151 = getelementptr inbounds %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %16, i64 1
  %152 = getelementptr inbounds %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %16, i64 2
  %153 = getelementptr inbounds %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %16, i64 3
  %154 = getelementptr inbounds %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %4, i64 -1
  %155 = tail call fastcc i32 @_ZNSt3__17__sort5IRN2v88internal12_GLOBAL__N_122RegExpCaptureIndexLessEPPNS2_13RegExpCaptureEEEjT0_S9_S9_S9_S9_T_(%"class.v8::internal::RegExpCapture"** %16, %"class.v8::internal::RegExpCapture"** %151, %"class.v8::internal::RegExpCapture"** %152, %"class.v8::internal::RegExpCapture"** %153, %"class.v8::internal::RegExpCapture"** %154)
  br label %438

156:                                              ; preds = %15
  %157 = icmp slt i64 %18, 248
  br i1 %157, label %158, label %232

158:                                              ; preds = %156
  %159 = getelementptr inbounds %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %16, i64 2
  %160 = getelementptr inbounds %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %16, i64 1
  %161 = load %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %160, align 8
  %162 = load %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %16, align 8
  %163 = getelementptr %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %161, i64 0, i32 2
  %164 = load i32, i32* %163, align 8
  %165 = getelementptr %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %162, i64 0, i32 2
  %166 = load i32, i32* %165, align 8
  %167 = icmp slt i32 %164, %166
  %168 = load %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %159, align 8
  %169 = getelementptr %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %168, i64 0, i32 2
  %170 = load i32, i32* %169, align 8
  %171 = icmp slt i32 %170, %164
  %172 = ptrtoint %"class.v8::internal::RegExpCapture"* %161 to i64
  %173 = ptrtoint %"class.v8::internal::RegExpCapture"* %168 to i64
  %174 = ptrtoint %"class.v8::internal::RegExpCapture"* %162 to i64
  br i1 %167, label %184, label %175

175:                                              ; preds = %158
  br i1 %171, label %176, label %195

176:                                              ; preds = %175
  %177 = bitcast %"class.v8::internal::RegExpCapture"** %160 to i64*
  %178 = bitcast %"class.v8::internal::RegExpCapture"** %159 to i64*
  store i64 %173, i64* %177, align 8
  store i64 %172, i64* %178, align 8
  %179 = load i32, i32* %169, align 8
  %180 = load i32, i32* %165, align 8
  %181 = icmp slt i32 %179, %180
  br i1 %181, label %182, label %195

182:                                              ; preds = %176
  %183 = bitcast %"class.v8::internal::RegExpCapture"** %16 to i64*
  store i64 %173, i64* %183, align 8
  store i64 %174, i64* %177, align 8
  br label %195

184:                                              ; preds = %158
  %185 = bitcast %"class.v8::internal::RegExpCapture"** %16 to i64*
  br i1 %171, label %186, label %188

186:                                              ; preds = %184
  %187 = bitcast %"class.v8::internal::RegExpCapture"** %159 to i64*
  store i64 %173, i64* %185, align 8
  store i64 %174, i64* %187, align 8
  br label %195

188:                                              ; preds = %184
  %189 = bitcast %"class.v8::internal::RegExpCapture"** %160 to i64*
  store i64 %172, i64* %185, align 8
  store i64 %174, i64* %189, align 8
  %190 = load i32, i32* %169, align 8
  %191 = load i32, i32* %165, align 8
  %192 = icmp slt i32 %190, %191
  br i1 %192, label %193, label %195

193:                                              ; preds = %188
  %194 = bitcast %"class.v8::internal::RegExpCapture"** %159 to i64*
  store i64 %173, i64* %189, align 8
  store i64 %174, i64* %194, align 8
  br label %195

195:                                              ; preds = %193, %188, %186, %182, %176, %175
  %196 = phi %"class.v8::internal::RegExpCapture"* [ %168, %175 ], [ %161, %176 ], [ %161, %182 ], [ %162, %186 ], [ %168, %188 ], [ %162, %193 ]
  %197 = getelementptr inbounds %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %16, i64 3
  %198 = icmp eq %"class.v8::internal::RegExpCapture"** %197, %4
  br i1 %198, label %438, label %199

199:                                              ; preds = %195, %230
  %200 = phi %"class.v8::internal::RegExpCapture"* [ %231, %230 ], [ %196, %195 ]
  %201 = phi %"class.v8::internal::RegExpCapture"** [ %228, %230 ], [ %197, %195 ]
  %202 = phi %"class.v8::internal::RegExpCapture"** [ %201, %230 ], [ %159, %195 ]
  %203 = load %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %201, align 8
  %204 = getelementptr %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %203, i64 0, i32 2
  %205 = load i32, i32* %204, align 8
  %206 = getelementptr %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %200, i64 0, i32 2
  %207 = load i32, i32* %206, align 8
  %208 = icmp slt i32 %205, %207
  %209 = ptrtoint %"class.v8::internal::RegExpCapture"* %203 to i64
  br i1 %208, label %210, label %227

210:                                              ; preds = %199, %217
  %211 = phi %"class.v8::internal::RegExpCapture"** [ %212, %217 ], [ %201, %199 ]
  %212 = phi %"class.v8::internal::RegExpCapture"** [ %218, %217 ], [ %202, %199 ]
  %213 = bitcast %"class.v8::internal::RegExpCapture"** %212 to i64*
  %214 = load i64, i64* %213, align 8
  %215 = bitcast %"class.v8::internal::RegExpCapture"** %211 to i64*
  store i64 %214, i64* %215, align 8
  %216 = icmp eq %"class.v8::internal::RegExpCapture"** %212, %16
  br i1 %216, label %224, label %217

217:                                              ; preds = %210
  %218 = getelementptr inbounds %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %212, i64 -1
  %219 = load %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %218, align 8
  %220 = load i32, i32* %204, align 8
  %221 = getelementptr %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %219, i64 0, i32 2
  %222 = load i32, i32* %221, align 8
  %223 = icmp slt i32 %220, %222
  br i1 %223, label %210, label %224

224:                                              ; preds = %210, %217
  %225 = phi %"class.v8::internal::RegExpCapture"** [ %212, %217 ], [ %16, %210 ]
  %226 = bitcast %"class.v8::internal::RegExpCapture"** %225 to i64*
  store i64 %209, i64* %226, align 8
  br label %227

227:                                              ; preds = %224, %199
  %228 = getelementptr inbounds %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %201, i64 1
  %229 = icmp eq %"class.v8::internal::RegExpCapture"** %228, %4
  br i1 %229, label %438, label %230

230:                                              ; preds = %227
  %231 = load %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %201, align 8
  br label %199

232:                                              ; preds = %156
  %233 = icmp sgt i64 %18, 7992
  %234 = sdiv i64 %19, 2
  %235 = getelementptr inbounds %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %16, i64 %234
  br i1 %233, label %236, label %241

236:                                              ; preds = %232
  %237 = sdiv i64 %19, 4
  %238 = getelementptr inbounds %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %16, i64 %237
  %239 = getelementptr inbounds %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %235, i64 %237
  %240 = tail call fastcc i32 @_ZNSt3__17__sort5IRN2v88internal12_GLOBAL__N_122RegExpCaptureIndexLessEPPNS2_13RegExpCaptureEEEjT0_S9_S9_S9_S9_T_(%"class.v8::internal::RegExpCapture"** %16, %"class.v8::internal::RegExpCapture"** %238, %"class.v8::internal::RegExpCapture"** %235, %"class.v8::internal::RegExpCapture"** %239, %"class.v8::internal::RegExpCapture"** %7)
  br label %282

241:                                              ; preds = %232
  %242 = load %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %235, align 8
  %243 = load %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %16, align 8
  %244 = getelementptr %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %242, i64 0, i32 2
  %245 = load i32, i32* %244, align 8
  %246 = getelementptr %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %243, i64 0, i32 2
  %247 = load i32, i32* %246, align 8
  %248 = icmp slt i32 %245, %247
  %249 = load %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %7, align 8
  %250 = getelementptr %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %249, i64 0, i32 2
  %251 = load i32, i32* %250, align 8
  %252 = icmp slt i32 %251, %245
  %253 = ptrtoint %"class.v8::internal::RegExpCapture"* %242 to i64
  %254 = ptrtoint %"class.v8::internal::RegExpCapture"* %249 to i64
  %255 = ptrtoint %"class.v8::internal::RegExpCapture"* %243 to i64
  br i1 %248, label %270, label %256

256:                                              ; preds = %241
  br i1 %252, label %257, label %282

257:                                              ; preds = %256
  %258 = bitcast %"class.v8::internal::RegExpCapture"** %235 to i64*
  store i64 %254, i64* %258, align 8
  store i64 %253, i64* %8, align 8
  %259 = load %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %235, align 8
  %260 = load %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %16, align 8
  %261 = getelementptr %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %259, i64 0, i32 2
  %262 = load i32, i32* %261, align 8
  %263 = getelementptr %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %260, i64 0, i32 2
  %264 = load i32, i32* %263, align 8
  %265 = icmp slt i32 %262, %264
  br i1 %265, label %266, label %282

266:                                              ; preds = %257
  %267 = ptrtoint %"class.v8::internal::RegExpCapture"* %259 to i64
  %268 = ptrtoint %"class.v8::internal::RegExpCapture"* %260 to i64
  %269 = bitcast %"class.v8::internal::RegExpCapture"** %16 to i64*
  store i64 %267, i64* %269, align 8
  store i64 %268, i64* %258, align 8
  br label %282

270:                                              ; preds = %241
  %271 = bitcast %"class.v8::internal::RegExpCapture"** %16 to i64*
  br i1 %252, label %272, label %273

272:                                              ; preds = %270
  store i64 %254, i64* %271, align 8
  store i64 %255, i64* %10, align 8
  br label %282

273:                                              ; preds = %270
  %274 = bitcast %"class.v8::internal::RegExpCapture"** %235 to i64*
  store i64 %253, i64* %271, align 8
  store i64 %255, i64* %274, align 8
  %275 = load %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %7, align 8
  %276 = getelementptr %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %275, i64 0, i32 2
  %277 = load i32, i32* %276, align 8
  %278 = load i32, i32* %246, align 8
  %279 = icmp slt i32 %277, %278
  br i1 %279, label %280, label %282

280:                                              ; preds = %273
  %281 = ptrtoint %"class.v8::internal::RegExpCapture"* %275 to i64
  store i64 %281, i64* %274, align 8
  store i64 %255, i64* %9, align 8
  br label %282

282:                                              ; preds = %280, %273, %272, %266, %257, %256, %236
  %283 = phi i32 [ %240, %236 ], [ 1, %272 ], [ 0, %256 ], [ 2, %266 ], [ 1, %257 ], [ 2, %280 ], [ 1, %273 ]
  %284 = load %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %16, align 8
  %285 = load %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %235, align 8
  %286 = getelementptr %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %284, i64 0, i32 2
  %287 = load i32, i32* %286, align 8
  %288 = getelementptr %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %285, i64 0, i32 2
  %289 = load i32, i32* %288, align 8
  %290 = icmp slt i32 %287, %289
  br i1 %290, label %359, label %291

291:                                              ; preds = %282, %348
  %292 = phi %"class.v8::internal::RegExpCapture"** [ %293, %348 ], [ %7, %282 ]
  %293 = getelementptr inbounds %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %292, i64 -1
  %294 = icmp eq %"class.v8::internal::RegExpCapture"** %16, %293
  br i1 %294, label %295, label %348

295:                                              ; preds = %291
  %296 = getelementptr inbounds %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %16, i64 1
  %297 = load %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %7, align 8
  %298 = getelementptr %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %297, i64 0, i32 2
  %299 = load i32, i32* %298, align 8
  %300 = icmp slt i32 %287, %299
  %301 = ptrtoint %"class.v8::internal::RegExpCapture"* %297 to i64
  br i1 %300, label %317, label %302

302:                                              ; preds = %295
  %303 = icmp eq %"class.v8::internal::RegExpCapture"** %296, %7
  br i1 %303, label %438, label %304

304:                                              ; preds = %302, %314
  %305 = phi %"class.v8::internal::RegExpCapture"** [ %315, %314 ], [ %296, %302 ]
  %306 = load %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %305, align 8
  %307 = getelementptr %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %306, i64 0, i32 2
  %308 = load i32, i32* %307, align 8
  %309 = icmp slt i32 %287, %308
  br i1 %309, label %310, label %314

310:                                              ; preds = %304
  %311 = ptrtoint %"class.v8::internal::RegExpCapture"* %306 to i64
  %312 = bitcast %"class.v8::internal::RegExpCapture"** %305 to i64*
  store i64 %301, i64* %312, align 8
  store i64 %311, i64* %11, align 8
  %313 = getelementptr inbounds %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %305, i64 1
  br label %317

314:                                              ; preds = %304
  %315 = getelementptr inbounds %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %305, i64 1
  %316 = icmp eq %"class.v8::internal::RegExpCapture"** %315, %7
  br i1 %316, label %438, label %304

317:                                              ; preds = %310, %295
  %318 = phi %"class.v8::internal::RegExpCapture"** [ %296, %295 ], [ %313, %310 ]
  %319 = icmp eq %"class.v8::internal::RegExpCapture"** %318, %7
  br i1 %319, label %438, label %320

320:                                              ; preds = %317, %344
  %321 = phi %"class.v8::internal::RegExpCapture"** [ %332, %344 ], [ %318, %317 ]
  %322 = phi %"class.v8::internal::RegExpCapture"** [ %337, %344 ], [ %7, %317 ]
  %323 = load %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %16, align 8
  %324 = getelementptr %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %323, i64 0, i32 2
  %325 = load i32, i32* %324, align 8
  br label %326

326:                                              ; preds = %326, %320
  %327 = phi %"class.v8::internal::RegExpCapture"** [ %321, %320 ], [ %332, %326 ]
  %328 = load %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %327, align 8
  %329 = getelementptr %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %328, i64 0, i32 2
  %330 = load i32, i32* %329, align 8
  %331 = icmp slt i32 %325, %330
  %332 = getelementptr inbounds %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %327, i64 1
  br i1 %331, label %333, label %326

333:                                              ; preds = %326
  %334 = ptrtoint %"class.v8::internal::RegExpCapture"* %328 to i64
  br label %335

335:                                              ; preds = %333, %335
  %336 = phi %"class.v8::internal::RegExpCapture"** [ %337, %335 ], [ %322, %333 ]
  %337 = getelementptr inbounds %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %336, i64 -1
  %338 = load %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %337, align 8
  %339 = getelementptr %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %338, i64 0, i32 2
  %340 = load i32, i32* %339, align 8
  %341 = icmp slt i32 %325, %340
  br i1 %341, label %335, label %342

342:                                              ; preds = %335
  %343 = icmp ult %"class.v8::internal::RegExpCapture"** %327, %337
  br i1 %343, label %344, label %15

344:                                              ; preds = %342
  %345 = ptrtoint %"class.v8::internal::RegExpCapture"* %338 to i64
  %346 = bitcast %"class.v8::internal::RegExpCapture"** %327 to i64*
  %347 = bitcast %"class.v8::internal::RegExpCapture"** %337 to i64*
  store i64 %345, i64* %346, align 8
  store i64 %334, i64* %347, align 8
  br label %320

348:                                              ; preds = %291
  %349 = load %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %293, align 8
  %350 = getelementptr %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %349, i64 0, i32 2
  %351 = load i32, i32* %350, align 8
  %352 = icmp slt i32 %351, %289
  br i1 %352, label %353, label %291

353:                                              ; preds = %348
  %354 = ptrtoint %"class.v8::internal::RegExpCapture"* %284 to i64
  %355 = ptrtoint %"class.v8::internal::RegExpCapture"* %349 to i64
  %356 = bitcast %"class.v8::internal::RegExpCapture"** %16 to i64*
  %357 = bitcast %"class.v8::internal::RegExpCapture"** %293 to i64*
  store i64 %355, i64* %356, align 8
  store i64 %354, i64* %357, align 8
  %358 = add i32 %283, 1
  br label %359

359:                                              ; preds = %282, %353
  %360 = phi i32 [ %358, %353 ], [ %283, %282 ]
  %361 = phi %"class.v8::internal::RegExpCapture"** [ %293, %353 ], [ %7, %282 ]
  %362 = ptrtoint %"class.v8::internal::RegExpCapture"** %16 to i64
  %363 = getelementptr inbounds %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %16, i64 1
  %364 = icmp ult %"class.v8::internal::RegExpCapture"** %363, %361
  br i1 %364, label %365, label %398

365:                                              ; preds = %359, %391
  %366 = phi %"class.v8::internal::RegExpCapture"** [ %397, %391 ], [ %235, %359 ]
  %367 = phi i32 [ %395, %391 ], [ %360, %359 ]
  %368 = phi %"class.v8::internal::RegExpCapture"** [ %379, %391 ], [ %363, %359 ]
  %369 = phi %"class.v8::internal::RegExpCapture"** [ %384, %391 ], [ %361, %359 ]
  %370 = load %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %366, align 8
  %371 = getelementptr %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %370, i64 0, i32 2
  %372 = load i32, i32* %371, align 8
  br label %373

373:                                              ; preds = %373, %365
  %374 = phi %"class.v8::internal::RegExpCapture"** [ %368, %365 ], [ %379, %373 ]
  %375 = load %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %374, align 8
  %376 = getelementptr %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %375, i64 0, i32 2
  %377 = load i32, i32* %376, align 8
  %378 = icmp slt i32 %377, %372
  %379 = getelementptr inbounds %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %374, i64 1
  br i1 %378, label %373, label %380

380:                                              ; preds = %373
  %381 = ptrtoint %"class.v8::internal::RegExpCapture"* %375 to i64
  br label %382

382:                                              ; preds = %380, %382
  %383 = phi %"class.v8::internal::RegExpCapture"** [ %384, %382 ], [ %369, %380 ]
  %384 = getelementptr inbounds %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %383, i64 -1
  %385 = load %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %384, align 8
  %386 = getelementptr %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %385, i64 0, i32 2
  %387 = load i32, i32* %386, align 8
  %388 = icmp slt i32 %387, %372
  br i1 %388, label %389, label %382

389:                                              ; preds = %382
  %390 = icmp ugt %"class.v8::internal::RegExpCapture"** %374, %384
  br i1 %390, label %398, label %391

391:                                              ; preds = %389
  %392 = ptrtoint %"class.v8::internal::RegExpCapture"* %385 to i64
  %393 = bitcast %"class.v8::internal::RegExpCapture"** %374 to i64*
  %394 = bitcast %"class.v8::internal::RegExpCapture"** %384 to i64*
  store i64 %392, i64* %393, align 8
  store i64 %381, i64* %394, align 8
  %395 = add i32 %367, 1
  %396 = icmp eq %"class.v8::internal::RegExpCapture"** %366, %374
  %397 = select i1 %396, %"class.v8::internal::RegExpCapture"** %384, %"class.v8::internal::RegExpCapture"** %366
  br label %365

398:                                              ; preds = %389, %359
  %399 = phi %"class.v8::internal::RegExpCapture"** [ %235, %359 ], [ %366, %389 ]
  %400 = phi i32 [ %360, %359 ], [ %367, %389 ]
  %401 = phi %"class.v8::internal::RegExpCapture"** [ %363, %359 ], [ %374, %389 ]
  %402 = icmp eq %"class.v8::internal::RegExpCapture"** %401, %399
  br i1 %402, label %417, label %403

403:                                              ; preds = %398
  %404 = load %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %399, align 8
  %405 = load %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %401, align 8
  %406 = getelementptr %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %404, i64 0, i32 2
  %407 = load i32, i32* %406, align 8
  %408 = getelementptr %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %405, i64 0, i32 2
  %409 = load i32, i32* %408, align 8
  %410 = icmp slt i32 %407, %409
  br i1 %410, label %411, label %417

411:                                              ; preds = %403
  %412 = ptrtoint %"class.v8::internal::RegExpCapture"* %404 to i64
  %413 = ptrtoint %"class.v8::internal::RegExpCapture"* %405 to i64
  %414 = bitcast %"class.v8::internal::RegExpCapture"** %401 to i64*
  %415 = bitcast %"class.v8::internal::RegExpCapture"** %399 to i64*
  store i64 %412, i64* %414, align 8
  store i64 %413, i64* %415, align 8
  %416 = add i32 %400, 1
  br label %417

417:                                              ; preds = %398, %411, %403
  %418 = phi i32 [ %416, %411 ], [ %400, %403 ], [ %400, %398 ]
  %419 = icmp eq i32 %418, 0
  br i1 %419, label %420, label %427

420:                                              ; preds = %417
  %421 = tail call fastcc zeroext i1 @_ZNSt3__127__insertion_sort_incompleteIRN2v88internal12_GLOBAL__N_122RegExpCaptureIndexLessEPPNS2_13RegExpCaptureEEEbT0_S9_T_(%"class.v8::internal::RegExpCapture"** %16, %"class.v8::internal::RegExpCapture"** %401)
  %422 = getelementptr inbounds %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %401, i64 1
  %423 = tail call fastcc zeroext i1 @_ZNSt3__127__insertion_sort_incompleteIRN2v88internal12_GLOBAL__N_122RegExpCaptureIndexLessEPPNS2_13RegExpCaptureEEEbT0_S9_T_(%"class.v8::internal::RegExpCapture"** %422, %"class.v8::internal::RegExpCapture"** %4)
  br i1 %423, label %424, label %426

424:                                              ; preds = %420
  br i1 %421, label %438, label %425

425:                                              ; preds = %424, %436
  br label %3

426:                                              ; preds = %420
  br i1 %421, label %434, label %427

427:                                              ; preds = %426, %417
  %428 = ptrtoint %"class.v8::internal::RegExpCapture"** %401 to i64
  %429 = sub i64 %428, %362
  %430 = sub i64 %12, %428
  %431 = icmp slt i64 %429, %430
  br i1 %431, label %432, label %436

432:                                              ; preds = %427
  tail call fastcc void @_ZNSt3__16__sortIRN2v88internal12_GLOBAL__N_122RegExpCaptureIndexLessEPPNS2_13RegExpCaptureEEEvT0_S9_T_(%"class.v8::internal::RegExpCapture"** %16, %"class.v8::internal::RegExpCapture"** %401)
  %433 = getelementptr inbounds %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %401, i64 1
  br label %434

434:                                              ; preds = %432, %426
  %435 = phi %"class.v8::internal::RegExpCapture"** [ %422, %426 ], [ %433, %432 ]
  br label %13

436:                                              ; preds = %427
  %437 = getelementptr inbounds %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %401, i64 1
  tail call fastcc void @_ZNSt3__16__sortIRN2v88internal12_GLOBAL__N_122RegExpCaptureIndexLessEPPNS2_13RegExpCaptureEEEvT0_S9_T_(%"class.v8::internal::RegExpCapture"** %437, %"class.v8::internal::RegExpCapture"** %4)
  br label %425

438:                                              ; preds = %424, %317, %15, %15, %302, %314, %227, %195, %147, %138, %127, %118, %77, %70, %68, %62, %52, %51, %20, %29, %150
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc i32 @_ZNSt3__17__sort5IRN2v88internal12_GLOBAL__N_122RegExpCaptureIndexLessEPPNS2_13RegExpCaptureEEEjT0_S9_S9_S9_S9_T_(%"class.v8::internal::RegExpCapture"** nocapture, %"class.v8::internal::RegExpCapture"** nocapture, %"class.v8::internal::RegExpCapture"** nocapture, %"class.v8::internal::RegExpCapture"** nocapture, %"class.v8::internal::RegExpCapture"** nocapture) unnamed_addr #4 {
  %6 = load %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %1, align 8
  %7 = load %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %0, align 8
  %8 = getelementptr %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %6, i64 0, i32 2
  %9 = load i32, i32* %8, align 8
  %10 = getelementptr %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %7, i64 0, i32 2
  %11 = load i32, i32* %10, align 8
  %12 = icmp slt i32 %9, %11
  %13 = load %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %2, align 8
  %14 = getelementptr %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %13, i64 0, i32 2
  %15 = load i32, i32* %14, align 8
  %16 = icmp slt i32 %15, %9
  %17 = ptrtoint %"class.v8::internal::RegExpCapture"* %6 to i64
  %18 = ptrtoint %"class.v8::internal::RegExpCapture"* %13 to i64
  %19 = ptrtoint %"class.v8::internal::RegExpCapture"* %7 to i64
  br i1 %12, label %37, label %20

20:                                               ; preds = %5
  br i1 %16, label %21, label %51

21:                                               ; preds = %20
  %22 = bitcast %"class.v8::internal::RegExpCapture"** %1 to i64*
  %23 = bitcast %"class.v8::internal::RegExpCapture"** %2 to i64*
  store i64 %18, i64* %22, align 8
  store i64 %17, i64* %23, align 8
  %24 = load %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %1, align 8
  %25 = load %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %0, align 8
  %26 = getelementptr %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %24, i64 0, i32 2
  %27 = load i32, i32* %26, align 8
  %28 = getelementptr %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %25, i64 0, i32 2
  %29 = load i32, i32* %28, align 8
  %30 = icmp slt i32 %27, %29
  br i1 %30, label %31, label %51

31:                                               ; preds = %21
  %32 = ptrtoint %"class.v8::internal::RegExpCapture"* %24 to i64
  %33 = ptrtoint %"class.v8::internal::RegExpCapture"* %25 to i64
  %34 = bitcast %"class.v8::internal::RegExpCapture"** %0 to i64*
  store i64 %32, i64* %34, align 8
  store i64 %33, i64* %22, align 8
  %35 = load %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %2, align 8
  %36 = ptrtoint %"class.v8::internal::RegExpCapture"* %35 to i64
  br label %51

37:                                               ; preds = %5
  %38 = bitcast %"class.v8::internal::RegExpCapture"** %0 to i64*
  br i1 %16, label %39, label %41

39:                                               ; preds = %37
  %40 = bitcast %"class.v8::internal::RegExpCapture"** %2 to i64*
  store i64 %18, i64* %38, align 8
  store i64 %19, i64* %40, align 8
  br label %51

41:                                               ; preds = %37
  %42 = bitcast %"class.v8::internal::RegExpCapture"** %1 to i64*
  store i64 %17, i64* %38, align 8
  store i64 %19, i64* %42, align 8
  %43 = load %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %2, align 8
  %44 = getelementptr %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %43, i64 0, i32 2
  %45 = load i32, i32* %44, align 8
  %46 = load i32, i32* %10, align 8
  %47 = icmp slt i32 %45, %46
  %48 = ptrtoint %"class.v8::internal::RegExpCapture"* %43 to i64
  br i1 %47, label %49, label %51

49:                                               ; preds = %41
  %50 = bitcast %"class.v8::internal::RegExpCapture"** %2 to i64*
  store i64 %48, i64* %42, align 8
  store i64 %19, i64* %50, align 8
  br label %51

51:                                               ; preds = %49, %41, %39, %31, %21, %20
  %52 = phi i64 [ %19, %39 ], [ %18, %20 ], [ %36, %31 ], [ %17, %21 ], [ %19, %49 ], [ %48, %41 ]
  %53 = phi %"class.v8::internal::RegExpCapture"* [ %7, %39 ], [ %13, %20 ], [ %35, %31 ], [ %6, %21 ], [ %7, %49 ], [ %43, %41 ]
  %54 = phi i32 [ 1, %39 ], [ 0, %20 ], [ 2, %31 ], [ 1, %21 ], [ 2, %49 ], [ 1, %41 ]
  %55 = load %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %3, align 8
  %56 = getelementptr %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %55, i64 0, i32 2
  %57 = load i32, i32* %56, align 8
  %58 = getelementptr %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %53, i64 0, i32 2
  %59 = load i32, i32* %58, align 8
  %60 = icmp slt i32 %57, %59
  br i1 %60, label %61, label %90

61:                                               ; preds = %51
  %62 = ptrtoint %"class.v8::internal::RegExpCapture"* %55 to i64
  %63 = bitcast %"class.v8::internal::RegExpCapture"** %2 to i64*
  %64 = bitcast %"class.v8::internal::RegExpCapture"** %3 to i64*
  store i64 %62, i64* %63, align 8
  store i64 %52, i64* %64, align 8
  %65 = add nuw nsw i32 %54, 1
  %66 = load %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %2, align 8
  %67 = load %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %1, align 8
  %68 = getelementptr %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %66, i64 0, i32 2
  %69 = load i32, i32* %68, align 8
  %70 = getelementptr %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %67, i64 0, i32 2
  %71 = load i32, i32* %70, align 8
  %72 = icmp slt i32 %69, %71
  br i1 %72, label %73, label %90

73:                                               ; preds = %61
  %74 = ptrtoint %"class.v8::internal::RegExpCapture"* %66 to i64
  %75 = ptrtoint %"class.v8::internal::RegExpCapture"* %67 to i64
  %76 = bitcast %"class.v8::internal::RegExpCapture"** %1 to i64*
  store i64 %74, i64* %76, align 8
  store i64 %75, i64* %63, align 8
  %77 = add nuw nsw i32 %54, 2
  %78 = load %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %1, align 8
  %79 = load %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %0, align 8
  %80 = getelementptr %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %78, i64 0, i32 2
  %81 = load i32, i32* %80, align 8
  %82 = getelementptr %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %79, i64 0, i32 2
  %83 = load i32, i32* %82, align 8
  %84 = icmp slt i32 %81, %83
  br i1 %84, label %85, label %90

85:                                               ; preds = %73
  %86 = ptrtoint %"class.v8::internal::RegExpCapture"* %78 to i64
  %87 = ptrtoint %"class.v8::internal::RegExpCapture"* %79 to i64
  %88 = bitcast %"class.v8::internal::RegExpCapture"** %0 to i64*
  store i64 %86, i64* %88, align 8
  store i64 %87, i64* %76, align 8
  %89 = add nuw nsw i32 %54, 3
  br label %90

90:                                               ; preds = %51, %61, %73, %85
  %91 = phi i32 [ %89, %85 ], [ %77, %73 ], [ %65, %61 ], [ %54, %51 ]
  %92 = load %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %4, align 8
  %93 = load %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %3, align 8
  %94 = getelementptr %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %92, i64 0, i32 2
  %95 = load i32, i32* %94, align 8
  %96 = getelementptr %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %93, i64 0, i32 2
  %97 = load i32, i32* %96, align 8
  %98 = icmp slt i32 %95, %97
  br i1 %98, label %99, label %141

99:                                               ; preds = %90
  %100 = ptrtoint %"class.v8::internal::RegExpCapture"* %92 to i64
  %101 = ptrtoint %"class.v8::internal::RegExpCapture"* %93 to i64
  %102 = bitcast %"class.v8::internal::RegExpCapture"** %3 to i64*
  %103 = bitcast %"class.v8::internal::RegExpCapture"** %4 to i64*
  store i64 %100, i64* %102, align 8
  store i64 %101, i64* %103, align 8
  %104 = add nuw nsw i32 %91, 1
  %105 = load %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %3, align 8
  %106 = load %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %2, align 8
  %107 = getelementptr %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %105, i64 0, i32 2
  %108 = load i32, i32* %107, align 8
  %109 = getelementptr %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %106, i64 0, i32 2
  %110 = load i32, i32* %109, align 8
  %111 = icmp slt i32 %108, %110
  br i1 %111, label %112, label %141

112:                                              ; preds = %99
  %113 = ptrtoint %"class.v8::internal::RegExpCapture"* %105 to i64
  %114 = ptrtoint %"class.v8::internal::RegExpCapture"* %106 to i64
  %115 = bitcast %"class.v8::internal::RegExpCapture"** %2 to i64*
  store i64 %113, i64* %115, align 8
  store i64 %114, i64* %102, align 8
  %116 = add nuw nsw i32 %91, 2
  %117 = load %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %2, align 8
  %118 = load %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %1, align 8
  %119 = getelementptr %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %117, i64 0, i32 2
  %120 = load i32, i32* %119, align 8
  %121 = getelementptr %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %118, i64 0, i32 2
  %122 = load i32, i32* %121, align 8
  %123 = icmp slt i32 %120, %122
  br i1 %123, label %124, label %141

124:                                              ; preds = %112
  %125 = ptrtoint %"class.v8::internal::RegExpCapture"* %117 to i64
  %126 = ptrtoint %"class.v8::internal::RegExpCapture"* %118 to i64
  %127 = bitcast %"class.v8::internal::RegExpCapture"** %1 to i64*
  store i64 %125, i64* %127, align 8
  store i64 %126, i64* %115, align 8
  %128 = add nuw nsw i32 %91, 3
  %129 = load %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %1, align 8
  %130 = load %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %0, align 8
  %131 = getelementptr %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %129, i64 0, i32 2
  %132 = load i32, i32* %131, align 8
  %133 = getelementptr %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %130, i64 0, i32 2
  %134 = load i32, i32* %133, align 8
  %135 = icmp slt i32 %132, %134
  br i1 %135, label %136, label %141

136:                                              ; preds = %124
  %137 = ptrtoint %"class.v8::internal::RegExpCapture"* %129 to i64
  %138 = ptrtoint %"class.v8::internal::RegExpCapture"* %130 to i64
  %139 = bitcast %"class.v8::internal::RegExpCapture"** %0 to i64*
  store i64 %137, i64* %139, align 8
  store i64 %138, i64* %127, align 8
  %140 = add nuw nsw i32 %91, 4
  br label %141

141:                                              ; preds = %99, %124, %136, %112, %90
  %142 = phi i32 [ %140, %136 ], [ %128, %124 ], [ %116, %112 ], [ %104, %99 ], [ %91, %90 ]
  ret i32 %142
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @_ZNSt3__127__insertion_sort_incompleteIRN2v88internal12_GLOBAL__N_122RegExpCaptureIndexLessEPPNS2_13RegExpCaptureEEEbT0_S9_T_(%"class.v8::internal::RegExpCapture"**, %"class.v8::internal::RegExpCapture"**) unnamed_addr #0 {
  %3 = ptrtoint %"class.v8::internal::RegExpCapture"** %1 to i64
  %4 = ptrtoint %"class.v8::internal::RegExpCapture"** %0 to i64
  %5 = sub i64 %3, %4
  %6 = ashr exact i64 %5, 3
  switch i64 %6, label %143 [
    i64 0, label %224
    i64 1, label %224
    i64 2, label %7
    i64 3, label %21
    i64 4, label %67
    i64 5, label %137
  ]

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %1, i64 -1
  %9 = load %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %8, align 8
  %10 = load %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %0, align 8
  %11 = getelementptr %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %9, i64 0, i32 2
  %12 = load i32, i32* %11, align 8
  %13 = getelementptr %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %10, i64 0, i32 2
  %14 = load i32, i32* %13, align 8
  %15 = icmp slt i32 %12, %14
  br i1 %15, label %16, label %224

16:                                               ; preds = %7
  %17 = ptrtoint %"class.v8::internal::RegExpCapture"* %9 to i64
  %18 = ptrtoint %"class.v8::internal::RegExpCapture"* %10 to i64
  %19 = bitcast %"class.v8::internal::RegExpCapture"** %0 to i64*
  %20 = bitcast %"class.v8::internal::RegExpCapture"** %8 to i64*
  store i64 %17, i64* %19, align 8
  store i64 %18, i64* %20, align 8
  br label %224

21:                                               ; preds = %2
  %22 = getelementptr inbounds %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %0, i64 1
  %23 = getelementptr inbounds %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %1, i64 -1
  %24 = load %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %22, align 8
  %25 = load %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %0, align 8
  %26 = getelementptr %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %24, i64 0, i32 2
  %27 = load i32, i32* %26, align 8
  %28 = getelementptr %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %25, i64 0, i32 2
  %29 = load i32, i32* %28, align 8
  %30 = icmp slt i32 %27, %29
  %31 = load %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %23, align 8
  %32 = getelementptr %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %31, i64 0, i32 2
  %33 = load i32, i32* %32, align 8
  %34 = icmp slt i32 %33, %27
  %35 = ptrtoint %"class.v8::internal::RegExpCapture"* %24 to i64
  %36 = ptrtoint %"class.v8::internal::RegExpCapture"* %31 to i64
  %37 = ptrtoint %"class.v8::internal::RegExpCapture"* %25 to i64
  br i1 %30, label %53, label %38

38:                                               ; preds = %21
  br i1 %34, label %39, label %224

39:                                               ; preds = %38
  %40 = bitcast %"class.v8::internal::RegExpCapture"** %22 to i64*
  %41 = bitcast %"class.v8::internal::RegExpCapture"** %23 to i64*
  store i64 %36, i64* %40, align 8
  store i64 %35, i64* %41, align 8
  %42 = load %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %22, align 8
  %43 = load %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %0, align 8
  %44 = getelementptr %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %42, i64 0, i32 2
  %45 = load i32, i32* %44, align 8
  %46 = getelementptr %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %43, i64 0, i32 2
  %47 = load i32, i32* %46, align 8
  %48 = icmp slt i32 %45, %47
  br i1 %48, label %49, label %224

49:                                               ; preds = %39
  %50 = ptrtoint %"class.v8::internal::RegExpCapture"* %42 to i64
  %51 = ptrtoint %"class.v8::internal::RegExpCapture"* %43 to i64
  %52 = bitcast %"class.v8::internal::RegExpCapture"** %0 to i64*
  store i64 %50, i64* %52, align 8
  store i64 %51, i64* %40, align 8
  br label %224

53:                                               ; preds = %21
  %54 = bitcast %"class.v8::internal::RegExpCapture"** %0 to i64*
  br i1 %34, label %55, label %57

55:                                               ; preds = %53
  %56 = bitcast %"class.v8::internal::RegExpCapture"** %23 to i64*
  store i64 %36, i64* %54, align 8
  store i64 %37, i64* %56, align 8
  br label %224

57:                                               ; preds = %53
  %58 = bitcast %"class.v8::internal::RegExpCapture"** %22 to i64*
  store i64 %35, i64* %54, align 8
  store i64 %37, i64* %58, align 8
  %59 = load %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %23, align 8
  %60 = getelementptr %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %59, i64 0, i32 2
  %61 = load i32, i32* %60, align 8
  %62 = load i32, i32* %28, align 8
  %63 = icmp slt i32 %61, %62
  br i1 %63, label %64, label %224

64:                                               ; preds = %57
  %65 = ptrtoint %"class.v8::internal::RegExpCapture"* %59 to i64
  %66 = bitcast %"class.v8::internal::RegExpCapture"** %23 to i64*
  store i64 %65, i64* %58, align 8
  store i64 %37, i64* %66, align 8
  br label %224

67:                                               ; preds = %2
  %68 = getelementptr inbounds %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %0, i64 1
  %69 = getelementptr inbounds %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %0, i64 2
  %70 = getelementptr inbounds %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %1, i64 -1
  %71 = load %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %68, align 8
  %72 = load %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %0, align 8
  %73 = getelementptr %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %71, i64 0, i32 2
  %74 = load i32, i32* %73, align 8
  %75 = getelementptr %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %72, i64 0, i32 2
  %76 = load i32, i32* %75, align 8
  %77 = icmp slt i32 %74, %76
  %78 = load %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %69, align 8
  %79 = getelementptr %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %78, i64 0, i32 2
  %80 = load i32, i32* %79, align 8
  %81 = icmp slt i32 %80, %74
  %82 = ptrtoint %"class.v8::internal::RegExpCapture"* %71 to i64
  %83 = ptrtoint %"class.v8::internal::RegExpCapture"* %78 to i64
  %84 = ptrtoint %"class.v8::internal::RegExpCapture"* %72 to i64
  br i1 %77, label %94, label %85

85:                                               ; preds = %67
  br i1 %81, label %86, label %105

86:                                               ; preds = %85
  %87 = bitcast %"class.v8::internal::RegExpCapture"** %68 to i64*
  %88 = bitcast %"class.v8::internal::RegExpCapture"** %69 to i64*
  store i64 %83, i64* %87, align 8
  store i64 %82, i64* %88, align 8
  %89 = load i32, i32* %79, align 8
  %90 = load i32, i32* %75, align 8
  %91 = icmp slt i32 %89, %90
  br i1 %91, label %92, label %105

92:                                               ; preds = %86
  %93 = bitcast %"class.v8::internal::RegExpCapture"** %0 to i64*
  store i64 %83, i64* %93, align 8
  store i64 %84, i64* %87, align 8
  br label %105

94:                                               ; preds = %67
  %95 = bitcast %"class.v8::internal::RegExpCapture"** %0 to i64*
  br i1 %81, label %96, label %98

96:                                               ; preds = %94
  %97 = bitcast %"class.v8::internal::RegExpCapture"** %69 to i64*
  store i64 %83, i64* %95, align 8
  store i64 %84, i64* %97, align 8
  br label %105

98:                                               ; preds = %94
  %99 = bitcast %"class.v8::internal::RegExpCapture"** %68 to i64*
  store i64 %82, i64* %95, align 8
  store i64 %84, i64* %99, align 8
  %100 = load i32, i32* %79, align 8
  %101 = load i32, i32* %75, align 8
  %102 = icmp slt i32 %100, %101
  br i1 %102, label %103, label %105

103:                                              ; preds = %98
  %104 = bitcast %"class.v8::internal::RegExpCapture"** %69 to i64*
  store i64 %83, i64* %99, align 8
  store i64 %84, i64* %104, align 8
  br label %105

105:                                              ; preds = %103, %98, %96, %92, %86, %85
  %106 = phi i64 [ %84, %96 ], [ %83, %85 ], [ %82, %92 ], [ %82, %86 ], [ %84, %103 ], [ %83, %98 ]
  %107 = phi %"class.v8::internal::RegExpCapture"* [ %72, %96 ], [ %78, %85 ], [ %71, %92 ], [ %71, %86 ], [ %72, %103 ], [ %78, %98 ]
  %108 = load %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %70, align 8
  %109 = getelementptr %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %108, i64 0, i32 2
  %110 = load i32, i32* %109, align 8
  %111 = getelementptr %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %107, i64 0, i32 2
  %112 = load i32, i32* %111, align 8
  %113 = icmp slt i32 %110, %112
  br i1 %113, label %114, label %224

114:                                              ; preds = %105
  %115 = ptrtoint %"class.v8::internal::RegExpCapture"* %108 to i64
  %116 = bitcast %"class.v8::internal::RegExpCapture"** %69 to i64*
  %117 = bitcast %"class.v8::internal::RegExpCapture"** %70 to i64*
  store i64 %115, i64* %116, align 8
  store i64 %106, i64* %117, align 8
  %118 = load %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %69, align 8
  %119 = load %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %68, align 8
  %120 = getelementptr %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %118, i64 0, i32 2
  %121 = load i32, i32* %120, align 8
  %122 = getelementptr %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %119, i64 0, i32 2
  %123 = load i32, i32* %122, align 8
  %124 = icmp slt i32 %121, %123
  br i1 %124, label %125, label %224

125:                                              ; preds = %114
  %126 = ptrtoint %"class.v8::internal::RegExpCapture"* %118 to i64
  %127 = ptrtoint %"class.v8::internal::RegExpCapture"* %119 to i64
  %128 = bitcast %"class.v8::internal::RegExpCapture"** %68 to i64*
  store i64 %126, i64* %128, align 8
  store i64 %127, i64* %116, align 8
  %129 = load %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %0, align 8
  %130 = load i32, i32* %120, align 8
  %131 = getelementptr %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %129, i64 0, i32 2
  %132 = load i32, i32* %131, align 8
  %133 = icmp slt i32 %130, %132
  br i1 %133, label %134, label %224

134:                                              ; preds = %125
  %135 = ptrtoint %"class.v8::internal::RegExpCapture"* %129 to i64
  %136 = bitcast %"class.v8::internal::RegExpCapture"** %0 to i64*
  store i64 %126, i64* %136, align 8
  store i64 %135, i64* %128, align 8
  br label %224

137:                                              ; preds = %2
  %138 = getelementptr inbounds %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %0, i64 1
  %139 = getelementptr inbounds %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %0, i64 2
  %140 = getelementptr inbounds %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %0, i64 3
  %141 = getelementptr inbounds %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %1, i64 -1
  %142 = tail call fastcc i32 @_ZNSt3__17__sort5IRN2v88internal12_GLOBAL__N_122RegExpCaptureIndexLessEPPNS2_13RegExpCaptureEEEjT0_S9_S9_S9_S9_T_(%"class.v8::internal::RegExpCapture"** %0, %"class.v8::internal::RegExpCapture"** %138, %"class.v8::internal::RegExpCapture"** %139, %"class.v8::internal::RegExpCapture"** %140, %"class.v8::internal::RegExpCapture"** %141)
  br label %224

143:                                              ; preds = %2
  %144 = getelementptr inbounds %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %0, i64 2
  %145 = getelementptr inbounds %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %0, i64 1
  %146 = load %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %145, align 8
  %147 = load %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %0, align 8
  %148 = getelementptr %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %146, i64 0, i32 2
  %149 = load i32, i32* %148, align 8
  %150 = getelementptr %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %147, i64 0, i32 2
  %151 = load i32, i32* %150, align 8
  %152 = icmp slt i32 %149, %151
  %153 = load %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %144, align 8
  %154 = getelementptr %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %153, i64 0, i32 2
  %155 = load i32, i32* %154, align 8
  %156 = icmp slt i32 %155, %149
  %157 = ptrtoint %"class.v8::internal::RegExpCapture"* %146 to i64
  %158 = ptrtoint %"class.v8::internal::RegExpCapture"* %153 to i64
  %159 = ptrtoint %"class.v8::internal::RegExpCapture"* %147 to i64
  br i1 %152, label %169, label %160

160:                                              ; preds = %143
  br i1 %156, label %161, label %180

161:                                              ; preds = %160
  %162 = bitcast %"class.v8::internal::RegExpCapture"** %145 to i64*
  %163 = bitcast %"class.v8::internal::RegExpCapture"** %144 to i64*
  store i64 %158, i64* %162, align 8
  store i64 %157, i64* %163, align 8
  %164 = load i32, i32* %154, align 8
  %165 = load i32, i32* %150, align 8
  %166 = icmp slt i32 %164, %165
  br i1 %166, label %167, label %180

167:                                              ; preds = %161
  %168 = bitcast %"class.v8::internal::RegExpCapture"** %0 to i64*
  store i64 %158, i64* %168, align 8
  store i64 %159, i64* %162, align 8
  br label %180

169:                                              ; preds = %143
  %170 = bitcast %"class.v8::internal::RegExpCapture"** %0 to i64*
  br i1 %156, label %171, label %173

171:                                              ; preds = %169
  %172 = bitcast %"class.v8::internal::RegExpCapture"** %144 to i64*
  store i64 %158, i64* %170, align 8
  store i64 %159, i64* %172, align 8
  br label %180

173:                                              ; preds = %169
  %174 = bitcast %"class.v8::internal::RegExpCapture"** %145 to i64*
  store i64 %157, i64* %170, align 8
  store i64 %159, i64* %174, align 8
  %175 = load i32, i32* %154, align 8
  %176 = load i32, i32* %150, align 8
  %177 = icmp slt i32 %175, %176
  br i1 %177, label %178, label %180

178:                                              ; preds = %173
  %179 = bitcast %"class.v8::internal::RegExpCapture"** %144 to i64*
  store i64 %158, i64* %174, align 8
  store i64 %159, i64* %179, align 8
  br label %180

180:                                              ; preds = %160, %161, %167, %171, %173, %178
  %181 = phi %"class.v8::internal::RegExpCapture"* [ %153, %160 ], [ %146, %161 ], [ %146, %167 ], [ %147, %171 ], [ %153, %173 ], [ %147, %178 ]
  %182 = getelementptr inbounds %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %0, i64 3
  %183 = icmp eq %"class.v8::internal::RegExpCapture"** %182, %1
  br i1 %183, label %224, label %184

184:                                              ; preds = %180, %219
  %185 = phi %"class.v8::internal::RegExpCapture"* [ %220, %219 ], [ %181, %180 ]
  %186 = phi %"class.v8::internal::RegExpCapture"** [ %217, %219 ], [ %182, %180 ]
  %187 = phi i32 [ %216, %219 ], [ 0, %180 ]
  %188 = phi %"class.v8::internal::RegExpCapture"** [ %186, %219 ], [ %144, %180 ]
  %189 = load %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %186, align 8
  %190 = getelementptr %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %189, i64 0, i32 2
  %191 = load i32, i32* %190, align 8
  %192 = getelementptr %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %185, i64 0, i32 2
  %193 = load i32, i32* %192, align 8
  %194 = icmp slt i32 %191, %193
  %195 = ptrtoint %"class.v8::internal::RegExpCapture"* %189 to i64
  br i1 %194, label %196, label %215

196:                                              ; preds = %184, %203
  %197 = phi %"class.v8::internal::RegExpCapture"** [ %198, %203 ], [ %186, %184 ]
  %198 = phi %"class.v8::internal::RegExpCapture"** [ %204, %203 ], [ %188, %184 ]
  %199 = bitcast %"class.v8::internal::RegExpCapture"** %198 to i64*
  %200 = load i64, i64* %199, align 8
  %201 = bitcast %"class.v8::internal::RegExpCapture"** %197 to i64*
  store i64 %200, i64* %201, align 8
  %202 = icmp eq %"class.v8::internal::RegExpCapture"** %198, %0
  br i1 %202, label %210, label %203

203:                                              ; preds = %196
  %204 = getelementptr inbounds %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %198, i64 -1
  %205 = load %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %204, align 8
  %206 = load i32, i32* %190, align 8
  %207 = getelementptr %"class.v8::internal::RegExpCapture", %"class.v8::internal::RegExpCapture"* %205, i64 0, i32 2
  %208 = load i32, i32* %207, align 8
  %209 = icmp slt i32 %206, %208
  br i1 %209, label %196, label %210

210:                                              ; preds = %196, %203
  %211 = phi %"class.v8::internal::RegExpCapture"** [ %198, %203 ], [ %0, %196 ]
  %212 = bitcast %"class.v8::internal::RegExpCapture"** %211 to i64*
  store i64 %195, i64* %212, align 8
  %213 = add i32 %187, 1
  %214 = icmp eq i32 %213, 8
  br i1 %214, label %221, label %215

215:                                              ; preds = %210, %184
  %216 = phi i32 [ %213, %210 ], [ %187, %184 ]
  %217 = getelementptr inbounds %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %186, i64 1
  %218 = icmp eq %"class.v8::internal::RegExpCapture"** %217, %1
  br i1 %218, label %224, label %219

219:                                              ; preds = %215
  %220 = load %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %186, align 8
  br label %184

221:                                              ; preds = %210
  %222 = getelementptr inbounds %"class.v8::internal::RegExpCapture"*, %"class.v8::internal::RegExpCapture"** %186, i64 1
  %223 = icmp eq %"class.v8::internal::RegExpCapture"** %222, %1
  br label %224

224:                                              ; preds = %215, %221, %180, %134, %125, %114, %105, %64, %57, %55, %49, %39, %38, %7, %16, %2, %2, %137
  %225 = phi i1 [ true, %137 ], [ true, %2 ], [ true, %2 ], [ true, %16 ], [ true, %7 ], [ true, %38 ], [ true, %39 ], [ true, %49 ], [ true, %55 ], [ true, %57 ], [ true, %64 ], [ true, %105 ], [ true, %114 ], [ true, %125 ], [ true, %134 ], [ true, %180 ], [ %223, %221 ], [ true, %215 ]
  ret i1 %225
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal8ZoneListItE17ResizeAddInternalERKtPNS0_4ZoneE(%"class.v8::internal::ZoneList.1143"*, i16* dereferenceable(2), %"class.v8::internal::Zone"*) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::ZoneList.1143", %"class.v8::internal::ZoneList.1143"* %0, i64 0, i32 1
  %5 = load i32, i32* %4, align 8
  %6 = shl nsw i32 %5, 1
  %7 = or i32 %6, 1
  %8 = load i16, i16* %1, align 2
  %9 = sext i32 %7 to i64
  %10 = shl nsw i64 %9, 1
  %11 = add nsw i64 %10, 7
  %12 = and i64 %11, -8
  %13 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2, i64 0, i32 2
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %2, i64 0, i32 3
  %16 = load i64, i64* %15, align 8
  %17 = sub i64 %16, %14
  %18 = icmp ugt i64 %12, %17
  br i1 %18, label %19, label %21, !prof !3

19:                                               ; preds = %3
  %20 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %2, i64 %12) #13
  br label %23

21:                                               ; preds = %3
  %22 = add i64 %12, %14
  store i64 %22, i64* %13, align 8
  br label %23

23:                                               ; preds = %21, %19
  %24 = phi i64 [ %20, %19 ], [ %14, %21 ]
  %25 = inttoptr i64 %24 to i16*
  %26 = getelementptr inbounds %"class.v8::internal::ZoneList.1143", %"class.v8::internal::ZoneList.1143"* %0, i64 0, i32 2
  %27 = load i32, i32* %26, align 4
  %28 = icmp sgt i32 %27, 0
  br i1 %28, label %29, label %52

29:                                               ; preds = %23
  %30 = inttoptr i64 %24 to i8*
  %31 = bitcast %"class.v8::internal::ZoneList.1143"* %0 to i8**
  %32 = load i8*, i8** %31, align 8
  %33 = sext i32 %27 to i64
  %34 = shl nsw i64 %33, 1
  switch i64 %34, label %51 [
    i64 16, label %50
    i64 2, label %35
    i64 12, label %48
    i64 4, label %38
    i64 14, label %49
    i64 6, label %42
    i64 10, label %47
    i64 8, label %43
  ]

35:                                               ; preds = %29
  %36 = bitcast i8* %32 to i16*
  %37 = load i16, i16* %36, align 1
  store i16 %37, i16* %25, align 1
  br label %52

38:                                               ; preds = %29
  %39 = bitcast i8* %32 to i32*
  %40 = inttoptr i64 %24 to i32*
  %41 = load i32, i32* %39, align 1
  store i32 %41, i32* %40, align 1
  br label %52

42:                                               ; preds = %29
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %30, i8* align 1 %32, i64 6, i1 false) #13
  br label %52

43:                                               ; preds = %29
  %44 = bitcast i8* %32 to i64*
  %45 = inttoptr i64 %24 to i64*
  %46 = load i64, i64* %44, align 1
  store i64 %46, i64* %45, align 1
  br label %52

47:                                               ; preds = %29
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %30, i8* align 1 %32, i64 10, i1 false) #13
  br label %52

48:                                               ; preds = %29
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %30, i8* align 1 %32, i64 12, i1 false) #13
  br label %52

49:                                               ; preds = %29
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %30, i8* align 1 %32, i64 14, i1 false) #13
  br label %52

50:                                               ; preds = %29
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %30, i8* align 1 %32, i64 16, i1 false) #13
  br label %52

51:                                               ; preds = %29
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %30, i8* align 1 %32, i64 %34, i1 false) #13
  br label %52

52:                                               ; preds = %23, %35, %38, %42, %43, %47, %48, %49, %50, %51
  %53 = getelementptr inbounds %"class.v8::internal::ZoneList.1143", %"class.v8::internal::ZoneList.1143"* %0, i64 0, i32 0
  store i16* %25, i16** %53, align 8
  store i32 %7, i32* %4, align 8
  %54 = load i32, i32* %26, align 4
  %55 = add nsw i32 %54, 1
  store i32 %55, i32* %26, align 4
  %56 = sext i32 %54 to i64
  %57 = getelementptr inbounds i16, i16* %25, i64 %56
  store i16 %8, i16* %57, align 2
  ret void
}

declare void @_ZN2v88internal17RegExpAlternativeC1EPNS0_8ZoneListIPNS0_10RegExpTreeEEE(%"class.v8::internal::RegExpAlternative"*, %"class.v8::internal::ZoneList.1144"*) unnamed_addr #6

declare void @_ZN2v88internal17RegExpDisjunctionC1EPNS0_8ZoneListIPNS0_10RegExpTreeEEE(%"class.v8::internal::RegExpDisjunction"*, %"class.v8::internal::ZoneList.1144"*) unnamed_addr #6

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { nounwind }
attributes #14 = { noreturn nounwind }
attributes #15 = { nounwind readonly }
attributes #16 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!"branch_weights", i32 1, i32 2000}
!4 = !{!5}
!5 = distinct !{!5, !6}
!6 = distinct !{!6, !"LVerDomain"}
!7 = !{!8}
!8 = distinct !{!8, !6}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.isvectorized", i32 1}
!11 = distinct !{!11, !12}
!12 = !{!"llvm.loop.unroll.disable"}
!13 = distinct !{!13, !10}
!14 = !{!15}
!15 = distinct !{!15, !16}
!16 = distinct !{!16, !"LVerDomain"}
!17 = !{!18}
!18 = distinct !{!18, !16}
!19 = distinct !{!19, !10}
!20 = distinct !{!20, !12}
!21 = distinct !{!21, !10}
!22 = !{!23}
!23 = distinct !{!23, !24}
!24 = distinct !{!24, !"LVerDomain"}
!25 = !{!26}
!26 = distinct !{!26, !24}
!27 = distinct !{!27, !10}
!28 = distinct !{!28, !12}
!29 = distinct !{!29, !10}
!30 = !{!31}
!31 = distinct !{!31, !32}
!32 = distinct !{!32, !"LVerDomain"}
!33 = !{!34}
!34 = distinct !{!34, !32}
!35 = distinct !{!35, !10}
!36 = distinct !{!36, !12}
!37 = distinct !{!37, !10}
!38 = !{!39}
!39 = distinct !{!39, !40}
!40 = distinct !{!40, !"LVerDomain"}
!41 = !{!42}
!42 = distinct !{!42, !40}
!43 = distinct !{!43, !10}
!44 = distinct !{!44, !12}
!45 = distinct !{!45, !10}
!46 = !{!47}
!47 = distinct !{!47, !48}
!48 = distinct !{!48, !"LVerDomain"}
!49 = !{!50}
!50 = distinct !{!50, !48}
!51 = distinct !{!51, !10}
!52 = distinct !{!52, !12}
!53 = distinct !{!53, !10}
!54 = !{!55}
!55 = distinct !{!55, !56}
!56 = distinct !{!56, !"LVerDomain"}
!57 = !{!58}
!58 = distinct !{!58, !56}
!59 = distinct !{!59, !10}
!60 = distinct !{!60, !12}
!61 = distinct !{!61, !10}
!62 = !{!63}
!63 = distinct !{!63, !64}
!64 = distinct !{!64, !"LVerDomain"}
!65 = !{!66}
!66 = distinct !{!66, !64}
!67 = distinct !{!67, !10}
!68 = distinct !{!68, !12}
!69 = distinct !{!69, !10}
!70 = !{!71}
!71 = distinct !{!71, !72}
!72 = distinct !{!72, !"LVerDomain"}
!73 = !{!74}
!74 = distinct !{!74, !72}
!75 = distinct !{!75, !10}
!76 = distinct !{!76, !12}
!77 = distinct !{!77, !10}
!78 = !{!79}
!79 = distinct !{!79, !80}
!80 = distinct !{!80, !"LVerDomain"}
!81 = !{!82}
!82 = distinct !{!82, !80}
!83 = distinct !{!83, !10}
!84 = distinct !{!84, !12}
!85 = distinct !{!85, !10}
!86 = !{!87}
!87 = distinct !{!87, !88, !"_ZNSt3__16__treeIPN2v88internal13RegExpCaptureENS2_12RegExpParser21RegExpCaptureNameLessENS2_13ZoneAllocatorIS4_EEE16__construct_nodeIJRS4_EEENS_10unique_ptrINS_11__tree_nodeIS4_PvEENS_22__tree_node_destructorINS7_ISF_EEEEEEDpOT_: argument 0"}
!88 = distinct !{!88, !"_ZNSt3__16__treeIPN2v88internal13RegExpCaptureENS2_12RegExpParser21RegExpCaptureNameLessENS2_13ZoneAllocatorIS4_EEE16__construct_nodeIJRS4_EEENS_10unique_ptrINS_11__tree_nodeIS4_PvEENS_22__tree_node_destructorINS7_ISF_EEEEEEDpOT_"}
