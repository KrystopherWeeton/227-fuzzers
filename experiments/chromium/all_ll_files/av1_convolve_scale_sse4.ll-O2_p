; ModuleID = '../../third_party/libaom/source/libaom/av1/common/x86/av1_convolve_scale_sse4.c'
source_filename = "../../third_party/libaom/source/libaom/av1/common/x86/av1_convolve_scale_sse4.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.InterpFilterParams = type { i16*, i16, i8 }
%struct.ConvolveParams = type { i32, i16*, i32, i32, i32, i32, i32, i32, i32, i32 }

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_convolve_2d_scale_sse4_1(i8* nocapture readonly, i32, i8* nocapture, i32, i32, i32, %struct.InterpFilterParams* nocapture readonly, %struct.InterpFilterParams* nocapture readonly, i32, i32, i32, i32, %struct.ConvolveParams* nocapture readonly) local_unnamed_addr #0 {
  %14 = alloca [34304 x i16], align 16
  %15 = bitcast [34304 x i16]* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 68608, i8* nonnull %15) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %15, i8 -86, i64 68608, i1 false)
  %16 = add nsw i32 %5, -1
  %17 = mul nsw i32 %16, %11
  %18 = add nsw i32 %17, %10
  %19 = ashr i32 %18, 10
  %20 = getelementptr inbounds %struct.InterpFilterParams, %struct.InterpFilterParams* %7, i64 0, i32 1
  %21 = load i16, i16* %20, align 8
  %22 = zext i16 %21 to i32
  %23 = add nsw i32 %19, %22
  %24 = lshr i32 %22, 1
  %25 = add nsw i32 %24, -1
  %26 = mul nsw i32 %25, %1
  %27 = sext i32 %26 to i64
  %28 = sub nsw i64 0, %27
  %29 = getelementptr inbounds i8, i8* %0, i64 %28
  %30 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %12, i64 0, i32 3
  %31 = load i32, i32* %30, align 4
  %32 = getelementptr inbounds i8, i8* %29, i64 -3
  %33 = shl i32 1, %31
  %34 = sdiv i32 %33, 2
  %35 = add nsw i32 %34, 16384
  %36 = insertelement <4 x i32> undef, i32 %35, i32 0
  %37 = shufflevector <4 x i32> %36, <4 x i32> undef, <4 x i32> zeroinitializer
  %38 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %31, i32 0
  %39 = icmp sgt i32 %4, 0
  br i1 %39, label %40, label %295

40:                                               ; preds = %13
  %41 = getelementptr inbounds %struct.InterpFilterParams, %struct.InterpFilterParams* %6, i64 0, i32 0
  %42 = getelementptr inbounds %struct.InterpFilterParams, %struct.InterpFilterParams* %6, i64 0, i32 1
  %43 = add nsw i32 %23, -4
  %44 = icmp slt i32 %43, 0
  %45 = sext i32 %1 to i64
  %46 = shl nsw i32 %1, 1
  %47 = sext i32 %46 to i64
  %48 = mul nsw i32 %1, 3
  %49 = sext i32 %48 to i64
  %50 = ashr i32 %33, 1
  %51 = sext i32 %43 to i64
  %52 = sext i32 %23 to i64
  %53 = zext i32 %4 to i64
  %54 = load i16*, i16** %41, align 8
  %55 = load i16, i16* %42, align 8
  %56 = zext i16 %55 to i32
  %57 = add nsw i32 %50, 16384
  %58 = icmp eq i32 %1, 1
  %59 = insertelement <8 x i32> undef, i32 %57, i32 0
  %60 = shufflevector <8 x i32> %59, <8 x i32> undef, <8 x i32> zeroinitializer
  %61 = insertelement <8 x i32> undef, i32 %31, i32 0
  %62 = shufflevector <8 x i32> %61, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %63

63:                                               ; preds = %291, %40
  %64 = phi i64 [ 0, %40 ], [ %292, %291 ]
  %65 = phi i32 [ %8, %40 ], [ %293, %291 ]
  %66 = ashr i32 %65, 10
  %67 = sext i32 %66 to i64
  %68 = getelementptr inbounds i8, i8* %32, i64 %67
  %69 = lshr i32 %65, 6
  %70 = and i32 %69, 15
  %71 = mul nuw nsw i32 %70, %56
  %72 = zext i32 %71 to i64
  %73 = getelementptr inbounds i16, i16* %54, i64 %72
  %74 = bitcast i16* %73 to <8 x i16>*
  %75 = load <8 x i16>, <8 x i16>* %74, align 1
  %76 = extractelement <8 x i16> %75, i32 0
  br i1 %44, label %82, label %77

77:                                               ; preds = %63
  %78 = mul nsw i64 %64, %52
  %79 = getelementptr inbounds [34304 x i16], [34304 x i16]* %14, i64 0, i64 %78
  br label %195

80:                                               ; preds = %195
  %81 = trunc i64 %240 to i32
  br label %82

82:                                               ; preds = %80, %63
  %83 = phi i32 [ 0, %63 ], [ %81, %80 ]
  %84 = icmp slt i32 %83, %23
  br i1 %84, label %85, label %291

85:                                               ; preds = %82
  %86 = mul nsw i64 %64, %52
  %87 = sext i32 %83 to i64
  %88 = getelementptr inbounds i16, i16* %73, i64 1
  %89 = getelementptr inbounds i16, i16* %73, i64 2
  %90 = getelementptr inbounds i16, i16* %73, i64 3
  %91 = getelementptr inbounds i16, i16* %73, i64 4
  %92 = getelementptr inbounds i16, i16* %73, i64 5
  %93 = getelementptr inbounds i16, i16* %73, i64 6
  %94 = getelementptr inbounds i16, i16* %73, i64 7
  %95 = sext i16 %76 to i32
  %96 = load i16, i16* %88, align 2
  %97 = sext i16 %96 to i32
  %98 = load i16, i16* %89, align 2
  %99 = sext i16 %98 to i32
  %100 = load i16, i16* %90, align 2
  %101 = sext i16 %100 to i32
  %102 = load i16, i16* %91, align 2
  %103 = sext i16 %102 to i32
  %104 = load i16, i16* %92, align 2
  %105 = sext i16 %104 to i32
  %106 = load i16, i16* %93, align 2
  %107 = sext i16 %106 to i32
  %108 = load i16, i16* %94, align 2
  %109 = sext i16 %108 to i32
  %110 = sub nsw i64 %52, %87
  %111 = icmp ugt i64 %110, 7
  %112 = and i1 %111, %58
  br i1 %112, label %113, label %193

113:                                              ; preds = %85
  %114 = and i64 %110, -8
  %115 = add nsw i64 %114, %87
  %116 = insertelement <8 x i32> undef, i32 %95, i32 0
  %117 = shufflevector <8 x i32> %116, <8 x i32> undef, <8 x i32> zeroinitializer
  %118 = insertelement <8 x i32> undef, i32 %97, i32 0
  %119 = shufflevector <8 x i32> %118, <8 x i32> undef, <8 x i32> zeroinitializer
  %120 = insertelement <8 x i32> undef, i32 %99, i32 0
  %121 = shufflevector <8 x i32> %120, <8 x i32> undef, <8 x i32> zeroinitializer
  %122 = insertelement <8 x i32> undef, i32 %101, i32 0
  %123 = shufflevector <8 x i32> %122, <8 x i32> undef, <8 x i32> zeroinitializer
  %124 = insertelement <8 x i32> undef, i32 %103, i32 0
  %125 = shufflevector <8 x i32> %124, <8 x i32> undef, <8 x i32> zeroinitializer
  %126 = insertelement <8 x i32> undef, i32 %105, i32 0
  %127 = shufflevector <8 x i32> %126, <8 x i32> undef, <8 x i32> zeroinitializer
  %128 = insertelement <8 x i32> undef, i32 %107, i32 0
  %129 = shufflevector <8 x i32> %128, <8 x i32> undef, <8 x i32> zeroinitializer
  %130 = insertelement <8 x i32> undef, i32 %109, i32 0
  %131 = shufflevector <8 x i32> %130, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %132

132:                                              ; preds = %132, %113
  %133 = phi i64 [ 0, %113 ], [ %189, %132 ]
  %134 = add i64 %133, %87
  %135 = mul nsw i64 %134, %45
  %136 = getelementptr inbounds i8, i8* %68, i64 %135
  %137 = bitcast i8* %136 to <8 x i8>*
  %138 = load <8 x i8>, <8 x i8>* %137, align 1
  %139 = zext <8 x i8> %138 to <8 x i32>
  %140 = mul nsw <8 x i32> %117, %139
  %141 = getelementptr inbounds i8, i8* %136, i64 1
  %142 = bitcast i8* %141 to <8 x i8>*
  %143 = load <8 x i8>, <8 x i8>* %142, align 1
  %144 = zext <8 x i8> %143 to <8 x i32>
  %145 = mul nsw <8 x i32> %119, %144
  %146 = getelementptr inbounds i8, i8* %136, i64 2
  %147 = bitcast i8* %146 to <8 x i8>*
  %148 = load <8 x i8>, <8 x i8>* %147, align 1
  %149 = zext <8 x i8> %148 to <8 x i32>
  %150 = mul nsw <8 x i32> %121, %149
  %151 = getelementptr inbounds i8, i8* %136, i64 3
  %152 = bitcast i8* %151 to <8 x i8>*
  %153 = load <8 x i8>, <8 x i8>* %152, align 1
  %154 = zext <8 x i8> %153 to <8 x i32>
  %155 = mul nsw <8 x i32> %123, %154
  %156 = getelementptr inbounds i8, i8* %136, i64 4
  %157 = bitcast i8* %156 to <8 x i8>*
  %158 = load <8 x i8>, <8 x i8>* %157, align 1
  %159 = zext <8 x i8> %158 to <8 x i32>
  %160 = mul nsw <8 x i32> %125, %159
  %161 = getelementptr inbounds i8, i8* %136, i64 5
  %162 = bitcast i8* %161 to <8 x i8>*
  %163 = load <8 x i8>, <8 x i8>* %162, align 1
  %164 = zext <8 x i8> %163 to <8 x i32>
  %165 = mul nsw <8 x i32> %127, %164
  %166 = getelementptr inbounds i8, i8* %136, i64 6
  %167 = bitcast i8* %166 to <8 x i8>*
  %168 = load <8 x i8>, <8 x i8>* %167, align 1
  %169 = zext <8 x i8> %168 to <8 x i32>
  %170 = mul nsw <8 x i32> %129, %169
  %171 = getelementptr inbounds i8, i8* %136, i64 7
  %172 = bitcast i8* %171 to <8 x i8>*
  %173 = load <8 x i8>, <8 x i8>* %172, align 1
  %174 = zext <8 x i8> %173 to <8 x i32>
  %175 = mul nsw <8 x i32> %131, %174
  %176 = add <8 x i32> %60, %140
  %177 = add <8 x i32> %176, %145
  %178 = add <8 x i32> %177, %150
  %179 = add <8 x i32> %178, %155
  %180 = add <8 x i32> %179, %160
  %181 = add <8 x i32> %180, %165
  %182 = add <8 x i32> %181, %170
  %183 = add <8 x i32> %182, %175
  %184 = ashr <8 x i32> %183, %62
  %185 = trunc <8 x i32> %184 to <8 x i16>
  %186 = add nsw i64 %134, %86
  %187 = getelementptr inbounds [34304 x i16], [34304 x i16]* %14, i64 0, i64 %186
  %188 = bitcast i16* %187 to <8 x i16>*
  store <8 x i16> %185, <8 x i16>* %188, align 2
  %189 = add i64 %133, 8
  %190 = icmp eq i64 %189, %114
  br i1 %190, label %191, label %132, !llvm.loop !2

191:                                              ; preds = %132
  %192 = icmp eq i64 %110, %114
  br i1 %192, label %291, label %193

193:                                              ; preds = %85, %191
  %194 = phi i64 [ %87, %85 ], [ %115, %191 ]
  br label %242

195:                                              ; preds = %195, %77
  %196 = phi i64 [ 0, %77 ], [ %240, %195 ]
  %197 = mul nsw i64 %196, %45
  %198 = getelementptr inbounds i8, i8* %68, i64 %197
  %199 = getelementptr inbounds i8, i8* %198, i64 %45
  %200 = getelementptr inbounds i8, i8* %198, i64 %47
  %201 = getelementptr inbounds i8, i8* %198, i64 %49
  %202 = bitcast i8* %198 to i64*
  %203 = load i64, i64* %202, align 1
  %204 = insertelement <2 x i64> undef, i64 %203, i32 0
  %205 = bitcast i8* %199 to i64*
  %206 = load i64, i64* %205, align 1
  %207 = insertelement <2 x i64> undef, i64 %206, i32 0
  %208 = bitcast i8* %200 to i64*
  %209 = load i64, i64* %208, align 1
  %210 = insertelement <2 x i64> undef, i64 %209, i32 0
  %211 = bitcast i8* %201 to i64*
  %212 = load i64, i64* %211, align 1
  %213 = insertelement <2 x i64> undef, i64 %212, i32 0
  %214 = bitcast <2 x i64> %204 to <16 x i8>
  %215 = shufflevector <16 x i8> %214, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %216 = bitcast <2 x i64> %207 to <16 x i8>
  %217 = shufflevector <16 x i8> %216, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %218 = bitcast <2 x i64> %210 to <16 x i8>
  %219 = shufflevector <16 x i8> %218, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %220 = bitcast <2 x i64> %213 to <16 x i8>
  %221 = shufflevector <16 x i8> %220, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %222 = bitcast <16 x i8> %215 to <8 x i16>
  %223 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %222, <8 x i16> %75) #3
  %224 = bitcast <16 x i8> %217 to <8 x i16>
  %225 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %224, <8 x i16> %75) #3
  %226 = bitcast <16 x i8> %219 to <8 x i16>
  %227 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %226, <8 x i16> %75) #3
  %228 = bitcast <16 x i8> %221 to <8 x i16>
  %229 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %228, <8 x i16> %75) #3
  %230 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %223, <4 x i32> %225) #3
  %231 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %227, <4 x i32> %229) #3
  %232 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %230, <4 x i32> %231) #3
  %233 = add <4 x i32> %232, %37
  %234 = tail call <4 x i32> @llvm.x86.sse2.psra.d(<4 x i32> %233, <4 x i32> %38) #3
  %235 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %234, <4 x i32> undef) #3
  %236 = bitcast <8 x i16> %235 to <2 x i64>
  %237 = getelementptr inbounds i16, i16* %79, i64 %196
  %238 = extractelement <2 x i64> %236, i32 0
  %239 = bitcast i16* %237 to i64*
  store i64 %238, i64* %239, align 2
  %240 = add nuw nsw i64 %196, 4
  %241 = icmp sgt i64 %240, %51
  br i1 %241, label %80, label %195

242:                                              ; preds = %193, %242
  %243 = phi i64 [ %289, %242 ], [ %194, %193 ]
  %244 = mul nsw i64 %243, %45
  %245 = getelementptr inbounds i8, i8* %68, i64 %244
  %246 = load i8, i8* %245, align 1
  %247 = zext i8 %246 to i32
  %248 = mul nsw i32 %247, %95
  %249 = getelementptr inbounds i8, i8* %245, i64 1
  %250 = load i8, i8* %249, align 1
  %251 = zext i8 %250 to i32
  %252 = mul nsw i32 %251, %97
  %253 = getelementptr inbounds i8, i8* %245, i64 2
  %254 = load i8, i8* %253, align 1
  %255 = zext i8 %254 to i32
  %256 = mul nsw i32 %255, %99
  %257 = getelementptr inbounds i8, i8* %245, i64 3
  %258 = load i8, i8* %257, align 1
  %259 = zext i8 %258 to i32
  %260 = mul nsw i32 %259, %101
  %261 = getelementptr inbounds i8, i8* %245, i64 4
  %262 = load i8, i8* %261, align 1
  %263 = zext i8 %262 to i32
  %264 = mul nsw i32 %263, %103
  %265 = getelementptr inbounds i8, i8* %245, i64 5
  %266 = load i8, i8* %265, align 1
  %267 = zext i8 %266 to i32
  %268 = mul nsw i32 %267, %105
  %269 = getelementptr inbounds i8, i8* %245, i64 6
  %270 = load i8, i8* %269, align 1
  %271 = zext i8 %270 to i32
  %272 = mul nsw i32 %271, %107
  %273 = getelementptr inbounds i8, i8* %245, i64 7
  %274 = load i8, i8* %273, align 1
  %275 = zext i8 %274 to i32
  %276 = mul nsw i32 %275, %109
  %277 = add i32 %57, %248
  %278 = add i32 %277, %252
  %279 = add i32 %278, %256
  %280 = add i32 %279, %260
  %281 = add i32 %280, %264
  %282 = add i32 %281, %268
  %283 = add i32 %282, %272
  %284 = add i32 %283, %276
  %285 = ashr i32 %284, %31
  %286 = trunc i32 %285 to i16
  %287 = add nsw i64 %243, %86
  %288 = getelementptr inbounds [34304 x i16], [34304 x i16]* %14, i64 0, i64 %287
  store i16 %286, i16* %288, align 2
  %289 = add nuw nsw i64 %243, 1
  %290 = icmp eq i64 %289, %52
  br i1 %290, label %291, label %242, !llvm.loop !4

291:                                              ; preds = %242, %191, %82
  %292 = add nuw nsw i64 %64, 1
  %293 = add nsw i32 %65, %9
  %294 = icmp eq i64 %292, %53
  br i1 %294, label %295, label %63

295:                                              ; preds = %291, %13
  %296 = sub nsw i32 22, %31
  %297 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %12, i64 0, i32 4
  %298 = load i32, i32* %297, align 8
  %299 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %298, i32 0
  %300 = sub nsw i32 %296, %298
  %301 = shl i32 1, %300
  %302 = add nsw i32 %300, -1
  %303 = shl i32 1, %302
  %304 = add nsw i32 %303, %301
  %305 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %12, i64 0, i32 1
  %306 = load i16*, i16** %305, align 8
  %307 = sub nsw i32 14, %31
  %308 = sub i32 %307, %298
  %309 = shl i32 1, %308
  %310 = ashr i32 %309, 1
  %311 = shl i32 1, %296
  %312 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %12, i64 0, i32 8
  %313 = load i32, i32* %312, align 8
  %314 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %12, i64 0, i32 9
  %315 = load i32, i32* %314, align 4
  %316 = trunc i32 %313 to i16
  %317 = insertelement <8 x i16> undef, i16 %316, i32 0
  %318 = shufflevector <8 x i16> %317, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef>
  %319 = trunc i32 %315 to i16
  %320 = insertelement <8 x i16> undef, i16 %319, i32 0
  %321 = shufflevector <8 x i16> %320, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef>
  %322 = shufflevector <8 x i16> %318, <8 x i16> %321, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %323 = icmp sgt i32 %5, 0
  br i1 %323, label %324, label %591

324:                                              ; preds = %295
  %325 = trunc i32 %310 to i16
  %326 = insertelement <8 x i16> undef, i16 %325, i32 0
  %327 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %308, i32 0
  %328 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %12, i64 0, i32 2
  %329 = load i32, i32* %328, align 8
  %330 = trunc i32 %304 to i16
  %331 = insertelement <8 x i16> undef, i16 %330, i32 0
  %332 = insertelement <4 x i32> undef, i32 %311, i32 0
  %333 = shl i32 1, %298
  %334 = ashr i32 %333, 1
  %335 = insertelement <4 x i32> undef, i32 %334, i32 0
  %336 = getelementptr inbounds %struct.InterpFilterParams, %struct.InterpFilterParams* %7, i64 0, i32 0
  %337 = add nsw i32 %4, -4
  %338 = icmp slt i32 %337, 0
  %339 = sext i32 %23 to i64
  %340 = shl nsw i32 %23, 1
  %341 = sext i32 %340 to i64
  %342 = mul nsw i32 %23, 3
  %343 = sext i32 %342 to i64
  %344 = add <4 x i32> %335, %332
  %345 = shufflevector <4 x i32> %344, <4 x i32> undef, <4 x i32> zeroinitializer
  %346 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %12, i64 0, i32 6
  %347 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %12, i64 0, i32 0
  %348 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %12, i64 0, i32 7
  %349 = sub <8 x i16> %326, %331
  %350 = shufflevector <8 x i16> %349, <8 x i16> undef, <8 x i32> zeroinitializer
  %351 = bitcast <4 x i32> %327 to <8 x i16>
  %352 = sub i32 %310, %304
  %353 = sext i32 %337 to i64
  %354 = sext i32 %3 to i64
  %355 = sext i32 %329 to i64
  %356 = zext i32 %5 to i64
  %357 = sext i32 %4 to i64
  br label %358

358:                                              ; preds = %588, %324
  %359 = phi i16 [ %21, %324 ], [ %590, %588 ]
  %360 = phi i64 [ 0, %324 ], [ %586, %588 ]
  %361 = phi i32 [ %10, %324 ], [ %589, %588 ]
  %362 = ashr i32 %361, 10
  %363 = sext i32 %362 to i64
  %364 = getelementptr inbounds [34304 x i16], [34304 x i16]* %14, i64 0, i64 %363
  %365 = lshr i32 %361, 6
  %366 = and i32 %365, 15
  %367 = load i16*, i16** %336, align 8
  %368 = zext i16 %359 to i32
  %369 = mul nuw nsw i32 %366, %368
  %370 = zext i32 %369 to i64
  %371 = getelementptr inbounds i16, i16* %367, i64 %370
  %372 = bitcast i16* %371 to <8 x i16>*
  %373 = load <8 x i16>, <8 x i16>* %372, align 1
  br i1 %338, label %381, label %374

374:                                              ; preds = %358
  %375 = mul nsw i64 %360, %354
  %376 = getelementptr inbounds i8, i8* %2, i64 %375
  %377 = mul nsw i64 %360, %355
  %378 = getelementptr inbounds i16, i16* %306, i64 %377
  br label %395

379:                                              ; preds = %461
  %380 = trunc i64 %462 to i32
  br label %381

381:                                              ; preds = %379, %358
  %382 = phi i32 [ 0, %358 ], [ %380, %379 ]
  %383 = icmp slt i32 %382, %4
  br i1 %383, label %384, label %585

384:                                              ; preds = %381
  %385 = mul nsw i64 %360, %355
  %386 = mul nsw i64 %360, %354
  %387 = sext i32 %382 to i64
  %388 = getelementptr inbounds i16, i16* %371, i64 1
  %389 = getelementptr inbounds i16, i16* %371, i64 2
  %390 = getelementptr inbounds i16, i16* %371, i64 3
  %391 = getelementptr inbounds i16, i16* %371, i64 4
  %392 = getelementptr inbounds i16, i16* %371, i64 5
  %393 = getelementptr inbounds i16, i16* %371, i64 6
  %394 = getelementptr inbounds i16, i16* %371, i64 7
  br label %464

395:                                              ; preds = %461, %374
  %396 = phi i64 [ 0, %374 ], [ %462, %461 ]
  %397 = mul nsw i64 %396, %339
  %398 = getelementptr inbounds i16, i16* %364, i64 %397
  %399 = getelementptr inbounds i16, i16* %398, i64 %339
  %400 = getelementptr inbounds i16, i16* %398, i64 %341
  %401 = getelementptr inbounds i16, i16* %398, i64 %343
  %402 = bitcast i16* %398 to <8 x i16>*
  %403 = load <8 x i16>, <8 x i16>* %402, align 2
  %404 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %403, <8 x i16> %373) #3
  %405 = bitcast i16* %399 to <8 x i16>*
  %406 = load <8 x i16>, <8 x i16>* %405, align 2
  %407 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %406, <8 x i16> %373) #3
  %408 = bitcast i16* %400 to <8 x i16>*
  %409 = load <8 x i16>, <8 x i16>* %408, align 2
  %410 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %409, <8 x i16> %373) #3
  %411 = bitcast i16* %401 to <8 x i16>*
  %412 = load <8 x i16>, <8 x i16>* %411, align 2
  %413 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %412, <8 x i16> %373) #3
  %414 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %404, <4 x i32> %407) #3
  %415 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %410, <4 x i32> %413) #3
  %416 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %414, <4 x i32> %415) #3
  %417 = add <4 x i32> %416, %345
  %418 = tail call <4 x i32> @llvm.x86.sse2.psra.d(<4 x i32> %417, <4 x i32> %299) #3
  %419 = getelementptr inbounds i8, i8* %376, i64 %396
  %420 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %418, <4 x i32> %418) #3
  %421 = bitcast <8 x i16> %420 to <2 x i64>
  %422 = load i32, i32* %346, align 8
  %423 = icmp eq i32 %422, 0
  br i1 %423, label %454, label %424

424:                                              ; preds = %395
  %425 = getelementptr inbounds i16, i16* %378, i64 %396
  %426 = load i32, i32* %347, align 8
  %427 = icmp eq i32 %426, 0
  br i1 %427, label %451, label %428

428:                                              ; preds = %424
  %429 = bitcast i16* %425 to i64*
  %430 = load i64, i64* %429, align 1
  %431 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %430, i32 0
  %432 = load i32, i32* %348, align 4
  %433 = icmp eq i32 %432, 0
  %434 = bitcast <2 x i64> %431 to <8 x i16>
  br i1 %433, label %440, label %435

435:                                              ; preds = %428
  %436 = shufflevector <8 x i16> %434, <8 x i16> %420, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %437 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %436, <8 x i16> %322) #3
  %438 = ashr <4 x i32> %437, <i32 4, i32 4, i32 4, i32 4>
  %439 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %438, <4 x i32> %438) #3
  br label %443

440:                                              ; preds = %428
  %441 = add <8 x i16> %420, %434
  %442 = ashr <8 x i16> %441, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  br label %443

443:                                              ; preds = %440, %435
  %444 = phi <8 x i16> [ %439, %435 ], [ %442, %440 ]
  %445 = add <8 x i16> %444, %350
  %446 = tail call <8 x i16> @llvm.x86.sse2.psra.w(<8 x i16> %445, <8 x i16> %351) #3
  %447 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %446, <8 x i16> undef) #3
  %448 = bitcast <16 x i8> %447 to <4 x i32>
  %449 = extractelement <4 x i32> %448, i32 0
  %450 = bitcast i8* %419 to i32*
  store i32 %449, i32* %450, align 4
  br label %461

451:                                              ; preds = %424
  %452 = extractelement <2 x i64> %421, i32 0
  %453 = bitcast i16* %425 to i64*
  store i64 %452, i64* %453, align 1
  br label %461

454:                                              ; preds = %395
  %455 = add <8 x i16> %420, %350
  %456 = tail call <8 x i16> @llvm.x86.sse2.psra.w(<8 x i16> %455, <8 x i16> %351) #3
  %457 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %456, <8 x i16> undef) #3
  %458 = bitcast <16 x i8> %457 to <4 x i32>
  %459 = extractelement <4 x i32> %458, i32 0
  %460 = bitcast i8* %419 to i32*
  store i32 %459, i32* %460, align 4
  br label %461

461:                                              ; preds = %454, %451, %443
  %462 = add nuw nsw i64 %396, 4
  %463 = icmp sgt i64 %462, %353
  br i1 %463, label %379, label %395

464:                                              ; preds = %582, %384
  %465 = phi i64 [ %387, %384 ], [ %583, %582 ]
  %466 = mul nsw i64 %465, %339
  %467 = getelementptr inbounds i16, i16* %364, i64 %466
  %468 = load i16, i16* %371, align 2
  %469 = sext i16 %468 to i32
  %470 = load i16, i16* %467, align 2
  %471 = sext i16 %470 to i32
  %472 = mul nsw i32 %471, %469
  %473 = add nsw i32 %472, %311
  %474 = load i16, i16* %388, align 2
  %475 = sext i16 %474 to i32
  %476 = getelementptr inbounds i16, i16* %467, i64 1
  %477 = load i16, i16* %476, align 2
  %478 = sext i16 %477 to i32
  %479 = mul nsw i32 %478, %475
  %480 = add nsw i32 %473, %479
  %481 = load i16, i16* %389, align 2
  %482 = sext i16 %481 to i32
  %483 = getelementptr inbounds i16, i16* %467, i64 2
  %484 = load i16, i16* %483, align 2
  %485 = sext i16 %484 to i32
  %486 = mul nsw i32 %485, %482
  %487 = add nsw i32 %480, %486
  %488 = load i16, i16* %390, align 2
  %489 = sext i16 %488 to i32
  %490 = getelementptr inbounds i16, i16* %467, i64 3
  %491 = load i16, i16* %490, align 2
  %492 = sext i16 %491 to i32
  %493 = mul nsw i32 %492, %489
  %494 = add nsw i32 %487, %493
  %495 = load i16, i16* %391, align 2
  %496 = sext i16 %495 to i32
  %497 = getelementptr inbounds i16, i16* %467, i64 4
  %498 = load i16, i16* %497, align 2
  %499 = sext i16 %498 to i32
  %500 = mul nsw i32 %499, %496
  %501 = add nsw i32 %494, %500
  %502 = load i16, i16* %392, align 2
  %503 = sext i16 %502 to i32
  %504 = getelementptr inbounds i16, i16* %467, i64 5
  %505 = load i16, i16* %504, align 2
  %506 = sext i16 %505 to i32
  %507 = mul nsw i32 %506, %503
  %508 = add nsw i32 %501, %507
  %509 = load i16, i16* %393, align 2
  %510 = sext i16 %509 to i32
  %511 = getelementptr inbounds i16, i16* %467, i64 6
  %512 = load i16, i16* %511, align 2
  %513 = sext i16 %512 to i32
  %514 = mul nsw i32 %513, %510
  %515 = add nsw i32 %508, %514
  %516 = load i16, i16* %394, align 2
  %517 = sext i16 %516 to i32
  %518 = getelementptr inbounds i16, i16* %467, i64 7
  %519 = load i16, i16* %518, align 2
  %520 = sext i16 %519 to i32
  %521 = mul nsw i32 %520, %517
  %522 = add nsw i32 %515, %521
  %523 = load i32, i32* %297, align 8
  %524 = shl i32 1, %523
  %525 = ashr i32 %524, 1
  %526 = add nsw i32 %522, %525
  %527 = ashr i32 %526, %523
  %528 = trunc i32 %527 to i16
  %529 = load i32, i32* %346, align 8
  %530 = icmp eq i32 %529, 0
  br i1 %530, label %565, label %531

531:                                              ; preds = %464
  %532 = load i32, i32* %347, align 8
  %533 = icmp eq i32 %532, 0
  %534 = add nsw i64 %465, %385
  %535 = getelementptr inbounds i16, i16* %306, i64 %534
  br i1 %533, label %564, label %536

536:                                              ; preds = %531
  %537 = load i16, i16* %535, align 2
  %538 = zext i16 %537 to i32
  %539 = load i32, i32* %348, align 4
  %540 = icmp eq i32 %539, 0
  br i1 %540, label %549, label %541

541:                                              ; preds = %536
  %542 = load i32, i32* %312, align 8
  %543 = mul nsw i32 %542, %538
  %544 = and i32 %527, 65535
  %545 = load i32, i32* %314, align 4
  %546 = mul nsw i32 %545, %544
  %547 = add nsw i32 %546, %543
  %548 = ashr i32 %547, 4
  br label %553

549:                                              ; preds = %536
  %550 = and i32 %527, 65535
  %551 = add nuw nsw i32 %550, %538
  %552 = lshr i32 %551, 1
  br label %553

553:                                              ; preds = %549, %541
  %554 = phi i32 [ %548, %541 ], [ %552, %549 ]
  %555 = add i32 %352, %554
  %556 = ashr i32 %555, %308
  %557 = icmp sgt i32 %556, 0
  %558 = select i1 %557, i32 %556, i32 0
  %559 = icmp slt i32 %558, 255
  %560 = select i1 %559, i32 %558, i32 255
  %561 = trunc i32 %560 to i8
  %562 = add nsw i64 %465, %386
  %563 = getelementptr inbounds i8, i8* %2, i64 %562
  store i8 %561, i8* %563, align 1
  br label %582

564:                                              ; preds = %531
  store i16 %528, i16* %535, align 2
  br label %582

565:                                              ; preds = %464
  %566 = and i32 %527, 65535
  %567 = sub nsw i32 %296, %523
  %568 = add nsw i32 %567, -1
  %569 = shl i32 -1, %567
  %570 = shl i32 -1, %568
  %571 = add i32 %569, %310
  %572 = add i32 %571, %570
  %573 = add i32 %572, %566
  %574 = ashr i32 %573, %308
  %575 = icmp sgt i32 %574, 0
  %576 = select i1 %575, i32 %574, i32 0
  %577 = icmp slt i32 %576, 255
  %578 = select i1 %577, i32 %576, i32 255
  %579 = trunc i32 %578 to i8
  %580 = add nsw i64 %465, %386
  %581 = getelementptr inbounds i8, i8* %2, i64 %580
  store i8 %579, i8* %581, align 1
  br label %582

582:                                              ; preds = %565, %564, %553
  %583 = add nsw i64 %465, 1
  %584 = icmp eq i64 %583, %357
  br i1 %584, label %585, label %464

585:                                              ; preds = %582, %381
  %586 = add nuw nsw i64 %360, 1
  %587 = icmp eq i64 %586, %356
  br i1 %587, label %591, label %588

588:                                              ; preds = %585
  %589 = add nsw i32 %361, %11
  %590 = load i16, i16* %20, align 8
  br label %358

591:                                              ; preds = %585, %295
  call void @llvm.lifetime.end.p0i8(i64 68608, i8* nonnull %15) #3
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_highbd_convolve_2d_scale_sse4_1(i16* nocapture readonly, i32, i16* nocapture, i32, i32, i32, %struct.InterpFilterParams* nocapture readonly, %struct.InterpFilterParams* nocapture readonly, i32, i32, i32, i32, %struct.ConvolveParams* nocapture readonly, i32) local_unnamed_addr #0 {
  %15 = alloca [34304 x i16], align 16
  %16 = bitcast [34304 x i16]* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 68608, i8* nonnull %16) #3
  %17 = add nsw i32 %5, -1
  %18 = mul nsw i32 %17, %11
  %19 = add nsw i32 %18, %10
  %20 = ashr i32 %19, 10
  %21 = getelementptr inbounds %struct.InterpFilterParams, %struct.InterpFilterParams* %7, i64 0, i32 1
  %22 = load i16, i16* %21, align 8
  %23 = zext i16 %22 to i32
  %24 = add nsw i32 %20, %23
  %25 = lshr i32 %23, 1
  %26 = add nsw i32 %25, -1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %16, i8 0, i64 68608, i1 false)
  %27 = mul nsw i32 %26, %1
  %28 = sext i32 %27 to i64
  %29 = sub nsw i64 0, %28
  %30 = getelementptr inbounds i16, i16* %0, i64 %29
  %31 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %12, i64 0, i32 3
  %32 = load i32, i32* %31, align 4
  %33 = getelementptr inbounds i16, i16* %30, i64 -3
  %34 = shl i32 1, %32
  %35 = sdiv i32 %34, 2
  %36 = add nsw i32 %13, 6
  %37 = shl i32 1, %36
  %38 = add nsw i32 %35, %37
  %39 = insertelement <4 x i32> undef, i32 %38, i32 0
  %40 = shufflevector <4 x i32> %39, <4 x i32> undef, <4 x i32> zeroinitializer
  %41 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %32, i32 0
  %42 = icmp sgt i32 %4, 0
  br i1 %42, label %43, label %282

43:                                               ; preds = %14
  %44 = getelementptr inbounds %struct.InterpFilterParams, %struct.InterpFilterParams* %6, i64 0, i32 0
  %45 = getelementptr inbounds %struct.InterpFilterParams, %struct.InterpFilterParams* %6, i64 0, i32 1
  %46 = add nsw i32 %24, -4
  %47 = icmp slt i32 %46, 0
  %48 = sext i32 %1 to i64
  %49 = shl nsw i32 %1, 1
  %50 = sext i32 %49 to i64
  %51 = mul nsw i32 %1, 3
  %52 = sext i32 %51 to i64
  %53 = ashr i32 %34, 1
  %54 = sext i32 %46 to i64
  %55 = sext i32 %24 to i64
  %56 = zext i32 %4 to i64
  %57 = load i16*, i16** %44, align 8
  %58 = load i16, i16* %45, align 8
  %59 = zext i16 %58 to i32
  %60 = add i32 %53, %37
  %61 = icmp eq i32 %1, 1
  %62 = insertelement <8 x i32> undef, i32 %60, i32 0
  %63 = shufflevector <8 x i32> %62, <8 x i32> undef, <8 x i32> zeroinitializer
  %64 = insertelement <8 x i32> undef, i32 %32, i32 0
  %65 = shufflevector <8 x i32> %64, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %66

66:                                               ; preds = %278, %43
  %67 = phi i64 [ 0, %43 ], [ %279, %278 ]
  %68 = phi i32 [ %8, %43 ], [ %280, %278 ]
  %69 = ashr i32 %68, 10
  %70 = sext i32 %69 to i64
  %71 = getelementptr inbounds i16, i16* %33, i64 %70
  %72 = lshr i32 %68, 6
  %73 = and i32 %72, 15
  %74 = mul nuw nsw i32 %73, %59
  %75 = zext i32 %74 to i64
  %76 = getelementptr inbounds i16, i16* %57, i64 %75
  %77 = bitcast i16* %76 to <8 x i16>*
  %78 = load <8 x i16>, <8 x i16>* %77, align 1
  %79 = extractelement <8 x i16> %78, i32 0
  br i1 %47, label %85, label %80

80:                                               ; preds = %66
  %81 = mul nsw i64 %67, %55
  %82 = getelementptr inbounds [34304 x i16], [34304 x i16]* %15, i64 0, i64 %81
  br label %198

83:                                               ; preds = %198
  %84 = trunc i64 %227 to i32
  br label %85

85:                                               ; preds = %83, %66
  %86 = phi i32 [ 0, %66 ], [ %84, %83 ]
  %87 = icmp slt i32 %86, %24
  br i1 %87, label %88, label %278

88:                                               ; preds = %85
  %89 = mul nsw i64 %67, %55
  %90 = sext i32 %86 to i64
  %91 = getelementptr inbounds i16, i16* %76, i64 1
  %92 = getelementptr inbounds i16, i16* %76, i64 2
  %93 = getelementptr inbounds i16, i16* %76, i64 3
  %94 = getelementptr inbounds i16, i16* %76, i64 4
  %95 = getelementptr inbounds i16, i16* %76, i64 5
  %96 = getelementptr inbounds i16, i16* %76, i64 6
  %97 = getelementptr inbounds i16, i16* %76, i64 7
  %98 = sext i16 %79 to i32
  %99 = load i16, i16* %91, align 2
  %100 = sext i16 %99 to i32
  %101 = load i16, i16* %92, align 2
  %102 = sext i16 %101 to i32
  %103 = load i16, i16* %93, align 2
  %104 = sext i16 %103 to i32
  %105 = load i16, i16* %94, align 2
  %106 = sext i16 %105 to i32
  %107 = load i16, i16* %95, align 2
  %108 = sext i16 %107 to i32
  %109 = load i16, i16* %96, align 2
  %110 = sext i16 %109 to i32
  %111 = load i16, i16* %97, align 2
  %112 = sext i16 %111 to i32
  %113 = sub nsw i64 %55, %90
  %114 = icmp ugt i64 %113, 7
  %115 = and i1 %114, %61
  br i1 %115, label %116, label %196

116:                                              ; preds = %88
  %117 = and i64 %113, -8
  %118 = add nsw i64 %117, %90
  %119 = insertelement <8 x i32> undef, i32 %98, i32 0
  %120 = shufflevector <8 x i32> %119, <8 x i32> undef, <8 x i32> zeroinitializer
  %121 = insertelement <8 x i32> undef, i32 %100, i32 0
  %122 = shufflevector <8 x i32> %121, <8 x i32> undef, <8 x i32> zeroinitializer
  %123 = insertelement <8 x i32> undef, i32 %102, i32 0
  %124 = shufflevector <8 x i32> %123, <8 x i32> undef, <8 x i32> zeroinitializer
  %125 = insertelement <8 x i32> undef, i32 %104, i32 0
  %126 = shufflevector <8 x i32> %125, <8 x i32> undef, <8 x i32> zeroinitializer
  %127 = insertelement <8 x i32> undef, i32 %106, i32 0
  %128 = shufflevector <8 x i32> %127, <8 x i32> undef, <8 x i32> zeroinitializer
  %129 = insertelement <8 x i32> undef, i32 %108, i32 0
  %130 = shufflevector <8 x i32> %129, <8 x i32> undef, <8 x i32> zeroinitializer
  %131 = insertelement <8 x i32> undef, i32 %110, i32 0
  %132 = shufflevector <8 x i32> %131, <8 x i32> undef, <8 x i32> zeroinitializer
  %133 = insertelement <8 x i32> undef, i32 %112, i32 0
  %134 = shufflevector <8 x i32> %133, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %135

135:                                              ; preds = %135, %116
  %136 = phi i64 [ 0, %116 ], [ %192, %135 ]
  %137 = add i64 %136, %90
  %138 = mul nsw i64 %137, %48
  %139 = getelementptr inbounds i16, i16* %71, i64 %138
  %140 = bitcast i16* %139 to <8 x i16>*
  %141 = load <8 x i16>, <8 x i16>* %140, align 2
  %142 = zext <8 x i16> %141 to <8 x i32>
  %143 = mul nsw <8 x i32> %120, %142
  %144 = getelementptr inbounds i16, i16* %139, i64 1
  %145 = bitcast i16* %144 to <8 x i16>*
  %146 = load <8 x i16>, <8 x i16>* %145, align 2
  %147 = zext <8 x i16> %146 to <8 x i32>
  %148 = mul nsw <8 x i32> %122, %147
  %149 = getelementptr inbounds i16, i16* %139, i64 2
  %150 = bitcast i16* %149 to <8 x i16>*
  %151 = load <8 x i16>, <8 x i16>* %150, align 2
  %152 = zext <8 x i16> %151 to <8 x i32>
  %153 = mul nsw <8 x i32> %124, %152
  %154 = getelementptr inbounds i16, i16* %139, i64 3
  %155 = bitcast i16* %154 to <8 x i16>*
  %156 = load <8 x i16>, <8 x i16>* %155, align 2
  %157 = zext <8 x i16> %156 to <8 x i32>
  %158 = mul nsw <8 x i32> %126, %157
  %159 = getelementptr inbounds i16, i16* %139, i64 4
  %160 = bitcast i16* %159 to <8 x i16>*
  %161 = load <8 x i16>, <8 x i16>* %160, align 2
  %162 = zext <8 x i16> %161 to <8 x i32>
  %163 = mul nsw <8 x i32> %128, %162
  %164 = getelementptr inbounds i16, i16* %139, i64 5
  %165 = bitcast i16* %164 to <8 x i16>*
  %166 = load <8 x i16>, <8 x i16>* %165, align 2
  %167 = zext <8 x i16> %166 to <8 x i32>
  %168 = mul nsw <8 x i32> %130, %167
  %169 = getelementptr inbounds i16, i16* %139, i64 6
  %170 = bitcast i16* %169 to <8 x i16>*
  %171 = load <8 x i16>, <8 x i16>* %170, align 2
  %172 = zext <8 x i16> %171 to <8 x i32>
  %173 = mul nsw <8 x i32> %132, %172
  %174 = getelementptr inbounds i16, i16* %139, i64 7
  %175 = bitcast i16* %174 to <8 x i16>*
  %176 = load <8 x i16>, <8 x i16>* %175, align 2
  %177 = zext <8 x i16> %176 to <8 x i32>
  %178 = mul nsw <8 x i32> %134, %177
  %179 = add <8 x i32> %63, %143
  %180 = add <8 x i32> %179, %148
  %181 = add <8 x i32> %180, %153
  %182 = add <8 x i32> %181, %158
  %183 = add <8 x i32> %182, %163
  %184 = add <8 x i32> %183, %168
  %185 = add <8 x i32> %184, %173
  %186 = add <8 x i32> %185, %178
  %187 = ashr <8 x i32> %186, %65
  %188 = trunc <8 x i32> %187 to <8 x i16>
  %189 = add nsw i64 %137, %89
  %190 = getelementptr inbounds [34304 x i16], [34304 x i16]* %15, i64 0, i64 %189
  %191 = bitcast i16* %190 to <8 x i16>*
  store <8 x i16> %188, <8 x i16>* %191, align 2
  %192 = add i64 %136, 8
  %193 = icmp eq i64 %192, %117
  br i1 %193, label %194, label %135, !llvm.loop !5

194:                                              ; preds = %135
  %195 = icmp eq i64 %113, %117
  br i1 %195, label %278, label %196

196:                                              ; preds = %88, %194
  %197 = phi i64 [ %90, %88 ], [ %118, %194 ]
  br label %229

198:                                              ; preds = %198, %80
  %199 = phi i64 [ 0, %80 ], [ %227, %198 ]
  %200 = mul nsw i64 %199, %48
  %201 = getelementptr inbounds i16, i16* %71, i64 %200
  %202 = getelementptr inbounds i16, i16* %201, i64 %48
  %203 = getelementptr inbounds i16, i16* %201, i64 %50
  %204 = getelementptr inbounds i16, i16* %201, i64 %52
  %205 = bitcast i16* %201 to <8 x i16>*
  %206 = load <8 x i16>, <8 x i16>* %205, align 1
  %207 = bitcast i16* %202 to <8 x i16>*
  %208 = load <8 x i16>, <8 x i16>* %207, align 1
  %209 = bitcast i16* %203 to <8 x i16>*
  %210 = load <8 x i16>, <8 x i16>* %209, align 1
  %211 = bitcast i16* %204 to <8 x i16>*
  %212 = load <8 x i16>, <8 x i16>* %211, align 1
  %213 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %206, <8 x i16> %78) #3
  %214 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %208, <8 x i16> %78) #3
  %215 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %210, <8 x i16> %78) #3
  %216 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %212, <8 x i16> %78) #3
  %217 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %213, <4 x i32> %214) #3
  %218 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %215, <4 x i32> %216) #3
  %219 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %217, <4 x i32> %218) #3
  %220 = add <4 x i32> %219, %40
  %221 = tail call <4 x i32> @llvm.x86.sse2.psra.d(<4 x i32> %220, <4 x i32> %41) #3
  %222 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %221, <4 x i32> undef) #3
  %223 = bitcast <8 x i16> %222 to <2 x i64>
  %224 = getelementptr inbounds i16, i16* %82, i64 %199
  %225 = extractelement <2 x i64> %223, i32 0
  %226 = bitcast i16* %224 to i64*
  store i64 %225, i64* %226, align 2
  %227 = add nuw nsw i64 %199, 4
  %228 = icmp sgt i64 %227, %54
  br i1 %228, label %83, label %198

229:                                              ; preds = %196, %229
  %230 = phi i64 [ %276, %229 ], [ %197, %196 ]
  %231 = mul nsw i64 %230, %48
  %232 = getelementptr inbounds i16, i16* %71, i64 %231
  %233 = load i16, i16* %232, align 2
  %234 = zext i16 %233 to i32
  %235 = mul nsw i32 %234, %98
  %236 = getelementptr inbounds i16, i16* %232, i64 1
  %237 = load i16, i16* %236, align 2
  %238 = zext i16 %237 to i32
  %239 = mul nsw i32 %238, %100
  %240 = getelementptr inbounds i16, i16* %232, i64 2
  %241 = load i16, i16* %240, align 2
  %242 = zext i16 %241 to i32
  %243 = mul nsw i32 %242, %102
  %244 = getelementptr inbounds i16, i16* %232, i64 3
  %245 = load i16, i16* %244, align 2
  %246 = zext i16 %245 to i32
  %247 = mul nsw i32 %246, %104
  %248 = getelementptr inbounds i16, i16* %232, i64 4
  %249 = load i16, i16* %248, align 2
  %250 = zext i16 %249 to i32
  %251 = mul nsw i32 %250, %106
  %252 = getelementptr inbounds i16, i16* %232, i64 5
  %253 = load i16, i16* %252, align 2
  %254 = zext i16 %253 to i32
  %255 = mul nsw i32 %254, %108
  %256 = getelementptr inbounds i16, i16* %232, i64 6
  %257 = load i16, i16* %256, align 2
  %258 = zext i16 %257 to i32
  %259 = mul nsw i32 %258, %110
  %260 = getelementptr inbounds i16, i16* %232, i64 7
  %261 = load i16, i16* %260, align 2
  %262 = zext i16 %261 to i32
  %263 = mul nsw i32 %262, %112
  %264 = add i32 %60, %235
  %265 = add i32 %264, %239
  %266 = add i32 %265, %243
  %267 = add i32 %266, %247
  %268 = add i32 %267, %251
  %269 = add i32 %268, %255
  %270 = add i32 %269, %259
  %271 = add i32 %270, %263
  %272 = ashr i32 %271, %32
  %273 = trunc i32 %272 to i16
  %274 = add nsw i64 %230, %89
  %275 = getelementptr inbounds [34304 x i16], [34304 x i16]* %15, i64 0, i64 %274
  store i16 %273, i16* %275, align 2
  %276 = add nuw nsw i64 %230, 1
  %277 = icmp eq i64 %276, %55
  br i1 %277, label %278, label %229, !llvm.loop !6

278:                                              ; preds = %229, %194, %85
  %279 = add nuw nsw i64 %67, 1
  %280 = add nsw i32 %68, %9
  %281 = icmp eq i64 %279, %56
  br i1 %281, label %282, label %66

282:                                              ; preds = %278, %14
  %283 = add nsw i32 %13, 14
  %284 = sub i32 %283, %32
  %285 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %12, i64 0, i32 4
  %286 = load i32, i32* %285, align 8
  %287 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %286, i32 0
  %288 = sub nsw i32 %284, %286
  %289 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %12, i64 0, i32 1
  %290 = load i16*, i16** %289, align 8
  %291 = icmp eq i32 %13, 10
  %292 = icmp eq i32 %13, 12
  %293 = select i1 %292, i16 4095, i16 255
  %294 = select i1 %291, i16 1023, i16 %293
  %295 = insertelement <8 x i16> undef, i16 %294, i32 0
  %296 = shufflevector <8 x i16> %295, <8 x i16> undef, <8 x i32> zeroinitializer
  %297 = sub nsw i32 14, %32
  %298 = sub i32 %297, %286
  %299 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %298, i32 0
  %300 = shl i32 1, %298
  %301 = ashr i32 %300, 1
  %302 = shl i32 1, %284
  %303 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %12, i64 0, i32 8
  %304 = load i32, i32* %303, align 8
  %305 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %12, i64 0, i32 9
  %306 = load i32, i32* %305, align 4
  %307 = insertelement <4 x i32> undef, i32 %304, i32 0
  %308 = shufflevector <4 x i32> %307, <4 x i32> undef, <4 x i32> zeroinitializer
  %309 = insertelement <4 x i32> undef, i32 %306, i32 0
  %310 = shufflevector <4 x i32> %309, <4 x i32> undef, <4 x i32> zeroinitializer
  %311 = icmp sgt i32 %5, 0
  br i1 %311, label %312, label %597

312:                                              ; preds = %282
  %313 = insertelement <4 x i32> undef, i32 %301, i32 0
  %314 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %12, i64 0, i32 2
  %315 = load i32, i32* %314, align 8
  %316 = add nsw i32 %288, -1
  %317 = shl i32 1, %316
  %318 = shl i32 1, %288
  %319 = add nsw i32 %317, %318
  %320 = insertelement <4 x i32> undef, i32 %319, i32 0
  %321 = insertelement <4 x i32> undef, i32 %302, i32 0
  %322 = shl i32 1, %286
  %323 = ashr i32 %322, 1
  %324 = insertelement <4 x i32> undef, i32 %323, i32 0
  %325 = getelementptr inbounds %struct.InterpFilterParams, %struct.InterpFilterParams* %7, i64 0, i32 0
  %326 = add nsw i32 %4, -4
  %327 = icmp slt i32 %326, 0
  %328 = sext i32 %24 to i64
  %329 = shl nsw i32 %24, 1
  %330 = sext i32 %329 to i64
  %331 = mul nsw i32 %24, 3
  %332 = sext i32 %331 to i64
  %333 = add <4 x i32> %324, %321
  %334 = shufflevector <4 x i32> %333, <4 x i32> undef, <4 x i32> zeroinitializer
  %335 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %12, i64 0, i32 6
  %336 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %12, i64 0, i32 0
  %337 = getelementptr inbounds %struct.ConvolveParams, %struct.ConvolveParams* %12, i64 0, i32 7
  %338 = sub <4 x i32> %313, %320
  %339 = shufflevector <4 x i32> %338, <4 x i32> undef, <4 x i32> zeroinitializer
  %340 = bitcast <4 x i32> %299 to <8 x i16>
  %341 = sext i32 %326 to i64
  %342 = sext i32 %3 to i64
  %343 = sext i32 %315 to i64
  %344 = zext i32 %5 to i64
  %345 = sext i32 %4 to i64
  %346 = icmp eq i32 %13, 10
  %347 = select i1 %346, i32 1023, i32 255
  %348 = icmp eq i32 %13, 12
  %349 = select i1 %348, i32 4095, i32 %347
  %350 = icmp eq i32 %13, 10
  %351 = select i1 %350, i32 1023, i32 255
  %352 = icmp eq i32 %13, 12
  %353 = select i1 %352, i32 4095, i32 %351
  br label %354

354:                                              ; preds = %594, %312
  %355 = phi i16 [ %22, %312 ], [ %596, %594 ]
  %356 = phi i64 [ 0, %312 ], [ %592, %594 ]
  %357 = phi i32 [ %10, %312 ], [ %595, %594 ]
  %358 = ashr i32 %357, 10
  %359 = sext i32 %358 to i64
  %360 = getelementptr inbounds [34304 x i16], [34304 x i16]* %15, i64 0, i64 %359
  %361 = lshr i32 %357, 6
  %362 = and i32 %361, 15
  %363 = load i16*, i16** %325, align 8
  %364 = zext i16 %355 to i32
  %365 = mul nuw nsw i32 %362, %364
  %366 = zext i32 %365 to i64
  %367 = getelementptr inbounds i16, i16* %363, i64 %366
  %368 = bitcast i16* %367 to <8 x i16>*
  %369 = load <8 x i16>, <8 x i16>* %368, align 1
  br i1 %327, label %377, label %370

370:                                              ; preds = %354
  %371 = mul nsw i64 %356, %342
  %372 = getelementptr inbounds i16, i16* %2, i64 %371
  %373 = mul nsw i64 %356, %343
  %374 = getelementptr inbounds i16, i16* %290, i64 %373
  br label %391

375:                                              ; preds = %456
  %376 = trunc i64 %462 to i32
  br label %377

377:                                              ; preds = %375, %354
  %378 = phi i32 [ 0, %354 ], [ %376, %375 ]
  %379 = icmp slt i32 %378, %4
  br i1 %379, label %380, label %591

380:                                              ; preds = %377
  %381 = mul nsw i64 %356, %343
  %382 = mul nsw i64 %356, %342
  %383 = sext i32 %378 to i64
  %384 = getelementptr inbounds i16, i16* %367, i64 1
  %385 = getelementptr inbounds i16, i16* %367, i64 2
  %386 = getelementptr inbounds i16, i16* %367, i64 3
  %387 = getelementptr inbounds i16, i16* %367, i64 4
  %388 = getelementptr inbounds i16, i16* %367, i64 5
  %389 = getelementptr inbounds i16, i16* %367, i64 6
  %390 = getelementptr inbounds i16, i16* %367, i64 7
  br label %464

391:                                              ; preds = %456, %370
  %392 = phi i64 [ 0, %370 ], [ %462, %456 ]
  %393 = mul nsw i64 %392, %328
  %394 = getelementptr inbounds i16, i16* %360, i64 %393
  %395 = getelementptr inbounds i16, i16* %394, i64 %328
  %396 = getelementptr inbounds i16, i16* %394, i64 %330
  %397 = getelementptr inbounds i16, i16* %394, i64 %332
  %398 = bitcast i16* %394 to <8 x i16>*
  %399 = load <8 x i16>, <8 x i16>* %398, align 2
  %400 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %399, <8 x i16> %369) #3
  %401 = bitcast i16* %395 to <8 x i16>*
  %402 = load <8 x i16>, <8 x i16>* %401, align 2
  %403 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %402, <8 x i16> %369) #3
  %404 = bitcast i16* %396 to <8 x i16>*
  %405 = load <8 x i16>, <8 x i16>* %404, align 2
  %406 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %405, <8 x i16> %369) #3
  %407 = bitcast i16* %397 to <8 x i16>*
  %408 = load <8 x i16>, <8 x i16>* %407, align 2
  %409 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %408, <8 x i16> %369) #3
  %410 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %400, <4 x i32> %403) #3
  %411 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %406, <4 x i32> %409) #3
  %412 = tail call <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32> %410, <4 x i32> %411) #3
  %413 = add <4 x i32> %412, %334
  %414 = tail call <4 x i32> @llvm.x86.sse2.psra.d(<4 x i32> %413, <4 x i32> %287) #3
  %415 = getelementptr inbounds i16, i16* %372, i64 %392
  %416 = getelementptr inbounds i16, i16* %374, i64 %392
  %417 = load i32, i32* %335, align 8
  %418 = icmp eq i32 %417, 0
  br i1 %418, label %448, label %419

419:                                              ; preds = %391
  %420 = load i32, i32* %336, align 8
  %421 = icmp eq i32 %420, 0
  br i1 %421, label %446, label %422

422:                                              ; preds = %419
  %423 = bitcast i16* %416 to i64*
  %424 = load i64, i64* %423, align 1
  %425 = insertelement <2 x i64> undef, i64 %424, i32 0
  %426 = bitcast <2 x i64> %425 to <8 x i16>
  %427 = shufflevector <8 x i16> %426, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %428 = zext <4 x i16> %427 to <4 x i32>
  %429 = load i32, i32* %337, align 4
  %430 = icmp eq i32 %429, 0
  br i1 %430, label %435, label %431

431:                                              ; preds = %422
  %432 = mul <4 x i32> %308, %428
  %433 = mul <4 x i32> %414, %310
  %434 = add <4 x i32> %432, %433
  br label %437

435:                                              ; preds = %422
  %436 = add <4 x i32> %414, %428
  br label %437

437:                                              ; preds = %435, %431
  %438 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %435 ], [ <i32 4, i32 4, i32 4, i32 4>, %431 ]
  %439 = phi <4 x i32> [ %436, %435 ], [ %434, %431 ]
  %440 = ashr <4 x i32> %439, %438
  %441 = add <4 x i32> %440, %339
  %442 = tail call <4 x i32> @llvm.x86.sse2.psra.d(<4 x i32> %441, <4 x i32> %299) #3
  %443 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %442, <4 x i32> %442) #3
  %444 = icmp slt <8 x i16> %443, %296
  %445 = select <8 x i1> %444, <8 x i16> %443, <8 x i16> %296
  br label %456

446:                                              ; preds = %419
  %447 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %414, <4 x i32> undef) #3
  br label %456

448:                                              ; preds = %391
  %449 = add <4 x i32> %414, %339
  %450 = bitcast <4 x i32> %449 to <8 x i16>
  %451 = tail call <8 x i16> @llvm.x86.sse2.psra.w(<8 x i16> %450, <8 x i16> %340) #3
  %452 = bitcast <8 x i16> %451 to <4 x i32>
  %453 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %452, <4 x i32> %452) #3
  %454 = icmp slt <8 x i16> %453, %296
  %455 = select <8 x i1> %454, <8 x i16> %453, <8 x i16> %296
  br label %456

456:                                              ; preds = %448, %446, %437
  %457 = phi <8 x i16> [ %455, %448 ], [ %447, %446 ], [ %445, %437 ]
  %458 = phi i16* [ %415, %448 ], [ %416, %446 ], [ %415, %437 ]
  %459 = bitcast <8 x i16> %457 to <2 x i64>
  %460 = extractelement <2 x i64> %459, i32 0
  %461 = bitcast i16* %458 to i64*
  store i64 %460, i64* %461, align 1
  %462 = add nuw nsw i64 %392, 4
  %463 = icmp sgt i64 %462, %341
  br i1 %463, label %375, label %391

464:                                              ; preds = %588, %380
  %465 = phi i64 [ %383, %380 ], [ %589, %588 ]
  %466 = mul nsw i64 %465, %328
  %467 = getelementptr inbounds i16, i16* %360, i64 %466
  %468 = load i16, i16* %367, align 2
  %469 = sext i16 %468 to i32
  %470 = load i16, i16* %467, align 2
  %471 = sext i16 %470 to i32
  %472 = mul nsw i32 %471, %469
  %473 = add nsw i32 %472, %302
  %474 = load i16, i16* %384, align 2
  %475 = sext i16 %474 to i32
  %476 = getelementptr inbounds i16, i16* %467, i64 1
  %477 = load i16, i16* %476, align 2
  %478 = sext i16 %477 to i32
  %479 = mul nsw i32 %478, %475
  %480 = add nsw i32 %473, %479
  %481 = load i16, i16* %385, align 2
  %482 = sext i16 %481 to i32
  %483 = getelementptr inbounds i16, i16* %467, i64 2
  %484 = load i16, i16* %483, align 2
  %485 = sext i16 %484 to i32
  %486 = mul nsw i32 %485, %482
  %487 = add nsw i32 %480, %486
  %488 = load i16, i16* %386, align 2
  %489 = sext i16 %488 to i32
  %490 = getelementptr inbounds i16, i16* %467, i64 3
  %491 = load i16, i16* %490, align 2
  %492 = sext i16 %491 to i32
  %493 = mul nsw i32 %492, %489
  %494 = add nsw i32 %487, %493
  %495 = load i16, i16* %387, align 2
  %496 = sext i16 %495 to i32
  %497 = getelementptr inbounds i16, i16* %467, i64 4
  %498 = load i16, i16* %497, align 2
  %499 = sext i16 %498 to i32
  %500 = mul nsw i32 %499, %496
  %501 = add nsw i32 %494, %500
  %502 = load i16, i16* %388, align 2
  %503 = sext i16 %502 to i32
  %504 = getelementptr inbounds i16, i16* %467, i64 5
  %505 = load i16, i16* %504, align 2
  %506 = sext i16 %505 to i32
  %507 = mul nsw i32 %506, %503
  %508 = add nsw i32 %501, %507
  %509 = load i16, i16* %389, align 2
  %510 = sext i16 %509 to i32
  %511 = getelementptr inbounds i16, i16* %467, i64 6
  %512 = load i16, i16* %511, align 2
  %513 = sext i16 %512 to i32
  %514 = mul nsw i32 %513, %510
  %515 = add nsw i32 %508, %514
  %516 = load i16, i16* %390, align 2
  %517 = sext i16 %516 to i32
  %518 = getelementptr inbounds i16, i16* %467, i64 7
  %519 = load i16, i16* %518, align 2
  %520 = sext i16 %519 to i32
  %521 = mul nsw i32 %520, %517
  %522 = add nsw i32 %515, %521
  %523 = load i32, i32* %285, align 8
  %524 = shl i32 1, %523
  %525 = ashr i32 %524, 1
  %526 = add nsw i32 %522, %525
  %527 = ashr i32 %526, %523
  %528 = trunc i32 %527 to i16
  %529 = load i32, i32* %335, align 8
  %530 = icmp eq i32 %529, 0
  br i1 %530, label %571, label %531

531:                                              ; preds = %464
  %532 = load i32, i32* %336, align 8
  %533 = icmp eq i32 %532, 0
  %534 = add nsw i64 %465, %381
  %535 = getelementptr inbounds i16, i16* %290, i64 %534
  br i1 %533, label %570, label %536

536:                                              ; preds = %531
  %537 = load i16, i16* %535, align 2
  %538 = zext i16 %537 to i32
  %539 = load i32, i32* %337, align 4
  %540 = icmp eq i32 %539, 0
  br i1 %540, label %549, label %541

541:                                              ; preds = %536
  %542 = load i32, i32* %303, align 8
  %543 = mul nsw i32 %542, %538
  %544 = and i32 %527, 65535
  %545 = load i32, i32* %305, align 4
  %546 = mul nsw i32 %545, %544
  %547 = add nsw i32 %546, %543
  %548 = ashr i32 %547, 4
  br label %553

549:                                              ; preds = %536
  %550 = and i32 %527, 65535
  %551 = add nuw nsw i32 %550, %538
  %552 = lshr i32 %551, 1
  br label %553

553:                                              ; preds = %549, %541
  %554 = phi i32 [ %548, %541 ], [ %552, %549 ]
  %555 = sub nsw i32 %284, %523
  %556 = add nsw i32 %555, -1
  %557 = shl i32 -1, %555
  %558 = shl i32 -1, %556
  %559 = add i32 %557, %301
  %560 = add i32 %559, %558
  %561 = add i32 %560, %554
  %562 = ashr i32 %561, %298
  %563 = icmp slt i32 %562, %349
  %564 = select i1 %563, i32 %562, i32 %349
  %565 = icmp sgt i32 %564, 0
  %566 = select i1 %565, i32 %564, i32 0
  %567 = trunc i32 %566 to i16
  %568 = add nsw i64 %465, %382
  %569 = getelementptr inbounds i16, i16* %2, i64 %568
  store i16 %567, i16* %569, align 2
  br label %588

570:                                              ; preds = %531
  store i16 %528, i16* %535, align 2
  br label %588

571:                                              ; preds = %464
  %572 = and i32 %527, 65535
  %573 = sub nsw i32 %284, %523
  %574 = add nsw i32 %573, -1
  %575 = shl i32 -1, %573
  %576 = shl i32 -1, %574
  %577 = add i32 %575, %301
  %578 = add i32 %577, %576
  %579 = add i32 %578, %572
  %580 = ashr i32 %579, %298
  %581 = icmp slt i32 %580, %353
  %582 = select i1 %581, i32 %580, i32 %353
  %583 = icmp sgt i32 %582, 0
  %584 = select i1 %583, i32 %582, i32 0
  %585 = trunc i32 %584 to i16
  %586 = add nsw i64 %465, %382
  %587 = getelementptr inbounds i16, i16* %2, i64 %586
  store i16 %585, i16* %587, align 2
  br label %588

588:                                              ; preds = %571, %570, %553
  %589 = add nsw i64 %465, 1
  %590 = icmp eq i64 %589, %345
  br i1 %590, label %591, label %464

591:                                              ; preds = %588, %377
  %592 = add nuw nsw i64 %356, 1
  %593 = icmp eq i64 %592, %344
  br i1 %593, label %597, label %594

594:                                              ; preds = %591
  %595 = add nsw i32 %357, %11
  %596 = load i16, i16* %21, align 8
  br label %354

597:                                              ; preds = %591, %282
  call void @llvm.lifetime.end.p0i8(i64 68608, i8* nonnull %16) #3
  ret void
}

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16>, <8 x i16>) #2

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.ssse3.phadd.d.128(<4 x i32>, <4 x i32>) #2

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.sse2.psra.d(<4 x i32>, <4 x i32>) #2

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32>, <4 x i32>) #2

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.psra.w(<8 x i16>, <8 x i16>) #2

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16>, <8 x i16>) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !3}
!5 = distinct !{!5, !3}
!6 = distinct !{!6, !3}
