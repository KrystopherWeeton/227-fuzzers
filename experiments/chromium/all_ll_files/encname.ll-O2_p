; ModuleID = '../../third_party/unrar/src/encname.cpp'
source_filename = "../../third_party/unrar/src/encname.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver fmemopen, fmemopen@GLIBC_2.2.5"
module asm ".symver glob, glob@GLIBC_2.2.5"
module asm ".symver glob64, glob64@GLIBC_2.2.5"
module asm ".symver quick_exit, quick_exit@GLIBC_2.10"
module asm ".symver fmemopen, fmemopen@GLIBC_2.2.5"
module asm ".symver glob, glob@GLIBC_2.2.5"
module asm ".symver glob64, glob64@GLIBC_2.2.5"
module asm ".symver quick_exit, quick_exit@GLIBC_2.10"

%class.EncodeFileName = type { i8*, i8, i32, i64, i64 }

@_ZN14EncodeFileNameC1Ev = hidden unnamed_addr alias void (%class.EncodeFileName*), void (%class.EncodeFileName*)* @_ZN14EncodeFileNameC2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN14EncodeFileNameC2Ev(%class.EncodeFileName* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.EncodeFileName, %class.EncodeFileName* %0, i64 0, i32 1
  store i8 0, i8* %2, align 8
  %3 = getelementptr inbounds %class.EncodeFileName, %class.EncodeFileName* %0, i64 0, i32 2
  %4 = bitcast i32* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %4, i8 0, i64 20, i1 false)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN14EncodeFileName6DecodeEPcmPhmPwm(%class.EncodeFileName* nocapture, i8* nocapture readonly, i64, i8* nocapture readonly, i64, i32* nocapture, i64) local_unnamed_addr #1 align 2 {
  %8 = icmp eq i64 %4, 0
  br i1 %8, label %13, label %9

9:                                                ; preds = %7
  %10 = load i8, i8* %3, align 1
  %11 = zext i8 %10 to i32
  %12 = shl nuw nsw i32 %11, 8
  br label %13

13:                                               ; preds = %7, %9
  %14 = phi i64 [ 1, %9 ], [ 0, %7 ]
  %15 = phi i32 [ %12, %9 ], [ 0, %7 ]
  %16 = icmp ult i64 %14, %4
  %17 = icmp ne i64 %6, 0
  %18 = and i1 %16, %17
  br i1 %18, label %19, label %320

19:                                               ; preds = %13
  %20 = getelementptr inbounds %class.EncodeFileName, %class.EncodeFileName* %0, i64 0, i32 2
  %21 = getelementptr inbounds %class.EncodeFileName, %class.EncodeFileName* %0, i64 0, i32 1
  %22 = load i32, i32* %20, align 4
  %23 = getelementptr i32, i32* %5, i64 1
  %24 = getelementptr i8, i8* %1, i64 1
  %25 = getelementptr i32, i32* %5, i64 1
  %26 = getelementptr i8, i8* %1, i64 1
  %27 = insertelement <4 x i32> undef, i32 %15, i32 0
  %28 = shufflevector <4 x i32> %27, <4 x i32> undef, <4 x i32> zeroinitializer
  %29 = insertelement <4 x i32> undef, i32 %15, i32 0
  %30 = shufflevector <4 x i32> %29, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %31

31:                                               ; preds = %19, %310
  %32 = phi i32 [ %22, %19 ], [ %316, %310 ]
  %33 = phi i64 [ 0, %19 ], [ %312, %310 ]
  %34 = phi i64 [ %14, %19 ], [ %311, %310 ]
  %35 = icmp eq i32 %32, 0
  br i1 %35, label %38, label %36

36:                                               ; preds = %31
  %37 = load i8, i8* %21, align 8
  br label %42

38:                                               ; preds = %31
  %39 = add nuw i64 %34, 1
  %40 = getelementptr inbounds i8, i8* %3, i64 %34
  %41 = load i8, i8* %40, align 1
  store i8 %41, i8* %21, align 8
  store i32 8, i32* %20, align 4
  br label %42

42:                                               ; preds = %36, %38
  %43 = phi i8 [ %41, %38 ], [ %37, %36 ]
  %44 = phi i64 [ %39, %38 ], [ %34, %36 ]
  %45 = lshr i8 %43, 6
  %46 = zext i8 %45 to i32
  switch i32 %46, label %309 [
    i32 0, label %47
    i32 1, label %56
    i32 2, label %66
    i32 3, label %81
  ]

47:                                               ; preds = %42
  %48 = icmp ult i64 %44, %4
  br i1 %48, label %49, label %310

49:                                               ; preds = %47
  %50 = add nuw i64 %44, 1
  %51 = getelementptr inbounds i8, i8* %3, i64 %44
  %52 = load i8, i8* %51, align 1
  %53 = zext i8 %52 to i32
  %54 = add nuw i64 %33, 1
  %55 = getelementptr inbounds i32, i32* %5, i64 %33
  store i32 %53, i32* %55, align 4
  br label %310

56:                                               ; preds = %42
  %57 = icmp ult i64 %44, %4
  br i1 %57, label %58, label %310

58:                                               ; preds = %56
  %59 = add nuw i64 %44, 1
  %60 = getelementptr inbounds i8, i8* %3, i64 %44
  %61 = load i8, i8* %60, align 1
  %62 = zext i8 %61 to i32
  %63 = or i32 %15, %62
  %64 = add nuw i64 %33, 1
  %65 = getelementptr inbounds i32, i32* %5, i64 %33
  store i32 %63, i32* %65, align 4
  br label %310

66:                                               ; preds = %42
  %67 = add i64 %44, 1
  %68 = icmp ult i64 %67, %4
  br i1 %68, label %69, label %310

69:                                               ; preds = %66
  %70 = getelementptr inbounds i8, i8* %3, i64 %44
  %71 = load i8, i8* %70, align 1
  %72 = zext i8 %71 to i32
  %73 = getelementptr inbounds i8, i8* %3, i64 %67
  %74 = load i8, i8* %73, align 1
  %75 = zext i8 %74 to i32
  %76 = shl nuw nsw i32 %75, 8
  %77 = or i32 %76, %72
  %78 = add nuw i64 %33, 1
  %79 = getelementptr inbounds i32, i32* %5, i64 %33
  store i32 %77, i32* %79, align 4
  %80 = add i64 %44, 2
  br label %310

81:                                               ; preds = %42
  %82 = icmp ult i64 %44, %4
  br i1 %82, label %83, label %310

83:                                               ; preds = %81
  %84 = add nuw i64 %44, 1
  %85 = getelementptr inbounds i8, i8* %3, i64 %44
  %86 = load i8, i8* %85, align 1
  %87 = zext i8 %86 to i32
  %88 = icmp slt i8 %86, 0
  br i1 %88, label %89, label %189

89:                                               ; preds = %83
  %90 = icmp ult i64 %84, %4
  br i1 %90, label %91, label %310

91:                                               ; preds = %89
  %92 = add nuw i64 %44, 2
  %93 = icmp ult i64 %33, %6
  %94 = icmp ult i64 %33, %2
  %95 = and i1 %94, %93
  br i1 %95, label %96, label %310

96:                                               ; preds = %91
  %97 = and i32 %87, 127
  %98 = add nuw nsw i32 %97, 2
  %99 = getelementptr inbounds i8, i8* %3, i64 %84
  %100 = load i8, i8* %99, align 1
  %101 = zext i8 %100 to i32
  %102 = xor i64 %33, -1
  %103 = add i64 %102, %6
  %104 = xor i64 %33, -1
  %105 = add i64 %104, %2
  %106 = icmp ult i64 %103, %105
  %107 = select i1 %106, i64 %103, i64 %105
  %108 = add nuw nsw i32 %97, 1
  %109 = zext i32 %108 to i64
  %110 = icmp ult i64 %107, %109
  %111 = select i1 %110, i64 %107, i64 %109
  %112 = add nuw nsw i64 %111, 1
  %113 = icmp ult i64 %112, 8
  br i1 %113, label %169, label %114

114:                                              ; preds = %96
  %115 = getelementptr i32, i32* %5, i64 %33
  %116 = bitcast i32* %115 to i8*
  %117 = xor i64 %33, -1
  %118 = add i64 %117, %6
  %119 = xor i64 %33, -1
  %120 = add i64 %119, %2
  %121 = icmp ult i64 %118, %120
  %122 = select i1 %121, i64 %118, i64 %120
  %123 = add nuw nsw i32 %97, 1
  %124 = zext i32 %123 to i64
  %125 = icmp ult i64 %122, %124
  %126 = select i1 %125, i64 %122, i64 %124
  %127 = add i64 %33, %126
  %128 = getelementptr i32, i32* %23, i64 %127
  %129 = bitcast i32* %128 to i8*
  %130 = getelementptr i8, i8* %1, i64 %33
  %131 = getelementptr i8, i8* %24, i64 %127
  %132 = icmp ugt i8* %131, %116
  %133 = icmp ult i8* %130, %129
  %134 = and i1 %132, %133
  br i1 %134, label %169, label %135

135:                                              ; preds = %114
  %136 = and i64 %112, 504
  %137 = trunc i64 %136 to i32
  %138 = sub nsw i32 %98, %137
  %139 = add i64 %33, %136
  %140 = insertelement <4 x i32> undef, i32 %101, i32 0
  %141 = shufflevector <4 x i32> %140, <4 x i32> undef, <4 x i32> zeroinitializer
  %142 = insertelement <4 x i32> undef, i32 %101, i32 0
  %143 = shufflevector <4 x i32> %142, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %144

144:                                              ; preds = %144, %135
  %145 = phi i64 [ 0, %135 ], [ %165, %144 ]
  %146 = add i64 %33, %145
  %147 = getelementptr inbounds i8, i8* %1, i64 %146
  %148 = bitcast i8* %147 to <4 x i8>*
  %149 = load <4 x i8>, <4 x i8>* %148, align 1, !alias.scope !2
  %150 = getelementptr inbounds i8, i8* %147, i64 4
  %151 = bitcast i8* %150 to <4 x i8>*
  %152 = load <4 x i8>, <4 x i8>* %151, align 1, !alias.scope !2
  %153 = zext <4 x i8> %149 to <4 x i32>
  %154 = zext <4 x i8> %152 to <4 x i32>
  %155 = add nuw nsw <4 x i32> %141, %153
  %156 = add nuw nsw <4 x i32> %143, %154
  %157 = and <4 x i32> %155, <i32 255, i32 255, i32 255, i32 255>
  %158 = and <4 x i32> %156, <i32 255, i32 255, i32 255, i32 255>
  %159 = or <4 x i32> %157, %28
  %160 = or <4 x i32> %158, %30
  %161 = getelementptr inbounds i32, i32* %5, i64 %146
  %162 = bitcast i32* %161 to <4 x i32>*
  store <4 x i32> %159, <4 x i32>* %162, align 4, !alias.scope !5, !noalias !2
  %163 = getelementptr inbounds i32, i32* %161, i64 4
  %164 = bitcast i32* %163 to <4 x i32>*
  store <4 x i32> %160, <4 x i32>* %164, align 4, !alias.scope !5, !noalias !2
  %165 = add i64 %145, 8
  %166 = icmp eq i64 %165, %136
  br i1 %166, label %167, label %144, !llvm.loop !7

167:                                              ; preds = %144
  %168 = icmp eq i64 %112, %136
  br i1 %168, label %310, label %169

169:                                              ; preds = %167, %114, %96
  %170 = phi i32 [ %98, %114 ], [ %98, %96 ], [ %138, %167 ]
  %171 = phi i64 [ %33, %114 ], [ %33, %96 ], [ %139, %167 ]
  br label %172

172:                                              ; preds = %169, %172
  %173 = phi i32 [ %182, %172 ], [ %170, %169 ]
  %174 = phi i64 [ %183, %172 ], [ %171, %169 ]
  %175 = getelementptr inbounds i8, i8* %1, i64 %174
  %176 = load i8, i8* %175, align 1
  %177 = zext i8 %176 to i32
  %178 = add nuw nsw i32 %177, %101
  %179 = and i32 %178, 255
  %180 = or i32 %179, %15
  %181 = getelementptr inbounds i32, i32* %5, i64 %174
  store i32 %180, i32* %181, align 4
  %182 = add nsw i32 %173, -1
  %183 = add nuw i64 %174, 1
  %184 = icmp sgt i32 %182, 0
  %185 = icmp ult i64 %183, %6
  %186 = and i1 %185, %184
  %187 = icmp ult i64 %183, %2
  %188 = and i1 %187, %186
  br i1 %188, label %172, label %310, !llvm.loop !9

189:                                              ; preds = %83
  %190 = icmp ult i64 %33, %6
  %191 = icmp ult i64 %33, %2
  %192 = and i1 %191, %190
  br i1 %192, label %193, label %310

193:                                              ; preds = %189
  %194 = add nuw nsw i32 %87, 2
  %195 = xor i64 %33, -1
  %196 = add i64 %195, %6
  %197 = xor i64 %33, -1
  %198 = add i64 %197, %2
  %199 = icmp ult i64 %196, %198
  %200 = select i1 %199, i64 %196, i64 %198
  %201 = add nuw nsw i32 %87, 1
  %202 = zext i32 %201 to i64
  %203 = icmp ult i64 %200, %202
  %204 = select i1 %203, i64 %200, i64 %202
  %205 = add nuw nsw i64 %204, 1
  %206 = icmp ult i64 %205, 8
  br i1 %206, label %292, label %207

207:                                              ; preds = %193
  %208 = getelementptr i32, i32* %5, i64 %33
  %209 = bitcast i32* %208 to i8*
  %210 = xor i64 %33, -1
  %211 = add i64 %210, %6
  %212 = xor i64 %33, -1
  %213 = add i64 %212, %2
  %214 = icmp ult i64 %211, %213
  %215 = select i1 %214, i64 %211, i64 %213
  %216 = add nuw nsw i32 %87, 1
  %217 = zext i32 %216 to i64
  %218 = icmp ult i64 %215, %217
  %219 = select i1 %218, i64 %215, i64 %217
  %220 = add i64 %33, %219
  %221 = getelementptr i32, i32* %25, i64 %220
  %222 = bitcast i32* %221 to i8*
  %223 = getelementptr i8, i8* %1, i64 %33
  %224 = getelementptr i8, i8* %26, i64 %220
  %225 = icmp ugt i8* %224, %209
  %226 = icmp ult i8* %223, %222
  %227 = and i1 %225, %226
  br i1 %227, label %292, label %228

228:                                              ; preds = %207
  %229 = and i64 %205, 1016
  %230 = trunc i64 %229 to i32
  %231 = sub nsw i32 %194, %230
  %232 = add i64 %33, %229
  %233 = add nsw i64 %229, -8
  %234 = lshr exact i64 %233, 3
  %235 = add nuw nsw i64 %234, 1
  %236 = and i64 %235, 1
  %237 = icmp eq i64 %233, 0
  br i1 %237, label %273, label %238

238:                                              ; preds = %228
  %239 = sub nuw nsw i64 %235, %236
  br label %240

240:                                              ; preds = %240, %238
  %241 = phi i64 [ 0, %238 ], [ %270, %240 ]
  %242 = phi i64 [ %239, %238 ], [ %271, %240 ]
  %243 = add i64 %33, %241
  %244 = getelementptr inbounds i8, i8* %1, i64 %243
  %245 = bitcast i8* %244 to <4 x i8>*
  %246 = load <4 x i8>, <4 x i8>* %245, align 1, !alias.scope !10
  %247 = getelementptr inbounds i8, i8* %244, i64 4
  %248 = bitcast i8* %247 to <4 x i8>*
  %249 = load <4 x i8>, <4 x i8>* %248, align 1, !alias.scope !10
  %250 = sext <4 x i8> %246 to <4 x i32>
  %251 = sext <4 x i8> %249 to <4 x i32>
  %252 = getelementptr inbounds i32, i32* %5, i64 %243
  %253 = bitcast i32* %252 to <4 x i32>*
  store <4 x i32> %250, <4 x i32>* %253, align 4, !alias.scope !13, !noalias !10
  %254 = getelementptr inbounds i32, i32* %252, i64 4
  %255 = bitcast i32* %254 to <4 x i32>*
  store <4 x i32> %251, <4 x i32>* %255, align 4, !alias.scope !13, !noalias !10
  %256 = or i64 %241, 8
  %257 = add i64 %33, %256
  %258 = getelementptr inbounds i8, i8* %1, i64 %257
  %259 = bitcast i8* %258 to <4 x i8>*
  %260 = load <4 x i8>, <4 x i8>* %259, align 1, !alias.scope !10
  %261 = getelementptr inbounds i8, i8* %258, i64 4
  %262 = bitcast i8* %261 to <4 x i8>*
  %263 = load <4 x i8>, <4 x i8>* %262, align 1, !alias.scope !10
  %264 = sext <4 x i8> %260 to <4 x i32>
  %265 = sext <4 x i8> %263 to <4 x i32>
  %266 = getelementptr inbounds i32, i32* %5, i64 %257
  %267 = bitcast i32* %266 to <4 x i32>*
  store <4 x i32> %264, <4 x i32>* %267, align 4, !alias.scope !13, !noalias !10
  %268 = getelementptr inbounds i32, i32* %266, i64 4
  %269 = bitcast i32* %268 to <4 x i32>*
  store <4 x i32> %265, <4 x i32>* %269, align 4, !alias.scope !13, !noalias !10
  %270 = add i64 %241, 16
  %271 = add i64 %242, -2
  %272 = icmp eq i64 %271, 0
  br i1 %272, label %273, label %240, !llvm.loop !15

273:                                              ; preds = %240, %228
  %274 = phi i64 [ 0, %228 ], [ %270, %240 ]
  %275 = icmp eq i64 %236, 0
  br i1 %275, label %290, label %276

276:                                              ; preds = %273
  %277 = add i64 %33, %274
  %278 = getelementptr inbounds i8, i8* %1, i64 %277
  %279 = bitcast i8* %278 to <4 x i8>*
  %280 = load <4 x i8>, <4 x i8>* %279, align 1, !alias.scope !10
  %281 = getelementptr inbounds i8, i8* %278, i64 4
  %282 = bitcast i8* %281 to <4 x i8>*
  %283 = load <4 x i8>, <4 x i8>* %282, align 1, !alias.scope !10
  %284 = sext <4 x i8> %280 to <4 x i32>
  %285 = sext <4 x i8> %283 to <4 x i32>
  %286 = getelementptr inbounds i32, i32* %5, i64 %277
  %287 = bitcast i32* %286 to <4 x i32>*
  store <4 x i32> %284, <4 x i32>* %287, align 4, !alias.scope !13, !noalias !10
  %288 = getelementptr inbounds i32, i32* %286, i64 4
  %289 = bitcast i32* %288 to <4 x i32>*
  store <4 x i32> %285, <4 x i32>* %289, align 4, !alias.scope !13, !noalias !10
  br label %290

290:                                              ; preds = %273, %276
  %291 = icmp eq i64 %205, %229
  br i1 %291, label %310, label %292

292:                                              ; preds = %290, %207, %193
  %293 = phi i32 [ %194, %207 ], [ %194, %193 ], [ %231, %290 ]
  %294 = phi i64 [ %33, %207 ], [ %33, %193 ], [ %232, %290 ]
  br label %295

295:                                              ; preds = %292, %295
  %296 = phi i32 [ %302, %295 ], [ %293, %292 ]
  %297 = phi i64 [ %303, %295 ], [ %294, %292 ]
  %298 = getelementptr inbounds i8, i8* %1, i64 %297
  %299 = load i8, i8* %298, align 1
  %300 = sext i8 %299 to i32
  %301 = getelementptr inbounds i32, i32* %5, i64 %297
  store i32 %300, i32* %301, align 4
  %302 = add nsw i32 %296, -1
  %303 = add nuw i64 %297, 1
  %304 = icmp sgt i32 %302, 0
  %305 = icmp ult i64 %303, %6
  %306 = and i1 %305, %304
  %307 = icmp ult i64 %303, %2
  %308 = and i1 %307, %306
  br i1 %308, label %295, label %310, !llvm.loop !16

309:                                              ; preds = %42
  unreachable

310:                                              ; preds = %295, %172, %290, %167, %189, %91, %89, %47, %56, %66, %81, %69, %58, %49
  %311 = phi i64 [ %44, %81 ], [ %44, %66 ], [ %80, %69 ], [ %44, %56 ], [ %59, %58 ], [ %44, %47 ], [ %50, %49 ], [ %84, %89 ], [ %92, %91 ], [ %84, %189 ], [ %92, %167 ], [ %84, %290 ], [ %92, %172 ], [ %84, %295 ]
  %312 = phi i64 [ %33, %81 ], [ %33, %66 ], [ %78, %69 ], [ %33, %56 ], [ %64, %58 ], [ %33, %47 ], [ %54, %49 ], [ %33, %89 ], [ %33, %91 ], [ %33, %189 ], [ %139, %167 ], [ %232, %290 ], [ %183, %172 ], [ %303, %295 ]
  %313 = load i8, i8* %21, align 8
  %314 = shl i8 %313, 2
  store i8 %314, i8* %21, align 8
  %315 = load i32, i32* %20, align 4
  %316 = add i32 %315, -2
  store i32 %316, i32* %20, align 4
  %317 = icmp ult i64 %311, %4
  %318 = icmp ult i64 %312, %6
  %319 = and i1 %317, %318
  br i1 %319, label %31, label %320

320:                                              ; preds = %310, %13
  %321 = phi i64 [ 0, %13 ], [ %312, %310 ]
  %322 = phi i1 [ %17, %13 ], [ %318, %310 ]
  %323 = add i64 %6, -1
  %324 = select i1 %322, i64 %321, i64 %323
  %325 = getelementptr inbounds i32, i32* %5, i64 %324
  store i32 0, i32* %325, align 4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !8}
!10 = !{!11}
!11 = distinct !{!11, !12}
!12 = distinct !{!12, !"LVerDomain"}
!13 = !{!14}
!14 = distinct !{!14, !12}
!15 = distinct !{!15, !8}
!16 = distinct !{!16, !8}
