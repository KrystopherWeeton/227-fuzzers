; ModuleID = '../../third_party/libwebp/src/dsp/filters.c'
source_filename = "../../third_party/libwebp/src/dsp/filters.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@VP8FiltersInit.VP8FiltersInit_body_last_cpuinfo_used = internal global i32 (i32)* bitcast (i32 (i32)** @VP8FiltersInit.VP8FiltersInit_body_last_cpuinfo_used to i32 (i32)*), align 8
@VP8GetCPUInfo = external local_unnamed_addr global i32 (i32)*, align 8
@WebPFilters = common hidden local_unnamed_addr global [4 x void (i8*, i32, i32, i32, i8*)*] zeroinitializer, align 16
@WebPUnfilters = common hidden local_unnamed_addr global [4 x void (i8*, i8*, i8*, i32)*] zeroinitializer, align 16

; Function Attrs: nounwind ssp uwtable
define hidden void @VP8FiltersInit() local_unnamed_addr #0 {
  %1 = load volatile i32 (i32)*, i32 (i32)** @VP8FiltersInit.VP8FiltersInit_body_last_cpuinfo_used, align 8
  %2 = load i32 (i32)*, i32 (i32)** @VP8GetCPUInfo, align 8
  %3 = icmp eq i32 (i32)* %1, %2
  br i1 %3, label %12, label %4

4:                                                ; preds = %0
  store <2 x void (i8*, i8*, i8*, i32)*> <void (i8*, i8*, i8*, i32)* null, void (i8*, i8*, i8*, i32)* @HorizontalUnfilter_C>, <2 x void (i8*, i8*, i8*, i32)*>* bitcast ([4 x void (i8*, i8*, i8*, i32)*]* @WebPUnfilters to <2 x void (i8*, i8*, i8*, i32)*>*), align 16
  store <2 x void (i8*, i8*, i8*, i32)*> <void (i8*, i8*, i8*, i32)* @VerticalUnfilter_C, void (i8*, i8*, i8*, i32)* @GradientUnfilter_C>, <2 x void (i8*, i8*, i8*, i32)*>* bitcast (void (i8*, i8*, i8*, i32)** getelementptr inbounds ([4 x void (i8*, i8*, i8*, i32)*], [4 x void (i8*, i8*, i8*, i32)*]* @WebPUnfilters, i64 0, i64 2) to <2 x void (i8*, i8*, i8*, i32)*>*), align 16
  store <2 x void (i8*, i32, i32, i32, i8*)*> <void (i8*, i32, i32, i32, i8*)* null, void (i8*, i32, i32, i32, i8*)* @HorizontalFilter_C>, <2 x void (i8*, i32, i32, i32, i8*)*>* bitcast ([4 x void (i8*, i32, i32, i32, i8*)*]* @WebPFilters to <2 x void (i8*, i32, i32, i32, i8*)*>*), align 16
  store <2 x void (i8*, i32, i32, i32, i8*)*> <void (i8*, i32, i32, i32, i8*)* @VerticalFilter_C, void (i8*, i32, i32, i32, i8*)* @GradientFilter_C>, <2 x void (i8*, i32, i32, i32, i8*)*>* bitcast (void (i8*, i32, i32, i32, i8*)** getelementptr inbounds ([4 x void (i8*, i32, i32, i32, i8*)*], [4 x void (i8*, i32, i32, i32, i8*)*]* @WebPFilters, i64 0, i64 2) to <2 x void (i8*, i32, i32, i32, i8*)*>*), align 16
  %5 = icmp eq i32 (i32)* %2, null
  br i1 %5, label %10, label %6

6:                                                ; preds = %4
  %7 = tail call i32 %2(i32 0) #3
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %10, label %9

9:                                                ; preds = %6
  tail call void @VP8FiltersInitSSE2() #3
  br label %10

10:                                               ; preds = %4, %6, %9
  %11 = load i64, i64* bitcast (i32 (i32)** @VP8GetCPUInfo to i64*), align 8
  store volatile i64 %11, i64* bitcast (i32 (i32)** @VP8FiltersInit.VP8FiltersInit_body_last_cpuinfo_used to i64*), align 8
  br label %12

12:                                               ; preds = %0, %10
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @HorizontalUnfilter_C(i8* readonly, i8* nocapture readonly, i8* nocapture, i32) #1 {
  %5 = icmp eq i8* %0, null
  br i1 %5, label %8, label %6

6:                                                ; preds = %4
  %7 = load i8, i8* %0, align 1
  br label %8

8:                                                ; preds = %4, %6
  %9 = phi i8 [ %7, %6 ], [ 0, %4 ]
  %10 = icmp sgt i32 %3, 0
  br i1 %10, label %11, label %59

11:                                               ; preds = %8
  %12 = zext i32 %3 to i64
  %13 = add nsw i64 %12, -1
  %14 = and i64 %12, 3
  %15 = icmp ult i64 %13, 3
  br i1 %15, label %44, label %16

16:                                               ; preds = %11
  %17 = sub nsw i64 %12, %14
  br label %18

18:                                               ; preds = %18, %16
  %19 = phi i64 [ 0, %16 ], [ %41, %18 ]
  %20 = phi i8 [ %9, %16 ], [ %39, %18 ]
  %21 = phi i64 [ %17, %16 ], [ %42, %18 ]
  %22 = getelementptr inbounds i8, i8* %1, i64 %19
  %23 = load i8, i8* %22, align 1
  %24 = add i8 %23, %20
  %25 = getelementptr inbounds i8, i8* %2, i64 %19
  store i8 %24, i8* %25, align 1
  %26 = or i64 %19, 1
  %27 = getelementptr inbounds i8, i8* %1, i64 %26
  %28 = load i8, i8* %27, align 1
  %29 = add i8 %28, %24
  %30 = getelementptr inbounds i8, i8* %2, i64 %26
  store i8 %29, i8* %30, align 1
  %31 = or i64 %19, 2
  %32 = getelementptr inbounds i8, i8* %1, i64 %31
  %33 = load i8, i8* %32, align 1
  %34 = add i8 %33, %29
  %35 = getelementptr inbounds i8, i8* %2, i64 %31
  store i8 %34, i8* %35, align 1
  %36 = or i64 %19, 3
  %37 = getelementptr inbounds i8, i8* %1, i64 %36
  %38 = load i8, i8* %37, align 1
  %39 = add i8 %38, %34
  %40 = getelementptr inbounds i8, i8* %2, i64 %36
  store i8 %39, i8* %40, align 1
  %41 = add nuw nsw i64 %19, 4
  %42 = add i64 %21, -4
  %43 = icmp eq i64 %42, 0
  br i1 %43, label %44, label %18

44:                                               ; preds = %18, %11
  %45 = phi i64 [ 0, %11 ], [ %41, %18 ]
  %46 = phi i8 [ %9, %11 ], [ %39, %18 ]
  %47 = icmp eq i64 %14, 0
  br i1 %47, label %59, label %48

48:                                               ; preds = %44, %48
  %49 = phi i64 [ %56, %48 ], [ %45, %44 ]
  %50 = phi i8 [ %54, %48 ], [ %46, %44 ]
  %51 = phi i64 [ %57, %48 ], [ %14, %44 ]
  %52 = getelementptr inbounds i8, i8* %1, i64 %49
  %53 = load i8, i8* %52, align 1
  %54 = add i8 %53, %50
  %55 = getelementptr inbounds i8, i8* %2, i64 %49
  store i8 %54, i8* %55, align 1
  %56 = add nuw nsw i64 %49, 1
  %57 = add i64 %51, -1
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %59, label %48, !llvm.loop !2

59:                                               ; preds = %44, %48, %8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @VerticalUnfilter_C(i8* readonly, i8* nocapture readonly, i8* nocapture, i32) #1 {
  %5 = icmp eq i8* %0, null
  %6 = icmp sgt i32 %3, 0
  br i1 %5, label %119, label %7

7:                                                ; preds = %4
  br i1 %6, label %8, label %199

8:                                                ; preds = %7
  %9 = zext i32 %3 to i64
  %10 = icmp ult i32 %3, 32
  br i1 %10, label %11, label %32

11:                                               ; preds = %117, %32, %8
  %12 = phi i64 [ 0, %32 ], [ 0, %8 ], [ %44, %117 ]
  %13 = xor i64 %12, -1
  %14 = add nsw i64 %13, %9
  %15 = and i64 %9, 3
  %16 = icmp eq i64 %15, 0
  br i1 %16, label %29, label %17

17:                                               ; preds = %11, %17
  %18 = phi i64 [ %26, %17 ], [ %12, %11 ]
  %19 = phi i64 [ %27, %17 ], [ %15, %11 ]
  %20 = getelementptr inbounds i8, i8* %0, i64 %18
  %21 = load i8, i8* %20, align 1
  %22 = getelementptr inbounds i8, i8* %1, i64 %18
  %23 = load i8, i8* %22, align 1
  %24 = add i8 %23, %21
  %25 = getelementptr inbounds i8, i8* %2, i64 %18
  store i8 %24, i8* %25, align 1
  %26 = add nuw nsw i64 %18, 1
  %27 = add i64 %19, -1
  %28 = icmp eq i64 %27, 0
  br i1 %28, label %29, label %17, !llvm.loop !4

29:                                               ; preds = %17, %11
  %30 = phi i64 [ %12, %11 ], [ %26, %17 ]
  %31 = icmp ult i64 %14, 3
  br i1 %31, label %199, label %153

32:                                               ; preds = %8
  %33 = getelementptr i8, i8* %2, i64 %9
  %34 = getelementptr i8, i8* %0, i64 %9
  %35 = getelementptr i8, i8* %1, i64 %9
  %36 = icmp ugt i8* %34, %2
  %37 = icmp ugt i8* %33, %0
  %38 = and i1 %36, %37
  %39 = icmp ugt i8* %35, %2
  %40 = icmp ugt i8* %33, %1
  %41 = and i1 %39, %40
  %42 = or i1 %38, %41
  br i1 %42, label %11, label %43

43:                                               ; preds = %32
  %44 = and i64 %9, 4294967264
  %45 = add nsw i64 %44, -32
  %46 = lshr exact i64 %45, 5
  %47 = add nuw nsw i64 %46, 1
  %48 = and i64 %47, 1
  %49 = icmp eq i64 %45, 0
  br i1 %49, label %95, label %50

50:                                               ; preds = %43
  %51 = sub nuw nsw i64 %47, %48
  br label %52

52:                                               ; preds = %52, %50
  %53 = phi i64 [ 0, %50 ], [ %92, %52 ]
  %54 = phi i64 [ %51, %50 ], [ %93, %52 ]
  %55 = getelementptr inbounds i8, i8* %0, i64 %53
  %56 = bitcast i8* %55 to <16 x i8>*
  %57 = load <16 x i8>, <16 x i8>* %56, align 1, !alias.scope !5
  %58 = getelementptr inbounds i8, i8* %55, i64 16
  %59 = bitcast i8* %58 to <16 x i8>*
  %60 = load <16 x i8>, <16 x i8>* %59, align 1, !alias.scope !5
  %61 = getelementptr inbounds i8, i8* %1, i64 %53
  %62 = bitcast i8* %61 to <16 x i8>*
  %63 = load <16 x i8>, <16 x i8>* %62, align 1, !alias.scope !8
  %64 = getelementptr inbounds i8, i8* %61, i64 16
  %65 = bitcast i8* %64 to <16 x i8>*
  %66 = load <16 x i8>, <16 x i8>* %65, align 1, !alias.scope !8
  %67 = add <16 x i8> %63, %57
  %68 = add <16 x i8> %66, %60
  %69 = getelementptr inbounds i8, i8* %2, i64 %53
  %70 = bitcast i8* %69 to <16 x i8>*
  store <16 x i8> %67, <16 x i8>* %70, align 1, !alias.scope !10, !noalias !12
  %71 = getelementptr inbounds i8, i8* %69, i64 16
  %72 = bitcast i8* %71 to <16 x i8>*
  store <16 x i8> %68, <16 x i8>* %72, align 1, !alias.scope !10, !noalias !12
  %73 = or i64 %53, 32
  %74 = getelementptr inbounds i8, i8* %0, i64 %73
  %75 = bitcast i8* %74 to <16 x i8>*
  %76 = load <16 x i8>, <16 x i8>* %75, align 1, !alias.scope !5
  %77 = getelementptr inbounds i8, i8* %74, i64 16
  %78 = bitcast i8* %77 to <16 x i8>*
  %79 = load <16 x i8>, <16 x i8>* %78, align 1, !alias.scope !5
  %80 = getelementptr inbounds i8, i8* %1, i64 %73
  %81 = bitcast i8* %80 to <16 x i8>*
  %82 = load <16 x i8>, <16 x i8>* %81, align 1, !alias.scope !8
  %83 = getelementptr inbounds i8, i8* %80, i64 16
  %84 = bitcast i8* %83 to <16 x i8>*
  %85 = load <16 x i8>, <16 x i8>* %84, align 1, !alias.scope !8
  %86 = add <16 x i8> %82, %76
  %87 = add <16 x i8> %85, %79
  %88 = getelementptr inbounds i8, i8* %2, i64 %73
  %89 = bitcast i8* %88 to <16 x i8>*
  store <16 x i8> %86, <16 x i8>* %89, align 1, !alias.scope !10, !noalias !12
  %90 = getelementptr inbounds i8, i8* %88, i64 16
  %91 = bitcast i8* %90 to <16 x i8>*
  store <16 x i8> %87, <16 x i8>* %91, align 1, !alias.scope !10, !noalias !12
  %92 = add i64 %53, 64
  %93 = add i64 %54, -2
  %94 = icmp eq i64 %93, 0
  br i1 %94, label %95, label %52, !llvm.loop !13

95:                                               ; preds = %52, %43
  %96 = phi i64 [ 0, %43 ], [ %92, %52 ]
  %97 = icmp eq i64 %48, 0
  br i1 %97, label %117, label %98

98:                                               ; preds = %95
  %99 = getelementptr inbounds i8, i8* %0, i64 %96
  %100 = bitcast i8* %99 to <16 x i8>*
  %101 = load <16 x i8>, <16 x i8>* %100, align 1, !alias.scope !5
  %102 = getelementptr inbounds i8, i8* %99, i64 16
  %103 = bitcast i8* %102 to <16 x i8>*
  %104 = load <16 x i8>, <16 x i8>* %103, align 1, !alias.scope !5
  %105 = getelementptr inbounds i8, i8* %1, i64 %96
  %106 = bitcast i8* %105 to <16 x i8>*
  %107 = load <16 x i8>, <16 x i8>* %106, align 1, !alias.scope !8
  %108 = getelementptr inbounds i8, i8* %105, i64 16
  %109 = bitcast i8* %108 to <16 x i8>*
  %110 = load <16 x i8>, <16 x i8>* %109, align 1, !alias.scope !8
  %111 = add <16 x i8> %107, %101
  %112 = add <16 x i8> %110, %104
  %113 = getelementptr inbounds i8, i8* %2, i64 %96
  %114 = bitcast i8* %113 to <16 x i8>*
  store <16 x i8> %111, <16 x i8>* %114, align 1, !alias.scope !10, !noalias !12
  %115 = getelementptr inbounds i8, i8* %113, i64 16
  %116 = bitcast i8* %115 to <16 x i8>*
  store <16 x i8> %112, <16 x i8>* %116, align 1, !alias.scope !10, !noalias !12
  br label %117

117:                                              ; preds = %95, %98
  %118 = icmp eq i64 %44, %9
  br i1 %118, label %199, label %11

119:                                              ; preds = %4
  br i1 %6, label %120, label %199

120:                                              ; preds = %119
  %121 = zext i32 %3 to i64
  %122 = add nsw i64 %121, -1
  %123 = and i64 %121, 3
  %124 = icmp ult i64 %122, 3
  br i1 %124, label %184, label %125

125:                                              ; preds = %120
  %126 = sub nsw i64 %121, %123
  br label %127

127:                                              ; preds = %127, %125
  %128 = phi i64 [ 0, %125 ], [ %150, %127 ]
  %129 = phi i8 [ 0, %125 ], [ %148, %127 ]
  %130 = phi i64 [ %126, %125 ], [ %151, %127 ]
  %131 = getelementptr inbounds i8, i8* %1, i64 %128
  %132 = load i8, i8* %131, align 1
  %133 = add i8 %132, %129
  %134 = getelementptr inbounds i8, i8* %2, i64 %128
  store i8 %133, i8* %134, align 1
  %135 = or i64 %128, 1
  %136 = getelementptr inbounds i8, i8* %1, i64 %135
  %137 = load i8, i8* %136, align 1
  %138 = add i8 %137, %133
  %139 = getelementptr inbounds i8, i8* %2, i64 %135
  store i8 %138, i8* %139, align 1
  %140 = or i64 %128, 2
  %141 = getelementptr inbounds i8, i8* %1, i64 %140
  %142 = load i8, i8* %141, align 1
  %143 = add i8 %142, %138
  %144 = getelementptr inbounds i8, i8* %2, i64 %140
  store i8 %143, i8* %144, align 1
  %145 = or i64 %128, 3
  %146 = getelementptr inbounds i8, i8* %1, i64 %145
  %147 = load i8, i8* %146, align 1
  %148 = add i8 %147, %143
  %149 = getelementptr inbounds i8, i8* %2, i64 %145
  store i8 %148, i8* %149, align 1
  %150 = add nuw nsw i64 %128, 4
  %151 = add i64 %130, -4
  %152 = icmp eq i64 %151, 0
  br i1 %152, label %184, label %127

153:                                              ; preds = %29, %153
  %154 = phi i64 [ %182, %153 ], [ %30, %29 ]
  %155 = getelementptr inbounds i8, i8* %0, i64 %154
  %156 = load i8, i8* %155, align 1
  %157 = getelementptr inbounds i8, i8* %1, i64 %154
  %158 = load i8, i8* %157, align 1
  %159 = add i8 %158, %156
  %160 = getelementptr inbounds i8, i8* %2, i64 %154
  store i8 %159, i8* %160, align 1
  %161 = add nuw nsw i64 %154, 1
  %162 = getelementptr inbounds i8, i8* %0, i64 %161
  %163 = load i8, i8* %162, align 1
  %164 = getelementptr inbounds i8, i8* %1, i64 %161
  %165 = load i8, i8* %164, align 1
  %166 = add i8 %165, %163
  %167 = getelementptr inbounds i8, i8* %2, i64 %161
  store i8 %166, i8* %167, align 1
  %168 = add nuw nsw i64 %154, 2
  %169 = getelementptr inbounds i8, i8* %0, i64 %168
  %170 = load i8, i8* %169, align 1
  %171 = getelementptr inbounds i8, i8* %1, i64 %168
  %172 = load i8, i8* %171, align 1
  %173 = add i8 %172, %170
  %174 = getelementptr inbounds i8, i8* %2, i64 %168
  store i8 %173, i8* %174, align 1
  %175 = add nuw nsw i64 %154, 3
  %176 = getelementptr inbounds i8, i8* %0, i64 %175
  %177 = load i8, i8* %176, align 1
  %178 = getelementptr inbounds i8, i8* %1, i64 %175
  %179 = load i8, i8* %178, align 1
  %180 = add i8 %179, %177
  %181 = getelementptr inbounds i8, i8* %2, i64 %175
  store i8 %180, i8* %181, align 1
  %182 = add nuw nsw i64 %154, 4
  %183 = icmp eq i64 %182, %9
  br i1 %183, label %199, label %153, !llvm.loop !15

184:                                              ; preds = %127, %120
  %185 = phi i64 [ 0, %120 ], [ %150, %127 ]
  %186 = phi i8 [ 0, %120 ], [ %148, %127 ]
  %187 = icmp eq i64 %123, 0
  br i1 %187, label %199, label %188

188:                                              ; preds = %184, %188
  %189 = phi i64 [ %196, %188 ], [ %185, %184 ]
  %190 = phi i8 [ %194, %188 ], [ %186, %184 ]
  %191 = phi i64 [ %197, %188 ], [ %123, %184 ]
  %192 = getelementptr inbounds i8, i8* %1, i64 %189
  %193 = load i8, i8* %192, align 1
  %194 = add i8 %193, %190
  %195 = getelementptr inbounds i8, i8* %2, i64 %189
  store i8 %194, i8* %195, align 1
  %196 = add nuw nsw i64 %189, 1
  %197 = add i64 %191, -1
  %198 = icmp eq i64 %197, 0
  br i1 %198, label %199, label %188, !llvm.loop !16

199:                                              ; preds = %29, %153, %184, %188, %117, %7, %119
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @GradientUnfilter_C(i8* readonly, i8* nocapture readonly, i8* nocapture, i32) #1 {
  %5 = icmp eq i8* %0, null
  br i1 %5, label %6, label %41

6:                                                ; preds = %4
  %7 = icmp sgt i32 %3, 0
  br i1 %7, label %8, label %96

8:                                                ; preds = %6
  %9 = zext i32 %3 to i64
  %10 = add nsw i64 %9, -1
  %11 = and i64 %9, 3
  %12 = icmp ult i64 %10, 3
  br i1 %12, label %81, label %13

13:                                               ; preds = %8
  %14 = sub nsw i64 %9, %11
  br label %15

15:                                               ; preds = %15, %13
  %16 = phi i64 [ 0, %13 ], [ %38, %15 ]
  %17 = phi i8 [ 0, %13 ], [ %36, %15 ]
  %18 = phi i64 [ %14, %13 ], [ %39, %15 ]
  %19 = getelementptr inbounds i8, i8* %1, i64 %16
  %20 = load i8, i8* %19, align 1
  %21 = add i8 %20, %17
  %22 = getelementptr inbounds i8, i8* %2, i64 %16
  store i8 %21, i8* %22, align 1
  %23 = or i64 %16, 1
  %24 = getelementptr inbounds i8, i8* %1, i64 %23
  %25 = load i8, i8* %24, align 1
  %26 = add i8 %25, %21
  %27 = getelementptr inbounds i8, i8* %2, i64 %23
  store i8 %26, i8* %27, align 1
  %28 = or i64 %16, 2
  %29 = getelementptr inbounds i8, i8* %1, i64 %28
  %30 = load i8, i8* %29, align 1
  %31 = add i8 %30, %26
  %32 = getelementptr inbounds i8, i8* %2, i64 %28
  store i8 %31, i8* %32, align 1
  %33 = or i64 %16, 3
  %34 = getelementptr inbounds i8, i8* %1, i64 %33
  %35 = load i8, i8* %34, align 1
  %36 = add i8 %35, %31
  %37 = getelementptr inbounds i8, i8* %2, i64 %33
  store i8 %36, i8* %37, align 1
  %38 = add nuw nsw i64 %16, 4
  %39 = add i64 %18, -4
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %81, label %15

41:                                               ; preds = %4
  %42 = load i8, i8* %0, align 1
  %43 = icmp sgt i32 %3, 0
  br i1 %43, label %44, label %96

44:                                               ; preds = %41
  %45 = zext i32 %3 to i64
  %46 = load i8, i8* %1, align 1
  %47 = zext i8 %42 to i32
  %48 = zext i8 %42 to i32
  %49 = zext i8 %42 to i32
  %50 = sub nsw i32 %47, %49
  %51 = add nsw i32 %50, %48
  %52 = icmp ult i32 %51, 256
  %53 = icmp slt i32 %51, 0
  %54 = select i1 %53, i32 0, i32 255
  %55 = select i1 %52, i32 %51, i32 %54
  %56 = trunc i32 %55 to i8
  %57 = add i8 %46, %56
  store i8 %57, i8* %2, align 1
  %58 = icmp eq i32 %3, 1
  br i1 %58, label %96, label %59

59:                                               ; preds = %44, %59
  %60 = phi i64 [ %79, %59 ], [ 1, %44 ]
  %61 = phi i8 [ %77, %59 ], [ %57, %44 ]
  %62 = phi i8 [ %64, %59 ], [ %42, %44 ]
  %63 = getelementptr inbounds i8, i8* %0, i64 %60
  %64 = load i8, i8* %63, align 1
  %65 = getelementptr inbounds i8, i8* %1, i64 %60
  %66 = load i8, i8* %65, align 1
  %67 = zext i8 %61 to i32
  %68 = zext i8 %64 to i32
  %69 = zext i8 %62 to i32
  %70 = sub nsw i32 %67, %69
  %71 = add nsw i32 %70, %68
  %72 = icmp ult i32 %71, 256
  %73 = icmp slt i32 %71, 0
  %74 = select i1 %73, i32 0, i32 255
  %75 = select i1 %72, i32 %71, i32 %74
  %76 = trunc i32 %75 to i8
  %77 = add i8 %66, %76
  %78 = getelementptr inbounds i8, i8* %2, i64 %60
  store i8 %77, i8* %78, align 1
  %79 = add nuw nsw i64 %60, 1
  %80 = icmp eq i64 %79, %45
  br i1 %80, label %96, label %59

81:                                               ; preds = %15, %8
  %82 = phi i64 [ 0, %8 ], [ %38, %15 ]
  %83 = phi i8 [ 0, %8 ], [ %36, %15 ]
  %84 = icmp eq i64 %11, 0
  br i1 %84, label %96, label %85

85:                                               ; preds = %81, %85
  %86 = phi i64 [ %93, %85 ], [ %82, %81 ]
  %87 = phi i8 [ %91, %85 ], [ %83, %81 ]
  %88 = phi i64 [ %94, %85 ], [ %11, %81 ]
  %89 = getelementptr inbounds i8, i8* %1, i64 %86
  %90 = load i8, i8* %89, align 1
  %91 = add i8 %90, %87
  %92 = getelementptr inbounds i8, i8* %2, i64 %86
  store i8 %91, i8* %92, align 1
  %93 = add nuw nsw i64 %86, 1
  %94 = add i64 %88, -1
  %95 = icmp eq i64 %94, 0
  br i1 %95, label %96, label %85, !llvm.loop !17

96:                                               ; preds = %59, %81, %85, %44, %41, %6
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @HorizontalFilter_C(i8* nocapture readonly, i32, i32, i32, i8* nocapture) #1 {
  %6 = load i8, i8* %0, align 1
  store i8 %6, i8* %4, align 1
  %7 = getelementptr inbounds i8, i8* %0, i64 1
  %8 = getelementptr inbounds i8, i8* %4, i64 1
  %9 = add nsw i32 %1, -1
  %10 = icmp sgt i32 %9, 0
  br i1 %10, label %11, label %149

11:                                               ; preds = %5
  %12 = zext i32 %9 to i64
  %13 = icmp ult i32 %9, 32
  br i1 %13, label %97, label %14

14:                                               ; preds = %11
  %15 = add nuw nsw i64 %12, 1
  %16 = getelementptr i8, i8* %4, i64 %15
  %17 = getelementptr i8, i8* %0, i64 %15
  %18 = icmp ult i8* %8, %17
  %19 = icmp ugt i8* %16, %0
  %20 = and i1 %18, %19
  br i1 %20, label %97, label %21

21:                                               ; preds = %14
  %22 = and i64 %12, 4294967264
  %23 = add nsw i64 %22, -32
  %24 = lshr exact i64 %23, 5
  %25 = add nuw nsw i64 %24, 1
  %26 = and i64 %25, 1
  %27 = icmp eq i64 %23, 0
  br i1 %27, label %73, label %28

28:                                               ; preds = %21
  %29 = sub nuw nsw i64 %25, %26
  br label %30

30:                                               ; preds = %30, %28
  %31 = phi i64 [ 0, %28 ], [ %70, %30 ]
  %32 = phi i64 [ %29, %28 ], [ %71, %30 ]
  %33 = getelementptr inbounds i8, i8* %7, i64 %31
  %34 = bitcast i8* %33 to <16 x i8>*
  %35 = load <16 x i8>, <16 x i8>* %34, align 1, !alias.scope !18
  %36 = getelementptr inbounds i8, i8* %33, i64 16
  %37 = bitcast i8* %36 to <16 x i8>*
  %38 = load <16 x i8>, <16 x i8>* %37, align 1, !alias.scope !18
  %39 = getelementptr inbounds i8, i8* %0, i64 %31
  %40 = bitcast i8* %39 to <16 x i8>*
  %41 = load <16 x i8>, <16 x i8>* %40, align 1, !alias.scope !18
  %42 = getelementptr inbounds i8, i8* %39, i64 16
  %43 = bitcast i8* %42 to <16 x i8>*
  %44 = load <16 x i8>, <16 x i8>* %43, align 1, !alias.scope !18
  %45 = sub <16 x i8> %35, %41
  %46 = sub <16 x i8> %38, %44
  %47 = getelementptr inbounds i8, i8* %8, i64 %31
  %48 = bitcast i8* %47 to <16 x i8>*
  store <16 x i8> %45, <16 x i8>* %48, align 1, !alias.scope !21, !noalias !18
  %49 = getelementptr inbounds i8, i8* %47, i64 16
  %50 = bitcast i8* %49 to <16 x i8>*
  store <16 x i8> %46, <16 x i8>* %50, align 1, !alias.scope !21, !noalias !18
  %51 = or i64 %31, 32
  %52 = getelementptr inbounds i8, i8* %7, i64 %51
  %53 = bitcast i8* %52 to <16 x i8>*
  %54 = load <16 x i8>, <16 x i8>* %53, align 1, !alias.scope !18
  %55 = getelementptr inbounds i8, i8* %52, i64 16
  %56 = bitcast i8* %55 to <16 x i8>*
  %57 = load <16 x i8>, <16 x i8>* %56, align 1, !alias.scope !18
  %58 = getelementptr inbounds i8, i8* %0, i64 %51
  %59 = bitcast i8* %58 to <16 x i8>*
  %60 = load <16 x i8>, <16 x i8>* %59, align 1, !alias.scope !18
  %61 = getelementptr inbounds i8, i8* %58, i64 16
  %62 = bitcast i8* %61 to <16 x i8>*
  %63 = load <16 x i8>, <16 x i8>* %62, align 1, !alias.scope !18
  %64 = sub <16 x i8> %54, %60
  %65 = sub <16 x i8> %57, %63
  %66 = getelementptr inbounds i8, i8* %8, i64 %51
  %67 = bitcast i8* %66 to <16 x i8>*
  store <16 x i8> %64, <16 x i8>* %67, align 1, !alias.scope !21, !noalias !18
  %68 = getelementptr inbounds i8, i8* %66, i64 16
  %69 = bitcast i8* %68 to <16 x i8>*
  store <16 x i8> %65, <16 x i8>* %69, align 1, !alias.scope !21, !noalias !18
  %70 = add i64 %31, 64
  %71 = add i64 %32, -2
  %72 = icmp eq i64 %71, 0
  br i1 %72, label %73, label %30, !llvm.loop !23

73:                                               ; preds = %30, %21
  %74 = phi i64 [ 0, %21 ], [ %70, %30 ]
  %75 = icmp eq i64 %26, 0
  br i1 %75, label %95, label %76

76:                                               ; preds = %73
  %77 = getelementptr inbounds i8, i8* %7, i64 %74
  %78 = bitcast i8* %77 to <16 x i8>*
  %79 = load <16 x i8>, <16 x i8>* %78, align 1, !alias.scope !18
  %80 = getelementptr inbounds i8, i8* %77, i64 16
  %81 = bitcast i8* %80 to <16 x i8>*
  %82 = load <16 x i8>, <16 x i8>* %81, align 1, !alias.scope !18
  %83 = getelementptr inbounds i8, i8* %0, i64 %74
  %84 = bitcast i8* %83 to <16 x i8>*
  %85 = load <16 x i8>, <16 x i8>* %84, align 1, !alias.scope !18
  %86 = getelementptr inbounds i8, i8* %83, i64 16
  %87 = bitcast i8* %86 to <16 x i8>*
  %88 = load <16 x i8>, <16 x i8>* %87, align 1, !alias.scope !18
  %89 = sub <16 x i8> %79, %85
  %90 = sub <16 x i8> %82, %88
  %91 = getelementptr inbounds i8, i8* %8, i64 %74
  %92 = bitcast i8* %91 to <16 x i8>*
  store <16 x i8> %89, <16 x i8>* %92, align 1, !alias.scope !21, !noalias !18
  %93 = getelementptr inbounds i8, i8* %91, i64 16
  %94 = bitcast i8* %93 to <16 x i8>*
  store <16 x i8> %90, <16 x i8>* %94, align 1, !alias.scope !21, !noalias !18
  br label %95

95:                                               ; preds = %73, %76
  %96 = icmp eq i64 %22, %12
  br i1 %96, label %149, label %97

97:                                               ; preds = %95, %14, %11
  %98 = phi i64 [ 0, %14 ], [ 0, %11 ], [ %22, %95 ]
  %99 = xor i64 %98, -1
  %100 = add nsw i64 %99, %12
  %101 = and i64 %12, 3
  %102 = icmp eq i64 %101, 0
  br i1 %102, label %115, label %103

103:                                              ; preds = %97, %103
  %104 = phi i64 [ %112, %103 ], [ %98, %97 ]
  %105 = phi i64 [ %113, %103 ], [ %101, %97 ]
  %106 = getelementptr inbounds i8, i8* %7, i64 %104
  %107 = load i8, i8* %106, align 1
  %108 = getelementptr inbounds i8, i8* %0, i64 %104
  %109 = load i8, i8* %108, align 1
  %110 = sub i8 %107, %109
  %111 = getelementptr inbounds i8, i8* %8, i64 %104
  store i8 %110, i8* %111, align 1
  %112 = add nuw nsw i64 %104, 1
  %113 = add i64 %105, -1
  %114 = icmp eq i64 %113, 0
  br i1 %114, label %115, label %103, !llvm.loop !24

115:                                              ; preds = %103, %97
  %116 = phi i64 [ %98, %97 ], [ %112, %103 ]
  %117 = icmp ult i64 %100, 3
  br i1 %117, label %149, label %118

118:                                              ; preds = %115, %118
  %119 = phi i64 [ %147, %118 ], [ %116, %115 ]
  %120 = getelementptr inbounds i8, i8* %7, i64 %119
  %121 = load i8, i8* %120, align 1
  %122 = getelementptr inbounds i8, i8* %0, i64 %119
  %123 = load i8, i8* %122, align 1
  %124 = sub i8 %121, %123
  %125 = getelementptr inbounds i8, i8* %8, i64 %119
  store i8 %124, i8* %125, align 1
  %126 = add nuw nsw i64 %119, 1
  %127 = getelementptr inbounds i8, i8* %7, i64 %126
  %128 = load i8, i8* %127, align 1
  %129 = getelementptr inbounds i8, i8* %0, i64 %126
  %130 = load i8, i8* %129, align 1
  %131 = sub i8 %128, %130
  %132 = getelementptr inbounds i8, i8* %8, i64 %126
  store i8 %131, i8* %132, align 1
  %133 = add nuw nsw i64 %119, 2
  %134 = getelementptr inbounds i8, i8* %7, i64 %133
  %135 = load i8, i8* %134, align 1
  %136 = getelementptr inbounds i8, i8* %0, i64 %133
  %137 = load i8, i8* %136, align 1
  %138 = sub i8 %135, %137
  %139 = getelementptr inbounds i8, i8* %8, i64 %133
  store i8 %138, i8* %139, align 1
  %140 = add nuw nsw i64 %119, 3
  %141 = getelementptr inbounds i8, i8* %7, i64 %140
  %142 = load i8, i8* %141, align 1
  %143 = getelementptr inbounds i8, i8* %0, i64 %140
  %144 = load i8, i8* %143, align 1
  %145 = sub i8 %142, %144
  %146 = getelementptr inbounds i8, i8* %8, i64 %140
  store i8 %145, i8* %146, align 1
  %147 = add nuw nsw i64 %119, 4
  %148 = icmp eq i64 %147, %12
  br i1 %148, label %149, label %118, !llvm.loop !25

149:                                              ; preds = %115, %118, %95, %5
  %150 = sext i32 %3 to i64
  %151 = icmp sgt i32 %2, 1
  br i1 %151, label %152, label %315

152:                                              ; preds = %149
  %153 = zext i32 %9 to i64
  %154 = add nsw i64 %150, 1
  %155 = add nsw i64 %150, %153
  %156 = add nsw i64 %155, 1
  %157 = and i64 %153, 4294967264
  %158 = add nsw i64 %157, -32
  %159 = lshr exact i64 %158, 5
  %160 = add nuw nsw i64 %159, 1
  %161 = icmp ult i32 %9, 32
  %162 = and i64 %153, 4294967264
  %163 = and i64 %160, 1
  %164 = icmp eq i64 %158, 0
  %165 = sub nuw nsw i64 %160, %163
  %166 = icmp eq i64 %163, 0
  %167 = icmp eq i64 %162, %153
  %168 = and i64 %153, 3
  %169 = icmp eq i64 %168, 0
  br label %170

170:                                              ; preds = %311, %152
  %171 = phi i64 [ %314, %311 ], [ 0, %152 ]
  %172 = phi i8* [ %184, %311 ], [ %4, %152 ]
  %173 = phi i8* [ %183, %311 ], [ %0, %152 ]
  %174 = phi i32 [ %312, %311 ], [ 1, %152 ]
  %175 = mul i64 %171, %150
  %176 = add i64 %154, %175
  %177 = getelementptr i8, i8* %4, i64 %176
  %178 = add i64 %156, %175
  %179 = getelementptr i8, i8* %4, i64 %178
  %180 = add i64 %175, %150
  %181 = getelementptr i8, i8* %0, i64 %180
  %182 = getelementptr i8, i8* %0, i64 %178
  %183 = getelementptr inbounds i8, i8* %173, i64 %150
  %184 = getelementptr inbounds i8, i8* %172, i64 %150
  %185 = load i8, i8* %183, align 1
  %186 = load i8, i8* %173, align 1
  %187 = sub i8 %185, %186
  store i8 %187, i8* %184, align 1
  %188 = getelementptr inbounds i8, i8* %183, i64 1
  %189 = getelementptr inbounds i8, i8* %184, i64 1
  br i1 %10, label %190, label %311

190:                                              ; preds = %170
  br i1 %161, label %261, label %191

191:                                              ; preds = %190
  %192 = icmp ult i8* %177, %182
  %193 = icmp ult i8* %181, %179
  %194 = and i1 %192, %193
  br i1 %194, label %261, label %195

195:                                              ; preds = %191
  br i1 %164, label %239, label %196

196:                                              ; preds = %195, %196
  %197 = phi i64 [ %236, %196 ], [ 0, %195 ]
  %198 = phi i64 [ %237, %196 ], [ %165, %195 ]
  %199 = getelementptr inbounds i8, i8* %188, i64 %197
  %200 = bitcast i8* %199 to <16 x i8>*
  %201 = load <16 x i8>, <16 x i8>* %200, align 1, !alias.scope !26
  %202 = getelementptr inbounds i8, i8* %199, i64 16
  %203 = bitcast i8* %202 to <16 x i8>*
  %204 = load <16 x i8>, <16 x i8>* %203, align 1, !alias.scope !26
  %205 = getelementptr inbounds i8, i8* %183, i64 %197
  %206 = bitcast i8* %205 to <16 x i8>*
  %207 = load <16 x i8>, <16 x i8>* %206, align 1, !alias.scope !26
  %208 = getelementptr inbounds i8, i8* %205, i64 16
  %209 = bitcast i8* %208 to <16 x i8>*
  %210 = load <16 x i8>, <16 x i8>* %209, align 1, !alias.scope !26
  %211 = sub <16 x i8> %201, %207
  %212 = sub <16 x i8> %204, %210
  %213 = getelementptr inbounds i8, i8* %189, i64 %197
  %214 = bitcast i8* %213 to <16 x i8>*
  store <16 x i8> %211, <16 x i8>* %214, align 1, !alias.scope !29, !noalias !26
  %215 = getelementptr inbounds i8, i8* %213, i64 16
  %216 = bitcast i8* %215 to <16 x i8>*
  store <16 x i8> %212, <16 x i8>* %216, align 1, !alias.scope !29, !noalias !26
  %217 = or i64 %197, 32
  %218 = getelementptr inbounds i8, i8* %188, i64 %217
  %219 = bitcast i8* %218 to <16 x i8>*
  %220 = load <16 x i8>, <16 x i8>* %219, align 1, !alias.scope !26
  %221 = getelementptr inbounds i8, i8* %218, i64 16
  %222 = bitcast i8* %221 to <16 x i8>*
  %223 = load <16 x i8>, <16 x i8>* %222, align 1, !alias.scope !26
  %224 = getelementptr inbounds i8, i8* %183, i64 %217
  %225 = bitcast i8* %224 to <16 x i8>*
  %226 = load <16 x i8>, <16 x i8>* %225, align 1, !alias.scope !26
  %227 = getelementptr inbounds i8, i8* %224, i64 16
  %228 = bitcast i8* %227 to <16 x i8>*
  %229 = load <16 x i8>, <16 x i8>* %228, align 1, !alias.scope !26
  %230 = sub <16 x i8> %220, %226
  %231 = sub <16 x i8> %223, %229
  %232 = getelementptr inbounds i8, i8* %189, i64 %217
  %233 = bitcast i8* %232 to <16 x i8>*
  store <16 x i8> %230, <16 x i8>* %233, align 1, !alias.scope !29, !noalias !26
  %234 = getelementptr inbounds i8, i8* %232, i64 16
  %235 = bitcast i8* %234 to <16 x i8>*
  store <16 x i8> %231, <16 x i8>* %235, align 1, !alias.scope !29, !noalias !26
  %236 = add i64 %197, 64
  %237 = add i64 %198, -2
  %238 = icmp eq i64 %237, 0
  br i1 %238, label %239, label %196, !llvm.loop !31

239:                                              ; preds = %196, %195
  %240 = phi i64 [ 0, %195 ], [ %236, %196 ]
  br i1 %166, label %260, label %241

241:                                              ; preds = %239
  %242 = getelementptr inbounds i8, i8* %188, i64 %240
  %243 = bitcast i8* %242 to <16 x i8>*
  %244 = load <16 x i8>, <16 x i8>* %243, align 1, !alias.scope !26
  %245 = getelementptr inbounds i8, i8* %242, i64 16
  %246 = bitcast i8* %245 to <16 x i8>*
  %247 = load <16 x i8>, <16 x i8>* %246, align 1, !alias.scope !26
  %248 = getelementptr inbounds i8, i8* %183, i64 %240
  %249 = bitcast i8* %248 to <16 x i8>*
  %250 = load <16 x i8>, <16 x i8>* %249, align 1, !alias.scope !26
  %251 = getelementptr inbounds i8, i8* %248, i64 16
  %252 = bitcast i8* %251 to <16 x i8>*
  %253 = load <16 x i8>, <16 x i8>* %252, align 1, !alias.scope !26
  %254 = sub <16 x i8> %244, %250
  %255 = sub <16 x i8> %247, %253
  %256 = getelementptr inbounds i8, i8* %189, i64 %240
  %257 = bitcast i8* %256 to <16 x i8>*
  store <16 x i8> %254, <16 x i8>* %257, align 1, !alias.scope !29, !noalias !26
  %258 = getelementptr inbounds i8, i8* %256, i64 16
  %259 = bitcast i8* %258 to <16 x i8>*
  store <16 x i8> %255, <16 x i8>* %259, align 1, !alias.scope !29, !noalias !26
  br label %260

260:                                              ; preds = %239, %241
  br i1 %167, label %311, label %261

261:                                              ; preds = %260, %191, %190
  %262 = phi i64 [ 0, %191 ], [ 0, %190 ], [ %162, %260 ]
  %263 = xor i64 %262, -1
  %264 = add nsw i64 %263, %153
  br i1 %169, label %277, label %265

265:                                              ; preds = %261, %265
  %266 = phi i64 [ %274, %265 ], [ %262, %261 ]
  %267 = phi i64 [ %275, %265 ], [ %168, %261 ]
  %268 = getelementptr inbounds i8, i8* %188, i64 %266
  %269 = load i8, i8* %268, align 1
  %270 = getelementptr inbounds i8, i8* %183, i64 %266
  %271 = load i8, i8* %270, align 1
  %272 = sub i8 %269, %271
  %273 = getelementptr inbounds i8, i8* %189, i64 %266
  store i8 %272, i8* %273, align 1
  %274 = add nuw nsw i64 %266, 1
  %275 = add i64 %267, -1
  %276 = icmp eq i64 %275, 0
  br i1 %276, label %277, label %265, !llvm.loop !32

277:                                              ; preds = %265, %261
  %278 = phi i64 [ %262, %261 ], [ %274, %265 ]
  %279 = icmp ult i64 %264, 3
  br i1 %279, label %311, label %280

280:                                              ; preds = %277, %280
  %281 = phi i64 [ %309, %280 ], [ %278, %277 ]
  %282 = getelementptr inbounds i8, i8* %188, i64 %281
  %283 = load i8, i8* %282, align 1
  %284 = getelementptr inbounds i8, i8* %183, i64 %281
  %285 = load i8, i8* %284, align 1
  %286 = sub i8 %283, %285
  %287 = getelementptr inbounds i8, i8* %189, i64 %281
  store i8 %286, i8* %287, align 1
  %288 = add nuw nsw i64 %281, 1
  %289 = getelementptr inbounds i8, i8* %188, i64 %288
  %290 = load i8, i8* %289, align 1
  %291 = getelementptr inbounds i8, i8* %183, i64 %288
  %292 = load i8, i8* %291, align 1
  %293 = sub i8 %290, %292
  %294 = getelementptr inbounds i8, i8* %189, i64 %288
  store i8 %293, i8* %294, align 1
  %295 = add nuw nsw i64 %281, 2
  %296 = getelementptr inbounds i8, i8* %188, i64 %295
  %297 = load i8, i8* %296, align 1
  %298 = getelementptr inbounds i8, i8* %183, i64 %295
  %299 = load i8, i8* %298, align 1
  %300 = sub i8 %297, %299
  %301 = getelementptr inbounds i8, i8* %189, i64 %295
  store i8 %300, i8* %301, align 1
  %302 = add nuw nsw i64 %281, 3
  %303 = getelementptr inbounds i8, i8* %188, i64 %302
  %304 = load i8, i8* %303, align 1
  %305 = getelementptr inbounds i8, i8* %183, i64 %302
  %306 = load i8, i8* %305, align 1
  %307 = sub i8 %304, %306
  %308 = getelementptr inbounds i8, i8* %189, i64 %302
  store i8 %307, i8* %308, align 1
  %309 = add nuw nsw i64 %281, 4
  %310 = icmp eq i64 %309, %153
  br i1 %310, label %311, label %280, !llvm.loop !33

311:                                              ; preds = %277, %280, %260, %170
  %312 = add nuw nsw i32 %174, 1
  %313 = icmp eq i32 %312, %2
  %314 = add i64 %171, 1
  br i1 %313, label %315, label %170

315:                                              ; preds = %311, %149
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @VerticalFilter_C(i8* nocapture readonly, i32, i32, i32, i8* nocapture) #1 {
  %6 = load i8, i8* %0, align 1
  store i8 %6, i8* %4, align 1
  %7 = getelementptr inbounds i8, i8* %0, i64 1
  %8 = getelementptr inbounds i8, i8* %4, i64 1
  %9 = add nsw i32 %1, -1
  %10 = icmp sgt i32 %9, 0
  br i1 %10, label %11, label %149

11:                                               ; preds = %5
  %12 = zext i32 %9 to i64
  %13 = icmp ult i32 %9, 32
  br i1 %13, label %97, label %14

14:                                               ; preds = %11
  %15 = add nuw nsw i64 %12, 1
  %16 = getelementptr i8, i8* %4, i64 %15
  %17 = getelementptr i8, i8* %0, i64 %15
  %18 = icmp ult i8* %8, %17
  %19 = icmp ugt i8* %16, %0
  %20 = and i1 %18, %19
  br i1 %20, label %97, label %21

21:                                               ; preds = %14
  %22 = and i64 %12, 4294967264
  %23 = add nsw i64 %22, -32
  %24 = lshr exact i64 %23, 5
  %25 = add nuw nsw i64 %24, 1
  %26 = and i64 %25, 1
  %27 = icmp eq i64 %23, 0
  br i1 %27, label %73, label %28

28:                                               ; preds = %21
  %29 = sub nuw nsw i64 %25, %26
  br label %30

30:                                               ; preds = %30, %28
  %31 = phi i64 [ 0, %28 ], [ %70, %30 ]
  %32 = phi i64 [ %29, %28 ], [ %71, %30 ]
  %33 = getelementptr inbounds i8, i8* %7, i64 %31
  %34 = bitcast i8* %33 to <16 x i8>*
  %35 = load <16 x i8>, <16 x i8>* %34, align 1, !alias.scope !34
  %36 = getelementptr inbounds i8, i8* %33, i64 16
  %37 = bitcast i8* %36 to <16 x i8>*
  %38 = load <16 x i8>, <16 x i8>* %37, align 1, !alias.scope !34
  %39 = getelementptr inbounds i8, i8* %0, i64 %31
  %40 = bitcast i8* %39 to <16 x i8>*
  %41 = load <16 x i8>, <16 x i8>* %40, align 1, !alias.scope !34
  %42 = getelementptr inbounds i8, i8* %39, i64 16
  %43 = bitcast i8* %42 to <16 x i8>*
  %44 = load <16 x i8>, <16 x i8>* %43, align 1, !alias.scope !34
  %45 = sub <16 x i8> %35, %41
  %46 = sub <16 x i8> %38, %44
  %47 = getelementptr inbounds i8, i8* %8, i64 %31
  %48 = bitcast i8* %47 to <16 x i8>*
  store <16 x i8> %45, <16 x i8>* %48, align 1, !alias.scope !37, !noalias !34
  %49 = getelementptr inbounds i8, i8* %47, i64 16
  %50 = bitcast i8* %49 to <16 x i8>*
  store <16 x i8> %46, <16 x i8>* %50, align 1, !alias.scope !37, !noalias !34
  %51 = or i64 %31, 32
  %52 = getelementptr inbounds i8, i8* %7, i64 %51
  %53 = bitcast i8* %52 to <16 x i8>*
  %54 = load <16 x i8>, <16 x i8>* %53, align 1, !alias.scope !34
  %55 = getelementptr inbounds i8, i8* %52, i64 16
  %56 = bitcast i8* %55 to <16 x i8>*
  %57 = load <16 x i8>, <16 x i8>* %56, align 1, !alias.scope !34
  %58 = getelementptr inbounds i8, i8* %0, i64 %51
  %59 = bitcast i8* %58 to <16 x i8>*
  %60 = load <16 x i8>, <16 x i8>* %59, align 1, !alias.scope !34
  %61 = getelementptr inbounds i8, i8* %58, i64 16
  %62 = bitcast i8* %61 to <16 x i8>*
  %63 = load <16 x i8>, <16 x i8>* %62, align 1, !alias.scope !34
  %64 = sub <16 x i8> %54, %60
  %65 = sub <16 x i8> %57, %63
  %66 = getelementptr inbounds i8, i8* %8, i64 %51
  %67 = bitcast i8* %66 to <16 x i8>*
  store <16 x i8> %64, <16 x i8>* %67, align 1, !alias.scope !37, !noalias !34
  %68 = getelementptr inbounds i8, i8* %66, i64 16
  %69 = bitcast i8* %68 to <16 x i8>*
  store <16 x i8> %65, <16 x i8>* %69, align 1, !alias.scope !37, !noalias !34
  %70 = add i64 %31, 64
  %71 = add i64 %32, -2
  %72 = icmp eq i64 %71, 0
  br i1 %72, label %73, label %30, !llvm.loop !39

73:                                               ; preds = %30, %21
  %74 = phi i64 [ 0, %21 ], [ %70, %30 ]
  %75 = icmp eq i64 %26, 0
  br i1 %75, label %95, label %76

76:                                               ; preds = %73
  %77 = getelementptr inbounds i8, i8* %7, i64 %74
  %78 = bitcast i8* %77 to <16 x i8>*
  %79 = load <16 x i8>, <16 x i8>* %78, align 1, !alias.scope !34
  %80 = getelementptr inbounds i8, i8* %77, i64 16
  %81 = bitcast i8* %80 to <16 x i8>*
  %82 = load <16 x i8>, <16 x i8>* %81, align 1, !alias.scope !34
  %83 = getelementptr inbounds i8, i8* %0, i64 %74
  %84 = bitcast i8* %83 to <16 x i8>*
  %85 = load <16 x i8>, <16 x i8>* %84, align 1, !alias.scope !34
  %86 = getelementptr inbounds i8, i8* %83, i64 16
  %87 = bitcast i8* %86 to <16 x i8>*
  %88 = load <16 x i8>, <16 x i8>* %87, align 1, !alias.scope !34
  %89 = sub <16 x i8> %79, %85
  %90 = sub <16 x i8> %82, %88
  %91 = getelementptr inbounds i8, i8* %8, i64 %74
  %92 = bitcast i8* %91 to <16 x i8>*
  store <16 x i8> %89, <16 x i8>* %92, align 1, !alias.scope !37, !noalias !34
  %93 = getelementptr inbounds i8, i8* %91, i64 16
  %94 = bitcast i8* %93 to <16 x i8>*
  store <16 x i8> %90, <16 x i8>* %94, align 1, !alias.scope !37, !noalias !34
  br label %95

95:                                               ; preds = %73, %76
  %96 = icmp eq i64 %22, %12
  br i1 %96, label %149, label %97

97:                                               ; preds = %95, %14, %11
  %98 = phi i64 [ 0, %14 ], [ 0, %11 ], [ %22, %95 ]
  %99 = xor i64 %98, -1
  %100 = add nsw i64 %99, %12
  %101 = and i64 %12, 3
  %102 = icmp eq i64 %101, 0
  br i1 %102, label %115, label %103

103:                                              ; preds = %97, %103
  %104 = phi i64 [ %112, %103 ], [ %98, %97 ]
  %105 = phi i64 [ %113, %103 ], [ %101, %97 ]
  %106 = getelementptr inbounds i8, i8* %7, i64 %104
  %107 = load i8, i8* %106, align 1
  %108 = getelementptr inbounds i8, i8* %0, i64 %104
  %109 = load i8, i8* %108, align 1
  %110 = sub i8 %107, %109
  %111 = getelementptr inbounds i8, i8* %8, i64 %104
  store i8 %110, i8* %111, align 1
  %112 = add nuw nsw i64 %104, 1
  %113 = add i64 %105, -1
  %114 = icmp eq i64 %113, 0
  br i1 %114, label %115, label %103, !llvm.loop !40

115:                                              ; preds = %103, %97
  %116 = phi i64 [ %98, %97 ], [ %112, %103 ]
  %117 = icmp ult i64 %100, 3
  br i1 %117, label %149, label %118

118:                                              ; preds = %115, %118
  %119 = phi i64 [ %147, %118 ], [ %116, %115 ]
  %120 = getelementptr inbounds i8, i8* %7, i64 %119
  %121 = load i8, i8* %120, align 1
  %122 = getelementptr inbounds i8, i8* %0, i64 %119
  %123 = load i8, i8* %122, align 1
  %124 = sub i8 %121, %123
  %125 = getelementptr inbounds i8, i8* %8, i64 %119
  store i8 %124, i8* %125, align 1
  %126 = add nuw nsw i64 %119, 1
  %127 = getelementptr inbounds i8, i8* %7, i64 %126
  %128 = load i8, i8* %127, align 1
  %129 = getelementptr inbounds i8, i8* %0, i64 %126
  %130 = load i8, i8* %129, align 1
  %131 = sub i8 %128, %130
  %132 = getelementptr inbounds i8, i8* %8, i64 %126
  store i8 %131, i8* %132, align 1
  %133 = add nuw nsw i64 %119, 2
  %134 = getelementptr inbounds i8, i8* %7, i64 %133
  %135 = load i8, i8* %134, align 1
  %136 = getelementptr inbounds i8, i8* %0, i64 %133
  %137 = load i8, i8* %136, align 1
  %138 = sub i8 %135, %137
  %139 = getelementptr inbounds i8, i8* %8, i64 %133
  store i8 %138, i8* %139, align 1
  %140 = add nuw nsw i64 %119, 3
  %141 = getelementptr inbounds i8, i8* %7, i64 %140
  %142 = load i8, i8* %141, align 1
  %143 = getelementptr inbounds i8, i8* %0, i64 %140
  %144 = load i8, i8* %143, align 1
  %145 = sub i8 %142, %144
  %146 = getelementptr inbounds i8, i8* %8, i64 %140
  store i8 %145, i8* %146, align 1
  %147 = add nuw nsw i64 %119, 4
  %148 = icmp eq i64 %147, %12
  br i1 %148, label %149, label %118, !llvm.loop !41

149:                                              ; preds = %115, %118, %95, %5
  %150 = sext i32 %3 to i64
  %151 = icmp sgt i32 %2, 1
  br i1 %151, label %152, label %315

152:                                              ; preds = %149
  %153 = icmp sgt i32 %1, 0
  %154 = zext i32 %1 to i64
  %155 = add nsw i64 %150, %154
  %156 = and i64 %154, 4294967264
  %157 = add nsw i64 %156, -32
  %158 = lshr exact i64 %157, 5
  %159 = add nuw nsw i64 %158, 1
  %160 = icmp ult i32 %1, 32
  %161 = and i64 %154, 4294967264
  %162 = and i64 %159, 1
  %163 = icmp eq i64 %157, 0
  %164 = sub nuw nsw i64 %159, %162
  %165 = icmp eq i64 %162, 0
  %166 = icmp eq i64 %161, %154
  %167 = and i64 %154, 3
  %168 = icmp eq i64 %167, 0
  br label %169

169:                                              ; preds = %311, %152
  %170 = phi i64 [ %314, %311 ], [ 0, %152 ]
  %171 = phi i8* [ %185, %311 ], [ %4, %152 ]
  %172 = phi i8* [ %184, %311 ], [ %0, %152 ]
  %173 = phi i32 [ %312, %311 ], [ 1, %152 ]
  %174 = mul i64 %170, %150
  %175 = add i64 %174, %150
  %176 = getelementptr i8, i8* %4, i64 %175
  %177 = add i64 %155, %174
  %178 = getelementptr i8, i8* %4, i64 %177
  %179 = getelementptr i8, i8* %0, i64 %174
  %180 = add i64 %174, %154
  %181 = getelementptr i8, i8* %0, i64 %180
  %182 = getelementptr i8, i8* %0, i64 %175
  %183 = getelementptr i8, i8* %0, i64 %177
  %184 = getelementptr inbounds i8, i8* %172, i64 %150
  %185 = getelementptr inbounds i8, i8* %171, i64 %150
  br i1 %153, label %186, label %311

186:                                              ; preds = %169
  br i1 %160, label %261, label %187

187:                                              ; preds = %186
  %188 = icmp ult i8* %176, %181
  %189 = icmp ult i8* %179, %178
  %190 = and i1 %188, %189
  %191 = icmp ult i8* %176, %183
  %192 = icmp ult i8* %182, %178
  %193 = and i1 %191, %192
  %194 = or i1 %190, %193
  br i1 %194, label %261, label %195

195:                                              ; preds = %187
  br i1 %163, label %239, label %196

196:                                              ; preds = %195, %196
  %197 = phi i64 [ %236, %196 ], [ 0, %195 ]
  %198 = phi i64 [ %237, %196 ], [ %164, %195 ]
  %199 = getelementptr inbounds i8, i8* %184, i64 %197
  %200 = bitcast i8* %199 to <16 x i8>*
  %201 = load <16 x i8>, <16 x i8>* %200, align 1, !alias.scope !42
  %202 = getelementptr inbounds i8, i8* %199, i64 16
  %203 = bitcast i8* %202 to <16 x i8>*
  %204 = load <16 x i8>, <16 x i8>* %203, align 1, !alias.scope !42
  %205 = getelementptr inbounds i8, i8* %172, i64 %197
  %206 = bitcast i8* %205 to <16 x i8>*
  %207 = load <16 x i8>, <16 x i8>* %206, align 1, !alias.scope !45
  %208 = getelementptr inbounds i8, i8* %205, i64 16
  %209 = bitcast i8* %208 to <16 x i8>*
  %210 = load <16 x i8>, <16 x i8>* %209, align 1, !alias.scope !45
  %211 = sub <16 x i8> %201, %207
  %212 = sub <16 x i8> %204, %210
  %213 = getelementptr inbounds i8, i8* %185, i64 %197
  %214 = bitcast i8* %213 to <16 x i8>*
  store <16 x i8> %211, <16 x i8>* %214, align 1, !alias.scope !47, !noalias !49
  %215 = getelementptr inbounds i8, i8* %213, i64 16
  %216 = bitcast i8* %215 to <16 x i8>*
  store <16 x i8> %212, <16 x i8>* %216, align 1, !alias.scope !47, !noalias !49
  %217 = or i64 %197, 32
  %218 = getelementptr inbounds i8, i8* %184, i64 %217
  %219 = bitcast i8* %218 to <16 x i8>*
  %220 = load <16 x i8>, <16 x i8>* %219, align 1, !alias.scope !42
  %221 = getelementptr inbounds i8, i8* %218, i64 16
  %222 = bitcast i8* %221 to <16 x i8>*
  %223 = load <16 x i8>, <16 x i8>* %222, align 1, !alias.scope !42
  %224 = getelementptr inbounds i8, i8* %172, i64 %217
  %225 = bitcast i8* %224 to <16 x i8>*
  %226 = load <16 x i8>, <16 x i8>* %225, align 1, !alias.scope !45
  %227 = getelementptr inbounds i8, i8* %224, i64 16
  %228 = bitcast i8* %227 to <16 x i8>*
  %229 = load <16 x i8>, <16 x i8>* %228, align 1, !alias.scope !45
  %230 = sub <16 x i8> %220, %226
  %231 = sub <16 x i8> %223, %229
  %232 = getelementptr inbounds i8, i8* %185, i64 %217
  %233 = bitcast i8* %232 to <16 x i8>*
  store <16 x i8> %230, <16 x i8>* %233, align 1, !alias.scope !47, !noalias !49
  %234 = getelementptr inbounds i8, i8* %232, i64 16
  %235 = bitcast i8* %234 to <16 x i8>*
  store <16 x i8> %231, <16 x i8>* %235, align 1, !alias.scope !47, !noalias !49
  %236 = add i64 %197, 64
  %237 = add i64 %198, -2
  %238 = icmp eq i64 %237, 0
  br i1 %238, label %239, label %196, !llvm.loop !50

239:                                              ; preds = %196, %195
  %240 = phi i64 [ 0, %195 ], [ %236, %196 ]
  br i1 %165, label %260, label %241

241:                                              ; preds = %239
  %242 = getelementptr inbounds i8, i8* %184, i64 %240
  %243 = bitcast i8* %242 to <16 x i8>*
  %244 = load <16 x i8>, <16 x i8>* %243, align 1, !alias.scope !42
  %245 = getelementptr inbounds i8, i8* %242, i64 16
  %246 = bitcast i8* %245 to <16 x i8>*
  %247 = load <16 x i8>, <16 x i8>* %246, align 1, !alias.scope !42
  %248 = getelementptr inbounds i8, i8* %172, i64 %240
  %249 = bitcast i8* %248 to <16 x i8>*
  %250 = load <16 x i8>, <16 x i8>* %249, align 1, !alias.scope !45
  %251 = getelementptr inbounds i8, i8* %248, i64 16
  %252 = bitcast i8* %251 to <16 x i8>*
  %253 = load <16 x i8>, <16 x i8>* %252, align 1, !alias.scope !45
  %254 = sub <16 x i8> %244, %250
  %255 = sub <16 x i8> %247, %253
  %256 = getelementptr inbounds i8, i8* %185, i64 %240
  %257 = bitcast i8* %256 to <16 x i8>*
  store <16 x i8> %254, <16 x i8>* %257, align 1, !alias.scope !47, !noalias !49
  %258 = getelementptr inbounds i8, i8* %256, i64 16
  %259 = bitcast i8* %258 to <16 x i8>*
  store <16 x i8> %255, <16 x i8>* %259, align 1, !alias.scope !47, !noalias !49
  br label %260

260:                                              ; preds = %239, %241
  br i1 %166, label %311, label %261

261:                                              ; preds = %260, %187, %186
  %262 = phi i64 [ 0, %187 ], [ 0, %186 ], [ %161, %260 ]
  %263 = xor i64 %262, -1
  %264 = add nsw i64 %263, %154
  br i1 %168, label %277, label %265

265:                                              ; preds = %261, %265
  %266 = phi i64 [ %274, %265 ], [ %262, %261 ]
  %267 = phi i64 [ %275, %265 ], [ %167, %261 ]
  %268 = getelementptr inbounds i8, i8* %184, i64 %266
  %269 = load i8, i8* %268, align 1
  %270 = getelementptr inbounds i8, i8* %172, i64 %266
  %271 = load i8, i8* %270, align 1
  %272 = sub i8 %269, %271
  %273 = getelementptr inbounds i8, i8* %185, i64 %266
  store i8 %272, i8* %273, align 1
  %274 = add nuw nsw i64 %266, 1
  %275 = add i64 %267, -1
  %276 = icmp eq i64 %275, 0
  br i1 %276, label %277, label %265, !llvm.loop !51

277:                                              ; preds = %265, %261
  %278 = phi i64 [ %262, %261 ], [ %274, %265 ]
  %279 = icmp ult i64 %264, 3
  br i1 %279, label %311, label %280

280:                                              ; preds = %277, %280
  %281 = phi i64 [ %309, %280 ], [ %278, %277 ]
  %282 = getelementptr inbounds i8, i8* %184, i64 %281
  %283 = load i8, i8* %282, align 1
  %284 = getelementptr inbounds i8, i8* %172, i64 %281
  %285 = load i8, i8* %284, align 1
  %286 = sub i8 %283, %285
  %287 = getelementptr inbounds i8, i8* %185, i64 %281
  store i8 %286, i8* %287, align 1
  %288 = add nuw nsw i64 %281, 1
  %289 = getelementptr inbounds i8, i8* %184, i64 %288
  %290 = load i8, i8* %289, align 1
  %291 = getelementptr inbounds i8, i8* %172, i64 %288
  %292 = load i8, i8* %291, align 1
  %293 = sub i8 %290, %292
  %294 = getelementptr inbounds i8, i8* %185, i64 %288
  store i8 %293, i8* %294, align 1
  %295 = add nuw nsw i64 %281, 2
  %296 = getelementptr inbounds i8, i8* %184, i64 %295
  %297 = load i8, i8* %296, align 1
  %298 = getelementptr inbounds i8, i8* %172, i64 %295
  %299 = load i8, i8* %298, align 1
  %300 = sub i8 %297, %299
  %301 = getelementptr inbounds i8, i8* %185, i64 %295
  store i8 %300, i8* %301, align 1
  %302 = add nuw nsw i64 %281, 3
  %303 = getelementptr inbounds i8, i8* %184, i64 %302
  %304 = load i8, i8* %303, align 1
  %305 = getelementptr inbounds i8, i8* %172, i64 %302
  %306 = load i8, i8* %305, align 1
  %307 = sub i8 %304, %306
  %308 = getelementptr inbounds i8, i8* %185, i64 %302
  store i8 %307, i8* %308, align 1
  %309 = add nuw nsw i64 %281, 4
  %310 = icmp eq i64 %309, %154
  br i1 %310, label %311, label %280, !llvm.loop !52

311:                                              ; preds = %277, %280, %260, %169
  %312 = add nuw nsw i32 %173, 1
  %313 = icmp eq i32 %312, %2
  %314 = add i64 %170, 1
  br i1 %313, label %315, label %169

315:                                              ; preds = %311, %149
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @GradientFilter_C(i8* nocapture readonly, i32, i32, i32, i8* nocapture) #1 {
  %6 = load i8, i8* %0, align 1
  store i8 %6, i8* %4, align 1
  %7 = getelementptr inbounds i8, i8* %0, i64 1
  %8 = getelementptr inbounds i8, i8* %4, i64 1
  %9 = add nsw i32 %1, -1
  %10 = icmp sgt i32 %9, 0
  br i1 %10, label %11, label %149

11:                                               ; preds = %5
  %12 = zext i32 %9 to i64
  %13 = icmp ult i32 %9, 32
  br i1 %13, label %97, label %14

14:                                               ; preds = %11
  %15 = add nuw nsw i64 %12, 1
  %16 = getelementptr i8, i8* %4, i64 %15
  %17 = getelementptr i8, i8* %0, i64 %15
  %18 = icmp ult i8* %8, %17
  %19 = icmp ugt i8* %16, %0
  %20 = and i1 %18, %19
  br i1 %20, label %97, label %21

21:                                               ; preds = %14
  %22 = and i64 %12, 4294967264
  %23 = add nsw i64 %22, -32
  %24 = lshr exact i64 %23, 5
  %25 = add nuw nsw i64 %24, 1
  %26 = and i64 %25, 1
  %27 = icmp eq i64 %23, 0
  br i1 %27, label %73, label %28

28:                                               ; preds = %21
  %29 = sub nuw nsw i64 %25, %26
  br label %30

30:                                               ; preds = %30, %28
  %31 = phi i64 [ 0, %28 ], [ %70, %30 ]
  %32 = phi i64 [ %29, %28 ], [ %71, %30 ]
  %33 = getelementptr inbounds i8, i8* %7, i64 %31
  %34 = bitcast i8* %33 to <16 x i8>*
  %35 = load <16 x i8>, <16 x i8>* %34, align 1, !alias.scope !53
  %36 = getelementptr inbounds i8, i8* %33, i64 16
  %37 = bitcast i8* %36 to <16 x i8>*
  %38 = load <16 x i8>, <16 x i8>* %37, align 1, !alias.scope !53
  %39 = getelementptr inbounds i8, i8* %0, i64 %31
  %40 = bitcast i8* %39 to <16 x i8>*
  %41 = load <16 x i8>, <16 x i8>* %40, align 1, !alias.scope !53
  %42 = getelementptr inbounds i8, i8* %39, i64 16
  %43 = bitcast i8* %42 to <16 x i8>*
  %44 = load <16 x i8>, <16 x i8>* %43, align 1, !alias.scope !53
  %45 = sub <16 x i8> %35, %41
  %46 = sub <16 x i8> %38, %44
  %47 = getelementptr inbounds i8, i8* %8, i64 %31
  %48 = bitcast i8* %47 to <16 x i8>*
  store <16 x i8> %45, <16 x i8>* %48, align 1, !alias.scope !56, !noalias !53
  %49 = getelementptr inbounds i8, i8* %47, i64 16
  %50 = bitcast i8* %49 to <16 x i8>*
  store <16 x i8> %46, <16 x i8>* %50, align 1, !alias.scope !56, !noalias !53
  %51 = or i64 %31, 32
  %52 = getelementptr inbounds i8, i8* %7, i64 %51
  %53 = bitcast i8* %52 to <16 x i8>*
  %54 = load <16 x i8>, <16 x i8>* %53, align 1, !alias.scope !53
  %55 = getelementptr inbounds i8, i8* %52, i64 16
  %56 = bitcast i8* %55 to <16 x i8>*
  %57 = load <16 x i8>, <16 x i8>* %56, align 1, !alias.scope !53
  %58 = getelementptr inbounds i8, i8* %0, i64 %51
  %59 = bitcast i8* %58 to <16 x i8>*
  %60 = load <16 x i8>, <16 x i8>* %59, align 1, !alias.scope !53
  %61 = getelementptr inbounds i8, i8* %58, i64 16
  %62 = bitcast i8* %61 to <16 x i8>*
  %63 = load <16 x i8>, <16 x i8>* %62, align 1, !alias.scope !53
  %64 = sub <16 x i8> %54, %60
  %65 = sub <16 x i8> %57, %63
  %66 = getelementptr inbounds i8, i8* %8, i64 %51
  %67 = bitcast i8* %66 to <16 x i8>*
  store <16 x i8> %64, <16 x i8>* %67, align 1, !alias.scope !56, !noalias !53
  %68 = getelementptr inbounds i8, i8* %66, i64 16
  %69 = bitcast i8* %68 to <16 x i8>*
  store <16 x i8> %65, <16 x i8>* %69, align 1, !alias.scope !56, !noalias !53
  %70 = add i64 %31, 64
  %71 = add i64 %32, -2
  %72 = icmp eq i64 %71, 0
  br i1 %72, label %73, label %30, !llvm.loop !58

73:                                               ; preds = %30, %21
  %74 = phi i64 [ 0, %21 ], [ %70, %30 ]
  %75 = icmp eq i64 %26, 0
  br i1 %75, label %95, label %76

76:                                               ; preds = %73
  %77 = getelementptr inbounds i8, i8* %7, i64 %74
  %78 = bitcast i8* %77 to <16 x i8>*
  %79 = load <16 x i8>, <16 x i8>* %78, align 1, !alias.scope !53
  %80 = getelementptr inbounds i8, i8* %77, i64 16
  %81 = bitcast i8* %80 to <16 x i8>*
  %82 = load <16 x i8>, <16 x i8>* %81, align 1, !alias.scope !53
  %83 = getelementptr inbounds i8, i8* %0, i64 %74
  %84 = bitcast i8* %83 to <16 x i8>*
  %85 = load <16 x i8>, <16 x i8>* %84, align 1, !alias.scope !53
  %86 = getelementptr inbounds i8, i8* %83, i64 16
  %87 = bitcast i8* %86 to <16 x i8>*
  %88 = load <16 x i8>, <16 x i8>* %87, align 1, !alias.scope !53
  %89 = sub <16 x i8> %79, %85
  %90 = sub <16 x i8> %82, %88
  %91 = getelementptr inbounds i8, i8* %8, i64 %74
  %92 = bitcast i8* %91 to <16 x i8>*
  store <16 x i8> %89, <16 x i8>* %92, align 1, !alias.scope !56, !noalias !53
  %93 = getelementptr inbounds i8, i8* %91, i64 16
  %94 = bitcast i8* %93 to <16 x i8>*
  store <16 x i8> %90, <16 x i8>* %94, align 1, !alias.scope !56, !noalias !53
  br label %95

95:                                               ; preds = %73, %76
  %96 = icmp eq i64 %22, %12
  br i1 %96, label %149, label %97

97:                                               ; preds = %95, %14, %11
  %98 = phi i64 [ 0, %14 ], [ 0, %11 ], [ %22, %95 ]
  %99 = xor i64 %98, -1
  %100 = add nsw i64 %99, %12
  %101 = and i64 %12, 3
  %102 = icmp eq i64 %101, 0
  br i1 %102, label %115, label %103

103:                                              ; preds = %97, %103
  %104 = phi i64 [ %112, %103 ], [ %98, %97 ]
  %105 = phi i64 [ %113, %103 ], [ %101, %97 ]
  %106 = getelementptr inbounds i8, i8* %7, i64 %104
  %107 = load i8, i8* %106, align 1
  %108 = getelementptr inbounds i8, i8* %0, i64 %104
  %109 = load i8, i8* %108, align 1
  %110 = sub i8 %107, %109
  %111 = getelementptr inbounds i8, i8* %8, i64 %104
  store i8 %110, i8* %111, align 1
  %112 = add nuw nsw i64 %104, 1
  %113 = add i64 %105, -1
  %114 = icmp eq i64 %113, 0
  br i1 %114, label %115, label %103, !llvm.loop !59

115:                                              ; preds = %103, %97
  %116 = phi i64 [ %98, %97 ], [ %112, %103 ]
  %117 = icmp ult i64 %100, 3
  br i1 %117, label %149, label %118

118:                                              ; preds = %115, %118
  %119 = phi i64 [ %147, %118 ], [ %116, %115 ]
  %120 = getelementptr inbounds i8, i8* %7, i64 %119
  %121 = load i8, i8* %120, align 1
  %122 = getelementptr inbounds i8, i8* %0, i64 %119
  %123 = load i8, i8* %122, align 1
  %124 = sub i8 %121, %123
  %125 = getelementptr inbounds i8, i8* %8, i64 %119
  store i8 %124, i8* %125, align 1
  %126 = add nuw nsw i64 %119, 1
  %127 = getelementptr inbounds i8, i8* %7, i64 %126
  %128 = load i8, i8* %127, align 1
  %129 = getelementptr inbounds i8, i8* %0, i64 %126
  %130 = load i8, i8* %129, align 1
  %131 = sub i8 %128, %130
  %132 = getelementptr inbounds i8, i8* %8, i64 %126
  store i8 %131, i8* %132, align 1
  %133 = add nuw nsw i64 %119, 2
  %134 = getelementptr inbounds i8, i8* %7, i64 %133
  %135 = load i8, i8* %134, align 1
  %136 = getelementptr inbounds i8, i8* %0, i64 %133
  %137 = load i8, i8* %136, align 1
  %138 = sub i8 %135, %137
  %139 = getelementptr inbounds i8, i8* %8, i64 %133
  store i8 %138, i8* %139, align 1
  %140 = add nuw nsw i64 %119, 3
  %141 = getelementptr inbounds i8, i8* %7, i64 %140
  %142 = load i8, i8* %141, align 1
  %143 = getelementptr inbounds i8, i8* %0, i64 %140
  %144 = load i8, i8* %143, align 1
  %145 = sub i8 %142, %144
  %146 = getelementptr inbounds i8, i8* %8, i64 %140
  store i8 %145, i8* %146, align 1
  %147 = add nuw nsw i64 %119, 4
  %148 = icmp eq i64 %147, %12
  br i1 %148, label %149, label %118, !llvm.loop !60

149:                                              ; preds = %115, %118, %95, %5
  %150 = sext i32 %3 to i64
  %151 = icmp sgt i32 %2, 1
  br i1 %151, label %152, label %257

152:                                              ; preds = %149
  %153 = icmp sgt i32 %1, 1
  %154 = zext i32 %1 to i64
  %155 = xor i64 %150, -1
  %156 = add nsw i64 %154, -1
  %157 = add nsw i64 %150, 1
  %158 = add nsw i64 %150, %154
  %159 = icmp ult i64 %156, 16
  %160 = and i64 %156, -16
  %161 = or i64 %160, 1
  %162 = icmp eq i64 %156, %160
  br label %163

163:                                              ; preds = %253, %152
  %164 = phi i64 [ %256, %253 ], [ 0, %152 ]
  %165 = phi i8* [ %180, %253 ], [ %4, %152 ]
  %166 = phi i8* [ %179, %253 ], [ %0, %152 ]
  %167 = phi i32 [ %254, %253 ], [ 1, %152 ]
  %168 = mul i64 %164, %150
  %169 = add i64 %157, %168
  %170 = getelementptr i8, i8* %4, i64 %169
  %171 = add i64 %158, %168
  %172 = getelementptr i8, i8* %4, i64 %171
  %173 = add i64 %168, %150
  %174 = getelementptr i8, i8* %0, i64 %173
  %175 = getelementptr i8, i8* %0, i64 %171
  %176 = getelementptr i8, i8* %0, i64 %168
  %177 = add i64 %168, %154
  %178 = getelementptr i8, i8* %0, i64 %177
  %179 = getelementptr inbounds i8, i8* %166, i64 %150
  %180 = getelementptr inbounds i8, i8* %165, i64 %150
  %181 = load i8, i8* %179, align 1
  %182 = load i8, i8* %166, align 1
  %183 = sub i8 %181, %182
  store i8 %183, i8* %180, align 1
  br i1 %153, label %184, label %253

184:                                              ; preds = %163
  br i1 %159, label %225, label %185

185:                                              ; preds = %184
  %186 = icmp ult i8* %170, %175
  %187 = icmp ult i8* %174, %172
  %188 = and i1 %186, %187
  %189 = icmp ult i8* %170, %178
  %190 = icmp ult i8* %176, %172
  %191 = and i1 %189, %190
  %192 = or i1 %188, %191
  br i1 %192, label %225, label %193

193:                                              ; preds = %185, %193
  %194 = phi i64 [ %222, %193 ], [ 0, %185 ]
  %195 = or i64 %194, 1
  %196 = getelementptr inbounds i8, i8* %179, i64 %194
  %197 = bitcast i8* %196 to <16 x i8>*
  %198 = load <16 x i8>, <16 x i8>* %197, align 1, !alias.scope !61
  %199 = getelementptr inbounds i8, i8* %166, i64 %195
  %200 = bitcast i8* %199 to <16 x i8>*
  %201 = load <16 x i8>, <16 x i8>* %200, align 1, !alias.scope !64
  %202 = add i64 %195, %155
  %203 = getelementptr inbounds i8, i8* %179, i64 %202
  %204 = bitcast i8* %203 to <16 x i8>*
  %205 = load <16 x i8>, <16 x i8>* %204, align 1, !alias.scope !64
  %206 = zext <16 x i8> %198 to <16 x i32>
  %207 = zext <16 x i8> %201 to <16 x i32>
  %208 = add nuw nsw <16 x i32> %207, %206
  %209 = zext <16 x i8> %205 to <16 x i32>
  %210 = sub nsw <16 x i32> %208, %209
  %211 = icmp ult <16 x i32> %210, <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>
  %212 = icmp slt <16 x i32> %210, zeroinitializer
  %213 = select <16 x i1> %212, <16 x i32> zeroinitializer, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %214 = select <16 x i1> %211, <16 x i32> %210, <16 x i32> %213
  %215 = getelementptr inbounds i8, i8* %179, i64 %195
  %216 = bitcast i8* %215 to <16 x i8>*
  %217 = load <16 x i8>, <16 x i8>* %216, align 1, !alias.scope !61
  %218 = trunc <16 x i32> %214 to <16 x i8>
  %219 = sub <16 x i8> %217, %218
  %220 = getelementptr inbounds i8, i8* %180, i64 %195
  %221 = bitcast i8* %220 to <16 x i8>*
  store <16 x i8> %219, <16 x i8>* %221, align 1, !alias.scope !66, !noalias !68
  %222 = add i64 %194, 16
  %223 = icmp eq i64 %222, %160
  br i1 %223, label %224, label %193, !llvm.loop !69

224:                                              ; preds = %193
  br i1 %162, label %253, label %225

225:                                              ; preds = %224, %185, %184
  %226 = phi i64 [ 1, %185 ], [ 1, %184 ], [ %161, %224 ]
  br label %227

227:                                              ; preds = %225, %227
  %228 = phi i64 [ %251, %227 ], [ %226, %225 ]
  %229 = add nsw i64 %228, -1
  %230 = getelementptr inbounds i8, i8* %179, i64 %229
  %231 = load i8, i8* %230, align 1
  %232 = getelementptr inbounds i8, i8* %166, i64 %228
  %233 = load i8, i8* %232, align 1
  %234 = add i64 %228, %155
  %235 = getelementptr inbounds i8, i8* %179, i64 %234
  %236 = load i8, i8* %235, align 1
  %237 = zext i8 %231 to i32
  %238 = zext i8 %233 to i32
  %239 = add nuw nsw i32 %238, %237
  %240 = zext i8 %236 to i32
  %241 = sub nsw i32 %239, %240
  %242 = icmp ult i32 %241, 256
  %243 = icmp slt i32 %241, 0
  %244 = select i1 %243, i32 0, i32 255
  %245 = select i1 %242, i32 %241, i32 %244
  %246 = getelementptr inbounds i8, i8* %179, i64 %228
  %247 = load i8, i8* %246, align 1
  %248 = trunc i32 %245 to i8
  %249 = sub i8 %247, %248
  %250 = getelementptr inbounds i8, i8* %180, i64 %228
  store i8 %249, i8* %250, align 1
  %251 = add nuw nsw i64 %228, 1
  %252 = icmp eq i64 %251, %154
  br i1 %252, label %253, label %227, !llvm.loop !70

253:                                              ; preds = %227, %224, %163
  %254 = add nuw nsw i32 %167, 1
  %255 = icmp eq i32 %254, %2
  %256 = add i64 %164, 1
  br i1 %255, label %257, label %163

257:                                              ; preds = %253, %149
  ret void
}

declare void @VP8FiltersInitSSE2() local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !3}
!5 = !{!6}
!6 = distinct !{!6, !7}
!7 = distinct !{!7, !"LVerDomain"}
!8 = !{!9}
!9 = distinct !{!9, !7}
!10 = !{!11}
!11 = distinct !{!11, !7}
!12 = !{!6, !9}
!13 = distinct !{!13, !14}
!14 = !{!"llvm.loop.isvectorized", i32 1}
!15 = distinct !{!15, !14}
!16 = distinct !{!16, !3}
!17 = distinct !{!17, !3}
!18 = !{!19}
!19 = distinct !{!19, !20}
!20 = distinct !{!20, !"LVerDomain"}
!21 = !{!22}
!22 = distinct !{!22, !20}
!23 = distinct !{!23, !14}
!24 = distinct !{!24, !3}
!25 = distinct !{!25, !14}
!26 = !{!27}
!27 = distinct !{!27, !28}
!28 = distinct !{!28, !"LVerDomain"}
!29 = !{!30}
!30 = distinct !{!30, !28}
!31 = distinct !{!31, !14}
!32 = distinct !{!32, !3}
!33 = distinct !{!33, !14}
!34 = !{!35}
!35 = distinct !{!35, !36}
!36 = distinct !{!36, !"LVerDomain"}
!37 = !{!38}
!38 = distinct !{!38, !36}
!39 = distinct !{!39, !14}
!40 = distinct !{!40, !3}
!41 = distinct !{!41, !14}
!42 = !{!43}
!43 = distinct !{!43, !44}
!44 = distinct !{!44, !"LVerDomain"}
!45 = !{!46}
!46 = distinct !{!46, !44}
!47 = !{!48}
!48 = distinct !{!48, !44}
!49 = !{!46, !43}
!50 = distinct !{!50, !14}
!51 = distinct !{!51, !3}
!52 = distinct !{!52, !14}
!53 = !{!54}
!54 = distinct !{!54, !55}
!55 = distinct !{!55, !"LVerDomain"}
!56 = !{!57}
!57 = distinct !{!57, !55}
!58 = distinct !{!58, !14}
!59 = distinct !{!59, !3}
!60 = distinct !{!60, !14}
!61 = !{!62}
!62 = distinct !{!62, !63}
!63 = distinct !{!63, !"LVerDomain"}
!64 = !{!65}
!65 = distinct !{!65, !63}
!66 = !{!67}
!67 = distinct !{!67, !63}
!68 = !{!62, !65}
!69 = distinct !{!69, !14}
!70 = distinct !{!70, !14}
