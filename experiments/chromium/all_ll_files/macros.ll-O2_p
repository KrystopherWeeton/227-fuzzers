; ModuleID = '../../third_party/nasm/macros/macros.c'
source_filename = "../../third_party/nasm/macros/macros.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.use_package = type { i8*, i8*, i32 }

@nasm_stdmac_version = hidden local_unnamed_addr constant [154 x i8] c"\E0__?NASM_MAJOR?__ 2\7F\E0__?NASM_MINOR?__ 15\7F\E0__?NASM_SUBMINOR?__ 2\7F\E0__?NASM_PATCHLEVEL?__ 96\7F\E0__?NASM_VERSION_ID?__ 0020F0260h\7F\E0__?NASM_VER?__ \222.15.03rc6\22\7F\7F", align 16
@nasm_stdmac_tasm = hidden local_unnamed_addr constant [38 x i8] c"\E1IDEAL\7F\E1JUMPS\7F\E1P386\7F\E1P486\7F\E1P586\7F\E1END\7F\7F", align 16
@nasm_stdmac_nasm = hidden local_unnamed_addr constant [3831 x i8] c"\E0__?SECT?__\7F\DE__SECT__ __?SECT?__\7F\E7section 1+.nolist\7F\E0__?SECT?__ [section %1]\7F__?SECT?__\7F\C7\7F\E7segment 1+.nolist\7F\E0__?SECT?__ [segment %1]\7F__?SECT?__\7F\C7\7F\E0__?SECTALIGN_ALIGN_UPDATES_SECTION?__ 1\7F\E7sectalign 1+.nolist\7F\88%1,off\7F\E0__?SECTALIGN_ALIGN_UPDATES_SECTION?__ 0\7F\A8%1,on\7F\E0__?SECTALIGN_ALIGN_UPDATES_SECTION?__ 1\7F\C4\7F[sectalign %1]\7F\C5\7F\C7\7F\DE__SECTALIGN_ALIGN_UPDATES_SECTION__ __?SECTALIGN_ALIGN_UPDATES_SECTION?__\7F\E7absolute 1+.nolist\7F\E0__?SECT?__ [absolute %1]\7F__?SECT?__\7F\C7\7F\E7struc 1-2.nolist 0\7F\D3\7F\E0%$strucname %1\7F[absolute %2]\7F%$strucname:\7F\C7\7F\E7endstruc 0.nolist\7F%{$strucname}_size equ ($-%$strucname)\7F\D1\7F__?SECT?__\7F\C7\7F\E7istruc 1.nolist\7F\D3\7F\E0%$strucname %1\7F%$strucstart:\7F\C7\7F\E7at 1-2+.nolist\7Ftimes (%1-%$strucname)-($-%$strucstart) db 0\7F%2\7F\C7\7F\E7iend 0.nolist\7Ftimes %{$strucname}_size-($-%$strucstart) db 0\7F\D1\7F\C7\7F\E7align 1-2+.nolist nop\7F\80__?SECTALIGN_ALIGN_UPDATES_SECTION?__\7Fsectalign %1\7F\C5\7Ftimes (((%1) - (($-$$) % (%1))) % (%1)) %2\7F\C7\7F\E7alignb 1-2+.nolist\7F\80__?SECTALIGN_ALIGN_UPDATES_SECTION?__\7Fsectalign %1\7F\C5\7F\84%2\7F[warning push]\7F[warning -zeroing]\7Fresb (((%1) - (($-$$) % (%1))) % (%1))\7F[warning pop]\7F\C4\7Ftimes (((%1) - (($-$$) % (%1))) % (%1)) %2\7F\C5\7F\C7\7F\E7bits 1+.nolist\7F[bits %1]\7F\C7\7F\E7use16 0.nolist\7F[bits 16]\7F\C7\7F\E7use32 0.nolist\7F[bits 32]\7F\C7\7F\E7use64 0.nolist\7F[bits 64]\7F\C7\7F\E7extern 1-*.nolist\7F\D4%0\7F[extern %1]\7F\D61\7F\C8\7F\C7\7F\E7static 1-*.nolist\7F\D4%0\7F[static %1]\7F\D61\7F\C8\7F\C7\7F\E7global 1-*.nolist\7F\D4%0\7F[global %1]\7F\D61\7F\C8\7F\C7\7F\E7required 1-*.nolist\7F\D4%0\7F[required %1]\7F\D61\7F\C8\7F\C7\7F\E7common 1-*.nolist\7F\D4%0\7F[common %1]\7F\D61\7F\C8\7F\C7\7F\E7cpu 1+.nolist\7F[cpu %1]\7F\C7\7F\E0__?FLOAT_DAZ?__ nodaz\7F\E0__?FLOAT_ROUND?__ near\7F\E0__?FLOAT?__ __?FLOAT_DAZ?__,__?FLOAT_ROUND?__\7F\DE__FLOAT_DAZ__ __?FLOAT_DAZ?__\7F\DE__FLOAT_ROUND__ __?FLOAT_ROUND?__\7F\DE__FLOAT__ __?FLOAT?__\7F\E7float 1-*.nolist\7F\D4%0\7F[float %1]\7F\88%1,daz\7F\E0__?FLOAT_DAZ?__ daz\7F\A8%1,nodaz\7F\E0__?FLOAT_DAZ?__ nodaz\7F\A8%1,near\7F\E0__?FLOAT_ROUND?__ near\7F\A8%1,up\7F\E0__?FLOAT_ROUND?__ up\7F\A8%1,down\7F\E0__?FLOAT_ROUND?__ down\7F\A8%1,zero\7F\E0__?FLOAT_ROUND?__ zero\7F\A8%1,default\7F\E0__?FLOAT_DAZ?__ nodaz\7F\E0__?FLOAT_ROUND?__ near\7F\C5\7F\D61\7F\C8\7F\C7\7F\E7default 1+.nolist\7F[default %1]\7F\C7\7F\E7userel 0.nolist\7F[default rel]\7F\C7\7F\E7useabs 0.nolist\7F[default abs]\7F\C7\7F\E7usebnd 0.nolist\7F[default bnd]\7F\C7\7F\E7usenobnd 0.nolist\7F[default nobnd]\7F\C7\7F\E7incbin 1-2+.nolist 0\7F\D3\7F\E8%$dep %1\7F\C3%$dep\7F%? %$dep,%2\7F\D1\7F\C7\7F\DE__NASM_MAJOR__ __?NASM_MAJOR?__\7F\DE__NASM_MINOR__ __?NASM_MINOR?__\7F\DE__NASM_SUBMINOR__ __?NASM_SUBMINOR?__\7F\DE__NASM_PATCHLEVEL__ __?NASM_PATCHLEVEL?__\7F\DE__NASM_SNAPSHOT__ __?NASM_SNAPSHOT?__\7F\DE__NASM_VERSION_ID__ __?NASM_VERSION_ID?__\7F\DE__NASM_VER__ __?NASM_VER?__\7F\DE__OUTPUT_FORMAT__ __?OUTPUT_FORMAT?__\7F\DE__DEBUG_FORMAT__ __?DEBUG_FORMAT?__\7F\DE__DATE__ __?DATE?__\7F\DE__DATE_NUM__ __?DATE_NUM?__\7F\DE__TIME__ __?TIME?__\7F\DE__TIME_NUM__ __?TIME_NUM?__\7F\DE__UTC_DATE__ __?UTC_DATE?__\7F\DE__UTC_DATE_NUM__ __?UTC_DATE_NUM?__\7F\DE__UTC_TIME__ __?UTC_TIME?__\7F\DE__UTC_TIME_NUM__ __?UTC_TIME_NUM?__\7F\DE__POSIX_TIME__ __?POSIX_TIME?__\7F\DE__FILE__ __?FILE?__\7F\DE__LINE__ __?LINE?__\7F\DE__BITS__ __?BITS?__\7F\DE__PTR__ __?PTR?__\7F\DE__PASS__ __?PASS?__\7F\E1__?infinity?__ %?\7F\E1__?nan?__ %?\7F\E1__?qnan?__ %?\7F\E1__?snan?__ %?\7F\E1__?float8?__ %?\7F\E1__?float16?__ %?\7F\E1__?float32?__ %?\7F\E1__?float64?__ %?\7F\E1__?float80m?__ %?\7F\E1__?float80e?__ %?\7F\E1__?float128l?__ %?\7F\E1__?float128h?__ %?\7F\E1__?utf16?__ %?\7F\E1__?utf16le?__ %?\7F\E1__?utf16be?__ %?\7F\E1__?utf32?__ %?\7F\E1__?utf32le?__ %?\7F\E1__?utf32be?__ %?\7F\E1__?ilog2e?__ %?\7F\E1__?ilog2w?__ %?\7F\E1__?ilog2f?__ %?\7F\E1__?ilog2c?__ %?\7F\DF__infinity__ __?infinity?__\7F\DF__nan__ __?nan?__\7F\DF__qnan__ __?qnan?__\7F\DF__snan__ __?snan?__\7F\DF__float8__ __?float8?__\7F\DF__float16__ __?float16?__\7F\DF__float32__ __?float32?__\7F\DF__float64__ __?float64?__\7F\DF__float80m__ __?float80m?__\7F\DF__float80e__ __?float80e?__\7F\DF__float128l__ __?float128l?__\7F\DF__float128h__ __?float128h?__\7F\DF__utf16__ __?utf16?__\7F\DF__utf16le__ __?utf16le?__\7F\DF__utf16be__ __?utf16be?__\7F\DF__utf32__ __?utf32?__\7F\DF__utf32le__ __?utf32le?__\7F\DF__utf32be__ __?utf32be?__\7F\DF__ilog2e__ __?ilog2e?__\7F\DF__ilog2w__ __?ilog2w?__\7F\DF__ilog2f__ __?ilog2f?__\7F\DF__ilog2c__ __?ilog2c?__\7F\7F", align 16
@aout_stdmac = hidden local_unnamed_addr constant [51 x i8] c"\E0__?SECT?__ [section .text]\7F\E6__?NASM_CDecl?__ 1\7F\C7\7F\7F", align 16
@as86_stdmac = hidden local_unnamed_addr constant [51 x i8] c"\E0__?SECT?__ [section .text]\7F\E6__?NASM_CDecl?__ 1\7F\C7\7F\7F", align 16
@bin_stdmac = hidden local_unnamed_addr constant [77 x i8] c"\E0__?SECT?__ [section .text]\7F\E7org 1+.nolist\7F[org %1]\7F\C7\7F\E6__?NASM_CDecl?__ 1\7F\C7\7F\7F", align 16
@coff_stdmac = hidden local_unnamed_addr constant [116 x i8] c"\E0__?SECT?__ [section .text]\7F\E6__?NASM_CDecl?__ 1\7F\C7\7F\E7export 1+.nolist\7F[export %1]\7F\C7\7F\E7safeseh 1.nolist\7F[safeseh %1]\7F\C7\7F\7F", align 16
@dbg_stdmac = hidden local_unnamed_addr constant [192 x i8] c"\E0__?SECT?__ [section .text]\7F\E7group 1+.nolist\7F[group %1]\7F\C7\7F\E7uppercase 0+.nolist\7F\D2dbg uppercase %1\7F\C7\7F\E7export 1+.nolist\7F\D2dbg export %1\7F\C7\7F\E7import 1+.nolist\7F\D2dbg import %1\7F\C7\7F\E6__?NASM_CDecl?__ 1\7F\C7\7F\7F", align 16
@elf_stdmac = hidden local_unnamed_addr constant [88 x i8] c"\E0__?SECT?__ [section .text]\7F\E6__?NASM_CDecl?__ 1\7F\E0$_%1 $%1\7F\C7\7F\E7osabi 1+.nolist\7F[%? %1]\7F\C7\7F\7F", align 16
@macho_stdmac = hidden local_unnamed_addr constant [175 x i8] c"\E0__?SECT?__ [section .text]\7F\E6__?NASM_CDecl?__ 1\7F\C7\7F\E7subsections_via_symbols 0.nolist\7F\D2__?OUTPUT_FORMAT?__ %?\7F\C7\7F\E7no_dead_strip 1-*.nolist\7F\D4%0\7F\D2__?OUTPUT_FORMAT?__ %? %1\7F\D61\7F\C8\7F\C7\7F\7F", align 16
@obj_stdmac = hidden local_unnamed_addr constant [183 x i8] c"\E0__?SECT?__ [section .text]\7F\E7group 1+.nolist\7F[group %1]\7F\C7\7F\E7uppercase 0+.nolist\7F[uppercase %1]\7F\C7\7F\E7export 1+.nolist\7F[export %1]\7F\C7\7F\E7import 1+.nolist\7F[import %1]\7F\C7\7F\E6__?NASM_CDecl?__ 1\7F\C7\7F\7F", align 16
@rdf2_stdmac = hidden local_unnamed_addr constant [117 x i8] c"\E0__?SECT?__ [section .text]\7F\E7library 1+.nolist\7F[library %1]\7F\C7\7F\E7module 1+.nolist\7F[module %1]\7F\C7\7F\E6__?NASM_CDecl?__ 1\7F\C7\7F\7F", align 16
@use_package_count = hidden local_unnamed_addr constant i32 5, align 4
@nasm_find_use_package.packages = internal constant [5 x %struct.use_package] [%struct.use_package { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([503 x i8], [503 x i8]* @nasm_usemac_altreg, i32 0, i32 0), i32 0 }, %struct.use_package { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([351 x i8], [351 x i8]* @nasm_usemac_fp, i32 0, i32 0), i32 1 }, %struct.use_package { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([274 x i8], [274 x i8]* @nasm_usemac_ifunc, i32 0, i32 0), i32 2 }, %struct.use_package { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([332 x i8], [332 x i8]* @nasm_usemac_masm, i32 0, i32 0), i32 3 }, %struct.use_package { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([4183 x i8], [4183 x i8]* @nasm_usemac_smartalign, i32 0, i32 0), i32 4 }], align 16
@.str = private unnamed_addr constant [7 x i8] c"altreg\00", align 1
@nasm_usemac_altreg = internal constant [503 x i8] c"\E0__?USE_ALTREG?__\7F\DE__USE_ALTREG__ __?USEALTREG?__\7F\E1r8l r8b\7F\E1r9l r9b\7F\E1r10l r10b\7F\E1r11l r11b\7F\E1r12l r12b\7F\E1r13l r13b\7F\E1r14l r14b\7F\E1r15l r15b\7F\E1r0 rax\7F\E1r1 rcx\7F\E1r2 rdx\7F\E1r3 rbx\7F\E1r4 rsp\7F\E1r5 rbp\7F\E1r6 rsi\7F\E1r7 rdi\7F\E1r0d eax\7F\E1r1d ecx\7F\E1r2d edx\7F\E1r3d ebx\7F\E1r4d esp\7F\E1r5d ebp\7F\E1r6d esi\7F\E1r7d edi\7F\E1r0w ax\7F\E1r1w cx\7F\E1r2w dx\7F\E1r3w bx\7F\E1r4w sp\7F\E1r5w bp\7F\E1r6w si\7F\E1r7w di\7F\E1r0b al\7F\E1r1b cl\7F\E1r2b dl\7F\E1r3b bl\7F\E1r4b spl\7F\E1r5b bpl\7F\E1r6b sil\7F\E1r7b dil\7F\E1r0l al\7F\E1r1l cl\7F\E1r2l dl\7F\E1r3l bl\7F\E1r4l spl\7F\E1r5l bpl\7F\E1r6l sil\7F\E1r7l dil\7F\E1r0h ah\7F\E1r1h ch\7F\E1r2h dh\7F\E1r3h bh\7F\7F", align 16
@.str.1 = private unnamed_addr constant [3 x i8] c"fp\00", align 1
@nasm_usemac_fp = internal constant [351 x i8] c"\E0__?USE_FP?__\7F\DE__USE_FP__ __?USEFP?__\7F\E0Inf __?Infinity?__\7F\E0NaN __?QNaN?__\7F\E0QNaN __?QNaN?__\7F\E0SNaN __?SNaN?__\7F\E0float8(x) __?float8?__(x)\7F\E0float16(x) __?float16?__(x)\7F\E0float32(x) __?float32?__(x)\7F\E0float64(x) __?float64?__(x)\7F\E0float80m(x) __?float80m?__(x)\7F\E0float80e(x) __?float80e?__(x)\7F\E0float128l(x) __?float128l?__(x)\7F\E0float128h(x) __?float128h?__(x)\7F\7F", align 16
@.str.2 = private unnamed_addr constant [6 x i8] c"ifunc\00", align 1
@nasm_usemac_ifunc = internal constant [274 x i8] c"\E0__?USE_IFUNC?__\7F\DE__USE_IFUNC__ __?USEIFUNC?__\7F\E1ilog2(x) (__?ilog2e?__(x))\7F\E1ilog2e(x) (__?ilog2e?__(x))\7F\E1ilog2w(x) (__?ilog2w?__(x))\7F\E1ilog2fw(x) (__?ilog2w?__(x))\7F\E1ilog2f(x) (__?ilog2f?__(x))\7F\E1ilog2cw(x) (__?ilog2w?__(x) * 0 + __?ilog2c?__(x))\7F\E1ilog2c(x) (__?ilog2c?__(x))\7F\7F", align 16
@.str.3 = private unnamed_addr constant [5 x i8] c"masm\00", align 1
@nasm_usemac_masm = internal constant [332 x i8] c"\E0__?USE_MASM?__\7F\DE__USE_MASM__ __?USEMASM?__\7F\F5segment 1+\7F\E7segment 0-1+.nolist\7F\E0__?SECT?__ [segment %00 %1]\7F__?SECT?__\7F\C7\7F\E7ends 0+.nolist\7F\D0ends %00\7F\C7\7F\E7proc 0-*.nolist\7F\D4%0\7F\88%1,far\7F\E1ret retf\7F\C4\7F\E1ret retn\7F\C5\7F\D61\7F\C8\7F\C7\7F\E7endp 0.nolist\7F\D0endp %00\7F\D8ret\7F\C7\7F\E1ptr __?masm_ptr?__\7F\E1flat __?masm_flat?__\7F\E1offset\7F\E7end 0+.nolist\7F\C7\7F\E1tbyte tword\7Fdefault rel\7F\7F", align 16
@.str.4 = private unnamed_addr constant [11 x i8] c"smartalign\00", align 1
@nasm_usemac_smartalign = internal constant [4183 x i8] c"\E0__?USE_SMARTALIGN?__\7F\DE__USE_SMARTALIGN__ __?USESMARTALIGN?__\7F\E7alignmode 1-2.nolist\7F\88%1,nop\7F\E0__?ALIGN_JMP_THRESHOLD?__ 16\7F\E0__?ALIGN_16BIT_1B?__ 0x90\7F\E0__?ALIGN_16BIT_GROUP?__ 1\7F\E0__?ALIGN_32BIT_1B?__ 0x90\7F\E0__?ALIGN_32BIT_GROUP?__ 1\7F\E0__?ALIGN_64BIT_1B?__ 0x90\7F\E0__?ALIGN_64BIT_GROUP?__ 1\7F\A8%1,generic\7F\E0__?ALIGN_JMP_THRESHOLD?__ 8\7F\E0__?ALIGN_16BIT_1B?__ 0x90\7F\E0__?ALIGN_16BIT_2B?__ 0x89,0xf6\7F\E0__?ALIGN_16BIT_3B?__ 0x8d,0x74,0x00\7F\E0__?ALIGN_16BIT_4B?__ 0x8d,0xb4,0x00,0x00\7F\E0__?ALIGN_16BIT_5B?__ 0x8d,0xb4,0x00,0x00,0x90\7F\E0__?ALIGN_16BIT_6B?__ 0x8d,0xb4,0x00,0x00,0x89,0xff\7F\E0__?ALIGN_16BIT_7B?__ 0x8d,0xb4,0x00,0x00,0x8d,0x7d,0x00\7F\E0__?ALIGN_16BIT_8B?__ 0x8d,0xb4,0x00,0x00,0x8d,0xbd,0x00,0x00\7F\E0__?ALIGN_16BIT_GROUP?__ 8\7F\E0__?ALIGN_32BIT_1B?__ 0x90\7F\E0__?ALIGN_32BIT_2B?__ 0x89,0xf6\7F\E0__?ALIGN_32BIT_3B?__ 0x8d,0x76,0x00\7F\E0__?ALIGN_32BIT_4B?__ 0x8d,0x74,0x26,0x00\7F\E0__?ALIGN_32BIT_5B?__ 0x90,0x8d,0x74,0x26,0x00\7F\E0__?ALIGN_32BIT_6B?__ 0x8d,0xb6,0x00,0x00,0x00,0x00\7F\E0__?ALIGN_32BIT_7B?__ 0x8d,0xb4,0x26,0x00,0x00,0x00,0x00\7F\E0__?ALIGN_32BIT_GROUP?__ 7\7F\E0__?ALIGN_64BIT_1B?__ 0x90\7F\E0__?ALIGN_64BIT_2B?__ 0x66,0x90\7F\E0__?ALIGN_64BIT_3B?__ 0x66,0x66,0x90\7F\E0__?ALIGN_64BIT_4B?__ 0x66,0x66,0x66,0x90\7F\E0__?ALIGN_64BIT_GROUP?__ 4\7F\A8%1,k8\7F\E0__?ALIGN_JMP_THRESHOLD?__ 16\7F\E0__?ALIGN_16BIT_1B?__ 0x90\7F\E0__?ALIGN_16BIT_2B?__ 0x66,0x90\7F\E0__?ALIGN_16BIT_3B?__ 0x66,0x66,0x90\7F\E0__?ALIGN_16BIT_4B?__ 0x66,0x66,0x66,0x90\7F\E0__?ALIGN_16BIT_GROUP?__ 4\7F\E0__?ALIGN_32BIT_1B?__ 0x90\7F\E0__?ALIGN_32BIT_2B?__ 0x66,0x90\7F\E0__?ALIGN_32BIT_3B?__ 0x66,0x66,0x90\7F\E0__?ALIGN_32BIT_4B?__ 0x66,0x66,0x66,0x90\7F\E0__?ALIGN_32BIT_GROUP?__ 4\7F\E0__?ALIGN_64BIT_1B?__ 0x90\7F\E0__?ALIGN_64BIT_2B?__ 0x66,0x90\7F\E0__?ALIGN_64BIT_3B?__ 0x66,0x66,0x90\7F\E0__?ALIGN_64BIT_4B?__ 0x66,0x66,0x66,0x90\7F\E0__?ALIGN_64BIT_GROUP?__ 4\7F\A8%1,k7\7F\E0__?ALIGN_JMP_THRESHOLD?__ 16\7F\E0__?ALIGN_16BIT_1B?__ 0x90\7F\E0__?ALIGN_16BIT_2B?__ 0x66,0x90\7F\E0__?ALIGN_16BIT_3B?__ 0x66,0x66,0x90\7F\E0__?ALIGN_16BIT_4B?__ 0x66,0x66,0x66,0x90\7F\E0__?ALIGN_64BIT_GROUP?__ 4\7F\E0__?ALIGN_32BIT_1B?__ 0x90\7F\E0__?ALIGN_32BIT_2B?__ 0x8b,0xc0\7F\E0__?ALIGN_32BIT_3B?__ 0x8d,0x04,0x20\7F\E0__?ALIGN_32BIT_4B?__ 0x8d,0x44,0x20,0x00\7F\E0__?ALIGN_32BIT_5B?__ 0x8d,0x44,0x20,0x00,0x90\7F\E0__?ALIGN_32BIT_6B?__ 0x8d,0x80,0x00,0x00,0x00,0x00\7F\E0__?ALIGN_32BIT_7B?__ 0x8d,0x04,0x05,0x00,0x00,0x00,0x00\7F\E0__?ALIGN_32BIT_GROUP?__ 7\7F\E0__?ALIGN_64BIT_1B?__ 0x90\7F\E0__?ALIGN_64BIT_2B?__ 0x66,0x90\7F\E0__?ALIGN_64BIT_3B?__ 0x66,0x66,0x90\7F\E0__?ALIGN_64BIT_4B?__ 0x66,0x66,0x66,0x90\7F\E0__?ALIGN_64BIT_GROUP?__ 4\7F\A8%1,p6\7F\E0__?ALIGN_JMP_THRESHOLD?__ 16\7F\E0__?ALIGN_16BIT_1B?__ 0x90\7F\E0__?ALIGN_16BIT_2B?__ 0x66,0x90\7F\E0__?ALIGN_16BIT_3B?__ 0x0f,0x1f,0x00\7F\E0__?ALIGN_16BIT_4B?__ 0x0f,0x1f,0x40,0x00\7F\E0__?ALIGN_16BIT_GROUP?__ 4\7F\E0__?ALIGN_32BIT_1B?__ 0x90\7F\E0__?ALIGN_32BIT_2B?__ 0x66,0x90\7F\E0__?ALIGN_32BIT_3B?__ 0x0f,0x1f,0x00\7F\E0__?ALIGN_32BIT_4B?__ 0x0f,0x1f,0x40,0x00\7F\E0__?ALIGN_32BIT_5B?__ 0x0f,0x1f,0x44,0x00,0x00\7F\E0__?ALIGN_32BIT_6B?__ 0x66,0x0f,0x1f,0x44,0x00,0x00\7F\E0__?ALIGN_32BIT_7B?__ 0x0f,0x1f,0x80,0x00,0x00,0x00,0x00\7F\E0__?ALIGN_32BIT_8B?__ 0x0f,0x1f,0x84,0x00,0x00,0x00,0x00,0x00\7F\E0__?ALIGN_32BIT_GROUP?__ 8\7F\E0__?ALIGN_64BIT_1B?__ 0x90\7F\E0__?ALIGN_64BIT_2B?__ 0x66,0x90\7F\E0__?ALIGN_64BIT_3B?__ 0x0f,0x1f,0x00\7F\E0__?ALIGN_64BIT_4B?__ 0x0f,0x1f,0x40,0x00\7F\E0__?ALIGN_64BIT_5B?__ 0x0f,0x1f,0x44,0x00,0x00\7F\E0__?ALIGN_64BIT_6B?__ 0x66,0x0f,0x1f,0x44,0x00,0x00\7F\E0__?ALIGN_64BIT_7B?__ 0x0f,0x1f,0x80,0x00,0x00,0x00,0x00\7F\E0__?ALIGN_64BIT_8B?__ 0x0f,0x1f,0x84,0x00,0x00,0x00,0x00,0x00\7F\E0__?ALIGN_64BIT_GROUP?__ 8\7F\C4\7F\C9unknown alignment mode: %1\7F\C5\7F\94%2\7F\88%2,nojmp\7F\F2__?ALIGN_JMP_THRESHOLD?__ -1\7F\C4\7F\F2__?ALIGN_JMP_THRESHOLD?__ %2\7F\C5\7F\C5\7F\F2__?ALIGNMODE?__ %1,__?ALIGN_JMP_THRESHOLD?__\7F\C7\7F\DE__ALIGNMODE__ __?ALIGNMODE?__\7F\F5align 1-2+.nolist\7F\E7align 1-2+.nolist\7Fsectalign %1\7F\94%2\7Ftimes (((%1) - (($-$$) % (%1))) % (%1)) %2\7F\A0__?PASS?__ == 0 || __?PASS?__ == 3\7Ftimes (((%1) - (($-$$) % (%1))) % (%1)) nop\7F\C4\7F\D3\7F\DC%$pad (((%1) - (($-$$) % (%1))) % (%1))\7F\80__?ALIGN_JMP_THRESHOLD?__ != -1 && %$pad > __?ALIGN_JMP_THRESHOLD?__\7Fjmp %$end\7Ftimes (((%1) - (($-$$) % (%1))) % (%1)) nop\7F\C4\7Ftimes (%$pad / __?ALIGN_%[__?BITS?__]BIT_GROUP?__) db __?ALIGN_%[__?BITS?__]BIT_%[__?ALIGN_%[__?BITS?__]BIT_GROUP?__]B?__\7F\DC%$pad %$pad % __?ALIGN_%[__?BITS?__]BIT_GROUP?__\7F\80%$pad > 0\7Fdb __?ALIGN_%[__?BITS?__]BIT_%[%$pad]B?__\7F\C5\7F\C5\7F%$end:\7F\D1\7F\C5\7F\C7\7Falignmode generic\7F\7F", align 16
@nasm_find_use_package.hash1 = internal unnamed_addr constant [4 x i16] [i16 0, i16 0, i16 3, i16 -1], align 2
@nasm_find_use_package.hash2 = internal unnamed_addr constant [4 x i16] [i16 1, i16 2, i16 0, i16 21845], align 2

; Function Attrs: nounwind ssp uwtable
define hidden %struct.use_package* @nasm_find_use_package(i8*) local_unnamed_addr #0 {
  %2 = tail call i64 @crc64i(i64 532086403837837932, i8* %0) #3
  %3 = lshr i64 %2, 32
  %4 = and i64 %2, 3
  %5 = getelementptr inbounds [4 x i16], [4 x i16]* @nasm_find_use_package.hash1, i64 0, i64 %4
  %6 = load i16, i16* %5, align 2
  %7 = and i64 %3, 3
  %8 = getelementptr inbounds [4 x i16], [4 x i16]* @nasm_find_use_package.hash2, i64 0, i64 %7
  %9 = load i16, i16* %8, align 2
  %10 = add i16 %9, %6
  %11 = icmp ugt i16 %10, 4
  br i1 %11, label %20, label %12

12:                                               ; preds = %1
  %13 = zext i16 %10 to i64
  %14 = getelementptr inbounds [5 x %struct.use_package], [5 x %struct.use_package]* @nasm_find_use_package.packages, i64 0, i64 %13
  %15 = getelementptr inbounds %struct.use_package, %struct.use_package* %14, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  %17 = tail call i32 @strcasecmp(i8* %16, i8* %0) #4
  %18 = icmp eq i32 %17, 0
  %19 = select i1 %18, %struct.use_package* %14, %struct.use_package* null
  br label %20

20:                                               ; preds = %12, %1
  %21 = phi %struct.use_package* [ null, %1 ], [ %19, %12 ]
  ret %struct.use_package* %21
}

declare i64 @crc64i(i64, i8*) local_unnamed_addr #1

; Function Attrs: nofree nounwind readonly
declare i32 @strcasecmp(i8* nocapture, i8* nocapture) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }
attributes #4 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
