; ModuleID = '../../third_party/zlib/infback.c'
source_filename = "../../third_party/zlib/infback.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.code = type { i8, i8, i16 }
%struct.z_stream_s = type { i8*, i32, i64, i8*, i32, i64, i8*, %struct.internal_state*, i8* (i8*, i32, i32)*, void (i8*, i8*)*, i8*, i32, i64, i64 }
%struct.internal_state = type opaque
%struct.inflate_state = type { %struct.z_stream_s*, i32, i32, i32, i32, i32, i32, i64, i64, %struct.Cr_z_gz_header_s*, i32, i32, i32, i32, i8*, i64, i32, i32, i32, i32, %struct.code*, %struct.code*, i32, i32, i32, i32, i32, i32, %struct.code*, [320 x i16], [288 x i16], [1444 x %struct.code], i32, i32, i32 }
%struct.Cr_z_gz_header_s = type { i32, i64, i32, i32, i8*, i32, i32, i8*, i32, i8*, i32, i32, i32 }

@Cr_z_inflateBack.order = internal unnamed_addr constant [19 x i16] [i16 16, i16 17, i16 18, i16 0, i16 8, i16 7, i16 9, i16 6, i16 10, i16 5, i16 11, i16 4, i16 12, i16 3, i16 13, i16 2, i16 14, i16 1, i16 15], align 16
@.str.1 = private unnamed_addr constant [19 x i8] c"invalid block type\00", align 1
@.str.2 = private unnamed_addr constant [29 x i8] c"invalid stored block lengths\00", align 1
@.str.3 = private unnamed_addr constant [36 x i8] c"too many length or distance symbols\00", align 1
@.str.4 = private unnamed_addr constant [25 x i8] c"invalid code lengths set\00", align 1
@.str.5 = private unnamed_addr constant [26 x i8] c"invalid bit length repeat\00", align 1
@.str.6 = private unnamed_addr constant [37 x i8] c"invalid code -- missing end-of-block\00", align 1
@.str.7 = private unnamed_addr constant [28 x i8] c"invalid literal/lengths set\00", align 1
@.str.8 = private unnamed_addr constant [22 x i8] c"invalid distances set\00", align 1
@.str.9 = private unnamed_addr constant [28 x i8] c"invalid literal/length code\00", align 1
@.str.10 = private unnamed_addr constant [22 x i8] c"invalid distance code\00", align 1
@.str.11 = private unnamed_addr constant [30 x i8] c"invalid distance too far back\00", align 1
@fixedtables.lenfix = internal constant [512 x %struct.code] [%struct.code { i8 96, i8 7, i16 0 }, %struct.code { i8 0, i8 8, i16 80 }, %struct.code { i8 0, i8 8, i16 16 }, %struct.code { i8 20, i8 8, i16 115 }, %struct.code { i8 18, i8 7, i16 31 }, %struct.code { i8 0, i8 8, i16 112 }, %struct.code { i8 0, i8 8, i16 48 }, %struct.code { i8 0, i8 9, i16 192 }, %struct.code { i8 16, i8 7, i16 10 }, %struct.code { i8 0, i8 8, i16 96 }, %struct.code { i8 0, i8 8, i16 32 }, %struct.code { i8 0, i8 9, i16 160 }, %struct.code { i8 0, i8 8, i16 0 }, %struct.code { i8 0, i8 8, i16 128 }, %struct.code { i8 0, i8 8, i16 64 }, %struct.code { i8 0, i8 9, i16 224 }, %struct.code { i8 16, i8 7, i16 6 }, %struct.code { i8 0, i8 8, i16 88 }, %struct.code { i8 0, i8 8, i16 24 }, %struct.code { i8 0, i8 9, i16 144 }, %struct.code { i8 19, i8 7, i16 59 }, %struct.code { i8 0, i8 8, i16 120 }, %struct.code { i8 0, i8 8, i16 56 }, %struct.code { i8 0, i8 9, i16 208 }, %struct.code { i8 17, i8 7, i16 17 }, %struct.code { i8 0, i8 8, i16 104 }, %struct.code { i8 0, i8 8, i16 40 }, %struct.code { i8 0, i8 9, i16 176 }, %struct.code { i8 0, i8 8, i16 8 }, %struct.code { i8 0, i8 8, i16 136 }, %struct.code { i8 0, i8 8, i16 72 }, %struct.code { i8 0, i8 9, i16 240 }, %struct.code { i8 16, i8 7, i16 4 }, %struct.code { i8 0, i8 8, i16 84 }, %struct.code { i8 0, i8 8, i16 20 }, %struct.code { i8 21, i8 8, i16 227 }, %struct.code { i8 19, i8 7, i16 43 }, %struct.code { i8 0, i8 8, i16 116 }, %struct.code { i8 0, i8 8, i16 52 }, %struct.code { i8 0, i8 9, i16 200 }, %struct.code { i8 17, i8 7, i16 13 }, %struct.code { i8 0, i8 8, i16 100 }, %struct.code { i8 0, i8 8, i16 36 }, %struct.code { i8 0, i8 9, i16 168 }, %struct.code { i8 0, i8 8, i16 4 }, %struct.code { i8 0, i8 8, i16 132 }, %struct.code { i8 0, i8 8, i16 68 }, %struct.code { i8 0, i8 9, i16 232 }, %struct.code { i8 16, i8 7, i16 8 }, %struct.code { i8 0, i8 8, i16 92 }, %struct.code { i8 0, i8 8, i16 28 }, %struct.code { i8 0, i8 9, i16 152 }, %struct.code { i8 20, i8 7, i16 83 }, %struct.code { i8 0, i8 8, i16 124 }, %struct.code { i8 0, i8 8, i16 60 }, %struct.code { i8 0, i8 9, i16 216 }, %struct.code { i8 18, i8 7, i16 23 }, %struct.code { i8 0, i8 8, i16 108 }, %struct.code { i8 0, i8 8, i16 44 }, %struct.code { i8 0, i8 9, i16 184 }, %struct.code { i8 0, i8 8, i16 12 }, %struct.code { i8 0, i8 8, i16 140 }, %struct.code { i8 0, i8 8, i16 76 }, %struct.code { i8 0, i8 9, i16 248 }, %struct.code { i8 16, i8 7, i16 3 }, %struct.code { i8 0, i8 8, i16 82 }, %struct.code { i8 0, i8 8, i16 18 }, %struct.code { i8 21, i8 8, i16 163 }, %struct.code { i8 19, i8 7, i16 35 }, %struct.code { i8 0, i8 8, i16 114 }, %struct.code { i8 0, i8 8, i16 50 }, %struct.code { i8 0, i8 9, i16 196 }, %struct.code { i8 17, i8 7, i16 11 }, %struct.code { i8 0, i8 8, i16 98 }, %struct.code { i8 0, i8 8, i16 34 }, %struct.code { i8 0, i8 9, i16 164 }, %struct.code { i8 0, i8 8, i16 2 }, %struct.code { i8 0, i8 8, i16 130 }, %struct.code { i8 0, i8 8, i16 66 }, %struct.code { i8 0, i8 9, i16 228 }, %struct.code { i8 16, i8 7, i16 7 }, %struct.code { i8 0, i8 8, i16 90 }, %struct.code { i8 0, i8 8, i16 26 }, %struct.code { i8 0, i8 9, i16 148 }, %struct.code { i8 20, i8 7, i16 67 }, %struct.code { i8 0, i8 8, i16 122 }, %struct.code { i8 0, i8 8, i16 58 }, %struct.code { i8 0, i8 9, i16 212 }, %struct.code { i8 18, i8 7, i16 19 }, %struct.code { i8 0, i8 8, i16 106 }, %struct.code { i8 0, i8 8, i16 42 }, %struct.code { i8 0, i8 9, i16 180 }, %struct.code { i8 0, i8 8, i16 10 }, %struct.code { i8 0, i8 8, i16 138 }, %struct.code { i8 0, i8 8, i16 74 }, %struct.code { i8 0, i8 9, i16 244 }, %struct.code { i8 16, i8 7, i16 5 }, %struct.code { i8 0, i8 8, i16 86 }, %struct.code { i8 0, i8 8, i16 22 }, %struct.code { i8 64, i8 8, i16 0 }, %struct.code { i8 19, i8 7, i16 51 }, %struct.code { i8 0, i8 8, i16 118 }, %struct.code { i8 0, i8 8, i16 54 }, %struct.code { i8 0, i8 9, i16 204 }, %struct.code { i8 17, i8 7, i16 15 }, %struct.code { i8 0, i8 8, i16 102 }, %struct.code { i8 0, i8 8, i16 38 }, %struct.code { i8 0, i8 9, i16 172 }, %struct.code { i8 0, i8 8, i16 6 }, %struct.code { i8 0, i8 8, i16 134 }, %struct.code { i8 0, i8 8, i16 70 }, %struct.code { i8 0, i8 9, i16 236 }, %struct.code { i8 16, i8 7, i16 9 }, %struct.code { i8 0, i8 8, i16 94 }, %struct.code { i8 0, i8 8, i16 30 }, %struct.code { i8 0, i8 9, i16 156 }, %struct.code { i8 20, i8 7, i16 99 }, %struct.code { i8 0, i8 8, i16 126 }, %struct.code { i8 0, i8 8, i16 62 }, %struct.code { i8 0, i8 9, i16 220 }, %struct.code { i8 18, i8 7, i16 27 }, %struct.code { i8 0, i8 8, i16 110 }, %struct.code { i8 0, i8 8, i16 46 }, %struct.code { i8 0, i8 9, i16 188 }, %struct.code { i8 0, i8 8, i16 14 }, %struct.code { i8 0, i8 8, i16 142 }, %struct.code { i8 0, i8 8, i16 78 }, %struct.code { i8 0, i8 9, i16 252 }, %struct.code { i8 96, i8 7, i16 0 }, %struct.code { i8 0, i8 8, i16 81 }, %struct.code { i8 0, i8 8, i16 17 }, %struct.code { i8 21, i8 8, i16 131 }, %struct.code { i8 18, i8 7, i16 31 }, %struct.code { i8 0, i8 8, i16 113 }, %struct.code { i8 0, i8 8, i16 49 }, %struct.code { i8 0, i8 9, i16 194 }, %struct.code { i8 16, i8 7, i16 10 }, %struct.code { i8 0, i8 8, i16 97 }, %struct.code { i8 0, i8 8, i16 33 }, %struct.code { i8 0, i8 9, i16 162 }, %struct.code { i8 0, i8 8, i16 1 }, %struct.code { i8 0, i8 8, i16 129 }, %struct.code { i8 0, i8 8, i16 65 }, %struct.code { i8 0, i8 9, i16 226 }, %struct.code { i8 16, i8 7, i16 6 }, %struct.code { i8 0, i8 8, i16 89 }, %struct.code { i8 0, i8 8, i16 25 }, %struct.code { i8 0, i8 9, i16 146 }, %struct.code { i8 19, i8 7, i16 59 }, %struct.code { i8 0, i8 8, i16 121 }, %struct.code { i8 0, i8 8, i16 57 }, %struct.code { i8 0, i8 9, i16 210 }, %struct.code { i8 17, i8 7, i16 17 }, %struct.code { i8 0, i8 8, i16 105 }, %struct.code { i8 0, i8 8, i16 41 }, %struct.code { i8 0, i8 9, i16 178 }, %struct.code { i8 0, i8 8, i16 9 }, %struct.code { i8 0, i8 8, i16 137 }, %struct.code { i8 0, i8 8, i16 73 }, %struct.code { i8 0, i8 9, i16 242 }, %struct.code { i8 16, i8 7, i16 4 }, %struct.code { i8 0, i8 8, i16 85 }, %struct.code { i8 0, i8 8, i16 21 }, %struct.code { i8 16, i8 8, i16 258 }, %struct.code { i8 19, i8 7, i16 43 }, %struct.code { i8 0, i8 8, i16 117 }, %struct.code { i8 0, i8 8, i16 53 }, %struct.code { i8 0, i8 9, i16 202 }, %struct.code { i8 17, i8 7, i16 13 }, %struct.code { i8 0, i8 8, i16 101 }, %struct.code { i8 0, i8 8, i16 37 }, %struct.code { i8 0, i8 9, i16 170 }, %struct.code { i8 0, i8 8, i16 5 }, %struct.code { i8 0, i8 8, i16 133 }, %struct.code { i8 0, i8 8, i16 69 }, %struct.code { i8 0, i8 9, i16 234 }, %struct.code { i8 16, i8 7, i16 8 }, %struct.code { i8 0, i8 8, i16 93 }, %struct.code { i8 0, i8 8, i16 29 }, %struct.code { i8 0, i8 9, i16 154 }, %struct.code { i8 20, i8 7, i16 83 }, %struct.code { i8 0, i8 8, i16 125 }, %struct.code { i8 0, i8 8, i16 61 }, %struct.code { i8 0, i8 9, i16 218 }, %struct.code { i8 18, i8 7, i16 23 }, %struct.code { i8 0, i8 8, i16 109 }, %struct.code { i8 0, i8 8, i16 45 }, %struct.code { i8 0, i8 9, i16 186 }, %struct.code { i8 0, i8 8, i16 13 }, %struct.code { i8 0, i8 8, i16 141 }, %struct.code { i8 0, i8 8, i16 77 }, %struct.code { i8 0, i8 9, i16 250 }, %struct.code { i8 16, i8 7, i16 3 }, %struct.code { i8 0, i8 8, i16 83 }, %struct.code { i8 0, i8 8, i16 19 }, %struct.code { i8 21, i8 8, i16 195 }, %struct.code { i8 19, i8 7, i16 35 }, %struct.code { i8 0, i8 8, i16 115 }, %struct.code { i8 0, i8 8, i16 51 }, %struct.code { i8 0, i8 9, i16 198 }, %struct.code { i8 17, i8 7, i16 11 }, %struct.code { i8 0, i8 8, i16 99 }, %struct.code { i8 0, i8 8, i16 35 }, %struct.code { i8 0, i8 9, i16 166 }, %struct.code { i8 0, i8 8, i16 3 }, %struct.code { i8 0, i8 8, i16 131 }, %struct.code { i8 0, i8 8, i16 67 }, %struct.code { i8 0, i8 9, i16 230 }, %struct.code { i8 16, i8 7, i16 7 }, %struct.code { i8 0, i8 8, i16 91 }, %struct.code { i8 0, i8 8, i16 27 }, %struct.code { i8 0, i8 9, i16 150 }, %struct.code { i8 20, i8 7, i16 67 }, %struct.code { i8 0, i8 8, i16 123 }, %struct.code { i8 0, i8 8, i16 59 }, %struct.code { i8 0, i8 9, i16 214 }, %struct.code { i8 18, i8 7, i16 19 }, %struct.code { i8 0, i8 8, i16 107 }, %struct.code { i8 0, i8 8, i16 43 }, %struct.code { i8 0, i8 9, i16 182 }, %struct.code { i8 0, i8 8, i16 11 }, %struct.code { i8 0, i8 8, i16 139 }, %struct.code { i8 0, i8 8, i16 75 }, %struct.code { i8 0, i8 9, i16 246 }, %struct.code { i8 16, i8 7, i16 5 }, %struct.code { i8 0, i8 8, i16 87 }, %struct.code { i8 0, i8 8, i16 23 }, %struct.code { i8 64, i8 8, i16 0 }, %struct.code { i8 19, i8 7, i16 51 }, %struct.code { i8 0, i8 8, i16 119 }, %struct.code { i8 0, i8 8, i16 55 }, %struct.code { i8 0, i8 9, i16 206 }, %struct.code { i8 17, i8 7, i16 15 }, %struct.code { i8 0, i8 8, i16 103 }, %struct.code { i8 0, i8 8, i16 39 }, %struct.code { i8 0, i8 9, i16 174 }, %struct.code { i8 0, i8 8, i16 7 }, %struct.code { i8 0, i8 8, i16 135 }, %struct.code { i8 0, i8 8, i16 71 }, %struct.code { i8 0, i8 9, i16 238 }, %struct.code { i8 16, i8 7, i16 9 }, %struct.code { i8 0, i8 8, i16 95 }, %struct.code { i8 0, i8 8, i16 31 }, %struct.code { i8 0, i8 9, i16 158 }, %struct.code { i8 20, i8 7, i16 99 }, %struct.code { i8 0, i8 8, i16 127 }, %struct.code { i8 0, i8 8, i16 63 }, %struct.code { i8 0, i8 9, i16 222 }, %struct.code { i8 18, i8 7, i16 27 }, %struct.code { i8 0, i8 8, i16 111 }, %struct.code { i8 0, i8 8, i16 47 }, %struct.code { i8 0, i8 9, i16 190 }, %struct.code { i8 0, i8 8, i16 15 }, %struct.code { i8 0, i8 8, i16 143 }, %struct.code { i8 0, i8 8, i16 79 }, %struct.code { i8 0, i8 9, i16 254 }, %struct.code { i8 96, i8 7, i16 0 }, %struct.code { i8 0, i8 8, i16 80 }, %struct.code { i8 0, i8 8, i16 16 }, %struct.code { i8 20, i8 8, i16 115 }, %struct.code { i8 18, i8 7, i16 31 }, %struct.code { i8 0, i8 8, i16 112 }, %struct.code { i8 0, i8 8, i16 48 }, %struct.code { i8 0, i8 9, i16 193 }, %struct.code { i8 16, i8 7, i16 10 }, %struct.code { i8 0, i8 8, i16 96 }, %struct.code { i8 0, i8 8, i16 32 }, %struct.code { i8 0, i8 9, i16 161 }, %struct.code { i8 0, i8 8, i16 0 }, %struct.code { i8 0, i8 8, i16 128 }, %struct.code { i8 0, i8 8, i16 64 }, %struct.code { i8 0, i8 9, i16 225 }, %struct.code { i8 16, i8 7, i16 6 }, %struct.code { i8 0, i8 8, i16 88 }, %struct.code { i8 0, i8 8, i16 24 }, %struct.code { i8 0, i8 9, i16 145 }, %struct.code { i8 19, i8 7, i16 59 }, %struct.code { i8 0, i8 8, i16 120 }, %struct.code { i8 0, i8 8, i16 56 }, %struct.code { i8 0, i8 9, i16 209 }, %struct.code { i8 17, i8 7, i16 17 }, %struct.code { i8 0, i8 8, i16 104 }, %struct.code { i8 0, i8 8, i16 40 }, %struct.code { i8 0, i8 9, i16 177 }, %struct.code { i8 0, i8 8, i16 8 }, %struct.code { i8 0, i8 8, i16 136 }, %struct.code { i8 0, i8 8, i16 72 }, %struct.code { i8 0, i8 9, i16 241 }, %struct.code { i8 16, i8 7, i16 4 }, %struct.code { i8 0, i8 8, i16 84 }, %struct.code { i8 0, i8 8, i16 20 }, %struct.code { i8 21, i8 8, i16 227 }, %struct.code { i8 19, i8 7, i16 43 }, %struct.code { i8 0, i8 8, i16 116 }, %struct.code { i8 0, i8 8, i16 52 }, %struct.code { i8 0, i8 9, i16 201 }, %struct.code { i8 17, i8 7, i16 13 }, %struct.code { i8 0, i8 8, i16 100 }, %struct.code { i8 0, i8 8, i16 36 }, %struct.code { i8 0, i8 9, i16 169 }, %struct.code { i8 0, i8 8, i16 4 }, %struct.code { i8 0, i8 8, i16 132 }, %struct.code { i8 0, i8 8, i16 68 }, %struct.code { i8 0, i8 9, i16 233 }, %struct.code { i8 16, i8 7, i16 8 }, %struct.code { i8 0, i8 8, i16 92 }, %struct.code { i8 0, i8 8, i16 28 }, %struct.code { i8 0, i8 9, i16 153 }, %struct.code { i8 20, i8 7, i16 83 }, %struct.code { i8 0, i8 8, i16 124 }, %struct.code { i8 0, i8 8, i16 60 }, %struct.code { i8 0, i8 9, i16 217 }, %struct.code { i8 18, i8 7, i16 23 }, %struct.code { i8 0, i8 8, i16 108 }, %struct.code { i8 0, i8 8, i16 44 }, %struct.code { i8 0, i8 9, i16 185 }, %struct.code { i8 0, i8 8, i16 12 }, %struct.code { i8 0, i8 8, i16 140 }, %struct.code { i8 0, i8 8, i16 76 }, %struct.code { i8 0, i8 9, i16 249 }, %struct.code { i8 16, i8 7, i16 3 }, %struct.code { i8 0, i8 8, i16 82 }, %struct.code { i8 0, i8 8, i16 18 }, %struct.code { i8 21, i8 8, i16 163 }, %struct.code { i8 19, i8 7, i16 35 }, %struct.code { i8 0, i8 8, i16 114 }, %struct.code { i8 0, i8 8, i16 50 }, %struct.code { i8 0, i8 9, i16 197 }, %struct.code { i8 17, i8 7, i16 11 }, %struct.code { i8 0, i8 8, i16 98 }, %struct.code { i8 0, i8 8, i16 34 }, %struct.code { i8 0, i8 9, i16 165 }, %struct.code { i8 0, i8 8, i16 2 }, %struct.code { i8 0, i8 8, i16 130 }, %struct.code { i8 0, i8 8, i16 66 }, %struct.code { i8 0, i8 9, i16 229 }, %struct.code { i8 16, i8 7, i16 7 }, %struct.code { i8 0, i8 8, i16 90 }, %struct.code { i8 0, i8 8, i16 26 }, %struct.code { i8 0, i8 9, i16 149 }, %struct.code { i8 20, i8 7, i16 67 }, %struct.code { i8 0, i8 8, i16 122 }, %struct.code { i8 0, i8 8, i16 58 }, %struct.code { i8 0, i8 9, i16 213 }, %struct.code { i8 18, i8 7, i16 19 }, %struct.code { i8 0, i8 8, i16 106 }, %struct.code { i8 0, i8 8, i16 42 }, %struct.code { i8 0, i8 9, i16 181 }, %struct.code { i8 0, i8 8, i16 10 }, %struct.code { i8 0, i8 8, i16 138 }, %struct.code { i8 0, i8 8, i16 74 }, %struct.code { i8 0, i8 9, i16 245 }, %struct.code { i8 16, i8 7, i16 5 }, %struct.code { i8 0, i8 8, i16 86 }, %struct.code { i8 0, i8 8, i16 22 }, %struct.code { i8 64, i8 8, i16 0 }, %struct.code { i8 19, i8 7, i16 51 }, %struct.code { i8 0, i8 8, i16 118 }, %struct.code { i8 0, i8 8, i16 54 }, %struct.code { i8 0, i8 9, i16 205 }, %struct.code { i8 17, i8 7, i16 15 }, %struct.code { i8 0, i8 8, i16 102 }, %struct.code { i8 0, i8 8, i16 38 }, %struct.code { i8 0, i8 9, i16 173 }, %struct.code { i8 0, i8 8, i16 6 }, %struct.code { i8 0, i8 8, i16 134 }, %struct.code { i8 0, i8 8, i16 70 }, %struct.code { i8 0, i8 9, i16 237 }, %struct.code { i8 16, i8 7, i16 9 }, %struct.code { i8 0, i8 8, i16 94 }, %struct.code { i8 0, i8 8, i16 30 }, %struct.code { i8 0, i8 9, i16 157 }, %struct.code { i8 20, i8 7, i16 99 }, %struct.code { i8 0, i8 8, i16 126 }, %struct.code { i8 0, i8 8, i16 62 }, %struct.code { i8 0, i8 9, i16 221 }, %struct.code { i8 18, i8 7, i16 27 }, %struct.code { i8 0, i8 8, i16 110 }, %struct.code { i8 0, i8 8, i16 46 }, %struct.code { i8 0, i8 9, i16 189 }, %struct.code { i8 0, i8 8, i16 14 }, %struct.code { i8 0, i8 8, i16 142 }, %struct.code { i8 0, i8 8, i16 78 }, %struct.code { i8 0, i8 9, i16 253 }, %struct.code { i8 96, i8 7, i16 0 }, %struct.code { i8 0, i8 8, i16 81 }, %struct.code { i8 0, i8 8, i16 17 }, %struct.code { i8 21, i8 8, i16 131 }, %struct.code { i8 18, i8 7, i16 31 }, %struct.code { i8 0, i8 8, i16 113 }, %struct.code { i8 0, i8 8, i16 49 }, %struct.code { i8 0, i8 9, i16 195 }, %struct.code { i8 16, i8 7, i16 10 }, %struct.code { i8 0, i8 8, i16 97 }, %struct.code { i8 0, i8 8, i16 33 }, %struct.code { i8 0, i8 9, i16 163 }, %struct.code { i8 0, i8 8, i16 1 }, %struct.code { i8 0, i8 8, i16 129 }, %struct.code { i8 0, i8 8, i16 65 }, %struct.code { i8 0, i8 9, i16 227 }, %struct.code { i8 16, i8 7, i16 6 }, %struct.code { i8 0, i8 8, i16 89 }, %struct.code { i8 0, i8 8, i16 25 }, %struct.code { i8 0, i8 9, i16 147 }, %struct.code { i8 19, i8 7, i16 59 }, %struct.code { i8 0, i8 8, i16 121 }, %struct.code { i8 0, i8 8, i16 57 }, %struct.code { i8 0, i8 9, i16 211 }, %struct.code { i8 17, i8 7, i16 17 }, %struct.code { i8 0, i8 8, i16 105 }, %struct.code { i8 0, i8 8, i16 41 }, %struct.code { i8 0, i8 9, i16 179 }, %struct.code { i8 0, i8 8, i16 9 }, %struct.code { i8 0, i8 8, i16 137 }, %struct.code { i8 0, i8 8, i16 73 }, %struct.code { i8 0, i8 9, i16 243 }, %struct.code { i8 16, i8 7, i16 4 }, %struct.code { i8 0, i8 8, i16 85 }, %struct.code { i8 0, i8 8, i16 21 }, %struct.code { i8 16, i8 8, i16 258 }, %struct.code { i8 19, i8 7, i16 43 }, %struct.code { i8 0, i8 8, i16 117 }, %struct.code { i8 0, i8 8, i16 53 }, %struct.code { i8 0, i8 9, i16 203 }, %struct.code { i8 17, i8 7, i16 13 }, %struct.code { i8 0, i8 8, i16 101 }, %struct.code { i8 0, i8 8, i16 37 }, %struct.code { i8 0, i8 9, i16 171 }, %struct.code { i8 0, i8 8, i16 5 }, %struct.code { i8 0, i8 8, i16 133 }, %struct.code { i8 0, i8 8, i16 69 }, %struct.code { i8 0, i8 9, i16 235 }, %struct.code { i8 16, i8 7, i16 8 }, %struct.code { i8 0, i8 8, i16 93 }, %struct.code { i8 0, i8 8, i16 29 }, %struct.code { i8 0, i8 9, i16 155 }, %struct.code { i8 20, i8 7, i16 83 }, %struct.code { i8 0, i8 8, i16 125 }, %struct.code { i8 0, i8 8, i16 61 }, %struct.code { i8 0, i8 9, i16 219 }, %struct.code { i8 18, i8 7, i16 23 }, %struct.code { i8 0, i8 8, i16 109 }, %struct.code { i8 0, i8 8, i16 45 }, %struct.code { i8 0, i8 9, i16 187 }, %struct.code { i8 0, i8 8, i16 13 }, %struct.code { i8 0, i8 8, i16 141 }, %struct.code { i8 0, i8 8, i16 77 }, %struct.code { i8 0, i8 9, i16 251 }, %struct.code { i8 16, i8 7, i16 3 }, %struct.code { i8 0, i8 8, i16 83 }, %struct.code { i8 0, i8 8, i16 19 }, %struct.code { i8 21, i8 8, i16 195 }, %struct.code { i8 19, i8 7, i16 35 }, %struct.code { i8 0, i8 8, i16 115 }, %struct.code { i8 0, i8 8, i16 51 }, %struct.code { i8 0, i8 9, i16 199 }, %struct.code { i8 17, i8 7, i16 11 }, %struct.code { i8 0, i8 8, i16 99 }, %struct.code { i8 0, i8 8, i16 35 }, %struct.code { i8 0, i8 9, i16 167 }, %struct.code { i8 0, i8 8, i16 3 }, %struct.code { i8 0, i8 8, i16 131 }, %struct.code { i8 0, i8 8, i16 67 }, %struct.code { i8 0, i8 9, i16 231 }, %struct.code { i8 16, i8 7, i16 7 }, %struct.code { i8 0, i8 8, i16 91 }, %struct.code { i8 0, i8 8, i16 27 }, %struct.code { i8 0, i8 9, i16 151 }, %struct.code { i8 20, i8 7, i16 67 }, %struct.code { i8 0, i8 8, i16 123 }, %struct.code { i8 0, i8 8, i16 59 }, %struct.code { i8 0, i8 9, i16 215 }, %struct.code { i8 18, i8 7, i16 19 }, %struct.code { i8 0, i8 8, i16 107 }, %struct.code { i8 0, i8 8, i16 43 }, %struct.code { i8 0, i8 9, i16 183 }, %struct.code { i8 0, i8 8, i16 11 }, %struct.code { i8 0, i8 8, i16 139 }, %struct.code { i8 0, i8 8, i16 75 }, %struct.code { i8 0, i8 9, i16 247 }, %struct.code { i8 16, i8 7, i16 5 }, %struct.code { i8 0, i8 8, i16 87 }, %struct.code { i8 0, i8 8, i16 23 }, %struct.code { i8 64, i8 8, i16 0 }, %struct.code { i8 19, i8 7, i16 51 }, %struct.code { i8 0, i8 8, i16 119 }, %struct.code { i8 0, i8 8, i16 55 }, %struct.code { i8 0, i8 9, i16 207 }, %struct.code { i8 17, i8 7, i16 15 }, %struct.code { i8 0, i8 8, i16 103 }, %struct.code { i8 0, i8 8, i16 39 }, %struct.code { i8 0, i8 9, i16 175 }, %struct.code { i8 0, i8 8, i16 7 }, %struct.code { i8 0, i8 8, i16 135 }, %struct.code { i8 0, i8 8, i16 71 }, %struct.code { i8 0, i8 9, i16 239 }, %struct.code { i8 16, i8 7, i16 9 }, %struct.code { i8 0, i8 8, i16 95 }, %struct.code { i8 0, i8 8, i16 31 }, %struct.code { i8 0, i8 9, i16 159 }, %struct.code { i8 20, i8 7, i16 99 }, %struct.code { i8 0, i8 8, i16 127 }, %struct.code { i8 0, i8 8, i16 63 }, %struct.code { i8 0, i8 9, i16 223 }, %struct.code { i8 18, i8 7, i16 27 }, %struct.code { i8 0, i8 8, i16 111 }, %struct.code { i8 0, i8 8, i16 47 }, %struct.code { i8 0, i8 9, i16 191 }, %struct.code { i8 0, i8 8, i16 15 }, %struct.code { i8 0, i8 8, i16 143 }, %struct.code { i8 0, i8 8, i16 79 }, %struct.code { i8 0, i8 9, i16 255 }], align 16
@fixedtables.distfix = internal constant [32 x %struct.code] [%struct.code { i8 16, i8 5, i16 1 }, %struct.code { i8 23, i8 5, i16 257 }, %struct.code { i8 19, i8 5, i16 17 }, %struct.code { i8 27, i8 5, i16 4097 }, %struct.code { i8 17, i8 5, i16 5 }, %struct.code { i8 25, i8 5, i16 1025 }, %struct.code { i8 21, i8 5, i16 65 }, %struct.code { i8 29, i8 5, i16 16385 }, %struct.code { i8 16, i8 5, i16 3 }, %struct.code { i8 24, i8 5, i16 513 }, %struct.code { i8 20, i8 5, i16 33 }, %struct.code { i8 28, i8 5, i16 8193 }, %struct.code { i8 18, i8 5, i16 9 }, %struct.code { i8 26, i8 5, i16 2049 }, %struct.code { i8 22, i8 5, i16 129 }, %struct.code { i8 64, i8 5, i16 0 }, %struct.code { i8 16, i8 5, i16 2 }, %struct.code { i8 23, i8 5, i16 385 }, %struct.code { i8 19, i8 5, i16 25 }, %struct.code { i8 27, i8 5, i16 6145 }, %struct.code { i8 17, i8 5, i16 7 }, %struct.code { i8 25, i8 5, i16 1537 }, %struct.code { i8 21, i8 5, i16 97 }, %struct.code { i8 29, i8 5, i16 24577 }, %struct.code { i8 16, i8 5, i16 4 }, %struct.code { i8 24, i8 5, i16 769 }, %struct.code { i8 20, i8 5, i16 49 }, %struct.code { i8 28, i8 5, i16 12289 }, %struct.code { i8 18, i8 5, i16 13 }, %struct.code { i8 26, i8 5, i16 3073 }, %struct.code { i8 22, i8 5, i16 193 }, %struct.code { i8 64, i8 5, i16 0 }], align 16

; Function Attrs: nounwind ssp uwtable
define hidden i32 @Cr_z_inflateBackInit_(%struct.z_stream_s*, i32, i8*, i8* readonly, i32) local_unnamed_addr #0 {
  %6 = icmp eq i8* %3, null
  br i1 %6, label %53, label %7

7:                                                ; preds = %5
  %8 = load i8, i8* %3, align 1
  %9 = icmp ne i8 %8, 49
  %10 = icmp ne i32 %4, 112
  %11 = or i1 %10, %9
  br i1 %11, label %53, label %12

12:                                               ; preds = %7
  %13 = icmp eq %struct.z_stream_s* %0, null
  %14 = icmp eq i8* %2, null
  %15 = or i1 %13, %14
  %16 = and i32 %1, -8
  %17 = icmp ne i32 %16, 8
  %18 = or i1 %17, %15
  br i1 %18, label %53, label %19

19:                                               ; preds = %12
  %20 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 6
  store i8* null, i8** %20, align 8
  %21 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 8
  %22 = load i8* (i8*, i32, i32)*, i8* (i8*, i32, i32)** %21, align 8
  %23 = icmp eq i8* (i8*, i32, i32)* %22, null
  br i1 %23, label %24, label %26

24:                                               ; preds = %19
  store i8* (i8*, i32, i32)* @Cr_z_zcalloc, i8* (i8*, i32, i32)** %21, align 8
  %25 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 10
  store i8* null, i8** %25, align 8
  br label %26

26:                                               ; preds = %24, %19
  %27 = phi i8* (i8*, i32, i32)* [ @Cr_z_zcalloc, %24 ], [ %22, %19 ]
  %28 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 9
  %29 = load void (i8*, i8*)*, void (i8*, i8*)** %28, align 8
  %30 = icmp eq void (i8*, i8*)* %29, null
  br i1 %30, label %31, label %32

31:                                               ; preds = %26
  store void (i8*, i8*)* @Cr_z_zcfree, void (i8*, i8*)** %28, align 8
  br label %32

32:                                               ; preds = %31, %26
  %33 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 10
  %34 = load i8*, i8** %33, align 8
  %35 = tail call i8* %27(i8* %34, i32 1, i32 7160) #3
  %36 = icmp eq i8* %35, null
  br i1 %36, label %53, label %37

37:                                               ; preds = %32
  %38 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 7
  %39 = bitcast %struct.internal_state** %38 to i8**
  store i8* %35, i8** %39, align 8
  %40 = getelementptr inbounds i8, i8* %35, i64 28
  %41 = bitcast i8* %40 to i32*
  store i32 32768, i32* %41, align 4
  %42 = getelementptr inbounds i8, i8* %35, i64 56
  %43 = bitcast i8* %42 to i32*
  store i32 %1, i32* %43, align 8
  %44 = shl i32 1, %1
  %45 = getelementptr inbounds i8, i8* %35, i64 60
  %46 = bitcast i8* %45 to i32*
  store i32 %44, i32* %46, align 4
  %47 = getelementptr inbounds i8, i8* %35, i64 72
  %48 = bitcast i8* %47 to i8**
  store i8* %2, i8** %48, align 8
  %49 = getelementptr inbounds i8, i8* %35, i64 68
  %50 = bitcast i8* %49 to i32*
  store i32 0, i32* %50, align 4
  %51 = getelementptr inbounds i8, i8* %35, i64 64
  %52 = bitcast i8* %51 to i32*
  store i32 0, i32* %52, align 8
  br label %53

53:                                               ; preds = %32, %12, %5, %7, %37
  %54 = phi i32 [ 0, %37 ], [ -6, %7 ], [ -6, %5 ], [ -2, %12 ], [ -4, %32 ]
  ret i32 %54
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare i8* @Cr_z_zcalloc(i8*, i32, i32) #2

declare void @Cr_z_zcfree(i8*, i8*) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @Cr_z_inflateBack(%struct.z_stream_s*, i32 (i8*, i8**)* nocapture, i8*, i32 (i8*, i8*, i32)* nocapture, i8*) local_unnamed_addr #0 {
  %6 = alloca i8*, align 8
  %7 = bitcast i8** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #3
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %8 = icmp eq %struct.z_stream_s* %0, null
  br i1 %8, label %1296, label %9

9:                                                ; preds = %5
  %10 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 7
  %11 = load %struct.internal_state*, %struct.internal_state** %10, align 8
  %12 = icmp eq %struct.internal_state* %11, null
  br i1 %12, label %1296, label %13

13:                                               ; preds = %9
  %14 = bitcast %struct.internal_state* %11 to %struct.inflate_state*
  %15 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 6
  store i8* null, i8** %15, align 8
  %16 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %14, i64 0, i32 1
  store i32 16191, i32* %16, align 8
  %17 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %14, i64 0, i32 2
  store i32 0, i32* %17, align 4
  %18 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %14, i64 0, i32 12
  store i32 0, i32* %18, align 8
  %19 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 0
  %20 = load i8*, i8** %19, align 8
  store i8* %20, i8** %6, align 8
  %21 = icmp eq i8* %20, null
  br i1 %21, label %25, label %22

22:                                               ; preds = %13
  %23 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 1
  %24 = load i32, i32* %23, align 8
  br label %25

25:                                               ; preds = %13, %22
  %26 = phi i32 [ %24, %22 ], [ 0, %13 ]
  %27 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %14, i64 0, i32 14
  %28 = load i8*, i8** %27, align 8
  %29 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %14, i64 0, i32 11
  %30 = load i32, i32* %29, align 4
  %31 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %14, i64 0, i32 25
  %32 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %14, i64 0, i32 26
  %33 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %14, i64 0, i32 24
  %34 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %14, i64 0, i32 27
  %35 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %14, i64 0, i32 31, i64 0
  %36 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %14, i64 0, i32 28
  %37 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %14, i64 0, i32 20
  %38 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %14, i64 0, i32 22
  %39 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %14, i64 0, i32 29, i64 0
  %40 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %14, i64 0, i32 30, i64 0
  %41 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %14, i64 0, i32 29, i64 256
  %42 = bitcast %struct.code** %36 to i64*
  %43 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %14, i64 0, i32 21
  %44 = bitcast %struct.code** %43 to i64*
  %45 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %14, i64 0, i32 23
  %46 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %14, i64 0, i32 17
  %47 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %14, i64 0, i32 19
  %48 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %14, i64 0, i32 18
  %49 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 3
  %50 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 4
  %51 = bitcast i8** %6 to i64*
  %52 = bitcast %struct.z_stream_s* %0 to i64*
  %53 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 1
  %54 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %14, i64 0, i32 15
  %55 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %14, i64 0, i32 16
  %56 = bitcast %struct.code** %37 to <2 x %struct.code*>*
  br label %57

57:                                               ; preds = %1282, %25
  %58 = phi i32 [ 16191, %25 ], [ %1288, %1282 ]
  %59 = phi i8* [ %28, %25 ], [ %1283, %1282 ]
  %60 = phi i32 [ %26, %25 ], [ %1284, %1282 ]
  %61 = phi i32 [ %30, %25 ], [ %1285, %1282 ]
  %62 = phi i64 [ 0, %25 ], [ %1286, %1282 ]
  %63 = phi i32 [ 0, %25 ], [ %1287, %1282 ]
  switch i32 %58, label %1292 [
    i32 16191, label %68
    i32 16193, label %112
    i32 16196, label %64
    i32 16200, label %632
    i32 16208, label %1273
    i32 16209, label %1289
  ]

64:                                               ; preds = %57
  %65 = icmp ult i32 %63, 14
  br i1 %65, label %66, label %216

66:                                               ; preds = %64
  %67 = zext i32 %63 to i64
  br label %194

68:                                               ; preds = %57
  %69 = load i32, i32* %17, align 4
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %71, label %76

71:                                               ; preds = %68
  %72 = icmp ult i32 %63, 3
  br i1 %72, label %73, label %95

73:                                               ; preds = %71
  %74 = zext i32 %63 to i64
  %75 = icmp eq i32 %60, 0
  br i1 %75, label %81, label %85

76:                                               ; preds = %68
  %77 = and i32 %63, 7
  %78 = zext i32 %77 to i64
  %79 = lshr i64 %62, %78
  %80 = sub i32 %63, %77
  store i32 16208, i32* %16, align 8
  br label %1282

81:                                               ; preds = %73
  %82 = call i32 %1(i8* %2, i8** nonnull %6) #3
  %83 = icmp eq i32 %82, 0
  br i1 %83, label %84, label %85

84:                                               ; preds = %81
  store i8* null, i8** %6, align 8
  br label %1292

85:                                               ; preds = %81, %73
  %86 = phi i32 [ %82, %81 ], [ %60, %73 ]
  %87 = add i32 %86, -1
  %88 = load i8*, i8** %6, align 8
  %89 = getelementptr inbounds i8, i8* %88, i64 1
  store i8* %89, i8** %6, align 8
  %90 = load i8, i8* %88, align 1
  %91 = zext i8 %90 to i64
  %92 = shl i64 %91, %74
  %93 = add i64 %92, %62
  %94 = add nuw nsw i32 %63, 8
  br label %95

95:                                               ; preds = %85, %71
  %96 = phi i32 [ %60, %71 ], [ %87, %85 ]
  %97 = phi i64 [ %62, %71 ], [ %93, %85 ]
  %98 = phi i32 [ %63, %71 ], [ %94, %85 ]
  %99 = trunc i64 %97 to i32
  %100 = and i32 %99, 1
  store i32 %100, i32* %17, align 4
  %101 = lshr i64 %97, 1
  %102 = trunc i64 %101 to i32
  %103 = and i32 %102, 3
  switch i32 %103, label %107 [
    i32 0, label %108
    i32 1, label %104
    i32 2, label %105
    i32 3, label %106
  ]

104:                                              ; preds = %95
  store i32 9, i32* %38, align 8
  store <2 x %struct.code*> <%struct.code* getelementptr inbounds ([512 x %struct.code], [512 x %struct.code]* @fixedtables.lenfix, i64 0, i64 0), %struct.code* getelementptr inbounds ([32 x %struct.code], [32 x %struct.code]* @fixedtables.distfix, i64 0, i64 0)>, <2 x %struct.code*>* %56, align 8
  store i32 5, i32* %45, align 4
  br label %108

105:                                              ; preds = %95
  br label %108

106:                                              ; preds = %95
  store i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0), i8** %15, align 8
  br label %108

107:                                              ; preds = %95
  unreachable

108:                                              ; preds = %95, %104, %105, %106
  %109 = phi i32 [ 16200, %104 ], [ 16196, %105 ], [ 16209, %106 ], [ 16193, %95 ]
  store i32 %109, i32* %16, align 8
  %110 = lshr i64 %97, 3
  %111 = add i32 %98, -3
  br label %1282

112:                                              ; preds = %57
  %113 = and i32 %63, 7
  %114 = zext i32 %113 to i64
  %115 = lshr i64 %62, %114
  %116 = sub i32 %63, %113
  %117 = icmp ult i32 %116, 32
  br i1 %117, label %118, label %142

118:                                              ; preds = %112
  %119 = zext i32 %116 to i64
  br label %120

120:                                              ; preds = %118, %129
  %121 = phi i64 [ %119, %118 ], [ %138, %129 ]
  %122 = phi i64 [ %115, %118 ], [ %137, %129 ]
  %123 = phi i32 [ %60, %118 ], [ %131, %129 ]
  %124 = icmp eq i32 %123, 0
  br i1 %124, label %125, label %129

125:                                              ; preds = %120
  %126 = call i32 %1(i8* %2, i8** nonnull %6) #3
  %127 = icmp eq i32 %126, 0
  br i1 %127, label %128, label %129

128:                                              ; preds = %125
  store i8* null, i8** %6, align 8
  br label %1292

129:                                              ; preds = %125, %120
  %130 = phi i32 [ %126, %125 ], [ %123, %120 ]
  %131 = add i32 %130, -1
  %132 = load i8*, i8** %6, align 8
  %133 = getelementptr inbounds i8, i8* %132, i64 1
  store i8* %133, i8** %6, align 8
  %134 = load i8, i8* %132, align 1
  %135 = zext i8 %134 to i64
  %136 = shl i64 %135, %121
  %137 = add i64 %136, %122
  %138 = add nuw nsw i64 %121, 8
  %139 = icmp ult i64 %138, 32
  br i1 %139, label %120, label %140

140:                                              ; preds = %129
  %141 = trunc i64 %138 to i32
  br label %142

142:                                              ; preds = %140, %112
  %143 = phi i32 [ %60, %112 ], [ %131, %140 ]
  %144 = phi i64 [ %115, %112 ], [ %137, %140 ]
  %145 = phi i32 [ %116, %112 ], [ %141, %140 ]
  %146 = and i64 %144, 65535
  %147 = lshr i64 %144, 16
  %148 = xor i64 %147, 65535
  %149 = icmp eq i64 %146, %148
  br i1 %149, label %151, label %150

150:                                              ; preds = %142
  store i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.2, i64 0, i64 0), i8** %15, align 8
  store i32 16209, i32* %16, align 8
  br label %1282

151:                                              ; preds = %142
  %152 = trunc i64 %144 to i32
  %153 = and i32 %152, 65535
  store i32 %153, i32* %46, align 4
  %154 = icmp eq i32 %153, 0
  br i1 %154, label %190, label %155

155:                                              ; preds = %151, %173
  %156 = phi i32 [ %185, %173 ], [ %61, %151 ]
  %157 = phi i32 [ %182, %173 ], [ %143, %151 ]
  %158 = phi i8* [ %186, %173 ], [ %59, %151 ]
  %159 = phi i32 [ %188, %173 ], [ %153, %151 ]
  %160 = icmp eq i32 %157, 0
  br i1 %160, label %161, label %165

161:                                              ; preds = %155
  %162 = call i32 %1(i8* %2, i8** nonnull %6) #3
  %163 = icmp eq i32 %162, 0
  br i1 %163, label %164, label %165

164:                                              ; preds = %161
  store i8* null, i8** %6, align 8
  br label %1292

165:                                              ; preds = %155, %161
  %166 = phi i32 [ %162, %161 ], [ %157, %155 ]
  %167 = icmp eq i32 %156, 0
  br i1 %167, label %168, label %173

168:                                              ; preds = %165
  %169 = load i8*, i8** %27, align 8
  %170 = load i32, i32* %29, align 4
  store i32 %170, i32* %18, align 8
  %171 = call i32 %3(i8* %4, i8* %169, i32 %170) #3
  %172 = icmp eq i32 %171, 0
  br i1 %172, label %173, label %1292

173:                                              ; preds = %168, %165
  %174 = phi i8* [ %169, %168 ], [ %158, %165 ]
  %175 = phi i32 [ %170, %168 ], [ %156, %165 ]
  %176 = icmp ugt i32 %159, %166
  %177 = select i1 %176, i32 %166, i32 %159
  %178 = icmp ugt i32 %177, %175
  %179 = select i1 %178, i32 %175, i32 %177
  %180 = load i8*, i8** %6, align 8
  %181 = zext i32 %179 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %174, i8* align 1 %180, i64 %181, i1 false)
  %182 = sub i32 %166, %179
  %183 = load i8*, i8** %6, align 8
  %184 = getelementptr inbounds i8, i8* %183, i64 %181
  store i8* %184, i8** %6, align 8
  %185 = sub i32 %175, %179
  %186 = getelementptr inbounds i8, i8* %174, i64 %181
  %187 = load i32, i32* %46, align 4
  %188 = sub i32 %187, %179
  store i32 %188, i32* %46, align 4
  %189 = icmp eq i32 %188, 0
  br i1 %189, label %190, label %155

190:                                              ; preds = %173, %151
  %191 = phi i8* [ %59, %151 ], [ %186, %173 ]
  %192 = phi i32 [ %143, %151 ], [ %182, %173 ]
  %193 = phi i32 [ %61, %151 ], [ %185, %173 ]
  store i32 16191, i32* %16, align 8
  br label %1282

194:                                              ; preds = %66, %203
  %195 = phi i64 [ %67, %66 ], [ %212, %203 ]
  %196 = phi i64 [ %62, %66 ], [ %211, %203 ]
  %197 = phi i32 [ %60, %66 ], [ %205, %203 ]
  %198 = icmp eq i32 %197, 0
  br i1 %198, label %199, label %203

199:                                              ; preds = %194
  %200 = call i32 %1(i8* %2, i8** nonnull %6) #3
  %201 = icmp eq i32 %200, 0
  br i1 %201, label %202, label %203

202:                                              ; preds = %199
  store i8* null, i8** %6, align 8
  br label %1292

203:                                              ; preds = %199, %194
  %204 = phi i32 [ %200, %199 ], [ %197, %194 ]
  %205 = add i32 %204, -1
  %206 = load i8*, i8** %6, align 8
  %207 = getelementptr inbounds i8, i8* %206, i64 1
  store i8* %207, i8** %6, align 8
  %208 = load i8, i8* %206, align 1
  %209 = zext i8 %208 to i64
  %210 = shl i64 %209, %195
  %211 = add i64 %210, %196
  %212 = add nuw nsw i64 %195, 8
  %213 = icmp ult i64 %212, 14
  br i1 %213, label %194, label %214

214:                                              ; preds = %203
  %215 = trunc i64 %212 to i32
  br label %216

216:                                              ; preds = %214, %64
  %217 = phi i32 [ %60, %64 ], [ %205, %214 ]
  %218 = phi i64 [ %62, %64 ], [ %211, %214 ]
  %219 = phi i32 [ %63, %64 ], [ %215, %214 ]
  %220 = trunc i64 %218 to i32
  %221 = and i32 %220, 31
  %222 = add nuw nsw i32 %221, 257
  store i32 %222, i32* %31, align 4
  %223 = lshr i64 %218, 5
  %224 = trunc i64 %223 to i32
  %225 = and i32 %224, 31
  %226 = add nuw nsw i32 %225, 1
  store i32 %226, i32* %32, align 8
  %227 = lshr i64 %218, 10
  %228 = trunc i64 %227 to i32
  %229 = and i32 %228, 15
  %230 = add nuw nsw i32 %229, 4
  store i32 %230, i32* %33, align 8
  %231 = lshr i64 %218, 14
  %232 = add i32 %219, -14
  %233 = icmp ugt i32 %222, 286
  %234 = icmp ugt i32 %225, 29
  %235 = or i1 %233, %234
  br i1 %235, label %236, label %237

236:                                              ; preds = %216
  store i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.3, i64 0, i64 0), i8** %15, align 8
  store i32 16209, i32* %16, align 8
  br label %1282

237:                                              ; preds = %216
  store i32 0, i32* %34, align 4
  br label %259

238:                                              ; preds = %289
  %239 = icmp ult i32 %298, 19
  br i1 %239, label %240, label %334

240:                                              ; preds = %238
  %241 = sub i32 2, %292
  %242 = sub i32 17, %292
  %243 = and i32 %241, 3
  %244 = icmp eq i32 %243, 0
  br i1 %244, label %256, label %245

245:                                              ; preds = %240, %245
  %246 = phi i32 [ %248, %245 ], [ %298, %240 ]
  %247 = phi i32 [ %254, %245 ], [ %243, %240 ]
  %248 = add nuw nsw i32 %246, 1
  store i32 %248, i32* %34, align 4
  %249 = zext i32 %246 to i64
  %250 = getelementptr inbounds [19 x i16], [19 x i16]* @Cr_z_inflateBack.order, i64 0, i64 %249
  %251 = load i16, i16* %250, align 2
  %252 = zext i16 %251 to i64
  %253 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %14, i64 0, i32 29, i64 %252
  store i16 0, i16* %253, align 2
  %254 = add i32 %247, -1
  %255 = icmp eq i32 %254, 0
  br i1 %255, label %256, label %245, !llvm.loop !2

256:                                              ; preds = %245, %240
  %257 = phi i32 [ %298, %240 ], [ %248, %245 ]
  %258 = icmp ult i32 %242, 3
  br i1 %258, label %334, label %307

259:                                              ; preds = %237, %289
  %260 = phi i32 [ %290, %289 ], [ %230, %237 ]
  %261 = phi i32 [ %291, %289 ], [ %230, %237 ]
  %262 = phi i32 [ %298, %289 ], [ 0, %237 ]
  %263 = phi i32 [ %305, %289 ], [ %232, %237 ]
  %264 = phi i64 [ %304, %289 ], [ %231, %237 ]
  %265 = phi i32 [ %293, %289 ], [ %217, %237 ]
  %266 = icmp ult i32 %263, 3
  br i1 %266, label %267, label %289

267:                                              ; preds = %259
  %268 = zext i32 %263 to i64
  %269 = icmp eq i32 %265, 0
  br i1 %269, label %270, label %277

270:                                              ; preds = %267
  %271 = call i32 %1(i8* %2, i8** nonnull %6) #3
  %272 = icmp eq i32 %271, 0
  br i1 %272, label %276, label %273

273:                                              ; preds = %270
  %274 = load i32, i32* %34, align 4
  %275 = load i32, i32* %33, align 8
  br label %277

276:                                              ; preds = %270
  store i8* null, i8** %6, align 8
  br label %1292

277:                                              ; preds = %273, %267
  %278 = phi i32 [ %275, %273 ], [ %260, %267 ]
  %279 = phi i32 [ %274, %273 ], [ %262, %267 ]
  %280 = phi i32 [ %271, %273 ], [ %265, %267 ]
  %281 = add i32 %280, -1
  %282 = load i8*, i8** %6, align 8
  %283 = getelementptr inbounds i8, i8* %282, i64 1
  store i8* %283, i8** %6, align 8
  %284 = load i8, i8* %282, align 1
  %285 = zext i8 %284 to i64
  %286 = shl i64 %285, %268
  %287 = add i64 %286, %264
  %288 = add nuw nsw i32 %263, 8
  br label %289

289:                                              ; preds = %277, %259
  %290 = phi i32 [ %260, %259 ], [ %278, %277 ]
  %291 = phi i32 [ %261, %259 ], [ %278, %277 ]
  %292 = phi i32 [ %262, %259 ], [ %279, %277 ]
  %293 = phi i32 [ %265, %259 ], [ %281, %277 ]
  %294 = phi i64 [ %264, %259 ], [ %287, %277 ]
  %295 = phi i32 [ %263, %259 ], [ %288, %277 ]
  %296 = trunc i64 %294 to i16
  %297 = and i16 %296, 7
  %298 = add i32 %292, 1
  store i32 %298, i32* %34, align 4
  %299 = zext i32 %292 to i64
  %300 = getelementptr inbounds [19 x i16], [19 x i16]* @Cr_z_inflateBack.order, i64 0, i64 %299
  %301 = load i16, i16* %300, align 2
  %302 = zext i16 %301 to i64
  %303 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %14, i64 0, i32 29, i64 %302
  store i16 %297, i16* %303, align 2
  %304 = lshr i64 %294, 3
  %305 = add i32 %295, -3
  %306 = icmp ult i32 %298, %291
  br i1 %306, label %259, label %238

307:                                              ; preds = %256, %307
  %308 = phi i32 [ %327, %307 ], [ %257, %256 ]
  %309 = add nuw nsw i32 %308, 1
  store i32 %309, i32* %34, align 4
  %310 = zext i32 %308 to i64
  %311 = getelementptr inbounds [19 x i16], [19 x i16]* @Cr_z_inflateBack.order, i64 0, i64 %310
  %312 = load i16, i16* %311, align 2
  %313 = zext i16 %312 to i64
  %314 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %14, i64 0, i32 29, i64 %313
  store i16 0, i16* %314, align 2
  %315 = add nuw nsw i32 %308, 2
  store i32 %315, i32* %34, align 4
  %316 = zext i32 %309 to i64
  %317 = getelementptr inbounds [19 x i16], [19 x i16]* @Cr_z_inflateBack.order, i64 0, i64 %316
  %318 = load i16, i16* %317, align 2
  %319 = zext i16 %318 to i64
  %320 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %14, i64 0, i32 29, i64 %319
  store i16 0, i16* %320, align 2
  %321 = add nuw nsw i32 %308, 3
  store i32 %321, i32* %34, align 4
  %322 = zext i32 %315 to i64
  %323 = getelementptr inbounds [19 x i16], [19 x i16]* @Cr_z_inflateBack.order, i64 0, i64 %322
  %324 = load i16, i16* %323, align 2
  %325 = zext i16 %324 to i64
  %326 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %14, i64 0, i32 29, i64 %325
  store i16 0, i16* %326, align 2
  %327 = add nuw nsw i32 %308, 4
  store i32 %327, i32* %34, align 4
  %328 = zext i32 %321 to i64
  %329 = getelementptr inbounds [19 x i16], [19 x i16]* @Cr_z_inflateBack.order, i64 0, i64 %328
  %330 = load i16, i16* %329, align 2
  %331 = zext i16 %330 to i64
  %332 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %14, i64 0, i32 29, i64 %331
  store i16 0, i16* %332, align 2
  %333 = icmp ult i32 %327, 19
  br i1 %333, label %307, label %334

334:                                              ; preds = %256, %307, %238
  store %struct.code* %35, %struct.code** %36, align 8
  store %struct.code* %35, %struct.code** %37, align 8
  store i32 7, i32* %38, align 8
  %335 = call i32 @Cr_z_inflate_table(i32 0, i16* %39, i32 19, %struct.code** %36, i32* %38, i16* %40) #3
  %336 = icmp eq i32 %335, 0
  br i1 %336, label %338, label %337

337:                                              ; preds = %334
  store i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.4, i64 0, i64 0), i8** %15, align 8
  store i32 16209, i32* %16, align 8
  br label %1282

338:                                              ; preds = %334
  store i32 0, i32* %34, align 4
  %339 = load i32, i32* %31, align 4
  %340 = load i32, i32* %32, align 8
  %341 = sub i32 0, %339
  %342 = icmp eq i32 %340, %341
  br i1 %342, label %607, label %343

343:                                              ; preds = %338, %599
  %344 = phi i32 [ %605, %599 ], [ %305, %338 ]
  %345 = phi i64 [ %604, %599 ], [ %304, %338 ]
  %346 = phi i32 [ %603, %599 ], [ %293, %338 ]
  %347 = load %struct.code*, %struct.code** %37, align 8
  %348 = trunc i64 %345 to i32
  %349 = load i32, i32* %38, align 8
  %350 = shl nsw i32 -1, %349
  %351 = xor i32 %350, -1
  %352 = and i32 %351, %348
  %353 = zext i32 %352 to i64
  %354 = getelementptr inbounds %struct.code, %struct.code* %347, i64 %353, i32 1
  %355 = load i8, i8* %354, align 1
  %356 = getelementptr inbounds %struct.code, %struct.code* %347, i64 %353, i32 2
  %357 = zext i8 %355 to i32
  %358 = icmp ult i32 %344, %357
  br i1 %358, label %359, label %401

359:                                              ; preds = %343
  %360 = zext i32 %344 to i64
  br label %361

361:                                              ; preds = %359, %375
  %362 = phi i32 [ %349, %359 ], [ %376, %375 ]
  %363 = phi %struct.code* [ %347, %359 ], [ %377, %375 ]
  %364 = phi i64 [ %360, %359 ], [ %386, %375 ]
  %365 = phi i64 [ %345, %359 ], [ %385, %375 ]
  %366 = phi i32 [ %346, %359 ], [ %379, %375 ]
  %367 = icmp eq i32 %366, 0
  br i1 %367, label %368, label %375

368:                                              ; preds = %361
  %369 = call i32 %1(i8* %2, i8** nonnull %6) #3
  %370 = icmp eq i32 %369, 0
  br i1 %370, label %374, label %371

371:                                              ; preds = %368
  %372 = load %struct.code*, %struct.code** %37, align 8
  %373 = load i32, i32* %38, align 8
  br label %375

374:                                              ; preds = %368
  store i8* null, i8** %6, align 8
  br label %1292

375:                                              ; preds = %371, %361
  %376 = phi i32 [ %373, %371 ], [ %362, %361 ]
  %377 = phi %struct.code* [ %372, %371 ], [ %363, %361 ]
  %378 = phi i32 [ %369, %371 ], [ %366, %361 ]
  %379 = add i32 %378, -1
  %380 = load i8*, i8** %6, align 8
  %381 = getelementptr inbounds i8, i8* %380, i64 1
  store i8* %381, i8** %6, align 8
  %382 = load i8, i8* %380, align 1
  %383 = zext i8 %382 to i64
  %384 = shl i64 %383, %364
  %385 = add i64 %384, %365
  %386 = add nuw nsw i64 %364, 8
  %387 = trunc i64 %385 to i32
  %388 = shl nsw i32 -1, %376
  %389 = xor i32 %388, -1
  %390 = and i32 %389, %387
  %391 = zext i32 %390 to i64
  %392 = getelementptr inbounds %struct.code, %struct.code* %377, i64 %391, i32 1
  %393 = load i8, i8* %392, align 1
  %394 = zext i8 %393 to i64
  %395 = icmp ult i64 %386, %394
  br i1 %395, label %361, label %396

396:                                              ; preds = %375
  %397 = zext i32 %390 to i64
  %398 = zext i8 %393 to i32
  %399 = trunc i64 %386 to i32
  %400 = getelementptr inbounds %struct.code, %struct.code* %377, i64 %397, i32 2
  br label %401

401:                                              ; preds = %396, %343
  %402 = phi i32 [ %379, %396 ], [ %346, %343 ]
  %403 = phi i64 [ %385, %396 ], [ %345, %343 ]
  %404 = phi i32 [ %399, %396 ], [ %344, %343 ]
  %405 = phi i8 [ %393, %396 ], [ %355, %343 ]
  %406 = phi i16* [ %400, %396 ], [ %356, %343 ]
  %407 = phi i32 [ %398, %396 ], [ %357, %343 ]
  %408 = load i16, i16* %406, align 2
  %409 = icmp ult i16 %408, 16
  br i1 %409, label %410, label %421

410:                                              ; preds = %401
  %411 = zext i8 %405 to i64
  %412 = lshr i64 %403, %411
  %413 = sub i32 %404, %407
  %414 = load i32, i32* %34, align 4
  %415 = add i32 %414, 1
  store i32 %415, i32* %34, align 4
  %416 = zext i32 %414 to i64
  %417 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %14, i64 0, i32 29, i64 %416
  store i16 %408, i16* %417, align 2
  %418 = load i32, i32* %31, align 4
  %419 = load i32, i32* %32, align 8
  %420 = add i32 %419, %418
  br label %599

421:                                              ; preds = %401
  switch i16 %408, label %434 [
    i16 16, label %428
    i16 17, label %422
  ]

422:                                              ; preds = %421
  %423 = add nuw nsw i32 %407, 3
  %424 = icmp ult i32 %404, %423
  br i1 %424, label %425, label %504

425:                                              ; preds = %422
  %426 = zext i32 %404 to i64
  %427 = zext i32 %423 to i64
  br label %482

428:                                              ; preds = %421
  %429 = add nuw nsw i32 %407, 2
  %430 = icmp ult i32 %404, %429
  br i1 %430, label %431, label %462

431:                                              ; preds = %428
  %432 = zext i32 %404 to i64
  %433 = zext i32 %429 to i64
  br label %440

434:                                              ; preds = %421
  %435 = add nuw nsw i32 %407, 7
  %436 = icmp ult i32 %404, %435
  br i1 %436, label %437, label %538

437:                                              ; preds = %434
  %438 = zext i32 %404 to i64
  %439 = zext i32 %435 to i64
  br label %516

440:                                              ; preds = %431, %449
  %441 = phi i64 [ %432, %431 ], [ %458, %449 ]
  %442 = phi i64 [ %403, %431 ], [ %457, %449 ]
  %443 = phi i32 [ %402, %431 ], [ %451, %449 ]
  %444 = icmp eq i32 %443, 0
  br i1 %444, label %445, label %449

445:                                              ; preds = %440
  %446 = call i32 %1(i8* %2, i8** nonnull %6) #3
  %447 = icmp eq i32 %446, 0
  br i1 %447, label %448, label %449

448:                                              ; preds = %445
  store i8* null, i8** %6, align 8
  br label %1292

449:                                              ; preds = %445, %440
  %450 = phi i32 [ %446, %445 ], [ %443, %440 ]
  %451 = add i32 %450, -1
  %452 = load i8*, i8** %6, align 8
  %453 = getelementptr inbounds i8, i8* %452, i64 1
  store i8* %453, i8** %6, align 8
  %454 = load i8, i8* %452, align 1
  %455 = zext i8 %454 to i64
  %456 = shl i64 %455, %441
  %457 = add i64 %456, %442
  %458 = add nuw nsw i64 %441, 8
  %459 = icmp ult i64 %458, %433
  br i1 %459, label %440, label %460

460:                                              ; preds = %449
  %461 = trunc i64 %458 to i32
  br label %462

462:                                              ; preds = %460, %428
  %463 = phi i32 [ %402, %428 ], [ %451, %460 ]
  %464 = phi i64 [ %403, %428 ], [ %457, %460 ]
  %465 = phi i32 [ %404, %428 ], [ %461, %460 ]
  %466 = zext i8 %405 to i64
  %467 = lshr i64 %464, %466
  %468 = sub i32 %465, %407
  %469 = load i32, i32* %34, align 4
  %470 = icmp eq i32 %469, 0
  br i1 %470, label %471, label %472

471:                                              ; preds = %462
  store i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.5, i64 0, i64 0), i8** %15, align 8
  store i32 16209, i32* %16, align 8
  br label %1282

472:                                              ; preds = %462
  %473 = add i32 %469, -1
  %474 = zext i32 %473 to i64
  %475 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %14, i64 0, i32 29, i64 %474
  %476 = load i16, i16* %475, align 2
  %477 = trunc i64 %467 to i32
  %478 = and i32 %477, 3
  %479 = add nuw nsw i32 %478, 3
  %480 = lshr i64 %467, 2
  %481 = add i32 %468, -2
  br label %550

482:                                              ; preds = %425, %491
  %483 = phi i64 [ %426, %425 ], [ %500, %491 ]
  %484 = phi i64 [ %403, %425 ], [ %499, %491 ]
  %485 = phi i32 [ %402, %425 ], [ %493, %491 ]
  %486 = icmp eq i32 %485, 0
  br i1 %486, label %487, label %491

487:                                              ; preds = %482
  %488 = call i32 %1(i8* %2, i8** nonnull %6) #3
  %489 = icmp eq i32 %488, 0
  br i1 %489, label %490, label %491

490:                                              ; preds = %487
  store i8* null, i8** %6, align 8
  br label %1292

491:                                              ; preds = %487, %482
  %492 = phi i32 [ %488, %487 ], [ %485, %482 ]
  %493 = add i32 %492, -1
  %494 = load i8*, i8** %6, align 8
  %495 = getelementptr inbounds i8, i8* %494, i64 1
  store i8* %495, i8** %6, align 8
  %496 = load i8, i8* %494, align 1
  %497 = zext i8 %496 to i64
  %498 = shl i64 %497, %483
  %499 = add i64 %498, %484
  %500 = add nuw nsw i64 %483, 8
  %501 = icmp ult i64 %500, %427
  br i1 %501, label %482, label %502

502:                                              ; preds = %491
  %503 = trunc i64 %500 to i32
  br label %504

504:                                              ; preds = %502, %422
  %505 = phi i32 [ %402, %422 ], [ %493, %502 ]
  %506 = phi i64 [ %403, %422 ], [ %499, %502 ]
  %507 = phi i32 [ %404, %422 ], [ %503, %502 ]
  %508 = zext i8 %405 to i64
  %509 = lshr i64 %506, %508
  %510 = trunc i64 %509 to i32
  %511 = and i32 %510, 7
  %512 = add nuw nsw i32 %511, 3
  %513 = lshr i64 %509, 3
  %514 = sub nuw nsw i32 -3, %407
  %515 = add i32 %514, %507
  br label %550

516:                                              ; preds = %437, %525
  %517 = phi i64 [ %438, %437 ], [ %534, %525 ]
  %518 = phi i64 [ %403, %437 ], [ %533, %525 ]
  %519 = phi i32 [ %402, %437 ], [ %527, %525 ]
  %520 = icmp eq i32 %519, 0
  br i1 %520, label %521, label %525

521:                                              ; preds = %516
  %522 = call i32 %1(i8* %2, i8** nonnull %6) #3
  %523 = icmp eq i32 %522, 0
  br i1 %523, label %524, label %525

524:                                              ; preds = %521
  store i8* null, i8** %6, align 8
  br label %1292

525:                                              ; preds = %521, %516
  %526 = phi i32 [ %522, %521 ], [ %519, %516 ]
  %527 = add i32 %526, -1
  %528 = load i8*, i8** %6, align 8
  %529 = getelementptr inbounds i8, i8* %528, i64 1
  store i8* %529, i8** %6, align 8
  %530 = load i8, i8* %528, align 1
  %531 = zext i8 %530 to i64
  %532 = shl i64 %531, %517
  %533 = add i64 %532, %518
  %534 = add nuw nsw i64 %517, 8
  %535 = icmp ult i64 %534, %439
  br i1 %535, label %516, label %536

536:                                              ; preds = %525
  %537 = trunc i64 %534 to i32
  br label %538

538:                                              ; preds = %536, %434
  %539 = phi i32 [ %402, %434 ], [ %527, %536 ]
  %540 = phi i64 [ %403, %434 ], [ %533, %536 ]
  %541 = phi i32 [ %404, %434 ], [ %537, %536 ]
  %542 = zext i8 %405 to i64
  %543 = lshr i64 %540, %542
  %544 = trunc i64 %543 to i32
  %545 = and i32 %544, 127
  %546 = add nuw nsw i32 %545, 11
  %547 = lshr i64 %543, 7
  %548 = sub nuw nsw i32 -7, %407
  %549 = add i32 %548, %541
  br label %550

550:                                              ; preds = %504, %538, %472
  %551 = phi i32 [ %463, %472 ], [ %505, %504 ], [ %539, %538 ]
  %552 = phi i64 [ %480, %472 ], [ %513, %504 ], [ %547, %538 ]
  %553 = phi i32 [ %481, %472 ], [ %515, %504 ], [ %549, %538 ]
  %554 = phi i32 [ %479, %472 ], [ %512, %504 ], [ %546, %538 ]
  %555 = phi i16 [ %476, %472 ], [ 0, %504 ], [ 0, %538 ]
  %556 = load i32, i32* %34, align 4
  %557 = add i32 %556, %554
  %558 = load i32, i32* %31, align 4
  %559 = load i32, i32* %32, align 8
  %560 = add i32 %559, %558
  %561 = icmp ugt i32 %557, %560
  br i1 %561, label %581, label %562

562:                                              ; preds = %550
  %563 = add nsw i32 %554, -1
  %564 = and i32 %554, 3
  %565 = icmp eq i32 %564, 0
  br i1 %565, label %576, label %566

566:                                              ; preds = %562, %566
  %567 = phi i32 [ %571, %566 ], [ %556, %562 ]
  %568 = phi i32 [ %570, %566 ], [ %554, %562 ]
  %569 = phi i32 [ %574, %566 ], [ %564, %562 ]
  %570 = add nsw i32 %568, -1
  %571 = add i32 %567, 1
  store i32 %571, i32* %34, align 4
  %572 = zext i32 %567 to i64
  %573 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %14, i64 0, i32 29, i64 %572
  store i16 %555, i16* %573, align 2
  %574 = add i32 %569, -1
  %575 = icmp eq i32 %574, 0
  br i1 %575, label %576, label %566, !llvm.loop !4

576:                                              ; preds = %566, %562
  %577 = phi i32 [ undef, %562 ], [ %571, %566 ]
  %578 = phi i32 [ %556, %562 ], [ %571, %566 ]
  %579 = phi i32 [ %554, %562 ], [ %570, %566 ]
  %580 = icmp ult i32 %563, 3
  br i1 %580, label %599, label %582

581:                                              ; preds = %550
  store i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.5, i64 0, i64 0), i8** %15, align 8
  store i32 16209, i32* %16, align 8
  br label %1282

582:                                              ; preds = %576, %582
  %583 = phi i32 [ %595, %582 ], [ %578, %576 ]
  %584 = phi i32 [ %594, %582 ], [ %579, %576 ]
  %585 = add i32 %583, 1
  store i32 %585, i32* %34, align 4
  %586 = zext i32 %583 to i64
  %587 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %14, i64 0, i32 29, i64 %586
  store i16 %555, i16* %587, align 2
  %588 = add i32 %583, 2
  store i32 %588, i32* %34, align 4
  %589 = zext i32 %585 to i64
  %590 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %14, i64 0, i32 29, i64 %589
  store i16 %555, i16* %590, align 2
  %591 = add i32 %583, 3
  store i32 %591, i32* %34, align 4
  %592 = zext i32 %588 to i64
  %593 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %14, i64 0, i32 29, i64 %592
  store i16 %555, i16* %593, align 2
  %594 = add nsw i32 %584, -4
  %595 = add i32 %583, 4
  store i32 %595, i32* %34, align 4
  %596 = zext i32 %591 to i64
  %597 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %14, i64 0, i32 29, i64 %596
  store i16 %555, i16* %597, align 2
  %598 = icmp eq i32 %594, 0
  br i1 %598, label %599, label %582

599:                                              ; preds = %576, %582, %410
  %600 = phi i32 [ %420, %410 ], [ %560, %582 ], [ %560, %576 ]
  %601 = phi i32 [ %418, %410 ], [ %558, %582 ], [ %558, %576 ]
  %602 = phi i32 [ %415, %410 ], [ %577, %576 ], [ %595, %582 ]
  %603 = phi i32 [ %402, %410 ], [ %551, %582 ], [ %551, %576 ]
  %604 = phi i64 [ %412, %410 ], [ %552, %582 ], [ %552, %576 ]
  %605 = phi i32 [ %413, %410 ], [ %553, %582 ], [ %553, %576 ]
  %606 = icmp ult i32 %602, %600
  br i1 %606, label %343, label %607

607:                                              ; preds = %599, %338
  %608 = phi i32 [ %339, %338 ], [ %601, %599 ]
  %609 = phi i32 [ %293, %338 ], [ %603, %599 ]
  %610 = phi i64 [ %304, %338 ], [ %604, %599 ]
  %611 = phi i32 [ %305, %338 ], [ %605, %599 ]
  %612 = load i32, i32* %16, align 8
  %613 = icmp eq i32 %612, 16209
  br i1 %613, label %1282, label %614

614:                                              ; preds = %607
  %615 = load i16, i16* %41, align 8
  %616 = icmp eq i16 %615, 0
  br i1 %616, label %617, label %618

617:                                              ; preds = %614
  store i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.6, i64 0, i64 0), i8** %15, align 8
  store i32 16209, i32* %16, align 8
  br label %1282

618:                                              ; preds = %614
  store %struct.code* %35, %struct.code** %36, align 8
  store %struct.code* %35, %struct.code** %37, align 8
  store i32 9, i32* %38, align 8
  %619 = call i32 @Cr_z_inflate_table(i32 1, i16* %39, i32 %608, %struct.code** %36, i32* %38, i16* %40) #3
  %620 = icmp eq i32 %619, 0
  br i1 %620, label %622, label %621

621:                                              ; preds = %618
  store i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.7, i64 0, i64 0), i8** %15, align 8
  store i32 16209, i32* %16, align 8
  br label %1282

622:                                              ; preds = %618
  %623 = load i64, i64* %42, align 8
  store i64 %623, i64* %44, align 8
  store i32 6, i32* %45, align 4
  %624 = load i32, i32* %31, align 4
  %625 = zext i32 %624 to i64
  %626 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %14, i64 0, i32 29, i64 %625
  %627 = load i32, i32* %32, align 8
  %628 = call i32 @Cr_z_inflate_table(i32 2, i16* %626, i32 %627, %struct.code** %36, i32* %45, i16* %40) #3
  %629 = icmp eq i32 %628, 0
  br i1 %629, label %631, label %630

630:                                              ; preds = %622
  store i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.8, i64 0, i64 0), i8** %15, align 8
  store i32 16209, i32* %16, align 8
  br label %1282

631:                                              ; preds = %622
  store i32 16200, i32* %16, align 8
  br label %632

632:                                              ; preds = %57, %631
  %633 = phi i32 [ %60, %57 ], [ %609, %631 ]
  %634 = phi i64 [ %62, %57 ], [ %610, %631 ]
  %635 = phi i32 [ %63, %57 ], [ %611, %631 ]
  %636 = icmp ugt i32 %633, 5
  %637 = icmp ugt i32 %61, 257
  %638 = and i1 %637, %636
  br i1 %638, label %655, label %639

639:                                              ; preds = %632
  %640 = load %struct.code*, %struct.code** %37, align 8
  %641 = trunc i64 %634 to i32
  %642 = load i32, i32* %38, align 8
  %643 = shl nsw i32 -1, %642
  %644 = xor i32 %643, -1
  %645 = and i32 %644, %641
  %646 = zext i32 %645 to i64
  %647 = getelementptr inbounds %struct.code, %struct.code* %640, i64 %646, i32 0
  %648 = getelementptr inbounds %struct.code, %struct.code* %640, i64 %646, i32 1
  %649 = load i8, i8* %648, align 1
  %650 = getelementptr inbounds %struct.code, %struct.code* %640, i64 %646, i32 2
  %651 = zext i8 %649 to i32
  %652 = icmp ult i32 %635, %651
  br i1 %652, label %653, label %710

653:                                              ; preds = %639
  %654 = zext i32 %635 to i64
  br label %669

655:                                              ; preds = %632
  store i8* %59, i8** %49, align 8
  store i32 %61, i32* %50, align 8
  %656 = load i64, i64* %51, align 8
  store i64 %656, i64* %52, align 8
  store i32 %633, i32* %53, align 8
  store i64 %634, i64* %54, align 8
  store i32 %635, i32* %55, align 8
  %657 = load i32, i32* %18, align 8
  %658 = load i32, i32* %29, align 4
  %659 = icmp ult i32 %657, %658
  br i1 %659, label %660, label %662

660:                                              ; preds = %655
  %661 = sub i32 %658, %61
  store i32 %661, i32* %18, align 8
  br label %662

662:                                              ; preds = %660, %655
  call void @Cr_z_inflate_fast(%struct.z_stream_s* nonnull %0, i32 %658) #3
  %663 = load i8*, i8** %49, align 8
  %664 = load i32, i32* %50, align 8
  %665 = load i64, i64* %52, align 8
  store i64 %665, i64* %51, align 8
  %666 = load i32, i32* %53, align 8
  %667 = load i64, i64* %54, align 8
  %668 = load i32, i32* %55, align 8
  br label %1282

669:                                              ; preds = %653, %683
  %670 = phi i32 [ %642, %653 ], [ %684, %683 ]
  %671 = phi %struct.code* [ %640, %653 ], [ %685, %683 ]
  %672 = phi i64 [ %654, %653 ], [ %694, %683 ]
  %673 = phi i64 [ %634, %653 ], [ %693, %683 ]
  %674 = phi i32 [ %633, %653 ], [ %687, %683 ]
  %675 = icmp eq i32 %674, 0
  br i1 %675, label %676, label %683

676:                                              ; preds = %669
  %677 = call i32 %1(i8* %2, i8** nonnull %6) #3
  %678 = icmp eq i32 %677, 0
  br i1 %678, label %682, label %679

679:                                              ; preds = %676
  %680 = load %struct.code*, %struct.code** %37, align 8
  %681 = load i32, i32* %38, align 8
  br label %683

682:                                              ; preds = %676
  store i8* null, i8** %6, align 8
  br label %1292

683:                                              ; preds = %679, %669
  %684 = phi i32 [ %681, %679 ], [ %670, %669 ]
  %685 = phi %struct.code* [ %680, %679 ], [ %671, %669 ]
  %686 = phi i32 [ %677, %679 ], [ %674, %669 ]
  %687 = add i32 %686, -1
  %688 = load i8*, i8** %6, align 8
  %689 = getelementptr inbounds i8, i8* %688, i64 1
  store i8* %689, i8** %6, align 8
  %690 = load i8, i8* %688, align 1
  %691 = zext i8 %690 to i64
  %692 = shl i64 %691, %672
  %693 = add i64 %692, %673
  %694 = add nuw nsw i64 %672, 8
  %695 = trunc i64 %693 to i32
  %696 = shl nsw i32 -1, %684
  %697 = xor i32 %696, -1
  %698 = and i32 %697, %695
  %699 = zext i32 %698 to i64
  %700 = getelementptr inbounds %struct.code, %struct.code* %685, i64 %699, i32 1
  %701 = load i8, i8* %700, align 1
  %702 = zext i8 %701 to i64
  %703 = icmp ult i64 %694, %702
  br i1 %703, label %669, label %704

704:                                              ; preds = %683
  %705 = zext i32 %698 to i64
  %706 = zext i8 %701 to i32
  %707 = trunc i64 %694 to i32
  %708 = getelementptr inbounds %struct.code, %struct.code* %685, i64 %705, i32 2
  %709 = getelementptr inbounds %struct.code, %struct.code* %685, i64 %705, i32 0
  br label %710

710:                                              ; preds = %704, %639
  %711 = phi %struct.code* [ %685, %704 ], [ %640, %639 ]
  %712 = phi i32 [ %687, %704 ], [ %633, %639 ]
  %713 = phi i64 [ %693, %704 ], [ %634, %639 ]
  %714 = phi i32 [ %707, %704 ], [ %635, %639 ]
  %715 = phi i8* [ %709, %704 ], [ %647, %639 ]
  %716 = phi i8 [ %701, %704 ], [ %649, %639 ]
  %717 = phi i16* [ %708, %704 ], [ %650, %639 ]
  %718 = phi i32 [ %706, %704 ], [ %651, %639 ]
  %719 = load i16, i16* %717, align 2
  %720 = load i8, i8* %715, align 2
  %721 = zext i8 %720 to i32
  %722 = icmp ne i8 %720, 0
  %723 = and i32 %721, 240
  %724 = icmp eq i32 %723, 0
  %725 = and i1 %722, %724
  br i1 %725, label %726, label %792

726:                                              ; preds = %710
  %727 = zext i16 %719 to i32
  %728 = trunc i64 %713 to i32
  %729 = add nuw nsw i32 %718, %721
  %730 = shl nsw i32 -1, %729
  %731 = xor i32 %730, -1
  %732 = and i32 %728, %731
  %733 = lshr i32 %732, %718
  %734 = add i32 %733, %727
  %735 = zext i32 %734 to i64
  %736 = getelementptr inbounds %struct.code, %struct.code* %711, i64 %735, i32 1
  %737 = load i8, i8* %736, align 1
  %738 = zext i8 %737 to i32
  %739 = add nuw nsw i32 %718, %738
  %740 = icmp ugt i32 %739, %714
  br i1 %740, label %741, label %777

741:                                              ; preds = %726, %753
  %742 = phi %struct.code* [ %754, %753 ], [ %711, %726 ]
  %743 = phi i32 [ %764, %753 ], [ %714, %726 ]
  %744 = phi i64 [ %763, %753 ], [ %713, %726 ]
  %745 = phi i32 [ %756, %753 ], [ %712, %726 ]
  %746 = icmp eq i32 %745, 0
  br i1 %746, label %747, label %753

747:                                              ; preds = %741
  %748 = call i32 %1(i8* %2, i8** nonnull %6) #3
  %749 = icmp eq i32 %748, 0
  br i1 %749, label %752, label %750

750:                                              ; preds = %747
  %751 = load %struct.code*, %struct.code** %37, align 8
  br label %753

752:                                              ; preds = %747
  store i8* null, i8** %6, align 8
  br label %1292

753:                                              ; preds = %750, %741
  %754 = phi %struct.code* [ %751, %750 ], [ %742, %741 ]
  %755 = phi i32 [ %748, %750 ], [ %745, %741 ]
  %756 = add i32 %755, -1
  %757 = load i8*, i8** %6, align 8
  %758 = getelementptr inbounds i8, i8* %757, i64 1
  store i8* %758, i8** %6, align 8
  %759 = load i8, i8* %757, align 1
  %760 = zext i8 %759 to i64
  %761 = zext i32 %743 to i64
  %762 = shl i64 %760, %761
  %763 = add i64 %762, %744
  %764 = add i32 %743, 8
  %765 = trunc i64 %763 to i32
  %766 = and i32 %765, %731
  %767 = lshr i32 %766, %718
  %768 = add i32 %767, %727
  %769 = zext i32 %768 to i64
  %770 = getelementptr inbounds %struct.code, %struct.code* %754, i64 %769, i32 1
  %771 = load i8, i8* %770, align 1
  %772 = zext i8 %771 to i32
  %773 = add nuw nsw i32 %718, %772
  %774 = icmp ugt i32 %773, %764
  br i1 %774, label %741, label %775

775:                                              ; preds = %753
  %776 = zext i32 %768 to i64
  br label %777

777:                                              ; preds = %775, %726
  %778 = phi i32 [ %712, %726 ], [ %756, %775 ]
  %779 = phi i64 [ %713, %726 ], [ %763, %775 ]
  %780 = phi i32 [ %714, %726 ], [ %764, %775 ]
  %781 = phi %struct.code* [ %711, %726 ], [ %754, %775 ]
  %782 = phi i64 [ %735, %726 ], [ %776, %775 ]
  %783 = phi i8 [ %737, %726 ], [ %771, %775 ]
  %784 = getelementptr inbounds %struct.code, %struct.code* %781, i64 %782, i32 2
  %785 = load i16, i16* %784, align 2
  %786 = getelementptr inbounds %struct.code, %struct.code* %781, i64 %782, i32 0
  %787 = load i8, i8* %786, align 2
  %788 = zext i8 %716 to i64
  %789 = lshr i64 %779, %788
  %790 = sub i32 %780, %718
  %791 = zext i8 %787 to i32
  br label %792

792:                                              ; preds = %710, %777
  %793 = phi i32 [ %721, %710 ], [ %791, %777 ]
  %794 = phi i32 [ %712, %710 ], [ %778, %777 ]
  %795 = phi i64 [ %713, %710 ], [ %789, %777 ]
  %796 = phi i32 [ %714, %710 ], [ %790, %777 ]
  %797 = phi i16 [ %719, %710 ], [ %785, %777 ]
  %798 = phi i8 [ %716, %710 ], [ %783, %777 ]
  %799 = phi i8 [ %720, %710 ], [ %787, %777 ]
  %800 = zext i8 %798 to i32
  %801 = zext i8 %798 to i64
  %802 = lshr i64 %795, %801
  %803 = sub i32 %796, %800
  %804 = zext i16 %797 to i32
  store i32 %804, i32* %46, align 4
  %805 = icmp eq i8 %799, 0
  br i1 %805, label %806, label %822

806:                                              ; preds = %792
  %807 = icmp eq i32 %61, 0
  br i1 %807, label %808, label %815

808:                                              ; preds = %806
  %809 = load i8*, i8** %27, align 8
  %810 = load i32, i32* %29, align 4
  store i32 %810, i32* %18, align 8
  %811 = call i32 %3(i8* %4, i8* %809, i32 %810) #3
  %812 = icmp eq i32 %811, 0
  br i1 %812, label %813, label %1289

813:                                              ; preds = %808
  %814 = load i32, i32* %46, align 4
  br label %815

815:                                              ; preds = %813, %806
  %816 = phi i32 [ %814, %813 ], [ %804, %806 ]
  %817 = phi i8* [ %809, %813 ], [ %59, %806 ]
  %818 = phi i32 [ %810, %813 ], [ %61, %806 ]
  %819 = trunc i32 %816 to i8
  %820 = getelementptr inbounds i8, i8* %817, i64 1
  store i8 %819, i8* %817, align 1
  %821 = add i32 %818, -1
  store i32 16200, i32* %16, align 8
  br label %1282

822:                                              ; preds = %792
  %823 = and i32 %793, 32
  %824 = icmp eq i32 %823, 0
  br i1 %824, label %826, label %825

825:                                              ; preds = %822
  store i32 16191, i32* %16, align 8
  br label %1282

826:                                              ; preds = %822
  %827 = and i32 %793, 64
  %828 = icmp eq i32 %827, 0
  br i1 %828, label %830, label %829

829:                                              ; preds = %826
  store i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.9, i64 0, i64 0), i8** %15, align 8
  store i32 16209, i32* %16, align 8
  br label %1282

830:                                              ; preds = %826
  %831 = and i32 %793, 15
  store i32 %831, i32* %47, align 4
  %832 = icmp eq i32 %831, 0
  br i1 %832, label %876, label %833

833:                                              ; preds = %830
  %834 = icmp ult i32 %803, %831
  br i1 %834, label %835, label %862

835:                                              ; preds = %833, %847
  %836 = phi i32 [ %848, %847 ], [ %831, %833 ]
  %837 = phi i32 [ %858, %847 ], [ %803, %833 ]
  %838 = phi i64 [ %857, %847 ], [ %802, %833 ]
  %839 = phi i32 [ %850, %847 ], [ %794, %833 ]
  %840 = icmp eq i32 %839, 0
  br i1 %840, label %841, label %847

841:                                              ; preds = %835
  %842 = call i32 %1(i8* %2, i8** nonnull %6) #3
  %843 = icmp eq i32 %842, 0
  br i1 %843, label %846, label %844

844:                                              ; preds = %841
  %845 = load i32, i32* %47, align 4
  br label %847

846:                                              ; preds = %841
  store i8* null, i8** %6, align 8
  br label %1292

847:                                              ; preds = %844, %835
  %848 = phi i32 [ %845, %844 ], [ %836, %835 ]
  %849 = phi i32 [ %842, %844 ], [ %839, %835 ]
  %850 = add i32 %849, -1
  %851 = load i8*, i8** %6, align 8
  %852 = getelementptr inbounds i8, i8* %851, i64 1
  store i8* %852, i8** %6, align 8
  %853 = load i8, i8* %851, align 1
  %854 = zext i8 %853 to i64
  %855 = zext i32 %837 to i64
  %856 = shl i64 %854, %855
  %857 = add i64 %856, %838
  %858 = add i32 %837, 8
  %859 = icmp ult i32 %858, %848
  br i1 %859, label %835, label %860

860:                                              ; preds = %847
  %861 = load i32, i32* %46, align 4
  br label %862

862:                                              ; preds = %860, %833
  %863 = phi i32 [ %804, %833 ], [ %861, %860 ]
  %864 = phi i32 [ %794, %833 ], [ %850, %860 ]
  %865 = phi i64 [ %802, %833 ], [ %857, %860 ]
  %866 = phi i32 [ %803, %833 ], [ %858, %860 ]
  %867 = phi i32 [ %831, %833 ], [ %848, %860 ]
  %868 = trunc i64 %865 to i32
  %869 = shl nsw i32 -1, %867
  %870 = xor i32 %869, -1
  %871 = and i32 %870, %868
  %872 = add i32 %863, %871
  store i32 %872, i32* %46, align 4
  %873 = zext i32 %867 to i64
  %874 = lshr i64 %865, %873
  %875 = sub i32 %866, %867
  br label %876

876:                                              ; preds = %830, %862
  %877 = phi i32 [ %864, %862 ], [ %794, %830 ]
  %878 = phi i64 [ %874, %862 ], [ %802, %830 ]
  %879 = phi i32 [ %875, %862 ], [ %803, %830 ]
  %880 = load %struct.code*, %struct.code** %43, align 8
  %881 = trunc i64 %878 to i32
  %882 = load i32, i32* %45, align 4
  %883 = shl nsw i32 -1, %882
  %884 = xor i32 %883, -1
  %885 = and i32 %884, %881
  %886 = zext i32 %885 to i64
  %887 = getelementptr inbounds %struct.code, %struct.code* %880, i64 %886, i32 0
  %888 = getelementptr inbounds %struct.code, %struct.code* %880, i64 %886, i32 1
  %889 = load i8, i8* %888, align 1
  %890 = getelementptr inbounds %struct.code, %struct.code* %880, i64 %886, i32 2
  %891 = zext i8 %889 to i32
  %892 = icmp ult i32 %879, %891
  br i1 %892, label %893, label %936

893:                                              ; preds = %876
  %894 = zext i32 %879 to i64
  br label %895

895:                                              ; preds = %893, %909
  %896 = phi i32 [ %882, %893 ], [ %910, %909 ]
  %897 = phi %struct.code* [ %880, %893 ], [ %911, %909 ]
  %898 = phi i64 [ %894, %893 ], [ %920, %909 ]
  %899 = phi i64 [ %878, %893 ], [ %919, %909 ]
  %900 = phi i32 [ %877, %893 ], [ %913, %909 ]
  %901 = icmp eq i32 %900, 0
  br i1 %901, label %902, label %909

902:                                              ; preds = %895
  %903 = call i32 %1(i8* %2, i8** nonnull %6) #3
  %904 = icmp eq i32 %903, 0
  br i1 %904, label %908, label %905

905:                                              ; preds = %902
  %906 = load %struct.code*, %struct.code** %43, align 8
  %907 = load i32, i32* %45, align 4
  br label %909

908:                                              ; preds = %902
  store i8* null, i8** %6, align 8
  br label %1292

909:                                              ; preds = %905, %895
  %910 = phi i32 [ %907, %905 ], [ %896, %895 ]
  %911 = phi %struct.code* [ %906, %905 ], [ %897, %895 ]
  %912 = phi i32 [ %903, %905 ], [ %900, %895 ]
  %913 = add i32 %912, -1
  %914 = load i8*, i8** %6, align 8
  %915 = getelementptr inbounds i8, i8* %914, i64 1
  store i8* %915, i8** %6, align 8
  %916 = load i8, i8* %914, align 1
  %917 = zext i8 %916 to i64
  %918 = shl i64 %917, %898
  %919 = add i64 %918, %899
  %920 = add nuw nsw i64 %898, 8
  %921 = trunc i64 %919 to i32
  %922 = shl nsw i32 -1, %910
  %923 = xor i32 %922, -1
  %924 = and i32 %923, %921
  %925 = zext i32 %924 to i64
  %926 = getelementptr inbounds %struct.code, %struct.code* %911, i64 %925, i32 1
  %927 = load i8, i8* %926, align 1
  %928 = zext i8 %927 to i64
  %929 = icmp ult i64 %920, %928
  br i1 %929, label %895, label %930

930:                                              ; preds = %909
  %931 = zext i32 %924 to i64
  %932 = zext i8 %927 to i32
  %933 = trunc i64 %920 to i32
  %934 = getelementptr inbounds %struct.code, %struct.code* %911, i64 %931, i32 2
  %935 = getelementptr inbounds %struct.code, %struct.code* %911, i64 %931, i32 0
  br label %936

936:                                              ; preds = %930, %876
  %937 = phi %struct.code* [ %911, %930 ], [ %880, %876 ]
  %938 = phi i32 [ %913, %930 ], [ %877, %876 ]
  %939 = phi i64 [ %919, %930 ], [ %878, %876 ]
  %940 = phi i32 [ %933, %930 ], [ %879, %876 ]
  %941 = phi i8* [ %935, %930 ], [ %887, %876 ]
  %942 = phi i8 [ %927, %930 ], [ %889, %876 ]
  %943 = phi i16* [ %934, %930 ], [ %890, %876 ]
  %944 = phi i32 [ %932, %930 ], [ %891, %876 ]
  %945 = load i16, i16* %943, align 2
  %946 = load i8, i8* %941, align 2
  %947 = zext i8 %946 to i32
  %948 = and i32 %947, 240
  %949 = icmp eq i32 %948, 0
  br i1 %949, label %950, label %1016

950:                                              ; preds = %936
  %951 = zext i16 %945 to i32
  %952 = trunc i64 %939 to i32
  %953 = add nuw nsw i32 %944, %947
  %954 = shl nsw i32 -1, %953
  %955 = xor i32 %954, -1
  %956 = and i32 %952, %955
  %957 = lshr i32 %956, %944
  %958 = add i32 %957, %951
  %959 = zext i32 %958 to i64
  %960 = getelementptr inbounds %struct.code, %struct.code* %937, i64 %959, i32 1
  %961 = load i8, i8* %960, align 1
  %962 = zext i8 %961 to i32
  %963 = add nuw nsw i32 %944, %962
  %964 = icmp ugt i32 %963, %940
  br i1 %964, label %965, label %1001

965:                                              ; preds = %950, %977
  %966 = phi %struct.code* [ %978, %977 ], [ %937, %950 ]
  %967 = phi i32 [ %988, %977 ], [ %940, %950 ]
  %968 = phi i64 [ %987, %977 ], [ %939, %950 ]
  %969 = phi i32 [ %980, %977 ], [ %938, %950 ]
  %970 = icmp eq i32 %969, 0
  br i1 %970, label %971, label %977

971:                                              ; preds = %965
  %972 = call i32 %1(i8* %2, i8** nonnull %6) #3
  %973 = icmp eq i32 %972, 0
  br i1 %973, label %976, label %974

974:                                              ; preds = %971
  %975 = load %struct.code*, %struct.code** %43, align 8
  br label %977

976:                                              ; preds = %971
  store i8* null, i8** %6, align 8
  br label %1292

977:                                              ; preds = %974, %965
  %978 = phi %struct.code* [ %975, %974 ], [ %966, %965 ]
  %979 = phi i32 [ %972, %974 ], [ %969, %965 ]
  %980 = add i32 %979, -1
  %981 = load i8*, i8** %6, align 8
  %982 = getelementptr inbounds i8, i8* %981, i64 1
  store i8* %982, i8** %6, align 8
  %983 = load i8, i8* %981, align 1
  %984 = zext i8 %983 to i64
  %985 = zext i32 %967 to i64
  %986 = shl i64 %984, %985
  %987 = add i64 %986, %968
  %988 = add i32 %967, 8
  %989 = trunc i64 %987 to i32
  %990 = and i32 %989, %955
  %991 = lshr i32 %990, %944
  %992 = add i32 %991, %951
  %993 = zext i32 %992 to i64
  %994 = getelementptr inbounds %struct.code, %struct.code* %978, i64 %993, i32 1
  %995 = load i8, i8* %994, align 1
  %996 = zext i8 %995 to i32
  %997 = add nuw nsw i32 %944, %996
  %998 = icmp ugt i32 %997, %988
  br i1 %998, label %965, label %999

999:                                              ; preds = %977
  %1000 = zext i32 %992 to i64
  br label %1001

1001:                                             ; preds = %999, %950
  %1002 = phi i32 [ %938, %950 ], [ %980, %999 ]
  %1003 = phi i64 [ %939, %950 ], [ %987, %999 ]
  %1004 = phi i32 [ %940, %950 ], [ %988, %999 ]
  %1005 = phi %struct.code* [ %937, %950 ], [ %978, %999 ]
  %1006 = phi i64 [ %959, %950 ], [ %1000, %999 ]
  %1007 = phi i8 [ %961, %950 ], [ %995, %999 ]
  %1008 = getelementptr inbounds %struct.code, %struct.code* %1005, i64 %1006, i32 2
  %1009 = load i16, i16* %1008, align 2
  %1010 = getelementptr inbounds %struct.code, %struct.code* %1005, i64 %1006, i32 0
  %1011 = load i8, i8* %1010, align 2
  %1012 = zext i8 %942 to i64
  %1013 = lshr i64 %1003, %1012
  %1014 = sub i32 %1004, %944
  %1015 = zext i8 %1011 to i32
  br label %1016

1016:                                             ; preds = %936, %1001
  %1017 = phi i32 [ %947, %936 ], [ %1015, %1001 ]
  %1018 = phi i32 [ %938, %936 ], [ %1002, %1001 ]
  %1019 = phi i64 [ %939, %936 ], [ %1013, %1001 ]
  %1020 = phi i32 [ %940, %936 ], [ %1014, %1001 ]
  %1021 = phi i16 [ %945, %936 ], [ %1009, %1001 ]
  %1022 = phi i8 [ %942, %936 ], [ %1007, %1001 ]
  %1023 = zext i8 %1022 to i32
  %1024 = zext i8 %1022 to i64
  %1025 = lshr i64 %1019, %1024
  %1026 = sub i32 %1020, %1023
  %1027 = and i32 %1017, 64
  %1028 = icmp eq i32 %1027, 0
  br i1 %1028, label %1030, label %1029

1029:                                             ; preds = %1016
  store i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.10, i64 0, i64 0), i8** %15, align 8
  store i32 16209, i32* %16, align 8
  br label %1282

1030:                                             ; preds = %1016
  %1031 = zext i16 %1021 to i32
  store i32 %1031, i32* %48, align 8
  %1032 = and i32 %1017, 15
  store i32 %1032, i32* %47, align 4
  %1033 = icmp eq i32 %1032, 0
  br i1 %1033, label %1077, label %1034

1034:                                             ; preds = %1030
  %1035 = icmp ult i32 %1026, %1032
  br i1 %1035, label %1036, label %1063

1036:                                             ; preds = %1034, %1048
  %1037 = phi i32 [ %1049, %1048 ], [ %1032, %1034 ]
  %1038 = phi i32 [ %1059, %1048 ], [ %1026, %1034 ]
  %1039 = phi i64 [ %1058, %1048 ], [ %1025, %1034 ]
  %1040 = phi i32 [ %1051, %1048 ], [ %1018, %1034 ]
  %1041 = icmp eq i32 %1040, 0
  br i1 %1041, label %1042, label %1048

1042:                                             ; preds = %1036
  %1043 = call i32 %1(i8* %2, i8** nonnull %6) #3
  %1044 = icmp eq i32 %1043, 0
  br i1 %1044, label %1047, label %1045

1045:                                             ; preds = %1042
  %1046 = load i32, i32* %47, align 4
  br label %1048

1047:                                             ; preds = %1042
  store i8* null, i8** %6, align 8
  br label %1292

1048:                                             ; preds = %1045, %1036
  %1049 = phi i32 [ %1046, %1045 ], [ %1037, %1036 ]
  %1050 = phi i32 [ %1043, %1045 ], [ %1040, %1036 ]
  %1051 = add i32 %1050, -1
  %1052 = load i8*, i8** %6, align 8
  %1053 = getelementptr inbounds i8, i8* %1052, i64 1
  store i8* %1053, i8** %6, align 8
  %1054 = load i8, i8* %1052, align 1
  %1055 = zext i8 %1054 to i64
  %1056 = zext i32 %1038 to i64
  %1057 = shl i64 %1055, %1056
  %1058 = add i64 %1057, %1039
  %1059 = add i32 %1038, 8
  %1060 = icmp ult i32 %1059, %1049
  br i1 %1060, label %1036, label %1061

1061:                                             ; preds = %1048
  %1062 = load i32, i32* %48, align 8
  br label %1063

1063:                                             ; preds = %1061, %1034
  %1064 = phi i32 [ %1031, %1034 ], [ %1062, %1061 ]
  %1065 = phi i32 [ %1018, %1034 ], [ %1051, %1061 ]
  %1066 = phi i64 [ %1025, %1034 ], [ %1058, %1061 ]
  %1067 = phi i32 [ %1026, %1034 ], [ %1059, %1061 ]
  %1068 = phi i32 [ %1032, %1034 ], [ %1049, %1061 ]
  %1069 = trunc i64 %1066 to i32
  %1070 = shl nsw i32 -1, %1068
  %1071 = xor i32 %1070, -1
  %1072 = and i32 %1071, %1069
  %1073 = add i32 %1064, %1072
  store i32 %1073, i32* %48, align 8
  %1074 = zext i32 %1068 to i64
  %1075 = lshr i64 %1066, %1074
  %1076 = sub i32 %1067, %1068
  br label %1077

1077:                                             ; preds = %1030, %1063
  %1078 = phi i32 [ %1073, %1063 ], [ %1031, %1030 ]
  %1079 = phi i32 [ %1065, %1063 ], [ %1018, %1030 ]
  %1080 = phi i64 [ %1075, %1063 ], [ %1025, %1030 ]
  %1081 = phi i32 [ %1076, %1063 ], [ %1026, %1030 ]
  %1082 = load i32, i32* %29, align 4
  %1083 = load i32, i32* %18, align 8
  %1084 = icmp ult i32 %1083, %1082
  %1085 = select i1 %1084, i32 %61, i32 0
  %1086 = sub i32 %1082, %1085
  %1087 = icmp ugt i32 %1078, %1086
  br i1 %1087, label %1088, label %1089

1088:                                             ; preds = %1077
  store i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.11, i64 0, i64 0), i8** %15, align 8
  store i32 16209, i32* %16, align 8
  br label %1282

1089:                                             ; preds = %1077, %1268
  %1090 = phi i8* [ %1269, %1268 ], [ %59, %1077 ]
  %1091 = phi i32 [ %1270, %1268 ], [ %61, %1077 ]
  %1092 = icmp eq i32 %1091, 0
  br i1 %1092, label %1093, label %1098

1093:                                             ; preds = %1089
  %1094 = load i8*, i8** %27, align 8
  %1095 = load i32, i32* %29, align 4
  store i32 %1095, i32* %18, align 8
  %1096 = call i32 %3(i8* %4, i8* %1094, i32 %1095) #3
  %1097 = icmp eq i32 %1096, 0
  br i1 %1097, label %1098, label %1292

1098:                                             ; preds = %1093, %1089
  %1099 = phi i8* [ %1094, %1093 ], [ %1090, %1089 ]
  %1100 = phi i32 [ %1095, %1093 ], [ %1091, %1089 ]
  %1101 = load i32, i32* %29, align 4
  %1102 = load i32, i32* %48, align 8
  %1103 = sub i32 %1101, %1102
  %1104 = icmp ugt i32 %1100, %1103
  %1105 = zext i32 %1103 to i64
  %1106 = zext i32 %1102 to i64
  %1107 = sub nsw i64 0, %1106
  %1108 = select i1 %1104, i32 %1103, i32 0
  %1109 = sub i32 %1100, %1108
  %1110 = select i1 %1104, i64 %1105, i64 %1107
  %1111 = getelementptr inbounds i8, i8* %1099, i64 %1110
  %1112 = load i32, i32* %46, align 4
  %1113 = icmp ugt i32 %1109, %1112
  %1114 = select i1 %1113, i32 %1112, i32 %1109
  %1115 = sub i32 %1112, %1114
  store i32 %1115, i32* %46, align 4
  %1116 = add i32 %1114, -1
  %1117 = zext i32 %1116 to i64
  %1118 = add nuw nsw i64 %1117, 1
  %1119 = icmp ult i64 %1118, 32
  br i1 %1119, label %1214, label %1120

1120:                                             ; preds = %1098
  %1121 = getelementptr i8, i8* %1099, i64 1
  %1122 = add i32 %1114, -1
  %1123 = zext i32 %1122 to i64
  %1124 = getelementptr i8, i8* %1121, i64 %1123
  %1125 = getelementptr i8, i8* %1099, i64 1
  %1126 = add nsw i64 %1110, %1123
  %1127 = getelementptr i8, i8* %1125, i64 %1126
  %1128 = icmp ult i8* %1099, %1127
  %1129 = icmp ult i8* %1111, %1124
  %1130 = and i1 %1128, %1129
  br i1 %1130, label %1214, label %1131

1131:                                             ; preds = %1120
  %1132 = and i64 %1118, 8589934560
  %1133 = getelementptr i8, i8* %1099, i64 %1132
  %1134 = trunc i64 %1132 to i32
  %1135 = sub i32 %1114, %1134
  %1136 = getelementptr i8, i8* %1111, i64 %1132
  %1137 = add nsw i64 %1132, -32
  %1138 = lshr exact i64 %1137, 5
  %1139 = add nuw nsw i64 %1138, 1
  %1140 = and i64 %1139, 3
  %1141 = icmp ult i64 %1137, 96
  br i1 %1141, label %1193, label %1142

1142:                                             ; preds = %1131
  %1143 = sub nsw i64 %1139, %1140
  br label %1144

1144:                                             ; preds = %1144, %1142
  %1145 = phi i64 [ 0, %1142 ], [ %1190, %1144 ]
  %1146 = phi i64 [ %1143, %1142 ], [ %1191, %1144 ]
  %1147 = getelementptr i8, i8* %1099, i64 %1145
  %1148 = getelementptr i8, i8* %1111, i64 %1145
  %1149 = bitcast i8* %1148 to <16 x i8>*
  %1150 = load <16 x i8>, <16 x i8>* %1149, align 1, !alias.scope !5
  %1151 = getelementptr i8, i8* %1148, i64 16
  %1152 = bitcast i8* %1151 to <16 x i8>*
  %1153 = load <16 x i8>, <16 x i8>* %1152, align 1, !alias.scope !5
  %1154 = bitcast i8* %1147 to <16 x i8>*
  store <16 x i8> %1150, <16 x i8>* %1154, align 1, !alias.scope !8, !noalias !5
  %1155 = getelementptr i8, i8* %1147, i64 16
  %1156 = bitcast i8* %1155 to <16 x i8>*
  store <16 x i8> %1153, <16 x i8>* %1156, align 1, !alias.scope !8, !noalias !5
  %1157 = or i64 %1145, 32
  %1158 = getelementptr i8, i8* %1099, i64 %1157
  %1159 = getelementptr i8, i8* %1111, i64 %1157
  %1160 = bitcast i8* %1159 to <16 x i8>*
  %1161 = load <16 x i8>, <16 x i8>* %1160, align 1, !alias.scope !5
  %1162 = getelementptr i8, i8* %1159, i64 16
  %1163 = bitcast i8* %1162 to <16 x i8>*
  %1164 = load <16 x i8>, <16 x i8>* %1163, align 1, !alias.scope !5
  %1165 = bitcast i8* %1158 to <16 x i8>*
  store <16 x i8> %1161, <16 x i8>* %1165, align 1, !alias.scope !8, !noalias !5
  %1166 = getelementptr i8, i8* %1158, i64 16
  %1167 = bitcast i8* %1166 to <16 x i8>*
  store <16 x i8> %1164, <16 x i8>* %1167, align 1, !alias.scope !8, !noalias !5
  %1168 = or i64 %1145, 64
  %1169 = getelementptr i8, i8* %1099, i64 %1168
  %1170 = getelementptr i8, i8* %1111, i64 %1168
  %1171 = bitcast i8* %1170 to <16 x i8>*
  %1172 = load <16 x i8>, <16 x i8>* %1171, align 1, !alias.scope !5
  %1173 = getelementptr i8, i8* %1170, i64 16
  %1174 = bitcast i8* %1173 to <16 x i8>*
  %1175 = load <16 x i8>, <16 x i8>* %1174, align 1, !alias.scope !5
  %1176 = bitcast i8* %1169 to <16 x i8>*
  store <16 x i8> %1172, <16 x i8>* %1176, align 1, !alias.scope !8, !noalias !5
  %1177 = getelementptr i8, i8* %1169, i64 16
  %1178 = bitcast i8* %1177 to <16 x i8>*
  store <16 x i8> %1175, <16 x i8>* %1178, align 1, !alias.scope !8, !noalias !5
  %1179 = or i64 %1145, 96
  %1180 = getelementptr i8, i8* %1099, i64 %1179
  %1181 = getelementptr i8, i8* %1111, i64 %1179
  %1182 = bitcast i8* %1181 to <16 x i8>*
  %1183 = load <16 x i8>, <16 x i8>* %1182, align 1, !alias.scope !5
  %1184 = getelementptr i8, i8* %1181, i64 16
  %1185 = bitcast i8* %1184 to <16 x i8>*
  %1186 = load <16 x i8>, <16 x i8>* %1185, align 1, !alias.scope !5
  %1187 = bitcast i8* %1180 to <16 x i8>*
  store <16 x i8> %1183, <16 x i8>* %1187, align 1, !alias.scope !8, !noalias !5
  %1188 = getelementptr i8, i8* %1180, i64 16
  %1189 = bitcast i8* %1188 to <16 x i8>*
  store <16 x i8> %1186, <16 x i8>* %1189, align 1, !alias.scope !8, !noalias !5
  %1190 = add i64 %1145, 128
  %1191 = add i64 %1146, -4
  %1192 = icmp eq i64 %1191, 0
  br i1 %1192, label %1193, label %1144, !llvm.loop !10

1193:                                             ; preds = %1144, %1131
  %1194 = phi i64 [ 0, %1131 ], [ %1190, %1144 ]
  %1195 = icmp eq i64 %1140, 0
  br i1 %1195, label %1212, label %1196

1196:                                             ; preds = %1193, %1196
  %1197 = phi i64 [ %1209, %1196 ], [ %1194, %1193 ]
  %1198 = phi i64 [ %1210, %1196 ], [ %1140, %1193 ]
  %1199 = getelementptr i8, i8* %1099, i64 %1197
  %1200 = getelementptr i8, i8* %1111, i64 %1197
  %1201 = bitcast i8* %1200 to <16 x i8>*
  %1202 = load <16 x i8>, <16 x i8>* %1201, align 1, !alias.scope !5
  %1203 = getelementptr i8, i8* %1200, i64 16
  %1204 = bitcast i8* %1203 to <16 x i8>*
  %1205 = load <16 x i8>, <16 x i8>* %1204, align 1, !alias.scope !5
  %1206 = bitcast i8* %1199 to <16 x i8>*
  store <16 x i8> %1202, <16 x i8>* %1206, align 1, !alias.scope !8, !noalias !5
  %1207 = getelementptr i8, i8* %1199, i64 16
  %1208 = bitcast i8* %1207 to <16 x i8>*
  store <16 x i8> %1205, <16 x i8>* %1208, align 1, !alias.scope !8, !noalias !5
  %1209 = add i64 %1197, 32
  %1210 = add i64 %1198, -1
  %1211 = icmp eq i64 %1210, 0
  br i1 %1211, label %1212, label %1196, !llvm.loop !12

1212:                                             ; preds = %1196, %1193
  %1213 = icmp eq i64 %1118, %1132
  br i1 %1213, label %1268, label %1214

1214:                                             ; preds = %1212, %1120, %1098
  %1215 = phi i8* [ %1099, %1120 ], [ %1099, %1098 ], [ %1133, %1212 ]
  %1216 = phi i32 [ %1114, %1120 ], [ %1114, %1098 ], [ %1135, %1212 ]
  %1217 = phi i8* [ %1111, %1120 ], [ %1111, %1098 ], [ %1136, %1212 ]
  %1218 = add i32 %1216, -1
  %1219 = and i32 %1216, 7
  %1220 = icmp eq i32 %1219, 0
  br i1 %1220, label %1232, label %1221

1221:                                             ; preds = %1214, %1221
  %1222 = phi i8* [ %1228, %1221 ], [ %1215, %1214 ]
  %1223 = phi i32 [ %1229, %1221 ], [ %1216, %1214 ]
  %1224 = phi i8* [ %1226, %1221 ], [ %1217, %1214 ]
  %1225 = phi i32 [ %1230, %1221 ], [ %1219, %1214 ]
  %1226 = getelementptr inbounds i8, i8* %1224, i64 1
  %1227 = load i8, i8* %1224, align 1
  %1228 = getelementptr inbounds i8, i8* %1222, i64 1
  store i8 %1227, i8* %1222, align 1
  %1229 = add i32 %1223, -1
  %1230 = add i32 %1225, -1
  %1231 = icmp eq i32 %1230, 0
  br i1 %1231, label %1232, label %1221, !llvm.loop !13

1232:                                             ; preds = %1221, %1214
  %1233 = phi i8* [ undef, %1214 ], [ %1228, %1221 ]
  %1234 = phi i8* [ %1215, %1214 ], [ %1228, %1221 ]
  %1235 = phi i32 [ %1216, %1214 ], [ %1229, %1221 ]
  %1236 = phi i8* [ %1217, %1214 ], [ %1226, %1221 ]
  %1237 = icmp ult i32 %1218, 7
  br i1 %1237, label %1268, label %1238

1238:                                             ; preds = %1232, %1238
  %1239 = phi i8* [ %1265, %1238 ], [ %1234, %1232 ]
  %1240 = phi i32 [ %1266, %1238 ], [ %1235, %1232 ]
  %1241 = phi i8* [ %1263, %1238 ], [ %1236, %1232 ]
  %1242 = getelementptr inbounds i8, i8* %1241, i64 1
  %1243 = load i8, i8* %1241, align 1
  %1244 = getelementptr inbounds i8, i8* %1239, i64 1
  store i8 %1243, i8* %1239, align 1
  %1245 = getelementptr inbounds i8, i8* %1241, i64 2
  %1246 = load i8, i8* %1242, align 1
  %1247 = getelementptr inbounds i8, i8* %1239, i64 2
  store i8 %1246, i8* %1244, align 1
  %1248 = getelementptr inbounds i8, i8* %1241, i64 3
  %1249 = load i8, i8* %1245, align 1
  %1250 = getelementptr inbounds i8, i8* %1239, i64 3
  store i8 %1249, i8* %1247, align 1
  %1251 = getelementptr inbounds i8, i8* %1241, i64 4
  %1252 = load i8, i8* %1248, align 1
  %1253 = getelementptr inbounds i8, i8* %1239, i64 4
  store i8 %1252, i8* %1250, align 1
  %1254 = getelementptr inbounds i8, i8* %1241, i64 5
  %1255 = load i8, i8* %1251, align 1
  %1256 = getelementptr inbounds i8, i8* %1239, i64 5
  store i8 %1255, i8* %1253, align 1
  %1257 = getelementptr inbounds i8, i8* %1241, i64 6
  %1258 = load i8, i8* %1254, align 1
  %1259 = getelementptr inbounds i8, i8* %1239, i64 6
  store i8 %1258, i8* %1256, align 1
  %1260 = getelementptr inbounds i8, i8* %1241, i64 7
  %1261 = load i8, i8* %1257, align 1
  %1262 = getelementptr inbounds i8, i8* %1239, i64 7
  store i8 %1261, i8* %1259, align 1
  %1263 = getelementptr inbounds i8, i8* %1241, i64 8
  %1264 = load i8, i8* %1260, align 1
  %1265 = getelementptr inbounds i8, i8* %1239, i64 8
  store i8 %1264, i8* %1262, align 1
  %1266 = add i32 %1240, -8
  %1267 = icmp eq i32 %1266, 0
  br i1 %1267, label %1268, label %1238, !llvm.loop !14

1268:                                             ; preds = %1232, %1238, %1212
  %1269 = phi i8* [ %1133, %1212 ], [ %1233, %1232 ], [ %1265, %1238 ]
  %1270 = sub i32 %1100, %1114
  %1271 = load i32, i32* %46, align 4
  %1272 = icmp eq i32 %1271, 0
  br i1 %1272, label %1282, label %1089

1273:                                             ; preds = %57
  %1274 = load i32, i32* %29, align 4
  %1275 = icmp ugt i32 %1274, %61
  br i1 %1275, label %1276, label %1292

1276:                                             ; preds = %1273
  %1277 = load i8*, i8** %27, align 8
  %1278 = sub i32 %1274, %61
  %1279 = call i32 %3(i8* %4, i8* %1277, i32 %1278) #3
  %1280 = icmp eq i32 %1279, 0
  %1281 = select i1 %1280, i32 1, i32 -5
  br label %1292

1282:                                             ; preds = %1268, %471, %581, %607, %1088, %1029, %829, %825, %815, %662, %630, %621, %617, %337, %236, %190, %150, %108, %76
  %1283 = phi i8* [ %663, %662 ], [ %820, %815 ], [ %59, %825 ], [ %59, %829 ], [ %59, %1029 ], [ %59, %1088 ], [ %59, %236 ], [ %59, %337 ], [ %59, %607 ], [ %59, %617 ], [ %59, %621 ], [ %59, %630 ], [ %59, %150 ], [ %191, %190 ], [ %59, %76 ], [ %59, %108 ], [ %59, %581 ], [ %59, %471 ], [ %1269, %1268 ]
  %1284 = phi i32 [ %666, %662 ], [ %794, %815 ], [ %794, %825 ], [ %794, %829 ], [ %1018, %1029 ], [ %1079, %1088 ], [ %217, %236 ], [ %293, %337 ], [ %609, %607 ], [ %609, %617 ], [ %609, %621 ], [ %609, %630 ], [ %143, %150 ], [ %192, %190 ], [ %60, %76 ], [ %96, %108 ], [ %551, %581 ], [ %463, %471 ], [ %1079, %1268 ]
  %1285 = phi i32 [ %664, %662 ], [ %821, %815 ], [ %61, %825 ], [ %61, %829 ], [ %61, %1029 ], [ %61, %1088 ], [ %61, %236 ], [ %61, %337 ], [ %61, %607 ], [ %61, %617 ], [ %61, %621 ], [ %61, %630 ], [ %61, %150 ], [ %193, %190 ], [ %61, %76 ], [ %61, %108 ], [ %61, %581 ], [ %61, %471 ], [ %1270, %1268 ]
  %1286 = phi i64 [ %667, %662 ], [ %802, %815 ], [ %802, %825 ], [ %802, %829 ], [ %1025, %1029 ], [ %1080, %1088 ], [ %231, %236 ], [ %304, %337 ], [ %610, %607 ], [ %610, %617 ], [ %610, %621 ], [ %610, %630 ], [ %144, %150 ], [ 0, %190 ], [ %79, %76 ], [ %110, %108 ], [ %552, %581 ], [ %467, %471 ], [ %1080, %1268 ]
  %1287 = phi i32 [ %668, %662 ], [ %803, %815 ], [ %803, %825 ], [ %803, %829 ], [ %1026, %1029 ], [ %1081, %1088 ], [ %232, %236 ], [ %305, %337 ], [ %611, %607 ], [ %611, %617 ], [ %611, %621 ], [ %611, %630 ], [ %145, %150 ], [ 0, %190 ], [ %80, %76 ], [ %111, %108 ], [ %553, %581 ], [ %468, %471 ], [ %1081, %1268 ]
  %1288 = load i32, i32* %16, align 8
  br label %57

1289:                                             ; preds = %808, %57
  %1290 = phi i32 [ %60, %57 ], [ %794, %808 ]
  %1291 = phi i32 [ -3, %57 ], [ -5, %808 ]
  br label %1292

1292:                                             ; preds = %1093, %168, %57, %1289, %1276, %1273, %1047, %976, %908, %846, %752, %682, %524, %490, %448, %374, %276, %202, %164, %128, %84
  %1293 = phi i32 [ %60, %1273 ], [ 0, %846 ], [ 0, %1047 ], [ 0, %976 ], [ 0, %908 ], [ 0, %752 ], [ 0, %682 ], [ 0, %202 ], [ 0, %276 ], [ 0, %448 ], [ 0, %490 ], [ 0, %524 ], [ 0, %374 ], [ 0, %128 ], [ 0, %164 ], [ 0, %84 ], [ %60, %1276 ], [ %1290, %1289 ], [ %60, %57 ], [ %166, %168 ], [ %1079, %1093 ]
  %1294 = phi i32 [ 1, %1273 ], [ -5, %846 ], [ -5, %1047 ], [ -5, %976 ], [ -5, %908 ], [ -5, %752 ], [ -5, %682 ], [ -5, %202 ], [ -5, %276 ], [ -5, %448 ], [ -5, %490 ], [ -5, %524 ], [ -5, %374 ], [ -5, %128 ], [ -5, %164 ], [ -5, %84 ], [ %1281, %1276 ], [ %1291, %1289 ], [ -2, %57 ], [ -5, %168 ], [ -5, %1093 ]
  %1295 = load i64, i64* %51, align 8
  store i64 %1295, i64* %52, align 8
  store i32 %1293, i32* %53, align 8
  br label %1296

1296:                                             ; preds = %5, %9, %1292
  %1297 = phi i32 [ %1294, %1292 ], [ -2, %9 ], [ -2, %5 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #3
  ret i32 %1297
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare i32 @Cr_z_inflate_table(i32, i16*, i32, %struct.code**, i32*, i16*) local_unnamed_addr #2

declare void @Cr_z_inflate_fast(%struct.z_stream_s*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @Cr_z_inflateBackEnd(%struct.z_stream_s*) local_unnamed_addr #0 {
  %2 = icmp eq %struct.z_stream_s* %0, null
  br i1 %2, label %15, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 7
  %5 = load %struct.internal_state*, %struct.internal_state** %4, align 8
  %6 = icmp eq %struct.internal_state* %5, null
  br i1 %6, label %15, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 9
  %9 = load void (i8*, i8*)*, void (i8*, i8*)** %8, align 8
  %10 = icmp eq void (i8*, i8*)* %9, null
  br i1 %10, label %15, label %11

11:                                               ; preds = %7
  %12 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 10
  %13 = load i8*, i8** %12, align 8
  %14 = bitcast %struct.internal_state* %5 to i8*
  tail call void %9(i8* %13, i8* nonnull %14) #3
  store %struct.internal_state* null, %struct.internal_state** %4, align 8
  br label %15

15:                                               ; preds = %1, %3, %7, %11
  %16 = phi i32 [ 0, %11 ], [ -2, %7 ], [ -2, %3 ], [ -2, %1 ]
  ret i32 %16
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !3}
!5 = !{!6}
!6 = distinct !{!6, !7}
!7 = distinct !{!7, !"LVerDomain"}
!8 = !{!9}
!9 = distinct !{!9, !7}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.isvectorized", i32 1}
!12 = distinct !{!12, !3}
!13 = distinct !{!13, !3}
!14 = distinct !{!14, !11}
