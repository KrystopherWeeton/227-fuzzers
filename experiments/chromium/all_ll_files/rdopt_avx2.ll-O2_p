; ModuleID = '../../third_party/libaom/source/libaom/av1/encoder/x86/rdopt_avx2.c'
source_filename = "../../third_party/libaom/source/libaom/av1/encoder/x86/rdopt_avx2.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_get_horver_correlation_full_avx2(i16* readonly, i32, i32, i32, float* nocapture, float* nocapture) local_unnamed_addr #0 {
  %7 = add nsw i32 %3, -4
  %8 = icmp slt i32 %7, 0
  br i1 %8, label %24, label %9

9:                                                ; preds = %6
  %10 = add nsw i32 %2, -4
  %11 = icmp slt i32 %10, 0
  %12 = sext i32 %1 to i64
  %13 = shl nsw i32 %1, 1
  %14 = sext i32 %13 to i64
  %15 = mul nsw i32 %1, 3
  %16 = sext i32 %15 to i64
  %17 = sext i32 %10 to i64
  %18 = sext i32 %7 to i64
  br label %19

19:                                               ; preds = %9, %28
  %20 = phi i64 [ 0, %9 ], [ %44, %28 ]
  %21 = phi <4 x i64> [ zeroinitializer, %9 ], [ %43, %28 ]
  br i1 %11, label %28, label %22

22:                                               ; preds = %19
  %23 = mul nsw i64 %20, %12
  br label %46

24:                                               ; preds = %28, %6
  %25 = phi <4 x i64> [ zeroinitializer, %6 ], [ %43, %28 ]
  %26 = srem i32 %3, 3
  %27 = icmp eq i32 %26, 1
  br i1 %27, label %84, label %202

28:                                               ; preds = %46, %19
  %29 = phi <8 x i32> [ zeroinitializer, %19 ], [ %73, %46 ]
  %30 = phi <8 x i32> [ zeroinitializer, %19 ], [ %77, %46 ]
  %31 = phi <8 x i32> [ zeroinitializer, %19 ], [ %79, %46 ]
  %32 = phi <8 x i32> [ zeroinitializer, %19 ], [ %81, %46 ]
  %33 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %29, <8 x i32> %30) #3
  %34 = tail call <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32> %31, <8 x i32> %32) #3
  %35 = shufflevector <8 x i32> %34, <8 x i32> %33, <4 x i32> <i32 7, i32 5, i32 15, i32 13>
  %36 = sext <4 x i32> %35 to <4 x i64>
  %37 = shufflevector <8 x i32> %34, <8 x i32> %33, <4 x i32> <i32 6, i32 4, i32 14, i32 12>
  %38 = sext <4 x i32> %37 to <4 x i64>
  %39 = shufflevector <8 x i32> %34, <8 x i32> %33, <4 x i32> <i32 3, i32 1, i32 11, i32 9>
  %40 = sext <4 x i32> %39 to <4 x i64>
  %41 = add <4 x i64> %21, %36
  %42 = add <4 x i64> %41, %38
  %43 = add <4 x i64> %42, %40
  %44 = add nuw nsw i64 %20, 3
  %45 = icmp sgt i64 %44, %18
  br i1 %45, label %24, label %19

46:                                               ; preds = %22, %46
  %47 = phi i64 [ 0, %22 ], [ %82, %46 ]
  %48 = phi <8 x i32> [ zeroinitializer, %22 ], [ %81, %46 ]
  %49 = phi <8 x i32> [ zeroinitializer, %22 ], [ %79, %46 ]
  %50 = phi <8 x i32> [ zeroinitializer, %22 ], [ %77, %46 ]
  %51 = phi <8 x i32> [ zeroinitializer, %22 ], [ %73, %46 ]
  %52 = add nsw i64 %47, %23
  %53 = getelementptr inbounds i16, i16* %0, i64 %52
  %54 = bitcast i16* %53 to i64*
  %55 = load i64, i64* %54, align 1
  %56 = getelementptr inbounds i16, i16* %53, i64 %12
  %57 = bitcast i16* %56 to i64*
  %58 = load i64, i64* %57, align 1
  %59 = getelementptr inbounds i16, i16* %53, i64 %14
  %60 = bitcast i16* %59 to i64*
  %61 = load i64, i64* %60, align 1
  %62 = getelementptr inbounds i16, i16* %53, i64 %16
  %63 = bitcast i16* %62 to i64*
  %64 = load i64, i64* %63, align 1
  %65 = insertelement <4 x i64> undef, i64 %64, i32 0
  %66 = insertelement <4 x i64> %65, i64 %61, i32 1
  %67 = insertelement <4 x i64> %66, i64 %58, i32 2
  %68 = insertelement <4 x i64> %67, i64 %55, i32 3
  %69 = shl <4 x i64> %68, <i64 16, i64 16, i64 16, i64 16>
  %70 = bitcast <4 x i64> %68 to <16 x i16>
  %71 = bitcast <4 x i64> %69 to <16 x i16>
  %72 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %70, <16 x i16> %71) #3
  %73 = add <8 x i32> %72, %51
  %74 = shufflevector <4 x i64> %69, <4 x i64> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 2>
  %75 = bitcast <4 x i64> %74 to <16 x i16>
  %76 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %71, <16 x i16> %75) #3
  %77 = add <8 x i32> %76, %50
  %78 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %71, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #3
  %79 = add <8 x i32> %78, %49
  %80 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %71, <16 x i16> %71) #3
  %81 = add <8 x i32> %80, %48
  %82 = add nuw nsw i64 %47, 3
  %83 = icmp sgt i64 %82, %17
  br i1 %83, label %28, label %46

84:                                               ; preds = %24
  %85 = add nsw i32 %3, -1
  %86 = mul nsw i32 %85, %1
  %87 = sext i32 %86 to i64
  %88 = getelementptr inbounds i16, i16* %0, i64 %87
  %89 = load i16, i16* %88, align 2
  %90 = sext i16 %89 to i64
  %91 = extractelement <4 x i64> %25, i32 1
  %92 = add nsw i64 %91, %90
  %93 = sext i16 %89 to i32
  %94 = mul nsw i32 %93, %93
  %95 = zext i32 %94 to i64
  %96 = extractelement <4 x i64> %25, i32 0
  %97 = add nsw i64 %96, %95
  %98 = add nsw i32 %2, -1
  %99 = icmp sgt i32 %98, 0
  %100 = extractelement <4 x i64> %25, i32 2
  %101 = extractelement <4 x i64> %25, i32 3
  br i1 %99, label %102, label %380

102:                                              ; preds = %84
  %103 = zext i32 %98 to i64
  %104 = icmp ult i32 %98, 4
  br i1 %104, label %168, label %105

105:                                              ; preds = %102
  %106 = and i64 %103, 4294967292
  %107 = shufflevector <4 x i64> <i64 undef, i64 0, i64 0, i64 0>, <4 x i64> %25, <4 x i32> <i32 7, i32 1, i32 2, i32 3>
  %108 = insertelement <4 x i64> <i64 undef, i64 0, i64 0, i64 0>, i64 %92, i32 0
  %109 = insertelement <4 x i64> <i64 undef, i64 0, i64 0, i64 0>, i64 %97, i32 0
  %110 = insertelement <4 x i64> <i64 undef, i64 0, i64 0, i64 0>, i64 %90, i32 0
  %111 = insertelement <4 x i64> <i64 undef, i64 0, i64 0, i64 0>, i64 %95, i32 0
  br label %112

112:                                              ; preds = %112, %105
  %113 = phi i64 [ 0, %105 ], [ %139, %112 ]
  %114 = phi <4 x i64> [ %107, %105 ], [ %131, %112 ]
  %115 = phi <4 x i64> [ %108, %105 ], [ %133, %112 ]
  %116 = phi <4 x i64> [ %109, %105 ], [ %136, %112 ]
  %117 = phi <4 x i64> [ %110, %105 ], [ %137, %112 ]
  %118 = phi <4 x i64> [ %111, %105 ], [ %138, %112 ]
  %119 = add nsw i64 %113, %87
  %120 = getelementptr inbounds i16, i16* %0, i64 %119
  %121 = bitcast i16* %120 to <4 x i16>*
  %122 = load <4 x i16>, <4 x i16>* %121, align 2
  %123 = add nsw i64 %119, 1
  %124 = getelementptr inbounds i16, i16* %0, i64 %123
  %125 = bitcast i16* %124 to <4 x i16>*
  %126 = load <4 x i16>, <4 x i16>* %125, align 2
  %127 = sext <4 x i16> %122 to <4 x i32>
  %128 = sext <4 x i16> %126 to <4 x i32>
  %129 = mul nsw <4 x i32> %128, %127
  %130 = sext <4 x i32> %129 to <4 x i64>
  %131 = add nsw <4 x i64> %114, %130
  %132 = sext <4 x i16> %126 to <4 x i64>
  %133 = add nsw <4 x i64> %115, %132
  %134 = mul nsw <4 x i32> %128, %128
  %135 = zext <4 x i32> %134 to <4 x i64>
  %136 = add nsw <4 x i64> %116, %135
  %137 = add nsw <4 x i64> %117, %132
  %138 = add nuw nsw <4 x i64> %118, %135
  %139 = add i64 %113, 4
  %140 = icmp eq i64 %139, %106
  br i1 %140, label %141, label %112, !llvm.loop !2

141:                                              ; preds = %112
  %142 = shufflevector <4 x i64> %138, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %143 = add <4 x i64> %138, %142
  %144 = shufflevector <4 x i64> %143, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %145 = add <4 x i64> %143, %144
  %146 = extractelement <4 x i64> %145, i32 0
  %147 = shufflevector <4 x i64> %137, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %148 = add <4 x i64> %137, %147
  %149 = shufflevector <4 x i64> %148, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %150 = add <4 x i64> %148, %149
  %151 = extractelement <4 x i64> %150, i32 0
  %152 = shufflevector <4 x i64> %136, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %153 = add <4 x i64> %136, %152
  %154 = shufflevector <4 x i64> %153, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %155 = add <4 x i64> %153, %154
  %156 = extractelement <4 x i64> %155, i32 0
  %157 = shufflevector <4 x i64> %133, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %158 = add <4 x i64> %133, %157
  %159 = shufflevector <4 x i64> %158, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %160 = add <4 x i64> %158, %159
  %161 = extractelement <4 x i64> %160, i32 0
  %162 = shufflevector <4 x i64> %131, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %163 = add <4 x i64> %131, %162
  %164 = shufflevector <4 x i64> %163, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %165 = add <4 x i64> %163, %164
  %166 = extractelement <4 x i64> %165, i32 0
  %167 = icmp eq i64 %106, %103
  br i1 %167, label %380, label %168

168:                                              ; preds = %141, %102
  %169 = phi i64 [ 0, %102 ], [ %106, %141 ]
  %170 = phi i64 [ %101, %102 ], [ %166, %141 ]
  %171 = phi i64 [ %92, %102 ], [ %161, %141 ]
  %172 = phi i64 [ %97, %102 ], [ %156, %141 ]
  %173 = phi i64 [ %90, %102 ], [ %151, %141 ]
  %174 = phi i64 [ %95, %102 ], [ %146, %141 ]
  br label %175

175:                                              ; preds = %168, %175
  %176 = phi i64 [ %200, %175 ], [ %169, %168 ]
  %177 = phi i64 [ %192, %175 ], [ %170, %168 ]
  %178 = phi i64 [ %194, %175 ], [ %171, %168 ]
  %179 = phi i64 [ %197, %175 ], [ %172, %168 ]
  %180 = phi i64 [ %198, %175 ], [ %173, %168 ]
  %181 = phi i64 [ %199, %175 ], [ %174, %168 ]
  %182 = add nsw i64 %176, %87
  %183 = getelementptr inbounds i16, i16* %0, i64 %182
  %184 = load i16, i16* %183, align 2
  %185 = add nsw i64 %182, 1
  %186 = getelementptr inbounds i16, i16* %0, i64 %185
  %187 = load i16, i16* %186, align 2
  %188 = sext i16 %184 to i32
  %189 = sext i16 %187 to i32
  %190 = mul nsw i32 %189, %188
  %191 = sext i32 %190 to i64
  %192 = add nsw i64 %177, %191
  %193 = sext i16 %187 to i64
  %194 = add nsw i64 %178, %193
  %195 = mul nsw i32 %189, %189
  %196 = zext i32 %195 to i64
  %197 = add nsw i64 %179, %196
  %198 = add nsw i64 %180, %193
  %199 = add nuw nsw i64 %181, %196
  %200 = add nuw nsw i64 %176, 1
  %201 = icmp eq i64 %200, %103
  br i1 %201, label %380, label %175, !llvm.loop !4

202:                                              ; preds = %24
  %203 = add nsw i32 %3, -2
  %204 = mul nsw i32 %203, %1
  %205 = sext i32 %204 to i64
  %206 = getelementptr inbounds i16, i16* %0, i64 %205
  %207 = load i16, i16* %206, align 2
  %208 = add nsw i32 %3, -1
  %209 = mul nsw i32 %208, %1
  %210 = sext i32 %209 to i64
  %211 = getelementptr inbounds i16, i16* %0, i64 %210
  %212 = load i16, i16* %211, align 2
  %213 = sext i16 %207 to i32
  %214 = sext i16 %212 to i32
  %215 = add nsw i32 %214, %213
  %216 = sext i32 %215 to i64
  %217 = extractelement <4 x i64> %25, i32 1
  %218 = add nsw i64 %217, %216
  %219 = mul nsw i32 %213, %213
  %220 = mul nsw i32 %214, %214
  %221 = add nuw nsw i32 %220, %219
  %222 = zext i32 %221 to i64
  %223 = extractelement <4 x i64> %25, i32 0
  %224 = add nsw i64 %223, %222
  %225 = sext i16 %212 to i64
  %226 = zext i32 %220 to i64
  %227 = add nsw i32 %2, -1
  %228 = icmp sgt i32 %227, 0
  %229 = extractelement <4 x i64> %25, i32 2
  %230 = extractelement <4 x i64> %25, i32 3
  br i1 %228, label %231, label %380

231:                                              ; preds = %202
  %232 = zext i32 %227 to i64
  %233 = icmp ult i32 %227, 4
  br i1 %233, label %325, label %234

234:                                              ; preds = %231
  %235 = and i64 %232, 4294967292
  %236 = shufflevector <4 x i64> <i64 undef, i64 0, i64 0, i64 0>, <4 x i64> %25, <4 x i32> <i32 7, i32 1, i32 2, i32 3>
  %237 = shufflevector <4 x i64> <i64 undef, i64 0, i64 0, i64 0>, <4 x i64> %25, <4 x i32> <i32 6, i32 1, i32 2, i32 3>
  %238 = insertelement <4 x i64> <i64 undef, i64 0, i64 0, i64 0>, i64 %218, i32 0
  %239 = insertelement <4 x i64> <i64 undef, i64 0, i64 0, i64 0>, i64 %224, i32 0
  %240 = insertelement <4 x i64> <i64 undef, i64 0, i64 0, i64 0>, i64 %225, i32 0
  %241 = insertelement <4 x i64> <i64 undef, i64 0, i64 0, i64 0>, i64 %226, i32 0
  br label %242

242:                                              ; preds = %242, %234
  %243 = phi i64 [ 0, %234 ], [ %291, %242 ]
  %244 = phi <4 x i64> [ %236, %234 ], [ %278, %242 ]
  %245 = phi <4 x i64> [ %237, %234 ], [ %274, %242 ]
  %246 = phi <4 x i64> [ %238, %234 ], [ %281, %242 ]
  %247 = phi <4 x i64> [ %239, %234 ], [ %286, %242 ]
  %248 = phi <4 x i64> [ %240, %234 ], [ %288, %242 ]
  %249 = phi <4 x i64> [ %241, %234 ], [ %290, %242 ]
  %250 = add nsw i64 %243, %205
  %251 = getelementptr inbounds i16, i16* %0, i64 %250
  %252 = bitcast i16* %251 to <4 x i16>*
  %253 = load <4 x i16>, <4 x i16>* %252, align 2
  %254 = add nsw i64 %250, 1
  %255 = getelementptr inbounds i16, i16* %0, i64 %254
  %256 = bitcast i16* %255 to <4 x i16>*
  %257 = load <4 x i16>, <4 x i16>* %256, align 2
  %258 = add nsw i64 %243, %210
  %259 = getelementptr inbounds i16, i16* %0, i64 %258
  %260 = bitcast i16* %259 to <4 x i16>*
  %261 = load <4 x i16>, <4 x i16>* %260, align 2
  %262 = add nsw i64 %258, 1
  %263 = getelementptr inbounds i16, i16* %0, i64 %262
  %264 = bitcast i16* %263 to <4 x i16>*
  %265 = load <4 x i16>, <4 x i16>* %264, align 2
  %266 = sext <4 x i16> %253 to <4 x i32>
  %267 = sext <4 x i16> %257 to <4 x i32>
  %268 = mul nsw <4 x i32> %267, %266
  %269 = sext <4 x i32> %268 to <4 x i64>
  %270 = add nsw <4 x i64> %244, %269
  %271 = sext <4 x i16> %261 to <4 x i32>
  %272 = mul nsw <4 x i32> %271, %266
  %273 = sext <4 x i32> %272 to <4 x i64>
  %274 = add nsw <4 x i64> %245, %273
  %275 = sext <4 x i16> %265 to <4 x i32>
  %276 = mul nsw <4 x i32> %275, %271
  %277 = sext <4 x i32> %276 to <4 x i64>
  %278 = add nsw <4 x i64> %270, %277
  %279 = add nsw <4 x i32> %275, %267
  %280 = sext <4 x i32> %279 to <4 x i64>
  %281 = add nsw <4 x i64> %246, %280
  %282 = mul nsw <4 x i32> %267, %267
  %283 = mul nsw <4 x i32> %275, %275
  %284 = add nuw nsw <4 x i32> %283, %282
  %285 = zext <4 x i32> %284 to <4 x i64>
  %286 = add nsw <4 x i64> %247, %285
  %287 = sext <4 x i16> %265 to <4 x i64>
  %288 = add nsw <4 x i64> %248, %287
  %289 = zext <4 x i32> %283 to <4 x i64>
  %290 = add nuw nsw <4 x i64> %249, %289
  %291 = add i64 %243, 4
  %292 = icmp eq i64 %291, %235
  br i1 %292, label %293, label %242, !llvm.loop !6

293:                                              ; preds = %242
  %294 = shufflevector <4 x i64> %290, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %295 = add <4 x i64> %290, %294
  %296 = shufflevector <4 x i64> %295, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %297 = add <4 x i64> %295, %296
  %298 = extractelement <4 x i64> %297, i32 0
  %299 = shufflevector <4 x i64> %288, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %300 = add <4 x i64> %288, %299
  %301 = shufflevector <4 x i64> %300, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %302 = add <4 x i64> %300, %301
  %303 = extractelement <4 x i64> %302, i32 0
  %304 = shufflevector <4 x i64> %286, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %305 = add <4 x i64> %286, %304
  %306 = shufflevector <4 x i64> %305, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %307 = add <4 x i64> %305, %306
  %308 = extractelement <4 x i64> %307, i32 0
  %309 = shufflevector <4 x i64> %281, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %310 = add <4 x i64> %281, %309
  %311 = shufflevector <4 x i64> %310, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %312 = add <4 x i64> %310, %311
  %313 = extractelement <4 x i64> %312, i32 0
  %314 = shufflevector <4 x i64> %274, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %315 = add <4 x i64> %274, %314
  %316 = shufflevector <4 x i64> %315, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %317 = add <4 x i64> %315, %316
  %318 = extractelement <4 x i64> %317, i32 0
  %319 = shufflevector <4 x i64> %278, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %320 = add <4 x i64> %278, %319
  %321 = shufflevector <4 x i64> %320, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %322 = add <4 x i64> %320, %321
  %323 = extractelement <4 x i64> %322, i32 0
  %324 = icmp eq i64 %235, %232
  br i1 %324, label %380, label %325

325:                                              ; preds = %293, %231
  %326 = phi i64 [ 0, %231 ], [ %235, %293 ]
  %327 = phi i64 [ %230, %231 ], [ %323, %293 ]
  %328 = phi i64 [ %229, %231 ], [ %318, %293 ]
  %329 = phi i64 [ %218, %231 ], [ %313, %293 ]
  %330 = phi i64 [ %224, %231 ], [ %308, %293 ]
  %331 = phi i64 [ %225, %231 ], [ %303, %293 ]
  %332 = phi i64 [ %226, %231 ], [ %298, %293 ]
  br label %333

333:                                              ; preds = %325, %333
  %334 = phi i64 [ %378, %333 ], [ %326, %325 ]
  %335 = phi i64 [ %365, %333 ], [ %327, %325 ]
  %336 = phi i64 [ %361, %333 ], [ %328, %325 ]
  %337 = phi i64 [ %368, %333 ], [ %329, %325 ]
  %338 = phi i64 [ %373, %333 ], [ %330, %325 ]
  %339 = phi i64 [ %375, %333 ], [ %331, %325 ]
  %340 = phi i64 [ %377, %333 ], [ %332, %325 ]
  %341 = add nsw i64 %334, %205
  %342 = getelementptr inbounds i16, i16* %0, i64 %341
  %343 = load i16, i16* %342, align 2
  %344 = add nsw i64 %341, 1
  %345 = getelementptr inbounds i16, i16* %0, i64 %344
  %346 = load i16, i16* %345, align 2
  %347 = add nsw i64 %334, %210
  %348 = getelementptr inbounds i16, i16* %0, i64 %347
  %349 = load i16, i16* %348, align 2
  %350 = add nsw i64 %347, 1
  %351 = getelementptr inbounds i16, i16* %0, i64 %350
  %352 = load i16, i16* %351, align 2
  %353 = sext i16 %343 to i32
  %354 = sext i16 %346 to i32
  %355 = mul nsw i32 %354, %353
  %356 = sext i32 %355 to i64
  %357 = add nsw i64 %335, %356
  %358 = sext i16 %349 to i32
  %359 = mul nsw i32 %358, %353
  %360 = sext i32 %359 to i64
  %361 = add nsw i64 %336, %360
  %362 = sext i16 %352 to i32
  %363 = mul nsw i32 %362, %358
  %364 = sext i32 %363 to i64
  %365 = add nsw i64 %357, %364
  %366 = add nsw i32 %362, %354
  %367 = sext i32 %366 to i64
  %368 = add nsw i64 %337, %367
  %369 = mul nsw i32 %354, %354
  %370 = mul nsw i32 %362, %362
  %371 = add nuw nsw i32 %370, %369
  %372 = zext i32 %371 to i64
  %373 = add nsw i64 %338, %372
  %374 = sext i16 %352 to i64
  %375 = add nsw i64 %339, %374
  %376 = zext i32 %370 to i64
  %377 = add nuw nsw i64 %340, %376
  %378 = add nuw nsw i64 %334, 1
  %379 = icmp eq i64 %378, %232
  br i1 %379, label %380, label %333, !llvm.loop !7

380:                                              ; preds = %333, %175, %293, %141, %202, %84
  %381 = phi i64 [ %95, %84 ], [ %226, %202 ], [ %146, %141 ], [ %298, %293 ], [ %199, %175 ], [ %377, %333 ]
  %382 = phi i64 [ %90, %84 ], [ %225, %202 ], [ %151, %141 ], [ %303, %293 ], [ %198, %175 ], [ %375, %333 ]
  %383 = phi i64 [ %97, %84 ], [ %224, %202 ], [ %156, %141 ], [ %308, %293 ], [ %197, %175 ], [ %373, %333 ]
  %384 = phi i64 [ %92, %84 ], [ %218, %202 ], [ %161, %141 ], [ %313, %293 ], [ %194, %175 ], [ %368, %333 ]
  %385 = phi i64 [ %100, %84 ], [ %229, %202 ], [ %100, %141 ], [ %318, %293 ], [ %100, %175 ], [ %361, %333 ]
  %386 = phi i64 [ %101, %84 ], [ %230, %202 ], [ %166, %141 ], [ %323, %293 ], [ %192, %175 ], [ %365, %333 ]
  %387 = srem i32 %2, 3
  %388 = icmp eq i32 %387, 1
  br i1 %388, label %389, label %547

389:                                              ; preds = %380
  %390 = add i32 %2, -1
  %391 = sext i32 %390 to i64
  %392 = getelementptr inbounds i16, i16* %0, i64 %391
  %393 = load i16, i16* %392, align 2
  %394 = sext i16 %393 to i64
  %395 = add nsw i64 %384, %394
  %396 = sext i16 %393 to i32
  %397 = mul nsw i32 %396, %396
  %398 = zext i32 %397 to i64
  %399 = add nsw i64 %383, %398
  %400 = add i32 %3, -1
  %401 = icmp sgt i32 %400, 0
  br i1 %401, label %402, label %643

402:                                              ; preds = %389
  %403 = select i1 %27, i32 2, i32 3
  %404 = sub nsw i32 %3, %403
  %405 = sext i32 %404 to i64
  %406 = zext i32 %400 to i64
  %407 = icmp ult i32 %400, 4
  br i1 %407, label %503, label %408

408:                                              ; preds = %402
  %409 = icmp ne i32 %1, 1
  %410 = add nsw i64 %406, -1
  %411 = add i32 %2, -1
  %412 = trunc i64 %410 to i32
  %413 = add i32 %411, %412
  %414 = icmp slt i32 %413, %411
  %415 = icmp ugt i64 %410, 4294967295
  %416 = or i1 %414, %415
  %417 = or i1 %409, %416
  %418 = trunc i64 %410 to i32
  %419 = add i32 %418, %2
  %420 = icmp slt i32 %419, %2
  %421 = icmp ugt i64 %410, 4294967295
  %422 = or i1 %420, %421
  %423 = or i1 %417, %422
  br i1 %423, label %503, label %424

424:                                              ; preds = %408
  %425 = and i64 %406, 4294967292
  %426 = insertelement <4 x i64> undef, i64 %405, i32 0
  %427 = shufflevector <4 x i64> %426, <4 x i64> undef, <4 x i32> zeroinitializer
  %428 = insertelement <4 x i64> <i64 undef, i64 0, i64 0, i64 0>, i64 %385, i32 0
  %429 = insertelement <4 x i64> <i64 undef, i64 0, i64 0, i64 0>, i64 %395, i32 0
  %430 = insertelement <4 x i64> <i64 undef, i64 0, i64 0, i64 0>, i64 %399, i32 0
  %431 = insertelement <4 x i64> <i64 undef, i64 0, i64 0, i64 0>, i64 %394, i32 0
  %432 = insertelement <4 x i64> <i64 undef, i64 0, i64 0, i64 0>, i64 %398, i32 0
  br label %433

433:                                              ; preds = %433, %424
  %434 = phi i64 [ 0, %424 ], [ %473, %433 ]
  %435 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %424 ], [ %474, %433 ]
  %436 = phi <4 x i64> [ %428, %424 ], [ %461, %433 ]
  %437 = phi <4 x i64> [ %429, %424 ], [ %472, %433 ]
  %438 = phi <4 x i64> [ %430, %424 ], [ %470, %433 ]
  %439 = phi <4 x i64> [ %431, %424 ], [ %463, %433 ]
  %440 = phi <4 x i64> [ %432, %424 ], [ %466, %433 ]
  %441 = trunc i64 %434 to i32
  %442 = mul i32 %441, %1
  %443 = add i32 %390, %442
  %444 = sext i32 %443 to i64
  %445 = getelementptr inbounds i16, i16* %0, i64 %444
  %446 = bitcast i16* %445 to <4 x i16>*
  %447 = load <4 x i16>, <4 x i16>* %446, align 2
  %448 = extractelement <4 x i64> %435, i32 0
  %449 = trunc i64 %448 to i32
  %450 = add i32 %449, 1
  %451 = mul i32 %450, %1
  %452 = add i32 %390, %451
  %453 = sext i32 %452 to i64
  %454 = getelementptr inbounds i16, i16* %0, i64 %453
  %455 = bitcast i16* %454 to <4 x i16>*
  %456 = load <4 x i16>, <4 x i16>* %455, align 2
  %457 = sext <4 x i16> %447 to <4 x i32>
  %458 = sext <4 x i16> %456 to <4 x i32>
  %459 = mul nsw <4 x i32> %458, %457
  %460 = sext <4 x i32> %459 to <4 x i64>
  %461 = add nsw <4 x i64> %436, %460
  %462 = sext <4 x i16> %456 to <4 x i64>
  %463 = add nsw <4 x i64> %439, %462
  %464 = mul nsw <4 x i32> %458, %458
  %465 = zext <4 x i32> %464 to <4 x i64>
  %466 = add nuw nsw <4 x i64> %440, %465
  %467 = icmp slt <4 x i64> %435, %427
  %468 = zext <4 x i32> %464 to <4 x i64>
  %469 = select <4 x i1> %467, <4 x i64> %468, <4 x i64> zeroinitializer
  %470 = add nsw <4 x i64> %438, %469
  %471 = select <4 x i1> %467, <4 x i64> %462, <4 x i64> zeroinitializer
  %472 = add nsw <4 x i64> %471, %437
  %473 = add i64 %434, 4
  %474 = add <4 x i64> %435, <i64 4, i64 4, i64 4, i64 4>
  %475 = icmp eq i64 %473, %425
  br i1 %475, label %476, label %433, !llvm.loop !8

476:                                              ; preds = %433
  %477 = shufflevector <4 x i64> %466, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %478 = add <4 x i64> %466, %477
  %479 = shufflevector <4 x i64> %478, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %480 = add <4 x i64> %478, %479
  %481 = extractelement <4 x i64> %480, i32 0
  %482 = shufflevector <4 x i64> %463, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %483 = add <4 x i64> %463, %482
  %484 = shufflevector <4 x i64> %483, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %485 = add <4 x i64> %483, %484
  %486 = extractelement <4 x i64> %485, i32 0
  %487 = shufflevector <4 x i64> %470, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %488 = add <4 x i64> %470, %487
  %489 = shufflevector <4 x i64> %488, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %490 = add <4 x i64> %488, %489
  %491 = extractelement <4 x i64> %490, i32 0
  %492 = shufflevector <4 x i64> %472, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %493 = add <4 x i64> %472, %492
  %494 = shufflevector <4 x i64> %493, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %495 = add <4 x i64> %493, %494
  %496 = extractelement <4 x i64> %495, i32 0
  %497 = shufflevector <4 x i64> %461, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %498 = add <4 x i64> %461, %497
  %499 = shufflevector <4 x i64> %498, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %500 = add <4 x i64> %498, %499
  %501 = extractelement <4 x i64> %500, i32 0
  %502 = icmp eq i64 %425, %406
  br i1 %502, label %643, label %503

503:                                              ; preds = %476, %408, %402
  %504 = phi i64 [ 0, %408 ], [ 0, %402 ], [ %425, %476 ]
  %505 = phi i64 [ %385, %408 ], [ %385, %402 ], [ %501, %476 ]
  %506 = phi i64 [ %395, %408 ], [ %395, %402 ], [ %496, %476 ]
  %507 = phi i64 [ %399, %408 ], [ %399, %402 ], [ %491, %476 ]
  %508 = phi i64 [ %394, %408 ], [ %394, %402 ], [ %486, %476 ]
  %509 = phi i64 [ %398, %408 ], [ %398, %402 ], [ %481, %476 ]
  br label %510

510:                                              ; preds = %503, %510
  %511 = phi i64 [ %523, %510 ], [ %504, %503 ]
  %512 = phi i64 [ %534, %510 ], [ %505, %503 ]
  %513 = phi i64 [ %545, %510 ], [ %506, %503 ]
  %514 = phi i64 [ %543, %510 ], [ %507, %503 ]
  %515 = phi i64 [ %536, %510 ], [ %508, %503 ]
  %516 = phi i64 [ %539, %510 ], [ %509, %503 ]
  %517 = trunc i64 %511 to i32
  %518 = mul i32 %517, %1
  %519 = add i32 %390, %518
  %520 = sext i32 %519 to i64
  %521 = getelementptr inbounds i16, i16* %0, i64 %520
  %522 = load i16, i16* %521, align 2
  %523 = add nuw nsw i64 %511, 1
  %524 = trunc i64 %523 to i32
  %525 = mul i32 %524, %1
  %526 = add i32 %390, %525
  %527 = sext i32 %526 to i64
  %528 = getelementptr inbounds i16, i16* %0, i64 %527
  %529 = load i16, i16* %528, align 2
  %530 = sext i16 %522 to i32
  %531 = sext i16 %529 to i32
  %532 = mul nsw i32 %531, %530
  %533 = sext i32 %532 to i64
  %534 = add nsw i64 %512, %533
  %535 = sext i16 %529 to i64
  %536 = add nsw i64 %515, %535
  %537 = mul nsw i32 %531, %531
  %538 = zext i32 %537 to i64
  %539 = add nuw nsw i64 %516, %538
  %540 = icmp slt i64 %511, %405
  %541 = zext i32 %537 to i64
  %542 = select i1 %540, i64 %541, i64 0
  %543 = add nsw i64 %514, %542
  %544 = select i1 %540, i64 %535, i64 0
  %545 = add nsw i64 %544, %513
  %546 = icmp eq i64 %523, %406
  br i1 %546, label %643, label %510, !llvm.loop !9

547:                                              ; preds = %380
  %548 = add nsw i32 %2, -2
  %549 = sext i32 %548 to i64
  %550 = getelementptr inbounds i16, i16* %0, i64 %549
  %551 = load i16, i16* %550, align 2
  %552 = add nsw i32 %2, -1
  %553 = sext i32 %552 to i64
  %554 = getelementptr inbounds i16, i16* %0, i64 %553
  %555 = load i16, i16* %554, align 2
  %556 = sext i16 %551 to i32
  %557 = sext i16 %555 to i32
  %558 = add nsw i32 %557, %556
  %559 = sext i32 %558 to i64
  %560 = add nsw i64 %384, %559
  %561 = mul nsw i32 %556, %556
  %562 = mul nsw i32 %557, %557
  %563 = add nuw nsw i32 %562, %561
  %564 = zext i32 %563 to i64
  %565 = add nsw i64 %383, %564
  %566 = sext i16 %555 to i64
  %567 = zext i32 %562 to i64
  %568 = add i32 %3, -1
  %569 = icmp sgt i32 %568, 0
  br i1 %569, label %570, label %643

570:                                              ; preds = %547
  %571 = add nsw i32 %3, -2
  %572 = select i1 %27, i32 2, i32 3
  %573 = sub nsw i32 %3, %572
  %574 = sext i32 %1 to i64
  %575 = sext i32 %2 to i64
  %576 = sext i32 %571 to i64
  %577 = sext i32 %573 to i64
  %578 = zext i32 %568 to i64
  br label %579

579:                                              ; preds = %635, %570
  %580 = phi i64 [ 0, %570 ], [ %592, %635 ]
  %581 = phi i64 [ %386, %570 ], [ %618, %635 ]
  %582 = phi i64 [ %385, %570 ], [ %641, %635 ]
  %583 = phi i64 [ %560, %570 ], [ %637, %635 ]
  %584 = phi i64 [ %565, %570 ], [ %636, %635 ]
  %585 = phi i64 [ %566, %570 ], [ %620, %635 ]
  %586 = phi i64 [ %567, %570 ], [ %624, %635 ]
  %587 = mul nsw i64 %580, %574
  %588 = add nsw i64 %587, %575
  %589 = add nsw i64 %588, -1
  %590 = getelementptr inbounds i16, i16* %0, i64 %589
  %591 = load i16, i16* %590, align 2
  %592 = add nuw nsw i64 %580, 1
  %593 = mul nsw i64 %592, %574
  %594 = add nsw i64 %593, %575
  %595 = add nsw i64 %594, -2
  %596 = getelementptr inbounds i16, i16* %0, i64 %595
  %597 = load i16, i16* %596, align 2
  %598 = add nsw i64 %594, -1
  %599 = getelementptr inbounds i16, i16* %0, i64 %598
  %600 = load i16, i16* %599, align 2
  %601 = icmp slt i64 %580, %576
  %602 = or i1 %27, %601
  br i1 %602, label %603, label %616

603:                                              ; preds = %579
  %604 = add nsw i64 %588, -2
  %605 = getelementptr inbounds i16, i16* %0, i64 %604
  %606 = load i16, i16* %605, align 2
  %607 = sext i16 %606 to i32
  %608 = sext i16 %591 to i32
  %609 = mul nsw i32 %607, %608
  %610 = sext i32 %609 to i64
  %611 = add nsw i64 %581, %610
  %612 = sext i16 %597 to i32
  %613 = mul nsw i32 %607, %612
  %614 = sext i32 %613 to i64
  %615 = add nsw i64 %582, %614
  br label %616

616:                                              ; preds = %579, %603
  %617 = phi i64 [ %615, %603 ], [ %582, %579 ]
  %618 = phi i64 [ %611, %603 ], [ %581, %579 ]
  %619 = sext i16 %600 to i64
  %620 = add nsw i64 %585, %619
  %621 = sext i16 %600 to i32
  %622 = mul nsw i32 %621, %621
  %623 = zext i32 %622 to i64
  %624 = add nuw nsw i64 %586, %623
  %625 = icmp slt i64 %580, %577
  br i1 %625, label %626, label %635

626:                                              ; preds = %616
  %627 = sext i16 %597 to i32
  %628 = add nsw i32 %621, %627
  %629 = sext i32 %628 to i64
  %630 = add nsw i64 %583, %629
  %631 = mul nsw i32 %627, %627
  %632 = add nuw nsw i32 %622, %631
  %633 = zext i32 %632 to i64
  %634 = add nsw i64 %584, %633
  br label %635

635:                                              ; preds = %626, %616
  %636 = phi i64 [ %634, %626 ], [ %584, %616 ]
  %637 = phi i64 [ %630, %626 ], [ %583, %616 ]
  %638 = sext i16 %591 to i32
  %639 = mul nsw i32 %621, %638
  %640 = sext i32 %639 to i64
  %641 = add nsw i64 %617, %640
  %642 = icmp eq i64 %592, %578
  br i1 %642, label %643, label %579

643:                                              ; preds = %635, %510, %476, %547, %389
  %644 = phi i64 [ %398, %389 ], [ %567, %547 ], [ %481, %476 ], [ %539, %510 ], [ %624, %635 ]
  %645 = phi i64 [ %394, %389 ], [ %566, %547 ], [ %486, %476 ], [ %536, %510 ], [ %620, %635 ]
  %646 = phi i64 [ %399, %389 ], [ %565, %547 ], [ %491, %476 ], [ %543, %510 ], [ %636, %635 ]
  %647 = phi i64 [ %395, %389 ], [ %560, %547 ], [ %496, %476 ], [ %545, %510 ], [ %637, %635 ]
  %648 = phi i64 [ %385, %389 ], [ %385, %547 ], [ %501, %476 ], [ %534, %510 ], [ %641, %635 ]
  %649 = phi i64 [ %386, %389 ], [ %386, %547 ], [ %386, %476 ], [ %386, %510 ], [ %618, %635 ]
  %650 = icmp sgt i32 %2, 0
  br i1 %650, label %651, label %726

651:                                              ; preds = %643
  %652 = zext i32 %2 to i64
  %653 = icmp ult i32 %2, 16
  br i1 %653, label %654, label %658

654:                                              ; preds = %708, %651
  %655 = phi i64 [ 0, %651 ], [ %659, %708 ]
  %656 = phi i64 [ 0, %651 ], [ %724, %708 ]
  %657 = phi i64 [ 0, %651 ], [ %716, %708 ]
  br label %738

658:                                              ; preds = %651
  %659 = and i64 %652, 4294967280
  br label %660

660:                                              ; preds = %660, %658
  %661 = phi i64 [ 0, %658 ], [ %706, %660 ]
  %662 = phi <4 x i64> [ zeroinitializer, %658 ], [ %702, %660 ]
  %663 = phi <4 x i64> [ zeroinitializer, %658 ], [ %703, %660 ]
  %664 = phi <4 x i64> [ zeroinitializer, %658 ], [ %704, %660 ]
  %665 = phi <4 x i64> [ zeroinitializer, %658 ], [ %705, %660 ]
  %666 = phi <4 x i64> [ zeroinitializer, %658 ], [ %686, %660 ]
  %667 = phi <4 x i64> [ zeroinitializer, %658 ], [ %687, %660 ]
  %668 = phi <4 x i64> [ zeroinitializer, %658 ], [ %688, %660 ]
  %669 = phi <4 x i64> [ zeroinitializer, %658 ], [ %689, %660 ]
  %670 = getelementptr inbounds i16, i16* %0, i64 %661
  %671 = bitcast i16* %670 to <4 x i16>*
  %672 = load <4 x i16>, <4 x i16>* %671, align 2
  %673 = getelementptr inbounds i16, i16* %670, i64 4
  %674 = bitcast i16* %673 to <4 x i16>*
  %675 = load <4 x i16>, <4 x i16>* %674, align 2
  %676 = getelementptr inbounds i16, i16* %670, i64 8
  %677 = bitcast i16* %676 to <4 x i16>*
  %678 = load <4 x i16>, <4 x i16>* %677, align 2
  %679 = getelementptr inbounds i16, i16* %670, i64 12
  %680 = bitcast i16* %679 to <4 x i16>*
  %681 = load <4 x i16>, <4 x i16>* %680, align 2
  %682 = sext <4 x i16> %672 to <4 x i64>
  %683 = sext <4 x i16> %675 to <4 x i64>
  %684 = sext <4 x i16> %678 to <4 x i64>
  %685 = sext <4 x i16> %681 to <4 x i64>
  %686 = add nsw <4 x i64> %666, %682
  %687 = add nsw <4 x i64> %667, %683
  %688 = add nsw <4 x i64> %668, %684
  %689 = add nsw <4 x i64> %669, %685
  %690 = sext <4 x i16> %672 to <4 x i32>
  %691 = sext <4 x i16> %675 to <4 x i32>
  %692 = sext <4 x i16> %678 to <4 x i32>
  %693 = sext <4 x i16> %681 to <4 x i32>
  %694 = mul nsw <4 x i32> %690, %690
  %695 = mul nsw <4 x i32> %691, %691
  %696 = mul nsw <4 x i32> %692, %692
  %697 = mul nsw <4 x i32> %693, %693
  %698 = zext <4 x i32> %694 to <4 x i64>
  %699 = zext <4 x i32> %695 to <4 x i64>
  %700 = zext <4 x i32> %696 to <4 x i64>
  %701 = zext <4 x i32> %697 to <4 x i64>
  %702 = add nuw nsw <4 x i64> %662, %698
  %703 = add nuw nsw <4 x i64> %663, %699
  %704 = add nuw nsw <4 x i64> %664, %700
  %705 = add nuw nsw <4 x i64> %665, %701
  %706 = add i64 %661, 16
  %707 = icmp eq i64 %706, %659
  br i1 %707, label %708, label %660, !llvm.loop !10

708:                                              ; preds = %660
  %709 = add <4 x i64> %687, %686
  %710 = add <4 x i64> %688, %709
  %711 = add <4 x i64> %689, %710
  %712 = shufflevector <4 x i64> %711, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %713 = add <4 x i64> %711, %712
  %714 = shufflevector <4 x i64> %713, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %715 = add <4 x i64> %713, %714
  %716 = extractelement <4 x i64> %715, i32 0
  %717 = add nuw <4 x i64> %703, %702
  %718 = add <4 x i64> %704, %717
  %719 = add <4 x i64> %705, %718
  %720 = shufflevector <4 x i64> %719, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %721 = add <4 x i64> %719, %720
  %722 = shufflevector <4 x i64> %721, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %723 = add <4 x i64> %721, %722
  %724 = extractelement <4 x i64> %723, i32 0
  %725 = icmp eq i64 %659, %652
  br i1 %725, label %726, label %654

726:                                              ; preds = %738, %708, %643
  %727 = phi i64 [ 0, %643 ], [ %716, %708 ], [ %745, %738 ]
  %728 = phi i64 [ 0, %643 ], [ %724, %708 ], [ %749, %738 ]
  %729 = icmp sgt i32 %3, 0
  br i1 %729, label %730, label %776

730:                                              ; preds = %726
  %731 = sext i32 %1 to i64
  %732 = zext i32 %3 to i64
  %733 = add nsw i64 %732, -1
  %734 = and i64 %732, 3
  %735 = icmp ult i64 %733, 3
  br i1 %735, label %752, label %736

736:                                              ; preds = %730
  %737 = sub nsw i64 %732, %734
  br label %821

738:                                              ; preds = %654, %738
  %739 = phi i64 [ %750, %738 ], [ %655, %654 ]
  %740 = phi i64 [ %749, %738 ], [ %656, %654 ]
  %741 = phi i64 [ %745, %738 ], [ %657, %654 ]
  %742 = getelementptr inbounds i16, i16* %0, i64 %739
  %743 = load i16, i16* %742, align 2
  %744 = sext i16 %743 to i64
  %745 = add nsw i64 %741, %744
  %746 = sext i16 %743 to i32
  %747 = mul nsw i32 %746, %746
  %748 = zext i32 %747 to i64
  %749 = add nuw nsw i64 %740, %748
  %750 = add nuw nsw i64 %739, 1
  %751 = icmp eq i64 %750, %652
  br i1 %751, label %726, label %738, !llvm.loop !11

752:                                              ; preds = %821, %730
  %753 = phi i64 [ undef, %730 ], [ %860, %821 ]
  %754 = phi i64 [ undef, %730 ], [ %864, %821 ]
  %755 = phi i64 [ 0, %730 ], [ %865, %821 ]
  %756 = phi i64 [ 0, %730 ], [ %864, %821 ]
  %757 = phi i64 [ 0, %730 ], [ %860, %821 ]
  %758 = icmp eq i64 %734, 0
  br i1 %758, label %776, label %759

759:                                              ; preds = %752, %759
  %760 = phi i64 [ %773, %759 ], [ %755, %752 ]
  %761 = phi i64 [ %772, %759 ], [ %756, %752 ]
  %762 = phi i64 [ %768, %759 ], [ %757, %752 ]
  %763 = phi i64 [ %774, %759 ], [ %734, %752 ]
  %764 = mul nsw i64 %760, %731
  %765 = getelementptr inbounds i16, i16* %0, i64 %764
  %766 = load i16, i16* %765, align 2
  %767 = sext i16 %766 to i64
  %768 = add nsw i64 %762, %767
  %769 = sext i16 %766 to i32
  %770 = mul nsw i32 %769, %769
  %771 = zext i32 %770 to i64
  %772 = add nuw nsw i64 %761, %771
  %773 = add nuw nsw i64 %760, 1
  %774 = add i64 %763, -1
  %775 = icmp eq i64 %774, 0
  br i1 %775, label %776, label %759, !llvm.loop !12

776:                                              ; preds = %752, %759, %726
  %777 = phi i64 [ 0, %726 ], [ %753, %752 ], [ %768, %759 ]
  %778 = phi i64 [ 0, %726 ], [ %754, %752 ], [ %772, %759 ]
  %779 = sub nsw i64 %647, %645
  %780 = sub nsw i64 %647, %382
  %781 = sub nsw i64 %647, %777
  %782 = sub nsw i64 %647, %727
  %783 = sub nsw i64 %646, %644
  %784 = sub nsw i64 %646, %381
  %785 = sub nsw i64 %646, %778
  %786 = sub nsw i64 %646, %728
  %787 = add nsw i32 %2, -1
  %788 = mul nsw i32 %787, %3
  %789 = sitofp i32 %788 to float
  %790 = add nsw i32 %3, -1
  %791 = mul nsw i32 %790, %2
  %792 = sitofp i32 %791 to float
  %793 = sitofp i64 %783 to float
  %794 = mul nsw i64 %779, %779
  %795 = sitofp i64 %794 to float
  %796 = fdiv float %795, %789
  %797 = fsub float %793, %796
  %798 = sitofp i64 %784 to float
  %799 = mul nsw i64 %780, %780
  %800 = sitofp i64 %799 to float
  %801 = fdiv float %800, %792
  %802 = fsub float %798, %801
  %803 = sitofp i64 %785 to float
  %804 = mul nsw i64 %781, %781
  %805 = sitofp i64 %804 to float
  %806 = fdiv float %805, %789
  %807 = fsub float %803, %806
  %808 = sitofp i64 %786 to float
  %809 = mul nsw i64 %782, %782
  %810 = sitofp i64 %809 to float
  %811 = fdiv float %810, %792
  %812 = fsub float %808, %811
  %813 = sitofp i64 %648 to float
  %814 = mul nsw i64 %782, %780
  %815 = sitofp i64 %814 to float
  %816 = fdiv float %815, %792
  %817 = fsub float %813, %816
  %818 = fcmp ogt float %797, 0.000000e+00
  %819 = fcmp ogt float %807, 0.000000e+00
  %820 = and i1 %818, %819
  br i1 %820, label %868, label %879

821:                                              ; preds = %821, %736
  %822 = phi i64 [ 0, %736 ], [ %865, %821 ]
  %823 = phi i64 [ 0, %736 ], [ %864, %821 ]
  %824 = phi i64 [ 0, %736 ], [ %860, %821 ]
  %825 = phi i64 [ %737, %736 ], [ %866, %821 ]
  %826 = mul nsw i64 %822, %731
  %827 = getelementptr inbounds i16, i16* %0, i64 %826
  %828 = load i16, i16* %827, align 2
  %829 = sext i16 %828 to i64
  %830 = add nsw i64 %824, %829
  %831 = sext i16 %828 to i32
  %832 = mul nsw i32 %831, %831
  %833 = zext i32 %832 to i64
  %834 = add nuw nsw i64 %823, %833
  %835 = or i64 %822, 1
  %836 = mul nsw i64 %835, %731
  %837 = getelementptr inbounds i16, i16* %0, i64 %836
  %838 = load i16, i16* %837, align 2
  %839 = sext i16 %838 to i64
  %840 = add nsw i64 %830, %839
  %841 = sext i16 %838 to i32
  %842 = mul nsw i32 %841, %841
  %843 = zext i32 %842 to i64
  %844 = add nuw nsw i64 %834, %843
  %845 = or i64 %822, 2
  %846 = mul nsw i64 %845, %731
  %847 = getelementptr inbounds i16, i16* %0, i64 %846
  %848 = load i16, i16* %847, align 2
  %849 = sext i16 %848 to i64
  %850 = add nsw i64 %840, %849
  %851 = sext i16 %848 to i32
  %852 = mul nsw i32 %851, %851
  %853 = zext i32 %852 to i64
  %854 = add nuw nsw i64 %844, %853
  %855 = or i64 %822, 3
  %856 = mul nsw i64 %855, %731
  %857 = getelementptr inbounds i16, i16* %0, i64 %856
  %858 = load i16, i16* %857, align 2
  %859 = sext i16 %858 to i64
  %860 = add nsw i64 %850, %859
  %861 = sext i16 %858 to i32
  %862 = mul nsw i32 %861, %861
  %863 = zext i32 %862 to i64
  %864 = add nuw nsw i64 %854, %863
  %865 = add nuw nsw i64 %822, 4
  %866 = add i64 %825, -4
  %867 = icmp eq i64 %866, 0
  br i1 %867, label %752, label %821

868:                                              ; preds = %776
  %869 = sitofp i64 %649 to float
  %870 = mul nsw i64 %781, %779
  %871 = sitofp i64 %870 to float
  %872 = fdiv float %871, %789
  %873 = fsub float %869, %872
  %874 = fmul float %797, %807
  %875 = tail call float @sqrtf(float %874) #3
  %876 = fdiv float %873, %875
  store float %876, float* %4, align 4
  %877 = fcmp olt float %876, 0.000000e+00
  %878 = select i1 %877, float 0.000000e+00, float %876
  br label %879

879:                                              ; preds = %776, %868
  %880 = phi float [ %878, %868 ], [ 1.000000e+00, %776 ]
  store float %880, float* %4, align 4
  %881 = fcmp ogt float %802, 0.000000e+00
  %882 = fcmp ogt float %812, 0.000000e+00
  %883 = and i1 %881, %882
  br i1 %883, label %884, label %890

884:                                              ; preds = %879
  %885 = fmul float %802, %812
  %886 = tail call float @sqrtf(float %885) #3
  %887 = fdiv float %817, %886
  store float %887, float* %5, align 4
  %888 = fcmp olt float %887, 0.000000e+00
  %889 = select i1 %888, float 0.000000e+00, float %887
  br label %890

890:                                              ; preds = %879, %884
  %891 = phi float [ %889, %884 ], [ 1.000000e+00, %879 ]
  store float %891, float* %5, align 4
  ret void
}

; Function Attrs: nofree nounwind
declare float @sqrtf(float) local_unnamed_addr #1

; Function Attrs: nounwind readnone
declare <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16>, <16 x i16>) #2

; Function Attrs: nounwind readnone
declare <8 x i32> @llvm.x86.avx2.phadd.d(<8 x i32>, <8 x i32>) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5, !3}
!5 = !{!"llvm.loop.unroll.runtime.disable"}
!6 = distinct !{!6, !3}
!7 = distinct !{!7, !5, !3}
!8 = distinct !{!8, !3}
!9 = distinct !{!9, !3}
!10 = distinct !{!10, !3}
!11 = distinct !{!11, !5, !3}
!12 = distinct !{!12, !13}
!13 = !{!"llvm.loop.unroll.disable"}
