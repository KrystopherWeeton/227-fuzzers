; ModuleID = '../../v8/src/diagnostics/eh-frame.cc'
source_filename = "../../v8/src/diagnostics/eh-frame.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.v8::internal::EhFrameWriter" = type { i32, i32, i32, %"class.v8::internal::Register", i32, %"class.v8::internal::ZoneVector" }
%"class.v8::internal::Register" = type { %"class.v8::internal::RegisterBase" }
%"class.v8::internal::RegisterBase" = type { i32 }
%"class.v8::internal::ZoneVector" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i8*, i8*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem", %"struct.std::__1::__compressed_pair_elem.0" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"struct.std::__1::__compressed_pair_elem.0" = type { %"class.v8::internal::ZoneAllocator" }
%"class.v8::internal::ZoneAllocator" = type { %"class.v8::internal::Zone"* }
%"class.v8::internal::Zone" = type <{ i64, i64, i64, i64, %"class.v8::internal::AccountingAllocator"*, %"class.v8::internal::Segment"*, i8*, i8, i8, [6 x i8] }>
%"class.v8::internal::AccountingAllocator" = type { i32 (...)**, %"struct.std::__1::atomic", %"struct.std::__1::atomic", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr.5" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.1" }
%"struct.std::__1::__atomic_base.1" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %"class.v8::internal::VirtualMemory"* }
%"class.v8::internal::VirtualMemory" = type { %"class.v8::PageAllocator"*, %"class.v8::base::AddressRegion" }
%"class.v8::PageAllocator" = type { i32 (...)** }
%"class.v8::base::AddressRegion" = type { i64, i64 }
%"class.std::__1::unique_ptr.5" = type { %"class.std::__1::__compressed_pair.6" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %"class.v8::base::BoundedPageAllocator"* }
%"class.v8::base::BoundedPageAllocator" = type opaque
%"class.v8::internal::Segment" = type { %"class.v8::internal::Zone"*, %"class.v8::internal::Segment"*, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.v8::internal::CodeDesc" = type { i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i32, %"class.v8::internal::Assembler"* }
%"class.v8::internal::Assembler" = type opaque
%"class.v8::internal::EhFrameIterator" = type { i8*, i8*, i8* }

$_ZNSt3__16vectorIhN2v88internal13ZoneAllocatorIhEEE6insertIPKhEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsISA_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSE_IS8_EESA_SA_ = comdat any

@_ZN2v88internal16EhFrameConstants22kEhFrameTerminatorSizeE = hidden local_unnamed_addr constant i32 4, align 4
@_ZN2v88internal16EhFrameConstants18kEhFrameHdrVersionE = hidden local_unnamed_addr constant i32 1, align 4
@_ZN2v88internal16EhFrameConstants15kEhFrameHdrSizeE = hidden local_unnamed_addr constant i32 20, align 4
@_ZN2v88internal13EhFrameWriter17kInt32PlaceholderE = hidden local_unnamed_addr constant i32 -559038242, align 4
@_ZZN2v88internal13EhFrameWriter8WriteCieEvE19kAugmentationString = internal constant [4 x i8] c"zLR\00", align 1
@_ZN2v88internal16EhFrameConstants20kCodeAlignmentFactorE = external local_unnamed_addr constant i32, align 4
@_ZN2v88internal16EhFrameConstants20kDataAlignmentFactorE = external local_unnamed_addr constant i32, align 4
@_ZZN2v88internal13EhFrameWriter25WritePaddingToAlignedSizeEiE8kPadding = internal global [8 x i8] zeroinitializer, align 8
@_ZGVZN2v88internal13EhFrameWriter25WritePaddingToAlignedSizeEiE8kPadding = internal global i64 0, align 8
@_ZZN2v88internal13EhFrameWriter6FinishEiE11kTerminator = internal constant [4 x i8] zeroinitializer, align 1

@_ZN2v88internal13EhFrameWriterC1EPNS0_4ZoneE = hidden unnamed_addr alias void (%"class.v8::internal::EhFrameWriter"*, %"class.v8::internal::Zone"*), void (%"class.v8::internal::EhFrameWriter"*, %"class.v8::internal::Zone"*)* @_ZN2v88internal13EhFrameWriterC2EPNS0_4ZoneE

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal13EhFrameWriter17WriteEmptyEhFrameERNSt3__113basic_ostreamIcNS2_11char_traitsIcEEEE(%"class.std::__1::basic_ostream"* dereferenceable(160)) local_unnamed_addr #0 align 2 {
  %2 = alloca [16 x i8], align 16
  %3 = tail call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc(%"class.std::__1::basic_ostream"* %0, i8 signext 1) #6
  %4 = tail call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc(%"class.std::__1::basic_ostream"* %0, i8 signext 27) #6
  %5 = tail call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc(%"class.std::__1::basic_ostream"* %0, i8 signext 3) #6
  %6 = tail call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc(%"class.std::__1::basic_ostream"* %0, i8 signext 59) #6
  %7 = getelementptr inbounds [16 x i8], [16 x i8]* %2, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %7) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %7, i8 0, i64 16, i1 false)
  %8 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5writeEPKcl(%"class.std::__1::basic_ostream"* %0, i8* nonnull %7, i64 16) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %7) #6
  ret void
}

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc(%"class.std::__1::basic_ostream"*, i8 signext) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5writeEPKcl(%"class.std::__1::basic_ostream"*, i8*, i64) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal13EhFrameWriterC2EPNS0_4ZoneE(%"class.v8::internal::EhFrameWriter"* nocapture, %"class.v8::internal::Zone"*) unnamed_addr #0 align 2 {
  %3 = bitcast %"class.v8::internal::EhFrameWriter"* %0 to <4 x i32>*
  store <4 x i32> <i32 0, i32 0, i32 0, i32 -1>, <4 x i32>* %3, align 8
  %4 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 4
  store i32 0, i32* %4, align 8
  %5 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 5
  %6 = ptrtoint %"class.v8::internal::Zone"* %1 to i64
  %7 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 5, i32 0, i32 0, i32 2, i32 1
  %8 = bitcast %"struct.std::__1::__compressed_pair_elem.0"* %7 to i64*
  %9 = bitcast %"class.v8::internal::ZoneVector"* %5 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 24, i1 false) #6
  store i64 %6, i64* %8, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal13EhFrameWriter10InitializeEv(%"class.v8::internal::EhFrameWriter"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 5, i32 0
  %3 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 5, i32 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i8** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector"* %2 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = icmp ult i64 %8, 128
  br i1 %9, label %10, label %154

10:                                               ; preds = %1
  %11 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 5, i32 0, i32 0, i32 1
  %12 = bitcast i8** %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = sub i64 %13, %7
  %15 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 5, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %16 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %15, align 8
  %17 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %16, i64 0, i32 2
  %18 = load i64, i64* %17, align 8
  %19 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %16, i64 0, i32 3
  %20 = load i64, i64* %19, align 8
  %21 = sub i64 %20, %18
  %22 = icmp ult i64 %21, 128
  br i1 %22, label %23, label %25, !prof !2

23:                                               ; preds = %10
  %24 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %16, i64 128) #6
  br label %27

25:                                               ; preds = %10
  %26 = add i64 %18, 128
  store i64 %26, i64* %17, align 8
  br label %27

27:                                               ; preds = %25, %23
  %28 = phi i64 [ %24, %23 ], [ %18, %25 ]
  %29 = inttoptr i64 %28 to i8*
  %30 = getelementptr inbounds i8, i8* %29, i64 %14
  %31 = ptrtoint i8* %30 to i64
  %32 = getelementptr inbounds i8, i8* %29, i64 128
  %33 = ptrtoint i8* %32 to i64
  %34 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 0
  %35 = load i8*, i8** %34, align 8
  %36 = load i8*, i8** %11, align 8
  %37 = ptrtoint i8* %36 to i64
  %38 = icmp eq i8* %36, %35
  br i1 %38, label %152, label %39

39:                                               ; preds = %27
  %40 = ptrtoint i8* %35 to i64
  %41 = ptrtoint i8* %36 to i64
  %42 = sub i64 %41, %40
  %43 = icmp ult i64 %42, 16
  br i1 %43, label %139, label %44

44:                                               ; preds = %39
  %45 = sub i64 %13, %37
  %46 = sub i64 %45, %7
  %47 = getelementptr i8, i8* %35, i64 %46
  %48 = ptrtoint i8* %47 to i64
  %49 = getelementptr i8, i8* %29, i64 %48
  %50 = icmp ult i8* %49, %36
  %51 = icmp ult i8* %35, %30
  %52 = and i1 %50, %51
  br i1 %52, label %139, label %53

53:                                               ; preds = %44
  %54 = and i64 %42, -16
  %55 = sub i64 0, %54
  %56 = getelementptr i8, i8* %30, i64 %55
  %57 = sub i64 0, %54
  %58 = getelementptr i8, i8* %36, i64 %57
  %59 = add i64 %54, -16
  %60 = lshr exact i64 %59, 4
  %61 = add nuw nsw i64 %60, 1
  %62 = and i64 %61, 3
  %63 = icmp ult i64 %59, 48
  br i1 %63, label %116, label %64

64:                                               ; preds = %53
  %65 = sub nsw i64 %61, %62
  %66 = getelementptr i8, i8* %30, i64 -1
  %67 = getelementptr inbounds i8, i8* %66, i64 -8
  %68 = getelementptr inbounds i8, i8* %36, i64 -16
  %69 = getelementptr inbounds i8, i8* %67, i64 -7
  %70 = getelementptr i8, i8* %30, i64 -1
  %71 = getelementptr inbounds i8, i8* %70, i64 -8
  %72 = getelementptr inbounds i8, i8* %36, i64 -16
  %73 = getelementptr inbounds i8, i8* %71, i64 -7
  %74 = getelementptr i8, i8* %30, i64 -1
  %75 = getelementptr inbounds i8, i8* %74, i64 -8
  %76 = getelementptr inbounds i8, i8* %36, i64 -16
  %77 = getelementptr inbounds i8, i8* %75, i64 -7
  %78 = getelementptr i8, i8* %30, i64 -1
  %79 = getelementptr inbounds i8, i8* %78, i64 -8
  %80 = getelementptr inbounds i8, i8* %36, i64 -16
  %81 = getelementptr inbounds i8, i8* %79, i64 -7
  br label %82

82:                                               ; preds = %82, %64
  %83 = phi i64 [ 0, %64 ], [ %113, %82 ]
  %84 = phi i64 [ %65, %64 ], [ %114, %82 ]
  %85 = sub i64 0, %83
  %86 = sub i64 0, %83
  %87 = getelementptr inbounds i8, i8* %68, i64 %86
  %88 = bitcast i8* %87 to <2 x i64>*
  %89 = load <2 x i64>, <2 x i64>* %88, align 1, !alias.scope !3
  %90 = getelementptr inbounds i8, i8* %69, i64 %85
  %91 = bitcast i8* %90 to <2 x i64>*
  store <2 x i64> %89, <2 x i64>* %91, align 1, !alias.scope !6, !noalias !3
  %92 = sub nuw nsw i64 -16, %83
  %93 = sub nuw nsw i64 -16, %83
  %94 = getelementptr inbounds i8, i8* %72, i64 %93
  %95 = bitcast i8* %94 to <2 x i64>*
  %96 = load <2 x i64>, <2 x i64>* %95, align 1, !alias.scope !3
  %97 = getelementptr inbounds i8, i8* %73, i64 %92
  %98 = bitcast i8* %97 to <2 x i64>*
  store <2 x i64> %96, <2 x i64>* %98, align 1, !alias.scope !6, !noalias !3
  %99 = sub nuw nsw i64 -32, %83
  %100 = sub nuw nsw i64 -32, %83
  %101 = getelementptr inbounds i8, i8* %76, i64 %100
  %102 = bitcast i8* %101 to <2 x i64>*
  %103 = load <2 x i64>, <2 x i64>* %102, align 1, !alias.scope !3
  %104 = getelementptr inbounds i8, i8* %77, i64 %99
  %105 = bitcast i8* %104 to <2 x i64>*
  store <2 x i64> %103, <2 x i64>* %105, align 1, !alias.scope !6, !noalias !3
  %106 = sub nuw nsw i64 -48, %83
  %107 = sub nuw nsw i64 -48, %83
  %108 = getelementptr inbounds i8, i8* %80, i64 %107
  %109 = bitcast i8* %108 to <2 x i64>*
  %110 = load <2 x i64>, <2 x i64>* %109, align 1, !alias.scope !3
  %111 = getelementptr inbounds i8, i8* %81, i64 %106
  %112 = bitcast i8* %111 to <2 x i64>*
  store <2 x i64> %110, <2 x i64>* %112, align 1, !alias.scope !6, !noalias !3
  %113 = add i64 %83, 64
  %114 = add i64 %84, -4
  %115 = icmp eq i64 %114, 0
  br i1 %115, label %116, label %82, !llvm.loop !8

116:                                              ; preds = %82, %53
  %117 = phi i64 [ 0, %53 ], [ %113, %82 ]
  %118 = icmp eq i64 %62, 0
  br i1 %118, label %137, label %119

119:                                              ; preds = %116
  %120 = getelementptr i8, i8* %30, i64 -1
  %121 = getelementptr inbounds i8, i8* %120, i64 -8
  %122 = getelementptr inbounds i8, i8* %36, i64 -16
  %123 = getelementptr inbounds i8, i8* %121, i64 -7
  br label %124

124:                                              ; preds = %124, %119
  %125 = phi i64 [ %117, %119 ], [ %134, %124 ]
  %126 = phi i64 [ %62, %119 ], [ %135, %124 ]
  %127 = sub i64 0, %125
  %128 = sub i64 0, %125
  %129 = getelementptr inbounds i8, i8* %122, i64 %128
  %130 = bitcast i8* %129 to <2 x i64>*
  %131 = load <2 x i64>, <2 x i64>* %130, align 1, !alias.scope !3
  %132 = getelementptr inbounds i8, i8* %123, i64 %127
  %133 = bitcast i8* %132 to <2 x i64>*
  store <2 x i64> %131, <2 x i64>* %133, align 1, !alias.scope !6, !noalias !3
  %134 = add i64 %125, 16
  %135 = add i64 %126, -1
  %136 = icmp eq i64 %135, 0
  br i1 %136, label %137, label %124, !llvm.loop !10

137:                                              ; preds = %124, %116
  %138 = icmp eq i64 %42, %54
  br i1 %138, label %149, label %139

139:                                              ; preds = %137, %44, %39
  %140 = phi i8* [ %30, %44 ], [ %30, %39 ], [ %56, %137 ]
  %141 = phi i8* [ %36, %44 ], [ %36, %39 ], [ %58, %137 ]
  br label %142

142:                                              ; preds = %139, %142
  %143 = phi i8* [ %145, %142 ], [ %140, %139 ]
  %144 = phi i8* [ %146, %142 ], [ %141, %139 ]
  %145 = getelementptr inbounds i8, i8* %143, i64 -1
  %146 = getelementptr inbounds i8, i8* %144, i64 -1
  %147 = load i8, i8* %146, align 1
  store i8 %147, i8* %145, align 1
  %148 = icmp eq i8* %146, %35
  br i1 %148, label %149, label %142, !llvm.loop !12

149:                                              ; preds = %142, %137
  %150 = phi i8* [ %56, %137 ], [ %145, %142 ]
  %151 = ptrtoint i8* %150 to i64
  br label %152

152:                                              ; preds = %149, %27
  %153 = phi i64 [ %31, %27 ], [ %151, %149 ]
  store i64 %153, i64* %6, align 8
  store i64 %31, i64* %12, align 8
  store i64 %33, i64* %4, align 8
  br label %154

154:                                              ; preds = %1, %152
  %155 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 2
  store i32 1, i32* %155, align 8
  tail call void @_ZN2v88internal13EhFrameWriter8WriteCieEv(%"class.v8::internal::EhFrameWriter"* %0)
  tail call void @_ZN2v88internal13EhFrameWriter14WriteFdeHeaderEv(%"class.v8::internal::EhFrameWriter"* %0)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal13EhFrameWriter8WriteCieEv(%"class.v8::internal::EhFrameWriter"*) local_unnamed_addr #0 align 2 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 5, i32 0
  %5 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 5, i32 0, i32 0, i32 1
  %6 = bitcast i8** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = bitcast %"class.std::__1::vector"* %4 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %7, %9
  %11 = trunc i64 %10 to i32
  %12 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12)
  store i32 -559038242, i32* %3, align 4
  %13 = inttoptr i64 %7 to i8*
  %14 = getelementptr inbounds i32, i32* %3, i64 1
  %15 = bitcast i32* %14 to i8*
  %16 = call i8* @_ZNSt3__16vectorIhN2v88internal13ZoneAllocatorIhEEE6insertIPKhEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsISA_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSE_IS8_EESA_SA_(%"class.std::__1::vector"* %4, i8* %13, i8* nonnull %12, i8* %15) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12)
  %17 = load i64, i64* %6, align 8
  %18 = load i64, i64* %8, align 8
  %19 = sub i64 %17, %18
  %20 = trunc i64 %19 to i32
  %21 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %21)
  store i32 0, i32* %2, align 4
  %22 = inttoptr i64 %17 to i8*
  %23 = getelementptr inbounds i32, i32* %2, i64 1
  %24 = bitcast i32* %23 to i8*
  %25 = call i8* @_ZNSt3__16vectorIhN2v88internal13ZoneAllocatorIhEEE6insertIPKhEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsISA_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSE_IS8_EESA_SA_(%"class.std::__1::vector"* %4, i8* %22, i8* nonnull %21, i8* %24) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %21)
  %26 = load i8*, i8** %5, align 8
  %27 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 5, i32 0, i32 0, i32 2, i32 0, i32 0
  %28 = load i8*, i8** %27, align 8
  %29 = icmp eq i8* %26, %28
  %30 = ptrtoint i8* %28 to i64
  br i1 %29, label %34, label %31

31:                                               ; preds = %1
  store i8 3, i8* %26, align 1
  %32 = getelementptr inbounds i8, i8* %26, i64 1
  %33 = ptrtoint i8* %32 to i64
  store i64 %33, i64* %6, align 8
  br label %196

34:                                               ; preds = %1
  %35 = ptrtoint i8* %26 to i64
  %36 = load i64, i64* %8, align 8
  %37 = sub i64 %35, %36
  %38 = add i64 %37, 1
  %39 = icmp ugt i64 %38, 2147483647
  br i1 %39, label %40, label %42

40:                                               ; preds = %34
  %41 = bitcast %"class.std::__1::vector"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %41) #7
  unreachable

42:                                               ; preds = %34
  %43 = bitcast i8** %27 to i64*
  %44 = sub i64 %30, %36
  %45 = icmp ult i64 %44, 1073741823
  br i1 %45, label %46, label %51

46:                                               ; preds = %42
  %47 = shl i64 %44, 1
  %48 = icmp ult i64 %47, %38
  %49 = select i1 %48, i64 %38, i64 %47
  %50 = icmp eq i64 %49, 0
  br i1 %50, label %70, label %51

51:                                               ; preds = %46, %42
  %52 = phi i64 [ %49, %46 ], [ 2147483647, %42 ]
  %53 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 5, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %54 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %53, align 8
  %55 = add nuw nsw i64 %52, 7
  %56 = and i64 %55, -8
  %57 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %54, i64 0, i32 2
  %58 = load i64, i64* %57, align 8
  %59 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %54, i64 0, i32 3
  %60 = load i64, i64* %59, align 8
  %61 = sub i64 %60, %58
  %62 = icmp ugt i64 %56, %61
  br i1 %62, label %63, label %65, !prof !2

63:                                               ; preds = %51
  %64 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %54, i64 %56) #6
  br label %67

65:                                               ; preds = %51
  %66 = add i64 %58, %56
  store i64 %66, i64* %57, align 8
  br label %67

67:                                               ; preds = %65, %63
  %68 = phi i64 [ %64, %63 ], [ %58, %65 ]
  %69 = inttoptr i64 %68 to i8*
  br label %70

70:                                               ; preds = %67, %46
  %71 = phi i64 [ %52, %67 ], [ 0, %46 ]
  %72 = phi i8* [ %69, %67 ], [ null, %46 ]
  %73 = getelementptr inbounds i8, i8* %72, i64 %37
  %74 = getelementptr inbounds i8, i8* %72, i64 %71
  %75 = ptrtoint i8* %74 to i64
  store i8 3, i8* %73, align 1
  %76 = getelementptr inbounds i8, i8* %73, i64 1
  %77 = ptrtoint i8* %76 to i64
  %78 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 0
  %79 = load i8*, i8** %78, align 8
  %80 = load i8*, i8** %5, align 8
  %81 = ptrtoint i8* %80 to i64
  %82 = icmp eq i8* %80, %79
  br i1 %82, label %193, label %83

83:                                               ; preds = %70
  %84 = ptrtoint i8* %79 to i64
  %85 = ptrtoint i8* %80 to i64
  %86 = sub i64 %85, %84
  %87 = icmp ult i64 %86, 16
  br i1 %87, label %183, label %88

88:                                               ; preds = %83
  %89 = sub i64 %35, %81
  %90 = sub i64 %89, %36
  %91 = getelementptr i8, i8* %79, i64 %90
  %92 = ptrtoint i8* %91 to i64
  %93 = getelementptr i8, i8* %72, i64 %92
  %94 = icmp ult i8* %93, %80
  %95 = icmp ult i8* %79, %73
  %96 = and i1 %94, %95
  br i1 %96, label %183, label %97

97:                                               ; preds = %88
  %98 = and i64 %86, -16
  %99 = sub i64 0, %98
  %100 = getelementptr i8, i8* %73, i64 %99
  %101 = sub i64 0, %98
  %102 = getelementptr i8, i8* %80, i64 %101
  %103 = add i64 %98, -16
  %104 = lshr exact i64 %103, 4
  %105 = add nuw nsw i64 %104, 1
  %106 = and i64 %105, 3
  %107 = icmp ult i64 %103, 48
  br i1 %107, label %160, label %108

108:                                              ; preds = %97
  %109 = sub nsw i64 %105, %106
  %110 = getelementptr i8, i8* %73, i64 -1
  %111 = getelementptr inbounds i8, i8* %110, i64 -8
  %112 = getelementptr inbounds i8, i8* %80, i64 -16
  %113 = getelementptr inbounds i8, i8* %111, i64 -7
  %114 = getelementptr i8, i8* %73, i64 -1
  %115 = getelementptr inbounds i8, i8* %114, i64 -8
  %116 = getelementptr inbounds i8, i8* %80, i64 -16
  %117 = getelementptr inbounds i8, i8* %115, i64 -7
  %118 = getelementptr i8, i8* %73, i64 -1
  %119 = getelementptr inbounds i8, i8* %118, i64 -8
  %120 = getelementptr inbounds i8, i8* %80, i64 -16
  %121 = getelementptr inbounds i8, i8* %119, i64 -7
  %122 = getelementptr i8, i8* %73, i64 -1
  %123 = getelementptr inbounds i8, i8* %122, i64 -8
  %124 = getelementptr inbounds i8, i8* %80, i64 -16
  %125 = getelementptr inbounds i8, i8* %123, i64 -7
  br label %126

126:                                              ; preds = %126, %108
  %127 = phi i64 [ 0, %108 ], [ %157, %126 ]
  %128 = phi i64 [ %109, %108 ], [ %158, %126 ]
  %129 = sub i64 0, %127
  %130 = sub i64 0, %127
  %131 = getelementptr inbounds i8, i8* %112, i64 %130
  %132 = bitcast i8* %131 to <2 x i64>*
  %133 = load <2 x i64>, <2 x i64>* %132, align 1, !alias.scope !13
  %134 = getelementptr inbounds i8, i8* %113, i64 %129
  %135 = bitcast i8* %134 to <2 x i64>*
  store <2 x i64> %133, <2 x i64>* %135, align 1, !alias.scope !16, !noalias !13
  %136 = sub nuw nsw i64 -16, %127
  %137 = sub nuw nsw i64 -16, %127
  %138 = getelementptr inbounds i8, i8* %116, i64 %137
  %139 = bitcast i8* %138 to <2 x i64>*
  %140 = load <2 x i64>, <2 x i64>* %139, align 1, !alias.scope !13
  %141 = getelementptr inbounds i8, i8* %117, i64 %136
  %142 = bitcast i8* %141 to <2 x i64>*
  store <2 x i64> %140, <2 x i64>* %142, align 1, !alias.scope !16, !noalias !13
  %143 = sub nuw nsw i64 -32, %127
  %144 = sub nuw nsw i64 -32, %127
  %145 = getelementptr inbounds i8, i8* %120, i64 %144
  %146 = bitcast i8* %145 to <2 x i64>*
  %147 = load <2 x i64>, <2 x i64>* %146, align 1, !alias.scope !13
  %148 = getelementptr inbounds i8, i8* %121, i64 %143
  %149 = bitcast i8* %148 to <2 x i64>*
  store <2 x i64> %147, <2 x i64>* %149, align 1, !alias.scope !16, !noalias !13
  %150 = sub nuw nsw i64 -48, %127
  %151 = sub nuw nsw i64 -48, %127
  %152 = getelementptr inbounds i8, i8* %124, i64 %151
  %153 = bitcast i8* %152 to <2 x i64>*
  %154 = load <2 x i64>, <2 x i64>* %153, align 1, !alias.scope !13
  %155 = getelementptr inbounds i8, i8* %125, i64 %150
  %156 = bitcast i8* %155 to <2 x i64>*
  store <2 x i64> %154, <2 x i64>* %156, align 1, !alias.scope !16, !noalias !13
  %157 = add i64 %127, 64
  %158 = add i64 %128, -4
  %159 = icmp eq i64 %158, 0
  br i1 %159, label %160, label %126, !llvm.loop !18

160:                                              ; preds = %126, %97
  %161 = phi i64 [ 0, %97 ], [ %157, %126 ]
  %162 = icmp eq i64 %106, 0
  br i1 %162, label %181, label %163

163:                                              ; preds = %160
  %164 = getelementptr i8, i8* %73, i64 -1
  %165 = getelementptr inbounds i8, i8* %164, i64 -8
  %166 = getelementptr inbounds i8, i8* %80, i64 -16
  %167 = getelementptr inbounds i8, i8* %165, i64 -7
  br label %168

168:                                              ; preds = %168, %163
  %169 = phi i64 [ %161, %163 ], [ %178, %168 ]
  %170 = phi i64 [ %106, %163 ], [ %179, %168 ]
  %171 = sub i64 0, %169
  %172 = sub i64 0, %169
  %173 = getelementptr inbounds i8, i8* %166, i64 %172
  %174 = bitcast i8* %173 to <2 x i64>*
  %175 = load <2 x i64>, <2 x i64>* %174, align 1, !alias.scope !13
  %176 = getelementptr inbounds i8, i8* %167, i64 %171
  %177 = bitcast i8* %176 to <2 x i64>*
  store <2 x i64> %175, <2 x i64>* %177, align 1, !alias.scope !16, !noalias !13
  %178 = add i64 %169, 16
  %179 = add i64 %170, -1
  %180 = icmp eq i64 %179, 0
  br i1 %180, label %181, label %168, !llvm.loop !19

181:                                              ; preds = %168, %160
  %182 = icmp eq i64 %86, %98
  br i1 %182, label %193, label %183

183:                                              ; preds = %181, %88, %83
  %184 = phi i8* [ %73, %88 ], [ %73, %83 ], [ %100, %181 ]
  %185 = phi i8* [ %80, %88 ], [ %80, %83 ], [ %102, %181 ]
  br label %186

186:                                              ; preds = %183, %186
  %187 = phi i8* [ %189, %186 ], [ %184, %183 ]
  %188 = phi i8* [ %190, %186 ], [ %185, %183 ]
  %189 = getelementptr inbounds i8, i8* %187, i64 -1
  %190 = getelementptr inbounds i8, i8* %188, i64 -1
  %191 = load i8, i8* %190, align 1
  store i8 %191, i8* %189, align 1
  %192 = icmp eq i8* %190, %79
  br i1 %192, label %193, label %186, !llvm.loop !20

193:                                              ; preds = %186, %181, %70
  %194 = phi i8* [ %73, %70 ], [ %100, %181 ], [ %189, %186 ]
  %195 = ptrtoint i8* %194 to i64
  store i64 %195, i64* %8, align 8
  store i64 %77, i64* %6, align 8
  store i64 %75, i64* %43, align 8
  br label %196

196:                                              ; preds = %31, %193
  %197 = phi i8* [ %32, %31 ], [ %76, %193 ]
  %198 = call i8* @_ZNSt3__16vectorIhN2v88internal13ZoneAllocatorIhEEE6insertIPKhEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsISA_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSE_IS8_EESA_SA_(%"class.std::__1::vector"* %4, i8* %197, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @_ZZN2v88internal13EhFrameWriter8WriteCieEvE19kAugmentationString, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @_ZZN2v88internal13EhFrameWriter8WriteCieEvE19kAugmentationString, i64 1, i64 0)) #6
  %199 = load i32, i32* @_ZN2v88internal16EhFrameConstants20kCodeAlignmentFactorE, align 4
  call void @_ZN2v88internal13EhFrameWriter12WriteSLeb128Ei(%"class.v8::internal::EhFrameWriter"* %0, i32 %199)
  %200 = load i32, i32* @_ZN2v88internal16EhFrameConstants20kDataAlignmentFactorE, align 4
  call void @_ZN2v88internal13EhFrameWriter12WriteSLeb128Ei(%"class.v8::internal::EhFrameWriter"* %0, i32 %200)
  call void @_ZN2v88internal13EhFrameWriter30WriteReturnAddressRegisterCodeEv(%"class.v8::internal::EhFrameWriter"* %0) #6
  call void @_ZN2v88internal13EhFrameWriter12WriteULeb128Ej(%"class.v8::internal::EhFrameWriter"* %0, i32 2)
  %201 = load i8*, i8** %5, align 8
  %202 = load i8*, i8** %27, align 8
  %203 = icmp eq i8* %201, %202
  %204 = ptrtoint i8* %202 to i64
  br i1 %203, label %210, label %205

205:                                              ; preds = %196
  store i8 -1, i8* %201, align 1
  %206 = getelementptr inbounds i8, i8* %201, i64 1
  %207 = ptrtoint i8* %206 to i64
  store i64 %207, i64* %6, align 8
  %208 = load i8*, i8** %27, align 8
  %209 = ptrtoint i8* %208 to i64
  br label %372

210:                                              ; preds = %196
  %211 = ptrtoint i8* %201 to i64
  %212 = load i64, i64* %8, align 8
  %213 = sub i64 %211, %212
  %214 = add i64 %213, 1
  %215 = icmp ugt i64 %214, 2147483647
  br i1 %215, label %216, label %218

216:                                              ; preds = %210
  %217 = bitcast %"class.std::__1::vector"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %217) #7
  unreachable

218:                                              ; preds = %210
  %219 = bitcast i8** %27 to i64*
  %220 = sub i64 %204, %212
  %221 = icmp ult i64 %220, 1073741823
  br i1 %221, label %222, label %227

222:                                              ; preds = %218
  %223 = shl i64 %220, 1
  %224 = icmp ult i64 %223, %214
  %225 = select i1 %224, i64 %214, i64 %223
  %226 = icmp eq i64 %225, 0
  br i1 %226, label %246, label %227

227:                                              ; preds = %222, %218
  %228 = phi i64 [ %225, %222 ], [ 2147483647, %218 ]
  %229 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 5, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %230 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %229, align 8
  %231 = add nuw nsw i64 %228, 7
  %232 = and i64 %231, -8
  %233 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %230, i64 0, i32 2
  %234 = load i64, i64* %233, align 8
  %235 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %230, i64 0, i32 3
  %236 = load i64, i64* %235, align 8
  %237 = sub i64 %236, %234
  %238 = icmp ugt i64 %232, %237
  br i1 %238, label %239, label %241, !prof !2

239:                                              ; preds = %227
  %240 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %230, i64 %232) #6
  br label %243

241:                                              ; preds = %227
  %242 = add i64 %234, %232
  store i64 %242, i64* %233, align 8
  br label %243

243:                                              ; preds = %241, %239
  %244 = phi i64 [ %240, %239 ], [ %234, %241 ]
  %245 = inttoptr i64 %244 to i8*
  br label %246

246:                                              ; preds = %243, %222
  %247 = phi i64 [ %228, %243 ], [ 0, %222 ]
  %248 = phi i8* [ %245, %243 ], [ null, %222 ]
  %249 = getelementptr inbounds i8, i8* %248, i64 %213
  %250 = getelementptr inbounds i8, i8* %248, i64 %247
  %251 = ptrtoint i8* %250 to i64
  store i8 -1, i8* %249, align 1
  %252 = getelementptr inbounds i8, i8* %249, i64 1
  %253 = ptrtoint i8* %252 to i64
  %254 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 0
  %255 = load i8*, i8** %254, align 8
  %256 = load i8*, i8** %5, align 8
  %257 = ptrtoint i8* %256 to i64
  %258 = icmp eq i8* %256, %255
  br i1 %258, label %369, label %259

259:                                              ; preds = %246
  %260 = ptrtoint i8* %255 to i64
  %261 = ptrtoint i8* %256 to i64
  %262 = sub i64 %261, %260
  %263 = icmp ult i64 %262, 16
  br i1 %263, label %359, label %264

264:                                              ; preds = %259
  %265 = sub i64 %211, %257
  %266 = sub i64 %265, %212
  %267 = getelementptr i8, i8* %255, i64 %266
  %268 = ptrtoint i8* %267 to i64
  %269 = getelementptr i8, i8* %248, i64 %268
  %270 = icmp ult i8* %269, %256
  %271 = icmp ult i8* %255, %249
  %272 = and i1 %270, %271
  br i1 %272, label %359, label %273

273:                                              ; preds = %264
  %274 = and i64 %262, -16
  %275 = sub i64 0, %274
  %276 = getelementptr i8, i8* %249, i64 %275
  %277 = sub i64 0, %274
  %278 = getelementptr i8, i8* %256, i64 %277
  %279 = add i64 %274, -16
  %280 = lshr exact i64 %279, 4
  %281 = add nuw nsw i64 %280, 1
  %282 = and i64 %281, 3
  %283 = icmp ult i64 %279, 48
  br i1 %283, label %336, label %284

284:                                              ; preds = %273
  %285 = sub nsw i64 %281, %282
  %286 = getelementptr i8, i8* %249, i64 -1
  %287 = getelementptr inbounds i8, i8* %286, i64 -8
  %288 = getelementptr inbounds i8, i8* %256, i64 -16
  %289 = getelementptr inbounds i8, i8* %287, i64 -7
  %290 = getelementptr i8, i8* %249, i64 -1
  %291 = getelementptr inbounds i8, i8* %290, i64 -8
  %292 = getelementptr inbounds i8, i8* %256, i64 -16
  %293 = getelementptr inbounds i8, i8* %291, i64 -7
  %294 = getelementptr i8, i8* %249, i64 -1
  %295 = getelementptr inbounds i8, i8* %294, i64 -8
  %296 = getelementptr inbounds i8, i8* %256, i64 -16
  %297 = getelementptr inbounds i8, i8* %295, i64 -7
  %298 = getelementptr i8, i8* %249, i64 -1
  %299 = getelementptr inbounds i8, i8* %298, i64 -8
  %300 = getelementptr inbounds i8, i8* %256, i64 -16
  %301 = getelementptr inbounds i8, i8* %299, i64 -7
  br label %302

302:                                              ; preds = %302, %284
  %303 = phi i64 [ 0, %284 ], [ %333, %302 ]
  %304 = phi i64 [ %285, %284 ], [ %334, %302 ]
  %305 = sub i64 0, %303
  %306 = sub i64 0, %303
  %307 = getelementptr inbounds i8, i8* %288, i64 %306
  %308 = bitcast i8* %307 to <2 x i64>*
  %309 = load <2 x i64>, <2 x i64>* %308, align 1, !alias.scope !21
  %310 = getelementptr inbounds i8, i8* %289, i64 %305
  %311 = bitcast i8* %310 to <2 x i64>*
  store <2 x i64> %309, <2 x i64>* %311, align 1, !alias.scope !24, !noalias !21
  %312 = sub nuw nsw i64 -16, %303
  %313 = sub nuw nsw i64 -16, %303
  %314 = getelementptr inbounds i8, i8* %292, i64 %313
  %315 = bitcast i8* %314 to <2 x i64>*
  %316 = load <2 x i64>, <2 x i64>* %315, align 1, !alias.scope !21
  %317 = getelementptr inbounds i8, i8* %293, i64 %312
  %318 = bitcast i8* %317 to <2 x i64>*
  store <2 x i64> %316, <2 x i64>* %318, align 1, !alias.scope !24, !noalias !21
  %319 = sub nuw nsw i64 -32, %303
  %320 = sub nuw nsw i64 -32, %303
  %321 = getelementptr inbounds i8, i8* %296, i64 %320
  %322 = bitcast i8* %321 to <2 x i64>*
  %323 = load <2 x i64>, <2 x i64>* %322, align 1, !alias.scope !21
  %324 = getelementptr inbounds i8, i8* %297, i64 %319
  %325 = bitcast i8* %324 to <2 x i64>*
  store <2 x i64> %323, <2 x i64>* %325, align 1, !alias.scope !24, !noalias !21
  %326 = sub nuw nsw i64 -48, %303
  %327 = sub nuw nsw i64 -48, %303
  %328 = getelementptr inbounds i8, i8* %300, i64 %327
  %329 = bitcast i8* %328 to <2 x i64>*
  %330 = load <2 x i64>, <2 x i64>* %329, align 1, !alias.scope !21
  %331 = getelementptr inbounds i8, i8* %301, i64 %326
  %332 = bitcast i8* %331 to <2 x i64>*
  store <2 x i64> %330, <2 x i64>* %332, align 1, !alias.scope !24, !noalias !21
  %333 = add i64 %303, 64
  %334 = add i64 %304, -4
  %335 = icmp eq i64 %334, 0
  br i1 %335, label %336, label %302, !llvm.loop !26

336:                                              ; preds = %302, %273
  %337 = phi i64 [ 0, %273 ], [ %333, %302 ]
  %338 = icmp eq i64 %282, 0
  br i1 %338, label %357, label %339

339:                                              ; preds = %336
  %340 = getelementptr i8, i8* %249, i64 -1
  %341 = getelementptr inbounds i8, i8* %340, i64 -8
  %342 = getelementptr inbounds i8, i8* %256, i64 -16
  %343 = getelementptr inbounds i8, i8* %341, i64 -7
  br label %344

344:                                              ; preds = %344, %339
  %345 = phi i64 [ %337, %339 ], [ %354, %344 ]
  %346 = phi i64 [ %282, %339 ], [ %355, %344 ]
  %347 = sub i64 0, %345
  %348 = sub i64 0, %345
  %349 = getelementptr inbounds i8, i8* %342, i64 %348
  %350 = bitcast i8* %349 to <2 x i64>*
  %351 = load <2 x i64>, <2 x i64>* %350, align 1, !alias.scope !21
  %352 = getelementptr inbounds i8, i8* %343, i64 %347
  %353 = bitcast i8* %352 to <2 x i64>*
  store <2 x i64> %351, <2 x i64>* %353, align 1, !alias.scope !24, !noalias !21
  %354 = add i64 %345, 16
  %355 = add i64 %346, -1
  %356 = icmp eq i64 %355, 0
  br i1 %356, label %357, label %344, !llvm.loop !27

357:                                              ; preds = %344, %336
  %358 = icmp eq i64 %262, %274
  br i1 %358, label %369, label %359

359:                                              ; preds = %357, %264, %259
  %360 = phi i8* [ %249, %264 ], [ %249, %259 ], [ %276, %357 ]
  %361 = phi i8* [ %256, %264 ], [ %256, %259 ], [ %278, %357 ]
  br label %362

362:                                              ; preds = %359, %362
  %363 = phi i8* [ %365, %362 ], [ %360, %359 ]
  %364 = phi i8* [ %366, %362 ], [ %361, %359 ]
  %365 = getelementptr inbounds i8, i8* %363, i64 -1
  %366 = getelementptr inbounds i8, i8* %364, i64 -1
  %367 = load i8, i8* %366, align 1
  store i8 %367, i8* %365, align 1
  %368 = icmp eq i8* %366, %255
  br i1 %368, label %369, label %362, !llvm.loop !28

369:                                              ; preds = %362, %357, %246
  %370 = phi i8* [ %249, %246 ], [ %276, %357 ], [ %365, %362 ]
  %371 = ptrtoint i8* %370 to i64
  store i64 %371, i64* %8, align 8
  store i64 %253, i64* %6, align 8
  store i64 %251, i64* %219, align 8
  br label %372

372:                                              ; preds = %205, %369
  %373 = phi i64 [ %209, %205 ], [ %251, %369 ]
  %374 = phi i8* [ %208, %205 ], [ %250, %369 ]
  %375 = phi i8* [ %206, %205 ], [ %252, %369 ]
  %376 = icmp eq i8* %375, %374
  br i1 %376, label %380, label %377

377:                                              ; preds = %372
  store i8 27, i8* %375, align 1
  %378 = getelementptr inbounds i8, i8* %375, i64 1
  %379 = ptrtoint i8* %378 to i64
  store i64 %379, i64* %6, align 8
  br label %540

380:                                              ; preds = %372
  %381 = load i64, i64* %8, align 8
  %382 = sub i64 %373, %381
  %383 = add i64 %382, 1
  %384 = icmp ugt i64 %383, 2147483647
  br i1 %384, label %385, label %387

385:                                              ; preds = %380
  %386 = bitcast %"class.std::__1::vector"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %386) #7
  unreachable

387:                                              ; preds = %380
  %388 = bitcast i8** %27 to i64*
  %389 = icmp ult i64 %382, 1073741823
  br i1 %389, label %390, label %395

390:                                              ; preds = %387
  %391 = shl i64 %382, 1
  %392 = icmp ult i64 %391, %383
  %393 = select i1 %392, i64 %383, i64 %391
  %394 = icmp eq i64 %393, 0
  br i1 %394, label %414, label %395

395:                                              ; preds = %390, %387
  %396 = phi i64 [ %393, %390 ], [ 2147483647, %387 ]
  %397 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 5, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %398 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %397, align 8
  %399 = add nuw nsw i64 %396, 7
  %400 = and i64 %399, -8
  %401 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %398, i64 0, i32 2
  %402 = load i64, i64* %401, align 8
  %403 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %398, i64 0, i32 3
  %404 = load i64, i64* %403, align 8
  %405 = sub i64 %404, %402
  %406 = icmp ugt i64 %400, %405
  br i1 %406, label %407, label %409, !prof !2

407:                                              ; preds = %395
  %408 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %398, i64 %400) #6
  br label %411

409:                                              ; preds = %395
  %410 = add i64 %402, %400
  store i64 %410, i64* %401, align 8
  br label %411

411:                                              ; preds = %409, %407
  %412 = phi i64 [ %408, %407 ], [ %402, %409 ]
  %413 = inttoptr i64 %412 to i8*
  br label %414

414:                                              ; preds = %411, %390
  %415 = phi i64 [ %396, %411 ], [ 0, %390 ]
  %416 = phi i8* [ %413, %411 ], [ null, %390 ]
  %417 = getelementptr inbounds i8, i8* %416, i64 %382
  %418 = getelementptr inbounds i8, i8* %416, i64 %415
  %419 = ptrtoint i8* %418 to i64
  store i8 27, i8* %417, align 1
  %420 = getelementptr inbounds i8, i8* %417, i64 1
  %421 = ptrtoint i8* %420 to i64
  %422 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 0
  %423 = load i8*, i8** %422, align 8
  %424 = load i8*, i8** %5, align 8
  %425 = ptrtoint i8* %424 to i64
  %426 = icmp eq i8* %424, %423
  br i1 %426, label %537, label %427

427:                                              ; preds = %414
  %428 = ptrtoint i8* %423 to i64
  %429 = ptrtoint i8* %424 to i64
  %430 = sub i64 %429, %428
  %431 = icmp ult i64 %430, 16
  br i1 %431, label %527, label %432

432:                                              ; preds = %427
  %433 = sub i64 %373, %425
  %434 = sub i64 %433, %381
  %435 = getelementptr i8, i8* %423, i64 %434
  %436 = ptrtoint i8* %435 to i64
  %437 = getelementptr i8, i8* %416, i64 %436
  %438 = icmp ult i8* %437, %424
  %439 = icmp ult i8* %423, %417
  %440 = and i1 %438, %439
  br i1 %440, label %527, label %441

441:                                              ; preds = %432
  %442 = and i64 %430, -16
  %443 = sub i64 0, %442
  %444 = getelementptr i8, i8* %417, i64 %443
  %445 = sub i64 0, %442
  %446 = getelementptr i8, i8* %424, i64 %445
  %447 = add i64 %442, -16
  %448 = lshr exact i64 %447, 4
  %449 = add nuw nsw i64 %448, 1
  %450 = and i64 %449, 3
  %451 = icmp ult i64 %447, 48
  br i1 %451, label %504, label %452

452:                                              ; preds = %441
  %453 = sub nsw i64 %449, %450
  %454 = getelementptr i8, i8* %417, i64 -1
  %455 = getelementptr inbounds i8, i8* %454, i64 -8
  %456 = getelementptr inbounds i8, i8* %424, i64 -16
  %457 = getelementptr inbounds i8, i8* %455, i64 -7
  %458 = getelementptr i8, i8* %417, i64 -1
  %459 = getelementptr inbounds i8, i8* %458, i64 -8
  %460 = getelementptr inbounds i8, i8* %424, i64 -16
  %461 = getelementptr inbounds i8, i8* %459, i64 -7
  %462 = getelementptr i8, i8* %417, i64 -1
  %463 = getelementptr inbounds i8, i8* %462, i64 -8
  %464 = getelementptr inbounds i8, i8* %424, i64 -16
  %465 = getelementptr inbounds i8, i8* %463, i64 -7
  %466 = getelementptr i8, i8* %417, i64 -1
  %467 = getelementptr inbounds i8, i8* %466, i64 -8
  %468 = getelementptr inbounds i8, i8* %424, i64 -16
  %469 = getelementptr inbounds i8, i8* %467, i64 -7
  br label %470

470:                                              ; preds = %470, %452
  %471 = phi i64 [ 0, %452 ], [ %501, %470 ]
  %472 = phi i64 [ %453, %452 ], [ %502, %470 ]
  %473 = sub i64 0, %471
  %474 = sub i64 0, %471
  %475 = getelementptr inbounds i8, i8* %456, i64 %474
  %476 = bitcast i8* %475 to <2 x i64>*
  %477 = load <2 x i64>, <2 x i64>* %476, align 1, !alias.scope !29
  %478 = getelementptr inbounds i8, i8* %457, i64 %473
  %479 = bitcast i8* %478 to <2 x i64>*
  store <2 x i64> %477, <2 x i64>* %479, align 1, !alias.scope !32, !noalias !29
  %480 = sub nuw nsw i64 -16, %471
  %481 = sub nuw nsw i64 -16, %471
  %482 = getelementptr inbounds i8, i8* %460, i64 %481
  %483 = bitcast i8* %482 to <2 x i64>*
  %484 = load <2 x i64>, <2 x i64>* %483, align 1, !alias.scope !29
  %485 = getelementptr inbounds i8, i8* %461, i64 %480
  %486 = bitcast i8* %485 to <2 x i64>*
  store <2 x i64> %484, <2 x i64>* %486, align 1, !alias.scope !32, !noalias !29
  %487 = sub nuw nsw i64 -32, %471
  %488 = sub nuw nsw i64 -32, %471
  %489 = getelementptr inbounds i8, i8* %464, i64 %488
  %490 = bitcast i8* %489 to <2 x i64>*
  %491 = load <2 x i64>, <2 x i64>* %490, align 1, !alias.scope !29
  %492 = getelementptr inbounds i8, i8* %465, i64 %487
  %493 = bitcast i8* %492 to <2 x i64>*
  store <2 x i64> %491, <2 x i64>* %493, align 1, !alias.scope !32, !noalias !29
  %494 = sub nuw nsw i64 -48, %471
  %495 = sub nuw nsw i64 -48, %471
  %496 = getelementptr inbounds i8, i8* %468, i64 %495
  %497 = bitcast i8* %496 to <2 x i64>*
  %498 = load <2 x i64>, <2 x i64>* %497, align 1, !alias.scope !29
  %499 = getelementptr inbounds i8, i8* %469, i64 %494
  %500 = bitcast i8* %499 to <2 x i64>*
  store <2 x i64> %498, <2 x i64>* %500, align 1, !alias.scope !32, !noalias !29
  %501 = add i64 %471, 64
  %502 = add i64 %472, -4
  %503 = icmp eq i64 %502, 0
  br i1 %503, label %504, label %470, !llvm.loop !34

504:                                              ; preds = %470, %441
  %505 = phi i64 [ 0, %441 ], [ %501, %470 ]
  %506 = icmp eq i64 %450, 0
  br i1 %506, label %525, label %507

507:                                              ; preds = %504
  %508 = getelementptr i8, i8* %417, i64 -1
  %509 = getelementptr inbounds i8, i8* %508, i64 -8
  %510 = getelementptr inbounds i8, i8* %424, i64 -16
  %511 = getelementptr inbounds i8, i8* %509, i64 -7
  br label %512

512:                                              ; preds = %512, %507
  %513 = phi i64 [ %505, %507 ], [ %522, %512 ]
  %514 = phi i64 [ %450, %507 ], [ %523, %512 ]
  %515 = sub i64 0, %513
  %516 = sub i64 0, %513
  %517 = getelementptr inbounds i8, i8* %510, i64 %516
  %518 = bitcast i8* %517 to <2 x i64>*
  %519 = load <2 x i64>, <2 x i64>* %518, align 1, !alias.scope !29
  %520 = getelementptr inbounds i8, i8* %511, i64 %515
  %521 = bitcast i8* %520 to <2 x i64>*
  store <2 x i64> %519, <2 x i64>* %521, align 1, !alias.scope !32, !noalias !29
  %522 = add i64 %513, 16
  %523 = add i64 %514, -1
  %524 = icmp eq i64 %523, 0
  br i1 %524, label %525, label %512, !llvm.loop !35

525:                                              ; preds = %512, %504
  %526 = icmp eq i64 %430, %442
  br i1 %526, label %537, label %527

527:                                              ; preds = %525, %432, %427
  %528 = phi i8* [ %417, %432 ], [ %417, %427 ], [ %444, %525 ]
  %529 = phi i8* [ %424, %432 ], [ %424, %427 ], [ %446, %525 ]
  br label %530

530:                                              ; preds = %527, %530
  %531 = phi i8* [ %533, %530 ], [ %528, %527 ]
  %532 = phi i8* [ %534, %530 ], [ %529, %527 ]
  %533 = getelementptr inbounds i8, i8* %531, i64 -1
  %534 = getelementptr inbounds i8, i8* %532, i64 -1
  %535 = load i8, i8* %534, align 1
  store i8 %535, i8* %533, align 1
  %536 = icmp eq i8* %534, %423
  br i1 %536, label %537, label %530, !llvm.loop !36

537:                                              ; preds = %530, %525, %414
  %538 = phi i8* [ %417, %414 ], [ %444, %525 ], [ %533, %530 ]
  %539 = ptrtoint i8* %538 to i64
  store i64 %539, i64* %8, align 8
  store i64 %421, i64* %6, align 8
  store i64 %419, i64* %388, align 8
  br label %540

540:                                              ; preds = %377, %537
  call void @_ZN2v88internal13EhFrameWriter22WriteInitialStateInCieEv(%"class.v8::internal::EhFrameWriter"* %0) #6
  %541 = load i64, i64* %6, align 8
  %542 = load i64, i64* %8, align 8
  %543 = sub i64 %541, %542
  %544 = trunc i64 %543 to i32
  %545 = sub nsw i32 %544, %20
  %546 = add i32 %545, 7
  %547 = and i32 %546, -8
  %548 = sub nsw i32 %547, %545
  %549 = load atomic i8, i8* bitcast (i64* @_ZGVZN2v88internal13EhFrameWriter25WritePaddingToAlignedSizeEiE8kPadding to i8*) acquire, align 8
  %550 = icmp eq i8 %549, 0
  br i1 %550, label %551, label %556, !prof !37

551:                                              ; preds = %540
  %552 = call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN2v88internal13EhFrameWriter25WritePaddingToAlignedSizeEiE8kPadding) #6
  %553 = icmp eq i32 %552, 0
  br i1 %553, label %556, label %554

554:                                              ; preds = %551
  store i64 0, i64* bitcast ([8 x i8]* @_ZZN2v88internal13EhFrameWriter25WritePaddingToAlignedSizeEiE8kPadding to i64*), align 8
  %555 = call {}* @llvm.invariant.start.p0i8(i64 8, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @_ZZN2v88internal13EhFrameWriter25WritePaddingToAlignedSizeEiE8kPadding, i64 0, i64 0)) #6
  call void @__cxa_guard_release(i64* nonnull @_ZGVZN2v88internal13EhFrameWriter25WritePaddingToAlignedSizeEiE8kPadding) #6
  br label %556

556:                                              ; preds = %540, %551, %554
  %557 = load i8*, i8** %5, align 8
  %558 = sext i32 %548 to i64
  %559 = getelementptr inbounds [8 x i8], [8 x i8]* @_ZZN2v88internal13EhFrameWriter25WritePaddingToAlignedSizeEiE8kPadding, i64 0, i64 %558
  %560 = call i8* @_ZNSt3__16vectorIhN2v88internal13ZoneAllocatorIhEEE6insertIPKhEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsISA_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSE_IS8_EESA_SA_(%"class.std::__1::vector"* %4, i8* %557, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @_ZZN2v88internal13EhFrameWriter25WritePaddingToAlignedSizeEiE8kPadding, i64 0, i64 0), i8* %559) #6
  %561 = load i64, i64* %6, align 8
  %562 = load i64, i64* %8, align 8
  %563 = sub i64 %561, %562
  %564 = trunc i64 %563 to i32
  %565 = sub nsw i32 %564, %20
  %566 = sub nsw i32 %564, %11
  %567 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 0
  store i32 %566, i32* %567, align 8
  %568 = shl i64 %10, 32
  %569 = ashr exact i64 %568, 32
  %570 = add i64 %562, %569
  %571 = inttoptr i64 %570 to i32*
  store i32 %565, i32* %571, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal13EhFrameWriter14WriteFdeHeaderEv(%"class.v8::internal::EhFrameWriter"*) local_unnamed_addr #0 align 2 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6)
  store i32 -559038242, i32* %5, align 4
  %7 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 5, i32 0
  %8 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 5, i32 0, i32 0, i32 1
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds i32, i32* %5, i64 1
  %11 = bitcast i32* %10 to i8*
  %12 = call i8* @_ZNSt3__16vectorIhN2v88internal13ZoneAllocatorIhEEE6insertIPKhEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsISA_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSE_IS8_EESA_SA_(%"class.std::__1::vector"* %7, i8* %9, i8* nonnull %6, i8* %11) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6)
  %13 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 0
  %14 = load i32, i32* %13, align 8
  %15 = add nsw i32 %14, 4
  %16 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %16)
  store i32 %15, i32* %4, align 4
  %17 = load i8*, i8** %8, align 8
  %18 = getelementptr inbounds i32, i32* %4, i64 1
  %19 = bitcast i32* %18 to i8*
  %20 = call i8* @_ZNSt3__16vectorIhN2v88internal13ZoneAllocatorIhEEE6insertIPKhEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsISA_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSE_IS8_EESA_SA_(%"class.std::__1::vector"* %7, i8* %17, i8* nonnull %16, i8* %19) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %16)
  %21 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %21)
  store i32 -559038242, i32* %3, align 4
  %22 = load i8*, i8** %8, align 8
  %23 = getelementptr inbounds i32, i32* %3, i64 1
  %24 = bitcast i32* %23 to i8*
  %25 = call i8* @_ZNSt3__16vectorIhN2v88internal13ZoneAllocatorIhEEE6insertIPKhEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsISA_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSE_IS8_EESA_SA_(%"class.std::__1::vector"* %7, i8* %22, i8* nonnull %21, i8* %24) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %21)
  %26 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %26)
  store i32 -559038242, i32* %2, align 4
  %27 = load i8*, i8** %8, align 8
  %28 = getelementptr inbounds i32, i32* %2, i64 1
  %29 = bitcast i32* %28 to i8*
  %30 = call i8* @_ZNSt3__16vectorIhN2v88internal13ZoneAllocatorIhEEE6insertIPKhEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsISA_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSE_IS8_EESA_SA_(%"class.std::__1::vector"* %7, i8* %27, i8* nonnull %26, i8* %29) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %26)
  %31 = load i8*, i8** %8, align 8
  %32 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 5, i32 0, i32 0, i32 2, i32 0, i32 0
  %33 = load i8*, i8** %32, align 8
  %34 = icmp eq i8* %31, %33
  %35 = ptrtoint i8* %33 to i64
  br i1 %34, label %40, label %36

36:                                               ; preds = %1
  store i8 0, i8* %31, align 1
  %37 = getelementptr inbounds i8, i8* %31, i64 1
  %38 = ptrtoint i8* %37 to i64
  %39 = bitcast i8** %8 to i64*
  store i64 %38, i64* %39, align 8
  br label %204

40:                                               ; preds = %1
  %41 = ptrtoint i8* %31 to i64
  %42 = bitcast i8** %8 to i64*
  %43 = bitcast %"class.std::__1::vector"* %7 to i64*
  %44 = load i64, i64* %43, align 8
  %45 = sub i64 %41, %44
  %46 = add i64 %45, 1
  %47 = icmp ugt i64 %46, 2147483647
  br i1 %47, label %48, label %50

48:                                               ; preds = %40
  %49 = bitcast %"class.std::__1::vector"* %7 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %49) #7
  unreachable

50:                                               ; preds = %40
  %51 = bitcast i8** %32 to i64*
  %52 = sub i64 %35, %44
  %53 = icmp ult i64 %52, 1073741823
  br i1 %53, label %54, label %59

54:                                               ; preds = %50
  %55 = shl i64 %52, 1
  %56 = icmp ult i64 %55, %46
  %57 = select i1 %56, i64 %46, i64 %55
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %78, label %59

59:                                               ; preds = %54, %50
  %60 = phi i64 [ %57, %54 ], [ 2147483647, %50 ]
  %61 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 5, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %62 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %61, align 8
  %63 = add nuw nsw i64 %60, 7
  %64 = and i64 %63, -8
  %65 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %62, i64 0, i32 2
  %66 = load i64, i64* %65, align 8
  %67 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %62, i64 0, i32 3
  %68 = load i64, i64* %67, align 8
  %69 = sub i64 %68, %66
  %70 = icmp ugt i64 %64, %69
  br i1 %70, label %71, label %73, !prof !2

71:                                               ; preds = %59
  %72 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %62, i64 %64) #6
  br label %75

73:                                               ; preds = %59
  %74 = add i64 %66, %64
  store i64 %74, i64* %65, align 8
  br label %75

75:                                               ; preds = %73, %71
  %76 = phi i64 [ %72, %71 ], [ %66, %73 ]
  %77 = inttoptr i64 %76 to i8*
  br label %78

78:                                               ; preds = %75, %54
  %79 = phi i64 [ %60, %75 ], [ 0, %54 ]
  %80 = phi i8* [ %77, %75 ], [ null, %54 ]
  %81 = getelementptr inbounds i8, i8* %80, i64 %45
  %82 = getelementptr inbounds i8, i8* %80, i64 %79
  %83 = ptrtoint i8* %82 to i64
  store i8 0, i8* %81, align 1
  %84 = getelementptr inbounds i8, i8* %81, i64 1
  %85 = ptrtoint i8* %84 to i64
  %86 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %7, i64 0, i32 0, i32 0
  %87 = load i8*, i8** %86, align 8
  %88 = load i8*, i8** %8, align 8
  %89 = ptrtoint i8* %88 to i64
  %90 = icmp eq i8* %88, %87
  br i1 %90, label %201, label %91

91:                                               ; preds = %78
  %92 = ptrtoint i8* %87 to i64
  %93 = ptrtoint i8* %88 to i64
  %94 = sub i64 %93, %92
  %95 = icmp ult i64 %94, 16
  br i1 %95, label %191, label %96

96:                                               ; preds = %91
  %97 = sub i64 %41, %89
  %98 = sub i64 %97, %44
  %99 = getelementptr i8, i8* %87, i64 %98
  %100 = ptrtoint i8* %99 to i64
  %101 = getelementptr i8, i8* %80, i64 %100
  %102 = icmp ult i8* %101, %88
  %103 = icmp ult i8* %87, %81
  %104 = and i1 %102, %103
  br i1 %104, label %191, label %105

105:                                              ; preds = %96
  %106 = and i64 %94, -16
  %107 = sub i64 0, %106
  %108 = getelementptr i8, i8* %81, i64 %107
  %109 = sub i64 0, %106
  %110 = getelementptr i8, i8* %88, i64 %109
  %111 = add i64 %106, -16
  %112 = lshr exact i64 %111, 4
  %113 = add nuw nsw i64 %112, 1
  %114 = and i64 %113, 3
  %115 = icmp ult i64 %111, 48
  br i1 %115, label %168, label %116

116:                                              ; preds = %105
  %117 = sub nsw i64 %113, %114
  %118 = getelementptr i8, i8* %81, i64 -1
  %119 = getelementptr inbounds i8, i8* %118, i64 -8
  %120 = getelementptr inbounds i8, i8* %88, i64 -16
  %121 = getelementptr inbounds i8, i8* %119, i64 -7
  %122 = getelementptr i8, i8* %81, i64 -1
  %123 = getelementptr inbounds i8, i8* %122, i64 -8
  %124 = getelementptr inbounds i8, i8* %88, i64 -16
  %125 = getelementptr inbounds i8, i8* %123, i64 -7
  %126 = getelementptr i8, i8* %81, i64 -1
  %127 = getelementptr inbounds i8, i8* %126, i64 -8
  %128 = getelementptr inbounds i8, i8* %88, i64 -16
  %129 = getelementptr inbounds i8, i8* %127, i64 -7
  %130 = getelementptr i8, i8* %81, i64 -1
  %131 = getelementptr inbounds i8, i8* %130, i64 -8
  %132 = getelementptr inbounds i8, i8* %88, i64 -16
  %133 = getelementptr inbounds i8, i8* %131, i64 -7
  br label %134

134:                                              ; preds = %134, %116
  %135 = phi i64 [ 0, %116 ], [ %165, %134 ]
  %136 = phi i64 [ %117, %116 ], [ %166, %134 ]
  %137 = sub i64 0, %135
  %138 = sub i64 0, %135
  %139 = getelementptr inbounds i8, i8* %120, i64 %138
  %140 = bitcast i8* %139 to <2 x i64>*
  %141 = load <2 x i64>, <2 x i64>* %140, align 1, !alias.scope !38
  %142 = getelementptr inbounds i8, i8* %121, i64 %137
  %143 = bitcast i8* %142 to <2 x i64>*
  store <2 x i64> %141, <2 x i64>* %143, align 1, !alias.scope !41, !noalias !38
  %144 = sub nuw nsw i64 -16, %135
  %145 = sub nuw nsw i64 -16, %135
  %146 = getelementptr inbounds i8, i8* %124, i64 %145
  %147 = bitcast i8* %146 to <2 x i64>*
  %148 = load <2 x i64>, <2 x i64>* %147, align 1, !alias.scope !38
  %149 = getelementptr inbounds i8, i8* %125, i64 %144
  %150 = bitcast i8* %149 to <2 x i64>*
  store <2 x i64> %148, <2 x i64>* %150, align 1, !alias.scope !41, !noalias !38
  %151 = sub nuw nsw i64 -32, %135
  %152 = sub nuw nsw i64 -32, %135
  %153 = getelementptr inbounds i8, i8* %128, i64 %152
  %154 = bitcast i8* %153 to <2 x i64>*
  %155 = load <2 x i64>, <2 x i64>* %154, align 1, !alias.scope !38
  %156 = getelementptr inbounds i8, i8* %129, i64 %151
  %157 = bitcast i8* %156 to <2 x i64>*
  store <2 x i64> %155, <2 x i64>* %157, align 1, !alias.scope !41, !noalias !38
  %158 = sub nuw nsw i64 -48, %135
  %159 = sub nuw nsw i64 -48, %135
  %160 = getelementptr inbounds i8, i8* %132, i64 %159
  %161 = bitcast i8* %160 to <2 x i64>*
  %162 = load <2 x i64>, <2 x i64>* %161, align 1, !alias.scope !38
  %163 = getelementptr inbounds i8, i8* %133, i64 %158
  %164 = bitcast i8* %163 to <2 x i64>*
  store <2 x i64> %162, <2 x i64>* %164, align 1, !alias.scope !41, !noalias !38
  %165 = add i64 %135, 64
  %166 = add i64 %136, -4
  %167 = icmp eq i64 %166, 0
  br i1 %167, label %168, label %134, !llvm.loop !43

168:                                              ; preds = %134, %105
  %169 = phi i64 [ 0, %105 ], [ %165, %134 ]
  %170 = icmp eq i64 %114, 0
  br i1 %170, label %189, label %171

171:                                              ; preds = %168
  %172 = getelementptr i8, i8* %81, i64 -1
  %173 = getelementptr inbounds i8, i8* %172, i64 -8
  %174 = getelementptr inbounds i8, i8* %88, i64 -16
  %175 = getelementptr inbounds i8, i8* %173, i64 -7
  br label %176

176:                                              ; preds = %176, %171
  %177 = phi i64 [ %169, %171 ], [ %186, %176 ]
  %178 = phi i64 [ %114, %171 ], [ %187, %176 ]
  %179 = sub i64 0, %177
  %180 = sub i64 0, %177
  %181 = getelementptr inbounds i8, i8* %174, i64 %180
  %182 = bitcast i8* %181 to <2 x i64>*
  %183 = load <2 x i64>, <2 x i64>* %182, align 1, !alias.scope !38
  %184 = getelementptr inbounds i8, i8* %175, i64 %179
  %185 = bitcast i8* %184 to <2 x i64>*
  store <2 x i64> %183, <2 x i64>* %185, align 1, !alias.scope !41, !noalias !38
  %186 = add i64 %177, 16
  %187 = add i64 %178, -1
  %188 = icmp eq i64 %187, 0
  br i1 %188, label %189, label %176, !llvm.loop !44

189:                                              ; preds = %176, %168
  %190 = icmp eq i64 %94, %106
  br i1 %190, label %201, label %191

191:                                              ; preds = %189, %96, %91
  %192 = phi i8* [ %81, %96 ], [ %81, %91 ], [ %108, %189 ]
  %193 = phi i8* [ %88, %96 ], [ %88, %91 ], [ %110, %189 ]
  br label %194

194:                                              ; preds = %191, %194
  %195 = phi i8* [ %197, %194 ], [ %192, %191 ]
  %196 = phi i8* [ %198, %194 ], [ %193, %191 ]
  %197 = getelementptr inbounds i8, i8* %195, i64 -1
  %198 = getelementptr inbounds i8, i8* %196, i64 -1
  %199 = load i8, i8* %198, align 1
  store i8 %199, i8* %197, align 1
  %200 = icmp eq i8* %198, %87
  br i1 %200, label %201, label %194, !llvm.loop !45

201:                                              ; preds = %194, %189, %78
  %202 = phi i8* [ %81, %78 ], [ %108, %189 ], [ %197, %194 ]
  %203 = ptrtoint i8* %202 to i64
  store i64 %203, i64* %43, align 8
  store i64 %85, i64* %42, align 8
  store i64 %83, i64* %51, align 8
  br label %204

204:                                              ; preds = %36, %201
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal13EhFrameWriter12WriteSLeb128Ei(%"class.v8::internal::EhFrameWriter"*, i32) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 5, i32 0
  %4 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 5, i32 0, i32 0, i32 1
  %5 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 5, i32 0, i32 0, i32 2, i32 0, i32 0
  %6 = bitcast i8** %4 to i64*
  %7 = bitcast %"class.std::__1::vector"* %3 to i64*
  %8 = bitcast i8** %5 to i64*
  %9 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 5, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %10 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 0, i32 0
  br label %11

11:                                               ; preds = %196, %2
  %12 = phi i32 [ %1, %2 ], [ %15, %196 ]
  %13 = trunc i32 %12 to i8
  %14 = and i8 %13, 127
  %15 = ashr i32 %12, 7
  %16 = and i32 %12, 64
  %17 = or i32 %15, %16
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %26, label %19

19:                                               ; preds = %11
  %20 = icmp eq i32 %15, -1
  br i1 %20, label %23, label %21

21:                                               ; preds = %19
  %22 = or i8 %13, -128
  br label %27

23:                                               ; preds = %19
  %24 = icmp eq i32 %16, 0
  %25 = or i8 %13, -128
  br i1 %24, label %27, label %26

26:                                               ; preds = %23, %11
  br label %27

27:                                               ; preds = %23, %21, %26
  %28 = phi i1 [ true, %26 ], [ false, %23 ], [ false, %21 ]
  %29 = phi i8 [ %14, %26 ], [ %25, %23 ], [ %22, %21 ]
  %30 = load i8*, i8** %4, align 8
  %31 = load i8*, i8** %5, align 8
  %32 = icmp eq i8* %30, %31
  %33 = ptrtoint i8* %31 to i64
  br i1 %32, label %37, label %34

34:                                               ; preds = %27
  store i8 %29, i8* %30, align 1
  %35 = getelementptr inbounds i8, i8* %30, i64 1
  %36 = ptrtoint i8* %35 to i64
  store i64 %36, i64* %6, align 8
  br label %196

37:                                               ; preds = %27
  %38 = ptrtoint i8* %30 to i64
  %39 = load i64, i64* %7, align 8
  %40 = sub i64 %38, %39
  %41 = add i64 %40, 1
  %42 = icmp ugt i64 %41, 2147483647
  br i1 %42, label %43, label %45

43:                                               ; preds = %37
  %44 = bitcast %"class.std::__1::vector"* %3 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %44) #7
  unreachable

45:                                               ; preds = %37
  %46 = sub i64 %33, %39
  %47 = icmp ult i64 %46, 1073741823
  br i1 %47, label %48, label %53

48:                                               ; preds = %45
  %49 = shl i64 %46, 1
  %50 = icmp ult i64 %49, %41
  %51 = select i1 %50, i64 %41, i64 %49
  %52 = icmp eq i64 %51, 0
  br i1 %52, label %71, label %53

53:                                               ; preds = %48, %45
  %54 = phi i64 [ %51, %48 ], [ 2147483647, %45 ]
  %55 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %9, align 8
  %56 = add nuw nsw i64 %54, 7
  %57 = and i64 %56, -8
  %58 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %55, i64 0, i32 2
  %59 = load i64, i64* %58, align 8
  %60 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %55, i64 0, i32 3
  %61 = load i64, i64* %60, align 8
  %62 = sub i64 %61, %59
  %63 = icmp ugt i64 %57, %62
  br i1 %63, label %64, label %66, !prof !2

64:                                               ; preds = %53
  %65 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %55, i64 %57) #6
  br label %68

66:                                               ; preds = %53
  %67 = add i64 %59, %57
  store i64 %67, i64* %58, align 8
  br label %68

68:                                               ; preds = %66, %64
  %69 = phi i64 [ %65, %64 ], [ %59, %66 ]
  %70 = inttoptr i64 %69 to i8*
  br label %71

71:                                               ; preds = %68, %48
  %72 = phi i64 [ %54, %68 ], [ 0, %48 ]
  %73 = phi i8* [ %70, %68 ], [ null, %48 ]
  %74 = getelementptr inbounds i8, i8* %73, i64 %40
  %75 = getelementptr inbounds i8, i8* %73, i64 %72
  %76 = ptrtoint i8* %75 to i64
  store i8 %29, i8* %74, align 1
  %77 = getelementptr inbounds i8, i8* %74, i64 1
  %78 = ptrtoint i8* %77 to i64
  %79 = load i8*, i8** %10, align 8
  %80 = load i8*, i8** %4, align 8
  %81 = ptrtoint i8* %80 to i64
  %82 = icmp eq i8* %80, %79
  br i1 %82, label %193, label %83

83:                                               ; preds = %71
  %84 = ptrtoint i8* %79 to i64
  %85 = ptrtoint i8* %80 to i64
  %86 = sub i64 %85, %84
  %87 = icmp ult i64 %86, 16
  br i1 %87, label %183, label %88

88:                                               ; preds = %83
  %89 = sub i64 %38, %81
  %90 = sub i64 %89, %39
  %91 = getelementptr i8, i8* %79, i64 %90
  %92 = ptrtoint i8* %91 to i64
  %93 = getelementptr i8, i8* %73, i64 %92
  %94 = icmp ult i8* %93, %80
  %95 = icmp ult i8* %79, %74
  %96 = and i1 %94, %95
  br i1 %96, label %183, label %97

97:                                               ; preds = %88
  %98 = and i64 %86, -16
  %99 = sub i64 0, %98
  %100 = getelementptr i8, i8* %74, i64 %99
  %101 = sub i64 0, %98
  %102 = getelementptr i8, i8* %80, i64 %101
  %103 = add i64 %98, -16
  %104 = lshr exact i64 %103, 4
  %105 = add nuw nsw i64 %104, 1
  %106 = and i64 %105, 3
  %107 = icmp ult i64 %103, 48
  br i1 %107, label %160, label %108

108:                                              ; preds = %97
  %109 = sub nsw i64 %105, %106
  %110 = getelementptr i8, i8* %74, i64 -1
  %111 = getelementptr inbounds i8, i8* %110, i64 -8
  %112 = getelementptr inbounds i8, i8* %80, i64 -16
  %113 = getelementptr inbounds i8, i8* %111, i64 -7
  %114 = getelementptr i8, i8* %74, i64 -1
  %115 = getelementptr inbounds i8, i8* %114, i64 -8
  %116 = getelementptr inbounds i8, i8* %80, i64 -16
  %117 = getelementptr inbounds i8, i8* %115, i64 -7
  %118 = getelementptr i8, i8* %74, i64 -1
  %119 = getelementptr inbounds i8, i8* %118, i64 -8
  %120 = getelementptr inbounds i8, i8* %80, i64 -16
  %121 = getelementptr inbounds i8, i8* %119, i64 -7
  %122 = getelementptr i8, i8* %74, i64 -1
  %123 = getelementptr inbounds i8, i8* %122, i64 -8
  %124 = getelementptr inbounds i8, i8* %80, i64 -16
  %125 = getelementptr inbounds i8, i8* %123, i64 -7
  br label %126

126:                                              ; preds = %126, %108
  %127 = phi i64 [ 0, %108 ], [ %157, %126 ]
  %128 = phi i64 [ %109, %108 ], [ %158, %126 ]
  %129 = sub i64 0, %127
  %130 = sub i64 0, %127
  %131 = getelementptr inbounds i8, i8* %112, i64 %130
  %132 = bitcast i8* %131 to <2 x i64>*
  %133 = load <2 x i64>, <2 x i64>* %132, align 1, !alias.scope !46
  %134 = getelementptr inbounds i8, i8* %113, i64 %129
  %135 = bitcast i8* %134 to <2 x i64>*
  store <2 x i64> %133, <2 x i64>* %135, align 1, !alias.scope !49, !noalias !46
  %136 = sub nuw nsw i64 -16, %127
  %137 = sub nuw nsw i64 -16, %127
  %138 = getelementptr inbounds i8, i8* %116, i64 %137
  %139 = bitcast i8* %138 to <2 x i64>*
  %140 = load <2 x i64>, <2 x i64>* %139, align 1, !alias.scope !46
  %141 = getelementptr inbounds i8, i8* %117, i64 %136
  %142 = bitcast i8* %141 to <2 x i64>*
  store <2 x i64> %140, <2 x i64>* %142, align 1, !alias.scope !49, !noalias !46
  %143 = sub nuw nsw i64 -32, %127
  %144 = sub nuw nsw i64 -32, %127
  %145 = getelementptr inbounds i8, i8* %120, i64 %144
  %146 = bitcast i8* %145 to <2 x i64>*
  %147 = load <2 x i64>, <2 x i64>* %146, align 1, !alias.scope !46
  %148 = getelementptr inbounds i8, i8* %121, i64 %143
  %149 = bitcast i8* %148 to <2 x i64>*
  store <2 x i64> %147, <2 x i64>* %149, align 1, !alias.scope !49, !noalias !46
  %150 = sub nuw nsw i64 -48, %127
  %151 = sub nuw nsw i64 -48, %127
  %152 = getelementptr inbounds i8, i8* %124, i64 %151
  %153 = bitcast i8* %152 to <2 x i64>*
  %154 = load <2 x i64>, <2 x i64>* %153, align 1, !alias.scope !46
  %155 = getelementptr inbounds i8, i8* %125, i64 %150
  %156 = bitcast i8* %155 to <2 x i64>*
  store <2 x i64> %154, <2 x i64>* %156, align 1, !alias.scope !49, !noalias !46
  %157 = add i64 %127, 64
  %158 = add i64 %128, -4
  %159 = icmp eq i64 %158, 0
  br i1 %159, label %160, label %126, !llvm.loop !51

160:                                              ; preds = %126, %97
  %161 = phi i64 [ 0, %97 ], [ %157, %126 ]
  %162 = icmp eq i64 %106, 0
  br i1 %162, label %181, label %163

163:                                              ; preds = %160
  %164 = getelementptr i8, i8* %74, i64 -1
  %165 = getelementptr inbounds i8, i8* %164, i64 -8
  %166 = getelementptr inbounds i8, i8* %80, i64 -16
  %167 = getelementptr inbounds i8, i8* %165, i64 -7
  br label %168

168:                                              ; preds = %168, %163
  %169 = phi i64 [ %161, %163 ], [ %178, %168 ]
  %170 = phi i64 [ %106, %163 ], [ %179, %168 ]
  %171 = sub i64 0, %169
  %172 = sub i64 0, %169
  %173 = getelementptr inbounds i8, i8* %166, i64 %172
  %174 = bitcast i8* %173 to <2 x i64>*
  %175 = load <2 x i64>, <2 x i64>* %174, align 1, !alias.scope !46
  %176 = getelementptr inbounds i8, i8* %167, i64 %171
  %177 = bitcast i8* %176 to <2 x i64>*
  store <2 x i64> %175, <2 x i64>* %177, align 1, !alias.scope !49, !noalias !46
  %178 = add i64 %169, 16
  %179 = add i64 %170, -1
  %180 = icmp eq i64 %179, 0
  br i1 %180, label %181, label %168, !llvm.loop !52

181:                                              ; preds = %168, %160
  %182 = icmp eq i64 %86, %98
  br i1 %182, label %193, label %183

183:                                              ; preds = %181, %88, %83
  %184 = phi i8* [ %74, %88 ], [ %74, %83 ], [ %100, %181 ]
  %185 = phi i8* [ %80, %88 ], [ %80, %83 ], [ %102, %181 ]
  br label %186

186:                                              ; preds = %183, %186
  %187 = phi i8* [ %189, %186 ], [ %184, %183 ]
  %188 = phi i8* [ %190, %186 ], [ %185, %183 ]
  %189 = getelementptr inbounds i8, i8* %187, i64 -1
  %190 = getelementptr inbounds i8, i8* %188, i64 -1
  %191 = load i8, i8* %190, align 1
  store i8 %191, i8* %189, align 1
  %192 = icmp eq i8* %190, %79
  br i1 %192, label %193, label %186, !llvm.loop !53

193:                                              ; preds = %186, %181, %71
  %194 = phi i8* [ %74, %71 ], [ %100, %181 ], [ %189, %186 ]
  %195 = ptrtoint i8* %194 to i64
  store i64 %195, i64* %7, align 8
  store i64 %78, i64* %6, align 8
  store i64 %76, i64* %8, align 8
  br label %196

196:                                              ; preds = %34, %193
  br i1 %28, label %197, label %11

197:                                              ; preds = %196
  ret void
}

declare void @_ZN2v88internal13EhFrameWriter30WriteReturnAddressRegisterCodeEv(%"class.v8::internal::EhFrameWriter"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal13EhFrameWriter12WriteULeb128Ej(%"class.v8::internal::EhFrameWriter"*, i32) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 5, i32 0
  %4 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 5, i32 0, i32 0, i32 1
  %5 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 5, i32 0, i32 0, i32 2, i32 0, i32 0
  %6 = bitcast i8** %4 to i64*
  %7 = bitcast %"class.std::__1::vector"* %3 to i64*
  %8 = bitcast i8** %5 to i64*
  %9 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 5, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %10 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 0, i32 0
  %11 = load i8*, i8** %4, align 8
  br label %12

12:                                               ; preds = %184, %2
  %13 = phi i8* [ %11, %2 ], [ %185, %184 ]
  %14 = phi i32 [ %1, %2 ], [ %17, %184 ]
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 127
  %17 = lshr i32 %14, 7
  %18 = icmp ne i32 %17, 0
  %19 = or i8 %15, -128
  %20 = select i1 %18, i8 %19, i8 %16
  %21 = load i8*, i8** %5, align 8
  %22 = icmp eq i8* %13, %21
  br i1 %22, label %26, label %23

23:                                               ; preds = %12
  store i8 %20, i8* %13, align 1
  %24 = getelementptr inbounds i8, i8* %13, i64 1
  %25 = ptrtoint i8* %24 to i64
  store i64 %25, i64* %6, align 8
  br label %184

26:                                               ; preds = %12
  %27 = ptrtoint i8* %21 to i64
  %28 = load i64, i64* %7, align 8
  %29 = sub i64 %27, %28
  %30 = add i64 %29, 1
  %31 = icmp ugt i64 %30, 2147483647
  br i1 %31, label %32, label %34

32:                                               ; preds = %26
  %33 = bitcast %"class.std::__1::vector"* %3 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %33) #7
  unreachable

34:                                               ; preds = %26
  %35 = icmp ult i64 %29, 1073741823
  br i1 %35, label %36, label %41

36:                                               ; preds = %34
  %37 = shl i64 %29, 1
  %38 = icmp ult i64 %37, %30
  %39 = select i1 %38, i64 %30, i64 %37
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %59, label %41

41:                                               ; preds = %36, %34
  %42 = phi i64 [ %39, %36 ], [ 2147483647, %34 ]
  %43 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %9, align 8
  %44 = add nuw nsw i64 %42, 7
  %45 = and i64 %44, -8
  %46 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %43, i64 0, i32 2
  %47 = load i64, i64* %46, align 8
  %48 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %43, i64 0, i32 3
  %49 = load i64, i64* %48, align 8
  %50 = sub i64 %49, %47
  %51 = icmp ugt i64 %45, %50
  br i1 %51, label %52, label %54, !prof !2

52:                                               ; preds = %41
  %53 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %43, i64 %45) #6
  br label %56

54:                                               ; preds = %41
  %55 = add i64 %47, %45
  store i64 %55, i64* %46, align 8
  br label %56

56:                                               ; preds = %54, %52
  %57 = phi i64 [ %53, %52 ], [ %47, %54 ]
  %58 = inttoptr i64 %57 to i8*
  br label %59

59:                                               ; preds = %56, %36
  %60 = phi i64 [ %42, %56 ], [ 0, %36 ]
  %61 = phi i8* [ %58, %56 ], [ null, %36 ]
  %62 = getelementptr inbounds i8, i8* %61, i64 %29
  %63 = getelementptr inbounds i8, i8* %61, i64 %60
  %64 = ptrtoint i8* %63 to i64
  store i8 %20, i8* %62, align 1
  %65 = getelementptr inbounds i8, i8* %62, i64 1
  %66 = ptrtoint i8* %65 to i64
  %67 = load i8*, i8** %10, align 8
  %68 = load i8*, i8** %4, align 8
  %69 = ptrtoint i8* %68 to i64
  %70 = icmp eq i8* %68, %67
  br i1 %70, label %181, label %71

71:                                               ; preds = %59
  %72 = ptrtoint i8* %67 to i64
  %73 = ptrtoint i8* %68 to i64
  %74 = sub i64 %73, %72
  %75 = icmp ult i64 %74, 16
  br i1 %75, label %171, label %76

76:                                               ; preds = %71
  %77 = sub i64 %27, %69
  %78 = sub i64 %77, %28
  %79 = getelementptr i8, i8* %67, i64 %78
  %80 = ptrtoint i8* %79 to i64
  %81 = getelementptr i8, i8* %61, i64 %80
  %82 = icmp ult i8* %81, %68
  %83 = icmp ult i8* %67, %62
  %84 = and i1 %82, %83
  br i1 %84, label %171, label %85

85:                                               ; preds = %76
  %86 = and i64 %74, -16
  %87 = sub i64 0, %86
  %88 = getelementptr i8, i8* %62, i64 %87
  %89 = sub i64 0, %86
  %90 = getelementptr i8, i8* %68, i64 %89
  %91 = add i64 %86, -16
  %92 = lshr exact i64 %91, 4
  %93 = add nuw nsw i64 %92, 1
  %94 = and i64 %93, 3
  %95 = icmp ult i64 %91, 48
  br i1 %95, label %148, label %96

96:                                               ; preds = %85
  %97 = sub nsw i64 %93, %94
  %98 = getelementptr i8, i8* %62, i64 -1
  %99 = getelementptr inbounds i8, i8* %98, i64 -8
  %100 = getelementptr inbounds i8, i8* %68, i64 -16
  %101 = getelementptr inbounds i8, i8* %99, i64 -7
  %102 = getelementptr i8, i8* %62, i64 -1
  %103 = getelementptr inbounds i8, i8* %102, i64 -8
  %104 = getelementptr inbounds i8, i8* %68, i64 -16
  %105 = getelementptr inbounds i8, i8* %103, i64 -7
  %106 = getelementptr i8, i8* %62, i64 -1
  %107 = getelementptr inbounds i8, i8* %106, i64 -8
  %108 = getelementptr inbounds i8, i8* %68, i64 -16
  %109 = getelementptr inbounds i8, i8* %107, i64 -7
  %110 = getelementptr i8, i8* %62, i64 -1
  %111 = getelementptr inbounds i8, i8* %110, i64 -8
  %112 = getelementptr inbounds i8, i8* %68, i64 -16
  %113 = getelementptr inbounds i8, i8* %111, i64 -7
  br label %114

114:                                              ; preds = %114, %96
  %115 = phi i64 [ 0, %96 ], [ %145, %114 ]
  %116 = phi i64 [ %97, %96 ], [ %146, %114 ]
  %117 = sub i64 0, %115
  %118 = sub i64 0, %115
  %119 = getelementptr inbounds i8, i8* %100, i64 %118
  %120 = bitcast i8* %119 to <2 x i64>*
  %121 = load <2 x i64>, <2 x i64>* %120, align 1, !alias.scope !54
  %122 = getelementptr inbounds i8, i8* %101, i64 %117
  %123 = bitcast i8* %122 to <2 x i64>*
  store <2 x i64> %121, <2 x i64>* %123, align 1, !alias.scope !57, !noalias !54
  %124 = sub nuw nsw i64 -16, %115
  %125 = sub nuw nsw i64 -16, %115
  %126 = getelementptr inbounds i8, i8* %104, i64 %125
  %127 = bitcast i8* %126 to <2 x i64>*
  %128 = load <2 x i64>, <2 x i64>* %127, align 1, !alias.scope !54
  %129 = getelementptr inbounds i8, i8* %105, i64 %124
  %130 = bitcast i8* %129 to <2 x i64>*
  store <2 x i64> %128, <2 x i64>* %130, align 1, !alias.scope !57, !noalias !54
  %131 = sub nuw nsw i64 -32, %115
  %132 = sub nuw nsw i64 -32, %115
  %133 = getelementptr inbounds i8, i8* %108, i64 %132
  %134 = bitcast i8* %133 to <2 x i64>*
  %135 = load <2 x i64>, <2 x i64>* %134, align 1, !alias.scope !54
  %136 = getelementptr inbounds i8, i8* %109, i64 %131
  %137 = bitcast i8* %136 to <2 x i64>*
  store <2 x i64> %135, <2 x i64>* %137, align 1, !alias.scope !57, !noalias !54
  %138 = sub nuw nsw i64 -48, %115
  %139 = sub nuw nsw i64 -48, %115
  %140 = getelementptr inbounds i8, i8* %112, i64 %139
  %141 = bitcast i8* %140 to <2 x i64>*
  %142 = load <2 x i64>, <2 x i64>* %141, align 1, !alias.scope !54
  %143 = getelementptr inbounds i8, i8* %113, i64 %138
  %144 = bitcast i8* %143 to <2 x i64>*
  store <2 x i64> %142, <2 x i64>* %144, align 1, !alias.scope !57, !noalias !54
  %145 = add i64 %115, 64
  %146 = add i64 %116, -4
  %147 = icmp eq i64 %146, 0
  br i1 %147, label %148, label %114, !llvm.loop !59

148:                                              ; preds = %114, %85
  %149 = phi i64 [ 0, %85 ], [ %145, %114 ]
  %150 = icmp eq i64 %94, 0
  br i1 %150, label %169, label %151

151:                                              ; preds = %148
  %152 = getelementptr i8, i8* %62, i64 -1
  %153 = getelementptr inbounds i8, i8* %152, i64 -8
  %154 = getelementptr inbounds i8, i8* %68, i64 -16
  %155 = getelementptr inbounds i8, i8* %153, i64 -7
  br label %156

156:                                              ; preds = %156, %151
  %157 = phi i64 [ %149, %151 ], [ %166, %156 ]
  %158 = phi i64 [ %94, %151 ], [ %167, %156 ]
  %159 = sub i64 0, %157
  %160 = sub i64 0, %157
  %161 = getelementptr inbounds i8, i8* %154, i64 %160
  %162 = bitcast i8* %161 to <2 x i64>*
  %163 = load <2 x i64>, <2 x i64>* %162, align 1, !alias.scope !54
  %164 = getelementptr inbounds i8, i8* %155, i64 %159
  %165 = bitcast i8* %164 to <2 x i64>*
  store <2 x i64> %163, <2 x i64>* %165, align 1, !alias.scope !57, !noalias !54
  %166 = add i64 %157, 16
  %167 = add i64 %158, -1
  %168 = icmp eq i64 %167, 0
  br i1 %168, label %169, label %156, !llvm.loop !60

169:                                              ; preds = %156, %148
  %170 = icmp eq i64 %74, %86
  br i1 %170, label %181, label %171

171:                                              ; preds = %169, %76, %71
  %172 = phi i8* [ %62, %76 ], [ %62, %71 ], [ %88, %169 ]
  %173 = phi i8* [ %68, %76 ], [ %68, %71 ], [ %90, %169 ]
  br label %174

174:                                              ; preds = %171, %174
  %175 = phi i8* [ %177, %174 ], [ %172, %171 ]
  %176 = phi i8* [ %178, %174 ], [ %173, %171 ]
  %177 = getelementptr inbounds i8, i8* %175, i64 -1
  %178 = getelementptr inbounds i8, i8* %176, i64 -1
  %179 = load i8, i8* %178, align 1
  store i8 %179, i8* %177, align 1
  %180 = icmp eq i8* %178, %67
  br i1 %180, label %181, label %174, !llvm.loop !61

181:                                              ; preds = %174, %169, %59
  %182 = phi i8* [ %62, %59 ], [ %88, %169 ], [ %177, %174 ]
  %183 = ptrtoint i8* %182 to i64
  store i64 %183, i64* %7, align 8
  store i64 %66, i64* %6, align 8
  store i64 %64, i64* %8, align 8
  br label %184

184:                                              ; preds = %23, %181
  %185 = phi i8* [ %24, %23 ], [ %65, %181 ]
  br i1 %18, label %12, label %186

186:                                              ; preds = %184
  ret void
}

declare void @_ZN2v88internal13EhFrameWriter22WriteInitialStateInCieEv(%"class.v8::internal::EhFrameWriter"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal13EhFrameWriter25WritePaddingToAlignedSizeEi(%"class.v8::internal::EhFrameWriter"*, i32) local_unnamed_addr #0 align 2 {
  %3 = add i32 %1, 7
  %4 = and i32 %3, -8
  %5 = sub nsw i32 %4, %1
  %6 = load atomic i8, i8* bitcast (i64* @_ZGVZN2v88internal13EhFrameWriter25WritePaddingToAlignedSizeEiE8kPadding to i8*) acquire, align 8
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %8, label %13, !prof !37

8:                                                ; preds = %2
  %9 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN2v88internal13EhFrameWriter25WritePaddingToAlignedSizeEiE8kPadding) #6
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %13, label %11

11:                                               ; preds = %8
  store i64 0, i64* bitcast ([8 x i8]* @_ZZN2v88internal13EhFrameWriter25WritePaddingToAlignedSizeEiE8kPadding to i64*), align 8
  %12 = tail call {}* @llvm.invariant.start.p0i8(i64 8, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @_ZZN2v88internal13EhFrameWriter25WritePaddingToAlignedSizeEiE8kPadding, i64 0, i64 0))
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZN2v88internal13EhFrameWriter25WritePaddingToAlignedSizeEiE8kPadding) #6
  br label %13

13:                                               ; preds = %8, %11, %2
  %14 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 5, i32 0
  %15 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 5, i32 0, i32 0, i32 1
  %16 = load i8*, i8** %15, align 8
  %17 = sext i32 %5 to i64
  %18 = getelementptr inbounds [8 x i8], [8 x i8]* @_ZZN2v88internal13EhFrameWriter25WritePaddingToAlignedSizeEiE8kPadding, i64 0, i64 %17
  %19 = tail call i8* @_ZNSt3__16vectorIhN2v88internal13ZoneAllocatorIhEEE6insertIPKhEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsISA_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSE_IS8_EESA_SA_(%"class.std::__1::vector"* %14, i8* %16, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @_ZZN2v88internal13EhFrameWriter25WritePaddingToAlignedSizeEiE8kPadding, i64 0, i64 0), i8* %18) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal13EhFrameWriter15WriteEhFrameHdrEi(%"class.v8::internal::EhFrameWriter"*, i32) local_unnamed_addr #0 align 2 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 5, i32 0
  %8 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 5, i32 0, i32 0, i32 1
  %9 = bitcast i8** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %"class.std::__1::vector"* %7 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = sub i64 %10, %12
  %14 = trunc i64 %13 to i32
  %15 = inttoptr i64 %10 to i8*
  %16 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 5, i32 0, i32 0, i32 2, i32 0, i32 0
  %17 = load i8*, i8** %16, align 8
  %18 = icmp eq i8* %17, %15
  %19 = ptrtoint i8* %17 to i64
  br i1 %18, label %25, label %20

20:                                               ; preds = %2
  store i8 1, i8* %15, align 1
  %21 = getelementptr inbounds i8, i8* %15, i64 1
  %22 = ptrtoint i8* %21 to i64
  store i64 %22, i64* %9, align 8
  %23 = load i8*, i8** %16, align 8
  %24 = ptrtoint i8* %23 to i64
  br label %184

25:                                               ; preds = %2
  %26 = add i64 %13, 1
  %27 = icmp ugt i64 %26, 2147483647
  br i1 %27, label %28, label %30

28:                                               ; preds = %25
  %29 = bitcast %"class.std::__1::vector"* %7 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %29) #7
  unreachable

30:                                               ; preds = %25
  %31 = bitcast i8** %16 to i64*
  %32 = sub i64 %19, %12
  %33 = icmp ult i64 %32, 1073741823
  br i1 %33, label %34, label %39

34:                                               ; preds = %30
  %35 = shl i64 %32, 1
  %36 = icmp ult i64 %35, %26
  %37 = select i1 %36, i64 %26, i64 %35
  %38 = icmp eq i64 %37, 0
  br i1 %38, label %58, label %39

39:                                               ; preds = %34, %30
  %40 = phi i64 [ %37, %34 ], [ 2147483647, %30 ]
  %41 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 5, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %42 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %41, align 8
  %43 = add nuw nsw i64 %40, 7
  %44 = and i64 %43, -8
  %45 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %42, i64 0, i32 2
  %46 = load i64, i64* %45, align 8
  %47 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %42, i64 0, i32 3
  %48 = load i64, i64* %47, align 8
  %49 = sub i64 %48, %46
  %50 = icmp ugt i64 %44, %49
  br i1 %50, label %51, label %53, !prof !2

51:                                               ; preds = %39
  %52 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %42, i64 %44) #6
  br label %55

53:                                               ; preds = %39
  %54 = add i64 %46, %44
  store i64 %54, i64* %45, align 8
  br label %55

55:                                               ; preds = %53, %51
  %56 = phi i64 [ %52, %51 ], [ %46, %53 ]
  %57 = inttoptr i64 %56 to i8*
  br label %58

58:                                               ; preds = %55, %34
  %59 = phi i64 [ %40, %55 ], [ 0, %34 ]
  %60 = phi i8* [ %57, %55 ], [ null, %34 ]
  %61 = getelementptr inbounds i8, i8* %60, i64 %13
  %62 = getelementptr inbounds i8, i8* %60, i64 %59
  %63 = ptrtoint i8* %62 to i64
  store i8 1, i8* %61, align 1
  %64 = getelementptr inbounds i8, i8* %61, i64 1
  %65 = ptrtoint i8* %64 to i64
  %66 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %7, i64 0, i32 0, i32 0
  %67 = load i8*, i8** %66, align 8
  %68 = load i8*, i8** %8, align 8
  %69 = ptrtoint i8* %68 to i64
  %70 = icmp eq i8* %68, %67
  br i1 %70, label %181, label %71

71:                                               ; preds = %58
  %72 = ptrtoint i8* %67 to i64
  %73 = ptrtoint i8* %68 to i64
  %74 = sub i64 %73, %72
  %75 = icmp ult i64 %74, 16
  br i1 %75, label %171, label %76

76:                                               ; preds = %71
  %77 = sub i64 %10, %69
  %78 = sub i64 %77, %12
  %79 = getelementptr i8, i8* %67, i64 %78
  %80 = ptrtoint i8* %79 to i64
  %81 = getelementptr i8, i8* %60, i64 %80
  %82 = icmp ult i8* %81, %68
  %83 = icmp ult i8* %67, %61
  %84 = and i1 %82, %83
  br i1 %84, label %171, label %85

85:                                               ; preds = %76
  %86 = and i64 %74, -16
  %87 = sub i64 0, %86
  %88 = getelementptr i8, i8* %61, i64 %87
  %89 = sub i64 0, %86
  %90 = getelementptr i8, i8* %68, i64 %89
  %91 = add i64 %86, -16
  %92 = lshr exact i64 %91, 4
  %93 = add nuw nsw i64 %92, 1
  %94 = and i64 %93, 3
  %95 = icmp ult i64 %91, 48
  br i1 %95, label %148, label %96

96:                                               ; preds = %85
  %97 = sub nsw i64 %93, %94
  %98 = getelementptr i8, i8* %61, i64 -1
  %99 = getelementptr inbounds i8, i8* %98, i64 -8
  %100 = getelementptr inbounds i8, i8* %68, i64 -16
  %101 = getelementptr inbounds i8, i8* %99, i64 -7
  %102 = getelementptr i8, i8* %61, i64 -1
  %103 = getelementptr inbounds i8, i8* %102, i64 -8
  %104 = getelementptr inbounds i8, i8* %68, i64 -16
  %105 = getelementptr inbounds i8, i8* %103, i64 -7
  %106 = getelementptr i8, i8* %61, i64 -1
  %107 = getelementptr inbounds i8, i8* %106, i64 -8
  %108 = getelementptr inbounds i8, i8* %68, i64 -16
  %109 = getelementptr inbounds i8, i8* %107, i64 -7
  %110 = getelementptr i8, i8* %61, i64 -1
  %111 = getelementptr inbounds i8, i8* %110, i64 -8
  %112 = getelementptr inbounds i8, i8* %68, i64 -16
  %113 = getelementptr inbounds i8, i8* %111, i64 -7
  br label %114

114:                                              ; preds = %114, %96
  %115 = phi i64 [ 0, %96 ], [ %145, %114 ]
  %116 = phi i64 [ %97, %96 ], [ %146, %114 ]
  %117 = sub i64 0, %115
  %118 = sub i64 0, %115
  %119 = getelementptr inbounds i8, i8* %100, i64 %118
  %120 = bitcast i8* %119 to <2 x i64>*
  %121 = load <2 x i64>, <2 x i64>* %120, align 1, !alias.scope !62
  %122 = getelementptr inbounds i8, i8* %101, i64 %117
  %123 = bitcast i8* %122 to <2 x i64>*
  store <2 x i64> %121, <2 x i64>* %123, align 1, !alias.scope !65, !noalias !62
  %124 = sub nuw nsw i64 -16, %115
  %125 = sub nuw nsw i64 -16, %115
  %126 = getelementptr inbounds i8, i8* %104, i64 %125
  %127 = bitcast i8* %126 to <2 x i64>*
  %128 = load <2 x i64>, <2 x i64>* %127, align 1, !alias.scope !62
  %129 = getelementptr inbounds i8, i8* %105, i64 %124
  %130 = bitcast i8* %129 to <2 x i64>*
  store <2 x i64> %128, <2 x i64>* %130, align 1, !alias.scope !65, !noalias !62
  %131 = sub nuw nsw i64 -32, %115
  %132 = sub nuw nsw i64 -32, %115
  %133 = getelementptr inbounds i8, i8* %108, i64 %132
  %134 = bitcast i8* %133 to <2 x i64>*
  %135 = load <2 x i64>, <2 x i64>* %134, align 1, !alias.scope !62
  %136 = getelementptr inbounds i8, i8* %109, i64 %131
  %137 = bitcast i8* %136 to <2 x i64>*
  store <2 x i64> %135, <2 x i64>* %137, align 1, !alias.scope !65, !noalias !62
  %138 = sub nuw nsw i64 -48, %115
  %139 = sub nuw nsw i64 -48, %115
  %140 = getelementptr inbounds i8, i8* %112, i64 %139
  %141 = bitcast i8* %140 to <2 x i64>*
  %142 = load <2 x i64>, <2 x i64>* %141, align 1, !alias.scope !62
  %143 = getelementptr inbounds i8, i8* %113, i64 %138
  %144 = bitcast i8* %143 to <2 x i64>*
  store <2 x i64> %142, <2 x i64>* %144, align 1, !alias.scope !65, !noalias !62
  %145 = add i64 %115, 64
  %146 = add i64 %116, -4
  %147 = icmp eq i64 %146, 0
  br i1 %147, label %148, label %114, !llvm.loop !67

148:                                              ; preds = %114, %85
  %149 = phi i64 [ 0, %85 ], [ %145, %114 ]
  %150 = icmp eq i64 %94, 0
  br i1 %150, label %169, label %151

151:                                              ; preds = %148
  %152 = getelementptr i8, i8* %61, i64 -1
  %153 = getelementptr inbounds i8, i8* %152, i64 -8
  %154 = getelementptr inbounds i8, i8* %68, i64 -16
  %155 = getelementptr inbounds i8, i8* %153, i64 -7
  br label %156

156:                                              ; preds = %156, %151
  %157 = phi i64 [ %149, %151 ], [ %166, %156 ]
  %158 = phi i64 [ %94, %151 ], [ %167, %156 ]
  %159 = sub i64 0, %157
  %160 = sub i64 0, %157
  %161 = getelementptr inbounds i8, i8* %154, i64 %160
  %162 = bitcast i8* %161 to <2 x i64>*
  %163 = load <2 x i64>, <2 x i64>* %162, align 1, !alias.scope !62
  %164 = getelementptr inbounds i8, i8* %155, i64 %159
  %165 = bitcast i8* %164 to <2 x i64>*
  store <2 x i64> %163, <2 x i64>* %165, align 1, !alias.scope !65, !noalias !62
  %166 = add i64 %157, 16
  %167 = add i64 %158, -1
  %168 = icmp eq i64 %167, 0
  br i1 %168, label %169, label %156, !llvm.loop !68

169:                                              ; preds = %156, %148
  %170 = icmp eq i64 %74, %86
  br i1 %170, label %181, label %171

171:                                              ; preds = %169, %76, %71
  %172 = phi i8* [ %61, %76 ], [ %61, %71 ], [ %88, %169 ]
  %173 = phi i8* [ %68, %76 ], [ %68, %71 ], [ %90, %169 ]
  br label %174

174:                                              ; preds = %171, %174
  %175 = phi i8* [ %177, %174 ], [ %172, %171 ]
  %176 = phi i8* [ %178, %174 ], [ %173, %171 ]
  %177 = getelementptr inbounds i8, i8* %175, i64 -1
  %178 = getelementptr inbounds i8, i8* %176, i64 -1
  %179 = load i8, i8* %178, align 1
  store i8 %179, i8* %177, align 1
  %180 = icmp eq i8* %178, %67
  br i1 %180, label %181, label %174, !llvm.loop !69

181:                                              ; preds = %174, %169, %58
  %182 = phi i8* [ %61, %58 ], [ %88, %169 ], [ %177, %174 ]
  %183 = ptrtoint i8* %182 to i64
  store i64 %183, i64* %11, align 8
  store i64 %65, i64* %9, align 8
  store i64 %63, i64* %31, align 8
  br label %184

184:                                              ; preds = %20, %181
  %185 = phi i64 [ %24, %20 ], [ %63, %181 ]
  %186 = phi i8* [ %23, %20 ], [ %62, %181 ]
  %187 = phi i8* [ %21, %20 ], [ %64, %181 ]
  %188 = icmp eq i8* %187, %186
  br i1 %188, label %194, label %189

189:                                              ; preds = %184
  store i8 27, i8* %187, align 1
  %190 = getelementptr inbounds i8, i8* %187, i64 1
  %191 = ptrtoint i8* %190 to i64
  store i64 %191, i64* %9, align 8
  %192 = load i8*, i8** %16, align 8
  %193 = ptrtoint i8* %192 to i64
  br label %354

194:                                              ; preds = %184
  %195 = load i64, i64* %11, align 8
  %196 = sub i64 %185, %195
  %197 = add i64 %196, 1
  %198 = icmp ugt i64 %197, 2147483647
  br i1 %198, label %199, label %201

199:                                              ; preds = %194
  %200 = bitcast %"class.std::__1::vector"* %7 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %200) #7
  unreachable

201:                                              ; preds = %194
  %202 = bitcast i8** %16 to i64*
  %203 = icmp ult i64 %196, 1073741823
  br i1 %203, label %204, label %209

204:                                              ; preds = %201
  %205 = shl i64 %196, 1
  %206 = icmp ult i64 %205, %197
  %207 = select i1 %206, i64 %197, i64 %205
  %208 = icmp eq i64 %207, 0
  br i1 %208, label %228, label %209

209:                                              ; preds = %204, %201
  %210 = phi i64 [ %207, %204 ], [ 2147483647, %201 ]
  %211 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 5, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %212 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %211, align 8
  %213 = add nuw nsw i64 %210, 7
  %214 = and i64 %213, -8
  %215 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %212, i64 0, i32 2
  %216 = load i64, i64* %215, align 8
  %217 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %212, i64 0, i32 3
  %218 = load i64, i64* %217, align 8
  %219 = sub i64 %218, %216
  %220 = icmp ugt i64 %214, %219
  br i1 %220, label %221, label %223, !prof !2

221:                                              ; preds = %209
  %222 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %212, i64 %214) #6
  br label %225

223:                                              ; preds = %209
  %224 = add i64 %216, %214
  store i64 %224, i64* %215, align 8
  br label %225

225:                                              ; preds = %223, %221
  %226 = phi i64 [ %222, %221 ], [ %216, %223 ]
  %227 = inttoptr i64 %226 to i8*
  br label %228

228:                                              ; preds = %225, %204
  %229 = phi i64 [ %210, %225 ], [ 0, %204 ]
  %230 = phi i8* [ %227, %225 ], [ null, %204 ]
  %231 = getelementptr inbounds i8, i8* %230, i64 %196
  %232 = getelementptr inbounds i8, i8* %230, i64 %229
  %233 = ptrtoint i8* %232 to i64
  store i8 27, i8* %231, align 1
  %234 = getelementptr inbounds i8, i8* %231, i64 1
  %235 = ptrtoint i8* %234 to i64
  %236 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %7, i64 0, i32 0, i32 0
  %237 = load i8*, i8** %236, align 8
  %238 = load i8*, i8** %8, align 8
  %239 = ptrtoint i8* %238 to i64
  %240 = icmp eq i8* %238, %237
  br i1 %240, label %351, label %241

241:                                              ; preds = %228
  %242 = ptrtoint i8* %237 to i64
  %243 = ptrtoint i8* %238 to i64
  %244 = sub i64 %243, %242
  %245 = icmp ult i64 %244, 16
  br i1 %245, label %341, label %246

246:                                              ; preds = %241
  %247 = sub i64 %185, %239
  %248 = sub i64 %247, %195
  %249 = getelementptr i8, i8* %237, i64 %248
  %250 = ptrtoint i8* %249 to i64
  %251 = getelementptr i8, i8* %230, i64 %250
  %252 = icmp ult i8* %251, %238
  %253 = icmp ult i8* %237, %231
  %254 = and i1 %252, %253
  br i1 %254, label %341, label %255

255:                                              ; preds = %246
  %256 = and i64 %244, -16
  %257 = sub i64 0, %256
  %258 = getelementptr i8, i8* %231, i64 %257
  %259 = sub i64 0, %256
  %260 = getelementptr i8, i8* %238, i64 %259
  %261 = add i64 %256, -16
  %262 = lshr exact i64 %261, 4
  %263 = add nuw nsw i64 %262, 1
  %264 = and i64 %263, 3
  %265 = icmp ult i64 %261, 48
  br i1 %265, label %318, label %266

266:                                              ; preds = %255
  %267 = sub nsw i64 %263, %264
  %268 = getelementptr i8, i8* %231, i64 -1
  %269 = getelementptr inbounds i8, i8* %268, i64 -8
  %270 = getelementptr inbounds i8, i8* %238, i64 -16
  %271 = getelementptr inbounds i8, i8* %269, i64 -7
  %272 = getelementptr i8, i8* %231, i64 -1
  %273 = getelementptr inbounds i8, i8* %272, i64 -8
  %274 = getelementptr inbounds i8, i8* %238, i64 -16
  %275 = getelementptr inbounds i8, i8* %273, i64 -7
  %276 = getelementptr i8, i8* %231, i64 -1
  %277 = getelementptr inbounds i8, i8* %276, i64 -8
  %278 = getelementptr inbounds i8, i8* %238, i64 -16
  %279 = getelementptr inbounds i8, i8* %277, i64 -7
  %280 = getelementptr i8, i8* %231, i64 -1
  %281 = getelementptr inbounds i8, i8* %280, i64 -8
  %282 = getelementptr inbounds i8, i8* %238, i64 -16
  %283 = getelementptr inbounds i8, i8* %281, i64 -7
  br label %284

284:                                              ; preds = %284, %266
  %285 = phi i64 [ 0, %266 ], [ %315, %284 ]
  %286 = phi i64 [ %267, %266 ], [ %316, %284 ]
  %287 = sub i64 0, %285
  %288 = sub i64 0, %285
  %289 = getelementptr inbounds i8, i8* %270, i64 %288
  %290 = bitcast i8* %289 to <2 x i64>*
  %291 = load <2 x i64>, <2 x i64>* %290, align 1, !alias.scope !70
  %292 = getelementptr inbounds i8, i8* %271, i64 %287
  %293 = bitcast i8* %292 to <2 x i64>*
  store <2 x i64> %291, <2 x i64>* %293, align 1, !alias.scope !73, !noalias !70
  %294 = sub nuw nsw i64 -16, %285
  %295 = sub nuw nsw i64 -16, %285
  %296 = getelementptr inbounds i8, i8* %274, i64 %295
  %297 = bitcast i8* %296 to <2 x i64>*
  %298 = load <2 x i64>, <2 x i64>* %297, align 1, !alias.scope !70
  %299 = getelementptr inbounds i8, i8* %275, i64 %294
  %300 = bitcast i8* %299 to <2 x i64>*
  store <2 x i64> %298, <2 x i64>* %300, align 1, !alias.scope !73, !noalias !70
  %301 = sub nuw nsw i64 -32, %285
  %302 = sub nuw nsw i64 -32, %285
  %303 = getelementptr inbounds i8, i8* %278, i64 %302
  %304 = bitcast i8* %303 to <2 x i64>*
  %305 = load <2 x i64>, <2 x i64>* %304, align 1, !alias.scope !70
  %306 = getelementptr inbounds i8, i8* %279, i64 %301
  %307 = bitcast i8* %306 to <2 x i64>*
  store <2 x i64> %305, <2 x i64>* %307, align 1, !alias.scope !73, !noalias !70
  %308 = sub nuw nsw i64 -48, %285
  %309 = sub nuw nsw i64 -48, %285
  %310 = getelementptr inbounds i8, i8* %282, i64 %309
  %311 = bitcast i8* %310 to <2 x i64>*
  %312 = load <2 x i64>, <2 x i64>* %311, align 1, !alias.scope !70
  %313 = getelementptr inbounds i8, i8* %283, i64 %308
  %314 = bitcast i8* %313 to <2 x i64>*
  store <2 x i64> %312, <2 x i64>* %314, align 1, !alias.scope !73, !noalias !70
  %315 = add i64 %285, 64
  %316 = add i64 %286, -4
  %317 = icmp eq i64 %316, 0
  br i1 %317, label %318, label %284, !llvm.loop !75

318:                                              ; preds = %284, %255
  %319 = phi i64 [ 0, %255 ], [ %315, %284 ]
  %320 = icmp eq i64 %264, 0
  br i1 %320, label %339, label %321

321:                                              ; preds = %318
  %322 = getelementptr i8, i8* %231, i64 -1
  %323 = getelementptr inbounds i8, i8* %322, i64 -8
  %324 = getelementptr inbounds i8, i8* %238, i64 -16
  %325 = getelementptr inbounds i8, i8* %323, i64 -7
  br label %326

326:                                              ; preds = %326, %321
  %327 = phi i64 [ %319, %321 ], [ %336, %326 ]
  %328 = phi i64 [ %264, %321 ], [ %337, %326 ]
  %329 = sub i64 0, %327
  %330 = sub i64 0, %327
  %331 = getelementptr inbounds i8, i8* %324, i64 %330
  %332 = bitcast i8* %331 to <2 x i64>*
  %333 = load <2 x i64>, <2 x i64>* %332, align 1, !alias.scope !70
  %334 = getelementptr inbounds i8, i8* %325, i64 %329
  %335 = bitcast i8* %334 to <2 x i64>*
  store <2 x i64> %333, <2 x i64>* %335, align 1, !alias.scope !73, !noalias !70
  %336 = add i64 %327, 16
  %337 = add i64 %328, -1
  %338 = icmp eq i64 %337, 0
  br i1 %338, label %339, label %326, !llvm.loop !76

339:                                              ; preds = %326, %318
  %340 = icmp eq i64 %244, %256
  br i1 %340, label %351, label %341

341:                                              ; preds = %339, %246, %241
  %342 = phi i8* [ %231, %246 ], [ %231, %241 ], [ %258, %339 ]
  %343 = phi i8* [ %238, %246 ], [ %238, %241 ], [ %260, %339 ]
  br label %344

344:                                              ; preds = %341, %344
  %345 = phi i8* [ %347, %344 ], [ %342, %341 ]
  %346 = phi i8* [ %348, %344 ], [ %343, %341 ]
  %347 = getelementptr inbounds i8, i8* %345, i64 -1
  %348 = getelementptr inbounds i8, i8* %346, i64 -1
  %349 = load i8, i8* %348, align 1
  store i8 %349, i8* %347, align 1
  %350 = icmp eq i8* %348, %237
  br i1 %350, label %351, label %344, !llvm.loop !77

351:                                              ; preds = %344, %339, %228
  %352 = phi i8* [ %231, %228 ], [ %258, %339 ], [ %347, %344 ]
  %353 = ptrtoint i8* %352 to i64
  store i64 %353, i64* %11, align 8
  store i64 %235, i64* %9, align 8
  store i64 %233, i64* %202, align 8
  br label %354

354:                                              ; preds = %189, %351
  %355 = phi i64 [ %193, %189 ], [ %233, %351 ]
  %356 = phi i8* [ %192, %189 ], [ %232, %351 ]
  %357 = phi i8* [ %190, %189 ], [ %234, %351 ]
  %358 = icmp eq i8* %357, %356
  br i1 %358, label %364, label %359

359:                                              ; preds = %354
  store i8 3, i8* %357, align 1
  %360 = getelementptr inbounds i8, i8* %357, i64 1
  %361 = ptrtoint i8* %360 to i64
  store i64 %361, i64* %9, align 8
  %362 = load i8*, i8** %16, align 8
  %363 = ptrtoint i8* %362 to i64
  br label %524

364:                                              ; preds = %354
  %365 = load i64, i64* %11, align 8
  %366 = sub i64 %355, %365
  %367 = add i64 %366, 1
  %368 = icmp ugt i64 %367, 2147483647
  br i1 %368, label %369, label %371

369:                                              ; preds = %364
  %370 = bitcast %"class.std::__1::vector"* %7 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %370) #7
  unreachable

371:                                              ; preds = %364
  %372 = bitcast i8** %16 to i64*
  %373 = icmp ult i64 %366, 1073741823
  br i1 %373, label %374, label %379

374:                                              ; preds = %371
  %375 = shl i64 %366, 1
  %376 = icmp ult i64 %375, %367
  %377 = select i1 %376, i64 %367, i64 %375
  %378 = icmp eq i64 %377, 0
  br i1 %378, label %398, label %379

379:                                              ; preds = %374, %371
  %380 = phi i64 [ %377, %374 ], [ 2147483647, %371 ]
  %381 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 5, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %382 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %381, align 8
  %383 = add nuw nsw i64 %380, 7
  %384 = and i64 %383, -8
  %385 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %382, i64 0, i32 2
  %386 = load i64, i64* %385, align 8
  %387 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %382, i64 0, i32 3
  %388 = load i64, i64* %387, align 8
  %389 = sub i64 %388, %386
  %390 = icmp ugt i64 %384, %389
  br i1 %390, label %391, label %393, !prof !2

391:                                              ; preds = %379
  %392 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %382, i64 %384) #6
  br label %395

393:                                              ; preds = %379
  %394 = add i64 %386, %384
  store i64 %394, i64* %385, align 8
  br label %395

395:                                              ; preds = %393, %391
  %396 = phi i64 [ %392, %391 ], [ %386, %393 ]
  %397 = inttoptr i64 %396 to i8*
  br label %398

398:                                              ; preds = %395, %374
  %399 = phi i64 [ %380, %395 ], [ 0, %374 ]
  %400 = phi i8* [ %397, %395 ], [ null, %374 ]
  %401 = getelementptr inbounds i8, i8* %400, i64 %366
  %402 = getelementptr inbounds i8, i8* %400, i64 %399
  %403 = ptrtoint i8* %402 to i64
  store i8 3, i8* %401, align 1
  %404 = getelementptr inbounds i8, i8* %401, i64 1
  %405 = ptrtoint i8* %404 to i64
  %406 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %7, i64 0, i32 0, i32 0
  %407 = load i8*, i8** %406, align 8
  %408 = load i8*, i8** %8, align 8
  %409 = ptrtoint i8* %408 to i64
  %410 = icmp eq i8* %408, %407
  br i1 %410, label %521, label %411

411:                                              ; preds = %398
  %412 = ptrtoint i8* %407 to i64
  %413 = ptrtoint i8* %408 to i64
  %414 = sub i64 %413, %412
  %415 = icmp ult i64 %414, 16
  br i1 %415, label %511, label %416

416:                                              ; preds = %411
  %417 = sub i64 %355, %409
  %418 = sub i64 %417, %365
  %419 = getelementptr i8, i8* %407, i64 %418
  %420 = ptrtoint i8* %419 to i64
  %421 = getelementptr i8, i8* %400, i64 %420
  %422 = icmp ult i8* %421, %408
  %423 = icmp ult i8* %407, %401
  %424 = and i1 %422, %423
  br i1 %424, label %511, label %425

425:                                              ; preds = %416
  %426 = and i64 %414, -16
  %427 = sub i64 0, %426
  %428 = getelementptr i8, i8* %401, i64 %427
  %429 = sub i64 0, %426
  %430 = getelementptr i8, i8* %408, i64 %429
  %431 = add i64 %426, -16
  %432 = lshr exact i64 %431, 4
  %433 = add nuw nsw i64 %432, 1
  %434 = and i64 %433, 3
  %435 = icmp ult i64 %431, 48
  br i1 %435, label %488, label %436

436:                                              ; preds = %425
  %437 = sub nsw i64 %433, %434
  %438 = getelementptr i8, i8* %401, i64 -1
  %439 = getelementptr inbounds i8, i8* %438, i64 -8
  %440 = getelementptr inbounds i8, i8* %408, i64 -16
  %441 = getelementptr inbounds i8, i8* %439, i64 -7
  %442 = getelementptr i8, i8* %401, i64 -1
  %443 = getelementptr inbounds i8, i8* %442, i64 -8
  %444 = getelementptr inbounds i8, i8* %408, i64 -16
  %445 = getelementptr inbounds i8, i8* %443, i64 -7
  %446 = getelementptr i8, i8* %401, i64 -1
  %447 = getelementptr inbounds i8, i8* %446, i64 -8
  %448 = getelementptr inbounds i8, i8* %408, i64 -16
  %449 = getelementptr inbounds i8, i8* %447, i64 -7
  %450 = getelementptr i8, i8* %401, i64 -1
  %451 = getelementptr inbounds i8, i8* %450, i64 -8
  %452 = getelementptr inbounds i8, i8* %408, i64 -16
  %453 = getelementptr inbounds i8, i8* %451, i64 -7
  br label %454

454:                                              ; preds = %454, %436
  %455 = phi i64 [ 0, %436 ], [ %485, %454 ]
  %456 = phi i64 [ %437, %436 ], [ %486, %454 ]
  %457 = sub i64 0, %455
  %458 = sub i64 0, %455
  %459 = getelementptr inbounds i8, i8* %440, i64 %458
  %460 = bitcast i8* %459 to <2 x i64>*
  %461 = load <2 x i64>, <2 x i64>* %460, align 1, !alias.scope !78
  %462 = getelementptr inbounds i8, i8* %441, i64 %457
  %463 = bitcast i8* %462 to <2 x i64>*
  store <2 x i64> %461, <2 x i64>* %463, align 1, !alias.scope !81, !noalias !78
  %464 = sub nuw nsw i64 -16, %455
  %465 = sub nuw nsw i64 -16, %455
  %466 = getelementptr inbounds i8, i8* %444, i64 %465
  %467 = bitcast i8* %466 to <2 x i64>*
  %468 = load <2 x i64>, <2 x i64>* %467, align 1, !alias.scope !78
  %469 = getelementptr inbounds i8, i8* %445, i64 %464
  %470 = bitcast i8* %469 to <2 x i64>*
  store <2 x i64> %468, <2 x i64>* %470, align 1, !alias.scope !81, !noalias !78
  %471 = sub nuw nsw i64 -32, %455
  %472 = sub nuw nsw i64 -32, %455
  %473 = getelementptr inbounds i8, i8* %448, i64 %472
  %474 = bitcast i8* %473 to <2 x i64>*
  %475 = load <2 x i64>, <2 x i64>* %474, align 1, !alias.scope !78
  %476 = getelementptr inbounds i8, i8* %449, i64 %471
  %477 = bitcast i8* %476 to <2 x i64>*
  store <2 x i64> %475, <2 x i64>* %477, align 1, !alias.scope !81, !noalias !78
  %478 = sub nuw nsw i64 -48, %455
  %479 = sub nuw nsw i64 -48, %455
  %480 = getelementptr inbounds i8, i8* %452, i64 %479
  %481 = bitcast i8* %480 to <2 x i64>*
  %482 = load <2 x i64>, <2 x i64>* %481, align 1, !alias.scope !78
  %483 = getelementptr inbounds i8, i8* %453, i64 %478
  %484 = bitcast i8* %483 to <2 x i64>*
  store <2 x i64> %482, <2 x i64>* %484, align 1, !alias.scope !81, !noalias !78
  %485 = add i64 %455, 64
  %486 = add i64 %456, -4
  %487 = icmp eq i64 %486, 0
  br i1 %487, label %488, label %454, !llvm.loop !83

488:                                              ; preds = %454, %425
  %489 = phi i64 [ 0, %425 ], [ %485, %454 ]
  %490 = icmp eq i64 %434, 0
  br i1 %490, label %509, label %491

491:                                              ; preds = %488
  %492 = getelementptr i8, i8* %401, i64 -1
  %493 = getelementptr inbounds i8, i8* %492, i64 -8
  %494 = getelementptr inbounds i8, i8* %408, i64 -16
  %495 = getelementptr inbounds i8, i8* %493, i64 -7
  br label %496

496:                                              ; preds = %496, %491
  %497 = phi i64 [ %489, %491 ], [ %506, %496 ]
  %498 = phi i64 [ %434, %491 ], [ %507, %496 ]
  %499 = sub i64 0, %497
  %500 = sub i64 0, %497
  %501 = getelementptr inbounds i8, i8* %494, i64 %500
  %502 = bitcast i8* %501 to <2 x i64>*
  %503 = load <2 x i64>, <2 x i64>* %502, align 1, !alias.scope !78
  %504 = getelementptr inbounds i8, i8* %495, i64 %499
  %505 = bitcast i8* %504 to <2 x i64>*
  store <2 x i64> %503, <2 x i64>* %505, align 1, !alias.scope !81, !noalias !78
  %506 = add i64 %497, 16
  %507 = add i64 %498, -1
  %508 = icmp eq i64 %507, 0
  br i1 %508, label %509, label %496, !llvm.loop !84

509:                                              ; preds = %496, %488
  %510 = icmp eq i64 %414, %426
  br i1 %510, label %521, label %511

511:                                              ; preds = %509, %416, %411
  %512 = phi i8* [ %401, %416 ], [ %401, %411 ], [ %428, %509 ]
  %513 = phi i8* [ %408, %416 ], [ %408, %411 ], [ %430, %509 ]
  br label %514

514:                                              ; preds = %511, %514
  %515 = phi i8* [ %517, %514 ], [ %512, %511 ]
  %516 = phi i8* [ %518, %514 ], [ %513, %511 ]
  %517 = getelementptr inbounds i8, i8* %515, i64 -1
  %518 = getelementptr inbounds i8, i8* %516, i64 -1
  %519 = load i8, i8* %518, align 1
  store i8 %519, i8* %517, align 1
  %520 = icmp eq i8* %518, %407
  br i1 %520, label %521, label %514, !llvm.loop !85

521:                                              ; preds = %514, %509, %398
  %522 = phi i8* [ %401, %398 ], [ %428, %509 ], [ %517, %514 ]
  %523 = ptrtoint i8* %522 to i64
  store i64 %523, i64* %11, align 8
  store i64 %405, i64* %9, align 8
  store i64 %403, i64* %372, align 8
  br label %524

524:                                              ; preds = %359, %521
  %525 = phi i64 [ %363, %359 ], [ %403, %521 ]
  %526 = phi i8* [ %362, %359 ], [ %402, %521 ]
  %527 = phi i8* [ %360, %359 ], [ %404, %521 ]
  %528 = icmp eq i8* %527, %526
  br i1 %528, label %532, label %529

529:                                              ; preds = %524
  store i8 59, i8* %527, align 1
  %530 = getelementptr inbounds i8, i8* %527, i64 1
  %531 = ptrtoint i8* %530 to i64
  store i64 %531, i64* %9, align 8
  br label %692

532:                                              ; preds = %524
  %533 = load i64, i64* %11, align 8
  %534 = sub i64 %525, %533
  %535 = add i64 %534, 1
  %536 = icmp ugt i64 %535, 2147483647
  br i1 %536, label %537, label %539

537:                                              ; preds = %532
  %538 = bitcast %"class.std::__1::vector"* %7 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %538) #7
  unreachable

539:                                              ; preds = %532
  %540 = bitcast i8** %16 to i64*
  %541 = icmp ult i64 %534, 1073741823
  br i1 %541, label %542, label %547

542:                                              ; preds = %539
  %543 = shl i64 %534, 1
  %544 = icmp ult i64 %543, %535
  %545 = select i1 %544, i64 %535, i64 %543
  %546 = icmp eq i64 %545, 0
  br i1 %546, label %566, label %547

547:                                              ; preds = %542, %539
  %548 = phi i64 [ %545, %542 ], [ 2147483647, %539 ]
  %549 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 5, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %550 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %549, align 8
  %551 = add nuw nsw i64 %548, 7
  %552 = and i64 %551, -8
  %553 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %550, i64 0, i32 2
  %554 = load i64, i64* %553, align 8
  %555 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %550, i64 0, i32 3
  %556 = load i64, i64* %555, align 8
  %557 = sub i64 %556, %554
  %558 = icmp ugt i64 %552, %557
  br i1 %558, label %559, label %561, !prof !2

559:                                              ; preds = %547
  %560 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %550, i64 %552) #6
  br label %563

561:                                              ; preds = %547
  %562 = add i64 %554, %552
  store i64 %562, i64* %553, align 8
  br label %563

563:                                              ; preds = %561, %559
  %564 = phi i64 [ %560, %559 ], [ %554, %561 ]
  %565 = inttoptr i64 %564 to i8*
  br label %566

566:                                              ; preds = %563, %542
  %567 = phi i64 [ %548, %563 ], [ 0, %542 ]
  %568 = phi i8* [ %565, %563 ], [ null, %542 ]
  %569 = getelementptr inbounds i8, i8* %568, i64 %534
  %570 = getelementptr inbounds i8, i8* %568, i64 %567
  %571 = ptrtoint i8* %570 to i64
  store i8 59, i8* %569, align 1
  %572 = getelementptr inbounds i8, i8* %569, i64 1
  %573 = ptrtoint i8* %572 to i64
  %574 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %7, i64 0, i32 0, i32 0
  %575 = load i8*, i8** %574, align 8
  %576 = load i8*, i8** %8, align 8
  %577 = ptrtoint i8* %576 to i64
  %578 = icmp eq i8* %576, %575
  br i1 %578, label %689, label %579

579:                                              ; preds = %566
  %580 = ptrtoint i8* %575 to i64
  %581 = ptrtoint i8* %576 to i64
  %582 = sub i64 %581, %580
  %583 = icmp ult i64 %582, 16
  br i1 %583, label %679, label %584

584:                                              ; preds = %579
  %585 = sub i64 %525, %577
  %586 = sub i64 %585, %533
  %587 = getelementptr i8, i8* %575, i64 %586
  %588 = ptrtoint i8* %587 to i64
  %589 = getelementptr i8, i8* %568, i64 %588
  %590 = icmp ult i8* %589, %576
  %591 = icmp ult i8* %575, %569
  %592 = and i1 %590, %591
  br i1 %592, label %679, label %593

593:                                              ; preds = %584
  %594 = and i64 %582, -16
  %595 = sub i64 0, %594
  %596 = getelementptr i8, i8* %569, i64 %595
  %597 = sub i64 0, %594
  %598 = getelementptr i8, i8* %576, i64 %597
  %599 = add i64 %594, -16
  %600 = lshr exact i64 %599, 4
  %601 = add nuw nsw i64 %600, 1
  %602 = and i64 %601, 3
  %603 = icmp ult i64 %599, 48
  br i1 %603, label %656, label %604

604:                                              ; preds = %593
  %605 = sub nsw i64 %601, %602
  %606 = getelementptr i8, i8* %569, i64 -1
  %607 = getelementptr inbounds i8, i8* %606, i64 -8
  %608 = getelementptr inbounds i8, i8* %576, i64 -16
  %609 = getelementptr inbounds i8, i8* %607, i64 -7
  %610 = getelementptr i8, i8* %569, i64 -1
  %611 = getelementptr inbounds i8, i8* %610, i64 -8
  %612 = getelementptr inbounds i8, i8* %576, i64 -16
  %613 = getelementptr inbounds i8, i8* %611, i64 -7
  %614 = getelementptr i8, i8* %569, i64 -1
  %615 = getelementptr inbounds i8, i8* %614, i64 -8
  %616 = getelementptr inbounds i8, i8* %576, i64 -16
  %617 = getelementptr inbounds i8, i8* %615, i64 -7
  %618 = getelementptr i8, i8* %569, i64 -1
  %619 = getelementptr inbounds i8, i8* %618, i64 -8
  %620 = getelementptr inbounds i8, i8* %576, i64 -16
  %621 = getelementptr inbounds i8, i8* %619, i64 -7
  br label %622

622:                                              ; preds = %622, %604
  %623 = phi i64 [ 0, %604 ], [ %653, %622 ]
  %624 = phi i64 [ %605, %604 ], [ %654, %622 ]
  %625 = sub i64 0, %623
  %626 = sub i64 0, %623
  %627 = getelementptr inbounds i8, i8* %608, i64 %626
  %628 = bitcast i8* %627 to <2 x i64>*
  %629 = load <2 x i64>, <2 x i64>* %628, align 1, !alias.scope !86
  %630 = getelementptr inbounds i8, i8* %609, i64 %625
  %631 = bitcast i8* %630 to <2 x i64>*
  store <2 x i64> %629, <2 x i64>* %631, align 1, !alias.scope !89, !noalias !86
  %632 = sub nuw nsw i64 -16, %623
  %633 = sub nuw nsw i64 -16, %623
  %634 = getelementptr inbounds i8, i8* %612, i64 %633
  %635 = bitcast i8* %634 to <2 x i64>*
  %636 = load <2 x i64>, <2 x i64>* %635, align 1, !alias.scope !86
  %637 = getelementptr inbounds i8, i8* %613, i64 %632
  %638 = bitcast i8* %637 to <2 x i64>*
  store <2 x i64> %636, <2 x i64>* %638, align 1, !alias.scope !89, !noalias !86
  %639 = sub nuw nsw i64 -32, %623
  %640 = sub nuw nsw i64 -32, %623
  %641 = getelementptr inbounds i8, i8* %616, i64 %640
  %642 = bitcast i8* %641 to <2 x i64>*
  %643 = load <2 x i64>, <2 x i64>* %642, align 1, !alias.scope !86
  %644 = getelementptr inbounds i8, i8* %617, i64 %639
  %645 = bitcast i8* %644 to <2 x i64>*
  store <2 x i64> %643, <2 x i64>* %645, align 1, !alias.scope !89, !noalias !86
  %646 = sub nuw nsw i64 -48, %623
  %647 = sub nuw nsw i64 -48, %623
  %648 = getelementptr inbounds i8, i8* %620, i64 %647
  %649 = bitcast i8* %648 to <2 x i64>*
  %650 = load <2 x i64>, <2 x i64>* %649, align 1, !alias.scope !86
  %651 = getelementptr inbounds i8, i8* %621, i64 %646
  %652 = bitcast i8* %651 to <2 x i64>*
  store <2 x i64> %650, <2 x i64>* %652, align 1, !alias.scope !89, !noalias !86
  %653 = add i64 %623, 64
  %654 = add i64 %624, -4
  %655 = icmp eq i64 %654, 0
  br i1 %655, label %656, label %622, !llvm.loop !91

656:                                              ; preds = %622, %593
  %657 = phi i64 [ 0, %593 ], [ %653, %622 ]
  %658 = icmp eq i64 %602, 0
  br i1 %658, label %677, label %659

659:                                              ; preds = %656
  %660 = getelementptr i8, i8* %569, i64 -1
  %661 = getelementptr inbounds i8, i8* %660, i64 -8
  %662 = getelementptr inbounds i8, i8* %576, i64 -16
  %663 = getelementptr inbounds i8, i8* %661, i64 -7
  br label %664

664:                                              ; preds = %664, %659
  %665 = phi i64 [ %657, %659 ], [ %674, %664 ]
  %666 = phi i64 [ %602, %659 ], [ %675, %664 ]
  %667 = sub i64 0, %665
  %668 = sub i64 0, %665
  %669 = getelementptr inbounds i8, i8* %662, i64 %668
  %670 = bitcast i8* %669 to <2 x i64>*
  %671 = load <2 x i64>, <2 x i64>* %670, align 1, !alias.scope !86
  %672 = getelementptr inbounds i8, i8* %663, i64 %667
  %673 = bitcast i8* %672 to <2 x i64>*
  store <2 x i64> %671, <2 x i64>* %673, align 1, !alias.scope !89, !noalias !86
  %674 = add i64 %665, 16
  %675 = add i64 %666, -1
  %676 = icmp eq i64 %675, 0
  br i1 %676, label %677, label %664, !llvm.loop !92

677:                                              ; preds = %664, %656
  %678 = icmp eq i64 %582, %594
  br i1 %678, label %689, label %679

679:                                              ; preds = %677, %584, %579
  %680 = phi i8* [ %569, %584 ], [ %569, %579 ], [ %596, %677 ]
  %681 = phi i8* [ %576, %584 ], [ %576, %579 ], [ %598, %677 ]
  br label %682

682:                                              ; preds = %679, %682
  %683 = phi i8* [ %685, %682 ], [ %680, %679 ]
  %684 = phi i8* [ %686, %682 ], [ %681, %679 ]
  %685 = getelementptr inbounds i8, i8* %683, i64 -1
  %686 = getelementptr inbounds i8, i8* %684, i64 -1
  %687 = load i8, i8* %686, align 1
  store i8 %687, i8* %685, align 1
  %688 = icmp eq i8* %686, %575
  br i1 %688, label %689, label %682, !llvm.loop !93

689:                                              ; preds = %682, %677, %566
  %690 = phi i8* [ %569, %566 ], [ %596, %677 ], [ %685, %682 ]
  %691 = ptrtoint i8* %690 to i64
  store i64 %691, i64* %11, align 8
  store i64 %573, i64* %9, align 8
  store i64 %571, i64* %540, align 8
  br label %692

692:                                              ; preds = %529, %689
  %693 = phi i8* [ %530, %529 ], [ %572, %689 ]
  %694 = sub i32 -4, %14
  %695 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %695)
  store i32 %694, i32* %5, align 4
  %696 = getelementptr inbounds i32, i32* %5, i64 1
  %697 = bitcast i32* %696 to i8*
  %698 = call i8* @_ZNSt3__16vectorIhN2v88internal13ZoneAllocatorIhEEE6insertIPKhEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsISA_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSE_IS8_EESA_SA_(%"class.std::__1::vector"* %7, i8* %693, i8* nonnull %695, i8* %697) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %695)
  %699 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %699)
  store i32 1, i32* %4, align 4
  %700 = load i8*, i8** %8, align 8
  %701 = getelementptr inbounds i32, i32* %4, i64 1
  %702 = bitcast i32* %701 to i8*
  %703 = call i8* @_ZNSt3__16vectorIhN2v88internal13ZoneAllocatorIhEEE6insertIPKhEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsISA_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSE_IS8_EESA_SA_(%"class.std::__1::vector"* %7, i8* %700, i8* nonnull %699, i8* %702) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %699)
  %704 = add i32 %1, 7
  %705 = and i32 %704, -8
  %706 = add nsw i32 %705, %14
  %707 = sub nsw i32 0, %706
  %708 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %708)
  store i32 %707, i32* %3, align 4
  %709 = load i8*, i8** %8, align 8
  %710 = getelementptr inbounds i32, i32* %3, i64 1
  %711 = bitcast i32* %710 to i8*
  %712 = call i8* @_ZNSt3__16vectorIhN2v88internal13ZoneAllocatorIhEEE6insertIPKhEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsISA_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSE_IS8_EESA_SA_(%"class.std::__1::vector"* %7, i8* %709, i8* nonnull %708, i8* %711) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %708)
  %713 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 0
  %714 = load i32, i32* %713, align 8
  %715 = sub i32 %714, %14
  %716 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %716)
  store i32 %715, i32* %6, align 4
  %717 = load i8*, i8** %8, align 8
  %718 = getelementptr inbounds i32, i32* %6, i64 1
  %719 = bitcast i32* %718 to i8*
  %720 = call i8* @_ZNSt3__16vectorIhN2v88internal13ZoneAllocatorIhEEE6insertIPKhEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsISA_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSE_IS8_EESA_SA_(%"class.std::__1::vector"* %7, i8* %717, i8* nonnull %716, i8* %719) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %716)
  ret void
}

; Function Attrs: nofree nounwind
declare i32 @__cxa_guard_acquire(i64*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare {}* @llvm.invariant.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare void @__cxa_guard_release(i64*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal13EhFrameWriter15AdvanceLocationEi(%"class.v8::internal::EhFrameWriter"*, i32) local_unnamed_addr #0 align 2 {
  %3 = alloca i32, align 4
  %4 = alloca i16, align 2
  %5 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 1
  %6 = load i32, i32* %5, align 4
  %7 = sub nsw i32 %1, %6
  %8 = load i32, i32* @_ZN2v88internal16EhFrameConstants20kCodeAlignmentFactorE, align 4
  %9 = udiv i32 %7, %8
  %10 = icmp ult i32 %9, 64
  br i1 %10, label %11, label %190

11:                                               ; preds = %2
  %12 = trunc i32 %9 to i8
  %13 = and i8 %12, 63
  %14 = or i8 %13, 64
  %15 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 5, i32 0
  %16 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 5, i32 0, i32 0, i32 1
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 5, i32 0, i32 0, i32 2, i32 0, i32 0
  %19 = load i8*, i8** %18, align 8
  %20 = icmp eq i8* %17, %19
  %21 = ptrtoint i8* %19 to i64
  br i1 %20, label %26, label %22

22:                                               ; preds = %11
  store i8 %14, i8* %17, align 1
  %23 = getelementptr inbounds i8, i8* %17, i64 1
  %24 = ptrtoint i8* %23 to i64
  %25 = bitcast i8** %16 to i64*
  store i64 %24, i64* %25, align 8
  br label %902

26:                                               ; preds = %11
  %27 = ptrtoint i8* %17 to i64
  %28 = bitcast i8** %16 to i64*
  %29 = bitcast %"class.std::__1::vector"* %15 to i64*
  %30 = load i64, i64* %29, align 8
  %31 = sub i64 %27, %30
  %32 = add i64 %31, 1
  %33 = icmp ugt i64 %32, 2147483647
  br i1 %33, label %34, label %36

34:                                               ; preds = %26
  %35 = bitcast %"class.std::__1::vector"* %15 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %35) #7
  unreachable

36:                                               ; preds = %26
  %37 = bitcast i8** %18 to i64*
  %38 = sub i64 %21, %30
  %39 = icmp ult i64 %38, 1073741823
  br i1 %39, label %40, label %45

40:                                               ; preds = %36
  %41 = shl i64 %38, 1
  %42 = icmp ult i64 %41, %32
  %43 = select i1 %42, i64 %32, i64 %41
  %44 = icmp eq i64 %43, 0
  br i1 %44, label %64, label %45

45:                                               ; preds = %40, %36
  %46 = phi i64 [ %43, %40 ], [ 2147483647, %36 ]
  %47 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 5, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %48 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %47, align 8
  %49 = add nuw nsw i64 %46, 7
  %50 = and i64 %49, -8
  %51 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %48, i64 0, i32 2
  %52 = load i64, i64* %51, align 8
  %53 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %48, i64 0, i32 3
  %54 = load i64, i64* %53, align 8
  %55 = sub i64 %54, %52
  %56 = icmp ugt i64 %50, %55
  br i1 %56, label %57, label %59, !prof !2

57:                                               ; preds = %45
  %58 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %48, i64 %50) #6
  br label %61

59:                                               ; preds = %45
  %60 = add i64 %52, %50
  store i64 %60, i64* %51, align 8
  br label %61

61:                                               ; preds = %59, %57
  %62 = phi i64 [ %58, %57 ], [ %52, %59 ]
  %63 = inttoptr i64 %62 to i8*
  br label %64

64:                                               ; preds = %61, %40
  %65 = phi i64 [ %46, %61 ], [ 0, %40 ]
  %66 = phi i8* [ %63, %61 ], [ null, %40 ]
  %67 = getelementptr inbounds i8, i8* %66, i64 %31
  %68 = getelementptr inbounds i8, i8* %66, i64 %65
  %69 = ptrtoint i8* %68 to i64
  store i8 %14, i8* %67, align 1
  %70 = getelementptr inbounds i8, i8* %67, i64 1
  %71 = ptrtoint i8* %70 to i64
  %72 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %15, i64 0, i32 0, i32 0
  %73 = load i8*, i8** %72, align 8
  %74 = load i8*, i8** %16, align 8
  %75 = ptrtoint i8* %74 to i64
  %76 = icmp eq i8* %74, %73
  br i1 %76, label %187, label %77

77:                                               ; preds = %64
  %78 = ptrtoint i8* %73 to i64
  %79 = ptrtoint i8* %74 to i64
  %80 = sub i64 %79, %78
  %81 = icmp ult i64 %80, 16
  br i1 %81, label %177, label %82

82:                                               ; preds = %77
  %83 = sub i64 %27, %75
  %84 = sub i64 %83, %30
  %85 = getelementptr i8, i8* %73, i64 %84
  %86 = ptrtoint i8* %85 to i64
  %87 = getelementptr i8, i8* %66, i64 %86
  %88 = icmp ult i8* %87, %74
  %89 = icmp ult i8* %73, %67
  %90 = and i1 %88, %89
  br i1 %90, label %177, label %91

91:                                               ; preds = %82
  %92 = and i64 %80, -16
  %93 = sub i64 0, %92
  %94 = getelementptr i8, i8* %67, i64 %93
  %95 = sub i64 0, %92
  %96 = getelementptr i8, i8* %74, i64 %95
  %97 = add i64 %92, -16
  %98 = lshr exact i64 %97, 4
  %99 = add nuw nsw i64 %98, 1
  %100 = and i64 %99, 3
  %101 = icmp ult i64 %97, 48
  br i1 %101, label %154, label %102

102:                                              ; preds = %91
  %103 = sub nsw i64 %99, %100
  %104 = getelementptr i8, i8* %67, i64 -1
  %105 = getelementptr inbounds i8, i8* %104, i64 -8
  %106 = getelementptr inbounds i8, i8* %74, i64 -16
  %107 = getelementptr inbounds i8, i8* %105, i64 -7
  %108 = getelementptr i8, i8* %67, i64 -1
  %109 = getelementptr inbounds i8, i8* %108, i64 -8
  %110 = getelementptr inbounds i8, i8* %74, i64 -16
  %111 = getelementptr inbounds i8, i8* %109, i64 -7
  %112 = getelementptr i8, i8* %67, i64 -1
  %113 = getelementptr inbounds i8, i8* %112, i64 -8
  %114 = getelementptr inbounds i8, i8* %74, i64 -16
  %115 = getelementptr inbounds i8, i8* %113, i64 -7
  %116 = getelementptr i8, i8* %67, i64 -1
  %117 = getelementptr inbounds i8, i8* %116, i64 -8
  %118 = getelementptr inbounds i8, i8* %74, i64 -16
  %119 = getelementptr inbounds i8, i8* %117, i64 -7
  br label %120

120:                                              ; preds = %120, %102
  %121 = phi i64 [ 0, %102 ], [ %151, %120 ]
  %122 = phi i64 [ %103, %102 ], [ %152, %120 ]
  %123 = sub i64 0, %121
  %124 = sub i64 0, %121
  %125 = getelementptr inbounds i8, i8* %106, i64 %124
  %126 = bitcast i8* %125 to <2 x i64>*
  %127 = load <2 x i64>, <2 x i64>* %126, align 1, !alias.scope !94
  %128 = getelementptr inbounds i8, i8* %107, i64 %123
  %129 = bitcast i8* %128 to <2 x i64>*
  store <2 x i64> %127, <2 x i64>* %129, align 1, !alias.scope !97, !noalias !94
  %130 = sub nuw nsw i64 -16, %121
  %131 = sub nuw nsw i64 -16, %121
  %132 = getelementptr inbounds i8, i8* %110, i64 %131
  %133 = bitcast i8* %132 to <2 x i64>*
  %134 = load <2 x i64>, <2 x i64>* %133, align 1, !alias.scope !94
  %135 = getelementptr inbounds i8, i8* %111, i64 %130
  %136 = bitcast i8* %135 to <2 x i64>*
  store <2 x i64> %134, <2 x i64>* %136, align 1, !alias.scope !97, !noalias !94
  %137 = sub nuw nsw i64 -32, %121
  %138 = sub nuw nsw i64 -32, %121
  %139 = getelementptr inbounds i8, i8* %114, i64 %138
  %140 = bitcast i8* %139 to <2 x i64>*
  %141 = load <2 x i64>, <2 x i64>* %140, align 1, !alias.scope !94
  %142 = getelementptr inbounds i8, i8* %115, i64 %137
  %143 = bitcast i8* %142 to <2 x i64>*
  store <2 x i64> %141, <2 x i64>* %143, align 1, !alias.scope !97, !noalias !94
  %144 = sub nuw nsw i64 -48, %121
  %145 = sub nuw nsw i64 -48, %121
  %146 = getelementptr inbounds i8, i8* %118, i64 %145
  %147 = bitcast i8* %146 to <2 x i64>*
  %148 = load <2 x i64>, <2 x i64>* %147, align 1, !alias.scope !94
  %149 = getelementptr inbounds i8, i8* %119, i64 %144
  %150 = bitcast i8* %149 to <2 x i64>*
  store <2 x i64> %148, <2 x i64>* %150, align 1, !alias.scope !97, !noalias !94
  %151 = add i64 %121, 64
  %152 = add i64 %122, -4
  %153 = icmp eq i64 %152, 0
  br i1 %153, label %154, label %120, !llvm.loop !99

154:                                              ; preds = %120, %91
  %155 = phi i64 [ 0, %91 ], [ %151, %120 ]
  %156 = icmp eq i64 %100, 0
  br i1 %156, label %175, label %157

157:                                              ; preds = %154
  %158 = getelementptr i8, i8* %67, i64 -1
  %159 = getelementptr inbounds i8, i8* %158, i64 -8
  %160 = getelementptr inbounds i8, i8* %74, i64 -16
  %161 = getelementptr inbounds i8, i8* %159, i64 -7
  br label %162

162:                                              ; preds = %162, %157
  %163 = phi i64 [ %155, %157 ], [ %172, %162 ]
  %164 = phi i64 [ %100, %157 ], [ %173, %162 ]
  %165 = sub i64 0, %163
  %166 = sub i64 0, %163
  %167 = getelementptr inbounds i8, i8* %160, i64 %166
  %168 = bitcast i8* %167 to <2 x i64>*
  %169 = load <2 x i64>, <2 x i64>* %168, align 1, !alias.scope !94
  %170 = getelementptr inbounds i8, i8* %161, i64 %165
  %171 = bitcast i8* %170 to <2 x i64>*
  store <2 x i64> %169, <2 x i64>* %171, align 1, !alias.scope !97, !noalias !94
  %172 = add i64 %163, 16
  %173 = add i64 %164, -1
  %174 = icmp eq i64 %173, 0
  br i1 %174, label %175, label %162, !llvm.loop !100

175:                                              ; preds = %162, %154
  %176 = icmp eq i64 %80, %92
  br i1 %176, label %187, label %177

177:                                              ; preds = %175, %82, %77
  %178 = phi i8* [ %67, %82 ], [ %67, %77 ], [ %94, %175 ]
  %179 = phi i8* [ %74, %82 ], [ %74, %77 ], [ %96, %175 ]
  br label %180

180:                                              ; preds = %177, %180
  %181 = phi i8* [ %183, %180 ], [ %178, %177 ]
  %182 = phi i8* [ %184, %180 ], [ %179, %177 ]
  %183 = getelementptr inbounds i8, i8* %181, i64 -1
  %184 = getelementptr inbounds i8, i8* %182, i64 -1
  %185 = load i8, i8* %184, align 1
  store i8 %185, i8* %183, align 1
  %186 = icmp eq i8* %184, %73
  br i1 %186, label %187, label %180, !llvm.loop !101

187:                                              ; preds = %180, %175, %64
  %188 = phi i8* [ %67, %64 ], [ %94, %175 ], [ %183, %180 ]
  %189 = ptrtoint i8* %188 to i64
  store i64 %189, i64* %29, align 8
  store i64 %71, i64* %28, align 8
  store i64 %69, i64* %37, align 8
  br label %902

190:                                              ; preds = %2
  %191 = icmp ult i32 %9, 256
  br i1 %191, label %192, label %542

192:                                              ; preds = %190
  %193 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 5, i32 0
  %194 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 5, i32 0, i32 0, i32 1
  %195 = load i8*, i8** %194, align 8
  %196 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 5, i32 0, i32 0, i32 2, i32 0, i32 0
  %197 = load i8*, i8** %196, align 8
  %198 = icmp eq i8* %195, %197
  %199 = ptrtoint i8* %197 to i64
  br i1 %198, label %206, label %200

200:                                              ; preds = %192
  store i8 2, i8* %195, align 1
  %201 = getelementptr inbounds i8, i8* %195, i64 1
  %202 = ptrtoint i8* %201 to i64
  %203 = bitcast i8** %194 to i64*
  store i64 %202, i64* %203, align 8
  %204 = load i8*, i8** %196, align 8
  %205 = ptrtoint i8* %204 to i64
  br label %370

206:                                              ; preds = %192
  %207 = ptrtoint i8* %195 to i64
  %208 = bitcast i8** %194 to i64*
  %209 = bitcast %"class.std::__1::vector"* %193 to i64*
  %210 = load i64, i64* %209, align 8
  %211 = sub i64 %207, %210
  %212 = add i64 %211, 1
  %213 = icmp ugt i64 %212, 2147483647
  br i1 %213, label %214, label %216

214:                                              ; preds = %206
  %215 = bitcast %"class.std::__1::vector"* %193 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %215) #7
  unreachable

216:                                              ; preds = %206
  %217 = bitcast i8** %196 to i64*
  %218 = sub i64 %199, %210
  %219 = icmp ult i64 %218, 1073741823
  br i1 %219, label %220, label %225

220:                                              ; preds = %216
  %221 = shl i64 %218, 1
  %222 = icmp ult i64 %221, %212
  %223 = select i1 %222, i64 %212, i64 %221
  %224 = icmp eq i64 %223, 0
  br i1 %224, label %244, label %225

225:                                              ; preds = %220, %216
  %226 = phi i64 [ %223, %220 ], [ 2147483647, %216 ]
  %227 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 5, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %228 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %227, align 8
  %229 = add nuw nsw i64 %226, 7
  %230 = and i64 %229, -8
  %231 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %228, i64 0, i32 2
  %232 = load i64, i64* %231, align 8
  %233 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %228, i64 0, i32 3
  %234 = load i64, i64* %233, align 8
  %235 = sub i64 %234, %232
  %236 = icmp ugt i64 %230, %235
  br i1 %236, label %237, label %239, !prof !2

237:                                              ; preds = %225
  %238 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %228, i64 %230) #6
  br label %241

239:                                              ; preds = %225
  %240 = add i64 %232, %230
  store i64 %240, i64* %231, align 8
  br label %241

241:                                              ; preds = %239, %237
  %242 = phi i64 [ %238, %237 ], [ %232, %239 ]
  %243 = inttoptr i64 %242 to i8*
  br label %244

244:                                              ; preds = %241, %220
  %245 = phi i64 [ %226, %241 ], [ 0, %220 ]
  %246 = phi i8* [ %243, %241 ], [ null, %220 ]
  %247 = getelementptr inbounds i8, i8* %246, i64 %211
  %248 = getelementptr inbounds i8, i8* %246, i64 %245
  %249 = ptrtoint i8* %248 to i64
  store i8 2, i8* %247, align 1
  %250 = getelementptr inbounds i8, i8* %247, i64 1
  %251 = ptrtoint i8* %250 to i64
  %252 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %193, i64 0, i32 0, i32 0
  %253 = load i8*, i8** %252, align 8
  %254 = load i8*, i8** %194, align 8
  %255 = ptrtoint i8* %254 to i64
  %256 = icmp eq i8* %254, %253
  br i1 %256, label %367, label %257

257:                                              ; preds = %244
  %258 = ptrtoint i8* %253 to i64
  %259 = ptrtoint i8* %254 to i64
  %260 = sub i64 %259, %258
  %261 = icmp ult i64 %260, 16
  br i1 %261, label %357, label %262

262:                                              ; preds = %257
  %263 = sub i64 %207, %255
  %264 = sub i64 %263, %210
  %265 = getelementptr i8, i8* %253, i64 %264
  %266 = ptrtoint i8* %265 to i64
  %267 = getelementptr i8, i8* %246, i64 %266
  %268 = icmp ult i8* %267, %254
  %269 = icmp ult i8* %253, %247
  %270 = and i1 %268, %269
  br i1 %270, label %357, label %271

271:                                              ; preds = %262
  %272 = and i64 %260, -16
  %273 = sub i64 0, %272
  %274 = getelementptr i8, i8* %247, i64 %273
  %275 = sub i64 0, %272
  %276 = getelementptr i8, i8* %254, i64 %275
  %277 = add i64 %272, -16
  %278 = lshr exact i64 %277, 4
  %279 = add nuw nsw i64 %278, 1
  %280 = and i64 %279, 3
  %281 = icmp ult i64 %277, 48
  br i1 %281, label %334, label %282

282:                                              ; preds = %271
  %283 = sub nsw i64 %279, %280
  %284 = getelementptr i8, i8* %247, i64 -1
  %285 = getelementptr inbounds i8, i8* %284, i64 -8
  %286 = getelementptr inbounds i8, i8* %254, i64 -16
  %287 = getelementptr inbounds i8, i8* %285, i64 -7
  %288 = getelementptr i8, i8* %247, i64 -1
  %289 = getelementptr inbounds i8, i8* %288, i64 -8
  %290 = getelementptr inbounds i8, i8* %254, i64 -16
  %291 = getelementptr inbounds i8, i8* %289, i64 -7
  %292 = getelementptr i8, i8* %247, i64 -1
  %293 = getelementptr inbounds i8, i8* %292, i64 -8
  %294 = getelementptr inbounds i8, i8* %254, i64 -16
  %295 = getelementptr inbounds i8, i8* %293, i64 -7
  %296 = getelementptr i8, i8* %247, i64 -1
  %297 = getelementptr inbounds i8, i8* %296, i64 -8
  %298 = getelementptr inbounds i8, i8* %254, i64 -16
  %299 = getelementptr inbounds i8, i8* %297, i64 -7
  br label %300

300:                                              ; preds = %300, %282
  %301 = phi i64 [ 0, %282 ], [ %331, %300 ]
  %302 = phi i64 [ %283, %282 ], [ %332, %300 ]
  %303 = sub i64 0, %301
  %304 = sub i64 0, %301
  %305 = getelementptr inbounds i8, i8* %286, i64 %304
  %306 = bitcast i8* %305 to <2 x i64>*
  %307 = load <2 x i64>, <2 x i64>* %306, align 1, !alias.scope !102
  %308 = getelementptr inbounds i8, i8* %287, i64 %303
  %309 = bitcast i8* %308 to <2 x i64>*
  store <2 x i64> %307, <2 x i64>* %309, align 1, !alias.scope !105, !noalias !102
  %310 = sub nuw nsw i64 -16, %301
  %311 = sub nuw nsw i64 -16, %301
  %312 = getelementptr inbounds i8, i8* %290, i64 %311
  %313 = bitcast i8* %312 to <2 x i64>*
  %314 = load <2 x i64>, <2 x i64>* %313, align 1, !alias.scope !102
  %315 = getelementptr inbounds i8, i8* %291, i64 %310
  %316 = bitcast i8* %315 to <2 x i64>*
  store <2 x i64> %314, <2 x i64>* %316, align 1, !alias.scope !105, !noalias !102
  %317 = sub nuw nsw i64 -32, %301
  %318 = sub nuw nsw i64 -32, %301
  %319 = getelementptr inbounds i8, i8* %294, i64 %318
  %320 = bitcast i8* %319 to <2 x i64>*
  %321 = load <2 x i64>, <2 x i64>* %320, align 1, !alias.scope !102
  %322 = getelementptr inbounds i8, i8* %295, i64 %317
  %323 = bitcast i8* %322 to <2 x i64>*
  store <2 x i64> %321, <2 x i64>* %323, align 1, !alias.scope !105, !noalias !102
  %324 = sub nuw nsw i64 -48, %301
  %325 = sub nuw nsw i64 -48, %301
  %326 = getelementptr inbounds i8, i8* %298, i64 %325
  %327 = bitcast i8* %326 to <2 x i64>*
  %328 = load <2 x i64>, <2 x i64>* %327, align 1, !alias.scope !102
  %329 = getelementptr inbounds i8, i8* %299, i64 %324
  %330 = bitcast i8* %329 to <2 x i64>*
  store <2 x i64> %328, <2 x i64>* %330, align 1, !alias.scope !105, !noalias !102
  %331 = add i64 %301, 64
  %332 = add i64 %302, -4
  %333 = icmp eq i64 %332, 0
  br i1 %333, label %334, label %300, !llvm.loop !107

334:                                              ; preds = %300, %271
  %335 = phi i64 [ 0, %271 ], [ %331, %300 ]
  %336 = icmp eq i64 %280, 0
  br i1 %336, label %355, label %337

337:                                              ; preds = %334
  %338 = getelementptr i8, i8* %247, i64 -1
  %339 = getelementptr inbounds i8, i8* %338, i64 -8
  %340 = getelementptr inbounds i8, i8* %254, i64 -16
  %341 = getelementptr inbounds i8, i8* %339, i64 -7
  br label %342

342:                                              ; preds = %342, %337
  %343 = phi i64 [ %335, %337 ], [ %352, %342 ]
  %344 = phi i64 [ %280, %337 ], [ %353, %342 ]
  %345 = sub i64 0, %343
  %346 = sub i64 0, %343
  %347 = getelementptr inbounds i8, i8* %340, i64 %346
  %348 = bitcast i8* %347 to <2 x i64>*
  %349 = load <2 x i64>, <2 x i64>* %348, align 1, !alias.scope !102
  %350 = getelementptr inbounds i8, i8* %341, i64 %345
  %351 = bitcast i8* %350 to <2 x i64>*
  store <2 x i64> %349, <2 x i64>* %351, align 1, !alias.scope !105, !noalias !102
  %352 = add i64 %343, 16
  %353 = add i64 %344, -1
  %354 = icmp eq i64 %353, 0
  br i1 %354, label %355, label %342, !llvm.loop !108

355:                                              ; preds = %342, %334
  %356 = icmp eq i64 %260, %272
  br i1 %356, label %367, label %357

357:                                              ; preds = %355, %262, %257
  %358 = phi i8* [ %247, %262 ], [ %247, %257 ], [ %274, %355 ]
  %359 = phi i8* [ %254, %262 ], [ %254, %257 ], [ %276, %355 ]
  br label %360

360:                                              ; preds = %357, %360
  %361 = phi i8* [ %363, %360 ], [ %358, %357 ]
  %362 = phi i8* [ %364, %360 ], [ %359, %357 ]
  %363 = getelementptr inbounds i8, i8* %361, i64 -1
  %364 = getelementptr inbounds i8, i8* %362, i64 -1
  %365 = load i8, i8* %364, align 1
  store i8 %365, i8* %363, align 1
  %366 = icmp eq i8* %364, %253
  br i1 %366, label %367, label %360, !llvm.loop !109

367:                                              ; preds = %360, %355, %244
  %368 = phi i8* [ %247, %244 ], [ %274, %355 ], [ %363, %360 ]
  %369 = ptrtoint i8* %368 to i64
  store i64 %369, i64* %209, align 8
  store i64 %251, i64* %208, align 8
  store i64 %249, i64* %217, align 8
  br label %370

370:                                              ; preds = %200, %367
  %371 = phi i64 [ %205, %200 ], [ %249, %367 ]
  %372 = phi i8* [ %204, %200 ], [ %248, %367 ]
  %373 = phi i8* [ %201, %200 ], [ %250, %367 ]
  %374 = trunc i32 %9 to i8
  %375 = icmp eq i8* %373, %372
  br i1 %375, label %380, label %376

376:                                              ; preds = %370
  store i8 %374, i8* %373, align 1
  %377 = getelementptr inbounds i8, i8* %373, i64 1
  %378 = ptrtoint i8* %377 to i64
  %379 = bitcast i8** %194 to i64*
  store i64 %378, i64* %379, align 8
  br label %902

380:                                              ; preds = %370
  %381 = bitcast i8** %194 to i64*
  %382 = bitcast %"class.std::__1::vector"* %193 to i64*
  %383 = load i64, i64* %382, align 8
  %384 = sub i64 %371, %383
  %385 = add i64 %384, 1
  %386 = icmp ugt i64 %385, 2147483647
  br i1 %386, label %387, label %389

387:                                              ; preds = %380
  %388 = bitcast %"class.std::__1::vector"* %193 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %388) #7
  unreachable

389:                                              ; preds = %380
  %390 = bitcast i8** %196 to i64*
  %391 = icmp ult i64 %384, 1073741823
  br i1 %391, label %392, label %397

392:                                              ; preds = %389
  %393 = shl i64 %384, 1
  %394 = icmp ult i64 %393, %385
  %395 = select i1 %394, i64 %385, i64 %393
  %396 = icmp eq i64 %395, 0
  br i1 %396, label %416, label %397

397:                                              ; preds = %392, %389
  %398 = phi i64 [ %395, %392 ], [ 2147483647, %389 ]
  %399 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 5, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %400 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %399, align 8
  %401 = add nuw nsw i64 %398, 7
  %402 = and i64 %401, -8
  %403 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %400, i64 0, i32 2
  %404 = load i64, i64* %403, align 8
  %405 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %400, i64 0, i32 3
  %406 = load i64, i64* %405, align 8
  %407 = sub i64 %406, %404
  %408 = icmp ugt i64 %402, %407
  br i1 %408, label %409, label %411, !prof !2

409:                                              ; preds = %397
  %410 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %400, i64 %402) #6
  br label %413

411:                                              ; preds = %397
  %412 = add i64 %404, %402
  store i64 %412, i64* %403, align 8
  br label %413

413:                                              ; preds = %411, %409
  %414 = phi i64 [ %410, %409 ], [ %404, %411 ]
  %415 = inttoptr i64 %414 to i8*
  br label %416

416:                                              ; preds = %413, %392
  %417 = phi i64 [ %398, %413 ], [ 0, %392 ]
  %418 = phi i8* [ %415, %413 ], [ null, %392 ]
  %419 = getelementptr inbounds i8, i8* %418, i64 %384
  %420 = getelementptr inbounds i8, i8* %418, i64 %417
  %421 = ptrtoint i8* %420 to i64
  store i8 %374, i8* %419, align 1
  %422 = getelementptr inbounds i8, i8* %419, i64 1
  %423 = ptrtoint i8* %422 to i64
  %424 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %193, i64 0, i32 0, i32 0
  %425 = load i8*, i8** %424, align 8
  %426 = load i8*, i8** %194, align 8
  %427 = ptrtoint i8* %426 to i64
  %428 = icmp eq i8* %426, %425
  br i1 %428, label %539, label %429

429:                                              ; preds = %416
  %430 = ptrtoint i8* %425 to i64
  %431 = ptrtoint i8* %426 to i64
  %432 = sub i64 %431, %430
  %433 = icmp ult i64 %432, 16
  br i1 %433, label %529, label %434

434:                                              ; preds = %429
  %435 = sub i64 %371, %427
  %436 = sub i64 %435, %383
  %437 = getelementptr i8, i8* %425, i64 %436
  %438 = ptrtoint i8* %437 to i64
  %439 = getelementptr i8, i8* %418, i64 %438
  %440 = icmp ult i8* %439, %426
  %441 = icmp ult i8* %425, %419
  %442 = and i1 %440, %441
  br i1 %442, label %529, label %443

443:                                              ; preds = %434
  %444 = and i64 %432, -16
  %445 = sub i64 0, %444
  %446 = getelementptr i8, i8* %419, i64 %445
  %447 = sub i64 0, %444
  %448 = getelementptr i8, i8* %426, i64 %447
  %449 = add i64 %444, -16
  %450 = lshr exact i64 %449, 4
  %451 = add nuw nsw i64 %450, 1
  %452 = and i64 %451, 3
  %453 = icmp ult i64 %449, 48
  br i1 %453, label %506, label %454

454:                                              ; preds = %443
  %455 = sub nsw i64 %451, %452
  %456 = getelementptr i8, i8* %419, i64 -1
  %457 = getelementptr inbounds i8, i8* %456, i64 -8
  %458 = getelementptr inbounds i8, i8* %426, i64 -16
  %459 = getelementptr inbounds i8, i8* %457, i64 -7
  %460 = getelementptr i8, i8* %419, i64 -1
  %461 = getelementptr inbounds i8, i8* %460, i64 -8
  %462 = getelementptr inbounds i8, i8* %426, i64 -16
  %463 = getelementptr inbounds i8, i8* %461, i64 -7
  %464 = getelementptr i8, i8* %419, i64 -1
  %465 = getelementptr inbounds i8, i8* %464, i64 -8
  %466 = getelementptr inbounds i8, i8* %426, i64 -16
  %467 = getelementptr inbounds i8, i8* %465, i64 -7
  %468 = getelementptr i8, i8* %419, i64 -1
  %469 = getelementptr inbounds i8, i8* %468, i64 -8
  %470 = getelementptr inbounds i8, i8* %426, i64 -16
  %471 = getelementptr inbounds i8, i8* %469, i64 -7
  br label %472

472:                                              ; preds = %472, %454
  %473 = phi i64 [ 0, %454 ], [ %503, %472 ]
  %474 = phi i64 [ %455, %454 ], [ %504, %472 ]
  %475 = sub i64 0, %473
  %476 = sub i64 0, %473
  %477 = getelementptr inbounds i8, i8* %458, i64 %476
  %478 = bitcast i8* %477 to <2 x i64>*
  %479 = load <2 x i64>, <2 x i64>* %478, align 1, !alias.scope !110
  %480 = getelementptr inbounds i8, i8* %459, i64 %475
  %481 = bitcast i8* %480 to <2 x i64>*
  store <2 x i64> %479, <2 x i64>* %481, align 1, !alias.scope !113, !noalias !110
  %482 = sub nuw nsw i64 -16, %473
  %483 = sub nuw nsw i64 -16, %473
  %484 = getelementptr inbounds i8, i8* %462, i64 %483
  %485 = bitcast i8* %484 to <2 x i64>*
  %486 = load <2 x i64>, <2 x i64>* %485, align 1, !alias.scope !110
  %487 = getelementptr inbounds i8, i8* %463, i64 %482
  %488 = bitcast i8* %487 to <2 x i64>*
  store <2 x i64> %486, <2 x i64>* %488, align 1, !alias.scope !113, !noalias !110
  %489 = sub nuw nsw i64 -32, %473
  %490 = sub nuw nsw i64 -32, %473
  %491 = getelementptr inbounds i8, i8* %466, i64 %490
  %492 = bitcast i8* %491 to <2 x i64>*
  %493 = load <2 x i64>, <2 x i64>* %492, align 1, !alias.scope !110
  %494 = getelementptr inbounds i8, i8* %467, i64 %489
  %495 = bitcast i8* %494 to <2 x i64>*
  store <2 x i64> %493, <2 x i64>* %495, align 1, !alias.scope !113, !noalias !110
  %496 = sub nuw nsw i64 -48, %473
  %497 = sub nuw nsw i64 -48, %473
  %498 = getelementptr inbounds i8, i8* %470, i64 %497
  %499 = bitcast i8* %498 to <2 x i64>*
  %500 = load <2 x i64>, <2 x i64>* %499, align 1, !alias.scope !110
  %501 = getelementptr inbounds i8, i8* %471, i64 %496
  %502 = bitcast i8* %501 to <2 x i64>*
  store <2 x i64> %500, <2 x i64>* %502, align 1, !alias.scope !113, !noalias !110
  %503 = add i64 %473, 64
  %504 = add i64 %474, -4
  %505 = icmp eq i64 %504, 0
  br i1 %505, label %506, label %472, !llvm.loop !115

506:                                              ; preds = %472, %443
  %507 = phi i64 [ 0, %443 ], [ %503, %472 ]
  %508 = icmp eq i64 %452, 0
  br i1 %508, label %527, label %509

509:                                              ; preds = %506
  %510 = getelementptr i8, i8* %419, i64 -1
  %511 = getelementptr inbounds i8, i8* %510, i64 -8
  %512 = getelementptr inbounds i8, i8* %426, i64 -16
  %513 = getelementptr inbounds i8, i8* %511, i64 -7
  br label %514

514:                                              ; preds = %514, %509
  %515 = phi i64 [ %507, %509 ], [ %524, %514 ]
  %516 = phi i64 [ %452, %509 ], [ %525, %514 ]
  %517 = sub i64 0, %515
  %518 = sub i64 0, %515
  %519 = getelementptr inbounds i8, i8* %512, i64 %518
  %520 = bitcast i8* %519 to <2 x i64>*
  %521 = load <2 x i64>, <2 x i64>* %520, align 1, !alias.scope !110
  %522 = getelementptr inbounds i8, i8* %513, i64 %517
  %523 = bitcast i8* %522 to <2 x i64>*
  store <2 x i64> %521, <2 x i64>* %523, align 1, !alias.scope !113, !noalias !110
  %524 = add i64 %515, 16
  %525 = add i64 %516, -1
  %526 = icmp eq i64 %525, 0
  br i1 %526, label %527, label %514, !llvm.loop !116

527:                                              ; preds = %514, %506
  %528 = icmp eq i64 %432, %444
  br i1 %528, label %539, label %529

529:                                              ; preds = %527, %434, %429
  %530 = phi i8* [ %419, %434 ], [ %419, %429 ], [ %446, %527 ]
  %531 = phi i8* [ %426, %434 ], [ %426, %429 ], [ %448, %527 ]
  br label %532

532:                                              ; preds = %529, %532
  %533 = phi i8* [ %535, %532 ], [ %530, %529 ]
  %534 = phi i8* [ %536, %532 ], [ %531, %529 ]
  %535 = getelementptr inbounds i8, i8* %533, i64 -1
  %536 = getelementptr inbounds i8, i8* %534, i64 -1
  %537 = load i8, i8* %536, align 1
  store i8 %537, i8* %535, align 1
  %538 = icmp eq i8* %536, %425
  br i1 %538, label %539, label %532, !llvm.loop !117

539:                                              ; preds = %532, %527, %416
  %540 = phi i8* [ %419, %416 ], [ %446, %527 ], [ %535, %532 ]
  %541 = ptrtoint i8* %540 to i64
  store i64 %541, i64* %382, align 8
  store i64 %423, i64* %381, align 8
  store i64 %421, i64* %390, align 8
  br label %902

542:                                              ; preds = %190
  %543 = icmp ult i32 %9, 65536
  %544 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 5, i32 0
  %545 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 5, i32 0, i32 0, i32 1
  %546 = load i8*, i8** %545, align 8
  %547 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 5, i32 0, i32 0, i32 2, i32 0, i32 0
  %548 = load i8*, i8** %547, align 8
  %549 = icmp eq i8* %546, %548
  %550 = ptrtoint i8* %548 to i64
  br i1 %543, label %551, label %727

551:                                              ; preds = %542
  br i1 %549, label %556, label %552

552:                                              ; preds = %551
  store i8 3, i8* %546, align 1
  %553 = getelementptr inbounds i8, i8* %546, i64 1
  %554 = ptrtoint i8* %553 to i64
  %555 = bitcast i8** %545 to i64*
  store i64 %554, i64* %555, align 8
  br label %720

556:                                              ; preds = %551
  %557 = ptrtoint i8* %546 to i64
  %558 = bitcast i8** %545 to i64*
  %559 = bitcast %"class.std::__1::vector"* %544 to i64*
  %560 = load i64, i64* %559, align 8
  %561 = sub i64 %557, %560
  %562 = add i64 %561, 1
  %563 = icmp ugt i64 %562, 2147483647
  br i1 %563, label %564, label %566

564:                                              ; preds = %556
  %565 = bitcast %"class.std::__1::vector"* %544 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %565) #7
  unreachable

566:                                              ; preds = %556
  %567 = bitcast i8** %547 to i64*
  %568 = sub i64 %550, %560
  %569 = icmp ult i64 %568, 1073741823
  br i1 %569, label %570, label %575

570:                                              ; preds = %566
  %571 = shl i64 %568, 1
  %572 = icmp ult i64 %571, %562
  %573 = select i1 %572, i64 %562, i64 %571
  %574 = icmp eq i64 %573, 0
  br i1 %574, label %594, label %575

575:                                              ; preds = %570, %566
  %576 = phi i64 [ %573, %570 ], [ 2147483647, %566 ]
  %577 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 5, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %578 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %577, align 8
  %579 = add nuw nsw i64 %576, 7
  %580 = and i64 %579, -8
  %581 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %578, i64 0, i32 2
  %582 = load i64, i64* %581, align 8
  %583 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %578, i64 0, i32 3
  %584 = load i64, i64* %583, align 8
  %585 = sub i64 %584, %582
  %586 = icmp ugt i64 %580, %585
  br i1 %586, label %587, label %589, !prof !2

587:                                              ; preds = %575
  %588 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %578, i64 %580) #6
  br label %591

589:                                              ; preds = %575
  %590 = add i64 %582, %580
  store i64 %590, i64* %581, align 8
  br label %591

591:                                              ; preds = %589, %587
  %592 = phi i64 [ %588, %587 ], [ %582, %589 ]
  %593 = inttoptr i64 %592 to i8*
  br label %594

594:                                              ; preds = %591, %570
  %595 = phi i64 [ %576, %591 ], [ 0, %570 ]
  %596 = phi i8* [ %593, %591 ], [ null, %570 ]
  %597 = getelementptr inbounds i8, i8* %596, i64 %561
  %598 = getelementptr inbounds i8, i8* %596, i64 %595
  %599 = ptrtoint i8* %598 to i64
  store i8 3, i8* %597, align 1
  %600 = getelementptr inbounds i8, i8* %597, i64 1
  %601 = ptrtoint i8* %600 to i64
  %602 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %544, i64 0, i32 0, i32 0
  %603 = load i8*, i8** %602, align 8
  %604 = load i8*, i8** %545, align 8
  %605 = ptrtoint i8* %604 to i64
  %606 = icmp eq i8* %604, %603
  br i1 %606, label %717, label %607

607:                                              ; preds = %594
  %608 = ptrtoint i8* %603 to i64
  %609 = ptrtoint i8* %604 to i64
  %610 = sub i64 %609, %608
  %611 = icmp ult i64 %610, 16
  br i1 %611, label %707, label %612

612:                                              ; preds = %607
  %613 = sub i64 %557, %605
  %614 = sub i64 %613, %560
  %615 = getelementptr i8, i8* %603, i64 %614
  %616 = ptrtoint i8* %615 to i64
  %617 = getelementptr i8, i8* %596, i64 %616
  %618 = icmp ult i8* %617, %604
  %619 = icmp ult i8* %603, %597
  %620 = and i1 %618, %619
  br i1 %620, label %707, label %621

621:                                              ; preds = %612
  %622 = and i64 %610, -16
  %623 = sub i64 0, %622
  %624 = getelementptr i8, i8* %597, i64 %623
  %625 = sub i64 0, %622
  %626 = getelementptr i8, i8* %604, i64 %625
  %627 = add i64 %622, -16
  %628 = lshr exact i64 %627, 4
  %629 = add nuw nsw i64 %628, 1
  %630 = and i64 %629, 3
  %631 = icmp ult i64 %627, 48
  br i1 %631, label %684, label %632

632:                                              ; preds = %621
  %633 = sub nsw i64 %629, %630
  %634 = getelementptr i8, i8* %597, i64 -1
  %635 = getelementptr inbounds i8, i8* %634, i64 -8
  %636 = getelementptr inbounds i8, i8* %604, i64 -16
  %637 = getelementptr inbounds i8, i8* %635, i64 -7
  %638 = getelementptr i8, i8* %597, i64 -1
  %639 = getelementptr inbounds i8, i8* %638, i64 -8
  %640 = getelementptr inbounds i8, i8* %604, i64 -16
  %641 = getelementptr inbounds i8, i8* %639, i64 -7
  %642 = getelementptr i8, i8* %597, i64 -1
  %643 = getelementptr inbounds i8, i8* %642, i64 -8
  %644 = getelementptr inbounds i8, i8* %604, i64 -16
  %645 = getelementptr inbounds i8, i8* %643, i64 -7
  %646 = getelementptr i8, i8* %597, i64 -1
  %647 = getelementptr inbounds i8, i8* %646, i64 -8
  %648 = getelementptr inbounds i8, i8* %604, i64 -16
  %649 = getelementptr inbounds i8, i8* %647, i64 -7
  br label %650

650:                                              ; preds = %650, %632
  %651 = phi i64 [ 0, %632 ], [ %681, %650 ]
  %652 = phi i64 [ %633, %632 ], [ %682, %650 ]
  %653 = sub i64 0, %651
  %654 = sub i64 0, %651
  %655 = getelementptr inbounds i8, i8* %636, i64 %654
  %656 = bitcast i8* %655 to <2 x i64>*
  %657 = load <2 x i64>, <2 x i64>* %656, align 1, !alias.scope !118
  %658 = getelementptr inbounds i8, i8* %637, i64 %653
  %659 = bitcast i8* %658 to <2 x i64>*
  store <2 x i64> %657, <2 x i64>* %659, align 1, !alias.scope !121, !noalias !118
  %660 = sub nuw nsw i64 -16, %651
  %661 = sub nuw nsw i64 -16, %651
  %662 = getelementptr inbounds i8, i8* %640, i64 %661
  %663 = bitcast i8* %662 to <2 x i64>*
  %664 = load <2 x i64>, <2 x i64>* %663, align 1, !alias.scope !118
  %665 = getelementptr inbounds i8, i8* %641, i64 %660
  %666 = bitcast i8* %665 to <2 x i64>*
  store <2 x i64> %664, <2 x i64>* %666, align 1, !alias.scope !121, !noalias !118
  %667 = sub nuw nsw i64 -32, %651
  %668 = sub nuw nsw i64 -32, %651
  %669 = getelementptr inbounds i8, i8* %644, i64 %668
  %670 = bitcast i8* %669 to <2 x i64>*
  %671 = load <2 x i64>, <2 x i64>* %670, align 1, !alias.scope !118
  %672 = getelementptr inbounds i8, i8* %645, i64 %667
  %673 = bitcast i8* %672 to <2 x i64>*
  store <2 x i64> %671, <2 x i64>* %673, align 1, !alias.scope !121, !noalias !118
  %674 = sub nuw nsw i64 -48, %651
  %675 = sub nuw nsw i64 -48, %651
  %676 = getelementptr inbounds i8, i8* %648, i64 %675
  %677 = bitcast i8* %676 to <2 x i64>*
  %678 = load <2 x i64>, <2 x i64>* %677, align 1, !alias.scope !118
  %679 = getelementptr inbounds i8, i8* %649, i64 %674
  %680 = bitcast i8* %679 to <2 x i64>*
  store <2 x i64> %678, <2 x i64>* %680, align 1, !alias.scope !121, !noalias !118
  %681 = add i64 %651, 64
  %682 = add i64 %652, -4
  %683 = icmp eq i64 %682, 0
  br i1 %683, label %684, label %650, !llvm.loop !123

684:                                              ; preds = %650, %621
  %685 = phi i64 [ 0, %621 ], [ %681, %650 ]
  %686 = icmp eq i64 %630, 0
  br i1 %686, label %705, label %687

687:                                              ; preds = %684
  %688 = getelementptr i8, i8* %597, i64 -1
  %689 = getelementptr inbounds i8, i8* %688, i64 -8
  %690 = getelementptr inbounds i8, i8* %604, i64 -16
  %691 = getelementptr inbounds i8, i8* %689, i64 -7
  br label %692

692:                                              ; preds = %692, %687
  %693 = phi i64 [ %685, %687 ], [ %702, %692 ]
  %694 = phi i64 [ %630, %687 ], [ %703, %692 ]
  %695 = sub i64 0, %693
  %696 = sub i64 0, %693
  %697 = getelementptr inbounds i8, i8* %690, i64 %696
  %698 = bitcast i8* %697 to <2 x i64>*
  %699 = load <2 x i64>, <2 x i64>* %698, align 1, !alias.scope !118
  %700 = getelementptr inbounds i8, i8* %691, i64 %695
  %701 = bitcast i8* %700 to <2 x i64>*
  store <2 x i64> %699, <2 x i64>* %701, align 1, !alias.scope !121, !noalias !118
  %702 = add i64 %693, 16
  %703 = add i64 %694, -1
  %704 = icmp eq i64 %703, 0
  br i1 %704, label %705, label %692, !llvm.loop !124

705:                                              ; preds = %692, %684
  %706 = icmp eq i64 %610, %622
  br i1 %706, label %717, label %707

707:                                              ; preds = %705, %612, %607
  %708 = phi i8* [ %597, %612 ], [ %597, %607 ], [ %624, %705 ]
  %709 = phi i8* [ %604, %612 ], [ %604, %607 ], [ %626, %705 ]
  br label %710

710:                                              ; preds = %707, %710
  %711 = phi i8* [ %713, %710 ], [ %708, %707 ]
  %712 = phi i8* [ %714, %710 ], [ %709, %707 ]
  %713 = getelementptr inbounds i8, i8* %711, i64 -1
  %714 = getelementptr inbounds i8, i8* %712, i64 -1
  %715 = load i8, i8* %714, align 1
  store i8 %715, i8* %713, align 1
  %716 = icmp eq i8* %714, %603
  br i1 %716, label %717, label %710, !llvm.loop !125

717:                                              ; preds = %710, %705, %594
  %718 = phi i8* [ %597, %594 ], [ %624, %705 ], [ %713, %710 ]
  %719 = ptrtoint i8* %718 to i64
  store i64 %719, i64* %559, align 8
  store i64 %601, i64* %558, align 8
  store i64 %599, i64* %567, align 8
  br label %720

720:                                              ; preds = %552, %717
  %721 = phi i8* [ %553, %552 ], [ %600, %717 ]
  %722 = trunc i32 %9 to i16
  %723 = bitcast i16* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %723)
  store i16 %722, i16* %4, align 2
  %724 = getelementptr inbounds i16, i16* %4, i64 1
  %725 = bitcast i16* %724 to i8*
  %726 = call i8* @_ZNSt3__16vectorIhN2v88internal13ZoneAllocatorIhEEE6insertIPKhEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsISA_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSE_IS8_EESA_SA_(%"class.std::__1::vector"* %544, i8* %721, i8* nonnull %723, i8* %725) #6
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %723)
  br label %902

727:                                              ; preds = %542
  br i1 %549, label %732, label %728

728:                                              ; preds = %727
  store i8 4, i8* %546, align 1
  %729 = getelementptr inbounds i8, i8* %546, i64 1
  %730 = ptrtoint i8* %729 to i64
  %731 = bitcast i8** %545 to i64*
  store i64 %730, i64* %731, align 8
  br label %896

732:                                              ; preds = %727
  %733 = ptrtoint i8* %546 to i64
  %734 = bitcast i8** %545 to i64*
  %735 = bitcast %"class.std::__1::vector"* %544 to i64*
  %736 = load i64, i64* %735, align 8
  %737 = sub i64 %733, %736
  %738 = add i64 %737, 1
  %739 = icmp ugt i64 %738, 2147483647
  br i1 %739, label %740, label %742

740:                                              ; preds = %732
  %741 = bitcast %"class.std::__1::vector"* %544 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %741) #7
  unreachable

742:                                              ; preds = %732
  %743 = bitcast i8** %547 to i64*
  %744 = sub i64 %550, %736
  %745 = icmp ult i64 %744, 1073741823
  br i1 %745, label %746, label %751

746:                                              ; preds = %742
  %747 = shl i64 %744, 1
  %748 = icmp ult i64 %747, %738
  %749 = select i1 %748, i64 %738, i64 %747
  %750 = icmp eq i64 %749, 0
  br i1 %750, label %770, label %751

751:                                              ; preds = %746, %742
  %752 = phi i64 [ %749, %746 ], [ 2147483647, %742 ]
  %753 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 5, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %754 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %753, align 8
  %755 = add nuw nsw i64 %752, 7
  %756 = and i64 %755, -8
  %757 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %754, i64 0, i32 2
  %758 = load i64, i64* %757, align 8
  %759 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %754, i64 0, i32 3
  %760 = load i64, i64* %759, align 8
  %761 = sub i64 %760, %758
  %762 = icmp ugt i64 %756, %761
  br i1 %762, label %763, label %765, !prof !2

763:                                              ; preds = %751
  %764 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %754, i64 %756) #6
  br label %767

765:                                              ; preds = %751
  %766 = add i64 %758, %756
  store i64 %766, i64* %757, align 8
  br label %767

767:                                              ; preds = %765, %763
  %768 = phi i64 [ %764, %763 ], [ %758, %765 ]
  %769 = inttoptr i64 %768 to i8*
  br label %770

770:                                              ; preds = %767, %746
  %771 = phi i64 [ %752, %767 ], [ 0, %746 ]
  %772 = phi i8* [ %769, %767 ], [ null, %746 ]
  %773 = getelementptr inbounds i8, i8* %772, i64 %737
  %774 = getelementptr inbounds i8, i8* %772, i64 %771
  %775 = ptrtoint i8* %774 to i64
  store i8 4, i8* %773, align 1
  %776 = getelementptr inbounds i8, i8* %773, i64 1
  %777 = ptrtoint i8* %776 to i64
  %778 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %544, i64 0, i32 0, i32 0
  %779 = load i8*, i8** %778, align 8
  %780 = load i8*, i8** %545, align 8
  %781 = ptrtoint i8* %780 to i64
  %782 = icmp eq i8* %780, %779
  br i1 %782, label %893, label %783

783:                                              ; preds = %770
  %784 = ptrtoint i8* %779 to i64
  %785 = ptrtoint i8* %780 to i64
  %786 = sub i64 %785, %784
  %787 = icmp ult i64 %786, 16
  br i1 %787, label %883, label %788

788:                                              ; preds = %783
  %789 = sub i64 %733, %781
  %790 = sub i64 %789, %736
  %791 = getelementptr i8, i8* %779, i64 %790
  %792 = ptrtoint i8* %791 to i64
  %793 = getelementptr i8, i8* %772, i64 %792
  %794 = icmp ult i8* %793, %780
  %795 = icmp ult i8* %779, %773
  %796 = and i1 %794, %795
  br i1 %796, label %883, label %797

797:                                              ; preds = %788
  %798 = and i64 %786, -16
  %799 = sub i64 0, %798
  %800 = getelementptr i8, i8* %773, i64 %799
  %801 = sub i64 0, %798
  %802 = getelementptr i8, i8* %780, i64 %801
  %803 = add i64 %798, -16
  %804 = lshr exact i64 %803, 4
  %805 = add nuw nsw i64 %804, 1
  %806 = and i64 %805, 3
  %807 = icmp ult i64 %803, 48
  br i1 %807, label %860, label %808

808:                                              ; preds = %797
  %809 = sub nsw i64 %805, %806
  %810 = getelementptr i8, i8* %773, i64 -1
  %811 = getelementptr inbounds i8, i8* %810, i64 -8
  %812 = getelementptr inbounds i8, i8* %780, i64 -16
  %813 = getelementptr inbounds i8, i8* %811, i64 -7
  %814 = getelementptr i8, i8* %773, i64 -1
  %815 = getelementptr inbounds i8, i8* %814, i64 -8
  %816 = getelementptr inbounds i8, i8* %780, i64 -16
  %817 = getelementptr inbounds i8, i8* %815, i64 -7
  %818 = getelementptr i8, i8* %773, i64 -1
  %819 = getelementptr inbounds i8, i8* %818, i64 -8
  %820 = getelementptr inbounds i8, i8* %780, i64 -16
  %821 = getelementptr inbounds i8, i8* %819, i64 -7
  %822 = getelementptr i8, i8* %773, i64 -1
  %823 = getelementptr inbounds i8, i8* %822, i64 -8
  %824 = getelementptr inbounds i8, i8* %780, i64 -16
  %825 = getelementptr inbounds i8, i8* %823, i64 -7
  br label %826

826:                                              ; preds = %826, %808
  %827 = phi i64 [ 0, %808 ], [ %857, %826 ]
  %828 = phi i64 [ %809, %808 ], [ %858, %826 ]
  %829 = sub i64 0, %827
  %830 = sub i64 0, %827
  %831 = getelementptr inbounds i8, i8* %812, i64 %830
  %832 = bitcast i8* %831 to <2 x i64>*
  %833 = load <2 x i64>, <2 x i64>* %832, align 1, !alias.scope !126
  %834 = getelementptr inbounds i8, i8* %813, i64 %829
  %835 = bitcast i8* %834 to <2 x i64>*
  store <2 x i64> %833, <2 x i64>* %835, align 1, !alias.scope !129, !noalias !126
  %836 = sub nuw nsw i64 -16, %827
  %837 = sub nuw nsw i64 -16, %827
  %838 = getelementptr inbounds i8, i8* %816, i64 %837
  %839 = bitcast i8* %838 to <2 x i64>*
  %840 = load <2 x i64>, <2 x i64>* %839, align 1, !alias.scope !126
  %841 = getelementptr inbounds i8, i8* %817, i64 %836
  %842 = bitcast i8* %841 to <2 x i64>*
  store <2 x i64> %840, <2 x i64>* %842, align 1, !alias.scope !129, !noalias !126
  %843 = sub nuw nsw i64 -32, %827
  %844 = sub nuw nsw i64 -32, %827
  %845 = getelementptr inbounds i8, i8* %820, i64 %844
  %846 = bitcast i8* %845 to <2 x i64>*
  %847 = load <2 x i64>, <2 x i64>* %846, align 1, !alias.scope !126
  %848 = getelementptr inbounds i8, i8* %821, i64 %843
  %849 = bitcast i8* %848 to <2 x i64>*
  store <2 x i64> %847, <2 x i64>* %849, align 1, !alias.scope !129, !noalias !126
  %850 = sub nuw nsw i64 -48, %827
  %851 = sub nuw nsw i64 -48, %827
  %852 = getelementptr inbounds i8, i8* %824, i64 %851
  %853 = bitcast i8* %852 to <2 x i64>*
  %854 = load <2 x i64>, <2 x i64>* %853, align 1, !alias.scope !126
  %855 = getelementptr inbounds i8, i8* %825, i64 %850
  %856 = bitcast i8* %855 to <2 x i64>*
  store <2 x i64> %854, <2 x i64>* %856, align 1, !alias.scope !129, !noalias !126
  %857 = add i64 %827, 64
  %858 = add i64 %828, -4
  %859 = icmp eq i64 %858, 0
  br i1 %859, label %860, label %826, !llvm.loop !131

860:                                              ; preds = %826, %797
  %861 = phi i64 [ 0, %797 ], [ %857, %826 ]
  %862 = icmp eq i64 %806, 0
  br i1 %862, label %881, label %863

863:                                              ; preds = %860
  %864 = getelementptr i8, i8* %773, i64 -1
  %865 = getelementptr inbounds i8, i8* %864, i64 -8
  %866 = getelementptr inbounds i8, i8* %780, i64 -16
  %867 = getelementptr inbounds i8, i8* %865, i64 -7
  br label %868

868:                                              ; preds = %868, %863
  %869 = phi i64 [ %861, %863 ], [ %878, %868 ]
  %870 = phi i64 [ %806, %863 ], [ %879, %868 ]
  %871 = sub i64 0, %869
  %872 = sub i64 0, %869
  %873 = getelementptr inbounds i8, i8* %866, i64 %872
  %874 = bitcast i8* %873 to <2 x i64>*
  %875 = load <2 x i64>, <2 x i64>* %874, align 1, !alias.scope !126
  %876 = getelementptr inbounds i8, i8* %867, i64 %871
  %877 = bitcast i8* %876 to <2 x i64>*
  store <2 x i64> %875, <2 x i64>* %877, align 1, !alias.scope !129, !noalias !126
  %878 = add i64 %869, 16
  %879 = add i64 %870, -1
  %880 = icmp eq i64 %879, 0
  br i1 %880, label %881, label %868, !llvm.loop !132

881:                                              ; preds = %868, %860
  %882 = icmp eq i64 %786, %798
  br i1 %882, label %893, label %883

883:                                              ; preds = %881, %788, %783
  %884 = phi i8* [ %773, %788 ], [ %773, %783 ], [ %800, %881 ]
  %885 = phi i8* [ %780, %788 ], [ %780, %783 ], [ %802, %881 ]
  br label %886

886:                                              ; preds = %883, %886
  %887 = phi i8* [ %889, %886 ], [ %884, %883 ]
  %888 = phi i8* [ %890, %886 ], [ %885, %883 ]
  %889 = getelementptr inbounds i8, i8* %887, i64 -1
  %890 = getelementptr inbounds i8, i8* %888, i64 -1
  %891 = load i8, i8* %890, align 1
  store i8 %891, i8* %889, align 1
  %892 = icmp eq i8* %890, %779
  br i1 %892, label %893, label %886, !llvm.loop !133

893:                                              ; preds = %886, %881, %770
  %894 = phi i8* [ %773, %770 ], [ %800, %881 ], [ %889, %886 ]
  %895 = ptrtoint i8* %894 to i64
  store i64 %895, i64* %735, align 8
  store i64 %777, i64* %734, align 8
  store i64 %775, i64* %743, align 8
  br label %896

896:                                              ; preds = %728, %893
  %897 = phi i8* [ %729, %728 ], [ %776, %893 ]
  %898 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %898)
  store i32 %9, i32* %3, align 4
  %899 = getelementptr inbounds i32, i32* %3, i64 1
  %900 = bitcast i32* %899 to i8*
  %901 = call i8* @_ZNSt3__16vectorIhN2v88internal13ZoneAllocatorIhEEE6insertIPKhEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsISA_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSE_IS8_EESA_SA_(%"class.std::__1::vector"* %544, i8* %897, i8* nonnull %898, i8* %900) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %898)
  br label %902

902:                                              ; preds = %539, %376, %187, %22, %896, %720
  store i32 %1, i32* %5, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal13EhFrameWriter20SetBaseAddressOffsetEi(%"class.v8::internal::EhFrameWriter"*, i32) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 5, i32 0
  %4 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 5, i32 0, i32 0, i32 1
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 5, i32 0, i32 0, i32 2, i32 0, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = icmp eq i8* %5, %7
  %9 = ptrtoint i8* %7 to i64
  br i1 %8, label %14, label %10

10:                                               ; preds = %2
  store i8 14, i8* %5, align 1
  %11 = getelementptr inbounds i8, i8* %5, i64 1
  %12 = ptrtoint i8* %11 to i64
  %13 = bitcast i8** %4 to i64*
  store i64 %12, i64* %13, align 8
  br label %178

14:                                               ; preds = %2
  %15 = ptrtoint i8* %5 to i64
  %16 = bitcast i8** %4 to i64*
  %17 = bitcast %"class.std::__1::vector"* %3 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = sub i64 %15, %18
  %20 = add i64 %19, 1
  %21 = icmp ugt i64 %20, 2147483647
  br i1 %21, label %22, label %24

22:                                               ; preds = %14
  %23 = bitcast %"class.std::__1::vector"* %3 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %23) #7
  unreachable

24:                                               ; preds = %14
  %25 = bitcast i8** %6 to i64*
  %26 = sub i64 %9, %18
  %27 = icmp ult i64 %26, 1073741823
  br i1 %27, label %28, label %33

28:                                               ; preds = %24
  %29 = shl i64 %26, 1
  %30 = icmp ult i64 %29, %20
  %31 = select i1 %30, i64 %20, i64 %29
  %32 = icmp eq i64 %31, 0
  br i1 %32, label %52, label %33

33:                                               ; preds = %28, %24
  %34 = phi i64 [ %31, %28 ], [ 2147483647, %24 ]
  %35 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 5, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %36 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %35, align 8
  %37 = add nuw nsw i64 %34, 7
  %38 = and i64 %37, -8
  %39 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %36, i64 0, i32 2
  %40 = load i64, i64* %39, align 8
  %41 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %36, i64 0, i32 3
  %42 = load i64, i64* %41, align 8
  %43 = sub i64 %42, %40
  %44 = icmp ugt i64 %38, %43
  br i1 %44, label %45, label %47, !prof !2

45:                                               ; preds = %33
  %46 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %36, i64 %38) #6
  br label %49

47:                                               ; preds = %33
  %48 = add i64 %40, %38
  store i64 %48, i64* %39, align 8
  br label %49

49:                                               ; preds = %47, %45
  %50 = phi i64 [ %46, %45 ], [ %40, %47 ]
  %51 = inttoptr i64 %50 to i8*
  br label %52

52:                                               ; preds = %49, %28
  %53 = phi i64 [ %34, %49 ], [ 0, %28 ]
  %54 = phi i8* [ %51, %49 ], [ null, %28 ]
  %55 = getelementptr inbounds i8, i8* %54, i64 %19
  %56 = getelementptr inbounds i8, i8* %54, i64 %53
  %57 = ptrtoint i8* %56 to i64
  store i8 14, i8* %55, align 1
  %58 = getelementptr inbounds i8, i8* %55, i64 1
  %59 = ptrtoint i8* %58 to i64
  %60 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 0, i32 0
  %61 = load i8*, i8** %60, align 8
  %62 = load i8*, i8** %4, align 8
  %63 = ptrtoint i8* %62 to i64
  %64 = icmp eq i8* %62, %61
  br i1 %64, label %175, label %65

65:                                               ; preds = %52
  %66 = ptrtoint i8* %61 to i64
  %67 = ptrtoint i8* %62 to i64
  %68 = sub i64 %67, %66
  %69 = icmp ult i64 %68, 16
  br i1 %69, label %165, label %70

70:                                               ; preds = %65
  %71 = sub i64 %15, %63
  %72 = sub i64 %71, %18
  %73 = getelementptr i8, i8* %61, i64 %72
  %74 = ptrtoint i8* %73 to i64
  %75 = getelementptr i8, i8* %54, i64 %74
  %76 = icmp ult i8* %75, %62
  %77 = icmp ult i8* %61, %55
  %78 = and i1 %76, %77
  br i1 %78, label %165, label %79

79:                                               ; preds = %70
  %80 = and i64 %68, -16
  %81 = sub i64 0, %80
  %82 = getelementptr i8, i8* %55, i64 %81
  %83 = sub i64 0, %80
  %84 = getelementptr i8, i8* %62, i64 %83
  %85 = add i64 %80, -16
  %86 = lshr exact i64 %85, 4
  %87 = add nuw nsw i64 %86, 1
  %88 = and i64 %87, 3
  %89 = icmp ult i64 %85, 48
  br i1 %89, label %142, label %90

90:                                               ; preds = %79
  %91 = sub nsw i64 %87, %88
  %92 = getelementptr i8, i8* %55, i64 -1
  %93 = getelementptr inbounds i8, i8* %92, i64 -8
  %94 = getelementptr inbounds i8, i8* %62, i64 -16
  %95 = getelementptr inbounds i8, i8* %93, i64 -7
  %96 = getelementptr i8, i8* %55, i64 -1
  %97 = getelementptr inbounds i8, i8* %96, i64 -8
  %98 = getelementptr inbounds i8, i8* %62, i64 -16
  %99 = getelementptr inbounds i8, i8* %97, i64 -7
  %100 = getelementptr i8, i8* %55, i64 -1
  %101 = getelementptr inbounds i8, i8* %100, i64 -8
  %102 = getelementptr inbounds i8, i8* %62, i64 -16
  %103 = getelementptr inbounds i8, i8* %101, i64 -7
  %104 = getelementptr i8, i8* %55, i64 -1
  %105 = getelementptr inbounds i8, i8* %104, i64 -8
  %106 = getelementptr inbounds i8, i8* %62, i64 -16
  %107 = getelementptr inbounds i8, i8* %105, i64 -7
  br label %108

108:                                              ; preds = %108, %90
  %109 = phi i64 [ 0, %90 ], [ %139, %108 ]
  %110 = phi i64 [ %91, %90 ], [ %140, %108 ]
  %111 = sub i64 0, %109
  %112 = sub i64 0, %109
  %113 = getelementptr inbounds i8, i8* %94, i64 %112
  %114 = bitcast i8* %113 to <2 x i64>*
  %115 = load <2 x i64>, <2 x i64>* %114, align 1, !alias.scope !134
  %116 = getelementptr inbounds i8, i8* %95, i64 %111
  %117 = bitcast i8* %116 to <2 x i64>*
  store <2 x i64> %115, <2 x i64>* %117, align 1, !alias.scope !137, !noalias !134
  %118 = sub nuw nsw i64 -16, %109
  %119 = sub nuw nsw i64 -16, %109
  %120 = getelementptr inbounds i8, i8* %98, i64 %119
  %121 = bitcast i8* %120 to <2 x i64>*
  %122 = load <2 x i64>, <2 x i64>* %121, align 1, !alias.scope !134
  %123 = getelementptr inbounds i8, i8* %99, i64 %118
  %124 = bitcast i8* %123 to <2 x i64>*
  store <2 x i64> %122, <2 x i64>* %124, align 1, !alias.scope !137, !noalias !134
  %125 = sub nuw nsw i64 -32, %109
  %126 = sub nuw nsw i64 -32, %109
  %127 = getelementptr inbounds i8, i8* %102, i64 %126
  %128 = bitcast i8* %127 to <2 x i64>*
  %129 = load <2 x i64>, <2 x i64>* %128, align 1, !alias.scope !134
  %130 = getelementptr inbounds i8, i8* %103, i64 %125
  %131 = bitcast i8* %130 to <2 x i64>*
  store <2 x i64> %129, <2 x i64>* %131, align 1, !alias.scope !137, !noalias !134
  %132 = sub nuw nsw i64 -48, %109
  %133 = sub nuw nsw i64 -48, %109
  %134 = getelementptr inbounds i8, i8* %106, i64 %133
  %135 = bitcast i8* %134 to <2 x i64>*
  %136 = load <2 x i64>, <2 x i64>* %135, align 1, !alias.scope !134
  %137 = getelementptr inbounds i8, i8* %107, i64 %132
  %138 = bitcast i8* %137 to <2 x i64>*
  store <2 x i64> %136, <2 x i64>* %138, align 1, !alias.scope !137, !noalias !134
  %139 = add i64 %109, 64
  %140 = add i64 %110, -4
  %141 = icmp eq i64 %140, 0
  br i1 %141, label %142, label %108, !llvm.loop !139

142:                                              ; preds = %108, %79
  %143 = phi i64 [ 0, %79 ], [ %139, %108 ]
  %144 = icmp eq i64 %88, 0
  br i1 %144, label %163, label %145

145:                                              ; preds = %142
  %146 = getelementptr i8, i8* %55, i64 -1
  %147 = getelementptr inbounds i8, i8* %146, i64 -8
  %148 = getelementptr inbounds i8, i8* %62, i64 -16
  %149 = getelementptr inbounds i8, i8* %147, i64 -7
  br label %150

150:                                              ; preds = %150, %145
  %151 = phi i64 [ %143, %145 ], [ %160, %150 ]
  %152 = phi i64 [ %88, %145 ], [ %161, %150 ]
  %153 = sub i64 0, %151
  %154 = sub i64 0, %151
  %155 = getelementptr inbounds i8, i8* %148, i64 %154
  %156 = bitcast i8* %155 to <2 x i64>*
  %157 = load <2 x i64>, <2 x i64>* %156, align 1, !alias.scope !134
  %158 = getelementptr inbounds i8, i8* %149, i64 %153
  %159 = bitcast i8* %158 to <2 x i64>*
  store <2 x i64> %157, <2 x i64>* %159, align 1, !alias.scope !137, !noalias !134
  %160 = add i64 %151, 16
  %161 = add i64 %152, -1
  %162 = icmp eq i64 %161, 0
  br i1 %162, label %163, label %150, !llvm.loop !140

163:                                              ; preds = %150, %142
  %164 = icmp eq i64 %68, %80
  br i1 %164, label %175, label %165

165:                                              ; preds = %163, %70, %65
  %166 = phi i8* [ %55, %70 ], [ %55, %65 ], [ %82, %163 ]
  %167 = phi i8* [ %62, %70 ], [ %62, %65 ], [ %84, %163 ]
  br label %168

168:                                              ; preds = %165, %168
  %169 = phi i8* [ %171, %168 ], [ %166, %165 ]
  %170 = phi i8* [ %172, %168 ], [ %167, %165 ]
  %171 = getelementptr inbounds i8, i8* %169, i64 -1
  %172 = getelementptr inbounds i8, i8* %170, i64 -1
  %173 = load i8, i8* %172, align 1
  store i8 %173, i8* %171, align 1
  %174 = icmp eq i8* %172, %61
  br i1 %174, label %175, label %168, !llvm.loop !141

175:                                              ; preds = %168, %163, %52
  %176 = phi i8* [ %55, %52 ], [ %82, %163 ], [ %171, %168 ]
  %177 = ptrtoint i8* %176 to i64
  store i64 %177, i64* %17, align 8
  store i64 %59, i64* %16, align 8
  store i64 %57, i64* %25, align 8
  br label %178

178:                                              ; preds = %10, %175
  tail call void @_ZN2v88internal13EhFrameWriter12WriteULeb128Ej(%"class.v8::internal::EhFrameWriter"* %0, i32 %1)
  %179 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 4
  store i32 %1, i32* %179, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal13EhFrameWriter22SetBaseAddressRegisterENS0_8RegisterE(%"class.v8::internal::EhFrameWriter"*, i32) local_unnamed_addr #0 align 2 {
  %3 = tail call i32 @_ZN2v88internal13EhFrameWriter19RegisterToDwarfCodeENS0_8RegisterE(i32 %1) #6
  %4 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 5, i32 0
  %5 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 5, i32 0, i32 0, i32 1
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 5, i32 0, i32 0, i32 2, i32 0, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = icmp eq i8* %6, %8
  %10 = ptrtoint i8* %8 to i64
  br i1 %9, label %15, label %11

11:                                               ; preds = %2
  store i8 13, i8* %6, align 1
  %12 = getelementptr inbounds i8, i8* %6, i64 1
  %13 = ptrtoint i8* %12 to i64
  %14 = bitcast i8** %5 to i64*
  store i64 %13, i64* %14, align 8
  br label %179

15:                                               ; preds = %2
  %16 = ptrtoint i8* %6 to i64
  %17 = bitcast i8** %5 to i64*
  %18 = bitcast %"class.std::__1::vector"* %4 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = sub i64 %16, %19
  %21 = add i64 %20, 1
  %22 = icmp ugt i64 %21, 2147483647
  br i1 %22, label %23, label %25

23:                                               ; preds = %15
  %24 = bitcast %"class.std::__1::vector"* %4 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %24) #7
  unreachable

25:                                               ; preds = %15
  %26 = bitcast i8** %7 to i64*
  %27 = sub i64 %10, %19
  %28 = icmp ult i64 %27, 1073741823
  br i1 %28, label %29, label %34

29:                                               ; preds = %25
  %30 = shl i64 %27, 1
  %31 = icmp ult i64 %30, %21
  %32 = select i1 %31, i64 %21, i64 %30
  %33 = icmp eq i64 %32, 0
  br i1 %33, label %53, label %34

34:                                               ; preds = %29, %25
  %35 = phi i64 [ %32, %29 ], [ 2147483647, %25 ]
  %36 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 5, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %37 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %36, align 8
  %38 = add nuw nsw i64 %35, 7
  %39 = and i64 %38, -8
  %40 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %37, i64 0, i32 2
  %41 = load i64, i64* %40, align 8
  %42 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %37, i64 0, i32 3
  %43 = load i64, i64* %42, align 8
  %44 = sub i64 %43, %41
  %45 = icmp ugt i64 %39, %44
  br i1 %45, label %46, label %48, !prof !2

46:                                               ; preds = %34
  %47 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %37, i64 %39) #6
  br label %50

48:                                               ; preds = %34
  %49 = add i64 %41, %39
  store i64 %49, i64* %40, align 8
  br label %50

50:                                               ; preds = %48, %46
  %51 = phi i64 [ %47, %46 ], [ %41, %48 ]
  %52 = inttoptr i64 %51 to i8*
  br label %53

53:                                               ; preds = %50, %29
  %54 = phi i64 [ %35, %50 ], [ 0, %29 ]
  %55 = phi i8* [ %52, %50 ], [ null, %29 ]
  %56 = getelementptr inbounds i8, i8* %55, i64 %20
  %57 = getelementptr inbounds i8, i8* %55, i64 %54
  %58 = ptrtoint i8* %57 to i64
  store i8 13, i8* %56, align 1
  %59 = getelementptr inbounds i8, i8* %56, i64 1
  %60 = ptrtoint i8* %59 to i64
  %61 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 0
  %62 = load i8*, i8** %61, align 8
  %63 = load i8*, i8** %5, align 8
  %64 = ptrtoint i8* %63 to i64
  %65 = icmp eq i8* %63, %62
  br i1 %65, label %176, label %66

66:                                               ; preds = %53
  %67 = ptrtoint i8* %62 to i64
  %68 = ptrtoint i8* %63 to i64
  %69 = sub i64 %68, %67
  %70 = icmp ult i64 %69, 16
  br i1 %70, label %166, label %71

71:                                               ; preds = %66
  %72 = sub i64 %16, %64
  %73 = sub i64 %72, %19
  %74 = getelementptr i8, i8* %62, i64 %73
  %75 = ptrtoint i8* %74 to i64
  %76 = getelementptr i8, i8* %55, i64 %75
  %77 = icmp ult i8* %76, %63
  %78 = icmp ult i8* %62, %56
  %79 = and i1 %77, %78
  br i1 %79, label %166, label %80

80:                                               ; preds = %71
  %81 = and i64 %69, -16
  %82 = sub i64 0, %81
  %83 = getelementptr i8, i8* %56, i64 %82
  %84 = sub i64 0, %81
  %85 = getelementptr i8, i8* %63, i64 %84
  %86 = add i64 %81, -16
  %87 = lshr exact i64 %86, 4
  %88 = add nuw nsw i64 %87, 1
  %89 = and i64 %88, 3
  %90 = icmp ult i64 %86, 48
  br i1 %90, label %143, label %91

91:                                               ; preds = %80
  %92 = sub nsw i64 %88, %89
  %93 = getelementptr i8, i8* %56, i64 -1
  %94 = getelementptr inbounds i8, i8* %93, i64 -8
  %95 = getelementptr inbounds i8, i8* %63, i64 -16
  %96 = getelementptr inbounds i8, i8* %94, i64 -7
  %97 = getelementptr i8, i8* %56, i64 -1
  %98 = getelementptr inbounds i8, i8* %97, i64 -8
  %99 = getelementptr inbounds i8, i8* %63, i64 -16
  %100 = getelementptr inbounds i8, i8* %98, i64 -7
  %101 = getelementptr i8, i8* %56, i64 -1
  %102 = getelementptr inbounds i8, i8* %101, i64 -8
  %103 = getelementptr inbounds i8, i8* %63, i64 -16
  %104 = getelementptr inbounds i8, i8* %102, i64 -7
  %105 = getelementptr i8, i8* %56, i64 -1
  %106 = getelementptr inbounds i8, i8* %105, i64 -8
  %107 = getelementptr inbounds i8, i8* %63, i64 -16
  %108 = getelementptr inbounds i8, i8* %106, i64 -7
  br label %109

109:                                              ; preds = %109, %91
  %110 = phi i64 [ 0, %91 ], [ %140, %109 ]
  %111 = phi i64 [ %92, %91 ], [ %141, %109 ]
  %112 = sub i64 0, %110
  %113 = sub i64 0, %110
  %114 = getelementptr inbounds i8, i8* %95, i64 %113
  %115 = bitcast i8* %114 to <2 x i64>*
  %116 = load <2 x i64>, <2 x i64>* %115, align 1, !alias.scope !142
  %117 = getelementptr inbounds i8, i8* %96, i64 %112
  %118 = bitcast i8* %117 to <2 x i64>*
  store <2 x i64> %116, <2 x i64>* %118, align 1, !alias.scope !145, !noalias !142
  %119 = sub nuw nsw i64 -16, %110
  %120 = sub nuw nsw i64 -16, %110
  %121 = getelementptr inbounds i8, i8* %99, i64 %120
  %122 = bitcast i8* %121 to <2 x i64>*
  %123 = load <2 x i64>, <2 x i64>* %122, align 1, !alias.scope !142
  %124 = getelementptr inbounds i8, i8* %100, i64 %119
  %125 = bitcast i8* %124 to <2 x i64>*
  store <2 x i64> %123, <2 x i64>* %125, align 1, !alias.scope !145, !noalias !142
  %126 = sub nuw nsw i64 -32, %110
  %127 = sub nuw nsw i64 -32, %110
  %128 = getelementptr inbounds i8, i8* %103, i64 %127
  %129 = bitcast i8* %128 to <2 x i64>*
  %130 = load <2 x i64>, <2 x i64>* %129, align 1, !alias.scope !142
  %131 = getelementptr inbounds i8, i8* %104, i64 %126
  %132 = bitcast i8* %131 to <2 x i64>*
  store <2 x i64> %130, <2 x i64>* %132, align 1, !alias.scope !145, !noalias !142
  %133 = sub nuw nsw i64 -48, %110
  %134 = sub nuw nsw i64 -48, %110
  %135 = getelementptr inbounds i8, i8* %107, i64 %134
  %136 = bitcast i8* %135 to <2 x i64>*
  %137 = load <2 x i64>, <2 x i64>* %136, align 1, !alias.scope !142
  %138 = getelementptr inbounds i8, i8* %108, i64 %133
  %139 = bitcast i8* %138 to <2 x i64>*
  store <2 x i64> %137, <2 x i64>* %139, align 1, !alias.scope !145, !noalias !142
  %140 = add i64 %110, 64
  %141 = add i64 %111, -4
  %142 = icmp eq i64 %141, 0
  br i1 %142, label %143, label %109, !llvm.loop !147

143:                                              ; preds = %109, %80
  %144 = phi i64 [ 0, %80 ], [ %140, %109 ]
  %145 = icmp eq i64 %89, 0
  br i1 %145, label %164, label %146

146:                                              ; preds = %143
  %147 = getelementptr i8, i8* %56, i64 -1
  %148 = getelementptr inbounds i8, i8* %147, i64 -8
  %149 = getelementptr inbounds i8, i8* %63, i64 -16
  %150 = getelementptr inbounds i8, i8* %148, i64 -7
  br label %151

151:                                              ; preds = %151, %146
  %152 = phi i64 [ %144, %146 ], [ %161, %151 ]
  %153 = phi i64 [ %89, %146 ], [ %162, %151 ]
  %154 = sub i64 0, %152
  %155 = sub i64 0, %152
  %156 = getelementptr inbounds i8, i8* %149, i64 %155
  %157 = bitcast i8* %156 to <2 x i64>*
  %158 = load <2 x i64>, <2 x i64>* %157, align 1, !alias.scope !142
  %159 = getelementptr inbounds i8, i8* %150, i64 %154
  %160 = bitcast i8* %159 to <2 x i64>*
  store <2 x i64> %158, <2 x i64>* %160, align 1, !alias.scope !145, !noalias !142
  %161 = add i64 %152, 16
  %162 = add i64 %153, -1
  %163 = icmp eq i64 %162, 0
  br i1 %163, label %164, label %151, !llvm.loop !148

164:                                              ; preds = %151, %143
  %165 = icmp eq i64 %69, %81
  br i1 %165, label %176, label %166

166:                                              ; preds = %164, %71, %66
  %167 = phi i8* [ %56, %71 ], [ %56, %66 ], [ %83, %164 ]
  %168 = phi i8* [ %63, %71 ], [ %63, %66 ], [ %85, %164 ]
  br label %169

169:                                              ; preds = %166, %169
  %170 = phi i8* [ %172, %169 ], [ %167, %166 ]
  %171 = phi i8* [ %173, %169 ], [ %168, %166 ]
  %172 = getelementptr inbounds i8, i8* %170, i64 -1
  %173 = getelementptr inbounds i8, i8* %171, i64 -1
  %174 = load i8, i8* %173, align 1
  store i8 %174, i8* %172, align 1
  %175 = icmp eq i8* %173, %62
  br i1 %175, label %176, label %169, !llvm.loop !149

176:                                              ; preds = %169, %164, %53
  %177 = phi i8* [ %56, %53 ], [ %83, %164 ], [ %172, %169 ]
  %178 = ptrtoint i8* %177 to i64
  store i64 %178, i64* %18, align 8
  store i64 %60, i64* %17, align 8
  store i64 %58, i64* %26, align 8
  br label %179

179:                                              ; preds = %11, %176
  tail call void @_ZN2v88internal13EhFrameWriter12WriteULeb128Ej(%"class.v8::internal::EhFrameWriter"* %0, i32 %3)
  %180 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 3, i32 0, i32 0
  store i32 %1, i32* %180, align 4
  ret void
}

declare i32 @_ZN2v88internal13EhFrameWriter19RegisterToDwarfCodeENS0_8RegisterE(i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal13EhFrameWriter31SetBaseAddressRegisterAndOffsetENS0_8RegisterEi(%"class.v8::internal::EhFrameWriter"*, i32, i32) local_unnamed_addr #0 align 2 {
  %4 = tail call i32 @_ZN2v88internal13EhFrameWriter19RegisterToDwarfCodeENS0_8RegisterE(i32 %1) #6
  %5 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 5, i32 0
  %6 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 5, i32 0, i32 0, i32 1
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 5, i32 0, i32 0, i32 2, i32 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = icmp eq i8* %7, %9
  %11 = ptrtoint i8* %9 to i64
  br i1 %10, label %16, label %12

12:                                               ; preds = %3
  store i8 12, i8* %7, align 1
  %13 = getelementptr inbounds i8, i8* %7, i64 1
  %14 = ptrtoint i8* %13 to i64
  %15 = bitcast i8** %6 to i64*
  store i64 %14, i64* %15, align 8
  br label %180

16:                                               ; preds = %3
  %17 = ptrtoint i8* %7 to i64
  %18 = bitcast i8** %6 to i64*
  %19 = bitcast %"class.std::__1::vector"* %5 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = sub i64 %17, %20
  %22 = add i64 %21, 1
  %23 = icmp ugt i64 %22, 2147483647
  br i1 %23, label %24, label %26

24:                                               ; preds = %16
  %25 = bitcast %"class.std::__1::vector"* %5 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %25) #7
  unreachable

26:                                               ; preds = %16
  %27 = bitcast i8** %8 to i64*
  %28 = sub i64 %11, %20
  %29 = icmp ult i64 %28, 1073741823
  br i1 %29, label %30, label %35

30:                                               ; preds = %26
  %31 = shl i64 %28, 1
  %32 = icmp ult i64 %31, %22
  %33 = select i1 %32, i64 %22, i64 %31
  %34 = icmp eq i64 %33, 0
  br i1 %34, label %54, label %35

35:                                               ; preds = %30, %26
  %36 = phi i64 [ %33, %30 ], [ 2147483647, %26 ]
  %37 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 5, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %38 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %37, align 8
  %39 = add nuw nsw i64 %36, 7
  %40 = and i64 %39, -8
  %41 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %38, i64 0, i32 2
  %42 = load i64, i64* %41, align 8
  %43 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %38, i64 0, i32 3
  %44 = load i64, i64* %43, align 8
  %45 = sub i64 %44, %42
  %46 = icmp ugt i64 %40, %45
  br i1 %46, label %47, label %49, !prof !2

47:                                               ; preds = %35
  %48 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %38, i64 %40) #6
  br label %51

49:                                               ; preds = %35
  %50 = add i64 %42, %40
  store i64 %50, i64* %41, align 8
  br label %51

51:                                               ; preds = %49, %47
  %52 = phi i64 [ %48, %47 ], [ %42, %49 ]
  %53 = inttoptr i64 %52 to i8*
  br label %54

54:                                               ; preds = %51, %30
  %55 = phi i64 [ %36, %51 ], [ 0, %30 ]
  %56 = phi i8* [ %53, %51 ], [ null, %30 ]
  %57 = getelementptr inbounds i8, i8* %56, i64 %21
  %58 = getelementptr inbounds i8, i8* %56, i64 %55
  %59 = ptrtoint i8* %58 to i64
  store i8 12, i8* %57, align 1
  %60 = getelementptr inbounds i8, i8* %57, i64 1
  %61 = ptrtoint i8* %60 to i64
  %62 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %5, i64 0, i32 0, i32 0
  %63 = load i8*, i8** %62, align 8
  %64 = load i8*, i8** %6, align 8
  %65 = ptrtoint i8* %64 to i64
  %66 = icmp eq i8* %64, %63
  br i1 %66, label %177, label %67

67:                                               ; preds = %54
  %68 = ptrtoint i8* %63 to i64
  %69 = ptrtoint i8* %64 to i64
  %70 = sub i64 %69, %68
  %71 = icmp ult i64 %70, 16
  br i1 %71, label %167, label %72

72:                                               ; preds = %67
  %73 = sub i64 %17, %65
  %74 = sub i64 %73, %20
  %75 = getelementptr i8, i8* %63, i64 %74
  %76 = ptrtoint i8* %75 to i64
  %77 = getelementptr i8, i8* %56, i64 %76
  %78 = icmp ult i8* %77, %64
  %79 = icmp ult i8* %63, %57
  %80 = and i1 %78, %79
  br i1 %80, label %167, label %81

81:                                               ; preds = %72
  %82 = and i64 %70, -16
  %83 = sub i64 0, %82
  %84 = getelementptr i8, i8* %57, i64 %83
  %85 = sub i64 0, %82
  %86 = getelementptr i8, i8* %64, i64 %85
  %87 = add i64 %82, -16
  %88 = lshr exact i64 %87, 4
  %89 = add nuw nsw i64 %88, 1
  %90 = and i64 %89, 3
  %91 = icmp ult i64 %87, 48
  br i1 %91, label %144, label %92

92:                                               ; preds = %81
  %93 = sub nsw i64 %89, %90
  %94 = getelementptr i8, i8* %57, i64 -1
  %95 = getelementptr inbounds i8, i8* %94, i64 -8
  %96 = getelementptr inbounds i8, i8* %64, i64 -16
  %97 = getelementptr inbounds i8, i8* %95, i64 -7
  %98 = getelementptr i8, i8* %57, i64 -1
  %99 = getelementptr inbounds i8, i8* %98, i64 -8
  %100 = getelementptr inbounds i8, i8* %64, i64 -16
  %101 = getelementptr inbounds i8, i8* %99, i64 -7
  %102 = getelementptr i8, i8* %57, i64 -1
  %103 = getelementptr inbounds i8, i8* %102, i64 -8
  %104 = getelementptr inbounds i8, i8* %64, i64 -16
  %105 = getelementptr inbounds i8, i8* %103, i64 -7
  %106 = getelementptr i8, i8* %57, i64 -1
  %107 = getelementptr inbounds i8, i8* %106, i64 -8
  %108 = getelementptr inbounds i8, i8* %64, i64 -16
  %109 = getelementptr inbounds i8, i8* %107, i64 -7
  br label %110

110:                                              ; preds = %110, %92
  %111 = phi i64 [ 0, %92 ], [ %141, %110 ]
  %112 = phi i64 [ %93, %92 ], [ %142, %110 ]
  %113 = sub i64 0, %111
  %114 = sub i64 0, %111
  %115 = getelementptr inbounds i8, i8* %96, i64 %114
  %116 = bitcast i8* %115 to <2 x i64>*
  %117 = load <2 x i64>, <2 x i64>* %116, align 1, !alias.scope !150
  %118 = getelementptr inbounds i8, i8* %97, i64 %113
  %119 = bitcast i8* %118 to <2 x i64>*
  store <2 x i64> %117, <2 x i64>* %119, align 1, !alias.scope !153, !noalias !150
  %120 = sub nuw nsw i64 -16, %111
  %121 = sub nuw nsw i64 -16, %111
  %122 = getelementptr inbounds i8, i8* %100, i64 %121
  %123 = bitcast i8* %122 to <2 x i64>*
  %124 = load <2 x i64>, <2 x i64>* %123, align 1, !alias.scope !150
  %125 = getelementptr inbounds i8, i8* %101, i64 %120
  %126 = bitcast i8* %125 to <2 x i64>*
  store <2 x i64> %124, <2 x i64>* %126, align 1, !alias.scope !153, !noalias !150
  %127 = sub nuw nsw i64 -32, %111
  %128 = sub nuw nsw i64 -32, %111
  %129 = getelementptr inbounds i8, i8* %104, i64 %128
  %130 = bitcast i8* %129 to <2 x i64>*
  %131 = load <2 x i64>, <2 x i64>* %130, align 1, !alias.scope !150
  %132 = getelementptr inbounds i8, i8* %105, i64 %127
  %133 = bitcast i8* %132 to <2 x i64>*
  store <2 x i64> %131, <2 x i64>* %133, align 1, !alias.scope !153, !noalias !150
  %134 = sub nuw nsw i64 -48, %111
  %135 = sub nuw nsw i64 -48, %111
  %136 = getelementptr inbounds i8, i8* %108, i64 %135
  %137 = bitcast i8* %136 to <2 x i64>*
  %138 = load <2 x i64>, <2 x i64>* %137, align 1, !alias.scope !150
  %139 = getelementptr inbounds i8, i8* %109, i64 %134
  %140 = bitcast i8* %139 to <2 x i64>*
  store <2 x i64> %138, <2 x i64>* %140, align 1, !alias.scope !153, !noalias !150
  %141 = add i64 %111, 64
  %142 = add i64 %112, -4
  %143 = icmp eq i64 %142, 0
  br i1 %143, label %144, label %110, !llvm.loop !155

144:                                              ; preds = %110, %81
  %145 = phi i64 [ 0, %81 ], [ %141, %110 ]
  %146 = icmp eq i64 %90, 0
  br i1 %146, label %165, label %147

147:                                              ; preds = %144
  %148 = getelementptr i8, i8* %57, i64 -1
  %149 = getelementptr inbounds i8, i8* %148, i64 -8
  %150 = getelementptr inbounds i8, i8* %64, i64 -16
  %151 = getelementptr inbounds i8, i8* %149, i64 -7
  br label %152

152:                                              ; preds = %152, %147
  %153 = phi i64 [ %145, %147 ], [ %162, %152 ]
  %154 = phi i64 [ %90, %147 ], [ %163, %152 ]
  %155 = sub i64 0, %153
  %156 = sub i64 0, %153
  %157 = getelementptr inbounds i8, i8* %150, i64 %156
  %158 = bitcast i8* %157 to <2 x i64>*
  %159 = load <2 x i64>, <2 x i64>* %158, align 1, !alias.scope !150
  %160 = getelementptr inbounds i8, i8* %151, i64 %155
  %161 = bitcast i8* %160 to <2 x i64>*
  store <2 x i64> %159, <2 x i64>* %161, align 1, !alias.scope !153, !noalias !150
  %162 = add i64 %153, 16
  %163 = add i64 %154, -1
  %164 = icmp eq i64 %163, 0
  br i1 %164, label %165, label %152, !llvm.loop !156

165:                                              ; preds = %152, %144
  %166 = icmp eq i64 %70, %82
  br i1 %166, label %177, label %167

167:                                              ; preds = %165, %72, %67
  %168 = phi i8* [ %57, %72 ], [ %57, %67 ], [ %84, %165 ]
  %169 = phi i8* [ %64, %72 ], [ %64, %67 ], [ %86, %165 ]
  br label %170

170:                                              ; preds = %167, %170
  %171 = phi i8* [ %173, %170 ], [ %168, %167 ]
  %172 = phi i8* [ %174, %170 ], [ %169, %167 ]
  %173 = getelementptr inbounds i8, i8* %171, i64 -1
  %174 = getelementptr inbounds i8, i8* %172, i64 -1
  %175 = load i8, i8* %174, align 1
  store i8 %175, i8* %173, align 1
  %176 = icmp eq i8* %174, %63
  br i1 %176, label %177, label %170, !llvm.loop !157

177:                                              ; preds = %170, %165, %54
  %178 = phi i8* [ %57, %54 ], [ %84, %165 ], [ %173, %170 ]
  %179 = ptrtoint i8* %178 to i64
  store i64 %179, i64* %19, align 8
  store i64 %61, i64* %18, align 8
  store i64 %59, i64* %27, align 8
  br label %180

180:                                              ; preds = %12, %177
  tail call void @_ZN2v88internal13EhFrameWriter12WriteULeb128Ej(%"class.v8::internal::EhFrameWriter"* %0, i32 %4)
  tail call void @_ZN2v88internal13EhFrameWriter12WriteULeb128Ej(%"class.v8::internal::EhFrameWriter"* %0, i32 %2)
  %181 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 4
  store i32 %2, i32* %181, align 8
  %182 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 3, i32 0, i32 0
  store i32 %1, i32* %182, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal13EhFrameWriter26RecordRegisterSavedToStackEii(%"class.v8::internal::EhFrameWriter"*, i32, i32) local_unnamed_addr #0 align 2 {
  %4 = load i32, i32* @_ZN2v88internal16EhFrameConstants20kDataAlignmentFactorE, align 4
  %5 = sdiv i32 %2, %4
  %6 = icmp sgt i32 %5, -1
  br i1 %6, label %7, label %187

7:                                                ; preds = %3
  %8 = trunc i32 %1 to i8
  %9 = and i8 %8, 63
  %10 = or i8 %9, -128
  %11 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 5, i32 0
  %12 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 5, i32 0, i32 0, i32 1
  %13 = load i8*, i8** %12, align 8
  %14 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 5, i32 0, i32 0, i32 2, i32 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = icmp eq i8* %13, %15
  %17 = ptrtoint i8* %15 to i64
  br i1 %16, label %22, label %18

18:                                               ; preds = %7
  store i8 %10, i8* %13, align 1
  %19 = getelementptr inbounds i8, i8* %13, i64 1
  %20 = ptrtoint i8* %19 to i64
  %21 = bitcast i8** %12 to i64*
  store i64 %20, i64* %21, align 8
  br label %186

22:                                               ; preds = %7
  %23 = ptrtoint i8* %13 to i64
  %24 = bitcast i8** %12 to i64*
  %25 = bitcast %"class.std::__1::vector"* %11 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = sub i64 %23, %26
  %28 = add i64 %27, 1
  %29 = icmp ugt i64 %28, 2147483647
  br i1 %29, label %30, label %32

30:                                               ; preds = %22
  %31 = bitcast %"class.std::__1::vector"* %11 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %31) #7
  unreachable

32:                                               ; preds = %22
  %33 = bitcast i8** %14 to i64*
  %34 = sub i64 %17, %26
  %35 = icmp ult i64 %34, 1073741823
  br i1 %35, label %36, label %41

36:                                               ; preds = %32
  %37 = shl i64 %34, 1
  %38 = icmp ult i64 %37, %28
  %39 = select i1 %38, i64 %28, i64 %37
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %60, label %41

41:                                               ; preds = %36, %32
  %42 = phi i64 [ %39, %36 ], [ 2147483647, %32 ]
  %43 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 5, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %44 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %43, align 8
  %45 = add nuw nsw i64 %42, 7
  %46 = and i64 %45, -8
  %47 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %44, i64 0, i32 2
  %48 = load i64, i64* %47, align 8
  %49 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %44, i64 0, i32 3
  %50 = load i64, i64* %49, align 8
  %51 = sub i64 %50, %48
  %52 = icmp ugt i64 %46, %51
  br i1 %52, label %53, label %55, !prof !2

53:                                               ; preds = %41
  %54 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %44, i64 %46) #6
  br label %57

55:                                               ; preds = %41
  %56 = add i64 %48, %46
  store i64 %56, i64* %47, align 8
  br label %57

57:                                               ; preds = %55, %53
  %58 = phi i64 [ %54, %53 ], [ %48, %55 ]
  %59 = inttoptr i64 %58 to i8*
  br label %60

60:                                               ; preds = %57, %36
  %61 = phi i64 [ %42, %57 ], [ 0, %36 ]
  %62 = phi i8* [ %59, %57 ], [ null, %36 ]
  %63 = getelementptr inbounds i8, i8* %62, i64 %27
  %64 = getelementptr inbounds i8, i8* %62, i64 %61
  %65 = ptrtoint i8* %64 to i64
  store i8 %10, i8* %63, align 1
  %66 = getelementptr inbounds i8, i8* %63, i64 1
  %67 = ptrtoint i8* %66 to i64
  %68 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %11, i64 0, i32 0, i32 0
  %69 = load i8*, i8** %68, align 8
  %70 = load i8*, i8** %12, align 8
  %71 = ptrtoint i8* %70 to i64
  %72 = icmp eq i8* %70, %69
  br i1 %72, label %183, label %73

73:                                               ; preds = %60
  %74 = ptrtoint i8* %69 to i64
  %75 = ptrtoint i8* %70 to i64
  %76 = sub i64 %75, %74
  %77 = icmp ult i64 %76, 16
  br i1 %77, label %173, label %78

78:                                               ; preds = %73
  %79 = sub i64 %23, %71
  %80 = sub i64 %79, %26
  %81 = getelementptr i8, i8* %69, i64 %80
  %82 = ptrtoint i8* %81 to i64
  %83 = getelementptr i8, i8* %62, i64 %82
  %84 = icmp ult i8* %83, %70
  %85 = icmp ult i8* %69, %63
  %86 = and i1 %84, %85
  br i1 %86, label %173, label %87

87:                                               ; preds = %78
  %88 = and i64 %76, -16
  %89 = sub i64 0, %88
  %90 = getelementptr i8, i8* %63, i64 %89
  %91 = sub i64 0, %88
  %92 = getelementptr i8, i8* %70, i64 %91
  %93 = add i64 %88, -16
  %94 = lshr exact i64 %93, 4
  %95 = add nuw nsw i64 %94, 1
  %96 = and i64 %95, 3
  %97 = icmp ult i64 %93, 48
  br i1 %97, label %150, label %98

98:                                               ; preds = %87
  %99 = sub nsw i64 %95, %96
  %100 = getelementptr i8, i8* %63, i64 -1
  %101 = getelementptr inbounds i8, i8* %100, i64 -8
  %102 = getelementptr inbounds i8, i8* %70, i64 -16
  %103 = getelementptr inbounds i8, i8* %101, i64 -7
  %104 = getelementptr i8, i8* %63, i64 -1
  %105 = getelementptr inbounds i8, i8* %104, i64 -8
  %106 = getelementptr inbounds i8, i8* %70, i64 -16
  %107 = getelementptr inbounds i8, i8* %105, i64 -7
  %108 = getelementptr i8, i8* %63, i64 -1
  %109 = getelementptr inbounds i8, i8* %108, i64 -8
  %110 = getelementptr inbounds i8, i8* %70, i64 -16
  %111 = getelementptr inbounds i8, i8* %109, i64 -7
  %112 = getelementptr i8, i8* %63, i64 -1
  %113 = getelementptr inbounds i8, i8* %112, i64 -8
  %114 = getelementptr inbounds i8, i8* %70, i64 -16
  %115 = getelementptr inbounds i8, i8* %113, i64 -7
  br label %116

116:                                              ; preds = %116, %98
  %117 = phi i64 [ 0, %98 ], [ %147, %116 ]
  %118 = phi i64 [ %99, %98 ], [ %148, %116 ]
  %119 = sub i64 0, %117
  %120 = sub i64 0, %117
  %121 = getelementptr inbounds i8, i8* %102, i64 %120
  %122 = bitcast i8* %121 to <2 x i64>*
  %123 = load <2 x i64>, <2 x i64>* %122, align 1, !alias.scope !158
  %124 = getelementptr inbounds i8, i8* %103, i64 %119
  %125 = bitcast i8* %124 to <2 x i64>*
  store <2 x i64> %123, <2 x i64>* %125, align 1, !alias.scope !161, !noalias !158
  %126 = sub nuw nsw i64 -16, %117
  %127 = sub nuw nsw i64 -16, %117
  %128 = getelementptr inbounds i8, i8* %106, i64 %127
  %129 = bitcast i8* %128 to <2 x i64>*
  %130 = load <2 x i64>, <2 x i64>* %129, align 1, !alias.scope !158
  %131 = getelementptr inbounds i8, i8* %107, i64 %126
  %132 = bitcast i8* %131 to <2 x i64>*
  store <2 x i64> %130, <2 x i64>* %132, align 1, !alias.scope !161, !noalias !158
  %133 = sub nuw nsw i64 -32, %117
  %134 = sub nuw nsw i64 -32, %117
  %135 = getelementptr inbounds i8, i8* %110, i64 %134
  %136 = bitcast i8* %135 to <2 x i64>*
  %137 = load <2 x i64>, <2 x i64>* %136, align 1, !alias.scope !158
  %138 = getelementptr inbounds i8, i8* %111, i64 %133
  %139 = bitcast i8* %138 to <2 x i64>*
  store <2 x i64> %137, <2 x i64>* %139, align 1, !alias.scope !161, !noalias !158
  %140 = sub nuw nsw i64 -48, %117
  %141 = sub nuw nsw i64 -48, %117
  %142 = getelementptr inbounds i8, i8* %114, i64 %141
  %143 = bitcast i8* %142 to <2 x i64>*
  %144 = load <2 x i64>, <2 x i64>* %143, align 1, !alias.scope !158
  %145 = getelementptr inbounds i8, i8* %115, i64 %140
  %146 = bitcast i8* %145 to <2 x i64>*
  store <2 x i64> %144, <2 x i64>* %146, align 1, !alias.scope !161, !noalias !158
  %147 = add i64 %117, 64
  %148 = add i64 %118, -4
  %149 = icmp eq i64 %148, 0
  br i1 %149, label %150, label %116, !llvm.loop !163

150:                                              ; preds = %116, %87
  %151 = phi i64 [ 0, %87 ], [ %147, %116 ]
  %152 = icmp eq i64 %96, 0
  br i1 %152, label %171, label %153

153:                                              ; preds = %150
  %154 = getelementptr i8, i8* %63, i64 -1
  %155 = getelementptr inbounds i8, i8* %154, i64 -8
  %156 = getelementptr inbounds i8, i8* %70, i64 -16
  %157 = getelementptr inbounds i8, i8* %155, i64 -7
  br label %158

158:                                              ; preds = %158, %153
  %159 = phi i64 [ %151, %153 ], [ %168, %158 ]
  %160 = phi i64 [ %96, %153 ], [ %169, %158 ]
  %161 = sub i64 0, %159
  %162 = sub i64 0, %159
  %163 = getelementptr inbounds i8, i8* %156, i64 %162
  %164 = bitcast i8* %163 to <2 x i64>*
  %165 = load <2 x i64>, <2 x i64>* %164, align 1, !alias.scope !158
  %166 = getelementptr inbounds i8, i8* %157, i64 %161
  %167 = bitcast i8* %166 to <2 x i64>*
  store <2 x i64> %165, <2 x i64>* %167, align 1, !alias.scope !161, !noalias !158
  %168 = add i64 %159, 16
  %169 = add i64 %160, -1
  %170 = icmp eq i64 %169, 0
  br i1 %170, label %171, label %158, !llvm.loop !164

171:                                              ; preds = %158, %150
  %172 = icmp eq i64 %76, %88
  br i1 %172, label %183, label %173

173:                                              ; preds = %171, %78, %73
  %174 = phi i8* [ %63, %78 ], [ %63, %73 ], [ %90, %171 ]
  %175 = phi i8* [ %70, %78 ], [ %70, %73 ], [ %92, %171 ]
  br label %176

176:                                              ; preds = %173, %176
  %177 = phi i8* [ %179, %176 ], [ %174, %173 ]
  %178 = phi i8* [ %180, %176 ], [ %175, %173 ]
  %179 = getelementptr inbounds i8, i8* %177, i64 -1
  %180 = getelementptr inbounds i8, i8* %178, i64 -1
  %181 = load i8, i8* %180, align 1
  store i8 %181, i8* %179, align 1
  %182 = icmp eq i8* %180, %69
  br i1 %182, label %183, label %176, !llvm.loop !165

183:                                              ; preds = %176, %171, %60
  %184 = phi i8* [ %63, %60 ], [ %90, %171 ], [ %179, %176 ]
  %185 = ptrtoint i8* %184 to i64
  store i64 %185, i64* %25, align 8
  store i64 %67, i64* %24, align 8
  store i64 %65, i64* %33, align 8
  br label %186

186:                                              ; preds = %18, %183
  tail call void @_ZN2v88internal13EhFrameWriter12WriteULeb128Ej(%"class.v8::internal::EhFrameWriter"* %0, i32 %5)
  br label %364

187:                                              ; preds = %3
  %188 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 5, i32 0
  %189 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 5, i32 0, i32 0, i32 1
  %190 = load i8*, i8** %189, align 8
  %191 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 5, i32 0, i32 0, i32 2, i32 0, i32 0
  %192 = load i8*, i8** %191, align 8
  %193 = icmp eq i8* %190, %192
  %194 = ptrtoint i8* %192 to i64
  br i1 %193, label %199, label %195

195:                                              ; preds = %187
  store i8 17, i8* %190, align 1
  %196 = getelementptr inbounds i8, i8* %190, i64 1
  %197 = ptrtoint i8* %196 to i64
  %198 = bitcast i8** %189 to i64*
  store i64 %197, i64* %198, align 8
  br label %363

199:                                              ; preds = %187
  %200 = ptrtoint i8* %190 to i64
  %201 = bitcast i8** %189 to i64*
  %202 = bitcast %"class.std::__1::vector"* %188 to i64*
  %203 = load i64, i64* %202, align 8
  %204 = sub i64 %200, %203
  %205 = add i64 %204, 1
  %206 = icmp ugt i64 %205, 2147483647
  br i1 %206, label %207, label %209

207:                                              ; preds = %199
  %208 = bitcast %"class.std::__1::vector"* %188 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %208) #7
  unreachable

209:                                              ; preds = %199
  %210 = bitcast i8** %191 to i64*
  %211 = sub i64 %194, %203
  %212 = icmp ult i64 %211, 1073741823
  br i1 %212, label %213, label %218

213:                                              ; preds = %209
  %214 = shl i64 %211, 1
  %215 = icmp ult i64 %214, %205
  %216 = select i1 %215, i64 %205, i64 %214
  %217 = icmp eq i64 %216, 0
  br i1 %217, label %237, label %218

218:                                              ; preds = %213, %209
  %219 = phi i64 [ %216, %213 ], [ 2147483647, %209 ]
  %220 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 5, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %221 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %220, align 8
  %222 = add nuw nsw i64 %219, 7
  %223 = and i64 %222, -8
  %224 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %221, i64 0, i32 2
  %225 = load i64, i64* %224, align 8
  %226 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %221, i64 0, i32 3
  %227 = load i64, i64* %226, align 8
  %228 = sub i64 %227, %225
  %229 = icmp ugt i64 %223, %228
  br i1 %229, label %230, label %232, !prof !2

230:                                              ; preds = %218
  %231 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %221, i64 %223) #6
  br label %234

232:                                              ; preds = %218
  %233 = add i64 %225, %223
  store i64 %233, i64* %224, align 8
  br label %234

234:                                              ; preds = %232, %230
  %235 = phi i64 [ %231, %230 ], [ %225, %232 ]
  %236 = inttoptr i64 %235 to i8*
  br label %237

237:                                              ; preds = %234, %213
  %238 = phi i64 [ %219, %234 ], [ 0, %213 ]
  %239 = phi i8* [ %236, %234 ], [ null, %213 ]
  %240 = getelementptr inbounds i8, i8* %239, i64 %204
  %241 = getelementptr inbounds i8, i8* %239, i64 %238
  %242 = ptrtoint i8* %241 to i64
  store i8 17, i8* %240, align 1
  %243 = getelementptr inbounds i8, i8* %240, i64 1
  %244 = ptrtoint i8* %243 to i64
  %245 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %188, i64 0, i32 0, i32 0
  %246 = load i8*, i8** %245, align 8
  %247 = load i8*, i8** %189, align 8
  %248 = ptrtoint i8* %247 to i64
  %249 = icmp eq i8* %247, %246
  br i1 %249, label %360, label %250

250:                                              ; preds = %237
  %251 = ptrtoint i8* %246 to i64
  %252 = ptrtoint i8* %247 to i64
  %253 = sub i64 %252, %251
  %254 = icmp ult i64 %253, 16
  br i1 %254, label %350, label %255

255:                                              ; preds = %250
  %256 = sub i64 %200, %248
  %257 = sub i64 %256, %203
  %258 = getelementptr i8, i8* %246, i64 %257
  %259 = ptrtoint i8* %258 to i64
  %260 = getelementptr i8, i8* %239, i64 %259
  %261 = icmp ult i8* %260, %247
  %262 = icmp ult i8* %246, %240
  %263 = and i1 %261, %262
  br i1 %263, label %350, label %264

264:                                              ; preds = %255
  %265 = and i64 %253, -16
  %266 = sub i64 0, %265
  %267 = getelementptr i8, i8* %240, i64 %266
  %268 = sub i64 0, %265
  %269 = getelementptr i8, i8* %247, i64 %268
  %270 = add i64 %265, -16
  %271 = lshr exact i64 %270, 4
  %272 = add nuw nsw i64 %271, 1
  %273 = and i64 %272, 3
  %274 = icmp ult i64 %270, 48
  br i1 %274, label %327, label %275

275:                                              ; preds = %264
  %276 = sub nsw i64 %272, %273
  %277 = getelementptr i8, i8* %240, i64 -1
  %278 = getelementptr inbounds i8, i8* %277, i64 -8
  %279 = getelementptr inbounds i8, i8* %247, i64 -16
  %280 = getelementptr inbounds i8, i8* %278, i64 -7
  %281 = getelementptr i8, i8* %240, i64 -1
  %282 = getelementptr inbounds i8, i8* %281, i64 -8
  %283 = getelementptr inbounds i8, i8* %247, i64 -16
  %284 = getelementptr inbounds i8, i8* %282, i64 -7
  %285 = getelementptr i8, i8* %240, i64 -1
  %286 = getelementptr inbounds i8, i8* %285, i64 -8
  %287 = getelementptr inbounds i8, i8* %247, i64 -16
  %288 = getelementptr inbounds i8, i8* %286, i64 -7
  %289 = getelementptr i8, i8* %240, i64 -1
  %290 = getelementptr inbounds i8, i8* %289, i64 -8
  %291 = getelementptr inbounds i8, i8* %247, i64 -16
  %292 = getelementptr inbounds i8, i8* %290, i64 -7
  br label %293

293:                                              ; preds = %293, %275
  %294 = phi i64 [ 0, %275 ], [ %324, %293 ]
  %295 = phi i64 [ %276, %275 ], [ %325, %293 ]
  %296 = sub i64 0, %294
  %297 = sub i64 0, %294
  %298 = getelementptr inbounds i8, i8* %279, i64 %297
  %299 = bitcast i8* %298 to <2 x i64>*
  %300 = load <2 x i64>, <2 x i64>* %299, align 1, !alias.scope !166
  %301 = getelementptr inbounds i8, i8* %280, i64 %296
  %302 = bitcast i8* %301 to <2 x i64>*
  store <2 x i64> %300, <2 x i64>* %302, align 1, !alias.scope !169, !noalias !166
  %303 = sub nuw nsw i64 -16, %294
  %304 = sub nuw nsw i64 -16, %294
  %305 = getelementptr inbounds i8, i8* %283, i64 %304
  %306 = bitcast i8* %305 to <2 x i64>*
  %307 = load <2 x i64>, <2 x i64>* %306, align 1, !alias.scope !166
  %308 = getelementptr inbounds i8, i8* %284, i64 %303
  %309 = bitcast i8* %308 to <2 x i64>*
  store <2 x i64> %307, <2 x i64>* %309, align 1, !alias.scope !169, !noalias !166
  %310 = sub nuw nsw i64 -32, %294
  %311 = sub nuw nsw i64 -32, %294
  %312 = getelementptr inbounds i8, i8* %287, i64 %311
  %313 = bitcast i8* %312 to <2 x i64>*
  %314 = load <2 x i64>, <2 x i64>* %313, align 1, !alias.scope !166
  %315 = getelementptr inbounds i8, i8* %288, i64 %310
  %316 = bitcast i8* %315 to <2 x i64>*
  store <2 x i64> %314, <2 x i64>* %316, align 1, !alias.scope !169, !noalias !166
  %317 = sub nuw nsw i64 -48, %294
  %318 = sub nuw nsw i64 -48, %294
  %319 = getelementptr inbounds i8, i8* %291, i64 %318
  %320 = bitcast i8* %319 to <2 x i64>*
  %321 = load <2 x i64>, <2 x i64>* %320, align 1, !alias.scope !166
  %322 = getelementptr inbounds i8, i8* %292, i64 %317
  %323 = bitcast i8* %322 to <2 x i64>*
  store <2 x i64> %321, <2 x i64>* %323, align 1, !alias.scope !169, !noalias !166
  %324 = add i64 %294, 64
  %325 = add i64 %295, -4
  %326 = icmp eq i64 %325, 0
  br i1 %326, label %327, label %293, !llvm.loop !171

327:                                              ; preds = %293, %264
  %328 = phi i64 [ 0, %264 ], [ %324, %293 ]
  %329 = icmp eq i64 %273, 0
  br i1 %329, label %348, label %330

330:                                              ; preds = %327
  %331 = getelementptr i8, i8* %240, i64 -1
  %332 = getelementptr inbounds i8, i8* %331, i64 -8
  %333 = getelementptr inbounds i8, i8* %247, i64 -16
  %334 = getelementptr inbounds i8, i8* %332, i64 -7
  br label %335

335:                                              ; preds = %335, %330
  %336 = phi i64 [ %328, %330 ], [ %345, %335 ]
  %337 = phi i64 [ %273, %330 ], [ %346, %335 ]
  %338 = sub i64 0, %336
  %339 = sub i64 0, %336
  %340 = getelementptr inbounds i8, i8* %333, i64 %339
  %341 = bitcast i8* %340 to <2 x i64>*
  %342 = load <2 x i64>, <2 x i64>* %341, align 1, !alias.scope !166
  %343 = getelementptr inbounds i8, i8* %334, i64 %338
  %344 = bitcast i8* %343 to <2 x i64>*
  store <2 x i64> %342, <2 x i64>* %344, align 1, !alias.scope !169, !noalias !166
  %345 = add i64 %336, 16
  %346 = add i64 %337, -1
  %347 = icmp eq i64 %346, 0
  br i1 %347, label %348, label %335, !llvm.loop !172

348:                                              ; preds = %335, %327
  %349 = icmp eq i64 %253, %265
  br i1 %349, label %360, label %350

350:                                              ; preds = %348, %255, %250
  %351 = phi i8* [ %240, %255 ], [ %240, %250 ], [ %267, %348 ]
  %352 = phi i8* [ %247, %255 ], [ %247, %250 ], [ %269, %348 ]
  br label %353

353:                                              ; preds = %350, %353
  %354 = phi i8* [ %356, %353 ], [ %351, %350 ]
  %355 = phi i8* [ %357, %353 ], [ %352, %350 ]
  %356 = getelementptr inbounds i8, i8* %354, i64 -1
  %357 = getelementptr inbounds i8, i8* %355, i64 -1
  %358 = load i8, i8* %357, align 1
  store i8 %358, i8* %356, align 1
  %359 = icmp eq i8* %357, %246
  br i1 %359, label %360, label %353, !llvm.loop !173

360:                                              ; preds = %353, %348, %237
  %361 = phi i8* [ %240, %237 ], [ %267, %348 ], [ %356, %353 ]
  %362 = ptrtoint i8* %361 to i64
  store i64 %362, i64* %202, align 8
  store i64 %244, i64* %201, align 8
  store i64 %242, i64* %210, align 8
  br label %363

363:                                              ; preds = %195, %360
  tail call void @_ZN2v88internal13EhFrameWriter12WriteULeb128Ej(%"class.v8::internal::EhFrameWriter"* %0, i32 %1)
  tail call void @_ZN2v88internal13EhFrameWriter12WriteSLeb128Ei(%"class.v8::internal::EhFrameWriter"* %0, i32 %5)
  br label %364

364:                                              ; preds = %363, %186
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal13EhFrameWriter25RecordRegisterNotModifiedENS0_8RegisterE(%"class.v8::internal::EhFrameWriter"*, i32) local_unnamed_addr #0 align 2 {
  %3 = tail call i32 @_ZN2v88internal13EhFrameWriter19RegisterToDwarfCodeENS0_8RegisterE(i32 %1) #6
  tail call void @_ZN2v88internal13EhFrameWriter25RecordRegisterNotModifiedEi(%"class.v8::internal::EhFrameWriter"* %0, i32 %3)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal13EhFrameWriter25RecordRegisterNotModifiedEi(%"class.v8::internal::EhFrameWriter"*, i32) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 5, i32 0
  %4 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 5, i32 0, i32 0, i32 1
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 5, i32 0, i32 0, i32 2, i32 0, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = icmp eq i8* %5, %7
  %9 = ptrtoint i8* %7 to i64
  br i1 %8, label %14, label %10

10:                                               ; preds = %2
  store i8 8, i8* %5, align 1
  %11 = getelementptr inbounds i8, i8* %5, i64 1
  %12 = ptrtoint i8* %11 to i64
  %13 = bitcast i8** %4 to i64*
  store i64 %12, i64* %13, align 8
  br label %178

14:                                               ; preds = %2
  %15 = ptrtoint i8* %5 to i64
  %16 = bitcast i8** %4 to i64*
  %17 = bitcast %"class.std::__1::vector"* %3 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = sub i64 %15, %18
  %20 = add i64 %19, 1
  %21 = icmp ugt i64 %20, 2147483647
  br i1 %21, label %22, label %24

22:                                               ; preds = %14
  %23 = bitcast %"class.std::__1::vector"* %3 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %23) #7
  unreachable

24:                                               ; preds = %14
  %25 = bitcast i8** %6 to i64*
  %26 = sub i64 %9, %18
  %27 = icmp ult i64 %26, 1073741823
  br i1 %27, label %28, label %33

28:                                               ; preds = %24
  %29 = shl i64 %26, 1
  %30 = icmp ult i64 %29, %20
  %31 = select i1 %30, i64 %20, i64 %29
  %32 = icmp eq i64 %31, 0
  br i1 %32, label %52, label %33

33:                                               ; preds = %28, %24
  %34 = phi i64 [ %31, %28 ], [ 2147483647, %24 ]
  %35 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 5, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %36 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %35, align 8
  %37 = add nuw nsw i64 %34, 7
  %38 = and i64 %37, -8
  %39 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %36, i64 0, i32 2
  %40 = load i64, i64* %39, align 8
  %41 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %36, i64 0, i32 3
  %42 = load i64, i64* %41, align 8
  %43 = sub i64 %42, %40
  %44 = icmp ugt i64 %38, %43
  br i1 %44, label %45, label %47, !prof !2

45:                                               ; preds = %33
  %46 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %36, i64 %38) #6
  br label %49

47:                                               ; preds = %33
  %48 = add i64 %40, %38
  store i64 %48, i64* %39, align 8
  br label %49

49:                                               ; preds = %47, %45
  %50 = phi i64 [ %46, %45 ], [ %40, %47 ]
  %51 = inttoptr i64 %50 to i8*
  br label %52

52:                                               ; preds = %49, %28
  %53 = phi i64 [ %34, %49 ], [ 0, %28 ]
  %54 = phi i8* [ %51, %49 ], [ null, %28 ]
  %55 = getelementptr inbounds i8, i8* %54, i64 %19
  %56 = getelementptr inbounds i8, i8* %54, i64 %53
  %57 = ptrtoint i8* %56 to i64
  store i8 8, i8* %55, align 1
  %58 = getelementptr inbounds i8, i8* %55, i64 1
  %59 = ptrtoint i8* %58 to i64
  %60 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 0, i32 0
  %61 = load i8*, i8** %60, align 8
  %62 = load i8*, i8** %4, align 8
  %63 = ptrtoint i8* %62 to i64
  %64 = icmp eq i8* %62, %61
  br i1 %64, label %175, label %65

65:                                               ; preds = %52
  %66 = ptrtoint i8* %61 to i64
  %67 = ptrtoint i8* %62 to i64
  %68 = sub i64 %67, %66
  %69 = icmp ult i64 %68, 16
  br i1 %69, label %165, label %70

70:                                               ; preds = %65
  %71 = sub i64 %15, %63
  %72 = sub i64 %71, %18
  %73 = getelementptr i8, i8* %61, i64 %72
  %74 = ptrtoint i8* %73 to i64
  %75 = getelementptr i8, i8* %54, i64 %74
  %76 = icmp ult i8* %75, %62
  %77 = icmp ult i8* %61, %55
  %78 = and i1 %76, %77
  br i1 %78, label %165, label %79

79:                                               ; preds = %70
  %80 = and i64 %68, -16
  %81 = sub i64 0, %80
  %82 = getelementptr i8, i8* %55, i64 %81
  %83 = sub i64 0, %80
  %84 = getelementptr i8, i8* %62, i64 %83
  %85 = add i64 %80, -16
  %86 = lshr exact i64 %85, 4
  %87 = add nuw nsw i64 %86, 1
  %88 = and i64 %87, 3
  %89 = icmp ult i64 %85, 48
  br i1 %89, label %142, label %90

90:                                               ; preds = %79
  %91 = sub nsw i64 %87, %88
  %92 = getelementptr i8, i8* %55, i64 -1
  %93 = getelementptr inbounds i8, i8* %92, i64 -8
  %94 = getelementptr inbounds i8, i8* %62, i64 -16
  %95 = getelementptr inbounds i8, i8* %93, i64 -7
  %96 = getelementptr i8, i8* %55, i64 -1
  %97 = getelementptr inbounds i8, i8* %96, i64 -8
  %98 = getelementptr inbounds i8, i8* %62, i64 -16
  %99 = getelementptr inbounds i8, i8* %97, i64 -7
  %100 = getelementptr i8, i8* %55, i64 -1
  %101 = getelementptr inbounds i8, i8* %100, i64 -8
  %102 = getelementptr inbounds i8, i8* %62, i64 -16
  %103 = getelementptr inbounds i8, i8* %101, i64 -7
  %104 = getelementptr i8, i8* %55, i64 -1
  %105 = getelementptr inbounds i8, i8* %104, i64 -8
  %106 = getelementptr inbounds i8, i8* %62, i64 -16
  %107 = getelementptr inbounds i8, i8* %105, i64 -7
  br label %108

108:                                              ; preds = %108, %90
  %109 = phi i64 [ 0, %90 ], [ %139, %108 ]
  %110 = phi i64 [ %91, %90 ], [ %140, %108 ]
  %111 = sub i64 0, %109
  %112 = sub i64 0, %109
  %113 = getelementptr inbounds i8, i8* %94, i64 %112
  %114 = bitcast i8* %113 to <2 x i64>*
  %115 = load <2 x i64>, <2 x i64>* %114, align 1, !alias.scope !174
  %116 = getelementptr inbounds i8, i8* %95, i64 %111
  %117 = bitcast i8* %116 to <2 x i64>*
  store <2 x i64> %115, <2 x i64>* %117, align 1, !alias.scope !177, !noalias !174
  %118 = sub nuw nsw i64 -16, %109
  %119 = sub nuw nsw i64 -16, %109
  %120 = getelementptr inbounds i8, i8* %98, i64 %119
  %121 = bitcast i8* %120 to <2 x i64>*
  %122 = load <2 x i64>, <2 x i64>* %121, align 1, !alias.scope !174
  %123 = getelementptr inbounds i8, i8* %99, i64 %118
  %124 = bitcast i8* %123 to <2 x i64>*
  store <2 x i64> %122, <2 x i64>* %124, align 1, !alias.scope !177, !noalias !174
  %125 = sub nuw nsw i64 -32, %109
  %126 = sub nuw nsw i64 -32, %109
  %127 = getelementptr inbounds i8, i8* %102, i64 %126
  %128 = bitcast i8* %127 to <2 x i64>*
  %129 = load <2 x i64>, <2 x i64>* %128, align 1, !alias.scope !174
  %130 = getelementptr inbounds i8, i8* %103, i64 %125
  %131 = bitcast i8* %130 to <2 x i64>*
  store <2 x i64> %129, <2 x i64>* %131, align 1, !alias.scope !177, !noalias !174
  %132 = sub nuw nsw i64 -48, %109
  %133 = sub nuw nsw i64 -48, %109
  %134 = getelementptr inbounds i8, i8* %106, i64 %133
  %135 = bitcast i8* %134 to <2 x i64>*
  %136 = load <2 x i64>, <2 x i64>* %135, align 1, !alias.scope !174
  %137 = getelementptr inbounds i8, i8* %107, i64 %132
  %138 = bitcast i8* %137 to <2 x i64>*
  store <2 x i64> %136, <2 x i64>* %138, align 1, !alias.scope !177, !noalias !174
  %139 = add i64 %109, 64
  %140 = add i64 %110, -4
  %141 = icmp eq i64 %140, 0
  br i1 %141, label %142, label %108, !llvm.loop !179

142:                                              ; preds = %108, %79
  %143 = phi i64 [ 0, %79 ], [ %139, %108 ]
  %144 = icmp eq i64 %88, 0
  br i1 %144, label %163, label %145

145:                                              ; preds = %142
  %146 = getelementptr i8, i8* %55, i64 -1
  %147 = getelementptr inbounds i8, i8* %146, i64 -8
  %148 = getelementptr inbounds i8, i8* %62, i64 -16
  %149 = getelementptr inbounds i8, i8* %147, i64 -7
  br label %150

150:                                              ; preds = %150, %145
  %151 = phi i64 [ %143, %145 ], [ %160, %150 ]
  %152 = phi i64 [ %88, %145 ], [ %161, %150 ]
  %153 = sub i64 0, %151
  %154 = sub i64 0, %151
  %155 = getelementptr inbounds i8, i8* %148, i64 %154
  %156 = bitcast i8* %155 to <2 x i64>*
  %157 = load <2 x i64>, <2 x i64>* %156, align 1, !alias.scope !174
  %158 = getelementptr inbounds i8, i8* %149, i64 %153
  %159 = bitcast i8* %158 to <2 x i64>*
  store <2 x i64> %157, <2 x i64>* %159, align 1, !alias.scope !177, !noalias !174
  %160 = add i64 %151, 16
  %161 = add i64 %152, -1
  %162 = icmp eq i64 %161, 0
  br i1 %162, label %163, label %150, !llvm.loop !180

163:                                              ; preds = %150, %142
  %164 = icmp eq i64 %68, %80
  br i1 %164, label %175, label %165

165:                                              ; preds = %163, %70, %65
  %166 = phi i8* [ %55, %70 ], [ %55, %65 ], [ %82, %163 ]
  %167 = phi i8* [ %62, %70 ], [ %62, %65 ], [ %84, %163 ]
  br label %168

168:                                              ; preds = %165, %168
  %169 = phi i8* [ %171, %168 ], [ %166, %165 ]
  %170 = phi i8* [ %172, %168 ], [ %167, %165 ]
  %171 = getelementptr inbounds i8, i8* %169, i64 -1
  %172 = getelementptr inbounds i8, i8* %170, i64 -1
  %173 = load i8, i8* %172, align 1
  store i8 %173, i8* %171, align 1
  %174 = icmp eq i8* %172, %61
  br i1 %174, label %175, label %168, !llvm.loop !181

175:                                              ; preds = %168, %163, %52
  %176 = phi i8* [ %55, %52 ], [ %82, %163 ], [ %171, %168 ]
  %177 = ptrtoint i8* %176 to i64
  store i64 %177, i64* %17, align 8
  store i64 %59, i64* %16, align 8
  store i64 %57, i64* %25, align 8
  br label %178

178:                                              ; preds = %10, %175
  tail call void @_ZN2v88internal13EhFrameWriter12WriteULeb128Ej(%"class.v8::internal::EhFrameWriter"* %0, i32 %1)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal13EhFrameWriter32RecordRegisterFollowsInitialRuleENS0_8RegisterE(%"class.v8::internal::EhFrameWriter"*, i32) local_unnamed_addr #0 align 2 {
  %3 = tail call i32 @_ZN2v88internal13EhFrameWriter19RegisterToDwarfCodeENS0_8RegisterE(i32 %1) #6
  tail call void @_ZN2v88internal13EhFrameWriter32RecordRegisterFollowsInitialRuleEi(%"class.v8::internal::EhFrameWriter"* %0, i32 %3)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal13EhFrameWriter32RecordRegisterFollowsInitialRuleEi(%"class.v8::internal::EhFrameWriter"*, i32) local_unnamed_addr #0 align 2 {
  %3 = icmp slt i32 %1, 64
  br i1 %3, label %4, label %182

4:                                                ; preds = %2
  %5 = trunc i32 %1 to i8
  %6 = or i8 %5, -64
  %7 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 5, i32 0
  %8 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 5, i32 0, i32 0, i32 1
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 5, i32 0, i32 0, i32 2, i32 0, i32 0
  %11 = load i8*, i8** %10, align 8
  %12 = icmp eq i8* %9, %11
  %13 = ptrtoint i8* %11 to i64
  br i1 %12, label %18, label %14

14:                                               ; preds = %4
  store i8 %6, i8* %9, align 1
  %15 = getelementptr inbounds i8, i8* %9, i64 1
  %16 = ptrtoint i8* %15 to i64
  %17 = bitcast i8** %8 to i64*
  store i64 %16, i64* %17, align 8
  br label %359

18:                                               ; preds = %4
  %19 = ptrtoint i8* %9 to i64
  %20 = bitcast i8** %8 to i64*
  %21 = bitcast %"class.std::__1::vector"* %7 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = sub i64 %19, %22
  %24 = add i64 %23, 1
  %25 = icmp ugt i64 %24, 2147483647
  br i1 %25, label %26, label %28

26:                                               ; preds = %18
  %27 = bitcast %"class.std::__1::vector"* %7 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %27) #7
  unreachable

28:                                               ; preds = %18
  %29 = bitcast i8** %10 to i64*
  %30 = sub i64 %13, %22
  %31 = icmp ult i64 %30, 1073741823
  br i1 %31, label %32, label %37

32:                                               ; preds = %28
  %33 = shl i64 %30, 1
  %34 = icmp ult i64 %33, %24
  %35 = select i1 %34, i64 %24, i64 %33
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %56, label %37

37:                                               ; preds = %32, %28
  %38 = phi i64 [ %35, %32 ], [ 2147483647, %28 ]
  %39 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 5, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %40 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %39, align 8
  %41 = add nuw nsw i64 %38, 7
  %42 = and i64 %41, -8
  %43 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %40, i64 0, i32 2
  %44 = load i64, i64* %43, align 8
  %45 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %40, i64 0, i32 3
  %46 = load i64, i64* %45, align 8
  %47 = sub i64 %46, %44
  %48 = icmp ugt i64 %42, %47
  br i1 %48, label %49, label %51, !prof !2

49:                                               ; preds = %37
  %50 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %40, i64 %42) #6
  br label %53

51:                                               ; preds = %37
  %52 = add i64 %44, %42
  store i64 %52, i64* %43, align 8
  br label %53

53:                                               ; preds = %51, %49
  %54 = phi i64 [ %50, %49 ], [ %44, %51 ]
  %55 = inttoptr i64 %54 to i8*
  br label %56

56:                                               ; preds = %53, %32
  %57 = phi i64 [ %38, %53 ], [ 0, %32 ]
  %58 = phi i8* [ %55, %53 ], [ null, %32 ]
  %59 = getelementptr inbounds i8, i8* %58, i64 %23
  %60 = getelementptr inbounds i8, i8* %58, i64 %57
  %61 = ptrtoint i8* %60 to i64
  store i8 %6, i8* %59, align 1
  %62 = getelementptr inbounds i8, i8* %59, i64 1
  %63 = ptrtoint i8* %62 to i64
  %64 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %7, i64 0, i32 0, i32 0
  %65 = load i8*, i8** %64, align 8
  %66 = load i8*, i8** %8, align 8
  %67 = ptrtoint i8* %66 to i64
  %68 = icmp eq i8* %66, %65
  br i1 %68, label %179, label %69

69:                                               ; preds = %56
  %70 = ptrtoint i8* %65 to i64
  %71 = ptrtoint i8* %66 to i64
  %72 = sub i64 %71, %70
  %73 = icmp ult i64 %72, 16
  br i1 %73, label %169, label %74

74:                                               ; preds = %69
  %75 = sub i64 %19, %67
  %76 = sub i64 %75, %22
  %77 = getelementptr i8, i8* %65, i64 %76
  %78 = ptrtoint i8* %77 to i64
  %79 = getelementptr i8, i8* %58, i64 %78
  %80 = icmp ult i8* %79, %66
  %81 = icmp ult i8* %65, %59
  %82 = and i1 %80, %81
  br i1 %82, label %169, label %83

83:                                               ; preds = %74
  %84 = and i64 %72, -16
  %85 = sub i64 0, %84
  %86 = getelementptr i8, i8* %59, i64 %85
  %87 = sub i64 0, %84
  %88 = getelementptr i8, i8* %66, i64 %87
  %89 = add i64 %84, -16
  %90 = lshr exact i64 %89, 4
  %91 = add nuw nsw i64 %90, 1
  %92 = and i64 %91, 3
  %93 = icmp ult i64 %89, 48
  br i1 %93, label %146, label %94

94:                                               ; preds = %83
  %95 = sub nsw i64 %91, %92
  %96 = getelementptr i8, i8* %59, i64 -1
  %97 = getelementptr inbounds i8, i8* %96, i64 -8
  %98 = getelementptr inbounds i8, i8* %66, i64 -16
  %99 = getelementptr inbounds i8, i8* %97, i64 -7
  %100 = getelementptr i8, i8* %59, i64 -1
  %101 = getelementptr inbounds i8, i8* %100, i64 -8
  %102 = getelementptr inbounds i8, i8* %66, i64 -16
  %103 = getelementptr inbounds i8, i8* %101, i64 -7
  %104 = getelementptr i8, i8* %59, i64 -1
  %105 = getelementptr inbounds i8, i8* %104, i64 -8
  %106 = getelementptr inbounds i8, i8* %66, i64 -16
  %107 = getelementptr inbounds i8, i8* %105, i64 -7
  %108 = getelementptr i8, i8* %59, i64 -1
  %109 = getelementptr inbounds i8, i8* %108, i64 -8
  %110 = getelementptr inbounds i8, i8* %66, i64 -16
  %111 = getelementptr inbounds i8, i8* %109, i64 -7
  br label %112

112:                                              ; preds = %112, %94
  %113 = phi i64 [ 0, %94 ], [ %143, %112 ]
  %114 = phi i64 [ %95, %94 ], [ %144, %112 ]
  %115 = sub i64 0, %113
  %116 = sub i64 0, %113
  %117 = getelementptr inbounds i8, i8* %98, i64 %116
  %118 = bitcast i8* %117 to <2 x i64>*
  %119 = load <2 x i64>, <2 x i64>* %118, align 1, !alias.scope !182
  %120 = getelementptr inbounds i8, i8* %99, i64 %115
  %121 = bitcast i8* %120 to <2 x i64>*
  store <2 x i64> %119, <2 x i64>* %121, align 1, !alias.scope !185, !noalias !182
  %122 = sub nuw nsw i64 -16, %113
  %123 = sub nuw nsw i64 -16, %113
  %124 = getelementptr inbounds i8, i8* %102, i64 %123
  %125 = bitcast i8* %124 to <2 x i64>*
  %126 = load <2 x i64>, <2 x i64>* %125, align 1, !alias.scope !182
  %127 = getelementptr inbounds i8, i8* %103, i64 %122
  %128 = bitcast i8* %127 to <2 x i64>*
  store <2 x i64> %126, <2 x i64>* %128, align 1, !alias.scope !185, !noalias !182
  %129 = sub nuw nsw i64 -32, %113
  %130 = sub nuw nsw i64 -32, %113
  %131 = getelementptr inbounds i8, i8* %106, i64 %130
  %132 = bitcast i8* %131 to <2 x i64>*
  %133 = load <2 x i64>, <2 x i64>* %132, align 1, !alias.scope !182
  %134 = getelementptr inbounds i8, i8* %107, i64 %129
  %135 = bitcast i8* %134 to <2 x i64>*
  store <2 x i64> %133, <2 x i64>* %135, align 1, !alias.scope !185, !noalias !182
  %136 = sub nuw nsw i64 -48, %113
  %137 = sub nuw nsw i64 -48, %113
  %138 = getelementptr inbounds i8, i8* %110, i64 %137
  %139 = bitcast i8* %138 to <2 x i64>*
  %140 = load <2 x i64>, <2 x i64>* %139, align 1, !alias.scope !182
  %141 = getelementptr inbounds i8, i8* %111, i64 %136
  %142 = bitcast i8* %141 to <2 x i64>*
  store <2 x i64> %140, <2 x i64>* %142, align 1, !alias.scope !185, !noalias !182
  %143 = add i64 %113, 64
  %144 = add i64 %114, -4
  %145 = icmp eq i64 %144, 0
  br i1 %145, label %146, label %112, !llvm.loop !187

146:                                              ; preds = %112, %83
  %147 = phi i64 [ 0, %83 ], [ %143, %112 ]
  %148 = icmp eq i64 %92, 0
  br i1 %148, label %167, label %149

149:                                              ; preds = %146
  %150 = getelementptr i8, i8* %59, i64 -1
  %151 = getelementptr inbounds i8, i8* %150, i64 -8
  %152 = getelementptr inbounds i8, i8* %66, i64 -16
  %153 = getelementptr inbounds i8, i8* %151, i64 -7
  br label %154

154:                                              ; preds = %154, %149
  %155 = phi i64 [ %147, %149 ], [ %164, %154 ]
  %156 = phi i64 [ %92, %149 ], [ %165, %154 ]
  %157 = sub i64 0, %155
  %158 = sub i64 0, %155
  %159 = getelementptr inbounds i8, i8* %152, i64 %158
  %160 = bitcast i8* %159 to <2 x i64>*
  %161 = load <2 x i64>, <2 x i64>* %160, align 1, !alias.scope !182
  %162 = getelementptr inbounds i8, i8* %153, i64 %157
  %163 = bitcast i8* %162 to <2 x i64>*
  store <2 x i64> %161, <2 x i64>* %163, align 1, !alias.scope !185, !noalias !182
  %164 = add i64 %155, 16
  %165 = add i64 %156, -1
  %166 = icmp eq i64 %165, 0
  br i1 %166, label %167, label %154, !llvm.loop !188

167:                                              ; preds = %154, %146
  %168 = icmp eq i64 %72, %84
  br i1 %168, label %179, label %169

169:                                              ; preds = %167, %74, %69
  %170 = phi i8* [ %59, %74 ], [ %59, %69 ], [ %86, %167 ]
  %171 = phi i8* [ %66, %74 ], [ %66, %69 ], [ %88, %167 ]
  br label %172

172:                                              ; preds = %169, %172
  %173 = phi i8* [ %175, %172 ], [ %170, %169 ]
  %174 = phi i8* [ %176, %172 ], [ %171, %169 ]
  %175 = getelementptr inbounds i8, i8* %173, i64 -1
  %176 = getelementptr inbounds i8, i8* %174, i64 -1
  %177 = load i8, i8* %176, align 1
  store i8 %177, i8* %175, align 1
  %178 = icmp eq i8* %176, %65
  br i1 %178, label %179, label %172, !llvm.loop !189

179:                                              ; preds = %172, %167, %56
  %180 = phi i8* [ %59, %56 ], [ %86, %167 ], [ %175, %172 ]
  %181 = ptrtoint i8* %180 to i64
  store i64 %181, i64* %21, align 8
  store i64 %63, i64* %20, align 8
  store i64 %61, i64* %29, align 8
  br label %359

182:                                              ; preds = %2
  %183 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 5, i32 0
  %184 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 5, i32 0, i32 0, i32 1
  %185 = load i8*, i8** %184, align 8
  %186 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 5, i32 0, i32 0, i32 2, i32 0, i32 0
  %187 = load i8*, i8** %186, align 8
  %188 = icmp eq i8* %185, %187
  %189 = ptrtoint i8* %187 to i64
  br i1 %188, label %194, label %190

190:                                              ; preds = %182
  store i8 6, i8* %185, align 1
  %191 = getelementptr inbounds i8, i8* %185, i64 1
  %192 = ptrtoint i8* %191 to i64
  %193 = bitcast i8** %184 to i64*
  store i64 %192, i64* %193, align 8
  br label %358

194:                                              ; preds = %182
  %195 = ptrtoint i8* %185 to i64
  %196 = bitcast i8** %184 to i64*
  %197 = bitcast %"class.std::__1::vector"* %183 to i64*
  %198 = load i64, i64* %197, align 8
  %199 = sub i64 %195, %198
  %200 = add i64 %199, 1
  %201 = icmp ugt i64 %200, 2147483647
  br i1 %201, label %202, label %204

202:                                              ; preds = %194
  %203 = bitcast %"class.std::__1::vector"* %183 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %203) #7
  unreachable

204:                                              ; preds = %194
  %205 = bitcast i8** %186 to i64*
  %206 = sub i64 %189, %198
  %207 = icmp ult i64 %206, 1073741823
  br i1 %207, label %208, label %213

208:                                              ; preds = %204
  %209 = shl i64 %206, 1
  %210 = icmp ult i64 %209, %200
  %211 = select i1 %210, i64 %200, i64 %209
  %212 = icmp eq i64 %211, 0
  br i1 %212, label %232, label %213

213:                                              ; preds = %208, %204
  %214 = phi i64 [ %211, %208 ], [ 2147483647, %204 ]
  %215 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 5, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %216 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %215, align 8
  %217 = add nuw nsw i64 %214, 7
  %218 = and i64 %217, -8
  %219 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %216, i64 0, i32 2
  %220 = load i64, i64* %219, align 8
  %221 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %216, i64 0, i32 3
  %222 = load i64, i64* %221, align 8
  %223 = sub i64 %222, %220
  %224 = icmp ugt i64 %218, %223
  br i1 %224, label %225, label %227, !prof !2

225:                                              ; preds = %213
  %226 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %216, i64 %218) #6
  br label %229

227:                                              ; preds = %213
  %228 = add i64 %220, %218
  store i64 %228, i64* %219, align 8
  br label %229

229:                                              ; preds = %227, %225
  %230 = phi i64 [ %226, %225 ], [ %220, %227 ]
  %231 = inttoptr i64 %230 to i8*
  br label %232

232:                                              ; preds = %229, %208
  %233 = phi i64 [ %214, %229 ], [ 0, %208 ]
  %234 = phi i8* [ %231, %229 ], [ null, %208 ]
  %235 = getelementptr inbounds i8, i8* %234, i64 %199
  %236 = getelementptr inbounds i8, i8* %234, i64 %233
  %237 = ptrtoint i8* %236 to i64
  store i8 6, i8* %235, align 1
  %238 = getelementptr inbounds i8, i8* %235, i64 1
  %239 = ptrtoint i8* %238 to i64
  %240 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %183, i64 0, i32 0, i32 0
  %241 = load i8*, i8** %240, align 8
  %242 = load i8*, i8** %184, align 8
  %243 = ptrtoint i8* %242 to i64
  %244 = icmp eq i8* %242, %241
  br i1 %244, label %355, label %245

245:                                              ; preds = %232
  %246 = ptrtoint i8* %241 to i64
  %247 = ptrtoint i8* %242 to i64
  %248 = sub i64 %247, %246
  %249 = icmp ult i64 %248, 16
  br i1 %249, label %345, label %250

250:                                              ; preds = %245
  %251 = sub i64 %195, %243
  %252 = sub i64 %251, %198
  %253 = getelementptr i8, i8* %241, i64 %252
  %254 = ptrtoint i8* %253 to i64
  %255 = getelementptr i8, i8* %234, i64 %254
  %256 = icmp ult i8* %255, %242
  %257 = icmp ult i8* %241, %235
  %258 = and i1 %256, %257
  br i1 %258, label %345, label %259

259:                                              ; preds = %250
  %260 = and i64 %248, -16
  %261 = sub i64 0, %260
  %262 = getelementptr i8, i8* %235, i64 %261
  %263 = sub i64 0, %260
  %264 = getelementptr i8, i8* %242, i64 %263
  %265 = add i64 %260, -16
  %266 = lshr exact i64 %265, 4
  %267 = add nuw nsw i64 %266, 1
  %268 = and i64 %267, 3
  %269 = icmp ult i64 %265, 48
  br i1 %269, label %322, label %270

270:                                              ; preds = %259
  %271 = sub nsw i64 %267, %268
  %272 = getelementptr i8, i8* %235, i64 -1
  %273 = getelementptr inbounds i8, i8* %272, i64 -8
  %274 = getelementptr inbounds i8, i8* %242, i64 -16
  %275 = getelementptr inbounds i8, i8* %273, i64 -7
  %276 = getelementptr i8, i8* %235, i64 -1
  %277 = getelementptr inbounds i8, i8* %276, i64 -8
  %278 = getelementptr inbounds i8, i8* %242, i64 -16
  %279 = getelementptr inbounds i8, i8* %277, i64 -7
  %280 = getelementptr i8, i8* %235, i64 -1
  %281 = getelementptr inbounds i8, i8* %280, i64 -8
  %282 = getelementptr inbounds i8, i8* %242, i64 -16
  %283 = getelementptr inbounds i8, i8* %281, i64 -7
  %284 = getelementptr i8, i8* %235, i64 -1
  %285 = getelementptr inbounds i8, i8* %284, i64 -8
  %286 = getelementptr inbounds i8, i8* %242, i64 -16
  %287 = getelementptr inbounds i8, i8* %285, i64 -7
  br label %288

288:                                              ; preds = %288, %270
  %289 = phi i64 [ 0, %270 ], [ %319, %288 ]
  %290 = phi i64 [ %271, %270 ], [ %320, %288 ]
  %291 = sub i64 0, %289
  %292 = sub i64 0, %289
  %293 = getelementptr inbounds i8, i8* %274, i64 %292
  %294 = bitcast i8* %293 to <2 x i64>*
  %295 = load <2 x i64>, <2 x i64>* %294, align 1, !alias.scope !190
  %296 = getelementptr inbounds i8, i8* %275, i64 %291
  %297 = bitcast i8* %296 to <2 x i64>*
  store <2 x i64> %295, <2 x i64>* %297, align 1, !alias.scope !193, !noalias !190
  %298 = sub nuw nsw i64 -16, %289
  %299 = sub nuw nsw i64 -16, %289
  %300 = getelementptr inbounds i8, i8* %278, i64 %299
  %301 = bitcast i8* %300 to <2 x i64>*
  %302 = load <2 x i64>, <2 x i64>* %301, align 1, !alias.scope !190
  %303 = getelementptr inbounds i8, i8* %279, i64 %298
  %304 = bitcast i8* %303 to <2 x i64>*
  store <2 x i64> %302, <2 x i64>* %304, align 1, !alias.scope !193, !noalias !190
  %305 = sub nuw nsw i64 -32, %289
  %306 = sub nuw nsw i64 -32, %289
  %307 = getelementptr inbounds i8, i8* %282, i64 %306
  %308 = bitcast i8* %307 to <2 x i64>*
  %309 = load <2 x i64>, <2 x i64>* %308, align 1, !alias.scope !190
  %310 = getelementptr inbounds i8, i8* %283, i64 %305
  %311 = bitcast i8* %310 to <2 x i64>*
  store <2 x i64> %309, <2 x i64>* %311, align 1, !alias.scope !193, !noalias !190
  %312 = sub nuw nsw i64 -48, %289
  %313 = sub nuw nsw i64 -48, %289
  %314 = getelementptr inbounds i8, i8* %286, i64 %313
  %315 = bitcast i8* %314 to <2 x i64>*
  %316 = load <2 x i64>, <2 x i64>* %315, align 1, !alias.scope !190
  %317 = getelementptr inbounds i8, i8* %287, i64 %312
  %318 = bitcast i8* %317 to <2 x i64>*
  store <2 x i64> %316, <2 x i64>* %318, align 1, !alias.scope !193, !noalias !190
  %319 = add i64 %289, 64
  %320 = add i64 %290, -4
  %321 = icmp eq i64 %320, 0
  br i1 %321, label %322, label %288, !llvm.loop !195

322:                                              ; preds = %288, %259
  %323 = phi i64 [ 0, %259 ], [ %319, %288 ]
  %324 = icmp eq i64 %268, 0
  br i1 %324, label %343, label %325

325:                                              ; preds = %322
  %326 = getelementptr i8, i8* %235, i64 -1
  %327 = getelementptr inbounds i8, i8* %326, i64 -8
  %328 = getelementptr inbounds i8, i8* %242, i64 -16
  %329 = getelementptr inbounds i8, i8* %327, i64 -7
  br label %330

330:                                              ; preds = %330, %325
  %331 = phi i64 [ %323, %325 ], [ %340, %330 ]
  %332 = phi i64 [ %268, %325 ], [ %341, %330 ]
  %333 = sub i64 0, %331
  %334 = sub i64 0, %331
  %335 = getelementptr inbounds i8, i8* %328, i64 %334
  %336 = bitcast i8* %335 to <2 x i64>*
  %337 = load <2 x i64>, <2 x i64>* %336, align 1, !alias.scope !190
  %338 = getelementptr inbounds i8, i8* %329, i64 %333
  %339 = bitcast i8* %338 to <2 x i64>*
  store <2 x i64> %337, <2 x i64>* %339, align 1, !alias.scope !193, !noalias !190
  %340 = add i64 %331, 16
  %341 = add i64 %332, -1
  %342 = icmp eq i64 %341, 0
  br i1 %342, label %343, label %330, !llvm.loop !196

343:                                              ; preds = %330, %322
  %344 = icmp eq i64 %248, %260
  br i1 %344, label %355, label %345

345:                                              ; preds = %343, %250, %245
  %346 = phi i8* [ %235, %250 ], [ %235, %245 ], [ %262, %343 ]
  %347 = phi i8* [ %242, %250 ], [ %242, %245 ], [ %264, %343 ]
  br label %348

348:                                              ; preds = %345, %348
  %349 = phi i8* [ %351, %348 ], [ %346, %345 ]
  %350 = phi i8* [ %352, %348 ], [ %347, %345 ]
  %351 = getelementptr inbounds i8, i8* %349, i64 -1
  %352 = getelementptr inbounds i8, i8* %350, i64 -1
  %353 = load i8, i8* %352, align 1
  store i8 %353, i8* %351, align 1
  %354 = icmp eq i8* %352, %241
  br i1 %354, label %355, label %348, !llvm.loop !197

355:                                              ; preds = %348, %343, %232
  %356 = phi i8* [ %235, %232 ], [ %262, %343 ], [ %351, %348 ]
  %357 = ptrtoint i8* %356 to i64
  store i64 %357, i64* %197, align 8
  store i64 %239, i64* %196, align 8
  store i64 %237, i64* %205, align 8
  br label %358

358:                                              ; preds = %190, %355
  tail call void @_ZN2v88internal13EhFrameWriter12WriteULeb128Ej(%"class.v8::internal::EhFrameWriter"* %0, i32 %1)
  br label %359

359:                                              ; preds = %179, %14, %358
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal13EhFrameWriter6FinishEi(%"class.v8::internal::EhFrameWriter"*, i32) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 5, i32 0
  %4 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 5, i32 0, i32 0, i32 1
  %5 = bitcast i8** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast %"class.std::__1::vector"* %3 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %6, %8
  %10 = trunc i64 %9 to i32
  %11 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 0
  %12 = load i32, i32* %11, align 8
  %13 = sub nsw i32 %10, %12
  %14 = add i32 %13, 3
  %15 = and i32 %14, -8
  %16 = sub i32 4, %13
  %17 = add i32 %16, %15
  %18 = load atomic i8, i8* bitcast (i64* @_ZGVZN2v88internal13EhFrameWriter25WritePaddingToAlignedSizeEiE8kPadding to i8*) acquire, align 8
  %19 = icmp eq i8 %18, 0
  br i1 %19, label %20, label %25, !prof !37

20:                                               ; preds = %2
  %21 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN2v88internal13EhFrameWriter25WritePaddingToAlignedSizeEiE8kPadding) #6
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %25, label %23

23:                                               ; preds = %20
  store i64 0, i64* bitcast ([8 x i8]* @_ZZN2v88internal13EhFrameWriter25WritePaddingToAlignedSizeEiE8kPadding to i64*), align 8
  %24 = tail call {}* @llvm.invariant.start.p0i8(i64 8, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @_ZZN2v88internal13EhFrameWriter25WritePaddingToAlignedSizeEiE8kPadding, i64 0, i64 0)) #6
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZN2v88internal13EhFrameWriter25WritePaddingToAlignedSizeEiE8kPadding) #6
  br label %25

25:                                               ; preds = %2, %20, %23
  %26 = load i8*, i8** %4, align 8
  %27 = sext i32 %17 to i64
  %28 = getelementptr inbounds [8 x i8], [8 x i8]* @_ZZN2v88internal13EhFrameWriter25WritePaddingToAlignedSizeEiE8kPadding, i64 0, i64 %27
  %29 = tail call i8* @_ZNSt3__16vectorIhN2v88internal13ZoneAllocatorIhEEE6insertIPKhEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsISA_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSE_IS8_EESA_SA_(%"class.std::__1::vector"* %3, i8* %26, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @_ZZN2v88internal13EhFrameWriter25WritePaddingToAlignedSizeEiE8kPadding, i64 0, i64 0), i8* %28) #6
  %30 = load i64, i64* %5, align 8
  %31 = load i64, i64* %7, align 8
  %32 = sub i64 %30, %31
  %33 = trunc i64 %32 to i32
  %34 = load i32, i32* %11, align 8
  %35 = sub i32 -4, %34
  %36 = add i32 %35, %33
  %37 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 5, i32 0, i32 0, i32 0
  %38 = bitcast i8** %37 to i64*
  %39 = sext i32 %34 to i64
  %40 = add i64 %31, %39
  %41 = inttoptr i64 %40 to i32*
  store i32 %36, i32* %41, align 1
  %42 = load i32, i32* %11, align 8
  %43 = add nsw i32 %42, 8
  %44 = add i32 %1, 7
  %45 = and i32 %44, -8
  %46 = add nsw i32 %45, %43
  %47 = sub nsw i32 0, %46
  %48 = load i64, i64* %38, align 8
  %49 = sext i32 %43 to i64
  %50 = add i64 %48, %49
  %51 = inttoptr i64 %50 to i32*
  store i32 %47, i32* %51, align 1
  %52 = load i32, i32* %11, align 8
  %53 = add nsw i32 %52, 12
  %54 = load i64, i64* %38, align 8
  %55 = sext i32 %53 to i64
  %56 = add i64 %54, %55
  %57 = inttoptr i64 %56 to i32*
  store i32 %1, i32* %57, align 1
  %58 = load i8*, i8** %4, align 8
  %59 = tail call i8* @_ZNSt3__16vectorIhN2v88internal13ZoneAllocatorIhEEE6insertIPKhEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsISA_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSE_IS8_EESA_SA_(%"class.std::__1::vector"* %3, i8* %58, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @_ZZN2v88internal13EhFrameWriter6FinishEiE11kTerminator, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @_ZZN2v88internal13EhFrameWriter6FinishEiE11kTerminator, i64 1, i64 0)) #6
  tail call void @_ZN2v88internal13EhFrameWriter15WriteEhFrameHdrEi(%"class.v8::internal::EhFrameWriter"* %0, i32 %1)
  %60 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 2
  store i32 2, i32* %60, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN2v88internal13EhFrameWriter10GetEhFrameEPNS0_8CodeDescE(%"class.v8::internal::EhFrameWriter"* nocapture readonly, %"class.v8::internal::CodeDesc"* nocapture) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 5, i32 0
  %4 = getelementptr inbounds %"class.v8::internal::EhFrameWriter", %"class.v8::internal::EhFrameWriter"* %0, i64 0, i32 5, i32 0, i32 0, i32 1
  %5 = bitcast i8** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast %"class.std::__1::vector"* %3 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %6, %8
  %10 = trunc i64 %9 to i32
  %11 = getelementptr inbounds %"class.v8::internal::CodeDesc", %"class.v8::internal::CodeDesc"* %1, i64 0, i32 14
  store i32 %10, i32* %11, align 8
  %12 = load i64, i64* %7, align 8
  %13 = getelementptr inbounds %"class.v8::internal::CodeDesc", %"class.v8::internal::CodeDesc"* %1, i64 0, i32 13
  %14 = bitcast i8** %13 to i64*
  store i64 %12, i64* %14, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2v88internal15EhFrameIterator14GetNextULeb128Ev(%"class.v8::internal::EhFrameIterator"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::EhFrameIterator", %"class.v8::internal::EhFrameIterator"* %0, i64 0, i32 1
  %3 = load i8*, i8** %2, align 8
  br label %4

4:                                                ; preds = %4, %1
  %5 = phi i8* [ %3, %1 ], [ %14, %4 ]
  %6 = phi i32 [ 0, %1 ], [ %12, %4 ]
  %7 = phi i32 [ 0, %1 ], [ %13, %4 ]
  %8 = load i8, i8* %5, align 1
  %9 = and i8 %8, 127
  %10 = zext i8 %9 to i32
  %11 = shl i32 %10, %7
  %12 = or i32 %11, %6
  %13 = add nuw nsw i32 %7, 7
  %14 = getelementptr inbounds i8, i8* %5, i64 1
  %15 = icmp slt i8 %8, 0
  br i1 %15, label %4, label %16

16:                                               ; preds = %4
  %17 = ptrtoint i8* %14 to i64
  %18 = ptrtoint i8* %3 to i64
  %19 = sub i64 %17, %18
  %20 = shl i64 %19, 32
  %21 = ashr exact i64 %20, 32
  %22 = getelementptr inbounds i8, i8* %3, i64 %21
  store i8* %22, i8** %2, align 8
  ret i32 %12
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @_ZN2v88internal15EhFrameIterator13DecodeULeb128EPKhPi(i8*, i32* nocapture) local_unnamed_addr #4 align 2 {
  br label %3

3:                                                ; preds = %3, %2
  %4 = phi i8* [ %0, %2 ], [ %13, %3 ]
  %5 = phi i32 [ 0, %2 ], [ %11, %3 ]
  %6 = phi i32 [ 0, %2 ], [ %12, %3 ]
  %7 = load i8, i8* %4, align 1
  %8 = and i8 %7, 127
  %9 = zext i8 %8 to i32
  %10 = shl i32 %9, %6
  %11 = or i32 %10, %5
  %12 = add nuw nsw i32 %6, 7
  %13 = getelementptr inbounds i8, i8* %4, i64 1
  %14 = icmp slt i8 %7, 0
  br i1 %14, label %3, label %15

15:                                               ; preds = %3
  %16 = ptrtoint i8* %13 to i64
  %17 = ptrtoint i8* %0 to i64
  %18 = sub i64 %16, %17
  %19 = trunc i64 %18 to i32
  store i32 %19, i32* %1, align 4
  ret i32 %11
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2v88internal15EhFrameIterator14GetNextSLeb128Ev(%"class.v8::internal::EhFrameIterator"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::EhFrameIterator", %"class.v8::internal::EhFrameIterator"* %0, i64 0, i32 1
  %3 = load i8*, i8** %2, align 8
  br label %4

4:                                                ; preds = %4, %1
  %5 = phi i32 [ 0, %1 ], [ %13, %4 ]
  %6 = phi i32 [ 0, %1 ], [ %14, %4 ]
  %7 = phi i8* [ %3, %1 ], [ %8, %4 ]
  %8 = getelementptr inbounds i8, i8* %7, i64 1
  %9 = load i8, i8* %7, align 1
  %10 = and i8 %9, 127
  %11 = zext i8 %10 to i32
  %12 = shl i32 %11, %6
  %13 = or i32 %12, %5
  %14 = add nuw nsw i32 %6, 7
  %15 = icmp slt i8 %9, 0
  br i1 %15, label %4, label %16

16:                                               ; preds = %4
  %17 = and i8 %9, 64
  %18 = icmp eq i8 %17, 0
  %19 = zext i32 %14 to i64
  %20 = shl i64 -1, %19
  %21 = trunc i64 %20 to i32
  %22 = select i1 %18, i32 0, i32 %21
  %23 = or i32 %13, %22
  %24 = ptrtoint i8* %8 to i64
  %25 = ptrtoint i8* %3 to i64
  %26 = sub i64 %24, %25
  %27 = shl i64 %26, 32
  %28 = ashr exact i64 %27, 32
  %29 = getelementptr inbounds i8, i8* %3, i64 %28
  store i8* %29, i8** %2, align 8
  ret i32 %23
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @_ZN2v88internal15EhFrameIterator13DecodeSLeb128EPKhPi(i8*, i32* nocapture) local_unnamed_addr #4 align 2 {
  br label %3

3:                                                ; preds = %3, %2
  %4 = phi i32 [ 0, %2 ], [ %12, %3 ]
  %5 = phi i32 [ 0, %2 ], [ %13, %3 ]
  %6 = phi i8* [ %0, %2 ], [ %7, %3 ]
  %7 = getelementptr inbounds i8, i8* %6, i64 1
  %8 = load i8, i8* %6, align 1
  %9 = and i8 %8, 127
  %10 = zext i8 %9 to i32
  %11 = shl i32 %10, %5
  %12 = or i32 %11, %4
  %13 = add nuw nsw i32 %5, 7
  %14 = icmp slt i8 %8, 0
  br i1 %14, label %3, label %15

15:                                               ; preds = %3
  %16 = and i8 %8, 64
  %17 = icmp eq i8 %16, 0
  %18 = zext i32 %13 to i64
  %19 = shl i64 -1, %18
  %20 = trunc i64 %19 to i32
  %21 = select i1 %17, i32 0, i32 %20
  %22 = or i32 %12, %21
  %23 = ptrtoint i8* %7 to i64
  %24 = ptrtoint i8* %0 to i64
  %25 = sub i64 %23, %24
  %26 = trunc i64 %25 to i32
  store i32 %26, i32* %1, align 4
  ret i32 %22
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #5

declare i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"*, i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNSt3__16vectorIhN2v88internal13ZoneAllocatorIhEEE6insertIPKhEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsISA_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSE_IS8_EESA_SA_(%"class.std::__1::vector"*, i8*, i8*, i8*) local_unnamed_addr #0 comdat align 2 {
  %5 = ptrtoint i8* %1 to i64
  %6 = ptrtoint i8* %2 to i64
  %7 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %8 = ptrtoint i8* %3 to i64
  %9 = sub i64 %8, %6
  %10 = icmp sgt i64 %9, 0
  br i1 %10, label %11, label %636

11:                                               ; preds = %4
  %12 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %13 = bitcast i8** %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %16 = load i8*, i8** %15, align 8
  %17 = ptrtoint i8* %16 to i64
  %18 = sub i64 %14, %17
  %19 = icmp sgt i64 %9, %18
  %20 = bitcast i8** %15 to i64*
  br i1 %19, label %268, label %21

21:                                               ; preds = %11
  %22 = sub i64 %17, %5
  %23 = icmp sgt i64 %9, %22
  br i1 %23, label %24, label %141

24:                                               ; preds = %21
  %25 = getelementptr inbounds i8, i8* %2, i64 %22
  %26 = icmp eq i8* %25, %3
  br i1 %26, label %136, label %27

27:                                               ; preds = %24
  %28 = sub i64 %5, %6
  %29 = sub i64 %28, %17
  %30 = getelementptr i8, i8* %3, i64 %29
  %31 = ptrtoint i8* %30 to i64
  %32 = icmp ult i8* %30, inttoptr (i64 32 to i8*)
  br i1 %32, label %123, label %33

33:                                               ; preds = %27
  %34 = sub i64 %5, %6
  %35 = sub i64 %34, %17
  %36 = getelementptr i8, i8* %3, i64 %35
  %37 = ptrtoint i8* %36 to i64
  %38 = getelementptr i8, i8* %16, i64 %37
  %39 = icmp ult i8* %16, %3
  %40 = icmp ult i8* %25, %38
  %41 = and i1 %39, %40
  br i1 %41, label %123, label %42

42:                                               ; preds = %33
  %43 = and i64 %31, -32
  %44 = getelementptr i8, i8* %16, i64 %43
  %45 = getelementptr i8, i8* %25, i64 %43
  %46 = add i64 %43, -32
  %47 = lshr exact i64 %46, 5
  %48 = add nuw nsw i64 %47, 1
  %49 = and i64 %48, 3
  %50 = icmp ult i64 %46, 96
  br i1 %50, label %102, label %51

51:                                               ; preds = %42
  %52 = sub nsw i64 %48, %49
  br label %53

53:                                               ; preds = %53, %51
  %54 = phi i64 [ 0, %51 ], [ %99, %53 ]
  %55 = phi i64 [ %52, %51 ], [ %100, %53 ]
  %56 = getelementptr i8, i8* %16, i64 %54
  %57 = getelementptr i8, i8* %25, i64 %54
  %58 = bitcast i8* %57 to <16 x i8>*
  %59 = load <16 x i8>, <16 x i8>* %58, align 1, !alias.scope !198
  %60 = getelementptr i8, i8* %57, i64 16
  %61 = bitcast i8* %60 to <16 x i8>*
  %62 = load <16 x i8>, <16 x i8>* %61, align 1, !alias.scope !198
  %63 = bitcast i8* %56 to <16 x i8>*
  store <16 x i8> %59, <16 x i8>* %63, align 1, !alias.scope !201, !noalias !198
  %64 = getelementptr i8, i8* %56, i64 16
  %65 = bitcast i8* %64 to <16 x i8>*
  store <16 x i8> %62, <16 x i8>* %65, align 1, !alias.scope !201, !noalias !198
  %66 = or i64 %54, 32
  %67 = getelementptr i8, i8* %16, i64 %66
  %68 = getelementptr i8, i8* %25, i64 %66
  %69 = bitcast i8* %68 to <16 x i8>*
  %70 = load <16 x i8>, <16 x i8>* %69, align 1, !alias.scope !198
  %71 = getelementptr i8, i8* %68, i64 16
  %72 = bitcast i8* %71 to <16 x i8>*
  %73 = load <16 x i8>, <16 x i8>* %72, align 1, !alias.scope !198
  %74 = bitcast i8* %67 to <16 x i8>*
  store <16 x i8> %70, <16 x i8>* %74, align 1, !alias.scope !201, !noalias !198
  %75 = getelementptr i8, i8* %67, i64 16
  %76 = bitcast i8* %75 to <16 x i8>*
  store <16 x i8> %73, <16 x i8>* %76, align 1, !alias.scope !201, !noalias !198
  %77 = or i64 %54, 64
  %78 = getelementptr i8, i8* %16, i64 %77
  %79 = getelementptr i8, i8* %25, i64 %77
  %80 = bitcast i8* %79 to <16 x i8>*
  %81 = load <16 x i8>, <16 x i8>* %80, align 1, !alias.scope !198
  %82 = getelementptr i8, i8* %79, i64 16
  %83 = bitcast i8* %82 to <16 x i8>*
  %84 = load <16 x i8>, <16 x i8>* %83, align 1, !alias.scope !198
  %85 = bitcast i8* %78 to <16 x i8>*
  store <16 x i8> %81, <16 x i8>* %85, align 1, !alias.scope !201, !noalias !198
  %86 = getelementptr i8, i8* %78, i64 16
  %87 = bitcast i8* %86 to <16 x i8>*
  store <16 x i8> %84, <16 x i8>* %87, align 1, !alias.scope !201, !noalias !198
  %88 = or i64 %54, 96
  %89 = getelementptr i8, i8* %16, i64 %88
  %90 = getelementptr i8, i8* %25, i64 %88
  %91 = bitcast i8* %90 to <16 x i8>*
  %92 = load <16 x i8>, <16 x i8>* %91, align 1, !alias.scope !198
  %93 = getelementptr i8, i8* %90, i64 16
  %94 = bitcast i8* %93 to <16 x i8>*
  %95 = load <16 x i8>, <16 x i8>* %94, align 1, !alias.scope !198
  %96 = bitcast i8* %89 to <16 x i8>*
  store <16 x i8> %92, <16 x i8>* %96, align 1, !alias.scope !201, !noalias !198
  %97 = getelementptr i8, i8* %89, i64 16
  %98 = bitcast i8* %97 to <16 x i8>*
  store <16 x i8> %95, <16 x i8>* %98, align 1, !alias.scope !201, !noalias !198
  %99 = add i64 %54, 128
  %100 = add i64 %55, -4
  %101 = icmp eq i64 %100, 0
  br i1 %101, label %102, label %53, !llvm.loop !203

102:                                              ; preds = %53, %42
  %103 = phi i64 [ 0, %42 ], [ %99, %53 ]
  %104 = icmp eq i64 %49, 0
  br i1 %104, label %121, label %105

105:                                              ; preds = %102, %105
  %106 = phi i64 [ %118, %105 ], [ %103, %102 ]
  %107 = phi i64 [ %119, %105 ], [ %49, %102 ]
  %108 = getelementptr i8, i8* %16, i64 %106
  %109 = getelementptr i8, i8* %25, i64 %106
  %110 = bitcast i8* %109 to <16 x i8>*
  %111 = load <16 x i8>, <16 x i8>* %110, align 1, !alias.scope !198
  %112 = getelementptr i8, i8* %109, i64 16
  %113 = bitcast i8* %112 to <16 x i8>*
  %114 = load <16 x i8>, <16 x i8>* %113, align 1, !alias.scope !198
  %115 = bitcast i8* %108 to <16 x i8>*
  store <16 x i8> %111, <16 x i8>* %115, align 1, !alias.scope !201, !noalias !198
  %116 = getelementptr i8, i8* %108, i64 16
  %117 = bitcast i8* %116 to <16 x i8>*
  store <16 x i8> %114, <16 x i8>* %117, align 1, !alias.scope !201, !noalias !198
  %118 = add i64 %106, 32
  %119 = add i64 %107, -1
  %120 = icmp eq i64 %119, 0
  br i1 %120, label %121, label %105, !llvm.loop !204

121:                                              ; preds = %105, %102
  %122 = icmp eq i64 %43, %31
  br i1 %122, label %133, label %123

123:                                              ; preds = %121, %33, %27
  %124 = phi i8* [ %16, %33 ], [ %16, %27 ], [ %44, %121 ]
  %125 = phi i8* [ %25, %33 ], [ %25, %27 ], [ %45, %121 ]
  br label %126

126:                                              ; preds = %123, %126
  %127 = phi i8* [ %131, %126 ], [ %124, %123 ]
  %128 = phi i8* [ %130, %126 ], [ %125, %123 ]
  %129 = load i8, i8* %128, align 1
  store i8 %129, i8* %127, align 1
  %130 = getelementptr inbounds i8, i8* %128, i64 1
  %131 = getelementptr inbounds i8, i8* %127, i64 1
  %132 = icmp eq i8* %130, %3
  br i1 %132, label %133, label %126, !llvm.loop !205

133:                                              ; preds = %126, %121
  %134 = phi i8* [ %44, %121 ], [ %131, %126 ]
  %135 = ptrtoint i8* %134 to i64
  br label %136

136:                                              ; preds = %133, %24
  %137 = phi i64 [ %17, %24 ], [ %135, %133 ]
  store i64 %137, i64* %20, align 8
  %138 = icmp sgt i64 %22, 0
  br i1 %138, label %139, label %636

139:                                              ; preds = %136
  %140 = inttoptr i64 %137 to i8*
  br label %141

141:                                              ; preds = %139, %21
  %142 = phi i64 [ %137, %139 ], [ %17, %21 ]
  %143 = phi i8* [ %140, %139 ], [ %16, %21 ]
  %144 = phi i8* [ %25, %139 ], [ %3, %21 ]
  %145 = getelementptr inbounds i8, i8* %1, i64 %9
  %146 = ptrtoint i8* %145 to i64
  %147 = sub i64 %142, %146
  %148 = getelementptr inbounds i8, i8* %1, i64 %147
  %149 = icmp ult i8* %148, %16
  br i1 %149, label %150, label %250

150:                                              ; preds = %141
  %151 = sub i64 %9, %142
  %152 = getelementptr i8, i8* %16, i64 %151
  %153 = ptrtoint i8* %152 to i64
  %154 = icmp ult i8* %152, inttoptr (i64 32 to i8*)
  br i1 %154, label %155, label %158

155:                                              ; preds = %245, %158, %150
  %156 = phi i8* [ %148, %158 ], [ %148, %150 ], [ %168, %245 ]
  %157 = phi i8* [ %143, %158 ], [ %143, %150 ], [ %169, %245 ]
  br label %256

158:                                              ; preds = %150
  %159 = sub i64 %9, %142
  %160 = getelementptr i8, i8* %16, i64 %159
  %161 = ptrtoint i8* %160 to i64
  %162 = getelementptr i8, i8* %143, i64 %161
  %163 = icmp ult i8* %143, %16
  %164 = icmp ult i8* %148, %162
  %165 = and i1 %163, %164
  br i1 %165, label %155, label %166

166:                                              ; preds = %158
  %167 = and i64 %153, -32
  %168 = getelementptr i8, i8* %148, i64 %167
  %169 = getelementptr i8, i8* %143, i64 %167
  %170 = add i64 %167, -32
  %171 = lshr exact i64 %170, 5
  %172 = add nuw nsw i64 %171, 1
  %173 = and i64 %172, 3
  %174 = icmp ult i64 %170, 96
  br i1 %174, label %226, label %175

175:                                              ; preds = %166
  %176 = sub nsw i64 %172, %173
  br label %177

177:                                              ; preds = %177, %175
  %178 = phi i64 [ 0, %175 ], [ %223, %177 ]
  %179 = phi i64 [ %176, %175 ], [ %224, %177 ]
  %180 = getelementptr i8, i8* %148, i64 %178
  %181 = getelementptr i8, i8* %143, i64 %178
  %182 = bitcast i8* %180 to <16 x i8>*
  %183 = load <16 x i8>, <16 x i8>* %182, align 1, !alias.scope !206
  %184 = getelementptr i8, i8* %180, i64 16
  %185 = bitcast i8* %184 to <16 x i8>*
  %186 = load <16 x i8>, <16 x i8>* %185, align 1, !alias.scope !206
  %187 = bitcast i8* %181 to <16 x i8>*
  store <16 x i8> %183, <16 x i8>* %187, align 1, !alias.scope !209, !noalias !206
  %188 = getelementptr i8, i8* %181, i64 16
  %189 = bitcast i8* %188 to <16 x i8>*
  store <16 x i8> %186, <16 x i8>* %189, align 1, !alias.scope !209, !noalias !206
  %190 = or i64 %178, 32
  %191 = getelementptr i8, i8* %148, i64 %190
  %192 = getelementptr i8, i8* %143, i64 %190
  %193 = bitcast i8* %191 to <16 x i8>*
  %194 = load <16 x i8>, <16 x i8>* %193, align 1, !alias.scope !206
  %195 = getelementptr i8, i8* %191, i64 16
  %196 = bitcast i8* %195 to <16 x i8>*
  %197 = load <16 x i8>, <16 x i8>* %196, align 1, !alias.scope !206
  %198 = bitcast i8* %192 to <16 x i8>*
  store <16 x i8> %194, <16 x i8>* %198, align 1, !alias.scope !209, !noalias !206
  %199 = getelementptr i8, i8* %192, i64 16
  %200 = bitcast i8* %199 to <16 x i8>*
  store <16 x i8> %197, <16 x i8>* %200, align 1, !alias.scope !209, !noalias !206
  %201 = or i64 %178, 64
  %202 = getelementptr i8, i8* %148, i64 %201
  %203 = getelementptr i8, i8* %143, i64 %201
  %204 = bitcast i8* %202 to <16 x i8>*
  %205 = load <16 x i8>, <16 x i8>* %204, align 1, !alias.scope !206
  %206 = getelementptr i8, i8* %202, i64 16
  %207 = bitcast i8* %206 to <16 x i8>*
  %208 = load <16 x i8>, <16 x i8>* %207, align 1, !alias.scope !206
  %209 = bitcast i8* %203 to <16 x i8>*
  store <16 x i8> %205, <16 x i8>* %209, align 1, !alias.scope !209, !noalias !206
  %210 = getelementptr i8, i8* %203, i64 16
  %211 = bitcast i8* %210 to <16 x i8>*
  store <16 x i8> %208, <16 x i8>* %211, align 1, !alias.scope !209, !noalias !206
  %212 = or i64 %178, 96
  %213 = getelementptr i8, i8* %148, i64 %212
  %214 = getelementptr i8, i8* %143, i64 %212
  %215 = bitcast i8* %213 to <16 x i8>*
  %216 = load <16 x i8>, <16 x i8>* %215, align 1, !alias.scope !206
  %217 = getelementptr i8, i8* %213, i64 16
  %218 = bitcast i8* %217 to <16 x i8>*
  %219 = load <16 x i8>, <16 x i8>* %218, align 1, !alias.scope !206
  %220 = bitcast i8* %214 to <16 x i8>*
  store <16 x i8> %216, <16 x i8>* %220, align 1, !alias.scope !209, !noalias !206
  %221 = getelementptr i8, i8* %214, i64 16
  %222 = bitcast i8* %221 to <16 x i8>*
  store <16 x i8> %219, <16 x i8>* %222, align 1, !alias.scope !209, !noalias !206
  %223 = add i64 %178, 128
  %224 = add i64 %179, -4
  %225 = icmp eq i64 %224, 0
  br i1 %225, label %226, label %177, !llvm.loop !211

226:                                              ; preds = %177, %166
  %227 = phi i64 [ 0, %166 ], [ %223, %177 ]
  %228 = icmp eq i64 %173, 0
  br i1 %228, label %245, label %229

229:                                              ; preds = %226, %229
  %230 = phi i64 [ %242, %229 ], [ %227, %226 ]
  %231 = phi i64 [ %243, %229 ], [ %173, %226 ]
  %232 = getelementptr i8, i8* %148, i64 %230
  %233 = getelementptr i8, i8* %143, i64 %230
  %234 = bitcast i8* %232 to <16 x i8>*
  %235 = load <16 x i8>, <16 x i8>* %234, align 1, !alias.scope !206
  %236 = getelementptr i8, i8* %232, i64 16
  %237 = bitcast i8* %236 to <16 x i8>*
  %238 = load <16 x i8>, <16 x i8>* %237, align 1, !alias.scope !206
  %239 = bitcast i8* %233 to <16 x i8>*
  store <16 x i8> %235, <16 x i8>* %239, align 1, !alias.scope !209, !noalias !206
  %240 = getelementptr i8, i8* %233, i64 16
  %241 = bitcast i8* %240 to <16 x i8>*
  store <16 x i8> %238, <16 x i8>* %241, align 1, !alias.scope !209, !noalias !206
  %242 = add i64 %230, 32
  %243 = add i64 %231, -1
  %244 = icmp eq i64 %243, 0
  br i1 %244, label %245, label %229, !llvm.loop !212

245:                                              ; preds = %229, %226
  %246 = icmp eq i64 %167, %153
  br i1 %246, label %247, label %155

247:                                              ; preds = %256, %245
  %248 = phi i8* [ %169, %245 ], [ %261, %256 ]
  %249 = ptrtoint i8* %248 to i64
  br label %250

250:                                              ; preds = %247, %141
  %251 = phi i64 [ %249, %247 ], [ %142, %141 ]
  store i64 %251, i64* %20, align 8
  %252 = icmp eq i64 %147, 0
  br i1 %252, label %263, label %253

253:                                              ; preds = %250
  %254 = sub i64 0, %147
  %255 = getelementptr inbounds i8, i8* %143, i64 %254
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %255, i8* align 1 %1, i64 %147, i1 false) #6
  br label %263

256:                                              ; preds = %155, %256
  %257 = phi i8* [ %260, %256 ], [ %156, %155 ]
  %258 = phi i8* [ %261, %256 ], [ %157, %155 ]
  %259 = load i8, i8* %257, align 1
  store i8 %259, i8* %258, align 1
  %260 = getelementptr inbounds i8, i8* %257, i64 1
  %261 = getelementptr inbounds i8, i8* %258, i64 1
  %262 = icmp eq i8* %260, %16
  br i1 %262, label %247, label %256, !llvm.loop !213

263:                                              ; preds = %250, %253
  %264 = ptrtoint i8* %144 to i64
  %265 = sub i64 %264, %6
  %266 = icmp eq i64 %265, 0
  br i1 %266, label %636, label %267

267:                                              ; preds = %263
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %1, i8* align 1 %2, i64 %265, i1 false) #6
  br label %636

268:                                              ; preds = %11
  %269 = bitcast %"class.std::__1::vector"* %0 to i64*
  %270 = load i64, i64* %269, align 8
  %271 = sub i64 %17, %270
  %272 = add i64 %271, %9
  %273 = icmp ugt i64 %272, 2147483647
  br i1 %273, label %274, label %276

274:                                              ; preds = %268
  %275 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %275) #7
  unreachable

276:                                              ; preds = %268
  %277 = sub i64 %14, %270
  %278 = icmp ult i64 %277, 1073741823
  br i1 %278, label %281, label %279

279:                                              ; preds = %276
  %280 = sub i64 %5, %270
  br label %287

281:                                              ; preds = %276
  %282 = shl i64 %277, 1
  %283 = icmp ult i64 %282, %272
  %284 = select i1 %283, i64 %272, i64 %282
  %285 = sub i64 %5, %270
  %286 = icmp eq i64 %284, 0
  br i1 %286, label %307, label %287

287:                                              ; preds = %279, %281
  %288 = phi i64 [ %280, %279 ], [ %285, %281 ]
  %289 = phi i64 [ 2147483647, %279 ], [ %284, %281 ]
  %290 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %291 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %290, align 8
  %292 = add nuw nsw i64 %289, 7
  %293 = and i64 %292, -8
  %294 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %291, i64 0, i32 2
  %295 = load i64, i64* %294, align 8
  %296 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %291, i64 0, i32 3
  %297 = load i64, i64* %296, align 8
  %298 = sub i64 %297, %295
  %299 = icmp ugt i64 %293, %298
  br i1 %299, label %300, label %302, !prof !2

300:                                              ; preds = %287
  %301 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %291, i64 %293) #6
  br label %304

302:                                              ; preds = %287
  %303 = add i64 %295, %293
  store i64 %303, i64* %294, align 8
  br label %304

304:                                              ; preds = %302, %300
  %305 = phi i64 [ %301, %300 ], [ %295, %302 ]
  %306 = inttoptr i64 %305 to i8*
  br label %307

307:                                              ; preds = %281, %304
  %308 = phi i64 [ %288, %304 ], [ %285, %281 ]
  %309 = phi i64 [ %289, %304 ], [ 0, %281 ]
  %310 = phi i8* [ %306, %304 ], [ null, %281 ]
  %311 = getelementptr inbounds i8, i8* %310, i64 %308
  %312 = getelementptr inbounds i8, i8* %310, i64 %309
  %313 = getelementptr inbounds i8, i8* %311, i64 %9
  %314 = icmp ult i64 %9, 32
  br i1 %314, label %400, label %315

315:                                              ; preds = %307
  %316 = icmp ult i8* %311, %3
  %317 = icmp ugt i8* %313, %2
  %318 = and i1 %316, %317
  br i1 %318, label %400, label %319

319:                                              ; preds = %315
  %320 = and i64 %9, -32
  %321 = getelementptr i8, i8* %311, i64 %320
  %322 = getelementptr i8, i8* %2, i64 %320
  %323 = add i64 %320, -32
  %324 = lshr exact i64 %323, 5
  %325 = add nuw nsw i64 %324, 1
  %326 = and i64 %325, 3
  %327 = icmp ult i64 %323, 96
  br i1 %327, label %379, label %328

328:                                              ; preds = %319
  %329 = sub nsw i64 %325, %326
  br label %330

330:                                              ; preds = %330, %328
  %331 = phi i64 [ 0, %328 ], [ %376, %330 ]
  %332 = phi i64 [ %329, %328 ], [ %377, %330 ]
  %333 = getelementptr i8, i8* %311, i64 %331
  %334 = getelementptr i8, i8* %2, i64 %331
  %335 = bitcast i8* %334 to <16 x i8>*
  %336 = load <16 x i8>, <16 x i8>* %335, align 1, !alias.scope !214
  %337 = getelementptr i8, i8* %334, i64 16
  %338 = bitcast i8* %337 to <16 x i8>*
  %339 = load <16 x i8>, <16 x i8>* %338, align 1, !alias.scope !214
  %340 = bitcast i8* %333 to <16 x i8>*
  store <16 x i8> %336, <16 x i8>* %340, align 1, !alias.scope !217, !noalias !214
  %341 = getelementptr i8, i8* %333, i64 16
  %342 = bitcast i8* %341 to <16 x i8>*
  store <16 x i8> %339, <16 x i8>* %342, align 1, !alias.scope !217, !noalias !214
  %343 = or i64 %331, 32
  %344 = getelementptr i8, i8* %311, i64 %343
  %345 = getelementptr i8, i8* %2, i64 %343
  %346 = bitcast i8* %345 to <16 x i8>*
  %347 = load <16 x i8>, <16 x i8>* %346, align 1, !alias.scope !214
  %348 = getelementptr i8, i8* %345, i64 16
  %349 = bitcast i8* %348 to <16 x i8>*
  %350 = load <16 x i8>, <16 x i8>* %349, align 1, !alias.scope !214
  %351 = bitcast i8* %344 to <16 x i8>*
  store <16 x i8> %347, <16 x i8>* %351, align 1, !alias.scope !217, !noalias !214
  %352 = getelementptr i8, i8* %344, i64 16
  %353 = bitcast i8* %352 to <16 x i8>*
  store <16 x i8> %350, <16 x i8>* %353, align 1, !alias.scope !217, !noalias !214
  %354 = or i64 %331, 64
  %355 = getelementptr i8, i8* %311, i64 %354
  %356 = getelementptr i8, i8* %2, i64 %354
  %357 = bitcast i8* %356 to <16 x i8>*
  %358 = load <16 x i8>, <16 x i8>* %357, align 1, !alias.scope !214
  %359 = getelementptr i8, i8* %356, i64 16
  %360 = bitcast i8* %359 to <16 x i8>*
  %361 = load <16 x i8>, <16 x i8>* %360, align 1, !alias.scope !214
  %362 = bitcast i8* %355 to <16 x i8>*
  store <16 x i8> %358, <16 x i8>* %362, align 1, !alias.scope !217, !noalias !214
  %363 = getelementptr i8, i8* %355, i64 16
  %364 = bitcast i8* %363 to <16 x i8>*
  store <16 x i8> %361, <16 x i8>* %364, align 1, !alias.scope !217, !noalias !214
  %365 = or i64 %331, 96
  %366 = getelementptr i8, i8* %311, i64 %365
  %367 = getelementptr i8, i8* %2, i64 %365
  %368 = bitcast i8* %367 to <16 x i8>*
  %369 = load <16 x i8>, <16 x i8>* %368, align 1, !alias.scope !214
  %370 = getelementptr i8, i8* %367, i64 16
  %371 = bitcast i8* %370 to <16 x i8>*
  %372 = load <16 x i8>, <16 x i8>* %371, align 1, !alias.scope !214
  %373 = bitcast i8* %366 to <16 x i8>*
  store <16 x i8> %369, <16 x i8>* %373, align 1, !alias.scope !217, !noalias !214
  %374 = getelementptr i8, i8* %366, i64 16
  %375 = bitcast i8* %374 to <16 x i8>*
  store <16 x i8> %372, <16 x i8>* %375, align 1, !alias.scope !217, !noalias !214
  %376 = add i64 %331, 128
  %377 = add i64 %332, -4
  %378 = icmp eq i64 %377, 0
  br i1 %378, label %379, label %330, !llvm.loop !219

379:                                              ; preds = %330, %319
  %380 = phi i64 [ 0, %319 ], [ %376, %330 ]
  %381 = icmp eq i64 %326, 0
  br i1 %381, label %398, label %382

382:                                              ; preds = %379, %382
  %383 = phi i64 [ %395, %382 ], [ %380, %379 ]
  %384 = phi i64 [ %396, %382 ], [ %326, %379 ]
  %385 = getelementptr i8, i8* %311, i64 %383
  %386 = getelementptr i8, i8* %2, i64 %383
  %387 = bitcast i8* %386 to <16 x i8>*
  %388 = load <16 x i8>, <16 x i8>* %387, align 1, !alias.scope !214
  %389 = getelementptr i8, i8* %386, i64 16
  %390 = bitcast i8* %389 to <16 x i8>*
  %391 = load <16 x i8>, <16 x i8>* %390, align 1, !alias.scope !214
  %392 = bitcast i8* %385 to <16 x i8>*
  store <16 x i8> %388, <16 x i8>* %392, align 1, !alias.scope !217, !noalias !214
  %393 = getelementptr i8, i8* %385, i64 16
  %394 = bitcast i8* %393 to <16 x i8>*
  store <16 x i8> %391, <16 x i8>* %394, align 1, !alias.scope !217, !noalias !214
  %395 = add i64 %383, 32
  %396 = add i64 %384, -1
  %397 = icmp eq i64 %396, 0
  br i1 %397, label %398, label %382, !llvm.loop !220

398:                                              ; preds = %382, %379
  %399 = icmp eq i64 %9, %320
  br i1 %399, label %410, label %400

400:                                              ; preds = %398, %315, %307
  %401 = phi i8* [ %311, %315 ], [ %311, %307 ], [ %321, %398 ]
  %402 = phi i8* [ %2, %315 ], [ %2, %307 ], [ %322, %398 ]
  br label %403

403:                                              ; preds = %400, %403
  %404 = phi i8* [ %407, %403 ], [ %401, %400 ]
  %405 = phi i8* [ %408, %403 ], [ %402, %400 ]
  %406 = load i8, i8* %405, align 1
  store i8 %406, i8* %404, align 1
  %407 = getelementptr inbounds i8, i8* %404, i64 1
  %408 = getelementptr inbounds i8, i8* %405, i64 1
  %409 = icmp eq i8* %313, %407
  br i1 %409, label %410, label %403, !llvm.loop !221

410:                                              ; preds = %403, %398
  %411 = ptrtoint i8* %312 to i64
  %412 = load i8*, i8** %7, align 8
  %413 = icmp eq i8* %412, %1
  br i1 %413, label %523, label %414

414:                                              ; preds = %410
  %415 = ptrtoint i8* %412 to i64
  %416 = ptrtoint i8* %1 to i64
  %417 = sub i64 %416, %415
  %418 = icmp ult i64 %417, 16
  br i1 %418, label %513, label %419

419:                                              ; preds = %414
  %420 = sub i64 %308, %5
  %421 = getelementptr i8, i8* %412, i64 %420
  %422 = ptrtoint i8* %421 to i64
  %423 = getelementptr i8, i8* %310, i64 %422
  %424 = icmp ult i8* %423, %1
  %425 = icmp ult i8* %412, %311
  %426 = and i1 %424, %425
  br i1 %426, label %513, label %427

427:                                              ; preds = %419
  %428 = and i64 %417, -16
  %429 = sub i64 0, %428
  %430 = getelementptr i8, i8* %311, i64 %429
  %431 = sub i64 0, %428
  %432 = getelementptr i8, i8* %1, i64 %431
  %433 = add i64 %428, -16
  %434 = lshr exact i64 %433, 4
  %435 = add nuw nsw i64 %434, 1
  %436 = and i64 %435, 3
  %437 = icmp ult i64 %433, 48
  br i1 %437, label %490, label %438

438:                                              ; preds = %427
  %439 = sub nsw i64 %435, %436
  %440 = getelementptr i8, i8* %311, i64 -1
  %441 = getelementptr inbounds i8, i8* %440, i64 -8
  %442 = getelementptr inbounds i8, i8* %1, i64 -16
  %443 = getelementptr inbounds i8, i8* %441, i64 -7
  %444 = getelementptr i8, i8* %311, i64 -1
  %445 = getelementptr inbounds i8, i8* %444, i64 -8
  %446 = getelementptr inbounds i8, i8* %1, i64 -16
  %447 = getelementptr inbounds i8, i8* %445, i64 -7
  %448 = getelementptr i8, i8* %311, i64 -1
  %449 = getelementptr inbounds i8, i8* %448, i64 -8
  %450 = getelementptr inbounds i8, i8* %1, i64 -16
  %451 = getelementptr inbounds i8, i8* %449, i64 -7
  %452 = getelementptr i8, i8* %311, i64 -1
  %453 = getelementptr inbounds i8, i8* %452, i64 -8
  %454 = getelementptr inbounds i8, i8* %1, i64 -16
  %455 = getelementptr inbounds i8, i8* %453, i64 -7
  br label %456

456:                                              ; preds = %456, %438
  %457 = phi i64 [ 0, %438 ], [ %487, %456 ]
  %458 = phi i64 [ %439, %438 ], [ %488, %456 ]
  %459 = sub i64 0, %457
  %460 = sub i64 0, %457
  %461 = getelementptr inbounds i8, i8* %442, i64 %460
  %462 = bitcast i8* %461 to <2 x i64>*
  %463 = load <2 x i64>, <2 x i64>* %462, align 1, !alias.scope !222
  %464 = getelementptr inbounds i8, i8* %443, i64 %459
  %465 = bitcast i8* %464 to <2 x i64>*
  store <2 x i64> %463, <2 x i64>* %465, align 1, !alias.scope !225, !noalias !222
  %466 = sub nuw nsw i64 -16, %457
  %467 = sub nuw nsw i64 -16, %457
  %468 = getelementptr inbounds i8, i8* %446, i64 %467
  %469 = bitcast i8* %468 to <2 x i64>*
  %470 = load <2 x i64>, <2 x i64>* %469, align 1, !alias.scope !222
  %471 = getelementptr inbounds i8, i8* %447, i64 %466
  %472 = bitcast i8* %471 to <2 x i64>*
  store <2 x i64> %470, <2 x i64>* %472, align 1, !alias.scope !225, !noalias !222
  %473 = sub nuw nsw i64 -32, %457
  %474 = sub nuw nsw i64 -32, %457
  %475 = getelementptr inbounds i8, i8* %450, i64 %474
  %476 = bitcast i8* %475 to <2 x i64>*
  %477 = load <2 x i64>, <2 x i64>* %476, align 1, !alias.scope !222
  %478 = getelementptr inbounds i8, i8* %451, i64 %473
  %479 = bitcast i8* %478 to <2 x i64>*
  store <2 x i64> %477, <2 x i64>* %479, align 1, !alias.scope !225, !noalias !222
  %480 = sub nuw nsw i64 -48, %457
  %481 = sub nuw nsw i64 -48, %457
  %482 = getelementptr inbounds i8, i8* %454, i64 %481
  %483 = bitcast i8* %482 to <2 x i64>*
  %484 = load <2 x i64>, <2 x i64>* %483, align 1, !alias.scope !222
  %485 = getelementptr inbounds i8, i8* %455, i64 %480
  %486 = bitcast i8* %485 to <2 x i64>*
  store <2 x i64> %484, <2 x i64>* %486, align 1, !alias.scope !225, !noalias !222
  %487 = add i64 %457, 64
  %488 = add i64 %458, -4
  %489 = icmp eq i64 %488, 0
  br i1 %489, label %490, label %456, !llvm.loop !227

490:                                              ; preds = %456, %427
  %491 = phi i64 [ 0, %427 ], [ %487, %456 ]
  %492 = icmp eq i64 %436, 0
  br i1 %492, label %511, label %493

493:                                              ; preds = %490
  %494 = getelementptr i8, i8* %311, i64 -1
  %495 = getelementptr inbounds i8, i8* %494, i64 -8
  %496 = getelementptr inbounds i8, i8* %1, i64 -16
  %497 = getelementptr inbounds i8, i8* %495, i64 -7
  br label %498

498:                                              ; preds = %498, %493
  %499 = phi i64 [ %491, %493 ], [ %508, %498 ]
  %500 = phi i64 [ %436, %493 ], [ %509, %498 ]
  %501 = sub i64 0, %499
  %502 = sub i64 0, %499
  %503 = getelementptr inbounds i8, i8* %496, i64 %502
  %504 = bitcast i8* %503 to <2 x i64>*
  %505 = load <2 x i64>, <2 x i64>* %504, align 1, !alias.scope !222
  %506 = getelementptr inbounds i8, i8* %497, i64 %501
  %507 = bitcast i8* %506 to <2 x i64>*
  store <2 x i64> %505, <2 x i64>* %507, align 1, !alias.scope !225, !noalias !222
  %508 = add i64 %499, 16
  %509 = add i64 %500, -1
  %510 = icmp eq i64 %509, 0
  br i1 %510, label %511, label %498, !llvm.loop !228

511:                                              ; preds = %498, %490
  %512 = icmp eq i64 %417, %428
  br i1 %512, label %523, label %513

513:                                              ; preds = %511, %419, %414
  %514 = phi i8* [ %311, %419 ], [ %311, %414 ], [ %430, %511 ]
  %515 = phi i8* [ %1, %419 ], [ %1, %414 ], [ %432, %511 ]
  br label %516

516:                                              ; preds = %513, %516
  %517 = phi i8* [ %519, %516 ], [ %514, %513 ]
  %518 = phi i8* [ %520, %516 ], [ %515, %513 ]
  %519 = getelementptr inbounds i8, i8* %517, i64 -1
  %520 = getelementptr inbounds i8, i8* %518, i64 -1
  %521 = load i8, i8* %520, align 1
  store i8 %521, i8* %519, align 1
  %522 = icmp eq i8* %520, %412
  br i1 %522, label %523, label %516, !llvm.loop !229

523:                                              ; preds = %516, %511, %410
  %524 = phi i8* [ %311, %410 ], [ %430, %511 ], [ %519, %516 ]
  %525 = load i8*, i8** %15, align 8
  %526 = icmp eq i8* %525, %1
  br i1 %526, label %632, label %527

527:                                              ; preds = %523
  %528 = ptrtoint i8* %525 to i64
  %529 = sub i64 %528, %5
  %530 = icmp ult i64 %529, 32
  br i1 %530, label %622, label %531

531:                                              ; preds = %527
  %532 = add i64 %308, %8
  %533 = sub i64 %532, %5
  %534 = sub i64 %533, %6
  %535 = getelementptr i8, i8* %525, i64 %534
  %536 = ptrtoint i8* %535 to i64
  %537 = getelementptr i8, i8* %310, i64 %536
  %538 = icmp ult i8* %313, %525
  %539 = icmp ugt i8* %537, %1
  %540 = and i1 %538, %539
  br i1 %540, label %622, label %541

541:                                              ; preds = %531
  %542 = and i64 %529, -32
  %543 = getelementptr i8, i8* %313, i64 %542
  %544 = getelementptr i8, i8* %1, i64 %542
  %545 = add i64 %542, -32
  %546 = lshr exact i64 %545, 5
  %547 = add nuw nsw i64 %546, 1
  %548 = and i64 %547, 3
  %549 = icmp ult i64 %545, 96
  br i1 %549, label %601, label %550

550:                                              ; preds = %541
  %551 = sub nsw i64 %547, %548
  br label %552

552:                                              ; preds = %552, %550
  %553 = phi i64 [ 0, %550 ], [ %598, %552 ]
  %554 = phi i64 [ %551, %550 ], [ %599, %552 ]
  %555 = getelementptr i8, i8* %313, i64 %553
  %556 = getelementptr i8, i8* %1, i64 %553
  %557 = bitcast i8* %556 to <16 x i8>*
  %558 = load <16 x i8>, <16 x i8>* %557, align 1, !alias.scope !230
  %559 = getelementptr i8, i8* %556, i64 16
  %560 = bitcast i8* %559 to <16 x i8>*
  %561 = load <16 x i8>, <16 x i8>* %560, align 1, !alias.scope !230
  %562 = bitcast i8* %555 to <16 x i8>*
  store <16 x i8> %558, <16 x i8>* %562, align 1, !alias.scope !233, !noalias !230
  %563 = getelementptr i8, i8* %555, i64 16
  %564 = bitcast i8* %563 to <16 x i8>*
  store <16 x i8> %561, <16 x i8>* %564, align 1, !alias.scope !233, !noalias !230
  %565 = or i64 %553, 32
  %566 = getelementptr i8, i8* %313, i64 %565
  %567 = getelementptr i8, i8* %1, i64 %565
  %568 = bitcast i8* %567 to <16 x i8>*
  %569 = load <16 x i8>, <16 x i8>* %568, align 1, !alias.scope !230
  %570 = getelementptr i8, i8* %567, i64 16
  %571 = bitcast i8* %570 to <16 x i8>*
  %572 = load <16 x i8>, <16 x i8>* %571, align 1, !alias.scope !230
  %573 = bitcast i8* %566 to <16 x i8>*
  store <16 x i8> %569, <16 x i8>* %573, align 1, !alias.scope !233, !noalias !230
  %574 = getelementptr i8, i8* %566, i64 16
  %575 = bitcast i8* %574 to <16 x i8>*
  store <16 x i8> %572, <16 x i8>* %575, align 1, !alias.scope !233, !noalias !230
  %576 = or i64 %553, 64
  %577 = getelementptr i8, i8* %313, i64 %576
  %578 = getelementptr i8, i8* %1, i64 %576
  %579 = bitcast i8* %578 to <16 x i8>*
  %580 = load <16 x i8>, <16 x i8>* %579, align 1, !alias.scope !230
  %581 = getelementptr i8, i8* %578, i64 16
  %582 = bitcast i8* %581 to <16 x i8>*
  %583 = load <16 x i8>, <16 x i8>* %582, align 1, !alias.scope !230
  %584 = bitcast i8* %577 to <16 x i8>*
  store <16 x i8> %580, <16 x i8>* %584, align 1, !alias.scope !233, !noalias !230
  %585 = getelementptr i8, i8* %577, i64 16
  %586 = bitcast i8* %585 to <16 x i8>*
  store <16 x i8> %583, <16 x i8>* %586, align 1, !alias.scope !233, !noalias !230
  %587 = or i64 %553, 96
  %588 = getelementptr i8, i8* %313, i64 %587
  %589 = getelementptr i8, i8* %1, i64 %587
  %590 = bitcast i8* %589 to <16 x i8>*
  %591 = load <16 x i8>, <16 x i8>* %590, align 1, !alias.scope !230
  %592 = getelementptr i8, i8* %589, i64 16
  %593 = bitcast i8* %592 to <16 x i8>*
  %594 = load <16 x i8>, <16 x i8>* %593, align 1, !alias.scope !230
  %595 = bitcast i8* %588 to <16 x i8>*
  store <16 x i8> %591, <16 x i8>* %595, align 1, !alias.scope !233, !noalias !230
  %596 = getelementptr i8, i8* %588, i64 16
  %597 = bitcast i8* %596 to <16 x i8>*
  store <16 x i8> %594, <16 x i8>* %597, align 1, !alias.scope !233, !noalias !230
  %598 = add i64 %553, 128
  %599 = add i64 %554, -4
  %600 = icmp eq i64 %599, 0
  br i1 %600, label %601, label %552, !llvm.loop !235

601:                                              ; preds = %552, %541
  %602 = phi i64 [ 0, %541 ], [ %598, %552 ]
  %603 = icmp eq i64 %548, 0
  br i1 %603, label %620, label %604

604:                                              ; preds = %601, %604
  %605 = phi i64 [ %617, %604 ], [ %602, %601 ]
  %606 = phi i64 [ %618, %604 ], [ %548, %601 ]
  %607 = getelementptr i8, i8* %313, i64 %605
  %608 = getelementptr i8, i8* %1, i64 %605
  %609 = bitcast i8* %608 to <16 x i8>*
  %610 = load <16 x i8>, <16 x i8>* %609, align 1, !alias.scope !230
  %611 = getelementptr i8, i8* %608, i64 16
  %612 = bitcast i8* %611 to <16 x i8>*
  %613 = load <16 x i8>, <16 x i8>* %612, align 1, !alias.scope !230
  %614 = bitcast i8* %607 to <16 x i8>*
  store <16 x i8> %610, <16 x i8>* %614, align 1, !alias.scope !233, !noalias !230
  %615 = getelementptr i8, i8* %607, i64 16
  %616 = bitcast i8* %615 to <16 x i8>*
  store <16 x i8> %613, <16 x i8>* %616, align 1, !alias.scope !233, !noalias !230
  %617 = add i64 %605, 32
  %618 = add i64 %606, -1
  %619 = icmp eq i64 %618, 0
  br i1 %619, label %620, label %604, !llvm.loop !236

620:                                              ; preds = %604, %601
  %621 = icmp eq i64 %529, %542
  br i1 %621, label %632, label %622

622:                                              ; preds = %620, %531, %527
  %623 = phi i8* [ %313, %531 ], [ %313, %527 ], [ %543, %620 ]
  %624 = phi i8* [ %1, %531 ], [ %1, %527 ], [ %544, %620 ]
  br label %625

625:                                              ; preds = %622, %625
  %626 = phi i8* [ %630, %625 ], [ %623, %622 ]
  %627 = phi i8* [ %629, %625 ], [ %624, %622 ]
  %628 = load i8, i8* %627, align 1
  store i8 %628, i8* %626, align 1
  %629 = getelementptr inbounds i8, i8* %627, i64 1
  %630 = getelementptr inbounds i8, i8* %626, i64 1
  %631 = icmp eq i8* %629, %525
  br i1 %631, label %632, label %625, !llvm.loop !237

632:                                              ; preds = %625, %620, %523
  %633 = phi i8* [ %313, %523 ], [ %543, %620 ], [ %630, %625 ]
  %634 = ptrtoint i8* %524 to i64
  %635 = ptrtoint i8* %633 to i64
  store i64 %634, i64* %269, align 8
  store i64 %635, i64* %20, align 8
  store i64 %411, i64* %13, align 8
  br label %636

636:                                              ; preds = %632, %136, %263, %267, %4
  %637 = phi i8* [ %1, %4 ], [ %1, %267 ], [ %1, %263 ], [ %1, %136 ], [ %311, %632 ]
  ret i8* %637
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nofree nounwind }
attributes #4 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{!4}
!4 = distinct !{!4, !5}
!5 = distinct !{!5, !"LVerDomain"}
!6 = !{!7}
!7 = distinct !{!7, !5}
!8 = distinct !{!8, !9}
!9 = !{!"llvm.loop.isvectorized", i32 1}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.unroll.disable"}
!12 = distinct !{!12, !9}
!13 = !{!14}
!14 = distinct !{!14, !15}
!15 = distinct !{!15, !"LVerDomain"}
!16 = !{!17}
!17 = distinct !{!17, !15}
!18 = distinct !{!18, !9}
!19 = distinct !{!19, !11}
!20 = distinct !{!20, !9}
!21 = !{!22}
!22 = distinct !{!22, !23}
!23 = distinct !{!23, !"LVerDomain"}
!24 = !{!25}
!25 = distinct !{!25, !23}
!26 = distinct !{!26, !9}
!27 = distinct !{!27, !11}
!28 = distinct !{!28, !9}
!29 = !{!30}
!30 = distinct !{!30, !31}
!31 = distinct !{!31, !"LVerDomain"}
!32 = !{!33}
!33 = distinct !{!33, !31}
!34 = distinct !{!34, !9}
!35 = distinct !{!35, !11}
!36 = distinct !{!36, !9}
!37 = !{!"branch_weights", i32 1, i32 1048575}
!38 = !{!39}
!39 = distinct !{!39, !40}
!40 = distinct !{!40, !"LVerDomain"}
!41 = !{!42}
!42 = distinct !{!42, !40}
!43 = distinct !{!43, !9}
!44 = distinct !{!44, !11}
!45 = distinct !{!45, !9}
!46 = !{!47}
!47 = distinct !{!47, !48}
!48 = distinct !{!48, !"LVerDomain"}
!49 = !{!50}
!50 = distinct !{!50, !48}
!51 = distinct !{!51, !9}
!52 = distinct !{!52, !11}
!53 = distinct !{!53, !9}
!54 = !{!55}
!55 = distinct !{!55, !56}
!56 = distinct !{!56, !"LVerDomain"}
!57 = !{!58}
!58 = distinct !{!58, !56}
!59 = distinct !{!59, !9}
!60 = distinct !{!60, !11}
!61 = distinct !{!61, !9}
!62 = !{!63}
!63 = distinct !{!63, !64}
!64 = distinct !{!64, !"LVerDomain"}
!65 = !{!66}
!66 = distinct !{!66, !64}
!67 = distinct !{!67, !9}
!68 = distinct !{!68, !11}
!69 = distinct !{!69, !9}
!70 = !{!71}
!71 = distinct !{!71, !72}
!72 = distinct !{!72, !"LVerDomain"}
!73 = !{!74}
!74 = distinct !{!74, !72}
!75 = distinct !{!75, !9}
!76 = distinct !{!76, !11}
!77 = distinct !{!77, !9}
!78 = !{!79}
!79 = distinct !{!79, !80}
!80 = distinct !{!80, !"LVerDomain"}
!81 = !{!82}
!82 = distinct !{!82, !80}
!83 = distinct !{!83, !9}
!84 = distinct !{!84, !11}
!85 = distinct !{!85, !9}
!86 = !{!87}
!87 = distinct !{!87, !88}
!88 = distinct !{!88, !"LVerDomain"}
!89 = !{!90}
!90 = distinct !{!90, !88}
!91 = distinct !{!91, !9}
!92 = distinct !{!92, !11}
!93 = distinct !{!93, !9}
!94 = !{!95}
!95 = distinct !{!95, !96}
!96 = distinct !{!96, !"LVerDomain"}
!97 = !{!98}
!98 = distinct !{!98, !96}
!99 = distinct !{!99, !9}
!100 = distinct !{!100, !11}
!101 = distinct !{!101, !9}
!102 = !{!103}
!103 = distinct !{!103, !104}
!104 = distinct !{!104, !"LVerDomain"}
!105 = !{!106}
!106 = distinct !{!106, !104}
!107 = distinct !{!107, !9}
!108 = distinct !{!108, !11}
!109 = distinct !{!109, !9}
!110 = !{!111}
!111 = distinct !{!111, !112}
!112 = distinct !{!112, !"LVerDomain"}
!113 = !{!114}
!114 = distinct !{!114, !112}
!115 = distinct !{!115, !9}
!116 = distinct !{!116, !11}
!117 = distinct !{!117, !9}
!118 = !{!119}
!119 = distinct !{!119, !120}
!120 = distinct !{!120, !"LVerDomain"}
!121 = !{!122}
!122 = distinct !{!122, !120}
!123 = distinct !{!123, !9}
!124 = distinct !{!124, !11}
!125 = distinct !{!125, !9}
!126 = !{!127}
!127 = distinct !{!127, !128}
!128 = distinct !{!128, !"LVerDomain"}
!129 = !{!130}
!130 = distinct !{!130, !128}
!131 = distinct !{!131, !9}
!132 = distinct !{!132, !11}
!133 = distinct !{!133, !9}
!134 = !{!135}
!135 = distinct !{!135, !136}
!136 = distinct !{!136, !"LVerDomain"}
!137 = !{!138}
!138 = distinct !{!138, !136}
!139 = distinct !{!139, !9}
!140 = distinct !{!140, !11}
!141 = distinct !{!141, !9}
!142 = !{!143}
!143 = distinct !{!143, !144}
!144 = distinct !{!144, !"LVerDomain"}
!145 = !{!146}
!146 = distinct !{!146, !144}
!147 = distinct !{!147, !9}
!148 = distinct !{!148, !11}
!149 = distinct !{!149, !9}
!150 = !{!151}
!151 = distinct !{!151, !152}
!152 = distinct !{!152, !"LVerDomain"}
!153 = !{!154}
!154 = distinct !{!154, !152}
!155 = distinct !{!155, !9}
!156 = distinct !{!156, !11}
!157 = distinct !{!157, !9}
!158 = !{!159}
!159 = distinct !{!159, !160}
!160 = distinct !{!160, !"LVerDomain"}
!161 = !{!162}
!162 = distinct !{!162, !160}
!163 = distinct !{!163, !9}
!164 = distinct !{!164, !11}
!165 = distinct !{!165, !9}
!166 = !{!167}
!167 = distinct !{!167, !168}
!168 = distinct !{!168, !"LVerDomain"}
!169 = !{!170}
!170 = distinct !{!170, !168}
!171 = distinct !{!171, !9}
!172 = distinct !{!172, !11}
!173 = distinct !{!173, !9}
!174 = !{!175}
!175 = distinct !{!175, !176}
!176 = distinct !{!176, !"LVerDomain"}
!177 = !{!178}
!178 = distinct !{!178, !176}
!179 = distinct !{!179, !9}
!180 = distinct !{!180, !11}
!181 = distinct !{!181, !9}
!182 = !{!183}
!183 = distinct !{!183, !184}
!184 = distinct !{!184, !"LVerDomain"}
!185 = !{!186}
!186 = distinct !{!186, !184}
!187 = distinct !{!187, !9}
!188 = distinct !{!188, !11}
!189 = distinct !{!189, !9}
!190 = !{!191}
!191 = distinct !{!191, !192}
!192 = distinct !{!192, !"LVerDomain"}
!193 = !{!194}
!194 = distinct !{!194, !192}
!195 = distinct !{!195, !9}
!196 = distinct !{!196, !11}
!197 = distinct !{!197, !9}
!198 = !{!199}
!199 = distinct !{!199, !200}
!200 = distinct !{!200, !"LVerDomain"}
!201 = !{!202}
!202 = distinct !{!202, !200}
!203 = distinct !{!203, !9}
!204 = distinct !{!204, !11}
!205 = distinct !{!205, !9}
!206 = !{!207}
!207 = distinct !{!207, !208}
!208 = distinct !{!208, !"LVerDomain"}
!209 = !{!210}
!210 = distinct !{!210, !208}
!211 = distinct !{!211, !9}
!212 = distinct !{!212, !11}
!213 = distinct !{!213, !9}
!214 = !{!215}
!215 = distinct !{!215, !216}
!216 = distinct !{!216, !"LVerDomain"}
!217 = !{!218}
!218 = distinct !{!218, !216}
!219 = distinct !{!219, !9}
!220 = distinct !{!220, !11}
!221 = distinct !{!221, !9}
!222 = !{!223}
!223 = distinct !{!223, !224}
!224 = distinct !{!224, !"LVerDomain"}
!225 = !{!226}
!226 = distinct !{!226, !224}
!227 = distinct !{!227, !9}
!228 = distinct !{!228, !11}
!229 = distinct !{!229, !9}
!230 = !{!231}
!231 = distinct !{!231, !232}
!232 = distinct !{!232, !"LVerDomain"}
!233 = !{!234}
!234 = distinct !{!234, !232}
!235 = distinct !{!235, !9}
!236 = distinct !{!236, !11}
!237 = distinct !{!237, !9}
