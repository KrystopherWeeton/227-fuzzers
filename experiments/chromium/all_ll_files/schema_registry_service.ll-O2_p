; ModuleID = '../../chrome/browser/policy/schema_registry_service.cc'
source_filename = "../../chrome/browser/policy/schema_registry_service.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.policy::SchemaRegistryService" = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.policy::SchemaRegistry"* }
%"class.policy::SchemaRegistry" = type <{ i32 (...)**, %class.scoped_refptr, %"class.base::ObserverList", %"class.base::ObserverList.12", [3 x i8], [5 x i8] }>
%class.scoped_refptr = type { %"class.policy::SchemaMap"* }
%"class.policy::SchemaMap" = type { %"class.base::RefCountedThreadSafe", %"class.std::__1::map" }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.1", %"class.std::__1::__compressed_pair.4" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { i64 }
%"class.base::ObserverList" = type <{ %"class.std::__1::vector", %"class.base::LinkedList", i64, i32, [4 x i8] }>
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.base::internal::UncheckedObserverAdapter"*, %"class.base::internal::UncheckedObserverAdapter"*, %"class.std::__1::__compressed_pair.7" }
%"class.base::internal::UncheckedObserverAdapter" = type { i8* }
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::__compressed_pair_elem.8" = type { %"class.base::internal::UncheckedObserverAdapter"* }
%"class.base::LinkedList" = type { %"class.base::LinkNode" }
%"class.base::LinkNode" = type { %"class.base::internal::LinkNodeBase" }
%"class.base::internal::LinkNodeBase" = type { %"class.base::internal::LinkNodeBase"*, %"class.base::internal::LinkNodeBase"* }
%"class.base::ObserverList.12" = type <{ %"class.std::__1::vector", %"class.base::LinkedList.13", i64, i32, [4 x i8] }>
%"class.base::LinkedList.13" = type { %"class.base::LinkNode.14" }
%"class.base::LinkNode.14" = type { %"class.base::internal::LinkNodeBase" }
%"class.policy::Schema" = type { %class.scoped_refptr.17, %"struct.policy::internal::SchemaNode"* }
%class.scoped_refptr.17 = type { %"class.policy::Schema::InternalStorage"* }
%"class.policy::Schema::InternalStorage" = type opaque
%"struct.policy::internal::SchemaNode" = type opaque
%"class.policy::CombinedSchemaRegistry" = type { %"class.policy::SchemaRegistry.base", %"class.policy::SchemaRegistry::Observer", %"class.policy::SchemaRegistry::InternalObserver", %"class.std::__1::set", %class.scoped_refptr }
%"class.policy::SchemaRegistry.base" = type <{ i32 (...)**, %class.scoped_refptr, %"class.base::ObserverList", %"class.base::ObserverList.12", [3 x i8] }>
%"class.policy::SchemaRegistry::Observer" = type { i32 (...)** }
%"class.policy::SchemaRegistry::InternalObserver" = type { i32 (...)** }
%"class.std::__1::set" = type { %"class.std::__1::__tree.18" }
%"class.std::__1::__tree.18" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.19", %"class.std::__1::__compressed_pair.23" }
%"class.std::__1::__compressed_pair.19" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__compressed_pair.23" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.policy::PolicyNamespace" = type { i32, %"class.std::__1::basic_string" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.27" }
%"class.std::__1::__compressed_pair.27" = type { %"struct.std::__1::__compressed_pair_elem.28" }
%"struct.std::__1::__compressed_pair_elem.28" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }

@_ZN6policy21SchemaRegistryServiceC1ENSt3__110unique_ptrINS_14SchemaRegistryENS1_14default_deleteIS3_EEEERKNS_6SchemaEPNS_22CombinedSchemaRegistryE = hidden unnamed_addr alias void (%"class.policy::SchemaRegistryService"*, %"class.policy::SchemaRegistry"*, %"class.policy::Schema"*, %"class.policy::CombinedSchemaRegistry"*), void (%"class.policy::SchemaRegistryService"*, %"class.policy::SchemaRegistry"*, %"class.policy::Schema"*, %"class.policy::CombinedSchemaRegistry"*)* @_ZN6policy21SchemaRegistryServiceC2ENSt3__110unique_ptrINS_14SchemaRegistryENS1_14default_deleteIS3_EEEERKNS_6SchemaEPNS_22CombinedSchemaRegistryE
@_ZN6policy21SchemaRegistryServiceD1Ev = hidden unnamed_addr alias void (%"class.policy::SchemaRegistryService"*), void (%"class.policy::SchemaRegistryService"*)* @_ZN6policy21SchemaRegistryServiceD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6policy21SchemaRegistryServiceC2ENSt3__110unique_ptrINS_14SchemaRegistryENS1_14default_deleteIS3_EEEERKNS_6SchemaEPNS_22CombinedSchemaRegistryE(%"class.policy::SchemaRegistryService"* nocapture, %"class.policy::SchemaRegistry"*, %"class.policy::Schema"* dereferenceable(16), %"class.policy::CombinedSchemaRegistry"*) unnamed_addr #0 align 2 {
  %5 = alloca %"struct.policy::PolicyNamespace", align 8
  %6 = alloca %"class.std::__1::basic_string", align 8
  %7 = ptrtoint %"class.policy::SchemaRegistry"* %1 to i64
  %8 = bitcast %"class.policy::SchemaRegistryService"* %0 to i64*
  store i64 %7, i64* %8, align 8
  %9 = getelementptr inbounds %"class.policy::Schema", %"class.policy::Schema"* %2, i64 0, i32 1
  %10 = load %"struct.policy::internal::SchemaNode"*, %"struct.policy::internal::SchemaNode"** %9, align 8
  %11 = icmp eq %"struct.policy::internal::SchemaNode"* %10, null
  br i1 %11, label %25, label %12

12:                                               ; preds = %4
  %13 = getelementptr inbounds %"class.policy::SchemaRegistryService", %"class.policy::SchemaRegistryService"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %14 = bitcast %"struct.policy::PolicyNamespace"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %14) #5
  %15 = bitcast %"class.std::__1::basic_string"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %15) #5
  %16 = bitcast %"class.std::__1::basic_string"* %6 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %17 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %16, i64 0, i32 1, i32 0
  store i8 0, i8* %17, align 1
  store i8 0, i8* %15, align 8
  call void @_ZN6policy15PolicyNamespaceC1ENS_12PolicyDomainERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE(%"struct.policy::PolicyNamespace"* nonnull %5, i32 0, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %6) #5
  call void @_ZN6policy14SchemaRegistry17RegisterComponentERKNS_15PolicyNamespaceERKNS_6SchemaE(%"class.policy::SchemaRegistry"* %1, %"struct.policy::PolicyNamespace"* nonnull dereferenceable(32) %5, %"class.policy::Schema"* dereferenceable(16) %2) #5
  call void @_ZN6policy15PolicyNamespaceD1Ev(%"struct.policy::PolicyNamespace"* nonnull %5) #5
  %18 = load i8, i8* %17, align 1
  %19 = icmp slt i8 %18, 0
  br i1 %19, label %20, label %23

20:                                               ; preds = %12
  %21 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %22 = load i8*, i8** %21, align 8
  call void @_ZdlPv(i8* %22) #6
  br label %23

23:                                               ; preds = %12, %20
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %15) #5
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %14) #5
  %24 = load %"class.policy::SchemaRegistry"*, %"class.policy::SchemaRegistry"** %13, align 8
  br label %25

25:                                               ; preds = %4, %23
  %26 = phi %"class.policy::SchemaRegistry"* [ %1, %4 ], [ %24, %23 ]
  call void @_ZN6policy14SchemaRegistry14SetDomainReadyENS_12PolicyDomainE(%"class.policy::SchemaRegistry"* %26, i32 0) #5
  %27 = icmp eq %"class.policy::CombinedSchemaRegistry"* %3, null
  br i1 %27, label %31, label %28

28:                                               ; preds = %25
  %29 = getelementptr inbounds %"class.policy::SchemaRegistryService", %"class.policy::SchemaRegistryService"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %30 = load %"class.policy::SchemaRegistry"*, %"class.policy::SchemaRegistry"** %29, align 8
  call void @_ZN6policy22CombinedSchemaRegistry5TrackEPNS_14SchemaRegistryE(%"class.policy::CombinedSchemaRegistry"* nonnull %3, %"class.policy::SchemaRegistry"* %30) #5
  br label %31

31:                                               ; preds = %28, %25
  ret void
}

declare void @_ZN6policy14SchemaRegistry17RegisterComponentERKNS_15PolicyNamespaceERKNS_6SchemaE(%"class.policy::SchemaRegistry"*, %"struct.policy::PolicyNamespace"* dereferenceable(32), %"class.policy::Schema"* dereferenceable(16)) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare void @_ZN6policy15PolicyNamespaceC1ENS_12PolicyDomainERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE(%"struct.policy::PolicyNamespace"*, i32, %"class.std::__1::basic_string"* dereferenceable(24)) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN6policy15PolicyNamespaceD1Ev(%"struct.policy::PolicyNamespace"*) unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

declare void @_ZN6policy14SchemaRegistry14SetDomainReadyENS_12PolicyDomainE(%"class.policy::SchemaRegistry"*, i32) local_unnamed_addr #1

declare void @_ZN6policy22CombinedSchemaRegistry5TrackEPNS_14SchemaRegistryE(%"class.policy::CombinedSchemaRegistry"*, %"class.policy::SchemaRegistry"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6policy21SchemaRegistryServiceD2Ev(%"class.policy::SchemaRegistryService"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.policy::SchemaRegistryService", %"class.policy::SchemaRegistryService"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %3 = load %"class.policy::SchemaRegistry"*, %"class.policy::SchemaRegistry"** %2, align 8
  store %"class.policy::SchemaRegistry"* null, %"class.policy::SchemaRegistry"** %2, align 8
  %4 = icmp eq %"class.policy::SchemaRegistry"* %3, null
  br i1 %4, label %10, label %5

5:                                                ; preds = %1
  %6 = bitcast %"class.policy::SchemaRegistry"* %3 to void (%"class.policy::SchemaRegistry"*)***
  %7 = load void (%"class.policy::SchemaRegistry"*)**, void (%"class.policy::SchemaRegistry"*)*** %6, align 8
  %8 = getelementptr inbounds void (%"class.policy::SchemaRegistry"*)*, void (%"class.policy::SchemaRegistry"*)** %7, i64 1
  %9 = load void (%"class.policy::SchemaRegistry"*)*, void (%"class.policy::SchemaRegistry"*)** %8, align 8
  tail call void %9(%"class.policy::SchemaRegistry"* nonnull %3) #5
  br label %10

10:                                               ; preds = %1, %5
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
