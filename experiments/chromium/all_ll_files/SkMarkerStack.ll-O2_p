; ModuleID = '../../third_party/skia/src/core/SkMarkerStack.cpp'
source_filename = "../../third_party/skia/src/core/SkMarkerStack.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.SkMarkerStack = type { %class.SkRefCnt.base, %"class.std::__1::vector" }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.SkMarkerStack::Rec"*, %"struct.SkMarkerStack::Rec"*, %"class.std::__1::__compressed_pair" }
%"struct.SkMarkerStack::Rec" = type <{ i8*, %class.SkM44, %class.SkM44, i32, [4 x i8] }>
%class.SkM44 = type { [16 x float] }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.SkMarkerStack::Rec"* }
%"class.std::__1::__vector_base_common" = type { i8 }

@constinit = private unnamed_addr constant [16 x float] [float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00], align 4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13SkMarkerStack9setMarkerEjRK5SkM44Pv(%class.SkMarkerStack*, i32, %class.SkM44* dereferenceable(64), i8*) local_unnamed_addr #0 align 2 {
  %5 = alloca %class.SkM44, align 4
  %6 = alloca [16 x float], align 8
  %7 = alloca [16 x float], align 8
  %8 = bitcast %class.SkM44* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %8) #7
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %8, i8* align 4 bitcast ([16 x float]* @constinit to i8*), i64 64, i1 false) #7
  %9 = call zeroext i1 @_ZNK5SkM446invertEPS_(%class.SkM44* %2, %class.SkM44* nonnull %5) #7
  %10 = getelementptr inbounds %class.SkMarkerStack, %class.SkMarkerStack* %0, i64 0, i32 1
  %11 = getelementptr inbounds %class.SkMarkerStack, %class.SkMarkerStack* %0, i64 0, i32 1, i32 0, i32 1
  %12 = load %"struct.SkMarkerStack::Rec"*, %"struct.SkMarkerStack::Rec"** %11, align 8
  %13 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %10, i64 0, i32 0, i32 0
  %14 = load %"struct.SkMarkerStack::Rec"*, %"struct.SkMarkerStack::Rec"** %13, align 8
  %15 = ptrtoint %"struct.SkMarkerStack::Rec"* %14 to i64
  br label %16

16:                                               ; preds = %24, %4
  %17 = phi %"struct.SkMarkerStack::Rec"* [ %12, %4 ], [ %20, %24 ]
  %18 = icmp eq %"struct.SkMarkerStack::Rec"* %17, %14
  br i1 %18, label %34, label %19

19:                                               ; preds = %16
  %20 = getelementptr inbounds %"struct.SkMarkerStack::Rec", %"struct.SkMarkerStack::Rec"* %17, i64 -1
  %21 = getelementptr inbounds %"struct.SkMarkerStack::Rec", %"struct.SkMarkerStack::Rec"* %20, i64 0, i32 0
  %22 = load i8*, i8** %21, align 8
  %23 = icmp eq i8* %22, %3
  br i1 %23, label %24, label %34

24:                                               ; preds = %19
  %25 = getelementptr inbounds %"struct.SkMarkerStack::Rec", %"struct.SkMarkerStack::Rec"* %17, i64 -1, i32 3
  %26 = load i32, i32* %25, align 8
  %27 = icmp eq i32 %26, %1
  br i1 %27, label %28, label %16

28:                                               ; preds = %24
  %29 = getelementptr inbounds %"struct.SkMarkerStack::Rec", %"struct.SkMarkerStack::Rec"* %17, i64 -1, i32 1
  %30 = bitcast %class.SkM44* %29 to i8*
  %31 = bitcast %class.SkM44* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %30, i8* align 4 %31, i64 64, i1 false)
  %32 = getelementptr inbounds %"struct.SkMarkerStack::Rec", %"struct.SkMarkerStack::Rec"* %17, i64 -1, i32 2
  %33 = bitcast %class.SkM44* %32 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %33, i8* nonnull align 4 %8, i64 64, i1 false)
  br label %109

34:                                               ; preds = %16, %19
  %35 = bitcast [16 x float]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %35)
  %36 = bitcast [16 x float]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %36)
  %37 = bitcast %class.SkM44* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %35, i8* align 4 %37, i64 64, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %36, i8* nonnull align 4 %8, i64 64, i1 false)
  %38 = getelementptr inbounds %class.SkMarkerStack, %class.SkMarkerStack* %0, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %39 = load %"struct.SkMarkerStack::Rec"*, %"struct.SkMarkerStack::Rec"** %38, align 8
  %40 = icmp ult %"struct.SkMarkerStack::Rec"* %12, %39
  %41 = ptrtoint %"struct.SkMarkerStack::Rec"* %39 to i64
  br i1 %40, label %42, label %52

42:                                               ; preds = %34
  %43 = getelementptr inbounds %"struct.SkMarkerStack::Rec", %"struct.SkMarkerStack::Rec"* %12, i64 0, i32 0
  store i8* %3, i8** %43, align 8
  %44 = getelementptr inbounds %"struct.SkMarkerStack::Rec", %"struct.SkMarkerStack::Rec"* %12, i64 0, i32 1
  %45 = bitcast %class.SkM44* %44 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %45, i8* nonnull align 8 %35, i64 64, i1 false)
  %46 = getelementptr inbounds %"struct.SkMarkerStack::Rec", %"struct.SkMarkerStack::Rec"* %12, i64 0, i32 2
  %47 = bitcast %class.SkM44* %46 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %47, i8* nonnull align 8 %36, i64 64, i1 false)
  %48 = getelementptr inbounds %"struct.SkMarkerStack::Rec", %"struct.SkMarkerStack::Rec"* %12, i64 0, i32 3
  store i32 %1, i32* %48, align 8
  %49 = getelementptr inbounds %"struct.SkMarkerStack::Rec", %"struct.SkMarkerStack::Rec"* %12, i64 1
  %50 = ptrtoint %"struct.SkMarkerStack::Rec"* %49 to i64
  %51 = bitcast %"struct.SkMarkerStack::Rec"** %11 to i64*
  store i64 %50, i64* %51, align 8
  br label %108

52:                                               ; preds = %34
  %53 = ptrtoint %"struct.SkMarkerStack::Rec"* %12 to i64
  %54 = bitcast %"struct.SkMarkerStack::Rec"** %11 to i64*
  %55 = bitcast %"class.std::__1::vector"* %10 to i64*
  %56 = sub i64 %53, %15
  %57 = sdiv exact i64 %56, 144
  %58 = add nsw i64 %57, 1
  %59 = icmp ugt i64 %58, 128102389400760775
  br i1 %59, label %60, label %62

60:                                               ; preds = %52
  %61 = bitcast %"class.std::__1::vector"* %10 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %61) #8
  unreachable

62:                                               ; preds = %52
  %63 = bitcast %"struct.SkMarkerStack::Rec"** %38 to i64*
  %64 = sub i64 %41, %15
  %65 = sdiv exact i64 %64, 144
  %66 = icmp ult i64 %65, 64051194700380387
  br i1 %66, label %67, label %72

67:                                               ; preds = %62
  %68 = shl nsw i64 %65, 1
  %69 = icmp ult i64 %68, %58
  %70 = select i1 %69, i64 %58, i64 %68
  %71 = icmp eq i64 %70, 0
  br i1 %71, label %77, label %72

72:                                               ; preds = %67, %62
  %73 = phi i64 [ %70, %67 ], [ 128102389400760775, %62 ]
  %74 = mul i64 %73, 144
  %75 = call i8* @_Znwm(i64 %74) #9
  %76 = bitcast i8* %75 to %"struct.SkMarkerStack::Rec"*
  br label %77

77:                                               ; preds = %72, %67
  %78 = phi i64 [ %73, %72 ], [ 0, %67 ]
  %79 = phi %"struct.SkMarkerStack::Rec"* [ %76, %72 ], [ null, %67 ]
  %80 = getelementptr inbounds %"struct.SkMarkerStack::Rec", %"struct.SkMarkerStack::Rec"* %79, i64 %57
  %81 = getelementptr inbounds %"struct.SkMarkerStack::Rec", %"struct.SkMarkerStack::Rec"* %79, i64 %78
  %82 = ptrtoint %"struct.SkMarkerStack::Rec"* %81 to i64
  %83 = getelementptr inbounds %"struct.SkMarkerStack::Rec", %"struct.SkMarkerStack::Rec"* %80, i64 0, i32 0
  store i8* %3, i8** %83, align 8
  %84 = getelementptr inbounds %"struct.SkMarkerStack::Rec", %"struct.SkMarkerStack::Rec"* %79, i64 %57, i32 1
  %85 = bitcast %class.SkM44* %84 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %85, i8* nonnull align 8 %35, i64 64, i1 false)
  %86 = getelementptr inbounds %"struct.SkMarkerStack::Rec", %"struct.SkMarkerStack::Rec"* %79, i64 %57, i32 2
  %87 = bitcast %class.SkM44* %86 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %87, i8* nonnull align 8 %36, i64 64, i1 false)
  %88 = getelementptr inbounds %"struct.SkMarkerStack::Rec", %"struct.SkMarkerStack::Rec"* %79, i64 %57, i32 3
  store i32 %1, i32* %88, align 8
  %89 = getelementptr inbounds %"struct.SkMarkerStack::Rec", %"struct.SkMarkerStack::Rec"* %80, i64 1
  %90 = ptrtoint %"struct.SkMarkerStack::Rec"* %89 to i64
  %91 = load %"struct.SkMarkerStack::Rec"*, %"struct.SkMarkerStack::Rec"** %13, align 8
  %92 = load i64, i64* %54, align 8
  %93 = ptrtoint %"struct.SkMarkerStack::Rec"* %91 to i64
  %94 = sub i64 %92, %93
  %95 = sdiv exact i64 %94, -144
  %96 = getelementptr inbounds %"struct.SkMarkerStack::Rec", %"struct.SkMarkerStack::Rec"* %80, i64 %95
  %97 = ptrtoint %"struct.SkMarkerStack::Rec"* %96 to i64
  %98 = icmp sgt i64 %94, 0
  br i1 %98, label %99, label %103

99:                                               ; preds = %77
  %100 = bitcast %"struct.SkMarkerStack::Rec"* %96 to i8*
  %101 = bitcast %"struct.SkMarkerStack::Rec"* %91 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %100, i8* align 8 %101, i64 %94, i1 false) #7
  %102 = load %"struct.SkMarkerStack::Rec"*, %"struct.SkMarkerStack::Rec"** %13, align 8
  br label %103

103:                                              ; preds = %99, %77
  %104 = phi %"struct.SkMarkerStack::Rec"* [ %91, %77 ], [ %102, %99 ]
  store i64 %97, i64* %55, align 8
  store i64 %90, i64* %54, align 8
  store i64 %82, i64* %63, align 8
  %105 = icmp eq %"struct.SkMarkerStack::Rec"* %104, null
  br i1 %105, label %108, label %106

106:                                              ; preds = %103
  %107 = bitcast %"struct.SkMarkerStack::Rec"* %104 to i8*
  call void @_ZdlPv(i8* %107) #9
  br label %108

108:                                              ; preds = %42, %103, %106
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %35)
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %36)
  br label %109

109:                                              ; preds = %28, %108
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %8) #7
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare zeroext i1 @_ZNK5SkM446invertEPS_(%class.SkM44*, %class.SkM44*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK13SkMarkerStack10findMarkerEjP5SkM44(%class.SkMarkerStack* nocapture readonly, i32, %class.SkM44*) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %class.SkMarkerStack, %class.SkMarkerStack* %0, i64 0, i32 1, i32 0, i32 1
  %5 = load %"struct.SkMarkerStack::Rec"*, %"struct.SkMarkerStack::Rec"** %4, align 8
  %6 = getelementptr inbounds %class.SkMarkerStack, %class.SkMarkerStack* %0, i64 0, i32 1, i32 0, i32 0
  %7 = load %"struct.SkMarkerStack::Rec"*, %"struct.SkMarkerStack::Rec"** %6, align 8
  br label %8

8:                                                ; preds = %11, %3
  %9 = phi %"struct.SkMarkerStack::Rec"* [ %5, %3 ], [ %12, %11 ]
  %10 = icmp eq %"struct.SkMarkerStack::Rec"* %9, %7
  br i1 %10, label %22, label %11

11:                                               ; preds = %8
  %12 = getelementptr inbounds %"struct.SkMarkerStack::Rec", %"struct.SkMarkerStack::Rec"* %9, i64 -1
  %13 = getelementptr inbounds %"struct.SkMarkerStack::Rec", %"struct.SkMarkerStack::Rec"* %9, i64 -1, i32 3
  %14 = load i32, i32* %13, align 8
  %15 = icmp eq i32 %14, %1
  br i1 %15, label %16, label %8

16:                                               ; preds = %11
  %17 = icmp eq %class.SkM44* %2, null
  br i1 %17, label %22, label %18

18:                                               ; preds = %16
  %19 = getelementptr inbounds %"struct.SkMarkerStack::Rec", %"struct.SkMarkerStack::Rec"* %9, i64 -1, i32 1
  %20 = bitcast %class.SkM44* %2 to i8*
  %21 = bitcast %class.SkM44* %19 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %20, i8* align 4 %21, i64 64, i1 false)
  br label %22

22:                                               ; preds = %8, %18, %16
  %23 = phi i1 [ true, %16 ], [ true, %18 ], [ false, %8 ]
  ret i1 %23
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK13SkMarkerStack17findMarkerInverseEjP5SkM44(%class.SkMarkerStack* nocapture readonly, i32, %class.SkM44*) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %class.SkMarkerStack, %class.SkMarkerStack* %0, i64 0, i32 1, i32 0, i32 1
  %5 = load %"struct.SkMarkerStack::Rec"*, %"struct.SkMarkerStack::Rec"** %4, align 8
  %6 = getelementptr inbounds %class.SkMarkerStack, %class.SkMarkerStack* %0, i64 0, i32 1, i32 0, i32 0
  %7 = load %"struct.SkMarkerStack::Rec"*, %"struct.SkMarkerStack::Rec"** %6, align 8
  br label %8

8:                                                ; preds = %11, %3
  %9 = phi %"struct.SkMarkerStack::Rec"* [ %5, %3 ], [ %12, %11 ]
  %10 = icmp eq %"struct.SkMarkerStack::Rec"* %9, %7
  br i1 %10, label %22, label %11

11:                                               ; preds = %8
  %12 = getelementptr inbounds %"struct.SkMarkerStack::Rec", %"struct.SkMarkerStack::Rec"* %9, i64 -1
  %13 = getelementptr inbounds %"struct.SkMarkerStack::Rec", %"struct.SkMarkerStack::Rec"* %9, i64 -1, i32 3
  %14 = load i32, i32* %13, align 8
  %15 = icmp eq i32 %14, %1
  br i1 %15, label %16, label %8

16:                                               ; preds = %11
  %17 = icmp eq %class.SkM44* %2, null
  br i1 %17, label %22, label %18

18:                                               ; preds = %16
  %19 = getelementptr inbounds %"struct.SkMarkerStack::Rec", %"struct.SkMarkerStack::Rec"* %9, i64 -1, i32 2
  %20 = bitcast %class.SkM44* %2 to i8*
  %21 = bitcast %class.SkM44* %19 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %20, i8* align 4 %21, i64 64, i1 false)
  br label %22

22:                                               ; preds = %8, %18, %16
  %23 = phi i1 [ true, %16 ], [ true, %18 ], [ false, %8 ]
  ret i1 %23
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN13SkMarkerStack7restoreEPv(%class.SkMarkerStack* nocapture, i8* readnone) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %class.SkMarkerStack, %class.SkMarkerStack* %0, i64 0, i32 1, i32 0, i32 0
  %4 = load %"struct.SkMarkerStack::Rec"*, %"struct.SkMarkerStack::Rec"** %3, align 8
  %5 = getelementptr inbounds %class.SkMarkerStack, %class.SkMarkerStack* %0, i64 0, i32 1, i32 0, i32 1
  %6 = load %"struct.SkMarkerStack::Rec"*, %"struct.SkMarkerStack::Rec"** %5, align 8
  %7 = icmp eq %"struct.SkMarkerStack::Rec"* %4, %6
  br i1 %7, label %16, label %8

8:                                                ; preds = %2, %14
  %9 = phi %"struct.SkMarkerStack::Rec"* [ %10, %14 ], [ %6, %2 ]
  %10 = getelementptr inbounds %"struct.SkMarkerStack::Rec", %"struct.SkMarkerStack::Rec"* %9, i64 -1
  %11 = getelementptr inbounds %"struct.SkMarkerStack::Rec", %"struct.SkMarkerStack::Rec"* %10, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = icmp eq i8* %12, %1
  br i1 %13, label %14, label %16

14:                                               ; preds = %8
  store %"struct.SkMarkerStack::Rec"* %10, %"struct.SkMarkerStack::Rec"** %5, align 8
  %15 = icmp eq %"struct.SkMarkerStack::Rec"* %4, %10
  br i1 %15, label %16, label %8

16:                                               ; preds = %8, %14, %2
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #4

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #5

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { noreturn nounwind }
attributes #9 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
