; ModuleID = '../../third_party/blink/renderer/platform/audio/cpu/x86/audio_delay_dsp_kernel_sse2.cc'
source_filename = "../../third_party/blink/renderer/platform/audio/cpu/x86/audio_delay_dsp_kernel_sse2.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::AudioDelayDSPKernel" = type { %"class.blink::AudioDSPKernel", %"class.blink::AudioArray", float, i32, double, %"class.blink::AudioArray", %"class.blink::AudioArray" }
%"class.blink::AudioDSPKernel" = type { i32 (...)**, %"class.blink::AudioDSPKernelProcessor"*, float, i32 }
%"class.blink::AudioDSPKernelProcessor" = type <{ %"class.blink::AudioProcessor", %"class.WTF::Vector", %"class.WTF::Mutex", i8, [7 x i8] }>
%"class.blink::AudioProcessor" = type { i32 (...)**, i8, i32, float, i32 }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { %"class.std::__1::unique_ptr"*, i32, i32 }
%"class.std::__1::unique_ptr" = type opaque
%"class.WTF::Mutex" = type { %"class.WTF::MutexBase" }
%"class.WTF::MutexBase" = type { %"struct.WTF::PlatformMutex" }
%"struct.WTF::PlatformMutex" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.blink::AudioArray" = type <{ float*, float*, i32, [4 x i8] }>

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK5blink19AudioDelayDSPKernel18ProcessARateVectorEPfj(%"class.blink::AudioDelayDSPKernel"* nocapture readonly, float* nocapture, i32) local_unnamed_addr #0 align 2 {
  %4 = alloca <4 x float>, align 16
  %5 = alloca <4 x float>, align 16
  %6 = getelementptr inbounds %"class.blink::AudioDelayDSPKernel", %"class.blink::AudioDelayDSPKernel"* %0, i64 0, i32 1, i32 2
  %7 = load i32, i32* %6, align 8
  %8 = getelementptr inbounds %"class.blink::AudioDelayDSPKernel", %"class.blink::AudioDelayDSPKernel"* %0, i64 0, i32 1, i32 1
  %9 = load float*, float** %8, align 8
  %10 = getelementptr inbounds %"class.blink::AudioDelayDSPKernel", %"class.blink::AudioDelayDSPKernel"* %0, i64 0, i32 0, i32 2
  %11 = load float, float* %10, align 8
  %12 = getelementptr inbounds %"class.blink::AudioDelayDSPKernel", %"class.blink::AudioDelayDSPKernel"* %0, i64 0, i32 5, i32 1
  %13 = load float*, float** %12, align 8
  %14 = getelementptr inbounds %"class.blink::AudioDelayDSPKernel", %"class.blink::AudioDelayDSPKernel"* %0, i64 0, i32 3
  %15 = load i32, i32* %14, align 4
  %16 = insertelement <4 x float> undef, float %11, i32 0
  %17 = shufflevector <4 x float> %16, <4 x float> undef, <4 x i32> zeroinitializer
  %18 = sitofp i32 %7 to float
  %19 = insertelement <4 x float> undef, float %18, i32 0
  %20 = shufflevector <4 x float> %19, <4 x float> undef, <4 x i32> zeroinitializer
  %21 = insertelement <4 x i32> undef, i32 %7, i32 0
  %22 = shufflevector <4 x i32> %21, <4 x i32> undef, <4 x i32> zeroinitializer
  %23 = bitcast <4 x i32> %22 to <2 x i64>
  %24 = bitcast <4 x float>* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %24) #4
  %25 = bitcast <4 x float>* %5 to i8*
  %26 = bitcast <4 x float>* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %26, i8 -1, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %25) #4
  %27 = add nsw i32 %15, 3
  %28 = add nsw i32 %15, 2
  %29 = add nsw i32 %15, 1
  %30 = insertelement <4 x i32> undef, i32 %15, i32 0
  %31 = insertelement <4 x i32> %30, i32 %29, i32 1
  %32 = insertelement <4 x i32> %31, i32 %28, i32 2
  %33 = insertelement <4 x i32> %32, i32 %27, i32 3
  %34 = lshr i32 %2, 2
  %35 = icmp eq i32 %34, 0
  %36 = bitcast <4 x float>* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %36, i8 -1, i64 16, i1 false)
  br i1 %35, label %62, label %37

37:                                               ; preds = %3
  %38 = getelementptr inbounds <4 x float>, <4 x float>* %5, i64 0, i64 3
  %39 = getelementptr inbounds <4 x float>, <4 x float>* %5, i64 0, i64 2
  %40 = getelementptr inbounds <4 x float>, <4 x float>* %5, i64 0, i64 1
  %41 = getelementptr inbounds <4 x float>, <4 x float>* %4, i64 0, i64 3
  %42 = getelementptr inbounds <4 x float>, <4 x float>* %4, i64 0, i64 2
  %43 = getelementptr inbounds <4 x float>, <4 x float>* %4, i64 0, i64 1
  %44 = icmp sgt <4 x i32> %22, %33
  %45 = sext <4 x i1> %44 to <4 x i32>
  %46 = bitcast <4 x i32> %45 to <2 x i64>
  %47 = xor <2 x i64> %46, <i64 -1, i64 -1>
  %48 = and <2 x i64> %47, %23
  %49 = bitcast <2 x i64> %48 to <4 x i32>
  %50 = sub <4 x i32> %33, %49
  %51 = bitcast <4 x float>* %4 to i32*
  %52 = bitcast <4 x float>* %5 to i32*
  %53 = bitcast float* %43 to i32*
  %54 = bitcast float* %40 to i32*
  %55 = bitcast float* %42 to i32*
  %56 = bitcast float* %39 to i32*
  %57 = bitcast float* %41 to i32*
  %58 = bitcast float* %38 to i32*
  br label %73

59:                                               ; preds = %73
  %60 = trunc i64 %156 to i32
  %61 = load i32, i32* %14, align 4
  br label %62

62:                                               ; preds = %59, %3
  %63 = phi i32 [ %15, %3 ], [ %61, %59 ]
  %64 = phi i32 [ 0, %3 ], [ %60, %59 ]
  %65 = add nsw i32 %63, %64
  %66 = icmp slt i32 %65, %7
  %67 = select i1 %66, i32 0, i32 %7
  %68 = sub nsw i32 %65, %67
  %69 = zext i32 %68 to i64
  %70 = shl nuw i64 %69, 32
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %25) #4
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %24) #4
  %71 = zext i32 %64 to i64
  %72 = or i64 %70, %71
  ret i64 %72

73:                                               ; preds = %73, %37
  %74 = phi i64 [ 0, %37 ], [ %156, %73 ]
  %75 = phi i32 [ 0, %37 ], [ %155, %73 ]
  %76 = phi <4 x i32> [ %50, %37 ], [ %149, %73 ]
  %77 = getelementptr inbounds float, float* %13, i64 %74
  %78 = bitcast float* %77 to <4 x float>*
  %79 = load <4 x float>, <4 x float>* %78, align 1
  %80 = fmul <4 x float> %17, %79
  %81 = sitofp <4 x i32> %76 to <4 x float>
  %82 = fsub <4 x float> %20, %80
  %83 = fadd <4 x float> %82, %81
  %84 = fcmp ole <4 x float> %20, %83
  %85 = select <4 x i1> %84, <4 x float> %20, <4 x float> zeroinitializer
  %86 = fsub <4 x float> %83, %85
  %87 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %86) #4
  %88 = add <4 x i32> %87, <i32 1, i32 1, i32 1, i32 1>
  %89 = icmp sgt <4 x i32> %22, %88
  %90 = sext <4 x i1> %89 to <4 x i32>
  %91 = bitcast <4 x i32> %90 to <2 x i64>
  %92 = xor <2 x i64> %91, <i64 -1, i64 -1>
  %93 = and <2 x i64> %92, %23
  %94 = bitcast <2 x i64> %93 to <4 x i32>
  %95 = sub <4 x i32> %88, %94
  %96 = sitofp <4 x i32> %87 to <4 x float>
  %97 = bitcast <4 x i32> %87 to <2 x i64>
  %98 = extractelement <2 x i64> %97, i32 0
  %99 = and i64 %98, 4294967295
  %100 = getelementptr inbounds float, float* %9, i64 %99
  %101 = bitcast float* %100 to i32*
  %102 = load i32, i32* %101, align 4
  store i32 %102, i32* %51, align 16
  %103 = bitcast <4 x i32> %95 to <2 x i64>
  %104 = extractelement <2 x i64> %103, i32 0
  %105 = and i64 %104, 4294967295
  %106 = getelementptr inbounds float, float* %9, i64 %105
  %107 = bitcast float* %106 to i32*
  %108 = load i32, i32* %107, align 4
  store i32 %108, i32* %52, align 16
  %109 = extractelement <4 x i32> %87, i32 1
  %110 = zext i32 %109 to i64
  %111 = getelementptr inbounds float, float* %9, i64 %110
  %112 = bitcast float* %111 to i32*
  %113 = load i32, i32* %112, align 4
  store i32 %113, i32* %53, align 4
  %114 = extractelement <4 x i32> %95, i32 1
  %115 = zext i32 %114 to i64
  %116 = getelementptr inbounds float, float* %9, i64 %115
  %117 = bitcast float* %116 to i32*
  %118 = load i32, i32* %117, align 4
  store i32 %118, i32* %54, align 4
  %119 = extractelement <4 x i32> %87, i32 2
  %120 = zext i32 %119 to i64
  %121 = getelementptr inbounds float, float* %9, i64 %120
  %122 = bitcast float* %121 to i32*
  %123 = load i32, i32* %122, align 4
  store i32 %123, i32* %55, align 8
  %124 = extractelement <4 x i32> %95, i32 2
  %125 = zext i32 %124 to i64
  %126 = getelementptr inbounds float, float* %9, i64 %125
  %127 = bitcast float* %126 to i32*
  %128 = load i32, i32* %127, align 4
  store i32 %128, i32* %56, align 8
  %129 = extractelement <4 x i32> %87, i32 3
  %130 = zext i32 %129 to i64
  %131 = getelementptr inbounds float, float* %9, i64 %130
  %132 = bitcast float* %131 to i32*
  %133 = load i32, i32* %132, align 4
  store i32 %133, i32* %57, align 4
  %134 = extractelement <4 x i32> %95, i32 3
  %135 = zext i32 %134 to i64
  %136 = getelementptr inbounds float, float* %9, i64 %135
  %137 = bitcast float* %136 to i32*
  %138 = load i32, i32* %137, align 4
  store i32 %138, i32* %58, align 4
  %139 = fsub <4 x float> %86, %96
  %140 = load <4 x float>, <4 x float>* %4, align 16
  %141 = load <4 x float>, <4 x float>* %5, align 16
  %142 = add <4 x i32> %76, <i32 4, i32 4, i32 4, i32 4>
  %143 = icmp sgt <4 x i32> %22, %142
  %144 = sext <4 x i1> %143 to <4 x i32>
  %145 = bitcast <4 x i32> %144 to <2 x i64>
  %146 = xor <2 x i64> %145, <i64 -1, i64 -1>
  %147 = and <2 x i64> %146, %23
  %148 = bitcast <2 x i64> %147 to <4 x i32>
  %149 = sub <4 x i32> %142, %148
  %150 = fsub <4 x float> %141, %140
  %151 = fmul <4 x float> %139, %150
  %152 = fadd <4 x float> %140, %151
  %153 = getelementptr inbounds float, float* %1, i64 %74
  %154 = bitcast float* %153 to <4 x float>*
  store <4 x float> %152, <4 x float>* %154, align 16
  %155 = add nuw nsw i32 %75, 1
  %156 = add nuw nsw i64 %74, 4
  %157 = icmp eq i32 %155, %34
  br i1 %157, label %59, label %73
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5blink19AudioDelayDSPKernel9HandleNaNEPfjf(%"class.blink::AudioDelayDSPKernel"* nocapture readnone, float* nocapture, i32, float) local_unnamed_addr #2 align 2 {
  %5 = lshr i32 %2, 2
  %6 = insertelement <4 x float> undef, float %3, i32 0
  %7 = shufflevector <4 x float> %6, <4 x float> undef, <4 x i32> zeroinitializer
  %8 = icmp eq i32 %5, 0
  br i1 %8, label %33, label %9

9:                                                ; preds = %4
  %10 = add nsw i32 %5, -1
  %11 = and i32 %5, 3
  %12 = icmp ult i32 %10, 3
  br i1 %12, label %15, label %13

13:                                               ; preds = %9
  %14 = sub nsw i32 %5, %11
  br label %99

15:                                               ; preds = %99, %9
  %16 = phi i64 [ undef, %9 ], [ %125, %99 ]
  %17 = phi i64 [ 0, %9 ], [ %125, %99 ]
  %18 = icmp eq i32 %11, 0
  br i1 %18, label %30, label %19

19:                                               ; preds = %15, %19
  %20 = phi i64 [ %27, %19 ], [ %17, %15 ]
  %21 = phi i32 [ %28, %19 ], [ %11, %15 ]
  %22 = getelementptr inbounds float, float* %1, i64 %20
  %23 = bitcast float* %22 to <4 x float>*
  %24 = load <4 x float>, <4 x float>* %23, align 1
  %25 = fcmp uno <4 x float> %24, zeroinitializer
  %26 = select <4 x i1> %25, <4 x float> %7, <4 x float> %24
  store <4 x float> %26, <4 x float>* %23, align 1
  %27 = add nuw nsw i64 %20, 4
  %28 = add i32 %21, -1
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %30, label %19, !llvm.loop !2

30:                                               ; preds = %19, %15
  %31 = phi i64 [ %16, %15 ], [ %27, %19 ]
  %32 = trunc i64 %31 to i32
  br label %33

33:                                               ; preds = %30, %4
  %34 = phi i32 [ 0, %4 ], [ %32, %30 ]
  %35 = icmp ult i32 %34, %2
  br i1 %35, label %36, label %137

36:                                               ; preds = %33
  %37 = zext i32 %34 to i64
  %38 = zext i32 %2 to i64
  %39 = sub nsw i64 %38, %37
  %40 = icmp ult i64 %39, 8
  br i1 %40, label %41, label %43

41:                                               ; preds = %97, %36
  %42 = phi i64 [ %37, %36 ], [ %45, %97 ]
  br label %128

43:                                               ; preds = %36
  %44 = and i64 %39, -8
  %45 = add nsw i64 %44, %37
  br label %46

46:                                               ; preds = %94, %43
  %47 = phi i64 [ 0, %43 ], [ %95, %94 ]
  %48 = add i64 %47, %37
  %49 = getelementptr inbounds float, float* %1, i64 %48
  %50 = bitcast float* %49 to <4 x float>*
  %51 = load <4 x float>, <4 x float>* %50, align 4
  %52 = getelementptr inbounds float, float* %49, i64 4
  %53 = bitcast float* %52 to <4 x float>*
  %54 = load <4 x float>, <4 x float>* %53, align 4
  %55 = fcmp uno <4 x float> %51, zeroinitializer
  %56 = fcmp uno <4 x float> %54, zeroinitializer
  %57 = extractelement <4 x i1> %55, i32 0
  br i1 %57, label %58, label %59

58:                                               ; preds = %46
  store float %3, float* %49, align 4
  br label %59

59:                                               ; preds = %58, %46
  %60 = extractelement <4 x i1> %55, i32 1
  br i1 %60, label %61, label %64

61:                                               ; preds = %59
  %62 = add i64 %48, 1
  %63 = getelementptr inbounds float, float* %1, i64 %62
  store float %3, float* %63, align 4
  br label %64

64:                                               ; preds = %61, %59
  %65 = extractelement <4 x i1> %55, i32 2
  br i1 %65, label %66, label %69

66:                                               ; preds = %64
  %67 = add i64 %48, 2
  %68 = getelementptr inbounds float, float* %1, i64 %67
  store float %3, float* %68, align 4
  br label %69

69:                                               ; preds = %66, %64
  %70 = extractelement <4 x i1> %55, i32 3
  br i1 %70, label %71, label %74

71:                                               ; preds = %69
  %72 = add i64 %48, 3
  %73 = getelementptr inbounds float, float* %1, i64 %72
  store float %3, float* %73, align 4
  br label %74

74:                                               ; preds = %71, %69
  %75 = extractelement <4 x i1> %56, i32 0
  br i1 %75, label %76, label %79

76:                                               ; preds = %74
  %77 = add i64 %48, 4
  %78 = getelementptr inbounds float, float* %1, i64 %77
  store float %3, float* %78, align 4
  br label %79

79:                                               ; preds = %76, %74
  %80 = extractelement <4 x i1> %56, i32 1
  br i1 %80, label %81, label %84

81:                                               ; preds = %79
  %82 = add i64 %48, 5
  %83 = getelementptr inbounds float, float* %1, i64 %82
  store float %3, float* %83, align 4
  br label %84

84:                                               ; preds = %81, %79
  %85 = extractelement <4 x i1> %56, i32 2
  br i1 %85, label %86, label %89

86:                                               ; preds = %84
  %87 = add i64 %48, 6
  %88 = getelementptr inbounds float, float* %1, i64 %87
  store float %3, float* %88, align 4
  br label %89

89:                                               ; preds = %86, %84
  %90 = extractelement <4 x i1> %56, i32 3
  br i1 %90, label %91, label %94

91:                                               ; preds = %89
  %92 = add i64 %48, 7
  %93 = getelementptr inbounds float, float* %1, i64 %92
  store float %3, float* %93, align 4
  br label %94

94:                                               ; preds = %91, %89
  %95 = add i64 %47, 8
  %96 = icmp eq i64 %95, %44
  br i1 %96, label %97, label %46, !llvm.loop !4

97:                                               ; preds = %94
  %98 = icmp eq i64 %39, %44
  br i1 %98, label %137, label %41

99:                                               ; preds = %99, %13
  %100 = phi i64 [ 0, %13 ], [ %125, %99 ]
  %101 = phi i32 [ %14, %13 ], [ %126, %99 ]
  %102 = getelementptr inbounds float, float* %1, i64 %100
  %103 = bitcast float* %102 to <4 x float>*
  %104 = load <4 x float>, <4 x float>* %103, align 1
  %105 = fcmp uno <4 x float> %104, zeroinitializer
  %106 = select <4 x i1> %105, <4 x float> %7, <4 x float> %104
  store <4 x float> %106, <4 x float>* %103, align 1
  %107 = or i64 %100, 4
  %108 = getelementptr inbounds float, float* %1, i64 %107
  %109 = bitcast float* %108 to <4 x float>*
  %110 = load <4 x float>, <4 x float>* %109, align 1
  %111 = fcmp uno <4 x float> %110, zeroinitializer
  %112 = select <4 x i1> %111, <4 x float> %7, <4 x float> %110
  store <4 x float> %112, <4 x float>* %109, align 1
  %113 = or i64 %100, 8
  %114 = getelementptr inbounds float, float* %1, i64 %113
  %115 = bitcast float* %114 to <4 x float>*
  %116 = load <4 x float>, <4 x float>* %115, align 1
  %117 = fcmp uno <4 x float> %116, zeroinitializer
  %118 = select <4 x i1> %117, <4 x float> %7, <4 x float> %116
  store <4 x float> %118, <4 x float>* %115, align 1
  %119 = or i64 %100, 12
  %120 = getelementptr inbounds float, float* %1, i64 %119
  %121 = bitcast float* %120 to <4 x float>*
  %122 = load <4 x float>, <4 x float>* %121, align 1
  %123 = fcmp uno <4 x float> %122, zeroinitializer
  %124 = select <4 x i1> %123, <4 x float> %7, <4 x float> %122
  store <4 x float> %124, <4 x float>* %121, align 1
  %125 = add nuw nsw i64 %100, 16
  %126 = add i32 %101, -4
  %127 = icmp eq i32 %126, 0
  br i1 %127, label %15, label %99

128:                                              ; preds = %41, %134
  %129 = phi i64 [ %135, %134 ], [ %42, %41 ]
  %130 = getelementptr inbounds float, float* %1, i64 %129
  %131 = load float, float* %130, align 4
  %132 = fcmp uno float %131, 0.000000e+00
  br i1 %132, label %133, label %134

133:                                              ; preds = %128
  store float %3, float* %130, align 4
  br label %134

134:                                              ; preds = %128, %133
  %135 = add nuw nsw i64 %129, 1
  %136 = icmp eq i64 %135, %38
  br i1 %136, label %137, label %128, !llvm.loop !6

137:                                              ; preds = %134, %97, %33
  ret void
}

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float>) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !5}
!5 = !{!"llvm.loop.isvectorized", i32 1}
!6 = distinct !{!6, !7, !5}
!7 = !{!"llvm.loop.unroll.runtime.disable"}
