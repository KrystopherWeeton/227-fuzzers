; ModuleID = '../../chrome/browser/ui/commander/command_source.cc'
source_filename = "../../chrome/browser/ui/commander/command_source.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.commander::CommandItem" = type { i32 (...)**, %"class.std::__1::basic_string", i32, %"class.std::__1::basic_string", %"class.absl::variant", double, %"class.std::__1::vector" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__rep" }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__long" }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__long" = type { i16*, i64, i64 }
%"class.absl::variant" = type { %"class.absl::variant_internal::VariantMoveAssignBaseNontrivial" }
%"class.absl::variant_internal::VariantMoveAssignBaseNontrivial" = type { %"class.absl::variant_internal::VariantMoveBaseNontrivial" }
%"class.absl::variant_internal::VariantMoveBaseNontrivial" = type { %"class.absl::variant_internal::VariantStateBaseDestructorNontrivial" }
%"class.absl::variant_internal::VariantStateBaseDestructorNontrivial" = type { %"class.absl::variant_internal::VariantStateBase" }
%"class.absl::variant_internal::VariantStateBase" = type { %"union.absl::variant_internal::DestructibleUnionImpl", i64 }
%"union.absl::variant_internal::DestructibleUnionImpl" = type { %"union.absl::variant_internal::DestructibleUnionImpl.2" }
%"union.absl::variant_internal::DestructibleUnionImpl.2" = type { %"struct.std::__1::pair" }
%"struct.std::__1::pair" = type { %"class.std::__1::basic_string", %"class.base::RepeatingCallback" }
%"class.base::RepeatingCallback" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.base::internal::CallbackBaseCopyable" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.1" }
%"struct.std::__1::__atomic_base.1" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.gfx::Range"*, %"class.gfx::Range"*, %"class.std::__1::__compressed_pair.4" }
%"class.gfx::Range" = type { i32, i32 }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %"class.gfx::Range"* }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short" = type { [11 x i16], %struct.anon }
%struct.anon = type { %"struct.std::__1::__padding", i8 }
%"struct.std::__1::__padding" = type { [1 x i8] }
%"class.std::__1::__basic_string_common" = type { i8 }
%"class.std::__1::__vector_base_common" = type { i8 }
%"struct.absl::variant_internal::VariantCoreAccess::MoveAssignVisitor" = type { %"class.absl::variant_internal::VariantMoveAssignBaseNontrivial"*, %"class.absl::variant_internal::VariantMoveAssignBaseNontrivial"* }
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }

$_ZN4absl16variant_internal18VisitIndicesSwitchILm2EE3RunINS0_17VariantCoreAccess17MoveAssignVisitorINS0_31VariantMoveAssignBaseNontrivialIJN4base12OnceCallbackIFvvEEENSt3__14pairINSB_12basic_stringIDsNSB_11char_traitsIDsEENSB_9allocatorIDsEEEENS7_17RepeatingCallbackIFNSB_6vectorINSB_10unique_ptrIN9commander11CommandItemENSB_14default_deleteISN_EEEENSG_ISQ_EEEERKSI_EEEEEEEEEEEENS0_22VisitIndicesResultImplIT_JmEE4typeEOS11_m = comdat any

@_ZTVN9commander11CommandItemE = hidden unnamed_addr constant { [4 x i8*] } { [4 x i8*] [i8* null, i8* null, i8* bitcast (void (%"struct.commander::CommandItem"*)* @_ZN9commander11CommandItemD2Ev to i8*), i8* bitcast (void (%"struct.commander::CommandItem"*)* @_ZN9commander11CommandItemD0Ev to i8*)] }, align 8

@_ZN9commander11CommandItemC1Ev = hidden unnamed_addr alias void (%"struct.commander::CommandItem"*), void (%"struct.commander::CommandItem"*)* @_ZN9commander11CommandItemC2Ev
@_ZN9commander11CommandItemC1ERKNSt3__112basic_stringIDsNS1_11char_traitsIDsEENS1_9allocatorIDsEEEEdRKNS1_6vectorIN3gfx5RangeENS5_ISC_EEEE = hidden unnamed_addr alias void (%"struct.commander::CommandItem"*, %"class.std::__1::basic_string"*, double, %"class.std::__1::vector"*), void (%"struct.commander::CommandItem"*, %"class.std::__1::basic_string"*, double, %"class.std::__1::vector"*)* @_ZN9commander11CommandItemC2ERKNSt3__112basic_stringIDsNS1_11char_traitsIDsEENS1_9allocatorIDsEEEEdRKNS1_6vectorIN3gfx5RangeENS5_ISC_EEEE
@_ZN9commander11CommandItemD1Ev = hidden unnamed_addr alias void (%"struct.commander::CommandItem"*), void (%"struct.commander::CommandItem"*)* @_ZN9commander11CommandItemD2Ev
@_ZN9commander11CommandItemC1EOS0_ = hidden unnamed_addr alias void (%"struct.commander::CommandItem"*, %"struct.commander::CommandItem"*), void (%"struct.commander::CommandItem"*, %"struct.commander::CommandItem"*)* @_ZN9commander11CommandItemC2EOS0_

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN9commander11CommandItemC2Ev(%"struct.commander::CommandItem"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"struct.commander::CommandItem", %"struct.commander::CommandItem"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN9commander11CommandItemE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"struct.commander::CommandItem", %"struct.commander::CommandItem"* %0, i64 0, i32 1
  %4 = getelementptr inbounds %"struct.commander::CommandItem", %"struct.commander::CommandItem"* %0, i64 0, i32 3
  %5 = getelementptr inbounds %"struct.commander::CommandItem", %"struct.commander::CommandItem"* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 0, i64* %5, align 8
  %6 = getelementptr inbounds %"struct.commander::CommandItem", %"struct.commander::CommandItem"* %0, i64 0, i32 6
  %7 = bitcast %"class.std::__1::vector"* %6 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 24, i1 false) #8
  %8 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 28, i1 false)
  %9 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 32, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN9commander11CommandItemC2ERKNSt3__112basic_stringIDsNS1_11char_traitsIDsEENS1_9allocatorIDsEEEEdRKNS1_6vectorIN3gfx5RangeENS5_ISC_EEEE(%"struct.commander::CommandItem"*, %"class.std::__1::basic_string"* nocapture readonly dereferenceable(24), double, %"class.std::__1::vector"* nocapture readonly dereferenceable(24)) unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"struct.commander::CommandItem", %"struct.commander::CommandItem"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN9commander11CommandItemE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = getelementptr inbounds %"struct.commander::CommandItem", %"struct.commander::CommandItem"* %0, i64 0, i32 1
  %7 = bitcast %"class.std::__1::basic_string"* %1 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %8 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %7, i64 0, i32 1, i32 1
  %9 = load i8, i8* %8, align 1
  %10 = icmp slt i8 %9, 0
  br i1 %10, label %14, label %11

11:                                               ; preds = %4
  %12 = bitcast %"class.std::__1::basic_string"* %6 to i8*
  %13 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %12, i8* align 8 %13, i64 24, i1 false) #8
  br label %189

14:                                               ; preds = %4
  %15 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %16 = load i16*, i16** %15, align 8
  %17 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %18 = load i64, i64* %17, align 8
  %19 = icmp ult i64 %18, 11
  br i1 %19, label %20, label %25

20:                                               ; preds = %14
  %21 = bitcast %"class.std::__1::basic_string"* %6 to i16*
  %22 = trunc i64 %18 to i8
  %23 = bitcast %"class.std::__1::basic_string"* %6 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %24 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %23, i64 0, i32 1, i32 1
  store i8 %22, i8* %24, align 1
  br label %42

25:                                               ; preds = %14
  %26 = icmp ugt i64 %18, 9223372036854775791
  br i1 %26, label %27, label %29

27:                                               ; preds = %25
  %28 = bitcast %"class.std::__1::basic_string"* %6 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %28) #9
  unreachable

29:                                               ; preds = %25
  %30 = add nuw nsw i64 %18, 8
  %31 = and i64 %30, -8
  %32 = icmp slt i64 %31, 0
  br i1 %32, label %33, label %34

33:                                               ; preds = %29
  tail call void @abort() #9
  unreachable

34:                                               ; preds = %29
  %35 = shl i64 %31, 1
  %36 = tail call i8* @_Znwm(i64 %35) #10
  %37 = bitcast i8* %36 to i16*
  %38 = bitcast %"class.std::__1::basic_string"* %6 to i8**
  store i8* %36, i8** %38, align 8
  %39 = or i64 %31, -9223372036854775808
  %40 = getelementptr inbounds %"struct.commander::CommandItem", %"struct.commander::CommandItem"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %39, i64* %40, align 8
  %41 = getelementptr inbounds %"struct.commander::CommandItem", %"struct.commander::CommandItem"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %18, i64* %41, align 8
  br label %42

42:                                               ; preds = %34, %20
  %43 = phi i16* [ %21, %20 ], [ %37, %34 ]
  %44 = add nuw nsw i64 %18, 1
  %45 = add i64 %18, 1
  %46 = icmp ult i64 %45, 16
  br i1 %46, label %136, label %47

47:                                               ; preds = %42
  %48 = add i64 %18, 1
  %49 = getelementptr i16, i16* %43, i64 %48
  %50 = getelementptr i16, i16* %16, i64 %48
  %51 = icmp ult i16* %43, %50
  %52 = icmp ult i16* %16, %49
  %53 = and i1 %51, %52
  br i1 %53, label %136, label %54

54:                                               ; preds = %47
  %55 = and i64 %45, -16
  %56 = sub i64 %44, %55
  %57 = getelementptr i16, i16* %16, i64 %55
  %58 = getelementptr i16, i16* %43, i64 %55
  %59 = add i64 %55, -16
  %60 = lshr exact i64 %59, 4
  %61 = add nuw nsw i64 %60, 1
  %62 = and i64 %61, 3
  %63 = icmp ult i64 %59, 48
  br i1 %63, label %115, label %64

64:                                               ; preds = %54
  %65 = sub nsw i64 %61, %62
  br label %66

66:                                               ; preds = %66, %64
  %67 = phi i64 [ 0, %64 ], [ %112, %66 ]
  %68 = phi i64 [ %65, %64 ], [ %113, %66 ]
  %69 = getelementptr i16, i16* %16, i64 %67
  %70 = getelementptr i16, i16* %43, i64 %67
  %71 = bitcast i16* %69 to <8 x i16>*
  %72 = load <8 x i16>, <8 x i16>* %71, align 2, !alias.scope !2
  %73 = getelementptr i16, i16* %69, i64 8
  %74 = bitcast i16* %73 to <8 x i16>*
  %75 = load <8 x i16>, <8 x i16>* %74, align 2, !alias.scope !2
  %76 = bitcast i16* %70 to <8 x i16>*
  store <8 x i16> %72, <8 x i16>* %76, align 2, !alias.scope !5, !noalias !2
  %77 = getelementptr i16, i16* %70, i64 8
  %78 = bitcast i16* %77 to <8 x i16>*
  store <8 x i16> %75, <8 x i16>* %78, align 2, !alias.scope !5, !noalias !2
  %79 = or i64 %67, 16
  %80 = getelementptr i16, i16* %16, i64 %79
  %81 = getelementptr i16, i16* %43, i64 %79
  %82 = bitcast i16* %80 to <8 x i16>*
  %83 = load <8 x i16>, <8 x i16>* %82, align 2, !alias.scope !2
  %84 = getelementptr i16, i16* %80, i64 8
  %85 = bitcast i16* %84 to <8 x i16>*
  %86 = load <8 x i16>, <8 x i16>* %85, align 2, !alias.scope !2
  %87 = bitcast i16* %81 to <8 x i16>*
  store <8 x i16> %83, <8 x i16>* %87, align 2, !alias.scope !5, !noalias !2
  %88 = getelementptr i16, i16* %81, i64 8
  %89 = bitcast i16* %88 to <8 x i16>*
  store <8 x i16> %86, <8 x i16>* %89, align 2, !alias.scope !5, !noalias !2
  %90 = or i64 %67, 32
  %91 = getelementptr i16, i16* %16, i64 %90
  %92 = getelementptr i16, i16* %43, i64 %90
  %93 = bitcast i16* %91 to <8 x i16>*
  %94 = load <8 x i16>, <8 x i16>* %93, align 2, !alias.scope !2
  %95 = getelementptr i16, i16* %91, i64 8
  %96 = bitcast i16* %95 to <8 x i16>*
  %97 = load <8 x i16>, <8 x i16>* %96, align 2, !alias.scope !2
  %98 = bitcast i16* %92 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %98, align 2, !alias.scope !5, !noalias !2
  %99 = getelementptr i16, i16* %92, i64 8
  %100 = bitcast i16* %99 to <8 x i16>*
  store <8 x i16> %97, <8 x i16>* %100, align 2, !alias.scope !5, !noalias !2
  %101 = or i64 %67, 48
  %102 = getelementptr i16, i16* %16, i64 %101
  %103 = getelementptr i16, i16* %43, i64 %101
  %104 = bitcast i16* %102 to <8 x i16>*
  %105 = load <8 x i16>, <8 x i16>* %104, align 2, !alias.scope !2
  %106 = getelementptr i16, i16* %102, i64 8
  %107 = bitcast i16* %106 to <8 x i16>*
  %108 = load <8 x i16>, <8 x i16>* %107, align 2, !alias.scope !2
  %109 = bitcast i16* %103 to <8 x i16>*
  store <8 x i16> %105, <8 x i16>* %109, align 2, !alias.scope !5, !noalias !2
  %110 = getelementptr i16, i16* %103, i64 8
  %111 = bitcast i16* %110 to <8 x i16>*
  store <8 x i16> %108, <8 x i16>* %111, align 2, !alias.scope !5, !noalias !2
  %112 = add i64 %67, 64
  %113 = add i64 %68, -4
  %114 = icmp eq i64 %113, 0
  br i1 %114, label %115, label %66, !llvm.loop !7

115:                                              ; preds = %66, %54
  %116 = phi i64 [ 0, %54 ], [ %112, %66 ]
  %117 = icmp eq i64 %62, 0
  br i1 %117, label %134, label %118

118:                                              ; preds = %115, %118
  %119 = phi i64 [ %131, %118 ], [ %116, %115 ]
  %120 = phi i64 [ %132, %118 ], [ %62, %115 ]
  %121 = getelementptr i16, i16* %16, i64 %119
  %122 = getelementptr i16, i16* %43, i64 %119
  %123 = bitcast i16* %121 to <8 x i16>*
  %124 = load <8 x i16>, <8 x i16>* %123, align 2, !alias.scope !2
  %125 = getelementptr i16, i16* %121, i64 8
  %126 = bitcast i16* %125 to <8 x i16>*
  %127 = load <8 x i16>, <8 x i16>* %126, align 2, !alias.scope !2
  %128 = bitcast i16* %122 to <8 x i16>*
  store <8 x i16> %124, <8 x i16>* %128, align 2, !alias.scope !5, !noalias !2
  %129 = getelementptr i16, i16* %122, i64 8
  %130 = bitcast i16* %129 to <8 x i16>*
  store <8 x i16> %127, <8 x i16>* %130, align 2, !alias.scope !5, !noalias !2
  %131 = add i64 %119, 16
  %132 = add i64 %120, -1
  %133 = icmp eq i64 %132, 0
  br i1 %133, label %134, label %118, !llvm.loop !9

134:                                              ; preds = %118, %115
  %135 = icmp eq i64 %45, %55
  br i1 %135, label %189, label %136

136:                                              ; preds = %134, %47, %42
  %137 = phi i64 [ %44, %47 ], [ %44, %42 ], [ %56, %134 ]
  %138 = phi i16* [ %16, %47 ], [ %16, %42 ], [ %57, %134 ]
  %139 = phi i16* [ %43, %47 ], [ %43, %42 ], [ %58, %134 ]
  %140 = add i64 %137, -1
  %141 = and i64 %137, 7
  %142 = icmp eq i64 %141, 0
  br i1 %142, label %154, label %143

143:                                              ; preds = %136, %143
  %144 = phi i64 [ %149, %143 ], [ %137, %136 ]
  %145 = phi i16* [ %151, %143 ], [ %138, %136 ]
  %146 = phi i16* [ %150, %143 ], [ %139, %136 ]
  %147 = phi i64 [ %152, %143 ], [ %141, %136 ]
  %148 = load i16, i16* %145, align 2
  store i16 %148, i16* %146, align 2
  %149 = add i64 %144, -1
  %150 = getelementptr inbounds i16, i16* %146, i64 1
  %151 = getelementptr inbounds i16, i16* %145, i64 1
  %152 = add i64 %147, -1
  %153 = icmp eq i64 %152, 0
  br i1 %153, label %154, label %143, !llvm.loop !11

154:                                              ; preds = %143, %136
  %155 = phi i64 [ %137, %136 ], [ %149, %143 ]
  %156 = phi i16* [ %138, %136 ], [ %151, %143 ]
  %157 = phi i16* [ %139, %136 ], [ %150, %143 ]
  %158 = icmp ult i64 %140, 7
  br i1 %158, label %189, label %159

159:                                              ; preds = %154, %159
  %160 = phi i64 [ %185, %159 ], [ %155, %154 ]
  %161 = phi i16* [ %187, %159 ], [ %156, %154 ]
  %162 = phi i16* [ %186, %159 ], [ %157, %154 ]
  %163 = load i16, i16* %161, align 2
  store i16 %163, i16* %162, align 2
  %164 = getelementptr inbounds i16, i16* %162, i64 1
  %165 = getelementptr inbounds i16, i16* %161, i64 1
  %166 = load i16, i16* %165, align 2
  store i16 %166, i16* %164, align 2
  %167 = getelementptr inbounds i16, i16* %162, i64 2
  %168 = getelementptr inbounds i16, i16* %161, i64 2
  %169 = load i16, i16* %168, align 2
  store i16 %169, i16* %167, align 2
  %170 = getelementptr inbounds i16, i16* %162, i64 3
  %171 = getelementptr inbounds i16, i16* %161, i64 3
  %172 = load i16, i16* %171, align 2
  store i16 %172, i16* %170, align 2
  %173 = getelementptr inbounds i16, i16* %162, i64 4
  %174 = getelementptr inbounds i16, i16* %161, i64 4
  %175 = load i16, i16* %174, align 2
  store i16 %175, i16* %173, align 2
  %176 = getelementptr inbounds i16, i16* %162, i64 5
  %177 = getelementptr inbounds i16, i16* %161, i64 5
  %178 = load i16, i16* %177, align 2
  store i16 %178, i16* %176, align 2
  %179 = getelementptr inbounds i16, i16* %162, i64 6
  %180 = getelementptr inbounds i16, i16* %161, i64 6
  %181 = load i16, i16* %180, align 2
  store i16 %181, i16* %179, align 2
  %182 = getelementptr inbounds i16, i16* %162, i64 7
  %183 = getelementptr inbounds i16, i16* %161, i64 7
  %184 = load i16, i16* %183, align 2
  store i16 %184, i16* %182, align 2
  %185 = add i64 %160, -8
  %186 = getelementptr inbounds i16, i16* %162, i64 8
  %187 = getelementptr inbounds i16, i16* %161, i64 8
  %188 = icmp eq i64 %185, 0
  br i1 %188, label %189, label %159, !llvm.loop !12

189:                                              ; preds = %154, %159, %134, %11
  %190 = getelementptr inbounds %"struct.commander::CommandItem", %"struct.commander::CommandItem"* %0, i64 0, i32 2
  store i32 0, i32* %190, align 8
  %191 = getelementptr inbounds %"struct.commander::CommandItem", %"struct.commander::CommandItem"* %0, i64 0, i32 3
  %192 = getelementptr inbounds %"struct.commander::CommandItem", %"struct.commander::CommandItem"* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 0, i64* %192, align 8
  %193 = getelementptr inbounds %"struct.commander::CommandItem", %"struct.commander::CommandItem"* %0, i64 0, i32 5
  %194 = bitcast %"class.std::__1::basic_string"* %191 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %194, i8 0, i64 32, i1 false)
  store double %2, double* %193, align 8
  %195 = getelementptr inbounds %"struct.commander::CommandItem", %"struct.commander::CommandItem"* %0, i64 0, i32 6
  %196 = bitcast %"class.std::__1::vector"* %195 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %196, i8 0, i64 24, i1 false) #8
  %197 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 0, i32 1
  %198 = bitcast %"class.gfx::Range"** %197 to i64*
  %199 = load i64, i64* %198, align 8
  %200 = bitcast %"class.std::__1::vector"* %3 to i64*
  %201 = load i64, i64* %200, align 8
  %202 = sub i64 %199, %201
  %203 = ashr exact i64 %202, 3
  %204 = icmp eq i64 %202, 0
  br i1 %204, label %232, label %205

205:                                              ; preds = %189
  %206 = icmp ugt i64 %203, 2305843009213693951
  br i1 %206, label %207, label %209

207:                                              ; preds = %205
  %208 = bitcast %"class.std::__1::vector"* %195 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %208) #9
  unreachable

209:                                              ; preds = %205
  %210 = tail call i8* @_Znwm(i64 %202) #10
  %211 = bitcast i8* %210 to %"class.gfx::Range"*
  %212 = getelementptr inbounds %"struct.commander::CommandItem", %"struct.commander::CommandItem"* %0, i64 0, i32 6, i32 0, i32 1
  %213 = bitcast %"class.gfx::Range"** %212 to i8**
  store i8* %210, i8** %213, align 8
  %214 = bitcast %"class.std::__1::vector"* %195 to i8**
  store i8* %210, i8** %214, align 8
  %215 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %211, i64 %203
  %216 = getelementptr inbounds %"struct.commander::CommandItem", %"struct.commander::CommandItem"* %0, i64 0, i32 6, i32 0, i32 2, i32 0, i32 0
  store %"class.gfx::Range"* %215, %"class.gfx::Range"** %216, align 8
  %217 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 0, i32 0
  %218 = load %"class.gfx::Range"*, %"class.gfx::Range"** %217, align 8
  %219 = load i64, i64* %198, align 8
  %220 = bitcast %"class.gfx::Range"** %212 to i64*
  %221 = ptrtoint i8* %210 to i64
  %222 = ptrtoint %"class.gfx::Range"* %218 to i64
  %223 = sub i64 %219, %222
  %224 = icmp sgt i64 %223, 0
  br i1 %224, label %225, label %230

225:                                              ; preds = %209
  %226 = lshr exact i64 %223, 3
  %227 = bitcast %"class.gfx::Range"* %218 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %210, i8* align 4 %227, i64 %223, i1 false) #8
  %228 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %211, i64 %226
  %229 = ptrtoint %"class.gfx::Range"* %228 to i64
  br label %230

230:                                              ; preds = %225, %209
  %231 = phi i64 [ %229, %225 ], [ %221, %209 ]
  store i64 %231, i64* %220, align 8
  br label %232

232:                                              ; preds = %189, %230
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN9commander11CommandItemD2Ev(%"struct.commander::CommandItem"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"struct.commander::CommandItem", %"struct.commander::CommandItem"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN9commander11CommandItemE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"struct.commander::CommandItem", %"struct.commander::CommandItem"* %0, i64 0, i32 6, i32 0, i32 0
  %4 = load %"class.gfx::Range"*, %"class.gfx::Range"** %3, align 8
  %5 = icmp eq %"class.gfx::Range"* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = ptrtoint %"class.gfx::Range"* %4 to i64
  %8 = getelementptr inbounds %"struct.commander::CommandItem", %"struct.commander::CommandItem"* %0, i64 0, i32 6, i32 0, i32 1
  %9 = bitcast %"class.gfx::Range"** %8 to i64*
  store i64 %7, i64* %9, align 8
  %10 = bitcast %"class.gfx::Range"* %4 to i8*
  tail call void @_ZdlPv(i8* %10) #10
  br label %11

11:                                               ; preds = %1, %6
  %12 = getelementptr inbounds %"struct.commander::CommandItem", %"struct.commander::CommandItem"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %13 = getelementptr inbounds %"struct.commander::CommandItem", %"struct.commander::CommandItem"* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0, i32 1
  %14 = load i64, i64* %13, align 8
  switch i64 %14, label %26 [
    i64 0, label %15
    i64 1, label %17
  ]

15:                                               ; preds = %11
  %16 = bitcast %"class.absl::variant_internal::VariantStateBaseDestructorNontrivial"* %12 to %"class.base::internal::CallbackBase"*
  tail call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* %16) #8
  br label %26

17:                                               ; preds = %11
  %18 = getelementptr inbounds %"struct.commander::CommandItem", %"struct.commander::CommandItem"* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  tail call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* %18) #8
  %19 = bitcast %"class.absl::variant_internal::VariantStateBaseDestructorNontrivial"* %12 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %20 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %19, i64 0, i32 1, i32 1
  %21 = load i8, i8* %20, align 1
  %22 = icmp slt i8 %21, 0
  br i1 %22, label %23, label %26

23:                                               ; preds = %17
  %24 = bitcast %"class.absl::variant_internal::VariantStateBaseDestructorNontrivial"* %12 to i8**
  %25 = load i8*, i8** %24, align 8
  tail call void @_ZdlPv(i8* %25) #10
  br label %26

26:                                               ; preds = %11, %15, %17, %23
  %27 = getelementptr inbounds %"struct.commander::CommandItem", %"struct.commander::CommandItem"* %0, i64 0, i32 3
  %28 = bitcast %"class.std::__1::basic_string"* %27 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %29 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %28, i64 0, i32 1, i32 1
  %30 = load i8, i8* %29, align 1
  %31 = icmp slt i8 %30, 0
  br i1 %31, label %32, label %35

32:                                               ; preds = %26
  %33 = bitcast %"class.std::__1::basic_string"* %27 to i8**
  %34 = load i8*, i8** %33, align 8
  tail call void @_ZdlPv(i8* %34) #10
  br label %35

35:                                               ; preds = %26, %32
  %36 = getelementptr inbounds %"struct.commander::CommandItem", %"struct.commander::CommandItem"* %0, i64 0, i32 1
  %37 = bitcast %"class.std::__1::basic_string"* %36 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %38 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %37, i64 0, i32 1, i32 1
  %39 = load i8, i8* %38, align 1
  %40 = icmp slt i8 %39, 0
  br i1 %40, label %41, label %44

41:                                               ; preds = %35
  %42 = bitcast %"class.std::__1::basic_string"* %36 to i8**
  %43 = load i8*, i8** %42, align 8
  tail call void @_ZdlPv(i8* %43) #10
  br label %44

44:                                               ; preds = %35, %41
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN9commander11CommandItemD0Ev(%"struct.commander::CommandItem"*) unnamed_addr #0 align 2 {
  tail call void @_ZN9commander11CommandItemD2Ev(%"struct.commander::CommandItem"* %0) #8
  %2 = bitcast %"struct.commander::CommandItem"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #10
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN9commander11CommandItemC2EOS0_(%"struct.commander::CommandItem"* nocapture, %"struct.commander::CommandItem"* nocapture dereferenceable(136)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"struct.commander::CommandItem", %"struct.commander::CommandItem"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN9commander11CommandItemE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %"struct.commander::CommandItem", %"struct.commander::CommandItem"* %0, i64 0, i32 1
  %5 = getelementptr inbounds %"struct.commander::CommandItem", %"struct.commander::CommandItem"* %1, i64 0, i32 1
  %6 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  %7 = bitcast %"class.std::__1::basic_string"* %5 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* align 8 %7, i64 24, i1 false) #8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 24, i1 false) #8
  %8 = getelementptr inbounds %"struct.commander::CommandItem", %"struct.commander::CommandItem"* %0, i64 0, i32 2
  %9 = getelementptr inbounds %"struct.commander::CommandItem", %"struct.commander::CommandItem"* %1, i64 0, i32 2
  %10 = load i32, i32* %9, align 8
  store i32 %10, i32* %8, align 8
  %11 = getelementptr inbounds %"struct.commander::CommandItem", %"struct.commander::CommandItem"* %0, i64 0, i32 3
  %12 = getelementptr inbounds %"struct.commander::CommandItem", %"struct.commander::CommandItem"* %1, i64 0, i32 3
  %13 = bitcast %"class.std::__1::basic_string"* %11 to i8*
  %14 = bitcast %"class.std::__1::basic_string"* %12 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %13, i8* align 8 %14, i64 24, i1 false) #8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %14, i8 0, i64 24, i1 false) #8
  %15 = getelementptr inbounds %"struct.commander::CommandItem", %"struct.commander::CommandItem"* %0, i64 0, i32 4
  %16 = getelementptr inbounds %"struct.commander::CommandItem", %"struct.commander::CommandItem"* %1, i64 0, i32 4
  %17 = getelementptr inbounds %"struct.commander::CommandItem", %"struct.commander::CommandItem"* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 -1, i64* %17, align 8
  %18 = getelementptr inbounds %"struct.commander::CommandItem", %"struct.commander::CommandItem"* %1, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0, i32 1
  %19 = load i64, i64* %18, align 8
  switch i64 %19, label %36 [
    i64 0, label %20
    i64 1, label %25
  ]

20:                                               ; preds = %2
  %21 = bitcast %"class.absl::variant"* %15 to i64*
  %22 = bitcast %"class.absl::variant"* %16 to %"class.base::internal::BindStateBase"**
  %23 = bitcast %"class.absl::variant"* %16 to i64*
  %24 = load i64, i64* %23, align 8
  store i64 %24, i64* %21, align 8
  br label %34

25:                                               ; preds = %2
  %26 = bitcast %"class.absl::variant"* %15 to i8*
  %27 = bitcast %"class.absl::variant"* %16 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %26, i8* align 8 %27, i64 24, i1 false) #8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %27, i8 0, i64 24, i1 false) #8
  %28 = getelementptr inbounds %"struct.commander::CommandItem", %"struct.commander::CommandItem"* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %29 = getelementptr inbounds %"struct.commander::CommandItem", %"struct.commander::CommandItem"* %1, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %30 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %29, i64 0, i32 0, i32 0, i32 0, i32 0
  %31 = bitcast %"class.base::RepeatingCallback"* %29 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = bitcast %"class.base::RepeatingCallback"* %28 to i64*
  store i64 %32, i64* %33, align 8
  br label %34

34:                                               ; preds = %25, %20
  %35 = phi %"class.base::internal::BindStateBase"** [ %22, %20 ], [ %30, %25 ]
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %35, align 8
  br label %36

36:                                               ; preds = %34, %2
  %37 = load i64, i64* %18, align 8
  store i64 %37, i64* %17, align 8
  %38 = getelementptr inbounds %"struct.commander::CommandItem", %"struct.commander::CommandItem"* %0, i64 0, i32 5
  %39 = getelementptr inbounds %"struct.commander::CommandItem", %"struct.commander::CommandItem"* %1, i64 0, i32 5
  %40 = bitcast double* %39 to i64*
  %41 = load i64, i64* %40, align 8
  %42 = bitcast double* %38 to i64*
  store i64 %41, i64* %42, align 8
  %43 = getelementptr inbounds %"struct.commander::CommandItem", %"struct.commander::CommandItem"* %0, i64 0, i32 6
  %44 = getelementptr inbounds %"struct.commander::CommandItem", %"struct.commander::CommandItem"* %1, i64 0, i32 6
  %45 = bitcast %"class.std::__1::vector"* %43 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %45, i8 0, i64 24, i1 false) #8
  %46 = bitcast %"class.std::__1::vector"* %44 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = bitcast %"class.std::__1::vector"* %43 to i64*
  store i64 %47, i64* %48, align 8
  %49 = getelementptr inbounds %"struct.commander::CommandItem", %"struct.commander::CommandItem"* %1, i64 0, i32 6, i32 0, i32 1
  %50 = bitcast %"class.gfx::Range"** %49 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = getelementptr inbounds %"struct.commander::CommandItem", %"struct.commander::CommandItem"* %0, i64 0, i32 6, i32 0, i32 1
  %53 = bitcast %"class.gfx::Range"** %52 to i64*
  store i64 %51, i64* %53, align 8
  %54 = getelementptr inbounds %"struct.commander::CommandItem", %"struct.commander::CommandItem"* %1, i64 0, i32 6, i32 0, i32 2, i32 0, i32 0
  %55 = bitcast %"class.gfx::Range"** %54 to i64*
  %56 = load i64, i64* %55, align 8
  %57 = getelementptr inbounds %"struct.commander::CommandItem", %"struct.commander::CommandItem"* %0, i64 0, i32 6, i32 0, i32 2, i32 0, i32 0
  %58 = bitcast %"class.gfx::Range"** %57 to i64*
  store i64 %56, i64* %58, align 8
  %59 = bitcast %"class.std::__1::vector"* %44 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %59, i8 0, i64 24, i1 false) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(136) %"struct.commander::CommandItem"* @_ZN9commander11CommandItemaSEOS0_(%"struct.commander::CommandItem"* returned, %"struct.commander::CommandItem"* dereferenceable(136)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"struct.absl::variant_internal::VariantCoreAccess::MoveAssignVisitor", align 8
  %4 = getelementptr inbounds %"struct.commander::CommandItem", %"struct.commander::CommandItem"* %0, i64 0, i32 1
  %5 = getelementptr inbounds %"struct.commander::CommandItem", %"struct.commander::CommandItem"* %1, i64 0, i32 1
  %6 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %7 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %6, i64 0, i32 1, i32 1
  %8 = load i8, i8* %7, align 1
  %9 = icmp slt i8 %8, 0
  br i1 %9, label %10, label %13

10:                                               ; preds = %2
  %11 = bitcast %"class.std::__1::basic_string"* %4 to i8**
  %12 = load i8*, i8** %11, align 8
  tail call void @_ZdlPv(i8* %12) #10
  br label %13

13:                                               ; preds = %2, %10
  %14 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  %15 = bitcast %"class.std::__1::basic_string"* %5 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %14, i8* align 8 %15, i64 24, i1 false) #8
  %16 = bitcast %"class.std::__1::basic_string"* %5 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %17 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %16, i64 0, i32 1, i32 1
  store i8 0, i8* %17, align 1
  %18 = bitcast %"class.std::__1::basic_string"* %5 to i16*
  store i16 0, i16* %18, align 2
  %19 = getelementptr inbounds %"struct.commander::CommandItem", %"struct.commander::CommandItem"* %1, i64 0, i32 2
  %20 = load i32, i32* %19, align 8
  %21 = getelementptr inbounds %"struct.commander::CommandItem", %"struct.commander::CommandItem"* %0, i64 0, i32 2
  store i32 %20, i32* %21, align 8
  %22 = getelementptr inbounds %"struct.commander::CommandItem", %"struct.commander::CommandItem"* %0, i64 0, i32 3
  %23 = getelementptr inbounds %"struct.commander::CommandItem", %"struct.commander::CommandItem"* %1, i64 0, i32 3
  %24 = bitcast %"class.std::__1::basic_string"* %22 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %25 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %24, i64 0, i32 1, i32 1
  %26 = load i8, i8* %25, align 1
  %27 = icmp slt i8 %26, 0
  br i1 %27, label %28, label %31

28:                                               ; preds = %13
  %29 = bitcast %"class.std::__1::basic_string"* %22 to i8**
  %30 = load i8*, i8** %29, align 8
  tail call void @_ZdlPv(i8* %30) #10
  br label %31

31:                                               ; preds = %13, %28
  %32 = bitcast %"class.std::__1::basic_string"* %22 to i8*
  %33 = bitcast %"class.std::__1::basic_string"* %23 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %32, i8* align 8 %33, i64 24, i1 false) #8
  %34 = bitcast %"class.std::__1::basic_string"* %23 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %35 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %34, i64 0, i32 1, i32 1
  store i8 0, i8* %35, align 1
  %36 = bitcast %"class.std::__1::basic_string"* %23 to i16*
  store i16 0, i16* %36, align 2
  %37 = getelementptr inbounds %"struct.commander::CommandItem", %"struct.commander::CommandItem"* %0, i64 0, i32 4, i32 0
  %38 = getelementptr inbounds %"struct.commander::CommandItem", %"struct.commander::CommandItem"* %1, i64 0, i32 4, i32 0
  %39 = bitcast %"struct.absl::variant_internal::VariantCoreAccess::MoveAssignVisitor"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %39) #8
  %40 = getelementptr inbounds %"struct.absl::variant_internal::VariantCoreAccess::MoveAssignVisitor", %"struct.absl::variant_internal::VariantCoreAccess::MoveAssignVisitor"* %3, i64 0, i32 0
  store %"class.absl::variant_internal::VariantMoveAssignBaseNontrivial"* %37, %"class.absl::variant_internal::VariantMoveAssignBaseNontrivial"** %40, align 8
  %41 = getelementptr inbounds %"struct.absl::variant_internal::VariantCoreAccess::MoveAssignVisitor", %"struct.absl::variant_internal::VariantCoreAccess::MoveAssignVisitor"* %3, i64 0, i32 1
  store %"class.absl::variant_internal::VariantMoveAssignBaseNontrivial"* %38, %"class.absl::variant_internal::VariantMoveAssignBaseNontrivial"** %41, align 8
  %42 = getelementptr inbounds %"struct.commander::CommandItem", %"struct.commander::CommandItem"* %1, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0, i32 1
  %43 = load i64, i64* %42, align 8
  call void @_ZN4absl16variant_internal18VisitIndicesSwitchILm2EE3RunINS0_17VariantCoreAccess17MoveAssignVisitorINS0_31VariantMoveAssignBaseNontrivialIJN4base12OnceCallbackIFvvEEENSt3__14pairINSB_12basic_stringIDsNSB_11char_traitsIDsEENSB_9allocatorIDsEEEENS7_17RepeatingCallbackIFNSB_6vectorINSB_10unique_ptrIN9commander11CommandItemENSB_14default_deleteISN_EEEENSG_ISQ_EEEERKSI_EEEEEEEEEEEENS0_22VisitIndicesResultImplIT_JmEE4typeEOS11_m(%"struct.absl::variant_internal::VariantCoreAccess::MoveAssignVisitor"* nonnull dereferenceable(16) %3, i64 %43) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %39) #8
  %44 = getelementptr inbounds %"struct.commander::CommandItem", %"struct.commander::CommandItem"* %1, i64 0, i32 5
  %45 = bitcast double* %44 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = getelementptr inbounds %"struct.commander::CommandItem", %"struct.commander::CommandItem"* %0, i64 0, i32 5
  %48 = bitcast double* %47 to i64*
  store i64 %46, i64* %48, align 8
  %49 = getelementptr inbounds %"struct.commander::CommandItem", %"struct.commander::CommandItem"* %0, i64 0, i32 6
  %50 = getelementptr inbounds %"struct.commander::CommandItem", %"struct.commander::CommandItem"* %1, i64 0, i32 6
  %51 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %49, i64 0, i32 0, i32 0
  %52 = load %"class.gfx::Range"*, %"class.gfx::Range"** %51, align 8
  %53 = icmp eq %"class.gfx::Range"* %52, null
  br i1 %53, label %60, label %54

54:                                               ; preds = %31
  %55 = ptrtoint %"class.gfx::Range"* %52 to i64
  %56 = getelementptr inbounds %"struct.commander::CommandItem", %"struct.commander::CommandItem"* %0, i64 0, i32 6, i32 0, i32 1
  %57 = bitcast %"class.gfx::Range"** %56 to i64*
  store i64 %55, i64* %57, align 8
  %58 = bitcast %"class.gfx::Range"* %52 to i8*
  call void @_ZdlPv(i8* %58) #10
  %59 = bitcast %"class.std::__1::vector"* %49 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %59, i8 0, i64 24, i1 false) #8
  br label %60

60:                                               ; preds = %31, %54
  %61 = bitcast %"class.std::__1::vector"* %50 to i64*
  %62 = load i64, i64* %61, align 8
  %63 = bitcast %"class.std::__1::vector"* %49 to i64*
  store i64 %62, i64* %63, align 8
  %64 = getelementptr inbounds %"struct.commander::CommandItem", %"struct.commander::CommandItem"* %1, i64 0, i32 6, i32 0, i32 1
  %65 = bitcast %"class.gfx::Range"** %64 to i64*
  %66 = load i64, i64* %65, align 8
  %67 = getelementptr inbounds %"struct.commander::CommandItem", %"struct.commander::CommandItem"* %0, i64 0, i32 6, i32 0, i32 1
  %68 = bitcast %"class.gfx::Range"** %67 to i64*
  store i64 %66, i64* %68, align 8
  %69 = getelementptr inbounds %"struct.commander::CommandItem", %"struct.commander::CommandItem"* %1, i64 0, i32 6, i32 0, i32 2, i32 0, i32 0
  %70 = bitcast %"class.gfx::Range"** %69 to i64*
  %71 = load i64, i64* %70, align 8
  %72 = getelementptr inbounds %"struct.commander::CommandItem", %"struct.commander::CommandItem"* %0, i64 0, i32 6, i32 0, i32 2, i32 0, i32 0
  %73 = bitcast %"class.gfx::Range"** %72 to i64*
  store i64 %71, i64* %73, align 8
  %74 = bitcast %"class.std::__1::vector"* %50 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %74, i8 0, i64 24, i1 false) #8
  ret %"struct.commander::CommandItem"* %0
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZN9commander11CommandItem7GetTypeEv(%"struct.commander::CommandItem"* readonly) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"struct.commander::CommandItem", %"struct.commander::CommandItem"* %0, i64 0, i32 4
  %3 = icmp eq %"class.absl::variant"* %2, null
  br i1 %3, label %9, label %4

4:                                                ; preds = %1
  %5 = getelementptr inbounds %"struct.commander::CommandItem", %"struct.commander::CommandItem"* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = icmp eq i64 %6, 1
  %8 = zext i1 %7 to i32
  br label %9

9:                                                ; preds = %1, %4
  %10 = phi i32 [ %8, %4 ], [ 0, %1 ]
  ret i32 %10
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind
declare void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"*) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4absl16variant_internal18VisitIndicesSwitchILm2EE3RunINS0_17VariantCoreAccess17MoveAssignVisitorINS0_31VariantMoveAssignBaseNontrivialIJN4base12OnceCallbackIFvvEEENSt3__14pairINSB_12basic_stringIDsNSB_11char_traitsIDsEENSB_9allocatorIDsEEEENS7_17RepeatingCallbackIFNSB_6vectorINSB_10unique_ptrIN9commander11CommandItemENSB_14default_deleteISN_EEEENSG_ISQ_EEEERKSI_EEEEEEEEEEEENS0_22VisitIndicesResultImplIT_JmEE4typeEOS11_m(%"struct.absl::variant_internal::VariantCoreAccess::MoveAssignVisitor"* dereferenceable(16), i64) local_unnamed_addr #0 comdat align 2 {
  switch i64 %1, label %64 [
    i64 0, label %3
    i64 1, label %29
  ]

3:                                                ; preds = %2
  %4 = getelementptr inbounds %"struct.absl::variant_internal::VariantCoreAccess::MoveAssignVisitor", %"struct.absl::variant_internal::VariantCoreAccess::MoveAssignVisitor"* %0, i64 0, i32 0
  %5 = load %"class.absl::variant_internal::VariantMoveAssignBaseNontrivial"*, %"class.absl::variant_internal::VariantMoveAssignBaseNontrivial"** %4, align 8
  %6 = getelementptr inbounds %"class.absl::variant_internal::VariantMoveAssignBaseNontrivial", %"class.absl::variant_internal::VariantMoveAssignBaseNontrivial"* %5, i64 0, i32 0, i32 0, i32 0, i32 1
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %"struct.absl::variant_internal::VariantCoreAccess::MoveAssignVisitor", %"struct.absl::variant_internal::VariantCoreAccess::MoveAssignVisitor"* %0, i64 0, i32 1
  %9 = bitcast %"class.absl::variant_internal::VariantMoveAssignBaseNontrivial"** %8 to %"class.base::OnceCallback"**
  %10 = load %"class.base::OnceCallback"*, %"class.base::OnceCallback"** %9, align 8
  switch i64 %7, label %24 [
    i64 0, label %11
    i64 1, label %15
  ]

11:                                               ; preds = %3
  %12 = bitcast %"class.absl::variant_internal::VariantMoveAssignBaseNontrivial"* %5 to %"class.base::internal::CallbackBase"*
  %13 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %10, i64 0, i32 0
  %14 = tail call dereferenceable(8) %"class.base::internal::CallbackBase"* @_ZN4base8internal12CallbackBaseaSEOS1_(%"class.base::internal::CallbackBase"* %12, %"class.base::internal::CallbackBase"* dereferenceable(8) %13) #8
  br label %81

15:                                               ; preds = %3
  %16 = getelementptr inbounds %"class.absl::variant_internal::VariantMoveAssignBaseNontrivial", %"class.absl::variant_internal::VariantMoveAssignBaseNontrivial"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  tail call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* %16) #8
  %17 = bitcast %"class.absl::variant_internal::VariantMoveAssignBaseNontrivial"* %5 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %18 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %17, i64 0, i32 1, i32 1
  %19 = load i8, i8* %18, align 1
  %20 = icmp slt i8 %19, 0
  br i1 %20, label %21, label %24

21:                                               ; preds = %15
  %22 = bitcast %"class.absl::variant_internal::VariantMoveAssignBaseNontrivial"* %5 to i8**
  %23 = load i8*, i8** %22, align 8
  tail call void @_ZdlPv(i8* %23) #10
  br label %24

24:                                               ; preds = %21, %15, %3
  store i64 -1, i64* %6, align 8
  %25 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %10, i64 0, i32 0, i32 0, i32 0
  %26 = bitcast %"class.base::OnceCallback"* %10 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = bitcast %"class.absl::variant_internal::VariantMoveAssignBaseNontrivial"* %5 to i64*
  store i64 %27, i64* %28, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %25, align 8
  store i64 0, i64* %6, align 8
  br label %81

29:                                               ; preds = %2
  %30 = getelementptr inbounds %"struct.absl::variant_internal::VariantCoreAccess::MoveAssignVisitor", %"struct.absl::variant_internal::VariantCoreAccess::MoveAssignVisitor"* %0, i64 0, i32 0
  %31 = load %"class.absl::variant_internal::VariantMoveAssignBaseNontrivial"*, %"class.absl::variant_internal::VariantMoveAssignBaseNontrivial"** %30, align 8
  %32 = getelementptr inbounds %"class.absl::variant_internal::VariantMoveAssignBaseNontrivial", %"class.absl::variant_internal::VariantMoveAssignBaseNontrivial"* %31, i64 0, i32 0, i32 0, i32 0, i32 1
  %33 = load i64, i64* %32, align 8
  %34 = getelementptr inbounds %"struct.absl::variant_internal::VariantCoreAccess::MoveAssignVisitor", %"struct.absl::variant_internal::VariantCoreAccess::MoveAssignVisitor"* %0, i64 0, i32 1
  %35 = load %"class.absl::variant_internal::VariantMoveAssignBaseNontrivial"*, %"class.absl::variant_internal::VariantMoveAssignBaseNontrivial"** %34, align 8
  switch i64 %33, label %55 [
    i64 1, label %36
    i64 0, label %53
  ]

36:                                               ; preds = %29
  %37 = bitcast %"class.absl::variant_internal::VariantMoveAssignBaseNontrivial"* %31 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %38 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %37, i64 0, i32 1, i32 1
  %39 = load i8, i8* %38, align 1
  %40 = icmp slt i8 %39, 0
  br i1 %40, label %41, label %44

41:                                               ; preds = %36
  %42 = bitcast %"class.absl::variant_internal::VariantMoveAssignBaseNontrivial"* %31 to i8**
  %43 = load i8*, i8** %42, align 8
  tail call void @_ZdlPv(i8* %43) #10
  br label %44

44:                                               ; preds = %41, %36
  %45 = bitcast %"class.absl::variant_internal::VariantMoveAssignBaseNontrivial"* %31 to i8*
  %46 = bitcast %"class.absl::variant_internal::VariantMoveAssignBaseNontrivial"* %35 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %45, i8* align 8 %46, i64 24, i1 false) #8
  %47 = bitcast %"class.absl::variant_internal::VariantMoveAssignBaseNontrivial"* %35 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %48 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %47, i64 0, i32 1, i32 1
  store i8 0, i8* %48, align 1
  %49 = bitcast %"class.absl::variant_internal::VariantMoveAssignBaseNontrivial"* %35 to i16*
  store i16 0, i16* %49, align 2
  %50 = getelementptr inbounds %"class.absl::variant_internal::VariantMoveAssignBaseNontrivial", %"class.absl::variant_internal::VariantMoveAssignBaseNontrivial"* %31, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %51 = getelementptr inbounds %"class.absl::variant_internal::VariantMoveAssignBaseNontrivial", %"class.absl::variant_internal::VariantMoveAssignBaseNontrivial"* %35, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %52 = tail call dereferenceable(8) %"class.base::internal::CallbackBaseCopyable"* @_ZN4base8internal20CallbackBaseCopyableaSEOS1_(%"class.base::internal::CallbackBaseCopyable"* %50, %"class.base::internal::CallbackBaseCopyable"* dereferenceable(8) %51) #8
  br label %81

53:                                               ; preds = %29
  %54 = bitcast %"class.absl::variant_internal::VariantMoveAssignBaseNontrivial"* %31 to %"class.base::internal::CallbackBase"*
  tail call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* %54) #8
  br label %55

55:                                               ; preds = %53, %29
  store i64 -1, i64* %32, align 8
  %56 = bitcast %"class.absl::variant_internal::VariantMoveAssignBaseNontrivial"* %31 to i8*
  %57 = bitcast %"class.absl::variant_internal::VariantMoveAssignBaseNontrivial"* %35 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %56, i8* align 8 %57, i64 24, i1 false) #8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %57, i8 0, i64 24, i1 false) #8
  %58 = getelementptr inbounds %"class.absl::variant_internal::VariantMoveAssignBaseNontrivial", %"class.absl::variant_internal::VariantMoveAssignBaseNontrivial"* %31, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %59 = getelementptr inbounds %"class.absl::variant_internal::VariantMoveAssignBaseNontrivial", %"class.absl::variant_internal::VariantMoveAssignBaseNontrivial"* %35, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %60 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %59, i64 0, i32 0, i32 0, i32 0, i32 0
  %61 = bitcast %"class.base::RepeatingCallback"* %59 to i64*
  %62 = load i64, i64* %61, align 8
  %63 = bitcast %"class.base::RepeatingCallback"* %58 to i64*
  store i64 %62, i64* %63, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %60, align 8
  store i64 1, i64* %32, align 8
  br label %81

64:                                               ; preds = %2
  %65 = getelementptr inbounds %"struct.absl::variant_internal::VariantCoreAccess::MoveAssignVisitor", %"struct.absl::variant_internal::VariantCoreAccess::MoveAssignVisitor"* %0, i64 0, i32 0
  %66 = load %"class.absl::variant_internal::VariantMoveAssignBaseNontrivial"*, %"class.absl::variant_internal::VariantMoveAssignBaseNontrivial"** %65, align 8
  %67 = getelementptr inbounds %"class.absl::variant_internal::VariantMoveAssignBaseNontrivial", %"class.absl::variant_internal::VariantMoveAssignBaseNontrivial"* %66, i64 0, i32 0, i32 0, i32 0, i32 1
  %68 = load i64, i64* %67, align 8
  switch i64 %68, label %80 [
    i64 0, label %69
    i64 1, label %71
  ]

69:                                               ; preds = %64
  %70 = bitcast %"class.absl::variant_internal::VariantMoveAssignBaseNontrivial"* %66 to %"class.base::internal::CallbackBase"*
  tail call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* %70) #8
  br label %80

71:                                               ; preds = %64
  %72 = getelementptr inbounds %"class.absl::variant_internal::VariantMoveAssignBaseNontrivial", %"class.absl::variant_internal::VariantMoveAssignBaseNontrivial"* %66, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  tail call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* %72) #8
  %73 = bitcast %"class.absl::variant_internal::VariantMoveAssignBaseNontrivial"* %66 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %74 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %73, i64 0, i32 1, i32 1
  %75 = load i8, i8* %74, align 1
  %76 = icmp slt i8 %75, 0
  br i1 %76, label %77, label %80

77:                                               ; preds = %71
  %78 = bitcast %"class.absl::variant_internal::VariantMoveAssignBaseNontrivial"* %66 to i8**
  %79 = load i8*, i8** %78, align 8
  tail call void @_ZdlPv(i8* %79) #10
  br label %80

80:                                               ; preds = %64, %69, %71, %77
  store i64 -1, i64* %67, align 8
  br label %81

81:                                               ; preds = %55, %44, %24, %11, %80
  ret void
}

; Function Attrs: nounwind
declare dereferenceable(8) %"class.base::internal::CallbackBase"* @_ZN4base8internal12CallbackBaseaSEOS1_(%"class.base::internal::CallbackBase"*, %"class.base::internal::CallbackBase"* dereferenceable(8)) local_unnamed_addr #4

; Function Attrs: nounwind
declare dereferenceable(8) %"class.base::internal::CallbackBaseCopyable"* @_ZN4base8internal20CallbackBaseCopyableaSEOS1_(%"class.base::internal::CallbackBaseCopyable"*, %"class.base::internal::CallbackBaseCopyable"* dereferenceable(8)) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #5

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #6

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #7

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { noreturn nounwind }
attributes #10 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.unroll.disable"}
!11 = distinct !{!11, !10}
!12 = distinct !{!12, !8}
