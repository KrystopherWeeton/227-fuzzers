; ModuleID = '../../base/json/json_value_converter.cc'
source_filename = "../../base/json/json_value_converter.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.base::internal::BasicValueConverter" = type { %"class.base::internal::ValueConverter" }
%"class.base::internal::ValueConverter" = type { i32 (...)** }
%"class.base::Value" = type { %"class.absl::variant" }
%"class.absl::variant" = type { %"class.absl::variant_internal::VariantCopyAssignBaseNontrivial" }
%"class.absl::variant_internal::VariantCopyAssignBaseNontrivial" = type { %"class.absl::variant_internal::VariantMoveAssignBaseNontrivial" }
%"class.absl::variant_internal::VariantMoveAssignBaseNontrivial" = type { %"class.absl::variant_internal::VariantCopyBaseNontrivial" }
%"class.absl::variant_internal::VariantCopyBaseNontrivial" = type { %"class.absl::variant_internal::VariantMoveBaseNontrivial" }
%"class.absl::variant_internal::VariantMoveBaseNontrivial" = type { %"class.absl::variant_internal::VariantStateBaseDestructorNontrivial" }
%"class.absl::variant_internal::VariantStateBaseDestructorNontrivial" = type { %"class.absl::variant_internal::VariantStateBase" }
%"class.absl::variant_internal::VariantStateBase" = type { %"union.absl::variant_internal::DestructibleUnionImpl", i64 }
%"union.absl::variant_internal::DestructibleUnionImpl" = type { %"union.absl::variant_internal::DestructibleUnionImpl.0" }
%"union.absl::variant_internal::DestructibleUnionImpl.0" = type { %"union.absl::variant_internal::DestructibleUnionImpl.1" }
%"union.absl::variant_internal::DestructibleUnionImpl.1" = type { %"union.absl::variant_internal::DestructibleUnionImpl.2" }
%"union.absl::variant_internal::DestructibleUnionImpl.2" = type { %"union.absl::variant_internal::DestructibleUnionImpl.3" }
%"union.absl::variant_internal::DestructibleUnionImpl.3" = type { %"class.std::__1::basic_string" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.base::internal::BasicValueConverter.28" = type { %"class.base::internal::ValueConverter.29" }
%"class.base::internal::ValueConverter.29" = type { i32 (...)** }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.base::internal::BasicValueConverter.30" = type { %"class.base::internal::ValueConverter.31" }
%"class.base::internal::ValueConverter.31" = type { i32 (...)** }
%"class.std::__1::basic_string.32" = type { %"class.std::__1::__compressed_pair.33" }
%"class.std::__1::__compressed_pair.33" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"struct.std::__1::__compressed_pair_elem.34" = type { %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__rep" }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__rep" = type { %union.anon.35 }
%union.anon.35 = type { %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__long" }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__long" = type { i16*, i64, i64 }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short" = type { [11 x i16], %struct.anon.36 }
%struct.anon.36 = type { %"struct.std::__1::__padding.37", i8 }
%"struct.std::__1::__padding.37" = type { [1 x i8] }
%"class.base::internal::BasicValueConverter.41" = type { %"class.base::internal::ValueConverter.42" }
%"class.base::internal::ValueConverter.42" = type { i32 (...)** }
%"class.base::internal::BasicValueConverter.43" = type { %"class.base::internal::ValueConverter.44" }
%"class.base::internal::ValueConverter.44" = type { i32 (...)** }

$_ZN4base8internal14ValueConverterIiED2Ev = comdat any

$_ZN4base8internal19BasicValueConverterIiED0Ev = comdat any

$_ZN4base8internal14ValueConverterINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEED2Ev = comdat any

$_ZN4base8internal19BasicValueConverterINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEED0Ev = comdat any

$_ZN4base8internal14ValueConverterINSt3__112basic_stringIDsNS2_11char_traitsIDsEENS2_9allocatorIDsEEEEED2Ev = comdat any

$_ZN4base8internal19BasicValueConverterINSt3__112basic_stringIDsNS2_11char_traitsIDsEENS2_9allocatorIDsEEEEED0Ev = comdat any

$_ZN4base8internal14ValueConverterIbED2Ev = comdat any

$_ZN4base8internal19BasicValueConverterIbED0Ev = comdat any

$_ZN4base8internal14ValueConverterIdED2Ev = comdat any

$_ZN4base8internal19BasicValueConverterIdED0Ev = comdat any

@_ZTVN4base8internal19BasicValueConverterIiEE = hidden unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.base::internal::ValueConverter"*)* @_ZN4base8internal14ValueConverterIiED2Ev to i8*), i8* bitcast (void (%"class.base::internal::BasicValueConverter"*)* @_ZN4base8internal19BasicValueConverterIiED0Ev to i8*), i8* bitcast (i1 (%"class.base::internal::BasicValueConverter"*, %"class.base::Value"*, i32*)* @_ZNK4base8internal19BasicValueConverterIiE7ConvertERKNS_5ValueEPi to i8*)] }, align 8
@_ZTVN4base8internal19BasicValueConverterINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEE = hidden unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.base::internal::ValueConverter.29"*)* @_ZN4base8internal14ValueConverterINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEED2Ev to i8*), i8* bitcast (void (%"class.base::internal::BasicValueConverter.28"*)* @_ZN4base8internal19BasicValueConverterINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEED0Ev to i8*), i8* bitcast (i1 (%"class.base::internal::BasicValueConverter.28"*, %"class.base::Value"*, %"class.std::__1::basic_string"*)* @_ZNK4base8internal19BasicValueConverterINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE7ConvertERKNS_5ValueEPS8_ to i8*)] }, align 8
@_ZTVN4base8internal19BasicValueConverterINSt3__112basic_stringIDsNS2_11char_traitsIDsEENS2_9allocatorIDsEEEEEE = hidden unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.base::internal::ValueConverter.31"*)* @_ZN4base8internal14ValueConverterINSt3__112basic_stringIDsNS2_11char_traitsIDsEENS2_9allocatorIDsEEEEED2Ev to i8*), i8* bitcast (void (%"class.base::internal::BasicValueConverter.30"*)* @_ZN4base8internal19BasicValueConverterINSt3__112basic_stringIDsNS2_11char_traitsIDsEENS2_9allocatorIDsEEEEED0Ev to i8*), i8* bitcast (i1 (%"class.base::internal::BasicValueConverter.30"*, %"class.base::Value"*, %"class.std::__1::basic_string.32"*)* @_ZNK4base8internal19BasicValueConverterINSt3__112basic_stringIDsNS2_11char_traitsIDsEENS2_9allocatorIDsEEEEE7ConvertERKNS_5ValueEPS8_ to i8*)] }, align 8
@_ZTVN4base8internal19BasicValueConverterIbEE = hidden unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.base::internal::ValueConverter.44"*)* @_ZN4base8internal14ValueConverterIbED2Ev to i8*), i8* bitcast (void (%"class.base::internal::BasicValueConverter.43"*)* @_ZN4base8internal19BasicValueConverterIbED0Ev to i8*), i8* bitcast (i1 (%"class.base::internal::BasicValueConverter.43"*, %"class.base::Value"*, i8*)* @_ZNK4base8internal19BasicValueConverterIbE7ConvertERKNS_5ValueEPb to i8*)] }, align 8
@_ZTVN4base8internal19BasicValueConverterIdEE = hidden unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.base::internal::ValueConverter.42"*)* @_ZN4base8internal14ValueConverterIdED2Ev to i8*), i8* bitcast (void (%"class.base::internal::BasicValueConverter.41"*)* @_ZN4base8internal19BasicValueConverterIdED0Ev to i8*), i8* bitcast (i1 (%"class.base::internal::BasicValueConverter.41"*, %"class.base::Value"*, double*)* @_ZNK4base8internal19BasicValueConverterIdE7ConvertERKNS_5ValueEPd to i8*)] }, align 8

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK4base8internal19BasicValueConverterIiE7ConvertERKNS_5ValueEPi(%"class.base::internal::BasicValueConverter"* nocapture readnone, %"class.base::Value"* dereferenceable(32), i32*) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.base::Value", %"class.base::Value"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = trunc i64 %5 to i8
  %7 = icmp eq i8 %6, 2
  br i1 %7, label %8, label %12

8:                                                ; preds = %3
  %9 = icmp eq i32* %2, null
  br i1 %9, label %12, label %10

10:                                               ; preds = %8
  %11 = tail call i32 @_ZNK4base5Value6GetIntEv(%"class.base::Value"* %1) #5
  store i32 %11, i32* %2, align 4
  br label %12

12:                                               ; preds = %10, %8, %3
  %13 = phi i1 [ false, %3 ], [ true, %8 ], [ true, %10 ]
  ret i1 %13
}

declare i32 @_ZNK4base5Value6GetIntEv(%"class.base::Value"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK4base8internal19BasicValueConverterINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE7ConvertERKNS_5ValueEPS8_(%"class.base::internal::BasicValueConverter.28"* nocapture readnone, %"class.base::Value"* dereferenceable(32), %"class.std::__1::basic_string"*) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.base::Value", %"class.base::Value"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = trunc i64 %5 to i8
  %7 = icmp eq i8 %6, 4
  br i1 %7, label %8, label %42

8:                                                ; preds = %3
  %9 = icmp eq %"class.std::__1::basic_string"* %2, null
  br i1 %9, label %42, label %10

10:                                               ; preds = %8
  %11 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNK4base5Value9GetStringEv(%"class.base::Value"* %1) #5
  %12 = icmp eq %"class.std::__1::basic_string"* %11, %2
  br i1 %12, label %42, label %13

13:                                               ; preds = %10
  %14 = bitcast %"class.std::__1::basic_string"* %2 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %15 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %14, i64 0, i32 1, i32 0
  %16 = load i8, i8* %15, align 1
  %17 = icmp slt i8 %16, 0
  %18 = bitcast %"class.std::__1::basic_string"* %11 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %19 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %18, i64 0, i32 1, i32 0
  %20 = load i8, i8* %19, align 1
  %21 = icmp slt i8 %20, 0
  br i1 %17, label %32, label %22

22:                                               ; preds = %13
  br i1 %21, label %26, label %23

23:                                               ; preds = %22
  %24 = bitcast %"class.std::__1::basic_string"* %2 to i8*
  %25 = bitcast %"class.std::__1::basic_string"* %11 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %24, i8* align 8 %25, i64 24, i1 false) #5
  br label %42

26:                                               ; preds = %22
  %27 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %28 = load i8*, i8** %27, align 8
  %29 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %30 = load i64, i64* %29, align 8
  %31 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_no_aliasILb1EEERS5_PKcm(%"class.std::__1::basic_string"* nonnull %2, i8* %28, i64 %30) #5
  br label %42

32:                                               ; preds = %13
  %33 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %34 = load i8*, i8** %33, align 8
  %35 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %36 = load i64, i64* %35, align 8
  %37 = bitcast %"class.std::__1::basic_string"* %11 to i8*
  %38 = zext i8 %20 to i64
  %39 = select i1 %21, i8* %34, i8* %37
  %40 = select i1 %21, i64 %36, i64 %38
  %41 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_no_aliasILb0EEERS5_PKcm(%"class.std::__1::basic_string"* nonnull %2, i8* %39, i64 %40) #5
  br label %42

42:                                               ; preds = %32, %26, %23, %10, %8, %3
  %43 = phi i1 [ false, %3 ], [ true, %8 ], [ true, %10 ], [ true, %23 ], [ true, %26 ], [ true, %32 ]
  ret i1 %43
}

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNK4base5Value9GetStringEv(%"class.base::Value"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK4base8internal19BasicValueConverterINSt3__112basic_stringIDsNS2_11char_traitsIDsEENS2_9allocatorIDsEEEEE7ConvertERKNS_5ValueEPS8_(%"class.base::internal::BasicValueConverter.30"* nocapture readnone, %"class.base::Value"* dereferenceable(32), %"class.std::__1::basic_string.32"*) unnamed_addr #0 align 2 {
  %4 = alloca %"class.std::__1::basic_string.32", align 8
  %5 = getelementptr inbounds %"class.base::Value", %"class.base::Value"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = trunc i64 %6 to i8
  %8 = icmp eq i8 %7, 4
  br i1 %8, label %9, label %35

9:                                                ; preds = %3
  %10 = icmp eq %"class.std::__1::basic_string.32"* %2, null
  br i1 %10, label %35, label %11

11:                                               ; preds = %9
  %12 = bitcast %"class.std::__1::basic_string.32"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %12) #5
  %13 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNK4base5Value9GetStringEv(%"class.base::Value"* %1) #5
  %14 = bitcast %"class.std::__1::basic_string"* %13 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %15 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %14, i64 0, i32 1, i32 0
  %16 = load i8, i8* %15, align 1
  %17 = icmp slt i8 %16, 0
  %18 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %13, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = load i8*, i8** %18, align 8
  %20 = bitcast %"class.std::__1::basic_string"* %13 to i8*
  %21 = select i1 %17, i8* %19, i8* %20
  %22 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %13, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %23 = load i64, i64* %22, align 8
  %24 = zext i8 %16 to i64
  %25 = select i1 %17, i64 %23, i64 %24
  call void @_ZN4base11UTF8ToUTF16ENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"class.std::__1::basic_string.32"* nonnull sret %4, i8* %21, i64 %25) #5
  %26 = bitcast %"class.std::__1::basic_string.32"* %2 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %27 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %26, i64 0, i32 1, i32 1
  %28 = load i8, i8* %27, align 1
  %29 = icmp slt i8 %28, 0
  br i1 %29, label %30, label %33

30:                                               ; preds = %11
  %31 = bitcast %"class.std::__1::basic_string.32"* %2 to i8**
  %32 = load i8*, i8** %31, align 8
  call void @_ZdlPv(i8* %32) #6
  br label %33

33:                                               ; preds = %30, %11
  %34 = bitcast %"class.std::__1::basic_string.32"* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %34, i8* nonnull align 8 %12, i64 24, i1 false) #5
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %12) #5
  br label %35

35:                                               ; preds = %33, %9, %3
  %36 = phi i1 [ false, %3 ], [ true, %9 ], [ true, %33 ]
  ret i1 %36
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare void @_ZN4base11UTF8ToUTF16ENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"class.std::__1::basic_string.32"* sret, i8*, i64) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK4base8internal19BasicValueConverterIdE7ConvertERKNS_5ValueEPd(%"class.base::internal::BasicValueConverter.41"* nocapture readnone, %"class.base::Value"* dereferenceable(32), double*) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.base::Value", %"class.base::Value"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = and i64 %5, 254
  %7 = icmp eq i64 %6, 2
  br i1 %7, label %8, label %12

8:                                                ; preds = %3
  %9 = icmp eq double* %2, null
  br i1 %9, label %12, label %10

10:                                               ; preds = %8
  %11 = tail call double @_ZNK4base5Value9GetDoubleEv(%"class.base::Value"* %1) #5
  store double %11, double* %2, align 8
  br label %12

12:                                               ; preds = %3, %10, %8
  %13 = phi i1 [ true, %8 ], [ true, %10 ], [ false, %3 ]
  ret i1 %13
}

declare double @_ZNK4base5Value9GetDoubleEv(%"class.base::Value"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK4base8internal19BasicValueConverterIbE7ConvertERKNS_5ValueEPb(%"class.base::internal::BasicValueConverter.43"* nocapture readnone, %"class.base::Value"* dereferenceable(32), i8*) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.base::Value", %"class.base::Value"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = trunc i64 %5 to i8
  %7 = icmp eq i8 %6, 1
  br i1 %7, label %8, label %13

8:                                                ; preds = %3
  %9 = icmp eq i8* %2, null
  br i1 %9, label %13, label %10

10:                                               ; preds = %8
  %11 = tail call zeroext i1 @_ZNK4base5Value7GetBoolEv(%"class.base::Value"* %1) #5
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %2, align 1
  br label %13

13:                                               ; preds = %10, %8, %3
  %14 = phi i1 [ false, %3 ], [ true, %8 ], [ true, %10 ]
  ret i1 %14
}

declare zeroext i1 @_ZNK4base5Value7GetBoolEv(%"class.base::Value"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base8internal14ValueConverterIiED2Ev(%"class.base::internal::ValueConverter"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base8internal19BasicValueConverterIiED0Ev(%"class.base::internal::BasicValueConverter"*) unnamed_addr #3 comdat align 2 {
  %2 = bitcast %"class.base::internal::BasicValueConverter"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base8internal14ValueConverterINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEED2Ev(%"class.base::internal::ValueConverter.29"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base8internal19BasicValueConverterINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEED0Ev(%"class.base::internal::BasicValueConverter.28"*) unnamed_addr #3 comdat align 2 {
  %2 = bitcast %"class.base::internal::BasicValueConverter.28"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base8internal14ValueConverterINSt3__112basic_stringIDsNS2_11char_traitsIDsEENS2_9allocatorIDsEEEEED2Ev(%"class.base::internal::ValueConverter.31"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base8internal19BasicValueConverterINSt3__112basic_stringIDsNS2_11char_traitsIDsEENS2_9allocatorIDsEEEEED0Ev(%"class.base::internal::BasicValueConverter.30"*) unnamed_addr #3 comdat align 2 {
  %2 = bitcast %"class.base::internal::BasicValueConverter.30"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base8internal14ValueConverterIbED2Ev(%"class.base::internal::ValueConverter.44"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base8internal19BasicValueConverterIbED0Ev(%"class.base::internal::BasicValueConverter.43"*) unnamed_addr #3 comdat align 2 {
  %2 = bitcast %"class.base::internal::BasicValueConverter.43"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base8internal14ValueConverterIdED2Ev(%"class.base::internal::ValueConverter.42"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base8internal19BasicValueConverterIdED0Ev(%"class.base::internal::BasicValueConverter.41"*) unnamed_addr #3 comdat align 2 {
  %2 = bitcast %"class.base::internal::BasicValueConverter.41"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #6
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_no_aliasILb1EEERS5_PKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #1

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_no_aliasILb0EEERS5_PKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
