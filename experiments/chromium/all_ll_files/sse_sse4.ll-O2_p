; ModuleID = '../../third_party/libaom/source/libaom/aom_dsp/x86/sse_sse4.c'
source_filename = "../../third_party/libaom/source/libaom/aom_dsp/x86/sse_sse4.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind readonly ssp uwtable
define hidden i64 @aom_sse_sse4_1(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i32, i32) local_unnamed_addr #0 {
  switch i32 %4, label %413 [
    i32 4, label %22
    i32 8, label %19
    i32 16, label %16
    i32 32, label %13
    i32 64, label %10
    i32 128, label %7
  ]

7:                                                ; preds = %6
  %8 = sext i32 %1 to i64
  %9 = sext i32 %3 to i64
  br label %246

10:                                               ; preds = %6
  %11 = sext i32 %1 to i64
  %12 = sext i32 %3 to i64
  br label %159

13:                                               ; preds = %6
  %14 = sext i32 %1 to i64
  %15 = sext i32 %3 to i64
  br label %112

16:                                               ; preds = %6
  %17 = sext i32 %1 to i64
  %18 = sext i32 %3 to i64
  br label %85

19:                                               ; preds = %6
  %20 = sext i32 %1 to i64
  %21 = sext i32 %3 to i64
  br label %61

22:                                               ; preds = %6
  %23 = sext i32 %1 to i64
  %24 = sext i32 %3 to i64
  %25 = shl i32 %1, 1
  %26 = sext i32 %25 to i64
  %27 = shl i32 %3, 1
  %28 = sext i32 %27 to i64
  br label %29

29:                                               ; preds = %22, %29
  %30 = phi <4 x i32> [ %56, %29 ], [ zeroinitializer, %22 ]
  %31 = phi i8* [ %58, %29 ], [ %2, %22 ]
  %32 = phi i8* [ %57, %29 ], [ %0, %22 ]
  %33 = phi i32 [ %59, %29 ], [ 0, %22 ]
  %34 = bitcast i8* %32 to i32*
  %35 = load i32, i32* %34, align 1
  %36 = insertelement <4 x i32> undef, i32 %35, i32 0
  %37 = getelementptr inbounds i8, i8* %32, i64 %23
  %38 = bitcast i8* %37 to i32*
  %39 = load i32, i32* %38, align 1
  %40 = bitcast i8* %31 to i32*
  %41 = load i32, i32* %40, align 1
  %42 = insertelement <4 x i32> undef, i32 %41, i32 0
  %43 = getelementptr inbounds i8, i8* %31, i64 %24
  %44 = bitcast i8* %43 to i32*
  %45 = load i32, i32* %44, align 1
  %46 = insertelement <4 x i32> %36, i32 %39, i32 1
  %47 = bitcast <4 x i32> %46 to <16 x i8>
  %48 = shufflevector <16 x i8> %47, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %49 = zext <8 x i8> %48 to <8 x i16>
  %50 = insertelement <4 x i32> %42, i32 %45, i32 1
  %51 = bitcast <4 x i32> %50 to <16 x i8>
  %52 = shufflevector <16 x i8> %51, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %53 = zext <8 x i8> %52 to <8 x i16>
  %54 = sub nsw <8 x i16> %49, %53
  %55 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %54, <8 x i16> %54) #2
  %56 = add <4 x i32> %55, %30
  %57 = getelementptr inbounds i8, i8* %32, i64 %26
  %58 = getelementptr inbounds i8, i8* %31, i64 %28
  %59 = add nuw nsw i32 %33, 2
  %60 = icmp slt i32 %59, %5
  br i1 %60, label %29, label %534

61:                                               ; preds = %19, %61
  %62 = phi <4 x i32> [ %80, %61 ], [ zeroinitializer, %19 ]
  %63 = phi i8* [ %82, %61 ], [ %2, %19 ]
  %64 = phi i8* [ %81, %61 ], [ %0, %19 ]
  %65 = phi i32 [ %83, %61 ], [ 0, %19 ]
  %66 = bitcast i8* %64 to i64*
  %67 = load i64, i64* %66, align 1
  %68 = insertelement <2 x i64> undef, i64 %67, i32 0
  %69 = bitcast i8* %63 to i64*
  %70 = load i64, i64* %69, align 1
  %71 = insertelement <2 x i64> undef, i64 %70, i32 0
  %72 = bitcast <2 x i64> %68 to <16 x i8>
  %73 = shufflevector <16 x i8> %72, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %74 = zext <8 x i8> %73 to <8 x i16>
  %75 = bitcast <2 x i64> %71 to <16 x i8>
  %76 = shufflevector <16 x i8> %75, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %77 = zext <8 x i8> %76 to <8 x i16>
  %78 = sub nsw <8 x i16> %74, %77
  %79 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %78, <8 x i16> %78) #2
  %80 = add <4 x i32> %79, %62
  %81 = getelementptr inbounds i8, i8* %64, i64 %20
  %82 = getelementptr inbounds i8, i8* %63, i64 %21
  %83 = add nuw nsw i32 %65, 1
  %84 = icmp slt i32 %83, %5
  br i1 %84, label %61, label %534

85:                                               ; preds = %16, %85
  %86 = phi <4 x i32> [ %107, %85 ], [ zeroinitializer, %16 ]
  %87 = phi i8* [ %109, %85 ], [ %2, %16 ]
  %88 = phi i8* [ %108, %85 ], [ %0, %16 ]
  %89 = phi i32 [ %110, %85 ], [ 0, %16 ]
  %90 = bitcast i8* %88 to <16 x i8>*
  %91 = load <16 x i8>, <16 x i8>* %90, align 1
  %92 = bitcast i8* %87 to <16 x i8>*
  %93 = load <16 x i8>, <16 x i8>* %92, align 1
  %94 = shufflevector <16 x i8> %91, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %95 = zext <8 x i8> %94 to <8 x i16>
  %96 = shufflevector <16 x i8> %91, <16 x i8> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %97 = zext <8 x i8> %96 to <8 x i16>
  %98 = shufflevector <16 x i8> %93, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %99 = zext <8 x i8> %98 to <8 x i16>
  %100 = shufflevector <16 x i8> %93, <16 x i8> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %101 = zext <8 x i8> %100 to <8 x i16>
  %102 = sub nsw <8 x i16> %95, %99
  %103 = sub nsw <8 x i16> %97, %101
  %104 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %102, <8 x i16> %102) #2
  %105 = add <4 x i32> %104, %86
  %106 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %103, <8 x i16> %103) #2
  %107 = add <4 x i32> %105, %106
  %108 = getelementptr inbounds i8, i8* %88, i64 %17
  %109 = getelementptr inbounds i8, i8* %87, i64 %18
  %110 = add nuw nsw i32 %89, 1
  %111 = icmp slt i32 %110, %5
  br i1 %111, label %85, label %534

112:                                              ; preds = %13, %112
  %113 = phi <4 x i32> [ %154, %112 ], [ zeroinitializer, %13 ]
  %114 = phi i8* [ %156, %112 ], [ %2, %13 ]
  %115 = phi i8* [ %155, %112 ], [ %0, %13 ]
  %116 = phi i32 [ %157, %112 ], [ 0, %13 ]
  %117 = bitcast i8* %115 to <16 x i8>*
  %118 = load <16 x i8>, <16 x i8>* %117, align 1
  %119 = bitcast i8* %114 to <16 x i8>*
  %120 = load <16 x i8>, <16 x i8>* %119, align 1
  %121 = shufflevector <16 x i8> %118, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %122 = zext <8 x i8> %121 to <8 x i16>
  %123 = shufflevector <16 x i8> %118, <16 x i8> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %124 = zext <8 x i8> %123 to <8 x i16>
  %125 = shufflevector <16 x i8> %120, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %126 = zext <8 x i8> %125 to <8 x i16>
  %127 = shufflevector <16 x i8> %120, <16 x i8> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %128 = zext <8 x i8> %127 to <8 x i16>
  %129 = sub nsw <8 x i16> %122, %126
  %130 = sub nsw <8 x i16> %124, %128
  %131 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %129, <8 x i16> %129) #2
  %132 = add <4 x i32> %131, %113
  %133 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %130, <8 x i16> %130) #2
  %134 = add <4 x i32> %132, %133
  %135 = getelementptr inbounds i8, i8* %115, i64 16
  %136 = getelementptr inbounds i8, i8* %114, i64 16
  %137 = bitcast i8* %135 to <16 x i8>*
  %138 = load <16 x i8>, <16 x i8>* %137, align 1
  %139 = bitcast i8* %136 to <16 x i8>*
  %140 = load <16 x i8>, <16 x i8>* %139, align 1
  %141 = shufflevector <16 x i8> %138, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %142 = zext <8 x i8> %141 to <8 x i16>
  %143 = shufflevector <16 x i8> %138, <16 x i8> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %144 = zext <8 x i8> %143 to <8 x i16>
  %145 = shufflevector <16 x i8> %140, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %146 = zext <8 x i8> %145 to <8 x i16>
  %147 = shufflevector <16 x i8> %140, <16 x i8> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %148 = zext <8 x i8> %147 to <8 x i16>
  %149 = sub nsw <8 x i16> %142, %146
  %150 = sub nsw <8 x i16> %144, %148
  %151 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %149, <8 x i16> %149) #2
  %152 = add <4 x i32> %134, %151
  %153 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %150, <8 x i16> %150) #2
  %154 = add <4 x i32> %152, %153
  %155 = getelementptr inbounds i8, i8* %115, i64 %14
  %156 = getelementptr inbounds i8, i8* %114, i64 %15
  %157 = add nuw nsw i32 %116, 1
  %158 = icmp slt i32 %157, %5
  br i1 %158, label %112, label %534

159:                                              ; preds = %10, %159
  %160 = phi <4 x i32> [ %241, %159 ], [ zeroinitializer, %10 ]
  %161 = phi i8* [ %243, %159 ], [ %2, %10 ]
  %162 = phi i8* [ %242, %159 ], [ %0, %10 ]
  %163 = phi i32 [ %244, %159 ], [ 0, %10 ]
  %164 = bitcast i8* %162 to <16 x i8>*
  %165 = load <16 x i8>, <16 x i8>* %164, align 1
  %166 = bitcast i8* %161 to <16 x i8>*
  %167 = load <16 x i8>, <16 x i8>* %166, align 1
  %168 = shufflevector <16 x i8> %165, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %169 = zext <8 x i8> %168 to <8 x i16>
  %170 = shufflevector <16 x i8> %165, <16 x i8> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %171 = zext <8 x i8> %170 to <8 x i16>
  %172 = shufflevector <16 x i8> %167, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %173 = zext <8 x i8> %172 to <8 x i16>
  %174 = shufflevector <16 x i8> %167, <16 x i8> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %175 = zext <8 x i8> %174 to <8 x i16>
  %176 = sub nsw <8 x i16> %169, %173
  %177 = sub nsw <8 x i16> %171, %175
  %178 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %176, <8 x i16> %176) #2
  %179 = add <4 x i32> %178, %160
  %180 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %177, <8 x i16> %177) #2
  %181 = add <4 x i32> %179, %180
  %182 = getelementptr inbounds i8, i8* %162, i64 16
  %183 = getelementptr inbounds i8, i8* %161, i64 16
  %184 = bitcast i8* %182 to <16 x i8>*
  %185 = load <16 x i8>, <16 x i8>* %184, align 1
  %186 = bitcast i8* %183 to <16 x i8>*
  %187 = load <16 x i8>, <16 x i8>* %186, align 1
  %188 = shufflevector <16 x i8> %185, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %189 = zext <8 x i8> %188 to <8 x i16>
  %190 = shufflevector <16 x i8> %185, <16 x i8> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %191 = zext <8 x i8> %190 to <8 x i16>
  %192 = shufflevector <16 x i8> %187, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %193 = zext <8 x i8> %192 to <8 x i16>
  %194 = shufflevector <16 x i8> %187, <16 x i8> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %195 = zext <8 x i8> %194 to <8 x i16>
  %196 = sub nsw <8 x i16> %189, %193
  %197 = sub nsw <8 x i16> %191, %195
  %198 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %196, <8 x i16> %196) #2
  %199 = add <4 x i32> %181, %198
  %200 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %197, <8 x i16> %197) #2
  %201 = add <4 x i32> %199, %200
  %202 = getelementptr inbounds i8, i8* %162, i64 32
  %203 = getelementptr inbounds i8, i8* %161, i64 32
  %204 = bitcast i8* %202 to <16 x i8>*
  %205 = load <16 x i8>, <16 x i8>* %204, align 1
  %206 = bitcast i8* %203 to <16 x i8>*
  %207 = load <16 x i8>, <16 x i8>* %206, align 1
  %208 = shufflevector <16 x i8> %205, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %209 = zext <8 x i8> %208 to <8 x i16>
  %210 = shufflevector <16 x i8> %205, <16 x i8> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %211 = zext <8 x i8> %210 to <8 x i16>
  %212 = shufflevector <16 x i8> %207, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %213 = zext <8 x i8> %212 to <8 x i16>
  %214 = shufflevector <16 x i8> %207, <16 x i8> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %215 = zext <8 x i8> %214 to <8 x i16>
  %216 = sub nsw <8 x i16> %209, %213
  %217 = sub nsw <8 x i16> %211, %215
  %218 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %216, <8 x i16> %216) #2
  %219 = add <4 x i32> %201, %218
  %220 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %217, <8 x i16> %217) #2
  %221 = add <4 x i32> %219, %220
  %222 = getelementptr inbounds i8, i8* %162, i64 48
  %223 = getelementptr inbounds i8, i8* %161, i64 48
  %224 = bitcast i8* %222 to <16 x i8>*
  %225 = load <16 x i8>, <16 x i8>* %224, align 1
  %226 = bitcast i8* %223 to <16 x i8>*
  %227 = load <16 x i8>, <16 x i8>* %226, align 1
  %228 = shufflevector <16 x i8> %225, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %229 = zext <8 x i8> %228 to <8 x i16>
  %230 = shufflevector <16 x i8> %225, <16 x i8> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %231 = zext <8 x i8> %230 to <8 x i16>
  %232 = shufflevector <16 x i8> %227, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %233 = zext <8 x i8> %232 to <8 x i16>
  %234 = shufflevector <16 x i8> %227, <16 x i8> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %235 = zext <8 x i8> %234 to <8 x i16>
  %236 = sub nsw <8 x i16> %229, %233
  %237 = sub nsw <8 x i16> %231, %235
  %238 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %236, <8 x i16> %236) #2
  %239 = add <4 x i32> %221, %238
  %240 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %237, <8 x i16> %237) #2
  %241 = add <4 x i32> %239, %240
  %242 = getelementptr inbounds i8, i8* %162, i64 %11
  %243 = getelementptr inbounds i8, i8* %161, i64 %12
  %244 = add nuw nsw i32 %163, 1
  %245 = icmp slt i32 %244, %5
  br i1 %245, label %159, label %534

246:                                              ; preds = %7, %246
  %247 = phi <4 x i32> [ %408, %246 ], [ zeroinitializer, %7 ]
  %248 = phi i8* [ %410, %246 ], [ %2, %7 ]
  %249 = phi i8* [ %409, %246 ], [ %0, %7 ]
  %250 = phi i32 [ %411, %246 ], [ 0, %7 ]
  %251 = bitcast i8* %249 to <16 x i8>*
  %252 = load <16 x i8>, <16 x i8>* %251, align 1
  %253 = bitcast i8* %248 to <16 x i8>*
  %254 = load <16 x i8>, <16 x i8>* %253, align 1
  %255 = shufflevector <16 x i8> %252, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %256 = zext <8 x i8> %255 to <8 x i16>
  %257 = shufflevector <16 x i8> %252, <16 x i8> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %258 = zext <8 x i8> %257 to <8 x i16>
  %259 = shufflevector <16 x i8> %254, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %260 = zext <8 x i8> %259 to <8 x i16>
  %261 = shufflevector <16 x i8> %254, <16 x i8> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %262 = zext <8 x i8> %261 to <8 x i16>
  %263 = sub nsw <8 x i16> %256, %260
  %264 = sub nsw <8 x i16> %258, %262
  %265 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %263, <8 x i16> %263) #2
  %266 = add <4 x i32> %265, %247
  %267 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %264, <8 x i16> %264) #2
  %268 = add <4 x i32> %266, %267
  %269 = getelementptr inbounds i8, i8* %249, i64 16
  %270 = getelementptr inbounds i8, i8* %248, i64 16
  %271 = bitcast i8* %269 to <16 x i8>*
  %272 = load <16 x i8>, <16 x i8>* %271, align 1
  %273 = bitcast i8* %270 to <16 x i8>*
  %274 = load <16 x i8>, <16 x i8>* %273, align 1
  %275 = shufflevector <16 x i8> %272, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %276 = zext <8 x i8> %275 to <8 x i16>
  %277 = shufflevector <16 x i8> %272, <16 x i8> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %278 = zext <8 x i8> %277 to <8 x i16>
  %279 = shufflevector <16 x i8> %274, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %280 = zext <8 x i8> %279 to <8 x i16>
  %281 = shufflevector <16 x i8> %274, <16 x i8> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %282 = zext <8 x i8> %281 to <8 x i16>
  %283 = sub nsw <8 x i16> %276, %280
  %284 = sub nsw <8 x i16> %278, %282
  %285 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %283, <8 x i16> %283) #2
  %286 = add <4 x i32> %268, %285
  %287 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %284, <8 x i16> %284) #2
  %288 = add <4 x i32> %286, %287
  %289 = getelementptr inbounds i8, i8* %249, i64 32
  %290 = getelementptr inbounds i8, i8* %248, i64 32
  %291 = bitcast i8* %289 to <16 x i8>*
  %292 = load <16 x i8>, <16 x i8>* %291, align 1
  %293 = bitcast i8* %290 to <16 x i8>*
  %294 = load <16 x i8>, <16 x i8>* %293, align 1
  %295 = shufflevector <16 x i8> %292, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %296 = zext <8 x i8> %295 to <8 x i16>
  %297 = shufflevector <16 x i8> %292, <16 x i8> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %298 = zext <8 x i8> %297 to <8 x i16>
  %299 = shufflevector <16 x i8> %294, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %300 = zext <8 x i8> %299 to <8 x i16>
  %301 = shufflevector <16 x i8> %294, <16 x i8> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %302 = zext <8 x i8> %301 to <8 x i16>
  %303 = sub nsw <8 x i16> %296, %300
  %304 = sub nsw <8 x i16> %298, %302
  %305 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %303, <8 x i16> %303) #2
  %306 = add <4 x i32> %288, %305
  %307 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %304, <8 x i16> %304) #2
  %308 = add <4 x i32> %306, %307
  %309 = getelementptr inbounds i8, i8* %249, i64 48
  %310 = getelementptr inbounds i8, i8* %248, i64 48
  %311 = bitcast i8* %309 to <16 x i8>*
  %312 = load <16 x i8>, <16 x i8>* %311, align 1
  %313 = bitcast i8* %310 to <16 x i8>*
  %314 = load <16 x i8>, <16 x i8>* %313, align 1
  %315 = shufflevector <16 x i8> %312, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %316 = zext <8 x i8> %315 to <8 x i16>
  %317 = shufflevector <16 x i8> %312, <16 x i8> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %318 = zext <8 x i8> %317 to <8 x i16>
  %319 = shufflevector <16 x i8> %314, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %320 = zext <8 x i8> %319 to <8 x i16>
  %321 = shufflevector <16 x i8> %314, <16 x i8> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %322 = zext <8 x i8> %321 to <8 x i16>
  %323 = sub nsw <8 x i16> %316, %320
  %324 = sub nsw <8 x i16> %318, %322
  %325 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %323, <8 x i16> %323) #2
  %326 = add <4 x i32> %308, %325
  %327 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %324, <8 x i16> %324) #2
  %328 = add <4 x i32> %326, %327
  %329 = getelementptr inbounds i8, i8* %249, i64 64
  %330 = getelementptr inbounds i8, i8* %248, i64 64
  %331 = bitcast i8* %329 to <16 x i8>*
  %332 = load <16 x i8>, <16 x i8>* %331, align 1
  %333 = bitcast i8* %330 to <16 x i8>*
  %334 = load <16 x i8>, <16 x i8>* %333, align 1
  %335 = shufflevector <16 x i8> %332, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %336 = zext <8 x i8> %335 to <8 x i16>
  %337 = shufflevector <16 x i8> %332, <16 x i8> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %338 = zext <8 x i8> %337 to <8 x i16>
  %339 = shufflevector <16 x i8> %334, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %340 = zext <8 x i8> %339 to <8 x i16>
  %341 = shufflevector <16 x i8> %334, <16 x i8> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %342 = zext <8 x i8> %341 to <8 x i16>
  %343 = sub nsw <8 x i16> %336, %340
  %344 = sub nsw <8 x i16> %338, %342
  %345 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %343, <8 x i16> %343) #2
  %346 = add <4 x i32> %328, %345
  %347 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %344, <8 x i16> %344) #2
  %348 = add <4 x i32> %346, %347
  %349 = getelementptr inbounds i8, i8* %249, i64 80
  %350 = getelementptr inbounds i8, i8* %248, i64 80
  %351 = bitcast i8* %349 to <16 x i8>*
  %352 = load <16 x i8>, <16 x i8>* %351, align 1
  %353 = bitcast i8* %350 to <16 x i8>*
  %354 = load <16 x i8>, <16 x i8>* %353, align 1
  %355 = shufflevector <16 x i8> %352, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %356 = zext <8 x i8> %355 to <8 x i16>
  %357 = shufflevector <16 x i8> %352, <16 x i8> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %358 = zext <8 x i8> %357 to <8 x i16>
  %359 = shufflevector <16 x i8> %354, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %360 = zext <8 x i8> %359 to <8 x i16>
  %361 = shufflevector <16 x i8> %354, <16 x i8> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %362 = zext <8 x i8> %361 to <8 x i16>
  %363 = sub nsw <8 x i16> %356, %360
  %364 = sub nsw <8 x i16> %358, %362
  %365 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %363, <8 x i16> %363) #2
  %366 = add <4 x i32> %348, %365
  %367 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %364, <8 x i16> %364) #2
  %368 = add <4 x i32> %366, %367
  %369 = getelementptr inbounds i8, i8* %249, i64 96
  %370 = getelementptr inbounds i8, i8* %248, i64 96
  %371 = bitcast i8* %369 to <16 x i8>*
  %372 = load <16 x i8>, <16 x i8>* %371, align 1
  %373 = bitcast i8* %370 to <16 x i8>*
  %374 = load <16 x i8>, <16 x i8>* %373, align 1
  %375 = shufflevector <16 x i8> %372, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %376 = zext <8 x i8> %375 to <8 x i16>
  %377 = shufflevector <16 x i8> %372, <16 x i8> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %378 = zext <8 x i8> %377 to <8 x i16>
  %379 = shufflevector <16 x i8> %374, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %380 = zext <8 x i8> %379 to <8 x i16>
  %381 = shufflevector <16 x i8> %374, <16 x i8> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %382 = zext <8 x i8> %381 to <8 x i16>
  %383 = sub nsw <8 x i16> %376, %380
  %384 = sub nsw <8 x i16> %378, %382
  %385 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %383, <8 x i16> %383) #2
  %386 = add <4 x i32> %368, %385
  %387 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %384, <8 x i16> %384) #2
  %388 = add <4 x i32> %386, %387
  %389 = getelementptr inbounds i8, i8* %249, i64 112
  %390 = getelementptr inbounds i8, i8* %248, i64 112
  %391 = bitcast i8* %389 to <16 x i8>*
  %392 = load <16 x i8>, <16 x i8>* %391, align 1
  %393 = bitcast i8* %390 to <16 x i8>*
  %394 = load <16 x i8>, <16 x i8>* %393, align 1
  %395 = shufflevector <16 x i8> %392, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %396 = zext <8 x i8> %395 to <8 x i16>
  %397 = shufflevector <16 x i8> %392, <16 x i8> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %398 = zext <8 x i8> %397 to <8 x i16>
  %399 = shufflevector <16 x i8> %394, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %400 = zext <8 x i8> %399 to <8 x i16>
  %401 = shufflevector <16 x i8> %394, <16 x i8> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %402 = zext <8 x i8> %401 to <8 x i16>
  %403 = sub nsw <8 x i16> %396, %400
  %404 = sub nsw <8 x i16> %398, %402
  %405 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %403, <8 x i16> %403) #2
  %406 = add <4 x i32> %388, %405
  %407 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %404, <8 x i16> %404) #2
  %408 = add <4 x i32> %406, %407
  %409 = getelementptr inbounds i8, i8* %249, i64 %8
  %410 = getelementptr inbounds i8, i8* %248, i64 %9
  %411 = add nuw nsw i32 %250, 1
  %412 = icmp slt i32 %411, %5
  br i1 %412, label %246, label %534

413:                                              ; preds = %6
  %414 = and i32 %4, 7
  %415 = icmp eq i32 %414, 0
  %416 = sext i32 %1 to i64
  %417 = sext i32 %3 to i64
  br i1 %415, label %418, label %420

418:                                              ; preds = %413
  %419 = sext i32 %4 to i64
  br label %502

420:                                              ; preds = %413
  %421 = shl i32 %1, 1
  %422 = sext i32 %421 to i64
  %423 = shl i32 %3, 1
  %424 = sext i32 %423 to i64
  br label %425

425:                                              ; preds = %420, %471
  %426 = phi <4 x i32> [ %497, %471 ], [ zeroinitializer, %420 ]
  %427 = phi i8* [ %499, %471 ], [ %2, %420 ]
  %428 = phi i8* [ %498, %471 ], [ %0, %420 ]
  %429 = phi i32 [ %500, %471 ], [ 0, %420 ]
  br label %430

430:                                              ; preds = %430, %425
  %431 = phi i64 [ %467, %430 ], [ 0, %425 ]
  %432 = phi <4 x i32> [ %466, %430 ], [ %426, %425 ]
  %433 = getelementptr inbounds i8, i8* %428, i64 %431
  %434 = getelementptr inbounds i8, i8* %427, i64 %431
  %435 = bitcast i8* %433 to i64*
  %436 = load i64, i64* %435, align 1
  %437 = insertelement <2 x i64> undef, i64 %436, i32 0
  %438 = bitcast i8* %434 to i64*
  %439 = load i64, i64* %438, align 1
  %440 = insertelement <2 x i64> undef, i64 %439, i32 0
  %441 = bitcast <2 x i64> %437 to <16 x i8>
  %442 = shufflevector <16 x i8> %441, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %443 = zext <8 x i8> %442 to <8 x i16>
  %444 = bitcast <2 x i64> %440 to <16 x i8>
  %445 = shufflevector <16 x i8> %444, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %446 = zext <8 x i8> %445 to <8 x i16>
  %447 = sub nsw <8 x i16> %443, %446
  %448 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %447, <8 x i16> %447) #2
  %449 = add <4 x i32> %448, %432
  %450 = getelementptr inbounds i8, i8* %433, i64 %416
  %451 = getelementptr inbounds i8, i8* %434, i64 %417
  %452 = bitcast i8* %450 to i64*
  %453 = load i64, i64* %452, align 1
  %454 = insertelement <2 x i64> undef, i64 %453, i32 0
  %455 = bitcast i8* %451 to i64*
  %456 = load i64, i64* %455, align 1
  %457 = insertelement <2 x i64> undef, i64 %456, i32 0
  %458 = bitcast <2 x i64> %454 to <16 x i8>
  %459 = shufflevector <16 x i8> %458, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %460 = zext <8 x i8> %459 to <8 x i16>
  %461 = bitcast <2 x i64> %457 to <16 x i8>
  %462 = shufflevector <16 x i8> %461, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %463 = zext <8 x i8> %462 to <8 x i16>
  %464 = sub nsw <8 x i16> %460, %463
  %465 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %464, <8 x i16> %464) #2
  %466 = add <4 x i32> %449, %465
  %467 = add nuw i64 %431, 8
  %468 = trunc i64 %431 to i32
  %469 = add i32 %468, 12
  %470 = icmp slt i32 %469, %4
  br i1 %470, label %430, label %471

471:                                              ; preds = %430
  %472 = and i64 %467, 4294967288
  %473 = getelementptr inbounds i8, i8* %428, i64 %472
  %474 = getelementptr inbounds i8, i8* %427, i64 %472
  %475 = bitcast i8* %473 to i32*
  %476 = load i32, i32* %475, align 1
  %477 = insertelement <4 x i32> undef, i32 %476, i32 0
  %478 = getelementptr inbounds i8, i8* %473, i64 %416
  %479 = bitcast i8* %478 to i32*
  %480 = load i32, i32* %479, align 1
  %481 = bitcast i8* %474 to i32*
  %482 = load i32, i32* %481, align 1
  %483 = insertelement <4 x i32> undef, i32 %482, i32 0
  %484 = getelementptr inbounds i8, i8* %474, i64 %417
  %485 = bitcast i8* %484 to i32*
  %486 = load i32, i32* %485, align 1
  %487 = insertelement <4 x i32> %477, i32 %480, i32 1
  %488 = bitcast <4 x i32> %487 to <16 x i8>
  %489 = shufflevector <16 x i8> %488, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %490 = zext <8 x i8> %489 to <8 x i16>
  %491 = insertelement <4 x i32> %483, i32 %486, i32 1
  %492 = bitcast <4 x i32> %491 to <16 x i8>
  %493 = shufflevector <16 x i8> %492, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %494 = zext <8 x i8> %493 to <8 x i16>
  %495 = sub nsw <8 x i16> %490, %494
  %496 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %495, <8 x i16> %495) #2
  %497 = add <4 x i32> %496, %466
  %498 = getelementptr inbounds i8, i8* %428, i64 %422
  %499 = getelementptr inbounds i8, i8* %427, i64 %424
  %500 = add nuw nsw i32 %429, 2
  %501 = icmp slt i32 %500, %5
  br i1 %501, label %425, label %534

502:                                              ; preds = %418, %529
  %503 = phi <4 x i32> [ %526, %529 ], [ zeroinitializer, %418 ]
  %504 = phi i8* [ %531, %529 ], [ %2, %418 ]
  %505 = phi i8* [ %530, %529 ], [ %0, %418 ]
  %506 = phi i32 [ %532, %529 ], [ 0, %418 ]
  br label %507

507:                                              ; preds = %507, %502
  %508 = phi i64 [ %527, %507 ], [ 0, %502 ]
  %509 = phi <4 x i32> [ %526, %507 ], [ %503, %502 ]
  %510 = getelementptr inbounds i8, i8* %505, i64 %508
  %511 = getelementptr inbounds i8, i8* %504, i64 %508
  %512 = bitcast i8* %510 to i64*
  %513 = load i64, i64* %512, align 1
  %514 = insertelement <2 x i64> undef, i64 %513, i32 0
  %515 = bitcast i8* %511 to i64*
  %516 = load i64, i64* %515, align 1
  %517 = insertelement <2 x i64> undef, i64 %516, i32 0
  %518 = bitcast <2 x i64> %514 to <16 x i8>
  %519 = shufflevector <16 x i8> %518, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %520 = zext <8 x i8> %519 to <8 x i16>
  %521 = bitcast <2 x i64> %517 to <16 x i8>
  %522 = shufflevector <16 x i8> %521, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %523 = zext <8 x i8> %522 to <8 x i16>
  %524 = sub nsw <8 x i16> %520, %523
  %525 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %524, <8 x i16> %524) #2
  %526 = add <4 x i32> %525, %509
  %527 = add nuw nsw i64 %508, 8
  %528 = icmp slt i64 %527, %419
  br i1 %528, label %507, label %529

529:                                              ; preds = %507
  %530 = getelementptr inbounds i8, i8* %505, i64 %416
  %531 = getelementptr inbounds i8, i8* %504, i64 %417
  %532 = add nuw nsw i32 %506, 1
  %533 = icmp slt i32 %532, %5
  br i1 %533, label %502, label %534

534:                                              ; preds = %246, %159, %112, %85, %61, %29, %471, %529
  %535 = phi <4 x i32> [ %526, %529 ], [ %497, %471 ], [ %56, %29 ], [ %80, %61 ], [ %107, %85 ], [ %154, %112 ], [ %241, %159 ], [ %408, %246 ]
  %536 = shufflevector <4 x i32> %535, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %537 = zext <2 x i32> %536 to <2 x i64>
  %538 = bitcast <4 x i32> %535 to <16 x i8>
  %539 = shufflevector <16 x i8> %538, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %540 = bitcast <16 x i8> %539 to <4 x i32>
  %541 = shufflevector <4 x i32> %540, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %542 = zext <2 x i32> %541 to <2 x i64>
  %543 = add nuw nsw <2 x i64> %542, %537
  %544 = bitcast <2 x i64> %543 to <16 x i8>
  %545 = shufflevector <16 x i8> %544, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %546 = bitcast <16 x i8> %545 to <2 x i64>
  %547 = add <2 x i64> %543, %546
  %548 = extractelement <2 x i64> %547, i32 0
  ret i64 %548
}

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16>, <8 x i16>) #1

attributes #0 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
