; ModuleID = '../../third_party/vulkan-deps/spirv-tools/src/source/util/bit_vector.cpp'
source_filename = "../../third_party/vulkan-deps/spirv-tools/src/source/util/bit_vector.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::__1::locale::id" = type <{ %"struct.std::__1::once_flag", i32, [4 x i8] }>
%"struct.std::__1::once_flag" = type { i64 }
%"class.spvtools::utils::BitVector" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i64*, i64*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i64* }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry" = type { i8, %"class.std::__1::basic_ostream"* }
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale::facet" = type { %"class.std::__1::__shared_count" }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"class.std::__1::ctype" = type <{ %"class.std::__1::locale::facet", i16*, i8, [7 x i8] }>
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }

$_ZNSt3__16vectorImNS_9allocatorImEEE6insertINS_11__wrap_iterIPKmEEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleImNS_15iterator_traitsISA_E9referenceEEE5valueENS5_IPmEEE4typeES8_SA_SA_ = comdat any

$_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m = comdat any

$_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_ = comdat any

@.str = private unnamed_addr constant [7 x i8] c"count=\00", align 1
@.str.1 = private unnamed_addr constant [22 x i8] c", total size (bytes)=\00", align 1
@.str.2 = private unnamed_addr constant [21 x i8] c", bytes per element=\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"{\00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"}\00", align 1
@_ZNSt3__15ctypeIcE2idE = external global %"class.std::__1::locale::id", align 8

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8spvtools5utils9BitVector13ReportDensityERNSt3__113basic_ostreamIcNS2_11char_traitsIcEEEE(%"class.spvtools::utils::BitVector"* nocapture readonly, %"class.std::__1::basic_ostream"* dereferenceable(160)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.spvtools::utils::BitVector", %"class.spvtools::utils::BitVector"* %0, i64 0, i32 0, i32 0, i32 0
  %4 = load i64*, i64** %3, align 8
  %5 = getelementptr inbounds %"class.spvtools::utils::BitVector", %"class.spvtools::utils::BitVector"* %0, i64 0, i32 0, i32 0, i32 1
  %6 = load i64*, i64** %5, align 8
  %7 = icmp eq i64* %4, %6
  br i1 %7, label %35, label %8

8:                                                ; preds = %2
  %9 = ptrtoint i64* %4 to i64
  %10 = getelementptr i64, i64* %6, i64 -1
  %11 = ptrtoint i64* %10 to i64
  %12 = sub i64 %11, %9
  %13 = lshr i64 %12, 3
  %14 = add nuw nsw i64 %13, 1
  %15 = and i64 %14, 1
  %16 = icmp eq i64 %13, 0
  br i1 %16, label %19, label %17

17:                                               ; preds = %8
  %18 = sub nuw nsw i64 %14, %15
  br label %54

19:                                               ; preds = %81, %8
  %20 = phi i32 [ undef, %8 ], [ %82, %81 ]
  %21 = phi i32 [ 0, %8 ], [ %82, %81 ]
  %22 = phi i64* [ %4, %8 ], [ %83, %81 ]
  %23 = icmp eq i64 %15, 0
  br i1 %23, label %35, label %24

24:                                               ; preds = %19
  %25 = load i64, i64* %22, align 8
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %35, label %27

27:                                               ; preds = %24, %27
  %28 = phi i64 [ %33, %27 ], [ %25, %24 ]
  %29 = phi i32 [ %32, %27 ], [ %21, %24 ]
  %30 = trunc i64 %28 to i32
  %31 = and i32 %30, 1
  %32 = add i32 %31, %29
  %33 = lshr i64 %28, 1
  %34 = icmp eq i64 %33, 0
  br i1 %34, label %35, label %27

35:                                               ; preds = %19, %24, %27, %2
  %36 = phi i32 [ 0, %2 ], [ %20, %19 ], [ %21, %24 ], [ %32, %27 ]
  %37 = tail call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i64 6) #8
  %38 = tail call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEj(%"class.std::__1::basic_ostream"* %37, i32 %36) #8
  %39 = tail call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %38, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.1, i64 0, i64 0), i64 21) #8
  %40 = bitcast i64** %5 to i64*
  %41 = load i64, i64* %40, align 8
  %42 = bitcast %"class.spvtools::utils::BitVector"* %0 to i64*
  %43 = load i64, i64* %42, align 8
  %44 = sub i64 %41, %43
  %45 = tail call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEm(%"class.std::__1::basic_ostream"* %39, i64 %44) #8
  %46 = tail call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %45, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.2, i64 0, i64 0), i64 20) #8
  %47 = load i64, i64* %40, align 8
  %48 = load i64, i64* %42, align 8
  %49 = sub i64 %47, %48
  %50 = uitofp i64 %49 to double
  %51 = uitofp i32 %36 to double
  %52 = fdiv double %50, %51
  %53 = tail call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEd(%"class.std::__1::basic_ostream"* %46, double %52) #8
  ret void

54:                                               ; preds = %81, %17
  %55 = phi i32 [ 0, %17 ], [ %82, %81 ]
  %56 = phi i64* [ %4, %17 ], [ %83, %81 ]
  %57 = phi i64 [ %18, %17 ], [ %84, %81 ]
  %58 = load i64, i64* %56, align 8
  %59 = icmp eq i64 %58, 0
  br i1 %59, label %68, label %60

60:                                               ; preds = %54, %60
  %61 = phi i64 [ %66, %60 ], [ %58, %54 ]
  %62 = phi i32 [ %65, %60 ], [ %55, %54 ]
  %63 = trunc i64 %61 to i32
  %64 = and i32 %63, 1
  %65 = add i32 %64, %62
  %66 = lshr i64 %61, 1
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %68, label %60

68:                                               ; preds = %60, %54
  %69 = phi i32 [ %55, %54 ], [ %65, %60 ]
  %70 = getelementptr inbounds i64, i64* %56, i64 1
  %71 = load i64, i64* %70, align 8
  %72 = icmp eq i64 %71, 0
  br i1 %72, label %81, label %73

73:                                               ; preds = %68, %73
  %74 = phi i64 [ %79, %73 ], [ %71, %68 ]
  %75 = phi i32 [ %78, %73 ], [ %69, %68 ]
  %76 = trunc i64 %74 to i32
  %77 = and i32 %76, 1
  %78 = add i32 %77, %75
  %79 = lshr i64 %74, 1
  %80 = icmp eq i64 %79, 0
  br i1 %80, label %81, label %73

81:                                               ; preds = %73, %68
  %82 = phi i32 [ %69, %68 ], [ %78, %73 ]
  %83 = getelementptr inbounds i64, i64* %56, i64 2
  %84 = add i64 %57, -2
  %85 = icmp eq i64 %84, 0
  br i1 %85, label %19, label %54
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEj(%"class.std::__1::basic_ostream"*, i32) local_unnamed_addr #2

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEm(%"class.std::__1::basic_ostream"*, i64) local_unnamed_addr #2

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEd(%"class.std::__1::basic_ostream"*, double) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN8spvtools5utils9BitVector2OrERKS1_(%"class.spvtools::utils::BitVector"*, %"class.spvtools::utils::BitVector"* nocapture readonly dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.spvtools::utils::BitVector", %"class.spvtools::utils::BitVector"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"class.spvtools::utils::BitVector", %"class.spvtools::utils::BitVector"* %0, i64 0, i32 0, i32 0, i32 0
  %5 = load i64*, i64** %4, align 8
  %6 = getelementptr inbounds %"class.spvtools::utils::BitVector", %"class.spvtools::utils::BitVector"* %1, i64 0, i32 0, i32 0, i32 0
  %7 = load i64*, i64** %6, align 8
  %8 = getelementptr inbounds %"class.spvtools::utils::BitVector", %"class.spvtools::utils::BitVector"* %1, i64 0, i32 0, i32 0, i32 1
  %9 = getelementptr inbounds %"class.spvtools::utils::BitVector", %"class.spvtools::utils::BitVector"* %0, i64 0, i32 0, i32 0, i32 1
  %10 = load i64*, i64** %9, align 8
  %11 = icmp eq i64* %5, %10
  br i1 %11, label %32, label %12

12:                                               ; preds = %2, %26
  %13 = phi i64* [ %27, %26 ], [ %10, %2 ]
  %14 = phi i8 [ %28, %26 ], [ 0, %2 ]
  %15 = phi i64* [ %29, %26 ], [ %5, %2 ]
  %16 = phi i64* [ %30, %26 ], [ %7, %2 ]
  %17 = load i64*, i64** %8, align 8
  %18 = icmp eq i64* %16, %17
  br i1 %18, label %32, label %19

19:                                               ; preds = %12
  %20 = load i64, i64* %15, align 8
  %21 = load i64, i64* %16, align 8
  %22 = or i64 %21, %20
  %23 = icmp eq i64 %22, %20
  br i1 %23, label %26, label %24

24:                                               ; preds = %19
  store i64 %22, i64* %15, align 8
  %25 = load i64*, i64** %9, align 8
  br label %26

26:                                               ; preds = %19, %24
  %27 = phi i64* [ %25, %24 ], [ %13, %19 ]
  %28 = phi i8 [ 1, %24 ], [ %14, %19 ]
  %29 = getelementptr inbounds i64, i64* %15, i64 1
  %30 = getelementptr inbounds i64, i64* %16, i64 1
  %31 = icmp eq i64* %29, %27
  br i1 %31, label %32, label %12

32:                                               ; preds = %26, %12, %2
  %33 = phi i64* [ %7, %2 ], [ %16, %12 ], [ %30, %26 ]
  %34 = phi i8 [ 0, %2 ], [ %14, %12 ], [ %28, %26 ]
  %35 = phi i64* [ %5, %2 ], [ %13, %12 ], [ %27, %26 ]
  %36 = load i64*, i64** %8, align 8
  %37 = icmp eq i64* %33, %36
  br i1 %37, label %40, label %38

38:                                               ; preds = %32
  %39 = tail call i64* @_ZNSt3__16vectorImNS_9allocatorImEEE6insertINS_11__wrap_iterIPKmEEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleImNS_15iterator_traitsISA_E9referenceEEE5valueENS5_IPmEEE4typeES8_SA_SA_(%"class.std::__1::vector"* %3, i64* %35, i64* %33, i64* %36)
  br label %40

40:                                               ; preds = %32, %38
  %41 = phi i8 [ 1, %38 ], [ %34, %32 ]
  %42 = and i8 %41, 1
  %43 = icmp ne i8 %42, 0
  ret i1 %43
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64* @_ZNSt3__16vectorImNS_9allocatorImEEE6insertINS_11__wrap_iterIPKmEEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleImNS_15iterator_traitsISA_E9referenceEEE5valueENS5_IPmEEE4typeES8_SA_SA_(%"class.std::__1::vector"*, i64*, i64*, i64*) local_unnamed_addr #0 comdat align 2 {
  %5 = bitcast i64* %2 to i8*
  %6 = bitcast i64* %1 to i8*
  %7 = ptrtoint i64* %1 to i64
  %8 = ptrtoint i64* %2 to i64
  %9 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %10 = ptrtoint i64* %3 to i64
  %11 = sub i64 %10, %8
  %12 = ashr exact i64 %11, 3
  %13 = icmp sgt i64 %11, 0
  br i1 %13, label %14, label %706

14:                                               ; preds = %4
  %15 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast i64** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %19 = load i64*, i64** %18, align 8
  %20 = ptrtoint i64* %19 to i64
  %21 = sub i64 %17, %20
  %22 = ashr exact i64 %21, 3
  %23 = icmp sgt i64 %12, %22
  %24 = bitcast i64** %18 to i64*
  br i1 %23, label %339, label %25

25:                                               ; preds = %14
  %26 = sub i64 %20, %7
  %27 = ashr exact i64 %26, 3
  %28 = icmp sgt i64 %12, %27
  br i1 %28, label %29, label %196

29:                                               ; preds = %25
  %30 = getelementptr inbounds i64, i64* %2, i64 %27
  %31 = icmp eq i64* %30, %3
  br i1 %31, label %191, label %32

32:                                               ; preds = %29
  %33 = xor i64 %27, -1
  %34 = getelementptr i64, i64* %3, i64 %33
  %35 = ptrtoint i64* %34 to i64
  %36 = sub i64 %35, %8
  %37 = lshr i64 %36, 3
  %38 = add nuw nsw i64 %37, 1
  %39 = icmp ult i64 %38, 4
  br i1 %39, label %135, label %40

40:                                               ; preds = %32
  %41 = xor i64 %27, -1
  %42 = getelementptr i64, i64* %3, i64 %41
  %43 = ptrtoint i64* %42 to i64
  %44 = sub i64 %43, %8
  %45 = lshr i64 %44, 3
  %46 = add nuw nsw i64 %45, 1
  %47 = getelementptr i64, i64* %19, i64 %46
  %48 = add nsw i64 %27, %45
  %49 = add nsw i64 %48, 1
  %50 = getelementptr i64, i64* %2, i64 %49
  %51 = icmp ult i64* %19, %50
  %52 = icmp ult i64* %30, %47
  %53 = and i1 %51, %52
  br i1 %53, label %135, label %54

54:                                               ; preds = %40
  %55 = and i64 %38, 4611686018427387900
  %56 = getelementptr i64, i64* %19, i64 %55
  %57 = getelementptr i64, i64* %30, i64 %55
  %58 = add nsw i64 %55, -4
  %59 = lshr exact i64 %58, 2
  %60 = add nuw nsw i64 %59, 1
  %61 = and i64 %60, 3
  %62 = icmp ult i64 %58, 12
  br i1 %62, label %114, label %63

63:                                               ; preds = %54
  %64 = sub nsw i64 %60, %61
  br label %65

65:                                               ; preds = %65, %63
  %66 = phi i64 [ 0, %63 ], [ %111, %65 ]
  %67 = phi i64 [ %64, %63 ], [ %112, %65 ]
  %68 = getelementptr i64, i64* %19, i64 %66
  %69 = getelementptr i64, i64* %30, i64 %66
  %70 = bitcast i64* %69 to <2 x i64>*
  %71 = load <2 x i64>, <2 x i64>* %70, align 8, !alias.scope !2
  %72 = getelementptr i64, i64* %69, i64 2
  %73 = bitcast i64* %72 to <2 x i64>*
  %74 = load <2 x i64>, <2 x i64>* %73, align 8, !alias.scope !2
  %75 = bitcast i64* %68 to <2 x i64>*
  store <2 x i64> %71, <2 x i64>* %75, align 8, !alias.scope !5, !noalias !2
  %76 = getelementptr i64, i64* %68, i64 2
  %77 = bitcast i64* %76 to <2 x i64>*
  store <2 x i64> %74, <2 x i64>* %77, align 8, !alias.scope !5, !noalias !2
  %78 = or i64 %66, 4
  %79 = getelementptr i64, i64* %19, i64 %78
  %80 = getelementptr i64, i64* %30, i64 %78
  %81 = bitcast i64* %80 to <2 x i64>*
  %82 = load <2 x i64>, <2 x i64>* %81, align 8, !alias.scope !2
  %83 = getelementptr i64, i64* %80, i64 2
  %84 = bitcast i64* %83 to <2 x i64>*
  %85 = load <2 x i64>, <2 x i64>* %84, align 8, !alias.scope !2
  %86 = bitcast i64* %79 to <2 x i64>*
  store <2 x i64> %82, <2 x i64>* %86, align 8, !alias.scope !5, !noalias !2
  %87 = getelementptr i64, i64* %79, i64 2
  %88 = bitcast i64* %87 to <2 x i64>*
  store <2 x i64> %85, <2 x i64>* %88, align 8, !alias.scope !5, !noalias !2
  %89 = or i64 %66, 8
  %90 = getelementptr i64, i64* %19, i64 %89
  %91 = getelementptr i64, i64* %30, i64 %89
  %92 = bitcast i64* %91 to <2 x i64>*
  %93 = load <2 x i64>, <2 x i64>* %92, align 8, !alias.scope !2
  %94 = getelementptr i64, i64* %91, i64 2
  %95 = bitcast i64* %94 to <2 x i64>*
  %96 = load <2 x i64>, <2 x i64>* %95, align 8, !alias.scope !2
  %97 = bitcast i64* %90 to <2 x i64>*
  store <2 x i64> %93, <2 x i64>* %97, align 8, !alias.scope !5, !noalias !2
  %98 = getelementptr i64, i64* %90, i64 2
  %99 = bitcast i64* %98 to <2 x i64>*
  store <2 x i64> %96, <2 x i64>* %99, align 8, !alias.scope !5, !noalias !2
  %100 = or i64 %66, 12
  %101 = getelementptr i64, i64* %19, i64 %100
  %102 = getelementptr i64, i64* %30, i64 %100
  %103 = bitcast i64* %102 to <2 x i64>*
  %104 = load <2 x i64>, <2 x i64>* %103, align 8, !alias.scope !2
  %105 = getelementptr i64, i64* %102, i64 2
  %106 = bitcast i64* %105 to <2 x i64>*
  %107 = load <2 x i64>, <2 x i64>* %106, align 8, !alias.scope !2
  %108 = bitcast i64* %101 to <2 x i64>*
  store <2 x i64> %104, <2 x i64>* %108, align 8, !alias.scope !5, !noalias !2
  %109 = getelementptr i64, i64* %101, i64 2
  %110 = bitcast i64* %109 to <2 x i64>*
  store <2 x i64> %107, <2 x i64>* %110, align 8, !alias.scope !5, !noalias !2
  %111 = add i64 %66, 16
  %112 = add i64 %67, -4
  %113 = icmp eq i64 %112, 0
  br i1 %113, label %114, label %65, !llvm.loop !7

114:                                              ; preds = %65, %54
  %115 = phi i64 [ 0, %54 ], [ %111, %65 ]
  %116 = icmp eq i64 %61, 0
  br i1 %116, label %133, label %117

117:                                              ; preds = %114, %117
  %118 = phi i64 [ %130, %117 ], [ %115, %114 ]
  %119 = phi i64 [ %131, %117 ], [ %61, %114 ]
  %120 = getelementptr i64, i64* %19, i64 %118
  %121 = getelementptr i64, i64* %30, i64 %118
  %122 = bitcast i64* %121 to <2 x i64>*
  %123 = load <2 x i64>, <2 x i64>* %122, align 8, !alias.scope !2
  %124 = getelementptr i64, i64* %121, i64 2
  %125 = bitcast i64* %124 to <2 x i64>*
  %126 = load <2 x i64>, <2 x i64>* %125, align 8, !alias.scope !2
  %127 = bitcast i64* %120 to <2 x i64>*
  store <2 x i64> %123, <2 x i64>* %127, align 8, !alias.scope !5, !noalias !2
  %128 = getelementptr i64, i64* %120, i64 2
  %129 = bitcast i64* %128 to <2 x i64>*
  store <2 x i64> %126, <2 x i64>* %129, align 8, !alias.scope !5, !noalias !2
  %130 = add i64 %118, 4
  %131 = add i64 %119, -1
  %132 = icmp eq i64 %131, 0
  br i1 %132, label %133, label %117, !llvm.loop !9

133:                                              ; preds = %117, %114
  %134 = icmp eq i64 %38, %55
  br i1 %134, label %188, label %135

135:                                              ; preds = %133, %40, %32
  %136 = phi i64* [ %19, %40 ], [ %19, %32 ], [ %56, %133 ]
  %137 = phi i64* [ %30, %40 ], [ %30, %32 ], [ %57, %133 ]
  %138 = ptrtoint i64* %137 to i64
  %139 = getelementptr i64, i64* %3, i64 -1
  %140 = ptrtoint i64* %139 to i64
  %141 = sub i64 %140, %138
  %142 = lshr i64 %141, 3
  %143 = add nuw nsw i64 %142, 1
  %144 = and i64 %143, 7
  %145 = icmp eq i64 %144, 0
  br i1 %145, label %155, label %146

146:                                              ; preds = %135, %146
  %147 = phi i64* [ %152, %146 ], [ %136, %135 ]
  %148 = phi i64* [ %151, %146 ], [ %137, %135 ]
  %149 = phi i64 [ %153, %146 ], [ %144, %135 ]
  %150 = load i64, i64* %148, align 8
  store i64 %150, i64* %147, align 8
  %151 = getelementptr inbounds i64, i64* %148, i64 1
  %152 = getelementptr inbounds i64, i64* %147, i64 1
  %153 = add i64 %149, -1
  %154 = icmp eq i64 %153, 0
  br i1 %154, label %155, label %146, !llvm.loop !11

155:                                              ; preds = %146, %135
  %156 = phi i64* [ undef, %135 ], [ %152, %146 ]
  %157 = phi i64* [ %136, %135 ], [ %152, %146 ]
  %158 = phi i64* [ %137, %135 ], [ %151, %146 ]
  %159 = icmp ult i64 %141, 56
  br i1 %159, label %188, label %160

160:                                              ; preds = %155, %160
  %161 = phi i64* [ %186, %160 ], [ %157, %155 ]
  %162 = phi i64* [ %185, %160 ], [ %158, %155 ]
  %163 = load i64, i64* %162, align 8
  store i64 %163, i64* %161, align 8
  %164 = getelementptr inbounds i64, i64* %162, i64 1
  %165 = getelementptr inbounds i64, i64* %161, i64 1
  %166 = load i64, i64* %164, align 8
  store i64 %166, i64* %165, align 8
  %167 = getelementptr inbounds i64, i64* %162, i64 2
  %168 = getelementptr inbounds i64, i64* %161, i64 2
  %169 = load i64, i64* %167, align 8
  store i64 %169, i64* %168, align 8
  %170 = getelementptr inbounds i64, i64* %162, i64 3
  %171 = getelementptr inbounds i64, i64* %161, i64 3
  %172 = load i64, i64* %170, align 8
  store i64 %172, i64* %171, align 8
  %173 = getelementptr inbounds i64, i64* %162, i64 4
  %174 = getelementptr inbounds i64, i64* %161, i64 4
  %175 = load i64, i64* %173, align 8
  store i64 %175, i64* %174, align 8
  %176 = getelementptr inbounds i64, i64* %162, i64 5
  %177 = getelementptr inbounds i64, i64* %161, i64 5
  %178 = load i64, i64* %176, align 8
  store i64 %178, i64* %177, align 8
  %179 = getelementptr inbounds i64, i64* %162, i64 6
  %180 = getelementptr inbounds i64, i64* %161, i64 6
  %181 = load i64, i64* %179, align 8
  store i64 %181, i64* %180, align 8
  %182 = getelementptr inbounds i64, i64* %162, i64 7
  %183 = getelementptr inbounds i64, i64* %161, i64 7
  %184 = load i64, i64* %182, align 8
  store i64 %184, i64* %183, align 8
  %185 = getelementptr inbounds i64, i64* %162, i64 8
  %186 = getelementptr inbounds i64, i64* %161, i64 8
  %187 = icmp eq i64* %185, %3
  br i1 %187, label %188, label %160, !llvm.loop !12

188:                                              ; preds = %155, %160, %133
  %189 = phi i64* [ %56, %133 ], [ %156, %155 ], [ %186, %160 ]
  %190 = ptrtoint i64* %189 to i64
  br label %191

191:                                              ; preds = %188, %29
  %192 = phi i64 [ %20, %29 ], [ %190, %188 ]
  store i64 %192, i64* %24, align 8
  %193 = icmp sgt i64 %26, 0
  br i1 %193, label %194, label %706

194:                                              ; preds = %191
  %195 = inttoptr i64 %192 to i64*
  br label %196

196:                                              ; preds = %194, %25
  %197 = phi i64 [ %192, %194 ], [ %20, %25 ]
  %198 = phi i64* [ %195, %194 ], [ %19, %25 ]
  %199 = phi i64* [ %30, %194 ], [ %3, %25 ]
  %200 = getelementptr inbounds i64, i64* %1, i64 %12
  %201 = ptrtoint i64* %200 to i64
  %202 = sub i64 %197, %201
  %203 = ashr exact i64 %202, 3
  %204 = getelementptr inbounds i64, i64* %1, i64 %203
  %205 = icmp ult i64* %204, %19
  br i1 %205, label %206, label %319

206:                                              ; preds = %196
  %207 = sub nsw i64 0, %203
  %208 = getelementptr i64, i64* %19, i64 %207
  %209 = bitcast i64* %208 to i8*
  %210 = xor i64 %7, -1
  %211 = getelementptr i8, i8* %209, i64 %210
  %212 = ptrtoint i8* %211 to i64
  %213 = lshr i64 %212, 3
  %214 = add nuw nsw i64 %213, 1
  %215 = icmp ult i64 %214, 4
  br i1 %215, label %216, label %219

216:                                              ; preds = %314, %219, %206
  %217 = phi i64* [ %198, %219 ], [ %198, %206 ], [ %237, %314 ]
  %218 = phi i64* [ %204, %219 ], [ %204, %206 ], [ %238, %314 ]
  br label %327

219:                                              ; preds = %206
  %220 = sub nsw i64 0, %203
  %221 = getelementptr i64, i64* %19, i64 %220
  %222 = bitcast i64* %221 to i8*
  %223 = xor i64 %7, -1
  %224 = getelementptr i8, i8* %222, i64 %223
  %225 = ptrtoint i8* %224 to i64
  %226 = lshr i64 %225, 3
  %227 = add nuw nsw i64 %226, 1
  %228 = getelementptr i64, i64* %198, i64 %227
  %229 = add nsw i64 %203, %226
  %230 = add nsw i64 %229, 1
  %231 = getelementptr i64, i64* %1, i64 %230
  %232 = icmp ult i64* %198, %231
  %233 = icmp ult i64* %204, %228
  %234 = and i1 %232, %233
  br i1 %234, label %216, label %235

235:                                              ; preds = %219
  %236 = and i64 %214, 4611686018427387900
  %237 = getelementptr i64, i64* %198, i64 %236
  %238 = getelementptr i64, i64* %204, i64 %236
  %239 = add nsw i64 %236, -4
  %240 = lshr exact i64 %239, 2
  %241 = add nuw nsw i64 %240, 1
  %242 = and i64 %241, 3
  %243 = icmp ult i64 %239, 12
  br i1 %243, label %295, label %244

244:                                              ; preds = %235
  %245 = sub nsw i64 %241, %242
  br label %246

246:                                              ; preds = %246, %244
  %247 = phi i64 [ 0, %244 ], [ %292, %246 ]
  %248 = phi i64 [ %245, %244 ], [ %293, %246 ]
  %249 = getelementptr i64, i64* %198, i64 %247
  %250 = getelementptr i64, i64* %204, i64 %247
  %251 = bitcast i64* %250 to <2 x i64>*
  %252 = load <2 x i64>, <2 x i64>* %251, align 8, !alias.scope !13
  %253 = getelementptr i64, i64* %250, i64 2
  %254 = bitcast i64* %253 to <2 x i64>*
  %255 = load <2 x i64>, <2 x i64>* %254, align 8, !alias.scope !13
  %256 = bitcast i64* %249 to <2 x i64>*
  store <2 x i64> %252, <2 x i64>* %256, align 8, !alias.scope !16, !noalias !13
  %257 = getelementptr i64, i64* %249, i64 2
  %258 = bitcast i64* %257 to <2 x i64>*
  store <2 x i64> %255, <2 x i64>* %258, align 8, !alias.scope !16, !noalias !13
  %259 = or i64 %247, 4
  %260 = getelementptr i64, i64* %198, i64 %259
  %261 = getelementptr i64, i64* %204, i64 %259
  %262 = bitcast i64* %261 to <2 x i64>*
  %263 = load <2 x i64>, <2 x i64>* %262, align 8, !alias.scope !13
  %264 = getelementptr i64, i64* %261, i64 2
  %265 = bitcast i64* %264 to <2 x i64>*
  %266 = load <2 x i64>, <2 x i64>* %265, align 8, !alias.scope !13
  %267 = bitcast i64* %260 to <2 x i64>*
  store <2 x i64> %263, <2 x i64>* %267, align 8, !alias.scope !16, !noalias !13
  %268 = getelementptr i64, i64* %260, i64 2
  %269 = bitcast i64* %268 to <2 x i64>*
  store <2 x i64> %266, <2 x i64>* %269, align 8, !alias.scope !16, !noalias !13
  %270 = or i64 %247, 8
  %271 = getelementptr i64, i64* %198, i64 %270
  %272 = getelementptr i64, i64* %204, i64 %270
  %273 = bitcast i64* %272 to <2 x i64>*
  %274 = load <2 x i64>, <2 x i64>* %273, align 8, !alias.scope !13
  %275 = getelementptr i64, i64* %272, i64 2
  %276 = bitcast i64* %275 to <2 x i64>*
  %277 = load <2 x i64>, <2 x i64>* %276, align 8, !alias.scope !13
  %278 = bitcast i64* %271 to <2 x i64>*
  store <2 x i64> %274, <2 x i64>* %278, align 8, !alias.scope !16, !noalias !13
  %279 = getelementptr i64, i64* %271, i64 2
  %280 = bitcast i64* %279 to <2 x i64>*
  store <2 x i64> %277, <2 x i64>* %280, align 8, !alias.scope !16, !noalias !13
  %281 = or i64 %247, 12
  %282 = getelementptr i64, i64* %198, i64 %281
  %283 = getelementptr i64, i64* %204, i64 %281
  %284 = bitcast i64* %283 to <2 x i64>*
  %285 = load <2 x i64>, <2 x i64>* %284, align 8, !alias.scope !13
  %286 = getelementptr i64, i64* %283, i64 2
  %287 = bitcast i64* %286 to <2 x i64>*
  %288 = load <2 x i64>, <2 x i64>* %287, align 8, !alias.scope !13
  %289 = bitcast i64* %282 to <2 x i64>*
  store <2 x i64> %285, <2 x i64>* %289, align 8, !alias.scope !16, !noalias !13
  %290 = getelementptr i64, i64* %282, i64 2
  %291 = bitcast i64* %290 to <2 x i64>*
  store <2 x i64> %288, <2 x i64>* %291, align 8, !alias.scope !16, !noalias !13
  %292 = add i64 %247, 16
  %293 = add i64 %248, -4
  %294 = icmp eq i64 %293, 0
  br i1 %294, label %295, label %246, !llvm.loop !18

295:                                              ; preds = %246, %235
  %296 = phi i64 [ 0, %235 ], [ %292, %246 ]
  %297 = icmp eq i64 %242, 0
  br i1 %297, label %314, label %298

298:                                              ; preds = %295, %298
  %299 = phi i64 [ %311, %298 ], [ %296, %295 ]
  %300 = phi i64 [ %312, %298 ], [ %242, %295 ]
  %301 = getelementptr i64, i64* %198, i64 %299
  %302 = getelementptr i64, i64* %204, i64 %299
  %303 = bitcast i64* %302 to <2 x i64>*
  %304 = load <2 x i64>, <2 x i64>* %303, align 8, !alias.scope !13
  %305 = getelementptr i64, i64* %302, i64 2
  %306 = bitcast i64* %305 to <2 x i64>*
  %307 = load <2 x i64>, <2 x i64>* %306, align 8, !alias.scope !13
  %308 = bitcast i64* %301 to <2 x i64>*
  store <2 x i64> %304, <2 x i64>* %308, align 8, !alias.scope !16, !noalias !13
  %309 = getelementptr i64, i64* %301, i64 2
  %310 = bitcast i64* %309 to <2 x i64>*
  store <2 x i64> %307, <2 x i64>* %310, align 8, !alias.scope !16, !noalias !13
  %311 = add i64 %299, 4
  %312 = add i64 %300, -1
  %313 = icmp eq i64 %312, 0
  br i1 %313, label %314, label %298, !llvm.loop !19

314:                                              ; preds = %298, %295
  %315 = icmp eq i64 %214, %236
  br i1 %315, label %316, label %216

316:                                              ; preds = %327, %314
  %317 = phi i64* [ %237, %314 ], [ %332, %327 ]
  %318 = ptrtoint i64* %317 to i64
  br label %319

319:                                              ; preds = %316, %196
  %320 = phi i64 [ %318, %316 ], [ %197, %196 ]
  store i64 %320, i64* %24, align 8
  %321 = icmp eq i64 %202, 0
  br i1 %321, label %334, label %322

322:                                              ; preds = %319
  %323 = sub nsw i64 0, %203
  %324 = getelementptr inbounds i64, i64* %198, i64 %323
  %325 = bitcast i64* %324 to i8*
  %326 = bitcast i64* %1 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %325, i8* align 8 %326, i64 %202, i1 false) #8
  br label %334

327:                                              ; preds = %216, %327
  %328 = phi i64* [ %332, %327 ], [ %217, %216 ]
  %329 = phi i64* [ %331, %327 ], [ %218, %216 ]
  %330 = load i64, i64* %329, align 8
  store i64 %330, i64* %328, align 8
  %331 = getelementptr inbounds i64, i64* %329, i64 1
  %332 = getelementptr inbounds i64, i64* %328, i64 1
  %333 = icmp ult i64* %331, %19
  br i1 %333, label %327, label %316, !llvm.loop !20

334:                                              ; preds = %319, %322
  %335 = ptrtoint i64* %199 to i64
  %336 = sub i64 %335, %8
  %337 = icmp eq i64 %336, 0
  br i1 %337, label %706, label %338

338:                                              ; preds = %334
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %6, i8* align 8 %5, i64 %336, i1 false) #8
  br label %706

339:                                              ; preds = %14
  %340 = bitcast %"class.std::__1::vector"* %0 to i64*
  %341 = load i64, i64* %340, align 8
  %342 = sub i64 %20, %341
  %343 = ashr exact i64 %342, 3
  %344 = add nsw i64 %343, %12
  %345 = icmp ugt i64 %344, 2305843009213693951
  br i1 %345, label %346, label %348

346:                                              ; preds = %339
  %347 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %347) #9
  unreachable

348:                                              ; preds = %339
  %349 = sub i64 %17, %341
  %350 = ashr exact i64 %349, 3
  %351 = icmp ult i64 %350, 1152921504606846975
  br i1 %351, label %355, label %352

352:                                              ; preds = %348
  %353 = sub i64 %7, %341
  %354 = ashr exact i64 %353, 3
  br label %365

355:                                              ; preds = %348
  %356 = ashr exact i64 %349, 2
  %357 = icmp ult i64 %356, %344
  %358 = select i1 %357, i64 %344, i64 %356
  %359 = sub i64 %7, %341
  %360 = ashr exact i64 %359, 3
  %361 = icmp eq i64 %358, 0
  br i1 %361, label %371, label %362

362:                                              ; preds = %355
  %363 = icmp ugt i64 %358, 2305843009213693951
  br i1 %363, label %364, label %365

364:                                              ; preds = %362
  tail call void @abort() #9
  unreachable

365:                                              ; preds = %352, %362
  %366 = phi i64 [ 2305843009213693951, %352 ], [ %358, %362 ]
  %367 = phi i64 [ %354, %352 ], [ %360, %362 ]
  %368 = shl i64 %366, 3
  %369 = tail call i8* @_Znwm(i64 %368) #10
  %370 = bitcast i8* %369 to i64*
  br label %371

371:                                              ; preds = %365, %355
  %372 = phi i64 [ %367, %365 ], [ %360, %355 ]
  %373 = phi i64 [ %366, %365 ], [ 0, %355 ]
  %374 = phi i64* [ %370, %365 ], [ null, %355 ]
  %375 = getelementptr inbounds i64, i64* %374, i64 %372
  %376 = getelementptr inbounds i64, i64* %374, i64 %373
  %377 = ptrtoint i64* %376 to i64
  %378 = getelementptr inbounds i64, i64* %375, i64 %12
  %379 = add i64 %11, -8
  %380 = lshr i64 %379, 3
  %381 = add nuw nsw i64 %380, 1
  %382 = icmp ult i64 %381, 4
  br i1 %382, label %475, label %383

383:                                              ; preds = %371
  %384 = add i64 %11, -8
  %385 = lshr i64 %384, 3
  %386 = add nsw i64 %372, %385
  %387 = add nsw i64 %386, 1
  %388 = getelementptr i64, i64* %374, i64 %387
  %389 = add nuw nsw i64 %385, 1
  %390 = getelementptr i64, i64* %2, i64 %389
  %391 = icmp ult i64* %375, %390
  %392 = icmp ugt i64* %388, %2
  %393 = and i1 %391, %392
  br i1 %393, label %475, label %394

394:                                              ; preds = %383
  %395 = and i64 %381, 4611686018427387900
  %396 = getelementptr i64, i64* %375, i64 %395
  %397 = getelementptr i64, i64* %2, i64 %395
  %398 = add nsw i64 %395, -4
  %399 = lshr exact i64 %398, 2
  %400 = add nuw nsw i64 %399, 1
  %401 = and i64 %400, 3
  %402 = icmp ult i64 %398, 12
  br i1 %402, label %454, label %403

403:                                              ; preds = %394
  %404 = sub nsw i64 %400, %401
  br label %405

405:                                              ; preds = %405, %403
  %406 = phi i64 [ 0, %403 ], [ %451, %405 ]
  %407 = phi i64 [ %404, %403 ], [ %452, %405 ]
  %408 = getelementptr i64, i64* %375, i64 %406
  %409 = getelementptr i64, i64* %2, i64 %406
  %410 = bitcast i64* %409 to <2 x i64>*
  %411 = load <2 x i64>, <2 x i64>* %410, align 8, !alias.scope !21
  %412 = getelementptr i64, i64* %409, i64 2
  %413 = bitcast i64* %412 to <2 x i64>*
  %414 = load <2 x i64>, <2 x i64>* %413, align 8, !alias.scope !21
  %415 = bitcast i64* %408 to <2 x i64>*
  store <2 x i64> %411, <2 x i64>* %415, align 8, !alias.scope !24, !noalias !21
  %416 = getelementptr i64, i64* %408, i64 2
  %417 = bitcast i64* %416 to <2 x i64>*
  store <2 x i64> %414, <2 x i64>* %417, align 8, !alias.scope !24, !noalias !21
  %418 = or i64 %406, 4
  %419 = getelementptr i64, i64* %375, i64 %418
  %420 = getelementptr i64, i64* %2, i64 %418
  %421 = bitcast i64* %420 to <2 x i64>*
  %422 = load <2 x i64>, <2 x i64>* %421, align 8, !alias.scope !21
  %423 = getelementptr i64, i64* %420, i64 2
  %424 = bitcast i64* %423 to <2 x i64>*
  %425 = load <2 x i64>, <2 x i64>* %424, align 8, !alias.scope !21
  %426 = bitcast i64* %419 to <2 x i64>*
  store <2 x i64> %422, <2 x i64>* %426, align 8, !alias.scope !24, !noalias !21
  %427 = getelementptr i64, i64* %419, i64 2
  %428 = bitcast i64* %427 to <2 x i64>*
  store <2 x i64> %425, <2 x i64>* %428, align 8, !alias.scope !24, !noalias !21
  %429 = or i64 %406, 8
  %430 = getelementptr i64, i64* %375, i64 %429
  %431 = getelementptr i64, i64* %2, i64 %429
  %432 = bitcast i64* %431 to <2 x i64>*
  %433 = load <2 x i64>, <2 x i64>* %432, align 8, !alias.scope !21
  %434 = getelementptr i64, i64* %431, i64 2
  %435 = bitcast i64* %434 to <2 x i64>*
  %436 = load <2 x i64>, <2 x i64>* %435, align 8, !alias.scope !21
  %437 = bitcast i64* %430 to <2 x i64>*
  store <2 x i64> %433, <2 x i64>* %437, align 8, !alias.scope !24, !noalias !21
  %438 = getelementptr i64, i64* %430, i64 2
  %439 = bitcast i64* %438 to <2 x i64>*
  store <2 x i64> %436, <2 x i64>* %439, align 8, !alias.scope !24, !noalias !21
  %440 = or i64 %406, 12
  %441 = getelementptr i64, i64* %375, i64 %440
  %442 = getelementptr i64, i64* %2, i64 %440
  %443 = bitcast i64* %442 to <2 x i64>*
  %444 = load <2 x i64>, <2 x i64>* %443, align 8, !alias.scope !21
  %445 = getelementptr i64, i64* %442, i64 2
  %446 = bitcast i64* %445 to <2 x i64>*
  %447 = load <2 x i64>, <2 x i64>* %446, align 8, !alias.scope !21
  %448 = bitcast i64* %441 to <2 x i64>*
  store <2 x i64> %444, <2 x i64>* %448, align 8, !alias.scope !24, !noalias !21
  %449 = getelementptr i64, i64* %441, i64 2
  %450 = bitcast i64* %449 to <2 x i64>*
  store <2 x i64> %447, <2 x i64>* %450, align 8, !alias.scope !24, !noalias !21
  %451 = add i64 %406, 16
  %452 = add i64 %407, -4
  %453 = icmp eq i64 %452, 0
  br i1 %453, label %454, label %405, !llvm.loop !26

454:                                              ; preds = %405, %394
  %455 = phi i64 [ 0, %394 ], [ %451, %405 ]
  %456 = icmp eq i64 %401, 0
  br i1 %456, label %473, label %457

457:                                              ; preds = %454, %457
  %458 = phi i64 [ %470, %457 ], [ %455, %454 ]
  %459 = phi i64 [ %471, %457 ], [ %401, %454 ]
  %460 = getelementptr i64, i64* %375, i64 %458
  %461 = getelementptr i64, i64* %2, i64 %458
  %462 = bitcast i64* %461 to <2 x i64>*
  %463 = load <2 x i64>, <2 x i64>* %462, align 8, !alias.scope !21
  %464 = getelementptr i64, i64* %461, i64 2
  %465 = bitcast i64* %464 to <2 x i64>*
  %466 = load <2 x i64>, <2 x i64>* %465, align 8, !alias.scope !21
  %467 = bitcast i64* %460 to <2 x i64>*
  store <2 x i64> %463, <2 x i64>* %467, align 8, !alias.scope !24, !noalias !21
  %468 = getelementptr i64, i64* %460, i64 2
  %469 = bitcast i64* %468 to <2 x i64>*
  store <2 x i64> %466, <2 x i64>* %469, align 8, !alias.scope !24, !noalias !21
  %470 = add i64 %458, 4
  %471 = add i64 %459, -1
  %472 = icmp eq i64 %471, 0
  br i1 %472, label %473, label %457, !llvm.loop !27

473:                                              ; preds = %457, %454
  %474 = icmp eq i64 %381, %395
  br i1 %474, label %529, label %475

475:                                              ; preds = %473, %383, %371
  %476 = phi i64* [ %375, %383 ], [ %375, %371 ], [ %396, %473 ]
  %477 = phi i64* [ %2, %383 ], [ %2, %371 ], [ %397, %473 ]
  %478 = ptrtoint i64* %476 to i64
  %479 = add nsw i64 %372, %12
  %480 = add nsw i64 %479, -1
  %481 = getelementptr i64, i64* %374, i64 %480
  %482 = ptrtoint i64* %481 to i64
  %483 = sub i64 %482, %478
  %484 = lshr i64 %483, 3
  %485 = add nuw nsw i64 %484, 1
  %486 = and i64 %485, 7
  %487 = icmp eq i64 %486, 0
  br i1 %487, label %497, label %488

488:                                              ; preds = %475, %488
  %489 = phi i64* [ %493, %488 ], [ %476, %475 ]
  %490 = phi i64* [ %494, %488 ], [ %477, %475 ]
  %491 = phi i64 [ %495, %488 ], [ %486, %475 ]
  %492 = load i64, i64* %490, align 8
  store i64 %492, i64* %489, align 8
  %493 = getelementptr inbounds i64, i64* %489, i64 1
  %494 = getelementptr inbounds i64, i64* %490, i64 1
  %495 = add i64 %491, -1
  %496 = icmp eq i64 %495, 0
  br i1 %496, label %497, label %488, !llvm.loop !28

497:                                              ; preds = %488, %475
  %498 = phi i64* [ %476, %475 ], [ %493, %488 ]
  %499 = phi i64* [ %477, %475 ], [ %494, %488 ]
  %500 = icmp ult i64 %483, 56
  br i1 %500, label %529, label %501

501:                                              ; preds = %497, %501
  %502 = phi i64* [ %526, %501 ], [ %498, %497 ]
  %503 = phi i64* [ %527, %501 ], [ %499, %497 ]
  %504 = load i64, i64* %503, align 8
  store i64 %504, i64* %502, align 8
  %505 = getelementptr inbounds i64, i64* %502, i64 1
  %506 = getelementptr inbounds i64, i64* %503, i64 1
  %507 = load i64, i64* %506, align 8
  store i64 %507, i64* %505, align 8
  %508 = getelementptr inbounds i64, i64* %502, i64 2
  %509 = getelementptr inbounds i64, i64* %503, i64 2
  %510 = load i64, i64* %509, align 8
  store i64 %510, i64* %508, align 8
  %511 = getelementptr inbounds i64, i64* %502, i64 3
  %512 = getelementptr inbounds i64, i64* %503, i64 3
  %513 = load i64, i64* %512, align 8
  store i64 %513, i64* %511, align 8
  %514 = getelementptr inbounds i64, i64* %502, i64 4
  %515 = getelementptr inbounds i64, i64* %503, i64 4
  %516 = load i64, i64* %515, align 8
  store i64 %516, i64* %514, align 8
  %517 = getelementptr inbounds i64, i64* %502, i64 5
  %518 = getelementptr inbounds i64, i64* %503, i64 5
  %519 = load i64, i64* %518, align 8
  store i64 %519, i64* %517, align 8
  %520 = getelementptr inbounds i64, i64* %502, i64 6
  %521 = getelementptr inbounds i64, i64* %503, i64 6
  %522 = load i64, i64* %521, align 8
  store i64 %522, i64* %520, align 8
  %523 = getelementptr inbounds i64, i64* %502, i64 7
  %524 = getelementptr inbounds i64, i64* %503, i64 7
  %525 = load i64, i64* %524, align 8
  store i64 %525, i64* %523, align 8
  %526 = getelementptr inbounds i64, i64* %502, i64 8
  %527 = getelementptr inbounds i64, i64* %503, i64 8
  %528 = icmp eq i64* %378, %526
  br i1 %528, label %529, label %501, !llvm.loop !29

529:                                              ; preds = %497, %501, %473
  %530 = load i64*, i64** %9, align 8
  %531 = ptrtoint i64* %530 to i64
  %532 = sub i64 %7, %531
  %533 = ashr exact i64 %532, 3
  %534 = sub nsw i64 0, %533
  %535 = getelementptr inbounds i64, i64* %375, i64 %534
  %536 = ptrtoint i64* %535 to i64
  %537 = icmp sgt i64 %532, 0
  br i1 %537, label %538, label %541

538:                                              ; preds = %529
  %539 = bitcast i64* %535 to i8*
  %540 = bitcast i64* %530 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %539, i8* align 8 %540, i64 %532, i1 false) #8
  br label %541

541:                                              ; preds = %538, %529
  %542 = load i64*, i64** %18, align 8
  %543 = icmp eq i64* %542, %1
  br i1 %543, label %699, label %544

544:                                              ; preds = %541
  %545 = getelementptr i64, i64* %542, i64 -1
  %546 = ptrtoint i64* %545 to i64
  %547 = sub i64 %546, %7
  %548 = lshr i64 %547, 3
  %549 = add nuw nsw i64 %548, 1
  %550 = icmp ult i64 %549, 4
  br i1 %550, label %646, label %551

551:                                              ; preds = %544
  %552 = add nsw i64 %372, %12
  %553 = getelementptr i64, i64* %542, i64 -1
  %554 = ptrtoint i64* %553 to i64
  %555 = sub i64 %554, %7
  %556 = lshr i64 %555, 3
  %557 = add nsw i64 %552, %556
  %558 = add nsw i64 %557, 1
  %559 = getelementptr i64, i64* %374, i64 %558
  %560 = add nuw nsw i64 %556, 1
  %561 = getelementptr i64, i64* %1, i64 %560
  %562 = icmp ult i64* %378, %561
  %563 = icmp ugt i64* %559, %1
  %564 = and i1 %562, %563
  br i1 %564, label %646, label %565

565:                                              ; preds = %551
  %566 = and i64 %549, 4611686018427387900
  %567 = getelementptr i64, i64* %378, i64 %566
  %568 = getelementptr i64, i64* %1, i64 %566
  %569 = add nsw i64 %566, -4
  %570 = lshr exact i64 %569, 2
  %571 = add nuw nsw i64 %570, 1
  %572 = and i64 %571, 3
  %573 = icmp ult i64 %569, 12
  br i1 %573, label %625, label %574

574:                                              ; preds = %565
  %575 = sub nsw i64 %571, %572
  br label %576

576:                                              ; preds = %576, %574
  %577 = phi i64 [ 0, %574 ], [ %622, %576 ]
  %578 = phi i64 [ %575, %574 ], [ %623, %576 ]
  %579 = getelementptr i64, i64* %378, i64 %577
  %580 = getelementptr i64, i64* %1, i64 %577
  %581 = bitcast i64* %580 to <2 x i64>*
  %582 = load <2 x i64>, <2 x i64>* %581, align 8, !alias.scope !30
  %583 = getelementptr i64, i64* %580, i64 2
  %584 = bitcast i64* %583 to <2 x i64>*
  %585 = load <2 x i64>, <2 x i64>* %584, align 8, !alias.scope !30
  %586 = bitcast i64* %579 to <2 x i64>*
  store <2 x i64> %582, <2 x i64>* %586, align 8, !alias.scope !33, !noalias !30
  %587 = getelementptr i64, i64* %579, i64 2
  %588 = bitcast i64* %587 to <2 x i64>*
  store <2 x i64> %585, <2 x i64>* %588, align 8, !alias.scope !33, !noalias !30
  %589 = or i64 %577, 4
  %590 = getelementptr i64, i64* %378, i64 %589
  %591 = getelementptr i64, i64* %1, i64 %589
  %592 = bitcast i64* %591 to <2 x i64>*
  %593 = load <2 x i64>, <2 x i64>* %592, align 8, !alias.scope !30
  %594 = getelementptr i64, i64* %591, i64 2
  %595 = bitcast i64* %594 to <2 x i64>*
  %596 = load <2 x i64>, <2 x i64>* %595, align 8, !alias.scope !30
  %597 = bitcast i64* %590 to <2 x i64>*
  store <2 x i64> %593, <2 x i64>* %597, align 8, !alias.scope !33, !noalias !30
  %598 = getelementptr i64, i64* %590, i64 2
  %599 = bitcast i64* %598 to <2 x i64>*
  store <2 x i64> %596, <2 x i64>* %599, align 8, !alias.scope !33, !noalias !30
  %600 = or i64 %577, 8
  %601 = getelementptr i64, i64* %378, i64 %600
  %602 = getelementptr i64, i64* %1, i64 %600
  %603 = bitcast i64* %602 to <2 x i64>*
  %604 = load <2 x i64>, <2 x i64>* %603, align 8, !alias.scope !30
  %605 = getelementptr i64, i64* %602, i64 2
  %606 = bitcast i64* %605 to <2 x i64>*
  %607 = load <2 x i64>, <2 x i64>* %606, align 8, !alias.scope !30
  %608 = bitcast i64* %601 to <2 x i64>*
  store <2 x i64> %604, <2 x i64>* %608, align 8, !alias.scope !33, !noalias !30
  %609 = getelementptr i64, i64* %601, i64 2
  %610 = bitcast i64* %609 to <2 x i64>*
  store <2 x i64> %607, <2 x i64>* %610, align 8, !alias.scope !33, !noalias !30
  %611 = or i64 %577, 12
  %612 = getelementptr i64, i64* %378, i64 %611
  %613 = getelementptr i64, i64* %1, i64 %611
  %614 = bitcast i64* %613 to <2 x i64>*
  %615 = load <2 x i64>, <2 x i64>* %614, align 8, !alias.scope !30
  %616 = getelementptr i64, i64* %613, i64 2
  %617 = bitcast i64* %616 to <2 x i64>*
  %618 = load <2 x i64>, <2 x i64>* %617, align 8, !alias.scope !30
  %619 = bitcast i64* %612 to <2 x i64>*
  store <2 x i64> %615, <2 x i64>* %619, align 8, !alias.scope !33, !noalias !30
  %620 = getelementptr i64, i64* %612, i64 2
  %621 = bitcast i64* %620 to <2 x i64>*
  store <2 x i64> %618, <2 x i64>* %621, align 8, !alias.scope !33, !noalias !30
  %622 = add i64 %577, 16
  %623 = add i64 %578, -4
  %624 = icmp eq i64 %623, 0
  br i1 %624, label %625, label %576, !llvm.loop !35

625:                                              ; preds = %576, %565
  %626 = phi i64 [ 0, %565 ], [ %622, %576 ]
  %627 = icmp eq i64 %572, 0
  br i1 %627, label %644, label %628

628:                                              ; preds = %625, %628
  %629 = phi i64 [ %641, %628 ], [ %626, %625 ]
  %630 = phi i64 [ %642, %628 ], [ %572, %625 ]
  %631 = getelementptr i64, i64* %378, i64 %629
  %632 = getelementptr i64, i64* %1, i64 %629
  %633 = bitcast i64* %632 to <2 x i64>*
  %634 = load <2 x i64>, <2 x i64>* %633, align 8, !alias.scope !30
  %635 = getelementptr i64, i64* %632, i64 2
  %636 = bitcast i64* %635 to <2 x i64>*
  %637 = load <2 x i64>, <2 x i64>* %636, align 8, !alias.scope !30
  %638 = bitcast i64* %631 to <2 x i64>*
  store <2 x i64> %634, <2 x i64>* %638, align 8, !alias.scope !33, !noalias !30
  %639 = getelementptr i64, i64* %631, i64 2
  %640 = bitcast i64* %639 to <2 x i64>*
  store <2 x i64> %637, <2 x i64>* %640, align 8, !alias.scope !33, !noalias !30
  %641 = add i64 %629, 4
  %642 = add i64 %630, -1
  %643 = icmp eq i64 %642, 0
  br i1 %643, label %644, label %628, !llvm.loop !36

644:                                              ; preds = %628, %625
  %645 = icmp eq i64 %549, %566
  br i1 %645, label %699, label %646

646:                                              ; preds = %644, %551, %544
  %647 = phi i64* [ %378, %551 ], [ %378, %544 ], [ %567, %644 ]
  %648 = phi i64* [ %1, %551 ], [ %1, %544 ], [ %568, %644 ]
  %649 = ptrtoint i64* %648 to i64
  %650 = getelementptr i64, i64* %542, i64 -1
  %651 = ptrtoint i64* %650 to i64
  %652 = sub i64 %651, %649
  %653 = lshr i64 %652, 3
  %654 = add nuw nsw i64 %653, 1
  %655 = and i64 %654, 7
  %656 = icmp eq i64 %655, 0
  br i1 %656, label %666, label %657

657:                                              ; preds = %646, %657
  %658 = phi i64* [ %663, %657 ], [ %647, %646 ]
  %659 = phi i64* [ %662, %657 ], [ %648, %646 ]
  %660 = phi i64 [ %664, %657 ], [ %655, %646 ]
  %661 = load i64, i64* %659, align 8
  store i64 %661, i64* %658, align 8
  %662 = getelementptr inbounds i64, i64* %659, i64 1
  %663 = getelementptr inbounds i64, i64* %658, i64 1
  %664 = add i64 %660, -1
  %665 = icmp eq i64 %664, 0
  br i1 %665, label %666, label %657, !llvm.loop !37

666:                                              ; preds = %657, %646
  %667 = phi i64* [ undef, %646 ], [ %663, %657 ]
  %668 = phi i64* [ %647, %646 ], [ %663, %657 ]
  %669 = phi i64* [ %648, %646 ], [ %662, %657 ]
  %670 = icmp ult i64 %652, 56
  br i1 %670, label %699, label %671

671:                                              ; preds = %666, %671
  %672 = phi i64* [ %697, %671 ], [ %668, %666 ]
  %673 = phi i64* [ %696, %671 ], [ %669, %666 ]
  %674 = load i64, i64* %673, align 8
  store i64 %674, i64* %672, align 8
  %675 = getelementptr inbounds i64, i64* %673, i64 1
  %676 = getelementptr inbounds i64, i64* %672, i64 1
  %677 = load i64, i64* %675, align 8
  store i64 %677, i64* %676, align 8
  %678 = getelementptr inbounds i64, i64* %673, i64 2
  %679 = getelementptr inbounds i64, i64* %672, i64 2
  %680 = load i64, i64* %678, align 8
  store i64 %680, i64* %679, align 8
  %681 = getelementptr inbounds i64, i64* %673, i64 3
  %682 = getelementptr inbounds i64, i64* %672, i64 3
  %683 = load i64, i64* %681, align 8
  store i64 %683, i64* %682, align 8
  %684 = getelementptr inbounds i64, i64* %673, i64 4
  %685 = getelementptr inbounds i64, i64* %672, i64 4
  %686 = load i64, i64* %684, align 8
  store i64 %686, i64* %685, align 8
  %687 = getelementptr inbounds i64, i64* %673, i64 5
  %688 = getelementptr inbounds i64, i64* %672, i64 5
  %689 = load i64, i64* %687, align 8
  store i64 %689, i64* %688, align 8
  %690 = getelementptr inbounds i64, i64* %673, i64 6
  %691 = getelementptr inbounds i64, i64* %672, i64 6
  %692 = load i64, i64* %690, align 8
  store i64 %692, i64* %691, align 8
  %693 = getelementptr inbounds i64, i64* %673, i64 7
  %694 = getelementptr inbounds i64, i64* %672, i64 7
  %695 = load i64, i64* %693, align 8
  store i64 %695, i64* %694, align 8
  %696 = getelementptr inbounds i64, i64* %673, i64 8
  %697 = getelementptr inbounds i64, i64* %672, i64 8
  %698 = icmp eq i64* %696, %542
  br i1 %698, label %699, label %671, !llvm.loop !38

699:                                              ; preds = %666, %671, %644, %541
  %700 = phi i64* [ %378, %541 ], [ %567, %644 ], [ %667, %666 ], [ %697, %671 ]
  %701 = ptrtoint i64* %700 to i64
  %702 = load i64*, i64** %9, align 8
  store i64 %536, i64* %340, align 8
  store i64 %701, i64* %24, align 8
  store i64 %377, i64* %16, align 8
  %703 = icmp eq i64* %702, null
  br i1 %703, label %706, label %704

704:                                              ; preds = %699
  %705 = bitcast i64* %702 to i8*
  tail call void @_ZdlPv(i8* %705) #10
  br label %706

706:                                              ; preds = %704, %699, %191, %334, %338, %4
  %707 = phi i64* [ %1, %4 ], [ %1, %338 ], [ %1, %334 ], [ %1, %191 ], [ %375, %699 ], [ %375, %704 ]
  ret i64* %707
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN8spvtools5utilslsERNSt3__113basic_ostreamIcNS1_11char_traitsIcEEEERKNS0_9BitVectorE(%"class.std::__1::basic_ostream"* returned dereferenceable(160), %"class.spvtools::utils::BitVector"* nocapture readonly dereferenceable(24)) local_unnamed_addr #0 {
  %3 = alloca i8, align 1
  %4 = tail call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0), i64 1) #8
  %5 = getelementptr inbounds %"class.spvtools::utils::BitVector", %"class.spvtools::utils::BitVector"* %1, i64 0, i32 0, i32 0, i32 1
  %6 = bitcast i64** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = bitcast %"class.spvtools::utils::BitVector"* %1 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = icmp eq i64 %7, %9
  br i1 %10, label %11, label %13

11:                                               ; preds = %36, %2
  %12 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0), i64 1) #8
  ret %"class.std::__1::basic_ostream"* %0

13:                                               ; preds = %2, %36
  %14 = phi i64 [ %40, %36 ], [ %9, %2 ]
  %15 = phi i64 [ %38, %36 ], [ 0, %2 ]
  %16 = phi i32 [ %37, %36 ], [ 0, %2 ]
  %17 = inttoptr i64 %14 to i64*
  %18 = getelementptr inbounds i64, i64* %17, i64 %15
  %19 = load i64, i64* %18, align 8
  %20 = icmp eq i64 %19, 0
  br i1 %20, label %36, label %21

21:                                               ; preds = %13
  %22 = shl i32 %16, 6
  br label %23

23:                                               ; preds = %21, %32
  %24 = phi i32 [ 0, %21 ], [ %33, %32 ]
  %25 = phi i64 [ %19, %21 ], [ %34, %32 ]
  %26 = and i64 %25, 1
  %27 = icmp eq i64 %26, 0
  br i1 %27, label %32, label %28

28:                                               ; preds = %23
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %3)
  store i8 32, i8* %3, align 1
  %29 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %0, i8* nonnull %3, i64 1) #8
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %3)
  %30 = add i32 %24, %22
  %31 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEj(%"class.std::__1::basic_ostream"* %29, i32 %30) #8
  br label %32

32:                                               ; preds = %23, %28
  %33 = add nuw nsw i32 %24, 1
  %34 = lshr i64 %25, 1
  %35 = icmp eq i64 %34, 0
  br i1 %35, label %36, label %23

36:                                               ; preds = %32, %13
  %37 = add i32 %16, 1
  %38 = zext i32 %37 to i64
  %39 = load i64, i64* %6, align 8
  %40 = load i64, i64* %8, align 8
  %41 = sub i64 %39, %40
  %42 = ashr exact i64 %41, 3
  %43 = icmp ugt i64 %42, %38
  br i1 %43, label %13, label %11
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160), i8*, i64) local_unnamed_addr #0 comdat {
  %4 = alloca %"class.std::__1::locale", align 8
  %5 = alloca %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry", align 8
  %6 = getelementptr inbounds %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry", %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* %5, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 16, i1 false)
  call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* nonnull %5, %"class.std::__1::basic_ostream"* dereferenceable(160) %0) #8
  %7 = load i8, i8* %6, align 8, !range !39
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %58, label %9

9:                                                ; preds = %3
  %10 = bitcast %"class.std::__1::basic_ostream"* %0 to i8**
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr i8, i8* %11, i64 -24
  %13 = bitcast i8* %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = bitcast %"class.std::__1::basic_ostream"* %0 to i8*
  %16 = getelementptr inbounds i8, i8* %15, i64 %14
  %17 = getelementptr inbounds i8, i8* %16, i64 40
  %18 = bitcast i8* %17 to %"class.std::__1::basic_streambuf"**
  %19 = load %"class.std::__1::basic_streambuf"*, %"class.std::__1::basic_streambuf"** %18, align 8
  %20 = bitcast i8* %16 to %"class.std::__1::ios_base"*
  %21 = getelementptr inbounds i8, i8* %16, i64 8
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 8
  %24 = and i32 %23, 176
  %25 = icmp eq i32 %24, 32
  %26 = getelementptr inbounds i8, i8* %1, i64 %2
  %27 = select i1 %25, i8* %26, i8* %1
  %28 = getelementptr inbounds i8, i8* %16, i64 144
  %29 = bitcast i8* %28 to i32*
  %30 = load i32, i32* %29, align 8
  %31 = icmp eq i32 %30, -1
  br i1 %31, label %32, label %42

32:                                               ; preds = %9
  %33 = bitcast %"class.std::__1::locale"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #8
  call void @_ZNKSt3__18ios_base6getlocEv(%"class.std::__1::locale"* nonnull sret %4, %"class.std::__1::ios_base"* %20) #8
  %34 = call %"class.std::__1::locale::facet"* @_ZNKSt3__16locale9use_facetERNS0_2idE(%"class.std::__1::locale"* nonnull %4, %"class.std::__1::locale::id"* nonnull dereferenceable(16) @_ZNSt3__15ctypeIcE2idE) #8
  %35 = bitcast %"class.std::__1::locale::facet"* %34 to %"class.std::__1::ctype"*
  %36 = bitcast %"class.std::__1::locale::facet"* %34 to i8 (%"class.std::__1::ctype"*, i8)***
  %37 = load i8 (%"class.std::__1::ctype"*, i8)**, i8 (%"class.std::__1::ctype"*, i8)*** %36, align 8
  %38 = getelementptr inbounds i8 (%"class.std::__1::ctype"*, i8)*, i8 (%"class.std::__1::ctype"*, i8)** %37, i64 7
  %39 = load i8 (%"class.std::__1::ctype"*, i8)*, i8 (%"class.std::__1::ctype"*, i8)** %38, align 8
  %40 = call signext i8 %39(%"class.std::__1::ctype"* %35, i8 signext 32) #8
  call void @_ZNSt3__16localeD1Ev(%"class.std::__1::locale"* nonnull %4) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #8
  %41 = sext i8 %40 to i32
  store i32 %41, i32* %29, align 8
  br label %42

42:                                               ; preds = %9, %32
  %43 = phi i32 [ %41, %32 ], [ %30, %9 ]
  %44 = trunc i32 %43 to i8
  %45 = call %"class.std::__1::basic_streambuf"* @_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(%"class.std::__1::basic_streambuf"* %19, i8* %1, i8* %27, i8* %26, %"class.std::__1::ios_base"* dereferenceable(136) %20, i8 signext %44)
  %46 = icmp eq %"class.std::__1::basic_streambuf"* %45, null
  br i1 %46, label %47, label %58

47:                                               ; preds = %42
  %48 = load i8*, i8** %10, align 8
  %49 = getelementptr i8, i8* %48, i64 -24
  %50 = bitcast i8* %49 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = getelementptr inbounds i8, i8* %15, i64 %51
  %53 = bitcast i8* %52 to %"class.std::__1::ios_base"*
  %54 = getelementptr inbounds i8, i8* %52, i64 32
  %55 = bitcast i8* %54 to i32*
  %56 = load i32, i32* %55, align 8
  %57 = or i32 %56, 5
  call void @_ZNSt3__18ios_base5clearEj(%"class.std::__1::ios_base"* %53, i32 %57) #8
  br label %58

58:                                               ; preds = %3, %42, %47
  call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* nonnull %5) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #8
  ret %"class.std::__1::basic_ostream"* %0
}

declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"*, %"class.std::__1::basic_ostream"* dereferenceable(160)) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.std::__1::basic_streambuf"* @_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(%"class.std::__1::basic_streambuf"*, i8*, i8*, i8*, %"class.std::__1::ios_base"* dereferenceable(136), i8 signext) local_unnamed_addr #0 comdat {
  %7 = alloca %"class.std::__1::basic_string", align 8
  %8 = icmp eq %"class.std::__1::basic_streambuf"* %0, null
  br i1 %8, label %78, label %9

9:                                                ; preds = %6
  %10 = ptrtoint i8* %3 to i64
  %11 = ptrtoint i8* %1 to i64
  %12 = sub i64 %10, %11
  %13 = getelementptr inbounds %"class.std::__1::ios_base", %"class.std::__1::ios_base"* %4, i64 0, i32 3
  %14 = load i64, i64* %13, align 8
  %15 = icmp sgt i64 %14, %12
  %16 = sub nsw i64 %14, %12
  %17 = select i1 %15, i64 %16, i64 0
  %18 = ptrtoint i8* %2 to i64
  %19 = sub i64 %18, %11
  %20 = icmp sgt i64 %19, 0
  br i1 %20, label %21, label %28

21:                                               ; preds = %9
  %22 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %23 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %22, align 8
  %24 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %23, i64 12
  %25 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %24, align 8
  %26 = tail call i64 %25(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %1, i64 %19) #8
  %27 = icmp eq i64 %26, %19
  br i1 %27, label %28, label %78

28:                                               ; preds = %21, %9
  %29 = icmp sgt i64 %17, 0
  br i1 %29, label %30, label %67

30:                                               ; preds = %28
  %31 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %31) #8
  %32 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %33 = icmp ult i64 %17, 23
  %34 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %34, i8 -86, i64 24, i1 false)
  br i1 %33, label %43, label %35

35:                                               ; preds = %30
  %36 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %37 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %38 = add nuw i64 %17, 16
  %39 = and i64 %38, -16
  %40 = tail call i8* @_Znwm(i64 %39) #10
  store i8* %40, i8** %32, align 8
  %41 = or i64 %39, -9223372036854775808
  store i64 %41, i64* %36, align 8
  store i64 %17, i64* %37, align 8
  %42 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  br label %47

43:                                               ; preds = %30
  %44 = trunc i64 %17 to i8
  %45 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %46 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %45, i64 0, i32 1, i32 0
  store i8 %44, i8* %46, align 1
  br label %47

47:                                               ; preds = %35, %43
  %48 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %42, %35 ], [ %45, %43 ]
  %49 = phi i8* [ %40, %35 ], [ %31, %43 ]
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %49, i8 %5, i64 %17, i1 false) #8
  %50 = getelementptr inbounds i8, i8* %49, i64 %17
  store i8 0, i8* %50, align 1
  %51 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %48, i64 0, i32 1, i32 0
  %52 = load i8, i8* %51, align 1
  %53 = icmp slt i8 %52, 0
  %54 = load i8*, i8** %32, align 8
  %55 = select i1 %53, i8* %54, i8* %31
  %56 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %57 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %56, align 8
  %58 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %57, i64 12
  %59 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %58, align 8
  %60 = call i64 %59(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %55, i64 %17) #8
  %61 = icmp eq i64 %60, %17
  %62 = load i8, i8* %51, align 1
  %63 = icmp slt i8 %62, 0
  br i1 %63, label %64, label %66

64:                                               ; preds = %47
  %65 = load i8*, i8** %32, align 8
  call void @_ZdlPv(i8* %65) #10
  br label %66

66:                                               ; preds = %47, %64
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %31) #8
  br i1 %61, label %67, label %78

67:                                               ; preds = %66, %28
  %68 = sub i64 %10, %18
  %69 = icmp sgt i64 %68, 0
  br i1 %69, label %70, label %77

70:                                               ; preds = %67
  %71 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %72 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %71, align 8
  %73 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %72, i64 12
  %74 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %73, align 8
  %75 = call i64 %74(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %2, i64 %68) #8
  %76 = icmp eq i64 %75, %68
  br i1 %76, label %77, label %78

77:                                               ; preds = %70, %67
  store i64 0, i64* %13, align 8
  br label %78

78:                                               ; preds = %77, %66, %21, %70, %6
  %79 = phi %"class.std::__1::basic_streambuf"* [ null, %6 ], [ %0, %77 ], [ null, %66 ], [ null, %21 ], [ null, %70 ]
  ret %"class.std::__1::basic_streambuf"* %79
}

; Function Attrs: nounwind
declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"*) unnamed_addr #3

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #4

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

declare void @_ZNKSt3__18ios_base6getlocEv(%"class.std::__1::locale"* sret, %"class.std::__1::ios_base"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZNSt3__16localeD1Ev(%"class.std::__1::locale"*) unnamed_addr #3

declare %"class.std::__1::locale::facet"* @_ZNKSt3__16locale9use_facetERNS0_2idE(%"class.std::__1::locale"*, %"class.std::__1::locale::id"* dereferenceable(16)) local_unnamed_addr #2

declare void @_ZNSt3__18ios_base5clearEj(%"class.std::__1::ios_base"*, i32) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #7

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { noreturn nounwind }
attributes #10 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.unroll.disable"}
!11 = distinct !{!11, !10}
!12 = distinct !{!12, !8}
!13 = !{!14}
!14 = distinct !{!14, !15}
!15 = distinct !{!15, !"LVerDomain"}
!16 = !{!17}
!17 = distinct !{!17, !15}
!18 = distinct !{!18, !8}
!19 = distinct !{!19, !10}
!20 = distinct !{!20, !8}
!21 = !{!22}
!22 = distinct !{!22, !23}
!23 = distinct !{!23, !"LVerDomain"}
!24 = !{!25}
!25 = distinct !{!25, !23}
!26 = distinct !{!26, !8}
!27 = distinct !{!27, !10}
!28 = distinct !{!28, !10}
!29 = distinct !{!29, !8}
!30 = !{!31}
!31 = distinct !{!31, !32}
!32 = distinct !{!32, !"LVerDomain"}
!33 = !{!34}
!34 = distinct !{!34, !32}
!35 = distinct !{!35, !8}
!36 = distinct !{!36, !10}
!37 = distinct !{!37, !10}
!38 = distinct !{!38, !8}
!39 = !{i8 0, i8 2}
