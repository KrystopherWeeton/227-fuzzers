; ModuleID = '../../third_party/libjxl/src/lib/jxl/jpeg/dec_jpeg_data_writer.cc'
source_filename = "../../third_party/libjxl/src/lib/jxl/jpeg/dec_jpeg_data_writer.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.jxl::jpeg::JPEGData" = type { %"class.jxl::Fields", i32, i32, i32, %"class.std::__1::vector", %"class.std::__1::vector.8", %"class.std::__1::vector", %"class.std::__1::vector.15", %"class.std::__1::vector.22", %"class.std::__1::vector.31", %"class.std::__1::vector.45", %"class.std::__1::vector.0", %"class.std::__1::vector", %"class.std::__1::vector.0", i32, i8, %"class.std::__1::vector.0" }
%"class.jxl::Fields" = type { i32 (...)** }
%"class.std::__1::vector.8" = type { %"class.std::__1::__vector_base.9" }
%"class.std::__1::__vector_base.9" = type { i32*, i32*, %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { i32* }
%"class.std::__1::vector.15" = type { %"class.std::__1::__vector_base.16" }
%"class.std::__1::__vector_base.16" = type { %"struct.jxl::jpeg::JPEGQuantTable"*, %"struct.jxl::jpeg::JPEGQuantTable"*, %"class.std::__1::__compressed_pair.17" }
%"struct.jxl::jpeg::JPEGQuantTable" = type <{ %"struct.std::__1::array", i32, i32, i8, [3 x i8] }>
%"struct.std::__1::array" = type { [64 x i32] }
%"class.std::__1::__compressed_pair.17" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.std::__1::__compressed_pair_elem.18" = type { %"struct.jxl::jpeg::JPEGQuantTable"* }
%"class.std::__1::vector.22" = type { %"class.std::__1::__vector_base.23" }
%"class.std::__1::__vector_base.23" = type { %"struct.jxl::jpeg::JPEGHuffmanCode"*, %"struct.jxl::jpeg::JPEGHuffmanCode"*, %"class.std::__1::__compressed_pair.26" }
%"struct.jxl::jpeg::JPEGHuffmanCode" = type <{ %"struct.std::__1::array.24", %"struct.std::__1::array.25", i32, i8, [3 x i8] }>
%"struct.std::__1::array.24" = type { [17 x i32] }
%"struct.std::__1::array.25" = type { [257 x i32] }
%"class.std::__1::__compressed_pair.26" = type { %"struct.std::__1::__compressed_pair_elem.27" }
%"struct.std::__1::__compressed_pair_elem.27" = type { %"struct.jxl::jpeg::JPEGHuffmanCode"* }
%"class.std::__1::vector.31" = type { %"class.std::__1::__vector_base.32" }
%"class.std::__1::__vector_base.32" = type { %"struct.jxl::jpeg::JPEGComponent"*, %"struct.jxl::jpeg::JPEGComponent"*, %"class.std::__1::__compressed_pair.40" }
%"struct.jxl::jpeg::JPEGComponent" = type { i32, i32, i32, i32, i32, i32, %"class.std::__1::vector.33" }
%"class.std::__1::vector.33" = type { %"class.std::__1::__vector_base.34" }
%"class.std::__1::__vector_base.34" = type { i16*, i16*, %"class.std::__1::__compressed_pair.35" }
%"class.std::__1::__compressed_pair.35" = type { %"struct.std::__1::__compressed_pair_elem.36" }
%"struct.std::__1::__compressed_pair_elem.36" = type { i16* }
%"class.std::__1::__compressed_pair.40" = type { %"struct.std::__1::__compressed_pair_elem.41" }
%"struct.std::__1::__compressed_pair_elem.41" = type { %"struct.jxl::jpeg::JPEGComponent"* }
%"class.std::__1::vector.45" = type { %"class.std::__1::__vector_base.46" }
%"class.std::__1::__vector_base.46" = type { %"struct.jxl::jpeg::JPEGScanInfo"*, %"struct.jxl::jpeg::JPEGScanInfo"*, %"class.std::__1::__compressed_pair.62" }
%"struct.jxl::jpeg::JPEGScanInfo" = type { i32, i32, i32, i32, i32, %"struct.std::__1::array.47", i32, %"class.std::__1::vector.48", %"class.std::__1::vector.55" }
%"struct.std::__1::array.47" = type { [4 x %"struct.jxl::jpeg::JPEGComponentScanInfo"] }
%"struct.jxl::jpeg::JPEGComponentScanInfo" = type { i32, i32, i32 }
%"class.std::__1::vector.48" = type { %"class.std::__1::__vector_base.49" }
%"class.std::__1::__vector_base.49" = type { i32*, i32*, %"class.std::__1::__compressed_pair.50" }
%"class.std::__1::__compressed_pair.50" = type { %"struct.std::__1::__compressed_pair_elem.51" }
%"struct.std::__1::__compressed_pair_elem.51" = type { i32* }
%"class.std::__1::vector.55" = type { %"class.std::__1::__vector_base.56" }
%"class.std::__1::__vector_base.56" = type { %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*, %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*, %"class.std::__1::__compressed_pair.57" }
%"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo" = type { i32, i32 }
%"class.std::__1::__compressed_pair.57" = type { %"struct.std::__1::__compressed_pair_elem.58" }
%"struct.std::__1::__compressed_pair_elem.58" = type { %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* }
%"class.std::__1::__compressed_pair.62" = type { %"struct.std::__1::__compressed_pair_elem.63" }
%"struct.std::__1::__compressed_pair_elem.63" = type { %"struct.jxl::jpeg::JPEGScanInfo"* }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"*, %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"class.std::__1::vector.0"* }
%"class.std::__1::vector.0" = type { %"class.std::__1::__vector_base.1" }
%"class.std::__1::__vector_base.1" = type { i8*, i8*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.std::__1::function" = type { %"class.std::__1::__function::__policy_func" }
%"class.std::__1::__function::__policy_func" = type { %"union.std::__1::__function::__policy_storage", %"struct.std::__1::__function::__policy_invoker", %"struct.std::__1::__function::__policy"* }
%"union.std::__1::__function::__policy_storage" = type { i8*, [8 x i8] }
%"struct.std::__1::__function::__policy_invoker" = type { i64 (%"union.std::__1::__function::__policy_storage"*, i8*, i64)* }
%"struct.std::__1::__function::__policy" = type { i8* (i8*)*, void (i8*)*, i8, %"class.std::type_info"* }
%"class.std::type_info" = type { i32 (...)**, i8* }
%"struct.jxl::jpeg::SerializationState" = type { i32, %"class.std::__1::deque", i64, i32, i32, i32, i32, i32, i32, %"class.std::__1::vector.79", %"class.std::__1::vector.79", i8*, i8*, i8, i8, [6 x i8], %"struct.jxl::jpeg::EncodeScanState" }
%"class.std::__1::deque" = type { %"class.std::__1::__deque_base" }
%"class.std::__1::__deque_base" = type { %"struct.std::__1::__split_buffer", i64, %"class.std::__1::__compressed_pair.74" }
%"struct.std::__1::__split_buffer" = type { %"struct.jxl::jpeg::OutputChunk"**, %"struct.jxl::jpeg::OutputChunk"**, %"struct.jxl::jpeg::OutputChunk"**, %"class.std::__1::__compressed_pair.69" }
%"struct.jxl::jpeg::OutputChunk" = type { i8*, i64, %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.67" }
%"class.std::__1::__compressed_pair.67" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"class.std::__1::__compressed_pair.69" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"struct.std::__1::__compressed_pair_elem.70" = type { %"struct.jxl::jpeg::OutputChunk"** }
%"class.std::__1::__compressed_pair.74" = type { %"struct.std::__1::__compressed_pair_elem.75" }
%"struct.std::__1::__compressed_pair_elem.75" = type { i64 }
%"class.std::__1::vector.79" = type { %"class.std::__1::__vector_base.80" }
%"class.std::__1::__vector_base.80" = type { %"struct.jxl::jpeg::HuffmanCodeTable"*, %"struct.jxl::jpeg::HuffmanCodeTable"*, %"class.std::__1::__compressed_pair.81" }
%"struct.jxl::jpeg::HuffmanCodeTable" = type { [256 x i32], [256 x i32] }
%"class.std::__1::__compressed_pair.81" = type { %"struct.std::__1::__compressed_pair_elem.82" }
%"struct.std::__1::__compressed_pair_elem.82" = type { %"struct.jxl::jpeg::HuffmanCodeTable"* }
%"struct.jxl::jpeg::EncodeScanState" = type <{ i32, i32, %"struct.jxl::jpeg::JpegBitWriter", [4 x i16], i32, i32, i32, [4 x i8], %"struct.jxl::jpeg::DCTCodingState", i64, i32, [4 x i8], i64, i32, [4 x i8] }>
%"struct.jxl::jpeg::JpegBitWriter" = type <{ i8, [7 x i8], %"class.std::__1::deque"*, %"struct.jxl::jpeg::OutputChunk", i8*, i64, i64, i32, [4 x i8] }>
%"struct.jxl::jpeg::DCTCodingState" = type { i32, %"struct.jxl::jpeg::HuffmanCodeTable"*, %"class.std::__1::vector.86" }
%"class.std::__1::vector.86" = type { %"class.std::__1::__vector_base.87" }
%"class.std::__1::__vector_base.87" = type { i32*, i32*, %"class.std::__1::__compressed_pair.88" }
%"class.std::__1::__compressed_pair.88" = type { %"struct.std::__1::__compressed_pair_elem.89" }
%"struct.std::__1::__compressed_pair_elem.89" = type { i32* }
%"class.std::__1::__vector_base_common" = type { i8 }
%"struct.std::__1::__split_buffer.93" = type { %"struct.jxl::jpeg::OutputChunk"**, %"struct.jxl::jpeg::OutputChunk"**, %"struct.jxl::jpeg::OutputChunk"**, %"class.std::__1::__compressed_pair.94" }
%"class.std::__1::__compressed_pair.94" = type { %"struct.std::__1::__compressed_pair_elem.70", %"struct.std::__1::__compressed_pair_elem.95" }
%"struct.std::__1::__compressed_pair_elem.95" = type { %"class.std::__1::allocator.72"* }
%"class.std::__1::allocator.72" = type { i8 }

$_ZN3jxl4jpeg18SerializationStateD2Ev = comdat any

$_ZNSt3__15dequeIN3jxl4jpeg11OutputChunkENS_9allocatorIS3_EEE19__add_back_capacityEv = comdat any

$_ZNSt3__114__split_bufferIPN3jxl4jpeg11OutputChunkENS_9allocatorIS4_EEE9push_backEOS4_ = comdat any

$_ZNSt3__114__split_bufferIPN3jxl4jpeg11OutputChunkENS_9allocatorIS4_EEE10push_frontEOS4_ = comdat any

$_ZNSt3__114__split_bufferIPN3jxl4jpeg11OutputChunkERNS_9allocatorIS4_EEE10push_frontERKS4_ = comdat any

$_ZNSt3__15dequeIN3jxl4jpeg11OutputChunkENS_9allocatorIS3_EEE12emplace_backIJmEEEvDpOT_ = comdat any

$_ZNSt3__16vectorIiNS_9allocatorIiEEE6insertINS_11__wrap_iterIPKiEEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIiNS_15iterator_traitsISA_E9referenceEEE5valueENS5_IPiEEE4typeES8_SA_SA_ = comdat any

$_ZNSt3__15dequeIN3jxl4jpeg11OutputChunkENS_9allocatorIS3_EEE12emplace_backIJiEEEvDpOT_ = comdat any

$_ZNSt3__112__deque_baseIN3jxl4jpeg11OutputChunkENS_9allocatorIS3_EEE5clearEv = comdat any

$_ZNSt3__16vectorIN3jxl4jpeg16HuffmanCodeTableENS_9allocatorIS3_EEE8__appendEm = comdat any

@.str.1 = private unnamed_addr constant [66 x i8] c"../../third_party/libjxl/src/lib/jxl/jpeg/dec_jpeg_data_writer.cc\00", align 1
@.str.2 = private unnamed_addr constant [23 x i8] c"%s:%d: JXL_ASSERT: %s\0A\00", align 1
@.str.3 = private unnamed_addr constant [24 x i8] c"ss.output_queue.empty()\00", align 1
@_ZN3jxl4jpegL17kJPEGNaturalOrderE = internal unnamed_addr constant [80 x i32] [i32 0, i32 1, i32 8, i32 16, i32 9, i32 2, i32 3, i32 10, i32 17, i32 24, i32 32, i32 25, i32 18, i32 11, i32 4, i32 5, i32 12, i32 19, i32 26, i32 33, i32 40, i32 48, i32 41, i32 34, i32 27, i32 20, i32 13, i32 6, i32 7, i32 14, i32 21, i32 28, i32 35, i32 42, i32 49, i32 56, i32 57, i32 50, i32 43, i32 36, i32 29, i32 22, i32 15, i32 23, i32 30, i32 37, i32 44, i32 51, i32 58, i32 59, i32 52, i32 45, i32 38, i32 31, i32 39, i32 46, i32 53, i32 60, i32 61, i32 54, i32 47, i32 55, i32 62, i32 63, i32 63, i32 63, i32 63, i32 63, i32 63, i32 63, i32 63, i32 63, i32 63, i32 63, i32 63, i32 63, i32 63, i32 63, i32 63, i32 63], align 16

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl4jpeg9WriteJpegERKNS0_8JPEGDataERKNSt3__18functionIFmPKhmEEE(%"struct.jxl::jpeg::JPEGData"* dereferenceable(296), %"class.std::__1::function"* dereferenceable(32)) local_unnamed_addr #0 {
  %3 = alloca i32, align 4
  %4 = alloca [256 x i32], align 16
  %5 = alloca [257 x i32], align 16
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca %"struct.jxl::jpeg::SerializationState", align 8
  %9 = bitcast %"struct.jxl::jpeg::SerializationState"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 336, i8* nonnull %9) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 336, i1 false)
  %10 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %8, i64 0, i32 0
  store i32 0, i32* %10, align 8
  %11 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %8, i64 0, i32 1
  %12 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %8, i64 0, i32 16, i32 0
  store i32 0, i32* %12, align 8
  %13 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %8, i64 0, i32 16, i32 2, i32 3
  %14 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %8, i64 0, i32 16, i32 2, i32 3, i32 2
  %15 = bitcast %"class.std::__1::deque"* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %15, i8 0, i64 146, i1 false) #10
  %16 = tail call i8* @_Znwm(i64 24) #11
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %16, i8 0, i64 24, i1 false) #10
  %17 = bitcast %"class.std::__1::unique_ptr"* %14 to i8**
  store i8* %16, i8** %17, align 8
  %18 = bitcast %"struct.jxl::jpeg::OutputChunk"* %13 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %18, i8 0, i64 16, i1 false) #10
  %19 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %8, i64 0, i32 16, i32 3, i64 0
  %20 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %8, i64 0, i32 16, i32 8, i32 2
  %21 = bitcast %"class.std::__1::vector.86"* %20 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %21, i8 0, i64 24, i1 false) #10
  %22 = bitcast i16* %19 to i64*
  store i64 0, i64* %22, align 8
  %23 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %8, i64 0, i32 2
  %24 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 11
  %25 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 11, i32 0, i32 1
  %26 = bitcast i8** %25 to i64*
  %27 = bitcast %"class.std::__1::vector.0"* %24 to i64*
  %28 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %8, i64 0, i32 7
  %29 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 12
  %30 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 12, i32 0, i32 1
  %31 = bitcast %"class.std::__1::vector.0"** %30 to i64*
  %32 = bitcast %"class.std::__1::vector"* %29 to i64*
  %33 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %8, i64 0, i32 1, i32 0, i32 0, i32 2
  %34 = bitcast %"struct.jxl::jpeg::OutputChunk"*** %33 to i64*
  %35 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %8, i64 0, i32 1, i32 0, i32 0, i32 1
  %36 = bitcast %"struct.jxl::jpeg::OutputChunk"*** %35 to i64*
  %37 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %8, i64 0, i32 1, i32 0, i32 1
  %38 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %8, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %39 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %8, i64 0, i32 6
  %40 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 6
  %41 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 6, i32 0, i32 1
  %42 = bitcast %"class.std::__1::vector.0"** %41 to i64*
  %43 = bitcast %"class.std::__1::vector"* %40 to i64*
  %44 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %40, i64 0, i32 0, i32 0
  %45 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %8, i64 0, i32 5
  %46 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 4
  %47 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 4, i32 0, i32 1
  %48 = bitcast %"class.std::__1::vector.0"** %47 to i64*
  %49 = bitcast %"class.std::__1::vector"* %46 to i64*
  %50 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %46, i64 0, i32 0, i32 0
  %51 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %8, i64 0, i32 13
  %52 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 3
  %53 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %8, i64 0, i32 4
  %54 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 7
  %55 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 7, i32 0, i32 1
  %56 = bitcast %"struct.jxl::jpeg::JPEGQuantTable"** %55 to i64*
  %57 = bitcast %"class.std::__1::vector.15"* %54 to i64*
  %58 = bitcast i32* %3 to i8*
  %59 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %8, i64 0, i32 8
  %60 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 10, i32 0, i32 0
  %61 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %8, i64 0, i32 14
  %62 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 13
  %63 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 13, i32 0, i32 1
  %64 = bitcast i8** %63 to i64*
  %65 = bitcast %"class.std::__1::vector.0"* %62 to i64*
  %66 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 8
  %67 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %8, i64 0, i32 3
  %68 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 8, i32 0, i32 1
  %69 = bitcast %"struct.jxl::jpeg::JPEGHuffmanCode"** %68 to i64*
  %70 = bitcast %"class.std::__1::vector.22"* %66 to i64*
  %71 = bitcast i64* %6 to i8*
  %72 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %8, i64 0, i32 10, i32 0, i32 0
  %73 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %8, i64 0, i32 9, i32 0, i32 0
  %74 = bitcast [256 x i32]* %4 to i8*
  %75 = bitcast [257 x i32]* %5 to i8*
  %76 = getelementptr inbounds [257 x i32], [257 x i32]* %5, i64 0, i64 0
  %77 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 0
  %78 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 9
  %79 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 9, i32 0, i32 1
  %80 = bitcast %"struct.jxl::jpeg::JPEGComponent"** %79 to i64*
  %81 = bitcast %"class.std::__1::vector.31"* %78 to i64*
  %82 = bitcast i64* %7 to i8*
  %83 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 2
  %84 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 1
  %85 = getelementptr inbounds %"class.std::__1::vector.31", %"class.std::__1::vector.31"* %78, i64 0, i32 0, i32 0
  %86 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %1, i64 0, i32 0, i32 1, i32 0
  %87 = getelementptr inbounds %"class.std::__1::function", %"class.std::__1::function"* %1, i64 0, i32 0, i32 0
  %88 = bitcast %"struct.jxl::jpeg::OutputChunk"*** %35 to i8***
  %89 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 11, i32 0, i32 0
  %90 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %8, i64 0, i32 9
  %91 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %8, i64 0, i32 9, i32 0, i32 1
  %92 = bitcast %"struct.jxl::jpeg::HuffmanCodeTable"** %91 to i64*
  %93 = bitcast %"class.std::__1::vector.79"* %90 to i64*
  %94 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %8, i64 0, i32 10
  %95 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %8, i64 0, i32 10, i32 0, i32 1
  %96 = bitcast %"struct.jxl::jpeg::HuffmanCodeTable"** %95 to i64*
  %97 = bitcast %"class.std::__1::vector.79"* %94 to i64*
  %98 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 15
  %99 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 16, i32 0, i32 0
  %100 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %8, i64 0, i32 11
  %101 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 16, i32 0, i32 1
  %102 = bitcast i8** %101 to i64*
  %103 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %8, i64 0, i32 12
  %104 = bitcast i64* %37 to <2 x i64>*
  %105 = bitcast i64* %37 to <2 x i64>*
  %106 = bitcast i64* %37 to <2 x i64>*
  %107 = bitcast i64* %37 to <2 x i64>*
  br label %108

108:                                              ; preds = %1743, %2
  %109 = load i32, i32* %10, align 8
  switch i32 %109, label %1743 [
    i32 0, label %110
    i32 1, label %265
    i32 2, label %1744
    i32 3, label %1750
  ]

110:                                              ; preds = %108
  %111 = load i8*, i8** %89, align 8
  %112 = load i8*, i8** %25, align 8
  %113 = icmp eq i8* %111, %112
  br i1 %113, label %114, label %115

114:                                              ; preds = %110
  store i32 3, i32* %10, align 8
  br label %1743

115:                                              ; preds = %110
  %116 = load i64, i64* %92, align 8
  %117 = load i64, i64* %93, align 8
  %118 = sub i64 %116, %117
  %119 = ashr exact i64 %118, 11
  %120 = icmp ult i64 %119, 4
  %121 = inttoptr i64 %117 to %"struct.jxl::jpeg::HuffmanCodeTable"*
  br i1 %120, label %122, label %124

122:                                              ; preds = %115
  %123 = sub nuw nsw i64 4, %119
  call void @_ZNSt3__16vectorIN3jxl4jpeg16HuffmanCodeTableENS_9allocatorIS3_EEE8__appendEm(%"class.std::__1::vector.79"* %90, i64 %123) #10
  br label %128

124:                                              ; preds = %115
  %125 = icmp eq i64 %118, 8192
  br i1 %125, label %128, label %126

126:                                              ; preds = %124
  %127 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanCodeTable", %"struct.jxl::jpeg::HuffmanCodeTable"* %121, i64 4
  store %"struct.jxl::jpeg::HuffmanCodeTable"* %127, %"struct.jxl::jpeg::HuffmanCodeTable"** %91, align 8
  br label %128

128:                                              ; preds = %124, %122, %126
  %129 = load i64, i64* %96, align 8
  %130 = load i64, i64* %97, align 8
  %131 = sub i64 %129, %130
  %132 = ashr exact i64 %131, 11
  %133 = icmp ult i64 %132, 4
  %134 = inttoptr i64 %130 to %"struct.jxl::jpeg::HuffmanCodeTable"*
  br i1 %133, label %135, label %137

135:                                              ; preds = %128
  %136 = sub nuw nsw i64 4, %132
  call void @_ZNSt3__16vectorIN3jxl4jpeg16HuffmanCodeTableENS_9allocatorIS3_EEE8__appendEm(%"class.std::__1::vector.79"* %94, i64 %136) #10
  br label %141

137:                                              ; preds = %128
  %138 = icmp eq i64 %131, 8192
  br i1 %138, label %141, label %139

139:                                              ; preds = %137
  %140 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanCodeTable", %"struct.jxl::jpeg::HuffmanCodeTable"* %134, i64 4
  store %"struct.jxl::jpeg::HuffmanCodeTable"* %140, %"struct.jxl::jpeg::HuffmanCodeTable"** %95, align 8
  br label %141

141:                                              ; preds = %137, %135, %139
  %142 = load i8, i8* %98, align 4, !range !2
  %143 = icmp eq i8 %142, 0
  br i1 %143, label %150, label %144

144:                                              ; preds = %141
  %145 = load i8*, i8** %99, align 8
  store i8* %145, i8** %100, align 8
  %146 = load i64, i64* %102, align 8
  %147 = ptrtoint i8* %145 to i64
  %148 = sub i64 %146, %147
  %149 = getelementptr inbounds i8, i8* %145, i64 %148
  store i8* %149, i8** %103, align 8
  br label %150

150:                                              ; preds = %141, %144
  %151 = call i8* @_Znwm(i64 24) #11
  %152 = call i8* @_Znwm(i64 2) #11
  %153 = getelementptr inbounds i8, i8* %151, i64 8
  %154 = bitcast i8* %151 to i8**
  store i8* %152, i8** %154, align 8
  %155 = getelementptr inbounds i8, i8* %152, i64 2
  %156 = getelementptr inbounds i8, i8* %151, i64 16
  %157 = bitcast i8* %156 to i8**
  store i8* %155, i8** %157, align 8
  %158 = bitcast i8* %153 to i64*
  %159 = bitcast i8* %152 to i16*
  store i16 -9985, i16* %159, align 1
  %160 = ptrtoint i8* %155 to i64
  store i64 %160, i64* %158, align 8
  %161 = ptrtoint i8* %152 to i64
  %162 = ptrtoint i8* %151 to i64
  %163 = load i64, i64* %34, align 8
  %164 = load i64, i64* %36, align 8
  %165 = sub i64 %163, %164
  %166 = ashr exact i64 %165, 3
  %167 = icmp eq i64 %165, 0
  %168 = mul i64 %166, 170
  %169 = add i64 %168, -1
  %170 = select i1 %167, i64 0, i64 %169
  %171 = load i64, i64* %37, align 8
  %172 = load i64, i64* %38, align 8
  %173 = add i64 %172, %171
  %174 = icmp eq i64 %170, %173
  %175 = inttoptr i64 %164 to %"struct.jxl::jpeg::OutputChunk"**
  %176 = inttoptr i64 %163 to %"struct.jxl::jpeg::OutputChunk"**
  br i1 %174, label %177, label %183

177:                                              ; preds = %150
  call void @_ZNSt3__15dequeIN3jxl4jpeg11OutputChunkENS_9allocatorIS3_EEE19__add_back_capacityEv(%"class.std::__1::deque"* %11) #10
  %178 = load i64, i64* %38, align 8
  %179 = load i64, i64* %37, align 8
  %180 = load %"struct.jxl::jpeg::OutputChunk"**, %"struct.jxl::jpeg::OutputChunk"*** %35, align 8
  %181 = load %"struct.jxl::jpeg::OutputChunk"**, %"struct.jxl::jpeg::OutputChunk"*** %33, align 8
  %182 = add i64 %179, %178
  br label %183

183:                                              ; preds = %177, %150
  %184 = phi i64 [ %182, %177 ], [ %173, %150 ]
  %185 = phi %"struct.jxl::jpeg::OutputChunk"** [ %181, %177 ], [ %176, %150 ]
  %186 = phi %"struct.jxl::jpeg::OutputChunk"** [ %180, %177 ], [ %175, %150 ]
  %187 = icmp eq %"struct.jxl::jpeg::OutputChunk"** %185, %186
  br i1 %187, label %194, label %188

188:                                              ; preds = %183
  %189 = udiv i64 %184, 170
  %190 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %186, i64 %189
  %191 = load %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %190, align 8
  %192 = urem i64 %184, 170
  %193 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk", %"struct.jxl::jpeg::OutputChunk"* %191, i64 %192
  br label %194

194:                                              ; preds = %183, %188
  %195 = phi %"struct.jxl::jpeg::OutputChunk"* [ %193, %188 ], [ null, %183 ]
  %196 = bitcast %"struct.jxl::jpeg::OutputChunk"* %195 to i64*
  store i64 %161, i64* %196, align 8
  %197 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk", %"struct.jxl::jpeg::OutputChunk"* %195, i64 0, i32 1
  store i64 2, i64* %197, align 8
  %198 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk", %"struct.jxl::jpeg::OutputChunk"* %195, i64 0, i32 2
  %199 = bitcast %"class.std::__1::unique_ptr"* %198 to i64*
  store i64 %162, i64* %199, align 8
  %200 = load i64, i64* %38, align 8
  %201 = add i64 %200, 1
  store i64 %201, i64* %38, align 8
  %202 = load i32, i32* %10, align 8
  %203 = icmp eq i32 %202, 3
  %204 = icmp eq i64 %201, 0
  %205 = or i1 %204, %203
  br i1 %205, label %264, label %206

206:                                              ; preds = %194, %261
  %207 = load %"struct.jxl::jpeg::OutputChunk"**, %"struct.jxl::jpeg::OutputChunk"*** %35, align 8
  %208 = load i64, i64* %37, align 8
  %209 = udiv i64 %208, 170
  %210 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %207, i64 %209
  %211 = load %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %210, align 8
  %212 = urem i64 %208, 170
  %213 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk", %"struct.jxl::jpeg::OutputChunk"* %211, i64 %212, i32 0
  %214 = load i8*, i8** %213, align 8
  %215 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk", %"struct.jxl::jpeg::OutputChunk"* %211, i64 %212, i32 1
  %216 = load i64, i64* %215, align 8
  %217 = load i64 (%"union.std::__1::__function::__policy_storage"*, i8*, i64)*, i64 (%"union.std::__1::__function::__policy_storage"*, i8*, i64)** %86, align 8
  %218 = call i64 %217(%"union.std::__1::__function::__policy_storage"* %87, i8* %214, i64 %216) #10
  %219 = icmp ne i64 %218, 0
  %220 = load i64, i64* %215, align 8
  %221 = icmp eq i64 %220, 0
  %222 = or i1 %219, %221
  br i1 %222, label %223, label %1750

223:                                              ; preds = %206
  %224 = sub i64 %220, %218
  store i64 %224, i64* %215, align 8
  %225 = icmp eq i64 %224, 0
  br i1 %225, label %226, label %259

226:                                              ; preds = %223
  %227 = load %"struct.jxl::jpeg::OutputChunk"**, %"struct.jxl::jpeg::OutputChunk"*** %35, align 8
  %228 = load i64, i64* %37, align 8
  %229 = udiv i64 %228, 170
  %230 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %227, i64 %229
  %231 = load %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %230, align 8
  %232 = urem i64 %228, 170
  %233 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk", %"struct.jxl::jpeg::OutputChunk"* %231, i64 %232, i32 2, i32 0, i32 0, i32 0
  %234 = load %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"** %233, align 8
  store %"class.std::__1::vector.0"* null, %"class.std::__1::vector.0"** %233, align 8
  %235 = icmp eq %"class.std::__1::vector.0"* %234, null
  br i1 %235, label %246, label %236

236:                                              ; preds = %226
  %237 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %234, i64 0, i32 0, i32 0
  %238 = load i8*, i8** %237, align 8
  %239 = icmp eq i8* %238, null
  br i1 %239, label %244, label %240

240:                                              ; preds = %236
  %241 = ptrtoint i8* %238 to i64
  %242 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %234, i64 0, i32 0, i32 1
  %243 = bitcast i8** %242 to i64*
  store i64 %241, i64* %243, align 8
  call void @_ZdlPv(i8* nonnull %238) #11
  br label %244

244:                                              ; preds = %240, %236
  %245 = bitcast %"class.std::__1::vector.0"* %234 to i8*
  call void @_ZdlPv(i8* %245) #11
  br label %246

246:                                              ; preds = %244, %226
  %247 = load <2 x i64>, <2 x i64>* %106, align 8
  %248 = add <2 x i64> %247, <i64 1, i64 -1>
  store <2 x i64> %248, <2 x i64>* %107, align 8
  %249 = extractelement <2 x i64> %248, i32 0
  %250 = icmp ult i64 %249, 340
  %251 = extractelement <2 x i64> %248, i32 1
  br i1 %250, label %261, label %252

252:                                              ; preds = %246
  %253 = load i8**, i8*** %88, align 8
  %254 = load i8*, i8** %253, align 8
  call void @_ZdlPv(i8* %254) #11
  %255 = load %"struct.jxl::jpeg::OutputChunk"**, %"struct.jxl::jpeg::OutputChunk"*** %35, align 8
  %256 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %255, i64 1
  store %"struct.jxl::jpeg::OutputChunk"** %256, %"struct.jxl::jpeg::OutputChunk"*** %35, align 8
  %257 = load i64, i64* %37, align 8
  %258 = add i64 %257, -170
  store i64 %258, i64* %37, align 8
  br label %259

259:                                              ; preds = %223, %252
  %260 = load i64, i64* %38, align 8
  br label %261

261:                                              ; preds = %259, %246
  %262 = phi i64 [ %260, %259 ], [ %251, %246 ]
  %263 = icmp eq i64 %262, 0
  br i1 %263, label %264, label %206

264:                                              ; preds = %261, %194
  store i32 1, i32* %10, align 8
  br label %1743

265:                                              ; preds = %108
  %266 = load i64, i64* %23, align 8
  %267 = load i64, i64* %26, align 8
  %268 = load i64, i64* %27, align 8
  %269 = sub i64 %267, %268
  %270 = icmp ult i64 %266, %269
  br i1 %270, label %272, label %271

271:                                              ; preds = %265
  store i32 2, i32* %10, align 8
  br label %1743

272:                                              ; preds = %265
  %273 = inttoptr i64 %268 to i8*
  %274 = getelementptr inbounds i8, i8* %273, i64 %266
  %275 = load i8, i8* %274, align 1
  switch i8 %275, label %1672 [
    i8 -64, label %276
    i8 -63, label %276
    i8 -62, label %276
    i8 -55, label %276
    i8 -54, label %276
    i8 -60, label %363
    i8 -48, label %1069
    i8 -47, label %1069
    i8 -46, label %1069
    i8 -45, label %1069
    i8 -44, label %1069
    i8 -43, label %1069
    i8 -42, label %1069
    i8 -41, label %1069
    i8 -39, label %1121
    i8 -38, label %1215
    i8 -37, label %1244
    i8 -35, label %1337
    i8 -32, label %1397
    i8 -31, label %1397
    i8 -30, label %1397
    i8 -29, label %1397
    i8 -28, label %1397
    i8 -27, label %1397
    i8 -26, label %1397
    i8 -25, label %1397
    i8 -24, label %1397
    i8 -23, label %1397
    i8 -22, label %1397
    i8 -21, label %1397
    i8 -20, label %1397
    i8 -19, label %1397
    i8 -18, label %1397
    i8 -17, label %1397
    i8 -2, label %1504
    i8 -1, label %1611
  ]

276:                                              ; preds = %272, %272, %272, %272, %272
  %277 = icmp ult i8 %275, -61
  br i1 %277, label %278, label %281

278:                                              ; preds = %276
  %279 = icmp eq i8 %275, -62
  %280 = zext i1 %279 to i8
  store i8 %280, i8* %61, align 1
  br label %281

281:                                              ; preds = %278, %276
  %282 = load i64, i64* %80, align 8
  %283 = load i64, i64* %81, align 8
  %284 = sub i64 %282, %283
  %285 = sdiv exact i64 %284, 48
  %286 = mul nsw i64 %285, 3
  %287 = add nsw i64 %286, 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %82) #10
  %288 = add nsw i64 %286, 10
  store i64 %288, i64* %7, align 8
  call void @_ZNSt3__15dequeIN3jxl4jpeg11OutputChunkENS_9allocatorIS3_EEE12emplace_backIJmEEEvDpOT_(%"class.std::__1::deque"* %11, i64* nonnull dereferenceable(8) %7) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %82) #10
  %289 = load i64, i64* %38, align 8
  %290 = load i64, i64* %37, align 8
  %291 = add i64 %289, -1
  %292 = add i64 %291, %290
  %293 = load %"struct.jxl::jpeg::OutputChunk"**, %"struct.jxl::jpeg::OutputChunk"*** %35, align 8
  %294 = udiv i64 %292, 170
  %295 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %293, i64 %294
  %296 = load %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %295, align 8
  %297 = urem i64 %292, 170
  %298 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk", %"struct.jxl::jpeg::OutputChunk"* %296, i64 %297, i32 2, i32 0, i32 0, i32 0
  %299 = load %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"** %298, align 8
  %300 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %299, i64 0, i32 0, i32 0
  %301 = load i8*, i8** %300, align 8
  store i8 -1, i8* %301, align 1
  %302 = getelementptr inbounds i8, i8* %301, i64 1
  store i8 %275, i8* %302, align 1
  %303 = lshr i64 %287, 8
  %304 = trunc i64 %303 to i8
  %305 = getelementptr inbounds i8, i8* %301, i64 2
  store i8 %304, i8* %305, align 1
  %306 = trunc i64 %287 to i8
  %307 = getelementptr inbounds i8, i8* %301, i64 3
  store i8 %306, i8* %307, align 1
  %308 = getelementptr inbounds i8, i8* %301, i64 4
  store i8 8, i8* %308, align 1
  %309 = load i32, i32* %83, align 4
  %310 = lshr i32 %309, 8
  %311 = trunc i32 %310 to i8
  %312 = getelementptr inbounds i8, i8* %301, i64 5
  store i8 %311, i8* %312, align 1
  %313 = load i32, i32* %83, align 4
  %314 = trunc i32 %313 to i8
  %315 = getelementptr inbounds i8, i8* %301, i64 6
  store i8 %314, i8* %315, align 1
  %316 = load i32, i32* %84, align 8
  %317 = lshr i32 %316, 8
  %318 = trunc i32 %317 to i8
  %319 = getelementptr inbounds i8, i8* %301, i64 7
  store i8 %318, i8* %319, align 1
  %320 = load i32, i32* %84, align 8
  %321 = trunc i32 %320 to i8
  %322 = getelementptr inbounds i8, i8* %301, i64 8
  store i8 %321, i8* %322, align 1
  %323 = trunc i64 %285 to i8
  %324 = getelementptr inbounds i8, i8* %301, i64 9
  store i8 %323, i8* %324, align 1
  %325 = icmp eq i64 %284, 0
  br i1 %325, label %1673, label %326

326:                                              ; preds = %281, %353
  %327 = phi i64 [ %361, %353 ], [ 0, %281 ]
  %328 = phi i64 [ %359, %353 ], [ 10, %281 ]
  %329 = load %"struct.jxl::jpeg::JPEGComponent"*, %"struct.jxl::jpeg::JPEGComponent"** %85, align 8
  %330 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %329, i64 %327, i32 0
  %331 = load i32, i32* %330, align 8
  %332 = trunc i32 %331 to i8
  %333 = add i64 %328, 1
  %334 = getelementptr inbounds i8, i8* %301, i64 %328
  store i8 %332, i8* %334, align 1
  %335 = load %"struct.jxl::jpeg::JPEGComponent"*, %"struct.jxl::jpeg::JPEGComponent"** %85, align 8
  %336 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %335, i64 %327, i32 1
  %337 = load i32, i32* %336, align 4
  %338 = shl i32 %337, 4
  %339 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %335, i64 %327, i32 2
  %340 = load i32, i32* %339, align 8
  %341 = or i32 %338, %340
  %342 = trunc i32 %341 to i8
  %343 = getelementptr inbounds i8, i8* %301, i64 %333
  store i8 %342, i8* %343, align 1
  %344 = load %"struct.jxl::jpeg::JPEGComponent"*, %"struct.jxl::jpeg::JPEGComponent"** %85, align 8
  %345 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %344, i64 %327, i32 3
  %346 = load i32, i32* %345, align 4
  %347 = zext i32 %346 to i64
  %348 = load i64, i64* %56, align 8
  %349 = load i64, i64* %57, align 8
  %350 = sub i64 %348, %349
  %351 = sdiv exact i64 %350, 268
  %352 = icmp ugt i64 %351, %347
  br i1 %352, label %353, label %1672

353:                                              ; preds = %326
  %354 = inttoptr i64 %349 to %"struct.jxl::jpeg::JPEGQuantTable"*
  %355 = add i64 %328, 2
  %356 = getelementptr inbounds %"struct.jxl::jpeg::JPEGQuantTable", %"struct.jxl::jpeg::JPEGQuantTable"* %354, i64 %347, i32 2
  %357 = load i32, i32* %356, align 4
  %358 = trunc i32 %357 to i8
  %359 = add i64 %328, 3
  %360 = getelementptr inbounds i8, i8* %301, i64 %355
  store i8 %358, i8* %360, align 1
  %361 = add nuw i64 %327, 1
  %362 = icmp ult i64 %361, %285
  br i1 %362, label %326, label %1673

363:                                              ; preds = %272
  %364 = load i32, i32* %67, align 8
  %365 = sext i32 %364 to i64
  %366 = load i64, i64* %69, align 8
  %367 = load i64, i64* %70, align 8
  %368 = sub i64 %366, %367
  %369 = sdiv exact i64 %368, 1104
  %370 = icmp ugt i64 %369, %365
  %371 = inttoptr i64 %367 to %"struct.jxl::jpeg::JPEGHuffmanCode"*
  br i1 %370, label %372, label %400

372:                                              ; preds = %363, %372
  %373 = phi i64 [ %397, %372 ], [ %365, %363 ]
  %374 = phi i64 [ %393, %372 ], [ 2, %363 ]
  %375 = add i64 %374, 16
  %376 = getelementptr inbounds %"struct.jxl::jpeg::JPEGHuffmanCode", %"struct.jxl::jpeg::JPEGHuffmanCode"* %371, i64 %373, i32 0, i32 0, i64 0
  %377 = bitcast i32* %376 to <16 x i32>*
  %378 = load <16 x i32>, <16 x i32>* %377, align 4
  %379 = zext <16 x i32> %378 to <16 x i64>
  %380 = getelementptr inbounds %"struct.jxl::jpeg::JPEGHuffmanCode", %"struct.jxl::jpeg::JPEGHuffmanCode"* %371, i64 %373, i32 0, i32 0, i64 16
  %381 = load i32, i32* %380, align 4
  %382 = zext i32 %381 to i64
  %383 = shufflevector <16 x i64> %379, <16 x i64> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %384 = add <16 x i64> %383, %379
  %385 = shufflevector <16 x i64> %384, <16 x i64> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %386 = add <16 x i64> %384, %385
  %387 = shufflevector <16 x i64> %386, <16 x i64> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %388 = add <16 x i64> %386, %387
  %389 = shufflevector <16 x i64> %388, <16 x i64> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %390 = add <16 x i64> %388, %389
  %391 = extractelement <16 x i64> %390, i32 0
  %392 = add i64 %391, %382
  %393 = add i64 %392, %375
  %394 = getelementptr inbounds %"struct.jxl::jpeg::JPEGHuffmanCode", %"struct.jxl::jpeg::JPEGHuffmanCode"* %371, i64 %373, i32 3
  %395 = load i8, i8* %394, align 4, !range !2
  %396 = icmp eq i8 %395, 0
  %397 = add nuw i64 %373, 1
  %398 = icmp ult i64 %397, %369
  %399 = and i1 %398, %396
  br i1 %399, label %372, label %400

400:                                              ; preds = %372, %363
  %401 = phi i64 [ 2, %363 ], [ %393, %372 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %71) #10
  %402 = add i64 %401, 2
  store i64 %402, i64* %6, align 8
  call void @_ZNSt3__15dequeIN3jxl4jpeg11OutputChunkENS_9allocatorIS3_EEE12emplace_backIJmEEEvDpOT_(%"class.std::__1::deque"* %11, i64* nonnull dereferenceable(8) %6) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %71) #10
  %403 = load i64, i64* %38, align 8
  %404 = load i64, i64* %37, align 8
  %405 = add i64 %403, -1
  %406 = add i64 %405, %404
  %407 = load %"struct.jxl::jpeg::OutputChunk"**, %"struct.jxl::jpeg::OutputChunk"*** %35, align 8
  %408 = udiv i64 %406, 170
  %409 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %407, i64 %408
  %410 = load %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %409, align 8
  %411 = urem i64 %406, 170
  %412 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk", %"struct.jxl::jpeg::OutputChunk"* %410, i64 %411, i32 2, i32 0, i32 0, i32 0
  %413 = load %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"** %412, align 8
  %414 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %413, i64 0, i32 0, i32 0
  %415 = load i8*, i8** %414, align 8
  store i8 -1, i8* %415, align 1
  %416 = getelementptr inbounds i8, i8* %415, i64 1
  store i8 -60, i8* %416, align 1
  %417 = lshr i64 %401, 8
  %418 = trunc i64 %417 to i8
  %419 = getelementptr inbounds i8, i8* %415, i64 2
  store i8 %418, i8* %419, align 1
  %420 = trunc i64 %401 to i8
  %421 = getelementptr inbounds i8, i8* %415, i64 3
  store i8 %420, i8* %421, align 1
  %422 = getelementptr i8, i8* %415, i64 17
  %423 = getelementptr i8, i8* %415, i64 16
  br label %424

424:                                              ; preds = %1036, %400
  %425 = phi i64 [ 4, %400 ], [ %1037, %1036 ]
  %426 = load i32, i32* %67, align 8
  %427 = add nsw i32 %426, 1
  store i32 %427, i32* %67, align 8
  %428 = sext i32 %426 to i64
  %429 = load i64, i64* %69, align 8
  %430 = load i64, i64* %70, align 8
  %431 = sub i64 %429, %430
  %432 = sdiv exact i64 %431, 1104
  %433 = icmp ugt i64 %432, %428
  %434 = inttoptr i64 %430 to %"struct.jxl::jpeg::JPEGHuffmanCode"*
  br i1 %433, label %435, label %1672

435:                                              ; preds = %424
  %436 = getelementptr inbounds %"struct.jxl::jpeg::JPEGHuffmanCode", %"struct.jxl::jpeg::JPEGHuffmanCode"* %434, i64 %428, i32 2
  %437 = load i32, i32* %436, align 4
  %438 = sext i32 %437 to i64
  %439 = and i64 %438, 16
  %440 = icmp eq i64 %439, 0
  %441 = add nsw i64 %438, -16
  %442 = select i1 %440, i64 %438, i64 %441
  %443 = load %"struct.jxl::jpeg::HuffmanCodeTable"*, %"struct.jxl::jpeg::HuffmanCodeTable"** %73, align 8
  %444 = load %"struct.jxl::jpeg::HuffmanCodeTable"*, %"struct.jxl::jpeg::HuffmanCodeTable"** %72, align 8
  %445 = select i1 %440, %"struct.jxl::jpeg::HuffmanCodeTable"* %443, %"struct.jxl::jpeg::HuffmanCodeTable"* %444
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %74) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %74, i8 -86, i64 1024, i1 false) #10
  call void @llvm.lifetime.start.p0i8(i64 1028, i8* nonnull %75) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %75, i8 -86, i64 1028, i1 false) #10
  br label %446

446:                                              ; preds = %537, %435
  %447 = phi i64 [ 1, %435 ], [ %539, %537 ]
  %448 = phi i32 [ 0, %435 ], [ %538, %537 ]
  %449 = getelementptr inbounds %"struct.jxl::jpeg::JPEGHuffmanCode", %"struct.jxl::jpeg::JPEGHuffmanCode"* %434, i64 %428, i32 0, i32 0, i64 %447
  %450 = load i32, i32* %449, align 4
  %451 = add nsw i32 %450, %448
  %452 = icmp sgt i32 %451, 257
  br i1 %452, label %453, label %454

453:                                              ; preds = %446
  call void @llvm.lifetime.end.p0i8(i64 1028, i8* nonnull %75) #10
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %74) #10
  br label %1672

454:                                              ; preds = %446
  %455 = icmp eq i32 %450, 0
  br i1 %455, label %537, label %456

456:                                              ; preds = %454
  %457 = trunc i64 %447 to i32
  %458 = sext i32 %448 to i64
  %459 = add nsw i32 %450, -1
  %460 = zext i32 %459 to i64
  %461 = add nuw nsw i64 %460, 1
  %462 = icmp ult i64 %461, 8
  br i1 %462, label %524, label %463

463:                                              ; preds = %456
  %464 = and i64 %461, 8589934584
  %465 = add nsw i64 %464, %458
  %466 = trunc i64 %464 to i32
  %467 = sub i32 %450, %466
  %468 = insertelement <4 x i32> undef, i32 %457, i32 0
  %469 = shufflevector <4 x i32> %468, <4 x i32> undef, <4 x i32> zeroinitializer
  %470 = insertelement <4 x i32> undef, i32 %457, i32 0
  %471 = shufflevector <4 x i32> %470, <4 x i32> undef, <4 x i32> zeroinitializer
  %472 = add nsw i64 %464, -8
  %473 = lshr exact i64 %472, 3
  %474 = add nuw nsw i64 %473, 1
  %475 = and i64 %474, 3
  %476 = icmp ult i64 %472, 24
  br i1 %476, label %508, label %477

477:                                              ; preds = %463
  %478 = sub nsw i64 %474, %475
  br label %479

479:                                              ; preds = %479, %477
  %480 = phi i64 [ 0, %477 ], [ %505, %479 ]
  %481 = phi i64 [ %478, %477 ], [ %506, %479 ]
  %482 = add i64 %480, %458
  %483 = getelementptr inbounds [257 x i32], [257 x i32]* %5, i64 0, i64 %482
  %484 = bitcast i32* %483 to <4 x i32>*
  store <4 x i32> %469, <4 x i32>* %484, align 4
  %485 = getelementptr inbounds i32, i32* %483, i64 4
  %486 = bitcast i32* %485 to <4 x i32>*
  store <4 x i32> %471, <4 x i32>* %486, align 4
  %487 = or i64 %480, 8
  %488 = add i64 %487, %458
  %489 = getelementptr inbounds [257 x i32], [257 x i32]* %5, i64 0, i64 %488
  %490 = bitcast i32* %489 to <4 x i32>*
  store <4 x i32> %469, <4 x i32>* %490, align 4
  %491 = getelementptr inbounds i32, i32* %489, i64 4
  %492 = bitcast i32* %491 to <4 x i32>*
  store <4 x i32> %471, <4 x i32>* %492, align 4
  %493 = or i64 %480, 16
  %494 = add i64 %493, %458
  %495 = getelementptr inbounds [257 x i32], [257 x i32]* %5, i64 0, i64 %494
  %496 = bitcast i32* %495 to <4 x i32>*
  store <4 x i32> %469, <4 x i32>* %496, align 4
  %497 = getelementptr inbounds i32, i32* %495, i64 4
  %498 = bitcast i32* %497 to <4 x i32>*
  store <4 x i32> %471, <4 x i32>* %498, align 4
  %499 = or i64 %480, 24
  %500 = add i64 %499, %458
  %501 = getelementptr inbounds [257 x i32], [257 x i32]* %5, i64 0, i64 %500
  %502 = bitcast i32* %501 to <4 x i32>*
  store <4 x i32> %469, <4 x i32>* %502, align 4
  %503 = getelementptr inbounds i32, i32* %501, i64 4
  %504 = bitcast i32* %503 to <4 x i32>*
  store <4 x i32> %471, <4 x i32>* %504, align 4
  %505 = add i64 %480, 32
  %506 = add i64 %481, -4
  %507 = icmp eq i64 %506, 0
  br i1 %507, label %508, label %479, !llvm.loop !3

508:                                              ; preds = %479, %463
  %509 = phi i64 [ 0, %463 ], [ %505, %479 ]
  %510 = icmp eq i64 %475, 0
  br i1 %510, label %522, label %511

511:                                              ; preds = %508, %511
  %512 = phi i64 [ %519, %511 ], [ %509, %508 ]
  %513 = phi i64 [ %520, %511 ], [ %475, %508 ]
  %514 = add i64 %512, %458
  %515 = getelementptr inbounds [257 x i32], [257 x i32]* %5, i64 0, i64 %514
  %516 = bitcast i32* %515 to <4 x i32>*
  store <4 x i32> %469, <4 x i32>* %516, align 4
  %517 = getelementptr inbounds i32, i32* %515, i64 4
  %518 = bitcast i32* %517 to <4 x i32>*
  store <4 x i32> %471, <4 x i32>* %518, align 4
  %519 = add i64 %512, 8
  %520 = add i64 %513, -1
  %521 = icmp eq i64 %520, 0
  br i1 %521, label %522, label %511, !llvm.loop !5

522:                                              ; preds = %511, %508
  %523 = icmp eq i64 %461, %464
  br i1 %523, label %534, label %524

524:                                              ; preds = %522, %456
  %525 = phi i64 [ %458, %456 ], [ %465, %522 ]
  %526 = phi i32 [ %450, %456 ], [ %467, %522 ]
  br label %527

527:                                              ; preds = %524, %527
  %528 = phi i64 [ %531, %527 ], [ %525, %524 ]
  %529 = phi i32 [ %530, %527 ], [ %526, %524 ]
  %530 = add nsw i32 %529, -1
  %531 = add nsw i64 %528, 1
  %532 = getelementptr inbounds [257 x i32], [257 x i32]* %5, i64 0, i64 %528
  store i32 %457, i32* %532, align 4
  %533 = icmp eq i32 %530, 0
  br i1 %533, label %534, label %527, !llvm.loop !7

534:                                              ; preds = %527, %522
  %535 = phi i64 [ %465, %522 ], [ %531, %527 ]
  %536 = trunc i64 %535 to i32
  br label %537

537:                                              ; preds = %534, %454
  %538 = phi i32 [ %448, %454 ], [ %536, %534 ]
  %539 = add nuw nsw i64 %447, 1
  %540 = icmp eq i64 %539, 17
  br i1 %540, label %541, label %446

541:                                              ; preds = %537
  %542 = icmp eq i32 %538, 0
  br i1 %542, label %634, label %543

543:                                              ; preds = %541
  %544 = add i32 %538, -1
  %545 = sext i32 %544 to i64
  %546 = getelementptr inbounds [257 x i32], [257 x i32]* %5, i64 0, i64 %545
  store i32 0, i32* %546, align 4
  %547 = load i32, i32* %76, align 16
  %548 = icmp eq i32 %547, 0
  br i1 %548, label %557, label %549

549:                                              ; preds = %543, %589
  %550 = phi i32 [ %590, %589 ], [ %547, %543 ]
  %551 = phi i32 [ %594, %589 ], [ %547, %543 ]
  %552 = phi i32 [ %593, %589 ], [ 0, %543 ]
  %553 = phi i32 [ %591, %589 ], [ 0, %543 ]
  %554 = icmp eq i32 %550, %551
  br i1 %554, label %555, label %589

555:                                              ; preds = %549
  %556 = sext i32 %553 to i64
  br label %574

557:                                              ; preds = %589, %543
  %558 = icmp sgt i32 %544, 0
  br i1 %558, label %559, label %634

559:                                              ; preds = %557
  %560 = getelementptr inbounds %"struct.jxl::jpeg::JPEGHuffmanCode", %"struct.jxl::jpeg::JPEGHuffmanCode"* %434, i64 %428, i32 1, i32 0, i64 0
  %561 = load i32, i32* %560, align 4
  %562 = sext i32 %561 to i64
  %563 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanCodeTable", %"struct.jxl::jpeg::HuffmanCodeTable"* %445, i64 %442, i32 0, i64 %562
  store i32 %547, i32* %563, align 4
  %564 = load i32, i32* %77, align 16
  %565 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanCodeTable", %"struct.jxl::jpeg::HuffmanCodeTable"* %445, i64 %442, i32 1, i64 %562
  store i32 %564, i32* %565, align 4
  %566 = icmp eq i32 %544, 1
  br i1 %566, label %634, label %567

567:                                              ; preds = %559
  %568 = zext i32 %544 to i64
  %569 = add nsw i64 %568, -1
  %570 = and i64 %569, 1
  %571 = icmp eq i32 %544, 2
  br i1 %571, label %621, label %572

572:                                              ; preds = %567
  %573 = sub nsw i64 %569, %570
  br label %596

574:                                              ; preds = %574, %555
  %575 = phi i64 [ %556, %555 ], [ %577, %574 ]
  %576 = phi i32 [ %552, %555 ], [ %579, %574 ]
  %577 = add nsw i64 %575, 1
  %578 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 %575
  store i32 %576, i32* %578, align 4
  %579 = add nsw i32 %576, 1
  %580 = getelementptr inbounds [257 x i32], [257 x i32]* %5, i64 0, i64 %577
  %581 = load i32, i32* %580, align 4
  %582 = icmp eq i32 %581, %550
  br i1 %582, label %574, label %583

583:                                              ; preds = %574
  %584 = trunc i64 %577 to i32
  %585 = shl i64 %577, 32
  %586 = ashr exact i64 %585, 32
  %587 = getelementptr inbounds [257 x i32], [257 x i32]* %5, i64 0, i64 %586
  %588 = load i32, i32* %587, align 4
  br label %589

589:                                              ; preds = %583, %549
  %590 = phi i32 [ %588, %583 ], [ %550, %549 ]
  %591 = phi i32 [ %584, %583 ], [ %553, %549 ]
  %592 = phi i32 [ %579, %583 ], [ %552, %549 ]
  %593 = shl i32 %592, 1
  %594 = add i32 %551, 1
  %595 = icmp eq i32 %590, 0
  br i1 %595, label %557, label %549

596:                                              ; preds = %596, %572
  %597 = phi i64 [ 1, %572 ], [ %618, %596 ]
  %598 = phi i64 [ %573, %572 ], [ %619, %596 ]
  %599 = getelementptr inbounds [257 x i32], [257 x i32]* %5, i64 0, i64 %597
  %600 = load i32, i32* %599, align 4
  %601 = getelementptr inbounds %"struct.jxl::jpeg::JPEGHuffmanCode", %"struct.jxl::jpeg::JPEGHuffmanCode"* %434, i64 %428, i32 1, i32 0, i64 %597
  %602 = load i32, i32* %601, align 4
  %603 = sext i32 %602 to i64
  %604 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanCodeTable", %"struct.jxl::jpeg::HuffmanCodeTable"* %445, i64 %442, i32 0, i64 %603
  store i32 %600, i32* %604, align 4
  %605 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 %597
  %606 = load i32, i32* %605, align 4
  %607 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanCodeTable", %"struct.jxl::jpeg::HuffmanCodeTable"* %445, i64 %442, i32 1, i64 %603
  store i32 %606, i32* %607, align 4
  %608 = add nuw nsw i64 %597, 1
  %609 = getelementptr inbounds [257 x i32], [257 x i32]* %5, i64 0, i64 %608
  %610 = load i32, i32* %609, align 4
  %611 = getelementptr inbounds %"struct.jxl::jpeg::JPEGHuffmanCode", %"struct.jxl::jpeg::JPEGHuffmanCode"* %434, i64 %428, i32 1, i32 0, i64 %608
  %612 = load i32, i32* %611, align 4
  %613 = sext i32 %612 to i64
  %614 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanCodeTable", %"struct.jxl::jpeg::HuffmanCodeTable"* %445, i64 %442, i32 0, i64 %613
  store i32 %610, i32* %614, align 4
  %615 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 %608
  %616 = load i32, i32* %615, align 4
  %617 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanCodeTable", %"struct.jxl::jpeg::HuffmanCodeTable"* %445, i64 %442, i32 1, i64 %613
  store i32 %616, i32* %617, align 4
  %618 = add nuw nsw i64 %597, 2
  %619 = add i64 %598, -2
  %620 = icmp eq i64 %619, 0
  br i1 %620, label %621, label %596

621:                                              ; preds = %596, %567
  %622 = phi i64 [ 1, %567 ], [ %618, %596 ]
  %623 = icmp eq i64 %570, 0
  br i1 %623, label %634, label %624

624:                                              ; preds = %621
  %625 = getelementptr inbounds [257 x i32], [257 x i32]* %5, i64 0, i64 %622
  %626 = load i32, i32* %625, align 4
  %627 = getelementptr inbounds %"struct.jxl::jpeg::JPEGHuffmanCode", %"struct.jxl::jpeg::JPEGHuffmanCode"* %434, i64 %428, i32 1, i32 0, i64 %622
  %628 = load i32, i32* %627, align 4
  %629 = sext i32 %628 to i64
  %630 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanCodeTable", %"struct.jxl::jpeg::HuffmanCodeTable"* %445, i64 %442, i32 0, i64 %629
  store i32 %626, i32* %630, align 4
  %631 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 %622
  %632 = load i32, i32* %631, align 4
  %633 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanCodeTable", %"struct.jxl::jpeg::HuffmanCodeTable"* %445, i64 %442, i32 1, i64 %629
  store i32 %632, i32* %633, align 4
  br label %634

634:                                              ; preds = %624, %621, %559, %557, %541
  call void @llvm.lifetime.end.p0i8(i64 1028, i8* nonnull %75) #10
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %74) #10
  %635 = getelementptr inbounds %"struct.jxl::jpeg::JPEGHuffmanCode", %"struct.jxl::jpeg::JPEGHuffmanCode"* %434, i64 %428, i32 0, i32 0, i64 0
  %636 = load i32, i32* %635, align 4
  %637 = zext i32 %636 to i64
  %638 = getelementptr inbounds %"struct.jxl::jpeg::JPEGHuffmanCode", %"struct.jxl::jpeg::JPEGHuffmanCode"* %434, i64 %428, i32 0, i32 0, i64 1
  %639 = load i32, i32* %638, align 4
  %640 = icmp ne i32 %639, 0
  %641 = zext i1 %640 to i64
  %642 = zext i32 %639 to i64
  %643 = getelementptr inbounds %"struct.jxl::jpeg::JPEGHuffmanCode", %"struct.jxl::jpeg::JPEGHuffmanCode"* %434, i64 %428, i32 0, i32 0, i64 2
  %644 = load i32, i32* %643, align 4
  %645 = icmp eq i32 %644, 0
  %646 = select i1 %645, i64 %641, i64 2
  %647 = zext i32 %644 to i64
  %648 = getelementptr inbounds %"struct.jxl::jpeg::JPEGHuffmanCode", %"struct.jxl::jpeg::JPEGHuffmanCode"* %434, i64 %428, i32 0, i32 0, i64 3
  %649 = load i32, i32* %648, align 4
  %650 = icmp eq i32 %649, 0
  %651 = select i1 %650, i64 %646, i64 3
  %652 = zext i32 %649 to i64
  %653 = getelementptr inbounds %"struct.jxl::jpeg::JPEGHuffmanCode", %"struct.jxl::jpeg::JPEGHuffmanCode"* %434, i64 %428, i32 0, i32 0, i64 4
  %654 = load i32, i32* %653, align 4
  %655 = icmp eq i32 %654, 0
  %656 = select i1 %655, i64 %651, i64 4
  %657 = zext i32 %654 to i64
  %658 = getelementptr inbounds %"struct.jxl::jpeg::JPEGHuffmanCode", %"struct.jxl::jpeg::JPEGHuffmanCode"* %434, i64 %428, i32 0, i32 0, i64 5
  %659 = load i32, i32* %658, align 4
  %660 = icmp eq i32 %659, 0
  %661 = select i1 %660, i64 %656, i64 5
  %662 = zext i32 %659 to i64
  %663 = getelementptr inbounds %"struct.jxl::jpeg::JPEGHuffmanCode", %"struct.jxl::jpeg::JPEGHuffmanCode"* %434, i64 %428, i32 0, i32 0, i64 6
  %664 = load i32, i32* %663, align 4
  %665 = icmp eq i32 %664, 0
  %666 = select i1 %665, i64 %661, i64 6
  %667 = zext i32 %664 to i64
  %668 = getelementptr inbounds %"struct.jxl::jpeg::JPEGHuffmanCode", %"struct.jxl::jpeg::JPEGHuffmanCode"* %434, i64 %428, i32 0, i32 0, i64 7
  %669 = load i32, i32* %668, align 4
  %670 = icmp eq i32 %669, 0
  %671 = select i1 %670, i64 %666, i64 7
  %672 = zext i32 %669 to i64
  %673 = getelementptr inbounds %"struct.jxl::jpeg::JPEGHuffmanCode", %"struct.jxl::jpeg::JPEGHuffmanCode"* %434, i64 %428, i32 0, i32 0, i64 8
  %674 = load i32, i32* %673, align 4
  %675 = icmp eq i32 %674, 0
  %676 = select i1 %675, i64 %671, i64 8
  %677 = zext i32 %674 to i64
  %678 = getelementptr inbounds %"struct.jxl::jpeg::JPEGHuffmanCode", %"struct.jxl::jpeg::JPEGHuffmanCode"* %434, i64 %428, i32 0, i32 0, i64 9
  %679 = load i32, i32* %678, align 4
  %680 = icmp eq i32 %679, 0
  %681 = select i1 %680, i64 %676, i64 9
  %682 = zext i32 %679 to i64
  %683 = getelementptr inbounds %"struct.jxl::jpeg::JPEGHuffmanCode", %"struct.jxl::jpeg::JPEGHuffmanCode"* %434, i64 %428, i32 0, i32 0, i64 10
  %684 = load i32, i32* %683, align 4
  %685 = icmp eq i32 %684, 0
  %686 = select i1 %685, i64 %681, i64 10
  %687 = zext i32 %684 to i64
  %688 = getelementptr inbounds %"struct.jxl::jpeg::JPEGHuffmanCode", %"struct.jxl::jpeg::JPEGHuffmanCode"* %434, i64 %428, i32 0, i32 0, i64 11
  %689 = load i32, i32* %688, align 4
  %690 = icmp eq i32 %689, 0
  %691 = select i1 %690, i64 %686, i64 11
  %692 = zext i32 %689 to i64
  %693 = getelementptr inbounds %"struct.jxl::jpeg::JPEGHuffmanCode", %"struct.jxl::jpeg::JPEGHuffmanCode"* %434, i64 %428, i32 0, i32 0, i64 12
  %694 = load i32, i32* %693, align 4
  %695 = icmp eq i32 %694, 0
  %696 = select i1 %695, i64 %691, i64 12
  %697 = zext i32 %694 to i64
  %698 = getelementptr inbounds %"struct.jxl::jpeg::JPEGHuffmanCode", %"struct.jxl::jpeg::JPEGHuffmanCode"* %434, i64 %428, i32 0, i32 0, i64 13
  %699 = load i32, i32* %698, align 4
  %700 = icmp eq i32 %699, 0
  %701 = select i1 %700, i64 %696, i64 13
  %702 = zext i32 %699 to i64
  %703 = getelementptr inbounds %"struct.jxl::jpeg::JPEGHuffmanCode", %"struct.jxl::jpeg::JPEGHuffmanCode"* %434, i64 %428, i32 0, i32 0, i64 14
  %704 = load i32, i32* %703, align 4
  %705 = icmp eq i32 %704, 0
  %706 = select i1 %705, i64 %701, i64 14
  %707 = zext i32 %704 to i64
  %708 = getelementptr inbounds %"struct.jxl::jpeg::JPEGHuffmanCode", %"struct.jxl::jpeg::JPEGHuffmanCode"* %434, i64 %428, i32 0, i32 0, i64 15
  %709 = load i32, i32* %708, align 4
  %710 = icmp eq i32 %709, 0
  %711 = select i1 %710, i64 %706, i64 15
  %712 = zext i32 %709 to i64
  %713 = getelementptr inbounds %"struct.jxl::jpeg::JPEGHuffmanCode", %"struct.jxl::jpeg::JPEGHuffmanCode"* %434, i64 %428, i32 0, i32 0, i64 16
  %714 = load i32, i32* %713, align 4
  %715 = icmp eq i32 %714, 0
  %716 = select i1 %715, i64 %711, i64 16
  %717 = zext i32 %714 to i64
  %718 = load i32, i32* %436, align 4
  %719 = trunc i32 %718 to i8
  %720 = getelementptr inbounds i8, i8* %415, i64 %425
  store i8 %719, i8* %720, align 1
  %721 = add i64 %425, 1
  %722 = icmp eq i64 %716, 1
  %723 = load i32, i32* %638, align 4
  %724 = zext i1 %722 to i32
  %725 = sub i32 %723, %724
  %726 = trunc i32 %725 to i8
  %727 = getelementptr inbounds i8, i8* %415, i64 %721
  store i8 %726, i8* %727, align 1
  %728 = add i64 %425, 2
  %729 = icmp eq i64 %716, 2
  %730 = load i32, i32* %643, align 4
  %731 = zext i1 %729 to i32
  %732 = sub i32 %730, %731
  %733 = trunc i32 %732 to i8
  %734 = getelementptr inbounds i8, i8* %415, i64 %728
  store i8 %733, i8* %734, align 1
  %735 = add i64 %425, 3
  %736 = icmp eq i64 %716, 3
  %737 = load i32, i32* %648, align 4
  %738 = zext i1 %736 to i32
  %739 = sub i32 %737, %738
  %740 = trunc i32 %739 to i8
  %741 = getelementptr inbounds i8, i8* %415, i64 %735
  store i8 %740, i8* %741, align 1
  %742 = add i64 %425, 4
  %743 = icmp eq i64 %716, 4
  %744 = load i32, i32* %653, align 4
  %745 = zext i1 %743 to i32
  %746 = sub i32 %744, %745
  %747 = trunc i32 %746 to i8
  %748 = getelementptr inbounds i8, i8* %415, i64 %742
  store i8 %747, i8* %748, align 1
  %749 = add i64 %425, 5
  %750 = icmp eq i64 %716, 5
  %751 = load i32, i32* %658, align 4
  %752 = zext i1 %750 to i32
  %753 = sub i32 %751, %752
  %754 = trunc i32 %753 to i8
  %755 = getelementptr inbounds i8, i8* %415, i64 %749
  store i8 %754, i8* %755, align 1
  %756 = add i64 %425, 6
  %757 = icmp eq i64 %716, 6
  %758 = load i32, i32* %663, align 4
  %759 = zext i1 %757 to i32
  %760 = sub i32 %758, %759
  %761 = trunc i32 %760 to i8
  %762 = getelementptr inbounds i8, i8* %415, i64 %756
  store i8 %761, i8* %762, align 1
  %763 = add i64 %425, 7
  %764 = icmp eq i64 %716, 7
  %765 = load i32, i32* %668, align 4
  %766 = zext i1 %764 to i32
  %767 = sub i32 %765, %766
  %768 = trunc i32 %767 to i8
  %769 = getelementptr inbounds i8, i8* %415, i64 %763
  store i8 %768, i8* %769, align 1
  %770 = add i64 %425, 8
  %771 = icmp eq i64 %716, 8
  %772 = load i32, i32* %673, align 4
  %773 = zext i1 %771 to i32
  %774 = sub i32 %772, %773
  %775 = trunc i32 %774 to i8
  %776 = getelementptr inbounds i8, i8* %415, i64 %770
  store i8 %775, i8* %776, align 1
  %777 = add i64 %425, 9
  %778 = icmp eq i64 %716, 9
  %779 = load i32, i32* %678, align 4
  %780 = zext i1 %778 to i32
  %781 = sub i32 %779, %780
  %782 = trunc i32 %781 to i8
  %783 = getelementptr inbounds i8, i8* %415, i64 %777
  store i8 %782, i8* %783, align 1
  %784 = add i64 %425, 10
  %785 = icmp eq i64 %716, 10
  %786 = load i32, i32* %683, align 4
  %787 = zext i1 %785 to i32
  %788 = sub i32 %786, %787
  %789 = trunc i32 %788 to i8
  %790 = getelementptr inbounds i8, i8* %415, i64 %784
  store i8 %789, i8* %790, align 1
  %791 = add i64 %425, 11
  %792 = icmp eq i64 %716, 11
  %793 = load i32, i32* %688, align 4
  %794 = zext i1 %792 to i32
  %795 = sub i32 %793, %794
  %796 = trunc i32 %795 to i8
  %797 = getelementptr inbounds i8, i8* %415, i64 %791
  store i8 %796, i8* %797, align 1
  %798 = add i64 %425, 12
  %799 = icmp eq i64 %716, 12
  %800 = load i32, i32* %693, align 4
  %801 = zext i1 %799 to i32
  %802 = sub i32 %800, %801
  %803 = trunc i32 %802 to i8
  %804 = getelementptr inbounds i8, i8* %415, i64 %798
  store i8 %803, i8* %804, align 1
  %805 = add i64 %425, 13
  %806 = icmp eq i64 %716, 13
  %807 = load i32, i32* %698, align 4
  %808 = zext i1 %806 to i32
  %809 = sub i32 %807, %808
  %810 = trunc i32 %809 to i8
  %811 = getelementptr inbounds i8, i8* %415, i64 %805
  store i8 %810, i8* %811, align 1
  %812 = add i64 %425, 14
  %813 = icmp eq i64 %716, 14
  %814 = load i32, i32* %703, align 4
  %815 = zext i1 %813 to i32
  %816 = sub i32 %814, %815
  %817 = trunc i32 %816 to i8
  %818 = getelementptr inbounds i8, i8* %415, i64 %812
  store i8 %817, i8* %818, align 1
  %819 = add i64 %425, 15
  %820 = icmp eq i64 %716, 15
  %821 = load i32, i32* %708, align 4
  %822 = zext i1 %820 to i32
  %823 = sub i32 %821, %822
  %824 = trunc i32 %823 to i8
  %825 = getelementptr inbounds i8, i8* %415, i64 %819
  store i8 %824, i8* %825, align 1
  %826 = add i64 %425, 16
  %827 = icmp eq i64 %716, 16
  %828 = load i32, i32* %713, align 4
  %829 = zext i1 %827 to i32
  %830 = sub i32 %828, %829
  %831 = trunc i32 %830 to i8
  %832 = getelementptr inbounds i8, i8* %415, i64 %826
  store i8 %831, i8* %832, align 1
  %833 = add i64 %425, 17
  %834 = add nsw i64 %637, -1
  %835 = add nsw i64 %834, %642
  %836 = add nsw i64 %835, %647
  %837 = add nsw i64 %836, %652
  %838 = add nsw i64 %837, %657
  %839 = add nsw i64 %838, %662
  %840 = add nsw i64 %839, %667
  %841 = add nsw i64 %840, %672
  %842 = add nsw i64 %841, %677
  %843 = add nsw i64 %842, %682
  %844 = add nsw i64 %843, %687
  %845 = add nsw i64 %844, %692
  %846 = add nsw i64 %845, %697
  %847 = add nsw i64 %846, %702
  %848 = add nsw i64 %847, %707
  %849 = add nsw i64 %848, %712
  %850 = add nsw i64 %849, %717
  %851 = icmp eq i64 %850, 0
  br i1 %851, label %1036, label %852

852:                                              ; preds = %634
  %853 = add nsw i64 %637, -1
  %854 = add nsw i64 %853, %642
  %855 = add nsw i64 %854, %647
  %856 = add nsw i64 %855, %652
  %857 = add nsw i64 %856, %657
  %858 = add nsw i64 %857, %662
  %859 = add i64 %858, %667
  %860 = add i64 %859, %672
  %861 = add i64 %860, %677
  %862 = add i64 %861, %682
  %863 = add i64 %862, %687
  %864 = add i64 %863, %692
  %865 = add i64 %864, %697
  %866 = add i64 %865, %702
  %867 = add i64 %866, %707
  %868 = add i64 %867, %712
  %869 = add i64 %868, %717
  %870 = icmp ult i64 %869, 8
  br i1 %870, label %871, label %928

871:                                              ; preds = %1034, %928, %852
  %872 = phi i64 [ 0, %928 ], [ 0, %852 ], [ %975, %1034 ]
  %873 = phi i64 [ %833, %928 ], [ %833, %852 ], [ %976, %1034 ]
  %874 = add nsw i64 %637, -1
  %875 = add nsw i64 %874, %642
  %876 = add nsw i64 %875, %647
  %877 = add nsw i64 %876, %652
  %878 = add nsw i64 %877, %657
  %879 = add nsw i64 %878, %662
  %880 = add i64 %879, %667
  %881 = add i64 %880, %672
  %882 = add i64 %881, %677
  %883 = add i64 %882, %682
  %884 = add i64 %883, %687
  %885 = add i64 %884, %692
  %886 = add i64 %885, %697
  %887 = add i64 %886, %702
  %888 = add i64 %887, %707
  %889 = add i64 %888, %712
  %890 = add i64 %889, %717
  %891 = add nsw i64 %637, -2
  %892 = add nsw i64 %891, %642
  %893 = add nsw i64 %892, %647
  %894 = add nsw i64 %893, %652
  %895 = add nsw i64 %894, %657
  %896 = add nsw i64 %895, %662
  %897 = add i64 %896, %667
  %898 = add i64 %897, %672
  %899 = add i64 %898, %677
  %900 = add i64 %899, %682
  %901 = add i64 %900, %687
  %902 = add i64 %901, %692
  %903 = add i64 %902, %697
  %904 = add i64 %903, %702
  %905 = add i64 %904, %707
  %906 = add i64 %905, %712
  %907 = add i64 %906, %717
  %908 = sub i64 %907, %872
  %909 = and i64 %890, 3
  %910 = icmp eq i64 %909, 0
  br i1 %910, label %923, label %911

911:                                              ; preds = %871, %911
  %912 = phi i64 [ %920, %911 ], [ %872, %871 ]
  %913 = phi i64 [ %918, %911 ], [ %873, %871 ]
  %914 = phi i64 [ %921, %911 ], [ %909, %871 ]
  %915 = getelementptr inbounds %"struct.jxl::jpeg::JPEGHuffmanCode", %"struct.jxl::jpeg::JPEGHuffmanCode"* %434, i64 %428, i32 1, i32 0, i64 %912
  %916 = load i32, i32* %915, align 4
  %917 = trunc i32 %916 to i8
  %918 = add i64 %913, 1
  %919 = getelementptr inbounds i8, i8* %415, i64 %913
  store i8 %917, i8* %919, align 1
  %920 = add nuw i64 %912, 1
  %921 = add i64 %914, -1
  %922 = icmp eq i64 %921, 0
  br i1 %922, label %923, label %911, !llvm.loop !9

923:                                              ; preds = %911, %871
  %924 = phi i64 [ undef, %871 ], [ %918, %911 ]
  %925 = phi i64 [ %872, %871 ], [ %920, %911 ]
  %926 = phi i64 [ %873, %871 ], [ %918, %911 ]
  %927 = icmp ult i64 %908, 3
  br i1 %927, label %1036, label %1041

928:                                              ; preds = %852
  %929 = getelementptr i8, i8* %422, i64 %425
  %930 = add i64 %425, %717
  %931 = add i64 %930, %712
  %932 = add i64 %931, %707
  %933 = add i64 %932, %702
  %934 = add i64 %933, %697
  %935 = add i64 %934, %692
  %936 = add i64 %935, %687
  %937 = add i64 %936, %682
  %938 = add i64 %937, %677
  %939 = add i64 %938, %672
  %940 = add i64 %939, %667
  %941 = add i64 %940, %662
  %942 = add i64 %941, %657
  %943 = add i64 %942, %652
  %944 = add i64 %943, %647
  %945 = add i64 %944, %642
  %946 = add i64 %945, %637
  %947 = getelementptr i8, i8* %423, i64 %946
  %948 = mul nsw i64 %428, 276
  %949 = getelementptr %"struct.jxl::jpeg::JPEGHuffmanCode", %"struct.jxl::jpeg::JPEGHuffmanCode"* %434, i64 0, i32 1, i32 0, i64 %948
  %950 = bitcast i32* %949 to i8*
  %951 = getelementptr %"struct.jxl::jpeg::JPEGHuffmanCode", %"struct.jxl::jpeg::JPEGHuffmanCode"* %434, i64 0, i32 0, i32 0, i64 16
  %952 = add nsw i64 %948, %637
  %953 = add nsw i64 %952, %642
  %954 = add nsw i64 %953, %647
  %955 = add nsw i64 %954, %652
  %956 = add nsw i64 %955, %657
  %957 = add i64 %956, %662
  %958 = add i64 %957, %667
  %959 = add i64 %958, %672
  %960 = add i64 %959, %677
  %961 = add i64 %960, %682
  %962 = add i64 %961, %687
  %963 = add i64 %962, %692
  %964 = add i64 %963, %697
  %965 = add i64 %964, %702
  %966 = add i64 %965, %707
  %967 = add i64 %966, %712
  %968 = add i64 %967, %717
  %969 = getelementptr i32, i32* %951, i64 %968
  %970 = bitcast i32* %969 to i8*
  %971 = icmp ult i8* %929, %970
  %972 = icmp ugt i8* %947, %950
  %973 = and i1 %971, %972
  br i1 %973, label %871, label %974

974:                                              ; preds = %928
  %975 = and i64 %869, -8
  %976 = add i64 %833, %975
  %977 = add i64 %975, -8
  %978 = lshr exact i64 %977, 3
  %979 = add nuw nsw i64 %978, 1
  %980 = and i64 %979, 1
  %981 = icmp eq i64 %977, 0
  br i1 %981, label %1017, label %982

982:                                              ; preds = %974
  %983 = sub nuw nsw i64 %979, %980
  br label %984

984:                                              ; preds = %984, %982
  %985 = phi i64 [ 0, %982 ], [ %1014, %984 ]
  %986 = phi i64 [ %983, %982 ], [ %1015, %984 ]
  %987 = add i64 %833, %985
  %988 = getelementptr inbounds %"struct.jxl::jpeg::JPEGHuffmanCode", %"struct.jxl::jpeg::JPEGHuffmanCode"* %434, i64 %428, i32 1, i32 0, i64 %985
  %989 = bitcast i32* %988 to <4 x i32>*
  %990 = load <4 x i32>, <4 x i32>* %989, align 4, !alias.scope !10
  %991 = getelementptr inbounds i32, i32* %988, i64 4
  %992 = bitcast i32* %991 to <4 x i32>*
  %993 = load <4 x i32>, <4 x i32>* %992, align 4, !alias.scope !10
  %994 = trunc <4 x i32> %990 to <4 x i8>
  %995 = trunc <4 x i32> %993 to <4 x i8>
  %996 = getelementptr inbounds i8, i8* %415, i64 %987
  %997 = bitcast i8* %996 to <4 x i8>*
  store <4 x i8> %994, <4 x i8>* %997, align 1, !alias.scope !13, !noalias !10
  %998 = getelementptr inbounds i8, i8* %996, i64 4
  %999 = bitcast i8* %998 to <4 x i8>*
  store <4 x i8> %995, <4 x i8>* %999, align 1, !alias.scope !13, !noalias !10
  %1000 = or i64 %985, 8
  %1001 = add i64 %833, %1000
  %1002 = getelementptr inbounds %"struct.jxl::jpeg::JPEGHuffmanCode", %"struct.jxl::jpeg::JPEGHuffmanCode"* %434, i64 %428, i32 1, i32 0, i64 %1000
  %1003 = bitcast i32* %1002 to <4 x i32>*
  %1004 = load <4 x i32>, <4 x i32>* %1003, align 4, !alias.scope !10
  %1005 = getelementptr inbounds i32, i32* %1002, i64 4
  %1006 = bitcast i32* %1005 to <4 x i32>*
  %1007 = load <4 x i32>, <4 x i32>* %1006, align 4, !alias.scope !10
  %1008 = trunc <4 x i32> %1004 to <4 x i8>
  %1009 = trunc <4 x i32> %1007 to <4 x i8>
  %1010 = getelementptr inbounds i8, i8* %415, i64 %1001
  %1011 = bitcast i8* %1010 to <4 x i8>*
  store <4 x i8> %1008, <4 x i8>* %1011, align 1, !alias.scope !13, !noalias !10
  %1012 = getelementptr inbounds i8, i8* %1010, i64 4
  %1013 = bitcast i8* %1012 to <4 x i8>*
  store <4 x i8> %1009, <4 x i8>* %1013, align 1, !alias.scope !13, !noalias !10
  %1014 = add i64 %985, 16
  %1015 = add i64 %986, -2
  %1016 = icmp eq i64 %1015, 0
  br i1 %1016, label %1017, label %984, !llvm.loop !15

1017:                                             ; preds = %984, %974
  %1018 = phi i64 [ 0, %974 ], [ %1014, %984 ]
  %1019 = icmp eq i64 %980, 0
  br i1 %1019, label %1034, label %1020

1020:                                             ; preds = %1017
  %1021 = add i64 %833, %1018
  %1022 = getelementptr inbounds %"struct.jxl::jpeg::JPEGHuffmanCode", %"struct.jxl::jpeg::JPEGHuffmanCode"* %434, i64 %428, i32 1, i32 0, i64 %1018
  %1023 = bitcast i32* %1022 to <4 x i32>*
  %1024 = load <4 x i32>, <4 x i32>* %1023, align 4, !alias.scope !10
  %1025 = getelementptr inbounds i32, i32* %1022, i64 4
  %1026 = bitcast i32* %1025 to <4 x i32>*
  %1027 = load <4 x i32>, <4 x i32>* %1026, align 4, !alias.scope !10
  %1028 = trunc <4 x i32> %1024 to <4 x i8>
  %1029 = trunc <4 x i32> %1027 to <4 x i8>
  %1030 = getelementptr inbounds i8, i8* %415, i64 %1021
  %1031 = bitcast i8* %1030 to <4 x i8>*
  store <4 x i8> %1028, <4 x i8>* %1031, align 1, !alias.scope !13, !noalias !10
  %1032 = getelementptr inbounds i8, i8* %1030, i64 4
  %1033 = bitcast i8* %1032 to <4 x i8>*
  store <4 x i8> %1029, <4 x i8>* %1033, align 1, !alias.scope !13, !noalias !10
  br label %1034

1034:                                             ; preds = %1017, %1020
  %1035 = icmp eq i64 %869, %975
  br i1 %1035, label %1036, label %871

1036:                                             ; preds = %923, %1041, %1034, %634
  %1037 = phi i64 [ %833, %634 ], [ %976, %1034 ], [ %924, %923 ], [ %1065, %1041 ]
  %1038 = getelementptr inbounds %"struct.jxl::jpeg::JPEGHuffmanCode", %"struct.jxl::jpeg::JPEGHuffmanCode"* %434, i64 %428, i32 3
  %1039 = load i8, i8* %1038, align 4, !range !2
  %1040 = icmp eq i8 %1039, 0
  br i1 %1040, label %424, label %1673

1041:                                             ; preds = %923, %1041
  %1042 = phi i64 [ %1067, %1041 ], [ %925, %923 ]
  %1043 = phi i64 [ %1065, %1041 ], [ %926, %923 ]
  %1044 = getelementptr inbounds %"struct.jxl::jpeg::JPEGHuffmanCode", %"struct.jxl::jpeg::JPEGHuffmanCode"* %434, i64 %428, i32 1, i32 0, i64 %1042
  %1045 = load i32, i32* %1044, align 4
  %1046 = trunc i32 %1045 to i8
  %1047 = add i64 %1043, 1
  %1048 = getelementptr inbounds i8, i8* %415, i64 %1043
  store i8 %1046, i8* %1048, align 1
  %1049 = add nuw i64 %1042, 1
  %1050 = getelementptr inbounds %"struct.jxl::jpeg::JPEGHuffmanCode", %"struct.jxl::jpeg::JPEGHuffmanCode"* %434, i64 %428, i32 1, i32 0, i64 %1049
  %1051 = load i32, i32* %1050, align 4
  %1052 = trunc i32 %1051 to i8
  %1053 = add i64 %1043, 2
  %1054 = getelementptr inbounds i8, i8* %415, i64 %1047
  store i8 %1052, i8* %1054, align 1
  %1055 = add nuw i64 %1042, 2
  %1056 = getelementptr inbounds %"struct.jxl::jpeg::JPEGHuffmanCode", %"struct.jxl::jpeg::JPEGHuffmanCode"* %434, i64 %428, i32 1, i32 0, i64 %1055
  %1057 = load i32, i32* %1056, align 4
  %1058 = trunc i32 %1057 to i8
  %1059 = add i64 %1043, 3
  %1060 = getelementptr inbounds i8, i8* %415, i64 %1053
  store i8 %1058, i8* %1060, align 1
  %1061 = add nuw i64 %1042, 3
  %1062 = getelementptr inbounds %"struct.jxl::jpeg::JPEGHuffmanCode", %"struct.jxl::jpeg::JPEGHuffmanCode"* %434, i64 %428, i32 1, i32 0, i64 %1061
  %1063 = load i32, i32* %1062, align 4
  %1064 = trunc i32 %1063 to i8
  %1065 = add i64 %1043, 4
  %1066 = getelementptr inbounds i8, i8* %415, i64 %1059
  store i8 %1064, i8* %1066, align 1
  %1067 = add nuw i64 %1042, 4
  %1068 = icmp eq i64 %1067, %850
  br i1 %1068, label %1036, label %1041, !llvm.loop !16

1069:                                             ; preds = %272, %272, %272, %272, %272, %272, %272, %272
  %1070 = call i8* @_Znwm(i64 24) #11
  %1071 = call i8* @_Znwm(i64 2) #11
  %1072 = getelementptr inbounds i8, i8* %1070, i64 8
  %1073 = bitcast i8* %1070 to i8**
  store i8* %1071, i8** %1073, align 8
  %1074 = getelementptr inbounds i8, i8* %1071, i64 2
  %1075 = getelementptr inbounds i8, i8* %1070, i64 16
  %1076 = bitcast i8* %1075 to i8**
  store i8* %1074, i8** %1076, align 8
  %1077 = bitcast i8* %1072 to i64*
  store i8 -1, i8* %1071, align 1
  %1078 = getelementptr inbounds i8, i8* %1071, i64 1
  store i8 %275, i8* %1078, align 1
  %1079 = ptrtoint i8* %1074 to i64
  store i64 %1079, i64* %1077, align 8
  %1080 = ptrtoint i8* %1071 to i64
  %1081 = ptrtoint i8* %1070 to i64
  %1082 = load i64, i64* %34, align 8
  %1083 = load i64, i64* %36, align 8
  %1084 = sub i64 %1082, %1083
  %1085 = ashr exact i64 %1084, 3
  %1086 = icmp eq i64 %1084, 0
  %1087 = mul i64 %1085, 170
  %1088 = add i64 %1087, -1
  %1089 = select i1 %1086, i64 0, i64 %1088
  %1090 = load i64, i64* %37, align 8
  %1091 = load i64, i64* %38, align 8
  %1092 = add i64 %1091, %1090
  %1093 = icmp eq i64 %1089, %1092
  %1094 = inttoptr i64 %1083 to %"struct.jxl::jpeg::OutputChunk"**
  %1095 = inttoptr i64 %1082 to %"struct.jxl::jpeg::OutputChunk"**
  br i1 %1093, label %1096, label %1102

1096:                                             ; preds = %1069
  call void @_ZNSt3__15dequeIN3jxl4jpeg11OutputChunkENS_9allocatorIS3_EEE19__add_back_capacityEv(%"class.std::__1::deque"* %11) #10
  %1097 = load i64, i64* %38, align 8
  %1098 = load i64, i64* %37, align 8
  %1099 = load %"struct.jxl::jpeg::OutputChunk"**, %"struct.jxl::jpeg::OutputChunk"*** %35, align 8
  %1100 = load %"struct.jxl::jpeg::OutputChunk"**, %"struct.jxl::jpeg::OutputChunk"*** %33, align 8
  %1101 = add i64 %1098, %1097
  br label %1102

1102:                                             ; preds = %1096, %1069
  %1103 = phi i64 [ %1101, %1096 ], [ %1092, %1069 ]
  %1104 = phi %"struct.jxl::jpeg::OutputChunk"** [ %1100, %1096 ], [ %1095, %1069 ]
  %1105 = phi %"struct.jxl::jpeg::OutputChunk"** [ %1099, %1096 ], [ %1094, %1069 ]
  %1106 = icmp eq %"struct.jxl::jpeg::OutputChunk"** %1104, %1105
  br i1 %1106, label %1113, label %1107

1107:                                             ; preds = %1102
  %1108 = udiv i64 %1103, 170
  %1109 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %1105, i64 %1108
  %1110 = load %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %1109, align 8
  %1111 = urem i64 %1103, 170
  %1112 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk", %"struct.jxl::jpeg::OutputChunk"* %1110, i64 %1111
  br label %1113

1113:                                             ; preds = %1107, %1102
  %1114 = phi %"struct.jxl::jpeg::OutputChunk"* [ %1112, %1107 ], [ null, %1102 ]
  %1115 = bitcast %"struct.jxl::jpeg::OutputChunk"* %1114 to i64*
  store i64 %1080, i64* %1115, align 8
  %1116 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk", %"struct.jxl::jpeg::OutputChunk"* %1114, i64 0, i32 1
  store i64 2, i64* %1116, align 8
  %1117 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk", %"struct.jxl::jpeg::OutputChunk"* %1114, i64 0, i32 2
  %1118 = bitcast %"class.std::__1::unique_ptr"* %1117 to i64*
  store i64 %1081, i64* %1118, align 8
  %1119 = load i64, i64* %38, align 8
  %1120 = add i64 %1119, 1
  store i64 %1120, i64* %38, align 8
  br label %1673

1121:                                             ; preds = %272
  %1122 = call i8* @_Znwm(i64 24) #11
  %1123 = call i8* @_Znwm(i64 2) #11
  %1124 = getelementptr inbounds i8, i8* %1122, i64 8
  %1125 = bitcast i8* %1122 to i8**
  store i8* %1123, i8** %1125, align 8
  %1126 = getelementptr inbounds i8, i8* %1123, i64 2
  %1127 = getelementptr inbounds i8, i8* %1122, i64 16
  %1128 = bitcast i8* %1127 to i8**
  store i8* %1126, i8** %1128, align 8
  %1129 = bitcast i8* %1124 to i64*
  %1130 = bitcast i8* %1123 to i16*
  store i16 -9729, i16* %1130, align 1
  %1131 = ptrtoint i8* %1126 to i64
  store i64 %1131, i64* %1129, align 8
  %1132 = ptrtoint i8* %1123 to i64
  %1133 = ptrtoint i8* %1122 to i64
  %1134 = load i64, i64* %34, align 8
  %1135 = load i64, i64* %36, align 8
  %1136 = sub i64 %1134, %1135
  %1137 = ashr exact i64 %1136, 3
  %1138 = icmp eq i64 %1136, 0
  %1139 = mul i64 %1137, 170
  %1140 = add i64 %1139, -1
  %1141 = select i1 %1138, i64 0, i64 %1140
  %1142 = load i64, i64* %37, align 8
  %1143 = load i64, i64* %38, align 8
  %1144 = add i64 %1143, %1142
  %1145 = icmp eq i64 %1141, %1144
  %1146 = inttoptr i64 %1135 to %"struct.jxl::jpeg::OutputChunk"**
  %1147 = inttoptr i64 %1134 to %"struct.jxl::jpeg::OutputChunk"**
  br i1 %1145, label %1148, label %1154

1148:                                             ; preds = %1121
  call void @_ZNSt3__15dequeIN3jxl4jpeg11OutputChunkENS_9allocatorIS3_EEE19__add_back_capacityEv(%"class.std::__1::deque"* %11) #10
  %1149 = load i64, i64* %38, align 8
  %1150 = load i64, i64* %37, align 8
  %1151 = load %"struct.jxl::jpeg::OutputChunk"**, %"struct.jxl::jpeg::OutputChunk"*** %35, align 8
  %1152 = load %"struct.jxl::jpeg::OutputChunk"**, %"struct.jxl::jpeg::OutputChunk"*** %33, align 8
  %1153 = add i64 %1150, %1149
  br label %1154

1154:                                             ; preds = %1148, %1121
  %1155 = phi i64 [ %1153, %1148 ], [ %1144, %1121 ]
  %1156 = phi %"struct.jxl::jpeg::OutputChunk"** [ %1152, %1148 ], [ %1147, %1121 ]
  %1157 = phi %"struct.jxl::jpeg::OutputChunk"** [ %1151, %1148 ], [ %1146, %1121 ]
  %1158 = icmp eq %"struct.jxl::jpeg::OutputChunk"** %1156, %1157
  br i1 %1158, label %1165, label %1159

1159:                                             ; preds = %1154
  %1160 = udiv i64 %1155, 170
  %1161 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %1157, i64 %1160
  %1162 = load %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %1161, align 8
  %1163 = urem i64 %1155, 170
  %1164 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk", %"struct.jxl::jpeg::OutputChunk"* %1162, i64 %1163
  br label %1165

1165:                                             ; preds = %1159, %1154
  %1166 = phi %"struct.jxl::jpeg::OutputChunk"* [ %1164, %1159 ], [ null, %1154 ]
  %1167 = bitcast %"struct.jxl::jpeg::OutputChunk"* %1166 to i64*
  store i64 %1132, i64* %1167, align 8
  %1168 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk", %"struct.jxl::jpeg::OutputChunk"* %1166, i64 0, i32 1
  store i64 2, i64* %1168, align 8
  %1169 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk", %"struct.jxl::jpeg::OutputChunk"* %1166, i64 0, i32 2
  %1170 = bitcast %"class.std::__1::unique_ptr"* %1169 to i64*
  store i64 %1133, i64* %1170, align 8
  %1171 = load i64, i64* %38, align 8
  %1172 = add i64 %1171, 1
  store i64 %1172, i64* %38, align 8
  %1173 = load i64, i64* %34, align 8
  %1174 = load i64, i64* %36, align 8
  %1175 = sub i64 %1173, %1174
  %1176 = ashr exact i64 %1175, 3
  %1177 = icmp eq i64 %1175, 0
  %1178 = mul i64 %1176, 170
  %1179 = add i64 %1178, -1
  %1180 = select i1 %1177, i64 0, i64 %1179
  %1181 = load i64, i64* %37, align 8
  %1182 = add i64 %1181, %1172
  %1183 = icmp eq i64 %1180, %1182
  %1184 = inttoptr i64 %1174 to %"struct.jxl::jpeg::OutputChunk"**
  %1185 = inttoptr i64 %1173 to %"struct.jxl::jpeg::OutputChunk"**
  br i1 %1183, label %1186, label %1192

1186:                                             ; preds = %1165
  call void @_ZNSt3__15dequeIN3jxl4jpeg11OutputChunkENS_9allocatorIS3_EEE19__add_back_capacityEv(%"class.std::__1::deque"* %11) #10
  %1187 = load i64, i64* %38, align 8
  %1188 = load i64, i64* %37, align 8
  %1189 = load %"struct.jxl::jpeg::OutputChunk"**, %"struct.jxl::jpeg::OutputChunk"*** %35, align 8
  %1190 = load %"struct.jxl::jpeg::OutputChunk"**, %"struct.jxl::jpeg::OutputChunk"*** %33, align 8
  %1191 = add i64 %1188, %1187
  br label %1192

1192:                                             ; preds = %1186, %1165
  %1193 = phi i64 [ %1191, %1186 ], [ %1182, %1165 ]
  %1194 = phi %"struct.jxl::jpeg::OutputChunk"** [ %1190, %1186 ], [ %1185, %1165 ]
  %1195 = phi %"struct.jxl::jpeg::OutputChunk"** [ %1189, %1186 ], [ %1184, %1165 ]
  %1196 = icmp eq %"struct.jxl::jpeg::OutputChunk"** %1194, %1195
  br i1 %1196, label %1203, label %1197

1197:                                             ; preds = %1192
  %1198 = udiv i64 %1193, 170
  %1199 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %1195, i64 %1198
  %1200 = load %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %1199, align 8
  %1201 = urem i64 %1193, 170
  %1202 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk", %"struct.jxl::jpeg::OutputChunk"* %1200, i64 %1201
  br label %1203

1203:                                             ; preds = %1197, %1192
  %1204 = phi %"struct.jxl::jpeg::OutputChunk"* [ %1202, %1197 ], [ null, %1192 ]
  %1205 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk", %"struct.jxl::jpeg::OutputChunk"* %1204, i64 0, i32 1
  %1206 = load i64, i64* %64, align 8
  %1207 = load i64, i64* %65, align 8
  %1208 = sub i64 %1206, %1207
  store i64 %1208, i64* %1205, align 8
  %1209 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk", %"struct.jxl::jpeg::OutputChunk"* %1204, i64 0, i32 2
  %1210 = bitcast %"class.std::__1::unique_ptr"* %1209 to i64*
  store i64 0, i64* %1210, align 8
  %1211 = load i64, i64* %65, align 8
  %1212 = bitcast %"struct.jxl::jpeg::OutputChunk"* %1204 to i64*
  store i64 %1211, i64* %1212, align 8
  %1213 = load i64, i64* %38, align 8
  %1214 = add i64 %1213, 1
  store i64 %1214, i64* %38, align 8
  br label %1673

1215:                                             ; preds = %272
  %1216 = load i32, i32* %59, align 4
  %1217 = sext i32 %1216 to i64
  %1218 = load %"struct.jxl::jpeg::JPEGScanInfo"*, %"struct.jxl::jpeg::JPEGScanInfo"** %60, align 8
  %1219 = load i8, i8* %61, align 1, !range !2
  %1220 = icmp ne i8 %1219, 0
  %1221 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %1218, i64 %1217, i32 2
  %1222 = load i32, i32* %1221, align 8
  %1223 = select i1 %1220, i32 %1222, i32 0
  br i1 %1220, label %1224, label %1236

1224:                                             ; preds = %1215
  %1225 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %1218, i64 %1217, i32 1
  %1226 = load i32, i32* %1225, align 4
  %1227 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %1218, i64 %1217, i32 0
  %1228 = load i32, i32* %1227, align 8
  %1229 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %1218, i64 %1217, i32 3
  %1230 = load i32, i32* %1229, align 4
  %1231 = or i32 %1228, %1223
  %1232 = or i32 %1231, %1230
  %1233 = icmp eq i32 %1232, 0
  %1234 = icmp eq i32 %1226, 63
  %1235 = and i1 %1234, %1233
  br i1 %1235, label %1236, label %1238

1236:                                             ; preds = %1224, %1215
  %1237 = call fastcc i32 @_ZN3jxl4jpeg12_GLOBAL__N_112DoEncodeScanILi0EEENS1_19SerializationStatusERKNS0_8JPEGDataEPNS0_18SerializationStateE(%"struct.jxl::jpeg::JPEGData"* dereferenceable(296) %0, %"struct.jxl::jpeg::SerializationState"* nonnull %8) #10
  br label %1669

1238:                                             ; preds = %1224
  %1239 = icmp eq i32 %1223, 0
  br i1 %1239, label %1240, label %1242

1240:                                             ; preds = %1238
  %1241 = call fastcc i32 @_ZN3jxl4jpeg12_GLOBAL__N_112DoEncodeScanILi1EEENS1_19SerializationStatusERKNS0_8JPEGDataEPNS0_18SerializationStateE(%"struct.jxl::jpeg::JPEGData"* dereferenceable(296) %0, %"struct.jxl::jpeg::SerializationState"* nonnull %8) #10
  br label %1669

1242:                                             ; preds = %1238
  %1243 = call fastcc i32 @_ZN3jxl4jpeg12_GLOBAL__N_112DoEncodeScanILi2EEENS1_19SerializationStatusERKNS0_8JPEGDataEPNS0_18SerializationStateE(%"struct.jxl::jpeg::JPEGData"* dereferenceable(296) %0, %"struct.jxl::jpeg::SerializationState"* nonnull %8) #10
  br label %1669

1244:                                             ; preds = %272
  %1245 = load i32, i32* %53, align 4
  %1246 = sext i32 %1245 to i64
  %1247 = load i64, i64* %56, align 8
  %1248 = load i64, i64* %57, align 8
  %1249 = sub i64 %1247, %1248
  %1250 = sdiv exact i64 %1249, 268
  %1251 = icmp ugt i64 %1250, %1246
  %1252 = inttoptr i64 %1248 to %"struct.jxl::jpeg::JPEGQuantTable"*
  br i1 %1251, label %1253, label %1267

1253:                                             ; preds = %1244, %1253
  %1254 = phi i32 [ %1260, %1253 ], [ 2, %1244 ]
  %1255 = phi i64 [ %1264, %1253 ], [ %1246, %1244 ]
  %1256 = getelementptr inbounds %"struct.jxl::jpeg::JPEGQuantTable", %"struct.jxl::jpeg::JPEGQuantTable"* %1252, i64 %1255, i32 1
  %1257 = load i32, i32* %1256, align 4
  %1258 = icmp eq i32 %1257, 0
  %1259 = select i1 %1258, i32 65, i32 129
  %1260 = add i32 %1259, %1254
  %1261 = getelementptr inbounds %"struct.jxl::jpeg::JPEGQuantTable", %"struct.jxl::jpeg::JPEGQuantTable"* %1252, i64 %1255, i32 3
  %1262 = load i8, i8* %1261, align 4, !range !2
  %1263 = icmp eq i8 %1262, 0
  %1264 = add nuw i64 %1255, 1
  %1265 = icmp ult i64 %1264, %1250
  %1266 = and i1 %1265, %1263
  br i1 %1266, label %1253, label %1267

1267:                                             ; preds = %1253, %1244
  %1268 = phi i32 [ 2, %1244 ], [ %1260, %1253 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %58) #10
  %1269 = add nsw i32 %1268, 2
  store i32 %1269, i32* %3, align 4
  call void @_ZNSt3__15dequeIN3jxl4jpeg11OutputChunkENS_9allocatorIS3_EEE12emplace_backIJiEEEvDpOT_(%"class.std::__1::deque"* %11, i32* nonnull dereferenceable(4) %3) #10
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %58) #10
  %1270 = load i64, i64* %38, align 8
  %1271 = load i64, i64* %37, align 8
  %1272 = add i64 %1270, -1
  %1273 = add i64 %1272, %1271
  %1274 = load %"struct.jxl::jpeg::OutputChunk"**, %"struct.jxl::jpeg::OutputChunk"*** %35, align 8
  %1275 = udiv i64 %1273, 170
  %1276 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %1274, i64 %1275
  %1277 = load %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %1276, align 8
  %1278 = urem i64 %1273, 170
  %1279 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk", %"struct.jxl::jpeg::OutputChunk"* %1277, i64 %1278, i32 2, i32 0, i32 0, i32 0
  %1280 = load %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"** %1279, align 8
  %1281 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %1280, i64 0, i32 0, i32 0
  %1282 = load i8*, i8** %1281, align 8
  store i8 -1, i8* %1282, align 1
  %1283 = getelementptr inbounds i8, i8* %1282, i64 1
  store i8 -37, i8* %1283, align 1
  %1284 = lshr i32 %1268, 8
  %1285 = trunc i32 %1284 to i8
  %1286 = getelementptr inbounds i8, i8* %1282, i64 2
  store i8 %1285, i8* %1286, align 1
  %1287 = trunc i32 %1268 to i8
  %1288 = getelementptr inbounds i8, i8* %1282, i64 3
  store i8 %1287, i8* %1288, align 1
  br label %1289

1289:                                             ; preds = %1310, %1267
  %1290 = phi i64 [ 4, %1267 ], [ %1335, %1310 ]
  %1291 = load i32, i32* %53, align 4
  %1292 = add nsw i32 %1291, 1
  store i32 %1292, i32* %53, align 4
  %1293 = sext i32 %1291 to i64
  %1294 = load i64, i64* %56, align 8
  %1295 = load i64, i64* %57, align 8
  %1296 = sub i64 %1294, %1295
  %1297 = sdiv exact i64 %1296, 268
  %1298 = icmp ugt i64 %1297, %1293
  %1299 = inttoptr i64 %1295 to %"struct.jxl::jpeg::JPEGQuantTable"*
  br i1 %1298, label %1300, label %1672

1300:                                             ; preds = %1289
  %1301 = getelementptr inbounds %"struct.jxl::jpeg::JPEGQuantTable", %"struct.jxl::jpeg::JPEGQuantTable"* %1299, i64 %1293, i32 1
  %1302 = load i32, i32* %1301, align 4
  %1303 = shl i32 %1302, 4
  %1304 = getelementptr inbounds %"struct.jxl::jpeg::JPEGQuantTable", %"struct.jxl::jpeg::JPEGQuantTable"* %1299, i64 %1293, i32 2
  %1305 = load i32, i32* %1304, align 4
  %1306 = add i32 %1303, %1305
  %1307 = trunc i32 %1306 to i8
  %1308 = getelementptr inbounds i8, i8* %1282, i64 %1290
  store i8 %1307, i8* %1308, align 1
  %1309 = add i64 %1290, 1
  br label %1314

1310:                                             ; preds = %1330
  %1311 = getelementptr inbounds %"struct.jxl::jpeg::JPEGQuantTable", %"struct.jxl::jpeg::JPEGQuantTable"* %1299, i64 %1293, i32 3
  %1312 = load i8, i8* %1311, align 4, !range !2
  %1313 = icmp eq i8 %1312, 0
  br i1 %1313, label %1289, label %1673

1314:                                             ; preds = %1330, %1300
  %1315 = phi i64 [ %1309, %1300 ], [ %1335, %1330 ]
  %1316 = phi i64 [ 0, %1300 ], [ %1334, %1330 ]
  %1317 = phi i64 [ %1290, %1300 ], [ %1331, %1330 ]
  %1318 = getelementptr inbounds [80 x i32], [80 x i32]* @_ZN3jxl4jpegL17kJPEGNaturalOrderE, i64 0, i64 %1316
  %1319 = load i32, i32* %1318, align 4
  %1320 = sext i32 %1319 to i64
  %1321 = getelementptr inbounds %"struct.jxl::jpeg::JPEGQuantTable", %"struct.jxl::jpeg::JPEGQuantTable"* %1299, i64 %1293, i32 0, i32 0, i64 %1320
  %1322 = load i32, i32* %1321, align 4
  %1323 = load i32, i32* %1301, align 4
  %1324 = icmp eq i32 %1323, 0
  br i1 %1324, label %1330, label %1325

1325:                                             ; preds = %1314
  %1326 = lshr i32 %1322, 8
  %1327 = trunc i32 %1326 to i8
  %1328 = add i64 %1317, 2
  %1329 = getelementptr inbounds i8, i8* %1282, i64 %1315
  store i8 %1327, i8* %1329, align 1
  br label %1330

1330:                                             ; preds = %1325, %1314
  %1331 = phi i64 [ %1328, %1325 ], [ %1315, %1314 ]
  %1332 = trunc i32 %1322 to i8
  %1333 = getelementptr inbounds i8, i8* %1282, i64 %1331
  store i8 %1332, i8* %1333, align 1
  %1334 = add nuw nsw i64 %1316, 1
  %1335 = add i64 %1331, 1
  %1336 = icmp eq i64 %1334, 64
  br i1 %1336, label %1310, label %1314

1337:                                             ; preds = %272
  store i8 1, i8* %51, align 8
  %1338 = load i32, i32* %52, align 8
  %1339 = lshr i32 %1338, 8
  %1340 = trunc i32 %1339 to i8
  %1341 = trunc i32 %1338 to i8
  %1342 = call i8* @_Znwm(i64 24) #11
  %1343 = call i8* @_Znwm(i64 6) #11
  %1344 = getelementptr inbounds i8, i8* %1342, i64 8
  %1345 = bitcast i8* %1342 to i8**
  store i8* %1343, i8** %1345, align 8
  %1346 = getelementptr inbounds i8, i8* %1343, i64 6
  %1347 = getelementptr inbounds i8, i8* %1342, i64 16
  %1348 = bitcast i8* %1347 to i8**
  store i8* %1346, i8** %1348, align 8
  %1349 = bitcast i8* %1344 to i64*
  store i8 -1, i8* %1343, align 1
  %1350 = getelementptr inbounds i8, i8* %1343, i64 1
  store i8 -35, i8* %1350, align 1
  %1351 = getelementptr inbounds i8, i8* %1343, i64 2
  store i8 0, i8* %1351, align 1
  %1352 = getelementptr inbounds i8, i8* %1343, i64 3
  store i8 4, i8* %1352, align 1
  %1353 = getelementptr inbounds i8, i8* %1343, i64 4
  store i8 %1340, i8* %1353, align 1
  %1354 = getelementptr inbounds i8, i8* %1343, i64 5
  store i8 %1341, i8* %1354, align 1
  %1355 = ptrtoint i8* %1346 to i64
  store i64 %1355, i64* %1349, align 8
  %1356 = ptrtoint i8* %1343 to i64
  %1357 = ptrtoint i8* %1342 to i64
  %1358 = load i64, i64* %34, align 8
  %1359 = load i64, i64* %36, align 8
  %1360 = sub i64 %1358, %1359
  %1361 = ashr exact i64 %1360, 3
  %1362 = icmp eq i64 %1360, 0
  %1363 = mul i64 %1361, 170
  %1364 = add i64 %1363, -1
  %1365 = select i1 %1362, i64 0, i64 %1364
  %1366 = load i64, i64* %37, align 8
  %1367 = load i64, i64* %38, align 8
  %1368 = add i64 %1367, %1366
  %1369 = icmp eq i64 %1365, %1368
  %1370 = inttoptr i64 %1359 to %"struct.jxl::jpeg::OutputChunk"**
  %1371 = inttoptr i64 %1358 to %"struct.jxl::jpeg::OutputChunk"**
  br i1 %1369, label %1372, label %1378

1372:                                             ; preds = %1337
  call void @_ZNSt3__15dequeIN3jxl4jpeg11OutputChunkENS_9allocatorIS3_EEE19__add_back_capacityEv(%"class.std::__1::deque"* %11) #10
  %1373 = load i64, i64* %38, align 8
  %1374 = load i64, i64* %37, align 8
  %1375 = load %"struct.jxl::jpeg::OutputChunk"**, %"struct.jxl::jpeg::OutputChunk"*** %35, align 8
  %1376 = load %"struct.jxl::jpeg::OutputChunk"**, %"struct.jxl::jpeg::OutputChunk"*** %33, align 8
  %1377 = add i64 %1374, %1373
  br label %1378

1378:                                             ; preds = %1372, %1337
  %1379 = phi i64 [ %1377, %1372 ], [ %1368, %1337 ]
  %1380 = phi %"struct.jxl::jpeg::OutputChunk"** [ %1376, %1372 ], [ %1371, %1337 ]
  %1381 = phi %"struct.jxl::jpeg::OutputChunk"** [ %1375, %1372 ], [ %1370, %1337 ]
  %1382 = icmp eq %"struct.jxl::jpeg::OutputChunk"** %1380, %1381
  br i1 %1382, label %1389, label %1383

1383:                                             ; preds = %1378
  %1384 = udiv i64 %1379, 170
  %1385 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %1381, i64 %1384
  %1386 = load %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %1385, align 8
  %1387 = urem i64 %1379, 170
  %1388 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk", %"struct.jxl::jpeg::OutputChunk"* %1386, i64 %1387
  br label %1389

1389:                                             ; preds = %1383, %1378
  %1390 = phi %"struct.jxl::jpeg::OutputChunk"* [ %1388, %1383 ], [ null, %1378 ]
  %1391 = bitcast %"struct.jxl::jpeg::OutputChunk"* %1390 to i64*
  store i64 %1356, i64* %1391, align 8
  %1392 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk", %"struct.jxl::jpeg::OutputChunk"* %1390, i64 0, i32 1
  store i64 6, i64* %1392, align 8
  %1393 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk", %"struct.jxl::jpeg::OutputChunk"* %1390, i64 0, i32 2
  %1394 = bitcast %"class.std::__1::unique_ptr"* %1393 to i64*
  store i64 %1357, i64* %1394, align 8
  %1395 = load i64, i64* %38, align 8
  %1396 = add i64 %1395, 1
  store i64 %1396, i64* %38, align 8
  br label %1673

1397:                                             ; preds = %272, %272, %272, %272, %272, %272, %272, %272, %272, %272, %272, %272, %272, %272, %272, %272
  %1398 = load i32, i32* %45, align 8
  %1399 = add nsw i32 %1398, 1
  store i32 %1399, i32* %45, align 8
  %1400 = sext i32 %1398 to i64
  %1401 = load i64, i64* %48, align 8
  %1402 = load i64, i64* %49, align 8
  %1403 = sub i64 %1401, %1402
  %1404 = sdiv exact i64 %1403, 24
  %1405 = icmp ugt i64 %1404, %1400
  br i1 %1405, label %1406, label %1672

1406:                                             ; preds = %1397
  %1407 = call i8* @_Znwm(i64 24) #11
  %1408 = call i8* @_Znwm(i64 1) #11
  %1409 = getelementptr inbounds i8, i8* %1407, i64 8
  %1410 = bitcast i8* %1407 to i8**
  store i8* %1408, i8** %1410, align 8
  %1411 = getelementptr inbounds i8, i8* %1408, i64 1
  %1412 = getelementptr inbounds i8, i8* %1407, i64 16
  %1413 = bitcast i8* %1412 to i8**
  store i8* %1411, i8** %1413, align 8
  %1414 = bitcast i8* %1409 to i64*
  store i8 -1, i8* %1408, align 1
  %1415 = ptrtoint i8* %1411 to i64
  store i64 %1415, i64* %1414, align 8
  %1416 = ptrtoint i8* %1408 to i64
  %1417 = ptrtoint i8* %1407 to i64
  %1418 = load i64, i64* %34, align 8
  %1419 = load i64, i64* %36, align 8
  %1420 = sub i64 %1418, %1419
  %1421 = ashr exact i64 %1420, 3
  %1422 = icmp eq i64 %1420, 0
  %1423 = mul i64 %1421, 170
  %1424 = add i64 %1423, -1
  %1425 = select i1 %1422, i64 0, i64 %1424
  %1426 = load i64, i64* %37, align 8
  %1427 = load i64, i64* %38, align 8
  %1428 = add i64 %1427, %1426
  %1429 = icmp eq i64 %1425, %1428
  %1430 = inttoptr i64 %1419 to %"struct.jxl::jpeg::OutputChunk"**
  %1431 = inttoptr i64 %1418 to %"struct.jxl::jpeg::OutputChunk"**
  br i1 %1429, label %1432, label %1438

1432:                                             ; preds = %1406
  call void @_ZNSt3__15dequeIN3jxl4jpeg11OutputChunkENS_9allocatorIS3_EEE19__add_back_capacityEv(%"class.std::__1::deque"* %11) #10
  %1433 = load i64, i64* %38, align 8
  %1434 = load i64, i64* %37, align 8
  %1435 = load %"struct.jxl::jpeg::OutputChunk"**, %"struct.jxl::jpeg::OutputChunk"*** %35, align 8
  %1436 = load %"struct.jxl::jpeg::OutputChunk"**, %"struct.jxl::jpeg::OutputChunk"*** %33, align 8
  %1437 = add i64 %1434, %1433
  br label %1438

1438:                                             ; preds = %1432, %1406
  %1439 = phi i64 [ %1437, %1432 ], [ %1428, %1406 ]
  %1440 = phi %"struct.jxl::jpeg::OutputChunk"** [ %1436, %1432 ], [ %1431, %1406 ]
  %1441 = phi %"struct.jxl::jpeg::OutputChunk"** [ %1435, %1432 ], [ %1430, %1406 ]
  %1442 = icmp eq %"struct.jxl::jpeg::OutputChunk"** %1440, %1441
  br i1 %1442, label %1449, label %1443

1443:                                             ; preds = %1438
  %1444 = udiv i64 %1439, 170
  %1445 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %1441, i64 %1444
  %1446 = load %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %1445, align 8
  %1447 = urem i64 %1439, 170
  %1448 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk", %"struct.jxl::jpeg::OutputChunk"* %1446, i64 %1447
  br label %1449

1449:                                             ; preds = %1443, %1438
  %1450 = phi %"struct.jxl::jpeg::OutputChunk"* [ %1448, %1443 ], [ null, %1438 ]
  %1451 = bitcast %"struct.jxl::jpeg::OutputChunk"* %1450 to i64*
  store i64 %1416, i64* %1451, align 8
  %1452 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk", %"struct.jxl::jpeg::OutputChunk"* %1450, i64 0, i32 1
  store i64 1, i64* %1452, align 8
  %1453 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk", %"struct.jxl::jpeg::OutputChunk"* %1450, i64 0, i32 2
  %1454 = bitcast %"class.std::__1::unique_ptr"* %1453 to i64*
  store i64 %1417, i64* %1454, align 8
  %1455 = load i64, i64* %38, align 8
  %1456 = add i64 %1455, 1
  store i64 %1456, i64* %38, align 8
  %1457 = load %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"** %50, align 8
  %1458 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %1457, i64 %1400
  %1459 = load i64, i64* %34, align 8
  %1460 = load i64, i64* %36, align 8
  %1461 = sub i64 %1459, %1460
  %1462 = ashr exact i64 %1461, 3
  %1463 = icmp eq i64 %1461, 0
  %1464 = mul i64 %1462, 170
  %1465 = add i64 %1464, -1
  %1466 = select i1 %1463, i64 0, i64 %1465
  %1467 = load i64, i64* %37, align 8
  %1468 = add i64 %1467, %1456
  %1469 = icmp eq i64 %1466, %1468
  %1470 = inttoptr i64 %1460 to %"struct.jxl::jpeg::OutputChunk"**
  %1471 = inttoptr i64 %1459 to %"struct.jxl::jpeg::OutputChunk"**
  br i1 %1469, label %1472, label %1478

1472:                                             ; preds = %1449
  call void @_ZNSt3__15dequeIN3jxl4jpeg11OutputChunkENS_9allocatorIS3_EEE19__add_back_capacityEv(%"class.std::__1::deque"* %11) #10
  %1473 = load i64, i64* %38, align 8
  %1474 = load i64, i64* %37, align 8
  %1475 = load %"struct.jxl::jpeg::OutputChunk"**, %"struct.jxl::jpeg::OutputChunk"*** %35, align 8
  %1476 = load %"struct.jxl::jpeg::OutputChunk"**, %"struct.jxl::jpeg::OutputChunk"*** %33, align 8
  %1477 = add i64 %1474, %1473
  br label %1478

1478:                                             ; preds = %1472, %1449
  %1479 = phi i64 [ %1477, %1472 ], [ %1468, %1449 ]
  %1480 = phi %"struct.jxl::jpeg::OutputChunk"** [ %1476, %1472 ], [ %1471, %1449 ]
  %1481 = phi %"struct.jxl::jpeg::OutputChunk"** [ %1475, %1472 ], [ %1470, %1449 ]
  %1482 = icmp eq %"struct.jxl::jpeg::OutputChunk"** %1480, %1481
  br i1 %1482, label %1489, label %1483

1483:                                             ; preds = %1478
  %1484 = udiv i64 %1479, 170
  %1485 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %1481, i64 %1484
  %1486 = load %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %1485, align 8
  %1487 = urem i64 %1479, 170
  %1488 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk", %"struct.jxl::jpeg::OutputChunk"* %1486, i64 %1487
  br label %1489

1489:                                             ; preds = %1483, %1478
  %1490 = phi %"struct.jxl::jpeg::OutputChunk"* [ %1488, %1483 ], [ null, %1478 ]
  %1491 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk", %"struct.jxl::jpeg::OutputChunk"* %1490, i64 0, i32 1
  %1492 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %1457, i64 %1400, i32 0, i32 1
  %1493 = bitcast i8** %1492 to i64*
  %1494 = load i64, i64* %1493, align 8
  %1495 = bitcast %"class.std::__1::vector.0"* %1458 to i64*
  %1496 = load i64, i64* %1495, align 8
  %1497 = sub i64 %1494, %1496
  store i64 %1497, i64* %1491, align 8
  %1498 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk", %"struct.jxl::jpeg::OutputChunk"* %1490, i64 0, i32 2
  %1499 = bitcast %"class.std::__1::unique_ptr"* %1498 to i64*
  store i64 0, i64* %1499, align 8
  %1500 = load i64, i64* %1495, align 8
  %1501 = bitcast %"struct.jxl::jpeg::OutputChunk"* %1490 to i64*
  store i64 %1500, i64* %1501, align 8
  %1502 = load i64, i64* %38, align 8
  %1503 = add i64 %1502, 1
  store i64 %1503, i64* %38, align 8
  br label %1673

1504:                                             ; preds = %272
  %1505 = load i32, i32* %39, align 4
  %1506 = add nsw i32 %1505, 1
  store i32 %1506, i32* %39, align 4
  %1507 = sext i32 %1505 to i64
  %1508 = load i64, i64* %42, align 8
  %1509 = load i64, i64* %43, align 8
  %1510 = sub i64 %1508, %1509
  %1511 = sdiv exact i64 %1510, 24
  %1512 = icmp ugt i64 %1511, %1507
  br i1 %1512, label %1513, label %1672

1513:                                             ; preds = %1504
  %1514 = call i8* @_Znwm(i64 24) #11
  %1515 = call i8* @_Znwm(i64 1) #11
  %1516 = getelementptr inbounds i8, i8* %1514, i64 8
  %1517 = bitcast i8* %1514 to i8**
  store i8* %1515, i8** %1517, align 8
  %1518 = getelementptr inbounds i8, i8* %1515, i64 1
  %1519 = getelementptr inbounds i8, i8* %1514, i64 16
  %1520 = bitcast i8* %1519 to i8**
  store i8* %1518, i8** %1520, align 8
  %1521 = bitcast i8* %1516 to i64*
  store i8 -1, i8* %1515, align 1
  %1522 = ptrtoint i8* %1518 to i64
  store i64 %1522, i64* %1521, align 8
  %1523 = ptrtoint i8* %1515 to i64
  %1524 = ptrtoint i8* %1514 to i64
  %1525 = load i64, i64* %34, align 8
  %1526 = load i64, i64* %36, align 8
  %1527 = sub i64 %1525, %1526
  %1528 = ashr exact i64 %1527, 3
  %1529 = icmp eq i64 %1527, 0
  %1530 = mul i64 %1528, 170
  %1531 = add i64 %1530, -1
  %1532 = select i1 %1529, i64 0, i64 %1531
  %1533 = load i64, i64* %37, align 8
  %1534 = load i64, i64* %38, align 8
  %1535 = add i64 %1534, %1533
  %1536 = icmp eq i64 %1532, %1535
  %1537 = inttoptr i64 %1526 to %"struct.jxl::jpeg::OutputChunk"**
  %1538 = inttoptr i64 %1525 to %"struct.jxl::jpeg::OutputChunk"**
  br i1 %1536, label %1539, label %1545

1539:                                             ; preds = %1513
  call void @_ZNSt3__15dequeIN3jxl4jpeg11OutputChunkENS_9allocatorIS3_EEE19__add_back_capacityEv(%"class.std::__1::deque"* %11) #10
  %1540 = load i64, i64* %38, align 8
  %1541 = load i64, i64* %37, align 8
  %1542 = load %"struct.jxl::jpeg::OutputChunk"**, %"struct.jxl::jpeg::OutputChunk"*** %35, align 8
  %1543 = load %"struct.jxl::jpeg::OutputChunk"**, %"struct.jxl::jpeg::OutputChunk"*** %33, align 8
  %1544 = add i64 %1541, %1540
  br label %1545

1545:                                             ; preds = %1539, %1513
  %1546 = phi i64 [ %1544, %1539 ], [ %1535, %1513 ]
  %1547 = phi %"struct.jxl::jpeg::OutputChunk"** [ %1543, %1539 ], [ %1538, %1513 ]
  %1548 = phi %"struct.jxl::jpeg::OutputChunk"** [ %1542, %1539 ], [ %1537, %1513 ]
  %1549 = icmp eq %"struct.jxl::jpeg::OutputChunk"** %1547, %1548
  br i1 %1549, label %1556, label %1550

1550:                                             ; preds = %1545
  %1551 = udiv i64 %1546, 170
  %1552 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %1548, i64 %1551
  %1553 = load %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %1552, align 8
  %1554 = urem i64 %1546, 170
  %1555 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk", %"struct.jxl::jpeg::OutputChunk"* %1553, i64 %1554
  br label %1556

1556:                                             ; preds = %1550, %1545
  %1557 = phi %"struct.jxl::jpeg::OutputChunk"* [ %1555, %1550 ], [ null, %1545 ]
  %1558 = bitcast %"struct.jxl::jpeg::OutputChunk"* %1557 to i64*
  store i64 %1523, i64* %1558, align 8
  %1559 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk", %"struct.jxl::jpeg::OutputChunk"* %1557, i64 0, i32 1
  store i64 1, i64* %1559, align 8
  %1560 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk", %"struct.jxl::jpeg::OutputChunk"* %1557, i64 0, i32 2
  %1561 = bitcast %"class.std::__1::unique_ptr"* %1560 to i64*
  store i64 %1524, i64* %1561, align 8
  %1562 = load i64, i64* %38, align 8
  %1563 = add i64 %1562, 1
  store i64 %1563, i64* %38, align 8
  %1564 = load %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"** %44, align 8
  %1565 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %1564, i64 %1507
  %1566 = load i64, i64* %34, align 8
  %1567 = load i64, i64* %36, align 8
  %1568 = sub i64 %1566, %1567
  %1569 = ashr exact i64 %1568, 3
  %1570 = icmp eq i64 %1568, 0
  %1571 = mul i64 %1569, 170
  %1572 = add i64 %1571, -1
  %1573 = select i1 %1570, i64 0, i64 %1572
  %1574 = load i64, i64* %37, align 8
  %1575 = add i64 %1574, %1563
  %1576 = icmp eq i64 %1573, %1575
  %1577 = inttoptr i64 %1567 to %"struct.jxl::jpeg::OutputChunk"**
  %1578 = inttoptr i64 %1566 to %"struct.jxl::jpeg::OutputChunk"**
  br i1 %1576, label %1579, label %1585

1579:                                             ; preds = %1556
  call void @_ZNSt3__15dequeIN3jxl4jpeg11OutputChunkENS_9allocatorIS3_EEE19__add_back_capacityEv(%"class.std::__1::deque"* %11) #10
  %1580 = load i64, i64* %38, align 8
  %1581 = load i64, i64* %37, align 8
  %1582 = load %"struct.jxl::jpeg::OutputChunk"**, %"struct.jxl::jpeg::OutputChunk"*** %35, align 8
  %1583 = load %"struct.jxl::jpeg::OutputChunk"**, %"struct.jxl::jpeg::OutputChunk"*** %33, align 8
  %1584 = add i64 %1581, %1580
  br label %1585

1585:                                             ; preds = %1579, %1556
  %1586 = phi i64 [ %1584, %1579 ], [ %1575, %1556 ]
  %1587 = phi %"struct.jxl::jpeg::OutputChunk"** [ %1583, %1579 ], [ %1578, %1556 ]
  %1588 = phi %"struct.jxl::jpeg::OutputChunk"** [ %1582, %1579 ], [ %1577, %1556 ]
  %1589 = icmp eq %"struct.jxl::jpeg::OutputChunk"** %1587, %1588
  br i1 %1589, label %1596, label %1590

1590:                                             ; preds = %1585
  %1591 = udiv i64 %1586, 170
  %1592 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %1588, i64 %1591
  %1593 = load %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %1592, align 8
  %1594 = urem i64 %1586, 170
  %1595 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk", %"struct.jxl::jpeg::OutputChunk"* %1593, i64 %1594
  br label %1596

1596:                                             ; preds = %1590, %1585
  %1597 = phi %"struct.jxl::jpeg::OutputChunk"* [ %1595, %1590 ], [ null, %1585 ]
  %1598 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk", %"struct.jxl::jpeg::OutputChunk"* %1597, i64 0, i32 1
  %1599 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %1564, i64 %1507, i32 0, i32 1
  %1600 = bitcast i8** %1599 to i64*
  %1601 = load i64, i64* %1600, align 8
  %1602 = bitcast %"class.std::__1::vector.0"* %1565 to i64*
  %1603 = load i64, i64* %1602, align 8
  %1604 = sub i64 %1601, %1603
  store i64 %1604, i64* %1598, align 8
  %1605 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk", %"struct.jxl::jpeg::OutputChunk"* %1597, i64 0, i32 2
  %1606 = bitcast %"class.std::__1::unique_ptr"* %1605 to i64*
  store i64 0, i64* %1606, align 8
  %1607 = load i64, i64* %1602, align 8
  %1608 = bitcast %"struct.jxl::jpeg::OutputChunk"* %1597 to i64*
  store i64 %1607, i64* %1608, align 8
  %1609 = load i64, i64* %38, align 8
  %1610 = add i64 %1609, 1
  store i64 %1610, i64* %38, align 8
  br label %1673

1611:                                             ; preds = %272
  %1612 = load i32, i32* %28, align 8
  %1613 = add nsw i32 %1612, 1
  store i32 %1613, i32* %28, align 8
  %1614 = sext i32 %1612 to i64
  %1615 = load i64, i64* %31, align 8
  %1616 = load i64, i64* %32, align 8
  %1617 = sub i64 %1615, %1616
  %1618 = sdiv exact i64 %1617, 24
  %1619 = icmp ugt i64 %1618, %1614
  %1620 = inttoptr i64 %1616 to %"class.std::__1::vector.0"*
  br i1 %1619, label %1621, label %1672

1621:                                             ; preds = %1611
  %1622 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %1620, i64 %1614
  %1623 = load i64, i64* %34, align 8
  %1624 = load i64, i64* %36, align 8
  %1625 = sub i64 %1623, %1624
  %1626 = ashr exact i64 %1625, 3
  %1627 = icmp eq i64 %1625, 0
  %1628 = mul i64 %1626, 170
  %1629 = add i64 %1628, -1
  %1630 = select i1 %1627, i64 0, i64 %1629
  %1631 = load i64, i64* %37, align 8
  %1632 = load i64, i64* %38, align 8
  %1633 = add i64 %1632, %1631
  %1634 = icmp eq i64 %1630, %1633
  %1635 = inttoptr i64 %1624 to %"struct.jxl::jpeg::OutputChunk"**
  %1636 = inttoptr i64 %1623 to %"struct.jxl::jpeg::OutputChunk"**
  br i1 %1634, label %1637, label %1643

1637:                                             ; preds = %1621
  call void @_ZNSt3__15dequeIN3jxl4jpeg11OutputChunkENS_9allocatorIS3_EEE19__add_back_capacityEv(%"class.std::__1::deque"* %11) #10
  %1638 = load i64, i64* %38, align 8
  %1639 = load i64, i64* %37, align 8
  %1640 = load %"struct.jxl::jpeg::OutputChunk"**, %"struct.jxl::jpeg::OutputChunk"*** %35, align 8
  %1641 = load %"struct.jxl::jpeg::OutputChunk"**, %"struct.jxl::jpeg::OutputChunk"*** %33, align 8
  %1642 = add i64 %1639, %1638
  br label %1643

1643:                                             ; preds = %1637, %1621
  %1644 = phi i64 [ %1642, %1637 ], [ %1633, %1621 ]
  %1645 = phi %"struct.jxl::jpeg::OutputChunk"** [ %1641, %1637 ], [ %1636, %1621 ]
  %1646 = phi %"struct.jxl::jpeg::OutputChunk"** [ %1640, %1637 ], [ %1635, %1621 ]
  %1647 = icmp eq %"struct.jxl::jpeg::OutputChunk"** %1645, %1646
  br i1 %1647, label %1654, label %1648

1648:                                             ; preds = %1643
  %1649 = udiv i64 %1644, 170
  %1650 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %1646, i64 %1649
  %1651 = load %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %1650, align 8
  %1652 = urem i64 %1644, 170
  %1653 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk", %"struct.jxl::jpeg::OutputChunk"* %1651, i64 %1652
  br label %1654

1654:                                             ; preds = %1648, %1643
  %1655 = phi %"struct.jxl::jpeg::OutputChunk"* [ %1653, %1648 ], [ null, %1643 ]
  %1656 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk", %"struct.jxl::jpeg::OutputChunk"* %1655, i64 0, i32 1
  %1657 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %1620, i64 %1614, i32 0, i32 1
  %1658 = bitcast i8** %1657 to i64*
  %1659 = load i64, i64* %1658, align 8
  %1660 = bitcast %"class.std::__1::vector.0"* %1622 to i64*
  %1661 = load i64, i64* %1660, align 8
  %1662 = sub i64 %1659, %1661
  store i64 %1662, i64* %1656, align 8
  %1663 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk", %"struct.jxl::jpeg::OutputChunk"* %1655, i64 0, i32 2
  %1664 = bitcast %"class.std::__1::unique_ptr"* %1663 to i64*
  store i64 0, i64* %1664, align 8
  %1665 = load i64, i64* %1660, align 8
  %1666 = bitcast %"struct.jxl::jpeg::OutputChunk"* %1655 to i64*
  store i64 %1665, i64* %1666, align 8
  %1667 = load i64, i64* %38, align 8
  %1668 = add i64 %1667, 1
  store i64 %1668, i64* %38, align 8
  br label %1673

1669:                                             ; preds = %1236, %1240, %1242
  %1670 = phi i32 [ %1237, %1236 ], [ %1241, %1240 ], [ %1243, %1242 ]
  %1671 = icmp eq i32 %1670, 2
  br i1 %1671, label %1672, label %1673

1672:                                             ; preds = %1289, %424, %326, %453, %1611, %1504, %1397, %272, %1669
  store i32 3, i32* %10, align 8
  br label %1743

1673:                                             ; preds = %1310, %1036, %353, %1654, %1596, %1489, %281, %1113, %1203, %1389, %1669
  %1674 = phi i32 [ %1670, %1669 ], [ 3, %1389 ], [ 3, %1203 ], [ 3, %1113 ], [ 3, %281 ], [ 3, %1489 ], [ 3, %1596 ], [ 3, %1654 ], [ 3, %353 ], [ 3, %1036 ], [ 3, %1310 ]
  %1675 = load i32, i32* %10, align 8
  %1676 = icmp eq i32 %1675, 3
  %1677 = load i64, i64* %38, align 8
  %1678 = icmp eq i64 %1677, 0
  %1679 = or i1 %1676, %1678
  br i1 %1679, label %1738, label %1680

1680:                                             ; preds = %1673, %1735
  %1681 = load %"struct.jxl::jpeg::OutputChunk"**, %"struct.jxl::jpeg::OutputChunk"*** %35, align 8
  %1682 = load i64, i64* %37, align 8
  %1683 = udiv i64 %1682, 170
  %1684 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %1681, i64 %1683
  %1685 = load %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %1684, align 8
  %1686 = urem i64 %1682, 170
  %1687 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk", %"struct.jxl::jpeg::OutputChunk"* %1685, i64 %1686, i32 0
  %1688 = load i8*, i8** %1687, align 8
  %1689 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk", %"struct.jxl::jpeg::OutputChunk"* %1685, i64 %1686, i32 1
  %1690 = load i64, i64* %1689, align 8
  %1691 = load i64 (%"union.std::__1::__function::__policy_storage"*, i8*, i64)*, i64 (%"union.std::__1::__function::__policy_storage"*, i8*, i64)** %86, align 8
  %1692 = call i64 %1691(%"union.std::__1::__function::__policy_storage"* %87, i8* %1688, i64 %1690) #10
  %1693 = icmp ne i64 %1692, 0
  %1694 = load i64, i64* %1689, align 8
  %1695 = icmp eq i64 %1694, 0
  %1696 = or i1 %1693, %1695
  br i1 %1696, label %1697, label %1750

1697:                                             ; preds = %1680
  %1698 = sub i64 %1694, %1692
  store i64 %1698, i64* %1689, align 8
  %1699 = icmp eq i64 %1698, 0
  br i1 %1699, label %1700, label %1733

1700:                                             ; preds = %1697
  %1701 = load %"struct.jxl::jpeg::OutputChunk"**, %"struct.jxl::jpeg::OutputChunk"*** %35, align 8
  %1702 = load i64, i64* %37, align 8
  %1703 = udiv i64 %1702, 170
  %1704 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %1701, i64 %1703
  %1705 = load %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %1704, align 8
  %1706 = urem i64 %1702, 170
  %1707 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk", %"struct.jxl::jpeg::OutputChunk"* %1705, i64 %1706, i32 2, i32 0, i32 0, i32 0
  %1708 = load %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"** %1707, align 8
  store %"class.std::__1::vector.0"* null, %"class.std::__1::vector.0"** %1707, align 8
  %1709 = icmp eq %"class.std::__1::vector.0"* %1708, null
  br i1 %1709, label %1720, label %1710

1710:                                             ; preds = %1700
  %1711 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %1708, i64 0, i32 0, i32 0
  %1712 = load i8*, i8** %1711, align 8
  %1713 = icmp eq i8* %1712, null
  br i1 %1713, label %1718, label %1714

1714:                                             ; preds = %1710
  %1715 = ptrtoint i8* %1712 to i64
  %1716 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %1708, i64 0, i32 0, i32 1
  %1717 = bitcast i8** %1716 to i64*
  store i64 %1715, i64* %1717, align 8
  call void @_ZdlPv(i8* nonnull %1712) #11
  br label %1718

1718:                                             ; preds = %1714, %1710
  %1719 = bitcast %"class.std::__1::vector.0"* %1708 to i8*
  call void @_ZdlPv(i8* %1719) #11
  br label %1720

1720:                                             ; preds = %1718, %1700
  %1721 = load <2 x i64>, <2 x i64>* %104, align 8
  %1722 = add <2 x i64> %1721, <i64 1, i64 -1>
  store <2 x i64> %1722, <2 x i64>* %105, align 8
  %1723 = extractelement <2 x i64> %1722, i32 0
  %1724 = icmp ult i64 %1723, 340
  %1725 = extractelement <2 x i64> %1722, i32 1
  br i1 %1724, label %1735, label %1726

1726:                                             ; preds = %1720
  %1727 = load i8**, i8*** %88, align 8
  %1728 = load i8*, i8** %1727, align 8
  call void @_ZdlPv(i8* %1728) #11
  %1729 = load %"struct.jxl::jpeg::OutputChunk"**, %"struct.jxl::jpeg::OutputChunk"*** %35, align 8
  %1730 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %1729, i64 1
  store %"struct.jxl::jpeg::OutputChunk"** %1730, %"struct.jxl::jpeg::OutputChunk"*** %35, align 8
  %1731 = load i64, i64* %37, align 8
  %1732 = add i64 %1731, -170
  store i64 %1732, i64* %37, align 8
  br label %1733

1733:                                             ; preds = %1697, %1726
  %1734 = load i64, i64* %38, align 8
  br label %1735

1735:                                             ; preds = %1733, %1720
  %1736 = phi i64 [ %1734, %1733 ], [ %1725, %1720 ]
  %1737 = icmp eq i64 %1736, 0
  br i1 %1737, label %1738, label %1680

1738:                                             ; preds = %1735, %1673
  switch i32 %1674, label %1739 [
    i32 0, label %1750
    i32 3, label %1740
  ]

1739:                                             ; preds = %1738
  store i32 3, i32* %10, align 8
  br label %1743

1740:                                             ; preds = %1738
  %1741 = load i64, i64* %23, align 8
  %1742 = add i64 %1741, 1
  store i64 %1742, i64* %23, align 8
  br label %1743

1743:                                             ; preds = %1740, %1739, %1672, %108, %271, %264, %114
  br label %108

1744:                                             ; preds = %108
  %1745 = load i64, i64* %38, align 8
  %1746 = icmp eq i64 %1745, 0
  br i1 %1746, label %1750, label %1747

1747:                                             ; preds = %1744
  %1748 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.1, i64 0, i64 0), i32 982, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.3, i64 0, i64 0)) #10
  %1749 = call zeroext i1 @_ZN3jxl5AbortEv() #12
  unreachable

1750:                                             ; preds = %108, %1738, %1680, %206, %1744
  %1751 = phi i32 [ 0, %1744 ], [ -1, %206 ], [ -1, %1680 ], [ 1, %1738 ], [ 1, %108 ]
  call void @_ZN3jxl4jpeg18SerializationStateD2Ev(%"struct.jxl::jpeg::SerializationState"* nonnull %8) #10
  call void @llvm.lifetime.end.p0i8(i64 336, i8* nonnull %9) #10
  ret i32 %1751
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare zeroext i1 @_ZN3jxl5DebugEPKcz(i8*, ...) local_unnamed_addr #2

; Function Attrs: noreturn
declare zeroext i1 @_ZN3jxl5AbortEv() local_unnamed_addr #3

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl4jpeg18SerializationStateD2Ev(%"struct.jxl::jpeg::SerializationState"*) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %0, i64 0, i32 16, i32 8, i32 2, i32 0, i32 0
  %3 = load i32*, i32** %2, align 8
  %4 = icmp eq i32* %3, null
  br i1 %4, label %10, label %5

5:                                                ; preds = %1
  %6 = ptrtoint i32* %3 to i64
  %7 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %0, i64 0, i32 16, i32 8, i32 2, i32 0, i32 1
  %8 = bitcast i32** %7 to i64*
  store i64 %6, i64* %8, align 8
  %9 = bitcast i32* %3 to i8*
  tail call void @_ZdlPv(i8* %9) #11
  br label %10

10:                                               ; preds = %5, %1
  %11 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %0, i64 0, i32 16, i32 2, i32 3, i32 2, i32 0, i32 0, i32 0
  %12 = load %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"** %11, align 8
  store %"class.std::__1::vector.0"* null, %"class.std::__1::vector.0"** %11, align 8
  %13 = icmp eq %"class.std::__1::vector.0"* %12, null
  br i1 %13, label %24, label %14

14:                                               ; preds = %10
  %15 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %12, i64 0, i32 0, i32 0
  %16 = load i8*, i8** %15, align 8
  %17 = icmp eq i8* %16, null
  br i1 %17, label %22, label %18

18:                                               ; preds = %14
  %19 = ptrtoint i8* %16 to i64
  %20 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %12, i64 0, i32 0, i32 1
  %21 = bitcast i8** %20 to i64*
  store i64 %19, i64* %21, align 8
  tail call void @_ZdlPv(i8* nonnull %16) #11
  br label %22

22:                                               ; preds = %18, %14
  %23 = bitcast %"class.std::__1::vector.0"* %12 to i8*
  tail call void @_ZdlPv(i8* %23) #11
  br label %24

24:                                               ; preds = %10, %22
  %25 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %0, i64 0, i32 10, i32 0, i32 0
  %26 = load %"struct.jxl::jpeg::HuffmanCodeTable"*, %"struct.jxl::jpeg::HuffmanCodeTable"** %25, align 8
  %27 = icmp eq %"struct.jxl::jpeg::HuffmanCodeTable"* %26, null
  br i1 %27, label %33, label %28

28:                                               ; preds = %24
  %29 = ptrtoint %"struct.jxl::jpeg::HuffmanCodeTable"* %26 to i64
  %30 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %0, i64 0, i32 10, i32 0, i32 1
  %31 = bitcast %"struct.jxl::jpeg::HuffmanCodeTable"** %30 to i64*
  store i64 %29, i64* %31, align 8
  %32 = bitcast %"struct.jxl::jpeg::HuffmanCodeTable"* %26 to i8*
  tail call void @_ZdlPv(i8* %32) #11
  br label %33

33:                                               ; preds = %24, %28
  %34 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %0, i64 0, i32 9, i32 0, i32 0
  %35 = load %"struct.jxl::jpeg::HuffmanCodeTable"*, %"struct.jxl::jpeg::HuffmanCodeTable"** %34, align 8
  %36 = icmp eq %"struct.jxl::jpeg::HuffmanCodeTable"* %35, null
  br i1 %36, label %42, label %37

37:                                               ; preds = %33
  %38 = ptrtoint %"struct.jxl::jpeg::HuffmanCodeTable"* %35 to i64
  %39 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %0, i64 0, i32 9, i32 0, i32 1
  %40 = bitcast %"struct.jxl::jpeg::HuffmanCodeTable"** %39 to i64*
  store i64 %38, i64* %40, align 8
  %41 = bitcast %"struct.jxl::jpeg::HuffmanCodeTable"* %35 to i8*
  tail call void @_ZdlPv(i8* %41) #11
  br label %42

42:                                               ; preds = %33, %37
  %43 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %0, i64 0, i32 1, i32 0
  tail call void @_ZNSt3__112__deque_baseIN3jxl4jpeg11OutputChunkENS_9allocatorIS3_EEE5clearEv(%"class.std::__1::__deque_base"* %43) #10
  %44 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  %45 = load %"struct.jxl::jpeg::OutputChunk"**, %"struct.jxl::jpeg::OutputChunk"*** %44, align 8
  %46 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %0, i64 0, i32 1, i32 0, i32 0, i32 2
  %47 = load %"struct.jxl::jpeg::OutputChunk"**, %"struct.jxl::jpeg::OutputChunk"*** %46, align 8
  %48 = icmp eq %"struct.jxl::jpeg::OutputChunk"** %45, %47
  br i1 %48, label %67, label %49

49:                                               ; preds = %42, %49
  %50 = phi %"struct.jxl::jpeg::OutputChunk"** [ %53, %49 ], [ %45, %42 ]
  %51 = bitcast %"struct.jxl::jpeg::OutputChunk"** %50 to i8**
  %52 = load i8*, i8** %51, align 8
  tail call void @_ZdlPv(i8* %52) #11
  %53 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %50, i64 1
  %54 = icmp eq %"struct.jxl::jpeg::OutputChunk"** %53, %47
  br i1 %54, label %55, label %49

55:                                               ; preds = %49
  %56 = load %"struct.jxl::jpeg::OutputChunk"**, %"struct.jxl::jpeg::OutputChunk"*** %44, align 8
  %57 = load %"struct.jxl::jpeg::OutputChunk"**, %"struct.jxl::jpeg::OutputChunk"*** %46, align 8
  %58 = icmp eq %"struct.jxl::jpeg::OutputChunk"** %57, %56
  br i1 %58, label %67, label %59

59:                                               ; preds = %55
  %60 = ptrtoint %"struct.jxl::jpeg::OutputChunk"** %56 to i64
  %61 = getelementptr %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %57, i64 -1
  %62 = ptrtoint %"struct.jxl::jpeg::OutputChunk"** %61 to i64
  %63 = sub i64 %62, %60
  %64 = lshr i64 %63, 3
  %65 = xor i64 %64, -1
  %66 = getelementptr %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %57, i64 %65
  store %"struct.jxl::jpeg::OutputChunk"** %66, %"struct.jxl::jpeg::OutputChunk"*** %46, align 8
  br label %67

67:                                               ; preds = %59, %55, %42
  %68 = getelementptr inbounds %"class.std::__1::__deque_base", %"class.std::__1::__deque_base"* %43, i64 0, i32 0, i32 0
  %69 = load %"struct.jxl::jpeg::OutputChunk"**, %"struct.jxl::jpeg::OutputChunk"*** %68, align 8
  %70 = icmp eq %"struct.jxl::jpeg::OutputChunk"** %69, null
  br i1 %70, label %73, label %71

71:                                               ; preds = %67
  %72 = bitcast %"struct.jxl::jpeg::OutputChunk"** %69 to i8*
  tail call void @_ZdlPv(i8* %72) #11
  br label %73

73:                                               ; preds = %67, %71
  ret void
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #5

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #3

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__15dequeIN3jxl4jpeg11OutputChunkENS_9allocatorIS3_EEE19__add_back_capacityEv(%"class.std::__1::deque"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"struct.jxl::jpeg::OutputChunk"*, align 8
  %3 = alloca %"struct.jxl::jpeg::OutputChunk"*, align 8
  %4 = alloca %"struct.std::__1::__split_buffer.93", align 8
  %5 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = icmp ugt i64 %6, 169
  br i1 %7, label %8, label %162

8:                                                ; preds = %1
  %9 = add i64 %6, -170
  store i64 %9, i64* %5, align 8
  %10 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 1
  %11 = load %"struct.jxl::jpeg::OutputChunk"**, %"struct.jxl::jpeg::OutputChunk"*** %10, align 8
  %12 = bitcast %"struct.jxl::jpeg::OutputChunk"** %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %11, i64 1
  store %"struct.jxl::jpeg::OutputChunk"** %14, %"struct.jxl::jpeg::OutputChunk"*** %10, align 8
  %15 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 2
  %16 = load %"struct.jxl::jpeg::OutputChunk"**, %"struct.jxl::jpeg::OutputChunk"*** %15, align 8
  %17 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %18 = load %"struct.jxl::jpeg::OutputChunk"**, %"struct.jxl::jpeg::OutputChunk"*** %17, align 8
  %19 = icmp eq %"struct.jxl::jpeg::OutputChunk"** %16, %18
  %20 = ptrtoint %"struct.jxl::jpeg::OutputChunk"** %18 to i64
  %21 = bitcast %"struct.jxl::jpeg::OutputChunk"** %16 to i64*
  br i1 %19, label %22, label %158

22:                                               ; preds = %8
  %23 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load %"struct.jxl::jpeg::OutputChunk"**, %"struct.jxl::jpeg::OutputChunk"*** %23, align 8
  %25 = icmp ugt %"struct.jxl::jpeg::OutputChunk"** %14, %24
  %26 = ptrtoint %"struct.jxl::jpeg::OutputChunk"** %24 to i64
  br i1 %25, label %27, label %47

27:                                               ; preds = %22
  %28 = ptrtoint %"struct.jxl::jpeg::OutputChunk"** %14 to i64
  %29 = sub i64 %28, %26
  %30 = ashr exact i64 %29, 3
  %31 = add nsw i64 %30, 1
  %32 = sdiv i64 %31, -2
  %33 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %14, i64 %32
  %34 = ptrtoint %"struct.jxl::jpeg::OutputChunk"** %16 to i64
  %35 = sub i64 %34, %28
  %36 = ashr exact i64 %35, 3
  %37 = icmp eq i64 %35, 0
  br i1 %37, label %42, label %38

38:                                               ; preds = %27
  %39 = bitcast %"struct.jxl::jpeg::OutputChunk"** %33 to i8*
  %40 = bitcast %"struct.jxl::jpeg::OutputChunk"** %14 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %39, i8* align 8 %40, i64 %35, i1 false) #10
  %41 = load %"struct.jxl::jpeg::OutputChunk"**, %"struct.jxl::jpeg::OutputChunk"*** %10, align 8
  br label %42

42:                                               ; preds = %38, %27
  %43 = phi %"struct.jxl::jpeg::OutputChunk"** [ %14, %27 ], [ %41, %38 ]
  %44 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %33, i64 %36
  store %"struct.jxl::jpeg::OutputChunk"** %44, %"struct.jxl::jpeg::OutputChunk"*** %15, align 8
  %45 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %43, i64 %32
  store %"struct.jxl::jpeg::OutputChunk"** %45, %"struct.jxl::jpeg::OutputChunk"*** %10, align 8
  %46 = bitcast %"struct.jxl::jpeg::OutputChunk"** %44 to i64*
  br label %158

47:                                               ; preds = %22
  %48 = bitcast %"struct.jxl::jpeg::OutputChunk"*** %17 to i64*
  %49 = bitcast %"class.std::__1::deque"* %0 to i64*
  %50 = sub i64 %20, %26
  %51 = ashr exact i64 %50, 2
  %52 = icmp eq i64 %50, 0
  %53 = select i1 %52, i64 1, i64 %51
  %54 = icmp ugt i64 %53, 2305843009213693951
  br i1 %54, label %55, label %56

55:                                               ; preds = %47
  tail call void @abort() #12
  unreachable

56:                                               ; preds = %47
  %57 = lshr i64 %53, 2
  %58 = shl i64 %53, 3
  %59 = tail call i8* @_Znwm(i64 %58) #11
  %60 = bitcast i8* %59 to %"struct.jxl::jpeg::OutputChunk"**
  %61 = ptrtoint i8* %59 to i64
  %62 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %60, i64 %57
  %63 = ptrtoint %"struct.jxl::jpeg::OutputChunk"** %62 to i64
  %64 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %60, i64 %53
  %65 = ptrtoint %"struct.jxl::jpeg::OutputChunk"** %64 to i64
  %66 = ptrtoint %"struct.jxl::jpeg::OutputChunk"** %14 to i64
  %67 = ptrtoint %"struct.jxl::jpeg::OutputChunk"** %16 to i64
  %68 = sub i64 %67, %66
  %69 = ashr exact i64 %68, 3
  %70 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %62, i64 %69
  %71 = icmp eq i64 %68, 0
  br i1 %71, label %147, label %72

72:                                               ; preds = %56
  %73 = add i64 %68, -8
  %74 = lshr i64 %73, 3
  %75 = add nuw nsw i64 %74, 1
  %76 = and i64 %75, 7
  %77 = icmp eq i64 %76, 0
  br i1 %77, label %93, label %78

78:                                               ; preds = %72, %78
  %79 = phi %"struct.jxl::jpeg::OutputChunk"** [ %86, %78 ], [ %62, %72 ]
  %80 = phi i64 [ %87, %78 ], [ %63, %72 ]
  %81 = phi %"struct.jxl::jpeg::OutputChunk"** [ %88, %78 ], [ %14, %72 ]
  %82 = phi i64 [ %89, %78 ], [ %76, %72 ]
  %83 = bitcast %"struct.jxl::jpeg::OutputChunk"** %81 to i64*
  %84 = load i64, i64* %83, align 8
  %85 = inttoptr i64 %80 to i64*
  store i64 %84, i64* %85, align 8
  %86 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %79, i64 1
  %87 = ptrtoint %"struct.jxl::jpeg::OutputChunk"** %86 to i64
  %88 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %81, i64 1
  %89 = add i64 %82, -1
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %91, label %78, !llvm.loop !17

91:                                               ; preds = %78
  %92 = ptrtoint %"struct.jxl::jpeg::OutputChunk"** %86 to i64
  br label %93

93:                                               ; preds = %72, %91
  %94 = phi %"struct.jxl::jpeg::OutputChunk"** [ %62, %72 ], [ %86, %91 ]
  %95 = phi i64 [ %63, %72 ], [ %92, %91 ]
  %96 = phi %"struct.jxl::jpeg::OutputChunk"** [ %14, %72 ], [ %88, %91 ]
  %97 = icmp ult i64 %73, 56
  br i1 %97, label %144, label %98

98:                                               ; preds = %93, %98
  %99 = phi %"struct.jxl::jpeg::OutputChunk"** [ %140, %98 ], [ %94, %93 ]
  %100 = phi i64 [ %141, %98 ], [ %95, %93 ]
  %101 = phi %"struct.jxl::jpeg::OutputChunk"** [ %142, %98 ], [ %96, %93 ]
  %102 = bitcast %"struct.jxl::jpeg::OutputChunk"** %101 to i64*
  %103 = load i64, i64* %102, align 8
  %104 = inttoptr i64 %100 to i64*
  store i64 %103, i64* %104, align 8
  %105 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %99, i64 1
  %106 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %101, i64 1
  %107 = bitcast %"struct.jxl::jpeg::OutputChunk"** %106 to i64*
  %108 = load i64, i64* %107, align 8
  %109 = bitcast %"struct.jxl::jpeg::OutputChunk"** %105 to i64*
  store i64 %108, i64* %109, align 8
  %110 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %99, i64 2
  %111 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %101, i64 2
  %112 = bitcast %"struct.jxl::jpeg::OutputChunk"** %111 to i64*
  %113 = load i64, i64* %112, align 8
  %114 = bitcast %"struct.jxl::jpeg::OutputChunk"** %110 to i64*
  store i64 %113, i64* %114, align 8
  %115 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %99, i64 3
  %116 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %101, i64 3
  %117 = bitcast %"struct.jxl::jpeg::OutputChunk"** %116 to i64*
  %118 = load i64, i64* %117, align 8
  %119 = bitcast %"struct.jxl::jpeg::OutputChunk"** %115 to i64*
  store i64 %118, i64* %119, align 8
  %120 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %99, i64 4
  %121 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %101, i64 4
  %122 = bitcast %"struct.jxl::jpeg::OutputChunk"** %121 to i64*
  %123 = load i64, i64* %122, align 8
  %124 = bitcast %"struct.jxl::jpeg::OutputChunk"** %120 to i64*
  store i64 %123, i64* %124, align 8
  %125 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %99, i64 5
  %126 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %101, i64 5
  %127 = bitcast %"struct.jxl::jpeg::OutputChunk"** %126 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = bitcast %"struct.jxl::jpeg::OutputChunk"** %125 to i64*
  store i64 %128, i64* %129, align 8
  %130 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %99, i64 6
  %131 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %101, i64 6
  %132 = bitcast %"struct.jxl::jpeg::OutputChunk"** %131 to i64*
  %133 = load i64, i64* %132, align 8
  %134 = bitcast %"struct.jxl::jpeg::OutputChunk"** %130 to i64*
  store i64 %133, i64* %134, align 8
  %135 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %99, i64 7
  %136 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %101, i64 7
  %137 = bitcast %"struct.jxl::jpeg::OutputChunk"** %136 to i64*
  %138 = load i64, i64* %137, align 8
  %139 = bitcast %"struct.jxl::jpeg::OutputChunk"** %135 to i64*
  store i64 %138, i64* %139, align 8
  %140 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %99, i64 8
  %141 = ptrtoint %"struct.jxl::jpeg::OutputChunk"** %140 to i64
  %142 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %101, i64 8
  %143 = icmp eq %"struct.jxl::jpeg::OutputChunk"** %70, %140
  br i1 %143, label %144, label %98

144:                                              ; preds = %98, %93
  %145 = ptrtoint %"struct.jxl::jpeg::OutputChunk"** %70 to i64
  %146 = load %"struct.jxl::jpeg::OutputChunk"**, %"struct.jxl::jpeg::OutputChunk"*** %23, align 8
  br label %147

147:                                              ; preds = %144, %56
  %148 = phi %"struct.jxl::jpeg::OutputChunk"** [ %146, %144 ], [ %24, %56 ]
  %149 = phi i64 [ %145, %144 ], [ %63, %56 ]
  store i64 %61, i64* %49, align 8
  %150 = bitcast %"struct.jxl::jpeg::OutputChunk"*** %10 to i64*
  store i64 %63, i64* %150, align 8
  %151 = bitcast %"struct.jxl::jpeg::OutputChunk"*** %15 to i64*
  store i64 %149, i64* %151, align 8
  store i64 %65, i64* %48, align 8
  %152 = icmp eq %"struct.jxl::jpeg::OutputChunk"** %148, null
  %153 = inttoptr i64 %149 to i64*
  br i1 %152, label %158, label %154

154:                                              ; preds = %147
  %155 = bitcast %"struct.jxl::jpeg::OutputChunk"** %148 to i8*
  tail call void @_ZdlPv(i8* %155) #11
  %156 = bitcast %"struct.jxl::jpeg::OutputChunk"*** %15 to i64**
  %157 = load i64*, i64** %156, align 8
  br label %158

158:                                              ; preds = %8, %42, %147, %154
  %159 = phi i64* [ %157, %154 ], [ %153, %147 ], [ %46, %42 ], [ %21, %8 ]
  store i64 %13, i64* %159, align 8
  %160 = load %"struct.jxl::jpeg::OutputChunk"**, %"struct.jxl::jpeg::OutputChunk"*** %15, align 8
  %161 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %160, i64 1
  store %"struct.jxl::jpeg::OutputChunk"** %161, %"struct.jxl::jpeg::OutputChunk"*** %15, align 8
  br label %460

162:                                              ; preds = %1
  %163 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0
  %164 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 2
  %165 = bitcast %"struct.jxl::jpeg::OutputChunk"*** %164 to i64*
  %166 = load i64, i64* %165, align 8
  %167 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 1
  %168 = bitcast %"struct.jxl::jpeg::OutputChunk"*** %167 to i64*
  %169 = load i64, i64* %168, align 8
  %170 = sub i64 %166, %169
  %171 = ashr exact i64 %170, 3
  %172 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %173 = bitcast %"struct.jxl::jpeg::OutputChunk"*** %172 to i64*
  %174 = load i64, i64* %173, align 8
  %175 = bitcast %"class.std::__1::deque"* %0 to i64*
  %176 = load i64, i64* %175, align 8
  %177 = sub i64 %174, %176
  %178 = ashr exact i64 %177, 3
  %179 = icmp ult i64 %171, %178
  %180 = inttoptr i64 %166 to %"struct.jxl::jpeg::OutputChunk"**
  %181 = inttoptr i64 %169 to %"struct.jxl::jpeg::OutputChunk"**
  br i1 %179, label %182, label %337

182:                                              ; preds = %162
  %183 = icmp eq i64 %174, %166
  br i1 %183, label %188, label %184

184:                                              ; preds = %182
  %185 = bitcast %"struct.jxl::jpeg::OutputChunk"** %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %185) #10
  %186 = tail call i8* @_Znwm(i64 4080) #11
  %187 = bitcast %"struct.jxl::jpeg::OutputChunk"** %2 to i8**
  store i8* %186, i8** %187, align 8
  call void @_ZNSt3__114__split_bufferIPN3jxl4jpeg11OutputChunkENS_9allocatorIS4_EEE9push_backEOS4_(%"struct.std::__1::__split_buffer"* %163, %"struct.jxl::jpeg::OutputChunk"** nonnull dereferenceable(8) %2)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %185) #10
  br label %460

188:                                              ; preds = %182
  %189 = bitcast %"struct.jxl::jpeg::OutputChunk"** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %189) #10
  %190 = tail call i8* @_Znwm(i64 4080) #11
  %191 = bitcast %"struct.jxl::jpeg::OutputChunk"** %3 to i8**
  store i8* %190, i8** %191, align 8
  call void @_ZNSt3__114__split_bufferIPN3jxl4jpeg11OutputChunkENS_9allocatorIS4_EEE10push_frontEOS4_(%"struct.std::__1::__split_buffer"* %163, %"struct.jxl::jpeg::OutputChunk"** nonnull dereferenceable(8) %3)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %189) #10
  %192 = load %"struct.jxl::jpeg::OutputChunk"**, %"struct.jxl::jpeg::OutputChunk"*** %167, align 8
  %193 = bitcast %"struct.jxl::jpeg::OutputChunk"** %192 to i64*
  %194 = load i64, i64* %193, align 8
  %195 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %192, i64 1
  store %"struct.jxl::jpeg::OutputChunk"** %195, %"struct.jxl::jpeg::OutputChunk"*** %167, align 8
  %196 = load %"struct.jxl::jpeg::OutputChunk"**, %"struct.jxl::jpeg::OutputChunk"*** %164, align 8
  %197 = load %"struct.jxl::jpeg::OutputChunk"**, %"struct.jxl::jpeg::OutputChunk"*** %172, align 8
  %198 = icmp eq %"struct.jxl::jpeg::OutputChunk"** %196, %197
  %199 = ptrtoint %"struct.jxl::jpeg::OutputChunk"** %197 to i64
  %200 = bitcast %"struct.jxl::jpeg::OutputChunk"** %196 to i64*
  br i1 %198, label %201, label %333

201:                                              ; preds = %188
  %202 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 0
  %203 = load %"struct.jxl::jpeg::OutputChunk"**, %"struct.jxl::jpeg::OutputChunk"*** %202, align 8
  %204 = icmp ugt %"struct.jxl::jpeg::OutputChunk"** %195, %203
  %205 = ptrtoint %"struct.jxl::jpeg::OutputChunk"** %203 to i64
  br i1 %204, label %206, label %226

206:                                              ; preds = %201
  %207 = ptrtoint %"struct.jxl::jpeg::OutputChunk"** %195 to i64
  %208 = sub i64 %207, %205
  %209 = ashr exact i64 %208, 3
  %210 = add nsw i64 %209, 1
  %211 = sdiv i64 %210, -2
  %212 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %195, i64 %211
  %213 = ptrtoint %"struct.jxl::jpeg::OutputChunk"** %196 to i64
  %214 = sub i64 %213, %207
  %215 = ashr exact i64 %214, 3
  %216 = icmp eq i64 %214, 0
  br i1 %216, label %221, label %217

217:                                              ; preds = %206
  %218 = bitcast %"struct.jxl::jpeg::OutputChunk"** %212 to i8*
  %219 = bitcast %"struct.jxl::jpeg::OutputChunk"** %195 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %218, i8* align 8 %219, i64 %214, i1 false) #10
  %220 = load %"struct.jxl::jpeg::OutputChunk"**, %"struct.jxl::jpeg::OutputChunk"*** %167, align 8
  br label %221

221:                                              ; preds = %217, %206
  %222 = phi %"struct.jxl::jpeg::OutputChunk"** [ %195, %206 ], [ %220, %217 ]
  %223 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %212, i64 %215
  store %"struct.jxl::jpeg::OutputChunk"** %223, %"struct.jxl::jpeg::OutputChunk"*** %164, align 8
  %224 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %222, i64 %211
  store %"struct.jxl::jpeg::OutputChunk"** %224, %"struct.jxl::jpeg::OutputChunk"*** %167, align 8
  %225 = bitcast %"struct.jxl::jpeg::OutputChunk"** %223 to i64*
  br label %333

226:                                              ; preds = %201
  %227 = sub i64 %199, %205
  %228 = ashr exact i64 %227, 2
  %229 = icmp eq i64 %227, 0
  %230 = select i1 %229, i64 1, i64 %228
  %231 = icmp ugt i64 %230, 2305843009213693951
  br i1 %231, label %232, label %233

232:                                              ; preds = %226
  call void @abort() #12
  unreachable

233:                                              ; preds = %226
  %234 = lshr i64 %230, 2
  %235 = shl i64 %230, 3
  %236 = call i8* @_Znwm(i64 %235) #11
  %237 = bitcast i8* %236 to %"struct.jxl::jpeg::OutputChunk"**
  %238 = ptrtoint i8* %236 to i64
  %239 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %237, i64 %234
  %240 = ptrtoint %"struct.jxl::jpeg::OutputChunk"** %239 to i64
  %241 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %237, i64 %230
  %242 = ptrtoint %"struct.jxl::jpeg::OutputChunk"** %241 to i64
  %243 = ptrtoint %"struct.jxl::jpeg::OutputChunk"** %195 to i64
  %244 = ptrtoint %"struct.jxl::jpeg::OutputChunk"** %196 to i64
  %245 = sub i64 %244, %243
  %246 = ashr exact i64 %245, 3
  %247 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %239, i64 %246
  %248 = icmp eq i64 %245, 0
  br i1 %248, label %324, label %249

249:                                              ; preds = %233
  %250 = add i64 %245, -8
  %251 = lshr i64 %250, 3
  %252 = add nuw nsw i64 %251, 1
  %253 = and i64 %252, 7
  %254 = icmp eq i64 %253, 0
  br i1 %254, label %270, label %255

255:                                              ; preds = %249, %255
  %256 = phi %"struct.jxl::jpeg::OutputChunk"** [ %263, %255 ], [ %239, %249 ]
  %257 = phi i64 [ %264, %255 ], [ %240, %249 ]
  %258 = phi %"struct.jxl::jpeg::OutputChunk"** [ %265, %255 ], [ %195, %249 ]
  %259 = phi i64 [ %266, %255 ], [ %253, %249 ]
  %260 = bitcast %"struct.jxl::jpeg::OutputChunk"** %258 to i64*
  %261 = load i64, i64* %260, align 8
  %262 = inttoptr i64 %257 to i64*
  store i64 %261, i64* %262, align 8
  %263 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %256, i64 1
  %264 = ptrtoint %"struct.jxl::jpeg::OutputChunk"** %263 to i64
  %265 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %258, i64 1
  %266 = add i64 %259, -1
  %267 = icmp eq i64 %266, 0
  br i1 %267, label %268, label %255, !llvm.loop !18

268:                                              ; preds = %255
  %269 = ptrtoint %"struct.jxl::jpeg::OutputChunk"** %263 to i64
  br label %270

270:                                              ; preds = %249, %268
  %271 = phi %"struct.jxl::jpeg::OutputChunk"** [ %239, %249 ], [ %263, %268 ]
  %272 = phi i64 [ %240, %249 ], [ %269, %268 ]
  %273 = phi %"struct.jxl::jpeg::OutputChunk"** [ %195, %249 ], [ %265, %268 ]
  %274 = icmp ult i64 %250, 56
  br i1 %274, label %321, label %275

275:                                              ; preds = %270, %275
  %276 = phi %"struct.jxl::jpeg::OutputChunk"** [ %317, %275 ], [ %271, %270 ]
  %277 = phi i64 [ %318, %275 ], [ %272, %270 ]
  %278 = phi %"struct.jxl::jpeg::OutputChunk"** [ %319, %275 ], [ %273, %270 ]
  %279 = bitcast %"struct.jxl::jpeg::OutputChunk"** %278 to i64*
  %280 = load i64, i64* %279, align 8
  %281 = inttoptr i64 %277 to i64*
  store i64 %280, i64* %281, align 8
  %282 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %276, i64 1
  %283 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %278, i64 1
  %284 = bitcast %"struct.jxl::jpeg::OutputChunk"** %283 to i64*
  %285 = load i64, i64* %284, align 8
  %286 = bitcast %"struct.jxl::jpeg::OutputChunk"** %282 to i64*
  store i64 %285, i64* %286, align 8
  %287 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %276, i64 2
  %288 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %278, i64 2
  %289 = bitcast %"struct.jxl::jpeg::OutputChunk"** %288 to i64*
  %290 = load i64, i64* %289, align 8
  %291 = bitcast %"struct.jxl::jpeg::OutputChunk"** %287 to i64*
  store i64 %290, i64* %291, align 8
  %292 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %276, i64 3
  %293 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %278, i64 3
  %294 = bitcast %"struct.jxl::jpeg::OutputChunk"** %293 to i64*
  %295 = load i64, i64* %294, align 8
  %296 = bitcast %"struct.jxl::jpeg::OutputChunk"** %292 to i64*
  store i64 %295, i64* %296, align 8
  %297 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %276, i64 4
  %298 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %278, i64 4
  %299 = bitcast %"struct.jxl::jpeg::OutputChunk"** %298 to i64*
  %300 = load i64, i64* %299, align 8
  %301 = bitcast %"struct.jxl::jpeg::OutputChunk"** %297 to i64*
  store i64 %300, i64* %301, align 8
  %302 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %276, i64 5
  %303 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %278, i64 5
  %304 = bitcast %"struct.jxl::jpeg::OutputChunk"** %303 to i64*
  %305 = load i64, i64* %304, align 8
  %306 = bitcast %"struct.jxl::jpeg::OutputChunk"** %302 to i64*
  store i64 %305, i64* %306, align 8
  %307 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %276, i64 6
  %308 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %278, i64 6
  %309 = bitcast %"struct.jxl::jpeg::OutputChunk"** %308 to i64*
  %310 = load i64, i64* %309, align 8
  %311 = bitcast %"struct.jxl::jpeg::OutputChunk"** %307 to i64*
  store i64 %310, i64* %311, align 8
  %312 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %276, i64 7
  %313 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %278, i64 7
  %314 = bitcast %"struct.jxl::jpeg::OutputChunk"** %313 to i64*
  %315 = load i64, i64* %314, align 8
  %316 = bitcast %"struct.jxl::jpeg::OutputChunk"** %312 to i64*
  store i64 %315, i64* %316, align 8
  %317 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %276, i64 8
  %318 = ptrtoint %"struct.jxl::jpeg::OutputChunk"** %317 to i64
  %319 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %278, i64 8
  %320 = icmp eq %"struct.jxl::jpeg::OutputChunk"** %247, %317
  br i1 %320, label %321, label %275

321:                                              ; preds = %275, %270
  %322 = ptrtoint %"struct.jxl::jpeg::OutputChunk"** %247 to i64
  %323 = load %"struct.jxl::jpeg::OutputChunk"**, %"struct.jxl::jpeg::OutputChunk"*** %202, align 8
  br label %324

324:                                              ; preds = %321, %233
  %325 = phi %"struct.jxl::jpeg::OutputChunk"** [ %323, %321 ], [ %203, %233 ]
  %326 = phi i64 [ %322, %321 ], [ %240, %233 ]
  store i64 %238, i64* %175, align 8
  store i64 %240, i64* %168, align 8
  store i64 %326, i64* %165, align 8
  store i64 %242, i64* %173, align 8
  %327 = icmp eq %"struct.jxl::jpeg::OutputChunk"** %325, null
  %328 = inttoptr i64 %326 to i64*
  br i1 %327, label %333, label %329

329:                                              ; preds = %324
  %330 = bitcast %"struct.jxl::jpeg::OutputChunk"** %325 to i8*
  call void @_ZdlPv(i8* %330) #11
  %331 = bitcast %"struct.jxl::jpeg::OutputChunk"*** %164 to i64**
  %332 = load i64*, i64** %331, align 8
  br label %333

333:                                              ; preds = %188, %221, %324, %329
  %334 = phi i64* [ %332, %329 ], [ %328, %324 ], [ %225, %221 ], [ %200, %188 ]
  store i64 %194, i64* %334, align 8
  %335 = load %"struct.jxl::jpeg::OutputChunk"**, %"struct.jxl::jpeg::OutputChunk"*** %164, align 8
  %336 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %335, i64 1
  store %"struct.jxl::jpeg::OutputChunk"** %336, %"struct.jxl::jpeg::OutputChunk"*** %164, align 8
  br label %460

337:                                              ; preds = %162
  %338 = bitcast %"struct.std::__1::__split_buffer.93"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %338) #10
  %339 = getelementptr inbounds %"struct.std::__1::__split_buffer.93", %"struct.std::__1::__split_buffer.93"* %4, i64 0, i32 1
  %340 = getelementptr inbounds %"struct.std::__1::__split_buffer.93", %"struct.std::__1::__split_buffer.93"* %4, i64 0, i32 2
  %341 = getelementptr inbounds %"struct.std::__1::__split_buffer.93", %"struct.std::__1::__split_buffer.93"* %4, i64 0, i32 3, i32 0, i32 0
  %342 = getelementptr inbounds %"struct.std::__1::__split_buffer.93", %"struct.std::__1::__split_buffer.93"* %4, i64 0, i32 3, i32 1, i32 0
  %343 = ashr exact i64 %177, 2
  %344 = icmp eq i64 %177, 0
  %345 = select i1 %344, i64 1, i64 %343
  %346 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 3
  %347 = bitcast %"struct.std::__1::__split_buffer.93"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %347, i8 -86, i64 24, i1 false)
  store %"struct.jxl::jpeg::OutputChunk"** null, %"struct.jxl::jpeg::OutputChunk"*** %341, align 8
  %348 = bitcast %"class.std::__1::allocator.72"** %342 to %"class.std::__1::__compressed_pair.69"**
  store %"class.std::__1::__compressed_pair.69"* %346, %"class.std::__1::__compressed_pair.69"** %348, align 8
  %349 = icmp ugt i64 %345, 2305843009213693951
  br i1 %349, label %350, label %351

350:                                              ; preds = %337
  tail call void @abort() #12
  unreachable

351:                                              ; preds = %337
  %352 = shl i64 %345, 3
  %353 = tail call i8* @_Znwm(i64 %352) #11
  %354 = bitcast i8* %353 to %"struct.jxl::jpeg::OutputChunk"**
  %355 = bitcast %"struct.std::__1::__split_buffer.93"* %4 to i8**
  store i8* %353, i8** %355, align 8
  %356 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %354, i64 %171
  store %"struct.jxl::jpeg::OutputChunk"** %356, %"struct.jxl::jpeg::OutputChunk"*** %340, align 8
  store %"struct.jxl::jpeg::OutputChunk"** %356, %"struct.jxl::jpeg::OutputChunk"*** %339, align 8
  %357 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %354, i64 %345
  store %"struct.jxl::jpeg::OutputChunk"** %357, %"struct.jxl::jpeg::OutputChunk"*** %341, align 8
  %358 = tail call i8* @_Znwm(i64 4080) #11
  %359 = ptrtoint i8* %358 to i64
  %360 = icmp eq i64 %171, %345
  %361 = ptrtoint %"struct.jxl::jpeg::OutputChunk"** %357 to i64
  %362 = ptrtoint i8* %353 to i64
  %363 = ptrtoint %"struct.jxl::jpeg::OutputChunk"** %356 to i64
  br i1 %360, label %364, label %398

364:                                              ; preds = %351
  %365 = icmp ugt %"struct.jxl::jpeg::OutputChunk"** %356, %354
  br i1 %365, label %366, label %373

366:                                              ; preds = %364
  %367 = sub i64 %363, %362
  %368 = ashr exact i64 %367, 3
  %369 = add nsw i64 %368, 1
  %370 = sdiv i64 %369, -2
  %371 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %356, i64 %370
  store %"struct.jxl::jpeg::OutputChunk"** %371, %"struct.jxl::jpeg::OutputChunk"*** %340, align 8
  store %"struct.jxl::jpeg::OutputChunk"** %371, %"struct.jxl::jpeg::OutputChunk"*** %339, align 8
  %372 = ptrtoint %"struct.jxl::jpeg::OutputChunk"** %371 to i64
  br label %398

373:                                              ; preds = %364
  %374 = sub i64 %361, %362
  %375 = ashr exact i64 %374, 2
  %376 = icmp eq i64 %374, 0
  %377 = select i1 %376, i64 1, i64 %375
  %378 = icmp ugt i64 %377, 2305843009213693951
  br i1 %378, label %379, label %380

379:                                              ; preds = %373
  tail call void @abort() #12
  unreachable

380:                                              ; preds = %373
  %381 = bitcast %"struct.std::__1::__split_buffer.93"* %4 to i64*
  %382 = bitcast %"struct.jxl::jpeg::OutputChunk"*** %341 to i64*
  %383 = lshr i64 %377, 2
  %384 = shl i64 %377, 3
  %385 = tail call i8* @_Znwm(i64 %384) #11
  %386 = bitcast i8* %385 to %"struct.jxl::jpeg::OutputChunk"**
  %387 = ptrtoint i8* %385 to i64
  %388 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %386, i64 %383
  %389 = ptrtoint %"struct.jxl::jpeg::OutputChunk"** %388 to i64
  %390 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %386, i64 %377
  %391 = ptrtoint %"struct.jxl::jpeg::OutputChunk"** %390 to i64
  store i64 %387, i64* %381, align 8
  %392 = bitcast %"struct.jxl::jpeg::OutputChunk"*** %339 to i64*
  store i64 %389, i64* %392, align 8
  %393 = bitcast %"struct.jxl::jpeg::OutputChunk"*** %340 to i64*
  store i64 %389, i64* %393, align 8
  store i64 %391, i64* %382, align 8
  tail call void @_ZdlPv(i8* nonnull %353) #11
  %394 = load %"struct.jxl::jpeg::OutputChunk"**, %"struct.jxl::jpeg::OutputChunk"*** %164, align 8
  %395 = load %"struct.jxl::jpeg::OutputChunk"**, %"struct.jxl::jpeg::OutputChunk"*** %167, align 8
  %396 = ptrtoint %"struct.jxl::jpeg::OutputChunk"** %395 to i64
  %397 = ptrtoint %"struct.jxl::jpeg::OutputChunk"** %394 to i64
  br label %398

398:                                              ; preds = %351, %366, %380
  %399 = phi i64 [ %391, %380 ], [ %361, %366 ], [ %361, %351 ]
  %400 = phi i64 [ %397, %380 ], [ %166, %366 ], [ %166, %351 ]
  %401 = phi i64 [ %389, %380 ], [ %372, %366 ], [ %363, %351 ]
  %402 = phi i64 [ %396, %380 ], [ %169, %366 ], [ %169, %351 ]
  %403 = phi i64 [ %387, %380 ], [ %362, %366 ], [ %362, %351 ]
  %404 = phi %"struct.jxl::jpeg::OutputChunk"** [ %395, %380 ], [ %181, %366 ], [ %181, %351 ]
  %405 = phi %"struct.jxl::jpeg::OutputChunk"** [ %394, %380 ], [ %180, %366 ], [ %180, %351 ]
  %406 = phi %"struct.jxl::jpeg::OutputChunk"** [ %388, %380 ], [ %371, %366 ], [ %356, %351 ]
  %407 = bitcast %"struct.jxl::jpeg::OutputChunk"** %406 to i64*
  store i64 %359, i64* %407, align 8
  %408 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %406, i64 1
  store %"struct.jxl::jpeg::OutputChunk"** %408, %"struct.jxl::jpeg::OutputChunk"*** %340, align 8
  %409 = icmp eq %"struct.jxl::jpeg::OutputChunk"** %405, %404
  br i1 %409, label %410, label %455

410:                                              ; preds = %398
  %411 = ptrtoint %"struct.jxl::jpeg::OutputChunk"** %408 to i64
  %412 = bitcast %"struct.std::__1::__split_buffer.93"* %4 to i64*
  %413 = bitcast %"struct.jxl::jpeg::OutputChunk"*** %339 to i64*
  %414 = bitcast %"struct.jxl::jpeg::OutputChunk"*** %340 to i64*
  %415 = bitcast %"struct.jxl::jpeg::OutputChunk"*** %341 to i64*
  br label %427

416:                                              ; preds = %455
  %417 = ptrtoint %"struct.jxl::jpeg::OutputChunk"** %458 to i64
  %418 = bitcast %"struct.std::__1::__split_buffer.93"* %4 to i64*
  %419 = load i64, i64* %418, align 8
  %420 = bitcast %"struct.jxl::jpeg::OutputChunk"*** %339 to i64*
  %421 = load i64, i64* %420, align 8
  %422 = load i64, i64* %165, align 8
  %423 = bitcast %"struct.jxl::jpeg::OutputChunk"*** %340 to i64*
  %424 = load i64, i64* %423, align 8
  %425 = bitcast %"struct.jxl::jpeg::OutputChunk"*** %341 to i64*
  %426 = load i64, i64* %425, align 8
  br label %427

427:                                              ; preds = %410, %416
  %428 = phi i64* [ %415, %410 ], [ %425, %416 ]
  %429 = phi i64* [ %414, %410 ], [ %423, %416 ]
  %430 = phi i64* [ %413, %410 ], [ %420, %416 ]
  %431 = phi i64* [ %412, %410 ], [ %418, %416 ]
  %432 = phi i64 [ %399, %410 ], [ %426, %416 ]
  %433 = phi i64 [ %411, %410 ], [ %424, %416 ]
  %434 = phi i64 [ %400, %410 ], [ %422, %416 ]
  %435 = phi i64 [ %401, %410 ], [ %421, %416 ]
  %436 = phi i64 [ %402, %410 ], [ %417, %416 ]
  %437 = phi i64 [ %403, %410 ], [ %419, %416 ]
  %438 = load i64, i64* %175, align 8
  store i64 %437, i64* %175, align 8
  store i64 %438, i64* %431, align 8
  store i64 %435, i64* %168, align 8
  store i64 %436, i64* %430, align 8
  store i64 %433, i64* %165, align 8
  store i64 %434, i64* %429, align 8
  %439 = load i64, i64* %173, align 8
  store i64 %432, i64* %173, align 8
  store i64 %439, i64* %428, align 8
  %440 = inttoptr i64 %436 to %"struct.jxl::jpeg::OutputChunk"**
  %441 = inttoptr i64 %434 to %"struct.jxl::jpeg::OutputChunk"**
  %442 = icmp eq %"struct.jxl::jpeg::OutputChunk"** %441, %440
  br i1 %442, label %450, label %443

443:                                              ; preds = %427
  %444 = getelementptr %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %441, i64 -1
  %445 = ptrtoint %"struct.jxl::jpeg::OutputChunk"** %444 to i64
  %446 = sub i64 %445, %436
  %447 = lshr i64 %446, 3
  %448 = xor i64 %447, -1
  %449 = getelementptr %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %441, i64 %448
  store %"struct.jxl::jpeg::OutputChunk"** %449, %"struct.jxl::jpeg::OutputChunk"*** %340, align 8
  br label %450

450:                                              ; preds = %443, %427
  %451 = icmp eq i64 %438, 0
  br i1 %451, label %454, label %452

452:                                              ; preds = %450
  %453 = inttoptr i64 %438 to i8*
  call void @_ZdlPv(i8* %453) #11
  br label %454

454:                                              ; preds = %450, %452
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %338) #10
  br label %460

455:                                              ; preds = %398, %455
  %456 = phi %"struct.jxl::jpeg::OutputChunk"** [ %457, %455 ], [ %405, %398 ]
  %457 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %456, i64 -1
  call void @_ZNSt3__114__split_bufferIPN3jxl4jpeg11OutputChunkERNS_9allocatorIS4_EEE10push_frontERKS4_(%"struct.std::__1::__split_buffer.93"* nonnull %4, %"struct.jxl::jpeg::OutputChunk"** dereferenceable(8) %457)
  %458 = load %"struct.jxl::jpeg::OutputChunk"**, %"struct.jxl::jpeg::OutputChunk"*** %167, align 8
  %459 = icmp eq %"struct.jxl::jpeg::OutputChunk"** %457, %458
  br i1 %459, label %416, label %455

460:                                              ; preds = %454, %333, %184, %158
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIPN3jxl4jpeg11OutputChunkENS_9allocatorIS4_EEE9push_backEOS4_(%"struct.std::__1::__split_buffer"*, %"struct.jxl::jpeg::OutputChunk"** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 2
  %4 = load %"struct.jxl::jpeg::OutputChunk"**, %"struct.jxl::jpeg::OutputChunk"*** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 3, i32 0, i32 0
  %6 = load %"struct.jxl::jpeg::OutputChunk"**, %"struct.jxl::jpeg::OutputChunk"*** %5, align 8
  %7 = icmp eq %"struct.jxl::jpeg::OutputChunk"** %4, %6
  %8 = ptrtoint %"struct.jxl::jpeg::OutputChunk"** %6 to i64
  %9 = bitcast %"struct.jxl::jpeg::OutputChunk"** %4 to i64*
  br i1 %7, label %10, label %148

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 1
  %12 = load %"struct.jxl::jpeg::OutputChunk"**, %"struct.jxl::jpeg::OutputChunk"*** %11, align 8
  %13 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 0
  %14 = load %"struct.jxl::jpeg::OutputChunk"**, %"struct.jxl::jpeg::OutputChunk"*** %13, align 8
  %15 = icmp ugt %"struct.jxl::jpeg::OutputChunk"** %12, %14
  %16 = ptrtoint %"struct.jxl::jpeg::OutputChunk"** %14 to i64
  br i1 %15, label %17, label %37

17:                                               ; preds = %10
  %18 = ptrtoint %"struct.jxl::jpeg::OutputChunk"** %12 to i64
  %19 = sub i64 %18, %16
  %20 = ashr exact i64 %19, 3
  %21 = add nsw i64 %20, 1
  %22 = sdiv i64 %21, -2
  %23 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %12, i64 %22
  %24 = ptrtoint %"struct.jxl::jpeg::OutputChunk"** %4 to i64
  %25 = sub i64 %24, %18
  %26 = ashr exact i64 %25, 3
  %27 = icmp eq i64 %25, 0
  br i1 %27, label %32, label %28

28:                                               ; preds = %17
  %29 = bitcast %"struct.jxl::jpeg::OutputChunk"** %23 to i8*
  %30 = bitcast %"struct.jxl::jpeg::OutputChunk"** %12 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %29, i8* align 8 %30, i64 %25, i1 false) #10
  %31 = load %"struct.jxl::jpeg::OutputChunk"**, %"struct.jxl::jpeg::OutputChunk"*** %11, align 8
  br label %32

32:                                               ; preds = %17, %28
  %33 = phi %"struct.jxl::jpeg::OutputChunk"** [ %12, %17 ], [ %31, %28 ]
  %34 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %23, i64 %26
  store %"struct.jxl::jpeg::OutputChunk"** %34, %"struct.jxl::jpeg::OutputChunk"*** %3, align 8
  %35 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %33, i64 %22
  store %"struct.jxl::jpeg::OutputChunk"** %35, %"struct.jxl::jpeg::OutputChunk"*** %11, align 8
  %36 = bitcast %"struct.jxl::jpeg::OutputChunk"** %34 to i64*
  br label %148

37:                                               ; preds = %10
  %38 = bitcast %"struct.jxl::jpeg::OutputChunk"*** %5 to i64*
  %39 = bitcast %"struct.std::__1::__split_buffer"* %0 to i64*
  %40 = sub i64 %8, %16
  %41 = ashr exact i64 %40, 2
  %42 = icmp eq i64 %40, 0
  %43 = select i1 %42, i64 1, i64 %41
  %44 = icmp ugt i64 %43, 2305843009213693951
  br i1 %44, label %45, label %46

45:                                               ; preds = %37
  tail call void @abort() #12
  unreachable

46:                                               ; preds = %37
  %47 = lshr i64 %43, 2
  %48 = shl i64 %43, 3
  %49 = tail call i8* @_Znwm(i64 %48) #11
  %50 = bitcast i8* %49 to %"struct.jxl::jpeg::OutputChunk"**
  %51 = ptrtoint i8* %49 to i64
  %52 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %50, i64 %47
  %53 = ptrtoint %"struct.jxl::jpeg::OutputChunk"** %52 to i64
  %54 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %50, i64 %43
  %55 = ptrtoint %"struct.jxl::jpeg::OutputChunk"** %54 to i64
  %56 = ptrtoint %"struct.jxl::jpeg::OutputChunk"** %12 to i64
  %57 = ptrtoint %"struct.jxl::jpeg::OutputChunk"** %4 to i64
  %58 = sub i64 %57, %56
  %59 = ashr exact i64 %58, 3
  %60 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %52, i64 %59
  %61 = icmp eq i64 %58, 0
  br i1 %61, label %137, label %62

62:                                               ; preds = %46
  %63 = add i64 %58, -8
  %64 = lshr i64 %63, 3
  %65 = add nuw nsw i64 %64, 1
  %66 = and i64 %65, 7
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %83, label %68

68:                                               ; preds = %62, %68
  %69 = phi %"struct.jxl::jpeg::OutputChunk"** [ %76, %68 ], [ %52, %62 ]
  %70 = phi i64 [ %77, %68 ], [ %53, %62 ]
  %71 = phi %"struct.jxl::jpeg::OutputChunk"** [ %78, %68 ], [ %12, %62 ]
  %72 = phi i64 [ %79, %68 ], [ %66, %62 ]
  %73 = bitcast %"struct.jxl::jpeg::OutputChunk"** %71 to i64*
  %74 = load i64, i64* %73, align 8
  %75 = inttoptr i64 %70 to i64*
  store i64 %74, i64* %75, align 8
  %76 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %69, i64 1
  %77 = ptrtoint %"struct.jxl::jpeg::OutputChunk"** %76 to i64
  %78 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %71, i64 1
  %79 = add i64 %72, -1
  %80 = icmp eq i64 %79, 0
  br i1 %80, label %81, label %68, !llvm.loop !19

81:                                               ; preds = %68
  %82 = ptrtoint %"struct.jxl::jpeg::OutputChunk"** %76 to i64
  br label %83

83:                                               ; preds = %62, %81
  %84 = phi %"struct.jxl::jpeg::OutputChunk"** [ %52, %62 ], [ %76, %81 ]
  %85 = phi i64 [ %53, %62 ], [ %82, %81 ]
  %86 = phi %"struct.jxl::jpeg::OutputChunk"** [ %12, %62 ], [ %78, %81 ]
  %87 = icmp ult i64 %63, 56
  br i1 %87, label %134, label %88

88:                                               ; preds = %83, %88
  %89 = phi %"struct.jxl::jpeg::OutputChunk"** [ %130, %88 ], [ %84, %83 ]
  %90 = phi i64 [ %131, %88 ], [ %85, %83 ]
  %91 = phi %"struct.jxl::jpeg::OutputChunk"** [ %132, %88 ], [ %86, %83 ]
  %92 = bitcast %"struct.jxl::jpeg::OutputChunk"** %91 to i64*
  %93 = load i64, i64* %92, align 8
  %94 = inttoptr i64 %90 to i64*
  store i64 %93, i64* %94, align 8
  %95 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %89, i64 1
  %96 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %91, i64 1
  %97 = bitcast %"struct.jxl::jpeg::OutputChunk"** %96 to i64*
  %98 = load i64, i64* %97, align 8
  %99 = bitcast %"struct.jxl::jpeg::OutputChunk"** %95 to i64*
  store i64 %98, i64* %99, align 8
  %100 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %89, i64 2
  %101 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %91, i64 2
  %102 = bitcast %"struct.jxl::jpeg::OutputChunk"** %101 to i64*
  %103 = load i64, i64* %102, align 8
  %104 = bitcast %"struct.jxl::jpeg::OutputChunk"** %100 to i64*
  store i64 %103, i64* %104, align 8
  %105 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %89, i64 3
  %106 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %91, i64 3
  %107 = bitcast %"struct.jxl::jpeg::OutputChunk"** %106 to i64*
  %108 = load i64, i64* %107, align 8
  %109 = bitcast %"struct.jxl::jpeg::OutputChunk"** %105 to i64*
  store i64 %108, i64* %109, align 8
  %110 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %89, i64 4
  %111 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %91, i64 4
  %112 = bitcast %"struct.jxl::jpeg::OutputChunk"** %111 to i64*
  %113 = load i64, i64* %112, align 8
  %114 = bitcast %"struct.jxl::jpeg::OutputChunk"** %110 to i64*
  store i64 %113, i64* %114, align 8
  %115 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %89, i64 5
  %116 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %91, i64 5
  %117 = bitcast %"struct.jxl::jpeg::OutputChunk"** %116 to i64*
  %118 = load i64, i64* %117, align 8
  %119 = bitcast %"struct.jxl::jpeg::OutputChunk"** %115 to i64*
  store i64 %118, i64* %119, align 8
  %120 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %89, i64 6
  %121 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %91, i64 6
  %122 = bitcast %"struct.jxl::jpeg::OutputChunk"** %121 to i64*
  %123 = load i64, i64* %122, align 8
  %124 = bitcast %"struct.jxl::jpeg::OutputChunk"** %120 to i64*
  store i64 %123, i64* %124, align 8
  %125 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %89, i64 7
  %126 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %91, i64 7
  %127 = bitcast %"struct.jxl::jpeg::OutputChunk"** %126 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = bitcast %"struct.jxl::jpeg::OutputChunk"** %125 to i64*
  store i64 %128, i64* %129, align 8
  %130 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %89, i64 8
  %131 = ptrtoint %"struct.jxl::jpeg::OutputChunk"** %130 to i64
  %132 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %91, i64 8
  %133 = icmp eq %"struct.jxl::jpeg::OutputChunk"** %60, %130
  br i1 %133, label %134, label %88

134:                                              ; preds = %88, %83
  %135 = ptrtoint %"struct.jxl::jpeg::OutputChunk"** %60 to i64
  %136 = load %"struct.jxl::jpeg::OutputChunk"**, %"struct.jxl::jpeg::OutputChunk"*** %13, align 8
  br label %137

137:                                              ; preds = %46, %134
  %138 = phi %"struct.jxl::jpeg::OutputChunk"** [ %136, %134 ], [ %14, %46 ]
  %139 = phi i64 [ %135, %134 ], [ %53, %46 ]
  store i64 %51, i64* %39, align 8
  %140 = bitcast %"struct.jxl::jpeg::OutputChunk"*** %11 to i64*
  store i64 %53, i64* %140, align 8
  %141 = bitcast %"struct.jxl::jpeg::OutputChunk"*** %3 to i64*
  store i64 %139, i64* %141, align 8
  store i64 %55, i64* %38, align 8
  %142 = icmp eq %"struct.jxl::jpeg::OutputChunk"** %138, null
  %143 = inttoptr i64 %139 to i64*
  br i1 %142, label %148, label %144

144:                                              ; preds = %137
  %145 = bitcast %"struct.jxl::jpeg::OutputChunk"** %138 to i8*
  tail call void @_ZdlPv(i8* %145) #11
  %146 = bitcast %"struct.jxl::jpeg::OutputChunk"*** %3 to i64**
  %147 = load i64*, i64** %146, align 8
  br label %148

148:                                              ; preds = %144, %137, %32, %2
  %149 = phi i64* [ %147, %144 ], [ %143, %137 ], [ %36, %32 ], [ %9, %2 ]
  %150 = bitcast %"struct.jxl::jpeg::OutputChunk"** %1 to i64*
  %151 = load i64, i64* %150, align 8
  store i64 %151, i64* %149, align 8
  %152 = load %"struct.jxl::jpeg::OutputChunk"**, %"struct.jxl::jpeg::OutputChunk"*** %3, align 8
  %153 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %152, i64 1
  store %"struct.jxl::jpeg::OutputChunk"** %153, %"struct.jxl::jpeg::OutputChunk"*** %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIPN3jxl4jpeg11OutputChunkENS_9allocatorIS4_EEE10push_frontEOS4_(%"struct.std::__1::__split_buffer"*, %"struct.jxl::jpeg::OutputChunk"** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 1
  %4 = load %"struct.jxl::jpeg::OutputChunk"**, %"struct.jxl::jpeg::OutputChunk"*** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 0
  %6 = load %"struct.jxl::jpeg::OutputChunk"**, %"struct.jxl::jpeg::OutputChunk"*** %5, align 8
  %7 = icmp eq %"struct.jxl::jpeg::OutputChunk"** %4, %6
  %8 = ptrtoint %"struct.jxl::jpeg::OutputChunk"** %6 to i64
  br i1 %7, label %9, label %147

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 2
  %11 = load %"struct.jxl::jpeg::OutputChunk"**, %"struct.jxl::jpeg::OutputChunk"*** %10, align 8
  %12 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 3, i32 0, i32 0
  %13 = load %"struct.jxl::jpeg::OutputChunk"**, %"struct.jxl::jpeg::OutputChunk"*** %12, align 8
  %14 = icmp ult %"struct.jxl::jpeg::OutputChunk"** %11, %13
  %15 = bitcast %"struct.jxl::jpeg::OutputChunk"*** %12 to i64*
  %16 = ptrtoint %"struct.jxl::jpeg::OutputChunk"** %13 to i64
  br i1 %14, label %17, label %38

17:                                               ; preds = %9
  %18 = ptrtoint %"struct.jxl::jpeg::OutputChunk"** %11 to i64
  %19 = sub i64 %16, %18
  %20 = ashr exact i64 %19, 3
  %21 = add nsw i64 %20, 1
  %22 = sdiv i64 %21, 2
  %23 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %11, i64 %22
  %24 = ptrtoint %"struct.jxl::jpeg::OutputChunk"** %4 to i64
  %25 = sub i64 %18, %24
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %34, label %27

27:                                               ; preds = %17
  %28 = ashr exact i64 %25, 3
  %29 = sub nsw i64 0, %28
  %30 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %23, i64 %29
  %31 = bitcast %"struct.jxl::jpeg::OutputChunk"** %30 to i8*
  %32 = bitcast %"struct.jxl::jpeg::OutputChunk"** %4 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %31, i8* align 8 %32, i64 %25, i1 false) #10
  %33 = load %"struct.jxl::jpeg::OutputChunk"**, %"struct.jxl::jpeg::OutputChunk"*** %10, align 8
  br label %34

34:                                               ; preds = %17, %27
  %35 = phi %"struct.jxl::jpeg::OutputChunk"** [ %33, %27 ], [ %11, %17 ]
  %36 = phi %"struct.jxl::jpeg::OutputChunk"** [ %30, %27 ], [ %23, %17 ]
  store %"struct.jxl::jpeg::OutputChunk"** %36, %"struct.jxl::jpeg::OutputChunk"*** %3, align 8
  %37 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %35, i64 %22
  store %"struct.jxl::jpeg::OutputChunk"** %37, %"struct.jxl::jpeg::OutputChunk"*** %10, align 8
  br label %147

38:                                               ; preds = %9
  %39 = bitcast %"struct.std::__1::__split_buffer"* %0 to i64*
  %40 = sub i64 %16, %8
  %41 = ashr exact i64 %40, 2
  %42 = icmp eq i64 %40, 0
  %43 = select i1 %42, i64 1, i64 %41
  %44 = icmp ugt i64 %43, 2305843009213693951
  br i1 %44, label %45, label %46

45:                                               ; preds = %38
  tail call void @abort() #12
  unreachable

46:                                               ; preds = %38
  %47 = add nuw nsw i64 %43, 3
  %48 = lshr i64 %47, 2
  %49 = shl i64 %43, 3
  %50 = tail call i8* @_Znwm(i64 %49) #11
  %51 = bitcast i8* %50 to %"struct.jxl::jpeg::OutputChunk"**
  %52 = ptrtoint i8* %50 to i64
  %53 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %51, i64 %48
  %54 = ptrtoint %"struct.jxl::jpeg::OutputChunk"** %53 to i64
  %55 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %51, i64 %43
  %56 = ptrtoint %"struct.jxl::jpeg::OutputChunk"** %55 to i64
  %57 = ptrtoint %"struct.jxl::jpeg::OutputChunk"** %4 to i64
  %58 = ptrtoint %"struct.jxl::jpeg::OutputChunk"** %11 to i64
  %59 = sub i64 %58, %57
  %60 = ashr exact i64 %59, 3
  %61 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %53, i64 %60
  %62 = icmp eq i64 %59, 0
  br i1 %62, label %138, label %63

63:                                               ; preds = %46
  %64 = add i64 %59, -8
  %65 = lshr i64 %64, 3
  %66 = add nuw nsw i64 %65, 1
  %67 = and i64 %66, 7
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %84, label %69

69:                                               ; preds = %63, %69
  %70 = phi %"struct.jxl::jpeg::OutputChunk"** [ %77, %69 ], [ %53, %63 ]
  %71 = phi i64 [ %78, %69 ], [ %54, %63 ]
  %72 = phi %"struct.jxl::jpeg::OutputChunk"** [ %79, %69 ], [ %4, %63 ]
  %73 = phi i64 [ %80, %69 ], [ %67, %63 ]
  %74 = bitcast %"struct.jxl::jpeg::OutputChunk"** %72 to i64*
  %75 = load i64, i64* %74, align 8
  %76 = inttoptr i64 %71 to i64*
  store i64 %75, i64* %76, align 8
  %77 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %70, i64 1
  %78 = ptrtoint %"struct.jxl::jpeg::OutputChunk"** %77 to i64
  %79 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %72, i64 1
  %80 = add i64 %73, -1
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %82, label %69, !llvm.loop !20

82:                                               ; preds = %69
  %83 = ptrtoint %"struct.jxl::jpeg::OutputChunk"** %77 to i64
  br label %84

84:                                               ; preds = %63, %82
  %85 = phi %"struct.jxl::jpeg::OutputChunk"** [ %53, %63 ], [ %77, %82 ]
  %86 = phi i64 [ %54, %63 ], [ %83, %82 ]
  %87 = phi %"struct.jxl::jpeg::OutputChunk"** [ %4, %63 ], [ %79, %82 ]
  %88 = icmp ult i64 %64, 56
  br i1 %88, label %135, label %89

89:                                               ; preds = %84, %89
  %90 = phi %"struct.jxl::jpeg::OutputChunk"** [ %131, %89 ], [ %85, %84 ]
  %91 = phi i64 [ %132, %89 ], [ %86, %84 ]
  %92 = phi %"struct.jxl::jpeg::OutputChunk"** [ %133, %89 ], [ %87, %84 ]
  %93 = bitcast %"struct.jxl::jpeg::OutputChunk"** %92 to i64*
  %94 = load i64, i64* %93, align 8
  %95 = inttoptr i64 %91 to i64*
  store i64 %94, i64* %95, align 8
  %96 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %90, i64 1
  %97 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %92, i64 1
  %98 = bitcast %"struct.jxl::jpeg::OutputChunk"** %97 to i64*
  %99 = load i64, i64* %98, align 8
  %100 = bitcast %"struct.jxl::jpeg::OutputChunk"** %96 to i64*
  store i64 %99, i64* %100, align 8
  %101 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %90, i64 2
  %102 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %92, i64 2
  %103 = bitcast %"struct.jxl::jpeg::OutputChunk"** %102 to i64*
  %104 = load i64, i64* %103, align 8
  %105 = bitcast %"struct.jxl::jpeg::OutputChunk"** %101 to i64*
  store i64 %104, i64* %105, align 8
  %106 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %90, i64 3
  %107 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %92, i64 3
  %108 = bitcast %"struct.jxl::jpeg::OutputChunk"** %107 to i64*
  %109 = load i64, i64* %108, align 8
  %110 = bitcast %"struct.jxl::jpeg::OutputChunk"** %106 to i64*
  store i64 %109, i64* %110, align 8
  %111 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %90, i64 4
  %112 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %92, i64 4
  %113 = bitcast %"struct.jxl::jpeg::OutputChunk"** %112 to i64*
  %114 = load i64, i64* %113, align 8
  %115 = bitcast %"struct.jxl::jpeg::OutputChunk"** %111 to i64*
  store i64 %114, i64* %115, align 8
  %116 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %90, i64 5
  %117 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %92, i64 5
  %118 = bitcast %"struct.jxl::jpeg::OutputChunk"** %117 to i64*
  %119 = load i64, i64* %118, align 8
  %120 = bitcast %"struct.jxl::jpeg::OutputChunk"** %116 to i64*
  store i64 %119, i64* %120, align 8
  %121 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %90, i64 6
  %122 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %92, i64 6
  %123 = bitcast %"struct.jxl::jpeg::OutputChunk"** %122 to i64*
  %124 = load i64, i64* %123, align 8
  %125 = bitcast %"struct.jxl::jpeg::OutputChunk"** %121 to i64*
  store i64 %124, i64* %125, align 8
  %126 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %90, i64 7
  %127 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %92, i64 7
  %128 = bitcast %"struct.jxl::jpeg::OutputChunk"** %127 to i64*
  %129 = load i64, i64* %128, align 8
  %130 = bitcast %"struct.jxl::jpeg::OutputChunk"** %126 to i64*
  store i64 %129, i64* %130, align 8
  %131 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %90, i64 8
  %132 = ptrtoint %"struct.jxl::jpeg::OutputChunk"** %131 to i64
  %133 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %92, i64 8
  %134 = icmp eq %"struct.jxl::jpeg::OutputChunk"** %61, %131
  br i1 %134, label %135, label %89

135:                                              ; preds = %89, %84
  %136 = ptrtoint %"struct.jxl::jpeg::OutputChunk"** %61 to i64
  %137 = load %"struct.jxl::jpeg::OutputChunk"**, %"struct.jxl::jpeg::OutputChunk"*** %5, align 8
  br label %138

138:                                              ; preds = %46, %135
  %139 = phi %"struct.jxl::jpeg::OutputChunk"** [ %137, %135 ], [ %4, %46 ]
  %140 = phi i64 [ %136, %135 ], [ %54, %46 ]
  store i64 %52, i64* %39, align 8
  %141 = bitcast %"struct.jxl::jpeg::OutputChunk"*** %3 to i64*
  store i64 %54, i64* %141, align 8
  %142 = bitcast %"struct.jxl::jpeg::OutputChunk"*** %10 to i64*
  store i64 %140, i64* %142, align 8
  store i64 %56, i64* %15, align 8
  %143 = icmp eq %"struct.jxl::jpeg::OutputChunk"** %139, null
  br i1 %143, label %147, label %144

144:                                              ; preds = %138
  %145 = bitcast %"struct.jxl::jpeg::OutputChunk"** %139 to i8*
  tail call void @_ZdlPv(i8* %145) #11
  %146 = load %"struct.jxl::jpeg::OutputChunk"**, %"struct.jxl::jpeg::OutputChunk"*** %3, align 8
  br label %147

147:                                              ; preds = %144, %138, %34, %2
  %148 = phi %"struct.jxl::jpeg::OutputChunk"** [ %146, %144 ], [ %53, %138 ], [ %36, %34 ], [ %4, %2 ]
  %149 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %148, i64 -1
  %150 = bitcast %"struct.jxl::jpeg::OutputChunk"** %1 to i64*
  %151 = load i64, i64* %150, align 8
  %152 = bitcast %"struct.jxl::jpeg::OutputChunk"** %149 to i64*
  store i64 %151, i64* %152, align 8
  %153 = load %"struct.jxl::jpeg::OutputChunk"**, %"struct.jxl::jpeg::OutputChunk"*** %3, align 8
  %154 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %153, i64 -1
  store %"struct.jxl::jpeg::OutputChunk"** %154, %"struct.jxl::jpeg::OutputChunk"*** %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIPN3jxl4jpeg11OutputChunkERNS_9allocatorIS4_EEE10push_frontERKS4_(%"struct.std::__1::__split_buffer.93"*, %"struct.jxl::jpeg::OutputChunk"** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.std::__1::__split_buffer.93", %"struct.std::__1::__split_buffer.93"* %0, i64 0, i32 1
  %4 = load %"struct.jxl::jpeg::OutputChunk"**, %"struct.jxl::jpeg::OutputChunk"*** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__split_buffer.93", %"struct.std::__1::__split_buffer.93"* %0, i64 0, i32 0
  %6 = load %"struct.jxl::jpeg::OutputChunk"**, %"struct.jxl::jpeg::OutputChunk"*** %5, align 8
  %7 = icmp eq %"struct.jxl::jpeg::OutputChunk"** %4, %6
  %8 = ptrtoint %"struct.jxl::jpeg::OutputChunk"** %6 to i64
  br i1 %7, label %9, label %147

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"struct.std::__1::__split_buffer.93", %"struct.std::__1::__split_buffer.93"* %0, i64 0, i32 2
  %11 = load %"struct.jxl::jpeg::OutputChunk"**, %"struct.jxl::jpeg::OutputChunk"*** %10, align 8
  %12 = getelementptr inbounds %"struct.std::__1::__split_buffer.93", %"struct.std::__1::__split_buffer.93"* %0, i64 0, i32 3, i32 0, i32 0
  %13 = load %"struct.jxl::jpeg::OutputChunk"**, %"struct.jxl::jpeg::OutputChunk"*** %12, align 8
  %14 = icmp ult %"struct.jxl::jpeg::OutputChunk"** %11, %13
  %15 = bitcast %"struct.jxl::jpeg::OutputChunk"*** %12 to i64*
  %16 = ptrtoint %"struct.jxl::jpeg::OutputChunk"** %13 to i64
  br i1 %14, label %17, label %38

17:                                               ; preds = %9
  %18 = ptrtoint %"struct.jxl::jpeg::OutputChunk"** %11 to i64
  %19 = sub i64 %16, %18
  %20 = ashr exact i64 %19, 3
  %21 = add nsw i64 %20, 1
  %22 = sdiv i64 %21, 2
  %23 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %11, i64 %22
  %24 = ptrtoint %"struct.jxl::jpeg::OutputChunk"** %4 to i64
  %25 = sub i64 %18, %24
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %34, label %27

27:                                               ; preds = %17
  %28 = ashr exact i64 %25, 3
  %29 = sub nsw i64 0, %28
  %30 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %23, i64 %29
  %31 = bitcast %"struct.jxl::jpeg::OutputChunk"** %30 to i8*
  %32 = bitcast %"struct.jxl::jpeg::OutputChunk"** %4 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %31, i8* align 8 %32, i64 %25, i1 false) #10
  %33 = load %"struct.jxl::jpeg::OutputChunk"**, %"struct.jxl::jpeg::OutputChunk"*** %10, align 8
  br label %34

34:                                               ; preds = %17, %27
  %35 = phi %"struct.jxl::jpeg::OutputChunk"** [ %33, %27 ], [ %11, %17 ]
  %36 = phi %"struct.jxl::jpeg::OutputChunk"** [ %30, %27 ], [ %23, %17 ]
  store %"struct.jxl::jpeg::OutputChunk"** %36, %"struct.jxl::jpeg::OutputChunk"*** %3, align 8
  %37 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %35, i64 %22
  store %"struct.jxl::jpeg::OutputChunk"** %37, %"struct.jxl::jpeg::OutputChunk"*** %10, align 8
  br label %147

38:                                               ; preds = %9
  %39 = bitcast %"struct.std::__1::__split_buffer.93"* %0 to i64*
  %40 = sub i64 %16, %8
  %41 = ashr exact i64 %40, 2
  %42 = icmp eq i64 %40, 0
  %43 = select i1 %42, i64 1, i64 %41
  %44 = icmp ugt i64 %43, 2305843009213693951
  br i1 %44, label %45, label %46

45:                                               ; preds = %38
  tail call void @abort() #12
  unreachable

46:                                               ; preds = %38
  %47 = add nuw nsw i64 %43, 3
  %48 = lshr i64 %47, 2
  %49 = shl i64 %43, 3
  %50 = tail call i8* @_Znwm(i64 %49) #11
  %51 = bitcast i8* %50 to %"struct.jxl::jpeg::OutputChunk"**
  %52 = ptrtoint i8* %50 to i64
  %53 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %51, i64 %48
  %54 = ptrtoint %"struct.jxl::jpeg::OutputChunk"** %53 to i64
  %55 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %51, i64 %43
  %56 = ptrtoint %"struct.jxl::jpeg::OutputChunk"** %55 to i64
  %57 = ptrtoint %"struct.jxl::jpeg::OutputChunk"** %4 to i64
  %58 = ptrtoint %"struct.jxl::jpeg::OutputChunk"** %11 to i64
  %59 = sub i64 %58, %57
  %60 = ashr exact i64 %59, 3
  %61 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %53, i64 %60
  %62 = icmp eq i64 %59, 0
  br i1 %62, label %138, label %63

63:                                               ; preds = %46
  %64 = add i64 %59, -8
  %65 = lshr i64 %64, 3
  %66 = add nuw nsw i64 %65, 1
  %67 = and i64 %66, 7
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %84, label %69

69:                                               ; preds = %63, %69
  %70 = phi %"struct.jxl::jpeg::OutputChunk"** [ %77, %69 ], [ %53, %63 ]
  %71 = phi i64 [ %78, %69 ], [ %54, %63 ]
  %72 = phi %"struct.jxl::jpeg::OutputChunk"** [ %79, %69 ], [ %4, %63 ]
  %73 = phi i64 [ %80, %69 ], [ %67, %63 ]
  %74 = bitcast %"struct.jxl::jpeg::OutputChunk"** %72 to i64*
  %75 = load i64, i64* %74, align 8
  %76 = inttoptr i64 %71 to i64*
  store i64 %75, i64* %76, align 8
  %77 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %70, i64 1
  %78 = ptrtoint %"struct.jxl::jpeg::OutputChunk"** %77 to i64
  %79 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %72, i64 1
  %80 = add i64 %73, -1
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %82, label %69, !llvm.loop !21

82:                                               ; preds = %69
  %83 = ptrtoint %"struct.jxl::jpeg::OutputChunk"** %77 to i64
  br label %84

84:                                               ; preds = %63, %82
  %85 = phi %"struct.jxl::jpeg::OutputChunk"** [ %53, %63 ], [ %77, %82 ]
  %86 = phi i64 [ %54, %63 ], [ %83, %82 ]
  %87 = phi %"struct.jxl::jpeg::OutputChunk"** [ %4, %63 ], [ %79, %82 ]
  %88 = icmp ult i64 %64, 56
  br i1 %88, label %135, label %89

89:                                               ; preds = %84, %89
  %90 = phi %"struct.jxl::jpeg::OutputChunk"** [ %131, %89 ], [ %85, %84 ]
  %91 = phi i64 [ %132, %89 ], [ %86, %84 ]
  %92 = phi %"struct.jxl::jpeg::OutputChunk"** [ %133, %89 ], [ %87, %84 ]
  %93 = bitcast %"struct.jxl::jpeg::OutputChunk"** %92 to i64*
  %94 = load i64, i64* %93, align 8
  %95 = inttoptr i64 %91 to i64*
  store i64 %94, i64* %95, align 8
  %96 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %90, i64 1
  %97 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %92, i64 1
  %98 = bitcast %"struct.jxl::jpeg::OutputChunk"** %97 to i64*
  %99 = load i64, i64* %98, align 8
  %100 = bitcast %"struct.jxl::jpeg::OutputChunk"** %96 to i64*
  store i64 %99, i64* %100, align 8
  %101 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %90, i64 2
  %102 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %92, i64 2
  %103 = bitcast %"struct.jxl::jpeg::OutputChunk"** %102 to i64*
  %104 = load i64, i64* %103, align 8
  %105 = bitcast %"struct.jxl::jpeg::OutputChunk"** %101 to i64*
  store i64 %104, i64* %105, align 8
  %106 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %90, i64 3
  %107 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %92, i64 3
  %108 = bitcast %"struct.jxl::jpeg::OutputChunk"** %107 to i64*
  %109 = load i64, i64* %108, align 8
  %110 = bitcast %"struct.jxl::jpeg::OutputChunk"** %106 to i64*
  store i64 %109, i64* %110, align 8
  %111 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %90, i64 4
  %112 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %92, i64 4
  %113 = bitcast %"struct.jxl::jpeg::OutputChunk"** %112 to i64*
  %114 = load i64, i64* %113, align 8
  %115 = bitcast %"struct.jxl::jpeg::OutputChunk"** %111 to i64*
  store i64 %114, i64* %115, align 8
  %116 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %90, i64 5
  %117 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %92, i64 5
  %118 = bitcast %"struct.jxl::jpeg::OutputChunk"** %117 to i64*
  %119 = load i64, i64* %118, align 8
  %120 = bitcast %"struct.jxl::jpeg::OutputChunk"** %116 to i64*
  store i64 %119, i64* %120, align 8
  %121 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %90, i64 6
  %122 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %92, i64 6
  %123 = bitcast %"struct.jxl::jpeg::OutputChunk"** %122 to i64*
  %124 = load i64, i64* %123, align 8
  %125 = bitcast %"struct.jxl::jpeg::OutputChunk"** %121 to i64*
  store i64 %124, i64* %125, align 8
  %126 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %90, i64 7
  %127 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %92, i64 7
  %128 = bitcast %"struct.jxl::jpeg::OutputChunk"** %127 to i64*
  %129 = load i64, i64* %128, align 8
  %130 = bitcast %"struct.jxl::jpeg::OutputChunk"** %126 to i64*
  store i64 %129, i64* %130, align 8
  %131 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %90, i64 8
  %132 = ptrtoint %"struct.jxl::jpeg::OutputChunk"** %131 to i64
  %133 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %92, i64 8
  %134 = icmp eq %"struct.jxl::jpeg::OutputChunk"** %61, %131
  br i1 %134, label %135, label %89

135:                                              ; preds = %89, %84
  %136 = ptrtoint %"struct.jxl::jpeg::OutputChunk"** %61 to i64
  %137 = load %"struct.jxl::jpeg::OutputChunk"**, %"struct.jxl::jpeg::OutputChunk"*** %5, align 8
  br label %138

138:                                              ; preds = %46, %135
  %139 = phi %"struct.jxl::jpeg::OutputChunk"** [ %137, %135 ], [ %4, %46 ]
  %140 = phi i64 [ %136, %135 ], [ %54, %46 ]
  store i64 %52, i64* %39, align 8
  %141 = bitcast %"struct.jxl::jpeg::OutputChunk"*** %3 to i64*
  store i64 %54, i64* %141, align 8
  %142 = bitcast %"struct.jxl::jpeg::OutputChunk"*** %10 to i64*
  store i64 %140, i64* %142, align 8
  store i64 %56, i64* %15, align 8
  %143 = icmp eq %"struct.jxl::jpeg::OutputChunk"** %139, null
  br i1 %143, label %147, label %144

144:                                              ; preds = %138
  %145 = bitcast %"struct.jxl::jpeg::OutputChunk"** %139 to i8*
  tail call void @_ZdlPv(i8* %145) #11
  %146 = load %"struct.jxl::jpeg::OutputChunk"**, %"struct.jxl::jpeg::OutputChunk"*** %3, align 8
  br label %147

147:                                              ; preds = %144, %138, %34, %2
  %148 = phi %"struct.jxl::jpeg::OutputChunk"** [ %146, %144 ], [ %53, %138 ], [ %36, %34 ], [ %4, %2 ]
  %149 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %148, i64 -1
  %150 = bitcast %"struct.jxl::jpeg::OutputChunk"** %1 to i64*
  %151 = load i64, i64* %150, align 8
  %152 = bitcast %"struct.jxl::jpeg::OutputChunk"** %149 to i64*
  store i64 %151, i64* %152, align 8
  %153 = load %"struct.jxl::jpeg::OutputChunk"**, %"struct.jxl::jpeg::OutputChunk"*** %3, align 8
  %154 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %153, i64 -1
  store %"struct.jxl::jpeg::OutputChunk"** %154, %"struct.jxl::jpeg::OutputChunk"*** %3, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__15dequeIN3jxl4jpeg11OutputChunkENS_9allocatorIS3_EEE12emplace_backIJmEEEvDpOT_(%"class.std::__1::deque"*, i64* dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = bitcast %"struct.jxl::jpeg::OutputChunk"*** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 1
  %7 = bitcast %"struct.jxl::jpeg::OutputChunk"*** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = ashr exact i64 %9, 3
  %11 = icmp eq i64 %9, 0
  %12 = mul i64 %10, 170
  %13 = add i64 %12, -1
  %14 = select i1 %11, i64 0, i64 %13
  %15 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 1
  %16 = load i64, i64* %15, align 8
  %17 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %18 = load i64, i64* %17, align 8
  %19 = add i64 %18, %16
  %20 = icmp eq i64 %14, %19
  %21 = inttoptr i64 %8 to %"struct.jxl::jpeg::OutputChunk"**
  %22 = inttoptr i64 %5 to %"struct.jxl::jpeg::OutputChunk"**
  br i1 %20, label %23, label %29

23:                                               ; preds = %2
  tail call void @_ZNSt3__15dequeIN3jxl4jpeg11OutputChunkENS_9allocatorIS3_EEE19__add_back_capacityEv(%"class.std::__1::deque"* %0)
  %24 = load i64, i64* %17, align 8
  %25 = load i64, i64* %15, align 8
  %26 = load %"struct.jxl::jpeg::OutputChunk"**, %"struct.jxl::jpeg::OutputChunk"*** %6, align 8
  %27 = load %"struct.jxl::jpeg::OutputChunk"**, %"struct.jxl::jpeg::OutputChunk"*** %3, align 8
  %28 = add i64 %25, %24
  br label %29

29:                                               ; preds = %23, %2
  %30 = phi i64 [ %28, %23 ], [ %19, %2 ]
  %31 = phi %"struct.jxl::jpeg::OutputChunk"** [ %27, %23 ], [ %22, %2 ]
  %32 = phi %"struct.jxl::jpeg::OutputChunk"** [ %26, %23 ], [ %21, %2 ]
  %33 = icmp eq %"struct.jxl::jpeg::OutputChunk"** %31, %32
  br i1 %33, label %40, label %34

34:                                               ; preds = %29
  %35 = udiv i64 %30, 170
  %36 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %32, i64 %35
  %37 = load %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %36, align 8
  %38 = urem i64 %30, 170
  %39 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk", %"struct.jxl::jpeg::OutputChunk"* %37, i64 %38
  br label %40

40:                                               ; preds = %29, %34
  %41 = phi %"struct.jxl::jpeg::OutputChunk"* [ %39, %34 ], [ null, %29 ]
  %42 = load i64, i64* %1, align 8
  %43 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk", %"struct.jxl::jpeg::OutputChunk"* %41, i64 0, i32 2
  %44 = bitcast %"class.std::__1::unique_ptr"* %43 to i64*
  store i64 0, i64* %44, align 8
  %45 = tail call i8* @_Znwm(i64 24) #11
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %45, i8 0, i64 24, i1 false) #10
  %46 = icmp eq i64 %42, 0
  br i1 %46, label %64, label %47

47:                                               ; preds = %40
  %48 = icmp slt i64 %42, 0
  br i1 %48, label %49, label %51

49:                                               ; preds = %47
  %50 = bitcast i8* %45 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %50) #12
  unreachable

51:                                               ; preds = %47
  %52 = tail call i8* @_Znwm(i64 %42) #11
  %53 = getelementptr inbounds i8, i8* %45, i64 8
  %54 = bitcast i8* %45 to i8**
  store i8* %52, i8** %54, align 8
  %55 = getelementptr inbounds i8, i8* %52, i64 %42
  %56 = getelementptr inbounds i8, i8* %45, i64 16
  %57 = bitcast i8* %56 to i8**
  store i8* %55, i8** %57, align 8
  %58 = bitcast i8* %53 to i64*
  %59 = ptrtoint i8* %52 to i64
  %60 = sub i64 %42, %59
  %61 = getelementptr i8, i8* %52, i64 %60
  %62 = ptrtoint i8* %61 to i64
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %52, i8 0, i64 %62, i1 false) #10
  %63 = ptrtoint i8* %55 to i64
  store i64 %63, i64* %58, align 8
  br label %64

64:                                               ; preds = %40, %51
  %65 = phi i64 [ 0, %40 ], [ %59, %51 ]
  %66 = bitcast %"class.std::__1::unique_ptr"* %43 to i8**
  store i8* %45, i8** %66, align 8
  %67 = bitcast %"struct.jxl::jpeg::OutputChunk"* %41 to i64*
  store i64 %65, i64* %67, align 8
  %68 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk", %"struct.jxl::jpeg::OutputChunk"* %41, i64 0, i32 1
  store i64 %42, i64* %68, align 8
  %69 = load i64, i64* %17, align 8
  %70 = add i64 %69, 1
  store i64 %70, i64* %17, align 8
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc i32 @_ZN3jxl4jpeg12_GLOBAL__N_112DoEncodeScanILi0EEENS1_19SerializationStatusERKNS0_8JPEGDataEPNS0_18SerializationStateE(%"struct.jxl::jpeg::JPEGData"* dereferenceable(296), %"struct.jxl::jpeg::SerializationState"*) unnamed_addr #8 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 8
  %6 = load i32, i32* %5, align 4
  %7 = sext i32 %6 to i64
  %8 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 10, i32 0, i32 0
  %9 = load %"struct.jxl::jpeg::JPEGScanInfo"*, %"struct.jxl::jpeg::JPEGScanInfo"** %8, align 8
  %10 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %9, i64 %7
  %11 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 13
  %12 = load i8, i8* %11, align 8, !range !2
  %13 = icmp eq i8 %12, 0
  %14 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 3
  %15 = load i32, i32* %14, align 8
  %16 = select i1 %13, i32 0, i32 %15
  %17 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 0
  %18 = load i32, i32* %17, align 8
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %129

20:                                               ; preds = %2
  %21 = tail call fastcc zeroext i1 @_ZN3jxl4jpeg12_GLOBAL__N_19EncodeSOSERKNS0_8JPEGDataERKNS0_12JPEGScanInfoEPNS0_18SerializationStateE(%"struct.jxl::jpeg::JPEGData"* dereferenceable(296) %0, %"struct.jxl::jpeg::JPEGScanInfo"* dereferenceable(120) %10, %"struct.jxl::jpeg::SerializationState"* %1)
  br i1 %21, label %22, label %3213

22:                                               ; preds = %20
  %23 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 1
  %24 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2, i32 2
  store %"class.std::__1::deque"* %23, %"class.std::__1::deque"** %24, align 8
  %25 = tail call i8* @_Znwm(i64 24) #11
  %26 = tail call i8* @_Znwm(i64 16384) #11
  %27 = getelementptr inbounds i8, i8* %25, i64 8
  %28 = bitcast i8* %25 to i8**
  store i8* %26, i8** %28, align 8
  %29 = getelementptr inbounds i8, i8* %26, i64 16384
  %30 = getelementptr inbounds i8, i8* %25, i64 16
  %31 = bitcast i8* %30 to i8**
  store i8* %29, i8** %31, align 8
  %32 = bitcast i8* %27 to i64*
  %33 = ptrtoint i8* %26 to i64
  %34 = sub i64 16384, %33
  %35 = getelementptr i8, i8* %26, i64 %34
  %36 = ptrtoint i8* %35 to i64
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %26, i8 0, i64 %36, i1 false) #10
  %37 = ptrtoint i8* %29 to i64
  store i64 %37, i64* %32, align 8
  %38 = ptrtoint i8* %25 to i64
  %39 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2, i32 3
  %40 = bitcast %"struct.jxl::jpeg::OutputChunk"* %39 to i64*
  store i64 %33, i64* %40, align 8
  %41 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2, i32 3, i32 1
  store i64 16384, i64* %41, align 8
  %42 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2, i32 3, i32 2
  %43 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %42, i64 0, i32 0, i32 0, i32 0
  %44 = load %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"** %43, align 8
  %45 = bitcast %"class.std::__1::unique_ptr"* %42 to i64*
  store i64 %38, i64* %45, align 8
  %46 = icmp eq %"class.std::__1::vector.0"* %44, null
  br i1 %46, label %47, label %49

47:                                               ; preds = %22
  %48 = bitcast i8* %25 to i64*
  br label %62

49:                                               ; preds = %22
  %50 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %44, i64 0, i32 0, i32 0
  %51 = load i8*, i8** %50, align 8
  %52 = icmp eq i8* %51, null
  br i1 %52, label %57, label %53

53:                                               ; preds = %49
  %54 = ptrtoint i8* %51 to i64
  %55 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %44, i64 0, i32 0, i32 1
  %56 = bitcast i8** %55 to i64*
  store i64 %54, i64* %56, align 8
  tail call void @_ZdlPv(i8* nonnull %51) #11
  br label %57

57:                                               ; preds = %53, %49
  %58 = bitcast %"class.std::__1::vector.0"* %44 to i8*
  tail call void @_ZdlPv(i8* %58) #11
  %59 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2, i32 3, i32 2, i32 0, i32 0, i32 0
  %60 = bitcast %"class.std::__1::vector.0"** %59 to i64**
  %61 = load i64*, i64** %60, align 8
  br label %62

62:                                               ; preds = %47, %57
  %63 = phi i64* [ %61, %57 ], [ %48, %47 ]
  %64 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2, i32 5
  %65 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2, i32 7
  %66 = bitcast i64* %64 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %66, i8 0, i64 16, i1 false) #10
  store i32 64, i32* %65, align 8
  %67 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2, i32 0
  store i8 1, i8* %67, align 8
  %68 = load i64, i64* %63, align 8
  %69 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2, i32 4
  %70 = bitcast i8** %69 to i64*
  store i64 %68, i64* %70, align 8
  %71 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 8, i32 0
  store i32 0, i32* %71, align 8
  %72 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 8, i32 1
  store %"struct.jxl::jpeg::HuffmanCodeTable"* null, %"struct.jxl::jpeg::HuffmanCodeTable"** %72, align 8
  %73 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 8, i32 2
  %74 = bitcast %"class.std::__1::vector.86"* %73 to i64*
  %75 = load i64, i64* %74, align 8
  %76 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 8, i32 2, i32 0, i32 1
  %77 = bitcast i32** %76 to i64*
  store i64 %75, i64* %77, align 8
  %78 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 8, i32 2, i32 0, i32 2, i32 0, i32 0
  %79 = bitcast i32** %78 to i64*
  %80 = load i64, i64* %79, align 8
  %81 = sub i64 %80, %75
  %82 = ashr exact i64 %81, 2
  %83 = icmp ult i64 %82, 65536
  br i1 %83, label %84, label %92

84:                                               ; preds = %62
  %85 = tail call i8* @_Znwm(i64 262144) #11
  %86 = ptrtoint i8* %85 to i64
  %87 = getelementptr inbounds i8, i8* %85, i64 262144
  %88 = ptrtoint i8* %87 to i64
  store i64 %86, i64* %74, align 8
  store i64 %86, i64* %77, align 8
  store i64 %88, i64* %79, align 8
  %89 = icmp eq i64 %75, 0
  br i1 %89, label %92, label %90

90:                                               ; preds = %84
  %91 = inttoptr i64 %75 to i8*
  tail call void @_ZdlPv(i8* %91) #11
  br label %92

92:                                               ; preds = %62, %84, %90
  %93 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 4
  store i32 %16, i32* %93, align 8
  %94 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 5
  store i32 0, i32* %94, align 4
  %95 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 6
  store i32 0, i32* %95, align 8
  %96 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 9
  store i64 0, i64* %96, align 8
  %97 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %9, i64 %7, i32 8
  %98 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %9, i64 %7, i32 8, i32 0, i32 1
  %99 = bitcast %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"** %98 to i64*
  %100 = load i64, i64* %99, align 8
  %101 = bitcast %"class.std::__1::vector.55"* %97 to i64*
  %102 = load i64, i64* %101, align 8
  %103 = icmp eq i64 %100, %102
  br i1 %103, label %108, label %104

104:                                              ; preds = %92
  %105 = inttoptr i64 %102 to %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*
  %106 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo", %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* %105, i64 0, i32 0
  %107 = load i32, i32* %106, align 4
  br label %108

108:                                              ; preds = %92, %104
  %109 = phi i32 [ %107, %104 ], [ -1, %92 ]
  %110 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 10
  store i32 %109, i32* %110, align 8
  %111 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 12
  store i64 0, i64* %111, align 8
  %112 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %9, i64 %7, i32 7
  %113 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %9, i64 %7, i32 7, i32 0, i32 1
  %114 = bitcast i32** %113 to i64*
  %115 = load i64, i64* %114, align 8
  %116 = bitcast %"class.std::__1::vector.48"* %112 to i64*
  %117 = load i64, i64* %116, align 8
  %118 = icmp eq i64 %115, %117
  br i1 %118, label %123, label %119

119:                                              ; preds = %108
  store i64 1, i64* %111, align 8
  %120 = getelementptr inbounds %"class.std::__1::vector.48", %"class.std::__1::vector.48"* %112, i64 0, i32 0, i32 0
  %121 = load i32*, i32** %120, align 8
  %122 = load i32, i32* %121, align 4
  br label %123

123:                                              ; preds = %108, %119
  %124 = phi i32 [ %122, %119 ], [ -1, %108 ]
  %125 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 13
  store i32 %124, i32* %125, align 8
  %126 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 1
  store i32 0, i32* %126, align 4
  %127 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 3, i64 0
  %128 = bitcast i16* %127 to i64*
  store i64 0, i64* %128, align 8
  store i32 1, i32* %17, align 8
  br label %129

129:                                              ; preds = %123, %2
  %130 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2
  %131 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 8
  %132 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %9, i64 %7, i32 4
  %133 = load i32, i32* %132, align 8
  %134 = icmp ugt i32 %133, 1
  %135 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %135) #10
  store i32 0, i32* %3, align 4
  %136 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %136) #10
  store i32 0, i32* %4, align 4
  call void @_ZNK3jxl4jpeg8JPEGData16CalculateMcuSizeERKNS0_12JPEGScanInfoEPiS5_(%"struct.jxl::jpeg::JPEGData"* %0, %"struct.jxl::jpeg::JPEGScanInfo"* dereferenceable(120) %10, i32* nonnull %3, i32* nonnull %4) #10
  %137 = load i32, i32* %4, align 4
  %138 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 1
  %139 = load i32, i32* %138, align 4
  %140 = icmp slt i32 %139, %137
  br i1 %140, label %141, label %2580

141:                                              ; preds = %129
  %142 = icmp sgt i32 %16, 0
  %143 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 4
  %144 = getelementptr inbounds %"struct.jxl::jpeg::DCTCodingState", %"struct.jxl::jpeg::DCTCodingState"* %131, i64 0, i32 0
  %145 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 8, i32 1
  %146 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2, i32 7
  %147 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2, i32 6
  %148 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2, i32 5
  %149 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2, i32 4
  %150 = getelementptr inbounds %"struct.jxl::jpeg::JpegBitWriter", %"struct.jxl::jpeg::JpegBitWriter"* %130, i64 0, i32 0
  %151 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 8, i32 2
  %152 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 8, i32 2, i32 0, i32 1
  %153 = bitcast i32** %152 to i64*
  %154 = bitcast %"class.std::__1::vector.86"* %151 to i64*
  %155 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 11
  %156 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 12
  %157 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 5
  %158 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 3, i64 0
  %159 = bitcast i16* %158 to i64*
  %160 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 9, i32 0, i32 0
  %161 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 9, i32 0, i32 0
  %162 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 10, i32 0, i32 0
  %163 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 6
  %164 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 13
  %165 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 12
  %166 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %9, i64 %7, i32 7
  %167 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %9, i64 %7, i32 7, i32 0, i32 1
  %168 = bitcast i32** %167 to i64*
  %169 = bitcast %"class.std::__1::vector.48"* %166 to i64*
  %170 = getelementptr inbounds %"class.std::__1::vector.48", %"class.std::__1::vector.48"* %166, i64 0, i32 0, i32 0
  %171 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 10
  %172 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %9, i64 %7, i32 8
  %173 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 9
  %174 = getelementptr inbounds %"class.std::__1::vector.55", %"class.std::__1::vector.55"* %172, i64 0, i32 0, i32 0
  %175 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %9, i64 %7, i32 8, i32 0, i32 1
  %176 = bitcast %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"** %175 to i64*
  %177 = bitcast %"class.std::__1::vector.55"* %172 to i64*
  %178 = load i32, i32* %3, align 4
  br label %179

179:                                              ; preds = %141, %2573
  %180 = phi i32 [ %139, %141 ], [ %2576, %2573 ]
  %181 = phi i32 [ %178, %141 ], [ %2575, %2573 ]
  %182 = icmp sgt i32 %181, 0
  br i1 %182, label %183, label %2573

183:                                              ; preds = %179, %2565
  %184 = phi i32 [ %2568, %2565 ], [ 0, %179 ]
  br i1 %142, label %185, label %730

185:                                              ; preds = %183
  %186 = load i32, i32* %143, align 8
  %187 = icmp eq i32 %186, 0
  br i1 %187, label %188, label %730

188:                                              ; preds = %185
  %189 = load i32, i32* %144, align 8
  %190 = icmp sgt i32 %189, 0
  br i1 %190, label %191, label %524

191:                                              ; preds = %188
  %192 = call i32 @llvm.ctlz.i32(i32 %189, i1 true) #10, !range !22
  %193 = xor i32 %192, 31
  %194 = shl nuw nsw i32 %193, 4
  %195 = load %"struct.jxl::jpeg::HuffmanCodeTable"*, %"struct.jxl::jpeg::HuffmanCodeTable"** %145, align 8
  %196 = zext i32 %194 to i64
  %197 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanCodeTable", %"struct.jxl::jpeg::HuffmanCodeTable"* %195, i64 0, i32 0, i64 %196
  %198 = load i32, i32* %197, align 4
  %199 = icmp eq i32 %198, 0
  br i1 %199, label %200, label %201

200:                                              ; preds = %191
  store i8 0, i8* %150, align 8
  br label %360

201:                                              ; preds = %191
  %202 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanCodeTable", %"struct.jxl::jpeg::HuffmanCodeTable"* %195, i64 0, i32 1, i64 %196
  %203 = load i32, i32* %202, align 4
  %204 = sext i32 %203 to i64
  %205 = load i32, i32* %146, align 8
  %206 = sub nsw i32 %205, %198
  store i32 %206, i32* %146, align 8
  %207 = zext i32 %206 to i64
  %208 = shl i64 %204, %207
  %209 = load i64, i64* %147, align 8
  %210 = or i64 %208, %209
  store i64 %210, i64* %147, align 8
  %211 = icmp slt i32 %206, 17
  br i1 %211, label %212, label %360

212:                                              ; preds = %201
  %213 = load i64, i64* %148, align 8
  %214 = add i64 %213, 12
  %215 = icmp ugt i64 %214, 16384
  br i1 %215, label %216, label %219, !prof !23

216:                                              ; preds = %212
  call fastcc void @_ZN3jxl4jpeg12_GLOBAL__N_110SwapBufferEPNS0_13JpegBitWriterE(%"struct.jxl::jpeg::JpegBitWriter"* %130) #10
  %217 = load i64, i64* %148, align 8
  %218 = load i64, i64* %147, align 8
  br label %219

219:                                              ; preds = %216, %212
  %220 = phi i64 [ %210, %212 ], [ %218, %216 ]
  %221 = phi i64 [ %213, %212 ], [ %217, %216 ]
  %222 = or i64 %220, 65535
  %223 = xor i64 %222, -65536
  %224 = add i64 %223, -72340172838076673
  %225 = and i64 %223, -9187201950435770368
  %226 = xor i64 %225, -9187201950435770368
  %227 = and i64 %226, %224
  %228 = icmp eq i64 %227, 0
  %229 = lshr i64 %220, 56
  %230 = trunc i64 %229 to i8
  %231 = load i8*, i8** %149, align 8
  br i1 %228, label %316, label %232

232:                                              ; preds = %219
  %233 = add i64 %221, 1
  store i64 %233, i64* %148, align 8
  %234 = getelementptr inbounds i8, i8* %231, i64 %221
  store i8 %230, i8* %234, align 1
  %235 = icmp eq i64 %229, 255
  br i1 %235, label %236, label %241

236:                                              ; preds = %232
  %237 = load i8*, i8** %149, align 8
  %238 = load i64, i64* %148, align 8
  %239 = add i64 %238, 1
  store i64 %239, i64* %148, align 8
  %240 = getelementptr inbounds i8, i8* %237, i64 %238
  store i8 0, i8* %240, align 1
  br label %241

241:                                              ; preds = %236, %232
  %242 = load i64, i64* %147, align 8
  %243 = lshr i64 %242, 48
  %244 = trunc i64 %243 to i8
  %245 = load i8*, i8** %149, align 8
  %246 = load i64, i64* %148, align 8
  %247 = add i64 %246, 1
  store i64 %247, i64* %148, align 8
  %248 = getelementptr inbounds i8, i8* %245, i64 %246
  store i8 %244, i8* %248, align 1
  %249 = and i64 %242, 71776119061217280
  %250 = icmp eq i64 %249, 71776119061217280
  br i1 %250, label %251, label %256

251:                                              ; preds = %241
  %252 = load i8*, i8** %149, align 8
  %253 = load i64, i64* %148, align 8
  %254 = add i64 %253, 1
  store i64 %254, i64* %148, align 8
  %255 = getelementptr inbounds i8, i8* %252, i64 %253
  store i8 0, i8* %255, align 1
  br label %256

256:                                              ; preds = %251, %241
  %257 = load i64, i64* %147, align 8
  %258 = lshr i64 %257, 40
  %259 = trunc i64 %258 to i8
  %260 = load i8*, i8** %149, align 8
  %261 = load i64, i64* %148, align 8
  %262 = add i64 %261, 1
  store i64 %262, i64* %148, align 8
  %263 = getelementptr inbounds i8, i8* %260, i64 %261
  store i8 %259, i8* %263, align 1
  %264 = and i64 %257, 280375465082880
  %265 = icmp eq i64 %264, 280375465082880
  br i1 %265, label %266, label %271

266:                                              ; preds = %256
  %267 = load i8*, i8** %149, align 8
  %268 = load i64, i64* %148, align 8
  %269 = add i64 %268, 1
  store i64 %269, i64* %148, align 8
  %270 = getelementptr inbounds i8, i8* %267, i64 %268
  store i8 0, i8* %270, align 1
  br label %271

271:                                              ; preds = %266, %256
  %272 = load i64, i64* %147, align 8
  %273 = lshr i64 %272, 32
  %274 = trunc i64 %273 to i8
  %275 = load i8*, i8** %149, align 8
  %276 = load i64, i64* %148, align 8
  %277 = add i64 %276, 1
  store i64 %277, i64* %148, align 8
  %278 = getelementptr inbounds i8, i8* %275, i64 %276
  store i8 %274, i8* %278, align 1
  %279 = and i64 %272, 1095216660480
  %280 = icmp eq i64 %279, 1095216660480
  br i1 %280, label %281, label %286

281:                                              ; preds = %271
  %282 = load i8*, i8** %149, align 8
  %283 = load i64, i64* %148, align 8
  %284 = add i64 %283, 1
  store i64 %284, i64* %148, align 8
  %285 = getelementptr inbounds i8, i8* %282, i64 %283
  store i8 0, i8* %285, align 1
  br label %286

286:                                              ; preds = %281, %271
  %287 = load i64, i64* %147, align 8
  %288 = lshr i64 %287, 24
  %289 = trunc i64 %288 to i8
  %290 = load i8*, i8** %149, align 8
  %291 = load i64, i64* %148, align 8
  %292 = add i64 %291, 1
  store i64 %292, i64* %148, align 8
  %293 = getelementptr inbounds i8, i8* %290, i64 %291
  store i8 %289, i8* %293, align 1
  %294 = and i64 %287, 4278190080
  %295 = icmp eq i64 %294, 4278190080
  br i1 %295, label %296, label %301

296:                                              ; preds = %286
  %297 = load i8*, i8** %149, align 8
  %298 = load i64, i64* %148, align 8
  %299 = add i64 %298, 1
  store i64 %299, i64* %148, align 8
  %300 = getelementptr inbounds i8, i8* %297, i64 %298
  store i8 0, i8* %300, align 1
  br label %301

301:                                              ; preds = %296, %286
  %302 = load i64, i64* %147, align 8
  %303 = lshr i64 %302, 16
  %304 = trunc i64 %303 to i8
  %305 = load i8*, i8** %149, align 8
  %306 = load i64, i64* %148, align 8
  %307 = add i64 %306, 1
  store i64 %307, i64* %148, align 8
  %308 = getelementptr inbounds i8, i8* %305, i64 %306
  store i8 %304, i8* %308, align 1
  %309 = and i64 %302, 16711680
  %310 = icmp eq i64 %309, 16711680
  br i1 %310, label %311, label %355

311:                                              ; preds = %301
  %312 = load i8*, i8** %149, align 8
  %313 = load i64, i64* %148, align 8
  %314 = add i64 %313, 1
  store i64 %314, i64* %148, align 8
  %315 = getelementptr inbounds i8, i8* %312, i64 %313
  store i8 0, i8* %315, align 1
  br label %355

316:                                              ; preds = %219
  %317 = getelementptr inbounds i8, i8* %231, i64 %221
  store i8 %230, i8* %317, align 1
  %318 = load i64, i64* %147, align 8
  %319 = lshr i64 %318, 48
  %320 = trunc i64 %319 to i8
  %321 = load i8*, i8** %149, align 8
  %322 = load i64, i64* %148, align 8
  %323 = add i64 %322, 1
  %324 = getelementptr inbounds i8, i8* %321, i64 %323
  store i8 %320, i8* %324, align 1
  %325 = load i64, i64* %147, align 8
  %326 = lshr i64 %325, 40
  %327 = trunc i64 %326 to i8
  %328 = load i8*, i8** %149, align 8
  %329 = load i64, i64* %148, align 8
  %330 = add i64 %329, 2
  %331 = getelementptr inbounds i8, i8* %328, i64 %330
  store i8 %327, i8* %331, align 1
  %332 = load i64, i64* %147, align 8
  %333 = lshr i64 %332, 32
  %334 = trunc i64 %333 to i8
  %335 = load i8*, i8** %149, align 8
  %336 = load i64, i64* %148, align 8
  %337 = add i64 %336, 3
  %338 = getelementptr inbounds i8, i8* %335, i64 %337
  store i8 %334, i8* %338, align 1
  %339 = load i64, i64* %147, align 8
  %340 = lshr i64 %339, 24
  %341 = trunc i64 %340 to i8
  %342 = load i8*, i8** %149, align 8
  %343 = load i64, i64* %148, align 8
  %344 = add i64 %343, 4
  %345 = getelementptr inbounds i8, i8* %342, i64 %344
  store i8 %341, i8* %345, align 1
  %346 = load i64, i64* %147, align 8
  %347 = lshr i64 %346, 16
  %348 = trunc i64 %347 to i8
  %349 = load i8*, i8** %149, align 8
  %350 = load i64, i64* %148, align 8
  %351 = add i64 %350, 5
  %352 = getelementptr inbounds i8, i8* %349, i64 %351
  store i8 %348, i8* %352, align 1
  %353 = load i64, i64* %148, align 8
  %354 = add i64 %353, 6
  store i64 %354, i64* %148, align 8
  br label %355

355:                                              ; preds = %316, %311, %301
  %356 = load i64, i64* %147, align 8
  %357 = shl i64 %356, 48
  store i64 %357, i64* %147, align 8
  %358 = load i32, i32* %146, align 8
  %359 = add nsw i32 %358, 48
  store i32 %359, i32* %146, align 8
  br label %360

360:                                              ; preds = %355, %201, %200
  %361 = icmp eq i32 %193, 0
  br i1 %361, label %523, label %362

362:                                              ; preds = %360
  %363 = load i32, i32* %144, align 8
  %364 = shl nsw i32 -1, %193
  %365 = xor i32 %364, -1
  %366 = and i32 %363, %365
  %367 = sext i32 %366 to i64
  %368 = load i32, i32* %146, align 8
  %369 = sub nsw i32 %368, %193
  store i32 %369, i32* %146, align 8
  %370 = zext i32 %369 to i64
  %371 = shl i64 %367, %370
  %372 = load i64, i64* %147, align 8
  %373 = or i64 %371, %372
  store i64 %373, i64* %147, align 8
  %374 = icmp slt i32 %369, 17
  br i1 %374, label %375, label %523

375:                                              ; preds = %362
  %376 = load i64, i64* %148, align 8
  %377 = add i64 %376, 12
  %378 = icmp ugt i64 %377, 16384
  br i1 %378, label %379, label %382, !prof !23

379:                                              ; preds = %375
  call fastcc void @_ZN3jxl4jpeg12_GLOBAL__N_110SwapBufferEPNS0_13JpegBitWriterE(%"struct.jxl::jpeg::JpegBitWriter"* %130) #10
  %380 = load i64, i64* %148, align 8
  %381 = load i64, i64* %147, align 8
  br label %382

382:                                              ; preds = %379, %375
  %383 = phi i64 [ %373, %375 ], [ %381, %379 ]
  %384 = phi i64 [ %376, %375 ], [ %380, %379 ]
  %385 = or i64 %383, 65535
  %386 = xor i64 %385, -65536
  %387 = add i64 %386, -72340172838076673
  %388 = and i64 %386, -9187201950435770368
  %389 = xor i64 %388, -9187201950435770368
  %390 = and i64 %389, %387
  %391 = icmp eq i64 %390, 0
  %392 = lshr i64 %383, 56
  %393 = trunc i64 %392 to i8
  %394 = load i8*, i8** %149, align 8
  br i1 %391, label %479, label %395

395:                                              ; preds = %382
  %396 = add i64 %384, 1
  store i64 %396, i64* %148, align 8
  %397 = getelementptr inbounds i8, i8* %394, i64 %384
  store i8 %393, i8* %397, align 1
  %398 = icmp eq i64 %392, 255
  br i1 %398, label %399, label %404

399:                                              ; preds = %395
  %400 = load i8*, i8** %149, align 8
  %401 = load i64, i64* %148, align 8
  %402 = add i64 %401, 1
  store i64 %402, i64* %148, align 8
  %403 = getelementptr inbounds i8, i8* %400, i64 %401
  store i8 0, i8* %403, align 1
  br label %404

404:                                              ; preds = %399, %395
  %405 = load i64, i64* %147, align 8
  %406 = lshr i64 %405, 48
  %407 = trunc i64 %406 to i8
  %408 = load i8*, i8** %149, align 8
  %409 = load i64, i64* %148, align 8
  %410 = add i64 %409, 1
  store i64 %410, i64* %148, align 8
  %411 = getelementptr inbounds i8, i8* %408, i64 %409
  store i8 %407, i8* %411, align 1
  %412 = and i64 %405, 71776119061217280
  %413 = icmp eq i64 %412, 71776119061217280
  br i1 %413, label %414, label %419

414:                                              ; preds = %404
  %415 = load i8*, i8** %149, align 8
  %416 = load i64, i64* %148, align 8
  %417 = add i64 %416, 1
  store i64 %417, i64* %148, align 8
  %418 = getelementptr inbounds i8, i8* %415, i64 %416
  store i8 0, i8* %418, align 1
  br label %419

419:                                              ; preds = %414, %404
  %420 = load i64, i64* %147, align 8
  %421 = lshr i64 %420, 40
  %422 = trunc i64 %421 to i8
  %423 = load i8*, i8** %149, align 8
  %424 = load i64, i64* %148, align 8
  %425 = add i64 %424, 1
  store i64 %425, i64* %148, align 8
  %426 = getelementptr inbounds i8, i8* %423, i64 %424
  store i8 %422, i8* %426, align 1
  %427 = and i64 %420, 280375465082880
  %428 = icmp eq i64 %427, 280375465082880
  br i1 %428, label %429, label %434

429:                                              ; preds = %419
  %430 = load i8*, i8** %149, align 8
  %431 = load i64, i64* %148, align 8
  %432 = add i64 %431, 1
  store i64 %432, i64* %148, align 8
  %433 = getelementptr inbounds i8, i8* %430, i64 %431
  store i8 0, i8* %433, align 1
  br label %434

434:                                              ; preds = %429, %419
  %435 = load i64, i64* %147, align 8
  %436 = lshr i64 %435, 32
  %437 = trunc i64 %436 to i8
  %438 = load i8*, i8** %149, align 8
  %439 = load i64, i64* %148, align 8
  %440 = add i64 %439, 1
  store i64 %440, i64* %148, align 8
  %441 = getelementptr inbounds i8, i8* %438, i64 %439
  store i8 %437, i8* %441, align 1
  %442 = and i64 %435, 1095216660480
  %443 = icmp eq i64 %442, 1095216660480
  br i1 %443, label %444, label %449

444:                                              ; preds = %434
  %445 = load i8*, i8** %149, align 8
  %446 = load i64, i64* %148, align 8
  %447 = add i64 %446, 1
  store i64 %447, i64* %148, align 8
  %448 = getelementptr inbounds i8, i8* %445, i64 %446
  store i8 0, i8* %448, align 1
  br label %449

449:                                              ; preds = %444, %434
  %450 = load i64, i64* %147, align 8
  %451 = lshr i64 %450, 24
  %452 = trunc i64 %451 to i8
  %453 = load i8*, i8** %149, align 8
  %454 = load i64, i64* %148, align 8
  %455 = add i64 %454, 1
  store i64 %455, i64* %148, align 8
  %456 = getelementptr inbounds i8, i8* %453, i64 %454
  store i8 %452, i8* %456, align 1
  %457 = and i64 %450, 4278190080
  %458 = icmp eq i64 %457, 4278190080
  br i1 %458, label %459, label %464

459:                                              ; preds = %449
  %460 = load i8*, i8** %149, align 8
  %461 = load i64, i64* %148, align 8
  %462 = add i64 %461, 1
  store i64 %462, i64* %148, align 8
  %463 = getelementptr inbounds i8, i8* %460, i64 %461
  store i8 0, i8* %463, align 1
  br label %464

464:                                              ; preds = %459, %449
  %465 = load i64, i64* %147, align 8
  %466 = lshr i64 %465, 16
  %467 = trunc i64 %466 to i8
  %468 = load i8*, i8** %149, align 8
  %469 = load i64, i64* %148, align 8
  %470 = add i64 %469, 1
  store i64 %470, i64* %148, align 8
  %471 = getelementptr inbounds i8, i8* %468, i64 %469
  store i8 %467, i8* %471, align 1
  %472 = and i64 %465, 16711680
  %473 = icmp eq i64 %472, 16711680
  br i1 %473, label %474, label %518

474:                                              ; preds = %464
  %475 = load i8*, i8** %149, align 8
  %476 = load i64, i64* %148, align 8
  %477 = add i64 %476, 1
  store i64 %477, i64* %148, align 8
  %478 = getelementptr inbounds i8, i8* %475, i64 %476
  store i8 0, i8* %478, align 1
  br label %518

479:                                              ; preds = %382
  %480 = getelementptr inbounds i8, i8* %394, i64 %384
  store i8 %393, i8* %480, align 1
  %481 = load i64, i64* %147, align 8
  %482 = lshr i64 %481, 48
  %483 = trunc i64 %482 to i8
  %484 = load i8*, i8** %149, align 8
  %485 = load i64, i64* %148, align 8
  %486 = add i64 %485, 1
  %487 = getelementptr inbounds i8, i8* %484, i64 %486
  store i8 %483, i8* %487, align 1
  %488 = load i64, i64* %147, align 8
  %489 = lshr i64 %488, 40
  %490 = trunc i64 %489 to i8
  %491 = load i8*, i8** %149, align 8
  %492 = load i64, i64* %148, align 8
  %493 = add i64 %492, 2
  %494 = getelementptr inbounds i8, i8* %491, i64 %493
  store i8 %490, i8* %494, align 1
  %495 = load i64, i64* %147, align 8
  %496 = lshr i64 %495, 32
  %497 = trunc i64 %496 to i8
  %498 = load i8*, i8** %149, align 8
  %499 = load i64, i64* %148, align 8
  %500 = add i64 %499, 3
  %501 = getelementptr inbounds i8, i8* %498, i64 %500
  store i8 %497, i8* %501, align 1
  %502 = load i64, i64* %147, align 8
  %503 = lshr i64 %502, 24
  %504 = trunc i64 %503 to i8
  %505 = load i8*, i8** %149, align 8
  %506 = load i64, i64* %148, align 8
  %507 = add i64 %506, 4
  %508 = getelementptr inbounds i8, i8* %505, i64 %507
  store i8 %504, i8* %508, align 1
  %509 = load i64, i64* %147, align 8
  %510 = lshr i64 %509, 16
  %511 = trunc i64 %510 to i8
  %512 = load i8*, i8** %149, align 8
  %513 = load i64, i64* %148, align 8
  %514 = add i64 %513, 5
  %515 = getelementptr inbounds i8, i8* %512, i64 %514
  store i8 %511, i8* %515, align 1
  %516 = load i64, i64* %148, align 8
  %517 = add i64 %516, 6
  store i64 %517, i64* %148, align 8
  br label %518

518:                                              ; preds = %479, %474, %464
  %519 = load i64, i64* %147, align 8
  %520 = shl i64 %519, 48
  store i64 %520, i64* %147, align 8
  %521 = load i32, i32* %146, align 8
  %522 = add nsw i32 %521, 48
  store i32 %522, i32* %146, align 8
  br label %523

523:                                              ; preds = %518, %362, %360
  store i32 0, i32* %144, align 8
  br label %524

524:                                              ; preds = %523, %188
  %525 = load i64, i64* %153, align 8
  %526 = load i64, i64* %154, align 8
  %527 = icmp eq i64 %525, %526
  br i1 %527, label %705, label %528

528:                                              ; preds = %524
  %529 = load i32, i32* %146, align 8
  %530 = load i64, i64* %147, align 8
  br label %531

531:                                              ; preds = %696, %528
  %532 = phi i64 [ %526, %528 ], [ %697, %696 ]
  %533 = phi i64 [ %525, %528 ], [ %698, %696 ]
  %534 = phi i64 [ %530, %528 ], [ %699, %696 ]
  %535 = phi i32 [ %529, %528 ], [ %700, %696 ]
  %536 = phi i64 [ 0, %528 ], [ %701, %696 ]
  %537 = inttoptr i64 %532 to i32*
  %538 = getelementptr inbounds i32, i32* %537, i64 %536
  %539 = load i32, i32* %538, align 4
  %540 = sext i32 %539 to i64
  %541 = add nsw i32 %535, -1
  store i32 %541, i32* %146, align 8
  %542 = zext i32 %541 to i64
  %543 = shl i64 %540, %542
  %544 = or i64 %543, %534
  store i64 %544, i64* %147, align 8
  %545 = icmp slt i32 %535, 18
  br i1 %545, label %546, label %696

546:                                              ; preds = %531
  %547 = load i64, i64* %148, align 8
  %548 = add i64 %547, 12
  %549 = icmp ugt i64 %548, 16384
  br i1 %549, label %550, label %553, !prof !23

550:                                              ; preds = %546
  call fastcc void @_ZN3jxl4jpeg12_GLOBAL__N_110SwapBufferEPNS0_13JpegBitWriterE(%"struct.jxl::jpeg::JpegBitWriter"* %130) #10
  %551 = load i64, i64* %148, align 8
  %552 = load i64, i64* %147, align 8
  br label %553

553:                                              ; preds = %550, %546
  %554 = phi i64 [ %544, %546 ], [ %552, %550 ]
  %555 = phi i64 [ %547, %546 ], [ %551, %550 ]
  %556 = or i64 %554, 65535
  %557 = xor i64 %556, -65536
  %558 = add i64 %557, -72340172838076673
  %559 = and i64 %557, -9187201950435770368
  %560 = xor i64 %559, -9187201950435770368
  %561 = and i64 %560, %558
  %562 = icmp eq i64 %561, 0
  %563 = lshr i64 %554, 56
  %564 = trunc i64 %563 to i8
  %565 = load i8*, i8** %149, align 8
  br i1 %562, label %650, label %566

566:                                              ; preds = %553
  %567 = add i64 %555, 1
  store i64 %567, i64* %148, align 8
  %568 = getelementptr inbounds i8, i8* %565, i64 %555
  store i8 %564, i8* %568, align 1
  %569 = icmp eq i64 %563, 255
  br i1 %569, label %570, label %575

570:                                              ; preds = %566
  %571 = load i8*, i8** %149, align 8
  %572 = load i64, i64* %148, align 8
  %573 = add i64 %572, 1
  store i64 %573, i64* %148, align 8
  %574 = getelementptr inbounds i8, i8* %571, i64 %572
  store i8 0, i8* %574, align 1
  br label %575

575:                                              ; preds = %570, %566
  %576 = load i64, i64* %147, align 8
  %577 = lshr i64 %576, 48
  %578 = trunc i64 %577 to i8
  %579 = load i8*, i8** %149, align 8
  %580 = load i64, i64* %148, align 8
  %581 = add i64 %580, 1
  store i64 %581, i64* %148, align 8
  %582 = getelementptr inbounds i8, i8* %579, i64 %580
  store i8 %578, i8* %582, align 1
  %583 = and i64 %576, 71776119061217280
  %584 = icmp eq i64 %583, 71776119061217280
  br i1 %584, label %585, label %590

585:                                              ; preds = %575
  %586 = load i8*, i8** %149, align 8
  %587 = load i64, i64* %148, align 8
  %588 = add i64 %587, 1
  store i64 %588, i64* %148, align 8
  %589 = getelementptr inbounds i8, i8* %586, i64 %587
  store i8 0, i8* %589, align 1
  br label %590

590:                                              ; preds = %585, %575
  %591 = load i64, i64* %147, align 8
  %592 = lshr i64 %591, 40
  %593 = trunc i64 %592 to i8
  %594 = load i8*, i8** %149, align 8
  %595 = load i64, i64* %148, align 8
  %596 = add i64 %595, 1
  store i64 %596, i64* %148, align 8
  %597 = getelementptr inbounds i8, i8* %594, i64 %595
  store i8 %593, i8* %597, align 1
  %598 = and i64 %591, 280375465082880
  %599 = icmp eq i64 %598, 280375465082880
  br i1 %599, label %600, label %605

600:                                              ; preds = %590
  %601 = load i8*, i8** %149, align 8
  %602 = load i64, i64* %148, align 8
  %603 = add i64 %602, 1
  store i64 %603, i64* %148, align 8
  %604 = getelementptr inbounds i8, i8* %601, i64 %602
  store i8 0, i8* %604, align 1
  br label %605

605:                                              ; preds = %600, %590
  %606 = load i64, i64* %147, align 8
  %607 = lshr i64 %606, 32
  %608 = trunc i64 %607 to i8
  %609 = load i8*, i8** %149, align 8
  %610 = load i64, i64* %148, align 8
  %611 = add i64 %610, 1
  store i64 %611, i64* %148, align 8
  %612 = getelementptr inbounds i8, i8* %609, i64 %610
  store i8 %608, i8* %612, align 1
  %613 = and i64 %606, 1095216660480
  %614 = icmp eq i64 %613, 1095216660480
  br i1 %614, label %615, label %620

615:                                              ; preds = %605
  %616 = load i8*, i8** %149, align 8
  %617 = load i64, i64* %148, align 8
  %618 = add i64 %617, 1
  store i64 %618, i64* %148, align 8
  %619 = getelementptr inbounds i8, i8* %616, i64 %617
  store i8 0, i8* %619, align 1
  br label %620

620:                                              ; preds = %615, %605
  %621 = load i64, i64* %147, align 8
  %622 = lshr i64 %621, 24
  %623 = trunc i64 %622 to i8
  %624 = load i8*, i8** %149, align 8
  %625 = load i64, i64* %148, align 8
  %626 = add i64 %625, 1
  store i64 %626, i64* %148, align 8
  %627 = getelementptr inbounds i8, i8* %624, i64 %625
  store i8 %623, i8* %627, align 1
  %628 = and i64 %621, 4278190080
  %629 = icmp eq i64 %628, 4278190080
  br i1 %629, label %630, label %635

630:                                              ; preds = %620
  %631 = load i8*, i8** %149, align 8
  %632 = load i64, i64* %148, align 8
  %633 = add i64 %632, 1
  store i64 %633, i64* %148, align 8
  %634 = getelementptr inbounds i8, i8* %631, i64 %632
  store i8 0, i8* %634, align 1
  br label %635

635:                                              ; preds = %630, %620
  %636 = load i64, i64* %147, align 8
  %637 = lshr i64 %636, 16
  %638 = trunc i64 %637 to i8
  %639 = load i8*, i8** %149, align 8
  %640 = load i64, i64* %148, align 8
  %641 = add i64 %640, 1
  store i64 %641, i64* %148, align 8
  %642 = getelementptr inbounds i8, i8* %639, i64 %640
  store i8 %638, i8* %642, align 1
  %643 = and i64 %636, 16711680
  %644 = icmp eq i64 %643, 16711680
  br i1 %644, label %645, label %689

645:                                              ; preds = %635
  %646 = load i8*, i8** %149, align 8
  %647 = load i64, i64* %148, align 8
  %648 = add i64 %647, 1
  store i64 %648, i64* %148, align 8
  %649 = getelementptr inbounds i8, i8* %646, i64 %647
  store i8 0, i8* %649, align 1
  br label %689

650:                                              ; preds = %553
  %651 = getelementptr inbounds i8, i8* %565, i64 %555
  store i8 %564, i8* %651, align 1
  %652 = load i64, i64* %147, align 8
  %653 = lshr i64 %652, 48
  %654 = trunc i64 %653 to i8
  %655 = load i8*, i8** %149, align 8
  %656 = load i64, i64* %148, align 8
  %657 = add i64 %656, 1
  %658 = getelementptr inbounds i8, i8* %655, i64 %657
  store i8 %654, i8* %658, align 1
  %659 = load i64, i64* %147, align 8
  %660 = lshr i64 %659, 40
  %661 = trunc i64 %660 to i8
  %662 = load i8*, i8** %149, align 8
  %663 = load i64, i64* %148, align 8
  %664 = add i64 %663, 2
  %665 = getelementptr inbounds i8, i8* %662, i64 %664
  store i8 %661, i8* %665, align 1
  %666 = load i64, i64* %147, align 8
  %667 = lshr i64 %666, 32
  %668 = trunc i64 %667 to i8
  %669 = load i8*, i8** %149, align 8
  %670 = load i64, i64* %148, align 8
  %671 = add i64 %670, 3
  %672 = getelementptr inbounds i8, i8* %669, i64 %671
  store i8 %668, i8* %672, align 1
  %673 = load i64, i64* %147, align 8
  %674 = lshr i64 %673, 24
  %675 = trunc i64 %674 to i8
  %676 = load i8*, i8** %149, align 8
  %677 = load i64, i64* %148, align 8
  %678 = add i64 %677, 4
  %679 = getelementptr inbounds i8, i8* %676, i64 %678
  store i8 %675, i8* %679, align 1
  %680 = load i64, i64* %147, align 8
  %681 = lshr i64 %680, 16
  %682 = trunc i64 %681 to i8
  %683 = load i8*, i8** %149, align 8
  %684 = load i64, i64* %148, align 8
  %685 = add i64 %684, 5
  %686 = getelementptr inbounds i8, i8* %683, i64 %685
  store i8 %682, i8* %686, align 1
  %687 = load i64, i64* %148, align 8
  %688 = add i64 %687, 6
  store i64 %688, i64* %148, align 8
  br label %689

689:                                              ; preds = %650, %645, %635
  %690 = load i64, i64* %147, align 8
  %691 = shl i64 %690, 48
  store i64 %691, i64* %147, align 8
  %692 = load i32, i32* %146, align 8
  %693 = add nsw i32 %692, 48
  store i32 %693, i32* %146, align 8
  %694 = load i64, i64* %153, align 8
  %695 = load i64, i64* %154, align 8
  br label %696

696:                                              ; preds = %689, %531
  %697 = phi i64 [ %532, %531 ], [ %695, %689 ]
  %698 = phi i64 [ %533, %531 ], [ %694, %689 ]
  %699 = phi i64 [ %544, %531 ], [ %691, %689 ]
  %700 = phi i32 [ %541, %531 ], [ %693, %689 ]
  %701 = add nuw i64 %536, 1
  %702 = sub i64 %698, %697
  %703 = ashr exact i64 %702, 2
  %704 = icmp ult i64 %701, %703
  br i1 %704, label %531, label %705

705:                                              ; preds = %696, %524
  %706 = phi i64 [ %525, %524 ], [ %697, %696 ]
  store i64 %706, i64* %153, align 8
  %707 = load i8*, i8** %156, align 8
  %708 = call fastcc zeroext i1 @_ZN3jxl4jpeg12_GLOBAL__N_118JumpToByteBoundaryEPNS0_13JpegBitWriterEPPKhS5_(%"struct.jxl::jpeg::JpegBitWriter"* %130, i8** %155, i8* %707)
  br i1 %708, label %709, label %3211

709:                                              ; preds = %705
  %710 = load i32, i32* %157, align 4
  %711 = load i64, i64* %148, align 8
  %712 = add i64 %711, 2
  %713 = icmp ugt i64 %712, 16384
  br i1 %713, label %714, label %716, !prof !23

714:                                              ; preds = %709
  call fastcc void @_ZN3jxl4jpeg12_GLOBAL__N_110SwapBufferEPNS0_13JpegBitWriterE(%"struct.jxl::jpeg::JpegBitWriter"* %130) #10
  %715 = load i64, i64* %148, align 8
  br label %716

716:                                              ; preds = %709, %714
  %717 = phi i64 [ %711, %709 ], [ %715, %714 ]
  %718 = load i8*, i8** %149, align 8
  %719 = add i64 %717, 1
  store i64 %719, i64* %148, align 8
  %720 = getelementptr inbounds i8, i8* %718, i64 %717
  store i8 -1, i8* %720, align 1
  %721 = trunc i32 %710 to i8
  %722 = add i8 %721, -48
  %723 = load i8*, i8** %149, align 8
  %724 = load i64, i64* %148, align 8
  %725 = add i64 %724, 1
  store i64 %725, i64* %148, align 8
  %726 = getelementptr inbounds i8, i8* %723, i64 %724
  store i8 %722, i8* %726, align 1
  %727 = load i32, i32* %157, align 4
  %728 = add nsw i32 %727, 1
  %729 = and i32 %728, 7
  store i32 %729, i32* %157, align 4
  store i32 %16, i32* %143, align 8
  store i64 0, i64* %159, align 8
  br label %730

730:                                              ; preds = %716, %185, %183
  %731 = load i32, i32* %132, align 8
  %732 = icmp eq i32 %731, 0
  br i1 %732, label %2565, label %733

733:                                              ; preds = %730, %2560
  %734 = phi i32 [ %2561, %2560 ], [ %731, %730 ]
  %735 = phi i64 [ %2562, %2560 ], [ 0, %730 ]
  %736 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %9, i64 %7, i32 5, i32 0, i64 %735, i32 0
  %737 = load i32, i32* %736, align 4
  %738 = zext i32 %737 to i64
  %739 = load %"struct.jxl::jpeg::JPEGComponent"*, %"struct.jxl::jpeg::JPEGComponent"** %160, align 8
  %740 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %9, i64 %7, i32 5, i32 0, i64 %735, i32 1
  %741 = load i32, i32* %740, align 4
  %742 = zext i32 %741 to i64
  %743 = load %"struct.jxl::jpeg::HuffmanCodeTable"*, %"struct.jxl::jpeg::HuffmanCodeTable"** %161, align 8
  %744 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %9, i64 %7, i32 5, i32 0, i64 %735, i32 2
  %745 = load i32, i32* %744, align 4
  %746 = zext i32 %745 to i64
  %747 = load %"struct.jxl::jpeg::HuffmanCodeTable"*, %"struct.jxl::jpeg::HuffmanCodeTable"** %162, align 8
  %748 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %739, i64 %738, i32 2
  %749 = load i32, i32* %748, align 8
  %750 = select i1 %134, i32 %749, i32 1
  %751 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %739, i64 %738, i32 1
  %752 = load i32, i32* %751, align 4
  %753 = select i1 %134, i32 %752, i32 1
  %754 = icmp sgt i32 %750, 0
  br i1 %754, label %755, label %2560

755:                                              ; preds = %733
  %756 = icmp sgt i32 %753, 0
  %757 = mul nsw i32 %753, %184
  %758 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %739, i64 %738, i32 4
  %759 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %739, i64 %738, i32 6, i32 0, i32 0
  %760 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanCodeTable", %"struct.jxl::jpeg::HuffmanCodeTable"* %747, i64 %746, i32 0, i64 240
  %761 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanCodeTable", %"struct.jxl::jpeg::HuffmanCodeTable"* %747, i64 %746, i32 1, i64 240
  %762 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanCodeTable", %"struct.jxl::jpeg::HuffmanCodeTable"* %747, i64 %746, i32 0, i64 0
  %763 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanCodeTable", %"struct.jxl::jpeg::HuffmanCodeTable"* %747, i64 %746, i32 1, i64 0
  br label %764

764:                                              ; preds = %2555, %755
  %765 = phi i32 [ 0, %755 ], [ %2556, %2555 ]
  br i1 %756, label %766, label %2555

766:                                              ; preds = %764
  %767 = load i32, i32* %163, align 8
  br label %768

768:                                              ; preds = %2550, %766
  %769 = phi i32 [ %2552, %2550 ], [ %767, %766 ]
  %770 = phi i32 [ %2553, %2550 ], [ 0, %766 ]
  %771 = load i32, i32* %138, align 4
  %772 = mul nsw i32 %771, %750
  %773 = add nsw i32 %772, %765
  %774 = add nsw i32 %770, %757
  %775 = load i32, i32* %758, align 8
  %776 = mul i32 %773, %775
  %777 = add i32 %774, %776
  %778 = load i32, i32* %164, align 8
  %779 = icmp eq i32 %769, %778
  br i1 %779, label %780, label %1313

780:                                              ; preds = %768
  %781 = load i32, i32* %144, align 8
  %782 = icmp sgt i32 %781, 0
  br i1 %782, label %783, label %1116

783:                                              ; preds = %780
  %784 = call i32 @llvm.ctlz.i32(i32 %781, i1 true) #10, !range !22
  %785 = xor i32 %784, 31
  %786 = shl nuw nsw i32 %785, 4
  %787 = load %"struct.jxl::jpeg::HuffmanCodeTable"*, %"struct.jxl::jpeg::HuffmanCodeTable"** %145, align 8
  %788 = zext i32 %786 to i64
  %789 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanCodeTable", %"struct.jxl::jpeg::HuffmanCodeTable"* %787, i64 0, i32 0, i64 %788
  %790 = load i32, i32* %789, align 4
  %791 = icmp eq i32 %790, 0
  br i1 %791, label %792, label %793

792:                                              ; preds = %783
  store i8 0, i8* %150, align 8
  br label %952

793:                                              ; preds = %783
  %794 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanCodeTable", %"struct.jxl::jpeg::HuffmanCodeTable"* %787, i64 0, i32 1, i64 %788
  %795 = load i32, i32* %794, align 4
  %796 = sext i32 %795 to i64
  %797 = load i32, i32* %146, align 8
  %798 = sub nsw i32 %797, %790
  store i32 %798, i32* %146, align 8
  %799 = zext i32 %798 to i64
  %800 = shl i64 %796, %799
  %801 = load i64, i64* %147, align 8
  %802 = or i64 %800, %801
  store i64 %802, i64* %147, align 8
  %803 = icmp slt i32 %798, 17
  br i1 %803, label %804, label %952

804:                                              ; preds = %793
  %805 = load i64, i64* %148, align 8
  %806 = add i64 %805, 12
  %807 = icmp ugt i64 %806, 16384
  br i1 %807, label %808, label %811, !prof !23

808:                                              ; preds = %804
  call fastcc void @_ZN3jxl4jpeg12_GLOBAL__N_110SwapBufferEPNS0_13JpegBitWriterE(%"struct.jxl::jpeg::JpegBitWriter"* %130) #10
  %809 = load i64, i64* %148, align 8
  %810 = load i64, i64* %147, align 8
  br label %811

811:                                              ; preds = %808, %804
  %812 = phi i64 [ %802, %804 ], [ %810, %808 ]
  %813 = phi i64 [ %805, %804 ], [ %809, %808 ]
  %814 = or i64 %812, 65535
  %815 = xor i64 %814, -65536
  %816 = add i64 %815, -72340172838076673
  %817 = and i64 %815, -9187201950435770368
  %818 = xor i64 %817, -9187201950435770368
  %819 = and i64 %818, %816
  %820 = icmp eq i64 %819, 0
  %821 = lshr i64 %812, 56
  %822 = trunc i64 %821 to i8
  %823 = load i8*, i8** %149, align 8
  br i1 %820, label %908, label %824

824:                                              ; preds = %811
  %825 = add i64 %813, 1
  store i64 %825, i64* %148, align 8
  %826 = getelementptr inbounds i8, i8* %823, i64 %813
  store i8 %822, i8* %826, align 1
  %827 = icmp eq i64 %821, 255
  br i1 %827, label %828, label %833

828:                                              ; preds = %824
  %829 = load i8*, i8** %149, align 8
  %830 = load i64, i64* %148, align 8
  %831 = add i64 %830, 1
  store i64 %831, i64* %148, align 8
  %832 = getelementptr inbounds i8, i8* %829, i64 %830
  store i8 0, i8* %832, align 1
  br label %833

833:                                              ; preds = %828, %824
  %834 = load i64, i64* %147, align 8
  %835 = lshr i64 %834, 48
  %836 = trunc i64 %835 to i8
  %837 = load i8*, i8** %149, align 8
  %838 = load i64, i64* %148, align 8
  %839 = add i64 %838, 1
  store i64 %839, i64* %148, align 8
  %840 = getelementptr inbounds i8, i8* %837, i64 %838
  store i8 %836, i8* %840, align 1
  %841 = and i64 %834, 71776119061217280
  %842 = icmp eq i64 %841, 71776119061217280
  br i1 %842, label %843, label %848

843:                                              ; preds = %833
  %844 = load i8*, i8** %149, align 8
  %845 = load i64, i64* %148, align 8
  %846 = add i64 %845, 1
  store i64 %846, i64* %148, align 8
  %847 = getelementptr inbounds i8, i8* %844, i64 %845
  store i8 0, i8* %847, align 1
  br label %848

848:                                              ; preds = %843, %833
  %849 = load i64, i64* %147, align 8
  %850 = lshr i64 %849, 40
  %851 = trunc i64 %850 to i8
  %852 = load i8*, i8** %149, align 8
  %853 = load i64, i64* %148, align 8
  %854 = add i64 %853, 1
  store i64 %854, i64* %148, align 8
  %855 = getelementptr inbounds i8, i8* %852, i64 %853
  store i8 %851, i8* %855, align 1
  %856 = and i64 %849, 280375465082880
  %857 = icmp eq i64 %856, 280375465082880
  br i1 %857, label %858, label %863

858:                                              ; preds = %848
  %859 = load i8*, i8** %149, align 8
  %860 = load i64, i64* %148, align 8
  %861 = add i64 %860, 1
  store i64 %861, i64* %148, align 8
  %862 = getelementptr inbounds i8, i8* %859, i64 %860
  store i8 0, i8* %862, align 1
  br label %863

863:                                              ; preds = %858, %848
  %864 = load i64, i64* %147, align 8
  %865 = lshr i64 %864, 32
  %866 = trunc i64 %865 to i8
  %867 = load i8*, i8** %149, align 8
  %868 = load i64, i64* %148, align 8
  %869 = add i64 %868, 1
  store i64 %869, i64* %148, align 8
  %870 = getelementptr inbounds i8, i8* %867, i64 %868
  store i8 %866, i8* %870, align 1
  %871 = and i64 %864, 1095216660480
  %872 = icmp eq i64 %871, 1095216660480
  br i1 %872, label %873, label %878

873:                                              ; preds = %863
  %874 = load i8*, i8** %149, align 8
  %875 = load i64, i64* %148, align 8
  %876 = add i64 %875, 1
  store i64 %876, i64* %148, align 8
  %877 = getelementptr inbounds i8, i8* %874, i64 %875
  store i8 0, i8* %877, align 1
  br label %878

878:                                              ; preds = %873, %863
  %879 = load i64, i64* %147, align 8
  %880 = lshr i64 %879, 24
  %881 = trunc i64 %880 to i8
  %882 = load i8*, i8** %149, align 8
  %883 = load i64, i64* %148, align 8
  %884 = add i64 %883, 1
  store i64 %884, i64* %148, align 8
  %885 = getelementptr inbounds i8, i8* %882, i64 %883
  store i8 %881, i8* %885, align 1
  %886 = and i64 %879, 4278190080
  %887 = icmp eq i64 %886, 4278190080
  br i1 %887, label %888, label %893

888:                                              ; preds = %878
  %889 = load i8*, i8** %149, align 8
  %890 = load i64, i64* %148, align 8
  %891 = add i64 %890, 1
  store i64 %891, i64* %148, align 8
  %892 = getelementptr inbounds i8, i8* %889, i64 %890
  store i8 0, i8* %892, align 1
  br label %893

893:                                              ; preds = %888, %878
  %894 = load i64, i64* %147, align 8
  %895 = lshr i64 %894, 16
  %896 = trunc i64 %895 to i8
  %897 = load i8*, i8** %149, align 8
  %898 = load i64, i64* %148, align 8
  %899 = add i64 %898, 1
  store i64 %899, i64* %148, align 8
  %900 = getelementptr inbounds i8, i8* %897, i64 %898
  store i8 %896, i8* %900, align 1
  %901 = and i64 %894, 16711680
  %902 = icmp eq i64 %901, 16711680
  br i1 %902, label %903, label %947

903:                                              ; preds = %893
  %904 = load i8*, i8** %149, align 8
  %905 = load i64, i64* %148, align 8
  %906 = add i64 %905, 1
  store i64 %906, i64* %148, align 8
  %907 = getelementptr inbounds i8, i8* %904, i64 %905
  store i8 0, i8* %907, align 1
  br label %947

908:                                              ; preds = %811
  %909 = getelementptr inbounds i8, i8* %823, i64 %813
  store i8 %822, i8* %909, align 1
  %910 = load i64, i64* %147, align 8
  %911 = lshr i64 %910, 48
  %912 = trunc i64 %911 to i8
  %913 = load i8*, i8** %149, align 8
  %914 = load i64, i64* %148, align 8
  %915 = add i64 %914, 1
  %916 = getelementptr inbounds i8, i8* %913, i64 %915
  store i8 %912, i8* %916, align 1
  %917 = load i64, i64* %147, align 8
  %918 = lshr i64 %917, 40
  %919 = trunc i64 %918 to i8
  %920 = load i8*, i8** %149, align 8
  %921 = load i64, i64* %148, align 8
  %922 = add i64 %921, 2
  %923 = getelementptr inbounds i8, i8* %920, i64 %922
  store i8 %919, i8* %923, align 1
  %924 = load i64, i64* %147, align 8
  %925 = lshr i64 %924, 32
  %926 = trunc i64 %925 to i8
  %927 = load i8*, i8** %149, align 8
  %928 = load i64, i64* %148, align 8
  %929 = add i64 %928, 3
  %930 = getelementptr inbounds i8, i8* %927, i64 %929
  store i8 %926, i8* %930, align 1
  %931 = load i64, i64* %147, align 8
  %932 = lshr i64 %931, 24
  %933 = trunc i64 %932 to i8
  %934 = load i8*, i8** %149, align 8
  %935 = load i64, i64* %148, align 8
  %936 = add i64 %935, 4
  %937 = getelementptr inbounds i8, i8* %934, i64 %936
  store i8 %933, i8* %937, align 1
  %938 = load i64, i64* %147, align 8
  %939 = lshr i64 %938, 16
  %940 = trunc i64 %939 to i8
  %941 = load i8*, i8** %149, align 8
  %942 = load i64, i64* %148, align 8
  %943 = add i64 %942, 5
  %944 = getelementptr inbounds i8, i8* %941, i64 %943
  store i8 %940, i8* %944, align 1
  %945 = load i64, i64* %148, align 8
  %946 = add i64 %945, 6
  store i64 %946, i64* %148, align 8
  br label %947

947:                                              ; preds = %908, %903, %893
  %948 = load i64, i64* %147, align 8
  %949 = shl i64 %948, 48
  store i64 %949, i64* %147, align 8
  %950 = load i32, i32* %146, align 8
  %951 = add nsw i32 %950, 48
  store i32 %951, i32* %146, align 8
  br label %952

952:                                              ; preds = %947, %793, %792
  %953 = icmp eq i32 %785, 0
  br i1 %953, label %1115, label %954

954:                                              ; preds = %952
  %955 = load i32, i32* %144, align 8
  %956 = shl nsw i32 -1, %785
  %957 = xor i32 %956, -1
  %958 = and i32 %955, %957
  %959 = sext i32 %958 to i64
  %960 = load i32, i32* %146, align 8
  %961 = sub nsw i32 %960, %785
  store i32 %961, i32* %146, align 8
  %962 = zext i32 %961 to i64
  %963 = shl i64 %959, %962
  %964 = load i64, i64* %147, align 8
  %965 = or i64 %963, %964
  store i64 %965, i64* %147, align 8
  %966 = icmp slt i32 %961, 17
  br i1 %966, label %967, label %1115

967:                                              ; preds = %954
  %968 = load i64, i64* %148, align 8
  %969 = add i64 %968, 12
  %970 = icmp ugt i64 %969, 16384
  br i1 %970, label %971, label %974, !prof !23

971:                                              ; preds = %967
  call fastcc void @_ZN3jxl4jpeg12_GLOBAL__N_110SwapBufferEPNS0_13JpegBitWriterE(%"struct.jxl::jpeg::JpegBitWriter"* %130) #10
  %972 = load i64, i64* %148, align 8
  %973 = load i64, i64* %147, align 8
  br label %974

974:                                              ; preds = %971, %967
  %975 = phi i64 [ %965, %967 ], [ %973, %971 ]
  %976 = phi i64 [ %968, %967 ], [ %972, %971 ]
  %977 = or i64 %975, 65535
  %978 = xor i64 %977, -65536
  %979 = add i64 %978, -72340172838076673
  %980 = and i64 %978, -9187201950435770368
  %981 = xor i64 %980, -9187201950435770368
  %982 = and i64 %981, %979
  %983 = icmp eq i64 %982, 0
  %984 = lshr i64 %975, 56
  %985 = trunc i64 %984 to i8
  %986 = load i8*, i8** %149, align 8
  br i1 %983, label %1071, label %987

987:                                              ; preds = %974
  %988 = add i64 %976, 1
  store i64 %988, i64* %148, align 8
  %989 = getelementptr inbounds i8, i8* %986, i64 %976
  store i8 %985, i8* %989, align 1
  %990 = icmp eq i64 %984, 255
  br i1 %990, label %991, label %996

991:                                              ; preds = %987
  %992 = load i8*, i8** %149, align 8
  %993 = load i64, i64* %148, align 8
  %994 = add i64 %993, 1
  store i64 %994, i64* %148, align 8
  %995 = getelementptr inbounds i8, i8* %992, i64 %993
  store i8 0, i8* %995, align 1
  br label %996

996:                                              ; preds = %991, %987
  %997 = load i64, i64* %147, align 8
  %998 = lshr i64 %997, 48
  %999 = trunc i64 %998 to i8
  %1000 = load i8*, i8** %149, align 8
  %1001 = load i64, i64* %148, align 8
  %1002 = add i64 %1001, 1
  store i64 %1002, i64* %148, align 8
  %1003 = getelementptr inbounds i8, i8* %1000, i64 %1001
  store i8 %999, i8* %1003, align 1
  %1004 = and i64 %997, 71776119061217280
  %1005 = icmp eq i64 %1004, 71776119061217280
  br i1 %1005, label %1006, label %1011

1006:                                             ; preds = %996
  %1007 = load i8*, i8** %149, align 8
  %1008 = load i64, i64* %148, align 8
  %1009 = add i64 %1008, 1
  store i64 %1009, i64* %148, align 8
  %1010 = getelementptr inbounds i8, i8* %1007, i64 %1008
  store i8 0, i8* %1010, align 1
  br label %1011

1011:                                             ; preds = %1006, %996
  %1012 = load i64, i64* %147, align 8
  %1013 = lshr i64 %1012, 40
  %1014 = trunc i64 %1013 to i8
  %1015 = load i8*, i8** %149, align 8
  %1016 = load i64, i64* %148, align 8
  %1017 = add i64 %1016, 1
  store i64 %1017, i64* %148, align 8
  %1018 = getelementptr inbounds i8, i8* %1015, i64 %1016
  store i8 %1014, i8* %1018, align 1
  %1019 = and i64 %1012, 280375465082880
  %1020 = icmp eq i64 %1019, 280375465082880
  br i1 %1020, label %1021, label %1026

1021:                                             ; preds = %1011
  %1022 = load i8*, i8** %149, align 8
  %1023 = load i64, i64* %148, align 8
  %1024 = add i64 %1023, 1
  store i64 %1024, i64* %148, align 8
  %1025 = getelementptr inbounds i8, i8* %1022, i64 %1023
  store i8 0, i8* %1025, align 1
  br label %1026

1026:                                             ; preds = %1021, %1011
  %1027 = load i64, i64* %147, align 8
  %1028 = lshr i64 %1027, 32
  %1029 = trunc i64 %1028 to i8
  %1030 = load i8*, i8** %149, align 8
  %1031 = load i64, i64* %148, align 8
  %1032 = add i64 %1031, 1
  store i64 %1032, i64* %148, align 8
  %1033 = getelementptr inbounds i8, i8* %1030, i64 %1031
  store i8 %1029, i8* %1033, align 1
  %1034 = and i64 %1027, 1095216660480
  %1035 = icmp eq i64 %1034, 1095216660480
  br i1 %1035, label %1036, label %1041

1036:                                             ; preds = %1026
  %1037 = load i8*, i8** %149, align 8
  %1038 = load i64, i64* %148, align 8
  %1039 = add i64 %1038, 1
  store i64 %1039, i64* %148, align 8
  %1040 = getelementptr inbounds i8, i8* %1037, i64 %1038
  store i8 0, i8* %1040, align 1
  br label %1041

1041:                                             ; preds = %1036, %1026
  %1042 = load i64, i64* %147, align 8
  %1043 = lshr i64 %1042, 24
  %1044 = trunc i64 %1043 to i8
  %1045 = load i8*, i8** %149, align 8
  %1046 = load i64, i64* %148, align 8
  %1047 = add i64 %1046, 1
  store i64 %1047, i64* %148, align 8
  %1048 = getelementptr inbounds i8, i8* %1045, i64 %1046
  store i8 %1044, i8* %1048, align 1
  %1049 = and i64 %1042, 4278190080
  %1050 = icmp eq i64 %1049, 4278190080
  br i1 %1050, label %1051, label %1056

1051:                                             ; preds = %1041
  %1052 = load i8*, i8** %149, align 8
  %1053 = load i64, i64* %148, align 8
  %1054 = add i64 %1053, 1
  store i64 %1054, i64* %148, align 8
  %1055 = getelementptr inbounds i8, i8* %1052, i64 %1053
  store i8 0, i8* %1055, align 1
  br label %1056

1056:                                             ; preds = %1051, %1041
  %1057 = load i64, i64* %147, align 8
  %1058 = lshr i64 %1057, 16
  %1059 = trunc i64 %1058 to i8
  %1060 = load i8*, i8** %149, align 8
  %1061 = load i64, i64* %148, align 8
  %1062 = add i64 %1061, 1
  store i64 %1062, i64* %148, align 8
  %1063 = getelementptr inbounds i8, i8* %1060, i64 %1061
  store i8 %1059, i8* %1063, align 1
  %1064 = and i64 %1057, 16711680
  %1065 = icmp eq i64 %1064, 16711680
  br i1 %1065, label %1066, label %1110

1066:                                             ; preds = %1056
  %1067 = load i8*, i8** %149, align 8
  %1068 = load i64, i64* %148, align 8
  %1069 = add i64 %1068, 1
  store i64 %1069, i64* %148, align 8
  %1070 = getelementptr inbounds i8, i8* %1067, i64 %1068
  store i8 0, i8* %1070, align 1
  br label %1110

1071:                                             ; preds = %974
  %1072 = getelementptr inbounds i8, i8* %986, i64 %976
  store i8 %985, i8* %1072, align 1
  %1073 = load i64, i64* %147, align 8
  %1074 = lshr i64 %1073, 48
  %1075 = trunc i64 %1074 to i8
  %1076 = load i8*, i8** %149, align 8
  %1077 = load i64, i64* %148, align 8
  %1078 = add i64 %1077, 1
  %1079 = getelementptr inbounds i8, i8* %1076, i64 %1078
  store i8 %1075, i8* %1079, align 1
  %1080 = load i64, i64* %147, align 8
  %1081 = lshr i64 %1080, 40
  %1082 = trunc i64 %1081 to i8
  %1083 = load i8*, i8** %149, align 8
  %1084 = load i64, i64* %148, align 8
  %1085 = add i64 %1084, 2
  %1086 = getelementptr inbounds i8, i8* %1083, i64 %1085
  store i8 %1082, i8* %1086, align 1
  %1087 = load i64, i64* %147, align 8
  %1088 = lshr i64 %1087, 32
  %1089 = trunc i64 %1088 to i8
  %1090 = load i8*, i8** %149, align 8
  %1091 = load i64, i64* %148, align 8
  %1092 = add i64 %1091, 3
  %1093 = getelementptr inbounds i8, i8* %1090, i64 %1092
  store i8 %1089, i8* %1093, align 1
  %1094 = load i64, i64* %147, align 8
  %1095 = lshr i64 %1094, 24
  %1096 = trunc i64 %1095 to i8
  %1097 = load i8*, i8** %149, align 8
  %1098 = load i64, i64* %148, align 8
  %1099 = add i64 %1098, 4
  %1100 = getelementptr inbounds i8, i8* %1097, i64 %1099
  store i8 %1096, i8* %1100, align 1
  %1101 = load i64, i64* %147, align 8
  %1102 = lshr i64 %1101, 16
  %1103 = trunc i64 %1102 to i8
  %1104 = load i8*, i8** %149, align 8
  %1105 = load i64, i64* %148, align 8
  %1106 = add i64 %1105, 5
  %1107 = getelementptr inbounds i8, i8* %1104, i64 %1106
  store i8 %1103, i8* %1107, align 1
  %1108 = load i64, i64* %148, align 8
  %1109 = add i64 %1108, 6
  store i64 %1109, i64* %148, align 8
  br label %1110

1110:                                             ; preds = %1071, %1066, %1056
  %1111 = load i64, i64* %147, align 8
  %1112 = shl i64 %1111, 48
  store i64 %1112, i64* %147, align 8
  %1113 = load i32, i32* %146, align 8
  %1114 = add nsw i32 %1113, 48
  store i32 %1114, i32* %146, align 8
  br label %1115

1115:                                             ; preds = %1110, %954, %952
  store i32 0, i32* %144, align 8
  br label %1116

1116:                                             ; preds = %1115, %780
  %1117 = load i64, i64* %153, align 8
  %1118 = load i64, i64* %154, align 8
  %1119 = icmp eq i64 %1117, %1118
  br i1 %1119, label %1297, label %1120

1120:                                             ; preds = %1116
  %1121 = load i32, i32* %146, align 8
  %1122 = load i64, i64* %147, align 8
  br label %1123

1123:                                             ; preds = %1288, %1120
  %1124 = phi i64 [ %1118, %1120 ], [ %1289, %1288 ]
  %1125 = phi i64 [ %1117, %1120 ], [ %1290, %1288 ]
  %1126 = phi i64 [ %1122, %1120 ], [ %1291, %1288 ]
  %1127 = phi i32 [ %1121, %1120 ], [ %1292, %1288 ]
  %1128 = phi i64 [ 0, %1120 ], [ %1293, %1288 ]
  %1129 = inttoptr i64 %1124 to i32*
  %1130 = getelementptr inbounds i32, i32* %1129, i64 %1128
  %1131 = load i32, i32* %1130, align 4
  %1132 = sext i32 %1131 to i64
  %1133 = add nsw i32 %1127, -1
  store i32 %1133, i32* %146, align 8
  %1134 = zext i32 %1133 to i64
  %1135 = shl i64 %1132, %1134
  %1136 = or i64 %1135, %1126
  store i64 %1136, i64* %147, align 8
  %1137 = icmp slt i32 %1127, 18
  br i1 %1137, label %1138, label %1288

1138:                                             ; preds = %1123
  %1139 = load i64, i64* %148, align 8
  %1140 = add i64 %1139, 12
  %1141 = icmp ugt i64 %1140, 16384
  br i1 %1141, label %1142, label %1145, !prof !23

1142:                                             ; preds = %1138
  call fastcc void @_ZN3jxl4jpeg12_GLOBAL__N_110SwapBufferEPNS0_13JpegBitWriterE(%"struct.jxl::jpeg::JpegBitWriter"* %130) #10
  %1143 = load i64, i64* %148, align 8
  %1144 = load i64, i64* %147, align 8
  br label %1145

1145:                                             ; preds = %1142, %1138
  %1146 = phi i64 [ %1136, %1138 ], [ %1144, %1142 ]
  %1147 = phi i64 [ %1139, %1138 ], [ %1143, %1142 ]
  %1148 = or i64 %1146, 65535
  %1149 = xor i64 %1148, -65536
  %1150 = add i64 %1149, -72340172838076673
  %1151 = and i64 %1149, -9187201950435770368
  %1152 = xor i64 %1151, -9187201950435770368
  %1153 = and i64 %1152, %1150
  %1154 = icmp eq i64 %1153, 0
  %1155 = lshr i64 %1146, 56
  %1156 = trunc i64 %1155 to i8
  %1157 = load i8*, i8** %149, align 8
  br i1 %1154, label %1242, label %1158

1158:                                             ; preds = %1145
  %1159 = add i64 %1147, 1
  store i64 %1159, i64* %148, align 8
  %1160 = getelementptr inbounds i8, i8* %1157, i64 %1147
  store i8 %1156, i8* %1160, align 1
  %1161 = icmp eq i64 %1155, 255
  br i1 %1161, label %1162, label %1167

1162:                                             ; preds = %1158
  %1163 = load i8*, i8** %149, align 8
  %1164 = load i64, i64* %148, align 8
  %1165 = add i64 %1164, 1
  store i64 %1165, i64* %148, align 8
  %1166 = getelementptr inbounds i8, i8* %1163, i64 %1164
  store i8 0, i8* %1166, align 1
  br label %1167

1167:                                             ; preds = %1162, %1158
  %1168 = load i64, i64* %147, align 8
  %1169 = lshr i64 %1168, 48
  %1170 = trunc i64 %1169 to i8
  %1171 = load i8*, i8** %149, align 8
  %1172 = load i64, i64* %148, align 8
  %1173 = add i64 %1172, 1
  store i64 %1173, i64* %148, align 8
  %1174 = getelementptr inbounds i8, i8* %1171, i64 %1172
  store i8 %1170, i8* %1174, align 1
  %1175 = and i64 %1168, 71776119061217280
  %1176 = icmp eq i64 %1175, 71776119061217280
  br i1 %1176, label %1177, label %1182

1177:                                             ; preds = %1167
  %1178 = load i8*, i8** %149, align 8
  %1179 = load i64, i64* %148, align 8
  %1180 = add i64 %1179, 1
  store i64 %1180, i64* %148, align 8
  %1181 = getelementptr inbounds i8, i8* %1178, i64 %1179
  store i8 0, i8* %1181, align 1
  br label %1182

1182:                                             ; preds = %1177, %1167
  %1183 = load i64, i64* %147, align 8
  %1184 = lshr i64 %1183, 40
  %1185 = trunc i64 %1184 to i8
  %1186 = load i8*, i8** %149, align 8
  %1187 = load i64, i64* %148, align 8
  %1188 = add i64 %1187, 1
  store i64 %1188, i64* %148, align 8
  %1189 = getelementptr inbounds i8, i8* %1186, i64 %1187
  store i8 %1185, i8* %1189, align 1
  %1190 = and i64 %1183, 280375465082880
  %1191 = icmp eq i64 %1190, 280375465082880
  br i1 %1191, label %1192, label %1197

1192:                                             ; preds = %1182
  %1193 = load i8*, i8** %149, align 8
  %1194 = load i64, i64* %148, align 8
  %1195 = add i64 %1194, 1
  store i64 %1195, i64* %148, align 8
  %1196 = getelementptr inbounds i8, i8* %1193, i64 %1194
  store i8 0, i8* %1196, align 1
  br label %1197

1197:                                             ; preds = %1192, %1182
  %1198 = load i64, i64* %147, align 8
  %1199 = lshr i64 %1198, 32
  %1200 = trunc i64 %1199 to i8
  %1201 = load i8*, i8** %149, align 8
  %1202 = load i64, i64* %148, align 8
  %1203 = add i64 %1202, 1
  store i64 %1203, i64* %148, align 8
  %1204 = getelementptr inbounds i8, i8* %1201, i64 %1202
  store i8 %1200, i8* %1204, align 1
  %1205 = and i64 %1198, 1095216660480
  %1206 = icmp eq i64 %1205, 1095216660480
  br i1 %1206, label %1207, label %1212

1207:                                             ; preds = %1197
  %1208 = load i8*, i8** %149, align 8
  %1209 = load i64, i64* %148, align 8
  %1210 = add i64 %1209, 1
  store i64 %1210, i64* %148, align 8
  %1211 = getelementptr inbounds i8, i8* %1208, i64 %1209
  store i8 0, i8* %1211, align 1
  br label %1212

1212:                                             ; preds = %1207, %1197
  %1213 = load i64, i64* %147, align 8
  %1214 = lshr i64 %1213, 24
  %1215 = trunc i64 %1214 to i8
  %1216 = load i8*, i8** %149, align 8
  %1217 = load i64, i64* %148, align 8
  %1218 = add i64 %1217, 1
  store i64 %1218, i64* %148, align 8
  %1219 = getelementptr inbounds i8, i8* %1216, i64 %1217
  store i8 %1215, i8* %1219, align 1
  %1220 = and i64 %1213, 4278190080
  %1221 = icmp eq i64 %1220, 4278190080
  br i1 %1221, label %1222, label %1227

1222:                                             ; preds = %1212
  %1223 = load i8*, i8** %149, align 8
  %1224 = load i64, i64* %148, align 8
  %1225 = add i64 %1224, 1
  store i64 %1225, i64* %148, align 8
  %1226 = getelementptr inbounds i8, i8* %1223, i64 %1224
  store i8 0, i8* %1226, align 1
  br label %1227

1227:                                             ; preds = %1222, %1212
  %1228 = load i64, i64* %147, align 8
  %1229 = lshr i64 %1228, 16
  %1230 = trunc i64 %1229 to i8
  %1231 = load i8*, i8** %149, align 8
  %1232 = load i64, i64* %148, align 8
  %1233 = add i64 %1232, 1
  store i64 %1233, i64* %148, align 8
  %1234 = getelementptr inbounds i8, i8* %1231, i64 %1232
  store i8 %1230, i8* %1234, align 1
  %1235 = and i64 %1228, 16711680
  %1236 = icmp eq i64 %1235, 16711680
  br i1 %1236, label %1237, label %1281

1237:                                             ; preds = %1227
  %1238 = load i8*, i8** %149, align 8
  %1239 = load i64, i64* %148, align 8
  %1240 = add i64 %1239, 1
  store i64 %1240, i64* %148, align 8
  %1241 = getelementptr inbounds i8, i8* %1238, i64 %1239
  store i8 0, i8* %1241, align 1
  br label %1281

1242:                                             ; preds = %1145
  %1243 = getelementptr inbounds i8, i8* %1157, i64 %1147
  store i8 %1156, i8* %1243, align 1
  %1244 = load i64, i64* %147, align 8
  %1245 = lshr i64 %1244, 48
  %1246 = trunc i64 %1245 to i8
  %1247 = load i8*, i8** %149, align 8
  %1248 = load i64, i64* %148, align 8
  %1249 = add i64 %1248, 1
  %1250 = getelementptr inbounds i8, i8* %1247, i64 %1249
  store i8 %1246, i8* %1250, align 1
  %1251 = load i64, i64* %147, align 8
  %1252 = lshr i64 %1251, 40
  %1253 = trunc i64 %1252 to i8
  %1254 = load i8*, i8** %149, align 8
  %1255 = load i64, i64* %148, align 8
  %1256 = add i64 %1255, 2
  %1257 = getelementptr inbounds i8, i8* %1254, i64 %1256
  store i8 %1253, i8* %1257, align 1
  %1258 = load i64, i64* %147, align 8
  %1259 = lshr i64 %1258, 32
  %1260 = trunc i64 %1259 to i8
  %1261 = load i8*, i8** %149, align 8
  %1262 = load i64, i64* %148, align 8
  %1263 = add i64 %1262, 3
  %1264 = getelementptr inbounds i8, i8* %1261, i64 %1263
  store i8 %1260, i8* %1264, align 1
  %1265 = load i64, i64* %147, align 8
  %1266 = lshr i64 %1265, 24
  %1267 = trunc i64 %1266 to i8
  %1268 = load i8*, i8** %149, align 8
  %1269 = load i64, i64* %148, align 8
  %1270 = add i64 %1269, 4
  %1271 = getelementptr inbounds i8, i8* %1268, i64 %1270
  store i8 %1267, i8* %1271, align 1
  %1272 = load i64, i64* %147, align 8
  %1273 = lshr i64 %1272, 16
  %1274 = trunc i64 %1273 to i8
  %1275 = load i8*, i8** %149, align 8
  %1276 = load i64, i64* %148, align 8
  %1277 = add i64 %1276, 5
  %1278 = getelementptr inbounds i8, i8* %1275, i64 %1277
  store i8 %1274, i8* %1278, align 1
  %1279 = load i64, i64* %148, align 8
  %1280 = add i64 %1279, 6
  store i64 %1280, i64* %148, align 8
  br label %1281

1281:                                             ; preds = %1242, %1237, %1227
  %1282 = load i64, i64* %147, align 8
  %1283 = shl i64 %1282, 48
  store i64 %1283, i64* %147, align 8
  %1284 = load i32, i32* %146, align 8
  %1285 = add nsw i32 %1284, 48
  store i32 %1285, i32* %146, align 8
  %1286 = load i64, i64* %153, align 8
  %1287 = load i64, i64* %154, align 8
  br label %1288

1288:                                             ; preds = %1281, %1123
  %1289 = phi i64 [ %1124, %1123 ], [ %1287, %1281 ]
  %1290 = phi i64 [ %1125, %1123 ], [ %1286, %1281 ]
  %1291 = phi i64 [ %1136, %1123 ], [ %1283, %1281 ]
  %1292 = phi i32 [ %1133, %1123 ], [ %1285, %1281 ]
  %1293 = add nuw i64 %1128, 1
  %1294 = sub i64 %1290, %1289
  %1295 = ashr exact i64 %1294, 2
  %1296 = icmp ult i64 %1293, %1295
  br i1 %1296, label %1123, label %1297

1297:                                             ; preds = %1288, %1116
  %1298 = phi i64 [ %1117, %1116 ], [ %1289, %1288 ]
  store i64 %1298, i64* %153, align 8
  %1299 = load i64, i64* %165, align 8
  %1300 = load i64, i64* %168, align 8
  %1301 = load i64, i64* %169, align 8
  %1302 = sub i64 %1300, %1301
  %1303 = ashr exact i64 %1302, 2
  %1304 = icmp ult i64 %1299, %1303
  br i1 %1304, label %1305, label %1310

1305:                                             ; preds = %1297
  %1306 = add nuw i64 %1299, 1
  store i64 %1306, i64* %165, align 8
  %1307 = load i32*, i32** %170, align 8
  %1308 = getelementptr inbounds i32, i32* %1307, i64 %1299
  %1309 = load i32, i32* %1308, align 4
  br label %1310

1310:                                             ; preds = %1297, %1305
  %1311 = phi i32 [ %1309, %1305 ], [ -1, %1297 ]
  store i32 %1311, i32* %164, align 8
  %1312 = load i32, i32* %163, align 8
  br label %1313

1313:                                             ; preds = %1310, %768
  %1314 = phi i32 [ %1312, %1310 ], [ %769, %768 ]
  %1315 = load i32, i32* %171, align 8
  %1316 = icmp eq i32 %1314, %1315
  br i1 %1316, label %1317, label %1334

1317:                                             ; preds = %1313
  %1318 = load i64, i64* %173, align 8
  %1319 = load %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*, %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"** %174, align 8
  %1320 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo", %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* %1319, i64 %1318, i32 1
  %1321 = load i32, i32* %1320, align 4
  %1322 = add i64 %1318, 1
  store i64 %1322, i64* %173, align 8
  %1323 = load i64, i64* %176, align 8
  %1324 = load i64, i64* %177, align 8
  %1325 = sub i64 %1323, %1324
  %1326 = ashr exact i64 %1325, 3
  %1327 = icmp ult i64 %1322, %1326
  br i1 %1327, label %1328, label %1332

1328:                                             ; preds = %1317
  %1329 = inttoptr i64 %1324 to %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*
  %1330 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo", %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* %1329, i64 %1322, i32 0
  %1331 = load i32, i32* %1330, align 4
  br label %1332

1332:                                             ; preds = %1317, %1328
  %1333 = phi i32 [ %1331, %1328 ], [ -1, %1317 ]
  store i32 %1333, i32* %171, align 8
  br label %1334

1334:                                             ; preds = %1332, %1313
  %1335 = phi i32 [ %1321, %1332 ], [ 0, %1313 ]
  %1336 = shl i32 %777, 6
  %1337 = sext i32 %1336 to i64
  %1338 = load i16*, i16** %759, align 8
  %1339 = getelementptr inbounds i16, i16* %1338, i64 %1337
  %1340 = load i32, i32* %736, align 4
  %1341 = zext i32 %1340 to i64
  %1342 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 3, i64 %1341
  %1343 = load i16, i16* %1339, align 2
  %1344 = load i16, i16* %1342, align 2
  %1345 = sub i16 %1343, %1344
  store i16 %1343, i16* %1342, align 2
  %1346 = icmp slt i16 %1345, 0
  %1347 = sub i16 0, %1345
  %1348 = ashr i16 %1345, 15
  %1349 = add i16 %1348, %1345
  %1350 = select i1 %1346, i16 %1347, i16 %1345
  %1351 = icmp eq i16 %1350, 0
  br i1 %1351, label %1356, label %1352

1352:                                             ; preds = %1334
  %1353 = sext i16 %1350 to i32
  %1354 = call i32 @llvm.ctlz.i32(i32 %1353, i1 true) #10, !range !22
  %1355 = sub nuw nsw i32 32, %1354
  br label %1356

1356:                                             ; preds = %1352, %1334
  %1357 = phi i32 [ %1355, %1352 ], [ 0, %1334 ]
  %1358 = sext i32 %1357 to i64
  %1359 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanCodeTable", %"struct.jxl::jpeg::HuffmanCodeTable"* %743, i64 %742, i32 0, i64 %1358
  %1360 = load i32, i32* %1359, align 4
  %1361 = icmp eq i32 %1360, 0
  br i1 %1361, label %1362, label %1363

1362:                                             ; preds = %1356
  store i8 0, i8* %150, align 8
  br label %1522

1363:                                             ; preds = %1356
  %1364 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanCodeTable", %"struct.jxl::jpeg::HuffmanCodeTable"* %743, i64 %742, i32 1, i64 %1358
  %1365 = load i32, i32* %1364, align 4
  %1366 = sext i32 %1365 to i64
  %1367 = load i32, i32* %146, align 8
  %1368 = sub nsw i32 %1367, %1360
  store i32 %1368, i32* %146, align 8
  %1369 = zext i32 %1368 to i64
  %1370 = shl i64 %1366, %1369
  %1371 = load i64, i64* %147, align 8
  %1372 = or i64 %1370, %1371
  store i64 %1372, i64* %147, align 8
  %1373 = icmp slt i32 %1368, 17
  br i1 %1373, label %1374, label %1522

1374:                                             ; preds = %1363
  %1375 = load i64, i64* %148, align 8
  %1376 = add i64 %1375, 12
  %1377 = icmp ugt i64 %1376, 16384
  br i1 %1377, label %1378, label %1381, !prof !23

1378:                                             ; preds = %1374
  call fastcc void @_ZN3jxl4jpeg12_GLOBAL__N_110SwapBufferEPNS0_13JpegBitWriterE(%"struct.jxl::jpeg::JpegBitWriter"* %130) #10
  %1379 = load i64, i64* %148, align 8
  %1380 = load i64, i64* %147, align 8
  br label %1381

1381:                                             ; preds = %1378, %1374
  %1382 = phi i64 [ %1372, %1374 ], [ %1380, %1378 ]
  %1383 = phi i64 [ %1375, %1374 ], [ %1379, %1378 ]
  %1384 = or i64 %1382, 65535
  %1385 = xor i64 %1384, -65536
  %1386 = add i64 %1385, -72340172838076673
  %1387 = and i64 %1385, -9187201950435770368
  %1388 = xor i64 %1387, -9187201950435770368
  %1389 = and i64 %1388, %1386
  %1390 = icmp eq i64 %1389, 0
  %1391 = lshr i64 %1382, 56
  %1392 = trunc i64 %1391 to i8
  %1393 = load i8*, i8** %149, align 8
  br i1 %1390, label %1478, label %1394

1394:                                             ; preds = %1381
  %1395 = add i64 %1383, 1
  store i64 %1395, i64* %148, align 8
  %1396 = getelementptr inbounds i8, i8* %1393, i64 %1383
  store i8 %1392, i8* %1396, align 1
  %1397 = icmp eq i64 %1391, 255
  br i1 %1397, label %1398, label %1403

1398:                                             ; preds = %1394
  %1399 = load i8*, i8** %149, align 8
  %1400 = load i64, i64* %148, align 8
  %1401 = add i64 %1400, 1
  store i64 %1401, i64* %148, align 8
  %1402 = getelementptr inbounds i8, i8* %1399, i64 %1400
  store i8 0, i8* %1402, align 1
  br label %1403

1403:                                             ; preds = %1398, %1394
  %1404 = load i64, i64* %147, align 8
  %1405 = lshr i64 %1404, 48
  %1406 = trunc i64 %1405 to i8
  %1407 = load i8*, i8** %149, align 8
  %1408 = load i64, i64* %148, align 8
  %1409 = add i64 %1408, 1
  store i64 %1409, i64* %148, align 8
  %1410 = getelementptr inbounds i8, i8* %1407, i64 %1408
  store i8 %1406, i8* %1410, align 1
  %1411 = and i64 %1404, 71776119061217280
  %1412 = icmp eq i64 %1411, 71776119061217280
  br i1 %1412, label %1413, label %1418

1413:                                             ; preds = %1403
  %1414 = load i8*, i8** %149, align 8
  %1415 = load i64, i64* %148, align 8
  %1416 = add i64 %1415, 1
  store i64 %1416, i64* %148, align 8
  %1417 = getelementptr inbounds i8, i8* %1414, i64 %1415
  store i8 0, i8* %1417, align 1
  br label %1418

1418:                                             ; preds = %1413, %1403
  %1419 = load i64, i64* %147, align 8
  %1420 = lshr i64 %1419, 40
  %1421 = trunc i64 %1420 to i8
  %1422 = load i8*, i8** %149, align 8
  %1423 = load i64, i64* %148, align 8
  %1424 = add i64 %1423, 1
  store i64 %1424, i64* %148, align 8
  %1425 = getelementptr inbounds i8, i8* %1422, i64 %1423
  store i8 %1421, i8* %1425, align 1
  %1426 = and i64 %1419, 280375465082880
  %1427 = icmp eq i64 %1426, 280375465082880
  br i1 %1427, label %1428, label %1433

1428:                                             ; preds = %1418
  %1429 = load i8*, i8** %149, align 8
  %1430 = load i64, i64* %148, align 8
  %1431 = add i64 %1430, 1
  store i64 %1431, i64* %148, align 8
  %1432 = getelementptr inbounds i8, i8* %1429, i64 %1430
  store i8 0, i8* %1432, align 1
  br label %1433

1433:                                             ; preds = %1428, %1418
  %1434 = load i64, i64* %147, align 8
  %1435 = lshr i64 %1434, 32
  %1436 = trunc i64 %1435 to i8
  %1437 = load i8*, i8** %149, align 8
  %1438 = load i64, i64* %148, align 8
  %1439 = add i64 %1438, 1
  store i64 %1439, i64* %148, align 8
  %1440 = getelementptr inbounds i8, i8* %1437, i64 %1438
  store i8 %1436, i8* %1440, align 1
  %1441 = and i64 %1434, 1095216660480
  %1442 = icmp eq i64 %1441, 1095216660480
  br i1 %1442, label %1443, label %1448

1443:                                             ; preds = %1433
  %1444 = load i8*, i8** %149, align 8
  %1445 = load i64, i64* %148, align 8
  %1446 = add i64 %1445, 1
  store i64 %1446, i64* %148, align 8
  %1447 = getelementptr inbounds i8, i8* %1444, i64 %1445
  store i8 0, i8* %1447, align 1
  br label %1448

1448:                                             ; preds = %1443, %1433
  %1449 = load i64, i64* %147, align 8
  %1450 = lshr i64 %1449, 24
  %1451 = trunc i64 %1450 to i8
  %1452 = load i8*, i8** %149, align 8
  %1453 = load i64, i64* %148, align 8
  %1454 = add i64 %1453, 1
  store i64 %1454, i64* %148, align 8
  %1455 = getelementptr inbounds i8, i8* %1452, i64 %1453
  store i8 %1451, i8* %1455, align 1
  %1456 = and i64 %1449, 4278190080
  %1457 = icmp eq i64 %1456, 4278190080
  br i1 %1457, label %1458, label %1463

1458:                                             ; preds = %1448
  %1459 = load i8*, i8** %149, align 8
  %1460 = load i64, i64* %148, align 8
  %1461 = add i64 %1460, 1
  store i64 %1461, i64* %148, align 8
  %1462 = getelementptr inbounds i8, i8* %1459, i64 %1460
  store i8 0, i8* %1462, align 1
  br label %1463

1463:                                             ; preds = %1458, %1448
  %1464 = load i64, i64* %147, align 8
  %1465 = lshr i64 %1464, 16
  %1466 = trunc i64 %1465 to i8
  %1467 = load i8*, i8** %149, align 8
  %1468 = load i64, i64* %148, align 8
  %1469 = add i64 %1468, 1
  store i64 %1469, i64* %148, align 8
  %1470 = getelementptr inbounds i8, i8* %1467, i64 %1468
  store i8 %1466, i8* %1470, align 1
  %1471 = and i64 %1464, 16711680
  %1472 = icmp eq i64 %1471, 16711680
  br i1 %1472, label %1473, label %1517

1473:                                             ; preds = %1463
  %1474 = load i8*, i8** %149, align 8
  %1475 = load i64, i64* %148, align 8
  %1476 = add i64 %1475, 1
  store i64 %1476, i64* %148, align 8
  %1477 = getelementptr inbounds i8, i8* %1474, i64 %1475
  store i8 0, i8* %1477, align 1
  br label %1517

1478:                                             ; preds = %1381
  %1479 = getelementptr inbounds i8, i8* %1393, i64 %1383
  store i8 %1392, i8* %1479, align 1
  %1480 = load i64, i64* %147, align 8
  %1481 = lshr i64 %1480, 48
  %1482 = trunc i64 %1481 to i8
  %1483 = load i8*, i8** %149, align 8
  %1484 = load i64, i64* %148, align 8
  %1485 = add i64 %1484, 1
  %1486 = getelementptr inbounds i8, i8* %1483, i64 %1485
  store i8 %1482, i8* %1486, align 1
  %1487 = load i64, i64* %147, align 8
  %1488 = lshr i64 %1487, 40
  %1489 = trunc i64 %1488 to i8
  %1490 = load i8*, i8** %149, align 8
  %1491 = load i64, i64* %148, align 8
  %1492 = add i64 %1491, 2
  %1493 = getelementptr inbounds i8, i8* %1490, i64 %1492
  store i8 %1489, i8* %1493, align 1
  %1494 = load i64, i64* %147, align 8
  %1495 = lshr i64 %1494, 32
  %1496 = trunc i64 %1495 to i8
  %1497 = load i8*, i8** %149, align 8
  %1498 = load i64, i64* %148, align 8
  %1499 = add i64 %1498, 3
  %1500 = getelementptr inbounds i8, i8* %1497, i64 %1499
  store i8 %1496, i8* %1500, align 1
  %1501 = load i64, i64* %147, align 8
  %1502 = lshr i64 %1501, 24
  %1503 = trunc i64 %1502 to i8
  %1504 = load i8*, i8** %149, align 8
  %1505 = load i64, i64* %148, align 8
  %1506 = add i64 %1505, 4
  %1507 = getelementptr inbounds i8, i8* %1504, i64 %1506
  store i8 %1503, i8* %1507, align 1
  %1508 = load i64, i64* %147, align 8
  %1509 = lshr i64 %1508, 16
  %1510 = trunc i64 %1509 to i8
  %1511 = load i8*, i8** %149, align 8
  %1512 = load i64, i64* %148, align 8
  %1513 = add i64 %1512, 5
  %1514 = getelementptr inbounds i8, i8* %1511, i64 %1513
  store i8 %1510, i8* %1514, align 1
  %1515 = load i64, i64* %148, align 8
  %1516 = add i64 %1515, 6
  store i64 %1516, i64* %148, align 8
  br label %1517

1517:                                             ; preds = %1478, %1473, %1463
  %1518 = load i64, i64* %147, align 8
  %1519 = shl i64 %1518, 48
  store i64 %1519, i64* %147, align 8
  %1520 = load i32, i32* %146, align 8
  %1521 = add nsw i32 %1520, 48
  store i32 %1521, i32* %146, align 8
  br label %1522

1522:                                             ; preds = %1517, %1363, %1362
  %1523 = icmp sgt i32 %1357, 11
  br i1 %1523, label %3211, label %1524

1524:                                             ; preds = %1522
  %1525 = icmp sgt i32 %1357, 0
  br i1 %1525, label %1527, label %1526

1526:                                             ; preds = %1683, %1527, %1524
  br label %1690

1527:                                             ; preds = %1524
  %1528 = sext i16 %1349 to i32
  %1529 = shl nsw i32 -1, %1357
  %1530 = xor i32 %1529, -1
  %1531 = and i32 %1530, %1528
  %1532 = zext i32 %1531 to i64
  %1533 = load i32, i32* %146, align 8
  %1534 = sub nsw i32 %1533, %1357
  store i32 %1534, i32* %146, align 8
  %1535 = zext i32 %1534 to i64
  %1536 = shl i64 %1532, %1535
  %1537 = load i64, i64* %147, align 8
  %1538 = or i64 %1536, %1537
  store i64 %1538, i64* %147, align 8
  %1539 = icmp slt i32 %1534, 17
  br i1 %1539, label %1540, label %1526

1540:                                             ; preds = %1527
  %1541 = load i64, i64* %148, align 8
  %1542 = add i64 %1541, 12
  %1543 = icmp ugt i64 %1542, 16384
  br i1 %1543, label %1544, label %1547, !prof !23

1544:                                             ; preds = %1540
  call fastcc void @_ZN3jxl4jpeg12_GLOBAL__N_110SwapBufferEPNS0_13JpegBitWriterE(%"struct.jxl::jpeg::JpegBitWriter"* %130) #10
  %1545 = load i64, i64* %148, align 8
  %1546 = load i64, i64* %147, align 8
  br label %1547

1547:                                             ; preds = %1544, %1540
  %1548 = phi i64 [ %1538, %1540 ], [ %1546, %1544 ]
  %1549 = phi i64 [ %1541, %1540 ], [ %1545, %1544 ]
  %1550 = or i64 %1548, 65535
  %1551 = xor i64 %1550, -65536
  %1552 = add i64 %1551, -72340172838076673
  %1553 = and i64 %1551, -9187201950435770368
  %1554 = xor i64 %1553, -9187201950435770368
  %1555 = and i64 %1554, %1552
  %1556 = icmp eq i64 %1555, 0
  %1557 = lshr i64 %1548, 56
  %1558 = trunc i64 %1557 to i8
  %1559 = load i8*, i8** %149, align 8
  br i1 %1556, label %1644, label %1560

1560:                                             ; preds = %1547
  %1561 = add i64 %1549, 1
  store i64 %1561, i64* %148, align 8
  %1562 = getelementptr inbounds i8, i8* %1559, i64 %1549
  store i8 %1558, i8* %1562, align 1
  %1563 = icmp eq i64 %1557, 255
  br i1 %1563, label %1564, label %1569

1564:                                             ; preds = %1560
  %1565 = load i8*, i8** %149, align 8
  %1566 = load i64, i64* %148, align 8
  %1567 = add i64 %1566, 1
  store i64 %1567, i64* %148, align 8
  %1568 = getelementptr inbounds i8, i8* %1565, i64 %1566
  store i8 0, i8* %1568, align 1
  br label %1569

1569:                                             ; preds = %1564, %1560
  %1570 = load i64, i64* %147, align 8
  %1571 = lshr i64 %1570, 48
  %1572 = trunc i64 %1571 to i8
  %1573 = load i8*, i8** %149, align 8
  %1574 = load i64, i64* %148, align 8
  %1575 = add i64 %1574, 1
  store i64 %1575, i64* %148, align 8
  %1576 = getelementptr inbounds i8, i8* %1573, i64 %1574
  store i8 %1572, i8* %1576, align 1
  %1577 = and i64 %1570, 71776119061217280
  %1578 = icmp eq i64 %1577, 71776119061217280
  br i1 %1578, label %1579, label %1584

1579:                                             ; preds = %1569
  %1580 = load i8*, i8** %149, align 8
  %1581 = load i64, i64* %148, align 8
  %1582 = add i64 %1581, 1
  store i64 %1582, i64* %148, align 8
  %1583 = getelementptr inbounds i8, i8* %1580, i64 %1581
  store i8 0, i8* %1583, align 1
  br label %1584

1584:                                             ; preds = %1579, %1569
  %1585 = load i64, i64* %147, align 8
  %1586 = lshr i64 %1585, 40
  %1587 = trunc i64 %1586 to i8
  %1588 = load i8*, i8** %149, align 8
  %1589 = load i64, i64* %148, align 8
  %1590 = add i64 %1589, 1
  store i64 %1590, i64* %148, align 8
  %1591 = getelementptr inbounds i8, i8* %1588, i64 %1589
  store i8 %1587, i8* %1591, align 1
  %1592 = and i64 %1585, 280375465082880
  %1593 = icmp eq i64 %1592, 280375465082880
  br i1 %1593, label %1594, label %1599

1594:                                             ; preds = %1584
  %1595 = load i8*, i8** %149, align 8
  %1596 = load i64, i64* %148, align 8
  %1597 = add i64 %1596, 1
  store i64 %1597, i64* %148, align 8
  %1598 = getelementptr inbounds i8, i8* %1595, i64 %1596
  store i8 0, i8* %1598, align 1
  br label %1599

1599:                                             ; preds = %1594, %1584
  %1600 = load i64, i64* %147, align 8
  %1601 = lshr i64 %1600, 32
  %1602 = trunc i64 %1601 to i8
  %1603 = load i8*, i8** %149, align 8
  %1604 = load i64, i64* %148, align 8
  %1605 = add i64 %1604, 1
  store i64 %1605, i64* %148, align 8
  %1606 = getelementptr inbounds i8, i8* %1603, i64 %1604
  store i8 %1602, i8* %1606, align 1
  %1607 = and i64 %1600, 1095216660480
  %1608 = icmp eq i64 %1607, 1095216660480
  br i1 %1608, label %1609, label %1614

1609:                                             ; preds = %1599
  %1610 = load i8*, i8** %149, align 8
  %1611 = load i64, i64* %148, align 8
  %1612 = add i64 %1611, 1
  store i64 %1612, i64* %148, align 8
  %1613 = getelementptr inbounds i8, i8* %1610, i64 %1611
  store i8 0, i8* %1613, align 1
  br label %1614

1614:                                             ; preds = %1609, %1599
  %1615 = load i64, i64* %147, align 8
  %1616 = lshr i64 %1615, 24
  %1617 = trunc i64 %1616 to i8
  %1618 = load i8*, i8** %149, align 8
  %1619 = load i64, i64* %148, align 8
  %1620 = add i64 %1619, 1
  store i64 %1620, i64* %148, align 8
  %1621 = getelementptr inbounds i8, i8* %1618, i64 %1619
  store i8 %1617, i8* %1621, align 1
  %1622 = and i64 %1615, 4278190080
  %1623 = icmp eq i64 %1622, 4278190080
  br i1 %1623, label %1624, label %1629

1624:                                             ; preds = %1614
  %1625 = load i8*, i8** %149, align 8
  %1626 = load i64, i64* %148, align 8
  %1627 = add i64 %1626, 1
  store i64 %1627, i64* %148, align 8
  %1628 = getelementptr inbounds i8, i8* %1625, i64 %1626
  store i8 0, i8* %1628, align 1
  br label %1629

1629:                                             ; preds = %1624, %1614
  %1630 = load i64, i64* %147, align 8
  %1631 = lshr i64 %1630, 16
  %1632 = trunc i64 %1631 to i8
  %1633 = load i8*, i8** %149, align 8
  %1634 = load i64, i64* %148, align 8
  %1635 = add i64 %1634, 1
  store i64 %1635, i64* %148, align 8
  %1636 = getelementptr inbounds i8, i8* %1633, i64 %1634
  store i8 %1632, i8* %1636, align 1
  %1637 = and i64 %1630, 16711680
  %1638 = icmp eq i64 %1637, 16711680
  br i1 %1638, label %1639, label %1683

1639:                                             ; preds = %1629
  %1640 = load i8*, i8** %149, align 8
  %1641 = load i64, i64* %148, align 8
  %1642 = add i64 %1641, 1
  store i64 %1642, i64* %148, align 8
  %1643 = getelementptr inbounds i8, i8* %1640, i64 %1641
  store i8 0, i8* %1643, align 1
  br label %1683

1644:                                             ; preds = %1547
  %1645 = getelementptr inbounds i8, i8* %1559, i64 %1549
  store i8 %1558, i8* %1645, align 1
  %1646 = load i64, i64* %147, align 8
  %1647 = lshr i64 %1646, 48
  %1648 = trunc i64 %1647 to i8
  %1649 = load i8*, i8** %149, align 8
  %1650 = load i64, i64* %148, align 8
  %1651 = add i64 %1650, 1
  %1652 = getelementptr inbounds i8, i8* %1649, i64 %1651
  store i8 %1648, i8* %1652, align 1
  %1653 = load i64, i64* %147, align 8
  %1654 = lshr i64 %1653, 40
  %1655 = trunc i64 %1654 to i8
  %1656 = load i8*, i8** %149, align 8
  %1657 = load i64, i64* %148, align 8
  %1658 = add i64 %1657, 2
  %1659 = getelementptr inbounds i8, i8* %1656, i64 %1658
  store i8 %1655, i8* %1659, align 1
  %1660 = load i64, i64* %147, align 8
  %1661 = lshr i64 %1660, 32
  %1662 = trunc i64 %1661 to i8
  %1663 = load i8*, i8** %149, align 8
  %1664 = load i64, i64* %148, align 8
  %1665 = add i64 %1664, 3
  %1666 = getelementptr inbounds i8, i8* %1663, i64 %1665
  store i8 %1662, i8* %1666, align 1
  %1667 = load i64, i64* %147, align 8
  %1668 = lshr i64 %1667, 24
  %1669 = trunc i64 %1668 to i8
  %1670 = load i8*, i8** %149, align 8
  %1671 = load i64, i64* %148, align 8
  %1672 = add i64 %1671, 4
  %1673 = getelementptr inbounds i8, i8* %1670, i64 %1672
  store i8 %1669, i8* %1673, align 1
  %1674 = load i64, i64* %147, align 8
  %1675 = lshr i64 %1674, 16
  %1676 = trunc i64 %1675 to i8
  %1677 = load i8*, i8** %149, align 8
  %1678 = load i64, i64* %148, align 8
  %1679 = add i64 %1678, 5
  %1680 = getelementptr inbounds i8, i8* %1677, i64 %1679
  store i8 %1676, i8* %1680, align 1
  %1681 = load i64, i64* %148, align 8
  %1682 = add i64 %1681, 6
  store i64 %1682, i64* %148, align 8
  br label %1683

1683:                                             ; preds = %1644, %1639, %1629
  %1684 = load i64, i64* %147, align 8
  %1685 = shl i64 %1684, 48
  store i64 %1685, i64* %147, align 8
  %1686 = load i32, i32* %146, align 8
  %1687 = add nsw i32 %1686, 48
  store i32 %1687, i32* %146, align 8
  br label %1526

1688:                                             ; preds = %2212
  %1689 = icmp sgt i32 %1335, 0
  br i1 %1689, label %2222, label %2219

1690:                                             ; preds = %1526, %2212
  %1691 = phi i64 [ %2214, %2212 ], [ 1, %1526 ]
  %1692 = phi i32 [ %2213, %2212 ], [ 0, %1526 ]
  %1693 = getelementptr inbounds [80 x i32], [80 x i32]* @_ZN3jxl4jpegL17kJPEGNaturalOrderE, i64 0, i64 %1691
  %1694 = load i32, i32* %1693, align 4
  %1695 = zext i32 %1694 to i64
  %1696 = getelementptr inbounds i16, i16* %1339, i64 %1695
  %1697 = load i16, i16* %1696, align 2
  %1698 = icmp eq i16 %1697, 0
  br i1 %1698, label %1699, label %1701

1699:                                             ; preds = %1690
  %1700 = add nsw i32 %1692, 1
  br label %2212

1701:                                             ; preds = %1690
  %1702 = icmp slt i16 %1697, 0
  %1703 = sub i16 0, %1697
  %1704 = ashr i16 %1697, 15
  %1705 = add i16 %1704, %1697
  %1706 = select i1 %1702, i16 %1703, i16 %1697
  %1707 = icmp sgt i32 %1692, 15
  br i1 %1707, label %1708, label %1876

1708:                                             ; preds = %1701, %1871
  %1709 = phi i32 [ %1872, %1871 ], [ %1692, %1701 ]
  %1710 = load i32, i32* %760, align 4
  %1711 = icmp eq i32 %1710, 0
  br i1 %1711, label %1712, label %1713

1712:                                             ; preds = %1708
  store i8 0, i8* %150, align 8
  br label %1871

1713:                                             ; preds = %1708
  %1714 = load i32, i32* %761, align 4
  %1715 = sext i32 %1714 to i64
  %1716 = load i32, i32* %146, align 8
  %1717 = sub nsw i32 %1716, %1710
  store i32 %1717, i32* %146, align 8
  %1718 = zext i32 %1717 to i64
  %1719 = shl i64 %1715, %1718
  %1720 = load i64, i64* %147, align 8
  %1721 = or i64 %1719, %1720
  store i64 %1721, i64* %147, align 8
  %1722 = icmp slt i32 %1717, 17
  br i1 %1722, label %1723, label %1871

1723:                                             ; preds = %1713
  %1724 = load i64, i64* %148, align 8
  %1725 = add i64 %1724, 12
  %1726 = icmp ugt i64 %1725, 16384
  br i1 %1726, label %1727, label %1730, !prof !23

1727:                                             ; preds = %1723
  call fastcc void @_ZN3jxl4jpeg12_GLOBAL__N_110SwapBufferEPNS0_13JpegBitWriterE(%"struct.jxl::jpeg::JpegBitWriter"* %130) #10
  %1728 = load i64, i64* %148, align 8
  %1729 = load i64, i64* %147, align 8
  br label %1730

1730:                                             ; preds = %1727, %1723
  %1731 = phi i64 [ %1721, %1723 ], [ %1729, %1727 ]
  %1732 = phi i64 [ %1724, %1723 ], [ %1728, %1727 ]
  %1733 = or i64 %1731, 65535
  %1734 = xor i64 %1733, -65536
  %1735 = add i64 %1734, -72340172838076673
  %1736 = and i64 %1734, -9187201950435770368
  %1737 = xor i64 %1736, -9187201950435770368
  %1738 = and i64 %1737, %1735
  %1739 = icmp eq i64 %1738, 0
  %1740 = lshr i64 %1731, 56
  %1741 = trunc i64 %1740 to i8
  %1742 = load i8*, i8** %149, align 8
  br i1 %1739, label %1827, label %1743

1743:                                             ; preds = %1730
  %1744 = add i64 %1732, 1
  store i64 %1744, i64* %148, align 8
  %1745 = getelementptr inbounds i8, i8* %1742, i64 %1732
  store i8 %1741, i8* %1745, align 1
  %1746 = icmp eq i64 %1740, 255
  br i1 %1746, label %1747, label %1752

1747:                                             ; preds = %1743
  %1748 = load i8*, i8** %149, align 8
  %1749 = load i64, i64* %148, align 8
  %1750 = add i64 %1749, 1
  store i64 %1750, i64* %148, align 8
  %1751 = getelementptr inbounds i8, i8* %1748, i64 %1749
  store i8 0, i8* %1751, align 1
  br label %1752

1752:                                             ; preds = %1747, %1743
  %1753 = load i64, i64* %147, align 8
  %1754 = lshr i64 %1753, 48
  %1755 = trunc i64 %1754 to i8
  %1756 = load i8*, i8** %149, align 8
  %1757 = load i64, i64* %148, align 8
  %1758 = add i64 %1757, 1
  store i64 %1758, i64* %148, align 8
  %1759 = getelementptr inbounds i8, i8* %1756, i64 %1757
  store i8 %1755, i8* %1759, align 1
  %1760 = and i64 %1753, 71776119061217280
  %1761 = icmp eq i64 %1760, 71776119061217280
  br i1 %1761, label %1762, label %1767

1762:                                             ; preds = %1752
  %1763 = load i8*, i8** %149, align 8
  %1764 = load i64, i64* %148, align 8
  %1765 = add i64 %1764, 1
  store i64 %1765, i64* %148, align 8
  %1766 = getelementptr inbounds i8, i8* %1763, i64 %1764
  store i8 0, i8* %1766, align 1
  br label %1767

1767:                                             ; preds = %1762, %1752
  %1768 = load i64, i64* %147, align 8
  %1769 = lshr i64 %1768, 40
  %1770 = trunc i64 %1769 to i8
  %1771 = load i8*, i8** %149, align 8
  %1772 = load i64, i64* %148, align 8
  %1773 = add i64 %1772, 1
  store i64 %1773, i64* %148, align 8
  %1774 = getelementptr inbounds i8, i8* %1771, i64 %1772
  store i8 %1770, i8* %1774, align 1
  %1775 = and i64 %1768, 280375465082880
  %1776 = icmp eq i64 %1775, 280375465082880
  br i1 %1776, label %1777, label %1782

1777:                                             ; preds = %1767
  %1778 = load i8*, i8** %149, align 8
  %1779 = load i64, i64* %148, align 8
  %1780 = add i64 %1779, 1
  store i64 %1780, i64* %148, align 8
  %1781 = getelementptr inbounds i8, i8* %1778, i64 %1779
  store i8 0, i8* %1781, align 1
  br label %1782

1782:                                             ; preds = %1777, %1767
  %1783 = load i64, i64* %147, align 8
  %1784 = lshr i64 %1783, 32
  %1785 = trunc i64 %1784 to i8
  %1786 = load i8*, i8** %149, align 8
  %1787 = load i64, i64* %148, align 8
  %1788 = add i64 %1787, 1
  store i64 %1788, i64* %148, align 8
  %1789 = getelementptr inbounds i8, i8* %1786, i64 %1787
  store i8 %1785, i8* %1789, align 1
  %1790 = and i64 %1783, 1095216660480
  %1791 = icmp eq i64 %1790, 1095216660480
  br i1 %1791, label %1792, label %1797

1792:                                             ; preds = %1782
  %1793 = load i8*, i8** %149, align 8
  %1794 = load i64, i64* %148, align 8
  %1795 = add i64 %1794, 1
  store i64 %1795, i64* %148, align 8
  %1796 = getelementptr inbounds i8, i8* %1793, i64 %1794
  store i8 0, i8* %1796, align 1
  br label %1797

1797:                                             ; preds = %1792, %1782
  %1798 = load i64, i64* %147, align 8
  %1799 = lshr i64 %1798, 24
  %1800 = trunc i64 %1799 to i8
  %1801 = load i8*, i8** %149, align 8
  %1802 = load i64, i64* %148, align 8
  %1803 = add i64 %1802, 1
  store i64 %1803, i64* %148, align 8
  %1804 = getelementptr inbounds i8, i8* %1801, i64 %1802
  store i8 %1800, i8* %1804, align 1
  %1805 = and i64 %1798, 4278190080
  %1806 = icmp eq i64 %1805, 4278190080
  br i1 %1806, label %1807, label %1812

1807:                                             ; preds = %1797
  %1808 = load i8*, i8** %149, align 8
  %1809 = load i64, i64* %148, align 8
  %1810 = add i64 %1809, 1
  store i64 %1810, i64* %148, align 8
  %1811 = getelementptr inbounds i8, i8* %1808, i64 %1809
  store i8 0, i8* %1811, align 1
  br label %1812

1812:                                             ; preds = %1807, %1797
  %1813 = load i64, i64* %147, align 8
  %1814 = lshr i64 %1813, 16
  %1815 = trunc i64 %1814 to i8
  %1816 = load i8*, i8** %149, align 8
  %1817 = load i64, i64* %148, align 8
  %1818 = add i64 %1817, 1
  store i64 %1818, i64* %148, align 8
  %1819 = getelementptr inbounds i8, i8* %1816, i64 %1817
  store i8 %1815, i8* %1819, align 1
  %1820 = and i64 %1813, 16711680
  %1821 = icmp eq i64 %1820, 16711680
  br i1 %1821, label %1822, label %1866

1822:                                             ; preds = %1812
  %1823 = load i8*, i8** %149, align 8
  %1824 = load i64, i64* %148, align 8
  %1825 = add i64 %1824, 1
  store i64 %1825, i64* %148, align 8
  %1826 = getelementptr inbounds i8, i8* %1823, i64 %1824
  store i8 0, i8* %1826, align 1
  br label %1866

1827:                                             ; preds = %1730
  %1828 = getelementptr inbounds i8, i8* %1742, i64 %1732
  store i8 %1741, i8* %1828, align 1
  %1829 = load i64, i64* %147, align 8
  %1830 = lshr i64 %1829, 48
  %1831 = trunc i64 %1830 to i8
  %1832 = load i8*, i8** %149, align 8
  %1833 = load i64, i64* %148, align 8
  %1834 = add i64 %1833, 1
  %1835 = getelementptr inbounds i8, i8* %1832, i64 %1834
  store i8 %1831, i8* %1835, align 1
  %1836 = load i64, i64* %147, align 8
  %1837 = lshr i64 %1836, 40
  %1838 = trunc i64 %1837 to i8
  %1839 = load i8*, i8** %149, align 8
  %1840 = load i64, i64* %148, align 8
  %1841 = add i64 %1840, 2
  %1842 = getelementptr inbounds i8, i8* %1839, i64 %1841
  store i8 %1838, i8* %1842, align 1
  %1843 = load i64, i64* %147, align 8
  %1844 = lshr i64 %1843, 32
  %1845 = trunc i64 %1844 to i8
  %1846 = load i8*, i8** %149, align 8
  %1847 = load i64, i64* %148, align 8
  %1848 = add i64 %1847, 3
  %1849 = getelementptr inbounds i8, i8* %1846, i64 %1848
  store i8 %1845, i8* %1849, align 1
  %1850 = load i64, i64* %147, align 8
  %1851 = lshr i64 %1850, 24
  %1852 = trunc i64 %1851 to i8
  %1853 = load i8*, i8** %149, align 8
  %1854 = load i64, i64* %148, align 8
  %1855 = add i64 %1854, 4
  %1856 = getelementptr inbounds i8, i8* %1853, i64 %1855
  store i8 %1852, i8* %1856, align 1
  %1857 = load i64, i64* %147, align 8
  %1858 = lshr i64 %1857, 16
  %1859 = trunc i64 %1858 to i8
  %1860 = load i8*, i8** %149, align 8
  %1861 = load i64, i64* %148, align 8
  %1862 = add i64 %1861, 5
  %1863 = getelementptr inbounds i8, i8* %1860, i64 %1862
  store i8 %1859, i8* %1863, align 1
  %1864 = load i64, i64* %148, align 8
  %1865 = add i64 %1864, 6
  store i64 %1865, i64* %148, align 8
  br label %1866

1866:                                             ; preds = %1827, %1822, %1812
  %1867 = load i64, i64* %147, align 8
  %1868 = shl i64 %1867, 48
  store i64 %1868, i64* %147, align 8
  %1869 = load i32, i32* %146, align 8
  %1870 = add nsw i32 %1869, 48
  store i32 %1870, i32* %146, align 8
  br label %1871

1871:                                             ; preds = %1866, %1713, %1712
  %1872 = add nsw i32 %1709, -16
  %1873 = icmp sgt i32 %1872, 15
  br i1 %1873, label %1708, label %1874

1874:                                             ; preds = %1871
  %1875 = and i32 %1692, 15
  br label %1876

1876:                                             ; preds = %1874, %1701
  %1877 = phi i32 [ %1692, %1701 ], [ %1875, %1874 ]
  %1878 = sext i16 %1706 to i32
  %1879 = call i32 @llvm.ctlz.i32(i32 %1878, i1 true) #10, !range !22
  %1880 = sub nuw nsw i32 32, %1879
  %1881 = icmp slt i16 %1706, 0
  br i1 %1881, label %3211, label %1882

1882:                                             ; preds = %1876
  %1883 = shl i32 %1877, 4
  %1884 = add nsw i32 %1883, %1880
  %1885 = sext i32 %1884 to i64
  %1886 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanCodeTable", %"struct.jxl::jpeg::HuffmanCodeTable"* %747, i64 %746, i32 0, i64 %1885
  %1887 = load i32, i32* %1886, align 4
  %1888 = icmp eq i32 %1887, 0
  br i1 %1888, label %1889, label %1892

1889:                                             ; preds = %1882
  store i8 0, i8* %150, align 8
  %1890 = load i32, i32* %146, align 8
  %1891 = load i64, i64* %147, align 8
  br label %2051

1892:                                             ; preds = %1882
  %1893 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanCodeTable", %"struct.jxl::jpeg::HuffmanCodeTable"* %747, i64 %746, i32 1, i64 %1885
  %1894 = load i32, i32* %1893, align 4
  %1895 = sext i32 %1894 to i64
  %1896 = load i32, i32* %146, align 8
  %1897 = sub nsw i32 %1896, %1887
  store i32 %1897, i32* %146, align 8
  %1898 = zext i32 %1897 to i64
  %1899 = shl i64 %1895, %1898
  %1900 = load i64, i64* %147, align 8
  %1901 = or i64 %1899, %1900
  store i64 %1901, i64* %147, align 8
  %1902 = icmp slt i32 %1897, 17
  br i1 %1902, label %1903, label %2051

1903:                                             ; preds = %1892
  %1904 = load i64, i64* %148, align 8
  %1905 = add i64 %1904, 12
  %1906 = icmp ugt i64 %1905, 16384
  br i1 %1906, label %1907, label %1910, !prof !23

1907:                                             ; preds = %1903
  call fastcc void @_ZN3jxl4jpeg12_GLOBAL__N_110SwapBufferEPNS0_13JpegBitWriterE(%"struct.jxl::jpeg::JpegBitWriter"* %130) #10
  %1908 = load i64, i64* %148, align 8
  %1909 = load i64, i64* %147, align 8
  br label %1910

1910:                                             ; preds = %1907, %1903
  %1911 = phi i64 [ %1901, %1903 ], [ %1909, %1907 ]
  %1912 = phi i64 [ %1904, %1903 ], [ %1908, %1907 ]
  %1913 = or i64 %1911, 65535
  %1914 = xor i64 %1913, -65536
  %1915 = add i64 %1914, -72340172838076673
  %1916 = and i64 %1914, -9187201950435770368
  %1917 = xor i64 %1916, -9187201950435770368
  %1918 = and i64 %1917, %1915
  %1919 = icmp eq i64 %1918, 0
  %1920 = lshr i64 %1911, 56
  %1921 = trunc i64 %1920 to i8
  %1922 = load i8*, i8** %149, align 8
  br i1 %1919, label %2007, label %1923

1923:                                             ; preds = %1910
  %1924 = add i64 %1912, 1
  store i64 %1924, i64* %148, align 8
  %1925 = getelementptr inbounds i8, i8* %1922, i64 %1912
  store i8 %1921, i8* %1925, align 1
  %1926 = icmp eq i64 %1920, 255
  br i1 %1926, label %1927, label %1932

1927:                                             ; preds = %1923
  %1928 = load i8*, i8** %149, align 8
  %1929 = load i64, i64* %148, align 8
  %1930 = add i64 %1929, 1
  store i64 %1930, i64* %148, align 8
  %1931 = getelementptr inbounds i8, i8* %1928, i64 %1929
  store i8 0, i8* %1931, align 1
  br label %1932

1932:                                             ; preds = %1927, %1923
  %1933 = load i64, i64* %147, align 8
  %1934 = lshr i64 %1933, 48
  %1935 = trunc i64 %1934 to i8
  %1936 = load i8*, i8** %149, align 8
  %1937 = load i64, i64* %148, align 8
  %1938 = add i64 %1937, 1
  store i64 %1938, i64* %148, align 8
  %1939 = getelementptr inbounds i8, i8* %1936, i64 %1937
  store i8 %1935, i8* %1939, align 1
  %1940 = and i64 %1933, 71776119061217280
  %1941 = icmp eq i64 %1940, 71776119061217280
  br i1 %1941, label %1942, label %1947

1942:                                             ; preds = %1932
  %1943 = load i8*, i8** %149, align 8
  %1944 = load i64, i64* %148, align 8
  %1945 = add i64 %1944, 1
  store i64 %1945, i64* %148, align 8
  %1946 = getelementptr inbounds i8, i8* %1943, i64 %1944
  store i8 0, i8* %1946, align 1
  br label %1947

1947:                                             ; preds = %1942, %1932
  %1948 = load i64, i64* %147, align 8
  %1949 = lshr i64 %1948, 40
  %1950 = trunc i64 %1949 to i8
  %1951 = load i8*, i8** %149, align 8
  %1952 = load i64, i64* %148, align 8
  %1953 = add i64 %1952, 1
  store i64 %1953, i64* %148, align 8
  %1954 = getelementptr inbounds i8, i8* %1951, i64 %1952
  store i8 %1950, i8* %1954, align 1
  %1955 = and i64 %1948, 280375465082880
  %1956 = icmp eq i64 %1955, 280375465082880
  br i1 %1956, label %1957, label %1962

1957:                                             ; preds = %1947
  %1958 = load i8*, i8** %149, align 8
  %1959 = load i64, i64* %148, align 8
  %1960 = add i64 %1959, 1
  store i64 %1960, i64* %148, align 8
  %1961 = getelementptr inbounds i8, i8* %1958, i64 %1959
  store i8 0, i8* %1961, align 1
  br label %1962

1962:                                             ; preds = %1957, %1947
  %1963 = load i64, i64* %147, align 8
  %1964 = lshr i64 %1963, 32
  %1965 = trunc i64 %1964 to i8
  %1966 = load i8*, i8** %149, align 8
  %1967 = load i64, i64* %148, align 8
  %1968 = add i64 %1967, 1
  store i64 %1968, i64* %148, align 8
  %1969 = getelementptr inbounds i8, i8* %1966, i64 %1967
  store i8 %1965, i8* %1969, align 1
  %1970 = and i64 %1963, 1095216660480
  %1971 = icmp eq i64 %1970, 1095216660480
  br i1 %1971, label %1972, label %1977

1972:                                             ; preds = %1962
  %1973 = load i8*, i8** %149, align 8
  %1974 = load i64, i64* %148, align 8
  %1975 = add i64 %1974, 1
  store i64 %1975, i64* %148, align 8
  %1976 = getelementptr inbounds i8, i8* %1973, i64 %1974
  store i8 0, i8* %1976, align 1
  br label %1977

1977:                                             ; preds = %1972, %1962
  %1978 = load i64, i64* %147, align 8
  %1979 = lshr i64 %1978, 24
  %1980 = trunc i64 %1979 to i8
  %1981 = load i8*, i8** %149, align 8
  %1982 = load i64, i64* %148, align 8
  %1983 = add i64 %1982, 1
  store i64 %1983, i64* %148, align 8
  %1984 = getelementptr inbounds i8, i8* %1981, i64 %1982
  store i8 %1980, i8* %1984, align 1
  %1985 = and i64 %1978, 4278190080
  %1986 = icmp eq i64 %1985, 4278190080
  br i1 %1986, label %1987, label %1992

1987:                                             ; preds = %1977
  %1988 = load i8*, i8** %149, align 8
  %1989 = load i64, i64* %148, align 8
  %1990 = add i64 %1989, 1
  store i64 %1990, i64* %148, align 8
  %1991 = getelementptr inbounds i8, i8* %1988, i64 %1989
  store i8 0, i8* %1991, align 1
  br label %1992

1992:                                             ; preds = %1987, %1977
  %1993 = load i64, i64* %147, align 8
  %1994 = lshr i64 %1993, 16
  %1995 = trunc i64 %1994 to i8
  %1996 = load i8*, i8** %149, align 8
  %1997 = load i64, i64* %148, align 8
  %1998 = add i64 %1997, 1
  store i64 %1998, i64* %148, align 8
  %1999 = getelementptr inbounds i8, i8* %1996, i64 %1997
  store i8 %1995, i8* %1999, align 1
  %2000 = and i64 %1993, 16711680
  %2001 = icmp eq i64 %2000, 16711680
  br i1 %2001, label %2002, label %2046

2002:                                             ; preds = %1992
  %2003 = load i8*, i8** %149, align 8
  %2004 = load i64, i64* %148, align 8
  %2005 = add i64 %2004, 1
  store i64 %2005, i64* %148, align 8
  %2006 = getelementptr inbounds i8, i8* %2003, i64 %2004
  store i8 0, i8* %2006, align 1
  br label %2046

2007:                                             ; preds = %1910
  %2008 = getelementptr inbounds i8, i8* %1922, i64 %1912
  store i8 %1921, i8* %2008, align 1
  %2009 = load i64, i64* %147, align 8
  %2010 = lshr i64 %2009, 48
  %2011 = trunc i64 %2010 to i8
  %2012 = load i8*, i8** %149, align 8
  %2013 = load i64, i64* %148, align 8
  %2014 = add i64 %2013, 1
  %2015 = getelementptr inbounds i8, i8* %2012, i64 %2014
  store i8 %2011, i8* %2015, align 1
  %2016 = load i64, i64* %147, align 8
  %2017 = lshr i64 %2016, 40
  %2018 = trunc i64 %2017 to i8
  %2019 = load i8*, i8** %149, align 8
  %2020 = load i64, i64* %148, align 8
  %2021 = add i64 %2020, 2
  %2022 = getelementptr inbounds i8, i8* %2019, i64 %2021
  store i8 %2018, i8* %2022, align 1
  %2023 = load i64, i64* %147, align 8
  %2024 = lshr i64 %2023, 32
  %2025 = trunc i64 %2024 to i8
  %2026 = load i8*, i8** %149, align 8
  %2027 = load i64, i64* %148, align 8
  %2028 = add i64 %2027, 3
  %2029 = getelementptr inbounds i8, i8* %2026, i64 %2028
  store i8 %2025, i8* %2029, align 1
  %2030 = load i64, i64* %147, align 8
  %2031 = lshr i64 %2030, 24
  %2032 = trunc i64 %2031 to i8
  %2033 = load i8*, i8** %149, align 8
  %2034 = load i64, i64* %148, align 8
  %2035 = add i64 %2034, 4
  %2036 = getelementptr inbounds i8, i8* %2033, i64 %2035
  store i8 %2032, i8* %2036, align 1
  %2037 = load i64, i64* %147, align 8
  %2038 = lshr i64 %2037, 16
  %2039 = trunc i64 %2038 to i8
  %2040 = load i8*, i8** %149, align 8
  %2041 = load i64, i64* %148, align 8
  %2042 = add i64 %2041, 5
  %2043 = getelementptr inbounds i8, i8* %2040, i64 %2042
  store i8 %2039, i8* %2043, align 1
  %2044 = load i64, i64* %148, align 8
  %2045 = add i64 %2044, 6
  store i64 %2045, i64* %148, align 8
  br label %2046

2046:                                             ; preds = %2007, %2002, %1992
  %2047 = load i64, i64* %147, align 8
  %2048 = shl i64 %2047, 48
  store i64 %2048, i64* %147, align 8
  %2049 = load i32, i32* %146, align 8
  %2050 = add nsw i32 %2049, 48
  store i32 %2050, i32* %146, align 8
  br label %2051

2051:                                             ; preds = %2046, %1892, %1889
  %2052 = phi i64 [ %1891, %1889 ], [ %1901, %1892 ], [ %2048, %2046 ]
  %2053 = phi i32 [ %1890, %1889 ], [ %1897, %1892 ], [ %2050, %2046 ]
  %2054 = sext i16 %1705 to i32
  %2055 = shl nsw i32 -1, %1880
  %2056 = xor i32 %2055, -1
  %2057 = and i32 %2056, %2054
  %2058 = sext i32 %2057 to i64
  %2059 = sub nsw i32 %2053, %1880
  store i32 %2059, i32* %146, align 8
  %2060 = zext i32 %2059 to i64
  %2061 = shl i64 %2058, %2060
  %2062 = or i64 %2061, %2052
  store i64 %2062, i64* %147, align 8
  %2063 = icmp slt i32 %2059, 17
  br i1 %2063, label %2064, label %2212

2064:                                             ; preds = %2051
  %2065 = load i64, i64* %148, align 8
  %2066 = add i64 %2065, 12
  %2067 = icmp ugt i64 %2066, 16384
  br i1 %2067, label %2068, label %2071, !prof !23

2068:                                             ; preds = %2064
  call fastcc void @_ZN3jxl4jpeg12_GLOBAL__N_110SwapBufferEPNS0_13JpegBitWriterE(%"struct.jxl::jpeg::JpegBitWriter"* %130) #10
  %2069 = load i64, i64* %148, align 8
  %2070 = load i64, i64* %147, align 8
  br label %2071

2071:                                             ; preds = %2068, %2064
  %2072 = phi i64 [ %2062, %2064 ], [ %2070, %2068 ]
  %2073 = phi i64 [ %2065, %2064 ], [ %2069, %2068 ]
  %2074 = or i64 %2072, 65535
  %2075 = xor i64 %2074, -65536
  %2076 = add i64 %2075, -72340172838076673
  %2077 = and i64 %2075, -9187201950435770368
  %2078 = xor i64 %2077, -9187201950435770368
  %2079 = and i64 %2078, %2076
  %2080 = icmp eq i64 %2079, 0
  %2081 = lshr i64 %2072, 56
  %2082 = trunc i64 %2081 to i8
  %2083 = load i8*, i8** %149, align 8
  br i1 %2080, label %2168, label %2084

2084:                                             ; preds = %2071
  %2085 = add i64 %2073, 1
  store i64 %2085, i64* %148, align 8
  %2086 = getelementptr inbounds i8, i8* %2083, i64 %2073
  store i8 %2082, i8* %2086, align 1
  %2087 = icmp eq i64 %2081, 255
  br i1 %2087, label %2088, label %2093

2088:                                             ; preds = %2084
  %2089 = load i8*, i8** %149, align 8
  %2090 = load i64, i64* %148, align 8
  %2091 = add i64 %2090, 1
  store i64 %2091, i64* %148, align 8
  %2092 = getelementptr inbounds i8, i8* %2089, i64 %2090
  store i8 0, i8* %2092, align 1
  br label %2093

2093:                                             ; preds = %2088, %2084
  %2094 = load i64, i64* %147, align 8
  %2095 = lshr i64 %2094, 48
  %2096 = trunc i64 %2095 to i8
  %2097 = load i8*, i8** %149, align 8
  %2098 = load i64, i64* %148, align 8
  %2099 = add i64 %2098, 1
  store i64 %2099, i64* %148, align 8
  %2100 = getelementptr inbounds i8, i8* %2097, i64 %2098
  store i8 %2096, i8* %2100, align 1
  %2101 = and i64 %2094, 71776119061217280
  %2102 = icmp eq i64 %2101, 71776119061217280
  br i1 %2102, label %2103, label %2108

2103:                                             ; preds = %2093
  %2104 = load i8*, i8** %149, align 8
  %2105 = load i64, i64* %148, align 8
  %2106 = add i64 %2105, 1
  store i64 %2106, i64* %148, align 8
  %2107 = getelementptr inbounds i8, i8* %2104, i64 %2105
  store i8 0, i8* %2107, align 1
  br label %2108

2108:                                             ; preds = %2103, %2093
  %2109 = load i64, i64* %147, align 8
  %2110 = lshr i64 %2109, 40
  %2111 = trunc i64 %2110 to i8
  %2112 = load i8*, i8** %149, align 8
  %2113 = load i64, i64* %148, align 8
  %2114 = add i64 %2113, 1
  store i64 %2114, i64* %148, align 8
  %2115 = getelementptr inbounds i8, i8* %2112, i64 %2113
  store i8 %2111, i8* %2115, align 1
  %2116 = and i64 %2109, 280375465082880
  %2117 = icmp eq i64 %2116, 280375465082880
  br i1 %2117, label %2118, label %2123

2118:                                             ; preds = %2108
  %2119 = load i8*, i8** %149, align 8
  %2120 = load i64, i64* %148, align 8
  %2121 = add i64 %2120, 1
  store i64 %2121, i64* %148, align 8
  %2122 = getelementptr inbounds i8, i8* %2119, i64 %2120
  store i8 0, i8* %2122, align 1
  br label %2123

2123:                                             ; preds = %2118, %2108
  %2124 = load i64, i64* %147, align 8
  %2125 = lshr i64 %2124, 32
  %2126 = trunc i64 %2125 to i8
  %2127 = load i8*, i8** %149, align 8
  %2128 = load i64, i64* %148, align 8
  %2129 = add i64 %2128, 1
  store i64 %2129, i64* %148, align 8
  %2130 = getelementptr inbounds i8, i8* %2127, i64 %2128
  store i8 %2126, i8* %2130, align 1
  %2131 = and i64 %2124, 1095216660480
  %2132 = icmp eq i64 %2131, 1095216660480
  br i1 %2132, label %2133, label %2138

2133:                                             ; preds = %2123
  %2134 = load i8*, i8** %149, align 8
  %2135 = load i64, i64* %148, align 8
  %2136 = add i64 %2135, 1
  store i64 %2136, i64* %148, align 8
  %2137 = getelementptr inbounds i8, i8* %2134, i64 %2135
  store i8 0, i8* %2137, align 1
  br label %2138

2138:                                             ; preds = %2133, %2123
  %2139 = load i64, i64* %147, align 8
  %2140 = lshr i64 %2139, 24
  %2141 = trunc i64 %2140 to i8
  %2142 = load i8*, i8** %149, align 8
  %2143 = load i64, i64* %148, align 8
  %2144 = add i64 %2143, 1
  store i64 %2144, i64* %148, align 8
  %2145 = getelementptr inbounds i8, i8* %2142, i64 %2143
  store i8 %2141, i8* %2145, align 1
  %2146 = and i64 %2139, 4278190080
  %2147 = icmp eq i64 %2146, 4278190080
  br i1 %2147, label %2148, label %2153

2148:                                             ; preds = %2138
  %2149 = load i8*, i8** %149, align 8
  %2150 = load i64, i64* %148, align 8
  %2151 = add i64 %2150, 1
  store i64 %2151, i64* %148, align 8
  %2152 = getelementptr inbounds i8, i8* %2149, i64 %2150
  store i8 0, i8* %2152, align 1
  br label %2153

2153:                                             ; preds = %2148, %2138
  %2154 = load i64, i64* %147, align 8
  %2155 = lshr i64 %2154, 16
  %2156 = trunc i64 %2155 to i8
  %2157 = load i8*, i8** %149, align 8
  %2158 = load i64, i64* %148, align 8
  %2159 = add i64 %2158, 1
  store i64 %2159, i64* %148, align 8
  %2160 = getelementptr inbounds i8, i8* %2157, i64 %2158
  store i8 %2156, i8* %2160, align 1
  %2161 = and i64 %2154, 16711680
  %2162 = icmp eq i64 %2161, 16711680
  br i1 %2162, label %2163, label %2207

2163:                                             ; preds = %2153
  %2164 = load i8*, i8** %149, align 8
  %2165 = load i64, i64* %148, align 8
  %2166 = add i64 %2165, 1
  store i64 %2166, i64* %148, align 8
  %2167 = getelementptr inbounds i8, i8* %2164, i64 %2165
  store i8 0, i8* %2167, align 1
  br label %2207

2168:                                             ; preds = %2071
  %2169 = getelementptr inbounds i8, i8* %2083, i64 %2073
  store i8 %2082, i8* %2169, align 1
  %2170 = load i64, i64* %147, align 8
  %2171 = lshr i64 %2170, 48
  %2172 = trunc i64 %2171 to i8
  %2173 = load i8*, i8** %149, align 8
  %2174 = load i64, i64* %148, align 8
  %2175 = add i64 %2174, 1
  %2176 = getelementptr inbounds i8, i8* %2173, i64 %2175
  store i8 %2172, i8* %2176, align 1
  %2177 = load i64, i64* %147, align 8
  %2178 = lshr i64 %2177, 40
  %2179 = trunc i64 %2178 to i8
  %2180 = load i8*, i8** %149, align 8
  %2181 = load i64, i64* %148, align 8
  %2182 = add i64 %2181, 2
  %2183 = getelementptr inbounds i8, i8* %2180, i64 %2182
  store i8 %2179, i8* %2183, align 1
  %2184 = load i64, i64* %147, align 8
  %2185 = lshr i64 %2184, 32
  %2186 = trunc i64 %2185 to i8
  %2187 = load i8*, i8** %149, align 8
  %2188 = load i64, i64* %148, align 8
  %2189 = add i64 %2188, 3
  %2190 = getelementptr inbounds i8, i8* %2187, i64 %2189
  store i8 %2186, i8* %2190, align 1
  %2191 = load i64, i64* %147, align 8
  %2192 = lshr i64 %2191, 24
  %2193 = trunc i64 %2192 to i8
  %2194 = load i8*, i8** %149, align 8
  %2195 = load i64, i64* %148, align 8
  %2196 = add i64 %2195, 4
  %2197 = getelementptr inbounds i8, i8* %2194, i64 %2196
  store i8 %2193, i8* %2197, align 1
  %2198 = load i64, i64* %147, align 8
  %2199 = lshr i64 %2198, 16
  %2200 = trunc i64 %2199 to i8
  %2201 = load i8*, i8** %149, align 8
  %2202 = load i64, i64* %148, align 8
  %2203 = add i64 %2202, 5
  %2204 = getelementptr inbounds i8, i8* %2201, i64 %2203
  store i8 %2200, i8* %2204, align 1
  %2205 = load i64, i64* %148, align 8
  %2206 = add i64 %2205, 6
  store i64 %2206, i64* %148, align 8
  br label %2207

2207:                                             ; preds = %2168, %2163, %2153
  %2208 = load i64, i64* %147, align 8
  %2209 = shl i64 %2208, 48
  store i64 %2209, i64* %147, align 8
  %2210 = load i32, i32* %146, align 8
  %2211 = add nsw i32 %2210, 48
  store i32 %2211, i32* %146, align 8
  br label %2212

2212:                                             ; preds = %2207, %2051, %1699
  %2213 = phi i32 [ %1700, %1699 ], [ 0, %2051 ], [ 0, %2207 ]
  %2214 = add nuw nsw i64 %1691, 1
  %2215 = icmp eq i64 %2214, 64
  br i1 %2215, label %1688, label %1690

2216:                                             ; preds = %2385
  %2217 = shl i32 %1335, 4
  %2218 = sub i32 %2213, %2217
  br label %2219

2219:                                             ; preds = %2216, %1688
  %2220 = phi i32 [ %2213, %1688 ], [ %2218, %2216 ]
  %2221 = icmp sgt i32 %2220, 0
  br i1 %2221, label %2388, label %2550

2222:                                             ; preds = %1688, %2385
  %2223 = phi i32 [ %2386, %2385 ], [ 0, %1688 ]
  %2224 = load i32, i32* %760, align 4
  %2225 = icmp eq i32 %2224, 0
  br i1 %2225, label %2226, label %2227

2226:                                             ; preds = %2222
  store i8 0, i8* %150, align 8
  br label %2385

2227:                                             ; preds = %2222
  %2228 = load i32, i32* %761, align 4
  %2229 = sext i32 %2228 to i64
  %2230 = load i32, i32* %146, align 8
  %2231 = sub nsw i32 %2230, %2224
  store i32 %2231, i32* %146, align 8
  %2232 = zext i32 %2231 to i64
  %2233 = shl i64 %2229, %2232
  %2234 = load i64, i64* %147, align 8
  %2235 = or i64 %2233, %2234
  store i64 %2235, i64* %147, align 8
  %2236 = icmp slt i32 %2231, 17
  br i1 %2236, label %2237, label %2385

2237:                                             ; preds = %2227
  %2238 = load i64, i64* %148, align 8
  %2239 = add i64 %2238, 12
  %2240 = icmp ugt i64 %2239, 16384
  br i1 %2240, label %2241, label %2244, !prof !23

2241:                                             ; preds = %2237
  call fastcc void @_ZN3jxl4jpeg12_GLOBAL__N_110SwapBufferEPNS0_13JpegBitWriterE(%"struct.jxl::jpeg::JpegBitWriter"* %130) #10
  %2242 = load i64, i64* %148, align 8
  %2243 = load i64, i64* %147, align 8
  br label %2244

2244:                                             ; preds = %2241, %2237
  %2245 = phi i64 [ %2235, %2237 ], [ %2243, %2241 ]
  %2246 = phi i64 [ %2238, %2237 ], [ %2242, %2241 ]
  %2247 = or i64 %2245, 65535
  %2248 = xor i64 %2247, -65536
  %2249 = add i64 %2248, -72340172838076673
  %2250 = and i64 %2248, -9187201950435770368
  %2251 = xor i64 %2250, -9187201950435770368
  %2252 = and i64 %2251, %2249
  %2253 = icmp eq i64 %2252, 0
  %2254 = lshr i64 %2245, 56
  %2255 = trunc i64 %2254 to i8
  %2256 = load i8*, i8** %149, align 8
  br i1 %2253, label %2341, label %2257

2257:                                             ; preds = %2244
  %2258 = add i64 %2246, 1
  store i64 %2258, i64* %148, align 8
  %2259 = getelementptr inbounds i8, i8* %2256, i64 %2246
  store i8 %2255, i8* %2259, align 1
  %2260 = icmp eq i64 %2254, 255
  br i1 %2260, label %2261, label %2266

2261:                                             ; preds = %2257
  %2262 = load i8*, i8** %149, align 8
  %2263 = load i64, i64* %148, align 8
  %2264 = add i64 %2263, 1
  store i64 %2264, i64* %148, align 8
  %2265 = getelementptr inbounds i8, i8* %2262, i64 %2263
  store i8 0, i8* %2265, align 1
  br label %2266

2266:                                             ; preds = %2261, %2257
  %2267 = load i64, i64* %147, align 8
  %2268 = lshr i64 %2267, 48
  %2269 = trunc i64 %2268 to i8
  %2270 = load i8*, i8** %149, align 8
  %2271 = load i64, i64* %148, align 8
  %2272 = add i64 %2271, 1
  store i64 %2272, i64* %148, align 8
  %2273 = getelementptr inbounds i8, i8* %2270, i64 %2271
  store i8 %2269, i8* %2273, align 1
  %2274 = and i64 %2267, 71776119061217280
  %2275 = icmp eq i64 %2274, 71776119061217280
  br i1 %2275, label %2276, label %2281

2276:                                             ; preds = %2266
  %2277 = load i8*, i8** %149, align 8
  %2278 = load i64, i64* %148, align 8
  %2279 = add i64 %2278, 1
  store i64 %2279, i64* %148, align 8
  %2280 = getelementptr inbounds i8, i8* %2277, i64 %2278
  store i8 0, i8* %2280, align 1
  br label %2281

2281:                                             ; preds = %2276, %2266
  %2282 = load i64, i64* %147, align 8
  %2283 = lshr i64 %2282, 40
  %2284 = trunc i64 %2283 to i8
  %2285 = load i8*, i8** %149, align 8
  %2286 = load i64, i64* %148, align 8
  %2287 = add i64 %2286, 1
  store i64 %2287, i64* %148, align 8
  %2288 = getelementptr inbounds i8, i8* %2285, i64 %2286
  store i8 %2284, i8* %2288, align 1
  %2289 = and i64 %2282, 280375465082880
  %2290 = icmp eq i64 %2289, 280375465082880
  br i1 %2290, label %2291, label %2296

2291:                                             ; preds = %2281
  %2292 = load i8*, i8** %149, align 8
  %2293 = load i64, i64* %148, align 8
  %2294 = add i64 %2293, 1
  store i64 %2294, i64* %148, align 8
  %2295 = getelementptr inbounds i8, i8* %2292, i64 %2293
  store i8 0, i8* %2295, align 1
  br label %2296

2296:                                             ; preds = %2291, %2281
  %2297 = load i64, i64* %147, align 8
  %2298 = lshr i64 %2297, 32
  %2299 = trunc i64 %2298 to i8
  %2300 = load i8*, i8** %149, align 8
  %2301 = load i64, i64* %148, align 8
  %2302 = add i64 %2301, 1
  store i64 %2302, i64* %148, align 8
  %2303 = getelementptr inbounds i8, i8* %2300, i64 %2301
  store i8 %2299, i8* %2303, align 1
  %2304 = and i64 %2297, 1095216660480
  %2305 = icmp eq i64 %2304, 1095216660480
  br i1 %2305, label %2306, label %2311

2306:                                             ; preds = %2296
  %2307 = load i8*, i8** %149, align 8
  %2308 = load i64, i64* %148, align 8
  %2309 = add i64 %2308, 1
  store i64 %2309, i64* %148, align 8
  %2310 = getelementptr inbounds i8, i8* %2307, i64 %2308
  store i8 0, i8* %2310, align 1
  br label %2311

2311:                                             ; preds = %2306, %2296
  %2312 = load i64, i64* %147, align 8
  %2313 = lshr i64 %2312, 24
  %2314 = trunc i64 %2313 to i8
  %2315 = load i8*, i8** %149, align 8
  %2316 = load i64, i64* %148, align 8
  %2317 = add i64 %2316, 1
  store i64 %2317, i64* %148, align 8
  %2318 = getelementptr inbounds i8, i8* %2315, i64 %2316
  store i8 %2314, i8* %2318, align 1
  %2319 = and i64 %2312, 4278190080
  %2320 = icmp eq i64 %2319, 4278190080
  br i1 %2320, label %2321, label %2326

2321:                                             ; preds = %2311
  %2322 = load i8*, i8** %149, align 8
  %2323 = load i64, i64* %148, align 8
  %2324 = add i64 %2323, 1
  store i64 %2324, i64* %148, align 8
  %2325 = getelementptr inbounds i8, i8* %2322, i64 %2323
  store i8 0, i8* %2325, align 1
  br label %2326

2326:                                             ; preds = %2321, %2311
  %2327 = load i64, i64* %147, align 8
  %2328 = lshr i64 %2327, 16
  %2329 = trunc i64 %2328 to i8
  %2330 = load i8*, i8** %149, align 8
  %2331 = load i64, i64* %148, align 8
  %2332 = add i64 %2331, 1
  store i64 %2332, i64* %148, align 8
  %2333 = getelementptr inbounds i8, i8* %2330, i64 %2331
  store i8 %2329, i8* %2333, align 1
  %2334 = and i64 %2327, 16711680
  %2335 = icmp eq i64 %2334, 16711680
  br i1 %2335, label %2336, label %2380

2336:                                             ; preds = %2326
  %2337 = load i8*, i8** %149, align 8
  %2338 = load i64, i64* %148, align 8
  %2339 = add i64 %2338, 1
  store i64 %2339, i64* %148, align 8
  %2340 = getelementptr inbounds i8, i8* %2337, i64 %2338
  store i8 0, i8* %2340, align 1
  br label %2380

2341:                                             ; preds = %2244
  %2342 = getelementptr inbounds i8, i8* %2256, i64 %2246
  store i8 %2255, i8* %2342, align 1
  %2343 = load i64, i64* %147, align 8
  %2344 = lshr i64 %2343, 48
  %2345 = trunc i64 %2344 to i8
  %2346 = load i8*, i8** %149, align 8
  %2347 = load i64, i64* %148, align 8
  %2348 = add i64 %2347, 1
  %2349 = getelementptr inbounds i8, i8* %2346, i64 %2348
  store i8 %2345, i8* %2349, align 1
  %2350 = load i64, i64* %147, align 8
  %2351 = lshr i64 %2350, 40
  %2352 = trunc i64 %2351 to i8
  %2353 = load i8*, i8** %149, align 8
  %2354 = load i64, i64* %148, align 8
  %2355 = add i64 %2354, 2
  %2356 = getelementptr inbounds i8, i8* %2353, i64 %2355
  store i8 %2352, i8* %2356, align 1
  %2357 = load i64, i64* %147, align 8
  %2358 = lshr i64 %2357, 32
  %2359 = trunc i64 %2358 to i8
  %2360 = load i8*, i8** %149, align 8
  %2361 = load i64, i64* %148, align 8
  %2362 = add i64 %2361, 3
  %2363 = getelementptr inbounds i8, i8* %2360, i64 %2362
  store i8 %2359, i8* %2363, align 1
  %2364 = load i64, i64* %147, align 8
  %2365 = lshr i64 %2364, 24
  %2366 = trunc i64 %2365 to i8
  %2367 = load i8*, i8** %149, align 8
  %2368 = load i64, i64* %148, align 8
  %2369 = add i64 %2368, 4
  %2370 = getelementptr inbounds i8, i8* %2367, i64 %2369
  store i8 %2366, i8* %2370, align 1
  %2371 = load i64, i64* %147, align 8
  %2372 = lshr i64 %2371, 16
  %2373 = trunc i64 %2372 to i8
  %2374 = load i8*, i8** %149, align 8
  %2375 = load i64, i64* %148, align 8
  %2376 = add i64 %2375, 5
  %2377 = getelementptr inbounds i8, i8* %2374, i64 %2376
  store i8 %2373, i8* %2377, align 1
  %2378 = load i64, i64* %148, align 8
  %2379 = add i64 %2378, 6
  store i64 %2379, i64* %148, align 8
  br label %2380

2380:                                             ; preds = %2341, %2336, %2326
  %2381 = load i64, i64* %147, align 8
  %2382 = shl i64 %2381, 48
  store i64 %2382, i64* %147, align 8
  %2383 = load i32, i32* %146, align 8
  %2384 = add nsw i32 %2383, 48
  store i32 %2384, i32* %146, align 8
  br label %2385

2385:                                             ; preds = %2380, %2227, %2226
  %2386 = add nuw nsw i32 %2223, 1
  %2387 = icmp eq i32 %2386, %1335
  br i1 %2387, label %2216, label %2222

2388:                                             ; preds = %2219
  %2389 = load i32, i32* %762, align 4
  %2390 = icmp eq i32 %2389, 0
  br i1 %2390, label %2391, label %2392

2391:                                             ; preds = %2388
  store i8 0, i8* %150, align 8
  br label %2550

2392:                                             ; preds = %2388
  %2393 = load i32, i32* %763, align 4
  %2394 = sext i32 %2393 to i64
  %2395 = load i32, i32* %146, align 8
  %2396 = sub nsw i32 %2395, %2389
  store i32 %2396, i32* %146, align 8
  %2397 = zext i32 %2396 to i64
  %2398 = shl i64 %2394, %2397
  %2399 = load i64, i64* %147, align 8
  %2400 = or i64 %2398, %2399
  store i64 %2400, i64* %147, align 8
  %2401 = icmp slt i32 %2396, 17
  br i1 %2401, label %2402, label %2550

2402:                                             ; preds = %2392
  %2403 = load i64, i64* %148, align 8
  %2404 = add i64 %2403, 12
  %2405 = icmp ugt i64 %2404, 16384
  br i1 %2405, label %2406, label %2409, !prof !23

2406:                                             ; preds = %2402
  call fastcc void @_ZN3jxl4jpeg12_GLOBAL__N_110SwapBufferEPNS0_13JpegBitWriterE(%"struct.jxl::jpeg::JpegBitWriter"* %130) #10
  %2407 = load i64, i64* %148, align 8
  %2408 = load i64, i64* %147, align 8
  br label %2409

2409:                                             ; preds = %2406, %2402
  %2410 = phi i64 [ %2400, %2402 ], [ %2408, %2406 ]
  %2411 = phi i64 [ %2403, %2402 ], [ %2407, %2406 ]
  %2412 = or i64 %2410, 65535
  %2413 = xor i64 %2412, -65536
  %2414 = add i64 %2413, -72340172838076673
  %2415 = and i64 %2413, -9187201950435770368
  %2416 = xor i64 %2415, -9187201950435770368
  %2417 = and i64 %2416, %2414
  %2418 = icmp eq i64 %2417, 0
  %2419 = lshr i64 %2410, 56
  %2420 = trunc i64 %2419 to i8
  %2421 = load i8*, i8** %149, align 8
  br i1 %2418, label %2506, label %2422

2422:                                             ; preds = %2409
  %2423 = add i64 %2411, 1
  store i64 %2423, i64* %148, align 8
  %2424 = getelementptr inbounds i8, i8* %2421, i64 %2411
  store i8 %2420, i8* %2424, align 1
  %2425 = icmp eq i64 %2419, 255
  br i1 %2425, label %2426, label %2431

2426:                                             ; preds = %2422
  %2427 = load i8*, i8** %149, align 8
  %2428 = load i64, i64* %148, align 8
  %2429 = add i64 %2428, 1
  store i64 %2429, i64* %148, align 8
  %2430 = getelementptr inbounds i8, i8* %2427, i64 %2428
  store i8 0, i8* %2430, align 1
  br label %2431

2431:                                             ; preds = %2426, %2422
  %2432 = load i64, i64* %147, align 8
  %2433 = lshr i64 %2432, 48
  %2434 = trunc i64 %2433 to i8
  %2435 = load i8*, i8** %149, align 8
  %2436 = load i64, i64* %148, align 8
  %2437 = add i64 %2436, 1
  store i64 %2437, i64* %148, align 8
  %2438 = getelementptr inbounds i8, i8* %2435, i64 %2436
  store i8 %2434, i8* %2438, align 1
  %2439 = and i64 %2432, 71776119061217280
  %2440 = icmp eq i64 %2439, 71776119061217280
  br i1 %2440, label %2441, label %2446

2441:                                             ; preds = %2431
  %2442 = load i8*, i8** %149, align 8
  %2443 = load i64, i64* %148, align 8
  %2444 = add i64 %2443, 1
  store i64 %2444, i64* %148, align 8
  %2445 = getelementptr inbounds i8, i8* %2442, i64 %2443
  store i8 0, i8* %2445, align 1
  br label %2446

2446:                                             ; preds = %2441, %2431
  %2447 = load i64, i64* %147, align 8
  %2448 = lshr i64 %2447, 40
  %2449 = trunc i64 %2448 to i8
  %2450 = load i8*, i8** %149, align 8
  %2451 = load i64, i64* %148, align 8
  %2452 = add i64 %2451, 1
  store i64 %2452, i64* %148, align 8
  %2453 = getelementptr inbounds i8, i8* %2450, i64 %2451
  store i8 %2449, i8* %2453, align 1
  %2454 = and i64 %2447, 280375465082880
  %2455 = icmp eq i64 %2454, 280375465082880
  br i1 %2455, label %2456, label %2461

2456:                                             ; preds = %2446
  %2457 = load i8*, i8** %149, align 8
  %2458 = load i64, i64* %148, align 8
  %2459 = add i64 %2458, 1
  store i64 %2459, i64* %148, align 8
  %2460 = getelementptr inbounds i8, i8* %2457, i64 %2458
  store i8 0, i8* %2460, align 1
  br label %2461

2461:                                             ; preds = %2456, %2446
  %2462 = load i64, i64* %147, align 8
  %2463 = lshr i64 %2462, 32
  %2464 = trunc i64 %2463 to i8
  %2465 = load i8*, i8** %149, align 8
  %2466 = load i64, i64* %148, align 8
  %2467 = add i64 %2466, 1
  store i64 %2467, i64* %148, align 8
  %2468 = getelementptr inbounds i8, i8* %2465, i64 %2466
  store i8 %2464, i8* %2468, align 1
  %2469 = and i64 %2462, 1095216660480
  %2470 = icmp eq i64 %2469, 1095216660480
  br i1 %2470, label %2471, label %2476

2471:                                             ; preds = %2461
  %2472 = load i8*, i8** %149, align 8
  %2473 = load i64, i64* %148, align 8
  %2474 = add i64 %2473, 1
  store i64 %2474, i64* %148, align 8
  %2475 = getelementptr inbounds i8, i8* %2472, i64 %2473
  store i8 0, i8* %2475, align 1
  br label %2476

2476:                                             ; preds = %2471, %2461
  %2477 = load i64, i64* %147, align 8
  %2478 = lshr i64 %2477, 24
  %2479 = trunc i64 %2478 to i8
  %2480 = load i8*, i8** %149, align 8
  %2481 = load i64, i64* %148, align 8
  %2482 = add i64 %2481, 1
  store i64 %2482, i64* %148, align 8
  %2483 = getelementptr inbounds i8, i8* %2480, i64 %2481
  store i8 %2479, i8* %2483, align 1
  %2484 = and i64 %2477, 4278190080
  %2485 = icmp eq i64 %2484, 4278190080
  br i1 %2485, label %2486, label %2491

2486:                                             ; preds = %2476
  %2487 = load i8*, i8** %149, align 8
  %2488 = load i64, i64* %148, align 8
  %2489 = add i64 %2488, 1
  store i64 %2489, i64* %148, align 8
  %2490 = getelementptr inbounds i8, i8* %2487, i64 %2488
  store i8 0, i8* %2490, align 1
  br label %2491

2491:                                             ; preds = %2486, %2476
  %2492 = load i64, i64* %147, align 8
  %2493 = lshr i64 %2492, 16
  %2494 = trunc i64 %2493 to i8
  %2495 = load i8*, i8** %149, align 8
  %2496 = load i64, i64* %148, align 8
  %2497 = add i64 %2496, 1
  store i64 %2497, i64* %148, align 8
  %2498 = getelementptr inbounds i8, i8* %2495, i64 %2496
  store i8 %2494, i8* %2498, align 1
  %2499 = and i64 %2492, 16711680
  %2500 = icmp eq i64 %2499, 16711680
  br i1 %2500, label %2501, label %2545

2501:                                             ; preds = %2491
  %2502 = load i8*, i8** %149, align 8
  %2503 = load i64, i64* %148, align 8
  %2504 = add i64 %2503, 1
  store i64 %2504, i64* %148, align 8
  %2505 = getelementptr inbounds i8, i8* %2502, i64 %2503
  store i8 0, i8* %2505, align 1
  br label %2545

2506:                                             ; preds = %2409
  %2507 = getelementptr inbounds i8, i8* %2421, i64 %2411
  store i8 %2420, i8* %2507, align 1
  %2508 = load i64, i64* %147, align 8
  %2509 = lshr i64 %2508, 48
  %2510 = trunc i64 %2509 to i8
  %2511 = load i8*, i8** %149, align 8
  %2512 = load i64, i64* %148, align 8
  %2513 = add i64 %2512, 1
  %2514 = getelementptr inbounds i8, i8* %2511, i64 %2513
  store i8 %2510, i8* %2514, align 1
  %2515 = load i64, i64* %147, align 8
  %2516 = lshr i64 %2515, 40
  %2517 = trunc i64 %2516 to i8
  %2518 = load i8*, i8** %149, align 8
  %2519 = load i64, i64* %148, align 8
  %2520 = add i64 %2519, 2
  %2521 = getelementptr inbounds i8, i8* %2518, i64 %2520
  store i8 %2517, i8* %2521, align 1
  %2522 = load i64, i64* %147, align 8
  %2523 = lshr i64 %2522, 32
  %2524 = trunc i64 %2523 to i8
  %2525 = load i8*, i8** %149, align 8
  %2526 = load i64, i64* %148, align 8
  %2527 = add i64 %2526, 3
  %2528 = getelementptr inbounds i8, i8* %2525, i64 %2527
  store i8 %2524, i8* %2528, align 1
  %2529 = load i64, i64* %147, align 8
  %2530 = lshr i64 %2529, 24
  %2531 = trunc i64 %2530 to i8
  %2532 = load i8*, i8** %149, align 8
  %2533 = load i64, i64* %148, align 8
  %2534 = add i64 %2533, 4
  %2535 = getelementptr inbounds i8, i8* %2532, i64 %2534
  store i8 %2531, i8* %2535, align 1
  %2536 = load i64, i64* %147, align 8
  %2537 = lshr i64 %2536, 16
  %2538 = trunc i64 %2537 to i8
  %2539 = load i8*, i8** %149, align 8
  %2540 = load i64, i64* %148, align 8
  %2541 = add i64 %2540, 5
  %2542 = getelementptr inbounds i8, i8* %2539, i64 %2541
  store i8 %2538, i8* %2542, align 1
  %2543 = load i64, i64* %148, align 8
  %2544 = add i64 %2543, 6
  store i64 %2544, i64* %148, align 8
  br label %2545

2545:                                             ; preds = %2506, %2501, %2491
  %2546 = load i64, i64* %147, align 8
  %2547 = shl i64 %2546, 48
  store i64 %2547, i64* %147, align 8
  %2548 = load i32, i32* %146, align 8
  %2549 = add nsw i32 %2548, 48
  store i32 %2549, i32* %146, align 8
  br label %2550

2550:                                             ; preds = %2219, %2391, %2392, %2545
  %2551 = load i32, i32* %163, align 8
  %2552 = add nsw i32 %2551, 1
  store i32 %2552, i32* %163, align 8
  %2553 = add nuw nsw i32 %770, 1
  %2554 = icmp eq i32 %2553, %753
  br i1 %2554, label %2555, label %768

2555:                                             ; preds = %2550, %764
  %2556 = add nuw nsw i32 %765, 1
  %2557 = icmp eq i32 %2556, %750
  br i1 %2557, label %2558, label %764

2558:                                             ; preds = %2555
  %2559 = load i32, i32* %132, align 8
  br label %2560

2560:                                             ; preds = %2558, %733
  %2561 = phi i32 [ %2559, %2558 ], [ %734, %733 ]
  %2562 = add nuw nsw i64 %735, 1
  %2563 = zext i32 %2561 to i64
  %2564 = icmp ult i64 %2562, %2563
  br i1 %2564, label %733, label %2565

2565:                                             ; preds = %2560, %730
  %2566 = load i32, i32* %143, align 8
  %2567 = add nsw i32 %2566, -1
  store i32 %2567, i32* %143, align 8
  %2568 = add nuw nsw i32 %184, 1
  %2569 = load i32, i32* %3, align 4
  %2570 = icmp slt i32 %2568, %2569
  br i1 %2570, label %183, label %2571

2571:                                             ; preds = %2565
  %2572 = load i32, i32* %138, align 4
  br label %2573

2573:                                             ; preds = %2571, %179
  %2574 = phi i32 [ %2572, %2571 ], [ %180, %179 ]
  %2575 = phi i32 [ %2569, %2571 ], [ %181, %179 ]
  %2576 = add nsw i32 %2574, 1
  store i32 %2576, i32* %138, align 4
  %2577 = icmp slt i32 %2576, %137
  br i1 %2577, label %179, label %2578

2578:                                             ; preds = %2573
  %2579 = load i32, i32* %4, align 4
  br label %2580

2580:                                             ; preds = %2578, %129
  %2581 = phi i32 [ %137, %129 ], [ %2579, %2578 ]
  %2582 = phi i32 [ %139, %129 ], [ %2576, %2578 ]
  %2583 = icmp slt i32 %2582, %2581
  br i1 %2583, label %2584, label %2589

2584:                                             ; preds = %2580
  %2585 = getelementptr inbounds %"struct.jxl::jpeg::JpegBitWriter", %"struct.jxl::jpeg::JpegBitWriter"* %130, i64 0, i32 0
  %2586 = load i8, i8* %2585, align 8, !range !2
  %2587 = icmp eq i8 %2586, 0
  %2588 = select i1 %2587, i32 2, i32 0
  br label %3211

2589:                                             ; preds = %2580
  %2590 = getelementptr inbounds %"struct.jxl::jpeg::DCTCodingState", %"struct.jxl::jpeg::DCTCodingState"* %131, i64 0, i32 0
  %2591 = load i32, i32* %2590, align 8
  %2592 = icmp sgt i32 %2591, 0
  br i1 %2592, label %2593, label %2936

2593:                                             ; preds = %2589
  %2594 = call i32 @llvm.ctlz.i32(i32 %2591, i1 true) #10, !range !22
  %2595 = xor i32 %2594, 31
  %2596 = shl nuw nsw i32 %2595, 4
  %2597 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 8, i32 1
  %2598 = load %"struct.jxl::jpeg::HuffmanCodeTable"*, %"struct.jxl::jpeg::HuffmanCodeTable"** %2597, align 8
  %2599 = zext i32 %2596 to i64
  %2600 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanCodeTable", %"struct.jxl::jpeg::HuffmanCodeTable"* %2598, i64 0, i32 0, i64 %2599
  %2601 = load i32, i32* %2600, align 4
  %2602 = icmp eq i32 %2601, 0
  br i1 %2602, label %2603, label %2605

2603:                                             ; preds = %2593
  %2604 = getelementptr inbounds %"struct.jxl::jpeg::JpegBitWriter", %"struct.jxl::jpeg::JpegBitWriter"* %130, i64 0, i32 0
  store i8 0, i8* %2604, align 8
  br label %2768

2605:                                             ; preds = %2593
  %2606 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanCodeTable", %"struct.jxl::jpeg::HuffmanCodeTable"* %2598, i64 0, i32 1, i64 %2599
  %2607 = load i32, i32* %2606, align 4
  %2608 = sext i32 %2607 to i64
  %2609 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2, i32 7
  %2610 = load i32, i32* %2609, align 8
  %2611 = sub nsw i32 %2610, %2601
  store i32 %2611, i32* %2609, align 8
  %2612 = zext i32 %2611 to i64
  %2613 = shl i64 %2608, %2612
  %2614 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2, i32 6
  %2615 = load i64, i64* %2614, align 8
  %2616 = or i64 %2613, %2615
  store i64 %2616, i64* %2614, align 8
  %2617 = icmp slt i32 %2611, 17
  br i1 %2617, label %2618, label %2768

2618:                                             ; preds = %2605
  %2619 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2, i32 5
  %2620 = load i64, i64* %2619, align 8
  %2621 = add i64 %2620, 12
  %2622 = icmp ugt i64 %2621, 16384
  br i1 %2622, label %2623, label %2626, !prof !23

2623:                                             ; preds = %2618
  call fastcc void @_ZN3jxl4jpeg12_GLOBAL__N_110SwapBufferEPNS0_13JpegBitWriterE(%"struct.jxl::jpeg::JpegBitWriter"* %130) #10
  %2624 = load i64, i64* %2619, align 8
  %2625 = load i64, i64* %2614, align 8
  br label %2626

2626:                                             ; preds = %2623, %2618
  %2627 = phi i64 [ %2616, %2618 ], [ %2625, %2623 ]
  %2628 = phi i64 [ %2620, %2618 ], [ %2624, %2623 ]
  %2629 = or i64 %2627, 65535
  %2630 = xor i64 %2629, -65536
  %2631 = add i64 %2630, -72340172838076673
  %2632 = and i64 %2630, -9187201950435770368
  %2633 = xor i64 %2632, -9187201950435770368
  %2634 = and i64 %2633, %2631
  %2635 = icmp eq i64 %2634, 0
  %2636 = lshr i64 %2627, 56
  %2637 = trunc i64 %2636 to i8
  %2638 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2, i32 4
  %2639 = load i8*, i8** %2638, align 8
  br i1 %2635, label %2724, label %2640

2640:                                             ; preds = %2626
  %2641 = add i64 %2628, 1
  store i64 %2641, i64* %2619, align 8
  %2642 = getelementptr inbounds i8, i8* %2639, i64 %2628
  store i8 %2637, i8* %2642, align 1
  %2643 = icmp eq i64 %2636, 255
  br i1 %2643, label %2644, label %2649

2644:                                             ; preds = %2640
  %2645 = load i8*, i8** %2638, align 8
  %2646 = load i64, i64* %2619, align 8
  %2647 = add i64 %2646, 1
  store i64 %2647, i64* %2619, align 8
  %2648 = getelementptr inbounds i8, i8* %2645, i64 %2646
  store i8 0, i8* %2648, align 1
  br label %2649

2649:                                             ; preds = %2644, %2640
  %2650 = load i64, i64* %2614, align 8
  %2651 = lshr i64 %2650, 48
  %2652 = trunc i64 %2651 to i8
  %2653 = load i8*, i8** %2638, align 8
  %2654 = load i64, i64* %2619, align 8
  %2655 = add i64 %2654, 1
  store i64 %2655, i64* %2619, align 8
  %2656 = getelementptr inbounds i8, i8* %2653, i64 %2654
  store i8 %2652, i8* %2656, align 1
  %2657 = and i64 %2650, 71776119061217280
  %2658 = icmp eq i64 %2657, 71776119061217280
  br i1 %2658, label %2659, label %2664

2659:                                             ; preds = %2649
  %2660 = load i8*, i8** %2638, align 8
  %2661 = load i64, i64* %2619, align 8
  %2662 = add i64 %2661, 1
  store i64 %2662, i64* %2619, align 8
  %2663 = getelementptr inbounds i8, i8* %2660, i64 %2661
  store i8 0, i8* %2663, align 1
  br label %2664

2664:                                             ; preds = %2659, %2649
  %2665 = load i64, i64* %2614, align 8
  %2666 = lshr i64 %2665, 40
  %2667 = trunc i64 %2666 to i8
  %2668 = load i8*, i8** %2638, align 8
  %2669 = load i64, i64* %2619, align 8
  %2670 = add i64 %2669, 1
  store i64 %2670, i64* %2619, align 8
  %2671 = getelementptr inbounds i8, i8* %2668, i64 %2669
  store i8 %2667, i8* %2671, align 1
  %2672 = and i64 %2665, 280375465082880
  %2673 = icmp eq i64 %2672, 280375465082880
  br i1 %2673, label %2674, label %2679

2674:                                             ; preds = %2664
  %2675 = load i8*, i8** %2638, align 8
  %2676 = load i64, i64* %2619, align 8
  %2677 = add i64 %2676, 1
  store i64 %2677, i64* %2619, align 8
  %2678 = getelementptr inbounds i8, i8* %2675, i64 %2676
  store i8 0, i8* %2678, align 1
  br label %2679

2679:                                             ; preds = %2674, %2664
  %2680 = load i64, i64* %2614, align 8
  %2681 = lshr i64 %2680, 32
  %2682 = trunc i64 %2681 to i8
  %2683 = load i8*, i8** %2638, align 8
  %2684 = load i64, i64* %2619, align 8
  %2685 = add i64 %2684, 1
  store i64 %2685, i64* %2619, align 8
  %2686 = getelementptr inbounds i8, i8* %2683, i64 %2684
  store i8 %2682, i8* %2686, align 1
  %2687 = and i64 %2680, 1095216660480
  %2688 = icmp eq i64 %2687, 1095216660480
  br i1 %2688, label %2689, label %2694

2689:                                             ; preds = %2679
  %2690 = load i8*, i8** %2638, align 8
  %2691 = load i64, i64* %2619, align 8
  %2692 = add i64 %2691, 1
  store i64 %2692, i64* %2619, align 8
  %2693 = getelementptr inbounds i8, i8* %2690, i64 %2691
  store i8 0, i8* %2693, align 1
  br label %2694

2694:                                             ; preds = %2689, %2679
  %2695 = load i64, i64* %2614, align 8
  %2696 = lshr i64 %2695, 24
  %2697 = trunc i64 %2696 to i8
  %2698 = load i8*, i8** %2638, align 8
  %2699 = load i64, i64* %2619, align 8
  %2700 = add i64 %2699, 1
  store i64 %2700, i64* %2619, align 8
  %2701 = getelementptr inbounds i8, i8* %2698, i64 %2699
  store i8 %2697, i8* %2701, align 1
  %2702 = and i64 %2695, 4278190080
  %2703 = icmp eq i64 %2702, 4278190080
  br i1 %2703, label %2704, label %2709

2704:                                             ; preds = %2694
  %2705 = load i8*, i8** %2638, align 8
  %2706 = load i64, i64* %2619, align 8
  %2707 = add i64 %2706, 1
  store i64 %2707, i64* %2619, align 8
  %2708 = getelementptr inbounds i8, i8* %2705, i64 %2706
  store i8 0, i8* %2708, align 1
  br label %2709

2709:                                             ; preds = %2704, %2694
  %2710 = load i64, i64* %2614, align 8
  %2711 = lshr i64 %2710, 16
  %2712 = trunc i64 %2711 to i8
  %2713 = load i8*, i8** %2638, align 8
  %2714 = load i64, i64* %2619, align 8
  %2715 = add i64 %2714, 1
  store i64 %2715, i64* %2619, align 8
  %2716 = getelementptr inbounds i8, i8* %2713, i64 %2714
  store i8 %2712, i8* %2716, align 1
  %2717 = and i64 %2710, 16711680
  %2718 = icmp eq i64 %2717, 16711680
  br i1 %2718, label %2719, label %2763

2719:                                             ; preds = %2709
  %2720 = load i8*, i8** %2638, align 8
  %2721 = load i64, i64* %2619, align 8
  %2722 = add i64 %2721, 1
  store i64 %2722, i64* %2619, align 8
  %2723 = getelementptr inbounds i8, i8* %2720, i64 %2721
  store i8 0, i8* %2723, align 1
  br label %2763

2724:                                             ; preds = %2626
  %2725 = getelementptr inbounds i8, i8* %2639, i64 %2628
  store i8 %2637, i8* %2725, align 1
  %2726 = load i64, i64* %2614, align 8
  %2727 = lshr i64 %2726, 48
  %2728 = trunc i64 %2727 to i8
  %2729 = load i8*, i8** %2638, align 8
  %2730 = load i64, i64* %2619, align 8
  %2731 = add i64 %2730, 1
  %2732 = getelementptr inbounds i8, i8* %2729, i64 %2731
  store i8 %2728, i8* %2732, align 1
  %2733 = load i64, i64* %2614, align 8
  %2734 = lshr i64 %2733, 40
  %2735 = trunc i64 %2734 to i8
  %2736 = load i8*, i8** %2638, align 8
  %2737 = load i64, i64* %2619, align 8
  %2738 = add i64 %2737, 2
  %2739 = getelementptr inbounds i8, i8* %2736, i64 %2738
  store i8 %2735, i8* %2739, align 1
  %2740 = load i64, i64* %2614, align 8
  %2741 = lshr i64 %2740, 32
  %2742 = trunc i64 %2741 to i8
  %2743 = load i8*, i8** %2638, align 8
  %2744 = load i64, i64* %2619, align 8
  %2745 = add i64 %2744, 3
  %2746 = getelementptr inbounds i8, i8* %2743, i64 %2745
  store i8 %2742, i8* %2746, align 1
  %2747 = load i64, i64* %2614, align 8
  %2748 = lshr i64 %2747, 24
  %2749 = trunc i64 %2748 to i8
  %2750 = load i8*, i8** %2638, align 8
  %2751 = load i64, i64* %2619, align 8
  %2752 = add i64 %2751, 4
  %2753 = getelementptr inbounds i8, i8* %2750, i64 %2752
  store i8 %2749, i8* %2753, align 1
  %2754 = load i64, i64* %2614, align 8
  %2755 = lshr i64 %2754, 16
  %2756 = trunc i64 %2755 to i8
  %2757 = load i8*, i8** %2638, align 8
  %2758 = load i64, i64* %2619, align 8
  %2759 = add i64 %2758, 5
  %2760 = getelementptr inbounds i8, i8* %2757, i64 %2759
  store i8 %2756, i8* %2760, align 1
  %2761 = load i64, i64* %2619, align 8
  %2762 = add i64 %2761, 6
  store i64 %2762, i64* %2619, align 8
  br label %2763

2763:                                             ; preds = %2724, %2719, %2709
  %2764 = load i64, i64* %2614, align 8
  %2765 = shl i64 %2764, 48
  store i64 %2765, i64* %2614, align 8
  %2766 = load i32, i32* %2609, align 8
  %2767 = add nsw i32 %2766, 48
  store i32 %2767, i32* %2609, align 8
  br label %2768

2768:                                             ; preds = %2763, %2605, %2603
  %2769 = icmp eq i32 %2595, 0
  br i1 %2769, label %2935, label %2770

2770:                                             ; preds = %2768
  %2771 = load i32, i32* %2590, align 8
  %2772 = shl nsw i32 -1, %2595
  %2773 = xor i32 %2772, -1
  %2774 = and i32 %2771, %2773
  %2775 = sext i32 %2774 to i64
  %2776 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2, i32 7
  %2777 = load i32, i32* %2776, align 8
  %2778 = sub nsw i32 %2777, %2595
  store i32 %2778, i32* %2776, align 8
  %2779 = zext i32 %2778 to i64
  %2780 = shl i64 %2775, %2779
  %2781 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2, i32 6
  %2782 = load i64, i64* %2781, align 8
  %2783 = or i64 %2780, %2782
  store i64 %2783, i64* %2781, align 8
  %2784 = icmp slt i32 %2778, 17
  br i1 %2784, label %2785, label %2935

2785:                                             ; preds = %2770
  %2786 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2, i32 5
  %2787 = load i64, i64* %2786, align 8
  %2788 = add i64 %2787, 12
  %2789 = icmp ugt i64 %2788, 16384
  br i1 %2789, label %2790, label %2793, !prof !23

2790:                                             ; preds = %2785
  call fastcc void @_ZN3jxl4jpeg12_GLOBAL__N_110SwapBufferEPNS0_13JpegBitWriterE(%"struct.jxl::jpeg::JpegBitWriter"* %130) #10
  %2791 = load i64, i64* %2786, align 8
  %2792 = load i64, i64* %2781, align 8
  br label %2793

2793:                                             ; preds = %2790, %2785
  %2794 = phi i64 [ %2783, %2785 ], [ %2792, %2790 ]
  %2795 = phi i64 [ %2787, %2785 ], [ %2791, %2790 ]
  %2796 = or i64 %2794, 65535
  %2797 = xor i64 %2796, -65536
  %2798 = add i64 %2797, -72340172838076673
  %2799 = and i64 %2797, -9187201950435770368
  %2800 = xor i64 %2799, -9187201950435770368
  %2801 = and i64 %2800, %2798
  %2802 = icmp eq i64 %2801, 0
  %2803 = lshr i64 %2794, 56
  %2804 = trunc i64 %2803 to i8
  %2805 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2, i32 4
  %2806 = load i8*, i8** %2805, align 8
  br i1 %2802, label %2891, label %2807

2807:                                             ; preds = %2793
  %2808 = add i64 %2795, 1
  store i64 %2808, i64* %2786, align 8
  %2809 = getelementptr inbounds i8, i8* %2806, i64 %2795
  store i8 %2804, i8* %2809, align 1
  %2810 = icmp eq i64 %2803, 255
  br i1 %2810, label %2811, label %2816

2811:                                             ; preds = %2807
  %2812 = load i8*, i8** %2805, align 8
  %2813 = load i64, i64* %2786, align 8
  %2814 = add i64 %2813, 1
  store i64 %2814, i64* %2786, align 8
  %2815 = getelementptr inbounds i8, i8* %2812, i64 %2813
  store i8 0, i8* %2815, align 1
  br label %2816

2816:                                             ; preds = %2811, %2807
  %2817 = load i64, i64* %2781, align 8
  %2818 = lshr i64 %2817, 48
  %2819 = trunc i64 %2818 to i8
  %2820 = load i8*, i8** %2805, align 8
  %2821 = load i64, i64* %2786, align 8
  %2822 = add i64 %2821, 1
  store i64 %2822, i64* %2786, align 8
  %2823 = getelementptr inbounds i8, i8* %2820, i64 %2821
  store i8 %2819, i8* %2823, align 1
  %2824 = and i64 %2817, 71776119061217280
  %2825 = icmp eq i64 %2824, 71776119061217280
  br i1 %2825, label %2826, label %2831

2826:                                             ; preds = %2816
  %2827 = load i8*, i8** %2805, align 8
  %2828 = load i64, i64* %2786, align 8
  %2829 = add i64 %2828, 1
  store i64 %2829, i64* %2786, align 8
  %2830 = getelementptr inbounds i8, i8* %2827, i64 %2828
  store i8 0, i8* %2830, align 1
  br label %2831

2831:                                             ; preds = %2826, %2816
  %2832 = load i64, i64* %2781, align 8
  %2833 = lshr i64 %2832, 40
  %2834 = trunc i64 %2833 to i8
  %2835 = load i8*, i8** %2805, align 8
  %2836 = load i64, i64* %2786, align 8
  %2837 = add i64 %2836, 1
  store i64 %2837, i64* %2786, align 8
  %2838 = getelementptr inbounds i8, i8* %2835, i64 %2836
  store i8 %2834, i8* %2838, align 1
  %2839 = and i64 %2832, 280375465082880
  %2840 = icmp eq i64 %2839, 280375465082880
  br i1 %2840, label %2841, label %2846

2841:                                             ; preds = %2831
  %2842 = load i8*, i8** %2805, align 8
  %2843 = load i64, i64* %2786, align 8
  %2844 = add i64 %2843, 1
  store i64 %2844, i64* %2786, align 8
  %2845 = getelementptr inbounds i8, i8* %2842, i64 %2843
  store i8 0, i8* %2845, align 1
  br label %2846

2846:                                             ; preds = %2841, %2831
  %2847 = load i64, i64* %2781, align 8
  %2848 = lshr i64 %2847, 32
  %2849 = trunc i64 %2848 to i8
  %2850 = load i8*, i8** %2805, align 8
  %2851 = load i64, i64* %2786, align 8
  %2852 = add i64 %2851, 1
  store i64 %2852, i64* %2786, align 8
  %2853 = getelementptr inbounds i8, i8* %2850, i64 %2851
  store i8 %2849, i8* %2853, align 1
  %2854 = and i64 %2847, 1095216660480
  %2855 = icmp eq i64 %2854, 1095216660480
  br i1 %2855, label %2856, label %2861

2856:                                             ; preds = %2846
  %2857 = load i8*, i8** %2805, align 8
  %2858 = load i64, i64* %2786, align 8
  %2859 = add i64 %2858, 1
  store i64 %2859, i64* %2786, align 8
  %2860 = getelementptr inbounds i8, i8* %2857, i64 %2858
  store i8 0, i8* %2860, align 1
  br label %2861

2861:                                             ; preds = %2856, %2846
  %2862 = load i64, i64* %2781, align 8
  %2863 = lshr i64 %2862, 24
  %2864 = trunc i64 %2863 to i8
  %2865 = load i8*, i8** %2805, align 8
  %2866 = load i64, i64* %2786, align 8
  %2867 = add i64 %2866, 1
  store i64 %2867, i64* %2786, align 8
  %2868 = getelementptr inbounds i8, i8* %2865, i64 %2866
  store i8 %2864, i8* %2868, align 1
  %2869 = and i64 %2862, 4278190080
  %2870 = icmp eq i64 %2869, 4278190080
  br i1 %2870, label %2871, label %2876

2871:                                             ; preds = %2861
  %2872 = load i8*, i8** %2805, align 8
  %2873 = load i64, i64* %2786, align 8
  %2874 = add i64 %2873, 1
  store i64 %2874, i64* %2786, align 8
  %2875 = getelementptr inbounds i8, i8* %2872, i64 %2873
  store i8 0, i8* %2875, align 1
  br label %2876

2876:                                             ; preds = %2871, %2861
  %2877 = load i64, i64* %2781, align 8
  %2878 = lshr i64 %2877, 16
  %2879 = trunc i64 %2878 to i8
  %2880 = load i8*, i8** %2805, align 8
  %2881 = load i64, i64* %2786, align 8
  %2882 = add i64 %2881, 1
  store i64 %2882, i64* %2786, align 8
  %2883 = getelementptr inbounds i8, i8* %2880, i64 %2881
  store i8 %2879, i8* %2883, align 1
  %2884 = and i64 %2877, 16711680
  %2885 = icmp eq i64 %2884, 16711680
  br i1 %2885, label %2886, label %2930

2886:                                             ; preds = %2876
  %2887 = load i8*, i8** %2805, align 8
  %2888 = load i64, i64* %2786, align 8
  %2889 = add i64 %2888, 1
  store i64 %2889, i64* %2786, align 8
  %2890 = getelementptr inbounds i8, i8* %2887, i64 %2888
  store i8 0, i8* %2890, align 1
  br label %2930

2891:                                             ; preds = %2793
  %2892 = getelementptr inbounds i8, i8* %2806, i64 %2795
  store i8 %2804, i8* %2892, align 1
  %2893 = load i64, i64* %2781, align 8
  %2894 = lshr i64 %2893, 48
  %2895 = trunc i64 %2894 to i8
  %2896 = load i8*, i8** %2805, align 8
  %2897 = load i64, i64* %2786, align 8
  %2898 = add i64 %2897, 1
  %2899 = getelementptr inbounds i8, i8* %2896, i64 %2898
  store i8 %2895, i8* %2899, align 1
  %2900 = load i64, i64* %2781, align 8
  %2901 = lshr i64 %2900, 40
  %2902 = trunc i64 %2901 to i8
  %2903 = load i8*, i8** %2805, align 8
  %2904 = load i64, i64* %2786, align 8
  %2905 = add i64 %2904, 2
  %2906 = getelementptr inbounds i8, i8* %2903, i64 %2905
  store i8 %2902, i8* %2906, align 1
  %2907 = load i64, i64* %2781, align 8
  %2908 = lshr i64 %2907, 32
  %2909 = trunc i64 %2908 to i8
  %2910 = load i8*, i8** %2805, align 8
  %2911 = load i64, i64* %2786, align 8
  %2912 = add i64 %2911, 3
  %2913 = getelementptr inbounds i8, i8* %2910, i64 %2912
  store i8 %2909, i8* %2913, align 1
  %2914 = load i64, i64* %2781, align 8
  %2915 = lshr i64 %2914, 24
  %2916 = trunc i64 %2915 to i8
  %2917 = load i8*, i8** %2805, align 8
  %2918 = load i64, i64* %2786, align 8
  %2919 = add i64 %2918, 4
  %2920 = getelementptr inbounds i8, i8* %2917, i64 %2919
  store i8 %2916, i8* %2920, align 1
  %2921 = load i64, i64* %2781, align 8
  %2922 = lshr i64 %2921, 16
  %2923 = trunc i64 %2922 to i8
  %2924 = load i8*, i8** %2805, align 8
  %2925 = load i64, i64* %2786, align 8
  %2926 = add i64 %2925, 5
  %2927 = getelementptr inbounds i8, i8* %2924, i64 %2926
  store i8 %2923, i8* %2927, align 1
  %2928 = load i64, i64* %2786, align 8
  %2929 = add i64 %2928, 6
  store i64 %2929, i64* %2786, align 8
  br label %2930

2930:                                             ; preds = %2891, %2886, %2876
  %2931 = load i64, i64* %2781, align 8
  %2932 = shl i64 %2931, 48
  store i64 %2932, i64* %2781, align 8
  %2933 = load i32, i32* %2776, align 8
  %2934 = add nsw i32 %2933, 48
  store i32 %2934, i32* %2776, align 8
  br label %2935

2935:                                             ; preds = %2930, %2770, %2768
  store i32 0, i32* %2590, align 8
  br label %2936

2936:                                             ; preds = %2935, %2589
  %2937 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 8, i32 2
  %2938 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 8, i32 2, i32 0, i32 1
  %2939 = bitcast i32** %2938 to i64*
  %2940 = load i64, i64* %2939, align 8
  %2941 = bitcast %"class.std::__1::vector.86"* %2937 to i64*
  %2942 = load i64, i64* %2941, align 8
  %2943 = icmp eq i64 %2940, %2942
  br i1 %2943, label %3125, label %2944

2944:                                             ; preds = %2936
  %2945 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2, i32 7
  %2946 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2, i32 6
  %2947 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2, i32 5
  %2948 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2, i32 4
  %2949 = load i32, i32* %2945, align 8
  %2950 = load i64, i64* %2946, align 8
  br label %2951

2951:                                             ; preds = %3116, %2944
  %2952 = phi i64 [ %2942, %2944 ], [ %3117, %3116 ]
  %2953 = phi i64 [ %2940, %2944 ], [ %3118, %3116 ]
  %2954 = phi i64 [ %2950, %2944 ], [ %3119, %3116 ]
  %2955 = phi i32 [ %2949, %2944 ], [ %3120, %3116 ]
  %2956 = phi i64 [ 0, %2944 ], [ %3121, %3116 ]
  %2957 = inttoptr i64 %2952 to i32*
  %2958 = getelementptr inbounds i32, i32* %2957, i64 %2956
  %2959 = load i32, i32* %2958, align 4
  %2960 = sext i32 %2959 to i64
  %2961 = add nsw i32 %2955, -1
  store i32 %2961, i32* %2945, align 8
  %2962 = zext i32 %2961 to i64
  %2963 = shl i64 %2960, %2962
  %2964 = or i64 %2963, %2954
  store i64 %2964, i64* %2946, align 8
  %2965 = icmp slt i32 %2955, 18
  br i1 %2965, label %2966, label %3116

2966:                                             ; preds = %2951
  %2967 = load i64, i64* %2947, align 8
  %2968 = add i64 %2967, 12
  %2969 = icmp ugt i64 %2968, 16384
  br i1 %2969, label %2970, label %2973, !prof !23

2970:                                             ; preds = %2966
  call fastcc void @_ZN3jxl4jpeg12_GLOBAL__N_110SwapBufferEPNS0_13JpegBitWriterE(%"struct.jxl::jpeg::JpegBitWriter"* %130) #10
  %2971 = load i64, i64* %2947, align 8
  %2972 = load i64, i64* %2946, align 8
  br label %2973

2973:                                             ; preds = %2970, %2966
  %2974 = phi i64 [ %2964, %2966 ], [ %2972, %2970 ]
  %2975 = phi i64 [ %2967, %2966 ], [ %2971, %2970 ]
  %2976 = or i64 %2974, 65535
  %2977 = xor i64 %2976, -65536
  %2978 = add i64 %2977, -72340172838076673
  %2979 = and i64 %2977, -9187201950435770368
  %2980 = xor i64 %2979, -9187201950435770368
  %2981 = and i64 %2980, %2978
  %2982 = icmp eq i64 %2981, 0
  %2983 = lshr i64 %2974, 56
  %2984 = trunc i64 %2983 to i8
  %2985 = load i8*, i8** %2948, align 8
  br i1 %2982, label %3070, label %2986

2986:                                             ; preds = %2973
  %2987 = add i64 %2975, 1
  store i64 %2987, i64* %2947, align 8
  %2988 = getelementptr inbounds i8, i8* %2985, i64 %2975
  store i8 %2984, i8* %2988, align 1
  %2989 = icmp eq i64 %2983, 255
  br i1 %2989, label %2990, label %2995

2990:                                             ; preds = %2986
  %2991 = load i8*, i8** %2948, align 8
  %2992 = load i64, i64* %2947, align 8
  %2993 = add i64 %2992, 1
  store i64 %2993, i64* %2947, align 8
  %2994 = getelementptr inbounds i8, i8* %2991, i64 %2992
  store i8 0, i8* %2994, align 1
  br label %2995

2995:                                             ; preds = %2990, %2986
  %2996 = load i64, i64* %2946, align 8
  %2997 = lshr i64 %2996, 48
  %2998 = trunc i64 %2997 to i8
  %2999 = load i8*, i8** %2948, align 8
  %3000 = load i64, i64* %2947, align 8
  %3001 = add i64 %3000, 1
  store i64 %3001, i64* %2947, align 8
  %3002 = getelementptr inbounds i8, i8* %2999, i64 %3000
  store i8 %2998, i8* %3002, align 1
  %3003 = and i64 %2996, 71776119061217280
  %3004 = icmp eq i64 %3003, 71776119061217280
  br i1 %3004, label %3005, label %3010

3005:                                             ; preds = %2995
  %3006 = load i8*, i8** %2948, align 8
  %3007 = load i64, i64* %2947, align 8
  %3008 = add i64 %3007, 1
  store i64 %3008, i64* %2947, align 8
  %3009 = getelementptr inbounds i8, i8* %3006, i64 %3007
  store i8 0, i8* %3009, align 1
  br label %3010

3010:                                             ; preds = %3005, %2995
  %3011 = load i64, i64* %2946, align 8
  %3012 = lshr i64 %3011, 40
  %3013 = trunc i64 %3012 to i8
  %3014 = load i8*, i8** %2948, align 8
  %3015 = load i64, i64* %2947, align 8
  %3016 = add i64 %3015, 1
  store i64 %3016, i64* %2947, align 8
  %3017 = getelementptr inbounds i8, i8* %3014, i64 %3015
  store i8 %3013, i8* %3017, align 1
  %3018 = and i64 %3011, 280375465082880
  %3019 = icmp eq i64 %3018, 280375465082880
  br i1 %3019, label %3020, label %3025

3020:                                             ; preds = %3010
  %3021 = load i8*, i8** %2948, align 8
  %3022 = load i64, i64* %2947, align 8
  %3023 = add i64 %3022, 1
  store i64 %3023, i64* %2947, align 8
  %3024 = getelementptr inbounds i8, i8* %3021, i64 %3022
  store i8 0, i8* %3024, align 1
  br label %3025

3025:                                             ; preds = %3020, %3010
  %3026 = load i64, i64* %2946, align 8
  %3027 = lshr i64 %3026, 32
  %3028 = trunc i64 %3027 to i8
  %3029 = load i8*, i8** %2948, align 8
  %3030 = load i64, i64* %2947, align 8
  %3031 = add i64 %3030, 1
  store i64 %3031, i64* %2947, align 8
  %3032 = getelementptr inbounds i8, i8* %3029, i64 %3030
  store i8 %3028, i8* %3032, align 1
  %3033 = and i64 %3026, 1095216660480
  %3034 = icmp eq i64 %3033, 1095216660480
  br i1 %3034, label %3035, label %3040

3035:                                             ; preds = %3025
  %3036 = load i8*, i8** %2948, align 8
  %3037 = load i64, i64* %2947, align 8
  %3038 = add i64 %3037, 1
  store i64 %3038, i64* %2947, align 8
  %3039 = getelementptr inbounds i8, i8* %3036, i64 %3037
  store i8 0, i8* %3039, align 1
  br label %3040

3040:                                             ; preds = %3035, %3025
  %3041 = load i64, i64* %2946, align 8
  %3042 = lshr i64 %3041, 24
  %3043 = trunc i64 %3042 to i8
  %3044 = load i8*, i8** %2948, align 8
  %3045 = load i64, i64* %2947, align 8
  %3046 = add i64 %3045, 1
  store i64 %3046, i64* %2947, align 8
  %3047 = getelementptr inbounds i8, i8* %3044, i64 %3045
  store i8 %3043, i8* %3047, align 1
  %3048 = and i64 %3041, 4278190080
  %3049 = icmp eq i64 %3048, 4278190080
  br i1 %3049, label %3050, label %3055

3050:                                             ; preds = %3040
  %3051 = load i8*, i8** %2948, align 8
  %3052 = load i64, i64* %2947, align 8
  %3053 = add i64 %3052, 1
  store i64 %3053, i64* %2947, align 8
  %3054 = getelementptr inbounds i8, i8* %3051, i64 %3052
  store i8 0, i8* %3054, align 1
  br label %3055

3055:                                             ; preds = %3050, %3040
  %3056 = load i64, i64* %2946, align 8
  %3057 = lshr i64 %3056, 16
  %3058 = trunc i64 %3057 to i8
  %3059 = load i8*, i8** %2948, align 8
  %3060 = load i64, i64* %2947, align 8
  %3061 = add i64 %3060, 1
  store i64 %3061, i64* %2947, align 8
  %3062 = getelementptr inbounds i8, i8* %3059, i64 %3060
  store i8 %3058, i8* %3062, align 1
  %3063 = and i64 %3056, 16711680
  %3064 = icmp eq i64 %3063, 16711680
  br i1 %3064, label %3065, label %3109

3065:                                             ; preds = %3055
  %3066 = load i8*, i8** %2948, align 8
  %3067 = load i64, i64* %2947, align 8
  %3068 = add i64 %3067, 1
  store i64 %3068, i64* %2947, align 8
  %3069 = getelementptr inbounds i8, i8* %3066, i64 %3067
  store i8 0, i8* %3069, align 1
  br label %3109

3070:                                             ; preds = %2973
  %3071 = getelementptr inbounds i8, i8* %2985, i64 %2975
  store i8 %2984, i8* %3071, align 1
  %3072 = load i64, i64* %2946, align 8
  %3073 = lshr i64 %3072, 48
  %3074 = trunc i64 %3073 to i8
  %3075 = load i8*, i8** %2948, align 8
  %3076 = load i64, i64* %2947, align 8
  %3077 = add i64 %3076, 1
  %3078 = getelementptr inbounds i8, i8* %3075, i64 %3077
  store i8 %3074, i8* %3078, align 1
  %3079 = load i64, i64* %2946, align 8
  %3080 = lshr i64 %3079, 40
  %3081 = trunc i64 %3080 to i8
  %3082 = load i8*, i8** %2948, align 8
  %3083 = load i64, i64* %2947, align 8
  %3084 = add i64 %3083, 2
  %3085 = getelementptr inbounds i8, i8* %3082, i64 %3084
  store i8 %3081, i8* %3085, align 1
  %3086 = load i64, i64* %2946, align 8
  %3087 = lshr i64 %3086, 32
  %3088 = trunc i64 %3087 to i8
  %3089 = load i8*, i8** %2948, align 8
  %3090 = load i64, i64* %2947, align 8
  %3091 = add i64 %3090, 3
  %3092 = getelementptr inbounds i8, i8* %3089, i64 %3091
  store i8 %3088, i8* %3092, align 1
  %3093 = load i64, i64* %2946, align 8
  %3094 = lshr i64 %3093, 24
  %3095 = trunc i64 %3094 to i8
  %3096 = load i8*, i8** %2948, align 8
  %3097 = load i64, i64* %2947, align 8
  %3098 = add i64 %3097, 4
  %3099 = getelementptr inbounds i8, i8* %3096, i64 %3098
  store i8 %3095, i8* %3099, align 1
  %3100 = load i64, i64* %2946, align 8
  %3101 = lshr i64 %3100, 16
  %3102 = trunc i64 %3101 to i8
  %3103 = load i8*, i8** %2948, align 8
  %3104 = load i64, i64* %2947, align 8
  %3105 = add i64 %3104, 5
  %3106 = getelementptr inbounds i8, i8* %3103, i64 %3105
  store i8 %3102, i8* %3106, align 1
  %3107 = load i64, i64* %2947, align 8
  %3108 = add i64 %3107, 6
  store i64 %3108, i64* %2947, align 8
  br label %3109

3109:                                             ; preds = %3070, %3065, %3055
  %3110 = load i64, i64* %2946, align 8
  %3111 = shl i64 %3110, 48
  store i64 %3111, i64* %2946, align 8
  %3112 = load i32, i32* %2945, align 8
  %3113 = add nsw i32 %3112, 48
  store i32 %3113, i32* %2945, align 8
  %3114 = load i64, i64* %2939, align 8
  %3115 = load i64, i64* %2941, align 8
  br label %3116

3116:                                             ; preds = %3109, %2951
  %3117 = phi i64 [ %2952, %2951 ], [ %3115, %3109 ]
  %3118 = phi i64 [ %2953, %2951 ], [ %3114, %3109 ]
  %3119 = phi i64 [ %2964, %2951 ], [ %3111, %3109 ]
  %3120 = phi i32 [ %2961, %2951 ], [ %3113, %3109 ]
  %3121 = add nuw i64 %2956, 1
  %3122 = sub i64 %3118, %3117
  %3123 = ashr exact i64 %3122, 2
  %3124 = icmp ult i64 %3121, %3123
  br i1 %3124, label %2951, label %3125

3125:                                             ; preds = %3116, %2936
  %3126 = phi i64 [ %2940, %2936 ], [ %3117, %3116 ]
  store i64 %3126, i64* %2939, align 8
  %3127 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 11
  %3128 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 12
  %3129 = load i8*, i8** %3128, align 8
  %3130 = call fastcc zeroext i1 @_ZN3jxl4jpeg12_GLOBAL__N_118JumpToByteBoundaryEPNS0_13JpegBitWriterEPPKhS5_(%"struct.jxl::jpeg::JpegBitWriter"* %130, i8** %3127, i8* %3129)
  br i1 %3130, label %3131, label %3211

3131:                                             ; preds = %3125
  %3132 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2, i32 5
  %3133 = load i64, i64* %3132, align 8
  %3134 = icmp eq i64 %3133, 0
  br i1 %3134, label %3204, label %3135

3135:                                             ; preds = %3131
  %3136 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2, i32 3
  %3137 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2, i32 3, i32 1
  store i64 %3133, i64* %3137, align 8
  %3138 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2, i32 2
  %3139 = load %"class.std::__1::deque"*, %"class.std::__1::deque"** %3138, align 8
  %3140 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %3139, i64 0, i32 0, i32 0, i32 2
  %3141 = bitcast %"struct.jxl::jpeg::OutputChunk"*** %3140 to i64*
  %3142 = load i64, i64* %3141, align 8
  %3143 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %3139, i64 0, i32 0, i32 0, i32 1
  %3144 = bitcast %"struct.jxl::jpeg::OutputChunk"*** %3143 to i64*
  %3145 = load i64, i64* %3144, align 8
  %3146 = sub i64 %3142, %3145
  %3147 = ashr exact i64 %3146, 3
  %3148 = icmp eq i64 %3146, 0
  %3149 = mul i64 %3147, 170
  %3150 = add i64 %3149, -1
  %3151 = select i1 %3148, i64 0, i64 %3150
  %3152 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %3139, i64 0, i32 0, i32 1
  %3153 = load i64, i64* %3152, align 8
  %3154 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %3139, i64 0, i32 0, i32 2, i32 0, i32 0
  %3155 = load i64, i64* %3154, align 8
  %3156 = add i64 %3155, %3153
  %3157 = icmp eq i64 %3151, %3156
  %3158 = inttoptr i64 %3145 to %"struct.jxl::jpeg::OutputChunk"**
  %3159 = inttoptr i64 %3142 to %"struct.jxl::jpeg::OutputChunk"**
  br i1 %3157, label %3160, label %3166

3160:                                             ; preds = %3135
  call void @_ZNSt3__15dequeIN3jxl4jpeg11OutputChunkENS_9allocatorIS3_EEE19__add_back_capacityEv(%"class.std::__1::deque"* %3139) #10
  %3161 = load i64, i64* %3154, align 8
  %3162 = load i64, i64* %3152, align 8
  %3163 = load %"struct.jxl::jpeg::OutputChunk"**, %"struct.jxl::jpeg::OutputChunk"*** %3143, align 8
  %3164 = load %"struct.jxl::jpeg::OutputChunk"**, %"struct.jxl::jpeg::OutputChunk"*** %3140, align 8
  %3165 = add i64 %3162, %3161
  br label %3166

3166:                                             ; preds = %3160, %3135
  %3167 = phi i64 [ %3165, %3160 ], [ %3156, %3135 ]
  %3168 = phi %"struct.jxl::jpeg::OutputChunk"** [ %3164, %3160 ], [ %3159, %3135 ]
  %3169 = phi %"struct.jxl::jpeg::OutputChunk"** [ %3163, %3160 ], [ %3158, %3135 ]
  %3170 = icmp eq %"struct.jxl::jpeg::OutputChunk"** %3168, %3169
  br i1 %3170, label %3177, label %3171

3171:                                             ; preds = %3166
  %3172 = udiv i64 %3167, 170
  %3173 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %3169, i64 %3172
  %3174 = load %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %3173, align 8
  %3175 = urem i64 %3167, 170
  %3176 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk", %"struct.jxl::jpeg::OutputChunk"* %3174, i64 %3175
  br label %3177

3177:                                             ; preds = %3166, %3171
  %3178 = phi %"struct.jxl::jpeg::OutputChunk"* [ %3176, %3171 ], [ null, %3166 ]
  %3179 = bitcast %"struct.jxl::jpeg::OutputChunk"* %3178 to i8*
  %3180 = bitcast %"struct.jxl::jpeg::OutputChunk"* %3136 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3179, i8* align 8 %3180, i64 16, i1 false) #10
  %3181 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk", %"struct.jxl::jpeg::OutputChunk"* %3178, i64 0, i32 2
  %3182 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2, i32 3, i32 2
  %3183 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %3182, i64 0, i32 0, i32 0, i32 0
  %3184 = bitcast %"class.std::__1::unique_ptr"* %3182 to i64*
  %3185 = load i64, i64* %3184, align 8
  store %"class.std::__1::vector.0"* null, %"class.std::__1::vector.0"** %3183, align 8
  %3186 = bitcast %"class.std::__1::unique_ptr"* %3181 to i64*
  store i64 %3185, i64* %3186, align 8
  %3187 = load i64, i64* %3154, align 8
  %3188 = add i64 %3187, 1
  store i64 %3188, i64* %3154, align 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %3180, i8 0, i64 16, i1 false) #10
  %3189 = load %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"** %3183, align 8
  store i64 0, i64* %3184, align 8
  %3190 = icmp eq %"class.std::__1::vector.0"* %3189, null
  br i1 %3190, label %3201, label %3191

3191:                                             ; preds = %3177
  %3192 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %3189, i64 0, i32 0, i32 0
  %3193 = load i8*, i8** %3192, align 8
  %3194 = icmp eq i8* %3193, null
  br i1 %3194, label %3199, label %3195

3195:                                             ; preds = %3191
  %3196 = ptrtoint i8* %3193 to i64
  %3197 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %3189, i64 0, i32 0, i32 1
  %3198 = bitcast i8** %3197 to i64*
  store i64 %3196, i64* %3198, align 8
  call void @_ZdlPv(i8* nonnull %3193) #11
  br label %3199

3199:                                             ; preds = %3195, %3191
  %3200 = bitcast %"class.std::__1::vector.0"* %3189 to i8*
  call void @_ZdlPv(i8* %3200) #11
  br label %3201

3201:                                             ; preds = %3177, %3199
  %3202 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2, i32 4
  %3203 = bitcast i8** %3202 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %3203, i8 0, i64 16, i1 false) #10
  br label %3204

3204:                                             ; preds = %3131, %3201
  store i32 0, i32* %17, align 8
  %3205 = load i32, i32* %5, align 4
  %3206 = add nsw i32 %3205, 1
  store i32 %3206, i32* %5, align 4
  %3207 = getelementptr inbounds %"struct.jxl::jpeg::JpegBitWriter", %"struct.jxl::jpeg::JpegBitWriter"* %130, i64 0, i32 0
  %3208 = load i8, i8* %3207, align 8, !range !2
  %3209 = icmp eq i8 %3208, 0
  %3210 = select i1 %3209, i32 2, i32 3
  br label %3211

3211:                                             ; preds = %705, %1522, %1876, %3204, %3125, %2584
  %3212 = phi i32 [ %2588, %2584 ], [ 2, %3125 ], [ %3210, %3204 ], [ 2, %1876 ], [ 2, %1522 ], [ 2, %705 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %136) #10
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %135) #10
  br label %3213

3213:                                             ; preds = %20, %3211
  %3214 = phi i32 [ %3212, %3211 ], [ 2, %20 ]
  ret i32 %3214
}

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc i32 @_ZN3jxl4jpeg12_GLOBAL__N_112DoEncodeScanILi1EEENS1_19SerializationStatusERKNS0_8JPEGDataEPNS0_18SerializationStateE(%"struct.jxl::jpeg::JPEGData"* dereferenceable(296), %"struct.jxl::jpeg::SerializationState"*) unnamed_addr #8 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 8
  %6 = load i32, i32* %5, align 4
  %7 = sext i32 %6 to i64
  %8 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 10, i32 0, i32 0
  %9 = load %"struct.jxl::jpeg::JPEGScanInfo"*, %"struct.jxl::jpeg::JPEGScanInfo"** %8, align 8
  %10 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %9, i64 %7
  %11 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 13
  %12 = load i8, i8* %11, align 8, !range !2
  %13 = icmp eq i8 %12, 0
  %14 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 3
  %15 = load i32, i32* %14, align 8
  %16 = select i1 %13, i32 0, i32 %15
  %17 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 0
  %18 = load i32, i32* %17, align 8
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %129

20:                                               ; preds = %2
  %21 = tail call fastcc zeroext i1 @_ZN3jxl4jpeg12_GLOBAL__N_19EncodeSOSERKNS0_8JPEGDataERKNS0_12JPEGScanInfoEPNS0_18SerializationStateE(%"struct.jxl::jpeg::JPEGData"* dereferenceable(296) %0, %"struct.jxl::jpeg::JPEGScanInfo"* dereferenceable(120) %10, %"struct.jxl::jpeg::SerializationState"* %1)
  br i1 %21, label %22, label %2015

22:                                               ; preds = %20
  %23 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 1
  %24 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2, i32 2
  store %"class.std::__1::deque"* %23, %"class.std::__1::deque"** %24, align 8
  %25 = tail call i8* @_Znwm(i64 24) #11
  %26 = tail call i8* @_Znwm(i64 16384) #11
  %27 = getelementptr inbounds i8, i8* %25, i64 8
  %28 = bitcast i8* %25 to i8**
  store i8* %26, i8** %28, align 8
  %29 = getelementptr inbounds i8, i8* %26, i64 16384
  %30 = getelementptr inbounds i8, i8* %25, i64 16
  %31 = bitcast i8* %30 to i8**
  store i8* %29, i8** %31, align 8
  %32 = bitcast i8* %27 to i64*
  %33 = ptrtoint i8* %26 to i64
  %34 = sub i64 16384, %33
  %35 = getelementptr i8, i8* %26, i64 %34
  %36 = ptrtoint i8* %35 to i64
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %26, i8 0, i64 %36, i1 false) #10
  %37 = ptrtoint i8* %29 to i64
  store i64 %37, i64* %32, align 8
  %38 = ptrtoint i8* %25 to i64
  %39 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2, i32 3
  %40 = bitcast %"struct.jxl::jpeg::OutputChunk"* %39 to i64*
  store i64 %33, i64* %40, align 8
  %41 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2, i32 3, i32 1
  store i64 16384, i64* %41, align 8
  %42 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2, i32 3, i32 2
  %43 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %42, i64 0, i32 0, i32 0, i32 0
  %44 = load %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"** %43, align 8
  %45 = bitcast %"class.std::__1::unique_ptr"* %42 to i64*
  store i64 %38, i64* %45, align 8
  %46 = icmp eq %"class.std::__1::vector.0"* %44, null
  br i1 %46, label %47, label %49

47:                                               ; preds = %22
  %48 = bitcast i8* %25 to i64*
  br label %62

49:                                               ; preds = %22
  %50 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %44, i64 0, i32 0, i32 0
  %51 = load i8*, i8** %50, align 8
  %52 = icmp eq i8* %51, null
  br i1 %52, label %57, label %53

53:                                               ; preds = %49
  %54 = ptrtoint i8* %51 to i64
  %55 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %44, i64 0, i32 0, i32 1
  %56 = bitcast i8** %55 to i64*
  store i64 %54, i64* %56, align 8
  tail call void @_ZdlPv(i8* nonnull %51) #11
  br label %57

57:                                               ; preds = %53, %49
  %58 = bitcast %"class.std::__1::vector.0"* %44 to i8*
  tail call void @_ZdlPv(i8* %58) #11
  %59 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2, i32 3, i32 2, i32 0, i32 0, i32 0
  %60 = bitcast %"class.std::__1::vector.0"** %59 to i64**
  %61 = load i64*, i64** %60, align 8
  br label %62

62:                                               ; preds = %47, %57
  %63 = phi i64* [ %61, %57 ], [ %48, %47 ]
  %64 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2, i32 5
  %65 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2, i32 7
  %66 = bitcast i64* %64 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %66, i8 0, i64 16, i1 false) #10
  store i32 64, i32* %65, align 8
  %67 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2, i32 0
  store i8 1, i8* %67, align 8
  %68 = load i64, i64* %63, align 8
  %69 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2, i32 4
  %70 = bitcast i8** %69 to i64*
  store i64 %68, i64* %70, align 8
  %71 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 8, i32 0
  store i32 0, i32* %71, align 8
  %72 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 8, i32 1
  store %"struct.jxl::jpeg::HuffmanCodeTable"* null, %"struct.jxl::jpeg::HuffmanCodeTable"** %72, align 8
  %73 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 8, i32 2
  %74 = bitcast %"class.std::__1::vector.86"* %73 to i64*
  %75 = load i64, i64* %74, align 8
  %76 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 8, i32 2, i32 0, i32 1
  %77 = bitcast i32** %76 to i64*
  store i64 %75, i64* %77, align 8
  %78 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 8, i32 2, i32 0, i32 2, i32 0, i32 0
  %79 = bitcast i32** %78 to i64*
  %80 = load i64, i64* %79, align 8
  %81 = sub i64 %80, %75
  %82 = ashr exact i64 %81, 2
  %83 = icmp ult i64 %82, 65536
  br i1 %83, label %84, label %92

84:                                               ; preds = %62
  %85 = tail call i8* @_Znwm(i64 262144) #11
  %86 = ptrtoint i8* %85 to i64
  %87 = getelementptr inbounds i8, i8* %85, i64 262144
  %88 = ptrtoint i8* %87 to i64
  store i64 %86, i64* %74, align 8
  store i64 %86, i64* %77, align 8
  store i64 %88, i64* %79, align 8
  %89 = icmp eq i64 %75, 0
  br i1 %89, label %92, label %90

90:                                               ; preds = %84
  %91 = inttoptr i64 %75 to i8*
  tail call void @_ZdlPv(i8* %91) #11
  br label %92

92:                                               ; preds = %62, %84, %90
  %93 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 4
  store i32 %16, i32* %93, align 8
  %94 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 5
  store i32 0, i32* %94, align 4
  %95 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 6
  store i32 0, i32* %95, align 8
  %96 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 9
  store i64 0, i64* %96, align 8
  %97 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %9, i64 %7, i32 8
  %98 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %9, i64 %7, i32 8, i32 0, i32 1
  %99 = bitcast %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"** %98 to i64*
  %100 = load i64, i64* %99, align 8
  %101 = bitcast %"class.std::__1::vector.55"* %97 to i64*
  %102 = load i64, i64* %101, align 8
  %103 = icmp eq i64 %100, %102
  br i1 %103, label %108, label %104

104:                                              ; preds = %92
  %105 = inttoptr i64 %102 to %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*
  %106 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo", %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* %105, i64 0, i32 0
  %107 = load i32, i32* %106, align 4
  br label %108

108:                                              ; preds = %92, %104
  %109 = phi i32 [ %107, %104 ], [ -1, %92 ]
  %110 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 10
  store i32 %109, i32* %110, align 8
  %111 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 12
  store i64 0, i64* %111, align 8
  %112 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %9, i64 %7, i32 7
  %113 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %9, i64 %7, i32 7, i32 0, i32 1
  %114 = bitcast i32** %113 to i64*
  %115 = load i64, i64* %114, align 8
  %116 = bitcast %"class.std::__1::vector.48"* %112 to i64*
  %117 = load i64, i64* %116, align 8
  %118 = icmp eq i64 %115, %117
  br i1 %118, label %123, label %119

119:                                              ; preds = %108
  store i64 1, i64* %111, align 8
  %120 = getelementptr inbounds %"class.std::__1::vector.48", %"class.std::__1::vector.48"* %112, i64 0, i32 0, i32 0
  %121 = load i32*, i32** %120, align 8
  %122 = load i32, i32* %121, align 4
  br label %123

123:                                              ; preds = %108, %119
  %124 = phi i32 [ %122, %119 ], [ -1, %108 ]
  %125 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 13
  store i32 %124, i32* %125, align 8
  %126 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 1
  store i32 0, i32* %126, align 4
  %127 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 3, i64 0
  %128 = bitcast i16* %127 to i64*
  store i64 0, i64* %128, align 8
  store i32 1, i32* %17, align 8
  br label %129

129:                                              ; preds = %123, %2
  %130 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2
  %131 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 8
  %132 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %9, i64 %7, i32 4
  %133 = load i32, i32* %132, align 8
  %134 = icmp ugt i32 %133, 1
  %135 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %135) #10
  store i32 0, i32* %3, align 4
  %136 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %136) #10
  store i32 0, i32* %4, align 4
  call void @_ZNK3jxl4jpeg8JPEGData16CalculateMcuSizeERKNS0_12JPEGScanInfoEPiS5_(%"struct.jxl::jpeg::JPEGData"* %0, %"struct.jxl::jpeg::JPEGScanInfo"* dereferenceable(120) %10, i32* nonnull %3, i32* nonnull %4) #10
  %137 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 14
  %138 = load i8, i8* %137, align 1, !range !2
  %139 = icmp ne i8 %138, 0
  %140 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %9, i64 %7, i32 3
  %141 = load i32, i32* %140, align 4
  %142 = select i1 %139, i32 %141, i32 0
  %143 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %10, i64 0, i32 0
  %144 = load i32, i32* %143, align 8
  %145 = select i1 %139, i32 %144, i32 0
  %146 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %9, i64 %7, i32 1
  %147 = load i32, i32* %146, align 4
  %148 = select i1 %139, i32 %147, i32 63
  %149 = load i32, i32* %4, align 4
  %150 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 1
  %151 = load i32, i32* %150, align 4
  %152 = icmp slt i32 %151, %149
  br i1 %152, label %153, label %1382

153:                                              ; preds = %129
  %154 = icmp sgt i32 %16, 0
  %155 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 4
  %156 = getelementptr inbounds %"struct.jxl::jpeg::DCTCodingState", %"struct.jxl::jpeg::DCTCodingState"* %131, i64 0, i32 0
  %157 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 8, i32 1
  %158 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2, i32 7
  %159 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2, i32 6
  %160 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2, i32 5
  %161 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2, i32 4
  %162 = getelementptr inbounds %"struct.jxl::jpeg::JpegBitWriter", %"struct.jxl::jpeg::JpegBitWriter"* %130, i64 0, i32 0
  %163 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 8, i32 2
  %164 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 8, i32 2, i32 0, i32 1
  %165 = bitcast i32** %164 to i64*
  %166 = bitcast %"class.std::__1::vector.86"* %163 to i64*
  %167 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 11
  %168 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 12
  %169 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 5
  %170 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 3, i64 0
  %171 = bitcast i16* %170 to i64*
  %172 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 9, i32 0, i32 0
  %173 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 9, i32 0, i32 0
  %174 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 10, i32 0, i32 0
  %175 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 6
  %176 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 13
  %177 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 12
  %178 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %9, i64 %7, i32 7
  %179 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %9, i64 %7, i32 7, i32 0, i32 1
  %180 = bitcast i32** %179 to i64*
  %181 = bitcast %"class.std::__1::vector.48"* %178 to i64*
  %182 = getelementptr inbounds %"class.std::__1::vector.48", %"class.std::__1::vector.48"* %178, i64 0, i32 0, i32 0
  %183 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 10
  %184 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %9, i64 %7, i32 8
  %185 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 9
  %186 = getelementptr inbounds %"class.std::__1::vector.55", %"class.std::__1::vector.55"* %184, i64 0, i32 0, i32 0
  %187 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %9, i64 %7, i32 8, i32 0, i32 1
  %188 = bitcast %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"** %187 to i64*
  %189 = bitcast %"class.std::__1::vector.55"* %184 to i64*
  %190 = load i32, i32* %3, align 4
  br label %191

191:                                              ; preds = %153, %1375
  %192 = phi i32 [ %151, %153 ], [ %1378, %1375 ]
  %193 = phi i32 [ %190, %153 ], [ %1377, %1375 ]
  %194 = icmp sgt i32 %193, 0
  br i1 %194, label %195, label %1375

195:                                              ; preds = %191, %1367
  %196 = phi i32 [ %1370, %1367 ], [ 0, %191 ]
  br i1 %154, label %197, label %742

197:                                              ; preds = %195
  %198 = load i32, i32* %155, align 8
  %199 = icmp eq i32 %198, 0
  br i1 %199, label %200, label %742

200:                                              ; preds = %197
  %201 = load i32, i32* %156, align 8
  %202 = icmp sgt i32 %201, 0
  br i1 %202, label %203, label %536

203:                                              ; preds = %200
  %204 = call i32 @llvm.ctlz.i32(i32 %201, i1 true) #10, !range !22
  %205 = xor i32 %204, 31
  %206 = shl nuw nsw i32 %205, 4
  %207 = load %"struct.jxl::jpeg::HuffmanCodeTable"*, %"struct.jxl::jpeg::HuffmanCodeTable"** %157, align 8
  %208 = zext i32 %206 to i64
  %209 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanCodeTable", %"struct.jxl::jpeg::HuffmanCodeTable"* %207, i64 0, i32 0, i64 %208
  %210 = load i32, i32* %209, align 4
  %211 = icmp eq i32 %210, 0
  br i1 %211, label %212, label %213

212:                                              ; preds = %203
  store i8 0, i8* %162, align 8
  br label %372

213:                                              ; preds = %203
  %214 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanCodeTable", %"struct.jxl::jpeg::HuffmanCodeTable"* %207, i64 0, i32 1, i64 %208
  %215 = load i32, i32* %214, align 4
  %216 = sext i32 %215 to i64
  %217 = load i32, i32* %158, align 8
  %218 = sub nsw i32 %217, %210
  store i32 %218, i32* %158, align 8
  %219 = zext i32 %218 to i64
  %220 = shl i64 %216, %219
  %221 = load i64, i64* %159, align 8
  %222 = or i64 %220, %221
  store i64 %222, i64* %159, align 8
  %223 = icmp slt i32 %218, 17
  br i1 %223, label %224, label %372

224:                                              ; preds = %213
  %225 = load i64, i64* %160, align 8
  %226 = add i64 %225, 12
  %227 = icmp ugt i64 %226, 16384
  br i1 %227, label %228, label %231, !prof !23

228:                                              ; preds = %224
  call fastcc void @_ZN3jxl4jpeg12_GLOBAL__N_110SwapBufferEPNS0_13JpegBitWriterE(%"struct.jxl::jpeg::JpegBitWriter"* %130) #10
  %229 = load i64, i64* %160, align 8
  %230 = load i64, i64* %159, align 8
  br label %231

231:                                              ; preds = %228, %224
  %232 = phi i64 [ %222, %224 ], [ %230, %228 ]
  %233 = phi i64 [ %225, %224 ], [ %229, %228 ]
  %234 = or i64 %232, 65535
  %235 = xor i64 %234, -65536
  %236 = add i64 %235, -72340172838076673
  %237 = and i64 %235, -9187201950435770368
  %238 = xor i64 %237, -9187201950435770368
  %239 = and i64 %238, %236
  %240 = icmp eq i64 %239, 0
  %241 = lshr i64 %232, 56
  %242 = trunc i64 %241 to i8
  %243 = load i8*, i8** %161, align 8
  br i1 %240, label %328, label %244

244:                                              ; preds = %231
  %245 = add i64 %233, 1
  store i64 %245, i64* %160, align 8
  %246 = getelementptr inbounds i8, i8* %243, i64 %233
  store i8 %242, i8* %246, align 1
  %247 = icmp eq i64 %241, 255
  br i1 %247, label %248, label %253

248:                                              ; preds = %244
  %249 = load i8*, i8** %161, align 8
  %250 = load i64, i64* %160, align 8
  %251 = add i64 %250, 1
  store i64 %251, i64* %160, align 8
  %252 = getelementptr inbounds i8, i8* %249, i64 %250
  store i8 0, i8* %252, align 1
  br label %253

253:                                              ; preds = %248, %244
  %254 = load i64, i64* %159, align 8
  %255 = lshr i64 %254, 48
  %256 = trunc i64 %255 to i8
  %257 = load i8*, i8** %161, align 8
  %258 = load i64, i64* %160, align 8
  %259 = add i64 %258, 1
  store i64 %259, i64* %160, align 8
  %260 = getelementptr inbounds i8, i8* %257, i64 %258
  store i8 %256, i8* %260, align 1
  %261 = and i64 %254, 71776119061217280
  %262 = icmp eq i64 %261, 71776119061217280
  br i1 %262, label %263, label %268

263:                                              ; preds = %253
  %264 = load i8*, i8** %161, align 8
  %265 = load i64, i64* %160, align 8
  %266 = add i64 %265, 1
  store i64 %266, i64* %160, align 8
  %267 = getelementptr inbounds i8, i8* %264, i64 %265
  store i8 0, i8* %267, align 1
  br label %268

268:                                              ; preds = %263, %253
  %269 = load i64, i64* %159, align 8
  %270 = lshr i64 %269, 40
  %271 = trunc i64 %270 to i8
  %272 = load i8*, i8** %161, align 8
  %273 = load i64, i64* %160, align 8
  %274 = add i64 %273, 1
  store i64 %274, i64* %160, align 8
  %275 = getelementptr inbounds i8, i8* %272, i64 %273
  store i8 %271, i8* %275, align 1
  %276 = and i64 %269, 280375465082880
  %277 = icmp eq i64 %276, 280375465082880
  br i1 %277, label %278, label %283

278:                                              ; preds = %268
  %279 = load i8*, i8** %161, align 8
  %280 = load i64, i64* %160, align 8
  %281 = add i64 %280, 1
  store i64 %281, i64* %160, align 8
  %282 = getelementptr inbounds i8, i8* %279, i64 %280
  store i8 0, i8* %282, align 1
  br label %283

283:                                              ; preds = %278, %268
  %284 = load i64, i64* %159, align 8
  %285 = lshr i64 %284, 32
  %286 = trunc i64 %285 to i8
  %287 = load i8*, i8** %161, align 8
  %288 = load i64, i64* %160, align 8
  %289 = add i64 %288, 1
  store i64 %289, i64* %160, align 8
  %290 = getelementptr inbounds i8, i8* %287, i64 %288
  store i8 %286, i8* %290, align 1
  %291 = and i64 %284, 1095216660480
  %292 = icmp eq i64 %291, 1095216660480
  br i1 %292, label %293, label %298

293:                                              ; preds = %283
  %294 = load i8*, i8** %161, align 8
  %295 = load i64, i64* %160, align 8
  %296 = add i64 %295, 1
  store i64 %296, i64* %160, align 8
  %297 = getelementptr inbounds i8, i8* %294, i64 %295
  store i8 0, i8* %297, align 1
  br label %298

298:                                              ; preds = %293, %283
  %299 = load i64, i64* %159, align 8
  %300 = lshr i64 %299, 24
  %301 = trunc i64 %300 to i8
  %302 = load i8*, i8** %161, align 8
  %303 = load i64, i64* %160, align 8
  %304 = add i64 %303, 1
  store i64 %304, i64* %160, align 8
  %305 = getelementptr inbounds i8, i8* %302, i64 %303
  store i8 %301, i8* %305, align 1
  %306 = and i64 %299, 4278190080
  %307 = icmp eq i64 %306, 4278190080
  br i1 %307, label %308, label %313

308:                                              ; preds = %298
  %309 = load i8*, i8** %161, align 8
  %310 = load i64, i64* %160, align 8
  %311 = add i64 %310, 1
  store i64 %311, i64* %160, align 8
  %312 = getelementptr inbounds i8, i8* %309, i64 %310
  store i8 0, i8* %312, align 1
  br label %313

313:                                              ; preds = %308, %298
  %314 = load i64, i64* %159, align 8
  %315 = lshr i64 %314, 16
  %316 = trunc i64 %315 to i8
  %317 = load i8*, i8** %161, align 8
  %318 = load i64, i64* %160, align 8
  %319 = add i64 %318, 1
  store i64 %319, i64* %160, align 8
  %320 = getelementptr inbounds i8, i8* %317, i64 %318
  store i8 %316, i8* %320, align 1
  %321 = and i64 %314, 16711680
  %322 = icmp eq i64 %321, 16711680
  br i1 %322, label %323, label %367

323:                                              ; preds = %313
  %324 = load i8*, i8** %161, align 8
  %325 = load i64, i64* %160, align 8
  %326 = add i64 %325, 1
  store i64 %326, i64* %160, align 8
  %327 = getelementptr inbounds i8, i8* %324, i64 %325
  store i8 0, i8* %327, align 1
  br label %367

328:                                              ; preds = %231
  %329 = getelementptr inbounds i8, i8* %243, i64 %233
  store i8 %242, i8* %329, align 1
  %330 = load i64, i64* %159, align 8
  %331 = lshr i64 %330, 48
  %332 = trunc i64 %331 to i8
  %333 = load i8*, i8** %161, align 8
  %334 = load i64, i64* %160, align 8
  %335 = add i64 %334, 1
  %336 = getelementptr inbounds i8, i8* %333, i64 %335
  store i8 %332, i8* %336, align 1
  %337 = load i64, i64* %159, align 8
  %338 = lshr i64 %337, 40
  %339 = trunc i64 %338 to i8
  %340 = load i8*, i8** %161, align 8
  %341 = load i64, i64* %160, align 8
  %342 = add i64 %341, 2
  %343 = getelementptr inbounds i8, i8* %340, i64 %342
  store i8 %339, i8* %343, align 1
  %344 = load i64, i64* %159, align 8
  %345 = lshr i64 %344, 32
  %346 = trunc i64 %345 to i8
  %347 = load i8*, i8** %161, align 8
  %348 = load i64, i64* %160, align 8
  %349 = add i64 %348, 3
  %350 = getelementptr inbounds i8, i8* %347, i64 %349
  store i8 %346, i8* %350, align 1
  %351 = load i64, i64* %159, align 8
  %352 = lshr i64 %351, 24
  %353 = trunc i64 %352 to i8
  %354 = load i8*, i8** %161, align 8
  %355 = load i64, i64* %160, align 8
  %356 = add i64 %355, 4
  %357 = getelementptr inbounds i8, i8* %354, i64 %356
  store i8 %353, i8* %357, align 1
  %358 = load i64, i64* %159, align 8
  %359 = lshr i64 %358, 16
  %360 = trunc i64 %359 to i8
  %361 = load i8*, i8** %161, align 8
  %362 = load i64, i64* %160, align 8
  %363 = add i64 %362, 5
  %364 = getelementptr inbounds i8, i8* %361, i64 %363
  store i8 %360, i8* %364, align 1
  %365 = load i64, i64* %160, align 8
  %366 = add i64 %365, 6
  store i64 %366, i64* %160, align 8
  br label %367

367:                                              ; preds = %328, %323, %313
  %368 = load i64, i64* %159, align 8
  %369 = shl i64 %368, 48
  store i64 %369, i64* %159, align 8
  %370 = load i32, i32* %158, align 8
  %371 = add nsw i32 %370, 48
  store i32 %371, i32* %158, align 8
  br label %372

372:                                              ; preds = %367, %213, %212
  %373 = icmp eq i32 %205, 0
  br i1 %373, label %535, label %374

374:                                              ; preds = %372
  %375 = load i32, i32* %156, align 8
  %376 = shl nsw i32 -1, %205
  %377 = xor i32 %376, -1
  %378 = and i32 %375, %377
  %379 = sext i32 %378 to i64
  %380 = load i32, i32* %158, align 8
  %381 = sub nsw i32 %380, %205
  store i32 %381, i32* %158, align 8
  %382 = zext i32 %381 to i64
  %383 = shl i64 %379, %382
  %384 = load i64, i64* %159, align 8
  %385 = or i64 %383, %384
  store i64 %385, i64* %159, align 8
  %386 = icmp slt i32 %381, 17
  br i1 %386, label %387, label %535

387:                                              ; preds = %374
  %388 = load i64, i64* %160, align 8
  %389 = add i64 %388, 12
  %390 = icmp ugt i64 %389, 16384
  br i1 %390, label %391, label %394, !prof !23

391:                                              ; preds = %387
  call fastcc void @_ZN3jxl4jpeg12_GLOBAL__N_110SwapBufferEPNS0_13JpegBitWriterE(%"struct.jxl::jpeg::JpegBitWriter"* %130) #10
  %392 = load i64, i64* %160, align 8
  %393 = load i64, i64* %159, align 8
  br label %394

394:                                              ; preds = %391, %387
  %395 = phi i64 [ %385, %387 ], [ %393, %391 ]
  %396 = phi i64 [ %388, %387 ], [ %392, %391 ]
  %397 = or i64 %395, 65535
  %398 = xor i64 %397, -65536
  %399 = add i64 %398, -72340172838076673
  %400 = and i64 %398, -9187201950435770368
  %401 = xor i64 %400, -9187201950435770368
  %402 = and i64 %401, %399
  %403 = icmp eq i64 %402, 0
  %404 = lshr i64 %395, 56
  %405 = trunc i64 %404 to i8
  %406 = load i8*, i8** %161, align 8
  br i1 %403, label %491, label %407

407:                                              ; preds = %394
  %408 = add i64 %396, 1
  store i64 %408, i64* %160, align 8
  %409 = getelementptr inbounds i8, i8* %406, i64 %396
  store i8 %405, i8* %409, align 1
  %410 = icmp eq i64 %404, 255
  br i1 %410, label %411, label %416

411:                                              ; preds = %407
  %412 = load i8*, i8** %161, align 8
  %413 = load i64, i64* %160, align 8
  %414 = add i64 %413, 1
  store i64 %414, i64* %160, align 8
  %415 = getelementptr inbounds i8, i8* %412, i64 %413
  store i8 0, i8* %415, align 1
  br label %416

416:                                              ; preds = %411, %407
  %417 = load i64, i64* %159, align 8
  %418 = lshr i64 %417, 48
  %419 = trunc i64 %418 to i8
  %420 = load i8*, i8** %161, align 8
  %421 = load i64, i64* %160, align 8
  %422 = add i64 %421, 1
  store i64 %422, i64* %160, align 8
  %423 = getelementptr inbounds i8, i8* %420, i64 %421
  store i8 %419, i8* %423, align 1
  %424 = and i64 %417, 71776119061217280
  %425 = icmp eq i64 %424, 71776119061217280
  br i1 %425, label %426, label %431

426:                                              ; preds = %416
  %427 = load i8*, i8** %161, align 8
  %428 = load i64, i64* %160, align 8
  %429 = add i64 %428, 1
  store i64 %429, i64* %160, align 8
  %430 = getelementptr inbounds i8, i8* %427, i64 %428
  store i8 0, i8* %430, align 1
  br label %431

431:                                              ; preds = %426, %416
  %432 = load i64, i64* %159, align 8
  %433 = lshr i64 %432, 40
  %434 = trunc i64 %433 to i8
  %435 = load i8*, i8** %161, align 8
  %436 = load i64, i64* %160, align 8
  %437 = add i64 %436, 1
  store i64 %437, i64* %160, align 8
  %438 = getelementptr inbounds i8, i8* %435, i64 %436
  store i8 %434, i8* %438, align 1
  %439 = and i64 %432, 280375465082880
  %440 = icmp eq i64 %439, 280375465082880
  br i1 %440, label %441, label %446

441:                                              ; preds = %431
  %442 = load i8*, i8** %161, align 8
  %443 = load i64, i64* %160, align 8
  %444 = add i64 %443, 1
  store i64 %444, i64* %160, align 8
  %445 = getelementptr inbounds i8, i8* %442, i64 %443
  store i8 0, i8* %445, align 1
  br label %446

446:                                              ; preds = %441, %431
  %447 = load i64, i64* %159, align 8
  %448 = lshr i64 %447, 32
  %449 = trunc i64 %448 to i8
  %450 = load i8*, i8** %161, align 8
  %451 = load i64, i64* %160, align 8
  %452 = add i64 %451, 1
  store i64 %452, i64* %160, align 8
  %453 = getelementptr inbounds i8, i8* %450, i64 %451
  store i8 %449, i8* %453, align 1
  %454 = and i64 %447, 1095216660480
  %455 = icmp eq i64 %454, 1095216660480
  br i1 %455, label %456, label %461

456:                                              ; preds = %446
  %457 = load i8*, i8** %161, align 8
  %458 = load i64, i64* %160, align 8
  %459 = add i64 %458, 1
  store i64 %459, i64* %160, align 8
  %460 = getelementptr inbounds i8, i8* %457, i64 %458
  store i8 0, i8* %460, align 1
  br label %461

461:                                              ; preds = %456, %446
  %462 = load i64, i64* %159, align 8
  %463 = lshr i64 %462, 24
  %464 = trunc i64 %463 to i8
  %465 = load i8*, i8** %161, align 8
  %466 = load i64, i64* %160, align 8
  %467 = add i64 %466, 1
  store i64 %467, i64* %160, align 8
  %468 = getelementptr inbounds i8, i8* %465, i64 %466
  store i8 %464, i8* %468, align 1
  %469 = and i64 %462, 4278190080
  %470 = icmp eq i64 %469, 4278190080
  br i1 %470, label %471, label %476

471:                                              ; preds = %461
  %472 = load i8*, i8** %161, align 8
  %473 = load i64, i64* %160, align 8
  %474 = add i64 %473, 1
  store i64 %474, i64* %160, align 8
  %475 = getelementptr inbounds i8, i8* %472, i64 %473
  store i8 0, i8* %475, align 1
  br label %476

476:                                              ; preds = %471, %461
  %477 = load i64, i64* %159, align 8
  %478 = lshr i64 %477, 16
  %479 = trunc i64 %478 to i8
  %480 = load i8*, i8** %161, align 8
  %481 = load i64, i64* %160, align 8
  %482 = add i64 %481, 1
  store i64 %482, i64* %160, align 8
  %483 = getelementptr inbounds i8, i8* %480, i64 %481
  store i8 %479, i8* %483, align 1
  %484 = and i64 %477, 16711680
  %485 = icmp eq i64 %484, 16711680
  br i1 %485, label %486, label %530

486:                                              ; preds = %476
  %487 = load i8*, i8** %161, align 8
  %488 = load i64, i64* %160, align 8
  %489 = add i64 %488, 1
  store i64 %489, i64* %160, align 8
  %490 = getelementptr inbounds i8, i8* %487, i64 %488
  store i8 0, i8* %490, align 1
  br label %530

491:                                              ; preds = %394
  %492 = getelementptr inbounds i8, i8* %406, i64 %396
  store i8 %405, i8* %492, align 1
  %493 = load i64, i64* %159, align 8
  %494 = lshr i64 %493, 48
  %495 = trunc i64 %494 to i8
  %496 = load i8*, i8** %161, align 8
  %497 = load i64, i64* %160, align 8
  %498 = add i64 %497, 1
  %499 = getelementptr inbounds i8, i8* %496, i64 %498
  store i8 %495, i8* %499, align 1
  %500 = load i64, i64* %159, align 8
  %501 = lshr i64 %500, 40
  %502 = trunc i64 %501 to i8
  %503 = load i8*, i8** %161, align 8
  %504 = load i64, i64* %160, align 8
  %505 = add i64 %504, 2
  %506 = getelementptr inbounds i8, i8* %503, i64 %505
  store i8 %502, i8* %506, align 1
  %507 = load i64, i64* %159, align 8
  %508 = lshr i64 %507, 32
  %509 = trunc i64 %508 to i8
  %510 = load i8*, i8** %161, align 8
  %511 = load i64, i64* %160, align 8
  %512 = add i64 %511, 3
  %513 = getelementptr inbounds i8, i8* %510, i64 %512
  store i8 %509, i8* %513, align 1
  %514 = load i64, i64* %159, align 8
  %515 = lshr i64 %514, 24
  %516 = trunc i64 %515 to i8
  %517 = load i8*, i8** %161, align 8
  %518 = load i64, i64* %160, align 8
  %519 = add i64 %518, 4
  %520 = getelementptr inbounds i8, i8* %517, i64 %519
  store i8 %516, i8* %520, align 1
  %521 = load i64, i64* %159, align 8
  %522 = lshr i64 %521, 16
  %523 = trunc i64 %522 to i8
  %524 = load i8*, i8** %161, align 8
  %525 = load i64, i64* %160, align 8
  %526 = add i64 %525, 5
  %527 = getelementptr inbounds i8, i8* %524, i64 %526
  store i8 %523, i8* %527, align 1
  %528 = load i64, i64* %160, align 8
  %529 = add i64 %528, 6
  store i64 %529, i64* %160, align 8
  br label %530

530:                                              ; preds = %491, %486, %476
  %531 = load i64, i64* %159, align 8
  %532 = shl i64 %531, 48
  store i64 %532, i64* %159, align 8
  %533 = load i32, i32* %158, align 8
  %534 = add nsw i32 %533, 48
  store i32 %534, i32* %158, align 8
  br label %535

535:                                              ; preds = %530, %374, %372
  store i32 0, i32* %156, align 8
  br label %536

536:                                              ; preds = %535, %200
  %537 = load i64, i64* %165, align 8
  %538 = load i64, i64* %166, align 8
  %539 = icmp eq i64 %537, %538
  br i1 %539, label %717, label %540

540:                                              ; preds = %536
  %541 = load i32, i32* %158, align 8
  %542 = load i64, i64* %159, align 8
  br label %543

543:                                              ; preds = %708, %540
  %544 = phi i64 [ %538, %540 ], [ %709, %708 ]
  %545 = phi i64 [ %537, %540 ], [ %710, %708 ]
  %546 = phi i64 [ %542, %540 ], [ %711, %708 ]
  %547 = phi i32 [ %541, %540 ], [ %712, %708 ]
  %548 = phi i64 [ 0, %540 ], [ %713, %708 ]
  %549 = inttoptr i64 %544 to i32*
  %550 = getelementptr inbounds i32, i32* %549, i64 %548
  %551 = load i32, i32* %550, align 4
  %552 = sext i32 %551 to i64
  %553 = add nsw i32 %547, -1
  store i32 %553, i32* %158, align 8
  %554 = zext i32 %553 to i64
  %555 = shl i64 %552, %554
  %556 = or i64 %555, %546
  store i64 %556, i64* %159, align 8
  %557 = icmp slt i32 %547, 18
  br i1 %557, label %558, label %708

558:                                              ; preds = %543
  %559 = load i64, i64* %160, align 8
  %560 = add i64 %559, 12
  %561 = icmp ugt i64 %560, 16384
  br i1 %561, label %562, label %565, !prof !23

562:                                              ; preds = %558
  call fastcc void @_ZN3jxl4jpeg12_GLOBAL__N_110SwapBufferEPNS0_13JpegBitWriterE(%"struct.jxl::jpeg::JpegBitWriter"* %130) #10
  %563 = load i64, i64* %160, align 8
  %564 = load i64, i64* %159, align 8
  br label %565

565:                                              ; preds = %562, %558
  %566 = phi i64 [ %556, %558 ], [ %564, %562 ]
  %567 = phi i64 [ %559, %558 ], [ %563, %562 ]
  %568 = or i64 %566, 65535
  %569 = xor i64 %568, -65536
  %570 = add i64 %569, -72340172838076673
  %571 = and i64 %569, -9187201950435770368
  %572 = xor i64 %571, -9187201950435770368
  %573 = and i64 %572, %570
  %574 = icmp eq i64 %573, 0
  %575 = lshr i64 %566, 56
  %576 = trunc i64 %575 to i8
  %577 = load i8*, i8** %161, align 8
  br i1 %574, label %662, label %578

578:                                              ; preds = %565
  %579 = add i64 %567, 1
  store i64 %579, i64* %160, align 8
  %580 = getelementptr inbounds i8, i8* %577, i64 %567
  store i8 %576, i8* %580, align 1
  %581 = icmp eq i64 %575, 255
  br i1 %581, label %582, label %587

582:                                              ; preds = %578
  %583 = load i8*, i8** %161, align 8
  %584 = load i64, i64* %160, align 8
  %585 = add i64 %584, 1
  store i64 %585, i64* %160, align 8
  %586 = getelementptr inbounds i8, i8* %583, i64 %584
  store i8 0, i8* %586, align 1
  br label %587

587:                                              ; preds = %582, %578
  %588 = load i64, i64* %159, align 8
  %589 = lshr i64 %588, 48
  %590 = trunc i64 %589 to i8
  %591 = load i8*, i8** %161, align 8
  %592 = load i64, i64* %160, align 8
  %593 = add i64 %592, 1
  store i64 %593, i64* %160, align 8
  %594 = getelementptr inbounds i8, i8* %591, i64 %592
  store i8 %590, i8* %594, align 1
  %595 = and i64 %588, 71776119061217280
  %596 = icmp eq i64 %595, 71776119061217280
  br i1 %596, label %597, label %602

597:                                              ; preds = %587
  %598 = load i8*, i8** %161, align 8
  %599 = load i64, i64* %160, align 8
  %600 = add i64 %599, 1
  store i64 %600, i64* %160, align 8
  %601 = getelementptr inbounds i8, i8* %598, i64 %599
  store i8 0, i8* %601, align 1
  br label %602

602:                                              ; preds = %597, %587
  %603 = load i64, i64* %159, align 8
  %604 = lshr i64 %603, 40
  %605 = trunc i64 %604 to i8
  %606 = load i8*, i8** %161, align 8
  %607 = load i64, i64* %160, align 8
  %608 = add i64 %607, 1
  store i64 %608, i64* %160, align 8
  %609 = getelementptr inbounds i8, i8* %606, i64 %607
  store i8 %605, i8* %609, align 1
  %610 = and i64 %603, 280375465082880
  %611 = icmp eq i64 %610, 280375465082880
  br i1 %611, label %612, label %617

612:                                              ; preds = %602
  %613 = load i8*, i8** %161, align 8
  %614 = load i64, i64* %160, align 8
  %615 = add i64 %614, 1
  store i64 %615, i64* %160, align 8
  %616 = getelementptr inbounds i8, i8* %613, i64 %614
  store i8 0, i8* %616, align 1
  br label %617

617:                                              ; preds = %612, %602
  %618 = load i64, i64* %159, align 8
  %619 = lshr i64 %618, 32
  %620 = trunc i64 %619 to i8
  %621 = load i8*, i8** %161, align 8
  %622 = load i64, i64* %160, align 8
  %623 = add i64 %622, 1
  store i64 %623, i64* %160, align 8
  %624 = getelementptr inbounds i8, i8* %621, i64 %622
  store i8 %620, i8* %624, align 1
  %625 = and i64 %618, 1095216660480
  %626 = icmp eq i64 %625, 1095216660480
  br i1 %626, label %627, label %632

627:                                              ; preds = %617
  %628 = load i8*, i8** %161, align 8
  %629 = load i64, i64* %160, align 8
  %630 = add i64 %629, 1
  store i64 %630, i64* %160, align 8
  %631 = getelementptr inbounds i8, i8* %628, i64 %629
  store i8 0, i8* %631, align 1
  br label %632

632:                                              ; preds = %627, %617
  %633 = load i64, i64* %159, align 8
  %634 = lshr i64 %633, 24
  %635 = trunc i64 %634 to i8
  %636 = load i8*, i8** %161, align 8
  %637 = load i64, i64* %160, align 8
  %638 = add i64 %637, 1
  store i64 %638, i64* %160, align 8
  %639 = getelementptr inbounds i8, i8* %636, i64 %637
  store i8 %635, i8* %639, align 1
  %640 = and i64 %633, 4278190080
  %641 = icmp eq i64 %640, 4278190080
  br i1 %641, label %642, label %647

642:                                              ; preds = %632
  %643 = load i8*, i8** %161, align 8
  %644 = load i64, i64* %160, align 8
  %645 = add i64 %644, 1
  store i64 %645, i64* %160, align 8
  %646 = getelementptr inbounds i8, i8* %643, i64 %644
  store i8 0, i8* %646, align 1
  br label %647

647:                                              ; preds = %642, %632
  %648 = load i64, i64* %159, align 8
  %649 = lshr i64 %648, 16
  %650 = trunc i64 %649 to i8
  %651 = load i8*, i8** %161, align 8
  %652 = load i64, i64* %160, align 8
  %653 = add i64 %652, 1
  store i64 %653, i64* %160, align 8
  %654 = getelementptr inbounds i8, i8* %651, i64 %652
  store i8 %650, i8* %654, align 1
  %655 = and i64 %648, 16711680
  %656 = icmp eq i64 %655, 16711680
  br i1 %656, label %657, label %701

657:                                              ; preds = %647
  %658 = load i8*, i8** %161, align 8
  %659 = load i64, i64* %160, align 8
  %660 = add i64 %659, 1
  store i64 %660, i64* %160, align 8
  %661 = getelementptr inbounds i8, i8* %658, i64 %659
  store i8 0, i8* %661, align 1
  br label %701

662:                                              ; preds = %565
  %663 = getelementptr inbounds i8, i8* %577, i64 %567
  store i8 %576, i8* %663, align 1
  %664 = load i64, i64* %159, align 8
  %665 = lshr i64 %664, 48
  %666 = trunc i64 %665 to i8
  %667 = load i8*, i8** %161, align 8
  %668 = load i64, i64* %160, align 8
  %669 = add i64 %668, 1
  %670 = getelementptr inbounds i8, i8* %667, i64 %669
  store i8 %666, i8* %670, align 1
  %671 = load i64, i64* %159, align 8
  %672 = lshr i64 %671, 40
  %673 = trunc i64 %672 to i8
  %674 = load i8*, i8** %161, align 8
  %675 = load i64, i64* %160, align 8
  %676 = add i64 %675, 2
  %677 = getelementptr inbounds i8, i8* %674, i64 %676
  store i8 %673, i8* %677, align 1
  %678 = load i64, i64* %159, align 8
  %679 = lshr i64 %678, 32
  %680 = trunc i64 %679 to i8
  %681 = load i8*, i8** %161, align 8
  %682 = load i64, i64* %160, align 8
  %683 = add i64 %682, 3
  %684 = getelementptr inbounds i8, i8* %681, i64 %683
  store i8 %680, i8* %684, align 1
  %685 = load i64, i64* %159, align 8
  %686 = lshr i64 %685, 24
  %687 = trunc i64 %686 to i8
  %688 = load i8*, i8** %161, align 8
  %689 = load i64, i64* %160, align 8
  %690 = add i64 %689, 4
  %691 = getelementptr inbounds i8, i8* %688, i64 %690
  store i8 %687, i8* %691, align 1
  %692 = load i64, i64* %159, align 8
  %693 = lshr i64 %692, 16
  %694 = trunc i64 %693 to i8
  %695 = load i8*, i8** %161, align 8
  %696 = load i64, i64* %160, align 8
  %697 = add i64 %696, 5
  %698 = getelementptr inbounds i8, i8* %695, i64 %697
  store i8 %694, i8* %698, align 1
  %699 = load i64, i64* %160, align 8
  %700 = add i64 %699, 6
  store i64 %700, i64* %160, align 8
  br label %701

701:                                              ; preds = %662, %657, %647
  %702 = load i64, i64* %159, align 8
  %703 = shl i64 %702, 48
  store i64 %703, i64* %159, align 8
  %704 = load i32, i32* %158, align 8
  %705 = add nsw i32 %704, 48
  store i32 %705, i32* %158, align 8
  %706 = load i64, i64* %165, align 8
  %707 = load i64, i64* %166, align 8
  br label %708

708:                                              ; preds = %701, %543
  %709 = phi i64 [ %544, %543 ], [ %707, %701 ]
  %710 = phi i64 [ %545, %543 ], [ %706, %701 ]
  %711 = phi i64 [ %556, %543 ], [ %703, %701 ]
  %712 = phi i32 [ %553, %543 ], [ %705, %701 ]
  %713 = add nuw i64 %548, 1
  %714 = sub i64 %710, %709
  %715 = ashr exact i64 %714, 2
  %716 = icmp ult i64 %713, %715
  br i1 %716, label %543, label %717

717:                                              ; preds = %708, %536
  %718 = phi i64 [ %537, %536 ], [ %709, %708 ]
  store i64 %718, i64* %165, align 8
  %719 = load i8*, i8** %168, align 8
  %720 = call fastcc zeroext i1 @_ZN3jxl4jpeg12_GLOBAL__N_118JumpToByteBoundaryEPNS0_13JpegBitWriterEPPKhS5_(%"struct.jxl::jpeg::JpegBitWriter"* %130, i8** %167, i8* %719)
  br i1 %720, label %721, label %2013

721:                                              ; preds = %717
  %722 = load i32, i32* %169, align 4
  %723 = load i64, i64* %160, align 8
  %724 = add i64 %723, 2
  %725 = icmp ugt i64 %724, 16384
  br i1 %725, label %726, label %728, !prof !23

726:                                              ; preds = %721
  call fastcc void @_ZN3jxl4jpeg12_GLOBAL__N_110SwapBufferEPNS0_13JpegBitWriterE(%"struct.jxl::jpeg::JpegBitWriter"* %130) #10
  %727 = load i64, i64* %160, align 8
  br label %728

728:                                              ; preds = %721, %726
  %729 = phi i64 [ %723, %721 ], [ %727, %726 ]
  %730 = load i8*, i8** %161, align 8
  %731 = add i64 %729, 1
  store i64 %731, i64* %160, align 8
  %732 = getelementptr inbounds i8, i8* %730, i64 %729
  store i8 -1, i8* %732, align 1
  %733 = trunc i32 %722 to i8
  %734 = add i8 %733, -48
  %735 = load i8*, i8** %161, align 8
  %736 = load i64, i64* %160, align 8
  %737 = add i64 %736, 1
  store i64 %737, i64* %160, align 8
  %738 = getelementptr inbounds i8, i8* %735, i64 %736
  store i8 %734, i8* %738, align 1
  %739 = load i32, i32* %169, align 4
  %740 = add nsw i32 %739, 1
  %741 = and i32 %740, 7
  store i32 %741, i32* %169, align 4
  store i32 %16, i32* %155, align 8
  store i64 0, i64* %171, align 8
  br label %742

742:                                              ; preds = %728, %197, %195
  %743 = load i32, i32* %132, align 8
  %744 = icmp eq i32 %743, 0
  br i1 %744, label %1367, label %745

745:                                              ; preds = %742, %1362
  %746 = phi i32 [ %1363, %1362 ], [ %743, %742 ]
  %747 = phi i64 [ %1364, %1362 ], [ 0, %742 ]
  %748 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %9, i64 %7, i32 5, i32 0, i64 %747, i32 0
  %749 = load i32, i32* %748, align 4
  %750 = zext i32 %749 to i64
  %751 = load %"struct.jxl::jpeg::JPEGComponent"*, %"struct.jxl::jpeg::JPEGComponent"** %172, align 8
  %752 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %9, i64 %7, i32 5, i32 0, i64 %747, i32 1
  %753 = load i32, i32* %752, align 4
  %754 = zext i32 %753 to i64
  %755 = load %"struct.jxl::jpeg::HuffmanCodeTable"*, %"struct.jxl::jpeg::HuffmanCodeTable"** %173, align 8
  %756 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanCodeTable", %"struct.jxl::jpeg::HuffmanCodeTable"* %755, i64 %754
  %757 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %9, i64 %7, i32 5, i32 0, i64 %747, i32 2
  %758 = load i32, i32* %757, align 4
  %759 = zext i32 %758 to i64
  %760 = load %"struct.jxl::jpeg::HuffmanCodeTable"*, %"struct.jxl::jpeg::HuffmanCodeTable"** %174, align 8
  %761 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanCodeTable", %"struct.jxl::jpeg::HuffmanCodeTable"* %760, i64 %759
  %762 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %751, i64 %750, i32 2
  %763 = load i32, i32* %762, align 8
  %764 = select i1 %134, i32 %763, i32 1
  %765 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %751, i64 %750, i32 1
  %766 = load i32, i32* %765, align 4
  %767 = select i1 %134, i32 %766, i32 1
  %768 = icmp sgt i32 %764, 0
  br i1 %768, label %769, label %1362

769:                                              ; preds = %745
  %770 = icmp sgt i32 %767, 0
  %771 = mul nsw i32 %767, %196
  %772 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %751, i64 %750, i32 4
  %773 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %751, i64 %750, i32 6, i32 0, i32 0
  br label %774

774:                                              ; preds = %1357, %769
  %775 = phi i32 [ 0, %769 ], [ %1358, %1357 ]
  br i1 %770, label %776, label %1357

776:                                              ; preds = %774
  %777 = load i32, i32* %175, align 8
  br label %778

778:                                              ; preds = %1344, %776
  %779 = phi i32 [ %1354, %1344 ], [ %777, %776 ]
  %780 = phi i32 [ %1355, %1344 ], [ 0, %776 ]
  %781 = load i32, i32* %150, align 4
  %782 = mul nsw i32 %781, %764
  %783 = add nsw i32 %782, %775
  %784 = add nsw i32 %780, %771
  %785 = load i32, i32* %772, align 8
  %786 = mul i32 %783, %785
  %787 = add i32 %784, %786
  %788 = load i32, i32* %176, align 8
  %789 = icmp eq i32 %779, %788
  br i1 %789, label %790, label %1323

790:                                              ; preds = %778
  %791 = load i32, i32* %156, align 8
  %792 = icmp sgt i32 %791, 0
  br i1 %792, label %793, label %1126

793:                                              ; preds = %790
  %794 = call i32 @llvm.ctlz.i32(i32 %791, i1 true) #10, !range !22
  %795 = xor i32 %794, 31
  %796 = shl nuw nsw i32 %795, 4
  %797 = load %"struct.jxl::jpeg::HuffmanCodeTable"*, %"struct.jxl::jpeg::HuffmanCodeTable"** %157, align 8
  %798 = zext i32 %796 to i64
  %799 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanCodeTable", %"struct.jxl::jpeg::HuffmanCodeTable"* %797, i64 0, i32 0, i64 %798
  %800 = load i32, i32* %799, align 4
  %801 = icmp eq i32 %800, 0
  br i1 %801, label %802, label %803

802:                                              ; preds = %793
  store i8 0, i8* %162, align 8
  br label %962

803:                                              ; preds = %793
  %804 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanCodeTable", %"struct.jxl::jpeg::HuffmanCodeTable"* %797, i64 0, i32 1, i64 %798
  %805 = load i32, i32* %804, align 4
  %806 = sext i32 %805 to i64
  %807 = load i32, i32* %158, align 8
  %808 = sub nsw i32 %807, %800
  store i32 %808, i32* %158, align 8
  %809 = zext i32 %808 to i64
  %810 = shl i64 %806, %809
  %811 = load i64, i64* %159, align 8
  %812 = or i64 %810, %811
  store i64 %812, i64* %159, align 8
  %813 = icmp slt i32 %808, 17
  br i1 %813, label %814, label %962

814:                                              ; preds = %803
  %815 = load i64, i64* %160, align 8
  %816 = add i64 %815, 12
  %817 = icmp ugt i64 %816, 16384
  br i1 %817, label %818, label %821, !prof !23

818:                                              ; preds = %814
  call fastcc void @_ZN3jxl4jpeg12_GLOBAL__N_110SwapBufferEPNS0_13JpegBitWriterE(%"struct.jxl::jpeg::JpegBitWriter"* %130) #10
  %819 = load i64, i64* %160, align 8
  %820 = load i64, i64* %159, align 8
  br label %821

821:                                              ; preds = %818, %814
  %822 = phi i64 [ %812, %814 ], [ %820, %818 ]
  %823 = phi i64 [ %815, %814 ], [ %819, %818 ]
  %824 = or i64 %822, 65535
  %825 = xor i64 %824, -65536
  %826 = add i64 %825, -72340172838076673
  %827 = and i64 %825, -9187201950435770368
  %828 = xor i64 %827, -9187201950435770368
  %829 = and i64 %828, %826
  %830 = icmp eq i64 %829, 0
  %831 = lshr i64 %822, 56
  %832 = trunc i64 %831 to i8
  %833 = load i8*, i8** %161, align 8
  br i1 %830, label %918, label %834

834:                                              ; preds = %821
  %835 = add i64 %823, 1
  store i64 %835, i64* %160, align 8
  %836 = getelementptr inbounds i8, i8* %833, i64 %823
  store i8 %832, i8* %836, align 1
  %837 = icmp eq i64 %831, 255
  br i1 %837, label %838, label %843

838:                                              ; preds = %834
  %839 = load i8*, i8** %161, align 8
  %840 = load i64, i64* %160, align 8
  %841 = add i64 %840, 1
  store i64 %841, i64* %160, align 8
  %842 = getelementptr inbounds i8, i8* %839, i64 %840
  store i8 0, i8* %842, align 1
  br label %843

843:                                              ; preds = %838, %834
  %844 = load i64, i64* %159, align 8
  %845 = lshr i64 %844, 48
  %846 = trunc i64 %845 to i8
  %847 = load i8*, i8** %161, align 8
  %848 = load i64, i64* %160, align 8
  %849 = add i64 %848, 1
  store i64 %849, i64* %160, align 8
  %850 = getelementptr inbounds i8, i8* %847, i64 %848
  store i8 %846, i8* %850, align 1
  %851 = and i64 %844, 71776119061217280
  %852 = icmp eq i64 %851, 71776119061217280
  br i1 %852, label %853, label %858

853:                                              ; preds = %843
  %854 = load i8*, i8** %161, align 8
  %855 = load i64, i64* %160, align 8
  %856 = add i64 %855, 1
  store i64 %856, i64* %160, align 8
  %857 = getelementptr inbounds i8, i8* %854, i64 %855
  store i8 0, i8* %857, align 1
  br label %858

858:                                              ; preds = %853, %843
  %859 = load i64, i64* %159, align 8
  %860 = lshr i64 %859, 40
  %861 = trunc i64 %860 to i8
  %862 = load i8*, i8** %161, align 8
  %863 = load i64, i64* %160, align 8
  %864 = add i64 %863, 1
  store i64 %864, i64* %160, align 8
  %865 = getelementptr inbounds i8, i8* %862, i64 %863
  store i8 %861, i8* %865, align 1
  %866 = and i64 %859, 280375465082880
  %867 = icmp eq i64 %866, 280375465082880
  br i1 %867, label %868, label %873

868:                                              ; preds = %858
  %869 = load i8*, i8** %161, align 8
  %870 = load i64, i64* %160, align 8
  %871 = add i64 %870, 1
  store i64 %871, i64* %160, align 8
  %872 = getelementptr inbounds i8, i8* %869, i64 %870
  store i8 0, i8* %872, align 1
  br label %873

873:                                              ; preds = %868, %858
  %874 = load i64, i64* %159, align 8
  %875 = lshr i64 %874, 32
  %876 = trunc i64 %875 to i8
  %877 = load i8*, i8** %161, align 8
  %878 = load i64, i64* %160, align 8
  %879 = add i64 %878, 1
  store i64 %879, i64* %160, align 8
  %880 = getelementptr inbounds i8, i8* %877, i64 %878
  store i8 %876, i8* %880, align 1
  %881 = and i64 %874, 1095216660480
  %882 = icmp eq i64 %881, 1095216660480
  br i1 %882, label %883, label %888

883:                                              ; preds = %873
  %884 = load i8*, i8** %161, align 8
  %885 = load i64, i64* %160, align 8
  %886 = add i64 %885, 1
  store i64 %886, i64* %160, align 8
  %887 = getelementptr inbounds i8, i8* %884, i64 %885
  store i8 0, i8* %887, align 1
  br label %888

888:                                              ; preds = %883, %873
  %889 = load i64, i64* %159, align 8
  %890 = lshr i64 %889, 24
  %891 = trunc i64 %890 to i8
  %892 = load i8*, i8** %161, align 8
  %893 = load i64, i64* %160, align 8
  %894 = add i64 %893, 1
  store i64 %894, i64* %160, align 8
  %895 = getelementptr inbounds i8, i8* %892, i64 %893
  store i8 %891, i8* %895, align 1
  %896 = and i64 %889, 4278190080
  %897 = icmp eq i64 %896, 4278190080
  br i1 %897, label %898, label %903

898:                                              ; preds = %888
  %899 = load i8*, i8** %161, align 8
  %900 = load i64, i64* %160, align 8
  %901 = add i64 %900, 1
  store i64 %901, i64* %160, align 8
  %902 = getelementptr inbounds i8, i8* %899, i64 %900
  store i8 0, i8* %902, align 1
  br label %903

903:                                              ; preds = %898, %888
  %904 = load i64, i64* %159, align 8
  %905 = lshr i64 %904, 16
  %906 = trunc i64 %905 to i8
  %907 = load i8*, i8** %161, align 8
  %908 = load i64, i64* %160, align 8
  %909 = add i64 %908, 1
  store i64 %909, i64* %160, align 8
  %910 = getelementptr inbounds i8, i8* %907, i64 %908
  store i8 %906, i8* %910, align 1
  %911 = and i64 %904, 16711680
  %912 = icmp eq i64 %911, 16711680
  br i1 %912, label %913, label %957

913:                                              ; preds = %903
  %914 = load i8*, i8** %161, align 8
  %915 = load i64, i64* %160, align 8
  %916 = add i64 %915, 1
  store i64 %916, i64* %160, align 8
  %917 = getelementptr inbounds i8, i8* %914, i64 %915
  store i8 0, i8* %917, align 1
  br label %957

918:                                              ; preds = %821
  %919 = getelementptr inbounds i8, i8* %833, i64 %823
  store i8 %832, i8* %919, align 1
  %920 = load i64, i64* %159, align 8
  %921 = lshr i64 %920, 48
  %922 = trunc i64 %921 to i8
  %923 = load i8*, i8** %161, align 8
  %924 = load i64, i64* %160, align 8
  %925 = add i64 %924, 1
  %926 = getelementptr inbounds i8, i8* %923, i64 %925
  store i8 %922, i8* %926, align 1
  %927 = load i64, i64* %159, align 8
  %928 = lshr i64 %927, 40
  %929 = trunc i64 %928 to i8
  %930 = load i8*, i8** %161, align 8
  %931 = load i64, i64* %160, align 8
  %932 = add i64 %931, 2
  %933 = getelementptr inbounds i8, i8* %930, i64 %932
  store i8 %929, i8* %933, align 1
  %934 = load i64, i64* %159, align 8
  %935 = lshr i64 %934, 32
  %936 = trunc i64 %935 to i8
  %937 = load i8*, i8** %161, align 8
  %938 = load i64, i64* %160, align 8
  %939 = add i64 %938, 3
  %940 = getelementptr inbounds i8, i8* %937, i64 %939
  store i8 %936, i8* %940, align 1
  %941 = load i64, i64* %159, align 8
  %942 = lshr i64 %941, 24
  %943 = trunc i64 %942 to i8
  %944 = load i8*, i8** %161, align 8
  %945 = load i64, i64* %160, align 8
  %946 = add i64 %945, 4
  %947 = getelementptr inbounds i8, i8* %944, i64 %946
  store i8 %943, i8* %947, align 1
  %948 = load i64, i64* %159, align 8
  %949 = lshr i64 %948, 16
  %950 = trunc i64 %949 to i8
  %951 = load i8*, i8** %161, align 8
  %952 = load i64, i64* %160, align 8
  %953 = add i64 %952, 5
  %954 = getelementptr inbounds i8, i8* %951, i64 %953
  store i8 %950, i8* %954, align 1
  %955 = load i64, i64* %160, align 8
  %956 = add i64 %955, 6
  store i64 %956, i64* %160, align 8
  br label %957

957:                                              ; preds = %918, %913, %903
  %958 = load i64, i64* %159, align 8
  %959 = shl i64 %958, 48
  store i64 %959, i64* %159, align 8
  %960 = load i32, i32* %158, align 8
  %961 = add nsw i32 %960, 48
  store i32 %961, i32* %158, align 8
  br label %962

962:                                              ; preds = %957, %803, %802
  %963 = icmp eq i32 %795, 0
  br i1 %963, label %1125, label %964

964:                                              ; preds = %962
  %965 = load i32, i32* %156, align 8
  %966 = shl nsw i32 -1, %795
  %967 = xor i32 %966, -1
  %968 = and i32 %965, %967
  %969 = sext i32 %968 to i64
  %970 = load i32, i32* %158, align 8
  %971 = sub nsw i32 %970, %795
  store i32 %971, i32* %158, align 8
  %972 = zext i32 %971 to i64
  %973 = shl i64 %969, %972
  %974 = load i64, i64* %159, align 8
  %975 = or i64 %973, %974
  store i64 %975, i64* %159, align 8
  %976 = icmp slt i32 %971, 17
  br i1 %976, label %977, label %1125

977:                                              ; preds = %964
  %978 = load i64, i64* %160, align 8
  %979 = add i64 %978, 12
  %980 = icmp ugt i64 %979, 16384
  br i1 %980, label %981, label %984, !prof !23

981:                                              ; preds = %977
  call fastcc void @_ZN3jxl4jpeg12_GLOBAL__N_110SwapBufferEPNS0_13JpegBitWriterE(%"struct.jxl::jpeg::JpegBitWriter"* %130) #10
  %982 = load i64, i64* %160, align 8
  %983 = load i64, i64* %159, align 8
  br label %984

984:                                              ; preds = %981, %977
  %985 = phi i64 [ %975, %977 ], [ %983, %981 ]
  %986 = phi i64 [ %978, %977 ], [ %982, %981 ]
  %987 = or i64 %985, 65535
  %988 = xor i64 %987, -65536
  %989 = add i64 %988, -72340172838076673
  %990 = and i64 %988, -9187201950435770368
  %991 = xor i64 %990, -9187201950435770368
  %992 = and i64 %991, %989
  %993 = icmp eq i64 %992, 0
  %994 = lshr i64 %985, 56
  %995 = trunc i64 %994 to i8
  %996 = load i8*, i8** %161, align 8
  br i1 %993, label %1081, label %997

997:                                              ; preds = %984
  %998 = add i64 %986, 1
  store i64 %998, i64* %160, align 8
  %999 = getelementptr inbounds i8, i8* %996, i64 %986
  store i8 %995, i8* %999, align 1
  %1000 = icmp eq i64 %994, 255
  br i1 %1000, label %1001, label %1006

1001:                                             ; preds = %997
  %1002 = load i8*, i8** %161, align 8
  %1003 = load i64, i64* %160, align 8
  %1004 = add i64 %1003, 1
  store i64 %1004, i64* %160, align 8
  %1005 = getelementptr inbounds i8, i8* %1002, i64 %1003
  store i8 0, i8* %1005, align 1
  br label %1006

1006:                                             ; preds = %1001, %997
  %1007 = load i64, i64* %159, align 8
  %1008 = lshr i64 %1007, 48
  %1009 = trunc i64 %1008 to i8
  %1010 = load i8*, i8** %161, align 8
  %1011 = load i64, i64* %160, align 8
  %1012 = add i64 %1011, 1
  store i64 %1012, i64* %160, align 8
  %1013 = getelementptr inbounds i8, i8* %1010, i64 %1011
  store i8 %1009, i8* %1013, align 1
  %1014 = and i64 %1007, 71776119061217280
  %1015 = icmp eq i64 %1014, 71776119061217280
  br i1 %1015, label %1016, label %1021

1016:                                             ; preds = %1006
  %1017 = load i8*, i8** %161, align 8
  %1018 = load i64, i64* %160, align 8
  %1019 = add i64 %1018, 1
  store i64 %1019, i64* %160, align 8
  %1020 = getelementptr inbounds i8, i8* %1017, i64 %1018
  store i8 0, i8* %1020, align 1
  br label %1021

1021:                                             ; preds = %1016, %1006
  %1022 = load i64, i64* %159, align 8
  %1023 = lshr i64 %1022, 40
  %1024 = trunc i64 %1023 to i8
  %1025 = load i8*, i8** %161, align 8
  %1026 = load i64, i64* %160, align 8
  %1027 = add i64 %1026, 1
  store i64 %1027, i64* %160, align 8
  %1028 = getelementptr inbounds i8, i8* %1025, i64 %1026
  store i8 %1024, i8* %1028, align 1
  %1029 = and i64 %1022, 280375465082880
  %1030 = icmp eq i64 %1029, 280375465082880
  br i1 %1030, label %1031, label %1036

1031:                                             ; preds = %1021
  %1032 = load i8*, i8** %161, align 8
  %1033 = load i64, i64* %160, align 8
  %1034 = add i64 %1033, 1
  store i64 %1034, i64* %160, align 8
  %1035 = getelementptr inbounds i8, i8* %1032, i64 %1033
  store i8 0, i8* %1035, align 1
  br label %1036

1036:                                             ; preds = %1031, %1021
  %1037 = load i64, i64* %159, align 8
  %1038 = lshr i64 %1037, 32
  %1039 = trunc i64 %1038 to i8
  %1040 = load i8*, i8** %161, align 8
  %1041 = load i64, i64* %160, align 8
  %1042 = add i64 %1041, 1
  store i64 %1042, i64* %160, align 8
  %1043 = getelementptr inbounds i8, i8* %1040, i64 %1041
  store i8 %1039, i8* %1043, align 1
  %1044 = and i64 %1037, 1095216660480
  %1045 = icmp eq i64 %1044, 1095216660480
  br i1 %1045, label %1046, label %1051

1046:                                             ; preds = %1036
  %1047 = load i8*, i8** %161, align 8
  %1048 = load i64, i64* %160, align 8
  %1049 = add i64 %1048, 1
  store i64 %1049, i64* %160, align 8
  %1050 = getelementptr inbounds i8, i8* %1047, i64 %1048
  store i8 0, i8* %1050, align 1
  br label %1051

1051:                                             ; preds = %1046, %1036
  %1052 = load i64, i64* %159, align 8
  %1053 = lshr i64 %1052, 24
  %1054 = trunc i64 %1053 to i8
  %1055 = load i8*, i8** %161, align 8
  %1056 = load i64, i64* %160, align 8
  %1057 = add i64 %1056, 1
  store i64 %1057, i64* %160, align 8
  %1058 = getelementptr inbounds i8, i8* %1055, i64 %1056
  store i8 %1054, i8* %1058, align 1
  %1059 = and i64 %1052, 4278190080
  %1060 = icmp eq i64 %1059, 4278190080
  br i1 %1060, label %1061, label %1066

1061:                                             ; preds = %1051
  %1062 = load i8*, i8** %161, align 8
  %1063 = load i64, i64* %160, align 8
  %1064 = add i64 %1063, 1
  store i64 %1064, i64* %160, align 8
  %1065 = getelementptr inbounds i8, i8* %1062, i64 %1063
  store i8 0, i8* %1065, align 1
  br label %1066

1066:                                             ; preds = %1061, %1051
  %1067 = load i64, i64* %159, align 8
  %1068 = lshr i64 %1067, 16
  %1069 = trunc i64 %1068 to i8
  %1070 = load i8*, i8** %161, align 8
  %1071 = load i64, i64* %160, align 8
  %1072 = add i64 %1071, 1
  store i64 %1072, i64* %160, align 8
  %1073 = getelementptr inbounds i8, i8* %1070, i64 %1071
  store i8 %1069, i8* %1073, align 1
  %1074 = and i64 %1067, 16711680
  %1075 = icmp eq i64 %1074, 16711680
  br i1 %1075, label %1076, label %1120

1076:                                             ; preds = %1066
  %1077 = load i8*, i8** %161, align 8
  %1078 = load i64, i64* %160, align 8
  %1079 = add i64 %1078, 1
  store i64 %1079, i64* %160, align 8
  %1080 = getelementptr inbounds i8, i8* %1077, i64 %1078
  store i8 0, i8* %1080, align 1
  br label %1120

1081:                                             ; preds = %984
  %1082 = getelementptr inbounds i8, i8* %996, i64 %986
  store i8 %995, i8* %1082, align 1
  %1083 = load i64, i64* %159, align 8
  %1084 = lshr i64 %1083, 48
  %1085 = trunc i64 %1084 to i8
  %1086 = load i8*, i8** %161, align 8
  %1087 = load i64, i64* %160, align 8
  %1088 = add i64 %1087, 1
  %1089 = getelementptr inbounds i8, i8* %1086, i64 %1088
  store i8 %1085, i8* %1089, align 1
  %1090 = load i64, i64* %159, align 8
  %1091 = lshr i64 %1090, 40
  %1092 = trunc i64 %1091 to i8
  %1093 = load i8*, i8** %161, align 8
  %1094 = load i64, i64* %160, align 8
  %1095 = add i64 %1094, 2
  %1096 = getelementptr inbounds i8, i8* %1093, i64 %1095
  store i8 %1092, i8* %1096, align 1
  %1097 = load i64, i64* %159, align 8
  %1098 = lshr i64 %1097, 32
  %1099 = trunc i64 %1098 to i8
  %1100 = load i8*, i8** %161, align 8
  %1101 = load i64, i64* %160, align 8
  %1102 = add i64 %1101, 3
  %1103 = getelementptr inbounds i8, i8* %1100, i64 %1102
  store i8 %1099, i8* %1103, align 1
  %1104 = load i64, i64* %159, align 8
  %1105 = lshr i64 %1104, 24
  %1106 = trunc i64 %1105 to i8
  %1107 = load i8*, i8** %161, align 8
  %1108 = load i64, i64* %160, align 8
  %1109 = add i64 %1108, 4
  %1110 = getelementptr inbounds i8, i8* %1107, i64 %1109
  store i8 %1106, i8* %1110, align 1
  %1111 = load i64, i64* %159, align 8
  %1112 = lshr i64 %1111, 16
  %1113 = trunc i64 %1112 to i8
  %1114 = load i8*, i8** %161, align 8
  %1115 = load i64, i64* %160, align 8
  %1116 = add i64 %1115, 5
  %1117 = getelementptr inbounds i8, i8* %1114, i64 %1116
  store i8 %1113, i8* %1117, align 1
  %1118 = load i64, i64* %160, align 8
  %1119 = add i64 %1118, 6
  store i64 %1119, i64* %160, align 8
  br label %1120

1120:                                             ; preds = %1081, %1076, %1066
  %1121 = load i64, i64* %159, align 8
  %1122 = shl i64 %1121, 48
  store i64 %1122, i64* %159, align 8
  %1123 = load i32, i32* %158, align 8
  %1124 = add nsw i32 %1123, 48
  store i32 %1124, i32* %158, align 8
  br label %1125

1125:                                             ; preds = %1120, %964, %962
  store i32 0, i32* %156, align 8
  br label %1126

1126:                                             ; preds = %1125, %790
  %1127 = load i64, i64* %165, align 8
  %1128 = load i64, i64* %166, align 8
  %1129 = icmp eq i64 %1127, %1128
  br i1 %1129, label %1307, label %1130

1130:                                             ; preds = %1126
  %1131 = load i32, i32* %158, align 8
  %1132 = load i64, i64* %159, align 8
  br label %1133

1133:                                             ; preds = %1298, %1130
  %1134 = phi i64 [ %1128, %1130 ], [ %1299, %1298 ]
  %1135 = phi i64 [ %1127, %1130 ], [ %1300, %1298 ]
  %1136 = phi i64 [ %1132, %1130 ], [ %1301, %1298 ]
  %1137 = phi i32 [ %1131, %1130 ], [ %1302, %1298 ]
  %1138 = phi i64 [ 0, %1130 ], [ %1303, %1298 ]
  %1139 = inttoptr i64 %1134 to i32*
  %1140 = getelementptr inbounds i32, i32* %1139, i64 %1138
  %1141 = load i32, i32* %1140, align 4
  %1142 = sext i32 %1141 to i64
  %1143 = add nsw i32 %1137, -1
  store i32 %1143, i32* %158, align 8
  %1144 = zext i32 %1143 to i64
  %1145 = shl i64 %1142, %1144
  %1146 = or i64 %1145, %1136
  store i64 %1146, i64* %159, align 8
  %1147 = icmp slt i32 %1137, 18
  br i1 %1147, label %1148, label %1298

1148:                                             ; preds = %1133
  %1149 = load i64, i64* %160, align 8
  %1150 = add i64 %1149, 12
  %1151 = icmp ugt i64 %1150, 16384
  br i1 %1151, label %1152, label %1155, !prof !23

1152:                                             ; preds = %1148
  call fastcc void @_ZN3jxl4jpeg12_GLOBAL__N_110SwapBufferEPNS0_13JpegBitWriterE(%"struct.jxl::jpeg::JpegBitWriter"* %130) #10
  %1153 = load i64, i64* %160, align 8
  %1154 = load i64, i64* %159, align 8
  br label %1155

1155:                                             ; preds = %1152, %1148
  %1156 = phi i64 [ %1146, %1148 ], [ %1154, %1152 ]
  %1157 = phi i64 [ %1149, %1148 ], [ %1153, %1152 ]
  %1158 = or i64 %1156, 65535
  %1159 = xor i64 %1158, -65536
  %1160 = add i64 %1159, -72340172838076673
  %1161 = and i64 %1159, -9187201950435770368
  %1162 = xor i64 %1161, -9187201950435770368
  %1163 = and i64 %1162, %1160
  %1164 = icmp eq i64 %1163, 0
  %1165 = lshr i64 %1156, 56
  %1166 = trunc i64 %1165 to i8
  %1167 = load i8*, i8** %161, align 8
  br i1 %1164, label %1252, label %1168

1168:                                             ; preds = %1155
  %1169 = add i64 %1157, 1
  store i64 %1169, i64* %160, align 8
  %1170 = getelementptr inbounds i8, i8* %1167, i64 %1157
  store i8 %1166, i8* %1170, align 1
  %1171 = icmp eq i64 %1165, 255
  br i1 %1171, label %1172, label %1177

1172:                                             ; preds = %1168
  %1173 = load i8*, i8** %161, align 8
  %1174 = load i64, i64* %160, align 8
  %1175 = add i64 %1174, 1
  store i64 %1175, i64* %160, align 8
  %1176 = getelementptr inbounds i8, i8* %1173, i64 %1174
  store i8 0, i8* %1176, align 1
  br label %1177

1177:                                             ; preds = %1172, %1168
  %1178 = load i64, i64* %159, align 8
  %1179 = lshr i64 %1178, 48
  %1180 = trunc i64 %1179 to i8
  %1181 = load i8*, i8** %161, align 8
  %1182 = load i64, i64* %160, align 8
  %1183 = add i64 %1182, 1
  store i64 %1183, i64* %160, align 8
  %1184 = getelementptr inbounds i8, i8* %1181, i64 %1182
  store i8 %1180, i8* %1184, align 1
  %1185 = and i64 %1178, 71776119061217280
  %1186 = icmp eq i64 %1185, 71776119061217280
  br i1 %1186, label %1187, label %1192

1187:                                             ; preds = %1177
  %1188 = load i8*, i8** %161, align 8
  %1189 = load i64, i64* %160, align 8
  %1190 = add i64 %1189, 1
  store i64 %1190, i64* %160, align 8
  %1191 = getelementptr inbounds i8, i8* %1188, i64 %1189
  store i8 0, i8* %1191, align 1
  br label %1192

1192:                                             ; preds = %1187, %1177
  %1193 = load i64, i64* %159, align 8
  %1194 = lshr i64 %1193, 40
  %1195 = trunc i64 %1194 to i8
  %1196 = load i8*, i8** %161, align 8
  %1197 = load i64, i64* %160, align 8
  %1198 = add i64 %1197, 1
  store i64 %1198, i64* %160, align 8
  %1199 = getelementptr inbounds i8, i8* %1196, i64 %1197
  store i8 %1195, i8* %1199, align 1
  %1200 = and i64 %1193, 280375465082880
  %1201 = icmp eq i64 %1200, 280375465082880
  br i1 %1201, label %1202, label %1207

1202:                                             ; preds = %1192
  %1203 = load i8*, i8** %161, align 8
  %1204 = load i64, i64* %160, align 8
  %1205 = add i64 %1204, 1
  store i64 %1205, i64* %160, align 8
  %1206 = getelementptr inbounds i8, i8* %1203, i64 %1204
  store i8 0, i8* %1206, align 1
  br label %1207

1207:                                             ; preds = %1202, %1192
  %1208 = load i64, i64* %159, align 8
  %1209 = lshr i64 %1208, 32
  %1210 = trunc i64 %1209 to i8
  %1211 = load i8*, i8** %161, align 8
  %1212 = load i64, i64* %160, align 8
  %1213 = add i64 %1212, 1
  store i64 %1213, i64* %160, align 8
  %1214 = getelementptr inbounds i8, i8* %1211, i64 %1212
  store i8 %1210, i8* %1214, align 1
  %1215 = and i64 %1208, 1095216660480
  %1216 = icmp eq i64 %1215, 1095216660480
  br i1 %1216, label %1217, label %1222

1217:                                             ; preds = %1207
  %1218 = load i8*, i8** %161, align 8
  %1219 = load i64, i64* %160, align 8
  %1220 = add i64 %1219, 1
  store i64 %1220, i64* %160, align 8
  %1221 = getelementptr inbounds i8, i8* %1218, i64 %1219
  store i8 0, i8* %1221, align 1
  br label %1222

1222:                                             ; preds = %1217, %1207
  %1223 = load i64, i64* %159, align 8
  %1224 = lshr i64 %1223, 24
  %1225 = trunc i64 %1224 to i8
  %1226 = load i8*, i8** %161, align 8
  %1227 = load i64, i64* %160, align 8
  %1228 = add i64 %1227, 1
  store i64 %1228, i64* %160, align 8
  %1229 = getelementptr inbounds i8, i8* %1226, i64 %1227
  store i8 %1225, i8* %1229, align 1
  %1230 = and i64 %1223, 4278190080
  %1231 = icmp eq i64 %1230, 4278190080
  br i1 %1231, label %1232, label %1237

1232:                                             ; preds = %1222
  %1233 = load i8*, i8** %161, align 8
  %1234 = load i64, i64* %160, align 8
  %1235 = add i64 %1234, 1
  store i64 %1235, i64* %160, align 8
  %1236 = getelementptr inbounds i8, i8* %1233, i64 %1234
  store i8 0, i8* %1236, align 1
  br label %1237

1237:                                             ; preds = %1232, %1222
  %1238 = load i64, i64* %159, align 8
  %1239 = lshr i64 %1238, 16
  %1240 = trunc i64 %1239 to i8
  %1241 = load i8*, i8** %161, align 8
  %1242 = load i64, i64* %160, align 8
  %1243 = add i64 %1242, 1
  store i64 %1243, i64* %160, align 8
  %1244 = getelementptr inbounds i8, i8* %1241, i64 %1242
  store i8 %1240, i8* %1244, align 1
  %1245 = and i64 %1238, 16711680
  %1246 = icmp eq i64 %1245, 16711680
  br i1 %1246, label %1247, label %1291

1247:                                             ; preds = %1237
  %1248 = load i8*, i8** %161, align 8
  %1249 = load i64, i64* %160, align 8
  %1250 = add i64 %1249, 1
  store i64 %1250, i64* %160, align 8
  %1251 = getelementptr inbounds i8, i8* %1248, i64 %1249
  store i8 0, i8* %1251, align 1
  br label %1291

1252:                                             ; preds = %1155
  %1253 = getelementptr inbounds i8, i8* %1167, i64 %1157
  store i8 %1166, i8* %1253, align 1
  %1254 = load i64, i64* %159, align 8
  %1255 = lshr i64 %1254, 48
  %1256 = trunc i64 %1255 to i8
  %1257 = load i8*, i8** %161, align 8
  %1258 = load i64, i64* %160, align 8
  %1259 = add i64 %1258, 1
  %1260 = getelementptr inbounds i8, i8* %1257, i64 %1259
  store i8 %1256, i8* %1260, align 1
  %1261 = load i64, i64* %159, align 8
  %1262 = lshr i64 %1261, 40
  %1263 = trunc i64 %1262 to i8
  %1264 = load i8*, i8** %161, align 8
  %1265 = load i64, i64* %160, align 8
  %1266 = add i64 %1265, 2
  %1267 = getelementptr inbounds i8, i8* %1264, i64 %1266
  store i8 %1263, i8* %1267, align 1
  %1268 = load i64, i64* %159, align 8
  %1269 = lshr i64 %1268, 32
  %1270 = trunc i64 %1269 to i8
  %1271 = load i8*, i8** %161, align 8
  %1272 = load i64, i64* %160, align 8
  %1273 = add i64 %1272, 3
  %1274 = getelementptr inbounds i8, i8* %1271, i64 %1273
  store i8 %1270, i8* %1274, align 1
  %1275 = load i64, i64* %159, align 8
  %1276 = lshr i64 %1275, 24
  %1277 = trunc i64 %1276 to i8
  %1278 = load i8*, i8** %161, align 8
  %1279 = load i64, i64* %160, align 8
  %1280 = add i64 %1279, 4
  %1281 = getelementptr inbounds i8, i8* %1278, i64 %1280
  store i8 %1277, i8* %1281, align 1
  %1282 = load i64, i64* %159, align 8
  %1283 = lshr i64 %1282, 16
  %1284 = trunc i64 %1283 to i8
  %1285 = load i8*, i8** %161, align 8
  %1286 = load i64, i64* %160, align 8
  %1287 = add i64 %1286, 5
  %1288 = getelementptr inbounds i8, i8* %1285, i64 %1287
  store i8 %1284, i8* %1288, align 1
  %1289 = load i64, i64* %160, align 8
  %1290 = add i64 %1289, 6
  store i64 %1290, i64* %160, align 8
  br label %1291

1291:                                             ; preds = %1252, %1247, %1237
  %1292 = load i64, i64* %159, align 8
  %1293 = shl i64 %1292, 48
  store i64 %1293, i64* %159, align 8
  %1294 = load i32, i32* %158, align 8
  %1295 = add nsw i32 %1294, 48
  store i32 %1295, i32* %158, align 8
  %1296 = load i64, i64* %165, align 8
  %1297 = load i64, i64* %166, align 8
  br label %1298

1298:                                             ; preds = %1291, %1133
  %1299 = phi i64 [ %1134, %1133 ], [ %1297, %1291 ]
  %1300 = phi i64 [ %1135, %1133 ], [ %1296, %1291 ]
  %1301 = phi i64 [ %1146, %1133 ], [ %1293, %1291 ]
  %1302 = phi i32 [ %1143, %1133 ], [ %1295, %1291 ]
  %1303 = add nuw i64 %1138, 1
  %1304 = sub i64 %1300, %1299
  %1305 = ashr exact i64 %1304, 2
  %1306 = icmp ult i64 %1303, %1305
  br i1 %1306, label %1133, label %1307

1307:                                             ; preds = %1298, %1126
  %1308 = phi i64 [ %1127, %1126 ], [ %1299, %1298 ]
  store i64 %1308, i64* %165, align 8
  %1309 = load i64, i64* %177, align 8
  %1310 = load i64, i64* %180, align 8
  %1311 = load i64, i64* %181, align 8
  %1312 = sub i64 %1310, %1311
  %1313 = ashr exact i64 %1312, 2
  %1314 = icmp ult i64 %1309, %1313
  br i1 %1314, label %1315, label %1320

1315:                                             ; preds = %1307
  %1316 = add nuw i64 %1309, 1
  store i64 %1316, i64* %177, align 8
  %1317 = load i32*, i32** %182, align 8
  %1318 = getelementptr inbounds i32, i32* %1317, i64 %1309
  %1319 = load i32, i32* %1318, align 4
  br label %1320

1320:                                             ; preds = %1307, %1315
  %1321 = phi i32 [ %1319, %1315 ], [ -1, %1307 ]
  store i32 %1321, i32* %176, align 8
  %1322 = load i32, i32* %175, align 8
  br label %1323

1323:                                             ; preds = %1320, %778
  %1324 = phi i32 [ %1322, %1320 ], [ %779, %778 ]
  %1325 = load i32, i32* %183, align 8
  %1326 = icmp eq i32 %1324, %1325
  br i1 %1326, label %1327, label %1344

1327:                                             ; preds = %1323
  %1328 = load i64, i64* %185, align 8
  %1329 = load %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*, %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"** %186, align 8
  %1330 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo", %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* %1329, i64 %1328, i32 1
  %1331 = load i32, i32* %1330, align 4
  %1332 = add i64 %1328, 1
  store i64 %1332, i64* %185, align 8
  %1333 = load i64, i64* %188, align 8
  %1334 = load i64, i64* %189, align 8
  %1335 = sub i64 %1333, %1334
  %1336 = ashr exact i64 %1335, 3
  %1337 = icmp ult i64 %1332, %1336
  br i1 %1337, label %1338, label %1342

1338:                                             ; preds = %1327
  %1339 = inttoptr i64 %1334 to %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*
  %1340 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo", %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* %1339, i64 %1332, i32 0
  %1341 = load i32, i32* %1340, align 4
  br label %1342

1342:                                             ; preds = %1327, %1338
  %1343 = phi i32 [ %1341, %1338 ], [ -1, %1327 ]
  store i32 %1343, i32* %183, align 8
  br label %1344

1344:                                             ; preds = %1342, %1323
  %1345 = phi i32 [ %1331, %1342 ], [ 0, %1323 ]
  %1346 = shl i32 %787, 6
  %1347 = sext i32 %1346 to i64
  %1348 = load i16*, i16** %773, align 8
  %1349 = getelementptr inbounds i16, i16* %1348, i64 %1347
  %1350 = load i32, i32* %748, align 4
  %1351 = zext i32 %1350 to i64
  %1352 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 3, i64 %1351
  call fastcc void @_ZN3jxl4jpeg12_GLOBAL__N_125EncodeDCTBlockProgressiveEPKsRKNS0_16HuffmanCodeTableES6_iiiiPNS0_14DCTCodingStateEPsPNS0_13JpegBitWriterE(i16* %1349, %"struct.jxl::jpeg::HuffmanCodeTable"* dereferenceable(2048) %756, %"struct.jxl::jpeg::HuffmanCodeTable"* dereferenceable(2048) %761, i32 %145, i32 %148, i32 %142, i32 %1345, %"struct.jxl::jpeg::DCTCodingState"* %131, i16* %1352, %"struct.jxl::jpeg::JpegBitWriter"* %130)
  %1353 = load i32, i32* %175, align 8
  %1354 = add nsw i32 %1353, 1
  store i32 %1354, i32* %175, align 8
  %1355 = add nuw nsw i32 %780, 1
  %1356 = icmp eq i32 %1355, %767
  br i1 %1356, label %1357, label %778

1357:                                             ; preds = %1344, %774
  %1358 = add nuw nsw i32 %775, 1
  %1359 = icmp eq i32 %1358, %764
  br i1 %1359, label %1360, label %774

1360:                                             ; preds = %1357
  %1361 = load i32, i32* %132, align 8
  br label %1362

1362:                                             ; preds = %1360, %745
  %1363 = phi i32 [ %1361, %1360 ], [ %746, %745 ]
  %1364 = add nuw nsw i64 %747, 1
  %1365 = zext i32 %1363 to i64
  %1366 = icmp ult i64 %1364, %1365
  br i1 %1366, label %745, label %1367

1367:                                             ; preds = %1362, %742
  %1368 = load i32, i32* %155, align 8
  %1369 = add nsw i32 %1368, -1
  store i32 %1369, i32* %155, align 8
  %1370 = add nuw nsw i32 %196, 1
  %1371 = load i32, i32* %3, align 4
  %1372 = icmp slt i32 %1370, %1371
  br i1 %1372, label %195, label %1373

1373:                                             ; preds = %1367
  %1374 = load i32, i32* %150, align 4
  br label %1375

1375:                                             ; preds = %1373, %191
  %1376 = phi i32 [ %1374, %1373 ], [ %192, %191 ]
  %1377 = phi i32 [ %1371, %1373 ], [ %193, %191 ]
  %1378 = add nsw i32 %1376, 1
  store i32 %1378, i32* %150, align 4
  %1379 = icmp slt i32 %1378, %149
  br i1 %1379, label %191, label %1380

1380:                                             ; preds = %1375
  %1381 = load i32, i32* %4, align 4
  br label %1382

1382:                                             ; preds = %1380, %129
  %1383 = phi i32 [ %149, %129 ], [ %1381, %1380 ]
  %1384 = phi i32 [ %151, %129 ], [ %1378, %1380 ]
  %1385 = icmp slt i32 %1384, %1383
  br i1 %1385, label %1386, label %1391

1386:                                             ; preds = %1382
  %1387 = getelementptr inbounds %"struct.jxl::jpeg::JpegBitWriter", %"struct.jxl::jpeg::JpegBitWriter"* %130, i64 0, i32 0
  %1388 = load i8, i8* %1387, align 8, !range !2
  %1389 = icmp eq i8 %1388, 0
  %1390 = select i1 %1389, i32 2, i32 0
  br label %2013

1391:                                             ; preds = %1382
  %1392 = getelementptr inbounds %"struct.jxl::jpeg::DCTCodingState", %"struct.jxl::jpeg::DCTCodingState"* %131, i64 0, i32 0
  %1393 = load i32, i32* %1392, align 8
  %1394 = icmp sgt i32 %1393, 0
  br i1 %1394, label %1395, label %1738

1395:                                             ; preds = %1391
  %1396 = call i32 @llvm.ctlz.i32(i32 %1393, i1 true) #10, !range !22
  %1397 = xor i32 %1396, 31
  %1398 = shl nuw nsw i32 %1397, 4
  %1399 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 8, i32 1
  %1400 = load %"struct.jxl::jpeg::HuffmanCodeTable"*, %"struct.jxl::jpeg::HuffmanCodeTable"** %1399, align 8
  %1401 = zext i32 %1398 to i64
  %1402 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanCodeTable", %"struct.jxl::jpeg::HuffmanCodeTable"* %1400, i64 0, i32 0, i64 %1401
  %1403 = load i32, i32* %1402, align 4
  %1404 = icmp eq i32 %1403, 0
  br i1 %1404, label %1405, label %1407

1405:                                             ; preds = %1395
  %1406 = getelementptr inbounds %"struct.jxl::jpeg::JpegBitWriter", %"struct.jxl::jpeg::JpegBitWriter"* %130, i64 0, i32 0
  store i8 0, i8* %1406, align 8
  br label %1570

1407:                                             ; preds = %1395
  %1408 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanCodeTable", %"struct.jxl::jpeg::HuffmanCodeTable"* %1400, i64 0, i32 1, i64 %1401
  %1409 = load i32, i32* %1408, align 4
  %1410 = sext i32 %1409 to i64
  %1411 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2, i32 7
  %1412 = load i32, i32* %1411, align 8
  %1413 = sub nsw i32 %1412, %1403
  store i32 %1413, i32* %1411, align 8
  %1414 = zext i32 %1413 to i64
  %1415 = shl i64 %1410, %1414
  %1416 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2, i32 6
  %1417 = load i64, i64* %1416, align 8
  %1418 = or i64 %1415, %1417
  store i64 %1418, i64* %1416, align 8
  %1419 = icmp slt i32 %1413, 17
  br i1 %1419, label %1420, label %1570

1420:                                             ; preds = %1407
  %1421 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2, i32 5
  %1422 = load i64, i64* %1421, align 8
  %1423 = add i64 %1422, 12
  %1424 = icmp ugt i64 %1423, 16384
  br i1 %1424, label %1425, label %1428, !prof !23

1425:                                             ; preds = %1420
  call fastcc void @_ZN3jxl4jpeg12_GLOBAL__N_110SwapBufferEPNS0_13JpegBitWriterE(%"struct.jxl::jpeg::JpegBitWriter"* %130) #10
  %1426 = load i64, i64* %1421, align 8
  %1427 = load i64, i64* %1416, align 8
  br label %1428

1428:                                             ; preds = %1425, %1420
  %1429 = phi i64 [ %1418, %1420 ], [ %1427, %1425 ]
  %1430 = phi i64 [ %1422, %1420 ], [ %1426, %1425 ]
  %1431 = or i64 %1429, 65535
  %1432 = xor i64 %1431, -65536
  %1433 = add i64 %1432, -72340172838076673
  %1434 = and i64 %1432, -9187201950435770368
  %1435 = xor i64 %1434, -9187201950435770368
  %1436 = and i64 %1435, %1433
  %1437 = icmp eq i64 %1436, 0
  %1438 = lshr i64 %1429, 56
  %1439 = trunc i64 %1438 to i8
  %1440 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2, i32 4
  %1441 = load i8*, i8** %1440, align 8
  br i1 %1437, label %1526, label %1442

1442:                                             ; preds = %1428
  %1443 = add i64 %1430, 1
  store i64 %1443, i64* %1421, align 8
  %1444 = getelementptr inbounds i8, i8* %1441, i64 %1430
  store i8 %1439, i8* %1444, align 1
  %1445 = icmp eq i64 %1438, 255
  br i1 %1445, label %1446, label %1451

1446:                                             ; preds = %1442
  %1447 = load i8*, i8** %1440, align 8
  %1448 = load i64, i64* %1421, align 8
  %1449 = add i64 %1448, 1
  store i64 %1449, i64* %1421, align 8
  %1450 = getelementptr inbounds i8, i8* %1447, i64 %1448
  store i8 0, i8* %1450, align 1
  br label %1451

1451:                                             ; preds = %1446, %1442
  %1452 = load i64, i64* %1416, align 8
  %1453 = lshr i64 %1452, 48
  %1454 = trunc i64 %1453 to i8
  %1455 = load i8*, i8** %1440, align 8
  %1456 = load i64, i64* %1421, align 8
  %1457 = add i64 %1456, 1
  store i64 %1457, i64* %1421, align 8
  %1458 = getelementptr inbounds i8, i8* %1455, i64 %1456
  store i8 %1454, i8* %1458, align 1
  %1459 = and i64 %1452, 71776119061217280
  %1460 = icmp eq i64 %1459, 71776119061217280
  br i1 %1460, label %1461, label %1466

1461:                                             ; preds = %1451
  %1462 = load i8*, i8** %1440, align 8
  %1463 = load i64, i64* %1421, align 8
  %1464 = add i64 %1463, 1
  store i64 %1464, i64* %1421, align 8
  %1465 = getelementptr inbounds i8, i8* %1462, i64 %1463
  store i8 0, i8* %1465, align 1
  br label %1466

1466:                                             ; preds = %1461, %1451
  %1467 = load i64, i64* %1416, align 8
  %1468 = lshr i64 %1467, 40
  %1469 = trunc i64 %1468 to i8
  %1470 = load i8*, i8** %1440, align 8
  %1471 = load i64, i64* %1421, align 8
  %1472 = add i64 %1471, 1
  store i64 %1472, i64* %1421, align 8
  %1473 = getelementptr inbounds i8, i8* %1470, i64 %1471
  store i8 %1469, i8* %1473, align 1
  %1474 = and i64 %1467, 280375465082880
  %1475 = icmp eq i64 %1474, 280375465082880
  br i1 %1475, label %1476, label %1481

1476:                                             ; preds = %1466
  %1477 = load i8*, i8** %1440, align 8
  %1478 = load i64, i64* %1421, align 8
  %1479 = add i64 %1478, 1
  store i64 %1479, i64* %1421, align 8
  %1480 = getelementptr inbounds i8, i8* %1477, i64 %1478
  store i8 0, i8* %1480, align 1
  br label %1481

1481:                                             ; preds = %1476, %1466
  %1482 = load i64, i64* %1416, align 8
  %1483 = lshr i64 %1482, 32
  %1484 = trunc i64 %1483 to i8
  %1485 = load i8*, i8** %1440, align 8
  %1486 = load i64, i64* %1421, align 8
  %1487 = add i64 %1486, 1
  store i64 %1487, i64* %1421, align 8
  %1488 = getelementptr inbounds i8, i8* %1485, i64 %1486
  store i8 %1484, i8* %1488, align 1
  %1489 = and i64 %1482, 1095216660480
  %1490 = icmp eq i64 %1489, 1095216660480
  br i1 %1490, label %1491, label %1496

1491:                                             ; preds = %1481
  %1492 = load i8*, i8** %1440, align 8
  %1493 = load i64, i64* %1421, align 8
  %1494 = add i64 %1493, 1
  store i64 %1494, i64* %1421, align 8
  %1495 = getelementptr inbounds i8, i8* %1492, i64 %1493
  store i8 0, i8* %1495, align 1
  br label %1496

1496:                                             ; preds = %1491, %1481
  %1497 = load i64, i64* %1416, align 8
  %1498 = lshr i64 %1497, 24
  %1499 = trunc i64 %1498 to i8
  %1500 = load i8*, i8** %1440, align 8
  %1501 = load i64, i64* %1421, align 8
  %1502 = add i64 %1501, 1
  store i64 %1502, i64* %1421, align 8
  %1503 = getelementptr inbounds i8, i8* %1500, i64 %1501
  store i8 %1499, i8* %1503, align 1
  %1504 = and i64 %1497, 4278190080
  %1505 = icmp eq i64 %1504, 4278190080
  br i1 %1505, label %1506, label %1511

1506:                                             ; preds = %1496
  %1507 = load i8*, i8** %1440, align 8
  %1508 = load i64, i64* %1421, align 8
  %1509 = add i64 %1508, 1
  store i64 %1509, i64* %1421, align 8
  %1510 = getelementptr inbounds i8, i8* %1507, i64 %1508
  store i8 0, i8* %1510, align 1
  br label %1511

1511:                                             ; preds = %1506, %1496
  %1512 = load i64, i64* %1416, align 8
  %1513 = lshr i64 %1512, 16
  %1514 = trunc i64 %1513 to i8
  %1515 = load i8*, i8** %1440, align 8
  %1516 = load i64, i64* %1421, align 8
  %1517 = add i64 %1516, 1
  store i64 %1517, i64* %1421, align 8
  %1518 = getelementptr inbounds i8, i8* %1515, i64 %1516
  store i8 %1514, i8* %1518, align 1
  %1519 = and i64 %1512, 16711680
  %1520 = icmp eq i64 %1519, 16711680
  br i1 %1520, label %1521, label %1565

1521:                                             ; preds = %1511
  %1522 = load i8*, i8** %1440, align 8
  %1523 = load i64, i64* %1421, align 8
  %1524 = add i64 %1523, 1
  store i64 %1524, i64* %1421, align 8
  %1525 = getelementptr inbounds i8, i8* %1522, i64 %1523
  store i8 0, i8* %1525, align 1
  br label %1565

1526:                                             ; preds = %1428
  %1527 = getelementptr inbounds i8, i8* %1441, i64 %1430
  store i8 %1439, i8* %1527, align 1
  %1528 = load i64, i64* %1416, align 8
  %1529 = lshr i64 %1528, 48
  %1530 = trunc i64 %1529 to i8
  %1531 = load i8*, i8** %1440, align 8
  %1532 = load i64, i64* %1421, align 8
  %1533 = add i64 %1532, 1
  %1534 = getelementptr inbounds i8, i8* %1531, i64 %1533
  store i8 %1530, i8* %1534, align 1
  %1535 = load i64, i64* %1416, align 8
  %1536 = lshr i64 %1535, 40
  %1537 = trunc i64 %1536 to i8
  %1538 = load i8*, i8** %1440, align 8
  %1539 = load i64, i64* %1421, align 8
  %1540 = add i64 %1539, 2
  %1541 = getelementptr inbounds i8, i8* %1538, i64 %1540
  store i8 %1537, i8* %1541, align 1
  %1542 = load i64, i64* %1416, align 8
  %1543 = lshr i64 %1542, 32
  %1544 = trunc i64 %1543 to i8
  %1545 = load i8*, i8** %1440, align 8
  %1546 = load i64, i64* %1421, align 8
  %1547 = add i64 %1546, 3
  %1548 = getelementptr inbounds i8, i8* %1545, i64 %1547
  store i8 %1544, i8* %1548, align 1
  %1549 = load i64, i64* %1416, align 8
  %1550 = lshr i64 %1549, 24
  %1551 = trunc i64 %1550 to i8
  %1552 = load i8*, i8** %1440, align 8
  %1553 = load i64, i64* %1421, align 8
  %1554 = add i64 %1553, 4
  %1555 = getelementptr inbounds i8, i8* %1552, i64 %1554
  store i8 %1551, i8* %1555, align 1
  %1556 = load i64, i64* %1416, align 8
  %1557 = lshr i64 %1556, 16
  %1558 = trunc i64 %1557 to i8
  %1559 = load i8*, i8** %1440, align 8
  %1560 = load i64, i64* %1421, align 8
  %1561 = add i64 %1560, 5
  %1562 = getelementptr inbounds i8, i8* %1559, i64 %1561
  store i8 %1558, i8* %1562, align 1
  %1563 = load i64, i64* %1421, align 8
  %1564 = add i64 %1563, 6
  store i64 %1564, i64* %1421, align 8
  br label %1565

1565:                                             ; preds = %1526, %1521, %1511
  %1566 = load i64, i64* %1416, align 8
  %1567 = shl i64 %1566, 48
  store i64 %1567, i64* %1416, align 8
  %1568 = load i32, i32* %1411, align 8
  %1569 = add nsw i32 %1568, 48
  store i32 %1569, i32* %1411, align 8
  br label %1570

1570:                                             ; preds = %1565, %1407, %1405
  %1571 = icmp eq i32 %1397, 0
  br i1 %1571, label %1737, label %1572

1572:                                             ; preds = %1570
  %1573 = load i32, i32* %1392, align 8
  %1574 = shl nsw i32 -1, %1397
  %1575 = xor i32 %1574, -1
  %1576 = and i32 %1573, %1575
  %1577 = sext i32 %1576 to i64
  %1578 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2, i32 7
  %1579 = load i32, i32* %1578, align 8
  %1580 = sub nsw i32 %1579, %1397
  store i32 %1580, i32* %1578, align 8
  %1581 = zext i32 %1580 to i64
  %1582 = shl i64 %1577, %1581
  %1583 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2, i32 6
  %1584 = load i64, i64* %1583, align 8
  %1585 = or i64 %1582, %1584
  store i64 %1585, i64* %1583, align 8
  %1586 = icmp slt i32 %1580, 17
  br i1 %1586, label %1587, label %1737

1587:                                             ; preds = %1572
  %1588 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2, i32 5
  %1589 = load i64, i64* %1588, align 8
  %1590 = add i64 %1589, 12
  %1591 = icmp ugt i64 %1590, 16384
  br i1 %1591, label %1592, label %1595, !prof !23

1592:                                             ; preds = %1587
  call fastcc void @_ZN3jxl4jpeg12_GLOBAL__N_110SwapBufferEPNS0_13JpegBitWriterE(%"struct.jxl::jpeg::JpegBitWriter"* %130) #10
  %1593 = load i64, i64* %1588, align 8
  %1594 = load i64, i64* %1583, align 8
  br label %1595

1595:                                             ; preds = %1592, %1587
  %1596 = phi i64 [ %1585, %1587 ], [ %1594, %1592 ]
  %1597 = phi i64 [ %1589, %1587 ], [ %1593, %1592 ]
  %1598 = or i64 %1596, 65535
  %1599 = xor i64 %1598, -65536
  %1600 = add i64 %1599, -72340172838076673
  %1601 = and i64 %1599, -9187201950435770368
  %1602 = xor i64 %1601, -9187201950435770368
  %1603 = and i64 %1602, %1600
  %1604 = icmp eq i64 %1603, 0
  %1605 = lshr i64 %1596, 56
  %1606 = trunc i64 %1605 to i8
  %1607 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2, i32 4
  %1608 = load i8*, i8** %1607, align 8
  br i1 %1604, label %1693, label %1609

1609:                                             ; preds = %1595
  %1610 = add i64 %1597, 1
  store i64 %1610, i64* %1588, align 8
  %1611 = getelementptr inbounds i8, i8* %1608, i64 %1597
  store i8 %1606, i8* %1611, align 1
  %1612 = icmp eq i64 %1605, 255
  br i1 %1612, label %1613, label %1618

1613:                                             ; preds = %1609
  %1614 = load i8*, i8** %1607, align 8
  %1615 = load i64, i64* %1588, align 8
  %1616 = add i64 %1615, 1
  store i64 %1616, i64* %1588, align 8
  %1617 = getelementptr inbounds i8, i8* %1614, i64 %1615
  store i8 0, i8* %1617, align 1
  br label %1618

1618:                                             ; preds = %1613, %1609
  %1619 = load i64, i64* %1583, align 8
  %1620 = lshr i64 %1619, 48
  %1621 = trunc i64 %1620 to i8
  %1622 = load i8*, i8** %1607, align 8
  %1623 = load i64, i64* %1588, align 8
  %1624 = add i64 %1623, 1
  store i64 %1624, i64* %1588, align 8
  %1625 = getelementptr inbounds i8, i8* %1622, i64 %1623
  store i8 %1621, i8* %1625, align 1
  %1626 = and i64 %1619, 71776119061217280
  %1627 = icmp eq i64 %1626, 71776119061217280
  br i1 %1627, label %1628, label %1633

1628:                                             ; preds = %1618
  %1629 = load i8*, i8** %1607, align 8
  %1630 = load i64, i64* %1588, align 8
  %1631 = add i64 %1630, 1
  store i64 %1631, i64* %1588, align 8
  %1632 = getelementptr inbounds i8, i8* %1629, i64 %1630
  store i8 0, i8* %1632, align 1
  br label %1633

1633:                                             ; preds = %1628, %1618
  %1634 = load i64, i64* %1583, align 8
  %1635 = lshr i64 %1634, 40
  %1636 = trunc i64 %1635 to i8
  %1637 = load i8*, i8** %1607, align 8
  %1638 = load i64, i64* %1588, align 8
  %1639 = add i64 %1638, 1
  store i64 %1639, i64* %1588, align 8
  %1640 = getelementptr inbounds i8, i8* %1637, i64 %1638
  store i8 %1636, i8* %1640, align 1
  %1641 = and i64 %1634, 280375465082880
  %1642 = icmp eq i64 %1641, 280375465082880
  br i1 %1642, label %1643, label %1648

1643:                                             ; preds = %1633
  %1644 = load i8*, i8** %1607, align 8
  %1645 = load i64, i64* %1588, align 8
  %1646 = add i64 %1645, 1
  store i64 %1646, i64* %1588, align 8
  %1647 = getelementptr inbounds i8, i8* %1644, i64 %1645
  store i8 0, i8* %1647, align 1
  br label %1648

1648:                                             ; preds = %1643, %1633
  %1649 = load i64, i64* %1583, align 8
  %1650 = lshr i64 %1649, 32
  %1651 = trunc i64 %1650 to i8
  %1652 = load i8*, i8** %1607, align 8
  %1653 = load i64, i64* %1588, align 8
  %1654 = add i64 %1653, 1
  store i64 %1654, i64* %1588, align 8
  %1655 = getelementptr inbounds i8, i8* %1652, i64 %1653
  store i8 %1651, i8* %1655, align 1
  %1656 = and i64 %1649, 1095216660480
  %1657 = icmp eq i64 %1656, 1095216660480
  br i1 %1657, label %1658, label %1663

1658:                                             ; preds = %1648
  %1659 = load i8*, i8** %1607, align 8
  %1660 = load i64, i64* %1588, align 8
  %1661 = add i64 %1660, 1
  store i64 %1661, i64* %1588, align 8
  %1662 = getelementptr inbounds i8, i8* %1659, i64 %1660
  store i8 0, i8* %1662, align 1
  br label %1663

1663:                                             ; preds = %1658, %1648
  %1664 = load i64, i64* %1583, align 8
  %1665 = lshr i64 %1664, 24
  %1666 = trunc i64 %1665 to i8
  %1667 = load i8*, i8** %1607, align 8
  %1668 = load i64, i64* %1588, align 8
  %1669 = add i64 %1668, 1
  store i64 %1669, i64* %1588, align 8
  %1670 = getelementptr inbounds i8, i8* %1667, i64 %1668
  store i8 %1666, i8* %1670, align 1
  %1671 = and i64 %1664, 4278190080
  %1672 = icmp eq i64 %1671, 4278190080
  br i1 %1672, label %1673, label %1678

1673:                                             ; preds = %1663
  %1674 = load i8*, i8** %1607, align 8
  %1675 = load i64, i64* %1588, align 8
  %1676 = add i64 %1675, 1
  store i64 %1676, i64* %1588, align 8
  %1677 = getelementptr inbounds i8, i8* %1674, i64 %1675
  store i8 0, i8* %1677, align 1
  br label %1678

1678:                                             ; preds = %1673, %1663
  %1679 = load i64, i64* %1583, align 8
  %1680 = lshr i64 %1679, 16
  %1681 = trunc i64 %1680 to i8
  %1682 = load i8*, i8** %1607, align 8
  %1683 = load i64, i64* %1588, align 8
  %1684 = add i64 %1683, 1
  store i64 %1684, i64* %1588, align 8
  %1685 = getelementptr inbounds i8, i8* %1682, i64 %1683
  store i8 %1681, i8* %1685, align 1
  %1686 = and i64 %1679, 16711680
  %1687 = icmp eq i64 %1686, 16711680
  br i1 %1687, label %1688, label %1732

1688:                                             ; preds = %1678
  %1689 = load i8*, i8** %1607, align 8
  %1690 = load i64, i64* %1588, align 8
  %1691 = add i64 %1690, 1
  store i64 %1691, i64* %1588, align 8
  %1692 = getelementptr inbounds i8, i8* %1689, i64 %1690
  store i8 0, i8* %1692, align 1
  br label %1732

1693:                                             ; preds = %1595
  %1694 = getelementptr inbounds i8, i8* %1608, i64 %1597
  store i8 %1606, i8* %1694, align 1
  %1695 = load i64, i64* %1583, align 8
  %1696 = lshr i64 %1695, 48
  %1697 = trunc i64 %1696 to i8
  %1698 = load i8*, i8** %1607, align 8
  %1699 = load i64, i64* %1588, align 8
  %1700 = add i64 %1699, 1
  %1701 = getelementptr inbounds i8, i8* %1698, i64 %1700
  store i8 %1697, i8* %1701, align 1
  %1702 = load i64, i64* %1583, align 8
  %1703 = lshr i64 %1702, 40
  %1704 = trunc i64 %1703 to i8
  %1705 = load i8*, i8** %1607, align 8
  %1706 = load i64, i64* %1588, align 8
  %1707 = add i64 %1706, 2
  %1708 = getelementptr inbounds i8, i8* %1705, i64 %1707
  store i8 %1704, i8* %1708, align 1
  %1709 = load i64, i64* %1583, align 8
  %1710 = lshr i64 %1709, 32
  %1711 = trunc i64 %1710 to i8
  %1712 = load i8*, i8** %1607, align 8
  %1713 = load i64, i64* %1588, align 8
  %1714 = add i64 %1713, 3
  %1715 = getelementptr inbounds i8, i8* %1712, i64 %1714
  store i8 %1711, i8* %1715, align 1
  %1716 = load i64, i64* %1583, align 8
  %1717 = lshr i64 %1716, 24
  %1718 = trunc i64 %1717 to i8
  %1719 = load i8*, i8** %1607, align 8
  %1720 = load i64, i64* %1588, align 8
  %1721 = add i64 %1720, 4
  %1722 = getelementptr inbounds i8, i8* %1719, i64 %1721
  store i8 %1718, i8* %1722, align 1
  %1723 = load i64, i64* %1583, align 8
  %1724 = lshr i64 %1723, 16
  %1725 = trunc i64 %1724 to i8
  %1726 = load i8*, i8** %1607, align 8
  %1727 = load i64, i64* %1588, align 8
  %1728 = add i64 %1727, 5
  %1729 = getelementptr inbounds i8, i8* %1726, i64 %1728
  store i8 %1725, i8* %1729, align 1
  %1730 = load i64, i64* %1588, align 8
  %1731 = add i64 %1730, 6
  store i64 %1731, i64* %1588, align 8
  br label %1732

1732:                                             ; preds = %1693, %1688, %1678
  %1733 = load i64, i64* %1583, align 8
  %1734 = shl i64 %1733, 48
  store i64 %1734, i64* %1583, align 8
  %1735 = load i32, i32* %1578, align 8
  %1736 = add nsw i32 %1735, 48
  store i32 %1736, i32* %1578, align 8
  br label %1737

1737:                                             ; preds = %1732, %1572, %1570
  store i32 0, i32* %1392, align 8
  br label %1738

1738:                                             ; preds = %1737, %1391
  %1739 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 8, i32 2
  %1740 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 8, i32 2, i32 0, i32 1
  %1741 = bitcast i32** %1740 to i64*
  %1742 = load i64, i64* %1741, align 8
  %1743 = bitcast %"class.std::__1::vector.86"* %1739 to i64*
  %1744 = load i64, i64* %1743, align 8
  %1745 = icmp eq i64 %1742, %1744
  br i1 %1745, label %1927, label %1746

1746:                                             ; preds = %1738
  %1747 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2, i32 7
  %1748 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2, i32 6
  %1749 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2, i32 5
  %1750 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2, i32 4
  %1751 = load i32, i32* %1747, align 8
  %1752 = load i64, i64* %1748, align 8
  br label %1753

1753:                                             ; preds = %1918, %1746
  %1754 = phi i64 [ %1744, %1746 ], [ %1919, %1918 ]
  %1755 = phi i64 [ %1742, %1746 ], [ %1920, %1918 ]
  %1756 = phi i64 [ %1752, %1746 ], [ %1921, %1918 ]
  %1757 = phi i32 [ %1751, %1746 ], [ %1922, %1918 ]
  %1758 = phi i64 [ 0, %1746 ], [ %1923, %1918 ]
  %1759 = inttoptr i64 %1754 to i32*
  %1760 = getelementptr inbounds i32, i32* %1759, i64 %1758
  %1761 = load i32, i32* %1760, align 4
  %1762 = sext i32 %1761 to i64
  %1763 = add nsw i32 %1757, -1
  store i32 %1763, i32* %1747, align 8
  %1764 = zext i32 %1763 to i64
  %1765 = shl i64 %1762, %1764
  %1766 = or i64 %1765, %1756
  store i64 %1766, i64* %1748, align 8
  %1767 = icmp slt i32 %1757, 18
  br i1 %1767, label %1768, label %1918

1768:                                             ; preds = %1753
  %1769 = load i64, i64* %1749, align 8
  %1770 = add i64 %1769, 12
  %1771 = icmp ugt i64 %1770, 16384
  br i1 %1771, label %1772, label %1775, !prof !23

1772:                                             ; preds = %1768
  call fastcc void @_ZN3jxl4jpeg12_GLOBAL__N_110SwapBufferEPNS0_13JpegBitWriterE(%"struct.jxl::jpeg::JpegBitWriter"* %130) #10
  %1773 = load i64, i64* %1749, align 8
  %1774 = load i64, i64* %1748, align 8
  br label %1775

1775:                                             ; preds = %1772, %1768
  %1776 = phi i64 [ %1766, %1768 ], [ %1774, %1772 ]
  %1777 = phi i64 [ %1769, %1768 ], [ %1773, %1772 ]
  %1778 = or i64 %1776, 65535
  %1779 = xor i64 %1778, -65536
  %1780 = add i64 %1779, -72340172838076673
  %1781 = and i64 %1779, -9187201950435770368
  %1782 = xor i64 %1781, -9187201950435770368
  %1783 = and i64 %1782, %1780
  %1784 = icmp eq i64 %1783, 0
  %1785 = lshr i64 %1776, 56
  %1786 = trunc i64 %1785 to i8
  %1787 = load i8*, i8** %1750, align 8
  br i1 %1784, label %1872, label %1788

1788:                                             ; preds = %1775
  %1789 = add i64 %1777, 1
  store i64 %1789, i64* %1749, align 8
  %1790 = getelementptr inbounds i8, i8* %1787, i64 %1777
  store i8 %1786, i8* %1790, align 1
  %1791 = icmp eq i64 %1785, 255
  br i1 %1791, label %1792, label %1797

1792:                                             ; preds = %1788
  %1793 = load i8*, i8** %1750, align 8
  %1794 = load i64, i64* %1749, align 8
  %1795 = add i64 %1794, 1
  store i64 %1795, i64* %1749, align 8
  %1796 = getelementptr inbounds i8, i8* %1793, i64 %1794
  store i8 0, i8* %1796, align 1
  br label %1797

1797:                                             ; preds = %1792, %1788
  %1798 = load i64, i64* %1748, align 8
  %1799 = lshr i64 %1798, 48
  %1800 = trunc i64 %1799 to i8
  %1801 = load i8*, i8** %1750, align 8
  %1802 = load i64, i64* %1749, align 8
  %1803 = add i64 %1802, 1
  store i64 %1803, i64* %1749, align 8
  %1804 = getelementptr inbounds i8, i8* %1801, i64 %1802
  store i8 %1800, i8* %1804, align 1
  %1805 = and i64 %1798, 71776119061217280
  %1806 = icmp eq i64 %1805, 71776119061217280
  br i1 %1806, label %1807, label %1812

1807:                                             ; preds = %1797
  %1808 = load i8*, i8** %1750, align 8
  %1809 = load i64, i64* %1749, align 8
  %1810 = add i64 %1809, 1
  store i64 %1810, i64* %1749, align 8
  %1811 = getelementptr inbounds i8, i8* %1808, i64 %1809
  store i8 0, i8* %1811, align 1
  br label %1812

1812:                                             ; preds = %1807, %1797
  %1813 = load i64, i64* %1748, align 8
  %1814 = lshr i64 %1813, 40
  %1815 = trunc i64 %1814 to i8
  %1816 = load i8*, i8** %1750, align 8
  %1817 = load i64, i64* %1749, align 8
  %1818 = add i64 %1817, 1
  store i64 %1818, i64* %1749, align 8
  %1819 = getelementptr inbounds i8, i8* %1816, i64 %1817
  store i8 %1815, i8* %1819, align 1
  %1820 = and i64 %1813, 280375465082880
  %1821 = icmp eq i64 %1820, 280375465082880
  br i1 %1821, label %1822, label %1827

1822:                                             ; preds = %1812
  %1823 = load i8*, i8** %1750, align 8
  %1824 = load i64, i64* %1749, align 8
  %1825 = add i64 %1824, 1
  store i64 %1825, i64* %1749, align 8
  %1826 = getelementptr inbounds i8, i8* %1823, i64 %1824
  store i8 0, i8* %1826, align 1
  br label %1827

1827:                                             ; preds = %1822, %1812
  %1828 = load i64, i64* %1748, align 8
  %1829 = lshr i64 %1828, 32
  %1830 = trunc i64 %1829 to i8
  %1831 = load i8*, i8** %1750, align 8
  %1832 = load i64, i64* %1749, align 8
  %1833 = add i64 %1832, 1
  store i64 %1833, i64* %1749, align 8
  %1834 = getelementptr inbounds i8, i8* %1831, i64 %1832
  store i8 %1830, i8* %1834, align 1
  %1835 = and i64 %1828, 1095216660480
  %1836 = icmp eq i64 %1835, 1095216660480
  br i1 %1836, label %1837, label %1842

1837:                                             ; preds = %1827
  %1838 = load i8*, i8** %1750, align 8
  %1839 = load i64, i64* %1749, align 8
  %1840 = add i64 %1839, 1
  store i64 %1840, i64* %1749, align 8
  %1841 = getelementptr inbounds i8, i8* %1838, i64 %1839
  store i8 0, i8* %1841, align 1
  br label %1842

1842:                                             ; preds = %1837, %1827
  %1843 = load i64, i64* %1748, align 8
  %1844 = lshr i64 %1843, 24
  %1845 = trunc i64 %1844 to i8
  %1846 = load i8*, i8** %1750, align 8
  %1847 = load i64, i64* %1749, align 8
  %1848 = add i64 %1847, 1
  store i64 %1848, i64* %1749, align 8
  %1849 = getelementptr inbounds i8, i8* %1846, i64 %1847
  store i8 %1845, i8* %1849, align 1
  %1850 = and i64 %1843, 4278190080
  %1851 = icmp eq i64 %1850, 4278190080
  br i1 %1851, label %1852, label %1857

1852:                                             ; preds = %1842
  %1853 = load i8*, i8** %1750, align 8
  %1854 = load i64, i64* %1749, align 8
  %1855 = add i64 %1854, 1
  store i64 %1855, i64* %1749, align 8
  %1856 = getelementptr inbounds i8, i8* %1853, i64 %1854
  store i8 0, i8* %1856, align 1
  br label %1857

1857:                                             ; preds = %1852, %1842
  %1858 = load i64, i64* %1748, align 8
  %1859 = lshr i64 %1858, 16
  %1860 = trunc i64 %1859 to i8
  %1861 = load i8*, i8** %1750, align 8
  %1862 = load i64, i64* %1749, align 8
  %1863 = add i64 %1862, 1
  store i64 %1863, i64* %1749, align 8
  %1864 = getelementptr inbounds i8, i8* %1861, i64 %1862
  store i8 %1860, i8* %1864, align 1
  %1865 = and i64 %1858, 16711680
  %1866 = icmp eq i64 %1865, 16711680
  br i1 %1866, label %1867, label %1911

1867:                                             ; preds = %1857
  %1868 = load i8*, i8** %1750, align 8
  %1869 = load i64, i64* %1749, align 8
  %1870 = add i64 %1869, 1
  store i64 %1870, i64* %1749, align 8
  %1871 = getelementptr inbounds i8, i8* %1868, i64 %1869
  store i8 0, i8* %1871, align 1
  br label %1911

1872:                                             ; preds = %1775
  %1873 = getelementptr inbounds i8, i8* %1787, i64 %1777
  store i8 %1786, i8* %1873, align 1
  %1874 = load i64, i64* %1748, align 8
  %1875 = lshr i64 %1874, 48
  %1876 = trunc i64 %1875 to i8
  %1877 = load i8*, i8** %1750, align 8
  %1878 = load i64, i64* %1749, align 8
  %1879 = add i64 %1878, 1
  %1880 = getelementptr inbounds i8, i8* %1877, i64 %1879
  store i8 %1876, i8* %1880, align 1
  %1881 = load i64, i64* %1748, align 8
  %1882 = lshr i64 %1881, 40
  %1883 = trunc i64 %1882 to i8
  %1884 = load i8*, i8** %1750, align 8
  %1885 = load i64, i64* %1749, align 8
  %1886 = add i64 %1885, 2
  %1887 = getelementptr inbounds i8, i8* %1884, i64 %1886
  store i8 %1883, i8* %1887, align 1
  %1888 = load i64, i64* %1748, align 8
  %1889 = lshr i64 %1888, 32
  %1890 = trunc i64 %1889 to i8
  %1891 = load i8*, i8** %1750, align 8
  %1892 = load i64, i64* %1749, align 8
  %1893 = add i64 %1892, 3
  %1894 = getelementptr inbounds i8, i8* %1891, i64 %1893
  store i8 %1890, i8* %1894, align 1
  %1895 = load i64, i64* %1748, align 8
  %1896 = lshr i64 %1895, 24
  %1897 = trunc i64 %1896 to i8
  %1898 = load i8*, i8** %1750, align 8
  %1899 = load i64, i64* %1749, align 8
  %1900 = add i64 %1899, 4
  %1901 = getelementptr inbounds i8, i8* %1898, i64 %1900
  store i8 %1897, i8* %1901, align 1
  %1902 = load i64, i64* %1748, align 8
  %1903 = lshr i64 %1902, 16
  %1904 = trunc i64 %1903 to i8
  %1905 = load i8*, i8** %1750, align 8
  %1906 = load i64, i64* %1749, align 8
  %1907 = add i64 %1906, 5
  %1908 = getelementptr inbounds i8, i8* %1905, i64 %1907
  store i8 %1904, i8* %1908, align 1
  %1909 = load i64, i64* %1749, align 8
  %1910 = add i64 %1909, 6
  store i64 %1910, i64* %1749, align 8
  br label %1911

1911:                                             ; preds = %1872, %1867, %1857
  %1912 = load i64, i64* %1748, align 8
  %1913 = shl i64 %1912, 48
  store i64 %1913, i64* %1748, align 8
  %1914 = load i32, i32* %1747, align 8
  %1915 = add nsw i32 %1914, 48
  store i32 %1915, i32* %1747, align 8
  %1916 = load i64, i64* %1741, align 8
  %1917 = load i64, i64* %1743, align 8
  br label %1918

1918:                                             ; preds = %1911, %1753
  %1919 = phi i64 [ %1754, %1753 ], [ %1917, %1911 ]
  %1920 = phi i64 [ %1755, %1753 ], [ %1916, %1911 ]
  %1921 = phi i64 [ %1766, %1753 ], [ %1913, %1911 ]
  %1922 = phi i32 [ %1763, %1753 ], [ %1915, %1911 ]
  %1923 = add nuw i64 %1758, 1
  %1924 = sub i64 %1920, %1919
  %1925 = ashr exact i64 %1924, 2
  %1926 = icmp ult i64 %1923, %1925
  br i1 %1926, label %1753, label %1927

1927:                                             ; preds = %1918, %1738
  %1928 = phi i64 [ %1742, %1738 ], [ %1919, %1918 ]
  store i64 %1928, i64* %1741, align 8
  %1929 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 11
  %1930 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 12
  %1931 = load i8*, i8** %1930, align 8
  %1932 = call fastcc zeroext i1 @_ZN3jxl4jpeg12_GLOBAL__N_118JumpToByteBoundaryEPNS0_13JpegBitWriterEPPKhS5_(%"struct.jxl::jpeg::JpegBitWriter"* %130, i8** %1929, i8* %1931)
  br i1 %1932, label %1933, label %2013

1933:                                             ; preds = %1927
  %1934 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2, i32 5
  %1935 = load i64, i64* %1934, align 8
  %1936 = icmp eq i64 %1935, 0
  br i1 %1936, label %2006, label %1937

1937:                                             ; preds = %1933
  %1938 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2, i32 3
  %1939 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2, i32 3, i32 1
  store i64 %1935, i64* %1939, align 8
  %1940 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2, i32 2
  %1941 = load %"class.std::__1::deque"*, %"class.std::__1::deque"** %1940, align 8
  %1942 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %1941, i64 0, i32 0, i32 0, i32 2
  %1943 = bitcast %"struct.jxl::jpeg::OutputChunk"*** %1942 to i64*
  %1944 = load i64, i64* %1943, align 8
  %1945 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %1941, i64 0, i32 0, i32 0, i32 1
  %1946 = bitcast %"struct.jxl::jpeg::OutputChunk"*** %1945 to i64*
  %1947 = load i64, i64* %1946, align 8
  %1948 = sub i64 %1944, %1947
  %1949 = ashr exact i64 %1948, 3
  %1950 = icmp eq i64 %1948, 0
  %1951 = mul i64 %1949, 170
  %1952 = add i64 %1951, -1
  %1953 = select i1 %1950, i64 0, i64 %1952
  %1954 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %1941, i64 0, i32 0, i32 1
  %1955 = load i64, i64* %1954, align 8
  %1956 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %1941, i64 0, i32 0, i32 2, i32 0, i32 0
  %1957 = load i64, i64* %1956, align 8
  %1958 = add i64 %1957, %1955
  %1959 = icmp eq i64 %1953, %1958
  %1960 = inttoptr i64 %1947 to %"struct.jxl::jpeg::OutputChunk"**
  %1961 = inttoptr i64 %1944 to %"struct.jxl::jpeg::OutputChunk"**
  br i1 %1959, label %1962, label %1968

1962:                                             ; preds = %1937
  call void @_ZNSt3__15dequeIN3jxl4jpeg11OutputChunkENS_9allocatorIS3_EEE19__add_back_capacityEv(%"class.std::__1::deque"* %1941) #10
  %1963 = load i64, i64* %1956, align 8
  %1964 = load i64, i64* %1954, align 8
  %1965 = load %"struct.jxl::jpeg::OutputChunk"**, %"struct.jxl::jpeg::OutputChunk"*** %1945, align 8
  %1966 = load %"struct.jxl::jpeg::OutputChunk"**, %"struct.jxl::jpeg::OutputChunk"*** %1942, align 8
  %1967 = add i64 %1964, %1963
  br label %1968

1968:                                             ; preds = %1962, %1937
  %1969 = phi i64 [ %1967, %1962 ], [ %1958, %1937 ]
  %1970 = phi %"struct.jxl::jpeg::OutputChunk"** [ %1966, %1962 ], [ %1961, %1937 ]
  %1971 = phi %"struct.jxl::jpeg::OutputChunk"** [ %1965, %1962 ], [ %1960, %1937 ]
  %1972 = icmp eq %"struct.jxl::jpeg::OutputChunk"** %1970, %1971
  br i1 %1972, label %1979, label %1973

1973:                                             ; preds = %1968
  %1974 = udiv i64 %1969, 170
  %1975 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %1971, i64 %1974
  %1976 = load %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %1975, align 8
  %1977 = urem i64 %1969, 170
  %1978 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk", %"struct.jxl::jpeg::OutputChunk"* %1976, i64 %1977
  br label %1979

1979:                                             ; preds = %1968, %1973
  %1980 = phi %"struct.jxl::jpeg::OutputChunk"* [ %1978, %1973 ], [ null, %1968 ]
  %1981 = bitcast %"struct.jxl::jpeg::OutputChunk"* %1980 to i8*
  %1982 = bitcast %"struct.jxl::jpeg::OutputChunk"* %1938 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1981, i8* align 8 %1982, i64 16, i1 false) #10
  %1983 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk", %"struct.jxl::jpeg::OutputChunk"* %1980, i64 0, i32 2
  %1984 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2, i32 3, i32 2
  %1985 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %1984, i64 0, i32 0, i32 0, i32 0
  %1986 = bitcast %"class.std::__1::unique_ptr"* %1984 to i64*
  %1987 = load i64, i64* %1986, align 8
  store %"class.std::__1::vector.0"* null, %"class.std::__1::vector.0"** %1985, align 8
  %1988 = bitcast %"class.std::__1::unique_ptr"* %1983 to i64*
  store i64 %1987, i64* %1988, align 8
  %1989 = load i64, i64* %1956, align 8
  %1990 = add i64 %1989, 1
  store i64 %1990, i64* %1956, align 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %1982, i8 0, i64 16, i1 false) #10
  %1991 = load %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"** %1985, align 8
  store i64 0, i64* %1986, align 8
  %1992 = icmp eq %"class.std::__1::vector.0"* %1991, null
  br i1 %1992, label %2003, label %1993

1993:                                             ; preds = %1979
  %1994 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %1991, i64 0, i32 0, i32 0
  %1995 = load i8*, i8** %1994, align 8
  %1996 = icmp eq i8* %1995, null
  br i1 %1996, label %2001, label %1997

1997:                                             ; preds = %1993
  %1998 = ptrtoint i8* %1995 to i64
  %1999 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %1991, i64 0, i32 0, i32 1
  %2000 = bitcast i8** %1999 to i64*
  store i64 %1998, i64* %2000, align 8
  call void @_ZdlPv(i8* nonnull %1995) #11
  br label %2001

2001:                                             ; preds = %1997, %1993
  %2002 = bitcast %"class.std::__1::vector.0"* %1991 to i8*
  call void @_ZdlPv(i8* %2002) #11
  br label %2003

2003:                                             ; preds = %1979, %2001
  %2004 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2, i32 4
  %2005 = bitcast i8** %2004 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %2005, i8 0, i64 16, i1 false) #10
  br label %2006

2006:                                             ; preds = %1933, %2003
  store i32 0, i32* %17, align 8
  %2007 = load i32, i32* %5, align 4
  %2008 = add nsw i32 %2007, 1
  store i32 %2008, i32* %5, align 4
  %2009 = getelementptr inbounds %"struct.jxl::jpeg::JpegBitWriter", %"struct.jxl::jpeg::JpegBitWriter"* %130, i64 0, i32 0
  %2010 = load i8, i8* %2009, align 8, !range !2
  %2011 = icmp eq i8 %2010, 0
  %2012 = select i1 %2011, i32 2, i32 3
  br label %2013

2013:                                             ; preds = %717, %2006, %1927, %1386
  %2014 = phi i32 [ %1390, %1386 ], [ 2, %1927 ], [ %2012, %2006 ], [ 2, %717 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %136) #10
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %135) #10
  br label %2015

2015:                                             ; preds = %20, %2013
  %2016 = phi i32 [ %2014, %2013 ], [ 2, %20 ]
  ret i32 %2016
}

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc i32 @_ZN3jxl4jpeg12_GLOBAL__N_112DoEncodeScanILi2EEENS1_19SerializationStatusERKNS0_8JPEGDataEPNS0_18SerializationStateE(%"struct.jxl::jpeg::JPEGData"* dereferenceable(296), %"struct.jxl::jpeg::SerializationState"*) unnamed_addr #8 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 8
  %6 = load i32, i32* %5, align 4
  %7 = sext i32 %6 to i64
  %8 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 10, i32 0, i32 0
  %9 = load %"struct.jxl::jpeg::JPEGScanInfo"*, %"struct.jxl::jpeg::JPEGScanInfo"** %8, align 8
  %10 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %9, i64 %7
  %11 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 13
  %12 = load i8, i8* %11, align 8, !range !2
  %13 = icmp eq i8 %12, 0
  %14 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 3
  %15 = load i32, i32* %14, align 8
  %16 = select i1 %13, i32 0, i32 %15
  %17 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 0
  %18 = load i32, i32* %17, align 8
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %129

20:                                               ; preds = %2
  %21 = tail call fastcc zeroext i1 @_ZN3jxl4jpeg12_GLOBAL__N_19EncodeSOSERKNS0_8JPEGDataERKNS0_12JPEGScanInfoEPNS0_18SerializationStateE(%"struct.jxl::jpeg::JPEGData"* dereferenceable(296) %0, %"struct.jxl::jpeg::JPEGScanInfo"* dereferenceable(120) %10, %"struct.jxl::jpeg::SerializationState"* %1)
  br i1 %21, label %22, label %2001

22:                                               ; preds = %20
  %23 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 1
  %24 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2, i32 2
  store %"class.std::__1::deque"* %23, %"class.std::__1::deque"** %24, align 8
  %25 = tail call i8* @_Znwm(i64 24) #11
  %26 = tail call i8* @_Znwm(i64 16384) #11
  %27 = getelementptr inbounds i8, i8* %25, i64 8
  %28 = bitcast i8* %25 to i8**
  store i8* %26, i8** %28, align 8
  %29 = getelementptr inbounds i8, i8* %26, i64 16384
  %30 = getelementptr inbounds i8, i8* %25, i64 16
  %31 = bitcast i8* %30 to i8**
  store i8* %29, i8** %31, align 8
  %32 = bitcast i8* %27 to i64*
  %33 = ptrtoint i8* %26 to i64
  %34 = sub i64 16384, %33
  %35 = getelementptr i8, i8* %26, i64 %34
  %36 = ptrtoint i8* %35 to i64
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %26, i8 0, i64 %36, i1 false) #10
  %37 = ptrtoint i8* %29 to i64
  store i64 %37, i64* %32, align 8
  %38 = ptrtoint i8* %25 to i64
  %39 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2, i32 3
  %40 = bitcast %"struct.jxl::jpeg::OutputChunk"* %39 to i64*
  store i64 %33, i64* %40, align 8
  %41 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2, i32 3, i32 1
  store i64 16384, i64* %41, align 8
  %42 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2, i32 3, i32 2
  %43 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %42, i64 0, i32 0, i32 0, i32 0
  %44 = load %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"** %43, align 8
  %45 = bitcast %"class.std::__1::unique_ptr"* %42 to i64*
  store i64 %38, i64* %45, align 8
  %46 = icmp eq %"class.std::__1::vector.0"* %44, null
  br i1 %46, label %47, label %49

47:                                               ; preds = %22
  %48 = bitcast i8* %25 to i64*
  br label %62

49:                                               ; preds = %22
  %50 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %44, i64 0, i32 0, i32 0
  %51 = load i8*, i8** %50, align 8
  %52 = icmp eq i8* %51, null
  br i1 %52, label %57, label %53

53:                                               ; preds = %49
  %54 = ptrtoint i8* %51 to i64
  %55 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %44, i64 0, i32 0, i32 1
  %56 = bitcast i8** %55 to i64*
  store i64 %54, i64* %56, align 8
  tail call void @_ZdlPv(i8* nonnull %51) #11
  br label %57

57:                                               ; preds = %53, %49
  %58 = bitcast %"class.std::__1::vector.0"* %44 to i8*
  tail call void @_ZdlPv(i8* %58) #11
  %59 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2, i32 3, i32 2, i32 0, i32 0, i32 0
  %60 = bitcast %"class.std::__1::vector.0"** %59 to i64**
  %61 = load i64*, i64** %60, align 8
  br label %62

62:                                               ; preds = %47, %57
  %63 = phi i64* [ %61, %57 ], [ %48, %47 ]
  %64 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2, i32 5
  %65 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2, i32 7
  %66 = bitcast i64* %64 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %66, i8 0, i64 16, i1 false) #10
  store i32 64, i32* %65, align 8
  %67 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2, i32 0
  store i8 1, i8* %67, align 8
  %68 = load i64, i64* %63, align 8
  %69 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2, i32 4
  %70 = bitcast i8** %69 to i64*
  store i64 %68, i64* %70, align 8
  %71 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 8, i32 0
  store i32 0, i32* %71, align 8
  %72 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 8, i32 1
  store %"struct.jxl::jpeg::HuffmanCodeTable"* null, %"struct.jxl::jpeg::HuffmanCodeTable"** %72, align 8
  %73 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 8, i32 2
  %74 = bitcast %"class.std::__1::vector.86"* %73 to i64*
  %75 = load i64, i64* %74, align 8
  %76 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 8, i32 2, i32 0, i32 1
  %77 = bitcast i32** %76 to i64*
  store i64 %75, i64* %77, align 8
  %78 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 8, i32 2, i32 0, i32 2, i32 0, i32 0
  %79 = bitcast i32** %78 to i64*
  %80 = load i64, i64* %79, align 8
  %81 = sub i64 %80, %75
  %82 = ashr exact i64 %81, 2
  %83 = icmp ult i64 %82, 65536
  br i1 %83, label %84, label %92

84:                                               ; preds = %62
  %85 = tail call i8* @_Znwm(i64 262144) #11
  %86 = ptrtoint i8* %85 to i64
  %87 = getelementptr inbounds i8, i8* %85, i64 262144
  %88 = ptrtoint i8* %87 to i64
  store i64 %86, i64* %74, align 8
  store i64 %86, i64* %77, align 8
  store i64 %88, i64* %79, align 8
  %89 = icmp eq i64 %75, 0
  br i1 %89, label %92, label %90

90:                                               ; preds = %84
  %91 = inttoptr i64 %75 to i8*
  tail call void @_ZdlPv(i8* %91) #11
  br label %92

92:                                               ; preds = %62, %84, %90
  %93 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 4
  store i32 %16, i32* %93, align 8
  %94 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 5
  store i32 0, i32* %94, align 4
  %95 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 6
  store i32 0, i32* %95, align 8
  %96 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 9
  store i64 0, i64* %96, align 8
  %97 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %9, i64 %7, i32 8
  %98 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %9, i64 %7, i32 8, i32 0, i32 1
  %99 = bitcast %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"** %98 to i64*
  %100 = load i64, i64* %99, align 8
  %101 = bitcast %"class.std::__1::vector.55"* %97 to i64*
  %102 = load i64, i64* %101, align 8
  %103 = icmp eq i64 %100, %102
  br i1 %103, label %108, label %104

104:                                              ; preds = %92
  %105 = inttoptr i64 %102 to %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*
  %106 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo", %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* %105, i64 0, i32 0
  %107 = load i32, i32* %106, align 4
  br label %108

108:                                              ; preds = %92, %104
  %109 = phi i32 [ %107, %104 ], [ -1, %92 ]
  %110 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 10
  store i32 %109, i32* %110, align 8
  %111 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 12
  store i64 0, i64* %111, align 8
  %112 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %9, i64 %7, i32 7
  %113 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %9, i64 %7, i32 7, i32 0, i32 1
  %114 = bitcast i32** %113 to i64*
  %115 = load i64, i64* %114, align 8
  %116 = bitcast %"class.std::__1::vector.48"* %112 to i64*
  %117 = load i64, i64* %116, align 8
  %118 = icmp eq i64 %115, %117
  br i1 %118, label %123, label %119

119:                                              ; preds = %108
  store i64 1, i64* %111, align 8
  %120 = getelementptr inbounds %"class.std::__1::vector.48", %"class.std::__1::vector.48"* %112, i64 0, i32 0, i32 0
  %121 = load i32*, i32** %120, align 8
  %122 = load i32, i32* %121, align 4
  br label %123

123:                                              ; preds = %108, %119
  %124 = phi i32 [ %122, %119 ], [ -1, %108 ]
  %125 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 13
  store i32 %124, i32* %125, align 8
  %126 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 1
  store i32 0, i32* %126, align 4
  %127 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 3, i64 0
  %128 = bitcast i16* %127 to i64*
  store i64 0, i64* %128, align 8
  store i32 1, i32* %17, align 8
  br label %129

129:                                              ; preds = %123, %2
  %130 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2
  %131 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 8
  %132 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %9, i64 %7, i32 4
  %133 = load i32, i32* %132, align 8
  %134 = icmp ugt i32 %133, 1
  %135 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %135) #10
  store i32 0, i32* %3, align 4
  %136 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %136) #10
  store i32 0, i32* %4, align 4
  call void @_ZNK3jxl4jpeg8JPEGData16CalculateMcuSizeERKNS0_12JPEGScanInfoEPiS5_(%"struct.jxl::jpeg::JPEGData"* %0, %"struct.jxl::jpeg::JPEGScanInfo"* dereferenceable(120) %10, i32* nonnull %3, i32* nonnull %4) #10
  %137 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 14
  %138 = load i8, i8* %137, align 1, !range !2
  %139 = icmp ne i8 %138, 0
  %140 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %9, i64 %7, i32 3
  %141 = load i32, i32* %140, align 4
  %142 = select i1 %139, i32 %141, i32 0
  %143 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %10, i64 0, i32 0
  %144 = load i32, i32* %143, align 8
  %145 = select i1 %139, i32 %144, i32 0
  %146 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %9, i64 %7, i32 1
  %147 = load i32, i32* %146, align 4
  %148 = select i1 %139, i32 %147, i32 63
  %149 = load i32, i32* %4, align 4
  %150 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 1
  %151 = load i32, i32* %150, align 4
  %152 = icmp slt i32 %151, %149
  br i1 %152, label %153, label %1368

153:                                              ; preds = %129
  %154 = icmp sgt i32 %16, 0
  %155 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 4
  %156 = getelementptr inbounds %"struct.jxl::jpeg::DCTCodingState", %"struct.jxl::jpeg::DCTCodingState"* %131, i64 0, i32 0
  %157 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 8, i32 1
  %158 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2, i32 7
  %159 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2, i32 6
  %160 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2, i32 5
  %161 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2, i32 4
  %162 = getelementptr inbounds %"struct.jxl::jpeg::JpegBitWriter", %"struct.jxl::jpeg::JpegBitWriter"* %130, i64 0, i32 0
  %163 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 8, i32 2
  %164 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 8, i32 2, i32 0, i32 1
  %165 = bitcast i32** %164 to i64*
  %166 = bitcast %"class.std::__1::vector.86"* %163 to i64*
  %167 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 11
  %168 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 12
  %169 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 5
  %170 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 3, i64 0
  %171 = bitcast i16* %170 to i64*
  %172 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 9, i32 0, i32 0
  %173 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 10, i32 0, i32 0
  %174 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 6
  %175 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 13
  %176 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 12
  %177 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %9, i64 %7, i32 7
  %178 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %9, i64 %7, i32 7, i32 0, i32 1
  %179 = bitcast i32** %178 to i64*
  %180 = bitcast %"class.std::__1::vector.48"* %177 to i64*
  %181 = getelementptr inbounds %"class.std::__1::vector.48", %"class.std::__1::vector.48"* %177, i64 0, i32 0, i32 0
  %182 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 10
  %183 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %9, i64 %7, i32 8
  %184 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 9
  %185 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %9, i64 %7, i32 8, i32 0, i32 1
  %186 = bitcast %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"** %185 to i64*
  %187 = bitcast %"class.std::__1::vector.55"* %183 to i64*
  %188 = load i32, i32* %3, align 4
  br label %189

189:                                              ; preds = %153, %1361
  %190 = phi i32 [ %151, %153 ], [ %1364, %1361 ]
  %191 = phi i32 [ %188, %153 ], [ %1363, %1361 ]
  %192 = icmp sgt i32 %191, 0
  br i1 %192, label %193, label %1361

193:                                              ; preds = %189, %1353
  %194 = phi i32 [ %1356, %1353 ], [ 0, %189 ]
  br i1 %154, label %195, label %740

195:                                              ; preds = %193
  %196 = load i32, i32* %155, align 8
  %197 = icmp eq i32 %196, 0
  br i1 %197, label %198, label %740

198:                                              ; preds = %195
  %199 = load i32, i32* %156, align 8
  %200 = icmp sgt i32 %199, 0
  br i1 %200, label %201, label %534

201:                                              ; preds = %198
  %202 = call i32 @llvm.ctlz.i32(i32 %199, i1 true) #10, !range !22
  %203 = xor i32 %202, 31
  %204 = shl nuw nsw i32 %203, 4
  %205 = load %"struct.jxl::jpeg::HuffmanCodeTable"*, %"struct.jxl::jpeg::HuffmanCodeTable"** %157, align 8
  %206 = zext i32 %204 to i64
  %207 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanCodeTable", %"struct.jxl::jpeg::HuffmanCodeTable"* %205, i64 0, i32 0, i64 %206
  %208 = load i32, i32* %207, align 4
  %209 = icmp eq i32 %208, 0
  br i1 %209, label %210, label %211

210:                                              ; preds = %201
  store i8 0, i8* %162, align 8
  br label %370

211:                                              ; preds = %201
  %212 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanCodeTable", %"struct.jxl::jpeg::HuffmanCodeTable"* %205, i64 0, i32 1, i64 %206
  %213 = load i32, i32* %212, align 4
  %214 = sext i32 %213 to i64
  %215 = load i32, i32* %158, align 8
  %216 = sub nsw i32 %215, %208
  store i32 %216, i32* %158, align 8
  %217 = zext i32 %216 to i64
  %218 = shl i64 %214, %217
  %219 = load i64, i64* %159, align 8
  %220 = or i64 %218, %219
  store i64 %220, i64* %159, align 8
  %221 = icmp slt i32 %216, 17
  br i1 %221, label %222, label %370

222:                                              ; preds = %211
  %223 = load i64, i64* %160, align 8
  %224 = add i64 %223, 12
  %225 = icmp ugt i64 %224, 16384
  br i1 %225, label %226, label %229, !prof !23

226:                                              ; preds = %222
  call fastcc void @_ZN3jxl4jpeg12_GLOBAL__N_110SwapBufferEPNS0_13JpegBitWriterE(%"struct.jxl::jpeg::JpegBitWriter"* %130) #10
  %227 = load i64, i64* %160, align 8
  %228 = load i64, i64* %159, align 8
  br label %229

229:                                              ; preds = %226, %222
  %230 = phi i64 [ %220, %222 ], [ %228, %226 ]
  %231 = phi i64 [ %223, %222 ], [ %227, %226 ]
  %232 = or i64 %230, 65535
  %233 = xor i64 %232, -65536
  %234 = add i64 %233, -72340172838076673
  %235 = and i64 %233, -9187201950435770368
  %236 = xor i64 %235, -9187201950435770368
  %237 = and i64 %236, %234
  %238 = icmp eq i64 %237, 0
  %239 = lshr i64 %230, 56
  %240 = trunc i64 %239 to i8
  %241 = load i8*, i8** %161, align 8
  br i1 %238, label %326, label %242

242:                                              ; preds = %229
  %243 = add i64 %231, 1
  store i64 %243, i64* %160, align 8
  %244 = getelementptr inbounds i8, i8* %241, i64 %231
  store i8 %240, i8* %244, align 1
  %245 = icmp eq i64 %239, 255
  br i1 %245, label %246, label %251

246:                                              ; preds = %242
  %247 = load i8*, i8** %161, align 8
  %248 = load i64, i64* %160, align 8
  %249 = add i64 %248, 1
  store i64 %249, i64* %160, align 8
  %250 = getelementptr inbounds i8, i8* %247, i64 %248
  store i8 0, i8* %250, align 1
  br label %251

251:                                              ; preds = %246, %242
  %252 = load i64, i64* %159, align 8
  %253 = lshr i64 %252, 48
  %254 = trunc i64 %253 to i8
  %255 = load i8*, i8** %161, align 8
  %256 = load i64, i64* %160, align 8
  %257 = add i64 %256, 1
  store i64 %257, i64* %160, align 8
  %258 = getelementptr inbounds i8, i8* %255, i64 %256
  store i8 %254, i8* %258, align 1
  %259 = and i64 %252, 71776119061217280
  %260 = icmp eq i64 %259, 71776119061217280
  br i1 %260, label %261, label %266

261:                                              ; preds = %251
  %262 = load i8*, i8** %161, align 8
  %263 = load i64, i64* %160, align 8
  %264 = add i64 %263, 1
  store i64 %264, i64* %160, align 8
  %265 = getelementptr inbounds i8, i8* %262, i64 %263
  store i8 0, i8* %265, align 1
  br label %266

266:                                              ; preds = %261, %251
  %267 = load i64, i64* %159, align 8
  %268 = lshr i64 %267, 40
  %269 = trunc i64 %268 to i8
  %270 = load i8*, i8** %161, align 8
  %271 = load i64, i64* %160, align 8
  %272 = add i64 %271, 1
  store i64 %272, i64* %160, align 8
  %273 = getelementptr inbounds i8, i8* %270, i64 %271
  store i8 %269, i8* %273, align 1
  %274 = and i64 %267, 280375465082880
  %275 = icmp eq i64 %274, 280375465082880
  br i1 %275, label %276, label %281

276:                                              ; preds = %266
  %277 = load i8*, i8** %161, align 8
  %278 = load i64, i64* %160, align 8
  %279 = add i64 %278, 1
  store i64 %279, i64* %160, align 8
  %280 = getelementptr inbounds i8, i8* %277, i64 %278
  store i8 0, i8* %280, align 1
  br label %281

281:                                              ; preds = %276, %266
  %282 = load i64, i64* %159, align 8
  %283 = lshr i64 %282, 32
  %284 = trunc i64 %283 to i8
  %285 = load i8*, i8** %161, align 8
  %286 = load i64, i64* %160, align 8
  %287 = add i64 %286, 1
  store i64 %287, i64* %160, align 8
  %288 = getelementptr inbounds i8, i8* %285, i64 %286
  store i8 %284, i8* %288, align 1
  %289 = and i64 %282, 1095216660480
  %290 = icmp eq i64 %289, 1095216660480
  br i1 %290, label %291, label %296

291:                                              ; preds = %281
  %292 = load i8*, i8** %161, align 8
  %293 = load i64, i64* %160, align 8
  %294 = add i64 %293, 1
  store i64 %294, i64* %160, align 8
  %295 = getelementptr inbounds i8, i8* %292, i64 %293
  store i8 0, i8* %295, align 1
  br label %296

296:                                              ; preds = %291, %281
  %297 = load i64, i64* %159, align 8
  %298 = lshr i64 %297, 24
  %299 = trunc i64 %298 to i8
  %300 = load i8*, i8** %161, align 8
  %301 = load i64, i64* %160, align 8
  %302 = add i64 %301, 1
  store i64 %302, i64* %160, align 8
  %303 = getelementptr inbounds i8, i8* %300, i64 %301
  store i8 %299, i8* %303, align 1
  %304 = and i64 %297, 4278190080
  %305 = icmp eq i64 %304, 4278190080
  br i1 %305, label %306, label %311

306:                                              ; preds = %296
  %307 = load i8*, i8** %161, align 8
  %308 = load i64, i64* %160, align 8
  %309 = add i64 %308, 1
  store i64 %309, i64* %160, align 8
  %310 = getelementptr inbounds i8, i8* %307, i64 %308
  store i8 0, i8* %310, align 1
  br label %311

311:                                              ; preds = %306, %296
  %312 = load i64, i64* %159, align 8
  %313 = lshr i64 %312, 16
  %314 = trunc i64 %313 to i8
  %315 = load i8*, i8** %161, align 8
  %316 = load i64, i64* %160, align 8
  %317 = add i64 %316, 1
  store i64 %317, i64* %160, align 8
  %318 = getelementptr inbounds i8, i8* %315, i64 %316
  store i8 %314, i8* %318, align 1
  %319 = and i64 %312, 16711680
  %320 = icmp eq i64 %319, 16711680
  br i1 %320, label %321, label %365

321:                                              ; preds = %311
  %322 = load i8*, i8** %161, align 8
  %323 = load i64, i64* %160, align 8
  %324 = add i64 %323, 1
  store i64 %324, i64* %160, align 8
  %325 = getelementptr inbounds i8, i8* %322, i64 %323
  store i8 0, i8* %325, align 1
  br label %365

326:                                              ; preds = %229
  %327 = getelementptr inbounds i8, i8* %241, i64 %231
  store i8 %240, i8* %327, align 1
  %328 = load i64, i64* %159, align 8
  %329 = lshr i64 %328, 48
  %330 = trunc i64 %329 to i8
  %331 = load i8*, i8** %161, align 8
  %332 = load i64, i64* %160, align 8
  %333 = add i64 %332, 1
  %334 = getelementptr inbounds i8, i8* %331, i64 %333
  store i8 %330, i8* %334, align 1
  %335 = load i64, i64* %159, align 8
  %336 = lshr i64 %335, 40
  %337 = trunc i64 %336 to i8
  %338 = load i8*, i8** %161, align 8
  %339 = load i64, i64* %160, align 8
  %340 = add i64 %339, 2
  %341 = getelementptr inbounds i8, i8* %338, i64 %340
  store i8 %337, i8* %341, align 1
  %342 = load i64, i64* %159, align 8
  %343 = lshr i64 %342, 32
  %344 = trunc i64 %343 to i8
  %345 = load i8*, i8** %161, align 8
  %346 = load i64, i64* %160, align 8
  %347 = add i64 %346, 3
  %348 = getelementptr inbounds i8, i8* %345, i64 %347
  store i8 %344, i8* %348, align 1
  %349 = load i64, i64* %159, align 8
  %350 = lshr i64 %349, 24
  %351 = trunc i64 %350 to i8
  %352 = load i8*, i8** %161, align 8
  %353 = load i64, i64* %160, align 8
  %354 = add i64 %353, 4
  %355 = getelementptr inbounds i8, i8* %352, i64 %354
  store i8 %351, i8* %355, align 1
  %356 = load i64, i64* %159, align 8
  %357 = lshr i64 %356, 16
  %358 = trunc i64 %357 to i8
  %359 = load i8*, i8** %161, align 8
  %360 = load i64, i64* %160, align 8
  %361 = add i64 %360, 5
  %362 = getelementptr inbounds i8, i8* %359, i64 %361
  store i8 %358, i8* %362, align 1
  %363 = load i64, i64* %160, align 8
  %364 = add i64 %363, 6
  store i64 %364, i64* %160, align 8
  br label %365

365:                                              ; preds = %326, %321, %311
  %366 = load i64, i64* %159, align 8
  %367 = shl i64 %366, 48
  store i64 %367, i64* %159, align 8
  %368 = load i32, i32* %158, align 8
  %369 = add nsw i32 %368, 48
  store i32 %369, i32* %158, align 8
  br label %370

370:                                              ; preds = %365, %211, %210
  %371 = icmp eq i32 %203, 0
  br i1 %371, label %533, label %372

372:                                              ; preds = %370
  %373 = load i32, i32* %156, align 8
  %374 = shl nsw i32 -1, %203
  %375 = xor i32 %374, -1
  %376 = and i32 %373, %375
  %377 = sext i32 %376 to i64
  %378 = load i32, i32* %158, align 8
  %379 = sub nsw i32 %378, %203
  store i32 %379, i32* %158, align 8
  %380 = zext i32 %379 to i64
  %381 = shl i64 %377, %380
  %382 = load i64, i64* %159, align 8
  %383 = or i64 %381, %382
  store i64 %383, i64* %159, align 8
  %384 = icmp slt i32 %379, 17
  br i1 %384, label %385, label %533

385:                                              ; preds = %372
  %386 = load i64, i64* %160, align 8
  %387 = add i64 %386, 12
  %388 = icmp ugt i64 %387, 16384
  br i1 %388, label %389, label %392, !prof !23

389:                                              ; preds = %385
  call fastcc void @_ZN3jxl4jpeg12_GLOBAL__N_110SwapBufferEPNS0_13JpegBitWriterE(%"struct.jxl::jpeg::JpegBitWriter"* %130) #10
  %390 = load i64, i64* %160, align 8
  %391 = load i64, i64* %159, align 8
  br label %392

392:                                              ; preds = %389, %385
  %393 = phi i64 [ %383, %385 ], [ %391, %389 ]
  %394 = phi i64 [ %386, %385 ], [ %390, %389 ]
  %395 = or i64 %393, 65535
  %396 = xor i64 %395, -65536
  %397 = add i64 %396, -72340172838076673
  %398 = and i64 %396, -9187201950435770368
  %399 = xor i64 %398, -9187201950435770368
  %400 = and i64 %399, %397
  %401 = icmp eq i64 %400, 0
  %402 = lshr i64 %393, 56
  %403 = trunc i64 %402 to i8
  %404 = load i8*, i8** %161, align 8
  br i1 %401, label %489, label %405

405:                                              ; preds = %392
  %406 = add i64 %394, 1
  store i64 %406, i64* %160, align 8
  %407 = getelementptr inbounds i8, i8* %404, i64 %394
  store i8 %403, i8* %407, align 1
  %408 = icmp eq i64 %402, 255
  br i1 %408, label %409, label %414

409:                                              ; preds = %405
  %410 = load i8*, i8** %161, align 8
  %411 = load i64, i64* %160, align 8
  %412 = add i64 %411, 1
  store i64 %412, i64* %160, align 8
  %413 = getelementptr inbounds i8, i8* %410, i64 %411
  store i8 0, i8* %413, align 1
  br label %414

414:                                              ; preds = %409, %405
  %415 = load i64, i64* %159, align 8
  %416 = lshr i64 %415, 48
  %417 = trunc i64 %416 to i8
  %418 = load i8*, i8** %161, align 8
  %419 = load i64, i64* %160, align 8
  %420 = add i64 %419, 1
  store i64 %420, i64* %160, align 8
  %421 = getelementptr inbounds i8, i8* %418, i64 %419
  store i8 %417, i8* %421, align 1
  %422 = and i64 %415, 71776119061217280
  %423 = icmp eq i64 %422, 71776119061217280
  br i1 %423, label %424, label %429

424:                                              ; preds = %414
  %425 = load i8*, i8** %161, align 8
  %426 = load i64, i64* %160, align 8
  %427 = add i64 %426, 1
  store i64 %427, i64* %160, align 8
  %428 = getelementptr inbounds i8, i8* %425, i64 %426
  store i8 0, i8* %428, align 1
  br label %429

429:                                              ; preds = %424, %414
  %430 = load i64, i64* %159, align 8
  %431 = lshr i64 %430, 40
  %432 = trunc i64 %431 to i8
  %433 = load i8*, i8** %161, align 8
  %434 = load i64, i64* %160, align 8
  %435 = add i64 %434, 1
  store i64 %435, i64* %160, align 8
  %436 = getelementptr inbounds i8, i8* %433, i64 %434
  store i8 %432, i8* %436, align 1
  %437 = and i64 %430, 280375465082880
  %438 = icmp eq i64 %437, 280375465082880
  br i1 %438, label %439, label %444

439:                                              ; preds = %429
  %440 = load i8*, i8** %161, align 8
  %441 = load i64, i64* %160, align 8
  %442 = add i64 %441, 1
  store i64 %442, i64* %160, align 8
  %443 = getelementptr inbounds i8, i8* %440, i64 %441
  store i8 0, i8* %443, align 1
  br label %444

444:                                              ; preds = %439, %429
  %445 = load i64, i64* %159, align 8
  %446 = lshr i64 %445, 32
  %447 = trunc i64 %446 to i8
  %448 = load i8*, i8** %161, align 8
  %449 = load i64, i64* %160, align 8
  %450 = add i64 %449, 1
  store i64 %450, i64* %160, align 8
  %451 = getelementptr inbounds i8, i8* %448, i64 %449
  store i8 %447, i8* %451, align 1
  %452 = and i64 %445, 1095216660480
  %453 = icmp eq i64 %452, 1095216660480
  br i1 %453, label %454, label %459

454:                                              ; preds = %444
  %455 = load i8*, i8** %161, align 8
  %456 = load i64, i64* %160, align 8
  %457 = add i64 %456, 1
  store i64 %457, i64* %160, align 8
  %458 = getelementptr inbounds i8, i8* %455, i64 %456
  store i8 0, i8* %458, align 1
  br label %459

459:                                              ; preds = %454, %444
  %460 = load i64, i64* %159, align 8
  %461 = lshr i64 %460, 24
  %462 = trunc i64 %461 to i8
  %463 = load i8*, i8** %161, align 8
  %464 = load i64, i64* %160, align 8
  %465 = add i64 %464, 1
  store i64 %465, i64* %160, align 8
  %466 = getelementptr inbounds i8, i8* %463, i64 %464
  store i8 %462, i8* %466, align 1
  %467 = and i64 %460, 4278190080
  %468 = icmp eq i64 %467, 4278190080
  br i1 %468, label %469, label %474

469:                                              ; preds = %459
  %470 = load i8*, i8** %161, align 8
  %471 = load i64, i64* %160, align 8
  %472 = add i64 %471, 1
  store i64 %472, i64* %160, align 8
  %473 = getelementptr inbounds i8, i8* %470, i64 %471
  store i8 0, i8* %473, align 1
  br label %474

474:                                              ; preds = %469, %459
  %475 = load i64, i64* %159, align 8
  %476 = lshr i64 %475, 16
  %477 = trunc i64 %476 to i8
  %478 = load i8*, i8** %161, align 8
  %479 = load i64, i64* %160, align 8
  %480 = add i64 %479, 1
  store i64 %480, i64* %160, align 8
  %481 = getelementptr inbounds i8, i8* %478, i64 %479
  store i8 %477, i8* %481, align 1
  %482 = and i64 %475, 16711680
  %483 = icmp eq i64 %482, 16711680
  br i1 %483, label %484, label %528

484:                                              ; preds = %474
  %485 = load i8*, i8** %161, align 8
  %486 = load i64, i64* %160, align 8
  %487 = add i64 %486, 1
  store i64 %487, i64* %160, align 8
  %488 = getelementptr inbounds i8, i8* %485, i64 %486
  store i8 0, i8* %488, align 1
  br label %528

489:                                              ; preds = %392
  %490 = getelementptr inbounds i8, i8* %404, i64 %394
  store i8 %403, i8* %490, align 1
  %491 = load i64, i64* %159, align 8
  %492 = lshr i64 %491, 48
  %493 = trunc i64 %492 to i8
  %494 = load i8*, i8** %161, align 8
  %495 = load i64, i64* %160, align 8
  %496 = add i64 %495, 1
  %497 = getelementptr inbounds i8, i8* %494, i64 %496
  store i8 %493, i8* %497, align 1
  %498 = load i64, i64* %159, align 8
  %499 = lshr i64 %498, 40
  %500 = trunc i64 %499 to i8
  %501 = load i8*, i8** %161, align 8
  %502 = load i64, i64* %160, align 8
  %503 = add i64 %502, 2
  %504 = getelementptr inbounds i8, i8* %501, i64 %503
  store i8 %500, i8* %504, align 1
  %505 = load i64, i64* %159, align 8
  %506 = lshr i64 %505, 32
  %507 = trunc i64 %506 to i8
  %508 = load i8*, i8** %161, align 8
  %509 = load i64, i64* %160, align 8
  %510 = add i64 %509, 3
  %511 = getelementptr inbounds i8, i8* %508, i64 %510
  store i8 %507, i8* %511, align 1
  %512 = load i64, i64* %159, align 8
  %513 = lshr i64 %512, 24
  %514 = trunc i64 %513 to i8
  %515 = load i8*, i8** %161, align 8
  %516 = load i64, i64* %160, align 8
  %517 = add i64 %516, 4
  %518 = getelementptr inbounds i8, i8* %515, i64 %517
  store i8 %514, i8* %518, align 1
  %519 = load i64, i64* %159, align 8
  %520 = lshr i64 %519, 16
  %521 = trunc i64 %520 to i8
  %522 = load i8*, i8** %161, align 8
  %523 = load i64, i64* %160, align 8
  %524 = add i64 %523, 5
  %525 = getelementptr inbounds i8, i8* %522, i64 %524
  store i8 %521, i8* %525, align 1
  %526 = load i64, i64* %160, align 8
  %527 = add i64 %526, 6
  store i64 %527, i64* %160, align 8
  br label %528

528:                                              ; preds = %489, %484, %474
  %529 = load i64, i64* %159, align 8
  %530 = shl i64 %529, 48
  store i64 %530, i64* %159, align 8
  %531 = load i32, i32* %158, align 8
  %532 = add nsw i32 %531, 48
  store i32 %532, i32* %158, align 8
  br label %533

533:                                              ; preds = %528, %372, %370
  store i32 0, i32* %156, align 8
  br label %534

534:                                              ; preds = %533, %198
  %535 = load i64, i64* %165, align 8
  %536 = load i64, i64* %166, align 8
  %537 = icmp eq i64 %535, %536
  br i1 %537, label %715, label %538

538:                                              ; preds = %534
  %539 = load i32, i32* %158, align 8
  %540 = load i64, i64* %159, align 8
  br label %541

541:                                              ; preds = %706, %538
  %542 = phi i64 [ %536, %538 ], [ %707, %706 ]
  %543 = phi i64 [ %535, %538 ], [ %708, %706 ]
  %544 = phi i64 [ %540, %538 ], [ %709, %706 ]
  %545 = phi i32 [ %539, %538 ], [ %710, %706 ]
  %546 = phi i64 [ 0, %538 ], [ %711, %706 ]
  %547 = inttoptr i64 %542 to i32*
  %548 = getelementptr inbounds i32, i32* %547, i64 %546
  %549 = load i32, i32* %548, align 4
  %550 = sext i32 %549 to i64
  %551 = add nsw i32 %545, -1
  store i32 %551, i32* %158, align 8
  %552 = zext i32 %551 to i64
  %553 = shl i64 %550, %552
  %554 = or i64 %553, %544
  store i64 %554, i64* %159, align 8
  %555 = icmp slt i32 %545, 18
  br i1 %555, label %556, label %706

556:                                              ; preds = %541
  %557 = load i64, i64* %160, align 8
  %558 = add i64 %557, 12
  %559 = icmp ugt i64 %558, 16384
  br i1 %559, label %560, label %563, !prof !23

560:                                              ; preds = %556
  call fastcc void @_ZN3jxl4jpeg12_GLOBAL__N_110SwapBufferEPNS0_13JpegBitWriterE(%"struct.jxl::jpeg::JpegBitWriter"* %130) #10
  %561 = load i64, i64* %160, align 8
  %562 = load i64, i64* %159, align 8
  br label %563

563:                                              ; preds = %560, %556
  %564 = phi i64 [ %554, %556 ], [ %562, %560 ]
  %565 = phi i64 [ %557, %556 ], [ %561, %560 ]
  %566 = or i64 %564, 65535
  %567 = xor i64 %566, -65536
  %568 = add i64 %567, -72340172838076673
  %569 = and i64 %567, -9187201950435770368
  %570 = xor i64 %569, -9187201950435770368
  %571 = and i64 %570, %568
  %572 = icmp eq i64 %571, 0
  %573 = lshr i64 %564, 56
  %574 = trunc i64 %573 to i8
  %575 = load i8*, i8** %161, align 8
  br i1 %572, label %660, label %576

576:                                              ; preds = %563
  %577 = add i64 %565, 1
  store i64 %577, i64* %160, align 8
  %578 = getelementptr inbounds i8, i8* %575, i64 %565
  store i8 %574, i8* %578, align 1
  %579 = icmp eq i64 %573, 255
  br i1 %579, label %580, label %585

580:                                              ; preds = %576
  %581 = load i8*, i8** %161, align 8
  %582 = load i64, i64* %160, align 8
  %583 = add i64 %582, 1
  store i64 %583, i64* %160, align 8
  %584 = getelementptr inbounds i8, i8* %581, i64 %582
  store i8 0, i8* %584, align 1
  br label %585

585:                                              ; preds = %580, %576
  %586 = load i64, i64* %159, align 8
  %587 = lshr i64 %586, 48
  %588 = trunc i64 %587 to i8
  %589 = load i8*, i8** %161, align 8
  %590 = load i64, i64* %160, align 8
  %591 = add i64 %590, 1
  store i64 %591, i64* %160, align 8
  %592 = getelementptr inbounds i8, i8* %589, i64 %590
  store i8 %588, i8* %592, align 1
  %593 = and i64 %586, 71776119061217280
  %594 = icmp eq i64 %593, 71776119061217280
  br i1 %594, label %595, label %600

595:                                              ; preds = %585
  %596 = load i8*, i8** %161, align 8
  %597 = load i64, i64* %160, align 8
  %598 = add i64 %597, 1
  store i64 %598, i64* %160, align 8
  %599 = getelementptr inbounds i8, i8* %596, i64 %597
  store i8 0, i8* %599, align 1
  br label %600

600:                                              ; preds = %595, %585
  %601 = load i64, i64* %159, align 8
  %602 = lshr i64 %601, 40
  %603 = trunc i64 %602 to i8
  %604 = load i8*, i8** %161, align 8
  %605 = load i64, i64* %160, align 8
  %606 = add i64 %605, 1
  store i64 %606, i64* %160, align 8
  %607 = getelementptr inbounds i8, i8* %604, i64 %605
  store i8 %603, i8* %607, align 1
  %608 = and i64 %601, 280375465082880
  %609 = icmp eq i64 %608, 280375465082880
  br i1 %609, label %610, label %615

610:                                              ; preds = %600
  %611 = load i8*, i8** %161, align 8
  %612 = load i64, i64* %160, align 8
  %613 = add i64 %612, 1
  store i64 %613, i64* %160, align 8
  %614 = getelementptr inbounds i8, i8* %611, i64 %612
  store i8 0, i8* %614, align 1
  br label %615

615:                                              ; preds = %610, %600
  %616 = load i64, i64* %159, align 8
  %617 = lshr i64 %616, 32
  %618 = trunc i64 %617 to i8
  %619 = load i8*, i8** %161, align 8
  %620 = load i64, i64* %160, align 8
  %621 = add i64 %620, 1
  store i64 %621, i64* %160, align 8
  %622 = getelementptr inbounds i8, i8* %619, i64 %620
  store i8 %618, i8* %622, align 1
  %623 = and i64 %616, 1095216660480
  %624 = icmp eq i64 %623, 1095216660480
  br i1 %624, label %625, label %630

625:                                              ; preds = %615
  %626 = load i8*, i8** %161, align 8
  %627 = load i64, i64* %160, align 8
  %628 = add i64 %627, 1
  store i64 %628, i64* %160, align 8
  %629 = getelementptr inbounds i8, i8* %626, i64 %627
  store i8 0, i8* %629, align 1
  br label %630

630:                                              ; preds = %625, %615
  %631 = load i64, i64* %159, align 8
  %632 = lshr i64 %631, 24
  %633 = trunc i64 %632 to i8
  %634 = load i8*, i8** %161, align 8
  %635 = load i64, i64* %160, align 8
  %636 = add i64 %635, 1
  store i64 %636, i64* %160, align 8
  %637 = getelementptr inbounds i8, i8* %634, i64 %635
  store i8 %633, i8* %637, align 1
  %638 = and i64 %631, 4278190080
  %639 = icmp eq i64 %638, 4278190080
  br i1 %639, label %640, label %645

640:                                              ; preds = %630
  %641 = load i8*, i8** %161, align 8
  %642 = load i64, i64* %160, align 8
  %643 = add i64 %642, 1
  store i64 %643, i64* %160, align 8
  %644 = getelementptr inbounds i8, i8* %641, i64 %642
  store i8 0, i8* %644, align 1
  br label %645

645:                                              ; preds = %640, %630
  %646 = load i64, i64* %159, align 8
  %647 = lshr i64 %646, 16
  %648 = trunc i64 %647 to i8
  %649 = load i8*, i8** %161, align 8
  %650 = load i64, i64* %160, align 8
  %651 = add i64 %650, 1
  store i64 %651, i64* %160, align 8
  %652 = getelementptr inbounds i8, i8* %649, i64 %650
  store i8 %648, i8* %652, align 1
  %653 = and i64 %646, 16711680
  %654 = icmp eq i64 %653, 16711680
  br i1 %654, label %655, label %699

655:                                              ; preds = %645
  %656 = load i8*, i8** %161, align 8
  %657 = load i64, i64* %160, align 8
  %658 = add i64 %657, 1
  store i64 %658, i64* %160, align 8
  %659 = getelementptr inbounds i8, i8* %656, i64 %657
  store i8 0, i8* %659, align 1
  br label %699

660:                                              ; preds = %563
  %661 = getelementptr inbounds i8, i8* %575, i64 %565
  store i8 %574, i8* %661, align 1
  %662 = load i64, i64* %159, align 8
  %663 = lshr i64 %662, 48
  %664 = trunc i64 %663 to i8
  %665 = load i8*, i8** %161, align 8
  %666 = load i64, i64* %160, align 8
  %667 = add i64 %666, 1
  %668 = getelementptr inbounds i8, i8* %665, i64 %667
  store i8 %664, i8* %668, align 1
  %669 = load i64, i64* %159, align 8
  %670 = lshr i64 %669, 40
  %671 = trunc i64 %670 to i8
  %672 = load i8*, i8** %161, align 8
  %673 = load i64, i64* %160, align 8
  %674 = add i64 %673, 2
  %675 = getelementptr inbounds i8, i8* %672, i64 %674
  store i8 %671, i8* %675, align 1
  %676 = load i64, i64* %159, align 8
  %677 = lshr i64 %676, 32
  %678 = trunc i64 %677 to i8
  %679 = load i8*, i8** %161, align 8
  %680 = load i64, i64* %160, align 8
  %681 = add i64 %680, 3
  %682 = getelementptr inbounds i8, i8* %679, i64 %681
  store i8 %678, i8* %682, align 1
  %683 = load i64, i64* %159, align 8
  %684 = lshr i64 %683, 24
  %685 = trunc i64 %684 to i8
  %686 = load i8*, i8** %161, align 8
  %687 = load i64, i64* %160, align 8
  %688 = add i64 %687, 4
  %689 = getelementptr inbounds i8, i8* %686, i64 %688
  store i8 %685, i8* %689, align 1
  %690 = load i64, i64* %159, align 8
  %691 = lshr i64 %690, 16
  %692 = trunc i64 %691 to i8
  %693 = load i8*, i8** %161, align 8
  %694 = load i64, i64* %160, align 8
  %695 = add i64 %694, 5
  %696 = getelementptr inbounds i8, i8* %693, i64 %695
  store i8 %692, i8* %696, align 1
  %697 = load i64, i64* %160, align 8
  %698 = add i64 %697, 6
  store i64 %698, i64* %160, align 8
  br label %699

699:                                              ; preds = %660, %655, %645
  %700 = load i64, i64* %159, align 8
  %701 = shl i64 %700, 48
  store i64 %701, i64* %159, align 8
  %702 = load i32, i32* %158, align 8
  %703 = add nsw i32 %702, 48
  store i32 %703, i32* %158, align 8
  %704 = load i64, i64* %165, align 8
  %705 = load i64, i64* %166, align 8
  br label %706

706:                                              ; preds = %699, %541
  %707 = phi i64 [ %542, %541 ], [ %705, %699 ]
  %708 = phi i64 [ %543, %541 ], [ %704, %699 ]
  %709 = phi i64 [ %554, %541 ], [ %701, %699 ]
  %710 = phi i32 [ %551, %541 ], [ %703, %699 ]
  %711 = add nuw i64 %546, 1
  %712 = sub i64 %708, %707
  %713 = ashr exact i64 %712, 2
  %714 = icmp ult i64 %711, %713
  br i1 %714, label %541, label %715

715:                                              ; preds = %706, %534
  %716 = phi i64 [ %535, %534 ], [ %707, %706 ]
  store i64 %716, i64* %165, align 8
  %717 = load i8*, i8** %168, align 8
  %718 = call fastcc zeroext i1 @_ZN3jxl4jpeg12_GLOBAL__N_118JumpToByteBoundaryEPNS0_13JpegBitWriterEPPKhS5_(%"struct.jxl::jpeg::JpegBitWriter"* %130, i8** %167, i8* %717)
  br i1 %718, label %719, label %1999

719:                                              ; preds = %715
  %720 = load i32, i32* %169, align 4
  %721 = load i64, i64* %160, align 8
  %722 = add i64 %721, 2
  %723 = icmp ugt i64 %722, 16384
  br i1 %723, label %724, label %726, !prof !23

724:                                              ; preds = %719
  call fastcc void @_ZN3jxl4jpeg12_GLOBAL__N_110SwapBufferEPNS0_13JpegBitWriterE(%"struct.jxl::jpeg::JpegBitWriter"* %130) #10
  %725 = load i64, i64* %160, align 8
  br label %726

726:                                              ; preds = %719, %724
  %727 = phi i64 [ %721, %719 ], [ %725, %724 ]
  %728 = load i8*, i8** %161, align 8
  %729 = add i64 %727, 1
  store i64 %729, i64* %160, align 8
  %730 = getelementptr inbounds i8, i8* %728, i64 %727
  store i8 -1, i8* %730, align 1
  %731 = trunc i32 %720 to i8
  %732 = add i8 %731, -48
  %733 = load i8*, i8** %161, align 8
  %734 = load i64, i64* %160, align 8
  %735 = add i64 %734, 1
  store i64 %735, i64* %160, align 8
  %736 = getelementptr inbounds i8, i8* %733, i64 %734
  store i8 %732, i8* %736, align 1
  %737 = load i32, i32* %169, align 4
  %738 = add nsw i32 %737, 1
  %739 = and i32 %738, 7
  store i32 %739, i32* %169, align 4
  store i32 %16, i32* %155, align 8
  store i64 0, i64* %171, align 8
  br label %740

740:                                              ; preds = %726, %195, %193
  %741 = load i32, i32* %132, align 8
  %742 = icmp eq i32 %741, 0
  br i1 %742, label %1353, label %743

743:                                              ; preds = %740, %1348
  %744 = phi i32 [ %1349, %1348 ], [ %741, %740 ]
  %745 = phi i64 [ %1350, %1348 ], [ 0, %740 ]
  %746 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %9, i64 %7, i32 5, i32 0, i64 %745, i32 0
  %747 = load i32, i32* %746, align 4
  %748 = zext i32 %747 to i64
  %749 = load %"struct.jxl::jpeg::JPEGComponent"*, %"struct.jxl::jpeg::JPEGComponent"** %172, align 8
  %750 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %9, i64 %7, i32 5, i32 0, i64 %745, i32 2
  %751 = load i32, i32* %750, align 4
  %752 = zext i32 %751 to i64
  %753 = load %"struct.jxl::jpeg::HuffmanCodeTable"*, %"struct.jxl::jpeg::HuffmanCodeTable"** %173, align 8
  %754 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanCodeTable", %"struct.jxl::jpeg::HuffmanCodeTable"* %753, i64 %752
  %755 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %749, i64 %748, i32 2
  %756 = load i32, i32* %755, align 8
  %757 = select i1 %134, i32 %756, i32 1
  %758 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %749, i64 %748, i32 1
  %759 = load i32, i32* %758, align 4
  %760 = select i1 %134, i32 %759, i32 1
  %761 = icmp sgt i32 %757, 0
  br i1 %761, label %762, label %1348

762:                                              ; preds = %743
  %763 = icmp sgt i32 %760, 0
  %764 = mul nsw i32 %760, %194
  %765 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %749, i64 %748, i32 4
  %766 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %749, i64 %748, i32 6, i32 0, i32 0
  br label %767

767:                                              ; preds = %1343, %762
  %768 = phi i32 [ 0, %762 ], [ %1344, %1343 ]
  br i1 %763, label %769, label %1343

769:                                              ; preds = %767
  %770 = load i32, i32* %174, align 8
  br label %771

771:                                              ; preds = %1334, %769
  %772 = phi i32 [ %1340, %1334 ], [ %770, %769 ]
  %773 = phi i32 [ %1341, %1334 ], [ 0, %769 ]
  %774 = load i32, i32* %150, align 4
  %775 = mul nsw i32 %774, %757
  %776 = add nsw i32 %775, %768
  %777 = add nsw i32 %773, %764
  %778 = load i32, i32* %765, align 8
  %779 = mul i32 %776, %778
  %780 = add i32 %777, %779
  %781 = load i32, i32* %175, align 8
  %782 = icmp eq i32 %772, %781
  br i1 %782, label %783, label %1316

783:                                              ; preds = %771
  %784 = load i32, i32* %156, align 8
  %785 = icmp sgt i32 %784, 0
  br i1 %785, label %786, label %1119

786:                                              ; preds = %783
  %787 = call i32 @llvm.ctlz.i32(i32 %784, i1 true) #10, !range !22
  %788 = xor i32 %787, 31
  %789 = shl nuw nsw i32 %788, 4
  %790 = load %"struct.jxl::jpeg::HuffmanCodeTable"*, %"struct.jxl::jpeg::HuffmanCodeTable"** %157, align 8
  %791 = zext i32 %789 to i64
  %792 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanCodeTable", %"struct.jxl::jpeg::HuffmanCodeTable"* %790, i64 0, i32 0, i64 %791
  %793 = load i32, i32* %792, align 4
  %794 = icmp eq i32 %793, 0
  br i1 %794, label %795, label %796

795:                                              ; preds = %786
  store i8 0, i8* %162, align 8
  br label %955

796:                                              ; preds = %786
  %797 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanCodeTable", %"struct.jxl::jpeg::HuffmanCodeTable"* %790, i64 0, i32 1, i64 %791
  %798 = load i32, i32* %797, align 4
  %799 = sext i32 %798 to i64
  %800 = load i32, i32* %158, align 8
  %801 = sub nsw i32 %800, %793
  store i32 %801, i32* %158, align 8
  %802 = zext i32 %801 to i64
  %803 = shl i64 %799, %802
  %804 = load i64, i64* %159, align 8
  %805 = or i64 %803, %804
  store i64 %805, i64* %159, align 8
  %806 = icmp slt i32 %801, 17
  br i1 %806, label %807, label %955

807:                                              ; preds = %796
  %808 = load i64, i64* %160, align 8
  %809 = add i64 %808, 12
  %810 = icmp ugt i64 %809, 16384
  br i1 %810, label %811, label %814, !prof !23

811:                                              ; preds = %807
  call fastcc void @_ZN3jxl4jpeg12_GLOBAL__N_110SwapBufferEPNS0_13JpegBitWriterE(%"struct.jxl::jpeg::JpegBitWriter"* %130) #10
  %812 = load i64, i64* %160, align 8
  %813 = load i64, i64* %159, align 8
  br label %814

814:                                              ; preds = %811, %807
  %815 = phi i64 [ %805, %807 ], [ %813, %811 ]
  %816 = phi i64 [ %808, %807 ], [ %812, %811 ]
  %817 = or i64 %815, 65535
  %818 = xor i64 %817, -65536
  %819 = add i64 %818, -72340172838076673
  %820 = and i64 %818, -9187201950435770368
  %821 = xor i64 %820, -9187201950435770368
  %822 = and i64 %821, %819
  %823 = icmp eq i64 %822, 0
  %824 = lshr i64 %815, 56
  %825 = trunc i64 %824 to i8
  %826 = load i8*, i8** %161, align 8
  br i1 %823, label %911, label %827

827:                                              ; preds = %814
  %828 = add i64 %816, 1
  store i64 %828, i64* %160, align 8
  %829 = getelementptr inbounds i8, i8* %826, i64 %816
  store i8 %825, i8* %829, align 1
  %830 = icmp eq i64 %824, 255
  br i1 %830, label %831, label %836

831:                                              ; preds = %827
  %832 = load i8*, i8** %161, align 8
  %833 = load i64, i64* %160, align 8
  %834 = add i64 %833, 1
  store i64 %834, i64* %160, align 8
  %835 = getelementptr inbounds i8, i8* %832, i64 %833
  store i8 0, i8* %835, align 1
  br label %836

836:                                              ; preds = %831, %827
  %837 = load i64, i64* %159, align 8
  %838 = lshr i64 %837, 48
  %839 = trunc i64 %838 to i8
  %840 = load i8*, i8** %161, align 8
  %841 = load i64, i64* %160, align 8
  %842 = add i64 %841, 1
  store i64 %842, i64* %160, align 8
  %843 = getelementptr inbounds i8, i8* %840, i64 %841
  store i8 %839, i8* %843, align 1
  %844 = and i64 %837, 71776119061217280
  %845 = icmp eq i64 %844, 71776119061217280
  br i1 %845, label %846, label %851

846:                                              ; preds = %836
  %847 = load i8*, i8** %161, align 8
  %848 = load i64, i64* %160, align 8
  %849 = add i64 %848, 1
  store i64 %849, i64* %160, align 8
  %850 = getelementptr inbounds i8, i8* %847, i64 %848
  store i8 0, i8* %850, align 1
  br label %851

851:                                              ; preds = %846, %836
  %852 = load i64, i64* %159, align 8
  %853 = lshr i64 %852, 40
  %854 = trunc i64 %853 to i8
  %855 = load i8*, i8** %161, align 8
  %856 = load i64, i64* %160, align 8
  %857 = add i64 %856, 1
  store i64 %857, i64* %160, align 8
  %858 = getelementptr inbounds i8, i8* %855, i64 %856
  store i8 %854, i8* %858, align 1
  %859 = and i64 %852, 280375465082880
  %860 = icmp eq i64 %859, 280375465082880
  br i1 %860, label %861, label %866

861:                                              ; preds = %851
  %862 = load i8*, i8** %161, align 8
  %863 = load i64, i64* %160, align 8
  %864 = add i64 %863, 1
  store i64 %864, i64* %160, align 8
  %865 = getelementptr inbounds i8, i8* %862, i64 %863
  store i8 0, i8* %865, align 1
  br label %866

866:                                              ; preds = %861, %851
  %867 = load i64, i64* %159, align 8
  %868 = lshr i64 %867, 32
  %869 = trunc i64 %868 to i8
  %870 = load i8*, i8** %161, align 8
  %871 = load i64, i64* %160, align 8
  %872 = add i64 %871, 1
  store i64 %872, i64* %160, align 8
  %873 = getelementptr inbounds i8, i8* %870, i64 %871
  store i8 %869, i8* %873, align 1
  %874 = and i64 %867, 1095216660480
  %875 = icmp eq i64 %874, 1095216660480
  br i1 %875, label %876, label %881

876:                                              ; preds = %866
  %877 = load i8*, i8** %161, align 8
  %878 = load i64, i64* %160, align 8
  %879 = add i64 %878, 1
  store i64 %879, i64* %160, align 8
  %880 = getelementptr inbounds i8, i8* %877, i64 %878
  store i8 0, i8* %880, align 1
  br label %881

881:                                              ; preds = %876, %866
  %882 = load i64, i64* %159, align 8
  %883 = lshr i64 %882, 24
  %884 = trunc i64 %883 to i8
  %885 = load i8*, i8** %161, align 8
  %886 = load i64, i64* %160, align 8
  %887 = add i64 %886, 1
  store i64 %887, i64* %160, align 8
  %888 = getelementptr inbounds i8, i8* %885, i64 %886
  store i8 %884, i8* %888, align 1
  %889 = and i64 %882, 4278190080
  %890 = icmp eq i64 %889, 4278190080
  br i1 %890, label %891, label %896

891:                                              ; preds = %881
  %892 = load i8*, i8** %161, align 8
  %893 = load i64, i64* %160, align 8
  %894 = add i64 %893, 1
  store i64 %894, i64* %160, align 8
  %895 = getelementptr inbounds i8, i8* %892, i64 %893
  store i8 0, i8* %895, align 1
  br label %896

896:                                              ; preds = %891, %881
  %897 = load i64, i64* %159, align 8
  %898 = lshr i64 %897, 16
  %899 = trunc i64 %898 to i8
  %900 = load i8*, i8** %161, align 8
  %901 = load i64, i64* %160, align 8
  %902 = add i64 %901, 1
  store i64 %902, i64* %160, align 8
  %903 = getelementptr inbounds i8, i8* %900, i64 %901
  store i8 %899, i8* %903, align 1
  %904 = and i64 %897, 16711680
  %905 = icmp eq i64 %904, 16711680
  br i1 %905, label %906, label %950

906:                                              ; preds = %896
  %907 = load i8*, i8** %161, align 8
  %908 = load i64, i64* %160, align 8
  %909 = add i64 %908, 1
  store i64 %909, i64* %160, align 8
  %910 = getelementptr inbounds i8, i8* %907, i64 %908
  store i8 0, i8* %910, align 1
  br label %950

911:                                              ; preds = %814
  %912 = getelementptr inbounds i8, i8* %826, i64 %816
  store i8 %825, i8* %912, align 1
  %913 = load i64, i64* %159, align 8
  %914 = lshr i64 %913, 48
  %915 = trunc i64 %914 to i8
  %916 = load i8*, i8** %161, align 8
  %917 = load i64, i64* %160, align 8
  %918 = add i64 %917, 1
  %919 = getelementptr inbounds i8, i8* %916, i64 %918
  store i8 %915, i8* %919, align 1
  %920 = load i64, i64* %159, align 8
  %921 = lshr i64 %920, 40
  %922 = trunc i64 %921 to i8
  %923 = load i8*, i8** %161, align 8
  %924 = load i64, i64* %160, align 8
  %925 = add i64 %924, 2
  %926 = getelementptr inbounds i8, i8* %923, i64 %925
  store i8 %922, i8* %926, align 1
  %927 = load i64, i64* %159, align 8
  %928 = lshr i64 %927, 32
  %929 = trunc i64 %928 to i8
  %930 = load i8*, i8** %161, align 8
  %931 = load i64, i64* %160, align 8
  %932 = add i64 %931, 3
  %933 = getelementptr inbounds i8, i8* %930, i64 %932
  store i8 %929, i8* %933, align 1
  %934 = load i64, i64* %159, align 8
  %935 = lshr i64 %934, 24
  %936 = trunc i64 %935 to i8
  %937 = load i8*, i8** %161, align 8
  %938 = load i64, i64* %160, align 8
  %939 = add i64 %938, 4
  %940 = getelementptr inbounds i8, i8* %937, i64 %939
  store i8 %936, i8* %940, align 1
  %941 = load i64, i64* %159, align 8
  %942 = lshr i64 %941, 16
  %943 = trunc i64 %942 to i8
  %944 = load i8*, i8** %161, align 8
  %945 = load i64, i64* %160, align 8
  %946 = add i64 %945, 5
  %947 = getelementptr inbounds i8, i8* %944, i64 %946
  store i8 %943, i8* %947, align 1
  %948 = load i64, i64* %160, align 8
  %949 = add i64 %948, 6
  store i64 %949, i64* %160, align 8
  br label %950

950:                                              ; preds = %911, %906, %896
  %951 = load i64, i64* %159, align 8
  %952 = shl i64 %951, 48
  store i64 %952, i64* %159, align 8
  %953 = load i32, i32* %158, align 8
  %954 = add nsw i32 %953, 48
  store i32 %954, i32* %158, align 8
  br label %955

955:                                              ; preds = %950, %796, %795
  %956 = icmp eq i32 %788, 0
  br i1 %956, label %1118, label %957

957:                                              ; preds = %955
  %958 = load i32, i32* %156, align 8
  %959 = shl nsw i32 -1, %788
  %960 = xor i32 %959, -1
  %961 = and i32 %958, %960
  %962 = sext i32 %961 to i64
  %963 = load i32, i32* %158, align 8
  %964 = sub nsw i32 %963, %788
  store i32 %964, i32* %158, align 8
  %965 = zext i32 %964 to i64
  %966 = shl i64 %962, %965
  %967 = load i64, i64* %159, align 8
  %968 = or i64 %966, %967
  store i64 %968, i64* %159, align 8
  %969 = icmp slt i32 %964, 17
  br i1 %969, label %970, label %1118

970:                                              ; preds = %957
  %971 = load i64, i64* %160, align 8
  %972 = add i64 %971, 12
  %973 = icmp ugt i64 %972, 16384
  br i1 %973, label %974, label %977, !prof !23

974:                                              ; preds = %970
  call fastcc void @_ZN3jxl4jpeg12_GLOBAL__N_110SwapBufferEPNS0_13JpegBitWriterE(%"struct.jxl::jpeg::JpegBitWriter"* %130) #10
  %975 = load i64, i64* %160, align 8
  %976 = load i64, i64* %159, align 8
  br label %977

977:                                              ; preds = %974, %970
  %978 = phi i64 [ %968, %970 ], [ %976, %974 ]
  %979 = phi i64 [ %971, %970 ], [ %975, %974 ]
  %980 = or i64 %978, 65535
  %981 = xor i64 %980, -65536
  %982 = add i64 %981, -72340172838076673
  %983 = and i64 %981, -9187201950435770368
  %984 = xor i64 %983, -9187201950435770368
  %985 = and i64 %984, %982
  %986 = icmp eq i64 %985, 0
  %987 = lshr i64 %978, 56
  %988 = trunc i64 %987 to i8
  %989 = load i8*, i8** %161, align 8
  br i1 %986, label %1074, label %990

990:                                              ; preds = %977
  %991 = add i64 %979, 1
  store i64 %991, i64* %160, align 8
  %992 = getelementptr inbounds i8, i8* %989, i64 %979
  store i8 %988, i8* %992, align 1
  %993 = icmp eq i64 %987, 255
  br i1 %993, label %994, label %999

994:                                              ; preds = %990
  %995 = load i8*, i8** %161, align 8
  %996 = load i64, i64* %160, align 8
  %997 = add i64 %996, 1
  store i64 %997, i64* %160, align 8
  %998 = getelementptr inbounds i8, i8* %995, i64 %996
  store i8 0, i8* %998, align 1
  br label %999

999:                                              ; preds = %994, %990
  %1000 = load i64, i64* %159, align 8
  %1001 = lshr i64 %1000, 48
  %1002 = trunc i64 %1001 to i8
  %1003 = load i8*, i8** %161, align 8
  %1004 = load i64, i64* %160, align 8
  %1005 = add i64 %1004, 1
  store i64 %1005, i64* %160, align 8
  %1006 = getelementptr inbounds i8, i8* %1003, i64 %1004
  store i8 %1002, i8* %1006, align 1
  %1007 = and i64 %1000, 71776119061217280
  %1008 = icmp eq i64 %1007, 71776119061217280
  br i1 %1008, label %1009, label %1014

1009:                                             ; preds = %999
  %1010 = load i8*, i8** %161, align 8
  %1011 = load i64, i64* %160, align 8
  %1012 = add i64 %1011, 1
  store i64 %1012, i64* %160, align 8
  %1013 = getelementptr inbounds i8, i8* %1010, i64 %1011
  store i8 0, i8* %1013, align 1
  br label %1014

1014:                                             ; preds = %1009, %999
  %1015 = load i64, i64* %159, align 8
  %1016 = lshr i64 %1015, 40
  %1017 = trunc i64 %1016 to i8
  %1018 = load i8*, i8** %161, align 8
  %1019 = load i64, i64* %160, align 8
  %1020 = add i64 %1019, 1
  store i64 %1020, i64* %160, align 8
  %1021 = getelementptr inbounds i8, i8* %1018, i64 %1019
  store i8 %1017, i8* %1021, align 1
  %1022 = and i64 %1015, 280375465082880
  %1023 = icmp eq i64 %1022, 280375465082880
  br i1 %1023, label %1024, label %1029

1024:                                             ; preds = %1014
  %1025 = load i8*, i8** %161, align 8
  %1026 = load i64, i64* %160, align 8
  %1027 = add i64 %1026, 1
  store i64 %1027, i64* %160, align 8
  %1028 = getelementptr inbounds i8, i8* %1025, i64 %1026
  store i8 0, i8* %1028, align 1
  br label %1029

1029:                                             ; preds = %1024, %1014
  %1030 = load i64, i64* %159, align 8
  %1031 = lshr i64 %1030, 32
  %1032 = trunc i64 %1031 to i8
  %1033 = load i8*, i8** %161, align 8
  %1034 = load i64, i64* %160, align 8
  %1035 = add i64 %1034, 1
  store i64 %1035, i64* %160, align 8
  %1036 = getelementptr inbounds i8, i8* %1033, i64 %1034
  store i8 %1032, i8* %1036, align 1
  %1037 = and i64 %1030, 1095216660480
  %1038 = icmp eq i64 %1037, 1095216660480
  br i1 %1038, label %1039, label %1044

1039:                                             ; preds = %1029
  %1040 = load i8*, i8** %161, align 8
  %1041 = load i64, i64* %160, align 8
  %1042 = add i64 %1041, 1
  store i64 %1042, i64* %160, align 8
  %1043 = getelementptr inbounds i8, i8* %1040, i64 %1041
  store i8 0, i8* %1043, align 1
  br label %1044

1044:                                             ; preds = %1039, %1029
  %1045 = load i64, i64* %159, align 8
  %1046 = lshr i64 %1045, 24
  %1047 = trunc i64 %1046 to i8
  %1048 = load i8*, i8** %161, align 8
  %1049 = load i64, i64* %160, align 8
  %1050 = add i64 %1049, 1
  store i64 %1050, i64* %160, align 8
  %1051 = getelementptr inbounds i8, i8* %1048, i64 %1049
  store i8 %1047, i8* %1051, align 1
  %1052 = and i64 %1045, 4278190080
  %1053 = icmp eq i64 %1052, 4278190080
  br i1 %1053, label %1054, label %1059

1054:                                             ; preds = %1044
  %1055 = load i8*, i8** %161, align 8
  %1056 = load i64, i64* %160, align 8
  %1057 = add i64 %1056, 1
  store i64 %1057, i64* %160, align 8
  %1058 = getelementptr inbounds i8, i8* %1055, i64 %1056
  store i8 0, i8* %1058, align 1
  br label %1059

1059:                                             ; preds = %1054, %1044
  %1060 = load i64, i64* %159, align 8
  %1061 = lshr i64 %1060, 16
  %1062 = trunc i64 %1061 to i8
  %1063 = load i8*, i8** %161, align 8
  %1064 = load i64, i64* %160, align 8
  %1065 = add i64 %1064, 1
  store i64 %1065, i64* %160, align 8
  %1066 = getelementptr inbounds i8, i8* %1063, i64 %1064
  store i8 %1062, i8* %1066, align 1
  %1067 = and i64 %1060, 16711680
  %1068 = icmp eq i64 %1067, 16711680
  br i1 %1068, label %1069, label %1113

1069:                                             ; preds = %1059
  %1070 = load i8*, i8** %161, align 8
  %1071 = load i64, i64* %160, align 8
  %1072 = add i64 %1071, 1
  store i64 %1072, i64* %160, align 8
  %1073 = getelementptr inbounds i8, i8* %1070, i64 %1071
  store i8 0, i8* %1073, align 1
  br label %1113

1074:                                             ; preds = %977
  %1075 = getelementptr inbounds i8, i8* %989, i64 %979
  store i8 %988, i8* %1075, align 1
  %1076 = load i64, i64* %159, align 8
  %1077 = lshr i64 %1076, 48
  %1078 = trunc i64 %1077 to i8
  %1079 = load i8*, i8** %161, align 8
  %1080 = load i64, i64* %160, align 8
  %1081 = add i64 %1080, 1
  %1082 = getelementptr inbounds i8, i8* %1079, i64 %1081
  store i8 %1078, i8* %1082, align 1
  %1083 = load i64, i64* %159, align 8
  %1084 = lshr i64 %1083, 40
  %1085 = trunc i64 %1084 to i8
  %1086 = load i8*, i8** %161, align 8
  %1087 = load i64, i64* %160, align 8
  %1088 = add i64 %1087, 2
  %1089 = getelementptr inbounds i8, i8* %1086, i64 %1088
  store i8 %1085, i8* %1089, align 1
  %1090 = load i64, i64* %159, align 8
  %1091 = lshr i64 %1090, 32
  %1092 = trunc i64 %1091 to i8
  %1093 = load i8*, i8** %161, align 8
  %1094 = load i64, i64* %160, align 8
  %1095 = add i64 %1094, 3
  %1096 = getelementptr inbounds i8, i8* %1093, i64 %1095
  store i8 %1092, i8* %1096, align 1
  %1097 = load i64, i64* %159, align 8
  %1098 = lshr i64 %1097, 24
  %1099 = trunc i64 %1098 to i8
  %1100 = load i8*, i8** %161, align 8
  %1101 = load i64, i64* %160, align 8
  %1102 = add i64 %1101, 4
  %1103 = getelementptr inbounds i8, i8* %1100, i64 %1102
  store i8 %1099, i8* %1103, align 1
  %1104 = load i64, i64* %159, align 8
  %1105 = lshr i64 %1104, 16
  %1106 = trunc i64 %1105 to i8
  %1107 = load i8*, i8** %161, align 8
  %1108 = load i64, i64* %160, align 8
  %1109 = add i64 %1108, 5
  %1110 = getelementptr inbounds i8, i8* %1107, i64 %1109
  store i8 %1106, i8* %1110, align 1
  %1111 = load i64, i64* %160, align 8
  %1112 = add i64 %1111, 6
  store i64 %1112, i64* %160, align 8
  br label %1113

1113:                                             ; preds = %1074, %1069, %1059
  %1114 = load i64, i64* %159, align 8
  %1115 = shl i64 %1114, 48
  store i64 %1115, i64* %159, align 8
  %1116 = load i32, i32* %158, align 8
  %1117 = add nsw i32 %1116, 48
  store i32 %1117, i32* %158, align 8
  br label %1118

1118:                                             ; preds = %1113, %957, %955
  store i32 0, i32* %156, align 8
  br label %1119

1119:                                             ; preds = %1118, %783
  %1120 = load i64, i64* %165, align 8
  %1121 = load i64, i64* %166, align 8
  %1122 = icmp eq i64 %1120, %1121
  br i1 %1122, label %1300, label %1123

1123:                                             ; preds = %1119
  %1124 = load i32, i32* %158, align 8
  %1125 = load i64, i64* %159, align 8
  br label %1126

1126:                                             ; preds = %1291, %1123
  %1127 = phi i64 [ %1121, %1123 ], [ %1292, %1291 ]
  %1128 = phi i64 [ %1120, %1123 ], [ %1293, %1291 ]
  %1129 = phi i64 [ %1125, %1123 ], [ %1294, %1291 ]
  %1130 = phi i32 [ %1124, %1123 ], [ %1295, %1291 ]
  %1131 = phi i64 [ 0, %1123 ], [ %1296, %1291 ]
  %1132 = inttoptr i64 %1127 to i32*
  %1133 = getelementptr inbounds i32, i32* %1132, i64 %1131
  %1134 = load i32, i32* %1133, align 4
  %1135 = sext i32 %1134 to i64
  %1136 = add nsw i32 %1130, -1
  store i32 %1136, i32* %158, align 8
  %1137 = zext i32 %1136 to i64
  %1138 = shl i64 %1135, %1137
  %1139 = or i64 %1138, %1129
  store i64 %1139, i64* %159, align 8
  %1140 = icmp slt i32 %1130, 18
  br i1 %1140, label %1141, label %1291

1141:                                             ; preds = %1126
  %1142 = load i64, i64* %160, align 8
  %1143 = add i64 %1142, 12
  %1144 = icmp ugt i64 %1143, 16384
  br i1 %1144, label %1145, label %1148, !prof !23

1145:                                             ; preds = %1141
  call fastcc void @_ZN3jxl4jpeg12_GLOBAL__N_110SwapBufferEPNS0_13JpegBitWriterE(%"struct.jxl::jpeg::JpegBitWriter"* %130) #10
  %1146 = load i64, i64* %160, align 8
  %1147 = load i64, i64* %159, align 8
  br label %1148

1148:                                             ; preds = %1145, %1141
  %1149 = phi i64 [ %1139, %1141 ], [ %1147, %1145 ]
  %1150 = phi i64 [ %1142, %1141 ], [ %1146, %1145 ]
  %1151 = or i64 %1149, 65535
  %1152 = xor i64 %1151, -65536
  %1153 = add i64 %1152, -72340172838076673
  %1154 = and i64 %1152, -9187201950435770368
  %1155 = xor i64 %1154, -9187201950435770368
  %1156 = and i64 %1155, %1153
  %1157 = icmp eq i64 %1156, 0
  %1158 = lshr i64 %1149, 56
  %1159 = trunc i64 %1158 to i8
  %1160 = load i8*, i8** %161, align 8
  br i1 %1157, label %1245, label %1161

1161:                                             ; preds = %1148
  %1162 = add i64 %1150, 1
  store i64 %1162, i64* %160, align 8
  %1163 = getelementptr inbounds i8, i8* %1160, i64 %1150
  store i8 %1159, i8* %1163, align 1
  %1164 = icmp eq i64 %1158, 255
  br i1 %1164, label %1165, label %1170

1165:                                             ; preds = %1161
  %1166 = load i8*, i8** %161, align 8
  %1167 = load i64, i64* %160, align 8
  %1168 = add i64 %1167, 1
  store i64 %1168, i64* %160, align 8
  %1169 = getelementptr inbounds i8, i8* %1166, i64 %1167
  store i8 0, i8* %1169, align 1
  br label %1170

1170:                                             ; preds = %1165, %1161
  %1171 = load i64, i64* %159, align 8
  %1172 = lshr i64 %1171, 48
  %1173 = trunc i64 %1172 to i8
  %1174 = load i8*, i8** %161, align 8
  %1175 = load i64, i64* %160, align 8
  %1176 = add i64 %1175, 1
  store i64 %1176, i64* %160, align 8
  %1177 = getelementptr inbounds i8, i8* %1174, i64 %1175
  store i8 %1173, i8* %1177, align 1
  %1178 = and i64 %1171, 71776119061217280
  %1179 = icmp eq i64 %1178, 71776119061217280
  br i1 %1179, label %1180, label %1185

1180:                                             ; preds = %1170
  %1181 = load i8*, i8** %161, align 8
  %1182 = load i64, i64* %160, align 8
  %1183 = add i64 %1182, 1
  store i64 %1183, i64* %160, align 8
  %1184 = getelementptr inbounds i8, i8* %1181, i64 %1182
  store i8 0, i8* %1184, align 1
  br label %1185

1185:                                             ; preds = %1180, %1170
  %1186 = load i64, i64* %159, align 8
  %1187 = lshr i64 %1186, 40
  %1188 = trunc i64 %1187 to i8
  %1189 = load i8*, i8** %161, align 8
  %1190 = load i64, i64* %160, align 8
  %1191 = add i64 %1190, 1
  store i64 %1191, i64* %160, align 8
  %1192 = getelementptr inbounds i8, i8* %1189, i64 %1190
  store i8 %1188, i8* %1192, align 1
  %1193 = and i64 %1186, 280375465082880
  %1194 = icmp eq i64 %1193, 280375465082880
  br i1 %1194, label %1195, label %1200

1195:                                             ; preds = %1185
  %1196 = load i8*, i8** %161, align 8
  %1197 = load i64, i64* %160, align 8
  %1198 = add i64 %1197, 1
  store i64 %1198, i64* %160, align 8
  %1199 = getelementptr inbounds i8, i8* %1196, i64 %1197
  store i8 0, i8* %1199, align 1
  br label %1200

1200:                                             ; preds = %1195, %1185
  %1201 = load i64, i64* %159, align 8
  %1202 = lshr i64 %1201, 32
  %1203 = trunc i64 %1202 to i8
  %1204 = load i8*, i8** %161, align 8
  %1205 = load i64, i64* %160, align 8
  %1206 = add i64 %1205, 1
  store i64 %1206, i64* %160, align 8
  %1207 = getelementptr inbounds i8, i8* %1204, i64 %1205
  store i8 %1203, i8* %1207, align 1
  %1208 = and i64 %1201, 1095216660480
  %1209 = icmp eq i64 %1208, 1095216660480
  br i1 %1209, label %1210, label %1215

1210:                                             ; preds = %1200
  %1211 = load i8*, i8** %161, align 8
  %1212 = load i64, i64* %160, align 8
  %1213 = add i64 %1212, 1
  store i64 %1213, i64* %160, align 8
  %1214 = getelementptr inbounds i8, i8* %1211, i64 %1212
  store i8 0, i8* %1214, align 1
  br label %1215

1215:                                             ; preds = %1210, %1200
  %1216 = load i64, i64* %159, align 8
  %1217 = lshr i64 %1216, 24
  %1218 = trunc i64 %1217 to i8
  %1219 = load i8*, i8** %161, align 8
  %1220 = load i64, i64* %160, align 8
  %1221 = add i64 %1220, 1
  store i64 %1221, i64* %160, align 8
  %1222 = getelementptr inbounds i8, i8* %1219, i64 %1220
  store i8 %1218, i8* %1222, align 1
  %1223 = and i64 %1216, 4278190080
  %1224 = icmp eq i64 %1223, 4278190080
  br i1 %1224, label %1225, label %1230

1225:                                             ; preds = %1215
  %1226 = load i8*, i8** %161, align 8
  %1227 = load i64, i64* %160, align 8
  %1228 = add i64 %1227, 1
  store i64 %1228, i64* %160, align 8
  %1229 = getelementptr inbounds i8, i8* %1226, i64 %1227
  store i8 0, i8* %1229, align 1
  br label %1230

1230:                                             ; preds = %1225, %1215
  %1231 = load i64, i64* %159, align 8
  %1232 = lshr i64 %1231, 16
  %1233 = trunc i64 %1232 to i8
  %1234 = load i8*, i8** %161, align 8
  %1235 = load i64, i64* %160, align 8
  %1236 = add i64 %1235, 1
  store i64 %1236, i64* %160, align 8
  %1237 = getelementptr inbounds i8, i8* %1234, i64 %1235
  store i8 %1233, i8* %1237, align 1
  %1238 = and i64 %1231, 16711680
  %1239 = icmp eq i64 %1238, 16711680
  br i1 %1239, label %1240, label %1284

1240:                                             ; preds = %1230
  %1241 = load i8*, i8** %161, align 8
  %1242 = load i64, i64* %160, align 8
  %1243 = add i64 %1242, 1
  store i64 %1243, i64* %160, align 8
  %1244 = getelementptr inbounds i8, i8* %1241, i64 %1242
  store i8 0, i8* %1244, align 1
  br label %1284

1245:                                             ; preds = %1148
  %1246 = getelementptr inbounds i8, i8* %1160, i64 %1150
  store i8 %1159, i8* %1246, align 1
  %1247 = load i64, i64* %159, align 8
  %1248 = lshr i64 %1247, 48
  %1249 = trunc i64 %1248 to i8
  %1250 = load i8*, i8** %161, align 8
  %1251 = load i64, i64* %160, align 8
  %1252 = add i64 %1251, 1
  %1253 = getelementptr inbounds i8, i8* %1250, i64 %1252
  store i8 %1249, i8* %1253, align 1
  %1254 = load i64, i64* %159, align 8
  %1255 = lshr i64 %1254, 40
  %1256 = trunc i64 %1255 to i8
  %1257 = load i8*, i8** %161, align 8
  %1258 = load i64, i64* %160, align 8
  %1259 = add i64 %1258, 2
  %1260 = getelementptr inbounds i8, i8* %1257, i64 %1259
  store i8 %1256, i8* %1260, align 1
  %1261 = load i64, i64* %159, align 8
  %1262 = lshr i64 %1261, 32
  %1263 = trunc i64 %1262 to i8
  %1264 = load i8*, i8** %161, align 8
  %1265 = load i64, i64* %160, align 8
  %1266 = add i64 %1265, 3
  %1267 = getelementptr inbounds i8, i8* %1264, i64 %1266
  store i8 %1263, i8* %1267, align 1
  %1268 = load i64, i64* %159, align 8
  %1269 = lshr i64 %1268, 24
  %1270 = trunc i64 %1269 to i8
  %1271 = load i8*, i8** %161, align 8
  %1272 = load i64, i64* %160, align 8
  %1273 = add i64 %1272, 4
  %1274 = getelementptr inbounds i8, i8* %1271, i64 %1273
  store i8 %1270, i8* %1274, align 1
  %1275 = load i64, i64* %159, align 8
  %1276 = lshr i64 %1275, 16
  %1277 = trunc i64 %1276 to i8
  %1278 = load i8*, i8** %161, align 8
  %1279 = load i64, i64* %160, align 8
  %1280 = add i64 %1279, 5
  %1281 = getelementptr inbounds i8, i8* %1278, i64 %1280
  store i8 %1277, i8* %1281, align 1
  %1282 = load i64, i64* %160, align 8
  %1283 = add i64 %1282, 6
  store i64 %1283, i64* %160, align 8
  br label %1284

1284:                                             ; preds = %1245, %1240, %1230
  %1285 = load i64, i64* %159, align 8
  %1286 = shl i64 %1285, 48
  store i64 %1286, i64* %159, align 8
  %1287 = load i32, i32* %158, align 8
  %1288 = add nsw i32 %1287, 48
  store i32 %1288, i32* %158, align 8
  %1289 = load i64, i64* %165, align 8
  %1290 = load i64, i64* %166, align 8
  br label %1291

1291:                                             ; preds = %1284, %1126
  %1292 = phi i64 [ %1127, %1126 ], [ %1290, %1284 ]
  %1293 = phi i64 [ %1128, %1126 ], [ %1289, %1284 ]
  %1294 = phi i64 [ %1139, %1126 ], [ %1286, %1284 ]
  %1295 = phi i32 [ %1136, %1126 ], [ %1288, %1284 ]
  %1296 = add nuw i64 %1131, 1
  %1297 = sub i64 %1293, %1292
  %1298 = ashr exact i64 %1297, 2
  %1299 = icmp ult i64 %1296, %1298
  br i1 %1299, label %1126, label %1300

1300:                                             ; preds = %1291, %1119
  %1301 = phi i64 [ %1120, %1119 ], [ %1292, %1291 ]
  store i64 %1301, i64* %165, align 8
  %1302 = load i64, i64* %176, align 8
  %1303 = load i64, i64* %179, align 8
  %1304 = load i64, i64* %180, align 8
  %1305 = sub i64 %1303, %1304
  %1306 = ashr exact i64 %1305, 2
  %1307 = icmp ult i64 %1302, %1306
  br i1 %1307, label %1308, label %1313

1308:                                             ; preds = %1300
  %1309 = add nuw i64 %1302, 1
  store i64 %1309, i64* %176, align 8
  %1310 = load i32*, i32** %181, align 8
  %1311 = getelementptr inbounds i32, i32* %1310, i64 %1302
  %1312 = load i32, i32* %1311, align 4
  br label %1313

1313:                                             ; preds = %1300, %1308
  %1314 = phi i32 [ %1312, %1308 ], [ -1, %1300 ]
  store i32 %1314, i32* %175, align 8
  %1315 = load i32, i32* %174, align 8
  br label %1316

1316:                                             ; preds = %1313, %771
  %1317 = phi i32 [ %1315, %1313 ], [ %772, %771 ]
  %1318 = load i32, i32* %182, align 8
  %1319 = icmp eq i32 %1317, %1318
  br i1 %1319, label %1320, label %1334

1320:                                             ; preds = %1316
  %1321 = load i64, i64* %184, align 8
  %1322 = add i64 %1321, 1
  store i64 %1322, i64* %184, align 8
  %1323 = load i64, i64* %186, align 8
  %1324 = load i64, i64* %187, align 8
  %1325 = sub i64 %1323, %1324
  %1326 = ashr exact i64 %1325, 3
  %1327 = icmp ult i64 %1322, %1326
  br i1 %1327, label %1328, label %1332

1328:                                             ; preds = %1320
  %1329 = inttoptr i64 %1324 to %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*
  %1330 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo", %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* %1329, i64 %1322, i32 0
  %1331 = load i32, i32* %1330, align 4
  br label %1332

1332:                                             ; preds = %1320, %1328
  %1333 = phi i32 [ %1331, %1328 ], [ -1, %1320 ]
  store i32 %1333, i32* %182, align 8
  br label %1334

1334:                                             ; preds = %1332, %1316
  %1335 = shl i32 %780, 6
  %1336 = sext i32 %1335 to i64
  %1337 = load i16*, i16** %766, align 8
  %1338 = getelementptr inbounds i16, i16* %1337, i64 %1336
  call fastcc void @_ZN3jxl4jpeg12_GLOBAL__N_120EncodeRefinementBitsEPKsRKNS0_16HuffmanCodeTableEiiiPNS0_14DCTCodingStateEPNS0_13JpegBitWriterE(i16* %1338, %"struct.jxl::jpeg::HuffmanCodeTable"* dereferenceable(2048) %754, i32 %145, i32 %148, i32 %142, %"struct.jxl::jpeg::DCTCodingState"* %131, %"struct.jxl::jpeg::JpegBitWriter"* %130)
  %1339 = load i32, i32* %174, align 8
  %1340 = add nsw i32 %1339, 1
  store i32 %1340, i32* %174, align 8
  %1341 = add nuw nsw i32 %773, 1
  %1342 = icmp eq i32 %1341, %760
  br i1 %1342, label %1343, label %771

1343:                                             ; preds = %1334, %767
  %1344 = add nuw nsw i32 %768, 1
  %1345 = icmp eq i32 %1344, %757
  br i1 %1345, label %1346, label %767

1346:                                             ; preds = %1343
  %1347 = load i32, i32* %132, align 8
  br label %1348

1348:                                             ; preds = %1346, %743
  %1349 = phi i32 [ %1347, %1346 ], [ %744, %743 ]
  %1350 = add nuw nsw i64 %745, 1
  %1351 = zext i32 %1349 to i64
  %1352 = icmp ult i64 %1350, %1351
  br i1 %1352, label %743, label %1353

1353:                                             ; preds = %1348, %740
  %1354 = load i32, i32* %155, align 8
  %1355 = add nsw i32 %1354, -1
  store i32 %1355, i32* %155, align 8
  %1356 = add nuw nsw i32 %194, 1
  %1357 = load i32, i32* %3, align 4
  %1358 = icmp slt i32 %1356, %1357
  br i1 %1358, label %193, label %1359

1359:                                             ; preds = %1353
  %1360 = load i32, i32* %150, align 4
  br label %1361

1361:                                             ; preds = %1359, %189
  %1362 = phi i32 [ %1360, %1359 ], [ %190, %189 ]
  %1363 = phi i32 [ %1357, %1359 ], [ %191, %189 ]
  %1364 = add nsw i32 %1362, 1
  store i32 %1364, i32* %150, align 4
  %1365 = icmp slt i32 %1364, %149
  br i1 %1365, label %189, label %1366

1366:                                             ; preds = %1361
  %1367 = load i32, i32* %4, align 4
  br label %1368

1368:                                             ; preds = %1366, %129
  %1369 = phi i32 [ %149, %129 ], [ %1367, %1366 ]
  %1370 = phi i32 [ %151, %129 ], [ %1364, %1366 ]
  %1371 = icmp slt i32 %1370, %1369
  br i1 %1371, label %1372, label %1377

1372:                                             ; preds = %1368
  %1373 = getelementptr inbounds %"struct.jxl::jpeg::JpegBitWriter", %"struct.jxl::jpeg::JpegBitWriter"* %130, i64 0, i32 0
  %1374 = load i8, i8* %1373, align 8, !range !2
  %1375 = icmp eq i8 %1374, 0
  %1376 = select i1 %1375, i32 2, i32 0
  br label %1999

1377:                                             ; preds = %1368
  %1378 = getelementptr inbounds %"struct.jxl::jpeg::DCTCodingState", %"struct.jxl::jpeg::DCTCodingState"* %131, i64 0, i32 0
  %1379 = load i32, i32* %1378, align 8
  %1380 = icmp sgt i32 %1379, 0
  br i1 %1380, label %1381, label %1724

1381:                                             ; preds = %1377
  %1382 = call i32 @llvm.ctlz.i32(i32 %1379, i1 true) #10, !range !22
  %1383 = xor i32 %1382, 31
  %1384 = shl nuw nsw i32 %1383, 4
  %1385 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 8, i32 1
  %1386 = load %"struct.jxl::jpeg::HuffmanCodeTable"*, %"struct.jxl::jpeg::HuffmanCodeTable"** %1385, align 8
  %1387 = zext i32 %1384 to i64
  %1388 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanCodeTable", %"struct.jxl::jpeg::HuffmanCodeTable"* %1386, i64 0, i32 0, i64 %1387
  %1389 = load i32, i32* %1388, align 4
  %1390 = icmp eq i32 %1389, 0
  br i1 %1390, label %1391, label %1393

1391:                                             ; preds = %1381
  %1392 = getelementptr inbounds %"struct.jxl::jpeg::JpegBitWriter", %"struct.jxl::jpeg::JpegBitWriter"* %130, i64 0, i32 0
  store i8 0, i8* %1392, align 8
  br label %1556

1393:                                             ; preds = %1381
  %1394 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanCodeTable", %"struct.jxl::jpeg::HuffmanCodeTable"* %1386, i64 0, i32 1, i64 %1387
  %1395 = load i32, i32* %1394, align 4
  %1396 = sext i32 %1395 to i64
  %1397 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2, i32 7
  %1398 = load i32, i32* %1397, align 8
  %1399 = sub nsw i32 %1398, %1389
  store i32 %1399, i32* %1397, align 8
  %1400 = zext i32 %1399 to i64
  %1401 = shl i64 %1396, %1400
  %1402 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2, i32 6
  %1403 = load i64, i64* %1402, align 8
  %1404 = or i64 %1401, %1403
  store i64 %1404, i64* %1402, align 8
  %1405 = icmp slt i32 %1399, 17
  br i1 %1405, label %1406, label %1556

1406:                                             ; preds = %1393
  %1407 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2, i32 5
  %1408 = load i64, i64* %1407, align 8
  %1409 = add i64 %1408, 12
  %1410 = icmp ugt i64 %1409, 16384
  br i1 %1410, label %1411, label %1414, !prof !23

1411:                                             ; preds = %1406
  call fastcc void @_ZN3jxl4jpeg12_GLOBAL__N_110SwapBufferEPNS0_13JpegBitWriterE(%"struct.jxl::jpeg::JpegBitWriter"* %130) #10
  %1412 = load i64, i64* %1407, align 8
  %1413 = load i64, i64* %1402, align 8
  br label %1414

1414:                                             ; preds = %1411, %1406
  %1415 = phi i64 [ %1404, %1406 ], [ %1413, %1411 ]
  %1416 = phi i64 [ %1408, %1406 ], [ %1412, %1411 ]
  %1417 = or i64 %1415, 65535
  %1418 = xor i64 %1417, -65536
  %1419 = add i64 %1418, -72340172838076673
  %1420 = and i64 %1418, -9187201950435770368
  %1421 = xor i64 %1420, -9187201950435770368
  %1422 = and i64 %1421, %1419
  %1423 = icmp eq i64 %1422, 0
  %1424 = lshr i64 %1415, 56
  %1425 = trunc i64 %1424 to i8
  %1426 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2, i32 4
  %1427 = load i8*, i8** %1426, align 8
  br i1 %1423, label %1512, label %1428

1428:                                             ; preds = %1414
  %1429 = add i64 %1416, 1
  store i64 %1429, i64* %1407, align 8
  %1430 = getelementptr inbounds i8, i8* %1427, i64 %1416
  store i8 %1425, i8* %1430, align 1
  %1431 = icmp eq i64 %1424, 255
  br i1 %1431, label %1432, label %1437

1432:                                             ; preds = %1428
  %1433 = load i8*, i8** %1426, align 8
  %1434 = load i64, i64* %1407, align 8
  %1435 = add i64 %1434, 1
  store i64 %1435, i64* %1407, align 8
  %1436 = getelementptr inbounds i8, i8* %1433, i64 %1434
  store i8 0, i8* %1436, align 1
  br label %1437

1437:                                             ; preds = %1432, %1428
  %1438 = load i64, i64* %1402, align 8
  %1439 = lshr i64 %1438, 48
  %1440 = trunc i64 %1439 to i8
  %1441 = load i8*, i8** %1426, align 8
  %1442 = load i64, i64* %1407, align 8
  %1443 = add i64 %1442, 1
  store i64 %1443, i64* %1407, align 8
  %1444 = getelementptr inbounds i8, i8* %1441, i64 %1442
  store i8 %1440, i8* %1444, align 1
  %1445 = and i64 %1438, 71776119061217280
  %1446 = icmp eq i64 %1445, 71776119061217280
  br i1 %1446, label %1447, label %1452

1447:                                             ; preds = %1437
  %1448 = load i8*, i8** %1426, align 8
  %1449 = load i64, i64* %1407, align 8
  %1450 = add i64 %1449, 1
  store i64 %1450, i64* %1407, align 8
  %1451 = getelementptr inbounds i8, i8* %1448, i64 %1449
  store i8 0, i8* %1451, align 1
  br label %1452

1452:                                             ; preds = %1447, %1437
  %1453 = load i64, i64* %1402, align 8
  %1454 = lshr i64 %1453, 40
  %1455 = trunc i64 %1454 to i8
  %1456 = load i8*, i8** %1426, align 8
  %1457 = load i64, i64* %1407, align 8
  %1458 = add i64 %1457, 1
  store i64 %1458, i64* %1407, align 8
  %1459 = getelementptr inbounds i8, i8* %1456, i64 %1457
  store i8 %1455, i8* %1459, align 1
  %1460 = and i64 %1453, 280375465082880
  %1461 = icmp eq i64 %1460, 280375465082880
  br i1 %1461, label %1462, label %1467

1462:                                             ; preds = %1452
  %1463 = load i8*, i8** %1426, align 8
  %1464 = load i64, i64* %1407, align 8
  %1465 = add i64 %1464, 1
  store i64 %1465, i64* %1407, align 8
  %1466 = getelementptr inbounds i8, i8* %1463, i64 %1464
  store i8 0, i8* %1466, align 1
  br label %1467

1467:                                             ; preds = %1462, %1452
  %1468 = load i64, i64* %1402, align 8
  %1469 = lshr i64 %1468, 32
  %1470 = trunc i64 %1469 to i8
  %1471 = load i8*, i8** %1426, align 8
  %1472 = load i64, i64* %1407, align 8
  %1473 = add i64 %1472, 1
  store i64 %1473, i64* %1407, align 8
  %1474 = getelementptr inbounds i8, i8* %1471, i64 %1472
  store i8 %1470, i8* %1474, align 1
  %1475 = and i64 %1468, 1095216660480
  %1476 = icmp eq i64 %1475, 1095216660480
  br i1 %1476, label %1477, label %1482

1477:                                             ; preds = %1467
  %1478 = load i8*, i8** %1426, align 8
  %1479 = load i64, i64* %1407, align 8
  %1480 = add i64 %1479, 1
  store i64 %1480, i64* %1407, align 8
  %1481 = getelementptr inbounds i8, i8* %1478, i64 %1479
  store i8 0, i8* %1481, align 1
  br label %1482

1482:                                             ; preds = %1477, %1467
  %1483 = load i64, i64* %1402, align 8
  %1484 = lshr i64 %1483, 24
  %1485 = trunc i64 %1484 to i8
  %1486 = load i8*, i8** %1426, align 8
  %1487 = load i64, i64* %1407, align 8
  %1488 = add i64 %1487, 1
  store i64 %1488, i64* %1407, align 8
  %1489 = getelementptr inbounds i8, i8* %1486, i64 %1487
  store i8 %1485, i8* %1489, align 1
  %1490 = and i64 %1483, 4278190080
  %1491 = icmp eq i64 %1490, 4278190080
  br i1 %1491, label %1492, label %1497

1492:                                             ; preds = %1482
  %1493 = load i8*, i8** %1426, align 8
  %1494 = load i64, i64* %1407, align 8
  %1495 = add i64 %1494, 1
  store i64 %1495, i64* %1407, align 8
  %1496 = getelementptr inbounds i8, i8* %1493, i64 %1494
  store i8 0, i8* %1496, align 1
  br label %1497

1497:                                             ; preds = %1492, %1482
  %1498 = load i64, i64* %1402, align 8
  %1499 = lshr i64 %1498, 16
  %1500 = trunc i64 %1499 to i8
  %1501 = load i8*, i8** %1426, align 8
  %1502 = load i64, i64* %1407, align 8
  %1503 = add i64 %1502, 1
  store i64 %1503, i64* %1407, align 8
  %1504 = getelementptr inbounds i8, i8* %1501, i64 %1502
  store i8 %1500, i8* %1504, align 1
  %1505 = and i64 %1498, 16711680
  %1506 = icmp eq i64 %1505, 16711680
  br i1 %1506, label %1507, label %1551

1507:                                             ; preds = %1497
  %1508 = load i8*, i8** %1426, align 8
  %1509 = load i64, i64* %1407, align 8
  %1510 = add i64 %1509, 1
  store i64 %1510, i64* %1407, align 8
  %1511 = getelementptr inbounds i8, i8* %1508, i64 %1509
  store i8 0, i8* %1511, align 1
  br label %1551

1512:                                             ; preds = %1414
  %1513 = getelementptr inbounds i8, i8* %1427, i64 %1416
  store i8 %1425, i8* %1513, align 1
  %1514 = load i64, i64* %1402, align 8
  %1515 = lshr i64 %1514, 48
  %1516 = trunc i64 %1515 to i8
  %1517 = load i8*, i8** %1426, align 8
  %1518 = load i64, i64* %1407, align 8
  %1519 = add i64 %1518, 1
  %1520 = getelementptr inbounds i8, i8* %1517, i64 %1519
  store i8 %1516, i8* %1520, align 1
  %1521 = load i64, i64* %1402, align 8
  %1522 = lshr i64 %1521, 40
  %1523 = trunc i64 %1522 to i8
  %1524 = load i8*, i8** %1426, align 8
  %1525 = load i64, i64* %1407, align 8
  %1526 = add i64 %1525, 2
  %1527 = getelementptr inbounds i8, i8* %1524, i64 %1526
  store i8 %1523, i8* %1527, align 1
  %1528 = load i64, i64* %1402, align 8
  %1529 = lshr i64 %1528, 32
  %1530 = trunc i64 %1529 to i8
  %1531 = load i8*, i8** %1426, align 8
  %1532 = load i64, i64* %1407, align 8
  %1533 = add i64 %1532, 3
  %1534 = getelementptr inbounds i8, i8* %1531, i64 %1533
  store i8 %1530, i8* %1534, align 1
  %1535 = load i64, i64* %1402, align 8
  %1536 = lshr i64 %1535, 24
  %1537 = trunc i64 %1536 to i8
  %1538 = load i8*, i8** %1426, align 8
  %1539 = load i64, i64* %1407, align 8
  %1540 = add i64 %1539, 4
  %1541 = getelementptr inbounds i8, i8* %1538, i64 %1540
  store i8 %1537, i8* %1541, align 1
  %1542 = load i64, i64* %1402, align 8
  %1543 = lshr i64 %1542, 16
  %1544 = trunc i64 %1543 to i8
  %1545 = load i8*, i8** %1426, align 8
  %1546 = load i64, i64* %1407, align 8
  %1547 = add i64 %1546, 5
  %1548 = getelementptr inbounds i8, i8* %1545, i64 %1547
  store i8 %1544, i8* %1548, align 1
  %1549 = load i64, i64* %1407, align 8
  %1550 = add i64 %1549, 6
  store i64 %1550, i64* %1407, align 8
  br label %1551

1551:                                             ; preds = %1512, %1507, %1497
  %1552 = load i64, i64* %1402, align 8
  %1553 = shl i64 %1552, 48
  store i64 %1553, i64* %1402, align 8
  %1554 = load i32, i32* %1397, align 8
  %1555 = add nsw i32 %1554, 48
  store i32 %1555, i32* %1397, align 8
  br label %1556

1556:                                             ; preds = %1551, %1393, %1391
  %1557 = icmp eq i32 %1383, 0
  br i1 %1557, label %1723, label %1558

1558:                                             ; preds = %1556
  %1559 = load i32, i32* %1378, align 8
  %1560 = shl nsw i32 -1, %1383
  %1561 = xor i32 %1560, -1
  %1562 = and i32 %1559, %1561
  %1563 = sext i32 %1562 to i64
  %1564 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2, i32 7
  %1565 = load i32, i32* %1564, align 8
  %1566 = sub nsw i32 %1565, %1383
  store i32 %1566, i32* %1564, align 8
  %1567 = zext i32 %1566 to i64
  %1568 = shl i64 %1563, %1567
  %1569 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2, i32 6
  %1570 = load i64, i64* %1569, align 8
  %1571 = or i64 %1568, %1570
  store i64 %1571, i64* %1569, align 8
  %1572 = icmp slt i32 %1566, 17
  br i1 %1572, label %1573, label %1723

1573:                                             ; preds = %1558
  %1574 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2, i32 5
  %1575 = load i64, i64* %1574, align 8
  %1576 = add i64 %1575, 12
  %1577 = icmp ugt i64 %1576, 16384
  br i1 %1577, label %1578, label %1581, !prof !23

1578:                                             ; preds = %1573
  call fastcc void @_ZN3jxl4jpeg12_GLOBAL__N_110SwapBufferEPNS0_13JpegBitWriterE(%"struct.jxl::jpeg::JpegBitWriter"* %130) #10
  %1579 = load i64, i64* %1574, align 8
  %1580 = load i64, i64* %1569, align 8
  br label %1581

1581:                                             ; preds = %1578, %1573
  %1582 = phi i64 [ %1571, %1573 ], [ %1580, %1578 ]
  %1583 = phi i64 [ %1575, %1573 ], [ %1579, %1578 ]
  %1584 = or i64 %1582, 65535
  %1585 = xor i64 %1584, -65536
  %1586 = add i64 %1585, -72340172838076673
  %1587 = and i64 %1585, -9187201950435770368
  %1588 = xor i64 %1587, -9187201950435770368
  %1589 = and i64 %1588, %1586
  %1590 = icmp eq i64 %1589, 0
  %1591 = lshr i64 %1582, 56
  %1592 = trunc i64 %1591 to i8
  %1593 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2, i32 4
  %1594 = load i8*, i8** %1593, align 8
  br i1 %1590, label %1679, label %1595

1595:                                             ; preds = %1581
  %1596 = add i64 %1583, 1
  store i64 %1596, i64* %1574, align 8
  %1597 = getelementptr inbounds i8, i8* %1594, i64 %1583
  store i8 %1592, i8* %1597, align 1
  %1598 = icmp eq i64 %1591, 255
  br i1 %1598, label %1599, label %1604

1599:                                             ; preds = %1595
  %1600 = load i8*, i8** %1593, align 8
  %1601 = load i64, i64* %1574, align 8
  %1602 = add i64 %1601, 1
  store i64 %1602, i64* %1574, align 8
  %1603 = getelementptr inbounds i8, i8* %1600, i64 %1601
  store i8 0, i8* %1603, align 1
  br label %1604

1604:                                             ; preds = %1599, %1595
  %1605 = load i64, i64* %1569, align 8
  %1606 = lshr i64 %1605, 48
  %1607 = trunc i64 %1606 to i8
  %1608 = load i8*, i8** %1593, align 8
  %1609 = load i64, i64* %1574, align 8
  %1610 = add i64 %1609, 1
  store i64 %1610, i64* %1574, align 8
  %1611 = getelementptr inbounds i8, i8* %1608, i64 %1609
  store i8 %1607, i8* %1611, align 1
  %1612 = and i64 %1605, 71776119061217280
  %1613 = icmp eq i64 %1612, 71776119061217280
  br i1 %1613, label %1614, label %1619

1614:                                             ; preds = %1604
  %1615 = load i8*, i8** %1593, align 8
  %1616 = load i64, i64* %1574, align 8
  %1617 = add i64 %1616, 1
  store i64 %1617, i64* %1574, align 8
  %1618 = getelementptr inbounds i8, i8* %1615, i64 %1616
  store i8 0, i8* %1618, align 1
  br label %1619

1619:                                             ; preds = %1614, %1604
  %1620 = load i64, i64* %1569, align 8
  %1621 = lshr i64 %1620, 40
  %1622 = trunc i64 %1621 to i8
  %1623 = load i8*, i8** %1593, align 8
  %1624 = load i64, i64* %1574, align 8
  %1625 = add i64 %1624, 1
  store i64 %1625, i64* %1574, align 8
  %1626 = getelementptr inbounds i8, i8* %1623, i64 %1624
  store i8 %1622, i8* %1626, align 1
  %1627 = and i64 %1620, 280375465082880
  %1628 = icmp eq i64 %1627, 280375465082880
  br i1 %1628, label %1629, label %1634

1629:                                             ; preds = %1619
  %1630 = load i8*, i8** %1593, align 8
  %1631 = load i64, i64* %1574, align 8
  %1632 = add i64 %1631, 1
  store i64 %1632, i64* %1574, align 8
  %1633 = getelementptr inbounds i8, i8* %1630, i64 %1631
  store i8 0, i8* %1633, align 1
  br label %1634

1634:                                             ; preds = %1629, %1619
  %1635 = load i64, i64* %1569, align 8
  %1636 = lshr i64 %1635, 32
  %1637 = trunc i64 %1636 to i8
  %1638 = load i8*, i8** %1593, align 8
  %1639 = load i64, i64* %1574, align 8
  %1640 = add i64 %1639, 1
  store i64 %1640, i64* %1574, align 8
  %1641 = getelementptr inbounds i8, i8* %1638, i64 %1639
  store i8 %1637, i8* %1641, align 1
  %1642 = and i64 %1635, 1095216660480
  %1643 = icmp eq i64 %1642, 1095216660480
  br i1 %1643, label %1644, label %1649

1644:                                             ; preds = %1634
  %1645 = load i8*, i8** %1593, align 8
  %1646 = load i64, i64* %1574, align 8
  %1647 = add i64 %1646, 1
  store i64 %1647, i64* %1574, align 8
  %1648 = getelementptr inbounds i8, i8* %1645, i64 %1646
  store i8 0, i8* %1648, align 1
  br label %1649

1649:                                             ; preds = %1644, %1634
  %1650 = load i64, i64* %1569, align 8
  %1651 = lshr i64 %1650, 24
  %1652 = trunc i64 %1651 to i8
  %1653 = load i8*, i8** %1593, align 8
  %1654 = load i64, i64* %1574, align 8
  %1655 = add i64 %1654, 1
  store i64 %1655, i64* %1574, align 8
  %1656 = getelementptr inbounds i8, i8* %1653, i64 %1654
  store i8 %1652, i8* %1656, align 1
  %1657 = and i64 %1650, 4278190080
  %1658 = icmp eq i64 %1657, 4278190080
  br i1 %1658, label %1659, label %1664

1659:                                             ; preds = %1649
  %1660 = load i8*, i8** %1593, align 8
  %1661 = load i64, i64* %1574, align 8
  %1662 = add i64 %1661, 1
  store i64 %1662, i64* %1574, align 8
  %1663 = getelementptr inbounds i8, i8* %1660, i64 %1661
  store i8 0, i8* %1663, align 1
  br label %1664

1664:                                             ; preds = %1659, %1649
  %1665 = load i64, i64* %1569, align 8
  %1666 = lshr i64 %1665, 16
  %1667 = trunc i64 %1666 to i8
  %1668 = load i8*, i8** %1593, align 8
  %1669 = load i64, i64* %1574, align 8
  %1670 = add i64 %1669, 1
  store i64 %1670, i64* %1574, align 8
  %1671 = getelementptr inbounds i8, i8* %1668, i64 %1669
  store i8 %1667, i8* %1671, align 1
  %1672 = and i64 %1665, 16711680
  %1673 = icmp eq i64 %1672, 16711680
  br i1 %1673, label %1674, label %1718

1674:                                             ; preds = %1664
  %1675 = load i8*, i8** %1593, align 8
  %1676 = load i64, i64* %1574, align 8
  %1677 = add i64 %1676, 1
  store i64 %1677, i64* %1574, align 8
  %1678 = getelementptr inbounds i8, i8* %1675, i64 %1676
  store i8 0, i8* %1678, align 1
  br label %1718

1679:                                             ; preds = %1581
  %1680 = getelementptr inbounds i8, i8* %1594, i64 %1583
  store i8 %1592, i8* %1680, align 1
  %1681 = load i64, i64* %1569, align 8
  %1682 = lshr i64 %1681, 48
  %1683 = trunc i64 %1682 to i8
  %1684 = load i8*, i8** %1593, align 8
  %1685 = load i64, i64* %1574, align 8
  %1686 = add i64 %1685, 1
  %1687 = getelementptr inbounds i8, i8* %1684, i64 %1686
  store i8 %1683, i8* %1687, align 1
  %1688 = load i64, i64* %1569, align 8
  %1689 = lshr i64 %1688, 40
  %1690 = trunc i64 %1689 to i8
  %1691 = load i8*, i8** %1593, align 8
  %1692 = load i64, i64* %1574, align 8
  %1693 = add i64 %1692, 2
  %1694 = getelementptr inbounds i8, i8* %1691, i64 %1693
  store i8 %1690, i8* %1694, align 1
  %1695 = load i64, i64* %1569, align 8
  %1696 = lshr i64 %1695, 32
  %1697 = trunc i64 %1696 to i8
  %1698 = load i8*, i8** %1593, align 8
  %1699 = load i64, i64* %1574, align 8
  %1700 = add i64 %1699, 3
  %1701 = getelementptr inbounds i8, i8* %1698, i64 %1700
  store i8 %1697, i8* %1701, align 1
  %1702 = load i64, i64* %1569, align 8
  %1703 = lshr i64 %1702, 24
  %1704 = trunc i64 %1703 to i8
  %1705 = load i8*, i8** %1593, align 8
  %1706 = load i64, i64* %1574, align 8
  %1707 = add i64 %1706, 4
  %1708 = getelementptr inbounds i8, i8* %1705, i64 %1707
  store i8 %1704, i8* %1708, align 1
  %1709 = load i64, i64* %1569, align 8
  %1710 = lshr i64 %1709, 16
  %1711 = trunc i64 %1710 to i8
  %1712 = load i8*, i8** %1593, align 8
  %1713 = load i64, i64* %1574, align 8
  %1714 = add i64 %1713, 5
  %1715 = getelementptr inbounds i8, i8* %1712, i64 %1714
  store i8 %1711, i8* %1715, align 1
  %1716 = load i64, i64* %1574, align 8
  %1717 = add i64 %1716, 6
  store i64 %1717, i64* %1574, align 8
  br label %1718

1718:                                             ; preds = %1679, %1674, %1664
  %1719 = load i64, i64* %1569, align 8
  %1720 = shl i64 %1719, 48
  store i64 %1720, i64* %1569, align 8
  %1721 = load i32, i32* %1564, align 8
  %1722 = add nsw i32 %1721, 48
  store i32 %1722, i32* %1564, align 8
  br label %1723

1723:                                             ; preds = %1718, %1558, %1556
  store i32 0, i32* %1378, align 8
  br label %1724

1724:                                             ; preds = %1723, %1377
  %1725 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 8, i32 2
  %1726 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 8, i32 2, i32 0, i32 1
  %1727 = bitcast i32** %1726 to i64*
  %1728 = load i64, i64* %1727, align 8
  %1729 = bitcast %"class.std::__1::vector.86"* %1725 to i64*
  %1730 = load i64, i64* %1729, align 8
  %1731 = icmp eq i64 %1728, %1730
  br i1 %1731, label %1913, label %1732

1732:                                             ; preds = %1724
  %1733 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2, i32 7
  %1734 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2, i32 6
  %1735 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2, i32 5
  %1736 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2, i32 4
  %1737 = load i32, i32* %1733, align 8
  %1738 = load i64, i64* %1734, align 8
  br label %1739

1739:                                             ; preds = %1904, %1732
  %1740 = phi i64 [ %1730, %1732 ], [ %1905, %1904 ]
  %1741 = phi i64 [ %1728, %1732 ], [ %1906, %1904 ]
  %1742 = phi i64 [ %1738, %1732 ], [ %1907, %1904 ]
  %1743 = phi i32 [ %1737, %1732 ], [ %1908, %1904 ]
  %1744 = phi i64 [ 0, %1732 ], [ %1909, %1904 ]
  %1745 = inttoptr i64 %1740 to i32*
  %1746 = getelementptr inbounds i32, i32* %1745, i64 %1744
  %1747 = load i32, i32* %1746, align 4
  %1748 = sext i32 %1747 to i64
  %1749 = add nsw i32 %1743, -1
  store i32 %1749, i32* %1733, align 8
  %1750 = zext i32 %1749 to i64
  %1751 = shl i64 %1748, %1750
  %1752 = or i64 %1751, %1742
  store i64 %1752, i64* %1734, align 8
  %1753 = icmp slt i32 %1743, 18
  br i1 %1753, label %1754, label %1904

1754:                                             ; preds = %1739
  %1755 = load i64, i64* %1735, align 8
  %1756 = add i64 %1755, 12
  %1757 = icmp ugt i64 %1756, 16384
  br i1 %1757, label %1758, label %1761, !prof !23

1758:                                             ; preds = %1754
  call fastcc void @_ZN3jxl4jpeg12_GLOBAL__N_110SwapBufferEPNS0_13JpegBitWriterE(%"struct.jxl::jpeg::JpegBitWriter"* %130) #10
  %1759 = load i64, i64* %1735, align 8
  %1760 = load i64, i64* %1734, align 8
  br label %1761

1761:                                             ; preds = %1758, %1754
  %1762 = phi i64 [ %1752, %1754 ], [ %1760, %1758 ]
  %1763 = phi i64 [ %1755, %1754 ], [ %1759, %1758 ]
  %1764 = or i64 %1762, 65535
  %1765 = xor i64 %1764, -65536
  %1766 = add i64 %1765, -72340172838076673
  %1767 = and i64 %1765, -9187201950435770368
  %1768 = xor i64 %1767, -9187201950435770368
  %1769 = and i64 %1768, %1766
  %1770 = icmp eq i64 %1769, 0
  %1771 = lshr i64 %1762, 56
  %1772 = trunc i64 %1771 to i8
  %1773 = load i8*, i8** %1736, align 8
  br i1 %1770, label %1858, label %1774

1774:                                             ; preds = %1761
  %1775 = add i64 %1763, 1
  store i64 %1775, i64* %1735, align 8
  %1776 = getelementptr inbounds i8, i8* %1773, i64 %1763
  store i8 %1772, i8* %1776, align 1
  %1777 = icmp eq i64 %1771, 255
  br i1 %1777, label %1778, label %1783

1778:                                             ; preds = %1774
  %1779 = load i8*, i8** %1736, align 8
  %1780 = load i64, i64* %1735, align 8
  %1781 = add i64 %1780, 1
  store i64 %1781, i64* %1735, align 8
  %1782 = getelementptr inbounds i8, i8* %1779, i64 %1780
  store i8 0, i8* %1782, align 1
  br label %1783

1783:                                             ; preds = %1778, %1774
  %1784 = load i64, i64* %1734, align 8
  %1785 = lshr i64 %1784, 48
  %1786 = trunc i64 %1785 to i8
  %1787 = load i8*, i8** %1736, align 8
  %1788 = load i64, i64* %1735, align 8
  %1789 = add i64 %1788, 1
  store i64 %1789, i64* %1735, align 8
  %1790 = getelementptr inbounds i8, i8* %1787, i64 %1788
  store i8 %1786, i8* %1790, align 1
  %1791 = and i64 %1784, 71776119061217280
  %1792 = icmp eq i64 %1791, 71776119061217280
  br i1 %1792, label %1793, label %1798

1793:                                             ; preds = %1783
  %1794 = load i8*, i8** %1736, align 8
  %1795 = load i64, i64* %1735, align 8
  %1796 = add i64 %1795, 1
  store i64 %1796, i64* %1735, align 8
  %1797 = getelementptr inbounds i8, i8* %1794, i64 %1795
  store i8 0, i8* %1797, align 1
  br label %1798

1798:                                             ; preds = %1793, %1783
  %1799 = load i64, i64* %1734, align 8
  %1800 = lshr i64 %1799, 40
  %1801 = trunc i64 %1800 to i8
  %1802 = load i8*, i8** %1736, align 8
  %1803 = load i64, i64* %1735, align 8
  %1804 = add i64 %1803, 1
  store i64 %1804, i64* %1735, align 8
  %1805 = getelementptr inbounds i8, i8* %1802, i64 %1803
  store i8 %1801, i8* %1805, align 1
  %1806 = and i64 %1799, 280375465082880
  %1807 = icmp eq i64 %1806, 280375465082880
  br i1 %1807, label %1808, label %1813

1808:                                             ; preds = %1798
  %1809 = load i8*, i8** %1736, align 8
  %1810 = load i64, i64* %1735, align 8
  %1811 = add i64 %1810, 1
  store i64 %1811, i64* %1735, align 8
  %1812 = getelementptr inbounds i8, i8* %1809, i64 %1810
  store i8 0, i8* %1812, align 1
  br label %1813

1813:                                             ; preds = %1808, %1798
  %1814 = load i64, i64* %1734, align 8
  %1815 = lshr i64 %1814, 32
  %1816 = trunc i64 %1815 to i8
  %1817 = load i8*, i8** %1736, align 8
  %1818 = load i64, i64* %1735, align 8
  %1819 = add i64 %1818, 1
  store i64 %1819, i64* %1735, align 8
  %1820 = getelementptr inbounds i8, i8* %1817, i64 %1818
  store i8 %1816, i8* %1820, align 1
  %1821 = and i64 %1814, 1095216660480
  %1822 = icmp eq i64 %1821, 1095216660480
  br i1 %1822, label %1823, label %1828

1823:                                             ; preds = %1813
  %1824 = load i8*, i8** %1736, align 8
  %1825 = load i64, i64* %1735, align 8
  %1826 = add i64 %1825, 1
  store i64 %1826, i64* %1735, align 8
  %1827 = getelementptr inbounds i8, i8* %1824, i64 %1825
  store i8 0, i8* %1827, align 1
  br label %1828

1828:                                             ; preds = %1823, %1813
  %1829 = load i64, i64* %1734, align 8
  %1830 = lshr i64 %1829, 24
  %1831 = trunc i64 %1830 to i8
  %1832 = load i8*, i8** %1736, align 8
  %1833 = load i64, i64* %1735, align 8
  %1834 = add i64 %1833, 1
  store i64 %1834, i64* %1735, align 8
  %1835 = getelementptr inbounds i8, i8* %1832, i64 %1833
  store i8 %1831, i8* %1835, align 1
  %1836 = and i64 %1829, 4278190080
  %1837 = icmp eq i64 %1836, 4278190080
  br i1 %1837, label %1838, label %1843

1838:                                             ; preds = %1828
  %1839 = load i8*, i8** %1736, align 8
  %1840 = load i64, i64* %1735, align 8
  %1841 = add i64 %1840, 1
  store i64 %1841, i64* %1735, align 8
  %1842 = getelementptr inbounds i8, i8* %1839, i64 %1840
  store i8 0, i8* %1842, align 1
  br label %1843

1843:                                             ; preds = %1838, %1828
  %1844 = load i64, i64* %1734, align 8
  %1845 = lshr i64 %1844, 16
  %1846 = trunc i64 %1845 to i8
  %1847 = load i8*, i8** %1736, align 8
  %1848 = load i64, i64* %1735, align 8
  %1849 = add i64 %1848, 1
  store i64 %1849, i64* %1735, align 8
  %1850 = getelementptr inbounds i8, i8* %1847, i64 %1848
  store i8 %1846, i8* %1850, align 1
  %1851 = and i64 %1844, 16711680
  %1852 = icmp eq i64 %1851, 16711680
  br i1 %1852, label %1853, label %1897

1853:                                             ; preds = %1843
  %1854 = load i8*, i8** %1736, align 8
  %1855 = load i64, i64* %1735, align 8
  %1856 = add i64 %1855, 1
  store i64 %1856, i64* %1735, align 8
  %1857 = getelementptr inbounds i8, i8* %1854, i64 %1855
  store i8 0, i8* %1857, align 1
  br label %1897

1858:                                             ; preds = %1761
  %1859 = getelementptr inbounds i8, i8* %1773, i64 %1763
  store i8 %1772, i8* %1859, align 1
  %1860 = load i64, i64* %1734, align 8
  %1861 = lshr i64 %1860, 48
  %1862 = trunc i64 %1861 to i8
  %1863 = load i8*, i8** %1736, align 8
  %1864 = load i64, i64* %1735, align 8
  %1865 = add i64 %1864, 1
  %1866 = getelementptr inbounds i8, i8* %1863, i64 %1865
  store i8 %1862, i8* %1866, align 1
  %1867 = load i64, i64* %1734, align 8
  %1868 = lshr i64 %1867, 40
  %1869 = trunc i64 %1868 to i8
  %1870 = load i8*, i8** %1736, align 8
  %1871 = load i64, i64* %1735, align 8
  %1872 = add i64 %1871, 2
  %1873 = getelementptr inbounds i8, i8* %1870, i64 %1872
  store i8 %1869, i8* %1873, align 1
  %1874 = load i64, i64* %1734, align 8
  %1875 = lshr i64 %1874, 32
  %1876 = trunc i64 %1875 to i8
  %1877 = load i8*, i8** %1736, align 8
  %1878 = load i64, i64* %1735, align 8
  %1879 = add i64 %1878, 3
  %1880 = getelementptr inbounds i8, i8* %1877, i64 %1879
  store i8 %1876, i8* %1880, align 1
  %1881 = load i64, i64* %1734, align 8
  %1882 = lshr i64 %1881, 24
  %1883 = trunc i64 %1882 to i8
  %1884 = load i8*, i8** %1736, align 8
  %1885 = load i64, i64* %1735, align 8
  %1886 = add i64 %1885, 4
  %1887 = getelementptr inbounds i8, i8* %1884, i64 %1886
  store i8 %1883, i8* %1887, align 1
  %1888 = load i64, i64* %1734, align 8
  %1889 = lshr i64 %1888, 16
  %1890 = trunc i64 %1889 to i8
  %1891 = load i8*, i8** %1736, align 8
  %1892 = load i64, i64* %1735, align 8
  %1893 = add i64 %1892, 5
  %1894 = getelementptr inbounds i8, i8* %1891, i64 %1893
  store i8 %1890, i8* %1894, align 1
  %1895 = load i64, i64* %1735, align 8
  %1896 = add i64 %1895, 6
  store i64 %1896, i64* %1735, align 8
  br label %1897

1897:                                             ; preds = %1858, %1853, %1843
  %1898 = load i64, i64* %1734, align 8
  %1899 = shl i64 %1898, 48
  store i64 %1899, i64* %1734, align 8
  %1900 = load i32, i32* %1733, align 8
  %1901 = add nsw i32 %1900, 48
  store i32 %1901, i32* %1733, align 8
  %1902 = load i64, i64* %1727, align 8
  %1903 = load i64, i64* %1729, align 8
  br label %1904

1904:                                             ; preds = %1897, %1739
  %1905 = phi i64 [ %1740, %1739 ], [ %1903, %1897 ]
  %1906 = phi i64 [ %1741, %1739 ], [ %1902, %1897 ]
  %1907 = phi i64 [ %1752, %1739 ], [ %1899, %1897 ]
  %1908 = phi i32 [ %1749, %1739 ], [ %1901, %1897 ]
  %1909 = add nuw i64 %1744, 1
  %1910 = sub i64 %1906, %1905
  %1911 = ashr exact i64 %1910, 2
  %1912 = icmp ult i64 %1909, %1911
  br i1 %1912, label %1739, label %1913

1913:                                             ; preds = %1904, %1724
  %1914 = phi i64 [ %1728, %1724 ], [ %1905, %1904 ]
  store i64 %1914, i64* %1727, align 8
  %1915 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 11
  %1916 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 12
  %1917 = load i8*, i8** %1916, align 8
  %1918 = call fastcc zeroext i1 @_ZN3jxl4jpeg12_GLOBAL__N_118JumpToByteBoundaryEPNS0_13JpegBitWriterEPPKhS5_(%"struct.jxl::jpeg::JpegBitWriter"* %130, i8** %1915, i8* %1917)
  br i1 %1918, label %1919, label %1999

1919:                                             ; preds = %1913
  %1920 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2, i32 5
  %1921 = load i64, i64* %1920, align 8
  %1922 = icmp eq i64 %1921, 0
  br i1 %1922, label %1992, label %1923

1923:                                             ; preds = %1919
  %1924 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2, i32 3
  %1925 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2, i32 3, i32 1
  store i64 %1921, i64* %1925, align 8
  %1926 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2, i32 2
  %1927 = load %"class.std::__1::deque"*, %"class.std::__1::deque"** %1926, align 8
  %1928 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %1927, i64 0, i32 0, i32 0, i32 2
  %1929 = bitcast %"struct.jxl::jpeg::OutputChunk"*** %1928 to i64*
  %1930 = load i64, i64* %1929, align 8
  %1931 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %1927, i64 0, i32 0, i32 0, i32 1
  %1932 = bitcast %"struct.jxl::jpeg::OutputChunk"*** %1931 to i64*
  %1933 = load i64, i64* %1932, align 8
  %1934 = sub i64 %1930, %1933
  %1935 = ashr exact i64 %1934, 3
  %1936 = icmp eq i64 %1934, 0
  %1937 = mul i64 %1935, 170
  %1938 = add i64 %1937, -1
  %1939 = select i1 %1936, i64 0, i64 %1938
  %1940 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %1927, i64 0, i32 0, i32 1
  %1941 = load i64, i64* %1940, align 8
  %1942 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %1927, i64 0, i32 0, i32 2, i32 0, i32 0
  %1943 = load i64, i64* %1942, align 8
  %1944 = add i64 %1943, %1941
  %1945 = icmp eq i64 %1939, %1944
  %1946 = inttoptr i64 %1933 to %"struct.jxl::jpeg::OutputChunk"**
  %1947 = inttoptr i64 %1930 to %"struct.jxl::jpeg::OutputChunk"**
  br i1 %1945, label %1948, label %1954

1948:                                             ; preds = %1923
  call void @_ZNSt3__15dequeIN3jxl4jpeg11OutputChunkENS_9allocatorIS3_EEE19__add_back_capacityEv(%"class.std::__1::deque"* %1927) #10
  %1949 = load i64, i64* %1942, align 8
  %1950 = load i64, i64* %1940, align 8
  %1951 = load %"struct.jxl::jpeg::OutputChunk"**, %"struct.jxl::jpeg::OutputChunk"*** %1931, align 8
  %1952 = load %"struct.jxl::jpeg::OutputChunk"**, %"struct.jxl::jpeg::OutputChunk"*** %1928, align 8
  %1953 = add i64 %1950, %1949
  br label %1954

1954:                                             ; preds = %1948, %1923
  %1955 = phi i64 [ %1953, %1948 ], [ %1944, %1923 ]
  %1956 = phi %"struct.jxl::jpeg::OutputChunk"** [ %1952, %1948 ], [ %1947, %1923 ]
  %1957 = phi %"struct.jxl::jpeg::OutputChunk"** [ %1951, %1948 ], [ %1946, %1923 ]
  %1958 = icmp eq %"struct.jxl::jpeg::OutputChunk"** %1956, %1957
  br i1 %1958, label %1965, label %1959

1959:                                             ; preds = %1954
  %1960 = udiv i64 %1955, 170
  %1961 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %1957, i64 %1960
  %1962 = load %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %1961, align 8
  %1963 = urem i64 %1955, 170
  %1964 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk", %"struct.jxl::jpeg::OutputChunk"* %1962, i64 %1963
  br label %1965

1965:                                             ; preds = %1954, %1959
  %1966 = phi %"struct.jxl::jpeg::OutputChunk"* [ %1964, %1959 ], [ null, %1954 ]
  %1967 = bitcast %"struct.jxl::jpeg::OutputChunk"* %1966 to i8*
  %1968 = bitcast %"struct.jxl::jpeg::OutputChunk"* %1924 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1967, i8* align 8 %1968, i64 16, i1 false) #10
  %1969 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk", %"struct.jxl::jpeg::OutputChunk"* %1966, i64 0, i32 2
  %1970 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2, i32 3, i32 2
  %1971 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %1970, i64 0, i32 0, i32 0, i32 0
  %1972 = bitcast %"class.std::__1::unique_ptr"* %1970 to i64*
  %1973 = load i64, i64* %1972, align 8
  store %"class.std::__1::vector.0"* null, %"class.std::__1::vector.0"** %1971, align 8
  %1974 = bitcast %"class.std::__1::unique_ptr"* %1969 to i64*
  store i64 %1973, i64* %1974, align 8
  %1975 = load i64, i64* %1942, align 8
  %1976 = add i64 %1975, 1
  store i64 %1976, i64* %1942, align 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %1968, i8 0, i64 16, i1 false) #10
  %1977 = load %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"** %1971, align 8
  store i64 0, i64* %1972, align 8
  %1978 = icmp eq %"class.std::__1::vector.0"* %1977, null
  br i1 %1978, label %1989, label %1979

1979:                                             ; preds = %1965
  %1980 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %1977, i64 0, i32 0, i32 0
  %1981 = load i8*, i8** %1980, align 8
  %1982 = icmp eq i8* %1981, null
  br i1 %1982, label %1987, label %1983

1983:                                             ; preds = %1979
  %1984 = ptrtoint i8* %1981 to i64
  %1985 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %1977, i64 0, i32 0, i32 1
  %1986 = bitcast i8** %1985 to i64*
  store i64 %1984, i64* %1986, align 8
  call void @_ZdlPv(i8* nonnull %1981) #11
  br label %1987

1987:                                             ; preds = %1983, %1979
  %1988 = bitcast %"class.std::__1::vector.0"* %1977 to i8*
  call void @_ZdlPv(i8* %1988) #11
  br label %1989

1989:                                             ; preds = %1965, %1987
  %1990 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %1, i64 0, i32 16, i32 2, i32 4
  %1991 = bitcast i8** %1990 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %1991, i8 0, i64 16, i1 false) #10
  br label %1992

1992:                                             ; preds = %1919, %1989
  store i32 0, i32* %17, align 8
  %1993 = load i32, i32* %5, align 4
  %1994 = add nsw i32 %1993, 1
  store i32 %1994, i32* %5, align 4
  %1995 = getelementptr inbounds %"struct.jxl::jpeg::JpegBitWriter", %"struct.jxl::jpeg::JpegBitWriter"* %130, i64 0, i32 0
  %1996 = load i8, i8* %1995, align 8, !range !2
  %1997 = icmp eq i8 %1996, 0
  %1998 = select i1 %1997, i32 2, i32 3
  br label %1999

1999:                                             ; preds = %715, %1992, %1913, %1372
  %2000 = phi i32 [ %1376, %1372 ], [ 2, %1913 ], [ %1998, %1992 ], [ 2, %715 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %136) #10
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %135) #10
  br label %2001

2001:                                             ; preds = %20, %1999
  %2002 = phi i32 [ %2000, %1999 ], [ 2, %20 ]
  ret i32 %2002
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @_ZN3jxl4jpeg12_GLOBAL__N_19EncodeSOSERKNS0_8JPEGDataERKNS0_12JPEGScanInfoEPNS0_18SerializationStateE(%"struct.jxl::jpeg::JPEGData"* nocapture readonly dereferenceable(296), %"struct.jxl::jpeg::JPEGScanInfo"* nocapture readonly dereferenceable(120), %"struct.jxl::jpeg::SerializationState"*) unnamed_addr #0 {
  %4 = alloca i64, align 8
  %5 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %1, i64 0, i32 4
  %6 = load i32, i32* %5, align 8
  %7 = zext i32 %6 to i64
  %8 = shl nuw nsw i64 %7, 1
  %9 = add nuw nsw i64 %8, 6
  %10 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %2, i64 0, i32 1
  %11 = bitcast i64* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11) #10
  %12 = add nuw nsw i64 %8, 8
  store i64 %12, i64* %4, align 8
  call void @_ZNSt3__15dequeIN3jxl4jpeg11OutputChunkENS_9allocatorIS3_EEE12emplace_backIJmEEEvDpOT_(%"class.std::__1::deque"* %10, i64* nonnull dereferenceable(8) %4)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #10
  %13 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %2, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %2, i64 0, i32 1, i32 0, i32 1
  %16 = load i64, i64* %15, align 8
  %17 = add i64 %14, -1
  %18 = add i64 %17, %16
  %19 = getelementptr inbounds %"struct.jxl::jpeg::SerializationState", %"struct.jxl::jpeg::SerializationState"* %2, i64 0, i32 1, i32 0, i32 0, i32 1
  %20 = load %"struct.jxl::jpeg::OutputChunk"**, %"struct.jxl::jpeg::OutputChunk"*** %19, align 8
  %21 = udiv i64 %18, 170
  %22 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %20, i64 %21
  %23 = load %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %22, align 8
  %24 = urem i64 %18, 170
  %25 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk", %"struct.jxl::jpeg::OutputChunk"* %23, i64 %24, i32 2, i32 0, i32 0, i32 0
  %26 = load %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"** %25, align 8
  %27 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %26, i64 0, i32 0, i32 0
  %28 = load i8*, i8** %27, align 8
  store i8 -1, i8* %28, align 1
  %29 = getelementptr inbounds i8, i8* %28, i64 1
  store i8 -38, i8* %29, align 1
  %30 = lshr i64 %9, 8
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds i8, i8* %28, i64 2
  store i8 %31, i8* %32, align 1
  %33 = trunc i64 %9 to i8
  %34 = getelementptr inbounds i8, i8* %28, i64 3
  store i8 %33, i8* %34, align 1
  %35 = trunc i32 %6 to i8
  %36 = getelementptr inbounds i8, i8* %28, i64 4
  store i8 %35, i8* %36, align 1
  %37 = icmp eq i32 %6, 0
  br i1 %37, label %72, label %38

38:                                               ; preds = %3
  %39 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 9
  %40 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 9, i32 0, i32 1
  %41 = bitcast %"struct.jxl::jpeg::JPEGComponent"** %40 to i64*
  %42 = bitcast %"class.std::__1::vector.31"* %39 to i64*
  br label %43

43:                                               ; preds = %54, %38
  %44 = phi i64 [ 0, %38 ], [ %70, %54 ]
  %45 = phi i64 [ 5, %38 ], [ %68, %54 ]
  %46 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %1, i64 0, i32 5, i32 0, i64 %44, i32 0
  %47 = load i32, i32* %46, align 4
  %48 = zext i32 %47 to i64
  %49 = load i64, i64* %41, align 8
  %50 = load i64, i64* %42, align 8
  %51 = sub i64 %49, %50
  %52 = sdiv exact i64 %51, 48
  %53 = icmp ugt i64 %52, %48
  br i1 %53, label %54, label %92

54:                                               ; preds = %43
  %55 = inttoptr i64 %50 to %"struct.jxl::jpeg::JPEGComponent"*
  %56 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %55, i64 %48, i32 0
  %57 = load i32, i32* %56, align 8
  %58 = trunc i32 %57 to i8
  %59 = add nuw nsw i64 %45, 1
  %60 = getelementptr inbounds i8, i8* %28, i64 %45
  store i8 %58, i8* %60, align 1
  %61 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %1, i64 0, i32 5, i32 0, i64 %44, i32 1
  %62 = load i32, i32* %61, align 4
  %63 = shl i32 %62, 4
  %64 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %1, i64 0, i32 5, i32 0, i64 %44, i32 2
  %65 = load i32, i32* %64, align 4
  %66 = add i32 %63, %65
  %67 = trunc i32 %66 to i8
  %68 = add nuw nsw i64 %45, 2
  %69 = getelementptr inbounds i8, i8* %28, i64 %59
  store i8 %67, i8* %69, align 1
  %70 = add nuw nsw i64 %44, 1
  %71 = icmp eq i64 %70, %7
  br i1 %71, label %72, label %43

72:                                               ; preds = %54, %3
  %73 = phi i64 [ 5, %3 ], [ %68, %54 ]
  %74 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %1, i64 0, i32 0
  %75 = load i32, i32* %74, align 8
  %76 = trunc i32 %75 to i8
  %77 = add i64 %73, 1
  %78 = getelementptr inbounds i8, i8* %28, i64 %73
  store i8 %76, i8* %78, align 1
  %79 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %1, i64 0, i32 1
  %80 = load i32, i32* %79, align 4
  %81 = trunc i32 %80 to i8
  %82 = add i64 %73, 2
  %83 = getelementptr inbounds i8, i8* %28, i64 %77
  store i8 %81, i8* %83, align 1
  %84 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %1, i64 0, i32 2
  %85 = load i32, i32* %84, align 8
  %86 = shl i32 %85, 4
  %87 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %1, i64 0, i32 3
  %88 = load i32, i32* %87, align 4
  %89 = or i32 %86, %88
  %90 = trunc i32 %89 to i8
  %91 = getelementptr inbounds i8, i8* %28, i64 %82
  store i8 %90, i8* %91, align 1
  br label %92

92:                                               ; preds = %43, %72
  %93 = phi i1 [ true, %72 ], [ false, %43 ]
  ret i1 %93
}

declare void @_ZNK3jxl4jpeg8JPEGData16CalculateMcuSizeERKNS0_12JPEGScanInfoEPiS5_(%"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGScanInfo"* dereferenceable(120), i32*, i32*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @_ZN3jxl4jpeg12_GLOBAL__N_118JumpToByteBoundaryEPNS0_13JpegBitWriterEPPKhS5_(%"struct.jxl::jpeg::JpegBitWriter"* nocapture, i8** nocapture, i8* readnone) unnamed_addr #0 {
  %4 = getelementptr inbounds %"struct.jxl::jpeg::JpegBitWriter", %"struct.jxl::jpeg::JpegBitWriter"* %0, i64 0, i32 7
  %5 = load i32, i32* %4, align 8
  %6 = and i32 %5, 7
  %7 = load i8*, i8** %1, align 8
  %8 = icmp eq i8* %7, null
  br i1 %8, label %9, label %13

9:                                                ; preds = %3
  %10 = shl nsw i32 -1, %6
  %11 = trunc i32 %10 to i8
  %12 = xor i8 %11, -1
  br label %26

13:                                               ; preds = %3
  %14 = icmp eq i32 %6, 0
  br i1 %14, label %23, label %15

15:                                               ; preds = %13
  %16 = icmp ult i8* %7, %2
  br i1 %16, label %17, label %87

17:                                               ; preds = %15
  %18 = getelementptr inbounds i8, i8* %7, i64 1
  %19 = load i8, i8* %7, align 1
  %20 = icmp ne i8 %19, 0
  %21 = zext i1 %20 to i8
  %22 = icmp eq i32 %6, 1
  br i1 %22, label %23, label %89

23:                                               ; preds = %17, %91, %101, %111, %121, %131, %141, %13
  %24 = phi i8* [ %7, %13 ], [ %18, %17 ], [ %93, %91 ], [ %103, %101 ], [ %113, %111 ], [ %123, %121 ], [ %133, %131 ], [ %143, %141 ]
  %25 = phi i8 [ 0, %13 ], [ %21, %17 ], [ %97, %91 ], [ %107, %101 ], [ %117, %111 ], [ %127, %121 ], [ %137, %131 ], [ %147, %141 ]
  store i8* %24, i8** %1, align 8
  br label %26

26:                                               ; preds = %23, %9
  %27 = phi i8 [ %12, %9 ], [ %25, %23 ]
  %28 = getelementptr inbounds %"struct.jxl::jpeg::JpegBitWriter", %"struct.jxl::jpeg::JpegBitWriter"* %0, i64 0, i32 5
  %29 = load i64, i64* %28, align 8
  %30 = add i64 %29, 16
  %31 = icmp ugt i64 %30, 16384
  br i1 %31, label %32, label %33, !prof !23

32:                                               ; preds = %26
  tail call fastcc void @_ZN3jxl4jpeg12_GLOBAL__N_110SwapBufferEPNS0_13JpegBitWriterE(%"struct.jxl::jpeg::JpegBitWriter"* %0) #10
  br label %33

33:                                               ; preds = %26, %32
  %34 = load i32, i32* %4, align 8
  %35 = icmp slt i32 %34, 57
  br i1 %35, label %36, label %60

36:                                               ; preds = %33
  %37 = getelementptr inbounds %"struct.jxl::jpeg::JpegBitWriter", %"struct.jxl::jpeg::JpegBitWriter"* %0, i64 0, i32 6
  %38 = getelementptr inbounds %"struct.jxl::jpeg::JpegBitWriter", %"struct.jxl::jpeg::JpegBitWriter"* %0, i64 0, i32 4
  %39 = load i64, i64* %37, align 8
  br label %40

40:                                               ; preds = %36, %54
  %41 = phi i64 [ %39, %36 ], [ %56, %54 ]
  %42 = lshr i64 %41, 56
  %43 = trunc i64 %42 to i8
  %44 = load i8*, i8** %38, align 8
  %45 = load i64, i64* %28, align 8
  %46 = add i64 %45, 1
  store i64 %46, i64* %28, align 8
  %47 = getelementptr inbounds i8, i8* %44, i64 %45
  store i8 %43, i8* %47, align 1
  %48 = icmp eq i64 %42, 255
  br i1 %48, label %49, label %54

49:                                               ; preds = %40
  %50 = load i8*, i8** %38, align 8
  %51 = load i64, i64* %28, align 8
  %52 = add i64 %51, 1
  store i64 %52, i64* %28, align 8
  %53 = getelementptr inbounds i8, i8* %50, i64 %51
  store i8 0, i8* %53, align 1
  br label %54

54:                                               ; preds = %40, %49
  %55 = load i64, i64* %37, align 8
  %56 = shl i64 %55, 8
  store i64 %56, i64* %37, align 8
  %57 = load i32, i32* %4, align 8
  %58 = add nsw i32 %57, 8
  store i32 %58, i32* %4, align 8
  %59 = icmp slt i32 %58, 57
  br i1 %59, label %40, label %60

60:                                               ; preds = %54, %33
  %61 = phi i32 [ %34, %33 ], [ %58, %54 ]
  %62 = icmp slt i32 %61, 64
  br i1 %62, label %63, label %85

63:                                               ; preds = %60
  %64 = sub nuw nsw i32 64, %61
  %65 = getelementptr inbounds %"struct.jxl::jpeg::JpegBitWriter", %"struct.jxl::jpeg::JpegBitWriter"* %0, i64 0, i32 6
  %66 = load i64, i64* %65, align 8
  %67 = lshr i64 %66, 56
  %68 = ashr i32 -256, %64
  %69 = zext i32 %68 to i64
  %70 = and i64 %67, %69
  %71 = zext i8 %27 to i64
  %72 = or i64 %70, %71
  %73 = trunc i64 %72 to i8
  %74 = getelementptr inbounds %"struct.jxl::jpeg::JpegBitWriter", %"struct.jxl::jpeg::JpegBitWriter"* %0, i64 0, i32 4
  %75 = load i8*, i8** %74, align 8
  %76 = load i64, i64* %28, align 8
  %77 = add i64 %76, 1
  store i64 %77, i64* %28, align 8
  %78 = getelementptr inbounds i8, i8* %75, i64 %76
  store i8 %73, i8* %78, align 1
  %79 = icmp eq i64 %72, 255
  br i1 %79, label %80, label %85

80:                                               ; preds = %63
  %81 = load i8*, i8** %74, align 8
  %82 = load i64, i64* %28, align 8
  %83 = add i64 %82, 1
  store i64 %83, i64* %28, align 8
  %84 = getelementptr inbounds i8, i8* %81, i64 %82
  store i8 0, i8* %84, align 1
  br label %85

85:                                               ; preds = %80, %63, %60
  %86 = getelementptr inbounds %"struct.jxl::jpeg::JpegBitWriter", %"struct.jxl::jpeg::JpegBitWriter"* %0, i64 0, i32 6
  store i64 0, i64* %86, align 8
  store i32 64, i32* %4, align 8
  br label %87

87:                                               ; preds = %15, %89, %99, %109, %119, %129, %139, %85
  %88 = phi i1 [ true, %85 ], [ false, %139 ], [ false, %129 ], [ false, %119 ], [ false, %109 ], [ false, %99 ], [ false, %89 ], [ false, %15 ]
  ret i1 %88

89:                                               ; preds = %17
  %90 = icmp ult i8* %18, %2
  br i1 %90, label %91, label %87

91:                                               ; preds = %89
  %92 = shl nuw nsw i8 %21, 1
  %93 = getelementptr inbounds i8, i8* %7, i64 2
  %94 = load i8, i8* %18, align 1
  %95 = icmp ne i8 %94, 0
  %96 = zext i1 %95 to i8
  %97 = or i8 %92, %96
  %98 = icmp eq i32 %6, 2
  br i1 %98, label %23, label %99

99:                                               ; preds = %91
  %100 = icmp ult i8* %93, %2
  br i1 %100, label %101, label %87

101:                                              ; preds = %99
  %102 = shl nuw nsw i8 %97, 1
  %103 = getelementptr inbounds i8, i8* %7, i64 3
  %104 = load i8, i8* %93, align 1
  %105 = icmp ne i8 %104, 0
  %106 = zext i1 %105 to i8
  %107 = or i8 %102, %106
  %108 = icmp eq i32 %6, 3
  br i1 %108, label %23, label %109

109:                                              ; preds = %101
  %110 = icmp ult i8* %103, %2
  br i1 %110, label %111, label %87

111:                                              ; preds = %109
  %112 = shl nuw nsw i8 %107, 1
  %113 = getelementptr inbounds i8, i8* %7, i64 4
  %114 = load i8, i8* %103, align 1
  %115 = icmp ne i8 %114, 0
  %116 = zext i1 %115 to i8
  %117 = or i8 %112, %116
  %118 = icmp eq i32 %6, 4
  br i1 %118, label %23, label %119

119:                                              ; preds = %111
  %120 = icmp ult i8* %113, %2
  br i1 %120, label %121, label %87

121:                                              ; preds = %119
  %122 = shl i8 %117, 1
  %123 = getelementptr inbounds i8, i8* %7, i64 5
  %124 = load i8, i8* %113, align 1
  %125 = icmp ne i8 %124, 0
  %126 = zext i1 %125 to i8
  %127 = or i8 %122, %126
  %128 = icmp eq i32 %6, 5
  br i1 %128, label %23, label %129

129:                                              ; preds = %121
  %130 = icmp ult i8* %123, %2
  br i1 %130, label %131, label %87

131:                                              ; preds = %129
  %132 = shl i8 %127, 1
  %133 = getelementptr inbounds i8, i8* %7, i64 6
  %134 = load i8, i8* %123, align 1
  %135 = icmp ne i8 %134, 0
  %136 = zext i1 %135 to i8
  %137 = or i8 %132, %136
  %138 = icmp eq i32 %6, 6
  br i1 %138, label %23, label %139

139:                                              ; preds = %131
  %140 = icmp ult i8* %133, %2
  br i1 %140, label %141, label %87

141:                                              ; preds = %139
  %142 = shl i8 %137, 1
  %143 = getelementptr inbounds i8, i8* %7, i64 7
  %144 = load i8, i8* %133, align 1
  %145 = icmp ne i8 %144, 0
  %146 = zext i1 %145 to i8
  %147 = or i8 %142, %146
  br label %23
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #9

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc void @_ZN3jxl4jpeg12_GLOBAL__N_110SwapBufferEPNS0_13JpegBitWriterE(%"struct.jxl::jpeg::JpegBitWriter"* nocapture) unnamed_addr #8 {
  %2 = getelementptr inbounds %"struct.jxl::jpeg::JpegBitWriter", %"struct.jxl::jpeg::JpegBitWriter"* %0, i64 0, i32 5
  %3 = load i64, i64* %2, align 8
  %4 = getelementptr inbounds %"struct.jxl::jpeg::JpegBitWriter", %"struct.jxl::jpeg::JpegBitWriter"* %0, i64 0, i32 3
  %5 = getelementptr inbounds %"struct.jxl::jpeg::JpegBitWriter", %"struct.jxl::jpeg::JpegBitWriter"* %0, i64 0, i32 3, i32 1
  store i64 %3, i64* %5, align 8
  %6 = getelementptr inbounds %"struct.jxl::jpeg::JpegBitWriter", %"struct.jxl::jpeg::JpegBitWriter"* %0, i64 0, i32 2
  %7 = load %"class.std::__1::deque"*, %"class.std::__1::deque"** %6, align 8
  %8 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %7, i64 0, i32 0, i32 0, i32 2
  %9 = bitcast %"struct.jxl::jpeg::OutputChunk"*** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %7, i64 0, i32 0, i32 0, i32 1
  %12 = bitcast %"struct.jxl::jpeg::OutputChunk"*** %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = sub i64 %10, %13
  %15 = ashr exact i64 %14, 3
  %16 = icmp eq i64 %14, 0
  %17 = mul i64 %15, 170
  %18 = add i64 %17, -1
  %19 = select i1 %16, i64 0, i64 %18
  %20 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %7, i64 0, i32 0, i32 1
  %21 = load i64, i64* %20, align 8
  %22 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %7, i64 0, i32 0, i32 2, i32 0, i32 0
  %23 = load i64, i64* %22, align 8
  %24 = add i64 %23, %21
  %25 = icmp eq i64 %19, %24
  %26 = inttoptr i64 %13 to %"struct.jxl::jpeg::OutputChunk"**
  %27 = inttoptr i64 %10 to %"struct.jxl::jpeg::OutputChunk"**
  br i1 %25, label %28, label %34

28:                                               ; preds = %1
  tail call void @_ZNSt3__15dequeIN3jxl4jpeg11OutputChunkENS_9allocatorIS3_EEE19__add_back_capacityEv(%"class.std::__1::deque"* %7) #10
  %29 = load i64, i64* %22, align 8
  %30 = load i64, i64* %20, align 8
  %31 = load %"struct.jxl::jpeg::OutputChunk"**, %"struct.jxl::jpeg::OutputChunk"*** %11, align 8
  %32 = load %"struct.jxl::jpeg::OutputChunk"**, %"struct.jxl::jpeg::OutputChunk"*** %8, align 8
  %33 = add i64 %30, %29
  br label %34

34:                                               ; preds = %28, %1
  %35 = phi i64 [ %33, %28 ], [ %24, %1 ]
  %36 = phi %"struct.jxl::jpeg::OutputChunk"** [ %32, %28 ], [ %27, %1 ]
  %37 = phi %"struct.jxl::jpeg::OutputChunk"** [ %31, %28 ], [ %26, %1 ]
  %38 = icmp eq %"struct.jxl::jpeg::OutputChunk"** %36, %37
  br i1 %38, label %45, label %39

39:                                               ; preds = %34
  %40 = udiv i64 %35, 170
  %41 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %37, i64 %40
  %42 = load %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %41, align 8
  %43 = urem i64 %35, 170
  %44 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk", %"struct.jxl::jpeg::OutputChunk"* %42, i64 %43
  br label %45

45:                                               ; preds = %34, %39
  %46 = phi %"struct.jxl::jpeg::OutputChunk"* [ %44, %39 ], [ null, %34 ]
  %47 = bitcast %"struct.jxl::jpeg::OutputChunk"* %46 to i8*
  %48 = bitcast %"struct.jxl::jpeg::OutputChunk"* %4 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %47, i8* align 8 %48, i64 16, i1 false) #10
  %49 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk", %"struct.jxl::jpeg::OutputChunk"* %46, i64 0, i32 2
  %50 = getelementptr inbounds %"struct.jxl::jpeg::JpegBitWriter", %"struct.jxl::jpeg::JpegBitWriter"* %0, i64 0, i32 3, i32 2
  %51 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %50, i64 0, i32 0, i32 0, i32 0
  %52 = bitcast %"class.std::__1::unique_ptr"* %50 to i64*
  %53 = load i64, i64* %52, align 8
  store %"class.std::__1::vector.0"* null, %"class.std::__1::vector.0"** %51, align 8
  %54 = bitcast %"class.std::__1::unique_ptr"* %49 to i64*
  store i64 %53, i64* %54, align 8
  %55 = load i64, i64* %22, align 8
  %56 = add i64 %55, 1
  store i64 %56, i64* %22, align 8
  %57 = tail call i8* @_Znwm(i64 24) #11
  %58 = tail call i8* @_Znwm(i64 16384) #11
  %59 = getelementptr inbounds i8, i8* %57, i64 8
  %60 = bitcast i8* %57 to i8**
  store i8* %58, i8** %60, align 8
  %61 = getelementptr inbounds i8, i8* %58, i64 16384
  %62 = getelementptr inbounds i8, i8* %57, i64 16
  %63 = bitcast i8* %62 to i8**
  store i8* %61, i8** %63, align 8
  %64 = bitcast i8* %59 to i64*
  %65 = ptrtoint i8* %58 to i64
  %66 = sub i64 16384, %65
  %67 = getelementptr i8, i8* %58, i64 %66
  %68 = ptrtoint i8* %67 to i64
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %58, i8 0, i64 %68, i1 false) #10
  %69 = ptrtoint i8* %61 to i64
  store i64 %69, i64* %64, align 8
  %70 = ptrtoint i8* %57 to i64
  %71 = bitcast %"struct.jxl::jpeg::OutputChunk"* %4 to i64*
  store i64 %65, i64* %71, align 8
  store i64 16384, i64* %5, align 8
  %72 = load %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"** %51, align 8
  store i64 %70, i64* %52, align 8
  %73 = icmp eq %"class.std::__1::vector.0"* %72, null
  br i1 %73, label %74, label %76

74:                                               ; preds = %45
  %75 = bitcast i8* %57 to i64*
  br label %89

76:                                               ; preds = %45
  %77 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %72, i64 0, i32 0, i32 0
  %78 = load i8*, i8** %77, align 8
  %79 = icmp eq i8* %78, null
  br i1 %79, label %84, label %80

80:                                               ; preds = %76
  %81 = ptrtoint i8* %78 to i64
  %82 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %72, i64 0, i32 0, i32 1
  %83 = bitcast i8** %82 to i64*
  store i64 %81, i64* %83, align 8
  tail call void @_ZdlPv(i8* nonnull %78) #11
  br label %84

84:                                               ; preds = %80, %76
  %85 = bitcast %"class.std::__1::vector.0"* %72 to i8*
  tail call void @_ZdlPv(i8* %85) #11
  %86 = getelementptr inbounds %"struct.jxl::jpeg::JpegBitWriter", %"struct.jxl::jpeg::JpegBitWriter"* %0, i64 0, i32 3, i32 2, i32 0, i32 0, i32 0
  %87 = bitcast %"class.std::__1::vector.0"** %86 to i64**
  %88 = load i64*, i64** %87, align 8
  br label %89

89:                                               ; preds = %74, %84
  %90 = phi i64* [ %88, %84 ], [ %75, %74 ]
  %91 = load i64, i64* %90, align 8
  %92 = getelementptr inbounds %"struct.jxl::jpeg::JpegBitWriter", %"struct.jxl::jpeg::JpegBitWriter"* %0, i64 0, i32 4
  %93 = bitcast i8** %92 to i64*
  store i64 %91, i64* %93, align 8
  store i64 0, i64* %2, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN3jxl4jpeg12_GLOBAL__N_125EncodeDCTBlockProgressiveEPKsRKNS0_16HuffmanCodeTableES6_iiiiPNS0_14DCTCodingStateEPsPNS0_13JpegBitWriterE(i16* nocapture readonly, %"struct.jxl::jpeg::HuffmanCodeTable"* nocapture readonly dereferenceable(2048), %"struct.jxl::jpeg::HuffmanCodeTable"* dereferenceable(2048), i32, i32, i32, i32, %"struct.jxl::jpeg::DCTCodingState"* nocapture, i16* nocapture, %"struct.jxl::jpeg::JpegBitWriter"*) unnamed_addr #0 {
  %11 = icmp sgt i32 %3, 0
  %12 = icmp eq i32 %3, 0
  br i1 %12, label %13, label %368

13:                                               ; preds = %10
  %14 = load i16, i16* %0, align 2
  %15 = sext i16 %14 to i32
  %16 = ashr i32 %15, %5
  %17 = trunc i32 %16 to i16
  %18 = load i16, i16* %8, align 2
  %19 = sub i16 %17, %18
  store i16 %17, i16* %8, align 2
  %20 = icmp slt i16 %19, 0
  %21 = sub i16 0, %19
  %22 = ashr i16 %19, 15
  %23 = add i16 %22, %19
  %24 = select i1 %20, i16 %21, i16 %19
  %25 = icmp eq i16 %24, 0
  br i1 %25, label %30, label %26

26:                                               ; preds = %13
  %27 = sext i16 %24 to i32
  %28 = tail call i32 @llvm.ctlz.i32(i32 %27, i1 true) #10, !range !22
  %29 = sub nuw nsw i32 32, %28
  br label %30

30:                                               ; preds = %13, %26
  %31 = phi i32 [ %29, %26 ], [ 0, %13 ]
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanCodeTable", %"struct.jxl::jpeg::HuffmanCodeTable"* %1, i64 0, i32 0, i64 %32
  %34 = load i32, i32* %33, align 4
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %36, label %38

36:                                               ; preds = %30
  %37 = getelementptr inbounds %"struct.jxl::jpeg::JpegBitWriter", %"struct.jxl::jpeg::JpegBitWriter"* %9, i64 0, i32 0
  store i8 0, i8* %37, align 8
  br label %201

38:                                               ; preds = %30
  %39 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanCodeTable", %"struct.jxl::jpeg::HuffmanCodeTable"* %1, i64 0, i32 1, i64 %32
  %40 = load i32, i32* %39, align 4
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds %"struct.jxl::jpeg::JpegBitWriter", %"struct.jxl::jpeg::JpegBitWriter"* %9, i64 0, i32 7
  %43 = load i32, i32* %42, align 8
  %44 = sub nsw i32 %43, %34
  store i32 %44, i32* %42, align 8
  %45 = zext i32 %44 to i64
  %46 = shl i64 %41, %45
  %47 = getelementptr inbounds %"struct.jxl::jpeg::JpegBitWriter", %"struct.jxl::jpeg::JpegBitWriter"* %9, i64 0, i32 6
  %48 = load i64, i64* %47, align 8
  %49 = or i64 %46, %48
  store i64 %49, i64* %47, align 8
  %50 = icmp slt i32 %44, 17
  br i1 %50, label %51, label %201

51:                                               ; preds = %38
  %52 = getelementptr inbounds %"struct.jxl::jpeg::JpegBitWriter", %"struct.jxl::jpeg::JpegBitWriter"* %9, i64 0, i32 5
  %53 = load i64, i64* %52, align 8
  %54 = add i64 %53, 12
  %55 = icmp ugt i64 %54, 16384
  br i1 %55, label %56, label %59, !prof !23

56:                                               ; preds = %51
  tail call fastcc void @_ZN3jxl4jpeg12_GLOBAL__N_110SwapBufferEPNS0_13JpegBitWriterE(%"struct.jxl::jpeg::JpegBitWriter"* %9) #10
  %57 = load i64, i64* %52, align 8
  %58 = load i64, i64* %47, align 8
  br label %59

59:                                               ; preds = %56, %51
  %60 = phi i64 [ %49, %51 ], [ %58, %56 ]
  %61 = phi i64 [ %53, %51 ], [ %57, %56 ]
  %62 = or i64 %60, 65535
  %63 = xor i64 %62, -65536
  %64 = add i64 %63, -72340172838076673
  %65 = and i64 %63, -9187201950435770368
  %66 = xor i64 %65, -9187201950435770368
  %67 = and i64 %66, %64
  %68 = icmp eq i64 %67, 0
  %69 = lshr i64 %60, 56
  %70 = trunc i64 %69 to i8
  %71 = getelementptr inbounds %"struct.jxl::jpeg::JpegBitWriter", %"struct.jxl::jpeg::JpegBitWriter"* %9, i64 0, i32 4
  %72 = load i8*, i8** %71, align 8
  br i1 %68, label %157, label %73

73:                                               ; preds = %59
  %74 = add i64 %61, 1
  store i64 %74, i64* %52, align 8
  %75 = getelementptr inbounds i8, i8* %72, i64 %61
  store i8 %70, i8* %75, align 1
  %76 = icmp eq i64 %69, 255
  br i1 %76, label %77, label %82

77:                                               ; preds = %73
  %78 = load i8*, i8** %71, align 8
  %79 = load i64, i64* %52, align 8
  %80 = add i64 %79, 1
  store i64 %80, i64* %52, align 8
  %81 = getelementptr inbounds i8, i8* %78, i64 %79
  store i8 0, i8* %81, align 1
  br label %82

82:                                               ; preds = %77, %73
  %83 = load i64, i64* %47, align 8
  %84 = lshr i64 %83, 48
  %85 = trunc i64 %84 to i8
  %86 = load i8*, i8** %71, align 8
  %87 = load i64, i64* %52, align 8
  %88 = add i64 %87, 1
  store i64 %88, i64* %52, align 8
  %89 = getelementptr inbounds i8, i8* %86, i64 %87
  store i8 %85, i8* %89, align 1
  %90 = and i64 %83, 71776119061217280
  %91 = icmp eq i64 %90, 71776119061217280
  br i1 %91, label %92, label %97

92:                                               ; preds = %82
  %93 = load i8*, i8** %71, align 8
  %94 = load i64, i64* %52, align 8
  %95 = add i64 %94, 1
  store i64 %95, i64* %52, align 8
  %96 = getelementptr inbounds i8, i8* %93, i64 %94
  store i8 0, i8* %96, align 1
  br label %97

97:                                               ; preds = %92, %82
  %98 = load i64, i64* %47, align 8
  %99 = lshr i64 %98, 40
  %100 = trunc i64 %99 to i8
  %101 = load i8*, i8** %71, align 8
  %102 = load i64, i64* %52, align 8
  %103 = add i64 %102, 1
  store i64 %103, i64* %52, align 8
  %104 = getelementptr inbounds i8, i8* %101, i64 %102
  store i8 %100, i8* %104, align 1
  %105 = and i64 %98, 280375465082880
  %106 = icmp eq i64 %105, 280375465082880
  br i1 %106, label %107, label %112

107:                                              ; preds = %97
  %108 = load i8*, i8** %71, align 8
  %109 = load i64, i64* %52, align 8
  %110 = add i64 %109, 1
  store i64 %110, i64* %52, align 8
  %111 = getelementptr inbounds i8, i8* %108, i64 %109
  store i8 0, i8* %111, align 1
  br label %112

112:                                              ; preds = %107, %97
  %113 = load i64, i64* %47, align 8
  %114 = lshr i64 %113, 32
  %115 = trunc i64 %114 to i8
  %116 = load i8*, i8** %71, align 8
  %117 = load i64, i64* %52, align 8
  %118 = add i64 %117, 1
  store i64 %118, i64* %52, align 8
  %119 = getelementptr inbounds i8, i8* %116, i64 %117
  store i8 %115, i8* %119, align 1
  %120 = and i64 %113, 1095216660480
  %121 = icmp eq i64 %120, 1095216660480
  br i1 %121, label %122, label %127

122:                                              ; preds = %112
  %123 = load i8*, i8** %71, align 8
  %124 = load i64, i64* %52, align 8
  %125 = add i64 %124, 1
  store i64 %125, i64* %52, align 8
  %126 = getelementptr inbounds i8, i8* %123, i64 %124
  store i8 0, i8* %126, align 1
  br label %127

127:                                              ; preds = %122, %112
  %128 = load i64, i64* %47, align 8
  %129 = lshr i64 %128, 24
  %130 = trunc i64 %129 to i8
  %131 = load i8*, i8** %71, align 8
  %132 = load i64, i64* %52, align 8
  %133 = add i64 %132, 1
  store i64 %133, i64* %52, align 8
  %134 = getelementptr inbounds i8, i8* %131, i64 %132
  store i8 %130, i8* %134, align 1
  %135 = and i64 %128, 4278190080
  %136 = icmp eq i64 %135, 4278190080
  br i1 %136, label %137, label %142

137:                                              ; preds = %127
  %138 = load i8*, i8** %71, align 8
  %139 = load i64, i64* %52, align 8
  %140 = add i64 %139, 1
  store i64 %140, i64* %52, align 8
  %141 = getelementptr inbounds i8, i8* %138, i64 %139
  store i8 0, i8* %141, align 1
  br label %142

142:                                              ; preds = %137, %127
  %143 = load i64, i64* %47, align 8
  %144 = lshr i64 %143, 16
  %145 = trunc i64 %144 to i8
  %146 = load i8*, i8** %71, align 8
  %147 = load i64, i64* %52, align 8
  %148 = add i64 %147, 1
  store i64 %148, i64* %52, align 8
  %149 = getelementptr inbounds i8, i8* %146, i64 %147
  store i8 %145, i8* %149, align 1
  %150 = and i64 %143, 16711680
  %151 = icmp eq i64 %150, 16711680
  br i1 %151, label %152, label %196

152:                                              ; preds = %142
  %153 = load i8*, i8** %71, align 8
  %154 = load i64, i64* %52, align 8
  %155 = add i64 %154, 1
  store i64 %155, i64* %52, align 8
  %156 = getelementptr inbounds i8, i8* %153, i64 %154
  store i8 0, i8* %156, align 1
  br label %196

157:                                              ; preds = %59
  %158 = getelementptr inbounds i8, i8* %72, i64 %61
  store i8 %70, i8* %158, align 1
  %159 = load i64, i64* %47, align 8
  %160 = lshr i64 %159, 48
  %161 = trunc i64 %160 to i8
  %162 = load i8*, i8** %71, align 8
  %163 = load i64, i64* %52, align 8
  %164 = add i64 %163, 1
  %165 = getelementptr inbounds i8, i8* %162, i64 %164
  store i8 %161, i8* %165, align 1
  %166 = load i64, i64* %47, align 8
  %167 = lshr i64 %166, 40
  %168 = trunc i64 %167 to i8
  %169 = load i8*, i8** %71, align 8
  %170 = load i64, i64* %52, align 8
  %171 = add i64 %170, 2
  %172 = getelementptr inbounds i8, i8* %169, i64 %171
  store i8 %168, i8* %172, align 1
  %173 = load i64, i64* %47, align 8
  %174 = lshr i64 %173, 32
  %175 = trunc i64 %174 to i8
  %176 = load i8*, i8** %71, align 8
  %177 = load i64, i64* %52, align 8
  %178 = add i64 %177, 3
  %179 = getelementptr inbounds i8, i8* %176, i64 %178
  store i8 %175, i8* %179, align 1
  %180 = load i64, i64* %47, align 8
  %181 = lshr i64 %180, 24
  %182 = trunc i64 %181 to i8
  %183 = load i8*, i8** %71, align 8
  %184 = load i64, i64* %52, align 8
  %185 = add i64 %184, 4
  %186 = getelementptr inbounds i8, i8* %183, i64 %185
  store i8 %182, i8* %186, align 1
  %187 = load i64, i64* %47, align 8
  %188 = lshr i64 %187, 16
  %189 = trunc i64 %188 to i8
  %190 = load i8*, i8** %71, align 8
  %191 = load i64, i64* %52, align 8
  %192 = add i64 %191, 5
  %193 = getelementptr inbounds i8, i8* %190, i64 %192
  store i8 %189, i8* %193, align 1
  %194 = load i64, i64* %52, align 8
  %195 = add i64 %194, 6
  store i64 %195, i64* %52, align 8
  br label %196

196:                                              ; preds = %157, %152, %142
  %197 = load i64, i64* %47, align 8
  %198 = shl i64 %197, 48
  store i64 %198, i64* %47, align 8
  %199 = load i32, i32* %42, align 8
  %200 = add nsw i32 %199, 48
  store i32 %200, i32* %42, align 8
  br label %201

201:                                              ; preds = %36, %38, %196
  %202 = icmp sgt i32 %31, 0
  br i1 %202, label %203, label %368

203:                                              ; preds = %201
  %204 = sext i16 %23 to i32
  %205 = shl nsw i32 -1, %31
  %206 = xor i32 %205, -1
  %207 = and i32 %206, %204
  %208 = sext i32 %207 to i64
  %209 = getelementptr inbounds %"struct.jxl::jpeg::JpegBitWriter", %"struct.jxl::jpeg::JpegBitWriter"* %9, i64 0, i32 7
  %210 = load i32, i32* %209, align 8
  %211 = sub nsw i32 %210, %31
  store i32 %211, i32* %209, align 8
  %212 = zext i32 %211 to i64
  %213 = shl i64 %208, %212
  %214 = getelementptr inbounds %"struct.jxl::jpeg::JpegBitWriter", %"struct.jxl::jpeg::JpegBitWriter"* %9, i64 0, i32 6
  %215 = load i64, i64* %214, align 8
  %216 = or i64 %213, %215
  store i64 %216, i64* %214, align 8
  %217 = icmp slt i32 %211, 17
  br i1 %217, label %218, label %368

218:                                              ; preds = %203
  %219 = getelementptr inbounds %"struct.jxl::jpeg::JpegBitWriter", %"struct.jxl::jpeg::JpegBitWriter"* %9, i64 0, i32 5
  %220 = load i64, i64* %219, align 8
  %221 = add i64 %220, 12
  %222 = icmp ugt i64 %221, 16384
  br i1 %222, label %223, label %226, !prof !23

223:                                              ; preds = %218
  tail call fastcc void @_ZN3jxl4jpeg12_GLOBAL__N_110SwapBufferEPNS0_13JpegBitWriterE(%"struct.jxl::jpeg::JpegBitWriter"* %9) #10
  %224 = load i64, i64* %219, align 8
  %225 = load i64, i64* %214, align 8
  br label %226

226:                                              ; preds = %223, %218
  %227 = phi i64 [ %216, %218 ], [ %225, %223 ]
  %228 = phi i64 [ %220, %218 ], [ %224, %223 ]
  %229 = or i64 %227, 65535
  %230 = xor i64 %229, -65536
  %231 = add i64 %230, -72340172838076673
  %232 = and i64 %230, -9187201950435770368
  %233 = xor i64 %232, -9187201950435770368
  %234 = and i64 %233, %231
  %235 = icmp eq i64 %234, 0
  %236 = lshr i64 %227, 56
  %237 = trunc i64 %236 to i8
  %238 = getelementptr inbounds %"struct.jxl::jpeg::JpegBitWriter", %"struct.jxl::jpeg::JpegBitWriter"* %9, i64 0, i32 4
  %239 = load i8*, i8** %238, align 8
  br i1 %235, label %324, label %240

240:                                              ; preds = %226
  %241 = add i64 %228, 1
  store i64 %241, i64* %219, align 8
  %242 = getelementptr inbounds i8, i8* %239, i64 %228
  store i8 %237, i8* %242, align 1
  %243 = icmp eq i64 %236, 255
  br i1 %243, label %244, label %249

244:                                              ; preds = %240
  %245 = load i8*, i8** %238, align 8
  %246 = load i64, i64* %219, align 8
  %247 = add i64 %246, 1
  store i64 %247, i64* %219, align 8
  %248 = getelementptr inbounds i8, i8* %245, i64 %246
  store i8 0, i8* %248, align 1
  br label %249

249:                                              ; preds = %244, %240
  %250 = load i64, i64* %214, align 8
  %251 = lshr i64 %250, 48
  %252 = trunc i64 %251 to i8
  %253 = load i8*, i8** %238, align 8
  %254 = load i64, i64* %219, align 8
  %255 = add i64 %254, 1
  store i64 %255, i64* %219, align 8
  %256 = getelementptr inbounds i8, i8* %253, i64 %254
  store i8 %252, i8* %256, align 1
  %257 = and i64 %250, 71776119061217280
  %258 = icmp eq i64 %257, 71776119061217280
  br i1 %258, label %259, label %264

259:                                              ; preds = %249
  %260 = load i8*, i8** %238, align 8
  %261 = load i64, i64* %219, align 8
  %262 = add i64 %261, 1
  store i64 %262, i64* %219, align 8
  %263 = getelementptr inbounds i8, i8* %260, i64 %261
  store i8 0, i8* %263, align 1
  br label %264

264:                                              ; preds = %259, %249
  %265 = load i64, i64* %214, align 8
  %266 = lshr i64 %265, 40
  %267 = trunc i64 %266 to i8
  %268 = load i8*, i8** %238, align 8
  %269 = load i64, i64* %219, align 8
  %270 = add i64 %269, 1
  store i64 %270, i64* %219, align 8
  %271 = getelementptr inbounds i8, i8* %268, i64 %269
  store i8 %267, i8* %271, align 1
  %272 = and i64 %265, 280375465082880
  %273 = icmp eq i64 %272, 280375465082880
  br i1 %273, label %274, label %279

274:                                              ; preds = %264
  %275 = load i8*, i8** %238, align 8
  %276 = load i64, i64* %219, align 8
  %277 = add i64 %276, 1
  store i64 %277, i64* %219, align 8
  %278 = getelementptr inbounds i8, i8* %275, i64 %276
  store i8 0, i8* %278, align 1
  br label %279

279:                                              ; preds = %274, %264
  %280 = load i64, i64* %214, align 8
  %281 = lshr i64 %280, 32
  %282 = trunc i64 %281 to i8
  %283 = load i8*, i8** %238, align 8
  %284 = load i64, i64* %219, align 8
  %285 = add i64 %284, 1
  store i64 %285, i64* %219, align 8
  %286 = getelementptr inbounds i8, i8* %283, i64 %284
  store i8 %282, i8* %286, align 1
  %287 = and i64 %280, 1095216660480
  %288 = icmp eq i64 %287, 1095216660480
  br i1 %288, label %289, label %294

289:                                              ; preds = %279
  %290 = load i8*, i8** %238, align 8
  %291 = load i64, i64* %219, align 8
  %292 = add i64 %291, 1
  store i64 %292, i64* %219, align 8
  %293 = getelementptr inbounds i8, i8* %290, i64 %291
  store i8 0, i8* %293, align 1
  br label %294

294:                                              ; preds = %289, %279
  %295 = load i64, i64* %214, align 8
  %296 = lshr i64 %295, 24
  %297 = trunc i64 %296 to i8
  %298 = load i8*, i8** %238, align 8
  %299 = load i64, i64* %219, align 8
  %300 = add i64 %299, 1
  store i64 %300, i64* %219, align 8
  %301 = getelementptr inbounds i8, i8* %298, i64 %299
  store i8 %297, i8* %301, align 1
  %302 = and i64 %295, 4278190080
  %303 = icmp eq i64 %302, 4278190080
  br i1 %303, label %304, label %309

304:                                              ; preds = %294
  %305 = load i8*, i8** %238, align 8
  %306 = load i64, i64* %219, align 8
  %307 = add i64 %306, 1
  store i64 %307, i64* %219, align 8
  %308 = getelementptr inbounds i8, i8* %305, i64 %306
  store i8 0, i8* %308, align 1
  br label %309

309:                                              ; preds = %304, %294
  %310 = load i64, i64* %214, align 8
  %311 = lshr i64 %310, 16
  %312 = trunc i64 %311 to i8
  %313 = load i8*, i8** %238, align 8
  %314 = load i64, i64* %219, align 8
  %315 = add i64 %314, 1
  store i64 %315, i64* %219, align 8
  %316 = getelementptr inbounds i8, i8* %313, i64 %314
  store i8 %312, i8* %316, align 1
  %317 = and i64 %310, 16711680
  %318 = icmp eq i64 %317, 16711680
  br i1 %318, label %319, label %363

319:                                              ; preds = %309
  %320 = load i8*, i8** %238, align 8
  %321 = load i64, i64* %219, align 8
  %322 = add i64 %321, 1
  store i64 %322, i64* %219, align 8
  %323 = getelementptr inbounds i8, i8* %320, i64 %321
  store i8 0, i8* %323, align 1
  br label %363

324:                                              ; preds = %226
  %325 = getelementptr inbounds i8, i8* %239, i64 %228
  store i8 %237, i8* %325, align 1
  %326 = load i64, i64* %214, align 8
  %327 = lshr i64 %326, 48
  %328 = trunc i64 %327 to i8
  %329 = load i8*, i8** %238, align 8
  %330 = load i64, i64* %219, align 8
  %331 = add i64 %330, 1
  %332 = getelementptr inbounds i8, i8* %329, i64 %331
  store i8 %328, i8* %332, align 1
  %333 = load i64, i64* %214, align 8
  %334 = lshr i64 %333, 40
  %335 = trunc i64 %334 to i8
  %336 = load i8*, i8** %238, align 8
  %337 = load i64, i64* %219, align 8
  %338 = add i64 %337, 2
  %339 = getelementptr inbounds i8, i8* %336, i64 %338
  store i8 %335, i8* %339, align 1
  %340 = load i64, i64* %214, align 8
  %341 = lshr i64 %340, 32
  %342 = trunc i64 %341 to i8
  %343 = load i8*, i8** %238, align 8
  %344 = load i64, i64* %219, align 8
  %345 = add i64 %344, 3
  %346 = getelementptr inbounds i8, i8* %343, i64 %345
  store i8 %342, i8* %346, align 1
  %347 = load i64, i64* %214, align 8
  %348 = lshr i64 %347, 24
  %349 = trunc i64 %348 to i8
  %350 = load i8*, i8** %238, align 8
  %351 = load i64, i64* %219, align 8
  %352 = add i64 %351, 4
  %353 = getelementptr inbounds i8, i8* %350, i64 %352
  store i8 %349, i8* %353, align 1
  %354 = load i64, i64* %214, align 8
  %355 = lshr i64 %354, 16
  %356 = trunc i64 %355 to i8
  %357 = load i8*, i8** %238, align 8
  %358 = load i64, i64* %219, align 8
  %359 = add i64 %358, 5
  %360 = getelementptr inbounds i8, i8* %357, i64 %359
  store i8 %356, i8* %360, align 1
  %361 = load i64, i64* %219, align 8
  %362 = add i64 %361, 6
  store i64 %362, i64* %219, align 8
  br label %363

363:                                              ; preds = %324, %319, %309
  %364 = load i64, i64* %214, align 8
  %365 = shl i64 %364, 48
  store i64 %365, i64* %214, align 8
  %366 = load i32, i32* %209, align 8
  %367 = add nsw i32 %366, 48
  store i32 %367, i32* %209, align 8
  br label %368

368:                                              ; preds = %363, %203, %201, %10
  %369 = phi i32 [ %3, %10 ], [ 1, %201 ], [ 1, %203 ], [ 1, %363 ]
  %370 = icmp sgt i32 %369, %4
  br i1 %370, label %3178, label %371

371:                                              ; preds = %368
  %372 = getelementptr inbounds %"struct.jxl::jpeg::DCTCodingState", %"struct.jxl::jpeg::DCTCodingState"* %7, i64 0, i32 0
  %373 = getelementptr inbounds %"struct.jxl::jpeg::DCTCodingState", %"struct.jxl::jpeg::DCTCodingState"* %7, i64 0, i32 1
  %374 = getelementptr inbounds %"struct.jxl::jpeg::JpegBitWriter", %"struct.jxl::jpeg::JpegBitWriter"* %9, i64 0, i32 7
  %375 = getelementptr inbounds %"struct.jxl::jpeg::JpegBitWriter", %"struct.jxl::jpeg::JpegBitWriter"* %9, i64 0, i32 6
  %376 = getelementptr inbounds %"struct.jxl::jpeg::JpegBitWriter", %"struct.jxl::jpeg::JpegBitWriter"* %9, i64 0, i32 5
  %377 = getelementptr inbounds %"struct.jxl::jpeg::JpegBitWriter", %"struct.jxl::jpeg::JpegBitWriter"* %9, i64 0, i32 4
  %378 = getelementptr inbounds %"struct.jxl::jpeg::JpegBitWriter", %"struct.jxl::jpeg::JpegBitWriter"* %9, i64 0, i32 0
  %379 = getelementptr inbounds %"struct.jxl::jpeg::DCTCodingState", %"struct.jxl::jpeg::DCTCodingState"* %7, i64 0, i32 2
  %380 = getelementptr inbounds %"struct.jxl::jpeg::DCTCodingState", %"struct.jxl::jpeg::DCTCodingState"* %7, i64 0, i32 2, i32 0, i32 1
  %381 = bitcast i32** %380 to i64*
  %382 = bitcast %"class.std::__1::vector.86"* %379 to i64*
  %383 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanCodeTable", %"struct.jxl::jpeg::HuffmanCodeTable"* %2, i64 0, i32 0, i64 240
  %384 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanCodeTable", %"struct.jxl::jpeg::HuffmanCodeTable"* %2, i64 0, i32 1, i64 240
  %385 = sext i32 %369 to i64
  %386 = sext i32 %4 to i64
  br label %389

387:                                              ; preds = %1433
  %388 = icmp sgt i32 %6, 0
  br i1 %388, label %1437, label %2122

389:                                              ; preds = %1433, %371
  %390 = phi i64 [ %1435, %1433 ], [ %385, %371 ]
  %391 = phi i32 [ %1434, %1433 ], [ 0, %371 ]
  %392 = getelementptr inbounds [80 x i32], [80 x i32]* @_ZN3jxl4jpegL17kJPEGNaturalOrderE, i64 0, i64 %390
  %393 = load i32, i32* %392, align 4
  %394 = zext i32 %393 to i64
  %395 = getelementptr inbounds i16, i16* %0, i64 %394
  %396 = load i16, i16* %395, align 2
  %397 = sext i16 %396 to i32
  %398 = icmp eq i16 %396, 0
  br i1 %398, label %399, label %401

399:                                              ; preds = %389
  %400 = add nsw i32 %391, 1
  br label %1433

401:                                              ; preds = %389
  %402 = icmp slt i16 %396, 0
  br i1 %402, label %403, label %408

403:                                              ; preds = %401
  %404 = sub i16 0, %396
  %405 = sext i16 %404 to i32
  %406 = ashr i32 %405, %5
  %407 = xor i32 %406, -1
  br label %410

408:                                              ; preds = %401
  %409 = ashr i32 %397, %5
  br label %410

410:                                              ; preds = %408, %403
  %411 = phi i32 [ %407, %403 ], [ %409, %408 ]
  %412 = phi i32 [ %406, %403 ], [ %409, %408 ]
  %413 = icmp eq i32 %412, 0
  br i1 %413, label %414, label %416

414:                                              ; preds = %410
  %415 = add nsw i32 %391, 1
  br label %1433

416:                                              ; preds = %410
  %417 = load i32, i32* %372, align 8
  %418 = icmp sgt i32 %417, 0
  br i1 %418, label %419, label %752

419:                                              ; preds = %416
  %420 = tail call i32 @llvm.ctlz.i32(i32 %417, i1 true) #10, !range !22
  %421 = xor i32 %420, 31
  %422 = shl nuw nsw i32 %421, 4
  %423 = load %"struct.jxl::jpeg::HuffmanCodeTable"*, %"struct.jxl::jpeg::HuffmanCodeTable"** %373, align 8
  %424 = zext i32 %422 to i64
  %425 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanCodeTable", %"struct.jxl::jpeg::HuffmanCodeTable"* %423, i64 0, i32 0, i64 %424
  %426 = load i32, i32* %425, align 4
  %427 = icmp eq i32 %426, 0
  br i1 %427, label %428, label %429

428:                                              ; preds = %419
  store i8 0, i8* %378, align 8
  br label %588

429:                                              ; preds = %419
  %430 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanCodeTable", %"struct.jxl::jpeg::HuffmanCodeTable"* %423, i64 0, i32 1, i64 %424
  %431 = load i32, i32* %430, align 4
  %432 = sext i32 %431 to i64
  %433 = load i32, i32* %374, align 8
  %434 = sub nsw i32 %433, %426
  store i32 %434, i32* %374, align 8
  %435 = zext i32 %434 to i64
  %436 = shl i64 %432, %435
  %437 = load i64, i64* %375, align 8
  %438 = or i64 %436, %437
  store i64 %438, i64* %375, align 8
  %439 = icmp slt i32 %434, 17
  br i1 %439, label %440, label %588

440:                                              ; preds = %429
  %441 = load i64, i64* %376, align 8
  %442 = add i64 %441, 12
  %443 = icmp ugt i64 %442, 16384
  br i1 %443, label %444, label %447, !prof !23

444:                                              ; preds = %440
  tail call fastcc void @_ZN3jxl4jpeg12_GLOBAL__N_110SwapBufferEPNS0_13JpegBitWriterE(%"struct.jxl::jpeg::JpegBitWriter"* %9) #10
  %445 = load i64, i64* %376, align 8
  %446 = load i64, i64* %375, align 8
  br label %447

447:                                              ; preds = %444, %440
  %448 = phi i64 [ %438, %440 ], [ %446, %444 ]
  %449 = phi i64 [ %441, %440 ], [ %445, %444 ]
  %450 = or i64 %448, 65535
  %451 = xor i64 %450, -65536
  %452 = add i64 %451, -72340172838076673
  %453 = and i64 %451, -9187201950435770368
  %454 = xor i64 %453, -9187201950435770368
  %455 = and i64 %454, %452
  %456 = icmp eq i64 %455, 0
  %457 = lshr i64 %448, 56
  %458 = trunc i64 %457 to i8
  %459 = load i8*, i8** %377, align 8
  br i1 %456, label %544, label %460

460:                                              ; preds = %447
  %461 = add i64 %449, 1
  store i64 %461, i64* %376, align 8
  %462 = getelementptr inbounds i8, i8* %459, i64 %449
  store i8 %458, i8* %462, align 1
  %463 = icmp eq i64 %457, 255
  br i1 %463, label %464, label %469

464:                                              ; preds = %460
  %465 = load i8*, i8** %377, align 8
  %466 = load i64, i64* %376, align 8
  %467 = add i64 %466, 1
  store i64 %467, i64* %376, align 8
  %468 = getelementptr inbounds i8, i8* %465, i64 %466
  store i8 0, i8* %468, align 1
  br label %469

469:                                              ; preds = %464, %460
  %470 = load i64, i64* %375, align 8
  %471 = lshr i64 %470, 48
  %472 = trunc i64 %471 to i8
  %473 = load i8*, i8** %377, align 8
  %474 = load i64, i64* %376, align 8
  %475 = add i64 %474, 1
  store i64 %475, i64* %376, align 8
  %476 = getelementptr inbounds i8, i8* %473, i64 %474
  store i8 %472, i8* %476, align 1
  %477 = and i64 %470, 71776119061217280
  %478 = icmp eq i64 %477, 71776119061217280
  br i1 %478, label %479, label %484

479:                                              ; preds = %469
  %480 = load i8*, i8** %377, align 8
  %481 = load i64, i64* %376, align 8
  %482 = add i64 %481, 1
  store i64 %482, i64* %376, align 8
  %483 = getelementptr inbounds i8, i8* %480, i64 %481
  store i8 0, i8* %483, align 1
  br label %484

484:                                              ; preds = %479, %469
  %485 = load i64, i64* %375, align 8
  %486 = lshr i64 %485, 40
  %487 = trunc i64 %486 to i8
  %488 = load i8*, i8** %377, align 8
  %489 = load i64, i64* %376, align 8
  %490 = add i64 %489, 1
  store i64 %490, i64* %376, align 8
  %491 = getelementptr inbounds i8, i8* %488, i64 %489
  store i8 %487, i8* %491, align 1
  %492 = and i64 %485, 280375465082880
  %493 = icmp eq i64 %492, 280375465082880
  br i1 %493, label %494, label %499

494:                                              ; preds = %484
  %495 = load i8*, i8** %377, align 8
  %496 = load i64, i64* %376, align 8
  %497 = add i64 %496, 1
  store i64 %497, i64* %376, align 8
  %498 = getelementptr inbounds i8, i8* %495, i64 %496
  store i8 0, i8* %498, align 1
  br label %499

499:                                              ; preds = %494, %484
  %500 = load i64, i64* %375, align 8
  %501 = lshr i64 %500, 32
  %502 = trunc i64 %501 to i8
  %503 = load i8*, i8** %377, align 8
  %504 = load i64, i64* %376, align 8
  %505 = add i64 %504, 1
  store i64 %505, i64* %376, align 8
  %506 = getelementptr inbounds i8, i8* %503, i64 %504
  store i8 %502, i8* %506, align 1
  %507 = and i64 %500, 1095216660480
  %508 = icmp eq i64 %507, 1095216660480
  br i1 %508, label %509, label %514

509:                                              ; preds = %499
  %510 = load i8*, i8** %377, align 8
  %511 = load i64, i64* %376, align 8
  %512 = add i64 %511, 1
  store i64 %512, i64* %376, align 8
  %513 = getelementptr inbounds i8, i8* %510, i64 %511
  store i8 0, i8* %513, align 1
  br label %514

514:                                              ; preds = %509, %499
  %515 = load i64, i64* %375, align 8
  %516 = lshr i64 %515, 24
  %517 = trunc i64 %516 to i8
  %518 = load i8*, i8** %377, align 8
  %519 = load i64, i64* %376, align 8
  %520 = add i64 %519, 1
  store i64 %520, i64* %376, align 8
  %521 = getelementptr inbounds i8, i8* %518, i64 %519
  store i8 %517, i8* %521, align 1
  %522 = and i64 %515, 4278190080
  %523 = icmp eq i64 %522, 4278190080
  br i1 %523, label %524, label %529

524:                                              ; preds = %514
  %525 = load i8*, i8** %377, align 8
  %526 = load i64, i64* %376, align 8
  %527 = add i64 %526, 1
  store i64 %527, i64* %376, align 8
  %528 = getelementptr inbounds i8, i8* %525, i64 %526
  store i8 0, i8* %528, align 1
  br label %529

529:                                              ; preds = %524, %514
  %530 = load i64, i64* %375, align 8
  %531 = lshr i64 %530, 16
  %532 = trunc i64 %531 to i8
  %533 = load i8*, i8** %377, align 8
  %534 = load i64, i64* %376, align 8
  %535 = add i64 %534, 1
  store i64 %535, i64* %376, align 8
  %536 = getelementptr inbounds i8, i8* %533, i64 %534
  store i8 %532, i8* %536, align 1
  %537 = and i64 %530, 16711680
  %538 = icmp eq i64 %537, 16711680
  br i1 %538, label %539, label %583

539:                                              ; preds = %529
  %540 = load i8*, i8** %377, align 8
  %541 = load i64, i64* %376, align 8
  %542 = add i64 %541, 1
  store i64 %542, i64* %376, align 8
  %543 = getelementptr inbounds i8, i8* %540, i64 %541
  store i8 0, i8* %543, align 1
  br label %583

544:                                              ; preds = %447
  %545 = getelementptr inbounds i8, i8* %459, i64 %449
  store i8 %458, i8* %545, align 1
  %546 = load i64, i64* %375, align 8
  %547 = lshr i64 %546, 48
  %548 = trunc i64 %547 to i8
  %549 = load i8*, i8** %377, align 8
  %550 = load i64, i64* %376, align 8
  %551 = add i64 %550, 1
  %552 = getelementptr inbounds i8, i8* %549, i64 %551
  store i8 %548, i8* %552, align 1
  %553 = load i64, i64* %375, align 8
  %554 = lshr i64 %553, 40
  %555 = trunc i64 %554 to i8
  %556 = load i8*, i8** %377, align 8
  %557 = load i64, i64* %376, align 8
  %558 = add i64 %557, 2
  %559 = getelementptr inbounds i8, i8* %556, i64 %558
  store i8 %555, i8* %559, align 1
  %560 = load i64, i64* %375, align 8
  %561 = lshr i64 %560, 32
  %562 = trunc i64 %561 to i8
  %563 = load i8*, i8** %377, align 8
  %564 = load i64, i64* %376, align 8
  %565 = add i64 %564, 3
  %566 = getelementptr inbounds i8, i8* %563, i64 %565
  store i8 %562, i8* %566, align 1
  %567 = load i64, i64* %375, align 8
  %568 = lshr i64 %567, 24
  %569 = trunc i64 %568 to i8
  %570 = load i8*, i8** %377, align 8
  %571 = load i64, i64* %376, align 8
  %572 = add i64 %571, 4
  %573 = getelementptr inbounds i8, i8* %570, i64 %572
  store i8 %569, i8* %573, align 1
  %574 = load i64, i64* %375, align 8
  %575 = lshr i64 %574, 16
  %576 = trunc i64 %575 to i8
  %577 = load i8*, i8** %377, align 8
  %578 = load i64, i64* %376, align 8
  %579 = add i64 %578, 5
  %580 = getelementptr inbounds i8, i8* %577, i64 %579
  store i8 %576, i8* %580, align 1
  %581 = load i64, i64* %376, align 8
  %582 = add i64 %581, 6
  store i64 %582, i64* %376, align 8
  br label %583

583:                                              ; preds = %544, %539, %529
  %584 = load i64, i64* %375, align 8
  %585 = shl i64 %584, 48
  store i64 %585, i64* %375, align 8
  %586 = load i32, i32* %374, align 8
  %587 = add nsw i32 %586, 48
  store i32 %587, i32* %374, align 8
  br label %588

588:                                              ; preds = %583, %429, %428
  %589 = icmp eq i32 %421, 0
  br i1 %589, label %751, label %590

590:                                              ; preds = %588
  %591 = load i32, i32* %372, align 8
  %592 = shl nsw i32 -1, %421
  %593 = xor i32 %592, -1
  %594 = and i32 %591, %593
  %595 = sext i32 %594 to i64
  %596 = load i32, i32* %374, align 8
  %597 = sub nsw i32 %596, %421
  store i32 %597, i32* %374, align 8
  %598 = zext i32 %597 to i64
  %599 = shl i64 %595, %598
  %600 = load i64, i64* %375, align 8
  %601 = or i64 %599, %600
  store i64 %601, i64* %375, align 8
  %602 = icmp slt i32 %597, 17
  br i1 %602, label %603, label %751

603:                                              ; preds = %590
  %604 = load i64, i64* %376, align 8
  %605 = add i64 %604, 12
  %606 = icmp ugt i64 %605, 16384
  br i1 %606, label %607, label %610, !prof !23

607:                                              ; preds = %603
  tail call fastcc void @_ZN3jxl4jpeg12_GLOBAL__N_110SwapBufferEPNS0_13JpegBitWriterE(%"struct.jxl::jpeg::JpegBitWriter"* %9) #10
  %608 = load i64, i64* %376, align 8
  %609 = load i64, i64* %375, align 8
  br label %610

610:                                              ; preds = %607, %603
  %611 = phi i64 [ %601, %603 ], [ %609, %607 ]
  %612 = phi i64 [ %604, %603 ], [ %608, %607 ]
  %613 = or i64 %611, 65535
  %614 = xor i64 %613, -65536
  %615 = add i64 %614, -72340172838076673
  %616 = and i64 %614, -9187201950435770368
  %617 = xor i64 %616, -9187201950435770368
  %618 = and i64 %617, %615
  %619 = icmp eq i64 %618, 0
  %620 = lshr i64 %611, 56
  %621 = trunc i64 %620 to i8
  %622 = load i8*, i8** %377, align 8
  br i1 %619, label %707, label %623

623:                                              ; preds = %610
  %624 = add i64 %612, 1
  store i64 %624, i64* %376, align 8
  %625 = getelementptr inbounds i8, i8* %622, i64 %612
  store i8 %621, i8* %625, align 1
  %626 = icmp eq i64 %620, 255
  br i1 %626, label %627, label %632

627:                                              ; preds = %623
  %628 = load i8*, i8** %377, align 8
  %629 = load i64, i64* %376, align 8
  %630 = add i64 %629, 1
  store i64 %630, i64* %376, align 8
  %631 = getelementptr inbounds i8, i8* %628, i64 %629
  store i8 0, i8* %631, align 1
  br label %632

632:                                              ; preds = %627, %623
  %633 = load i64, i64* %375, align 8
  %634 = lshr i64 %633, 48
  %635 = trunc i64 %634 to i8
  %636 = load i8*, i8** %377, align 8
  %637 = load i64, i64* %376, align 8
  %638 = add i64 %637, 1
  store i64 %638, i64* %376, align 8
  %639 = getelementptr inbounds i8, i8* %636, i64 %637
  store i8 %635, i8* %639, align 1
  %640 = and i64 %633, 71776119061217280
  %641 = icmp eq i64 %640, 71776119061217280
  br i1 %641, label %642, label %647

642:                                              ; preds = %632
  %643 = load i8*, i8** %377, align 8
  %644 = load i64, i64* %376, align 8
  %645 = add i64 %644, 1
  store i64 %645, i64* %376, align 8
  %646 = getelementptr inbounds i8, i8* %643, i64 %644
  store i8 0, i8* %646, align 1
  br label %647

647:                                              ; preds = %642, %632
  %648 = load i64, i64* %375, align 8
  %649 = lshr i64 %648, 40
  %650 = trunc i64 %649 to i8
  %651 = load i8*, i8** %377, align 8
  %652 = load i64, i64* %376, align 8
  %653 = add i64 %652, 1
  store i64 %653, i64* %376, align 8
  %654 = getelementptr inbounds i8, i8* %651, i64 %652
  store i8 %650, i8* %654, align 1
  %655 = and i64 %648, 280375465082880
  %656 = icmp eq i64 %655, 280375465082880
  br i1 %656, label %657, label %662

657:                                              ; preds = %647
  %658 = load i8*, i8** %377, align 8
  %659 = load i64, i64* %376, align 8
  %660 = add i64 %659, 1
  store i64 %660, i64* %376, align 8
  %661 = getelementptr inbounds i8, i8* %658, i64 %659
  store i8 0, i8* %661, align 1
  br label %662

662:                                              ; preds = %657, %647
  %663 = load i64, i64* %375, align 8
  %664 = lshr i64 %663, 32
  %665 = trunc i64 %664 to i8
  %666 = load i8*, i8** %377, align 8
  %667 = load i64, i64* %376, align 8
  %668 = add i64 %667, 1
  store i64 %668, i64* %376, align 8
  %669 = getelementptr inbounds i8, i8* %666, i64 %667
  store i8 %665, i8* %669, align 1
  %670 = and i64 %663, 1095216660480
  %671 = icmp eq i64 %670, 1095216660480
  br i1 %671, label %672, label %677

672:                                              ; preds = %662
  %673 = load i8*, i8** %377, align 8
  %674 = load i64, i64* %376, align 8
  %675 = add i64 %674, 1
  store i64 %675, i64* %376, align 8
  %676 = getelementptr inbounds i8, i8* %673, i64 %674
  store i8 0, i8* %676, align 1
  br label %677

677:                                              ; preds = %672, %662
  %678 = load i64, i64* %375, align 8
  %679 = lshr i64 %678, 24
  %680 = trunc i64 %679 to i8
  %681 = load i8*, i8** %377, align 8
  %682 = load i64, i64* %376, align 8
  %683 = add i64 %682, 1
  store i64 %683, i64* %376, align 8
  %684 = getelementptr inbounds i8, i8* %681, i64 %682
  store i8 %680, i8* %684, align 1
  %685 = and i64 %678, 4278190080
  %686 = icmp eq i64 %685, 4278190080
  br i1 %686, label %687, label %692

687:                                              ; preds = %677
  %688 = load i8*, i8** %377, align 8
  %689 = load i64, i64* %376, align 8
  %690 = add i64 %689, 1
  store i64 %690, i64* %376, align 8
  %691 = getelementptr inbounds i8, i8* %688, i64 %689
  store i8 0, i8* %691, align 1
  br label %692

692:                                              ; preds = %687, %677
  %693 = load i64, i64* %375, align 8
  %694 = lshr i64 %693, 16
  %695 = trunc i64 %694 to i8
  %696 = load i8*, i8** %377, align 8
  %697 = load i64, i64* %376, align 8
  %698 = add i64 %697, 1
  store i64 %698, i64* %376, align 8
  %699 = getelementptr inbounds i8, i8* %696, i64 %697
  store i8 %695, i8* %699, align 1
  %700 = and i64 %693, 16711680
  %701 = icmp eq i64 %700, 16711680
  br i1 %701, label %702, label %746

702:                                              ; preds = %692
  %703 = load i8*, i8** %377, align 8
  %704 = load i64, i64* %376, align 8
  %705 = add i64 %704, 1
  store i64 %705, i64* %376, align 8
  %706 = getelementptr inbounds i8, i8* %703, i64 %704
  store i8 0, i8* %706, align 1
  br label %746

707:                                              ; preds = %610
  %708 = getelementptr inbounds i8, i8* %622, i64 %612
  store i8 %621, i8* %708, align 1
  %709 = load i64, i64* %375, align 8
  %710 = lshr i64 %709, 48
  %711 = trunc i64 %710 to i8
  %712 = load i8*, i8** %377, align 8
  %713 = load i64, i64* %376, align 8
  %714 = add i64 %713, 1
  %715 = getelementptr inbounds i8, i8* %712, i64 %714
  store i8 %711, i8* %715, align 1
  %716 = load i64, i64* %375, align 8
  %717 = lshr i64 %716, 40
  %718 = trunc i64 %717 to i8
  %719 = load i8*, i8** %377, align 8
  %720 = load i64, i64* %376, align 8
  %721 = add i64 %720, 2
  %722 = getelementptr inbounds i8, i8* %719, i64 %721
  store i8 %718, i8* %722, align 1
  %723 = load i64, i64* %375, align 8
  %724 = lshr i64 %723, 32
  %725 = trunc i64 %724 to i8
  %726 = load i8*, i8** %377, align 8
  %727 = load i64, i64* %376, align 8
  %728 = add i64 %727, 3
  %729 = getelementptr inbounds i8, i8* %726, i64 %728
  store i8 %725, i8* %729, align 1
  %730 = load i64, i64* %375, align 8
  %731 = lshr i64 %730, 24
  %732 = trunc i64 %731 to i8
  %733 = load i8*, i8** %377, align 8
  %734 = load i64, i64* %376, align 8
  %735 = add i64 %734, 4
  %736 = getelementptr inbounds i8, i8* %733, i64 %735
  store i8 %732, i8* %736, align 1
  %737 = load i64, i64* %375, align 8
  %738 = lshr i64 %737, 16
  %739 = trunc i64 %738 to i8
  %740 = load i8*, i8** %377, align 8
  %741 = load i64, i64* %376, align 8
  %742 = add i64 %741, 5
  %743 = getelementptr inbounds i8, i8* %740, i64 %742
  store i8 %739, i8* %743, align 1
  %744 = load i64, i64* %376, align 8
  %745 = add i64 %744, 6
  store i64 %745, i64* %376, align 8
  br label %746

746:                                              ; preds = %707, %702, %692
  %747 = load i64, i64* %375, align 8
  %748 = shl i64 %747, 48
  store i64 %748, i64* %375, align 8
  %749 = load i32, i32* %374, align 8
  %750 = add nsw i32 %749, 48
  store i32 %750, i32* %374, align 8
  br label %751

751:                                              ; preds = %746, %590, %588
  store i32 0, i32* %372, align 8
  br label %752

752:                                              ; preds = %751, %416
  %753 = load i64, i64* %381, align 8
  %754 = load i64, i64* %382, align 8
  %755 = icmp eq i64 %753, %754
  br i1 %755, label %930, label %756

756:                                              ; preds = %752
  %757 = load i32, i32* %374, align 8
  %758 = load i64, i64* %375, align 8
  br label %759

759:                                              ; preds = %921, %756
  %760 = phi i64 [ %758, %756 ], [ %922, %921 ]
  %761 = phi i32 [ %757, %756 ], [ %923, %921 ]
  %762 = phi i64 [ %754, %756 ], [ %926, %921 ]
  %763 = phi i64 [ 0, %756 ], [ %924, %921 ]
  %764 = inttoptr i64 %762 to i32*
  %765 = getelementptr inbounds i32, i32* %764, i64 %763
  %766 = load i32, i32* %765, align 4
  %767 = sext i32 %766 to i64
  %768 = add nsw i32 %761, -1
  store i32 %768, i32* %374, align 8
  %769 = zext i32 %768 to i64
  %770 = shl i64 %767, %769
  %771 = or i64 %770, %760
  store i64 %771, i64* %375, align 8
  %772 = icmp slt i32 %761, 18
  br i1 %772, label %773, label %921

773:                                              ; preds = %759
  %774 = load i64, i64* %376, align 8
  %775 = add i64 %774, 12
  %776 = icmp ugt i64 %775, 16384
  br i1 %776, label %777, label %780, !prof !23

777:                                              ; preds = %773
  tail call fastcc void @_ZN3jxl4jpeg12_GLOBAL__N_110SwapBufferEPNS0_13JpegBitWriterE(%"struct.jxl::jpeg::JpegBitWriter"* %9) #10
  %778 = load i64, i64* %376, align 8
  %779 = load i64, i64* %375, align 8
  br label %780

780:                                              ; preds = %777, %773
  %781 = phi i64 [ %771, %773 ], [ %779, %777 ]
  %782 = phi i64 [ %774, %773 ], [ %778, %777 ]
  %783 = or i64 %781, 65535
  %784 = xor i64 %783, -65536
  %785 = add i64 %784, -72340172838076673
  %786 = and i64 %784, -9187201950435770368
  %787 = xor i64 %786, -9187201950435770368
  %788 = and i64 %787, %785
  %789 = icmp eq i64 %788, 0
  %790 = lshr i64 %781, 56
  %791 = trunc i64 %790 to i8
  %792 = load i8*, i8** %377, align 8
  br i1 %789, label %877, label %793

793:                                              ; preds = %780
  %794 = add i64 %782, 1
  store i64 %794, i64* %376, align 8
  %795 = getelementptr inbounds i8, i8* %792, i64 %782
  store i8 %791, i8* %795, align 1
  %796 = icmp eq i64 %790, 255
  br i1 %796, label %797, label %802

797:                                              ; preds = %793
  %798 = load i8*, i8** %377, align 8
  %799 = load i64, i64* %376, align 8
  %800 = add i64 %799, 1
  store i64 %800, i64* %376, align 8
  %801 = getelementptr inbounds i8, i8* %798, i64 %799
  store i8 0, i8* %801, align 1
  br label %802

802:                                              ; preds = %797, %793
  %803 = load i64, i64* %375, align 8
  %804 = lshr i64 %803, 48
  %805 = trunc i64 %804 to i8
  %806 = load i8*, i8** %377, align 8
  %807 = load i64, i64* %376, align 8
  %808 = add i64 %807, 1
  store i64 %808, i64* %376, align 8
  %809 = getelementptr inbounds i8, i8* %806, i64 %807
  store i8 %805, i8* %809, align 1
  %810 = and i64 %803, 71776119061217280
  %811 = icmp eq i64 %810, 71776119061217280
  br i1 %811, label %812, label %817

812:                                              ; preds = %802
  %813 = load i8*, i8** %377, align 8
  %814 = load i64, i64* %376, align 8
  %815 = add i64 %814, 1
  store i64 %815, i64* %376, align 8
  %816 = getelementptr inbounds i8, i8* %813, i64 %814
  store i8 0, i8* %816, align 1
  br label %817

817:                                              ; preds = %812, %802
  %818 = load i64, i64* %375, align 8
  %819 = lshr i64 %818, 40
  %820 = trunc i64 %819 to i8
  %821 = load i8*, i8** %377, align 8
  %822 = load i64, i64* %376, align 8
  %823 = add i64 %822, 1
  store i64 %823, i64* %376, align 8
  %824 = getelementptr inbounds i8, i8* %821, i64 %822
  store i8 %820, i8* %824, align 1
  %825 = and i64 %818, 280375465082880
  %826 = icmp eq i64 %825, 280375465082880
  br i1 %826, label %827, label %832

827:                                              ; preds = %817
  %828 = load i8*, i8** %377, align 8
  %829 = load i64, i64* %376, align 8
  %830 = add i64 %829, 1
  store i64 %830, i64* %376, align 8
  %831 = getelementptr inbounds i8, i8* %828, i64 %829
  store i8 0, i8* %831, align 1
  br label %832

832:                                              ; preds = %827, %817
  %833 = load i64, i64* %375, align 8
  %834 = lshr i64 %833, 32
  %835 = trunc i64 %834 to i8
  %836 = load i8*, i8** %377, align 8
  %837 = load i64, i64* %376, align 8
  %838 = add i64 %837, 1
  store i64 %838, i64* %376, align 8
  %839 = getelementptr inbounds i8, i8* %836, i64 %837
  store i8 %835, i8* %839, align 1
  %840 = and i64 %833, 1095216660480
  %841 = icmp eq i64 %840, 1095216660480
  br i1 %841, label %842, label %847

842:                                              ; preds = %832
  %843 = load i8*, i8** %377, align 8
  %844 = load i64, i64* %376, align 8
  %845 = add i64 %844, 1
  store i64 %845, i64* %376, align 8
  %846 = getelementptr inbounds i8, i8* %843, i64 %844
  store i8 0, i8* %846, align 1
  br label %847

847:                                              ; preds = %842, %832
  %848 = load i64, i64* %375, align 8
  %849 = lshr i64 %848, 24
  %850 = trunc i64 %849 to i8
  %851 = load i8*, i8** %377, align 8
  %852 = load i64, i64* %376, align 8
  %853 = add i64 %852, 1
  store i64 %853, i64* %376, align 8
  %854 = getelementptr inbounds i8, i8* %851, i64 %852
  store i8 %850, i8* %854, align 1
  %855 = and i64 %848, 4278190080
  %856 = icmp eq i64 %855, 4278190080
  br i1 %856, label %857, label %862

857:                                              ; preds = %847
  %858 = load i8*, i8** %377, align 8
  %859 = load i64, i64* %376, align 8
  %860 = add i64 %859, 1
  store i64 %860, i64* %376, align 8
  %861 = getelementptr inbounds i8, i8* %858, i64 %859
  store i8 0, i8* %861, align 1
  br label %862

862:                                              ; preds = %857, %847
  %863 = load i64, i64* %375, align 8
  %864 = lshr i64 %863, 16
  %865 = trunc i64 %864 to i8
  %866 = load i8*, i8** %377, align 8
  %867 = load i64, i64* %376, align 8
  %868 = add i64 %867, 1
  store i64 %868, i64* %376, align 8
  %869 = getelementptr inbounds i8, i8* %866, i64 %867
  store i8 %865, i8* %869, align 1
  %870 = and i64 %863, 16711680
  %871 = icmp eq i64 %870, 16711680
  br i1 %871, label %872, label %916

872:                                              ; preds = %862
  %873 = load i8*, i8** %377, align 8
  %874 = load i64, i64* %376, align 8
  %875 = add i64 %874, 1
  store i64 %875, i64* %376, align 8
  %876 = getelementptr inbounds i8, i8* %873, i64 %874
  store i8 0, i8* %876, align 1
  br label %916

877:                                              ; preds = %780
  %878 = getelementptr inbounds i8, i8* %792, i64 %782
  store i8 %791, i8* %878, align 1
  %879 = load i64, i64* %375, align 8
  %880 = lshr i64 %879, 48
  %881 = trunc i64 %880 to i8
  %882 = load i8*, i8** %377, align 8
  %883 = load i64, i64* %376, align 8
  %884 = add i64 %883, 1
  %885 = getelementptr inbounds i8, i8* %882, i64 %884
  store i8 %881, i8* %885, align 1
  %886 = load i64, i64* %375, align 8
  %887 = lshr i64 %886, 40
  %888 = trunc i64 %887 to i8
  %889 = load i8*, i8** %377, align 8
  %890 = load i64, i64* %376, align 8
  %891 = add i64 %890, 2
  %892 = getelementptr inbounds i8, i8* %889, i64 %891
  store i8 %888, i8* %892, align 1
  %893 = load i64, i64* %375, align 8
  %894 = lshr i64 %893, 32
  %895 = trunc i64 %894 to i8
  %896 = load i8*, i8** %377, align 8
  %897 = load i64, i64* %376, align 8
  %898 = add i64 %897, 3
  %899 = getelementptr inbounds i8, i8* %896, i64 %898
  store i8 %895, i8* %899, align 1
  %900 = load i64, i64* %375, align 8
  %901 = lshr i64 %900, 24
  %902 = trunc i64 %901 to i8
  %903 = load i8*, i8** %377, align 8
  %904 = load i64, i64* %376, align 8
  %905 = add i64 %904, 4
  %906 = getelementptr inbounds i8, i8* %903, i64 %905
  store i8 %902, i8* %906, align 1
  %907 = load i64, i64* %375, align 8
  %908 = lshr i64 %907, 16
  %909 = trunc i64 %908 to i8
  %910 = load i8*, i8** %377, align 8
  %911 = load i64, i64* %376, align 8
  %912 = add i64 %911, 5
  %913 = getelementptr inbounds i8, i8* %910, i64 %912
  store i8 %909, i8* %913, align 1
  %914 = load i64, i64* %376, align 8
  %915 = add i64 %914, 6
  store i64 %915, i64* %376, align 8
  br label %916

916:                                              ; preds = %877, %872, %862
  %917 = load i64, i64* %375, align 8
  %918 = shl i64 %917, 48
  store i64 %918, i64* %375, align 8
  %919 = load i32, i32* %374, align 8
  %920 = add nsw i32 %919, 48
  store i32 %920, i32* %374, align 8
  br label %921

921:                                              ; preds = %916, %759
  %922 = phi i64 [ %771, %759 ], [ %918, %916 ]
  %923 = phi i32 [ %768, %759 ], [ %920, %916 ]
  %924 = add nuw i64 %763, 1
  %925 = load i64, i64* %381, align 8
  %926 = load i64, i64* %382, align 8
  %927 = sub i64 %925, %926
  %928 = ashr exact i64 %927, 2
  %929 = icmp ult i64 %924, %928
  br i1 %929, label %759, label %930

930:                                              ; preds = %921, %752
  %931 = phi i64 [ %753, %752 ], [ %926, %921 ]
  store i64 %931, i64* %381, align 8
  %932 = icmp sgt i32 %391, 15
  br i1 %932, label %933, label %1101

933:                                              ; preds = %930, %1096
  %934 = phi i32 [ %1097, %1096 ], [ %391, %930 ]
  %935 = load i32, i32* %383, align 4
  %936 = icmp eq i32 %935, 0
  br i1 %936, label %937, label %938

937:                                              ; preds = %933
  store i8 0, i8* %378, align 8
  br label %1096

938:                                              ; preds = %933
  %939 = load i32, i32* %384, align 4
  %940 = sext i32 %939 to i64
  %941 = load i32, i32* %374, align 8
  %942 = sub nsw i32 %941, %935
  store i32 %942, i32* %374, align 8
  %943 = zext i32 %942 to i64
  %944 = shl i64 %940, %943
  %945 = load i64, i64* %375, align 8
  %946 = or i64 %944, %945
  store i64 %946, i64* %375, align 8
  %947 = icmp slt i32 %942, 17
  br i1 %947, label %948, label %1096

948:                                              ; preds = %938
  %949 = load i64, i64* %376, align 8
  %950 = add i64 %949, 12
  %951 = icmp ugt i64 %950, 16384
  br i1 %951, label %952, label %955, !prof !23

952:                                              ; preds = %948
  tail call fastcc void @_ZN3jxl4jpeg12_GLOBAL__N_110SwapBufferEPNS0_13JpegBitWriterE(%"struct.jxl::jpeg::JpegBitWriter"* %9) #10
  %953 = load i64, i64* %376, align 8
  %954 = load i64, i64* %375, align 8
  br label %955

955:                                              ; preds = %952, %948
  %956 = phi i64 [ %946, %948 ], [ %954, %952 ]
  %957 = phi i64 [ %949, %948 ], [ %953, %952 ]
  %958 = or i64 %956, 65535
  %959 = xor i64 %958, -65536
  %960 = add i64 %959, -72340172838076673
  %961 = and i64 %959, -9187201950435770368
  %962 = xor i64 %961, -9187201950435770368
  %963 = and i64 %962, %960
  %964 = icmp eq i64 %963, 0
  %965 = lshr i64 %956, 56
  %966 = trunc i64 %965 to i8
  %967 = load i8*, i8** %377, align 8
  br i1 %964, label %1052, label %968

968:                                              ; preds = %955
  %969 = add i64 %957, 1
  store i64 %969, i64* %376, align 8
  %970 = getelementptr inbounds i8, i8* %967, i64 %957
  store i8 %966, i8* %970, align 1
  %971 = icmp eq i64 %965, 255
  br i1 %971, label %972, label %977

972:                                              ; preds = %968
  %973 = load i8*, i8** %377, align 8
  %974 = load i64, i64* %376, align 8
  %975 = add i64 %974, 1
  store i64 %975, i64* %376, align 8
  %976 = getelementptr inbounds i8, i8* %973, i64 %974
  store i8 0, i8* %976, align 1
  br label %977

977:                                              ; preds = %972, %968
  %978 = load i64, i64* %375, align 8
  %979 = lshr i64 %978, 48
  %980 = trunc i64 %979 to i8
  %981 = load i8*, i8** %377, align 8
  %982 = load i64, i64* %376, align 8
  %983 = add i64 %982, 1
  store i64 %983, i64* %376, align 8
  %984 = getelementptr inbounds i8, i8* %981, i64 %982
  store i8 %980, i8* %984, align 1
  %985 = and i64 %978, 71776119061217280
  %986 = icmp eq i64 %985, 71776119061217280
  br i1 %986, label %987, label %992

987:                                              ; preds = %977
  %988 = load i8*, i8** %377, align 8
  %989 = load i64, i64* %376, align 8
  %990 = add i64 %989, 1
  store i64 %990, i64* %376, align 8
  %991 = getelementptr inbounds i8, i8* %988, i64 %989
  store i8 0, i8* %991, align 1
  br label %992

992:                                              ; preds = %987, %977
  %993 = load i64, i64* %375, align 8
  %994 = lshr i64 %993, 40
  %995 = trunc i64 %994 to i8
  %996 = load i8*, i8** %377, align 8
  %997 = load i64, i64* %376, align 8
  %998 = add i64 %997, 1
  store i64 %998, i64* %376, align 8
  %999 = getelementptr inbounds i8, i8* %996, i64 %997
  store i8 %995, i8* %999, align 1
  %1000 = and i64 %993, 280375465082880
  %1001 = icmp eq i64 %1000, 280375465082880
  br i1 %1001, label %1002, label %1007

1002:                                             ; preds = %992
  %1003 = load i8*, i8** %377, align 8
  %1004 = load i64, i64* %376, align 8
  %1005 = add i64 %1004, 1
  store i64 %1005, i64* %376, align 8
  %1006 = getelementptr inbounds i8, i8* %1003, i64 %1004
  store i8 0, i8* %1006, align 1
  br label %1007

1007:                                             ; preds = %1002, %992
  %1008 = load i64, i64* %375, align 8
  %1009 = lshr i64 %1008, 32
  %1010 = trunc i64 %1009 to i8
  %1011 = load i8*, i8** %377, align 8
  %1012 = load i64, i64* %376, align 8
  %1013 = add i64 %1012, 1
  store i64 %1013, i64* %376, align 8
  %1014 = getelementptr inbounds i8, i8* %1011, i64 %1012
  store i8 %1010, i8* %1014, align 1
  %1015 = and i64 %1008, 1095216660480
  %1016 = icmp eq i64 %1015, 1095216660480
  br i1 %1016, label %1017, label %1022

1017:                                             ; preds = %1007
  %1018 = load i8*, i8** %377, align 8
  %1019 = load i64, i64* %376, align 8
  %1020 = add i64 %1019, 1
  store i64 %1020, i64* %376, align 8
  %1021 = getelementptr inbounds i8, i8* %1018, i64 %1019
  store i8 0, i8* %1021, align 1
  br label %1022

1022:                                             ; preds = %1017, %1007
  %1023 = load i64, i64* %375, align 8
  %1024 = lshr i64 %1023, 24
  %1025 = trunc i64 %1024 to i8
  %1026 = load i8*, i8** %377, align 8
  %1027 = load i64, i64* %376, align 8
  %1028 = add i64 %1027, 1
  store i64 %1028, i64* %376, align 8
  %1029 = getelementptr inbounds i8, i8* %1026, i64 %1027
  store i8 %1025, i8* %1029, align 1
  %1030 = and i64 %1023, 4278190080
  %1031 = icmp eq i64 %1030, 4278190080
  br i1 %1031, label %1032, label %1037

1032:                                             ; preds = %1022
  %1033 = load i8*, i8** %377, align 8
  %1034 = load i64, i64* %376, align 8
  %1035 = add i64 %1034, 1
  store i64 %1035, i64* %376, align 8
  %1036 = getelementptr inbounds i8, i8* %1033, i64 %1034
  store i8 0, i8* %1036, align 1
  br label %1037

1037:                                             ; preds = %1032, %1022
  %1038 = load i64, i64* %375, align 8
  %1039 = lshr i64 %1038, 16
  %1040 = trunc i64 %1039 to i8
  %1041 = load i8*, i8** %377, align 8
  %1042 = load i64, i64* %376, align 8
  %1043 = add i64 %1042, 1
  store i64 %1043, i64* %376, align 8
  %1044 = getelementptr inbounds i8, i8* %1041, i64 %1042
  store i8 %1040, i8* %1044, align 1
  %1045 = and i64 %1038, 16711680
  %1046 = icmp eq i64 %1045, 16711680
  br i1 %1046, label %1047, label %1091

1047:                                             ; preds = %1037
  %1048 = load i8*, i8** %377, align 8
  %1049 = load i64, i64* %376, align 8
  %1050 = add i64 %1049, 1
  store i64 %1050, i64* %376, align 8
  %1051 = getelementptr inbounds i8, i8* %1048, i64 %1049
  store i8 0, i8* %1051, align 1
  br label %1091

1052:                                             ; preds = %955
  %1053 = getelementptr inbounds i8, i8* %967, i64 %957
  store i8 %966, i8* %1053, align 1
  %1054 = load i64, i64* %375, align 8
  %1055 = lshr i64 %1054, 48
  %1056 = trunc i64 %1055 to i8
  %1057 = load i8*, i8** %377, align 8
  %1058 = load i64, i64* %376, align 8
  %1059 = add i64 %1058, 1
  %1060 = getelementptr inbounds i8, i8* %1057, i64 %1059
  store i8 %1056, i8* %1060, align 1
  %1061 = load i64, i64* %375, align 8
  %1062 = lshr i64 %1061, 40
  %1063 = trunc i64 %1062 to i8
  %1064 = load i8*, i8** %377, align 8
  %1065 = load i64, i64* %376, align 8
  %1066 = add i64 %1065, 2
  %1067 = getelementptr inbounds i8, i8* %1064, i64 %1066
  store i8 %1063, i8* %1067, align 1
  %1068 = load i64, i64* %375, align 8
  %1069 = lshr i64 %1068, 32
  %1070 = trunc i64 %1069 to i8
  %1071 = load i8*, i8** %377, align 8
  %1072 = load i64, i64* %376, align 8
  %1073 = add i64 %1072, 3
  %1074 = getelementptr inbounds i8, i8* %1071, i64 %1073
  store i8 %1070, i8* %1074, align 1
  %1075 = load i64, i64* %375, align 8
  %1076 = lshr i64 %1075, 24
  %1077 = trunc i64 %1076 to i8
  %1078 = load i8*, i8** %377, align 8
  %1079 = load i64, i64* %376, align 8
  %1080 = add i64 %1079, 4
  %1081 = getelementptr inbounds i8, i8* %1078, i64 %1080
  store i8 %1077, i8* %1081, align 1
  %1082 = load i64, i64* %375, align 8
  %1083 = lshr i64 %1082, 16
  %1084 = trunc i64 %1083 to i8
  %1085 = load i8*, i8** %377, align 8
  %1086 = load i64, i64* %376, align 8
  %1087 = add i64 %1086, 5
  %1088 = getelementptr inbounds i8, i8* %1085, i64 %1087
  store i8 %1084, i8* %1088, align 1
  %1089 = load i64, i64* %376, align 8
  %1090 = add i64 %1089, 6
  store i64 %1090, i64* %376, align 8
  br label %1091

1091:                                             ; preds = %1052, %1047, %1037
  %1092 = load i64, i64* %375, align 8
  %1093 = shl i64 %1092, 48
  store i64 %1093, i64* %375, align 8
  %1094 = load i32, i32* %374, align 8
  %1095 = add nsw i32 %1094, 48
  store i32 %1095, i32* %374, align 8
  br label %1096

1096:                                             ; preds = %937, %938, %1091
  %1097 = add nsw i32 %934, -16
  %1098 = icmp sgt i32 %1097, 15
  br i1 %1098, label %933, label %1099

1099:                                             ; preds = %1096
  %1100 = and i32 %391, 15
  br label %1101

1101:                                             ; preds = %1099, %930
  %1102 = phi i32 [ %391, %930 ], [ %1100, %1099 ]
  %1103 = tail call i32 @llvm.ctlz.i32(i32 %412, i1 true) #10, !range !22
  %1104 = sub nuw nsw i32 32, %1103
  %1105 = shl i32 %1102, 4
  %1106 = add nsw i32 %1105, %1104
  %1107 = sext i32 %1106 to i64
  %1108 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanCodeTable", %"struct.jxl::jpeg::HuffmanCodeTable"* %2, i64 0, i32 0, i64 %1107
  %1109 = load i32, i32* %1108, align 4
  %1110 = icmp eq i32 %1109, 0
  br i1 %1110, label %1111, label %1114

1111:                                             ; preds = %1101
  store i8 0, i8* %378, align 8
  %1112 = load i32, i32* %374, align 8
  %1113 = load i64, i64* %375, align 8
  br label %1273

1114:                                             ; preds = %1101
  %1115 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanCodeTable", %"struct.jxl::jpeg::HuffmanCodeTable"* %2, i64 0, i32 1, i64 %1107
  %1116 = load i32, i32* %1115, align 4
  %1117 = sext i32 %1116 to i64
  %1118 = load i32, i32* %374, align 8
  %1119 = sub nsw i32 %1118, %1109
  store i32 %1119, i32* %374, align 8
  %1120 = zext i32 %1119 to i64
  %1121 = shl i64 %1117, %1120
  %1122 = load i64, i64* %375, align 8
  %1123 = or i64 %1121, %1122
  store i64 %1123, i64* %375, align 8
  %1124 = icmp slt i32 %1119, 17
  br i1 %1124, label %1125, label %1273

1125:                                             ; preds = %1114
  %1126 = load i64, i64* %376, align 8
  %1127 = add i64 %1126, 12
  %1128 = icmp ugt i64 %1127, 16384
  br i1 %1128, label %1129, label %1132, !prof !23

1129:                                             ; preds = %1125
  tail call fastcc void @_ZN3jxl4jpeg12_GLOBAL__N_110SwapBufferEPNS0_13JpegBitWriterE(%"struct.jxl::jpeg::JpegBitWriter"* %9) #10
  %1130 = load i64, i64* %376, align 8
  %1131 = load i64, i64* %375, align 8
  br label %1132

1132:                                             ; preds = %1129, %1125
  %1133 = phi i64 [ %1123, %1125 ], [ %1131, %1129 ]
  %1134 = phi i64 [ %1126, %1125 ], [ %1130, %1129 ]
  %1135 = or i64 %1133, 65535
  %1136 = xor i64 %1135, -65536
  %1137 = add i64 %1136, -72340172838076673
  %1138 = and i64 %1136, -9187201950435770368
  %1139 = xor i64 %1138, -9187201950435770368
  %1140 = and i64 %1139, %1137
  %1141 = icmp eq i64 %1140, 0
  %1142 = lshr i64 %1133, 56
  %1143 = trunc i64 %1142 to i8
  %1144 = load i8*, i8** %377, align 8
  br i1 %1141, label %1229, label %1145

1145:                                             ; preds = %1132
  %1146 = add i64 %1134, 1
  store i64 %1146, i64* %376, align 8
  %1147 = getelementptr inbounds i8, i8* %1144, i64 %1134
  store i8 %1143, i8* %1147, align 1
  %1148 = icmp eq i64 %1142, 255
  br i1 %1148, label %1149, label %1154

1149:                                             ; preds = %1145
  %1150 = load i8*, i8** %377, align 8
  %1151 = load i64, i64* %376, align 8
  %1152 = add i64 %1151, 1
  store i64 %1152, i64* %376, align 8
  %1153 = getelementptr inbounds i8, i8* %1150, i64 %1151
  store i8 0, i8* %1153, align 1
  br label %1154

1154:                                             ; preds = %1149, %1145
  %1155 = load i64, i64* %375, align 8
  %1156 = lshr i64 %1155, 48
  %1157 = trunc i64 %1156 to i8
  %1158 = load i8*, i8** %377, align 8
  %1159 = load i64, i64* %376, align 8
  %1160 = add i64 %1159, 1
  store i64 %1160, i64* %376, align 8
  %1161 = getelementptr inbounds i8, i8* %1158, i64 %1159
  store i8 %1157, i8* %1161, align 1
  %1162 = and i64 %1155, 71776119061217280
  %1163 = icmp eq i64 %1162, 71776119061217280
  br i1 %1163, label %1164, label %1169

1164:                                             ; preds = %1154
  %1165 = load i8*, i8** %377, align 8
  %1166 = load i64, i64* %376, align 8
  %1167 = add i64 %1166, 1
  store i64 %1167, i64* %376, align 8
  %1168 = getelementptr inbounds i8, i8* %1165, i64 %1166
  store i8 0, i8* %1168, align 1
  br label %1169

1169:                                             ; preds = %1164, %1154
  %1170 = load i64, i64* %375, align 8
  %1171 = lshr i64 %1170, 40
  %1172 = trunc i64 %1171 to i8
  %1173 = load i8*, i8** %377, align 8
  %1174 = load i64, i64* %376, align 8
  %1175 = add i64 %1174, 1
  store i64 %1175, i64* %376, align 8
  %1176 = getelementptr inbounds i8, i8* %1173, i64 %1174
  store i8 %1172, i8* %1176, align 1
  %1177 = and i64 %1170, 280375465082880
  %1178 = icmp eq i64 %1177, 280375465082880
  br i1 %1178, label %1179, label %1184

1179:                                             ; preds = %1169
  %1180 = load i8*, i8** %377, align 8
  %1181 = load i64, i64* %376, align 8
  %1182 = add i64 %1181, 1
  store i64 %1182, i64* %376, align 8
  %1183 = getelementptr inbounds i8, i8* %1180, i64 %1181
  store i8 0, i8* %1183, align 1
  br label %1184

1184:                                             ; preds = %1179, %1169
  %1185 = load i64, i64* %375, align 8
  %1186 = lshr i64 %1185, 32
  %1187 = trunc i64 %1186 to i8
  %1188 = load i8*, i8** %377, align 8
  %1189 = load i64, i64* %376, align 8
  %1190 = add i64 %1189, 1
  store i64 %1190, i64* %376, align 8
  %1191 = getelementptr inbounds i8, i8* %1188, i64 %1189
  store i8 %1187, i8* %1191, align 1
  %1192 = and i64 %1185, 1095216660480
  %1193 = icmp eq i64 %1192, 1095216660480
  br i1 %1193, label %1194, label %1199

1194:                                             ; preds = %1184
  %1195 = load i8*, i8** %377, align 8
  %1196 = load i64, i64* %376, align 8
  %1197 = add i64 %1196, 1
  store i64 %1197, i64* %376, align 8
  %1198 = getelementptr inbounds i8, i8* %1195, i64 %1196
  store i8 0, i8* %1198, align 1
  br label %1199

1199:                                             ; preds = %1194, %1184
  %1200 = load i64, i64* %375, align 8
  %1201 = lshr i64 %1200, 24
  %1202 = trunc i64 %1201 to i8
  %1203 = load i8*, i8** %377, align 8
  %1204 = load i64, i64* %376, align 8
  %1205 = add i64 %1204, 1
  store i64 %1205, i64* %376, align 8
  %1206 = getelementptr inbounds i8, i8* %1203, i64 %1204
  store i8 %1202, i8* %1206, align 1
  %1207 = and i64 %1200, 4278190080
  %1208 = icmp eq i64 %1207, 4278190080
  br i1 %1208, label %1209, label %1214

1209:                                             ; preds = %1199
  %1210 = load i8*, i8** %377, align 8
  %1211 = load i64, i64* %376, align 8
  %1212 = add i64 %1211, 1
  store i64 %1212, i64* %376, align 8
  %1213 = getelementptr inbounds i8, i8* %1210, i64 %1211
  store i8 0, i8* %1213, align 1
  br label %1214

1214:                                             ; preds = %1209, %1199
  %1215 = load i64, i64* %375, align 8
  %1216 = lshr i64 %1215, 16
  %1217 = trunc i64 %1216 to i8
  %1218 = load i8*, i8** %377, align 8
  %1219 = load i64, i64* %376, align 8
  %1220 = add i64 %1219, 1
  store i64 %1220, i64* %376, align 8
  %1221 = getelementptr inbounds i8, i8* %1218, i64 %1219
  store i8 %1217, i8* %1221, align 1
  %1222 = and i64 %1215, 16711680
  %1223 = icmp eq i64 %1222, 16711680
  br i1 %1223, label %1224, label %1268

1224:                                             ; preds = %1214
  %1225 = load i8*, i8** %377, align 8
  %1226 = load i64, i64* %376, align 8
  %1227 = add i64 %1226, 1
  store i64 %1227, i64* %376, align 8
  %1228 = getelementptr inbounds i8, i8* %1225, i64 %1226
  store i8 0, i8* %1228, align 1
  br label %1268

1229:                                             ; preds = %1132
  %1230 = getelementptr inbounds i8, i8* %1144, i64 %1134
  store i8 %1143, i8* %1230, align 1
  %1231 = load i64, i64* %375, align 8
  %1232 = lshr i64 %1231, 48
  %1233 = trunc i64 %1232 to i8
  %1234 = load i8*, i8** %377, align 8
  %1235 = load i64, i64* %376, align 8
  %1236 = add i64 %1235, 1
  %1237 = getelementptr inbounds i8, i8* %1234, i64 %1236
  store i8 %1233, i8* %1237, align 1
  %1238 = load i64, i64* %375, align 8
  %1239 = lshr i64 %1238, 40
  %1240 = trunc i64 %1239 to i8
  %1241 = load i8*, i8** %377, align 8
  %1242 = load i64, i64* %376, align 8
  %1243 = add i64 %1242, 2
  %1244 = getelementptr inbounds i8, i8* %1241, i64 %1243
  store i8 %1240, i8* %1244, align 1
  %1245 = load i64, i64* %375, align 8
  %1246 = lshr i64 %1245, 32
  %1247 = trunc i64 %1246 to i8
  %1248 = load i8*, i8** %377, align 8
  %1249 = load i64, i64* %376, align 8
  %1250 = add i64 %1249, 3
  %1251 = getelementptr inbounds i8, i8* %1248, i64 %1250
  store i8 %1247, i8* %1251, align 1
  %1252 = load i64, i64* %375, align 8
  %1253 = lshr i64 %1252, 24
  %1254 = trunc i64 %1253 to i8
  %1255 = load i8*, i8** %377, align 8
  %1256 = load i64, i64* %376, align 8
  %1257 = add i64 %1256, 4
  %1258 = getelementptr inbounds i8, i8* %1255, i64 %1257
  store i8 %1254, i8* %1258, align 1
  %1259 = load i64, i64* %375, align 8
  %1260 = lshr i64 %1259, 16
  %1261 = trunc i64 %1260 to i8
  %1262 = load i8*, i8** %377, align 8
  %1263 = load i64, i64* %376, align 8
  %1264 = add i64 %1263, 5
  %1265 = getelementptr inbounds i8, i8* %1262, i64 %1264
  store i8 %1261, i8* %1265, align 1
  %1266 = load i64, i64* %376, align 8
  %1267 = add i64 %1266, 6
  store i64 %1267, i64* %376, align 8
  br label %1268

1268:                                             ; preds = %1229, %1224, %1214
  %1269 = load i64, i64* %375, align 8
  %1270 = shl i64 %1269, 48
  store i64 %1270, i64* %375, align 8
  %1271 = load i32, i32* %374, align 8
  %1272 = add nsw i32 %1271, 48
  store i32 %1272, i32* %374, align 8
  br label %1273

1273:                                             ; preds = %1111, %1114, %1268
  %1274 = phi i64 [ %1113, %1111 ], [ %1123, %1114 ], [ %1270, %1268 ]
  %1275 = phi i32 [ %1112, %1111 ], [ %1119, %1114 ], [ %1272, %1268 ]
  %1276 = shl nsw i32 -1, %1104
  %1277 = xor i32 %1276, -1
  %1278 = and i32 %411, %1277
  %1279 = sext i32 %1278 to i64
  %1280 = sub nsw i32 %1275, %1104
  store i32 %1280, i32* %374, align 8
  %1281 = zext i32 %1280 to i64
  %1282 = shl i64 %1279, %1281
  %1283 = or i64 %1282, %1274
  store i64 %1283, i64* %375, align 8
  %1284 = icmp slt i32 %1280, 17
  br i1 %1284, label %1285, label %1433

1285:                                             ; preds = %1273
  %1286 = load i64, i64* %376, align 8
  %1287 = add i64 %1286, 12
  %1288 = icmp ugt i64 %1287, 16384
  br i1 %1288, label %1289, label %1292, !prof !23

1289:                                             ; preds = %1285
  tail call fastcc void @_ZN3jxl4jpeg12_GLOBAL__N_110SwapBufferEPNS0_13JpegBitWriterE(%"struct.jxl::jpeg::JpegBitWriter"* %9) #10
  %1290 = load i64, i64* %376, align 8
  %1291 = load i64, i64* %375, align 8
  br label %1292

1292:                                             ; preds = %1289, %1285
  %1293 = phi i64 [ %1283, %1285 ], [ %1291, %1289 ]
  %1294 = phi i64 [ %1286, %1285 ], [ %1290, %1289 ]
  %1295 = or i64 %1293, 65535
  %1296 = xor i64 %1295, -65536
  %1297 = add i64 %1296, -72340172838076673
  %1298 = and i64 %1296, -9187201950435770368
  %1299 = xor i64 %1298, -9187201950435770368
  %1300 = and i64 %1299, %1297
  %1301 = icmp eq i64 %1300, 0
  %1302 = lshr i64 %1293, 56
  %1303 = trunc i64 %1302 to i8
  %1304 = load i8*, i8** %377, align 8
  br i1 %1301, label %1389, label %1305

1305:                                             ; preds = %1292
  %1306 = add i64 %1294, 1
  store i64 %1306, i64* %376, align 8
  %1307 = getelementptr inbounds i8, i8* %1304, i64 %1294
  store i8 %1303, i8* %1307, align 1
  %1308 = icmp eq i64 %1302, 255
  br i1 %1308, label %1309, label %1314

1309:                                             ; preds = %1305
  %1310 = load i8*, i8** %377, align 8
  %1311 = load i64, i64* %376, align 8
  %1312 = add i64 %1311, 1
  store i64 %1312, i64* %376, align 8
  %1313 = getelementptr inbounds i8, i8* %1310, i64 %1311
  store i8 0, i8* %1313, align 1
  br label %1314

1314:                                             ; preds = %1309, %1305
  %1315 = load i64, i64* %375, align 8
  %1316 = lshr i64 %1315, 48
  %1317 = trunc i64 %1316 to i8
  %1318 = load i8*, i8** %377, align 8
  %1319 = load i64, i64* %376, align 8
  %1320 = add i64 %1319, 1
  store i64 %1320, i64* %376, align 8
  %1321 = getelementptr inbounds i8, i8* %1318, i64 %1319
  store i8 %1317, i8* %1321, align 1
  %1322 = and i64 %1315, 71776119061217280
  %1323 = icmp eq i64 %1322, 71776119061217280
  br i1 %1323, label %1324, label %1329

1324:                                             ; preds = %1314
  %1325 = load i8*, i8** %377, align 8
  %1326 = load i64, i64* %376, align 8
  %1327 = add i64 %1326, 1
  store i64 %1327, i64* %376, align 8
  %1328 = getelementptr inbounds i8, i8* %1325, i64 %1326
  store i8 0, i8* %1328, align 1
  br label %1329

1329:                                             ; preds = %1324, %1314
  %1330 = load i64, i64* %375, align 8
  %1331 = lshr i64 %1330, 40
  %1332 = trunc i64 %1331 to i8
  %1333 = load i8*, i8** %377, align 8
  %1334 = load i64, i64* %376, align 8
  %1335 = add i64 %1334, 1
  store i64 %1335, i64* %376, align 8
  %1336 = getelementptr inbounds i8, i8* %1333, i64 %1334
  store i8 %1332, i8* %1336, align 1
  %1337 = and i64 %1330, 280375465082880
  %1338 = icmp eq i64 %1337, 280375465082880
  br i1 %1338, label %1339, label %1344

1339:                                             ; preds = %1329
  %1340 = load i8*, i8** %377, align 8
  %1341 = load i64, i64* %376, align 8
  %1342 = add i64 %1341, 1
  store i64 %1342, i64* %376, align 8
  %1343 = getelementptr inbounds i8, i8* %1340, i64 %1341
  store i8 0, i8* %1343, align 1
  br label %1344

1344:                                             ; preds = %1339, %1329
  %1345 = load i64, i64* %375, align 8
  %1346 = lshr i64 %1345, 32
  %1347 = trunc i64 %1346 to i8
  %1348 = load i8*, i8** %377, align 8
  %1349 = load i64, i64* %376, align 8
  %1350 = add i64 %1349, 1
  store i64 %1350, i64* %376, align 8
  %1351 = getelementptr inbounds i8, i8* %1348, i64 %1349
  store i8 %1347, i8* %1351, align 1
  %1352 = and i64 %1345, 1095216660480
  %1353 = icmp eq i64 %1352, 1095216660480
  br i1 %1353, label %1354, label %1359

1354:                                             ; preds = %1344
  %1355 = load i8*, i8** %377, align 8
  %1356 = load i64, i64* %376, align 8
  %1357 = add i64 %1356, 1
  store i64 %1357, i64* %376, align 8
  %1358 = getelementptr inbounds i8, i8* %1355, i64 %1356
  store i8 0, i8* %1358, align 1
  br label %1359

1359:                                             ; preds = %1354, %1344
  %1360 = load i64, i64* %375, align 8
  %1361 = lshr i64 %1360, 24
  %1362 = trunc i64 %1361 to i8
  %1363 = load i8*, i8** %377, align 8
  %1364 = load i64, i64* %376, align 8
  %1365 = add i64 %1364, 1
  store i64 %1365, i64* %376, align 8
  %1366 = getelementptr inbounds i8, i8* %1363, i64 %1364
  store i8 %1362, i8* %1366, align 1
  %1367 = and i64 %1360, 4278190080
  %1368 = icmp eq i64 %1367, 4278190080
  br i1 %1368, label %1369, label %1374

1369:                                             ; preds = %1359
  %1370 = load i8*, i8** %377, align 8
  %1371 = load i64, i64* %376, align 8
  %1372 = add i64 %1371, 1
  store i64 %1372, i64* %376, align 8
  %1373 = getelementptr inbounds i8, i8* %1370, i64 %1371
  store i8 0, i8* %1373, align 1
  br label %1374

1374:                                             ; preds = %1369, %1359
  %1375 = load i64, i64* %375, align 8
  %1376 = lshr i64 %1375, 16
  %1377 = trunc i64 %1376 to i8
  %1378 = load i8*, i8** %377, align 8
  %1379 = load i64, i64* %376, align 8
  %1380 = add i64 %1379, 1
  store i64 %1380, i64* %376, align 8
  %1381 = getelementptr inbounds i8, i8* %1378, i64 %1379
  store i8 %1377, i8* %1381, align 1
  %1382 = and i64 %1375, 16711680
  %1383 = icmp eq i64 %1382, 16711680
  br i1 %1383, label %1384, label %1428

1384:                                             ; preds = %1374
  %1385 = load i8*, i8** %377, align 8
  %1386 = load i64, i64* %376, align 8
  %1387 = add i64 %1386, 1
  store i64 %1387, i64* %376, align 8
  %1388 = getelementptr inbounds i8, i8* %1385, i64 %1386
  store i8 0, i8* %1388, align 1
  br label %1428

1389:                                             ; preds = %1292
  %1390 = getelementptr inbounds i8, i8* %1304, i64 %1294
  store i8 %1303, i8* %1390, align 1
  %1391 = load i64, i64* %375, align 8
  %1392 = lshr i64 %1391, 48
  %1393 = trunc i64 %1392 to i8
  %1394 = load i8*, i8** %377, align 8
  %1395 = load i64, i64* %376, align 8
  %1396 = add i64 %1395, 1
  %1397 = getelementptr inbounds i8, i8* %1394, i64 %1396
  store i8 %1393, i8* %1397, align 1
  %1398 = load i64, i64* %375, align 8
  %1399 = lshr i64 %1398, 40
  %1400 = trunc i64 %1399 to i8
  %1401 = load i8*, i8** %377, align 8
  %1402 = load i64, i64* %376, align 8
  %1403 = add i64 %1402, 2
  %1404 = getelementptr inbounds i8, i8* %1401, i64 %1403
  store i8 %1400, i8* %1404, align 1
  %1405 = load i64, i64* %375, align 8
  %1406 = lshr i64 %1405, 32
  %1407 = trunc i64 %1406 to i8
  %1408 = load i8*, i8** %377, align 8
  %1409 = load i64, i64* %376, align 8
  %1410 = add i64 %1409, 3
  %1411 = getelementptr inbounds i8, i8* %1408, i64 %1410
  store i8 %1407, i8* %1411, align 1
  %1412 = load i64, i64* %375, align 8
  %1413 = lshr i64 %1412, 24
  %1414 = trunc i64 %1413 to i8
  %1415 = load i8*, i8** %377, align 8
  %1416 = load i64, i64* %376, align 8
  %1417 = add i64 %1416, 4
  %1418 = getelementptr inbounds i8, i8* %1415, i64 %1417
  store i8 %1414, i8* %1418, align 1
  %1419 = load i64, i64* %375, align 8
  %1420 = lshr i64 %1419, 16
  %1421 = trunc i64 %1420 to i8
  %1422 = load i8*, i8** %377, align 8
  %1423 = load i64, i64* %376, align 8
  %1424 = add i64 %1423, 5
  %1425 = getelementptr inbounds i8, i8* %1422, i64 %1424
  store i8 %1421, i8* %1425, align 1
  %1426 = load i64, i64* %376, align 8
  %1427 = add i64 %1426, 6
  store i64 %1427, i64* %376, align 8
  br label %1428

1428:                                             ; preds = %1389, %1384, %1374
  %1429 = load i64, i64* %375, align 8
  %1430 = shl i64 %1429, 48
  store i64 %1430, i64* %375, align 8
  %1431 = load i32, i32* %374, align 8
  %1432 = add nsw i32 %1431, 48
  store i32 %1432, i32* %374, align 8
  br label %1433

1433:                                             ; preds = %1428, %1273, %414, %399
  %1434 = phi i32 [ %400, %399 ], [ %415, %414 ], [ 0, %1273 ], [ 0, %1428 ]
  %1435 = add nsw i64 %390, 1
  %1436 = icmp slt i64 %390, %386
  br i1 %1436, label %389, label %387

1437:                                             ; preds = %387
  %1438 = load i32, i32* %372, align 8
  %1439 = icmp sgt i32 %1438, 0
  br i1 %1439, label %1440, label %1773

1440:                                             ; preds = %1437
  %1441 = tail call i32 @llvm.ctlz.i32(i32 %1438, i1 true) #10, !range !22
  %1442 = xor i32 %1441, 31
  %1443 = shl nuw nsw i32 %1442, 4
  %1444 = load %"struct.jxl::jpeg::HuffmanCodeTable"*, %"struct.jxl::jpeg::HuffmanCodeTable"** %373, align 8
  %1445 = zext i32 %1443 to i64
  %1446 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanCodeTable", %"struct.jxl::jpeg::HuffmanCodeTable"* %1444, i64 0, i32 0, i64 %1445
  %1447 = load i32, i32* %1446, align 4
  %1448 = icmp eq i32 %1447, 0
  br i1 %1448, label %1449, label %1450

1449:                                             ; preds = %1440
  store i8 0, i8* %378, align 8
  br label %1609

1450:                                             ; preds = %1440
  %1451 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanCodeTable", %"struct.jxl::jpeg::HuffmanCodeTable"* %1444, i64 0, i32 1, i64 %1445
  %1452 = load i32, i32* %1451, align 4
  %1453 = sext i32 %1452 to i64
  %1454 = load i32, i32* %374, align 8
  %1455 = sub nsw i32 %1454, %1447
  store i32 %1455, i32* %374, align 8
  %1456 = zext i32 %1455 to i64
  %1457 = shl i64 %1453, %1456
  %1458 = load i64, i64* %375, align 8
  %1459 = or i64 %1457, %1458
  store i64 %1459, i64* %375, align 8
  %1460 = icmp slt i32 %1455, 17
  br i1 %1460, label %1461, label %1609

1461:                                             ; preds = %1450
  %1462 = load i64, i64* %376, align 8
  %1463 = add i64 %1462, 12
  %1464 = icmp ugt i64 %1463, 16384
  br i1 %1464, label %1465, label %1468, !prof !23

1465:                                             ; preds = %1461
  tail call fastcc void @_ZN3jxl4jpeg12_GLOBAL__N_110SwapBufferEPNS0_13JpegBitWriterE(%"struct.jxl::jpeg::JpegBitWriter"* %9) #10
  %1466 = load i64, i64* %376, align 8
  %1467 = load i64, i64* %375, align 8
  br label %1468

1468:                                             ; preds = %1465, %1461
  %1469 = phi i64 [ %1459, %1461 ], [ %1467, %1465 ]
  %1470 = phi i64 [ %1462, %1461 ], [ %1466, %1465 ]
  %1471 = or i64 %1469, 65535
  %1472 = xor i64 %1471, -65536
  %1473 = add i64 %1472, -72340172838076673
  %1474 = and i64 %1472, -9187201950435770368
  %1475 = xor i64 %1474, -9187201950435770368
  %1476 = and i64 %1475, %1473
  %1477 = icmp eq i64 %1476, 0
  %1478 = lshr i64 %1469, 56
  %1479 = trunc i64 %1478 to i8
  %1480 = load i8*, i8** %377, align 8
  br i1 %1477, label %1565, label %1481

1481:                                             ; preds = %1468
  %1482 = add i64 %1470, 1
  store i64 %1482, i64* %376, align 8
  %1483 = getelementptr inbounds i8, i8* %1480, i64 %1470
  store i8 %1479, i8* %1483, align 1
  %1484 = icmp eq i64 %1478, 255
  br i1 %1484, label %1485, label %1490

1485:                                             ; preds = %1481
  %1486 = load i8*, i8** %377, align 8
  %1487 = load i64, i64* %376, align 8
  %1488 = add i64 %1487, 1
  store i64 %1488, i64* %376, align 8
  %1489 = getelementptr inbounds i8, i8* %1486, i64 %1487
  store i8 0, i8* %1489, align 1
  br label %1490

1490:                                             ; preds = %1485, %1481
  %1491 = load i64, i64* %375, align 8
  %1492 = lshr i64 %1491, 48
  %1493 = trunc i64 %1492 to i8
  %1494 = load i8*, i8** %377, align 8
  %1495 = load i64, i64* %376, align 8
  %1496 = add i64 %1495, 1
  store i64 %1496, i64* %376, align 8
  %1497 = getelementptr inbounds i8, i8* %1494, i64 %1495
  store i8 %1493, i8* %1497, align 1
  %1498 = and i64 %1491, 71776119061217280
  %1499 = icmp eq i64 %1498, 71776119061217280
  br i1 %1499, label %1500, label %1505

1500:                                             ; preds = %1490
  %1501 = load i8*, i8** %377, align 8
  %1502 = load i64, i64* %376, align 8
  %1503 = add i64 %1502, 1
  store i64 %1503, i64* %376, align 8
  %1504 = getelementptr inbounds i8, i8* %1501, i64 %1502
  store i8 0, i8* %1504, align 1
  br label %1505

1505:                                             ; preds = %1500, %1490
  %1506 = load i64, i64* %375, align 8
  %1507 = lshr i64 %1506, 40
  %1508 = trunc i64 %1507 to i8
  %1509 = load i8*, i8** %377, align 8
  %1510 = load i64, i64* %376, align 8
  %1511 = add i64 %1510, 1
  store i64 %1511, i64* %376, align 8
  %1512 = getelementptr inbounds i8, i8* %1509, i64 %1510
  store i8 %1508, i8* %1512, align 1
  %1513 = and i64 %1506, 280375465082880
  %1514 = icmp eq i64 %1513, 280375465082880
  br i1 %1514, label %1515, label %1520

1515:                                             ; preds = %1505
  %1516 = load i8*, i8** %377, align 8
  %1517 = load i64, i64* %376, align 8
  %1518 = add i64 %1517, 1
  store i64 %1518, i64* %376, align 8
  %1519 = getelementptr inbounds i8, i8* %1516, i64 %1517
  store i8 0, i8* %1519, align 1
  br label %1520

1520:                                             ; preds = %1515, %1505
  %1521 = load i64, i64* %375, align 8
  %1522 = lshr i64 %1521, 32
  %1523 = trunc i64 %1522 to i8
  %1524 = load i8*, i8** %377, align 8
  %1525 = load i64, i64* %376, align 8
  %1526 = add i64 %1525, 1
  store i64 %1526, i64* %376, align 8
  %1527 = getelementptr inbounds i8, i8* %1524, i64 %1525
  store i8 %1523, i8* %1527, align 1
  %1528 = and i64 %1521, 1095216660480
  %1529 = icmp eq i64 %1528, 1095216660480
  br i1 %1529, label %1530, label %1535

1530:                                             ; preds = %1520
  %1531 = load i8*, i8** %377, align 8
  %1532 = load i64, i64* %376, align 8
  %1533 = add i64 %1532, 1
  store i64 %1533, i64* %376, align 8
  %1534 = getelementptr inbounds i8, i8* %1531, i64 %1532
  store i8 0, i8* %1534, align 1
  br label %1535

1535:                                             ; preds = %1530, %1520
  %1536 = load i64, i64* %375, align 8
  %1537 = lshr i64 %1536, 24
  %1538 = trunc i64 %1537 to i8
  %1539 = load i8*, i8** %377, align 8
  %1540 = load i64, i64* %376, align 8
  %1541 = add i64 %1540, 1
  store i64 %1541, i64* %376, align 8
  %1542 = getelementptr inbounds i8, i8* %1539, i64 %1540
  store i8 %1538, i8* %1542, align 1
  %1543 = and i64 %1536, 4278190080
  %1544 = icmp eq i64 %1543, 4278190080
  br i1 %1544, label %1545, label %1550

1545:                                             ; preds = %1535
  %1546 = load i8*, i8** %377, align 8
  %1547 = load i64, i64* %376, align 8
  %1548 = add i64 %1547, 1
  store i64 %1548, i64* %376, align 8
  %1549 = getelementptr inbounds i8, i8* %1546, i64 %1547
  store i8 0, i8* %1549, align 1
  br label %1550

1550:                                             ; preds = %1545, %1535
  %1551 = load i64, i64* %375, align 8
  %1552 = lshr i64 %1551, 16
  %1553 = trunc i64 %1552 to i8
  %1554 = load i8*, i8** %377, align 8
  %1555 = load i64, i64* %376, align 8
  %1556 = add i64 %1555, 1
  store i64 %1556, i64* %376, align 8
  %1557 = getelementptr inbounds i8, i8* %1554, i64 %1555
  store i8 %1553, i8* %1557, align 1
  %1558 = and i64 %1551, 16711680
  %1559 = icmp eq i64 %1558, 16711680
  br i1 %1559, label %1560, label %1604

1560:                                             ; preds = %1550
  %1561 = load i8*, i8** %377, align 8
  %1562 = load i64, i64* %376, align 8
  %1563 = add i64 %1562, 1
  store i64 %1563, i64* %376, align 8
  %1564 = getelementptr inbounds i8, i8* %1561, i64 %1562
  store i8 0, i8* %1564, align 1
  br label %1604

1565:                                             ; preds = %1468
  %1566 = getelementptr inbounds i8, i8* %1480, i64 %1470
  store i8 %1479, i8* %1566, align 1
  %1567 = load i64, i64* %375, align 8
  %1568 = lshr i64 %1567, 48
  %1569 = trunc i64 %1568 to i8
  %1570 = load i8*, i8** %377, align 8
  %1571 = load i64, i64* %376, align 8
  %1572 = add i64 %1571, 1
  %1573 = getelementptr inbounds i8, i8* %1570, i64 %1572
  store i8 %1569, i8* %1573, align 1
  %1574 = load i64, i64* %375, align 8
  %1575 = lshr i64 %1574, 40
  %1576 = trunc i64 %1575 to i8
  %1577 = load i8*, i8** %377, align 8
  %1578 = load i64, i64* %376, align 8
  %1579 = add i64 %1578, 2
  %1580 = getelementptr inbounds i8, i8* %1577, i64 %1579
  store i8 %1576, i8* %1580, align 1
  %1581 = load i64, i64* %375, align 8
  %1582 = lshr i64 %1581, 32
  %1583 = trunc i64 %1582 to i8
  %1584 = load i8*, i8** %377, align 8
  %1585 = load i64, i64* %376, align 8
  %1586 = add i64 %1585, 3
  %1587 = getelementptr inbounds i8, i8* %1584, i64 %1586
  store i8 %1583, i8* %1587, align 1
  %1588 = load i64, i64* %375, align 8
  %1589 = lshr i64 %1588, 24
  %1590 = trunc i64 %1589 to i8
  %1591 = load i8*, i8** %377, align 8
  %1592 = load i64, i64* %376, align 8
  %1593 = add i64 %1592, 4
  %1594 = getelementptr inbounds i8, i8* %1591, i64 %1593
  store i8 %1590, i8* %1594, align 1
  %1595 = load i64, i64* %375, align 8
  %1596 = lshr i64 %1595, 16
  %1597 = trunc i64 %1596 to i8
  %1598 = load i8*, i8** %377, align 8
  %1599 = load i64, i64* %376, align 8
  %1600 = add i64 %1599, 5
  %1601 = getelementptr inbounds i8, i8* %1598, i64 %1600
  store i8 %1597, i8* %1601, align 1
  %1602 = load i64, i64* %376, align 8
  %1603 = add i64 %1602, 6
  store i64 %1603, i64* %376, align 8
  br label %1604

1604:                                             ; preds = %1565, %1560, %1550
  %1605 = load i64, i64* %375, align 8
  %1606 = shl i64 %1605, 48
  store i64 %1606, i64* %375, align 8
  %1607 = load i32, i32* %374, align 8
  %1608 = add nsw i32 %1607, 48
  store i32 %1608, i32* %374, align 8
  br label %1609

1609:                                             ; preds = %1604, %1450, %1449
  %1610 = icmp eq i32 %1442, 0
  br i1 %1610, label %1772, label %1611

1611:                                             ; preds = %1609
  %1612 = load i32, i32* %372, align 8
  %1613 = shl nsw i32 -1, %1442
  %1614 = xor i32 %1613, -1
  %1615 = and i32 %1612, %1614
  %1616 = sext i32 %1615 to i64
  %1617 = load i32, i32* %374, align 8
  %1618 = sub nsw i32 %1617, %1442
  store i32 %1618, i32* %374, align 8
  %1619 = zext i32 %1618 to i64
  %1620 = shl i64 %1616, %1619
  %1621 = load i64, i64* %375, align 8
  %1622 = or i64 %1620, %1621
  store i64 %1622, i64* %375, align 8
  %1623 = icmp slt i32 %1618, 17
  br i1 %1623, label %1624, label %1772

1624:                                             ; preds = %1611
  %1625 = load i64, i64* %376, align 8
  %1626 = add i64 %1625, 12
  %1627 = icmp ugt i64 %1626, 16384
  br i1 %1627, label %1628, label %1631, !prof !23

1628:                                             ; preds = %1624
  tail call fastcc void @_ZN3jxl4jpeg12_GLOBAL__N_110SwapBufferEPNS0_13JpegBitWriterE(%"struct.jxl::jpeg::JpegBitWriter"* %9) #10
  %1629 = load i64, i64* %376, align 8
  %1630 = load i64, i64* %375, align 8
  br label %1631

1631:                                             ; preds = %1628, %1624
  %1632 = phi i64 [ %1622, %1624 ], [ %1630, %1628 ]
  %1633 = phi i64 [ %1625, %1624 ], [ %1629, %1628 ]
  %1634 = or i64 %1632, 65535
  %1635 = xor i64 %1634, -65536
  %1636 = add i64 %1635, -72340172838076673
  %1637 = and i64 %1635, -9187201950435770368
  %1638 = xor i64 %1637, -9187201950435770368
  %1639 = and i64 %1638, %1636
  %1640 = icmp eq i64 %1639, 0
  %1641 = lshr i64 %1632, 56
  %1642 = trunc i64 %1641 to i8
  %1643 = load i8*, i8** %377, align 8
  br i1 %1640, label %1728, label %1644

1644:                                             ; preds = %1631
  %1645 = add i64 %1633, 1
  store i64 %1645, i64* %376, align 8
  %1646 = getelementptr inbounds i8, i8* %1643, i64 %1633
  store i8 %1642, i8* %1646, align 1
  %1647 = icmp eq i64 %1641, 255
  br i1 %1647, label %1648, label %1653

1648:                                             ; preds = %1644
  %1649 = load i8*, i8** %377, align 8
  %1650 = load i64, i64* %376, align 8
  %1651 = add i64 %1650, 1
  store i64 %1651, i64* %376, align 8
  %1652 = getelementptr inbounds i8, i8* %1649, i64 %1650
  store i8 0, i8* %1652, align 1
  br label %1653

1653:                                             ; preds = %1648, %1644
  %1654 = load i64, i64* %375, align 8
  %1655 = lshr i64 %1654, 48
  %1656 = trunc i64 %1655 to i8
  %1657 = load i8*, i8** %377, align 8
  %1658 = load i64, i64* %376, align 8
  %1659 = add i64 %1658, 1
  store i64 %1659, i64* %376, align 8
  %1660 = getelementptr inbounds i8, i8* %1657, i64 %1658
  store i8 %1656, i8* %1660, align 1
  %1661 = and i64 %1654, 71776119061217280
  %1662 = icmp eq i64 %1661, 71776119061217280
  br i1 %1662, label %1663, label %1668

1663:                                             ; preds = %1653
  %1664 = load i8*, i8** %377, align 8
  %1665 = load i64, i64* %376, align 8
  %1666 = add i64 %1665, 1
  store i64 %1666, i64* %376, align 8
  %1667 = getelementptr inbounds i8, i8* %1664, i64 %1665
  store i8 0, i8* %1667, align 1
  br label %1668

1668:                                             ; preds = %1663, %1653
  %1669 = load i64, i64* %375, align 8
  %1670 = lshr i64 %1669, 40
  %1671 = trunc i64 %1670 to i8
  %1672 = load i8*, i8** %377, align 8
  %1673 = load i64, i64* %376, align 8
  %1674 = add i64 %1673, 1
  store i64 %1674, i64* %376, align 8
  %1675 = getelementptr inbounds i8, i8* %1672, i64 %1673
  store i8 %1671, i8* %1675, align 1
  %1676 = and i64 %1669, 280375465082880
  %1677 = icmp eq i64 %1676, 280375465082880
  br i1 %1677, label %1678, label %1683

1678:                                             ; preds = %1668
  %1679 = load i8*, i8** %377, align 8
  %1680 = load i64, i64* %376, align 8
  %1681 = add i64 %1680, 1
  store i64 %1681, i64* %376, align 8
  %1682 = getelementptr inbounds i8, i8* %1679, i64 %1680
  store i8 0, i8* %1682, align 1
  br label %1683

1683:                                             ; preds = %1678, %1668
  %1684 = load i64, i64* %375, align 8
  %1685 = lshr i64 %1684, 32
  %1686 = trunc i64 %1685 to i8
  %1687 = load i8*, i8** %377, align 8
  %1688 = load i64, i64* %376, align 8
  %1689 = add i64 %1688, 1
  store i64 %1689, i64* %376, align 8
  %1690 = getelementptr inbounds i8, i8* %1687, i64 %1688
  store i8 %1686, i8* %1690, align 1
  %1691 = and i64 %1684, 1095216660480
  %1692 = icmp eq i64 %1691, 1095216660480
  br i1 %1692, label %1693, label %1698

1693:                                             ; preds = %1683
  %1694 = load i8*, i8** %377, align 8
  %1695 = load i64, i64* %376, align 8
  %1696 = add i64 %1695, 1
  store i64 %1696, i64* %376, align 8
  %1697 = getelementptr inbounds i8, i8* %1694, i64 %1695
  store i8 0, i8* %1697, align 1
  br label %1698

1698:                                             ; preds = %1693, %1683
  %1699 = load i64, i64* %375, align 8
  %1700 = lshr i64 %1699, 24
  %1701 = trunc i64 %1700 to i8
  %1702 = load i8*, i8** %377, align 8
  %1703 = load i64, i64* %376, align 8
  %1704 = add i64 %1703, 1
  store i64 %1704, i64* %376, align 8
  %1705 = getelementptr inbounds i8, i8* %1702, i64 %1703
  store i8 %1701, i8* %1705, align 1
  %1706 = and i64 %1699, 4278190080
  %1707 = icmp eq i64 %1706, 4278190080
  br i1 %1707, label %1708, label %1713

1708:                                             ; preds = %1698
  %1709 = load i8*, i8** %377, align 8
  %1710 = load i64, i64* %376, align 8
  %1711 = add i64 %1710, 1
  store i64 %1711, i64* %376, align 8
  %1712 = getelementptr inbounds i8, i8* %1709, i64 %1710
  store i8 0, i8* %1712, align 1
  br label %1713

1713:                                             ; preds = %1708, %1698
  %1714 = load i64, i64* %375, align 8
  %1715 = lshr i64 %1714, 16
  %1716 = trunc i64 %1715 to i8
  %1717 = load i8*, i8** %377, align 8
  %1718 = load i64, i64* %376, align 8
  %1719 = add i64 %1718, 1
  store i64 %1719, i64* %376, align 8
  %1720 = getelementptr inbounds i8, i8* %1717, i64 %1718
  store i8 %1716, i8* %1720, align 1
  %1721 = and i64 %1714, 16711680
  %1722 = icmp eq i64 %1721, 16711680
  br i1 %1722, label %1723, label %1767

1723:                                             ; preds = %1713
  %1724 = load i8*, i8** %377, align 8
  %1725 = load i64, i64* %376, align 8
  %1726 = add i64 %1725, 1
  store i64 %1726, i64* %376, align 8
  %1727 = getelementptr inbounds i8, i8* %1724, i64 %1725
  store i8 0, i8* %1727, align 1
  br label %1767

1728:                                             ; preds = %1631
  %1729 = getelementptr inbounds i8, i8* %1643, i64 %1633
  store i8 %1642, i8* %1729, align 1
  %1730 = load i64, i64* %375, align 8
  %1731 = lshr i64 %1730, 48
  %1732 = trunc i64 %1731 to i8
  %1733 = load i8*, i8** %377, align 8
  %1734 = load i64, i64* %376, align 8
  %1735 = add i64 %1734, 1
  %1736 = getelementptr inbounds i8, i8* %1733, i64 %1735
  store i8 %1732, i8* %1736, align 1
  %1737 = load i64, i64* %375, align 8
  %1738 = lshr i64 %1737, 40
  %1739 = trunc i64 %1738 to i8
  %1740 = load i8*, i8** %377, align 8
  %1741 = load i64, i64* %376, align 8
  %1742 = add i64 %1741, 2
  %1743 = getelementptr inbounds i8, i8* %1740, i64 %1742
  store i8 %1739, i8* %1743, align 1
  %1744 = load i64, i64* %375, align 8
  %1745 = lshr i64 %1744, 32
  %1746 = trunc i64 %1745 to i8
  %1747 = load i8*, i8** %377, align 8
  %1748 = load i64, i64* %376, align 8
  %1749 = add i64 %1748, 3
  %1750 = getelementptr inbounds i8, i8* %1747, i64 %1749
  store i8 %1746, i8* %1750, align 1
  %1751 = load i64, i64* %375, align 8
  %1752 = lshr i64 %1751, 24
  %1753 = trunc i64 %1752 to i8
  %1754 = load i8*, i8** %377, align 8
  %1755 = load i64, i64* %376, align 8
  %1756 = add i64 %1755, 4
  %1757 = getelementptr inbounds i8, i8* %1754, i64 %1756
  store i8 %1753, i8* %1757, align 1
  %1758 = load i64, i64* %375, align 8
  %1759 = lshr i64 %1758, 16
  %1760 = trunc i64 %1759 to i8
  %1761 = load i8*, i8** %377, align 8
  %1762 = load i64, i64* %376, align 8
  %1763 = add i64 %1762, 5
  %1764 = getelementptr inbounds i8, i8* %1761, i64 %1763
  store i8 %1760, i8* %1764, align 1
  %1765 = load i64, i64* %376, align 8
  %1766 = add i64 %1765, 6
  store i64 %1766, i64* %376, align 8
  br label %1767

1767:                                             ; preds = %1728, %1723, %1713
  %1768 = load i64, i64* %375, align 8
  %1769 = shl i64 %1768, 48
  store i64 %1769, i64* %375, align 8
  %1770 = load i32, i32* %374, align 8
  %1771 = add nsw i32 %1770, 48
  store i32 %1771, i32* %374, align 8
  br label %1772

1772:                                             ; preds = %1767, %1611, %1609
  store i32 0, i32* %372, align 8
  br label %1773

1773:                                             ; preds = %1772, %1437
  %1774 = load i64, i64* %381, align 8
  %1775 = load i64, i64* %382, align 8
  %1776 = icmp eq i64 %1774, %1775
  br i1 %1776, label %1951, label %1777

1777:                                             ; preds = %1773
  %1778 = load i32, i32* %374, align 8
  %1779 = load i64, i64* %375, align 8
  br label %1780

1780:                                             ; preds = %1942, %1777
  %1781 = phi i64 [ %1779, %1777 ], [ %1943, %1942 ]
  %1782 = phi i32 [ %1778, %1777 ], [ %1944, %1942 ]
  %1783 = phi i64 [ %1775, %1777 ], [ %1947, %1942 ]
  %1784 = phi i64 [ 0, %1777 ], [ %1945, %1942 ]
  %1785 = inttoptr i64 %1783 to i32*
  %1786 = getelementptr inbounds i32, i32* %1785, i64 %1784
  %1787 = load i32, i32* %1786, align 4
  %1788 = sext i32 %1787 to i64
  %1789 = add nsw i32 %1782, -1
  store i32 %1789, i32* %374, align 8
  %1790 = zext i32 %1789 to i64
  %1791 = shl i64 %1788, %1790
  %1792 = or i64 %1791, %1781
  store i64 %1792, i64* %375, align 8
  %1793 = icmp slt i32 %1782, 18
  br i1 %1793, label %1794, label %1942

1794:                                             ; preds = %1780
  %1795 = load i64, i64* %376, align 8
  %1796 = add i64 %1795, 12
  %1797 = icmp ugt i64 %1796, 16384
  br i1 %1797, label %1798, label %1801, !prof !23

1798:                                             ; preds = %1794
  tail call fastcc void @_ZN3jxl4jpeg12_GLOBAL__N_110SwapBufferEPNS0_13JpegBitWriterE(%"struct.jxl::jpeg::JpegBitWriter"* %9) #10
  %1799 = load i64, i64* %376, align 8
  %1800 = load i64, i64* %375, align 8
  br label %1801

1801:                                             ; preds = %1798, %1794
  %1802 = phi i64 [ %1792, %1794 ], [ %1800, %1798 ]
  %1803 = phi i64 [ %1795, %1794 ], [ %1799, %1798 ]
  %1804 = or i64 %1802, 65535
  %1805 = xor i64 %1804, -65536
  %1806 = add i64 %1805, -72340172838076673
  %1807 = and i64 %1805, -9187201950435770368
  %1808 = xor i64 %1807, -9187201950435770368
  %1809 = and i64 %1808, %1806
  %1810 = icmp eq i64 %1809, 0
  %1811 = lshr i64 %1802, 56
  %1812 = trunc i64 %1811 to i8
  %1813 = load i8*, i8** %377, align 8
  br i1 %1810, label %1898, label %1814

1814:                                             ; preds = %1801
  %1815 = add i64 %1803, 1
  store i64 %1815, i64* %376, align 8
  %1816 = getelementptr inbounds i8, i8* %1813, i64 %1803
  store i8 %1812, i8* %1816, align 1
  %1817 = icmp eq i64 %1811, 255
  br i1 %1817, label %1818, label %1823

1818:                                             ; preds = %1814
  %1819 = load i8*, i8** %377, align 8
  %1820 = load i64, i64* %376, align 8
  %1821 = add i64 %1820, 1
  store i64 %1821, i64* %376, align 8
  %1822 = getelementptr inbounds i8, i8* %1819, i64 %1820
  store i8 0, i8* %1822, align 1
  br label %1823

1823:                                             ; preds = %1818, %1814
  %1824 = load i64, i64* %375, align 8
  %1825 = lshr i64 %1824, 48
  %1826 = trunc i64 %1825 to i8
  %1827 = load i8*, i8** %377, align 8
  %1828 = load i64, i64* %376, align 8
  %1829 = add i64 %1828, 1
  store i64 %1829, i64* %376, align 8
  %1830 = getelementptr inbounds i8, i8* %1827, i64 %1828
  store i8 %1826, i8* %1830, align 1
  %1831 = and i64 %1824, 71776119061217280
  %1832 = icmp eq i64 %1831, 71776119061217280
  br i1 %1832, label %1833, label %1838

1833:                                             ; preds = %1823
  %1834 = load i8*, i8** %377, align 8
  %1835 = load i64, i64* %376, align 8
  %1836 = add i64 %1835, 1
  store i64 %1836, i64* %376, align 8
  %1837 = getelementptr inbounds i8, i8* %1834, i64 %1835
  store i8 0, i8* %1837, align 1
  br label %1838

1838:                                             ; preds = %1833, %1823
  %1839 = load i64, i64* %375, align 8
  %1840 = lshr i64 %1839, 40
  %1841 = trunc i64 %1840 to i8
  %1842 = load i8*, i8** %377, align 8
  %1843 = load i64, i64* %376, align 8
  %1844 = add i64 %1843, 1
  store i64 %1844, i64* %376, align 8
  %1845 = getelementptr inbounds i8, i8* %1842, i64 %1843
  store i8 %1841, i8* %1845, align 1
  %1846 = and i64 %1839, 280375465082880
  %1847 = icmp eq i64 %1846, 280375465082880
  br i1 %1847, label %1848, label %1853

1848:                                             ; preds = %1838
  %1849 = load i8*, i8** %377, align 8
  %1850 = load i64, i64* %376, align 8
  %1851 = add i64 %1850, 1
  store i64 %1851, i64* %376, align 8
  %1852 = getelementptr inbounds i8, i8* %1849, i64 %1850
  store i8 0, i8* %1852, align 1
  br label %1853

1853:                                             ; preds = %1848, %1838
  %1854 = load i64, i64* %375, align 8
  %1855 = lshr i64 %1854, 32
  %1856 = trunc i64 %1855 to i8
  %1857 = load i8*, i8** %377, align 8
  %1858 = load i64, i64* %376, align 8
  %1859 = add i64 %1858, 1
  store i64 %1859, i64* %376, align 8
  %1860 = getelementptr inbounds i8, i8* %1857, i64 %1858
  store i8 %1856, i8* %1860, align 1
  %1861 = and i64 %1854, 1095216660480
  %1862 = icmp eq i64 %1861, 1095216660480
  br i1 %1862, label %1863, label %1868

1863:                                             ; preds = %1853
  %1864 = load i8*, i8** %377, align 8
  %1865 = load i64, i64* %376, align 8
  %1866 = add i64 %1865, 1
  store i64 %1866, i64* %376, align 8
  %1867 = getelementptr inbounds i8, i8* %1864, i64 %1865
  store i8 0, i8* %1867, align 1
  br label %1868

1868:                                             ; preds = %1863, %1853
  %1869 = load i64, i64* %375, align 8
  %1870 = lshr i64 %1869, 24
  %1871 = trunc i64 %1870 to i8
  %1872 = load i8*, i8** %377, align 8
  %1873 = load i64, i64* %376, align 8
  %1874 = add i64 %1873, 1
  store i64 %1874, i64* %376, align 8
  %1875 = getelementptr inbounds i8, i8* %1872, i64 %1873
  store i8 %1871, i8* %1875, align 1
  %1876 = and i64 %1869, 4278190080
  %1877 = icmp eq i64 %1876, 4278190080
  br i1 %1877, label %1878, label %1883

1878:                                             ; preds = %1868
  %1879 = load i8*, i8** %377, align 8
  %1880 = load i64, i64* %376, align 8
  %1881 = add i64 %1880, 1
  store i64 %1881, i64* %376, align 8
  %1882 = getelementptr inbounds i8, i8* %1879, i64 %1880
  store i8 0, i8* %1882, align 1
  br label %1883

1883:                                             ; preds = %1878, %1868
  %1884 = load i64, i64* %375, align 8
  %1885 = lshr i64 %1884, 16
  %1886 = trunc i64 %1885 to i8
  %1887 = load i8*, i8** %377, align 8
  %1888 = load i64, i64* %376, align 8
  %1889 = add i64 %1888, 1
  store i64 %1889, i64* %376, align 8
  %1890 = getelementptr inbounds i8, i8* %1887, i64 %1888
  store i8 %1886, i8* %1890, align 1
  %1891 = and i64 %1884, 16711680
  %1892 = icmp eq i64 %1891, 16711680
  br i1 %1892, label %1893, label %1937

1893:                                             ; preds = %1883
  %1894 = load i8*, i8** %377, align 8
  %1895 = load i64, i64* %376, align 8
  %1896 = add i64 %1895, 1
  store i64 %1896, i64* %376, align 8
  %1897 = getelementptr inbounds i8, i8* %1894, i64 %1895
  store i8 0, i8* %1897, align 1
  br label %1937

1898:                                             ; preds = %1801
  %1899 = getelementptr inbounds i8, i8* %1813, i64 %1803
  store i8 %1812, i8* %1899, align 1
  %1900 = load i64, i64* %375, align 8
  %1901 = lshr i64 %1900, 48
  %1902 = trunc i64 %1901 to i8
  %1903 = load i8*, i8** %377, align 8
  %1904 = load i64, i64* %376, align 8
  %1905 = add i64 %1904, 1
  %1906 = getelementptr inbounds i8, i8* %1903, i64 %1905
  store i8 %1902, i8* %1906, align 1
  %1907 = load i64, i64* %375, align 8
  %1908 = lshr i64 %1907, 40
  %1909 = trunc i64 %1908 to i8
  %1910 = load i8*, i8** %377, align 8
  %1911 = load i64, i64* %376, align 8
  %1912 = add i64 %1911, 2
  %1913 = getelementptr inbounds i8, i8* %1910, i64 %1912
  store i8 %1909, i8* %1913, align 1
  %1914 = load i64, i64* %375, align 8
  %1915 = lshr i64 %1914, 32
  %1916 = trunc i64 %1915 to i8
  %1917 = load i8*, i8** %377, align 8
  %1918 = load i64, i64* %376, align 8
  %1919 = add i64 %1918, 3
  %1920 = getelementptr inbounds i8, i8* %1917, i64 %1919
  store i8 %1916, i8* %1920, align 1
  %1921 = load i64, i64* %375, align 8
  %1922 = lshr i64 %1921, 24
  %1923 = trunc i64 %1922 to i8
  %1924 = load i8*, i8** %377, align 8
  %1925 = load i64, i64* %376, align 8
  %1926 = add i64 %1925, 4
  %1927 = getelementptr inbounds i8, i8* %1924, i64 %1926
  store i8 %1923, i8* %1927, align 1
  %1928 = load i64, i64* %375, align 8
  %1929 = lshr i64 %1928, 16
  %1930 = trunc i64 %1929 to i8
  %1931 = load i8*, i8** %377, align 8
  %1932 = load i64, i64* %376, align 8
  %1933 = add i64 %1932, 5
  %1934 = getelementptr inbounds i8, i8* %1931, i64 %1933
  store i8 %1930, i8* %1934, align 1
  %1935 = load i64, i64* %376, align 8
  %1936 = add i64 %1935, 6
  store i64 %1936, i64* %376, align 8
  br label %1937

1937:                                             ; preds = %1898, %1893, %1883
  %1938 = load i64, i64* %375, align 8
  %1939 = shl i64 %1938, 48
  store i64 %1939, i64* %375, align 8
  %1940 = load i32, i32* %374, align 8
  %1941 = add nsw i32 %1940, 48
  store i32 %1941, i32* %374, align 8
  br label %1942

1942:                                             ; preds = %1937, %1780
  %1943 = phi i64 [ %1792, %1780 ], [ %1939, %1937 ]
  %1944 = phi i32 [ %1789, %1780 ], [ %1941, %1937 ]
  %1945 = add nuw i64 %1784, 1
  %1946 = load i64, i64* %381, align 8
  %1947 = load i64, i64* %382, align 8
  %1948 = sub i64 %1946, %1947
  %1949 = ashr exact i64 %1948, 2
  %1950 = icmp ult i64 %1945, %1949
  br i1 %1950, label %1780, label %1951

1951:                                             ; preds = %1942, %1773
  %1952 = phi i64 [ %1774, %1773 ], [ %1947, %1942 ]
  store i64 %1952, i64* %381, align 8
  %1953 = shl i32 %6, 4
  br label %1954

1954:                                             ; preds = %2117, %1951
  %1955 = phi i32 [ 0, %1951 ], [ %2118, %2117 ]
  %1956 = load i32, i32* %383, align 4
  %1957 = icmp eq i32 %1956, 0
  br i1 %1957, label %1958, label %1959

1958:                                             ; preds = %1954
  store i8 0, i8* %378, align 8
  br label %2117

1959:                                             ; preds = %1954
  %1960 = load i32, i32* %384, align 4
  %1961 = sext i32 %1960 to i64
  %1962 = load i32, i32* %374, align 8
  %1963 = sub nsw i32 %1962, %1956
  store i32 %1963, i32* %374, align 8
  %1964 = zext i32 %1963 to i64
  %1965 = shl i64 %1961, %1964
  %1966 = load i64, i64* %375, align 8
  %1967 = or i64 %1965, %1966
  store i64 %1967, i64* %375, align 8
  %1968 = icmp slt i32 %1963, 17
  br i1 %1968, label %1969, label %2117

1969:                                             ; preds = %1959
  %1970 = load i64, i64* %376, align 8
  %1971 = add i64 %1970, 12
  %1972 = icmp ugt i64 %1971, 16384
  br i1 %1972, label %1973, label %1976, !prof !23

1973:                                             ; preds = %1969
  tail call fastcc void @_ZN3jxl4jpeg12_GLOBAL__N_110SwapBufferEPNS0_13JpegBitWriterE(%"struct.jxl::jpeg::JpegBitWriter"* %9) #10
  %1974 = load i64, i64* %376, align 8
  %1975 = load i64, i64* %375, align 8
  br label %1976

1976:                                             ; preds = %1973, %1969
  %1977 = phi i64 [ %1967, %1969 ], [ %1975, %1973 ]
  %1978 = phi i64 [ %1970, %1969 ], [ %1974, %1973 ]
  %1979 = or i64 %1977, 65535
  %1980 = xor i64 %1979, -65536
  %1981 = add i64 %1980, -72340172838076673
  %1982 = and i64 %1980, -9187201950435770368
  %1983 = xor i64 %1982, -9187201950435770368
  %1984 = and i64 %1983, %1981
  %1985 = icmp eq i64 %1984, 0
  %1986 = lshr i64 %1977, 56
  %1987 = trunc i64 %1986 to i8
  %1988 = load i8*, i8** %377, align 8
  br i1 %1985, label %2073, label %1989

1989:                                             ; preds = %1976
  %1990 = add i64 %1978, 1
  store i64 %1990, i64* %376, align 8
  %1991 = getelementptr inbounds i8, i8* %1988, i64 %1978
  store i8 %1987, i8* %1991, align 1
  %1992 = icmp eq i64 %1986, 255
  br i1 %1992, label %1993, label %1998

1993:                                             ; preds = %1989
  %1994 = load i8*, i8** %377, align 8
  %1995 = load i64, i64* %376, align 8
  %1996 = add i64 %1995, 1
  store i64 %1996, i64* %376, align 8
  %1997 = getelementptr inbounds i8, i8* %1994, i64 %1995
  store i8 0, i8* %1997, align 1
  br label %1998

1998:                                             ; preds = %1993, %1989
  %1999 = load i64, i64* %375, align 8
  %2000 = lshr i64 %1999, 48
  %2001 = trunc i64 %2000 to i8
  %2002 = load i8*, i8** %377, align 8
  %2003 = load i64, i64* %376, align 8
  %2004 = add i64 %2003, 1
  store i64 %2004, i64* %376, align 8
  %2005 = getelementptr inbounds i8, i8* %2002, i64 %2003
  store i8 %2001, i8* %2005, align 1
  %2006 = and i64 %1999, 71776119061217280
  %2007 = icmp eq i64 %2006, 71776119061217280
  br i1 %2007, label %2008, label %2013

2008:                                             ; preds = %1998
  %2009 = load i8*, i8** %377, align 8
  %2010 = load i64, i64* %376, align 8
  %2011 = add i64 %2010, 1
  store i64 %2011, i64* %376, align 8
  %2012 = getelementptr inbounds i8, i8* %2009, i64 %2010
  store i8 0, i8* %2012, align 1
  br label %2013

2013:                                             ; preds = %2008, %1998
  %2014 = load i64, i64* %375, align 8
  %2015 = lshr i64 %2014, 40
  %2016 = trunc i64 %2015 to i8
  %2017 = load i8*, i8** %377, align 8
  %2018 = load i64, i64* %376, align 8
  %2019 = add i64 %2018, 1
  store i64 %2019, i64* %376, align 8
  %2020 = getelementptr inbounds i8, i8* %2017, i64 %2018
  store i8 %2016, i8* %2020, align 1
  %2021 = and i64 %2014, 280375465082880
  %2022 = icmp eq i64 %2021, 280375465082880
  br i1 %2022, label %2023, label %2028

2023:                                             ; preds = %2013
  %2024 = load i8*, i8** %377, align 8
  %2025 = load i64, i64* %376, align 8
  %2026 = add i64 %2025, 1
  store i64 %2026, i64* %376, align 8
  %2027 = getelementptr inbounds i8, i8* %2024, i64 %2025
  store i8 0, i8* %2027, align 1
  br label %2028

2028:                                             ; preds = %2023, %2013
  %2029 = load i64, i64* %375, align 8
  %2030 = lshr i64 %2029, 32
  %2031 = trunc i64 %2030 to i8
  %2032 = load i8*, i8** %377, align 8
  %2033 = load i64, i64* %376, align 8
  %2034 = add i64 %2033, 1
  store i64 %2034, i64* %376, align 8
  %2035 = getelementptr inbounds i8, i8* %2032, i64 %2033
  store i8 %2031, i8* %2035, align 1
  %2036 = and i64 %2029, 1095216660480
  %2037 = icmp eq i64 %2036, 1095216660480
  br i1 %2037, label %2038, label %2043

2038:                                             ; preds = %2028
  %2039 = load i8*, i8** %377, align 8
  %2040 = load i64, i64* %376, align 8
  %2041 = add i64 %2040, 1
  store i64 %2041, i64* %376, align 8
  %2042 = getelementptr inbounds i8, i8* %2039, i64 %2040
  store i8 0, i8* %2042, align 1
  br label %2043

2043:                                             ; preds = %2038, %2028
  %2044 = load i64, i64* %375, align 8
  %2045 = lshr i64 %2044, 24
  %2046 = trunc i64 %2045 to i8
  %2047 = load i8*, i8** %377, align 8
  %2048 = load i64, i64* %376, align 8
  %2049 = add i64 %2048, 1
  store i64 %2049, i64* %376, align 8
  %2050 = getelementptr inbounds i8, i8* %2047, i64 %2048
  store i8 %2046, i8* %2050, align 1
  %2051 = and i64 %2044, 4278190080
  %2052 = icmp eq i64 %2051, 4278190080
  br i1 %2052, label %2053, label %2058

2053:                                             ; preds = %2043
  %2054 = load i8*, i8** %377, align 8
  %2055 = load i64, i64* %376, align 8
  %2056 = add i64 %2055, 1
  store i64 %2056, i64* %376, align 8
  %2057 = getelementptr inbounds i8, i8* %2054, i64 %2055
  store i8 0, i8* %2057, align 1
  br label %2058

2058:                                             ; preds = %2053, %2043
  %2059 = load i64, i64* %375, align 8
  %2060 = lshr i64 %2059, 16
  %2061 = trunc i64 %2060 to i8
  %2062 = load i8*, i8** %377, align 8
  %2063 = load i64, i64* %376, align 8
  %2064 = add i64 %2063, 1
  store i64 %2064, i64* %376, align 8
  %2065 = getelementptr inbounds i8, i8* %2062, i64 %2063
  store i8 %2061, i8* %2065, align 1
  %2066 = and i64 %2059, 16711680
  %2067 = icmp eq i64 %2066, 16711680
  br i1 %2067, label %2068, label %2112

2068:                                             ; preds = %2058
  %2069 = load i8*, i8** %377, align 8
  %2070 = load i64, i64* %376, align 8
  %2071 = add i64 %2070, 1
  store i64 %2071, i64* %376, align 8
  %2072 = getelementptr inbounds i8, i8* %2069, i64 %2070
  store i8 0, i8* %2072, align 1
  br label %2112

2073:                                             ; preds = %1976
  %2074 = getelementptr inbounds i8, i8* %1988, i64 %1978
  store i8 %1987, i8* %2074, align 1
  %2075 = load i64, i64* %375, align 8
  %2076 = lshr i64 %2075, 48
  %2077 = trunc i64 %2076 to i8
  %2078 = load i8*, i8** %377, align 8
  %2079 = load i64, i64* %376, align 8
  %2080 = add i64 %2079, 1
  %2081 = getelementptr inbounds i8, i8* %2078, i64 %2080
  store i8 %2077, i8* %2081, align 1
  %2082 = load i64, i64* %375, align 8
  %2083 = lshr i64 %2082, 40
  %2084 = trunc i64 %2083 to i8
  %2085 = load i8*, i8** %377, align 8
  %2086 = load i64, i64* %376, align 8
  %2087 = add i64 %2086, 2
  %2088 = getelementptr inbounds i8, i8* %2085, i64 %2087
  store i8 %2084, i8* %2088, align 1
  %2089 = load i64, i64* %375, align 8
  %2090 = lshr i64 %2089, 32
  %2091 = trunc i64 %2090 to i8
  %2092 = load i8*, i8** %377, align 8
  %2093 = load i64, i64* %376, align 8
  %2094 = add i64 %2093, 3
  %2095 = getelementptr inbounds i8, i8* %2092, i64 %2094
  store i8 %2091, i8* %2095, align 1
  %2096 = load i64, i64* %375, align 8
  %2097 = lshr i64 %2096, 24
  %2098 = trunc i64 %2097 to i8
  %2099 = load i8*, i8** %377, align 8
  %2100 = load i64, i64* %376, align 8
  %2101 = add i64 %2100, 4
  %2102 = getelementptr inbounds i8, i8* %2099, i64 %2101
  store i8 %2098, i8* %2102, align 1
  %2103 = load i64, i64* %375, align 8
  %2104 = lshr i64 %2103, 16
  %2105 = trunc i64 %2104 to i8
  %2106 = load i8*, i8** %377, align 8
  %2107 = load i64, i64* %376, align 8
  %2108 = add i64 %2107, 5
  %2109 = getelementptr inbounds i8, i8* %2106, i64 %2108
  store i8 %2105, i8* %2109, align 1
  %2110 = load i64, i64* %376, align 8
  %2111 = add i64 %2110, 6
  store i64 %2111, i64* %376, align 8
  br label %2112

2112:                                             ; preds = %2073, %2068, %2058
  %2113 = load i64, i64* %375, align 8
  %2114 = shl i64 %2113, 48
  store i64 %2114, i64* %375, align 8
  %2115 = load i32, i32* %374, align 8
  %2116 = add nsw i32 %2115, 48
  store i32 %2116, i32* %374, align 8
  br label %2117

2117:                                             ; preds = %1958, %1959, %2112
  %2118 = add nuw nsw i32 %1955, 1
  %2119 = icmp eq i32 %2118, %6
  br i1 %2119, label %2120, label %1954

2120:                                             ; preds = %2117
  %2121 = sub i32 %1434, %1953
  br label %2122

2122:                                             ; preds = %2120, %387
  %2123 = phi i32 [ %1434, %387 ], [ %2121, %2120 ]
  %2124 = icmp sgt i32 %2123, 0
  br i1 %2124, label %2125, label %3178

2125:                                             ; preds = %2122
  %2126 = load i32, i32* %372, align 8
  %2127 = icmp eq i32 %2126, 0
  br i1 %2127, label %2128, label %2129

2128:                                             ; preds = %2125
  store %"struct.jxl::jpeg::HuffmanCodeTable"* %2, %"struct.jxl::jpeg::HuffmanCodeTable"** %373, align 8
  store i32 1, i32* %372, align 8
  br label %2132

2129:                                             ; preds = %2125
  %2130 = add nsw i32 %2126, 1
  store i32 %2130, i32* %372, align 8
  %2131 = icmp eq i32 %2130, 32767
  br i1 %2131, label %2141, label %2132

2132:                                             ; preds = %2128, %2129
  %2133 = phi i32 [ 1, %2128 ], [ %2130, %2129 ]
  %2134 = load i64, i64* %381, align 8
  %2135 = load i64, i64* %382, align 8
  %2136 = sub i64 %2134, %2135
  %2137 = ashr exact i64 %2136, 2
  %2138 = icmp ugt i64 %2137, 65473
  br i1 %2138, label %2139, label %2657

2139:                                             ; preds = %2132
  %2140 = icmp sgt i32 %2133, 0
  br i1 %2140, label %2141, label %2477

2141:                                             ; preds = %2139, %2129
  %2142 = phi i32 [ %2133, %2139 ], [ 32767, %2129 ]
  %2143 = tail call i32 @llvm.ctlz.i32(i32 %2142, i1 true) #10, !range !22
  %2144 = xor i32 %2143, 31
  %2145 = shl nuw nsw i32 %2144, 4
  %2146 = load %"struct.jxl::jpeg::HuffmanCodeTable"*, %"struct.jxl::jpeg::HuffmanCodeTable"** %373, align 8
  %2147 = zext i32 %2145 to i64
  %2148 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanCodeTable", %"struct.jxl::jpeg::HuffmanCodeTable"* %2146, i64 0, i32 0, i64 %2147
  %2149 = load i32, i32* %2148, align 4
  %2150 = icmp eq i32 %2149, 0
  br i1 %2150, label %2151, label %2152

2151:                                             ; preds = %2141
  store i8 0, i8* %378, align 8
  br label %2311

2152:                                             ; preds = %2141
  %2153 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanCodeTable", %"struct.jxl::jpeg::HuffmanCodeTable"* %2146, i64 0, i32 1, i64 %2147
  %2154 = load i32, i32* %2153, align 4
  %2155 = sext i32 %2154 to i64
  %2156 = load i32, i32* %374, align 8
  %2157 = sub nsw i32 %2156, %2149
  store i32 %2157, i32* %374, align 8
  %2158 = zext i32 %2157 to i64
  %2159 = shl i64 %2155, %2158
  %2160 = load i64, i64* %375, align 8
  %2161 = or i64 %2159, %2160
  store i64 %2161, i64* %375, align 8
  %2162 = icmp slt i32 %2157, 17
  br i1 %2162, label %2163, label %2311

2163:                                             ; preds = %2152
  %2164 = load i64, i64* %376, align 8
  %2165 = add i64 %2164, 12
  %2166 = icmp ugt i64 %2165, 16384
  br i1 %2166, label %2167, label %2170, !prof !23

2167:                                             ; preds = %2163
  tail call fastcc void @_ZN3jxl4jpeg12_GLOBAL__N_110SwapBufferEPNS0_13JpegBitWriterE(%"struct.jxl::jpeg::JpegBitWriter"* %9) #10
  %2168 = load i64, i64* %376, align 8
  %2169 = load i64, i64* %375, align 8
  br label %2170

2170:                                             ; preds = %2167, %2163
  %2171 = phi i64 [ %2161, %2163 ], [ %2169, %2167 ]
  %2172 = phi i64 [ %2164, %2163 ], [ %2168, %2167 ]
  %2173 = or i64 %2171, 65535
  %2174 = xor i64 %2173, -65536
  %2175 = add i64 %2174, -72340172838076673
  %2176 = and i64 %2174, -9187201950435770368
  %2177 = xor i64 %2176, -9187201950435770368
  %2178 = and i64 %2177, %2175
  %2179 = icmp eq i64 %2178, 0
  %2180 = lshr i64 %2171, 56
  %2181 = trunc i64 %2180 to i8
  %2182 = load i8*, i8** %377, align 8
  br i1 %2179, label %2267, label %2183

2183:                                             ; preds = %2170
  %2184 = add i64 %2172, 1
  store i64 %2184, i64* %376, align 8
  %2185 = getelementptr inbounds i8, i8* %2182, i64 %2172
  store i8 %2181, i8* %2185, align 1
  %2186 = icmp eq i64 %2180, 255
  br i1 %2186, label %2187, label %2192

2187:                                             ; preds = %2183
  %2188 = load i8*, i8** %377, align 8
  %2189 = load i64, i64* %376, align 8
  %2190 = add i64 %2189, 1
  store i64 %2190, i64* %376, align 8
  %2191 = getelementptr inbounds i8, i8* %2188, i64 %2189
  store i8 0, i8* %2191, align 1
  br label %2192

2192:                                             ; preds = %2187, %2183
  %2193 = load i64, i64* %375, align 8
  %2194 = lshr i64 %2193, 48
  %2195 = trunc i64 %2194 to i8
  %2196 = load i8*, i8** %377, align 8
  %2197 = load i64, i64* %376, align 8
  %2198 = add i64 %2197, 1
  store i64 %2198, i64* %376, align 8
  %2199 = getelementptr inbounds i8, i8* %2196, i64 %2197
  store i8 %2195, i8* %2199, align 1
  %2200 = and i64 %2193, 71776119061217280
  %2201 = icmp eq i64 %2200, 71776119061217280
  br i1 %2201, label %2202, label %2207

2202:                                             ; preds = %2192
  %2203 = load i8*, i8** %377, align 8
  %2204 = load i64, i64* %376, align 8
  %2205 = add i64 %2204, 1
  store i64 %2205, i64* %376, align 8
  %2206 = getelementptr inbounds i8, i8* %2203, i64 %2204
  store i8 0, i8* %2206, align 1
  br label %2207

2207:                                             ; preds = %2202, %2192
  %2208 = load i64, i64* %375, align 8
  %2209 = lshr i64 %2208, 40
  %2210 = trunc i64 %2209 to i8
  %2211 = load i8*, i8** %377, align 8
  %2212 = load i64, i64* %376, align 8
  %2213 = add i64 %2212, 1
  store i64 %2213, i64* %376, align 8
  %2214 = getelementptr inbounds i8, i8* %2211, i64 %2212
  store i8 %2210, i8* %2214, align 1
  %2215 = and i64 %2208, 280375465082880
  %2216 = icmp eq i64 %2215, 280375465082880
  br i1 %2216, label %2217, label %2222

2217:                                             ; preds = %2207
  %2218 = load i8*, i8** %377, align 8
  %2219 = load i64, i64* %376, align 8
  %2220 = add i64 %2219, 1
  store i64 %2220, i64* %376, align 8
  %2221 = getelementptr inbounds i8, i8* %2218, i64 %2219
  store i8 0, i8* %2221, align 1
  br label %2222

2222:                                             ; preds = %2217, %2207
  %2223 = load i64, i64* %375, align 8
  %2224 = lshr i64 %2223, 32
  %2225 = trunc i64 %2224 to i8
  %2226 = load i8*, i8** %377, align 8
  %2227 = load i64, i64* %376, align 8
  %2228 = add i64 %2227, 1
  store i64 %2228, i64* %376, align 8
  %2229 = getelementptr inbounds i8, i8* %2226, i64 %2227
  store i8 %2225, i8* %2229, align 1
  %2230 = and i64 %2223, 1095216660480
  %2231 = icmp eq i64 %2230, 1095216660480
  br i1 %2231, label %2232, label %2237

2232:                                             ; preds = %2222
  %2233 = load i8*, i8** %377, align 8
  %2234 = load i64, i64* %376, align 8
  %2235 = add i64 %2234, 1
  store i64 %2235, i64* %376, align 8
  %2236 = getelementptr inbounds i8, i8* %2233, i64 %2234
  store i8 0, i8* %2236, align 1
  br label %2237

2237:                                             ; preds = %2232, %2222
  %2238 = load i64, i64* %375, align 8
  %2239 = lshr i64 %2238, 24
  %2240 = trunc i64 %2239 to i8
  %2241 = load i8*, i8** %377, align 8
  %2242 = load i64, i64* %376, align 8
  %2243 = add i64 %2242, 1
  store i64 %2243, i64* %376, align 8
  %2244 = getelementptr inbounds i8, i8* %2241, i64 %2242
  store i8 %2240, i8* %2244, align 1
  %2245 = and i64 %2238, 4278190080
  %2246 = icmp eq i64 %2245, 4278190080
  br i1 %2246, label %2247, label %2252

2247:                                             ; preds = %2237
  %2248 = load i8*, i8** %377, align 8
  %2249 = load i64, i64* %376, align 8
  %2250 = add i64 %2249, 1
  store i64 %2250, i64* %376, align 8
  %2251 = getelementptr inbounds i8, i8* %2248, i64 %2249
  store i8 0, i8* %2251, align 1
  br label %2252

2252:                                             ; preds = %2247, %2237
  %2253 = load i64, i64* %375, align 8
  %2254 = lshr i64 %2253, 16
  %2255 = trunc i64 %2254 to i8
  %2256 = load i8*, i8** %377, align 8
  %2257 = load i64, i64* %376, align 8
  %2258 = add i64 %2257, 1
  store i64 %2258, i64* %376, align 8
  %2259 = getelementptr inbounds i8, i8* %2256, i64 %2257
  store i8 %2255, i8* %2259, align 1
  %2260 = and i64 %2253, 16711680
  %2261 = icmp eq i64 %2260, 16711680
  br i1 %2261, label %2262, label %2306

2262:                                             ; preds = %2252
  %2263 = load i8*, i8** %377, align 8
  %2264 = load i64, i64* %376, align 8
  %2265 = add i64 %2264, 1
  store i64 %2265, i64* %376, align 8
  %2266 = getelementptr inbounds i8, i8* %2263, i64 %2264
  store i8 0, i8* %2266, align 1
  br label %2306

2267:                                             ; preds = %2170
  %2268 = getelementptr inbounds i8, i8* %2182, i64 %2172
  store i8 %2181, i8* %2268, align 1
  %2269 = load i64, i64* %375, align 8
  %2270 = lshr i64 %2269, 48
  %2271 = trunc i64 %2270 to i8
  %2272 = load i8*, i8** %377, align 8
  %2273 = load i64, i64* %376, align 8
  %2274 = add i64 %2273, 1
  %2275 = getelementptr inbounds i8, i8* %2272, i64 %2274
  store i8 %2271, i8* %2275, align 1
  %2276 = load i64, i64* %375, align 8
  %2277 = lshr i64 %2276, 40
  %2278 = trunc i64 %2277 to i8
  %2279 = load i8*, i8** %377, align 8
  %2280 = load i64, i64* %376, align 8
  %2281 = add i64 %2280, 2
  %2282 = getelementptr inbounds i8, i8* %2279, i64 %2281
  store i8 %2278, i8* %2282, align 1
  %2283 = load i64, i64* %375, align 8
  %2284 = lshr i64 %2283, 32
  %2285 = trunc i64 %2284 to i8
  %2286 = load i8*, i8** %377, align 8
  %2287 = load i64, i64* %376, align 8
  %2288 = add i64 %2287, 3
  %2289 = getelementptr inbounds i8, i8* %2286, i64 %2288
  store i8 %2285, i8* %2289, align 1
  %2290 = load i64, i64* %375, align 8
  %2291 = lshr i64 %2290, 24
  %2292 = trunc i64 %2291 to i8
  %2293 = load i8*, i8** %377, align 8
  %2294 = load i64, i64* %376, align 8
  %2295 = add i64 %2294, 4
  %2296 = getelementptr inbounds i8, i8* %2293, i64 %2295
  store i8 %2292, i8* %2296, align 1
  %2297 = load i64, i64* %375, align 8
  %2298 = lshr i64 %2297, 16
  %2299 = trunc i64 %2298 to i8
  %2300 = load i8*, i8** %377, align 8
  %2301 = load i64, i64* %376, align 8
  %2302 = add i64 %2301, 5
  %2303 = getelementptr inbounds i8, i8* %2300, i64 %2302
  store i8 %2299, i8* %2303, align 1
  %2304 = load i64, i64* %376, align 8
  %2305 = add i64 %2304, 6
  store i64 %2305, i64* %376, align 8
  br label %2306

2306:                                             ; preds = %2267, %2262, %2252
  %2307 = load i64, i64* %375, align 8
  %2308 = shl i64 %2307, 48
  store i64 %2308, i64* %375, align 8
  %2309 = load i32, i32* %374, align 8
  %2310 = add nsw i32 %2309, 48
  store i32 %2310, i32* %374, align 8
  br label %2311

2311:                                             ; preds = %2306, %2152, %2151
  %2312 = icmp eq i32 %2144, 0
  br i1 %2312, label %2474, label %2313

2313:                                             ; preds = %2311
  %2314 = load i32, i32* %372, align 8
  %2315 = shl nsw i32 -1, %2144
  %2316 = xor i32 %2315, -1
  %2317 = and i32 %2314, %2316
  %2318 = sext i32 %2317 to i64
  %2319 = load i32, i32* %374, align 8
  %2320 = sub nsw i32 %2319, %2144
  store i32 %2320, i32* %374, align 8
  %2321 = zext i32 %2320 to i64
  %2322 = shl i64 %2318, %2321
  %2323 = load i64, i64* %375, align 8
  %2324 = or i64 %2322, %2323
  store i64 %2324, i64* %375, align 8
  %2325 = icmp slt i32 %2320, 17
  br i1 %2325, label %2326, label %2474

2326:                                             ; preds = %2313
  %2327 = load i64, i64* %376, align 8
  %2328 = add i64 %2327, 12
  %2329 = icmp ugt i64 %2328, 16384
  br i1 %2329, label %2330, label %2333, !prof !23

2330:                                             ; preds = %2326
  tail call fastcc void @_ZN3jxl4jpeg12_GLOBAL__N_110SwapBufferEPNS0_13JpegBitWriterE(%"struct.jxl::jpeg::JpegBitWriter"* %9) #10
  %2331 = load i64, i64* %376, align 8
  %2332 = load i64, i64* %375, align 8
  br label %2333

2333:                                             ; preds = %2330, %2326
  %2334 = phi i64 [ %2324, %2326 ], [ %2332, %2330 ]
  %2335 = phi i64 [ %2327, %2326 ], [ %2331, %2330 ]
  %2336 = or i64 %2334, 65535
  %2337 = xor i64 %2336, -65536
  %2338 = add i64 %2337, -72340172838076673
  %2339 = and i64 %2337, -9187201950435770368
  %2340 = xor i64 %2339, -9187201950435770368
  %2341 = and i64 %2340, %2338
  %2342 = icmp eq i64 %2341, 0
  %2343 = lshr i64 %2334, 56
  %2344 = trunc i64 %2343 to i8
  %2345 = load i8*, i8** %377, align 8
  br i1 %2342, label %2430, label %2346

2346:                                             ; preds = %2333
  %2347 = add i64 %2335, 1
  store i64 %2347, i64* %376, align 8
  %2348 = getelementptr inbounds i8, i8* %2345, i64 %2335
  store i8 %2344, i8* %2348, align 1
  %2349 = icmp eq i64 %2343, 255
  br i1 %2349, label %2350, label %2355

2350:                                             ; preds = %2346
  %2351 = load i8*, i8** %377, align 8
  %2352 = load i64, i64* %376, align 8
  %2353 = add i64 %2352, 1
  store i64 %2353, i64* %376, align 8
  %2354 = getelementptr inbounds i8, i8* %2351, i64 %2352
  store i8 0, i8* %2354, align 1
  br label %2355

2355:                                             ; preds = %2350, %2346
  %2356 = load i64, i64* %375, align 8
  %2357 = lshr i64 %2356, 48
  %2358 = trunc i64 %2357 to i8
  %2359 = load i8*, i8** %377, align 8
  %2360 = load i64, i64* %376, align 8
  %2361 = add i64 %2360, 1
  store i64 %2361, i64* %376, align 8
  %2362 = getelementptr inbounds i8, i8* %2359, i64 %2360
  store i8 %2358, i8* %2362, align 1
  %2363 = and i64 %2356, 71776119061217280
  %2364 = icmp eq i64 %2363, 71776119061217280
  br i1 %2364, label %2365, label %2370

2365:                                             ; preds = %2355
  %2366 = load i8*, i8** %377, align 8
  %2367 = load i64, i64* %376, align 8
  %2368 = add i64 %2367, 1
  store i64 %2368, i64* %376, align 8
  %2369 = getelementptr inbounds i8, i8* %2366, i64 %2367
  store i8 0, i8* %2369, align 1
  br label %2370

2370:                                             ; preds = %2365, %2355
  %2371 = load i64, i64* %375, align 8
  %2372 = lshr i64 %2371, 40
  %2373 = trunc i64 %2372 to i8
  %2374 = load i8*, i8** %377, align 8
  %2375 = load i64, i64* %376, align 8
  %2376 = add i64 %2375, 1
  store i64 %2376, i64* %376, align 8
  %2377 = getelementptr inbounds i8, i8* %2374, i64 %2375
  store i8 %2373, i8* %2377, align 1
  %2378 = and i64 %2371, 280375465082880
  %2379 = icmp eq i64 %2378, 280375465082880
  br i1 %2379, label %2380, label %2385

2380:                                             ; preds = %2370
  %2381 = load i8*, i8** %377, align 8
  %2382 = load i64, i64* %376, align 8
  %2383 = add i64 %2382, 1
  store i64 %2383, i64* %376, align 8
  %2384 = getelementptr inbounds i8, i8* %2381, i64 %2382
  store i8 0, i8* %2384, align 1
  br label %2385

2385:                                             ; preds = %2380, %2370
  %2386 = load i64, i64* %375, align 8
  %2387 = lshr i64 %2386, 32
  %2388 = trunc i64 %2387 to i8
  %2389 = load i8*, i8** %377, align 8
  %2390 = load i64, i64* %376, align 8
  %2391 = add i64 %2390, 1
  store i64 %2391, i64* %376, align 8
  %2392 = getelementptr inbounds i8, i8* %2389, i64 %2390
  store i8 %2388, i8* %2392, align 1
  %2393 = and i64 %2386, 1095216660480
  %2394 = icmp eq i64 %2393, 1095216660480
  br i1 %2394, label %2395, label %2400

2395:                                             ; preds = %2385
  %2396 = load i8*, i8** %377, align 8
  %2397 = load i64, i64* %376, align 8
  %2398 = add i64 %2397, 1
  store i64 %2398, i64* %376, align 8
  %2399 = getelementptr inbounds i8, i8* %2396, i64 %2397
  store i8 0, i8* %2399, align 1
  br label %2400

2400:                                             ; preds = %2395, %2385
  %2401 = load i64, i64* %375, align 8
  %2402 = lshr i64 %2401, 24
  %2403 = trunc i64 %2402 to i8
  %2404 = load i8*, i8** %377, align 8
  %2405 = load i64, i64* %376, align 8
  %2406 = add i64 %2405, 1
  store i64 %2406, i64* %376, align 8
  %2407 = getelementptr inbounds i8, i8* %2404, i64 %2405
  store i8 %2403, i8* %2407, align 1
  %2408 = and i64 %2401, 4278190080
  %2409 = icmp eq i64 %2408, 4278190080
  br i1 %2409, label %2410, label %2415

2410:                                             ; preds = %2400
  %2411 = load i8*, i8** %377, align 8
  %2412 = load i64, i64* %376, align 8
  %2413 = add i64 %2412, 1
  store i64 %2413, i64* %376, align 8
  %2414 = getelementptr inbounds i8, i8* %2411, i64 %2412
  store i8 0, i8* %2414, align 1
  br label %2415

2415:                                             ; preds = %2410, %2400
  %2416 = load i64, i64* %375, align 8
  %2417 = lshr i64 %2416, 16
  %2418 = trunc i64 %2417 to i8
  %2419 = load i8*, i8** %377, align 8
  %2420 = load i64, i64* %376, align 8
  %2421 = add i64 %2420, 1
  store i64 %2421, i64* %376, align 8
  %2422 = getelementptr inbounds i8, i8* %2419, i64 %2420
  store i8 %2418, i8* %2422, align 1
  %2423 = and i64 %2416, 16711680
  %2424 = icmp eq i64 %2423, 16711680
  br i1 %2424, label %2425, label %2469

2425:                                             ; preds = %2415
  %2426 = load i8*, i8** %377, align 8
  %2427 = load i64, i64* %376, align 8
  %2428 = add i64 %2427, 1
  store i64 %2428, i64* %376, align 8
  %2429 = getelementptr inbounds i8, i8* %2426, i64 %2427
  store i8 0, i8* %2429, align 1
  br label %2469

2430:                                             ; preds = %2333
  %2431 = getelementptr inbounds i8, i8* %2345, i64 %2335
  store i8 %2344, i8* %2431, align 1
  %2432 = load i64, i64* %375, align 8
  %2433 = lshr i64 %2432, 48
  %2434 = trunc i64 %2433 to i8
  %2435 = load i8*, i8** %377, align 8
  %2436 = load i64, i64* %376, align 8
  %2437 = add i64 %2436, 1
  %2438 = getelementptr inbounds i8, i8* %2435, i64 %2437
  store i8 %2434, i8* %2438, align 1
  %2439 = load i64, i64* %375, align 8
  %2440 = lshr i64 %2439, 40
  %2441 = trunc i64 %2440 to i8
  %2442 = load i8*, i8** %377, align 8
  %2443 = load i64, i64* %376, align 8
  %2444 = add i64 %2443, 2
  %2445 = getelementptr inbounds i8, i8* %2442, i64 %2444
  store i8 %2441, i8* %2445, align 1
  %2446 = load i64, i64* %375, align 8
  %2447 = lshr i64 %2446, 32
  %2448 = trunc i64 %2447 to i8
  %2449 = load i8*, i8** %377, align 8
  %2450 = load i64, i64* %376, align 8
  %2451 = add i64 %2450, 3
  %2452 = getelementptr inbounds i8, i8* %2449, i64 %2451
  store i8 %2448, i8* %2452, align 1
  %2453 = load i64, i64* %375, align 8
  %2454 = lshr i64 %2453, 24
  %2455 = trunc i64 %2454 to i8
  %2456 = load i8*, i8** %377, align 8
  %2457 = load i64, i64* %376, align 8
  %2458 = add i64 %2457, 4
  %2459 = getelementptr inbounds i8, i8* %2456, i64 %2458
  store i8 %2455, i8* %2459, align 1
  %2460 = load i64, i64* %375, align 8
  %2461 = lshr i64 %2460, 16
  %2462 = trunc i64 %2461 to i8
  %2463 = load i8*, i8** %377, align 8
  %2464 = load i64, i64* %376, align 8
  %2465 = add i64 %2464, 5
  %2466 = getelementptr inbounds i8, i8* %2463, i64 %2465
  store i8 %2462, i8* %2466, align 1
  %2467 = load i64, i64* %376, align 8
  %2468 = add i64 %2467, 6
  store i64 %2468, i64* %376, align 8
  br label %2469

2469:                                             ; preds = %2430, %2425, %2415
  %2470 = load i64, i64* %375, align 8
  %2471 = shl i64 %2470, 48
  store i64 %2471, i64* %375, align 8
  %2472 = load i32, i32* %374, align 8
  %2473 = add nsw i32 %2472, 48
  store i32 %2473, i32* %374, align 8
  br label %2474

2474:                                             ; preds = %2469, %2313, %2311
  store i32 0, i32* %372, align 8
  %2475 = load i64, i64* %381, align 8
  %2476 = load i64, i64* %382, align 8
  br label %2477

2477:                                             ; preds = %2474, %2139
  %2478 = phi i64 [ %2476, %2474 ], [ %2135, %2139 ]
  %2479 = phi i64 [ %2475, %2474 ], [ %2134, %2139 ]
  %2480 = icmp eq i64 %2479, %2478
  br i1 %2480, label %2655, label %2481

2481:                                             ; preds = %2477
  %2482 = load i32, i32* %374, align 8
  %2483 = load i64, i64* %375, align 8
  br label %2484

2484:                                             ; preds = %2646, %2481
  %2485 = phi i64 [ %2483, %2481 ], [ %2647, %2646 ]
  %2486 = phi i32 [ %2482, %2481 ], [ %2648, %2646 ]
  %2487 = phi i64 [ %2478, %2481 ], [ %2651, %2646 ]
  %2488 = phi i64 [ 0, %2481 ], [ %2649, %2646 ]
  %2489 = inttoptr i64 %2487 to i32*
  %2490 = getelementptr inbounds i32, i32* %2489, i64 %2488
  %2491 = load i32, i32* %2490, align 4
  %2492 = sext i32 %2491 to i64
  %2493 = add nsw i32 %2486, -1
  store i32 %2493, i32* %374, align 8
  %2494 = zext i32 %2493 to i64
  %2495 = shl i64 %2492, %2494
  %2496 = or i64 %2495, %2485
  store i64 %2496, i64* %375, align 8
  %2497 = icmp slt i32 %2486, 18
  br i1 %2497, label %2498, label %2646

2498:                                             ; preds = %2484
  %2499 = load i64, i64* %376, align 8
  %2500 = add i64 %2499, 12
  %2501 = icmp ugt i64 %2500, 16384
  br i1 %2501, label %2502, label %2505, !prof !23

2502:                                             ; preds = %2498
  tail call fastcc void @_ZN3jxl4jpeg12_GLOBAL__N_110SwapBufferEPNS0_13JpegBitWriterE(%"struct.jxl::jpeg::JpegBitWriter"* %9) #10
  %2503 = load i64, i64* %376, align 8
  %2504 = load i64, i64* %375, align 8
  br label %2505

2505:                                             ; preds = %2502, %2498
  %2506 = phi i64 [ %2496, %2498 ], [ %2504, %2502 ]
  %2507 = phi i64 [ %2499, %2498 ], [ %2503, %2502 ]
  %2508 = or i64 %2506, 65535
  %2509 = xor i64 %2508, -65536
  %2510 = add i64 %2509, -72340172838076673
  %2511 = and i64 %2509, -9187201950435770368
  %2512 = xor i64 %2511, -9187201950435770368
  %2513 = and i64 %2512, %2510
  %2514 = icmp eq i64 %2513, 0
  %2515 = lshr i64 %2506, 56
  %2516 = trunc i64 %2515 to i8
  %2517 = load i8*, i8** %377, align 8
  br i1 %2514, label %2602, label %2518

2518:                                             ; preds = %2505
  %2519 = add i64 %2507, 1
  store i64 %2519, i64* %376, align 8
  %2520 = getelementptr inbounds i8, i8* %2517, i64 %2507
  store i8 %2516, i8* %2520, align 1
  %2521 = icmp eq i64 %2515, 255
  br i1 %2521, label %2522, label %2527

2522:                                             ; preds = %2518
  %2523 = load i8*, i8** %377, align 8
  %2524 = load i64, i64* %376, align 8
  %2525 = add i64 %2524, 1
  store i64 %2525, i64* %376, align 8
  %2526 = getelementptr inbounds i8, i8* %2523, i64 %2524
  store i8 0, i8* %2526, align 1
  br label %2527

2527:                                             ; preds = %2522, %2518
  %2528 = load i64, i64* %375, align 8
  %2529 = lshr i64 %2528, 48
  %2530 = trunc i64 %2529 to i8
  %2531 = load i8*, i8** %377, align 8
  %2532 = load i64, i64* %376, align 8
  %2533 = add i64 %2532, 1
  store i64 %2533, i64* %376, align 8
  %2534 = getelementptr inbounds i8, i8* %2531, i64 %2532
  store i8 %2530, i8* %2534, align 1
  %2535 = and i64 %2528, 71776119061217280
  %2536 = icmp eq i64 %2535, 71776119061217280
  br i1 %2536, label %2537, label %2542

2537:                                             ; preds = %2527
  %2538 = load i8*, i8** %377, align 8
  %2539 = load i64, i64* %376, align 8
  %2540 = add i64 %2539, 1
  store i64 %2540, i64* %376, align 8
  %2541 = getelementptr inbounds i8, i8* %2538, i64 %2539
  store i8 0, i8* %2541, align 1
  br label %2542

2542:                                             ; preds = %2537, %2527
  %2543 = load i64, i64* %375, align 8
  %2544 = lshr i64 %2543, 40
  %2545 = trunc i64 %2544 to i8
  %2546 = load i8*, i8** %377, align 8
  %2547 = load i64, i64* %376, align 8
  %2548 = add i64 %2547, 1
  store i64 %2548, i64* %376, align 8
  %2549 = getelementptr inbounds i8, i8* %2546, i64 %2547
  store i8 %2545, i8* %2549, align 1
  %2550 = and i64 %2543, 280375465082880
  %2551 = icmp eq i64 %2550, 280375465082880
  br i1 %2551, label %2552, label %2557

2552:                                             ; preds = %2542
  %2553 = load i8*, i8** %377, align 8
  %2554 = load i64, i64* %376, align 8
  %2555 = add i64 %2554, 1
  store i64 %2555, i64* %376, align 8
  %2556 = getelementptr inbounds i8, i8* %2553, i64 %2554
  store i8 0, i8* %2556, align 1
  br label %2557

2557:                                             ; preds = %2552, %2542
  %2558 = load i64, i64* %375, align 8
  %2559 = lshr i64 %2558, 32
  %2560 = trunc i64 %2559 to i8
  %2561 = load i8*, i8** %377, align 8
  %2562 = load i64, i64* %376, align 8
  %2563 = add i64 %2562, 1
  store i64 %2563, i64* %376, align 8
  %2564 = getelementptr inbounds i8, i8* %2561, i64 %2562
  store i8 %2560, i8* %2564, align 1
  %2565 = and i64 %2558, 1095216660480
  %2566 = icmp eq i64 %2565, 1095216660480
  br i1 %2566, label %2567, label %2572

2567:                                             ; preds = %2557
  %2568 = load i8*, i8** %377, align 8
  %2569 = load i64, i64* %376, align 8
  %2570 = add i64 %2569, 1
  store i64 %2570, i64* %376, align 8
  %2571 = getelementptr inbounds i8, i8* %2568, i64 %2569
  store i8 0, i8* %2571, align 1
  br label %2572

2572:                                             ; preds = %2567, %2557
  %2573 = load i64, i64* %375, align 8
  %2574 = lshr i64 %2573, 24
  %2575 = trunc i64 %2574 to i8
  %2576 = load i8*, i8** %377, align 8
  %2577 = load i64, i64* %376, align 8
  %2578 = add i64 %2577, 1
  store i64 %2578, i64* %376, align 8
  %2579 = getelementptr inbounds i8, i8* %2576, i64 %2577
  store i8 %2575, i8* %2579, align 1
  %2580 = and i64 %2573, 4278190080
  %2581 = icmp eq i64 %2580, 4278190080
  br i1 %2581, label %2582, label %2587

2582:                                             ; preds = %2572
  %2583 = load i8*, i8** %377, align 8
  %2584 = load i64, i64* %376, align 8
  %2585 = add i64 %2584, 1
  store i64 %2585, i64* %376, align 8
  %2586 = getelementptr inbounds i8, i8* %2583, i64 %2584
  store i8 0, i8* %2586, align 1
  br label %2587

2587:                                             ; preds = %2582, %2572
  %2588 = load i64, i64* %375, align 8
  %2589 = lshr i64 %2588, 16
  %2590 = trunc i64 %2589 to i8
  %2591 = load i8*, i8** %377, align 8
  %2592 = load i64, i64* %376, align 8
  %2593 = add i64 %2592, 1
  store i64 %2593, i64* %376, align 8
  %2594 = getelementptr inbounds i8, i8* %2591, i64 %2592
  store i8 %2590, i8* %2594, align 1
  %2595 = and i64 %2588, 16711680
  %2596 = icmp eq i64 %2595, 16711680
  br i1 %2596, label %2597, label %2641

2597:                                             ; preds = %2587
  %2598 = load i8*, i8** %377, align 8
  %2599 = load i64, i64* %376, align 8
  %2600 = add i64 %2599, 1
  store i64 %2600, i64* %376, align 8
  %2601 = getelementptr inbounds i8, i8* %2598, i64 %2599
  store i8 0, i8* %2601, align 1
  br label %2641

2602:                                             ; preds = %2505
  %2603 = getelementptr inbounds i8, i8* %2517, i64 %2507
  store i8 %2516, i8* %2603, align 1
  %2604 = load i64, i64* %375, align 8
  %2605 = lshr i64 %2604, 48
  %2606 = trunc i64 %2605 to i8
  %2607 = load i8*, i8** %377, align 8
  %2608 = load i64, i64* %376, align 8
  %2609 = add i64 %2608, 1
  %2610 = getelementptr inbounds i8, i8* %2607, i64 %2609
  store i8 %2606, i8* %2610, align 1
  %2611 = load i64, i64* %375, align 8
  %2612 = lshr i64 %2611, 40
  %2613 = trunc i64 %2612 to i8
  %2614 = load i8*, i8** %377, align 8
  %2615 = load i64, i64* %376, align 8
  %2616 = add i64 %2615, 2
  %2617 = getelementptr inbounds i8, i8* %2614, i64 %2616
  store i8 %2613, i8* %2617, align 1
  %2618 = load i64, i64* %375, align 8
  %2619 = lshr i64 %2618, 32
  %2620 = trunc i64 %2619 to i8
  %2621 = load i8*, i8** %377, align 8
  %2622 = load i64, i64* %376, align 8
  %2623 = add i64 %2622, 3
  %2624 = getelementptr inbounds i8, i8* %2621, i64 %2623
  store i8 %2620, i8* %2624, align 1
  %2625 = load i64, i64* %375, align 8
  %2626 = lshr i64 %2625, 24
  %2627 = trunc i64 %2626 to i8
  %2628 = load i8*, i8** %377, align 8
  %2629 = load i64, i64* %376, align 8
  %2630 = add i64 %2629, 4
  %2631 = getelementptr inbounds i8, i8* %2628, i64 %2630
  store i8 %2627, i8* %2631, align 1
  %2632 = load i64, i64* %375, align 8
  %2633 = lshr i64 %2632, 16
  %2634 = trunc i64 %2633 to i8
  %2635 = load i8*, i8** %377, align 8
  %2636 = load i64, i64* %376, align 8
  %2637 = add i64 %2636, 5
  %2638 = getelementptr inbounds i8, i8* %2635, i64 %2637
  store i8 %2634, i8* %2638, align 1
  %2639 = load i64, i64* %376, align 8
  %2640 = add i64 %2639, 6
  store i64 %2640, i64* %376, align 8
  br label %2641

2641:                                             ; preds = %2602, %2597, %2587
  %2642 = load i64, i64* %375, align 8
  %2643 = shl i64 %2642, 48
  store i64 %2643, i64* %375, align 8
  %2644 = load i32, i32* %374, align 8
  %2645 = add nsw i32 %2644, 48
  store i32 %2645, i32* %374, align 8
  br label %2646

2646:                                             ; preds = %2641, %2484
  %2647 = phi i64 [ %2496, %2484 ], [ %2643, %2641 ]
  %2648 = phi i32 [ %2493, %2484 ], [ %2645, %2641 ]
  %2649 = add nuw i64 %2488, 1
  %2650 = load i64, i64* %381, align 8
  %2651 = load i64, i64* %382, align 8
  %2652 = sub i64 %2650, %2651
  %2653 = ashr exact i64 %2652, 2
  %2654 = icmp ult i64 %2649, %2653
  br i1 %2654, label %2484, label %2655

2655:                                             ; preds = %2646, %2477
  %2656 = phi i64 [ %2478, %2477 ], [ %2651, %2646 ]
  store i64 %2656, i64* %381, align 8
  br label %2657

2657:                                             ; preds = %2132, %2655
  %2658 = phi i64 [ %2135, %2132 ], [ %2656, %2655 ]
  %2659 = phi i64 [ %2134, %2132 ], [ %2656, %2655 ]
  br i1 %11, label %3178, label %2660

2660:                                             ; preds = %2657
  %2661 = load i32, i32* %372, align 8
  %2662 = icmp sgt i32 %2661, 0
  br i1 %2662, label %2663, label %2998

2663:                                             ; preds = %2660
  %2664 = tail call i32 @llvm.ctlz.i32(i32 %2661, i1 true) #10, !range !22
  %2665 = xor i32 %2664, 31
  %2666 = shl nuw nsw i32 %2665, 4
  %2667 = load %"struct.jxl::jpeg::HuffmanCodeTable"*, %"struct.jxl::jpeg::HuffmanCodeTable"** %373, align 8
  %2668 = zext i32 %2666 to i64
  %2669 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanCodeTable", %"struct.jxl::jpeg::HuffmanCodeTable"* %2667, i64 0, i32 0, i64 %2668
  %2670 = load i32, i32* %2669, align 4
  %2671 = icmp eq i32 %2670, 0
  br i1 %2671, label %2672, label %2673

2672:                                             ; preds = %2663
  store i8 0, i8* %378, align 8
  br label %2832

2673:                                             ; preds = %2663
  %2674 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanCodeTable", %"struct.jxl::jpeg::HuffmanCodeTable"* %2667, i64 0, i32 1, i64 %2668
  %2675 = load i32, i32* %2674, align 4
  %2676 = sext i32 %2675 to i64
  %2677 = load i32, i32* %374, align 8
  %2678 = sub nsw i32 %2677, %2670
  store i32 %2678, i32* %374, align 8
  %2679 = zext i32 %2678 to i64
  %2680 = shl i64 %2676, %2679
  %2681 = load i64, i64* %375, align 8
  %2682 = or i64 %2680, %2681
  store i64 %2682, i64* %375, align 8
  %2683 = icmp slt i32 %2678, 17
  br i1 %2683, label %2684, label %2832

2684:                                             ; preds = %2673
  %2685 = load i64, i64* %376, align 8
  %2686 = add i64 %2685, 12
  %2687 = icmp ugt i64 %2686, 16384
  br i1 %2687, label %2688, label %2691, !prof !23

2688:                                             ; preds = %2684
  tail call fastcc void @_ZN3jxl4jpeg12_GLOBAL__N_110SwapBufferEPNS0_13JpegBitWriterE(%"struct.jxl::jpeg::JpegBitWriter"* %9) #10
  %2689 = load i64, i64* %376, align 8
  %2690 = load i64, i64* %375, align 8
  br label %2691

2691:                                             ; preds = %2688, %2684
  %2692 = phi i64 [ %2682, %2684 ], [ %2690, %2688 ]
  %2693 = phi i64 [ %2685, %2684 ], [ %2689, %2688 ]
  %2694 = or i64 %2692, 65535
  %2695 = xor i64 %2694, -65536
  %2696 = add i64 %2695, -72340172838076673
  %2697 = and i64 %2695, -9187201950435770368
  %2698 = xor i64 %2697, -9187201950435770368
  %2699 = and i64 %2698, %2696
  %2700 = icmp eq i64 %2699, 0
  %2701 = lshr i64 %2692, 56
  %2702 = trunc i64 %2701 to i8
  %2703 = load i8*, i8** %377, align 8
  br i1 %2700, label %2788, label %2704

2704:                                             ; preds = %2691
  %2705 = add i64 %2693, 1
  store i64 %2705, i64* %376, align 8
  %2706 = getelementptr inbounds i8, i8* %2703, i64 %2693
  store i8 %2702, i8* %2706, align 1
  %2707 = icmp eq i64 %2701, 255
  br i1 %2707, label %2708, label %2713

2708:                                             ; preds = %2704
  %2709 = load i8*, i8** %377, align 8
  %2710 = load i64, i64* %376, align 8
  %2711 = add i64 %2710, 1
  store i64 %2711, i64* %376, align 8
  %2712 = getelementptr inbounds i8, i8* %2709, i64 %2710
  store i8 0, i8* %2712, align 1
  br label %2713

2713:                                             ; preds = %2708, %2704
  %2714 = load i64, i64* %375, align 8
  %2715 = lshr i64 %2714, 48
  %2716 = trunc i64 %2715 to i8
  %2717 = load i8*, i8** %377, align 8
  %2718 = load i64, i64* %376, align 8
  %2719 = add i64 %2718, 1
  store i64 %2719, i64* %376, align 8
  %2720 = getelementptr inbounds i8, i8* %2717, i64 %2718
  store i8 %2716, i8* %2720, align 1
  %2721 = and i64 %2714, 71776119061217280
  %2722 = icmp eq i64 %2721, 71776119061217280
  br i1 %2722, label %2723, label %2728

2723:                                             ; preds = %2713
  %2724 = load i8*, i8** %377, align 8
  %2725 = load i64, i64* %376, align 8
  %2726 = add i64 %2725, 1
  store i64 %2726, i64* %376, align 8
  %2727 = getelementptr inbounds i8, i8* %2724, i64 %2725
  store i8 0, i8* %2727, align 1
  br label %2728

2728:                                             ; preds = %2723, %2713
  %2729 = load i64, i64* %375, align 8
  %2730 = lshr i64 %2729, 40
  %2731 = trunc i64 %2730 to i8
  %2732 = load i8*, i8** %377, align 8
  %2733 = load i64, i64* %376, align 8
  %2734 = add i64 %2733, 1
  store i64 %2734, i64* %376, align 8
  %2735 = getelementptr inbounds i8, i8* %2732, i64 %2733
  store i8 %2731, i8* %2735, align 1
  %2736 = and i64 %2729, 280375465082880
  %2737 = icmp eq i64 %2736, 280375465082880
  br i1 %2737, label %2738, label %2743

2738:                                             ; preds = %2728
  %2739 = load i8*, i8** %377, align 8
  %2740 = load i64, i64* %376, align 8
  %2741 = add i64 %2740, 1
  store i64 %2741, i64* %376, align 8
  %2742 = getelementptr inbounds i8, i8* %2739, i64 %2740
  store i8 0, i8* %2742, align 1
  br label %2743

2743:                                             ; preds = %2738, %2728
  %2744 = load i64, i64* %375, align 8
  %2745 = lshr i64 %2744, 32
  %2746 = trunc i64 %2745 to i8
  %2747 = load i8*, i8** %377, align 8
  %2748 = load i64, i64* %376, align 8
  %2749 = add i64 %2748, 1
  store i64 %2749, i64* %376, align 8
  %2750 = getelementptr inbounds i8, i8* %2747, i64 %2748
  store i8 %2746, i8* %2750, align 1
  %2751 = and i64 %2744, 1095216660480
  %2752 = icmp eq i64 %2751, 1095216660480
  br i1 %2752, label %2753, label %2758

2753:                                             ; preds = %2743
  %2754 = load i8*, i8** %377, align 8
  %2755 = load i64, i64* %376, align 8
  %2756 = add i64 %2755, 1
  store i64 %2756, i64* %376, align 8
  %2757 = getelementptr inbounds i8, i8* %2754, i64 %2755
  store i8 0, i8* %2757, align 1
  br label %2758

2758:                                             ; preds = %2753, %2743
  %2759 = load i64, i64* %375, align 8
  %2760 = lshr i64 %2759, 24
  %2761 = trunc i64 %2760 to i8
  %2762 = load i8*, i8** %377, align 8
  %2763 = load i64, i64* %376, align 8
  %2764 = add i64 %2763, 1
  store i64 %2764, i64* %376, align 8
  %2765 = getelementptr inbounds i8, i8* %2762, i64 %2763
  store i8 %2761, i8* %2765, align 1
  %2766 = and i64 %2759, 4278190080
  %2767 = icmp eq i64 %2766, 4278190080
  br i1 %2767, label %2768, label %2773

2768:                                             ; preds = %2758
  %2769 = load i8*, i8** %377, align 8
  %2770 = load i64, i64* %376, align 8
  %2771 = add i64 %2770, 1
  store i64 %2771, i64* %376, align 8
  %2772 = getelementptr inbounds i8, i8* %2769, i64 %2770
  store i8 0, i8* %2772, align 1
  br label %2773

2773:                                             ; preds = %2768, %2758
  %2774 = load i64, i64* %375, align 8
  %2775 = lshr i64 %2774, 16
  %2776 = trunc i64 %2775 to i8
  %2777 = load i8*, i8** %377, align 8
  %2778 = load i64, i64* %376, align 8
  %2779 = add i64 %2778, 1
  store i64 %2779, i64* %376, align 8
  %2780 = getelementptr inbounds i8, i8* %2777, i64 %2778
  store i8 %2776, i8* %2780, align 1
  %2781 = and i64 %2774, 16711680
  %2782 = icmp eq i64 %2781, 16711680
  br i1 %2782, label %2783, label %2827

2783:                                             ; preds = %2773
  %2784 = load i8*, i8** %377, align 8
  %2785 = load i64, i64* %376, align 8
  %2786 = add i64 %2785, 1
  store i64 %2786, i64* %376, align 8
  %2787 = getelementptr inbounds i8, i8* %2784, i64 %2785
  store i8 0, i8* %2787, align 1
  br label %2827

2788:                                             ; preds = %2691
  %2789 = getelementptr inbounds i8, i8* %2703, i64 %2693
  store i8 %2702, i8* %2789, align 1
  %2790 = load i64, i64* %375, align 8
  %2791 = lshr i64 %2790, 48
  %2792 = trunc i64 %2791 to i8
  %2793 = load i8*, i8** %377, align 8
  %2794 = load i64, i64* %376, align 8
  %2795 = add i64 %2794, 1
  %2796 = getelementptr inbounds i8, i8* %2793, i64 %2795
  store i8 %2792, i8* %2796, align 1
  %2797 = load i64, i64* %375, align 8
  %2798 = lshr i64 %2797, 40
  %2799 = trunc i64 %2798 to i8
  %2800 = load i8*, i8** %377, align 8
  %2801 = load i64, i64* %376, align 8
  %2802 = add i64 %2801, 2
  %2803 = getelementptr inbounds i8, i8* %2800, i64 %2802
  store i8 %2799, i8* %2803, align 1
  %2804 = load i64, i64* %375, align 8
  %2805 = lshr i64 %2804, 32
  %2806 = trunc i64 %2805 to i8
  %2807 = load i8*, i8** %377, align 8
  %2808 = load i64, i64* %376, align 8
  %2809 = add i64 %2808, 3
  %2810 = getelementptr inbounds i8, i8* %2807, i64 %2809
  store i8 %2806, i8* %2810, align 1
  %2811 = load i64, i64* %375, align 8
  %2812 = lshr i64 %2811, 24
  %2813 = trunc i64 %2812 to i8
  %2814 = load i8*, i8** %377, align 8
  %2815 = load i64, i64* %376, align 8
  %2816 = add i64 %2815, 4
  %2817 = getelementptr inbounds i8, i8* %2814, i64 %2816
  store i8 %2813, i8* %2817, align 1
  %2818 = load i64, i64* %375, align 8
  %2819 = lshr i64 %2818, 16
  %2820 = trunc i64 %2819 to i8
  %2821 = load i8*, i8** %377, align 8
  %2822 = load i64, i64* %376, align 8
  %2823 = add i64 %2822, 5
  %2824 = getelementptr inbounds i8, i8* %2821, i64 %2823
  store i8 %2820, i8* %2824, align 1
  %2825 = load i64, i64* %376, align 8
  %2826 = add i64 %2825, 6
  store i64 %2826, i64* %376, align 8
  br label %2827

2827:                                             ; preds = %2788, %2783, %2773
  %2828 = load i64, i64* %375, align 8
  %2829 = shl i64 %2828, 48
  store i64 %2829, i64* %375, align 8
  %2830 = load i32, i32* %374, align 8
  %2831 = add nsw i32 %2830, 48
  store i32 %2831, i32* %374, align 8
  br label %2832

2832:                                             ; preds = %2827, %2673, %2672
  %2833 = icmp eq i32 %2665, 0
  br i1 %2833, label %2995, label %2834

2834:                                             ; preds = %2832
  %2835 = load i32, i32* %372, align 8
  %2836 = shl nsw i32 -1, %2665
  %2837 = xor i32 %2836, -1
  %2838 = and i32 %2835, %2837
  %2839 = sext i32 %2838 to i64
  %2840 = load i32, i32* %374, align 8
  %2841 = sub nsw i32 %2840, %2665
  store i32 %2841, i32* %374, align 8
  %2842 = zext i32 %2841 to i64
  %2843 = shl i64 %2839, %2842
  %2844 = load i64, i64* %375, align 8
  %2845 = or i64 %2843, %2844
  store i64 %2845, i64* %375, align 8
  %2846 = icmp slt i32 %2841, 17
  br i1 %2846, label %2847, label %2995

2847:                                             ; preds = %2834
  %2848 = load i64, i64* %376, align 8
  %2849 = add i64 %2848, 12
  %2850 = icmp ugt i64 %2849, 16384
  br i1 %2850, label %2851, label %2854, !prof !23

2851:                                             ; preds = %2847
  tail call fastcc void @_ZN3jxl4jpeg12_GLOBAL__N_110SwapBufferEPNS0_13JpegBitWriterE(%"struct.jxl::jpeg::JpegBitWriter"* %9) #10
  %2852 = load i64, i64* %376, align 8
  %2853 = load i64, i64* %375, align 8
  br label %2854

2854:                                             ; preds = %2851, %2847
  %2855 = phi i64 [ %2845, %2847 ], [ %2853, %2851 ]
  %2856 = phi i64 [ %2848, %2847 ], [ %2852, %2851 ]
  %2857 = or i64 %2855, 65535
  %2858 = xor i64 %2857, -65536
  %2859 = add i64 %2858, -72340172838076673
  %2860 = and i64 %2858, -9187201950435770368
  %2861 = xor i64 %2860, -9187201950435770368
  %2862 = and i64 %2861, %2859
  %2863 = icmp eq i64 %2862, 0
  %2864 = lshr i64 %2855, 56
  %2865 = trunc i64 %2864 to i8
  %2866 = load i8*, i8** %377, align 8
  br i1 %2863, label %2951, label %2867

2867:                                             ; preds = %2854
  %2868 = add i64 %2856, 1
  store i64 %2868, i64* %376, align 8
  %2869 = getelementptr inbounds i8, i8* %2866, i64 %2856
  store i8 %2865, i8* %2869, align 1
  %2870 = icmp eq i64 %2864, 255
  br i1 %2870, label %2871, label %2876

2871:                                             ; preds = %2867
  %2872 = load i8*, i8** %377, align 8
  %2873 = load i64, i64* %376, align 8
  %2874 = add i64 %2873, 1
  store i64 %2874, i64* %376, align 8
  %2875 = getelementptr inbounds i8, i8* %2872, i64 %2873
  store i8 0, i8* %2875, align 1
  br label %2876

2876:                                             ; preds = %2871, %2867
  %2877 = load i64, i64* %375, align 8
  %2878 = lshr i64 %2877, 48
  %2879 = trunc i64 %2878 to i8
  %2880 = load i8*, i8** %377, align 8
  %2881 = load i64, i64* %376, align 8
  %2882 = add i64 %2881, 1
  store i64 %2882, i64* %376, align 8
  %2883 = getelementptr inbounds i8, i8* %2880, i64 %2881
  store i8 %2879, i8* %2883, align 1
  %2884 = and i64 %2877, 71776119061217280
  %2885 = icmp eq i64 %2884, 71776119061217280
  br i1 %2885, label %2886, label %2891

2886:                                             ; preds = %2876
  %2887 = load i8*, i8** %377, align 8
  %2888 = load i64, i64* %376, align 8
  %2889 = add i64 %2888, 1
  store i64 %2889, i64* %376, align 8
  %2890 = getelementptr inbounds i8, i8* %2887, i64 %2888
  store i8 0, i8* %2890, align 1
  br label %2891

2891:                                             ; preds = %2886, %2876
  %2892 = load i64, i64* %375, align 8
  %2893 = lshr i64 %2892, 40
  %2894 = trunc i64 %2893 to i8
  %2895 = load i8*, i8** %377, align 8
  %2896 = load i64, i64* %376, align 8
  %2897 = add i64 %2896, 1
  store i64 %2897, i64* %376, align 8
  %2898 = getelementptr inbounds i8, i8* %2895, i64 %2896
  store i8 %2894, i8* %2898, align 1
  %2899 = and i64 %2892, 280375465082880
  %2900 = icmp eq i64 %2899, 280375465082880
  br i1 %2900, label %2901, label %2906

2901:                                             ; preds = %2891
  %2902 = load i8*, i8** %377, align 8
  %2903 = load i64, i64* %376, align 8
  %2904 = add i64 %2903, 1
  store i64 %2904, i64* %376, align 8
  %2905 = getelementptr inbounds i8, i8* %2902, i64 %2903
  store i8 0, i8* %2905, align 1
  br label %2906

2906:                                             ; preds = %2901, %2891
  %2907 = load i64, i64* %375, align 8
  %2908 = lshr i64 %2907, 32
  %2909 = trunc i64 %2908 to i8
  %2910 = load i8*, i8** %377, align 8
  %2911 = load i64, i64* %376, align 8
  %2912 = add i64 %2911, 1
  store i64 %2912, i64* %376, align 8
  %2913 = getelementptr inbounds i8, i8* %2910, i64 %2911
  store i8 %2909, i8* %2913, align 1
  %2914 = and i64 %2907, 1095216660480
  %2915 = icmp eq i64 %2914, 1095216660480
  br i1 %2915, label %2916, label %2921

2916:                                             ; preds = %2906
  %2917 = load i8*, i8** %377, align 8
  %2918 = load i64, i64* %376, align 8
  %2919 = add i64 %2918, 1
  store i64 %2919, i64* %376, align 8
  %2920 = getelementptr inbounds i8, i8* %2917, i64 %2918
  store i8 0, i8* %2920, align 1
  br label %2921

2921:                                             ; preds = %2916, %2906
  %2922 = load i64, i64* %375, align 8
  %2923 = lshr i64 %2922, 24
  %2924 = trunc i64 %2923 to i8
  %2925 = load i8*, i8** %377, align 8
  %2926 = load i64, i64* %376, align 8
  %2927 = add i64 %2926, 1
  store i64 %2927, i64* %376, align 8
  %2928 = getelementptr inbounds i8, i8* %2925, i64 %2926
  store i8 %2924, i8* %2928, align 1
  %2929 = and i64 %2922, 4278190080
  %2930 = icmp eq i64 %2929, 4278190080
  br i1 %2930, label %2931, label %2936

2931:                                             ; preds = %2921
  %2932 = load i8*, i8** %377, align 8
  %2933 = load i64, i64* %376, align 8
  %2934 = add i64 %2933, 1
  store i64 %2934, i64* %376, align 8
  %2935 = getelementptr inbounds i8, i8* %2932, i64 %2933
  store i8 0, i8* %2935, align 1
  br label %2936

2936:                                             ; preds = %2931, %2921
  %2937 = load i64, i64* %375, align 8
  %2938 = lshr i64 %2937, 16
  %2939 = trunc i64 %2938 to i8
  %2940 = load i8*, i8** %377, align 8
  %2941 = load i64, i64* %376, align 8
  %2942 = add i64 %2941, 1
  store i64 %2942, i64* %376, align 8
  %2943 = getelementptr inbounds i8, i8* %2940, i64 %2941
  store i8 %2939, i8* %2943, align 1
  %2944 = and i64 %2937, 16711680
  %2945 = icmp eq i64 %2944, 16711680
  br i1 %2945, label %2946, label %2990

2946:                                             ; preds = %2936
  %2947 = load i8*, i8** %377, align 8
  %2948 = load i64, i64* %376, align 8
  %2949 = add i64 %2948, 1
  store i64 %2949, i64* %376, align 8
  %2950 = getelementptr inbounds i8, i8* %2947, i64 %2948
  store i8 0, i8* %2950, align 1
  br label %2990

2951:                                             ; preds = %2854
  %2952 = getelementptr inbounds i8, i8* %2866, i64 %2856
  store i8 %2865, i8* %2952, align 1
  %2953 = load i64, i64* %375, align 8
  %2954 = lshr i64 %2953, 48
  %2955 = trunc i64 %2954 to i8
  %2956 = load i8*, i8** %377, align 8
  %2957 = load i64, i64* %376, align 8
  %2958 = add i64 %2957, 1
  %2959 = getelementptr inbounds i8, i8* %2956, i64 %2958
  store i8 %2955, i8* %2959, align 1
  %2960 = load i64, i64* %375, align 8
  %2961 = lshr i64 %2960, 40
  %2962 = trunc i64 %2961 to i8
  %2963 = load i8*, i8** %377, align 8
  %2964 = load i64, i64* %376, align 8
  %2965 = add i64 %2964, 2
  %2966 = getelementptr inbounds i8, i8* %2963, i64 %2965
  store i8 %2962, i8* %2966, align 1
  %2967 = load i64, i64* %375, align 8
  %2968 = lshr i64 %2967, 32
  %2969 = trunc i64 %2968 to i8
  %2970 = load i8*, i8** %377, align 8
  %2971 = load i64, i64* %376, align 8
  %2972 = add i64 %2971, 3
  %2973 = getelementptr inbounds i8, i8* %2970, i64 %2972
  store i8 %2969, i8* %2973, align 1
  %2974 = load i64, i64* %375, align 8
  %2975 = lshr i64 %2974, 24
  %2976 = trunc i64 %2975 to i8
  %2977 = load i8*, i8** %377, align 8
  %2978 = load i64, i64* %376, align 8
  %2979 = add i64 %2978, 4
  %2980 = getelementptr inbounds i8, i8* %2977, i64 %2979
  store i8 %2976, i8* %2980, align 1
  %2981 = load i64, i64* %375, align 8
  %2982 = lshr i64 %2981, 16
  %2983 = trunc i64 %2982 to i8
  %2984 = load i8*, i8** %377, align 8
  %2985 = load i64, i64* %376, align 8
  %2986 = add i64 %2985, 5
  %2987 = getelementptr inbounds i8, i8* %2984, i64 %2986
  store i8 %2983, i8* %2987, align 1
  %2988 = load i64, i64* %376, align 8
  %2989 = add i64 %2988, 6
  store i64 %2989, i64* %376, align 8
  br label %2990

2990:                                             ; preds = %2951, %2946, %2936
  %2991 = load i64, i64* %375, align 8
  %2992 = shl i64 %2991, 48
  store i64 %2992, i64* %375, align 8
  %2993 = load i32, i32* %374, align 8
  %2994 = add nsw i32 %2993, 48
  store i32 %2994, i32* %374, align 8
  br label %2995

2995:                                             ; preds = %2990, %2834, %2832
  store i32 0, i32* %372, align 8
  %2996 = load i64, i64* %381, align 8
  %2997 = load i64, i64* %382, align 8
  br label %2998

2998:                                             ; preds = %2995, %2660
  %2999 = phi i64 [ %2997, %2995 ], [ %2658, %2660 ]
  %3000 = phi i64 [ %2996, %2995 ], [ %2659, %2660 ]
  %3001 = icmp eq i64 %3000, %2999
  br i1 %3001, label %3176, label %3002

3002:                                             ; preds = %2998
  %3003 = load i32, i32* %374, align 8
  %3004 = load i64, i64* %375, align 8
  br label %3005

3005:                                             ; preds = %3167, %3002
  %3006 = phi i64 [ %3004, %3002 ], [ %3168, %3167 ]
  %3007 = phi i32 [ %3003, %3002 ], [ %3169, %3167 ]
  %3008 = phi i64 [ %2999, %3002 ], [ %3172, %3167 ]
  %3009 = phi i64 [ 0, %3002 ], [ %3170, %3167 ]
  %3010 = inttoptr i64 %3008 to i32*
  %3011 = getelementptr inbounds i32, i32* %3010, i64 %3009
  %3012 = load i32, i32* %3011, align 4
  %3013 = sext i32 %3012 to i64
  %3014 = add nsw i32 %3007, -1
  store i32 %3014, i32* %374, align 8
  %3015 = zext i32 %3014 to i64
  %3016 = shl i64 %3013, %3015
  %3017 = or i64 %3016, %3006
  store i64 %3017, i64* %375, align 8
  %3018 = icmp slt i32 %3007, 18
  br i1 %3018, label %3019, label %3167

3019:                                             ; preds = %3005
  %3020 = load i64, i64* %376, align 8
  %3021 = add i64 %3020, 12
  %3022 = icmp ugt i64 %3021, 16384
  br i1 %3022, label %3023, label %3026, !prof !23

3023:                                             ; preds = %3019
  tail call fastcc void @_ZN3jxl4jpeg12_GLOBAL__N_110SwapBufferEPNS0_13JpegBitWriterE(%"struct.jxl::jpeg::JpegBitWriter"* %9) #10
  %3024 = load i64, i64* %376, align 8
  %3025 = load i64, i64* %375, align 8
  br label %3026

3026:                                             ; preds = %3023, %3019
  %3027 = phi i64 [ %3017, %3019 ], [ %3025, %3023 ]
  %3028 = phi i64 [ %3020, %3019 ], [ %3024, %3023 ]
  %3029 = or i64 %3027, 65535
  %3030 = xor i64 %3029, -65536
  %3031 = add i64 %3030, -72340172838076673
  %3032 = and i64 %3030, -9187201950435770368
  %3033 = xor i64 %3032, -9187201950435770368
  %3034 = and i64 %3033, %3031
  %3035 = icmp eq i64 %3034, 0
  %3036 = lshr i64 %3027, 56
  %3037 = trunc i64 %3036 to i8
  %3038 = load i8*, i8** %377, align 8
  br i1 %3035, label %3123, label %3039

3039:                                             ; preds = %3026
  %3040 = add i64 %3028, 1
  store i64 %3040, i64* %376, align 8
  %3041 = getelementptr inbounds i8, i8* %3038, i64 %3028
  store i8 %3037, i8* %3041, align 1
  %3042 = icmp eq i64 %3036, 255
  br i1 %3042, label %3043, label %3048

3043:                                             ; preds = %3039
  %3044 = load i8*, i8** %377, align 8
  %3045 = load i64, i64* %376, align 8
  %3046 = add i64 %3045, 1
  store i64 %3046, i64* %376, align 8
  %3047 = getelementptr inbounds i8, i8* %3044, i64 %3045
  store i8 0, i8* %3047, align 1
  br label %3048

3048:                                             ; preds = %3043, %3039
  %3049 = load i64, i64* %375, align 8
  %3050 = lshr i64 %3049, 48
  %3051 = trunc i64 %3050 to i8
  %3052 = load i8*, i8** %377, align 8
  %3053 = load i64, i64* %376, align 8
  %3054 = add i64 %3053, 1
  store i64 %3054, i64* %376, align 8
  %3055 = getelementptr inbounds i8, i8* %3052, i64 %3053
  store i8 %3051, i8* %3055, align 1
  %3056 = and i64 %3049, 71776119061217280
  %3057 = icmp eq i64 %3056, 71776119061217280
  br i1 %3057, label %3058, label %3063

3058:                                             ; preds = %3048
  %3059 = load i8*, i8** %377, align 8
  %3060 = load i64, i64* %376, align 8
  %3061 = add i64 %3060, 1
  store i64 %3061, i64* %376, align 8
  %3062 = getelementptr inbounds i8, i8* %3059, i64 %3060
  store i8 0, i8* %3062, align 1
  br label %3063

3063:                                             ; preds = %3058, %3048
  %3064 = load i64, i64* %375, align 8
  %3065 = lshr i64 %3064, 40
  %3066 = trunc i64 %3065 to i8
  %3067 = load i8*, i8** %377, align 8
  %3068 = load i64, i64* %376, align 8
  %3069 = add i64 %3068, 1
  store i64 %3069, i64* %376, align 8
  %3070 = getelementptr inbounds i8, i8* %3067, i64 %3068
  store i8 %3066, i8* %3070, align 1
  %3071 = and i64 %3064, 280375465082880
  %3072 = icmp eq i64 %3071, 280375465082880
  br i1 %3072, label %3073, label %3078

3073:                                             ; preds = %3063
  %3074 = load i8*, i8** %377, align 8
  %3075 = load i64, i64* %376, align 8
  %3076 = add i64 %3075, 1
  store i64 %3076, i64* %376, align 8
  %3077 = getelementptr inbounds i8, i8* %3074, i64 %3075
  store i8 0, i8* %3077, align 1
  br label %3078

3078:                                             ; preds = %3073, %3063
  %3079 = load i64, i64* %375, align 8
  %3080 = lshr i64 %3079, 32
  %3081 = trunc i64 %3080 to i8
  %3082 = load i8*, i8** %377, align 8
  %3083 = load i64, i64* %376, align 8
  %3084 = add i64 %3083, 1
  store i64 %3084, i64* %376, align 8
  %3085 = getelementptr inbounds i8, i8* %3082, i64 %3083
  store i8 %3081, i8* %3085, align 1
  %3086 = and i64 %3079, 1095216660480
  %3087 = icmp eq i64 %3086, 1095216660480
  br i1 %3087, label %3088, label %3093

3088:                                             ; preds = %3078
  %3089 = load i8*, i8** %377, align 8
  %3090 = load i64, i64* %376, align 8
  %3091 = add i64 %3090, 1
  store i64 %3091, i64* %376, align 8
  %3092 = getelementptr inbounds i8, i8* %3089, i64 %3090
  store i8 0, i8* %3092, align 1
  br label %3093

3093:                                             ; preds = %3088, %3078
  %3094 = load i64, i64* %375, align 8
  %3095 = lshr i64 %3094, 24
  %3096 = trunc i64 %3095 to i8
  %3097 = load i8*, i8** %377, align 8
  %3098 = load i64, i64* %376, align 8
  %3099 = add i64 %3098, 1
  store i64 %3099, i64* %376, align 8
  %3100 = getelementptr inbounds i8, i8* %3097, i64 %3098
  store i8 %3096, i8* %3100, align 1
  %3101 = and i64 %3094, 4278190080
  %3102 = icmp eq i64 %3101, 4278190080
  br i1 %3102, label %3103, label %3108

3103:                                             ; preds = %3093
  %3104 = load i8*, i8** %377, align 8
  %3105 = load i64, i64* %376, align 8
  %3106 = add i64 %3105, 1
  store i64 %3106, i64* %376, align 8
  %3107 = getelementptr inbounds i8, i8* %3104, i64 %3105
  store i8 0, i8* %3107, align 1
  br label %3108

3108:                                             ; preds = %3103, %3093
  %3109 = load i64, i64* %375, align 8
  %3110 = lshr i64 %3109, 16
  %3111 = trunc i64 %3110 to i8
  %3112 = load i8*, i8** %377, align 8
  %3113 = load i64, i64* %376, align 8
  %3114 = add i64 %3113, 1
  store i64 %3114, i64* %376, align 8
  %3115 = getelementptr inbounds i8, i8* %3112, i64 %3113
  store i8 %3111, i8* %3115, align 1
  %3116 = and i64 %3109, 16711680
  %3117 = icmp eq i64 %3116, 16711680
  br i1 %3117, label %3118, label %3162

3118:                                             ; preds = %3108
  %3119 = load i8*, i8** %377, align 8
  %3120 = load i64, i64* %376, align 8
  %3121 = add i64 %3120, 1
  store i64 %3121, i64* %376, align 8
  %3122 = getelementptr inbounds i8, i8* %3119, i64 %3120
  store i8 0, i8* %3122, align 1
  br label %3162

3123:                                             ; preds = %3026
  %3124 = getelementptr inbounds i8, i8* %3038, i64 %3028
  store i8 %3037, i8* %3124, align 1
  %3125 = load i64, i64* %375, align 8
  %3126 = lshr i64 %3125, 48
  %3127 = trunc i64 %3126 to i8
  %3128 = load i8*, i8** %377, align 8
  %3129 = load i64, i64* %376, align 8
  %3130 = add i64 %3129, 1
  %3131 = getelementptr inbounds i8, i8* %3128, i64 %3130
  store i8 %3127, i8* %3131, align 1
  %3132 = load i64, i64* %375, align 8
  %3133 = lshr i64 %3132, 40
  %3134 = trunc i64 %3133 to i8
  %3135 = load i8*, i8** %377, align 8
  %3136 = load i64, i64* %376, align 8
  %3137 = add i64 %3136, 2
  %3138 = getelementptr inbounds i8, i8* %3135, i64 %3137
  store i8 %3134, i8* %3138, align 1
  %3139 = load i64, i64* %375, align 8
  %3140 = lshr i64 %3139, 32
  %3141 = trunc i64 %3140 to i8
  %3142 = load i8*, i8** %377, align 8
  %3143 = load i64, i64* %376, align 8
  %3144 = add i64 %3143, 3
  %3145 = getelementptr inbounds i8, i8* %3142, i64 %3144
  store i8 %3141, i8* %3145, align 1
  %3146 = load i64, i64* %375, align 8
  %3147 = lshr i64 %3146, 24
  %3148 = trunc i64 %3147 to i8
  %3149 = load i8*, i8** %377, align 8
  %3150 = load i64, i64* %376, align 8
  %3151 = add i64 %3150, 4
  %3152 = getelementptr inbounds i8, i8* %3149, i64 %3151
  store i8 %3148, i8* %3152, align 1
  %3153 = load i64, i64* %375, align 8
  %3154 = lshr i64 %3153, 16
  %3155 = trunc i64 %3154 to i8
  %3156 = load i8*, i8** %377, align 8
  %3157 = load i64, i64* %376, align 8
  %3158 = add i64 %3157, 5
  %3159 = getelementptr inbounds i8, i8* %3156, i64 %3158
  store i8 %3155, i8* %3159, align 1
  %3160 = load i64, i64* %376, align 8
  %3161 = add i64 %3160, 6
  store i64 %3161, i64* %376, align 8
  br label %3162

3162:                                             ; preds = %3123, %3118, %3108
  %3163 = load i64, i64* %375, align 8
  %3164 = shl i64 %3163, 48
  store i64 %3164, i64* %375, align 8
  %3165 = load i32, i32* %374, align 8
  %3166 = add nsw i32 %3165, 48
  store i32 %3166, i32* %374, align 8
  br label %3167

3167:                                             ; preds = %3162, %3005
  %3168 = phi i64 [ %3017, %3005 ], [ %3164, %3162 ]
  %3169 = phi i32 [ %3014, %3005 ], [ %3166, %3162 ]
  %3170 = add nuw i64 %3009, 1
  %3171 = load i64, i64* %381, align 8
  %3172 = load i64, i64* %382, align 8
  %3173 = sub i64 %3171, %3172
  %3174 = ashr exact i64 %3173, 2
  %3175 = icmp ult i64 %3170, %3174
  br i1 %3175, label %3005, label %3176

3176:                                             ; preds = %3167, %2998
  %3177 = phi i64 [ %2999, %2998 ], [ %3172, %3167 ]
  store i64 %3177, i64* %381, align 8
  br label %3178

3178:                                             ; preds = %2122, %3176, %2657, %368
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32* @_ZNSt3__16vectorIiNS_9allocatorIiEEE6insertINS_11__wrap_iterIPKiEEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIiNS_15iterator_traitsISA_E9referenceEEE5valueENS5_IPiEEE4typeES8_SA_SA_(%"class.std::__1::vector.86"*, i32*, i32*, i32*) local_unnamed_addr #0 comdat align 2 {
  %5 = bitcast i32* %2 to i8*
  %6 = bitcast i32* %1 to i8*
  %7 = ptrtoint i32* %1 to i64
  %8 = ptrtoint i32* %2 to i64
  %9 = getelementptr inbounds %"class.std::__1::vector.86", %"class.std::__1::vector.86"* %0, i64 0, i32 0, i32 0
  %10 = ptrtoint i32* %3 to i64
  %11 = sub i64 %10, %8
  %12 = ashr exact i64 %11, 2
  %13 = icmp sgt i64 %11, 0
  br i1 %13, label %14, label %706

14:                                               ; preds = %4
  %15 = getelementptr inbounds %"class.std::__1::vector.86", %"class.std::__1::vector.86"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast i32** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = getelementptr inbounds %"class.std::__1::vector.86", %"class.std::__1::vector.86"* %0, i64 0, i32 0, i32 1
  %19 = load i32*, i32** %18, align 8
  %20 = ptrtoint i32* %19 to i64
  %21 = sub i64 %17, %20
  %22 = ashr exact i64 %21, 2
  %23 = icmp sgt i64 %12, %22
  %24 = bitcast i32** %18 to i64*
  br i1 %23, label %339, label %25

25:                                               ; preds = %14
  %26 = sub i64 %20, %7
  %27 = ashr exact i64 %26, 2
  %28 = icmp sgt i64 %12, %27
  br i1 %28, label %29, label %196

29:                                               ; preds = %25
  %30 = getelementptr inbounds i32, i32* %2, i64 %27
  %31 = icmp eq i32* %30, %3
  br i1 %31, label %191, label %32

32:                                               ; preds = %29
  %33 = xor i64 %27, -1
  %34 = getelementptr i32, i32* %3, i64 %33
  %35 = ptrtoint i32* %34 to i64
  %36 = sub i64 %35, %8
  %37 = lshr i64 %36, 2
  %38 = add nuw nsw i64 %37, 1
  %39 = icmp ult i64 %38, 8
  br i1 %39, label %135, label %40

40:                                               ; preds = %32
  %41 = xor i64 %27, -1
  %42 = getelementptr i32, i32* %3, i64 %41
  %43 = ptrtoint i32* %42 to i64
  %44 = sub i64 %43, %8
  %45 = lshr i64 %44, 2
  %46 = add nuw nsw i64 %45, 1
  %47 = getelementptr i32, i32* %19, i64 %46
  %48 = add nsw i64 %27, %45
  %49 = add i64 %48, 1
  %50 = getelementptr i32, i32* %2, i64 %49
  %51 = icmp ult i32* %19, %50
  %52 = icmp ult i32* %30, %47
  %53 = and i1 %51, %52
  br i1 %53, label %135, label %54

54:                                               ; preds = %40
  %55 = and i64 %38, 9223372036854775800
  %56 = getelementptr i32, i32* %19, i64 %55
  %57 = getelementptr i32, i32* %30, i64 %55
  %58 = add nsw i64 %55, -8
  %59 = lshr exact i64 %58, 3
  %60 = add nuw nsw i64 %59, 1
  %61 = and i64 %60, 3
  %62 = icmp ult i64 %58, 24
  br i1 %62, label %114, label %63

63:                                               ; preds = %54
  %64 = sub nsw i64 %60, %61
  br label %65

65:                                               ; preds = %65, %63
  %66 = phi i64 [ 0, %63 ], [ %111, %65 ]
  %67 = phi i64 [ %64, %63 ], [ %112, %65 ]
  %68 = getelementptr i32, i32* %19, i64 %66
  %69 = getelementptr i32, i32* %30, i64 %66
  %70 = bitcast i32* %69 to <4 x i32>*
  %71 = load <4 x i32>, <4 x i32>* %70, align 4, !alias.scope !24
  %72 = getelementptr i32, i32* %69, i64 4
  %73 = bitcast i32* %72 to <4 x i32>*
  %74 = load <4 x i32>, <4 x i32>* %73, align 4, !alias.scope !24
  %75 = bitcast i32* %68 to <4 x i32>*
  store <4 x i32> %71, <4 x i32>* %75, align 4, !alias.scope !27, !noalias !24
  %76 = getelementptr i32, i32* %68, i64 4
  %77 = bitcast i32* %76 to <4 x i32>*
  store <4 x i32> %74, <4 x i32>* %77, align 4, !alias.scope !27, !noalias !24
  %78 = or i64 %66, 8
  %79 = getelementptr i32, i32* %19, i64 %78
  %80 = getelementptr i32, i32* %30, i64 %78
  %81 = bitcast i32* %80 to <4 x i32>*
  %82 = load <4 x i32>, <4 x i32>* %81, align 4, !alias.scope !24
  %83 = getelementptr i32, i32* %80, i64 4
  %84 = bitcast i32* %83 to <4 x i32>*
  %85 = load <4 x i32>, <4 x i32>* %84, align 4, !alias.scope !24
  %86 = bitcast i32* %79 to <4 x i32>*
  store <4 x i32> %82, <4 x i32>* %86, align 4, !alias.scope !27, !noalias !24
  %87 = getelementptr i32, i32* %79, i64 4
  %88 = bitcast i32* %87 to <4 x i32>*
  store <4 x i32> %85, <4 x i32>* %88, align 4, !alias.scope !27, !noalias !24
  %89 = or i64 %66, 16
  %90 = getelementptr i32, i32* %19, i64 %89
  %91 = getelementptr i32, i32* %30, i64 %89
  %92 = bitcast i32* %91 to <4 x i32>*
  %93 = load <4 x i32>, <4 x i32>* %92, align 4, !alias.scope !24
  %94 = getelementptr i32, i32* %91, i64 4
  %95 = bitcast i32* %94 to <4 x i32>*
  %96 = load <4 x i32>, <4 x i32>* %95, align 4, !alias.scope !24
  %97 = bitcast i32* %90 to <4 x i32>*
  store <4 x i32> %93, <4 x i32>* %97, align 4, !alias.scope !27, !noalias !24
  %98 = getelementptr i32, i32* %90, i64 4
  %99 = bitcast i32* %98 to <4 x i32>*
  store <4 x i32> %96, <4 x i32>* %99, align 4, !alias.scope !27, !noalias !24
  %100 = or i64 %66, 24
  %101 = getelementptr i32, i32* %19, i64 %100
  %102 = getelementptr i32, i32* %30, i64 %100
  %103 = bitcast i32* %102 to <4 x i32>*
  %104 = load <4 x i32>, <4 x i32>* %103, align 4, !alias.scope !24
  %105 = getelementptr i32, i32* %102, i64 4
  %106 = bitcast i32* %105 to <4 x i32>*
  %107 = load <4 x i32>, <4 x i32>* %106, align 4, !alias.scope !24
  %108 = bitcast i32* %101 to <4 x i32>*
  store <4 x i32> %104, <4 x i32>* %108, align 4, !alias.scope !27, !noalias !24
  %109 = getelementptr i32, i32* %101, i64 4
  %110 = bitcast i32* %109 to <4 x i32>*
  store <4 x i32> %107, <4 x i32>* %110, align 4, !alias.scope !27, !noalias !24
  %111 = add i64 %66, 32
  %112 = add i64 %67, -4
  %113 = icmp eq i64 %112, 0
  br i1 %113, label %114, label %65, !llvm.loop !29

114:                                              ; preds = %65, %54
  %115 = phi i64 [ 0, %54 ], [ %111, %65 ]
  %116 = icmp eq i64 %61, 0
  br i1 %116, label %133, label %117

117:                                              ; preds = %114, %117
  %118 = phi i64 [ %130, %117 ], [ %115, %114 ]
  %119 = phi i64 [ %131, %117 ], [ %61, %114 ]
  %120 = getelementptr i32, i32* %19, i64 %118
  %121 = getelementptr i32, i32* %30, i64 %118
  %122 = bitcast i32* %121 to <4 x i32>*
  %123 = load <4 x i32>, <4 x i32>* %122, align 4, !alias.scope !24
  %124 = getelementptr i32, i32* %121, i64 4
  %125 = bitcast i32* %124 to <4 x i32>*
  %126 = load <4 x i32>, <4 x i32>* %125, align 4, !alias.scope !24
  %127 = bitcast i32* %120 to <4 x i32>*
  store <4 x i32> %123, <4 x i32>* %127, align 4, !alias.scope !27, !noalias !24
  %128 = getelementptr i32, i32* %120, i64 4
  %129 = bitcast i32* %128 to <4 x i32>*
  store <4 x i32> %126, <4 x i32>* %129, align 4, !alias.scope !27, !noalias !24
  %130 = add i64 %118, 8
  %131 = add i64 %119, -1
  %132 = icmp eq i64 %131, 0
  br i1 %132, label %133, label %117, !llvm.loop !30

133:                                              ; preds = %117, %114
  %134 = icmp eq i64 %38, %55
  br i1 %134, label %188, label %135

135:                                              ; preds = %133, %40, %32
  %136 = phi i32* [ %19, %40 ], [ %19, %32 ], [ %56, %133 ]
  %137 = phi i32* [ %30, %40 ], [ %30, %32 ], [ %57, %133 ]
  %138 = ptrtoint i32* %137 to i64
  %139 = getelementptr i32, i32* %3, i64 -1
  %140 = ptrtoint i32* %139 to i64
  %141 = sub i64 %140, %138
  %142 = lshr i64 %141, 2
  %143 = add nuw nsw i64 %142, 1
  %144 = and i64 %143, 7
  %145 = icmp eq i64 %144, 0
  br i1 %145, label %155, label %146

146:                                              ; preds = %135, %146
  %147 = phi i32* [ %152, %146 ], [ %136, %135 ]
  %148 = phi i32* [ %151, %146 ], [ %137, %135 ]
  %149 = phi i64 [ %153, %146 ], [ %144, %135 ]
  %150 = load i32, i32* %148, align 4
  store i32 %150, i32* %147, align 4
  %151 = getelementptr inbounds i32, i32* %148, i64 1
  %152 = getelementptr inbounds i32, i32* %147, i64 1
  %153 = add i64 %149, -1
  %154 = icmp eq i64 %153, 0
  br i1 %154, label %155, label %146, !llvm.loop !31

155:                                              ; preds = %146, %135
  %156 = phi i32* [ undef, %135 ], [ %152, %146 ]
  %157 = phi i32* [ %136, %135 ], [ %152, %146 ]
  %158 = phi i32* [ %137, %135 ], [ %151, %146 ]
  %159 = icmp ult i64 %141, 28
  br i1 %159, label %188, label %160

160:                                              ; preds = %155, %160
  %161 = phi i32* [ %186, %160 ], [ %157, %155 ]
  %162 = phi i32* [ %185, %160 ], [ %158, %155 ]
  %163 = load i32, i32* %162, align 4
  store i32 %163, i32* %161, align 4
  %164 = getelementptr inbounds i32, i32* %162, i64 1
  %165 = getelementptr inbounds i32, i32* %161, i64 1
  %166 = load i32, i32* %164, align 4
  store i32 %166, i32* %165, align 4
  %167 = getelementptr inbounds i32, i32* %162, i64 2
  %168 = getelementptr inbounds i32, i32* %161, i64 2
  %169 = load i32, i32* %167, align 4
  store i32 %169, i32* %168, align 4
  %170 = getelementptr inbounds i32, i32* %162, i64 3
  %171 = getelementptr inbounds i32, i32* %161, i64 3
  %172 = load i32, i32* %170, align 4
  store i32 %172, i32* %171, align 4
  %173 = getelementptr inbounds i32, i32* %162, i64 4
  %174 = getelementptr inbounds i32, i32* %161, i64 4
  %175 = load i32, i32* %173, align 4
  store i32 %175, i32* %174, align 4
  %176 = getelementptr inbounds i32, i32* %162, i64 5
  %177 = getelementptr inbounds i32, i32* %161, i64 5
  %178 = load i32, i32* %176, align 4
  store i32 %178, i32* %177, align 4
  %179 = getelementptr inbounds i32, i32* %162, i64 6
  %180 = getelementptr inbounds i32, i32* %161, i64 6
  %181 = load i32, i32* %179, align 4
  store i32 %181, i32* %180, align 4
  %182 = getelementptr inbounds i32, i32* %162, i64 7
  %183 = getelementptr inbounds i32, i32* %161, i64 7
  %184 = load i32, i32* %182, align 4
  store i32 %184, i32* %183, align 4
  %185 = getelementptr inbounds i32, i32* %162, i64 8
  %186 = getelementptr inbounds i32, i32* %161, i64 8
  %187 = icmp eq i32* %185, %3
  br i1 %187, label %188, label %160, !llvm.loop !32

188:                                              ; preds = %155, %160, %133
  %189 = phi i32* [ %56, %133 ], [ %156, %155 ], [ %186, %160 ]
  %190 = ptrtoint i32* %189 to i64
  br label %191

191:                                              ; preds = %188, %29
  %192 = phi i64 [ %20, %29 ], [ %190, %188 ]
  store i64 %192, i64* %24, align 8
  %193 = icmp sgt i64 %26, 0
  br i1 %193, label %194, label %706

194:                                              ; preds = %191
  %195 = inttoptr i64 %192 to i32*
  br label %196

196:                                              ; preds = %194, %25
  %197 = phi i64 [ %192, %194 ], [ %20, %25 ]
  %198 = phi i32* [ %195, %194 ], [ %19, %25 ]
  %199 = phi i32* [ %30, %194 ], [ %3, %25 ]
  %200 = getelementptr inbounds i32, i32* %1, i64 %12
  %201 = ptrtoint i32* %200 to i64
  %202 = sub i64 %197, %201
  %203 = ashr exact i64 %202, 2
  %204 = getelementptr inbounds i32, i32* %1, i64 %203
  %205 = icmp ult i32* %204, %19
  br i1 %205, label %206, label %319

206:                                              ; preds = %196
  %207 = sub nsw i64 0, %203
  %208 = getelementptr i32, i32* %19, i64 %207
  %209 = bitcast i32* %208 to i8*
  %210 = xor i64 %7, -1
  %211 = getelementptr i8, i8* %209, i64 %210
  %212 = ptrtoint i8* %211 to i64
  %213 = lshr i64 %212, 2
  %214 = add nuw nsw i64 %213, 1
  %215 = icmp ult i64 %214, 8
  br i1 %215, label %216, label %219

216:                                              ; preds = %314, %219, %206
  %217 = phi i32* [ %198, %219 ], [ %198, %206 ], [ %237, %314 ]
  %218 = phi i32* [ %204, %219 ], [ %204, %206 ], [ %238, %314 ]
  br label %327

219:                                              ; preds = %206
  %220 = sub nsw i64 0, %203
  %221 = getelementptr i32, i32* %19, i64 %220
  %222 = bitcast i32* %221 to i8*
  %223 = xor i64 %7, -1
  %224 = getelementptr i8, i8* %222, i64 %223
  %225 = ptrtoint i8* %224 to i64
  %226 = lshr i64 %225, 2
  %227 = add nuw nsw i64 %226, 1
  %228 = getelementptr i32, i32* %198, i64 %227
  %229 = add nsw i64 %203, %226
  %230 = add i64 %229, 1
  %231 = getelementptr i32, i32* %1, i64 %230
  %232 = icmp ult i32* %198, %231
  %233 = icmp ult i32* %204, %228
  %234 = and i1 %232, %233
  br i1 %234, label %216, label %235

235:                                              ; preds = %219
  %236 = and i64 %214, 9223372036854775800
  %237 = getelementptr i32, i32* %198, i64 %236
  %238 = getelementptr i32, i32* %204, i64 %236
  %239 = add nsw i64 %236, -8
  %240 = lshr exact i64 %239, 3
  %241 = add nuw nsw i64 %240, 1
  %242 = and i64 %241, 3
  %243 = icmp ult i64 %239, 24
  br i1 %243, label %295, label %244

244:                                              ; preds = %235
  %245 = sub nsw i64 %241, %242
  br label %246

246:                                              ; preds = %246, %244
  %247 = phi i64 [ 0, %244 ], [ %292, %246 ]
  %248 = phi i64 [ %245, %244 ], [ %293, %246 ]
  %249 = getelementptr i32, i32* %198, i64 %247
  %250 = getelementptr i32, i32* %204, i64 %247
  %251 = bitcast i32* %250 to <4 x i32>*
  %252 = load <4 x i32>, <4 x i32>* %251, align 4, !alias.scope !33
  %253 = getelementptr i32, i32* %250, i64 4
  %254 = bitcast i32* %253 to <4 x i32>*
  %255 = load <4 x i32>, <4 x i32>* %254, align 4, !alias.scope !33
  %256 = bitcast i32* %249 to <4 x i32>*
  store <4 x i32> %252, <4 x i32>* %256, align 4, !alias.scope !36, !noalias !33
  %257 = getelementptr i32, i32* %249, i64 4
  %258 = bitcast i32* %257 to <4 x i32>*
  store <4 x i32> %255, <4 x i32>* %258, align 4, !alias.scope !36, !noalias !33
  %259 = or i64 %247, 8
  %260 = getelementptr i32, i32* %198, i64 %259
  %261 = getelementptr i32, i32* %204, i64 %259
  %262 = bitcast i32* %261 to <4 x i32>*
  %263 = load <4 x i32>, <4 x i32>* %262, align 4, !alias.scope !33
  %264 = getelementptr i32, i32* %261, i64 4
  %265 = bitcast i32* %264 to <4 x i32>*
  %266 = load <4 x i32>, <4 x i32>* %265, align 4, !alias.scope !33
  %267 = bitcast i32* %260 to <4 x i32>*
  store <4 x i32> %263, <4 x i32>* %267, align 4, !alias.scope !36, !noalias !33
  %268 = getelementptr i32, i32* %260, i64 4
  %269 = bitcast i32* %268 to <4 x i32>*
  store <4 x i32> %266, <4 x i32>* %269, align 4, !alias.scope !36, !noalias !33
  %270 = or i64 %247, 16
  %271 = getelementptr i32, i32* %198, i64 %270
  %272 = getelementptr i32, i32* %204, i64 %270
  %273 = bitcast i32* %272 to <4 x i32>*
  %274 = load <4 x i32>, <4 x i32>* %273, align 4, !alias.scope !33
  %275 = getelementptr i32, i32* %272, i64 4
  %276 = bitcast i32* %275 to <4 x i32>*
  %277 = load <4 x i32>, <4 x i32>* %276, align 4, !alias.scope !33
  %278 = bitcast i32* %271 to <4 x i32>*
  store <4 x i32> %274, <4 x i32>* %278, align 4, !alias.scope !36, !noalias !33
  %279 = getelementptr i32, i32* %271, i64 4
  %280 = bitcast i32* %279 to <4 x i32>*
  store <4 x i32> %277, <4 x i32>* %280, align 4, !alias.scope !36, !noalias !33
  %281 = or i64 %247, 24
  %282 = getelementptr i32, i32* %198, i64 %281
  %283 = getelementptr i32, i32* %204, i64 %281
  %284 = bitcast i32* %283 to <4 x i32>*
  %285 = load <4 x i32>, <4 x i32>* %284, align 4, !alias.scope !33
  %286 = getelementptr i32, i32* %283, i64 4
  %287 = bitcast i32* %286 to <4 x i32>*
  %288 = load <4 x i32>, <4 x i32>* %287, align 4, !alias.scope !33
  %289 = bitcast i32* %282 to <4 x i32>*
  store <4 x i32> %285, <4 x i32>* %289, align 4, !alias.scope !36, !noalias !33
  %290 = getelementptr i32, i32* %282, i64 4
  %291 = bitcast i32* %290 to <4 x i32>*
  store <4 x i32> %288, <4 x i32>* %291, align 4, !alias.scope !36, !noalias !33
  %292 = add i64 %247, 32
  %293 = add i64 %248, -4
  %294 = icmp eq i64 %293, 0
  br i1 %294, label %295, label %246, !llvm.loop !38

295:                                              ; preds = %246, %235
  %296 = phi i64 [ 0, %235 ], [ %292, %246 ]
  %297 = icmp eq i64 %242, 0
  br i1 %297, label %314, label %298

298:                                              ; preds = %295, %298
  %299 = phi i64 [ %311, %298 ], [ %296, %295 ]
  %300 = phi i64 [ %312, %298 ], [ %242, %295 ]
  %301 = getelementptr i32, i32* %198, i64 %299
  %302 = getelementptr i32, i32* %204, i64 %299
  %303 = bitcast i32* %302 to <4 x i32>*
  %304 = load <4 x i32>, <4 x i32>* %303, align 4, !alias.scope !33
  %305 = getelementptr i32, i32* %302, i64 4
  %306 = bitcast i32* %305 to <4 x i32>*
  %307 = load <4 x i32>, <4 x i32>* %306, align 4, !alias.scope !33
  %308 = bitcast i32* %301 to <4 x i32>*
  store <4 x i32> %304, <4 x i32>* %308, align 4, !alias.scope !36, !noalias !33
  %309 = getelementptr i32, i32* %301, i64 4
  %310 = bitcast i32* %309 to <4 x i32>*
  store <4 x i32> %307, <4 x i32>* %310, align 4, !alias.scope !36, !noalias !33
  %311 = add i64 %299, 8
  %312 = add i64 %300, -1
  %313 = icmp eq i64 %312, 0
  br i1 %313, label %314, label %298, !llvm.loop !39

314:                                              ; preds = %298, %295
  %315 = icmp eq i64 %214, %236
  br i1 %315, label %316, label %216

316:                                              ; preds = %327, %314
  %317 = phi i32* [ %237, %314 ], [ %332, %327 ]
  %318 = ptrtoint i32* %317 to i64
  br label %319

319:                                              ; preds = %316, %196
  %320 = phi i64 [ %318, %316 ], [ %197, %196 ]
  store i64 %320, i64* %24, align 8
  %321 = icmp eq i64 %202, 0
  br i1 %321, label %334, label %322

322:                                              ; preds = %319
  %323 = sub nsw i64 0, %203
  %324 = getelementptr inbounds i32, i32* %198, i64 %323
  %325 = bitcast i32* %324 to i8*
  %326 = bitcast i32* %1 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %325, i8* align 4 %326, i64 %202, i1 false) #10
  br label %334

327:                                              ; preds = %216, %327
  %328 = phi i32* [ %332, %327 ], [ %217, %216 ]
  %329 = phi i32* [ %331, %327 ], [ %218, %216 ]
  %330 = load i32, i32* %329, align 4
  store i32 %330, i32* %328, align 4
  %331 = getelementptr inbounds i32, i32* %329, i64 1
  %332 = getelementptr inbounds i32, i32* %328, i64 1
  %333 = icmp ult i32* %331, %19
  br i1 %333, label %327, label %316, !llvm.loop !40

334:                                              ; preds = %319, %322
  %335 = ptrtoint i32* %199 to i64
  %336 = sub i64 %335, %8
  %337 = icmp eq i64 %336, 0
  br i1 %337, label %706, label %338

338:                                              ; preds = %334
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %6, i8* align 4 %5, i64 %336, i1 false) #10
  br label %706

339:                                              ; preds = %14
  %340 = bitcast %"class.std::__1::vector.86"* %0 to i64*
  %341 = load i64, i64* %340, align 8
  %342 = sub i64 %20, %341
  %343 = ashr exact i64 %342, 2
  %344 = add nsw i64 %343, %12
  %345 = icmp ugt i64 %344, 4611686018427387903
  br i1 %345, label %346, label %348

346:                                              ; preds = %339
  %347 = bitcast %"class.std::__1::vector.86"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %347) #12
  unreachable

348:                                              ; preds = %339
  %349 = sub i64 %17, %341
  %350 = ashr exact i64 %349, 2
  %351 = icmp ult i64 %350, 2305843009213693951
  br i1 %351, label %355, label %352

352:                                              ; preds = %348
  %353 = sub i64 %7, %341
  %354 = ashr exact i64 %353, 2
  br label %365

355:                                              ; preds = %348
  %356 = ashr exact i64 %349, 1
  %357 = icmp ult i64 %356, %344
  %358 = select i1 %357, i64 %344, i64 %356
  %359 = sub i64 %7, %341
  %360 = ashr exact i64 %359, 2
  %361 = icmp eq i64 %358, 0
  br i1 %361, label %371, label %362

362:                                              ; preds = %355
  %363 = icmp ugt i64 %358, 4611686018427387903
  br i1 %363, label %364, label %365

364:                                              ; preds = %362
  tail call void @abort() #12
  unreachable

365:                                              ; preds = %352, %362
  %366 = phi i64 [ 4611686018427387903, %352 ], [ %358, %362 ]
  %367 = phi i64 [ %354, %352 ], [ %360, %362 ]
  %368 = shl i64 %366, 2
  %369 = tail call i8* @_Znwm(i64 %368) #11
  %370 = bitcast i8* %369 to i32*
  br label %371

371:                                              ; preds = %365, %355
  %372 = phi i64 [ %367, %365 ], [ %360, %355 ]
  %373 = phi i64 [ %366, %365 ], [ 0, %355 ]
  %374 = phi i32* [ %370, %365 ], [ null, %355 ]
  %375 = getelementptr inbounds i32, i32* %374, i64 %372
  %376 = getelementptr inbounds i32, i32* %374, i64 %373
  %377 = ptrtoint i32* %376 to i64
  %378 = getelementptr inbounds i32, i32* %375, i64 %12
  %379 = add i64 %11, -4
  %380 = lshr i64 %379, 2
  %381 = add nuw nsw i64 %380, 1
  %382 = icmp ult i64 %381, 8
  br i1 %382, label %475, label %383

383:                                              ; preds = %371
  %384 = add i64 %11, -4
  %385 = lshr i64 %384, 2
  %386 = add nsw i64 %372, %385
  %387 = add i64 %386, 1
  %388 = getelementptr i32, i32* %374, i64 %387
  %389 = add nuw nsw i64 %385, 1
  %390 = getelementptr i32, i32* %2, i64 %389
  %391 = icmp ult i32* %375, %390
  %392 = icmp ugt i32* %388, %2
  %393 = and i1 %391, %392
  br i1 %393, label %475, label %394

394:                                              ; preds = %383
  %395 = and i64 %381, 9223372036854775800
  %396 = getelementptr i32, i32* %375, i64 %395
  %397 = getelementptr i32, i32* %2, i64 %395
  %398 = add nsw i64 %395, -8
  %399 = lshr exact i64 %398, 3
  %400 = add nuw nsw i64 %399, 1
  %401 = and i64 %400, 3
  %402 = icmp ult i64 %398, 24
  br i1 %402, label %454, label %403

403:                                              ; preds = %394
  %404 = sub nsw i64 %400, %401
  br label %405

405:                                              ; preds = %405, %403
  %406 = phi i64 [ 0, %403 ], [ %451, %405 ]
  %407 = phi i64 [ %404, %403 ], [ %452, %405 ]
  %408 = getelementptr i32, i32* %375, i64 %406
  %409 = getelementptr i32, i32* %2, i64 %406
  %410 = bitcast i32* %409 to <4 x i32>*
  %411 = load <4 x i32>, <4 x i32>* %410, align 4, !alias.scope !41
  %412 = getelementptr i32, i32* %409, i64 4
  %413 = bitcast i32* %412 to <4 x i32>*
  %414 = load <4 x i32>, <4 x i32>* %413, align 4, !alias.scope !41
  %415 = bitcast i32* %408 to <4 x i32>*
  store <4 x i32> %411, <4 x i32>* %415, align 4, !alias.scope !44, !noalias !41
  %416 = getelementptr i32, i32* %408, i64 4
  %417 = bitcast i32* %416 to <4 x i32>*
  store <4 x i32> %414, <4 x i32>* %417, align 4, !alias.scope !44, !noalias !41
  %418 = or i64 %406, 8
  %419 = getelementptr i32, i32* %375, i64 %418
  %420 = getelementptr i32, i32* %2, i64 %418
  %421 = bitcast i32* %420 to <4 x i32>*
  %422 = load <4 x i32>, <4 x i32>* %421, align 4, !alias.scope !41
  %423 = getelementptr i32, i32* %420, i64 4
  %424 = bitcast i32* %423 to <4 x i32>*
  %425 = load <4 x i32>, <4 x i32>* %424, align 4, !alias.scope !41
  %426 = bitcast i32* %419 to <4 x i32>*
  store <4 x i32> %422, <4 x i32>* %426, align 4, !alias.scope !44, !noalias !41
  %427 = getelementptr i32, i32* %419, i64 4
  %428 = bitcast i32* %427 to <4 x i32>*
  store <4 x i32> %425, <4 x i32>* %428, align 4, !alias.scope !44, !noalias !41
  %429 = or i64 %406, 16
  %430 = getelementptr i32, i32* %375, i64 %429
  %431 = getelementptr i32, i32* %2, i64 %429
  %432 = bitcast i32* %431 to <4 x i32>*
  %433 = load <4 x i32>, <4 x i32>* %432, align 4, !alias.scope !41
  %434 = getelementptr i32, i32* %431, i64 4
  %435 = bitcast i32* %434 to <4 x i32>*
  %436 = load <4 x i32>, <4 x i32>* %435, align 4, !alias.scope !41
  %437 = bitcast i32* %430 to <4 x i32>*
  store <4 x i32> %433, <4 x i32>* %437, align 4, !alias.scope !44, !noalias !41
  %438 = getelementptr i32, i32* %430, i64 4
  %439 = bitcast i32* %438 to <4 x i32>*
  store <4 x i32> %436, <4 x i32>* %439, align 4, !alias.scope !44, !noalias !41
  %440 = or i64 %406, 24
  %441 = getelementptr i32, i32* %375, i64 %440
  %442 = getelementptr i32, i32* %2, i64 %440
  %443 = bitcast i32* %442 to <4 x i32>*
  %444 = load <4 x i32>, <4 x i32>* %443, align 4, !alias.scope !41
  %445 = getelementptr i32, i32* %442, i64 4
  %446 = bitcast i32* %445 to <4 x i32>*
  %447 = load <4 x i32>, <4 x i32>* %446, align 4, !alias.scope !41
  %448 = bitcast i32* %441 to <4 x i32>*
  store <4 x i32> %444, <4 x i32>* %448, align 4, !alias.scope !44, !noalias !41
  %449 = getelementptr i32, i32* %441, i64 4
  %450 = bitcast i32* %449 to <4 x i32>*
  store <4 x i32> %447, <4 x i32>* %450, align 4, !alias.scope !44, !noalias !41
  %451 = add i64 %406, 32
  %452 = add i64 %407, -4
  %453 = icmp eq i64 %452, 0
  br i1 %453, label %454, label %405, !llvm.loop !46

454:                                              ; preds = %405, %394
  %455 = phi i64 [ 0, %394 ], [ %451, %405 ]
  %456 = icmp eq i64 %401, 0
  br i1 %456, label %473, label %457

457:                                              ; preds = %454, %457
  %458 = phi i64 [ %470, %457 ], [ %455, %454 ]
  %459 = phi i64 [ %471, %457 ], [ %401, %454 ]
  %460 = getelementptr i32, i32* %375, i64 %458
  %461 = getelementptr i32, i32* %2, i64 %458
  %462 = bitcast i32* %461 to <4 x i32>*
  %463 = load <4 x i32>, <4 x i32>* %462, align 4, !alias.scope !41
  %464 = getelementptr i32, i32* %461, i64 4
  %465 = bitcast i32* %464 to <4 x i32>*
  %466 = load <4 x i32>, <4 x i32>* %465, align 4, !alias.scope !41
  %467 = bitcast i32* %460 to <4 x i32>*
  store <4 x i32> %463, <4 x i32>* %467, align 4, !alias.scope !44, !noalias !41
  %468 = getelementptr i32, i32* %460, i64 4
  %469 = bitcast i32* %468 to <4 x i32>*
  store <4 x i32> %466, <4 x i32>* %469, align 4, !alias.scope !44, !noalias !41
  %470 = add i64 %458, 8
  %471 = add i64 %459, -1
  %472 = icmp eq i64 %471, 0
  br i1 %472, label %473, label %457, !llvm.loop !47

473:                                              ; preds = %457, %454
  %474 = icmp eq i64 %381, %395
  br i1 %474, label %529, label %475

475:                                              ; preds = %473, %383, %371
  %476 = phi i32* [ %375, %383 ], [ %375, %371 ], [ %396, %473 ]
  %477 = phi i32* [ %2, %383 ], [ %2, %371 ], [ %397, %473 ]
  %478 = ptrtoint i32* %476 to i64
  %479 = add nsw i64 %372, %12
  %480 = add nsw i64 %479, -1
  %481 = getelementptr i32, i32* %374, i64 %480
  %482 = ptrtoint i32* %481 to i64
  %483 = sub i64 %482, %478
  %484 = lshr i64 %483, 2
  %485 = add nuw nsw i64 %484, 1
  %486 = and i64 %485, 7
  %487 = icmp eq i64 %486, 0
  br i1 %487, label %497, label %488

488:                                              ; preds = %475, %488
  %489 = phi i32* [ %493, %488 ], [ %476, %475 ]
  %490 = phi i32* [ %494, %488 ], [ %477, %475 ]
  %491 = phi i64 [ %495, %488 ], [ %486, %475 ]
  %492 = load i32, i32* %490, align 4
  store i32 %492, i32* %489, align 4
  %493 = getelementptr inbounds i32, i32* %489, i64 1
  %494 = getelementptr inbounds i32, i32* %490, i64 1
  %495 = add i64 %491, -1
  %496 = icmp eq i64 %495, 0
  br i1 %496, label %497, label %488, !llvm.loop !48

497:                                              ; preds = %488, %475
  %498 = phi i32* [ %476, %475 ], [ %493, %488 ]
  %499 = phi i32* [ %477, %475 ], [ %494, %488 ]
  %500 = icmp ult i64 %483, 28
  br i1 %500, label %529, label %501

501:                                              ; preds = %497, %501
  %502 = phi i32* [ %526, %501 ], [ %498, %497 ]
  %503 = phi i32* [ %527, %501 ], [ %499, %497 ]
  %504 = load i32, i32* %503, align 4
  store i32 %504, i32* %502, align 4
  %505 = getelementptr inbounds i32, i32* %502, i64 1
  %506 = getelementptr inbounds i32, i32* %503, i64 1
  %507 = load i32, i32* %506, align 4
  store i32 %507, i32* %505, align 4
  %508 = getelementptr inbounds i32, i32* %502, i64 2
  %509 = getelementptr inbounds i32, i32* %503, i64 2
  %510 = load i32, i32* %509, align 4
  store i32 %510, i32* %508, align 4
  %511 = getelementptr inbounds i32, i32* %502, i64 3
  %512 = getelementptr inbounds i32, i32* %503, i64 3
  %513 = load i32, i32* %512, align 4
  store i32 %513, i32* %511, align 4
  %514 = getelementptr inbounds i32, i32* %502, i64 4
  %515 = getelementptr inbounds i32, i32* %503, i64 4
  %516 = load i32, i32* %515, align 4
  store i32 %516, i32* %514, align 4
  %517 = getelementptr inbounds i32, i32* %502, i64 5
  %518 = getelementptr inbounds i32, i32* %503, i64 5
  %519 = load i32, i32* %518, align 4
  store i32 %519, i32* %517, align 4
  %520 = getelementptr inbounds i32, i32* %502, i64 6
  %521 = getelementptr inbounds i32, i32* %503, i64 6
  %522 = load i32, i32* %521, align 4
  store i32 %522, i32* %520, align 4
  %523 = getelementptr inbounds i32, i32* %502, i64 7
  %524 = getelementptr inbounds i32, i32* %503, i64 7
  %525 = load i32, i32* %524, align 4
  store i32 %525, i32* %523, align 4
  %526 = getelementptr inbounds i32, i32* %502, i64 8
  %527 = getelementptr inbounds i32, i32* %503, i64 8
  %528 = icmp eq i32* %378, %526
  br i1 %528, label %529, label %501, !llvm.loop !49

529:                                              ; preds = %497, %501, %473
  %530 = load i32*, i32** %9, align 8
  %531 = ptrtoint i32* %530 to i64
  %532 = sub i64 %7, %531
  %533 = ashr exact i64 %532, 2
  %534 = sub nsw i64 0, %533
  %535 = getelementptr inbounds i32, i32* %375, i64 %534
  %536 = ptrtoint i32* %535 to i64
  %537 = icmp sgt i64 %532, 0
  br i1 %537, label %538, label %541

538:                                              ; preds = %529
  %539 = bitcast i32* %535 to i8*
  %540 = bitcast i32* %530 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %539, i8* align 4 %540, i64 %532, i1 false) #10
  br label %541

541:                                              ; preds = %538, %529
  %542 = load i32*, i32** %18, align 8
  %543 = icmp eq i32* %542, %1
  br i1 %543, label %699, label %544

544:                                              ; preds = %541
  %545 = getelementptr i32, i32* %542, i64 -1
  %546 = ptrtoint i32* %545 to i64
  %547 = sub i64 %546, %7
  %548 = lshr i64 %547, 2
  %549 = add nuw nsw i64 %548, 1
  %550 = icmp ult i64 %549, 8
  br i1 %550, label %646, label %551

551:                                              ; preds = %544
  %552 = add nsw i64 %372, %12
  %553 = getelementptr i32, i32* %542, i64 -1
  %554 = ptrtoint i32* %553 to i64
  %555 = sub i64 %554, %7
  %556 = lshr i64 %555, 2
  %557 = add nsw i64 %552, %556
  %558 = add i64 %557, 1
  %559 = getelementptr i32, i32* %374, i64 %558
  %560 = add nuw nsw i64 %556, 1
  %561 = getelementptr i32, i32* %1, i64 %560
  %562 = icmp ult i32* %378, %561
  %563 = icmp ugt i32* %559, %1
  %564 = and i1 %562, %563
  br i1 %564, label %646, label %565

565:                                              ; preds = %551
  %566 = and i64 %549, 9223372036854775800
  %567 = getelementptr i32, i32* %378, i64 %566
  %568 = getelementptr i32, i32* %1, i64 %566
  %569 = add nsw i64 %566, -8
  %570 = lshr exact i64 %569, 3
  %571 = add nuw nsw i64 %570, 1
  %572 = and i64 %571, 3
  %573 = icmp ult i64 %569, 24
  br i1 %573, label %625, label %574

574:                                              ; preds = %565
  %575 = sub nsw i64 %571, %572
  br label %576

576:                                              ; preds = %576, %574
  %577 = phi i64 [ 0, %574 ], [ %622, %576 ]
  %578 = phi i64 [ %575, %574 ], [ %623, %576 ]
  %579 = getelementptr i32, i32* %378, i64 %577
  %580 = getelementptr i32, i32* %1, i64 %577
  %581 = bitcast i32* %580 to <4 x i32>*
  %582 = load <4 x i32>, <4 x i32>* %581, align 4, !alias.scope !50
  %583 = getelementptr i32, i32* %580, i64 4
  %584 = bitcast i32* %583 to <4 x i32>*
  %585 = load <4 x i32>, <4 x i32>* %584, align 4, !alias.scope !50
  %586 = bitcast i32* %579 to <4 x i32>*
  store <4 x i32> %582, <4 x i32>* %586, align 4, !alias.scope !53, !noalias !50
  %587 = getelementptr i32, i32* %579, i64 4
  %588 = bitcast i32* %587 to <4 x i32>*
  store <4 x i32> %585, <4 x i32>* %588, align 4, !alias.scope !53, !noalias !50
  %589 = or i64 %577, 8
  %590 = getelementptr i32, i32* %378, i64 %589
  %591 = getelementptr i32, i32* %1, i64 %589
  %592 = bitcast i32* %591 to <4 x i32>*
  %593 = load <4 x i32>, <4 x i32>* %592, align 4, !alias.scope !50
  %594 = getelementptr i32, i32* %591, i64 4
  %595 = bitcast i32* %594 to <4 x i32>*
  %596 = load <4 x i32>, <4 x i32>* %595, align 4, !alias.scope !50
  %597 = bitcast i32* %590 to <4 x i32>*
  store <4 x i32> %593, <4 x i32>* %597, align 4, !alias.scope !53, !noalias !50
  %598 = getelementptr i32, i32* %590, i64 4
  %599 = bitcast i32* %598 to <4 x i32>*
  store <4 x i32> %596, <4 x i32>* %599, align 4, !alias.scope !53, !noalias !50
  %600 = or i64 %577, 16
  %601 = getelementptr i32, i32* %378, i64 %600
  %602 = getelementptr i32, i32* %1, i64 %600
  %603 = bitcast i32* %602 to <4 x i32>*
  %604 = load <4 x i32>, <4 x i32>* %603, align 4, !alias.scope !50
  %605 = getelementptr i32, i32* %602, i64 4
  %606 = bitcast i32* %605 to <4 x i32>*
  %607 = load <4 x i32>, <4 x i32>* %606, align 4, !alias.scope !50
  %608 = bitcast i32* %601 to <4 x i32>*
  store <4 x i32> %604, <4 x i32>* %608, align 4, !alias.scope !53, !noalias !50
  %609 = getelementptr i32, i32* %601, i64 4
  %610 = bitcast i32* %609 to <4 x i32>*
  store <4 x i32> %607, <4 x i32>* %610, align 4, !alias.scope !53, !noalias !50
  %611 = or i64 %577, 24
  %612 = getelementptr i32, i32* %378, i64 %611
  %613 = getelementptr i32, i32* %1, i64 %611
  %614 = bitcast i32* %613 to <4 x i32>*
  %615 = load <4 x i32>, <4 x i32>* %614, align 4, !alias.scope !50
  %616 = getelementptr i32, i32* %613, i64 4
  %617 = bitcast i32* %616 to <4 x i32>*
  %618 = load <4 x i32>, <4 x i32>* %617, align 4, !alias.scope !50
  %619 = bitcast i32* %612 to <4 x i32>*
  store <4 x i32> %615, <4 x i32>* %619, align 4, !alias.scope !53, !noalias !50
  %620 = getelementptr i32, i32* %612, i64 4
  %621 = bitcast i32* %620 to <4 x i32>*
  store <4 x i32> %618, <4 x i32>* %621, align 4, !alias.scope !53, !noalias !50
  %622 = add i64 %577, 32
  %623 = add i64 %578, -4
  %624 = icmp eq i64 %623, 0
  br i1 %624, label %625, label %576, !llvm.loop !55

625:                                              ; preds = %576, %565
  %626 = phi i64 [ 0, %565 ], [ %622, %576 ]
  %627 = icmp eq i64 %572, 0
  br i1 %627, label %644, label %628

628:                                              ; preds = %625, %628
  %629 = phi i64 [ %641, %628 ], [ %626, %625 ]
  %630 = phi i64 [ %642, %628 ], [ %572, %625 ]
  %631 = getelementptr i32, i32* %378, i64 %629
  %632 = getelementptr i32, i32* %1, i64 %629
  %633 = bitcast i32* %632 to <4 x i32>*
  %634 = load <4 x i32>, <4 x i32>* %633, align 4, !alias.scope !50
  %635 = getelementptr i32, i32* %632, i64 4
  %636 = bitcast i32* %635 to <4 x i32>*
  %637 = load <4 x i32>, <4 x i32>* %636, align 4, !alias.scope !50
  %638 = bitcast i32* %631 to <4 x i32>*
  store <4 x i32> %634, <4 x i32>* %638, align 4, !alias.scope !53, !noalias !50
  %639 = getelementptr i32, i32* %631, i64 4
  %640 = bitcast i32* %639 to <4 x i32>*
  store <4 x i32> %637, <4 x i32>* %640, align 4, !alias.scope !53, !noalias !50
  %641 = add i64 %629, 8
  %642 = add i64 %630, -1
  %643 = icmp eq i64 %642, 0
  br i1 %643, label %644, label %628, !llvm.loop !56

644:                                              ; preds = %628, %625
  %645 = icmp eq i64 %549, %566
  br i1 %645, label %699, label %646

646:                                              ; preds = %644, %551, %544
  %647 = phi i32* [ %378, %551 ], [ %378, %544 ], [ %567, %644 ]
  %648 = phi i32* [ %1, %551 ], [ %1, %544 ], [ %568, %644 ]
  %649 = ptrtoint i32* %648 to i64
  %650 = getelementptr i32, i32* %542, i64 -1
  %651 = ptrtoint i32* %650 to i64
  %652 = sub i64 %651, %649
  %653 = lshr i64 %652, 2
  %654 = add nuw nsw i64 %653, 1
  %655 = and i64 %654, 7
  %656 = icmp eq i64 %655, 0
  br i1 %656, label %666, label %657

657:                                              ; preds = %646, %657
  %658 = phi i32* [ %663, %657 ], [ %647, %646 ]
  %659 = phi i32* [ %662, %657 ], [ %648, %646 ]
  %660 = phi i64 [ %664, %657 ], [ %655, %646 ]
  %661 = load i32, i32* %659, align 4
  store i32 %661, i32* %658, align 4
  %662 = getelementptr inbounds i32, i32* %659, i64 1
  %663 = getelementptr inbounds i32, i32* %658, i64 1
  %664 = add i64 %660, -1
  %665 = icmp eq i64 %664, 0
  br i1 %665, label %666, label %657, !llvm.loop !57

666:                                              ; preds = %657, %646
  %667 = phi i32* [ undef, %646 ], [ %663, %657 ]
  %668 = phi i32* [ %647, %646 ], [ %663, %657 ]
  %669 = phi i32* [ %648, %646 ], [ %662, %657 ]
  %670 = icmp ult i64 %652, 28
  br i1 %670, label %699, label %671

671:                                              ; preds = %666, %671
  %672 = phi i32* [ %697, %671 ], [ %668, %666 ]
  %673 = phi i32* [ %696, %671 ], [ %669, %666 ]
  %674 = load i32, i32* %673, align 4
  store i32 %674, i32* %672, align 4
  %675 = getelementptr inbounds i32, i32* %673, i64 1
  %676 = getelementptr inbounds i32, i32* %672, i64 1
  %677 = load i32, i32* %675, align 4
  store i32 %677, i32* %676, align 4
  %678 = getelementptr inbounds i32, i32* %673, i64 2
  %679 = getelementptr inbounds i32, i32* %672, i64 2
  %680 = load i32, i32* %678, align 4
  store i32 %680, i32* %679, align 4
  %681 = getelementptr inbounds i32, i32* %673, i64 3
  %682 = getelementptr inbounds i32, i32* %672, i64 3
  %683 = load i32, i32* %681, align 4
  store i32 %683, i32* %682, align 4
  %684 = getelementptr inbounds i32, i32* %673, i64 4
  %685 = getelementptr inbounds i32, i32* %672, i64 4
  %686 = load i32, i32* %684, align 4
  store i32 %686, i32* %685, align 4
  %687 = getelementptr inbounds i32, i32* %673, i64 5
  %688 = getelementptr inbounds i32, i32* %672, i64 5
  %689 = load i32, i32* %687, align 4
  store i32 %689, i32* %688, align 4
  %690 = getelementptr inbounds i32, i32* %673, i64 6
  %691 = getelementptr inbounds i32, i32* %672, i64 6
  %692 = load i32, i32* %690, align 4
  store i32 %692, i32* %691, align 4
  %693 = getelementptr inbounds i32, i32* %673, i64 7
  %694 = getelementptr inbounds i32, i32* %672, i64 7
  %695 = load i32, i32* %693, align 4
  store i32 %695, i32* %694, align 4
  %696 = getelementptr inbounds i32, i32* %673, i64 8
  %697 = getelementptr inbounds i32, i32* %672, i64 8
  %698 = icmp eq i32* %696, %542
  br i1 %698, label %699, label %671, !llvm.loop !58

699:                                              ; preds = %666, %671, %644, %541
  %700 = phi i32* [ %378, %541 ], [ %567, %644 ], [ %667, %666 ], [ %697, %671 ]
  %701 = ptrtoint i32* %700 to i64
  %702 = load i32*, i32** %9, align 8
  store i64 %536, i64* %340, align 8
  store i64 %701, i64* %24, align 8
  store i64 %377, i64* %16, align 8
  %703 = icmp eq i32* %702, null
  br i1 %703, label %706, label %704

704:                                              ; preds = %699
  %705 = bitcast i32* %702 to i8*
  tail call void @_ZdlPv(i8* %705) #11
  br label %706

706:                                              ; preds = %704, %699, %191, %334, %338, %4
  %707 = phi i32* [ %1, %4 ], [ %1, %338 ], [ %1, %334 ], [ %1, %191 ], [ %375, %699 ], [ %375, %704 ]
  ret i32* %707
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN3jxl4jpeg12_GLOBAL__N_120EncodeRefinementBitsEPKsRKNS0_16HuffmanCodeTableEiiiPNS0_14DCTCodingStateEPNS0_13JpegBitWriterE(i16* nocapture readonly, %"struct.jxl::jpeg::HuffmanCodeTable"* dereferenceable(2048), i32, i32, i32, %"struct.jxl::jpeg::DCTCodingState"*, %"struct.jxl::jpeg::JpegBitWriter"*) unnamed_addr #0 {
  %8 = alloca [64 x i32], align 16
  %9 = alloca %"class.std::__1::vector.86", align 8
  %10 = icmp sgt i32 %2, 0
  %11 = icmp eq i32 %2, 0
  br i1 %11, label %12, label %177

12:                                               ; preds = %7
  %13 = load i16, i16* %0, align 2
  %14 = sext i16 %13 to i32
  %15 = lshr i32 %14, %4
  %16 = and i32 %15, 1
  %17 = zext i32 %16 to i64
  %18 = getelementptr inbounds %"struct.jxl::jpeg::JpegBitWriter", %"struct.jxl::jpeg::JpegBitWriter"* %6, i64 0, i32 7
  %19 = load i32, i32* %18, align 8
  %20 = add nsw i32 %19, -1
  store i32 %20, i32* %18, align 8
  %21 = zext i32 %20 to i64
  %22 = shl i64 %17, %21
  %23 = getelementptr inbounds %"struct.jxl::jpeg::JpegBitWriter", %"struct.jxl::jpeg::JpegBitWriter"* %6, i64 0, i32 6
  %24 = load i64, i64* %23, align 8
  %25 = or i64 %22, %24
  store i64 %25, i64* %23, align 8
  %26 = icmp slt i32 %19, 18
  br i1 %26, label %27, label %177

27:                                               ; preds = %12
  %28 = getelementptr inbounds %"struct.jxl::jpeg::JpegBitWriter", %"struct.jxl::jpeg::JpegBitWriter"* %6, i64 0, i32 5
  %29 = load i64, i64* %28, align 8
  %30 = add i64 %29, 12
  %31 = icmp ugt i64 %30, 16384
  br i1 %31, label %32, label %35, !prof !23

32:                                               ; preds = %27
  tail call fastcc void @_ZN3jxl4jpeg12_GLOBAL__N_110SwapBufferEPNS0_13JpegBitWriterE(%"struct.jxl::jpeg::JpegBitWriter"* %6) #10
  %33 = load i64, i64* %28, align 8
  %34 = load i64, i64* %23, align 8
  br label %35

35:                                               ; preds = %32, %27
  %36 = phi i64 [ %25, %27 ], [ %34, %32 ]
  %37 = phi i64 [ %29, %27 ], [ %33, %32 ]
  %38 = or i64 %36, 65535
  %39 = xor i64 %38, -65536
  %40 = add i64 %39, -72340172838076673
  %41 = and i64 %39, -9187201950435770368
  %42 = xor i64 %41, -9187201950435770368
  %43 = and i64 %42, %40
  %44 = icmp eq i64 %43, 0
  %45 = lshr i64 %36, 56
  %46 = trunc i64 %45 to i8
  %47 = getelementptr inbounds %"struct.jxl::jpeg::JpegBitWriter", %"struct.jxl::jpeg::JpegBitWriter"* %6, i64 0, i32 4
  %48 = load i8*, i8** %47, align 8
  br i1 %44, label %133, label %49

49:                                               ; preds = %35
  %50 = add i64 %37, 1
  store i64 %50, i64* %28, align 8
  %51 = getelementptr inbounds i8, i8* %48, i64 %37
  store i8 %46, i8* %51, align 1
  %52 = icmp eq i64 %45, 255
  br i1 %52, label %53, label %58

53:                                               ; preds = %49
  %54 = load i8*, i8** %47, align 8
  %55 = load i64, i64* %28, align 8
  %56 = add i64 %55, 1
  store i64 %56, i64* %28, align 8
  %57 = getelementptr inbounds i8, i8* %54, i64 %55
  store i8 0, i8* %57, align 1
  br label %58

58:                                               ; preds = %53, %49
  %59 = load i64, i64* %23, align 8
  %60 = lshr i64 %59, 48
  %61 = trunc i64 %60 to i8
  %62 = load i8*, i8** %47, align 8
  %63 = load i64, i64* %28, align 8
  %64 = add i64 %63, 1
  store i64 %64, i64* %28, align 8
  %65 = getelementptr inbounds i8, i8* %62, i64 %63
  store i8 %61, i8* %65, align 1
  %66 = and i64 %59, 71776119061217280
  %67 = icmp eq i64 %66, 71776119061217280
  br i1 %67, label %68, label %73

68:                                               ; preds = %58
  %69 = load i8*, i8** %47, align 8
  %70 = load i64, i64* %28, align 8
  %71 = add i64 %70, 1
  store i64 %71, i64* %28, align 8
  %72 = getelementptr inbounds i8, i8* %69, i64 %70
  store i8 0, i8* %72, align 1
  br label %73

73:                                               ; preds = %68, %58
  %74 = load i64, i64* %23, align 8
  %75 = lshr i64 %74, 40
  %76 = trunc i64 %75 to i8
  %77 = load i8*, i8** %47, align 8
  %78 = load i64, i64* %28, align 8
  %79 = add i64 %78, 1
  store i64 %79, i64* %28, align 8
  %80 = getelementptr inbounds i8, i8* %77, i64 %78
  store i8 %76, i8* %80, align 1
  %81 = and i64 %74, 280375465082880
  %82 = icmp eq i64 %81, 280375465082880
  br i1 %82, label %83, label %88

83:                                               ; preds = %73
  %84 = load i8*, i8** %47, align 8
  %85 = load i64, i64* %28, align 8
  %86 = add i64 %85, 1
  store i64 %86, i64* %28, align 8
  %87 = getelementptr inbounds i8, i8* %84, i64 %85
  store i8 0, i8* %87, align 1
  br label %88

88:                                               ; preds = %83, %73
  %89 = load i64, i64* %23, align 8
  %90 = lshr i64 %89, 32
  %91 = trunc i64 %90 to i8
  %92 = load i8*, i8** %47, align 8
  %93 = load i64, i64* %28, align 8
  %94 = add i64 %93, 1
  store i64 %94, i64* %28, align 8
  %95 = getelementptr inbounds i8, i8* %92, i64 %93
  store i8 %91, i8* %95, align 1
  %96 = and i64 %89, 1095216660480
  %97 = icmp eq i64 %96, 1095216660480
  br i1 %97, label %98, label %103

98:                                               ; preds = %88
  %99 = load i8*, i8** %47, align 8
  %100 = load i64, i64* %28, align 8
  %101 = add i64 %100, 1
  store i64 %101, i64* %28, align 8
  %102 = getelementptr inbounds i8, i8* %99, i64 %100
  store i8 0, i8* %102, align 1
  br label %103

103:                                              ; preds = %98, %88
  %104 = load i64, i64* %23, align 8
  %105 = lshr i64 %104, 24
  %106 = trunc i64 %105 to i8
  %107 = load i8*, i8** %47, align 8
  %108 = load i64, i64* %28, align 8
  %109 = add i64 %108, 1
  store i64 %109, i64* %28, align 8
  %110 = getelementptr inbounds i8, i8* %107, i64 %108
  store i8 %106, i8* %110, align 1
  %111 = and i64 %104, 4278190080
  %112 = icmp eq i64 %111, 4278190080
  br i1 %112, label %113, label %118

113:                                              ; preds = %103
  %114 = load i8*, i8** %47, align 8
  %115 = load i64, i64* %28, align 8
  %116 = add i64 %115, 1
  store i64 %116, i64* %28, align 8
  %117 = getelementptr inbounds i8, i8* %114, i64 %115
  store i8 0, i8* %117, align 1
  br label %118

118:                                              ; preds = %113, %103
  %119 = load i64, i64* %23, align 8
  %120 = lshr i64 %119, 16
  %121 = trunc i64 %120 to i8
  %122 = load i8*, i8** %47, align 8
  %123 = load i64, i64* %28, align 8
  %124 = add i64 %123, 1
  store i64 %124, i64* %28, align 8
  %125 = getelementptr inbounds i8, i8* %122, i64 %123
  store i8 %121, i8* %125, align 1
  %126 = and i64 %119, 16711680
  %127 = icmp eq i64 %126, 16711680
  br i1 %127, label %128, label %172

128:                                              ; preds = %118
  %129 = load i8*, i8** %47, align 8
  %130 = load i64, i64* %28, align 8
  %131 = add i64 %130, 1
  store i64 %131, i64* %28, align 8
  %132 = getelementptr inbounds i8, i8* %129, i64 %130
  store i8 0, i8* %132, align 1
  br label %172

133:                                              ; preds = %35
  %134 = getelementptr inbounds i8, i8* %48, i64 %37
  store i8 %46, i8* %134, align 1
  %135 = load i64, i64* %23, align 8
  %136 = lshr i64 %135, 48
  %137 = trunc i64 %136 to i8
  %138 = load i8*, i8** %47, align 8
  %139 = load i64, i64* %28, align 8
  %140 = add i64 %139, 1
  %141 = getelementptr inbounds i8, i8* %138, i64 %140
  store i8 %137, i8* %141, align 1
  %142 = load i64, i64* %23, align 8
  %143 = lshr i64 %142, 40
  %144 = trunc i64 %143 to i8
  %145 = load i8*, i8** %47, align 8
  %146 = load i64, i64* %28, align 8
  %147 = add i64 %146, 2
  %148 = getelementptr inbounds i8, i8* %145, i64 %147
  store i8 %144, i8* %148, align 1
  %149 = load i64, i64* %23, align 8
  %150 = lshr i64 %149, 32
  %151 = trunc i64 %150 to i8
  %152 = load i8*, i8** %47, align 8
  %153 = load i64, i64* %28, align 8
  %154 = add i64 %153, 3
  %155 = getelementptr inbounds i8, i8* %152, i64 %154
  store i8 %151, i8* %155, align 1
  %156 = load i64, i64* %23, align 8
  %157 = lshr i64 %156, 24
  %158 = trunc i64 %157 to i8
  %159 = load i8*, i8** %47, align 8
  %160 = load i64, i64* %28, align 8
  %161 = add i64 %160, 4
  %162 = getelementptr inbounds i8, i8* %159, i64 %161
  store i8 %158, i8* %162, align 1
  %163 = load i64, i64* %23, align 8
  %164 = lshr i64 %163, 16
  %165 = trunc i64 %164 to i8
  %166 = load i8*, i8** %47, align 8
  %167 = load i64, i64* %28, align 8
  %168 = add i64 %167, 5
  %169 = getelementptr inbounds i8, i8* %166, i64 %168
  store i8 %165, i8* %169, align 1
  %170 = load i64, i64* %28, align 8
  %171 = add i64 %170, 6
  store i64 %171, i64* %28, align 8
  br label %172

172:                                              ; preds = %133, %128, %118
  %173 = load i64, i64* %23, align 8
  %174 = shl i64 %173, 48
  store i64 %174, i64* %23, align 8
  %175 = load i32, i32* %18, align 8
  %176 = add nsw i32 %175, 48
  store i32 %176, i32* %18, align 8
  br label %177

177:                                              ; preds = %172, %12, %7
  %178 = phi i32 [ %2, %7 ], [ 1, %12 ], [ 1, %172 ]
  %179 = icmp sgt i32 %178, %3
  br i1 %179, label %3313, label %180

180:                                              ; preds = %177
  %181 = bitcast [64 x i32]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %181) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %181, i8 -86, i64 256, i1 false)
  %182 = sext i32 %178 to i64
  %183 = sext i32 %3 to i64
  br label %213

184:                                              ; preds = %213
  %185 = bitcast %"class.std::__1::vector.86"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %185) #10
  %186 = getelementptr inbounds %"class.std::__1::vector.86", %"class.std::__1::vector.86"* %9, i64 0, i32 0, i32 0
  %187 = getelementptr inbounds %"class.std::__1::vector.86", %"class.std::__1::vector.86"* %9, i64 0, i32 0, i32 1
  %188 = getelementptr inbounds %"class.std::__1::vector.86", %"class.std::__1::vector.86"* %9, i64 0, i32 0, i32 2, i32 0, i32 0
  %189 = bitcast i32** %188 to i64*
  %190 = bitcast %"class.std::__1::vector.86"* %9 to i64*
  %191 = bitcast i32** %187 to i64*
  %192 = tail call i8* @_Znwm(i64 256) #11
  %193 = bitcast i8* %192 to i32*
  %194 = ptrtoint i8* %192 to i64
  %195 = getelementptr inbounds i8, i8* %192, i64 256
  %196 = ptrtoint i8* %195 to i64
  %197 = ptrtoint i8* %192 to i64
  store i64 %197, i64* %190, align 8
  store i64 %194, i64* %191, align 8
  store i64 %196, i64* %189, align 8
  %198 = getelementptr inbounds %"struct.jxl::jpeg::DCTCodingState", %"struct.jxl::jpeg::DCTCodingState"* %5, i64 0, i32 0
  %199 = getelementptr inbounds %"struct.jxl::jpeg::DCTCodingState", %"struct.jxl::jpeg::DCTCodingState"* %5, i64 0, i32 1
  %200 = getelementptr inbounds %"struct.jxl::jpeg::JpegBitWriter", %"struct.jxl::jpeg::JpegBitWriter"* %6, i64 0, i32 7
  %201 = getelementptr inbounds %"struct.jxl::jpeg::JpegBitWriter", %"struct.jxl::jpeg::JpegBitWriter"* %6, i64 0, i32 6
  %202 = getelementptr inbounds %"struct.jxl::jpeg::JpegBitWriter", %"struct.jxl::jpeg::JpegBitWriter"* %6, i64 0, i32 5
  %203 = getelementptr inbounds %"struct.jxl::jpeg::JpegBitWriter", %"struct.jxl::jpeg::JpegBitWriter"* %6, i64 0, i32 4
  %204 = getelementptr inbounds %"struct.jxl::jpeg::JpegBitWriter", %"struct.jxl::jpeg::JpegBitWriter"* %6, i64 0, i32 0
  %205 = getelementptr inbounds %"struct.jxl::jpeg::DCTCodingState", %"struct.jxl::jpeg::DCTCodingState"* %5, i64 0, i32 2
  %206 = getelementptr inbounds %"struct.jxl::jpeg::DCTCodingState", %"struct.jxl::jpeg::DCTCodingState"* %5, i64 0, i32 2, i32 0, i32 1
  %207 = bitcast i32** %206 to i64*
  %208 = bitcast %"class.std::__1::vector.86"* %205 to i64*
  %209 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanCodeTable", %"struct.jxl::jpeg::HuffmanCodeTable"* %1, i64 0, i32 0, i64 240
  %210 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanCodeTable", %"struct.jxl::jpeg::HuffmanCodeTable"* %1, i64 0, i32 1, i64 240
  %211 = bitcast i32** %187 to i64*
  %212 = sext i32 %229 to i64
  br label %237

213:                                              ; preds = %213, %180
  %214 = phi i64 [ %230, %213 ], [ %182, %180 ]
  %215 = phi i32 [ %229, %213 ], [ 0, %180 ]
  %216 = getelementptr inbounds [80 x i32], [80 x i32]* @_ZN3jxl4jpegL17kJPEGNaturalOrderE, i64 0, i64 %214
  %217 = load i32, i32* %216, align 4
  %218 = zext i32 %217 to i64
  %219 = getelementptr inbounds i16, i16* %0, i64 %218
  %220 = load i16, i16* %219, align 2
  %221 = icmp slt i16 %220, 0
  %222 = sub i16 0, %220
  %223 = select i1 %221, i16 %222, i16 %220
  %224 = sext i16 %223 to i32
  %225 = ashr i32 %224, %4
  %226 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 %214
  store i32 %225, i32* %226, align 4
  %227 = icmp eq i32 %225, 1
  %228 = trunc i64 %214 to i32
  %229 = select i1 %227, i32 %228, i32 %215
  %230 = add nsw i64 %214, 1
  %231 = icmp slt i64 %214, %183
  br i1 %231, label %213, label %184

232:                                              ; preds = %2195
  %233 = icmp slt i32 %2200, 1
  %234 = load i32*, i32** %186, align 8
  %235 = icmp eq i32* %234, %2197
  %236 = and i1 %233, %235
  br i1 %236, label %3305, label %2203

237:                                              ; preds = %2195, %184
  %238 = phi i32* [ %2196, %2195 ], [ %193, %184 ]
  %239 = phi i32* [ %2197, %2195 ], [ %193, %184 ]
  %240 = phi i64 [ %2198, %2195 ], [ %194, %184 ]
  %241 = phi i32* [ %2199, %2195 ], [ %193, %184 ]
  %242 = phi i64 [ %2201, %2195 ], [ %182, %184 ]
  %243 = phi i32 [ %2200, %2195 ], [ 0, %184 ]
  %244 = getelementptr inbounds [64 x i32], [64 x i32]* %8, i64 0, i64 %242
  %245 = load i32, i32* %244, align 4
  %246 = icmp eq i32 %245, 0
  br i1 %246, label %251, label %247

247:                                              ; preds = %237
  %248 = icmp slt i32 %243, 16
  %249 = icmp sgt i64 %242, %212
  %250 = or i1 %249, %248
  br i1 %250, label %1111, label %253

251:                                              ; preds = %237
  %252 = add nsw i32 %243, 1
  br label %2195

253:                                              ; preds = %247, %942
  %254 = phi i32 [ %932, %942 ], [ %243, %247 ]
  %255 = load i32, i32* %198, align 8
  %256 = icmp sgt i32 %255, 0
  br i1 %256, label %257, label %590

257:                                              ; preds = %253
  %258 = tail call i32 @llvm.ctlz.i32(i32 %255, i1 true) #10, !range !22
  %259 = xor i32 %258, 31
  %260 = shl nuw nsw i32 %259, 4
  %261 = load %"struct.jxl::jpeg::HuffmanCodeTable"*, %"struct.jxl::jpeg::HuffmanCodeTable"** %199, align 8
  %262 = zext i32 %260 to i64
  %263 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanCodeTable", %"struct.jxl::jpeg::HuffmanCodeTable"* %261, i64 0, i32 0, i64 %262
  %264 = load i32, i32* %263, align 4
  %265 = icmp eq i32 %264, 0
  br i1 %265, label %266, label %267

266:                                              ; preds = %257
  store i8 0, i8* %204, align 8
  br label %426

267:                                              ; preds = %257
  %268 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanCodeTable", %"struct.jxl::jpeg::HuffmanCodeTable"* %261, i64 0, i32 1, i64 %262
  %269 = load i32, i32* %268, align 4
  %270 = sext i32 %269 to i64
  %271 = load i32, i32* %200, align 8
  %272 = sub nsw i32 %271, %264
  store i32 %272, i32* %200, align 8
  %273 = zext i32 %272 to i64
  %274 = shl i64 %270, %273
  %275 = load i64, i64* %201, align 8
  %276 = or i64 %274, %275
  store i64 %276, i64* %201, align 8
  %277 = icmp slt i32 %272, 17
  br i1 %277, label %278, label %426

278:                                              ; preds = %267
  %279 = load i64, i64* %202, align 8
  %280 = add i64 %279, 12
  %281 = icmp ugt i64 %280, 16384
  br i1 %281, label %282, label %285, !prof !23

282:                                              ; preds = %278
  tail call fastcc void @_ZN3jxl4jpeg12_GLOBAL__N_110SwapBufferEPNS0_13JpegBitWriterE(%"struct.jxl::jpeg::JpegBitWriter"* %6) #10
  %283 = load i64, i64* %202, align 8
  %284 = load i64, i64* %201, align 8
  br label %285

285:                                              ; preds = %282, %278
  %286 = phi i64 [ %276, %278 ], [ %284, %282 ]
  %287 = phi i64 [ %279, %278 ], [ %283, %282 ]
  %288 = or i64 %286, 65535
  %289 = xor i64 %288, -65536
  %290 = add i64 %289, -72340172838076673
  %291 = and i64 %289, -9187201950435770368
  %292 = xor i64 %291, -9187201950435770368
  %293 = and i64 %292, %290
  %294 = icmp eq i64 %293, 0
  %295 = lshr i64 %286, 56
  %296 = trunc i64 %295 to i8
  %297 = load i8*, i8** %203, align 8
  br i1 %294, label %382, label %298

298:                                              ; preds = %285
  %299 = add i64 %287, 1
  store i64 %299, i64* %202, align 8
  %300 = getelementptr inbounds i8, i8* %297, i64 %287
  store i8 %296, i8* %300, align 1
  %301 = icmp eq i64 %295, 255
  br i1 %301, label %302, label %307

302:                                              ; preds = %298
  %303 = load i8*, i8** %203, align 8
  %304 = load i64, i64* %202, align 8
  %305 = add i64 %304, 1
  store i64 %305, i64* %202, align 8
  %306 = getelementptr inbounds i8, i8* %303, i64 %304
  store i8 0, i8* %306, align 1
  br label %307

307:                                              ; preds = %302, %298
  %308 = load i64, i64* %201, align 8
  %309 = lshr i64 %308, 48
  %310 = trunc i64 %309 to i8
  %311 = load i8*, i8** %203, align 8
  %312 = load i64, i64* %202, align 8
  %313 = add i64 %312, 1
  store i64 %313, i64* %202, align 8
  %314 = getelementptr inbounds i8, i8* %311, i64 %312
  store i8 %310, i8* %314, align 1
  %315 = and i64 %308, 71776119061217280
  %316 = icmp eq i64 %315, 71776119061217280
  br i1 %316, label %317, label %322

317:                                              ; preds = %307
  %318 = load i8*, i8** %203, align 8
  %319 = load i64, i64* %202, align 8
  %320 = add i64 %319, 1
  store i64 %320, i64* %202, align 8
  %321 = getelementptr inbounds i8, i8* %318, i64 %319
  store i8 0, i8* %321, align 1
  br label %322

322:                                              ; preds = %317, %307
  %323 = load i64, i64* %201, align 8
  %324 = lshr i64 %323, 40
  %325 = trunc i64 %324 to i8
  %326 = load i8*, i8** %203, align 8
  %327 = load i64, i64* %202, align 8
  %328 = add i64 %327, 1
  store i64 %328, i64* %202, align 8
  %329 = getelementptr inbounds i8, i8* %326, i64 %327
  store i8 %325, i8* %329, align 1
  %330 = and i64 %323, 280375465082880
  %331 = icmp eq i64 %330, 280375465082880
  br i1 %331, label %332, label %337

332:                                              ; preds = %322
  %333 = load i8*, i8** %203, align 8
  %334 = load i64, i64* %202, align 8
  %335 = add i64 %334, 1
  store i64 %335, i64* %202, align 8
  %336 = getelementptr inbounds i8, i8* %333, i64 %334
  store i8 0, i8* %336, align 1
  br label %337

337:                                              ; preds = %332, %322
  %338 = load i64, i64* %201, align 8
  %339 = lshr i64 %338, 32
  %340 = trunc i64 %339 to i8
  %341 = load i8*, i8** %203, align 8
  %342 = load i64, i64* %202, align 8
  %343 = add i64 %342, 1
  store i64 %343, i64* %202, align 8
  %344 = getelementptr inbounds i8, i8* %341, i64 %342
  store i8 %340, i8* %344, align 1
  %345 = and i64 %338, 1095216660480
  %346 = icmp eq i64 %345, 1095216660480
  br i1 %346, label %347, label %352

347:                                              ; preds = %337
  %348 = load i8*, i8** %203, align 8
  %349 = load i64, i64* %202, align 8
  %350 = add i64 %349, 1
  store i64 %350, i64* %202, align 8
  %351 = getelementptr inbounds i8, i8* %348, i64 %349
  store i8 0, i8* %351, align 1
  br label %352

352:                                              ; preds = %347, %337
  %353 = load i64, i64* %201, align 8
  %354 = lshr i64 %353, 24
  %355 = trunc i64 %354 to i8
  %356 = load i8*, i8** %203, align 8
  %357 = load i64, i64* %202, align 8
  %358 = add i64 %357, 1
  store i64 %358, i64* %202, align 8
  %359 = getelementptr inbounds i8, i8* %356, i64 %357
  store i8 %355, i8* %359, align 1
  %360 = and i64 %353, 4278190080
  %361 = icmp eq i64 %360, 4278190080
  br i1 %361, label %362, label %367

362:                                              ; preds = %352
  %363 = load i8*, i8** %203, align 8
  %364 = load i64, i64* %202, align 8
  %365 = add i64 %364, 1
  store i64 %365, i64* %202, align 8
  %366 = getelementptr inbounds i8, i8* %363, i64 %364
  store i8 0, i8* %366, align 1
  br label %367

367:                                              ; preds = %362, %352
  %368 = load i64, i64* %201, align 8
  %369 = lshr i64 %368, 16
  %370 = trunc i64 %369 to i8
  %371 = load i8*, i8** %203, align 8
  %372 = load i64, i64* %202, align 8
  %373 = add i64 %372, 1
  store i64 %373, i64* %202, align 8
  %374 = getelementptr inbounds i8, i8* %371, i64 %372
  store i8 %370, i8* %374, align 1
  %375 = and i64 %368, 16711680
  %376 = icmp eq i64 %375, 16711680
  br i1 %376, label %377, label %421

377:                                              ; preds = %367
  %378 = load i8*, i8** %203, align 8
  %379 = load i64, i64* %202, align 8
  %380 = add i64 %379, 1
  store i64 %380, i64* %202, align 8
  %381 = getelementptr inbounds i8, i8* %378, i64 %379
  store i8 0, i8* %381, align 1
  br label %421

382:                                              ; preds = %285
  %383 = getelementptr inbounds i8, i8* %297, i64 %287
  store i8 %296, i8* %383, align 1
  %384 = load i64, i64* %201, align 8
  %385 = lshr i64 %384, 48
  %386 = trunc i64 %385 to i8
  %387 = load i8*, i8** %203, align 8
  %388 = load i64, i64* %202, align 8
  %389 = add i64 %388, 1
  %390 = getelementptr inbounds i8, i8* %387, i64 %389
  store i8 %386, i8* %390, align 1
  %391 = load i64, i64* %201, align 8
  %392 = lshr i64 %391, 40
  %393 = trunc i64 %392 to i8
  %394 = load i8*, i8** %203, align 8
  %395 = load i64, i64* %202, align 8
  %396 = add i64 %395, 2
  %397 = getelementptr inbounds i8, i8* %394, i64 %396
  store i8 %393, i8* %397, align 1
  %398 = load i64, i64* %201, align 8
  %399 = lshr i64 %398, 32
  %400 = trunc i64 %399 to i8
  %401 = load i8*, i8** %203, align 8
  %402 = load i64, i64* %202, align 8
  %403 = add i64 %402, 3
  %404 = getelementptr inbounds i8, i8* %401, i64 %403
  store i8 %400, i8* %404, align 1
  %405 = load i64, i64* %201, align 8
  %406 = lshr i64 %405, 24
  %407 = trunc i64 %406 to i8
  %408 = load i8*, i8** %203, align 8
  %409 = load i64, i64* %202, align 8
  %410 = add i64 %409, 4
  %411 = getelementptr inbounds i8, i8* %408, i64 %410
  store i8 %407, i8* %411, align 1
  %412 = load i64, i64* %201, align 8
  %413 = lshr i64 %412, 16
  %414 = trunc i64 %413 to i8
  %415 = load i8*, i8** %203, align 8
  %416 = load i64, i64* %202, align 8
  %417 = add i64 %416, 5
  %418 = getelementptr inbounds i8, i8* %415, i64 %417
  store i8 %414, i8* %418, align 1
  %419 = load i64, i64* %202, align 8
  %420 = add i64 %419, 6
  store i64 %420, i64* %202, align 8
  br label %421

421:                                              ; preds = %382, %377, %367
  %422 = load i64, i64* %201, align 8
  %423 = shl i64 %422, 48
  store i64 %423, i64* %201, align 8
  %424 = load i32, i32* %200, align 8
  %425 = add nsw i32 %424, 48
  store i32 %425, i32* %200, align 8
  br label %426

426:                                              ; preds = %421, %267, %266
  %427 = icmp eq i32 %259, 0
  br i1 %427, label %589, label %428

428:                                              ; preds = %426
  %429 = load i32, i32* %198, align 8
  %430 = shl nsw i32 -1, %259
  %431 = xor i32 %430, -1
  %432 = and i32 %429, %431
  %433 = sext i32 %432 to i64
  %434 = load i32, i32* %200, align 8
  %435 = sub nsw i32 %434, %259
  store i32 %435, i32* %200, align 8
  %436 = zext i32 %435 to i64
  %437 = shl i64 %433, %436
  %438 = load i64, i64* %201, align 8
  %439 = or i64 %437, %438
  store i64 %439, i64* %201, align 8
  %440 = icmp slt i32 %435, 17
  br i1 %440, label %441, label %589

441:                                              ; preds = %428
  %442 = load i64, i64* %202, align 8
  %443 = add i64 %442, 12
  %444 = icmp ugt i64 %443, 16384
  br i1 %444, label %445, label %448, !prof !23

445:                                              ; preds = %441
  tail call fastcc void @_ZN3jxl4jpeg12_GLOBAL__N_110SwapBufferEPNS0_13JpegBitWriterE(%"struct.jxl::jpeg::JpegBitWriter"* %6) #10
  %446 = load i64, i64* %202, align 8
  %447 = load i64, i64* %201, align 8
  br label %448

448:                                              ; preds = %445, %441
  %449 = phi i64 [ %439, %441 ], [ %447, %445 ]
  %450 = phi i64 [ %442, %441 ], [ %446, %445 ]
  %451 = or i64 %449, 65535
  %452 = xor i64 %451, -65536
  %453 = add i64 %452, -72340172838076673
  %454 = and i64 %452, -9187201950435770368
  %455 = xor i64 %454, -9187201950435770368
  %456 = and i64 %455, %453
  %457 = icmp eq i64 %456, 0
  %458 = lshr i64 %449, 56
  %459 = trunc i64 %458 to i8
  %460 = load i8*, i8** %203, align 8
  br i1 %457, label %545, label %461

461:                                              ; preds = %448
  %462 = add i64 %450, 1
  store i64 %462, i64* %202, align 8
  %463 = getelementptr inbounds i8, i8* %460, i64 %450
  store i8 %459, i8* %463, align 1
  %464 = icmp eq i64 %458, 255
  br i1 %464, label %465, label %470

465:                                              ; preds = %461
  %466 = load i8*, i8** %203, align 8
  %467 = load i64, i64* %202, align 8
  %468 = add i64 %467, 1
  store i64 %468, i64* %202, align 8
  %469 = getelementptr inbounds i8, i8* %466, i64 %467
  store i8 0, i8* %469, align 1
  br label %470

470:                                              ; preds = %465, %461
  %471 = load i64, i64* %201, align 8
  %472 = lshr i64 %471, 48
  %473 = trunc i64 %472 to i8
  %474 = load i8*, i8** %203, align 8
  %475 = load i64, i64* %202, align 8
  %476 = add i64 %475, 1
  store i64 %476, i64* %202, align 8
  %477 = getelementptr inbounds i8, i8* %474, i64 %475
  store i8 %473, i8* %477, align 1
  %478 = and i64 %471, 71776119061217280
  %479 = icmp eq i64 %478, 71776119061217280
  br i1 %479, label %480, label %485

480:                                              ; preds = %470
  %481 = load i8*, i8** %203, align 8
  %482 = load i64, i64* %202, align 8
  %483 = add i64 %482, 1
  store i64 %483, i64* %202, align 8
  %484 = getelementptr inbounds i8, i8* %481, i64 %482
  store i8 0, i8* %484, align 1
  br label %485

485:                                              ; preds = %480, %470
  %486 = load i64, i64* %201, align 8
  %487 = lshr i64 %486, 40
  %488 = trunc i64 %487 to i8
  %489 = load i8*, i8** %203, align 8
  %490 = load i64, i64* %202, align 8
  %491 = add i64 %490, 1
  store i64 %491, i64* %202, align 8
  %492 = getelementptr inbounds i8, i8* %489, i64 %490
  store i8 %488, i8* %492, align 1
  %493 = and i64 %486, 280375465082880
  %494 = icmp eq i64 %493, 280375465082880
  br i1 %494, label %495, label %500

495:                                              ; preds = %485
  %496 = load i8*, i8** %203, align 8
  %497 = load i64, i64* %202, align 8
  %498 = add i64 %497, 1
  store i64 %498, i64* %202, align 8
  %499 = getelementptr inbounds i8, i8* %496, i64 %497
  store i8 0, i8* %499, align 1
  br label %500

500:                                              ; preds = %495, %485
  %501 = load i64, i64* %201, align 8
  %502 = lshr i64 %501, 32
  %503 = trunc i64 %502 to i8
  %504 = load i8*, i8** %203, align 8
  %505 = load i64, i64* %202, align 8
  %506 = add i64 %505, 1
  store i64 %506, i64* %202, align 8
  %507 = getelementptr inbounds i8, i8* %504, i64 %505
  store i8 %503, i8* %507, align 1
  %508 = and i64 %501, 1095216660480
  %509 = icmp eq i64 %508, 1095216660480
  br i1 %509, label %510, label %515

510:                                              ; preds = %500
  %511 = load i8*, i8** %203, align 8
  %512 = load i64, i64* %202, align 8
  %513 = add i64 %512, 1
  store i64 %513, i64* %202, align 8
  %514 = getelementptr inbounds i8, i8* %511, i64 %512
  store i8 0, i8* %514, align 1
  br label %515

515:                                              ; preds = %510, %500
  %516 = load i64, i64* %201, align 8
  %517 = lshr i64 %516, 24
  %518 = trunc i64 %517 to i8
  %519 = load i8*, i8** %203, align 8
  %520 = load i64, i64* %202, align 8
  %521 = add i64 %520, 1
  store i64 %521, i64* %202, align 8
  %522 = getelementptr inbounds i8, i8* %519, i64 %520
  store i8 %518, i8* %522, align 1
  %523 = and i64 %516, 4278190080
  %524 = icmp eq i64 %523, 4278190080
  br i1 %524, label %525, label %530

525:                                              ; preds = %515
  %526 = load i8*, i8** %203, align 8
  %527 = load i64, i64* %202, align 8
  %528 = add i64 %527, 1
  store i64 %528, i64* %202, align 8
  %529 = getelementptr inbounds i8, i8* %526, i64 %527
  store i8 0, i8* %529, align 1
  br label %530

530:                                              ; preds = %525, %515
  %531 = load i64, i64* %201, align 8
  %532 = lshr i64 %531, 16
  %533 = trunc i64 %532 to i8
  %534 = load i8*, i8** %203, align 8
  %535 = load i64, i64* %202, align 8
  %536 = add i64 %535, 1
  store i64 %536, i64* %202, align 8
  %537 = getelementptr inbounds i8, i8* %534, i64 %535
  store i8 %533, i8* %537, align 1
  %538 = and i64 %531, 16711680
  %539 = icmp eq i64 %538, 16711680
  br i1 %539, label %540, label %584

540:                                              ; preds = %530
  %541 = load i8*, i8** %203, align 8
  %542 = load i64, i64* %202, align 8
  %543 = add i64 %542, 1
  store i64 %543, i64* %202, align 8
  %544 = getelementptr inbounds i8, i8* %541, i64 %542
  store i8 0, i8* %544, align 1
  br label %584

545:                                              ; preds = %448
  %546 = getelementptr inbounds i8, i8* %460, i64 %450
  store i8 %459, i8* %546, align 1
  %547 = load i64, i64* %201, align 8
  %548 = lshr i64 %547, 48
  %549 = trunc i64 %548 to i8
  %550 = load i8*, i8** %203, align 8
  %551 = load i64, i64* %202, align 8
  %552 = add i64 %551, 1
  %553 = getelementptr inbounds i8, i8* %550, i64 %552
  store i8 %549, i8* %553, align 1
  %554 = load i64, i64* %201, align 8
  %555 = lshr i64 %554, 40
  %556 = trunc i64 %555 to i8
  %557 = load i8*, i8** %203, align 8
  %558 = load i64, i64* %202, align 8
  %559 = add i64 %558, 2
  %560 = getelementptr inbounds i8, i8* %557, i64 %559
  store i8 %556, i8* %560, align 1
  %561 = load i64, i64* %201, align 8
  %562 = lshr i64 %561, 32
  %563 = trunc i64 %562 to i8
  %564 = load i8*, i8** %203, align 8
  %565 = load i64, i64* %202, align 8
  %566 = add i64 %565, 3
  %567 = getelementptr inbounds i8, i8* %564, i64 %566
  store i8 %563, i8* %567, align 1
  %568 = load i64, i64* %201, align 8
  %569 = lshr i64 %568, 24
  %570 = trunc i64 %569 to i8
  %571 = load i8*, i8** %203, align 8
  %572 = load i64, i64* %202, align 8
  %573 = add i64 %572, 4
  %574 = getelementptr inbounds i8, i8* %571, i64 %573
  store i8 %570, i8* %574, align 1
  %575 = load i64, i64* %201, align 8
  %576 = lshr i64 %575, 16
  %577 = trunc i64 %576 to i8
  %578 = load i8*, i8** %203, align 8
  %579 = load i64, i64* %202, align 8
  %580 = add i64 %579, 5
  %581 = getelementptr inbounds i8, i8* %578, i64 %580
  store i8 %577, i8* %581, align 1
  %582 = load i64, i64* %202, align 8
  %583 = add i64 %582, 6
  store i64 %583, i64* %202, align 8
  br label %584

584:                                              ; preds = %545, %540, %530
  %585 = load i64, i64* %201, align 8
  %586 = shl i64 %585, 48
  store i64 %586, i64* %201, align 8
  %587 = load i32, i32* %200, align 8
  %588 = add nsw i32 %587, 48
  store i32 %588, i32* %200, align 8
  br label %589

589:                                              ; preds = %584, %428, %426
  store i32 0, i32* %198, align 8
  br label %590

590:                                              ; preds = %589, %253
  %591 = load i64, i64* %207, align 8
  %592 = load i64, i64* %208, align 8
  %593 = icmp eq i64 %591, %592
  br i1 %593, label %768, label %594

594:                                              ; preds = %590
  %595 = load i32, i32* %200, align 8
  %596 = load i64, i64* %201, align 8
  br label %597

597:                                              ; preds = %759, %594
  %598 = phi i64 [ %596, %594 ], [ %760, %759 ]
  %599 = phi i32 [ %595, %594 ], [ %761, %759 ]
  %600 = phi i64 [ %592, %594 ], [ %764, %759 ]
  %601 = phi i64 [ 0, %594 ], [ %762, %759 ]
  %602 = inttoptr i64 %600 to i32*
  %603 = getelementptr inbounds i32, i32* %602, i64 %601
  %604 = load i32, i32* %603, align 4
  %605 = sext i32 %604 to i64
  %606 = add nsw i32 %599, -1
  store i32 %606, i32* %200, align 8
  %607 = zext i32 %606 to i64
  %608 = shl i64 %605, %607
  %609 = or i64 %608, %598
  store i64 %609, i64* %201, align 8
  %610 = icmp slt i32 %599, 18
  br i1 %610, label %611, label %759

611:                                              ; preds = %597
  %612 = load i64, i64* %202, align 8
  %613 = add i64 %612, 12
  %614 = icmp ugt i64 %613, 16384
  br i1 %614, label %615, label %618, !prof !23

615:                                              ; preds = %611
  tail call fastcc void @_ZN3jxl4jpeg12_GLOBAL__N_110SwapBufferEPNS0_13JpegBitWriterE(%"struct.jxl::jpeg::JpegBitWriter"* %6) #10
  %616 = load i64, i64* %202, align 8
  %617 = load i64, i64* %201, align 8
  br label %618

618:                                              ; preds = %615, %611
  %619 = phi i64 [ %609, %611 ], [ %617, %615 ]
  %620 = phi i64 [ %612, %611 ], [ %616, %615 ]
  %621 = or i64 %619, 65535
  %622 = xor i64 %621, -65536
  %623 = add i64 %622, -72340172838076673
  %624 = and i64 %622, -9187201950435770368
  %625 = xor i64 %624, -9187201950435770368
  %626 = and i64 %625, %623
  %627 = icmp eq i64 %626, 0
  %628 = lshr i64 %619, 56
  %629 = trunc i64 %628 to i8
  %630 = load i8*, i8** %203, align 8
  br i1 %627, label %715, label %631

631:                                              ; preds = %618
  %632 = add i64 %620, 1
  store i64 %632, i64* %202, align 8
  %633 = getelementptr inbounds i8, i8* %630, i64 %620
  store i8 %629, i8* %633, align 1
  %634 = icmp eq i64 %628, 255
  br i1 %634, label %635, label %640

635:                                              ; preds = %631
  %636 = load i8*, i8** %203, align 8
  %637 = load i64, i64* %202, align 8
  %638 = add i64 %637, 1
  store i64 %638, i64* %202, align 8
  %639 = getelementptr inbounds i8, i8* %636, i64 %637
  store i8 0, i8* %639, align 1
  br label %640

640:                                              ; preds = %635, %631
  %641 = load i64, i64* %201, align 8
  %642 = lshr i64 %641, 48
  %643 = trunc i64 %642 to i8
  %644 = load i8*, i8** %203, align 8
  %645 = load i64, i64* %202, align 8
  %646 = add i64 %645, 1
  store i64 %646, i64* %202, align 8
  %647 = getelementptr inbounds i8, i8* %644, i64 %645
  store i8 %643, i8* %647, align 1
  %648 = and i64 %641, 71776119061217280
  %649 = icmp eq i64 %648, 71776119061217280
  br i1 %649, label %650, label %655

650:                                              ; preds = %640
  %651 = load i8*, i8** %203, align 8
  %652 = load i64, i64* %202, align 8
  %653 = add i64 %652, 1
  store i64 %653, i64* %202, align 8
  %654 = getelementptr inbounds i8, i8* %651, i64 %652
  store i8 0, i8* %654, align 1
  br label %655

655:                                              ; preds = %650, %640
  %656 = load i64, i64* %201, align 8
  %657 = lshr i64 %656, 40
  %658 = trunc i64 %657 to i8
  %659 = load i8*, i8** %203, align 8
  %660 = load i64, i64* %202, align 8
  %661 = add i64 %660, 1
  store i64 %661, i64* %202, align 8
  %662 = getelementptr inbounds i8, i8* %659, i64 %660
  store i8 %658, i8* %662, align 1
  %663 = and i64 %656, 280375465082880
  %664 = icmp eq i64 %663, 280375465082880
  br i1 %664, label %665, label %670

665:                                              ; preds = %655
  %666 = load i8*, i8** %203, align 8
  %667 = load i64, i64* %202, align 8
  %668 = add i64 %667, 1
  store i64 %668, i64* %202, align 8
  %669 = getelementptr inbounds i8, i8* %666, i64 %667
  store i8 0, i8* %669, align 1
  br label %670

670:                                              ; preds = %665, %655
  %671 = load i64, i64* %201, align 8
  %672 = lshr i64 %671, 32
  %673 = trunc i64 %672 to i8
  %674 = load i8*, i8** %203, align 8
  %675 = load i64, i64* %202, align 8
  %676 = add i64 %675, 1
  store i64 %676, i64* %202, align 8
  %677 = getelementptr inbounds i8, i8* %674, i64 %675
  store i8 %673, i8* %677, align 1
  %678 = and i64 %671, 1095216660480
  %679 = icmp eq i64 %678, 1095216660480
  br i1 %679, label %680, label %685

680:                                              ; preds = %670
  %681 = load i8*, i8** %203, align 8
  %682 = load i64, i64* %202, align 8
  %683 = add i64 %682, 1
  store i64 %683, i64* %202, align 8
  %684 = getelementptr inbounds i8, i8* %681, i64 %682
  store i8 0, i8* %684, align 1
  br label %685

685:                                              ; preds = %680, %670
  %686 = load i64, i64* %201, align 8
  %687 = lshr i64 %686, 24
  %688 = trunc i64 %687 to i8
  %689 = load i8*, i8** %203, align 8
  %690 = load i64, i64* %202, align 8
  %691 = add i64 %690, 1
  store i64 %691, i64* %202, align 8
  %692 = getelementptr inbounds i8, i8* %689, i64 %690
  store i8 %688, i8* %692, align 1
  %693 = and i64 %686, 4278190080
  %694 = icmp eq i64 %693, 4278190080
  br i1 %694, label %695, label %700

695:                                              ; preds = %685
  %696 = load i8*, i8** %203, align 8
  %697 = load i64, i64* %202, align 8
  %698 = add i64 %697, 1
  store i64 %698, i64* %202, align 8
  %699 = getelementptr inbounds i8, i8* %696, i64 %697
  store i8 0, i8* %699, align 1
  br label %700

700:                                              ; preds = %695, %685
  %701 = load i64, i64* %201, align 8
  %702 = lshr i64 %701, 16
  %703 = trunc i64 %702 to i8
  %704 = load i8*, i8** %203, align 8
  %705 = load i64, i64* %202, align 8
  %706 = add i64 %705, 1
  store i64 %706, i64* %202, align 8
  %707 = getelementptr inbounds i8, i8* %704, i64 %705
  store i8 %703, i8* %707, align 1
  %708 = and i64 %701, 16711680
  %709 = icmp eq i64 %708, 16711680
  br i1 %709, label %710, label %754

710:                                              ; preds = %700
  %711 = load i8*, i8** %203, align 8
  %712 = load i64, i64* %202, align 8
  %713 = add i64 %712, 1
  store i64 %713, i64* %202, align 8
  %714 = getelementptr inbounds i8, i8* %711, i64 %712
  store i8 0, i8* %714, align 1
  br label %754

715:                                              ; preds = %618
  %716 = getelementptr inbounds i8, i8* %630, i64 %620
  store i8 %629, i8* %716, align 1
  %717 = load i64, i64* %201, align 8
  %718 = lshr i64 %717, 48
  %719 = trunc i64 %718 to i8
  %720 = load i8*, i8** %203, align 8
  %721 = load i64, i64* %202, align 8
  %722 = add i64 %721, 1
  %723 = getelementptr inbounds i8, i8* %720, i64 %722
  store i8 %719, i8* %723, align 1
  %724 = load i64, i64* %201, align 8
  %725 = lshr i64 %724, 40
  %726 = trunc i64 %725 to i8
  %727 = load i8*, i8** %203, align 8
  %728 = load i64, i64* %202, align 8
  %729 = add i64 %728, 2
  %730 = getelementptr inbounds i8, i8* %727, i64 %729
  store i8 %726, i8* %730, align 1
  %731 = load i64, i64* %201, align 8
  %732 = lshr i64 %731, 32
  %733 = trunc i64 %732 to i8
  %734 = load i8*, i8** %203, align 8
  %735 = load i64, i64* %202, align 8
  %736 = add i64 %735, 3
  %737 = getelementptr inbounds i8, i8* %734, i64 %736
  store i8 %733, i8* %737, align 1
  %738 = load i64, i64* %201, align 8
  %739 = lshr i64 %738, 24
  %740 = trunc i64 %739 to i8
  %741 = load i8*, i8** %203, align 8
  %742 = load i64, i64* %202, align 8
  %743 = add i64 %742, 4
  %744 = getelementptr inbounds i8, i8* %741, i64 %743
  store i8 %740, i8* %744, align 1
  %745 = load i64, i64* %201, align 8
  %746 = lshr i64 %745, 16
  %747 = trunc i64 %746 to i8
  %748 = load i8*, i8** %203, align 8
  %749 = load i64, i64* %202, align 8
  %750 = add i64 %749, 5
  %751 = getelementptr inbounds i8, i8* %748, i64 %750
  store i8 %747, i8* %751, align 1
  %752 = load i64, i64* %202, align 8
  %753 = add i64 %752, 6
  store i64 %753, i64* %202, align 8
  br label %754

754:                                              ; preds = %715, %710, %700
  %755 = load i64, i64* %201, align 8
  %756 = shl i64 %755, 48
  store i64 %756, i64* %201, align 8
  %757 = load i32, i32* %200, align 8
  %758 = add nsw i32 %757, 48
  store i32 %758, i32* %200, align 8
  br label %759

759:                                              ; preds = %754, %597
  %760 = phi i64 [ %609, %597 ], [ %756, %754 ]
  %761 = phi i32 [ %606, %597 ], [ %758, %754 ]
  %762 = add nuw i64 %601, 1
  %763 = load i64, i64* %207, align 8
  %764 = load i64, i64* %208, align 8
  %765 = sub i64 %763, %764
  %766 = ashr exact i64 %765, 2
  %767 = icmp ult i64 %762, %766
  br i1 %767, label %597, label %768

768:                                              ; preds = %759, %590
  %769 = phi i64 [ %591, %590 ], [ %764, %759 ]
  store i64 %769, i64* %207, align 8
  %770 = load i32, i32* %209, align 4
  %771 = icmp eq i32 %770, 0
  br i1 %771, label %772, label %773

772:                                              ; preds = %768
  store i8 0, i8* %204, align 8
  br label %931

773:                                              ; preds = %768
  %774 = load i32, i32* %210, align 4
  %775 = sext i32 %774 to i64
  %776 = load i32, i32* %200, align 8
  %777 = sub nsw i32 %776, %770
  store i32 %777, i32* %200, align 8
  %778 = zext i32 %777 to i64
  %779 = shl i64 %775, %778
  %780 = load i64, i64* %201, align 8
  %781 = or i64 %779, %780
  store i64 %781, i64* %201, align 8
  %782 = icmp slt i32 %777, 17
  br i1 %782, label %783, label %931

783:                                              ; preds = %773
  %784 = load i64, i64* %202, align 8
  %785 = add i64 %784, 12
  %786 = icmp ugt i64 %785, 16384
  br i1 %786, label %787, label %790, !prof !23

787:                                              ; preds = %783
  tail call fastcc void @_ZN3jxl4jpeg12_GLOBAL__N_110SwapBufferEPNS0_13JpegBitWriterE(%"struct.jxl::jpeg::JpegBitWriter"* %6) #10
  %788 = load i64, i64* %202, align 8
  %789 = load i64, i64* %201, align 8
  br label %790

790:                                              ; preds = %787, %783
  %791 = phi i64 [ %781, %783 ], [ %789, %787 ]
  %792 = phi i64 [ %784, %783 ], [ %788, %787 ]
  %793 = or i64 %791, 65535
  %794 = xor i64 %793, -65536
  %795 = add i64 %794, -72340172838076673
  %796 = and i64 %794, -9187201950435770368
  %797 = xor i64 %796, -9187201950435770368
  %798 = and i64 %797, %795
  %799 = icmp eq i64 %798, 0
  %800 = lshr i64 %791, 56
  %801 = trunc i64 %800 to i8
  %802 = load i8*, i8** %203, align 8
  br i1 %799, label %887, label %803

803:                                              ; preds = %790
  %804 = add i64 %792, 1
  store i64 %804, i64* %202, align 8
  %805 = getelementptr inbounds i8, i8* %802, i64 %792
  store i8 %801, i8* %805, align 1
  %806 = icmp eq i64 %800, 255
  br i1 %806, label %807, label %812

807:                                              ; preds = %803
  %808 = load i8*, i8** %203, align 8
  %809 = load i64, i64* %202, align 8
  %810 = add i64 %809, 1
  store i64 %810, i64* %202, align 8
  %811 = getelementptr inbounds i8, i8* %808, i64 %809
  store i8 0, i8* %811, align 1
  br label %812

812:                                              ; preds = %807, %803
  %813 = load i64, i64* %201, align 8
  %814 = lshr i64 %813, 48
  %815 = trunc i64 %814 to i8
  %816 = load i8*, i8** %203, align 8
  %817 = load i64, i64* %202, align 8
  %818 = add i64 %817, 1
  store i64 %818, i64* %202, align 8
  %819 = getelementptr inbounds i8, i8* %816, i64 %817
  store i8 %815, i8* %819, align 1
  %820 = and i64 %813, 71776119061217280
  %821 = icmp eq i64 %820, 71776119061217280
  br i1 %821, label %822, label %827

822:                                              ; preds = %812
  %823 = load i8*, i8** %203, align 8
  %824 = load i64, i64* %202, align 8
  %825 = add i64 %824, 1
  store i64 %825, i64* %202, align 8
  %826 = getelementptr inbounds i8, i8* %823, i64 %824
  store i8 0, i8* %826, align 1
  br label %827

827:                                              ; preds = %822, %812
  %828 = load i64, i64* %201, align 8
  %829 = lshr i64 %828, 40
  %830 = trunc i64 %829 to i8
  %831 = load i8*, i8** %203, align 8
  %832 = load i64, i64* %202, align 8
  %833 = add i64 %832, 1
  store i64 %833, i64* %202, align 8
  %834 = getelementptr inbounds i8, i8* %831, i64 %832
  store i8 %830, i8* %834, align 1
  %835 = and i64 %828, 280375465082880
  %836 = icmp eq i64 %835, 280375465082880
  br i1 %836, label %837, label %842

837:                                              ; preds = %827
  %838 = load i8*, i8** %203, align 8
  %839 = load i64, i64* %202, align 8
  %840 = add i64 %839, 1
  store i64 %840, i64* %202, align 8
  %841 = getelementptr inbounds i8, i8* %838, i64 %839
  store i8 0, i8* %841, align 1
  br label %842

842:                                              ; preds = %837, %827
  %843 = load i64, i64* %201, align 8
  %844 = lshr i64 %843, 32
  %845 = trunc i64 %844 to i8
  %846 = load i8*, i8** %203, align 8
  %847 = load i64, i64* %202, align 8
  %848 = add i64 %847, 1
  store i64 %848, i64* %202, align 8
  %849 = getelementptr inbounds i8, i8* %846, i64 %847
  store i8 %845, i8* %849, align 1
  %850 = and i64 %843, 1095216660480
  %851 = icmp eq i64 %850, 1095216660480
  br i1 %851, label %852, label %857

852:                                              ; preds = %842
  %853 = load i8*, i8** %203, align 8
  %854 = load i64, i64* %202, align 8
  %855 = add i64 %854, 1
  store i64 %855, i64* %202, align 8
  %856 = getelementptr inbounds i8, i8* %853, i64 %854
  store i8 0, i8* %856, align 1
  br label %857

857:                                              ; preds = %852, %842
  %858 = load i64, i64* %201, align 8
  %859 = lshr i64 %858, 24
  %860 = trunc i64 %859 to i8
  %861 = load i8*, i8** %203, align 8
  %862 = load i64, i64* %202, align 8
  %863 = add i64 %862, 1
  store i64 %863, i64* %202, align 8
  %864 = getelementptr inbounds i8, i8* %861, i64 %862
  store i8 %860, i8* %864, align 1
  %865 = and i64 %858, 4278190080
  %866 = icmp eq i64 %865, 4278190080
  br i1 %866, label %867, label %872

867:                                              ; preds = %857
  %868 = load i8*, i8** %203, align 8
  %869 = load i64, i64* %202, align 8
  %870 = add i64 %869, 1
  store i64 %870, i64* %202, align 8
  %871 = getelementptr inbounds i8, i8* %868, i64 %869
  store i8 0, i8* %871, align 1
  br label %872

872:                                              ; preds = %867, %857
  %873 = load i64, i64* %201, align 8
  %874 = lshr i64 %873, 16
  %875 = trunc i64 %874 to i8
  %876 = load i8*, i8** %203, align 8
  %877 = load i64, i64* %202, align 8
  %878 = add i64 %877, 1
  store i64 %878, i64* %202, align 8
  %879 = getelementptr inbounds i8, i8* %876, i64 %877
  store i8 %875, i8* %879, align 1
  %880 = and i64 %873, 16711680
  %881 = icmp eq i64 %880, 16711680
  br i1 %881, label %882, label %926

882:                                              ; preds = %872
  %883 = load i8*, i8** %203, align 8
  %884 = load i64, i64* %202, align 8
  %885 = add i64 %884, 1
  store i64 %885, i64* %202, align 8
  %886 = getelementptr inbounds i8, i8* %883, i64 %884
  store i8 0, i8* %886, align 1
  br label %926

887:                                              ; preds = %790
  %888 = getelementptr inbounds i8, i8* %802, i64 %792
  store i8 %801, i8* %888, align 1
  %889 = load i64, i64* %201, align 8
  %890 = lshr i64 %889, 48
  %891 = trunc i64 %890 to i8
  %892 = load i8*, i8** %203, align 8
  %893 = load i64, i64* %202, align 8
  %894 = add i64 %893, 1
  %895 = getelementptr inbounds i8, i8* %892, i64 %894
  store i8 %891, i8* %895, align 1
  %896 = load i64, i64* %201, align 8
  %897 = lshr i64 %896, 40
  %898 = trunc i64 %897 to i8
  %899 = load i8*, i8** %203, align 8
  %900 = load i64, i64* %202, align 8
  %901 = add i64 %900, 2
  %902 = getelementptr inbounds i8, i8* %899, i64 %901
  store i8 %898, i8* %902, align 1
  %903 = load i64, i64* %201, align 8
  %904 = lshr i64 %903, 32
  %905 = trunc i64 %904 to i8
  %906 = load i8*, i8** %203, align 8
  %907 = load i64, i64* %202, align 8
  %908 = add i64 %907, 3
  %909 = getelementptr inbounds i8, i8* %906, i64 %908
  store i8 %905, i8* %909, align 1
  %910 = load i64, i64* %201, align 8
  %911 = lshr i64 %910, 24
  %912 = trunc i64 %911 to i8
  %913 = load i8*, i8** %203, align 8
  %914 = load i64, i64* %202, align 8
  %915 = add i64 %914, 4
  %916 = getelementptr inbounds i8, i8* %913, i64 %915
  store i8 %912, i8* %916, align 1
  %917 = load i64, i64* %201, align 8
  %918 = lshr i64 %917, 16
  %919 = trunc i64 %918 to i8
  %920 = load i8*, i8** %203, align 8
  %921 = load i64, i64* %202, align 8
  %922 = add i64 %921, 5
  %923 = getelementptr inbounds i8, i8* %920, i64 %922
  store i8 %919, i8* %923, align 1
  %924 = load i64, i64* %202, align 8
  %925 = add i64 %924, 6
  store i64 %925, i64* %202, align 8
  br label %926

926:                                              ; preds = %887, %882, %872
  %927 = load i64, i64* %201, align 8
  %928 = shl i64 %927, 48
  store i64 %928, i64* %201, align 8
  %929 = load i32, i32* %200, align 8
  %930 = add nsw i32 %929, 48
  store i32 %930, i32* %200, align 8
  br label %931

931:                                              ; preds = %772, %773, %926
  %932 = add nsw i32 %254, -16
  %933 = load i32*, i32** %186, align 8
  %934 = load i32*, i32** %187, align 8
  %935 = icmp eq i32* %933, %934
  %936 = ptrtoint i32* %933 to i64
  br i1 %935, label %942, label %937

937:                                              ; preds = %931
  %938 = load i32, i32* %200, align 8
  %939 = load i64, i64* %201, align 8
  br label %945

940:                                              ; preds = %1104
  %941 = load i64, i64* %190, align 8
  br label %942

942:                                              ; preds = %940, %931
  %943 = phi i64 [ %941, %940 ], [ %936, %931 ]
  store i64 %943, i64* %211, align 8
  %944 = icmp slt i32 %932, 16
  br i1 %944, label %1109, label %253

945:                                              ; preds = %937, %1104
  %946 = phi i64 [ %1105, %1104 ], [ %939, %937 ]
  %947 = phi i32 [ %1106, %1104 ], [ %938, %937 ]
  %948 = phi i32* [ %1107, %1104 ], [ %933, %937 ]
  %949 = load i32, i32* %948, align 4
  %950 = sext i32 %949 to i64
  %951 = add nsw i32 %947, -1
  store i32 %951, i32* %200, align 8
  %952 = zext i32 %951 to i64
  %953 = shl i64 %950, %952
  %954 = or i64 %953, %946
  store i64 %954, i64* %201, align 8
  %955 = icmp slt i32 %947, 18
  br i1 %955, label %956, label %1104

956:                                              ; preds = %945
  %957 = load i64, i64* %202, align 8
  %958 = add i64 %957, 12
  %959 = icmp ugt i64 %958, 16384
  br i1 %959, label %960, label %963, !prof !23

960:                                              ; preds = %956
  tail call fastcc void @_ZN3jxl4jpeg12_GLOBAL__N_110SwapBufferEPNS0_13JpegBitWriterE(%"struct.jxl::jpeg::JpegBitWriter"* %6) #10
  %961 = load i64, i64* %202, align 8
  %962 = load i64, i64* %201, align 8
  br label %963

963:                                              ; preds = %960, %956
  %964 = phi i64 [ %954, %956 ], [ %962, %960 ]
  %965 = phi i64 [ %957, %956 ], [ %961, %960 ]
  %966 = or i64 %964, 65535
  %967 = xor i64 %966, -65536
  %968 = add i64 %967, -72340172838076673
  %969 = and i64 %967, -9187201950435770368
  %970 = xor i64 %969, -9187201950435770368
  %971 = and i64 %970, %968
  %972 = icmp eq i64 %971, 0
  %973 = lshr i64 %964, 56
  %974 = trunc i64 %973 to i8
  %975 = load i8*, i8** %203, align 8
  br i1 %972, label %1060, label %976

976:                                              ; preds = %963
  %977 = add i64 %965, 1
  store i64 %977, i64* %202, align 8
  %978 = getelementptr inbounds i8, i8* %975, i64 %965
  store i8 %974, i8* %978, align 1
  %979 = icmp eq i64 %973, 255
  br i1 %979, label %980, label %985

980:                                              ; preds = %976
  %981 = load i8*, i8** %203, align 8
  %982 = load i64, i64* %202, align 8
  %983 = add i64 %982, 1
  store i64 %983, i64* %202, align 8
  %984 = getelementptr inbounds i8, i8* %981, i64 %982
  store i8 0, i8* %984, align 1
  br label %985

985:                                              ; preds = %980, %976
  %986 = load i64, i64* %201, align 8
  %987 = lshr i64 %986, 48
  %988 = trunc i64 %987 to i8
  %989 = load i8*, i8** %203, align 8
  %990 = load i64, i64* %202, align 8
  %991 = add i64 %990, 1
  store i64 %991, i64* %202, align 8
  %992 = getelementptr inbounds i8, i8* %989, i64 %990
  store i8 %988, i8* %992, align 1
  %993 = and i64 %986, 71776119061217280
  %994 = icmp eq i64 %993, 71776119061217280
  br i1 %994, label %995, label %1000

995:                                              ; preds = %985
  %996 = load i8*, i8** %203, align 8
  %997 = load i64, i64* %202, align 8
  %998 = add i64 %997, 1
  store i64 %998, i64* %202, align 8
  %999 = getelementptr inbounds i8, i8* %996, i64 %997
  store i8 0, i8* %999, align 1
  br label %1000

1000:                                             ; preds = %995, %985
  %1001 = load i64, i64* %201, align 8
  %1002 = lshr i64 %1001, 40
  %1003 = trunc i64 %1002 to i8
  %1004 = load i8*, i8** %203, align 8
  %1005 = load i64, i64* %202, align 8
  %1006 = add i64 %1005, 1
  store i64 %1006, i64* %202, align 8
  %1007 = getelementptr inbounds i8, i8* %1004, i64 %1005
  store i8 %1003, i8* %1007, align 1
  %1008 = and i64 %1001, 280375465082880
  %1009 = icmp eq i64 %1008, 280375465082880
  br i1 %1009, label %1010, label %1015

1010:                                             ; preds = %1000
  %1011 = load i8*, i8** %203, align 8
  %1012 = load i64, i64* %202, align 8
  %1013 = add i64 %1012, 1
  store i64 %1013, i64* %202, align 8
  %1014 = getelementptr inbounds i8, i8* %1011, i64 %1012
  store i8 0, i8* %1014, align 1
  br label %1015

1015:                                             ; preds = %1010, %1000
  %1016 = load i64, i64* %201, align 8
  %1017 = lshr i64 %1016, 32
  %1018 = trunc i64 %1017 to i8
  %1019 = load i8*, i8** %203, align 8
  %1020 = load i64, i64* %202, align 8
  %1021 = add i64 %1020, 1
  store i64 %1021, i64* %202, align 8
  %1022 = getelementptr inbounds i8, i8* %1019, i64 %1020
  store i8 %1018, i8* %1022, align 1
  %1023 = and i64 %1016, 1095216660480
  %1024 = icmp eq i64 %1023, 1095216660480
  br i1 %1024, label %1025, label %1030

1025:                                             ; preds = %1015
  %1026 = load i8*, i8** %203, align 8
  %1027 = load i64, i64* %202, align 8
  %1028 = add i64 %1027, 1
  store i64 %1028, i64* %202, align 8
  %1029 = getelementptr inbounds i8, i8* %1026, i64 %1027
  store i8 0, i8* %1029, align 1
  br label %1030

1030:                                             ; preds = %1025, %1015
  %1031 = load i64, i64* %201, align 8
  %1032 = lshr i64 %1031, 24
  %1033 = trunc i64 %1032 to i8
  %1034 = load i8*, i8** %203, align 8
  %1035 = load i64, i64* %202, align 8
  %1036 = add i64 %1035, 1
  store i64 %1036, i64* %202, align 8
  %1037 = getelementptr inbounds i8, i8* %1034, i64 %1035
  store i8 %1033, i8* %1037, align 1
  %1038 = and i64 %1031, 4278190080
  %1039 = icmp eq i64 %1038, 4278190080
  br i1 %1039, label %1040, label %1045

1040:                                             ; preds = %1030
  %1041 = load i8*, i8** %203, align 8
  %1042 = load i64, i64* %202, align 8
  %1043 = add i64 %1042, 1
  store i64 %1043, i64* %202, align 8
  %1044 = getelementptr inbounds i8, i8* %1041, i64 %1042
  store i8 0, i8* %1044, align 1
  br label %1045

1045:                                             ; preds = %1040, %1030
  %1046 = load i64, i64* %201, align 8
  %1047 = lshr i64 %1046, 16
  %1048 = trunc i64 %1047 to i8
  %1049 = load i8*, i8** %203, align 8
  %1050 = load i64, i64* %202, align 8
  %1051 = add i64 %1050, 1
  store i64 %1051, i64* %202, align 8
  %1052 = getelementptr inbounds i8, i8* %1049, i64 %1050
  store i8 %1048, i8* %1052, align 1
  %1053 = and i64 %1046, 16711680
  %1054 = icmp eq i64 %1053, 16711680
  br i1 %1054, label %1055, label %1099

1055:                                             ; preds = %1045
  %1056 = load i8*, i8** %203, align 8
  %1057 = load i64, i64* %202, align 8
  %1058 = add i64 %1057, 1
  store i64 %1058, i64* %202, align 8
  %1059 = getelementptr inbounds i8, i8* %1056, i64 %1057
  store i8 0, i8* %1059, align 1
  br label %1099

1060:                                             ; preds = %963
  %1061 = getelementptr inbounds i8, i8* %975, i64 %965
  store i8 %974, i8* %1061, align 1
  %1062 = load i64, i64* %201, align 8
  %1063 = lshr i64 %1062, 48
  %1064 = trunc i64 %1063 to i8
  %1065 = load i8*, i8** %203, align 8
  %1066 = load i64, i64* %202, align 8
  %1067 = add i64 %1066, 1
  %1068 = getelementptr inbounds i8, i8* %1065, i64 %1067
  store i8 %1064, i8* %1068, align 1
  %1069 = load i64, i64* %201, align 8
  %1070 = lshr i64 %1069, 40
  %1071 = trunc i64 %1070 to i8
  %1072 = load i8*, i8** %203, align 8
  %1073 = load i64, i64* %202, align 8
  %1074 = add i64 %1073, 2
  %1075 = getelementptr inbounds i8, i8* %1072, i64 %1074
  store i8 %1071, i8* %1075, align 1
  %1076 = load i64, i64* %201, align 8
  %1077 = lshr i64 %1076, 32
  %1078 = trunc i64 %1077 to i8
  %1079 = load i8*, i8** %203, align 8
  %1080 = load i64, i64* %202, align 8
  %1081 = add i64 %1080, 3
  %1082 = getelementptr inbounds i8, i8* %1079, i64 %1081
  store i8 %1078, i8* %1082, align 1
  %1083 = load i64, i64* %201, align 8
  %1084 = lshr i64 %1083, 24
  %1085 = trunc i64 %1084 to i8
  %1086 = load i8*, i8** %203, align 8
  %1087 = load i64, i64* %202, align 8
  %1088 = add i64 %1087, 4
  %1089 = getelementptr inbounds i8, i8* %1086, i64 %1088
  store i8 %1085, i8* %1089, align 1
  %1090 = load i64, i64* %201, align 8
  %1091 = lshr i64 %1090, 16
  %1092 = trunc i64 %1091 to i8
  %1093 = load i8*, i8** %203, align 8
  %1094 = load i64, i64* %202, align 8
  %1095 = add i64 %1094, 5
  %1096 = getelementptr inbounds i8, i8* %1093, i64 %1095
  store i8 %1092, i8* %1096, align 1
  %1097 = load i64, i64* %202, align 8
  %1098 = add i64 %1097, 6
  store i64 %1098, i64* %202, align 8
  br label %1099

1099:                                             ; preds = %1060, %1055, %1045
  %1100 = load i64, i64* %201, align 8
  %1101 = shl i64 %1100, 48
  store i64 %1101, i64* %201, align 8
  %1102 = load i32, i32* %200, align 8
  %1103 = add nsw i32 %1102, 48
  store i32 %1103, i32* %200, align 8
  br label %1104

1104:                                             ; preds = %945, %1099
  %1105 = phi i64 [ %954, %945 ], [ %1101, %1099 ]
  %1106 = phi i32 [ %951, %945 ], [ %1103, %1099 ]
  %1107 = getelementptr inbounds i32, i32* %948, i64 1
  %1108 = icmp eq i32* %1107, %934
  br i1 %1108, label %940, label %945

1109:                                             ; preds = %942
  %1110 = inttoptr i64 %943 to i32*
  br label %1111

1111:                                             ; preds = %1109, %247
  %1112 = phi i64 [ %240, %247 ], [ %943, %1109 ]
  %1113 = phi i32* [ %241, %247 ], [ %1110, %1109 ]
  %1114 = phi i32 [ %243, %247 ], [ %932, %1109 ]
  %1115 = icmp sgt i32 %245, 1
  br i1 %1115, label %1116, label %1171

1116:                                             ; preds = %1111
  %1117 = and i32 %245, 1
  %1118 = load i32*, i32** %188, align 8
  %1119 = icmp ult i32* %1113, %1118
  %1120 = ptrtoint i32* %1118 to i64
  br i1 %1119, label %1121, label %1124

1121:                                             ; preds = %1116
  store i32 %1117, i32* %1113, align 4
  %1122 = getelementptr inbounds i32, i32* %1113, i64 1
  %1123 = ptrtoint i32* %1122 to i64
  store i64 %1123, i64* %211, align 8
  br label %2195

1124:                                             ; preds = %1116
  %1125 = ptrtoint i32* %1113 to i64
  %1126 = load i64, i64* %190, align 8
  %1127 = sub i64 %1125, %1126
  %1128 = ashr exact i64 %1127, 2
  %1129 = add nsw i64 %1128, 1
  %1130 = icmp ugt i64 %1129, 4611686018427387903
  br i1 %1130, label %1131, label %1133

1131:                                             ; preds = %1124
  %1132 = bitcast %"class.std::__1::vector.86"* %9 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %1132) #12
  unreachable

1133:                                             ; preds = %1124
  %1134 = sub i64 %1120, %1126
  %1135 = ashr exact i64 %1134, 2
  %1136 = icmp ult i64 %1135, 2305843009213693951
  br i1 %1136, label %1137, label %1145

1137:                                             ; preds = %1133
  %1138 = ashr exact i64 %1134, 1
  %1139 = icmp ult i64 %1138, %1129
  %1140 = select i1 %1139, i64 %1129, i64 %1138
  %1141 = icmp eq i64 %1140, 0
  br i1 %1141, label %1150, label %1142

1142:                                             ; preds = %1137
  %1143 = icmp ugt i64 %1140, 4611686018427387903
  br i1 %1143, label %1144, label %1145

1144:                                             ; preds = %1142
  tail call void @abort() #12
  unreachable

1145:                                             ; preds = %1142, %1133
  %1146 = phi i64 [ %1140, %1142 ], [ 4611686018427387903, %1133 ]
  %1147 = shl i64 %1146, 2
  %1148 = tail call i8* @_Znwm(i64 %1147) #11
  %1149 = bitcast i8* %1148 to i32*
  br label %1150

1150:                                             ; preds = %1145, %1137
  %1151 = phi i64 [ %1146, %1145 ], [ 0, %1137 ]
  %1152 = phi i32* [ %1149, %1145 ], [ null, %1137 ]
  %1153 = getelementptr inbounds i32, i32* %1152, i64 %1128
  %1154 = getelementptr inbounds i32, i32* %1152, i64 %1151
  %1155 = ptrtoint i32* %1154 to i64
  store i32 %1117, i32* %1153, align 4
  %1156 = getelementptr inbounds i32, i32* %1153, i64 1
  %1157 = ptrtoint i32* %1156 to i64
  %1158 = sub i64 %1112, %1126
  %1159 = ashr exact i64 %1158, 2
  %1160 = sub nsw i64 0, %1159
  %1161 = getelementptr inbounds i32, i32* %1153, i64 %1160
  %1162 = ptrtoint i32* %1161 to i64
  %1163 = icmp sgt i64 %1158, 0
  br i1 %1163, label %1164, label %1167

1164:                                             ; preds = %1150
  %1165 = bitcast i32* %1161 to i8*
  %1166 = inttoptr i64 %1126 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1165, i8* align 4 %1166, i64 %1158, i1 false) #10
  br label %1167

1167:                                             ; preds = %1164, %1150
  store i64 %1162, i64* %190, align 8
  store i64 %1157, i64* %211, align 8
  store i64 %1155, i64* %189, align 8
  %1168 = icmp eq i64 %1126, 0
  br i1 %1168, label %2195, label %1169

1169:                                             ; preds = %1167
  %1170 = inttoptr i64 %1126 to i8*
  tail call void @_ZdlPv(i8* %1170) #11
  br label %2195

1171:                                             ; preds = %1111
  %1172 = load i32, i32* %198, align 8
  %1173 = icmp sgt i32 %1172, 0
  br i1 %1173, label %1174, label %1507

1174:                                             ; preds = %1171
  %1175 = tail call i32 @llvm.ctlz.i32(i32 %1172, i1 true) #10, !range !22
  %1176 = xor i32 %1175, 31
  %1177 = shl nuw nsw i32 %1176, 4
  %1178 = load %"struct.jxl::jpeg::HuffmanCodeTable"*, %"struct.jxl::jpeg::HuffmanCodeTable"** %199, align 8
  %1179 = zext i32 %1177 to i64
  %1180 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanCodeTable", %"struct.jxl::jpeg::HuffmanCodeTable"* %1178, i64 0, i32 0, i64 %1179
  %1181 = load i32, i32* %1180, align 4
  %1182 = icmp eq i32 %1181, 0
  br i1 %1182, label %1183, label %1184

1183:                                             ; preds = %1174
  store i8 0, i8* %204, align 8
  br label %1343

1184:                                             ; preds = %1174
  %1185 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanCodeTable", %"struct.jxl::jpeg::HuffmanCodeTable"* %1178, i64 0, i32 1, i64 %1179
  %1186 = load i32, i32* %1185, align 4
  %1187 = sext i32 %1186 to i64
  %1188 = load i32, i32* %200, align 8
  %1189 = sub nsw i32 %1188, %1181
  store i32 %1189, i32* %200, align 8
  %1190 = zext i32 %1189 to i64
  %1191 = shl i64 %1187, %1190
  %1192 = load i64, i64* %201, align 8
  %1193 = or i64 %1191, %1192
  store i64 %1193, i64* %201, align 8
  %1194 = icmp slt i32 %1189, 17
  br i1 %1194, label %1195, label %1343

1195:                                             ; preds = %1184
  %1196 = load i64, i64* %202, align 8
  %1197 = add i64 %1196, 12
  %1198 = icmp ugt i64 %1197, 16384
  br i1 %1198, label %1199, label %1202, !prof !23

1199:                                             ; preds = %1195
  tail call fastcc void @_ZN3jxl4jpeg12_GLOBAL__N_110SwapBufferEPNS0_13JpegBitWriterE(%"struct.jxl::jpeg::JpegBitWriter"* %6) #10
  %1200 = load i64, i64* %202, align 8
  %1201 = load i64, i64* %201, align 8
  br label %1202

1202:                                             ; preds = %1199, %1195
  %1203 = phi i64 [ %1193, %1195 ], [ %1201, %1199 ]
  %1204 = phi i64 [ %1196, %1195 ], [ %1200, %1199 ]
  %1205 = or i64 %1203, 65535
  %1206 = xor i64 %1205, -65536
  %1207 = add i64 %1206, -72340172838076673
  %1208 = and i64 %1206, -9187201950435770368
  %1209 = xor i64 %1208, -9187201950435770368
  %1210 = and i64 %1209, %1207
  %1211 = icmp eq i64 %1210, 0
  %1212 = lshr i64 %1203, 56
  %1213 = trunc i64 %1212 to i8
  %1214 = load i8*, i8** %203, align 8
  br i1 %1211, label %1299, label %1215

1215:                                             ; preds = %1202
  %1216 = add i64 %1204, 1
  store i64 %1216, i64* %202, align 8
  %1217 = getelementptr inbounds i8, i8* %1214, i64 %1204
  store i8 %1213, i8* %1217, align 1
  %1218 = icmp eq i64 %1212, 255
  br i1 %1218, label %1219, label %1224

1219:                                             ; preds = %1215
  %1220 = load i8*, i8** %203, align 8
  %1221 = load i64, i64* %202, align 8
  %1222 = add i64 %1221, 1
  store i64 %1222, i64* %202, align 8
  %1223 = getelementptr inbounds i8, i8* %1220, i64 %1221
  store i8 0, i8* %1223, align 1
  br label %1224

1224:                                             ; preds = %1219, %1215
  %1225 = load i64, i64* %201, align 8
  %1226 = lshr i64 %1225, 48
  %1227 = trunc i64 %1226 to i8
  %1228 = load i8*, i8** %203, align 8
  %1229 = load i64, i64* %202, align 8
  %1230 = add i64 %1229, 1
  store i64 %1230, i64* %202, align 8
  %1231 = getelementptr inbounds i8, i8* %1228, i64 %1229
  store i8 %1227, i8* %1231, align 1
  %1232 = and i64 %1225, 71776119061217280
  %1233 = icmp eq i64 %1232, 71776119061217280
  br i1 %1233, label %1234, label %1239

1234:                                             ; preds = %1224
  %1235 = load i8*, i8** %203, align 8
  %1236 = load i64, i64* %202, align 8
  %1237 = add i64 %1236, 1
  store i64 %1237, i64* %202, align 8
  %1238 = getelementptr inbounds i8, i8* %1235, i64 %1236
  store i8 0, i8* %1238, align 1
  br label %1239

1239:                                             ; preds = %1234, %1224
  %1240 = load i64, i64* %201, align 8
  %1241 = lshr i64 %1240, 40
  %1242 = trunc i64 %1241 to i8
  %1243 = load i8*, i8** %203, align 8
  %1244 = load i64, i64* %202, align 8
  %1245 = add i64 %1244, 1
  store i64 %1245, i64* %202, align 8
  %1246 = getelementptr inbounds i8, i8* %1243, i64 %1244
  store i8 %1242, i8* %1246, align 1
  %1247 = and i64 %1240, 280375465082880
  %1248 = icmp eq i64 %1247, 280375465082880
  br i1 %1248, label %1249, label %1254

1249:                                             ; preds = %1239
  %1250 = load i8*, i8** %203, align 8
  %1251 = load i64, i64* %202, align 8
  %1252 = add i64 %1251, 1
  store i64 %1252, i64* %202, align 8
  %1253 = getelementptr inbounds i8, i8* %1250, i64 %1251
  store i8 0, i8* %1253, align 1
  br label %1254

1254:                                             ; preds = %1249, %1239
  %1255 = load i64, i64* %201, align 8
  %1256 = lshr i64 %1255, 32
  %1257 = trunc i64 %1256 to i8
  %1258 = load i8*, i8** %203, align 8
  %1259 = load i64, i64* %202, align 8
  %1260 = add i64 %1259, 1
  store i64 %1260, i64* %202, align 8
  %1261 = getelementptr inbounds i8, i8* %1258, i64 %1259
  store i8 %1257, i8* %1261, align 1
  %1262 = and i64 %1255, 1095216660480
  %1263 = icmp eq i64 %1262, 1095216660480
  br i1 %1263, label %1264, label %1269

1264:                                             ; preds = %1254
  %1265 = load i8*, i8** %203, align 8
  %1266 = load i64, i64* %202, align 8
  %1267 = add i64 %1266, 1
  store i64 %1267, i64* %202, align 8
  %1268 = getelementptr inbounds i8, i8* %1265, i64 %1266
  store i8 0, i8* %1268, align 1
  br label %1269

1269:                                             ; preds = %1264, %1254
  %1270 = load i64, i64* %201, align 8
  %1271 = lshr i64 %1270, 24
  %1272 = trunc i64 %1271 to i8
  %1273 = load i8*, i8** %203, align 8
  %1274 = load i64, i64* %202, align 8
  %1275 = add i64 %1274, 1
  store i64 %1275, i64* %202, align 8
  %1276 = getelementptr inbounds i8, i8* %1273, i64 %1274
  store i8 %1272, i8* %1276, align 1
  %1277 = and i64 %1270, 4278190080
  %1278 = icmp eq i64 %1277, 4278190080
  br i1 %1278, label %1279, label %1284

1279:                                             ; preds = %1269
  %1280 = load i8*, i8** %203, align 8
  %1281 = load i64, i64* %202, align 8
  %1282 = add i64 %1281, 1
  store i64 %1282, i64* %202, align 8
  %1283 = getelementptr inbounds i8, i8* %1280, i64 %1281
  store i8 0, i8* %1283, align 1
  br label %1284

1284:                                             ; preds = %1279, %1269
  %1285 = load i64, i64* %201, align 8
  %1286 = lshr i64 %1285, 16
  %1287 = trunc i64 %1286 to i8
  %1288 = load i8*, i8** %203, align 8
  %1289 = load i64, i64* %202, align 8
  %1290 = add i64 %1289, 1
  store i64 %1290, i64* %202, align 8
  %1291 = getelementptr inbounds i8, i8* %1288, i64 %1289
  store i8 %1287, i8* %1291, align 1
  %1292 = and i64 %1285, 16711680
  %1293 = icmp eq i64 %1292, 16711680
  br i1 %1293, label %1294, label %1338

1294:                                             ; preds = %1284
  %1295 = load i8*, i8** %203, align 8
  %1296 = load i64, i64* %202, align 8
  %1297 = add i64 %1296, 1
  store i64 %1297, i64* %202, align 8
  %1298 = getelementptr inbounds i8, i8* %1295, i64 %1296
  store i8 0, i8* %1298, align 1
  br label %1338

1299:                                             ; preds = %1202
  %1300 = getelementptr inbounds i8, i8* %1214, i64 %1204
  store i8 %1213, i8* %1300, align 1
  %1301 = load i64, i64* %201, align 8
  %1302 = lshr i64 %1301, 48
  %1303 = trunc i64 %1302 to i8
  %1304 = load i8*, i8** %203, align 8
  %1305 = load i64, i64* %202, align 8
  %1306 = add i64 %1305, 1
  %1307 = getelementptr inbounds i8, i8* %1304, i64 %1306
  store i8 %1303, i8* %1307, align 1
  %1308 = load i64, i64* %201, align 8
  %1309 = lshr i64 %1308, 40
  %1310 = trunc i64 %1309 to i8
  %1311 = load i8*, i8** %203, align 8
  %1312 = load i64, i64* %202, align 8
  %1313 = add i64 %1312, 2
  %1314 = getelementptr inbounds i8, i8* %1311, i64 %1313
  store i8 %1310, i8* %1314, align 1
  %1315 = load i64, i64* %201, align 8
  %1316 = lshr i64 %1315, 32
  %1317 = trunc i64 %1316 to i8
  %1318 = load i8*, i8** %203, align 8
  %1319 = load i64, i64* %202, align 8
  %1320 = add i64 %1319, 3
  %1321 = getelementptr inbounds i8, i8* %1318, i64 %1320
  store i8 %1317, i8* %1321, align 1
  %1322 = load i64, i64* %201, align 8
  %1323 = lshr i64 %1322, 24
  %1324 = trunc i64 %1323 to i8
  %1325 = load i8*, i8** %203, align 8
  %1326 = load i64, i64* %202, align 8
  %1327 = add i64 %1326, 4
  %1328 = getelementptr inbounds i8, i8* %1325, i64 %1327
  store i8 %1324, i8* %1328, align 1
  %1329 = load i64, i64* %201, align 8
  %1330 = lshr i64 %1329, 16
  %1331 = trunc i64 %1330 to i8
  %1332 = load i8*, i8** %203, align 8
  %1333 = load i64, i64* %202, align 8
  %1334 = add i64 %1333, 5
  %1335 = getelementptr inbounds i8, i8* %1332, i64 %1334
  store i8 %1331, i8* %1335, align 1
  %1336 = load i64, i64* %202, align 8
  %1337 = add i64 %1336, 6
  store i64 %1337, i64* %202, align 8
  br label %1338

1338:                                             ; preds = %1299, %1294, %1284
  %1339 = load i64, i64* %201, align 8
  %1340 = shl i64 %1339, 48
  store i64 %1340, i64* %201, align 8
  %1341 = load i32, i32* %200, align 8
  %1342 = add nsw i32 %1341, 48
  store i32 %1342, i32* %200, align 8
  br label %1343

1343:                                             ; preds = %1338, %1184, %1183
  %1344 = icmp eq i32 %1176, 0
  br i1 %1344, label %1506, label %1345

1345:                                             ; preds = %1343
  %1346 = load i32, i32* %198, align 8
  %1347 = shl nsw i32 -1, %1176
  %1348 = xor i32 %1347, -1
  %1349 = and i32 %1346, %1348
  %1350 = sext i32 %1349 to i64
  %1351 = load i32, i32* %200, align 8
  %1352 = sub nsw i32 %1351, %1176
  store i32 %1352, i32* %200, align 8
  %1353 = zext i32 %1352 to i64
  %1354 = shl i64 %1350, %1353
  %1355 = load i64, i64* %201, align 8
  %1356 = or i64 %1354, %1355
  store i64 %1356, i64* %201, align 8
  %1357 = icmp slt i32 %1352, 17
  br i1 %1357, label %1358, label %1506

1358:                                             ; preds = %1345
  %1359 = load i64, i64* %202, align 8
  %1360 = add i64 %1359, 12
  %1361 = icmp ugt i64 %1360, 16384
  br i1 %1361, label %1362, label %1365, !prof !23

1362:                                             ; preds = %1358
  tail call fastcc void @_ZN3jxl4jpeg12_GLOBAL__N_110SwapBufferEPNS0_13JpegBitWriterE(%"struct.jxl::jpeg::JpegBitWriter"* %6) #10
  %1363 = load i64, i64* %202, align 8
  %1364 = load i64, i64* %201, align 8
  br label %1365

1365:                                             ; preds = %1362, %1358
  %1366 = phi i64 [ %1356, %1358 ], [ %1364, %1362 ]
  %1367 = phi i64 [ %1359, %1358 ], [ %1363, %1362 ]
  %1368 = or i64 %1366, 65535
  %1369 = xor i64 %1368, -65536
  %1370 = add i64 %1369, -72340172838076673
  %1371 = and i64 %1369, -9187201950435770368
  %1372 = xor i64 %1371, -9187201950435770368
  %1373 = and i64 %1372, %1370
  %1374 = icmp eq i64 %1373, 0
  %1375 = lshr i64 %1366, 56
  %1376 = trunc i64 %1375 to i8
  %1377 = load i8*, i8** %203, align 8
  br i1 %1374, label %1462, label %1378

1378:                                             ; preds = %1365
  %1379 = add i64 %1367, 1
  store i64 %1379, i64* %202, align 8
  %1380 = getelementptr inbounds i8, i8* %1377, i64 %1367
  store i8 %1376, i8* %1380, align 1
  %1381 = icmp eq i64 %1375, 255
  br i1 %1381, label %1382, label %1387

1382:                                             ; preds = %1378
  %1383 = load i8*, i8** %203, align 8
  %1384 = load i64, i64* %202, align 8
  %1385 = add i64 %1384, 1
  store i64 %1385, i64* %202, align 8
  %1386 = getelementptr inbounds i8, i8* %1383, i64 %1384
  store i8 0, i8* %1386, align 1
  br label %1387

1387:                                             ; preds = %1382, %1378
  %1388 = load i64, i64* %201, align 8
  %1389 = lshr i64 %1388, 48
  %1390 = trunc i64 %1389 to i8
  %1391 = load i8*, i8** %203, align 8
  %1392 = load i64, i64* %202, align 8
  %1393 = add i64 %1392, 1
  store i64 %1393, i64* %202, align 8
  %1394 = getelementptr inbounds i8, i8* %1391, i64 %1392
  store i8 %1390, i8* %1394, align 1
  %1395 = and i64 %1388, 71776119061217280
  %1396 = icmp eq i64 %1395, 71776119061217280
  br i1 %1396, label %1397, label %1402

1397:                                             ; preds = %1387
  %1398 = load i8*, i8** %203, align 8
  %1399 = load i64, i64* %202, align 8
  %1400 = add i64 %1399, 1
  store i64 %1400, i64* %202, align 8
  %1401 = getelementptr inbounds i8, i8* %1398, i64 %1399
  store i8 0, i8* %1401, align 1
  br label %1402

1402:                                             ; preds = %1397, %1387
  %1403 = load i64, i64* %201, align 8
  %1404 = lshr i64 %1403, 40
  %1405 = trunc i64 %1404 to i8
  %1406 = load i8*, i8** %203, align 8
  %1407 = load i64, i64* %202, align 8
  %1408 = add i64 %1407, 1
  store i64 %1408, i64* %202, align 8
  %1409 = getelementptr inbounds i8, i8* %1406, i64 %1407
  store i8 %1405, i8* %1409, align 1
  %1410 = and i64 %1403, 280375465082880
  %1411 = icmp eq i64 %1410, 280375465082880
  br i1 %1411, label %1412, label %1417

1412:                                             ; preds = %1402
  %1413 = load i8*, i8** %203, align 8
  %1414 = load i64, i64* %202, align 8
  %1415 = add i64 %1414, 1
  store i64 %1415, i64* %202, align 8
  %1416 = getelementptr inbounds i8, i8* %1413, i64 %1414
  store i8 0, i8* %1416, align 1
  br label %1417

1417:                                             ; preds = %1412, %1402
  %1418 = load i64, i64* %201, align 8
  %1419 = lshr i64 %1418, 32
  %1420 = trunc i64 %1419 to i8
  %1421 = load i8*, i8** %203, align 8
  %1422 = load i64, i64* %202, align 8
  %1423 = add i64 %1422, 1
  store i64 %1423, i64* %202, align 8
  %1424 = getelementptr inbounds i8, i8* %1421, i64 %1422
  store i8 %1420, i8* %1424, align 1
  %1425 = and i64 %1418, 1095216660480
  %1426 = icmp eq i64 %1425, 1095216660480
  br i1 %1426, label %1427, label %1432

1427:                                             ; preds = %1417
  %1428 = load i8*, i8** %203, align 8
  %1429 = load i64, i64* %202, align 8
  %1430 = add i64 %1429, 1
  store i64 %1430, i64* %202, align 8
  %1431 = getelementptr inbounds i8, i8* %1428, i64 %1429
  store i8 0, i8* %1431, align 1
  br label %1432

1432:                                             ; preds = %1427, %1417
  %1433 = load i64, i64* %201, align 8
  %1434 = lshr i64 %1433, 24
  %1435 = trunc i64 %1434 to i8
  %1436 = load i8*, i8** %203, align 8
  %1437 = load i64, i64* %202, align 8
  %1438 = add i64 %1437, 1
  store i64 %1438, i64* %202, align 8
  %1439 = getelementptr inbounds i8, i8* %1436, i64 %1437
  store i8 %1435, i8* %1439, align 1
  %1440 = and i64 %1433, 4278190080
  %1441 = icmp eq i64 %1440, 4278190080
  br i1 %1441, label %1442, label %1447

1442:                                             ; preds = %1432
  %1443 = load i8*, i8** %203, align 8
  %1444 = load i64, i64* %202, align 8
  %1445 = add i64 %1444, 1
  store i64 %1445, i64* %202, align 8
  %1446 = getelementptr inbounds i8, i8* %1443, i64 %1444
  store i8 0, i8* %1446, align 1
  br label %1447

1447:                                             ; preds = %1442, %1432
  %1448 = load i64, i64* %201, align 8
  %1449 = lshr i64 %1448, 16
  %1450 = trunc i64 %1449 to i8
  %1451 = load i8*, i8** %203, align 8
  %1452 = load i64, i64* %202, align 8
  %1453 = add i64 %1452, 1
  store i64 %1453, i64* %202, align 8
  %1454 = getelementptr inbounds i8, i8* %1451, i64 %1452
  store i8 %1450, i8* %1454, align 1
  %1455 = and i64 %1448, 16711680
  %1456 = icmp eq i64 %1455, 16711680
  br i1 %1456, label %1457, label %1501

1457:                                             ; preds = %1447
  %1458 = load i8*, i8** %203, align 8
  %1459 = load i64, i64* %202, align 8
  %1460 = add i64 %1459, 1
  store i64 %1460, i64* %202, align 8
  %1461 = getelementptr inbounds i8, i8* %1458, i64 %1459
  store i8 0, i8* %1461, align 1
  br label %1501

1462:                                             ; preds = %1365
  %1463 = getelementptr inbounds i8, i8* %1377, i64 %1367
  store i8 %1376, i8* %1463, align 1
  %1464 = load i64, i64* %201, align 8
  %1465 = lshr i64 %1464, 48
  %1466 = trunc i64 %1465 to i8
  %1467 = load i8*, i8** %203, align 8
  %1468 = load i64, i64* %202, align 8
  %1469 = add i64 %1468, 1
  %1470 = getelementptr inbounds i8, i8* %1467, i64 %1469
  store i8 %1466, i8* %1470, align 1
  %1471 = load i64, i64* %201, align 8
  %1472 = lshr i64 %1471, 40
  %1473 = trunc i64 %1472 to i8
  %1474 = load i8*, i8** %203, align 8
  %1475 = load i64, i64* %202, align 8
  %1476 = add i64 %1475, 2
  %1477 = getelementptr inbounds i8, i8* %1474, i64 %1476
  store i8 %1473, i8* %1477, align 1
  %1478 = load i64, i64* %201, align 8
  %1479 = lshr i64 %1478, 32
  %1480 = trunc i64 %1479 to i8
  %1481 = load i8*, i8** %203, align 8
  %1482 = load i64, i64* %202, align 8
  %1483 = add i64 %1482, 3
  %1484 = getelementptr inbounds i8, i8* %1481, i64 %1483
  store i8 %1480, i8* %1484, align 1
  %1485 = load i64, i64* %201, align 8
  %1486 = lshr i64 %1485, 24
  %1487 = trunc i64 %1486 to i8
  %1488 = load i8*, i8** %203, align 8
  %1489 = load i64, i64* %202, align 8
  %1490 = add i64 %1489, 4
  %1491 = getelementptr inbounds i8, i8* %1488, i64 %1490
  store i8 %1487, i8* %1491, align 1
  %1492 = load i64, i64* %201, align 8
  %1493 = lshr i64 %1492, 16
  %1494 = trunc i64 %1493 to i8
  %1495 = load i8*, i8** %203, align 8
  %1496 = load i64, i64* %202, align 8
  %1497 = add i64 %1496, 5
  %1498 = getelementptr inbounds i8, i8* %1495, i64 %1497
  store i8 %1494, i8* %1498, align 1
  %1499 = load i64, i64* %202, align 8
  %1500 = add i64 %1499, 6
  store i64 %1500, i64* %202, align 8
  br label %1501

1501:                                             ; preds = %1462, %1457, %1447
  %1502 = load i64, i64* %201, align 8
  %1503 = shl i64 %1502, 48
  store i64 %1503, i64* %201, align 8
  %1504 = load i32, i32* %200, align 8
  %1505 = add nsw i32 %1504, 48
  store i32 %1505, i32* %200, align 8
  br label %1506

1506:                                             ; preds = %1501, %1345, %1343
  store i32 0, i32* %198, align 8
  br label %1507

1507:                                             ; preds = %1506, %1171
  %1508 = load i64, i64* %207, align 8
  %1509 = load i64, i64* %208, align 8
  %1510 = icmp eq i64 %1508, %1509
  br i1 %1510, label %1685, label %1511

1511:                                             ; preds = %1507
  %1512 = load i32, i32* %200, align 8
  %1513 = load i64, i64* %201, align 8
  br label %1514

1514:                                             ; preds = %1676, %1511
  %1515 = phi i64 [ %1513, %1511 ], [ %1677, %1676 ]
  %1516 = phi i32 [ %1512, %1511 ], [ %1678, %1676 ]
  %1517 = phi i64 [ %1509, %1511 ], [ %1681, %1676 ]
  %1518 = phi i64 [ 0, %1511 ], [ %1679, %1676 ]
  %1519 = inttoptr i64 %1517 to i32*
  %1520 = getelementptr inbounds i32, i32* %1519, i64 %1518
  %1521 = load i32, i32* %1520, align 4
  %1522 = sext i32 %1521 to i64
  %1523 = add nsw i32 %1516, -1
  store i32 %1523, i32* %200, align 8
  %1524 = zext i32 %1523 to i64
  %1525 = shl i64 %1522, %1524
  %1526 = or i64 %1525, %1515
  store i64 %1526, i64* %201, align 8
  %1527 = icmp slt i32 %1516, 18
  br i1 %1527, label %1528, label %1676

1528:                                             ; preds = %1514
  %1529 = load i64, i64* %202, align 8
  %1530 = add i64 %1529, 12
  %1531 = icmp ugt i64 %1530, 16384
  br i1 %1531, label %1532, label %1535, !prof !23

1532:                                             ; preds = %1528
  tail call fastcc void @_ZN3jxl4jpeg12_GLOBAL__N_110SwapBufferEPNS0_13JpegBitWriterE(%"struct.jxl::jpeg::JpegBitWriter"* %6) #10
  %1533 = load i64, i64* %202, align 8
  %1534 = load i64, i64* %201, align 8
  br label %1535

1535:                                             ; preds = %1532, %1528
  %1536 = phi i64 [ %1526, %1528 ], [ %1534, %1532 ]
  %1537 = phi i64 [ %1529, %1528 ], [ %1533, %1532 ]
  %1538 = or i64 %1536, 65535
  %1539 = xor i64 %1538, -65536
  %1540 = add i64 %1539, -72340172838076673
  %1541 = and i64 %1539, -9187201950435770368
  %1542 = xor i64 %1541, -9187201950435770368
  %1543 = and i64 %1542, %1540
  %1544 = icmp eq i64 %1543, 0
  %1545 = lshr i64 %1536, 56
  %1546 = trunc i64 %1545 to i8
  %1547 = load i8*, i8** %203, align 8
  br i1 %1544, label %1632, label %1548

1548:                                             ; preds = %1535
  %1549 = add i64 %1537, 1
  store i64 %1549, i64* %202, align 8
  %1550 = getelementptr inbounds i8, i8* %1547, i64 %1537
  store i8 %1546, i8* %1550, align 1
  %1551 = icmp eq i64 %1545, 255
  br i1 %1551, label %1552, label %1557

1552:                                             ; preds = %1548
  %1553 = load i8*, i8** %203, align 8
  %1554 = load i64, i64* %202, align 8
  %1555 = add i64 %1554, 1
  store i64 %1555, i64* %202, align 8
  %1556 = getelementptr inbounds i8, i8* %1553, i64 %1554
  store i8 0, i8* %1556, align 1
  br label %1557

1557:                                             ; preds = %1552, %1548
  %1558 = load i64, i64* %201, align 8
  %1559 = lshr i64 %1558, 48
  %1560 = trunc i64 %1559 to i8
  %1561 = load i8*, i8** %203, align 8
  %1562 = load i64, i64* %202, align 8
  %1563 = add i64 %1562, 1
  store i64 %1563, i64* %202, align 8
  %1564 = getelementptr inbounds i8, i8* %1561, i64 %1562
  store i8 %1560, i8* %1564, align 1
  %1565 = and i64 %1558, 71776119061217280
  %1566 = icmp eq i64 %1565, 71776119061217280
  br i1 %1566, label %1567, label %1572

1567:                                             ; preds = %1557
  %1568 = load i8*, i8** %203, align 8
  %1569 = load i64, i64* %202, align 8
  %1570 = add i64 %1569, 1
  store i64 %1570, i64* %202, align 8
  %1571 = getelementptr inbounds i8, i8* %1568, i64 %1569
  store i8 0, i8* %1571, align 1
  br label %1572

1572:                                             ; preds = %1567, %1557
  %1573 = load i64, i64* %201, align 8
  %1574 = lshr i64 %1573, 40
  %1575 = trunc i64 %1574 to i8
  %1576 = load i8*, i8** %203, align 8
  %1577 = load i64, i64* %202, align 8
  %1578 = add i64 %1577, 1
  store i64 %1578, i64* %202, align 8
  %1579 = getelementptr inbounds i8, i8* %1576, i64 %1577
  store i8 %1575, i8* %1579, align 1
  %1580 = and i64 %1573, 280375465082880
  %1581 = icmp eq i64 %1580, 280375465082880
  br i1 %1581, label %1582, label %1587

1582:                                             ; preds = %1572
  %1583 = load i8*, i8** %203, align 8
  %1584 = load i64, i64* %202, align 8
  %1585 = add i64 %1584, 1
  store i64 %1585, i64* %202, align 8
  %1586 = getelementptr inbounds i8, i8* %1583, i64 %1584
  store i8 0, i8* %1586, align 1
  br label %1587

1587:                                             ; preds = %1582, %1572
  %1588 = load i64, i64* %201, align 8
  %1589 = lshr i64 %1588, 32
  %1590 = trunc i64 %1589 to i8
  %1591 = load i8*, i8** %203, align 8
  %1592 = load i64, i64* %202, align 8
  %1593 = add i64 %1592, 1
  store i64 %1593, i64* %202, align 8
  %1594 = getelementptr inbounds i8, i8* %1591, i64 %1592
  store i8 %1590, i8* %1594, align 1
  %1595 = and i64 %1588, 1095216660480
  %1596 = icmp eq i64 %1595, 1095216660480
  br i1 %1596, label %1597, label %1602

1597:                                             ; preds = %1587
  %1598 = load i8*, i8** %203, align 8
  %1599 = load i64, i64* %202, align 8
  %1600 = add i64 %1599, 1
  store i64 %1600, i64* %202, align 8
  %1601 = getelementptr inbounds i8, i8* %1598, i64 %1599
  store i8 0, i8* %1601, align 1
  br label %1602

1602:                                             ; preds = %1597, %1587
  %1603 = load i64, i64* %201, align 8
  %1604 = lshr i64 %1603, 24
  %1605 = trunc i64 %1604 to i8
  %1606 = load i8*, i8** %203, align 8
  %1607 = load i64, i64* %202, align 8
  %1608 = add i64 %1607, 1
  store i64 %1608, i64* %202, align 8
  %1609 = getelementptr inbounds i8, i8* %1606, i64 %1607
  store i8 %1605, i8* %1609, align 1
  %1610 = and i64 %1603, 4278190080
  %1611 = icmp eq i64 %1610, 4278190080
  br i1 %1611, label %1612, label %1617

1612:                                             ; preds = %1602
  %1613 = load i8*, i8** %203, align 8
  %1614 = load i64, i64* %202, align 8
  %1615 = add i64 %1614, 1
  store i64 %1615, i64* %202, align 8
  %1616 = getelementptr inbounds i8, i8* %1613, i64 %1614
  store i8 0, i8* %1616, align 1
  br label %1617

1617:                                             ; preds = %1612, %1602
  %1618 = load i64, i64* %201, align 8
  %1619 = lshr i64 %1618, 16
  %1620 = trunc i64 %1619 to i8
  %1621 = load i8*, i8** %203, align 8
  %1622 = load i64, i64* %202, align 8
  %1623 = add i64 %1622, 1
  store i64 %1623, i64* %202, align 8
  %1624 = getelementptr inbounds i8, i8* %1621, i64 %1622
  store i8 %1620, i8* %1624, align 1
  %1625 = and i64 %1618, 16711680
  %1626 = icmp eq i64 %1625, 16711680
  br i1 %1626, label %1627, label %1671

1627:                                             ; preds = %1617
  %1628 = load i8*, i8** %203, align 8
  %1629 = load i64, i64* %202, align 8
  %1630 = add i64 %1629, 1
  store i64 %1630, i64* %202, align 8
  %1631 = getelementptr inbounds i8, i8* %1628, i64 %1629
  store i8 0, i8* %1631, align 1
  br label %1671

1632:                                             ; preds = %1535
  %1633 = getelementptr inbounds i8, i8* %1547, i64 %1537
  store i8 %1546, i8* %1633, align 1
  %1634 = load i64, i64* %201, align 8
  %1635 = lshr i64 %1634, 48
  %1636 = trunc i64 %1635 to i8
  %1637 = load i8*, i8** %203, align 8
  %1638 = load i64, i64* %202, align 8
  %1639 = add i64 %1638, 1
  %1640 = getelementptr inbounds i8, i8* %1637, i64 %1639
  store i8 %1636, i8* %1640, align 1
  %1641 = load i64, i64* %201, align 8
  %1642 = lshr i64 %1641, 40
  %1643 = trunc i64 %1642 to i8
  %1644 = load i8*, i8** %203, align 8
  %1645 = load i64, i64* %202, align 8
  %1646 = add i64 %1645, 2
  %1647 = getelementptr inbounds i8, i8* %1644, i64 %1646
  store i8 %1643, i8* %1647, align 1
  %1648 = load i64, i64* %201, align 8
  %1649 = lshr i64 %1648, 32
  %1650 = trunc i64 %1649 to i8
  %1651 = load i8*, i8** %203, align 8
  %1652 = load i64, i64* %202, align 8
  %1653 = add i64 %1652, 3
  %1654 = getelementptr inbounds i8, i8* %1651, i64 %1653
  store i8 %1650, i8* %1654, align 1
  %1655 = load i64, i64* %201, align 8
  %1656 = lshr i64 %1655, 24
  %1657 = trunc i64 %1656 to i8
  %1658 = load i8*, i8** %203, align 8
  %1659 = load i64, i64* %202, align 8
  %1660 = add i64 %1659, 4
  %1661 = getelementptr inbounds i8, i8* %1658, i64 %1660
  store i8 %1657, i8* %1661, align 1
  %1662 = load i64, i64* %201, align 8
  %1663 = lshr i64 %1662, 16
  %1664 = trunc i64 %1663 to i8
  %1665 = load i8*, i8** %203, align 8
  %1666 = load i64, i64* %202, align 8
  %1667 = add i64 %1666, 5
  %1668 = getelementptr inbounds i8, i8* %1665, i64 %1667
  store i8 %1664, i8* %1668, align 1
  %1669 = load i64, i64* %202, align 8
  %1670 = add i64 %1669, 6
  store i64 %1670, i64* %202, align 8
  br label %1671

1671:                                             ; preds = %1632, %1627, %1617
  %1672 = load i64, i64* %201, align 8
  %1673 = shl i64 %1672, 48
  store i64 %1673, i64* %201, align 8
  %1674 = load i32, i32* %200, align 8
  %1675 = add nsw i32 %1674, 48
  store i32 %1675, i32* %200, align 8
  br label %1676

1676:                                             ; preds = %1671, %1514
  %1677 = phi i64 [ %1526, %1514 ], [ %1673, %1671 ]
  %1678 = phi i32 [ %1523, %1514 ], [ %1675, %1671 ]
  %1679 = add nuw i64 %1518, 1
  %1680 = load i64, i64* %207, align 8
  %1681 = load i64, i64* %208, align 8
  %1682 = sub i64 %1680, %1681
  %1683 = ashr exact i64 %1682, 2
  %1684 = icmp ult i64 %1679, %1683
  br i1 %1684, label %1514, label %1685

1685:                                             ; preds = %1676, %1507
  %1686 = phi i64 [ %1508, %1507 ], [ %1681, %1676 ]
  store i64 %1686, i64* %207, align 8
  %1687 = shl i32 %1114, 4
  %1688 = or i32 %1687, 1
  %1689 = getelementptr inbounds [80 x i32], [80 x i32]* @_ZN3jxl4jpegL17kJPEGNaturalOrderE, i64 0, i64 %242
  %1690 = load i32, i32* %1689, align 4
  %1691 = zext i32 %1690 to i64
  %1692 = getelementptr inbounds i16, i16* %0, i64 %1691
  %1693 = load i16, i16* %1692, align 2
  %1694 = lshr i16 %1693, 15
  %1695 = xor i16 %1694, 1
  %1696 = sext i32 %1688 to i64
  %1697 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanCodeTable", %"struct.jxl::jpeg::HuffmanCodeTable"* %1, i64 0, i32 0, i64 %1696
  %1698 = load i32, i32* %1697, align 4
  %1699 = icmp eq i32 %1698, 0
  br i1 %1699, label %1700, label %1703

1700:                                             ; preds = %1685
  store i8 0, i8* %204, align 8
  %1701 = load i32, i32* %200, align 8
  %1702 = load i64, i64* %201, align 8
  br label %1862

1703:                                             ; preds = %1685
  %1704 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanCodeTable", %"struct.jxl::jpeg::HuffmanCodeTable"* %1, i64 0, i32 1, i64 %1696
  %1705 = load i32, i32* %1704, align 4
  %1706 = sext i32 %1705 to i64
  %1707 = load i32, i32* %200, align 8
  %1708 = sub nsw i32 %1707, %1698
  store i32 %1708, i32* %200, align 8
  %1709 = zext i32 %1708 to i64
  %1710 = shl i64 %1706, %1709
  %1711 = load i64, i64* %201, align 8
  %1712 = or i64 %1710, %1711
  store i64 %1712, i64* %201, align 8
  %1713 = icmp slt i32 %1708, 17
  br i1 %1713, label %1714, label %1862

1714:                                             ; preds = %1703
  %1715 = load i64, i64* %202, align 8
  %1716 = add i64 %1715, 12
  %1717 = icmp ugt i64 %1716, 16384
  br i1 %1717, label %1718, label %1721, !prof !23

1718:                                             ; preds = %1714
  tail call fastcc void @_ZN3jxl4jpeg12_GLOBAL__N_110SwapBufferEPNS0_13JpegBitWriterE(%"struct.jxl::jpeg::JpegBitWriter"* %6) #10
  %1719 = load i64, i64* %202, align 8
  %1720 = load i64, i64* %201, align 8
  br label %1721

1721:                                             ; preds = %1718, %1714
  %1722 = phi i64 [ %1712, %1714 ], [ %1720, %1718 ]
  %1723 = phi i64 [ %1715, %1714 ], [ %1719, %1718 ]
  %1724 = or i64 %1722, 65535
  %1725 = xor i64 %1724, -65536
  %1726 = add i64 %1725, -72340172838076673
  %1727 = and i64 %1725, -9187201950435770368
  %1728 = xor i64 %1727, -9187201950435770368
  %1729 = and i64 %1728, %1726
  %1730 = icmp eq i64 %1729, 0
  %1731 = lshr i64 %1722, 56
  %1732 = trunc i64 %1731 to i8
  %1733 = load i8*, i8** %203, align 8
  br i1 %1730, label %1818, label %1734

1734:                                             ; preds = %1721
  %1735 = add i64 %1723, 1
  store i64 %1735, i64* %202, align 8
  %1736 = getelementptr inbounds i8, i8* %1733, i64 %1723
  store i8 %1732, i8* %1736, align 1
  %1737 = icmp eq i64 %1731, 255
  br i1 %1737, label %1738, label %1743

1738:                                             ; preds = %1734
  %1739 = load i8*, i8** %203, align 8
  %1740 = load i64, i64* %202, align 8
  %1741 = add i64 %1740, 1
  store i64 %1741, i64* %202, align 8
  %1742 = getelementptr inbounds i8, i8* %1739, i64 %1740
  store i8 0, i8* %1742, align 1
  br label %1743

1743:                                             ; preds = %1738, %1734
  %1744 = load i64, i64* %201, align 8
  %1745 = lshr i64 %1744, 48
  %1746 = trunc i64 %1745 to i8
  %1747 = load i8*, i8** %203, align 8
  %1748 = load i64, i64* %202, align 8
  %1749 = add i64 %1748, 1
  store i64 %1749, i64* %202, align 8
  %1750 = getelementptr inbounds i8, i8* %1747, i64 %1748
  store i8 %1746, i8* %1750, align 1
  %1751 = and i64 %1744, 71776119061217280
  %1752 = icmp eq i64 %1751, 71776119061217280
  br i1 %1752, label %1753, label %1758

1753:                                             ; preds = %1743
  %1754 = load i8*, i8** %203, align 8
  %1755 = load i64, i64* %202, align 8
  %1756 = add i64 %1755, 1
  store i64 %1756, i64* %202, align 8
  %1757 = getelementptr inbounds i8, i8* %1754, i64 %1755
  store i8 0, i8* %1757, align 1
  br label %1758

1758:                                             ; preds = %1753, %1743
  %1759 = load i64, i64* %201, align 8
  %1760 = lshr i64 %1759, 40
  %1761 = trunc i64 %1760 to i8
  %1762 = load i8*, i8** %203, align 8
  %1763 = load i64, i64* %202, align 8
  %1764 = add i64 %1763, 1
  store i64 %1764, i64* %202, align 8
  %1765 = getelementptr inbounds i8, i8* %1762, i64 %1763
  store i8 %1761, i8* %1765, align 1
  %1766 = and i64 %1759, 280375465082880
  %1767 = icmp eq i64 %1766, 280375465082880
  br i1 %1767, label %1768, label %1773

1768:                                             ; preds = %1758
  %1769 = load i8*, i8** %203, align 8
  %1770 = load i64, i64* %202, align 8
  %1771 = add i64 %1770, 1
  store i64 %1771, i64* %202, align 8
  %1772 = getelementptr inbounds i8, i8* %1769, i64 %1770
  store i8 0, i8* %1772, align 1
  br label %1773

1773:                                             ; preds = %1768, %1758
  %1774 = load i64, i64* %201, align 8
  %1775 = lshr i64 %1774, 32
  %1776 = trunc i64 %1775 to i8
  %1777 = load i8*, i8** %203, align 8
  %1778 = load i64, i64* %202, align 8
  %1779 = add i64 %1778, 1
  store i64 %1779, i64* %202, align 8
  %1780 = getelementptr inbounds i8, i8* %1777, i64 %1778
  store i8 %1776, i8* %1780, align 1
  %1781 = and i64 %1774, 1095216660480
  %1782 = icmp eq i64 %1781, 1095216660480
  br i1 %1782, label %1783, label %1788

1783:                                             ; preds = %1773
  %1784 = load i8*, i8** %203, align 8
  %1785 = load i64, i64* %202, align 8
  %1786 = add i64 %1785, 1
  store i64 %1786, i64* %202, align 8
  %1787 = getelementptr inbounds i8, i8* %1784, i64 %1785
  store i8 0, i8* %1787, align 1
  br label %1788

1788:                                             ; preds = %1783, %1773
  %1789 = load i64, i64* %201, align 8
  %1790 = lshr i64 %1789, 24
  %1791 = trunc i64 %1790 to i8
  %1792 = load i8*, i8** %203, align 8
  %1793 = load i64, i64* %202, align 8
  %1794 = add i64 %1793, 1
  store i64 %1794, i64* %202, align 8
  %1795 = getelementptr inbounds i8, i8* %1792, i64 %1793
  store i8 %1791, i8* %1795, align 1
  %1796 = and i64 %1789, 4278190080
  %1797 = icmp eq i64 %1796, 4278190080
  br i1 %1797, label %1798, label %1803

1798:                                             ; preds = %1788
  %1799 = load i8*, i8** %203, align 8
  %1800 = load i64, i64* %202, align 8
  %1801 = add i64 %1800, 1
  store i64 %1801, i64* %202, align 8
  %1802 = getelementptr inbounds i8, i8* %1799, i64 %1800
  store i8 0, i8* %1802, align 1
  br label %1803

1803:                                             ; preds = %1798, %1788
  %1804 = load i64, i64* %201, align 8
  %1805 = lshr i64 %1804, 16
  %1806 = trunc i64 %1805 to i8
  %1807 = load i8*, i8** %203, align 8
  %1808 = load i64, i64* %202, align 8
  %1809 = add i64 %1808, 1
  store i64 %1809, i64* %202, align 8
  %1810 = getelementptr inbounds i8, i8* %1807, i64 %1808
  store i8 %1806, i8* %1810, align 1
  %1811 = and i64 %1804, 16711680
  %1812 = icmp eq i64 %1811, 16711680
  br i1 %1812, label %1813, label %1857

1813:                                             ; preds = %1803
  %1814 = load i8*, i8** %203, align 8
  %1815 = load i64, i64* %202, align 8
  %1816 = add i64 %1815, 1
  store i64 %1816, i64* %202, align 8
  %1817 = getelementptr inbounds i8, i8* %1814, i64 %1815
  store i8 0, i8* %1817, align 1
  br label %1857

1818:                                             ; preds = %1721
  %1819 = getelementptr inbounds i8, i8* %1733, i64 %1723
  store i8 %1732, i8* %1819, align 1
  %1820 = load i64, i64* %201, align 8
  %1821 = lshr i64 %1820, 48
  %1822 = trunc i64 %1821 to i8
  %1823 = load i8*, i8** %203, align 8
  %1824 = load i64, i64* %202, align 8
  %1825 = add i64 %1824, 1
  %1826 = getelementptr inbounds i8, i8* %1823, i64 %1825
  store i8 %1822, i8* %1826, align 1
  %1827 = load i64, i64* %201, align 8
  %1828 = lshr i64 %1827, 40
  %1829 = trunc i64 %1828 to i8
  %1830 = load i8*, i8** %203, align 8
  %1831 = load i64, i64* %202, align 8
  %1832 = add i64 %1831, 2
  %1833 = getelementptr inbounds i8, i8* %1830, i64 %1832
  store i8 %1829, i8* %1833, align 1
  %1834 = load i64, i64* %201, align 8
  %1835 = lshr i64 %1834, 32
  %1836 = trunc i64 %1835 to i8
  %1837 = load i8*, i8** %203, align 8
  %1838 = load i64, i64* %202, align 8
  %1839 = add i64 %1838, 3
  %1840 = getelementptr inbounds i8, i8* %1837, i64 %1839
  store i8 %1836, i8* %1840, align 1
  %1841 = load i64, i64* %201, align 8
  %1842 = lshr i64 %1841, 24
  %1843 = trunc i64 %1842 to i8
  %1844 = load i8*, i8** %203, align 8
  %1845 = load i64, i64* %202, align 8
  %1846 = add i64 %1845, 4
  %1847 = getelementptr inbounds i8, i8* %1844, i64 %1846
  store i8 %1843, i8* %1847, align 1
  %1848 = load i64, i64* %201, align 8
  %1849 = lshr i64 %1848, 16
  %1850 = trunc i64 %1849 to i8
  %1851 = load i8*, i8** %203, align 8
  %1852 = load i64, i64* %202, align 8
  %1853 = add i64 %1852, 5
  %1854 = getelementptr inbounds i8, i8* %1851, i64 %1853
  store i8 %1850, i8* %1854, align 1
  %1855 = load i64, i64* %202, align 8
  %1856 = add i64 %1855, 6
  store i64 %1856, i64* %202, align 8
  br label %1857

1857:                                             ; preds = %1818, %1813, %1803
  %1858 = load i64, i64* %201, align 8
  %1859 = shl i64 %1858, 48
  store i64 %1859, i64* %201, align 8
  %1860 = load i32, i32* %200, align 8
  %1861 = add nsw i32 %1860, 48
  store i32 %1861, i32* %200, align 8
  br label %1862

1862:                                             ; preds = %1700, %1703, %1857
  %1863 = phi i64 [ %1702, %1700 ], [ %1712, %1703 ], [ %1859, %1857 ]
  %1864 = phi i32 [ %1701, %1700 ], [ %1708, %1703 ], [ %1861, %1857 ]
  %1865 = zext i16 %1695 to i64
  %1866 = add nsw i32 %1864, -1
  store i32 %1866, i32* %200, align 8
  %1867 = zext i32 %1866 to i64
  %1868 = shl i64 %1865, %1867
  %1869 = or i64 %1868, %1863
  store i64 %1869, i64* %201, align 8
  %1870 = icmp slt i32 %1864, 18
  br i1 %1870, label %1871, label %2019

1871:                                             ; preds = %1862
  %1872 = load i64, i64* %202, align 8
  %1873 = add i64 %1872, 12
  %1874 = icmp ugt i64 %1873, 16384
  br i1 %1874, label %1875, label %1878, !prof !23

1875:                                             ; preds = %1871
  tail call fastcc void @_ZN3jxl4jpeg12_GLOBAL__N_110SwapBufferEPNS0_13JpegBitWriterE(%"struct.jxl::jpeg::JpegBitWriter"* %6) #10
  %1876 = load i64, i64* %202, align 8
  %1877 = load i64, i64* %201, align 8
  br label %1878

1878:                                             ; preds = %1875, %1871
  %1879 = phi i64 [ %1869, %1871 ], [ %1877, %1875 ]
  %1880 = phi i64 [ %1872, %1871 ], [ %1876, %1875 ]
  %1881 = or i64 %1879, 65535
  %1882 = xor i64 %1881, -65536
  %1883 = add i64 %1882, -72340172838076673
  %1884 = and i64 %1882, -9187201950435770368
  %1885 = xor i64 %1884, -9187201950435770368
  %1886 = and i64 %1885, %1883
  %1887 = icmp eq i64 %1886, 0
  %1888 = lshr i64 %1879, 56
  %1889 = trunc i64 %1888 to i8
  %1890 = load i8*, i8** %203, align 8
  br i1 %1887, label %1975, label %1891

1891:                                             ; preds = %1878
  %1892 = add i64 %1880, 1
  store i64 %1892, i64* %202, align 8
  %1893 = getelementptr inbounds i8, i8* %1890, i64 %1880
  store i8 %1889, i8* %1893, align 1
  %1894 = icmp eq i64 %1888, 255
  br i1 %1894, label %1895, label %1900

1895:                                             ; preds = %1891
  %1896 = load i8*, i8** %203, align 8
  %1897 = load i64, i64* %202, align 8
  %1898 = add i64 %1897, 1
  store i64 %1898, i64* %202, align 8
  %1899 = getelementptr inbounds i8, i8* %1896, i64 %1897
  store i8 0, i8* %1899, align 1
  br label %1900

1900:                                             ; preds = %1895, %1891
  %1901 = load i64, i64* %201, align 8
  %1902 = lshr i64 %1901, 48
  %1903 = trunc i64 %1902 to i8
  %1904 = load i8*, i8** %203, align 8
  %1905 = load i64, i64* %202, align 8
  %1906 = add i64 %1905, 1
  store i64 %1906, i64* %202, align 8
  %1907 = getelementptr inbounds i8, i8* %1904, i64 %1905
  store i8 %1903, i8* %1907, align 1
  %1908 = and i64 %1901, 71776119061217280
  %1909 = icmp eq i64 %1908, 71776119061217280
  br i1 %1909, label %1910, label %1915

1910:                                             ; preds = %1900
  %1911 = load i8*, i8** %203, align 8
  %1912 = load i64, i64* %202, align 8
  %1913 = add i64 %1912, 1
  store i64 %1913, i64* %202, align 8
  %1914 = getelementptr inbounds i8, i8* %1911, i64 %1912
  store i8 0, i8* %1914, align 1
  br label %1915

1915:                                             ; preds = %1910, %1900
  %1916 = load i64, i64* %201, align 8
  %1917 = lshr i64 %1916, 40
  %1918 = trunc i64 %1917 to i8
  %1919 = load i8*, i8** %203, align 8
  %1920 = load i64, i64* %202, align 8
  %1921 = add i64 %1920, 1
  store i64 %1921, i64* %202, align 8
  %1922 = getelementptr inbounds i8, i8* %1919, i64 %1920
  store i8 %1918, i8* %1922, align 1
  %1923 = and i64 %1916, 280375465082880
  %1924 = icmp eq i64 %1923, 280375465082880
  br i1 %1924, label %1925, label %1930

1925:                                             ; preds = %1915
  %1926 = load i8*, i8** %203, align 8
  %1927 = load i64, i64* %202, align 8
  %1928 = add i64 %1927, 1
  store i64 %1928, i64* %202, align 8
  %1929 = getelementptr inbounds i8, i8* %1926, i64 %1927
  store i8 0, i8* %1929, align 1
  br label %1930

1930:                                             ; preds = %1925, %1915
  %1931 = load i64, i64* %201, align 8
  %1932 = lshr i64 %1931, 32
  %1933 = trunc i64 %1932 to i8
  %1934 = load i8*, i8** %203, align 8
  %1935 = load i64, i64* %202, align 8
  %1936 = add i64 %1935, 1
  store i64 %1936, i64* %202, align 8
  %1937 = getelementptr inbounds i8, i8* %1934, i64 %1935
  store i8 %1933, i8* %1937, align 1
  %1938 = and i64 %1931, 1095216660480
  %1939 = icmp eq i64 %1938, 1095216660480
  br i1 %1939, label %1940, label %1945

1940:                                             ; preds = %1930
  %1941 = load i8*, i8** %203, align 8
  %1942 = load i64, i64* %202, align 8
  %1943 = add i64 %1942, 1
  store i64 %1943, i64* %202, align 8
  %1944 = getelementptr inbounds i8, i8* %1941, i64 %1942
  store i8 0, i8* %1944, align 1
  br label %1945

1945:                                             ; preds = %1940, %1930
  %1946 = load i64, i64* %201, align 8
  %1947 = lshr i64 %1946, 24
  %1948 = trunc i64 %1947 to i8
  %1949 = load i8*, i8** %203, align 8
  %1950 = load i64, i64* %202, align 8
  %1951 = add i64 %1950, 1
  store i64 %1951, i64* %202, align 8
  %1952 = getelementptr inbounds i8, i8* %1949, i64 %1950
  store i8 %1948, i8* %1952, align 1
  %1953 = and i64 %1946, 4278190080
  %1954 = icmp eq i64 %1953, 4278190080
  br i1 %1954, label %1955, label %1960

1955:                                             ; preds = %1945
  %1956 = load i8*, i8** %203, align 8
  %1957 = load i64, i64* %202, align 8
  %1958 = add i64 %1957, 1
  store i64 %1958, i64* %202, align 8
  %1959 = getelementptr inbounds i8, i8* %1956, i64 %1957
  store i8 0, i8* %1959, align 1
  br label %1960

1960:                                             ; preds = %1955, %1945
  %1961 = load i64, i64* %201, align 8
  %1962 = lshr i64 %1961, 16
  %1963 = trunc i64 %1962 to i8
  %1964 = load i8*, i8** %203, align 8
  %1965 = load i64, i64* %202, align 8
  %1966 = add i64 %1965, 1
  store i64 %1966, i64* %202, align 8
  %1967 = getelementptr inbounds i8, i8* %1964, i64 %1965
  store i8 %1963, i8* %1967, align 1
  %1968 = and i64 %1961, 16711680
  %1969 = icmp eq i64 %1968, 16711680
  br i1 %1969, label %1970, label %2014

1970:                                             ; preds = %1960
  %1971 = load i8*, i8** %203, align 8
  %1972 = load i64, i64* %202, align 8
  %1973 = add i64 %1972, 1
  store i64 %1973, i64* %202, align 8
  %1974 = getelementptr inbounds i8, i8* %1971, i64 %1972
  store i8 0, i8* %1974, align 1
  br label %2014

1975:                                             ; preds = %1878
  %1976 = getelementptr inbounds i8, i8* %1890, i64 %1880
  store i8 %1889, i8* %1976, align 1
  %1977 = load i64, i64* %201, align 8
  %1978 = lshr i64 %1977, 48
  %1979 = trunc i64 %1978 to i8
  %1980 = load i8*, i8** %203, align 8
  %1981 = load i64, i64* %202, align 8
  %1982 = add i64 %1981, 1
  %1983 = getelementptr inbounds i8, i8* %1980, i64 %1982
  store i8 %1979, i8* %1983, align 1
  %1984 = load i64, i64* %201, align 8
  %1985 = lshr i64 %1984, 40
  %1986 = trunc i64 %1985 to i8
  %1987 = load i8*, i8** %203, align 8
  %1988 = load i64, i64* %202, align 8
  %1989 = add i64 %1988, 2
  %1990 = getelementptr inbounds i8, i8* %1987, i64 %1989
  store i8 %1986, i8* %1990, align 1
  %1991 = load i64, i64* %201, align 8
  %1992 = lshr i64 %1991, 32
  %1993 = trunc i64 %1992 to i8
  %1994 = load i8*, i8** %203, align 8
  %1995 = load i64, i64* %202, align 8
  %1996 = add i64 %1995, 3
  %1997 = getelementptr inbounds i8, i8* %1994, i64 %1996
  store i8 %1993, i8* %1997, align 1
  %1998 = load i64, i64* %201, align 8
  %1999 = lshr i64 %1998, 24
  %2000 = trunc i64 %1999 to i8
  %2001 = load i8*, i8** %203, align 8
  %2002 = load i64, i64* %202, align 8
  %2003 = add i64 %2002, 4
  %2004 = getelementptr inbounds i8, i8* %2001, i64 %2003
  store i8 %2000, i8* %2004, align 1
  %2005 = load i64, i64* %201, align 8
  %2006 = lshr i64 %2005, 16
  %2007 = trunc i64 %2006 to i8
  %2008 = load i8*, i8** %203, align 8
  %2009 = load i64, i64* %202, align 8
  %2010 = add i64 %2009, 5
  %2011 = getelementptr inbounds i8, i8* %2008, i64 %2010
  store i8 %2007, i8* %2011, align 1
  %2012 = load i64, i64* %202, align 8
  %2013 = add i64 %2012, 6
  store i64 %2013, i64* %202, align 8
  br label %2014

2014:                                             ; preds = %1975, %1970, %1960
  %2015 = load i64, i64* %201, align 8
  %2016 = shl i64 %2015, 48
  store i64 %2016, i64* %201, align 8
  %2017 = load i32, i32* %200, align 8
  %2018 = add nsw i32 %2017, 48
  store i32 %2018, i32* %200, align 8
  br label %2019

2019:                                             ; preds = %1862, %2014
  %2020 = phi i64 [ %1869, %1862 ], [ %2016, %2014 ]
  %2021 = phi i32 [ %1866, %1862 ], [ %2018, %2014 ]
  %2022 = load i32*, i32** %186, align 8
  %2023 = load i32*, i32** %187, align 8
  %2024 = icmp eq i32* %2022, %2023
  %2025 = ptrtoint i32* %2022 to i64
  br i1 %2024, label %2028, label %2031

2026:                                             ; preds = %2190
  %2027 = load i64, i64* %190, align 8
  br label %2028

2028:                                             ; preds = %2026, %2019
  %2029 = phi i64 [ %2027, %2026 ], [ %2025, %2019 ]
  store i64 %2029, i64* %211, align 8
  %2030 = inttoptr i64 %2029 to i32*
  br label %2195

2031:                                             ; preds = %2019, %2190
  %2032 = phi i64 [ %2191, %2190 ], [ %2020, %2019 ]
  %2033 = phi i32 [ %2192, %2190 ], [ %2021, %2019 ]
  %2034 = phi i32* [ %2193, %2190 ], [ %2022, %2019 ]
  %2035 = load i32, i32* %2034, align 4
  %2036 = sext i32 %2035 to i64
  %2037 = add nsw i32 %2033, -1
  store i32 %2037, i32* %200, align 8
  %2038 = zext i32 %2037 to i64
  %2039 = shl i64 %2036, %2038
  %2040 = or i64 %2039, %2032
  store i64 %2040, i64* %201, align 8
  %2041 = icmp slt i32 %2033, 18
  br i1 %2041, label %2042, label %2190

2042:                                             ; preds = %2031
  %2043 = load i64, i64* %202, align 8
  %2044 = add i64 %2043, 12
  %2045 = icmp ugt i64 %2044, 16384
  br i1 %2045, label %2046, label %2049, !prof !23

2046:                                             ; preds = %2042
  tail call fastcc void @_ZN3jxl4jpeg12_GLOBAL__N_110SwapBufferEPNS0_13JpegBitWriterE(%"struct.jxl::jpeg::JpegBitWriter"* %6) #10
  %2047 = load i64, i64* %202, align 8
  %2048 = load i64, i64* %201, align 8
  br label %2049

2049:                                             ; preds = %2046, %2042
  %2050 = phi i64 [ %2040, %2042 ], [ %2048, %2046 ]
  %2051 = phi i64 [ %2043, %2042 ], [ %2047, %2046 ]
  %2052 = or i64 %2050, 65535
  %2053 = xor i64 %2052, -65536
  %2054 = add i64 %2053, -72340172838076673
  %2055 = and i64 %2053, -9187201950435770368
  %2056 = xor i64 %2055, -9187201950435770368
  %2057 = and i64 %2056, %2054
  %2058 = icmp eq i64 %2057, 0
  %2059 = lshr i64 %2050, 56
  %2060 = trunc i64 %2059 to i8
  %2061 = load i8*, i8** %203, align 8
  br i1 %2058, label %2146, label %2062

2062:                                             ; preds = %2049
  %2063 = add i64 %2051, 1
  store i64 %2063, i64* %202, align 8
  %2064 = getelementptr inbounds i8, i8* %2061, i64 %2051
  store i8 %2060, i8* %2064, align 1
  %2065 = icmp eq i64 %2059, 255
  br i1 %2065, label %2066, label %2071

2066:                                             ; preds = %2062
  %2067 = load i8*, i8** %203, align 8
  %2068 = load i64, i64* %202, align 8
  %2069 = add i64 %2068, 1
  store i64 %2069, i64* %202, align 8
  %2070 = getelementptr inbounds i8, i8* %2067, i64 %2068
  store i8 0, i8* %2070, align 1
  br label %2071

2071:                                             ; preds = %2066, %2062
  %2072 = load i64, i64* %201, align 8
  %2073 = lshr i64 %2072, 48
  %2074 = trunc i64 %2073 to i8
  %2075 = load i8*, i8** %203, align 8
  %2076 = load i64, i64* %202, align 8
  %2077 = add i64 %2076, 1
  store i64 %2077, i64* %202, align 8
  %2078 = getelementptr inbounds i8, i8* %2075, i64 %2076
  store i8 %2074, i8* %2078, align 1
  %2079 = and i64 %2072, 71776119061217280
  %2080 = icmp eq i64 %2079, 71776119061217280
  br i1 %2080, label %2081, label %2086

2081:                                             ; preds = %2071
  %2082 = load i8*, i8** %203, align 8
  %2083 = load i64, i64* %202, align 8
  %2084 = add i64 %2083, 1
  store i64 %2084, i64* %202, align 8
  %2085 = getelementptr inbounds i8, i8* %2082, i64 %2083
  store i8 0, i8* %2085, align 1
  br label %2086

2086:                                             ; preds = %2081, %2071
  %2087 = load i64, i64* %201, align 8
  %2088 = lshr i64 %2087, 40
  %2089 = trunc i64 %2088 to i8
  %2090 = load i8*, i8** %203, align 8
  %2091 = load i64, i64* %202, align 8
  %2092 = add i64 %2091, 1
  store i64 %2092, i64* %202, align 8
  %2093 = getelementptr inbounds i8, i8* %2090, i64 %2091
  store i8 %2089, i8* %2093, align 1
  %2094 = and i64 %2087, 280375465082880
  %2095 = icmp eq i64 %2094, 280375465082880
  br i1 %2095, label %2096, label %2101

2096:                                             ; preds = %2086
  %2097 = load i8*, i8** %203, align 8
  %2098 = load i64, i64* %202, align 8
  %2099 = add i64 %2098, 1
  store i64 %2099, i64* %202, align 8
  %2100 = getelementptr inbounds i8, i8* %2097, i64 %2098
  store i8 0, i8* %2100, align 1
  br label %2101

2101:                                             ; preds = %2096, %2086
  %2102 = load i64, i64* %201, align 8
  %2103 = lshr i64 %2102, 32
  %2104 = trunc i64 %2103 to i8
  %2105 = load i8*, i8** %203, align 8
  %2106 = load i64, i64* %202, align 8
  %2107 = add i64 %2106, 1
  store i64 %2107, i64* %202, align 8
  %2108 = getelementptr inbounds i8, i8* %2105, i64 %2106
  store i8 %2104, i8* %2108, align 1
  %2109 = and i64 %2102, 1095216660480
  %2110 = icmp eq i64 %2109, 1095216660480
  br i1 %2110, label %2111, label %2116

2111:                                             ; preds = %2101
  %2112 = load i8*, i8** %203, align 8
  %2113 = load i64, i64* %202, align 8
  %2114 = add i64 %2113, 1
  store i64 %2114, i64* %202, align 8
  %2115 = getelementptr inbounds i8, i8* %2112, i64 %2113
  store i8 0, i8* %2115, align 1
  br label %2116

2116:                                             ; preds = %2111, %2101
  %2117 = load i64, i64* %201, align 8
  %2118 = lshr i64 %2117, 24
  %2119 = trunc i64 %2118 to i8
  %2120 = load i8*, i8** %203, align 8
  %2121 = load i64, i64* %202, align 8
  %2122 = add i64 %2121, 1
  store i64 %2122, i64* %202, align 8
  %2123 = getelementptr inbounds i8, i8* %2120, i64 %2121
  store i8 %2119, i8* %2123, align 1
  %2124 = and i64 %2117, 4278190080
  %2125 = icmp eq i64 %2124, 4278190080
  br i1 %2125, label %2126, label %2131

2126:                                             ; preds = %2116
  %2127 = load i8*, i8** %203, align 8
  %2128 = load i64, i64* %202, align 8
  %2129 = add i64 %2128, 1
  store i64 %2129, i64* %202, align 8
  %2130 = getelementptr inbounds i8, i8* %2127, i64 %2128
  store i8 0, i8* %2130, align 1
  br label %2131

2131:                                             ; preds = %2126, %2116
  %2132 = load i64, i64* %201, align 8
  %2133 = lshr i64 %2132, 16
  %2134 = trunc i64 %2133 to i8
  %2135 = load i8*, i8** %203, align 8
  %2136 = load i64, i64* %202, align 8
  %2137 = add i64 %2136, 1
  store i64 %2137, i64* %202, align 8
  %2138 = getelementptr inbounds i8, i8* %2135, i64 %2136
  store i8 %2134, i8* %2138, align 1
  %2139 = and i64 %2132, 16711680
  %2140 = icmp eq i64 %2139, 16711680
  br i1 %2140, label %2141, label %2185

2141:                                             ; preds = %2131
  %2142 = load i8*, i8** %203, align 8
  %2143 = load i64, i64* %202, align 8
  %2144 = add i64 %2143, 1
  store i64 %2144, i64* %202, align 8
  %2145 = getelementptr inbounds i8, i8* %2142, i64 %2143
  store i8 0, i8* %2145, align 1
  br label %2185

2146:                                             ; preds = %2049
  %2147 = getelementptr inbounds i8, i8* %2061, i64 %2051
  store i8 %2060, i8* %2147, align 1
  %2148 = load i64, i64* %201, align 8
  %2149 = lshr i64 %2148, 48
  %2150 = trunc i64 %2149 to i8
  %2151 = load i8*, i8** %203, align 8
  %2152 = load i64, i64* %202, align 8
  %2153 = add i64 %2152, 1
  %2154 = getelementptr inbounds i8, i8* %2151, i64 %2153
  store i8 %2150, i8* %2154, align 1
  %2155 = load i64, i64* %201, align 8
  %2156 = lshr i64 %2155, 40
  %2157 = trunc i64 %2156 to i8
  %2158 = load i8*, i8** %203, align 8
  %2159 = load i64, i64* %202, align 8
  %2160 = add i64 %2159, 2
  %2161 = getelementptr inbounds i8, i8* %2158, i64 %2160
  store i8 %2157, i8* %2161, align 1
  %2162 = load i64, i64* %201, align 8
  %2163 = lshr i64 %2162, 32
  %2164 = trunc i64 %2163 to i8
  %2165 = load i8*, i8** %203, align 8
  %2166 = load i64, i64* %202, align 8
  %2167 = add i64 %2166, 3
  %2168 = getelementptr inbounds i8, i8* %2165, i64 %2167
  store i8 %2164, i8* %2168, align 1
  %2169 = load i64, i64* %201, align 8
  %2170 = lshr i64 %2169, 24
  %2171 = trunc i64 %2170 to i8
  %2172 = load i8*, i8** %203, align 8
  %2173 = load i64, i64* %202, align 8
  %2174 = add i64 %2173, 4
  %2175 = getelementptr inbounds i8, i8* %2172, i64 %2174
  store i8 %2171, i8* %2175, align 1
  %2176 = load i64, i64* %201, align 8
  %2177 = lshr i64 %2176, 16
  %2178 = trunc i64 %2177 to i8
  %2179 = load i8*, i8** %203, align 8
  %2180 = load i64, i64* %202, align 8
  %2181 = add i64 %2180, 5
  %2182 = getelementptr inbounds i8, i8* %2179, i64 %2181
  store i8 %2178, i8* %2182, align 1
  %2183 = load i64, i64* %202, align 8
  %2184 = add i64 %2183, 6
  store i64 %2184, i64* %202, align 8
  br label %2185

2185:                                             ; preds = %2146, %2141, %2131
  %2186 = load i64, i64* %201, align 8
  %2187 = shl i64 %2186, 48
  store i64 %2187, i64* %201, align 8
  %2188 = load i32, i32* %200, align 8
  %2189 = add nsw i32 %2188, 48
  store i32 %2189, i32* %200, align 8
  br label %2190

2190:                                             ; preds = %2031, %2185
  %2191 = phi i64 [ %2040, %2031 ], [ %2187, %2185 ]
  %2192 = phi i32 [ %2037, %2031 ], [ %2189, %2185 ]
  %2193 = getelementptr inbounds i32, i32* %2034, i64 1
  %2194 = icmp eq i32* %2193, %2023
  br i1 %2194, label %2026, label %2031

2195:                                             ; preds = %1169, %1167, %1121, %2028, %251
  %2196 = phi i32* [ %238, %251 ], [ %2030, %2028 ], [ %1122, %1121 ], [ %1156, %1167 ], [ %1156, %1169 ]
  %2197 = phi i32* [ %239, %251 ], [ %2030, %2028 ], [ %1122, %1121 ], [ %1156, %1167 ], [ %1156, %1169 ]
  %2198 = phi i64 [ %240, %251 ], [ %2029, %2028 ], [ %1123, %1121 ], [ %1157, %1167 ], [ %1157, %1169 ]
  %2199 = phi i32* [ %241, %251 ], [ %2030, %2028 ], [ %1122, %1121 ], [ %1156, %1167 ], [ %1156, %1169 ]
  %2200 = phi i32 [ %252, %251 ], [ 0, %2028 ], [ %1114, %1121 ], [ %1114, %1167 ], [ %1114, %1169 ]
  %2201 = add nsw i64 %242, 1
  %2202 = icmp slt i64 %242, %183
  br i1 %2202, label %237, label %232

2203:                                             ; preds = %232
  %2204 = getelementptr inbounds %"struct.jxl::jpeg::DCTCodingState", %"struct.jxl::jpeg::DCTCodingState"* %5, i64 0, i32 0
  %2205 = load i32, i32* %2204, align 8
  %2206 = icmp eq i32 %2205, 0
  br i1 %2206, label %2207, label %2209

2207:                                             ; preds = %2203
  %2208 = getelementptr inbounds %"struct.jxl::jpeg::DCTCodingState", %"struct.jxl::jpeg::DCTCodingState"* %5, i64 0, i32 1
  store %"struct.jxl::jpeg::HuffmanCodeTable"* %1, %"struct.jxl::jpeg::HuffmanCodeTable"** %2208, align 8
  br label %2209

2209:                                             ; preds = %2207, %2203
  %2210 = add nsw i32 %2205, 1
  store i32 %2210, i32* %2204, align 8
  %2211 = getelementptr inbounds %"struct.jxl::jpeg::DCTCodingState", %"struct.jxl::jpeg::DCTCodingState"* %5, i64 0, i32 2
  %2212 = getelementptr inbounds %"struct.jxl::jpeg::DCTCodingState", %"struct.jxl::jpeg::DCTCodingState"* %5, i64 0, i32 2, i32 0, i32 1
  %2213 = load i32*, i32** %2212, align 8
  %2214 = load i32*, i32** %186, align 8
  %2215 = tail call i32* @_ZNSt3__16vectorIiNS_9allocatorIiEEE6insertINS_11__wrap_iterIPKiEEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIiNS_15iterator_traitsISA_E9referenceEEE5valueENS5_IPiEEE4typeES8_SA_SA_(%"class.std::__1::vector.86"* %2211, i32* %2213, i32* %2214, i32* %2196) #10
  %2216 = load i32, i32* %2204, align 8
  %2217 = icmp eq i32 %2216, 32767
  br i1 %2217, label %2228, label %2218

2218:                                             ; preds = %2209
  %2219 = bitcast i32** %2212 to i64*
  %2220 = load i64, i64* %2219, align 8
  %2221 = bitcast %"class.std::__1::vector.86"* %2211 to i64*
  %2222 = load i64, i64* %2221, align 8
  %2223 = sub i64 %2220, %2222
  %2224 = ashr exact i64 %2223, 2
  %2225 = icmp ugt i64 %2224, 65473
  br i1 %2225, label %2226, label %2761

2226:                                             ; preds = %2218
  %2227 = icmp sgt i32 %2216, 0
  br i1 %2227, label %2228, label %2575

2228:                                             ; preds = %2226, %2209
  %2229 = tail call i32 @llvm.ctlz.i32(i32 %2216, i1 true) #10, !range !22
  %2230 = xor i32 %2229, 31
  %2231 = shl nuw nsw i32 %2230, 4
  %2232 = getelementptr inbounds %"struct.jxl::jpeg::DCTCodingState", %"struct.jxl::jpeg::DCTCodingState"* %5, i64 0, i32 1
  %2233 = load %"struct.jxl::jpeg::HuffmanCodeTable"*, %"struct.jxl::jpeg::HuffmanCodeTable"** %2232, align 8
  %2234 = zext i32 %2231 to i64
  %2235 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanCodeTable", %"struct.jxl::jpeg::HuffmanCodeTable"* %2233, i64 0, i32 0, i64 %2234
  %2236 = load i32, i32* %2235, align 4
  %2237 = icmp eq i32 %2236, 0
  br i1 %2237, label %2238, label %2240

2238:                                             ; preds = %2228
  %2239 = getelementptr inbounds %"struct.jxl::jpeg::JpegBitWriter", %"struct.jxl::jpeg::JpegBitWriter"* %6, i64 0, i32 0
  store i8 0, i8* %2239, align 8
  br label %2403

2240:                                             ; preds = %2228
  %2241 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanCodeTable", %"struct.jxl::jpeg::HuffmanCodeTable"* %2233, i64 0, i32 1, i64 %2234
  %2242 = load i32, i32* %2241, align 4
  %2243 = sext i32 %2242 to i64
  %2244 = getelementptr inbounds %"struct.jxl::jpeg::JpegBitWriter", %"struct.jxl::jpeg::JpegBitWriter"* %6, i64 0, i32 7
  %2245 = load i32, i32* %2244, align 8
  %2246 = sub nsw i32 %2245, %2236
  store i32 %2246, i32* %2244, align 8
  %2247 = zext i32 %2246 to i64
  %2248 = shl i64 %2243, %2247
  %2249 = getelementptr inbounds %"struct.jxl::jpeg::JpegBitWriter", %"struct.jxl::jpeg::JpegBitWriter"* %6, i64 0, i32 6
  %2250 = load i64, i64* %2249, align 8
  %2251 = or i64 %2248, %2250
  store i64 %2251, i64* %2249, align 8
  %2252 = icmp slt i32 %2246, 17
  br i1 %2252, label %2253, label %2403

2253:                                             ; preds = %2240
  %2254 = getelementptr inbounds %"struct.jxl::jpeg::JpegBitWriter", %"struct.jxl::jpeg::JpegBitWriter"* %6, i64 0, i32 5
  %2255 = load i64, i64* %2254, align 8
  %2256 = add i64 %2255, 12
  %2257 = icmp ugt i64 %2256, 16384
  br i1 %2257, label %2258, label %2261, !prof !23

2258:                                             ; preds = %2253
  tail call fastcc void @_ZN3jxl4jpeg12_GLOBAL__N_110SwapBufferEPNS0_13JpegBitWriterE(%"struct.jxl::jpeg::JpegBitWriter"* %6) #10
  %2259 = load i64, i64* %2254, align 8
  %2260 = load i64, i64* %2249, align 8
  br label %2261

2261:                                             ; preds = %2258, %2253
  %2262 = phi i64 [ %2251, %2253 ], [ %2260, %2258 ]
  %2263 = phi i64 [ %2255, %2253 ], [ %2259, %2258 ]
  %2264 = or i64 %2262, 65535
  %2265 = xor i64 %2264, -65536
  %2266 = add i64 %2265, -72340172838076673
  %2267 = and i64 %2265, -9187201950435770368
  %2268 = xor i64 %2267, -9187201950435770368
  %2269 = and i64 %2268, %2266
  %2270 = icmp eq i64 %2269, 0
  %2271 = lshr i64 %2262, 56
  %2272 = trunc i64 %2271 to i8
  %2273 = getelementptr inbounds %"struct.jxl::jpeg::JpegBitWriter", %"struct.jxl::jpeg::JpegBitWriter"* %6, i64 0, i32 4
  %2274 = load i8*, i8** %2273, align 8
  br i1 %2270, label %2359, label %2275

2275:                                             ; preds = %2261
  %2276 = add i64 %2263, 1
  store i64 %2276, i64* %2254, align 8
  %2277 = getelementptr inbounds i8, i8* %2274, i64 %2263
  store i8 %2272, i8* %2277, align 1
  %2278 = icmp eq i64 %2271, 255
  br i1 %2278, label %2279, label %2284

2279:                                             ; preds = %2275
  %2280 = load i8*, i8** %2273, align 8
  %2281 = load i64, i64* %2254, align 8
  %2282 = add i64 %2281, 1
  store i64 %2282, i64* %2254, align 8
  %2283 = getelementptr inbounds i8, i8* %2280, i64 %2281
  store i8 0, i8* %2283, align 1
  br label %2284

2284:                                             ; preds = %2279, %2275
  %2285 = load i64, i64* %2249, align 8
  %2286 = lshr i64 %2285, 48
  %2287 = trunc i64 %2286 to i8
  %2288 = load i8*, i8** %2273, align 8
  %2289 = load i64, i64* %2254, align 8
  %2290 = add i64 %2289, 1
  store i64 %2290, i64* %2254, align 8
  %2291 = getelementptr inbounds i8, i8* %2288, i64 %2289
  store i8 %2287, i8* %2291, align 1
  %2292 = and i64 %2285, 71776119061217280
  %2293 = icmp eq i64 %2292, 71776119061217280
  br i1 %2293, label %2294, label %2299

2294:                                             ; preds = %2284
  %2295 = load i8*, i8** %2273, align 8
  %2296 = load i64, i64* %2254, align 8
  %2297 = add i64 %2296, 1
  store i64 %2297, i64* %2254, align 8
  %2298 = getelementptr inbounds i8, i8* %2295, i64 %2296
  store i8 0, i8* %2298, align 1
  br label %2299

2299:                                             ; preds = %2294, %2284
  %2300 = load i64, i64* %2249, align 8
  %2301 = lshr i64 %2300, 40
  %2302 = trunc i64 %2301 to i8
  %2303 = load i8*, i8** %2273, align 8
  %2304 = load i64, i64* %2254, align 8
  %2305 = add i64 %2304, 1
  store i64 %2305, i64* %2254, align 8
  %2306 = getelementptr inbounds i8, i8* %2303, i64 %2304
  store i8 %2302, i8* %2306, align 1
  %2307 = and i64 %2300, 280375465082880
  %2308 = icmp eq i64 %2307, 280375465082880
  br i1 %2308, label %2309, label %2314

2309:                                             ; preds = %2299
  %2310 = load i8*, i8** %2273, align 8
  %2311 = load i64, i64* %2254, align 8
  %2312 = add i64 %2311, 1
  store i64 %2312, i64* %2254, align 8
  %2313 = getelementptr inbounds i8, i8* %2310, i64 %2311
  store i8 0, i8* %2313, align 1
  br label %2314

2314:                                             ; preds = %2309, %2299
  %2315 = load i64, i64* %2249, align 8
  %2316 = lshr i64 %2315, 32
  %2317 = trunc i64 %2316 to i8
  %2318 = load i8*, i8** %2273, align 8
  %2319 = load i64, i64* %2254, align 8
  %2320 = add i64 %2319, 1
  store i64 %2320, i64* %2254, align 8
  %2321 = getelementptr inbounds i8, i8* %2318, i64 %2319
  store i8 %2317, i8* %2321, align 1
  %2322 = and i64 %2315, 1095216660480
  %2323 = icmp eq i64 %2322, 1095216660480
  br i1 %2323, label %2324, label %2329

2324:                                             ; preds = %2314
  %2325 = load i8*, i8** %2273, align 8
  %2326 = load i64, i64* %2254, align 8
  %2327 = add i64 %2326, 1
  store i64 %2327, i64* %2254, align 8
  %2328 = getelementptr inbounds i8, i8* %2325, i64 %2326
  store i8 0, i8* %2328, align 1
  br label %2329

2329:                                             ; preds = %2324, %2314
  %2330 = load i64, i64* %2249, align 8
  %2331 = lshr i64 %2330, 24
  %2332 = trunc i64 %2331 to i8
  %2333 = load i8*, i8** %2273, align 8
  %2334 = load i64, i64* %2254, align 8
  %2335 = add i64 %2334, 1
  store i64 %2335, i64* %2254, align 8
  %2336 = getelementptr inbounds i8, i8* %2333, i64 %2334
  store i8 %2332, i8* %2336, align 1
  %2337 = and i64 %2330, 4278190080
  %2338 = icmp eq i64 %2337, 4278190080
  br i1 %2338, label %2339, label %2344

2339:                                             ; preds = %2329
  %2340 = load i8*, i8** %2273, align 8
  %2341 = load i64, i64* %2254, align 8
  %2342 = add i64 %2341, 1
  store i64 %2342, i64* %2254, align 8
  %2343 = getelementptr inbounds i8, i8* %2340, i64 %2341
  store i8 0, i8* %2343, align 1
  br label %2344

2344:                                             ; preds = %2339, %2329
  %2345 = load i64, i64* %2249, align 8
  %2346 = lshr i64 %2345, 16
  %2347 = trunc i64 %2346 to i8
  %2348 = load i8*, i8** %2273, align 8
  %2349 = load i64, i64* %2254, align 8
  %2350 = add i64 %2349, 1
  store i64 %2350, i64* %2254, align 8
  %2351 = getelementptr inbounds i8, i8* %2348, i64 %2349
  store i8 %2347, i8* %2351, align 1
  %2352 = and i64 %2345, 16711680
  %2353 = icmp eq i64 %2352, 16711680
  br i1 %2353, label %2354, label %2398

2354:                                             ; preds = %2344
  %2355 = load i8*, i8** %2273, align 8
  %2356 = load i64, i64* %2254, align 8
  %2357 = add i64 %2356, 1
  store i64 %2357, i64* %2254, align 8
  %2358 = getelementptr inbounds i8, i8* %2355, i64 %2356
  store i8 0, i8* %2358, align 1
  br label %2398

2359:                                             ; preds = %2261
  %2360 = getelementptr inbounds i8, i8* %2274, i64 %2263
  store i8 %2272, i8* %2360, align 1
  %2361 = load i64, i64* %2249, align 8
  %2362 = lshr i64 %2361, 48
  %2363 = trunc i64 %2362 to i8
  %2364 = load i8*, i8** %2273, align 8
  %2365 = load i64, i64* %2254, align 8
  %2366 = add i64 %2365, 1
  %2367 = getelementptr inbounds i8, i8* %2364, i64 %2366
  store i8 %2363, i8* %2367, align 1
  %2368 = load i64, i64* %2249, align 8
  %2369 = lshr i64 %2368, 40
  %2370 = trunc i64 %2369 to i8
  %2371 = load i8*, i8** %2273, align 8
  %2372 = load i64, i64* %2254, align 8
  %2373 = add i64 %2372, 2
  %2374 = getelementptr inbounds i8, i8* %2371, i64 %2373
  store i8 %2370, i8* %2374, align 1
  %2375 = load i64, i64* %2249, align 8
  %2376 = lshr i64 %2375, 32
  %2377 = trunc i64 %2376 to i8
  %2378 = load i8*, i8** %2273, align 8
  %2379 = load i64, i64* %2254, align 8
  %2380 = add i64 %2379, 3
  %2381 = getelementptr inbounds i8, i8* %2378, i64 %2380
  store i8 %2377, i8* %2381, align 1
  %2382 = load i64, i64* %2249, align 8
  %2383 = lshr i64 %2382, 24
  %2384 = trunc i64 %2383 to i8
  %2385 = load i8*, i8** %2273, align 8
  %2386 = load i64, i64* %2254, align 8
  %2387 = add i64 %2386, 4
  %2388 = getelementptr inbounds i8, i8* %2385, i64 %2387
  store i8 %2384, i8* %2388, align 1
  %2389 = load i64, i64* %2249, align 8
  %2390 = lshr i64 %2389, 16
  %2391 = trunc i64 %2390 to i8
  %2392 = load i8*, i8** %2273, align 8
  %2393 = load i64, i64* %2254, align 8
  %2394 = add i64 %2393, 5
  %2395 = getelementptr inbounds i8, i8* %2392, i64 %2394
  store i8 %2391, i8* %2395, align 1
  %2396 = load i64, i64* %2254, align 8
  %2397 = add i64 %2396, 6
  store i64 %2397, i64* %2254, align 8
  br label %2398

2398:                                             ; preds = %2359, %2354, %2344
  %2399 = load i64, i64* %2249, align 8
  %2400 = shl i64 %2399, 48
  store i64 %2400, i64* %2249, align 8
  %2401 = load i32, i32* %2244, align 8
  %2402 = add nsw i32 %2401, 48
  store i32 %2402, i32* %2244, align 8
  br label %2403

2403:                                             ; preds = %2398, %2240, %2238
  %2404 = icmp eq i32 %2230, 0
  br i1 %2404, label %2570, label %2405

2405:                                             ; preds = %2403
  %2406 = load i32, i32* %2204, align 8
  %2407 = shl nsw i32 -1, %2230
  %2408 = xor i32 %2407, -1
  %2409 = and i32 %2406, %2408
  %2410 = sext i32 %2409 to i64
  %2411 = getelementptr inbounds %"struct.jxl::jpeg::JpegBitWriter", %"struct.jxl::jpeg::JpegBitWriter"* %6, i64 0, i32 7
  %2412 = load i32, i32* %2411, align 8
  %2413 = sub nsw i32 %2412, %2230
  store i32 %2413, i32* %2411, align 8
  %2414 = zext i32 %2413 to i64
  %2415 = shl i64 %2410, %2414
  %2416 = getelementptr inbounds %"struct.jxl::jpeg::JpegBitWriter", %"struct.jxl::jpeg::JpegBitWriter"* %6, i64 0, i32 6
  %2417 = load i64, i64* %2416, align 8
  %2418 = or i64 %2415, %2417
  store i64 %2418, i64* %2416, align 8
  %2419 = icmp slt i32 %2413, 17
  br i1 %2419, label %2420, label %2570

2420:                                             ; preds = %2405
  %2421 = getelementptr inbounds %"struct.jxl::jpeg::JpegBitWriter", %"struct.jxl::jpeg::JpegBitWriter"* %6, i64 0, i32 5
  %2422 = load i64, i64* %2421, align 8
  %2423 = add i64 %2422, 12
  %2424 = icmp ugt i64 %2423, 16384
  br i1 %2424, label %2425, label %2428, !prof !23

2425:                                             ; preds = %2420
  tail call fastcc void @_ZN3jxl4jpeg12_GLOBAL__N_110SwapBufferEPNS0_13JpegBitWriterE(%"struct.jxl::jpeg::JpegBitWriter"* %6) #10
  %2426 = load i64, i64* %2421, align 8
  %2427 = load i64, i64* %2416, align 8
  br label %2428

2428:                                             ; preds = %2425, %2420
  %2429 = phi i64 [ %2418, %2420 ], [ %2427, %2425 ]
  %2430 = phi i64 [ %2422, %2420 ], [ %2426, %2425 ]
  %2431 = or i64 %2429, 65535
  %2432 = xor i64 %2431, -65536
  %2433 = add i64 %2432, -72340172838076673
  %2434 = and i64 %2432, -9187201950435770368
  %2435 = xor i64 %2434, -9187201950435770368
  %2436 = and i64 %2435, %2433
  %2437 = icmp eq i64 %2436, 0
  %2438 = lshr i64 %2429, 56
  %2439 = trunc i64 %2438 to i8
  %2440 = getelementptr inbounds %"struct.jxl::jpeg::JpegBitWriter", %"struct.jxl::jpeg::JpegBitWriter"* %6, i64 0, i32 4
  %2441 = load i8*, i8** %2440, align 8
  br i1 %2437, label %2526, label %2442

2442:                                             ; preds = %2428
  %2443 = add i64 %2430, 1
  store i64 %2443, i64* %2421, align 8
  %2444 = getelementptr inbounds i8, i8* %2441, i64 %2430
  store i8 %2439, i8* %2444, align 1
  %2445 = icmp eq i64 %2438, 255
  br i1 %2445, label %2446, label %2451

2446:                                             ; preds = %2442
  %2447 = load i8*, i8** %2440, align 8
  %2448 = load i64, i64* %2421, align 8
  %2449 = add i64 %2448, 1
  store i64 %2449, i64* %2421, align 8
  %2450 = getelementptr inbounds i8, i8* %2447, i64 %2448
  store i8 0, i8* %2450, align 1
  br label %2451

2451:                                             ; preds = %2446, %2442
  %2452 = load i64, i64* %2416, align 8
  %2453 = lshr i64 %2452, 48
  %2454 = trunc i64 %2453 to i8
  %2455 = load i8*, i8** %2440, align 8
  %2456 = load i64, i64* %2421, align 8
  %2457 = add i64 %2456, 1
  store i64 %2457, i64* %2421, align 8
  %2458 = getelementptr inbounds i8, i8* %2455, i64 %2456
  store i8 %2454, i8* %2458, align 1
  %2459 = and i64 %2452, 71776119061217280
  %2460 = icmp eq i64 %2459, 71776119061217280
  br i1 %2460, label %2461, label %2466

2461:                                             ; preds = %2451
  %2462 = load i8*, i8** %2440, align 8
  %2463 = load i64, i64* %2421, align 8
  %2464 = add i64 %2463, 1
  store i64 %2464, i64* %2421, align 8
  %2465 = getelementptr inbounds i8, i8* %2462, i64 %2463
  store i8 0, i8* %2465, align 1
  br label %2466

2466:                                             ; preds = %2461, %2451
  %2467 = load i64, i64* %2416, align 8
  %2468 = lshr i64 %2467, 40
  %2469 = trunc i64 %2468 to i8
  %2470 = load i8*, i8** %2440, align 8
  %2471 = load i64, i64* %2421, align 8
  %2472 = add i64 %2471, 1
  store i64 %2472, i64* %2421, align 8
  %2473 = getelementptr inbounds i8, i8* %2470, i64 %2471
  store i8 %2469, i8* %2473, align 1
  %2474 = and i64 %2467, 280375465082880
  %2475 = icmp eq i64 %2474, 280375465082880
  br i1 %2475, label %2476, label %2481

2476:                                             ; preds = %2466
  %2477 = load i8*, i8** %2440, align 8
  %2478 = load i64, i64* %2421, align 8
  %2479 = add i64 %2478, 1
  store i64 %2479, i64* %2421, align 8
  %2480 = getelementptr inbounds i8, i8* %2477, i64 %2478
  store i8 0, i8* %2480, align 1
  br label %2481

2481:                                             ; preds = %2476, %2466
  %2482 = load i64, i64* %2416, align 8
  %2483 = lshr i64 %2482, 32
  %2484 = trunc i64 %2483 to i8
  %2485 = load i8*, i8** %2440, align 8
  %2486 = load i64, i64* %2421, align 8
  %2487 = add i64 %2486, 1
  store i64 %2487, i64* %2421, align 8
  %2488 = getelementptr inbounds i8, i8* %2485, i64 %2486
  store i8 %2484, i8* %2488, align 1
  %2489 = and i64 %2482, 1095216660480
  %2490 = icmp eq i64 %2489, 1095216660480
  br i1 %2490, label %2491, label %2496

2491:                                             ; preds = %2481
  %2492 = load i8*, i8** %2440, align 8
  %2493 = load i64, i64* %2421, align 8
  %2494 = add i64 %2493, 1
  store i64 %2494, i64* %2421, align 8
  %2495 = getelementptr inbounds i8, i8* %2492, i64 %2493
  store i8 0, i8* %2495, align 1
  br label %2496

2496:                                             ; preds = %2491, %2481
  %2497 = load i64, i64* %2416, align 8
  %2498 = lshr i64 %2497, 24
  %2499 = trunc i64 %2498 to i8
  %2500 = load i8*, i8** %2440, align 8
  %2501 = load i64, i64* %2421, align 8
  %2502 = add i64 %2501, 1
  store i64 %2502, i64* %2421, align 8
  %2503 = getelementptr inbounds i8, i8* %2500, i64 %2501
  store i8 %2499, i8* %2503, align 1
  %2504 = and i64 %2497, 4278190080
  %2505 = icmp eq i64 %2504, 4278190080
  br i1 %2505, label %2506, label %2511

2506:                                             ; preds = %2496
  %2507 = load i8*, i8** %2440, align 8
  %2508 = load i64, i64* %2421, align 8
  %2509 = add i64 %2508, 1
  store i64 %2509, i64* %2421, align 8
  %2510 = getelementptr inbounds i8, i8* %2507, i64 %2508
  store i8 0, i8* %2510, align 1
  br label %2511

2511:                                             ; preds = %2506, %2496
  %2512 = load i64, i64* %2416, align 8
  %2513 = lshr i64 %2512, 16
  %2514 = trunc i64 %2513 to i8
  %2515 = load i8*, i8** %2440, align 8
  %2516 = load i64, i64* %2421, align 8
  %2517 = add i64 %2516, 1
  store i64 %2517, i64* %2421, align 8
  %2518 = getelementptr inbounds i8, i8* %2515, i64 %2516
  store i8 %2514, i8* %2518, align 1
  %2519 = and i64 %2512, 16711680
  %2520 = icmp eq i64 %2519, 16711680
  br i1 %2520, label %2521, label %2565

2521:                                             ; preds = %2511
  %2522 = load i8*, i8** %2440, align 8
  %2523 = load i64, i64* %2421, align 8
  %2524 = add i64 %2523, 1
  store i64 %2524, i64* %2421, align 8
  %2525 = getelementptr inbounds i8, i8* %2522, i64 %2523
  store i8 0, i8* %2525, align 1
  br label %2565

2526:                                             ; preds = %2428
  %2527 = getelementptr inbounds i8, i8* %2441, i64 %2430
  store i8 %2439, i8* %2527, align 1
  %2528 = load i64, i64* %2416, align 8
  %2529 = lshr i64 %2528, 48
  %2530 = trunc i64 %2529 to i8
  %2531 = load i8*, i8** %2440, align 8
  %2532 = load i64, i64* %2421, align 8
  %2533 = add i64 %2532, 1
  %2534 = getelementptr inbounds i8, i8* %2531, i64 %2533
  store i8 %2530, i8* %2534, align 1
  %2535 = load i64, i64* %2416, align 8
  %2536 = lshr i64 %2535, 40
  %2537 = trunc i64 %2536 to i8
  %2538 = load i8*, i8** %2440, align 8
  %2539 = load i64, i64* %2421, align 8
  %2540 = add i64 %2539, 2
  %2541 = getelementptr inbounds i8, i8* %2538, i64 %2540
  store i8 %2537, i8* %2541, align 1
  %2542 = load i64, i64* %2416, align 8
  %2543 = lshr i64 %2542, 32
  %2544 = trunc i64 %2543 to i8
  %2545 = load i8*, i8** %2440, align 8
  %2546 = load i64, i64* %2421, align 8
  %2547 = add i64 %2546, 3
  %2548 = getelementptr inbounds i8, i8* %2545, i64 %2547
  store i8 %2544, i8* %2548, align 1
  %2549 = load i64, i64* %2416, align 8
  %2550 = lshr i64 %2549, 24
  %2551 = trunc i64 %2550 to i8
  %2552 = load i8*, i8** %2440, align 8
  %2553 = load i64, i64* %2421, align 8
  %2554 = add i64 %2553, 4
  %2555 = getelementptr inbounds i8, i8* %2552, i64 %2554
  store i8 %2551, i8* %2555, align 1
  %2556 = load i64, i64* %2416, align 8
  %2557 = lshr i64 %2556, 16
  %2558 = trunc i64 %2557 to i8
  %2559 = load i8*, i8** %2440, align 8
  %2560 = load i64, i64* %2421, align 8
  %2561 = add i64 %2560, 5
  %2562 = getelementptr inbounds i8, i8* %2559, i64 %2561
  store i8 %2558, i8* %2562, align 1
  %2563 = load i64, i64* %2421, align 8
  %2564 = add i64 %2563, 6
  store i64 %2564, i64* %2421, align 8
  br label %2565

2565:                                             ; preds = %2526, %2521, %2511
  %2566 = load i64, i64* %2416, align 8
  %2567 = shl i64 %2566, 48
  store i64 %2567, i64* %2416, align 8
  %2568 = load i32, i32* %2411, align 8
  %2569 = add nsw i32 %2568, 48
  store i32 %2569, i32* %2411, align 8
  br label %2570

2570:                                             ; preds = %2565, %2405, %2403
  store i32 0, i32* %2204, align 8
  %2571 = bitcast i32** %2212 to i64*
  %2572 = load i64, i64* %2571, align 8
  %2573 = bitcast %"class.std::__1::vector.86"* %2211 to i64*
  %2574 = load i64, i64* %2573, align 8
  br label %2575

2575:                                             ; preds = %2570, %2226
  %2576 = phi i64* [ %2573, %2570 ], [ %2221, %2226 ]
  %2577 = phi i64* [ %2571, %2570 ], [ %2219, %2226 ]
  %2578 = phi i64 [ %2574, %2570 ], [ %2222, %2226 ]
  %2579 = phi i64 [ %2572, %2570 ], [ %2220, %2226 ]
  %2580 = icmp eq i64 %2579, %2578
  br i1 %2580, label %2759, label %2581

2581:                                             ; preds = %2575
  %2582 = getelementptr inbounds %"struct.jxl::jpeg::JpegBitWriter", %"struct.jxl::jpeg::JpegBitWriter"* %6, i64 0, i32 7
  %2583 = getelementptr inbounds %"struct.jxl::jpeg::JpegBitWriter", %"struct.jxl::jpeg::JpegBitWriter"* %6, i64 0, i32 6
  %2584 = getelementptr inbounds %"struct.jxl::jpeg::JpegBitWriter", %"struct.jxl::jpeg::JpegBitWriter"* %6, i64 0, i32 5
  %2585 = getelementptr inbounds %"struct.jxl::jpeg::JpegBitWriter", %"struct.jxl::jpeg::JpegBitWriter"* %6, i64 0, i32 4
  %2586 = load i32, i32* %2582, align 8
  %2587 = load i64, i64* %2583, align 8
  br label %2588

2588:                                             ; preds = %2750, %2581
  %2589 = phi i64 [ %2587, %2581 ], [ %2751, %2750 ]
  %2590 = phi i32 [ %2586, %2581 ], [ %2752, %2750 ]
  %2591 = phi i64 [ %2578, %2581 ], [ %2755, %2750 ]
  %2592 = phi i64 [ 0, %2581 ], [ %2753, %2750 ]
  %2593 = inttoptr i64 %2591 to i32*
  %2594 = getelementptr inbounds i32, i32* %2593, i64 %2592
  %2595 = load i32, i32* %2594, align 4
  %2596 = sext i32 %2595 to i64
  %2597 = add nsw i32 %2590, -1
  store i32 %2597, i32* %2582, align 8
  %2598 = zext i32 %2597 to i64
  %2599 = shl i64 %2596, %2598
  %2600 = or i64 %2599, %2589
  store i64 %2600, i64* %2583, align 8
  %2601 = icmp slt i32 %2590, 18
  br i1 %2601, label %2602, label %2750

2602:                                             ; preds = %2588
  %2603 = load i64, i64* %2584, align 8
  %2604 = add i64 %2603, 12
  %2605 = icmp ugt i64 %2604, 16384
  br i1 %2605, label %2606, label %2609, !prof !23

2606:                                             ; preds = %2602
  tail call fastcc void @_ZN3jxl4jpeg12_GLOBAL__N_110SwapBufferEPNS0_13JpegBitWriterE(%"struct.jxl::jpeg::JpegBitWriter"* %6) #10
  %2607 = load i64, i64* %2584, align 8
  %2608 = load i64, i64* %2583, align 8
  br label %2609

2609:                                             ; preds = %2606, %2602
  %2610 = phi i64 [ %2600, %2602 ], [ %2608, %2606 ]
  %2611 = phi i64 [ %2603, %2602 ], [ %2607, %2606 ]
  %2612 = or i64 %2610, 65535
  %2613 = xor i64 %2612, -65536
  %2614 = add i64 %2613, -72340172838076673
  %2615 = and i64 %2613, -9187201950435770368
  %2616 = xor i64 %2615, -9187201950435770368
  %2617 = and i64 %2616, %2614
  %2618 = icmp eq i64 %2617, 0
  %2619 = lshr i64 %2610, 56
  %2620 = trunc i64 %2619 to i8
  %2621 = load i8*, i8** %2585, align 8
  br i1 %2618, label %2706, label %2622

2622:                                             ; preds = %2609
  %2623 = add i64 %2611, 1
  store i64 %2623, i64* %2584, align 8
  %2624 = getelementptr inbounds i8, i8* %2621, i64 %2611
  store i8 %2620, i8* %2624, align 1
  %2625 = icmp eq i64 %2619, 255
  br i1 %2625, label %2626, label %2631

2626:                                             ; preds = %2622
  %2627 = load i8*, i8** %2585, align 8
  %2628 = load i64, i64* %2584, align 8
  %2629 = add i64 %2628, 1
  store i64 %2629, i64* %2584, align 8
  %2630 = getelementptr inbounds i8, i8* %2627, i64 %2628
  store i8 0, i8* %2630, align 1
  br label %2631

2631:                                             ; preds = %2626, %2622
  %2632 = load i64, i64* %2583, align 8
  %2633 = lshr i64 %2632, 48
  %2634 = trunc i64 %2633 to i8
  %2635 = load i8*, i8** %2585, align 8
  %2636 = load i64, i64* %2584, align 8
  %2637 = add i64 %2636, 1
  store i64 %2637, i64* %2584, align 8
  %2638 = getelementptr inbounds i8, i8* %2635, i64 %2636
  store i8 %2634, i8* %2638, align 1
  %2639 = and i64 %2632, 71776119061217280
  %2640 = icmp eq i64 %2639, 71776119061217280
  br i1 %2640, label %2641, label %2646

2641:                                             ; preds = %2631
  %2642 = load i8*, i8** %2585, align 8
  %2643 = load i64, i64* %2584, align 8
  %2644 = add i64 %2643, 1
  store i64 %2644, i64* %2584, align 8
  %2645 = getelementptr inbounds i8, i8* %2642, i64 %2643
  store i8 0, i8* %2645, align 1
  br label %2646

2646:                                             ; preds = %2641, %2631
  %2647 = load i64, i64* %2583, align 8
  %2648 = lshr i64 %2647, 40
  %2649 = trunc i64 %2648 to i8
  %2650 = load i8*, i8** %2585, align 8
  %2651 = load i64, i64* %2584, align 8
  %2652 = add i64 %2651, 1
  store i64 %2652, i64* %2584, align 8
  %2653 = getelementptr inbounds i8, i8* %2650, i64 %2651
  store i8 %2649, i8* %2653, align 1
  %2654 = and i64 %2647, 280375465082880
  %2655 = icmp eq i64 %2654, 280375465082880
  br i1 %2655, label %2656, label %2661

2656:                                             ; preds = %2646
  %2657 = load i8*, i8** %2585, align 8
  %2658 = load i64, i64* %2584, align 8
  %2659 = add i64 %2658, 1
  store i64 %2659, i64* %2584, align 8
  %2660 = getelementptr inbounds i8, i8* %2657, i64 %2658
  store i8 0, i8* %2660, align 1
  br label %2661

2661:                                             ; preds = %2656, %2646
  %2662 = load i64, i64* %2583, align 8
  %2663 = lshr i64 %2662, 32
  %2664 = trunc i64 %2663 to i8
  %2665 = load i8*, i8** %2585, align 8
  %2666 = load i64, i64* %2584, align 8
  %2667 = add i64 %2666, 1
  store i64 %2667, i64* %2584, align 8
  %2668 = getelementptr inbounds i8, i8* %2665, i64 %2666
  store i8 %2664, i8* %2668, align 1
  %2669 = and i64 %2662, 1095216660480
  %2670 = icmp eq i64 %2669, 1095216660480
  br i1 %2670, label %2671, label %2676

2671:                                             ; preds = %2661
  %2672 = load i8*, i8** %2585, align 8
  %2673 = load i64, i64* %2584, align 8
  %2674 = add i64 %2673, 1
  store i64 %2674, i64* %2584, align 8
  %2675 = getelementptr inbounds i8, i8* %2672, i64 %2673
  store i8 0, i8* %2675, align 1
  br label %2676

2676:                                             ; preds = %2671, %2661
  %2677 = load i64, i64* %2583, align 8
  %2678 = lshr i64 %2677, 24
  %2679 = trunc i64 %2678 to i8
  %2680 = load i8*, i8** %2585, align 8
  %2681 = load i64, i64* %2584, align 8
  %2682 = add i64 %2681, 1
  store i64 %2682, i64* %2584, align 8
  %2683 = getelementptr inbounds i8, i8* %2680, i64 %2681
  store i8 %2679, i8* %2683, align 1
  %2684 = and i64 %2677, 4278190080
  %2685 = icmp eq i64 %2684, 4278190080
  br i1 %2685, label %2686, label %2691

2686:                                             ; preds = %2676
  %2687 = load i8*, i8** %2585, align 8
  %2688 = load i64, i64* %2584, align 8
  %2689 = add i64 %2688, 1
  store i64 %2689, i64* %2584, align 8
  %2690 = getelementptr inbounds i8, i8* %2687, i64 %2688
  store i8 0, i8* %2690, align 1
  br label %2691

2691:                                             ; preds = %2686, %2676
  %2692 = load i64, i64* %2583, align 8
  %2693 = lshr i64 %2692, 16
  %2694 = trunc i64 %2693 to i8
  %2695 = load i8*, i8** %2585, align 8
  %2696 = load i64, i64* %2584, align 8
  %2697 = add i64 %2696, 1
  store i64 %2697, i64* %2584, align 8
  %2698 = getelementptr inbounds i8, i8* %2695, i64 %2696
  store i8 %2694, i8* %2698, align 1
  %2699 = and i64 %2692, 16711680
  %2700 = icmp eq i64 %2699, 16711680
  br i1 %2700, label %2701, label %2745

2701:                                             ; preds = %2691
  %2702 = load i8*, i8** %2585, align 8
  %2703 = load i64, i64* %2584, align 8
  %2704 = add i64 %2703, 1
  store i64 %2704, i64* %2584, align 8
  %2705 = getelementptr inbounds i8, i8* %2702, i64 %2703
  store i8 0, i8* %2705, align 1
  br label %2745

2706:                                             ; preds = %2609
  %2707 = getelementptr inbounds i8, i8* %2621, i64 %2611
  store i8 %2620, i8* %2707, align 1
  %2708 = load i64, i64* %2583, align 8
  %2709 = lshr i64 %2708, 48
  %2710 = trunc i64 %2709 to i8
  %2711 = load i8*, i8** %2585, align 8
  %2712 = load i64, i64* %2584, align 8
  %2713 = add i64 %2712, 1
  %2714 = getelementptr inbounds i8, i8* %2711, i64 %2713
  store i8 %2710, i8* %2714, align 1
  %2715 = load i64, i64* %2583, align 8
  %2716 = lshr i64 %2715, 40
  %2717 = trunc i64 %2716 to i8
  %2718 = load i8*, i8** %2585, align 8
  %2719 = load i64, i64* %2584, align 8
  %2720 = add i64 %2719, 2
  %2721 = getelementptr inbounds i8, i8* %2718, i64 %2720
  store i8 %2717, i8* %2721, align 1
  %2722 = load i64, i64* %2583, align 8
  %2723 = lshr i64 %2722, 32
  %2724 = trunc i64 %2723 to i8
  %2725 = load i8*, i8** %2585, align 8
  %2726 = load i64, i64* %2584, align 8
  %2727 = add i64 %2726, 3
  %2728 = getelementptr inbounds i8, i8* %2725, i64 %2727
  store i8 %2724, i8* %2728, align 1
  %2729 = load i64, i64* %2583, align 8
  %2730 = lshr i64 %2729, 24
  %2731 = trunc i64 %2730 to i8
  %2732 = load i8*, i8** %2585, align 8
  %2733 = load i64, i64* %2584, align 8
  %2734 = add i64 %2733, 4
  %2735 = getelementptr inbounds i8, i8* %2732, i64 %2734
  store i8 %2731, i8* %2735, align 1
  %2736 = load i64, i64* %2583, align 8
  %2737 = lshr i64 %2736, 16
  %2738 = trunc i64 %2737 to i8
  %2739 = load i8*, i8** %2585, align 8
  %2740 = load i64, i64* %2584, align 8
  %2741 = add i64 %2740, 5
  %2742 = getelementptr inbounds i8, i8* %2739, i64 %2741
  store i8 %2738, i8* %2742, align 1
  %2743 = load i64, i64* %2584, align 8
  %2744 = add i64 %2743, 6
  store i64 %2744, i64* %2584, align 8
  br label %2745

2745:                                             ; preds = %2706, %2701, %2691
  %2746 = load i64, i64* %2583, align 8
  %2747 = shl i64 %2746, 48
  store i64 %2747, i64* %2583, align 8
  %2748 = load i32, i32* %2582, align 8
  %2749 = add nsw i32 %2748, 48
  store i32 %2749, i32* %2582, align 8
  br label %2750

2750:                                             ; preds = %2745, %2588
  %2751 = phi i64 [ %2600, %2588 ], [ %2747, %2745 ]
  %2752 = phi i32 [ %2597, %2588 ], [ %2749, %2745 ]
  %2753 = add nuw i64 %2592, 1
  %2754 = load i64, i64* %2577, align 8
  %2755 = load i64, i64* %2576, align 8
  %2756 = sub i64 %2754, %2755
  %2757 = ashr exact i64 %2756, 2
  %2758 = icmp ult i64 %2753, %2757
  br i1 %2758, label %2588, label %2759

2759:                                             ; preds = %2750, %2575
  %2760 = phi i64 [ %2578, %2575 ], [ %2755, %2750 ]
  store i64 %2760, i64* %2577, align 8
  br label %2761

2761:                                             ; preds = %2218, %2759
  %2762 = phi i64 [ %2222, %2218 ], [ %2760, %2759 ]
  %2763 = phi i64 [ %2220, %2218 ], [ %2760, %2759 ]
  br i1 %10, label %3303, label %2764

2764:                                             ; preds = %2761
  %2765 = load i32, i32* %2204, align 8
  %2766 = icmp sgt i32 %2765, 0
  br i1 %2766, label %2770, label %2767

2767:                                             ; preds = %2764
  %2768 = bitcast i32** %2212 to i64*
  %2769 = bitcast %"class.std::__1::vector.86"* %2211 to i64*
  br label %3117

2770:                                             ; preds = %2764
  %2771 = tail call i32 @llvm.ctlz.i32(i32 %2765, i1 true) #10, !range !22
  %2772 = xor i32 %2771, 31
  %2773 = shl nuw nsw i32 %2772, 4
  %2774 = getelementptr inbounds %"struct.jxl::jpeg::DCTCodingState", %"struct.jxl::jpeg::DCTCodingState"* %5, i64 0, i32 1
  %2775 = load %"struct.jxl::jpeg::HuffmanCodeTable"*, %"struct.jxl::jpeg::HuffmanCodeTable"** %2774, align 8
  %2776 = zext i32 %2773 to i64
  %2777 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanCodeTable", %"struct.jxl::jpeg::HuffmanCodeTable"* %2775, i64 0, i32 0, i64 %2776
  %2778 = load i32, i32* %2777, align 4
  %2779 = icmp eq i32 %2778, 0
  br i1 %2779, label %2780, label %2782

2780:                                             ; preds = %2770
  %2781 = getelementptr inbounds %"struct.jxl::jpeg::JpegBitWriter", %"struct.jxl::jpeg::JpegBitWriter"* %6, i64 0, i32 0
  store i8 0, i8* %2781, align 8
  br label %2945

2782:                                             ; preds = %2770
  %2783 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanCodeTable", %"struct.jxl::jpeg::HuffmanCodeTable"* %2775, i64 0, i32 1, i64 %2776
  %2784 = load i32, i32* %2783, align 4
  %2785 = sext i32 %2784 to i64
  %2786 = getelementptr inbounds %"struct.jxl::jpeg::JpegBitWriter", %"struct.jxl::jpeg::JpegBitWriter"* %6, i64 0, i32 7
  %2787 = load i32, i32* %2786, align 8
  %2788 = sub nsw i32 %2787, %2778
  store i32 %2788, i32* %2786, align 8
  %2789 = zext i32 %2788 to i64
  %2790 = shl i64 %2785, %2789
  %2791 = getelementptr inbounds %"struct.jxl::jpeg::JpegBitWriter", %"struct.jxl::jpeg::JpegBitWriter"* %6, i64 0, i32 6
  %2792 = load i64, i64* %2791, align 8
  %2793 = or i64 %2790, %2792
  store i64 %2793, i64* %2791, align 8
  %2794 = icmp slt i32 %2788, 17
  br i1 %2794, label %2795, label %2945

2795:                                             ; preds = %2782
  %2796 = getelementptr inbounds %"struct.jxl::jpeg::JpegBitWriter", %"struct.jxl::jpeg::JpegBitWriter"* %6, i64 0, i32 5
  %2797 = load i64, i64* %2796, align 8
  %2798 = add i64 %2797, 12
  %2799 = icmp ugt i64 %2798, 16384
  br i1 %2799, label %2800, label %2803, !prof !23

2800:                                             ; preds = %2795
  tail call fastcc void @_ZN3jxl4jpeg12_GLOBAL__N_110SwapBufferEPNS0_13JpegBitWriterE(%"struct.jxl::jpeg::JpegBitWriter"* %6) #10
  %2801 = load i64, i64* %2796, align 8
  %2802 = load i64, i64* %2791, align 8
  br label %2803

2803:                                             ; preds = %2800, %2795
  %2804 = phi i64 [ %2793, %2795 ], [ %2802, %2800 ]
  %2805 = phi i64 [ %2797, %2795 ], [ %2801, %2800 ]
  %2806 = or i64 %2804, 65535
  %2807 = xor i64 %2806, -65536
  %2808 = add i64 %2807, -72340172838076673
  %2809 = and i64 %2807, -9187201950435770368
  %2810 = xor i64 %2809, -9187201950435770368
  %2811 = and i64 %2810, %2808
  %2812 = icmp eq i64 %2811, 0
  %2813 = lshr i64 %2804, 56
  %2814 = trunc i64 %2813 to i8
  %2815 = getelementptr inbounds %"struct.jxl::jpeg::JpegBitWriter", %"struct.jxl::jpeg::JpegBitWriter"* %6, i64 0, i32 4
  %2816 = load i8*, i8** %2815, align 8
  br i1 %2812, label %2901, label %2817

2817:                                             ; preds = %2803
  %2818 = add i64 %2805, 1
  store i64 %2818, i64* %2796, align 8
  %2819 = getelementptr inbounds i8, i8* %2816, i64 %2805
  store i8 %2814, i8* %2819, align 1
  %2820 = icmp eq i64 %2813, 255
  br i1 %2820, label %2821, label %2826

2821:                                             ; preds = %2817
  %2822 = load i8*, i8** %2815, align 8
  %2823 = load i64, i64* %2796, align 8
  %2824 = add i64 %2823, 1
  store i64 %2824, i64* %2796, align 8
  %2825 = getelementptr inbounds i8, i8* %2822, i64 %2823
  store i8 0, i8* %2825, align 1
  br label %2826

2826:                                             ; preds = %2821, %2817
  %2827 = load i64, i64* %2791, align 8
  %2828 = lshr i64 %2827, 48
  %2829 = trunc i64 %2828 to i8
  %2830 = load i8*, i8** %2815, align 8
  %2831 = load i64, i64* %2796, align 8
  %2832 = add i64 %2831, 1
  store i64 %2832, i64* %2796, align 8
  %2833 = getelementptr inbounds i8, i8* %2830, i64 %2831
  store i8 %2829, i8* %2833, align 1
  %2834 = and i64 %2827, 71776119061217280
  %2835 = icmp eq i64 %2834, 71776119061217280
  br i1 %2835, label %2836, label %2841

2836:                                             ; preds = %2826
  %2837 = load i8*, i8** %2815, align 8
  %2838 = load i64, i64* %2796, align 8
  %2839 = add i64 %2838, 1
  store i64 %2839, i64* %2796, align 8
  %2840 = getelementptr inbounds i8, i8* %2837, i64 %2838
  store i8 0, i8* %2840, align 1
  br label %2841

2841:                                             ; preds = %2836, %2826
  %2842 = load i64, i64* %2791, align 8
  %2843 = lshr i64 %2842, 40
  %2844 = trunc i64 %2843 to i8
  %2845 = load i8*, i8** %2815, align 8
  %2846 = load i64, i64* %2796, align 8
  %2847 = add i64 %2846, 1
  store i64 %2847, i64* %2796, align 8
  %2848 = getelementptr inbounds i8, i8* %2845, i64 %2846
  store i8 %2844, i8* %2848, align 1
  %2849 = and i64 %2842, 280375465082880
  %2850 = icmp eq i64 %2849, 280375465082880
  br i1 %2850, label %2851, label %2856

2851:                                             ; preds = %2841
  %2852 = load i8*, i8** %2815, align 8
  %2853 = load i64, i64* %2796, align 8
  %2854 = add i64 %2853, 1
  store i64 %2854, i64* %2796, align 8
  %2855 = getelementptr inbounds i8, i8* %2852, i64 %2853
  store i8 0, i8* %2855, align 1
  br label %2856

2856:                                             ; preds = %2851, %2841
  %2857 = load i64, i64* %2791, align 8
  %2858 = lshr i64 %2857, 32
  %2859 = trunc i64 %2858 to i8
  %2860 = load i8*, i8** %2815, align 8
  %2861 = load i64, i64* %2796, align 8
  %2862 = add i64 %2861, 1
  store i64 %2862, i64* %2796, align 8
  %2863 = getelementptr inbounds i8, i8* %2860, i64 %2861
  store i8 %2859, i8* %2863, align 1
  %2864 = and i64 %2857, 1095216660480
  %2865 = icmp eq i64 %2864, 1095216660480
  br i1 %2865, label %2866, label %2871

2866:                                             ; preds = %2856
  %2867 = load i8*, i8** %2815, align 8
  %2868 = load i64, i64* %2796, align 8
  %2869 = add i64 %2868, 1
  store i64 %2869, i64* %2796, align 8
  %2870 = getelementptr inbounds i8, i8* %2867, i64 %2868
  store i8 0, i8* %2870, align 1
  br label %2871

2871:                                             ; preds = %2866, %2856
  %2872 = load i64, i64* %2791, align 8
  %2873 = lshr i64 %2872, 24
  %2874 = trunc i64 %2873 to i8
  %2875 = load i8*, i8** %2815, align 8
  %2876 = load i64, i64* %2796, align 8
  %2877 = add i64 %2876, 1
  store i64 %2877, i64* %2796, align 8
  %2878 = getelementptr inbounds i8, i8* %2875, i64 %2876
  store i8 %2874, i8* %2878, align 1
  %2879 = and i64 %2872, 4278190080
  %2880 = icmp eq i64 %2879, 4278190080
  br i1 %2880, label %2881, label %2886

2881:                                             ; preds = %2871
  %2882 = load i8*, i8** %2815, align 8
  %2883 = load i64, i64* %2796, align 8
  %2884 = add i64 %2883, 1
  store i64 %2884, i64* %2796, align 8
  %2885 = getelementptr inbounds i8, i8* %2882, i64 %2883
  store i8 0, i8* %2885, align 1
  br label %2886

2886:                                             ; preds = %2881, %2871
  %2887 = load i64, i64* %2791, align 8
  %2888 = lshr i64 %2887, 16
  %2889 = trunc i64 %2888 to i8
  %2890 = load i8*, i8** %2815, align 8
  %2891 = load i64, i64* %2796, align 8
  %2892 = add i64 %2891, 1
  store i64 %2892, i64* %2796, align 8
  %2893 = getelementptr inbounds i8, i8* %2890, i64 %2891
  store i8 %2889, i8* %2893, align 1
  %2894 = and i64 %2887, 16711680
  %2895 = icmp eq i64 %2894, 16711680
  br i1 %2895, label %2896, label %2940

2896:                                             ; preds = %2886
  %2897 = load i8*, i8** %2815, align 8
  %2898 = load i64, i64* %2796, align 8
  %2899 = add i64 %2898, 1
  store i64 %2899, i64* %2796, align 8
  %2900 = getelementptr inbounds i8, i8* %2897, i64 %2898
  store i8 0, i8* %2900, align 1
  br label %2940

2901:                                             ; preds = %2803
  %2902 = getelementptr inbounds i8, i8* %2816, i64 %2805
  store i8 %2814, i8* %2902, align 1
  %2903 = load i64, i64* %2791, align 8
  %2904 = lshr i64 %2903, 48
  %2905 = trunc i64 %2904 to i8
  %2906 = load i8*, i8** %2815, align 8
  %2907 = load i64, i64* %2796, align 8
  %2908 = add i64 %2907, 1
  %2909 = getelementptr inbounds i8, i8* %2906, i64 %2908
  store i8 %2905, i8* %2909, align 1
  %2910 = load i64, i64* %2791, align 8
  %2911 = lshr i64 %2910, 40
  %2912 = trunc i64 %2911 to i8
  %2913 = load i8*, i8** %2815, align 8
  %2914 = load i64, i64* %2796, align 8
  %2915 = add i64 %2914, 2
  %2916 = getelementptr inbounds i8, i8* %2913, i64 %2915
  store i8 %2912, i8* %2916, align 1
  %2917 = load i64, i64* %2791, align 8
  %2918 = lshr i64 %2917, 32
  %2919 = trunc i64 %2918 to i8
  %2920 = load i8*, i8** %2815, align 8
  %2921 = load i64, i64* %2796, align 8
  %2922 = add i64 %2921, 3
  %2923 = getelementptr inbounds i8, i8* %2920, i64 %2922
  store i8 %2919, i8* %2923, align 1
  %2924 = load i64, i64* %2791, align 8
  %2925 = lshr i64 %2924, 24
  %2926 = trunc i64 %2925 to i8
  %2927 = load i8*, i8** %2815, align 8
  %2928 = load i64, i64* %2796, align 8
  %2929 = add i64 %2928, 4
  %2930 = getelementptr inbounds i8, i8* %2927, i64 %2929
  store i8 %2926, i8* %2930, align 1
  %2931 = load i64, i64* %2791, align 8
  %2932 = lshr i64 %2931, 16
  %2933 = trunc i64 %2932 to i8
  %2934 = load i8*, i8** %2815, align 8
  %2935 = load i64, i64* %2796, align 8
  %2936 = add i64 %2935, 5
  %2937 = getelementptr inbounds i8, i8* %2934, i64 %2936
  store i8 %2933, i8* %2937, align 1
  %2938 = load i64, i64* %2796, align 8
  %2939 = add i64 %2938, 6
  store i64 %2939, i64* %2796, align 8
  br label %2940

2940:                                             ; preds = %2901, %2896, %2886
  %2941 = load i64, i64* %2791, align 8
  %2942 = shl i64 %2941, 48
  store i64 %2942, i64* %2791, align 8
  %2943 = load i32, i32* %2786, align 8
  %2944 = add nsw i32 %2943, 48
  store i32 %2944, i32* %2786, align 8
  br label %2945

2945:                                             ; preds = %2940, %2782, %2780
  %2946 = icmp eq i32 %2772, 0
  br i1 %2946, label %3112, label %2947

2947:                                             ; preds = %2945
  %2948 = load i32, i32* %2204, align 8
  %2949 = shl nsw i32 -1, %2772
  %2950 = xor i32 %2949, -1
  %2951 = and i32 %2948, %2950
  %2952 = sext i32 %2951 to i64
  %2953 = getelementptr inbounds %"struct.jxl::jpeg::JpegBitWriter", %"struct.jxl::jpeg::JpegBitWriter"* %6, i64 0, i32 7
  %2954 = load i32, i32* %2953, align 8
  %2955 = sub nsw i32 %2954, %2772
  store i32 %2955, i32* %2953, align 8
  %2956 = zext i32 %2955 to i64
  %2957 = shl i64 %2952, %2956
  %2958 = getelementptr inbounds %"struct.jxl::jpeg::JpegBitWriter", %"struct.jxl::jpeg::JpegBitWriter"* %6, i64 0, i32 6
  %2959 = load i64, i64* %2958, align 8
  %2960 = or i64 %2957, %2959
  store i64 %2960, i64* %2958, align 8
  %2961 = icmp slt i32 %2955, 17
  br i1 %2961, label %2962, label %3112

2962:                                             ; preds = %2947
  %2963 = getelementptr inbounds %"struct.jxl::jpeg::JpegBitWriter", %"struct.jxl::jpeg::JpegBitWriter"* %6, i64 0, i32 5
  %2964 = load i64, i64* %2963, align 8
  %2965 = add i64 %2964, 12
  %2966 = icmp ugt i64 %2965, 16384
  br i1 %2966, label %2967, label %2970, !prof !23

2967:                                             ; preds = %2962
  tail call fastcc void @_ZN3jxl4jpeg12_GLOBAL__N_110SwapBufferEPNS0_13JpegBitWriterE(%"struct.jxl::jpeg::JpegBitWriter"* %6) #10
  %2968 = load i64, i64* %2963, align 8
  %2969 = load i64, i64* %2958, align 8
  br label %2970

2970:                                             ; preds = %2967, %2962
  %2971 = phi i64 [ %2960, %2962 ], [ %2969, %2967 ]
  %2972 = phi i64 [ %2964, %2962 ], [ %2968, %2967 ]
  %2973 = or i64 %2971, 65535
  %2974 = xor i64 %2973, -65536
  %2975 = add i64 %2974, -72340172838076673
  %2976 = and i64 %2974, -9187201950435770368
  %2977 = xor i64 %2976, -9187201950435770368
  %2978 = and i64 %2977, %2975
  %2979 = icmp eq i64 %2978, 0
  %2980 = lshr i64 %2971, 56
  %2981 = trunc i64 %2980 to i8
  %2982 = getelementptr inbounds %"struct.jxl::jpeg::JpegBitWriter", %"struct.jxl::jpeg::JpegBitWriter"* %6, i64 0, i32 4
  %2983 = load i8*, i8** %2982, align 8
  br i1 %2979, label %3068, label %2984

2984:                                             ; preds = %2970
  %2985 = add i64 %2972, 1
  store i64 %2985, i64* %2963, align 8
  %2986 = getelementptr inbounds i8, i8* %2983, i64 %2972
  store i8 %2981, i8* %2986, align 1
  %2987 = icmp eq i64 %2980, 255
  br i1 %2987, label %2988, label %2993

2988:                                             ; preds = %2984
  %2989 = load i8*, i8** %2982, align 8
  %2990 = load i64, i64* %2963, align 8
  %2991 = add i64 %2990, 1
  store i64 %2991, i64* %2963, align 8
  %2992 = getelementptr inbounds i8, i8* %2989, i64 %2990
  store i8 0, i8* %2992, align 1
  br label %2993

2993:                                             ; preds = %2988, %2984
  %2994 = load i64, i64* %2958, align 8
  %2995 = lshr i64 %2994, 48
  %2996 = trunc i64 %2995 to i8
  %2997 = load i8*, i8** %2982, align 8
  %2998 = load i64, i64* %2963, align 8
  %2999 = add i64 %2998, 1
  store i64 %2999, i64* %2963, align 8
  %3000 = getelementptr inbounds i8, i8* %2997, i64 %2998
  store i8 %2996, i8* %3000, align 1
  %3001 = and i64 %2994, 71776119061217280
  %3002 = icmp eq i64 %3001, 71776119061217280
  br i1 %3002, label %3003, label %3008

3003:                                             ; preds = %2993
  %3004 = load i8*, i8** %2982, align 8
  %3005 = load i64, i64* %2963, align 8
  %3006 = add i64 %3005, 1
  store i64 %3006, i64* %2963, align 8
  %3007 = getelementptr inbounds i8, i8* %3004, i64 %3005
  store i8 0, i8* %3007, align 1
  br label %3008

3008:                                             ; preds = %3003, %2993
  %3009 = load i64, i64* %2958, align 8
  %3010 = lshr i64 %3009, 40
  %3011 = trunc i64 %3010 to i8
  %3012 = load i8*, i8** %2982, align 8
  %3013 = load i64, i64* %2963, align 8
  %3014 = add i64 %3013, 1
  store i64 %3014, i64* %2963, align 8
  %3015 = getelementptr inbounds i8, i8* %3012, i64 %3013
  store i8 %3011, i8* %3015, align 1
  %3016 = and i64 %3009, 280375465082880
  %3017 = icmp eq i64 %3016, 280375465082880
  br i1 %3017, label %3018, label %3023

3018:                                             ; preds = %3008
  %3019 = load i8*, i8** %2982, align 8
  %3020 = load i64, i64* %2963, align 8
  %3021 = add i64 %3020, 1
  store i64 %3021, i64* %2963, align 8
  %3022 = getelementptr inbounds i8, i8* %3019, i64 %3020
  store i8 0, i8* %3022, align 1
  br label %3023

3023:                                             ; preds = %3018, %3008
  %3024 = load i64, i64* %2958, align 8
  %3025 = lshr i64 %3024, 32
  %3026 = trunc i64 %3025 to i8
  %3027 = load i8*, i8** %2982, align 8
  %3028 = load i64, i64* %2963, align 8
  %3029 = add i64 %3028, 1
  store i64 %3029, i64* %2963, align 8
  %3030 = getelementptr inbounds i8, i8* %3027, i64 %3028
  store i8 %3026, i8* %3030, align 1
  %3031 = and i64 %3024, 1095216660480
  %3032 = icmp eq i64 %3031, 1095216660480
  br i1 %3032, label %3033, label %3038

3033:                                             ; preds = %3023
  %3034 = load i8*, i8** %2982, align 8
  %3035 = load i64, i64* %2963, align 8
  %3036 = add i64 %3035, 1
  store i64 %3036, i64* %2963, align 8
  %3037 = getelementptr inbounds i8, i8* %3034, i64 %3035
  store i8 0, i8* %3037, align 1
  br label %3038

3038:                                             ; preds = %3033, %3023
  %3039 = load i64, i64* %2958, align 8
  %3040 = lshr i64 %3039, 24
  %3041 = trunc i64 %3040 to i8
  %3042 = load i8*, i8** %2982, align 8
  %3043 = load i64, i64* %2963, align 8
  %3044 = add i64 %3043, 1
  store i64 %3044, i64* %2963, align 8
  %3045 = getelementptr inbounds i8, i8* %3042, i64 %3043
  store i8 %3041, i8* %3045, align 1
  %3046 = and i64 %3039, 4278190080
  %3047 = icmp eq i64 %3046, 4278190080
  br i1 %3047, label %3048, label %3053

3048:                                             ; preds = %3038
  %3049 = load i8*, i8** %2982, align 8
  %3050 = load i64, i64* %2963, align 8
  %3051 = add i64 %3050, 1
  store i64 %3051, i64* %2963, align 8
  %3052 = getelementptr inbounds i8, i8* %3049, i64 %3050
  store i8 0, i8* %3052, align 1
  br label %3053

3053:                                             ; preds = %3048, %3038
  %3054 = load i64, i64* %2958, align 8
  %3055 = lshr i64 %3054, 16
  %3056 = trunc i64 %3055 to i8
  %3057 = load i8*, i8** %2982, align 8
  %3058 = load i64, i64* %2963, align 8
  %3059 = add i64 %3058, 1
  store i64 %3059, i64* %2963, align 8
  %3060 = getelementptr inbounds i8, i8* %3057, i64 %3058
  store i8 %3056, i8* %3060, align 1
  %3061 = and i64 %3054, 16711680
  %3062 = icmp eq i64 %3061, 16711680
  br i1 %3062, label %3063, label %3107

3063:                                             ; preds = %3053
  %3064 = load i8*, i8** %2982, align 8
  %3065 = load i64, i64* %2963, align 8
  %3066 = add i64 %3065, 1
  store i64 %3066, i64* %2963, align 8
  %3067 = getelementptr inbounds i8, i8* %3064, i64 %3065
  store i8 0, i8* %3067, align 1
  br label %3107

3068:                                             ; preds = %2970
  %3069 = getelementptr inbounds i8, i8* %2983, i64 %2972
  store i8 %2981, i8* %3069, align 1
  %3070 = load i64, i64* %2958, align 8
  %3071 = lshr i64 %3070, 48
  %3072 = trunc i64 %3071 to i8
  %3073 = load i8*, i8** %2982, align 8
  %3074 = load i64, i64* %2963, align 8
  %3075 = add i64 %3074, 1
  %3076 = getelementptr inbounds i8, i8* %3073, i64 %3075
  store i8 %3072, i8* %3076, align 1
  %3077 = load i64, i64* %2958, align 8
  %3078 = lshr i64 %3077, 40
  %3079 = trunc i64 %3078 to i8
  %3080 = load i8*, i8** %2982, align 8
  %3081 = load i64, i64* %2963, align 8
  %3082 = add i64 %3081, 2
  %3083 = getelementptr inbounds i8, i8* %3080, i64 %3082
  store i8 %3079, i8* %3083, align 1
  %3084 = load i64, i64* %2958, align 8
  %3085 = lshr i64 %3084, 32
  %3086 = trunc i64 %3085 to i8
  %3087 = load i8*, i8** %2982, align 8
  %3088 = load i64, i64* %2963, align 8
  %3089 = add i64 %3088, 3
  %3090 = getelementptr inbounds i8, i8* %3087, i64 %3089
  store i8 %3086, i8* %3090, align 1
  %3091 = load i64, i64* %2958, align 8
  %3092 = lshr i64 %3091, 24
  %3093 = trunc i64 %3092 to i8
  %3094 = load i8*, i8** %2982, align 8
  %3095 = load i64, i64* %2963, align 8
  %3096 = add i64 %3095, 4
  %3097 = getelementptr inbounds i8, i8* %3094, i64 %3096
  store i8 %3093, i8* %3097, align 1
  %3098 = load i64, i64* %2958, align 8
  %3099 = lshr i64 %3098, 16
  %3100 = trunc i64 %3099 to i8
  %3101 = load i8*, i8** %2982, align 8
  %3102 = load i64, i64* %2963, align 8
  %3103 = add i64 %3102, 5
  %3104 = getelementptr inbounds i8, i8* %3101, i64 %3103
  store i8 %3100, i8* %3104, align 1
  %3105 = load i64, i64* %2963, align 8
  %3106 = add i64 %3105, 6
  store i64 %3106, i64* %2963, align 8
  br label %3107

3107:                                             ; preds = %3068, %3063, %3053
  %3108 = load i64, i64* %2958, align 8
  %3109 = shl i64 %3108, 48
  store i64 %3109, i64* %2958, align 8
  %3110 = load i32, i32* %2953, align 8
  %3111 = add nsw i32 %3110, 48
  store i32 %3111, i32* %2953, align 8
  br label %3112

3112:                                             ; preds = %3107, %2947, %2945
  store i32 0, i32* %2204, align 8
  %3113 = bitcast i32** %2212 to i64*
  %3114 = load i64, i64* %3113, align 8
  %3115 = bitcast %"class.std::__1::vector.86"* %2211 to i64*
  %3116 = load i64, i64* %3115, align 8
  br label %3117

3117:                                             ; preds = %2767, %3112
  %3118 = phi i64* [ %2769, %2767 ], [ %3115, %3112 ]
  %3119 = phi i64* [ %2768, %2767 ], [ %3113, %3112 ]
  %3120 = phi i64 [ %2762, %2767 ], [ %3116, %3112 ]
  %3121 = phi i64 [ %2763, %2767 ], [ %3114, %3112 ]
  %3122 = icmp eq i64 %3121, %3120
  br i1 %3122, label %3301, label %3123

3123:                                             ; preds = %3117
  %3124 = getelementptr inbounds %"struct.jxl::jpeg::JpegBitWriter", %"struct.jxl::jpeg::JpegBitWriter"* %6, i64 0, i32 7
  %3125 = getelementptr inbounds %"struct.jxl::jpeg::JpegBitWriter", %"struct.jxl::jpeg::JpegBitWriter"* %6, i64 0, i32 6
  %3126 = getelementptr inbounds %"struct.jxl::jpeg::JpegBitWriter", %"struct.jxl::jpeg::JpegBitWriter"* %6, i64 0, i32 5
  %3127 = getelementptr inbounds %"struct.jxl::jpeg::JpegBitWriter", %"struct.jxl::jpeg::JpegBitWriter"* %6, i64 0, i32 4
  %3128 = load i32, i32* %3124, align 8
  %3129 = load i64, i64* %3125, align 8
  br label %3130

3130:                                             ; preds = %3292, %3123
  %3131 = phi i64 [ %3129, %3123 ], [ %3293, %3292 ]
  %3132 = phi i32 [ %3128, %3123 ], [ %3294, %3292 ]
  %3133 = phi i64 [ %3120, %3123 ], [ %3297, %3292 ]
  %3134 = phi i64 [ 0, %3123 ], [ %3295, %3292 ]
  %3135 = inttoptr i64 %3133 to i32*
  %3136 = getelementptr inbounds i32, i32* %3135, i64 %3134
  %3137 = load i32, i32* %3136, align 4
  %3138 = sext i32 %3137 to i64
  %3139 = add nsw i32 %3132, -1
  store i32 %3139, i32* %3124, align 8
  %3140 = zext i32 %3139 to i64
  %3141 = shl i64 %3138, %3140
  %3142 = or i64 %3141, %3131
  store i64 %3142, i64* %3125, align 8
  %3143 = icmp slt i32 %3132, 18
  br i1 %3143, label %3144, label %3292

3144:                                             ; preds = %3130
  %3145 = load i64, i64* %3126, align 8
  %3146 = add i64 %3145, 12
  %3147 = icmp ugt i64 %3146, 16384
  br i1 %3147, label %3148, label %3151, !prof !23

3148:                                             ; preds = %3144
  tail call fastcc void @_ZN3jxl4jpeg12_GLOBAL__N_110SwapBufferEPNS0_13JpegBitWriterE(%"struct.jxl::jpeg::JpegBitWriter"* %6) #10
  %3149 = load i64, i64* %3126, align 8
  %3150 = load i64, i64* %3125, align 8
  br label %3151

3151:                                             ; preds = %3148, %3144
  %3152 = phi i64 [ %3142, %3144 ], [ %3150, %3148 ]
  %3153 = phi i64 [ %3145, %3144 ], [ %3149, %3148 ]
  %3154 = or i64 %3152, 65535
  %3155 = xor i64 %3154, -65536
  %3156 = add i64 %3155, -72340172838076673
  %3157 = and i64 %3155, -9187201950435770368
  %3158 = xor i64 %3157, -9187201950435770368
  %3159 = and i64 %3158, %3156
  %3160 = icmp eq i64 %3159, 0
  %3161 = lshr i64 %3152, 56
  %3162 = trunc i64 %3161 to i8
  %3163 = load i8*, i8** %3127, align 8
  br i1 %3160, label %3248, label %3164

3164:                                             ; preds = %3151
  %3165 = add i64 %3153, 1
  store i64 %3165, i64* %3126, align 8
  %3166 = getelementptr inbounds i8, i8* %3163, i64 %3153
  store i8 %3162, i8* %3166, align 1
  %3167 = icmp eq i64 %3161, 255
  br i1 %3167, label %3168, label %3173

3168:                                             ; preds = %3164
  %3169 = load i8*, i8** %3127, align 8
  %3170 = load i64, i64* %3126, align 8
  %3171 = add i64 %3170, 1
  store i64 %3171, i64* %3126, align 8
  %3172 = getelementptr inbounds i8, i8* %3169, i64 %3170
  store i8 0, i8* %3172, align 1
  br label %3173

3173:                                             ; preds = %3168, %3164
  %3174 = load i64, i64* %3125, align 8
  %3175 = lshr i64 %3174, 48
  %3176 = trunc i64 %3175 to i8
  %3177 = load i8*, i8** %3127, align 8
  %3178 = load i64, i64* %3126, align 8
  %3179 = add i64 %3178, 1
  store i64 %3179, i64* %3126, align 8
  %3180 = getelementptr inbounds i8, i8* %3177, i64 %3178
  store i8 %3176, i8* %3180, align 1
  %3181 = and i64 %3174, 71776119061217280
  %3182 = icmp eq i64 %3181, 71776119061217280
  br i1 %3182, label %3183, label %3188

3183:                                             ; preds = %3173
  %3184 = load i8*, i8** %3127, align 8
  %3185 = load i64, i64* %3126, align 8
  %3186 = add i64 %3185, 1
  store i64 %3186, i64* %3126, align 8
  %3187 = getelementptr inbounds i8, i8* %3184, i64 %3185
  store i8 0, i8* %3187, align 1
  br label %3188

3188:                                             ; preds = %3183, %3173
  %3189 = load i64, i64* %3125, align 8
  %3190 = lshr i64 %3189, 40
  %3191 = trunc i64 %3190 to i8
  %3192 = load i8*, i8** %3127, align 8
  %3193 = load i64, i64* %3126, align 8
  %3194 = add i64 %3193, 1
  store i64 %3194, i64* %3126, align 8
  %3195 = getelementptr inbounds i8, i8* %3192, i64 %3193
  store i8 %3191, i8* %3195, align 1
  %3196 = and i64 %3189, 280375465082880
  %3197 = icmp eq i64 %3196, 280375465082880
  br i1 %3197, label %3198, label %3203

3198:                                             ; preds = %3188
  %3199 = load i8*, i8** %3127, align 8
  %3200 = load i64, i64* %3126, align 8
  %3201 = add i64 %3200, 1
  store i64 %3201, i64* %3126, align 8
  %3202 = getelementptr inbounds i8, i8* %3199, i64 %3200
  store i8 0, i8* %3202, align 1
  br label %3203

3203:                                             ; preds = %3198, %3188
  %3204 = load i64, i64* %3125, align 8
  %3205 = lshr i64 %3204, 32
  %3206 = trunc i64 %3205 to i8
  %3207 = load i8*, i8** %3127, align 8
  %3208 = load i64, i64* %3126, align 8
  %3209 = add i64 %3208, 1
  store i64 %3209, i64* %3126, align 8
  %3210 = getelementptr inbounds i8, i8* %3207, i64 %3208
  store i8 %3206, i8* %3210, align 1
  %3211 = and i64 %3204, 1095216660480
  %3212 = icmp eq i64 %3211, 1095216660480
  br i1 %3212, label %3213, label %3218

3213:                                             ; preds = %3203
  %3214 = load i8*, i8** %3127, align 8
  %3215 = load i64, i64* %3126, align 8
  %3216 = add i64 %3215, 1
  store i64 %3216, i64* %3126, align 8
  %3217 = getelementptr inbounds i8, i8* %3214, i64 %3215
  store i8 0, i8* %3217, align 1
  br label %3218

3218:                                             ; preds = %3213, %3203
  %3219 = load i64, i64* %3125, align 8
  %3220 = lshr i64 %3219, 24
  %3221 = trunc i64 %3220 to i8
  %3222 = load i8*, i8** %3127, align 8
  %3223 = load i64, i64* %3126, align 8
  %3224 = add i64 %3223, 1
  store i64 %3224, i64* %3126, align 8
  %3225 = getelementptr inbounds i8, i8* %3222, i64 %3223
  store i8 %3221, i8* %3225, align 1
  %3226 = and i64 %3219, 4278190080
  %3227 = icmp eq i64 %3226, 4278190080
  br i1 %3227, label %3228, label %3233

3228:                                             ; preds = %3218
  %3229 = load i8*, i8** %3127, align 8
  %3230 = load i64, i64* %3126, align 8
  %3231 = add i64 %3230, 1
  store i64 %3231, i64* %3126, align 8
  %3232 = getelementptr inbounds i8, i8* %3229, i64 %3230
  store i8 0, i8* %3232, align 1
  br label %3233

3233:                                             ; preds = %3228, %3218
  %3234 = load i64, i64* %3125, align 8
  %3235 = lshr i64 %3234, 16
  %3236 = trunc i64 %3235 to i8
  %3237 = load i8*, i8** %3127, align 8
  %3238 = load i64, i64* %3126, align 8
  %3239 = add i64 %3238, 1
  store i64 %3239, i64* %3126, align 8
  %3240 = getelementptr inbounds i8, i8* %3237, i64 %3238
  store i8 %3236, i8* %3240, align 1
  %3241 = and i64 %3234, 16711680
  %3242 = icmp eq i64 %3241, 16711680
  br i1 %3242, label %3243, label %3287

3243:                                             ; preds = %3233
  %3244 = load i8*, i8** %3127, align 8
  %3245 = load i64, i64* %3126, align 8
  %3246 = add i64 %3245, 1
  store i64 %3246, i64* %3126, align 8
  %3247 = getelementptr inbounds i8, i8* %3244, i64 %3245
  store i8 0, i8* %3247, align 1
  br label %3287

3248:                                             ; preds = %3151
  %3249 = getelementptr inbounds i8, i8* %3163, i64 %3153
  store i8 %3162, i8* %3249, align 1
  %3250 = load i64, i64* %3125, align 8
  %3251 = lshr i64 %3250, 48
  %3252 = trunc i64 %3251 to i8
  %3253 = load i8*, i8** %3127, align 8
  %3254 = load i64, i64* %3126, align 8
  %3255 = add i64 %3254, 1
  %3256 = getelementptr inbounds i8, i8* %3253, i64 %3255
  store i8 %3252, i8* %3256, align 1
  %3257 = load i64, i64* %3125, align 8
  %3258 = lshr i64 %3257, 40
  %3259 = trunc i64 %3258 to i8
  %3260 = load i8*, i8** %3127, align 8
  %3261 = load i64, i64* %3126, align 8
  %3262 = add i64 %3261, 2
  %3263 = getelementptr inbounds i8, i8* %3260, i64 %3262
  store i8 %3259, i8* %3263, align 1
  %3264 = load i64, i64* %3125, align 8
  %3265 = lshr i64 %3264, 32
  %3266 = trunc i64 %3265 to i8
  %3267 = load i8*, i8** %3127, align 8
  %3268 = load i64, i64* %3126, align 8
  %3269 = add i64 %3268, 3
  %3270 = getelementptr inbounds i8, i8* %3267, i64 %3269
  store i8 %3266, i8* %3270, align 1
  %3271 = load i64, i64* %3125, align 8
  %3272 = lshr i64 %3271, 24
  %3273 = trunc i64 %3272 to i8
  %3274 = load i8*, i8** %3127, align 8
  %3275 = load i64, i64* %3126, align 8
  %3276 = add i64 %3275, 4
  %3277 = getelementptr inbounds i8, i8* %3274, i64 %3276
  store i8 %3273, i8* %3277, align 1
  %3278 = load i64, i64* %3125, align 8
  %3279 = lshr i64 %3278, 16
  %3280 = trunc i64 %3279 to i8
  %3281 = load i8*, i8** %3127, align 8
  %3282 = load i64, i64* %3126, align 8
  %3283 = add i64 %3282, 5
  %3284 = getelementptr inbounds i8, i8* %3281, i64 %3283
  store i8 %3280, i8* %3284, align 1
  %3285 = load i64, i64* %3126, align 8
  %3286 = add i64 %3285, 6
  store i64 %3286, i64* %3126, align 8
  br label %3287

3287:                                             ; preds = %3248, %3243, %3233
  %3288 = load i64, i64* %3125, align 8
  %3289 = shl i64 %3288, 48
  store i64 %3289, i64* %3125, align 8
  %3290 = load i32, i32* %3124, align 8
  %3291 = add nsw i32 %3290, 48
  store i32 %3291, i32* %3124, align 8
  br label %3292

3292:                                             ; preds = %3287, %3130
  %3293 = phi i64 [ %3142, %3130 ], [ %3289, %3287 ]
  %3294 = phi i32 [ %3139, %3130 ], [ %3291, %3287 ]
  %3295 = add nuw i64 %3134, 1
  %3296 = load i64, i64* %3119, align 8
  %3297 = load i64, i64* %3118, align 8
  %3298 = sub i64 %3296, %3297
  %3299 = ashr exact i64 %3298, 2
  %3300 = icmp ult i64 %3295, %3299
  br i1 %3300, label %3130, label %3301

3301:                                             ; preds = %3292, %3117
  %3302 = phi i64 [ %3120, %3117 ], [ %3297, %3292 ]
  store i64 %3302, i64* %3119, align 8
  br label %3303

3303:                                             ; preds = %3301, %2761
  %3304 = load i32*, i32** %186, align 8
  br label %3305

3305:                                             ; preds = %232, %3303
  %3306 = phi i32* [ %3304, %3303 ], [ %2197, %232 ]
  %3307 = icmp eq i32* %3306, null
  br i1 %3307, label %3312, label %3308

3308:                                             ; preds = %3305
  %3309 = ptrtoint i32* %3306 to i64
  %3310 = bitcast i32** %187 to i64*
  store i64 %3309, i64* %3310, align 8
  %3311 = bitcast i32* %3306 to i8*
  tail call void @_ZdlPv(i8* %3311) #11
  br label %3312

3312:                                             ; preds = %3305, %3308
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %185) #10
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %181) #10
  br label %3313

3313:                                             ; preds = %177, %3312
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__15dequeIN3jxl4jpeg11OutputChunkENS_9allocatorIS3_EEE12emplace_backIJiEEEvDpOT_(%"class.std::__1::deque"*, i32* dereferenceable(4)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = bitcast %"struct.jxl::jpeg::OutputChunk"*** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 1
  %7 = bitcast %"struct.jxl::jpeg::OutputChunk"*** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = ashr exact i64 %9, 3
  %11 = icmp eq i64 %9, 0
  %12 = mul i64 %10, 170
  %13 = add i64 %12, -1
  %14 = select i1 %11, i64 0, i64 %13
  %15 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 1
  %16 = load i64, i64* %15, align 8
  %17 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %18 = load i64, i64* %17, align 8
  %19 = add i64 %18, %16
  %20 = icmp eq i64 %14, %19
  %21 = inttoptr i64 %8 to %"struct.jxl::jpeg::OutputChunk"**
  %22 = inttoptr i64 %5 to %"struct.jxl::jpeg::OutputChunk"**
  br i1 %20, label %23, label %29

23:                                               ; preds = %2
  tail call void @_ZNSt3__15dequeIN3jxl4jpeg11OutputChunkENS_9allocatorIS3_EEE19__add_back_capacityEv(%"class.std::__1::deque"* %0)
  %24 = load i64, i64* %17, align 8
  %25 = load i64, i64* %15, align 8
  %26 = load %"struct.jxl::jpeg::OutputChunk"**, %"struct.jxl::jpeg::OutputChunk"*** %6, align 8
  %27 = load %"struct.jxl::jpeg::OutputChunk"**, %"struct.jxl::jpeg::OutputChunk"*** %3, align 8
  %28 = add i64 %25, %24
  br label %29

29:                                               ; preds = %23, %2
  %30 = phi i64 [ %28, %23 ], [ %19, %2 ]
  %31 = phi %"struct.jxl::jpeg::OutputChunk"** [ %27, %23 ], [ %22, %2 ]
  %32 = phi %"struct.jxl::jpeg::OutputChunk"** [ %26, %23 ], [ %21, %2 ]
  %33 = icmp eq %"struct.jxl::jpeg::OutputChunk"** %31, %32
  br i1 %33, label %40, label %34

34:                                               ; preds = %29
  %35 = udiv i64 %30, 170
  %36 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %32, i64 %35
  %37 = load %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %36, align 8
  %38 = urem i64 %30, 170
  %39 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk", %"struct.jxl::jpeg::OutputChunk"* %37, i64 %38
  br label %40

40:                                               ; preds = %29, %34
  %41 = phi %"struct.jxl::jpeg::OutputChunk"* [ %39, %34 ], [ null, %29 ]
  %42 = load i32, i32* %1, align 4
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk", %"struct.jxl::jpeg::OutputChunk"* %41, i64 0, i32 2
  %45 = bitcast %"class.std::__1::unique_ptr"* %44 to i64*
  store i64 0, i64* %45, align 8
  %46 = tail call i8* @_Znwm(i64 24) #11
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %46, i8 0, i64 24, i1 false) #10
  %47 = icmp eq i32 %42, 0
  br i1 %47, label %65, label %48

48:                                               ; preds = %40
  %49 = icmp slt i32 %42, 0
  br i1 %49, label %50, label %52

50:                                               ; preds = %48
  %51 = bitcast i8* %46 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %51) #12
  unreachable

52:                                               ; preds = %48
  %53 = tail call i8* @_Znwm(i64 %43) #11
  %54 = getelementptr inbounds i8, i8* %46, i64 8
  %55 = bitcast i8* %46 to i8**
  store i8* %53, i8** %55, align 8
  %56 = getelementptr inbounds i8, i8* %53, i64 %43
  %57 = getelementptr inbounds i8, i8* %46, i64 16
  %58 = bitcast i8* %57 to i8**
  store i8* %56, i8** %58, align 8
  %59 = bitcast i8* %54 to i64*
  %60 = ptrtoint i8* %53 to i64
  %61 = sub i64 %43, %60
  %62 = getelementptr i8, i8* %53, i64 %61
  %63 = ptrtoint i8* %62 to i64
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %53, i8 0, i64 %63, i1 false) #10
  %64 = ptrtoint i8* %56 to i64
  store i64 %64, i64* %59, align 8
  br label %65

65:                                               ; preds = %40, %52
  %66 = phi i64 [ 0, %40 ], [ %60, %52 ]
  %67 = bitcast %"class.std::__1::unique_ptr"* %44 to i8**
  store i8* %46, i8** %67, align 8
  %68 = bitcast %"struct.jxl::jpeg::OutputChunk"* %41 to i64*
  store i64 %66, i64* %68, align 8
  %69 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk", %"struct.jxl::jpeg::OutputChunk"* %41, i64 0, i32 1
  store i64 %43, i64* %69, align 8
  %70 = load i64, i64* %17, align 8
  %71 = add i64 %70, 1
  store i64 %71, i64* %17, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__112__deque_baseIN3jxl4jpeg11OutputChunkENS_9allocatorIS3_EEE5clearEv(%"class.std::__1::__deque_base"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.std::__1::__deque_base", %"class.std::__1::__deque_base"* %0, i64 0, i32 0, i32 1
  %3 = load %"struct.jxl::jpeg::OutputChunk"**, %"struct.jxl::jpeg::OutputChunk"*** %2, align 8
  %4 = getelementptr inbounds %"class.std::__1::__deque_base", %"class.std::__1::__deque_base"* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = udiv i64 %5, 170
  %7 = urem i64 %5, 170
  %8 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %3, i64 %6
  %9 = getelementptr inbounds %"class.std::__1::__deque_base", %"class.std::__1::__deque_base"* %0, i64 0, i32 0, i32 2
  %10 = load %"struct.jxl::jpeg::OutputChunk"**, %"struct.jxl::jpeg::OutputChunk"*** %9, align 8
  %11 = icmp eq %"struct.jxl::jpeg::OutputChunk"** %10, %3
  %12 = ptrtoint %"struct.jxl::jpeg::OutputChunk"** %10 to i64
  %13 = ptrtoint %"struct.jxl::jpeg::OutputChunk"** %3 to i64
  %14 = bitcast %"struct.jxl::jpeg::OutputChunk"** %3 to i8**
  br i1 %11, label %15, label %17

15:                                               ; preds = %1
  %16 = getelementptr inbounds %"class.std::__1::__deque_base", %"class.std::__1::__deque_base"* %0, i64 0, i32 2, i32 0, i32 0
  br label %29

17:                                               ; preds = %1
  %18 = load %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %8, align 8
  %19 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk", %"struct.jxl::jpeg::OutputChunk"* %18, i64 %7
  %20 = getelementptr inbounds %"class.std::__1::__deque_base", %"class.std::__1::__deque_base"* %0, i64 0, i32 2, i32 0, i32 0
  %21 = load i64, i64* %20, align 8
  %22 = add i64 %21, %5
  %23 = udiv i64 %22, 170
  %24 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %3, i64 %23
  %25 = load %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %24, align 8
  %26 = urem i64 %22, 170
  %27 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk", %"struct.jxl::jpeg::OutputChunk"* %25, i64 %26
  %28 = icmp eq %"struct.jxl::jpeg::OutputChunk"* %27, %19
  br i1 %28, label %29, label %47

29:                                               ; preds = %15, %17
  %30 = phi i64* [ %16, %15 ], [ %20, %17 ]
  %31 = bitcast %"struct.jxl::jpeg::OutputChunk"*** %9 to i64*
  br label %38

32:                                               ; preds = %74
  %33 = bitcast %"struct.jxl::jpeg::OutputChunk"*** %9 to i64*
  %34 = load i64, i64* %33, align 8
  %35 = bitcast %"struct.jxl::jpeg::OutputChunk"*** %2 to i64*
  %36 = load i64, i64* %35, align 8
  %37 = inttoptr i64 %36 to i8**
  br label %38

38:                                               ; preds = %29, %32
  %39 = phi i64* [ %30, %29 ], [ %20, %32 ]
  %40 = phi i64* [ %31, %29 ], [ %33, %32 ]
  %41 = phi i8** [ %14, %29 ], [ %37, %32 ]
  %42 = phi i64 [ %13, %29 ], [ %36, %32 ]
  %43 = phi i64 [ %12, %29 ], [ %34, %32 ]
  store i64 0, i64* %39, align 8
  %44 = sub i64 %43, %42
  %45 = ashr exact i64 %44, 3
  %46 = icmp ugt i64 %45, 2
  br i1 %46, label %79, label %90

47:                                               ; preds = %17, %74
  %48 = phi %"struct.jxl::jpeg::OutputChunk"* [ %77, %74 ], [ %19, %17 ]
  %49 = phi %"struct.jxl::jpeg::OutputChunk"** [ %76, %74 ], [ %8, %17 ]
  %50 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk", %"struct.jxl::jpeg::OutputChunk"* %48, i64 0, i32 2, i32 0, i32 0, i32 0
  %51 = load %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"** %50, align 8
  store %"class.std::__1::vector.0"* null, %"class.std::__1::vector.0"** %50, align 8
  %52 = icmp eq %"class.std::__1::vector.0"* %51, null
  br i1 %52, label %63, label %53

53:                                               ; preds = %47
  %54 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %51, i64 0, i32 0, i32 0
  %55 = load i8*, i8** %54, align 8
  %56 = icmp eq i8* %55, null
  br i1 %56, label %61, label %57

57:                                               ; preds = %53
  %58 = ptrtoint i8* %55 to i64
  %59 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %51, i64 0, i32 0, i32 1
  %60 = bitcast i8** %59 to i64*
  store i64 %58, i64* %60, align 8
  tail call void @_ZdlPv(i8* nonnull %55) #11
  br label %61

61:                                               ; preds = %57, %53
  %62 = bitcast %"class.std::__1::vector.0"* %51 to i8*
  tail call void @_ZdlPv(i8* %62) #11
  br label %63

63:                                               ; preds = %47, %61
  %64 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk", %"struct.jxl::jpeg::OutputChunk"* %48, i64 1
  %65 = ptrtoint %"struct.jxl::jpeg::OutputChunk"* %64 to i64
  %66 = bitcast %"struct.jxl::jpeg::OutputChunk"** %49 to i64*
  %67 = load i64, i64* %66, align 8
  %68 = sub i64 %65, %67
  %69 = icmp eq i64 %68, 4080
  br i1 %69, label %70, label %74

70:                                               ; preds = %63
  %71 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %49, i64 1
  %72 = bitcast %"struct.jxl::jpeg::OutputChunk"** %71 to i64*
  %73 = load i64, i64* %72, align 8
  br label %74

74:                                               ; preds = %63, %70
  %75 = phi i64 [ %73, %70 ], [ %65, %63 ]
  %76 = phi %"struct.jxl::jpeg::OutputChunk"** [ %71, %70 ], [ %49, %63 ]
  %77 = inttoptr i64 %75 to %"struct.jxl::jpeg::OutputChunk"*
  %78 = icmp eq %"struct.jxl::jpeg::OutputChunk"* %27, %77
  br i1 %78, label %32, label %47

79:                                               ; preds = %38, %79
  %80 = phi i8** [ %89, %79 ], [ %41, %38 ]
  %81 = load i8*, i8** %80, align 8
  tail call void @_ZdlPv(i8* %81) #11
  %82 = load %"struct.jxl::jpeg::OutputChunk"**, %"struct.jxl::jpeg::OutputChunk"*** %2, align 8
  %83 = getelementptr inbounds %"struct.jxl::jpeg::OutputChunk"*, %"struct.jxl::jpeg::OutputChunk"** %82, i64 1
  store %"struct.jxl::jpeg::OutputChunk"** %83, %"struct.jxl::jpeg::OutputChunk"*** %2, align 8
  %84 = load i64, i64* %40, align 8
  %85 = ptrtoint %"struct.jxl::jpeg::OutputChunk"** %83 to i64
  %86 = sub i64 %84, %85
  %87 = ashr exact i64 %86, 3
  %88 = icmp ugt i64 %87, 2
  %89 = bitcast %"struct.jxl::jpeg::OutputChunk"** %83 to i8**
  br i1 %88, label %79, label %90

90:                                               ; preds = %79, %38
  %91 = phi i64 [ %45, %38 ], [ %87, %79 ]
  switch i64 %91, label %95 [
    i64 1, label %93
    i64 2, label %92
  ]

92:                                               ; preds = %90
  br label %93

93:                                               ; preds = %90, %92
  %94 = phi i64 [ 170, %92 ], [ 85, %90 ]
  store i64 %94, i64* %4, align 8
  br label %95

95:                                               ; preds = %93, %90
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl4jpeg16HuffmanCodeTableENS_9allocatorIS3_EEE8__appendEm(%"class.std::__1::vector.79"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.79", %"class.std::__1::vector.79"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"struct.jxl::jpeg::HuffmanCodeTable"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.79", %"class.std::__1::vector.79"* %0, i64 0, i32 0, i32 1
  %7 = bitcast %"struct.jxl::jpeg::HuffmanCodeTable"** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = ashr exact i64 %9, 11
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %29, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to %"struct.jxl::jpeg::HuffmanCodeTable"*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %27, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanCodeTable", %"struct.jxl::jpeg::HuffmanCodeTable"* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr %"struct.jxl::jpeg::HuffmanCodeTable", %"struct.jxl::jpeg::HuffmanCodeTable"* %13, i64 %18, i32 0, i64 0
  %20 = bitcast i32* %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = add i64 %23, 2048
  %25 = and i64 %24, -2048
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %17, i8 0, i64 %25, i1 false) #10
  %26 = ptrtoint %"struct.jxl::jpeg::HuffmanCodeTable"* %16 to i64
  br label %27

27:                                               ; preds = %12, %15
  %28 = phi i64 [ %26, %15 ], [ %8, %12 ]
  store i64 %28, i64* %7, align 8
  br label %84

29:                                               ; preds = %2
  %30 = bitcast %"class.std::__1::vector.79"* %0 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %8, %31
  %33 = ashr exact i64 %32, 11
  %34 = add i64 %33, %1
  %35 = icmp ugt i64 %34, 9007199254740991
  br i1 %35, label %36, label %38

36:                                               ; preds = %29
  %37 = bitcast %"class.std::__1::vector.79"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %37) #12
  unreachable

38:                                               ; preds = %29
  %39 = sub i64 %5, %31
  %40 = ashr exact i64 %39, 11
  %41 = icmp ult i64 %40, 4503599627370495
  br i1 %41, label %42, label %50

42:                                               ; preds = %38
  %43 = ashr exact i64 %39, 10
  %44 = icmp ult i64 %43, %34
  %45 = select i1 %44, i64 %34, i64 %43
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %55, label %47

47:                                               ; preds = %42
  %48 = icmp ugt i64 %45, 9007199254740991
  br i1 %48, label %49, label %50

49:                                               ; preds = %47
  tail call void @abort() #12
  unreachable

50:                                               ; preds = %38, %47
  %51 = phi i64 [ %45, %47 ], [ 9007199254740991, %38 ]
  %52 = shl i64 %51, 11
  %53 = tail call i8* @_Znwm(i64 %52) #11
  %54 = bitcast i8* %53 to %"struct.jxl::jpeg::HuffmanCodeTable"*
  br label %55

55:                                               ; preds = %42, %50
  %56 = phi i64 [ %51, %50 ], [ 0, %42 ]
  %57 = phi %"struct.jxl::jpeg::HuffmanCodeTable"* [ %54, %50 ], [ null, %42 ]
  %58 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanCodeTable", %"struct.jxl::jpeg::HuffmanCodeTable"* %57, i64 %33
  %59 = bitcast %"struct.jxl::jpeg::HuffmanCodeTable"* %58 to i8*
  %60 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanCodeTable", %"struct.jxl::jpeg::HuffmanCodeTable"* %57, i64 %56
  %61 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanCodeTable", %"struct.jxl::jpeg::HuffmanCodeTable"* %58, i64 %1
  %62 = shl nsw i64 %1, 11
  call void @llvm.memset.p0i8.i64(i8* align 4 %59, i8 0, i64 %62, i1 false)
  %63 = ptrtoint %"struct.jxl::jpeg::HuffmanCodeTable"* %60 to i64
  %64 = ptrtoint %"struct.jxl::jpeg::HuffmanCodeTable"* %61 to i64
  %65 = getelementptr inbounds %"class.std::__1::vector.79", %"class.std::__1::vector.79"* %0, i64 0, i32 0, i32 0
  %66 = load %"struct.jxl::jpeg::HuffmanCodeTable"*, %"struct.jxl::jpeg::HuffmanCodeTable"** %65, align 8
  %67 = load i64, i64* %7, align 8
  %68 = ptrtoint %"struct.jxl::jpeg::HuffmanCodeTable"* %66 to i64
  %69 = sub i64 %67, %68
  %70 = ashr exact i64 %69, 11
  %71 = sub nsw i64 0, %70
  %72 = getelementptr inbounds %"struct.jxl::jpeg::HuffmanCodeTable", %"struct.jxl::jpeg::HuffmanCodeTable"* %58, i64 %71
  %73 = ptrtoint %"struct.jxl::jpeg::HuffmanCodeTable"* %72 to i64
  %74 = icmp sgt i64 %69, 0
  br i1 %74, label %75, label %79

75:                                               ; preds = %55
  %76 = bitcast %"struct.jxl::jpeg::HuffmanCodeTable"* %72 to i8*
  %77 = bitcast %"struct.jxl::jpeg::HuffmanCodeTable"* %66 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %76, i8* align 4 %77, i64 %69, i1 false) #10
  %78 = load %"struct.jxl::jpeg::HuffmanCodeTable"*, %"struct.jxl::jpeg::HuffmanCodeTable"** %65, align 8
  br label %79

79:                                               ; preds = %55, %75
  %80 = phi %"struct.jxl::jpeg::HuffmanCodeTable"* [ %66, %55 ], [ %78, %75 ]
  store i64 %73, i64* %30, align 8
  store i64 %64, i64* %7, align 8
  store i64 %63, i64* %4, align 8
  %81 = icmp eq %"struct.jxl::jpeg::HuffmanCodeTable"* %80, null
  br i1 %81, label %84, label %82

82:                                               ; preds = %79
  %83 = bitcast %"struct.jxl::jpeg::HuffmanCodeTable"* %80 to i8*
  tail call void @_ZdlPv(i8* %83) #11
  br label %84

84:                                               ; preds = %82, %79, %27
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind readnone speculatable }
attributes #10 = { nounwind }
attributes #11 = { builtin nounwind }
attributes #12 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = distinct !{!3, !4}
!4 = !{!"llvm.loop.isvectorized", i32 1}
!5 = distinct !{!5, !6}
!6 = !{!"llvm.loop.unroll.disable"}
!7 = distinct !{!7, !8, !4}
!8 = !{!"llvm.loop.unroll.runtime.disable"}
!9 = distinct !{!9, !6}
!10 = !{!11}
!11 = distinct !{!11, !12}
!12 = distinct !{!12, !"LVerDomain"}
!13 = !{!14}
!14 = distinct !{!14, !12}
!15 = distinct !{!15, !4}
!16 = distinct !{!16, !4}
!17 = distinct !{!17, !6}
!18 = distinct !{!18, !6}
!19 = distinct !{!19, !6}
!20 = distinct !{!20, !6}
!21 = distinct !{!21, !6}
!22 = !{i32 0, i32 33}
!23 = !{!"branch_weights", i32 1, i32 2000}
!24 = !{!25}
!25 = distinct !{!25, !26}
!26 = distinct !{!26, !"LVerDomain"}
!27 = !{!28}
!28 = distinct !{!28, !26}
!29 = distinct !{!29, !4}
!30 = distinct !{!30, !6}
!31 = distinct !{!31, !6}
!32 = distinct !{!32, !4}
!33 = !{!34}
!34 = distinct !{!34, !35}
!35 = distinct !{!35, !"LVerDomain"}
!36 = !{!37}
!37 = distinct !{!37, !35}
!38 = distinct !{!38, !4}
!39 = distinct !{!39, !6}
!40 = distinct !{!40, !4}
!41 = !{!42}
!42 = distinct !{!42, !43}
!43 = distinct !{!43, !"LVerDomain"}
!44 = !{!45}
!45 = distinct !{!45, !43}
!46 = distinct !{!46, !4}
!47 = distinct !{!47, !6}
!48 = distinct !{!48, !6}
!49 = distinct !{!49, !4}
!50 = !{!51}
!51 = distinct !{!51, !52}
!52 = distinct !{!52, !"LVerDomain"}
!53 = !{!54}
!54 = distinct !{!54, !52}
!55 = distinct !{!55, !4}
!56 = distinct !{!56, !6}
!57 = distinct !{!57, !6}
!58 = distinct !{!58, !4}
