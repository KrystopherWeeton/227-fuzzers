; ModuleID = '../../third_party/inspector_protocol/crdtp/error_support.cc'
source_filename = "../../third_party/inspector_protocol/crdtp/error_support.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.crdtp::ErrorSupport" = type { %"class.std::__1::vector", %"class.std::__1::basic_string" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.crdtp::ErrorSupport::Segment"*, %"struct.crdtp::ErrorSupport::Segment"*, %"class.std::__1::__compressed_pair" }
%"struct.crdtp::ErrorSupport::Segment" = type { i32, %union.anon }
%union.anon = type { i8* }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.crdtp::ErrorSupport::Segment"* }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.3 }
%union.anon.3 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::__vector_base_common" = type { i8 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }

@.str = private unnamed_addr constant [3 x i8] c"; \00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c".\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c": \00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5crdtp12ErrorSupport4PushEv(%"class.crdtp::ErrorSupport"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.crdtp::ErrorSupport", %"class.crdtp::ErrorSupport"* %0, i64 0, i32 0, i32 0, i32 1
  %3 = load %"struct.crdtp::ErrorSupport::Segment"*, %"struct.crdtp::ErrorSupport::Segment"** %2, align 8
  %4 = getelementptr inbounds %"class.crdtp::ErrorSupport", %"class.crdtp::ErrorSupport"* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %5 = load %"struct.crdtp::ErrorSupport::Segment"*, %"struct.crdtp::ErrorSupport::Segment"** %4, align 8
  %6 = icmp ult %"struct.crdtp::ErrorSupport::Segment"* %3, %5
  %7 = ptrtoint %"struct.crdtp::ErrorSupport::Segment"* %5 to i64
  br i1 %6, label %8, label %13

8:                                                ; preds = %1
  %9 = bitcast %"struct.crdtp::ErrorSupport::Segment"* %3 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 16, i1 false) #9
  %10 = getelementptr inbounds %"struct.crdtp::ErrorSupport::Segment", %"struct.crdtp::ErrorSupport::Segment"* %3, i64 1
  %11 = ptrtoint %"struct.crdtp::ErrorSupport::Segment"* %10 to i64
  %12 = bitcast %"struct.crdtp::ErrorSupport::Segment"** %2 to i64*
  store i64 %11, i64* %12, align 8
  br label %70

13:                                               ; preds = %1
  %14 = ptrtoint %"struct.crdtp::ErrorSupport::Segment"* %3 to i64
  %15 = bitcast %"struct.crdtp::ErrorSupport::Segment"** %2 to i64*
  %16 = bitcast %"class.crdtp::ErrorSupport"* %0 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %14, %17
  %19 = ashr exact i64 %18, 4
  %20 = add nsw i64 %19, 1
  %21 = icmp ugt i64 %20, 1152921504606846975
  br i1 %21, label %22, label %24

22:                                               ; preds = %13
  %23 = bitcast %"class.crdtp::ErrorSupport"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %23) #10
  unreachable

24:                                               ; preds = %13
  %25 = bitcast %"struct.crdtp::ErrorSupport::Segment"** %4 to i64*
  %26 = sub i64 %7, %17
  %27 = ashr exact i64 %26, 4
  %28 = icmp ult i64 %27, 576460752303423487
  br i1 %28, label %29, label %37

29:                                               ; preds = %24
  %30 = ashr exact i64 %26, 3
  %31 = icmp ult i64 %30, %20
  %32 = select i1 %31, i64 %20, i64 %30
  %33 = icmp eq i64 %32, 0
  br i1 %33, label %42, label %34

34:                                               ; preds = %29
  %35 = icmp ugt i64 %32, 1152921504606846975
  br i1 %35, label %36, label %37

36:                                               ; preds = %34
  tail call void @abort() #10
  unreachable

37:                                               ; preds = %34, %24
  %38 = phi i64 [ %32, %34 ], [ 1152921504606846975, %24 ]
  %39 = shl i64 %38, 4
  %40 = tail call i8* @_Znwm(i64 %39) #11
  %41 = bitcast i8* %40 to %"struct.crdtp::ErrorSupport::Segment"*
  br label %42

42:                                               ; preds = %37, %29
  %43 = phi i64 [ %38, %37 ], [ 0, %29 ]
  %44 = phi %"struct.crdtp::ErrorSupport::Segment"* [ %41, %37 ], [ null, %29 ]
  %45 = getelementptr inbounds %"struct.crdtp::ErrorSupport::Segment", %"struct.crdtp::ErrorSupport::Segment"* %44, i64 %19
  %46 = getelementptr inbounds %"struct.crdtp::ErrorSupport::Segment", %"struct.crdtp::ErrorSupport::Segment"* %44, i64 %43
  %47 = ptrtoint %"struct.crdtp::ErrorSupport::Segment"* %46 to i64
  %48 = bitcast %"struct.crdtp::ErrorSupport::Segment"* %45 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %48, i8 0, i64 16, i1 false) #9
  %49 = getelementptr inbounds %"struct.crdtp::ErrorSupport::Segment", %"struct.crdtp::ErrorSupport::Segment"* %45, i64 1
  %50 = ptrtoint %"struct.crdtp::ErrorSupport::Segment"* %49 to i64
  %51 = getelementptr inbounds %"class.crdtp::ErrorSupport", %"class.crdtp::ErrorSupport"* %0, i64 0, i32 0, i32 0, i32 0
  %52 = load %"struct.crdtp::ErrorSupport::Segment"*, %"struct.crdtp::ErrorSupport::Segment"** %51, align 8
  %53 = load i64, i64* %15, align 8
  %54 = ptrtoint %"struct.crdtp::ErrorSupport::Segment"* %52 to i64
  %55 = sub i64 %53, %54
  %56 = ashr exact i64 %55, 4
  %57 = sub nsw i64 0, %56
  %58 = getelementptr inbounds %"struct.crdtp::ErrorSupport::Segment", %"struct.crdtp::ErrorSupport::Segment"* %45, i64 %57
  %59 = ptrtoint %"struct.crdtp::ErrorSupport::Segment"* %58 to i64
  %60 = icmp sgt i64 %55, 0
  br i1 %60, label %61, label %65

61:                                               ; preds = %42
  %62 = bitcast %"struct.crdtp::ErrorSupport::Segment"* %58 to i8*
  %63 = bitcast %"struct.crdtp::ErrorSupport::Segment"* %52 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %62, i8* align 8 %63, i64 %55, i1 false) #9
  %64 = load %"struct.crdtp::ErrorSupport::Segment"*, %"struct.crdtp::ErrorSupport::Segment"** %51, align 8
  br label %65

65:                                               ; preds = %61, %42
  %66 = phi %"struct.crdtp::ErrorSupport::Segment"* [ %52, %42 ], [ %64, %61 ]
  store i64 %59, i64* %16, align 8
  store i64 %50, i64* %15, align 8
  store i64 %47, i64* %25, align 8
  %67 = icmp eq %"struct.crdtp::ErrorSupport::Segment"* %66, null
  br i1 %67, label %70, label %68

68:                                               ; preds = %65
  %69 = bitcast %"struct.crdtp::ErrorSupport::Segment"* %66 to i8*
  tail call void @_ZdlPv(i8* %69) #11
  br label %70

70:                                               ; preds = %8, %65, %68
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5crdtp12ErrorSupport3PopEv(%"class.crdtp::ErrorSupport"* nocapture) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.crdtp::ErrorSupport", %"class.crdtp::ErrorSupport"* %0, i64 0, i32 0, i32 0, i32 1
  %3 = load %"struct.crdtp::ErrorSupport::Segment"*, %"struct.crdtp::ErrorSupport::Segment"** %2, align 8
  %4 = getelementptr inbounds %"struct.crdtp::ErrorSupport::Segment", %"struct.crdtp::ErrorSupport::Segment"* %3, i64 -1
  store %"struct.crdtp::ErrorSupport::Segment"* %4, %"struct.crdtp::ErrorSupport::Segment"** %2, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5crdtp12ErrorSupport7SetNameEPKc(%"class.crdtp::ErrorSupport"* nocapture readonly, i8*) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.crdtp::ErrorSupport", %"class.crdtp::ErrorSupport"* %0, i64 0, i32 0, i32 0, i32 1
  %4 = load %"struct.crdtp::ErrorSupport::Segment"*, %"struct.crdtp::ErrorSupport::Segment"** %3, align 8
  %5 = getelementptr inbounds %"struct.crdtp::ErrorSupport::Segment", %"struct.crdtp::ErrorSupport::Segment"* %4, i64 -1, i32 0
  store i32 1, i32* %5, align 8
  %6 = load %"struct.crdtp::ErrorSupport::Segment"*, %"struct.crdtp::ErrorSupport::Segment"** %3, align 8
  %7 = getelementptr inbounds %"struct.crdtp::ErrorSupport::Segment", %"struct.crdtp::ErrorSupport::Segment"* %6, i64 -1, i32 1, i32 0
  store i8* %1, i8** %7, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5crdtp12ErrorSupport8SetIndexEm(%"class.crdtp::ErrorSupport"* nocapture readonly, i64) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.crdtp::ErrorSupport", %"class.crdtp::ErrorSupport"* %0, i64 0, i32 0, i32 0, i32 1
  %4 = load %"struct.crdtp::ErrorSupport::Segment"*, %"struct.crdtp::ErrorSupport::Segment"** %3, align 8
  %5 = getelementptr inbounds %"struct.crdtp::ErrorSupport::Segment", %"struct.crdtp::ErrorSupport::Segment"* %4, i64 -1, i32 0
  store i32 2, i32* %5, align 8
  %6 = load %"struct.crdtp::ErrorSupport::Segment"*, %"struct.crdtp::ErrorSupport::Segment"** %3, align 8
  %7 = getelementptr inbounds %"struct.crdtp::ErrorSupport::Segment", %"struct.crdtp::ErrorSupport::Segment"* %6, i64 -1, i32 1
  %8 = bitcast %union.anon* %7 to i64*
  store i64 %1, i64* %8, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5crdtp12ErrorSupport8AddErrorEPKc(%"class.crdtp::ErrorSupport"*, i8*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.std::__1::basic_string", align 8
  %4 = getelementptr inbounds %"class.crdtp::ErrorSupport", %"class.crdtp::ErrorSupport"* %0, i64 0, i32 1
  %5 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %6 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %5, i64 0, i32 1, i32 0
  %7 = load i8, i8* %6, align 1
  %8 = icmp slt i8 %7, 0
  br i1 %8, label %9, label %12

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.crdtp::ErrorSupport", %"class.crdtp::ErrorSupport"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %11 = load i64, i64* %10, align 8
  br label %14

12:                                               ; preds = %2
  %13 = zext i8 %7 to i64
  br label %14

14:                                               ; preds = %9, %12
  %15 = phi i64 [ %11, %9 ], [ %13, %12 ]
  %16 = icmp eq i64 %15, 0
  br i1 %16, label %19, label %17

17:                                               ; preds = %14
  %18 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* %4, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0)) #9
  br label %19

19:                                               ; preds = %17, %14
  %20 = getelementptr inbounds %"class.crdtp::ErrorSupport", %"class.crdtp::ErrorSupport"* %0, i64 0, i32 0, i32 0, i32 1
  %21 = bitcast %"struct.crdtp::ErrorSupport::Segment"** %20 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = bitcast %"class.crdtp::ErrorSupport"* %0 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = icmp eq i64 %22, %24
  br i1 %25, label %33, label %26

26:                                               ; preds = %19
  %27 = getelementptr inbounds %"class.crdtp::ErrorSupport", %"class.crdtp::ErrorSupport"* %0, i64 0, i32 0, i32 0, i32 0
  %28 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  %29 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %30 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %29, i64 0, i32 1, i32 0
  %31 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %32 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  br label %36

33:                                               ; preds = %69, %19
  %34 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* %4, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0)) #9
  %35 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* %4, i8* %1) #9
  ret void

36:                                               ; preds = %26, %69
  %37 = phi i64 [ %24, %26 ], [ %72, %69 ]
  %38 = phi i64 [ 0, %26 ], [ %70, %69 ]
  %39 = inttoptr i64 %37 to %"struct.crdtp::ErrorSupport::Segment"*
  %40 = icmp eq i64 %38, 0
  br i1 %40, label %44, label %41

41:                                               ; preds = %36
  %42 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* %4, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #9
  %43 = load %"struct.crdtp::ErrorSupport::Segment"*, %"struct.crdtp::ErrorSupport::Segment"** %27, align 8
  br label %44

44:                                               ; preds = %36, %41
  %45 = phi %"struct.crdtp::ErrorSupport::Segment"* [ %39, %36 ], [ %43, %41 ]
  %46 = getelementptr inbounds %"struct.crdtp::ErrorSupport::Segment", %"struct.crdtp::ErrorSupport::Segment"* %45, i64 %38, i32 0
  %47 = load i32, i32* %46, align 8
  switch i32 %47, label %69 [
    i32 1, label %48
    i32 2, label %52
  ]

48:                                               ; preds = %44
  %49 = getelementptr inbounds %"struct.crdtp::ErrorSupport::Segment", %"struct.crdtp::ErrorSupport::Segment"* %45, i64 %38, i32 1, i32 0
  %50 = load i8*, i8** %49, align 8
  %51 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* %4, i8* %50) #9
  br label %69

52:                                               ; preds = %44
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %28) #9
  %53 = getelementptr inbounds %"struct.crdtp::ErrorSupport::Segment", %"struct.crdtp::ErrorSupport::Segment"* %45, i64 %38, i32 1
  %54 = bitcast %union.anon* %53 to i64*
  %55 = load i64, i64* %54, align 8
  call void @_ZNSt3__19to_stringEm(%"class.std::__1::basic_string"* nonnull sret %3, i64 %55) #9
  %56 = load i8, i8* %30, align 1
  %57 = icmp slt i8 %56, 0
  %58 = load i8*, i8** %31, align 8
  %59 = load i64, i64* %32, align 8
  %60 = zext i8 %56 to i64
  %61 = select i1 %57, i8* %58, i8* %28
  %62 = select i1 %57, i64 %59, i64 %60
  %63 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* %4, i8* %61, i64 %62) #9
  %64 = load i8, i8* %30, align 1
  %65 = icmp slt i8 %64, 0
  br i1 %65, label %66, label %68

66:                                               ; preds = %52
  %67 = load i8*, i8** %31, align 8
  call void @_ZdlPv(i8* %67) #11
  br label %68

68:                                               ; preds = %52, %66
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %28) #9
  br label %69

69:                                               ; preds = %44, %68, %48
  %70 = add nuw i64 %38, 1
  %71 = load i64, i64* %21, align 8
  %72 = load i64, i64* %23, align 8
  %73 = sub i64 %71, %72
  %74 = ashr exact i64 %73, 4
  %75 = icmp ult i64 %70, %74
  br i1 %75, label %36, label %33
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare void @_ZNSt3__19to_stringEm(%"class.std::__1::basic_string"* sret, i64) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden { i8*, i64 } @_ZNK5crdtp12ErrorSupport6ErrorsEv(%"class.crdtp::ErrorSupport"*) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.crdtp::ErrorSupport", %"class.crdtp::ErrorSupport"* %0, i64 0, i32 1
  %3 = bitcast %"class.std::__1::basic_string"* %2 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %4 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %3, i64 0, i32 1, i32 0
  %5 = load i8, i8* %4, align 1
  %6 = icmp slt i8 %5, 0
  %7 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds %"class.crdtp::ErrorSupport", %"class.crdtp::ErrorSupport"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %"class.std::__1::basic_string"* %2 to i8*
  %12 = zext i8 %5 to i64
  %13 = select i1 %6, i8* %8, i8* %11
  %14 = select i1 %6, i64 %10, i64 %12
  %15 = insertvalue { i8*, i64 } undef, i8* %13, 0
  %16 = insertvalue { i8*, i64 } %15, i64 %14, 1
  ret { i8*, i64 } %16
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #6

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #7

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #8

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"*, i8*) local_unnamed_addr #3

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { noreturn nounwind }
attributes #11 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
