; ModuleID = '../../third_party/skia/src/codec/SkBmpStandardCodec.cpp'
source_filename = "../../third_party/skia/src/codec/SkBmpStandardCodec.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.SkBmpStandardCodec = type { %class.SkBmpBaseCodec, %class.sk_sp.26, i32, i32, i32, %"class.std::__1::unique_ptr.27", i8, i8, i64 }
%class.SkBmpBaseCodec = type { %class.SkBmpCodec, %"class.std::__1::unique_ptr.22" }
%class.SkBmpCodec = type { %class.SkCodec.base, i16, i32, i64, %"class.std::__1::unique_ptr.16" }
%class.SkCodec.base = type <{ i32 (...)**, %struct.SkEncodedInfo, i32, [4 x i8], %"class.std::__1::unique_ptr.3", i8, [3 x i8], i32, %struct.SkImageInfo, %"struct.SkCodec::Options", i32, i32, %struct.skcms_ICCProfile, i32, i32, i8, i8 }>
%struct.SkEncodedInfo = type { i32, i32, i32, i32, i8, %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.SkEncodedInfo::ICCProfile"* }
%"class.SkEncodedInfo::ICCProfile" = type { %struct.skcms_ICCProfile, %class.sk_sp }
%class.sk_sp = type { %class.SkData* }
%class.SkData = type { %class.SkNVRefCnt, void (i8*, i8*)*, i8*, i8*, i64 }
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.1" }
%"struct.std::__1::__atomic_base.1" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.std::__1::unique_ptr.3" = type { %"class.std::__1::__compressed_pair.4" }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %class.SkStream* }
%struct.SkImageInfo = type { %class.SkColorInfo, %struct.SkISize }
%class.SkColorInfo = type { %class.sk_sp.9, i32, i32 }
%class.sk_sp.9 = type { %class.SkColorSpace* }
%class.SkColorSpace = type <{ %class.SkNVRefCnt.10, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt.10 = type { %"struct.std::__1::atomic" }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%class.SkOnce = type { %"struct.std::__1::atomic.11" }
%"struct.std::__1::atomic.11" = type { %"struct.std::__1::__atomic_base.12" }
%"struct.std::__1::__atomic_base.12" = type { %"struct.std::__1::__atomic_base.13" }
%"struct.std::__1::__atomic_base.13" = type { %"struct.std::__1::__cxx_atomic_impl.14" }
%"struct.std::__1::__cxx_atomic_impl.14" = type { %"struct.std::__1::__cxx_atomic_base_impl.15" }
%"struct.std::__1::__cxx_atomic_base_impl.15" = type { i8 }
%struct.SkISize = type { i32, i32 }
%"struct.SkCodec::Options" = type { i32, %struct.SkIRect*, i32, i32 }
%struct.SkIRect = type { i32, i32, i32, i32 }
%struct.skcms_ICCProfile = type { i8*, i32, i32, i32, i32, i8, [3 x %union.skcms_Curve], i8, %struct.skcms_Matrix3x3, i8, %struct.skcms_A2B, i8, %struct.skcms_B2A }
%union.skcms_Curve = type { %struct.anon.0, [8 x i8] }
%struct.anon.0 = type { i32, i8*, i8* }
%struct.skcms_A2B = type { i32, [4 x %union.skcms_Curve], [4 x i8], i8*, i8*, i32, [3 x %union.skcms_Curve], %struct.skcms_Matrix3x4, i32, [3 x %union.skcms_Curve] }
%struct.skcms_Matrix3x4 = type { [3 x [4 x float]] }
%struct.skcms_B2A = type { i32, [3 x %union.skcms_Curve], i32, %struct.skcms_Matrix3x4, [3 x %union.skcms_Curve], i32, [4 x i8], i8*, i8*, [4 x %union.skcms_Curve] }
%"class.std::__1::unique_ptr.16" = type { %"class.std::__1::__compressed_pair.17" }
%"class.std::__1::__compressed_pair.17" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.std::__1::__compressed_pair_elem.18" = type { i32* }
%"class.std::__1::unique_ptr.22" = type { %"class.std::__1::__compressed_pair.23" }
%"class.std::__1::__compressed_pair.23" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"struct.std::__1::__compressed_pair_elem.24" = type { i8* }
%class.sk_sp.26 = type { %class.SkColorTable* }
%class.SkColorTable = type <{ %class.SkRefCnt.base, [4 x i8], i32*, i32, [4 x i8] }>
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"class.std::__1::unique_ptr.27" = type { %"class.std::__1::__compressed_pair.28" }
%"class.std::__1::__compressed_pair.28" = type { %"struct.std::__1::__compressed_pair_elem.29" }
%"struct.std::__1::__compressed_pair_elem.29" = type { %class.SkSwizzler* }
%class.SkSwizzler = type <{ %class.SkSampler.base, [4 x i8], void (i8*, i8*, i32, i32, i32, i32, i32*)*, void (i8*, i8*, i32, i32, i32, i32, i32*)*, void (i8*, i8*, i32, i32, i32, i32, i32*)*, i32*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i8] }>
%class.SkSampler.base = type <{ i32 (...)**, i32 }>
%class.SkStream = type { i32 (...)** }
%class.SkCodec = type <{ i32 (...)**, %struct.SkEncodedInfo, i32, [4 x i8], %"class.std::__1::unique_ptr.3", i8, [3 x i8], i32, %struct.SkImageInfo, %"struct.SkCodec::Options", i32, i32, %struct.skcms_ICCProfile, i32, i32, i8, i8, [6 x i8] }>
%class.SkRefCntBase = type <{ i32 (...)**, %"struct.std::__1::atomic", [4 x i8] }>
%class.SkMemoryStream = type { %class.SkStreamMemory, %class.sk_sp, i64 }
%class.SkStreamMemory = type { %class.SkStreamAsset }
%class.SkStreamAsset = type { %class.SkStreamSeekable }
%class.SkStreamSeekable = type { %class.SkStreamRewindable }
%class.SkStreamRewindable = type { %class.SkStream }
%"class.SkYUVAPixmapInfo::SupportedDataTypes" = type { %"class.std::__1::bitset" }
%"class.std::__1::bitset" = type { %"class.std::__1::__bitset" }
%"class.std::__1::__bitset" = type { i64 }
%class.SkYUVAPixmapInfo = type <{ %class.SkYUVAInfo, %"struct.std::__1::array", %"struct.std::__1::array.39", i32, [4 x i8] }>
%class.SkYUVAInfo = type { %struct.SkISize, i32, i32, i32, i32, i32, i32 }
%"struct.std::__1::array" = type { [4 x %struct.SkImageInfo] }
%"struct.std::__1::array.39" = type { [4 x i64] }
%class.SkYUVAPixmaps = type <{ %"struct.std::__1::array.40", %class.sk_sp, %class.SkYUVAInfo, i32, [4 x i8] }>
%"struct.std::__1::array.40" = type { [4 x %class.SkPixmap] }
%class.SkPixmap = type { i8*, i64, %struct.SkImageInfo }
%"struct.SkCodec::FrameInfo" = type { i32, i32, i8, i32, i8, i32, i32, %struct.SkIRect }
%class.SkFrameHolder = type opaque
%class.SkSampler = type <{ i32 (...)**, i32, [4 x i8] }>

$_ZN18SkBmpStandardCodecD2Ev = comdat any

$_ZN18SkBmpStandardCodecD0Ev = comdat any

$_ZNK7SkCodec21onGetScaledDimensionsEf = comdat any

$_ZN7SkCodec21onDimensionsSupportedERK7SkISize = comdat any

$_ZNK10SkBmpCodec18onGetEncodedFormatEv = comdat any

$_ZNK7SkCodec15onQueryYUVAInfoERKN16SkYUVAPixmapInfo18SupportedDataTypesEPS0_ = comdat any

$_ZN7SkCodec15onGetYUVAPlanesERK13SkYUVAPixmaps = comdat any

$_ZNK7SkCodec16onGetValidSubsetEP7SkIRect = comdat any

$_ZNK10SkBmpCodec18onGetScanlineOrderEv = comdat any

$_ZNK7SkCodec14usesColorXformEv = comdat any

$_ZN7SkCodec15onGetFrameCountEv = comdat any

$_ZNK7SkCodec14onGetFrameInfoEiPNS_9FrameInfoE = comdat any

$_ZN7SkCodec20onGetRepetitionCountEv = comdat any

$_ZNK7SkCodec14getFrameHolderEv = comdat any

$_ZN7SkCodec24onStartIncrementalDecodeERK11SkImageInfoPvmRKNS_7OptionsE = comdat any

$_ZN7SkCodec19onIncrementalDecodeEPi = comdat any

$_ZN18SkBmpStandardCodec10getSamplerEb = comdat any

$_ZNK18SkBmpStandardCodec7onInIcoEv = comdat any

@_ZTV18SkBmpStandardCodec = hidden unnamed_addr constant { [30 x i8*] } { [30 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.SkBmpStandardCodec*)* @_ZN18SkBmpStandardCodecD2Ev to i8*), i8* bitcast (void (%class.SkBmpStandardCodec*)* @_ZN18SkBmpStandardCodecD0Ev to i8*), i8* bitcast (i64 (%class.SkCodec*, float)* @_ZNK7SkCodec21onGetScaledDimensionsEf to i8*), i8* bitcast (i1 (%class.SkCodec*, %struct.SkISize*)* @_ZN7SkCodec21onDimensionsSupportedERK7SkISize to i8*), i8* bitcast (i32 (%class.SkBmpCodec*)* @_ZNK10SkBmpCodec18onGetEncodedFormatEv to i8*), i8* bitcast (i32 (%class.SkBmpStandardCodec*, %struct.SkImageInfo*, i8*, i64, %"struct.SkCodec::Options"*, i32*)* @_ZN18SkBmpStandardCodec11onGetPixelsERK11SkImageInfoPvmRKN7SkCodec7OptionsEPi to i8*), i8* bitcast (i1 (%class.SkCodec*, %"class.SkYUVAPixmapInfo::SupportedDataTypes"*, %class.SkYUVAPixmapInfo*)* @_ZNK7SkCodec15onQueryYUVAInfoERKN16SkYUVAPixmapInfo18SupportedDataTypesEPS0_ to i8*), i8* bitcast (i32 (%class.SkCodec*, %class.SkYUVAPixmaps*)* @_ZN7SkCodec15onGetYUVAPlanesERK13SkYUVAPixmaps to i8*), i8* bitcast (i1 (%class.SkCodec*, %struct.SkIRect*)* @_ZNK7SkCodec16onGetValidSubsetEP7SkIRect to i8*), i8* bitcast (i1 (%class.SkBmpCodec*)* @_ZN10SkBmpCodec8onRewindEv to i8*), i8* bitcast (i32 (%class.SkBmpCodec*)* @_ZNK10SkBmpCodec18onGetScanlineOrderEv to i8*), i8* bitcast (i32 (%class.SkCodec*, i32)* @_ZNK7SkCodec16onOutputScanlineEi to i8*), i8* bitcast (i1 (%class.SkCodec*, %struct.SkImageInfo*, i1, i1)* @_ZN7SkCodec19conversionSupportedERK11SkImageInfobb to i8*), i8* bitcast (i1 (%class.SkCodec*)* @_ZNK7SkCodec14usesColorXformEv to i8*), i8* bitcast (i32 (%class.SkCodec*)* @_ZN7SkCodec15onGetFrameCountEv to i8*), i8* bitcast (i1 (%class.SkCodec*, i32, %"struct.SkCodec::FrameInfo"*)* @_ZNK7SkCodec14onGetFrameInfoEiPNS_9FrameInfoE to i8*), i8* bitcast (i32 (%class.SkCodec*)* @_ZN7SkCodec20onGetRepetitionCountEv to i8*), i8* bitcast (%class.SkFrameHolder* (%class.SkCodec*)* @_ZNK7SkCodec14getFrameHolderEv to i8*), i8* bitcast (i32 (%class.SkBmpCodec*, %struct.SkImageInfo*, %"struct.SkCodec::Options"*)* @_ZN10SkBmpCodec21onStartScanlineDecodeERK11SkImageInfoRKN7SkCodec7OptionsE to i8*), i8* bitcast (i32 (%class.SkCodec*, %struct.SkImageInfo*, i8*, i64, %"struct.SkCodec::Options"*)* @_ZN7SkCodec24onStartIncrementalDecodeERK11SkImageInfoPvmRKNS_7OptionsE to i8*), i8* bitcast (i32 (%class.SkCodec*, i32*)* @_ZN7SkCodec19onIncrementalDecodeEPi to i8*), i8* bitcast (i1 (%class.SkBmpCodec*, i32)* @_ZN10SkBmpCodec15onSkipScanlinesEi to i8*), i8* bitcast (i32 (%class.SkBmpCodec*, i8*, i32, i64)* @_ZN10SkBmpCodec14onGetScanlinesEPvim to i8*), i8* bitcast (%class.SkSampler* (%class.SkBmpStandardCodec*, i1)* @_ZN18SkBmpStandardCodec10getSamplerEb to i8*), i8* bitcast (i1 (%class.SkBmpStandardCodec*)* @_ZNK18SkBmpStandardCodec7onInIcoEv to i8*), i8* bitcast (i32 (%class.SkBmpStandardCodec*, %struct.SkImageInfo*, %"struct.SkCodec::Options"*)* @_ZN18SkBmpStandardCodec17onPrepareToDecodeERK11SkImageInfoRKN7SkCodec7OptionsE to i8*), i8* bitcast (i32 (%class.SkBmpStandardCodec*, %struct.SkImageInfo*, i8*, i64, %"struct.SkCodec::Options"*)* @_ZN18SkBmpStandardCodec10decodeRowsERK11SkImageInfoPvmRKN7SkCodec7OptionsE to i8*), i8* bitcast (i1 (%class.SkBmpCodec*, i32)* @_ZN10SkBmpCodec8skipRowsEi to i8*)] }, align 8
@_ZTV14SkMemoryStream = external unnamed_addr constant { [18 x i8*] }, align 8

@_ZN18SkBmpStandardCodecC1EO13SkEncodedInfoNSt3__110unique_ptrI8SkStreamNS2_14default_deleteIS4_EEEEtjjjN7SkCodec15SkScanlineOrderEbb = hidden unnamed_addr alias void (%class.SkBmpStandardCodec*, %struct.SkEncodedInfo*, %class.SkStream*, i16, i32, i32, i32, i32, i1, i1), void (%class.SkBmpStandardCodec*, %struct.SkEncodedInfo*, %class.SkStream*, i16, i32, i32, i32, i32, i1, i1)* @_ZN18SkBmpStandardCodecC2EO13SkEncodedInfoNSt3__110unique_ptrI8SkStreamNS2_14default_deleteIS4_EEEEtjjjN7SkCodec15SkScanlineOrderEbb

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN18SkBmpStandardCodecC2EO13SkEncodedInfoNSt3__110unique_ptrI8SkStreamNS2_14default_deleteIS4_EEEEtjjjN7SkCodec15SkScanlineOrderEbb(%class.SkBmpStandardCodec*, %struct.SkEncodedInfo* dereferenceable(32), %class.SkStream*, i16 zeroext, i32, i32, i32, i32, i1 zeroext, i1 zeroext) unnamed_addr #0 align 2 {
  %11 = zext i1 %8 to i8
  %12 = zext i1 %9 to i8
  %13 = getelementptr inbounds %class.SkBmpStandardCodec, %class.SkBmpStandardCodec* %0, i64 0, i32 0
  tail call void @_ZN14SkBmpBaseCodecC2EO13SkEncodedInfoNSt3__110unique_ptrI8SkStreamNS2_14default_deleteIS4_EEEEtN7SkCodec15SkScanlineOrderE(%class.SkBmpBaseCodec* %13, %struct.SkEncodedInfo* dereferenceable(32) %1, %class.SkStream* %2, i16 zeroext %3, i32 %7) #10
  %14 = getelementptr inbounds %class.SkBmpStandardCodec, %class.SkBmpStandardCodec* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [30 x i8*] }, { [30 x i8*] }* @_ZTV18SkBmpStandardCodec, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %14, align 8
  %15 = getelementptr inbounds %class.SkBmpStandardCodec, %class.SkBmpStandardCodec* %0, i64 0, i32 1, i32 0
  store %class.SkColorTable* null, %class.SkColorTable** %15, align 8
  %16 = getelementptr inbounds %class.SkBmpStandardCodec, %class.SkBmpStandardCodec* %0, i64 0, i32 2
  store i32 %4, i32* %16, align 8
  %17 = getelementptr inbounds %class.SkBmpStandardCodec, %class.SkBmpStandardCodec* %0, i64 0, i32 3
  store i32 %5, i32* %17, align 4
  %18 = getelementptr inbounds %class.SkBmpStandardCodec, %class.SkBmpStandardCodec* %0, i64 0, i32 4
  store i32 %6, i32* %18, align 8
  %19 = getelementptr inbounds %class.SkBmpStandardCodec, %class.SkBmpStandardCodec* %0, i64 0, i32 5
  %20 = bitcast %"class.std::__1::unique_ptr.27"* %19 to i64*
  store i64 0, i64* %20, align 8
  %21 = getelementptr inbounds %class.SkBmpStandardCodec, %class.SkBmpStandardCodec* %0, i64 0, i32 6
  store i8 %11, i8* %21, align 8
  %22 = getelementptr inbounds %class.SkBmpStandardCodec, %class.SkBmpStandardCodec* %0, i64 0, i32 7
  store i8 %12, i8* %22, align 1
  %23 = getelementptr inbounds %class.SkBmpStandardCodec, %class.SkBmpStandardCodec* %0, i64 0, i32 8
  br i1 %9, label %24, label %32

24:                                               ; preds = %10
  %25 = getelementptr inbounds %class.SkBmpStandardCodec, %class.SkBmpStandardCodec* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %26 = load i32, i32* %25, align 8
  %27 = add i32 %26, 7
  %28 = lshr i32 %27, 3
  %29 = add nuw nsw i32 %28, 3
  %30 = and i32 %29, 1073741820
  %31 = zext i32 %30 to i64
  br label %32

32:                                               ; preds = %24, %10
  %33 = phi i64 [ %31, %24 ], [ 0, %10 ]
  store i64 %33, i64* %23, align 8
  ret void
}

declare void @_ZN14SkBmpBaseCodecC2EO13SkEncodedInfoNSt3__110unique_ptrI8SkStreamNS2_14default_deleteIS4_EEEEtN7SkCodec15SkScanlineOrderE(%class.SkBmpBaseCodec*, %struct.SkEncodedInfo* dereferenceable(32), %class.SkStream*, i16 zeroext, i32) unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN18SkBmpStandardCodec11onGetPixelsERK11SkImageInfoPvmRKN7SkCodec7OptionsEPi(%class.SkBmpStandardCodec*, %struct.SkImageInfo* dereferenceable(24), i8*, i64, %"struct.SkCodec::Options"* dereferenceable(24), i32* nocapture) unnamed_addr #0 align 2 {
  %7 = getelementptr inbounds %"struct.SkCodec::Options", %"struct.SkCodec::Options"* %4, i64 0, i32 1
  %8 = load %struct.SkIRect*, %struct.SkIRect** %7, align 8
  %9 = icmp eq %struct.SkIRect* %8, null
  br i1 %9, label %10, label %38

10:                                               ; preds = %6
  %11 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %1, i64 0, i32 1
  %12 = bitcast %struct.SkISize* %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = trunc i64 %13 to i32
  %15 = lshr i64 %13, 32
  %16 = trunc i64 %15 to i32
  %17 = getelementptr inbounds %class.SkBmpStandardCodec, %class.SkBmpStandardCodec* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %18 = load i32, i32* %17, align 8
  %19 = getelementptr inbounds %class.SkBmpStandardCodec, %class.SkBmpStandardCodec* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 1
  %20 = load i32, i32* %19, align 4
  %21 = icmp ne i32 %18, %14
  %22 = icmp ne i32 %20, %16
  %23 = or i1 %21, %22
  br i1 %23, label %38, label %24

24:                                               ; preds = %10
  %25 = getelementptr inbounds %class.SkBmpStandardCodec, %class.SkBmpStandardCodec* %0, i64 0, i32 0, i32 0
  %26 = tail call i32 @_ZN10SkBmpCodec15prepareToDecodeERK11SkImageInfoRKN7SkCodec7OptionsE(%class.SkBmpCodec* %25, %struct.SkImageInfo* dereferenceable(24) %1, %"struct.SkCodec::Options"* dereferenceable(24) %4) #10
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %38

28:                                               ; preds = %24
  %29 = bitcast %class.SkBmpStandardCodec* %0 to i32 (%class.SkBmpStandardCodec*, %struct.SkImageInfo*, i8*, i64, %"struct.SkCodec::Options"*)***
  %30 = load i32 (%class.SkBmpStandardCodec*, %struct.SkImageInfo*, i8*, i64, %"struct.SkCodec::Options"*)**, i32 (%class.SkBmpStandardCodec*, %struct.SkImageInfo*, i8*, i64, %"struct.SkCodec::Options"*)*** %29, align 8
  %31 = getelementptr inbounds i32 (%class.SkBmpStandardCodec*, %struct.SkImageInfo*, i8*, i64, %"struct.SkCodec::Options"*)*, i32 (%class.SkBmpStandardCodec*, %struct.SkImageInfo*, i8*, i64, %"struct.SkCodec::Options"*)** %30, i64 26
  %32 = load i32 (%class.SkBmpStandardCodec*, %struct.SkImageInfo*, i8*, i64, %"struct.SkCodec::Options"*)*, i32 (%class.SkBmpStandardCodec*, %struct.SkImageInfo*, i8*, i64, %"struct.SkCodec::Options"*)** %31, align 8
  %33 = tail call i32 %32(%class.SkBmpStandardCodec* %0, %struct.SkImageInfo* dereferenceable(24) %1, i8* %2, i64 %3, %"struct.SkCodec::Options"* dereferenceable(24) %4) #10
  %34 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %1, i64 0, i32 1, i32 1
  %35 = load i32, i32* %34, align 4
  %36 = icmp eq i32 %33, %35
  br i1 %36, label %38, label %37

37:                                               ; preds = %28
  store i32 %33, i32* %5, align 4
  br label %38

38:                                               ; preds = %10, %24, %28, %37, %6
  %39 = phi i32 [ 9, %6 ], [ %26, %24 ], [ 1, %37 ], [ 0, %28 ], [ 4, %10 ]
  ret i32 %39
}

declare i32 @_ZN10SkBmpCodec15prepareToDecodeERK11SkImageInfoRKN7SkCodec7OptionsE(%class.SkBmpCodec*, %struct.SkImageInfo* dereferenceable(24), %"struct.SkCodec::Options"* dereferenceable(24)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN18SkBmpStandardCodec16createColorTableE11SkColorType11SkAlphaType(%class.SkBmpStandardCodec*, i32, i32) local_unnamed_addr #0 align 2 {
  %4 = alloca [256 x i32], align 16
  %5 = bitcast [256 x i32]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %5) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %5, i8 -86, i64 1024, i1 false)
  %6 = getelementptr inbounds %class.SkBmpStandardCodec, %class.SkBmpStandardCodec* %0, i64 0, i32 0, i32 0, i32 1
  %7 = load i16, i16* %6, align 2
  %8 = icmp ult i16 %7, 9
  br i1 %8, label %9, label %182

9:                                                ; preds = %3
  %10 = zext i16 %7 to i32
  %11 = shl i32 1, %10
  %12 = getelementptr inbounds %class.SkBmpStandardCodec, %class.SkBmpStandardCodec* %0, i64 0, i32 2
  %13 = load i32, i32* %12, align 8
  %14 = add i32 %13, -1
  %15 = icmp ult i32 %14, %11
  %16 = select i1 %15, i32 %13, i32 %11
  %17 = getelementptr inbounds %class.SkBmpStandardCodec, %class.SkBmpStandardCodec* %0, i64 0, i32 3
  %18 = load i32, i32* %17, align 4
  %19 = mul i32 %16, %18
  %20 = zext i32 %19 to i64
  %21 = tail call i8* @_Znam(i64 %20) #11
  %22 = bitcast %class.SkBmpStandardCodec* %0 to %class.SkCodec*
  %23 = getelementptr inbounds %class.SkBmpStandardCodec, %class.SkBmpStandardCodec* %0, i64 0, i32 0, i32 0, i32 0, i32 4, i32 0, i32 0, i32 0
  %24 = load %class.SkStream*, %class.SkStream** %23, align 8
  %25 = bitcast %class.SkStream* %24 to i64 (%class.SkStream*, i8*, i64)***
  %26 = load i64 (%class.SkStream*, i8*, i64)**, i64 (%class.SkStream*, i8*, i64)*** %25, align 8
  %27 = getelementptr inbounds i64 (%class.SkStream*, i8*, i64)*, i64 (%class.SkStream*, i8*, i64)** %26, i64 2
  %28 = load i64 (%class.SkStream*, i8*, i64)*, i64 (%class.SkStream*, i8*, i64)** %27, align 8
  %29 = tail call i64 %28(%class.SkStream* %24, i8* nonnull %21, i64 %20) #10
  %30 = icmp eq i64 %29, %20
  br i1 %30, label %31, label %181

31:                                               ; preds = %9
  %32 = getelementptr inbounds %class.SkBmpStandardCodec, %class.SkBmpStandardCodec* %0, i64 0, i32 0, i32 0, i32 0, i32 10
  %33 = load i32, i32* %32, align 8
  %34 = icmp ne i32 %33, 0
  %35 = select i1 %34, i32 6, i32 %1
  %36 = icmp eq i32 %2, 2
  %37 = xor i1 %34, true
  %38 = and i1 %36, %37
  br i1 %38, label %42, label %39

39:                                               ; preds = %31
  %40 = icmp eq i32 %35, 4
  %41 = select i1 %40, i32 (i32, i32, i32, i32)* @_ZL18SkPackARGB_as_RGBAjjjj, i32 (i32, i32, i32, i32)* @_ZL18SkPackARGB_as_BGRAjjjj
  br label %50

42:                                               ; preds = %31
  %43 = getelementptr inbounds %class.SkBmpStandardCodec, %class.SkBmpStandardCodec* %0, i64 0, i32 6
  %44 = load i8, i8* %43, align 8, !range !2
  %45 = icmp eq i8 %44, 0
  %46 = icmp eq i32 %35, 4
  %47 = select i1 %46, i32 (i32, i32, i32, i32)* @_ZL24premultiply_argb_as_rgbajjjj, i32 (i32, i32, i32, i32)* @_ZL24premultiply_argb_as_bgrajjjj
  %48 = select i1 %46, i32 (i32, i32, i32, i32)* @_ZL18SkPackARGB_as_RGBAjjjj, i32 (i32, i32, i32, i32)* @_ZL18SkPackARGB_as_BGRAjjjj
  %49 = select i1 %45, i32 (i32, i32, i32, i32)* %47, i32 (i32, i32, i32, i32)* %48
  br label %50

50:                                               ; preds = %42, %39
  %51 = phi i32 (i32, i32, i32, i32)* [ %41, %39 ], [ %49, %42 ]
  %52 = icmp eq i32 %16, 0
  br i1 %52, label %58, label %53

53:                                               ; preds = %50
  %54 = getelementptr inbounds %class.SkBmpStandardCodec, %class.SkBmpStandardCodec* %0, i64 0, i32 6
  %55 = zext i32 %16 to i64
  br label %121

56:                                               ; preds = %144
  %57 = icmp ult i32 %16, %11
  br i1 %57, label %58, label %159

58:                                               ; preds = %50, %56
  %59 = phi i32 [ %16, %56 ], [ 0, %50 ]
  %60 = zext i32 %59 to i64
  %61 = zext i32 %11 to i64
  %62 = sub nsw i64 %61, %60
  %63 = icmp ult i64 %62, 8
  br i1 %63, label %64, label %66

64:                                               ; preds = %119, %58
  %65 = phi i64 [ %60, %58 ], [ %68, %119 ]
  br label %154

66:                                               ; preds = %58
  %67 = and i64 %62, -8
  %68 = add nsw i64 %67, %60
  %69 = add nsw i64 %67, -8
  %70 = lshr exact i64 %69, 3
  %71 = add nuw nsw i64 %70, 1
  %72 = and i64 %71, 3
  %73 = icmp ult i64 %69, 24
  br i1 %73, label %105, label %74

74:                                               ; preds = %66
  %75 = sub nsw i64 %71, %72
  br label %76

76:                                               ; preds = %76, %74
  %77 = phi i64 [ 0, %74 ], [ %102, %76 ]
  %78 = phi i64 [ %75, %74 ], [ %103, %76 ]
  %79 = add i64 %77, %60
  %80 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 %79
  %81 = bitcast i32* %80 to <4 x i32>*
  store <4 x i32> <i32 -16777216, i32 -16777216, i32 -16777216, i32 -16777216>, <4 x i32>* %81, align 4
  %82 = getelementptr inbounds i32, i32* %80, i64 4
  %83 = bitcast i32* %82 to <4 x i32>*
  store <4 x i32> <i32 -16777216, i32 -16777216, i32 -16777216, i32 -16777216>, <4 x i32>* %83, align 4
  %84 = or i64 %77, 8
  %85 = add i64 %84, %60
  %86 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 %85
  %87 = bitcast i32* %86 to <4 x i32>*
  store <4 x i32> <i32 -16777216, i32 -16777216, i32 -16777216, i32 -16777216>, <4 x i32>* %87, align 4
  %88 = getelementptr inbounds i32, i32* %86, i64 4
  %89 = bitcast i32* %88 to <4 x i32>*
  store <4 x i32> <i32 -16777216, i32 -16777216, i32 -16777216, i32 -16777216>, <4 x i32>* %89, align 4
  %90 = or i64 %77, 16
  %91 = add i64 %90, %60
  %92 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 %91
  %93 = bitcast i32* %92 to <4 x i32>*
  store <4 x i32> <i32 -16777216, i32 -16777216, i32 -16777216, i32 -16777216>, <4 x i32>* %93, align 4
  %94 = getelementptr inbounds i32, i32* %92, i64 4
  %95 = bitcast i32* %94 to <4 x i32>*
  store <4 x i32> <i32 -16777216, i32 -16777216, i32 -16777216, i32 -16777216>, <4 x i32>* %95, align 4
  %96 = or i64 %77, 24
  %97 = add i64 %96, %60
  %98 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 %97
  %99 = bitcast i32* %98 to <4 x i32>*
  store <4 x i32> <i32 -16777216, i32 -16777216, i32 -16777216, i32 -16777216>, <4 x i32>* %99, align 4
  %100 = getelementptr inbounds i32, i32* %98, i64 4
  %101 = bitcast i32* %100 to <4 x i32>*
  store <4 x i32> <i32 -16777216, i32 -16777216, i32 -16777216, i32 -16777216>, <4 x i32>* %101, align 4
  %102 = add i64 %77, 32
  %103 = add i64 %78, -4
  %104 = icmp eq i64 %103, 0
  br i1 %104, label %105, label %76, !llvm.loop !3

105:                                              ; preds = %76, %66
  %106 = phi i64 [ 0, %66 ], [ %102, %76 ]
  %107 = icmp eq i64 %72, 0
  br i1 %107, label %119, label %108

108:                                              ; preds = %105, %108
  %109 = phi i64 [ %116, %108 ], [ %106, %105 ]
  %110 = phi i64 [ %117, %108 ], [ %72, %105 ]
  %111 = add i64 %109, %60
  %112 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 %111
  %113 = bitcast i32* %112 to <4 x i32>*
  store <4 x i32> <i32 -16777216, i32 -16777216, i32 -16777216, i32 -16777216>, <4 x i32>* %113, align 4
  %114 = getelementptr inbounds i32, i32* %112, i64 4
  %115 = bitcast i32* %114 to <4 x i32>*
  store <4 x i32> <i32 -16777216, i32 -16777216, i32 -16777216, i32 -16777216>, <4 x i32>* %115, align 4
  %116 = add i64 %109, 8
  %117 = add i64 %110, -1
  %118 = icmp eq i64 %117, 0
  br i1 %118, label %119, label %108, !llvm.loop !5

119:                                              ; preds = %108, %105
  %120 = icmp eq i64 %62, %67
  br i1 %120, label %159, label %64

121:                                              ; preds = %144, %53
  %122 = phi i64 [ 0, %53 ], [ %152, %144 ]
  %123 = load i32, i32* %17, align 4
  %124 = trunc i64 %122 to i32
  %125 = mul i32 %123, %124
  %126 = zext i32 %125 to i64
  %127 = getelementptr inbounds i8, i8* %21, i64 %126
  %128 = load i8, i8* %127, align 1
  %129 = add i32 %125, 1
  %130 = zext i32 %129 to i64
  %131 = getelementptr inbounds i8, i8* %21, i64 %130
  %132 = load i8, i8* %131, align 1
  %133 = add i32 %125, 2
  %134 = zext i32 %133 to i64
  %135 = getelementptr inbounds i8, i8* %21, i64 %134
  %136 = load i8, i8* %135, align 1
  %137 = load i8, i8* %54, align 8, !range !2
  %138 = icmp eq i8 %137, 0
  br i1 %138, label %139, label %144

139:                                              ; preds = %121
  %140 = add i32 %125, 3
  %141 = zext i32 %140 to i64
  %142 = getelementptr inbounds i8, i8* %21, i64 %141
  %143 = load i8, i8* %142, align 1
  br label %144

144:                                              ; preds = %121, %139
  %145 = phi i8 [ %143, %139 ], [ -1, %121 ]
  %146 = zext i8 %145 to i32
  %147 = zext i8 %136 to i32
  %148 = zext i8 %132 to i32
  %149 = zext i8 %128 to i32
  %150 = tail call i32 %51(i32 %146, i32 %147, i32 %148, i32 %149) #10, !callees !7
  %151 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 %122
  store i32 %150, i32* %151, align 4
  %152 = add nuw nsw i64 %122, 1
  %153 = icmp eq i64 %152, %55
  br i1 %153, label %56, label %121

154:                                              ; preds = %64, %154
  %155 = phi i64 [ %157, %154 ], [ %65, %64 ]
  %156 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 %155
  store i32 -16777216, i32* %156, align 4
  %157 = add nuw nsw i64 %155, 1
  %158 = icmp eq i64 %157, %61
  br i1 %158, label %159, label %154, !llvm.loop !8

159:                                              ; preds = %154, %119, %56
  %160 = load i32, i32* %32, align 8
  switch i32 %160, label %161 [
    i32 0, label %162
    i32 2, label %162
  ]

161:                                              ; preds = %159
  call void @_ZNK7SkCodec15applyColorXformEPvPKvi(%class.SkCodec* %22, i8* nonnull %5, i8* nonnull %5, i32 %11) #10
  br label %162

162:                                              ; preds = %159, %159, %161
  %163 = call i8* @_Znwm(i64 32) #11
  %164 = bitcast i8* %163 to %class.SkColorTable*
  %165 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 0
  call void @_ZN12SkColorTableC1EPKji(%class.SkColorTable* nonnull %164, i32* nonnull %165, i32 %11) #10
  %166 = getelementptr inbounds %class.SkBmpStandardCodec, %class.SkBmpStandardCodec* %0, i64 0, i32 1, i32 0
  %167 = load %class.SkColorTable*, %class.SkColorTable** %166, align 8
  %168 = bitcast %class.SkColorTable** %166 to i8**
  store i8* %163, i8** %168, align 8
  %169 = icmp eq %class.SkColorTable* %167, null
  br i1 %169, label %180, label %170

170:                                              ; preds = %162
  %171 = getelementptr inbounds %class.SkColorTable, %class.SkColorTable* %167, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %172 = atomicrmw add i32* %171, i32 -1 acq_rel
  %173 = icmp eq i32 %172, 1
  br i1 %173, label %174, label %180

174:                                              ; preds = %170
  %175 = bitcast %class.SkColorTable* %167 to %class.SkRefCntBase*
  %176 = bitcast %class.SkColorTable* %167 to void (%class.SkRefCntBase*)***
  %177 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %176, align 8
  %178 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %177, i64 2
  %179 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %178, align 8
  call void %179(%class.SkRefCntBase* nonnull %175) #10
  br label %180

180:                                              ; preds = %162, %170, %174
  call void @_ZdaPv(i8* nonnull %21) #11
  br label %182

181:                                              ; preds = %9
  tail call void @_ZdaPv(i8* nonnull %21) #11
  br label %206

182:                                              ; preds = %180, %3
  %183 = phi i32 [ 0, %3 ], [ %19, %180 ]
  %184 = getelementptr inbounds %class.SkBmpStandardCodec, %class.SkBmpStandardCodec* %0, i64 0, i32 7
  %185 = load i8, i8* %184, align 1, !range !2
  %186 = icmp eq i8 %185, 0
  br i1 %186, label %187, label %205

187:                                              ; preds = %182
  %188 = getelementptr inbounds %class.SkBmpStandardCodec, %class.SkBmpStandardCodec* %0, i64 0, i32 4
  %189 = load i32, i32* %188, align 8
  %190 = icmp ult i32 %189, %183
  br i1 %190, label %206, label %191

191:                                              ; preds = %187
  %192 = getelementptr inbounds %class.SkBmpStandardCodec, %class.SkBmpStandardCodec* %0, i64 0, i32 0, i32 0, i32 0, i32 4, i32 0, i32 0, i32 0
  %193 = load %class.SkStream*, %class.SkStream** %192, align 8
  %194 = sub i32 %189, %183
  %195 = zext i32 %194 to i64
  %196 = bitcast %class.SkStream* %193 to i64 (%class.SkStream*, i8*, i64)***
  %197 = load i64 (%class.SkStream*, i8*, i64)**, i64 (%class.SkStream*, i8*, i64)*** %196, align 8
  %198 = getelementptr inbounds i64 (%class.SkStream*, i8*, i64)*, i64 (%class.SkStream*, i8*, i64)** %197, i64 2
  %199 = load i64 (%class.SkStream*, i8*, i64)*, i64 (%class.SkStream*, i8*, i64)** %198, align 8
  %200 = call i64 %199(%class.SkStream* %193, i8* null, i64 %195) #10
  %201 = load i32, i32* %188, align 8
  %202 = sub i32 %201, %183
  %203 = zext i32 %202 to i64
  %204 = icmp eq i64 %200, %203
  br i1 %204, label %205, label %206

205:                                              ; preds = %191, %182
  br label %206

206:                                              ; preds = %191, %187, %181, %205
  %207 = phi i1 [ true, %205 ], [ false, %181 ], [ false, %187 ], [ false, %191 ]
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %5) #10
  ret i1 %207
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znam(i64) local_unnamed_addr #3

declare void @_ZNK7SkCodec15applyColorXformEPvPKvi(%class.SkCodec*, i8*, i8*, i32) local_unnamed_addr #1

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #3

declare void @_ZN12SkColorTableC1EPKji(%class.SkColorTable*, i32*, i32) unnamed_addr #1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZNK18SkBmpStandardCodec12swizzlerInfoEv(%struct.SkEncodedInfo* noalias nocapture sret, %class.SkBmpStandardCodec* nocapture readonly) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %class.SkBmpStandardCodec, %class.SkBmpStandardCodec* %1, i64 0, i32 7
  %4 = load i8, i8* %3, align 1, !range !2
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %16, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %class.SkBmpStandardCodec, %class.SkBmpStandardCodec* %1, i64 0, i32 0, i32 0, i32 1
  %8 = load i16, i16* %7, align 2
  %9 = icmp ult i16 %8, 9
  br i1 %9, label %10, label %14

10:                                               ; preds = %6
  %11 = getelementptr inbounds %class.SkBmpStandardCodec, %class.SkBmpStandardCodec* %1, i64 0, i32 0, i32 0, i32 0, i32 1, i32 3
  %12 = load i32, i32* %11, align 4
  %13 = trunc i16 %8 to i8
  br label %23

14:                                               ; preds = %6
  %15 = icmp eq i16 %8, 24
  br i1 %15, label %23, label %16

16:                                               ; preds = %2, %14
  %17 = getelementptr inbounds %class.SkBmpStandardCodec, %class.SkBmpStandardCodec* %1, i64 0, i32 0, i32 0, i32 0, i32 1, i32 2
  %18 = load i32, i32* %17, align 8
  %19 = getelementptr inbounds %class.SkBmpStandardCodec, %class.SkBmpStandardCodec* %1, i64 0, i32 0, i32 0, i32 0, i32 1, i32 3
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr inbounds %class.SkBmpStandardCodec, %class.SkBmpStandardCodec* %1, i64 0, i32 0, i32 0, i32 0, i32 1, i32 4
  %22 = load i8, i8* %21, align 8
  br label %23

23:                                               ; preds = %14, %16, %10
  %24 = phi i32 [ %18, %16 ], [ 4, %10 ], [ 7, %14 ]
  %25 = phi i32 [ %20, %16 ], [ %12, %10 ], [ 0, %14 ]
  %26 = phi i8 [ %22, %16 ], [ %13, %10 ], [ 8, %14 ]
  %27 = getelementptr inbounds %struct.SkEncodedInfo, %struct.SkEncodedInfo* %0, i64 0, i32 0
  store i32 0, i32* %27, align 8, !alias.scope !10
  %28 = getelementptr inbounds %struct.SkEncodedInfo, %struct.SkEncodedInfo* %0, i64 0, i32 1
  store i32 0, i32* %28, align 4, !alias.scope !10
  %29 = getelementptr inbounds %struct.SkEncodedInfo, %struct.SkEncodedInfo* %0, i64 0, i32 2
  store i32 %24, i32* %29, align 8, !alias.scope !10
  %30 = getelementptr inbounds %struct.SkEncodedInfo, %struct.SkEncodedInfo* %0, i64 0, i32 3
  store i32 %25, i32* %30, align 4, !alias.scope !10
  %31 = getelementptr inbounds %struct.SkEncodedInfo, %struct.SkEncodedInfo* %0, i64 0, i32 4
  store i8 %26, i8* %31, align 8, !alias.scope !10
  %32 = getelementptr inbounds %struct.SkEncodedInfo, %struct.SkEncodedInfo* %0, i64 0, i32 5
  %33 = bitcast %"class.std::__1::unique_ptr"* %32 to i64*
  store i64 0, i64* %33, align 8, !alias.scope !10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN18SkBmpStandardCodec18initializeSwizzlerERK11SkImageInfoRKN7SkCodec7OptionsE(%class.SkBmpStandardCodec* nocapture, %struct.SkImageInfo* nocapture readonly dereferenceable(24), %"struct.SkCodec::Options"* nocapture readonly dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %4 = alloca %struct.SkEncodedInfo, align 8
  %5 = alloca %struct.SkImageInfo, align 8
  %6 = alloca %"struct.SkCodec::Options", align 8
  %7 = bitcast %struct.SkEncodedInfo* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %7) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 -86, i64 32, i1 false)
  %8 = getelementptr inbounds %class.SkBmpStandardCodec, %class.SkBmpStandardCodec* %0, i64 0, i32 7
  %9 = load i8, i8* %8, align 1, !range !2, !noalias !29
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %21, label %11

11:                                               ; preds = %3
  %12 = getelementptr inbounds %class.SkBmpStandardCodec, %class.SkBmpStandardCodec* %0, i64 0, i32 0, i32 0, i32 1
  %13 = load i16, i16* %12, align 2, !noalias !29
  %14 = icmp ult i16 %13, 9
  br i1 %14, label %15, label %19

15:                                               ; preds = %11
  %16 = getelementptr inbounds %class.SkBmpStandardCodec, %class.SkBmpStandardCodec* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 3
  %17 = load i32, i32* %16, align 4, !noalias !29
  %18 = trunc i16 %13 to i8
  br label %28

19:                                               ; preds = %11
  %20 = icmp eq i16 %13, 24
  br i1 %20, label %28, label %21

21:                                               ; preds = %19, %3
  %22 = getelementptr inbounds %class.SkBmpStandardCodec, %class.SkBmpStandardCodec* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 2
  %23 = load i32, i32* %22, align 8, !noalias !29
  %24 = getelementptr inbounds %class.SkBmpStandardCodec, %class.SkBmpStandardCodec* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 3
  %25 = load i32, i32* %24, align 4, !noalias !29
  %26 = getelementptr inbounds %class.SkBmpStandardCodec, %class.SkBmpStandardCodec* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 4
  %27 = load i8, i8* %26, align 8, !noalias !29
  br label %28

28:                                               ; preds = %19, %15, %21
  %29 = phi i32 [ 4, %15 ], [ %23, %21 ], [ 7, %19 ]
  %30 = phi i32 [ %17, %15 ], [ %25, %21 ], [ 0, %19 ]
  %31 = phi i8 [ %18, %15 ], [ %27, %21 ], [ 8, %19 ]
  %32 = getelementptr inbounds %struct.SkEncodedInfo, %struct.SkEncodedInfo* %4, i64 0, i32 0
  store i32 0, i32* %32, align 8, !alias.scope !32
  %33 = getelementptr inbounds %struct.SkEncodedInfo, %struct.SkEncodedInfo* %4, i64 0, i32 1
  store i32 0, i32* %33, align 4, !alias.scope !32
  %34 = getelementptr inbounds %struct.SkEncodedInfo, %struct.SkEncodedInfo* %4, i64 0, i32 2
  store i32 %29, i32* %34, align 8, !alias.scope !32
  %35 = getelementptr inbounds %struct.SkEncodedInfo, %struct.SkEncodedInfo* %4, i64 0, i32 3
  store i32 %30, i32* %35, align 4, !alias.scope !32
  %36 = getelementptr inbounds %struct.SkEncodedInfo, %struct.SkEncodedInfo* %4, i64 0, i32 4
  store i8 %31, i8* %36, align 8, !alias.scope !32
  %37 = getelementptr inbounds %struct.SkEncodedInfo, %struct.SkEncodedInfo* %4, i64 0, i32 5
  %38 = bitcast %"class.std::__1::unique_ptr"* %37 to i64*
  store i64 0, i64* %38, align 8, !alias.scope !32
  %39 = getelementptr inbounds %class.SkBmpStandardCodec, %class.SkBmpStandardCodec* %0, i64 0, i32 1, i32 0
  %40 = load %class.SkColorTable*, %class.SkColorTable** %39, align 8
  %41 = icmp eq %class.SkColorTable* %40, null
  br i1 %41, label %45, label %42

42:                                               ; preds = %28
  %43 = getelementptr inbounds %class.SkColorTable, %class.SkColorTable* %40, i64 0, i32 2
  %44 = load i32*, i32** %43, align 8
  br label %45

45:                                               ; preds = %28, %42
  %46 = phi i32* [ %44, %42 ], [ null, %28 ]
  %47 = bitcast %struct.SkImageInfo* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %47) #10
  %48 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %5, i64 0, i32 0, i32 0, i32 0
  %49 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %5, i64 0, i32 0, i32 1
  %50 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %1, i64 0, i32 0, i32 0, i32 0
  %51 = bitcast %struct.SkImageInfo* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %51, i8 -86, i64 24, i1 false)
  %52 = load %class.SkColorSpace*, %class.SkColorSpace** %50, align 8
  %53 = icmp eq %class.SkColorSpace* %52, null
  br i1 %53, label %57, label %54

54:                                               ; preds = %45
  %55 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %52, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %56 = atomicrmw add i32* %55, i32 1 monotonic
  br label %57

57:                                               ; preds = %45, %54
  store %class.SkColorSpace* %52, %class.SkColorSpace** %48, align 8
  %58 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %1, i64 0, i32 0, i32 1
  %59 = bitcast i32* %58 to i64*
  %60 = bitcast i32* %49 to i64*
  %61 = load i64, i64* %59, align 8
  store i64 %61, i64* %60, align 8
  %62 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %5, i64 0, i32 1
  %63 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %1, i64 0, i32 1
  %64 = bitcast %struct.SkISize* %63 to i64*
  %65 = bitcast %struct.SkISize* %62 to i64*
  %66 = load i64, i64* %64, align 8
  store i64 %66, i64* %65, align 8
  %67 = bitcast %"struct.SkCodec::Options"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %67) #10
  %68 = bitcast %"struct.SkCodec::Options"* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %67, i8* align 8 %68, i64 24, i1 false)
  %69 = getelementptr inbounds %class.SkBmpStandardCodec, %class.SkBmpStandardCodec* %0, i64 0, i32 0, i32 0, i32 0, i32 10
  %70 = load i32, i32* %69, align 8
  %71 = icmp eq i32 %70, 0
  %72 = and i64 %61, -4294967296
  br i1 %71, label %117, label %73

73:                                               ; preds = %57
  br i1 %53, label %74, label %78

74:                                               ; preds = %73
  %75 = ptrtoint %class.SkColorSpace* %52 to i64
  %76 = or i64 %72, 6
  %77 = bitcast %struct.SkImageInfo* %5 to i64*
  store i64 %75, i64* %77, align 8
  br label %92

78:                                               ; preds = %73
  %79 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %52, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %80 = atomicrmw add i32* %79, i32 1 monotonic, !noalias !51
  %81 = load %class.SkColorSpace*, %class.SkColorSpace** %48, align 8
  %82 = bitcast %class.SkColorSpace* %81 to i8*
  %83 = ptrtoint %class.SkColorSpace* %52 to i64
  %84 = or i64 %72, 6
  %85 = bitcast %struct.SkImageInfo* %5 to i64*
  store i64 %83, i64* %85, align 8
  %86 = icmp eq %class.SkColorSpace* %81, null
  br i1 %86, label %92, label %87

87:                                               ; preds = %78
  %88 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %81, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %89 = atomicrmw add i32* %88, i32 -1 acq_rel
  %90 = icmp eq i32 %89, 1
  br i1 %90, label %91, label %92

91:                                               ; preds = %87
  tail call void @_ZdlPv(i8* %82) #11
  br label %92

92:                                               ; preds = %74, %91, %87, %78
  %93 = phi i64* [ %77, %74 ], [ %85, %91 ], [ %85, %87 ], [ %85, %78 ]
  %94 = phi i64 [ %76, %74 ], [ %84, %91 ], [ %84, %87 ], [ %84, %78 ]
  store i64 %94, i64* %60, align 8
  store i64 %66, i64* %65, align 8
  %95 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %1, i64 0, i32 0, i32 2
  %96 = load i32, i32* %95, align 4
  %97 = icmp eq i32 %96, 2
  br i1 %97, label %98, label %115

98:                                               ; preds = %92
  %99 = load %class.SkColorSpace*, %class.SkColorSpace** %48, align 8
  %100 = icmp eq %class.SkColorSpace* %99, null
  br i1 %100, label %101, label %102

101:                                              ; preds = %98
  store i64 0, i64* %93, align 8
  br label %114

102:                                              ; preds = %98
  %103 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %99, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %104 = atomicrmw add i32* %103, i32 1 monotonic, !noalias !58
  %105 = load %class.SkColorSpace*, %class.SkColorSpace** %48, align 8
  %106 = ptrtoint %class.SkColorSpace* %99 to i64
  store i64 %106, i64* %93, align 8
  %107 = icmp eq %class.SkColorSpace* %105, null
  br i1 %107, label %114, label %108

108:                                              ; preds = %102
  %109 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %105, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %110 = atomicrmw add i32* %109, i32 -1 acq_rel
  %111 = icmp eq i32 %110, 1
  br i1 %111, label %112, label %114

112:                                              ; preds = %108
  %113 = bitcast %class.SkColorSpace* %105 to i8*
  tail call void @_ZdlPv(i8* %113) #11
  br label %114

114:                                              ; preds = %112, %108, %102, %101
  store i64 12884901894, i64* %60, align 8
  store i64 %66, i64* %65, align 8
  br label %115

115:                                              ; preds = %114, %92
  %116 = getelementptr inbounds %"struct.SkCodec::Options", %"struct.SkCodec::Options"* %6, i64 0, i32 0
  store i32 1, i32* %116, align 8
  br label %117

117:                                              ; preds = %57, %115
  %118 = call %class.SkSwizzler* @_ZN10SkSwizzler4MakeERK13SkEncodedInfoPKjRK11SkImageInfoRKN7SkCodec7OptionsEPK7SkIRect(%struct.SkEncodedInfo* nonnull dereferenceable(32) %4, i32* %46, %struct.SkImageInfo* nonnull dereferenceable(24) %5, %"struct.SkCodec::Options"* nonnull dereferenceable(24) %6, %struct.SkIRect* null) #10
  %119 = ptrtoint %class.SkSwizzler* %118 to i64
  %120 = getelementptr inbounds %class.SkBmpStandardCodec, %class.SkBmpStandardCodec* %0, i64 0, i32 5
  %121 = getelementptr inbounds %"class.std::__1::unique_ptr.27", %"class.std::__1::unique_ptr.27"* %120, i64 0, i32 0, i32 0, i32 0
  %122 = load %class.SkSwizzler*, %class.SkSwizzler** %121, align 8
  %123 = bitcast %"class.std::__1::unique_ptr.27"* %120 to i64*
  store i64 %119, i64* %123, align 8
  %124 = icmp eq %class.SkSwizzler* %122, null
  br i1 %124, label %130, label %125

125:                                              ; preds = %117
  %126 = bitcast %class.SkSwizzler* %122 to void (%class.SkSwizzler*)***
  %127 = load void (%class.SkSwizzler*)**, void (%class.SkSwizzler*)*** %126, align 8
  %128 = getelementptr inbounds void (%class.SkSwizzler*)*, void (%class.SkSwizzler*)** %127, i64 2
  %129 = load void (%class.SkSwizzler*)*, void (%class.SkSwizzler*)** %128, align 8
  call void %129(%class.SkSwizzler* nonnull %122) #10
  br label %130

130:                                              ; preds = %125, %117
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %67) #10
  %131 = load %class.SkColorSpace*, %class.SkColorSpace** %48, align 8
  %132 = icmp eq %class.SkColorSpace* %131, null
  br i1 %132, label %139, label %133

133:                                              ; preds = %130
  %134 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %131, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %135 = atomicrmw add i32* %134, i32 -1 acq_rel
  %136 = icmp eq i32 %135, 1
  br i1 %136, label %137, label %139

137:                                              ; preds = %133
  %138 = bitcast %class.SkColorSpace* %131 to i8*
  call void @_ZdlPv(i8* %138) #11
  br label %139

139:                                              ; preds = %130, %133, %137
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %47) #10
  %140 = getelementptr inbounds %struct.SkEncodedInfo, %struct.SkEncodedInfo* %4, i64 0, i32 5, i32 0, i32 0, i32 0
  %141 = load %"class.SkEncodedInfo::ICCProfile"*, %"class.SkEncodedInfo::ICCProfile"** %140, align 8
  store %"class.SkEncodedInfo::ICCProfile"* null, %"class.SkEncodedInfo::ICCProfile"** %140, align 8
  %142 = icmp eq %"class.SkEncodedInfo::ICCProfile"* %141, null
  br i1 %142, label %155, label %143

143:                                              ; preds = %139
  %144 = getelementptr inbounds %"class.SkEncodedInfo::ICCProfile", %"class.SkEncodedInfo::ICCProfile"* %141, i64 0, i32 1, i32 0
  %145 = load %class.SkData*, %class.SkData** %144, align 8
  %146 = icmp eq %class.SkData* %145, null
  br i1 %146, label %153, label %147

147:                                              ; preds = %143
  %148 = getelementptr inbounds %class.SkData, %class.SkData* %145, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %149 = atomicrmw add i32* %148, i32 -1 acq_rel
  %150 = icmp eq i32 %149, 1
  br i1 %150, label %151, label %153

151:                                              ; preds = %147
  call void @_ZN6SkDataD1Ev(%class.SkData* nonnull %145) #10
  %152 = bitcast %class.SkData* %145 to i8*
  call void @_ZN6SkDatadlEPv(i8* nonnull %152) #10
  br label %153

153:                                              ; preds = %151, %147, %143
  %154 = bitcast %"class.SkEncodedInfo::ICCProfile"* %141 to i8*
  call void @_ZdlPv(i8* %154) #11
  br label %155

155:                                              ; preds = %139, %153
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %7) #10
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

declare %class.SkSwizzler* @_ZN10SkSwizzler4MakeERK13SkEncodedInfoPKjRK11SkImageInfoRKN7SkCodec7OptionsEPK7SkIRect(%struct.SkEncodedInfo* dereferenceable(32), i32*, %struct.SkImageInfo* dereferenceable(24), %"struct.SkCodec::Options"* dereferenceable(24), %struct.SkIRect*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN18SkBmpStandardCodec17onPrepareToDecodeERK11SkImageInfoRKN7SkCodec7OptionsE(%class.SkBmpStandardCodec*, %struct.SkImageInfo* nocapture readonly dereferenceable(24), %"struct.SkCodec::Options"* nocapture readonly dereferenceable(24)) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %class.SkBmpStandardCodec, %class.SkBmpStandardCodec* %0, i64 0, i32 0, i32 0, i32 0, i32 10
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %5, 2
  br i1 %6, label %7, label %22

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %1, i64 0, i32 1, i32 0
  %9 = load i32, i32* %8, align 4
  %10 = sext i32 %9 to i64
  %11 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %10, i64 4) #10
  %12 = extractvalue { i64, i1 } %11, 1
  %13 = extractvalue { i64, i1 } %11, 0
  %14 = select i1 %12, i64 -1, i64 %13
  %15 = tail call i8* @_Znam(i64 %14) #11
  %16 = getelementptr inbounds %class.SkBmpStandardCodec, %class.SkBmpStandardCodec* %0, i64 0, i32 0, i32 0, i32 4, i32 0, i32 0, i32 0
  %17 = load i32*, i32** %16, align 8
  %18 = bitcast i32** %16 to i8**
  store i8* %15, i8** %18, align 8
  %19 = icmp eq i32* %17, null
  br i1 %19, label %22, label %20

20:                                               ; preds = %7
  %21 = bitcast i32* %17 to i8*
  tail call void @_ZdaPv(i8* %21) #11
  br label %22

22:                                               ; preds = %20, %7, %3
  %23 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %1, i64 0, i32 0, i32 1
  %24 = load i32, i32* %23, align 8
  %25 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %1, i64 0, i32 0, i32 2
  %26 = load i32, i32* %25, align 4
  %27 = tail call zeroext i1 @_ZN18SkBmpStandardCodec16createColorTableE11SkColorType11SkAlphaType(%class.SkBmpStandardCodec* %0, i32 %24, i32 %26)
  br i1 %27, label %28, label %29

28:                                               ; preds = %22
  tail call void @_ZN18SkBmpStandardCodec18initializeSwizzlerERK11SkImageInfoRKN7SkCodec7OptionsE(%class.SkBmpStandardCodec* %0, %struct.SkImageInfo* dereferenceable(24) %1, %"struct.SkCodec::Options"* dereferenceable(24) %2)
  br label %29

29:                                               ; preds = %22, %28
  %30 = phi i32 [ 0, %28 ], [ 6, %22 ]
  ret i32 %30
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN18SkBmpStandardCodec10decodeRowsERK11SkImageInfoPvmRKN7SkCodec7OptionsE(%class.SkBmpStandardCodec*, %struct.SkImageInfo* nocapture readonly dereferenceable(24), i8*, i64, %"struct.SkCodec::Options"* nocapture readnone dereferenceable(24)) unnamed_addr #0 align 2 {
  %6 = alloca %class.SkMemoryStream, align 8
  %7 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %1, i64 0, i32 1, i32 1
  %8 = load i32, i32* %7, align 4
  %9 = icmp sgt i32 %8, 0
  br i1 %9, label %10, label %53

10:                                               ; preds = %5
  %11 = bitcast %class.SkBmpStandardCodec* %0 to %class.SkCodec*
  %12 = getelementptr inbounds %class.SkBmpStandardCodec, %class.SkBmpStandardCodec* %0, i64 0, i32 0, i32 0, i32 0, i32 4, i32 0, i32 0, i32 0
  %13 = getelementptr inbounds %class.SkBmpStandardCodec, %class.SkBmpStandardCodec* %0, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %14 = getelementptr inbounds %class.SkBmpStandardCodec, %class.SkBmpStandardCodec* %0, i64 0, i32 0, i32 0, i32 3
  %15 = getelementptr inbounds %class.SkBmpStandardCodec, %class.SkBmpStandardCodec* %0, i64 0, i32 0, i32 0
  %16 = getelementptr inbounds %class.SkBmpStandardCodec, %class.SkBmpStandardCodec* %0, i64 0, i32 0, i32 0, i32 0, i32 10
  %17 = getelementptr inbounds %class.SkBmpStandardCodec, %class.SkBmpStandardCodec* %0, i64 0, i32 5, i32 0, i32 0, i32 0
  %18 = getelementptr inbounds %class.SkBmpStandardCodec, %class.SkBmpStandardCodec* %0, i64 0, i32 0, i32 0, i32 4, i32 0, i32 0, i32 0
  %19 = bitcast i32** %18 to i8**
  br label %20

20:                                               ; preds = %50, %10
  %21 = phi i32 [ 0, %10 ], [ %51, %50 ]
  %22 = load %class.SkStream*, %class.SkStream** %12, align 8
  %23 = load i8*, i8** %13, align 8
  %24 = load i64, i64* %14, align 8
  %25 = bitcast %class.SkStream* %22 to i64 (%class.SkStream*, i8*, i64)***
  %26 = load i64 (%class.SkStream*, i8*, i64)**, i64 (%class.SkStream*, i8*, i64)*** %25, align 8
  %27 = getelementptr inbounds i64 (%class.SkStream*, i8*, i64)*, i64 (%class.SkStream*, i8*, i64)** %26, i64 2
  %28 = load i64 (%class.SkStream*, i8*, i64)*, i64 (%class.SkStream*, i8*, i64)** %27, align 8
  %29 = tail call i64 %28(%class.SkStream* %22, i8* %23, i64 %24) #10
  %30 = load i64, i64* %14, align 8
  %31 = icmp eq i64 %29, %30
  br i1 %31, label %32, label %118

32:                                               ; preds = %20
  %33 = load i32, i32* %7, align 4
  %34 = tail call i32 @_ZNK10SkBmpCodec9getDstRowEii(%class.SkBmpCodec* %15, i32 %21, i32 %33) #10
  %35 = zext i32 %34 to i64
  %36 = mul i64 %35, %3
  %37 = getelementptr inbounds i8, i8* %2, i64 %36
  %38 = load i32, i32* %16, align 8
  %39 = icmp eq i32 %38, 2
  %40 = load %class.SkSwizzler*, %class.SkSwizzler** %17, align 8
  br i1 %39, label %41, label %48

41:                                               ; preds = %32
  %42 = load i8*, i8** %19, align 8
  %43 = load i8*, i8** %13, align 8
  tail call void @_ZN10SkSwizzler7swizzleEPvPKh(%class.SkSwizzler* %40, i8* %42, i8* %43) #10
  %44 = load i8*, i8** %19, align 8
  %45 = load %class.SkSwizzler*, %class.SkSwizzler** %17, align 8
  %46 = getelementptr inbounds %class.SkSwizzler, %class.SkSwizzler* %45, i64 0, i32 12
  %47 = load i32, i32* %46, align 8
  tail call void @_ZNK7SkCodec15applyColorXformEPvPKvi(%class.SkCodec* %11, i8* %37, i8* %44, i32 %47) #10
  br label %50

48:                                               ; preds = %32
  %49 = load i8*, i8** %13, align 8
  tail call void @_ZN10SkSwizzler7swizzleEPvPKh(%class.SkSwizzler* %40, i8* %37, i8* %49) #10
  br label %50

50:                                               ; preds = %48, %41
  %51 = add nuw nsw i32 %21, 1
  %52 = icmp eq i32 %51, %8
  br i1 %52, label %53, label %20

53:                                               ; preds = %50, %5
  %54 = getelementptr inbounds %class.SkBmpStandardCodec, %class.SkBmpStandardCodec* %0, i64 0, i32 7
  %55 = load i8, i8* %54, align 1, !range !2
  %56 = icmp eq i8 %55, 0
  br i1 %56, label %118, label %57

57:                                               ; preds = %53
  %58 = getelementptr inbounds %class.SkBmpStandardCodec, %class.SkBmpStandardCodec* %0, i64 0, i32 6
  %59 = load i8, i8* %58, align 8, !range !2
  %60 = icmp eq i8 %59, 0
  br i1 %60, label %118, label %61

61:                                               ; preds = %57
  %62 = getelementptr inbounds %class.SkBmpStandardCodec, %class.SkBmpStandardCodec* %0, i64 0, i32 0, i32 0, i32 0, i32 14
  %63 = load i32, i32* %62, align 4
  %64 = icmp slt i32 %63, 0
  %65 = getelementptr inbounds %class.SkBmpStandardCodec, %class.SkBmpStandardCodec* %0, i64 0, i32 0, i32 0, i32 0, i32 4, i32 0, i32 0, i32 0
  %66 = load %class.SkStream*, %class.SkStream** %65, align 8
  br i1 %64, label %67, label %68

67:                                               ; preds = %61
  tail call void @_ZN18SkBmpStandardCodec13decodeIcoMaskEP8SkStreamRK11SkImageInfoPvm(%class.SkBmpStandardCodec* %0, %class.SkStream* %66, %struct.SkImageInfo* dereferenceable(24) %1, i8* %2, i64 %3)
  br label %118

68:                                               ; preds = %61
  %69 = bitcast %class.SkStream* %66 to i8* (%class.SkStream*)***
  %70 = load i8* (%class.SkStream*)**, i8* (%class.SkStream*)*** %69, align 8
  %71 = getelementptr inbounds i8* (%class.SkStream*)*, i8* (%class.SkStream*)** %70, i64 12
  %72 = load i8* (%class.SkStream*)*, i8* (%class.SkStream*)** %71, align 8
  %73 = tail call i8* %72(%class.SkStream* %66) #10
  %74 = load %class.SkStream*, %class.SkStream** %65, align 8
  %75 = bitcast %class.SkStream* %74 to i64 (%class.SkStream*)***
  %76 = load i64 (%class.SkStream*)**, i64 (%class.SkStream*)*** %75, align 8
  %77 = getelementptr inbounds i64 (%class.SkStream*)*, i64 (%class.SkStream*)** %76, i64 11
  %78 = load i64 (%class.SkStream*)*, i64 (%class.SkStream*)** %77, align 8
  %79 = tail call i64 %78(%class.SkStream* %74) #10
  %80 = load %class.SkStream*, %class.SkStream** %65, align 8
  %81 = bitcast %class.SkStream* %80 to i64 (%class.SkStream*)***
  %82 = load i64 (%class.SkStream*)**, i64 (%class.SkStream*)*** %81, align 8
  %83 = getelementptr inbounds i64 (%class.SkStream*)*, i64 (%class.SkStream*)** %82, i64 7
  %84 = load i64 (%class.SkStream*)*, i64 (%class.SkStream*)** %83, align 8
  %85 = tail call i64 %84(%class.SkStream* %80) #10
  %86 = getelementptr inbounds %class.SkBmpStandardCodec, %class.SkBmpStandardCodec* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 1
  %87 = load i32, i32* %86, align 4
  %88 = add i32 %63, %8
  %89 = sub i32 %87, %88
  %90 = sext i32 %89 to i64
  %91 = getelementptr inbounds %class.SkBmpStandardCodec, %class.SkBmpStandardCodec* %0, i64 0, i32 0, i32 0, i32 3
  %92 = load i64, i64* %91, align 8
  %93 = mul i64 %92, %90
  %94 = sext i32 %63 to i64
  %95 = getelementptr inbounds %class.SkBmpStandardCodec, %class.SkBmpStandardCodec* %0, i64 0, i32 8
  %96 = load i64, i64* %95, align 8
  %97 = mul i64 %96, %94
  %98 = add i64 %97, %85
  %99 = add i64 %98, %93
  %100 = icmp ugt i64 %79, %99
  br i1 %100, label %101, label %118

101:                                              ; preds = %68
  %102 = getelementptr inbounds i8, i8* %73, i64 %99
  %103 = sub i64 %79, %99
  %104 = bitcast %class.SkMemoryStream* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %104) #10
  %105 = getelementptr inbounds %class.SkMemoryStream, %class.SkMemoryStream* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %106 = getelementptr inbounds %class.SkMemoryStream, %class.SkMemoryStream* %6, i64 0, i32 1, i32 0
  %107 = bitcast %class.SkMemoryStream* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %107, i8 -86, i64 24, i1 false)
  call void @_ZN14SkMemoryStreamC1EPKvmb(%class.SkMemoryStream* nonnull %6, i8* %102, i64 %103, i1 zeroext false) #10
  %108 = getelementptr inbounds %class.SkMemoryStream, %class.SkMemoryStream* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  call void @_ZN18SkBmpStandardCodec13decodeIcoMaskEP8SkStreamRK11SkImageInfoPvm(%class.SkBmpStandardCodec* %0, %class.SkStream* nonnull %108, %struct.SkImageInfo* dereferenceable(24) %1, i8* %2, i64 %3)
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [18 x i8*] }, { [18 x i8*] }* @_ZTV14SkMemoryStream, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %105, align 8
  %109 = load %class.SkData*, %class.SkData** %106, align 8
  %110 = icmp eq %class.SkData* %109, null
  br i1 %110, label %117, label %111

111:                                              ; preds = %101
  %112 = getelementptr inbounds %class.SkData, %class.SkData* %109, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %113 = atomicrmw add i32* %112, i32 -1 acq_rel
  %114 = icmp eq i32 %113, 1
  br i1 %114, label %115, label %117

115:                                              ; preds = %111
  call void @_ZN6SkDataD1Ev(%class.SkData* nonnull %109) #10
  %116 = bitcast %class.SkData* %109 to i8*
  call void @_ZN6SkDatadlEPv(i8* nonnull %116) #10
  br label %117

117:                                              ; preds = %115, %111, %101
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %104) #10
  br label %118

118:                                              ; preds = %20, %68, %67, %53, %57, %117
  %119 = phi i32 [ %8, %117 ], [ %8, %57 ], [ %8, %53 ], [ %8, %67 ], [ %8, %68 ], [ %21, %20 ]
  ret i32 %119
}

declare i32 @_ZNK10SkBmpCodec9getDstRowEii(%class.SkBmpCodec*, i32, i32) local_unnamed_addr #1

declare void @_ZN10SkSwizzler7swizzleEPvPKh(%class.SkSwizzler*, i8*, i8*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN18SkBmpStandardCodec13decodeIcoMaskEP8SkStreamRK11SkImageInfoPvm(%class.SkBmpStandardCodec*, %class.SkStream*, %struct.SkImageInfo* nocapture readonly dereferenceable(24), i8* nocapture, i64) local_unnamed_addr #0 align 2 {
  %6 = getelementptr inbounds %class.SkBmpStandardCodec, %class.SkBmpStandardCodec* %0, i64 0, i32 5, i32 0, i32 0, i32 0
  %7 = load %class.SkSwizzler*, %class.SkSwizzler** %6, align 8
  %8 = getelementptr inbounds %class.SkSwizzler, %class.SkSwizzler* %7, i64 0, i32 14
  %9 = load i32, i32* %8, align 8
  %10 = getelementptr inbounds %class.SkBmpStandardCodec, %class.SkBmpStandardCodec* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %11 = load i32, i32* %10, align 8
  %12 = icmp sgt i32 %9, %11
  br i1 %12, label %15, label %13

13:                                               ; preds = %5
  %14 = sdiv i32 %11, %9
  br label %15

15:                                               ; preds = %5, %13
  %16 = phi i32 [ %14, %13 ], [ 1, %5 ]
  %17 = sdiv i32 %9, 2
  %18 = getelementptr inbounds %class.SkBmpStandardCodec, %class.SkBmpStandardCodec* %0, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %19 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %2, i64 0, i32 1, i32 1
  %20 = load i32, i32* %19, align 4
  %21 = icmp sgt i32 %20, 0
  br i1 %21, label %22, label %98

22:                                               ; preds = %15
  %23 = getelementptr inbounds %class.SkBmpStandardCodec, %class.SkBmpStandardCodec* %0, i64 0, i32 8
  %24 = bitcast %class.SkStream* %1 to i64 (%class.SkStream*, i8*, i64)***
  %25 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %2, i64 0, i32 0, i32 0, i32 0
  %26 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %2, i64 0, i32 0, i32 1
  %27 = bitcast i32* %26 to i64*
  %28 = getelementptr inbounds %class.SkBmpStandardCodec, %class.SkBmpStandardCodec* %0, i64 0, i32 0, i32 0
  %29 = icmp sgt i32 %16, 0
  %30 = zext i32 %16 to i64
  br label %31

31:                                               ; preds = %22, %66
  %32 = phi i32 [ 0, %22 ], [ %67, %66 ]
  %33 = load i8*, i8** %18, align 8
  %34 = load i64, i64* %23, align 8
  %35 = load i64 (%class.SkStream*, i8*, i64)**, i64 (%class.SkStream*, i8*, i64)*** %24, align 8
  %36 = getelementptr inbounds i64 (%class.SkStream*, i8*, i64)*, i64 (%class.SkStream*, i8*, i64)** %35, i64 2
  %37 = load i64 (%class.SkStream*, i8*, i64)*, i64 (%class.SkStream*, i8*, i64)** %36, align 8
  %38 = tail call i64 %37(%class.SkStream* %1, i8* %33, i64 %34) #10
  %39 = load i64, i64* %23, align 8
  %40 = icmp eq i64 %38, %39
  br i1 %40, label %41, label %98

41:                                               ; preds = %31
  %42 = load %class.SkColorSpace*, %class.SkColorSpace** %25, align 8
  %43 = icmp eq %class.SkColorSpace* %42, null
  br i1 %43, label %47, label %44

44:                                               ; preds = %41
  %45 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %42, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %46 = atomicrmw add i32* %45, i32 1 monotonic
  br label %47

47:                                               ; preds = %41, %44
  %48 = load i64, i64* %27, align 8
  %49 = load i32, i32* %19, align 4
  %50 = tail call i32 @_ZNK10SkBmpCodec9getDstRowEii(%class.SkBmpCodec* %28, i32 %32, i32 %49) #10
  %51 = sext i32 %50 to i64
  %52 = mul i64 %51, %4
  %53 = getelementptr inbounds i8, i8* %3, i64 %52
  %54 = bitcast i8* %53 to i32*
  br i1 %29, label %55, label %59

55:                                               ; preds = %47
  %56 = trunc i64 %48 to i32
  %57 = icmp eq i32 %56, 13
  %58 = bitcast i8* %53 to i64*
  br label %70

59:                                               ; preds = %94, %47
  br i1 %43, label %66, label %60

60:                                               ; preds = %59
  %61 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %42, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %62 = atomicrmw add i32* %61, i32 -1 acq_rel
  %63 = icmp eq i32 %62, 1
  br i1 %63, label %64, label %66

64:                                               ; preds = %60
  %65 = bitcast %class.SkColorSpace* %42 to i8*
  tail call void @_ZdlPv(i8* %65) #11
  br label %66

66:                                               ; preds = %59, %60, %64
  %67 = add nuw nsw i32 %32, 1
  %68 = load i32, i32* %19, align 4
  %69 = icmp slt i32 %67, %68
  br i1 %69, label %31, label %98

70:                                               ; preds = %94, %55
  %71 = phi i64 [ 0, %55 ], [ %96, %94 ]
  %72 = phi i32 [ %17, %55 ], [ %95, %94 ]
  %73 = sdiv i32 %72, 8
  %74 = srem i32 %72, 8
  %75 = sub nsw i32 7, %74
  %76 = load i8*, i8** %18, align 8
  %77 = sext i32 %73 to i64
  %78 = getelementptr inbounds i8, i8* %76, i64 %77
  %79 = load i8, i8* %78, align 1
  %80 = zext i8 %79 to i32
  %81 = lshr i32 %80, %75
  %82 = and i32 %81, 1
  br i1 %57, label %83, label %89

83:                                               ; preds = %70
  %84 = zext i32 %82 to i64
  %85 = add nsw i64 %84, -1
  %86 = getelementptr inbounds i64, i64* %58, i64 %71
  %87 = load i64, i64* %86, align 8
  %88 = and i64 %87, %85
  store i64 %88, i64* %86, align 8
  br label %94

89:                                               ; preds = %70
  %90 = getelementptr inbounds i32, i32* %54, i64 %71
  %91 = load i32, i32* %90, align 4
  %92 = add nsw i32 %82, -1
  %93 = and i32 %91, %92
  store i32 %93, i32* %90, align 4
  br label %94

94:                                               ; preds = %83, %89
  %95 = add nsw i32 %72, %9
  %96 = add nuw nsw i64 %71, 1
  %97 = icmp eq i64 %96, %30
  br i1 %97, label %59, label %70

98:                                               ; preds = %31, %66, %15
  ret void
}

declare void @_ZN14SkMemoryStreamC1EPKvmb(%class.SkMemoryStream*, i8*, i64, i1 zeroext) unnamed_addr #1

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN18SkBmpStandardCodecD2Ev(%class.SkBmpStandardCodec*) unnamed_addr #5 comdat align 2 {
  %2 = getelementptr inbounds %class.SkBmpStandardCodec, %class.SkBmpStandardCodec* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [30 x i8*] }, { [30 x i8*] }* @_ZTV18SkBmpStandardCodec, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.SkBmpStandardCodec, %class.SkBmpStandardCodec* %0, i64 0, i32 5, i32 0, i32 0, i32 0
  %4 = load %class.SkSwizzler*, %class.SkSwizzler** %3, align 8
  store %class.SkSwizzler* null, %class.SkSwizzler** %3, align 8
  %5 = icmp eq %class.SkSwizzler* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = bitcast %class.SkSwizzler* %4 to void (%class.SkSwizzler*)***
  %8 = load void (%class.SkSwizzler*)**, void (%class.SkSwizzler*)*** %7, align 8
  %9 = getelementptr inbounds void (%class.SkSwizzler*)*, void (%class.SkSwizzler*)** %8, i64 2
  %10 = load void (%class.SkSwizzler*)*, void (%class.SkSwizzler*)** %9, align 8
  tail call void %10(%class.SkSwizzler* nonnull %4) #10
  br label %11

11:                                               ; preds = %1, %6
  %12 = getelementptr inbounds %class.SkBmpStandardCodec, %class.SkBmpStandardCodec* %0, i64 0, i32 1, i32 0
  %13 = load %class.SkColorTable*, %class.SkColorTable** %12, align 8
  %14 = icmp eq %class.SkColorTable* %13, null
  br i1 %14, label %25, label %15

15:                                               ; preds = %11
  %16 = getelementptr inbounds %class.SkColorTable, %class.SkColorTable* %13, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %17 = atomicrmw add i32* %16, i32 -1 acq_rel
  %18 = icmp eq i32 %17, 1
  br i1 %18, label %19, label %25

19:                                               ; preds = %15
  %20 = bitcast %class.SkColorTable* %13 to %class.SkRefCntBase*
  %21 = bitcast %class.SkColorTable* %13 to void (%class.SkRefCntBase*)***
  %22 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %21, align 8
  %23 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %22, i64 2
  %24 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %23, align 8
  tail call void %24(%class.SkRefCntBase* nonnull %20) #10
  br label %25

25:                                               ; preds = %11, %15, %19
  %26 = getelementptr inbounds %class.SkBmpStandardCodec, %class.SkBmpStandardCodec* %0, i64 0, i32 0
  tail call void @_ZN14SkBmpBaseCodecD2Ev(%class.SkBmpBaseCodec* %26) #10
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN18SkBmpStandardCodecD0Ev(%class.SkBmpStandardCodec*) unnamed_addr #5 comdat align 2 {
  %2 = getelementptr inbounds %class.SkBmpStandardCodec, %class.SkBmpStandardCodec* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [30 x i8*] }, { [30 x i8*] }* @_ZTV18SkBmpStandardCodec, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.SkBmpStandardCodec, %class.SkBmpStandardCodec* %0, i64 0, i32 5, i32 0, i32 0, i32 0
  %4 = load %class.SkSwizzler*, %class.SkSwizzler** %3, align 8
  store %class.SkSwizzler* null, %class.SkSwizzler** %3, align 8
  %5 = icmp eq %class.SkSwizzler* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = bitcast %class.SkSwizzler* %4 to void (%class.SkSwizzler*)***
  %8 = load void (%class.SkSwizzler*)**, void (%class.SkSwizzler*)*** %7, align 8
  %9 = getelementptr inbounds void (%class.SkSwizzler*)*, void (%class.SkSwizzler*)** %8, i64 2
  %10 = load void (%class.SkSwizzler*)*, void (%class.SkSwizzler*)** %9, align 8
  tail call void %10(%class.SkSwizzler* nonnull %4) #10
  br label %11

11:                                               ; preds = %6, %1
  %12 = getelementptr inbounds %class.SkBmpStandardCodec, %class.SkBmpStandardCodec* %0, i64 0, i32 1, i32 0
  %13 = load %class.SkColorTable*, %class.SkColorTable** %12, align 8
  %14 = icmp eq %class.SkColorTable* %13, null
  br i1 %14, label %25, label %15

15:                                               ; preds = %11
  %16 = getelementptr inbounds %class.SkColorTable, %class.SkColorTable* %13, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %17 = atomicrmw add i32* %16, i32 -1 acq_rel
  %18 = icmp eq i32 %17, 1
  br i1 %18, label %19, label %25

19:                                               ; preds = %15
  %20 = bitcast %class.SkColorTable* %13 to %class.SkRefCntBase*
  %21 = bitcast %class.SkColorTable* %13 to void (%class.SkRefCntBase*)***
  %22 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %21, align 8
  %23 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %22, i64 2
  %24 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %23, align 8
  tail call void %24(%class.SkRefCntBase* nonnull %20) #10
  br label %25

25:                                               ; preds = %11, %15, %19
  %26 = getelementptr inbounds %class.SkBmpStandardCodec, %class.SkBmpStandardCodec* %0, i64 0, i32 0
  tail call void @_ZN14SkBmpBaseCodecD2Ev(%class.SkBmpBaseCodec* %26) #10
  %27 = bitcast %class.SkBmpStandardCodec* %0 to i8*
  tail call void @_ZdlPv(i8* %27) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZNK7SkCodec21onGetScaledDimensionsEf(%class.SkCodec*, float) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.SkCodec, %class.SkCodec* %0, i64 0, i32 1, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = getelementptr inbounds %class.SkCodec, %class.SkCodec* %0, i64 0, i32 1, i32 1
  %6 = load i32, i32* %5, align 4
  %7 = zext i32 %6 to i64
  %8 = shl nuw i64 %7, 32
  %9 = zext i32 %4 to i64
  %10 = or i64 %8, %9
  ret i64 %10
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN7SkCodec21onDimensionsSupportedERK7SkISize(%class.SkCodec*, %struct.SkISize* dereferenceable(8)) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK10SkBmpCodec18onGetEncodedFormatEv(%class.SkBmpCodec*) unnamed_addr #0 comdat align 2 {
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK7SkCodec15onQueryYUVAInfoERKN16SkYUVAPixmapInfo18SupportedDataTypesEPS0_(%class.SkCodec*, %"class.SkYUVAPixmapInfo::SupportedDataTypes"* dereferenceable(8), %class.SkYUVAPixmapInfo*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN7SkCodec15onGetYUVAPlanesERK13SkYUVAPixmaps(%class.SkCodec*, %class.SkYUVAPixmaps* dereferenceable(208)) unnamed_addr #0 comdat align 2 {
  ret i32 9
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK7SkCodec16onGetValidSubsetEP7SkIRect(%class.SkCodec*, %struct.SkIRect*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

declare zeroext i1 @_ZN10SkBmpCodec8onRewindEv(%class.SkBmpCodec*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK10SkBmpCodec18onGetScanlineOrderEv(%class.SkBmpCodec*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %class.SkBmpCodec, %class.SkBmpCodec* %0, i64 0, i32 2
  %3 = load i32, i32* %2, align 4
  ret i32 %3
}

declare i32 @_ZNK7SkCodec16onOutputScanlineEi(%class.SkCodec*, i32) unnamed_addr #1

declare zeroext i1 @_ZN7SkCodec19conversionSupportedERK11SkImageInfobb(%class.SkCodec*, %struct.SkImageInfo* dereferenceable(24), i1 zeroext, i1 zeroext) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK7SkCodec14usesColorXformEv(%class.SkCodec*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN7SkCodec15onGetFrameCountEv(%class.SkCodec*) unnamed_addr #0 comdat align 2 {
  ret i32 1
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK7SkCodec14onGetFrameInfoEiPNS_9FrameInfoE(%class.SkCodec*, i32, %"struct.SkCodec::FrameInfo"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN7SkCodec20onGetRepetitionCountEv(%class.SkCodec*) unnamed_addr #0 comdat align 2 {
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %class.SkFrameHolder* @_ZNK7SkCodec14getFrameHolderEv(%class.SkCodec*) unnamed_addr #0 comdat align 2 {
  ret %class.SkFrameHolder* null
}

declare i32 @_ZN10SkBmpCodec21onStartScanlineDecodeERK11SkImageInfoRKN7SkCodec7OptionsE(%class.SkBmpCodec*, %struct.SkImageInfo* dereferenceable(24), %"struct.SkCodec::Options"* dereferenceable(24)) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN7SkCodec24onStartIncrementalDecodeERK11SkImageInfoPvmRKNS_7OptionsE(%class.SkCodec*, %struct.SkImageInfo* dereferenceable(24), i8*, i64, %"struct.SkCodec::Options"* dereferenceable(24)) unnamed_addr #0 comdat align 2 {
  ret i32 9
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN7SkCodec19onIncrementalDecodeEPi(%class.SkCodec*, i32*) unnamed_addr #0 comdat align 2 {
  ret i32 9
}

declare zeroext i1 @_ZN10SkBmpCodec15onSkipScanlinesEi(%class.SkBmpCodec*, i32) unnamed_addr #1

declare i32 @_ZN10SkBmpCodec14onGetScanlinesEPvim(%class.SkBmpCodec*, i8*, i32, i64) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %class.SkSampler* @_ZN18SkBmpStandardCodec10getSamplerEb(%class.SkBmpStandardCodec*, i1 zeroext) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.SkBmpStandardCodec, %class.SkBmpStandardCodec* %0, i64 0, i32 5, i32 0, i32 0, i32 0
  %4 = bitcast %class.SkSwizzler** %3 to %class.SkSampler**
  %5 = load %class.SkSampler*, %class.SkSampler** %4, align 8
  ret %class.SkSampler* %5
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK18SkBmpStandardCodec7onInIcoEv(%class.SkBmpStandardCodec*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %class.SkBmpStandardCodec, %class.SkBmpStandardCodec* %0, i64 0, i32 7
  %3 = load i8, i8* %2, align 1, !range !2
  %4 = icmp ne i8 %3, 0
  ret i1 %4
}

declare zeroext i1 @_ZN10SkBmpCodec8skipRowsEi(%class.SkBmpCodec*, i32) unnamed_addr #1

; Function Attrs: inlinehint norecurse nounwind readnone ssp uwtable
define internal i32 @_ZL24premultiply_argb_as_rgbajjjj(i32, i32, i32, i32) unnamed_addr #6 {
  %5 = icmp eq i32 %0, 255
  br i1 %5, label %22, label %6

6:                                                ; preds = %4
  %7 = mul i32 %1, %0
  %8 = add i32 %7, 128
  %9 = lshr i32 %8, 8
  %10 = add i32 %9, %8
  %11 = lshr i32 %10, 8
  %12 = mul i32 %2, %0
  %13 = add i32 %12, 128
  %14 = lshr i32 %13, 8
  %15 = add i32 %14, %13
  %16 = lshr i32 %15, 8
  %17 = mul i32 %3, %0
  %18 = add i32 %17, 128
  %19 = lshr i32 %18, 8
  %20 = add i32 %19, %18
  %21 = lshr i32 %20, 8
  br label %22

22:                                               ; preds = %4, %6
  %23 = phi i32 [ %11, %6 ], [ %1, %4 ]
  %24 = phi i32 [ %16, %6 ], [ %2, %4 ]
  %25 = phi i32 [ %21, %6 ], [ %3, %4 ]
  %26 = shl i32 %0, 24
  %27 = or i32 %23, %26
  %28 = shl i32 %24, 8
  %29 = or i32 %27, %28
  %30 = shl i32 %25, 16
  %31 = or i32 %29, %30
  ret i32 %31
}

; Function Attrs: inlinehint norecurse nounwind readnone ssp uwtable
define internal i32 @_ZL24premultiply_argb_as_bgrajjjj(i32, i32, i32, i32) unnamed_addr #6 {
  %5 = icmp eq i32 %0, 255
  br i1 %5, label %22, label %6

6:                                                ; preds = %4
  %7 = mul i32 %1, %0
  %8 = add i32 %7, 128
  %9 = lshr i32 %8, 8
  %10 = add i32 %9, %8
  %11 = lshr i32 %10, 8
  %12 = mul i32 %2, %0
  %13 = add i32 %12, 128
  %14 = lshr i32 %13, 8
  %15 = add i32 %14, %13
  %16 = lshr i32 %15, 8
  %17 = mul i32 %3, %0
  %18 = add i32 %17, 128
  %19 = lshr i32 %18, 8
  %20 = add i32 %19, %18
  %21 = lshr i32 %20, 8
  br label %22

22:                                               ; preds = %4, %6
  %23 = phi i32 [ %11, %6 ], [ %1, %4 ]
  %24 = phi i32 [ %16, %6 ], [ %2, %4 ]
  %25 = phi i32 [ %21, %6 ], [ %3, %4 ]
  %26 = shl i32 %0, 24
  %27 = shl i32 %23, 16
  %28 = or i32 %27, %26
  %29 = shl i32 %24, 8
  %30 = or i32 %28, %29
  %31 = or i32 %30, %25
  ret i32 %31
}

; Function Attrs: inlinehint norecurse nounwind readnone ssp uwtable
define internal i32 @_ZL18SkPackARGB_as_RGBAjjjj(i32, i32, i32, i32) unnamed_addr #6 {
  %5 = shl i32 %0, 24
  %6 = or i32 %5, %1
  %7 = shl i32 %2, 8
  %8 = or i32 %6, %7
  %9 = shl i32 %3, 16
  %10 = or i32 %8, %9
  ret i32 %10
}

; Function Attrs: inlinehint norecurse nounwind readnone ssp uwtable
define internal i32 @_ZL18SkPackARGB_as_BGRAjjjj(i32, i32, i32, i32) unnamed_addr #6 {
  %5 = shl i32 %0, 24
  %6 = shl i32 %1, 16
  %7 = or i32 %6, %5
  %8 = shl i32 %2, 8
  %9 = or i32 %7, %8
  %10 = or i32 %9, %3
  ret i32 %10
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

; Function Attrs: nounwind
declare void @_ZN6SkDataD1Ev(%class.SkData*) unnamed_addr #8

; Function Attrs: nounwind
declare void @_ZN6SkDatadlEPv(i8*) local_unnamed_addr #8

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.umul.with.overflow.i64(i64, i64) #9

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #7

; Function Attrs: nounwind
declare void @_ZN14SkBmpBaseCodecD2Ev(%class.SkBmpBaseCodec*) unnamed_addr #8

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { inlinehint norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind readnone speculatable }
attributes #10 = { nounwind }
attributes #11 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = distinct !{!3, !4}
!4 = !{!"llvm.loop.isvectorized", i32 1}
!5 = distinct !{!5, !6}
!6 = !{!"llvm.loop.unroll.disable"}
!7 = !{i32 (i32, i32, i32, i32)* @_ZL18SkPackARGB_as_BGRAjjjj, i32 (i32, i32, i32, i32)* @_ZL18SkPackARGB_as_RGBAjjjj, i32 (i32, i32, i32, i32)* @_ZL24premultiply_argb_as_bgrajjjj, i32 (i32, i32, i32, i32)* @_ZL24premultiply_argb_as_rgbajjjj}
!8 = distinct !{!8, !9, !4}
!9 = !{!"llvm.loop.unroll.runtime.disable"}
!10 = !{!11, !13, !15, !17, !19, !21, !23, !25, !27}
!11 = distinct !{!11, !12, !"_ZN13SkEncodedInfo4MakeEiiNS_5ColorENS_5AlphaEiNSt3__110unique_ptrINS_10ICCProfileENS2_14default_deleteIS4_EEEE: argument 0"}
!12 = distinct !{!12, !"_ZN13SkEncodedInfo4MakeEiiNS_5ColorENS_5AlphaEiNSt3__110unique_ptrINS_10ICCProfileENS2_14default_deleteIS4_EEEE"}
!13 = distinct !{!13, !14, !"_ZN13SkEncodedInfo4MakeEiiNS_5ColorENS_5AlphaEi: argument 0"}
!14 = distinct !{!14, !"_ZN13SkEncodedInfo4MakeEiiNS_5ColorENS_5AlphaEi"}
!15 = distinct !{!15, !16, !"_ZL9make_infoN13SkEncodedInfo5ColorENS_5AlphaEi: argument 0"}
!16 = distinct !{!16, !"_ZL9make_infoN13SkEncodedInfo5ColorENS_5AlphaEi"}
!17 = distinct !{!17, !18, !"_ZN13SkEncodedInfo4MakeEiiNS_5ColorENS_5AlphaEiNSt3__110unique_ptrINS_10ICCProfileENS2_14default_deleteIS4_EEEE: argument 0"}
!18 = distinct !{!18, !"_ZN13SkEncodedInfo4MakeEiiNS_5ColorENS_5AlphaEiNSt3__110unique_ptrINS_10ICCProfileENS2_14default_deleteIS4_EEEE"}
!19 = distinct !{!19, !20, !"_ZN13SkEncodedInfo4MakeEiiNS_5ColorENS_5AlphaEi: argument 0"}
!20 = distinct !{!20, !"_ZN13SkEncodedInfo4MakeEiiNS_5ColorENS_5AlphaEi"}
!21 = distinct !{!21, !22, !"_ZL9make_infoN13SkEncodedInfo5ColorENS_5AlphaEi: argument 0"}
!22 = distinct !{!22, !"_ZL9make_infoN13SkEncodedInfo5ColorENS_5AlphaEi"}
!23 = distinct !{!23, !24, !"_ZN13SkEncodedInfo4MakeEiiNS_5ColorENS_5AlphaEiNSt3__110unique_ptrINS_10ICCProfileENS2_14default_deleteIS4_EEEE: argument 0"}
!24 = distinct !{!24, !"_ZN13SkEncodedInfo4MakeEiiNS_5ColorENS_5AlphaEiNSt3__110unique_ptrINS_10ICCProfileENS2_14default_deleteIS4_EEEE"}
!25 = distinct !{!25, !26, !"_ZN13SkEncodedInfo4MakeEiiNS_5ColorENS_5AlphaEi: argument 0"}
!26 = distinct !{!26, !"_ZN13SkEncodedInfo4MakeEiiNS_5ColorENS_5AlphaEi"}
!27 = distinct !{!27, !28, !"_ZL9make_infoN13SkEncodedInfo5ColorENS_5AlphaEi: argument 0"}
!28 = distinct !{!28, !"_ZL9make_infoN13SkEncodedInfo5ColorENS_5AlphaEi"}
!29 = !{!30}
!30 = distinct !{!30, !31, !"_ZNK18SkBmpStandardCodec12swizzlerInfoEv: argument 0"}
!31 = distinct !{!31, !"_ZNK18SkBmpStandardCodec12swizzlerInfoEv"}
!32 = !{!33, !35, !37, !30, !39, !41, !43, !45, !47, !49}
!33 = distinct !{!33, !34, !"_ZN13SkEncodedInfo4MakeEiiNS_5ColorENS_5AlphaEiNSt3__110unique_ptrINS_10ICCProfileENS2_14default_deleteIS4_EEEE: argument 0"}
!34 = distinct !{!34, !"_ZN13SkEncodedInfo4MakeEiiNS_5ColorENS_5AlphaEiNSt3__110unique_ptrINS_10ICCProfileENS2_14default_deleteIS4_EEEE"}
!35 = distinct !{!35, !36, !"_ZN13SkEncodedInfo4MakeEiiNS_5ColorENS_5AlphaEi: argument 0"}
!36 = distinct !{!36, !"_ZN13SkEncodedInfo4MakeEiiNS_5ColorENS_5AlphaEi"}
!37 = distinct !{!37, !38, !"_ZL9make_infoN13SkEncodedInfo5ColorENS_5AlphaEi: argument 0"}
!38 = distinct !{!38, !"_ZL9make_infoN13SkEncodedInfo5ColorENS_5AlphaEi"}
!39 = distinct !{!39, !40, !"_ZN13SkEncodedInfo4MakeEiiNS_5ColorENS_5AlphaEiNSt3__110unique_ptrINS_10ICCProfileENS2_14default_deleteIS4_EEEE: argument 0"}
!40 = distinct !{!40, !"_ZN13SkEncodedInfo4MakeEiiNS_5ColorENS_5AlphaEiNSt3__110unique_ptrINS_10ICCProfileENS2_14default_deleteIS4_EEEE"}
!41 = distinct !{!41, !42, !"_ZN13SkEncodedInfo4MakeEiiNS_5ColorENS_5AlphaEi: argument 0"}
!42 = distinct !{!42, !"_ZN13SkEncodedInfo4MakeEiiNS_5ColorENS_5AlphaEi"}
!43 = distinct !{!43, !44, !"_ZL9make_infoN13SkEncodedInfo5ColorENS_5AlphaEi: argument 0"}
!44 = distinct !{!44, !"_ZL9make_infoN13SkEncodedInfo5ColorENS_5AlphaEi"}
!45 = distinct !{!45, !46, !"_ZN13SkEncodedInfo4MakeEiiNS_5ColorENS_5AlphaEiNSt3__110unique_ptrINS_10ICCProfileENS2_14default_deleteIS4_EEEE: argument 0"}
!46 = distinct !{!46, !"_ZN13SkEncodedInfo4MakeEiiNS_5ColorENS_5AlphaEiNSt3__110unique_ptrINS_10ICCProfileENS2_14default_deleteIS4_EEEE"}
!47 = distinct !{!47, !48, !"_ZN13SkEncodedInfo4MakeEiiNS_5ColorENS_5AlphaEi: argument 0"}
!48 = distinct !{!48, !"_ZN13SkEncodedInfo4MakeEiiNS_5ColorENS_5AlphaEi"}
!49 = distinct !{!49, !50, !"_ZL9make_infoN13SkEncodedInfo5ColorENS_5AlphaEi: argument 0"}
!50 = distinct !{!50, !"_ZL9make_infoN13SkEncodedInfo5ColorENS_5AlphaEi"}
!51 = !{!52, !54, !56}
!52 = distinct !{!52, !53, !"_ZNK11SkColorInfo13refColorSpaceEv: argument 0"}
!53 = distinct !{!53, !"_ZNK11SkColorInfo13refColorSpaceEv"}
!54 = distinct !{!54, !55, !"_ZNK11SkColorInfo13makeColorTypeE11SkColorType: argument 0"}
!55 = distinct !{!55, !"_ZNK11SkColorInfo13makeColorTypeE11SkColorType"}
!56 = distinct !{!56, !57, !"_ZNK11SkImageInfo13makeColorTypeE11SkColorType: argument 0"}
!57 = distinct !{!57, !"_ZNK11SkImageInfo13makeColorTypeE11SkColorType"}
!58 = !{!59, !61, !63}
!59 = distinct !{!59, !60, !"_ZNK11SkColorInfo13refColorSpaceEv: argument 0"}
!60 = distinct !{!60, !"_ZNK11SkColorInfo13refColorSpaceEv"}
!61 = distinct !{!61, !62, !"_ZNK11SkColorInfo13makeAlphaTypeE11SkAlphaType: argument 0"}
!62 = distinct !{!62, !"_ZNK11SkColorInfo13makeAlphaTypeE11SkAlphaType"}
!63 = distinct !{!63, !64, !"_ZNK11SkImageInfo13makeAlphaTypeE11SkAlphaType: argument 0"}
!64 = distinct !{!64, !"_ZNK11SkImageInfo13makeAlphaTypeE11SkAlphaType"}
