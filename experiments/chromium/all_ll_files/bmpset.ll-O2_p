; ModuleID = '../../third_party/icu/source/common/bmpset.cpp'
source_filename = "../../third_party/icu/source/common/bmpset.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.icu_69::BMPSet" = type <{ i32 (...)**, [256 x i8], i8, [3 x i8], [64 x i32], [64 x i32], [18 x i32], [4 x i8], i32*, i32, [4 x i8] }>

$_ZTSN6icu_697UMemoryE = comdat any

$_ZTIN6icu_697UMemoryE = comdat any

@_ZTVN6icu_696BMPSetE = hidden unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* bitcast ({ i8*, i8*, i8* }* @_ZTIN6icu_696BMPSetE to i8*), i8* bitcast (void (%"class.icu_69::BMPSet"*)* @_ZN6icu_696BMPSetD2Ev to i8*), i8* bitcast (void (%"class.icu_69::BMPSet"*)* @_ZN6icu_696BMPSetD0Ev to i8*), i8* bitcast (i8 (%"class.icu_69::BMPSet"*, i32)* @_ZNK6icu_696BMPSet8containsEi to i8*)] }, align 8
@_ZTVN10__cxxabiv120__si_class_type_infoE = external global i8*
@_ZTSN6icu_696BMPSetE = hidden constant [17 x i8] c"N6icu_696BMPSetE\00", align 1
@_ZTVN10__cxxabiv117__class_type_infoE = external global i8*
@_ZTSN6icu_697UMemoryE = linkonce_odr hidden constant [18 x i8] c"N6icu_697UMemoryE\00", comdat, align 1
@_ZTIN6icu_697UMemoryE = linkonce_odr hidden constant { i8*, i8* } { i8* bitcast (i8** getelementptr inbounds (i8*, i8** @_ZTVN10__cxxabiv117__class_type_infoE, i64 2) to i8*), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @_ZTSN6icu_697UMemoryE, i32 0, i32 0) }, comdat, align 8
@_ZTIN6icu_696BMPSetE = hidden constant { i8*, i8*, i8* } { i8* bitcast (i8** getelementptr inbounds (i8*, i8** @_ZTVN10__cxxabiv120__si_class_type_infoE, i64 2) to i8*), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @_ZTSN6icu_696BMPSetE, i32 0, i32 0), i8* bitcast ({ i8*, i8* }* @_ZTIN6icu_697UMemoryE to i8*) }, align 8

@_ZN6icu_696BMPSetC1EPKii = hidden unnamed_addr alias void (%"class.icu_69::BMPSet"*, i32*, i32), void (%"class.icu_69::BMPSet"*, i32*, i32)* @_ZN6icu_696BMPSetC2EPKii
@_ZN6icu_696BMPSetC1ERKS0_PKii = hidden unnamed_addr alias void (%"class.icu_69::BMPSet"*, %"class.icu_69::BMPSet"*, i32*, i32), void (%"class.icu_69::BMPSet"*, %"class.icu_69::BMPSet"*, i32*, i32)* @_ZN6icu_696BMPSetC2ERKS0_PKii
@_ZN6icu_696BMPSetD1Ev = hidden unnamed_addr alias void (%"class.icu_69::BMPSet"*), void (%"class.icu_69::BMPSet"*)* @_ZN6icu_696BMPSetD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6icu_696BMPSetC2EPKii(%"class.icu_69::BMPSet"*, i32*, i32) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN6icu_696BMPSetE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %5 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 8
  store i32* %1, i32** %5, align 8
  %6 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 9
  store i32 %2, i32* %6, align 8
  %7 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 1, i64 0
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 256, i1 false)
  %8 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 4, i64 0
  %9 = add nsw i32 %2, -1
  %10 = bitcast i32* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %10, i8 0, i64 512, i1 false)
  %11 = load i32, i32* %1, align 4
  %12 = icmp sgt i32 %11, 2048
  br i1 %12, label %37, label %13

13:                                               ; preds = %3
  %14 = icmp sgt i32 %9, 0
  br i1 %14, label %15, label %37

15:                                               ; preds = %13
  %16 = add nsw i32 %2, -2
  %17 = sext i32 %16 to i64
  %18 = getelementptr inbounds i32, i32* %1, i64 %17
  %19 = load i32, i32* %18, align 4
  %20 = icmp sgt i32 %19, 2048
  br i1 %20, label %21, label %37

21:                                               ; preds = %15
  %22 = lshr i32 %9, 1
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %37, label %24

24:                                               ; preds = %21, %24
  %25 = phi i32 [ %35, %24 ], [ %22, %21 ]
  %26 = phi i32 [ %33, %24 ], [ %9, %21 ]
  %27 = phi i32 [ %32, %24 ], [ 0, %21 ]
  %28 = sext i32 %25 to i64
  %29 = getelementptr inbounds i32, i32* %1, i64 %28
  %30 = load i32, i32* %29, align 4
  %31 = icmp sgt i32 %30, 2048
  %32 = select i1 %31, i32 %27, i32 %25
  %33 = select i1 %31, i32 %25, i32 %26
  %34 = add nsw i32 %33, %32
  %35 = ashr i32 %34, 1
  %36 = icmp eq i32 %35, %32
  br i1 %36, label %37, label %24

37:                                               ; preds = %24, %3, %13, %15, %21
  %38 = phi i32 [ 0, %3 ], [ %9, %15 ], [ %9, %13 ], [ %9, %21 ], [ %33, %24 ]
  %39 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 6, i64 0
  store i32 %38, i32* %39, align 4
  br label %40

40:                                               ; preds = %85, %37
  %41 = phi i32* [ %1, %37 ], [ %86, %85 ]
  %42 = phi i32 [ %2, %37 ], [ %84, %85 ]
  %43 = phi i32 [ %38, %37 ], [ %80, %85 ]
  %44 = phi i64 [ 1, %37 ], [ %82, %85 ]
  %45 = shl i64 %44, 12
  %46 = add nsw i32 %42, -1
  %47 = sext i32 %43 to i64
  %48 = getelementptr inbounds i32, i32* %41, i64 %47
  %49 = load i32, i32* %48, align 4
  %50 = sext i32 %49 to i64
  %51 = icmp slt i64 %45, %50
  br i1 %51, label %79, label %52

52:                                               ; preds = %40
  %53 = icmp slt i32 %43, %46
  br i1 %53, label %54, label %79

54:                                               ; preds = %52
  %55 = add nsw i32 %42, -2
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds i32, i32* %41, i64 %56
  %58 = load i32, i32* %57, align 4
  %59 = sext i32 %58 to i64
  %60 = icmp slt i64 %45, %59
  br i1 %60, label %61, label %79

61:                                               ; preds = %54
  %62 = add nsw i32 %46, %43
  %63 = ashr i32 %62, 1
  %64 = icmp eq i32 %63, %43
  br i1 %64, label %79, label %65

65:                                               ; preds = %61, %65
  %66 = phi i32 [ %77, %65 ], [ %63, %61 ]
  %67 = phi i32 [ %75, %65 ], [ %46, %61 ]
  %68 = phi i32 [ %74, %65 ], [ %43, %61 ]
  %69 = sext i32 %66 to i64
  %70 = getelementptr inbounds i32, i32* %41, i64 %69
  %71 = load i32, i32* %70, align 4
  %72 = sext i32 %71 to i64
  %73 = icmp slt i64 %45, %72
  %74 = select i1 %73, i32 %68, i32 %66
  %75 = select i1 %73, i32 %66, i32 %67
  %76 = add nsw i32 %75, %74
  %77 = ashr i32 %76, 1
  %78 = icmp eq i32 %77, %74
  br i1 %78, label %79, label %65

79:                                               ; preds = %65, %40, %52, %54, %61
  %80 = phi i32 [ %43, %40 ], [ %46, %54 ], [ %46, %52 ], [ %46, %61 ], [ %75, %65 ]
  %81 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 6, i64 %44
  store i32 %80, i32* %81, align 4
  %82 = add nuw nsw i64 %44, 1
  %83 = icmp eq i64 %82, 17
  %84 = load i32, i32* %6, align 8
  br i1 %83, label %87, label %85

85:                                               ; preds = %79
  %86 = load i32*, i32** %5, align 8
  br label %40

87:                                               ; preds = %79
  %88 = add nsw i32 %84, -1
  %89 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 6, i64 17
  store i32 %88, i32* %89, align 4
  %90 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 6, i64 15
  %91 = load i32, i32* %90, align 4
  %92 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 6, i64 16
  %93 = load i32, i32* %92, align 4
  %94 = load i32*, i32** %5, align 8
  %95 = sext i32 %91 to i64
  %96 = getelementptr inbounds i32, i32* %94, i64 %95
  %97 = load i32, i32* %96, align 4
  %98 = icmp sgt i32 %97, 65533
  br i1 %98, label %124, label %99

99:                                               ; preds = %87
  %100 = icmp slt i32 %91, %93
  br i1 %100, label %101, label %124

101:                                              ; preds = %99
  %102 = add nsw i32 %93, -1
  %103 = sext i32 %102 to i64
  %104 = getelementptr inbounds i32, i32* %94, i64 %103
  %105 = load i32, i32* %104, align 4
  %106 = icmp sgt i32 %105, 65533
  br i1 %106, label %107, label %124

107:                                              ; preds = %101
  %108 = add nsw i32 %93, %91
  %109 = ashr i32 %108, 1
  %110 = icmp eq i32 %109, %91
  br i1 %110, label %124, label %111

111:                                              ; preds = %107, %111
  %112 = phi i32 [ %122, %111 ], [ %109, %107 ]
  %113 = phi i32 [ %120, %111 ], [ %93, %107 ]
  %114 = phi i32 [ %119, %111 ], [ %91, %107 ]
  %115 = sext i32 %112 to i64
  %116 = getelementptr inbounds i32, i32* %94, i64 %115
  %117 = load i32, i32* %116, align 4
  %118 = icmp sgt i32 %117, 65533
  %119 = select i1 %118, i32 %114, i32 %112
  %120 = select i1 %118, i32 %112, i32 %113
  %121 = add nsw i32 %120, %119
  %122 = ashr i32 %121, 1
  %123 = icmp eq i32 %122, %119
  br i1 %123, label %124, label %111

124:                                              ; preds = %111, %87, %99, %101, %107
  %125 = phi i32 [ %91, %87 ], [ %93, %101 ], [ %93, %99 ], [ %93, %107 ], [ %120, %111 ]
  %126 = trunc i32 %125 to i8
  %127 = and i8 %126, 1
  %128 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 2
  store i8 %127, i8* %128, align 8
  tail call void @_ZN6icu_696BMPSet8initBitsEv(%"class.icu_69::BMPSet"* %0)
  %129 = load i8, i8* %128, align 8
  %130 = icmp eq i8 %129, 0
  br i1 %130, label %300, label %131

131:                                              ; preds = %124
  %132 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 4, i64 0
  %133 = bitcast i32* %132 to <4 x i32>*
  %134 = load <4 x i32>, <4 x i32>* %133, align 4
  %135 = or <4 x i32> %134, <i32 3, i32 3, i32 3, i32 3>
  %136 = bitcast i32* %132 to <4 x i32>*
  store <4 x i32> %135, <4 x i32>* %136, align 4
  %137 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 4, i64 4
  %138 = bitcast i32* %137 to <4 x i32>*
  %139 = load <4 x i32>, <4 x i32>* %138, align 4
  %140 = or <4 x i32> %139, <i32 3, i32 3, i32 3, i32 3>
  %141 = bitcast i32* %137 to <4 x i32>*
  store <4 x i32> %140, <4 x i32>* %141, align 4
  %142 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 4, i64 8
  %143 = bitcast i32* %142 to <4 x i32>*
  %144 = load <4 x i32>, <4 x i32>* %143, align 4
  %145 = or <4 x i32> %144, <i32 3, i32 3, i32 3, i32 3>
  %146 = bitcast i32* %142 to <4 x i32>*
  store <4 x i32> %145, <4 x i32>* %146, align 4
  %147 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 4, i64 12
  %148 = bitcast i32* %147 to <4 x i32>*
  %149 = load <4 x i32>, <4 x i32>* %148, align 4
  %150 = or <4 x i32> %149, <i32 3, i32 3, i32 3, i32 3>
  %151 = bitcast i32* %147 to <4 x i32>*
  store <4 x i32> %150, <4 x i32>* %151, align 4
  %152 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 4, i64 16
  %153 = bitcast i32* %152 to <4 x i32>*
  %154 = load <4 x i32>, <4 x i32>* %153, align 4
  %155 = or <4 x i32> %154, <i32 3, i32 3, i32 3, i32 3>
  %156 = bitcast i32* %152 to <4 x i32>*
  store <4 x i32> %155, <4 x i32>* %156, align 4
  %157 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 4, i64 20
  %158 = bitcast i32* %157 to <4 x i32>*
  %159 = load <4 x i32>, <4 x i32>* %158, align 4
  %160 = or <4 x i32> %159, <i32 3, i32 3, i32 3, i32 3>
  %161 = bitcast i32* %157 to <4 x i32>*
  store <4 x i32> %160, <4 x i32>* %161, align 4
  %162 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 4, i64 24
  %163 = bitcast i32* %162 to <4 x i32>*
  %164 = load <4 x i32>, <4 x i32>* %163, align 4
  %165 = or <4 x i32> %164, <i32 3, i32 3, i32 3, i32 3>
  %166 = bitcast i32* %162 to <4 x i32>*
  store <4 x i32> %165, <4 x i32>* %166, align 4
  %167 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 4, i64 28
  %168 = bitcast i32* %167 to <4 x i32>*
  %169 = load <4 x i32>, <4 x i32>* %168, align 4
  %170 = or <4 x i32> %169, <i32 3, i32 3, i32 3, i32 3>
  %171 = bitcast i32* %167 to <4 x i32>*
  store <4 x i32> %170, <4 x i32>* %171, align 4
  %172 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 4, i64 32
  %173 = bitcast i32* %172 to <4 x i32>*
  %174 = load <4 x i32>, <4 x i32>* %173, align 4
  %175 = or <4 x i32> %174, <i32 3, i32 3, i32 3, i32 3>
  %176 = bitcast i32* %172 to <4 x i32>*
  store <4 x i32> %175, <4 x i32>* %176, align 4
  %177 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 4, i64 36
  %178 = bitcast i32* %177 to <4 x i32>*
  %179 = load <4 x i32>, <4 x i32>* %178, align 4
  %180 = or <4 x i32> %179, <i32 3, i32 3, i32 3, i32 3>
  %181 = bitcast i32* %177 to <4 x i32>*
  store <4 x i32> %180, <4 x i32>* %181, align 4
  %182 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 4, i64 40
  %183 = bitcast i32* %182 to <4 x i32>*
  %184 = load <4 x i32>, <4 x i32>* %183, align 4
  %185 = or <4 x i32> %184, <i32 3, i32 3, i32 3, i32 3>
  %186 = bitcast i32* %182 to <4 x i32>*
  store <4 x i32> %185, <4 x i32>* %186, align 4
  %187 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 4, i64 44
  %188 = bitcast i32* %187 to <4 x i32>*
  %189 = load <4 x i32>, <4 x i32>* %188, align 4
  %190 = or <4 x i32> %189, <i32 3, i32 3, i32 3, i32 3>
  %191 = bitcast i32* %187 to <4 x i32>*
  store <4 x i32> %190, <4 x i32>* %191, align 4
  %192 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 4, i64 48
  %193 = bitcast i32* %192 to <4 x i32>*
  %194 = load <4 x i32>, <4 x i32>* %193, align 4
  %195 = or <4 x i32> %194, <i32 3, i32 3, i32 3, i32 3>
  %196 = bitcast i32* %192 to <4 x i32>*
  store <4 x i32> %195, <4 x i32>* %196, align 4
  %197 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 4, i64 52
  %198 = bitcast i32* %197 to <4 x i32>*
  %199 = load <4 x i32>, <4 x i32>* %198, align 4
  %200 = or <4 x i32> %199, <i32 3, i32 3, i32 3, i32 3>
  %201 = bitcast i32* %197 to <4 x i32>*
  store <4 x i32> %200, <4 x i32>* %201, align 4
  %202 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 4, i64 56
  %203 = bitcast i32* %202 to <4 x i32>*
  %204 = load <4 x i32>, <4 x i32>* %203, align 4
  %205 = or <4 x i32> %204, <i32 3, i32 3, i32 3, i32 3>
  %206 = bitcast i32* %202 to <4 x i32>*
  store <4 x i32> %205, <4 x i32>* %206, align 4
  %207 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 4, i64 60
  %208 = bitcast i32* %207 to <4 x i32>*
  %209 = load <4 x i32>, <4 x i32>* %208, align 4
  %210 = or <4 x i32> %209, <i32 3, i32 3, i32 3, i32 3>
  %211 = bitcast i32* %207 to <4 x i32>*
  store <4 x i32> %210, <4 x i32>* %211, align 4
  %212 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 5, i64 0
  %213 = bitcast i32* %212 to <4 x i32>*
  %214 = load <4 x i32>, <4 x i32>* %213, align 4
  %215 = or <4 x i32> %214, <i32 1, i32 1, i32 1, i32 1>
  %216 = bitcast i32* %212 to <4 x i32>*
  store <4 x i32> %215, <4 x i32>* %216, align 4
  %217 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 5, i64 4
  %218 = bitcast i32* %217 to <4 x i32>*
  %219 = load <4 x i32>, <4 x i32>* %218, align 4
  %220 = or <4 x i32> %219, <i32 1, i32 1, i32 1, i32 1>
  %221 = bitcast i32* %217 to <4 x i32>*
  store <4 x i32> %220, <4 x i32>* %221, align 4
  %222 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 5, i64 8
  %223 = bitcast i32* %222 to <4 x i32>*
  %224 = load <4 x i32>, <4 x i32>* %223, align 4
  %225 = or <4 x i32> %224, <i32 1, i32 1, i32 1, i32 1>
  %226 = bitcast i32* %222 to <4 x i32>*
  store <4 x i32> %225, <4 x i32>* %226, align 4
  %227 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 5, i64 12
  %228 = bitcast i32* %227 to <4 x i32>*
  %229 = load <4 x i32>, <4 x i32>* %228, align 4
  %230 = or <4 x i32> %229, <i32 1, i32 1, i32 1, i32 1>
  %231 = bitcast i32* %227 to <4 x i32>*
  store <4 x i32> %230, <4 x i32>* %231, align 4
  %232 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 5, i64 16
  %233 = bitcast i32* %232 to <4 x i32>*
  %234 = load <4 x i32>, <4 x i32>* %233, align 4
  %235 = or <4 x i32> %234, <i32 1, i32 1, i32 1, i32 1>
  %236 = bitcast i32* %232 to <4 x i32>*
  store <4 x i32> %235, <4 x i32>* %236, align 4
  %237 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 5, i64 20
  %238 = bitcast i32* %237 to <4 x i32>*
  %239 = load <4 x i32>, <4 x i32>* %238, align 4
  %240 = or <4 x i32> %239, <i32 1, i32 1, i32 1, i32 1>
  %241 = bitcast i32* %237 to <4 x i32>*
  store <4 x i32> %240, <4 x i32>* %241, align 4
  %242 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 5, i64 24
  %243 = bitcast i32* %242 to <4 x i32>*
  %244 = load <4 x i32>, <4 x i32>* %243, align 4
  %245 = or <4 x i32> %244, <i32 1, i32 1, i32 1, i32 1>
  %246 = bitcast i32* %242 to <4 x i32>*
  store <4 x i32> %245, <4 x i32>* %246, align 4
  %247 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 5, i64 28
  %248 = bitcast i32* %247 to <4 x i32>*
  %249 = load <4 x i32>, <4 x i32>* %248, align 4
  %250 = or <4 x i32> %249, <i32 1, i32 1, i32 1, i32 1>
  %251 = bitcast i32* %247 to <4 x i32>*
  store <4 x i32> %250, <4 x i32>* %251, align 4
  %252 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 5, i64 32
  %253 = bitcast i32* %252 to <4 x i32>*
  %254 = load <4 x i32>, <4 x i32>* %253, align 4
  %255 = and <4 x i32> %254, <i32 -536879105, i32 -536879105, i32 -536879105, i32 -536879105>
  %256 = or <4 x i32> %255, <i32 8192, i32 8192, i32 8192, i32 8192>
  %257 = bitcast i32* %252 to <4 x i32>*
  store <4 x i32> %256, <4 x i32>* %257, align 4
  %258 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 5, i64 36
  %259 = bitcast i32* %258 to <4 x i32>*
  %260 = load <4 x i32>, <4 x i32>* %259, align 4
  %261 = and <4 x i32> %260, <i32 -536879105, i32 -536879105, i32 -536879105, i32 -536879105>
  %262 = or <4 x i32> %261, <i32 8192, i32 8192, i32 8192, i32 8192>
  %263 = bitcast i32* %258 to <4 x i32>*
  store <4 x i32> %262, <4 x i32>* %263, align 4
  %264 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 5, i64 40
  %265 = bitcast i32* %264 to <4 x i32>*
  %266 = load <4 x i32>, <4 x i32>* %265, align 4
  %267 = and <4 x i32> %266, <i32 -536879105, i32 -536879105, i32 -536879105, i32 -536879105>
  %268 = or <4 x i32> %267, <i32 8192, i32 8192, i32 8192, i32 8192>
  %269 = bitcast i32* %264 to <4 x i32>*
  store <4 x i32> %268, <4 x i32>* %269, align 4
  %270 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 5, i64 44
  %271 = bitcast i32* %270 to <4 x i32>*
  %272 = load <4 x i32>, <4 x i32>* %271, align 4
  %273 = and <4 x i32> %272, <i32 -536879105, i32 -536879105, i32 -536879105, i32 -536879105>
  %274 = or <4 x i32> %273, <i32 8192, i32 8192, i32 8192, i32 8192>
  %275 = bitcast i32* %270 to <4 x i32>*
  store <4 x i32> %274, <4 x i32>* %275, align 4
  %276 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 5, i64 48
  %277 = bitcast i32* %276 to <4 x i32>*
  %278 = load <4 x i32>, <4 x i32>* %277, align 4
  %279 = and <4 x i32> %278, <i32 -536879105, i32 -536879105, i32 -536879105, i32 -536879105>
  %280 = or <4 x i32> %279, <i32 8192, i32 8192, i32 8192, i32 8192>
  %281 = bitcast i32* %276 to <4 x i32>*
  store <4 x i32> %280, <4 x i32>* %281, align 4
  %282 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 5, i64 52
  %283 = bitcast i32* %282 to <4 x i32>*
  %284 = load <4 x i32>, <4 x i32>* %283, align 4
  %285 = and <4 x i32> %284, <i32 -536879105, i32 -536879105, i32 -536879105, i32 -536879105>
  %286 = or <4 x i32> %285, <i32 8192, i32 8192, i32 8192, i32 8192>
  %287 = bitcast i32* %282 to <4 x i32>*
  store <4 x i32> %286, <4 x i32>* %287, align 4
  %288 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 5, i64 56
  %289 = bitcast i32* %288 to <4 x i32>*
  %290 = load <4 x i32>, <4 x i32>* %289, align 4
  %291 = and <4 x i32> %290, <i32 -536879105, i32 -536879105, i32 -536879105, i32 -536879105>
  %292 = or <4 x i32> %291, <i32 8192, i32 8192, i32 8192, i32 8192>
  %293 = bitcast i32* %288 to <4 x i32>*
  store <4 x i32> %292, <4 x i32>* %293, align 4
  %294 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 5, i64 60
  %295 = bitcast i32* %294 to <4 x i32>*
  %296 = load <4 x i32>, <4 x i32>* %295, align 4
  %297 = and <4 x i32> %296, <i32 -536879105, i32 -536879105, i32 -536879105, i32 -536879105>
  %298 = or <4 x i32> %297, <i32 8192, i32 8192, i32 8192, i32 8192>
  %299 = bitcast i32* %294 to <4 x i32>*
  store <4 x i32> %298, <4 x i32>* %299, align 4
  br label %341

300:                                              ; preds = %124
  %301 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 5, i64 32
  %302 = bitcast i32* %301 to <4 x i32>*
  %303 = load <4 x i32>, <4 x i32>* %302, align 4
  %304 = and <4 x i32> %303, <i32 -536879105, i32 -536879105, i32 -536879105, i32 -536879105>
  %305 = bitcast i32* %301 to <4 x i32>*
  store <4 x i32> %304, <4 x i32>* %305, align 4
  %306 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 5, i64 36
  %307 = bitcast i32* %306 to <4 x i32>*
  %308 = load <4 x i32>, <4 x i32>* %307, align 4
  %309 = and <4 x i32> %308, <i32 -536879105, i32 -536879105, i32 -536879105, i32 -536879105>
  %310 = bitcast i32* %306 to <4 x i32>*
  store <4 x i32> %309, <4 x i32>* %310, align 4
  %311 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 5, i64 40
  %312 = bitcast i32* %311 to <4 x i32>*
  %313 = load <4 x i32>, <4 x i32>* %312, align 4
  %314 = and <4 x i32> %313, <i32 -536879105, i32 -536879105, i32 -536879105, i32 -536879105>
  %315 = bitcast i32* %311 to <4 x i32>*
  store <4 x i32> %314, <4 x i32>* %315, align 4
  %316 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 5, i64 44
  %317 = bitcast i32* %316 to <4 x i32>*
  %318 = load <4 x i32>, <4 x i32>* %317, align 4
  %319 = and <4 x i32> %318, <i32 -536879105, i32 -536879105, i32 -536879105, i32 -536879105>
  %320 = bitcast i32* %316 to <4 x i32>*
  store <4 x i32> %319, <4 x i32>* %320, align 4
  %321 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 5, i64 48
  %322 = bitcast i32* %321 to <4 x i32>*
  %323 = load <4 x i32>, <4 x i32>* %322, align 4
  %324 = and <4 x i32> %323, <i32 -536879105, i32 -536879105, i32 -536879105, i32 -536879105>
  %325 = bitcast i32* %321 to <4 x i32>*
  store <4 x i32> %324, <4 x i32>* %325, align 4
  %326 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 5, i64 52
  %327 = bitcast i32* %326 to <4 x i32>*
  %328 = load <4 x i32>, <4 x i32>* %327, align 4
  %329 = and <4 x i32> %328, <i32 -536879105, i32 -536879105, i32 -536879105, i32 -536879105>
  %330 = bitcast i32* %326 to <4 x i32>*
  store <4 x i32> %329, <4 x i32>* %330, align 4
  %331 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 5, i64 56
  %332 = bitcast i32* %331 to <4 x i32>*
  %333 = load <4 x i32>, <4 x i32>* %332, align 4
  %334 = and <4 x i32> %333, <i32 -536879105, i32 -536879105, i32 -536879105, i32 -536879105>
  %335 = bitcast i32* %331 to <4 x i32>*
  store <4 x i32> %334, <4 x i32>* %335, align 4
  %336 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 5, i64 60
  %337 = bitcast i32* %336 to <4 x i32>*
  %338 = load <4 x i32>, <4 x i32>* %337, align 4
  %339 = and <4 x i32> %338, <i32 -536879105, i32 -536879105, i32 -536879105, i32 -536879105>
  %340 = bitcast i32* %336 to <4 x i32>*
  store <4 x i32> %339, <4 x i32>* %340, align 4
  br label %341

341:                                              ; preds = %131, %300
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK6icu_696BMPSet13findCodePointEiii(%"class.icu_69::BMPSet"* nocapture readonly, i32, i32, i32) local_unnamed_addr #2 align 2 {
  %5 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 8
  %6 = load i32*, i32** %5, align 8
  %7 = sext i32 %2 to i64
  %8 = getelementptr inbounds i32, i32* %6, i64 %7
  %9 = load i32, i32* %8, align 4
  %10 = icmp sgt i32 %9, %1
  br i1 %10, label %36, label %11

11:                                               ; preds = %4
  %12 = icmp slt i32 %2, %3
  br i1 %12, label %13, label %36

13:                                               ; preds = %11
  %14 = add nsw i32 %3, -1
  %15 = sext i32 %14 to i64
  %16 = getelementptr inbounds i32, i32* %6, i64 %15
  %17 = load i32, i32* %16, align 4
  %18 = icmp sgt i32 %17, %1
  br i1 %18, label %19, label %36

19:                                               ; preds = %13
  %20 = add nsw i32 %3, %2
  %21 = ashr i32 %20, 1
  %22 = icmp eq i32 %21, %2
  br i1 %22, label %36, label %23

23:                                               ; preds = %19, %23
  %24 = phi i32 [ %34, %23 ], [ %21, %19 ]
  %25 = phi i32 [ %32, %23 ], [ %3, %19 ]
  %26 = phi i32 [ %31, %23 ], [ %2, %19 ]
  %27 = sext i32 %24 to i64
  %28 = getelementptr inbounds i32, i32* %6, i64 %27
  %29 = load i32, i32* %28, align 4
  %30 = icmp sgt i32 %29, %1
  %31 = select i1 %30, i32 %26, i32 %24
  %32 = select i1 %30, i32 %24, i32 %25
  %33 = add nsw i32 %32, %31
  %34 = ashr i32 %33, 1
  %35 = icmp eq i32 %34, %31
  br i1 %35, label %36, label %23

36:                                               ; preds = %23, %19, %11, %13, %4
  %37 = phi i32 [ %2, %4 ], [ %3, %13 ], [ %3, %11 ], [ %3, %19 ], [ %32, %23 ]
  ret i32 %37
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN6icu_696BMPSet8initBitsEv(%"class.icu_69::BMPSet"* nocapture) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 8
  %3 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 9
  br label %4

4:                                                ; preds = %22, %1
  %5 = phi i32 [ 0, %1 ], [ %20, %22 ]
  %6 = load i32*, i32** %2, align 8
  %7 = add nsw i32 %5, 1
  %8 = sext i32 %5 to i64
  %9 = getelementptr inbounds i32, i32* %6, i64 %8
  %10 = load i32, i32* %9, align 4
  %11 = load i32, i32* %3, align 8
  %12 = icmp slt i32 %7, %11
  br i1 %12, label %13, label %18

13:                                               ; preds = %4
  %14 = add nsw i32 %5, 2
  %15 = sext i32 %7 to i64
  %16 = getelementptr inbounds i32, i32* %6, i64 %15
  %17 = load i32, i32* %16, align 4
  br label %18

18:                                               ; preds = %4, %13
  %19 = phi i32 [ %17, %13 ], [ 1114112, %4 ]
  %20 = phi i32 [ %14, %13 ], [ %7, %4 ]
  %21 = icmp sgt i32 %10, 255
  br i1 %21, label %39, label %22

22:                                               ; preds = %18
  %23 = sext i32 %10 to i64
  %24 = getelementptr %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 1, i64 %23
  %25 = add nsw i32 %10, 1
  %26 = icmp sgt i32 %19, %25
  %27 = select i1 %26, i32 %19, i32 %25
  %28 = xor i32 %10, -1
  %29 = add i32 %27, %28
  %30 = sub i32 255, %10
  %31 = icmp ult i32 %29, %30
  %32 = select i1 %31, i32 %29, i32 %30
  %33 = zext i32 %32 to i64
  %34 = add nuw nsw i64 %33, 1
  call void @llvm.memset.p0i8.i64(i8* align 1 %24, i8 1, i64 %34, i1 false)
  %35 = icmp slt i32 %19, 257
  br i1 %35, label %4, label %36

36:                                               ; preds = %22
  %37 = load i32*, i32** %2, align 8
  %38 = load i32, i32* %3, align 8
  br label %39

39:                                               ; preds = %18, %36
  %40 = phi i32 [ %38, %36 ], [ %11, %18 ]
  %41 = phi i32* [ %37, %36 ], [ %6, %18 ]
  %42 = sext i32 %40 to i64
  br label %43

43:                                               ; preds = %48, %39
  %44 = phi i64 [ %49, %48 ], [ 0, %39 ]
  %45 = phi i32 [ %50, %48 ], [ 0, %39 ]
  %46 = or i64 %44, 1
  %47 = icmp slt i64 %46, %42
  br i1 %47, label %48, label %54

48:                                               ; preds = %43
  %49 = add nuw i64 %44, 2
  %50 = add nuw nsw i32 %45, 2
  %51 = getelementptr inbounds i32, i32* %41, i64 %46
  %52 = load i32, i32* %51, align 4
  %53 = icmp sgt i32 %52, 128
  br i1 %53, label %56, label %43

54:                                               ; preds = %43
  %55 = or i32 %45, 1
  br label %58

56:                                               ; preds = %48
  %57 = trunc i64 %49 to i32
  br label %58

58:                                               ; preds = %56, %54
  %59 = phi i32 [ %55, %54 ], [ %57, %56 ]
  %60 = phi i32 [ 1114112, %54 ], [ %52, %56 ]
  %61 = and i64 %44, 4294967294
  %62 = getelementptr inbounds i32, i32* %41, i64 %61
  %63 = load i32, i32* %62, align 4
  %64 = icmp sgt i32 %63, 128
  %65 = select i1 %64, i32 %63, i32 128
  %66 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 4, i64 0
  %67 = icmp slt i32 %65, 2048
  br i1 %67, label %68, label %92

68:                                               ; preds = %58, %88
  %69 = phi i32 [ %90, %88 ], [ %59, %58 ]
  %70 = phi i32 [ %89, %88 ], [ %60, %58 ]
  %71 = phi i32 [ %80, %88 ], [ %65, %58 ]
  %72 = icmp slt i32 %70, 2048
  %73 = select i1 %72, i32 %70, i32 2048
  tail call fastcc void @_ZN6icu_69L12set32x64BitsEPjii(i32* %66, i32 %71, i32 %73)
  %74 = icmp sgt i32 %70, 2048
  br i1 %74, label %97, label %75

75:                                               ; preds = %68
  %76 = load i32*, i32** %2, align 8
  %77 = add nsw i32 %69, 1
  %78 = sext i32 %69 to i64
  %79 = getelementptr inbounds i32, i32* %76, i64 %78
  %80 = load i32, i32* %79, align 4
  %81 = load i32, i32* %3, align 8
  %82 = icmp slt i32 %77, %81
  br i1 %82, label %83, label %88

83:                                               ; preds = %75
  %84 = add nsw i32 %69, 2
  %85 = sext i32 %77 to i64
  %86 = getelementptr inbounds i32, i32* %76, i64 %85
  %87 = load i32, i32* %86, align 4
  br label %88

88:                                               ; preds = %75, %83
  %89 = phi i32 [ %87, %83 ], [ 1114112, %75 ]
  %90 = phi i32 [ %84, %83 ], [ %77, %75 ]
  %91 = icmp slt i32 %80, 2048
  br i1 %91, label %68, label %92

92:                                               ; preds = %88, %58
  %93 = phi i32 [ %60, %58 ], [ %89, %88 ]
  %94 = phi i32 [ %59, %58 ], [ %90, %88 ]
  %95 = phi i32 [ %63, %58 ], [ %80, %88 ]
  %96 = icmp slt i32 %95, 65536
  br i1 %96, label %97, label %171

97:                                               ; preds = %68, %92
  %98 = phi i32 [ %95, %92 ], [ 2048, %68 ]
  %99 = phi i32 [ %94, %92 ], [ %69, %68 ]
  %100 = phi i32 [ %93, %92 ], [ %70, %68 ]
  %101 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 5, i64 0
  br label %102

102:                                              ; preds = %97, %167
  %103 = phi i32 [ 2048, %97 ], [ %152, %167 ]
  %104 = phi i32 [ %99, %97 ], [ %169, %167 ]
  %105 = phi i32 [ %100, %97 ], [ %168, %167 ]
  %106 = phi i32 [ %98, %97 ], [ %159, %167 ]
  %107 = icmp slt i32 %105, 65536
  %108 = select i1 %107, i32 %105, i32 65536
  %109 = icmp slt i32 %106, %103
  %110 = select i1 %109, i32 %103, i32 %106
  %111 = icmp slt i32 %110, %108
  br i1 %111, label %112, label %150

112:                                              ; preds = %102
  %113 = and i32 %110, 63
  %114 = icmp eq i32 %113, 0
  br i1 %114, label %126, label %115

115:                                              ; preds = %112
  %116 = lshr i32 %110, 6
  %117 = ashr i32 %110, 12
  %118 = shl i32 65537, %117
  %119 = and i32 %116, 63
  %120 = zext i32 %119 to i64
  %121 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 5, i64 %120
  %122 = load i32, i32* %121, align 4
  %123 = or i32 %122, %118
  store i32 %123, i32* %121, align 4
  %124 = add i32 %110, 64
  %125 = and i32 %124, -64
  br label %126

126:                                              ; preds = %112, %115
  %127 = phi i32 [ %125, %115 ], [ %110, %112 ]
  %128 = phi i32 [ %125, %115 ], [ %103, %112 ]
  %129 = icmp slt i32 %127, %108
  br i1 %129, label %130, label %150

130:                                              ; preds = %126
  %131 = and i32 %108, -64
  %132 = icmp slt i32 %127, %131
  br i1 %132, label %133, label %136

133:                                              ; preds = %130
  %134 = ashr i32 %127, 6
  %135 = ashr i32 %108, 6
  tail call fastcc void @_ZN6icu_69L12set32x64BitsEPjii(i32* %101, i32 %134, i32 %135)
  br label %136

136:                                              ; preds = %133, %130
  %137 = and i32 %108, 63
  %138 = icmp eq i32 %137, 0
  br i1 %138, label %150, label %139

139:                                              ; preds = %136
  %140 = lshr i32 %108, 6
  %141 = ashr i32 %108, 12
  %142 = shl i32 65537, %141
  %143 = and i32 %140, 63
  %144 = zext i32 %143 to i64
  %145 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 5, i64 %144
  %146 = load i32, i32* %145, align 4
  %147 = or i32 %146, %142
  store i32 %147, i32* %145, align 4
  %148 = add nsw i32 %108, 64
  %149 = and i32 %148, -64
  br label %150

150:                                              ; preds = %136, %126, %139, %102
  %151 = phi i32 [ %149, %139 ], [ %108, %136 ], [ %108, %126 ], [ %108, %102 ]
  %152 = phi i32 [ %149, %139 ], [ %128, %136 ], [ %128, %126 ], [ %103, %102 ]
  %153 = icmp eq i32 %151, 65536
  br i1 %153, label %171, label %154

154:                                              ; preds = %150
  %155 = load i32*, i32** %2, align 8
  %156 = add nsw i32 %104, 1
  %157 = sext i32 %104 to i64
  %158 = getelementptr inbounds i32, i32* %155, i64 %157
  %159 = load i32, i32* %158, align 4
  %160 = load i32, i32* %3, align 8
  %161 = icmp slt i32 %156, %160
  br i1 %161, label %162, label %167

162:                                              ; preds = %154
  %163 = add nsw i32 %104, 2
  %164 = sext i32 %156 to i64
  %165 = getelementptr inbounds i32, i32* %155, i64 %164
  %166 = load i32, i32* %165, align 4
  br label %167

167:                                              ; preds = %154, %162
  %168 = phi i32 [ %166, %162 ], [ 1114112, %154 ]
  %169 = phi i32 [ %163, %162 ], [ %156, %154 ]
  %170 = icmp slt i32 %159, 65536
  br i1 %170, label %102, label %171

171:                                              ; preds = %167, %150, %92
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN6icu_696BMPSet15overrideIllegalEv(%"class.icu_69::BMPSet"* nocapture) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 2
  %3 = load i8, i8* %2, align 8
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %174, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 4, i64 0
  %7 = bitcast i32* %6 to <4 x i32>*
  %8 = load <4 x i32>, <4 x i32>* %7, align 4
  %9 = or <4 x i32> %8, <i32 3, i32 3, i32 3, i32 3>
  %10 = bitcast i32* %6 to <4 x i32>*
  store <4 x i32> %9, <4 x i32>* %10, align 4
  %11 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 4, i64 4
  %12 = bitcast i32* %11 to <4 x i32>*
  %13 = load <4 x i32>, <4 x i32>* %12, align 4
  %14 = or <4 x i32> %13, <i32 3, i32 3, i32 3, i32 3>
  %15 = bitcast i32* %11 to <4 x i32>*
  store <4 x i32> %14, <4 x i32>* %15, align 4
  %16 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 4, i64 8
  %17 = bitcast i32* %16 to <4 x i32>*
  %18 = load <4 x i32>, <4 x i32>* %17, align 4
  %19 = or <4 x i32> %18, <i32 3, i32 3, i32 3, i32 3>
  %20 = bitcast i32* %16 to <4 x i32>*
  store <4 x i32> %19, <4 x i32>* %20, align 4
  %21 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 4, i64 12
  %22 = bitcast i32* %21 to <4 x i32>*
  %23 = load <4 x i32>, <4 x i32>* %22, align 4
  %24 = or <4 x i32> %23, <i32 3, i32 3, i32 3, i32 3>
  %25 = bitcast i32* %21 to <4 x i32>*
  store <4 x i32> %24, <4 x i32>* %25, align 4
  %26 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 4, i64 16
  %27 = bitcast i32* %26 to <4 x i32>*
  %28 = load <4 x i32>, <4 x i32>* %27, align 4
  %29 = or <4 x i32> %28, <i32 3, i32 3, i32 3, i32 3>
  %30 = bitcast i32* %26 to <4 x i32>*
  store <4 x i32> %29, <4 x i32>* %30, align 4
  %31 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 4, i64 20
  %32 = bitcast i32* %31 to <4 x i32>*
  %33 = load <4 x i32>, <4 x i32>* %32, align 4
  %34 = or <4 x i32> %33, <i32 3, i32 3, i32 3, i32 3>
  %35 = bitcast i32* %31 to <4 x i32>*
  store <4 x i32> %34, <4 x i32>* %35, align 4
  %36 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 4, i64 24
  %37 = bitcast i32* %36 to <4 x i32>*
  %38 = load <4 x i32>, <4 x i32>* %37, align 4
  %39 = or <4 x i32> %38, <i32 3, i32 3, i32 3, i32 3>
  %40 = bitcast i32* %36 to <4 x i32>*
  store <4 x i32> %39, <4 x i32>* %40, align 4
  %41 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 4, i64 28
  %42 = bitcast i32* %41 to <4 x i32>*
  %43 = load <4 x i32>, <4 x i32>* %42, align 4
  %44 = or <4 x i32> %43, <i32 3, i32 3, i32 3, i32 3>
  %45 = bitcast i32* %41 to <4 x i32>*
  store <4 x i32> %44, <4 x i32>* %45, align 4
  %46 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 4, i64 32
  %47 = bitcast i32* %46 to <4 x i32>*
  %48 = load <4 x i32>, <4 x i32>* %47, align 4
  %49 = or <4 x i32> %48, <i32 3, i32 3, i32 3, i32 3>
  %50 = bitcast i32* %46 to <4 x i32>*
  store <4 x i32> %49, <4 x i32>* %50, align 4
  %51 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 4, i64 36
  %52 = bitcast i32* %51 to <4 x i32>*
  %53 = load <4 x i32>, <4 x i32>* %52, align 4
  %54 = or <4 x i32> %53, <i32 3, i32 3, i32 3, i32 3>
  %55 = bitcast i32* %51 to <4 x i32>*
  store <4 x i32> %54, <4 x i32>* %55, align 4
  %56 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 4, i64 40
  %57 = bitcast i32* %56 to <4 x i32>*
  %58 = load <4 x i32>, <4 x i32>* %57, align 4
  %59 = or <4 x i32> %58, <i32 3, i32 3, i32 3, i32 3>
  %60 = bitcast i32* %56 to <4 x i32>*
  store <4 x i32> %59, <4 x i32>* %60, align 4
  %61 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 4, i64 44
  %62 = bitcast i32* %61 to <4 x i32>*
  %63 = load <4 x i32>, <4 x i32>* %62, align 4
  %64 = or <4 x i32> %63, <i32 3, i32 3, i32 3, i32 3>
  %65 = bitcast i32* %61 to <4 x i32>*
  store <4 x i32> %64, <4 x i32>* %65, align 4
  %66 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 4, i64 48
  %67 = bitcast i32* %66 to <4 x i32>*
  %68 = load <4 x i32>, <4 x i32>* %67, align 4
  %69 = or <4 x i32> %68, <i32 3, i32 3, i32 3, i32 3>
  %70 = bitcast i32* %66 to <4 x i32>*
  store <4 x i32> %69, <4 x i32>* %70, align 4
  %71 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 4, i64 52
  %72 = bitcast i32* %71 to <4 x i32>*
  %73 = load <4 x i32>, <4 x i32>* %72, align 4
  %74 = or <4 x i32> %73, <i32 3, i32 3, i32 3, i32 3>
  %75 = bitcast i32* %71 to <4 x i32>*
  store <4 x i32> %74, <4 x i32>* %75, align 4
  %76 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 4, i64 56
  %77 = bitcast i32* %76 to <4 x i32>*
  %78 = load <4 x i32>, <4 x i32>* %77, align 4
  %79 = or <4 x i32> %78, <i32 3, i32 3, i32 3, i32 3>
  %80 = bitcast i32* %76 to <4 x i32>*
  store <4 x i32> %79, <4 x i32>* %80, align 4
  %81 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 4, i64 60
  %82 = bitcast i32* %81 to <4 x i32>*
  %83 = load <4 x i32>, <4 x i32>* %82, align 4
  %84 = or <4 x i32> %83, <i32 3, i32 3, i32 3, i32 3>
  %85 = bitcast i32* %81 to <4 x i32>*
  store <4 x i32> %84, <4 x i32>* %85, align 4
  %86 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 5, i64 0
  %87 = bitcast i32* %86 to <4 x i32>*
  %88 = load <4 x i32>, <4 x i32>* %87, align 4
  %89 = or <4 x i32> %88, <i32 1, i32 1, i32 1, i32 1>
  %90 = bitcast i32* %86 to <4 x i32>*
  store <4 x i32> %89, <4 x i32>* %90, align 4
  %91 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 5, i64 4
  %92 = bitcast i32* %91 to <4 x i32>*
  %93 = load <4 x i32>, <4 x i32>* %92, align 4
  %94 = or <4 x i32> %93, <i32 1, i32 1, i32 1, i32 1>
  %95 = bitcast i32* %91 to <4 x i32>*
  store <4 x i32> %94, <4 x i32>* %95, align 4
  %96 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 5, i64 8
  %97 = bitcast i32* %96 to <4 x i32>*
  %98 = load <4 x i32>, <4 x i32>* %97, align 4
  %99 = or <4 x i32> %98, <i32 1, i32 1, i32 1, i32 1>
  %100 = bitcast i32* %96 to <4 x i32>*
  store <4 x i32> %99, <4 x i32>* %100, align 4
  %101 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 5, i64 12
  %102 = bitcast i32* %101 to <4 x i32>*
  %103 = load <4 x i32>, <4 x i32>* %102, align 4
  %104 = or <4 x i32> %103, <i32 1, i32 1, i32 1, i32 1>
  %105 = bitcast i32* %101 to <4 x i32>*
  store <4 x i32> %104, <4 x i32>* %105, align 4
  %106 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 5, i64 16
  %107 = bitcast i32* %106 to <4 x i32>*
  %108 = load <4 x i32>, <4 x i32>* %107, align 4
  %109 = or <4 x i32> %108, <i32 1, i32 1, i32 1, i32 1>
  %110 = bitcast i32* %106 to <4 x i32>*
  store <4 x i32> %109, <4 x i32>* %110, align 4
  %111 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 5, i64 20
  %112 = bitcast i32* %111 to <4 x i32>*
  %113 = load <4 x i32>, <4 x i32>* %112, align 4
  %114 = or <4 x i32> %113, <i32 1, i32 1, i32 1, i32 1>
  %115 = bitcast i32* %111 to <4 x i32>*
  store <4 x i32> %114, <4 x i32>* %115, align 4
  %116 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 5, i64 24
  %117 = bitcast i32* %116 to <4 x i32>*
  %118 = load <4 x i32>, <4 x i32>* %117, align 4
  %119 = or <4 x i32> %118, <i32 1, i32 1, i32 1, i32 1>
  %120 = bitcast i32* %116 to <4 x i32>*
  store <4 x i32> %119, <4 x i32>* %120, align 4
  %121 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 5, i64 28
  %122 = bitcast i32* %121 to <4 x i32>*
  %123 = load <4 x i32>, <4 x i32>* %122, align 4
  %124 = or <4 x i32> %123, <i32 1, i32 1, i32 1, i32 1>
  %125 = bitcast i32* %121 to <4 x i32>*
  store <4 x i32> %124, <4 x i32>* %125, align 4
  %126 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 5, i64 32
  %127 = bitcast i32* %126 to <4 x i32>*
  %128 = load <4 x i32>, <4 x i32>* %127, align 4
  %129 = and <4 x i32> %128, <i32 -536879105, i32 -536879105, i32 -536879105, i32 -536879105>
  %130 = or <4 x i32> %129, <i32 8192, i32 8192, i32 8192, i32 8192>
  %131 = bitcast i32* %126 to <4 x i32>*
  store <4 x i32> %130, <4 x i32>* %131, align 4
  %132 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 5, i64 36
  %133 = bitcast i32* %132 to <4 x i32>*
  %134 = load <4 x i32>, <4 x i32>* %133, align 4
  %135 = and <4 x i32> %134, <i32 -536879105, i32 -536879105, i32 -536879105, i32 -536879105>
  %136 = or <4 x i32> %135, <i32 8192, i32 8192, i32 8192, i32 8192>
  %137 = bitcast i32* %132 to <4 x i32>*
  store <4 x i32> %136, <4 x i32>* %137, align 4
  %138 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 5, i64 40
  %139 = bitcast i32* %138 to <4 x i32>*
  %140 = load <4 x i32>, <4 x i32>* %139, align 4
  %141 = and <4 x i32> %140, <i32 -536879105, i32 -536879105, i32 -536879105, i32 -536879105>
  %142 = or <4 x i32> %141, <i32 8192, i32 8192, i32 8192, i32 8192>
  %143 = bitcast i32* %138 to <4 x i32>*
  store <4 x i32> %142, <4 x i32>* %143, align 4
  %144 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 5, i64 44
  %145 = bitcast i32* %144 to <4 x i32>*
  %146 = load <4 x i32>, <4 x i32>* %145, align 4
  %147 = and <4 x i32> %146, <i32 -536879105, i32 -536879105, i32 -536879105, i32 -536879105>
  %148 = or <4 x i32> %147, <i32 8192, i32 8192, i32 8192, i32 8192>
  %149 = bitcast i32* %144 to <4 x i32>*
  store <4 x i32> %148, <4 x i32>* %149, align 4
  %150 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 5, i64 48
  %151 = bitcast i32* %150 to <4 x i32>*
  %152 = load <4 x i32>, <4 x i32>* %151, align 4
  %153 = and <4 x i32> %152, <i32 -536879105, i32 -536879105, i32 -536879105, i32 -536879105>
  %154 = or <4 x i32> %153, <i32 8192, i32 8192, i32 8192, i32 8192>
  %155 = bitcast i32* %150 to <4 x i32>*
  store <4 x i32> %154, <4 x i32>* %155, align 4
  %156 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 5, i64 52
  %157 = bitcast i32* %156 to <4 x i32>*
  %158 = load <4 x i32>, <4 x i32>* %157, align 4
  %159 = and <4 x i32> %158, <i32 -536879105, i32 -536879105, i32 -536879105, i32 -536879105>
  %160 = or <4 x i32> %159, <i32 8192, i32 8192, i32 8192, i32 8192>
  %161 = bitcast i32* %156 to <4 x i32>*
  store <4 x i32> %160, <4 x i32>* %161, align 4
  %162 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 5, i64 56
  %163 = bitcast i32* %162 to <4 x i32>*
  %164 = load <4 x i32>, <4 x i32>* %163, align 4
  %165 = and <4 x i32> %164, <i32 -536879105, i32 -536879105, i32 -536879105, i32 -536879105>
  %166 = or <4 x i32> %165, <i32 8192, i32 8192, i32 8192, i32 8192>
  %167 = bitcast i32* %162 to <4 x i32>*
  store <4 x i32> %166, <4 x i32>* %167, align 4
  %168 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 5, i64 60
  %169 = bitcast i32* %168 to <4 x i32>*
  %170 = load <4 x i32>, <4 x i32>* %169, align 4
  %171 = and <4 x i32> %170, <i32 -536879105, i32 -536879105, i32 -536879105, i32 -536879105>
  %172 = or <4 x i32> %171, <i32 8192, i32 8192, i32 8192, i32 8192>
  %173 = bitcast i32* %168 to <4 x i32>*
  store <4 x i32> %172, <4 x i32>* %173, align 4
  br label %215

174:                                              ; preds = %1
  %175 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 5, i64 32
  %176 = bitcast i32* %175 to <4 x i32>*
  %177 = load <4 x i32>, <4 x i32>* %176, align 4
  %178 = and <4 x i32> %177, <i32 -536879105, i32 -536879105, i32 -536879105, i32 -536879105>
  %179 = bitcast i32* %175 to <4 x i32>*
  store <4 x i32> %178, <4 x i32>* %179, align 4
  %180 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 5, i64 36
  %181 = bitcast i32* %180 to <4 x i32>*
  %182 = load <4 x i32>, <4 x i32>* %181, align 4
  %183 = and <4 x i32> %182, <i32 -536879105, i32 -536879105, i32 -536879105, i32 -536879105>
  %184 = bitcast i32* %180 to <4 x i32>*
  store <4 x i32> %183, <4 x i32>* %184, align 4
  %185 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 5, i64 40
  %186 = bitcast i32* %185 to <4 x i32>*
  %187 = load <4 x i32>, <4 x i32>* %186, align 4
  %188 = and <4 x i32> %187, <i32 -536879105, i32 -536879105, i32 -536879105, i32 -536879105>
  %189 = bitcast i32* %185 to <4 x i32>*
  store <4 x i32> %188, <4 x i32>* %189, align 4
  %190 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 5, i64 44
  %191 = bitcast i32* %190 to <4 x i32>*
  %192 = load <4 x i32>, <4 x i32>* %191, align 4
  %193 = and <4 x i32> %192, <i32 -536879105, i32 -536879105, i32 -536879105, i32 -536879105>
  %194 = bitcast i32* %190 to <4 x i32>*
  store <4 x i32> %193, <4 x i32>* %194, align 4
  %195 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 5, i64 48
  %196 = bitcast i32* %195 to <4 x i32>*
  %197 = load <4 x i32>, <4 x i32>* %196, align 4
  %198 = and <4 x i32> %197, <i32 -536879105, i32 -536879105, i32 -536879105, i32 -536879105>
  %199 = bitcast i32* %195 to <4 x i32>*
  store <4 x i32> %198, <4 x i32>* %199, align 4
  %200 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 5, i64 52
  %201 = bitcast i32* %200 to <4 x i32>*
  %202 = load <4 x i32>, <4 x i32>* %201, align 4
  %203 = and <4 x i32> %202, <i32 -536879105, i32 -536879105, i32 -536879105, i32 -536879105>
  %204 = bitcast i32* %200 to <4 x i32>*
  store <4 x i32> %203, <4 x i32>* %204, align 4
  %205 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 5, i64 56
  %206 = bitcast i32* %205 to <4 x i32>*
  %207 = load <4 x i32>, <4 x i32>* %206, align 4
  %208 = and <4 x i32> %207, <i32 -536879105, i32 -536879105, i32 -536879105, i32 -536879105>
  %209 = bitcast i32* %205 to <4 x i32>*
  store <4 x i32> %208, <4 x i32>* %209, align 4
  %210 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 5, i64 60
  %211 = bitcast i32* %210 to <4 x i32>*
  %212 = load <4 x i32>, <4 x i32>* %211, align 4
  %213 = and <4 x i32> %212, <i32 -536879105, i32 -536879105, i32 -536879105, i32 -536879105>
  %214 = bitcast i32* %210 to <4 x i32>*
  store <4 x i32> %213, <4 x i32>* %214, align 4
  br label %215

215:                                              ; preds = %5, %174
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6icu_696BMPSetC2ERKS0_PKii(%"class.icu_69::BMPSet"* nocapture, %"class.icu_69::BMPSet"* nocapture readonly dereferenceable(872), i32*, i32) unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN6icu_696BMPSetE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 2
  %7 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %1, i64 0, i32 2
  %8 = load i8, i8* %7, align 8
  store i8 %8, i8* %6, align 8
  %9 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 8
  store i32* %2, i32** %9, align 8
  %10 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 9
  store i32 %3, i32* %10, align 8
  %11 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 1, i64 0
  %12 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %1, i64 0, i32 1, i64 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %11, i8* align 8 %12, i64 256, i1 false)
  %13 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 4, i64 0
  %14 = bitcast i32* %13 to i8*
  %15 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %1, i64 0, i32 4, i64 0
  %16 = bitcast i32* %15 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %14, i8* align 4 %16, i64 256, i1 false)
  %17 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 5, i64 0
  %18 = bitcast i32* %17 to i8*
  %19 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %1, i64 0, i32 5, i64 0
  %20 = bitcast i32* %19 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %18, i8* align 4 %20, i64 256, i1 false)
  %21 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 6, i64 0
  %22 = bitcast i32* %21 to i8*
  %23 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %1, i64 0, i32 6, i64 0
  %24 = bitcast i32* %23 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %22, i8* align 4 %24, i64 72, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN6icu_696BMPSetD2Ev(%"class.icu_69::BMPSet"* nocapture) unnamed_addr #4 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6icu_696BMPSetD0Ev(%"class.icu_69::BMPSet"*) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.icu_69::BMPSet"* %0 to i8*
  tail call void @_ZN6icu_697UMemorydlEPv(i8* %2) #7
  ret void
}

; Function Attrs: nounwind
declare void @_ZN6icu_697UMemorydlEPv(i8*) local_unnamed_addr #5

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc void @_ZN6icu_69L12set32x64BitsEPjii(i32* nocapture, i32, i32) unnamed_addr #3 {
  %4 = ashr i32 %1, 6
  %5 = and i32 %1, 63
  %6 = shl i32 1, %4
  %7 = add nsw i32 %1, 1
  %8 = icmp eq i32 %7, %2
  br i1 %8, label %9, label %14

9:                                                ; preds = %3
  %10 = zext i32 %5 to i64
  %11 = getelementptr inbounds i32, i32* %0, i64 %10
  %12 = load i32, i32* %11, align 4
  %13 = or i32 %12, %6
  store i32 %13, i32* %11, align 4
  br label %340

14:                                               ; preds = %3
  %15 = ashr i32 %2, 6
  %16 = and i32 %2, 63
  %17 = icmp eq i32 %4, %15
  br i1 %17, label %18, label %95

18:                                               ; preds = %14
  %19 = icmp ult i32 %5, %16
  br i1 %19, label %20, label %340

20:                                               ; preds = %18
  %21 = and i32 %1, 63
  %22 = zext i32 %21 to i64
  %23 = zext i32 %16 to i64
  %24 = sub nsw i64 %23, %22
  %25 = icmp ult i64 %24, 8
  br i1 %25, label %86, label %26

26:                                               ; preds = %20
  %27 = and i64 %24, -8
  %28 = add nsw i64 %27, %22
  %29 = insertelement <4 x i32> undef, i32 %6, i32 0
  %30 = shufflevector <4 x i32> %29, <4 x i32> undef, <4 x i32> zeroinitializer
  %31 = insertelement <4 x i32> undef, i32 %6, i32 0
  %32 = shufflevector <4 x i32> %31, <4 x i32> undef, <4 x i32> zeroinitializer
  %33 = add nsw i64 %27, -8
  %34 = lshr exact i64 %33, 3
  %35 = add nuw nsw i64 %34, 1
  %36 = and i64 %35, 1
  %37 = icmp eq i64 %33, 0
  br i1 %37, label %69, label %38

38:                                               ; preds = %26
  %39 = sub nuw nsw i64 %35, %36
  br label %40

40:                                               ; preds = %40, %38
  %41 = phi i64 [ 0, %38 ], [ %66, %40 ]
  %42 = phi i64 [ %39, %38 ], [ %67, %40 ]
  %43 = add i64 %41, %22
  %44 = getelementptr inbounds i32, i32* %0, i64 %43
  %45 = bitcast i32* %44 to <4 x i32>*
  %46 = load <4 x i32>, <4 x i32>* %45, align 4
  %47 = getelementptr inbounds i32, i32* %44, i64 4
  %48 = bitcast i32* %47 to <4 x i32>*
  %49 = load <4 x i32>, <4 x i32>* %48, align 4
  %50 = or <4 x i32> %46, %30
  %51 = or <4 x i32> %49, %32
  %52 = bitcast i32* %44 to <4 x i32>*
  store <4 x i32> %50, <4 x i32>* %52, align 4
  %53 = bitcast i32* %47 to <4 x i32>*
  store <4 x i32> %51, <4 x i32>* %53, align 4
  %54 = or i64 %41, 8
  %55 = add i64 %54, %22
  %56 = getelementptr inbounds i32, i32* %0, i64 %55
  %57 = bitcast i32* %56 to <4 x i32>*
  %58 = load <4 x i32>, <4 x i32>* %57, align 4
  %59 = getelementptr inbounds i32, i32* %56, i64 4
  %60 = bitcast i32* %59 to <4 x i32>*
  %61 = load <4 x i32>, <4 x i32>* %60, align 4
  %62 = or <4 x i32> %58, %30
  %63 = or <4 x i32> %61, %32
  %64 = bitcast i32* %56 to <4 x i32>*
  store <4 x i32> %62, <4 x i32>* %64, align 4
  %65 = bitcast i32* %59 to <4 x i32>*
  store <4 x i32> %63, <4 x i32>* %65, align 4
  %66 = add i64 %41, 16
  %67 = add i64 %42, -2
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %69, label %40, !llvm.loop !2

69:                                               ; preds = %40, %26
  %70 = phi i64 [ 0, %26 ], [ %66, %40 ]
  %71 = icmp eq i64 %36, 0
  br i1 %71, label %84, label %72

72:                                               ; preds = %69
  %73 = add i64 %70, %22
  %74 = getelementptr inbounds i32, i32* %0, i64 %73
  %75 = bitcast i32* %74 to <4 x i32>*
  %76 = load <4 x i32>, <4 x i32>* %75, align 4
  %77 = getelementptr inbounds i32, i32* %74, i64 4
  %78 = bitcast i32* %77 to <4 x i32>*
  %79 = load <4 x i32>, <4 x i32>* %78, align 4
  %80 = or <4 x i32> %76, %30
  %81 = or <4 x i32> %79, %32
  %82 = bitcast i32* %74 to <4 x i32>*
  store <4 x i32> %80, <4 x i32>* %82, align 4
  %83 = bitcast i32* %77 to <4 x i32>*
  store <4 x i32> %81, <4 x i32>* %83, align 4
  br label %84

84:                                               ; preds = %69, %72
  %85 = icmp eq i64 %24, %27
  br i1 %85, label %340, label %86

86:                                               ; preds = %84, %20
  %87 = phi i64 [ %22, %20 ], [ %28, %84 ]
  br label %88

88:                                               ; preds = %86, %88
  %89 = phi i64 [ %90, %88 ], [ %87, %86 ]
  %90 = add nuw nsw i64 %89, 1
  %91 = getelementptr inbounds i32, i32* %0, i64 %89
  %92 = load i32, i32* %91, align 4
  %93 = or i32 %92, %6
  store i32 %93, i32* %91, align 4
  %94 = icmp eq i64 %90, %23
  br i1 %94, label %340, label %88, !llvm.loop !4

95:                                               ; preds = %14
  %96 = icmp eq i32 %5, 0
  br i1 %96, label %173, label %97

97:                                               ; preds = %95
  %98 = and i32 %1, 63
  %99 = zext i32 %98 to i64
  %100 = sub nuw nsw i64 64, %99
  %101 = icmp ugt i32 %98, 56
  br i1 %101, label %162, label %102

102:                                              ; preds = %97
  %103 = and i64 %100, 120
  %104 = add nuw nsw i64 %103, %99
  %105 = insertelement <4 x i32> undef, i32 %6, i32 0
  %106 = shufflevector <4 x i32> %105, <4 x i32> undef, <4 x i32> zeroinitializer
  %107 = insertelement <4 x i32> undef, i32 %6, i32 0
  %108 = shufflevector <4 x i32> %107, <4 x i32> undef, <4 x i32> zeroinitializer
  %109 = add nsw i64 %103, -8
  %110 = lshr exact i64 %109, 3
  %111 = add nuw nsw i64 %110, 1
  %112 = and i64 %111, 1
  %113 = icmp eq i64 %109, 0
  br i1 %113, label %145, label %114

114:                                              ; preds = %102
  %115 = sub nuw nsw i64 %111, %112
  br label %116

116:                                              ; preds = %116, %114
  %117 = phi i64 [ 0, %114 ], [ %142, %116 ]
  %118 = phi i64 [ %115, %114 ], [ %143, %116 ]
  %119 = add i64 %117, %99
  %120 = getelementptr inbounds i32, i32* %0, i64 %119
  %121 = bitcast i32* %120 to <4 x i32>*
  %122 = load <4 x i32>, <4 x i32>* %121, align 4
  %123 = getelementptr inbounds i32, i32* %120, i64 4
  %124 = bitcast i32* %123 to <4 x i32>*
  %125 = load <4 x i32>, <4 x i32>* %124, align 4
  %126 = or <4 x i32> %122, %106
  %127 = or <4 x i32> %125, %108
  %128 = bitcast i32* %120 to <4 x i32>*
  store <4 x i32> %126, <4 x i32>* %128, align 4
  %129 = bitcast i32* %123 to <4 x i32>*
  store <4 x i32> %127, <4 x i32>* %129, align 4
  %130 = or i64 %117, 8
  %131 = add i64 %130, %99
  %132 = getelementptr inbounds i32, i32* %0, i64 %131
  %133 = bitcast i32* %132 to <4 x i32>*
  %134 = load <4 x i32>, <4 x i32>* %133, align 4
  %135 = getelementptr inbounds i32, i32* %132, i64 4
  %136 = bitcast i32* %135 to <4 x i32>*
  %137 = load <4 x i32>, <4 x i32>* %136, align 4
  %138 = or <4 x i32> %134, %106
  %139 = or <4 x i32> %137, %108
  %140 = bitcast i32* %132 to <4 x i32>*
  store <4 x i32> %138, <4 x i32>* %140, align 4
  %141 = bitcast i32* %135 to <4 x i32>*
  store <4 x i32> %139, <4 x i32>* %141, align 4
  %142 = add i64 %117, 16
  %143 = add i64 %118, -2
  %144 = icmp eq i64 %143, 0
  br i1 %144, label %145, label %116, !llvm.loop !6

145:                                              ; preds = %116, %102
  %146 = phi i64 [ 0, %102 ], [ %142, %116 ]
  %147 = icmp eq i64 %112, 0
  br i1 %147, label %160, label %148

148:                                              ; preds = %145
  %149 = add i64 %146, %99
  %150 = getelementptr inbounds i32, i32* %0, i64 %149
  %151 = bitcast i32* %150 to <4 x i32>*
  %152 = load <4 x i32>, <4 x i32>* %151, align 4
  %153 = getelementptr inbounds i32, i32* %150, i64 4
  %154 = bitcast i32* %153 to <4 x i32>*
  %155 = load <4 x i32>, <4 x i32>* %154, align 4
  %156 = or <4 x i32> %152, %106
  %157 = or <4 x i32> %155, %108
  %158 = bitcast i32* %150 to <4 x i32>*
  store <4 x i32> %156, <4 x i32>* %158, align 4
  %159 = bitcast i32* %153 to <4 x i32>*
  store <4 x i32> %157, <4 x i32>* %159, align 4
  br label %160

160:                                              ; preds = %145, %148
  %161 = icmp eq i64 %100, %103
  br i1 %161, label %171, label %162

162:                                              ; preds = %160, %97
  %163 = phi i64 [ %99, %97 ], [ %104, %160 ]
  br label %164

164:                                              ; preds = %162, %164
  %165 = phi i64 [ %166, %164 ], [ %163, %162 ]
  %166 = add nuw nsw i64 %165, 1
  %167 = getelementptr inbounds i32, i32* %0, i64 %165
  %168 = load i32, i32* %167, align 4
  %169 = or i32 %168, %6
  store i32 %169, i32* %167, align 4
  %170 = icmp eq i64 %166, 64
  br i1 %170, label %171, label %164, !llvm.loop !7

171:                                              ; preds = %164, %160
  %172 = add nsw i32 %4, 1
  br label %173

173:                                              ; preds = %95, %171
  %174 = phi i32 [ %172, %171 ], [ %4, %95 ]
  %175 = icmp slt i32 %174, %15
  br i1 %175, label %176, label %266

176:                                              ; preds = %173
  %177 = shl nsw i32 -1, %174
  %178 = icmp slt i32 %2, 2048
  br i1 %178, label %179, label %183

179:                                              ; preds = %176
  %180 = shl nsw i32 -1, %15
  %181 = xor i32 %180, -1
  %182 = and i32 %177, %181
  br label %183

183:                                              ; preds = %176, %179
  %184 = phi i32 [ %182, %179 ], [ %177, %176 ]
  %185 = insertelement <4 x i32> undef, i32 %184, i32 0
  %186 = shufflevector <4 x i32> %185, <4 x i32> undef, <4 x i32> zeroinitializer
  %187 = bitcast i32* %0 to <4 x i32>*
  %188 = load <4 x i32>, <4 x i32>* %187, align 4
  %189 = or <4 x i32> %188, %186
  %190 = bitcast i32* %0 to <4 x i32>*
  store <4 x i32> %189, <4 x i32>* %190, align 4
  %191 = getelementptr inbounds i32, i32* %0, i64 4
  %192 = bitcast i32* %191 to <4 x i32>*
  %193 = load <4 x i32>, <4 x i32>* %192, align 4
  %194 = or <4 x i32> %193, %186
  %195 = bitcast i32* %191 to <4 x i32>*
  store <4 x i32> %194, <4 x i32>* %195, align 4
  %196 = getelementptr inbounds i32, i32* %0, i64 8
  %197 = bitcast i32* %196 to <4 x i32>*
  %198 = load <4 x i32>, <4 x i32>* %197, align 4
  %199 = or <4 x i32> %198, %186
  %200 = bitcast i32* %196 to <4 x i32>*
  store <4 x i32> %199, <4 x i32>* %200, align 4
  %201 = getelementptr inbounds i32, i32* %0, i64 12
  %202 = bitcast i32* %201 to <4 x i32>*
  %203 = load <4 x i32>, <4 x i32>* %202, align 4
  %204 = or <4 x i32> %203, %186
  %205 = bitcast i32* %201 to <4 x i32>*
  store <4 x i32> %204, <4 x i32>* %205, align 4
  %206 = getelementptr inbounds i32, i32* %0, i64 16
  %207 = bitcast i32* %206 to <4 x i32>*
  %208 = load <4 x i32>, <4 x i32>* %207, align 4
  %209 = or <4 x i32> %208, %186
  %210 = bitcast i32* %206 to <4 x i32>*
  store <4 x i32> %209, <4 x i32>* %210, align 4
  %211 = getelementptr inbounds i32, i32* %0, i64 20
  %212 = bitcast i32* %211 to <4 x i32>*
  %213 = load <4 x i32>, <4 x i32>* %212, align 4
  %214 = or <4 x i32> %213, %186
  %215 = bitcast i32* %211 to <4 x i32>*
  store <4 x i32> %214, <4 x i32>* %215, align 4
  %216 = getelementptr inbounds i32, i32* %0, i64 24
  %217 = bitcast i32* %216 to <4 x i32>*
  %218 = load <4 x i32>, <4 x i32>* %217, align 4
  %219 = or <4 x i32> %218, %186
  %220 = bitcast i32* %216 to <4 x i32>*
  store <4 x i32> %219, <4 x i32>* %220, align 4
  %221 = getelementptr inbounds i32, i32* %0, i64 28
  %222 = bitcast i32* %221 to <4 x i32>*
  %223 = load <4 x i32>, <4 x i32>* %222, align 4
  %224 = or <4 x i32> %223, %186
  %225 = bitcast i32* %221 to <4 x i32>*
  store <4 x i32> %224, <4 x i32>* %225, align 4
  %226 = getelementptr inbounds i32, i32* %0, i64 32
  %227 = bitcast i32* %226 to <4 x i32>*
  %228 = load <4 x i32>, <4 x i32>* %227, align 4
  %229 = or <4 x i32> %228, %186
  %230 = bitcast i32* %226 to <4 x i32>*
  store <4 x i32> %229, <4 x i32>* %230, align 4
  %231 = getelementptr inbounds i32, i32* %0, i64 36
  %232 = bitcast i32* %231 to <4 x i32>*
  %233 = load <4 x i32>, <4 x i32>* %232, align 4
  %234 = or <4 x i32> %233, %186
  %235 = bitcast i32* %231 to <4 x i32>*
  store <4 x i32> %234, <4 x i32>* %235, align 4
  %236 = getelementptr inbounds i32, i32* %0, i64 40
  %237 = bitcast i32* %236 to <4 x i32>*
  %238 = load <4 x i32>, <4 x i32>* %237, align 4
  %239 = or <4 x i32> %238, %186
  %240 = bitcast i32* %236 to <4 x i32>*
  store <4 x i32> %239, <4 x i32>* %240, align 4
  %241 = getelementptr inbounds i32, i32* %0, i64 44
  %242 = bitcast i32* %241 to <4 x i32>*
  %243 = load <4 x i32>, <4 x i32>* %242, align 4
  %244 = or <4 x i32> %243, %186
  %245 = bitcast i32* %241 to <4 x i32>*
  store <4 x i32> %244, <4 x i32>* %245, align 4
  %246 = getelementptr inbounds i32, i32* %0, i64 48
  %247 = bitcast i32* %246 to <4 x i32>*
  %248 = load <4 x i32>, <4 x i32>* %247, align 4
  %249 = or <4 x i32> %248, %186
  %250 = bitcast i32* %246 to <4 x i32>*
  store <4 x i32> %249, <4 x i32>* %250, align 4
  %251 = getelementptr inbounds i32, i32* %0, i64 52
  %252 = bitcast i32* %251 to <4 x i32>*
  %253 = load <4 x i32>, <4 x i32>* %252, align 4
  %254 = or <4 x i32> %253, %186
  %255 = bitcast i32* %251 to <4 x i32>*
  store <4 x i32> %254, <4 x i32>* %255, align 4
  %256 = getelementptr inbounds i32, i32* %0, i64 56
  %257 = bitcast i32* %256 to <4 x i32>*
  %258 = load <4 x i32>, <4 x i32>* %257, align 4
  %259 = or <4 x i32> %258, %186
  %260 = bitcast i32* %256 to <4 x i32>*
  store <4 x i32> %259, <4 x i32>* %260, align 4
  %261 = getelementptr inbounds i32, i32* %0, i64 60
  %262 = bitcast i32* %261 to <4 x i32>*
  %263 = load <4 x i32>, <4 x i32>* %262, align 4
  %264 = or <4 x i32> %263, %186
  %265 = bitcast i32* %261 to <4 x i32>*
  store <4 x i32> %264, <4 x i32>* %265, align 4
  br label %266

266:                                              ; preds = %183, %173
  %267 = icmp eq i32 %15, 32
  %268 = zext i1 %267 to i32
  %269 = sub nsw i32 %15, %268
  %270 = shl i32 1, %269
  %271 = icmp eq i32 %16, 0
  br i1 %271, label %340, label %272

272:                                              ; preds = %266
  %273 = zext i32 %16 to i64
  %274 = icmp ult i32 %16, 8
  br i1 %274, label %331, label %275

275:                                              ; preds = %272
  %276 = and i64 %273, 56
  %277 = insertelement <4 x i32> undef, i32 %270, i32 0
  %278 = shufflevector <4 x i32> %277, <4 x i32> undef, <4 x i32> zeroinitializer
  %279 = insertelement <4 x i32> undef, i32 %270, i32 0
  %280 = shufflevector <4 x i32> %279, <4 x i32> undef, <4 x i32> zeroinitializer
  %281 = add nsw i64 %276, -8
  %282 = lshr exact i64 %281, 3
  %283 = add nuw nsw i64 %282, 1
  %284 = and i64 %283, 1
  %285 = icmp eq i64 %281, 0
  br i1 %285, label %315, label %286

286:                                              ; preds = %275
  %287 = sub nuw nsw i64 %283, %284
  br label %288

288:                                              ; preds = %288, %286
  %289 = phi i64 [ 0, %286 ], [ %312, %288 ]
  %290 = phi i64 [ %287, %286 ], [ %313, %288 ]
  %291 = getelementptr inbounds i32, i32* %0, i64 %289
  %292 = bitcast i32* %291 to <4 x i32>*
  %293 = load <4 x i32>, <4 x i32>* %292, align 4
  %294 = getelementptr inbounds i32, i32* %291, i64 4
  %295 = bitcast i32* %294 to <4 x i32>*
  %296 = load <4 x i32>, <4 x i32>* %295, align 4
  %297 = or <4 x i32> %293, %278
  %298 = or <4 x i32> %296, %280
  %299 = bitcast i32* %291 to <4 x i32>*
  store <4 x i32> %297, <4 x i32>* %299, align 4
  %300 = bitcast i32* %294 to <4 x i32>*
  store <4 x i32> %298, <4 x i32>* %300, align 4
  %301 = or i64 %289, 8
  %302 = getelementptr inbounds i32, i32* %0, i64 %301
  %303 = bitcast i32* %302 to <4 x i32>*
  %304 = load <4 x i32>, <4 x i32>* %303, align 4
  %305 = getelementptr inbounds i32, i32* %302, i64 4
  %306 = bitcast i32* %305 to <4 x i32>*
  %307 = load <4 x i32>, <4 x i32>* %306, align 4
  %308 = or <4 x i32> %304, %278
  %309 = or <4 x i32> %307, %280
  %310 = bitcast i32* %302 to <4 x i32>*
  store <4 x i32> %308, <4 x i32>* %310, align 4
  %311 = bitcast i32* %305 to <4 x i32>*
  store <4 x i32> %309, <4 x i32>* %311, align 4
  %312 = add i64 %289, 16
  %313 = add i64 %290, -2
  %314 = icmp eq i64 %313, 0
  br i1 %314, label %315, label %288, !llvm.loop !8

315:                                              ; preds = %288, %275
  %316 = phi i64 [ 0, %275 ], [ %312, %288 ]
  %317 = icmp eq i64 %284, 0
  br i1 %317, label %329, label %318

318:                                              ; preds = %315
  %319 = getelementptr inbounds i32, i32* %0, i64 %316
  %320 = bitcast i32* %319 to <4 x i32>*
  %321 = load <4 x i32>, <4 x i32>* %320, align 4
  %322 = getelementptr inbounds i32, i32* %319, i64 4
  %323 = bitcast i32* %322 to <4 x i32>*
  %324 = load <4 x i32>, <4 x i32>* %323, align 4
  %325 = or <4 x i32> %321, %278
  %326 = or <4 x i32> %324, %280
  %327 = bitcast i32* %319 to <4 x i32>*
  store <4 x i32> %325, <4 x i32>* %327, align 4
  %328 = bitcast i32* %322 to <4 x i32>*
  store <4 x i32> %326, <4 x i32>* %328, align 4
  br label %329

329:                                              ; preds = %315, %318
  %330 = icmp eq i64 %276, %273
  br i1 %330, label %340, label %331

331:                                              ; preds = %329, %272
  %332 = phi i64 [ 0, %272 ], [ %276, %329 ]
  br label %333

333:                                              ; preds = %331, %333
  %334 = phi i64 [ %338, %333 ], [ %332, %331 ]
  %335 = getelementptr inbounds i32, i32* %0, i64 %334
  %336 = load i32, i32* %335, align 4
  %337 = or i32 %336, %270
  store i32 %337, i32* %335, align 4
  %338 = add nuw nsw i64 %334, 1
  %339 = icmp eq i64 %338, %273
  br i1 %339, label %340, label %333, !llvm.loop !9

340:                                              ; preds = %333, %88, %329, %84, %266, %18, %9
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden signext i8 @_ZNK6icu_696BMPSet8containsEi(%"class.icu_69::BMPSet"* nocapture readonly, i32) unnamed_addr #2 align 2 {
  %3 = icmp ult i32 %1, 256
  br i1 %3, label %4, label %8

4:                                                ; preds = %2
  %5 = sext i32 %1 to i64
  %6 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 1, i64 %5
  %7 = load i8, i8* %6, align 1
  br label %122

8:                                                ; preds = %2
  %9 = icmp ult i32 %1, 2048
  br i1 %9, label %10, label %20

10:                                               ; preds = %8
  %11 = and i32 %1, 63
  %12 = zext i32 %11 to i64
  %13 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 4, i64 %12
  %14 = load i32, i32* %13, align 4
  %15 = lshr i32 %1, 6
  %16 = shl i32 1, %15
  %17 = and i32 %14, %16
  %18 = icmp ne i32 %17, 0
  %19 = zext i1 %18 to i8
  br label %122

20:                                               ; preds = %8
  %21 = icmp ult i32 %1, 55296
  %22 = and i32 %1, -8192
  %23 = icmp eq i32 %22, 57344
  %24 = or i1 %21, %23
  br i1 %24, label %25, label %80

25:                                               ; preds = %20
  %26 = ashr i32 %1, 12
  %27 = lshr i32 %1, 6
  %28 = and i32 %27, 63
  %29 = zext i32 %28 to i64
  %30 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 5, i64 %29
  %31 = load i32, i32* %30, align 4
  %32 = lshr i32 %31, %26
  %33 = and i32 %32, 65537
  %34 = icmp ult i32 %33, 2
  br i1 %34, label %35, label %37

35:                                               ; preds = %25
  %36 = trunc i32 %33 to i8
  br label %122

37:                                               ; preds = %25
  %38 = sext i32 %26 to i64
  %39 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 6, i64 %38
  %40 = load i32, i32* %39, align 4
  %41 = add nsw i32 %26, 1
  %42 = sext i32 %41 to i64
  %43 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 6, i64 %42
  %44 = load i32, i32* %43, align 4
  %45 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 8
  %46 = load i32*, i32** %45, align 8
  %47 = sext i32 %40 to i64
  %48 = getelementptr inbounds i32, i32* %46, i64 %47
  %49 = load i32, i32* %48, align 4
  %50 = icmp sgt i32 %49, %1
  br i1 %50, label %76, label %51

51:                                               ; preds = %37
  %52 = icmp slt i32 %40, %44
  br i1 %52, label %53, label %76

53:                                               ; preds = %51
  %54 = add nsw i32 %44, -1
  %55 = sext i32 %54 to i64
  %56 = getelementptr inbounds i32, i32* %46, i64 %55
  %57 = load i32, i32* %56, align 4
  %58 = icmp sgt i32 %57, %1
  br i1 %58, label %59, label %76

59:                                               ; preds = %53
  %60 = add nsw i32 %44, %40
  %61 = ashr i32 %60, 1
  %62 = icmp eq i32 %61, %40
  br i1 %62, label %76, label %63

63:                                               ; preds = %59, %63
  %64 = phi i32 [ %74, %63 ], [ %61, %59 ]
  %65 = phi i32 [ %72, %63 ], [ %44, %59 ]
  %66 = phi i32 [ %71, %63 ], [ %40, %59 ]
  %67 = sext i32 %64 to i64
  %68 = getelementptr inbounds i32, i32* %46, i64 %67
  %69 = load i32, i32* %68, align 4
  %70 = icmp sgt i32 %69, %1
  %71 = select i1 %70, i32 %66, i32 %64
  %72 = select i1 %70, i32 %64, i32 %65
  %73 = add nsw i32 %72, %71
  %74 = ashr i32 %73, 1
  %75 = icmp eq i32 %74, %71
  br i1 %75, label %76, label %63

76:                                               ; preds = %63, %37, %51, %53, %59
  %77 = phi i32 [ %40, %37 ], [ %44, %53 ], [ %44, %51 ], [ %44, %59 ], [ %72, %63 ]
  %78 = trunc i32 %77 to i8
  %79 = and i8 %78, 1
  br label %122

80:                                               ; preds = %20
  %81 = icmp ult i32 %1, 1114112
  br i1 %81, label %82, label %122

82:                                               ; preds = %80
  %83 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 6, i64 13
  %84 = load i32, i32* %83, align 4
  %85 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 6, i64 17
  %86 = load i32, i32* %85, align 4
  %87 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 8
  %88 = load i32*, i32** %87, align 8
  %89 = sext i32 %84 to i64
  %90 = getelementptr inbounds i32, i32* %88, i64 %89
  %91 = load i32, i32* %90, align 4
  %92 = icmp sgt i32 %91, %1
  br i1 %92, label %118, label %93

93:                                               ; preds = %82
  %94 = icmp slt i32 %84, %86
  br i1 %94, label %95, label %118

95:                                               ; preds = %93
  %96 = add nsw i32 %86, -1
  %97 = sext i32 %96 to i64
  %98 = getelementptr inbounds i32, i32* %88, i64 %97
  %99 = load i32, i32* %98, align 4
  %100 = icmp sgt i32 %99, %1
  br i1 %100, label %101, label %118

101:                                              ; preds = %95
  %102 = add nsw i32 %86, %84
  %103 = ashr i32 %102, 1
  %104 = icmp eq i32 %103, %84
  br i1 %104, label %118, label %105

105:                                              ; preds = %101, %105
  %106 = phi i32 [ %116, %105 ], [ %103, %101 ]
  %107 = phi i32 [ %114, %105 ], [ %86, %101 ]
  %108 = phi i32 [ %113, %105 ], [ %84, %101 ]
  %109 = sext i32 %106 to i64
  %110 = getelementptr inbounds i32, i32* %88, i64 %109
  %111 = load i32, i32* %110, align 4
  %112 = icmp sgt i32 %111, %1
  %113 = select i1 %112, i32 %108, i32 %106
  %114 = select i1 %112, i32 %106, i32 %107
  %115 = add nsw i32 %114, %113
  %116 = ashr i32 %115, 1
  %117 = icmp eq i32 %116, %113
  br i1 %117, label %118, label %105

118:                                              ; preds = %105, %82, %93, %95, %101
  %119 = phi i32 [ %84, %82 ], [ %86, %95 ], [ %86, %93 ], [ %86, %101 ], [ %114, %105 ]
  %120 = trunc i32 %119 to i8
  %121 = and i8 %120, 1
  br label %122

122:                                              ; preds = %80, %35, %76, %118, %10, %4
  %123 = phi i8 [ %7, %4 ], [ %19, %10 ], [ %121, %118 ], [ %36, %35 ], [ %79, %76 ], [ 0, %80 ]
  ret i8 %123
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i16* @_ZNK6icu_696BMPSet4spanEPKDsS2_17USetSpanCondition(%"class.icu_69::BMPSet"* readonly, i16* readonly, i16* readnone, i32) local_unnamed_addr #2 align 2 {
  %5 = icmp eq i32 %3, 0
  %6 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 8
  %7 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 6, i64 16
  %8 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 6, i64 17
  %9 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 6, i64 13
  %10 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 6, i64 14
  br i1 %5, label %180, label %11

11:                                               ; preds = %4, %176
  %12 = phi i16* [ %178, %176 ], [ %1, %4 ]
  %13 = load i16, i16* %12, align 2
  %14 = zext i16 %13 to i32
  %15 = icmp ult i16 %13, 256
  br i1 %15, label %16, label %21

16:                                               ; preds = %11
  %17 = zext i16 %13 to i64
  %18 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 1, i64 %17
  %19 = load i8, i8* %18, align 1
  %20 = icmp eq i8 %19, 0
  br i1 %20, label %349, label %176

21:                                               ; preds = %11
  %22 = icmp ult i16 %13, 2048
  br i1 %22, label %23, label %32

23:                                               ; preds = %21
  %24 = and i32 %14, 63
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 4, i64 %25
  %27 = load i32, i32* %26, align 4
  %28 = lshr i32 %14, 6
  %29 = shl i32 1, %28
  %30 = and i32 %27, %29
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %349, label %176

32:                                               ; preds = %21
  %33 = and i16 %13, -2048
  %34 = icmp eq i16 %33, -10240
  br i1 %34, label %89, label %35

35:                                               ; preds = %32
  %36 = lshr i32 %14, 12
  %37 = lshr i32 %14, 6
  %38 = and i32 %37, 63
  %39 = zext i32 %38 to i64
  %40 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 5, i64 %39
  %41 = load i32, i32* %40, align 4
  %42 = lshr i32 %41, %36
  %43 = and i32 %42, 65537
  %44 = icmp ult i32 %43, 2
  br i1 %44, label %45, label %47

45:                                               ; preds = %35
  %46 = icmp eq i32 %43, 0
  br i1 %46, label %349, label %176

47:                                               ; preds = %35
  %48 = zext i32 %36 to i64
  %49 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 6, i64 %48
  %50 = load i32, i32* %49, align 4
  %51 = add nuw nsw i32 %36, 1
  %52 = zext i32 %51 to i64
  %53 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 6, i64 %52
  %54 = load i32, i32* %53, align 4
  %55 = load i32*, i32** %6, align 8
  %56 = sext i32 %50 to i64
  %57 = getelementptr inbounds i32, i32* %55, i64 %56
  %58 = load i32, i32* %57, align 4
  %59 = icmp sgt i32 %58, %14
  br i1 %59, label %85, label %60

60:                                               ; preds = %47
  %61 = icmp slt i32 %50, %54
  br i1 %61, label %62, label %85

62:                                               ; preds = %60
  %63 = add nsw i32 %54, -1
  %64 = sext i32 %63 to i64
  %65 = getelementptr inbounds i32, i32* %55, i64 %64
  %66 = load i32, i32* %65, align 4
  %67 = icmp sgt i32 %66, %14
  br i1 %67, label %68, label %85

68:                                               ; preds = %62
  %69 = add nsw i32 %54, %50
  %70 = ashr i32 %69, 1
  %71 = icmp eq i32 %70, %50
  br i1 %71, label %85, label %72

72:                                               ; preds = %68, %72
  %73 = phi i32 [ %83, %72 ], [ %70, %68 ]
  %74 = phi i32 [ %81, %72 ], [ %54, %68 ]
  %75 = phi i32 [ %80, %72 ], [ %50, %68 ]
  %76 = sext i32 %73 to i64
  %77 = getelementptr inbounds i32, i32* %55, i64 %76
  %78 = load i32, i32* %77, align 4
  %79 = icmp sgt i32 %78, %14
  %80 = select i1 %79, i32 %75, i32 %73
  %81 = select i1 %79, i32 %73, i32 %74
  %82 = add nsw i32 %81, %80
  %83 = ashr i32 %82, 1
  %84 = icmp eq i32 %83, %80
  br i1 %84, label %85, label %72

85:                                               ; preds = %72, %47, %60, %62, %68
  %86 = phi i32 [ %50, %47 ], [ %54, %62 ], [ %54, %60 ], [ %54, %68 ], [ %81, %72 ]
  %87 = and i32 %86, 1
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %349, label %176

89:                                               ; preds = %32
  %90 = icmp ugt i16 %13, -9217
  br i1 %90, label %98, label %91

91:                                               ; preds = %89
  %92 = getelementptr inbounds i16, i16* %12, i64 1
  %93 = icmp eq i16* %92, %2
  br i1 %93, label %98, label %94

94:                                               ; preds = %91
  %95 = load i16, i16* %92, align 2
  %96 = and i16 %95, -1024
  %97 = icmp eq i16 %96, -9216
  br i1 %97, label %135, label %98

98:                                               ; preds = %94, %91, %89
  %99 = load i32, i32* %9, align 4
  %100 = load i32, i32* %10, align 4
  %101 = load i32*, i32** %6, align 8
  %102 = sext i32 %99 to i64
  %103 = getelementptr inbounds i32, i32* %101, i64 %102
  %104 = load i32, i32* %103, align 4
  %105 = icmp sgt i32 %104, %14
  br i1 %105, label %131, label %106

106:                                              ; preds = %98
  %107 = icmp slt i32 %99, %100
  br i1 %107, label %108, label %131

108:                                              ; preds = %106
  %109 = add nsw i32 %100, -1
  %110 = sext i32 %109 to i64
  %111 = getelementptr inbounds i32, i32* %101, i64 %110
  %112 = load i32, i32* %111, align 4
  %113 = icmp sgt i32 %112, %14
  br i1 %113, label %114, label %131

114:                                              ; preds = %108
  %115 = add nsw i32 %100, %99
  %116 = ashr i32 %115, 1
  %117 = icmp eq i32 %116, %99
  br i1 %117, label %131, label %118

118:                                              ; preds = %114, %118
  %119 = phi i32 [ %129, %118 ], [ %116, %114 ]
  %120 = phi i32 [ %127, %118 ], [ %100, %114 ]
  %121 = phi i32 [ %126, %118 ], [ %99, %114 ]
  %122 = sext i32 %119 to i64
  %123 = getelementptr inbounds i32, i32* %101, i64 %122
  %124 = load i32, i32* %123, align 4
  %125 = icmp sgt i32 %124, %14
  %126 = select i1 %125, i32 %121, i32 %119
  %127 = select i1 %125, i32 %119, i32 %120
  %128 = add nsw i32 %127, %126
  %129 = ashr i32 %128, 1
  %130 = icmp eq i32 %129, %126
  br i1 %130, label %131, label %118

131:                                              ; preds = %118, %98, %106, %108, %114
  %132 = phi i32 [ %99, %98 ], [ %100, %108 ], [ %100, %106 ], [ %100, %114 ], [ %127, %118 ]
  %133 = and i32 %132, 1
  %134 = icmp eq i32 %133, 0
  br i1 %134, label %349, label %176

135:                                              ; preds = %94
  %136 = zext i16 %95 to i32
  %137 = shl nuw nsw i32 %14, 10
  %138 = add nsw i32 %137, -56613888
  %139 = add nsw i32 %138, %136
  %140 = load i32, i32* %7, align 4
  %141 = load i32, i32* %8, align 4
  %142 = load i32*, i32** %6, align 8
  %143 = sext i32 %140 to i64
  %144 = getelementptr inbounds i32, i32* %142, i64 %143
  %145 = load i32, i32* %144, align 4
  %146 = icmp sgt i32 %145, %139
  br i1 %146, label %172, label %147

147:                                              ; preds = %135
  %148 = icmp slt i32 %140, %141
  br i1 %148, label %149, label %172

149:                                              ; preds = %147
  %150 = add nsw i32 %141, -1
  %151 = sext i32 %150 to i64
  %152 = getelementptr inbounds i32, i32* %142, i64 %151
  %153 = load i32, i32* %152, align 4
  %154 = icmp sgt i32 %153, %139
  br i1 %154, label %155, label %172

155:                                              ; preds = %149
  %156 = add nsw i32 %141, %140
  %157 = ashr i32 %156, 1
  %158 = icmp eq i32 %157, %140
  br i1 %158, label %172, label %159

159:                                              ; preds = %155, %159
  %160 = phi i32 [ %170, %159 ], [ %157, %155 ]
  %161 = phi i32 [ %168, %159 ], [ %141, %155 ]
  %162 = phi i32 [ %167, %159 ], [ %140, %155 ]
  %163 = sext i32 %160 to i64
  %164 = getelementptr inbounds i32, i32* %142, i64 %163
  %165 = load i32, i32* %164, align 4
  %166 = icmp sgt i32 %165, %139
  %167 = select i1 %166, i32 %162, i32 %160
  %168 = select i1 %166, i32 %160, i32 %161
  %169 = add nsw i32 %168, %167
  %170 = ashr i32 %169, 1
  %171 = icmp eq i32 %170, %167
  br i1 %171, label %172, label %159

172:                                              ; preds = %159, %135, %147, %149, %155
  %173 = phi i32 [ %140, %135 ], [ %141, %149 ], [ %141, %147 ], [ %141, %155 ], [ %168, %159 ]
  %174 = and i32 %173, 1
  %175 = icmp eq i32 %174, 0
  br i1 %175, label %349, label %176

176:                                              ; preds = %172, %45, %85, %16, %131, %23
  %177 = phi i16* [ %12, %16 ], [ %12, %23 ], [ %12, %131 ], [ %12, %85 ], [ %12, %45 ], [ %92, %172 ]
  %178 = getelementptr inbounds i16, i16* %177, i64 1
  %179 = icmp ult i16* %178, %2
  br i1 %179, label %11, label %349

180:                                              ; preds = %4, %345
  %181 = phi i16* [ %347, %345 ], [ %1, %4 ]
  %182 = load i16, i16* %181, align 2
  %183 = zext i16 %182 to i32
  %184 = icmp ult i16 %182, 256
  br i1 %184, label %185, label %190

185:                                              ; preds = %180
  %186 = zext i16 %182 to i64
  %187 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 1, i64 %186
  %188 = load i8, i8* %187, align 1
  %189 = icmp eq i8 %188, 0
  br i1 %189, label %345, label %349

190:                                              ; preds = %180
  %191 = icmp ult i16 %182, 2048
  br i1 %191, label %192, label %201

192:                                              ; preds = %190
  %193 = and i32 %183, 63
  %194 = zext i32 %193 to i64
  %195 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 4, i64 %194
  %196 = load i32, i32* %195, align 4
  %197 = lshr i32 %183, 6
  %198 = shl i32 1, %197
  %199 = and i32 %196, %198
  %200 = icmp eq i32 %199, 0
  br i1 %200, label %345, label %349

201:                                              ; preds = %190
  %202 = and i16 %182, -2048
  %203 = icmp eq i16 %202, -10240
  br i1 %203, label %258, label %204

204:                                              ; preds = %201
  %205 = lshr i32 %183, 12
  %206 = lshr i32 %183, 6
  %207 = and i32 %206, 63
  %208 = zext i32 %207 to i64
  %209 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 5, i64 %208
  %210 = load i32, i32* %209, align 4
  %211 = lshr i32 %210, %205
  %212 = and i32 %211, 65537
  %213 = icmp ult i32 %212, 2
  br i1 %213, label %214, label %216

214:                                              ; preds = %204
  %215 = icmp eq i32 %212, 0
  br i1 %215, label %345, label %349

216:                                              ; preds = %204
  %217 = zext i32 %205 to i64
  %218 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 6, i64 %217
  %219 = load i32, i32* %218, align 4
  %220 = add nuw nsw i32 %205, 1
  %221 = zext i32 %220 to i64
  %222 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 6, i64 %221
  %223 = load i32, i32* %222, align 4
  %224 = load i32*, i32** %6, align 8
  %225 = sext i32 %219 to i64
  %226 = getelementptr inbounds i32, i32* %224, i64 %225
  %227 = load i32, i32* %226, align 4
  %228 = icmp sgt i32 %227, %183
  br i1 %228, label %254, label %229

229:                                              ; preds = %216
  %230 = icmp slt i32 %219, %223
  br i1 %230, label %231, label %254

231:                                              ; preds = %229
  %232 = add nsw i32 %223, -1
  %233 = sext i32 %232 to i64
  %234 = getelementptr inbounds i32, i32* %224, i64 %233
  %235 = load i32, i32* %234, align 4
  %236 = icmp sgt i32 %235, %183
  br i1 %236, label %237, label %254

237:                                              ; preds = %231
  %238 = add nsw i32 %223, %219
  %239 = ashr i32 %238, 1
  %240 = icmp eq i32 %239, %219
  br i1 %240, label %254, label %241

241:                                              ; preds = %237, %241
  %242 = phi i32 [ %252, %241 ], [ %239, %237 ]
  %243 = phi i32 [ %250, %241 ], [ %223, %237 ]
  %244 = phi i32 [ %249, %241 ], [ %219, %237 ]
  %245 = sext i32 %242 to i64
  %246 = getelementptr inbounds i32, i32* %224, i64 %245
  %247 = load i32, i32* %246, align 4
  %248 = icmp sgt i32 %247, %183
  %249 = select i1 %248, i32 %244, i32 %242
  %250 = select i1 %248, i32 %242, i32 %243
  %251 = add nsw i32 %250, %249
  %252 = ashr i32 %251, 1
  %253 = icmp eq i32 %252, %249
  br i1 %253, label %254, label %241

254:                                              ; preds = %241, %216, %229, %231, %237
  %255 = phi i32 [ %219, %216 ], [ %223, %231 ], [ %223, %229 ], [ %223, %237 ], [ %250, %241 ]
  %256 = and i32 %255, 1
  %257 = icmp eq i32 %256, 0
  br i1 %257, label %345, label %349

258:                                              ; preds = %201
  %259 = icmp ugt i16 %182, -9217
  br i1 %259, label %267, label %260

260:                                              ; preds = %258
  %261 = getelementptr inbounds i16, i16* %181, i64 1
  %262 = icmp eq i16* %261, %2
  br i1 %262, label %267, label %263

263:                                              ; preds = %260
  %264 = load i16, i16* %261, align 2
  %265 = and i16 %264, -1024
  %266 = icmp eq i16 %265, -9216
  br i1 %266, label %304, label %267

267:                                              ; preds = %263, %260, %258
  %268 = load i32, i32* %9, align 4
  %269 = load i32, i32* %10, align 4
  %270 = load i32*, i32** %6, align 8
  %271 = sext i32 %268 to i64
  %272 = getelementptr inbounds i32, i32* %270, i64 %271
  %273 = load i32, i32* %272, align 4
  %274 = icmp sgt i32 %273, %183
  br i1 %274, label %300, label %275

275:                                              ; preds = %267
  %276 = icmp slt i32 %268, %269
  br i1 %276, label %277, label %300

277:                                              ; preds = %275
  %278 = add nsw i32 %269, -1
  %279 = sext i32 %278 to i64
  %280 = getelementptr inbounds i32, i32* %270, i64 %279
  %281 = load i32, i32* %280, align 4
  %282 = icmp sgt i32 %281, %183
  br i1 %282, label %283, label %300

283:                                              ; preds = %277
  %284 = add nsw i32 %269, %268
  %285 = ashr i32 %284, 1
  %286 = icmp eq i32 %285, %268
  br i1 %286, label %300, label %287

287:                                              ; preds = %283, %287
  %288 = phi i32 [ %298, %287 ], [ %285, %283 ]
  %289 = phi i32 [ %296, %287 ], [ %269, %283 ]
  %290 = phi i32 [ %295, %287 ], [ %268, %283 ]
  %291 = sext i32 %288 to i64
  %292 = getelementptr inbounds i32, i32* %270, i64 %291
  %293 = load i32, i32* %292, align 4
  %294 = icmp sgt i32 %293, %183
  %295 = select i1 %294, i32 %290, i32 %288
  %296 = select i1 %294, i32 %288, i32 %289
  %297 = add nsw i32 %296, %295
  %298 = ashr i32 %297, 1
  %299 = icmp eq i32 %298, %295
  br i1 %299, label %300, label %287

300:                                              ; preds = %287, %267, %275, %277, %283
  %301 = phi i32 [ %268, %267 ], [ %269, %277 ], [ %269, %275 ], [ %269, %283 ], [ %296, %287 ]
  %302 = and i32 %301, 1
  %303 = icmp eq i32 %302, 0
  br i1 %303, label %345, label %349

304:                                              ; preds = %263
  %305 = zext i16 %264 to i32
  %306 = shl nuw nsw i32 %183, 10
  %307 = add nsw i32 %306, -56613888
  %308 = add nsw i32 %307, %305
  %309 = load i32, i32* %7, align 4
  %310 = load i32, i32* %8, align 4
  %311 = load i32*, i32** %6, align 8
  %312 = sext i32 %309 to i64
  %313 = getelementptr inbounds i32, i32* %311, i64 %312
  %314 = load i32, i32* %313, align 4
  %315 = icmp sgt i32 %314, %308
  br i1 %315, label %341, label %316

316:                                              ; preds = %304
  %317 = icmp slt i32 %309, %310
  br i1 %317, label %318, label %341

318:                                              ; preds = %316
  %319 = add nsw i32 %310, -1
  %320 = sext i32 %319 to i64
  %321 = getelementptr inbounds i32, i32* %311, i64 %320
  %322 = load i32, i32* %321, align 4
  %323 = icmp sgt i32 %322, %308
  br i1 %323, label %324, label %341

324:                                              ; preds = %318
  %325 = add nsw i32 %310, %309
  %326 = ashr i32 %325, 1
  %327 = icmp eq i32 %326, %309
  br i1 %327, label %341, label %328

328:                                              ; preds = %324, %328
  %329 = phi i32 [ %339, %328 ], [ %326, %324 ]
  %330 = phi i32 [ %337, %328 ], [ %310, %324 ]
  %331 = phi i32 [ %336, %328 ], [ %309, %324 ]
  %332 = sext i32 %329 to i64
  %333 = getelementptr inbounds i32, i32* %311, i64 %332
  %334 = load i32, i32* %333, align 4
  %335 = icmp sgt i32 %334, %308
  %336 = select i1 %335, i32 %331, i32 %329
  %337 = select i1 %335, i32 %329, i32 %330
  %338 = add nsw i32 %337, %336
  %339 = ashr i32 %338, 1
  %340 = icmp eq i32 %339, %336
  br i1 %340, label %341, label %328

341:                                              ; preds = %328, %304, %316, %318, %324
  %342 = phi i32 [ %309, %304 ], [ %310, %318 ], [ %310, %316 ], [ %310, %324 ], [ %337, %328 ]
  %343 = and i32 %342, 1
  %344 = icmp eq i32 %343, 0
  br i1 %344, label %345, label %349

345:                                              ; preds = %341, %254, %214, %185, %192, %300
  %346 = phi i16* [ %181, %185 ], [ %181, %192 ], [ %181, %300 ], [ %181, %214 ], [ %181, %254 ], [ %261, %341 ]
  %347 = getelementptr inbounds i16, i16* %346, i64 1
  %348 = icmp ult i16* %347, %2
  br i1 %348, label %180, label %349

349:                                              ; preds = %45, %85, %16, %131, %172, %176, %23, %214, %254, %185, %192, %300, %341, %345
  %350 = phi i16* [ %181, %214 ], [ %181, %254 ], [ %181, %341 ], [ %181, %300 ], [ %181, %192 ], [ %347, %345 ], [ %181, %185 ], [ %12, %45 ], [ %12, %85 ], [ %12, %172 ], [ %12, %131 ], [ %12, %23 ], [ %12, %16 ], [ %178, %176 ]
  ret i16* %350
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i16* @_ZNK6icu_696BMPSet8spanBackEPKDsS2_17USetSpanCondition(%"class.icu_69::BMPSet"* readonly, i16* readnone, i16* readonly, i32) local_unnamed_addr #2 align 2 {
  %5 = icmp eq i32 %3, 0
  %6 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 8
  %7 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 6, i64 16
  %8 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 6, i64 17
  %9 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 6, i64 13
  %10 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 6, i64 14
  br i1 %5, label %180, label %11

11:                                               ; preds = %4, %177
  %12 = phi i16* [ %178, %177 ], [ %2, %4 ]
  %13 = getelementptr inbounds i16, i16* %12, i64 -1
  %14 = load i16, i16* %13, align 2
  %15 = zext i16 %14 to i32
  %16 = icmp ult i16 %14, 256
  br i1 %16, label %17, label %22

17:                                               ; preds = %11
  %18 = zext i16 %14 to i64
  %19 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 1, i64 %18
  %20 = load i8, i8* %19, align 1
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %349, label %177

22:                                               ; preds = %11
  %23 = icmp ult i16 %14, 2048
  br i1 %23, label %24, label %33

24:                                               ; preds = %22
  %25 = and i32 %15, 63
  %26 = zext i32 %25 to i64
  %27 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 4, i64 %26
  %28 = load i32, i32* %27, align 4
  %29 = lshr i32 %15, 6
  %30 = shl i32 1, %29
  %31 = and i32 %28, %30
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %349, label %177

33:                                               ; preds = %22
  %34 = and i16 %14, -2048
  %35 = icmp eq i16 %34, -10240
  br i1 %35, label %90, label %36

36:                                               ; preds = %33
  %37 = lshr i32 %15, 12
  %38 = lshr i32 %15, 6
  %39 = and i32 %38, 63
  %40 = zext i32 %39 to i64
  %41 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 5, i64 %40
  %42 = load i32, i32* %41, align 4
  %43 = lshr i32 %42, %37
  %44 = and i32 %43, 65537
  %45 = icmp ult i32 %44, 2
  br i1 %45, label %46, label %48

46:                                               ; preds = %36
  %47 = icmp eq i32 %44, 0
  br i1 %47, label %349, label %177

48:                                               ; preds = %36
  %49 = zext i32 %37 to i64
  %50 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 6, i64 %49
  %51 = load i32, i32* %50, align 4
  %52 = add nuw nsw i32 %37, 1
  %53 = zext i32 %52 to i64
  %54 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 6, i64 %53
  %55 = load i32, i32* %54, align 4
  %56 = load i32*, i32** %6, align 8
  %57 = sext i32 %51 to i64
  %58 = getelementptr inbounds i32, i32* %56, i64 %57
  %59 = load i32, i32* %58, align 4
  %60 = icmp sgt i32 %59, %15
  br i1 %60, label %86, label %61

61:                                               ; preds = %48
  %62 = icmp slt i32 %51, %55
  br i1 %62, label %63, label %86

63:                                               ; preds = %61
  %64 = add nsw i32 %55, -1
  %65 = sext i32 %64 to i64
  %66 = getelementptr inbounds i32, i32* %56, i64 %65
  %67 = load i32, i32* %66, align 4
  %68 = icmp sgt i32 %67, %15
  br i1 %68, label %69, label %86

69:                                               ; preds = %63
  %70 = add nsw i32 %55, %51
  %71 = ashr i32 %70, 1
  %72 = icmp eq i32 %71, %51
  br i1 %72, label %86, label %73

73:                                               ; preds = %69, %73
  %74 = phi i32 [ %84, %73 ], [ %71, %69 ]
  %75 = phi i32 [ %82, %73 ], [ %55, %69 ]
  %76 = phi i32 [ %81, %73 ], [ %51, %69 ]
  %77 = sext i32 %74 to i64
  %78 = getelementptr inbounds i32, i32* %56, i64 %77
  %79 = load i32, i32* %78, align 4
  %80 = icmp sgt i32 %79, %15
  %81 = select i1 %80, i32 %76, i32 %74
  %82 = select i1 %80, i32 %74, i32 %75
  %83 = add nsw i32 %82, %81
  %84 = ashr i32 %83, 1
  %85 = icmp eq i32 %84, %81
  br i1 %85, label %86, label %73

86:                                               ; preds = %73, %48, %61, %63, %69
  %87 = phi i32 [ %51, %48 ], [ %55, %63 ], [ %55, %61 ], [ %55, %69 ], [ %82, %73 ]
  %88 = and i32 %87, 1
  %89 = icmp eq i32 %88, 0
  br i1 %89, label %349, label %177

90:                                               ; preds = %33
  %91 = icmp ult i16 %14, -9216
  %92 = icmp eq i16* %13, %1
  %93 = or i1 %91, %92
  br i1 %93, label %99, label %94

94:                                               ; preds = %90
  %95 = getelementptr inbounds i16, i16* %12, i64 -2
  %96 = load i16, i16* %95, align 2
  %97 = and i16 %96, -1024
  %98 = icmp eq i16 %97, -10240
  br i1 %98, label %136, label %99

99:                                               ; preds = %94, %90
  %100 = load i32, i32* %9, align 4
  %101 = load i32, i32* %10, align 4
  %102 = load i32*, i32** %6, align 8
  %103 = sext i32 %100 to i64
  %104 = getelementptr inbounds i32, i32* %102, i64 %103
  %105 = load i32, i32* %104, align 4
  %106 = icmp sgt i32 %105, %15
  br i1 %106, label %132, label %107

107:                                              ; preds = %99
  %108 = icmp slt i32 %100, %101
  br i1 %108, label %109, label %132

109:                                              ; preds = %107
  %110 = add nsw i32 %101, -1
  %111 = sext i32 %110 to i64
  %112 = getelementptr inbounds i32, i32* %102, i64 %111
  %113 = load i32, i32* %112, align 4
  %114 = icmp sgt i32 %113, %15
  br i1 %114, label %115, label %132

115:                                              ; preds = %109
  %116 = add nsw i32 %101, %100
  %117 = ashr i32 %116, 1
  %118 = icmp eq i32 %117, %100
  br i1 %118, label %132, label %119

119:                                              ; preds = %115, %119
  %120 = phi i32 [ %130, %119 ], [ %117, %115 ]
  %121 = phi i32 [ %128, %119 ], [ %101, %115 ]
  %122 = phi i32 [ %127, %119 ], [ %100, %115 ]
  %123 = sext i32 %120 to i64
  %124 = getelementptr inbounds i32, i32* %102, i64 %123
  %125 = load i32, i32* %124, align 4
  %126 = icmp sgt i32 %125, %15
  %127 = select i1 %126, i32 %122, i32 %120
  %128 = select i1 %126, i32 %120, i32 %121
  %129 = add nsw i32 %128, %127
  %130 = ashr i32 %129, 1
  %131 = icmp eq i32 %130, %127
  br i1 %131, label %132, label %119

132:                                              ; preds = %119, %99, %107, %109, %115
  %133 = phi i32 [ %100, %99 ], [ %101, %109 ], [ %101, %107 ], [ %101, %115 ], [ %128, %119 ]
  %134 = and i32 %133, 1
  %135 = icmp eq i32 %134, 0
  br i1 %135, label %349, label %177

136:                                              ; preds = %94
  %137 = zext i16 %96 to i32
  %138 = shl nuw nsw i32 %137, 10
  %139 = add nuw nsw i32 %15, -56613888
  %140 = add nsw i32 %139, %138
  %141 = load i32, i32* %7, align 4
  %142 = load i32, i32* %8, align 4
  %143 = load i32*, i32** %6, align 8
  %144 = sext i32 %141 to i64
  %145 = getelementptr inbounds i32, i32* %143, i64 %144
  %146 = load i32, i32* %145, align 4
  %147 = icmp sgt i32 %146, %140
  br i1 %147, label %173, label %148

148:                                              ; preds = %136
  %149 = icmp slt i32 %141, %142
  br i1 %149, label %150, label %173

150:                                              ; preds = %148
  %151 = add nsw i32 %142, -1
  %152 = sext i32 %151 to i64
  %153 = getelementptr inbounds i32, i32* %143, i64 %152
  %154 = load i32, i32* %153, align 4
  %155 = icmp sgt i32 %154, %140
  br i1 %155, label %156, label %173

156:                                              ; preds = %150
  %157 = add nsw i32 %142, %141
  %158 = ashr i32 %157, 1
  %159 = icmp eq i32 %158, %141
  br i1 %159, label %173, label %160

160:                                              ; preds = %156, %160
  %161 = phi i32 [ %171, %160 ], [ %158, %156 ]
  %162 = phi i32 [ %169, %160 ], [ %142, %156 ]
  %163 = phi i32 [ %168, %160 ], [ %141, %156 ]
  %164 = sext i32 %161 to i64
  %165 = getelementptr inbounds i32, i32* %143, i64 %164
  %166 = load i32, i32* %165, align 4
  %167 = icmp sgt i32 %166, %140
  %168 = select i1 %167, i32 %163, i32 %161
  %169 = select i1 %167, i32 %161, i32 %162
  %170 = add nsw i32 %169, %168
  %171 = ashr i32 %170, 1
  %172 = icmp eq i32 %171, %168
  br i1 %172, label %173, label %160

173:                                              ; preds = %160, %136, %148, %150, %156
  %174 = phi i32 [ %141, %136 ], [ %142, %150 ], [ %142, %148 ], [ %142, %156 ], [ %169, %160 ]
  %175 = and i32 %174, 1
  %176 = icmp eq i32 %175, 0
  br i1 %176, label %349, label %177

177:                                              ; preds = %173, %46, %86, %17, %132, %24
  %178 = phi i16* [ %13, %17 ], [ %13, %24 ], [ %13, %132 ], [ %13, %86 ], [ %13, %46 ], [ %95, %173 ]
  %179 = icmp eq i16* %178, %1
  br i1 %179, label %349, label %11

180:                                              ; preds = %4, %346
  %181 = phi i16* [ %347, %346 ], [ %2, %4 ]
  %182 = getelementptr inbounds i16, i16* %181, i64 -1
  %183 = load i16, i16* %182, align 2
  %184 = zext i16 %183 to i32
  %185 = icmp ult i16 %183, 256
  br i1 %185, label %186, label %191

186:                                              ; preds = %180
  %187 = zext i16 %183 to i64
  %188 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 1, i64 %187
  %189 = load i8, i8* %188, align 1
  %190 = icmp eq i8 %189, 0
  br i1 %190, label %346, label %349

191:                                              ; preds = %180
  %192 = icmp ult i16 %183, 2048
  br i1 %192, label %193, label %202

193:                                              ; preds = %191
  %194 = and i32 %184, 63
  %195 = zext i32 %194 to i64
  %196 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 4, i64 %195
  %197 = load i32, i32* %196, align 4
  %198 = lshr i32 %184, 6
  %199 = shl i32 1, %198
  %200 = and i32 %197, %199
  %201 = icmp eq i32 %200, 0
  br i1 %201, label %346, label %349

202:                                              ; preds = %191
  %203 = and i16 %183, -2048
  %204 = icmp eq i16 %203, -10240
  br i1 %204, label %259, label %205

205:                                              ; preds = %202
  %206 = lshr i32 %184, 12
  %207 = lshr i32 %184, 6
  %208 = and i32 %207, 63
  %209 = zext i32 %208 to i64
  %210 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 5, i64 %209
  %211 = load i32, i32* %210, align 4
  %212 = lshr i32 %211, %206
  %213 = and i32 %212, 65537
  %214 = icmp ult i32 %213, 2
  br i1 %214, label %215, label %217

215:                                              ; preds = %205
  %216 = icmp eq i32 %213, 0
  br i1 %216, label %346, label %349

217:                                              ; preds = %205
  %218 = zext i32 %206 to i64
  %219 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 6, i64 %218
  %220 = load i32, i32* %219, align 4
  %221 = add nuw nsw i32 %206, 1
  %222 = zext i32 %221 to i64
  %223 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 6, i64 %222
  %224 = load i32, i32* %223, align 4
  %225 = load i32*, i32** %6, align 8
  %226 = sext i32 %220 to i64
  %227 = getelementptr inbounds i32, i32* %225, i64 %226
  %228 = load i32, i32* %227, align 4
  %229 = icmp sgt i32 %228, %184
  br i1 %229, label %255, label %230

230:                                              ; preds = %217
  %231 = icmp slt i32 %220, %224
  br i1 %231, label %232, label %255

232:                                              ; preds = %230
  %233 = add nsw i32 %224, -1
  %234 = sext i32 %233 to i64
  %235 = getelementptr inbounds i32, i32* %225, i64 %234
  %236 = load i32, i32* %235, align 4
  %237 = icmp sgt i32 %236, %184
  br i1 %237, label %238, label %255

238:                                              ; preds = %232
  %239 = add nsw i32 %224, %220
  %240 = ashr i32 %239, 1
  %241 = icmp eq i32 %240, %220
  br i1 %241, label %255, label %242

242:                                              ; preds = %238, %242
  %243 = phi i32 [ %253, %242 ], [ %240, %238 ]
  %244 = phi i32 [ %251, %242 ], [ %224, %238 ]
  %245 = phi i32 [ %250, %242 ], [ %220, %238 ]
  %246 = sext i32 %243 to i64
  %247 = getelementptr inbounds i32, i32* %225, i64 %246
  %248 = load i32, i32* %247, align 4
  %249 = icmp sgt i32 %248, %184
  %250 = select i1 %249, i32 %245, i32 %243
  %251 = select i1 %249, i32 %243, i32 %244
  %252 = add nsw i32 %251, %250
  %253 = ashr i32 %252, 1
  %254 = icmp eq i32 %253, %250
  br i1 %254, label %255, label %242

255:                                              ; preds = %242, %217, %230, %232, %238
  %256 = phi i32 [ %220, %217 ], [ %224, %232 ], [ %224, %230 ], [ %224, %238 ], [ %251, %242 ]
  %257 = and i32 %256, 1
  %258 = icmp eq i32 %257, 0
  br i1 %258, label %346, label %349

259:                                              ; preds = %202
  %260 = icmp ult i16 %183, -9216
  %261 = icmp eq i16* %182, %1
  %262 = or i1 %260, %261
  br i1 %262, label %268, label %263

263:                                              ; preds = %259
  %264 = getelementptr inbounds i16, i16* %181, i64 -2
  %265 = load i16, i16* %264, align 2
  %266 = and i16 %265, -1024
  %267 = icmp eq i16 %266, -10240
  br i1 %267, label %305, label %268

268:                                              ; preds = %263, %259
  %269 = load i32, i32* %9, align 4
  %270 = load i32, i32* %10, align 4
  %271 = load i32*, i32** %6, align 8
  %272 = sext i32 %269 to i64
  %273 = getelementptr inbounds i32, i32* %271, i64 %272
  %274 = load i32, i32* %273, align 4
  %275 = icmp sgt i32 %274, %184
  br i1 %275, label %301, label %276

276:                                              ; preds = %268
  %277 = icmp slt i32 %269, %270
  br i1 %277, label %278, label %301

278:                                              ; preds = %276
  %279 = add nsw i32 %270, -1
  %280 = sext i32 %279 to i64
  %281 = getelementptr inbounds i32, i32* %271, i64 %280
  %282 = load i32, i32* %281, align 4
  %283 = icmp sgt i32 %282, %184
  br i1 %283, label %284, label %301

284:                                              ; preds = %278
  %285 = add nsw i32 %270, %269
  %286 = ashr i32 %285, 1
  %287 = icmp eq i32 %286, %269
  br i1 %287, label %301, label %288

288:                                              ; preds = %284, %288
  %289 = phi i32 [ %299, %288 ], [ %286, %284 ]
  %290 = phi i32 [ %297, %288 ], [ %270, %284 ]
  %291 = phi i32 [ %296, %288 ], [ %269, %284 ]
  %292 = sext i32 %289 to i64
  %293 = getelementptr inbounds i32, i32* %271, i64 %292
  %294 = load i32, i32* %293, align 4
  %295 = icmp sgt i32 %294, %184
  %296 = select i1 %295, i32 %291, i32 %289
  %297 = select i1 %295, i32 %289, i32 %290
  %298 = add nsw i32 %297, %296
  %299 = ashr i32 %298, 1
  %300 = icmp eq i32 %299, %296
  br i1 %300, label %301, label %288

301:                                              ; preds = %288, %268, %276, %278, %284
  %302 = phi i32 [ %269, %268 ], [ %270, %278 ], [ %270, %276 ], [ %270, %284 ], [ %297, %288 ]
  %303 = and i32 %302, 1
  %304 = icmp eq i32 %303, 0
  br i1 %304, label %346, label %349

305:                                              ; preds = %263
  %306 = zext i16 %265 to i32
  %307 = shl nuw nsw i32 %306, 10
  %308 = add nuw nsw i32 %184, -56613888
  %309 = add nsw i32 %308, %307
  %310 = load i32, i32* %7, align 4
  %311 = load i32, i32* %8, align 4
  %312 = load i32*, i32** %6, align 8
  %313 = sext i32 %310 to i64
  %314 = getelementptr inbounds i32, i32* %312, i64 %313
  %315 = load i32, i32* %314, align 4
  %316 = icmp sgt i32 %315, %309
  br i1 %316, label %342, label %317

317:                                              ; preds = %305
  %318 = icmp slt i32 %310, %311
  br i1 %318, label %319, label %342

319:                                              ; preds = %317
  %320 = add nsw i32 %311, -1
  %321 = sext i32 %320 to i64
  %322 = getelementptr inbounds i32, i32* %312, i64 %321
  %323 = load i32, i32* %322, align 4
  %324 = icmp sgt i32 %323, %309
  br i1 %324, label %325, label %342

325:                                              ; preds = %319
  %326 = add nsw i32 %311, %310
  %327 = ashr i32 %326, 1
  %328 = icmp eq i32 %327, %310
  br i1 %328, label %342, label %329

329:                                              ; preds = %325, %329
  %330 = phi i32 [ %340, %329 ], [ %327, %325 ]
  %331 = phi i32 [ %338, %329 ], [ %311, %325 ]
  %332 = phi i32 [ %337, %329 ], [ %310, %325 ]
  %333 = sext i32 %330 to i64
  %334 = getelementptr inbounds i32, i32* %312, i64 %333
  %335 = load i32, i32* %334, align 4
  %336 = icmp sgt i32 %335, %309
  %337 = select i1 %336, i32 %332, i32 %330
  %338 = select i1 %336, i32 %330, i32 %331
  %339 = add nsw i32 %338, %337
  %340 = ashr i32 %339, 1
  %341 = icmp eq i32 %340, %337
  br i1 %341, label %342, label %329

342:                                              ; preds = %329, %305, %317, %319, %325
  %343 = phi i32 [ %310, %305 ], [ %311, %319 ], [ %311, %317 ], [ %311, %325 ], [ %338, %329 ]
  %344 = and i32 %343, 1
  %345 = icmp eq i32 %344, 0
  br i1 %345, label %346, label %349

346:                                              ; preds = %342, %255, %215, %186, %193, %301
  %347 = phi i16* [ %182, %186 ], [ %182, %193 ], [ %182, %301 ], [ %182, %215 ], [ %182, %255 ], [ %264, %342 ]
  %348 = icmp eq i16* %347, %1
  br i1 %348, label %349, label %180

349:                                              ; preds = %177, %24, %173, %132, %17, %86, %46, %346, %342, %301, %193, %186, %255, %215
  %350 = phi i16* [ %1, %346 ], [ %181, %215 ], [ %181, %255 ], [ %181, %186 ], [ %181, %193 ], [ %181, %301 ], [ %181, %342 ], [ %1, %177 ], [ %12, %46 ], [ %12, %86 ], [ %12, %17 ], [ %12, %132 ], [ %12, %173 ], [ %12, %24 ]
  ret i16* %350
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i8* @_ZNK6icu_696BMPSet8spanUTF8EPKhi17USetSpanCondition(%"class.icu_69::BMPSet"* nocapture readonly, i8*, i32, i32) local_unnamed_addr #2 align 2 {
  %5 = sext i32 %2 to i64
  %6 = getelementptr inbounds i8, i8* %1, i64 %5
  %7 = load i8, i8* %1, align 1
  %8 = icmp sgt i8 %7, -1
  br i1 %8, label %9, label %43

9:                                                ; preds = %4
  %10 = icmp eq i32 %3, 0
  br i1 %10, label %24, label %11

11:                                               ; preds = %9, %21
  %12 = phi i8* [ %19, %21 ], [ %1, %9 ]
  %13 = phi i8 [ %22, %21 ], [ %7, %9 ]
  %14 = zext i8 %13 to i64
  %15 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 1, i64 %14
  %16 = load i8, i8* %15, align 1
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %298, label %18

18:                                               ; preds = %11
  %19 = getelementptr inbounds i8, i8* %12, i64 1
  %20 = icmp eq i8* %19, %6
  br i1 %20, label %298, label %21

21:                                               ; preds = %18
  %22 = load i8, i8* %19, align 1
  %23 = icmp sgt i8 %22, -1
  br i1 %23, label %11, label %37

24:                                               ; preds = %9, %34
  %25 = phi i8* [ %32, %34 ], [ %1, %9 ]
  %26 = phi i8 [ %35, %34 ], [ %7, %9 ]
  %27 = zext i8 %26 to i64
  %28 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 1, i64 %27
  %29 = load i8, i8* %28, align 1
  %30 = icmp eq i8 %29, 0
  br i1 %30, label %31, label %298

31:                                               ; preds = %24
  %32 = getelementptr inbounds i8, i8* %25, i64 1
  %33 = icmp eq i8* %32, %6
  br i1 %33, label %298, label %34

34:                                               ; preds = %31
  %35 = load i8, i8* %32, align 1
  %36 = icmp sgt i8 %35, -1
  br i1 %36, label %24, label %37

37:                                               ; preds = %21, %34
  %38 = phi i8* [ %32, %34 ], [ %19, %21 ]
  %39 = ptrtoint i8* %6 to i64
  %40 = ptrtoint i8* %38 to i64
  %41 = sub i64 %39, %40
  %42 = trunc i64 %41 to i32
  br label %43

43:                                               ; preds = %37, %4
  %44 = phi i8* [ %38, %37 ], [ %1, %4 ]
  %45 = phi i32 [ %42, %37 ], [ %2, %4 ]
  %46 = icmp eq i32 %3, 0
  %47 = xor i1 %46, true
  %48 = zext i1 %47 to i32
  %49 = getelementptr inbounds i8, i8* %6, i64 -1
  %50 = load i8, i8* %49, align 1
  %51 = icmp slt i8 %50, 0
  br i1 %51, label %52, label %88

52:                                               ; preds = %43
  %53 = icmp ult i8 %50, -64
  br i1 %53, label %54, label %82

54:                                               ; preds = %52
  %55 = icmp sgt i32 %45, 1
  br i1 %55, label %56, label %88

56:                                               ; preds = %54
  %57 = getelementptr inbounds i8, i8* %6, i64 -2
  %58 = load i8, i8* %57, align 1
  %59 = icmp ugt i8 %58, -33
  br i1 %59, label %60, label %66

60:                                               ; preds = %56
  %61 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 2
  %62 = load i8, i8* %61, align 8
  %63 = sext i8 %62 to i32
  %64 = icmp eq i32 %48, %63
  %65 = select i1 %64, i8* %6, i8* %57
  br label %88

66:                                               ; preds = %56
  %67 = icmp ult i8 %58, -64
  br i1 %67, label %68, label %88

68:                                               ; preds = %66
  %69 = icmp slt i8 %58, 0
  %70 = icmp sgt i32 %45, 2
  %71 = and i1 %70, %69
  br i1 %71, label %72, label %88

72:                                               ; preds = %68
  %73 = getelementptr inbounds i8, i8* %6, i64 -3
  %74 = load i8, i8* %73, align 1
  %75 = icmp ugt i8 %74, -17
  br i1 %75, label %76, label %88

76:                                               ; preds = %72
  %77 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 2
  %78 = load i8, i8* %77, align 8
  %79 = sext i8 %78 to i32
  %80 = icmp eq i32 %48, %79
  %81 = select i1 %80, i8* %6, i8* %73
  br label %88

82:                                               ; preds = %52
  %83 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 2
  %84 = load i8, i8* %83, align 8
  %85 = sext i8 %84 to i32
  %86 = icmp eq i32 %48, %85
  %87 = select i1 %86, i8* %6, i8* %49
  br label %88

88:                                               ; preds = %54, %82, %76, %60, %66, %68, %72, %43
  %89 = phi i8* [ %6, %72 ], [ %6, %68 ], [ %6, %66 ], [ %6, %43 ], [ %57, %60 ], [ %73, %76 ], [ %49, %82 ], [ %6, %54 ]
  %90 = phi i8* [ %6, %72 ], [ %6, %68 ], [ %6, %66 ], [ %6, %43 ], [ %65, %60 ], [ %81, %76 ], [ %87, %82 ], [ %6, %54 ]
  %91 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 2
  %92 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 8
  %93 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 6, i64 16
  %94 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 6, i64 17
  br label %95

95:                                               ; preds = %269, %88
  %96 = phi i8* [ %273, %269 ], [ %44, %88 ]
  %97 = icmp ult i8* %96, %89
  br i1 %97, label %98, label %298

98:                                               ; preds = %95, %291
  %99 = phi i8* [ %292, %291 ], [ %96, %95 ]
  %100 = load i8, i8* %99, align 1
  %101 = icmp sgt i8 %100, -1
  br i1 %101, label %102, label %129

102:                                              ; preds = %98
  br i1 %46, label %116, label %103

103:                                              ; preds = %102, %113
  %104 = phi i8* [ %111, %113 ], [ %99, %102 ]
  %105 = phi i8 [ %114, %113 ], [ %100, %102 ]
  %106 = zext i8 %105 to i64
  %107 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 1, i64 %106
  %108 = load i8, i8* %107, align 1
  %109 = icmp eq i8 %108, 0
  br i1 %109, label %298, label %110

110:                                              ; preds = %103
  %111 = getelementptr inbounds i8, i8* %104, i64 1
  %112 = icmp eq i8* %111, %89
  br i1 %112, label %298, label %113

113:                                              ; preds = %110
  %114 = load i8, i8* %111, align 1
  %115 = icmp sgt i8 %114, -1
  br i1 %115, label %103, label %129

116:                                              ; preds = %102, %126
  %117 = phi i8* [ %124, %126 ], [ %99, %102 ]
  %118 = phi i8 [ %127, %126 ], [ %100, %102 ]
  %119 = zext i8 %118 to i64
  %120 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 1, i64 %119
  %121 = load i8, i8* %120, align 1
  %122 = icmp eq i8 %121, 0
  br i1 %122, label %123, label %298

123:                                              ; preds = %116
  %124 = getelementptr inbounds i8, i8* %117, i64 1
  %125 = icmp eq i8* %124, %89
  br i1 %125, label %298, label %126

126:                                              ; preds = %123
  %127 = load i8, i8* %124, align 1
  %128 = icmp sgt i8 %127, -1
  br i1 %128, label %116, label %129

129:                                              ; preds = %113, %126, %98
  %130 = phi i8* [ %99, %98 ], [ %124, %126 ], [ %111, %113 ]
  %131 = phi i8 [ %100, %98 ], [ %127, %126 ], [ %114, %113 ]
  %132 = getelementptr inbounds i8, i8* %130, i64 1
  %133 = zext i8 %131 to i32
  %134 = icmp ugt i8 %131, -33
  br i1 %134, label %135, label %274

135:                                              ; preds = %129
  %136 = icmp ult i8 %131, -16
  %137 = load i8, i8* %132, align 1
  %138 = xor i8 %137, -128
  %139 = zext i8 %138 to i32
  %140 = icmp ult i8 %138, 64
  br i1 %136, label %141, label %207

141:                                              ; preds = %135
  br i1 %140, label %142, label %294

142:                                              ; preds = %141
  %143 = getelementptr inbounds i8, i8* %130, i64 2
  %144 = load i8, i8* %143, align 1
  %145 = xor i8 %144, -128
  %146 = zext i8 %145 to i32
  %147 = icmp ult i8 %145, 64
  br i1 %147, label %148, label %294

148:                                              ; preds = %142
  %149 = and i8 %131, 15
  %150 = zext i8 %138 to i64
  %151 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 5, i64 %150
  %152 = load i32, i32* %151, align 4
  %153 = zext i8 %149 to i32
  %154 = lshr i32 %152, %153
  %155 = and i32 %154, 65537
  %156 = icmp ult i32 %155, 2
  br i1 %156, label %157, label %159

157:                                              ; preds = %148
  %158 = icmp eq i32 %155, %48
  br i1 %158, label %205, label %298

159:                                              ; preds = %148
  %160 = shl nuw nsw i32 %153, 12
  %161 = shl nuw nsw i32 %139, 6
  %162 = or i32 %161, %160
  %163 = or i32 %162, %146
  %164 = zext i8 %149 to i64
  %165 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 6, i64 %164
  %166 = load i32, i32* %165, align 4
  %167 = add nuw nsw i32 %153, 1
  %168 = zext i32 %167 to i64
  %169 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 6, i64 %168
  %170 = load i32, i32* %169, align 4
  %171 = load i32*, i32** %92, align 8
  %172 = sext i32 %166 to i64
  %173 = getelementptr inbounds i32, i32* %171, i64 %172
  %174 = load i32, i32* %173, align 4
  %175 = icmp sgt i32 %174, %163
  br i1 %175, label %201, label %176

176:                                              ; preds = %159
  %177 = icmp slt i32 %166, %170
  br i1 %177, label %178, label %201

178:                                              ; preds = %176
  %179 = add nsw i32 %170, -1
  %180 = sext i32 %179 to i64
  %181 = getelementptr inbounds i32, i32* %171, i64 %180
  %182 = load i32, i32* %181, align 4
  %183 = icmp sgt i32 %182, %163
  br i1 %183, label %184, label %201

184:                                              ; preds = %178
  %185 = add nsw i32 %170, %166
  %186 = ashr i32 %185, 1
  %187 = icmp eq i32 %186, %166
  br i1 %187, label %201, label %188

188:                                              ; preds = %184, %188
  %189 = phi i32 [ %199, %188 ], [ %186, %184 ]
  %190 = phi i32 [ %197, %188 ], [ %170, %184 ]
  %191 = phi i32 [ %196, %188 ], [ %166, %184 ]
  %192 = sext i32 %189 to i64
  %193 = getelementptr inbounds i32, i32* %171, i64 %192
  %194 = load i32, i32* %193, align 4
  %195 = icmp sgt i32 %194, %163
  %196 = select i1 %195, i32 %191, i32 %189
  %197 = select i1 %195, i32 %189, i32 %190
  %198 = add nsw i32 %197, %196
  %199 = ashr i32 %198, 1
  %200 = icmp eq i32 %199, %196
  br i1 %200, label %201, label %188

201:                                              ; preds = %188, %159, %176, %178, %184
  %202 = phi i32 [ %166, %159 ], [ %170, %178 ], [ %170, %176 ], [ %170, %184 ], [ %197, %188 ]
  %203 = and i32 %202, 1
  %204 = icmp eq i32 %203, %48
  br i1 %204, label %205, label %298

205:                                              ; preds = %201, %157
  %206 = getelementptr inbounds i8, i8* %130, i64 3
  br label %291

207:                                              ; preds = %135
  br i1 %140, label %208, label %294

208:                                              ; preds = %207
  %209 = getelementptr inbounds i8, i8* %130, i64 2
  %210 = load i8, i8* %209, align 1
  %211 = xor i8 %210, -128
  %212 = icmp ult i8 %211, 64
  br i1 %212, label %213, label %294

213:                                              ; preds = %208
  %214 = getelementptr inbounds i8, i8* %130, i64 3
  %215 = load i8, i8* %214, align 1
  %216 = xor i8 %215, -128
  %217 = icmp ult i8 %216, 64
  br i1 %217, label %218, label %294

218:                                              ; preds = %213
  %219 = zext i8 %211 to i32
  %220 = zext i8 %216 to i32
  %221 = shl nuw nsw i32 %133, 18
  %222 = add nsw i32 %221, -62914560
  %223 = shl nuw nsw i32 %139, 12
  %224 = or i32 %223, %222
  %225 = shl nuw nsw i32 %219, 6
  %226 = or i32 %224, %225
  %227 = or i32 %226, %220
  %228 = add nsw i32 %227, -65536
  %229 = icmp ult i32 %228, 1048576
  br i1 %229, label %230, label %267

230:                                              ; preds = %218
  %231 = load i32, i32* %93, align 4
  %232 = load i32, i32* %94, align 4
  %233 = load i32*, i32** %92, align 8
  %234 = sext i32 %231 to i64
  %235 = getelementptr inbounds i32, i32* %233, i64 %234
  %236 = load i32, i32* %235, align 4
  %237 = icmp sgt i32 %236, %227
  br i1 %237, label %263, label %238

238:                                              ; preds = %230
  %239 = icmp slt i32 %231, %232
  br i1 %239, label %240, label %263

240:                                              ; preds = %238
  %241 = add nsw i32 %232, -1
  %242 = sext i32 %241 to i64
  %243 = getelementptr inbounds i32, i32* %233, i64 %242
  %244 = load i32, i32* %243, align 4
  %245 = icmp sgt i32 %244, %227
  br i1 %245, label %246, label %263

246:                                              ; preds = %240
  %247 = add nsw i32 %232, %231
  %248 = ashr i32 %247, 1
  %249 = icmp eq i32 %248, %231
  br i1 %249, label %263, label %250

250:                                              ; preds = %246, %250
  %251 = phi i32 [ %261, %250 ], [ %248, %246 ]
  %252 = phi i32 [ %259, %250 ], [ %232, %246 ]
  %253 = phi i32 [ %258, %250 ], [ %231, %246 ]
  %254 = sext i32 %251 to i64
  %255 = getelementptr inbounds i32, i32* %233, i64 %254
  %256 = load i32, i32* %255, align 4
  %257 = icmp sgt i32 %256, %227
  %258 = select i1 %257, i32 %253, i32 %251
  %259 = select i1 %257, i32 %251, i32 %252
  %260 = add nsw i32 %259, %258
  %261 = ashr i32 %260, 1
  %262 = icmp eq i32 %261, %258
  br i1 %262, label %263, label %250

263:                                              ; preds = %250, %230, %238, %240, %246
  %264 = phi i32 [ %231, %230 ], [ %232, %240 ], [ %232, %238 ], [ %232, %246 ], [ %259, %250 ]
  %265 = trunc i32 %264 to i8
  %266 = and i8 %265, 1
  br label %269

267:                                              ; preds = %218
  %268 = load i8, i8* %91, align 8
  br label %269

269:                                              ; preds = %267, %263
  %270 = phi i8 [ %266, %263 ], [ %268, %267 ]
  %271 = sext i8 %270 to i32
  %272 = icmp eq i32 %48, %271
  %273 = getelementptr inbounds i8, i8* %130, i64 4
  br i1 %272, label %95, label %298

274:                                              ; preds = %129
  %275 = icmp ugt i8 %131, -65
  br i1 %275, label %276, label %294

276:                                              ; preds = %274
  %277 = load i8, i8* %132, align 1
  %278 = xor i8 %277, -128
  %279 = icmp ult i8 %278, 64
  br i1 %279, label %280, label %294

280:                                              ; preds = %276
  %281 = zext i8 %278 to i64
  %282 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 4, i64 %281
  %283 = load i32, i32* %282, align 4
  %284 = and i32 %133, 31
  %285 = shl i32 1, %284
  %286 = and i32 %283, %285
  %287 = icmp ne i32 %286, 0
  %288 = xor i1 %46, %287
  br i1 %288, label %289, label %298

289:                                              ; preds = %280
  %290 = getelementptr inbounds i8, i8* %130, i64 2
  br label %291

291:                                              ; preds = %289, %294, %205
  %292 = phi i8* [ %206, %205 ], [ %132, %294 ], [ %290, %289 ]
  %293 = icmp ult i8* %292, %89
  br i1 %293, label %98, label %298

294:                                              ; preds = %274, %276, %142, %141, %213, %208, %207
  %295 = load i8, i8* %91, align 8
  %296 = sext i8 %295 to i32
  %297 = icmp eq i32 %48, %296
  br i1 %297, label %291, label %298

298:                                              ; preds = %18, %11, %31, %24, %95, %269, %291, %294, %280, %201, %157, %103, %110, %116, %123
  %299 = phi i8* [ %90, %123 ], [ %117, %116 ], [ %90, %110 ], [ %104, %103 ], [ %130, %157 ], [ %130, %201 ], [ %130, %280 ], [ %130, %294 ], [ %90, %291 ], [ %90, %95 ], [ %130, %269 ], [ %6, %31 ], [ %25, %24 ], [ %12, %11 ], [ %6, %18 ]
  ret i8* %299
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK6icu_696BMPSet12spanBackUTF8EPKhi17USetSpanCondition(%"class.icu_69::BMPSet"* nocapture readonly, i8*, i32, i32) local_unnamed_addr #0 align 2 {
  %5 = alloca i32, align 4
  store i32 %2, i32* %5, align 4
  %6 = icmp ne i32 %3, 0
  %7 = zext i1 %6 to i32
  %8 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 6, i64 16
  %9 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 6, i64 17
  %10 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 8
  br label %11

11:                                               ; preds = %172, %4
  %12 = phi i32 [ %173, %172 ], [ %2, %4 ]
  %13 = add nsw i32 %12, -1
  store i32 %13, i32* %5, align 4
  %14 = sext i32 %13 to i64
  %15 = getelementptr inbounds i8, i8* %1, i64 %14
  %16 = load i8, i8* %15, align 1
  %17 = icmp sgt i8 %16, -1
  br i1 %17, label %18, label %59

18:                                               ; preds = %11
  br i1 %6, label %19, label %37

19:                                               ; preds = %18, %31
  %20 = phi i64 [ %32, %31 ], [ %14, %18 ]
  %21 = phi i8 [ %35, %31 ], [ %16, %18 ]
  %22 = zext i8 %21 to i64
  %23 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 1, i64 %22
  %24 = load i8, i8* %23, align 1
  %25 = icmp eq i8 %24, 0
  br i1 %25, label %26, label %29

26:                                               ; preds = %19
  %27 = trunc i64 %20 to i32
  %28 = add nsw i32 %27, 1
  br label %179

29:                                               ; preds = %19
  %30 = icmp eq i64 %20, 0
  br i1 %30, label %179, label %31

31:                                               ; preds = %29
  %32 = add nsw i64 %20, -1
  %33 = trunc i64 %32 to i32
  store i32 %33, i32* %5, align 4
  %34 = getelementptr inbounds i8, i8* %1, i64 %32
  %35 = load i8, i8* %34, align 1
  %36 = icmp sgt i8 %35, -1
  br i1 %36, label %19, label %55

37:                                               ; preds = %18, %49
  %38 = phi i64 [ %50, %49 ], [ %14, %18 ]
  %39 = phi i8 [ %53, %49 ], [ %16, %18 ]
  %40 = zext i8 %39 to i64
  %41 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 1, i64 %40
  %42 = load i8, i8* %41, align 1
  %43 = icmp eq i8 %42, 0
  br i1 %43, label %47, label %44

44:                                               ; preds = %37
  %45 = trunc i64 %38 to i32
  %46 = add nsw i32 %45, 1
  br label %179

47:                                               ; preds = %37
  %48 = icmp eq i64 %38, 0
  br i1 %48, label %179, label %49

49:                                               ; preds = %47
  %50 = add nsw i64 %38, -1
  %51 = trunc i64 %50 to i32
  store i32 %51, i32* %5, align 4
  %52 = getelementptr inbounds i8, i8* %1, i64 %50
  %53 = load i8, i8* %52, align 1
  %54 = icmp sgt i8 %53, -1
  br i1 %54, label %37, label %57

55:                                               ; preds = %31
  %56 = trunc i64 %32 to i32
  br label %59

57:                                               ; preds = %49
  %58 = trunc i64 %50 to i32
  br label %59

59:                                               ; preds = %57, %55, %11
  %60 = phi i32 [ %13, %11 ], [ %56, %55 ], [ %58, %57 ]
  %61 = phi i8 [ %16, %11 ], [ %35, %55 ], [ %53, %57 ]
  %62 = zext i8 %61 to i32
  %63 = call i32 @utf8_prevCharSafeBody_69(i8* %1, i32 0, i32* nonnull %5, i32 %62, i8 signext -3) #7
  %64 = icmp slt i32 %63, 2048
  br i1 %64, label %65, label %77

65:                                               ; preds = %59
  %66 = and i32 %63, 63
  %67 = zext i32 %66 to i64
  %68 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 4, i64 %67
  %69 = load i32, i32* %68, align 4
  %70 = ashr i32 %63, 6
  %71 = shl i32 1, %70
  %72 = and i32 %69, %71
  %73 = icmp ne i32 %72, 0
  %74 = xor i1 %6, %73
  br i1 %74, label %75, label %172

75:                                               ; preds = %65
  %76 = add nsw i32 %60, 1
  br label %179

77:                                               ; preds = %59
  %78 = icmp slt i32 %63, 65536
  br i1 %78, label %79, label %133

79:                                               ; preds = %77
  %80 = lshr i32 %63, 12
  %81 = lshr i32 %63, 6
  %82 = and i32 %81, 63
  %83 = zext i32 %82 to i64
  %84 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 5, i64 %83
  %85 = load i32, i32* %84, align 4
  %86 = lshr i32 %85, %80
  %87 = and i32 %86, 65537
  %88 = icmp ult i32 %87, 2
  br i1 %88, label %89, label %91

89:                                               ; preds = %79
  %90 = icmp eq i32 %87, %7
  br i1 %90, label %172, label %175

91:                                               ; preds = %79
  %92 = zext i32 %80 to i64
  %93 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 6, i64 %92
  %94 = load i32, i32* %93, align 4
  %95 = add nuw nsw i32 %80, 1
  %96 = zext i32 %95 to i64
  %97 = getelementptr inbounds %"class.icu_69::BMPSet", %"class.icu_69::BMPSet"* %0, i64 0, i32 6, i64 %96
  %98 = load i32, i32* %97, align 4
  %99 = load i32*, i32** %10, align 8
  %100 = sext i32 %94 to i64
  %101 = getelementptr inbounds i32, i32* %99, i64 %100
  %102 = load i32, i32* %101, align 4
  %103 = icmp sgt i32 %102, %63
  br i1 %103, label %129, label %104

104:                                              ; preds = %91
  %105 = icmp slt i32 %94, %98
  br i1 %105, label %106, label %129

106:                                              ; preds = %104
  %107 = add nsw i32 %98, -1
  %108 = sext i32 %107 to i64
  %109 = getelementptr inbounds i32, i32* %99, i64 %108
  %110 = load i32, i32* %109, align 4
  %111 = icmp sgt i32 %110, %63
  br i1 %111, label %112, label %129

112:                                              ; preds = %106
  %113 = add nsw i32 %98, %94
  %114 = ashr i32 %113, 1
  %115 = icmp eq i32 %114, %94
  br i1 %115, label %129, label %116

116:                                              ; preds = %112, %116
  %117 = phi i32 [ %127, %116 ], [ %114, %112 ]
  %118 = phi i32 [ %125, %116 ], [ %98, %112 ]
  %119 = phi i32 [ %124, %116 ], [ %94, %112 ]
  %120 = sext i32 %117 to i64
  %121 = getelementptr inbounds i32, i32* %99, i64 %120
  %122 = load i32, i32* %121, align 4
  %123 = icmp sgt i32 %122, %63
  %124 = select i1 %123, i32 %119, i32 %117
  %125 = select i1 %123, i32 %117, i32 %118
  %126 = add nsw i32 %125, %124
  %127 = ashr i32 %126, 1
  %128 = icmp eq i32 %127, %124
  br i1 %128, label %129, label %116

129:                                              ; preds = %116, %91, %104, %106, %112
  %130 = phi i32 [ %94, %91 ], [ %98, %106 ], [ %98, %104 ], [ %98, %112 ], [ %125, %116 ]
  %131 = and i32 %130, 1
  %132 = icmp eq i32 %131, %7
  br i1 %132, label %172, label %177

133:                                              ; preds = %77
  %134 = load i32, i32* %8, align 4
  %135 = load i32, i32* %9, align 4
  %136 = load i32*, i32** %10, align 8
  %137 = sext i32 %134 to i64
  %138 = getelementptr inbounds i32, i32* %136, i64 %137
  %139 = load i32, i32* %138, align 4
  %140 = icmp sgt i32 %139, %63
  br i1 %140, label %166, label %141

141:                                              ; preds = %133
  %142 = icmp slt i32 %134, %135
  br i1 %142, label %143, label %166

143:                                              ; preds = %141
  %144 = add nsw i32 %135, -1
  %145 = sext i32 %144 to i64
  %146 = getelementptr inbounds i32, i32* %136, i64 %145
  %147 = load i32, i32* %146, align 4
  %148 = icmp sgt i32 %147, %63
  br i1 %148, label %149, label %166

149:                                              ; preds = %143
  %150 = add nsw i32 %135, %134
  %151 = ashr i32 %150, 1
  %152 = icmp eq i32 %151, %134
  br i1 %152, label %166, label %153

153:                                              ; preds = %149, %153
  %154 = phi i32 [ %164, %153 ], [ %151, %149 ]
  %155 = phi i32 [ %162, %153 ], [ %135, %149 ]
  %156 = phi i32 [ %161, %153 ], [ %134, %149 ]
  %157 = sext i32 %154 to i64
  %158 = getelementptr inbounds i32, i32* %136, i64 %157
  %159 = load i32, i32* %158, align 4
  %160 = icmp sgt i32 %159, %63
  %161 = select i1 %160, i32 %156, i32 %154
  %162 = select i1 %160, i32 %154, i32 %155
  %163 = add nsw i32 %162, %161
  %164 = ashr i32 %163, 1
  %165 = icmp eq i32 %164, %161
  br i1 %165, label %166, label %153

166:                                              ; preds = %153, %133, %141, %143, %149
  %167 = phi i32 [ %134, %133 ], [ %135, %143 ], [ %135, %141 ], [ %135, %149 ], [ %162, %153 ]
  %168 = and i32 %167, 1
  %169 = icmp eq i32 %168, %7
  br i1 %169, label %172, label %170

170:                                              ; preds = %166
  %171 = add nsw i32 %60, 1
  br label %179

172:                                              ; preds = %129, %89, %166, %65
  %173 = load i32, i32* %5, align 4
  %174 = icmp sgt i32 %173, 0
  br i1 %174, label %11, label %179

175:                                              ; preds = %89
  %176 = add nsw i32 %60, 1
  br label %179

177:                                              ; preds = %129
  %178 = add nsw i32 %60, 1
  br label %179

179:                                              ; preds = %172, %47, %29, %175, %177, %170, %75, %44, %26
  %180 = phi i32 [ %28, %26 ], [ %46, %44 ], [ %171, %170 ], [ %76, %75 ], [ %176, %175 ], [ %178, %177 ], [ 0, %29 ], [ 0, %47 ], [ 0, %172 ]
  ret i32 %180
}

declare i32 @utf8_prevCharSafeBody_69(i8*, i32, i32*, i32, i8 signext) local_unnamed_addr #6

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5, !3}
!5 = !{!"llvm.loop.unroll.runtime.disable"}
!6 = distinct !{!6, !3}
!7 = distinct !{!7, !5, !3}
!8 = distinct !{!8, !3}
!9 = distinct !{!9, !5, !3}
