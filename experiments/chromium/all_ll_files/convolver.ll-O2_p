; ModuleID = '../../skia/ext/convolver.cc'
source_filename = "../../skia/ext/convolver.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.skia::ConvolutionFilter1D" = type <{ %"class.std::__1::vector", %"class.std::__1::vector.1", i32, [4 x i8] }>
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.skia::ConvolutionFilter1D::FilterInstance"*, %"struct.skia::ConvolutionFilter1D::FilterInstance"*, %"class.std::__1::__compressed_pair" }
%"struct.skia::ConvolutionFilter1D::FilterInstance" = type { i32, i32, i32, i32 }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.skia::ConvolutionFilter1D::FilterInstance"* }
%"class.std::__1::vector.1" = type { %"class.std::__1::__vector_base.2" }
%"class.std::__1::__vector_base.2" = type { i16*, i16*, %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { i16* }
%"class.std::__1::__vector_base_common" = type { i8 }
%"struct.skia::ConvolveProcs" = type { i32, void (i16*, i32, i8**, i32, i8*, i1)*, void (i8**, %"class.skia::ConvolutionFilter1D"*, i8**)*, void (i8*, %"class.skia::ConvolutionFilter1D"*, i8*, i1)* }
%"class.skia::(anonymous namespace)::CircularRowBuffer" = type { %"class.std::__1::vector.8", i32, i32, i32, i32, %"class.std::__1::vector.15" }
%"class.std::__1::vector.8" = type { %"class.std::__1::__vector_base.9" }
%"class.std::__1::__vector_base.9" = type { i8*, i8*, %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { i8* }
%"class.std::__1::vector.15" = type { %"class.std::__1::__vector_base.16" }
%"class.std::__1::__vector_base.16" = type { i8**, i8**, %"class.std::__1::__compressed_pair.17" }
%"class.std::__1::__compressed_pair.17" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.std::__1::__compressed_pair_elem.18" = type { i8** }
%struct.SkISize = type { i32, i32 }
%"class.std::__1::vector.22" = type { %"class.std::__1::__vector_base.23" }
%"class.std::__1::__vector_base.23" = type { float*, float*, %"class.std::__1::__compressed_pair.24" }
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.25" }
%"struct.std::__1::__compressed_pair_elem.25" = type { float* }

$_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm = comdat any

$_ZNSt3__16vectorIPhNS_9allocatorIS1_EEE8__appendEm = comdat any

@_ZN4skia19ConvolutionFilter1DC1Ev = hidden unnamed_addr alias void (%"class.skia::ConvolutionFilter1D"*), void (%"class.skia::ConvolutionFilter1D"*)* @_ZN4skia19ConvolutionFilter1DC2Ev
@_ZN4skia19ConvolutionFilter1DD1Ev = hidden unnamed_addr alias void (%"class.skia::ConvolutionFilter1D"*), void (%"class.skia::ConvolutionFilter1D"*)* @_ZN4skia19ConvolutionFilter1DD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4skia19ConvolutionFilter1DC2Ev(%"class.skia::ConvolutionFilter1D"* nocapture) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.skia::ConvolutionFilter1D"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 52, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4skia19ConvolutionFilter1DD2Ev(%"class.skia::ConvolutionFilter1D"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.skia::ConvolutionFilter1D", %"class.skia::ConvolutionFilter1D"* %0, i64 0, i32 1, i32 0, i32 0
  %3 = load i16*, i16** %2, align 8
  %4 = icmp eq i16* %3, null
  br i1 %4, label %10, label %5

5:                                                ; preds = %1
  %6 = ptrtoint i16* %3 to i64
  %7 = getelementptr inbounds %"class.skia::ConvolutionFilter1D", %"class.skia::ConvolutionFilter1D"* %0, i64 0, i32 1, i32 0, i32 1
  %8 = bitcast i16** %7 to i64*
  store i64 %6, i64* %8, align 8
  %9 = bitcast i16* %3 to i8*
  tail call void @_ZdlPv(i8* %9) #10
  br label %10

10:                                               ; preds = %1, %5
  %11 = getelementptr inbounds %"class.skia::ConvolutionFilter1D", %"class.skia::ConvolutionFilter1D"* %0, i64 0, i32 0, i32 0, i32 0
  %12 = load %"struct.skia::ConvolutionFilter1D::FilterInstance"*, %"struct.skia::ConvolutionFilter1D::FilterInstance"** %11, align 8
  %13 = icmp eq %"struct.skia::ConvolutionFilter1D::FilterInstance"* %12, null
  br i1 %13, label %19, label %14

14:                                               ; preds = %10
  %15 = ptrtoint %"struct.skia::ConvolutionFilter1D::FilterInstance"* %12 to i64
  %16 = getelementptr inbounds %"class.skia::ConvolutionFilter1D", %"class.skia::ConvolutionFilter1D"* %0, i64 0, i32 0, i32 0, i32 1
  %17 = bitcast %"struct.skia::ConvolutionFilter1D::FilterInstance"** %16 to i64*
  store i64 %15, i64* %17, align 8
  %18 = bitcast %"struct.skia::ConvolutionFilter1D::FilterInstance"* %12 to i8*
  tail call void @_ZdlPv(i8* %18) #10
  br label %19

19:                                               ; preds = %10, %14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4skia19ConvolutionFilter1D9AddFilterEiPKfi(%"class.skia::ConvolutionFilter1D"*, i32, float* nocapture readonly, i32) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.std::__1::vector.1", align 8
  %6 = bitcast %"class.std::__1::vector.1"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %6) #11
  %7 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %5, i64 0, i32 0, i32 0
  %8 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %5, i64 0, i32 0, i32 1
  %9 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %5, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 0, i64 24, i1 false) #11
  %10 = sext i32 %3 to i64
  %11 = bitcast i16** %9 to i64*
  %12 = bitcast %"class.std::__1::vector.1"* %5 to i64*
  %13 = icmp eq i32 %3, 0
  br i1 %13, label %14, label %15

14:                                               ; preds = %4
  tail call void @_ZN4skia19ConvolutionFilter1D9AddFilterEiPKsi(%"class.skia::ConvolutionFilter1D"* %0, i32 %1, i16* null, i32 %3)
  br label %36

15:                                               ; preds = %4
  %16 = icmp slt i32 %3, 0
  br i1 %16, label %17, label %18

17:                                               ; preds = %15
  tail call void @abort() #12
  unreachable

18:                                               ; preds = %15
  %19 = bitcast i16** %8 to i64*
  %20 = shl nsw i64 %10, 1
  %21 = tail call i8* @_Znwm(i64 %20) #10
  %22 = bitcast i8* %21 to i16*
  %23 = ptrtoint i8* %21 to i64
  %24 = getelementptr inbounds i16, i16* %22, i64 %10
  %25 = ptrtoint i16* %24 to i64
  %26 = ptrtoint i8* %21 to i64
  store i64 %26, i64* %12, align 8
  store i64 %23, i64* %19, align 8
  store i64 %25, i64* %11, align 8
  %27 = bitcast i16** %8 to i64*
  %28 = zext i32 %3 to i64
  br label %37

29:                                               ; preds = %95
  %30 = load i16*, i16** %7, align 8
  tail call void @_ZN4skia19ConvolutionFilter1D9AddFilterEiPKsi(%"class.skia::ConvolutionFilter1D"* %0, i32 %1, i16* %30, i32 %3)
  %31 = icmp eq i16* %30, null
  br i1 %31, label %36, label %32

32:                                               ; preds = %29
  %33 = bitcast i16* %30 to i8*
  %34 = ptrtoint i16* %30 to i64
  %35 = bitcast i16** %8 to i64*
  store i64 %34, i64* %35, align 8
  tail call void @_ZdlPv(i8* %33) #10
  br label %36

36:                                               ; preds = %14, %29, %32
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %6) #11
  ret void

37:                                               ; preds = %100, %18
  %38 = phi i64 [ %23, %18 ], [ %96, %100 ]
  %39 = phi i16* [ %24, %18 ], [ %101, %100 ]
  %40 = phi i16* [ %22, %18 ], [ %97, %100 ]
  %41 = phi i64 [ 0, %18 ], [ %98, %100 ]
  %42 = getelementptr inbounds float, float* %2, i64 %41
  %43 = load float, float* %42, align 4
  %44 = fmul float %43, 1.638400e+04
  %45 = fptosi float %44 to i16
  %46 = icmp ult i16* %40, %39
  %47 = ptrtoint i16* %39 to i64
  br i1 %46, label %48, label %51

48:                                               ; preds = %37
  store i16 %45, i16* %40, align 2
  %49 = getelementptr inbounds i16, i16* %40, i64 1
  %50 = ptrtoint i16* %49 to i64
  store i64 %50, i64* %27, align 8
  br label %95

51:                                               ; preds = %37
  %52 = ptrtoint i16* %40 to i64
  %53 = load i64, i64* %12, align 8
  %54 = sub i64 %52, %53
  %55 = ashr exact i64 %54, 1
  %56 = add nsw i64 %55, 1
  %57 = icmp slt i64 %56, 0
  br i1 %57, label %58, label %60

58:                                               ; preds = %51
  %59 = bitcast %"class.std::__1::vector.1"* %5 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %59) #12
  unreachable

60:                                               ; preds = %51
  %61 = sub i64 %47, %53
  %62 = ashr exact i64 %61, 1
  %63 = icmp ult i64 %62, 4611686018427387903
  %64 = icmp ult i64 %61, %56
  %65 = select i1 %64, i64 %56, i64 %61
  %66 = select i1 %63, i64 %65, i64 9223372036854775807
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %75, label %68

68:                                               ; preds = %60
  %69 = icmp slt i64 %66, 0
  br i1 %69, label %70, label %71

70:                                               ; preds = %68
  tail call void @abort() #12
  unreachable

71:                                               ; preds = %68
  %72 = shl i64 %66, 1
  %73 = tail call i8* @_Znwm(i64 %72) #10
  %74 = bitcast i8* %73 to i16*
  br label %75

75:                                               ; preds = %71, %60
  %76 = phi i16* [ %74, %71 ], [ null, %60 ]
  %77 = getelementptr inbounds i16, i16* %76, i64 %55
  %78 = getelementptr inbounds i16, i16* %76, i64 %66
  %79 = ptrtoint i16* %78 to i64
  store i16 %45, i16* %77, align 2
  %80 = getelementptr inbounds i16, i16* %77, i64 1
  %81 = ptrtoint i16* %80 to i64
  %82 = sub i64 %38, %53
  %83 = ashr exact i64 %82, 1
  %84 = sub nsw i64 0, %83
  %85 = getelementptr inbounds i16, i16* %77, i64 %84
  %86 = ptrtoint i16* %85 to i64
  %87 = icmp sgt i64 %82, 0
  br i1 %87, label %88, label %91

88:                                               ; preds = %75
  %89 = bitcast i16* %85 to i8*
  %90 = inttoptr i64 %53 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %89, i8* align 2 %90, i64 %82, i1 false) #11
  br label %91

91:                                               ; preds = %88, %75
  store i64 %86, i64* %12, align 8
  store i64 %81, i64* %27, align 8
  store i64 %79, i64* %11, align 8
  %92 = icmp eq i64 %53, 0
  br i1 %92, label %95, label %93

93:                                               ; preds = %91
  %94 = inttoptr i64 %53 to i8*
  tail call void @_ZdlPv(i8* %94) #10
  br label %95

95:                                               ; preds = %48, %91, %93
  %96 = phi i64 [ %50, %48 ], [ %81, %91 ], [ %81, %93 ]
  %97 = phi i16* [ %49, %48 ], [ %80, %91 ], [ %80, %93 ]
  %98 = add nuw nsw i64 %41, 1
  %99 = icmp eq i64 %98, %28
  br i1 %99, label %29, label %100

100:                                              ; preds = %95
  %101 = load i16*, i16** %9, align 8
  br label %37
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4skia19ConvolutionFilter1D9AddFilterEiPKsi(%"class.skia::ConvolutionFilter1D"*, i32, i16* nocapture readonly, i32) local_unnamed_addr #0 align 2 {
  %5 = icmp sgt i32 %3, 0
  br i1 %5, label %6, label %106

6:                                                ; preds = %4
  %7 = zext i32 %3 to i64
  br label %8

8:                                                ; preds = %16, %6
  %9 = phi i64 [ 0, %6 ], [ %17, %16 ]
  %10 = getelementptr inbounds i16, i16* %2, i64 %9
  %11 = load i16, i16* %10, align 2
  %12 = icmp eq i16 %11, 0
  br i1 %12, label %16, label %13

13:                                               ; preds = %8
  %14 = trunc i64 %9 to i32
  %15 = sext i32 %3 to i64
  br label %19

16:                                               ; preds = %8
  %17 = add nuw nsw i64 %9, 1
  %18 = icmp eq i64 %17, %7
  br i1 %18, label %106, label %8

19:                                               ; preds = %13, %23
  %20 = phi i64 [ %15, %13 ], [ %21, %23 ]
  %21 = add nsw i64 %20, -1
  %22 = icmp sgt i64 %20, 0
  br i1 %22, label %23, label %27

23:                                               ; preds = %19
  %24 = getelementptr inbounds i16, i16* %2, i64 %21
  %25 = load i16, i16* %24, align 2
  %26 = icmp eq i16 %25, 0
  br i1 %26, label %19, label %27

27:                                               ; preds = %19, %23
  %28 = trunc i64 %20 to i32
  %29 = add nsw i32 %14, %1
  %30 = sub nsw i32 %28, %14
  %31 = icmp sgt i32 %28, %14
  br i1 %31, label %32, label %106

32:                                               ; preds = %27
  %33 = getelementptr inbounds %"class.skia::ConvolutionFilter1D", %"class.skia::ConvolutionFilter1D"* %0, i64 0, i32 1
  %34 = getelementptr inbounds %"class.skia::ConvolutionFilter1D", %"class.skia::ConvolutionFilter1D"* %0, i64 0, i32 1, i32 0, i32 1
  %35 = getelementptr inbounds %"class.skia::ConvolutionFilter1D", %"class.skia::ConvolutionFilter1D"* %0, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %36 = bitcast i16** %34 to i64*
  %37 = bitcast %"class.std::__1::vector.1"* %33 to i64*
  %38 = bitcast i16** %35 to i64*
  %39 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %33, i64 0, i32 0, i32 0
  %40 = and i64 %9, 4294967295
  %41 = and i64 %20, 4294967295
  br label %42

42:                                               ; preds = %103, %32
  %43 = phi i64 [ %40, %32 ], [ %104, %103 ]
  %44 = getelementptr inbounds i16, i16* %2, i64 %43
  %45 = load i16*, i16** %34, align 8
  %46 = load i16*, i16** %35, align 8
  %47 = icmp eq i16* %45, %46
  %48 = ptrtoint i16* %46 to i64
  br i1 %47, label %53, label %49

49:                                               ; preds = %42
  %50 = load i16, i16* %44, align 2
  store i16 %50, i16* %45, align 2
  %51 = getelementptr inbounds i16, i16* %45, i64 1
  %52 = ptrtoint i16* %51 to i64
  store i64 %52, i64* %36, align 8
  br label %103

53:                                               ; preds = %42
  %54 = ptrtoint i16* %45 to i64
  %55 = load i64, i64* %37, align 8
  %56 = sub i64 %54, %55
  %57 = ashr exact i64 %56, 1
  %58 = add nsw i64 %57, 1
  %59 = icmp slt i64 %58, 0
  br i1 %59, label %60, label %62

60:                                               ; preds = %53
  %61 = bitcast %"class.std::__1::vector.1"* %33 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %61) #12
  unreachable

62:                                               ; preds = %53
  %63 = sub i64 %48, %55
  %64 = ashr exact i64 %63, 1
  %65 = icmp ult i64 %64, 4611686018427387903
  %66 = icmp ult i64 %63, %58
  %67 = select i1 %66, i64 %58, i64 %63
  %68 = select i1 %65, i64 %67, i64 9223372036854775807
  %69 = icmp eq i64 %68, 0
  br i1 %69, label %77, label %70

70:                                               ; preds = %62
  %71 = icmp slt i64 %68, 0
  br i1 %71, label %72, label %73

72:                                               ; preds = %70
  tail call void @abort() #12
  unreachable

73:                                               ; preds = %70
  %74 = shl i64 %68, 1
  %75 = tail call i8* @_Znwm(i64 %74) #10
  %76 = bitcast i8* %75 to i16*
  br label %77

77:                                               ; preds = %73, %62
  %78 = phi i16* [ %76, %73 ], [ null, %62 ]
  %79 = getelementptr inbounds i16, i16* %78, i64 %57
  %80 = getelementptr inbounds i16, i16* %78, i64 %68
  %81 = ptrtoint i16* %80 to i64
  %82 = load i16, i16* %44, align 2
  store i16 %82, i16* %79, align 2
  %83 = getelementptr inbounds i16, i16* %79, i64 1
  %84 = ptrtoint i16* %83 to i64
  %85 = load i16*, i16** %39, align 8
  %86 = load i64, i64* %36, align 8
  %87 = ptrtoint i16* %85 to i64
  %88 = sub i64 %86, %87
  %89 = ashr exact i64 %88, 1
  %90 = sub nsw i64 0, %89
  %91 = getelementptr inbounds i16, i16* %79, i64 %90
  %92 = ptrtoint i16* %91 to i64
  %93 = icmp sgt i64 %88, 0
  br i1 %93, label %94, label %98

94:                                               ; preds = %77
  %95 = bitcast i16* %91 to i8*
  %96 = bitcast i16* %85 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %95, i8* align 2 %96, i64 %88, i1 false) #11
  %97 = load i16*, i16** %39, align 8
  br label %98

98:                                               ; preds = %94, %77
  %99 = phi i16* [ %85, %77 ], [ %97, %94 ]
  store i64 %92, i64* %37, align 8
  store i64 %84, i64* %36, align 8
  store i64 %81, i64* %38, align 8
  %100 = icmp eq i16* %99, null
  br i1 %100, label %103, label %101

101:                                              ; preds = %98
  %102 = bitcast i16* %99 to i8*
  tail call void @_ZdlPv(i8* %102) #10
  br label %103

103:                                              ; preds = %49, %98, %101
  %104 = add nuw nsw i64 %43, 1
  %105 = icmp eq i64 %104, %41
  br i1 %105, label %106, label %42

106:                                              ; preds = %16, %103, %4, %27
  %107 = phi i32 [ %30, %27 ], [ 0, %4 ], [ %30, %103 ], [ 0, %16 ]
  %108 = phi i32 [ %29, %27 ], [ %1, %4 ], [ %29, %103 ], [ %1, %16 ]
  %109 = getelementptr inbounds %"class.skia::ConvolutionFilter1D", %"class.skia::ConvolutionFilter1D"* %0, i64 0, i32 1
  %110 = getelementptr inbounds %"class.skia::ConvolutionFilter1D", %"class.skia::ConvolutionFilter1D"* %0, i64 0, i32 1, i32 0, i32 1
  %111 = bitcast i16** %110 to i64*
  %112 = load i64, i64* %111, align 8
  %113 = bitcast %"class.std::__1::vector.1"* %109 to i64*
  %114 = load i64, i64* %113, align 8
  %115 = sub i64 %112, %114
  %116 = lshr exact i64 %115, 1
  %117 = trunc i64 %116 to i32
  %118 = sub nsw i32 %117, %107
  %119 = getelementptr inbounds %"class.skia::ConvolutionFilter1D", %"class.skia::ConvolutionFilter1D"* %0, i64 0, i32 0, i32 0, i32 1
  %120 = load %"struct.skia::ConvolutionFilter1D::FilterInstance"*, %"struct.skia::ConvolutionFilter1D::FilterInstance"** %119, align 8
  %121 = getelementptr inbounds %"class.skia::ConvolutionFilter1D", %"class.skia::ConvolutionFilter1D"* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %122 = load %"struct.skia::ConvolutionFilter1D::FilterInstance"*, %"struct.skia::ConvolutionFilter1D::FilterInstance"** %121, align 8
  %123 = icmp eq %"struct.skia::ConvolutionFilter1D::FilterInstance"* %120, %122
  %124 = ptrtoint %"struct.skia::ConvolutionFilter1D::FilterInstance"* %122 to i64
  br i1 %123, label %133, label %125

125:                                              ; preds = %106
  %126 = getelementptr inbounds %"struct.skia::ConvolutionFilter1D::FilterInstance", %"struct.skia::ConvolutionFilter1D::FilterInstance"* %120, i64 0, i32 0
  store i32 %118, i32* %126, align 4
  %127 = getelementptr inbounds %"struct.skia::ConvolutionFilter1D::FilterInstance", %"struct.skia::ConvolutionFilter1D::FilterInstance"* %120, i64 0, i32 1
  store i32 %108, i32* %127, align 4
  %128 = getelementptr inbounds %"struct.skia::ConvolutionFilter1D::FilterInstance", %"struct.skia::ConvolutionFilter1D::FilterInstance"* %120, i64 0, i32 2
  store i32 %107, i32* %128, align 4
  %129 = getelementptr inbounds %"struct.skia::ConvolutionFilter1D::FilterInstance", %"struct.skia::ConvolutionFilter1D::FilterInstance"* %120, i64 0, i32 3
  store i32 %3, i32* %129, align 4
  %130 = getelementptr inbounds %"struct.skia::ConvolutionFilter1D::FilterInstance", %"struct.skia::ConvolutionFilter1D::FilterInstance"* %120, i64 1
  %131 = ptrtoint %"struct.skia::ConvolutionFilter1D::FilterInstance"* %130 to i64
  %132 = bitcast %"struct.skia::ConvolutionFilter1D::FilterInstance"** %119 to i64*
  store i64 %131, i64* %132, align 8
  br label %193

133:                                              ; preds = %106
  %134 = ptrtoint %"struct.skia::ConvolutionFilter1D::FilterInstance"* %120 to i64
  %135 = bitcast %"struct.skia::ConvolutionFilter1D::FilterInstance"** %119 to i64*
  %136 = bitcast %"class.skia::ConvolutionFilter1D"* %0 to i64*
  %137 = load i64, i64* %136, align 8
  %138 = sub i64 %134, %137
  %139 = ashr exact i64 %138, 4
  %140 = add nsw i64 %139, 1
  %141 = icmp ugt i64 %140, 1152921504606846975
  br i1 %141, label %142, label %144

142:                                              ; preds = %133
  %143 = bitcast %"class.skia::ConvolutionFilter1D"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %143) #12
  unreachable

144:                                              ; preds = %133
  %145 = bitcast %"struct.skia::ConvolutionFilter1D::FilterInstance"** %121 to i64*
  %146 = sub i64 %124, %137
  %147 = ashr exact i64 %146, 4
  %148 = icmp ult i64 %147, 576460752303423487
  br i1 %148, label %149, label %157

149:                                              ; preds = %144
  %150 = ashr exact i64 %146, 3
  %151 = icmp ult i64 %150, %140
  %152 = select i1 %151, i64 %140, i64 %150
  %153 = icmp eq i64 %152, 0
  br i1 %153, label %162, label %154

154:                                              ; preds = %149
  %155 = icmp ugt i64 %152, 1152921504606846975
  br i1 %155, label %156, label %157

156:                                              ; preds = %154
  tail call void @abort() #12
  unreachable

157:                                              ; preds = %154, %144
  %158 = phi i64 [ %152, %154 ], [ 1152921504606846975, %144 ]
  %159 = shl i64 %158, 4
  %160 = tail call i8* @_Znwm(i64 %159) #10
  %161 = bitcast i8* %160 to %"struct.skia::ConvolutionFilter1D::FilterInstance"*
  br label %162

162:                                              ; preds = %157, %149
  %163 = phi i64 [ %158, %157 ], [ 0, %149 ]
  %164 = phi %"struct.skia::ConvolutionFilter1D::FilterInstance"* [ %161, %157 ], [ null, %149 ]
  %165 = getelementptr inbounds %"struct.skia::ConvolutionFilter1D::FilterInstance", %"struct.skia::ConvolutionFilter1D::FilterInstance"* %164, i64 %139
  %166 = getelementptr inbounds %"struct.skia::ConvolutionFilter1D::FilterInstance", %"struct.skia::ConvolutionFilter1D::FilterInstance"* %164, i64 %163
  %167 = ptrtoint %"struct.skia::ConvolutionFilter1D::FilterInstance"* %166 to i64
  %168 = getelementptr inbounds %"struct.skia::ConvolutionFilter1D::FilterInstance", %"struct.skia::ConvolutionFilter1D::FilterInstance"* %165, i64 0, i32 0
  store i32 %118, i32* %168, align 4
  %169 = getelementptr inbounds %"struct.skia::ConvolutionFilter1D::FilterInstance", %"struct.skia::ConvolutionFilter1D::FilterInstance"* %164, i64 %139, i32 1
  store i32 %108, i32* %169, align 4
  %170 = getelementptr inbounds %"struct.skia::ConvolutionFilter1D::FilterInstance", %"struct.skia::ConvolutionFilter1D::FilterInstance"* %164, i64 %139, i32 2
  store i32 %107, i32* %170, align 4
  %171 = getelementptr inbounds %"struct.skia::ConvolutionFilter1D::FilterInstance", %"struct.skia::ConvolutionFilter1D::FilterInstance"* %164, i64 %139, i32 3
  store i32 %3, i32* %171, align 4
  %172 = getelementptr inbounds %"struct.skia::ConvolutionFilter1D::FilterInstance", %"struct.skia::ConvolutionFilter1D::FilterInstance"* %165, i64 1
  %173 = ptrtoint %"struct.skia::ConvolutionFilter1D::FilterInstance"* %172 to i64
  %174 = getelementptr inbounds %"class.skia::ConvolutionFilter1D", %"class.skia::ConvolutionFilter1D"* %0, i64 0, i32 0, i32 0, i32 0
  %175 = load %"struct.skia::ConvolutionFilter1D::FilterInstance"*, %"struct.skia::ConvolutionFilter1D::FilterInstance"** %174, align 8
  %176 = load i64, i64* %135, align 8
  %177 = ptrtoint %"struct.skia::ConvolutionFilter1D::FilterInstance"* %175 to i64
  %178 = sub i64 %176, %177
  %179 = ashr exact i64 %178, 4
  %180 = sub nsw i64 0, %179
  %181 = getelementptr inbounds %"struct.skia::ConvolutionFilter1D::FilterInstance", %"struct.skia::ConvolutionFilter1D::FilterInstance"* %165, i64 %180
  %182 = ptrtoint %"struct.skia::ConvolutionFilter1D::FilterInstance"* %181 to i64
  %183 = icmp sgt i64 %178, 0
  br i1 %183, label %184, label %188

184:                                              ; preds = %162
  %185 = bitcast %"struct.skia::ConvolutionFilter1D::FilterInstance"* %181 to i8*
  %186 = bitcast %"struct.skia::ConvolutionFilter1D::FilterInstance"* %175 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %185, i8* align 4 %186, i64 %178, i1 false) #11
  %187 = load %"struct.skia::ConvolutionFilter1D::FilterInstance"*, %"struct.skia::ConvolutionFilter1D::FilterInstance"** %174, align 8
  br label %188

188:                                              ; preds = %184, %162
  %189 = phi %"struct.skia::ConvolutionFilter1D::FilterInstance"* [ %175, %162 ], [ %187, %184 ]
  store i64 %182, i64* %136, align 8
  store i64 %173, i64* %135, align 8
  store i64 %167, i64* %145, align 8
  %190 = icmp eq %"struct.skia::ConvolutionFilter1D::FilterInstance"* %189, null
  br i1 %190, label %193, label %191

191:                                              ; preds = %188
  %192 = bitcast %"struct.skia::ConvolutionFilter1D::FilterInstance"* %189 to i8*
  tail call void @_ZdlPv(i8* %192) #10
  br label %193

193:                                              ; preds = %125, %188, %191
  %194 = getelementptr inbounds %"class.skia::ConvolutionFilter1D", %"class.skia::ConvolutionFilter1D"* %0, i64 0, i32 2
  %195 = load i32, i32* %194, align 4
  %196 = icmp slt i32 %195, %107
  %197 = select i1 %196, i32 %107, i32 %195
  store i32 %197, i32* %194, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i16* @_ZNK4skia19ConvolutionFilter1D15GetSingleFilterEPiS1_S1_(%"class.skia::ConvolutionFilter1D"* nocapture readonly, i32* nocapture, i32* nocapture, i32* nocapture) local_unnamed_addr #2 align 2 {
  %5 = getelementptr inbounds %"class.skia::ConvolutionFilter1D", %"class.skia::ConvolutionFilter1D"* %0, i64 0, i32 0, i32 0, i32 0
  %6 = load %"struct.skia::ConvolutionFilter1D::FilterInstance"*, %"struct.skia::ConvolutionFilter1D::FilterInstance"** %5, align 8
  %7 = getelementptr inbounds %"struct.skia::ConvolutionFilter1D::FilterInstance", %"struct.skia::ConvolutionFilter1D::FilterInstance"* %6, i64 0, i32 1
  %8 = load i32, i32* %7, align 4
  store i32 %8, i32* %2, align 4
  %9 = getelementptr inbounds %"struct.skia::ConvolutionFilter1D::FilterInstance", %"struct.skia::ConvolutionFilter1D::FilterInstance"* %6, i64 0, i32 2
  %10 = load i32, i32* %9, align 4
  store i32 %10, i32* %3, align 4
  %11 = getelementptr inbounds %"struct.skia::ConvolutionFilter1D::FilterInstance", %"struct.skia::ConvolutionFilter1D::FilterInstance"* %6, i64 0, i32 3
  %12 = load i32, i32* %11, align 4
  store i32 %12, i32* %1, align 4
  %13 = load i32, i32* %9, align 4
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %22, label %15

15:                                               ; preds = %4
  %16 = getelementptr inbounds %"struct.skia::ConvolutionFilter1D::FilterInstance", %"struct.skia::ConvolutionFilter1D::FilterInstance"* %6, i64 0, i32 0
  %17 = load i32, i32* %16, align 4
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds %"class.skia::ConvolutionFilter1D", %"class.skia::ConvolutionFilter1D"* %0, i64 0, i32 1, i32 0, i32 0
  %20 = load i16*, i16** %19, align 8
  %21 = getelementptr inbounds i16, i16* %20, i64 %18
  br label %22

22:                                               ; preds = %4, %15
  %23 = phi i16* [ %21, %15 ], [ null, %4 ]
  ret i16* %23
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN4skia9SetupSIMDEPNS_13ConvolveProcsE(%"struct.skia::ConvolveProcs"* nocapture) local_unnamed_addr #3 {
  %2 = getelementptr inbounds %"struct.skia::ConvolveProcs", %"struct.skia::ConvolveProcs"* %0, i64 0, i32 0
  store i32 3, i32* %2, align 8
  %3 = getelementptr inbounds %"struct.skia::ConvolveProcs", %"struct.skia::ConvolveProcs"* %0, i64 0, i32 1
  store void (i16*, i32, i8**, i32, i8*, i1)* @_ZN4skia23ConvolveVertically_SSE2EPKsiPKPhiS2_b, void (i16*, i32, i8**, i32, i8*, i1)** %3, align 8
  %4 = getelementptr inbounds %"struct.skia::ConvolveProcs", %"struct.skia::ConvolveProcs"* %0, i64 0, i32 2
  store void (i8**, %"class.skia::ConvolutionFilter1D"*, i8**)* @_ZN4skia30Convolve4RowsHorizontally_SSE2EPPKhRKNS_19ConvolutionFilter1DEPPh, void (i8**, %"class.skia::ConvolutionFilter1D"*, i8**)** %4, align 8
  %5 = getelementptr inbounds %"struct.skia::ConvolveProcs", %"struct.skia::ConvolveProcs"* %0, i64 0, i32 3
  store void (i8*, %"class.skia::ConvolutionFilter1D"*, i8*, i1)* @_ZN4skia25ConvolveHorizontally_SSE2EPKhRKNS_19ConvolutionFilter1DEPhb, void (i8*, %"class.skia::ConvolutionFilter1D"*, i8*, i1)** %5, align 8
  ret void
}

declare void @_ZN4skia23ConvolveVertically_SSE2EPKsiPKPhiS2_b(i16*, i32, i8**, i32, i8*, i1 zeroext) #4

declare void @_ZN4skia30Convolve4RowsHorizontally_SSE2EPPKhRKNS_19ConvolutionFilter1DEPPh(i8**, %"class.skia::ConvolutionFilter1D"* dereferenceable(56), i8**) #4

declare void @_ZN4skia25ConvolveHorizontally_SSE2EPKhRKNS_19ConvolutionFilter1DEPhb(i8*, %"class.skia::ConvolutionFilter1D"* dereferenceable(56), i8*, i1 zeroext) #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4skia14BGRAConvolve2DEPKhibRKNS_19ConvolutionFilter1DES4_iPhb(i8*, i32, i1 zeroext, %"class.skia::ConvolutionFilter1D"* dereferenceable(56), %"class.skia::ConvolutionFilter1D"* nocapture readonly dereferenceable(56), i32, i8*, i1 zeroext) local_unnamed_addr #0 {
  %9 = alloca %"class.skia::(anonymous namespace)::CircularRowBuffer", align 8
  %10 = alloca [4 x i8*], align 16
  %11 = alloca [4 x i8*], align 16
  %12 = select i1 %7, void (i8**, %"class.skia::ConvolutionFilter1D"*, i8**)* @_ZN4skia30Convolve4RowsHorizontally_SSE2EPPKhRKNS_19ConvolutionFilter1DEPPh, void (i8**, %"class.skia::ConvolutionFilter1D"*, i8**)* null
  %13 = select i1 %7, void (i16*, i32, i8**, i32, i8*, i1)* @_ZN4skia23ConvolveVertically_SSE2EPKsiPKPhiS2_b, void (i16*, i32, i8**, i32, i8*, i1)* null
  %14 = select i1 %7, void (i8*, %"class.skia::ConvolutionFilter1D"*, i8*, i1)* @_ZN4skia25ConvolveHorizontally_SSE2EPKhRKNS_19ConvolutionFilter1DEPhb, void (i8*, %"class.skia::ConvolutionFilter1D"*, i8*, i1)* null
  %15 = select i1 %7, i32 3, i32 0
  %16 = getelementptr inbounds %"class.skia::ConvolutionFilter1D", %"class.skia::ConvolutionFilter1D"* %4, i64 0, i32 2
  %17 = load i32, i32* %16, align 8
  %18 = getelementptr inbounds %"class.skia::ConvolutionFilter1D", %"class.skia::ConvolutionFilter1D"* %4, i64 0, i32 0, i32 0, i32 0
  %19 = load %"struct.skia::ConvolutionFilter1D::FilterInstance"*, %"struct.skia::ConvolutionFilter1D::FilterInstance"** %18, align 8
  %20 = getelementptr inbounds %"struct.skia::ConvolutionFilter1D::FilterInstance", %"struct.skia::ConvolutionFilter1D::FilterInstance"* %19, i64 0, i32 1
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %"class.skia::ConvolutionFilter1D", %"class.skia::ConvolutionFilter1D"* %3, i64 0, i32 0, i32 0, i32 1
  %23 = bitcast %"struct.skia::ConvolutionFilter1D::FilterInstance"** %22 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = bitcast %"class.skia::ConvolutionFilter1D"* %3 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = sub i64 %24, %26
  %28 = select i1 %7, i32 4, i32 0
  %29 = add nsw i32 %17, %28
  %30 = bitcast %"class.skia::(anonymous namespace)::CircularRowBuffer"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %30) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %30, i8 0, i64 24, i1 false) #11
  %31 = getelementptr inbounds %"class.skia::(anonymous namespace)::CircularRowBuffer", %"class.skia::(anonymous namespace)::CircularRowBuffer"* %9, i64 0, i32 1
  %32 = lshr exact i64 %27, 2
  %33 = trunc i64 %32 to i32
  %34 = add i32 %33, 60
  %35 = and i32 %34, -64
  store i32 %35, i32* %31, align 8
  %36 = getelementptr inbounds %"class.skia::(anonymous namespace)::CircularRowBuffer", %"class.skia::(anonymous namespace)::CircularRowBuffer"* %9, i64 0, i32 2
  store i32 %29, i32* %36, align 4
  %37 = getelementptr inbounds %"class.skia::(anonymous namespace)::CircularRowBuffer", %"class.skia::(anonymous namespace)::CircularRowBuffer"* %9, i64 0, i32 3
  store i32 0, i32* %37, align 8
  %38 = getelementptr inbounds %"class.skia::(anonymous namespace)::CircularRowBuffer", %"class.skia::(anonymous namespace)::CircularRowBuffer"* %9, i64 0, i32 4
  store i32 %21, i32* %38, align 4
  %39 = getelementptr inbounds %"class.skia::(anonymous namespace)::CircularRowBuffer", %"class.skia::(anonymous namespace)::CircularRowBuffer"* %9, i64 0, i32 5
  %40 = bitcast %"class.std::__1::vector.15"* %39 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %40, i8 0, i64 24, i1 false) #11
  %41 = mul nsw i32 %35, %29
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %52, label %43

43:                                               ; preds = %8
  %44 = sext i32 %41 to i64
  %45 = getelementptr inbounds %"class.skia::(anonymous namespace)::CircularRowBuffer", %"class.skia::(anonymous namespace)::CircularRowBuffer"* %9, i64 0, i32 0
  call void @_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm(%"class.std::__1::vector.8"* nonnull %45, i64 %44) #11
  %46 = load i32, i32* %36, align 4
  %47 = getelementptr inbounds %"class.skia::(anonymous namespace)::CircularRowBuffer", %"class.skia::(anonymous namespace)::CircularRowBuffer"* %9, i64 0, i32 5, i32 0, i32 1
  %48 = bitcast i8*** %47 to i64*
  %49 = load i64, i64* %48, align 8
  %50 = bitcast %"class.std::__1::vector.15"* %39 to i64*
  %51 = load i64, i64* %50, align 8
  br label %52

52:                                               ; preds = %43, %8
  %53 = phi i64 [ %51, %43 ], [ 0, %8 ]
  %54 = phi i64 [ %49, %43 ], [ 0, %8 ]
  %55 = phi i32 [ %46, %43 ], [ %29, %8 ]
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds %"class.skia::(anonymous namespace)::CircularRowBuffer", %"class.skia::(anonymous namespace)::CircularRowBuffer"* %9, i64 0, i32 5, i32 0, i32 1
  %58 = sub i64 %54, %53
  %59 = ashr exact i64 %58, 3
  %60 = icmp ult i64 %59, %56
  %61 = inttoptr i64 %53 to i8**
  br i1 %60, label %62, label %64

62:                                               ; preds = %52
  %63 = sub nsw i64 %56, %59
  call void @_ZNSt3__16vectorIPhNS_9allocatorIS1_EEE8__appendEm(%"class.std::__1::vector.15"* %39, i64 %63) #11
  br label %68

64:                                               ; preds = %52
  %65 = icmp ugt i64 %59, %56
  br i1 %65, label %66, label %68

66:                                               ; preds = %64
  %67 = getelementptr inbounds i8*, i8** %61, i64 %56
  store i8** %67, i8*** %57, align 8
  br label %68

68:                                               ; preds = %62, %64, %66
  %69 = getelementptr inbounds %"class.skia::ConvolutionFilter1D", %"class.skia::ConvolutionFilter1D"* %4, i64 0, i32 0, i32 0, i32 1
  %70 = bitcast %"struct.skia::ConvolutionFilter1D::FilterInstance"** %69 to i64*
  %71 = load i64, i64* %70, align 8
  %72 = bitcast %"class.skia::ConvolutionFilter1D"* %4 to i64*
  %73 = load i64, i64* %72, align 8
  %74 = sub i64 %71, %73
  %75 = lshr exact i64 %74, 4
  %76 = trunc i64 %75 to i32
  %77 = load i64, i64* %23, align 8
  %78 = load i64, i64* %25, align 8
  %79 = sub i64 %77, %78
  %80 = shl i64 %79, 28
  %81 = add i64 %80, -4294967296
  %82 = ashr exact i64 %81, 32
  %83 = getelementptr inbounds %"class.skia::ConvolutionFilter1D", %"class.skia::ConvolutionFilter1D"* %3, i64 0, i32 0, i32 0, i32 0
  %84 = inttoptr i64 %78 to %"struct.skia::ConvolutionFilter1D::FilterInstance"*
  %85 = shl i64 %74, 28
  %86 = add i64 %85, -4294967296
  %87 = ashr exact i64 %86, 32
  %88 = inttoptr i64 %73 to %"struct.skia::ConvolutionFilter1D::FilterInstance"*
  %89 = icmp sgt i32 %76, 0
  br i1 %89, label %90, label %121

90:                                               ; preds = %68
  %91 = getelementptr inbounds %"struct.skia::ConvolutionFilter1D::FilterInstance", %"struct.skia::ConvolutionFilter1D::FilterInstance"* %88, i64 %87, i32 2
  %92 = load i32, i32* %91, align 4
  %93 = getelementptr inbounds %"struct.skia::ConvolutionFilter1D::FilterInstance", %"struct.skia::ConvolutionFilter1D::FilterInstance"* %88, i64 %87, i32 1
  %94 = load i32, i32* %93, align 4
  %95 = getelementptr inbounds %"struct.skia::ConvolutionFilter1D::FilterInstance", %"struct.skia::ConvolutionFilter1D::FilterInstance"* %84, i64 %82, i32 2
  %96 = load i32, i32* %95, align 4
  %97 = getelementptr inbounds %"struct.skia::ConvolutionFilter1D::FilterInstance", %"struct.skia::ConvolutionFilter1D::FilterInstance"* %84, i64 %82, i32 1
  %98 = load i32, i32* %97, align 4
  %99 = add nsw i32 %96, %98
  %100 = sdiv i32 %15, %99
  %101 = xor i32 %100, -1
  %102 = getelementptr inbounds %"class.skia::ConvolutionFilter1D", %"class.skia::ConvolutionFilter1D"* %4, i64 0, i32 1, i32 0, i32 0
  %103 = add nsw i32 %92, %94
  %104 = add i32 %103, %101
  %105 = getelementptr inbounds %"class.skia::(anonymous namespace)::CircularRowBuffer", %"class.skia::(anonymous namespace)::CircularRowBuffer"* %9, i64 0, i32 0, i32 0, i32 0
  %106 = getelementptr inbounds %"class.skia::ConvolutionFilter1D", %"class.skia::ConvolutionFilter1D"* %3, i64 0, i32 1, i32 0, i32 0
  %107 = bitcast [4 x i8*]* %10 to i8*
  %108 = getelementptr inbounds [4 x i8*], [4 x i8*]* %10, i64 0, i64 0
  %109 = getelementptr inbounds [4 x i8*], [4 x i8*]* %10, i64 0, i64 1
  %110 = getelementptr inbounds [4 x i8*], [4 x i8*]* %10, i64 0, i64 2
  %111 = getelementptr inbounds [4 x i8*], [4 x i8*]* %10, i64 0, i64 3
  %112 = bitcast [4 x i8*]* %11 to i8*
  %113 = getelementptr inbounds [4 x i8*], [4 x i8*]* %11, i64 0, i64 0
  %114 = getelementptr inbounds [4 x i8*], [4 x i8*]* %11, i64 0, i64 1
  %115 = getelementptr inbounds [4 x i8*], [4 x i8*]* %11, i64 0, i64 2
  %116 = getelementptr inbounds [4 x i8*], [4 x i8*]* %11, i64 0, i64 3
  %117 = getelementptr inbounds %"class.skia::(anonymous namespace)::CircularRowBuffer", %"class.skia::(anonymous namespace)::CircularRowBuffer"* %9, i64 0, i32 5, i32 0, i32 0
  %118 = sext i32 %1 to i64
  %119 = sext i32 %5 to i64
  %120 = and i64 %75, 4294967295
  br label %138

121:                                              ; preds = %725, %68
  %122 = getelementptr inbounds %"class.skia::(anonymous namespace)::CircularRowBuffer", %"class.skia::(anonymous namespace)::CircularRowBuffer"* %9, i64 0, i32 5, i32 0, i32 0
  %123 = load i8**, i8*** %122, align 8
  %124 = icmp eq i8** %123, null
  br i1 %124, label %129, label %125

125:                                              ; preds = %121
  %126 = ptrtoint i8** %123 to i64
  %127 = bitcast i8*** %57 to i64*
  store i64 %126, i64* %127, align 8
  %128 = bitcast i8** %123 to i8*
  call void @_ZdlPv(i8* %128) #10
  br label %129

129:                                              ; preds = %125, %121
  %130 = getelementptr inbounds %"class.skia::(anonymous namespace)::CircularRowBuffer", %"class.skia::(anonymous namespace)::CircularRowBuffer"* %9, i64 0, i32 0, i32 0, i32 0
  %131 = load i8*, i8** %130, align 8
  %132 = icmp eq i8* %131, null
  br i1 %132, label %137, label %133

133:                                              ; preds = %129
  %134 = ptrtoint i8* %131 to i64
  %135 = getelementptr inbounds %"class.skia::(anonymous namespace)::CircularRowBuffer", %"class.skia::(anonymous namespace)::CircularRowBuffer"* %9, i64 0, i32 0, i32 0, i32 1
  %136 = bitcast i8** %135 to i64*
  store i64 %134, i64* %136, align 8
  call void @_ZdlPv(i8* nonnull %131) #10
  br label %137

137:                                              ; preds = %129, %133
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %30) #11
  ret void

138:                                              ; preds = %728, %90
  %139 = phi %"struct.skia::ConvolutionFilter1D::FilterInstance"* [ %88, %90 ], [ %729, %728 ]
  %140 = phi i64 [ 0, %90 ], [ %726, %728 ]
  %141 = phi i32 [ %21, %90 ], [ %461, %728 ]
  %142 = getelementptr inbounds %"struct.skia::ConvolutionFilter1D::FilterInstance", %"struct.skia::ConvolutionFilter1D::FilterInstance"* %139, i64 %140, i32 1
  %143 = load i32, i32* %142, align 4
  %144 = getelementptr inbounds %"struct.skia::ConvolutionFilter1D::FilterInstance", %"struct.skia::ConvolutionFilter1D::FilterInstance"* %139, i64 %140, i32 2
  %145 = load i32, i32* %144, align 4
  %146 = icmp eq i32 %145, 0
  br i1 %146, label %153, label %147

147:                                              ; preds = %138
  %148 = getelementptr inbounds %"struct.skia::ConvolutionFilter1D::FilterInstance", %"struct.skia::ConvolutionFilter1D::FilterInstance"* %139, i64 %140, i32 0
  %149 = load i32, i32* %148, align 4
  %150 = sext i32 %149 to i64
  %151 = load i16*, i16** %102, align 8
  %152 = getelementptr inbounds i16, i16* %151, i64 %150
  br label %153

153:                                              ; preds = %138, %147
  %154 = phi i16* [ %152, %147 ], [ null, %138 ]
  %155 = add nsw i32 %145, %143
  %156 = icmp slt i32 %141, %155
  br i1 %156, label %157, label %460

157:                                              ; preds = %153, %457
  %158 = phi i32 [ %458, %457 ], [ %141, %153 ]
  br i1 %7, label %159, label %224

159:                                              ; preds = %157
  %160 = add nsw i32 %158, 3
  %161 = icmp slt i32 %160, %104
  br i1 %161, label %162, label %206

162:                                              ; preds = %159
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %107) #11
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %112) #11
  %163 = load i32, i32* %31, align 8
  %164 = load i8*, i8** %105, align 8
  %165 = load i32, i32* %36, align 4
  %166 = load i32, i32* %37, align 8
  %167 = load i32, i32* %38, align 4
  %168 = sext i32 %158 to i64
  %169 = mul nsw i64 %168, %118
  %170 = getelementptr inbounds i8, i8* %0, i64 %169
  store i8* %170, i8** %108, align 16
  %171 = mul nsw i32 %163, %166
  %172 = sext i32 %171 to i64
  %173 = getelementptr inbounds i8, i8* %164, i64 %172
  %174 = add nsw i32 %166, 1
  %175 = icmp eq i32 %174, %165
  %176 = select i1 %175, i32 0, i32 %174
  store i8* %173, i8** %113, align 16
  %177 = add nsw i64 %168, 1
  %178 = mul nsw i64 %177, %118
  %179 = getelementptr inbounds i8, i8* %0, i64 %178
  store i8* %179, i8** %109, align 8
  %180 = mul nsw i32 %163, %176
  %181 = sext i32 %180 to i64
  %182 = getelementptr inbounds i8, i8* %164, i64 %181
  %183 = add nsw i32 %176, 1
  %184 = icmp eq i32 %183, %165
  %185 = select i1 %184, i32 0, i32 %183
  store i8* %182, i8** %114, align 8
  %186 = add nsw i64 %168, 2
  %187 = mul nsw i64 %186, %118
  %188 = getelementptr inbounds i8, i8* %0, i64 %187
  store i8* %188, i8** %110, align 16
  %189 = mul nsw i32 %163, %185
  %190 = sext i32 %189 to i64
  %191 = getelementptr inbounds i8, i8* %164, i64 %190
  %192 = add nsw i32 %185, 1
  %193 = icmp eq i32 %192, %165
  %194 = select i1 %193, i32 0, i32 %192
  store i8* %191, i8** %115, align 16
  %195 = add nsw i64 %168, 3
  %196 = mul nsw i64 %195, %118
  %197 = getelementptr inbounds i8, i8* %0, i64 %196
  store i8* %197, i8** %111, align 8
  %198 = mul nsw i32 %163, %194
  %199 = sext i32 %198 to i64
  %200 = getelementptr inbounds i8, i8* %164, i64 %199
  %201 = add nsw i32 %194, 1
  %202 = icmp eq i32 %201, %165
  %203 = select i1 %202, i32 0, i32 %201
  store i8* %200, i8** %116, align 8
  %204 = add i32 %167, 4
  store i32 %203, i32* %37, align 8
  store i32 %204, i32* %38, align 4
  call void %12(i8** nonnull %108, %"class.skia::ConvolutionFilter1D"* dereferenceable(56) %3, i8** nonnull %113) #11
  %205 = add nsw i32 %158, 4
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %112) #11
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %107) #11
  br label %457

206:                                              ; preds = %159
  %207 = icmp slt i32 %158, %104
  br i1 %207, label %208, label %224

208:                                              ; preds = %206
  %209 = mul nsw i32 %158, %1
  %210 = sext i32 %209 to i64
  %211 = getelementptr inbounds i8, i8* %0, i64 %210
  %212 = load i32, i32* %37, align 8
  %213 = load i32, i32* %31, align 8
  %214 = mul nsw i32 %213, %212
  %215 = sext i32 %214 to i64
  %216 = load i8*, i8** %105, align 8
  %217 = getelementptr inbounds i8, i8* %216, i64 %215
  %218 = load i32, i32* %38, align 4
  %219 = add nsw i32 %218, 1
  store i32 %219, i32* %38, align 4
  %220 = add nsw i32 %212, 1
  %221 = load i32, i32* %36, align 4
  %222 = icmp eq i32 %220, %221
  %223 = select i1 %222, i32 0, i32 %220
  store i32 %223, i32* %37, align 8
  call void %14(i8* %211, %"class.skia::ConvolutionFilter1D"* dereferenceable(56) %3, i8* %217, i1 zeroext %2) #11
  br label %455

224:                                              ; preds = %157, %206
  %225 = mul nsw i32 %158, %1
  %226 = sext i32 %225 to i64
  %227 = getelementptr inbounds i8, i8* %0, i64 %226
  %228 = load i32, i32* %37, align 8
  %229 = load i32, i32* %31, align 8
  %230 = mul nsw i32 %229, %228
  %231 = sext i32 %230 to i64
  %232 = load i8*, i8** %105, align 8
  %233 = getelementptr inbounds i8, i8* %232, i64 %231
  %234 = load i32, i32* %38, align 4
  %235 = add nsw i32 %234, 1
  store i32 %235, i32* %38, align 4
  %236 = add nsw i32 %228, 1
  %237 = load i32, i32* %36, align 4
  %238 = icmp eq i32 %236, %237
  %239 = select i1 %238, i32 0, i32 %236
  store i32 %239, i32* %37, align 8
  %240 = load i64, i64* %23, align 8
  %241 = load i64, i64* %25, align 8
  %242 = sub i64 %240, %241
  %243 = lshr exact i64 %242, 4
  %244 = trunc i64 %243 to i32
  %245 = icmp sgt i32 %244, 0
  br i1 %2, label %246, label %360

246:                                              ; preds = %224
  br i1 %245, label %247, label %455

247:                                              ; preds = %246
  %248 = inttoptr i64 %241 to %"struct.skia::ConvolutionFilter1D::FilterInstance"*
  %249 = and i64 %243, 4294967295
  br label %250

250:                                              ; preds = %318, %247
  %251 = phi %"struct.skia::ConvolutionFilter1D::FilterInstance"* [ %248, %247 ], [ %319, %318 ]
  %252 = phi i64 [ 0, %247 ], [ %316, %318 ]
  %253 = getelementptr inbounds %"struct.skia::ConvolutionFilter1D::FilterInstance", %"struct.skia::ConvolutionFilter1D::FilterInstance"* %251, i64 %252, i32 2
  %254 = load i32, i32* %253, align 4
  %255 = icmp eq i32 %254, 0
  br i1 %255, label %270, label %256

256:                                              ; preds = %250
  %257 = getelementptr inbounds %"struct.skia::ConvolutionFilter1D::FilterInstance", %"struct.skia::ConvolutionFilter1D::FilterInstance"* %251, i64 %252, i32 1
  %258 = load i32, i32* %257, align 4
  %259 = getelementptr inbounds %"struct.skia::ConvolutionFilter1D::FilterInstance", %"struct.skia::ConvolutionFilter1D::FilterInstance"* %251, i64 %252, i32 0
  %260 = load i32, i32* %259, align 4
  %261 = sext i32 %260 to i64
  %262 = load i16*, i16** %106, align 8
  %263 = getelementptr inbounds i16, i16* %262, i64 %261
  %264 = shl nsw i32 %258, 2
  %265 = sext i32 %264 to i64
  %266 = getelementptr inbounds i8, i8* %227, i64 %265
  %267 = icmp sgt i32 %254, 0
  br i1 %267, label %268, label %270

268:                                              ; preds = %256
  %269 = zext i32 %254 to i64
  br label %320

270:                                              ; preds = %320, %256, %250
  %271 = phi i32 [ 0, %256 ], [ 0, %250 ], [ %336, %320 ]
  %272 = phi i32 [ 0, %256 ], [ 0, %250 ], [ %343, %320 ]
  %273 = phi i32 [ 0, %256 ], [ 0, %250 ], [ %350, %320 ]
  %274 = phi i32 [ 0, %256 ], [ 0, %250 ], [ %357, %320 ]
  %275 = ashr i32 %271, 14
  %276 = ashr i32 %272, 14
  %277 = ashr i32 %273, 14
  %278 = ashr i32 %274, 14
  %279 = icmp ult i32 %275, 256
  %280 = trunc i32 %275 to i8
  %281 = ashr i32 %271, 31
  %282 = trunc i32 %281 to i8
  %283 = xor i8 %282, -1
  %284 = select i1 %279, i8 %280, i8 %283
  %285 = trunc i64 %252 to i32
  %286 = shl nsw i32 %285, 2
  %287 = zext i32 %286 to i64
  %288 = getelementptr inbounds i8, i8* %233, i64 %287
  store i8 %284, i8* %288, align 1
  %289 = icmp ult i32 %276, 256
  %290 = trunc i32 %276 to i8
  %291 = ashr i32 %272, 31
  %292 = trunc i32 %291 to i8
  %293 = xor i8 %292, -1
  %294 = select i1 %289, i8 %290, i8 %293
  %295 = or i32 %286, 1
  %296 = zext i32 %295 to i64
  %297 = getelementptr inbounds i8, i8* %233, i64 %296
  store i8 %294, i8* %297, align 1
  %298 = icmp ult i32 %277, 256
  %299 = trunc i32 %277 to i8
  %300 = ashr i32 %273, 31
  %301 = trunc i32 %300 to i8
  %302 = xor i8 %301, -1
  %303 = select i1 %298, i8 %299, i8 %302
  %304 = or i32 %286, 2
  %305 = zext i32 %304 to i64
  %306 = getelementptr inbounds i8, i8* %233, i64 %305
  store i8 %303, i8* %306, align 1
  %307 = icmp ult i32 %278, 256
  %308 = trunc i32 %278 to i8
  %309 = ashr i32 %274, 31
  %310 = trunc i32 %309 to i8
  %311 = xor i8 %310, -1
  %312 = select i1 %307, i8 %308, i8 %311
  %313 = or i32 %286, 3
  %314 = zext i32 %313 to i64
  %315 = getelementptr inbounds i8, i8* %233, i64 %314
  store i8 %312, i8* %315, align 1
  %316 = add nuw nsw i64 %252, 1
  %317 = icmp eq i64 %316, %249
  br i1 %317, label %455, label %318

318:                                              ; preds = %270
  %319 = load %"struct.skia::ConvolutionFilter1D::FilterInstance"*, %"struct.skia::ConvolutionFilter1D::FilterInstance"** %83, align 8
  br label %250

320:                                              ; preds = %320, %268
  %321 = phi i64 [ 0, %268 ], [ %358, %320 ]
  %322 = phi i32 [ 0, %268 ], [ %357, %320 ]
  %323 = phi i32 [ 0, %268 ], [ %350, %320 ]
  %324 = phi i32 [ 0, %268 ], [ %343, %320 ]
  %325 = phi i32 [ 0, %268 ], [ %336, %320 ]
  %326 = getelementptr inbounds i16, i16* %263, i64 %321
  %327 = load i16, i16* %326, align 2
  %328 = sext i16 %327 to i32
  %329 = trunc i64 %321 to i32
  %330 = shl nsw i32 %329, 2
  %331 = zext i32 %330 to i64
  %332 = getelementptr inbounds i8, i8* %266, i64 %331
  %333 = load i8, i8* %332, align 1
  %334 = zext i8 %333 to i32
  %335 = mul nsw i32 %334, %328
  %336 = add nsw i32 %335, %325
  %337 = or i32 %330, 1
  %338 = zext i32 %337 to i64
  %339 = getelementptr inbounds i8, i8* %266, i64 %338
  %340 = load i8, i8* %339, align 1
  %341 = zext i8 %340 to i32
  %342 = mul nsw i32 %341, %328
  %343 = add nsw i32 %342, %324
  %344 = or i32 %330, 2
  %345 = zext i32 %344 to i64
  %346 = getelementptr inbounds i8, i8* %266, i64 %345
  %347 = load i8, i8* %346, align 1
  %348 = zext i8 %347 to i32
  %349 = mul nsw i32 %348, %328
  %350 = add nsw i32 %349, %323
  %351 = or i32 %330, 3
  %352 = zext i32 %351 to i64
  %353 = getelementptr inbounds i8, i8* %266, i64 %352
  %354 = load i8, i8* %353, align 1
  %355 = zext i8 %354 to i32
  %356 = mul nsw i32 %355, %328
  %357 = add nsw i32 %356, %322
  %358 = add nuw nsw i64 %321, 1
  %359 = icmp eq i64 %358, %269
  br i1 %359, label %270, label %320

360:                                              ; preds = %224
  br i1 %245, label %361, label %455

361:                                              ; preds = %360
  %362 = inttoptr i64 %241 to %"struct.skia::ConvolutionFilter1D::FilterInstance"*
  %363 = and i64 %243, 4294967295
  br label %364

364:                                              ; preds = %421, %361
  %365 = phi %"struct.skia::ConvolutionFilter1D::FilterInstance"* [ %362, %361 ], [ %422, %421 ]
  %366 = phi i64 [ 0, %361 ], [ %419, %421 ]
  %367 = getelementptr inbounds %"struct.skia::ConvolutionFilter1D::FilterInstance", %"struct.skia::ConvolutionFilter1D::FilterInstance"* %365, i64 %366, i32 2
  %368 = load i32, i32* %367, align 4
  %369 = icmp eq i32 %368, 0
  br i1 %369, label %384, label %370

370:                                              ; preds = %364
  %371 = getelementptr inbounds %"struct.skia::ConvolutionFilter1D::FilterInstance", %"struct.skia::ConvolutionFilter1D::FilterInstance"* %365, i64 %366, i32 1
  %372 = load i32, i32* %371, align 4
  %373 = getelementptr inbounds %"struct.skia::ConvolutionFilter1D::FilterInstance", %"struct.skia::ConvolutionFilter1D::FilterInstance"* %365, i64 %366, i32 0
  %374 = load i32, i32* %373, align 4
  %375 = sext i32 %374 to i64
  %376 = load i16*, i16** %106, align 8
  %377 = getelementptr inbounds i16, i16* %376, i64 %375
  %378 = shl nsw i32 %372, 2
  %379 = sext i32 %378 to i64
  %380 = getelementptr inbounds i8, i8* %227, i64 %379
  %381 = icmp sgt i32 %368, 0
  br i1 %381, label %382, label %384

382:                                              ; preds = %370
  %383 = zext i32 %368 to i64
  br label %423

384:                                              ; preds = %423, %370, %364
  %385 = phi i32 [ 0, %370 ], [ 0, %364 ], [ %438, %423 ]
  %386 = phi i32 [ 0, %370 ], [ 0, %364 ], [ %445, %423 ]
  %387 = phi i32 [ 0, %370 ], [ 0, %364 ], [ %452, %423 ]
  %388 = ashr i32 %385, 14
  %389 = ashr i32 %386, 14
  %390 = ashr i32 %387, 14
  %391 = icmp ult i32 %388, 256
  %392 = trunc i32 %388 to i8
  %393 = ashr i32 %385, 31
  %394 = trunc i32 %393 to i8
  %395 = xor i8 %394, -1
  %396 = select i1 %391, i8 %392, i8 %395
  %397 = trunc i64 %366 to i32
  %398 = shl nsw i32 %397, 2
  %399 = zext i32 %398 to i64
  %400 = getelementptr inbounds i8, i8* %233, i64 %399
  store i8 %396, i8* %400, align 1
  %401 = icmp ult i32 %389, 256
  %402 = trunc i32 %389 to i8
  %403 = ashr i32 %386, 31
  %404 = trunc i32 %403 to i8
  %405 = xor i8 %404, -1
  %406 = select i1 %401, i8 %402, i8 %405
  %407 = or i32 %398, 1
  %408 = zext i32 %407 to i64
  %409 = getelementptr inbounds i8, i8* %233, i64 %408
  store i8 %406, i8* %409, align 1
  %410 = icmp ult i32 %390, 256
  %411 = trunc i32 %390 to i8
  %412 = ashr i32 %387, 31
  %413 = trunc i32 %412 to i8
  %414 = xor i8 %413, -1
  %415 = select i1 %410, i8 %411, i8 %414
  %416 = or i32 %398, 2
  %417 = zext i32 %416 to i64
  %418 = getelementptr inbounds i8, i8* %233, i64 %417
  store i8 %415, i8* %418, align 1
  %419 = add nuw nsw i64 %366, 1
  %420 = icmp eq i64 %419, %363
  br i1 %420, label %455, label %421

421:                                              ; preds = %384
  %422 = load %"struct.skia::ConvolutionFilter1D::FilterInstance"*, %"struct.skia::ConvolutionFilter1D::FilterInstance"** %83, align 8
  br label %364

423:                                              ; preds = %423, %382
  %424 = phi i64 [ 0, %382 ], [ %453, %423 ]
  %425 = phi i32 [ 0, %382 ], [ %452, %423 ]
  %426 = phi i32 [ 0, %382 ], [ %445, %423 ]
  %427 = phi i32 [ 0, %382 ], [ %438, %423 ]
  %428 = getelementptr inbounds i16, i16* %377, i64 %424
  %429 = load i16, i16* %428, align 2
  %430 = sext i16 %429 to i32
  %431 = trunc i64 %424 to i32
  %432 = shl nsw i32 %431, 2
  %433 = zext i32 %432 to i64
  %434 = getelementptr inbounds i8, i8* %380, i64 %433
  %435 = load i8, i8* %434, align 1
  %436 = zext i8 %435 to i32
  %437 = mul nsw i32 %436, %430
  %438 = add nsw i32 %437, %427
  %439 = or i32 %432, 1
  %440 = zext i32 %439 to i64
  %441 = getelementptr inbounds i8, i8* %380, i64 %440
  %442 = load i8, i8* %441, align 1
  %443 = zext i8 %442 to i32
  %444 = mul nsw i32 %443, %430
  %445 = add nsw i32 %444, %426
  %446 = or i32 %432, 2
  %447 = zext i32 %446 to i64
  %448 = getelementptr inbounds i8, i8* %380, i64 %447
  %449 = load i8, i8* %448, align 1
  %450 = zext i8 %449 to i32
  %451 = mul nsw i32 %450, %430
  %452 = add nsw i32 %451, %425
  %453 = add nuw nsw i64 %424, 1
  %454 = icmp eq i64 %453, %383
  br i1 %454, label %384, label %423

455:                                              ; preds = %384, %270, %360, %246, %208
  %456 = add nsw i32 %158, 1
  br label %457

457:                                              ; preds = %455, %162
  %458 = phi i32 [ %205, %162 ], [ %456, %455 ]
  %459 = icmp slt i32 %458, %155
  br i1 %459, label %157, label %460

460:                                              ; preds = %457, %153
  %461 = phi i32 [ %141, %153 ], [ %458, %457 ]
  %462 = mul nsw i64 %140, %119
  %463 = getelementptr inbounds i8, i8* %6, i64 %462
  %464 = load i32, i32* %38, align 4
  %465 = load i32, i32* %36, align 4
  %466 = icmp sgt i32 %465, 0
  br i1 %466, label %467, label %486

467:                                              ; preds = %460
  %468 = load i32, i32* %37, align 8
  br label %469

469:                                              ; preds = %469, %467
  %470 = phi i64 [ 0, %467 ], [ %483, %469 ]
  %471 = phi i32 [ %468, %467 ], [ %482, %469 ]
  %472 = load i32, i32* %31, align 8
  %473 = mul nsw i32 %472, %471
  %474 = sext i32 %473 to i64
  %475 = load i8*, i8** %105, align 8
  %476 = getelementptr inbounds i8, i8* %475, i64 %474
  %477 = load i8**, i8*** %117, align 8
  %478 = getelementptr inbounds i8*, i8** %477, i64 %470
  store i8* %476, i8** %478, align 8
  %479 = add nsw i32 %471, 1
  %480 = load i32, i32* %36, align 4
  %481 = icmp eq i32 %479, %480
  %482 = select i1 %481, i32 0, i32 %479
  %483 = add nuw nsw i64 %470, 1
  %484 = sext i32 %480 to i64
  %485 = icmp slt i64 %483, %484
  br i1 %485, label %469, label %486

486:                                              ; preds = %469, %460
  %487 = load i8**, i8*** %117, align 8
  %488 = sub i32 %143, %464
  %489 = add i32 %488, %465
  %490 = sext i32 %489 to i64
  %491 = getelementptr inbounds i8*, i8** %487, i64 %490
  %492 = load i64, i64* %23, align 8
  %493 = load i64, i64* %25, align 8
  %494 = sub i64 %492, %493
  %495 = lshr exact i64 %494, 4
  %496 = trunc i64 %495 to i32
  br i1 %7, label %497, label %498

497:                                              ; preds = %486
  call void %13(i16* %154, i32 %145, i8** %491, i32 %496, i8* %463, i1 zeroext %2) #11
  br label %725

498:                                              ; preds = %486
  %499 = icmp sgt i32 %496, 0
  br i1 %2, label %500, label %594

500:                                              ; preds = %498
  br i1 %499, label %501, label %725

501:                                              ; preds = %500
  %502 = icmp sgt i32 %145, 0
  %503 = and i64 %495, 4294967295
  %504 = zext i32 %145 to i64
  br label %505

505:                                              ; preds = %516, %501
  %506 = phi i64 [ 0, %501 ], [ %559, %516 ]
  %507 = trunc i64 %506 to i32
  %508 = shl nsw i32 %507, 2
  %509 = zext i32 %508 to i64
  %510 = or i32 %508, 1
  %511 = zext i32 %510 to i64
  %512 = or i32 %508, 2
  %513 = zext i32 %512 to i64
  %514 = or i32 %508, 3
  %515 = zext i32 %514 to i64
  br i1 %502, label %561, label %516

516:                                              ; preds = %561, %505
  %517 = phi i32 [ 0, %505 ], [ %576, %561 ]
  %518 = phi i32 [ 0, %505 ], [ %581, %561 ]
  %519 = phi i32 [ 0, %505 ], [ %586, %561 ]
  %520 = phi i32 [ 0, %505 ], [ %591, %561 ]
  %521 = ashr i32 %517, 14
  %522 = ashr i32 %518, 14
  %523 = ashr i32 %519, 14
  %524 = ashr i32 %520, 14
  %525 = icmp ult i32 %521, 256
  %526 = trunc i32 %521 to i8
  %527 = ashr i32 %517, 31
  %528 = trunc i32 %527 to i8
  %529 = xor i8 %528, -1
  %530 = select i1 %525, i8 %526, i8 %529
  %531 = getelementptr inbounds i8, i8* %463, i64 %509
  store i8 %530, i8* %531, align 1
  %532 = icmp ult i32 %522, 256
  %533 = trunc i32 %522 to i8
  %534 = ashr i32 %518, 31
  %535 = trunc i32 %534 to i8
  %536 = xor i8 %535, -1
  %537 = select i1 %532, i8 %533, i8 %536
  %538 = getelementptr inbounds i8, i8* %463, i64 %511
  store i8 %537, i8* %538, align 1
  %539 = icmp ult i32 %523, 256
  %540 = trunc i32 %523 to i8
  %541 = ashr i32 %519, 31
  %542 = trunc i32 %541 to i8
  %543 = xor i8 %542, -1
  %544 = select i1 %539, i8 %540, i8 %543
  %545 = getelementptr inbounds i8, i8* %463, i64 %513
  store i8 %544, i8* %545, align 1
  %546 = icmp ult i32 %524, 256
  %547 = trunc i32 %524 to i8
  %548 = ashr i32 %520, 31
  %549 = trunc i32 %548 to i8
  %550 = xor i8 %549, -1
  %551 = select i1 %546, i8 %547, i8 %550
  %552 = icmp ult i8 %537, %544
  %553 = select i1 %552, i8 %544, i8 %537
  %554 = icmp ult i8 %530, %553
  %555 = select i1 %554, i8 %553, i8 %530
  %556 = icmp ult i8 %551, %555
  %557 = getelementptr inbounds i8, i8* %463, i64 %515
  %558 = select i1 %556, i8 %555, i8 %551
  store i8 %558, i8* %557, align 1
  %559 = add nuw nsw i64 %506, 1
  %560 = icmp eq i64 %559, %503
  br i1 %560, label %725, label %505

561:                                              ; preds = %505, %561
  %562 = phi i64 [ %592, %561 ], [ 0, %505 ]
  %563 = phi i32 [ %591, %561 ], [ 0, %505 ]
  %564 = phi i32 [ %586, %561 ], [ 0, %505 ]
  %565 = phi i32 [ %581, %561 ], [ 0, %505 ]
  %566 = phi i32 [ %576, %561 ], [ 0, %505 ]
  %567 = getelementptr inbounds i16, i16* %154, i64 %562
  %568 = load i16, i16* %567, align 2
  %569 = sext i16 %568 to i32
  %570 = getelementptr inbounds i8*, i8** %491, i64 %562
  %571 = load i8*, i8** %570, align 8
  %572 = getelementptr inbounds i8, i8* %571, i64 %509
  %573 = load i8, i8* %572, align 1
  %574 = zext i8 %573 to i32
  %575 = mul nsw i32 %574, %569
  %576 = add nsw i32 %575, %566
  %577 = getelementptr inbounds i8, i8* %571, i64 %511
  %578 = load i8, i8* %577, align 1
  %579 = zext i8 %578 to i32
  %580 = mul nsw i32 %579, %569
  %581 = add nsw i32 %580, %565
  %582 = getelementptr inbounds i8, i8* %571, i64 %513
  %583 = load i8, i8* %582, align 1
  %584 = zext i8 %583 to i32
  %585 = mul nsw i32 %584, %569
  %586 = add nsw i32 %585, %564
  %587 = getelementptr inbounds i8, i8* %571, i64 %515
  %588 = load i8, i8* %587, align 1
  %589 = zext i8 %588 to i32
  %590 = mul nsw i32 %589, %569
  %591 = add nsw i32 %590, %563
  %592 = add nuw nsw i64 %562, 1
  %593 = icmp eq i64 %592, %504
  br i1 %593, label %516, label %561

594:                                              ; preds = %498
  br i1 %499, label %595, label %725

595:                                              ; preds = %594
  %596 = icmp sgt i32 %145, 0
  %597 = and i64 %495, 4294967295
  %598 = zext i32 %145 to i64
  %599 = and i64 %598, 1
  %600 = icmp eq i32 %145, 1
  %601 = sub nsw i64 %598, %599
  %602 = icmp eq i64 %599, 0
  br label %603

603:                                              ; preds = %642, %595
  %604 = phi i64 [ 0, %595 ], [ %673, %642 ]
  %605 = trunc i64 %604 to i32
  %606 = shl nsw i32 %605, 2
  %607 = zext i32 %606 to i64
  %608 = or i32 %606, 1
  %609 = zext i32 %608 to i64
  %610 = or i32 %606, 2
  %611 = zext i32 %610 to i64
  br i1 %596, label %612, label %642

612:                                              ; preds = %603
  br i1 %600, label %613, label %675

613:                                              ; preds = %675, %612
  %614 = phi i32 [ undef, %612 ], [ %711, %675 ]
  %615 = phi i32 [ undef, %612 ], [ %716, %675 ]
  %616 = phi i32 [ undef, %612 ], [ %721, %675 ]
  %617 = phi i64 [ 0, %612 ], [ %722, %675 ]
  %618 = phi i32 [ 0, %612 ], [ %721, %675 ]
  %619 = phi i32 [ 0, %612 ], [ %716, %675 ]
  %620 = phi i32 [ 0, %612 ], [ %711, %675 ]
  br i1 %602, label %642, label %621

621:                                              ; preds = %613
  %622 = getelementptr inbounds i16, i16* %154, i64 %617
  %623 = load i16, i16* %622, align 2
  %624 = sext i16 %623 to i32
  %625 = getelementptr inbounds i8*, i8** %491, i64 %617
  %626 = load i8*, i8** %625, align 8
  %627 = getelementptr inbounds i8, i8* %626, i64 %611
  %628 = load i8, i8* %627, align 1
  %629 = zext i8 %628 to i32
  %630 = mul nsw i32 %629, %624
  %631 = add nsw i32 %630, %618
  %632 = getelementptr inbounds i8, i8* %626, i64 %609
  %633 = load i8, i8* %632, align 1
  %634 = zext i8 %633 to i32
  %635 = mul nsw i32 %634, %624
  %636 = add nsw i32 %635, %619
  %637 = getelementptr inbounds i8, i8* %626, i64 %607
  %638 = load i8, i8* %637, align 1
  %639 = zext i8 %638 to i32
  %640 = mul nsw i32 %639, %624
  %641 = add nsw i32 %640, %620
  br label %642

642:                                              ; preds = %621, %613, %603
  %643 = phi i32 [ 0, %603 ], [ %614, %613 ], [ %641, %621 ]
  %644 = phi i32 [ 0, %603 ], [ %615, %613 ], [ %636, %621 ]
  %645 = phi i32 [ 0, %603 ], [ %616, %613 ], [ %631, %621 ]
  %646 = ashr i32 %643, 14
  %647 = ashr i32 %644, 14
  %648 = ashr i32 %645, 14
  %649 = icmp ult i32 %646, 256
  %650 = trunc i32 %646 to i8
  %651 = ashr i32 %643, 31
  %652 = trunc i32 %651 to i8
  %653 = xor i8 %652, -1
  %654 = select i1 %649, i8 %650, i8 %653
  %655 = getelementptr inbounds i8, i8* %463, i64 %607
  store i8 %654, i8* %655, align 1
  %656 = icmp ult i32 %647, 256
  %657 = trunc i32 %647 to i8
  %658 = ashr i32 %644, 31
  %659 = trunc i32 %658 to i8
  %660 = xor i8 %659, -1
  %661 = select i1 %656, i8 %657, i8 %660
  %662 = getelementptr inbounds i8, i8* %463, i64 %609
  store i8 %661, i8* %662, align 1
  %663 = icmp ult i32 %648, 256
  %664 = trunc i32 %648 to i8
  %665 = ashr i32 %645, 31
  %666 = trunc i32 %665 to i8
  %667 = xor i8 %666, -1
  %668 = select i1 %663, i8 %664, i8 %667
  %669 = getelementptr inbounds i8, i8* %463, i64 %611
  store i8 %668, i8* %669, align 1
  %670 = or i32 %606, 3
  %671 = zext i32 %670 to i64
  %672 = getelementptr inbounds i8, i8* %463, i64 %671
  store i8 -1, i8* %672, align 1
  %673 = add nuw nsw i64 %604, 1
  %674 = icmp eq i64 %673, %597
  br i1 %674, label %725, label %603

675:                                              ; preds = %612, %675
  %676 = phi i64 [ %722, %675 ], [ 0, %612 ]
  %677 = phi i32 [ %721, %675 ], [ 0, %612 ]
  %678 = phi i32 [ %716, %675 ], [ 0, %612 ]
  %679 = phi i32 [ %711, %675 ], [ 0, %612 ]
  %680 = phi i64 [ %723, %675 ], [ %601, %612 ]
  %681 = getelementptr inbounds i16, i16* %154, i64 %676
  %682 = load i16, i16* %681, align 2
  %683 = sext i16 %682 to i32
  %684 = getelementptr inbounds i8*, i8** %491, i64 %676
  %685 = load i8*, i8** %684, align 8
  %686 = getelementptr inbounds i8, i8* %685, i64 %607
  %687 = load i8, i8* %686, align 1
  %688 = zext i8 %687 to i32
  %689 = mul nsw i32 %688, %683
  %690 = add nsw i32 %689, %679
  %691 = getelementptr inbounds i8, i8* %685, i64 %609
  %692 = load i8, i8* %691, align 1
  %693 = zext i8 %692 to i32
  %694 = mul nsw i32 %693, %683
  %695 = add nsw i32 %694, %678
  %696 = getelementptr inbounds i8, i8* %685, i64 %611
  %697 = load i8, i8* %696, align 1
  %698 = zext i8 %697 to i32
  %699 = mul nsw i32 %698, %683
  %700 = add nsw i32 %699, %677
  %701 = or i64 %676, 1
  %702 = getelementptr inbounds i16, i16* %154, i64 %701
  %703 = load i16, i16* %702, align 2
  %704 = sext i16 %703 to i32
  %705 = getelementptr inbounds i8*, i8** %491, i64 %701
  %706 = load i8*, i8** %705, align 8
  %707 = getelementptr inbounds i8, i8* %706, i64 %607
  %708 = load i8, i8* %707, align 1
  %709 = zext i8 %708 to i32
  %710 = mul nsw i32 %709, %704
  %711 = add nsw i32 %710, %690
  %712 = getelementptr inbounds i8, i8* %706, i64 %609
  %713 = load i8, i8* %712, align 1
  %714 = zext i8 %713 to i32
  %715 = mul nsw i32 %714, %704
  %716 = add nsw i32 %715, %695
  %717 = getelementptr inbounds i8, i8* %706, i64 %611
  %718 = load i8, i8* %717, align 1
  %719 = zext i8 %718 to i32
  %720 = mul nsw i32 %719, %704
  %721 = add nsw i32 %720, %700
  %722 = add nuw nsw i64 %676, 2
  %723 = add i64 %680, -2
  %724 = icmp eq i64 %723, 0
  br i1 %724, label %613, label %675

725:                                              ; preds = %642, %516, %594, %500, %497
  %726 = add nuw nsw i64 %140, 1
  %727 = icmp eq i64 %726, %120
  br i1 %727, label %121, label %728

728:                                              ; preds = %725
  %729 = load %"struct.skia::ConvolutionFilter1D::FilterInstance"*, %"struct.skia::ConvolutionFilter1D::FilterInstance"** %18, align 8
  br label %138
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4skia24SingleChannelConvolveX1DEPKhiiiRKNS_19ConvolutionFilter1DERK7SkISizePhiiib(i8* nocapture readonly, i32, i32, i32, %"class.skia::ConvolutionFilter1D"* nocapture readonly dereferenceable(56), %struct.SkISize* nocapture readonly dereferenceable(8), i8* nocapture, i32, i32, i32, i1 zeroext) local_unnamed_addr #0 {
  %12 = getelementptr inbounds %"class.skia::ConvolutionFilter1D", %"class.skia::ConvolutionFilter1D"* %4, i64 0, i32 0, i32 0, i32 0
  %13 = load %"struct.skia::ConvolutionFilter1D::FilterInstance"*, %"struct.skia::ConvolutionFilter1D::FilterInstance"** %12, align 8
  %14 = getelementptr inbounds %"struct.skia::ConvolutionFilter1D::FilterInstance", %"struct.skia::ConvolutionFilter1D::FilterInstance"* %13, i64 0, i32 1
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds %"struct.skia::ConvolutionFilter1D::FilterInstance", %"struct.skia::ConvolutionFilter1D::FilterInstance"* %13, i64 0, i32 2
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds %"struct.skia::ConvolutionFilter1D::FilterInstance", %"struct.skia::ConvolutionFilter1D::FilterInstance"* %13, i64 0, i32 3
  %19 = load i32, i32* %18, align 4
  %20 = icmp eq i32 %17, 0
  br i1 %20, label %768, label %21

21:                                               ; preds = %11
  %22 = getelementptr inbounds %"struct.skia::ConvolutionFilter1D::FilterInstance", %"struct.skia::ConvolutionFilter1D::FilterInstance"* %13, i64 0, i32 0
  %23 = load i32, i32* %22, align 4
  %24 = sext i32 %23 to i64
  %25 = getelementptr inbounds %"class.skia::ConvolutionFilter1D", %"class.skia::ConvolutionFilter1D"* %4, i64 0, i32 1, i32 0, i32 0
  %26 = load i16*, i16** %25, align 8
  %27 = getelementptr inbounds i16, i16* %26, i64 %24
  %28 = icmp eq i16* %27, null
  br i1 %28, label %768, label %29

29:                                               ; preds = %21
  %30 = getelementptr inbounds %struct.SkISize, %struct.SkISize* %5, i64 0, i32 0
  %31 = load i32, i32* %30, align 4
  %32 = icmp slt i32 %31, %19
  br i1 %32, label %768, label %33

33:                                               ; preds = %29
  %34 = sdiv i32 %17, 2
  %35 = sub nsw i32 %19, %15
  %36 = shl nsw i32 %15, 1
  %37 = icmp eq i32 %35, %36
  br i1 %37, label %41, label %38

38:                                               ; preds = %33
  %39 = sdiv i32 %19, 2
  %40 = sub nsw i32 %39, %15
  br label %41

41:                                               ; preds = %33, %38
  %42 = phi i32 [ %40, %38 ], [ %34, %33 ]
  %43 = getelementptr inbounds %struct.SkISize, %struct.SkISize* %5, i64 0, i32 1
  %44 = load i32, i32* %43, align 4
  %45 = icmp sgt i32 %44, 0
  br i1 %45, label %46, label %768

46:                                               ; preds = %41
  %47 = sext i32 %8 to i64
  %48 = icmp sgt i32 %42, 0
  %49 = sext i32 %2 to i64
  %50 = sext i32 %9 to i64
  %51 = icmp sgt i32 %17, 0
  %52 = sext i32 %1 to i64
  %53 = sext i32 %7 to i64
  %54 = add i32 %42, -1
  %55 = sext i32 %3 to i64
  %56 = select i1 %48, i32 %42, i32 0
  %57 = sub i32 %56, %42
  %58 = mul i32 %57, %3
  %59 = add i32 %58, %2
  %60 = add i32 %42, -2
  %61 = sext i32 %17 to i64
  %62 = zext i32 %17 to i64
  %63 = sext i32 %17 to i64
  %64 = icmp eq i32 %3, 1
  %65 = icmp ugt i32 %17, 7
  %66 = icmp eq i32 %3, 1
  %67 = and i1 %65, %66
  %68 = and i64 %62, 4294967288
  %69 = mul nsw i64 %68, %55
  %70 = icmp eq i64 %68, %62
  %71 = and i64 %62, 3
  %72 = icmp eq i64 %71, 0
  %73 = icmp eq i32 %3, 1
  br label %74

74:                                               ; preds = %46, %761
  %75 = phi i32 [ %31, %46 ], [ %762, %761 ]
  %76 = phi i32 [ 0, %46 ], [ %765, %761 ]
  %77 = phi i8* [ %6, %46 ], [ %764, %761 ]
  %78 = phi i8* [ %0, %46 ], [ %763, %761 ]
  %79 = getelementptr inbounds i8, i8* %77, i64 %47
  br i1 %48, label %80, label %84

80:                                               ; preds = %74
  %81 = getelementptr inbounds i8, i8* %78, i64 %49
  br label %90

82:                                               ; preds = %322
  %83 = load i32, i32* %30, align 4
  br label %84

84:                                               ; preds = %82, %74
  %85 = phi i32 [ %75, %74 ], [ %83, %82 ]
  %86 = phi i8* [ %79, %74 ], [ %331, %82 ]
  %87 = phi i32 [ 0, %74 ], [ %42, %82 ]
  %88 = sub nsw i32 %85, %42
  %89 = icmp slt i32 %87, %88
  br i1 %89, label %346, label %335

90:                                               ; preds = %322, %80
  %91 = phi i32 [ %42, %80 ], [ %333, %322 ]
  %92 = phi i32 [ %54, %80 ], [ %332, %322 ]
  %93 = phi i32 [ 0, %80 ], [ %330, %322 ]
  %94 = phi i8* [ %79, %80 ], [ %331, %322 ]
  %95 = sub i32 %42, %93
  %96 = icmp sgt i32 %95, 0
  %97 = select i1 %96, i32 %95, i32 0
  %98 = zext i32 %97 to i64
  %99 = add nuw nsw i64 %98, 1
  %100 = icmp sgt i64 %99, %63
  %101 = select i1 %100, i64 %99, i64 %63
  %102 = sub nsw i64 %101, %98
  %103 = add nsw i64 %102, -4
  %104 = lshr i64 %103, 2
  %105 = add nuw nsw i64 %104, 1
  %106 = sub i32 %42, %93
  %107 = and i32 %106, -8
  %108 = zext i32 %107 to i64
  %109 = add nsw i64 %108, -8
  %110 = lshr exact i64 %109, 3
  %111 = add nuw nsw i64 %110, 1
  %112 = sub i32 %42, %93
  %113 = zext i32 %112 to i64
  %114 = sub i32 %42, %93
  %115 = icmp sgt i32 %114, 0
  %116 = select i1 %115, i32 %114, i32 0
  %117 = zext i32 %116 to i64
  %118 = add nuw nsw i64 %117, 1
  %119 = icmp sgt i64 %118, %63
  %120 = select i1 %119, i64 %118, i64 %63
  %121 = sub nsw i64 %120, %117
  %122 = icmp sgt i32 %91, 0
  %123 = select i1 %122, i32 %91, i32 0
  %124 = zext i32 %123 to i64
  %125 = add i32 %92, 1
  %126 = icmp sgt i32 %42, %93
  br i1 %126, label %127, label %208

127:                                              ; preds = %90
  %128 = load i8, i8* %81, align 1
  %129 = zext i8 %128 to i32
  %130 = zext i32 %91 to i64
  %131 = icmp ult i32 %112, 8
  br i1 %131, label %132, label %135

132:                                              ; preds = %198, %127
  %133 = phi i64 [ 0, %127 ], [ %136, %198 ]
  %134 = phi i32 [ 0, %127 ], [ %206, %198 ]
  br label %290

135:                                              ; preds = %127
  %136 = and i64 %113, 4294967288
  %137 = insertelement <4 x i32> undef, i32 %129, i32 0
  %138 = shufflevector <4 x i32> %137, <4 x i32> undef, <4 x i32> zeroinitializer
  %139 = insertelement <4 x i32> undef, i32 %129, i32 0
  %140 = shufflevector <4 x i32> %139, <4 x i32> undef, <4 x i32> zeroinitializer
  %141 = and i64 %111, 1
  %142 = icmp eq i64 %109, 0
  br i1 %142, label %178, label %143

143:                                              ; preds = %135
  %144 = sub nuw nsw i64 %111, %141
  br label %145

145:                                              ; preds = %145, %143
  %146 = phi i64 [ 0, %143 ], [ %175, %145 ]
  %147 = phi <4 x i32> [ zeroinitializer, %143 ], [ %173, %145 ]
  %148 = phi <4 x i32> [ zeroinitializer, %143 ], [ %174, %145 ]
  %149 = phi i64 [ %144, %143 ], [ %176, %145 ]
  %150 = getelementptr inbounds i16, i16* %27, i64 %146
  %151 = bitcast i16* %150 to <4 x i16>*
  %152 = load <4 x i16>, <4 x i16>* %151, align 2
  %153 = getelementptr inbounds i16, i16* %150, i64 4
  %154 = bitcast i16* %153 to <4 x i16>*
  %155 = load <4 x i16>, <4 x i16>* %154, align 2
  %156 = sext <4 x i16> %152 to <4 x i32>
  %157 = sext <4 x i16> %155 to <4 x i32>
  %158 = mul nsw <4 x i32> %138, %156
  %159 = mul nsw <4 x i32> %140, %157
  %160 = add nsw <4 x i32> %158, %147
  %161 = add nsw <4 x i32> %159, %148
  %162 = or i64 %146, 8
  %163 = getelementptr inbounds i16, i16* %27, i64 %162
  %164 = bitcast i16* %163 to <4 x i16>*
  %165 = load <4 x i16>, <4 x i16>* %164, align 2
  %166 = getelementptr inbounds i16, i16* %163, i64 4
  %167 = bitcast i16* %166 to <4 x i16>*
  %168 = load <4 x i16>, <4 x i16>* %167, align 2
  %169 = sext <4 x i16> %165 to <4 x i32>
  %170 = sext <4 x i16> %168 to <4 x i32>
  %171 = mul nsw <4 x i32> %138, %169
  %172 = mul nsw <4 x i32> %140, %170
  %173 = add nsw <4 x i32> %171, %160
  %174 = add nsw <4 x i32> %172, %161
  %175 = add i64 %146, 16
  %176 = add i64 %149, -2
  %177 = icmp eq i64 %176, 0
  br i1 %177, label %178, label %145, !llvm.loop !2

178:                                              ; preds = %145, %135
  %179 = phi <4 x i32> [ undef, %135 ], [ %173, %145 ]
  %180 = phi <4 x i32> [ undef, %135 ], [ %174, %145 ]
  %181 = phi i64 [ 0, %135 ], [ %175, %145 ]
  %182 = phi <4 x i32> [ zeroinitializer, %135 ], [ %173, %145 ]
  %183 = phi <4 x i32> [ zeroinitializer, %135 ], [ %174, %145 ]
  %184 = icmp eq i64 %141, 0
  br i1 %184, label %198, label %185

185:                                              ; preds = %178
  %186 = getelementptr inbounds i16, i16* %27, i64 %181
  %187 = getelementptr inbounds i16, i16* %186, i64 4
  %188 = bitcast i16* %187 to <4 x i16>*
  %189 = load <4 x i16>, <4 x i16>* %188, align 2
  %190 = sext <4 x i16> %189 to <4 x i32>
  %191 = mul nsw <4 x i32> %140, %190
  %192 = add nsw <4 x i32> %191, %183
  %193 = bitcast i16* %186 to <4 x i16>*
  %194 = load <4 x i16>, <4 x i16>* %193, align 2
  %195 = sext <4 x i16> %194 to <4 x i32>
  %196 = mul nsw <4 x i32> %138, %195
  %197 = add nsw <4 x i32> %196, %182
  br label %198

198:                                              ; preds = %178, %185
  %199 = phi <4 x i32> [ %179, %178 ], [ %197, %185 ]
  %200 = phi <4 x i32> [ %180, %178 ], [ %192, %185 ]
  %201 = add <4 x i32> %200, %199
  %202 = shufflevector <4 x i32> %201, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %203 = add <4 x i32> %201, %202
  %204 = shufflevector <4 x i32> %203, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %205 = add <4 x i32> %203, %204
  %206 = extractelement <4 x i32> %205, i32 0
  %207 = icmp eq i64 %136, %113
  br i1 %207, label %208, label %132

208:                                              ; preds = %290, %198, %90
  %209 = phi i32 [ 0, %90 ], [ %206, %198 ], [ %297, %290 ]
  %210 = phi i32 [ 0, %90 ], [ %125, %198 ], [ %125, %290 ]
  %211 = icmp slt i32 %210, %17
  br i1 %211, label %212, label %315

212:                                              ; preds = %208
  %213 = icmp ugt i64 %121, 3
  %214 = and i1 %213, %64
  br i1 %214, label %215, label %286

215:                                              ; preds = %212
  %216 = and i64 %121, -4
  %217 = add nsw i64 %216, %124
  %218 = mul i64 %216, %55
  %219 = add i64 %218, %49
  %220 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %209, i32 0
  %221 = and i64 %105, 1
  %222 = icmp eq i64 %104, 0
  br i1 %222, label %259, label %223

223:                                              ; preds = %215
  %224 = sub nuw nsw i64 %105, %221
  br label %225

225:                                              ; preds = %225, %223
  %226 = phi i64 [ 0, %223 ], [ %256, %225 ]
  %227 = phi <4 x i32> [ %220, %223 ], [ %255, %225 ]
  %228 = phi i64 [ %224, %223 ], [ %257, %225 ]
  %229 = add i64 %226, %124
  %230 = mul i64 %226, %55
  %231 = add i64 %230, %49
  %232 = getelementptr inbounds i16, i16* %27, i64 %229
  %233 = bitcast i16* %232 to <4 x i16>*
  %234 = load <4 x i16>, <4 x i16>* %233, align 2
  %235 = sext <4 x i16> %234 to <4 x i32>
  %236 = getelementptr inbounds i8, i8* %78, i64 %231
  %237 = bitcast i8* %236 to <4 x i8>*
  %238 = load <4 x i8>, <4 x i8>* %237, align 1
  %239 = zext <4 x i8> %238 to <4 x i32>
  %240 = mul nsw <4 x i32> %239, %235
  %241 = add nsw <4 x i32> %240, %227
  %242 = or i64 %226, 4
  %243 = add i64 %242, %124
  %244 = mul i64 %242, %55
  %245 = add i64 %244, %49
  %246 = getelementptr inbounds i16, i16* %27, i64 %243
  %247 = bitcast i16* %246 to <4 x i16>*
  %248 = load <4 x i16>, <4 x i16>* %247, align 2
  %249 = sext <4 x i16> %248 to <4 x i32>
  %250 = getelementptr inbounds i8, i8* %78, i64 %245
  %251 = bitcast i8* %250 to <4 x i8>*
  %252 = load <4 x i8>, <4 x i8>* %251, align 1
  %253 = zext <4 x i8> %252 to <4 x i32>
  %254 = mul nsw <4 x i32> %253, %249
  %255 = add nsw <4 x i32> %254, %241
  %256 = add i64 %226, 8
  %257 = add i64 %228, -2
  %258 = icmp eq i64 %257, 0
  br i1 %258, label %259, label %225, !llvm.loop !4

259:                                              ; preds = %225, %215
  %260 = phi <4 x i32> [ undef, %215 ], [ %255, %225 ]
  %261 = phi i64 [ 0, %215 ], [ %256, %225 ]
  %262 = phi <4 x i32> [ %220, %215 ], [ %255, %225 ]
  %263 = icmp eq i64 %221, 0
  br i1 %263, label %278, label %264

264:                                              ; preds = %259
  %265 = mul i64 %261, %55
  %266 = add i64 %265, %49
  %267 = getelementptr inbounds i8, i8* %78, i64 %266
  %268 = bitcast i8* %267 to <4 x i8>*
  %269 = load <4 x i8>, <4 x i8>* %268, align 1
  %270 = zext <4 x i8> %269 to <4 x i32>
  %271 = add i64 %261, %124
  %272 = getelementptr inbounds i16, i16* %27, i64 %271
  %273 = bitcast i16* %272 to <4 x i16>*
  %274 = load <4 x i16>, <4 x i16>* %273, align 2
  %275 = sext <4 x i16> %274 to <4 x i32>
  %276 = mul nsw <4 x i32> %270, %275
  %277 = add nsw <4 x i32> %276, %262
  br label %278

278:                                              ; preds = %259, %264
  %279 = phi <4 x i32> [ %260, %259 ], [ %277, %264 ]
  %280 = shufflevector <4 x i32> %279, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %281 = add <4 x i32> %279, %280
  %282 = shufflevector <4 x i32> %281, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %283 = add <4 x i32> %281, %282
  %284 = extractelement <4 x i32> %283, i32 0
  %285 = icmp eq i64 %121, %216
  br i1 %285, label %315, label %286

286:                                              ; preds = %212, %278
  %287 = phi i64 [ %124, %212 ], [ %217, %278 ]
  %288 = phi i64 [ %49, %212 ], [ %219, %278 ]
  %289 = phi i32 [ %209, %212 ], [ %284, %278 ]
  br label %300

290:                                              ; preds = %132, %290
  %291 = phi i64 [ %298, %290 ], [ %133, %132 ]
  %292 = phi i32 [ %297, %290 ], [ %134, %132 ]
  %293 = getelementptr inbounds i16, i16* %27, i64 %291
  %294 = load i16, i16* %293, align 2
  %295 = sext i16 %294 to i32
  %296 = mul nsw i32 %129, %295
  %297 = add nsw i32 %296, %292
  %298 = add nuw nsw i64 %291, 1
  %299 = icmp eq i64 %298, %130
  br i1 %299, label %208, label %290, !llvm.loop !5

300:                                              ; preds = %286, %300
  %301 = phi i64 [ %312, %300 ], [ %287, %286 ]
  %302 = phi i64 [ %313, %300 ], [ %288, %286 ]
  %303 = phi i32 [ %311, %300 ], [ %289, %286 ]
  %304 = getelementptr inbounds i16, i16* %27, i64 %301
  %305 = load i16, i16* %304, align 2
  %306 = sext i16 %305 to i32
  %307 = getelementptr inbounds i8, i8* %78, i64 %302
  %308 = load i8, i8* %307, align 1
  %309 = zext i8 %308 to i32
  %310 = mul nsw i32 %309, %306
  %311 = add nsw i32 %310, %303
  %312 = add nuw nsw i64 %301, 1
  %313 = add i64 %302, %55
  %314 = icmp slt i64 %312, %61
  br i1 %314, label %300, label %315, !llvm.loop !7

315:                                              ; preds = %300, %278, %208
  %316 = phi i32 [ %209, %208 ], [ %284, %278 ], [ %311, %300 ]
  %317 = ashr i32 %316, 14
  br i1 %10, label %318, label %322

318:                                              ; preds = %315
  %319 = icmp slt i32 %317, 0
  %320 = sub nsw i32 0, %317
  %321 = select i1 %319, i32 %320, i32 %317
  br label %322

322:                                              ; preds = %315, %318
  %323 = phi i32 [ %321, %318 ], [ %317, %315 ]
  %324 = icmp ult i32 %323, 256
  %325 = trunc i32 %323 to i8
  %326 = ashr i32 %323, 31
  %327 = trunc i32 %326 to i8
  %328 = xor i8 %327, -1
  %329 = select i1 %324, i8 %325, i8 %328
  store i8 %329, i8* %94, align 1
  %330 = add nuw nsw i32 %93, 1
  %331 = getelementptr inbounds i8, i8* %94, i64 %50
  %332 = add i32 %92, -1
  %333 = add i32 %91, -1
  %334 = icmp eq i32 %330, %42
  br i1 %334, label %82, label %90

335:                                              ; preds = %425, %84
  %336 = phi i32 [ %85, %84 ], [ %435, %425 ]
  %337 = phi i8* [ %86, %84 ], [ %434, %425 ]
  %338 = phi i32 [ %87, %84 ], [ %433, %425 ]
  %339 = icmp sgt i32 %336, %338
  br i1 %339, label %340, label %761

340:                                              ; preds = %335
  %341 = sub i32 %338, %42
  %342 = mul i32 %341, %3
  %343 = add i32 %342, %2
  %344 = sub i32 %60, %338
  %345 = sub i32 %54, %338
  br label %484

346:                                              ; preds = %84, %425
  %347 = phi i32 [ %438, %425 ], [ %59, %84 ]
  %348 = phi i32 [ %433, %425 ], [ %87, %84 ]
  %349 = phi i8* [ %434, %425 ], [ %86, %84 ]
  br i1 %51, label %350, label %418

350:                                              ; preds = %346
  %351 = sext i32 %347 to i64
  br i1 %67, label %352, label %389

352:                                              ; preds = %350
  %353 = add i64 %69, %351
  br label %354

354:                                              ; preds = %354, %352
  %355 = phi i64 [ 0, %352 ], [ %380, %354 ]
  %356 = phi <4 x i32> [ zeroinitializer, %352 ], [ %378, %354 ]
  %357 = phi <4 x i32> [ zeroinitializer, %352 ], [ %379, %354 ]
  %358 = mul i64 %355, %55
  %359 = add i64 %358, %351
  %360 = getelementptr inbounds i16, i16* %27, i64 %355
  %361 = bitcast i16* %360 to <4 x i16>*
  %362 = load <4 x i16>, <4 x i16>* %361, align 2
  %363 = getelementptr inbounds i16, i16* %360, i64 4
  %364 = bitcast i16* %363 to <4 x i16>*
  %365 = load <4 x i16>, <4 x i16>* %364, align 2
  %366 = sext <4 x i16> %362 to <4 x i32>
  %367 = sext <4 x i16> %365 to <4 x i32>
  %368 = getelementptr inbounds i8, i8* %78, i64 %359
  %369 = bitcast i8* %368 to <4 x i8>*
  %370 = load <4 x i8>, <4 x i8>* %369, align 1
  %371 = getelementptr inbounds i8, i8* %368, i64 4
  %372 = bitcast i8* %371 to <4 x i8>*
  %373 = load <4 x i8>, <4 x i8>* %372, align 1
  %374 = zext <4 x i8> %370 to <4 x i32>
  %375 = zext <4 x i8> %373 to <4 x i32>
  %376 = mul nsw <4 x i32> %374, %366
  %377 = mul nsw <4 x i32> %375, %367
  %378 = add nsw <4 x i32> %376, %356
  %379 = add nsw <4 x i32> %377, %357
  %380 = add i64 %355, 8
  %381 = icmp eq i64 %380, %68
  br i1 %381, label %382, label %354, !llvm.loop !8

382:                                              ; preds = %354
  %383 = add <4 x i32> %379, %378
  %384 = shufflevector <4 x i32> %383, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %385 = add <4 x i32> %383, %384
  %386 = shufflevector <4 x i32> %385, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %387 = add <4 x i32> %385, %386
  %388 = extractelement <4 x i32> %387, i32 0
  br i1 %70, label %418, label %389

389:                                              ; preds = %350, %382
  %390 = phi i64 [ %351, %350 ], [ %353, %382 ]
  %391 = phi i64 [ 0, %350 ], [ %68, %382 ]
  %392 = phi i32 [ 0, %350 ], [ %388, %382 ]
  %393 = xor i64 %391, -1
  %394 = add nsw i64 %393, %62
  br i1 %72, label %412, label %395

395:                                              ; preds = %389, %395
  %396 = phi i64 [ %409, %395 ], [ %390, %389 ]
  %397 = phi i64 [ %408, %395 ], [ %391, %389 ]
  %398 = phi i32 [ %407, %395 ], [ %392, %389 ]
  %399 = phi i64 [ %410, %395 ], [ %71, %389 ]
  %400 = getelementptr inbounds i16, i16* %27, i64 %397
  %401 = load i16, i16* %400, align 2
  %402 = sext i16 %401 to i32
  %403 = getelementptr inbounds i8, i8* %78, i64 %396
  %404 = load i8, i8* %403, align 1
  %405 = zext i8 %404 to i32
  %406 = mul nsw i32 %405, %402
  %407 = add nsw i32 %406, %398
  %408 = add nuw nsw i64 %397, 1
  %409 = add i64 %396, %55
  %410 = add i64 %399, -1
  %411 = icmp eq i64 %410, 0
  br i1 %411, label %412, label %395, !llvm.loop !9

412:                                              ; preds = %395, %389
  %413 = phi i32 [ undef, %389 ], [ %407, %395 ]
  %414 = phi i64 [ %390, %389 ], [ %409, %395 ]
  %415 = phi i64 [ %391, %389 ], [ %408, %395 ]
  %416 = phi i32 [ %392, %389 ], [ %407, %395 ]
  %417 = icmp ult i64 %394, 3
  br i1 %417, label %418, label %439

418:                                              ; preds = %412, %439, %382, %346
  %419 = phi i32 [ 0, %346 ], [ %388, %382 ], [ %413, %412 ], [ %480, %439 ]
  %420 = ashr i32 %419, 14
  br i1 %10, label %421, label %425

421:                                              ; preds = %418
  %422 = icmp slt i32 %420, 0
  %423 = sub nsw i32 0, %420
  %424 = select i1 %422, i32 %423, i32 %420
  br label %425

425:                                              ; preds = %418, %421
  %426 = phi i32 [ %424, %421 ], [ %420, %418 ]
  %427 = icmp ult i32 %426, 256
  %428 = trunc i32 %426 to i8
  %429 = ashr i32 %426, 31
  %430 = trunc i32 %429 to i8
  %431 = xor i8 %430, -1
  %432 = select i1 %427, i8 %428, i8 %431
  store i8 %432, i8* %349, align 1
  %433 = add nuw nsw i32 %348, 1
  %434 = getelementptr inbounds i8, i8* %349, i64 %50
  %435 = load i32, i32* %30, align 4
  %436 = sub nsw i32 %435, %42
  %437 = icmp slt i32 %433, %436
  %438 = add i32 %347, %3
  br i1 %437, label %346, label %335

439:                                              ; preds = %412, %439
  %440 = phi i64 [ %482, %439 ], [ %414, %412 ]
  %441 = phi i64 [ %481, %439 ], [ %415, %412 ]
  %442 = phi i32 [ %480, %439 ], [ %416, %412 ]
  %443 = getelementptr inbounds i16, i16* %27, i64 %441
  %444 = load i16, i16* %443, align 2
  %445 = sext i16 %444 to i32
  %446 = getelementptr inbounds i8, i8* %78, i64 %440
  %447 = load i8, i8* %446, align 1
  %448 = zext i8 %447 to i32
  %449 = mul nsw i32 %448, %445
  %450 = add nsw i32 %449, %442
  %451 = add nuw nsw i64 %441, 1
  %452 = add i64 %440, %55
  %453 = getelementptr inbounds i16, i16* %27, i64 %451
  %454 = load i16, i16* %453, align 2
  %455 = sext i16 %454 to i32
  %456 = getelementptr inbounds i8, i8* %78, i64 %452
  %457 = load i8, i8* %456, align 1
  %458 = zext i8 %457 to i32
  %459 = mul nsw i32 %458, %455
  %460 = add nsw i32 %459, %450
  %461 = add nuw nsw i64 %441, 2
  %462 = add i64 %452, %55
  %463 = getelementptr inbounds i16, i16* %27, i64 %461
  %464 = load i16, i16* %463, align 2
  %465 = sext i16 %464 to i32
  %466 = getelementptr inbounds i8, i8* %78, i64 %462
  %467 = load i8, i8* %466, align 1
  %468 = zext i8 %467 to i32
  %469 = mul nsw i32 %468, %465
  %470 = add nsw i32 %469, %460
  %471 = add nuw nsw i64 %441, 3
  %472 = add i64 %462, %55
  %473 = getelementptr inbounds i16, i16* %27, i64 %471
  %474 = load i16, i16* %473, align 2
  %475 = sext i16 %474 to i32
  %476 = getelementptr inbounds i8, i8* %78, i64 %472
  %477 = load i8, i8* %476, align 1
  %478 = zext i8 %477 to i32
  %479 = mul nsw i32 %478, %475
  %480 = add nsw i32 %479, %470
  %481 = add nuw nsw i64 %441, 4
  %482 = add i64 %472, %55
  %483 = icmp eq i64 %481, %62
  br i1 %483, label %418, label %439, !llvm.loop !11

484:                                              ; preds = %340, %746
  %485 = phi i32 [ %345, %340 ], [ %760, %746 ]
  %486 = phi i32 [ %344, %340 ], [ %759, %746 ]
  %487 = phi i32 [ %343, %340 ], [ %758, %746 ]
  %488 = phi i32 [ %336, %340 ], [ %756, %746 ]
  %489 = phi i32 [ %338, %340 ], [ %754, %746 ]
  %490 = phi i8* [ %337, %340 ], [ %755, %746 ]
  %491 = sub nsw i32 %489, %42
  %492 = mul nsw i32 %491, %3
  %493 = add nsw i32 %492, %2
  %494 = xor i32 %489, -1
  %495 = add i32 %42, %494
  %496 = add i32 %495, %488
  %497 = icmp sgt i32 %496, 0
  br i1 %497, label %498, label %584

498:                                              ; preds = %484
  %499 = sext i32 %487 to i64
  %500 = add i32 %488, %486
  %501 = zext i32 %500 to i64
  %502 = add nuw nsw i64 %501, 1
  %503 = add i32 %488, %485
  %504 = zext i32 %503 to i64
  %505 = icmp ugt i32 %503, 7
  %506 = and i1 %505, %73
  br i1 %506, label %507, label %547

507:                                              ; preds = %498
  %508 = and i64 %504, 4294967288
  %509 = mul nsw i64 %508, %55
  %510 = add i64 %509, %499
  br label %511

511:                                              ; preds = %511, %507
  %512 = phi i64 [ 0, %507 ], [ %537, %511 ]
  %513 = phi <4 x i32> [ zeroinitializer, %507 ], [ %535, %511 ]
  %514 = phi <4 x i32> [ zeroinitializer, %507 ], [ %536, %511 ]
  %515 = mul i64 %512, %55
  %516 = add i64 %515, %499
  %517 = getelementptr inbounds i16, i16* %27, i64 %512
  %518 = bitcast i16* %517 to <4 x i16>*
  %519 = load <4 x i16>, <4 x i16>* %518, align 2
  %520 = getelementptr inbounds i16, i16* %517, i64 4
  %521 = bitcast i16* %520 to <4 x i16>*
  %522 = load <4 x i16>, <4 x i16>* %521, align 2
  %523 = sext <4 x i16> %519 to <4 x i32>
  %524 = sext <4 x i16> %522 to <4 x i32>
  %525 = getelementptr inbounds i8, i8* %78, i64 %516
  %526 = bitcast i8* %525 to <4 x i8>*
  %527 = load <4 x i8>, <4 x i8>* %526, align 1
  %528 = getelementptr inbounds i8, i8* %525, i64 4
  %529 = bitcast i8* %528 to <4 x i8>*
  %530 = load <4 x i8>, <4 x i8>* %529, align 1
  %531 = zext <4 x i8> %527 to <4 x i32>
  %532 = zext <4 x i8> %530 to <4 x i32>
  %533 = mul nsw <4 x i32> %531, %523
  %534 = mul nsw <4 x i32> %532, %524
  %535 = add nsw <4 x i32> %533, %513
  %536 = add nsw <4 x i32> %534, %514
  %537 = add i64 %512, 8
  %538 = icmp eq i64 %537, %508
  br i1 %538, label %539, label %511, !llvm.loop !12

539:                                              ; preds = %511
  %540 = add <4 x i32> %536, %535
  %541 = shufflevector <4 x i32> %540, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %542 = add <4 x i32> %540, %541
  %543 = shufflevector <4 x i32> %542, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %544 = add <4 x i32> %542, %543
  %545 = extractelement <4 x i32> %544, i32 0
  %546 = icmp eq i64 %508, %504
  br i1 %546, label %578, label %547

547:                                              ; preds = %498, %539
  %548 = phi i64 [ %499, %498 ], [ %510, %539 ]
  %549 = phi i64 [ 0, %498 ], [ %508, %539 ]
  %550 = phi i32 [ 0, %498 ], [ %545, %539 ]
  %551 = xor i64 %549, -1
  %552 = add nsw i64 %551, %504
  %553 = and i64 %504, 3
  %554 = icmp eq i64 %553, 0
  br i1 %554, label %572, label %555

555:                                              ; preds = %547, %555
  %556 = phi i64 [ %569, %555 ], [ %548, %547 ]
  %557 = phi i64 [ %568, %555 ], [ %549, %547 ]
  %558 = phi i32 [ %567, %555 ], [ %550, %547 ]
  %559 = phi i64 [ %570, %555 ], [ %553, %547 ]
  %560 = getelementptr inbounds i16, i16* %27, i64 %557
  %561 = load i16, i16* %560, align 2
  %562 = sext i16 %561 to i32
  %563 = getelementptr inbounds i8, i8* %78, i64 %556
  %564 = load i8, i8* %563, align 1
  %565 = zext i8 %564 to i32
  %566 = mul nsw i32 %565, %562
  %567 = add nsw i32 %566, %558
  %568 = add nuw nsw i64 %557, 1
  %569 = add i64 %556, %55
  %570 = add i64 %559, -1
  %571 = icmp eq i64 %570, 0
  br i1 %571, label %572, label %555, !llvm.loop !13

572:                                              ; preds = %555, %547
  %573 = phi i32 [ undef, %547 ], [ %567, %555 ]
  %574 = phi i64 [ %548, %547 ], [ %569, %555 ]
  %575 = phi i64 [ %549, %547 ], [ %568, %555 ]
  %576 = phi i32 [ %550, %547 ], [ %567, %555 ]
  %577 = icmp ult i64 %552, 3
  br i1 %577, label %578, label %684

578:                                              ; preds = %572, %684, %539
  %579 = phi i32 [ %545, %539 ], [ %573, %572 ], [ %725, %684 ]
  %580 = trunc i64 %502 to i32
  %581 = mul i32 %580, %3
  %582 = add i32 %487, %581
  %583 = trunc i64 %502 to i32
  br label %584

584:                                              ; preds = %578, %484
  %585 = phi i32 [ 0, %484 ], [ %579, %578 ]
  %586 = phi i32 [ %493, %484 ], [ %582, %578 ]
  %587 = phi i32 [ 0, %484 ], [ %583, %578 ]
  %588 = icmp slt i32 %587, %17
  br i1 %588, label %589, label %739

589:                                              ; preds = %584
  %590 = sext i32 %586 to i64
  %591 = getelementptr inbounds i8, i8* %78, i64 %590
  %592 = load i8, i8* %591, align 1
  %593 = zext i8 %592 to i32
  %594 = add i32 %488, %485
  %595 = icmp sgt i32 %594, 0
  %596 = select i1 %595, i32 %594, i32 0
  %597 = zext i32 %596 to i64
  %598 = sub nsw i64 %63, %597
  %599 = icmp ult i64 %598, 8
  br i1 %599, label %600, label %603

600:                                              ; preds = %674, %589
  %601 = phi i64 [ %597, %589 ], [ %605, %674 ]
  %602 = phi i32 [ %585, %589 ], [ %682, %674 ]
  br label %729

603:                                              ; preds = %589
  %604 = and i64 %598, -8
  %605 = add nsw i64 %604, %597
  %606 = insertelement <4 x i32> undef, i32 %593, i32 0
  %607 = shufflevector <4 x i32> %606, <4 x i32> undef, <4 x i32> zeroinitializer
  %608 = insertelement <4 x i32> undef, i32 %593, i32 0
  %609 = shufflevector <4 x i32> %608, <4 x i32> undef, <4 x i32> zeroinitializer
  %610 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %585, i32 0
  %611 = add nsw i64 %604, -8
  %612 = lshr exact i64 %611, 3
  %613 = add nuw nsw i64 %612, 1
  %614 = and i64 %613, 1
  %615 = icmp eq i64 %611, 0
  br i1 %615, label %653, label %616

616:                                              ; preds = %603
  %617 = sub nuw nsw i64 %613, %614
  br label %618

618:                                              ; preds = %618, %616
  %619 = phi i64 [ 0, %616 ], [ %650, %618 ]
  %620 = phi <4 x i32> [ %610, %616 ], [ %648, %618 ]
  %621 = phi <4 x i32> [ zeroinitializer, %616 ], [ %649, %618 ]
  %622 = phi i64 [ %617, %616 ], [ %651, %618 ]
  %623 = add i64 %619, %597
  %624 = getelementptr inbounds i16, i16* %27, i64 %623
  %625 = bitcast i16* %624 to <4 x i16>*
  %626 = load <4 x i16>, <4 x i16>* %625, align 2
  %627 = getelementptr inbounds i16, i16* %624, i64 4
  %628 = bitcast i16* %627 to <4 x i16>*
  %629 = load <4 x i16>, <4 x i16>* %628, align 2
  %630 = sext <4 x i16> %626 to <4 x i32>
  %631 = sext <4 x i16> %629 to <4 x i32>
  %632 = mul nsw <4 x i32> %607, %630
  %633 = mul nsw <4 x i32> %609, %631
  %634 = add nsw <4 x i32> %632, %620
  %635 = add nsw <4 x i32> %633, %621
  %636 = or i64 %619, 8
  %637 = add i64 %636, %597
  %638 = getelementptr inbounds i16, i16* %27, i64 %637
  %639 = bitcast i16* %638 to <4 x i16>*
  %640 = load <4 x i16>, <4 x i16>* %639, align 2
  %641 = getelementptr inbounds i16, i16* %638, i64 4
  %642 = bitcast i16* %641 to <4 x i16>*
  %643 = load <4 x i16>, <4 x i16>* %642, align 2
  %644 = sext <4 x i16> %640 to <4 x i32>
  %645 = sext <4 x i16> %643 to <4 x i32>
  %646 = mul nsw <4 x i32> %607, %644
  %647 = mul nsw <4 x i32> %609, %645
  %648 = add nsw <4 x i32> %646, %634
  %649 = add nsw <4 x i32> %647, %635
  %650 = add i64 %619, 16
  %651 = add i64 %622, -2
  %652 = icmp eq i64 %651, 0
  br i1 %652, label %653, label %618, !llvm.loop !14

653:                                              ; preds = %618, %603
  %654 = phi <4 x i32> [ undef, %603 ], [ %648, %618 ]
  %655 = phi <4 x i32> [ undef, %603 ], [ %649, %618 ]
  %656 = phi i64 [ 0, %603 ], [ %650, %618 ]
  %657 = phi <4 x i32> [ %610, %603 ], [ %648, %618 ]
  %658 = phi <4 x i32> [ zeroinitializer, %603 ], [ %649, %618 ]
  %659 = icmp eq i64 %614, 0
  br i1 %659, label %674, label %660

660:                                              ; preds = %653
  %661 = add i64 %656, %597
  %662 = getelementptr inbounds i16, i16* %27, i64 %661
  %663 = getelementptr inbounds i16, i16* %662, i64 4
  %664 = bitcast i16* %663 to <4 x i16>*
  %665 = load <4 x i16>, <4 x i16>* %664, align 2
  %666 = sext <4 x i16> %665 to <4 x i32>
  %667 = mul nsw <4 x i32> %609, %666
  %668 = add nsw <4 x i32> %667, %658
  %669 = bitcast i16* %662 to <4 x i16>*
  %670 = load <4 x i16>, <4 x i16>* %669, align 2
  %671 = sext <4 x i16> %670 to <4 x i32>
  %672 = mul nsw <4 x i32> %607, %671
  %673 = add nsw <4 x i32> %672, %657
  br label %674

674:                                              ; preds = %653, %660
  %675 = phi <4 x i32> [ %654, %653 ], [ %673, %660 ]
  %676 = phi <4 x i32> [ %655, %653 ], [ %668, %660 ]
  %677 = add <4 x i32> %676, %675
  %678 = shufflevector <4 x i32> %677, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %679 = add <4 x i32> %677, %678
  %680 = shufflevector <4 x i32> %679, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %681 = add <4 x i32> %679, %680
  %682 = extractelement <4 x i32> %681, i32 0
  %683 = icmp eq i64 %598, %604
  br i1 %683, label %739, label %600

684:                                              ; preds = %572, %684
  %685 = phi i64 [ %727, %684 ], [ %574, %572 ]
  %686 = phi i64 [ %726, %684 ], [ %575, %572 ]
  %687 = phi i32 [ %725, %684 ], [ %576, %572 ]
  %688 = getelementptr inbounds i16, i16* %27, i64 %686
  %689 = load i16, i16* %688, align 2
  %690 = sext i16 %689 to i32
  %691 = getelementptr inbounds i8, i8* %78, i64 %685
  %692 = load i8, i8* %691, align 1
  %693 = zext i8 %692 to i32
  %694 = mul nsw i32 %693, %690
  %695 = add nsw i32 %694, %687
  %696 = add nuw nsw i64 %686, 1
  %697 = add i64 %685, %55
  %698 = getelementptr inbounds i16, i16* %27, i64 %696
  %699 = load i16, i16* %698, align 2
  %700 = sext i16 %699 to i32
  %701 = getelementptr inbounds i8, i8* %78, i64 %697
  %702 = load i8, i8* %701, align 1
  %703 = zext i8 %702 to i32
  %704 = mul nsw i32 %703, %700
  %705 = add nsw i32 %704, %695
  %706 = add nuw nsw i64 %686, 2
  %707 = add i64 %697, %55
  %708 = getelementptr inbounds i16, i16* %27, i64 %706
  %709 = load i16, i16* %708, align 2
  %710 = sext i16 %709 to i32
  %711 = getelementptr inbounds i8, i8* %78, i64 %707
  %712 = load i8, i8* %711, align 1
  %713 = zext i8 %712 to i32
  %714 = mul nsw i32 %713, %710
  %715 = add nsw i32 %714, %705
  %716 = add nuw nsw i64 %686, 3
  %717 = add i64 %707, %55
  %718 = getelementptr inbounds i16, i16* %27, i64 %716
  %719 = load i16, i16* %718, align 2
  %720 = sext i16 %719 to i32
  %721 = getelementptr inbounds i8, i8* %78, i64 %717
  %722 = load i8, i8* %721, align 1
  %723 = zext i8 %722 to i32
  %724 = mul nsw i32 %723, %720
  %725 = add nsw i32 %724, %715
  %726 = add nuw nsw i64 %686, 4
  %727 = add i64 %717, %55
  %728 = icmp eq i64 %726, %504
  br i1 %728, label %578, label %684, !llvm.loop !15

729:                                              ; preds = %600, %729
  %730 = phi i64 [ %737, %729 ], [ %601, %600 ]
  %731 = phi i32 [ %736, %729 ], [ %602, %600 ]
  %732 = getelementptr inbounds i16, i16* %27, i64 %730
  %733 = load i16, i16* %732, align 2
  %734 = sext i16 %733 to i32
  %735 = mul nsw i32 %593, %734
  %736 = add nsw i32 %735, %731
  %737 = add nuw nsw i64 %730, 1
  %738 = icmp slt i64 %737, %63
  br i1 %738, label %729, label %739, !llvm.loop !16

739:                                              ; preds = %729, %674, %584
  %740 = phi i32 [ %585, %584 ], [ %682, %674 ], [ %736, %729 ]
  %741 = ashr i32 %740, 14
  br i1 %10, label %742, label %746

742:                                              ; preds = %739
  %743 = icmp slt i32 %741, 0
  %744 = sub nsw i32 0, %741
  %745 = select i1 %743, i32 %744, i32 %741
  br label %746

746:                                              ; preds = %739, %742
  %747 = phi i32 [ %745, %742 ], [ %741, %739 ]
  %748 = icmp ult i32 %747, 256
  %749 = trunc i32 %747 to i8
  %750 = ashr i32 %747, 31
  %751 = trunc i32 %750 to i8
  %752 = xor i8 %751, -1
  %753 = select i1 %748, i8 %749, i8 %752
  store i8 %753, i8* %490, align 1
  %754 = add nuw nsw i32 %489, 1
  %755 = getelementptr inbounds i8, i8* %490, i64 %50
  %756 = load i32, i32* %30, align 4
  %757 = icmp sgt i32 %756, %754
  %758 = add i32 %487, %3
  %759 = add i32 %486, -1
  %760 = add i32 %485, -1
  br i1 %757, label %484, label %761

761:                                              ; preds = %746, %335
  %762 = phi i32 [ %336, %335 ], [ %756, %746 ]
  %763 = getelementptr inbounds i8, i8* %78, i64 %52
  %764 = getelementptr inbounds i8, i8* %77, i64 %53
  %765 = add nuw nsw i32 %76, 1
  %766 = load i32, i32* %43, align 4
  %767 = icmp slt i32 %765, %766
  br i1 %767, label %74, label %768

768:                                              ; preds = %761, %41, %11, %21, %29
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4skia24SingleChannelConvolveY1DEPKhiiiRKNS_19ConvolutionFilter1DERK7SkISizePhiiib(i8* nocapture readonly, i32, i32, i32, %"class.skia::ConvolutionFilter1D"* nocapture readonly dereferenceable(56), %struct.SkISize* nocapture readonly dereferenceable(8), i8* nocapture, i32, i32, i32, i1 zeroext) local_unnamed_addr #0 {
  %12 = getelementptr inbounds %"class.skia::ConvolutionFilter1D", %"class.skia::ConvolutionFilter1D"* %4, i64 0, i32 0, i32 0, i32 0
  %13 = load %"struct.skia::ConvolutionFilter1D::FilterInstance"*, %"struct.skia::ConvolutionFilter1D::FilterInstance"** %12, align 8
  %14 = getelementptr inbounds %"struct.skia::ConvolutionFilter1D::FilterInstance", %"struct.skia::ConvolutionFilter1D::FilterInstance"* %13, i64 0, i32 1
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds %"struct.skia::ConvolutionFilter1D::FilterInstance", %"struct.skia::ConvolutionFilter1D::FilterInstance"* %13, i64 0, i32 2
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds %"struct.skia::ConvolutionFilter1D::FilterInstance", %"struct.skia::ConvolutionFilter1D::FilterInstance"* %13, i64 0, i32 3
  %19 = load i32, i32* %18, align 4
  %20 = icmp eq i32 %17, 0
  br i1 %20, label %738, label %21

21:                                               ; preds = %11
  %22 = getelementptr inbounds %"struct.skia::ConvolutionFilter1D::FilterInstance", %"struct.skia::ConvolutionFilter1D::FilterInstance"* %13, i64 0, i32 0
  %23 = load i32, i32* %22, align 4
  %24 = sext i32 %23 to i64
  %25 = getelementptr inbounds %"class.skia::ConvolutionFilter1D", %"class.skia::ConvolutionFilter1D"* %4, i64 0, i32 1, i32 0, i32 0
  %26 = load i16*, i16** %25, align 8
  %27 = getelementptr inbounds i16, i16* %26, i64 %24
  %28 = icmp eq i16* %27, null
  br i1 %28, label %738, label %29

29:                                               ; preds = %21
  %30 = getelementptr inbounds %struct.SkISize, %struct.SkISize* %5, i64 0, i32 1
  %31 = load i32, i32* %30, align 4
  %32 = icmp slt i32 %31, %19
  br i1 %32, label %738, label %33

33:                                               ; preds = %29
  %34 = sdiv i32 %17, 2
  %35 = sub nsw i32 %19, %15
  %36 = shl nsw i32 %15, 1
  %37 = icmp eq i32 %35, %36
  br i1 %37, label %41, label %38

38:                                               ; preds = %33
  %39 = sdiv i32 %19, 2
  %40 = sub nsw i32 %39, %15
  br label %41

41:                                               ; preds = %33, %38
  %42 = phi i32 [ %40, %38 ], [ %34, %33 ]
  %43 = getelementptr inbounds %struct.SkISize, %struct.SkISize* %5, i64 0, i32 0
  %44 = load i32, i32* %43, align 4
  %45 = icmp sgt i32 %44, 0
  br i1 %45, label %46, label %738

46:                                               ; preds = %41
  %47 = sext i32 %8 to i64
  %48 = icmp sgt i32 %42, 0
  %49 = sext i32 %7 to i64
  %50 = icmp sgt i32 %17, 0
  %51 = add i32 %42, -1
  %52 = sext i32 %1 to i64
  %53 = select i1 %48, i32 %42, i32 0
  %54 = sub i32 %53, %42
  %55 = mul i32 %54, %1
  %56 = add i32 %55, %2
  %57 = add i32 %42, -2
  %58 = sext i32 %3 to i64
  %59 = sext i32 %2 to i64
  %60 = sext i32 %9 to i64
  %61 = getelementptr inbounds i8, i8* %6, i64 %47
  %62 = sext i32 %17 to i64
  %63 = zext i32 %17 to i64
  %64 = sext i32 %17 to i64
  %65 = icmp eq i32 %1, 1
  %66 = icmp ugt i32 %17, 7
  %67 = icmp eq i32 %1, 1
  %68 = and i1 %66, %67
  %69 = and i64 %63, 4294967288
  %70 = mul nsw i64 %69, %52
  %71 = icmp eq i64 %69, %63
  %72 = and i64 %63, 3
  %73 = icmp eq i64 %72, 0
  %74 = icmp eq i32 %1, 1
  br label %75

75:                                               ; preds = %46, %730
  %76 = phi i32 [ %31, %46 ], [ %731, %730 ]
  %77 = phi i64 [ 0, %46 ], [ %732, %730 ]
  %78 = phi i32 [ %56, %46 ], [ %737, %730 ]
  %79 = phi i32 [ %2, %46 ], [ %736, %730 ]
  %80 = sext i32 %79 to i64
  %81 = mul nsw i64 %77, %60
  %82 = getelementptr inbounds i8, i8* %61, i64 %81
  br i1 %48, label %83, label %89

83:                                               ; preds = %75
  %84 = mul nsw i64 %77, %58
  %85 = add nsw i64 %84, %59
  %86 = getelementptr inbounds i8, i8* %0, i64 %85
  br label %95

87:                                               ; preds = %288
  %88 = load i32, i32* %30, align 4
  br label %89

89:                                               ; preds = %87, %75
  %90 = phi i32 [ %76, %75 ], [ %88, %87 ]
  %91 = phi i8* [ %82, %75 ], [ %297, %87 ]
  %92 = phi i32 [ 0, %75 ], [ %42, %87 ]
  %93 = sub nsw i32 %90, %42
  %94 = icmp slt i32 %92, %93
  br i1 %94, label %315, label %301

95:                                               ; preds = %288, %83
  %96 = phi i32 [ %42, %83 ], [ %299, %288 ]
  %97 = phi i32 [ %51, %83 ], [ %298, %288 ]
  %98 = phi i32 [ 0, %83 ], [ %296, %288 ]
  %99 = phi i8* [ %82, %83 ], [ %297, %288 ]
  %100 = sub i32 %42, %98
  %101 = and i32 %100, -8
  %102 = zext i32 %101 to i64
  %103 = add nsw i64 %102, -8
  %104 = lshr exact i64 %103, 3
  %105 = add nuw nsw i64 %104, 1
  %106 = sub i32 %42, %98
  %107 = zext i32 %106 to i64
  %108 = sub i32 %42, %98
  %109 = icmp sgt i32 %108, 0
  %110 = select i1 %109, i32 %108, i32 0
  %111 = zext i32 %110 to i64
  %112 = add nuw nsw i64 %111, 1
  %113 = icmp sgt i64 %112, %64
  %114 = select i1 %113, i64 %112, i64 %64
  %115 = sub nsw i64 %114, %111
  %116 = icmp sgt i32 %96, 0
  %117 = select i1 %116, i32 %96, i32 0
  %118 = zext i32 %117 to i64
  %119 = add i32 %97, 1
  %120 = icmp sgt i32 %42, %98
  br i1 %120, label %121, label %202

121:                                              ; preds = %95
  %122 = load i8, i8* %86, align 1
  %123 = zext i8 %122 to i32
  %124 = zext i32 %96 to i64
  %125 = icmp ult i32 %106, 8
  br i1 %125, label %126, label %129

126:                                              ; preds = %192, %121
  %127 = phi i64 [ 0, %121 ], [ %130, %192 ]
  %128 = phi i32 [ 0, %121 ], [ %200, %192 ]
  br label %256

129:                                              ; preds = %121
  %130 = and i64 %107, 4294967288
  %131 = insertelement <4 x i32> undef, i32 %123, i32 0
  %132 = shufflevector <4 x i32> %131, <4 x i32> undef, <4 x i32> zeroinitializer
  %133 = insertelement <4 x i32> undef, i32 %123, i32 0
  %134 = shufflevector <4 x i32> %133, <4 x i32> undef, <4 x i32> zeroinitializer
  %135 = and i64 %105, 1
  %136 = icmp eq i64 %103, 0
  br i1 %136, label %172, label %137

137:                                              ; preds = %129
  %138 = sub nuw nsw i64 %105, %135
  br label %139

139:                                              ; preds = %139, %137
  %140 = phi i64 [ 0, %137 ], [ %169, %139 ]
  %141 = phi <4 x i32> [ zeroinitializer, %137 ], [ %167, %139 ]
  %142 = phi <4 x i32> [ zeroinitializer, %137 ], [ %168, %139 ]
  %143 = phi i64 [ %138, %137 ], [ %170, %139 ]
  %144 = getelementptr inbounds i16, i16* %27, i64 %140
  %145 = bitcast i16* %144 to <4 x i16>*
  %146 = load <4 x i16>, <4 x i16>* %145, align 2
  %147 = getelementptr inbounds i16, i16* %144, i64 4
  %148 = bitcast i16* %147 to <4 x i16>*
  %149 = load <4 x i16>, <4 x i16>* %148, align 2
  %150 = sext <4 x i16> %146 to <4 x i32>
  %151 = sext <4 x i16> %149 to <4 x i32>
  %152 = mul nsw <4 x i32> %132, %150
  %153 = mul nsw <4 x i32> %134, %151
  %154 = add nsw <4 x i32> %152, %141
  %155 = add nsw <4 x i32> %153, %142
  %156 = or i64 %140, 8
  %157 = getelementptr inbounds i16, i16* %27, i64 %156
  %158 = bitcast i16* %157 to <4 x i16>*
  %159 = load <4 x i16>, <4 x i16>* %158, align 2
  %160 = getelementptr inbounds i16, i16* %157, i64 4
  %161 = bitcast i16* %160 to <4 x i16>*
  %162 = load <4 x i16>, <4 x i16>* %161, align 2
  %163 = sext <4 x i16> %159 to <4 x i32>
  %164 = sext <4 x i16> %162 to <4 x i32>
  %165 = mul nsw <4 x i32> %132, %163
  %166 = mul nsw <4 x i32> %134, %164
  %167 = add nsw <4 x i32> %165, %154
  %168 = add nsw <4 x i32> %166, %155
  %169 = add i64 %140, 16
  %170 = add i64 %143, -2
  %171 = icmp eq i64 %170, 0
  br i1 %171, label %172, label %139, !llvm.loop !17

172:                                              ; preds = %139, %129
  %173 = phi <4 x i32> [ undef, %129 ], [ %167, %139 ]
  %174 = phi <4 x i32> [ undef, %129 ], [ %168, %139 ]
  %175 = phi i64 [ 0, %129 ], [ %169, %139 ]
  %176 = phi <4 x i32> [ zeroinitializer, %129 ], [ %167, %139 ]
  %177 = phi <4 x i32> [ zeroinitializer, %129 ], [ %168, %139 ]
  %178 = icmp eq i64 %135, 0
  br i1 %178, label %192, label %179

179:                                              ; preds = %172
  %180 = getelementptr inbounds i16, i16* %27, i64 %175
  %181 = getelementptr inbounds i16, i16* %180, i64 4
  %182 = bitcast i16* %181 to <4 x i16>*
  %183 = load <4 x i16>, <4 x i16>* %182, align 2
  %184 = sext <4 x i16> %183 to <4 x i32>
  %185 = mul nsw <4 x i32> %134, %184
  %186 = add nsw <4 x i32> %185, %177
  %187 = bitcast i16* %180 to <4 x i16>*
  %188 = load <4 x i16>, <4 x i16>* %187, align 2
  %189 = sext <4 x i16> %188 to <4 x i32>
  %190 = mul nsw <4 x i32> %132, %189
  %191 = add nsw <4 x i32> %190, %176
  br label %192

192:                                              ; preds = %172, %179
  %193 = phi <4 x i32> [ %173, %172 ], [ %191, %179 ]
  %194 = phi <4 x i32> [ %174, %172 ], [ %186, %179 ]
  %195 = add <4 x i32> %194, %193
  %196 = shufflevector <4 x i32> %195, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %197 = add <4 x i32> %195, %196
  %198 = shufflevector <4 x i32> %197, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %199 = add <4 x i32> %197, %198
  %200 = extractelement <4 x i32> %199, i32 0
  %201 = icmp eq i64 %130, %107
  br i1 %201, label %202, label %126

202:                                              ; preds = %256, %192, %95
  %203 = phi i32 [ 0, %95 ], [ %200, %192 ], [ %263, %256 ]
  %204 = phi i32 [ 0, %95 ], [ %119, %192 ], [ %119, %256 ]
  %205 = icmp slt i32 %204, %17
  br i1 %205, label %206, label %281

206:                                              ; preds = %202
  %207 = icmp ugt i64 %115, 7
  %208 = and i1 %207, %65
  br i1 %208, label %209, label %252

209:                                              ; preds = %206
  %210 = and i64 %115, -8
  %211 = add nsw i64 %210, %118
  %212 = mul i64 %210, %52
  %213 = add i64 %212, %80
  %214 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %203, i32 0
  br label %215

215:                                              ; preds = %215, %209
  %216 = phi i64 [ 0, %209 ], [ %242, %215 ]
  %217 = phi <4 x i32> [ %214, %209 ], [ %240, %215 ]
  %218 = phi <4 x i32> [ zeroinitializer, %209 ], [ %241, %215 ]
  %219 = add i64 %216, %118
  %220 = mul i64 %216, %52
  %221 = add i64 %220, %80
  %222 = getelementptr inbounds i16, i16* %27, i64 %219
  %223 = bitcast i16* %222 to <4 x i16>*
  %224 = load <4 x i16>, <4 x i16>* %223, align 2
  %225 = getelementptr inbounds i16, i16* %222, i64 4
  %226 = bitcast i16* %225 to <4 x i16>*
  %227 = load <4 x i16>, <4 x i16>* %226, align 2
  %228 = sext <4 x i16> %224 to <4 x i32>
  %229 = sext <4 x i16> %227 to <4 x i32>
  %230 = getelementptr inbounds i8, i8* %0, i64 %221
  %231 = bitcast i8* %230 to <4 x i8>*
  %232 = load <4 x i8>, <4 x i8>* %231, align 1
  %233 = getelementptr inbounds i8, i8* %230, i64 4
  %234 = bitcast i8* %233 to <4 x i8>*
  %235 = load <4 x i8>, <4 x i8>* %234, align 1
  %236 = zext <4 x i8> %232 to <4 x i32>
  %237 = zext <4 x i8> %235 to <4 x i32>
  %238 = mul nsw <4 x i32> %236, %228
  %239 = mul nsw <4 x i32> %237, %229
  %240 = add nsw <4 x i32> %238, %217
  %241 = add nsw <4 x i32> %239, %218
  %242 = add i64 %216, 8
  %243 = icmp eq i64 %242, %210
  br i1 %243, label %244, label %215, !llvm.loop !18

244:                                              ; preds = %215
  %245 = add <4 x i32> %241, %240
  %246 = shufflevector <4 x i32> %245, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %247 = add <4 x i32> %245, %246
  %248 = shufflevector <4 x i32> %247, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %249 = add <4 x i32> %247, %248
  %250 = extractelement <4 x i32> %249, i32 0
  %251 = icmp eq i64 %115, %210
  br i1 %251, label %281, label %252

252:                                              ; preds = %206, %244
  %253 = phi i64 [ %118, %206 ], [ %211, %244 ]
  %254 = phi i64 [ %80, %206 ], [ %213, %244 ]
  %255 = phi i32 [ %203, %206 ], [ %250, %244 ]
  br label %266

256:                                              ; preds = %126, %256
  %257 = phi i64 [ %264, %256 ], [ %127, %126 ]
  %258 = phi i32 [ %263, %256 ], [ %128, %126 ]
  %259 = getelementptr inbounds i16, i16* %27, i64 %257
  %260 = load i16, i16* %259, align 2
  %261 = sext i16 %260 to i32
  %262 = mul nsw i32 %123, %261
  %263 = add nsw i32 %262, %258
  %264 = add nuw nsw i64 %257, 1
  %265 = icmp eq i64 %264, %124
  br i1 %265, label %202, label %256, !llvm.loop !19

266:                                              ; preds = %252, %266
  %267 = phi i64 [ %278, %266 ], [ %253, %252 ]
  %268 = phi i64 [ %279, %266 ], [ %254, %252 ]
  %269 = phi i32 [ %277, %266 ], [ %255, %252 ]
  %270 = getelementptr inbounds i16, i16* %27, i64 %267
  %271 = load i16, i16* %270, align 2
  %272 = sext i16 %271 to i32
  %273 = getelementptr inbounds i8, i8* %0, i64 %268
  %274 = load i8, i8* %273, align 1
  %275 = zext i8 %274 to i32
  %276 = mul nsw i32 %275, %272
  %277 = add nsw i32 %276, %269
  %278 = add nuw nsw i64 %267, 1
  %279 = add i64 %268, %52
  %280 = icmp slt i64 %278, %62
  br i1 %280, label %266, label %281, !llvm.loop !20

281:                                              ; preds = %266, %244, %202
  %282 = phi i32 [ %203, %202 ], [ %250, %244 ], [ %277, %266 ]
  %283 = ashr i32 %282, 14
  br i1 %10, label %284, label %288

284:                                              ; preds = %281
  %285 = icmp slt i32 %283, 0
  %286 = sub nsw i32 0, %283
  %287 = select i1 %285, i32 %286, i32 %283
  br label %288

288:                                              ; preds = %281, %284
  %289 = phi i32 [ %287, %284 ], [ %283, %281 ]
  %290 = icmp ult i32 %289, 256
  %291 = trunc i32 %289 to i8
  %292 = ashr i32 %289, 31
  %293 = trunc i32 %292 to i8
  %294 = xor i8 %293, -1
  %295 = select i1 %290, i8 %291, i8 %294
  store i8 %295, i8* %99, align 1
  %296 = add nuw nsw i32 %98, 1
  %297 = getelementptr inbounds i8, i8* %99, i64 %49
  %298 = add i32 %97, -1
  %299 = add i32 %96, -1
  %300 = icmp eq i32 %296, %42
  br i1 %300, label %87, label %95

301:                                              ; preds = %394, %89
  %302 = phi i32 [ %90, %89 ], [ %404, %394 ]
  %303 = phi i8* [ %91, %89 ], [ %403, %394 ]
  %304 = phi i32 [ %92, %89 ], [ %402, %394 ]
  %305 = icmp sgt i32 %302, %304
  br i1 %305, label %306, label %730

306:                                              ; preds = %301
  %307 = trunc i64 %77 to i32
  %308 = mul i32 %307, %3
  %309 = add i32 %308, %2
  %310 = sub i32 %304, %42
  %311 = mul i32 %310, %1
  %312 = add i32 %79, %311
  %313 = sub i32 %57, %304
  %314 = sub i32 %51, %304
  br label %453

315:                                              ; preds = %89, %394
  %316 = phi i32 [ %407, %394 ], [ %78, %89 ]
  %317 = phi i32 [ %402, %394 ], [ %92, %89 ]
  %318 = phi i8* [ %403, %394 ], [ %91, %89 ]
  br i1 %50, label %319, label %387

319:                                              ; preds = %315
  %320 = sext i32 %316 to i64
  br i1 %68, label %321, label %358

321:                                              ; preds = %319
  %322 = add i64 %70, %320
  br label %323

323:                                              ; preds = %323, %321
  %324 = phi i64 [ 0, %321 ], [ %349, %323 ]
  %325 = phi <4 x i32> [ zeroinitializer, %321 ], [ %347, %323 ]
  %326 = phi <4 x i32> [ zeroinitializer, %321 ], [ %348, %323 ]
  %327 = mul i64 %324, %52
  %328 = add i64 %327, %320
  %329 = getelementptr inbounds i16, i16* %27, i64 %324
  %330 = bitcast i16* %329 to <4 x i16>*
  %331 = load <4 x i16>, <4 x i16>* %330, align 2
  %332 = getelementptr inbounds i16, i16* %329, i64 4
  %333 = bitcast i16* %332 to <4 x i16>*
  %334 = load <4 x i16>, <4 x i16>* %333, align 2
  %335 = sext <4 x i16> %331 to <4 x i32>
  %336 = sext <4 x i16> %334 to <4 x i32>
  %337 = getelementptr inbounds i8, i8* %0, i64 %328
  %338 = bitcast i8* %337 to <4 x i8>*
  %339 = load <4 x i8>, <4 x i8>* %338, align 1
  %340 = getelementptr inbounds i8, i8* %337, i64 4
  %341 = bitcast i8* %340 to <4 x i8>*
  %342 = load <4 x i8>, <4 x i8>* %341, align 1
  %343 = zext <4 x i8> %339 to <4 x i32>
  %344 = zext <4 x i8> %342 to <4 x i32>
  %345 = mul nsw <4 x i32> %343, %335
  %346 = mul nsw <4 x i32> %344, %336
  %347 = add nsw <4 x i32> %345, %325
  %348 = add nsw <4 x i32> %346, %326
  %349 = add i64 %324, 8
  %350 = icmp eq i64 %349, %69
  br i1 %350, label %351, label %323, !llvm.loop !21

351:                                              ; preds = %323
  %352 = add <4 x i32> %348, %347
  %353 = shufflevector <4 x i32> %352, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %354 = add <4 x i32> %352, %353
  %355 = shufflevector <4 x i32> %354, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %356 = add <4 x i32> %354, %355
  %357 = extractelement <4 x i32> %356, i32 0
  br i1 %71, label %387, label %358

358:                                              ; preds = %319, %351
  %359 = phi i64 [ %320, %319 ], [ %322, %351 ]
  %360 = phi i64 [ 0, %319 ], [ %69, %351 ]
  %361 = phi i32 [ 0, %319 ], [ %357, %351 ]
  %362 = xor i64 %360, -1
  %363 = add nsw i64 %362, %63
  br i1 %73, label %381, label %364

364:                                              ; preds = %358, %364
  %365 = phi i64 [ %378, %364 ], [ %359, %358 ]
  %366 = phi i64 [ %377, %364 ], [ %360, %358 ]
  %367 = phi i32 [ %376, %364 ], [ %361, %358 ]
  %368 = phi i64 [ %379, %364 ], [ %72, %358 ]
  %369 = getelementptr inbounds i16, i16* %27, i64 %366
  %370 = load i16, i16* %369, align 2
  %371 = sext i16 %370 to i32
  %372 = getelementptr inbounds i8, i8* %0, i64 %365
  %373 = load i8, i8* %372, align 1
  %374 = zext i8 %373 to i32
  %375 = mul nsw i32 %374, %371
  %376 = add nsw i32 %375, %367
  %377 = add nuw nsw i64 %366, 1
  %378 = add i64 %365, %52
  %379 = add i64 %368, -1
  %380 = icmp eq i64 %379, 0
  br i1 %380, label %381, label %364, !llvm.loop !22

381:                                              ; preds = %364, %358
  %382 = phi i32 [ undef, %358 ], [ %376, %364 ]
  %383 = phi i64 [ %359, %358 ], [ %378, %364 ]
  %384 = phi i64 [ %360, %358 ], [ %377, %364 ]
  %385 = phi i32 [ %361, %358 ], [ %376, %364 ]
  %386 = icmp ult i64 %363, 3
  br i1 %386, label %387, label %408

387:                                              ; preds = %381, %408, %351, %315
  %388 = phi i32 [ 0, %315 ], [ %357, %351 ], [ %382, %381 ], [ %449, %408 ]
  %389 = ashr i32 %388, 14
  br i1 %10, label %390, label %394

390:                                              ; preds = %387
  %391 = icmp slt i32 %389, 0
  %392 = sub nsw i32 0, %389
  %393 = select i1 %391, i32 %392, i32 %389
  br label %394

394:                                              ; preds = %387, %390
  %395 = phi i32 [ %393, %390 ], [ %389, %387 ]
  %396 = icmp ult i32 %395, 256
  %397 = trunc i32 %395 to i8
  %398 = ashr i32 %395, 31
  %399 = trunc i32 %398 to i8
  %400 = xor i8 %399, -1
  %401 = select i1 %396, i8 %397, i8 %400
  store i8 %401, i8* %318, align 1
  %402 = add nuw nsw i32 %317, 1
  %403 = getelementptr inbounds i8, i8* %318, i64 %49
  %404 = load i32, i32* %30, align 4
  %405 = sub nsw i32 %404, %42
  %406 = icmp slt i32 %402, %405
  %407 = add i32 %316, %1
  br i1 %406, label %315, label %301

408:                                              ; preds = %381, %408
  %409 = phi i64 [ %451, %408 ], [ %383, %381 ]
  %410 = phi i64 [ %450, %408 ], [ %384, %381 ]
  %411 = phi i32 [ %449, %408 ], [ %385, %381 ]
  %412 = getelementptr inbounds i16, i16* %27, i64 %410
  %413 = load i16, i16* %412, align 2
  %414 = sext i16 %413 to i32
  %415 = getelementptr inbounds i8, i8* %0, i64 %409
  %416 = load i8, i8* %415, align 1
  %417 = zext i8 %416 to i32
  %418 = mul nsw i32 %417, %414
  %419 = add nsw i32 %418, %411
  %420 = add nuw nsw i64 %410, 1
  %421 = add i64 %409, %52
  %422 = getelementptr inbounds i16, i16* %27, i64 %420
  %423 = load i16, i16* %422, align 2
  %424 = sext i16 %423 to i32
  %425 = getelementptr inbounds i8, i8* %0, i64 %421
  %426 = load i8, i8* %425, align 1
  %427 = zext i8 %426 to i32
  %428 = mul nsw i32 %427, %424
  %429 = add nsw i32 %428, %419
  %430 = add nuw nsw i64 %410, 2
  %431 = add i64 %421, %52
  %432 = getelementptr inbounds i16, i16* %27, i64 %430
  %433 = load i16, i16* %432, align 2
  %434 = sext i16 %433 to i32
  %435 = getelementptr inbounds i8, i8* %0, i64 %431
  %436 = load i8, i8* %435, align 1
  %437 = zext i8 %436 to i32
  %438 = mul nsw i32 %437, %434
  %439 = add nsw i32 %438, %429
  %440 = add nuw nsw i64 %410, 3
  %441 = add i64 %431, %52
  %442 = getelementptr inbounds i16, i16* %27, i64 %440
  %443 = load i16, i16* %442, align 2
  %444 = sext i16 %443 to i32
  %445 = getelementptr inbounds i8, i8* %0, i64 %441
  %446 = load i8, i8* %445, align 1
  %447 = zext i8 %446 to i32
  %448 = mul nsw i32 %447, %444
  %449 = add nsw i32 %448, %439
  %450 = add nuw nsw i64 %410, 4
  %451 = add i64 %441, %52
  %452 = icmp eq i64 %450, %63
  br i1 %452, label %387, label %408, !llvm.loop !23

453:                                              ; preds = %306, %715
  %454 = phi i32 [ %314, %306 ], [ %729, %715 ]
  %455 = phi i32 [ %313, %306 ], [ %728, %715 ]
  %456 = phi i32 [ %312, %306 ], [ %727, %715 ]
  %457 = phi i32 [ %302, %306 ], [ %725, %715 ]
  %458 = phi i32 [ %304, %306 ], [ %723, %715 ]
  %459 = phi i8* [ %303, %306 ], [ %724, %715 ]
  %460 = sub nsw i32 %458, %42
  %461 = mul nsw i32 %460, %1
  %462 = add i32 %309, %461
  %463 = xor i32 %458, -1
  %464 = add i32 %42, %463
  %465 = add i32 %464, %457
  %466 = icmp sgt i32 %465, 0
  br i1 %466, label %467, label %553

467:                                              ; preds = %453
  %468 = sext i32 %456 to i64
  %469 = add i32 %457, %455
  %470 = zext i32 %469 to i64
  %471 = add nuw nsw i64 %470, 1
  %472 = add i32 %457, %454
  %473 = zext i32 %472 to i64
  %474 = icmp ugt i32 %472, 7
  %475 = and i1 %474, %74
  br i1 %475, label %476, label %516

476:                                              ; preds = %467
  %477 = and i64 %473, 4294967288
  %478 = mul nsw i64 %477, %52
  %479 = add i64 %478, %468
  br label %480

480:                                              ; preds = %480, %476
  %481 = phi i64 [ 0, %476 ], [ %506, %480 ]
  %482 = phi <4 x i32> [ zeroinitializer, %476 ], [ %504, %480 ]
  %483 = phi <4 x i32> [ zeroinitializer, %476 ], [ %505, %480 ]
  %484 = mul i64 %481, %52
  %485 = add i64 %484, %468
  %486 = getelementptr inbounds i16, i16* %27, i64 %481
  %487 = bitcast i16* %486 to <4 x i16>*
  %488 = load <4 x i16>, <4 x i16>* %487, align 2
  %489 = getelementptr inbounds i16, i16* %486, i64 4
  %490 = bitcast i16* %489 to <4 x i16>*
  %491 = load <4 x i16>, <4 x i16>* %490, align 2
  %492 = sext <4 x i16> %488 to <4 x i32>
  %493 = sext <4 x i16> %491 to <4 x i32>
  %494 = getelementptr inbounds i8, i8* %0, i64 %485
  %495 = bitcast i8* %494 to <4 x i8>*
  %496 = load <4 x i8>, <4 x i8>* %495, align 1
  %497 = getelementptr inbounds i8, i8* %494, i64 4
  %498 = bitcast i8* %497 to <4 x i8>*
  %499 = load <4 x i8>, <4 x i8>* %498, align 1
  %500 = zext <4 x i8> %496 to <4 x i32>
  %501 = zext <4 x i8> %499 to <4 x i32>
  %502 = mul nsw <4 x i32> %500, %492
  %503 = mul nsw <4 x i32> %501, %493
  %504 = add nsw <4 x i32> %502, %482
  %505 = add nsw <4 x i32> %503, %483
  %506 = add i64 %481, 8
  %507 = icmp eq i64 %506, %477
  br i1 %507, label %508, label %480, !llvm.loop !24

508:                                              ; preds = %480
  %509 = add <4 x i32> %505, %504
  %510 = shufflevector <4 x i32> %509, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %511 = add <4 x i32> %509, %510
  %512 = shufflevector <4 x i32> %511, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %513 = add <4 x i32> %511, %512
  %514 = extractelement <4 x i32> %513, i32 0
  %515 = icmp eq i64 %477, %473
  br i1 %515, label %547, label %516

516:                                              ; preds = %467, %508
  %517 = phi i64 [ %468, %467 ], [ %479, %508 ]
  %518 = phi i64 [ 0, %467 ], [ %477, %508 ]
  %519 = phi i32 [ 0, %467 ], [ %514, %508 ]
  %520 = xor i64 %518, -1
  %521 = add nsw i64 %520, %473
  %522 = and i64 %473, 3
  %523 = icmp eq i64 %522, 0
  br i1 %523, label %541, label %524

524:                                              ; preds = %516, %524
  %525 = phi i64 [ %538, %524 ], [ %517, %516 ]
  %526 = phi i64 [ %537, %524 ], [ %518, %516 ]
  %527 = phi i32 [ %536, %524 ], [ %519, %516 ]
  %528 = phi i64 [ %539, %524 ], [ %522, %516 ]
  %529 = getelementptr inbounds i16, i16* %27, i64 %526
  %530 = load i16, i16* %529, align 2
  %531 = sext i16 %530 to i32
  %532 = getelementptr inbounds i8, i8* %0, i64 %525
  %533 = load i8, i8* %532, align 1
  %534 = zext i8 %533 to i32
  %535 = mul nsw i32 %534, %531
  %536 = add nsw i32 %535, %527
  %537 = add nuw nsw i64 %526, 1
  %538 = add i64 %525, %52
  %539 = add i64 %528, -1
  %540 = icmp eq i64 %539, 0
  br i1 %540, label %541, label %524, !llvm.loop !25

541:                                              ; preds = %524, %516
  %542 = phi i32 [ undef, %516 ], [ %536, %524 ]
  %543 = phi i64 [ %517, %516 ], [ %538, %524 ]
  %544 = phi i64 [ %518, %516 ], [ %537, %524 ]
  %545 = phi i32 [ %519, %516 ], [ %536, %524 ]
  %546 = icmp ult i64 %521, 3
  br i1 %546, label %547, label %653

547:                                              ; preds = %541, %653, %508
  %548 = phi i32 [ %514, %508 ], [ %542, %541 ], [ %694, %653 ]
  %549 = trunc i64 %471 to i32
  %550 = mul i32 %549, %1
  %551 = add i32 %456, %550
  %552 = trunc i64 %471 to i32
  br label %553

553:                                              ; preds = %547, %453
  %554 = phi i32 [ 0, %453 ], [ %548, %547 ]
  %555 = phi i32 [ %462, %453 ], [ %551, %547 ]
  %556 = phi i32 [ 0, %453 ], [ %552, %547 ]
  %557 = icmp slt i32 %556, %17
  br i1 %557, label %558, label %708

558:                                              ; preds = %553
  %559 = sext i32 %555 to i64
  %560 = getelementptr inbounds i8, i8* %0, i64 %559
  %561 = load i8, i8* %560, align 1
  %562 = zext i8 %561 to i32
  %563 = add i32 %457, %454
  %564 = icmp sgt i32 %563, 0
  %565 = select i1 %564, i32 %563, i32 0
  %566 = zext i32 %565 to i64
  %567 = sub nsw i64 %64, %566
  %568 = icmp ult i64 %567, 8
  br i1 %568, label %569, label %572

569:                                              ; preds = %643, %558
  %570 = phi i64 [ %566, %558 ], [ %574, %643 ]
  %571 = phi i32 [ %554, %558 ], [ %651, %643 ]
  br label %698

572:                                              ; preds = %558
  %573 = and i64 %567, -8
  %574 = add nsw i64 %573, %566
  %575 = insertelement <4 x i32> undef, i32 %562, i32 0
  %576 = shufflevector <4 x i32> %575, <4 x i32> undef, <4 x i32> zeroinitializer
  %577 = insertelement <4 x i32> undef, i32 %562, i32 0
  %578 = shufflevector <4 x i32> %577, <4 x i32> undef, <4 x i32> zeroinitializer
  %579 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %554, i32 0
  %580 = add nsw i64 %573, -8
  %581 = lshr exact i64 %580, 3
  %582 = add nuw nsw i64 %581, 1
  %583 = and i64 %582, 1
  %584 = icmp eq i64 %580, 0
  br i1 %584, label %622, label %585

585:                                              ; preds = %572
  %586 = sub nuw nsw i64 %582, %583
  br label %587

587:                                              ; preds = %587, %585
  %588 = phi i64 [ 0, %585 ], [ %619, %587 ]
  %589 = phi <4 x i32> [ %579, %585 ], [ %617, %587 ]
  %590 = phi <4 x i32> [ zeroinitializer, %585 ], [ %618, %587 ]
  %591 = phi i64 [ %586, %585 ], [ %620, %587 ]
  %592 = add i64 %588, %566
  %593 = getelementptr inbounds i16, i16* %27, i64 %592
  %594 = bitcast i16* %593 to <4 x i16>*
  %595 = load <4 x i16>, <4 x i16>* %594, align 2
  %596 = getelementptr inbounds i16, i16* %593, i64 4
  %597 = bitcast i16* %596 to <4 x i16>*
  %598 = load <4 x i16>, <4 x i16>* %597, align 2
  %599 = sext <4 x i16> %595 to <4 x i32>
  %600 = sext <4 x i16> %598 to <4 x i32>
  %601 = mul nsw <4 x i32> %576, %599
  %602 = mul nsw <4 x i32> %578, %600
  %603 = add nsw <4 x i32> %601, %589
  %604 = add nsw <4 x i32> %602, %590
  %605 = or i64 %588, 8
  %606 = add i64 %605, %566
  %607 = getelementptr inbounds i16, i16* %27, i64 %606
  %608 = bitcast i16* %607 to <4 x i16>*
  %609 = load <4 x i16>, <4 x i16>* %608, align 2
  %610 = getelementptr inbounds i16, i16* %607, i64 4
  %611 = bitcast i16* %610 to <4 x i16>*
  %612 = load <4 x i16>, <4 x i16>* %611, align 2
  %613 = sext <4 x i16> %609 to <4 x i32>
  %614 = sext <4 x i16> %612 to <4 x i32>
  %615 = mul nsw <4 x i32> %576, %613
  %616 = mul nsw <4 x i32> %578, %614
  %617 = add nsw <4 x i32> %615, %603
  %618 = add nsw <4 x i32> %616, %604
  %619 = add i64 %588, 16
  %620 = add i64 %591, -2
  %621 = icmp eq i64 %620, 0
  br i1 %621, label %622, label %587, !llvm.loop !26

622:                                              ; preds = %587, %572
  %623 = phi <4 x i32> [ undef, %572 ], [ %617, %587 ]
  %624 = phi <4 x i32> [ undef, %572 ], [ %618, %587 ]
  %625 = phi i64 [ 0, %572 ], [ %619, %587 ]
  %626 = phi <4 x i32> [ %579, %572 ], [ %617, %587 ]
  %627 = phi <4 x i32> [ zeroinitializer, %572 ], [ %618, %587 ]
  %628 = icmp eq i64 %583, 0
  br i1 %628, label %643, label %629

629:                                              ; preds = %622
  %630 = add i64 %625, %566
  %631 = getelementptr inbounds i16, i16* %27, i64 %630
  %632 = getelementptr inbounds i16, i16* %631, i64 4
  %633 = bitcast i16* %632 to <4 x i16>*
  %634 = load <4 x i16>, <4 x i16>* %633, align 2
  %635 = sext <4 x i16> %634 to <4 x i32>
  %636 = mul nsw <4 x i32> %578, %635
  %637 = add nsw <4 x i32> %636, %627
  %638 = bitcast i16* %631 to <4 x i16>*
  %639 = load <4 x i16>, <4 x i16>* %638, align 2
  %640 = sext <4 x i16> %639 to <4 x i32>
  %641 = mul nsw <4 x i32> %576, %640
  %642 = add nsw <4 x i32> %641, %626
  br label %643

643:                                              ; preds = %622, %629
  %644 = phi <4 x i32> [ %623, %622 ], [ %642, %629 ]
  %645 = phi <4 x i32> [ %624, %622 ], [ %637, %629 ]
  %646 = add <4 x i32> %645, %644
  %647 = shufflevector <4 x i32> %646, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %648 = add <4 x i32> %646, %647
  %649 = shufflevector <4 x i32> %648, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %650 = add <4 x i32> %648, %649
  %651 = extractelement <4 x i32> %650, i32 0
  %652 = icmp eq i64 %567, %573
  br i1 %652, label %708, label %569

653:                                              ; preds = %541, %653
  %654 = phi i64 [ %696, %653 ], [ %543, %541 ]
  %655 = phi i64 [ %695, %653 ], [ %544, %541 ]
  %656 = phi i32 [ %694, %653 ], [ %545, %541 ]
  %657 = getelementptr inbounds i16, i16* %27, i64 %655
  %658 = load i16, i16* %657, align 2
  %659 = sext i16 %658 to i32
  %660 = getelementptr inbounds i8, i8* %0, i64 %654
  %661 = load i8, i8* %660, align 1
  %662 = zext i8 %661 to i32
  %663 = mul nsw i32 %662, %659
  %664 = add nsw i32 %663, %656
  %665 = add nuw nsw i64 %655, 1
  %666 = add i64 %654, %52
  %667 = getelementptr inbounds i16, i16* %27, i64 %665
  %668 = load i16, i16* %667, align 2
  %669 = sext i16 %668 to i32
  %670 = getelementptr inbounds i8, i8* %0, i64 %666
  %671 = load i8, i8* %670, align 1
  %672 = zext i8 %671 to i32
  %673 = mul nsw i32 %672, %669
  %674 = add nsw i32 %673, %664
  %675 = add nuw nsw i64 %655, 2
  %676 = add i64 %666, %52
  %677 = getelementptr inbounds i16, i16* %27, i64 %675
  %678 = load i16, i16* %677, align 2
  %679 = sext i16 %678 to i32
  %680 = getelementptr inbounds i8, i8* %0, i64 %676
  %681 = load i8, i8* %680, align 1
  %682 = zext i8 %681 to i32
  %683 = mul nsw i32 %682, %679
  %684 = add nsw i32 %683, %674
  %685 = add nuw nsw i64 %655, 3
  %686 = add i64 %676, %52
  %687 = getelementptr inbounds i16, i16* %27, i64 %685
  %688 = load i16, i16* %687, align 2
  %689 = sext i16 %688 to i32
  %690 = getelementptr inbounds i8, i8* %0, i64 %686
  %691 = load i8, i8* %690, align 1
  %692 = zext i8 %691 to i32
  %693 = mul nsw i32 %692, %689
  %694 = add nsw i32 %693, %684
  %695 = add nuw nsw i64 %655, 4
  %696 = add i64 %686, %52
  %697 = icmp eq i64 %695, %473
  br i1 %697, label %547, label %653, !llvm.loop !27

698:                                              ; preds = %569, %698
  %699 = phi i64 [ %706, %698 ], [ %570, %569 ]
  %700 = phi i32 [ %705, %698 ], [ %571, %569 ]
  %701 = getelementptr inbounds i16, i16* %27, i64 %699
  %702 = load i16, i16* %701, align 2
  %703 = sext i16 %702 to i32
  %704 = mul nsw i32 %562, %703
  %705 = add nsw i32 %704, %700
  %706 = add nuw nsw i64 %699, 1
  %707 = icmp slt i64 %706, %64
  br i1 %707, label %698, label %708, !llvm.loop !28

708:                                              ; preds = %698, %643, %553
  %709 = phi i32 [ %554, %553 ], [ %651, %643 ], [ %705, %698 ]
  %710 = ashr i32 %709, 14
  br i1 %10, label %711, label %715

711:                                              ; preds = %708
  %712 = icmp slt i32 %710, 0
  %713 = sub nsw i32 0, %710
  %714 = select i1 %712, i32 %713, i32 %710
  br label %715

715:                                              ; preds = %708, %711
  %716 = phi i32 [ %714, %711 ], [ %710, %708 ]
  %717 = icmp ult i32 %716, 256
  %718 = trunc i32 %716 to i8
  %719 = ashr i32 %716, 31
  %720 = trunc i32 %719 to i8
  %721 = xor i8 %720, -1
  %722 = select i1 %717, i8 %718, i8 %721
  store i8 %722, i8* %459, align 1
  %723 = add nuw nsw i32 %458, 1
  %724 = getelementptr inbounds i8, i8* %459, i64 %49
  %725 = load i32, i32* %30, align 4
  %726 = icmp sgt i32 %725, %723
  %727 = add i32 %456, %1
  %728 = add i32 %455, -1
  %729 = add i32 %454, -1
  br i1 %726, label %453, label %730

730:                                              ; preds = %715, %301
  %731 = phi i32 [ %302, %301 ], [ %725, %715 ]
  %732 = add nuw nsw i64 %77, 1
  %733 = load i32, i32* %43, align 4
  %734 = sext i32 %733 to i64
  %735 = icmp slt i64 %732, %734
  %736 = add i32 %79, %3
  %737 = add i32 %78, %3
  br i1 %735, label %75, label %738

738:                                              ; preds = %730, %41, %11, %21, %29
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4skia30SetUpGaussianConvolutionKernelEPNS_19ConvolutionFilter1DEfb(%"class.skia::ConvolutionFilter1D"*, float, i1 zeroext) local_unnamed_addr #0 {
  %4 = alloca %"class.std::__1::vector.22", align 8
  %5 = fmul float %1, 4.000000e+00
  %6 = fadd float %5, 5.000000e-01
  %7 = fptosi float %6 to i32
  %8 = shl nsw i32 %7, 1
  %9 = or i32 %8, 1
  %10 = fmul float %1, %1
  %11 = bitcast %"class.std::__1::vector.22"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %11) #11
  %12 = getelementptr inbounds %"class.std::__1::vector.22", %"class.std::__1::vector.22"* %4, i64 0, i32 0, i32 0
  %13 = sext i32 %9 to i64
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 0, i64 24, i1 false) #11
  %14 = icmp slt i32 %9, 0
  br i1 %14, label %15, label %17

15:                                               ; preds = %3
  %16 = bitcast %"class.std::__1::vector.22"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %16) #12
  unreachable

17:                                               ; preds = %3
  %18 = getelementptr inbounds %"class.std::__1::vector.22", %"class.std::__1::vector.22"* %4, i64 0, i32 0, i32 1
  %19 = getelementptr inbounds %"class.std::__1::vector.22", %"class.std::__1::vector.22"* %4, i64 0, i32 0, i32 2, i32 0, i32 0
  %20 = shl nsw i64 %13, 2
  %21 = tail call i8* @_Znwm(i64 %20) #10
  %22 = bitcast i8* %21 to float*
  %23 = bitcast %"class.std::__1::vector.22"* %4 to i8**
  store i8* %21, i8** %23, align 8
  %24 = getelementptr inbounds float, float* %22, i64 %13
  store float* %24, float** %19, align 8
  %25 = shl nsw i64 %13, 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %21, i8 0, i64 %25, i1 false)
  %26 = bitcast float** %18 to i64*
  %27 = ptrtoint float* %24 to i64
  store i64 %27, i64* %26, align 8
  %28 = sext i32 %7 to i64
  %29 = getelementptr inbounds float, float* %22, i64 %28
  store float 1.000000e+00, float* %29, align 4
  %30 = icmp slt i32 %7, 1
  br i1 %30, label %36, label %31

31:                                               ; preds = %17
  %32 = add nuw nsw i32 %7, 1
  %33 = zext i32 %32 to i64
  br label %42

34:                                               ; preds = %42
  %35 = icmp sgt i32 %9, 0
  br i1 %35, label %36, label %69

36:                                               ; preds = %17, %34
  %37 = phi float [ %58, %34 ], [ 1.000000e+00, %17 ]
  %38 = icmp eq i32 %7, 0
  br i1 %38, label %63, label %39

39:                                               ; preds = %36
  %40 = zext i32 %9 to i64
  %41 = add nsw i64 %40, -1
  br label %70

42:                                               ; preds = %61, %31
  %43 = phi float* [ %22, %31 ], [ %62, %61 ]
  %44 = phi i64 [ 1, %31 ], [ %59, %61 ]
  %45 = phi float [ 1.000000e+00, %31 ], [ %58, %61 ]
  %46 = trunc i64 %44 to i32
  %47 = sitofp i32 %46 to float
  %48 = fmul float %47, -5.000000e-01
  %49 = fmul float %48, %47
  %50 = fdiv float %49, %10
  %51 = tail call float @expf(float %50) #11
  %52 = add nsw i64 %44, %28
  %53 = getelementptr inbounds float, float* %43, i64 %52
  store float %51, float* %53, align 4
  %54 = sub nsw i64 %28, %44
  %55 = load float*, float** %12, align 8
  %56 = getelementptr inbounds float, float* %55, i64 %54
  store float %51, float* %56, align 4
  %57 = fmul float %51, 2.000000e+00
  %58 = fadd float %45, %57
  %59 = add nuw nsw i64 %44, 1
  %60 = icmp eq i64 %59, %33
  br i1 %60, label %34, label %61

61:                                               ; preds = %42
  %62 = load float*, float** %12, align 8
  br label %42

63:                                               ; preds = %70, %36
  %64 = phi i64 [ 0, %36 ], [ %82, %70 ]
  %65 = load float*, float** %12, align 8
  %66 = getelementptr inbounds float, float* %65, i64 %64
  %67 = load float, float* %66, align 4
  %68 = fdiv float %67, %37
  store float %68, float* %66, align 4
  br label %69

69:                                               ; preds = %63, %34
  br i1 %2, label %85, label %107

70:                                               ; preds = %70, %39
  %71 = phi i64 [ 0, %39 ], [ %82, %70 ]
  %72 = phi i64 [ %41, %39 ], [ %83, %70 ]
  %73 = load float*, float** %12, align 8
  %74 = getelementptr inbounds float, float* %73, i64 %71
  %75 = load float, float* %74, align 4
  %76 = fdiv float %75, %37
  store float %76, float* %74, align 4
  %77 = or i64 %71, 1
  %78 = load float*, float** %12, align 8
  %79 = getelementptr inbounds float, float* %78, i64 %77
  %80 = load float, float* %79, align 4
  %81 = fdiv float %80, %37
  store float %81, float* %79, align 4
  %82 = add nuw nsw i64 %71, 2
  %83 = add i64 %72, -2
  %84 = icmp eq i64 %83, 0
  br i1 %84, label %63, label %70

85:                                               ; preds = %69
  %86 = load float*, float** %12, align 8
  %87 = getelementptr inbounds float, float* %86, i64 %28
  store float 0.000000e+00, float* %87, align 4
  br i1 %30, label %107, label %88

88:                                               ; preds = %85
  %89 = add nuw nsw i32 %7, 1
  %90 = zext i32 %89 to i64
  br label %91

91:                                               ; preds = %91, %88
  %92 = phi i64 [ 1, %88 ], [ %105, %91 ]
  %93 = add nsw i64 %92, %28
  %94 = load float*, float** %12, align 8
  %95 = getelementptr inbounds float, float* %94, i64 %93
  %96 = load float, float* %95, align 4
  %97 = fmul float %10, %96
  %98 = trunc i64 %92 to i32
  %99 = sitofp i32 %98 to float
  %100 = fdiv float %97, %99
  store float %100, float* %95, align 4
  %101 = fsub float -0.000000e+00, %100
  %102 = sub nsw i64 %28, %92
  %103 = load float*, float** %12, align 8
  %104 = getelementptr inbounds float, float* %103, i64 %102
  store float %101, float* %104, align 4
  %105 = add nuw nsw i64 %92, 1
  %106 = icmp eq i64 %105, %90
  br i1 %106, label %107, label %91

107:                                              ; preds = %91, %85, %69
  %108 = load float*, float** %12, align 8
  %109 = load i64, i64* %26, align 8
  %110 = ptrtoint float* %108 to i64
  %111 = sub i64 %109, %110
  %112 = lshr exact i64 %111, 2
  %113 = trunc i64 %112 to i32
  tail call void @_ZN4skia19ConvolutionFilter1D9AddFilterEiPKfi(%"class.skia::ConvolutionFilter1D"* %0, i32 0, float* %108, i32 %113)
  %114 = icmp eq float* %108, null
  br i1 %114, label %117, label %115

115:                                              ; preds = %107
  store i64 %110, i64* %26, align 8
  %116 = bitcast float* %108 to i8*
  tail call void @_ZdlPv(i8* %116) #10
  br label %117

117:                                              ; preds = %107, %115
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %11) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm(%"class.std::__1::vector.8"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i8** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i8** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = icmp ult i64 %9, %1
  br i1 %10, label %22, label %11

11:                                               ; preds = %2
  %12 = inttoptr i64 %8 to i8*
  %13 = icmp eq i64 %1, 0
  br i1 %13, label %20, label %14

14:                                               ; preds = %11
  %15 = getelementptr inbounds i8, i8* %12, i64 %1
  %16 = sub i64 %1, %8
  %17 = getelementptr i8, i8* %12, i64 %16
  %18 = ptrtoint i8* %17 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %12, i8 0, i64 %18, i1 false) #11
  %19 = ptrtoint i8* %15 to i64
  br label %20

20:                                               ; preds = %11, %14
  %21 = phi i64 [ %19, %14 ], [ %8, %11 ]
  store i64 %21, i64* %7, align 8
  br label %68

22:                                               ; preds = %2
  %23 = bitcast %"class.std::__1::vector.8"* %0 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = sub i64 %8, %24
  %26 = add i64 %25, %1
  %27 = icmp slt i64 %26, 0
  br i1 %27, label %28, label %30

28:                                               ; preds = %22
  %29 = bitcast %"class.std::__1::vector.8"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %29) #12
  unreachable

30:                                               ; preds = %22
  %31 = sub i64 %5, %24
  %32 = icmp ult i64 %31, 4611686018427387903
  br i1 %32, label %33, label %38

33:                                               ; preds = %30
  %34 = shl i64 %31, 1
  %35 = icmp ult i64 %34, %26
  %36 = select i1 %35, i64 %26, i64 %34
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %41, label %38

38:                                               ; preds = %30, %33
  %39 = phi i64 [ %36, %33 ], [ 9223372036854775807, %30 ]
  %40 = tail call i8* @_Znwm(i64 %39) #10
  br label %41

41:                                               ; preds = %38, %33
  %42 = phi i64 [ %39, %38 ], [ 0, %33 ]
  %43 = phi i8* [ %40, %38 ], [ null, %33 ]
  %44 = getelementptr inbounds i8, i8* %43, i64 %25
  %45 = ptrtoint i8* %44 to i64
  %46 = getelementptr inbounds i8, i8* %43, i64 %42
  %47 = getelementptr inbounds i8, i8* %44, i64 %1
  %48 = sub i64 %1, %45
  %49 = getelementptr i8, i8* %44, i64 %48
  %50 = ptrtoint i8* %49 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %44, i8 0, i64 %50, i1 false) #11
  %51 = ptrtoint i8* %46 to i64
  %52 = ptrtoint i8* %47 to i64
  %53 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %0, i64 0, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  %55 = load i64, i64* %7, align 8
  %56 = ptrtoint i8* %54 to i64
  %57 = sub i64 %55, %56
  %58 = sub i64 0, %57
  %59 = getelementptr inbounds i8, i8* %44, i64 %58
  %60 = ptrtoint i8* %59 to i64
  %61 = icmp sgt i64 %57, 0
  br i1 %61, label %62, label %64

62:                                               ; preds = %41
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %59, i8* align 1 %54, i64 %57, i1 false) #11
  %63 = load i8*, i8** %53, align 8
  br label %64

64:                                               ; preds = %41, %62
  %65 = phi i8* [ %54, %41 ], [ %63, %62 ]
  store i64 %60, i64* %23, align 8
  store i64 %52, i64* %7, align 8
  store i64 %51, i64* %4, align 8
  %66 = icmp eq i8* %65, null
  br i1 %66, label %68, label %67

67:                                               ; preds = %64
  tail call void @_ZdlPv(i8* nonnull %65) #10
  br label %68

68:                                               ; preds = %67, %64, %20
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #5

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #6

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #7

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #8

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIPhNS_9allocatorIS1_EEE8__appendEm(%"class.std::__1::vector.15"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.15", %"class.std::__1::vector.15"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i8*** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.15", %"class.std::__1::vector.15"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i8*** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = ashr exact i64 %9, 3
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %29, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to i8**
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %27, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds i8*, i8** %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr i8*, i8** %13, i64 %18
  %20 = bitcast i8** %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = add i64 %23, 8
  %25 = and i64 %24, -8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 %25, i1 false) #11
  %26 = ptrtoint i8** %16 to i64
  br label %27

27:                                               ; preds = %12, %15
  %28 = phi i64 [ %26, %15 ], [ %8, %12 ]
  store i64 %28, i64* %7, align 8
  br label %84

29:                                               ; preds = %2
  %30 = bitcast %"class.std::__1::vector.15"* %0 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %8, %31
  %33 = ashr exact i64 %32, 3
  %34 = add i64 %33, %1
  %35 = icmp ugt i64 %34, 2305843009213693951
  br i1 %35, label %36, label %38

36:                                               ; preds = %29
  %37 = bitcast %"class.std::__1::vector.15"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %37) #12
  unreachable

38:                                               ; preds = %29
  %39 = sub i64 %5, %31
  %40 = ashr exact i64 %39, 3
  %41 = icmp ult i64 %40, 1152921504606846975
  br i1 %41, label %42, label %50

42:                                               ; preds = %38
  %43 = ashr exact i64 %39, 2
  %44 = icmp ult i64 %43, %34
  %45 = select i1 %44, i64 %34, i64 %43
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %55, label %47

47:                                               ; preds = %42
  %48 = icmp ugt i64 %45, 2305843009213693951
  br i1 %48, label %49, label %50

49:                                               ; preds = %47
  tail call void @abort() #12
  unreachable

50:                                               ; preds = %38, %47
  %51 = phi i64 [ %45, %47 ], [ 2305843009213693951, %38 ]
  %52 = shl i64 %51, 3
  %53 = tail call i8* @_Znwm(i64 %52) #10
  %54 = bitcast i8* %53 to i8**
  br label %55

55:                                               ; preds = %50, %42
  %56 = phi i64 [ %51, %50 ], [ 0, %42 ]
  %57 = phi i8** [ %54, %50 ], [ null, %42 ]
  %58 = getelementptr inbounds i8*, i8** %57, i64 %33
  %59 = getelementptr inbounds i8*, i8** %57, i64 %56
  %60 = getelementptr inbounds i8*, i8** %58, i64 %1
  %61 = bitcast i8** %58 to i8*
  %62 = shl i64 %1, 3
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %61, i8 0, i64 %62, i1 false) #11
  %63 = ptrtoint i8** %59 to i64
  %64 = ptrtoint i8** %60 to i64
  %65 = getelementptr inbounds %"class.std::__1::vector.15", %"class.std::__1::vector.15"* %0, i64 0, i32 0, i32 0
  %66 = load i8**, i8*** %65, align 8
  %67 = load i64, i64* %7, align 8
  %68 = ptrtoint i8** %66 to i64
  %69 = sub i64 %67, %68
  %70 = ashr exact i64 %69, 3
  %71 = sub nsw i64 0, %70
  %72 = getelementptr inbounds i8*, i8** %58, i64 %71
  %73 = ptrtoint i8** %72 to i64
  %74 = icmp sgt i64 %69, 0
  br i1 %74, label %75, label %79

75:                                               ; preds = %55
  %76 = bitcast i8** %72 to i8*
  %77 = bitcast i8** %66 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %76, i8* align 8 %77, i64 %69, i1 false) #11
  %78 = load i8**, i8*** %65, align 8
  br label %79

79:                                               ; preds = %55, %75
  %80 = phi i8** [ %66, %55 ], [ %78, %75 ]
  store i64 %73, i64* %30, align 8
  store i64 %64, i64* %7, align 8
  store i64 %63, i64* %4, align 8
  %81 = icmp eq i8** %80, null
  br i1 %81, label %84, label %82

82:                                               ; preds = %79
  %83 = bitcast i8** %80 to i8*
  tail call void @_ZdlPv(i8* %83) #10
  br label %84

84:                                               ; preds = %82, %79, %27
  ret void
}

; Function Attrs: nofree nounwind
declare float @expf(float) local_unnamed_addr #9

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { builtin nounwind }
attributes #11 = { nounwind }
attributes #12 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !3}
!5 = distinct !{!5, !6, !3}
!6 = !{!"llvm.loop.unroll.runtime.disable"}
!7 = distinct !{!7, !3}
!8 = distinct !{!8, !3}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.unroll.disable"}
!11 = distinct !{!11, !3}
!12 = distinct !{!12, !3}
!13 = distinct !{!13, !10}
!14 = distinct !{!14, !3}
!15 = distinct !{!15, !3}
!16 = distinct !{!16, !6, !3}
!17 = distinct !{!17, !3}
!18 = distinct !{!18, !3}
!19 = distinct !{!19, !6, !3}
!20 = distinct !{!20, !3}
!21 = distinct !{!21, !3}
!22 = distinct !{!22, !10}
!23 = distinct !{!23, !3}
!24 = distinct !{!24, !3}
!25 = distinct !{!25, !10}
!26 = distinct !{!26, !3}
!27 = distinct !{!27, !3}
!28 = distinct !{!28, !6, !3}
