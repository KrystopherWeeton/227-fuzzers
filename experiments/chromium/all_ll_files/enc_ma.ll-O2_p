; ModuleID = '../../third_party/libjxl/src/lib/jxl/modular/encoding/enc_ma.cc'
source_filename = "../../third_party/libjxl/src/lib/jxl/modular/encoding/enc_ma.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.jxl::TreeSamples" = type { %"class.std::__1::vector.6", %"class.std::__1::vector.20", %"class.std::__1::vector.27", %"class.std::__1::vector.41", %"class.std::__1::vector.55", %"class.std::__1::vector.62", %"class.std::__1::vector.27", i64, %"class.std::__1::vector.55" }
%"class.std::__1::vector.6" = type { %"class.std::__1::__vector_base.7" }
%"class.std::__1::__vector_base.7" = type { %"class.std::__1::vector.8"*, %"class.std::__1::vector.8"*, %"class.std::__1::__compressed_pair.15" }
%"class.std::__1::vector.8" = type { %"class.std::__1::__vector_base.9" }
%"class.std::__1::__vector_base.9" = type { %"struct.jxl::TreeSamples::ResidualToken"*, %"struct.jxl::TreeSamples::ResidualToken"*, %"class.std::__1::__compressed_pair.10" }
%"struct.jxl::TreeSamples::ResidualToken" = type { i8, i8 }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { %"struct.jxl::TreeSamples::ResidualToken"* }
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"struct.std::__1::__compressed_pair_elem.16" = type { %"class.std::__1::vector.8"* }
%"class.std::__1::vector.20" = type { %"class.std::__1::__vector_base.21" }
%"class.std::__1::__vector_base.21" = type { i16*, i16*, %"class.std::__1::__compressed_pair.22" }
%"class.std::__1::__compressed_pair.22" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"struct.std::__1::__compressed_pair_elem.23" = type { i16* }
%"class.std::__1::vector.41" = type { %"class.std::__1::__vector_base.42" }
%"class.std::__1::__vector_base.42" = type { %"class.std::__1::vector.43"*, %"class.std::__1::vector.43"*, %"class.std::__1::__compressed_pair.50" }
%"class.std::__1::vector.43" = type { %"class.std::__1::__vector_base.44" }
%"class.std::__1::__vector_base.44" = type { i32*, i32*, %"class.std::__1::__compressed_pair.45" }
%"class.std::__1::__compressed_pair.45" = type { %"struct.std::__1::__compressed_pair_elem.46" }
%"struct.std::__1::__compressed_pair_elem.46" = type { i32* }
%"class.std::__1::__compressed_pair.50" = type { %"struct.std::__1::__compressed_pair_elem.51" }
%"struct.std::__1::__compressed_pair_elem.51" = type { %"class.std::__1::vector.43"* }
%"class.std::__1::vector.62" = type { %"class.std::__1::__vector_base.63" }
%"class.std::__1::__vector_base.63" = type { i32*, i32*, %"class.std::__1::__compressed_pair.64" }
%"class.std::__1::__compressed_pair.64" = type { %"struct.std::__1::__compressed_pair_elem.65" }
%"struct.std::__1::__compressed_pair_elem.65" = type { i32* }
%"class.std::__1::vector.27" = type { %"class.std::__1::__vector_base.28" }
%"class.std::__1::__vector_base.28" = type { %"class.std::__1::vector.29"*, %"class.std::__1::vector.29"*, %"class.std::__1::__compressed_pair.36" }
%"class.std::__1::vector.29" = type { %"class.std::__1::__vector_base.30" }
%"class.std::__1::__vector_base.30" = type { i8*, i8*, %"class.std::__1::__compressed_pair.31" }
%"class.std::__1::__compressed_pair.31" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"struct.std::__1::__compressed_pair_elem.32" = type { i8* }
%"class.std::__1::__compressed_pair.36" = type { %"struct.std::__1::__compressed_pair_elem.37" }
%"struct.std::__1::__compressed_pair_elem.37" = type { %"class.std::__1::vector.29"* }
%"class.std::__1::vector.55" = type { %"class.std::__1::__vector_base.56" }
%"class.std::__1::__vector_base.56" = type { i32*, i32*, %"class.std::__1::__compressed_pair.57" }
%"class.std::__1::__compressed_pair.57" = type { %"struct.std::__1::__compressed_pair_elem.58" }
%"struct.std::__1::__compressed_pair_elem.58" = type { i32* }
%"class.std::__1::vector.69" = type { %"class.std::__1::__vector_base.70" }
%"class.std::__1::__vector_base.70" = type { %"struct.jxl::ModularMultiplierInfo"*, %"struct.jxl::ModularMultiplierInfo"*, %"class.std::__1::__compressed_pair.71" }
%"struct.jxl::ModularMultiplierInfo" = type { %"struct.std::__1::array", i32 }
%"struct.std::__1::array" = type { [2 x %"struct.std::__1::array.5"] }
%"struct.std::__1::array.5" = type { [2 x i32] }
%"class.std::__1::__compressed_pair.71" = type { %"struct.std::__1::__compressed_pair_elem.72" }
%"struct.std::__1::__compressed_pair_elem.72" = type { %"struct.jxl::ModularMultiplierInfo"* }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"*, %"class.std::__1::__compressed_pair" }
%"struct.jxl::PropertyDecisionNode" = type <{ i32, i16, [2 x i8], i32, i32, i32, [4 x i8], i64, i32, [4 x i8] }>
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.jxl::PropertyDecisionNode"* }
%"struct.hwy::ChosenTarget" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.163" }
%"struct.std::__1::__atomic_base.163" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.std::__1::vector.76" = type { %"class.std::__1::__vector_base.77" }
%"class.std::__1::__vector_base.77" = type { %struct.NodeInfo*, %struct.NodeInfo*, %"class.std::__1::__compressed_pair.78" }
%struct.NodeInfo = type { i64, i64, i64, i64, %"struct.std::__1::array" }
%"class.std::__1::__compressed_pair.78" = type { %"struct.std::__1::__compressed_pair_elem.79" }
%"struct.std::__1::__compressed_pair_elem.79" = type { %struct.NodeInfo* }
%struct.SplitInfo = type { i64, i32, i64, float, float, i32, i32 }
%"class.std::__1::vector.83" = type { %"class.std::__1::__vector_base.84" }
%"class.std::__1::__vector_base.84" = type { i64*, i64*, %"class.std::__1::__compressed_pair.85" }
%"class.std::__1::__compressed_pair.85" = type { %"struct.std::__1::__compressed_pair_elem.86" }
%"struct.std::__1::__compressed_pair_elem.86" = type { i64* }
%"class.std::__1::vector.90" = type { %"class.std::__1::__vector_base.91" }
%"class.std::__1::__vector_base.91" = type { %struct.CostInfo*, %struct.CostInfo*, %"class.std::__1::__compressed_pair.92" }
%struct.CostInfo = type { float, float, i32 }
%"class.std::__1::__compressed_pair.92" = type { %"struct.std::__1::__compressed_pair_elem.93" }
%"struct.std::__1::__compressed_pair_elem.93" = type { %struct.CostInfo* }
%"class.std::__1::vector.102" = type { %"class.std::__1::__vector_base.103" }
%"class.std::__1::__vector_base.103" = type { %struct.NodeInfo.104*, %struct.NodeInfo.104*, %"class.std::__1::__compressed_pair.105" }
%struct.NodeInfo.104 = type { i64, i64, i64, i64, %"struct.std::__1::array" }
%"class.std::__1::__compressed_pair.105" = type { %"struct.std::__1::__compressed_pair_elem.106" }
%"struct.std::__1::__compressed_pair_elem.106" = type { %struct.NodeInfo.104* }
%struct.SplitInfo.110 = type { i64, i32, i64, float, float, i32, i32 }
%"class.std::__1::vector.111" = type { %"class.std::__1::__vector_base.112" }
%"class.std::__1::__vector_base.112" = type { %struct.CostInfo.113*, %struct.CostInfo.113*, %"class.std::__1::__compressed_pair.114" }
%struct.CostInfo.113 = type { float, float, i32 }
%"class.std::__1::__compressed_pair.114" = type { %"struct.std::__1::__compressed_pair_elem.115" }
%"struct.std::__1::__compressed_pair_elem.115" = type { %struct.CostInfo.113* }
%"class.std::__1::vector.124" = type { %"class.std::__1::__vector_base.125" }
%"class.std::__1::__vector_base.125" = type { %struct.NodeInfo.126*, %struct.NodeInfo.126*, %"class.std::__1::__compressed_pair.127" }
%struct.NodeInfo.126 = type { i64, i64, i64, i64, %"struct.std::__1::array" }
%"class.std::__1::__compressed_pair.127" = type { %"struct.std::__1::__compressed_pair_elem.128" }
%"struct.std::__1::__compressed_pair_elem.128" = type { %struct.NodeInfo.126* }
%struct.SplitInfo.132 = type { i64, i32, i64, float, float, i32, i32 }
%"class.std::__1::vector.133" = type { %"class.std::__1::__vector_base.134" }
%"class.std::__1::__vector_base.134" = type { %struct.CostInfo.135*, %struct.CostInfo.135*, %"class.std::__1::__compressed_pair.136" }
%struct.CostInfo.135 = type { float, float, i32 }
%"class.std::__1::__compressed_pair.136" = type { %"struct.std::__1::__compressed_pair_elem.137" }
%"struct.std::__1::__compressed_pair_elem.137" = type { %struct.CostInfo.135* }
%"class.std::__1::vector.146" = type { %"class.std::__1::__vector_base.147" }
%"class.std::__1::__vector_base.147" = type { %struct.NodeInfo.148*, %struct.NodeInfo.148*, %"class.std::__1::__compressed_pair.149" }
%struct.NodeInfo.148 = type { i64, i64, i64, i64, %"struct.std::__1::array" }
%"class.std::__1::__compressed_pair.149" = type { %"struct.std::__1::__compressed_pair_elem.150" }
%"struct.std::__1::__compressed_pair_elem.150" = type { %struct.NodeInfo.148* }
%struct.SplitInfo.154 = type { i64, i32, i64, float, float, i32, i32 }
%"class.std::__1::vector.155" = type { %"class.std::__1::__vector_base.156" }
%"class.std::__1::__vector_base.156" = type { %struct.CostInfo.157*, %struct.CostInfo.157*, %"class.std::__1::__compressed_pair.158" }
%struct.CostInfo.157 = type { float, float, i32 }
%"class.std::__1::__compressed_pair.158" = type { %"struct.std::__1::__compressed_pair_elem.159" }
%"struct.std::__1::__compressed_pair_elem.159" = type { %struct.CostInfo.157* }
%"struct.std::__1::__less" = type { i8 }
%"class.jxl::Image" = type <{ %"class.std::__1::vector.182", %"class.std::__1::vector.191", i64, i64, i32, i32, i64, i64, i64, i8, [7 x i8] }>
%"class.std::__1::vector.182" = type { %"class.std::__1::__vector_base.183" }
%"class.std::__1::__vector_base.183" = type { %"class.jxl::Channel"*, %"class.jxl::Channel"*, %"class.std::__1::__compressed_pair.186" }
%"class.jxl::Channel" = type { %"class.jxl::Plane", i64, i64, i32, i32, i32, i32 }
%"class.jxl::Plane" = type { %"struct.jxl::PlaneBase" }
%"struct.jxl::PlaneBase" = type { i32, i32, i32, i32, i64, %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.184" }
%"class.std::__1::__compressed_pair.184" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"class.std::__1::__compressed_pair.186" = type { %"struct.std::__1::__compressed_pair_elem.187" }
%"struct.std::__1::__compressed_pair_elem.187" = type { %"class.jxl::Channel"* }
%"class.std::__1::vector.191" = type { %"class.std::__1::__vector_base.192" }
%"class.std::__1::__vector_base.192" = type { %"class.jxl::Transform"*, %"class.jxl::Transform"*, %"class.std::__1::__compressed_pair.193" }
%"class.jxl::Transform" = type opaque
%"class.std::__1::__compressed_pair.193" = type { %"struct.std::__1::__compressed_pair_elem.194" }
%"struct.std::__1::__compressed_pair_elem.194" = type { %"class.jxl::Transform"* }
%"struct.jxl::ModularOptions" = type <{ i64, float, i32, %"class.std::__1::vector.55", float, [4 x i8], i64, i32, i32, float, i32, i8, [3 x i8], i32, i8, [7 x i8] }>
%"struct.(anonymous namespace)::Rng" = type { [2 x i64] }
%"class.std::__1::geometric_distribution" = type { %"class.std::__1::geometric_distribution<unsigned int>::param_type" }
%"class.std::__1::geometric_distribution<unsigned int>::param_type" = type { double }
%"class.std::__1::vector.199" = type { %"class.std::__1::__vector_base.200" }
%"class.std::__1::__vector_base.200" = type { %"struct.jxl::Token"*, %"struct.jxl::Token"*, %"class.std::__1::__compressed_pair.201" }
%"struct.jxl::Token" = type { i32, i32 }
%"class.std::__1::__compressed_pair.201" = type { %"struct.std::__1::__compressed_pair_elem.202" }
%"struct.std::__1::__compressed_pair_elem.202" = type { %"struct.jxl::Token"* }
%"class.std::__1::queue" = type { %"class.std::__1::deque" }
%"class.std::__1::deque" = type { %"class.std::__1::__deque_base" }
%"class.std::__1::__deque_base" = type { %"struct.std::__1::__split_buffer", i64, %"class.std::__1::__compressed_pair.211" }
%"struct.std::__1::__split_buffer" = type { i32**, i32**, i32**, %"class.std::__1::__compressed_pair.206" }
%"class.std::__1::__compressed_pair.206" = type { %"struct.std::__1::__compressed_pair_elem.207" }
%"struct.std::__1::__compressed_pair_elem.207" = type { i32** }
%"class.std::__1::__compressed_pair.211" = type { %"struct.std::__1::__compressed_pair_elem.212" }
%"struct.std::__1::__compressed_pair_elem.212" = type { i64 }
%"struct.std::__1::__split_buffer.293" = type { i32**, i32**, i32**, %"class.std::__1::__compressed_pair.294" }
%"class.std::__1::__compressed_pair.294" = type { %"struct.std::__1::__compressed_pair_elem.207", %"struct.std::__1::__compressed_pair_elem.295" }
%"struct.std::__1::__compressed_pair_elem.295" = type { %"class.std::__1::allocator.209"* }
%"class.std::__1::allocator.209" = type { i8 }

$_ZNSt3__16vectorIN3jxl20PropertyDecisionNodeENS_9allocatorIS2_EEE12emplace_backIJEEEvDpOT_ = comdat any

$_ZNSt3__16vectorIN3jxl20PropertyDecisionNodeENS_9allocatorIS2_EEE12emplace_backIJiimiRKNS1_9PredictorERKlRKjEEEvDpOT_ = comdat any

$_ZNSt3__16vectorIN3jxl20PropertyDecisionNodeENS_9allocatorIS2_EEE12emplace_backIJRKsRKimmNS1_9PredictorEiiEEEvDpOT_ = comdat any

$_ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEm = comdat any

$_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEm = comdat any

$_ZNSt3__16vectorImNS_9allocatorImEEE8__appendEm = comdat any

$_ZNSt3__16vectorIN3jxl9PredictorENS_9allocatorIS2_EEE6assignIPKS2_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsISA_E9referenceEEE5valueEvE4typeESA_SA_ = comdat any

$_ZNSt3__16vectorINS0_IN3jxl11TreeSamples13ResidualTokenENS_9allocatorIS3_EEEENS4_IS6_EEE8__appendEm = comdat any

$_ZNSt3__16vectorIjNS_9allocatorIjEEE6assignIPjEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIjNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_ = comdat any

$_ZNSt3__16vectorIjNS_9allocatorIjEEE6assignIPKjEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIjNS_15iterator_traitsIS8_E9referenceEEE5valueEvE4typeES8_S8_ = comdat any

$_ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEE8__appendEm = comdat any

$_ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEmRKj = comdat any

$_ZNSt3__16vectorINS0_IiNS_9allocatorIiEEEENS1_IS3_EEE8__appendEm = comdat any

$_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm = comdat any

$_ZNSt3__15dequeIiNS_9allocatorIiEEE19__add_back_capacityEv = comdat any

$_ZNSt3__114__split_bufferIPiNS_9allocatorIS1_EEE9push_backEOS1_ = comdat any

$_ZNSt3__114__split_bufferIPiNS_9allocatorIS1_EEE10push_frontEOS1_ = comdat any

$_ZNSt3__114__split_bufferIPiRNS_9allocatorIS1_EEE10push_frontERKS1_ = comdat any

@.str = private unnamed_addr constant [23 x i8] c"%s:%d: JXL_ASSERT: %s\0A\00", align 1
@.str.1 = private unnamed_addr constant [64 x i8] c"../../third_party/libjxl/src/lib/jxl/modular/encoding/enc_ma.cc\00", align 1
@.str.2 = private unnamed_addr constant [12 x i8] c"end > begin\00", align 1
@.str.3 = private unnamed_addr constant [57 x i8] c"best->prop == tree_samples.PropertyFromIndex(best->prop)\00", align 1
@.str.4 = private unnamed_addr constant [57 x i8] c"static_cast<uint32_t>(dequant + 1) <= new_sp_range[p][1]\00", align 1
@.str.5 = private unnamed_addr constant [40 x i8] c"new_sp_range[p][0] < new_sp_range[p][1]\00", align 1
@.str.6 = private unnamed_addr constant [57 x i8] c"new_sp_range[p][0] <= static_cast<uint32_t>(dequant + 1)\00", align 1
@__const._ZN3jxl8N_SCALAR13FindBestSplitERNS_11TreeSamplesEfRKNSt3__16vectorINS_21ModularMultiplierInfoENS3_9allocatorIS5_EEEENS3_5arrayINSB_IjLm2EEELm2EEEfPNS4_INS_20PropertyDecisionNodeENS6_ISE_EEEE.forced_split = private unnamed_addr constant { i64, i32, [4 x i8], i64, float, float, i32, i32 } { i64 -6148914691236517206, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i64 -6148914691236517206, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, i32 -1431655766, i32 -1431655766 }, align 8
@.str.7 = private unnamed_addr constant [34 x i8] c"tree_samples.NumProperties() < 64\00", align 1
@.str.8 = private unnamed_addr constant [74 x i8] c"tree_samples.NumDistinctSamples() <= std::numeric_limits<uint32_t>::max()\00", align 1
@_ZN3jxlL33FindBestSplitHighwayDispatchTableE = internal unnamed_addr constant [12 x void (%"struct.jxl::TreeSamples"*, float, %"class.std::__1::vector.69"*, i64, i64, float, %"class.std::__1::vector"*)*] [void (%"struct.jxl::TreeSamples"*, float, %"class.std::__1::vector.69"*, i64, i64, float, %"class.std::__1::vector"*)* @_ZN3hwy13FunctionCacheIvJRN3jxl11TreeSamplesEfRKNSt3__16vectorINS1_21ModularMultiplierInfoENS4_9allocatorIS6_EEEENS4_5arrayINSC_IjLm2EEELm2EEEfPNS5_INS1_20PropertyDecisionNodeENS7_ISF_EEEEEE13ChooseAndCallIXadL_ZNS1_L33FindBestSplitHighwayDispatchTableEEEEEvS3_fSB_SE_fSI_, void (%"struct.jxl::TreeSamples"*, float, %"class.std::__1::vector.69"*, i64, i64, float, %"class.std::__1::vector"*)* null, void (%"struct.jxl::TreeSamples"*, float, %"class.std::__1::vector.69"*, i64, i64, float, %"class.std::__1::vector"*)* null, void (%"struct.jxl::TreeSamples"*, float, %"class.std::__1::vector.69"*, i64, i64, float, %"class.std::__1::vector"*)* null, void (%"struct.jxl::TreeSamples"*, float, %"class.std::__1::vector.69"*, i64, i64, float, %"class.std::__1::vector"*)* @_ZN3jxl6N_AVX313FindBestSplitERNS_11TreeSamplesEfRKNSt3__16vectorINS_21ModularMultiplierInfoENS3_9allocatorIS5_EEEENS3_5arrayINSB_IjLm2EEELm2EEEfPNS4_INS_20PropertyDecisionNodeENS6_ISE_EEEE, void (%"struct.jxl::TreeSamples"*, float, %"class.std::__1::vector.69"*, i64, i64, float, %"class.std::__1::vector"*)* @_ZN3jxl6N_AVX213FindBestSplitERNS_11TreeSamplesEfRKNSt3__16vectorINS_21ModularMultiplierInfoENS3_9allocatorIS5_EEEENS3_5arrayINSB_IjLm2EEELm2EEEfPNS4_INS_20PropertyDecisionNodeENS6_ISE_EEEE, void (%"struct.jxl::TreeSamples"*, float, %"class.std::__1::vector.69"*, i64, i64, float, %"class.std::__1::vector"*)* null, void (%"struct.jxl::TreeSamples"*, float, %"class.std::__1::vector.69"*, i64, i64, float, %"class.std::__1::vector"*)* @_ZN3jxl6N_SSE413FindBestSplitERNS_11TreeSamplesEfRKNSt3__16vectorINS_21ModularMultiplierInfoENS3_9allocatorIS5_EEEENS3_5arrayINSB_IjLm2EEELm2EEEfPNS4_INS_20PropertyDecisionNodeENS6_ISE_EEEE, void (%"struct.jxl::TreeSamples"*, float, %"class.std::__1::vector.69"*, i64, i64, float, %"class.std::__1::vector"*)* null, void (%"struct.jxl::TreeSamples"*, float, %"class.std::__1::vector.69"*, i64, i64, float, %"class.std::__1::vector"*)* null, void (%"struct.jxl::TreeSamples"*, float, %"class.std::__1::vector.69"*, i64, i64, float, %"class.std::__1::vector"*)* null, void (%"struct.jxl::TreeSamples"*, float, %"class.std::__1::vector.69"*, i64, i64, float, %"class.std::__1::vector"*)* @_ZN3jxl8N_SCALAR13FindBestSplitERNS_11TreeSamplesEfRKNSt3__16vectorINS_21ModularMultiplierInfoENS3_9allocatorIS5_EEEENS3_5arrayINSB_IjLm2EEELm2EEEfPNS4_INS_20PropertyDecisionNodeENS6_ISE_EEEE], align 16
@_ZN3hwy13chosen_targetE = external global %"struct.hwy::ChosenTarget", align 4
@_ZN3jxl11TreeSamples14kPropertyRangeE = hidden local_unnamed_addr constant i32 511, align 4
@_ZN3jxl11TreeSamples17kDedupEntryUnusedE = hidden constant i32 -1, align 4
@.ref.tmp = private constant [1 x i32] [i32 6], align 4
@.ref.tmp.10 = private constant [2 x i32] [i32 6, i32 5], align 4
@.ref.tmp.11 = private constant [1 x i32] [i32 15], align 4
@.str.13 = private unnamed_addr constant [28 x i8] c"tree.size() <= kMaxTreeSize\00", align 1
@.str.14 = private unnamed_addr constant [25 x i8] c"tree[cur].property >= -1\00", align 1
@.str.15 = private unnamed_addr constant [38 x i8] c"tree[cur].predictor < Predictor::Best\00", align 1
@.str.16 = private unnamed_addr constant [63 x i8] c"../../third_party/libjxl/src/lib/jxl/modular/encoding/enc_ma.h\00", align 1
@.str.17 = private unnamed_addr constant [50 x i8] c"quant < compact_properties[property_index].size()\00", align 1
@.ref.tmp.19 = private unnamed_addr constant [15 x i32] [i32 -127, i32 -63, i32 -31, i32 -15, i32 -7, i32 -3, i32 -1, i32 0, i32 1, i32 3, i32 7, i32 15, i32 31, i32 63, i32 127], align 4
@.ref.tmp.20 = private unnamed_addr constant [29 x i32] [i32 -255, i32 -191, i32 -127, i32 -95, i32 -63, i32 -47, i32 -31, i32 -23, i32 -15, i32 -11, i32 -7, i32 -5, i32 -3, i32 -1, i32 0, i32 1, i32 3, i32 5, i32 7, i32 11, i32 15, i32 23, i32 31, i32 47, i32 63, i32 95, i32 127, i32 191, i32 255], align 4
@.ref.tmp.21 = private unnamed_addr constant [55 x i32] [i32 -255, i32 -223, i32 -191, i32 -159, i32 -127, i32 -111, i32 -95, i32 -79, i32 -63, i32 -55, i32 -47, i32 -39, i32 -31, i32 -27, i32 -23, i32 -19, i32 -15, i32 -13, i32 -11, i32 -9, i32 -7, i32 -6, i32 -5, i32 -4, i32 -3, i32 -2, i32 -1, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 9, i32 11, i32 13, i32 15, i32 19, i32 23, i32 27, i32 31, i32 39, i32 47, i32 55, i32 63, i32 79, i32 95, i32 111, i32 127, i32 159, i32 191, i32 223, i32 255], align 4
@_ZZNSt3__120poisson_distributionIjEclIN12_GLOBAL__N_13RngEEEjRT_RKNS1_10param_typeEE5__fac = internal unnamed_addr constant [10 x double] [double 1.000000e+00, double 1.000000e+00, double 2.000000e+00, double 6.000000e+00, double 2.400000e+01, double 1.200000e+02, double 7.200000e+02, double 5.040000e+03, double 4.032000e+04, double 3.628800e+05], align 16

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i64 @_ZN3jxl6N_SSE46PaddedEm(i64) local_unnamed_addr #0 {
  %2 = add i64 %0, 3
  %3 = and i64 %2, -4
  ret i64 %3
}

; Function Attrs: nounwind ssp uwtable
define hidden float @_ZN3jxl6N_SSE412EstimateBitsEPKiPim(i32* readonly, i32*, i64) local_unnamed_addr #1 {
  %4 = getelementptr inbounds i32, i32* %0, i64 %2
  %5 = icmp eq i64 %2, 0
  br i1 %5, label %217, label %6

6:                                                ; preds = %3
  %7 = shl nsw i64 %2, 2
  %8 = add i64 %7, -4
  %9 = lshr exact i64 %8, 2
  %10 = add nuw nsw i64 %9, 1
  %11 = icmp ult i64 %10, 8
  br i1 %11, label %98, label %12

12:                                               ; preds = %6
  %13 = and i64 %10, 9223372036854775800
  %14 = getelementptr i32, i32* %0, i64 %13
  %15 = add nsw i64 %13, -8
  %16 = lshr exact i64 %15, 3
  %17 = add nuw nsw i64 %16, 1
  %18 = and i64 %17, 3
  %19 = icmp ult i64 %15, 24
  br i1 %19, label %65, label %20

20:                                               ; preds = %12
  %21 = sub nsw i64 %17, %18
  br label %22

22:                                               ; preds = %22, %20
  %23 = phi i64 [ 0, %20 ], [ %62, %22 ]
  %24 = phi <4 x i32> [ zeroinitializer, %20 ], [ %60, %22 ]
  %25 = phi <4 x i32> [ zeroinitializer, %20 ], [ %61, %22 ]
  %26 = phi i64 [ %21, %20 ], [ %63, %22 ]
  %27 = getelementptr i32, i32* %0, i64 %23
  %28 = bitcast i32* %27 to <4 x i32>*
  %29 = load <4 x i32>, <4 x i32>* %28, align 4
  %30 = getelementptr i32, i32* %27, i64 4
  %31 = bitcast i32* %30 to <4 x i32>*
  %32 = load <4 x i32>, <4 x i32>* %31, align 4
  %33 = add nsw <4 x i32> %29, %24
  %34 = add nsw <4 x i32> %32, %25
  %35 = or i64 %23, 8
  %36 = getelementptr i32, i32* %0, i64 %35
  %37 = bitcast i32* %36 to <4 x i32>*
  %38 = load <4 x i32>, <4 x i32>* %37, align 4
  %39 = getelementptr i32, i32* %36, i64 4
  %40 = bitcast i32* %39 to <4 x i32>*
  %41 = load <4 x i32>, <4 x i32>* %40, align 4
  %42 = add nsw <4 x i32> %38, %33
  %43 = add nsw <4 x i32> %41, %34
  %44 = or i64 %23, 16
  %45 = getelementptr i32, i32* %0, i64 %44
  %46 = bitcast i32* %45 to <4 x i32>*
  %47 = load <4 x i32>, <4 x i32>* %46, align 4
  %48 = getelementptr i32, i32* %45, i64 4
  %49 = bitcast i32* %48 to <4 x i32>*
  %50 = load <4 x i32>, <4 x i32>* %49, align 4
  %51 = add nsw <4 x i32> %47, %42
  %52 = add nsw <4 x i32> %50, %43
  %53 = or i64 %23, 24
  %54 = getelementptr i32, i32* %0, i64 %53
  %55 = bitcast i32* %54 to <4 x i32>*
  %56 = load <4 x i32>, <4 x i32>* %55, align 4
  %57 = getelementptr i32, i32* %54, i64 4
  %58 = bitcast i32* %57 to <4 x i32>*
  %59 = load <4 x i32>, <4 x i32>* %58, align 4
  %60 = add nsw <4 x i32> %56, %51
  %61 = add nsw <4 x i32> %59, %52
  %62 = add i64 %23, 32
  %63 = add i64 %26, -4
  %64 = icmp eq i64 %63, 0
  br i1 %64, label %65, label %22, !llvm.loop !2

65:                                               ; preds = %22, %12
  %66 = phi <4 x i32> [ undef, %12 ], [ %60, %22 ]
  %67 = phi <4 x i32> [ undef, %12 ], [ %61, %22 ]
  %68 = phi i64 [ 0, %12 ], [ %62, %22 ]
  %69 = phi <4 x i32> [ zeroinitializer, %12 ], [ %60, %22 ]
  %70 = phi <4 x i32> [ zeroinitializer, %12 ], [ %61, %22 ]
  %71 = icmp eq i64 %18, 0
  br i1 %71, label %88, label %72

72:                                               ; preds = %65, %72
  %73 = phi i64 [ %85, %72 ], [ %68, %65 ]
  %74 = phi <4 x i32> [ %83, %72 ], [ %69, %65 ]
  %75 = phi <4 x i32> [ %84, %72 ], [ %70, %65 ]
  %76 = phi i64 [ %86, %72 ], [ %18, %65 ]
  %77 = getelementptr i32, i32* %0, i64 %73
  %78 = bitcast i32* %77 to <4 x i32>*
  %79 = load <4 x i32>, <4 x i32>* %78, align 4
  %80 = getelementptr i32, i32* %77, i64 4
  %81 = bitcast i32* %80 to <4 x i32>*
  %82 = load <4 x i32>, <4 x i32>* %81, align 4
  %83 = add nsw <4 x i32> %79, %74
  %84 = add nsw <4 x i32> %82, %75
  %85 = add i64 %73, 8
  %86 = add i64 %76, -1
  %87 = icmp eq i64 %86, 0
  br i1 %87, label %88, label %72, !llvm.loop !4

88:                                               ; preds = %72, %65
  %89 = phi <4 x i32> [ %66, %65 ], [ %83, %72 ]
  %90 = phi <4 x i32> [ %67, %65 ], [ %84, %72 ]
  %91 = add <4 x i32> %90, %89
  %92 = shufflevector <4 x i32> %91, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %93 = add <4 x i32> %91, %92
  %94 = shufflevector <4 x i32> %93, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %95 = add <4 x i32> %93, %94
  %96 = extractelement <4 x i32> %95, i32 0
  %97 = icmp eq i64 %10, %13
  br i1 %97, label %108, label %98

98:                                               ; preds = %88, %6
  %99 = phi i32 [ 0, %6 ], [ %96, %88 ]
  %100 = phi i32* [ %0, %6 ], [ %14, %88 ]
  br label %101

101:                                              ; preds = %98, %101
  %102 = phi i32 [ %105, %101 ], [ %99, %98 ]
  %103 = phi i32* [ %106, %101 ], [ %100, %98 ]
  %104 = load i32, i32* %103, align 4
  %105 = add nsw i32 %104, %102
  %106 = getelementptr inbounds i32, i32* %103, i64 1
  %107 = icmp eq i32* %106, %4
  br i1 %107, label %108, label %101, !llvm.loop !6

108:                                              ; preds = %101, %88
  %109 = phi i32 [ %96, %88 ], [ %105, %101 ]
  %110 = add i32 %109, 4095
  %111 = ashr i32 %110, 12
  %112 = insertelement <4 x i32> undef, i32 %111, i32 0
  %113 = shufflevector <4 x i32> %112, <4 x i32> undef, <4 x i32> zeroinitializer
  br i1 %5, label %217, label %226

114:                                              ; preds = %226
  %115 = getelementptr inbounds i32, i32* %1, i64 %2
  %116 = shl nsw i64 %2, 2
  %117 = add i64 %116, -4
  %118 = lshr exact i64 %117, 2
  %119 = add nuw nsw i64 %118, 1
  %120 = icmp ult i64 %119, 8
  br i1 %120, label %207, label %121

121:                                              ; preds = %114
  %122 = and i64 %119, 9223372036854775800
  %123 = getelementptr i32, i32* %1, i64 %122
  %124 = add nsw i64 %122, -8
  %125 = lshr exact i64 %124, 3
  %126 = add nuw nsw i64 %125, 1
  %127 = and i64 %126, 3
  %128 = icmp ult i64 %124, 24
  br i1 %128, label %174, label %129

129:                                              ; preds = %121
  %130 = sub nsw i64 %126, %127
  br label %131

131:                                              ; preds = %131, %129
  %132 = phi i64 [ 0, %129 ], [ %171, %131 ]
  %133 = phi <4 x i32> [ zeroinitializer, %129 ], [ %169, %131 ]
  %134 = phi <4 x i32> [ zeroinitializer, %129 ], [ %170, %131 ]
  %135 = phi i64 [ %130, %129 ], [ %172, %131 ]
  %136 = getelementptr i32, i32* %1, i64 %132
  %137 = bitcast i32* %136 to <4 x i32>*
  %138 = load <4 x i32>, <4 x i32>* %137, align 4
  %139 = getelementptr i32, i32* %136, i64 4
  %140 = bitcast i32* %139 to <4 x i32>*
  %141 = load <4 x i32>, <4 x i32>* %140, align 4
  %142 = add nsw <4 x i32> %138, %133
  %143 = add nsw <4 x i32> %141, %134
  %144 = or i64 %132, 8
  %145 = getelementptr i32, i32* %1, i64 %144
  %146 = bitcast i32* %145 to <4 x i32>*
  %147 = load <4 x i32>, <4 x i32>* %146, align 4
  %148 = getelementptr i32, i32* %145, i64 4
  %149 = bitcast i32* %148 to <4 x i32>*
  %150 = load <4 x i32>, <4 x i32>* %149, align 4
  %151 = add nsw <4 x i32> %147, %142
  %152 = add nsw <4 x i32> %150, %143
  %153 = or i64 %132, 16
  %154 = getelementptr i32, i32* %1, i64 %153
  %155 = bitcast i32* %154 to <4 x i32>*
  %156 = load <4 x i32>, <4 x i32>* %155, align 4
  %157 = getelementptr i32, i32* %154, i64 4
  %158 = bitcast i32* %157 to <4 x i32>*
  %159 = load <4 x i32>, <4 x i32>* %158, align 4
  %160 = add nsw <4 x i32> %156, %151
  %161 = add nsw <4 x i32> %159, %152
  %162 = or i64 %132, 24
  %163 = getelementptr i32, i32* %1, i64 %162
  %164 = bitcast i32* %163 to <4 x i32>*
  %165 = load <4 x i32>, <4 x i32>* %164, align 4
  %166 = getelementptr i32, i32* %163, i64 4
  %167 = bitcast i32* %166 to <4 x i32>*
  %168 = load <4 x i32>, <4 x i32>* %167, align 4
  %169 = add nsw <4 x i32> %165, %160
  %170 = add nsw <4 x i32> %168, %161
  %171 = add i64 %132, 32
  %172 = add i64 %135, -4
  %173 = icmp eq i64 %172, 0
  br i1 %173, label %174, label %131, !llvm.loop !8

174:                                              ; preds = %131, %121
  %175 = phi <4 x i32> [ undef, %121 ], [ %169, %131 ]
  %176 = phi <4 x i32> [ undef, %121 ], [ %170, %131 ]
  %177 = phi i64 [ 0, %121 ], [ %171, %131 ]
  %178 = phi <4 x i32> [ zeroinitializer, %121 ], [ %169, %131 ]
  %179 = phi <4 x i32> [ zeroinitializer, %121 ], [ %170, %131 ]
  %180 = icmp eq i64 %127, 0
  br i1 %180, label %197, label %181

181:                                              ; preds = %174, %181
  %182 = phi i64 [ %194, %181 ], [ %177, %174 ]
  %183 = phi <4 x i32> [ %192, %181 ], [ %178, %174 ]
  %184 = phi <4 x i32> [ %193, %181 ], [ %179, %174 ]
  %185 = phi i64 [ %195, %181 ], [ %127, %174 ]
  %186 = getelementptr i32, i32* %1, i64 %182
  %187 = bitcast i32* %186 to <4 x i32>*
  %188 = load <4 x i32>, <4 x i32>* %187, align 4
  %189 = getelementptr i32, i32* %186, i64 4
  %190 = bitcast i32* %189 to <4 x i32>*
  %191 = load <4 x i32>, <4 x i32>* %190, align 4
  %192 = add nsw <4 x i32> %188, %183
  %193 = add nsw <4 x i32> %191, %184
  %194 = add i64 %182, 8
  %195 = add i64 %185, -1
  %196 = icmp eq i64 %195, 0
  br i1 %196, label %197, label %181, !llvm.loop !9

197:                                              ; preds = %181, %174
  %198 = phi <4 x i32> [ %175, %174 ], [ %192, %181 ]
  %199 = phi <4 x i32> [ %176, %174 ], [ %193, %181 ]
  %200 = add <4 x i32> %199, %198
  %201 = shufflevector <4 x i32> %200, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %202 = add <4 x i32> %200, %201
  %203 = shufflevector <4 x i32> %202, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %204 = add <4 x i32> %202, %203
  %205 = extractelement <4 x i32> %204, i32 0
  %206 = icmp eq i64 %119, %122
  br i1 %206, label %217, label %207

207:                                              ; preds = %197, %114
  %208 = phi i32 [ 0, %114 ], [ %205, %197 ]
  %209 = phi i32* [ %1, %114 ], [ %123, %197 ]
  br label %210

210:                                              ; preds = %207, %210
  %211 = phi i32 [ %214, %210 ], [ %208, %207 ]
  %212 = phi i32* [ %215, %210 ], [ %209, %207 ]
  %213 = load i32, i32* %212, align 4
  %214 = add nsw i32 %213, %211
  %215 = getelementptr inbounds i32, i32* %212, i64 1
  %216 = icmp eq i32* %215, %115
  br i1 %216, label %217, label %210, !llvm.loop !10

217:                                              ; preds = %210, %197, %3, %108
  %218 = phi i32 [ 0, %108 ], [ 0, %3 ], [ %205, %197 ], [ %214, %210 ]
  %219 = sext i32 %218 to i64
  %220 = uitofp i64 %219 to float
  %221 = fdiv float 1.000000e+00, %220
  %222 = insertelement <4 x float> undef, float %221, i32 0
  %223 = shufflevector <4 x float> %222, <4 x float> undef, <4 x i32> zeroinitializer
  %224 = insertelement <4 x i32> undef, i32 %218, i32 0
  %225 = shufflevector <4 x i32> %224, <4 x i32> undef, <4 x i32> zeroinitializer
  br i1 %5, label %239, label %246

226:                                              ; preds = %108, %226
  %227 = phi i64 [ %237, %226 ], [ 0, %108 ]
  %228 = getelementptr inbounds i32, i32* %0, i64 %227
  %229 = bitcast i32* %228 to <4 x i32>*
  %230 = load <4 x i32>, <4 x i32>* %229, align 1, !alias.scope !11
  %231 = icmp eq <4 x i32> %230, zeroinitializer
  %232 = icmp sgt <4 x i32> %113, %230
  %233 = select <4 x i1> %232, <4 x i32> %113, <4 x i32> %230
  %234 = select <4 x i1> %231, <4 x i32> zeroinitializer, <4 x i32> %233
  %235 = getelementptr inbounds i32, i32* %1, i64 %227
  %236 = bitcast i32* %235 to <4 x i32>*
  store <4 x i32> %234, <4 x i32>* %236, align 1, !alias.scope !14
  %237 = add i64 %227, 4
  %238 = icmp ult i64 %237, %2
  br i1 %238, label %226, label %114

239:                                              ; preds = %246, %217
  %240 = phi <4 x float> [ zeroinitializer, %217 ], [ %281, %246 ]
  %241 = shufflevector <4 x float> %240, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %242 = fadd <4 x float> %240, %241
  %243 = shufflevector <4 x float> %242, <4 x float> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %244 = fadd <4 x float> %242, %243
  %245 = extractelement <4 x float> %244, i32 0
  ret float %245

246:                                              ; preds = %217, %246
  %247 = phi i64 [ %282, %246 ], [ 0, %217 ]
  %248 = phi <4 x float> [ %281, %246 ], [ zeroinitializer, %217 ]
  %249 = getelementptr inbounds i32, i32* %0, i64 %247
  %250 = bitcast i32* %249 to <4 x i32>*
  %251 = load <4 x i32>, <4 x i32>* %250, align 1, !alias.scope !17
  %252 = sitofp <4 x i32> %251 to <4 x float>
  %253 = getelementptr inbounds i32, i32* %1, i64 %247
  %254 = bitcast i32* %253 to <4 x i32>*
  %255 = load <4 x i32>, <4 x i32>* %254, align 1, !alias.scope !20
  %256 = sitofp <4 x i32> %255 to <4 x float>
  %257 = fmul <4 x float> %223, %256
  %258 = icmp eq <4 x i32> %255, %225
  %259 = bitcast <4 x float> %257 to <4 x i32>
  %260 = add <4 x i32> %259, <i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811>
  %261 = ashr <4 x i32> %260, <i32 23, i32 23, i32 23, i32 23>
  %262 = and <4 x i32> %260, <i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608>
  %263 = sub <4 x i32> %259, %262
  %264 = bitcast <4 x i32> %263 to <4 x float>
  %265 = sitofp <4 x i32> %261 to <4 x float>
  %266 = fadd <4 x float> %264, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  fence acq_rel
  %267 = fmul <4 x float> %266, <float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000>
  %268 = fadd <4 x float> %267, <float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000>
  %269 = fmul <4 x float> %266, <float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000>
  %270 = fadd <4 x float> %269, <float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000>
  fence acq_rel
  %271 = fmul <4 x float> %266, %268
  %272 = fadd <4 x float> %271, <float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000>
  %273 = fmul <4 x float> %266, %270
  %274 = fadd <4 x float> %273, <float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000>
  fence acq_rel
  %275 = fdiv <4 x float> %272, %274
  %276 = fadd <4 x float> %275, %265
  %277 = fcmp oeq <4 x float> %252, zeroinitializer
  %278 = select <4 x i1> %258, <4 x float> zeroinitializer, <4 x float> %276
  %279 = fmul <4 x float> %278, %252
  %280 = select <4 x i1> %277, <4 x float> zeroinitializer, <4 x float> %279
  %281 = fsub <4 x float> %248, %280
  %282 = add i64 %247, 4
  %283 = icmp ult i64 %282, %2
  br i1 %283, label %246, label %239
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_SSE413MakeSplitNodeEmiiNS_9PredictorElS1_lPNSt3__16vectorINS_20PropertyDecisionNodeENS2_9allocatorIS4_EEEE(i64, i32, i32, i32, i64, i32, i64, %"class.std::__1::vector"*) local_unnamed_addr #3 {
  %9 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %7, i64 0, i32 0, i32 1
  %10 = bitcast %"struct.jxl::PropertyDecisionNode"** %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = bitcast %"class.std::__1::vector"* %7 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = sub i64 %11, %13
  %15 = sdiv exact i64 %14, 40
  %16 = trunc i64 %15 to i32
  %17 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %7, i64 0, i32 0, i32 0
  %18 = inttoptr i64 %13 to %"struct.jxl::PropertyDecisionNode"*
  %19 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %18, i64 %0, i32 3
  store i32 %16, i32* %19, align 8
  %20 = load i64, i64* %10, align 8
  %21 = load i64, i64* %12, align 8
  %22 = sub i64 %20, %21
  %23 = sdiv exact i64 %22, 40
  %24 = trunc i64 %23 to i32
  %25 = add i32 %24, 1
  %26 = inttoptr i64 %21 to %"struct.jxl::PropertyDecisionNode"*
  %27 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %26, i64 %0, i32 4
  store i32 %25, i32* %27, align 4
  %28 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %17, align 8
  %29 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %28, i64 %0, i32 0
  store i32 %2, i32* %29, align 8
  %30 = trunc i32 %1 to i16
  %31 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %17, align 8
  %32 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %31, i64 %0, i32 1
  store i16 %30, i16* %32, align 4
  tail call void @_ZNSt3__16vectorIN3jxl20PropertyDecisionNodeENS_9allocatorIS2_EEE12emplace_backIJEEEvDpOT_(%"class.std::__1::vector"* %7)
  %33 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %9, align 8
  %34 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %33, i64 -1, i32 1
  store i16 -1, i16* %34, align 4
  %35 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %9, align 8
  %36 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %35, i64 -1, i32 5
  store i32 %5, i32* %36, align 8
  %37 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %9, align 8
  %38 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %37, i64 -1, i32 7
  store i64 %6, i64* %38, align 8
  %39 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %9, align 8
  %40 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %39, i64 -1, i32 8
  store i32 1, i32* %40, align 8
  tail call void @_ZNSt3__16vectorIN3jxl20PropertyDecisionNodeENS_9allocatorIS2_EEE12emplace_backIJEEEvDpOT_(%"class.std::__1::vector"* %7)
  %41 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %9, align 8
  %42 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %41, i64 -1, i32 1
  store i16 -1, i16* %42, align 4
  %43 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %9, align 8
  %44 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %43, i64 -1, i32 5
  store i32 %3, i32* %44, align 8
  %45 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %9, align 8
  %46 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %45, i64 -1, i32 7
  store i64 %4, i64* %46, align 8
  %47 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %9, align 8
  %48 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %47, i64 -1, i32 8
  store i32 1, i32* %48, align 8
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl20PropertyDecisionNodeENS_9allocatorIS2_EEE12emplace_backIJEEEvDpOT_(%"class.std::__1::vector"*) local_unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %3 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %2, align 8
  %4 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %5 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %4, align 8
  %6 = icmp ult %"struct.jxl::PropertyDecisionNode"* %3, %5
  %7 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %5 to i64
  br i1 %6, label %8, label %19

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %3, i64 0, i32 0
  store i32 0, i32* %9, align 8
  %10 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %3, i64 0, i32 1
  store i16 -1, i16* %10, align 4
  %11 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %3, i64 0, i32 3
  store i32 0, i32* %11, align 8
  %12 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %3, i64 0, i32 4
  store i32 0, i32* %12, align 4
  %13 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %3, i64 0, i32 5
  store i32 0, i32* %13, align 8
  %14 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %3, i64 0, i32 7
  store i64 0, i64* %14, align 8
  %15 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %3, i64 0, i32 8
  store i32 1, i32* %15, align 8
  %16 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %3, i64 1
  %17 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %16 to i64
  %18 = bitcast %"struct.jxl::PropertyDecisionNode"** %2 to i64*
  store i64 %17, i64* %18, align 8
  br label %78

19:                                               ; preds = %1
  %20 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %3 to i64
  %21 = bitcast %"struct.jxl::PropertyDecisionNode"** %2 to i64*
  %22 = bitcast %"class.std::__1::vector"* %0 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = sub i64 %20, %23
  %25 = sdiv exact i64 %24, 40
  %26 = add nsw i64 %25, 1
  %27 = icmp ugt i64 %26, 461168601842738790
  br i1 %27, label %28, label %30

28:                                               ; preds = %19
  %29 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %29) #28
  unreachable

30:                                               ; preds = %19
  %31 = bitcast %"struct.jxl::PropertyDecisionNode"** %4 to i64*
  %32 = sub i64 %7, %23
  %33 = sdiv exact i64 %32, 40
  %34 = icmp ult i64 %33, 230584300921369395
  br i1 %34, label %35, label %40

35:                                               ; preds = %30
  %36 = shl nsw i64 %33, 1
  %37 = icmp ult i64 %36, %26
  %38 = select i1 %37, i64 %26, i64 %36
  %39 = icmp eq i64 %38, 0
  br i1 %39, label %45, label %40

40:                                               ; preds = %35, %30
  %41 = phi i64 [ %38, %35 ], [ 461168601842738790, %30 ]
  %42 = mul i64 %41, 40
  %43 = tail call i8* @_Znwm(i64 %42) #29
  %44 = bitcast i8* %43 to %"struct.jxl::PropertyDecisionNode"*
  br label %45

45:                                               ; preds = %40, %35
  %46 = phi i64 [ %41, %40 ], [ 0, %35 ]
  %47 = phi %"struct.jxl::PropertyDecisionNode"* [ %44, %40 ], [ null, %35 ]
  %48 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %47, i64 %25
  %49 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %47, i64 %46
  %50 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %49 to i64
  %51 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %48, i64 0, i32 0
  store i32 0, i32* %51, align 8
  %52 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %47, i64 %25, i32 1
  store i16 -1, i16* %52, align 4
  %53 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %47, i64 %25, i32 3
  store i32 0, i32* %53, align 8
  %54 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %47, i64 %25, i32 4
  store i32 0, i32* %54, align 4
  %55 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %47, i64 %25, i32 5
  store i32 0, i32* %55, align 8
  %56 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %47, i64 %25, i32 7
  store i64 0, i64* %56, align 8
  %57 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %47, i64 %25, i32 8
  store i32 1, i32* %57, align 8
  %58 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %48, i64 1
  %59 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %58 to i64
  %60 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %61 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %60, align 8
  %62 = load i64, i64* %21, align 8
  %63 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %61 to i64
  %64 = sub i64 %62, %63
  %65 = sdiv exact i64 %64, -40
  %66 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %48, i64 %65
  %67 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %66 to i64
  %68 = icmp sgt i64 %64, 0
  br i1 %68, label %69, label %73

69:                                               ; preds = %45
  %70 = bitcast %"struct.jxl::PropertyDecisionNode"* %66 to i8*
  %71 = bitcast %"struct.jxl::PropertyDecisionNode"* %61 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %70, i8* align 8 %71, i64 %64, i1 false) #24
  %72 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %60, align 8
  br label %73

73:                                               ; preds = %69, %45
  %74 = phi %"struct.jxl::PropertyDecisionNode"* [ %61, %45 ], [ %72, %69 ]
  store i64 %67, i64* %22, align 8
  store i64 %59, i64* %21, align 8
  store i64 %50, i64* %31, align 8
  %75 = icmp eq %"struct.jxl::PropertyDecisionNode"* %74, null
  br i1 %75, label %78, label %76

76:                                               ; preds = %73
  %77 = bitcast %"struct.jxl::PropertyDecisionNode"* %74 to i8*
  tail call void @_ZdlPv(i8* %77) #29
  br label %78

78:                                               ; preds = %76, %73, %8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden i32 @_ZN3jxl6N_SSE413BoxIntersectsENSt3__15arrayINS2_IjLm2EEELm2EEES4_RjS5_(i64, i64, i64, i64, i32* nocapture dereferenceable(4), i32* nocapture dereferenceable(4)) local_unnamed_addr #5 {
  %7 = trunc i64 %2 to i32
  %8 = lshr i64 %0, 32
  %9 = trunc i64 %8 to i32
  %10 = icmp ult i32 %7, %9
  %11 = lshr i64 %2, 32
  %12 = trunc i64 %11 to i32
  %13 = trunc i64 %0 to i32
  %14 = trunc i64 %3 to i32
  %15 = lshr i64 %1, 32
  %16 = trunc i64 %15 to i32
  %17 = lshr i64 %3, 32
  %18 = trunc i64 %17 to i32
  %19 = trunc i64 %1 to i32
  %20 = icmp ugt i32 %12, %13
  %21 = and i1 %10, %20
  br i1 %21, label %22, label %34

22:                                               ; preds = %6
  %23 = icmp ugt i32 %7, %13
  br i1 %23, label %26, label %24

24:                                               ; preds = %22
  %25 = icmp ult i32 %12, %9
  br i1 %25, label %26, label %29

26:                                               ; preds = %24, %22
  %27 = phi i32 [ %7, %22 ], [ %12, %24 ]
  store i32 0, i32* %4, align 4
  %28 = add i32 %27, -1
  store i32 %28, i32* %5, align 4
  br label %29

29:                                               ; preds = %26, %24
  %30 = phi i8 [ 0, %24 ], [ 1, %26 ]
  %31 = icmp ult i32 %14, %16
  %32 = icmp ugt i32 %18, %19
  %33 = and i1 %31, %32
  br i1 %33, label %36, label %34

34:                                               ; preds = %6, %29, %43
  %35 = phi i32 [ %47, %43 ], [ 0, %29 ], [ 0, %6 ]
  ret i32 %35

36:                                               ; preds = %29
  %37 = icmp ugt i32 %14, %19
  br i1 %37, label %40, label %38

38:                                               ; preds = %36
  %39 = icmp ult i32 %18, %16
  br i1 %39, label %40, label %43

40:                                               ; preds = %36, %38
  %41 = phi i32 [ %18, %38 ], [ %14, %36 ]
  store i32 1, i32* %4, align 4
  %42 = add i32 %41, -1
  store i32 %42, i32* %5, align 4
  br label %43

43:                                               ; preds = %40, %38
  %44 = phi i8 [ %30, %38 ], [ 1, %40 ]
  %45 = and i8 %44, 1
  %46 = icmp eq i8 %45, 0
  %47 = select i1 %46, i32 2, i32 1
  br label %34
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_SSE416SplitTreeSamplesERNS_11TreeSamplesEmmmm(%"struct.jxl::TreeSamples"* dereferenceable(200), i64, i64, i64, i64) local_unnamed_addr #3 {
  %6 = add i64 %1, 1
  %7 = icmp ult i64 %6, %3
  br i1 %7, label %8, label %153

8:                                                ; preds = %5
  %9 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 0, i32 0, i32 0
  %10 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 0, i32 0, i32 1
  %11 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 2, i32 0, i32 0
  %12 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 2, i32 0, i32 1
  %13 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 1, i32 0, i32 0
  br label %14

14:                                               ; preds = %8, %148
  %15 = phi i64 [ %6, %8 ], [ %151, %148 ]
  %16 = phi i64 [ %1, %8 ], [ %150, %148 ]
  %17 = phi i64 [ %3, %8 ], [ %149, %148 ]
  %18 = phi i64 [ -7723592293110705685, %8 ], [ %19, %148 ]
  %19 = phi i64 [ -4658895280553007687, %8 ], [ %32, %148 ]
  %20 = icmp ugt i64 %17, %16
  br i1 %20, label %24, label %21

21:                                               ; preds = %14
  %22 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.1, i64 0, i64 0), i32 154, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i64 0, i64 0)) #24
  %23 = tail call zeroext i1 @_ZN3jxl5AbortEv() #28
  unreachable

24:                                               ; preds = %14
  %25 = add i64 %18, %19
  %26 = shl i64 %18, 23
  %27 = xor i64 %26, %18
  %28 = lshr i64 %27, 18
  %29 = lshr i64 %19, 5
  %30 = xor i64 %29, %19
  %31 = xor i64 %30, %27
  %32 = xor i64 %31, %28
  %33 = sub i64 %17, %16
  %34 = urem i64 %25, %33
  %35 = add i64 %34, %16
  %36 = icmp eq i64 %34, 0
  br i1 %36, label %73, label %37

37:                                               ; preds = %24
  %38 = load %"class.std::__1::vector.8"*, %"class.std::__1::vector.8"** %9, align 8
  %39 = load %"class.std::__1::vector.8"*, %"class.std::__1::vector.8"** %10, align 8
  %40 = icmp eq %"class.std::__1::vector.8"* %38, %39
  br i1 %40, label %41, label %45

41:                                               ; preds = %45, %37
  %42 = load %"class.std::__1::vector.29"*, %"class.std::__1::vector.29"** %11, align 8
  %43 = load %"class.std::__1::vector.29"*, %"class.std::__1::vector.29"** %12, align 8
  %44 = icmp eq %"class.std::__1::vector.29"* %42, %43
  br i1 %44, label %57, label %63

45:                                               ; preds = %37, %45
  %46 = phi %"class.std::__1::vector.8"* [ %55, %45 ], [ %38, %37 ]
  %47 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %46, i64 0, i32 0, i32 0
  %48 = load %"struct.jxl::TreeSamples::ResidualToken"*, %"struct.jxl::TreeSamples::ResidualToken"** %47, align 8
  %49 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %48, i64 %16
  %50 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %48, i64 %35
  %51 = bitcast %"struct.jxl::TreeSamples::ResidualToken"* %49 to i16*
  %52 = load i16, i16* %51, align 1
  %53 = bitcast %"struct.jxl::TreeSamples::ResidualToken"* %50 to i16*
  %54 = load i16, i16* %53, align 1
  store i16 %54, i16* %51, align 1
  store i16 %52, i16* %53, align 1
  %55 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %46, i64 1
  %56 = icmp eq %"class.std::__1::vector.8"* %55, %39
  br i1 %56, label %41, label %45

57:                                               ; preds = %63, %41
  %58 = load i16*, i16** %13, align 8
  %59 = getelementptr inbounds i16, i16* %58, i64 %16
  %60 = getelementptr inbounds i16, i16* %58, i64 %35
  %61 = load i16, i16* %59, align 2
  %62 = load i16, i16* %60, align 2
  store i16 %62, i16* %59, align 2
  store i16 %61, i16* %60, align 2
  br label %73

63:                                               ; preds = %41, %63
  %64 = phi %"class.std::__1::vector.29"* [ %71, %63 ], [ %42, %41 ]
  %65 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %64, i64 0, i32 0, i32 0
  %66 = load i8*, i8** %65, align 8
  %67 = getelementptr inbounds i8, i8* %66, i64 %16
  %68 = getelementptr inbounds i8, i8* %66, i64 %35
  %69 = load i8, i8* %67, align 1
  %70 = load i8, i8* %68, align 1
  store i8 %70, i8* %67, align 1
  store i8 %69, i8* %68, align 1
  %71 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %64, i64 1
  %72 = icmp eq %"class.std::__1::vector.29"* %71, %43
  br i1 %72, label %57, label %63

73:                                               ; preds = %24, %57
  %74 = icmp ult i64 %15, %17
  br i1 %74, label %79, label %75

75:                                               ; preds = %141, %73
  %76 = phi i64 [ %16, %73 ], [ %142, %141 ]
  %77 = phi i64 [ %15, %73 ], [ %143, %141 ]
  %78 = icmp ugt i64 %76, %2
  br i1 %78, label %148, label %146

79:                                               ; preds = %73, %141
  %80 = phi i64 [ %144, %141 ], [ %15, %73 ]
  %81 = phi i64 [ %143, %141 ], [ %15, %73 ]
  %82 = phi i64 [ %142, %141 ], [ %16, %73 ]
  %83 = load %"class.std::__1::vector.29"*, %"class.std::__1::vector.29"** %11, align 8
  %84 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %83, i64 %4, i32 0, i32 0
  %85 = load i8*, i8** %84, align 8
  %86 = getelementptr inbounds i8, i8* %85, i64 %80
  %87 = load i8, i8* %86, align 1
  %88 = zext i8 %87 to i32
  %89 = getelementptr inbounds i8, i8* %85, i64 %82
  %90 = load i8, i8* %89, align 1
  %91 = zext i8 %90 to i32
  %92 = sub nsw i32 %88, %91
  %93 = icmp slt i32 %92, 0
  br i1 %93, label %94, label %97

94:                                               ; preds = %79
  tail call void @_ZN3jxl11TreeSamples12ThreeShuffleEmmm(%"struct.jxl::TreeSamples"* %0, i64 %82, i64 %81, i64 %80)
  %95 = add i64 %82, 1
  %96 = add i64 %81, 1
  br label %141

97:                                               ; preds = %79
  %98 = icmp eq i32 %92, 0
  br i1 %98, label %99, label %141

99:                                               ; preds = %97
  %100 = icmp eq i64 %81, %80
  br i1 %100, label %139, label %101

101:                                              ; preds = %99
  %102 = load %"class.std::__1::vector.8"*, %"class.std::__1::vector.8"** %9, align 8
  %103 = load %"class.std::__1::vector.8"*, %"class.std::__1::vector.8"** %10, align 8
  %104 = icmp eq %"class.std::__1::vector.8"* %102, %103
  br i1 %104, label %107, label %111

105:                                              ; preds = %111
  %106 = load %"class.std::__1::vector.29"*, %"class.std::__1::vector.29"** %11, align 8
  br label %107

107:                                              ; preds = %105, %101
  %108 = phi %"class.std::__1::vector.29"* [ %106, %105 ], [ %83, %101 ]
  %109 = load %"class.std::__1::vector.29"*, %"class.std::__1::vector.29"** %12, align 8
  %110 = icmp eq %"class.std::__1::vector.29"* %108, %109
  br i1 %110, label %123, label %129

111:                                              ; preds = %101, %111
  %112 = phi %"class.std::__1::vector.8"* [ %121, %111 ], [ %102, %101 ]
  %113 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %112, i64 0, i32 0, i32 0
  %114 = load %"struct.jxl::TreeSamples::ResidualToken"*, %"struct.jxl::TreeSamples::ResidualToken"** %113, align 8
  %115 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %114, i64 %81
  %116 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %114, i64 %80
  %117 = bitcast %"struct.jxl::TreeSamples::ResidualToken"* %115 to i16*
  %118 = load i16, i16* %117, align 1
  %119 = bitcast %"struct.jxl::TreeSamples::ResidualToken"* %116 to i16*
  %120 = load i16, i16* %119, align 1
  store i16 %120, i16* %117, align 1
  store i16 %118, i16* %119, align 1
  %121 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %112, i64 1
  %122 = icmp eq %"class.std::__1::vector.8"* %121, %103
  br i1 %122, label %105, label %111

123:                                              ; preds = %129, %107
  %124 = load i16*, i16** %13, align 8
  %125 = getelementptr inbounds i16, i16* %124, i64 %81
  %126 = getelementptr inbounds i16, i16* %124, i64 %80
  %127 = load i16, i16* %125, align 2
  %128 = load i16, i16* %126, align 2
  store i16 %128, i16* %125, align 2
  store i16 %127, i16* %126, align 2
  br label %139

129:                                              ; preds = %107, %129
  %130 = phi %"class.std::__1::vector.29"* [ %137, %129 ], [ %108, %107 ]
  %131 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %130, i64 0, i32 0, i32 0
  %132 = load i8*, i8** %131, align 8
  %133 = getelementptr inbounds i8, i8* %132, i64 %81
  %134 = getelementptr inbounds i8, i8* %132, i64 %80
  %135 = load i8, i8* %133, align 1
  %136 = load i8, i8* %134, align 1
  store i8 %136, i8* %133, align 1
  store i8 %135, i8* %134, align 1
  %137 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %130, i64 1
  %138 = icmp eq %"class.std::__1::vector.29"* %137, %109
  br i1 %138, label %123, label %129

139:                                              ; preds = %99, %123
  %140 = add i64 %81, 1
  br label %141

141:                                              ; preds = %97, %139, %94
  %142 = phi i64 [ %95, %94 ], [ %82, %139 ], [ %82, %97 ]
  %143 = phi i64 [ %96, %94 ], [ %140, %139 ], [ %81, %97 ]
  %144 = add nuw i64 %80, 1
  %145 = icmp eq i64 %144, %17
  br i1 %145, label %75, label %79

146:                                              ; preds = %75
  %147 = icmp ult i64 %77, %2
  br i1 %147, label %148, label %153

148:                                              ; preds = %75, %146
  %149 = phi i64 [ %76, %75 ], [ %17, %146 ]
  %150 = phi i64 [ %16, %75 ], [ %77, %146 ]
  %151 = add i64 %150, 1
  %152 = icmp ugt i64 %149, %151
  br i1 %152, label %14, label %153

153:                                              ; preds = %148, %146, %5
  ret void
}

declare zeroext i1 @_ZN3jxl5DebugEPKcz(i8*, ...) local_unnamed_addr #6

; Function Attrs: noreturn
declare zeroext i1 @_ZN3jxl5AbortEv() local_unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl11TreeSamples4SwapEmm(%"struct.jxl::TreeSamples"* nocapture readonly, i64, i64) local_unnamed_addr #8 align 2 {
  %4 = icmp eq i64 %1, %2
  br i1 %4, label %46, label %5

5:                                                ; preds = %3
  %6 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = load %"class.std::__1::vector.8"*, %"class.std::__1::vector.8"** %6, align 8
  %8 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 0, i32 0, i32 1
  %9 = load %"class.std::__1::vector.8"*, %"class.std::__1::vector.8"** %8, align 8
  %10 = icmp eq %"class.std::__1::vector.8"* %7, %9
  br i1 %10, label %11, label %17

11:                                               ; preds = %17, %5
  %12 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 2, i32 0, i32 0
  %13 = load %"class.std::__1::vector.29"*, %"class.std::__1::vector.29"** %12, align 8
  %14 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 2, i32 0, i32 1
  %15 = load %"class.std::__1::vector.29"*, %"class.std::__1::vector.29"** %14, align 8
  %16 = icmp eq %"class.std::__1::vector.29"* %13, %15
  br i1 %16, label %29, label %36

17:                                               ; preds = %5, %17
  %18 = phi %"class.std::__1::vector.8"* [ %27, %17 ], [ %7, %5 ]
  %19 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %18, i64 0, i32 0, i32 0
  %20 = load %"struct.jxl::TreeSamples::ResidualToken"*, %"struct.jxl::TreeSamples::ResidualToken"** %19, align 8
  %21 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %20, i64 %1
  %22 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %20, i64 %2
  %23 = bitcast %"struct.jxl::TreeSamples::ResidualToken"* %21 to i16*
  %24 = load i16, i16* %23, align 1
  %25 = bitcast %"struct.jxl::TreeSamples::ResidualToken"* %22 to i16*
  %26 = load i16, i16* %25, align 1
  store i16 %26, i16* %23, align 1
  store i16 %24, i16* %25, align 1
  %27 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %18, i64 1
  %28 = icmp eq %"class.std::__1::vector.8"* %27, %9
  br i1 %28, label %11, label %17

29:                                               ; preds = %36, %11
  %30 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 1, i32 0, i32 0
  %31 = load i16*, i16** %30, align 8
  %32 = getelementptr inbounds i16, i16* %31, i64 %1
  %33 = getelementptr inbounds i16, i16* %31, i64 %2
  %34 = load i16, i16* %32, align 2
  %35 = load i16, i16* %33, align 2
  store i16 %35, i16* %32, align 2
  store i16 %34, i16* %33, align 2
  br label %46

36:                                               ; preds = %11, %36
  %37 = phi %"class.std::__1::vector.29"* [ %44, %36 ], [ %13, %11 ]
  %38 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %37, i64 0, i32 0, i32 0
  %39 = load i8*, i8** %38, align 8
  %40 = getelementptr inbounds i8, i8* %39, i64 %1
  %41 = getelementptr inbounds i8, i8* %39, i64 %2
  %42 = load i8, i8* %40, align 1
  %43 = load i8, i8* %41, align 1
  store i8 %43, i8* %40, align 1
  store i8 %42, i8* %41, align 1
  %44 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %37, i64 1
  %45 = icmp eq %"class.std::__1::vector.29"* %44, %15
  br i1 %45, label %29, label %36

46:                                               ; preds = %3, %29
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl11TreeSamples12ThreeShuffleEmmm(%"struct.jxl::TreeSamples"* nocapture readonly, i64, i64, i64) local_unnamed_addr #8 align 2 {
  %5 = icmp eq i64 %2, %3
  br i1 %5, label %6, label %49

6:                                                ; preds = %4
  %7 = icmp eq i64 %1, %2
  br i1 %7, label %114, label %8

8:                                                ; preds = %6
  %9 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 0, i32 0, i32 0
  %10 = load %"class.std::__1::vector.8"*, %"class.std::__1::vector.8"** %9, align 8
  %11 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 0, i32 0, i32 1
  %12 = load %"class.std::__1::vector.8"*, %"class.std::__1::vector.8"** %11, align 8
  %13 = icmp eq %"class.std::__1::vector.8"* %10, %12
  br i1 %13, label %14, label %20

14:                                               ; preds = %20, %8
  %15 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 2, i32 0, i32 0
  %16 = load %"class.std::__1::vector.29"*, %"class.std::__1::vector.29"** %15, align 8
  %17 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 2, i32 0, i32 1
  %18 = load %"class.std::__1::vector.29"*, %"class.std::__1::vector.29"** %17, align 8
  %19 = icmp eq %"class.std::__1::vector.29"* %16, %18
  br i1 %19, label %32, label %39

20:                                               ; preds = %8, %20
  %21 = phi %"class.std::__1::vector.8"* [ %30, %20 ], [ %10, %8 ]
  %22 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %21, i64 0, i32 0, i32 0
  %23 = load %"struct.jxl::TreeSamples::ResidualToken"*, %"struct.jxl::TreeSamples::ResidualToken"** %22, align 8
  %24 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %23, i64 %1
  %25 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %23, i64 %2
  %26 = bitcast %"struct.jxl::TreeSamples::ResidualToken"* %24 to i16*
  %27 = load i16, i16* %26, align 1
  %28 = bitcast %"struct.jxl::TreeSamples::ResidualToken"* %25 to i16*
  %29 = load i16, i16* %28, align 1
  store i16 %29, i16* %26, align 1
  store i16 %27, i16* %28, align 1
  %30 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %21, i64 1
  %31 = icmp eq %"class.std::__1::vector.8"* %30, %12
  br i1 %31, label %14, label %20

32:                                               ; preds = %39, %14
  %33 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 1, i32 0, i32 0
  %34 = load i16*, i16** %33, align 8
  %35 = getelementptr inbounds i16, i16* %34, i64 %1
  %36 = getelementptr inbounds i16, i16* %34, i64 %2
  %37 = load i16, i16* %35, align 2
  %38 = load i16, i16* %36, align 2
  store i16 %38, i16* %35, align 2
  store i16 %37, i16* %36, align 2
  br label %114

39:                                               ; preds = %14, %39
  %40 = phi %"class.std::__1::vector.29"* [ %47, %39 ], [ %16, %14 ]
  %41 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %40, i64 0, i32 0, i32 0
  %42 = load i8*, i8** %41, align 8
  %43 = getelementptr inbounds i8, i8* %42, i64 %1
  %44 = getelementptr inbounds i8, i8* %42, i64 %2
  %45 = load i8, i8* %43, align 1
  %46 = load i8, i8* %44, align 1
  store i8 %46, i8* %43, align 1
  store i8 %45, i8* %44, align 1
  %47 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %40, i64 1
  %48 = icmp eq %"class.std::__1::vector.29"* %47, %18
  br i1 %48, label %32, label %39

49:                                               ; preds = %4
  %50 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 0, i32 0, i32 0
  %51 = load %"class.std::__1::vector.8"*, %"class.std::__1::vector.8"** %50, align 8
  %52 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 0, i32 0, i32 1
  %53 = load %"class.std::__1::vector.8"*, %"class.std::__1::vector.8"** %52, align 8
  %54 = icmp eq %"class.std::__1::vector.8"* %51, %53
  br i1 %54, label %55, label %61

55:                                               ; preds = %61, %49
  %56 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 2, i32 0, i32 0
  %57 = load %"class.std::__1::vector.29"*, %"class.std::__1::vector.29"** %56, align 8
  %58 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 2, i32 0, i32 1
  %59 = load %"class.std::__1::vector.29"*, %"class.std::__1::vector.29"** %58, align 8
  %60 = icmp eq %"class.std::__1::vector.29"* %57, %59
  br i1 %60, label %85, label %98

61:                                               ; preds = %49, %61
  %62 = phi %"class.std::__1::vector.8"* [ %83, %61 ], [ %51, %49 ]
  %63 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %62, i64 0, i32 0, i32 0
  %64 = load %"struct.jxl::TreeSamples::ResidualToken"*, %"struct.jxl::TreeSamples::ResidualToken"** %63, align 8
  %65 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %64, i64 %1
  %66 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %65, i64 0, i32 0
  %67 = load i8, i8* %66, align 1
  %68 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %64, i64 %1, i32 1
  %69 = load i8, i8* %68, align 1
  %70 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %64, i64 %3
  %71 = bitcast %"struct.jxl::TreeSamples::ResidualToken"* %70 to i16*
  %72 = bitcast %"struct.jxl::TreeSamples::ResidualToken"* %65 to i16*
  %73 = load i16, i16* %71, align 1
  store i16 %73, i16* %72, align 1
  %74 = load %"struct.jxl::TreeSamples::ResidualToken"*, %"struct.jxl::TreeSamples::ResidualToken"** %63, align 8
  %75 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %74, i64 %2
  %76 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %74, i64 %3
  %77 = bitcast %"struct.jxl::TreeSamples::ResidualToken"* %75 to i16*
  %78 = bitcast %"struct.jxl::TreeSamples::ResidualToken"* %76 to i16*
  %79 = load i16, i16* %77, align 1
  store i16 %79, i16* %78, align 1
  %80 = load %"struct.jxl::TreeSamples::ResidualToken"*, %"struct.jxl::TreeSamples::ResidualToken"** %63, align 8
  %81 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %80, i64 %2, i32 0
  store i8 %67, i8* %81, align 1
  %82 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %80, i64 %2, i32 1
  store i8 %69, i8* %82, align 1
  %83 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %62, i64 1
  %84 = icmp eq %"class.std::__1::vector.8"* %83, %53
  br i1 %84, label %55, label %61

85:                                               ; preds = %98, %55
  %86 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 1, i32 0, i32 0
  %87 = load i16*, i16** %86, align 8
  %88 = getelementptr inbounds i16, i16* %87, i64 %1
  %89 = load i16, i16* %88, align 2
  %90 = getelementptr inbounds i16, i16* %87, i64 %3
  %91 = load i16, i16* %90, align 2
  store i16 %91, i16* %88, align 2
  %92 = load i16*, i16** %86, align 8
  %93 = getelementptr inbounds i16, i16* %92, i64 %2
  %94 = load i16, i16* %93, align 2
  %95 = getelementptr inbounds i16, i16* %92, i64 %3
  store i16 %94, i16* %95, align 2
  %96 = load i16*, i16** %86, align 8
  %97 = getelementptr inbounds i16, i16* %96, i64 %2
  store i16 %89, i16* %97, align 2
  br label %114

98:                                               ; preds = %55, %98
  %99 = phi %"class.std::__1::vector.29"* [ %112, %98 ], [ %57, %55 ]
  %100 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %99, i64 0, i32 0, i32 0
  %101 = load i8*, i8** %100, align 8
  %102 = getelementptr inbounds i8, i8* %101, i64 %1
  %103 = load i8, i8* %102, align 1
  %104 = getelementptr inbounds i8, i8* %101, i64 %3
  %105 = load i8, i8* %104, align 1
  store i8 %105, i8* %102, align 1
  %106 = load i8*, i8** %100, align 8
  %107 = getelementptr inbounds i8, i8* %106, i64 %2
  %108 = load i8, i8* %107, align 1
  %109 = getelementptr inbounds i8, i8* %106, i64 %3
  store i8 %108, i8* %109, align 1
  %110 = load i8*, i8** %100, align 8
  %111 = getelementptr inbounds i8, i8* %110, i64 %2
  store i8 %103, i8* %111, align 1
  %112 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %99, i64 1
  %113 = icmp eq %"class.std::__1::vector.29"* %112, %59
  br i1 %113, label %85, label %98

114:                                              ; preds = %32, %6, %85
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_SSE413FindBestSplitERNS_11TreeSamplesEfRKNSt3__16vectorINS_21ModularMultiplierInfoENS3_9allocatorIS5_EEEENS3_5arrayINSB_IjLm2EEELm2EEEfPNS4_INS_20PropertyDecisionNodeENS6_ISE_EEEE(%"struct.jxl::TreeSamples"* dereferenceable(200), float, %"class.std::__1::vector.69"* nocapture readonly dereferenceable(24), i64, i64, float, %"class.std::__1::vector"*) #1 {
  %8 = alloca %"class.std::__1::vector.76", align 8
  %9 = alloca %struct.SplitInfo, align 8
  %10 = alloca %struct.SplitInfo, align 8
  %11 = alloca %struct.SplitInfo, align 8
  %12 = alloca %struct.SplitInfo, align 8
  %13 = alloca %"class.std::__1::vector.43", align 8
  %14 = alloca %"class.std::__1::vector.43", align 8
  %15 = alloca %"class.std::__1::vector.55", align 8
  %16 = alloca %struct.SplitInfo, align 8
  %17 = alloca %"class.std::__1::vector.43", align 8
  %18 = alloca %"class.std::__1::vector.43", align 8
  %19 = alloca %"class.std::__1::vector.83", align 8
  %20 = alloca %"class.std::__1::vector.90", align 8
  %21 = alloca %"class.std::__1::vector.90", align 8
  %22 = alloca %"class.std::__1::vector.43", align 8
  %23 = alloca %"class.std::__1::vector.43", align 8
  %24 = alloca %"struct.std::__1::array", align 8
  %25 = alloca [2 x %"struct.std::__1::array.5"], align 8
  %26 = alloca [2 x %"struct.std::__1::array.5"], align 8
  %27 = bitcast %"class.std::__1::vector.76"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %27) #24
  %28 = getelementptr inbounds %"class.std::__1::vector.76", %"class.std::__1::vector.76"* %8, i64 0, i32 0, i32 0
  %29 = getelementptr inbounds %"class.std::__1::vector.76", %"class.std::__1::vector.76"* %8, i64 0, i32 0, i32 1
  %30 = getelementptr inbounds %"class.std::__1::vector.76", %"class.std::__1::vector.76"* %8, i64 0, i32 0, i32 2, i32 0, i32 0
  %31 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 1
  %32 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 1, i32 0, i32 1
  %33 = bitcast i16** %32 to i64*
  %34 = load i64, i64* %33, align 8
  %35 = bitcast %"class.std::__1::vector.20"* %31 to i64*
  %36 = load i64, i64* %35, align 8
  %37 = sub i64 %34, %36
  %38 = ashr exact i64 %37, 1
  %39 = bitcast %struct.NodeInfo** %29 to i64*
  %40 = bitcast %"class.std::__1::vector.76"* %8 to i64*
  %41 = bitcast %struct.NodeInfo** %30 to i64*
  %42 = tail call i8* @_Znwm(i64 48) #29
  %43 = getelementptr inbounds i8, i8* %42, i64 48
  %44 = ptrtoint i8* %43 to i64
  %45 = getelementptr inbounds i8, i8* %42, i64 16
  %46 = bitcast i8* %45 to i64*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %42, i8 0, i64 16, i1 false)
  store i64 %38, i64* %46, align 8
  %47 = getelementptr inbounds i8, i8* %42, i64 24
  %48 = bitcast i8* %47 to i64*
  store i64 0, i64* %48, align 8
  %49 = getelementptr inbounds i8, i8* %42, i64 32
  %50 = bitcast i8* %49 to i64*
  store i64 %3, i64* %50, align 8
  %51 = getelementptr inbounds i8, i8* %42, i64 40
  %52 = bitcast i8* %51 to i64*
  store i64 %4, i64* %52, align 8
  %53 = ptrtoint i8* %42 to i64
  store i64 %53, i64* %40, align 8
  store i64 %44, i64* %39, align 8
  store i64 %44, i64* %41, align 8
  %54 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 5, i32 0, i32 1
  %55 = bitcast i32** %54 to i64*
  %56 = load i64, i64* %55, align 8
  %57 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 5
  %58 = bitcast %"class.std::__1::vector.62"* %57 to i64*
  %59 = load i64, i64* %58, align 8
  %60 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 4, i32 0, i32 1
  %61 = bitcast i32** %60 to i64*
  %62 = load i64, i64* %61, align 8
  %63 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 4
  %64 = bitcast %"class.std::__1::vector.55"* %63 to i64*
  %65 = load i64, i64* %64, align 8
  %66 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 5, i32 0, i32 1
  %67 = sub i64 %56, %59
  %68 = ashr exact i64 %67, 2
  %69 = sub i64 %62, %65
  %70 = ashr exact i64 %69, 2
  %71 = bitcast i8* %43 to %struct.NodeInfo*
  %72 = bitcast %struct.SplitInfo* %9 to i8*
  %73 = getelementptr inbounds %struct.SplitInfo, %struct.SplitInfo* %9, i64 0, i32 0
  %74 = getelementptr inbounds %struct.SplitInfo, %struct.SplitInfo* %9, i64 0, i32 1
  %75 = getelementptr inbounds %struct.SplitInfo, %struct.SplitInfo* %9, i64 0, i32 2
  %76 = getelementptr inbounds %struct.SplitInfo, %struct.SplitInfo* %9, i64 0, i32 3
  %77 = getelementptr inbounds %struct.SplitInfo, %struct.SplitInfo* %9, i64 0, i32 4
  %78 = getelementptr inbounds %struct.SplitInfo, %struct.SplitInfo* %9, i64 0, i32 5
  %79 = getelementptr inbounds %struct.SplitInfo, %struct.SplitInfo* %9, i64 0, i32 6
  %80 = bitcast %struct.SplitInfo* %10 to i8*
  %81 = getelementptr inbounds %struct.SplitInfo, %struct.SplitInfo* %10, i64 0, i32 0
  %82 = getelementptr inbounds %struct.SplitInfo, %struct.SplitInfo* %10, i64 0, i32 1
  %83 = getelementptr inbounds %struct.SplitInfo, %struct.SplitInfo* %10, i64 0, i32 2
  %84 = getelementptr inbounds %struct.SplitInfo, %struct.SplitInfo* %10, i64 0, i32 3
  %85 = getelementptr inbounds %struct.SplitInfo, %struct.SplitInfo* %10, i64 0, i32 4
  %86 = getelementptr inbounds %struct.SplitInfo, %struct.SplitInfo* %10, i64 0, i32 5
  %87 = getelementptr inbounds %struct.SplitInfo, %struct.SplitInfo* %10, i64 0, i32 6
  %88 = bitcast %struct.SplitInfo* %11 to i8*
  %89 = getelementptr inbounds %struct.SplitInfo, %struct.SplitInfo* %11, i64 0, i32 0
  %90 = getelementptr inbounds %struct.SplitInfo, %struct.SplitInfo* %11, i64 0, i32 1
  %91 = getelementptr inbounds %struct.SplitInfo, %struct.SplitInfo* %11, i64 0, i32 2
  %92 = getelementptr inbounds %struct.SplitInfo, %struct.SplitInfo* %11, i64 0, i32 3
  %93 = getelementptr inbounds %struct.SplitInfo, %struct.SplitInfo* %11, i64 0, i32 4
  %94 = getelementptr inbounds %struct.SplitInfo, %struct.SplitInfo* %11, i64 0, i32 5
  %95 = getelementptr inbounds %struct.SplitInfo, %struct.SplitInfo* %11, i64 0, i32 6
  %96 = bitcast %struct.SplitInfo* %12 to i8*
  %97 = getelementptr inbounds %struct.SplitInfo, %struct.SplitInfo* %12, i64 0, i32 0
  %98 = getelementptr inbounds %struct.SplitInfo, %struct.SplitInfo* %12, i64 0, i32 1
  %99 = getelementptr inbounds %struct.SplitInfo, %struct.SplitInfo* %12, i64 0, i32 2
  %100 = getelementptr inbounds %struct.SplitInfo, %struct.SplitInfo* %12, i64 0, i32 3
  %101 = getelementptr inbounds %struct.SplitInfo, %struct.SplitInfo* %12, i64 0, i32 4
  %102 = getelementptr inbounds %struct.SplitInfo, %struct.SplitInfo* %12, i64 0, i32 5
  %103 = getelementptr inbounds %struct.SplitInfo, %struct.SplitInfo* %12, i64 0, i32 6
  %104 = icmp eq i64 %67, 0
  %105 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 0, i32 0, i32 0
  %106 = bitcast %"class.std::__1::vector.43"* %13 to i8*
  %107 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %13, i64 0, i32 0, i32 0
  %108 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %13, i64 0, i32 0, i32 1
  %109 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %13, i64 0, i32 0, i32 2, i32 0, i32 0
  %110 = bitcast %"class.std::__1::vector.43"* %13 to i8**
  %111 = bitcast i32** %108 to i64*
  %112 = bitcast %"class.std::__1::vector.43"* %14 to i8*
  %113 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %14, i64 0, i32 0, i32 0
  %114 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %14, i64 0, i32 0, i32 1
  %115 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %14, i64 0, i32 0, i32 2, i32 0, i32 0
  %116 = bitcast %"class.std::__1::vector.43"* %14 to i8**
  %117 = bitcast i32** %114 to i64*
  %118 = bitcast %"class.std::__1::vector.55"* %15 to i8*
  %119 = getelementptr inbounds %"class.std::__1::vector.55", %"class.std::__1::vector.55"* %15, i64 0, i32 0, i32 0
  %120 = getelementptr inbounds %"class.std::__1::vector.55", %"class.std::__1::vector.55"* %15, i64 0, i32 0, i32 1
  %121 = getelementptr inbounds %"class.std::__1::vector.55", %"class.std::__1::vector.55"* %15, i64 0, i32 0, i32 2, i32 0, i32 0
  %122 = icmp ugt i64 %68, 4611686018427387903
  %123 = bitcast %"class.std::__1::vector.55"* %15 to i8**
  %124 = bitcast i32** %120 to i64*
  %125 = add nsw i64 %68, -1
  %126 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 1, i32 0, i32 0
  %127 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %6, i64 0, i32 0, i32 0
  %128 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 5, i32 0, i32 0
  %129 = bitcast %struct.SplitInfo* %16 to i8*
  %130 = getelementptr inbounds %struct.SplitInfo, %struct.SplitInfo* %16, i64 0, i32 0
  %131 = getelementptr inbounds %struct.SplitInfo, %struct.SplitInfo* %16, i64 0, i32 1
  %132 = getelementptr inbounds %struct.SplitInfo, %struct.SplitInfo* %16, i64 0, i32 2
  %133 = getelementptr inbounds %struct.SplitInfo, %struct.SplitInfo* %16, i64 0, i32 3
  %134 = getelementptr inbounds %struct.SplitInfo, %struct.SplitInfo* %16, i64 0, i32 4
  %135 = getelementptr inbounds %struct.SplitInfo, %struct.SplitInfo* %16, i64 0, i32 5
  %136 = getelementptr inbounds %struct.SplitInfo, %struct.SplitInfo* %16, i64 0, i32 6
  %137 = getelementptr inbounds %"class.std::__1::vector.69", %"class.std::__1::vector.69"* %2, i64 0, i32 0, i32 1
  %138 = bitcast %"struct.jxl::ModularMultiplierInfo"** %137 to i64*
  %139 = bitcast %"class.std::__1::vector.69"* %2 to i64*
  %140 = bitcast %"class.std::__1::vector.43"* %17 to i8*
  %141 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %17, i64 0, i32 0, i32 0
  %142 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %17, i64 0, i32 0, i32 1
  %143 = bitcast %"class.std::__1::vector.43"* %18 to i8*
  %144 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %18, i64 0, i32 0, i32 0
  %145 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %18, i64 0, i32 0, i32 1
  %146 = bitcast %"class.std::__1::vector.83"* %19 to i8*
  %147 = getelementptr inbounds %"class.std::__1::vector.83", %"class.std::__1::vector.83"* %19, i64 0, i32 0, i32 0
  %148 = getelementptr inbounds %"class.std::__1::vector.83", %"class.std::__1::vector.83"* %19, i64 0, i32 0, i32 1
  %149 = bitcast %"class.std::__1::vector.90"* %20 to i8*
  %150 = getelementptr inbounds %"class.std::__1::vector.90", %"class.std::__1::vector.90"* %20, i64 0, i32 0, i32 0
  %151 = getelementptr inbounds %"class.std::__1::vector.90", %"class.std::__1::vector.90"* %20, i64 0, i32 0, i32 1
  %152 = bitcast %"class.std::__1::vector.90"* %21 to i8*
  %153 = getelementptr inbounds %"class.std::__1::vector.90", %"class.std::__1::vector.90"* %21, i64 0, i32 0, i32 0
  %154 = getelementptr inbounds %"class.std::__1::vector.90", %"class.std::__1::vector.90"* %21, i64 0, i32 0, i32 1
  %155 = bitcast %"class.std::__1::vector.43"* %22 to i8*
  %156 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %22, i64 0, i32 0, i32 0
  %157 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %22, i64 0, i32 0, i32 1
  %158 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %22, i64 0, i32 0, i32 2, i32 0, i32 0
  %159 = bitcast %"class.std::__1::vector.43"* %22 to i8**
  %160 = bitcast i32** %157 to i64*
  %161 = bitcast %"class.std::__1::vector.43"* %23 to i8*
  %162 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %23, i64 0, i32 0, i32 0
  %163 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %23, i64 0, i32 0, i32 1
  %164 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %23, i64 0, i32 0, i32 2, i32 0, i32 0
  %165 = bitcast %"class.std::__1::vector.43"* %23 to i8**
  %166 = bitcast i32** %163 to i64*
  %167 = fadd float %1, 1.000000e+02
  %168 = fdiv float 8.000000e+02, %167
  %169 = icmp ne i64 %69, 0
  %170 = bitcast %"class.std::__1::vector.90"* %20 to i64*
  %171 = bitcast %struct.CostInfo** %151 to i64*
  %172 = bitcast %"class.std::__1::vector.90"* %21 to i64*
  %173 = bitcast %struct.CostInfo** %154 to i64*
  %174 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 3, i32 0, i32 0
  %175 = bitcast i64** %148 to i64*
  %176 = bitcast %"class.std::__1::vector.83"* %19 to i64*
  %177 = bitcast i32** %145 to i64*
  %178 = bitcast %"class.std::__1::vector.43"* %18 to i64*
  %179 = bitcast %"class.std::__1::vector.43"* %17 to i64*
  %180 = bitcast i32** %142 to i64*
  %181 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 2, i32 0, i32 0
  %182 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 4, i32 0, i32 0
  %183 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 6, i32 0, i32 0
  %184 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %6, i64 0, i32 0, i32 1
  %185 = bitcast %"struct.jxl::PropertyDecisionNode"** %184 to i64*
  %186 = bitcast %"class.std::__1::vector"* %6 to i64*
  %187 = bitcast %"struct.std::__1::array"* %24 to i8*
  %188 = bitcast %"struct.std::__1::array"* %24 to i64*
  %189 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %24, i64 0, i32 0, i64 1
  %190 = bitcast %"struct.std::__1::array.5"* %189 to i64*
  %191 = bitcast [2 x %"struct.std::__1::array.5"]* %25 to i8*
  %192 = bitcast %struct.NodeInfo** %29 to i64*
  %193 = bitcast %"class.std::__1::vector.76"* %8 to i64*
  %194 = bitcast %struct.NodeInfo** %30 to i64*
  %195 = bitcast [2 x %"struct.std::__1::array.5"]* %26 to i8*
  br label %196

196:                                              ; preds = %7, %2135
  %197 = phi %struct.NodeInfo* [ %71, %7 ], [ %2136, %2135 ]
  %198 = getelementptr inbounds %struct.NodeInfo, %struct.NodeInfo* %197, i64 -1
  %199 = getelementptr inbounds %struct.NodeInfo, %struct.NodeInfo* %198, i64 0, i32 0
  %200 = load i64, i64* %199, align 8
  %201 = getelementptr inbounds %struct.NodeInfo, %struct.NodeInfo* %197, i64 -1, i32 1
  %202 = load i64, i64* %201, align 8
  %203 = getelementptr inbounds %struct.NodeInfo, %struct.NodeInfo* %197, i64 -1, i32 2
  %204 = load i64, i64* %203, align 8
  %205 = getelementptr inbounds %struct.NodeInfo, %struct.NodeInfo* %197, i64 -1, i32 3
  %206 = load i64, i64* %205, align 8
  %207 = getelementptr inbounds %struct.NodeInfo, %struct.NodeInfo* %197, i64 -1, i32 4
  %208 = bitcast %"struct.std::__1::array"* %207 to i64*
  %209 = load i64, i64* %208, align 8
  %210 = getelementptr inbounds %struct.NodeInfo, %struct.NodeInfo* %197, i64 -1, i32 4, i32 0, i64 1
  %211 = bitcast %"struct.std::__1::array.5"* %210 to i64*
  %212 = load i64, i64* %211, align 8
  store %struct.NodeInfo* %198, %struct.NodeInfo** %29, align 8
  %213 = icmp eq i64 %204, %202
  br i1 %213, label %2135, label %214

214:                                              ; preds = %196
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %72) #24
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %72, i8* align 8 bitcast ({ i64, i32, [4 x i8], i64, float, float, i32, i32 }* @__const._ZN3jxl8N_SCALAR13FindBestSplitERNS_11TreeSamplesEfRKNSt3__16vectorINS_21ModularMultiplierInfoENS3_9allocatorIS5_EEEENS3_5arrayINSB_IjLm2EEELm2EEEfPNS4_INS_20PropertyDecisionNodeENS6_ISE_EEEE.forced_split to i8*), i64 16, i1 false)
  store i64 0, i64* %73, align 8
  store i32 0, i32* %74, align 8
  store i64 0, i64* %75, align 8
  store float 0x47EFFFFFE0000000, float* %76, align 8
  store float 0x47EFFFFFE0000000, float* %77, align 4
  store i32 0, i32* %78, align 8
  store i32 0, i32* %79, align 4
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %80) #24
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %80, i8* align 8 bitcast ({ i64, i32, [4 x i8], i64, float, float, i32, i32 }* @__const._ZN3jxl8N_SCALAR13FindBestSplitERNS_11TreeSamplesEfRKNSt3__16vectorINS_21ModularMultiplierInfoENS3_9allocatorIS5_EEEENS3_5arrayINSB_IjLm2EEELm2EEEfPNS4_INS_20PropertyDecisionNodeENS6_ISE_EEEE.forced_split to i8*), i64 16, i1 false)
  store i64 0, i64* %81, align 8
  store i32 0, i32* %82, align 8
  store i64 0, i64* %83, align 8
  store float 0x47EFFFFFE0000000, float* %84, align 8
  store float 0x47EFFFFFE0000000, float* %85, align 4
  store i32 0, i32* %86, align 8
  store i32 0, i32* %87, align 4
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %88) #24
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %88, i8* align 8 bitcast ({ i64, i32, [4 x i8], i64, float, float, i32, i32 }* @__const._ZN3jxl8N_SCALAR13FindBestSplitERNS_11TreeSamplesEfRKNSt3__16vectorINS_21ModularMultiplierInfoENS3_9allocatorIS5_EEEENS3_5arrayINSB_IjLm2EEELm2EEEfPNS4_INS_20PropertyDecisionNodeENS6_ISE_EEEE.forced_split to i8*), i64 16, i1 false)
  store i64 0, i64* %89, align 8
  store i32 0, i32* %90, align 8
  store i64 0, i64* %91, align 8
  store float 0x47EFFFFFE0000000, float* %92, align 8
  store float 0x47EFFFFFE0000000, float* %93, align 4
  store i32 0, i32* %94, align 8
  store i32 0, i32* %95, align 4
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %96) #24
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %96, i8* align 8 bitcast ({ i64, i32, [4 x i8], i64, float, float, i32, i32 }* @__const._ZN3jxl8N_SCALAR13FindBestSplitERNS_11TreeSamplesEfRKNSt3__16vectorINS_21ModularMultiplierInfoENS3_9allocatorIS5_EEEENS3_5arrayINSB_IjLm2EEELm2EEEfPNS4_INS_20PropertyDecisionNodeENS6_ISE_EEEE.forced_split to i8*), i64 16, i1 false)
  store i64 0, i64* %97, align 8
  store i32 0, i32* %98, align 8
  store i64 0, i64* %99, align 8
  store float 0x47EFFFFFE0000000, float* %100, align 8
  store float 0x47EFFFFFE0000000, float* %101, align 4
  store i32 0, i32* %102, align 8
  store i32 0, i32* %103, align 4
  br i1 %104, label %247, label %215

215:                                              ; preds = %214
  %216 = icmp ugt i64 %204, %202
  %217 = load %"class.std::__1::vector.8"*, %"class.std::__1::vector.8"** %105, align 8
  %218 = sub i64 %204, %202
  %219 = xor i64 %202, -1
  %220 = add i64 %204, %219
  %221 = and i64 %218, 3
  %222 = icmp eq i64 %221, 0
  %223 = icmp ult i64 %220, 3
  br label %224

224:                                              ; preds = %215, %305
  %225 = phi i64 [ 0, %215 ], [ %307, %305 ]
  %226 = phi i64 [ 0, %215 ], [ %306, %305 ]
  br i1 %216, label %227, label %305

227:                                              ; preds = %224
  %228 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %217, i64 %225, i32 0, i32 0
  %229 = load %"struct.jxl::TreeSamples::ResidualToken"*, %"struct.jxl::TreeSamples::ResidualToken"** %228, align 8
  br i1 %222, label %243, label %230

230:                                              ; preds = %227, %230
  %231 = phi i64 [ %240, %230 ], [ %202, %227 ]
  %232 = phi i64 [ %239, %230 ], [ %226, %227 ]
  %233 = phi i64 [ %241, %230 ], [ %221, %227 ]
  %234 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %229, i64 %231, i32 0
  %235 = load i8, i8* %234, align 1
  %236 = zext i8 %235 to i64
  %237 = add nuw nsw i64 %236, 1
  %238 = icmp ugt i64 %232, %237
  %239 = select i1 %238, i64 %232, i64 %237
  %240 = add nuw i64 %231, 1
  %241 = add i64 %233, -1
  %242 = icmp eq i64 %241, 0
  br i1 %242, label %243, label %230, !llvm.loop !23

243:                                              ; preds = %230, %227
  %244 = phi i64 [ undef, %227 ], [ %239, %230 ]
  %245 = phi i64 [ %202, %227 ], [ %240, %230 ]
  %246 = phi i64 [ %226, %227 ], [ %239, %230 ]
  br i1 %223, label %305, label %309

247:                                              ; preds = %305, %214
  %248 = phi i64 [ 0, %214 ], [ %306, %305 ]
  %249 = add i64 %248, 3
  %250 = and i64 %249, -4
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %106) #24
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %106, i8 0, i64 24, i1 false) #24
  %251 = icmp eq i64 %250, 0
  br i1 %251, label %269, label %252

252:                                              ; preds = %247
  %253 = icmp ugt i64 %250, 4611686018427387903
  br i1 %253, label %254, label %256

254:                                              ; preds = %252
  %255 = bitcast %"class.std::__1::vector.43"* %13 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %255) #28
  unreachable

256:                                              ; preds = %252
  %257 = shl i64 %250, 2
  %258 = call i8* @_Znwm(i64 %257) #29
  %259 = bitcast i8* %258 to i32*
  store i8* %258, i8** %110, align 8
  %260 = getelementptr inbounds i32, i32* %259, i64 %250
  store i32* %260, i32** %109, align 8
  %261 = ptrtoint i8* %258 to i64
  %262 = add nsw i64 %250, -1
  %263 = getelementptr i32, i32* %259, i64 %262
  %264 = ptrtoint i32* %263 to i64
  %265 = sub i64 4, %261
  %266 = add i64 %265, %264
  %267 = and i64 %266, -4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %258, i8 0, i64 %267, i1 false) #24
  %268 = ptrtoint i32* %260 to i64
  store i64 %268, i64* %111, align 8
  br label %269

269:                                              ; preds = %247, %256
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %112) #24
  %270 = mul i64 %250, %68
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %112, i8 0, i64 24, i1 false) #24
  %271 = icmp eq i64 %270, 0
  br i1 %271, label %289, label %272

272:                                              ; preds = %269
  %273 = icmp ugt i64 %270, 4611686018427387903
  br i1 %273, label %274, label %276

274:                                              ; preds = %272
  %275 = bitcast %"class.std::__1::vector.43"* %14 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %275) #28
  unreachable

276:                                              ; preds = %272
  %277 = shl i64 %270, 2
  %278 = call i8* @_Znwm(i64 %277) #29
  %279 = bitcast i8* %278 to i32*
  store i8* %278, i8** %116, align 8
  %280 = getelementptr inbounds i32, i32* %279, i64 %270
  store i32* %280, i32** %115, align 8
  %281 = ptrtoint i8* %278 to i64
  %282 = add nsw i64 %270, -1
  %283 = getelementptr i32, i32* %279, i64 %282
  %284 = ptrtoint i32* %283 to i64
  %285 = sub i64 4, %281
  %286 = add i64 %285, %284
  %287 = and i64 %286, -4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %278, i8 0, i64 %287, i1 false) #24
  %288 = ptrtoint i32* %280 to i64
  store i64 %288, i64* %117, align 8
  br label %289

289:                                              ; preds = %269, %276
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %118) #24
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %118, i8 0, i64 24, i1 false) #24
  br i1 %104, label %345, label %290

290:                                              ; preds = %289
  br i1 %122, label %291, label %293

291:                                              ; preds = %290
  %292 = bitcast %"class.std::__1::vector.55"* %15 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %292) #28
  unreachable

293:                                              ; preds = %290
  %294 = call i8* @_Znwm(i64 %67) #29
  %295 = bitcast i8* %294 to i32*
  store i8* %294, i8** %123, align 8
  %296 = getelementptr inbounds i32, i32* %295, i64 %68
  store i32* %296, i32** %121, align 8
  %297 = ptrtoint i8* %294 to i64
  %298 = getelementptr i32, i32* %295, i64 %125
  %299 = ptrtoint i32* %298 to i64
  %300 = sub i64 4, %297
  %301 = add i64 %300, %299
  %302 = and i64 %301, -4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %294, i8 0, i64 %302, i1 false) #24
  %303 = ptrtoint i32* %296 to i64
  store i64 %303, i64* %124, align 8
  %304 = icmp ugt i64 %204, %202
  br label %341

305:                                              ; preds = %243, %309, %224
  %306 = phi i64 [ %226, %224 ], [ %244, %243 ], [ %338, %309 ]
  %307 = add nuw i64 %225, 1
  %308 = icmp ult i64 %307, %68
  br i1 %308, label %224, label %247

309:                                              ; preds = %243, %309
  %310 = phi i64 [ %339, %309 ], [ %245, %243 ]
  %311 = phi i64 [ %338, %309 ], [ %246, %243 ]
  %312 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %229, i64 %310, i32 0
  %313 = load i8, i8* %312, align 1
  %314 = zext i8 %313 to i64
  %315 = add nuw nsw i64 %314, 1
  %316 = icmp ugt i64 %311, %315
  %317 = select i1 %316, i64 %311, i64 %315
  %318 = add nuw i64 %310, 1
  %319 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %229, i64 %318, i32 0
  %320 = load i8, i8* %319, align 1
  %321 = zext i8 %320 to i64
  %322 = add nuw nsw i64 %321, 1
  %323 = icmp ugt i64 %317, %322
  %324 = select i1 %323, i64 %317, i64 %322
  %325 = add nuw i64 %310, 2
  %326 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %229, i64 %325, i32 0
  %327 = load i8, i8* %326, align 1
  %328 = zext i8 %327 to i64
  %329 = add nuw nsw i64 %328, 1
  %330 = icmp ugt i64 %324, %329
  %331 = select i1 %330, i64 %324, i64 %329
  %332 = add nuw i64 %310, 3
  %333 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %229, i64 %332, i32 0
  %334 = load i8, i8* %333, align 1
  %335 = zext i8 %334 to i64
  %336 = add nuw nsw i64 %335, 1
  %337 = icmp ugt i64 %331, %336
  %338 = select i1 %337, i64 %331, i64 %336
  %339 = add nuw i64 %310, 4
  %340 = icmp eq i64 %339, %204
  br i1 %340, label %305, label %309

341:                                              ; preds = %293, %668
  %342 = phi i64 [ 0, %293 ], [ %669, %668 ]
  br i1 %304, label %343, label %668

343:                                              ; preds = %341
  %344 = mul i64 %342, %250
  br label %671

345:                                              ; preds = %668, %289
  %346 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %127, align 8
  %347 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %346, i64 %200, i32 5
  %348 = load i32, i32* %347, align 8
  %349 = load i32*, i32** %128, align 8
  %350 = load i32*, i32** %66, align 8
  %351 = icmp eq i32* %349, %350
  br i1 %351, label %359, label %352

352:                                              ; preds = %345, %356
  %353 = phi i32* [ %357, %356 ], [ %349, %345 ]
  %354 = load i32, i32* %353, align 4
  %355 = icmp eq i32 %354, %348
  br i1 %355, label %359, label %356

356:                                              ; preds = %352
  %357 = getelementptr inbounds i32, i32* %353, i64 1
  %358 = icmp eq i32* %357, %350
  br i1 %358, label %359, label %352

359:                                              ; preds = %352, %356, %345
  %360 = phi i32* [ %349, %345 ], [ %350, %356 ], [ %353, %352 ]
  %361 = ptrtoint i32* %360 to i64
  %362 = ptrtoint i32* %349 to i64
  %363 = sub i64 %361, %362
  %364 = ashr exact i64 %363, 2
  %365 = load i32*, i32** %113, align 8
  %366 = mul i64 %364, %250
  %367 = getelementptr inbounds i32, i32* %365, i64 %366
  %368 = load i32*, i32** %107, align 8
  %369 = getelementptr inbounds i32, i32* %367, i64 %250
  br i1 %251, label %583, label %370

370:                                              ; preds = %359
  %371 = lshr i64 %249, 2
  %372 = shl i64 %371, 4
  %373 = add i64 %372, -4
  %374 = lshr exact i64 %373, 2
  %375 = add nuw nsw i64 %374, 1
  %376 = icmp ult i64 %375, 8
  br i1 %376, label %463, label %377

377:                                              ; preds = %370
  %378 = and i64 %375, 9223372036854775800
  %379 = getelementptr i32, i32* %367, i64 %378
  %380 = add nsw i64 %378, -8
  %381 = lshr exact i64 %380, 3
  %382 = add nuw nsw i64 %381, 1
  %383 = and i64 %382, 3
  %384 = icmp ult i64 %380, 24
  br i1 %384, label %430, label %385

385:                                              ; preds = %377
  %386 = sub nsw i64 %382, %383
  br label %387

387:                                              ; preds = %387, %385
  %388 = phi i64 [ 0, %385 ], [ %427, %387 ]
  %389 = phi <4 x i32> [ zeroinitializer, %385 ], [ %425, %387 ]
  %390 = phi <4 x i32> [ zeroinitializer, %385 ], [ %426, %387 ]
  %391 = phi i64 [ %386, %385 ], [ %428, %387 ]
  %392 = getelementptr i32, i32* %367, i64 %388
  %393 = bitcast i32* %392 to <4 x i32>*
  %394 = load <4 x i32>, <4 x i32>* %393, align 4
  %395 = getelementptr i32, i32* %392, i64 4
  %396 = bitcast i32* %395 to <4 x i32>*
  %397 = load <4 x i32>, <4 x i32>* %396, align 4
  %398 = add nsw <4 x i32> %394, %389
  %399 = add nsw <4 x i32> %397, %390
  %400 = or i64 %388, 8
  %401 = getelementptr i32, i32* %367, i64 %400
  %402 = bitcast i32* %401 to <4 x i32>*
  %403 = load <4 x i32>, <4 x i32>* %402, align 4
  %404 = getelementptr i32, i32* %401, i64 4
  %405 = bitcast i32* %404 to <4 x i32>*
  %406 = load <4 x i32>, <4 x i32>* %405, align 4
  %407 = add nsw <4 x i32> %403, %398
  %408 = add nsw <4 x i32> %406, %399
  %409 = or i64 %388, 16
  %410 = getelementptr i32, i32* %367, i64 %409
  %411 = bitcast i32* %410 to <4 x i32>*
  %412 = load <4 x i32>, <4 x i32>* %411, align 4
  %413 = getelementptr i32, i32* %410, i64 4
  %414 = bitcast i32* %413 to <4 x i32>*
  %415 = load <4 x i32>, <4 x i32>* %414, align 4
  %416 = add nsw <4 x i32> %412, %407
  %417 = add nsw <4 x i32> %415, %408
  %418 = or i64 %388, 24
  %419 = getelementptr i32, i32* %367, i64 %418
  %420 = bitcast i32* %419 to <4 x i32>*
  %421 = load <4 x i32>, <4 x i32>* %420, align 4
  %422 = getelementptr i32, i32* %419, i64 4
  %423 = bitcast i32* %422 to <4 x i32>*
  %424 = load <4 x i32>, <4 x i32>* %423, align 4
  %425 = add nsw <4 x i32> %421, %416
  %426 = add nsw <4 x i32> %424, %417
  %427 = add i64 %388, 32
  %428 = add i64 %391, -4
  %429 = icmp eq i64 %428, 0
  br i1 %429, label %430, label %387, !llvm.loop !24

430:                                              ; preds = %387, %377
  %431 = phi <4 x i32> [ undef, %377 ], [ %425, %387 ]
  %432 = phi <4 x i32> [ undef, %377 ], [ %426, %387 ]
  %433 = phi i64 [ 0, %377 ], [ %427, %387 ]
  %434 = phi <4 x i32> [ zeroinitializer, %377 ], [ %425, %387 ]
  %435 = phi <4 x i32> [ zeroinitializer, %377 ], [ %426, %387 ]
  %436 = icmp eq i64 %383, 0
  br i1 %436, label %453, label %437

437:                                              ; preds = %430, %437
  %438 = phi i64 [ %450, %437 ], [ %433, %430 ]
  %439 = phi <4 x i32> [ %448, %437 ], [ %434, %430 ]
  %440 = phi <4 x i32> [ %449, %437 ], [ %435, %430 ]
  %441 = phi i64 [ %451, %437 ], [ %383, %430 ]
  %442 = getelementptr i32, i32* %367, i64 %438
  %443 = bitcast i32* %442 to <4 x i32>*
  %444 = load <4 x i32>, <4 x i32>* %443, align 4
  %445 = getelementptr i32, i32* %442, i64 4
  %446 = bitcast i32* %445 to <4 x i32>*
  %447 = load <4 x i32>, <4 x i32>* %446, align 4
  %448 = add nsw <4 x i32> %444, %439
  %449 = add nsw <4 x i32> %447, %440
  %450 = add i64 %438, 8
  %451 = add i64 %441, -1
  %452 = icmp eq i64 %451, 0
  br i1 %452, label %453, label %437, !llvm.loop !25

453:                                              ; preds = %437, %430
  %454 = phi <4 x i32> [ %431, %430 ], [ %448, %437 ]
  %455 = phi <4 x i32> [ %432, %430 ], [ %449, %437 ]
  %456 = add <4 x i32> %455, %454
  %457 = shufflevector <4 x i32> %456, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %458 = add <4 x i32> %456, %457
  %459 = shufflevector <4 x i32> %458, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %460 = add <4 x i32> %458, %459
  %461 = extractelement <4 x i32> %460, i32 0
  %462 = icmp eq i64 %375, %378
  br i1 %462, label %473, label %463

463:                                              ; preds = %453, %370
  %464 = phi i32 [ 0, %370 ], [ %461, %453 ]
  %465 = phi i32* [ %367, %370 ], [ %379, %453 ]
  br label %466

466:                                              ; preds = %463, %466
  %467 = phi i32 [ %470, %466 ], [ %464, %463 ]
  %468 = phi i32* [ %471, %466 ], [ %465, %463 ]
  %469 = load i32, i32* %468, align 4
  %470 = add nsw i32 %469, %467
  %471 = getelementptr inbounds i32, i32* %468, i64 1
  %472 = icmp eq i32* %471, %369
  br i1 %472, label %473, label %466, !llvm.loop !26

473:                                              ; preds = %466, %453
  %474 = phi i32 [ %461, %453 ], [ %470, %466 ]
  %475 = add i32 %474, 4095
  %476 = ashr i32 %475, 12
  %477 = insertelement <4 x i32> undef, i32 %476, i32 0
  %478 = shufflevector <4 x i32> %477, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %592

479:                                              ; preds = %592
  %480 = getelementptr inbounds i32, i32* %368, i64 %250
  %481 = lshr i64 %249, 2
  %482 = shl i64 %481, 4
  %483 = add i64 %482, -4
  %484 = lshr exact i64 %483, 2
  %485 = add nuw nsw i64 %484, 1
  %486 = icmp ult i64 %485, 8
  br i1 %486, label %573, label %487

487:                                              ; preds = %479
  %488 = and i64 %485, 9223372036854775800
  %489 = getelementptr i32, i32* %368, i64 %488
  %490 = add nsw i64 %488, -8
  %491 = lshr exact i64 %490, 3
  %492 = add nuw nsw i64 %491, 1
  %493 = and i64 %492, 3
  %494 = icmp ult i64 %490, 24
  br i1 %494, label %540, label %495

495:                                              ; preds = %487
  %496 = sub nsw i64 %492, %493
  br label %497

497:                                              ; preds = %497, %495
  %498 = phi i64 [ 0, %495 ], [ %537, %497 ]
  %499 = phi <4 x i32> [ zeroinitializer, %495 ], [ %535, %497 ]
  %500 = phi <4 x i32> [ zeroinitializer, %495 ], [ %536, %497 ]
  %501 = phi i64 [ %496, %495 ], [ %538, %497 ]
  %502 = getelementptr i32, i32* %368, i64 %498
  %503 = bitcast i32* %502 to <4 x i32>*
  %504 = load <4 x i32>, <4 x i32>* %503, align 4
  %505 = getelementptr i32, i32* %502, i64 4
  %506 = bitcast i32* %505 to <4 x i32>*
  %507 = load <4 x i32>, <4 x i32>* %506, align 4
  %508 = add nsw <4 x i32> %504, %499
  %509 = add nsw <4 x i32> %507, %500
  %510 = or i64 %498, 8
  %511 = getelementptr i32, i32* %368, i64 %510
  %512 = bitcast i32* %511 to <4 x i32>*
  %513 = load <4 x i32>, <4 x i32>* %512, align 4
  %514 = getelementptr i32, i32* %511, i64 4
  %515 = bitcast i32* %514 to <4 x i32>*
  %516 = load <4 x i32>, <4 x i32>* %515, align 4
  %517 = add nsw <4 x i32> %513, %508
  %518 = add nsw <4 x i32> %516, %509
  %519 = or i64 %498, 16
  %520 = getelementptr i32, i32* %368, i64 %519
  %521 = bitcast i32* %520 to <4 x i32>*
  %522 = load <4 x i32>, <4 x i32>* %521, align 4
  %523 = getelementptr i32, i32* %520, i64 4
  %524 = bitcast i32* %523 to <4 x i32>*
  %525 = load <4 x i32>, <4 x i32>* %524, align 4
  %526 = add nsw <4 x i32> %522, %517
  %527 = add nsw <4 x i32> %525, %518
  %528 = or i64 %498, 24
  %529 = getelementptr i32, i32* %368, i64 %528
  %530 = bitcast i32* %529 to <4 x i32>*
  %531 = load <4 x i32>, <4 x i32>* %530, align 4
  %532 = getelementptr i32, i32* %529, i64 4
  %533 = bitcast i32* %532 to <4 x i32>*
  %534 = load <4 x i32>, <4 x i32>* %533, align 4
  %535 = add nsw <4 x i32> %531, %526
  %536 = add nsw <4 x i32> %534, %527
  %537 = add i64 %498, 32
  %538 = add i64 %501, -4
  %539 = icmp eq i64 %538, 0
  br i1 %539, label %540, label %497, !llvm.loop !27

540:                                              ; preds = %497, %487
  %541 = phi <4 x i32> [ undef, %487 ], [ %535, %497 ]
  %542 = phi <4 x i32> [ undef, %487 ], [ %536, %497 ]
  %543 = phi i64 [ 0, %487 ], [ %537, %497 ]
  %544 = phi <4 x i32> [ zeroinitializer, %487 ], [ %535, %497 ]
  %545 = phi <4 x i32> [ zeroinitializer, %487 ], [ %536, %497 ]
  %546 = icmp eq i64 %493, 0
  br i1 %546, label %563, label %547

547:                                              ; preds = %540, %547
  %548 = phi i64 [ %560, %547 ], [ %543, %540 ]
  %549 = phi <4 x i32> [ %558, %547 ], [ %544, %540 ]
  %550 = phi <4 x i32> [ %559, %547 ], [ %545, %540 ]
  %551 = phi i64 [ %561, %547 ], [ %493, %540 ]
  %552 = getelementptr i32, i32* %368, i64 %548
  %553 = bitcast i32* %552 to <4 x i32>*
  %554 = load <4 x i32>, <4 x i32>* %553, align 4
  %555 = getelementptr i32, i32* %552, i64 4
  %556 = bitcast i32* %555 to <4 x i32>*
  %557 = load <4 x i32>, <4 x i32>* %556, align 4
  %558 = add nsw <4 x i32> %554, %549
  %559 = add nsw <4 x i32> %557, %550
  %560 = add i64 %548, 8
  %561 = add i64 %551, -1
  %562 = icmp eq i64 %561, 0
  br i1 %562, label %563, label %547, !llvm.loop !28

563:                                              ; preds = %547, %540
  %564 = phi <4 x i32> [ %541, %540 ], [ %558, %547 ]
  %565 = phi <4 x i32> [ %542, %540 ], [ %559, %547 ]
  %566 = add <4 x i32> %565, %564
  %567 = shufflevector <4 x i32> %566, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %568 = add <4 x i32> %566, %567
  %569 = shufflevector <4 x i32> %568, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %570 = add <4 x i32> %568, %569
  %571 = extractelement <4 x i32> %570, i32 0
  %572 = icmp eq i64 %485, %488
  br i1 %572, label %583, label %573

573:                                              ; preds = %563, %479
  %574 = phi i32 [ 0, %479 ], [ %571, %563 ]
  %575 = phi i32* [ %368, %479 ], [ %489, %563 ]
  br label %576

576:                                              ; preds = %573, %576
  %577 = phi i32 [ %580, %576 ], [ %574, %573 ]
  %578 = phi i32* [ %581, %576 ], [ %575, %573 ]
  %579 = load i32, i32* %578, align 4
  %580 = add nsw i32 %579, %577
  %581 = getelementptr inbounds i32, i32* %578, i64 1
  %582 = icmp eq i32* %581, %480
  br i1 %582, label %583, label %576, !llvm.loop !29

583:                                              ; preds = %576, %563, %359
  %584 = phi i32 [ 0, %359 ], [ %571, %563 ], [ %580, %576 ]
  %585 = sext i32 %584 to i64
  %586 = uitofp i64 %585 to float
  %587 = fdiv float 1.000000e+00, %586
  %588 = insertelement <4 x float> undef, float %587, i32 0
  %589 = shufflevector <4 x float> %588, <4 x float> undef, <4 x i32> zeroinitializer
  %590 = insertelement <4 x i32> undef, i32 %584, i32 0
  %591 = shufflevector <4 x i32> %590, <4 x i32> undef, <4 x i32> zeroinitializer
  br i1 %251, label %643, label %605

592:                                              ; preds = %473, %592
  %593 = phi i64 [ %603, %592 ], [ 0, %473 ]
  %594 = getelementptr inbounds i32, i32* %367, i64 %593
  %595 = bitcast i32* %594 to <4 x i32>*
  %596 = load <4 x i32>, <4 x i32>* %595, align 1, !alias.scope !30
  %597 = icmp eq <4 x i32> %596, zeroinitializer
  %598 = icmp sgt <4 x i32> %478, %596
  %599 = select <4 x i1> %598, <4 x i32> %478, <4 x i32> %596
  %600 = select <4 x i1> %597, <4 x i32> zeroinitializer, <4 x i32> %599
  %601 = getelementptr inbounds i32, i32* %368, i64 %593
  %602 = bitcast i32* %601 to <4 x i32>*
  store <4 x i32> %600, <4 x i32>* %602, align 1, !alias.scope !33
  %603 = add nuw i64 %593, 4
  %604 = icmp ult i64 %603, %250
  br i1 %604, label %592, label %479

605:                                              ; preds = %583, %605
  %606 = phi i64 [ %641, %605 ], [ 0, %583 ]
  %607 = phi <4 x float> [ %640, %605 ], [ zeroinitializer, %583 ]
  %608 = getelementptr inbounds i32, i32* %367, i64 %606
  %609 = bitcast i32* %608 to <4 x i32>*
  %610 = load <4 x i32>, <4 x i32>* %609, align 1, !alias.scope !36
  %611 = sitofp <4 x i32> %610 to <4 x float>
  %612 = getelementptr inbounds i32, i32* %368, i64 %606
  %613 = bitcast i32* %612 to <4 x i32>*
  %614 = load <4 x i32>, <4 x i32>* %613, align 1, !alias.scope !39
  %615 = sitofp <4 x i32> %614 to <4 x float>
  %616 = fmul <4 x float> %589, %615
  %617 = icmp eq <4 x i32> %614, %591
  %618 = bitcast <4 x float> %616 to <4 x i32>
  %619 = add <4 x i32> %618, <i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811>
  %620 = ashr <4 x i32> %619, <i32 23, i32 23, i32 23, i32 23>
  %621 = and <4 x i32> %619, <i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608>
  %622 = sub <4 x i32> %618, %621
  %623 = bitcast <4 x i32> %622 to <4 x float>
  %624 = sitofp <4 x i32> %620 to <4 x float>
  %625 = fadd <4 x float> %623, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  fence acq_rel
  %626 = fmul <4 x float> %625, <float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000>
  %627 = fadd <4 x float> %626, <float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000>
  %628 = fmul <4 x float> %625, <float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000>
  %629 = fadd <4 x float> %628, <float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000>
  fence acq_rel
  %630 = fmul <4 x float> %625, %627
  %631 = fadd <4 x float> %630, <float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000>
  %632 = fmul <4 x float> %625, %629
  %633 = fadd <4 x float> %632, <float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000>
  fence acq_rel
  %634 = fdiv <4 x float> %631, %633
  %635 = fadd <4 x float> %634, %624
  %636 = fcmp oeq <4 x float> %611, zeroinitializer
  %637 = select <4 x i1> %617, <4 x float> zeroinitializer, <4 x float> %635
  %638 = fmul <4 x float> %637, %611
  %639 = select <4 x i1> %636, <4 x float> zeroinitializer, <4 x float> %638
  %640 = fsub <4 x float> %607, %639
  %641 = add nuw i64 %606, 4
  %642 = icmp ult i64 %641, %250
  br i1 %642, label %605, label %643

643:                                              ; preds = %605, %583
  %644 = phi <4 x float> [ zeroinitializer, %583 ], [ %640, %605 ]
  %645 = shufflevector <4 x float> %644, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %646 = fadd <4 x float> %644, %645
  %647 = shufflevector <4 x float> %646, <4 x float> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %648 = fadd <4 x float> %646, %647
  %649 = extractelement <4 x float> %648, i32 0
  %650 = load i32*, i32** %119, align 8
  %651 = getelementptr inbounds i32, i32* %650, i64 %364
  %652 = load i32, i32* %651, align 4
  %653 = uitofp i32 %652 to float
  %654 = fadd float %649, %653
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %129) #24
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %129, i8* align 8 bitcast ({ i64, i32, [4 x i8], i64, float, float, i32, i32 }* @__const._ZN3jxl8N_SCALAR13FindBestSplitERNS_11TreeSamplesEfRKNSt3__16vectorINS_21ModularMultiplierInfoENS3_9allocatorIS5_EEEENS3_5arrayINSB_IjLm2EEELm2EEEfPNS4_INS_20PropertyDecisionNodeENS6_ISE_EEEE.forced_split to i8*), i64 16, i1 false)
  store i64 0, i64* %130, align 8
  store i32 0, i32* %131, align 8
  store i64 0, i64* %132, align 8
  store float 0x47EFFFFFE0000000, float* %133, align 8
  store float 0x47EFFFFFE0000000, float* %134, align 4
  store i32 0, i32* %135, align 8
  store i32 0, i32* %136, align 4
  %655 = load i64, i64* %138, align 8
  %656 = load i64, i64* %139, align 8
  %657 = icmp eq i64 %655, %656
  %658 = inttoptr i64 %656 to %"struct.jxl::ModularMultiplierInfo"*
  br i1 %657, label %844, label %659

659:                                              ; preds = %643
  %660 = lshr i64 %209, 32
  %661 = trunc i64 %660 to i32
  %662 = trunc i64 %209 to i32
  %663 = lshr i64 %212, 32
  %664 = trunc i64 %663 to i32
  %665 = trunc i64 %212 to i32
  %666 = sub i64 %655, %656
  %667 = sdiv exact i64 %666, 20
  br label %705

668:                                              ; preds = %671, %341
  %669 = add nuw i64 %342, 1
  %670 = icmp ult i64 %669, %68
  br i1 %670, label %341, label %345

671:                                              ; preds = %671, %343
  %672 = phi i64 [ %202, %343 ], [ %703, %671 ]
  %673 = load i16*, i16** %126, align 8
  %674 = getelementptr inbounds i16, i16* %673, i64 %672
  %675 = load i16, i16* %674, align 2
  %676 = load %"class.std::__1::vector.8"*, %"class.std::__1::vector.8"** %105, align 8
  %677 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %676, i64 %342, i32 0, i32 0
  %678 = load %"struct.jxl::TreeSamples::ResidualToken"*, %"struct.jxl::TreeSamples::ResidualToken"** %677, align 8
  %679 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %678, i64 %672, i32 0
  %680 = load i8, i8* %679, align 1
  %681 = zext i8 %680 to i64
  %682 = add i64 %344, %681
  %683 = load i32*, i32** %113, align 8
  %684 = getelementptr inbounds i32, i32* %683, i64 %682
  %685 = load i32, i32* %684, align 4
  %686 = zext i16 %675 to i32
  %687 = add i32 %685, %686
  store i32 %687, i32* %684, align 4
  %688 = load %"class.std::__1::vector.8"*, %"class.std::__1::vector.8"** %105, align 8
  %689 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %688, i64 %342, i32 0, i32 0
  %690 = load %"struct.jxl::TreeSamples::ResidualToken"*, %"struct.jxl::TreeSamples::ResidualToken"** %689, align 8
  %691 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %690, i64 %672, i32 1
  %692 = load i8, i8* %691, align 1
  %693 = zext i8 %692 to i32
  %694 = load i16*, i16** %126, align 8
  %695 = getelementptr inbounds i16, i16* %694, i64 %672
  %696 = load i16, i16* %695, align 2
  %697 = zext i16 %696 to i32
  %698 = mul nuw nsw i32 %697, %693
  %699 = load i32*, i32** %119, align 8
  %700 = getelementptr inbounds i32, i32* %699, i64 %342
  %701 = load i32, i32* %700, align 4
  %702 = add i32 %701, %698
  store i32 %702, i32* %700, align 4
  %703 = add nuw i64 %672, 1
  %704 = icmp eq i64 %703, %204
  br i1 %704, label %668, label %671

705:                                              ; preds = %659, %836
  %706 = phi i64 [ 0, %659 ], [ %837, %836 ]
  %707 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %658, i64 %706
  %708 = bitcast %"struct.jxl::ModularMultiplierInfo"* %707 to i64*
  %709 = load i64, i64* %708, align 4
  %710 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %658, i64 %706, i32 0, i32 0, i64 1
  %711 = bitcast %"struct.std::__1::array.5"* %710 to i64*
  %712 = load i64, i64* %711, align 4
  %713 = trunc i64 %709 to i32
  %714 = icmp ult i32 %713, %661
  %715 = lshr i64 %709, 32
  %716 = trunc i64 %715 to i32
  %717 = trunc i64 %712 to i32
  %718 = lshr i64 %712, 32
  %719 = trunc i64 %718 to i32
  %720 = icmp ugt i32 %716, %662
  %721 = and i1 %714, %720
  br i1 %721, label %722, label %836

722:                                              ; preds = %705
  %723 = icmp ugt i32 %713, %662
  br i1 %723, label %730, label %724

724:                                              ; preds = %722
  %725 = icmp ult i32 %716, %661
  %726 = add i32 %716, -1
  %727 = select i1 %725, i32 %726, i32 -1431655766
  %728 = select i1 %725, i64 0, i64 2863311530
  %729 = zext i1 %725 to i8
  br label %732

730:                                              ; preds = %722
  %731 = add i32 %713, -1
  br label %732

732:                                              ; preds = %724, %730
  %733 = phi i32 [ %731, %730 ], [ %727, %724 ]
  %734 = phi i64 [ 0, %730 ], [ %728, %724 ]
  %735 = phi i8 [ 1, %730 ], [ %729, %724 ]
  %736 = icmp ult i32 %717, %664
  %737 = icmp ugt i32 %719, %665
  %738 = and i1 %736, %737
  br i1 %738, label %739, label %836

739:                                              ; preds = %732
  %740 = trunc i64 %712 to i32
  %741 = trunc i64 %718 to i32
  %742 = icmp ugt i32 %740, %665
  br i1 %742, label %747, label %743

743:                                              ; preds = %739
  %744 = icmp ult i32 %741, %664
  br i1 %744, label %745, label %749

745:                                              ; preds = %743
  %746 = add i32 %741, -1
  br label %751

747:                                              ; preds = %739
  %748 = add i32 %740, -1
  br label %751

749:                                              ; preds = %743
  %750 = icmp eq i8 %735, 0
  br i1 %750, label %839, label %751

751:                                              ; preds = %745, %747, %749
  %752 = phi i32 [ %733, %749 ], [ %746, %745 ], [ %748, %747 ]
  %753 = phi i64 [ %734, %749 ], [ 1, %745 ], [ 1, %747 ]
  %754 = icmp sgt i32 %752, -511
  %755 = select i1 %754, i32 %752, i32 -511
  %756 = icmp slt i32 %755, 511
  %757 = select i1 %756, i32 %755, i32 511
  %758 = add nsw i32 %757, 511
  %759 = and i64 %753, 4294967295
  %760 = load %"class.std::__1::vector.29"*, %"class.std::__1::vector.29"** %183, align 8
  %761 = sext i32 %758 to i64
  %762 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %760, i64 %759, i32 0, i32 0
  %763 = load i8*, i8** %762, align 8
  %764 = getelementptr inbounds i8, i8* %763, i64 %761
  %765 = load i8, i8* %764, align 1
  %766 = zext i8 %765 to i32
  store i32 %766, i32* %131, align 8
  store i64 %759, i64* %130, align 8
  %767 = fmul float %654, 5.000000e-01
  %768 = fsub float %767, %1
  store float %768, float* %134, align 4
  store float %768, float* %133, align 8
  %769 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %127, align 8
  %770 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %769, i64 %200, i32 5
  %771 = load i32, i32* %770, align 8
  store i32 %771, i32* %136, align 4
  store i32 %771, i32* %135, align 8
  store i64 %202, i64* %132, align 8
  %772 = load i32*, i32** %182, align 8
  %773 = getelementptr inbounds i32, i32* %772, i64 %759
  %774 = load i32, i32* %773, align 4
  %775 = trunc i64 %753 to i32
  %776 = icmp eq i32 %774, %775
  br i1 %776, label %777, label %805

777:                                              ; preds = %751
  %778 = icmp ugt i64 %204, %202
  br i1 %778, label %779, label %1862

779:                                              ; preds = %777
  %780 = load %"class.std::__1::vector.29"*, %"class.std::__1::vector.29"** %181, align 8
  %781 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %780, i64 %759, i32 0, i32 0
  %782 = load i8*, i8** %781, align 8
  %783 = sub i64 %204, %202
  %784 = xor i64 %202, -1
  %785 = add i64 %204, %784
  %786 = and i64 %783, 3
  %787 = icmp eq i64 %786, 0
  br i1 %787, label %800, label %788

788:                                              ; preds = %779, %788
  %789 = phi i64 [ %796, %788 ], [ %202, %779 ]
  %790 = phi i64 [ %797, %788 ], [ %202, %779 ]
  %791 = phi i64 [ %798, %788 ], [ %786, %779 ]
  %792 = getelementptr inbounds i8, i8* %782, i64 %790
  %793 = load i8, i8* %792, align 1
  %794 = icmp ule i8 %793, %765
  %795 = zext i1 %794 to i64
  %796 = add i64 %789, %795
  %797 = add nuw i64 %790, 1
  %798 = add i64 %791, -1
  %799 = icmp eq i64 %798, 0
  br i1 %799, label %800, label %788, !llvm.loop !42

800:                                              ; preds = %788, %779
  %801 = phi i64 [ undef, %779 ], [ %796, %788 ]
  %802 = phi i64 [ %202, %779 ], [ %796, %788 ]
  %803 = phi i64 [ %202, %779 ], [ %797, %788 ]
  %804 = icmp ult i64 %785, 3
  br i1 %804, label %1860, label %808

805:                                              ; preds = %751
  %806 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.1, i64 0, i64 0), i32 299, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.3, i64 0, i64 0)) #24
  %807 = call zeroext i1 @_ZN3jxl5AbortEv() #28
  unreachable

808:                                              ; preds = %800, %808
  %809 = phi i64 [ %833, %808 ], [ %802, %800 ]
  %810 = phi i64 [ %834, %808 ], [ %803, %800 ]
  %811 = getelementptr inbounds i8, i8* %782, i64 %810
  %812 = load i8, i8* %811, align 1
  %813 = icmp ule i8 %812, %765
  %814 = zext i1 %813 to i64
  %815 = add i64 %809, %814
  %816 = add nuw i64 %810, 1
  %817 = getelementptr inbounds i8, i8* %782, i64 %816
  %818 = load i8, i8* %817, align 1
  %819 = icmp ule i8 %818, %765
  %820 = zext i1 %819 to i64
  %821 = add i64 %815, %820
  %822 = add nuw i64 %810, 2
  %823 = getelementptr inbounds i8, i8* %782, i64 %822
  %824 = load i8, i8* %823, align 1
  %825 = icmp ule i8 %824, %765
  %826 = zext i1 %825 to i64
  %827 = add i64 %821, %826
  %828 = add nuw i64 %810, 3
  %829 = getelementptr inbounds i8, i8* %782, i64 %828
  %830 = load i8, i8* %829, align 1
  %831 = icmp ule i8 %830, %765
  %832 = zext i1 %831 to i64
  %833 = add i64 %827, %832
  %834 = add nuw i64 %810, 4
  %835 = icmp eq i64 %834, %204
  br i1 %835, label %1860, label %808

836:                                              ; preds = %705, %732
  %837 = add nuw i64 %706, 1
  %838 = icmp ult i64 %837, %667
  br i1 %838, label %705, label %844

839:                                              ; preds = %749
  %840 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %658, i64 %706, i32 1
  %841 = load i32, i32* %840, align 4
  %842 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %127, align 8
  %843 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %842, i64 %200, i32 8
  store i32 %841, i32* %843, align 8
  br label %844

844:                                              ; preds = %836, %643, %839
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %140) #24
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %140, i8 0, i64 24, i1 false) #24
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %143) #24
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %143, i8 0, i64 24, i1 false) #24
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %146) #24
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %146, i8 0, i64 24, i1 false) #24
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %149) #24
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %149, i8 0, i64 24, i1 false) #24
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %152) #24
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %152, i8 0, i64 24, i1 false) #24
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %155) #24
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %155, i8 0, i64 24, i1 false) #24
  br i1 %251, label %872, label %845

845:                                              ; preds = %844
  %846 = icmp ugt i64 %250, 4611686018427387903
  br i1 %846, label %847, label %849

847:                                              ; preds = %845
  %848 = bitcast %"class.std::__1::vector.43"* %22 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %848) #28
  unreachable

849:                                              ; preds = %845
  %850 = shl i64 %250, 2
  %851 = call i8* @_Znwm(i64 %850) #29
  %852 = bitcast i8* %851 to i32*
  store i8* %851, i8** %159, align 8
  %853 = getelementptr inbounds i32, i32* %852, i64 %250
  store i32* %853, i32** %158, align 8
  %854 = ptrtoint i8* %851 to i64
  %855 = add nsw i64 %250, -1
  %856 = getelementptr i32, i32* %852, i64 %855
  %857 = ptrtoint i32* %856 to i64
  %858 = sub i64 4, %854
  %859 = add i64 %858, %857
  %860 = and i64 %859, -4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %851, i8 0, i64 %860, i1 false) #24
  %861 = ptrtoint i32* %853 to i64
  store i64 %861, i64* %160, align 8
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %161) #24
  %862 = call i8* @_Znwm(i64 %850) #29
  %863 = bitcast i8* %862 to i32*
  store i8* %862, i8** %165, align 8
  %864 = getelementptr inbounds i32, i32* %863, i64 %250
  store i32* %864, i32** %164, align 8
  %865 = ptrtoint i8* %862 to i64
  %866 = getelementptr i32, i32* %863, i64 %855
  %867 = ptrtoint i32* %866 to i64
  %868 = sub i64 4, %865
  %869 = add i64 %868, %867
  %870 = and i64 %869, -4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %862, i8 0, i64 %870, i1 false) #24
  %871 = ptrtoint i32* %864 to i64
  store i64 %871, i64* %166, align 8
  br label %873

872:                                              ; preds = %844
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %161) #24
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %161, i8 0, i64 24, i1 false) #24
  br label %873

873:                                              ; preds = %872, %849
  %874 = fcmp ogt float %654, %1
  %875 = and i1 %874, %169
  br i1 %875, label %876, label %923

876:                                              ; preds = %873
  %877 = icmp ugt i64 %204, %202
  %878 = shl i64 %250, 2
  %879 = lshr i64 %249, 2
  %880 = shl i64 %879, 4
  %881 = add i64 %880, -4
  %882 = lshr exact i64 %881, 2
  %883 = add nuw nsw i64 %882, 1
  %884 = add nuw nsw i64 %882, 1
  %885 = add nuw nsw i64 %882, 1
  %886 = lshr i64 %249, 2
  %887 = shl i64 %886, 4
  %888 = add i64 %887, -4
  %889 = lshr exact i64 %888, 2
  %890 = add nuw nsw i64 %889, 1
  %891 = and i64 %890, 9223372036854775800
  %892 = add nsw i64 %891, -8
  %893 = lshr exact i64 %892, 3
  %894 = add nuw nsw i64 %893, 1
  %895 = icmp ult i64 %890, 8
  %896 = and i64 %890, 9223372036854775800
  %897 = and i64 %894, 3
  %898 = icmp ult i64 %892, 24
  %899 = sub nsw i64 %894, %897
  %900 = icmp eq i64 %897, 0
  %901 = icmp eq i64 %890, %896
  %902 = icmp ult i64 %885, 8
  %903 = and i64 %885, 9223372036854775800
  %904 = and i64 %894, 3
  %905 = icmp ult i64 %892, 24
  %906 = sub nsw i64 %894, %904
  %907 = icmp eq i64 %904, 0
  %908 = icmp eq i64 %885, %903
  %909 = icmp ult i64 %884, 8
  %910 = and i64 %884, 9223372036854775800
  %911 = and i64 %894, 3
  %912 = icmp ult i64 %892, 24
  %913 = sub nsw i64 %894, %911
  %914 = icmp eq i64 %911, 0
  %915 = icmp eq i64 %884, %910
  %916 = icmp ult i64 %883, 8
  %917 = and i64 %883, 9223372036854775800
  %918 = and i64 %894, 3
  %919 = icmp ult i64 %892, 24
  %920 = sub nsw i64 %894, %918
  %921 = icmp eq i64 %918, 0
  %922 = icmp eq i64 %883, %917
  br label %929

923:                                              ; preds = %1756, %873
  %924 = load float, float* %100, align 8
  %925 = load float, float* %101, align 4
  %926 = fadd float %924, %925
  %927 = fadd float %926, %1
  %928 = fcmp olt float %927, %654
  br i1 %928, label %1783, label %1790

929:                                              ; preds = %1759, %876
  %930 = phi i64 [ 0, %876 ], [ %1763, %1759 ]
  %931 = phi i64 [ 0, %876 ], [ %1762, %1759 ]
  %932 = phi i64 [ 0, %876 ], [ %1761, %1759 ]
  %933 = phi i64 [ 0, %876 ], [ %1760, %1759 ]
  %934 = phi i64 [ 0, %876 ], [ %1757, %1759 ]
  store i64 %933, i64* %171, align 8
  store i64 %932, i64* %173, align 8
  %935 = load %"class.std::__1::vector.43"*, %"class.std::__1::vector.43"** %174, align 8
  %936 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %935, i64 %934
  %937 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %935, i64 %934, i32 0, i32 1
  %938 = bitcast i32** %937 to i64*
  %939 = load i64, i64* %938, align 8
  %940 = bitcast %"class.std::__1::vector.43"* %936 to i64*
  %941 = load i64, i64* %940, align 8
  %942 = sub i64 %939, %941
  %943 = ashr exact i64 %942, 2
  %944 = add nsw i64 %943, 1
  %945 = sub i64 %931, %930
  %946 = ashr exact i64 %945, 3
  %947 = icmp ult i64 %946, %944
  br i1 %947, label %948, label %977

948:                                              ; preds = %929
  %949 = mul i64 %944, %250
  %950 = load i64, i64* %177, align 8
  %951 = load i64, i64* %178, align 8
  %952 = sub i64 %950, %951
  %953 = ashr exact i64 %952, 2
  %954 = icmp ugt i64 %949, %953
  %955 = inttoptr i64 %951 to i32*
  br i1 %954, label %956, label %962

956:                                              ; preds = %948
  %957 = sub i64 %949, %953
  call void @_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEm(%"class.std::__1::vector.43"* nonnull %18, i64 %957) #24
  %958 = load i64, i64* %175, align 8
  %959 = load i64, i64* %176, align 8
  %960 = sub i64 %958, %959
  %961 = ashr exact i64 %960, 3
  br label %966

962:                                              ; preds = %948
  %963 = icmp ult i64 %949, %953
  br i1 %963, label %964, label %966

964:                                              ; preds = %962
  %965 = getelementptr inbounds i32, i32* %955, i64 %949
  store i32* %965, i32** %145, align 8
  br label %966

966:                                              ; preds = %956, %962, %964
  %967 = phi i64 [ %961, %956 ], [ %946, %962 ], [ %946, %964 ]
  %968 = phi i64 [ %959, %956 ], [ %930, %962 ], [ %930, %964 ]
  %969 = icmp ugt i64 %944, %967
  %970 = inttoptr i64 %968 to i64*
  br i1 %969, label %971, label %973

971:                                              ; preds = %966
  %972 = sub nsw i64 %944, %967
  call void @_ZNSt3__16vectorImNS_9allocatorImEEE8__appendEm(%"class.std::__1::vector.83"* nonnull %19, i64 %972) #24
  br label %977

973:                                              ; preds = %966
  %974 = icmp ult i64 %944, %967
  br i1 %974, label %975, label %977

975:                                              ; preds = %973
  %976 = getelementptr inbounds i64, i64* %970, i64 %944
  store i64* %976, i64** %148, align 8
  br label %977

977:                                              ; preds = %975, %973, %971, %929
  %978 = load i64, i64* %179, align 8
  store i64 %978, i64* %180, align 8
  %979 = icmp eq i64 %944, 0
  br i1 %979, label %981, label %980

980:                                              ; preds = %977
  call void @_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEm(%"class.std::__1::vector.43"* nonnull %17, i64 %944) #24
  br label %981

981:                                              ; preds = %977, %980
  br i1 %877, label %988, label %982

982:                                              ; preds = %988, %981
  %983 = phi i64 [ 0, %981 ], [ %1003, %988 ]
  %984 = phi i64 [ %944, %981 ], [ %1005, %988 ]
  %985 = sub i64 %983, %984
  call fastcc void @_ZNSt3__16vectorIZN3jxl6N_SSE413FindBestSplitERNS1_11TreeSamplesEfRKNS0_INS1_21ModularMultiplierInfoENS_9allocatorIS5_EEEENS_5arrayINSB_IjLm2EEELm2EEEfPNS0_INS1_20PropertyDecisionNodeENS6_ISE_EEEEE8CostInfoNS6_ISI_EEE6resizeEm(%"class.std::__1::vector.90"* nonnull %20, i64 %985)
  call fastcc void @_ZNSt3__16vectorIZN3jxl6N_SSE413FindBestSplitERNS1_11TreeSamplesEfRKNS0_INS1_21ModularMultiplierInfoENS_9allocatorIS5_EEEENS_5arrayINSB_IjLm2EEELm2EEEfPNS0_INS1_20PropertyDecisionNodeENS6_ISE_EEEEE8CostInfoNS6_ISI_EEE6resizeEm(%"class.std::__1::vector.90"* nonnull %21, i64 %985)
  br i1 %104, label %1008, label %986

986:                                              ; preds = %982
  %987 = icmp ugt i64 %983, %984
  br label %1016

988:                                              ; preds = %981, %988
  %989 = phi i64 [ %1006, %988 ], [ %202, %981 ]
  %990 = phi i64 [ %1005, %988 ], [ %944, %981 ]
  %991 = phi i64 [ %1003, %988 ], [ 0, %981 ]
  %992 = load %"class.std::__1::vector.29"*, %"class.std::__1::vector.29"** %181, align 8
  %993 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %992, i64 %934, i32 0, i32 0
  %994 = load i8*, i8** %993, align 8
  %995 = getelementptr inbounds i8, i8* %994, i64 %989
  %996 = load i8, i8* %995, align 1
  %997 = zext i8 %996 to i64
  %998 = load i32*, i32** %141, align 8
  %999 = getelementptr inbounds i32, i32* %998, i64 %997
  %1000 = load i32, i32* %999, align 4
  %1001 = add nsw i32 %1000, 1
  store i32 %1001, i32* %999, align 4
  %1002 = icmp ult i64 %991, %997
  %1003 = select i1 %1002, i64 %997, i64 %991
  %1004 = icmp ugt i64 %990, %997
  %1005 = select i1 %1004, i64 %997, i64 %990
  %1006 = add nuw i64 %989, 1
  %1007 = icmp eq i64 %1006, %204
  br i1 %1007, label %982, label %988

1008:                                             ; preds = %1063, %982
  %1009 = icmp ugt i64 %983, %984
  br i1 %1009, label %1010, label %1675

1010:                                             ; preds = %1008
  %1011 = shl i64 1, %934
  %1012 = and i64 %1011, %206
  %1013 = icmp ne i64 %1012, 0
  %1014 = icmp ult i64 %934, 2
  %1015 = load i32*, i32** %141, align 8
  br label %1680

1016:                                             ; preds = %986, %1063
  %1017 = phi i64 [ 0, %986 ], [ %1064, %1063 ]
  br i1 %877, label %1025, label %1018

1018:                                             ; preds = %1025, %1016
  %1019 = load i8*, i8** %159, align 8
  %1020 = load i32*, i32** %113, align 8
  %1021 = mul i64 %1017, %250
  %1022 = getelementptr inbounds i32, i32* %1020, i64 %1021
  %1023 = bitcast i32* %1022 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1019, i8* align 4 %1023, i64 %878, i1 false)
  %1024 = load i8*, i8** %165, align 8
  call void @llvm.memset.p0i8.i64(i8* align 4 %1024, i8 0, i64 %878, i1 false)
  br i1 %987, label %1066, label %1063

1025:                                             ; preds = %1016, %1025
  %1026 = phi i64 [ %1061, %1025 ], [ %202, %1016 ]
  %1027 = load %"class.std::__1::vector.29"*, %"class.std::__1::vector.29"** %181, align 8
  %1028 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %1027, i64 %934, i32 0, i32 0
  %1029 = load i8*, i8** %1028, align 8
  %1030 = getelementptr inbounds i8, i8* %1029, i64 %1026
  %1031 = load i8, i8* %1030, align 1
  %1032 = zext i8 %1031 to i64
  %1033 = load i16*, i16** %126, align 8
  %1034 = getelementptr inbounds i16, i16* %1033, i64 %1026
  %1035 = load i16, i16* %1034, align 2
  %1036 = zext i16 %1035 to i64
  %1037 = load %"class.std::__1::vector.8"*, %"class.std::__1::vector.8"** %105, align 8
  %1038 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %1037, i64 %1017, i32 0, i32 0
  %1039 = load %"struct.jxl::TreeSamples::ResidualToken"*, %"struct.jxl::TreeSamples::ResidualToken"** %1038, align 8
  %1040 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %1039, i64 %1026, i32 0
  %1041 = load i8, i8* %1040, align 1
  %1042 = zext i8 %1041 to i64
  %1043 = mul i64 %250, %1032
  %1044 = add i64 %1043, %1042
  %1045 = load i32*, i32** %144, align 8
  %1046 = getelementptr inbounds i32, i32* %1045, i64 %1044
  %1047 = load i32, i32* %1046, align 4
  %1048 = zext i16 %1035 to i32
  %1049 = add i32 %1047, %1048
  store i32 %1049, i32* %1046, align 4
  %1050 = load %"class.std::__1::vector.8"*, %"class.std::__1::vector.8"** %105, align 8
  %1051 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %1050, i64 %1017, i32 0, i32 0
  %1052 = load %"struct.jxl::TreeSamples::ResidualToken"*, %"struct.jxl::TreeSamples::ResidualToken"** %1051, align 8
  %1053 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %1052, i64 %1026, i32 1
  %1054 = load i8, i8* %1053, align 1
  %1055 = zext i8 %1054 to i64
  %1056 = mul nuw nsw i64 %1055, %1036
  %1057 = load i64*, i64** %147, align 8
  %1058 = getelementptr inbounds i64, i64* %1057, i64 %1032
  %1059 = load i64, i64* %1058, align 8
  %1060 = add i64 %1059, %1056
  store i64 %1060, i64* %1058, align 8
  %1061 = add nuw i64 %1026, 1
  %1062 = icmp eq i64 %1061, %204
  br i1 %1062, label %1018, label %1025

1063:                                             ; preds = %1671, %1018
  %1064 = add nuw i64 %1017, 1
  %1065 = icmp ult i64 %1064, %68
  br i1 %1065, label %1016, label %1008

1066:                                             ; preds = %1018, %1671
  %1067 = phi i64 [ %1673, %1671 ], [ %984, %1018 ]
  %1068 = phi i64 [ %1672, %1671 ], [ 0, %1018 ]
  %1069 = load i32*, i32** %141, align 8
  %1070 = getelementptr inbounds i32, i32* %1069, i64 %1067
  %1071 = load i32, i32* %1070, align 4
  %1072 = icmp eq i32 %1071, 0
  br i1 %1072, label %1671, label %1073

1073:                                             ; preds = %1066
  %1074 = load i64*, i64** %147, align 8
  %1075 = getelementptr inbounds i64, i64* %1074, i64 %1067
  %1076 = load i64, i64* %1075, align 8
  %1077 = add i64 %1076, %1068
  store i64 0, i64* %1075, align 8
  br i1 %251, label %1078, label %1081

1078:                                             ; preds = %1073
  %1079 = load i32*, i32** %156, align 8
  %1080 = load i32*, i32** %107, align 8
  br label %1269

1081:                                             ; preds = %1073
  %1082 = mul i64 %1067, %250
  %1083 = load i32*, i32** %162, align 8
  br label %1607

1084:                                             ; preds = %1607
  %1085 = load i32*, i32** %156, align 8
  %1086 = load i32*, i32** %107, align 8
  %1087 = getelementptr inbounds i32, i32* %1085, i64 %250
  br i1 %251, label %1269, label %1088

1088:                                             ; preds = %1084
  br i1 %895, label %1165, label %1089

1089:                                             ; preds = %1088
  %1090 = getelementptr i32, i32* %1085, i64 %896
  br i1 %898, label %1134, label %1091

1091:                                             ; preds = %1089, %1091
  %1092 = phi i64 [ %1131, %1091 ], [ 0, %1089 ]
  %1093 = phi <4 x i32> [ %1129, %1091 ], [ zeroinitializer, %1089 ]
  %1094 = phi <4 x i32> [ %1130, %1091 ], [ zeroinitializer, %1089 ]
  %1095 = phi i64 [ %1132, %1091 ], [ %899, %1089 ]
  %1096 = getelementptr i32, i32* %1085, i64 %1092
  %1097 = bitcast i32* %1096 to <4 x i32>*
  %1098 = load <4 x i32>, <4 x i32>* %1097, align 4
  %1099 = getelementptr i32, i32* %1096, i64 4
  %1100 = bitcast i32* %1099 to <4 x i32>*
  %1101 = load <4 x i32>, <4 x i32>* %1100, align 4
  %1102 = add nsw <4 x i32> %1098, %1093
  %1103 = add nsw <4 x i32> %1101, %1094
  %1104 = or i64 %1092, 8
  %1105 = getelementptr i32, i32* %1085, i64 %1104
  %1106 = bitcast i32* %1105 to <4 x i32>*
  %1107 = load <4 x i32>, <4 x i32>* %1106, align 4
  %1108 = getelementptr i32, i32* %1105, i64 4
  %1109 = bitcast i32* %1108 to <4 x i32>*
  %1110 = load <4 x i32>, <4 x i32>* %1109, align 4
  %1111 = add nsw <4 x i32> %1107, %1102
  %1112 = add nsw <4 x i32> %1110, %1103
  %1113 = or i64 %1092, 16
  %1114 = getelementptr i32, i32* %1085, i64 %1113
  %1115 = bitcast i32* %1114 to <4 x i32>*
  %1116 = load <4 x i32>, <4 x i32>* %1115, align 4
  %1117 = getelementptr i32, i32* %1114, i64 4
  %1118 = bitcast i32* %1117 to <4 x i32>*
  %1119 = load <4 x i32>, <4 x i32>* %1118, align 4
  %1120 = add nsw <4 x i32> %1116, %1111
  %1121 = add nsw <4 x i32> %1119, %1112
  %1122 = or i64 %1092, 24
  %1123 = getelementptr i32, i32* %1085, i64 %1122
  %1124 = bitcast i32* %1123 to <4 x i32>*
  %1125 = load <4 x i32>, <4 x i32>* %1124, align 4
  %1126 = getelementptr i32, i32* %1123, i64 4
  %1127 = bitcast i32* %1126 to <4 x i32>*
  %1128 = load <4 x i32>, <4 x i32>* %1127, align 4
  %1129 = add nsw <4 x i32> %1125, %1120
  %1130 = add nsw <4 x i32> %1128, %1121
  %1131 = add i64 %1092, 32
  %1132 = add i64 %1095, -4
  %1133 = icmp eq i64 %1132, 0
  br i1 %1133, label %1134, label %1091, !llvm.loop !43

1134:                                             ; preds = %1091, %1089
  %1135 = phi <4 x i32> [ undef, %1089 ], [ %1129, %1091 ]
  %1136 = phi <4 x i32> [ undef, %1089 ], [ %1130, %1091 ]
  %1137 = phi i64 [ 0, %1089 ], [ %1131, %1091 ]
  %1138 = phi <4 x i32> [ zeroinitializer, %1089 ], [ %1129, %1091 ]
  %1139 = phi <4 x i32> [ zeroinitializer, %1089 ], [ %1130, %1091 ]
  br i1 %900, label %1156, label %1140

1140:                                             ; preds = %1134, %1140
  %1141 = phi i64 [ %1153, %1140 ], [ %1137, %1134 ]
  %1142 = phi <4 x i32> [ %1151, %1140 ], [ %1138, %1134 ]
  %1143 = phi <4 x i32> [ %1152, %1140 ], [ %1139, %1134 ]
  %1144 = phi i64 [ %1154, %1140 ], [ %897, %1134 ]
  %1145 = getelementptr i32, i32* %1085, i64 %1141
  %1146 = bitcast i32* %1145 to <4 x i32>*
  %1147 = load <4 x i32>, <4 x i32>* %1146, align 4
  %1148 = getelementptr i32, i32* %1145, i64 4
  %1149 = bitcast i32* %1148 to <4 x i32>*
  %1150 = load <4 x i32>, <4 x i32>* %1149, align 4
  %1151 = add nsw <4 x i32> %1147, %1142
  %1152 = add nsw <4 x i32> %1150, %1143
  %1153 = add i64 %1141, 8
  %1154 = add i64 %1144, -1
  %1155 = icmp eq i64 %1154, 0
  br i1 %1155, label %1156, label %1140, !llvm.loop !44

1156:                                             ; preds = %1140, %1134
  %1157 = phi <4 x i32> [ %1135, %1134 ], [ %1151, %1140 ]
  %1158 = phi <4 x i32> [ %1136, %1134 ], [ %1152, %1140 ]
  %1159 = add <4 x i32> %1158, %1157
  %1160 = shufflevector <4 x i32> %1159, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %1161 = add <4 x i32> %1159, %1160
  %1162 = shufflevector <4 x i32> %1161, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %1163 = add <4 x i32> %1161, %1162
  %1164 = extractelement <4 x i32> %1163, i32 0
  br i1 %901, label %1175, label %1165

1165:                                             ; preds = %1156, %1088
  %1166 = phi i32 [ 0, %1088 ], [ %1164, %1156 ]
  %1167 = phi i32* [ %1085, %1088 ], [ %1090, %1156 ]
  br label %1168

1168:                                             ; preds = %1165, %1168
  %1169 = phi i32 [ %1172, %1168 ], [ %1166, %1165 ]
  %1170 = phi i32* [ %1173, %1168 ], [ %1167, %1165 ]
  %1171 = load i32, i32* %1170, align 4
  %1172 = add nsw i32 %1171, %1169
  %1173 = getelementptr inbounds i32, i32* %1170, i64 1
  %1174 = icmp eq i32* %1173, %1087
  br i1 %1174, label %1175, label %1168, !llvm.loop !45

1175:                                             ; preds = %1168, %1156
  %1176 = phi i32 [ %1164, %1156 ], [ %1172, %1168 ]
  %1177 = add i32 %1176, 4095
  %1178 = ashr i32 %1177, 12
  %1179 = insertelement <4 x i32> undef, i32 %1178, i32 0
  %1180 = shufflevector <4 x i32> %1179, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %1280

1181:                                             ; preds = %1280
  %1182 = getelementptr inbounds i32, i32* %1086, i64 %250
  br i1 %902, label %1259, label %1183

1183:                                             ; preds = %1181
  %1184 = getelementptr i32, i32* %1086, i64 %903
  br i1 %905, label %1228, label %1185

1185:                                             ; preds = %1183, %1185
  %1186 = phi i64 [ %1225, %1185 ], [ 0, %1183 ]
  %1187 = phi <4 x i32> [ %1223, %1185 ], [ zeroinitializer, %1183 ]
  %1188 = phi <4 x i32> [ %1224, %1185 ], [ zeroinitializer, %1183 ]
  %1189 = phi i64 [ %1226, %1185 ], [ %906, %1183 ]
  %1190 = getelementptr i32, i32* %1086, i64 %1186
  %1191 = bitcast i32* %1190 to <4 x i32>*
  %1192 = load <4 x i32>, <4 x i32>* %1191, align 4
  %1193 = getelementptr i32, i32* %1190, i64 4
  %1194 = bitcast i32* %1193 to <4 x i32>*
  %1195 = load <4 x i32>, <4 x i32>* %1194, align 4
  %1196 = add nsw <4 x i32> %1192, %1187
  %1197 = add nsw <4 x i32> %1195, %1188
  %1198 = or i64 %1186, 8
  %1199 = getelementptr i32, i32* %1086, i64 %1198
  %1200 = bitcast i32* %1199 to <4 x i32>*
  %1201 = load <4 x i32>, <4 x i32>* %1200, align 4
  %1202 = getelementptr i32, i32* %1199, i64 4
  %1203 = bitcast i32* %1202 to <4 x i32>*
  %1204 = load <4 x i32>, <4 x i32>* %1203, align 4
  %1205 = add nsw <4 x i32> %1201, %1196
  %1206 = add nsw <4 x i32> %1204, %1197
  %1207 = or i64 %1186, 16
  %1208 = getelementptr i32, i32* %1086, i64 %1207
  %1209 = bitcast i32* %1208 to <4 x i32>*
  %1210 = load <4 x i32>, <4 x i32>* %1209, align 4
  %1211 = getelementptr i32, i32* %1208, i64 4
  %1212 = bitcast i32* %1211 to <4 x i32>*
  %1213 = load <4 x i32>, <4 x i32>* %1212, align 4
  %1214 = add nsw <4 x i32> %1210, %1205
  %1215 = add nsw <4 x i32> %1213, %1206
  %1216 = or i64 %1186, 24
  %1217 = getelementptr i32, i32* %1086, i64 %1216
  %1218 = bitcast i32* %1217 to <4 x i32>*
  %1219 = load <4 x i32>, <4 x i32>* %1218, align 4
  %1220 = getelementptr i32, i32* %1217, i64 4
  %1221 = bitcast i32* %1220 to <4 x i32>*
  %1222 = load <4 x i32>, <4 x i32>* %1221, align 4
  %1223 = add nsw <4 x i32> %1219, %1214
  %1224 = add nsw <4 x i32> %1222, %1215
  %1225 = add i64 %1186, 32
  %1226 = add i64 %1189, -4
  %1227 = icmp eq i64 %1226, 0
  br i1 %1227, label %1228, label %1185, !llvm.loop !46

1228:                                             ; preds = %1185, %1183
  %1229 = phi <4 x i32> [ undef, %1183 ], [ %1223, %1185 ]
  %1230 = phi <4 x i32> [ undef, %1183 ], [ %1224, %1185 ]
  %1231 = phi i64 [ 0, %1183 ], [ %1225, %1185 ]
  %1232 = phi <4 x i32> [ zeroinitializer, %1183 ], [ %1223, %1185 ]
  %1233 = phi <4 x i32> [ zeroinitializer, %1183 ], [ %1224, %1185 ]
  br i1 %907, label %1250, label %1234

1234:                                             ; preds = %1228, %1234
  %1235 = phi i64 [ %1247, %1234 ], [ %1231, %1228 ]
  %1236 = phi <4 x i32> [ %1245, %1234 ], [ %1232, %1228 ]
  %1237 = phi <4 x i32> [ %1246, %1234 ], [ %1233, %1228 ]
  %1238 = phi i64 [ %1248, %1234 ], [ %904, %1228 ]
  %1239 = getelementptr i32, i32* %1086, i64 %1235
  %1240 = bitcast i32* %1239 to <4 x i32>*
  %1241 = load <4 x i32>, <4 x i32>* %1240, align 4
  %1242 = getelementptr i32, i32* %1239, i64 4
  %1243 = bitcast i32* %1242 to <4 x i32>*
  %1244 = load <4 x i32>, <4 x i32>* %1243, align 4
  %1245 = add nsw <4 x i32> %1241, %1236
  %1246 = add nsw <4 x i32> %1244, %1237
  %1247 = add i64 %1235, 8
  %1248 = add i64 %1238, -1
  %1249 = icmp eq i64 %1248, 0
  br i1 %1249, label %1250, label %1234, !llvm.loop !47

1250:                                             ; preds = %1234, %1228
  %1251 = phi <4 x i32> [ %1229, %1228 ], [ %1245, %1234 ]
  %1252 = phi <4 x i32> [ %1230, %1228 ], [ %1246, %1234 ]
  %1253 = add <4 x i32> %1252, %1251
  %1254 = shufflevector <4 x i32> %1253, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %1255 = add <4 x i32> %1253, %1254
  %1256 = shufflevector <4 x i32> %1255, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %1257 = add <4 x i32> %1255, %1256
  %1258 = extractelement <4 x i32> %1257, i32 0
  br i1 %908, label %1269, label %1259

1259:                                             ; preds = %1250, %1181
  %1260 = phi i32 [ 0, %1181 ], [ %1258, %1250 ]
  %1261 = phi i32* [ %1086, %1181 ], [ %1184, %1250 ]
  br label %1262

1262:                                             ; preds = %1259, %1262
  %1263 = phi i32 [ %1266, %1262 ], [ %1260, %1259 ]
  %1264 = phi i32* [ %1267, %1262 ], [ %1261, %1259 ]
  %1265 = load i32, i32* %1264, align 4
  %1266 = add nsw i32 %1265, %1263
  %1267 = getelementptr inbounds i32, i32* %1264, i64 1
  %1268 = icmp eq i32* %1267, %1182
  br i1 %1268, label %1269, label %1262, !llvm.loop !48

1269:                                             ; preds = %1262, %1250, %1078, %1084
  %1270 = phi i32* [ %1086, %1084 ], [ %1080, %1078 ], [ %1086, %1250 ], [ %1086, %1262 ]
  %1271 = phi i32* [ %1085, %1084 ], [ %1079, %1078 ], [ %1085, %1250 ], [ %1085, %1262 ]
  %1272 = phi i32 [ 0, %1084 ], [ 0, %1078 ], [ %1258, %1250 ], [ %1266, %1262 ]
  %1273 = sext i32 %1272 to i64
  %1274 = uitofp i64 %1273 to float
  %1275 = fdiv float 1.000000e+00, %1274
  %1276 = insertelement <4 x float> undef, float %1275, i32 0
  %1277 = shufflevector <4 x float> %1276, <4 x float> undef, <4 x i32> zeroinitializer
  %1278 = insertelement <4 x i32> undef, i32 %1272, i32 0
  %1279 = shufflevector <4 x i32> %1278, <4 x i32> undef, <4 x i32> zeroinitializer
  br i1 %251, label %1331, label %1293

1280:                                             ; preds = %1175, %1280
  %1281 = phi i64 [ %1291, %1280 ], [ 0, %1175 ]
  %1282 = getelementptr inbounds i32, i32* %1085, i64 %1281
  %1283 = bitcast i32* %1282 to <4 x i32>*
  %1284 = load <4 x i32>, <4 x i32>* %1283, align 1, !alias.scope !49
  %1285 = icmp eq <4 x i32> %1284, zeroinitializer
  %1286 = icmp sgt <4 x i32> %1180, %1284
  %1287 = select <4 x i1> %1286, <4 x i32> %1180, <4 x i32> %1284
  %1288 = select <4 x i1> %1285, <4 x i32> zeroinitializer, <4 x i32> %1287
  %1289 = getelementptr inbounds i32, i32* %1086, i64 %1281
  %1290 = bitcast i32* %1289 to <4 x i32>*
  store <4 x i32> %1288, <4 x i32>* %1290, align 1, !alias.scope !52
  %1291 = add nuw i64 %1281, 4
  %1292 = icmp ult i64 %1291, %250
  br i1 %1292, label %1280, label %1181

1293:                                             ; preds = %1269, %1293
  %1294 = phi i64 [ %1329, %1293 ], [ 0, %1269 ]
  %1295 = phi <4 x float> [ %1328, %1293 ], [ zeroinitializer, %1269 ]
  %1296 = getelementptr inbounds i32, i32* %1271, i64 %1294
  %1297 = bitcast i32* %1296 to <4 x i32>*
  %1298 = load <4 x i32>, <4 x i32>* %1297, align 1, !alias.scope !55
  %1299 = sitofp <4 x i32> %1298 to <4 x float>
  %1300 = getelementptr inbounds i32, i32* %1270, i64 %1294
  %1301 = bitcast i32* %1300 to <4 x i32>*
  %1302 = load <4 x i32>, <4 x i32>* %1301, align 1, !alias.scope !58
  %1303 = sitofp <4 x i32> %1302 to <4 x float>
  %1304 = fmul <4 x float> %1277, %1303
  %1305 = icmp eq <4 x i32> %1302, %1279
  %1306 = bitcast <4 x float> %1304 to <4 x i32>
  %1307 = add <4 x i32> %1306, <i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811>
  %1308 = ashr <4 x i32> %1307, <i32 23, i32 23, i32 23, i32 23>
  %1309 = and <4 x i32> %1307, <i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608>
  %1310 = sub <4 x i32> %1306, %1309
  %1311 = bitcast <4 x i32> %1310 to <4 x float>
  %1312 = sitofp <4 x i32> %1308 to <4 x float>
  %1313 = fadd <4 x float> %1311, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  fence acq_rel
  %1314 = fmul <4 x float> %1313, <float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000>
  %1315 = fadd <4 x float> %1314, <float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000>
  %1316 = fmul <4 x float> %1313, <float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000>
  %1317 = fadd <4 x float> %1316, <float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000>
  fence acq_rel
  %1318 = fmul <4 x float> %1313, %1315
  %1319 = fadd <4 x float> %1318, <float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000>
  %1320 = fmul <4 x float> %1313, %1317
  %1321 = fadd <4 x float> %1320, <float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000>
  fence acq_rel
  %1322 = fdiv <4 x float> %1319, %1321
  %1323 = fadd <4 x float> %1322, %1312
  %1324 = fcmp oeq <4 x float> %1299, zeroinitializer
  %1325 = select <4 x i1> %1305, <4 x float> zeroinitializer, <4 x float> %1323
  %1326 = fmul <4 x float> %1325, %1299
  %1327 = select <4 x i1> %1324, <4 x float> zeroinitializer, <4 x float> %1326
  %1328 = fsub <4 x float> %1295, %1327
  %1329 = add nuw i64 %1294, 4
  %1330 = icmp ult i64 %1329, %250
  br i1 %1330, label %1293, label %1331

1331:                                             ; preds = %1293, %1269
  %1332 = phi <4 x float> [ zeroinitializer, %1269 ], [ %1328, %1293 ]
  %1333 = shufflevector <4 x float> %1332, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %1334 = fadd <4 x float> %1332, %1333
  %1335 = shufflevector <4 x float> %1334, <4 x float> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %1336 = fadd <4 x float> %1334, %1335
  %1337 = extractelement <4 x float> %1336, i32 0
  %1338 = load i32*, i32** %119, align 8
  %1339 = getelementptr inbounds i32, i32* %1338, i64 %1017
  %1340 = load i32, i32* %1339, align 4
  %1341 = uitofp i32 %1340 to float
  %1342 = fadd float %1337, %1341
  %1343 = uitofp i64 %1077 to float
  %1344 = fsub float %1342, %1343
  %1345 = load i32*, i32** %162, align 8
  %1346 = load i32*, i32** %107, align 8
  %1347 = getelementptr inbounds i32, i32* %1345, i64 %250
  br i1 %251, label %1529, label %1348

1348:                                             ; preds = %1331
  br i1 %909, label %1425, label %1349

1349:                                             ; preds = %1348
  %1350 = getelementptr i32, i32* %1345, i64 %910
  br i1 %912, label %1394, label %1351

1351:                                             ; preds = %1349, %1351
  %1352 = phi i64 [ %1391, %1351 ], [ 0, %1349 ]
  %1353 = phi <4 x i32> [ %1389, %1351 ], [ zeroinitializer, %1349 ]
  %1354 = phi <4 x i32> [ %1390, %1351 ], [ zeroinitializer, %1349 ]
  %1355 = phi i64 [ %1392, %1351 ], [ %913, %1349 ]
  %1356 = getelementptr i32, i32* %1345, i64 %1352
  %1357 = bitcast i32* %1356 to <4 x i32>*
  %1358 = load <4 x i32>, <4 x i32>* %1357, align 4
  %1359 = getelementptr i32, i32* %1356, i64 4
  %1360 = bitcast i32* %1359 to <4 x i32>*
  %1361 = load <4 x i32>, <4 x i32>* %1360, align 4
  %1362 = add nsw <4 x i32> %1358, %1353
  %1363 = add nsw <4 x i32> %1361, %1354
  %1364 = or i64 %1352, 8
  %1365 = getelementptr i32, i32* %1345, i64 %1364
  %1366 = bitcast i32* %1365 to <4 x i32>*
  %1367 = load <4 x i32>, <4 x i32>* %1366, align 4
  %1368 = getelementptr i32, i32* %1365, i64 4
  %1369 = bitcast i32* %1368 to <4 x i32>*
  %1370 = load <4 x i32>, <4 x i32>* %1369, align 4
  %1371 = add nsw <4 x i32> %1367, %1362
  %1372 = add nsw <4 x i32> %1370, %1363
  %1373 = or i64 %1352, 16
  %1374 = getelementptr i32, i32* %1345, i64 %1373
  %1375 = bitcast i32* %1374 to <4 x i32>*
  %1376 = load <4 x i32>, <4 x i32>* %1375, align 4
  %1377 = getelementptr i32, i32* %1374, i64 4
  %1378 = bitcast i32* %1377 to <4 x i32>*
  %1379 = load <4 x i32>, <4 x i32>* %1378, align 4
  %1380 = add nsw <4 x i32> %1376, %1371
  %1381 = add nsw <4 x i32> %1379, %1372
  %1382 = or i64 %1352, 24
  %1383 = getelementptr i32, i32* %1345, i64 %1382
  %1384 = bitcast i32* %1383 to <4 x i32>*
  %1385 = load <4 x i32>, <4 x i32>* %1384, align 4
  %1386 = getelementptr i32, i32* %1383, i64 4
  %1387 = bitcast i32* %1386 to <4 x i32>*
  %1388 = load <4 x i32>, <4 x i32>* %1387, align 4
  %1389 = add nsw <4 x i32> %1385, %1380
  %1390 = add nsw <4 x i32> %1388, %1381
  %1391 = add i64 %1352, 32
  %1392 = add i64 %1355, -4
  %1393 = icmp eq i64 %1392, 0
  br i1 %1393, label %1394, label %1351, !llvm.loop !61

1394:                                             ; preds = %1351, %1349
  %1395 = phi <4 x i32> [ undef, %1349 ], [ %1389, %1351 ]
  %1396 = phi <4 x i32> [ undef, %1349 ], [ %1390, %1351 ]
  %1397 = phi i64 [ 0, %1349 ], [ %1391, %1351 ]
  %1398 = phi <4 x i32> [ zeroinitializer, %1349 ], [ %1389, %1351 ]
  %1399 = phi <4 x i32> [ zeroinitializer, %1349 ], [ %1390, %1351 ]
  br i1 %914, label %1416, label %1400

1400:                                             ; preds = %1394, %1400
  %1401 = phi i64 [ %1413, %1400 ], [ %1397, %1394 ]
  %1402 = phi <4 x i32> [ %1411, %1400 ], [ %1398, %1394 ]
  %1403 = phi <4 x i32> [ %1412, %1400 ], [ %1399, %1394 ]
  %1404 = phi i64 [ %1414, %1400 ], [ %911, %1394 ]
  %1405 = getelementptr i32, i32* %1345, i64 %1401
  %1406 = bitcast i32* %1405 to <4 x i32>*
  %1407 = load <4 x i32>, <4 x i32>* %1406, align 4
  %1408 = getelementptr i32, i32* %1405, i64 4
  %1409 = bitcast i32* %1408 to <4 x i32>*
  %1410 = load <4 x i32>, <4 x i32>* %1409, align 4
  %1411 = add nsw <4 x i32> %1407, %1402
  %1412 = add nsw <4 x i32> %1410, %1403
  %1413 = add i64 %1401, 8
  %1414 = add i64 %1404, -1
  %1415 = icmp eq i64 %1414, 0
  br i1 %1415, label %1416, label %1400, !llvm.loop !62

1416:                                             ; preds = %1400, %1394
  %1417 = phi <4 x i32> [ %1395, %1394 ], [ %1411, %1400 ]
  %1418 = phi <4 x i32> [ %1396, %1394 ], [ %1412, %1400 ]
  %1419 = add <4 x i32> %1418, %1417
  %1420 = shufflevector <4 x i32> %1419, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %1421 = add <4 x i32> %1419, %1420
  %1422 = shufflevector <4 x i32> %1421, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %1423 = add <4 x i32> %1421, %1422
  %1424 = extractelement <4 x i32> %1423, i32 0
  br i1 %915, label %1435, label %1425

1425:                                             ; preds = %1416, %1348
  %1426 = phi i32 [ 0, %1348 ], [ %1424, %1416 ]
  %1427 = phi i32* [ %1345, %1348 ], [ %1350, %1416 ]
  br label %1428

1428:                                             ; preds = %1425, %1428
  %1429 = phi i32 [ %1432, %1428 ], [ %1426, %1425 ]
  %1430 = phi i32* [ %1433, %1428 ], [ %1427, %1425 ]
  %1431 = load i32, i32* %1430, align 4
  %1432 = add nsw i32 %1431, %1429
  %1433 = getelementptr inbounds i32, i32* %1430, i64 1
  %1434 = icmp eq i32* %1433, %1347
  br i1 %1434, label %1435, label %1428, !llvm.loop !63

1435:                                             ; preds = %1428, %1416
  %1436 = phi i32 [ %1424, %1416 ], [ %1432, %1428 ]
  %1437 = add i32 %1436, 4095
  %1438 = ashr i32 %1437, 12
  %1439 = insertelement <4 x i32> undef, i32 %1438, i32 0
  %1440 = shufflevector <4 x i32> %1439, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %1538

1441:                                             ; preds = %1538
  %1442 = getelementptr inbounds i32, i32* %1346, i64 %250
  br i1 %916, label %1519, label %1443

1443:                                             ; preds = %1441
  %1444 = getelementptr i32, i32* %1346, i64 %917
  br i1 %919, label %1488, label %1445

1445:                                             ; preds = %1443, %1445
  %1446 = phi i64 [ %1485, %1445 ], [ 0, %1443 ]
  %1447 = phi <4 x i32> [ %1483, %1445 ], [ zeroinitializer, %1443 ]
  %1448 = phi <4 x i32> [ %1484, %1445 ], [ zeroinitializer, %1443 ]
  %1449 = phi i64 [ %1486, %1445 ], [ %920, %1443 ]
  %1450 = getelementptr i32, i32* %1346, i64 %1446
  %1451 = bitcast i32* %1450 to <4 x i32>*
  %1452 = load <4 x i32>, <4 x i32>* %1451, align 4
  %1453 = getelementptr i32, i32* %1450, i64 4
  %1454 = bitcast i32* %1453 to <4 x i32>*
  %1455 = load <4 x i32>, <4 x i32>* %1454, align 4
  %1456 = add nsw <4 x i32> %1452, %1447
  %1457 = add nsw <4 x i32> %1455, %1448
  %1458 = or i64 %1446, 8
  %1459 = getelementptr i32, i32* %1346, i64 %1458
  %1460 = bitcast i32* %1459 to <4 x i32>*
  %1461 = load <4 x i32>, <4 x i32>* %1460, align 4
  %1462 = getelementptr i32, i32* %1459, i64 4
  %1463 = bitcast i32* %1462 to <4 x i32>*
  %1464 = load <4 x i32>, <4 x i32>* %1463, align 4
  %1465 = add nsw <4 x i32> %1461, %1456
  %1466 = add nsw <4 x i32> %1464, %1457
  %1467 = or i64 %1446, 16
  %1468 = getelementptr i32, i32* %1346, i64 %1467
  %1469 = bitcast i32* %1468 to <4 x i32>*
  %1470 = load <4 x i32>, <4 x i32>* %1469, align 4
  %1471 = getelementptr i32, i32* %1468, i64 4
  %1472 = bitcast i32* %1471 to <4 x i32>*
  %1473 = load <4 x i32>, <4 x i32>* %1472, align 4
  %1474 = add nsw <4 x i32> %1470, %1465
  %1475 = add nsw <4 x i32> %1473, %1466
  %1476 = or i64 %1446, 24
  %1477 = getelementptr i32, i32* %1346, i64 %1476
  %1478 = bitcast i32* %1477 to <4 x i32>*
  %1479 = load <4 x i32>, <4 x i32>* %1478, align 4
  %1480 = getelementptr i32, i32* %1477, i64 4
  %1481 = bitcast i32* %1480 to <4 x i32>*
  %1482 = load <4 x i32>, <4 x i32>* %1481, align 4
  %1483 = add nsw <4 x i32> %1479, %1474
  %1484 = add nsw <4 x i32> %1482, %1475
  %1485 = add i64 %1446, 32
  %1486 = add i64 %1449, -4
  %1487 = icmp eq i64 %1486, 0
  br i1 %1487, label %1488, label %1445, !llvm.loop !64

1488:                                             ; preds = %1445, %1443
  %1489 = phi <4 x i32> [ undef, %1443 ], [ %1483, %1445 ]
  %1490 = phi <4 x i32> [ undef, %1443 ], [ %1484, %1445 ]
  %1491 = phi i64 [ 0, %1443 ], [ %1485, %1445 ]
  %1492 = phi <4 x i32> [ zeroinitializer, %1443 ], [ %1483, %1445 ]
  %1493 = phi <4 x i32> [ zeroinitializer, %1443 ], [ %1484, %1445 ]
  br i1 %921, label %1510, label %1494

1494:                                             ; preds = %1488, %1494
  %1495 = phi i64 [ %1507, %1494 ], [ %1491, %1488 ]
  %1496 = phi <4 x i32> [ %1505, %1494 ], [ %1492, %1488 ]
  %1497 = phi <4 x i32> [ %1506, %1494 ], [ %1493, %1488 ]
  %1498 = phi i64 [ %1508, %1494 ], [ %918, %1488 ]
  %1499 = getelementptr i32, i32* %1346, i64 %1495
  %1500 = bitcast i32* %1499 to <4 x i32>*
  %1501 = load <4 x i32>, <4 x i32>* %1500, align 4
  %1502 = getelementptr i32, i32* %1499, i64 4
  %1503 = bitcast i32* %1502 to <4 x i32>*
  %1504 = load <4 x i32>, <4 x i32>* %1503, align 4
  %1505 = add nsw <4 x i32> %1501, %1496
  %1506 = add nsw <4 x i32> %1504, %1497
  %1507 = add i64 %1495, 8
  %1508 = add i64 %1498, -1
  %1509 = icmp eq i64 %1508, 0
  br i1 %1509, label %1510, label %1494, !llvm.loop !65

1510:                                             ; preds = %1494, %1488
  %1511 = phi <4 x i32> [ %1489, %1488 ], [ %1505, %1494 ]
  %1512 = phi <4 x i32> [ %1490, %1488 ], [ %1506, %1494 ]
  %1513 = add <4 x i32> %1512, %1511
  %1514 = shufflevector <4 x i32> %1513, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %1515 = add <4 x i32> %1513, %1514
  %1516 = shufflevector <4 x i32> %1515, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %1517 = add <4 x i32> %1515, %1516
  %1518 = extractelement <4 x i32> %1517, i32 0
  br i1 %922, label %1529, label %1519

1519:                                             ; preds = %1510, %1441
  %1520 = phi i32 [ 0, %1441 ], [ %1518, %1510 ]
  %1521 = phi i32* [ %1346, %1441 ], [ %1444, %1510 ]
  br label %1522

1522:                                             ; preds = %1519, %1522
  %1523 = phi i32 [ %1526, %1522 ], [ %1520, %1519 ]
  %1524 = phi i32* [ %1527, %1522 ], [ %1521, %1519 ]
  %1525 = load i32, i32* %1524, align 4
  %1526 = add nsw i32 %1525, %1523
  %1527 = getelementptr inbounds i32, i32* %1524, i64 1
  %1528 = icmp eq i32* %1527, %1442
  br i1 %1528, label %1529, label %1522, !llvm.loop !66

1529:                                             ; preds = %1522, %1510, %1331
  %1530 = phi i32 [ 0, %1331 ], [ %1518, %1510 ], [ %1526, %1522 ]
  %1531 = sext i32 %1530 to i64
  %1532 = uitofp i64 %1531 to float
  %1533 = fdiv float 1.000000e+00, %1532
  %1534 = insertelement <4 x float> undef, float %1533, i32 0
  %1535 = shufflevector <4 x float> %1534, <4 x float> undef, <4 x i32> zeroinitializer
  %1536 = insertelement <4 x i32> undef, i32 %1530, i32 0
  %1537 = shufflevector <4 x i32> %1536, <4 x i32> undef, <4 x i32> zeroinitializer
  br i1 %251, label %1589, label %1551

1538:                                             ; preds = %1435, %1538
  %1539 = phi i64 [ %1549, %1538 ], [ 0, %1435 ]
  %1540 = getelementptr inbounds i32, i32* %1345, i64 %1539
  %1541 = bitcast i32* %1540 to <4 x i32>*
  %1542 = load <4 x i32>, <4 x i32>* %1541, align 1, !alias.scope !67
  %1543 = icmp eq <4 x i32> %1542, zeroinitializer
  %1544 = icmp sgt <4 x i32> %1440, %1542
  %1545 = select <4 x i1> %1544, <4 x i32> %1440, <4 x i32> %1542
  %1546 = select <4 x i1> %1543, <4 x i32> zeroinitializer, <4 x i32> %1545
  %1547 = getelementptr inbounds i32, i32* %1346, i64 %1539
  %1548 = bitcast i32* %1547 to <4 x i32>*
  store <4 x i32> %1546, <4 x i32>* %1548, align 1, !alias.scope !70
  %1549 = add nuw i64 %1539, 4
  %1550 = icmp ult i64 %1549, %250
  br i1 %1550, label %1538, label %1441

1551:                                             ; preds = %1529, %1551
  %1552 = phi i64 [ %1587, %1551 ], [ 0, %1529 ]
  %1553 = phi <4 x float> [ %1586, %1551 ], [ zeroinitializer, %1529 ]
  %1554 = getelementptr inbounds i32, i32* %1345, i64 %1552
  %1555 = bitcast i32* %1554 to <4 x i32>*
  %1556 = load <4 x i32>, <4 x i32>* %1555, align 1, !alias.scope !73
  %1557 = sitofp <4 x i32> %1556 to <4 x float>
  %1558 = getelementptr inbounds i32, i32* %1346, i64 %1552
  %1559 = bitcast i32* %1558 to <4 x i32>*
  %1560 = load <4 x i32>, <4 x i32>* %1559, align 1, !alias.scope !76
  %1561 = sitofp <4 x i32> %1560 to <4 x float>
  %1562 = fmul <4 x float> %1535, %1561
  %1563 = icmp eq <4 x i32> %1560, %1537
  %1564 = bitcast <4 x float> %1562 to <4 x i32>
  %1565 = add <4 x i32> %1564, <i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811>
  %1566 = ashr <4 x i32> %1565, <i32 23, i32 23, i32 23, i32 23>
  %1567 = and <4 x i32> %1565, <i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608>
  %1568 = sub <4 x i32> %1564, %1567
  %1569 = bitcast <4 x i32> %1568 to <4 x float>
  %1570 = sitofp <4 x i32> %1566 to <4 x float>
  %1571 = fadd <4 x float> %1569, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  fence acq_rel
  %1572 = fmul <4 x float> %1571, <float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000>
  %1573 = fadd <4 x float> %1572, <float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000>
  %1574 = fmul <4 x float> %1571, <float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000>
  %1575 = fadd <4 x float> %1574, <float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000>
  fence acq_rel
  %1576 = fmul <4 x float> %1571, %1573
  %1577 = fadd <4 x float> %1576, <float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000>
  %1578 = fmul <4 x float> %1571, %1575
  %1579 = fadd <4 x float> %1578, <float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000>
  fence acq_rel
  %1580 = fdiv <4 x float> %1577, %1579
  %1581 = fadd <4 x float> %1580, %1570
  %1582 = fcmp oeq <4 x float> %1557, zeroinitializer
  %1583 = select <4 x i1> %1563, <4 x float> zeroinitializer, <4 x float> %1581
  %1584 = fmul <4 x float> %1583, %1557
  %1585 = select <4 x i1> %1582, <4 x float> zeroinitializer, <4 x float> %1584
  %1586 = fsub <4 x float> %1553, %1585
  %1587 = add nuw i64 %1552, 4
  %1588 = icmp ult i64 %1587, %250
  br i1 %1588, label %1551, label %1589

1589:                                             ; preds = %1551, %1529
  %1590 = phi <4 x float> [ zeroinitializer, %1529 ], [ %1586, %1551 ]
  %1591 = shufflevector <4 x float> %1590, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %1592 = fadd <4 x float> %1590, %1591
  %1593 = shufflevector <4 x float> %1592, <4 x float> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %1594 = fadd <4 x float> %1592, %1593
  %1595 = extractelement <4 x float> %1594, i32 0
  %1596 = fadd float %1595, %1343
  %1597 = load i32*, i32** %128, align 8
  %1598 = getelementptr inbounds i32, i32* %1597, i64 %1017
  %1599 = load i32, i32* %1598, align 4
  %1600 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %127, align 8
  %1601 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1600, i64 %200, i32 5
  %1602 = load i32, i32* %1601, align 8
  %1603 = icmp eq i32 %1599, %1602
  %1604 = icmp eq i32 %1602, 6
  %1605 = or i1 %1603, %1604
  %1606 = select i1 %1605, float 0.000000e+00, float %168
  switch i32 %1599, label %1635 [
    i32 6, label %1627
    i32 0, label %1631
  ]

1607:                                             ; preds = %1607, %1081
  %1608 = phi i64 [ 0, %1081 ], [ %1625, %1607 ]
  %1609 = add i64 %1608, %1082
  %1610 = load i32*, i32** %144, align 8
  %1611 = getelementptr inbounds i32, i32* %1610, i64 %1609
  %1612 = load i32, i32* %1611, align 4
  %1613 = load i32*, i32** %156, align 8
  %1614 = getelementptr inbounds i32, i32* %1613, i64 %1608
  %1615 = load i32, i32* %1614, align 4
  %1616 = sub nsw i32 %1615, %1612
  store i32 %1616, i32* %1614, align 4
  %1617 = load i32*, i32** %144, align 8
  %1618 = getelementptr inbounds i32, i32* %1617, i64 %1609
  %1619 = load i32, i32* %1618, align 4
  %1620 = getelementptr inbounds i32, i32* %1083, i64 %1608
  %1621 = load i32, i32* %1620, align 4
  %1622 = add nsw i32 %1621, %1619
  store i32 %1622, i32* %1620, align 4
  %1623 = load i32*, i32** %144, align 8
  %1624 = getelementptr inbounds i32, i32* %1623, i64 %1609
  store i32 0, i32* %1624, align 4
  %1625 = add nuw i64 %1608, 1
  %1626 = icmp eq i64 %1625, %250
  br i1 %1626, label %1084, label %1607

1627:                                             ; preds = %1589
  %1628 = fpext float %1606 to double
  %1629 = fadd double %1628, 1.000000e-08
  %1630 = fptrunc double %1629 to float
  br label %1635

1631:                                             ; preds = %1589
  %1632 = fpext float %1606 to double
  %1633 = fadd double %1632, -1.000000e-08
  %1634 = fptrunc double %1633 to float
  br label %1635

1635:                                             ; preds = %1589, %1627, %1631
  %1636 = phi float [ %1634, %1631 ], [ %1630, %1627 ], [ %1606, %1589 ]
  %1637 = fadd float %1344, %1636
  %1638 = sub nuw i64 %1067, %984
  %1639 = load %struct.CostInfo*, %struct.CostInfo** %153, align 8
  %1640 = getelementptr inbounds %struct.CostInfo, %struct.CostInfo* %1639, i64 %1638, i32 0
  %1641 = load float, float* %1640, align 4
  %1642 = getelementptr inbounds %struct.CostInfo, %struct.CostInfo* %1639, i64 %1638, i32 1
  %1643 = load float, float* %1642, align 4
  %1644 = fadd float %1641, %1643
  %1645 = fcmp olt float %1637, %1644
  br i1 %1645, label %1646, label %1654

1646:                                             ; preds = %1635
  store float %1344, float* %1640, align 4
  %1647 = load %struct.CostInfo*, %struct.CostInfo** %153, align 8
  %1648 = getelementptr inbounds %struct.CostInfo, %struct.CostInfo* %1647, i64 %1638, i32 1
  store float %1636, float* %1648, align 4
  %1649 = load i32*, i32** %128, align 8
  %1650 = getelementptr inbounds i32, i32* %1649, i64 %1017
  %1651 = load i32, i32* %1650, align 4
  %1652 = load %struct.CostInfo*, %struct.CostInfo** %153, align 8
  %1653 = getelementptr inbounds %struct.CostInfo, %struct.CostInfo* %1652, i64 %1638, i32 2
  store i32 %1651, i32* %1653, align 4
  br label %1654

1654:                                             ; preds = %1646, %1635
  %1655 = fadd float %1596, %1636
  %1656 = load %struct.CostInfo*, %struct.CostInfo** %150, align 8
  %1657 = getelementptr inbounds %struct.CostInfo, %struct.CostInfo* %1656, i64 %1638, i32 0
  %1658 = load float, float* %1657, align 4
  %1659 = getelementptr inbounds %struct.CostInfo, %struct.CostInfo* %1656, i64 %1638, i32 1
  %1660 = load float, float* %1659, align 4
  %1661 = fadd float %1658, %1660
  %1662 = fcmp olt float %1655, %1661
  br i1 %1662, label %1663, label %1671

1663:                                             ; preds = %1654
  store float %1596, float* %1657, align 4
  %1664 = load %struct.CostInfo*, %struct.CostInfo** %150, align 8
  %1665 = getelementptr inbounds %struct.CostInfo, %struct.CostInfo* %1664, i64 %1638, i32 1
  store float %1636, float* %1665, align 4
  %1666 = load i32*, i32** %128, align 8
  %1667 = getelementptr inbounds i32, i32* %1666, i64 %1017
  %1668 = load i32, i32* %1667, align 4
  %1669 = load %struct.CostInfo*, %struct.CostInfo** %150, align 8
  %1670 = getelementptr inbounds %struct.CostInfo, %struct.CostInfo* %1669, i64 %1638, i32 2
  store i32 %1668, i32* %1670, align 4
  br label %1671

1671:                                             ; preds = %1654, %1663, %1066
  %1672 = phi i64 [ %1068, %1066 ], [ %1077, %1663 ], [ %1077, %1654 ]
  %1673 = add nuw i64 %1067, 1
  %1674 = icmp eq i64 %1673, %983
  br i1 %1674, label %1063, label %1066

1675:                                             ; preds = %1752, %1008
  %1676 = load i64*, i64** %147, align 8
  %1677 = getelementptr inbounds i64, i64* %1676, i64 %983
  store i64 0, i64* %1677, align 8
  br i1 %251, label %1756, label %1678

1678:                                             ; preds = %1675
  %1679 = mul i64 %983, %250
  br label %1764

1680:                                             ; preds = %1752, %1010
  %1681 = phi i64 [ %984, %1010 ], [ %1754, %1752 ]
  %1682 = phi i64 [ %202, %1010 ], [ %1753, %1752 ]
  %1683 = getelementptr inbounds i32, i32* %1015, i64 %1681
  %1684 = load i32, i32* %1683, align 4
  %1685 = icmp eq i32 %1684, 0
  br i1 %1685, label %1752, label %1686

1686:                                             ; preds = %1680
  %1687 = sext i32 %1684 to i64
  %1688 = add i64 %1682, %1687
  %1689 = sub nuw i64 %1681, %984
  %1690 = load %struct.CostInfo*, %struct.CostInfo** %153, align 8
  %1691 = getelementptr inbounds %struct.CostInfo, %struct.CostInfo* %1690, i64 %1689, i32 0
  %1692 = load float, float* %1691, align 4
  %1693 = load %struct.CostInfo*, %struct.CostInfo** %150, align 8
  %1694 = getelementptr inbounds %struct.CostInfo, %struct.CostInfo* %1693, i64 %1689, i32 0
  %1695 = load float, float* %1694, align 4
  %1696 = load i32*, i32** %182, align 8
  %1697 = getelementptr inbounds i32, i32* %1696, i64 %934
  %1698 = load i32, i32* %1697, align 4
  %1699 = icmp ne i32 %1698, 15
  %1700 = or i1 %1699, %1013
  br i1 %1700, label %1706, label %1701

1701:                                             ; preds = %1686
  %1702 = fcmp oeq float %1692, 0.000000e+00
  %1703 = fcmp oeq float %1695, 0.000000e+00
  %1704 = or i1 %1702, %1703
  %1705 = select i1 %1704, %struct.SplitInfo* %9, %struct.SplitInfo* %10
  br label %1728

1706:                                             ; preds = %1686
  %1707 = getelementptr inbounds %struct.CostInfo, %struct.CostInfo* %1693, i64 %1689, i32 2
  %1708 = load i32, i32* %1707, align 4
  %1709 = icmp eq i32 %1708, 6
  br i1 %1709, label %1719, label %1710

1710:                                             ; preds = %1706
  %1711 = getelementptr inbounds %struct.CostInfo, %struct.CostInfo* %1690, i64 %1689, i32 2
  %1712 = load i32, i32* %1711, align 4
  %1713 = icmp eq i32 %1712, 6
  br i1 %1713, label %1719, label %1714

1714:                                             ; preds = %1710
  %1715 = fcmp oeq float %1692, 0.000000e+00
  %1716 = fcmp oeq float %1695, 0.000000e+00
  %1717 = or i1 %1715, %1716
  %1718 = select i1 %1717, %struct.SplitInfo* %9, %struct.SplitInfo* %10
  br label %1730

1719:                                             ; preds = %1706, %1710
  %1720 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %127, align 8
  %1721 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1720, i64 %200, i32 5
  %1722 = load i32, i32* %1721, align 8
  %1723 = icmp eq i32 %1722, 6
  %1724 = fcmp oeq float %1692, 0.000000e+00
  %1725 = fcmp oeq float %1695, 0.000000e+00
  %1726 = or i1 %1724, %1725
  %1727 = select i1 %1726, %struct.SplitInfo* %9, %struct.SplitInfo* %10
  br i1 %1723, label %1730, label %1728

1728:                                             ; preds = %1719, %1701
  %1729 = phi %struct.SplitInfo* [ %1705, %1701 ], [ %1727, %1719 ]
  br label %1730

1730:                                             ; preds = %1719, %1714, %1728
  %1731 = phi %struct.SplitInfo* [ %1729, %1728 ], [ %1727, %1719 ], [ %1718, %1714 ]
  %1732 = phi %struct.SplitInfo* [ %11, %1728 ], [ %12, %1719 ], [ %12, %1714 ]
  %1733 = select i1 %1014, %struct.SplitInfo* %1731, %struct.SplitInfo* %1732
  %1734 = fadd float %1692, %1695
  %1735 = getelementptr inbounds %struct.SplitInfo, %struct.SplitInfo* %1733, i64 0, i32 3
  %1736 = load float, float* %1735, align 8
  %1737 = getelementptr inbounds %struct.SplitInfo, %struct.SplitInfo* %1733, i64 0, i32 4
  %1738 = load float, float* %1737, align 4
  %1739 = fadd float %1736, %1738
  %1740 = fcmp olt float %1734, %1739
  br i1 %1740, label %1741, label %1752

1741:                                             ; preds = %1730
  %1742 = getelementptr inbounds %struct.SplitInfo, %struct.SplitInfo* %1733, i64 0, i32 0
  store i64 %934, i64* %1742, align 8
  %1743 = trunc i64 %1681 to i32
  %1744 = getelementptr inbounds %struct.SplitInfo, %struct.SplitInfo* %1733, i64 0, i32 1
  store i32 %1743, i32* %1744, align 8
  %1745 = getelementptr inbounds %struct.SplitInfo, %struct.SplitInfo* %1733, i64 0, i32 2
  store i64 %1688, i64* %1745, align 8
  store float %1695, float* %1735, align 8
  %1746 = getelementptr inbounds %struct.CostInfo, %struct.CostInfo* %1693, i64 %1689, i32 2
  %1747 = load i32, i32* %1746, align 4
  %1748 = getelementptr inbounds %struct.SplitInfo, %struct.SplitInfo* %1733, i64 0, i32 5
  store i32 %1747, i32* %1748, align 8
  store float %1692, float* %1737, align 4
  %1749 = getelementptr inbounds %struct.CostInfo, %struct.CostInfo* %1690, i64 %1689, i32 2
  %1750 = load i32, i32* %1749, align 4
  %1751 = getelementptr inbounds %struct.SplitInfo, %struct.SplitInfo* %1733, i64 0, i32 6
  store i32 %1750, i32* %1751, align 4
  br label %1752

1752:                                             ; preds = %1730, %1741, %1680
  %1753 = phi i64 [ %1682, %1680 ], [ %1688, %1741 ], [ %1688, %1730 ]
  %1754 = add nuw i64 %1681, 1
  %1755 = icmp eq i64 %1754, %983
  br i1 %1755, label %1675, label %1680

1756:                                             ; preds = %1764, %1675
  %1757 = add nuw i64 %934, 1
  %1758 = icmp ult i64 %1757, %70
  br i1 %1758, label %1759, label %923

1759:                                             ; preds = %1756
  %1760 = load i64, i64* %170, align 8
  %1761 = load i64, i64* %172, align 8
  %1762 = load i64, i64* %175, align 8
  %1763 = load i64, i64* %176, align 8
  br label %929

1764:                                             ; preds = %1764, %1678
  %1765 = phi i64 [ 0, %1678 ], [ %1781, %1764 ]
  %1766 = add i64 %1765, %1679
  %1767 = load i32*, i32** %144, align 8
  %1768 = getelementptr inbounds i32, i32* %1767, i64 %1766
  store i32 0, i32* %1768, align 4
  %1769 = or i64 %1765, 1
  %1770 = add i64 %1769, %1679
  %1771 = load i32*, i32** %144, align 8
  %1772 = getelementptr inbounds i32, i32* %1771, i64 %1770
  store i32 0, i32* %1772, align 4
  %1773 = or i64 %1765, 2
  %1774 = add i64 %1773, %1679
  %1775 = load i32*, i32** %144, align 8
  %1776 = getelementptr inbounds i32, i32* %1775, i64 %1774
  store i32 0, i32* %1776, align 4
  %1777 = or i64 %1765, 3
  %1778 = add i64 %1777, %1679
  %1779 = load i32*, i32** %144, align 8
  %1780 = getelementptr inbounds i32, i32* %1779, i64 %1778
  store i32 0, i32* %1780, align 4
  %1781 = add nuw i64 %1765, 4
  %1782 = icmp eq i64 %1781, %250
  br i1 %1782, label %1756, label %1764

1783:                                             ; preds = %923
  %1784 = load float, float* %92, align 8
  %1785 = load float, float* %93, align 4
  %1786 = fadd float %1784, %1785
  %1787 = fmul float %1786, %5
  %1788 = fcmp ugt float %926, %1787
  br i1 %1788, label %1790, label %1789

1789:                                             ; preds = %1783
  br label %1790

1790:                                             ; preds = %1783, %1789, %923
  %1791 = phi %struct.SplitInfo* [ %12, %1789 ], [ %11, %1783 ], [ %11, %923 ]
  %1792 = load float, float* %84, align 8
  %1793 = load float, float* %85, align 4
  %1794 = fadd float %1792, %1793
  %1795 = fadd float %1794, %1
  %1796 = fcmp olt float %1795, %654
  br i1 %1796, label %1797, label %1806

1797:                                             ; preds = %1790
  %1798 = getelementptr inbounds %struct.SplitInfo, %struct.SplitInfo* %1791, i64 0, i32 3
  %1799 = load float, float* %1798, align 8
  %1800 = getelementptr inbounds %struct.SplitInfo, %struct.SplitInfo* %1791, i64 0, i32 4
  %1801 = load float, float* %1800, align 4
  %1802 = fadd float %1799, %1801
  %1803 = fmul float %1802, %5
  %1804 = fcmp ugt float %1794, %1803
  br i1 %1804, label %1806, label %1805

1805:                                             ; preds = %1797
  br label %1806

1806:                                             ; preds = %1797, %1805, %1790
  %1807 = phi %struct.SplitInfo* [ %10, %1805 ], [ %1791, %1797 ], [ %1791, %1790 ]
  %1808 = load float, float* %76, align 8
  %1809 = load float, float* %77, align 4
  %1810 = fadd float %1808, %1809
  %1811 = fadd float %1810, %1
  %1812 = fcmp olt float %1811, %654
  %1813 = select i1 %1812, %struct.SplitInfo* %9, %struct.SplitInfo* %1807
  %1814 = load i32*, i32** %162, align 8
  %1815 = icmp eq i32* %1814, null
  br i1 %1815, label %1819, label %1816

1816:                                             ; preds = %1806
  %1817 = ptrtoint i32* %1814 to i64
  store i64 %1817, i64* %166, align 8
  %1818 = bitcast i32* %1814 to i8*
  call void @_ZdlPv(i8* %1818) #29
  br label %1819

1819:                                             ; preds = %1806, %1816
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %161) #24
  %1820 = load i32*, i32** %156, align 8
  %1821 = icmp eq i32* %1820, null
  br i1 %1821, label %1825, label %1822

1822:                                             ; preds = %1819
  %1823 = ptrtoint i32* %1820 to i64
  store i64 %1823, i64* %160, align 8
  %1824 = bitcast i32* %1820 to i8*
  call void @_ZdlPv(i8* %1824) #29
  br label %1825

1825:                                             ; preds = %1819, %1822
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %155) #24
  %1826 = load %struct.CostInfo*, %struct.CostInfo** %153, align 8
  %1827 = icmp eq %struct.CostInfo* %1826, null
  br i1 %1827, label %1831, label %1828

1828:                                             ; preds = %1825
  %1829 = ptrtoint %struct.CostInfo* %1826 to i64
  store i64 %1829, i64* %173, align 8
  %1830 = bitcast %struct.CostInfo* %1826 to i8*
  call void @_ZdlPv(i8* %1830) #29
  br label %1831

1831:                                             ; preds = %1825, %1828
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %152) #24
  %1832 = load %struct.CostInfo*, %struct.CostInfo** %150, align 8
  %1833 = icmp eq %struct.CostInfo* %1832, null
  br i1 %1833, label %1837, label %1834

1834:                                             ; preds = %1831
  %1835 = ptrtoint %struct.CostInfo* %1832 to i64
  store i64 %1835, i64* %171, align 8
  %1836 = bitcast %struct.CostInfo* %1832 to i8*
  call void @_ZdlPv(i8* %1836) #29
  br label %1837

1837:                                             ; preds = %1831, %1834
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %149) #24
  %1838 = load i64*, i64** %147, align 8
  %1839 = icmp eq i64* %1838, null
  br i1 %1839, label %1843, label %1840

1840:                                             ; preds = %1837
  %1841 = ptrtoint i64* %1838 to i64
  store i64 %1841, i64* %175, align 8
  %1842 = bitcast i64* %1838 to i8*
  call void @_ZdlPv(i8* %1842) #29
  br label %1843

1843:                                             ; preds = %1837, %1840
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %146) #24
  %1844 = load i32*, i32** %144, align 8
  %1845 = icmp eq i32* %1844, null
  br i1 %1845, label %1849, label %1846

1846:                                             ; preds = %1843
  %1847 = ptrtoint i32* %1844 to i64
  store i64 %1847, i64* %177, align 8
  %1848 = bitcast i32* %1844 to i8*
  call void @_ZdlPv(i8* %1848) #29
  br label %1849

1849:                                             ; preds = %1843, %1846
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %143) #24
  %1850 = load i32*, i32** %141, align 8
  %1851 = icmp eq i32* %1850, null
  br i1 %1851, label %1855, label %1852

1852:                                             ; preds = %1849
  %1853 = ptrtoint i32* %1850 to i64
  store i64 %1853, i64* %180, align 8
  %1854 = bitcast i32* %1850 to i8*
  call void @_ZdlPv(i8* %1854) #29
  br label %1855

1855:                                             ; preds = %1849, %1852
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %140) #24
  %1856 = getelementptr inbounds %struct.SplitInfo, %struct.SplitInfo* %1813, i64 0, i32 3
  %1857 = load float, float* %1856, align 8
  %1858 = getelementptr inbounds %struct.SplitInfo, %struct.SplitInfo* %1813, i64 0, i32 4
  %1859 = load float, float* %1858, align 4
  br label %1862

1860:                                             ; preds = %808, %800
  %1861 = phi i64 [ %801, %800 ], [ %833, %808 ]
  store i64 %1861, i64* %132, align 8
  br label %1862

1862:                                             ; preds = %777, %1860, %1855
  %1863 = phi float [ %1859, %1855 ], [ %768, %1860 ], [ %768, %777 ]
  %1864 = phi float [ %1857, %1855 ], [ %768, %1860 ], [ %768, %777 ]
  %1865 = phi %struct.SplitInfo* [ %1813, %1855 ], [ %16, %1860 ], [ %16, %777 ]
  %1866 = fadd float %1864, %1863
  %1867 = fadd float %1866, %1
  %1868 = fcmp olt float %1867, %654
  br i1 %1868, label %1869, label %2115

1869:                                             ; preds = %1862
  %1870 = getelementptr inbounds %struct.SplitInfo, %struct.SplitInfo* %1865, i64 0, i32 0
  %1871 = load i64, i64* %1870, align 8
  %1872 = load i32*, i32** %182, align 8
  %1873 = getelementptr inbounds i32, i32* %1872, i64 %1871
  %1874 = load i32, i32* %1873, align 4
  %1875 = getelementptr inbounds %struct.SplitInfo, %struct.SplitInfo* %1865, i64 0, i32 1
  %1876 = load i32, i32* %1875, align 8
  %1877 = zext i32 %1876 to i64
  %1878 = load %"class.std::__1::vector.43"*, %"class.std::__1::vector.43"** %174, align 8
  %1879 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %1878, i64 %1871
  %1880 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %1878, i64 %1871, i32 0, i32 1
  %1881 = bitcast i32** %1880 to i64*
  %1882 = load i64, i64* %1881, align 8
  %1883 = bitcast %"class.std::__1::vector.43"* %1879 to i64*
  %1884 = load i64, i64* %1883, align 8
  %1885 = sub i64 %1882, %1884
  %1886 = ashr exact i64 %1885, 2
  %1887 = icmp ugt i64 %1886, %1877
  br i1 %1887, label %1891, label %1888

1888:                                             ; preds = %1869
  %1889 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.16, i64 0, i64 0), i32 65, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.17, i64 0, i64 0)) #24
  %1890 = call zeroext i1 @_ZN3jxl5AbortEv() #28
  unreachable

1891:                                             ; preds = %1869
  %1892 = zext i32 %1874 to i64
  %1893 = inttoptr i64 %1884 to i32*
  %1894 = getelementptr inbounds i32, i32* %1893, i64 %1877
  %1895 = load i32, i32* %1894, align 4
  %1896 = getelementptr inbounds %struct.SplitInfo, %struct.SplitInfo* %1865, i64 0, i32 5
  %1897 = load i32, i32* %1896, align 8
  %1898 = getelementptr inbounds %struct.SplitInfo, %struct.SplitInfo* %1865, i64 0, i32 6
  %1899 = load i32, i32* %1898, align 4
  %1900 = load i64, i64* %185, align 8
  %1901 = load i64, i64* %186, align 8
  %1902 = sub i64 %1900, %1901
  %1903 = sdiv exact i64 %1902, 40
  %1904 = trunc i64 %1903 to i32
  %1905 = inttoptr i64 %1901 to %"struct.jxl::PropertyDecisionNode"*
  %1906 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1905, i64 %200, i32 3
  store i32 %1904, i32* %1906, align 8
  %1907 = load i64, i64* %185, align 8
  %1908 = load i64, i64* %186, align 8
  %1909 = sub i64 %1907, %1908
  %1910 = sdiv exact i64 %1909, 40
  %1911 = trunc i64 %1910 to i32
  %1912 = add i32 %1911, 1
  %1913 = inttoptr i64 %1908 to %"struct.jxl::PropertyDecisionNode"*
  %1914 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1913, i64 %200, i32 4
  store i32 %1912, i32* %1914, align 4
  %1915 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %127, align 8
  %1916 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1915, i64 %200, i32 0
  store i32 %1895, i32* %1916, align 8
  %1917 = trunc i32 %1874 to i16
  %1918 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %127, align 8
  %1919 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1918, i64 %200, i32 1
  store i16 %1917, i16* %1919, align 4
  call void @_ZNSt3__16vectorIN3jxl20PropertyDecisionNodeENS_9allocatorIS2_EEE12emplace_backIJEEEvDpOT_(%"class.std::__1::vector"* %6) #24
  %1920 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %184, align 8
  %1921 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1920, i64 -1, i32 1
  store i16 -1, i16* %1921, align 4
  %1922 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %184, align 8
  %1923 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1922, i64 -1, i32 5
  store i32 %1899, i32* %1923, align 8
  %1924 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %184, align 8
  %1925 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1924, i64 -1, i32 7
  store i64 0, i64* %1925, align 8
  %1926 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %184, align 8
  %1927 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1926, i64 -1, i32 8
  store i32 1, i32* %1927, align 8
  call void @_ZNSt3__16vectorIN3jxl20PropertyDecisionNodeENS_9allocatorIS2_EEE12emplace_backIJEEEvDpOT_(%"class.std::__1::vector"* %6) #24
  %1928 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %184, align 8
  %1929 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1928, i64 -1, i32 1
  store i16 -1, i16* %1929, align 4
  %1930 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %184, align 8
  %1931 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1930, i64 -1, i32 5
  store i32 %1897, i32* %1931, align 8
  %1932 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %184, align 8
  %1933 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1932, i64 -1, i32 7
  store i64 0, i64* %1933, align 8
  %1934 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %184, align 8
  %1935 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1934, i64 -1, i32 8
  store i32 1, i32* %1935, align 8
  %1936 = getelementptr inbounds %struct.SplitInfo, %struct.SplitInfo* %1865, i64 0, i32 2
  %1937 = load i64, i64* %1936, align 8
  %1938 = load i64, i64* %1870, align 8
  call void @_ZN3jxl6N_SSE416SplitTreeSamplesERNS_11TreeSamplesEmmmm(%"struct.jxl::TreeSamples"* dereferenceable(200) %0, i64 %202, i64 %1937, i64 %204, i64 %1938)
  %1939 = icmp ugt i32 %1874, 1
  br i1 %1939, label %1940, label %1946

1940:                                             ; preds = %1891
  %1941 = load i64, i64* %1870, align 8
  %1942 = trunc i64 %1941 to i32
  %1943 = shl i32 1, %1942
  %1944 = sext i32 %1943 to i64
  %1945 = or i64 %206, %1944
  br label %1946

1946:                                             ; preds = %1940, %1891
  %1947 = phi i64 [ %1945, %1940 ], [ %206, %1891 ]
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %187) #24
  store i64 %209, i64* %188, align 8
  store i64 %212, i64* %190, align 8
  %1948 = icmp ult i32 %1874, 2
  br i1 %1948, label %1949, label %1964

1949:                                             ; preds = %1946
  %1950 = add nsw i32 %1895, 1
  %1951 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %24, i64 0, i32 0, i64 %1892, i32 0, i64 1
  %1952 = load i32, i32* %1951, align 4
  %1953 = icmp ugt i32 %1950, %1952
  br i1 %1953, label %1954, label %1957

1954:                                             ; preds = %1949
  %1955 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.1, i64 0, i64 0), i32 491, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.4, i64 0, i64 0)) #24
  %1956 = call zeroext i1 @_ZN3jxl5AbortEv() #28
  unreachable

1957:                                             ; preds = %1949
  store i32 %1950, i32* %1951, align 4
  %1958 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %24, i64 0, i32 0, i64 %1892, i32 0, i64 0
  %1959 = load i32, i32* %1958, align 8
  %1960 = icmp ult i32 %1959, %1950
  br i1 %1960, label %1964, label %1961

1961:                                             ; preds = %1957
  %1962 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.1, i64 0, i64 0), i32 493, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.5, i64 0, i64 0)) #24
  %1963 = call zeroext i1 @_ZN3jxl5AbortEv() #28
  unreachable

1964:                                             ; preds = %1957, %1946
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %191)
  %1965 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %127, align 8
  %1966 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1965, i64 %200, i32 4
  %1967 = load i32, i32* %1966, align 4
  %1968 = zext i32 %1967 to i64
  %1969 = load i64, i64* %1936, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %191, i8* nonnull align 8 %187, i64 16, i1 false)
  %1970 = load %struct.NodeInfo*, %struct.NodeInfo** %29, align 8
  %1971 = load %struct.NodeInfo*, %struct.NodeInfo** %30, align 8
  %1972 = icmp ult %struct.NodeInfo* %1970, %1971
  %1973 = ptrtoint %struct.NodeInfo* %1971 to i64
  br i1 %1972, label %1974, label %1983

1974:                                             ; preds = %1964
  %1975 = getelementptr inbounds %struct.NodeInfo, %struct.NodeInfo* %1970, i64 0, i32 0
  store i64 %1968, i64* %1975, align 8
  %1976 = getelementptr inbounds %struct.NodeInfo, %struct.NodeInfo* %1970, i64 0, i32 1
  store i64 %202, i64* %1976, align 8
  %1977 = getelementptr inbounds %struct.NodeInfo, %struct.NodeInfo* %1970, i64 0, i32 2
  store i64 %1969, i64* %1977, align 8
  %1978 = getelementptr inbounds %struct.NodeInfo, %struct.NodeInfo* %1970, i64 0, i32 3
  store i64 %1947, i64* %1978, align 8
  %1979 = getelementptr inbounds %struct.NodeInfo, %struct.NodeInfo* %1970, i64 0, i32 4
  %1980 = bitcast %"struct.std::__1::array"* %1979 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1980, i8* nonnull align 8 %191, i64 16, i1 false)
  %1981 = getelementptr inbounds %struct.NodeInfo, %struct.NodeInfo* %1970, i64 1
  %1982 = ptrtoint %struct.NodeInfo* %1981 to i64
  store i64 %1982, i64* %192, align 8
  br label %2031

1983:                                             ; preds = %1964
  %1984 = ptrtoint %struct.NodeInfo* %1970 to i64
  %1985 = load i64, i64* %193, align 8
  %1986 = sub i64 %1984, %1985
  %1987 = sdiv exact i64 %1986, 48
  %1988 = add nsw i64 %1987, 1
  %1989 = icmp ugt i64 %1988, 384307168202282325
  br i1 %1989, label %1990, label %1992

1990:                                             ; preds = %1983
  %1991 = bitcast %"class.std::__1::vector.76"* %8 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %1991) #28
  unreachable

1992:                                             ; preds = %1983
  %1993 = sub i64 %1973, %1985
  %1994 = sdiv exact i64 %1993, 48
  %1995 = icmp ult i64 %1994, 192153584101141162
  br i1 %1995, label %1996, label %2001

1996:                                             ; preds = %1992
  %1997 = shl nsw i64 %1994, 1
  %1998 = icmp ult i64 %1997, %1988
  %1999 = select i1 %1998, i64 %1988, i64 %1997
  %2000 = icmp eq i64 %1999, 0
  br i1 %2000, label %2006, label %2001

2001:                                             ; preds = %1996, %1992
  %2002 = phi i64 [ %1999, %1996 ], [ 384307168202282325, %1992 ]
  %2003 = mul i64 %2002, 48
  %2004 = call i8* @_Znwm(i64 %2003) #29
  %2005 = bitcast i8* %2004 to %struct.NodeInfo*
  br label %2006

2006:                                             ; preds = %2001, %1996
  %2007 = phi i64 [ %2002, %2001 ], [ 0, %1996 ]
  %2008 = phi %struct.NodeInfo* [ %2005, %2001 ], [ null, %1996 ]
  %2009 = getelementptr inbounds %struct.NodeInfo, %struct.NodeInfo* %2008, i64 %1987
  %2010 = getelementptr inbounds %struct.NodeInfo, %struct.NodeInfo* %2008, i64 %2007
  %2011 = ptrtoint %struct.NodeInfo* %2010 to i64
  %2012 = getelementptr inbounds %struct.NodeInfo, %struct.NodeInfo* %2009, i64 0, i32 0
  store i64 %1968, i64* %2012, align 8
  %2013 = getelementptr inbounds %struct.NodeInfo, %struct.NodeInfo* %2008, i64 %1987, i32 1
  store i64 %202, i64* %2013, align 8
  %2014 = getelementptr inbounds %struct.NodeInfo, %struct.NodeInfo* %2008, i64 %1987, i32 2
  store i64 %1969, i64* %2014, align 8
  %2015 = getelementptr inbounds %struct.NodeInfo, %struct.NodeInfo* %2008, i64 %1987, i32 3
  store i64 %1947, i64* %2015, align 8
  %2016 = getelementptr inbounds %struct.NodeInfo, %struct.NodeInfo* %2008, i64 %1987, i32 4
  %2017 = bitcast %"struct.std::__1::array"* %2016 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %2017, i8* nonnull align 8 %191, i64 16, i1 false)
  %2018 = getelementptr inbounds %struct.NodeInfo, %struct.NodeInfo* %2009, i64 1
  %2019 = ptrtoint %struct.NodeInfo* %2018 to i64
  %2020 = sdiv exact i64 %1986, -48
  %2021 = getelementptr inbounds %struct.NodeInfo, %struct.NodeInfo* %2009, i64 %2020
  %2022 = ptrtoint %struct.NodeInfo* %2021 to i64
  %2023 = icmp sgt i64 %1986, 0
  br i1 %2023, label %2024, label %2027

2024:                                             ; preds = %2006
  %2025 = bitcast %struct.NodeInfo* %2021 to i8*
  %2026 = inttoptr i64 %1985 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %2025, i8* align 8 %2026, i64 %1986, i1 false) #24
  br label %2027

2027:                                             ; preds = %2024, %2006
  store i64 %2022, i64* %193, align 8
  store i64 %2019, i64* %192, align 8
  store i64 %2011, i64* %194, align 8
  %2028 = icmp eq i64 %1985, 0
  br i1 %2028, label %2031, label %2029

2029:                                             ; preds = %2027
  %2030 = inttoptr i64 %1985 to i8*
  call void @_ZdlPv(i8* %2030) #29
  br label %2031

2031:                                             ; preds = %1974, %2027, %2029
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %191)
  store i64 %209, i64* %188, align 8
  store i64 %212, i64* %190, align 8
  br i1 %1948, label %2032, label %2047

2032:                                             ; preds = %2031
  %2033 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %24, i64 0, i32 0, i64 %1892, i32 0, i64 0
  %2034 = load i32, i32* %2033, align 8
  %2035 = add nsw i32 %1895, 1
  %2036 = icmp ugt i32 %2034, %2035
  br i1 %2036, label %2037, label %2040

2037:                                             ; preds = %2032
  %2038 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.1, i64 0, i64 0), i32 499, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.6, i64 0, i64 0)) #24
  %2039 = call zeroext i1 @_ZN3jxl5AbortEv() #28
  unreachable

2040:                                             ; preds = %2032
  store i32 %2035, i32* %2033, align 8
  %2041 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %24, i64 0, i32 0, i64 %1892, i32 0, i64 1
  %2042 = load i32, i32* %2041, align 4
  %2043 = icmp ult i32 %2035, %2042
  br i1 %2043, label %2047, label %2044

2044:                                             ; preds = %2040
  %2045 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.1, i64 0, i64 0), i32 501, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.5, i64 0, i64 0)) #24
  %2046 = call zeroext i1 @_ZN3jxl5AbortEv() #28
  unreachable

2047:                                             ; preds = %2040, %2031
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %195)
  %2048 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %127, align 8
  %2049 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %2048, i64 %200, i32 3
  %2050 = load i32, i32* %2049, align 8
  %2051 = zext i32 %2050 to i64
  %2052 = load i64, i64* %1936, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %195, i8* nonnull align 8 %187, i64 16, i1 false)
  %2053 = load %struct.NodeInfo*, %struct.NodeInfo** %29, align 8
  %2054 = load %struct.NodeInfo*, %struct.NodeInfo** %30, align 8
  %2055 = icmp ult %struct.NodeInfo* %2053, %2054
  %2056 = ptrtoint %struct.NodeInfo* %2054 to i64
  br i1 %2055, label %2057, label %2066

2057:                                             ; preds = %2047
  %2058 = getelementptr inbounds %struct.NodeInfo, %struct.NodeInfo* %2053, i64 0, i32 0
  store i64 %2051, i64* %2058, align 8
  %2059 = getelementptr inbounds %struct.NodeInfo, %struct.NodeInfo* %2053, i64 0, i32 1
  store i64 %2052, i64* %2059, align 8
  %2060 = getelementptr inbounds %struct.NodeInfo, %struct.NodeInfo* %2053, i64 0, i32 2
  store i64 %204, i64* %2060, align 8
  %2061 = getelementptr inbounds %struct.NodeInfo, %struct.NodeInfo* %2053, i64 0, i32 3
  store i64 %1947, i64* %2061, align 8
  %2062 = getelementptr inbounds %struct.NodeInfo, %struct.NodeInfo* %2053, i64 0, i32 4
  %2063 = bitcast %"struct.std::__1::array"* %2062 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %2063, i8* nonnull align 8 %195, i64 16, i1 false)
  %2064 = getelementptr inbounds %struct.NodeInfo, %struct.NodeInfo* %2053, i64 1
  %2065 = ptrtoint %struct.NodeInfo* %2064 to i64
  store i64 %2065, i64* %192, align 8
  br label %2114

2066:                                             ; preds = %2047
  %2067 = ptrtoint %struct.NodeInfo* %2053 to i64
  %2068 = load i64, i64* %193, align 8
  %2069 = sub i64 %2067, %2068
  %2070 = sdiv exact i64 %2069, 48
  %2071 = add nsw i64 %2070, 1
  %2072 = icmp ugt i64 %2071, 384307168202282325
  br i1 %2072, label %2073, label %2075

2073:                                             ; preds = %2066
  %2074 = bitcast %"class.std::__1::vector.76"* %8 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %2074) #28
  unreachable

2075:                                             ; preds = %2066
  %2076 = sub i64 %2056, %2068
  %2077 = sdiv exact i64 %2076, 48
  %2078 = icmp ult i64 %2077, 192153584101141162
  br i1 %2078, label %2079, label %2084

2079:                                             ; preds = %2075
  %2080 = shl nsw i64 %2077, 1
  %2081 = icmp ult i64 %2080, %2071
  %2082 = select i1 %2081, i64 %2071, i64 %2080
  %2083 = icmp eq i64 %2082, 0
  br i1 %2083, label %2089, label %2084

2084:                                             ; preds = %2079, %2075
  %2085 = phi i64 [ %2082, %2079 ], [ 384307168202282325, %2075 ]
  %2086 = mul i64 %2085, 48
  %2087 = call i8* @_Znwm(i64 %2086) #29
  %2088 = bitcast i8* %2087 to %struct.NodeInfo*
  br label %2089

2089:                                             ; preds = %2084, %2079
  %2090 = phi i64 [ %2085, %2084 ], [ 0, %2079 ]
  %2091 = phi %struct.NodeInfo* [ %2088, %2084 ], [ null, %2079 ]
  %2092 = getelementptr inbounds %struct.NodeInfo, %struct.NodeInfo* %2091, i64 %2070
  %2093 = getelementptr inbounds %struct.NodeInfo, %struct.NodeInfo* %2091, i64 %2090
  %2094 = ptrtoint %struct.NodeInfo* %2093 to i64
  %2095 = getelementptr inbounds %struct.NodeInfo, %struct.NodeInfo* %2092, i64 0, i32 0
  store i64 %2051, i64* %2095, align 8
  %2096 = getelementptr inbounds %struct.NodeInfo, %struct.NodeInfo* %2091, i64 %2070, i32 1
  store i64 %2052, i64* %2096, align 8
  %2097 = getelementptr inbounds %struct.NodeInfo, %struct.NodeInfo* %2091, i64 %2070, i32 2
  store i64 %204, i64* %2097, align 8
  %2098 = getelementptr inbounds %struct.NodeInfo, %struct.NodeInfo* %2091, i64 %2070, i32 3
  store i64 %1947, i64* %2098, align 8
  %2099 = getelementptr inbounds %struct.NodeInfo, %struct.NodeInfo* %2091, i64 %2070, i32 4
  %2100 = bitcast %"struct.std::__1::array"* %2099 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %2100, i8* nonnull align 8 %195, i64 16, i1 false)
  %2101 = getelementptr inbounds %struct.NodeInfo, %struct.NodeInfo* %2092, i64 1
  %2102 = ptrtoint %struct.NodeInfo* %2101 to i64
  %2103 = sdiv exact i64 %2069, -48
  %2104 = getelementptr inbounds %struct.NodeInfo, %struct.NodeInfo* %2092, i64 %2103
  %2105 = ptrtoint %struct.NodeInfo* %2104 to i64
  %2106 = icmp sgt i64 %2069, 0
  br i1 %2106, label %2107, label %2110

2107:                                             ; preds = %2089
  %2108 = bitcast %struct.NodeInfo* %2104 to i8*
  %2109 = inttoptr i64 %2068 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %2108, i8* align 8 %2109, i64 %2069, i1 false) #24
  br label %2110

2110:                                             ; preds = %2107, %2089
  store i64 %2105, i64* %193, align 8
  store i64 %2102, i64* %192, align 8
  store i64 %2094, i64* %194, align 8
  %2111 = icmp eq i64 %2068, 0
  br i1 %2111, label %2114, label %2112

2112:                                             ; preds = %2110
  %2113 = inttoptr i64 %2068 to i8*
  call void @_ZdlPv(i8* %2113) #29
  br label %2114

2114:                                             ; preds = %2057, %2110, %2112
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %195)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %187) #24
  br label %2115

2115:                                             ; preds = %2114, %1862
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %129) #24
  %2116 = load i32*, i32** %119, align 8
  %2117 = icmp eq i32* %2116, null
  br i1 %2117, label %2121, label %2118

2118:                                             ; preds = %2115
  %2119 = ptrtoint i32* %2116 to i64
  store i64 %2119, i64* %124, align 8
  %2120 = bitcast i32* %2116 to i8*
  call void @_ZdlPv(i8* %2120) #29
  br label %2121

2121:                                             ; preds = %2115, %2118
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %118) #24
  %2122 = load i32*, i32** %113, align 8
  %2123 = icmp eq i32* %2122, null
  br i1 %2123, label %2127, label %2124

2124:                                             ; preds = %2121
  %2125 = ptrtoint i32* %2122 to i64
  store i64 %2125, i64* %117, align 8
  %2126 = bitcast i32* %2122 to i8*
  call void @_ZdlPv(i8* %2126) #29
  br label %2127

2127:                                             ; preds = %2121, %2124
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %112) #24
  %2128 = load i32*, i32** %107, align 8
  %2129 = icmp eq i32* %2128, null
  br i1 %2129, label %2133, label %2130

2130:                                             ; preds = %2127
  %2131 = ptrtoint i32* %2128 to i64
  store i64 %2131, i64* %111, align 8
  %2132 = bitcast i32* %2128 to i8*
  call void @_ZdlPv(i8* %2132) #29
  br label %2133

2133:                                             ; preds = %2127, %2130
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %106) #24
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %96) #24
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %88) #24
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %80) #24
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %72) #24
  %2134 = load %struct.NodeInfo*, %struct.NodeInfo** %29, align 8
  br label %2135

2135:                                             ; preds = %196, %2133
  %2136 = phi %struct.NodeInfo* [ %198, %196 ], [ %2134, %2133 ]
  %2137 = load %struct.NodeInfo*, %struct.NodeInfo** %28, align 8
  %2138 = icmp eq %struct.NodeInfo* %2137, %2136
  br i1 %2138, label %2139, label %196

2139:                                             ; preds = %2135
  %2140 = icmp eq %struct.NodeInfo* %2136, null
  br i1 %2140, label %2145, label %2141

2141:                                             ; preds = %2139
  %2142 = ptrtoint %struct.NodeInfo* %2136 to i64
  %2143 = bitcast %struct.NodeInfo** %29 to i64*
  store i64 %2142, i64* %2143, align 8
  %2144 = bitcast %struct.NodeInfo* %2136 to i8*
  call void @_ZdlPv(i8* %2144) #29
  br label %2145

2145:                                             ; preds = %2139, %2141
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %27) #24
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZNSt3__16vectorIZN3jxl6N_SSE413FindBestSplitERNS1_11TreeSamplesEfRKNS0_INS1_21ModularMultiplierInfoENS_9allocatorIS5_EEEENS_5arrayINSB_IjLm2EEELm2EEEfPNS0_INS1_20PropertyDecisionNodeENS6_ISE_EEEEE8CostInfoNS6_ISI_EEE6resizeEm(%"class.std::__1::vector.90"*, i64) unnamed_addr #8 align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.90", %"class.std::__1::vector.90"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %struct.CostInfo** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.90"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = sdiv exact i64 %8, 12
  %10 = icmp ult i64 %9, %1
  %11 = inttoptr i64 %7 to %struct.CostInfo*
  br i1 %10, label %12, label %87

12:                                               ; preds = %2
  %13 = sub i64 %1, %9
  %14 = getelementptr inbounds %"class.std::__1::vector.90", %"class.std::__1::vector.90"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %15 = bitcast %struct.CostInfo** %14 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = sub i64 %16, %5
  %18 = sdiv exact i64 %17, 12
  %19 = icmp ult i64 %18, %13
  br i1 %19, label %35, label %20

20:                                               ; preds = %12
  %21 = inttoptr i64 %5 to %struct.CostInfo*
  %22 = getelementptr inbounds %struct.CostInfo, %struct.CostInfo* %21, i64 %13
  %23 = icmp eq i64 %13, 0
  br i1 %23, label %33, label %26

24:                                               ; preds = %26
  %25 = ptrtoint %struct.CostInfo* %22 to i64
  br label %33

26:                                               ; preds = %20, %26
  %27 = phi %struct.CostInfo* [ %31, %26 ], [ %21, %20 ]
  %28 = getelementptr inbounds %struct.CostInfo, %struct.CostInfo* %27, i64 0, i32 2
  store i32 0, i32* %28, align 4
  %29 = getelementptr inbounds %struct.CostInfo, %struct.CostInfo* %27, i64 0, i32 0
  store float 0x47EFFFFFE0000000, float* %29, align 4
  %30 = getelementptr inbounds %struct.CostInfo, %struct.CostInfo* %27, i64 0, i32 1
  store float 0.000000e+00, float* %30, align 4
  %31 = getelementptr inbounds %struct.CostInfo, %struct.CostInfo* %27, i64 1
  %32 = icmp eq %struct.CostInfo* %31, %22
  br i1 %32, label %24, label %26

33:                                               ; preds = %24, %20
  %34 = phi i64 [ %25, %24 ], [ %5, %20 ]
  store i64 %34, i64* %4, align 8
  br label %91

35:                                               ; preds = %12
  %36 = icmp ugt i64 %1, 1537228672809129301
  br i1 %36, label %37, label %39

37:                                               ; preds = %35
  %38 = bitcast %"class.std::__1::vector.90"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %38) #28
  unreachable

39:                                               ; preds = %35
  %40 = sub i64 %16, %7
  %41 = sdiv exact i64 %40, 12
  %42 = icmp ult i64 %41, 768614336404564650
  br i1 %42, label %43, label %48

43:                                               ; preds = %39
  %44 = shl nsw i64 %41, 1
  %45 = icmp ult i64 %44, %1
  %46 = select i1 %45, i64 %1, i64 %44
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %53, label %48

48:                                               ; preds = %43, %39
  %49 = phi i64 [ %46, %43 ], [ 1537228672809129301, %39 ]
  %50 = mul i64 %49, 12
  %51 = tail call i8* @_Znwm(i64 %50) #29
  %52 = bitcast i8* %51 to %struct.CostInfo*
  br label %53

53:                                               ; preds = %48, %43
  %54 = phi i64 [ %49, %48 ], [ 0, %43 ]
  %55 = phi %struct.CostInfo* [ %52, %48 ], [ null, %43 ]
  %56 = getelementptr inbounds %struct.CostInfo, %struct.CostInfo* %55, i64 %9
  %57 = getelementptr inbounds %struct.CostInfo, %struct.CostInfo* %55, i64 %1
  br label %58

58:                                               ; preds = %58, %53
  %59 = phi %struct.CostInfo* [ %63, %58 ], [ %56, %53 ]
  %60 = getelementptr inbounds %struct.CostInfo, %struct.CostInfo* %59, i64 0, i32 2
  store i32 0, i32* %60, align 4
  %61 = getelementptr inbounds %struct.CostInfo, %struct.CostInfo* %59, i64 0, i32 0
  store float 0x47EFFFFFE0000000, float* %61, align 4
  %62 = getelementptr inbounds %struct.CostInfo, %struct.CostInfo* %59, i64 0, i32 1
  store float 0.000000e+00, float* %62, align 4
  %63 = getelementptr inbounds %struct.CostInfo, %struct.CostInfo* %59, i64 1
  %64 = icmp eq %struct.CostInfo* %57, %63
  br i1 %64, label %65, label %58

65:                                               ; preds = %58
  %66 = getelementptr inbounds %struct.CostInfo, %struct.CostInfo* %55, i64 %54
  %67 = ptrtoint %struct.CostInfo* %66 to i64
  %68 = ptrtoint %struct.CostInfo* %57 to i64
  %69 = getelementptr inbounds %"class.std::__1::vector.90", %"class.std::__1::vector.90"* %0, i64 0, i32 0, i32 0
  %70 = load %struct.CostInfo*, %struct.CostInfo** %69, align 8
  %71 = load i64, i64* %4, align 8
  %72 = ptrtoint %struct.CostInfo* %70 to i64
  %73 = sub i64 %71, %72
  %74 = sdiv exact i64 %73, -12
  %75 = getelementptr inbounds %struct.CostInfo, %struct.CostInfo* %56, i64 %74
  %76 = ptrtoint %struct.CostInfo* %75 to i64
  %77 = icmp sgt i64 %73, 0
  br i1 %77, label %78, label %82

78:                                               ; preds = %65
  %79 = bitcast %struct.CostInfo* %75 to i8*
  %80 = bitcast %struct.CostInfo* %70 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %79, i8* align 4 %80, i64 %73, i1 false) #24
  %81 = load %struct.CostInfo*, %struct.CostInfo** %69, align 8
  br label %82

82:                                               ; preds = %78, %65
  %83 = phi %struct.CostInfo* [ %70, %65 ], [ %81, %78 ]
  store i64 %76, i64* %6, align 8
  store i64 %68, i64* %4, align 8
  store i64 %67, i64* %15, align 8
  %84 = icmp eq %struct.CostInfo* %83, null
  br i1 %84, label %91, label %85

85:                                               ; preds = %82
  %86 = bitcast %struct.CostInfo* %83 to i8*
  tail call void @_ZdlPv(i8* %86) #29
  br label %91

87:                                               ; preds = %2
  %88 = icmp ugt i64 %9, %1
  br i1 %88, label %89, label %91

89:                                               ; preds = %87
  %90 = getelementptr inbounds %struct.CostInfo, %struct.CostInfo* %11, i64 %1
  store %struct.CostInfo* %90, %struct.CostInfo** %3, align 8
  br label %91

91:                                               ; preds = %85, %82, %33, %87, %89
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i64 @_ZN3jxl6N_AVX26PaddedEm(i64) local_unnamed_addr #9 {
  %2 = add i64 %0, 7
  %3 = and i64 %2, -8
  ret i64 %3
}

; Function Attrs: nounwind ssp uwtable
define hidden float @_ZN3jxl6N_AVX212EstimateBitsEPKiPim(i32* readonly, i32*, i64) local_unnamed_addr #10 {
  %4 = getelementptr inbounds i32, i32* %0, i64 %2
  %5 = icmp eq i64 %2, 0
  br i1 %5, label %239, label %6

6:                                                ; preds = %3
  %7 = shl nsw i64 %2, 2
  %8 = add i64 %7, -4
  %9 = lshr exact i64 %8, 2
  %10 = add nuw nsw i64 %9, 1
  %11 = icmp ult i64 %10, 32
  br i1 %11, label %109, label %12

12:                                               ; preds = %6
  %13 = and i64 %10, 9223372036854775776
  %14 = getelementptr i32, i32* %0, i64 %13
  %15 = add nsw i64 %13, -32
  %16 = lshr exact i64 %15, 5
  %17 = add nuw nsw i64 %16, 1
  %18 = and i64 %17, 1
  %19 = icmp eq i64 %15, 0
  br i1 %19, label %65, label %20

20:                                               ; preds = %12
  %21 = sub nuw nsw i64 %17, %18
  br label %22

22:                                               ; preds = %22, %20
  %23 = phi i64 [ 0, %20 ], [ %62, %22 ]
  %24 = phi <8 x i32> [ zeroinitializer, %20 ], [ %58, %22 ]
  %25 = phi <8 x i32> [ zeroinitializer, %20 ], [ %59, %22 ]
  %26 = phi <8 x i32> [ zeroinitializer, %20 ], [ %60, %22 ]
  %27 = phi <8 x i32> [ zeroinitializer, %20 ], [ %61, %22 ]
  %28 = phi i64 [ %21, %20 ], [ %63, %22 ]
  %29 = getelementptr i32, i32* %0, i64 %23
  %30 = bitcast i32* %29 to <8 x i32>*
  %31 = load <8 x i32>, <8 x i32>* %30, align 4
  %32 = getelementptr i32, i32* %29, i64 8
  %33 = bitcast i32* %32 to <8 x i32>*
  %34 = load <8 x i32>, <8 x i32>* %33, align 4
  %35 = getelementptr i32, i32* %29, i64 16
  %36 = bitcast i32* %35 to <8 x i32>*
  %37 = load <8 x i32>, <8 x i32>* %36, align 4
  %38 = getelementptr i32, i32* %29, i64 24
  %39 = bitcast i32* %38 to <8 x i32>*
  %40 = load <8 x i32>, <8 x i32>* %39, align 4
  %41 = add nsw <8 x i32> %31, %24
  %42 = add nsw <8 x i32> %34, %25
  %43 = add nsw <8 x i32> %37, %26
  %44 = add nsw <8 x i32> %40, %27
  %45 = or i64 %23, 32
  %46 = getelementptr i32, i32* %0, i64 %45
  %47 = bitcast i32* %46 to <8 x i32>*
  %48 = load <8 x i32>, <8 x i32>* %47, align 4
  %49 = getelementptr i32, i32* %46, i64 8
  %50 = bitcast i32* %49 to <8 x i32>*
  %51 = load <8 x i32>, <8 x i32>* %50, align 4
  %52 = getelementptr i32, i32* %46, i64 16
  %53 = bitcast i32* %52 to <8 x i32>*
  %54 = load <8 x i32>, <8 x i32>* %53, align 4
  %55 = getelementptr i32, i32* %46, i64 24
  %56 = bitcast i32* %55 to <8 x i32>*
  %57 = load <8 x i32>, <8 x i32>* %56, align 4
  %58 = add nsw <8 x i32> %48, %41
  %59 = add nsw <8 x i32> %51, %42
  %60 = add nsw <8 x i32> %54, %43
  %61 = add nsw <8 x i32> %57, %44
  %62 = add i64 %23, 64
  %63 = add i64 %28, -2
  %64 = icmp eq i64 %63, 0
  br i1 %64, label %65, label %22, !llvm.loop !79

65:                                               ; preds = %22, %12
  %66 = phi <8 x i32> [ undef, %12 ], [ %58, %22 ]
  %67 = phi <8 x i32> [ undef, %12 ], [ %59, %22 ]
  %68 = phi <8 x i32> [ undef, %12 ], [ %60, %22 ]
  %69 = phi <8 x i32> [ undef, %12 ], [ %61, %22 ]
  %70 = phi i64 [ 0, %12 ], [ %62, %22 ]
  %71 = phi <8 x i32> [ zeroinitializer, %12 ], [ %58, %22 ]
  %72 = phi <8 x i32> [ zeroinitializer, %12 ], [ %59, %22 ]
  %73 = phi <8 x i32> [ zeroinitializer, %12 ], [ %60, %22 ]
  %74 = phi <8 x i32> [ zeroinitializer, %12 ], [ %61, %22 ]
  %75 = icmp eq i64 %18, 0
  br i1 %75, label %93, label %76

76:                                               ; preds = %65
  %77 = getelementptr i32, i32* %0, i64 %70
  %78 = getelementptr i32, i32* %77, i64 24
  %79 = bitcast i32* %78 to <8 x i32>*
  %80 = load <8 x i32>, <8 x i32>* %79, align 4
  %81 = add nsw <8 x i32> %80, %74
  %82 = getelementptr i32, i32* %77, i64 16
  %83 = bitcast i32* %82 to <8 x i32>*
  %84 = load <8 x i32>, <8 x i32>* %83, align 4
  %85 = add nsw <8 x i32> %84, %73
  %86 = getelementptr i32, i32* %77, i64 8
  %87 = bitcast i32* %86 to <8 x i32>*
  %88 = load <8 x i32>, <8 x i32>* %87, align 4
  %89 = add nsw <8 x i32> %88, %72
  %90 = bitcast i32* %77 to <8 x i32>*
  %91 = load <8 x i32>, <8 x i32>* %90, align 4
  %92 = add nsw <8 x i32> %91, %71
  br label %93

93:                                               ; preds = %65, %76
  %94 = phi <8 x i32> [ %66, %65 ], [ %92, %76 ]
  %95 = phi <8 x i32> [ %67, %65 ], [ %89, %76 ]
  %96 = phi <8 x i32> [ %68, %65 ], [ %85, %76 ]
  %97 = phi <8 x i32> [ %69, %65 ], [ %81, %76 ]
  %98 = add <8 x i32> %95, %94
  %99 = add <8 x i32> %96, %98
  %100 = add <8 x i32> %97, %99
  %101 = shufflevector <8 x i32> %100, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %102 = add <8 x i32> %100, %101
  %103 = shufflevector <8 x i32> %102, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %104 = add <8 x i32> %102, %103
  %105 = shufflevector <8 x i32> %104, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %106 = add <8 x i32> %104, %105
  %107 = extractelement <8 x i32> %106, i32 0
  %108 = icmp eq i64 %10, %13
  br i1 %108, label %119, label %109

109:                                              ; preds = %93, %6
  %110 = phi i32 [ 0, %6 ], [ %107, %93 ]
  %111 = phi i32* [ %0, %6 ], [ %14, %93 ]
  br label %112

112:                                              ; preds = %109, %112
  %113 = phi i32 [ %116, %112 ], [ %110, %109 ]
  %114 = phi i32* [ %117, %112 ], [ %111, %109 ]
  %115 = load i32, i32* %114, align 4
  %116 = add nsw i32 %115, %113
  %117 = getelementptr inbounds i32, i32* %114, i64 1
  %118 = icmp eq i32* %117, %4
  br i1 %118, label %119, label %112, !llvm.loop !80

119:                                              ; preds = %112, %93
  %120 = phi i32 [ %107, %93 ], [ %116, %112 ]
  %121 = add i32 %120, 4095
  %122 = ashr i32 %121, 12
  %123 = insertelement <8 x i32> undef, i32 %122, i32 0
  %124 = shufflevector <8 x i32> %123, <8 x i32> undef, <8 x i32> zeroinitializer
  br i1 %5, label %239, label %248

125:                                              ; preds = %248
  %126 = getelementptr inbounds i32, i32* %1, i64 %2
  %127 = shl nsw i64 %2, 2
  %128 = add i64 %127, -4
  %129 = lshr exact i64 %128, 2
  %130 = add nuw nsw i64 %129, 1
  %131 = icmp ult i64 %130, 32
  br i1 %131, label %229, label %132

132:                                              ; preds = %125
  %133 = and i64 %130, 9223372036854775776
  %134 = getelementptr i32, i32* %1, i64 %133
  %135 = add nsw i64 %133, -32
  %136 = lshr exact i64 %135, 5
  %137 = add nuw nsw i64 %136, 1
  %138 = and i64 %137, 1
  %139 = icmp eq i64 %135, 0
  br i1 %139, label %185, label %140

140:                                              ; preds = %132
  %141 = sub nuw nsw i64 %137, %138
  br label %142

142:                                              ; preds = %142, %140
  %143 = phi i64 [ 0, %140 ], [ %182, %142 ]
  %144 = phi <8 x i32> [ zeroinitializer, %140 ], [ %178, %142 ]
  %145 = phi <8 x i32> [ zeroinitializer, %140 ], [ %179, %142 ]
  %146 = phi <8 x i32> [ zeroinitializer, %140 ], [ %180, %142 ]
  %147 = phi <8 x i32> [ zeroinitializer, %140 ], [ %181, %142 ]
  %148 = phi i64 [ %141, %140 ], [ %183, %142 ]
  %149 = getelementptr i32, i32* %1, i64 %143
  %150 = bitcast i32* %149 to <8 x i32>*
  %151 = load <8 x i32>, <8 x i32>* %150, align 4
  %152 = getelementptr i32, i32* %149, i64 8
  %153 = bitcast i32* %152 to <8 x i32>*
  %154 = load <8 x i32>, <8 x i32>* %153, align 4
  %155 = getelementptr i32, i32* %149, i64 16
  %156 = bitcast i32* %155 to <8 x i32>*
  %157 = load <8 x i32>, <8 x i32>* %156, align 4
  %158 = getelementptr i32, i32* %149, i64 24
  %159 = bitcast i32* %158 to <8 x i32>*
  %160 = load <8 x i32>, <8 x i32>* %159, align 4
  %161 = add nsw <8 x i32> %151, %144
  %162 = add nsw <8 x i32> %154, %145
  %163 = add nsw <8 x i32> %157, %146
  %164 = add nsw <8 x i32> %160, %147
  %165 = or i64 %143, 32
  %166 = getelementptr i32, i32* %1, i64 %165
  %167 = bitcast i32* %166 to <8 x i32>*
  %168 = load <8 x i32>, <8 x i32>* %167, align 4
  %169 = getelementptr i32, i32* %166, i64 8
  %170 = bitcast i32* %169 to <8 x i32>*
  %171 = load <8 x i32>, <8 x i32>* %170, align 4
  %172 = getelementptr i32, i32* %166, i64 16
  %173 = bitcast i32* %172 to <8 x i32>*
  %174 = load <8 x i32>, <8 x i32>* %173, align 4
  %175 = getelementptr i32, i32* %166, i64 24
  %176 = bitcast i32* %175 to <8 x i32>*
  %177 = load <8 x i32>, <8 x i32>* %176, align 4
  %178 = add nsw <8 x i32> %168, %161
  %179 = add nsw <8 x i32> %171, %162
  %180 = add nsw <8 x i32> %174, %163
  %181 = add nsw <8 x i32> %177, %164
  %182 = add i64 %143, 64
  %183 = add i64 %148, -2
  %184 = icmp eq i64 %183, 0
  br i1 %184, label %185, label %142, !llvm.loop !81

185:                                              ; preds = %142, %132
  %186 = phi <8 x i32> [ undef, %132 ], [ %178, %142 ]
  %187 = phi <8 x i32> [ undef, %132 ], [ %179, %142 ]
  %188 = phi <8 x i32> [ undef, %132 ], [ %180, %142 ]
  %189 = phi <8 x i32> [ undef, %132 ], [ %181, %142 ]
  %190 = phi i64 [ 0, %132 ], [ %182, %142 ]
  %191 = phi <8 x i32> [ zeroinitializer, %132 ], [ %178, %142 ]
  %192 = phi <8 x i32> [ zeroinitializer, %132 ], [ %179, %142 ]
  %193 = phi <8 x i32> [ zeroinitializer, %132 ], [ %180, %142 ]
  %194 = phi <8 x i32> [ zeroinitializer, %132 ], [ %181, %142 ]
  %195 = icmp eq i64 %138, 0
  br i1 %195, label %213, label %196

196:                                              ; preds = %185
  %197 = getelementptr i32, i32* %1, i64 %190
  %198 = getelementptr i32, i32* %197, i64 24
  %199 = bitcast i32* %198 to <8 x i32>*
  %200 = load <8 x i32>, <8 x i32>* %199, align 4
  %201 = add nsw <8 x i32> %200, %194
  %202 = getelementptr i32, i32* %197, i64 16
  %203 = bitcast i32* %202 to <8 x i32>*
  %204 = load <8 x i32>, <8 x i32>* %203, align 4
  %205 = add nsw <8 x i32> %204, %193
  %206 = getelementptr i32, i32* %197, i64 8
  %207 = bitcast i32* %206 to <8 x i32>*
  %208 = load <8 x i32>, <8 x i32>* %207, align 4
  %209 = add nsw <8 x i32> %208, %192
  %210 = bitcast i32* %197 to <8 x i32>*
  %211 = load <8 x i32>, <8 x i32>* %210, align 4
  %212 = add nsw <8 x i32> %211, %191
  br label %213

213:                                              ; preds = %185, %196
  %214 = phi <8 x i32> [ %186, %185 ], [ %212, %196 ]
  %215 = phi <8 x i32> [ %187, %185 ], [ %209, %196 ]
  %216 = phi <8 x i32> [ %188, %185 ], [ %205, %196 ]
  %217 = phi <8 x i32> [ %189, %185 ], [ %201, %196 ]
  %218 = add <8 x i32> %215, %214
  %219 = add <8 x i32> %216, %218
  %220 = add <8 x i32> %217, %219
  %221 = shufflevector <8 x i32> %220, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %222 = add <8 x i32> %220, %221
  %223 = shufflevector <8 x i32> %222, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %224 = add <8 x i32> %222, %223
  %225 = shufflevector <8 x i32> %224, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %226 = add <8 x i32> %224, %225
  %227 = extractelement <8 x i32> %226, i32 0
  %228 = icmp eq i64 %130, %133
  br i1 %228, label %239, label %229

229:                                              ; preds = %213, %125
  %230 = phi i32 [ 0, %125 ], [ %227, %213 ]
  %231 = phi i32* [ %1, %125 ], [ %134, %213 ]
  br label %232

232:                                              ; preds = %229, %232
  %233 = phi i32 [ %236, %232 ], [ %230, %229 ]
  %234 = phi i32* [ %237, %232 ], [ %231, %229 ]
  %235 = load i32, i32* %234, align 4
  %236 = add nsw i32 %235, %233
  %237 = getelementptr inbounds i32, i32* %234, i64 1
  %238 = icmp eq i32* %237, %126
  br i1 %238, label %239, label %232, !llvm.loop !82

239:                                              ; preds = %232, %213, %3, %119
  %240 = phi i32 [ 0, %119 ], [ 0, %3 ], [ %227, %213 ], [ %236, %232 ]
  %241 = sext i32 %240 to i64
  %242 = uitofp i64 %241 to float
  %243 = fdiv float 1.000000e+00, %242
  %244 = insertelement <8 x float> undef, float %243, i32 0
  %245 = shufflevector <8 x float> %244, <8 x float> undef, <8 x i32> zeroinitializer
  %246 = insertelement <8 x i32> undef, i32 %240, i32 0
  %247 = shufflevector <8 x i32> %246, <8 x i32> undef, <8 x i32> zeroinitializer
  br i1 %5, label %261, label %270

248:                                              ; preds = %119, %248
  %249 = phi i64 [ %259, %248 ], [ 0, %119 ]
  %250 = getelementptr inbounds i32, i32* %0, i64 %249
  %251 = bitcast i32* %250 to <8 x i32>*
  %252 = load <8 x i32>, <8 x i32>* %251, align 1, !alias.scope !83, !noalias !86
  %253 = icmp eq <8 x i32> %252, zeroinitializer
  %254 = icmp sgt <8 x i32> %124, %252
  %255 = select <8 x i1> %254, <8 x i32> %124, <8 x i32> %252
  %256 = select <8 x i1> %253, <8 x i32> zeroinitializer, <8 x i32> %255
  %257 = getelementptr inbounds i32, i32* %1, i64 %249
  %258 = bitcast i32* %257 to <8 x i32>*
  store <8 x i32> %256, <8 x i32>* %258, align 1, !alias.scope !88
  %259 = add i64 %249, 8
  %260 = icmp ult i64 %259, %2
  br i1 %260, label %248, label %125

261:                                              ; preds = %270, %239
  %262 = phi <8 x float> [ zeroinitializer, %239 ], [ %301, %270 ]
  %263 = shufflevector <8 x float> %262, <8 x float> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3>
  %264 = fadd <8 x float> %262, %263
  %265 = shufflevector <8 x float> %264, <8 x float> undef, <8 x i32> <i32 2, i32 3, i32 0, i32 1, i32 6, i32 7, i32 4, i32 5>
  %266 = fadd <8 x float> %264, %265
  %267 = shufflevector <8 x float> %266, <8 x float> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %268 = fadd <8 x float> %266, %267
  %269 = extractelement <8 x float> %268, i32 0
  ret float %269

270:                                              ; preds = %239, %270
  %271 = phi i64 [ %302, %270 ], [ 0, %239 ]
  %272 = phi <8 x float> [ %301, %270 ], [ zeroinitializer, %239 ]
  %273 = getelementptr inbounds i32, i32* %0, i64 %271
  %274 = bitcast i32* %273 to <8 x i32>*
  %275 = load <8 x i32>, <8 x i32>* %274, align 1, !alias.scope !91, !noalias !94
  %276 = sitofp <8 x i32> %275 to <8 x float>
  %277 = getelementptr inbounds i32, i32* %1, i64 %271
  %278 = bitcast i32* %277 to <8 x i32>*
  %279 = load <8 x i32>, <8 x i32>* %278, align 1, !alias.scope !96, !noalias !99
  %280 = sitofp <8 x i32> %279 to <8 x float>
  %281 = fmul <8 x float> %245, %280
  %282 = icmp eq <8 x i32> %279, %247
  %283 = bitcast <8 x float> %281 to <8 x i32>
  %284 = add <8 x i32> %283, <i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811>
  %285 = ashr <8 x i32> %284, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %286 = and <8 x i32> %284, <i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608>
  %287 = sub <8 x i32> %283, %286
  %288 = bitcast <8 x i32> %287 to <8 x float>
  %289 = sitofp <8 x i32> %285 to <8 x float>
  %290 = fadd <8 x float> %288, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  fence acq_rel
  %291 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %290, <8 x float> <float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000>, <8 x float> <float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000>) #24
  %292 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %290, <8 x float> <float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000>, <8 x float> <float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000>) #24
  fence acq_rel
  %293 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %291, <8 x float> %290, <8 x float> <float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000>) #24
  %294 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %292, <8 x float> %290, <8 x float> <float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000>) #24
  fence acq_rel
  %295 = fdiv <8 x float> %293, %294
  %296 = fadd <8 x float> %295, %289
  %297 = fcmp oeq <8 x float> %276, zeroinitializer
  %298 = select <8 x i1> %282, <8 x float> zeroinitializer, <8 x float> %296
  %299 = fmul <8 x float> %298, %276
  %300 = select <8 x i1> %297, <8 x float> zeroinitializer, <8 x float> %299
  %301 = fsub <8 x float> %272, %300
  %302 = add i64 %271, 8
  %303 = icmp ult i64 %302, %2
  br i1 %303, label %270, label %261
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_AVX213MakeSplitNodeEmiiNS_9PredictorElS1_lPNSt3__16vectorINS_20PropertyDecisionNodeENS2_9allocatorIS4_EEEE(i64, i32, i32, i32, i64, i32, i64, %"class.std::__1::vector"*) local_unnamed_addr #11 {
  %9 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %7, i64 0, i32 0, i32 1
  %10 = bitcast %"struct.jxl::PropertyDecisionNode"** %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = bitcast %"class.std::__1::vector"* %7 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = sub i64 %11, %13
  %15 = sdiv exact i64 %14, 40
  %16 = trunc i64 %15 to i32
  %17 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %7, i64 0, i32 0, i32 0
  %18 = inttoptr i64 %13 to %"struct.jxl::PropertyDecisionNode"*
  %19 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %18, i64 %0, i32 3
  store i32 %16, i32* %19, align 8
  %20 = load i64, i64* %10, align 8
  %21 = load i64, i64* %12, align 8
  %22 = sub i64 %20, %21
  %23 = sdiv exact i64 %22, 40
  %24 = trunc i64 %23 to i32
  %25 = add i32 %24, 1
  %26 = inttoptr i64 %21 to %"struct.jxl::PropertyDecisionNode"*
  %27 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %26, i64 %0, i32 4
  store i32 %25, i32* %27, align 4
  %28 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %17, align 8
  %29 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %28, i64 %0, i32 0
  store i32 %2, i32* %29, align 8
  %30 = trunc i32 %1 to i16
  %31 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %17, align 8
  %32 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %31, i64 %0, i32 1
  store i16 %30, i16* %32, align 4
  tail call void @_ZNSt3__16vectorIN3jxl20PropertyDecisionNodeENS_9allocatorIS2_EEE12emplace_backIJEEEvDpOT_(%"class.std::__1::vector"* %7)
  %33 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %9, align 8
  %34 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %33, i64 -1, i32 1
  store i16 -1, i16* %34, align 4
  %35 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %9, align 8
  %36 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %35, i64 -1, i32 5
  store i32 %5, i32* %36, align 8
  %37 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %9, align 8
  %38 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %37, i64 -1, i32 7
  store i64 %6, i64* %38, align 8
  %39 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %9, align 8
  %40 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %39, i64 -1, i32 8
  store i32 1, i32* %40, align 8
  tail call void @_ZNSt3__16vectorIN3jxl20PropertyDecisionNodeENS_9allocatorIS2_EEE12emplace_backIJEEEvDpOT_(%"class.std::__1::vector"* %7)
  %41 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %9, align 8
  %42 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %41, i64 -1, i32 1
  store i16 -1, i16* %42, align 4
  %43 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %9, align 8
  %44 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %43, i64 -1, i32 5
  store i32 %3, i32* %44, align 8
  %45 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %9, align 8
  %46 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %45, i64 -1, i32 7
  store i64 %4, i64* %46, align 8
  %47 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %9, align 8
  %48 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %47, i64 -1, i32 8
  store i32 1, i32* %48, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden i32 @_ZN3jxl6N_AVX213BoxIntersectsENSt3__15arrayINS2_IjLm2EEELm2EEES4_RjS5_(i64, i64, i64, i64, i32* nocapture dereferenceable(4), i32* nocapture dereferenceable(4)) local_unnamed_addr #12 {
  %7 = trunc i64 %2 to i32
  %8 = lshr i64 %0, 32
  %9 = trunc i64 %8 to i32
  %10 = icmp ult i32 %7, %9
  %11 = lshr i64 %2, 32
  %12 = trunc i64 %11 to i32
  %13 = trunc i64 %0 to i32
  %14 = trunc i64 %3 to i32
  %15 = lshr i64 %1, 32
  %16 = trunc i64 %15 to i32
  %17 = lshr i64 %3, 32
  %18 = trunc i64 %17 to i32
  %19 = trunc i64 %1 to i32
  %20 = icmp ugt i32 %12, %13
  %21 = and i1 %10, %20
  br i1 %21, label %22, label %34

22:                                               ; preds = %6
  %23 = icmp ugt i32 %7, %13
  br i1 %23, label %26, label %24

24:                                               ; preds = %22
  %25 = icmp ult i32 %12, %9
  br i1 %25, label %26, label %29

26:                                               ; preds = %24, %22
  %27 = phi i32 [ %7, %22 ], [ %12, %24 ]
  store i32 0, i32* %4, align 4
  %28 = add i32 %27, -1
  store i32 %28, i32* %5, align 4
  br label %29

29:                                               ; preds = %26, %24
  %30 = phi i8 [ 0, %24 ], [ 1, %26 ]
  %31 = icmp ult i32 %14, %16
  %32 = icmp ugt i32 %18, %19
  %33 = and i1 %31, %32
  br i1 %33, label %36, label %34

34:                                               ; preds = %6, %29, %43
  %35 = phi i32 [ %47, %43 ], [ 0, %29 ], [ 0, %6 ]
  ret i32 %35

36:                                               ; preds = %29
  %37 = icmp ugt i32 %14, %19
  br i1 %37, label %40, label %38

38:                                               ; preds = %36
  %39 = icmp ult i32 %18, %16
  br i1 %39, label %40, label %43

40:                                               ; preds = %36, %38
  %41 = phi i32 [ %18, %38 ], [ %14, %36 ]
  store i32 1, i32* %4, align 4
  %42 = add i32 %41, -1
  store i32 %42, i32* %5, align 4
  br label %43

43:                                               ; preds = %40, %38
  %44 = phi i8 [ %30, %38 ], [ 1, %40 ]
  %45 = and i8 %44, 1
  %46 = icmp eq i8 %45, 0
  %47 = select i1 %46, i32 2, i32 1
  br label %34
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_AVX216SplitTreeSamplesERNS_11TreeSamplesEmmmm(%"struct.jxl::TreeSamples"* dereferenceable(200), i64, i64, i64, i64) local_unnamed_addr #11 {
  %6 = add i64 %1, 1
  %7 = icmp ult i64 %6, %3
  br i1 %7, label %8, label %153

8:                                                ; preds = %5
  %9 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 0, i32 0, i32 0
  %10 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 0, i32 0, i32 1
  %11 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 2, i32 0, i32 0
  %12 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 2, i32 0, i32 1
  %13 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 1, i32 0, i32 0
  br label %14

14:                                               ; preds = %8, %148
  %15 = phi i64 [ %6, %8 ], [ %151, %148 ]
  %16 = phi i64 [ %1, %8 ], [ %150, %148 ]
  %17 = phi i64 [ %3, %8 ], [ %149, %148 ]
  %18 = phi i64 [ -7723592293110705685, %8 ], [ %19, %148 ]
  %19 = phi i64 [ -4658895280553007687, %8 ], [ %32, %148 ]
  %20 = icmp ugt i64 %17, %16
  br i1 %20, label %24, label %21

21:                                               ; preds = %14
  %22 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.1, i64 0, i64 0), i32 154, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i64 0, i64 0)) #24
  %23 = tail call zeroext i1 @_ZN3jxl5AbortEv() #28
  unreachable

24:                                               ; preds = %14
  %25 = add i64 %18, %19
  %26 = shl i64 %18, 23
  %27 = xor i64 %26, %18
  %28 = lshr i64 %27, 18
  %29 = lshr i64 %19, 5
  %30 = xor i64 %29, %19
  %31 = xor i64 %30, %27
  %32 = xor i64 %31, %28
  %33 = sub i64 %17, %16
  %34 = urem i64 %25, %33
  %35 = add i64 %34, %16
  %36 = icmp eq i64 %34, 0
  br i1 %36, label %73, label %37

37:                                               ; preds = %24
  %38 = load %"class.std::__1::vector.8"*, %"class.std::__1::vector.8"** %9, align 8
  %39 = load %"class.std::__1::vector.8"*, %"class.std::__1::vector.8"** %10, align 8
  %40 = icmp eq %"class.std::__1::vector.8"* %38, %39
  br i1 %40, label %41, label %45

41:                                               ; preds = %45, %37
  %42 = load %"class.std::__1::vector.29"*, %"class.std::__1::vector.29"** %11, align 8
  %43 = load %"class.std::__1::vector.29"*, %"class.std::__1::vector.29"** %12, align 8
  %44 = icmp eq %"class.std::__1::vector.29"* %42, %43
  br i1 %44, label %57, label %63

45:                                               ; preds = %37, %45
  %46 = phi %"class.std::__1::vector.8"* [ %55, %45 ], [ %38, %37 ]
  %47 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %46, i64 0, i32 0, i32 0
  %48 = load %"struct.jxl::TreeSamples::ResidualToken"*, %"struct.jxl::TreeSamples::ResidualToken"** %47, align 8
  %49 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %48, i64 %16
  %50 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %48, i64 %35
  %51 = bitcast %"struct.jxl::TreeSamples::ResidualToken"* %49 to i16*
  %52 = load i16, i16* %51, align 1
  %53 = bitcast %"struct.jxl::TreeSamples::ResidualToken"* %50 to i16*
  %54 = load i16, i16* %53, align 1
  store i16 %54, i16* %51, align 1
  store i16 %52, i16* %53, align 1
  %55 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %46, i64 1
  %56 = icmp eq %"class.std::__1::vector.8"* %55, %39
  br i1 %56, label %41, label %45

57:                                               ; preds = %63, %41
  %58 = load i16*, i16** %13, align 8
  %59 = getelementptr inbounds i16, i16* %58, i64 %16
  %60 = getelementptr inbounds i16, i16* %58, i64 %35
  %61 = load i16, i16* %59, align 2
  %62 = load i16, i16* %60, align 2
  store i16 %62, i16* %59, align 2
  store i16 %61, i16* %60, align 2
  br label %73

63:                                               ; preds = %41, %63
  %64 = phi %"class.std::__1::vector.29"* [ %71, %63 ], [ %42, %41 ]
  %65 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %64, i64 0, i32 0, i32 0
  %66 = load i8*, i8** %65, align 8
  %67 = getelementptr inbounds i8, i8* %66, i64 %16
  %68 = getelementptr inbounds i8, i8* %66, i64 %35
  %69 = load i8, i8* %67, align 1
  %70 = load i8, i8* %68, align 1
  store i8 %70, i8* %67, align 1
  store i8 %69, i8* %68, align 1
  %71 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %64, i64 1
  %72 = icmp eq %"class.std::__1::vector.29"* %71, %43
  br i1 %72, label %57, label %63

73:                                               ; preds = %24, %57
  %74 = icmp ult i64 %15, %17
  br i1 %74, label %79, label %75

75:                                               ; preds = %141, %73
  %76 = phi i64 [ %16, %73 ], [ %142, %141 ]
  %77 = phi i64 [ %15, %73 ], [ %143, %141 ]
  %78 = icmp ugt i64 %76, %2
  br i1 %78, label %148, label %146

79:                                               ; preds = %73, %141
  %80 = phi i64 [ %144, %141 ], [ %15, %73 ]
  %81 = phi i64 [ %143, %141 ], [ %15, %73 ]
  %82 = phi i64 [ %142, %141 ], [ %16, %73 ]
  %83 = load %"class.std::__1::vector.29"*, %"class.std::__1::vector.29"** %11, align 8
  %84 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %83, i64 %4, i32 0, i32 0
  %85 = load i8*, i8** %84, align 8
  %86 = getelementptr inbounds i8, i8* %85, i64 %80
  %87 = load i8, i8* %86, align 1
  %88 = zext i8 %87 to i32
  %89 = getelementptr inbounds i8, i8* %85, i64 %82
  %90 = load i8, i8* %89, align 1
  %91 = zext i8 %90 to i32
  %92 = sub nsw i32 %88, %91
  %93 = icmp slt i32 %92, 0
  br i1 %93, label %94, label %97

94:                                               ; preds = %79
  tail call void @_ZN3jxl11TreeSamples12ThreeShuffleEmmm(%"struct.jxl::TreeSamples"* %0, i64 %82, i64 %81, i64 %80)
  %95 = add i64 %82, 1
  %96 = add i64 %81, 1
  br label %141

97:                                               ; preds = %79
  %98 = icmp eq i32 %92, 0
  br i1 %98, label %99, label %141

99:                                               ; preds = %97
  %100 = icmp eq i64 %81, %80
  br i1 %100, label %139, label %101

101:                                              ; preds = %99
  %102 = load %"class.std::__1::vector.8"*, %"class.std::__1::vector.8"** %9, align 8
  %103 = load %"class.std::__1::vector.8"*, %"class.std::__1::vector.8"** %10, align 8
  %104 = icmp eq %"class.std::__1::vector.8"* %102, %103
  br i1 %104, label %107, label %111

105:                                              ; preds = %111
  %106 = load %"class.std::__1::vector.29"*, %"class.std::__1::vector.29"** %11, align 8
  br label %107

107:                                              ; preds = %105, %101
  %108 = phi %"class.std::__1::vector.29"* [ %106, %105 ], [ %83, %101 ]
  %109 = load %"class.std::__1::vector.29"*, %"class.std::__1::vector.29"** %12, align 8
  %110 = icmp eq %"class.std::__1::vector.29"* %108, %109
  br i1 %110, label %123, label %129

111:                                              ; preds = %101, %111
  %112 = phi %"class.std::__1::vector.8"* [ %121, %111 ], [ %102, %101 ]
  %113 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %112, i64 0, i32 0, i32 0
  %114 = load %"struct.jxl::TreeSamples::ResidualToken"*, %"struct.jxl::TreeSamples::ResidualToken"** %113, align 8
  %115 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %114, i64 %81
  %116 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %114, i64 %80
  %117 = bitcast %"struct.jxl::TreeSamples::ResidualToken"* %115 to i16*
  %118 = load i16, i16* %117, align 1
  %119 = bitcast %"struct.jxl::TreeSamples::ResidualToken"* %116 to i16*
  %120 = load i16, i16* %119, align 1
  store i16 %120, i16* %117, align 1
  store i16 %118, i16* %119, align 1
  %121 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %112, i64 1
  %122 = icmp eq %"class.std::__1::vector.8"* %121, %103
  br i1 %122, label %105, label %111

123:                                              ; preds = %129, %107
  %124 = load i16*, i16** %13, align 8
  %125 = getelementptr inbounds i16, i16* %124, i64 %81
  %126 = getelementptr inbounds i16, i16* %124, i64 %80
  %127 = load i16, i16* %125, align 2
  %128 = load i16, i16* %126, align 2
  store i16 %128, i16* %125, align 2
  store i16 %127, i16* %126, align 2
  br label %139

129:                                              ; preds = %107, %129
  %130 = phi %"class.std::__1::vector.29"* [ %137, %129 ], [ %108, %107 ]
  %131 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %130, i64 0, i32 0, i32 0
  %132 = load i8*, i8** %131, align 8
  %133 = getelementptr inbounds i8, i8* %132, i64 %81
  %134 = getelementptr inbounds i8, i8* %132, i64 %80
  %135 = load i8, i8* %133, align 1
  %136 = load i8, i8* %134, align 1
  store i8 %136, i8* %133, align 1
  store i8 %135, i8* %134, align 1
  %137 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %130, i64 1
  %138 = icmp eq %"class.std::__1::vector.29"* %137, %109
  br i1 %138, label %123, label %129

139:                                              ; preds = %99, %123
  %140 = add i64 %81, 1
  br label %141

141:                                              ; preds = %97, %139, %94
  %142 = phi i64 [ %95, %94 ], [ %82, %139 ], [ %82, %97 ]
  %143 = phi i64 [ %96, %94 ], [ %140, %139 ], [ %81, %97 ]
  %144 = add nuw i64 %80, 1
  %145 = icmp eq i64 %144, %17
  br i1 %145, label %75, label %79

146:                                              ; preds = %75
  %147 = icmp ult i64 %77, %2
  br i1 %147, label %148, label %153

148:                                              ; preds = %75, %146
  %149 = phi i64 [ %76, %75 ], [ %17, %146 ]
  %150 = phi i64 [ %16, %75 ], [ %77, %146 ]
  %151 = add i64 %150, 1
  %152 = icmp ugt i64 %149, %151
  br i1 %152, label %14, label %153

153:                                              ; preds = %148, %146, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_AVX213FindBestSplitERNS_11TreeSamplesEfRKNSt3__16vectorINS_21ModularMultiplierInfoENS3_9allocatorIS5_EEEENS3_5arrayINSB_IjLm2EEELm2EEEfPNS4_INS_20PropertyDecisionNodeENS6_ISE_EEEE(%"struct.jxl::TreeSamples"* dereferenceable(200), float, %"class.std::__1::vector.69"* nocapture readonly dereferenceable(24), i64, i64, float, %"class.std::__1::vector"*) #10 {
  %8 = alloca %"class.std::__1::vector.102", align 8
  %9 = alloca %struct.SplitInfo.110, align 8
  %10 = alloca %struct.SplitInfo.110, align 8
  %11 = alloca %struct.SplitInfo.110, align 8
  %12 = alloca %struct.SplitInfo.110, align 8
  %13 = alloca %"class.std::__1::vector.43", align 8
  %14 = alloca %"class.std::__1::vector.43", align 8
  %15 = alloca %"class.std::__1::vector.55", align 8
  %16 = alloca %struct.SplitInfo.110, align 8
  %17 = alloca %"class.std::__1::vector.43", align 8
  %18 = alloca %"class.std::__1::vector.43", align 8
  %19 = alloca %"class.std::__1::vector.83", align 8
  %20 = alloca %"class.std::__1::vector.111", align 8
  %21 = alloca %"class.std::__1::vector.111", align 8
  %22 = alloca %"class.std::__1::vector.43", align 8
  %23 = alloca %"class.std::__1::vector.43", align 8
  %24 = alloca %"struct.std::__1::array", align 8
  %25 = alloca [2 x %"struct.std::__1::array.5"], align 8
  %26 = alloca [2 x %"struct.std::__1::array.5"], align 8
  %27 = bitcast %"class.std::__1::vector.102"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %27) #24
  %28 = getelementptr inbounds %"class.std::__1::vector.102", %"class.std::__1::vector.102"* %8, i64 0, i32 0, i32 0
  %29 = getelementptr inbounds %"class.std::__1::vector.102", %"class.std::__1::vector.102"* %8, i64 0, i32 0, i32 1
  %30 = getelementptr inbounds %"class.std::__1::vector.102", %"class.std::__1::vector.102"* %8, i64 0, i32 0, i32 2, i32 0, i32 0
  %31 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 1
  %32 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 1, i32 0, i32 1
  %33 = bitcast i16** %32 to i64*
  %34 = load i64, i64* %33, align 8
  %35 = bitcast %"class.std::__1::vector.20"* %31 to i64*
  %36 = load i64, i64* %35, align 8
  %37 = sub i64 %34, %36
  %38 = ashr exact i64 %37, 1
  %39 = bitcast %struct.NodeInfo.104** %29 to i64*
  %40 = bitcast %"class.std::__1::vector.102"* %8 to i64*
  %41 = bitcast %struct.NodeInfo.104** %30 to i64*
  %42 = tail call i8* @_Znwm(i64 48) #29
  %43 = getelementptr inbounds i8, i8* %42, i64 48
  %44 = ptrtoint i8* %43 to i64
  %45 = getelementptr inbounds i8, i8* %42, i64 16
  %46 = bitcast i8* %45 to i64*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %42, i8 0, i64 16, i1 false)
  store i64 %38, i64* %46, align 8
  %47 = getelementptr inbounds i8, i8* %42, i64 24
  %48 = bitcast i8* %47 to i64*
  store i64 0, i64* %48, align 8
  %49 = getelementptr inbounds i8, i8* %42, i64 32
  %50 = bitcast i8* %49 to i64*
  store i64 %3, i64* %50, align 8
  %51 = getelementptr inbounds i8, i8* %42, i64 40
  %52 = bitcast i8* %51 to i64*
  store i64 %4, i64* %52, align 8
  %53 = ptrtoint i8* %42 to i64
  store i64 %53, i64* %40, align 8
  store i64 %44, i64* %39, align 8
  store i64 %44, i64* %41, align 8
  %54 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 5, i32 0, i32 1
  %55 = bitcast i32** %54 to i64*
  %56 = load i64, i64* %55, align 8
  %57 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 5
  %58 = bitcast %"class.std::__1::vector.62"* %57 to i64*
  %59 = load i64, i64* %58, align 8
  %60 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 4, i32 0, i32 1
  %61 = bitcast i32** %60 to i64*
  %62 = load i64, i64* %61, align 8
  %63 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 4
  %64 = bitcast %"class.std::__1::vector.55"* %63 to i64*
  %65 = load i64, i64* %64, align 8
  %66 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 5, i32 0, i32 1
  %67 = sub i64 %56, %59
  %68 = ashr exact i64 %67, 2
  %69 = sub i64 %62, %65
  %70 = ashr exact i64 %69, 2
  %71 = bitcast i8* %43 to %struct.NodeInfo.104*
  %72 = bitcast %struct.SplitInfo.110* %9 to i8*
  %73 = getelementptr inbounds %struct.SplitInfo.110, %struct.SplitInfo.110* %9, i64 0, i32 0
  %74 = getelementptr inbounds %struct.SplitInfo.110, %struct.SplitInfo.110* %9, i64 0, i32 1
  %75 = getelementptr inbounds %struct.SplitInfo.110, %struct.SplitInfo.110* %9, i64 0, i32 2
  %76 = getelementptr inbounds %struct.SplitInfo.110, %struct.SplitInfo.110* %9, i64 0, i32 3
  %77 = getelementptr inbounds %struct.SplitInfo.110, %struct.SplitInfo.110* %9, i64 0, i32 4
  %78 = getelementptr inbounds %struct.SplitInfo.110, %struct.SplitInfo.110* %9, i64 0, i32 5
  %79 = getelementptr inbounds %struct.SplitInfo.110, %struct.SplitInfo.110* %9, i64 0, i32 6
  %80 = bitcast %struct.SplitInfo.110* %10 to i8*
  %81 = getelementptr inbounds %struct.SplitInfo.110, %struct.SplitInfo.110* %10, i64 0, i32 0
  %82 = getelementptr inbounds %struct.SplitInfo.110, %struct.SplitInfo.110* %10, i64 0, i32 1
  %83 = getelementptr inbounds %struct.SplitInfo.110, %struct.SplitInfo.110* %10, i64 0, i32 2
  %84 = getelementptr inbounds %struct.SplitInfo.110, %struct.SplitInfo.110* %10, i64 0, i32 3
  %85 = getelementptr inbounds %struct.SplitInfo.110, %struct.SplitInfo.110* %10, i64 0, i32 4
  %86 = getelementptr inbounds %struct.SplitInfo.110, %struct.SplitInfo.110* %10, i64 0, i32 5
  %87 = getelementptr inbounds %struct.SplitInfo.110, %struct.SplitInfo.110* %10, i64 0, i32 6
  %88 = bitcast %struct.SplitInfo.110* %11 to i8*
  %89 = getelementptr inbounds %struct.SplitInfo.110, %struct.SplitInfo.110* %11, i64 0, i32 0
  %90 = getelementptr inbounds %struct.SplitInfo.110, %struct.SplitInfo.110* %11, i64 0, i32 1
  %91 = getelementptr inbounds %struct.SplitInfo.110, %struct.SplitInfo.110* %11, i64 0, i32 2
  %92 = getelementptr inbounds %struct.SplitInfo.110, %struct.SplitInfo.110* %11, i64 0, i32 3
  %93 = getelementptr inbounds %struct.SplitInfo.110, %struct.SplitInfo.110* %11, i64 0, i32 4
  %94 = getelementptr inbounds %struct.SplitInfo.110, %struct.SplitInfo.110* %11, i64 0, i32 5
  %95 = getelementptr inbounds %struct.SplitInfo.110, %struct.SplitInfo.110* %11, i64 0, i32 6
  %96 = bitcast %struct.SplitInfo.110* %12 to i8*
  %97 = getelementptr inbounds %struct.SplitInfo.110, %struct.SplitInfo.110* %12, i64 0, i32 0
  %98 = getelementptr inbounds %struct.SplitInfo.110, %struct.SplitInfo.110* %12, i64 0, i32 1
  %99 = getelementptr inbounds %struct.SplitInfo.110, %struct.SplitInfo.110* %12, i64 0, i32 2
  %100 = getelementptr inbounds %struct.SplitInfo.110, %struct.SplitInfo.110* %12, i64 0, i32 3
  %101 = getelementptr inbounds %struct.SplitInfo.110, %struct.SplitInfo.110* %12, i64 0, i32 4
  %102 = getelementptr inbounds %struct.SplitInfo.110, %struct.SplitInfo.110* %12, i64 0, i32 5
  %103 = getelementptr inbounds %struct.SplitInfo.110, %struct.SplitInfo.110* %12, i64 0, i32 6
  %104 = icmp eq i64 %67, 0
  %105 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 0, i32 0, i32 0
  %106 = bitcast %"class.std::__1::vector.43"* %13 to i8*
  %107 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %13, i64 0, i32 0, i32 0
  %108 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %13, i64 0, i32 0, i32 1
  %109 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %13, i64 0, i32 0, i32 2, i32 0, i32 0
  %110 = bitcast %"class.std::__1::vector.43"* %13 to i8**
  %111 = bitcast i32** %108 to i64*
  %112 = bitcast %"class.std::__1::vector.43"* %14 to i8*
  %113 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %14, i64 0, i32 0, i32 0
  %114 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %14, i64 0, i32 0, i32 1
  %115 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %14, i64 0, i32 0, i32 2, i32 0, i32 0
  %116 = bitcast %"class.std::__1::vector.43"* %14 to i8**
  %117 = bitcast i32** %114 to i64*
  %118 = bitcast %"class.std::__1::vector.55"* %15 to i8*
  %119 = getelementptr inbounds %"class.std::__1::vector.55", %"class.std::__1::vector.55"* %15, i64 0, i32 0, i32 0
  %120 = getelementptr inbounds %"class.std::__1::vector.55", %"class.std::__1::vector.55"* %15, i64 0, i32 0, i32 1
  %121 = getelementptr inbounds %"class.std::__1::vector.55", %"class.std::__1::vector.55"* %15, i64 0, i32 0, i32 2, i32 0, i32 0
  %122 = icmp ugt i64 %68, 4611686018427387903
  %123 = bitcast %"class.std::__1::vector.55"* %15 to i8**
  %124 = bitcast i32** %120 to i64*
  %125 = add nsw i64 %68, -1
  %126 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 1, i32 0, i32 0
  %127 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %6, i64 0, i32 0, i32 0
  %128 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 5, i32 0, i32 0
  %129 = bitcast %struct.SplitInfo.110* %16 to i8*
  %130 = getelementptr inbounds %struct.SplitInfo.110, %struct.SplitInfo.110* %16, i64 0, i32 0
  %131 = getelementptr inbounds %struct.SplitInfo.110, %struct.SplitInfo.110* %16, i64 0, i32 1
  %132 = getelementptr inbounds %struct.SplitInfo.110, %struct.SplitInfo.110* %16, i64 0, i32 2
  %133 = getelementptr inbounds %struct.SplitInfo.110, %struct.SplitInfo.110* %16, i64 0, i32 3
  %134 = getelementptr inbounds %struct.SplitInfo.110, %struct.SplitInfo.110* %16, i64 0, i32 4
  %135 = getelementptr inbounds %struct.SplitInfo.110, %struct.SplitInfo.110* %16, i64 0, i32 5
  %136 = getelementptr inbounds %struct.SplitInfo.110, %struct.SplitInfo.110* %16, i64 0, i32 6
  %137 = getelementptr inbounds %"class.std::__1::vector.69", %"class.std::__1::vector.69"* %2, i64 0, i32 0, i32 1
  %138 = bitcast %"struct.jxl::ModularMultiplierInfo"** %137 to i64*
  %139 = bitcast %"class.std::__1::vector.69"* %2 to i64*
  %140 = bitcast %"class.std::__1::vector.43"* %17 to i8*
  %141 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %17, i64 0, i32 0, i32 0
  %142 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %17, i64 0, i32 0, i32 1
  %143 = bitcast %"class.std::__1::vector.43"* %18 to i8*
  %144 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %18, i64 0, i32 0, i32 0
  %145 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %18, i64 0, i32 0, i32 1
  %146 = bitcast %"class.std::__1::vector.83"* %19 to i8*
  %147 = getelementptr inbounds %"class.std::__1::vector.83", %"class.std::__1::vector.83"* %19, i64 0, i32 0, i32 0
  %148 = getelementptr inbounds %"class.std::__1::vector.83", %"class.std::__1::vector.83"* %19, i64 0, i32 0, i32 1
  %149 = bitcast %"class.std::__1::vector.111"* %20 to i8*
  %150 = getelementptr inbounds %"class.std::__1::vector.111", %"class.std::__1::vector.111"* %20, i64 0, i32 0, i32 0
  %151 = getelementptr inbounds %"class.std::__1::vector.111", %"class.std::__1::vector.111"* %20, i64 0, i32 0, i32 1
  %152 = bitcast %"class.std::__1::vector.111"* %21 to i8*
  %153 = getelementptr inbounds %"class.std::__1::vector.111", %"class.std::__1::vector.111"* %21, i64 0, i32 0, i32 0
  %154 = getelementptr inbounds %"class.std::__1::vector.111", %"class.std::__1::vector.111"* %21, i64 0, i32 0, i32 1
  %155 = bitcast %"class.std::__1::vector.43"* %22 to i8*
  %156 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %22, i64 0, i32 0, i32 0
  %157 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %22, i64 0, i32 0, i32 1
  %158 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %22, i64 0, i32 0, i32 2, i32 0, i32 0
  %159 = bitcast %"class.std::__1::vector.43"* %22 to i8**
  %160 = bitcast i32** %157 to i64*
  %161 = bitcast %"class.std::__1::vector.43"* %23 to i8*
  %162 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %23, i64 0, i32 0, i32 0
  %163 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %23, i64 0, i32 0, i32 1
  %164 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %23, i64 0, i32 0, i32 2, i32 0, i32 0
  %165 = bitcast %"class.std::__1::vector.43"* %23 to i8**
  %166 = bitcast i32** %163 to i64*
  %167 = fadd float %1, 1.000000e+02
  %168 = fdiv float 8.000000e+02, %167
  %169 = icmp ne i64 %69, 0
  %170 = bitcast %"class.std::__1::vector.111"* %20 to i64*
  %171 = bitcast %struct.CostInfo.113** %151 to i64*
  %172 = bitcast %"class.std::__1::vector.111"* %21 to i64*
  %173 = bitcast %struct.CostInfo.113** %154 to i64*
  %174 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 3, i32 0, i32 0
  %175 = bitcast i64** %148 to i64*
  %176 = bitcast %"class.std::__1::vector.83"* %19 to i64*
  %177 = bitcast i32** %145 to i64*
  %178 = bitcast %"class.std::__1::vector.43"* %18 to i64*
  %179 = bitcast %"class.std::__1::vector.43"* %17 to i64*
  %180 = bitcast i32** %142 to i64*
  %181 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 2, i32 0, i32 0
  %182 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 4, i32 0, i32 0
  %183 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 6, i32 0, i32 0
  %184 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %6, i64 0, i32 0, i32 1
  %185 = bitcast %"struct.jxl::PropertyDecisionNode"** %184 to i64*
  %186 = bitcast %"class.std::__1::vector"* %6 to i64*
  %187 = bitcast %"struct.std::__1::array"* %24 to i8*
  %188 = bitcast %"struct.std::__1::array"* %24 to i64*
  %189 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %24, i64 0, i32 0, i64 1
  %190 = bitcast %"struct.std::__1::array.5"* %189 to i64*
  %191 = bitcast [2 x %"struct.std::__1::array.5"]* %25 to i8*
  %192 = bitcast %struct.NodeInfo.104** %29 to i64*
  %193 = bitcast %"class.std::__1::vector.102"* %8 to i64*
  %194 = bitcast %struct.NodeInfo.104** %30 to i64*
  %195 = bitcast [2 x %"struct.std::__1::array.5"]* %26 to i8*
  br label %196

196:                                              ; preds = %7, %2217
  %197 = phi %struct.NodeInfo.104* [ %71, %7 ], [ %2218, %2217 ]
  %198 = getelementptr inbounds %struct.NodeInfo.104, %struct.NodeInfo.104* %197, i64 -1
  %199 = getelementptr inbounds %struct.NodeInfo.104, %struct.NodeInfo.104* %198, i64 0, i32 0
  %200 = load i64, i64* %199, align 8
  %201 = getelementptr inbounds %struct.NodeInfo.104, %struct.NodeInfo.104* %197, i64 -1, i32 1
  %202 = load i64, i64* %201, align 8
  %203 = getelementptr inbounds %struct.NodeInfo.104, %struct.NodeInfo.104* %197, i64 -1, i32 2
  %204 = load i64, i64* %203, align 8
  %205 = getelementptr inbounds %struct.NodeInfo.104, %struct.NodeInfo.104* %197, i64 -1, i32 3
  %206 = load i64, i64* %205, align 8
  %207 = getelementptr inbounds %struct.NodeInfo.104, %struct.NodeInfo.104* %197, i64 -1, i32 4
  %208 = bitcast %"struct.std::__1::array"* %207 to i64*
  %209 = load i64, i64* %208, align 8
  %210 = getelementptr inbounds %struct.NodeInfo.104, %struct.NodeInfo.104* %197, i64 -1, i32 4, i32 0, i64 1
  %211 = bitcast %"struct.std::__1::array.5"* %210 to i64*
  %212 = load i64, i64* %211, align 8
  store %struct.NodeInfo.104* %198, %struct.NodeInfo.104** %29, align 8
  %213 = icmp eq i64 %204, %202
  br i1 %213, label %2217, label %214

214:                                              ; preds = %196
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %72) #24
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %72, i8* align 8 bitcast ({ i64, i32, [4 x i8], i64, float, float, i32, i32 }* @__const._ZN3jxl8N_SCALAR13FindBestSplitERNS_11TreeSamplesEfRKNSt3__16vectorINS_21ModularMultiplierInfoENS3_9allocatorIS5_EEEENS3_5arrayINSB_IjLm2EEELm2EEEfPNS4_INS_20PropertyDecisionNodeENS6_ISE_EEEE.forced_split to i8*), i64 16, i1 false)
  store i64 0, i64* %73, align 8
  store i32 0, i32* %74, align 8
  store i64 0, i64* %75, align 8
  store float 0x47EFFFFFE0000000, float* %76, align 8
  store float 0x47EFFFFFE0000000, float* %77, align 4
  store i32 0, i32* %78, align 8
  store i32 0, i32* %79, align 4
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %80) #24
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %80, i8* align 8 bitcast ({ i64, i32, [4 x i8], i64, float, float, i32, i32 }* @__const._ZN3jxl8N_SCALAR13FindBestSplitERNS_11TreeSamplesEfRKNSt3__16vectorINS_21ModularMultiplierInfoENS3_9allocatorIS5_EEEENS3_5arrayINSB_IjLm2EEELm2EEEfPNS4_INS_20PropertyDecisionNodeENS6_ISE_EEEE.forced_split to i8*), i64 16, i1 false)
  store i64 0, i64* %81, align 8
  store i32 0, i32* %82, align 8
  store i64 0, i64* %83, align 8
  store float 0x47EFFFFFE0000000, float* %84, align 8
  store float 0x47EFFFFFE0000000, float* %85, align 4
  store i32 0, i32* %86, align 8
  store i32 0, i32* %87, align 4
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %88) #24
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %88, i8* align 8 bitcast ({ i64, i32, [4 x i8], i64, float, float, i32, i32 }* @__const._ZN3jxl8N_SCALAR13FindBestSplitERNS_11TreeSamplesEfRKNSt3__16vectorINS_21ModularMultiplierInfoENS3_9allocatorIS5_EEEENS3_5arrayINSB_IjLm2EEELm2EEEfPNS4_INS_20PropertyDecisionNodeENS6_ISE_EEEE.forced_split to i8*), i64 16, i1 false)
  store i64 0, i64* %89, align 8
  store i32 0, i32* %90, align 8
  store i64 0, i64* %91, align 8
  store float 0x47EFFFFFE0000000, float* %92, align 8
  store float 0x47EFFFFFE0000000, float* %93, align 4
  store i32 0, i32* %94, align 8
  store i32 0, i32* %95, align 4
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %96) #24
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %96, i8* align 8 bitcast ({ i64, i32, [4 x i8], i64, float, float, i32, i32 }* @__const._ZN3jxl8N_SCALAR13FindBestSplitERNS_11TreeSamplesEfRKNSt3__16vectorINS_21ModularMultiplierInfoENS3_9allocatorIS5_EEEENS3_5arrayINSB_IjLm2EEELm2EEEfPNS4_INS_20PropertyDecisionNodeENS6_ISE_EEEE.forced_split to i8*), i64 16, i1 false)
  store i64 0, i64* %97, align 8
  store i32 0, i32* %98, align 8
  store i64 0, i64* %99, align 8
  store float 0x47EFFFFFE0000000, float* %100, align 8
  store float 0x47EFFFFFE0000000, float* %101, align 4
  store i32 0, i32* %102, align 8
  store i32 0, i32* %103, align 4
  br i1 %104, label %247, label %215

215:                                              ; preds = %214
  %216 = icmp ugt i64 %204, %202
  %217 = load %"class.std::__1::vector.8"*, %"class.std::__1::vector.8"** %105, align 8
  %218 = sub i64 %204, %202
  %219 = xor i64 %202, -1
  %220 = add i64 %204, %219
  %221 = and i64 %218, 3
  %222 = icmp eq i64 %221, 0
  %223 = icmp ult i64 %220, 3
  br label %224

224:                                              ; preds = %215, %305
  %225 = phi i64 [ 0, %215 ], [ %307, %305 ]
  %226 = phi i64 [ 0, %215 ], [ %306, %305 ]
  br i1 %216, label %227, label %305

227:                                              ; preds = %224
  %228 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %217, i64 %225, i32 0, i32 0
  %229 = load %"struct.jxl::TreeSamples::ResidualToken"*, %"struct.jxl::TreeSamples::ResidualToken"** %228, align 8
  br i1 %222, label %243, label %230

230:                                              ; preds = %227, %230
  %231 = phi i64 [ %240, %230 ], [ %202, %227 ]
  %232 = phi i64 [ %239, %230 ], [ %226, %227 ]
  %233 = phi i64 [ %241, %230 ], [ %221, %227 ]
  %234 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %229, i64 %231, i32 0
  %235 = load i8, i8* %234, align 1
  %236 = zext i8 %235 to i64
  %237 = add nuw nsw i64 %236, 1
  %238 = icmp ugt i64 %232, %237
  %239 = select i1 %238, i64 %232, i64 %237
  %240 = add nuw i64 %231, 1
  %241 = add i64 %233, -1
  %242 = icmp eq i64 %241, 0
  br i1 %242, label %243, label %230, !llvm.loop !101

243:                                              ; preds = %230, %227
  %244 = phi i64 [ undef, %227 ], [ %239, %230 ]
  %245 = phi i64 [ %202, %227 ], [ %240, %230 ]
  %246 = phi i64 [ %226, %227 ], [ %239, %230 ]
  br i1 %223, label %305, label %309

247:                                              ; preds = %305, %214
  %248 = phi i64 [ 0, %214 ], [ %306, %305 ]
  %249 = add i64 %248, 7
  %250 = and i64 %249, -8
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %106) #24
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %106, i8 0, i64 24, i1 false) #24
  %251 = icmp eq i64 %250, 0
  br i1 %251, label %269, label %252

252:                                              ; preds = %247
  %253 = icmp ugt i64 %250, 4611686018427387903
  br i1 %253, label %254, label %256

254:                                              ; preds = %252
  %255 = bitcast %"class.std::__1::vector.43"* %13 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %255) #28
  unreachable

256:                                              ; preds = %252
  %257 = shl i64 %250, 2
  %258 = call i8* @_Znwm(i64 %257) #29
  %259 = bitcast i8* %258 to i32*
  store i8* %258, i8** %110, align 8
  %260 = getelementptr inbounds i32, i32* %259, i64 %250
  store i32* %260, i32** %109, align 8
  %261 = ptrtoint i8* %258 to i64
  %262 = add nsw i64 %250, -1
  %263 = getelementptr i32, i32* %259, i64 %262
  %264 = ptrtoint i32* %263 to i64
  %265 = sub i64 4, %261
  %266 = add i64 %265, %264
  %267 = and i64 %266, -4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %258, i8 0, i64 %267, i1 false) #24
  %268 = ptrtoint i32* %260 to i64
  store i64 %268, i64* %111, align 8
  br label %269

269:                                              ; preds = %247, %256
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %112) #24
  %270 = mul i64 %250, %68
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %112, i8 0, i64 24, i1 false) #24
  %271 = icmp eq i64 %270, 0
  br i1 %271, label %289, label %272

272:                                              ; preds = %269
  %273 = icmp ugt i64 %270, 4611686018427387903
  br i1 %273, label %274, label %276

274:                                              ; preds = %272
  %275 = bitcast %"class.std::__1::vector.43"* %14 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %275) #28
  unreachable

276:                                              ; preds = %272
  %277 = shl i64 %270, 2
  %278 = call i8* @_Znwm(i64 %277) #29
  %279 = bitcast i8* %278 to i32*
  store i8* %278, i8** %116, align 8
  %280 = getelementptr inbounds i32, i32* %279, i64 %270
  store i32* %280, i32** %115, align 8
  %281 = ptrtoint i8* %278 to i64
  %282 = add nsw i64 %270, -1
  %283 = getelementptr i32, i32* %279, i64 %282
  %284 = ptrtoint i32* %283 to i64
  %285 = sub i64 4, %281
  %286 = add i64 %285, %284
  %287 = and i64 %286, -4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %278, i8 0, i64 %287, i1 false) #24
  %288 = ptrtoint i32* %280 to i64
  store i64 %288, i64* %117, align 8
  br label %289

289:                                              ; preds = %269, %276
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %118) #24
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %118, i8 0, i64 24, i1 false) #24
  br i1 %104, label %345, label %290

290:                                              ; preds = %289
  br i1 %122, label %291, label %293

291:                                              ; preds = %290
  %292 = bitcast %"class.std::__1::vector.55"* %15 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %292) #28
  unreachable

293:                                              ; preds = %290
  %294 = call i8* @_Znwm(i64 %67) #29
  %295 = bitcast i8* %294 to i32*
  store i8* %294, i8** %123, align 8
  %296 = getelementptr inbounds i32, i32* %295, i64 %68
  store i32* %296, i32** %121, align 8
  %297 = ptrtoint i8* %294 to i64
  %298 = getelementptr i32, i32* %295, i64 %125
  %299 = ptrtoint i32* %298 to i64
  %300 = sub i64 4, %297
  %301 = add i64 %300, %299
  %302 = and i64 %301, -4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %294, i8 0, i64 %302, i1 false) #24
  %303 = ptrtoint i32* %296 to i64
  store i64 %303, i64* %124, align 8
  %304 = icmp ugt i64 %204, %202
  br label %341

305:                                              ; preds = %243, %309, %224
  %306 = phi i64 [ %226, %224 ], [ %244, %243 ], [ %338, %309 ]
  %307 = add nuw i64 %225, 1
  %308 = icmp ult i64 %307, %68
  br i1 %308, label %224, label %247

309:                                              ; preds = %243, %309
  %310 = phi i64 [ %339, %309 ], [ %245, %243 ]
  %311 = phi i64 [ %338, %309 ], [ %246, %243 ]
  %312 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %229, i64 %310, i32 0
  %313 = load i8, i8* %312, align 1
  %314 = zext i8 %313 to i64
  %315 = add nuw nsw i64 %314, 1
  %316 = icmp ugt i64 %311, %315
  %317 = select i1 %316, i64 %311, i64 %315
  %318 = add nuw i64 %310, 1
  %319 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %229, i64 %318, i32 0
  %320 = load i8, i8* %319, align 1
  %321 = zext i8 %320 to i64
  %322 = add nuw nsw i64 %321, 1
  %323 = icmp ugt i64 %317, %322
  %324 = select i1 %323, i64 %317, i64 %322
  %325 = add nuw i64 %310, 2
  %326 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %229, i64 %325, i32 0
  %327 = load i8, i8* %326, align 1
  %328 = zext i8 %327 to i64
  %329 = add nuw nsw i64 %328, 1
  %330 = icmp ugt i64 %324, %329
  %331 = select i1 %330, i64 %324, i64 %329
  %332 = add nuw i64 %310, 3
  %333 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %229, i64 %332, i32 0
  %334 = load i8, i8* %333, align 1
  %335 = zext i8 %334 to i64
  %336 = add nuw nsw i64 %335, 1
  %337 = icmp ugt i64 %331, %336
  %338 = select i1 %337, i64 %331, i64 %336
  %339 = add nuw i64 %310, 4
  %340 = icmp eq i64 %339, %204
  br i1 %340, label %305, label %309

341:                                              ; preds = %293, %688
  %342 = phi i64 [ 0, %293 ], [ %689, %688 ]
  br i1 %304, label %343, label %688

343:                                              ; preds = %341
  %344 = mul i64 %342, %250
  br label %691

345:                                              ; preds = %688, %289
  %346 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %127, align 8
  %347 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %346, i64 %200, i32 5
  %348 = load i32, i32* %347, align 8
  %349 = load i32*, i32** %128, align 8
  %350 = load i32*, i32** %66, align 8
  %351 = icmp eq i32* %349, %350
  br i1 %351, label %359, label %352

352:                                              ; preds = %345, %356
  %353 = phi i32* [ %357, %356 ], [ %349, %345 ]
  %354 = load i32, i32* %353, align 4
  %355 = icmp eq i32 %354, %348
  br i1 %355, label %359, label %356

356:                                              ; preds = %352
  %357 = getelementptr inbounds i32, i32* %353, i64 1
  %358 = icmp eq i32* %357, %350
  br i1 %358, label %359, label %352

359:                                              ; preds = %352, %356, %345
  %360 = phi i32* [ %349, %345 ], [ %350, %356 ], [ %353, %352 ]
  %361 = ptrtoint i32* %360 to i64
  %362 = ptrtoint i32* %349 to i64
  %363 = sub i64 %361, %362
  %364 = ashr exact i64 %363, 2
  %365 = load i32*, i32** %113, align 8
  %366 = mul i64 %364, %250
  %367 = getelementptr inbounds i32, i32* %365, i64 %366
  %368 = load i32*, i32** %107, align 8
  %369 = getelementptr inbounds i32, i32* %367, i64 %250
  br i1 %251, label %605, label %370

370:                                              ; preds = %359
  %371 = lshr i64 %249, 3
  %372 = shl i64 %371, 5
  %373 = add i64 %372, -4
  %374 = lshr exact i64 %373, 2
  %375 = add nuw nsw i64 %374, 1
  %376 = icmp ult i64 %375, 32
  br i1 %376, label %474, label %377

377:                                              ; preds = %370
  %378 = and i64 %375, 9223372036854775776
  %379 = getelementptr i32, i32* %367, i64 %378
  %380 = add nsw i64 %378, -32
  %381 = lshr exact i64 %380, 5
  %382 = add nuw nsw i64 %381, 1
  %383 = and i64 %382, 1
  %384 = icmp eq i64 %380, 0
  br i1 %384, label %430, label %385

385:                                              ; preds = %377
  %386 = sub nuw nsw i64 %382, %383
  br label %387

387:                                              ; preds = %387, %385
  %388 = phi i64 [ 0, %385 ], [ %427, %387 ]
  %389 = phi <8 x i32> [ zeroinitializer, %385 ], [ %423, %387 ]
  %390 = phi <8 x i32> [ zeroinitializer, %385 ], [ %424, %387 ]
  %391 = phi <8 x i32> [ zeroinitializer, %385 ], [ %425, %387 ]
  %392 = phi <8 x i32> [ zeroinitializer, %385 ], [ %426, %387 ]
  %393 = phi i64 [ %386, %385 ], [ %428, %387 ]
  %394 = getelementptr i32, i32* %367, i64 %388
  %395 = bitcast i32* %394 to <8 x i32>*
  %396 = load <8 x i32>, <8 x i32>* %395, align 4
  %397 = getelementptr i32, i32* %394, i64 8
  %398 = bitcast i32* %397 to <8 x i32>*
  %399 = load <8 x i32>, <8 x i32>* %398, align 4
  %400 = getelementptr i32, i32* %394, i64 16
  %401 = bitcast i32* %400 to <8 x i32>*
  %402 = load <8 x i32>, <8 x i32>* %401, align 4
  %403 = getelementptr i32, i32* %394, i64 24
  %404 = bitcast i32* %403 to <8 x i32>*
  %405 = load <8 x i32>, <8 x i32>* %404, align 4
  %406 = add nsw <8 x i32> %396, %389
  %407 = add nsw <8 x i32> %399, %390
  %408 = add nsw <8 x i32> %402, %391
  %409 = add nsw <8 x i32> %405, %392
  %410 = or i64 %388, 32
  %411 = getelementptr i32, i32* %367, i64 %410
  %412 = bitcast i32* %411 to <8 x i32>*
  %413 = load <8 x i32>, <8 x i32>* %412, align 4
  %414 = getelementptr i32, i32* %411, i64 8
  %415 = bitcast i32* %414 to <8 x i32>*
  %416 = load <8 x i32>, <8 x i32>* %415, align 4
  %417 = getelementptr i32, i32* %411, i64 16
  %418 = bitcast i32* %417 to <8 x i32>*
  %419 = load <8 x i32>, <8 x i32>* %418, align 4
  %420 = getelementptr i32, i32* %411, i64 24
  %421 = bitcast i32* %420 to <8 x i32>*
  %422 = load <8 x i32>, <8 x i32>* %421, align 4
  %423 = add nsw <8 x i32> %413, %406
  %424 = add nsw <8 x i32> %416, %407
  %425 = add nsw <8 x i32> %419, %408
  %426 = add nsw <8 x i32> %422, %409
  %427 = add i64 %388, 64
  %428 = add i64 %393, -2
  %429 = icmp eq i64 %428, 0
  br i1 %429, label %430, label %387, !llvm.loop !102

430:                                              ; preds = %387, %377
  %431 = phi <8 x i32> [ undef, %377 ], [ %423, %387 ]
  %432 = phi <8 x i32> [ undef, %377 ], [ %424, %387 ]
  %433 = phi <8 x i32> [ undef, %377 ], [ %425, %387 ]
  %434 = phi <8 x i32> [ undef, %377 ], [ %426, %387 ]
  %435 = phi i64 [ 0, %377 ], [ %427, %387 ]
  %436 = phi <8 x i32> [ zeroinitializer, %377 ], [ %423, %387 ]
  %437 = phi <8 x i32> [ zeroinitializer, %377 ], [ %424, %387 ]
  %438 = phi <8 x i32> [ zeroinitializer, %377 ], [ %425, %387 ]
  %439 = phi <8 x i32> [ zeroinitializer, %377 ], [ %426, %387 ]
  %440 = icmp eq i64 %383, 0
  br i1 %440, label %458, label %441

441:                                              ; preds = %430
  %442 = getelementptr i32, i32* %367, i64 %435
  %443 = getelementptr i32, i32* %442, i64 24
  %444 = bitcast i32* %443 to <8 x i32>*
  %445 = load <8 x i32>, <8 x i32>* %444, align 4
  %446 = add nsw <8 x i32> %445, %439
  %447 = getelementptr i32, i32* %442, i64 16
  %448 = bitcast i32* %447 to <8 x i32>*
  %449 = load <8 x i32>, <8 x i32>* %448, align 4
  %450 = add nsw <8 x i32> %449, %438
  %451 = getelementptr i32, i32* %442, i64 8
  %452 = bitcast i32* %451 to <8 x i32>*
  %453 = load <8 x i32>, <8 x i32>* %452, align 4
  %454 = add nsw <8 x i32> %453, %437
  %455 = bitcast i32* %442 to <8 x i32>*
  %456 = load <8 x i32>, <8 x i32>* %455, align 4
  %457 = add nsw <8 x i32> %456, %436
  br label %458

458:                                              ; preds = %430, %441
  %459 = phi <8 x i32> [ %431, %430 ], [ %457, %441 ]
  %460 = phi <8 x i32> [ %432, %430 ], [ %454, %441 ]
  %461 = phi <8 x i32> [ %433, %430 ], [ %450, %441 ]
  %462 = phi <8 x i32> [ %434, %430 ], [ %446, %441 ]
  %463 = add <8 x i32> %460, %459
  %464 = add <8 x i32> %461, %463
  %465 = add <8 x i32> %462, %464
  %466 = shufflevector <8 x i32> %465, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %467 = add <8 x i32> %465, %466
  %468 = shufflevector <8 x i32> %467, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %469 = add <8 x i32> %467, %468
  %470 = shufflevector <8 x i32> %469, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %471 = add <8 x i32> %469, %470
  %472 = extractelement <8 x i32> %471, i32 0
  %473 = icmp eq i64 %375, %378
  br i1 %473, label %484, label %474

474:                                              ; preds = %458, %370
  %475 = phi i32 [ 0, %370 ], [ %472, %458 ]
  %476 = phi i32* [ %367, %370 ], [ %379, %458 ]
  br label %477

477:                                              ; preds = %474, %477
  %478 = phi i32 [ %481, %477 ], [ %475, %474 ]
  %479 = phi i32* [ %482, %477 ], [ %476, %474 ]
  %480 = load i32, i32* %479, align 4
  %481 = add nsw i32 %480, %478
  %482 = getelementptr inbounds i32, i32* %479, i64 1
  %483 = icmp eq i32* %482, %369
  br i1 %483, label %484, label %477, !llvm.loop !103

484:                                              ; preds = %477, %458
  %485 = phi i32 [ %472, %458 ], [ %481, %477 ]
  %486 = add i32 %485, 4095
  %487 = ashr i32 %486, 12
  %488 = insertelement <8 x i32> undef, i32 %487, i32 0
  %489 = shufflevector <8 x i32> %488, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %614

490:                                              ; preds = %614
  %491 = getelementptr inbounds i32, i32* %368, i64 %250
  %492 = lshr i64 %249, 3
  %493 = shl i64 %492, 5
  %494 = add i64 %493, -4
  %495 = lshr exact i64 %494, 2
  %496 = add nuw nsw i64 %495, 1
  %497 = icmp ult i64 %496, 32
  br i1 %497, label %595, label %498

498:                                              ; preds = %490
  %499 = and i64 %496, 9223372036854775776
  %500 = getelementptr i32, i32* %368, i64 %499
  %501 = add nsw i64 %499, -32
  %502 = lshr exact i64 %501, 5
  %503 = add nuw nsw i64 %502, 1
  %504 = and i64 %503, 1
  %505 = icmp eq i64 %501, 0
  br i1 %505, label %551, label %506

506:                                              ; preds = %498
  %507 = sub nuw nsw i64 %503, %504
  br label %508

508:                                              ; preds = %508, %506
  %509 = phi i64 [ 0, %506 ], [ %548, %508 ]
  %510 = phi <8 x i32> [ zeroinitializer, %506 ], [ %544, %508 ]
  %511 = phi <8 x i32> [ zeroinitializer, %506 ], [ %545, %508 ]
  %512 = phi <8 x i32> [ zeroinitializer, %506 ], [ %546, %508 ]
  %513 = phi <8 x i32> [ zeroinitializer, %506 ], [ %547, %508 ]
  %514 = phi i64 [ %507, %506 ], [ %549, %508 ]
  %515 = getelementptr i32, i32* %368, i64 %509
  %516 = bitcast i32* %515 to <8 x i32>*
  %517 = load <8 x i32>, <8 x i32>* %516, align 4
  %518 = getelementptr i32, i32* %515, i64 8
  %519 = bitcast i32* %518 to <8 x i32>*
  %520 = load <8 x i32>, <8 x i32>* %519, align 4
  %521 = getelementptr i32, i32* %515, i64 16
  %522 = bitcast i32* %521 to <8 x i32>*
  %523 = load <8 x i32>, <8 x i32>* %522, align 4
  %524 = getelementptr i32, i32* %515, i64 24
  %525 = bitcast i32* %524 to <8 x i32>*
  %526 = load <8 x i32>, <8 x i32>* %525, align 4
  %527 = add nsw <8 x i32> %517, %510
  %528 = add nsw <8 x i32> %520, %511
  %529 = add nsw <8 x i32> %523, %512
  %530 = add nsw <8 x i32> %526, %513
  %531 = or i64 %509, 32
  %532 = getelementptr i32, i32* %368, i64 %531
  %533 = bitcast i32* %532 to <8 x i32>*
  %534 = load <8 x i32>, <8 x i32>* %533, align 4
  %535 = getelementptr i32, i32* %532, i64 8
  %536 = bitcast i32* %535 to <8 x i32>*
  %537 = load <8 x i32>, <8 x i32>* %536, align 4
  %538 = getelementptr i32, i32* %532, i64 16
  %539 = bitcast i32* %538 to <8 x i32>*
  %540 = load <8 x i32>, <8 x i32>* %539, align 4
  %541 = getelementptr i32, i32* %532, i64 24
  %542 = bitcast i32* %541 to <8 x i32>*
  %543 = load <8 x i32>, <8 x i32>* %542, align 4
  %544 = add nsw <8 x i32> %534, %527
  %545 = add nsw <8 x i32> %537, %528
  %546 = add nsw <8 x i32> %540, %529
  %547 = add nsw <8 x i32> %543, %530
  %548 = add i64 %509, 64
  %549 = add i64 %514, -2
  %550 = icmp eq i64 %549, 0
  br i1 %550, label %551, label %508, !llvm.loop !104

551:                                              ; preds = %508, %498
  %552 = phi <8 x i32> [ undef, %498 ], [ %544, %508 ]
  %553 = phi <8 x i32> [ undef, %498 ], [ %545, %508 ]
  %554 = phi <8 x i32> [ undef, %498 ], [ %546, %508 ]
  %555 = phi <8 x i32> [ undef, %498 ], [ %547, %508 ]
  %556 = phi i64 [ 0, %498 ], [ %548, %508 ]
  %557 = phi <8 x i32> [ zeroinitializer, %498 ], [ %544, %508 ]
  %558 = phi <8 x i32> [ zeroinitializer, %498 ], [ %545, %508 ]
  %559 = phi <8 x i32> [ zeroinitializer, %498 ], [ %546, %508 ]
  %560 = phi <8 x i32> [ zeroinitializer, %498 ], [ %547, %508 ]
  %561 = icmp eq i64 %504, 0
  br i1 %561, label %579, label %562

562:                                              ; preds = %551
  %563 = getelementptr i32, i32* %368, i64 %556
  %564 = getelementptr i32, i32* %563, i64 24
  %565 = bitcast i32* %564 to <8 x i32>*
  %566 = load <8 x i32>, <8 x i32>* %565, align 4
  %567 = add nsw <8 x i32> %566, %560
  %568 = getelementptr i32, i32* %563, i64 16
  %569 = bitcast i32* %568 to <8 x i32>*
  %570 = load <8 x i32>, <8 x i32>* %569, align 4
  %571 = add nsw <8 x i32> %570, %559
  %572 = getelementptr i32, i32* %563, i64 8
  %573 = bitcast i32* %572 to <8 x i32>*
  %574 = load <8 x i32>, <8 x i32>* %573, align 4
  %575 = add nsw <8 x i32> %574, %558
  %576 = bitcast i32* %563 to <8 x i32>*
  %577 = load <8 x i32>, <8 x i32>* %576, align 4
  %578 = add nsw <8 x i32> %577, %557
  br label %579

579:                                              ; preds = %551, %562
  %580 = phi <8 x i32> [ %552, %551 ], [ %578, %562 ]
  %581 = phi <8 x i32> [ %553, %551 ], [ %575, %562 ]
  %582 = phi <8 x i32> [ %554, %551 ], [ %571, %562 ]
  %583 = phi <8 x i32> [ %555, %551 ], [ %567, %562 ]
  %584 = add <8 x i32> %581, %580
  %585 = add <8 x i32> %582, %584
  %586 = add <8 x i32> %583, %585
  %587 = shufflevector <8 x i32> %586, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %588 = add <8 x i32> %586, %587
  %589 = shufflevector <8 x i32> %588, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %590 = add <8 x i32> %588, %589
  %591 = shufflevector <8 x i32> %590, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %592 = add <8 x i32> %590, %591
  %593 = extractelement <8 x i32> %592, i32 0
  %594 = icmp eq i64 %496, %499
  br i1 %594, label %605, label %595

595:                                              ; preds = %579, %490
  %596 = phi i32 [ 0, %490 ], [ %593, %579 ]
  %597 = phi i32* [ %368, %490 ], [ %500, %579 ]
  br label %598

598:                                              ; preds = %595, %598
  %599 = phi i32 [ %602, %598 ], [ %596, %595 ]
  %600 = phi i32* [ %603, %598 ], [ %597, %595 ]
  %601 = load i32, i32* %600, align 4
  %602 = add nsw i32 %601, %599
  %603 = getelementptr inbounds i32, i32* %600, i64 1
  %604 = icmp eq i32* %603, %491
  br i1 %604, label %605, label %598, !llvm.loop !105

605:                                              ; preds = %598, %579, %359
  %606 = phi i32 [ 0, %359 ], [ %593, %579 ], [ %602, %598 ]
  %607 = sext i32 %606 to i64
  %608 = uitofp i64 %607 to float
  %609 = fdiv float 1.000000e+00, %608
  %610 = insertelement <8 x float> undef, float %609, i32 0
  %611 = shufflevector <8 x float> %610, <8 x float> undef, <8 x i32> zeroinitializer
  %612 = insertelement <8 x i32> undef, i32 %606, i32 0
  %613 = shufflevector <8 x i32> %612, <8 x i32> undef, <8 x i32> zeroinitializer
  br i1 %251, label %661, label %627

614:                                              ; preds = %484, %614
  %615 = phi i64 [ %625, %614 ], [ 0, %484 ]
  %616 = getelementptr inbounds i32, i32* %367, i64 %615
  %617 = bitcast i32* %616 to <8 x i32>*
  %618 = load <8 x i32>, <8 x i32>* %617, align 1, !alias.scope !106, !noalias !109
  %619 = icmp eq <8 x i32> %618, zeroinitializer
  %620 = icmp sgt <8 x i32> %489, %618
  %621 = select <8 x i1> %620, <8 x i32> %489, <8 x i32> %618
  %622 = select <8 x i1> %619, <8 x i32> zeroinitializer, <8 x i32> %621
  %623 = getelementptr inbounds i32, i32* %368, i64 %615
  %624 = bitcast i32* %623 to <8 x i32>*
  store <8 x i32> %622, <8 x i32>* %624, align 1, !alias.scope !111
  %625 = add nuw i64 %615, 8
  %626 = icmp ult i64 %625, %250
  br i1 %626, label %614, label %490

627:                                              ; preds = %605, %627
  %628 = phi i64 [ %659, %627 ], [ 0, %605 ]
  %629 = phi <8 x float> [ %658, %627 ], [ zeroinitializer, %605 ]
  %630 = getelementptr inbounds i32, i32* %367, i64 %628
  %631 = bitcast i32* %630 to <8 x i32>*
  %632 = load <8 x i32>, <8 x i32>* %631, align 1, !alias.scope !114, !noalias !117
  %633 = sitofp <8 x i32> %632 to <8 x float>
  %634 = getelementptr inbounds i32, i32* %368, i64 %628
  %635 = bitcast i32* %634 to <8 x i32>*
  %636 = load <8 x i32>, <8 x i32>* %635, align 1, !alias.scope !119, !noalias !122
  %637 = sitofp <8 x i32> %636 to <8 x float>
  %638 = fmul <8 x float> %611, %637
  %639 = icmp eq <8 x i32> %636, %613
  %640 = bitcast <8 x float> %638 to <8 x i32>
  %641 = add <8 x i32> %640, <i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811>
  %642 = ashr <8 x i32> %641, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %643 = and <8 x i32> %641, <i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608>
  %644 = sub <8 x i32> %640, %643
  %645 = bitcast <8 x i32> %644 to <8 x float>
  %646 = sitofp <8 x i32> %642 to <8 x float>
  %647 = fadd <8 x float> %645, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  fence acq_rel
  %648 = call <8 x float> @llvm.fma.v8f32(<8 x float> %647, <8 x float> <float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000>, <8 x float> <float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000>) #24
  %649 = call <8 x float> @llvm.fma.v8f32(<8 x float> %647, <8 x float> <float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000>, <8 x float> <float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000>) #24
  fence acq_rel
  %650 = call <8 x float> @llvm.fma.v8f32(<8 x float> %648, <8 x float> %647, <8 x float> <float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000>) #24
  %651 = call <8 x float> @llvm.fma.v8f32(<8 x float> %649, <8 x float> %647, <8 x float> <float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000>) #24
  fence acq_rel
  %652 = fdiv <8 x float> %650, %651
  %653 = fadd <8 x float> %652, %646
  %654 = fcmp oeq <8 x float> %633, zeroinitializer
  %655 = select <8 x i1> %639, <8 x float> zeroinitializer, <8 x float> %653
  %656 = fmul <8 x float> %655, %633
  %657 = select <8 x i1> %654, <8 x float> zeroinitializer, <8 x float> %656
  %658 = fsub <8 x float> %629, %657
  %659 = add nuw i64 %628, 8
  %660 = icmp ult i64 %659, %250
  br i1 %660, label %627, label %661

661:                                              ; preds = %627, %605
  %662 = phi <8 x float> [ zeroinitializer, %605 ], [ %658, %627 ]
  %663 = shufflevector <8 x float> %662, <8 x float> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3>
  %664 = fadd <8 x float> %662, %663
  %665 = shufflevector <8 x float> %664, <8 x float> undef, <8 x i32> <i32 2, i32 3, i32 0, i32 1, i32 6, i32 7, i32 4, i32 5>
  %666 = fadd <8 x float> %664, %665
  %667 = shufflevector <8 x float> %666, <8 x float> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %668 = fadd <8 x float> %666, %667
  %669 = extractelement <8 x float> %668, i32 0
  %670 = load i32*, i32** %119, align 8
  %671 = getelementptr inbounds i32, i32* %670, i64 %364
  %672 = load i32, i32* %671, align 4
  %673 = uitofp i32 %672 to float
  %674 = fadd float %669, %673
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %129) #24
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %129, i8* align 8 bitcast ({ i64, i32, [4 x i8], i64, float, float, i32, i32 }* @__const._ZN3jxl8N_SCALAR13FindBestSplitERNS_11TreeSamplesEfRKNSt3__16vectorINS_21ModularMultiplierInfoENS3_9allocatorIS5_EEEENS3_5arrayINSB_IjLm2EEELm2EEEfPNS4_INS_20PropertyDecisionNodeENS6_ISE_EEEE.forced_split to i8*), i64 16, i1 false)
  store i64 0, i64* %130, align 8
  store i32 0, i32* %131, align 8
  store i64 0, i64* %132, align 8
  store float 0x47EFFFFFE0000000, float* %133, align 8
  store float 0x47EFFFFFE0000000, float* %134, align 4
  store i32 0, i32* %135, align 8
  store i32 0, i32* %136, align 4
  %675 = load i64, i64* %138, align 8
  %676 = load i64, i64* %139, align 8
  %677 = icmp eq i64 %675, %676
  %678 = inttoptr i64 %676 to %"struct.jxl::ModularMultiplierInfo"*
  br i1 %677, label %884, label %679

679:                                              ; preds = %661
  %680 = lshr i64 %209, 32
  %681 = trunc i64 %680 to i32
  %682 = trunc i64 %209 to i32
  %683 = lshr i64 %212, 32
  %684 = trunc i64 %683 to i32
  %685 = trunc i64 %212 to i32
  %686 = sub i64 %675, %676
  %687 = sdiv exact i64 %686, 20
  br label %725

688:                                              ; preds = %691, %341
  %689 = add nuw i64 %342, 1
  %690 = icmp ult i64 %689, %68
  br i1 %690, label %341, label %345

691:                                              ; preds = %691, %343
  %692 = phi i64 [ %202, %343 ], [ %723, %691 ]
  %693 = load i16*, i16** %126, align 8
  %694 = getelementptr inbounds i16, i16* %693, i64 %692
  %695 = load i16, i16* %694, align 2
  %696 = load %"class.std::__1::vector.8"*, %"class.std::__1::vector.8"** %105, align 8
  %697 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %696, i64 %342, i32 0, i32 0
  %698 = load %"struct.jxl::TreeSamples::ResidualToken"*, %"struct.jxl::TreeSamples::ResidualToken"** %697, align 8
  %699 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %698, i64 %692, i32 0
  %700 = load i8, i8* %699, align 1
  %701 = zext i8 %700 to i64
  %702 = add i64 %344, %701
  %703 = load i32*, i32** %113, align 8
  %704 = getelementptr inbounds i32, i32* %703, i64 %702
  %705 = load i32, i32* %704, align 4
  %706 = zext i16 %695 to i32
  %707 = add i32 %705, %706
  store i32 %707, i32* %704, align 4
  %708 = load %"class.std::__1::vector.8"*, %"class.std::__1::vector.8"** %105, align 8
  %709 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %708, i64 %342, i32 0, i32 0
  %710 = load %"struct.jxl::TreeSamples::ResidualToken"*, %"struct.jxl::TreeSamples::ResidualToken"** %709, align 8
  %711 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %710, i64 %692, i32 1
  %712 = load i8, i8* %711, align 1
  %713 = zext i8 %712 to i32
  %714 = load i16*, i16** %126, align 8
  %715 = getelementptr inbounds i16, i16* %714, i64 %692
  %716 = load i16, i16* %715, align 2
  %717 = zext i16 %716 to i32
  %718 = mul nuw nsw i32 %717, %713
  %719 = load i32*, i32** %119, align 8
  %720 = getelementptr inbounds i32, i32* %719, i64 %342
  %721 = load i32, i32* %720, align 4
  %722 = add i32 %721, %718
  store i32 %722, i32* %720, align 4
  %723 = add nuw i64 %692, 1
  %724 = icmp eq i64 %723, %204
  br i1 %724, label %688, label %691

725:                                              ; preds = %679, %876
  %726 = phi i64 [ 0, %679 ], [ %877, %876 ]
  %727 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %678, i64 %726
  %728 = bitcast %"struct.jxl::ModularMultiplierInfo"* %727 to i64*
  %729 = load i64, i64* %728, align 4
  %730 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %678, i64 %726, i32 0, i32 0, i64 1
  %731 = bitcast %"struct.std::__1::array.5"* %730 to i64*
  %732 = load i64, i64* %731, align 4
  %733 = trunc i64 %729 to i32
  %734 = icmp ult i32 %733, %681
  %735 = lshr i64 %729, 32
  %736 = trunc i64 %735 to i32
  %737 = trunc i64 %732 to i32
  %738 = lshr i64 %732, 32
  %739 = trunc i64 %738 to i32
  %740 = icmp ugt i32 %736, %682
  %741 = and i1 %734, %740
  br i1 %741, label %742, label %876

742:                                              ; preds = %725
  %743 = icmp ugt i32 %733, %682
  br i1 %743, label %750, label %744

744:                                              ; preds = %742
  %745 = icmp ult i32 %736, %681
  %746 = add i32 %736, -1
  %747 = select i1 %745, i32 %746, i32 -1431655766
  %748 = select i1 %745, i64 0, i64 2863311530
  %749 = zext i1 %745 to i8
  br label %752

750:                                              ; preds = %742
  %751 = add i32 %733, -1
  br label %752

752:                                              ; preds = %744, %750
  %753 = phi i32 [ %751, %750 ], [ %747, %744 ]
  %754 = phi i64 [ 0, %750 ], [ %748, %744 ]
  %755 = phi i8 [ 1, %750 ], [ %749, %744 ]
  %756 = icmp ult i32 %737, %684
  %757 = icmp ugt i32 %739, %685
  %758 = and i1 %756, %757
  br i1 %758, label %759, label %876

759:                                              ; preds = %752
  %760 = trunc i64 %732 to i32
  %761 = trunc i64 %738 to i32
  %762 = icmp ugt i32 %760, %685
  br i1 %762, label %767, label %763

763:                                              ; preds = %759
  %764 = icmp ult i32 %761, %684
  br i1 %764, label %765, label %769

765:                                              ; preds = %763
  %766 = add i32 %761, -1
  br label %771

767:                                              ; preds = %759
  %768 = add i32 %760, -1
  br label %771

769:                                              ; preds = %763
  %770 = icmp eq i8 %755, 0
  br i1 %770, label %879, label %771

771:                                              ; preds = %765, %767, %769
  %772 = phi i32 [ %753, %769 ], [ %766, %765 ], [ %768, %767 ]
  %773 = phi i64 [ %754, %769 ], [ 1, %765 ], [ 1, %767 ]
  %774 = icmp sgt i32 %772, -511
  %775 = select i1 %774, i32 %772, i32 -511
  %776 = icmp slt i32 %775, 511
  %777 = select i1 %776, i32 %775, i32 511
  %778 = add nsw i32 %777, 511
  %779 = and i64 %773, 4294967295
  %780 = load %"class.std::__1::vector.29"*, %"class.std::__1::vector.29"** %183, align 8
  %781 = sext i32 %778 to i64
  %782 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %780, i64 %779, i32 0, i32 0
  %783 = load i8*, i8** %782, align 8
  %784 = getelementptr inbounds i8, i8* %783, i64 %781
  %785 = load i8, i8* %784, align 1
  %786 = zext i8 %785 to i32
  store i32 %786, i32* %131, align 8
  store i64 %779, i64* %130, align 8
  %787 = fmul float %674, 5.000000e-01
  %788 = fsub float %787, %1
  store float %788, float* %134, align 4
  store float %788, float* %133, align 8
  %789 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %127, align 8
  %790 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %789, i64 %200, i32 5
  %791 = load i32, i32* %790, align 8
  store i32 %791, i32* %136, align 4
  store i32 %791, i32* %135, align 8
  store i64 %202, i64* %132, align 8
  %792 = load i32*, i32** %182, align 8
  %793 = getelementptr inbounds i32, i32* %792, i64 %779
  %794 = load i32, i32* %793, align 4
  %795 = trunc i64 %773 to i32
  %796 = icmp eq i32 %794, %795
  br i1 %796, label %797, label %863

797:                                              ; preds = %771
  %798 = icmp ugt i64 %204, %202
  br i1 %798, label %799, label %1944

799:                                              ; preds = %797
  %800 = load %"class.std::__1::vector.29"*, %"class.std::__1::vector.29"** %181, align 8
  %801 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %800, i64 %779, i32 0, i32 0
  %802 = load i8*, i8** %801, align 8
  %803 = sub i64 %204, %202
  %804 = icmp ult i64 %803, 16
  br i1 %804, label %805, label %808

805:                                              ; preds = %853, %799
  %806 = phi i64 [ %202, %799 ], [ %861, %853 ]
  %807 = phi i64 [ %202, %799 ], [ %810, %853 ]
  br label %866

808:                                              ; preds = %799
  %809 = and i64 %803, -16
  %810 = add i64 %202, %809
  %811 = insertelement <4 x i8> undef, i8 %785, i32 0
  %812 = shufflevector <4 x i8> %811, <4 x i8> undef, <4 x i32> zeroinitializer
  %813 = insertelement <4 x i8> undef, i8 %785, i32 0
  %814 = shufflevector <4 x i8> %813, <4 x i8> undef, <4 x i32> zeroinitializer
  %815 = insertelement <4 x i8> undef, i8 %785, i32 0
  %816 = shufflevector <4 x i8> %815, <4 x i8> undef, <4 x i32> zeroinitializer
  %817 = insertelement <4 x i8> undef, i8 %785, i32 0
  %818 = shufflevector <4 x i8> %817, <4 x i8> undef, <4 x i32> zeroinitializer
  %819 = insertelement <4 x i64> <i64 undef, i64 0, i64 0, i64 0>, i64 %202, i32 0
  br label %820

820:                                              ; preds = %820, %808
  %821 = phi i64 [ 0, %808 ], [ %851, %820 ]
  %822 = phi <4 x i64> [ %819, %808 ], [ %847, %820 ]
  %823 = phi <4 x i64> [ zeroinitializer, %808 ], [ %848, %820 ]
  %824 = phi <4 x i64> [ zeroinitializer, %808 ], [ %849, %820 ]
  %825 = phi <4 x i64> [ zeroinitializer, %808 ], [ %850, %820 ]
  %826 = add i64 %202, %821
  %827 = getelementptr inbounds i8, i8* %802, i64 %826
  %828 = bitcast i8* %827 to <4 x i8>*
  %829 = load <4 x i8>, <4 x i8>* %828, align 1
  %830 = getelementptr inbounds i8, i8* %827, i64 4
  %831 = bitcast i8* %830 to <4 x i8>*
  %832 = load <4 x i8>, <4 x i8>* %831, align 1
  %833 = getelementptr inbounds i8, i8* %827, i64 8
  %834 = bitcast i8* %833 to <4 x i8>*
  %835 = load <4 x i8>, <4 x i8>* %834, align 1
  %836 = getelementptr inbounds i8, i8* %827, i64 12
  %837 = bitcast i8* %836 to <4 x i8>*
  %838 = load <4 x i8>, <4 x i8>* %837, align 1
  %839 = icmp ule <4 x i8> %829, %812
  %840 = icmp ule <4 x i8> %832, %814
  %841 = icmp ule <4 x i8> %835, %816
  %842 = icmp ule <4 x i8> %838, %818
  %843 = zext <4 x i1> %839 to <4 x i64>
  %844 = zext <4 x i1> %840 to <4 x i64>
  %845 = zext <4 x i1> %841 to <4 x i64>
  %846 = zext <4 x i1> %842 to <4 x i64>
  %847 = add <4 x i64> %822, %843
  %848 = add <4 x i64> %823, %844
  %849 = add <4 x i64> %824, %845
  %850 = add <4 x i64> %825, %846
  %851 = add i64 %821, 16
  %852 = icmp eq i64 %851, %809
  br i1 %852, label %853, label %820, !llvm.loop !124

853:                                              ; preds = %820
  %854 = add <4 x i64> %848, %847
  %855 = add <4 x i64> %849, %854
  %856 = add <4 x i64> %850, %855
  %857 = shufflevector <4 x i64> %856, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %858 = add <4 x i64> %856, %857
  %859 = shufflevector <4 x i64> %858, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %860 = add <4 x i64> %858, %859
  %861 = extractelement <4 x i64> %860, i32 0
  %862 = icmp eq i64 %803, %809
  br i1 %862, label %1942, label %805

863:                                              ; preds = %771
  %864 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.1, i64 0, i64 0), i32 299, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.3, i64 0, i64 0)) #24
  %865 = call zeroext i1 @_ZN3jxl5AbortEv() #28
  unreachable

866:                                              ; preds = %805, %866
  %867 = phi i64 [ %873, %866 ], [ %806, %805 ]
  %868 = phi i64 [ %874, %866 ], [ %807, %805 ]
  %869 = getelementptr inbounds i8, i8* %802, i64 %868
  %870 = load i8, i8* %869, align 1
  %871 = icmp ule i8 %870, %785
  %872 = zext i1 %871 to i64
  %873 = add i64 %867, %872
  %874 = add nuw i64 %868, 1
  %875 = icmp eq i64 %874, %204
  br i1 %875, label %1942, label %866, !llvm.loop !125

876:                                              ; preds = %725, %752
  %877 = add nuw i64 %726, 1
  %878 = icmp ult i64 %877, %687
  br i1 %878, label %725, label %884

879:                                              ; preds = %769
  %880 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %678, i64 %726, i32 1
  %881 = load i32, i32* %880, align 4
  %882 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %127, align 8
  %883 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %882, i64 %200, i32 8
  store i32 %881, i32* %883, align 8
  br label %884

884:                                              ; preds = %876, %661, %879
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %140) #24
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %140, i8 0, i64 24, i1 false) #24
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %143) #24
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %143, i8 0, i64 24, i1 false) #24
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %146) #24
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %146, i8 0, i64 24, i1 false) #24
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %149) #24
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %149, i8 0, i64 24, i1 false) #24
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %152) #24
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %152, i8 0, i64 24, i1 false) #24
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %155) #24
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %155, i8 0, i64 24, i1 false) #24
  br i1 %251, label %912, label %885

885:                                              ; preds = %884
  %886 = icmp ugt i64 %250, 4611686018427387903
  br i1 %886, label %887, label %889

887:                                              ; preds = %885
  %888 = bitcast %"class.std::__1::vector.43"* %22 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %888) #28
  unreachable

889:                                              ; preds = %885
  %890 = shl i64 %250, 2
  %891 = call i8* @_Znwm(i64 %890) #29
  %892 = bitcast i8* %891 to i32*
  store i8* %891, i8** %159, align 8
  %893 = getelementptr inbounds i32, i32* %892, i64 %250
  store i32* %893, i32** %158, align 8
  %894 = ptrtoint i8* %891 to i64
  %895 = add nsw i64 %250, -1
  %896 = getelementptr i32, i32* %892, i64 %895
  %897 = ptrtoint i32* %896 to i64
  %898 = sub i64 4, %894
  %899 = add i64 %898, %897
  %900 = and i64 %899, -4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %891, i8 0, i64 %900, i1 false) #24
  %901 = ptrtoint i32* %893 to i64
  store i64 %901, i64* %160, align 8
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %161) #24
  %902 = call i8* @_Znwm(i64 %890) #29
  %903 = bitcast i8* %902 to i32*
  store i8* %902, i8** %165, align 8
  %904 = getelementptr inbounds i32, i32* %903, i64 %250
  store i32* %904, i32** %164, align 8
  %905 = ptrtoint i8* %902 to i64
  %906 = getelementptr i32, i32* %903, i64 %895
  %907 = ptrtoint i32* %906 to i64
  %908 = sub i64 4, %905
  %909 = add i64 %908, %907
  %910 = and i64 %909, -4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %902, i8 0, i64 %910, i1 false) #24
  %911 = ptrtoint i32* %904 to i64
  store i64 %911, i64* %166, align 8
  br label %913

912:                                              ; preds = %884
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %161) #24
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %161, i8 0, i64 24, i1 false) #24
  br label %913

913:                                              ; preds = %912, %889
  %914 = fcmp ogt float %674, %1
  %915 = and i1 %914, %169
  br i1 %915, label %916, label %963

916:                                              ; preds = %913
  %917 = icmp ugt i64 %204, %202
  %918 = shl i64 %250, 2
  %919 = lshr i64 %249, 3
  %920 = shl i64 %919, 5
  %921 = add i64 %920, -4
  %922 = lshr exact i64 %921, 2
  %923 = add nuw nsw i64 %922, 1
  %924 = add nuw nsw i64 %922, 1
  %925 = add nuw nsw i64 %922, 1
  %926 = lshr i64 %249, 3
  %927 = shl i64 %926, 5
  %928 = add i64 %927, -4
  %929 = lshr exact i64 %928, 2
  %930 = add nuw nsw i64 %929, 1
  %931 = and i64 %930, 9223372036854775776
  %932 = add nsw i64 %931, -32
  %933 = lshr exact i64 %932, 5
  %934 = add nuw nsw i64 %933, 1
  %935 = icmp ult i64 %930, 32
  %936 = and i64 %930, 9223372036854775776
  %937 = and i64 %934, 1
  %938 = icmp eq i64 %932, 0
  %939 = sub nuw nsw i64 %934, %937
  %940 = icmp eq i64 %937, 0
  %941 = icmp eq i64 %930, %936
  %942 = icmp ult i64 %925, 32
  %943 = and i64 %925, 9223372036854775776
  %944 = and i64 %934, 1
  %945 = icmp eq i64 %932, 0
  %946 = sub nuw nsw i64 %934, %944
  %947 = icmp eq i64 %944, 0
  %948 = icmp eq i64 %925, %943
  %949 = icmp ult i64 %924, 32
  %950 = and i64 %924, 9223372036854775776
  %951 = and i64 %934, 1
  %952 = icmp eq i64 %932, 0
  %953 = sub nuw nsw i64 %934, %951
  %954 = icmp eq i64 %951, 0
  %955 = icmp eq i64 %924, %950
  %956 = icmp ult i64 %923, 32
  %957 = and i64 %923, 9223372036854775776
  %958 = and i64 %934, 1
  %959 = icmp eq i64 %932, 0
  %960 = sub nuw nsw i64 %934, %958
  %961 = icmp eq i64 %958, 0
  %962 = icmp eq i64 %923, %957
  br label %969

963:                                              ; preds = %1838, %913
  %964 = load float, float* %100, align 8
  %965 = load float, float* %101, align 4
  %966 = fadd float %964, %965
  %967 = fadd float %966, %1
  %968 = fcmp olt float %967, %674
  br i1 %968, label %1865, label %1872

969:                                              ; preds = %1841, %916
  %970 = phi i64 [ 0, %916 ], [ %1845, %1841 ]
  %971 = phi i64 [ 0, %916 ], [ %1844, %1841 ]
  %972 = phi i64 [ 0, %916 ], [ %1843, %1841 ]
  %973 = phi i64 [ 0, %916 ], [ %1842, %1841 ]
  %974 = phi i64 [ 0, %916 ], [ %1839, %1841 ]
  store i64 %973, i64* %171, align 8
  store i64 %972, i64* %173, align 8
  %975 = load %"class.std::__1::vector.43"*, %"class.std::__1::vector.43"** %174, align 8
  %976 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %975, i64 %974
  %977 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %975, i64 %974, i32 0, i32 1
  %978 = bitcast i32** %977 to i64*
  %979 = load i64, i64* %978, align 8
  %980 = bitcast %"class.std::__1::vector.43"* %976 to i64*
  %981 = load i64, i64* %980, align 8
  %982 = sub i64 %979, %981
  %983 = ashr exact i64 %982, 2
  %984 = add nsw i64 %983, 1
  %985 = sub i64 %971, %970
  %986 = ashr exact i64 %985, 3
  %987 = icmp ult i64 %986, %984
  br i1 %987, label %988, label %1017

988:                                              ; preds = %969
  %989 = mul i64 %984, %250
  %990 = load i64, i64* %177, align 8
  %991 = load i64, i64* %178, align 8
  %992 = sub i64 %990, %991
  %993 = ashr exact i64 %992, 2
  %994 = icmp ugt i64 %989, %993
  %995 = inttoptr i64 %991 to i32*
  br i1 %994, label %996, label %1002

996:                                              ; preds = %988
  %997 = sub i64 %989, %993
  call void @_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEm(%"class.std::__1::vector.43"* nonnull %18, i64 %997) #24
  %998 = load i64, i64* %175, align 8
  %999 = load i64, i64* %176, align 8
  %1000 = sub i64 %998, %999
  %1001 = ashr exact i64 %1000, 3
  br label %1006

1002:                                             ; preds = %988
  %1003 = icmp ult i64 %989, %993
  br i1 %1003, label %1004, label %1006

1004:                                             ; preds = %1002
  %1005 = getelementptr inbounds i32, i32* %995, i64 %989
  store i32* %1005, i32** %145, align 8
  br label %1006

1006:                                             ; preds = %996, %1002, %1004
  %1007 = phi i64 [ %1001, %996 ], [ %986, %1002 ], [ %986, %1004 ]
  %1008 = phi i64 [ %999, %996 ], [ %970, %1002 ], [ %970, %1004 ]
  %1009 = icmp ugt i64 %984, %1007
  %1010 = inttoptr i64 %1008 to i64*
  br i1 %1009, label %1011, label %1013

1011:                                             ; preds = %1006
  %1012 = sub nsw i64 %984, %1007
  call void @_ZNSt3__16vectorImNS_9allocatorImEEE8__appendEm(%"class.std::__1::vector.83"* nonnull %19, i64 %1012) #24
  br label %1017

1013:                                             ; preds = %1006
  %1014 = icmp ult i64 %984, %1007
  br i1 %1014, label %1015, label %1017

1015:                                             ; preds = %1013
  %1016 = getelementptr inbounds i64, i64* %1010, i64 %984
  store i64* %1016, i64** %148, align 8
  br label %1017

1017:                                             ; preds = %1015, %1013, %1011, %969
  %1018 = load i64, i64* %179, align 8
  store i64 %1018, i64* %180, align 8
  %1019 = icmp eq i64 %984, 0
  br i1 %1019, label %1021, label %1020

1020:                                             ; preds = %1017
  call void @_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEm(%"class.std::__1::vector.43"* nonnull %17, i64 %984) #24
  br label %1021

1021:                                             ; preds = %1017, %1020
  br i1 %917, label %1028, label %1022

1022:                                             ; preds = %1028, %1021
  %1023 = phi i64 [ 0, %1021 ], [ %1043, %1028 ]
  %1024 = phi i64 [ %984, %1021 ], [ %1045, %1028 ]
  %1025 = sub i64 %1023, %1024
  call fastcc void @_ZNSt3__16vectorIZN3jxl6N_AVX213FindBestSplitERNS1_11TreeSamplesEfRKNS0_INS1_21ModularMultiplierInfoENS_9allocatorIS5_EEEENS_5arrayINSB_IjLm2EEELm2EEEfPNS0_INS1_20PropertyDecisionNodeENS6_ISE_EEEEE8CostInfoNS6_ISI_EEE6resizeEm(%"class.std::__1::vector.111"* nonnull %20, i64 %1025)
  call fastcc void @_ZNSt3__16vectorIZN3jxl6N_AVX213FindBestSplitERNS1_11TreeSamplesEfRKNS0_INS1_21ModularMultiplierInfoENS_9allocatorIS5_EEEENS_5arrayINSB_IjLm2EEELm2EEEfPNS0_INS1_20PropertyDecisionNodeENS6_ISE_EEEEE8CostInfoNS6_ISI_EEE6resizeEm(%"class.std::__1::vector.111"* nonnull %21, i64 %1025)
  br i1 %104, label %1048, label %1026

1026:                                             ; preds = %1022
  %1027 = icmp ugt i64 %1023, %1024
  br label %1056

1028:                                             ; preds = %1021, %1028
  %1029 = phi i64 [ %1046, %1028 ], [ %202, %1021 ]
  %1030 = phi i64 [ %1045, %1028 ], [ %984, %1021 ]
  %1031 = phi i64 [ %1043, %1028 ], [ 0, %1021 ]
  %1032 = load %"class.std::__1::vector.29"*, %"class.std::__1::vector.29"** %181, align 8
  %1033 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %1032, i64 %974, i32 0, i32 0
  %1034 = load i8*, i8** %1033, align 8
  %1035 = getelementptr inbounds i8, i8* %1034, i64 %1029
  %1036 = load i8, i8* %1035, align 1
  %1037 = zext i8 %1036 to i64
  %1038 = load i32*, i32** %141, align 8
  %1039 = getelementptr inbounds i32, i32* %1038, i64 %1037
  %1040 = load i32, i32* %1039, align 4
  %1041 = add nsw i32 %1040, 1
  store i32 %1041, i32* %1039, align 4
  %1042 = icmp ult i64 %1031, %1037
  %1043 = select i1 %1042, i64 %1037, i64 %1031
  %1044 = icmp ugt i64 %1030, %1037
  %1045 = select i1 %1044, i64 %1037, i64 %1030
  %1046 = add nuw i64 %1029, 1
  %1047 = icmp eq i64 %1046, %204
  br i1 %1047, label %1022, label %1028

1048:                                             ; preds = %1103, %1022
  %1049 = icmp ugt i64 %1023, %1024
  br i1 %1049, label %1050, label %1757

1050:                                             ; preds = %1048
  %1051 = shl i64 1, %974
  %1052 = and i64 %1051, %206
  %1053 = icmp ne i64 %1052, 0
  %1054 = icmp ult i64 %974, 2
  %1055 = load i32*, i32** %141, align 8
  br label %1762

1056:                                             ; preds = %1026, %1103
  %1057 = phi i64 [ 0, %1026 ], [ %1104, %1103 ]
  br i1 %917, label %1065, label %1058

1058:                                             ; preds = %1065, %1056
  %1059 = load i8*, i8** %159, align 8
  %1060 = load i32*, i32** %113, align 8
  %1061 = mul i64 %1057, %250
  %1062 = getelementptr inbounds i32, i32* %1060, i64 %1061
  %1063 = bitcast i32* %1062 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1059, i8* align 4 %1063, i64 %918, i1 false)
  %1064 = load i8*, i8** %165, align 8
  call void @llvm.memset.p0i8.i64(i8* align 4 %1064, i8 0, i64 %918, i1 false)
  br i1 %1027, label %1106, label %1103

1065:                                             ; preds = %1056, %1065
  %1066 = phi i64 [ %1101, %1065 ], [ %202, %1056 ]
  %1067 = load %"class.std::__1::vector.29"*, %"class.std::__1::vector.29"** %181, align 8
  %1068 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %1067, i64 %974, i32 0, i32 0
  %1069 = load i8*, i8** %1068, align 8
  %1070 = getelementptr inbounds i8, i8* %1069, i64 %1066
  %1071 = load i8, i8* %1070, align 1
  %1072 = zext i8 %1071 to i64
  %1073 = load i16*, i16** %126, align 8
  %1074 = getelementptr inbounds i16, i16* %1073, i64 %1066
  %1075 = load i16, i16* %1074, align 2
  %1076 = zext i16 %1075 to i64
  %1077 = load %"class.std::__1::vector.8"*, %"class.std::__1::vector.8"** %105, align 8
  %1078 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %1077, i64 %1057, i32 0, i32 0
  %1079 = load %"struct.jxl::TreeSamples::ResidualToken"*, %"struct.jxl::TreeSamples::ResidualToken"** %1078, align 8
  %1080 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %1079, i64 %1066, i32 0
  %1081 = load i8, i8* %1080, align 1
  %1082 = zext i8 %1081 to i64
  %1083 = mul i64 %250, %1072
  %1084 = add i64 %1083, %1082
  %1085 = load i32*, i32** %144, align 8
  %1086 = getelementptr inbounds i32, i32* %1085, i64 %1084
  %1087 = load i32, i32* %1086, align 4
  %1088 = zext i16 %1075 to i32
  %1089 = add i32 %1087, %1088
  store i32 %1089, i32* %1086, align 4
  %1090 = load %"class.std::__1::vector.8"*, %"class.std::__1::vector.8"** %105, align 8
  %1091 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %1090, i64 %1057, i32 0, i32 0
  %1092 = load %"struct.jxl::TreeSamples::ResidualToken"*, %"struct.jxl::TreeSamples::ResidualToken"** %1091, align 8
  %1093 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %1092, i64 %1066, i32 1
  %1094 = load i8, i8* %1093, align 1
  %1095 = zext i8 %1094 to i64
  %1096 = mul nuw nsw i64 %1095, %1076
  %1097 = load i64*, i64** %147, align 8
  %1098 = getelementptr inbounds i64, i64* %1097, i64 %1072
  %1099 = load i64, i64* %1098, align 8
  %1100 = add i64 %1099, %1096
  store i64 %1100, i64* %1098, align 8
  %1101 = add nuw i64 %1066, 1
  %1102 = icmp eq i64 %1101, %204
  br i1 %1102, label %1058, label %1065

1103:                                             ; preds = %1753, %1058
  %1104 = add nuw i64 %1057, 1
  %1105 = icmp ult i64 %1104, %68
  br i1 %1105, label %1056, label %1048

1106:                                             ; preds = %1058, %1753
  %1107 = phi i64 [ %1755, %1753 ], [ %1024, %1058 ]
  %1108 = phi i64 [ %1754, %1753 ], [ 0, %1058 ]
  %1109 = load i32*, i32** %141, align 8
  %1110 = getelementptr inbounds i32, i32* %1109, i64 %1107
  %1111 = load i32, i32* %1110, align 4
  %1112 = icmp eq i32 %1111, 0
  br i1 %1112, label %1753, label %1113

1113:                                             ; preds = %1106
  %1114 = load i64*, i64** %147, align 8
  %1115 = getelementptr inbounds i64, i64* %1114, i64 %1107
  %1116 = load i64, i64* %1115, align 8
  %1117 = add i64 %1116, %1108
  store i64 0, i64* %1115, align 8
  br i1 %251, label %1118, label %1121

1118:                                             ; preds = %1113
  %1119 = load i32*, i32** %156, align 8
  %1120 = load i32*, i32** %107, align 8
  br label %1331

1121:                                             ; preds = %1113
  %1122 = mul i64 %1107, %250
  %1123 = load i32*, i32** %162, align 8
  br label %1689

1124:                                             ; preds = %1689
  %1125 = load i32*, i32** %156, align 8
  %1126 = load i32*, i32** %107, align 8
  %1127 = getelementptr inbounds i32, i32* %1125, i64 %250
  br i1 %251, label %1331, label %1128

1128:                                             ; preds = %1124
  br i1 %935, label %1216, label %1129

1129:                                             ; preds = %1128
  %1130 = getelementptr i32, i32* %1125, i64 %936
  br i1 %938, label %1174, label %1131

1131:                                             ; preds = %1129, %1131
  %1132 = phi i64 [ %1171, %1131 ], [ 0, %1129 ]
  %1133 = phi <8 x i32> [ %1167, %1131 ], [ zeroinitializer, %1129 ]
  %1134 = phi <8 x i32> [ %1168, %1131 ], [ zeroinitializer, %1129 ]
  %1135 = phi <8 x i32> [ %1169, %1131 ], [ zeroinitializer, %1129 ]
  %1136 = phi <8 x i32> [ %1170, %1131 ], [ zeroinitializer, %1129 ]
  %1137 = phi i64 [ %1172, %1131 ], [ %939, %1129 ]
  %1138 = getelementptr i32, i32* %1125, i64 %1132
  %1139 = bitcast i32* %1138 to <8 x i32>*
  %1140 = load <8 x i32>, <8 x i32>* %1139, align 4
  %1141 = getelementptr i32, i32* %1138, i64 8
  %1142 = bitcast i32* %1141 to <8 x i32>*
  %1143 = load <8 x i32>, <8 x i32>* %1142, align 4
  %1144 = getelementptr i32, i32* %1138, i64 16
  %1145 = bitcast i32* %1144 to <8 x i32>*
  %1146 = load <8 x i32>, <8 x i32>* %1145, align 4
  %1147 = getelementptr i32, i32* %1138, i64 24
  %1148 = bitcast i32* %1147 to <8 x i32>*
  %1149 = load <8 x i32>, <8 x i32>* %1148, align 4
  %1150 = add nsw <8 x i32> %1140, %1133
  %1151 = add nsw <8 x i32> %1143, %1134
  %1152 = add nsw <8 x i32> %1146, %1135
  %1153 = add nsw <8 x i32> %1149, %1136
  %1154 = or i64 %1132, 32
  %1155 = getelementptr i32, i32* %1125, i64 %1154
  %1156 = bitcast i32* %1155 to <8 x i32>*
  %1157 = load <8 x i32>, <8 x i32>* %1156, align 4
  %1158 = getelementptr i32, i32* %1155, i64 8
  %1159 = bitcast i32* %1158 to <8 x i32>*
  %1160 = load <8 x i32>, <8 x i32>* %1159, align 4
  %1161 = getelementptr i32, i32* %1155, i64 16
  %1162 = bitcast i32* %1161 to <8 x i32>*
  %1163 = load <8 x i32>, <8 x i32>* %1162, align 4
  %1164 = getelementptr i32, i32* %1155, i64 24
  %1165 = bitcast i32* %1164 to <8 x i32>*
  %1166 = load <8 x i32>, <8 x i32>* %1165, align 4
  %1167 = add nsw <8 x i32> %1157, %1150
  %1168 = add nsw <8 x i32> %1160, %1151
  %1169 = add nsw <8 x i32> %1163, %1152
  %1170 = add nsw <8 x i32> %1166, %1153
  %1171 = add i64 %1132, 64
  %1172 = add i64 %1137, -2
  %1173 = icmp eq i64 %1172, 0
  br i1 %1173, label %1174, label %1131, !llvm.loop !126

1174:                                             ; preds = %1131, %1129
  %1175 = phi <8 x i32> [ undef, %1129 ], [ %1167, %1131 ]
  %1176 = phi <8 x i32> [ undef, %1129 ], [ %1168, %1131 ]
  %1177 = phi <8 x i32> [ undef, %1129 ], [ %1169, %1131 ]
  %1178 = phi <8 x i32> [ undef, %1129 ], [ %1170, %1131 ]
  %1179 = phi i64 [ 0, %1129 ], [ %1171, %1131 ]
  %1180 = phi <8 x i32> [ zeroinitializer, %1129 ], [ %1167, %1131 ]
  %1181 = phi <8 x i32> [ zeroinitializer, %1129 ], [ %1168, %1131 ]
  %1182 = phi <8 x i32> [ zeroinitializer, %1129 ], [ %1169, %1131 ]
  %1183 = phi <8 x i32> [ zeroinitializer, %1129 ], [ %1170, %1131 ]
  br i1 %940, label %1201, label %1184

1184:                                             ; preds = %1174
  %1185 = getelementptr i32, i32* %1125, i64 %1179
  %1186 = getelementptr i32, i32* %1185, i64 24
  %1187 = bitcast i32* %1186 to <8 x i32>*
  %1188 = load <8 x i32>, <8 x i32>* %1187, align 4
  %1189 = add nsw <8 x i32> %1188, %1183
  %1190 = getelementptr i32, i32* %1185, i64 16
  %1191 = bitcast i32* %1190 to <8 x i32>*
  %1192 = load <8 x i32>, <8 x i32>* %1191, align 4
  %1193 = add nsw <8 x i32> %1192, %1182
  %1194 = getelementptr i32, i32* %1185, i64 8
  %1195 = bitcast i32* %1194 to <8 x i32>*
  %1196 = load <8 x i32>, <8 x i32>* %1195, align 4
  %1197 = add nsw <8 x i32> %1196, %1181
  %1198 = bitcast i32* %1185 to <8 x i32>*
  %1199 = load <8 x i32>, <8 x i32>* %1198, align 4
  %1200 = add nsw <8 x i32> %1199, %1180
  br label %1201

1201:                                             ; preds = %1174, %1184
  %1202 = phi <8 x i32> [ %1175, %1174 ], [ %1200, %1184 ]
  %1203 = phi <8 x i32> [ %1176, %1174 ], [ %1197, %1184 ]
  %1204 = phi <8 x i32> [ %1177, %1174 ], [ %1193, %1184 ]
  %1205 = phi <8 x i32> [ %1178, %1174 ], [ %1189, %1184 ]
  %1206 = add <8 x i32> %1203, %1202
  %1207 = add <8 x i32> %1204, %1206
  %1208 = add <8 x i32> %1205, %1207
  %1209 = shufflevector <8 x i32> %1208, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %1210 = add <8 x i32> %1208, %1209
  %1211 = shufflevector <8 x i32> %1210, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1212 = add <8 x i32> %1210, %1211
  %1213 = shufflevector <8 x i32> %1212, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1214 = add <8 x i32> %1212, %1213
  %1215 = extractelement <8 x i32> %1214, i32 0
  br i1 %941, label %1226, label %1216

1216:                                             ; preds = %1201, %1128
  %1217 = phi i32 [ 0, %1128 ], [ %1215, %1201 ]
  %1218 = phi i32* [ %1125, %1128 ], [ %1130, %1201 ]
  br label %1219

1219:                                             ; preds = %1216, %1219
  %1220 = phi i32 [ %1223, %1219 ], [ %1217, %1216 ]
  %1221 = phi i32* [ %1224, %1219 ], [ %1218, %1216 ]
  %1222 = load i32, i32* %1221, align 4
  %1223 = add nsw i32 %1222, %1220
  %1224 = getelementptr inbounds i32, i32* %1221, i64 1
  %1225 = icmp eq i32* %1224, %1127
  br i1 %1225, label %1226, label %1219, !llvm.loop !127

1226:                                             ; preds = %1219, %1201
  %1227 = phi i32 [ %1215, %1201 ], [ %1223, %1219 ]
  %1228 = add i32 %1227, 4095
  %1229 = ashr i32 %1228, 12
  %1230 = insertelement <8 x i32> undef, i32 %1229, i32 0
  %1231 = shufflevector <8 x i32> %1230, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %1342

1232:                                             ; preds = %1342
  %1233 = getelementptr inbounds i32, i32* %1126, i64 %250
  br i1 %942, label %1321, label %1234

1234:                                             ; preds = %1232
  %1235 = getelementptr i32, i32* %1126, i64 %943
  br i1 %945, label %1279, label %1236

1236:                                             ; preds = %1234, %1236
  %1237 = phi i64 [ %1276, %1236 ], [ 0, %1234 ]
  %1238 = phi <8 x i32> [ %1272, %1236 ], [ zeroinitializer, %1234 ]
  %1239 = phi <8 x i32> [ %1273, %1236 ], [ zeroinitializer, %1234 ]
  %1240 = phi <8 x i32> [ %1274, %1236 ], [ zeroinitializer, %1234 ]
  %1241 = phi <8 x i32> [ %1275, %1236 ], [ zeroinitializer, %1234 ]
  %1242 = phi i64 [ %1277, %1236 ], [ %946, %1234 ]
  %1243 = getelementptr i32, i32* %1126, i64 %1237
  %1244 = bitcast i32* %1243 to <8 x i32>*
  %1245 = load <8 x i32>, <8 x i32>* %1244, align 4
  %1246 = getelementptr i32, i32* %1243, i64 8
  %1247 = bitcast i32* %1246 to <8 x i32>*
  %1248 = load <8 x i32>, <8 x i32>* %1247, align 4
  %1249 = getelementptr i32, i32* %1243, i64 16
  %1250 = bitcast i32* %1249 to <8 x i32>*
  %1251 = load <8 x i32>, <8 x i32>* %1250, align 4
  %1252 = getelementptr i32, i32* %1243, i64 24
  %1253 = bitcast i32* %1252 to <8 x i32>*
  %1254 = load <8 x i32>, <8 x i32>* %1253, align 4
  %1255 = add nsw <8 x i32> %1245, %1238
  %1256 = add nsw <8 x i32> %1248, %1239
  %1257 = add nsw <8 x i32> %1251, %1240
  %1258 = add nsw <8 x i32> %1254, %1241
  %1259 = or i64 %1237, 32
  %1260 = getelementptr i32, i32* %1126, i64 %1259
  %1261 = bitcast i32* %1260 to <8 x i32>*
  %1262 = load <8 x i32>, <8 x i32>* %1261, align 4
  %1263 = getelementptr i32, i32* %1260, i64 8
  %1264 = bitcast i32* %1263 to <8 x i32>*
  %1265 = load <8 x i32>, <8 x i32>* %1264, align 4
  %1266 = getelementptr i32, i32* %1260, i64 16
  %1267 = bitcast i32* %1266 to <8 x i32>*
  %1268 = load <8 x i32>, <8 x i32>* %1267, align 4
  %1269 = getelementptr i32, i32* %1260, i64 24
  %1270 = bitcast i32* %1269 to <8 x i32>*
  %1271 = load <8 x i32>, <8 x i32>* %1270, align 4
  %1272 = add nsw <8 x i32> %1262, %1255
  %1273 = add nsw <8 x i32> %1265, %1256
  %1274 = add nsw <8 x i32> %1268, %1257
  %1275 = add nsw <8 x i32> %1271, %1258
  %1276 = add i64 %1237, 64
  %1277 = add i64 %1242, -2
  %1278 = icmp eq i64 %1277, 0
  br i1 %1278, label %1279, label %1236, !llvm.loop !128

1279:                                             ; preds = %1236, %1234
  %1280 = phi <8 x i32> [ undef, %1234 ], [ %1272, %1236 ]
  %1281 = phi <8 x i32> [ undef, %1234 ], [ %1273, %1236 ]
  %1282 = phi <8 x i32> [ undef, %1234 ], [ %1274, %1236 ]
  %1283 = phi <8 x i32> [ undef, %1234 ], [ %1275, %1236 ]
  %1284 = phi i64 [ 0, %1234 ], [ %1276, %1236 ]
  %1285 = phi <8 x i32> [ zeroinitializer, %1234 ], [ %1272, %1236 ]
  %1286 = phi <8 x i32> [ zeroinitializer, %1234 ], [ %1273, %1236 ]
  %1287 = phi <8 x i32> [ zeroinitializer, %1234 ], [ %1274, %1236 ]
  %1288 = phi <8 x i32> [ zeroinitializer, %1234 ], [ %1275, %1236 ]
  br i1 %947, label %1306, label %1289

1289:                                             ; preds = %1279
  %1290 = getelementptr i32, i32* %1126, i64 %1284
  %1291 = getelementptr i32, i32* %1290, i64 24
  %1292 = bitcast i32* %1291 to <8 x i32>*
  %1293 = load <8 x i32>, <8 x i32>* %1292, align 4
  %1294 = add nsw <8 x i32> %1293, %1288
  %1295 = getelementptr i32, i32* %1290, i64 16
  %1296 = bitcast i32* %1295 to <8 x i32>*
  %1297 = load <8 x i32>, <8 x i32>* %1296, align 4
  %1298 = add nsw <8 x i32> %1297, %1287
  %1299 = getelementptr i32, i32* %1290, i64 8
  %1300 = bitcast i32* %1299 to <8 x i32>*
  %1301 = load <8 x i32>, <8 x i32>* %1300, align 4
  %1302 = add nsw <8 x i32> %1301, %1286
  %1303 = bitcast i32* %1290 to <8 x i32>*
  %1304 = load <8 x i32>, <8 x i32>* %1303, align 4
  %1305 = add nsw <8 x i32> %1304, %1285
  br label %1306

1306:                                             ; preds = %1279, %1289
  %1307 = phi <8 x i32> [ %1280, %1279 ], [ %1305, %1289 ]
  %1308 = phi <8 x i32> [ %1281, %1279 ], [ %1302, %1289 ]
  %1309 = phi <8 x i32> [ %1282, %1279 ], [ %1298, %1289 ]
  %1310 = phi <8 x i32> [ %1283, %1279 ], [ %1294, %1289 ]
  %1311 = add <8 x i32> %1308, %1307
  %1312 = add <8 x i32> %1309, %1311
  %1313 = add <8 x i32> %1310, %1312
  %1314 = shufflevector <8 x i32> %1313, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %1315 = add <8 x i32> %1313, %1314
  %1316 = shufflevector <8 x i32> %1315, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1317 = add <8 x i32> %1315, %1316
  %1318 = shufflevector <8 x i32> %1317, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1319 = add <8 x i32> %1317, %1318
  %1320 = extractelement <8 x i32> %1319, i32 0
  br i1 %948, label %1331, label %1321

1321:                                             ; preds = %1306, %1232
  %1322 = phi i32 [ 0, %1232 ], [ %1320, %1306 ]
  %1323 = phi i32* [ %1126, %1232 ], [ %1235, %1306 ]
  br label %1324

1324:                                             ; preds = %1321, %1324
  %1325 = phi i32 [ %1328, %1324 ], [ %1322, %1321 ]
  %1326 = phi i32* [ %1329, %1324 ], [ %1323, %1321 ]
  %1327 = load i32, i32* %1326, align 4
  %1328 = add nsw i32 %1327, %1325
  %1329 = getelementptr inbounds i32, i32* %1326, i64 1
  %1330 = icmp eq i32* %1329, %1233
  br i1 %1330, label %1331, label %1324, !llvm.loop !129

1331:                                             ; preds = %1324, %1306, %1118, %1124
  %1332 = phi i32* [ %1126, %1124 ], [ %1120, %1118 ], [ %1126, %1306 ], [ %1126, %1324 ]
  %1333 = phi i32* [ %1125, %1124 ], [ %1119, %1118 ], [ %1125, %1306 ], [ %1125, %1324 ]
  %1334 = phi i32 [ 0, %1124 ], [ 0, %1118 ], [ %1320, %1306 ], [ %1328, %1324 ]
  %1335 = sext i32 %1334 to i64
  %1336 = uitofp i64 %1335 to float
  %1337 = fdiv float 1.000000e+00, %1336
  %1338 = insertelement <8 x float> undef, float %1337, i32 0
  %1339 = shufflevector <8 x float> %1338, <8 x float> undef, <8 x i32> zeroinitializer
  %1340 = insertelement <8 x i32> undef, i32 %1334, i32 0
  %1341 = shufflevector <8 x i32> %1340, <8 x i32> undef, <8 x i32> zeroinitializer
  br i1 %251, label %1391, label %1355

1342:                                             ; preds = %1226, %1342
  %1343 = phi i64 [ %1353, %1342 ], [ 0, %1226 ]
  %1344 = getelementptr inbounds i32, i32* %1125, i64 %1343
  %1345 = bitcast i32* %1344 to <8 x i32>*
  %1346 = load <8 x i32>, <8 x i32>* %1345, align 1, !alias.scope !130, !noalias !133
  %1347 = icmp eq <8 x i32> %1346, zeroinitializer
  %1348 = icmp sgt <8 x i32> %1231, %1346
  %1349 = select <8 x i1> %1348, <8 x i32> %1231, <8 x i32> %1346
  %1350 = select <8 x i1> %1347, <8 x i32> zeroinitializer, <8 x i32> %1349
  %1351 = getelementptr inbounds i32, i32* %1126, i64 %1343
  %1352 = bitcast i32* %1351 to <8 x i32>*
  store <8 x i32> %1350, <8 x i32>* %1352, align 1, !alias.scope !135
  %1353 = add nuw i64 %1343, 8
  %1354 = icmp ult i64 %1353, %250
  br i1 %1354, label %1342, label %1232

1355:                                             ; preds = %1331, %1355
  %1356 = phi i64 [ %1387, %1355 ], [ 0, %1331 ]
  %1357 = phi <8 x float> [ %1386, %1355 ], [ zeroinitializer, %1331 ]
  %1358 = getelementptr inbounds i32, i32* %1333, i64 %1356
  %1359 = bitcast i32* %1358 to <8 x i32>*
  %1360 = load <8 x i32>, <8 x i32>* %1359, align 1, !alias.scope !138, !noalias !141
  %1361 = sitofp <8 x i32> %1360 to <8 x float>
  %1362 = getelementptr inbounds i32, i32* %1332, i64 %1356
  %1363 = bitcast i32* %1362 to <8 x i32>*
  %1364 = load <8 x i32>, <8 x i32>* %1363, align 1, !alias.scope !143, !noalias !146
  %1365 = sitofp <8 x i32> %1364 to <8 x float>
  %1366 = fmul <8 x float> %1339, %1365
  %1367 = icmp eq <8 x i32> %1364, %1341
  %1368 = bitcast <8 x float> %1366 to <8 x i32>
  %1369 = add <8 x i32> %1368, <i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811>
  %1370 = ashr <8 x i32> %1369, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %1371 = and <8 x i32> %1369, <i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608>
  %1372 = sub <8 x i32> %1368, %1371
  %1373 = bitcast <8 x i32> %1372 to <8 x float>
  %1374 = sitofp <8 x i32> %1370 to <8 x float>
  %1375 = fadd <8 x float> %1373, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  fence acq_rel
  %1376 = call <8 x float> @llvm.fma.v8f32(<8 x float> %1375, <8 x float> <float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000>, <8 x float> <float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000>) #24
  %1377 = call <8 x float> @llvm.fma.v8f32(<8 x float> %1375, <8 x float> <float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000>, <8 x float> <float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000>) #24
  fence acq_rel
  %1378 = call <8 x float> @llvm.fma.v8f32(<8 x float> %1376, <8 x float> %1375, <8 x float> <float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000>) #24
  %1379 = call <8 x float> @llvm.fma.v8f32(<8 x float> %1377, <8 x float> %1375, <8 x float> <float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000>) #24
  fence acq_rel
  %1380 = fdiv <8 x float> %1378, %1379
  %1381 = fadd <8 x float> %1380, %1374
  %1382 = fcmp oeq <8 x float> %1361, zeroinitializer
  %1383 = select <8 x i1> %1367, <8 x float> zeroinitializer, <8 x float> %1381
  %1384 = fmul <8 x float> %1383, %1361
  %1385 = select <8 x i1> %1382, <8 x float> zeroinitializer, <8 x float> %1384
  %1386 = fsub <8 x float> %1357, %1385
  %1387 = add nuw i64 %1356, 8
  %1388 = icmp ult i64 %1387, %250
  br i1 %1388, label %1355, label %1389

1389:                                             ; preds = %1355
  %1390 = load i32*, i32** %107, align 8
  br label %1391

1391:                                             ; preds = %1389, %1331
  %1392 = phi i32* [ %1332, %1331 ], [ %1390, %1389 ]
  %1393 = phi <8 x float> [ zeroinitializer, %1331 ], [ %1386, %1389 ]
  %1394 = shufflevector <8 x float> %1393, <8 x float> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3>
  %1395 = fadd <8 x float> %1393, %1394
  %1396 = shufflevector <8 x float> %1395, <8 x float> undef, <8 x i32> <i32 2, i32 3, i32 0, i32 1, i32 6, i32 7, i32 4, i32 5>
  %1397 = fadd <8 x float> %1395, %1396
  %1398 = shufflevector <8 x float> %1397, <8 x float> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1399 = fadd <8 x float> %1397, %1398
  %1400 = extractelement <8 x float> %1399, i32 0
  %1401 = load i32*, i32** %119, align 8
  %1402 = getelementptr inbounds i32, i32* %1401, i64 %1057
  %1403 = load i32, i32* %1402, align 4
  %1404 = uitofp i32 %1403 to float
  %1405 = fadd float %1400, %1404
  %1406 = uitofp i64 %1117 to float
  %1407 = fsub float %1405, %1406
  %1408 = load i32*, i32** %162, align 8
  %1409 = getelementptr inbounds i32, i32* %1408, i64 %250
  br i1 %251, label %1613, label %1410

1410:                                             ; preds = %1391
  br i1 %949, label %1498, label %1411

1411:                                             ; preds = %1410
  %1412 = getelementptr i32, i32* %1408, i64 %950
  br i1 %952, label %1456, label %1413

1413:                                             ; preds = %1411, %1413
  %1414 = phi i64 [ %1453, %1413 ], [ 0, %1411 ]
  %1415 = phi <8 x i32> [ %1449, %1413 ], [ zeroinitializer, %1411 ]
  %1416 = phi <8 x i32> [ %1450, %1413 ], [ zeroinitializer, %1411 ]
  %1417 = phi <8 x i32> [ %1451, %1413 ], [ zeroinitializer, %1411 ]
  %1418 = phi <8 x i32> [ %1452, %1413 ], [ zeroinitializer, %1411 ]
  %1419 = phi i64 [ %1454, %1413 ], [ %953, %1411 ]
  %1420 = getelementptr i32, i32* %1408, i64 %1414
  %1421 = bitcast i32* %1420 to <8 x i32>*
  %1422 = load <8 x i32>, <8 x i32>* %1421, align 4
  %1423 = getelementptr i32, i32* %1420, i64 8
  %1424 = bitcast i32* %1423 to <8 x i32>*
  %1425 = load <8 x i32>, <8 x i32>* %1424, align 4
  %1426 = getelementptr i32, i32* %1420, i64 16
  %1427 = bitcast i32* %1426 to <8 x i32>*
  %1428 = load <8 x i32>, <8 x i32>* %1427, align 4
  %1429 = getelementptr i32, i32* %1420, i64 24
  %1430 = bitcast i32* %1429 to <8 x i32>*
  %1431 = load <8 x i32>, <8 x i32>* %1430, align 4
  %1432 = add nsw <8 x i32> %1422, %1415
  %1433 = add nsw <8 x i32> %1425, %1416
  %1434 = add nsw <8 x i32> %1428, %1417
  %1435 = add nsw <8 x i32> %1431, %1418
  %1436 = or i64 %1414, 32
  %1437 = getelementptr i32, i32* %1408, i64 %1436
  %1438 = bitcast i32* %1437 to <8 x i32>*
  %1439 = load <8 x i32>, <8 x i32>* %1438, align 4
  %1440 = getelementptr i32, i32* %1437, i64 8
  %1441 = bitcast i32* %1440 to <8 x i32>*
  %1442 = load <8 x i32>, <8 x i32>* %1441, align 4
  %1443 = getelementptr i32, i32* %1437, i64 16
  %1444 = bitcast i32* %1443 to <8 x i32>*
  %1445 = load <8 x i32>, <8 x i32>* %1444, align 4
  %1446 = getelementptr i32, i32* %1437, i64 24
  %1447 = bitcast i32* %1446 to <8 x i32>*
  %1448 = load <8 x i32>, <8 x i32>* %1447, align 4
  %1449 = add nsw <8 x i32> %1439, %1432
  %1450 = add nsw <8 x i32> %1442, %1433
  %1451 = add nsw <8 x i32> %1445, %1434
  %1452 = add nsw <8 x i32> %1448, %1435
  %1453 = add i64 %1414, 64
  %1454 = add i64 %1419, -2
  %1455 = icmp eq i64 %1454, 0
  br i1 %1455, label %1456, label %1413, !llvm.loop !148

1456:                                             ; preds = %1413, %1411
  %1457 = phi <8 x i32> [ undef, %1411 ], [ %1449, %1413 ]
  %1458 = phi <8 x i32> [ undef, %1411 ], [ %1450, %1413 ]
  %1459 = phi <8 x i32> [ undef, %1411 ], [ %1451, %1413 ]
  %1460 = phi <8 x i32> [ undef, %1411 ], [ %1452, %1413 ]
  %1461 = phi i64 [ 0, %1411 ], [ %1453, %1413 ]
  %1462 = phi <8 x i32> [ zeroinitializer, %1411 ], [ %1449, %1413 ]
  %1463 = phi <8 x i32> [ zeroinitializer, %1411 ], [ %1450, %1413 ]
  %1464 = phi <8 x i32> [ zeroinitializer, %1411 ], [ %1451, %1413 ]
  %1465 = phi <8 x i32> [ zeroinitializer, %1411 ], [ %1452, %1413 ]
  br i1 %954, label %1483, label %1466

1466:                                             ; preds = %1456
  %1467 = getelementptr i32, i32* %1408, i64 %1461
  %1468 = getelementptr i32, i32* %1467, i64 24
  %1469 = bitcast i32* %1468 to <8 x i32>*
  %1470 = load <8 x i32>, <8 x i32>* %1469, align 4
  %1471 = add nsw <8 x i32> %1470, %1465
  %1472 = getelementptr i32, i32* %1467, i64 16
  %1473 = bitcast i32* %1472 to <8 x i32>*
  %1474 = load <8 x i32>, <8 x i32>* %1473, align 4
  %1475 = add nsw <8 x i32> %1474, %1464
  %1476 = getelementptr i32, i32* %1467, i64 8
  %1477 = bitcast i32* %1476 to <8 x i32>*
  %1478 = load <8 x i32>, <8 x i32>* %1477, align 4
  %1479 = add nsw <8 x i32> %1478, %1463
  %1480 = bitcast i32* %1467 to <8 x i32>*
  %1481 = load <8 x i32>, <8 x i32>* %1480, align 4
  %1482 = add nsw <8 x i32> %1481, %1462
  br label %1483

1483:                                             ; preds = %1456, %1466
  %1484 = phi <8 x i32> [ %1457, %1456 ], [ %1482, %1466 ]
  %1485 = phi <8 x i32> [ %1458, %1456 ], [ %1479, %1466 ]
  %1486 = phi <8 x i32> [ %1459, %1456 ], [ %1475, %1466 ]
  %1487 = phi <8 x i32> [ %1460, %1456 ], [ %1471, %1466 ]
  %1488 = add <8 x i32> %1485, %1484
  %1489 = add <8 x i32> %1486, %1488
  %1490 = add <8 x i32> %1487, %1489
  %1491 = shufflevector <8 x i32> %1490, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %1492 = add <8 x i32> %1490, %1491
  %1493 = shufflevector <8 x i32> %1492, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1494 = add <8 x i32> %1492, %1493
  %1495 = shufflevector <8 x i32> %1494, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1496 = add <8 x i32> %1494, %1495
  %1497 = extractelement <8 x i32> %1496, i32 0
  br i1 %955, label %1508, label %1498

1498:                                             ; preds = %1483, %1410
  %1499 = phi i32 [ 0, %1410 ], [ %1497, %1483 ]
  %1500 = phi i32* [ %1408, %1410 ], [ %1412, %1483 ]
  br label %1501

1501:                                             ; preds = %1498, %1501
  %1502 = phi i32 [ %1505, %1501 ], [ %1499, %1498 ]
  %1503 = phi i32* [ %1506, %1501 ], [ %1500, %1498 ]
  %1504 = load i32, i32* %1503, align 4
  %1505 = add nsw i32 %1504, %1502
  %1506 = getelementptr inbounds i32, i32* %1503, i64 1
  %1507 = icmp eq i32* %1506, %1409
  br i1 %1507, label %1508, label %1501, !llvm.loop !149

1508:                                             ; preds = %1501, %1483
  %1509 = phi i32 [ %1497, %1483 ], [ %1505, %1501 ]
  %1510 = add i32 %1509, 4095
  %1511 = ashr i32 %1510, 12
  %1512 = insertelement <8 x i32> undef, i32 %1511, i32 0
  %1513 = shufflevector <8 x i32> %1512, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %1622

1514:                                             ; preds = %1622
  %1515 = getelementptr inbounds i32, i32* %1392, i64 %250
  br i1 %956, label %1603, label %1516

1516:                                             ; preds = %1514
  %1517 = getelementptr i32, i32* %1392, i64 %957
  br i1 %959, label %1561, label %1518

1518:                                             ; preds = %1516, %1518
  %1519 = phi i64 [ %1558, %1518 ], [ 0, %1516 ]
  %1520 = phi <8 x i32> [ %1554, %1518 ], [ zeroinitializer, %1516 ]
  %1521 = phi <8 x i32> [ %1555, %1518 ], [ zeroinitializer, %1516 ]
  %1522 = phi <8 x i32> [ %1556, %1518 ], [ zeroinitializer, %1516 ]
  %1523 = phi <8 x i32> [ %1557, %1518 ], [ zeroinitializer, %1516 ]
  %1524 = phi i64 [ %1559, %1518 ], [ %960, %1516 ]
  %1525 = getelementptr i32, i32* %1392, i64 %1519
  %1526 = bitcast i32* %1525 to <8 x i32>*
  %1527 = load <8 x i32>, <8 x i32>* %1526, align 4
  %1528 = getelementptr i32, i32* %1525, i64 8
  %1529 = bitcast i32* %1528 to <8 x i32>*
  %1530 = load <8 x i32>, <8 x i32>* %1529, align 4
  %1531 = getelementptr i32, i32* %1525, i64 16
  %1532 = bitcast i32* %1531 to <8 x i32>*
  %1533 = load <8 x i32>, <8 x i32>* %1532, align 4
  %1534 = getelementptr i32, i32* %1525, i64 24
  %1535 = bitcast i32* %1534 to <8 x i32>*
  %1536 = load <8 x i32>, <8 x i32>* %1535, align 4
  %1537 = add nsw <8 x i32> %1527, %1520
  %1538 = add nsw <8 x i32> %1530, %1521
  %1539 = add nsw <8 x i32> %1533, %1522
  %1540 = add nsw <8 x i32> %1536, %1523
  %1541 = or i64 %1519, 32
  %1542 = getelementptr i32, i32* %1392, i64 %1541
  %1543 = bitcast i32* %1542 to <8 x i32>*
  %1544 = load <8 x i32>, <8 x i32>* %1543, align 4
  %1545 = getelementptr i32, i32* %1542, i64 8
  %1546 = bitcast i32* %1545 to <8 x i32>*
  %1547 = load <8 x i32>, <8 x i32>* %1546, align 4
  %1548 = getelementptr i32, i32* %1542, i64 16
  %1549 = bitcast i32* %1548 to <8 x i32>*
  %1550 = load <8 x i32>, <8 x i32>* %1549, align 4
  %1551 = getelementptr i32, i32* %1542, i64 24
  %1552 = bitcast i32* %1551 to <8 x i32>*
  %1553 = load <8 x i32>, <8 x i32>* %1552, align 4
  %1554 = add nsw <8 x i32> %1544, %1537
  %1555 = add nsw <8 x i32> %1547, %1538
  %1556 = add nsw <8 x i32> %1550, %1539
  %1557 = add nsw <8 x i32> %1553, %1540
  %1558 = add i64 %1519, 64
  %1559 = add i64 %1524, -2
  %1560 = icmp eq i64 %1559, 0
  br i1 %1560, label %1561, label %1518, !llvm.loop !150

1561:                                             ; preds = %1518, %1516
  %1562 = phi <8 x i32> [ undef, %1516 ], [ %1554, %1518 ]
  %1563 = phi <8 x i32> [ undef, %1516 ], [ %1555, %1518 ]
  %1564 = phi <8 x i32> [ undef, %1516 ], [ %1556, %1518 ]
  %1565 = phi <8 x i32> [ undef, %1516 ], [ %1557, %1518 ]
  %1566 = phi i64 [ 0, %1516 ], [ %1558, %1518 ]
  %1567 = phi <8 x i32> [ zeroinitializer, %1516 ], [ %1554, %1518 ]
  %1568 = phi <8 x i32> [ zeroinitializer, %1516 ], [ %1555, %1518 ]
  %1569 = phi <8 x i32> [ zeroinitializer, %1516 ], [ %1556, %1518 ]
  %1570 = phi <8 x i32> [ zeroinitializer, %1516 ], [ %1557, %1518 ]
  br i1 %961, label %1588, label %1571

1571:                                             ; preds = %1561
  %1572 = getelementptr i32, i32* %1392, i64 %1566
  %1573 = getelementptr i32, i32* %1572, i64 24
  %1574 = bitcast i32* %1573 to <8 x i32>*
  %1575 = load <8 x i32>, <8 x i32>* %1574, align 4
  %1576 = add nsw <8 x i32> %1575, %1570
  %1577 = getelementptr i32, i32* %1572, i64 16
  %1578 = bitcast i32* %1577 to <8 x i32>*
  %1579 = load <8 x i32>, <8 x i32>* %1578, align 4
  %1580 = add nsw <8 x i32> %1579, %1569
  %1581 = getelementptr i32, i32* %1572, i64 8
  %1582 = bitcast i32* %1581 to <8 x i32>*
  %1583 = load <8 x i32>, <8 x i32>* %1582, align 4
  %1584 = add nsw <8 x i32> %1583, %1568
  %1585 = bitcast i32* %1572 to <8 x i32>*
  %1586 = load <8 x i32>, <8 x i32>* %1585, align 4
  %1587 = add nsw <8 x i32> %1586, %1567
  br label %1588

1588:                                             ; preds = %1561, %1571
  %1589 = phi <8 x i32> [ %1562, %1561 ], [ %1587, %1571 ]
  %1590 = phi <8 x i32> [ %1563, %1561 ], [ %1584, %1571 ]
  %1591 = phi <8 x i32> [ %1564, %1561 ], [ %1580, %1571 ]
  %1592 = phi <8 x i32> [ %1565, %1561 ], [ %1576, %1571 ]
  %1593 = add <8 x i32> %1590, %1589
  %1594 = add <8 x i32> %1591, %1593
  %1595 = add <8 x i32> %1592, %1594
  %1596 = shufflevector <8 x i32> %1595, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %1597 = add <8 x i32> %1595, %1596
  %1598 = shufflevector <8 x i32> %1597, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1599 = add <8 x i32> %1597, %1598
  %1600 = shufflevector <8 x i32> %1599, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1601 = add <8 x i32> %1599, %1600
  %1602 = extractelement <8 x i32> %1601, i32 0
  br i1 %962, label %1613, label %1603

1603:                                             ; preds = %1588, %1514
  %1604 = phi i32 [ 0, %1514 ], [ %1602, %1588 ]
  %1605 = phi i32* [ %1392, %1514 ], [ %1517, %1588 ]
  br label %1606

1606:                                             ; preds = %1603, %1606
  %1607 = phi i32 [ %1610, %1606 ], [ %1604, %1603 ]
  %1608 = phi i32* [ %1611, %1606 ], [ %1605, %1603 ]
  %1609 = load i32, i32* %1608, align 4
  %1610 = add nsw i32 %1609, %1607
  %1611 = getelementptr inbounds i32, i32* %1608, i64 1
  %1612 = icmp eq i32* %1611, %1515
  br i1 %1612, label %1613, label %1606, !llvm.loop !151

1613:                                             ; preds = %1606, %1588, %1391
  %1614 = phi i32 [ 0, %1391 ], [ %1602, %1588 ], [ %1610, %1606 ]
  %1615 = sext i32 %1614 to i64
  %1616 = uitofp i64 %1615 to float
  %1617 = fdiv float 1.000000e+00, %1616
  %1618 = insertelement <8 x float> undef, float %1617, i32 0
  %1619 = shufflevector <8 x float> %1618, <8 x float> undef, <8 x i32> zeroinitializer
  %1620 = insertelement <8 x i32> undef, i32 %1614, i32 0
  %1621 = shufflevector <8 x i32> %1620, <8 x i32> undef, <8 x i32> zeroinitializer
  br i1 %251, label %1669, label %1635

1622:                                             ; preds = %1508, %1622
  %1623 = phi i64 [ %1633, %1622 ], [ 0, %1508 ]
  %1624 = getelementptr inbounds i32, i32* %1408, i64 %1623
  %1625 = bitcast i32* %1624 to <8 x i32>*
  %1626 = load <8 x i32>, <8 x i32>* %1625, align 1, !alias.scope !152, !noalias !155
  %1627 = icmp eq <8 x i32> %1626, zeroinitializer
  %1628 = icmp sgt <8 x i32> %1513, %1626
  %1629 = select <8 x i1> %1628, <8 x i32> %1513, <8 x i32> %1626
  %1630 = select <8 x i1> %1627, <8 x i32> zeroinitializer, <8 x i32> %1629
  %1631 = getelementptr inbounds i32, i32* %1392, i64 %1623
  %1632 = bitcast i32* %1631 to <8 x i32>*
  store <8 x i32> %1630, <8 x i32>* %1632, align 1, !alias.scope !157
  %1633 = add nuw i64 %1623, 8
  %1634 = icmp ult i64 %1633, %250
  br i1 %1634, label %1622, label %1514

1635:                                             ; preds = %1613, %1635
  %1636 = phi i64 [ %1667, %1635 ], [ 0, %1613 ]
  %1637 = phi <8 x float> [ %1666, %1635 ], [ zeroinitializer, %1613 ]
  %1638 = getelementptr inbounds i32, i32* %1408, i64 %1636
  %1639 = bitcast i32* %1638 to <8 x i32>*
  %1640 = load <8 x i32>, <8 x i32>* %1639, align 1, !alias.scope !160, !noalias !163
  %1641 = sitofp <8 x i32> %1640 to <8 x float>
  %1642 = getelementptr inbounds i32, i32* %1392, i64 %1636
  %1643 = bitcast i32* %1642 to <8 x i32>*
  %1644 = load <8 x i32>, <8 x i32>* %1643, align 1, !alias.scope !165, !noalias !168
  %1645 = sitofp <8 x i32> %1644 to <8 x float>
  %1646 = fmul <8 x float> %1619, %1645
  %1647 = icmp eq <8 x i32> %1644, %1621
  %1648 = bitcast <8 x float> %1646 to <8 x i32>
  %1649 = add <8 x i32> %1648, <i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811>
  %1650 = ashr <8 x i32> %1649, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %1651 = and <8 x i32> %1649, <i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608>
  %1652 = sub <8 x i32> %1648, %1651
  %1653 = bitcast <8 x i32> %1652 to <8 x float>
  %1654 = sitofp <8 x i32> %1650 to <8 x float>
  %1655 = fadd <8 x float> %1653, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  fence acq_rel
  %1656 = call <8 x float> @llvm.fma.v8f32(<8 x float> %1655, <8 x float> <float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000>, <8 x float> <float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000>) #24
  %1657 = call <8 x float> @llvm.fma.v8f32(<8 x float> %1655, <8 x float> <float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000>, <8 x float> <float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000>) #24
  fence acq_rel
  %1658 = call <8 x float> @llvm.fma.v8f32(<8 x float> %1656, <8 x float> %1655, <8 x float> <float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000>) #24
  %1659 = call <8 x float> @llvm.fma.v8f32(<8 x float> %1657, <8 x float> %1655, <8 x float> <float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000>) #24
  fence acq_rel
  %1660 = fdiv <8 x float> %1658, %1659
  %1661 = fadd <8 x float> %1660, %1654
  %1662 = fcmp oeq <8 x float> %1641, zeroinitializer
  %1663 = select <8 x i1> %1647, <8 x float> zeroinitializer, <8 x float> %1661
  %1664 = fmul <8 x float> %1663, %1641
  %1665 = select <8 x i1> %1662, <8 x float> zeroinitializer, <8 x float> %1664
  %1666 = fsub <8 x float> %1637, %1665
  %1667 = add nuw i64 %1636, 8
  %1668 = icmp ult i64 %1667, %250
  br i1 %1668, label %1635, label %1669

1669:                                             ; preds = %1635, %1613
  %1670 = phi <8 x float> [ zeroinitializer, %1613 ], [ %1666, %1635 ]
  %1671 = shufflevector <8 x float> %1670, <8 x float> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3>
  %1672 = fadd <8 x float> %1670, %1671
  %1673 = shufflevector <8 x float> %1672, <8 x float> undef, <8 x i32> <i32 2, i32 3, i32 0, i32 1, i32 6, i32 7, i32 4, i32 5>
  %1674 = fadd <8 x float> %1672, %1673
  %1675 = shufflevector <8 x float> %1674, <8 x float> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1676 = fadd <8 x float> %1674, %1675
  %1677 = extractelement <8 x float> %1676, i32 0
  %1678 = fadd float %1677, %1406
  %1679 = load i32*, i32** %128, align 8
  %1680 = getelementptr inbounds i32, i32* %1679, i64 %1057
  %1681 = load i32, i32* %1680, align 4
  %1682 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %127, align 8
  %1683 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1682, i64 %200, i32 5
  %1684 = load i32, i32* %1683, align 8
  %1685 = icmp eq i32 %1681, %1684
  %1686 = icmp eq i32 %1684, 6
  %1687 = or i1 %1685, %1686
  %1688 = select i1 %1687, float 0.000000e+00, float %168
  switch i32 %1681, label %1717 [
    i32 6, label %1709
    i32 0, label %1713
  ]

1689:                                             ; preds = %1689, %1121
  %1690 = phi i64 [ 0, %1121 ], [ %1707, %1689 ]
  %1691 = add i64 %1690, %1122
  %1692 = load i32*, i32** %144, align 8
  %1693 = getelementptr inbounds i32, i32* %1692, i64 %1691
  %1694 = load i32, i32* %1693, align 4
  %1695 = load i32*, i32** %156, align 8
  %1696 = getelementptr inbounds i32, i32* %1695, i64 %1690
  %1697 = load i32, i32* %1696, align 4
  %1698 = sub nsw i32 %1697, %1694
  store i32 %1698, i32* %1696, align 4
  %1699 = load i32*, i32** %144, align 8
  %1700 = getelementptr inbounds i32, i32* %1699, i64 %1691
  %1701 = load i32, i32* %1700, align 4
  %1702 = getelementptr inbounds i32, i32* %1123, i64 %1690
  %1703 = load i32, i32* %1702, align 4
  %1704 = add nsw i32 %1703, %1701
  store i32 %1704, i32* %1702, align 4
  %1705 = load i32*, i32** %144, align 8
  %1706 = getelementptr inbounds i32, i32* %1705, i64 %1691
  store i32 0, i32* %1706, align 4
  %1707 = add nuw i64 %1690, 1
  %1708 = icmp eq i64 %1707, %250
  br i1 %1708, label %1124, label %1689

1709:                                             ; preds = %1669
  %1710 = fpext float %1688 to double
  %1711 = fadd double %1710, 1.000000e-08
  %1712 = fptrunc double %1711 to float
  br label %1717

1713:                                             ; preds = %1669
  %1714 = fpext float %1688 to double
  %1715 = fadd double %1714, -1.000000e-08
  %1716 = fptrunc double %1715 to float
  br label %1717

1717:                                             ; preds = %1669, %1709, %1713
  %1718 = phi float [ %1716, %1713 ], [ %1712, %1709 ], [ %1688, %1669 ]
  %1719 = fadd float %1407, %1718
  %1720 = sub nuw i64 %1107, %1024
  %1721 = load %struct.CostInfo.113*, %struct.CostInfo.113** %153, align 8
  %1722 = getelementptr inbounds %struct.CostInfo.113, %struct.CostInfo.113* %1721, i64 %1720, i32 0
  %1723 = load float, float* %1722, align 4
  %1724 = getelementptr inbounds %struct.CostInfo.113, %struct.CostInfo.113* %1721, i64 %1720, i32 1
  %1725 = load float, float* %1724, align 4
  %1726 = fadd float %1723, %1725
  %1727 = fcmp olt float %1719, %1726
  br i1 %1727, label %1728, label %1736

1728:                                             ; preds = %1717
  store float %1407, float* %1722, align 4
  %1729 = load %struct.CostInfo.113*, %struct.CostInfo.113** %153, align 8
  %1730 = getelementptr inbounds %struct.CostInfo.113, %struct.CostInfo.113* %1729, i64 %1720, i32 1
  store float %1718, float* %1730, align 4
  %1731 = load i32*, i32** %128, align 8
  %1732 = getelementptr inbounds i32, i32* %1731, i64 %1057
  %1733 = load i32, i32* %1732, align 4
  %1734 = load %struct.CostInfo.113*, %struct.CostInfo.113** %153, align 8
  %1735 = getelementptr inbounds %struct.CostInfo.113, %struct.CostInfo.113* %1734, i64 %1720, i32 2
  store i32 %1733, i32* %1735, align 4
  br label %1736

1736:                                             ; preds = %1728, %1717
  %1737 = fadd float %1678, %1718
  %1738 = load %struct.CostInfo.113*, %struct.CostInfo.113** %150, align 8
  %1739 = getelementptr inbounds %struct.CostInfo.113, %struct.CostInfo.113* %1738, i64 %1720, i32 0
  %1740 = load float, float* %1739, align 4
  %1741 = getelementptr inbounds %struct.CostInfo.113, %struct.CostInfo.113* %1738, i64 %1720, i32 1
  %1742 = load float, float* %1741, align 4
  %1743 = fadd float %1740, %1742
  %1744 = fcmp olt float %1737, %1743
  br i1 %1744, label %1745, label %1753

1745:                                             ; preds = %1736
  store float %1678, float* %1739, align 4
  %1746 = load %struct.CostInfo.113*, %struct.CostInfo.113** %150, align 8
  %1747 = getelementptr inbounds %struct.CostInfo.113, %struct.CostInfo.113* %1746, i64 %1720, i32 1
  store float %1718, float* %1747, align 4
  %1748 = load i32*, i32** %128, align 8
  %1749 = getelementptr inbounds i32, i32* %1748, i64 %1057
  %1750 = load i32, i32* %1749, align 4
  %1751 = load %struct.CostInfo.113*, %struct.CostInfo.113** %150, align 8
  %1752 = getelementptr inbounds %struct.CostInfo.113, %struct.CostInfo.113* %1751, i64 %1720, i32 2
  store i32 %1750, i32* %1752, align 4
  br label %1753

1753:                                             ; preds = %1736, %1745, %1106
  %1754 = phi i64 [ %1108, %1106 ], [ %1117, %1745 ], [ %1117, %1736 ]
  %1755 = add nuw i64 %1107, 1
  %1756 = icmp eq i64 %1755, %1023
  br i1 %1756, label %1103, label %1106

1757:                                             ; preds = %1834, %1048
  %1758 = load i64*, i64** %147, align 8
  %1759 = getelementptr inbounds i64, i64* %1758, i64 %1023
  store i64 0, i64* %1759, align 8
  br i1 %251, label %1838, label %1760

1760:                                             ; preds = %1757
  %1761 = mul i64 %1023, %250
  br label %1846

1762:                                             ; preds = %1834, %1050
  %1763 = phi i64 [ %1024, %1050 ], [ %1836, %1834 ]
  %1764 = phi i64 [ %202, %1050 ], [ %1835, %1834 ]
  %1765 = getelementptr inbounds i32, i32* %1055, i64 %1763
  %1766 = load i32, i32* %1765, align 4
  %1767 = icmp eq i32 %1766, 0
  br i1 %1767, label %1834, label %1768

1768:                                             ; preds = %1762
  %1769 = sext i32 %1766 to i64
  %1770 = add i64 %1764, %1769
  %1771 = sub nuw i64 %1763, %1024
  %1772 = load %struct.CostInfo.113*, %struct.CostInfo.113** %153, align 8
  %1773 = getelementptr inbounds %struct.CostInfo.113, %struct.CostInfo.113* %1772, i64 %1771, i32 0
  %1774 = load float, float* %1773, align 4
  %1775 = load %struct.CostInfo.113*, %struct.CostInfo.113** %150, align 8
  %1776 = getelementptr inbounds %struct.CostInfo.113, %struct.CostInfo.113* %1775, i64 %1771, i32 0
  %1777 = load float, float* %1776, align 4
  %1778 = load i32*, i32** %182, align 8
  %1779 = getelementptr inbounds i32, i32* %1778, i64 %974
  %1780 = load i32, i32* %1779, align 4
  %1781 = icmp ne i32 %1780, 15
  %1782 = or i1 %1781, %1053
  br i1 %1782, label %1788, label %1783

1783:                                             ; preds = %1768
  %1784 = fcmp oeq float %1774, 0.000000e+00
  %1785 = fcmp oeq float %1777, 0.000000e+00
  %1786 = or i1 %1784, %1785
  %1787 = select i1 %1786, %struct.SplitInfo.110* %9, %struct.SplitInfo.110* %10
  br label %1810

1788:                                             ; preds = %1768
  %1789 = getelementptr inbounds %struct.CostInfo.113, %struct.CostInfo.113* %1775, i64 %1771, i32 2
  %1790 = load i32, i32* %1789, align 4
  %1791 = icmp eq i32 %1790, 6
  br i1 %1791, label %1801, label %1792

1792:                                             ; preds = %1788
  %1793 = getelementptr inbounds %struct.CostInfo.113, %struct.CostInfo.113* %1772, i64 %1771, i32 2
  %1794 = load i32, i32* %1793, align 4
  %1795 = icmp eq i32 %1794, 6
  br i1 %1795, label %1801, label %1796

1796:                                             ; preds = %1792
  %1797 = fcmp oeq float %1774, 0.000000e+00
  %1798 = fcmp oeq float %1777, 0.000000e+00
  %1799 = or i1 %1797, %1798
  %1800 = select i1 %1799, %struct.SplitInfo.110* %9, %struct.SplitInfo.110* %10
  br label %1812

1801:                                             ; preds = %1788, %1792
  %1802 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %127, align 8
  %1803 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1802, i64 %200, i32 5
  %1804 = load i32, i32* %1803, align 8
  %1805 = icmp eq i32 %1804, 6
  %1806 = fcmp oeq float %1774, 0.000000e+00
  %1807 = fcmp oeq float %1777, 0.000000e+00
  %1808 = or i1 %1806, %1807
  %1809 = select i1 %1808, %struct.SplitInfo.110* %9, %struct.SplitInfo.110* %10
  br i1 %1805, label %1812, label %1810

1810:                                             ; preds = %1801, %1783
  %1811 = phi %struct.SplitInfo.110* [ %1787, %1783 ], [ %1809, %1801 ]
  br label %1812

1812:                                             ; preds = %1801, %1796, %1810
  %1813 = phi %struct.SplitInfo.110* [ %1811, %1810 ], [ %1809, %1801 ], [ %1800, %1796 ]
  %1814 = phi %struct.SplitInfo.110* [ %11, %1810 ], [ %12, %1801 ], [ %12, %1796 ]
  %1815 = select i1 %1054, %struct.SplitInfo.110* %1813, %struct.SplitInfo.110* %1814
  %1816 = fadd float %1774, %1777
  %1817 = getelementptr inbounds %struct.SplitInfo.110, %struct.SplitInfo.110* %1815, i64 0, i32 3
  %1818 = load float, float* %1817, align 8
  %1819 = getelementptr inbounds %struct.SplitInfo.110, %struct.SplitInfo.110* %1815, i64 0, i32 4
  %1820 = load float, float* %1819, align 4
  %1821 = fadd float %1818, %1820
  %1822 = fcmp olt float %1816, %1821
  br i1 %1822, label %1823, label %1834

1823:                                             ; preds = %1812
  %1824 = getelementptr inbounds %struct.SplitInfo.110, %struct.SplitInfo.110* %1815, i64 0, i32 0
  store i64 %974, i64* %1824, align 8
  %1825 = trunc i64 %1763 to i32
  %1826 = getelementptr inbounds %struct.SplitInfo.110, %struct.SplitInfo.110* %1815, i64 0, i32 1
  store i32 %1825, i32* %1826, align 8
  %1827 = getelementptr inbounds %struct.SplitInfo.110, %struct.SplitInfo.110* %1815, i64 0, i32 2
  store i64 %1770, i64* %1827, align 8
  store float %1777, float* %1817, align 8
  %1828 = getelementptr inbounds %struct.CostInfo.113, %struct.CostInfo.113* %1775, i64 %1771, i32 2
  %1829 = load i32, i32* %1828, align 4
  %1830 = getelementptr inbounds %struct.SplitInfo.110, %struct.SplitInfo.110* %1815, i64 0, i32 5
  store i32 %1829, i32* %1830, align 8
  store float %1774, float* %1819, align 4
  %1831 = getelementptr inbounds %struct.CostInfo.113, %struct.CostInfo.113* %1772, i64 %1771, i32 2
  %1832 = load i32, i32* %1831, align 4
  %1833 = getelementptr inbounds %struct.SplitInfo.110, %struct.SplitInfo.110* %1815, i64 0, i32 6
  store i32 %1832, i32* %1833, align 4
  br label %1834

1834:                                             ; preds = %1812, %1823, %1762
  %1835 = phi i64 [ %1764, %1762 ], [ %1770, %1823 ], [ %1770, %1812 ]
  %1836 = add nuw i64 %1763, 1
  %1837 = icmp eq i64 %1836, %1023
  br i1 %1837, label %1757, label %1762

1838:                                             ; preds = %1846, %1757
  %1839 = add nuw i64 %974, 1
  %1840 = icmp ult i64 %1839, %70
  br i1 %1840, label %1841, label %963

1841:                                             ; preds = %1838
  %1842 = load i64, i64* %170, align 8
  %1843 = load i64, i64* %172, align 8
  %1844 = load i64, i64* %175, align 8
  %1845 = load i64, i64* %176, align 8
  br label %969

1846:                                             ; preds = %1846, %1760
  %1847 = phi i64 [ 0, %1760 ], [ %1863, %1846 ]
  %1848 = add i64 %1847, %1761
  %1849 = load i32*, i32** %144, align 8
  %1850 = getelementptr inbounds i32, i32* %1849, i64 %1848
  store i32 0, i32* %1850, align 4
  %1851 = or i64 %1847, 1
  %1852 = add i64 %1851, %1761
  %1853 = load i32*, i32** %144, align 8
  %1854 = getelementptr inbounds i32, i32* %1853, i64 %1852
  store i32 0, i32* %1854, align 4
  %1855 = or i64 %1847, 2
  %1856 = add i64 %1855, %1761
  %1857 = load i32*, i32** %144, align 8
  %1858 = getelementptr inbounds i32, i32* %1857, i64 %1856
  store i32 0, i32* %1858, align 4
  %1859 = or i64 %1847, 3
  %1860 = add i64 %1859, %1761
  %1861 = load i32*, i32** %144, align 8
  %1862 = getelementptr inbounds i32, i32* %1861, i64 %1860
  store i32 0, i32* %1862, align 4
  %1863 = add nuw i64 %1847, 4
  %1864 = icmp eq i64 %1863, %250
  br i1 %1864, label %1838, label %1846

1865:                                             ; preds = %963
  %1866 = load float, float* %92, align 8
  %1867 = load float, float* %93, align 4
  %1868 = fadd float %1866, %1867
  %1869 = fmul float %1868, %5
  %1870 = fcmp ugt float %966, %1869
  br i1 %1870, label %1872, label %1871

1871:                                             ; preds = %1865
  br label %1872

1872:                                             ; preds = %1865, %1871, %963
  %1873 = phi %struct.SplitInfo.110* [ %12, %1871 ], [ %11, %1865 ], [ %11, %963 ]
  %1874 = load float, float* %84, align 8
  %1875 = load float, float* %85, align 4
  %1876 = fadd float %1874, %1875
  %1877 = fadd float %1876, %1
  %1878 = fcmp olt float %1877, %674
  br i1 %1878, label %1879, label %1888

1879:                                             ; preds = %1872
  %1880 = getelementptr inbounds %struct.SplitInfo.110, %struct.SplitInfo.110* %1873, i64 0, i32 3
  %1881 = load float, float* %1880, align 8
  %1882 = getelementptr inbounds %struct.SplitInfo.110, %struct.SplitInfo.110* %1873, i64 0, i32 4
  %1883 = load float, float* %1882, align 4
  %1884 = fadd float %1881, %1883
  %1885 = fmul float %1884, %5
  %1886 = fcmp ugt float %1876, %1885
  br i1 %1886, label %1888, label %1887

1887:                                             ; preds = %1879
  br label %1888

1888:                                             ; preds = %1879, %1887, %1872
  %1889 = phi %struct.SplitInfo.110* [ %10, %1887 ], [ %1873, %1879 ], [ %1873, %1872 ]
  %1890 = load float, float* %76, align 8
  %1891 = load float, float* %77, align 4
  %1892 = fadd float %1890, %1891
  %1893 = fadd float %1892, %1
  %1894 = fcmp olt float %1893, %674
  %1895 = select i1 %1894, %struct.SplitInfo.110* %9, %struct.SplitInfo.110* %1889
  %1896 = load i32*, i32** %162, align 8
  %1897 = icmp eq i32* %1896, null
  br i1 %1897, label %1901, label %1898

1898:                                             ; preds = %1888
  %1899 = ptrtoint i32* %1896 to i64
  store i64 %1899, i64* %166, align 8
  %1900 = bitcast i32* %1896 to i8*
  call void @_ZdlPv(i8* %1900) #29
  br label %1901

1901:                                             ; preds = %1888, %1898
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %161) #24
  %1902 = load i32*, i32** %156, align 8
  %1903 = icmp eq i32* %1902, null
  br i1 %1903, label %1907, label %1904

1904:                                             ; preds = %1901
  %1905 = ptrtoint i32* %1902 to i64
  store i64 %1905, i64* %160, align 8
  %1906 = bitcast i32* %1902 to i8*
  call void @_ZdlPv(i8* %1906) #29
  br label %1907

1907:                                             ; preds = %1901, %1904
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %155) #24
  %1908 = load %struct.CostInfo.113*, %struct.CostInfo.113** %153, align 8
  %1909 = icmp eq %struct.CostInfo.113* %1908, null
  br i1 %1909, label %1913, label %1910

1910:                                             ; preds = %1907
  %1911 = ptrtoint %struct.CostInfo.113* %1908 to i64
  store i64 %1911, i64* %173, align 8
  %1912 = bitcast %struct.CostInfo.113* %1908 to i8*
  call void @_ZdlPv(i8* %1912) #29
  br label %1913

1913:                                             ; preds = %1907, %1910
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %152) #24
  %1914 = load %struct.CostInfo.113*, %struct.CostInfo.113** %150, align 8
  %1915 = icmp eq %struct.CostInfo.113* %1914, null
  br i1 %1915, label %1919, label %1916

1916:                                             ; preds = %1913
  %1917 = ptrtoint %struct.CostInfo.113* %1914 to i64
  store i64 %1917, i64* %171, align 8
  %1918 = bitcast %struct.CostInfo.113* %1914 to i8*
  call void @_ZdlPv(i8* %1918) #29
  br label %1919

1919:                                             ; preds = %1913, %1916
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %149) #24
  %1920 = load i64*, i64** %147, align 8
  %1921 = icmp eq i64* %1920, null
  br i1 %1921, label %1925, label %1922

1922:                                             ; preds = %1919
  %1923 = ptrtoint i64* %1920 to i64
  store i64 %1923, i64* %175, align 8
  %1924 = bitcast i64* %1920 to i8*
  call void @_ZdlPv(i8* %1924) #29
  br label %1925

1925:                                             ; preds = %1919, %1922
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %146) #24
  %1926 = load i32*, i32** %144, align 8
  %1927 = icmp eq i32* %1926, null
  br i1 %1927, label %1931, label %1928

1928:                                             ; preds = %1925
  %1929 = ptrtoint i32* %1926 to i64
  store i64 %1929, i64* %177, align 8
  %1930 = bitcast i32* %1926 to i8*
  call void @_ZdlPv(i8* %1930) #29
  br label %1931

1931:                                             ; preds = %1925, %1928
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %143) #24
  %1932 = load i32*, i32** %141, align 8
  %1933 = icmp eq i32* %1932, null
  br i1 %1933, label %1937, label %1934

1934:                                             ; preds = %1931
  %1935 = ptrtoint i32* %1932 to i64
  store i64 %1935, i64* %180, align 8
  %1936 = bitcast i32* %1932 to i8*
  call void @_ZdlPv(i8* %1936) #29
  br label %1937

1937:                                             ; preds = %1931, %1934
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %140) #24
  %1938 = getelementptr inbounds %struct.SplitInfo.110, %struct.SplitInfo.110* %1895, i64 0, i32 3
  %1939 = load float, float* %1938, align 8
  %1940 = getelementptr inbounds %struct.SplitInfo.110, %struct.SplitInfo.110* %1895, i64 0, i32 4
  %1941 = load float, float* %1940, align 4
  br label %1944

1942:                                             ; preds = %866, %853
  %1943 = phi i64 [ %861, %853 ], [ %873, %866 ]
  store i64 %1943, i64* %132, align 8
  br label %1944

1944:                                             ; preds = %797, %1942, %1937
  %1945 = phi float [ %1941, %1937 ], [ %788, %1942 ], [ %788, %797 ]
  %1946 = phi float [ %1939, %1937 ], [ %788, %1942 ], [ %788, %797 ]
  %1947 = phi %struct.SplitInfo.110* [ %1895, %1937 ], [ %16, %1942 ], [ %16, %797 ]
  %1948 = fadd float %1946, %1945
  %1949 = fadd float %1948, %1
  %1950 = fcmp olt float %1949, %674
  br i1 %1950, label %1951, label %2197

1951:                                             ; preds = %1944
  %1952 = getelementptr inbounds %struct.SplitInfo.110, %struct.SplitInfo.110* %1947, i64 0, i32 0
  %1953 = load i64, i64* %1952, align 8
  %1954 = load i32*, i32** %182, align 8
  %1955 = getelementptr inbounds i32, i32* %1954, i64 %1953
  %1956 = load i32, i32* %1955, align 4
  %1957 = getelementptr inbounds %struct.SplitInfo.110, %struct.SplitInfo.110* %1947, i64 0, i32 1
  %1958 = load i32, i32* %1957, align 8
  %1959 = zext i32 %1958 to i64
  %1960 = load %"class.std::__1::vector.43"*, %"class.std::__1::vector.43"** %174, align 8
  %1961 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %1960, i64 %1953
  %1962 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %1960, i64 %1953, i32 0, i32 1
  %1963 = bitcast i32** %1962 to i64*
  %1964 = load i64, i64* %1963, align 8
  %1965 = bitcast %"class.std::__1::vector.43"* %1961 to i64*
  %1966 = load i64, i64* %1965, align 8
  %1967 = sub i64 %1964, %1966
  %1968 = ashr exact i64 %1967, 2
  %1969 = icmp ugt i64 %1968, %1959
  br i1 %1969, label %1973, label %1970

1970:                                             ; preds = %1951
  %1971 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.16, i64 0, i64 0), i32 65, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.17, i64 0, i64 0)) #24
  %1972 = call zeroext i1 @_ZN3jxl5AbortEv() #28
  unreachable

1973:                                             ; preds = %1951
  %1974 = zext i32 %1956 to i64
  %1975 = inttoptr i64 %1966 to i32*
  %1976 = getelementptr inbounds i32, i32* %1975, i64 %1959
  %1977 = load i32, i32* %1976, align 4
  %1978 = getelementptr inbounds %struct.SplitInfo.110, %struct.SplitInfo.110* %1947, i64 0, i32 5
  %1979 = load i32, i32* %1978, align 8
  %1980 = getelementptr inbounds %struct.SplitInfo.110, %struct.SplitInfo.110* %1947, i64 0, i32 6
  %1981 = load i32, i32* %1980, align 4
  %1982 = load i64, i64* %185, align 8
  %1983 = load i64, i64* %186, align 8
  %1984 = sub i64 %1982, %1983
  %1985 = sdiv exact i64 %1984, 40
  %1986 = trunc i64 %1985 to i32
  %1987 = inttoptr i64 %1983 to %"struct.jxl::PropertyDecisionNode"*
  %1988 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1987, i64 %200, i32 3
  store i32 %1986, i32* %1988, align 8
  %1989 = load i64, i64* %185, align 8
  %1990 = load i64, i64* %186, align 8
  %1991 = sub i64 %1989, %1990
  %1992 = sdiv exact i64 %1991, 40
  %1993 = trunc i64 %1992 to i32
  %1994 = add i32 %1993, 1
  %1995 = inttoptr i64 %1990 to %"struct.jxl::PropertyDecisionNode"*
  %1996 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1995, i64 %200, i32 4
  store i32 %1994, i32* %1996, align 4
  %1997 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %127, align 8
  %1998 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1997, i64 %200, i32 0
  store i32 %1977, i32* %1998, align 8
  %1999 = trunc i32 %1956 to i16
  %2000 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %127, align 8
  %2001 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %2000, i64 %200, i32 1
  store i16 %1999, i16* %2001, align 4
  call void @_ZNSt3__16vectorIN3jxl20PropertyDecisionNodeENS_9allocatorIS2_EEE12emplace_backIJEEEvDpOT_(%"class.std::__1::vector"* %6) #24
  %2002 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %184, align 8
  %2003 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %2002, i64 -1, i32 1
  store i16 -1, i16* %2003, align 4
  %2004 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %184, align 8
  %2005 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %2004, i64 -1, i32 5
  store i32 %1981, i32* %2005, align 8
  %2006 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %184, align 8
  %2007 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %2006, i64 -1, i32 7
  store i64 0, i64* %2007, align 8
  %2008 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %184, align 8
  %2009 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %2008, i64 -1, i32 8
  store i32 1, i32* %2009, align 8
  call void @_ZNSt3__16vectorIN3jxl20PropertyDecisionNodeENS_9allocatorIS2_EEE12emplace_backIJEEEvDpOT_(%"class.std::__1::vector"* %6) #24
  %2010 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %184, align 8
  %2011 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %2010, i64 -1, i32 1
  store i16 -1, i16* %2011, align 4
  %2012 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %184, align 8
  %2013 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %2012, i64 -1, i32 5
  store i32 %1979, i32* %2013, align 8
  %2014 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %184, align 8
  %2015 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %2014, i64 -1, i32 7
  store i64 0, i64* %2015, align 8
  %2016 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %184, align 8
  %2017 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %2016, i64 -1, i32 8
  store i32 1, i32* %2017, align 8
  %2018 = getelementptr inbounds %struct.SplitInfo.110, %struct.SplitInfo.110* %1947, i64 0, i32 2
  %2019 = load i64, i64* %2018, align 8
  %2020 = load i64, i64* %1952, align 8
  call void @_ZN3jxl6N_AVX216SplitTreeSamplesERNS_11TreeSamplesEmmmm(%"struct.jxl::TreeSamples"* dereferenceable(200) %0, i64 %202, i64 %2019, i64 %204, i64 %2020)
  %2021 = icmp ugt i32 %1956, 1
  br i1 %2021, label %2022, label %2028

2022:                                             ; preds = %1973
  %2023 = load i64, i64* %1952, align 8
  %2024 = trunc i64 %2023 to i32
  %2025 = shl i32 1, %2024
  %2026 = sext i32 %2025 to i64
  %2027 = or i64 %206, %2026
  br label %2028

2028:                                             ; preds = %2022, %1973
  %2029 = phi i64 [ %2027, %2022 ], [ %206, %1973 ]
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %187) #24
  store i64 %209, i64* %188, align 8
  store i64 %212, i64* %190, align 8
  %2030 = icmp ult i32 %1956, 2
  br i1 %2030, label %2031, label %2046

2031:                                             ; preds = %2028
  %2032 = add nsw i32 %1977, 1
  %2033 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %24, i64 0, i32 0, i64 %1974, i32 0, i64 1
  %2034 = load i32, i32* %2033, align 4
  %2035 = icmp ugt i32 %2032, %2034
  br i1 %2035, label %2036, label %2039

2036:                                             ; preds = %2031
  %2037 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.1, i64 0, i64 0), i32 491, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.4, i64 0, i64 0)) #24
  %2038 = call zeroext i1 @_ZN3jxl5AbortEv() #28
  unreachable

2039:                                             ; preds = %2031
  store i32 %2032, i32* %2033, align 4
  %2040 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %24, i64 0, i32 0, i64 %1974, i32 0, i64 0
  %2041 = load i32, i32* %2040, align 8
  %2042 = icmp ult i32 %2041, %2032
  br i1 %2042, label %2046, label %2043

2043:                                             ; preds = %2039
  %2044 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.1, i64 0, i64 0), i32 493, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.5, i64 0, i64 0)) #24
  %2045 = call zeroext i1 @_ZN3jxl5AbortEv() #28
  unreachable

2046:                                             ; preds = %2039, %2028
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %191)
  %2047 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %127, align 8
  %2048 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %2047, i64 %200, i32 4
  %2049 = load i32, i32* %2048, align 4
  %2050 = zext i32 %2049 to i64
  %2051 = load i64, i64* %2018, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %191, i8* nonnull align 8 %187, i64 16, i1 false)
  %2052 = load %struct.NodeInfo.104*, %struct.NodeInfo.104** %29, align 8
  %2053 = load %struct.NodeInfo.104*, %struct.NodeInfo.104** %30, align 8
  %2054 = icmp ult %struct.NodeInfo.104* %2052, %2053
  %2055 = ptrtoint %struct.NodeInfo.104* %2053 to i64
  br i1 %2054, label %2056, label %2065

2056:                                             ; preds = %2046
  %2057 = getelementptr inbounds %struct.NodeInfo.104, %struct.NodeInfo.104* %2052, i64 0, i32 0
  store i64 %2050, i64* %2057, align 8
  %2058 = getelementptr inbounds %struct.NodeInfo.104, %struct.NodeInfo.104* %2052, i64 0, i32 1
  store i64 %202, i64* %2058, align 8
  %2059 = getelementptr inbounds %struct.NodeInfo.104, %struct.NodeInfo.104* %2052, i64 0, i32 2
  store i64 %2051, i64* %2059, align 8
  %2060 = getelementptr inbounds %struct.NodeInfo.104, %struct.NodeInfo.104* %2052, i64 0, i32 3
  store i64 %2029, i64* %2060, align 8
  %2061 = getelementptr inbounds %struct.NodeInfo.104, %struct.NodeInfo.104* %2052, i64 0, i32 4
  %2062 = bitcast %"struct.std::__1::array"* %2061 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %2062, i8* nonnull align 8 %191, i64 16, i1 false)
  %2063 = getelementptr inbounds %struct.NodeInfo.104, %struct.NodeInfo.104* %2052, i64 1
  %2064 = ptrtoint %struct.NodeInfo.104* %2063 to i64
  store i64 %2064, i64* %192, align 8
  br label %2113

2065:                                             ; preds = %2046
  %2066 = ptrtoint %struct.NodeInfo.104* %2052 to i64
  %2067 = load i64, i64* %193, align 8
  %2068 = sub i64 %2066, %2067
  %2069 = sdiv exact i64 %2068, 48
  %2070 = add nsw i64 %2069, 1
  %2071 = icmp ugt i64 %2070, 384307168202282325
  br i1 %2071, label %2072, label %2074

2072:                                             ; preds = %2065
  %2073 = bitcast %"class.std::__1::vector.102"* %8 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %2073) #28
  unreachable

2074:                                             ; preds = %2065
  %2075 = sub i64 %2055, %2067
  %2076 = sdiv exact i64 %2075, 48
  %2077 = icmp ult i64 %2076, 192153584101141162
  br i1 %2077, label %2078, label %2083

2078:                                             ; preds = %2074
  %2079 = shl nsw i64 %2076, 1
  %2080 = icmp ult i64 %2079, %2070
  %2081 = select i1 %2080, i64 %2070, i64 %2079
  %2082 = icmp eq i64 %2081, 0
  br i1 %2082, label %2088, label %2083

2083:                                             ; preds = %2078, %2074
  %2084 = phi i64 [ %2081, %2078 ], [ 384307168202282325, %2074 ]
  %2085 = mul i64 %2084, 48
  %2086 = call i8* @_Znwm(i64 %2085) #29
  %2087 = bitcast i8* %2086 to %struct.NodeInfo.104*
  br label %2088

2088:                                             ; preds = %2083, %2078
  %2089 = phi i64 [ %2084, %2083 ], [ 0, %2078 ]
  %2090 = phi %struct.NodeInfo.104* [ %2087, %2083 ], [ null, %2078 ]
  %2091 = getelementptr inbounds %struct.NodeInfo.104, %struct.NodeInfo.104* %2090, i64 %2069
  %2092 = getelementptr inbounds %struct.NodeInfo.104, %struct.NodeInfo.104* %2090, i64 %2089
  %2093 = ptrtoint %struct.NodeInfo.104* %2092 to i64
  %2094 = getelementptr inbounds %struct.NodeInfo.104, %struct.NodeInfo.104* %2091, i64 0, i32 0
  store i64 %2050, i64* %2094, align 8
  %2095 = getelementptr inbounds %struct.NodeInfo.104, %struct.NodeInfo.104* %2090, i64 %2069, i32 1
  store i64 %202, i64* %2095, align 8
  %2096 = getelementptr inbounds %struct.NodeInfo.104, %struct.NodeInfo.104* %2090, i64 %2069, i32 2
  store i64 %2051, i64* %2096, align 8
  %2097 = getelementptr inbounds %struct.NodeInfo.104, %struct.NodeInfo.104* %2090, i64 %2069, i32 3
  store i64 %2029, i64* %2097, align 8
  %2098 = getelementptr inbounds %struct.NodeInfo.104, %struct.NodeInfo.104* %2090, i64 %2069, i32 4
  %2099 = bitcast %"struct.std::__1::array"* %2098 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %2099, i8* nonnull align 8 %191, i64 16, i1 false)
  %2100 = getelementptr inbounds %struct.NodeInfo.104, %struct.NodeInfo.104* %2091, i64 1
  %2101 = ptrtoint %struct.NodeInfo.104* %2100 to i64
  %2102 = sdiv exact i64 %2068, -48
  %2103 = getelementptr inbounds %struct.NodeInfo.104, %struct.NodeInfo.104* %2091, i64 %2102
  %2104 = ptrtoint %struct.NodeInfo.104* %2103 to i64
  %2105 = icmp sgt i64 %2068, 0
  br i1 %2105, label %2106, label %2109

2106:                                             ; preds = %2088
  %2107 = bitcast %struct.NodeInfo.104* %2103 to i8*
  %2108 = inttoptr i64 %2067 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %2107, i8* align 8 %2108, i64 %2068, i1 false) #24
  br label %2109

2109:                                             ; preds = %2106, %2088
  store i64 %2104, i64* %193, align 8
  store i64 %2101, i64* %192, align 8
  store i64 %2093, i64* %194, align 8
  %2110 = icmp eq i64 %2067, 0
  br i1 %2110, label %2113, label %2111

2111:                                             ; preds = %2109
  %2112 = inttoptr i64 %2067 to i8*
  call void @_ZdlPv(i8* %2112) #29
  br label %2113

2113:                                             ; preds = %2056, %2109, %2111
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %191)
  store i64 %209, i64* %188, align 8
  store i64 %212, i64* %190, align 8
  br i1 %2030, label %2114, label %2129

2114:                                             ; preds = %2113
  %2115 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %24, i64 0, i32 0, i64 %1974, i32 0, i64 0
  %2116 = load i32, i32* %2115, align 8
  %2117 = add nsw i32 %1977, 1
  %2118 = icmp ugt i32 %2116, %2117
  br i1 %2118, label %2119, label %2122

2119:                                             ; preds = %2114
  %2120 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.1, i64 0, i64 0), i32 499, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.6, i64 0, i64 0)) #24
  %2121 = call zeroext i1 @_ZN3jxl5AbortEv() #28
  unreachable

2122:                                             ; preds = %2114
  store i32 %2117, i32* %2115, align 8
  %2123 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %24, i64 0, i32 0, i64 %1974, i32 0, i64 1
  %2124 = load i32, i32* %2123, align 4
  %2125 = icmp ult i32 %2117, %2124
  br i1 %2125, label %2129, label %2126

2126:                                             ; preds = %2122
  %2127 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.1, i64 0, i64 0), i32 501, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.5, i64 0, i64 0)) #24
  %2128 = call zeroext i1 @_ZN3jxl5AbortEv() #28
  unreachable

2129:                                             ; preds = %2122, %2113
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %195)
  %2130 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %127, align 8
  %2131 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %2130, i64 %200, i32 3
  %2132 = load i32, i32* %2131, align 8
  %2133 = zext i32 %2132 to i64
  %2134 = load i64, i64* %2018, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %195, i8* nonnull align 8 %187, i64 16, i1 false)
  %2135 = load %struct.NodeInfo.104*, %struct.NodeInfo.104** %29, align 8
  %2136 = load %struct.NodeInfo.104*, %struct.NodeInfo.104** %30, align 8
  %2137 = icmp ult %struct.NodeInfo.104* %2135, %2136
  %2138 = ptrtoint %struct.NodeInfo.104* %2136 to i64
  br i1 %2137, label %2139, label %2148

2139:                                             ; preds = %2129
  %2140 = getelementptr inbounds %struct.NodeInfo.104, %struct.NodeInfo.104* %2135, i64 0, i32 0
  store i64 %2133, i64* %2140, align 8
  %2141 = getelementptr inbounds %struct.NodeInfo.104, %struct.NodeInfo.104* %2135, i64 0, i32 1
  store i64 %2134, i64* %2141, align 8
  %2142 = getelementptr inbounds %struct.NodeInfo.104, %struct.NodeInfo.104* %2135, i64 0, i32 2
  store i64 %204, i64* %2142, align 8
  %2143 = getelementptr inbounds %struct.NodeInfo.104, %struct.NodeInfo.104* %2135, i64 0, i32 3
  store i64 %2029, i64* %2143, align 8
  %2144 = getelementptr inbounds %struct.NodeInfo.104, %struct.NodeInfo.104* %2135, i64 0, i32 4
  %2145 = bitcast %"struct.std::__1::array"* %2144 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %2145, i8* nonnull align 8 %195, i64 16, i1 false)
  %2146 = getelementptr inbounds %struct.NodeInfo.104, %struct.NodeInfo.104* %2135, i64 1
  %2147 = ptrtoint %struct.NodeInfo.104* %2146 to i64
  store i64 %2147, i64* %192, align 8
  br label %2196

2148:                                             ; preds = %2129
  %2149 = ptrtoint %struct.NodeInfo.104* %2135 to i64
  %2150 = load i64, i64* %193, align 8
  %2151 = sub i64 %2149, %2150
  %2152 = sdiv exact i64 %2151, 48
  %2153 = add nsw i64 %2152, 1
  %2154 = icmp ugt i64 %2153, 384307168202282325
  br i1 %2154, label %2155, label %2157

2155:                                             ; preds = %2148
  %2156 = bitcast %"class.std::__1::vector.102"* %8 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %2156) #28
  unreachable

2157:                                             ; preds = %2148
  %2158 = sub i64 %2138, %2150
  %2159 = sdiv exact i64 %2158, 48
  %2160 = icmp ult i64 %2159, 192153584101141162
  br i1 %2160, label %2161, label %2166

2161:                                             ; preds = %2157
  %2162 = shl nsw i64 %2159, 1
  %2163 = icmp ult i64 %2162, %2153
  %2164 = select i1 %2163, i64 %2153, i64 %2162
  %2165 = icmp eq i64 %2164, 0
  br i1 %2165, label %2171, label %2166

2166:                                             ; preds = %2161, %2157
  %2167 = phi i64 [ %2164, %2161 ], [ 384307168202282325, %2157 ]
  %2168 = mul i64 %2167, 48
  %2169 = call i8* @_Znwm(i64 %2168) #29
  %2170 = bitcast i8* %2169 to %struct.NodeInfo.104*
  br label %2171

2171:                                             ; preds = %2166, %2161
  %2172 = phi i64 [ %2167, %2166 ], [ 0, %2161 ]
  %2173 = phi %struct.NodeInfo.104* [ %2170, %2166 ], [ null, %2161 ]
  %2174 = getelementptr inbounds %struct.NodeInfo.104, %struct.NodeInfo.104* %2173, i64 %2152
  %2175 = getelementptr inbounds %struct.NodeInfo.104, %struct.NodeInfo.104* %2173, i64 %2172
  %2176 = ptrtoint %struct.NodeInfo.104* %2175 to i64
  %2177 = getelementptr inbounds %struct.NodeInfo.104, %struct.NodeInfo.104* %2174, i64 0, i32 0
  store i64 %2133, i64* %2177, align 8
  %2178 = getelementptr inbounds %struct.NodeInfo.104, %struct.NodeInfo.104* %2173, i64 %2152, i32 1
  store i64 %2134, i64* %2178, align 8
  %2179 = getelementptr inbounds %struct.NodeInfo.104, %struct.NodeInfo.104* %2173, i64 %2152, i32 2
  store i64 %204, i64* %2179, align 8
  %2180 = getelementptr inbounds %struct.NodeInfo.104, %struct.NodeInfo.104* %2173, i64 %2152, i32 3
  store i64 %2029, i64* %2180, align 8
  %2181 = getelementptr inbounds %struct.NodeInfo.104, %struct.NodeInfo.104* %2173, i64 %2152, i32 4
  %2182 = bitcast %"struct.std::__1::array"* %2181 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %2182, i8* nonnull align 8 %195, i64 16, i1 false)
  %2183 = getelementptr inbounds %struct.NodeInfo.104, %struct.NodeInfo.104* %2174, i64 1
  %2184 = ptrtoint %struct.NodeInfo.104* %2183 to i64
  %2185 = sdiv exact i64 %2151, -48
  %2186 = getelementptr inbounds %struct.NodeInfo.104, %struct.NodeInfo.104* %2174, i64 %2185
  %2187 = ptrtoint %struct.NodeInfo.104* %2186 to i64
  %2188 = icmp sgt i64 %2151, 0
  br i1 %2188, label %2189, label %2192

2189:                                             ; preds = %2171
  %2190 = bitcast %struct.NodeInfo.104* %2186 to i8*
  %2191 = inttoptr i64 %2150 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %2190, i8* align 8 %2191, i64 %2151, i1 false) #24
  br label %2192

2192:                                             ; preds = %2189, %2171
  store i64 %2187, i64* %193, align 8
  store i64 %2184, i64* %192, align 8
  store i64 %2176, i64* %194, align 8
  %2193 = icmp eq i64 %2150, 0
  br i1 %2193, label %2196, label %2194

2194:                                             ; preds = %2192
  %2195 = inttoptr i64 %2150 to i8*
  call void @_ZdlPv(i8* %2195) #29
  br label %2196

2196:                                             ; preds = %2139, %2192, %2194
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %195)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %187) #24
  br label %2197

2197:                                             ; preds = %2196, %1944
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %129) #24
  %2198 = load i32*, i32** %119, align 8
  %2199 = icmp eq i32* %2198, null
  br i1 %2199, label %2203, label %2200

2200:                                             ; preds = %2197
  %2201 = ptrtoint i32* %2198 to i64
  store i64 %2201, i64* %124, align 8
  %2202 = bitcast i32* %2198 to i8*
  call void @_ZdlPv(i8* %2202) #29
  br label %2203

2203:                                             ; preds = %2197, %2200
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %118) #24
  %2204 = load i32*, i32** %113, align 8
  %2205 = icmp eq i32* %2204, null
  br i1 %2205, label %2209, label %2206

2206:                                             ; preds = %2203
  %2207 = ptrtoint i32* %2204 to i64
  store i64 %2207, i64* %117, align 8
  %2208 = bitcast i32* %2204 to i8*
  call void @_ZdlPv(i8* %2208) #29
  br label %2209

2209:                                             ; preds = %2203, %2206
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %112) #24
  %2210 = load i32*, i32** %107, align 8
  %2211 = icmp eq i32* %2210, null
  br i1 %2211, label %2215, label %2212

2212:                                             ; preds = %2209
  %2213 = ptrtoint i32* %2210 to i64
  store i64 %2213, i64* %111, align 8
  %2214 = bitcast i32* %2210 to i8*
  call void @_ZdlPv(i8* %2214) #29
  br label %2215

2215:                                             ; preds = %2209, %2212
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %106) #24
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %96) #24
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %88) #24
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %80) #24
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %72) #24
  %2216 = load %struct.NodeInfo.104*, %struct.NodeInfo.104** %29, align 8
  br label %2217

2217:                                             ; preds = %196, %2215
  %2218 = phi %struct.NodeInfo.104* [ %198, %196 ], [ %2216, %2215 ]
  %2219 = load %struct.NodeInfo.104*, %struct.NodeInfo.104** %28, align 8
  %2220 = icmp eq %struct.NodeInfo.104* %2219, %2218
  br i1 %2220, label %2221, label %196

2221:                                             ; preds = %2217
  %2222 = icmp eq %struct.NodeInfo.104* %2218, null
  br i1 %2222, label %2227, label %2223

2223:                                             ; preds = %2221
  %2224 = ptrtoint %struct.NodeInfo.104* %2218 to i64
  %2225 = bitcast %struct.NodeInfo.104** %29 to i64*
  store i64 %2224, i64* %2225, align 8
  %2226 = bitcast %struct.NodeInfo.104* %2218 to i8*
  call void @_ZdlPv(i8* %2226) #29
  br label %2227

2227:                                             ; preds = %2221, %2223
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %27) #24
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZNSt3__16vectorIZN3jxl6N_AVX213FindBestSplitERNS1_11TreeSamplesEfRKNS0_INS1_21ModularMultiplierInfoENS_9allocatorIS5_EEEENS_5arrayINSB_IjLm2EEELm2EEEfPNS0_INS1_20PropertyDecisionNodeENS6_ISE_EEEEE8CostInfoNS6_ISI_EEE6resizeEm(%"class.std::__1::vector.111"*, i64) unnamed_addr #8 align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.111", %"class.std::__1::vector.111"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %struct.CostInfo.113** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.111"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = sdiv exact i64 %8, 12
  %10 = icmp ult i64 %9, %1
  %11 = inttoptr i64 %7 to %struct.CostInfo.113*
  br i1 %10, label %12, label %87

12:                                               ; preds = %2
  %13 = sub i64 %1, %9
  %14 = getelementptr inbounds %"class.std::__1::vector.111", %"class.std::__1::vector.111"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %15 = bitcast %struct.CostInfo.113** %14 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = sub i64 %16, %5
  %18 = sdiv exact i64 %17, 12
  %19 = icmp ult i64 %18, %13
  br i1 %19, label %35, label %20

20:                                               ; preds = %12
  %21 = inttoptr i64 %5 to %struct.CostInfo.113*
  %22 = getelementptr inbounds %struct.CostInfo.113, %struct.CostInfo.113* %21, i64 %13
  %23 = icmp eq i64 %13, 0
  br i1 %23, label %33, label %26

24:                                               ; preds = %26
  %25 = ptrtoint %struct.CostInfo.113* %22 to i64
  br label %33

26:                                               ; preds = %20, %26
  %27 = phi %struct.CostInfo.113* [ %31, %26 ], [ %21, %20 ]
  %28 = getelementptr inbounds %struct.CostInfo.113, %struct.CostInfo.113* %27, i64 0, i32 2
  store i32 0, i32* %28, align 4
  %29 = getelementptr inbounds %struct.CostInfo.113, %struct.CostInfo.113* %27, i64 0, i32 0
  store float 0x47EFFFFFE0000000, float* %29, align 4
  %30 = getelementptr inbounds %struct.CostInfo.113, %struct.CostInfo.113* %27, i64 0, i32 1
  store float 0.000000e+00, float* %30, align 4
  %31 = getelementptr inbounds %struct.CostInfo.113, %struct.CostInfo.113* %27, i64 1
  %32 = icmp eq %struct.CostInfo.113* %31, %22
  br i1 %32, label %24, label %26

33:                                               ; preds = %24, %20
  %34 = phi i64 [ %25, %24 ], [ %5, %20 ]
  store i64 %34, i64* %4, align 8
  br label %91

35:                                               ; preds = %12
  %36 = icmp ugt i64 %1, 1537228672809129301
  br i1 %36, label %37, label %39

37:                                               ; preds = %35
  %38 = bitcast %"class.std::__1::vector.111"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %38) #28
  unreachable

39:                                               ; preds = %35
  %40 = sub i64 %16, %7
  %41 = sdiv exact i64 %40, 12
  %42 = icmp ult i64 %41, 768614336404564650
  br i1 %42, label %43, label %48

43:                                               ; preds = %39
  %44 = shl nsw i64 %41, 1
  %45 = icmp ult i64 %44, %1
  %46 = select i1 %45, i64 %1, i64 %44
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %53, label %48

48:                                               ; preds = %43, %39
  %49 = phi i64 [ %46, %43 ], [ 1537228672809129301, %39 ]
  %50 = mul i64 %49, 12
  %51 = tail call i8* @_Znwm(i64 %50) #29
  %52 = bitcast i8* %51 to %struct.CostInfo.113*
  br label %53

53:                                               ; preds = %48, %43
  %54 = phi i64 [ %49, %48 ], [ 0, %43 ]
  %55 = phi %struct.CostInfo.113* [ %52, %48 ], [ null, %43 ]
  %56 = getelementptr inbounds %struct.CostInfo.113, %struct.CostInfo.113* %55, i64 %9
  %57 = getelementptr inbounds %struct.CostInfo.113, %struct.CostInfo.113* %55, i64 %1
  br label %58

58:                                               ; preds = %58, %53
  %59 = phi %struct.CostInfo.113* [ %63, %58 ], [ %56, %53 ]
  %60 = getelementptr inbounds %struct.CostInfo.113, %struct.CostInfo.113* %59, i64 0, i32 2
  store i32 0, i32* %60, align 4
  %61 = getelementptr inbounds %struct.CostInfo.113, %struct.CostInfo.113* %59, i64 0, i32 0
  store float 0x47EFFFFFE0000000, float* %61, align 4
  %62 = getelementptr inbounds %struct.CostInfo.113, %struct.CostInfo.113* %59, i64 0, i32 1
  store float 0.000000e+00, float* %62, align 4
  %63 = getelementptr inbounds %struct.CostInfo.113, %struct.CostInfo.113* %59, i64 1
  %64 = icmp eq %struct.CostInfo.113* %57, %63
  br i1 %64, label %65, label %58

65:                                               ; preds = %58
  %66 = getelementptr inbounds %struct.CostInfo.113, %struct.CostInfo.113* %55, i64 %54
  %67 = ptrtoint %struct.CostInfo.113* %66 to i64
  %68 = ptrtoint %struct.CostInfo.113* %57 to i64
  %69 = getelementptr inbounds %"class.std::__1::vector.111", %"class.std::__1::vector.111"* %0, i64 0, i32 0, i32 0
  %70 = load %struct.CostInfo.113*, %struct.CostInfo.113** %69, align 8
  %71 = load i64, i64* %4, align 8
  %72 = ptrtoint %struct.CostInfo.113* %70 to i64
  %73 = sub i64 %71, %72
  %74 = sdiv exact i64 %73, -12
  %75 = getelementptr inbounds %struct.CostInfo.113, %struct.CostInfo.113* %56, i64 %74
  %76 = ptrtoint %struct.CostInfo.113* %75 to i64
  %77 = icmp sgt i64 %73, 0
  br i1 %77, label %78, label %82

78:                                               ; preds = %65
  %79 = bitcast %struct.CostInfo.113* %75 to i8*
  %80 = bitcast %struct.CostInfo.113* %70 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %79, i8* align 4 %80, i64 %73, i1 false) #24
  %81 = load %struct.CostInfo.113*, %struct.CostInfo.113** %69, align 8
  br label %82

82:                                               ; preds = %78, %65
  %83 = phi %struct.CostInfo.113* [ %70, %65 ], [ %81, %78 ]
  store i64 %76, i64* %6, align 8
  store i64 %68, i64* %4, align 8
  store i64 %67, i64* %15, align 8
  %84 = icmp eq %struct.CostInfo.113* %83, null
  br i1 %84, label %91, label %85

85:                                               ; preds = %82
  %86 = bitcast %struct.CostInfo.113* %83 to i8*
  tail call void @_ZdlPv(i8* %86) #29
  br label %91

87:                                               ; preds = %2
  %88 = icmp ugt i64 %9, %1
  br i1 %88, label %89, label %91

89:                                               ; preds = %87
  %90 = getelementptr inbounds %struct.CostInfo.113, %struct.CostInfo.113* %11, i64 %1
  store %struct.CostInfo.113* %90, %struct.CostInfo.113** %3, align 8
  br label %91

91:                                               ; preds = %85, %82, %33, %87, %89
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i64 @_ZN3jxl6N_AVX36PaddedEm(i64) local_unnamed_addr #13 {
  %2 = add i64 %0, 15
  %3 = and i64 %2, -16
  ret i64 %3
}

; Function Attrs: nounwind ssp uwtable
define hidden float @_ZN3jxl6N_AVX312EstimateBitsEPKiPim(i32* readonly, i32*, i64) local_unnamed_addr #14 {
  %4 = getelementptr inbounds i32, i32* %0, i64 %2
  %5 = icmp eq i64 %2, 0
  br i1 %5, label %243, label %6

6:                                                ; preds = %3
  %7 = shl nsw i64 %2, 2
  %8 = add i64 %7, -4
  %9 = lshr exact i64 %8, 2
  %10 = add nuw nsw i64 %9, 1
  %11 = icmp ult i64 %10, 64
  br i1 %11, label %111, label %12

12:                                               ; preds = %6
  %13 = and i64 %10, 9223372036854775744
  %14 = getelementptr i32, i32* %0, i64 %13
  %15 = add nsw i64 %13, -64
  %16 = lshr exact i64 %15, 6
  %17 = add nuw nsw i64 %16, 1
  %18 = and i64 %17, 1
  %19 = icmp eq i64 %15, 0
  br i1 %19, label %65, label %20

20:                                               ; preds = %12
  %21 = sub nuw nsw i64 %17, %18
  br label %22

22:                                               ; preds = %22, %20
  %23 = phi i64 [ 0, %20 ], [ %62, %22 ]
  %24 = phi <16 x i32> [ zeroinitializer, %20 ], [ %58, %22 ]
  %25 = phi <16 x i32> [ zeroinitializer, %20 ], [ %59, %22 ]
  %26 = phi <16 x i32> [ zeroinitializer, %20 ], [ %60, %22 ]
  %27 = phi <16 x i32> [ zeroinitializer, %20 ], [ %61, %22 ]
  %28 = phi i64 [ %21, %20 ], [ %63, %22 ]
  %29 = getelementptr i32, i32* %0, i64 %23
  %30 = bitcast i32* %29 to <16 x i32>*
  %31 = load <16 x i32>, <16 x i32>* %30, align 4
  %32 = getelementptr i32, i32* %29, i64 16
  %33 = bitcast i32* %32 to <16 x i32>*
  %34 = load <16 x i32>, <16 x i32>* %33, align 4
  %35 = getelementptr i32, i32* %29, i64 32
  %36 = bitcast i32* %35 to <16 x i32>*
  %37 = load <16 x i32>, <16 x i32>* %36, align 4
  %38 = getelementptr i32, i32* %29, i64 48
  %39 = bitcast i32* %38 to <16 x i32>*
  %40 = load <16 x i32>, <16 x i32>* %39, align 4
  %41 = add nsw <16 x i32> %31, %24
  %42 = add nsw <16 x i32> %34, %25
  %43 = add nsw <16 x i32> %37, %26
  %44 = add nsw <16 x i32> %40, %27
  %45 = or i64 %23, 64
  %46 = getelementptr i32, i32* %0, i64 %45
  %47 = bitcast i32* %46 to <16 x i32>*
  %48 = load <16 x i32>, <16 x i32>* %47, align 4
  %49 = getelementptr i32, i32* %46, i64 16
  %50 = bitcast i32* %49 to <16 x i32>*
  %51 = load <16 x i32>, <16 x i32>* %50, align 4
  %52 = getelementptr i32, i32* %46, i64 32
  %53 = bitcast i32* %52 to <16 x i32>*
  %54 = load <16 x i32>, <16 x i32>* %53, align 4
  %55 = getelementptr i32, i32* %46, i64 48
  %56 = bitcast i32* %55 to <16 x i32>*
  %57 = load <16 x i32>, <16 x i32>* %56, align 4
  %58 = add nsw <16 x i32> %48, %41
  %59 = add nsw <16 x i32> %51, %42
  %60 = add nsw <16 x i32> %54, %43
  %61 = add nsw <16 x i32> %57, %44
  %62 = add i64 %23, 128
  %63 = add i64 %28, -2
  %64 = icmp eq i64 %63, 0
  br i1 %64, label %65, label %22, !llvm.loop !170

65:                                               ; preds = %22, %12
  %66 = phi <16 x i32> [ undef, %12 ], [ %58, %22 ]
  %67 = phi <16 x i32> [ undef, %12 ], [ %59, %22 ]
  %68 = phi <16 x i32> [ undef, %12 ], [ %60, %22 ]
  %69 = phi <16 x i32> [ undef, %12 ], [ %61, %22 ]
  %70 = phi i64 [ 0, %12 ], [ %62, %22 ]
  %71 = phi <16 x i32> [ zeroinitializer, %12 ], [ %58, %22 ]
  %72 = phi <16 x i32> [ zeroinitializer, %12 ], [ %59, %22 ]
  %73 = phi <16 x i32> [ zeroinitializer, %12 ], [ %60, %22 ]
  %74 = phi <16 x i32> [ zeroinitializer, %12 ], [ %61, %22 ]
  %75 = icmp eq i64 %18, 0
  br i1 %75, label %93, label %76

76:                                               ; preds = %65
  %77 = getelementptr i32, i32* %0, i64 %70
  %78 = getelementptr i32, i32* %77, i64 48
  %79 = bitcast i32* %78 to <16 x i32>*
  %80 = load <16 x i32>, <16 x i32>* %79, align 4
  %81 = add nsw <16 x i32> %80, %74
  %82 = getelementptr i32, i32* %77, i64 32
  %83 = bitcast i32* %82 to <16 x i32>*
  %84 = load <16 x i32>, <16 x i32>* %83, align 4
  %85 = add nsw <16 x i32> %84, %73
  %86 = getelementptr i32, i32* %77, i64 16
  %87 = bitcast i32* %86 to <16 x i32>*
  %88 = load <16 x i32>, <16 x i32>* %87, align 4
  %89 = add nsw <16 x i32> %88, %72
  %90 = bitcast i32* %77 to <16 x i32>*
  %91 = load <16 x i32>, <16 x i32>* %90, align 4
  %92 = add nsw <16 x i32> %91, %71
  br label %93

93:                                               ; preds = %65, %76
  %94 = phi <16 x i32> [ %66, %65 ], [ %92, %76 ]
  %95 = phi <16 x i32> [ %67, %65 ], [ %89, %76 ]
  %96 = phi <16 x i32> [ %68, %65 ], [ %85, %76 ]
  %97 = phi <16 x i32> [ %69, %65 ], [ %81, %76 ]
  %98 = add <16 x i32> %95, %94
  %99 = add <16 x i32> %96, %98
  %100 = add <16 x i32> %97, %99
  %101 = shufflevector <16 x i32> %100, <16 x i32> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %102 = add <16 x i32> %100, %101
  %103 = shufflevector <16 x i32> %102, <16 x i32> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %104 = add <16 x i32> %102, %103
  %105 = shufflevector <16 x i32> %104, <16 x i32> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %106 = add <16 x i32> %104, %105
  %107 = shufflevector <16 x i32> %106, <16 x i32> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %108 = add <16 x i32> %106, %107
  %109 = extractelement <16 x i32> %108, i32 0
  %110 = icmp eq i64 %10, %13
  br i1 %110, label %121, label %111

111:                                              ; preds = %93, %6
  %112 = phi i32 [ 0, %6 ], [ %109, %93 ]
  %113 = phi i32* [ %0, %6 ], [ %14, %93 ]
  br label %114

114:                                              ; preds = %111, %114
  %115 = phi i32 [ %118, %114 ], [ %112, %111 ]
  %116 = phi i32* [ %119, %114 ], [ %113, %111 ]
  %117 = load i32, i32* %116, align 4
  %118 = add nsw i32 %117, %115
  %119 = getelementptr inbounds i32, i32* %116, i64 1
  %120 = icmp eq i32* %119, %4
  br i1 %120, label %121, label %114, !llvm.loop !171

121:                                              ; preds = %114, %93
  %122 = phi i32 [ %109, %93 ], [ %118, %114 ]
  %123 = add i32 %122, 4095
  %124 = ashr i32 %123, 12
  %125 = insertelement <16 x i32> undef, i32 %124, i32 0
  %126 = shufflevector <16 x i32> %125, <16 x i32> undef, <16 x i32> zeroinitializer
  br i1 %5, label %243, label %252

127:                                              ; preds = %252
  %128 = getelementptr inbounds i32, i32* %1, i64 %2
  %129 = shl nsw i64 %2, 2
  %130 = add i64 %129, -4
  %131 = lshr exact i64 %130, 2
  %132 = add nuw nsw i64 %131, 1
  %133 = icmp ult i64 %132, 64
  br i1 %133, label %233, label %134

134:                                              ; preds = %127
  %135 = and i64 %132, 9223372036854775744
  %136 = getelementptr i32, i32* %1, i64 %135
  %137 = add nsw i64 %135, -64
  %138 = lshr exact i64 %137, 6
  %139 = add nuw nsw i64 %138, 1
  %140 = and i64 %139, 1
  %141 = icmp eq i64 %137, 0
  br i1 %141, label %187, label %142

142:                                              ; preds = %134
  %143 = sub nuw nsw i64 %139, %140
  br label %144

144:                                              ; preds = %144, %142
  %145 = phi i64 [ 0, %142 ], [ %184, %144 ]
  %146 = phi <16 x i32> [ zeroinitializer, %142 ], [ %180, %144 ]
  %147 = phi <16 x i32> [ zeroinitializer, %142 ], [ %181, %144 ]
  %148 = phi <16 x i32> [ zeroinitializer, %142 ], [ %182, %144 ]
  %149 = phi <16 x i32> [ zeroinitializer, %142 ], [ %183, %144 ]
  %150 = phi i64 [ %143, %142 ], [ %185, %144 ]
  %151 = getelementptr i32, i32* %1, i64 %145
  %152 = bitcast i32* %151 to <16 x i32>*
  %153 = load <16 x i32>, <16 x i32>* %152, align 4
  %154 = getelementptr i32, i32* %151, i64 16
  %155 = bitcast i32* %154 to <16 x i32>*
  %156 = load <16 x i32>, <16 x i32>* %155, align 4
  %157 = getelementptr i32, i32* %151, i64 32
  %158 = bitcast i32* %157 to <16 x i32>*
  %159 = load <16 x i32>, <16 x i32>* %158, align 4
  %160 = getelementptr i32, i32* %151, i64 48
  %161 = bitcast i32* %160 to <16 x i32>*
  %162 = load <16 x i32>, <16 x i32>* %161, align 4
  %163 = add nsw <16 x i32> %153, %146
  %164 = add nsw <16 x i32> %156, %147
  %165 = add nsw <16 x i32> %159, %148
  %166 = add nsw <16 x i32> %162, %149
  %167 = or i64 %145, 64
  %168 = getelementptr i32, i32* %1, i64 %167
  %169 = bitcast i32* %168 to <16 x i32>*
  %170 = load <16 x i32>, <16 x i32>* %169, align 4
  %171 = getelementptr i32, i32* %168, i64 16
  %172 = bitcast i32* %171 to <16 x i32>*
  %173 = load <16 x i32>, <16 x i32>* %172, align 4
  %174 = getelementptr i32, i32* %168, i64 32
  %175 = bitcast i32* %174 to <16 x i32>*
  %176 = load <16 x i32>, <16 x i32>* %175, align 4
  %177 = getelementptr i32, i32* %168, i64 48
  %178 = bitcast i32* %177 to <16 x i32>*
  %179 = load <16 x i32>, <16 x i32>* %178, align 4
  %180 = add nsw <16 x i32> %170, %163
  %181 = add nsw <16 x i32> %173, %164
  %182 = add nsw <16 x i32> %176, %165
  %183 = add nsw <16 x i32> %179, %166
  %184 = add i64 %145, 128
  %185 = add i64 %150, -2
  %186 = icmp eq i64 %185, 0
  br i1 %186, label %187, label %144, !llvm.loop !172

187:                                              ; preds = %144, %134
  %188 = phi <16 x i32> [ undef, %134 ], [ %180, %144 ]
  %189 = phi <16 x i32> [ undef, %134 ], [ %181, %144 ]
  %190 = phi <16 x i32> [ undef, %134 ], [ %182, %144 ]
  %191 = phi <16 x i32> [ undef, %134 ], [ %183, %144 ]
  %192 = phi i64 [ 0, %134 ], [ %184, %144 ]
  %193 = phi <16 x i32> [ zeroinitializer, %134 ], [ %180, %144 ]
  %194 = phi <16 x i32> [ zeroinitializer, %134 ], [ %181, %144 ]
  %195 = phi <16 x i32> [ zeroinitializer, %134 ], [ %182, %144 ]
  %196 = phi <16 x i32> [ zeroinitializer, %134 ], [ %183, %144 ]
  %197 = icmp eq i64 %140, 0
  br i1 %197, label %215, label %198

198:                                              ; preds = %187
  %199 = getelementptr i32, i32* %1, i64 %192
  %200 = getelementptr i32, i32* %199, i64 48
  %201 = bitcast i32* %200 to <16 x i32>*
  %202 = load <16 x i32>, <16 x i32>* %201, align 4
  %203 = add nsw <16 x i32> %202, %196
  %204 = getelementptr i32, i32* %199, i64 32
  %205 = bitcast i32* %204 to <16 x i32>*
  %206 = load <16 x i32>, <16 x i32>* %205, align 4
  %207 = add nsw <16 x i32> %206, %195
  %208 = getelementptr i32, i32* %199, i64 16
  %209 = bitcast i32* %208 to <16 x i32>*
  %210 = load <16 x i32>, <16 x i32>* %209, align 4
  %211 = add nsw <16 x i32> %210, %194
  %212 = bitcast i32* %199 to <16 x i32>*
  %213 = load <16 x i32>, <16 x i32>* %212, align 4
  %214 = add nsw <16 x i32> %213, %193
  br label %215

215:                                              ; preds = %187, %198
  %216 = phi <16 x i32> [ %188, %187 ], [ %214, %198 ]
  %217 = phi <16 x i32> [ %189, %187 ], [ %211, %198 ]
  %218 = phi <16 x i32> [ %190, %187 ], [ %207, %198 ]
  %219 = phi <16 x i32> [ %191, %187 ], [ %203, %198 ]
  %220 = add <16 x i32> %217, %216
  %221 = add <16 x i32> %218, %220
  %222 = add <16 x i32> %219, %221
  %223 = shufflevector <16 x i32> %222, <16 x i32> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %224 = add <16 x i32> %222, %223
  %225 = shufflevector <16 x i32> %224, <16 x i32> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %226 = add <16 x i32> %224, %225
  %227 = shufflevector <16 x i32> %226, <16 x i32> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %228 = add <16 x i32> %226, %227
  %229 = shufflevector <16 x i32> %228, <16 x i32> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %230 = add <16 x i32> %228, %229
  %231 = extractelement <16 x i32> %230, i32 0
  %232 = icmp eq i64 %132, %135
  br i1 %232, label %243, label %233

233:                                              ; preds = %215, %127
  %234 = phi i32 [ 0, %127 ], [ %231, %215 ]
  %235 = phi i32* [ %1, %127 ], [ %136, %215 ]
  br label %236

236:                                              ; preds = %233, %236
  %237 = phi i32 [ %240, %236 ], [ %234, %233 ]
  %238 = phi i32* [ %241, %236 ], [ %235, %233 ]
  %239 = load i32, i32* %238, align 4
  %240 = add nsw i32 %239, %237
  %241 = getelementptr inbounds i32, i32* %238, i64 1
  %242 = icmp eq i32* %241, %128
  br i1 %242, label %243, label %236, !llvm.loop !173

243:                                              ; preds = %236, %215, %3, %121
  %244 = phi i32 [ 0, %121 ], [ 0, %3 ], [ %231, %215 ], [ %240, %236 ]
  %245 = sext i32 %244 to i64
  %246 = uitofp i64 %245 to float
  %247 = fdiv float 1.000000e+00, %246
  %248 = insertelement <16 x float> undef, float %247, i32 0
  %249 = shufflevector <16 x float> %248, <16 x float> undef, <16 x i32> zeroinitializer
  %250 = insertelement <16 x i32> undef, i32 %244, i32 0
  %251 = shufflevector <16 x i32> %250, <16 x i32> undef, <16 x i32> zeroinitializer
  br i1 %5, label %267, label %282

252:                                              ; preds = %121, %252
  %253 = phi i64 [ %263, %252 ], [ 0, %121 ]
  %254 = getelementptr inbounds i32, i32* %0, i64 %253
  %255 = bitcast i32* %254 to <16 x i32>*
  %256 = load <16 x i32>, <16 x i32>* %255, align 1, !alias.scope !174, !noalias !177
  %257 = icmp eq <16 x i32> %256, zeroinitializer
  %258 = icmp sgt <16 x i32> %126, %256
  %259 = select <16 x i1> %258, <16 x i32> %126, <16 x i32> %256
  %260 = select <16 x i1> %257, <16 x i32> zeroinitializer, <16 x i32> %259
  %261 = getelementptr inbounds i32, i32* %1, i64 %253
  %262 = bitcast i32* %261 to <16 x i32>*
  store <16 x i32> %260, <16 x i32>* %262, align 1, !alias.scope !179
  %263 = add i64 %253, 16
  %264 = icmp ult i64 %263, %2
  br i1 %264, label %252, label %127

265:                                              ; preds = %282
  %266 = bitcast <16 x float> %313 to <8 x double>
  br label %267

267:                                              ; preds = %265, %243
  %268 = phi <8 x double> [ zeroinitializer, %243 ], [ %266, %265 ]
  %269 = shufflevector <8 x double> %268, <8 x double> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %270 = bitcast <4 x double> %269 to <8 x float>
  %271 = shufflevector <8 x double> %268, <8 x double> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %272 = bitcast <4 x double> %271 to <8 x float>
  %273 = fadd <8 x float> %270, %272
  %274 = shufflevector <8 x float> %273, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %275 = shufflevector <8 x float> %273, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %276 = fadd <4 x float> %274, %275
  %277 = shufflevector <4 x float> %276, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %278 = fadd <4 x float> %276, %277
  %279 = shufflevector <4 x float> %278, <4 x float> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %280 = fadd <4 x float> %278, %279
  %281 = extractelement <4 x float> %280, i32 0
  ret float %281

282:                                              ; preds = %243, %282
  %283 = phi i64 [ %314, %282 ], [ 0, %243 ]
  %284 = phi <16 x float> [ %313, %282 ], [ zeroinitializer, %243 ]
  %285 = getelementptr inbounds i32, i32* %0, i64 %283
  %286 = bitcast i32* %285 to <16 x i32>*
  %287 = load <16 x i32>, <16 x i32>* %286, align 1, !alias.scope !182, !noalias !185
  %288 = sitofp <16 x i32> %287 to <16 x float>
  %289 = getelementptr inbounds i32, i32* %1, i64 %283
  %290 = bitcast i32* %289 to <16 x i32>*
  %291 = load <16 x i32>, <16 x i32>* %290, align 1, !alias.scope !187, !noalias !190
  %292 = sitofp <16 x i32> %291 to <16 x float>
  %293 = fmul <16 x float> %249, %292
  %294 = icmp eq <16 x i32> %291, %251
  %295 = bitcast <16 x float> %293 to <16 x i32>
  %296 = add <16 x i32> %295, <i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811>
  %297 = ashr <16 x i32> %296, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %298 = and <16 x i32> %296, <i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608>
  %299 = sub <16 x i32> %295, %298
  %300 = bitcast <16 x i32> %299 to <16 x float>
  %301 = sitofp <16 x i32> %297 to <16 x float>
  %302 = fadd <16 x float> %300, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  fence acq_rel
  %303 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %302, <16 x float> <float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000>, <16 x float> <float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000>) #24
  %304 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %302, <16 x float> <float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000>, <16 x float> <float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000>) #24
  fence acq_rel
  %305 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %303, <16 x float> %302, <16 x float> <float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000>) #24
  %306 = tail call <16 x float> @llvm.fma.v16f32(<16 x float> %304, <16 x float> %302, <16 x float> <float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000>) #24
  fence acq_rel
  %307 = fdiv <16 x float> %305, %306
  %308 = fadd <16 x float> %307, %301
  %309 = fcmp oeq <16 x float> %288, zeroinitializer
  %310 = select <16 x i1> %294, <16 x float> zeroinitializer, <16 x float> %308
  %311 = fmul <16 x float> %310, %288
  %312 = select <16 x i1> %309, <16 x float> zeroinitializer, <16 x float> %311
  %313 = fsub <16 x float> %284, %312
  %314 = add i64 %283, 16
  %315 = icmp ult i64 %314, %2
  br i1 %315, label %282, label %265
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_AVX313MakeSplitNodeEmiiNS_9PredictorElS1_lPNSt3__16vectorINS_20PropertyDecisionNodeENS2_9allocatorIS4_EEEE(i64, i32, i32, i32, i64, i32, i64, %"class.std::__1::vector"*) local_unnamed_addr #15 {
  %9 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %7, i64 0, i32 0, i32 1
  %10 = bitcast %"struct.jxl::PropertyDecisionNode"** %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = bitcast %"class.std::__1::vector"* %7 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = sub i64 %11, %13
  %15 = sdiv exact i64 %14, 40
  %16 = trunc i64 %15 to i32
  %17 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %7, i64 0, i32 0, i32 0
  %18 = inttoptr i64 %13 to %"struct.jxl::PropertyDecisionNode"*
  %19 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %18, i64 %0, i32 3
  store i32 %16, i32* %19, align 8
  %20 = load i64, i64* %10, align 8
  %21 = load i64, i64* %12, align 8
  %22 = sub i64 %20, %21
  %23 = sdiv exact i64 %22, 40
  %24 = trunc i64 %23 to i32
  %25 = add i32 %24, 1
  %26 = inttoptr i64 %21 to %"struct.jxl::PropertyDecisionNode"*
  %27 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %26, i64 %0, i32 4
  store i32 %25, i32* %27, align 4
  %28 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %17, align 8
  %29 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %28, i64 %0, i32 0
  store i32 %2, i32* %29, align 8
  %30 = trunc i32 %1 to i16
  %31 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %17, align 8
  %32 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %31, i64 %0, i32 1
  store i16 %30, i16* %32, align 4
  tail call void @_ZNSt3__16vectorIN3jxl20PropertyDecisionNodeENS_9allocatorIS2_EEE12emplace_backIJEEEvDpOT_(%"class.std::__1::vector"* %7)
  %33 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %9, align 8
  %34 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %33, i64 -1, i32 1
  store i16 -1, i16* %34, align 4
  %35 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %9, align 8
  %36 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %35, i64 -1, i32 5
  store i32 %5, i32* %36, align 8
  %37 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %9, align 8
  %38 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %37, i64 -1, i32 7
  store i64 %6, i64* %38, align 8
  %39 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %9, align 8
  %40 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %39, i64 -1, i32 8
  store i32 1, i32* %40, align 8
  tail call void @_ZNSt3__16vectorIN3jxl20PropertyDecisionNodeENS_9allocatorIS2_EEE12emplace_backIJEEEvDpOT_(%"class.std::__1::vector"* %7)
  %41 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %9, align 8
  %42 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %41, i64 -1, i32 1
  store i16 -1, i16* %42, align 4
  %43 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %9, align 8
  %44 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %43, i64 -1, i32 5
  store i32 %3, i32* %44, align 8
  %45 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %9, align 8
  %46 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %45, i64 -1, i32 7
  store i64 %4, i64* %46, align 8
  %47 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %9, align 8
  %48 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %47, i64 -1, i32 8
  store i32 1, i32* %48, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden i32 @_ZN3jxl6N_AVX313BoxIntersectsENSt3__15arrayINS2_IjLm2EEELm2EEES4_RjS5_(i64, i64, i64, i64, i32* nocapture dereferenceable(4), i32* nocapture dereferenceable(4)) local_unnamed_addr #16 {
  %7 = trunc i64 %2 to i32
  %8 = lshr i64 %0, 32
  %9 = trunc i64 %8 to i32
  %10 = icmp ult i32 %7, %9
  %11 = lshr i64 %2, 32
  %12 = trunc i64 %11 to i32
  %13 = trunc i64 %0 to i32
  %14 = trunc i64 %3 to i32
  %15 = lshr i64 %1, 32
  %16 = trunc i64 %15 to i32
  %17 = lshr i64 %3, 32
  %18 = trunc i64 %17 to i32
  %19 = trunc i64 %1 to i32
  %20 = icmp ugt i32 %12, %13
  %21 = and i1 %10, %20
  br i1 %21, label %22, label %34

22:                                               ; preds = %6
  %23 = icmp ugt i32 %7, %13
  br i1 %23, label %26, label %24

24:                                               ; preds = %22
  %25 = icmp ult i32 %12, %9
  br i1 %25, label %26, label %29

26:                                               ; preds = %24, %22
  %27 = phi i32 [ %7, %22 ], [ %12, %24 ]
  store i32 0, i32* %4, align 4
  %28 = add i32 %27, -1
  store i32 %28, i32* %5, align 4
  br label %29

29:                                               ; preds = %26, %24
  %30 = phi i8 [ 0, %24 ], [ 1, %26 ]
  %31 = icmp ult i32 %14, %16
  %32 = icmp ugt i32 %18, %19
  %33 = and i1 %31, %32
  br i1 %33, label %36, label %34

34:                                               ; preds = %6, %29, %43
  %35 = phi i32 [ %47, %43 ], [ 0, %29 ], [ 0, %6 ]
  ret i32 %35

36:                                               ; preds = %29
  %37 = icmp ugt i32 %14, %19
  br i1 %37, label %40, label %38

38:                                               ; preds = %36
  %39 = icmp ult i32 %18, %16
  br i1 %39, label %40, label %43

40:                                               ; preds = %36, %38
  %41 = phi i32 [ %18, %38 ], [ %14, %36 ]
  store i32 1, i32* %4, align 4
  %42 = add i32 %41, -1
  store i32 %42, i32* %5, align 4
  br label %43

43:                                               ; preds = %40, %38
  %44 = phi i8 [ %30, %38 ], [ 1, %40 ]
  %45 = and i8 %44, 1
  %46 = icmp eq i8 %45, 0
  %47 = select i1 %46, i32 2, i32 1
  br label %34
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_AVX316SplitTreeSamplesERNS_11TreeSamplesEmmmm(%"struct.jxl::TreeSamples"* dereferenceable(200), i64, i64, i64, i64) local_unnamed_addr #15 {
  %6 = add i64 %1, 1
  %7 = icmp ult i64 %6, %3
  br i1 %7, label %8, label %153

8:                                                ; preds = %5
  %9 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 0, i32 0, i32 0
  %10 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 0, i32 0, i32 1
  %11 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 2, i32 0, i32 0
  %12 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 2, i32 0, i32 1
  %13 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 1, i32 0, i32 0
  br label %14

14:                                               ; preds = %8, %148
  %15 = phi i64 [ %6, %8 ], [ %151, %148 ]
  %16 = phi i64 [ %1, %8 ], [ %150, %148 ]
  %17 = phi i64 [ %3, %8 ], [ %149, %148 ]
  %18 = phi i64 [ -7723592293110705685, %8 ], [ %19, %148 ]
  %19 = phi i64 [ -4658895280553007687, %8 ], [ %32, %148 ]
  %20 = icmp ugt i64 %17, %16
  br i1 %20, label %24, label %21

21:                                               ; preds = %14
  %22 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.1, i64 0, i64 0), i32 154, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i64 0, i64 0)) #24
  %23 = tail call zeroext i1 @_ZN3jxl5AbortEv() #28
  unreachable

24:                                               ; preds = %14
  %25 = add i64 %18, %19
  %26 = shl i64 %18, 23
  %27 = xor i64 %26, %18
  %28 = lshr i64 %27, 18
  %29 = lshr i64 %19, 5
  %30 = xor i64 %29, %19
  %31 = xor i64 %30, %27
  %32 = xor i64 %31, %28
  %33 = sub i64 %17, %16
  %34 = urem i64 %25, %33
  %35 = add i64 %34, %16
  %36 = icmp eq i64 %34, 0
  br i1 %36, label %73, label %37

37:                                               ; preds = %24
  %38 = load %"class.std::__1::vector.8"*, %"class.std::__1::vector.8"** %9, align 8
  %39 = load %"class.std::__1::vector.8"*, %"class.std::__1::vector.8"** %10, align 8
  %40 = icmp eq %"class.std::__1::vector.8"* %38, %39
  br i1 %40, label %41, label %45

41:                                               ; preds = %45, %37
  %42 = load %"class.std::__1::vector.29"*, %"class.std::__1::vector.29"** %11, align 8
  %43 = load %"class.std::__1::vector.29"*, %"class.std::__1::vector.29"** %12, align 8
  %44 = icmp eq %"class.std::__1::vector.29"* %42, %43
  br i1 %44, label %57, label %63

45:                                               ; preds = %37, %45
  %46 = phi %"class.std::__1::vector.8"* [ %55, %45 ], [ %38, %37 ]
  %47 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %46, i64 0, i32 0, i32 0
  %48 = load %"struct.jxl::TreeSamples::ResidualToken"*, %"struct.jxl::TreeSamples::ResidualToken"** %47, align 8
  %49 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %48, i64 %16
  %50 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %48, i64 %35
  %51 = bitcast %"struct.jxl::TreeSamples::ResidualToken"* %49 to i16*
  %52 = load i16, i16* %51, align 1
  %53 = bitcast %"struct.jxl::TreeSamples::ResidualToken"* %50 to i16*
  %54 = load i16, i16* %53, align 1
  store i16 %54, i16* %51, align 1
  store i16 %52, i16* %53, align 1
  %55 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %46, i64 1
  %56 = icmp eq %"class.std::__1::vector.8"* %55, %39
  br i1 %56, label %41, label %45

57:                                               ; preds = %63, %41
  %58 = load i16*, i16** %13, align 8
  %59 = getelementptr inbounds i16, i16* %58, i64 %16
  %60 = getelementptr inbounds i16, i16* %58, i64 %35
  %61 = load i16, i16* %59, align 2
  %62 = load i16, i16* %60, align 2
  store i16 %62, i16* %59, align 2
  store i16 %61, i16* %60, align 2
  br label %73

63:                                               ; preds = %41, %63
  %64 = phi %"class.std::__1::vector.29"* [ %71, %63 ], [ %42, %41 ]
  %65 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %64, i64 0, i32 0, i32 0
  %66 = load i8*, i8** %65, align 8
  %67 = getelementptr inbounds i8, i8* %66, i64 %16
  %68 = getelementptr inbounds i8, i8* %66, i64 %35
  %69 = load i8, i8* %67, align 1
  %70 = load i8, i8* %68, align 1
  store i8 %70, i8* %67, align 1
  store i8 %69, i8* %68, align 1
  %71 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %64, i64 1
  %72 = icmp eq %"class.std::__1::vector.29"* %71, %43
  br i1 %72, label %57, label %63

73:                                               ; preds = %24, %57
  %74 = icmp ult i64 %15, %17
  br i1 %74, label %79, label %75

75:                                               ; preds = %141, %73
  %76 = phi i64 [ %16, %73 ], [ %142, %141 ]
  %77 = phi i64 [ %15, %73 ], [ %143, %141 ]
  %78 = icmp ugt i64 %76, %2
  br i1 %78, label %148, label %146

79:                                               ; preds = %73, %141
  %80 = phi i64 [ %144, %141 ], [ %15, %73 ]
  %81 = phi i64 [ %143, %141 ], [ %15, %73 ]
  %82 = phi i64 [ %142, %141 ], [ %16, %73 ]
  %83 = load %"class.std::__1::vector.29"*, %"class.std::__1::vector.29"** %11, align 8
  %84 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %83, i64 %4, i32 0, i32 0
  %85 = load i8*, i8** %84, align 8
  %86 = getelementptr inbounds i8, i8* %85, i64 %80
  %87 = load i8, i8* %86, align 1
  %88 = zext i8 %87 to i32
  %89 = getelementptr inbounds i8, i8* %85, i64 %82
  %90 = load i8, i8* %89, align 1
  %91 = zext i8 %90 to i32
  %92 = sub nsw i32 %88, %91
  %93 = icmp slt i32 %92, 0
  br i1 %93, label %94, label %97

94:                                               ; preds = %79
  tail call void @_ZN3jxl11TreeSamples12ThreeShuffleEmmm(%"struct.jxl::TreeSamples"* %0, i64 %82, i64 %81, i64 %80)
  %95 = add i64 %82, 1
  %96 = add i64 %81, 1
  br label %141

97:                                               ; preds = %79
  %98 = icmp eq i32 %92, 0
  br i1 %98, label %99, label %141

99:                                               ; preds = %97
  %100 = icmp eq i64 %81, %80
  br i1 %100, label %139, label %101

101:                                              ; preds = %99
  %102 = load %"class.std::__1::vector.8"*, %"class.std::__1::vector.8"** %9, align 8
  %103 = load %"class.std::__1::vector.8"*, %"class.std::__1::vector.8"** %10, align 8
  %104 = icmp eq %"class.std::__1::vector.8"* %102, %103
  br i1 %104, label %107, label %111

105:                                              ; preds = %111
  %106 = load %"class.std::__1::vector.29"*, %"class.std::__1::vector.29"** %11, align 8
  br label %107

107:                                              ; preds = %105, %101
  %108 = phi %"class.std::__1::vector.29"* [ %106, %105 ], [ %83, %101 ]
  %109 = load %"class.std::__1::vector.29"*, %"class.std::__1::vector.29"** %12, align 8
  %110 = icmp eq %"class.std::__1::vector.29"* %108, %109
  br i1 %110, label %123, label %129

111:                                              ; preds = %101, %111
  %112 = phi %"class.std::__1::vector.8"* [ %121, %111 ], [ %102, %101 ]
  %113 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %112, i64 0, i32 0, i32 0
  %114 = load %"struct.jxl::TreeSamples::ResidualToken"*, %"struct.jxl::TreeSamples::ResidualToken"** %113, align 8
  %115 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %114, i64 %81
  %116 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %114, i64 %80
  %117 = bitcast %"struct.jxl::TreeSamples::ResidualToken"* %115 to i16*
  %118 = load i16, i16* %117, align 1
  %119 = bitcast %"struct.jxl::TreeSamples::ResidualToken"* %116 to i16*
  %120 = load i16, i16* %119, align 1
  store i16 %120, i16* %117, align 1
  store i16 %118, i16* %119, align 1
  %121 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %112, i64 1
  %122 = icmp eq %"class.std::__1::vector.8"* %121, %103
  br i1 %122, label %105, label %111

123:                                              ; preds = %129, %107
  %124 = load i16*, i16** %13, align 8
  %125 = getelementptr inbounds i16, i16* %124, i64 %81
  %126 = getelementptr inbounds i16, i16* %124, i64 %80
  %127 = load i16, i16* %125, align 2
  %128 = load i16, i16* %126, align 2
  store i16 %128, i16* %125, align 2
  store i16 %127, i16* %126, align 2
  br label %139

129:                                              ; preds = %107, %129
  %130 = phi %"class.std::__1::vector.29"* [ %137, %129 ], [ %108, %107 ]
  %131 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %130, i64 0, i32 0, i32 0
  %132 = load i8*, i8** %131, align 8
  %133 = getelementptr inbounds i8, i8* %132, i64 %81
  %134 = getelementptr inbounds i8, i8* %132, i64 %80
  %135 = load i8, i8* %133, align 1
  %136 = load i8, i8* %134, align 1
  store i8 %136, i8* %133, align 1
  store i8 %135, i8* %134, align 1
  %137 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %130, i64 1
  %138 = icmp eq %"class.std::__1::vector.29"* %137, %109
  br i1 %138, label %123, label %129

139:                                              ; preds = %99, %123
  %140 = add i64 %81, 1
  br label %141

141:                                              ; preds = %97, %139, %94
  %142 = phi i64 [ %95, %94 ], [ %82, %139 ], [ %82, %97 ]
  %143 = phi i64 [ %96, %94 ], [ %140, %139 ], [ %81, %97 ]
  %144 = add nuw i64 %80, 1
  %145 = icmp eq i64 %144, %17
  br i1 %145, label %75, label %79

146:                                              ; preds = %75
  %147 = icmp ult i64 %77, %2
  br i1 %147, label %148, label %153

148:                                              ; preds = %75, %146
  %149 = phi i64 [ %76, %75 ], [ %17, %146 ]
  %150 = phi i64 [ %16, %75 ], [ %77, %146 ]
  %151 = add i64 %150, 1
  %152 = icmp ugt i64 %149, %151
  br i1 %152, label %14, label %153

153:                                              ; preds = %148, %146, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_AVX313FindBestSplitERNS_11TreeSamplesEfRKNSt3__16vectorINS_21ModularMultiplierInfoENS3_9allocatorIS5_EEEENS3_5arrayINSB_IjLm2EEELm2EEEfPNS4_INS_20PropertyDecisionNodeENS6_ISE_EEEE(%"struct.jxl::TreeSamples"* dereferenceable(200), float, %"class.std::__1::vector.69"* nocapture readonly dereferenceable(24), i64, i64, float, %"class.std::__1::vector"*) #14 {
  %8 = alloca %"class.std::__1::vector.124", align 8
  %9 = alloca %struct.SplitInfo.132, align 8
  %10 = alloca %struct.SplitInfo.132, align 8
  %11 = alloca %struct.SplitInfo.132, align 8
  %12 = alloca %struct.SplitInfo.132, align 8
  %13 = alloca %"class.std::__1::vector.43", align 8
  %14 = alloca %"class.std::__1::vector.43", align 8
  %15 = alloca %"class.std::__1::vector.55", align 8
  %16 = alloca %struct.SplitInfo.132, align 8
  %17 = alloca %"class.std::__1::vector.43", align 8
  %18 = alloca %"class.std::__1::vector.43", align 8
  %19 = alloca %"class.std::__1::vector.83", align 8
  %20 = alloca %"class.std::__1::vector.133", align 8
  %21 = alloca %"class.std::__1::vector.133", align 8
  %22 = alloca %"class.std::__1::vector.43", align 8
  %23 = alloca %"class.std::__1::vector.43", align 8
  %24 = alloca %"struct.std::__1::array", align 8
  %25 = alloca [2 x %"struct.std::__1::array.5"], align 8
  %26 = alloca [2 x %"struct.std::__1::array.5"], align 8
  %27 = bitcast %"class.std::__1::vector.124"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %27) #24
  %28 = getelementptr inbounds %"class.std::__1::vector.124", %"class.std::__1::vector.124"* %8, i64 0, i32 0, i32 0
  %29 = getelementptr inbounds %"class.std::__1::vector.124", %"class.std::__1::vector.124"* %8, i64 0, i32 0, i32 1
  %30 = getelementptr inbounds %"class.std::__1::vector.124", %"class.std::__1::vector.124"* %8, i64 0, i32 0, i32 2, i32 0, i32 0
  %31 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 1
  %32 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 1, i32 0, i32 1
  %33 = bitcast i16** %32 to i64*
  %34 = load i64, i64* %33, align 8
  %35 = bitcast %"class.std::__1::vector.20"* %31 to i64*
  %36 = load i64, i64* %35, align 8
  %37 = sub i64 %34, %36
  %38 = ashr exact i64 %37, 1
  %39 = bitcast %struct.NodeInfo.126** %29 to i64*
  %40 = bitcast %"class.std::__1::vector.124"* %8 to i64*
  %41 = bitcast %struct.NodeInfo.126** %30 to i64*
  %42 = tail call i8* @_Znwm(i64 48) #29
  %43 = getelementptr inbounds i8, i8* %42, i64 48
  %44 = ptrtoint i8* %43 to i64
  %45 = getelementptr inbounds i8, i8* %42, i64 16
  %46 = bitcast i8* %45 to i64*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %42, i8 0, i64 16, i1 false)
  store i64 %38, i64* %46, align 8
  %47 = getelementptr inbounds i8, i8* %42, i64 24
  %48 = bitcast i8* %47 to i64*
  store i64 0, i64* %48, align 8
  %49 = getelementptr inbounds i8, i8* %42, i64 32
  %50 = bitcast i8* %49 to i64*
  store i64 %3, i64* %50, align 8
  %51 = getelementptr inbounds i8, i8* %42, i64 40
  %52 = bitcast i8* %51 to i64*
  store i64 %4, i64* %52, align 8
  %53 = ptrtoint i8* %42 to i64
  store i64 %53, i64* %40, align 8
  store i64 %44, i64* %39, align 8
  store i64 %44, i64* %41, align 8
  %54 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 5, i32 0, i32 1
  %55 = bitcast i32** %54 to i64*
  %56 = load i64, i64* %55, align 8
  %57 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 5
  %58 = bitcast %"class.std::__1::vector.62"* %57 to i64*
  %59 = load i64, i64* %58, align 8
  %60 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 4, i32 0, i32 1
  %61 = bitcast i32** %60 to i64*
  %62 = load i64, i64* %61, align 8
  %63 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 4
  %64 = bitcast %"class.std::__1::vector.55"* %63 to i64*
  %65 = load i64, i64* %64, align 8
  %66 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 5, i32 0, i32 1
  %67 = sub i64 %56, %59
  %68 = ashr exact i64 %67, 2
  %69 = sub i64 %62, %65
  %70 = ashr exact i64 %69, 2
  %71 = bitcast i8* %43 to %struct.NodeInfo.126*
  %72 = bitcast %struct.SplitInfo.132* %9 to i8*
  %73 = getelementptr inbounds %struct.SplitInfo.132, %struct.SplitInfo.132* %9, i64 0, i32 0
  %74 = getelementptr inbounds %struct.SplitInfo.132, %struct.SplitInfo.132* %9, i64 0, i32 1
  %75 = getelementptr inbounds %struct.SplitInfo.132, %struct.SplitInfo.132* %9, i64 0, i32 2
  %76 = getelementptr inbounds %struct.SplitInfo.132, %struct.SplitInfo.132* %9, i64 0, i32 3
  %77 = getelementptr inbounds %struct.SplitInfo.132, %struct.SplitInfo.132* %9, i64 0, i32 4
  %78 = getelementptr inbounds %struct.SplitInfo.132, %struct.SplitInfo.132* %9, i64 0, i32 5
  %79 = getelementptr inbounds %struct.SplitInfo.132, %struct.SplitInfo.132* %9, i64 0, i32 6
  %80 = bitcast %struct.SplitInfo.132* %10 to i8*
  %81 = getelementptr inbounds %struct.SplitInfo.132, %struct.SplitInfo.132* %10, i64 0, i32 0
  %82 = getelementptr inbounds %struct.SplitInfo.132, %struct.SplitInfo.132* %10, i64 0, i32 1
  %83 = getelementptr inbounds %struct.SplitInfo.132, %struct.SplitInfo.132* %10, i64 0, i32 2
  %84 = getelementptr inbounds %struct.SplitInfo.132, %struct.SplitInfo.132* %10, i64 0, i32 3
  %85 = getelementptr inbounds %struct.SplitInfo.132, %struct.SplitInfo.132* %10, i64 0, i32 4
  %86 = getelementptr inbounds %struct.SplitInfo.132, %struct.SplitInfo.132* %10, i64 0, i32 5
  %87 = getelementptr inbounds %struct.SplitInfo.132, %struct.SplitInfo.132* %10, i64 0, i32 6
  %88 = bitcast %struct.SplitInfo.132* %11 to i8*
  %89 = getelementptr inbounds %struct.SplitInfo.132, %struct.SplitInfo.132* %11, i64 0, i32 0
  %90 = getelementptr inbounds %struct.SplitInfo.132, %struct.SplitInfo.132* %11, i64 0, i32 1
  %91 = getelementptr inbounds %struct.SplitInfo.132, %struct.SplitInfo.132* %11, i64 0, i32 2
  %92 = getelementptr inbounds %struct.SplitInfo.132, %struct.SplitInfo.132* %11, i64 0, i32 3
  %93 = getelementptr inbounds %struct.SplitInfo.132, %struct.SplitInfo.132* %11, i64 0, i32 4
  %94 = getelementptr inbounds %struct.SplitInfo.132, %struct.SplitInfo.132* %11, i64 0, i32 5
  %95 = getelementptr inbounds %struct.SplitInfo.132, %struct.SplitInfo.132* %11, i64 0, i32 6
  %96 = bitcast %struct.SplitInfo.132* %12 to i8*
  %97 = getelementptr inbounds %struct.SplitInfo.132, %struct.SplitInfo.132* %12, i64 0, i32 0
  %98 = getelementptr inbounds %struct.SplitInfo.132, %struct.SplitInfo.132* %12, i64 0, i32 1
  %99 = getelementptr inbounds %struct.SplitInfo.132, %struct.SplitInfo.132* %12, i64 0, i32 2
  %100 = getelementptr inbounds %struct.SplitInfo.132, %struct.SplitInfo.132* %12, i64 0, i32 3
  %101 = getelementptr inbounds %struct.SplitInfo.132, %struct.SplitInfo.132* %12, i64 0, i32 4
  %102 = getelementptr inbounds %struct.SplitInfo.132, %struct.SplitInfo.132* %12, i64 0, i32 5
  %103 = getelementptr inbounds %struct.SplitInfo.132, %struct.SplitInfo.132* %12, i64 0, i32 6
  %104 = icmp eq i64 %67, 0
  %105 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 0, i32 0, i32 0
  %106 = bitcast %"class.std::__1::vector.43"* %13 to i8*
  %107 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %13, i64 0, i32 0, i32 0
  %108 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %13, i64 0, i32 0, i32 1
  %109 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %13, i64 0, i32 0, i32 2, i32 0, i32 0
  %110 = bitcast %"class.std::__1::vector.43"* %13 to i8**
  %111 = bitcast i32** %108 to i64*
  %112 = bitcast %"class.std::__1::vector.43"* %14 to i8*
  %113 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %14, i64 0, i32 0, i32 0
  %114 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %14, i64 0, i32 0, i32 1
  %115 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %14, i64 0, i32 0, i32 2, i32 0, i32 0
  %116 = bitcast %"class.std::__1::vector.43"* %14 to i8**
  %117 = bitcast i32** %114 to i64*
  %118 = bitcast %"class.std::__1::vector.55"* %15 to i8*
  %119 = getelementptr inbounds %"class.std::__1::vector.55", %"class.std::__1::vector.55"* %15, i64 0, i32 0, i32 0
  %120 = getelementptr inbounds %"class.std::__1::vector.55", %"class.std::__1::vector.55"* %15, i64 0, i32 0, i32 1
  %121 = getelementptr inbounds %"class.std::__1::vector.55", %"class.std::__1::vector.55"* %15, i64 0, i32 0, i32 2, i32 0, i32 0
  %122 = icmp ugt i64 %68, 4611686018427387903
  %123 = bitcast %"class.std::__1::vector.55"* %15 to i8**
  %124 = bitcast i32** %120 to i64*
  %125 = add nsw i64 %68, -1
  %126 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 1, i32 0, i32 0
  %127 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %6, i64 0, i32 0, i32 0
  %128 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 5, i32 0, i32 0
  %129 = bitcast %struct.SplitInfo.132* %16 to i8*
  %130 = getelementptr inbounds %struct.SplitInfo.132, %struct.SplitInfo.132* %16, i64 0, i32 0
  %131 = getelementptr inbounds %struct.SplitInfo.132, %struct.SplitInfo.132* %16, i64 0, i32 1
  %132 = getelementptr inbounds %struct.SplitInfo.132, %struct.SplitInfo.132* %16, i64 0, i32 2
  %133 = getelementptr inbounds %struct.SplitInfo.132, %struct.SplitInfo.132* %16, i64 0, i32 3
  %134 = getelementptr inbounds %struct.SplitInfo.132, %struct.SplitInfo.132* %16, i64 0, i32 4
  %135 = getelementptr inbounds %struct.SplitInfo.132, %struct.SplitInfo.132* %16, i64 0, i32 5
  %136 = getelementptr inbounds %struct.SplitInfo.132, %struct.SplitInfo.132* %16, i64 0, i32 6
  %137 = getelementptr inbounds %"class.std::__1::vector.69", %"class.std::__1::vector.69"* %2, i64 0, i32 0, i32 1
  %138 = bitcast %"struct.jxl::ModularMultiplierInfo"** %137 to i64*
  %139 = bitcast %"class.std::__1::vector.69"* %2 to i64*
  %140 = bitcast %"class.std::__1::vector.43"* %17 to i8*
  %141 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %17, i64 0, i32 0, i32 0
  %142 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %17, i64 0, i32 0, i32 1
  %143 = bitcast %"class.std::__1::vector.43"* %18 to i8*
  %144 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %18, i64 0, i32 0, i32 0
  %145 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %18, i64 0, i32 0, i32 1
  %146 = bitcast %"class.std::__1::vector.83"* %19 to i8*
  %147 = getelementptr inbounds %"class.std::__1::vector.83", %"class.std::__1::vector.83"* %19, i64 0, i32 0, i32 0
  %148 = getelementptr inbounds %"class.std::__1::vector.83", %"class.std::__1::vector.83"* %19, i64 0, i32 0, i32 1
  %149 = bitcast %"class.std::__1::vector.133"* %20 to i8*
  %150 = getelementptr inbounds %"class.std::__1::vector.133", %"class.std::__1::vector.133"* %20, i64 0, i32 0, i32 0
  %151 = getelementptr inbounds %"class.std::__1::vector.133", %"class.std::__1::vector.133"* %20, i64 0, i32 0, i32 1
  %152 = bitcast %"class.std::__1::vector.133"* %21 to i8*
  %153 = getelementptr inbounds %"class.std::__1::vector.133", %"class.std::__1::vector.133"* %21, i64 0, i32 0, i32 0
  %154 = getelementptr inbounds %"class.std::__1::vector.133", %"class.std::__1::vector.133"* %21, i64 0, i32 0, i32 1
  %155 = bitcast %"class.std::__1::vector.43"* %22 to i8*
  %156 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %22, i64 0, i32 0, i32 0
  %157 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %22, i64 0, i32 0, i32 1
  %158 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %22, i64 0, i32 0, i32 2, i32 0, i32 0
  %159 = bitcast %"class.std::__1::vector.43"* %22 to i8**
  %160 = bitcast i32** %157 to i64*
  %161 = bitcast %"class.std::__1::vector.43"* %23 to i8*
  %162 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %23, i64 0, i32 0, i32 0
  %163 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %23, i64 0, i32 0, i32 1
  %164 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %23, i64 0, i32 0, i32 2, i32 0, i32 0
  %165 = bitcast %"class.std::__1::vector.43"* %23 to i8**
  %166 = bitcast i32** %163 to i64*
  %167 = fadd float %1, 1.000000e+02
  %168 = fdiv float 8.000000e+02, %167
  %169 = icmp ne i64 %69, 0
  %170 = bitcast %"class.std::__1::vector.133"* %20 to i64*
  %171 = bitcast %struct.CostInfo.135** %151 to i64*
  %172 = bitcast %"class.std::__1::vector.133"* %21 to i64*
  %173 = bitcast %struct.CostInfo.135** %154 to i64*
  %174 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 3, i32 0, i32 0
  %175 = bitcast i64** %148 to i64*
  %176 = bitcast %"class.std::__1::vector.83"* %19 to i64*
  %177 = bitcast i32** %145 to i64*
  %178 = bitcast %"class.std::__1::vector.43"* %18 to i64*
  %179 = bitcast %"class.std::__1::vector.43"* %17 to i64*
  %180 = bitcast i32** %142 to i64*
  %181 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 2, i32 0, i32 0
  %182 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 4, i32 0, i32 0
  %183 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 6, i32 0, i32 0
  %184 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %6, i64 0, i32 0, i32 1
  %185 = bitcast %"struct.jxl::PropertyDecisionNode"** %184 to i64*
  %186 = bitcast %"class.std::__1::vector"* %6 to i64*
  %187 = bitcast %"struct.std::__1::array"* %24 to i8*
  %188 = bitcast %"struct.std::__1::array"* %24 to i64*
  %189 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %24, i64 0, i32 0, i64 1
  %190 = bitcast %"struct.std::__1::array.5"* %189 to i64*
  %191 = bitcast [2 x %"struct.std::__1::array.5"]* %25 to i8*
  %192 = bitcast %struct.NodeInfo.126** %29 to i64*
  %193 = bitcast %"class.std::__1::vector.124"* %8 to i64*
  %194 = bitcast %struct.NodeInfo.126** %30 to i64*
  %195 = bitcast [2 x %"struct.std::__1::array.5"]* %26 to i8*
  br label %196

196:                                              ; preds = %7, %2388
  %197 = phi %struct.NodeInfo.126* [ %71, %7 ], [ %2389, %2388 ]
  %198 = getelementptr inbounds %struct.NodeInfo.126, %struct.NodeInfo.126* %197, i64 -1
  %199 = getelementptr inbounds %struct.NodeInfo.126, %struct.NodeInfo.126* %198, i64 0, i32 0
  %200 = load i64, i64* %199, align 8
  %201 = getelementptr inbounds %struct.NodeInfo.126, %struct.NodeInfo.126* %197, i64 -1, i32 1
  %202 = load i64, i64* %201, align 8
  %203 = getelementptr inbounds %struct.NodeInfo.126, %struct.NodeInfo.126* %197, i64 -1, i32 2
  %204 = load i64, i64* %203, align 8
  %205 = getelementptr inbounds %struct.NodeInfo.126, %struct.NodeInfo.126* %197, i64 -1, i32 3
  %206 = load i64, i64* %205, align 8
  %207 = getelementptr inbounds %struct.NodeInfo.126, %struct.NodeInfo.126* %197, i64 -1, i32 4
  %208 = bitcast %"struct.std::__1::array"* %207 to i64*
  %209 = load i64, i64* %208, align 8
  %210 = getelementptr inbounds %struct.NodeInfo.126, %struct.NodeInfo.126* %197, i64 -1, i32 4, i32 0, i64 1
  %211 = bitcast %"struct.std::__1::array.5"* %210 to i64*
  %212 = load i64, i64* %211, align 8
  store %struct.NodeInfo.126* %198, %struct.NodeInfo.126** %29, align 8
  %213 = icmp eq i64 %204, %202
  br i1 %213, label %2388, label %214

214:                                              ; preds = %196
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %72) #24
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %72, i8* align 8 bitcast ({ i64, i32, [4 x i8], i64, float, float, i32, i32 }* @__const._ZN3jxl8N_SCALAR13FindBestSplitERNS_11TreeSamplesEfRKNSt3__16vectorINS_21ModularMultiplierInfoENS3_9allocatorIS5_EEEENS3_5arrayINSB_IjLm2EEELm2EEEfPNS4_INS_20PropertyDecisionNodeENS6_ISE_EEEE.forced_split to i8*), i64 16, i1 false)
  store i64 0, i64* %73, align 8
  store i32 0, i32* %74, align 8
  store i64 0, i64* %75, align 8
  store float 0x47EFFFFFE0000000, float* %76, align 8
  store float 0x47EFFFFFE0000000, float* %77, align 4
  store i32 0, i32* %78, align 8
  store i32 0, i32* %79, align 4
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %80) #24
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %80, i8* align 8 bitcast ({ i64, i32, [4 x i8], i64, float, float, i32, i32 }* @__const._ZN3jxl8N_SCALAR13FindBestSplitERNS_11TreeSamplesEfRKNSt3__16vectorINS_21ModularMultiplierInfoENS3_9allocatorIS5_EEEENS3_5arrayINSB_IjLm2EEELm2EEEfPNS4_INS_20PropertyDecisionNodeENS6_ISE_EEEE.forced_split to i8*), i64 16, i1 false)
  store i64 0, i64* %81, align 8
  store i32 0, i32* %82, align 8
  store i64 0, i64* %83, align 8
  store float 0x47EFFFFFE0000000, float* %84, align 8
  store float 0x47EFFFFFE0000000, float* %85, align 4
  store i32 0, i32* %86, align 8
  store i32 0, i32* %87, align 4
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %88) #24
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %88, i8* align 8 bitcast ({ i64, i32, [4 x i8], i64, float, float, i32, i32 }* @__const._ZN3jxl8N_SCALAR13FindBestSplitERNS_11TreeSamplesEfRKNSt3__16vectorINS_21ModularMultiplierInfoENS3_9allocatorIS5_EEEENS3_5arrayINSB_IjLm2EEELm2EEEfPNS4_INS_20PropertyDecisionNodeENS6_ISE_EEEE.forced_split to i8*), i64 16, i1 false)
  store i64 0, i64* %89, align 8
  store i32 0, i32* %90, align 8
  store i64 0, i64* %91, align 8
  store float 0x47EFFFFFE0000000, float* %92, align 8
  store float 0x47EFFFFFE0000000, float* %93, align 4
  store i32 0, i32* %94, align 8
  store i32 0, i32* %95, align 4
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %96) #24
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %96, i8* align 8 bitcast ({ i64, i32, [4 x i8], i64, float, float, i32, i32 }* @__const._ZN3jxl8N_SCALAR13FindBestSplitERNS_11TreeSamplesEfRKNSt3__16vectorINS_21ModularMultiplierInfoENS3_9allocatorIS5_EEEENS3_5arrayINSB_IjLm2EEELm2EEEfPNS4_INS_20PropertyDecisionNodeENS6_ISE_EEEE.forced_split to i8*), i64 16, i1 false)
  store i64 0, i64* %97, align 8
  store i32 0, i32* %98, align 8
  store i64 0, i64* %99, align 8
  store float 0x47EFFFFFE0000000, float* %100, align 8
  store float 0x47EFFFFFE0000000, float* %101, align 4
  store i32 0, i32* %102, align 8
  store i32 0, i32* %103, align 4
  br i1 %104, label %404, label %215

215:                                              ; preds = %214
  %216 = icmp ugt i64 %204, %202
  %217 = load %"class.std::__1::vector.8"*, %"class.std::__1::vector.8"** %105, align 8
  %218 = sub i64 %204, %202
  %219 = icmp ult i64 %218, 32
  %220 = and i64 %218, -32
  %221 = add i64 %202, %220
  %222 = icmp eq i64 %218, %220
  br label %223

223:                                              ; preds = %215, %462
  %224 = phi i64 [ 0, %215 ], [ %464, %462 ]
  %225 = phi i64 [ 0, %215 ], [ %463, %462 ]
  br i1 %216, label %226, label %462

226:                                              ; preds = %223
  %227 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %217, i64 %224, i32 0, i32 0
  %228 = load %"struct.jxl::TreeSamples::ResidualToken"*, %"struct.jxl::TreeSamples::ResidualToken"** %227, align 8
  br i1 %219, label %229, label %232

229:                                              ; preds = %387, %226
  %230 = phi i64 [ %202, %226 ], [ %221, %387 ]
  %231 = phi i64 [ %225, %226 ], [ %403, %387 ]
  br label %466

232:                                              ; preds = %226
  %233 = insertelement <8 x i64> undef, i64 %225, i32 0
  %234 = shufflevector <8 x i64> %233, <8 x i64> undef, <8 x i32> zeroinitializer
  br label %235

235:                                              ; preds = %235, %232
  %236 = phi i64 [ 0, %232 ], [ %385, %235 ]
  %237 = phi <8 x i64> [ %234, %232 ], [ %381, %235 ]
  %238 = phi <8 x i64> [ %234, %232 ], [ %382, %235 ]
  %239 = phi <8 x i64> [ %234, %232 ], [ %383, %235 ]
  %240 = phi <8 x i64> [ %234, %232 ], [ %384, %235 ]
  %241 = add i64 %202, %236
  %242 = add i64 %241, 1
  %243 = add i64 %241, 2
  %244 = add i64 %241, 3
  %245 = add i64 %241, 4
  %246 = add i64 %241, 5
  %247 = add i64 %241, 6
  %248 = add i64 %241, 7
  %249 = add i64 %241, 8
  %250 = add i64 %241, 9
  %251 = add i64 %241, 10
  %252 = add i64 %241, 11
  %253 = add i64 %241, 12
  %254 = add i64 %241, 13
  %255 = add i64 %241, 14
  %256 = add i64 %241, 15
  %257 = add i64 %241, 16
  %258 = add i64 %241, 17
  %259 = add i64 %241, 18
  %260 = add i64 %241, 19
  %261 = add i64 %241, 20
  %262 = add i64 %241, 21
  %263 = add i64 %241, 22
  %264 = add i64 %241, 23
  %265 = add i64 %241, 24
  %266 = add i64 %241, 25
  %267 = add i64 %241, 26
  %268 = add i64 %241, 27
  %269 = add i64 %241, 28
  %270 = add i64 %241, 29
  %271 = add i64 %241, 30
  %272 = add i64 %241, 31
  %273 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %228, i64 %241, i32 0
  %274 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %228, i64 %242, i32 0
  %275 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %228, i64 %243, i32 0
  %276 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %228, i64 %244, i32 0
  %277 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %228, i64 %245, i32 0
  %278 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %228, i64 %246, i32 0
  %279 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %228, i64 %247, i32 0
  %280 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %228, i64 %248, i32 0
  %281 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %228, i64 %249, i32 0
  %282 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %228, i64 %250, i32 0
  %283 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %228, i64 %251, i32 0
  %284 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %228, i64 %252, i32 0
  %285 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %228, i64 %253, i32 0
  %286 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %228, i64 %254, i32 0
  %287 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %228, i64 %255, i32 0
  %288 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %228, i64 %256, i32 0
  %289 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %228, i64 %257, i32 0
  %290 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %228, i64 %258, i32 0
  %291 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %228, i64 %259, i32 0
  %292 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %228, i64 %260, i32 0
  %293 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %228, i64 %261, i32 0
  %294 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %228, i64 %262, i32 0
  %295 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %228, i64 %263, i32 0
  %296 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %228, i64 %264, i32 0
  %297 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %228, i64 %265, i32 0
  %298 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %228, i64 %266, i32 0
  %299 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %228, i64 %267, i32 0
  %300 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %228, i64 %268, i32 0
  %301 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %228, i64 %269, i32 0
  %302 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %228, i64 %270, i32 0
  %303 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %228, i64 %271, i32 0
  %304 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %228, i64 %272, i32 0
  %305 = load i8, i8* %273, align 1
  %306 = load i8, i8* %274, align 1
  %307 = load i8, i8* %275, align 1
  %308 = load i8, i8* %276, align 1
  %309 = load i8, i8* %277, align 1
  %310 = load i8, i8* %278, align 1
  %311 = load i8, i8* %279, align 1
  %312 = load i8, i8* %280, align 1
  %313 = insertelement <8 x i8> undef, i8 %305, i32 0
  %314 = insertelement <8 x i8> %313, i8 %306, i32 1
  %315 = insertelement <8 x i8> %314, i8 %307, i32 2
  %316 = insertelement <8 x i8> %315, i8 %308, i32 3
  %317 = insertelement <8 x i8> %316, i8 %309, i32 4
  %318 = insertelement <8 x i8> %317, i8 %310, i32 5
  %319 = insertelement <8 x i8> %318, i8 %311, i32 6
  %320 = insertelement <8 x i8> %319, i8 %312, i32 7
  %321 = load i8, i8* %281, align 1
  %322 = load i8, i8* %282, align 1
  %323 = load i8, i8* %283, align 1
  %324 = load i8, i8* %284, align 1
  %325 = load i8, i8* %285, align 1
  %326 = load i8, i8* %286, align 1
  %327 = load i8, i8* %287, align 1
  %328 = load i8, i8* %288, align 1
  %329 = insertelement <8 x i8> undef, i8 %321, i32 0
  %330 = insertelement <8 x i8> %329, i8 %322, i32 1
  %331 = insertelement <8 x i8> %330, i8 %323, i32 2
  %332 = insertelement <8 x i8> %331, i8 %324, i32 3
  %333 = insertelement <8 x i8> %332, i8 %325, i32 4
  %334 = insertelement <8 x i8> %333, i8 %326, i32 5
  %335 = insertelement <8 x i8> %334, i8 %327, i32 6
  %336 = insertelement <8 x i8> %335, i8 %328, i32 7
  %337 = load i8, i8* %289, align 1
  %338 = load i8, i8* %290, align 1
  %339 = load i8, i8* %291, align 1
  %340 = load i8, i8* %292, align 1
  %341 = load i8, i8* %293, align 1
  %342 = load i8, i8* %294, align 1
  %343 = load i8, i8* %295, align 1
  %344 = load i8, i8* %296, align 1
  %345 = insertelement <8 x i8> undef, i8 %337, i32 0
  %346 = insertelement <8 x i8> %345, i8 %338, i32 1
  %347 = insertelement <8 x i8> %346, i8 %339, i32 2
  %348 = insertelement <8 x i8> %347, i8 %340, i32 3
  %349 = insertelement <8 x i8> %348, i8 %341, i32 4
  %350 = insertelement <8 x i8> %349, i8 %342, i32 5
  %351 = insertelement <8 x i8> %350, i8 %343, i32 6
  %352 = insertelement <8 x i8> %351, i8 %344, i32 7
  %353 = load i8, i8* %297, align 1
  %354 = load i8, i8* %298, align 1
  %355 = load i8, i8* %299, align 1
  %356 = load i8, i8* %300, align 1
  %357 = load i8, i8* %301, align 1
  %358 = load i8, i8* %302, align 1
  %359 = load i8, i8* %303, align 1
  %360 = load i8, i8* %304, align 1
  %361 = insertelement <8 x i8> undef, i8 %353, i32 0
  %362 = insertelement <8 x i8> %361, i8 %354, i32 1
  %363 = insertelement <8 x i8> %362, i8 %355, i32 2
  %364 = insertelement <8 x i8> %363, i8 %356, i32 3
  %365 = insertelement <8 x i8> %364, i8 %357, i32 4
  %366 = insertelement <8 x i8> %365, i8 %358, i32 5
  %367 = insertelement <8 x i8> %366, i8 %359, i32 6
  %368 = insertelement <8 x i8> %367, i8 %360, i32 7
  %369 = zext <8 x i8> %320 to <8 x i64>
  %370 = zext <8 x i8> %336 to <8 x i64>
  %371 = zext <8 x i8> %352 to <8 x i64>
  %372 = zext <8 x i8> %368 to <8 x i64>
  %373 = add nuw nsw <8 x i64> %369, <i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1>
  %374 = add nuw nsw <8 x i64> %370, <i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1>
  %375 = add nuw nsw <8 x i64> %371, <i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1>
  %376 = add nuw nsw <8 x i64> %372, <i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1>
  %377 = icmp ugt <8 x i64> %237, %373
  %378 = icmp ugt <8 x i64> %238, %374
  %379 = icmp ugt <8 x i64> %239, %375
  %380 = icmp ugt <8 x i64> %240, %376
  %381 = select <8 x i1> %377, <8 x i64> %237, <8 x i64> %373
  %382 = select <8 x i1> %378, <8 x i64> %238, <8 x i64> %374
  %383 = select <8 x i1> %379, <8 x i64> %239, <8 x i64> %375
  %384 = select <8 x i1> %380, <8 x i64> %240, <8 x i64> %376
  %385 = add i64 %236, 32
  %386 = icmp eq i64 %385, %220
  br i1 %386, label %387, label %235, !llvm.loop !192

387:                                              ; preds = %235
  %388 = icmp ugt <8 x i64> %381, %382
  %389 = select <8 x i1> %388, <8 x i64> %381, <8 x i64> %382
  %390 = icmp ugt <8 x i64> %389, %383
  %391 = select <8 x i1> %390, <8 x i64> %389, <8 x i64> %383
  %392 = icmp ugt <8 x i64> %391, %384
  %393 = select <8 x i1> %392, <8 x i64> %391, <8 x i64> %384
  %394 = shufflevector <8 x i64> %393, <8 x i64> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %395 = icmp ugt <8 x i64> %393, %394
  %396 = select <8 x i1> %395, <8 x i64> %393, <8 x i64> %394
  %397 = shufflevector <8 x i64> %396, <8 x i64> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %398 = icmp ugt <8 x i64> %396, %397
  %399 = select <8 x i1> %398, <8 x i64> %396, <8 x i64> %397
  %400 = shufflevector <8 x i64> %399, <8 x i64> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %401 = icmp ugt <8 x i64> %399, %400
  %402 = select <8 x i1> %401, <8 x i64> %399, <8 x i64> %400
  %403 = extractelement <8 x i64> %402, i32 0
  br i1 %222, label %462, label %229

404:                                              ; preds = %462, %214
  %405 = phi i64 [ 0, %214 ], [ %463, %462 ]
  %406 = add i64 %405, 15
  %407 = and i64 %406, -16
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %106) #24
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %106, i8 0, i64 24, i1 false) #24
  %408 = icmp eq i64 %407, 0
  br i1 %408, label %426, label %409

409:                                              ; preds = %404
  %410 = icmp ugt i64 %407, 4611686018427387903
  br i1 %410, label %411, label %413

411:                                              ; preds = %409
  %412 = bitcast %"class.std::__1::vector.43"* %13 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %412) #28
  unreachable

413:                                              ; preds = %409
  %414 = shl i64 %407, 2
  %415 = call i8* @_Znwm(i64 %414) #29
  %416 = bitcast i8* %415 to i32*
  store i8* %415, i8** %110, align 8
  %417 = getelementptr inbounds i32, i32* %416, i64 %407
  store i32* %417, i32** %109, align 8
  %418 = ptrtoint i8* %415 to i64
  %419 = add nsw i64 %407, -1
  %420 = getelementptr i32, i32* %416, i64 %419
  %421 = ptrtoint i32* %420 to i64
  %422 = sub i64 4, %418
  %423 = add i64 %422, %421
  %424 = and i64 %423, -4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %415, i8 0, i64 %424, i1 false) #24
  %425 = ptrtoint i32* %417 to i64
  store i64 %425, i64* %111, align 8
  br label %426

426:                                              ; preds = %404, %413
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %112) #24
  %427 = mul i64 %407, %68
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %112, i8 0, i64 24, i1 false) #24
  %428 = icmp eq i64 %427, 0
  br i1 %428, label %446, label %429

429:                                              ; preds = %426
  %430 = icmp ugt i64 %427, 4611686018427387903
  br i1 %430, label %431, label %433

431:                                              ; preds = %429
  %432 = bitcast %"class.std::__1::vector.43"* %14 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %432) #28
  unreachable

433:                                              ; preds = %429
  %434 = shl i64 %427, 2
  %435 = call i8* @_Znwm(i64 %434) #29
  %436 = bitcast i8* %435 to i32*
  store i8* %435, i8** %116, align 8
  %437 = getelementptr inbounds i32, i32* %436, i64 %427
  store i32* %437, i32** %115, align 8
  %438 = ptrtoint i8* %435 to i64
  %439 = add nsw i64 %427, -1
  %440 = getelementptr i32, i32* %436, i64 %439
  %441 = ptrtoint i32* %440 to i64
  %442 = sub i64 4, %438
  %443 = add i64 %442, %441
  %444 = and i64 %443, -4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %435, i8 0, i64 %444, i1 false) #24
  %445 = ptrtoint i32* %437 to i64
  store i64 %445, i64* %117, align 8
  br label %446

446:                                              ; preds = %426, %433
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %118) #24
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %118, i8 0, i64 24, i1 false) #24
  br i1 %104, label %481, label %447

447:                                              ; preds = %446
  br i1 %122, label %448, label %450

448:                                              ; preds = %447
  %449 = bitcast %"class.std::__1::vector.55"* %15 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %449) #28
  unreachable

450:                                              ; preds = %447
  %451 = call i8* @_Znwm(i64 %67) #29
  %452 = bitcast i8* %451 to i32*
  store i8* %451, i8** %123, align 8
  %453 = getelementptr inbounds i32, i32* %452, i64 %68
  store i32* %453, i32** %121, align 8
  %454 = ptrtoint i8* %451 to i64
  %455 = getelementptr i32, i32* %452, i64 %125
  %456 = ptrtoint i32* %455 to i64
  %457 = sub i64 4, %454
  %458 = add i64 %457, %456
  %459 = and i64 %458, -4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %451, i8 0, i64 %459, i1 false) #24
  %460 = ptrtoint i32* %453 to i64
  store i64 %460, i64* %124, align 8
  %461 = icmp ugt i64 %204, %202
  br label %477

462:                                              ; preds = %466, %387, %223
  %463 = phi i64 [ %225, %223 ], [ %403, %387 ], [ %474, %466 ]
  %464 = add nuw i64 %224, 1
  %465 = icmp ult i64 %464, %68
  br i1 %465, label %223, label %404

466:                                              ; preds = %229, %466
  %467 = phi i64 [ %475, %466 ], [ %230, %229 ]
  %468 = phi i64 [ %474, %466 ], [ %231, %229 ]
  %469 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %228, i64 %467, i32 0
  %470 = load i8, i8* %469, align 1
  %471 = zext i8 %470 to i64
  %472 = add nuw nsw i64 %471, 1
  %473 = icmp ugt i64 %468, %472
  %474 = select i1 %473, i64 %468, i64 %472
  %475 = add nuw i64 %467, 1
  %476 = icmp eq i64 %475, %204
  br i1 %476, label %462, label %466, !llvm.loop !193

477:                                              ; preds = %450, %836
  %478 = phi i64 [ 0, %450 ], [ %837, %836 ]
  br i1 %461, label %479, label %836

479:                                              ; preds = %477
  %480 = mul i64 %478, %407
  br label %839

481:                                              ; preds = %836, %446
  %482 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %127, align 8
  %483 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %482, i64 %200, i32 5
  %484 = load i32, i32* %483, align 8
  %485 = load i32*, i32** %128, align 8
  %486 = load i32*, i32** %66, align 8
  %487 = icmp eq i32* %485, %486
  br i1 %487, label %495, label %488

488:                                              ; preds = %481, %492
  %489 = phi i32* [ %493, %492 ], [ %485, %481 ]
  %490 = load i32, i32* %489, align 4
  %491 = icmp eq i32 %490, %484
  br i1 %491, label %495, label %492

492:                                              ; preds = %488
  %493 = getelementptr inbounds i32, i32* %489, i64 1
  %494 = icmp eq i32* %493, %486
  br i1 %494, label %495, label %488

495:                                              ; preds = %488, %492, %481
  %496 = phi i32* [ %485, %481 ], [ %486, %492 ], [ %489, %488 ]
  %497 = ptrtoint i32* %496 to i64
  %498 = ptrtoint i32* %485 to i64
  %499 = sub i64 %497, %498
  %500 = ashr exact i64 %499, 2
  %501 = load i32*, i32** %113, align 8
  %502 = mul i64 %500, %407
  %503 = getelementptr inbounds i32, i32* %501, i64 %502
  %504 = load i32*, i32** %107, align 8
  %505 = getelementptr inbounds i32, i32* %503, i64 %407
  br i1 %408, label %745, label %506

506:                                              ; preds = %495
  %507 = lshr i64 %406, 4
  %508 = shl i64 %507, 6
  %509 = add i64 %508, -4
  %510 = lshr exact i64 %509, 2
  %511 = add nuw nsw i64 %510, 1
  %512 = icmp ult i64 %511, 64
  br i1 %512, label %612, label %513

513:                                              ; preds = %506
  %514 = and i64 %511, 9223372036854775744
  %515 = getelementptr i32, i32* %503, i64 %514
  %516 = add nsw i64 %514, -64
  %517 = lshr exact i64 %516, 6
  %518 = add nuw nsw i64 %517, 1
  %519 = and i64 %518, 1
  %520 = icmp eq i64 %516, 0
  br i1 %520, label %566, label %521

521:                                              ; preds = %513
  %522 = sub nuw nsw i64 %518, %519
  br label %523

523:                                              ; preds = %523, %521
  %524 = phi i64 [ 0, %521 ], [ %563, %523 ]
  %525 = phi <16 x i32> [ zeroinitializer, %521 ], [ %559, %523 ]
  %526 = phi <16 x i32> [ zeroinitializer, %521 ], [ %560, %523 ]
  %527 = phi <16 x i32> [ zeroinitializer, %521 ], [ %561, %523 ]
  %528 = phi <16 x i32> [ zeroinitializer, %521 ], [ %562, %523 ]
  %529 = phi i64 [ %522, %521 ], [ %564, %523 ]
  %530 = getelementptr i32, i32* %503, i64 %524
  %531 = bitcast i32* %530 to <16 x i32>*
  %532 = load <16 x i32>, <16 x i32>* %531, align 4
  %533 = getelementptr i32, i32* %530, i64 16
  %534 = bitcast i32* %533 to <16 x i32>*
  %535 = load <16 x i32>, <16 x i32>* %534, align 4
  %536 = getelementptr i32, i32* %530, i64 32
  %537 = bitcast i32* %536 to <16 x i32>*
  %538 = load <16 x i32>, <16 x i32>* %537, align 4
  %539 = getelementptr i32, i32* %530, i64 48
  %540 = bitcast i32* %539 to <16 x i32>*
  %541 = load <16 x i32>, <16 x i32>* %540, align 4
  %542 = add nsw <16 x i32> %532, %525
  %543 = add nsw <16 x i32> %535, %526
  %544 = add nsw <16 x i32> %538, %527
  %545 = add nsw <16 x i32> %541, %528
  %546 = or i64 %524, 64
  %547 = getelementptr i32, i32* %503, i64 %546
  %548 = bitcast i32* %547 to <16 x i32>*
  %549 = load <16 x i32>, <16 x i32>* %548, align 4
  %550 = getelementptr i32, i32* %547, i64 16
  %551 = bitcast i32* %550 to <16 x i32>*
  %552 = load <16 x i32>, <16 x i32>* %551, align 4
  %553 = getelementptr i32, i32* %547, i64 32
  %554 = bitcast i32* %553 to <16 x i32>*
  %555 = load <16 x i32>, <16 x i32>* %554, align 4
  %556 = getelementptr i32, i32* %547, i64 48
  %557 = bitcast i32* %556 to <16 x i32>*
  %558 = load <16 x i32>, <16 x i32>* %557, align 4
  %559 = add nsw <16 x i32> %549, %542
  %560 = add nsw <16 x i32> %552, %543
  %561 = add nsw <16 x i32> %555, %544
  %562 = add nsw <16 x i32> %558, %545
  %563 = add i64 %524, 128
  %564 = add i64 %529, -2
  %565 = icmp eq i64 %564, 0
  br i1 %565, label %566, label %523, !llvm.loop !194

566:                                              ; preds = %523, %513
  %567 = phi <16 x i32> [ undef, %513 ], [ %559, %523 ]
  %568 = phi <16 x i32> [ undef, %513 ], [ %560, %523 ]
  %569 = phi <16 x i32> [ undef, %513 ], [ %561, %523 ]
  %570 = phi <16 x i32> [ undef, %513 ], [ %562, %523 ]
  %571 = phi i64 [ 0, %513 ], [ %563, %523 ]
  %572 = phi <16 x i32> [ zeroinitializer, %513 ], [ %559, %523 ]
  %573 = phi <16 x i32> [ zeroinitializer, %513 ], [ %560, %523 ]
  %574 = phi <16 x i32> [ zeroinitializer, %513 ], [ %561, %523 ]
  %575 = phi <16 x i32> [ zeroinitializer, %513 ], [ %562, %523 ]
  %576 = icmp eq i64 %519, 0
  br i1 %576, label %594, label %577

577:                                              ; preds = %566
  %578 = getelementptr i32, i32* %503, i64 %571
  %579 = getelementptr i32, i32* %578, i64 48
  %580 = bitcast i32* %579 to <16 x i32>*
  %581 = load <16 x i32>, <16 x i32>* %580, align 4
  %582 = add nsw <16 x i32> %581, %575
  %583 = getelementptr i32, i32* %578, i64 32
  %584 = bitcast i32* %583 to <16 x i32>*
  %585 = load <16 x i32>, <16 x i32>* %584, align 4
  %586 = add nsw <16 x i32> %585, %574
  %587 = getelementptr i32, i32* %578, i64 16
  %588 = bitcast i32* %587 to <16 x i32>*
  %589 = load <16 x i32>, <16 x i32>* %588, align 4
  %590 = add nsw <16 x i32> %589, %573
  %591 = bitcast i32* %578 to <16 x i32>*
  %592 = load <16 x i32>, <16 x i32>* %591, align 4
  %593 = add nsw <16 x i32> %592, %572
  br label %594

594:                                              ; preds = %566, %577
  %595 = phi <16 x i32> [ %567, %566 ], [ %593, %577 ]
  %596 = phi <16 x i32> [ %568, %566 ], [ %590, %577 ]
  %597 = phi <16 x i32> [ %569, %566 ], [ %586, %577 ]
  %598 = phi <16 x i32> [ %570, %566 ], [ %582, %577 ]
  %599 = add <16 x i32> %596, %595
  %600 = add <16 x i32> %597, %599
  %601 = add <16 x i32> %598, %600
  %602 = shufflevector <16 x i32> %601, <16 x i32> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %603 = add <16 x i32> %601, %602
  %604 = shufflevector <16 x i32> %603, <16 x i32> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %605 = add <16 x i32> %603, %604
  %606 = shufflevector <16 x i32> %605, <16 x i32> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %607 = add <16 x i32> %605, %606
  %608 = shufflevector <16 x i32> %607, <16 x i32> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %609 = add <16 x i32> %607, %608
  %610 = extractelement <16 x i32> %609, i32 0
  %611 = icmp eq i64 %511, %514
  br i1 %611, label %622, label %612

612:                                              ; preds = %594, %506
  %613 = phi i32 [ 0, %506 ], [ %610, %594 ]
  %614 = phi i32* [ %503, %506 ], [ %515, %594 ]
  br label %615

615:                                              ; preds = %612, %615
  %616 = phi i32 [ %619, %615 ], [ %613, %612 ]
  %617 = phi i32* [ %620, %615 ], [ %614, %612 ]
  %618 = load i32, i32* %617, align 4
  %619 = add nsw i32 %618, %616
  %620 = getelementptr inbounds i32, i32* %617, i64 1
  %621 = icmp eq i32* %620, %505
  br i1 %621, label %622, label %615, !llvm.loop !195

622:                                              ; preds = %615, %594
  %623 = phi i32 [ %610, %594 ], [ %619, %615 ]
  %624 = add i32 %623, 4095
  %625 = ashr i32 %624, 12
  %626 = insertelement <16 x i32> undef, i32 %625, i32 0
  %627 = shufflevector <16 x i32> %626, <16 x i32> undef, <16 x i32> zeroinitializer
  br label %754

628:                                              ; preds = %754
  %629 = getelementptr inbounds i32, i32* %504, i64 %407
  %630 = lshr i64 %406, 4
  %631 = shl i64 %630, 6
  %632 = add i64 %631, -4
  %633 = lshr exact i64 %632, 2
  %634 = add nuw nsw i64 %633, 1
  %635 = icmp ult i64 %634, 64
  br i1 %635, label %735, label %636

636:                                              ; preds = %628
  %637 = and i64 %634, 9223372036854775744
  %638 = getelementptr i32, i32* %504, i64 %637
  %639 = add nsw i64 %637, -64
  %640 = lshr exact i64 %639, 6
  %641 = add nuw nsw i64 %640, 1
  %642 = and i64 %641, 1
  %643 = icmp eq i64 %639, 0
  br i1 %643, label %689, label %644

644:                                              ; preds = %636
  %645 = sub nuw nsw i64 %641, %642
  br label %646

646:                                              ; preds = %646, %644
  %647 = phi i64 [ 0, %644 ], [ %686, %646 ]
  %648 = phi <16 x i32> [ zeroinitializer, %644 ], [ %682, %646 ]
  %649 = phi <16 x i32> [ zeroinitializer, %644 ], [ %683, %646 ]
  %650 = phi <16 x i32> [ zeroinitializer, %644 ], [ %684, %646 ]
  %651 = phi <16 x i32> [ zeroinitializer, %644 ], [ %685, %646 ]
  %652 = phi i64 [ %645, %644 ], [ %687, %646 ]
  %653 = getelementptr i32, i32* %504, i64 %647
  %654 = bitcast i32* %653 to <16 x i32>*
  %655 = load <16 x i32>, <16 x i32>* %654, align 4
  %656 = getelementptr i32, i32* %653, i64 16
  %657 = bitcast i32* %656 to <16 x i32>*
  %658 = load <16 x i32>, <16 x i32>* %657, align 4
  %659 = getelementptr i32, i32* %653, i64 32
  %660 = bitcast i32* %659 to <16 x i32>*
  %661 = load <16 x i32>, <16 x i32>* %660, align 4
  %662 = getelementptr i32, i32* %653, i64 48
  %663 = bitcast i32* %662 to <16 x i32>*
  %664 = load <16 x i32>, <16 x i32>* %663, align 4
  %665 = add nsw <16 x i32> %655, %648
  %666 = add nsw <16 x i32> %658, %649
  %667 = add nsw <16 x i32> %661, %650
  %668 = add nsw <16 x i32> %664, %651
  %669 = or i64 %647, 64
  %670 = getelementptr i32, i32* %504, i64 %669
  %671 = bitcast i32* %670 to <16 x i32>*
  %672 = load <16 x i32>, <16 x i32>* %671, align 4
  %673 = getelementptr i32, i32* %670, i64 16
  %674 = bitcast i32* %673 to <16 x i32>*
  %675 = load <16 x i32>, <16 x i32>* %674, align 4
  %676 = getelementptr i32, i32* %670, i64 32
  %677 = bitcast i32* %676 to <16 x i32>*
  %678 = load <16 x i32>, <16 x i32>* %677, align 4
  %679 = getelementptr i32, i32* %670, i64 48
  %680 = bitcast i32* %679 to <16 x i32>*
  %681 = load <16 x i32>, <16 x i32>* %680, align 4
  %682 = add nsw <16 x i32> %672, %665
  %683 = add nsw <16 x i32> %675, %666
  %684 = add nsw <16 x i32> %678, %667
  %685 = add nsw <16 x i32> %681, %668
  %686 = add i64 %647, 128
  %687 = add i64 %652, -2
  %688 = icmp eq i64 %687, 0
  br i1 %688, label %689, label %646, !llvm.loop !196

689:                                              ; preds = %646, %636
  %690 = phi <16 x i32> [ undef, %636 ], [ %682, %646 ]
  %691 = phi <16 x i32> [ undef, %636 ], [ %683, %646 ]
  %692 = phi <16 x i32> [ undef, %636 ], [ %684, %646 ]
  %693 = phi <16 x i32> [ undef, %636 ], [ %685, %646 ]
  %694 = phi i64 [ 0, %636 ], [ %686, %646 ]
  %695 = phi <16 x i32> [ zeroinitializer, %636 ], [ %682, %646 ]
  %696 = phi <16 x i32> [ zeroinitializer, %636 ], [ %683, %646 ]
  %697 = phi <16 x i32> [ zeroinitializer, %636 ], [ %684, %646 ]
  %698 = phi <16 x i32> [ zeroinitializer, %636 ], [ %685, %646 ]
  %699 = icmp eq i64 %642, 0
  br i1 %699, label %717, label %700

700:                                              ; preds = %689
  %701 = getelementptr i32, i32* %504, i64 %694
  %702 = getelementptr i32, i32* %701, i64 48
  %703 = bitcast i32* %702 to <16 x i32>*
  %704 = load <16 x i32>, <16 x i32>* %703, align 4
  %705 = add nsw <16 x i32> %704, %698
  %706 = getelementptr i32, i32* %701, i64 32
  %707 = bitcast i32* %706 to <16 x i32>*
  %708 = load <16 x i32>, <16 x i32>* %707, align 4
  %709 = add nsw <16 x i32> %708, %697
  %710 = getelementptr i32, i32* %701, i64 16
  %711 = bitcast i32* %710 to <16 x i32>*
  %712 = load <16 x i32>, <16 x i32>* %711, align 4
  %713 = add nsw <16 x i32> %712, %696
  %714 = bitcast i32* %701 to <16 x i32>*
  %715 = load <16 x i32>, <16 x i32>* %714, align 4
  %716 = add nsw <16 x i32> %715, %695
  br label %717

717:                                              ; preds = %689, %700
  %718 = phi <16 x i32> [ %690, %689 ], [ %716, %700 ]
  %719 = phi <16 x i32> [ %691, %689 ], [ %713, %700 ]
  %720 = phi <16 x i32> [ %692, %689 ], [ %709, %700 ]
  %721 = phi <16 x i32> [ %693, %689 ], [ %705, %700 ]
  %722 = add <16 x i32> %719, %718
  %723 = add <16 x i32> %720, %722
  %724 = add <16 x i32> %721, %723
  %725 = shufflevector <16 x i32> %724, <16 x i32> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %726 = add <16 x i32> %724, %725
  %727 = shufflevector <16 x i32> %726, <16 x i32> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %728 = add <16 x i32> %726, %727
  %729 = shufflevector <16 x i32> %728, <16 x i32> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %730 = add <16 x i32> %728, %729
  %731 = shufflevector <16 x i32> %730, <16 x i32> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %732 = add <16 x i32> %730, %731
  %733 = extractelement <16 x i32> %732, i32 0
  %734 = icmp eq i64 %634, %637
  br i1 %734, label %745, label %735

735:                                              ; preds = %717, %628
  %736 = phi i32 [ 0, %628 ], [ %733, %717 ]
  %737 = phi i32* [ %504, %628 ], [ %638, %717 ]
  br label %738

738:                                              ; preds = %735, %738
  %739 = phi i32 [ %742, %738 ], [ %736, %735 ]
  %740 = phi i32* [ %743, %738 ], [ %737, %735 ]
  %741 = load i32, i32* %740, align 4
  %742 = add nsw i32 %741, %739
  %743 = getelementptr inbounds i32, i32* %740, i64 1
  %744 = icmp eq i32* %743, %629
  br i1 %744, label %745, label %738, !llvm.loop !197

745:                                              ; preds = %738, %717, %495
  %746 = phi i32 [ 0, %495 ], [ %733, %717 ], [ %742, %738 ]
  %747 = sext i32 %746 to i64
  %748 = uitofp i64 %747 to float
  %749 = fdiv float 1.000000e+00, %748
  %750 = insertelement <16 x float> undef, float %749, i32 0
  %751 = shufflevector <16 x float> %750, <16 x float> undef, <16 x i32> zeroinitializer
  %752 = insertelement <16 x i32> undef, i32 %746, i32 0
  %753 = shufflevector <16 x i32> %752, <16 x i32> undef, <16 x i32> zeroinitializer
  br i1 %408, label %803, label %769

754:                                              ; preds = %622, %754
  %755 = phi i64 [ %765, %754 ], [ 0, %622 ]
  %756 = getelementptr inbounds i32, i32* %503, i64 %755
  %757 = bitcast i32* %756 to <16 x i32>*
  %758 = load <16 x i32>, <16 x i32>* %757, align 1, !alias.scope !198, !noalias !201
  %759 = icmp eq <16 x i32> %758, zeroinitializer
  %760 = icmp sgt <16 x i32> %627, %758
  %761 = select <16 x i1> %760, <16 x i32> %627, <16 x i32> %758
  %762 = select <16 x i1> %759, <16 x i32> zeroinitializer, <16 x i32> %761
  %763 = getelementptr inbounds i32, i32* %504, i64 %755
  %764 = bitcast i32* %763 to <16 x i32>*
  store <16 x i32> %762, <16 x i32>* %764, align 1, !alias.scope !203
  %765 = add nuw i64 %755, 16
  %766 = icmp ult i64 %765, %407
  br i1 %766, label %754, label %628

767:                                              ; preds = %769
  %768 = bitcast <16 x float> %800 to <8 x double>
  br label %803

769:                                              ; preds = %745, %769
  %770 = phi i64 [ %801, %769 ], [ 0, %745 ]
  %771 = phi <16 x float> [ %800, %769 ], [ zeroinitializer, %745 ]
  %772 = getelementptr inbounds i32, i32* %503, i64 %770
  %773 = bitcast i32* %772 to <16 x i32>*
  %774 = load <16 x i32>, <16 x i32>* %773, align 1, !alias.scope !206, !noalias !209
  %775 = sitofp <16 x i32> %774 to <16 x float>
  %776 = getelementptr inbounds i32, i32* %504, i64 %770
  %777 = bitcast i32* %776 to <16 x i32>*
  %778 = load <16 x i32>, <16 x i32>* %777, align 1, !alias.scope !211, !noalias !214
  %779 = sitofp <16 x i32> %778 to <16 x float>
  %780 = fmul <16 x float> %751, %779
  %781 = icmp eq <16 x i32> %778, %753
  %782 = bitcast <16 x float> %780 to <16 x i32>
  %783 = add <16 x i32> %782, <i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811>
  %784 = ashr <16 x i32> %783, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %785 = and <16 x i32> %783, <i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608>
  %786 = sub <16 x i32> %782, %785
  %787 = bitcast <16 x i32> %786 to <16 x float>
  %788 = sitofp <16 x i32> %784 to <16 x float>
  %789 = fadd <16 x float> %787, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  fence acq_rel
  %790 = call <16 x float> @llvm.fma.v16f32(<16 x float> %789, <16 x float> <float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000>, <16 x float> <float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000>) #24
  %791 = call <16 x float> @llvm.fma.v16f32(<16 x float> %789, <16 x float> <float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000>, <16 x float> <float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000>) #24
  fence acq_rel
  %792 = call <16 x float> @llvm.fma.v16f32(<16 x float> %790, <16 x float> %789, <16 x float> <float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000>) #24
  %793 = call <16 x float> @llvm.fma.v16f32(<16 x float> %791, <16 x float> %789, <16 x float> <float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000>) #24
  fence acq_rel
  %794 = fdiv <16 x float> %792, %793
  %795 = fadd <16 x float> %794, %788
  %796 = fcmp oeq <16 x float> %775, zeroinitializer
  %797 = select <16 x i1> %781, <16 x float> zeroinitializer, <16 x float> %795
  %798 = fmul <16 x float> %797, %775
  %799 = select <16 x i1> %796, <16 x float> zeroinitializer, <16 x float> %798
  %800 = fsub <16 x float> %771, %799
  %801 = add nuw i64 %770, 16
  %802 = icmp ult i64 %801, %407
  br i1 %802, label %769, label %767

803:                                              ; preds = %745, %767
  %804 = phi <8 x double> [ zeroinitializer, %745 ], [ %768, %767 ]
  %805 = shufflevector <8 x double> %804, <8 x double> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %806 = bitcast <4 x double> %805 to <8 x float>
  %807 = shufflevector <8 x double> %804, <8 x double> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %808 = bitcast <4 x double> %807 to <8 x float>
  %809 = fadd <8 x float> %806, %808
  %810 = shufflevector <8 x float> %809, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %811 = shufflevector <8 x float> %809, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %812 = fadd <4 x float> %810, %811
  %813 = shufflevector <4 x float> %812, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %814 = fadd <4 x float> %812, %813
  %815 = shufflevector <4 x float> %814, <4 x float> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %816 = fadd <4 x float> %814, %815
  %817 = extractelement <4 x float> %816, i32 0
  %818 = load i32*, i32** %119, align 8
  %819 = getelementptr inbounds i32, i32* %818, i64 %500
  %820 = load i32, i32* %819, align 4
  %821 = uitofp i32 %820 to float
  %822 = fadd float %817, %821
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %129) #24
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %129, i8* align 8 bitcast ({ i64, i32, [4 x i8], i64, float, float, i32, i32 }* @__const._ZN3jxl8N_SCALAR13FindBestSplitERNS_11TreeSamplesEfRKNSt3__16vectorINS_21ModularMultiplierInfoENS3_9allocatorIS5_EEEENS3_5arrayINSB_IjLm2EEELm2EEEfPNS4_INS_20PropertyDecisionNodeENS6_ISE_EEEE.forced_split to i8*), i64 16, i1 false)
  store i64 0, i64* %130, align 8
  store i32 0, i32* %131, align 8
  store i64 0, i64* %132, align 8
  store float 0x47EFFFFFE0000000, float* %133, align 8
  store float 0x47EFFFFFE0000000, float* %134, align 4
  store i32 0, i32* %135, align 8
  store i32 0, i32* %136, align 4
  %823 = load i64, i64* %138, align 8
  %824 = load i64, i64* %139, align 8
  %825 = icmp eq i64 %823, %824
  %826 = inttoptr i64 %824 to %"struct.jxl::ModularMultiplierInfo"*
  br i1 %825, label %1032, label %827

827:                                              ; preds = %803
  %828 = lshr i64 %209, 32
  %829 = trunc i64 %828 to i32
  %830 = trunc i64 %209 to i32
  %831 = lshr i64 %212, 32
  %832 = trunc i64 %831 to i32
  %833 = trunc i64 %212 to i32
  %834 = sub i64 %823, %824
  %835 = sdiv exact i64 %834, 20
  br label %873

836:                                              ; preds = %839, %477
  %837 = add nuw i64 %478, 1
  %838 = icmp ult i64 %837, %68
  br i1 %838, label %477, label %481

839:                                              ; preds = %839, %479
  %840 = phi i64 [ %202, %479 ], [ %871, %839 ]
  %841 = load i16*, i16** %126, align 8
  %842 = getelementptr inbounds i16, i16* %841, i64 %840
  %843 = load i16, i16* %842, align 2
  %844 = load %"class.std::__1::vector.8"*, %"class.std::__1::vector.8"** %105, align 8
  %845 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %844, i64 %478, i32 0, i32 0
  %846 = load %"struct.jxl::TreeSamples::ResidualToken"*, %"struct.jxl::TreeSamples::ResidualToken"** %845, align 8
  %847 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %846, i64 %840, i32 0
  %848 = load i8, i8* %847, align 1
  %849 = zext i8 %848 to i64
  %850 = add i64 %480, %849
  %851 = load i32*, i32** %113, align 8
  %852 = getelementptr inbounds i32, i32* %851, i64 %850
  %853 = load i32, i32* %852, align 4
  %854 = zext i16 %843 to i32
  %855 = add i32 %853, %854
  store i32 %855, i32* %852, align 4
  %856 = load %"class.std::__1::vector.8"*, %"class.std::__1::vector.8"** %105, align 8
  %857 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %856, i64 %478, i32 0, i32 0
  %858 = load %"struct.jxl::TreeSamples::ResidualToken"*, %"struct.jxl::TreeSamples::ResidualToken"** %857, align 8
  %859 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %858, i64 %840, i32 1
  %860 = load i8, i8* %859, align 1
  %861 = zext i8 %860 to i32
  %862 = load i16*, i16** %126, align 8
  %863 = getelementptr inbounds i16, i16* %862, i64 %840
  %864 = load i16, i16* %863, align 2
  %865 = zext i16 %864 to i32
  %866 = mul nuw nsw i32 %865, %861
  %867 = load i32*, i32** %119, align 8
  %868 = getelementptr inbounds i32, i32* %867, i64 %478
  %869 = load i32, i32* %868, align 4
  %870 = add i32 %869, %866
  store i32 %870, i32* %868, align 4
  %871 = add nuw i64 %840, 1
  %872 = icmp eq i64 %871, %204
  br i1 %872, label %836, label %839

873:                                              ; preds = %827, %1024
  %874 = phi i64 [ 0, %827 ], [ %1025, %1024 ]
  %875 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %826, i64 %874
  %876 = bitcast %"struct.jxl::ModularMultiplierInfo"* %875 to i64*
  %877 = load i64, i64* %876, align 4
  %878 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %826, i64 %874, i32 0, i32 0, i64 1
  %879 = bitcast %"struct.std::__1::array.5"* %878 to i64*
  %880 = load i64, i64* %879, align 4
  %881 = trunc i64 %877 to i32
  %882 = icmp ult i32 %881, %829
  %883 = lshr i64 %877, 32
  %884 = trunc i64 %883 to i32
  %885 = trunc i64 %880 to i32
  %886 = lshr i64 %880, 32
  %887 = trunc i64 %886 to i32
  %888 = icmp ugt i32 %884, %830
  %889 = and i1 %882, %888
  br i1 %889, label %890, label %1024

890:                                              ; preds = %873
  %891 = icmp ugt i32 %881, %830
  br i1 %891, label %898, label %892

892:                                              ; preds = %890
  %893 = icmp ult i32 %884, %829
  %894 = add i32 %884, -1
  %895 = select i1 %893, i32 %894, i32 -1431655766
  %896 = select i1 %893, i64 0, i64 2863311530
  %897 = zext i1 %893 to i8
  br label %900

898:                                              ; preds = %890
  %899 = add i32 %881, -1
  br label %900

900:                                              ; preds = %892, %898
  %901 = phi i32 [ %899, %898 ], [ %895, %892 ]
  %902 = phi i64 [ 0, %898 ], [ %896, %892 ]
  %903 = phi i8 [ 1, %898 ], [ %897, %892 ]
  %904 = icmp ult i32 %885, %832
  %905 = icmp ugt i32 %887, %833
  %906 = and i1 %904, %905
  br i1 %906, label %907, label %1024

907:                                              ; preds = %900
  %908 = trunc i64 %880 to i32
  %909 = trunc i64 %886 to i32
  %910 = icmp ugt i32 %908, %833
  br i1 %910, label %915, label %911

911:                                              ; preds = %907
  %912 = icmp ult i32 %909, %832
  br i1 %912, label %913, label %917

913:                                              ; preds = %911
  %914 = add i32 %909, -1
  br label %919

915:                                              ; preds = %907
  %916 = add i32 %908, -1
  br label %919

917:                                              ; preds = %911
  %918 = icmp eq i8 %903, 0
  br i1 %918, label %1027, label %919

919:                                              ; preds = %913, %915, %917
  %920 = phi i32 [ %901, %917 ], [ %914, %913 ], [ %916, %915 ]
  %921 = phi i64 [ %902, %917 ], [ 1, %913 ], [ 1, %915 ]
  %922 = icmp sgt i32 %920, -511
  %923 = select i1 %922, i32 %920, i32 -511
  %924 = icmp slt i32 %923, 511
  %925 = select i1 %924, i32 %923, i32 511
  %926 = add nsw i32 %925, 511
  %927 = and i64 %921, 4294967295
  %928 = load %"class.std::__1::vector.29"*, %"class.std::__1::vector.29"** %183, align 8
  %929 = sext i32 %926 to i64
  %930 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %928, i64 %927, i32 0, i32 0
  %931 = load i8*, i8** %930, align 8
  %932 = getelementptr inbounds i8, i8* %931, i64 %929
  %933 = load i8, i8* %932, align 1
  %934 = zext i8 %933 to i32
  store i32 %934, i32* %131, align 8
  store i64 %927, i64* %130, align 8
  %935 = fmul float %822, 5.000000e-01
  %936 = fsub float %935, %1
  store float %936, float* %134, align 4
  store float %936, float* %133, align 8
  %937 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %127, align 8
  %938 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %937, i64 %200, i32 5
  %939 = load i32, i32* %938, align 8
  store i32 %939, i32* %136, align 4
  store i32 %939, i32* %135, align 8
  store i64 %202, i64* %132, align 8
  %940 = load i32*, i32** %182, align 8
  %941 = getelementptr inbounds i32, i32* %940, i64 %927
  %942 = load i32, i32* %941, align 4
  %943 = trunc i64 %921 to i32
  %944 = icmp eq i32 %942, %943
  br i1 %944, label %945, label %1011

945:                                              ; preds = %919
  %946 = icmp ugt i64 %204, %202
  br i1 %946, label %947, label %2115

947:                                              ; preds = %945
  %948 = load %"class.std::__1::vector.29"*, %"class.std::__1::vector.29"** %181, align 8
  %949 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %948, i64 %927, i32 0, i32 0
  %950 = load i8*, i8** %949, align 8
  %951 = sub i64 %204, %202
  %952 = icmp ult i64 %951, 16
  br i1 %952, label %953, label %956

953:                                              ; preds = %1001, %947
  %954 = phi i64 [ %202, %947 ], [ %1009, %1001 ]
  %955 = phi i64 [ %202, %947 ], [ %958, %1001 ]
  br label %1014

956:                                              ; preds = %947
  %957 = and i64 %951, -16
  %958 = add i64 %202, %957
  %959 = insertelement <4 x i8> undef, i8 %933, i32 0
  %960 = shufflevector <4 x i8> %959, <4 x i8> undef, <4 x i32> zeroinitializer
  %961 = insertelement <4 x i8> undef, i8 %933, i32 0
  %962 = shufflevector <4 x i8> %961, <4 x i8> undef, <4 x i32> zeroinitializer
  %963 = insertelement <4 x i8> undef, i8 %933, i32 0
  %964 = shufflevector <4 x i8> %963, <4 x i8> undef, <4 x i32> zeroinitializer
  %965 = insertelement <4 x i8> undef, i8 %933, i32 0
  %966 = shufflevector <4 x i8> %965, <4 x i8> undef, <4 x i32> zeroinitializer
  %967 = insertelement <4 x i64> <i64 undef, i64 0, i64 0, i64 0>, i64 %202, i32 0
  br label %968

968:                                              ; preds = %968, %956
  %969 = phi i64 [ 0, %956 ], [ %999, %968 ]
  %970 = phi <4 x i64> [ %967, %956 ], [ %995, %968 ]
  %971 = phi <4 x i64> [ zeroinitializer, %956 ], [ %996, %968 ]
  %972 = phi <4 x i64> [ zeroinitializer, %956 ], [ %997, %968 ]
  %973 = phi <4 x i64> [ zeroinitializer, %956 ], [ %998, %968 ]
  %974 = add i64 %202, %969
  %975 = getelementptr inbounds i8, i8* %950, i64 %974
  %976 = bitcast i8* %975 to <4 x i8>*
  %977 = load <4 x i8>, <4 x i8>* %976, align 1
  %978 = getelementptr inbounds i8, i8* %975, i64 4
  %979 = bitcast i8* %978 to <4 x i8>*
  %980 = load <4 x i8>, <4 x i8>* %979, align 1
  %981 = getelementptr inbounds i8, i8* %975, i64 8
  %982 = bitcast i8* %981 to <4 x i8>*
  %983 = load <4 x i8>, <4 x i8>* %982, align 1
  %984 = getelementptr inbounds i8, i8* %975, i64 12
  %985 = bitcast i8* %984 to <4 x i8>*
  %986 = load <4 x i8>, <4 x i8>* %985, align 1
  %987 = icmp ule <4 x i8> %977, %960
  %988 = icmp ule <4 x i8> %980, %962
  %989 = icmp ule <4 x i8> %983, %964
  %990 = icmp ule <4 x i8> %986, %966
  %991 = zext <4 x i1> %987 to <4 x i64>
  %992 = zext <4 x i1> %988 to <4 x i64>
  %993 = zext <4 x i1> %989 to <4 x i64>
  %994 = zext <4 x i1> %990 to <4 x i64>
  %995 = add <4 x i64> %970, %991
  %996 = add <4 x i64> %971, %992
  %997 = add <4 x i64> %972, %993
  %998 = add <4 x i64> %973, %994
  %999 = add i64 %969, 16
  %1000 = icmp eq i64 %999, %957
  br i1 %1000, label %1001, label %968, !llvm.loop !216

1001:                                             ; preds = %968
  %1002 = add <4 x i64> %996, %995
  %1003 = add <4 x i64> %997, %1002
  %1004 = add <4 x i64> %998, %1003
  %1005 = shufflevector <4 x i64> %1004, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %1006 = add <4 x i64> %1004, %1005
  %1007 = shufflevector <4 x i64> %1006, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %1008 = add <4 x i64> %1006, %1007
  %1009 = extractelement <4 x i64> %1008, i32 0
  %1010 = icmp eq i64 %951, %957
  br i1 %1010, label %2113, label %953

1011:                                             ; preds = %919
  %1012 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.1, i64 0, i64 0), i32 299, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.3, i64 0, i64 0)) #24
  %1013 = call zeroext i1 @_ZN3jxl5AbortEv() #28
  unreachable

1014:                                             ; preds = %953, %1014
  %1015 = phi i64 [ %1021, %1014 ], [ %954, %953 ]
  %1016 = phi i64 [ %1022, %1014 ], [ %955, %953 ]
  %1017 = getelementptr inbounds i8, i8* %950, i64 %1016
  %1018 = load i8, i8* %1017, align 1
  %1019 = icmp ule i8 %1018, %933
  %1020 = zext i1 %1019 to i64
  %1021 = add i64 %1015, %1020
  %1022 = add nuw i64 %1016, 1
  %1023 = icmp eq i64 %1022, %204
  br i1 %1023, label %2113, label %1014, !llvm.loop !217

1024:                                             ; preds = %873, %900
  %1025 = add nuw i64 %874, 1
  %1026 = icmp ult i64 %1025, %835
  br i1 %1026, label %873, label %1032

1027:                                             ; preds = %917
  %1028 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %826, i64 %874, i32 1
  %1029 = load i32, i32* %1028, align 4
  %1030 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %127, align 8
  %1031 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1030, i64 %200, i32 8
  store i32 %1029, i32* %1031, align 8
  br label %1032

1032:                                             ; preds = %1024, %803, %1027
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %140) #24
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %140, i8 0, i64 24, i1 false) #24
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %143) #24
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %143, i8 0, i64 24, i1 false) #24
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %146) #24
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %146, i8 0, i64 24, i1 false) #24
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %149) #24
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %149, i8 0, i64 24, i1 false) #24
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %152) #24
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %152, i8 0, i64 24, i1 false) #24
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %155) #24
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %155, i8 0, i64 24, i1 false) #24
  br i1 %408, label %1060, label %1033

1033:                                             ; preds = %1032
  %1034 = icmp ugt i64 %407, 4611686018427387903
  br i1 %1034, label %1035, label %1037

1035:                                             ; preds = %1033
  %1036 = bitcast %"class.std::__1::vector.43"* %22 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %1036) #28
  unreachable

1037:                                             ; preds = %1033
  %1038 = shl i64 %407, 2
  %1039 = call i8* @_Znwm(i64 %1038) #29
  %1040 = bitcast i8* %1039 to i32*
  store i8* %1039, i8** %159, align 8
  %1041 = getelementptr inbounds i32, i32* %1040, i64 %407
  store i32* %1041, i32** %158, align 8
  %1042 = ptrtoint i8* %1039 to i64
  %1043 = add nsw i64 %407, -1
  %1044 = getelementptr i32, i32* %1040, i64 %1043
  %1045 = ptrtoint i32* %1044 to i64
  %1046 = sub i64 4, %1042
  %1047 = add i64 %1046, %1045
  %1048 = and i64 %1047, -4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %1039, i8 0, i64 %1048, i1 false) #24
  %1049 = ptrtoint i32* %1041 to i64
  store i64 %1049, i64* %160, align 8
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %161) #24
  %1050 = call i8* @_Znwm(i64 %1038) #29
  %1051 = bitcast i8* %1050 to i32*
  store i8* %1050, i8** %165, align 8
  %1052 = getelementptr inbounds i32, i32* %1051, i64 %407
  store i32* %1052, i32** %164, align 8
  %1053 = ptrtoint i8* %1050 to i64
  %1054 = getelementptr i32, i32* %1051, i64 %1043
  %1055 = ptrtoint i32* %1054 to i64
  %1056 = sub i64 4, %1053
  %1057 = add i64 %1056, %1055
  %1058 = and i64 %1057, -4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %1050, i8 0, i64 %1058, i1 false) #24
  %1059 = ptrtoint i32* %1052 to i64
  store i64 %1059, i64* %166, align 8
  br label %1061

1060:                                             ; preds = %1032
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %161) #24
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %161, i8 0, i64 24, i1 false) #24
  br label %1061

1061:                                             ; preds = %1060, %1037
  %1062 = fcmp ogt float %822, %1
  %1063 = and i1 %1062, %169
  br i1 %1063, label %1064, label %1111

1064:                                             ; preds = %1061
  %1065 = icmp ugt i64 %204, %202
  %1066 = shl i64 %407, 2
  %1067 = lshr i64 %406, 4
  %1068 = shl i64 %1067, 6
  %1069 = add i64 %1068, -4
  %1070 = lshr exact i64 %1069, 2
  %1071 = add nuw nsw i64 %1070, 1
  %1072 = add nuw nsw i64 %1070, 1
  %1073 = add nuw nsw i64 %1070, 1
  %1074 = lshr i64 %406, 4
  %1075 = shl i64 %1074, 6
  %1076 = add i64 %1075, -4
  %1077 = lshr exact i64 %1076, 2
  %1078 = add nuw nsw i64 %1077, 1
  %1079 = and i64 %1078, 9223372036854775744
  %1080 = add nsw i64 %1079, -64
  %1081 = lshr exact i64 %1080, 6
  %1082 = add nuw nsw i64 %1081, 1
  %1083 = icmp ult i64 %1078, 64
  %1084 = and i64 %1078, 9223372036854775744
  %1085 = and i64 %1082, 1
  %1086 = icmp eq i64 %1080, 0
  %1087 = sub nuw nsw i64 %1082, %1085
  %1088 = icmp eq i64 %1085, 0
  %1089 = icmp eq i64 %1078, %1084
  %1090 = icmp ult i64 %1073, 64
  %1091 = and i64 %1073, 9223372036854775744
  %1092 = and i64 %1082, 1
  %1093 = icmp eq i64 %1080, 0
  %1094 = sub nuw nsw i64 %1082, %1092
  %1095 = icmp eq i64 %1092, 0
  %1096 = icmp eq i64 %1073, %1091
  %1097 = icmp ult i64 %1072, 64
  %1098 = and i64 %1072, 9223372036854775744
  %1099 = and i64 %1082, 1
  %1100 = icmp eq i64 %1080, 0
  %1101 = sub nuw nsw i64 %1082, %1099
  %1102 = icmp eq i64 %1099, 0
  %1103 = icmp eq i64 %1072, %1098
  %1104 = icmp ult i64 %1071, 64
  %1105 = and i64 %1071, 9223372036854775744
  %1106 = and i64 %1082, 1
  %1107 = icmp eq i64 %1080, 0
  %1108 = sub nuw nsw i64 %1082, %1106
  %1109 = icmp eq i64 %1106, 0
  %1110 = icmp eq i64 %1071, %1105
  br label %1117

1111:                                             ; preds = %2009, %1061
  %1112 = load float, float* %100, align 8
  %1113 = load float, float* %101, align 4
  %1114 = fadd float %1112, %1113
  %1115 = fadd float %1114, %1
  %1116 = fcmp olt float %1115, %822
  br i1 %1116, label %2036, label %2043

1117:                                             ; preds = %2012, %1064
  %1118 = phi i64 [ 0, %1064 ], [ %2016, %2012 ]
  %1119 = phi i64 [ 0, %1064 ], [ %2015, %2012 ]
  %1120 = phi i64 [ 0, %1064 ], [ %2014, %2012 ]
  %1121 = phi i64 [ 0, %1064 ], [ %2013, %2012 ]
  %1122 = phi i64 [ 0, %1064 ], [ %2010, %2012 ]
  store i64 %1121, i64* %171, align 8
  store i64 %1120, i64* %173, align 8
  %1123 = load %"class.std::__1::vector.43"*, %"class.std::__1::vector.43"** %174, align 8
  %1124 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %1123, i64 %1122
  %1125 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %1123, i64 %1122, i32 0, i32 1
  %1126 = bitcast i32** %1125 to i64*
  %1127 = load i64, i64* %1126, align 8
  %1128 = bitcast %"class.std::__1::vector.43"* %1124 to i64*
  %1129 = load i64, i64* %1128, align 8
  %1130 = sub i64 %1127, %1129
  %1131 = ashr exact i64 %1130, 2
  %1132 = add nsw i64 %1131, 1
  %1133 = sub i64 %1119, %1118
  %1134 = ashr exact i64 %1133, 3
  %1135 = icmp ult i64 %1134, %1132
  br i1 %1135, label %1136, label %1165

1136:                                             ; preds = %1117
  %1137 = mul i64 %1132, %407
  %1138 = load i64, i64* %177, align 8
  %1139 = load i64, i64* %178, align 8
  %1140 = sub i64 %1138, %1139
  %1141 = ashr exact i64 %1140, 2
  %1142 = icmp ugt i64 %1137, %1141
  %1143 = inttoptr i64 %1139 to i32*
  br i1 %1142, label %1144, label %1150

1144:                                             ; preds = %1136
  %1145 = sub i64 %1137, %1141
  call void @_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEm(%"class.std::__1::vector.43"* nonnull %18, i64 %1145) #24
  %1146 = load i64, i64* %175, align 8
  %1147 = load i64, i64* %176, align 8
  %1148 = sub i64 %1146, %1147
  %1149 = ashr exact i64 %1148, 3
  br label %1154

1150:                                             ; preds = %1136
  %1151 = icmp ult i64 %1137, %1141
  br i1 %1151, label %1152, label %1154

1152:                                             ; preds = %1150
  %1153 = getelementptr inbounds i32, i32* %1143, i64 %1137
  store i32* %1153, i32** %145, align 8
  br label %1154

1154:                                             ; preds = %1144, %1150, %1152
  %1155 = phi i64 [ %1149, %1144 ], [ %1134, %1150 ], [ %1134, %1152 ]
  %1156 = phi i64 [ %1147, %1144 ], [ %1118, %1150 ], [ %1118, %1152 ]
  %1157 = icmp ugt i64 %1132, %1155
  %1158 = inttoptr i64 %1156 to i64*
  br i1 %1157, label %1159, label %1161

1159:                                             ; preds = %1154
  %1160 = sub nsw i64 %1132, %1155
  call void @_ZNSt3__16vectorImNS_9allocatorImEEE8__appendEm(%"class.std::__1::vector.83"* nonnull %19, i64 %1160) #24
  br label %1165

1161:                                             ; preds = %1154
  %1162 = icmp ult i64 %1132, %1155
  br i1 %1162, label %1163, label %1165

1163:                                             ; preds = %1161
  %1164 = getelementptr inbounds i64, i64* %1158, i64 %1132
  store i64* %1164, i64** %148, align 8
  br label %1165

1165:                                             ; preds = %1163, %1161, %1159, %1117
  %1166 = load i64, i64* %179, align 8
  store i64 %1166, i64* %180, align 8
  %1167 = icmp eq i64 %1132, 0
  br i1 %1167, label %1169, label %1168

1168:                                             ; preds = %1165
  call void @_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEm(%"class.std::__1::vector.43"* nonnull %17, i64 %1132) #24
  br label %1169

1169:                                             ; preds = %1165, %1168
  br i1 %1065, label %1176, label %1170

1170:                                             ; preds = %1176, %1169
  %1171 = phi i64 [ 0, %1169 ], [ %1191, %1176 ]
  %1172 = phi i64 [ %1132, %1169 ], [ %1193, %1176 ]
  %1173 = sub i64 %1171, %1172
  call fastcc void @_ZNSt3__16vectorIZN3jxl6N_AVX313FindBestSplitERNS1_11TreeSamplesEfRKNS0_INS1_21ModularMultiplierInfoENS_9allocatorIS5_EEEENS_5arrayINSB_IjLm2EEELm2EEEfPNS0_INS1_20PropertyDecisionNodeENS6_ISE_EEEEE8CostInfoNS6_ISI_EEE6resizeEm(%"class.std::__1::vector.133"* nonnull %20, i64 %1173)
  call fastcc void @_ZNSt3__16vectorIZN3jxl6N_AVX313FindBestSplitERNS1_11TreeSamplesEfRKNS0_INS1_21ModularMultiplierInfoENS_9allocatorIS5_EEEENS_5arrayINSB_IjLm2EEELm2EEEfPNS0_INS1_20PropertyDecisionNodeENS6_ISE_EEEEE8CostInfoNS6_ISI_EEE6resizeEm(%"class.std::__1::vector.133"* nonnull %21, i64 %1173)
  br i1 %104, label %1196, label %1174

1174:                                             ; preds = %1170
  %1175 = icmp ugt i64 %1171, %1172
  br label %1204

1176:                                             ; preds = %1169, %1176
  %1177 = phi i64 [ %1194, %1176 ], [ %202, %1169 ]
  %1178 = phi i64 [ %1193, %1176 ], [ %1132, %1169 ]
  %1179 = phi i64 [ %1191, %1176 ], [ 0, %1169 ]
  %1180 = load %"class.std::__1::vector.29"*, %"class.std::__1::vector.29"** %181, align 8
  %1181 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %1180, i64 %1122, i32 0, i32 0
  %1182 = load i8*, i8** %1181, align 8
  %1183 = getelementptr inbounds i8, i8* %1182, i64 %1177
  %1184 = load i8, i8* %1183, align 1
  %1185 = zext i8 %1184 to i64
  %1186 = load i32*, i32** %141, align 8
  %1187 = getelementptr inbounds i32, i32* %1186, i64 %1185
  %1188 = load i32, i32* %1187, align 4
  %1189 = add nsw i32 %1188, 1
  store i32 %1189, i32* %1187, align 4
  %1190 = icmp ult i64 %1179, %1185
  %1191 = select i1 %1190, i64 %1185, i64 %1179
  %1192 = icmp ugt i64 %1178, %1185
  %1193 = select i1 %1192, i64 %1185, i64 %1178
  %1194 = add nuw i64 %1177, 1
  %1195 = icmp eq i64 %1194, %204
  br i1 %1195, label %1170, label %1176

1196:                                             ; preds = %1251, %1170
  %1197 = icmp ugt i64 %1171, %1172
  br i1 %1197, label %1198, label %1928

1198:                                             ; preds = %1196
  %1199 = shl i64 1, %1122
  %1200 = and i64 %1199, %206
  %1201 = icmp ne i64 %1200, 0
  %1202 = icmp ult i64 %1122, 2
  %1203 = load i32*, i32** %141, align 8
  br label %1933

1204:                                             ; preds = %1174, %1251
  %1205 = phi i64 [ 0, %1174 ], [ %1252, %1251 ]
  br i1 %1065, label %1213, label %1206

1206:                                             ; preds = %1213, %1204
  %1207 = load i8*, i8** %159, align 8
  %1208 = load i32*, i32** %113, align 8
  %1209 = mul i64 %1205, %407
  %1210 = getelementptr inbounds i32, i32* %1208, i64 %1209
  %1211 = bitcast i32* %1210 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1207, i8* align 4 %1211, i64 %1066, i1 false)
  %1212 = load i8*, i8** %165, align 8
  call void @llvm.memset.p0i8.i64(i8* align 4 %1212, i8 0, i64 %1066, i1 false)
  br i1 %1175, label %1254, label %1251

1213:                                             ; preds = %1204, %1213
  %1214 = phi i64 [ %1249, %1213 ], [ %202, %1204 ]
  %1215 = load %"class.std::__1::vector.29"*, %"class.std::__1::vector.29"** %181, align 8
  %1216 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %1215, i64 %1122, i32 0, i32 0
  %1217 = load i8*, i8** %1216, align 8
  %1218 = getelementptr inbounds i8, i8* %1217, i64 %1214
  %1219 = load i8, i8* %1218, align 1
  %1220 = zext i8 %1219 to i64
  %1221 = load i16*, i16** %126, align 8
  %1222 = getelementptr inbounds i16, i16* %1221, i64 %1214
  %1223 = load i16, i16* %1222, align 2
  %1224 = zext i16 %1223 to i64
  %1225 = load %"class.std::__1::vector.8"*, %"class.std::__1::vector.8"** %105, align 8
  %1226 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %1225, i64 %1205, i32 0, i32 0
  %1227 = load %"struct.jxl::TreeSamples::ResidualToken"*, %"struct.jxl::TreeSamples::ResidualToken"** %1226, align 8
  %1228 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %1227, i64 %1214, i32 0
  %1229 = load i8, i8* %1228, align 1
  %1230 = zext i8 %1229 to i64
  %1231 = mul i64 %407, %1220
  %1232 = add i64 %1231, %1230
  %1233 = load i32*, i32** %144, align 8
  %1234 = getelementptr inbounds i32, i32* %1233, i64 %1232
  %1235 = load i32, i32* %1234, align 4
  %1236 = zext i16 %1223 to i32
  %1237 = add i32 %1235, %1236
  store i32 %1237, i32* %1234, align 4
  %1238 = load %"class.std::__1::vector.8"*, %"class.std::__1::vector.8"** %105, align 8
  %1239 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %1238, i64 %1205, i32 0, i32 0
  %1240 = load %"struct.jxl::TreeSamples::ResidualToken"*, %"struct.jxl::TreeSamples::ResidualToken"** %1239, align 8
  %1241 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %1240, i64 %1214, i32 1
  %1242 = load i8, i8* %1241, align 1
  %1243 = zext i8 %1242 to i64
  %1244 = mul nuw nsw i64 %1243, %1224
  %1245 = load i64*, i64** %147, align 8
  %1246 = getelementptr inbounds i64, i64* %1245, i64 %1220
  %1247 = load i64, i64* %1246, align 8
  %1248 = add i64 %1247, %1244
  store i64 %1248, i64* %1246, align 8
  %1249 = add nuw i64 %1214, 1
  %1250 = icmp eq i64 %1249, %204
  br i1 %1250, label %1206, label %1213

1251:                                             ; preds = %1924, %1206
  %1252 = add nuw i64 %1205, 1
  %1253 = icmp ult i64 %1252, %68
  br i1 %1253, label %1204, label %1196

1254:                                             ; preds = %1206, %1924
  %1255 = phi i64 [ %1926, %1924 ], [ %1172, %1206 ]
  %1256 = phi i64 [ %1925, %1924 ], [ 0, %1206 ]
  %1257 = load i32*, i32** %141, align 8
  %1258 = getelementptr inbounds i32, i32* %1257, i64 %1255
  %1259 = load i32, i32* %1258, align 4
  %1260 = icmp eq i32 %1259, 0
  br i1 %1260, label %1924, label %1261

1261:                                             ; preds = %1254
  %1262 = load i64*, i64** %147, align 8
  %1263 = getelementptr inbounds i64, i64* %1262, i64 %1255
  %1264 = load i64, i64* %1263, align 8
  %1265 = add i64 %1264, %1256
  store i64 0, i64* %1263, align 8
  br i1 %408, label %1266, label %1269

1266:                                             ; preds = %1261
  %1267 = load i32*, i32** %156, align 8
  %1268 = load i32*, i32** %107, align 8
  br label %1483

1269:                                             ; preds = %1261
  %1270 = mul i64 %1255, %407
  %1271 = load i32*, i32** %162, align 8
  br label %1860

1272:                                             ; preds = %1860
  %1273 = load i32*, i32** %156, align 8
  %1274 = load i32*, i32** %107, align 8
  %1275 = getelementptr inbounds i32, i32* %1273, i64 %407
  br i1 %408, label %1483, label %1276

1276:                                             ; preds = %1272
  br i1 %1083, label %1366, label %1277

1277:                                             ; preds = %1276
  %1278 = getelementptr i32, i32* %1273, i64 %1084
  br i1 %1086, label %1322, label %1279

1279:                                             ; preds = %1277, %1279
  %1280 = phi i64 [ %1319, %1279 ], [ 0, %1277 ]
  %1281 = phi <16 x i32> [ %1315, %1279 ], [ zeroinitializer, %1277 ]
  %1282 = phi <16 x i32> [ %1316, %1279 ], [ zeroinitializer, %1277 ]
  %1283 = phi <16 x i32> [ %1317, %1279 ], [ zeroinitializer, %1277 ]
  %1284 = phi <16 x i32> [ %1318, %1279 ], [ zeroinitializer, %1277 ]
  %1285 = phi i64 [ %1320, %1279 ], [ %1087, %1277 ]
  %1286 = getelementptr i32, i32* %1273, i64 %1280
  %1287 = bitcast i32* %1286 to <16 x i32>*
  %1288 = load <16 x i32>, <16 x i32>* %1287, align 4
  %1289 = getelementptr i32, i32* %1286, i64 16
  %1290 = bitcast i32* %1289 to <16 x i32>*
  %1291 = load <16 x i32>, <16 x i32>* %1290, align 4
  %1292 = getelementptr i32, i32* %1286, i64 32
  %1293 = bitcast i32* %1292 to <16 x i32>*
  %1294 = load <16 x i32>, <16 x i32>* %1293, align 4
  %1295 = getelementptr i32, i32* %1286, i64 48
  %1296 = bitcast i32* %1295 to <16 x i32>*
  %1297 = load <16 x i32>, <16 x i32>* %1296, align 4
  %1298 = add nsw <16 x i32> %1288, %1281
  %1299 = add nsw <16 x i32> %1291, %1282
  %1300 = add nsw <16 x i32> %1294, %1283
  %1301 = add nsw <16 x i32> %1297, %1284
  %1302 = or i64 %1280, 64
  %1303 = getelementptr i32, i32* %1273, i64 %1302
  %1304 = bitcast i32* %1303 to <16 x i32>*
  %1305 = load <16 x i32>, <16 x i32>* %1304, align 4
  %1306 = getelementptr i32, i32* %1303, i64 16
  %1307 = bitcast i32* %1306 to <16 x i32>*
  %1308 = load <16 x i32>, <16 x i32>* %1307, align 4
  %1309 = getelementptr i32, i32* %1303, i64 32
  %1310 = bitcast i32* %1309 to <16 x i32>*
  %1311 = load <16 x i32>, <16 x i32>* %1310, align 4
  %1312 = getelementptr i32, i32* %1303, i64 48
  %1313 = bitcast i32* %1312 to <16 x i32>*
  %1314 = load <16 x i32>, <16 x i32>* %1313, align 4
  %1315 = add nsw <16 x i32> %1305, %1298
  %1316 = add nsw <16 x i32> %1308, %1299
  %1317 = add nsw <16 x i32> %1311, %1300
  %1318 = add nsw <16 x i32> %1314, %1301
  %1319 = add i64 %1280, 128
  %1320 = add i64 %1285, -2
  %1321 = icmp eq i64 %1320, 0
  br i1 %1321, label %1322, label %1279, !llvm.loop !218

1322:                                             ; preds = %1279, %1277
  %1323 = phi <16 x i32> [ undef, %1277 ], [ %1315, %1279 ]
  %1324 = phi <16 x i32> [ undef, %1277 ], [ %1316, %1279 ]
  %1325 = phi <16 x i32> [ undef, %1277 ], [ %1317, %1279 ]
  %1326 = phi <16 x i32> [ undef, %1277 ], [ %1318, %1279 ]
  %1327 = phi i64 [ 0, %1277 ], [ %1319, %1279 ]
  %1328 = phi <16 x i32> [ zeroinitializer, %1277 ], [ %1315, %1279 ]
  %1329 = phi <16 x i32> [ zeroinitializer, %1277 ], [ %1316, %1279 ]
  %1330 = phi <16 x i32> [ zeroinitializer, %1277 ], [ %1317, %1279 ]
  %1331 = phi <16 x i32> [ zeroinitializer, %1277 ], [ %1318, %1279 ]
  br i1 %1088, label %1349, label %1332

1332:                                             ; preds = %1322
  %1333 = getelementptr i32, i32* %1273, i64 %1327
  %1334 = getelementptr i32, i32* %1333, i64 48
  %1335 = bitcast i32* %1334 to <16 x i32>*
  %1336 = load <16 x i32>, <16 x i32>* %1335, align 4
  %1337 = add nsw <16 x i32> %1336, %1331
  %1338 = getelementptr i32, i32* %1333, i64 32
  %1339 = bitcast i32* %1338 to <16 x i32>*
  %1340 = load <16 x i32>, <16 x i32>* %1339, align 4
  %1341 = add nsw <16 x i32> %1340, %1330
  %1342 = getelementptr i32, i32* %1333, i64 16
  %1343 = bitcast i32* %1342 to <16 x i32>*
  %1344 = load <16 x i32>, <16 x i32>* %1343, align 4
  %1345 = add nsw <16 x i32> %1344, %1329
  %1346 = bitcast i32* %1333 to <16 x i32>*
  %1347 = load <16 x i32>, <16 x i32>* %1346, align 4
  %1348 = add nsw <16 x i32> %1347, %1328
  br label %1349

1349:                                             ; preds = %1322, %1332
  %1350 = phi <16 x i32> [ %1323, %1322 ], [ %1348, %1332 ]
  %1351 = phi <16 x i32> [ %1324, %1322 ], [ %1345, %1332 ]
  %1352 = phi <16 x i32> [ %1325, %1322 ], [ %1341, %1332 ]
  %1353 = phi <16 x i32> [ %1326, %1322 ], [ %1337, %1332 ]
  %1354 = add <16 x i32> %1351, %1350
  %1355 = add <16 x i32> %1352, %1354
  %1356 = add <16 x i32> %1353, %1355
  %1357 = shufflevector <16 x i32> %1356, <16 x i32> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1358 = add <16 x i32> %1356, %1357
  %1359 = shufflevector <16 x i32> %1358, <16 x i32> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1360 = add <16 x i32> %1358, %1359
  %1361 = shufflevector <16 x i32> %1360, <16 x i32> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1362 = add <16 x i32> %1360, %1361
  %1363 = shufflevector <16 x i32> %1362, <16 x i32> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1364 = add <16 x i32> %1362, %1363
  %1365 = extractelement <16 x i32> %1364, i32 0
  br i1 %1089, label %1376, label %1366

1366:                                             ; preds = %1349, %1276
  %1367 = phi i32 [ 0, %1276 ], [ %1365, %1349 ]
  %1368 = phi i32* [ %1273, %1276 ], [ %1278, %1349 ]
  br label %1369

1369:                                             ; preds = %1366, %1369
  %1370 = phi i32 [ %1373, %1369 ], [ %1367, %1366 ]
  %1371 = phi i32* [ %1374, %1369 ], [ %1368, %1366 ]
  %1372 = load i32, i32* %1371, align 4
  %1373 = add nsw i32 %1372, %1370
  %1374 = getelementptr inbounds i32, i32* %1371, i64 1
  %1375 = icmp eq i32* %1374, %1275
  br i1 %1375, label %1376, label %1369, !llvm.loop !219

1376:                                             ; preds = %1369, %1349
  %1377 = phi i32 [ %1365, %1349 ], [ %1373, %1369 ]
  %1378 = add i32 %1377, 4095
  %1379 = ashr i32 %1378, 12
  %1380 = insertelement <16 x i32> undef, i32 %1379, i32 0
  %1381 = shufflevector <16 x i32> %1380, <16 x i32> undef, <16 x i32> zeroinitializer
  br label %1494

1382:                                             ; preds = %1494
  %1383 = getelementptr inbounds i32, i32* %1274, i64 %407
  br i1 %1090, label %1473, label %1384

1384:                                             ; preds = %1382
  %1385 = getelementptr i32, i32* %1274, i64 %1091
  br i1 %1093, label %1429, label %1386

1386:                                             ; preds = %1384, %1386
  %1387 = phi i64 [ %1426, %1386 ], [ 0, %1384 ]
  %1388 = phi <16 x i32> [ %1422, %1386 ], [ zeroinitializer, %1384 ]
  %1389 = phi <16 x i32> [ %1423, %1386 ], [ zeroinitializer, %1384 ]
  %1390 = phi <16 x i32> [ %1424, %1386 ], [ zeroinitializer, %1384 ]
  %1391 = phi <16 x i32> [ %1425, %1386 ], [ zeroinitializer, %1384 ]
  %1392 = phi i64 [ %1427, %1386 ], [ %1094, %1384 ]
  %1393 = getelementptr i32, i32* %1274, i64 %1387
  %1394 = bitcast i32* %1393 to <16 x i32>*
  %1395 = load <16 x i32>, <16 x i32>* %1394, align 4
  %1396 = getelementptr i32, i32* %1393, i64 16
  %1397 = bitcast i32* %1396 to <16 x i32>*
  %1398 = load <16 x i32>, <16 x i32>* %1397, align 4
  %1399 = getelementptr i32, i32* %1393, i64 32
  %1400 = bitcast i32* %1399 to <16 x i32>*
  %1401 = load <16 x i32>, <16 x i32>* %1400, align 4
  %1402 = getelementptr i32, i32* %1393, i64 48
  %1403 = bitcast i32* %1402 to <16 x i32>*
  %1404 = load <16 x i32>, <16 x i32>* %1403, align 4
  %1405 = add nsw <16 x i32> %1395, %1388
  %1406 = add nsw <16 x i32> %1398, %1389
  %1407 = add nsw <16 x i32> %1401, %1390
  %1408 = add nsw <16 x i32> %1404, %1391
  %1409 = or i64 %1387, 64
  %1410 = getelementptr i32, i32* %1274, i64 %1409
  %1411 = bitcast i32* %1410 to <16 x i32>*
  %1412 = load <16 x i32>, <16 x i32>* %1411, align 4
  %1413 = getelementptr i32, i32* %1410, i64 16
  %1414 = bitcast i32* %1413 to <16 x i32>*
  %1415 = load <16 x i32>, <16 x i32>* %1414, align 4
  %1416 = getelementptr i32, i32* %1410, i64 32
  %1417 = bitcast i32* %1416 to <16 x i32>*
  %1418 = load <16 x i32>, <16 x i32>* %1417, align 4
  %1419 = getelementptr i32, i32* %1410, i64 48
  %1420 = bitcast i32* %1419 to <16 x i32>*
  %1421 = load <16 x i32>, <16 x i32>* %1420, align 4
  %1422 = add nsw <16 x i32> %1412, %1405
  %1423 = add nsw <16 x i32> %1415, %1406
  %1424 = add nsw <16 x i32> %1418, %1407
  %1425 = add nsw <16 x i32> %1421, %1408
  %1426 = add i64 %1387, 128
  %1427 = add i64 %1392, -2
  %1428 = icmp eq i64 %1427, 0
  br i1 %1428, label %1429, label %1386, !llvm.loop !220

1429:                                             ; preds = %1386, %1384
  %1430 = phi <16 x i32> [ undef, %1384 ], [ %1422, %1386 ]
  %1431 = phi <16 x i32> [ undef, %1384 ], [ %1423, %1386 ]
  %1432 = phi <16 x i32> [ undef, %1384 ], [ %1424, %1386 ]
  %1433 = phi <16 x i32> [ undef, %1384 ], [ %1425, %1386 ]
  %1434 = phi i64 [ 0, %1384 ], [ %1426, %1386 ]
  %1435 = phi <16 x i32> [ zeroinitializer, %1384 ], [ %1422, %1386 ]
  %1436 = phi <16 x i32> [ zeroinitializer, %1384 ], [ %1423, %1386 ]
  %1437 = phi <16 x i32> [ zeroinitializer, %1384 ], [ %1424, %1386 ]
  %1438 = phi <16 x i32> [ zeroinitializer, %1384 ], [ %1425, %1386 ]
  br i1 %1095, label %1456, label %1439

1439:                                             ; preds = %1429
  %1440 = getelementptr i32, i32* %1274, i64 %1434
  %1441 = getelementptr i32, i32* %1440, i64 48
  %1442 = bitcast i32* %1441 to <16 x i32>*
  %1443 = load <16 x i32>, <16 x i32>* %1442, align 4
  %1444 = add nsw <16 x i32> %1443, %1438
  %1445 = getelementptr i32, i32* %1440, i64 32
  %1446 = bitcast i32* %1445 to <16 x i32>*
  %1447 = load <16 x i32>, <16 x i32>* %1446, align 4
  %1448 = add nsw <16 x i32> %1447, %1437
  %1449 = getelementptr i32, i32* %1440, i64 16
  %1450 = bitcast i32* %1449 to <16 x i32>*
  %1451 = load <16 x i32>, <16 x i32>* %1450, align 4
  %1452 = add nsw <16 x i32> %1451, %1436
  %1453 = bitcast i32* %1440 to <16 x i32>*
  %1454 = load <16 x i32>, <16 x i32>* %1453, align 4
  %1455 = add nsw <16 x i32> %1454, %1435
  br label %1456

1456:                                             ; preds = %1429, %1439
  %1457 = phi <16 x i32> [ %1430, %1429 ], [ %1455, %1439 ]
  %1458 = phi <16 x i32> [ %1431, %1429 ], [ %1452, %1439 ]
  %1459 = phi <16 x i32> [ %1432, %1429 ], [ %1448, %1439 ]
  %1460 = phi <16 x i32> [ %1433, %1429 ], [ %1444, %1439 ]
  %1461 = add <16 x i32> %1458, %1457
  %1462 = add <16 x i32> %1459, %1461
  %1463 = add <16 x i32> %1460, %1462
  %1464 = shufflevector <16 x i32> %1463, <16 x i32> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1465 = add <16 x i32> %1463, %1464
  %1466 = shufflevector <16 x i32> %1465, <16 x i32> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1467 = add <16 x i32> %1465, %1466
  %1468 = shufflevector <16 x i32> %1467, <16 x i32> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1469 = add <16 x i32> %1467, %1468
  %1470 = shufflevector <16 x i32> %1469, <16 x i32> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1471 = add <16 x i32> %1469, %1470
  %1472 = extractelement <16 x i32> %1471, i32 0
  br i1 %1096, label %1483, label %1473

1473:                                             ; preds = %1456, %1382
  %1474 = phi i32 [ 0, %1382 ], [ %1472, %1456 ]
  %1475 = phi i32* [ %1274, %1382 ], [ %1385, %1456 ]
  br label %1476

1476:                                             ; preds = %1473, %1476
  %1477 = phi i32 [ %1480, %1476 ], [ %1474, %1473 ]
  %1478 = phi i32* [ %1481, %1476 ], [ %1475, %1473 ]
  %1479 = load i32, i32* %1478, align 4
  %1480 = add nsw i32 %1479, %1477
  %1481 = getelementptr inbounds i32, i32* %1478, i64 1
  %1482 = icmp eq i32* %1481, %1383
  br i1 %1482, label %1483, label %1476, !llvm.loop !221

1483:                                             ; preds = %1476, %1456, %1266, %1272
  %1484 = phi i32* [ %1274, %1272 ], [ %1268, %1266 ], [ %1274, %1456 ], [ %1274, %1476 ]
  %1485 = phi i32* [ %1273, %1272 ], [ %1267, %1266 ], [ %1273, %1456 ], [ %1273, %1476 ]
  %1486 = phi i32 [ 0, %1272 ], [ 0, %1266 ], [ %1472, %1456 ], [ %1480, %1476 ]
  %1487 = sext i32 %1486 to i64
  %1488 = uitofp i64 %1487 to float
  %1489 = fdiv float 1.000000e+00, %1488
  %1490 = insertelement <16 x float> undef, float %1489, i32 0
  %1491 = shufflevector <16 x float> %1490, <16 x float> undef, <16 x i32> zeroinitializer
  %1492 = insertelement <16 x i32> undef, i32 %1486, i32 0
  %1493 = shufflevector <16 x i32> %1492, <16 x i32> undef, <16 x i32> zeroinitializer
  br i1 %408, label %1544, label %1510

1494:                                             ; preds = %1376, %1494
  %1495 = phi i64 [ %1505, %1494 ], [ 0, %1376 ]
  %1496 = getelementptr inbounds i32, i32* %1273, i64 %1495
  %1497 = bitcast i32* %1496 to <16 x i32>*
  %1498 = load <16 x i32>, <16 x i32>* %1497, align 1, !alias.scope !222, !noalias !225
  %1499 = icmp eq <16 x i32> %1498, zeroinitializer
  %1500 = icmp sgt <16 x i32> %1381, %1498
  %1501 = select <16 x i1> %1500, <16 x i32> %1381, <16 x i32> %1498
  %1502 = select <16 x i1> %1499, <16 x i32> zeroinitializer, <16 x i32> %1501
  %1503 = getelementptr inbounds i32, i32* %1274, i64 %1495
  %1504 = bitcast i32* %1503 to <16 x i32>*
  store <16 x i32> %1502, <16 x i32>* %1504, align 1, !alias.scope !227
  %1505 = add nuw i64 %1495, 16
  %1506 = icmp ult i64 %1505, %407
  br i1 %1506, label %1494, label %1382

1507:                                             ; preds = %1510
  %1508 = bitcast <16 x float> %1541 to <8 x double>
  %1509 = load i32*, i32** %107, align 8
  br label %1544

1510:                                             ; preds = %1483, %1510
  %1511 = phi i64 [ %1542, %1510 ], [ 0, %1483 ]
  %1512 = phi <16 x float> [ %1541, %1510 ], [ zeroinitializer, %1483 ]
  %1513 = getelementptr inbounds i32, i32* %1485, i64 %1511
  %1514 = bitcast i32* %1513 to <16 x i32>*
  %1515 = load <16 x i32>, <16 x i32>* %1514, align 1, !alias.scope !230, !noalias !233
  %1516 = sitofp <16 x i32> %1515 to <16 x float>
  %1517 = getelementptr inbounds i32, i32* %1484, i64 %1511
  %1518 = bitcast i32* %1517 to <16 x i32>*
  %1519 = load <16 x i32>, <16 x i32>* %1518, align 1, !alias.scope !235, !noalias !238
  %1520 = sitofp <16 x i32> %1519 to <16 x float>
  %1521 = fmul <16 x float> %1491, %1520
  %1522 = icmp eq <16 x i32> %1519, %1493
  %1523 = bitcast <16 x float> %1521 to <16 x i32>
  %1524 = add <16 x i32> %1523, <i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811>
  %1525 = ashr <16 x i32> %1524, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %1526 = and <16 x i32> %1524, <i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608>
  %1527 = sub <16 x i32> %1523, %1526
  %1528 = bitcast <16 x i32> %1527 to <16 x float>
  %1529 = sitofp <16 x i32> %1525 to <16 x float>
  %1530 = fadd <16 x float> %1528, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  fence acq_rel
  %1531 = call <16 x float> @llvm.fma.v16f32(<16 x float> %1530, <16 x float> <float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000>, <16 x float> <float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000>) #24
  %1532 = call <16 x float> @llvm.fma.v16f32(<16 x float> %1530, <16 x float> <float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000>, <16 x float> <float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000>) #24
  fence acq_rel
  %1533 = call <16 x float> @llvm.fma.v16f32(<16 x float> %1531, <16 x float> %1530, <16 x float> <float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000>) #24
  %1534 = call <16 x float> @llvm.fma.v16f32(<16 x float> %1532, <16 x float> %1530, <16 x float> <float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000>) #24
  fence acq_rel
  %1535 = fdiv <16 x float> %1533, %1534
  %1536 = fadd <16 x float> %1535, %1529
  %1537 = fcmp oeq <16 x float> %1516, zeroinitializer
  %1538 = select <16 x i1> %1522, <16 x float> zeroinitializer, <16 x float> %1536
  %1539 = fmul <16 x float> %1538, %1516
  %1540 = select <16 x i1> %1537, <16 x float> zeroinitializer, <16 x float> %1539
  %1541 = fsub <16 x float> %1512, %1540
  %1542 = add nuw i64 %1511, 16
  %1543 = icmp ult i64 %1542, %407
  br i1 %1543, label %1510, label %1507

1544:                                             ; preds = %1483, %1507
  %1545 = phi i32* [ %1484, %1483 ], [ %1509, %1507 ]
  %1546 = phi <8 x double> [ zeroinitializer, %1483 ], [ %1508, %1507 ]
  %1547 = shufflevector <8 x double> %1546, <8 x double> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1548 = bitcast <4 x double> %1547 to <8 x float>
  %1549 = shufflevector <8 x double> %1546, <8 x double> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1550 = bitcast <4 x double> %1549 to <8 x float>
  %1551 = fadd <8 x float> %1548, %1550
  %1552 = shufflevector <8 x float> %1551, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1553 = shufflevector <8 x float> %1551, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1554 = fadd <4 x float> %1552, %1553
  %1555 = shufflevector <4 x float> %1554, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %1556 = fadd <4 x float> %1554, %1555
  %1557 = shufflevector <4 x float> %1556, <4 x float> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %1558 = fadd <4 x float> %1556, %1557
  %1559 = extractelement <4 x float> %1558, i32 0
  %1560 = load i32*, i32** %119, align 8
  %1561 = getelementptr inbounds i32, i32* %1560, i64 %1205
  %1562 = load i32, i32* %1561, align 4
  %1563 = uitofp i32 %1562 to float
  %1564 = fadd float %1559, %1563
  %1565 = uitofp i64 %1265 to float
  %1566 = fsub float %1564, %1565
  %1567 = load i32*, i32** %162, align 8
  %1568 = getelementptr inbounds i32, i32* %1567, i64 %407
  br i1 %408, label %1776, label %1569

1569:                                             ; preds = %1544
  br i1 %1097, label %1659, label %1570

1570:                                             ; preds = %1569
  %1571 = getelementptr i32, i32* %1567, i64 %1098
  br i1 %1100, label %1615, label %1572

1572:                                             ; preds = %1570, %1572
  %1573 = phi i64 [ %1612, %1572 ], [ 0, %1570 ]
  %1574 = phi <16 x i32> [ %1608, %1572 ], [ zeroinitializer, %1570 ]
  %1575 = phi <16 x i32> [ %1609, %1572 ], [ zeroinitializer, %1570 ]
  %1576 = phi <16 x i32> [ %1610, %1572 ], [ zeroinitializer, %1570 ]
  %1577 = phi <16 x i32> [ %1611, %1572 ], [ zeroinitializer, %1570 ]
  %1578 = phi i64 [ %1613, %1572 ], [ %1101, %1570 ]
  %1579 = getelementptr i32, i32* %1567, i64 %1573
  %1580 = bitcast i32* %1579 to <16 x i32>*
  %1581 = load <16 x i32>, <16 x i32>* %1580, align 4
  %1582 = getelementptr i32, i32* %1579, i64 16
  %1583 = bitcast i32* %1582 to <16 x i32>*
  %1584 = load <16 x i32>, <16 x i32>* %1583, align 4
  %1585 = getelementptr i32, i32* %1579, i64 32
  %1586 = bitcast i32* %1585 to <16 x i32>*
  %1587 = load <16 x i32>, <16 x i32>* %1586, align 4
  %1588 = getelementptr i32, i32* %1579, i64 48
  %1589 = bitcast i32* %1588 to <16 x i32>*
  %1590 = load <16 x i32>, <16 x i32>* %1589, align 4
  %1591 = add nsw <16 x i32> %1581, %1574
  %1592 = add nsw <16 x i32> %1584, %1575
  %1593 = add nsw <16 x i32> %1587, %1576
  %1594 = add nsw <16 x i32> %1590, %1577
  %1595 = or i64 %1573, 64
  %1596 = getelementptr i32, i32* %1567, i64 %1595
  %1597 = bitcast i32* %1596 to <16 x i32>*
  %1598 = load <16 x i32>, <16 x i32>* %1597, align 4
  %1599 = getelementptr i32, i32* %1596, i64 16
  %1600 = bitcast i32* %1599 to <16 x i32>*
  %1601 = load <16 x i32>, <16 x i32>* %1600, align 4
  %1602 = getelementptr i32, i32* %1596, i64 32
  %1603 = bitcast i32* %1602 to <16 x i32>*
  %1604 = load <16 x i32>, <16 x i32>* %1603, align 4
  %1605 = getelementptr i32, i32* %1596, i64 48
  %1606 = bitcast i32* %1605 to <16 x i32>*
  %1607 = load <16 x i32>, <16 x i32>* %1606, align 4
  %1608 = add nsw <16 x i32> %1598, %1591
  %1609 = add nsw <16 x i32> %1601, %1592
  %1610 = add nsw <16 x i32> %1604, %1593
  %1611 = add nsw <16 x i32> %1607, %1594
  %1612 = add i64 %1573, 128
  %1613 = add i64 %1578, -2
  %1614 = icmp eq i64 %1613, 0
  br i1 %1614, label %1615, label %1572, !llvm.loop !240

1615:                                             ; preds = %1572, %1570
  %1616 = phi <16 x i32> [ undef, %1570 ], [ %1608, %1572 ]
  %1617 = phi <16 x i32> [ undef, %1570 ], [ %1609, %1572 ]
  %1618 = phi <16 x i32> [ undef, %1570 ], [ %1610, %1572 ]
  %1619 = phi <16 x i32> [ undef, %1570 ], [ %1611, %1572 ]
  %1620 = phi i64 [ 0, %1570 ], [ %1612, %1572 ]
  %1621 = phi <16 x i32> [ zeroinitializer, %1570 ], [ %1608, %1572 ]
  %1622 = phi <16 x i32> [ zeroinitializer, %1570 ], [ %1609, %1572 ]
  %1623 = phi <16 x i32> [ zeroinitializer, %1570 ], [ %1610, %1572 ]
  %1624 = phi <16 x i32> [ zeroinitializer, %1570 ], [ %1611, %1572 ]
  br i1 %1102, label %1642, label %1625

1625:                                             ; preds = %1615
  %1626 = getelementptr i32, i32* %1567, i64 %1620
  %1627 = getelementptr i32, i32* %1626, i64 48
  %1628 = bitcast i32* %1627 to <16 x i32>*
  %1629 = load <16 x i32>, <16 x i32>* %1628, align 4
  %1630 = add nsw <16 x i32> %1629, %1624
  %1631 = getelementptr i32, i32* %1626, i64 32
  %1632 = bitcast i32* %1631 to <16 x i32>*
  %1633 = load <16 x i32>, <16 x i32>* %1632, align 4
  %1634 = add nsw <16 x i32> %1633, %1623
  %1635 = getelementptr i32, i32* %1626, i64 16
  %1636 = bitcast i32* %1635 to <16 x i32>*
  %1637 = load <16 x i32>, <16 x i32>* %1636, align 4
  %1638 = add nsw <16 x i32> %1637, %1622
  %1639 = bitcast i32* %1626 to <16 x i32>*
  %1640 = load <16 x i32>, <16 x i32>* %1639, align 4
  %1641 = add nsw <16 x i32> %1640, %1621
  br label %1642

1642:                                             ; preds = %1615, %1625
  %1643 = phi <16 x i32> [ %1616, %1615 ], [ %1641, %1625 ]
  %1644 = phi <16 x i32> [ %1617, %1615 ], [ %1638, %1625 ]
  %1645 = phi <16 x i32> [ %1618, %1615 ], [ %1634, %1625 ]
  %1646 = phi <16 x i32> [ %1619, %1615 ], [ %1630, %1625 ]
  %1647 = add <16 x i32> %1644, %1643
  %1648 = add <16 x i32> %1645, %1647
  %1649 = add <16 x i32> %1646, %1648
  %1650 = shufflevector <16 x i32> %1649, <16 x i32> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1651 = add <16 x i32> %1649, %1650
  %1652 = shufflevector <16 x i32> %1651, <16 x i32> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1653 = add <16 x i32> %1651, %1652
  %1654 = shufflevector <16 x i32> %1653, <16 x i32> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1655 = add <16 x i32> %1653, %1654
  %1656 = shufflevector <16 x i32> %1655, <16 x i32> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1657 = add <16 x i32> %1655, %1656
  %1658 = extractelement <16 x i32> %1657, i32 0
  br i1 %1103, label %1669, label %1659

1659:                                             ; preds = %1642, %1569
  %1660 = phi i32 [ 0, %1569 ], [ %1658, %1642 ]
  %1661 = phi i32* [ %1567, %1569 ], [ %1571, %1642 ]
  br label %1662

1662:                                             ; preds = %1659, %1662
  %1663 = phi i32 [ %1666, %1662 ], [ %1660, %1659 ]
  %1664 = phi i32* [ %1667, %1662 ], [ %1661, %1659 ]
  %1665 = load i32, i32* %1664, align 4
  %1666 = add nsw i32 %1665, %1663
  %1667 = getelementptr inbounds i32, i32* %1664, i64 1
  %1668 = icmp eq i32* %1667, %1568
  br i1 %1668, label %1669, label %1662, !llvm.loop !241

1669:                                             ; preds = %1662, %1642
  %1670 = phi i32 [ %1658, %1642 ], [ %1666, %1662 ]
  %1671 = add i32 %1670, 4095
  %1672 = ashr i32 %1671, 12
  %1673 = insertelement <16 x i32> undef, i32 %1672, i32 0
  %1674 = shufflevector <16 x i32> %1673, <16 x i32> undef, <16 x i32> zeroinitializer
  br label %1785

1675:                                             ; preds = %1785
  %1676 = getelementptr inbounds i32, i32* %1545, i64 %407
  br i1 %1104, label %1766, label %1677

1677:                                             ; preds = %1675
  %1678 = getelementptr i32, i32* %1545, i64 %1105
  br i1 %1107, label %1722, label %1679

1679:                                             ; preds = %1677, %1679
  %1680 = phi i64 [ %1719, %1679 ], [ 0, %1677 ]
  %1681 = phi <16 x i32> [ %1715, %1679 ], [ zeroinitializer, %1677 ]
  %1682 = phi <16 x i32> [ %1716, %1679 ], [ zeroinitializer, %1677 ]
  %1683 = phi <16 x i32> [ %1717, %1679 ], [ zeroinitializer, %1677 ]
  %1684 = phi <16 x i32> [ %1718, %1679 ], [ zeroinitializer, %1677 ]
  %1685 = phi i64 [ %1720, %1679 ], [ %1108, %1677 ]
  %1686 = getelementptr i32, i32* %1545, i64 %1680
  %1687 = bitcast i32* %1686 to <16 x i32>*
  %1688 = load <16 x i32>, <16 x i32>* %1687, align 4
  %1689 = getelementptr i32, i32* %1686, i64 16
  %1690 = bitcast i32* %1689 to <16 x i32>*
  %1691 = load <16 x i32>, <16 x i32>* %1690, align 4
  %1692 = getelementptr i32, i32* %1686, i64 32
  %1693 = bitcast i32* %1692 to <16 x i32>*
  %1694 = load <16 x i32>, <16 x i32>* %1693, align 4
  %1695 = getelementptr i32, i32* %1686, i64 48
  %1696 = bitcast i32* %1695 to <16 x i32>*
  %1697 = load <16 x i32>, <16 x i32>* %1696, align 4
  %1698 = add nsw <16 x i32> %1688, %1681
  %1699 = add nsw <16 x i32> %1691, %1682
  %1700 = add nsw <16 x i32> %1694, %1683
  %1701 = add nsw <16 x i32> %1697, %1684
  %1702 = or i64 %1680, 64
  %1703 = getelementptr i32, i32* %1545, i64 %1702
  %1704 = bitcast i32* %1703 to <16 x i32>*
  %1705 = load <16 x i32>, <16 x i32>* %1704, align 4
  %1706 = getelementptr i32, i32* %1703, i64 16
  %1707 = bitcast i32* %1706 to <16 x i32>*
  %1708 = load <16 x i32>, <16 x i32>* %1707, align 4
  %1709 = getelementptr i32, i32* %1703, i64 32
  %1710 = bitcast i32* %1709 to <16 x i32>*
  %1711 = load <16 x i32>, <16 x i32>* %1710, align 4
  %1712 = getelementptr i32, i32* %1703, i64 48
  %1713 = bitcast i32* %1712 to <16 x i32>*
  %1714 = load <16 x i32>, <16 x i32>* %1713, align 4
  %1715 = add nsw <16 x i32> %1705, %1698
  %1716 = add nsw <16 x i32> %1708, %1699
  %1717 = add nsw <16 x i32> %1711, %1700
  %1718 = add nsw <16 x i32> %1714, %1701
  %1719 = add i64 %1680, 128
  %1720 = add i64 %1685, -2
  %1721 = icmp eq i64 %1720, 0
  br i1 %1721, label %1722, label %1679, !llvm.loop !242

1722:                                             ; preds = %1679, %1677
  %1723 = phi <16 x i32> [ undef, %1677 ], [ %1715, %1679 ]
  %1724 = phi <16 x i32> [ undef, %1677 ], [ %1716, %1679 ]
  %1725 = phi <16 x i32> [ undef, %1677 ], [ %1717, %1679 ]
  %1726 = phi <16 x i32> [ undef, %1677 ], [ %1718, %1679 ]
  %1727 = phi i64 [ 0, %1677 ], [ %1719, %1679 ]
  %1728 = phi <16 x i32> [ zeroinitializer, %1677 ], [ %1715, %1679 ]
  %1729 = phi <16 x i32> [ zeroinitializer, %1677 ], [ %1716, %1679 ]
  %1730 = phi <16 x i32> [ zeroinitializer, %1677 ], [ %1717, %1679 ]
  %1731 = phi <16 x i32> [ zeroinitializer, %1677 ], [ %1718, %1679 ]
  br i1 %1109, label %1749, label %1732

1732:                                             ; preds = %1722
  %1733 = getelementptr i32, i32* %1545, i64 %1727
  %1734 = getelementptr i32, i32* %1733, i64 48
  %1735 = bitcast i32* %1734 to <16 x i32>*
  %1736 = load <16 x i32>, <16 x i32>* %1735, align 4
  %1737 = add nsw <16 x i32> %1736, %1731
  %1738 = getelementptr i32, i32* %1733, i64 32
  %1739 = bitcast i32* %1738 to <16 x i32>*
  %1740 = load <16 x i32>, <16 x i32>* %1739, align 4
  %1741 = add nsw <16 x i32> %1740, %1730
  %1742 = getelementptr i32, i32* %1733, i64 16
  %1743 = bitcast i32* %1742 to <16 x i32>*
  %1744 = load <16 x i32>, <16 x i32>* %1743, align 4
  %1745 = add nsw <16 x i32> %1744, %1729
  %1746 = bitcast i32* %1733 to <16 x i32>*
  %1747 = load <16 x i32>, <16 x i32>* %1746, align 4
  %1748 = add nsw <16 x i32> %1747, %1728
  br label %1749

1749:                                             ; preds = %1722, %1732
  %1750 = phi <16 x i32> [ %1723, %1722 ], [ %1748, %1732 ]
  %1751 = phi <16 x i32> [ %1724, %1722 ], [ %1745, %1732 ]
  %1752 = phi <16 x i32> [ %1725, %1722 ], [ %1741, %1732 ]
  %1753 = phi <16 x i32> [ %1726, %1722 ], [ %1737, %1732 ]
  %1754 = add <16 x i32> %1751, %1750
  %1755 = add <16 x i32> %1752, %1754
  %1756 = add <16 x i32> %1753, %1755
  %1757 = shufflevector <16 x i32> %1756, <16 x i32> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1758 = add <16 x i32> %1756, %1757
  %1759 = shufflevector <16 x i32> %1758, <16 x i32> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1760 = add <16 x i32> %1758, %1759
  %1761 = shufflevector <16 x i32> %1760, <16 x i32> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1762 = add <16 x i32> %1760, %1761
  %1763 = shufflevector <16 x i32> %1762, <16 x i32> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1764 = add <16 x i32> %1762, %1763
  %1765 = extractelement <16 x i32> %1764, i32 0
  br i1 %1110, label %1776, label %1766

1766:                                             ; preds = %1749, %1675
  %1767 = phi i32 [ 0, %1675 ], [ %1765, %1749 ]
  %1768 = phi i32* [ %1545, %1675 ], [ %1678, %1749 ]
  br label %1769

1769:                                             ; preds = %1766, %1769
  %1770 = phi i32 [ %1773, %1769 ], [ %1767, %1766 ]
  %1771 = phi i32* [ %1774, %1769 ], [ %1768, %1766 ]
  %1772 = load i32, i32* %1771, align 4
  %1773 = add nsw i32 %1772, %1770
  %1774 = getelementptr inbounds i32, i32* %1771, i64 1
  %1775 = icmp eq i32* %1774, %1676
  br i1 %1775, label %1776, label %1769, !llvm.loop !243

1776:                                             ; preds = %1769, %1749, %1544
  %1777 = phi i32 [ 0, %1544 ], [ %1765, %1749 ], [ %1773, %1769 ]
  %1778 = sext i32 %1777 to i64
  %1779 = uitofp i64 %1778 to float
  %1780 = fdiv float 1.000000e+00, %1779
  %1781 = insertelement <16 x float> undef, float %1780, i32 0
  %1782 = shufflevector <16 x float> %1781, <16 x float> undef, <16 x i32> zeroinitializer
  %1783 = insertelement <16 x i32> undef, i32 %1777, i32 0
  %1784 = shufflevector <16 x i32> %1783, <16 x i32> undef, <16 x i32> zeroinitializer
  br i1 %408, label %1834, label %1800

1785:                                             ; preds = %1669, %1785
  %1786 = phi i64 [ %1796, %1785 ], [ 0, %1669 ]
  %1787 = getelementptr inbounds i32, i32* %1567, i64 %1786
  %1788 = bitcast i32* %1787 to <16 x i32>*
  %1789 = load <16 x i32>, <16 x i32>* %1788, align 1, !alias.scope !244, !noalias !247
  %1790 = icmp eq <16 x i32> %1789, zeroinitializer
  %1791 = icmp sgt <16 x i32> %1674, %1789
  %1792 = select <16 x i1> %1791, <16 x i32> %1674, <16 x i32> %1789
  %1793 = select <16 x i1> %1790, <16 x i32> zeroinitializer, <16 x i32> %1792
  %1794 = getelementptr inbounds i32, i32* %1545, i64 %1786
  %1795 = bitcast i32* %1794 to <16 x i32>*
  store <16 x i32> %1793, <16 x i32>* %1795, align 1, !alias.scope !249
  %1796 = add nuw i64 %1786, 16
  %1797 = icmp ult i64 %1796, %407
  br i1 %1797, label %1785, label %1675

1798:                                             ; preds = %1800
  %1799 = bitcast <16 x float> %1831 to <8 x double>
  br label %1834

1800:                                             ; preds = %1776, %1800
  %1801 = phi i64 [ %1832, %1800 ], [ 0, %1776 ]
  %1802 = phi <16 x float> [ %1831, %1800 ], [ zeroinitializer, %1776 ]
  %1803 = getelementptr inbounds i32, i32* %1567, i64 %1801
  %1804 = bitcast i32* %1803 to <16 x i32>*
  %1805 = load <16 x i32>, <16 x i32>* %1804, align 1, !alias.scope !252, !noalias !255
  %1806 = sitofp <16 x i32> %1805 to <16 x float>
  %1807 = getelementptr inbounds i32, i32* %1545, i64 %1801
  %1808 = bitcast i32* %1807 to <16 x i32>*
  %1809 = load <16 x i32>, <16 x i32>* %1808, align 1, !alias.scope !257, !noalias !260
  %1810 = sitofp <16 x i32> %1809 to <16 x float>
  %1811 = fmul <16 x float> %1782, %1810
  %1812 = icmp eq <16 x i32> %1809, %1784
  %1813 = bitcast <16 x float> %1811 to <16 x i32>
  %1814 = add <16 x i32> %1813, <i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811>
  %1815 = ashr <16 x i32> %1814, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %1816 = and <16 x i32> %1814, <i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608>
  %1817 = sub <16 x i32> %1813, %1816
  %1818 = bitcast <16 x i32> %1817 to <16 x float>
  %1819 = sitofp <16 x i32> %1815 to <16 x float>
  %1820 = fadd <16 x float> %1818, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  fence acq_rel
  %1821 = call <16 x float> @llvm.fma.v16f32(<16 x float> %1820, <16 x float> <float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000>, <16 x float> <float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000>) #24
  %1822 = call <16 x float> @llvm.fma.v16f32(<16 x float> %1820, <16 x float> <float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000>, <16 x float> <float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000>) #24
  fence acq_rel
  %1823 = call <16 x float> @llvm.fma.v16f32(<16 x float> %1821, <16 x float> %1820, <16 x float> <float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000>) #24
  %1824 = call <16 x float> @llvm.fma.v16f32(<16 x float> %1822, <16 x float> %1820, <16 x float> <float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000>) #24
  fence acq_rel
  %1825 = fdiv <16 x float> %1823, %1824
  %1826 = fadd <16 x float> %1825, %1819
  %1827 = fcmp oeq <16 x float> %1806, zeroinitializer
  %1828 = select <16 x i1> %1812, <16 x float> zeroinitializer, <16 x float> %1826
  %1829 = fmul <16 x float> %1828, %1806
  %1830 = select <16 x i1> %1827, <16 x float> zeroinitializer, <16 x float> %1829
  %1831 = fsub <16 x float> %1802, %1830
  %1832 = add nuw i64 %1801, 16
  %1833 = icmp ult i64 %1832, %407
  br i1 %1833, label %1800, label %1798

1834:                                             ; preds = %1776, %1798
  %1835 = phi <8 x double> [ zeroinitializer, %1776 ], [ %1799, %1798 ]
  %1836 = shufflevector <8 x double> %1835, <8 x double> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1837 = bitcast <4 x double> %1836 to <8 x float>
  %1838 = shufflevector <8 x double> %1835, <8 x double> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1839 = bitcast <4 x double> %1838 to <8 x float>
  %1840 = fadd <8 x float> %1837, %1839
  %1841 = shufflevector <8 x float> %1840, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1842 = shufflevector <8 x float> %1840, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1843 = fadd <4 x float> %1841, %1842
  %1844 = shufflevector <4 x float> %1843, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %1845 = fadd <4 x float> %1843, %1844
  %1846 = shufflevector <4 x float> %1845, <4 x float> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %1847 = fadd <4 x float> %1845, %1846
  %1848 = extractelement <4 x float> %1847, i32 0
  %1849 = fadd float %1848, %1565
  %1850 = load i32*, i32** %128, align 8
  %1851 = getelementptr inbounds i32, i32* %1850, i64 %1205
  %1852 = load i32, i32* %1851, align 4
  %1853 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %127, align 8
  %1854 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1853, i64 %200, i32 5
  %1855 = load i32, i32* %1854, align 8
  %1856 = icmp eq i32 %1852, %1855
  %1857 = icmp eq i32 %1855, 6
  %1858 = or i1 %1856, %1857
  %1859 = select i1 %1858, float 0.000000e+00, float %168
  switch i32 %1852, label %1888 [
    i32 6, label %1880
    i32 0, label %1884
  ]

1860:                                             ; preds = %1860, %1269
  %1861 = phi i64 [ 0, %1269 ], [ %1878, %1860 ]
  %1862 = add i64 %1861, %1270
  %1863 = load i32*, i32** %144, align 8
  %1864 = getelementptr inbounds i32, i32* %1863, i64 %1862
  %1865 = load i32, i32* %1864, align 4
  %1866 = load i32*, i32** %156, align 8
  %1867 = getelementptr inbounds i32, i32* %1866, i64 %1861
  %1868 = load i32, i32* %1867, align 4
  %1869 = sub nsw i32 %1868, %1865
  store i32 %1869, i32* %1867, align 4
  %1870 = load i32*, i32** %144, align 8
  %1871 = getelementptr inbounds i32, i32* %1870, i64 %1862
  %1872 = load i32, i32* %1871, align 4
  %1873 = getelementptr inbounds i32, i32* %1271, i64 %1861
  %1874 = load i32, i32* %1873, align 4
  %1875 = add nsw i32 %1874, %1872
  store i32 %1875, i32* %1873, align 4
  %1876 = load i32*, i32** %144, align 8
  %1877 = getelementptr inbounds i32, i32* %1876, i64 %1862
  store i32 0, i32* %1877, align 4
  %1878 = add nuw i64 %1861, 1
  %1879 = icmp eq i64 %1878, %407
  br i1 %1879, label %1272, label %1860

1880:                                             ; preds = %1834
  %1881 = fpext float %1859 to double
  %1882 = fadd double %1881, 1.000000e-08
  %1883 = fptrunc double %1882 to float
  br label %1888

1884:                                             ; preds = %1834
  %1885 = fpext float %1859 to double
  %1886 = fadd double %1885, -1.000000e-08
  %1887 = fptrunc double %1886 to float
  br label %1888

1888:                                             ; preds = %1834, %1880, %1884
  %1889 = phi float [ %1887, %1884 ], [ %1883, %1880 ], [ %1859, %1834 ]
  %1890 = fadd float %1566, %1889
  %1891 = sub nuw i64 %1255, %1172
  %1892 = load %struct.CostInfo.135*, %struct.CostInfo.135** %153, align 8
  %1893 = getelementptr inbounds %struct.CostInfo.135, %struct.CostInfo.135* %1892, i64 %1891, i32 0
  %1894 = load float, float* %1893, align 4
  %1895 = getelementptr inbounds %struct.CostInfo.135, %struct.CostInfo.135* %1892, i64 %1891, i32 1
  %1896 = load float, float* %1895, align 4
  %1897 = fadd float %1894, %1896
  %1898 = fcmp olt float %1890, %1897
  br i1 %1898, label %1899, label %1907

1899:                                             ; preds = %1888
  store float %1566, float* %1893, align 4
  %1900 = load %struct.CostInfo.135*, %struct.CostInfo.135** %153, align 8
  %1901 = getelementptr inbounds %struct.CostInfo.135, %struct.CostInfo.135* %1900, i64 %1891, i32 1
  store float %1889, float* %1901, align 4
  %1902 = load i32*, i32** %128, align 8
  %1903 = getelementptr inbounds i32, i32* %1902, i64 %1205
  %1904 = load i32, i32* %1903, align 4
  %1905 = load %struct.CostInfo.135*, %struct.CostInfo.135** %153, align 8
  %1906 = getelementptr inbounds %struct.CostInfo.135, %struct.CostInfo.135* %1905, i64 %1891, i32 2
  store i32 %1904, i32* %1906, align 4
  br label %1907

1907:                                             ; preds = %1899, %1888
  %1908 = fadd float %1849, %1889
  %1909 = load %struct.CostInfo.135*, %struct.CostInfo.135** %150, align 8
  %1910 = getelementptr inbounds %struct.CostInfo.135, %struct.CostInfo.135* %1909, i64 %1891, i32 0
  %1911 = load float, float* %1910, align 4
  %1912 = getelementptr inbounds %struct.CostInfo.135, %struct.CostInfo.135* %1909, i64 %1891, i32 1
  %1913 = load float, float* %1912, align 4
  %1914 = fadd float %1911, %1913
  %1915 = fcmp olt float %1908, %1914
  br i1 %1915, label %1916, label %1924

1916:                                             ; preds = %1907
  store float %1849, float* %1910, align 4
  %1917 = load %struct.CostInfo.135*, %struct.CostInfo.135** %150, align 8
  %1918 = getelementptr inbounds %struct.CostInfo.135, %struct.CostInfo.135* %1917, i64 %1891, i32 1
  store float %1889, float* %1918, align 4
  %1919 = load i32*, i32** %128, align 8
  %1920 = getelementptr inbounds i32, i32* %1919, i64 %1205
  %1921 = load i32, i32* %1920, align 4
  %1922 = load %struct.CostInfo.135*, %struct.CostInfo.135** %150, align 8
  %1923 = getelementptr inbounds %struct.CostInfo.135, %struct.CostInfo.135* %1922, i64 %1891, i32 2
  store i32 %1921, i32* %1923, align 4
  br label %1924

1924:                                             ; preds = %1907, %1916, %1254
  %1925 = phi i64 [ %1256, %1254 ], [ %1265, %1916 ], [ %1265, %1907 ]
  %1926 = add nuw i64 %1255, 1
  %1927 = icmp eq i64 %1926, %1171
  br i1 %1927, label %1251, label %1254

1928:                                             ; preds = %2005, %1196
  %1929 = load i64*, i64** %147, align 8
  %1930 = getelementptr inbounds i64, i64* %1929, i64 %1171
  store i64 0, i64* %1930, align 8
  br i1 %408, label %2009, label %1931

1931:                                             ; preds = %1928
  %1932 = mul i64 %1171, %407
  br label %2017

1933:                                             ; preds = %2005, %1198
  %1934 = phi i64 [ %1172, %1198 ], [ %2007, %2005 ]
  %1935 = phi i64 [ %202, %1198 ], [ %2006, %2005 ]
  %1936 = getelementptr inbounds i32, i32* %1203, i64 %1934
  %1937 = load i32, i32* %1936, align 4
  %1938 = icmp eq i32 %1937, 0
  br i1 %1938, label %2005, label %1939

1939:                                             ; preds = %1933
  %1940 = sext i32 %1937 to i64
  %1941 = add i64 %1935, %1940
  %1942 = sub nuw i64 %1934, %1172
  %1943 = load %struct.CostInfo.135*, %struct.CostInfo.135** %153, align 8
  %1944 = getelementptr inbounds %struct.CostInfo.135, %struct.CostInfo.135* %1943, i64 %1942, i32 0
  %1945 = load float, float* %1944, align 4
  %1946 = load %struct.CostInfo.135*, %struct.CostInfo.135** %150, align 8
  %1947 = getelementptr inbounds %struct.CostInfo.135, %struct.CostInfo.135* %1946, i64 %1942, i32 0
  %1948 = load float, float* %1947, align 4
  %1949 = load i32*, i32** %182, align 8
  %1950 = getelementptr inbounds i32, i32* %1949, i64 %1122
  %1951 = load i32, i32* %1950, align 4
  %1952 = icmp ne i32 %1951, 15
  %1953 = or i1 %1952, %1201
  br i1 %1953, label %1959, label %1954

1954:                                             ; preds = %1939
  %1955 = fcmp oeq float %1945, 0.000000e+00
  %1956 = fcmp oeq float %1948, 0.000000e+00
  %1957 = or i1 %1955, %1956
  %1958 = select i1 %1957, %struct.SplitInfo.132* %9, %struct.SplitInfo.132* %10
  br label %1981

1959:                                             ; preds = %1939
  %1960 = getelementptr inbounds %struct.CostInfo.135, %struct.CostInfo.135* %1946, i64 %1942, i32 2
  %1961 = load i32, i32* %1960, align 4
  %1962 = icmp eq i32 %1961, 6
  br i1 %1962, label %1972, label %1963

1963:                                             ; preds = %1959
  %1964 = getelementptr inbounds %struct.CostInfo.135, %struct.CostInfo.135* %1943, i64 %1942, i32 2
  %1965 = load i32, i32* %1964, align 4
  %1966 = icmp eq i32 %1965, 6
  br i1 %1966, label %1972, label %1967

1967:                                             ; preds = %1963
  %1968 = fcmp oeq float %1945, 0.000000e+00
  %1969 = fcmp oeq float %1948, 0.000000e+00
  %1970 = or i1 %1968, %1969
  %1971 = select i1 %1970, %struct.SplitInfo.132* %9, %struct.SplitInfo.132* %10
  br label %1983

1972:                                             ; preds = %1959, %1963
  %1973 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %127, align 8
  %1974 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1973, i64 %200, i32 5
  %1975 = load i32, i32* %1974, align 8
  %1976 = icmp eq i32 %1975, 6
  %1977 = fcmp oeq float %1945, 0.000000e+00
  %1978 = fcmp oeq float %1948, 0.000000e+00
  %1979 = or i1 %1977, %1978
  %1980 = select i1 %1979, %struct.SplitInfo.132* %9, %struct.SplitInfo.132* %10
  br i1 %1976, label %1983, label %1981

1981:                                             ; preds = %1972, %1954
  %1982 = phi %struct.SplitInfo.132* [ %1958, %1954 ], [ %1980, %1972 ]
  br label %1983

1983:                                             ; preds = %1972, %1967, %1981
  %1984 = phi %struct.SplitInfo.132* [ %1982, %1981 ], [ %1980, %1972 ], [ %1971, %1967 ]
  %1985 = phi %struct.SplitInfo.132* [ %11, %1981 ], [ %12, %1972 ], [ %12, %1967 ]
  %1986 = select i1 %1202, %struct.SplitInfo.132* %1984, %struct.SplitInfo.132* %1985
  %1987 = fadd float %1945, %1948
  %1988 = getelementptr inbounds %struct.SplitInfo.132, %struct.SplitInfo.132* %1986, i64 0, i32 3
  %1989 = load float, float* %1988, align 8
  %1990 = getelementptr inbounds %struct.SplitInfo.132, %struct.SplitInfo.132* %1986, i64 0, i32 4
  %1991 = load float, float* %1990, align 4
  %1992 = fadd float %1989, %1991
  %1993 = fcmp olt float %1987, %1992
  br i1 %1993, label %1994, label %2005

1994:                                             ; preds = %1983
  %1995 = getelementptr inbounds %struct.SplitInfo.132, %struct.SplitInfo.132* %1986, i64 0, i32 0
  store i64 %1122, i64* %1995, align 8
  %1996 = trunc i64 %1934 to i32
  %1997 = getelementptr inbounds %struct.SplitInfo.132, %struct.SplitInfo.132* %1986, i64 0, i32 1
  store i32 %1996, i32* %1997, align 8
  %1998 = getelementptr inbounds %struct.SplitInfo.132, %struct.SplitInfo.132* %1986, i64 0, i32 2
  store i64 %1941, i64* %1998, align 8
  store float %1948, float* %1988, align 8
  %1999 = getelementptr inbounds %struct.CostInfo.135, %struct.CostInfo.135* %1946, i64 %1942, i32 2
  %2000 = load i32, i32* %1999, align 4
  %2001 = getelementptr inbounds %struct.SplitInfo.132, %struct.SplitInfo.132* %1986, i64 0, i32 5
  store i32 %2000, i32* %2001, align 8
  store float %1945, float* %1990, align 4
  %2002 = getelementptr inbounds %struct.CostInfo.135, %struct.CostInfo.135* %1943, i64 %1942, i32 2
  %2003 = load i32, i32* %2002, align 4
  %2004 = getelementptr inbounds %struct.SplitInfo.132, %struct.SplitInfo.132* %1986, i64 0, i32 6
  store i32 %2003, i32* %2004, align 4
  br label %2005

2005:                                             ; preds = %1983, %1994, %1933
  %2006 = phi i64 [ %1935, %1933 ], [ %1941, %1994 ], [ %1941, %1983 ]
  %2007 = add nuw i64 %1934, 1
  %2008 = icmp eq i64 %2007, %1171
  br i1 %2008, label %1928, label %1933

2009:                                             ; preds = %2017, %1928
  %2010 = add nuw i64 %1122, 1
  %2011 = icmp ult i64 %2010, %70
  br i1 %2011, label %2012, label %1111

2012:                                             ; preds = %2009
  %2013 = load i64, i64* %170, align 8
  %2014 = load i64, i64* %172, align 8
  %2015 = load i64, i64* %175, align 8
  %2016 = load i64, i64* %176, align 8
  br label %1117

2017:                                             ; preds = %2017, %1931
  %2018 = phi i64 [ 0, %1931 ], [ %2034, %2017 ]
  %2019 = add i64 %2018, %1932
  %2020 = load i32*, i32** %144, align 8
  %2021 = getelementptr inbounds i32, i32* %2020, i64 %2019
  store i32 0, i32* %2021, align 4
  %2022 = or i64 %2018, 1
  %2023 = add i64 %2022, %1932
  %2024 = load i32*, i32** %144, align 8
  %2025 = getelementptr inbounds i32, i32* %2024, i64 %2023
  store i32 0, i32* %2025, align 4
  %2026 = or i64 %2018, 2
  %2027 = add i64 %2026, %1932
  %2028 = load i32*, i32** %144, align 8
  %2029 = getelementptr inbounds i32, i32* %2028, i64 %2027
  store i32 0, i32* %2029, align 4
  %2030 = or i64 %2018, 3
  %2031 = add i64 %2030, %1932
  %2032 = load i32*, i32** %144, align 8
  %2033 = getelementptr inbounds i32, i32* %2032, i64 %2031
  store i32 0, i32* %2033, align 4
  %2034 = add nuw i64 %2018, 4
  %2035 = icmp eq i64 %2034, %407
  br i1 %2035, label %2009, label %2017

2036:                                             ; preds = %1111
  %2037 = load float, float* %92, align 8
  %2038 = load float, float* %93, align 4
  %2039 = fadd float %2037, %2038
  %2040 = fmul float %2039, %5
  %2041 = fcmp ugt float %1114, %2040
  br i1 %2041, label %2043, label %2042

2042:                                             ; preds = %2036
  br label %2043

2043:                                             ; preds = %2036, %2042, %1111
  %2044 = phi %struct.SplitInfo.132* [ %12, %2042 ], [ %11, %2036 ], [ %11, %1111 ]
  %2045 = load float, float* %84, align 8
  %2046 = load float, float* %85, align 4
  %2047 = fadd float %2045, %2046
  %2048 = fadd float %2047, %1
  %2049 = fcmp olt float %2048, %822
  br i1 %2049, label %2050, label %2059

2050:                                             ; preds = %2043
  %2051 = getelementptr inbounds %struct.SplitInfo.132, %struct.SplitInfo.132* %2044, i64 0, i32 3
  %2052 = load float, float* %2051, align 8
  %2053 = getelementptr inbounds %struct.SplitInfo.132, %struct.SplitInfo.132* %2044, i64 0, i32 4
  %2054 = load float, float* %2053, align 4
  %2055 = fadd float %2052, %2054
  %2056 = fmul float %2055, %5
  %2057 = fcmp ugt float %2047, %2056
  br i1 %2057, label %2059, label %2058

2058:                                             ; preds = %2050
  br label %2059

2059:                                             ; preds = %2050, %2058, %2043
  %2060 = phi %struct.SplitInfo.132* [ %10, %2058 ], [ %2044, %2050 ], [ %2044, %2043 ]
  %2061 = load float, float* %76, align 8
  %2062 = load float, float* %77, align 4
  %2063 = fadd float %2061, %2062
  %2064 = fadd float %2063, %1
  %2065 = fcmp olt float %2064, %822
  %2066 = select i1 %2065, %struct.SplitInfo.132* %9, %struct.SplitInfo.132* %2060
  %2067 = load i32*, i32** %162, align 8
  %2068 = icmp eq i32* %2067, null
  br i1 %2068, label %2072, label %2069

2069:                                             ; preds = %2059
  %2070 = ptrtoint i32* %2067 to i64
  store i64 %2070, i64* %166, align 8
  %2071 = bitcast i32* %2067 to i8*
  call void @_ZdlPv(i8* %2071) #29
  br label %2072

2072:                                             ; preds = %2059, %2069
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %161) #24
  %2073 = load i32*, i32** %156, align 8
  %2074 = icmp eq i32* %2073, null
  br i1 %2074, label %2078, label %2075

2075:                                             ; preds = %2072
  %2076 = ptrtoint i32* %2073 to i64
  store i64 %2076, i64* %160, align 8
  %2077 = bitcast i32* %2073 to i8*
  call void @_ZdlPv(i8* %2077) #29
  br label %2078

2078:                                             ; preds = %2072, %2075
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %155) #24
  %2079 = load %struct.CostInfo.135*, %struct.CostInfo.135** %153, align 8
  %2080 = icmp eq %struct.CostInfo.135* %2079, null
  br i1 %2080, label %2084, label %2081

2081:                                             ; preds = %2078
  %2082 = ptrtoint %struct.CostInfo.135* %2079 to i64
  store i64 %2082, i64* %173, align 8
  %2083 = bitcast %struct.CostInfo.135* %2079 to i8*
  call void @_ZdlPv(i8* %2083) #29
  br label %2084

2084:                                             ; preds = %2078, %2081
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %152) #24
  %2085 = load %struct.CostInfo.135*, %struct.CostInfo.135** %150, align 8
  %2086 = icmp eq %struct.CostInfo.135* %2085, null
  br i1 %2086, label %2090, label %2087

2087:                                             ; preds = %2084
  %2088 = ptrtoint %struct.CostInfo.135* %2085 to i64
  store i64 %2088, i64* %171, align 8
  %2089 = bitcast %struct.CostInfo.135* %2085 to i8*
  call void @_ZdlPv(i8* %2089) #29
  br label %2090

2090:                                             ; preds = %2084, %2087
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %149) #24
  %2091 = load i64*, i64** %147, align 8
  %2092 = icmp eq i64* %2091, null
  br i1 %2092, label %2096, label %2093

2093:                                             ; preds = %2090
  %2094 = ptrtoint i64* %2091 to i64
  store i64 %2094, i64* %175, align 8
  %2095 = bitcast i64* %2091 to i8*
  call void @_ZdlPv(i8* %2095) #29
  br label %2096

2096:                                             ; preds = %2090, %2093
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %146) #24
  %2097 = load i32*, i32** %144, align 8
  %2098 = icmp eq i32* %2097, null
  br i1 %2098, label %2102, label %2099

2099:                                             ; preds = %2096
  %2100 = ptrtoint i32* %2097 to i64
  store i64 %2100, i64* %177, align 8
  %2101 = bitcast i32* %2097 to i8*
  call void @_ZdlPv(i8* %2101) #29
  br label %2102

2102:                                             ; preds = %2096, %2099
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %143) #24
  %2103 = load i32*, i32** %141, align 8
  %2104 = icmp eq i32* %2103, null
  br i1 %2104, label %2108, label %2105

2105:                                             ; preds = %2102
  %2106 = ptrtoint i32* %2103 to i64
  store i64 %2106, i64* %180, align 8
  %2107 = bitcast i32* %2103 to i8*
  call void @_ZdlPv(i8* %2107) #29
  br label %2108

2108:                                             ; preds = %2102, %2105
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %140) #24
  %2109 = getelementptr inbounds %struct.SplitInfo.132, %struct.SplitInfo.132* %2066, i64 0, i32 3
  %2110 = load float, float* %2109, align 8
  %2111 = getelementptr inbounds %struct.SplitInfo.132, %struct.SplitInfo.132* %2066, i64 0, i32 4
  %2112 = load float, float* %2111, align 4
  br label %2115

2113:                                             ; preds = %1014, %1001
  %2114 = phi i64 [ %1009, %1001 ], [ %1021, %1014 ]
  store i64 %2114, i64* %132, align 8
  br label %2115

2115:                                             ; preds = %945, %2113, %2108
  %2116 = phi float [ %2112, %2108 ], [ %936, %2113 ], [ %936, %945 ]
  %2117 = phi float [ %2110, %2108 ], [ %936, %2113 ], [ %936, %945 ]
  %2118 = phi %struct.SplitInfo.132* [ %2066, %2108 ], [ %16, %2113 ], [ %16, %945 ]
  %2119 = fadd float %2117, %2116
  %2120 = fadd float %2119, %1
  %2121 = fcmp olt float %2120, %822
  br i1 %2121, label %2122, label %2368

2122:                                             ; preds = %2115
  %2123 = getelementptr inbounds %struct.SplitInfo.132, %struct.SplitInfo.132* %2118, i64 0, i32 0
  %2124 = load i64, i64* %2123, align 8
  %2125 = load i32*, i32** %182, align 8
  %2126 = getelementptr inbounds i32, i32* %2125, i64 %2124
  %2127 = load i32, i32* %2126, align 4
  %2128 = getelementptr inbounds %struct.SplitInfo.132, %struct.SplitInfo.132* %2118, i64 0, i32 1
  %2129 = load i32, i32* %2128, align 8
  %2130 = zext i32 %2129 to i64
  %2131 = load %"class.std::__1::vector.43"*, %"class.std::__1::vector.43"** %174, align 8
  %2132 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %2131, i64 %2124
  %2133 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %2131, i64 %2124, i32 0, i32 1
  %2134 = bitcast i32** %2133 to i64*
  %2135 = load i64, i64* %2134, align 8
  %2136 = bitcast %"class.std::__1::vector.43"* %2132 to i64*
  %2137 = load i64, i64* %2136, align 8
  %2138 = sub i64 %2135, %2137
  %2139 = ashr exact i64 %2138, 2
  %2140 = icmp ugt i64 %2139, %2130
  br i1 %2140, label %2144, label %2141

2141:                                             ; preds = %2122
  %2142 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.16, i64 0, i64 0), i32 65, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.17, i64 0, i64 0)) #24
  %2143 = call zeroext i1 @_ZN3jxl5AbortEv() #28
  unreachable

2144:                                             ; preds = %2122
  %2145 = zext i32 %2127 to i64
  %2146 = inttoptr i64 %2137 to i32*
  %2147 = getelementptr inbounds i32, i32* %2146, i64 %2130
  %2148 = load i32, i32* %2147, align 4
  %2149 = getelementptr inbounds %struct.SplitInfo.132, %struct.SplitInfo.132* %2118, i64 0, i32 5
  %2150 = load i32, i32* %2149, align 8
  %2151 = getelementptr inbounds %struct.SplitInfo.132, %struct.SplitInfo.132* %2118, i64 0, i32 6
  %2152 = load i32, i32* %2151, align 4
  %2153 = load i64, i64* %185, align 8
  %2154 = load i64, i64* %186, align 8
  %2155 = sub i64 %2153, %2154
  %2156 = sdiv exact i64 %2155, 40
  %2157 = trunc i64 %2156 to i32
  %2158 = inttoptr i64 %2154 to %"struct.jxl::PropertyDecisionNode"*
  %2159 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %2158, i64 %200, i32 3
  store i32 %2157, i32* %2159, align 8
  %2160 = load i64, i64* %185, align 8
  %2161 = load i64, i64* %186, align 8
  %2162 = sub i64 %2160, %2161
  %2163 = sdiv exact i64 %2162, 40
  %2164 = trunc i64 %2163 to i32
  %2165 = add i32 %2164, 1
  %2166 = inttoptr i64 %2161 to %"struct.jxl::PropertyDecisionNode"*
  %2167 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %2166, i64 %200, i32 4
  store i32 %2165, i32* %2167, align 4
  %2168 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %127, align 8
  %2169 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %2168, i64 %200, i32 0
  store i32 %2148, i32* %2169, align 8
  %2170 = trunc i32 %2127 to i16
  %2171 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %127, align 8
  %2172 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %2171, i64 %200, i32 1
  store i16 %2170, i16* %2172, align 4
  call void @_ZNSt3__16vectorIN3jxl20PropertyDecisionNodeENS_9allocatorIS2_EEE12emplace_backIJEEEvDpOT_(%"class.std::__1::vector"* %6) #24
  %2173 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %184, align 8
  %2174 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %2173, i64 -1, i32 1
  store i16 -1, i16* %2174, align 4
  %2175 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %184, align 8
  %2176 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %2175, i64 -1, i32 5
  store i32 %2152, i32* %2176, align 8
  %2177 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %184, align 8
  %2178 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %2177, i64 -1, i32 7
  store i64 0, i64* %2178, align 8
  %2179 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %184, align 8
  %2180 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %2179, i64 -1, i32 8
  store i32 1, i32* %2180, align 8
  call void @_ZNSt3__16vectorIN3jxl20PropertyDecisionNodeENS_9allocatorIS2_EEE12emplace_backIJEEEvDpOT_(%"class.std::__1::vector"* %6) #24
  %2181 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %184, align 8
  %2182 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %2181, i64 -1, i32 1
  store i16 -1, i16* %2182, align 4
  %2183 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %184, align 8
  %2184 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %2183, i64 -1, i32 5
  store i32 %2150, i32* %2184, align 8
  %2185 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %184, align 8
  %2186 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %2185, i64 -1, i32 7
  store i64 0, i64* %2186, align 8
  %2187 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %184, align 8
  %2188 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %2187, i64 -1, i32 8
  store i32 1, i32* %2188, align 8
  %2189 = getelementptr inbounds %struct.SplitInfo.132, %struct.SplitInfo.132* %2118, i64 0, i32 2
  %2190 = load i64, i64* %2189, align 8
  %2191 = load i64, i64* %2123, align 8
  call void @_ZN3jxl6N_AVX316SplitTreeSamplesERNS_11TreeSamplesEmmmm(%"struct.jxl::TreeSamples"* dereferenceable(200) %0, i64 %202, i64 %2190, i64 %204, i64 %2191)
  %2192 = icmp ugt i32 %2127, 1
  br i1 %2192, label %2193, label %2199

2193:                                             ; preds = %2144
  %2194 = load i64, i64* %2123, align 8
  %2195 = trunc i64 %2194 to i32
  %2196 = shl i32 1, %2195
  %2197 = sext i32 %2196 to i64
  %2198 = or i64 %206, %2197
  br label %2199

2199:                                             ; preds = %2193, %2144
  %2200 = phi i64 [ %2198, %2193 ], [ %206, %2144 ]
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %187) #24
  store i64 %209, i64* %188, align 8
  store i64 %212, i64* %190, align 8
  %2201 = icmp ult i32 %2127, 2
  br i1 %2201, label %2202, label %2217

2202:                                             ; preds = %2199
  %2203 = add nsw i32 %2148, 1
  %2204 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %24, i64 0, i32 0, i64 %2145, i32 0, i64 1
  %2205 = load i32, i32* %2204, align 4
  %2206 = icmp ugt i32 %2203, %2205
  br i1 %2206, label %2207, label %2210

2207:                                             ; preds = %2202
  %2208 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.1, i64 0, i64 0), i32 491, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.4, i64 0, i64 0)) #24
  %2209 = call zeroext i1 @_ZN3jxl5AbortEv() #28
  unreachable

2210:                                             ; preds = %2202
  store i32 %2203, i32* %2204, align 4
  %2211 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %24, i64 0, i32 0, i64 %2145, i32 0, i64 0
  %2212 = load i32, i32* %2211, align 8
  %2213 = icmp ult i32 %2212, %2203
  br i1 %2213, label %2217, label %2214

2214:                                             ; preds = %2210
  %2215 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.1, i64 0, i64 0), i32 493, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.5, i64 0, i64 0)) #24
  %2216 = call zeroext i1 @_ZN3jxl5AbortEv() #28
  unreachable

2217:                                             ; preds = %2210, %2199
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %191)
  %2218 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %127, align 8
  %2219 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %2218, i64 %200, i32 4
  %2220 = load i32, i32* %2219, align 4
  %2221 = zext i32 %2220 to i64
  %2222 = load i64, i64* %2189, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %191, i8* nonnull align 8 %187, i64 16, i1 false)
  %2223 = load %struct.NodeInfo.126*, %struct.NodeInfo.126** %29, align 8
  %2224 = load %struct.NodeInfo.126*, %struct.NodeInfo.126** %30, align 8
  %2225 = icmp ult %struct.NodeInfo.126* %2223, %2224
  %2226 = ptrtoint %struct.NodeInfo.126* %2224 to i64
  br i1 %2225, label %2227, label %2236

2227:                                             ; preds = %2217
  %2228 = getelementptr inbounds %struct.NodeInfo.126, %struct.NodeInfo.126* %2223, i64 0, i32 0
  store i64 %2221, i64* %2228, align 8
  %2229 = getelementptr inbounds %struct.NodeInfo.126, %struct.NodeInfo.126* %2223, i64 0, i32 1
  store i64 %202, i64* %2229, align 8
  %2230 = getelementptr inbounds %struct.NodeInfo.126, %struct.NodeInfo.126* %2223, i64 0, i32 2
  store i64 %2222, i64* %2230, align 8
  %2231 = getelementptr inbounds %struct.NodeInfo.126, %struct.NodeInfo.126* %2223, i64 0, i32 3
  store i64 %2200, i64* %2231, align 8
  %2232 = getelementptr inbounds %struct.NodeInfo.126, %struct.NodeInfo.126* %2223, i64 0, i32 4
  %2233 = bitcast %"struct.std::__1::array"* %2232 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %2233, i8* nonnull align 8 %191, i64 16, i1 false)
  %2234 = getelementptr inbounds %struct.NodeInfo.126, %struct.NodeInfo.126* %2223, i64 1
  %2235 = ptrtoint %struct.NodeInfo.126* %2234 to i64
  store i64 %2235, i64* %192, align 8
  br label %2284

2236:                                             ; preds = %2217
  %2237 = ptrtoint %struct.NodeInfo.126* %2223 to i64
  %2238 = load i64, i64* %193, align 8
  %2239 = sub i64 %2237, %2238
  %2240 = sdiv exact i64 %2239, 48
  %2241 = add nsw i64 %2240, 1
  %2242 = icmp ugt i64 %2241, 384307168202282325
  br i1 %2242, label %2243, label %2245

2243:                                             ; preds = %2236
  %2244 = bitcast %"class.std::__1::vector.124"* %8 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %2244) #28
  unreachable

2245:                                             ; preds = %2236
  %2246 = sub i64 %2226, %2238
  %2247 = sdiv exact i64 %2246, 48
  %2248 = icmp ult i64 %2247, 192153584101141162
  br i1 %2248, label %2249, label %2254

2249:                                             ; preds = %2245
  %2250 = shl nsw i64 %2247, 1
  %2251 = icmp ult i64 %2250, %2241
  %2252 = select i1 %2251, i64 %2241, i64 %2250
  %2253 = icmp eq i64 %2252, 0
  br i1 %2253, label %2259, label %2254

2254:                                             ; preds = %2249, %2245
  %2255 = phi i64 [ %2252, %2249 ], [ 384307168202282325, %2245 ]
  %2256 = mul i64 %2255, 48
  %2257 = call i8* @_Znwm(i64 %2256) #29
  %2258 = bitcast i8* %2257 to %struct.NodeInfo.126*
  br label %2259

2259:                                             ; preds = %2254, %2249
  %2260 = phi i64 [ %2255, %2254 ], [ 0, %2249 ]
  %2261 = phi %struct.NodeInfo.126* [ %2258, %2254 ], [ null, %2249 ]
  %2262 = getelementptr inbounds %struct.NodeInfo.126, %struct.NodeInfo.126* %2261, i64 %2240
  %2263 = getelementptr inbounds %struct.NodeInfo.126, %struct.NodeInfo.126* %2261, i64 %2260
  %2264 = ptrtoint %struct.NodeInfo.126* %2263 to i64
  %2265 = getelementptr inbounds %struct.NodeInfo.126, %struct.NodeInfo.126* %2262, i64 0, i32 0
  store i64 %2221, i64* %2265, align 8
  %2266 = getelementptr inbounds %struct.NodeInfo.126, %struct.NodeInfo.126* %2261, i64 %2240, i32 1
  store i64 %202, i64* %2266, align 8
  %2267 = getelementptr inbounds %struct.NodeInfo.126, %struct.NodeInfo.126* %2261, i64 %2240, i32 2
  store i64 %2222, i64* %2267, align 8
  %2268 = getelementptr inbounds %struct.NodeInfo.126, %struct.NodeInfo.126* %2261, i64 %2240, i32 3
  store i64 %2200, i64* %2268, align 8
  %2269 = getelementptr inbounds %struct.NodeInfo.126, %struct.NodeInfo.126* %2261, i64 %2240, i32 4
  %2270 = bitcast %"struct.std::__1::array"* %2269 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %2270, i8* nonnull align 8 %191, i64 16, i1 false)
  %2271 = getelementptr inbounds %struct.NodeInfo.126, %struct.NodeInfo.126* %2262, i64 1
  %2272 = ptrtoint %struct.NodeInfo.126* %2271 to i64
  %2273 = sdiv exact i64 %2239, -48
  %2274 = getelementptr inbounds %struct.NodeInfo.126, %struct.NodeInfo.126* %2262, i64 %2273
  %2275 = ptrtoint %struct.NodeInfo.126* %2274 to i64
  %2276 = icmp sgt i64 %2239, 0
  br i1 %2276, label %2277, label %2280

2277:                                             ; preds = %2259
  %2278 = bitcast %struct.NodeInfo.126* %2274 to i8*
  %2279 = inttoptr i64 %2238 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %2278, i8* align 8 %2279, i64 %2239, i1 false) #24
  br label %2280

2280:                                             ; preds = %2277, %2259
  store i64 %2275, i64* %193, align 8
  store i64 %2272, i64* %192, align 8
  store i64 %2264, i64* %194, align 8
  %2281 = icmp eq i64 %2238, 0
  br i1 %2281, label %2284, label %2282

2282:                                             ; preds = %2280
  %2283 = inttoptr i64 %2238 to i8*
  call void @_ZdlPv(i8* %2283) #29
  br label %2284

2284:                                             ; preds = %2227, %2280, %2282
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %191)
  store i64 %209, i64* %188, align 8
  store i64 %212, i64* %190, align 8
  br i1 %2201, label %2285, label %2300

2285:                                             ; preds = %2284
  %2286 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %24, i64 0, i32 0, i64 %2145, i32 0, i64 0
  %2287 = load i32, i32* %2286, align 8
  %2288 = add nsw i32 %2148, 1
  %2289 = icmp ugt i32 %2287, %2288
  br i1 %2289, label %2290, label %2293

2290:                                             ; preds = %2285
  %2291 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.1, i64 0, i64 0), i32 499, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.6, i64 0, i64 0)) #24
  %2292 = call zeroext i1 @_ZN3jxl5AbortEv() #28
  unreachable

2293:                                             ; preds = %2285
  store i32 %2288, i32* %2286, align 8
  %2294 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %24, i64 0, i32 0, i64 %2145, i32 0, i64 1
  %2295 = load i32, i32* %2294, align 4
  %2296 = icmp ult i32 %2288, %2295
  br i1 %2296, label %2300, label %2297

2297:                                             ; preds = %2293
  %2298 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.1, i64 0, i64 0), i32 501, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.5, i64 0, i64 0)) #24
  %2299 = call zeroext i1 @_ZN3jxl5AbortEv() #28
  unreachable

2300:                                             ; preds = %2293, %2284
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %195)
  %2301 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %127, align 8
  %2302 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %2301, i64 %200, i32 3
  %2303 = load i32, i32* %2302, align 8
  %2304 = zext i32 %2303 to i64
  %2305 = load i64, i64* %2189, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %195, i8* nonnull align 8 %187, i64 16, i1 false)
  %2306 = load %struct.NodeInfo.126*, %struct.NodeInfo.126** %29, align 8
  %2307 = load %struct.NodeInfo.126*, %struct.NodeInfo.126** %30, align 8
  %2308 = icmp ult %struct.NodeInfo.126* %2306, %2307
  %2309 = ptrtoint %struct.NodeInfo.126* %2307 to i64
  br i1 %2308, label %2310, label %2319

2310:                                             ; preds = %2300
  %2311 = getelementptr inbounds %struct.NodeInfo.126, %struct.NodeInfo.126* %2306, i64 0, i32 0
  store i64 %2304, i64* %2311, align 8
  %2312 = getelementptr inbounds %struct.NodeInfo.126, %struct.NodeInfo.126* %2306, i64 0, i32 1
  store i64 %2305, i64* %2312, align 8
  %2313 = getelementptr inbounds %struct.NodeInfo.126, %struct.NodeInfo.126* %2306, i64 0, i32 2
  store i64 %204, i64* %2313, align 8
  %2314 = getelementptr inbounds %struct.NodeInfo.126, %struct.NodeInfo.126* %2306, i64 0, i32 3
  store i64 %2200, i64* %2314, align 8
  %2315 = getelementptr inbounds %struct.NodeInfo.126, %struct.NodeInfo.126* %2306, i64 0, i32 4
  %2316 = bitcast %"struct.std::__1::array"* %2315 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %2316, i8* nonnull align 8 %195, i64 16, i1 false)
  %2317 = getelementptr inbounds %struct.NodeInfo.126, %struct.NodeInfo.126* %2306, i64 1
  %2318 = ptrtoint %struct.NodeInfo.126* %2317 to i64
  store i64 %2318, i64* %192, align 8
  br label %2367

2319:                                             ; preds = %2300
  %2320 = ptrtoint %struct.NodeInfo.126* %2306 to i64
  %2321 = load i64, i64* %193, align 8
  %2322 = sub i64 %2320, %2321
  %2323 = sdiv exact i64 %2322, 48
  %2324 = add nsw i64 %2323, 1
  %2325 = icmp ugt i64 %2324, 384307168202282325
  br i1 %2325, label %2326, label %2328

2326:                                             ; preds = %2319
  %2327 = bitcast %"class.std::__1::vector.124"* %8 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %2327) #28
  unreachable

2328:                                             ; preds = %2319
  %2329 = sub i64 %2309, %2321
  %2330 = sdiv exact i64 %2329, 48
  %2331 = icmp ult i64 %2330, 192153584101141162
  br i1 %2331, label %2332, label %2337

2332:                                             ; preds = %2328
  %2333 = shl nsw i64 %2330, 1
  %2334 = icmp ult i64 %2333, %2324
  %2335 = select i1 %2334, i64 %2324, i64 %2333
  %2336 = icmp eq i64 %2335, 0
  br i1 %2336, label %2342, label %2337

2337:                                             ; preds = %2332, %2328
  %2338 = phi i64 [ %2335, %2332 ], [ 384307168202282325, %2328 ]
  %2339 = mul i64 %2338, 48
  %2340 = call i8* @_Znwm(i64 %2339) #29
  %2341 = bitcast i8* %2340 to %struct.NodeInfo.126*
  br label %2342

2342:                                             ; preds = %2337, %2332
  %2343 = phi i64 [ %2338, %2337 ], [ 0, %2332 ]
  %2344 = phi %struct.NodeInfo.126* [ %2341, %2337 ], [ null, %2332 ]
  %2345 = getelementptr inbounds %struct.NodeInfo.126, %struct.NodeInfo.126* %2344, i64 %2323
  %2346 = getelementptr inbounds %struct.NodeInfo.126, %struct.NodeInfo.126* %2344, i64 %2343
  %2347 = ptrtoint %struct.NodeInfo.126* %2346 to i64
  %2348 = getelementptr inbounds %struct.NodeInfo.126, %struct.NodeInfo.126* %2345, i64 0, i32 0
  store i64 %2304, i64* %2348, align 8
  %2349 = getelementptr inbounds %struct.NodeInfo.126, %struct.NodeInfo.126* %2344, i64 %2323, i32 1
  store i64 %2305, i64* %2349, align 8
  %2350 = getelementptr inbounds %struct.NodeInfo.126, %struct.NodeInfo.126* %2344, i64 %2323, i32 2
  store i64 %204, i64* %2350, align 8
  %2351 = getelementptr inbounds %struct.NodeInfo.126, %struct.NodeInfo.126* %2344, i64 %2323, i32 3
  store i64 %2200, i64* %2351, align 8
  %2352 = getelementptr inbounds %struct.NodeInfo.126, %struct.NodeInfo.126* %2344, i64 %2323, i32 4
  %2353 = bitcast %"struct.std::__1::array"* %2352 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %2353, i8* nonnull align 8 %195, i64 16, i1 false)
  %2354 = getelementptr inbounds %struct.NodeInfo.126, %struct.NodeInfo.126* %2345, i64 1
  %2355 = ptrtoint %struct.NodeInfo.126* %2354 to i64
  %2356 = sdiv exact i64 %2322, -48
  %2357 = getelementptr inbounds %struct.NodeInfo.126, %struct.NodeInfo.126* %2345, i64 %2356
  %2358 = ptrtoint %struct.NodeInfo.126* %2357 to i64
  %2359 = icmp sgt i64 %2322, 0
  br i1 %2359, label %2360, label %2363

2360:                                             ; preds = %2342
  %2361 = bitcast %struct.NodeInfo.126* %2357 to i8*
  %2362 = inttoptr i64 %2321 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %2361, i8* align 8 %2362, i64 %2322, i1 false) #24
  br label %2363

2363:                                             ; preds = %2360, %2342
  store i64 %2358, i64* %193, align 8
  store i64 %2355, i64* %192, align 8
  store i64 %2347, i64* %194, align 8
  %2364 = icmp eq i64 %2321, 0
  br i1 %2364, label %2367, label %2365

2365:                                             ; preds = %2363
  %2366 = inttoptr i64 %2321 to i8*
  call void @_ZdlPv(i8* %2366) #29
  br label %2367

2367:                                             ; preds = %2310, %2363, %2365
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %195)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %187) #24
  br label %2368

2368:                                             ; preds = %2367, %2115
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %129) #24
  %2369 = load i32*, i32** %119, align 8
  %2370 = icmp eq i32* %2369, null
  br i1 %2370, label %2374, label %2371

2371:                                             ; preds = %2368
  %2372 = ptrtoint i32* %2369 to i64
  store i64 %2372, i64* %124, align 8
  %2373 = bitcast i32* %2369 to i8*
  call void @_ZdlPv(i8* %2373) #29
  br label %2374

2374:                                             ; preds = %2368, %2371
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %118) #24
  %2375 = load i32*, i32** %113, align 8
  %2376 = icmp eq i32* %2375, null
  br i1 %2376, label %2380, label %2377

2377:                                             ; preds = %2374
  %2378 = ptrtoint i32* %2375 to i64
  store i64 %2378, i64* %117, align 8
  %2379 = bitcast i32* %2375 to i8*
  call void @_ZdlPv(i8* %2379) #29
  br label %2380

2380:                                             ; preds = %2374, %2377
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %112) #24
  %2381 = load i32*, i32** %107, align 8
  %2382 = icmp eq i32* %2381, null
  br i1 %2382, label %2386, label %2383

2383:                                             ; preds = %2380
  %2384 = ptrtoint i32* %2381 to i64
  store i64 %2384, i64* %111, align 8
  %2385 = bitcast i32* %2381 to i8*
  call void @_ZdlPv(i8* %2385) #29
  br label %2386

2386:                                             ; preds = %2380, %2383
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %106) #24
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %96) #24
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %88) #24
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %80) #24
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %72) #24
  %2387 = load %struct.NodeInfo.126*, %struct.NodeInfo.126** %29, align 8
  br label %2388

2388:                                             ; preds = %196, %2386
  %2389 = phi %struct.NodeInfo.126* [ %198, %196 ], [ %2387, %2386 ]
  %2390 = load %struct.NodeInfo.126*, %struct.NodeInfo.126** %28, align 8
  %2391 = icmp eq %struct.NodeInfo.126* %2390, %2389
  br i1 %2391, label %2392, label %196

2392:                                             ; preds = %2388
  %2393 = icmp eq %struct.NodeInfo.126* %2389, null
  br i1 %2393, label %2398, label %2394

2394:                                             ; preds = %2392
  %2395 = ptrtoint %struct.NodeInfo.126* %2389 to i64
  %2396 = bitcast %struct.NodeInfo.126** %29 to i64*
  store i64 %2395, i64* %2396, align 8
  %2397 = bitcast %struct.NodeInfo.126* %2389 to i8*
  call void @_ZdlPv(i8* %2397) #29
  br label %2398

2398:                                             ; preds = %2392, %2394
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %27) #24
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZNSt3__16vectorIZN3jxl6N_AVX313FindBestSplitERNS1_11TreeSamplesEfRKNS0_INS1_21ModularMultiplierInfoENS_9allocatorIS5_EEEENS_5arrayINSB_IjLm2EEELm2EEEfPNS0_INS1_20PropertyDecisionNodeENS6_ISE_EEEEE8CostInfoNS6_ISI_EEE6resizeEm(%"class.std::__1::vector.133"*, i64) unnamed_addr #8 align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.133", %"class.std::__1::vector.133"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %struct.CostInfo.135** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.133"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = sdiv exact i64 %8, 12
  %10 = icmp ult i64 %9, %1
  %11 = inttoptr i64 %7 to %struct.CostInfo.135*
  br i1 %10, label %12, label %87

12:                                               ; preds = %2
  %13 = sub i64 %1, %9
  %14 = getelementptr inbounds %"class.std::__1::vector.133", %"class.std::__1::vector.133"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %15 = bitcast %struct.CostInfo.135** %14 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = sub i64 %16, %5
  %18 = sdiv exact i64 %17, 12
  %19 = icmp ult i64 %18, %13
  br i1 %19, label %35, label %20

20:                                               ; preds = %12
  %21 = inttoptr i64 %5 to %struct.CostInfo.135*
  %22 = getelementptr inbounds %struct.CostInfo.135, %struct.CostInfo.135* %21, i64 %13
  %23 = icmp eq i64 %13, 0
  br i1 %23, label %33, label %26

24:                                               ; preds = %26
  %25 = ptrtoint %struct.CostInfo.135* %22 to i64
  br label %33

26:                                               ; preds = %20, %26
  %27 = phi %struct.CostInfo.135* [ %31, %26 ], [ %21, %20 ]
  %28 = getelementptr inbounds %struct.CostInfo.135, %struct.CostInfo.135* %27, i64 0, i32 2
  store i32 0, i32* %28, align 4
  %29 = getelementptr inbounds %struct.CostInfo.135, %struct.CostInfo.135* %27, i64 0, i32 0
  store float 0x47EFFFFFE0000000, float* %29, align 4
  %30 = getelementptr inbounds %struct.CostInfo.135, %struct.CostInfo.135* %27, i64 0, i32 1
  store float 0.000000e+00, float* %30, align 4
  %31 = getelementptr inbounds %struct.CostInfo.135, %struct.CostInfo.135* %27, i64 1
  %32 = icmp eq %struct.CostInfo.135* %31, %22
  br i1 %32, label %24, label %26

33:                                               ; preds = %24, %20
  %34 = phi i64 [ %25, %24 ], [ %5, %20 ]
  store i64 %34, i64* %4, align 8
  br label %91

35:                                               ; preds = %12
  %36 = icmp ugt i64 %1, 1537228672809129301
  br i1 %36, label %37, label %39

37:                                               ; preds = %35
  %38 = bitcast %"class.std::__1::vector.133"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %38) #28
  unreachable

39:                                               ; preds = %35
  %40 = sub i64 %16, %7
  %41 = sdiv exact i64 %40, 12
  %42 = icmp ult i64 %41, 768614336404564650
  br i1 %42, label %43, label %48

43:                                               ; preds = %39
  %44 = shl nsw i64 %41, 1
  %45 = icmp ult i64 %44, %1
  %46 = select i1 %45, i64 %1, i64 %44
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %53, label %48

48:                                               ; preds = %43, %39
  %49 = phi i64 [ %46, %43 ], [ 1537228672809129301, %39 ]
  %50 = mul i64 %49, 12
  %51 = tail call i8* @_Znwm(i64 %50) #29
  %52 = bitcast i8* %51 to %struct.CostInfo.135*
  br label %53

53:                                               ; preds = %48, %43
  %54 = phi i64 [ %49, %48 ], [ 0, %43 ]
  %55 = phi %struct.CostInfo.135* [ %52, %48 ], [ null, %43 ]
  %56 = getelementptr inbounds %struct.CostInfo.135, %struct.CostInfo.135* %55, i64 %9
  %57 = getelementptr inbounds %struct.CostInfo.135, %struct.CostInfo.135* %55, i64 %1
  br label %58

58:                                               ; preds = %58, %53
  %59 = phi %struct.CostInfo.135* [ %63, %58 ], [ %56, %53 ]
  %60 = getelementptr inbounds %struct.CostInfo.135, %struct.CostInfo.135* %59, i64 0, i32 2
  store i32 0, i32* %60, align 4
  %61 = getelementptr inbounds %struct.CostInfo.135, %struct.CostInfo.135* %59, i64 0, i32 0
  store float 0x47EFFFFFE0000000, float* %61, align 4
  %62 = getelementptr inbounds %struct.CostInfo.135, %struct.CostInfo.135* %59, i64 0, i32 1
  store float 0.000000e+00, float* %62, align 4
  %63 = getelementptr inbounds %struct.CostInfo.135, %struct.CostInfo.135* %59, i64 1
  %64 = icmp eq %struct.CostInfo.135* %57, %63
  br i1 %64, label %65, label %58

65:                                               ; preds = %58
  %66 = getelementptr inbounds %struct.CostInfo.135, %struct.CostInfo.135* %55, i64 %54
  %67 = ptrtoint %struct.CostInfo.135* %66 to i64
  %68 = ptrtoint %struct.CostInfo.135* %57 to i64
  %69 = getelementptr inbounds %"class.std::__1::vector.133", %"class.std::__1::vector.133"* %0, i64 0, i32 0, i32 0
  %70 = load %struct.CostInfo.135*, %struct.CostInfo.135** %69, align 8
  %71 = load i64, i64* %4, align 8
  %72 = ptrtoint %struct.CostInfo.135* %70 to i64
  %73 = sub i64 %71, %72
  %74 = sdiv exact i64 %73, -12
  %75 = getelementptr inbounds %struct.CostInfo.135, %struct.CostInfo.135* %56, i64 %74
  %76 = ptrtoint %struct.CostInfo.135* %75 to i64
  %77 = icmp sgt i64 %73, 0
  br i1 %77, label %78, label %82

78:                                               ; preds = %65
  %79 = bitcast %struct.CostInfo.135* %75 to i8*
  %80 = bitcast %struct.CostInfo.135* %70 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %79, i8* align 4 %80, i64 %73, i1 false) #24
  %81 = load %struct.CostInfo.135*, %struct.CostInfo.135** %69, align 8
  br label %82

82:                                               ; preds = %78, %65
  %83 = phi %struct.CostInfo.135* [ %70, %65 ], [ %81, %78 ]
  store i64 %76, i64* %6, align 8
  store i64 %68, i64* %4, align 8
  store i64 %67, i64* %15, align 8
  %84 = icmp eq %struct.CostInfo.135* %83, null
  br i1 %84, label %91, label %85

85:                                               ; preds = %82
  %86 = bitcast %struct.CostInfo.135* %83 to i8*
  tail call void @_ZdlPv(i8* %86) #29
  br label %91

87:                                               ; preds = %2
  %88 = icmp ugt i64 %9, %1
  br i1 %88, label %89, label %91

89:                                               ; preds = %87
  %90 = getelementptr inbounds %struct.CostInfo.135, %struct.CostInfo.135* %11, i64 %1
  store %struct.CostInfo.135* %90, %struct.CostInfo.135** %3, align 8
  br label %91

91:                                               ; preds = %85, %82, %33, %87, %89
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i64 @_ZN3jxl8N_SCALAR6PaddedEm(i64 returned) local_unnamed_addr #17 {
  ret i64 %0
}

; Function Attrs: nounwind ssp uwtable
define hidden float @_ZN3jxl8N_SCALAR12EstimateBitsEPKiPim(i32* readonly, i32*, i64) local_unnamed_addr #8 {
  %4 = getelementptr inbounds i32, i32* %0, i64 %2
  %5 = icmp eq i64 %2, 0
  br i1 %5, label %345, label %6

6:                                                ; preds = %3
  %7 = shl nsw i64 %2, 2
  %8 = add i64 %7, -4
  %9 = lshr exact i64 %8, 2
  %10 = add nuw nsw i64 %9, 1
  %11 = icmp ult i64 %10, 8
  br i1 %11, label %98, label %12

12:                                               ; preds = %6
  %13 = and i64 %10, 9223372036854775800
  %14 = getelementptr i32, i32* %0, i64 %13
  %15 = add nsw i64 %13, -8
  %16 = lshr exact i64 %15, 3
  %17 = add nuw nsw i64 %16, 1
  %18 = and i64 %17, 3
  %19 = icmp ult i64 %15, 24
  br i1 %19, label %65, label %20

20:                                               ; preds = %12
  %21 = sub nsw i64 %17, %18
  br label %22

22:                                               ; preds = %22, %20
  %23 = phi i64 [ 0, %20 ], [ %62, %22 ]
  %24 = phi <4 x i32> [ zeroinitializer, %20 ], [ %60, %22 ]
  %25 = phi <4 x i32> [ zeroinitializer, %20 ], [ %61, %22 ]
  %26 = phi i64 [ %21, %20 ], [ %63, %22 ]
  %27 = getelementptr i32, i32* %0, i64 %23
  %28 = bitcast i32* %27 to <4 x i32>*
  %29 = load <4 x i32>, <4 x i32>* %28, align 4
  %30 = getelementptr i32, i32* %27, i64 4
  %31 = bitcast i32* %30 to <4 x i32>*
  %32 = load <4 x i32>, <4 x i32>* %31, align 4
  %33 = add nsw <4 x i32> %29, %24
  %34 = add nsw <4 x i32> %32, %25
  %35 = or i64 %23, 8
  %36 = getelementptr i32, i32* %0, i64 %35
  %37 = bitcast i32* %36 to <4 x i32>*
  %38 = load <4 x i32>, <4 x i32>* %37, align 4
  %39 = getelementptr i32, i32* %36, i64 4
  %40 = bitcast i32* %39 to <4 x i32>*
  %41 = load <4 x i32>, <4 x i32>* %40, align 4
  %42 = add nsw <4 x i32> %38, %33
  %43 = add nsw <4 x i32> %41, %34
  %44 = or i64 %23, 16
  %45 = getelementptr i32, i32* %0, i64 %44
  %46 = bitcast i32* %45 to <4 x i32>*
  %47 = load <4 x i32>, <4 x i32>* %46, align 4
  %48 = getelementptr i32, i32* %45, i64 4
  %49 = bitcast i32* %48 to <4 x i32>*
  %50 = load <4 x i32>, <4 x i32>* %49, align 4
  %51 = add nsw <4 x i32> %47, %42
  %52 = add nsw <4 x i32> %50, %43
  %53 = or i64 %23, 24
  %54 = getelementptr i32, i32* %0, i64 %53
  %55 = bitcast i32* %54 to <4 x i32>*
  %56 = load <4 x i32>, <4 x i32>* %55, align 4
  %57 = getelementptr i32, i32* %54, i64 4
  %58 = bitcast i32* %57 to <4 x i32>*
  %59 = load <4 x i32>, <4 x i32>* %58, align 4
  %60 = add nsw <4 x i32> %56, %51
  %61 = add nsw <4 x i32> %59, %52
  %62 = add i64 %23, 32
  %63 = add i64 %26, -4
  %64 = icmp eq i64 %63, 0
  br i1 %64, label %65, label %22, !llvm.loop !262

65:                                               ; preds = %22, %12
  %66 = phi <4 x i32> [ undef, %12 ], [ %60, %22 ]
  %67 = phi <4 x i32> [ undef, %12 ], [ %61, %22 ]
  %68 = phi i64 [ 0, %12 ], [ %62, %22 ]
  %69 = phi <4 x i32> [ zeroinitializer, %12 ], [ %60, %22 ]
  %70 = phi <4 x i32> [ zeroinitializer, %12 ], [ %61, %22 ]
  %71 = icmp eq i64 %18, 0
  br i1 %71, label %88, label %72

72:                                               ; preds = %65, %72
  %73 = phi i64 [ %85, %72 ], [ %68, %65 ]
  %74 = phi <4 x i32> [ %83, %72 ], [ %69, %65 ]
  %75 = phi <4 x i32> [ %84, %72 ], [ %70, %65 ]
  %76 = phi i64 [ %86, %72 ], [ %18, %65 ]
  %77 = getelementptr i32, i32* %0, i64 %73
  %78 = bitcast i32* %77 to <4 x i32>*
  %79 = load <4 x i32>, <4 x i32>* %78, align 4
  %80 = getelementptr i32, i32* %77, i64 4
  %81 = bitcast i32* %80 to <4 x i32>*
  %82 = load <4 x i32>, <4 x i32>* %81, align 4
  %83 = add nsw <4 x i32> %79, %74
  %84 = add nsw <4 x i32> %82, %75
  %85 = add i64 %73, 8
  %86 = add i64 %76, -1
  %87 = icmp eq i64 %86, 0
  br i1 %87, label %88, label %72, !llvm.loop !263

88:                                               ; preds = %72, %65
  %89 = phi <4 x i32> [ %66, %65 ], [ %83, %72 ]
  %90 = phi <4 x i32> [ %67, %65 ], [ %84, %72 ]
  %91 = add <4 x i32> %90, %89
  %92 = shufflevector <4 x i32> %91, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %93 = add <4 x i32> %91, %92
  %94 = shufflevector <4 x i32> %93, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %95 = add <4 x i32> %93, %94
  %96 = extractelement <4 x i32> %95, i32 0
  %97 = icmp eq i64 %10, %13
  br i1 %97, label %108, label %98

98:                                               ; preds = %88, %6
  %99 = phi i32 [ 0, %6 ], [ %96, %88 ]
  %100 = phi i32* [ %0, %6 ], [ %14, %88 ]
  br label %101

101:                                              ; preds = %98, %101
  %102 = phi i32 [ %105, %101 ], [ %99, %98 ]
  %103 = phi i32* [ %106, %101 ], [ %100, %98 ]
  %104 = load i32, i32* %103, align 4
  %105 = add nsw i32 %104, %102
  %106 = getelementptr inbounds i32, i32* %103, i64 1
  %107 = icmp eq i32* %106, %4
  br i1 %107, label %108, label %101, !llvm.loop !264

108:                                              ; preds = %101, %88
  %109 = phi i32 [ %96, %88 ], [ %105, %101 ]
  %110 = add i32 %109, 4095
  %111 = ashr i32 %110, 12
  br i1 %5, label %345, label %112

112:                                              ; preds = %108
  %113 = icmp ult i64 %2, 8
  br i1 %113, label %114, label %132

114:                                              ; preds = %215, %132, %112
  %115 = phi i64 [ 0, %132 ], [ 0, %112 ], [ %138, %215 ]
  %116 = xor i64 %115, -1
  %117 = and i64 %2, 1
  %118 = icmp eq i64 %117, 0
  br i1 %118, label %128, label %119

119:                                              ; preds = %114
  %120 = getelementptr inbounds i32, i32* %0, i64 %115
  %121 = load i32, i32* %120, align 4, !alias.scope !265
  %122 = icmp eq i32 %121, 0
  %123 = icmp slt i32 %121, %111
  %124 = select i1 %123, i32 %111, i32 %121
  %125 = select i1 %122, i32 0, i32 %124
  %126 = getelementptr inbounds i32, i32* %1, i64 %115
  store i32 %125, i32* %126, align 4, !alias.scope !270
  %127 = or i64 %115, 1
  br label %128

128:                                              ; preds = %114, %119
  %129 = phi i64 [ %115, %114 ], [ %127, %119 ]
  %130 = sub i64 0, %2
  %131 = icmp eq i64 %116, %130
  br i1 %131, label %217, label %326

132:                                              ; preds = %112
  %133 = getelementptr i32, i32* %1, i64 %2
  %134 = icmp ugt i32* %4, %1
  %135 = icmp ugt i32* %133, %0
  %136 = and i1 %134, %135
  br i1 %136, label %114, label %137

137:                                              ; preds = %132
  %138 = and i64 %2, -8
  %139 = insertelement <4 x i32> undef, i32 %111, i32 0
  %140 = shufflevector <4 x i32> %139, <4 x i32> undef, <4 x i32> zeroinitializer
  %141 = insertelement <4 x i32> undef, i32 %111, i32 0
  %142 = shufflevector <4 x i32> %141, <4 x i32> undef, <4 x i32> zeroinitializer
  %143 = add i64 %138, -8
  %144 = lshr exact i64 %143, 3
  %145 = add nuw nsw i64 %144, 1
  %146 = and i64 %145, 1
  %147 = icmp eq i64 %143, 0
  br i1 %147, label %193, label %148

148:                                              ; preds = %137
  %149 = sub nuw nsw i64 %145, %146
  br label %150

150:                                              ; preds = %150, %148
  %151 = phi i64 [ 0, %148 ], [ %190, %150 ]
  %152 = phi i64 [ %149, %148 ], [ %191, %150 ]
  %153 = getelementptr inbounds i32, i32* %0, i64 %151
  %154 = bitcast i32* %153 to <4 x i32>*
  %155 = load <4 x i32>, <4 x i32>* %154, align 4, !alias.scope !275
  %156 = getelementptr inbounds i32, i32* %153, i64 4
  %157 = bitcast i32* %156 to <4 x i32>*
  %158 = load <4 x i32>, <4 x i32>* %157, align 4, !alias.scope !275
  %159 = icmp eq <4 x i32> %155, zeroinitializer
  %160 = icmp eq <4 x i32> %158, zeroinitializer
  %161 = icmp slt <4 x i32> %155, %140
  %162 = icmp slt <4 x i32> %158, %142
  %163 = select <4 x i1> %161, <4 x i32> %140, <4 x i32> %155
  %164 = select <4 x i1> %162, <4 x i32> %142, <4 x i32> %158
  %165 = select <4 x i1> %159, <4 x i32> zeroinitializer, <4 x i32> %163
  %166 = select <4 x i1> %160, <4 x i32> zeroinitializer, <4 x i32> %164
  %167 = getelementptr inbounds i32, i32* %1, i64 %151
  %168 = bitcast i32* %167 to <4 x i32>*
  store <4 x i32> %165, <4 x i32>* %168, align 4, !alias.scope !278, !noalias !280
  %169 = getelementptr inbounds i32, i32* %167, i64 4
  %170 = bitcast i32* %169 to <4 x i32>*
  store <4 x i32> %166, <4 x i32>* %170, align 4, !alias.scope !278, !noalias !280
  %171 = or i64 %151, 8
  %172 = getelementptr inbounds i32, i32* %0, i64 %171
  %173 = bitcast i32* %172 to <4 x i32>*
  %174 = load <4 x i32>, <4 x i32>* %173, align 4, !alias.scope !275
  %175 = getelementptr inbounds i32, i32* %172, i64 4
  %176 = bitcast i32* %175 to <4 x i32>*
  %177 = load <4 x i32>, <4 x i32>* %176, align 4, !alias.scope !275
  %178 = icmp eq <4 x i32> %174, zeroinitializer
  %179 = icmp eq <4 x i32> %177, zeroinitializer
  %180 = icmp slt <4 x i32> %174, %140
  %181 = icmp slt <4 x i32> %177, %142
  %182 = select <4 x i1> %180, <4 x i32> %140, <4 x i32> %174
  %183 = select <4 x i1> %181, <4 x i32> %142, <4 x i32> %177
  %184 = select <4 x i1> %178, <4 x i32> zeroinitializer, <4 x i32> %182
  %185 = select <4 x i1> %179, <4 x i32> zeroinitializer, <4 x i32> %183
  %186 = getelementptr inbounds i32, i32* %1, i64 %171
  %187 = bitcast i32* %186 to <4 x i32>*
  store <4 x i32> %184, <4 x i32>* %187, align 4, !alias.scope !278, !noalias !280
  %188 = getelementptr inbounds i32, i32* %186, i64 4
  %189 = bitcast i32* %188 to <4 x i32>*
  store <4 x i32> %185, <4 x i32>* %189, align 4, !alias.scope !278, !noalias !280
  %190 = add i64 %151, 16
  %191 = add i64 %152, -2
  %192 = icmp eq i64 %191, 0
  br i1 %192, label %193, label %150, !llvm.loop !281

193:                                              ; preds = %150, %137
  %194 = phi i64 [ 0, %137 ], [ %190, %150 ]
  %195 = icmp eq i64 %146, 0
  br i1 %195, label %215, label %196

196:                                              ; preds = %193
  %197 = getelementptr inbounds i32, i32* %0, i64 %194
  %198 = bitcast i32* %197 to <4 x i32>*
  %199 = load <4 x i32>, <4 x i32>* %198, align 4, !alias.scope !275
  %200 = getelementptr inbounds i32, i32* %197, i64 4
  %201 = bitcast i32* %200 to <4 x i32>*
  %202 = load <4 x i32>, <4 x i32>* %201, align 4, !alias.scope !275
  %203 = icmp eq <4 x i32> %199, zeroinitializer
  %204 = icmp eq <4 x i32> %202, zeroinitializer
  %205 = icmp slt <4 x i32> %199, %140
  %206 = icmp slt <4 x i32> %202, %142
  %207 = select <4 x i1> %205, <4 x i32> %140, <4 x i32> %199
  %208 = select <4 x i1> %206, <4 x i32> %142, <4 x i32> %202
  %209 = select <4 x i1> %203, <4 x i32> zeroinitializer, <4 x i32> %207
  %210 = select <4 x i1> %204, <4 x i32> zeroinitializer, <4 x i32> %208
  %211 = getelementptr inbounds i32, i32* %1, i64 %194
  %212 = bitcast i32* %211 to <4 x i32>*
  store <4 x i32> %209, <4 x i32>* %212, align 4, !alias.scope !278, !noalias !280
  %213 = getelementptr inbounds i32, i32* %211, i64 4
  %214 = bitcast i32* %213 to <4 x i32>*
  store <4 x i32> %210, <4 x i32>* %214, align 4, !alias.scope !278, !noalias !280
  br label %215

215:                                              ; preds = %193, %196
  %216 = icmp eq i64 %138, %2
  br i1 %216, label %217, label %114

217:                                              ; preds = %128, %326, %215
  %218 = getelementptr inbounds i32, i32* %1, i64 %2
  br i1 %5, label %345, label %219

219:                                              ; preds = %217
  %220 = shl nsw i64 %2, 2
  %221 = add i64 %220, -4
  %222 = lshr exact i64 %221, 2
  %223 = add nuw nsw i64 %222, 1
  %224 = icmp ult i64 %223, 8
  br i1 %224, label %311, label %225

225:                                              ; preds = %219
  %226 = and i64 %223, 9223372036854775800
  %227 = getelementptr i32, i32* %1, i64 %226
  %228 = add nsw i64 %226, -8
  %229 = lshr exact i64 %228, 3
  %230 = add nuw nsw i64 %229, 1
  %231 = and i64 %230, 3
  %232 = icmp ult i64 %228, 24
  br i1 %232, label %278, label %233

233:                                              ; preds = %225
  %234 = sub nsw i64 %230, %231
  br label %235

235:                                              ; preds = %235, %233
  %236 = phi i64 [ 0, %233 ], [ %275, %235 ]
  %237 = phi <4 x i32> [ zeroinitializer, %233 ], [ %273, %235 ]
  %238 = phi <4 x i32> [ zeroinitializer, %233 ], [ %274, %235 ]
  %239 = phi i64 [ %234, %233 ], [ %276, %235 ]
  %240 = getelementptr i32, i32* %1, i64 %236
  %241 = bitcast i32* %240 to <4 x i32>*
  %242 = load <4 x i32>, <4 x i32>* %241, align 4
  %243 = getelementptr i32, i32* %240, i64 4
  %244 = bitcast i32* %243 to <4 x i32>*
  %245 = load <4 x i32>, <4 x i32>* %244, align 4
  %246 = add nsw <4 x i32> %242, %237
  %247 = add nsw <4 x i32> %245, %238
  %248 = or i64 %236, 8
  %249 = getelementptr i32, i32* %1, i64 %248
  %250 = bitcast i32* %249 to <4 x i32>*
  %251 = load <4 x i32>, <4 x i32>* %250, align 4
  %252 = getelementptr i32, i32* %249, i64 4
  %253 = bitcast i32* %252 to <4 x i32>*
  %254 = load <4 x i32>, <4 x i32>* %253, align 4
  %255 = add nsw <4 x i32> %251, %246
  %256 = add nsw <4 x i32> %254, %247
  %257 = or i64 %236, 16
  %258 = getelementptr i32, i32* %1, i64 %257
  %259 = bitcast i32* %258 to <4 x i32>*
  %260 = load <4 x i32>, <4 x i32>* %259, align 4
  %261 = getelementptr i32, i32* %258, i64 4
  %262 = bitcast i32* %261 to <4 x i32>*
  %263 = load <4 x i32>, <4 x i32>* %262, align 4
  %264 = add nsw <4 x i32> %260, %255
  %265 = add nsw <4 x i32> %263, %256
  %266 = or i64 %236, 24
  %267 = getelementptr i32, i32* %1, i64 %266
  %268 = bitcast i32* %267 to <4 x i32>*
  %269 = load <4 x i32>, <4 x i32>* %268, align 4
  %270 = getelementptr i32, i32* %267, i64 4
  %271 = bitcast i32* %270 to <4 x i32>*
  %272 = load <4 x i32>, <4 x i32>* %271, align 4
  %273 = add nsw <4 x i32> %269, %264
  %274 = add nsw <4 x i32> %272, %265
  %275 = add i64 %236, 32
  %276 = add i64 %239, -4
  %277 = icmp eq i64 %276, 0
  br i1 %277, label %278, label %235, !llvm.loop !282

278:                                              ; preds = %235, %225
  %279 = phi <4 x i32> [ undef, %225 ], [ %273, %235 ]
  %280 = phi <4 x i32> [ undef, %225 ], [ %274, %235 ]
  %281 = phi i64 [ 0, %225 ], [ %275, %235 ]
  %282 = phi <4 x i32> [ zeroinitializer, %225 ], [ %273, %235 ]
  %283 = phi <4 x i32> [ zeroinitializer, %225 ], [ %274, %235 ]
  %284 = icmp eq i64 %231, 0
  br i1 %284, label %301, label %285

285:                                              ; preds = %278, %285
  %286 = phi i64 [ %298, %285 ], [ %281, %278 ]
  %287 = phi <4 x i32> [ %296, %285 ], [ %282, %278 ]
  %288 = phi <4 x i32> [ %297, %285 ], [ %283, %278 ]
  %289 = phi i64 [ %299, %285 ], [ %231, %278 ]
  %290 = getelementptr i32, i32* %1, i64 %286
  %291 = bitcast i32* %290 to <4 x i32>*
  %292 = load <4 x i32>, <4 x i32>* %291, align 4
  %293 = getelementptr i32, i32* %290, i64 4
  %294 = bitcast i32* %293 to <4 x i32>*
  %295 = load <4 x i32>, <4 x i32>* %294, align 4
  %296 = add nsw <4 x i32> %292, %287
  %297 = add nsw <4 x i32> %295, %288
  %298 = add i64 %286, 8
  %299 = add i64 %289, -1
  %300 = icmp eq i64 %299, 0
  br i1 %300, label %301, label %285, !llvm.loop !283

301:                                              ; preds = %285, %278
  %302 = phi <4 x i32> [ %279, %278 ], [ %296, %285 ]
  %303 = phi <4 x i32> [ %280, %278 ], [ %297, %285 ]
  %304 = add <4 x i32> %303, %302
  %305 = shufflevector <4 x i32> %304, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %306 = add <4 x i32> %304, %305
  %307 = shufflevector <4 x i32> %306, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %308 = add <4 x i32> %306, %307
  %309 = extractelement <4 x i32> %308, i32 0
  %310 = icmp eq i64 %223, %226
  br i1 %310, label %321, label %311

311:                                              ; preds = %301, %219
  %312 = phi i32 [ 0, %219 ], [ %309, %301 ]
  %313 = phi i32* [ %1, %219 ], [ %227, %301 ]
  br label %314

314:                                              ; preds = %311, %314
  %315 = phi i32 [ %318, %314 ], [ %312, %311 ]
  %316 = phi i32* [ %319, %314 ], [ %313, %311 ]
  %317 = load i32, i32* %316, align 4
  %318 = add nsw i32 %317, %315
  %319 = getelementptr inbounds i32, i32* %316, i64 1
  %320 = icmp eq i32* %319, %218
  br i1 %320, label %321, label %314, !llvm.loop !284

321:                                              ; preds = %314, %301
  %322 = phi i32 [ %309, %301 ], [ %318, %314 ]
  %323 = sext i32 %322 to i64
  %324 = uitofp i64 %323 to float
  %325 = fdiv float 1.000000e+00, %324
  br i1 %5, label %345, label %347

326:                                              ; preds = %128, %326
  %327 = phi i64 [ %343, %326 ], [ %129, %128 ]
  %328 = getelementptr inbounds i32, i32* %0, i64 %327
  %329 = load i32, i32* %328, align 4, !alias.scope !265
  %330 = icmp eq i32 %329, 0
  %331 = icmp slt i32 %329, %111
  %332 = select i1 %331, i32 %111, i32 %329
  %333 = select i1 %330, i32 0, i32 %332
  %334 = getelementptr inbounds i32, i32* %1, i64 %327
  store i32 %333, i32* %334, align 4, !alias.scope !270
  %335 = add nuw i64 %327, 1
  %336 = getelementptr inbounds i32, i32* %0, i64 %335
  %337 = load i32, i32* %336, align 4, !alias.scope !265
  %338 = icmp eq i32 %337, 0
  %339 = icmp slt i32 %337, %111
  %340 = select i1 %339, i32 %111, i32 %337
  %341 = select i1 %338, i32 0, i32 %340
  %342 = getelementptr inbounds i32, i32* %1, i64 %335
  store i32 %341, i32* %342, align 4, !alias.scope !270
  %343 = add nuw i64 %327, 2
  %344 = icmp eq i64 %343, %2
  br i1 %344, label %217, label %326, !llvm.loop !285

345:                                              ; preds = %347, %3, %108, %217, %321
  %346 = phi float [ 0.000000e+00, %321 ], [ 0.000000e+00, %217 ], [ 0.000000e+00, %108 ], [ 0.000000e+00, %3 ], [ %383, %347 ]
  ret float %346

347:                                              ; preds = %321, %347
  %348 = phi i64 [ %384, %347 ], [ 0, %321 ]
  %349 = phi float [ %383, %347 ], [ 0.000000e+00, %321 ]
  %350 = getelementptr inbounds i32, i32* %0, i64 %348
  %351 = load i32, i32* %350, align 4, !alias.scope !286
  %352 = sitofp i32 %351 to float
  %353 = getelementptr inbounds i32, i32* %1, i64 %348
  %354 = load i32, i32* %353, align 4, !alias.scope !291
  %355 = sitofp i32 %354 to float
  %356 = fmul float %325, %355
  %357 = icmp eq i32 %354, %322
  %358 = bitcast float %356 to i32
  %359 = add i32 %358, -1059760811
  %360 = lshr i32 %359, 23
  %361 = ashr i32 %359, 31
  %362 = shl nsw i32 %361, 8
  %363 = or i32 %362, %360
  %364 = shl i32 %363, 23
  %365 = sub i32 %358, %364
  %366 = bitcast i32 %365 to float
  %367 = sitofp i32 %363 to float
  %368 = fadd float %366, -1.000000e+00
  fence acq_rel
  %369 = insertelement <2 x float> undef, float %368, i32 0
  %370 = shufflevector <2 x float> %369, <2 x float> undef, <2 x i32> zeroinitializer
  %371 = fmul <2 x float> %370, <float 0x3FE7C238E0000000, float 0x3FC648B180000000>
  %372 = fadd <2 x float> %371, <float 0x3FF6DC0560000000, float 0x3FF0279DA0000000>
  fence acq_rel
  %373 = fmul <2 x float> %370, %372
  %374 = fadd <2 x float> %373, <float 0xBEBF0B5600000000, float 0x3FEFB0C4A0000000>
  fence acq_rel
  %375 = extractelement <2 x float> %374, i32 0
  %376 = extractelement <2 x float> %374, i32 1
  %377 = fdiv float %375, %376
  %378 = fadd float %377, %367
  %379 = icmp eq i32 %351, 0
  %380 = select i1 %357, float 0.000000e+00, float %378
  %381 = fmul float %380, %352
  %382 = select i1 %379, float 0.000000e+00, float %381
  %383 = fsub float %349, %382
  %384 = add nuw i64 %348, 1
  %385 = icmp eq i64 %384, %2
  br i1 %385, label %345, label %347
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl8N_SCALAR13MakeSplitNodeEmiiNS_9PredictorElS1_lPNSt3__16vectorINS_20PropertyDecisionNodeENS2_9allocatorIS4_EEEE(i64, i32, i32, i32, i64, i32, i64, %"class.std::__1::vector"*) local_unnamed_addr #8 {
  %9 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %7, i64 0, i32 0, i32 1
  %10 = bitcast %"struct.jxl::PropertyDecisionNode"** %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = bitcast %"class.std::__1::vector"* %7 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = sub i64 %11, %13
  %15 = sdiv exact i64 %14, 40
  %16 = trunc i64 %15 to i32
  %17 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %7, i64 0, i32 0, i32 0
  %18 = inttoptr i64 %13 to %"struct.jxl::PropertyDecisionNode"*
  %19 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %18, i64 %0, i32 3
  store i32 %16, i32* %19, align 8
  %20 = load i64, i64* %10, align 8
  %21 = load i64, i64* %12, align 8
  %22 = sub i64 %20, %21
  %23 = sdiv exact i64 %22, 40
  %24 = trunc i64 %23 to i32
  %25 = add i32 %24, 1
  %26 = inttoptr i64 %21 to %"struct.jxl::PropertyDecisionNode"*
  %27 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %26, i64 %0, i32 4
  store i32 %25, i32* %27, align 4
  %28 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %17, align 8
  %29 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %28, i64 %0, i32 0
  store i32 %2, i32* %29, align 8
  %30 = trunc i32 %1 to i16
  %31 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %17, align 8
  %32 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %31, i64 %0, i32 1
  store i16 %30, i16* %32, align 4
  tail call void @_ZNSt3__16vectorIN3jxl20PropertyDecisionNodeENS_9allocatorIS2_EEE12emplace_backIJEEEvDpOT_(%"class.std::__1::vector"* %7)
  %33 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %9, align 8
  %34 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %33, i64 -1, i32 1
  store i16 -1, i16* %34, align 4
  %35 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %9, align 8
  %36 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %35, i64 -1, i32 5
  store i32 %5, i32* %36, align 8
  %37 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %9, align 8
  %38 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %37, i64 -1, i32 7
  store i64 %6, i64* %38, align 8
  %39 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %9, align 8
  %40 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %39, i64 -1, i32 8
  store i32 1, i32* %40, align 8
  tail call void @_ZNSt3__16vectorIN3jxl20PropertyDecisionNodeENS_9allocatorIS2_EEE12emplace_backIJEEEvDpOT_(%"class.std::__1::vector"* %7)
  %41 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %9, align 8
  %42 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %41, i64 -1, i32 1
  store i16 -1, i16* %42, align 4
  %43 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %9, align 8
  %44 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %43, i64 -1, i32 5
  store i32 %3, i32* %44, align 8
  %45 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %9, align 8
  %46 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %45, i64 -1, i32 7
  store i64 %4, i64* %46, align 8
  %47 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %9, align 8
  %48 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %47, i64 -1, i32 8
  store i32 1, i32* %48, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden i32 @_ZN3jxl8N_SCALAR13BoxIntersectsENSt3__15arrayINS2_IjLm2EEELm2EEES4_RjS5_(i64, i64, i64, i64, i32* nocapture dereferenceable(4), i32* nocapture dereferenceable(4)) local_unnamed_addr #18 {
  %7 = trunc i64 %2 to i32
  %8 = lshr i64 %0, 32
  %9 = trunc i64 %8 to i32
  %10 = icmp ult i32 %7, %9
  %11 = lshr i64 %2, 32
  %12 = trunc i64 %11 to i32
  %13 = trunc i64 %0 to i32
  %14 = trunc i64 %3 to i32
  %15 = lshr i64 %1, 32
  %16 = trunc i64 %15 to i32
  %17 = lshr i64 %3, 32
  %18 = trunc i64 %17 to i32
  %19 = trunc i64 %1 to i32
  %20 = icmp ugt i32 %12, %13
  %21 = and i1 %10, %20
  br i1 %21, label %22, label %34

22:                                               ; preds = %6
  %23 = icmp ugt i32 %7, %13
  br i1 %23, label %26, label %24

24:                                               ; preds = %22
  %25 = icmp ult i32 %12, %9
  br i1 %25, label %26, label %29

26:                                               ; preds = %24, %22
  %27 = phi i32 [ %7, %22 ], [ %12, %24 ]
  store i32 0, i32* %4, align 4
  %28 = add i32 %27, -1
  store i32 %28, i32* %5, align 4
  br label %29

29:                                               ; preds = %26, %24
  %30 = phi i8 [ 0, %24 ], [ 1, %26 ]
  %31 = icmp ult i32 %14, %16
  %32 = icmp ugt i32 %18, %19
  %33 = and i1 %31, %32
  br i1 %33, label %36, label %34

34:                                               ; preds = %6, %29, %43
  %35 = phi i32 [ %47, %43 ], [ 0, %29 ], [ 0, %6 ]
  ret i32 %35

36:                                               ; preds = %29
  %37 = icmp ugt i32 %14, %19
  br i1 %37, label %40, label %38

38:                                               ; preds = %36
  %39 = icmp ult i32 %18, %16
  br i1 %39, label %40, label %43

40:                                               ; preds = %36, %38
  %41 = phi i32 [ %18, %38 ], [ %14, %36 ]
  store i32 1, i32* %4, align 4
  %42 = add i32 %41, -1
  store i32 %42, i32* %5, align 4
  br label %43

43:                                               ; preds = %40, %38
  %44 = phi i8 [ %30, %38 ], [ 1, %40 ]
  %45 = and i8 %44, 1
  %46 = icmp eq i8 %45, 0
  %47 = select i1 %46, i32 2, i32 1
  br label %34
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl8N_SCALAR16SplitTreeSamplesERNS_11TreeSamplesEmmmm(%"struct.jxl::TreeSamples"* dereferenceable(200), i64, i64, i64, i64) local_unnamed_addr #8 {
  %6 = add i64 %1, 1
  %7 = icmp ult i64 %6, %3
  br i1 %7, label %8, label %153

8:                                                ; preds = %5
  %9 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 0, i32 0, i32 0
  %10 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 0, i32 0, i32 1
  %11 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 2, i32 0, i32 0
  %12 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 2, i32 0, i32 1
  %13 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 1, i32 0, i32 0
  br label %14

14:                                               ; preds = %8, %148
  %15 = phi i64 [ %6, %8 ], [ %151, %148 ]
  %16 = phi i64 [ %1, %8 ], [ %150, %148 ]
  %17 = phi i64 [ %3, %8 ], [ %149, %148 ]
  %18 = phi i64 [ -7723592293110705685, %8 ], [ %19, %148 ]
  %19 = phi i64 [ -4658895280553007687, %8 ], [ %32, %148 ]
  %20 = icmp ugt i64 %17, %16
  br i1 %20, label %24, label %21

21:                                               ; preds = %14
  %22 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.1, i64 0, i64 0), i32 154, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i64 0, i64 0)) #24
  %23 = tail call zeroext i1 @_ZN3jxl5AbortEv() #28
  unreachable

24:                                               ; preds = %14
  %25 = add i64 %18, %19
  %26 = shl i64 %18, 23
  %27 = xor i64 %26, %18
  %28 = lshr i64 %27, 18
  %29 = lshr i64 %19, 5
  %30 = xor i64 %29, %19
  %31 = xor i64 %30, %27
  %32 = xor i64 %31, %28
  %33 = sub i64 %17, %16
  %34 = urem i64 %25, %33
  %35 = add i64 %34, %16
  %36 = icmp eq i64 %34, 0
  br i1 %36, label %73, label %37

37:                                               ; preds = %24
  %38 = load %"class.std::__1::vector.8"*, %"class.std::__1::vector.8"** %9, align 8
  %39 = load %"class.std::__1::vector.8"*, %"class.std::__1::vector.8"** %10, align 8
  %40 = icmp eq %"class.std::__1::vector.8"* %38, %39
  br i1 %40, label %41, label %45

41:                                               ; preds = %45, %37
  %42 = load %"class.std::__1::vector.29"*, %"class.std::__1::vector.29"** %11, align 8
  %43 = load %"class.std::__1::vector.29"*, %"class.std::__1::vector.29"** %12, align 8
  %44 = icmp eq %"class.std::__1::vector.29"* %42, %43
  br i1 %44, label %57, label %63

45:                                               ; preds = %37, %45
  %46 = phi %"class.std::__1::vector.8"* [ %55, %45 ], [ %38, %37 ]
  %47 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %46, i64 0, i32 0, i32 0
  %48 = load %"struct.jxl::TreeSamples::ResidualToken"*, %"struct.jxl::TreeSamples::ResidualToken"** %47, align 8
  %49 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %48, i64 %16
  %50 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %48, i64 %35
  %51 = bitcast %"struct.jxl::TreeSamples::ResidualToken"* %49 to i16*
  %52 = load i16, i16* %51, align 1
  %53 = bitcast %"struct.jxl::TreeSamples::ResidualToken"* %50 to i16*
  %54 = load i16, i16* %53, align 1
  store i16 %54, i16* %51, align 1
  store i16 %52, i16* %53, align 1
  %55 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %46, i64 1
  %56 = icmp eq %"class.std::__1::vector.8"* %55, %39
  br i1 %56, label %41, label %45

57:                                               ; preds = %63, %41
  %58 = load i16*, i16** %13, align 8
  %59 = getelementptr inbounds i16, i16* %58, i64 %16
  %60 = getelementptr inbounds i16, i16* %58, i64 %35
  %61 = load i16, i16* %59, align 2
  %62 = load i16, i16* %60, align 2
  store i16 %62, i16* %59, align 2
  store i16 %61, i16* %60, align 2
  br label %73

63:                                               ; preds = %41, %63
  %64 = phi %"class.std::__1::vector.29"* [ %71, %63 ], [ %42, %41 ]
  %65 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %64, i64 0, i32 0, i32 0
  %66 = load i8*, i8** %65, align 8
  %67 = getelementptr inbounds i8, i8* %66, i64 %16
  %68 = getelementptr inbounds i8, i8* %66, i64 %35
  %69 = load i8, i8* %67, align 1
  %70 = load i8, i8* %68, align 1
  store i8 %70, i8* %67, align 1
  store i8 %69, i8* %68, align 1
  %71 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %64, i64 1
  %72 = icmp eq %"class.std::__1::vector.29"* %71, %43
  br i1 %72, label %57, label %63

73:                                               ; preds = %24, %57
  %74 = icmp ult i64 %15, %17
  br i1 %74, label %79, label %75

75:                                               ; preds = %141, %73
  %76 = phi i64 [ %16, %73 ], [ %142, %141 ]
  %77 = phi i64 [ %15, %73 ], [ %143, %141 ]
  %78 = icmp ugt i64 %76, %2
  br i1 %78, label %148, label %146

79:                                               ; preds = %73, %141
  %80 = phi i64 [ %144, %141 ], [ %15, %73 ]
  %81 = phi i64 [ %143, %141 ], [ %15, %73 ]
  %82 = phi i64 [ %142, %141 ], [ %16, %73 ]
  %83 = load %"class.std::__1::vector.29"*, %"class.std::__1::vector.29"** %11, align 8
  %84 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %83, i64 %4, i32 0, i32 0
  %85 = load i8*, i8** %84, align 8
  %86 = getelementptr inbounds i8, i8* %85, i64 %80
  %87 = load i8, i8* %86, align 1
  %88 = zext i8 %87 to i32
  %89 = getelementptr inbounds i8, i8* %85, i64 %82
  %90 = load i8, i8* %89, align 1
  %91 = zext i8 %90 to i32
  %92 = sub nsw i32 %88, %91
  %93 = icmp slt i32 %92, 0
  br i1 %93, label %94, label %97

94:                                               ; preds = %79
  tail call void @_ZN3jxl11TreeSamples12ThreeShuffleEmmm(%"struct.jxl::TreeSamples"* %0, i64 %82, i64 %81, i64 %80)
  %95 = add i64 %82, 1
  %96 = add i64 %81, 1
  br label %141

97:                                               ; preds = %79
  %98 = icmp eq i32 %92, 0
  br i1 %98, label %99, label %141

99:                                               ; preds = %97
  %100 = icmp eq i64 %81, %80
  br i1 %100, label %139, label %101

101:                                              ; preds = %99
  %102 = load %"class.std::__1::vector.8"*, %"class.std::__1::vector.8"** %9, align 8
  %103 = load %"class.std::__1::vector.8"*, %"class.std::__1::vector.8"** %10, align 8
  %104 = icmp eq %"class.std::__1::vector.8"* %102, %103
  br i1 %104, label %107, label %111

105:                                              ; preds = %111
  %106 = load %"class.std::__1::vector.29"*, %"class.std::__1::vector.29"** %11, align 8
  br label %107

107:                                              ; preds = %105, %101
  %108 = phi %"class.std::__1::vector.29"* [ %106, %105 ], [ %83, %101 ]
  %109 = load %"class.std::__1::vector.29"*, %"class.std::__1::vector.29"** %12, align 8
  %110 = icmp eq %"class.std::__1::vector.29"* %108, %109
  br i1 %110, label %123, label %129

111:                                              ; preds = %101, %111
  %112 = phi %"class.std::__1::vector.8"* [ %121, %111 ], [ %102, %101 ]
  %113 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %112, i64 0, i32 0, i32 0
  %114 = load %"struct.jxl::TreeSamples::ResidualToken"*, %"struct.jxl::TreeSamples::ResidualToken"** %113, align 8
  %115 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %114, i64 %81
  %116 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %114, i64 %80
  %117 = bitcast %"struct.jxl::TreeSamples::ResidualToken"* %115 to i16*
  %118 = load i16, i16* %117, align 1
  %119 = bitcast %"struct.jxl::TreeSamples::ResidualToken"* %116 to i16*
  %120 = load i16, i16* %119, align 1
  store i16 %120, i16* %117, align 1
  store i16 %118, i16* %119, align 1
  %121 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %112, i64 1
  %122 = icmp eq %"class.std::__1::vector.8"* %121, %103
  br i1 %122, label %105, label %111

123:                                              ; preds = %129, %107
  %124 = load i16*, i16** %13, align 8
  %125 = getelementptr inbounds i16, i16* %124, i64 %81
  %126 = getelementptr inbounds i16, i16* %124, i64 %80
  %127 = load i16, i16* %125, align 2
  %128 = load i16, i16* %126, align 2
  store i16 %128, i16* %125, align 2
  store i16 %127, i16* %126, align 2
  br label %139

129:                                              ; preds = %107, %129
  %130 = phi %"class.std::__1::vector.29"* [ %137, %129 ], [ %108, %107 ]
  %131 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %130, i64 0, i32 0, i32 0
  %132 = load i8*, i8** %131, align 8
  %133 = getelementptr inbounds i8, i8* %132, i64 %81
  %134 = getelementptr inbounds i8, i8* %132, i64 %80
  %135 = load i8, i8* %133, align 1
  %136 = load i8, i8* %134, align 1
  store i8 %136, i8* %133, align 1
  store i8 %135, i8* %134, align 1
  %137 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %130, i64 1
  %138 = icmp eq %"class.std::__1::vector.29"* %137, %109
  br i1 %138, label %123, label %129

139:                                              ; preds = %99, %123
  %140 = add i64 %81, 1
  br label %141

141:                                              ; preds = %97, %139, %94
  %142 = phi i64 [ %95, %94 ], [ %82, %139 ], [ %82, %97 ]
  %143 = phi i64 [ %96, %94 ], [ %140, %139 ], [ %81, %97 ]
  %144 = add nuw i64 %80, 1
  %145 = icmp eq i64 %144, %17
  br i1 %145, label %75, label %79

146:                                              ; preds = %75
  %147 = icmp ult i64 %77, %2
  br i1 %147, label %148, label %153

148:                                              ; preds = %75, %146
  %149 = phi i64 [ %76, %75 ], [ %17, %146 ]
  %150 = phi i64 [ %16, %75 ], [ %77, %146 ]
  %151 = add i64 %150, 1
  %152 = icmp ugt i64 %149, %151
  br i1 %152, label %14, label %153

153:                                              ; preds = %148, %146, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl8N_SCALAR13FindBestSplitERNS_11TreeSamplesEfRKNSt3__16vectorINS_21ModularMultiplierInfoENS3_9allocatorIS5_EEEENS3_5arrayINSB_IjLm2EEELm2EEEfPNS4_INS_20PropertyDecisionNodeENS6_ISE_EEEE(%"struct.jxl::TreeSamples"* dereferenceable(200), float, %"class.std::__1::vector.69"* nocapture readonly dereferenceable(24), i64, i64, float, %"class.std::__1::vector"*) #8 {
  %8 = alloca %"class.std::__1::vector.146", align 8
  %9 = alloca %struct.SplitInfo.154, align 8
  %10 = alloca %struct.SplitInfo.154, align 8
  %11 = alloca %struct.SplitInfo.154, align 8
  %12 = alloca %struct.SplitInfo.154, align 8
  %13 = alloca %"class.std::__1::vector.43", align 8
  %14 = alloca %"class.std::__1::vector.43", align 8
  %15 = alloca %"class.std::__1::vector.55", align 8
  %16 = alloca %struct.SplitInfo.154, align 8
  %17 = alloca %"class.std::__1::vector.43", align 8
  %18 = alloca %"class.std::__1::vector.43", align 8
  %19 = alloca %"class.std::__1::vector.83", align 8
  %20 = alloca %"class.std::__1::vector.155", align 8
  %21 = alloca %"class.std::__1::vector.155", align 8
  %22 = alloca %"class.std::__1::vector.43", align 8
  %23 = alloca %"struct.std::__1::array", align 8
  %24 = alloca [2 x %"struct.std::__1::array.5"], align 8
  %25 = alloca [2 x %"struct.std::__1::array.5"], align 8
  %26 = bitcast %"class.std::__1::vector.146"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %26) #24
  %27 = getelementptr inbounds %"class.std::__1::vector.146", %"class.std::__1::vector.146"* %8, i64 0, i32 0, i32 0
  %28 = getelementptr inbounds %"class.std::__1::vector.146", %"class.std::__1::vector.146"* %8, i64 0, i32 0, i32 1
  %29 = getelementptr inbounds %"class.std::__1::vector.146", %"class.std::__1::vector.146"* %8, i64 0, i32 0, i32 2, i32 0, i32 0
  %30 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 1
  %31 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 1, i32 0, i32 1
  %32 = bitcast i16** %31 to i64*
  %33 = load i64, i64* %32, align 8
  %34 = bitcast %"class.std::__1::vector.20"* %30 to i64*
  %35 = load i64, i64* %34, align 8
  %36 = sub i64 %33, %35
  %37 = ashr exact i64 %36, 1
  %38 = bitcast %struct.NodeInfo.148** %28 to i64*
  %39 = bitcast %"class.std::__1::vector.146"* %8 to i64*
  %40 = bitcast %struct.NodeInfo.148** %29 to i64*
  %41 = tail call i8* @_Znwm(i64 48) #29
  %42 = getelementptr inbounds i8, i8* %41, i64 48
  %43 = ptrtoint i8* %42 to i64
  %44 = getelementptr inbounds i8, i8* %41, i64 16
  %45 = bitcast i8* %44 to i64*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %41, i8 0, i64 16, i1 false)
  store i64 %37, i64* %45, align 8
  %46 = getelementptr inbounds i8, i8* %41, i64 24
  %47 = bitcast i8* %46 to i64*
  store i64 0, i64* %47, align 8
  %48 = getelementptr inbounds i8, i8* %41, i64 32
  %49 = bitcast i8* %48 to i64*
  store i64 %3, i64* %49, align 8
  %50 = getelementptr inbounds i8, i8* %41, i64 40
  %51 = bitcast i8* %50 to i64*
  store i64 %4, i64* %51, align 8
  %52 = ptrtoint i8* %41 to i64
  store i64 %52, i64* %39, align 8
  store i64 %43, i64* %38, align 8
  store i64 %43, i64* %40, align 8
  %53 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 5, i32 0, i32 1
  %54 = bitcast i32** %53 to i64*
  %55 = load i64, i64* %54, align 8
  %56 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 5
  %57 = bitcast %"class.std::__1::vector.62"* %56 to i64*
  %58 = load i64, i64* %57, align 8
  %59 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 4, i32 0, i32 1
  %60 = bitcast i32** %59 to i64*
  %61 = load i64, i64* %60, align 8
  %62 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 4
  %63 = bitcast %"class.std::__1::vector.55"* %62 to i64*
  %64 = load i64, i64* %63, align 8
  %65 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 5, i32 0, i32 1
  %66 = sub i64 %55, %58
  %67 = ashr exact i64 %66, 2
  %68 = sub i64 %61, %64
  %69 = ashr exact i64 %68, 2
  %70 = bitcast i8* %42 to %struct.NodeInfo.148*
  %71 = bitcast %struct.SplitInfo.154* %9 to i8*
  %72 = getelementptr inbounds %struct.SplitInfo.154, %struct.SplitInfo.154* %9, i64 0, i32 0
  %73 = getelementptr inbounds %struct.SplitInfo.154, %struct.SplitInfo.154* %9, i64 0, i32 1
  %74 = getelementptr inbounds %struct.SplitInfo.154, %struct.SplitInfo.154* %9, i64 0, i32 2
  %75 = getelementptr inbounds %struct.SplitInfo.154, %struct.SplitInfo.154* %9, i64 0, i32 3
  %76 = getelementptr inbounds %struct.SplitInfo.154, %struct.SplitInfo.154* %9, i64 0, i32 4
  %77 = getelementptr inbounds %struct.SplitInfo.154, %struct.SplitInfo.154* %9, i64 0, i32 5
  %78 = getelementptr inbounds %struct.SplitInfo.154, %struct.SplitInfo.154* %9, i64 0, i32 6
  %79 = bitcast %struct.SplitInfo.154* %10 to i8*
  %80 = getelementptr inbounds %struct.SplitInfo.154, %struct.SplitInfo.154* %10, i64 0, i32 0
  %81 = getelementptr inbounds %struct.SplitInfo.154, %struct.SplitInfo.154* %10, i64 0, i32 1
  %82 = getelementptr inbounds %struct.SplitInfo.154, %struct.SplitInfo.154* %10, i64 0, i32 2
  %83 = getelementptr inbounds %struct.SplitInfo.154, %struct.SplitInfo.154* %10, i64 0, i32 3
  %84 = getelementptr inbounds %struct.SplitInfo.154, %struct.SplitInfo.154* %10, i64 0, i32 4
  %85 = getelementptr inbounds %struct.SplitInfo.154, %struct.SplitInfo.154* %10, i64 0, i32 5
  %86 = getelementptr inbounds %struct.SplitInfo.154, %struct.SplitInfo.154* %10, i64 0, i32 6
  %87 = bitcast %struct.SplitInfo.154* %11 to i8*
  %88 = getelementptr inbounds %struct.SplitInfo.154, %struct.SplitInfo.154* %11, i64 0, i32 0
  %89 = getelementptr inbounds %struct.SplitInfo.154, %struct.SplitInfo.154* %11, i64 0, i32 1
  %90 = getelementptr inbounds %struct.SplitInfo.154, %struct.SplitInfo.154* %11, i64 0, i32 2
  %91 = getelementptr inbounds %struct.SplitInfo.154, %struct.SplitInfo.154* %11, i64 0, i32 3
  %92 = getelementptr inbounds %struct.SplitInfo.154, %struct.SplitInfo.154* %11, i64 0, i32 4
  %93 = getelementptr inbounds %struct.SplitInfo.154, %struct.SplitInfo.154* %11, i64 0, i32 5
  %94 = getelementptr inbounds %struct.SplitInfo.154, %struct.SplitInfo.154* %11, i64 0, i32 6
  %95 = bitcast %struct.SplitInfo.154* %12 to i8*
  %96 = getelementptr inbounds %struct.SplitInfo.154, %struct.SplitInfo.154* %12, i64 0, i32 0
  %97 = getelementptr inbounds %struct.SplitInfo.154, %struct.SplitInfo.154* %12, i64 0, i32 1
  %98 = getelementptr inbounds %struct.SplitInfo.154, %struct.SplitInfo.154* %12, i64 0, i32 2
  %99 = getelementptr inbounds %struct.SplitInfo.154, %struct.SplitInfo.154* %12, i64 0, i32 3
  %100 = getelementptr inbounds %struct.SplitInfo.154, %struct.SplitInfo.154* %12, i64 0, i32 4
  %101 = getelementptr inbounds %struct.SplitInfo.154, %struct.SplitInfo.154* %12, i64 0, i32 5
  %102 = getelementptr inbounds %struct.SplitInfo.154, %struct.SplitInfo.154* %12, i64 0, i32 6
  %103 = icmp eq i64 %66, 0
  %104 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 0, i32 0, i32 0
  %105 = bitcast %"class.std::__1::vector.43"* %13 to i8*
  %106 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %13, i64 0, i32 0, i32 0
  %107 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %13, i64 0, i32 0, i32 1
  %108 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %13, i64 0, i32 0, i32 2, i32 0, i32 0
  %109 = bitcast %"class.std::__1::vector.43"* %13 to i8**
  %110 = bitcast i32** %107 to i64*
  %111 = bitcast %"class.std::__1::vector.43"* %14 to i8*
  %112 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %14, i64 0, i32 0, i32 0
  %113 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %14, i64 0, i32 0, i32 1
  %114 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %14, i64 0, i32 0, i32 2, i32 0, i32 0
  %115 = bitcast %"class.std::__1::vector.43"* %14 to i8**
  %116 = bitcast i32** %113 to i64*
  %117 = bitcast %"class.std::__1::vector.55"* %15 to i8*
  %118 = getelementptr inbounds %"class.std::__1::vector.55", %"class.std::__1::vector.55"* %15, i64 0, i32 0, i32 0
  %119 = getelementptr inbounds %"class.std::__1::vector.55", %"class.std::__1::vector.55"* %15, i64 0, i32 0, i32 1
  %120 = getelementptr inbounds %"class.std::__1::vector.55", %"class.std::__1::vector.55"* %15, i64 0, i32 0, i32 2, i32 0, i32 0
  %121 = icmp ugt i64 %67, 4611686018427387903
  %122 = bitcast %"class.std::__1::vector.55"* %15 to i8**
  %123 = bitcast i32** %119 to i64*
  %124 = add nsw i64 %67, -1
  %125 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 1, i32 0, i32 0
  %126 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %6, i64 0, i32 0, i32 0
  %127 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 5, i32 0, i32 0
  %128 = bitcast %struct.SplitInfo.154* %16 to i8*
  %129 = getelementptr inbounds %struct.SplitInfo.154, %struct.SplitInfo.154* %16, i64 0, i32 0
  %130 = getelementptr inbounds %struct.SplitInfo.154, %struct.SplitInfo.154* %16, i64 0, i32 1
  %131 = getelementptr inbounds %struct.SplitInfo.154, %struct.SplitInfo.154* %16, i64 0, i32 2
  %132 = getelementptr inbounds %struct.SplitInfo.154, %struct.SplitInfo.154* %16, i64 0, i32 3
  %133 = getelementptr inbounds %struct.SplitInfo.154, %struct.SplitInfo.154* %16, i64 0, i32 4
  %134 = getelementptr inbounds %struct.SplitInfo.154, %struct.SplitInfo.154* %16, i64 0, i32 5
  %135 = getelementptr inbounds %struct.SplitInfo.154, %struct.SplitInfo.154* %16, i64 0, i32 6
  %136 = getelementptr inbounds %"class.std::__1::vector.69", %"class.std::__1::vector.69"* %2, i64 0, i32 0, i32 1
  %137 = bitcast %"struct.jxl::ModularMultiplierInfo"** %136 to i64*
  %138 = bitcast %"class.std::__1::vector.69"* %2 to i64*
  %139 = bitcast %"class.std::__1::vector.43"* %17 to i8*
  %140 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %17, i64 0, i32 0, i32 0
  %141 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %17, i64 0, i32 0, i32 1
  %142 = bitcast %"class.std::__1::vector.43"* %18 to i8*
  %143 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %18, i64 0, i32 0, i32 0
  %144 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %18, i64 0, i32 0, i32 1
  %145 = bitcast %"class.std::__1::vector.83"* %19 to i8*
  %146 = getelementptr inbounds %"class.std::__1::vector.83", %"class.std::__1::vector.83"* %19, i64 0, i32 0, i32 0
  %147 = getelementptr inbounds %"class.std::__1::vector.83", %"class.std::__1::vector.83"* %19, i64 0, i32 0, i32 1
  %148 = bitcast %"class.std::__1::vector.155"* %20 to i8*
  %149 = getelementptr inbounds %"class.std::__1::vector.155", %"class.std::__1::vector.155"* %20, i64 0, i32 0, i32 0
  %150 = getelementptr inbounds %"class.std::__1::vector.155", %"class.std::__1::vector.155"* %20, i64 0, i32 0, i32 1
  %151 = bitcast %"class.std::__1::vector.155"* %21 to i8*
  %152 = getelementptr inbounds %"class.std::__1::vector.155", %"class.std::__1::vector.155"* %21, i64 0, i32 0, i32 0
  %153 = getelementptr inbounds %"class.std::__1::vector.155", %"class.std::__1::vector.155"* %21, i64 0, i32 0, i32 1
  %154 = bitcast %"class.std::__1::vector.43"* %22 to i8*
  %155 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %22, i64 0, i32 0, i32 0
  %156 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %22, i64 0, i32 0, i32 1
  %157 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %22, i64 0, i32 0, i32 2, i32 0, i32 0
  %158 = bitcast %"class.std::__1::vector.43"* %22 to i8**
  %159 = bitcast i32** %156 to i64*
  %160 = fadd float %1, 1.000000e+02
  %161 = fdiv float 8.000000e+02, %160
  %162 = icmp ne i64 %68, 0
  %163 = bitcast %"class.std::__1::vector.155"* %20 to i64*
  %164 = bitcast %struct.CostInfo.157** %150 to i64*
  %165 = bitcast %"class.std::__1::vector.155"* %21 to i64*
  %166 = bitcast %struct.CostInfo.157** %153 to i64*
  %167 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 3, i32 0, i32 0
  %168 = bitcast i64** %147 to i64*
  %169 = bitcast %"class.std::__1::vector.83"* %19 to i64*
  %170 = bitcast i32** %144 to i64*
  %171 = bitcast %"class.std::__1::vector.43"* %18 to i64*
  %172 = bitcast %"class.std::__1::vector.43"* %17 to i64*
  %173 = bitcast i32** %141 to i64*
  %174 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 2, i32 0, i32 0
  %175 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 4, i32 0, i32 0
  %176 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 6, i32 0, i32 0
  %177 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %6, i64 0, i32 0, i32 1
  %178 = bitcast %"struct.jxl::PropertyDecisionNode"** %177 to i64*
  %179 = bitcast %"class.std::__1::vector"* %6 to i64*
  %180 = bitcast %"struct.std::__1::array"* %23 to i8*
  %181 = bitcast %"struct.std::__1::array"* %23 to i64*
  %182 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %23, i64 0, i32 0, i64 1
  %183 = bitcast %"struct.std::__1::array.5"* %182 to i64*
  %184 = bitcast [2 x %"struct.std::__1::array.5"]* %24 to i8*
  %185 = bitcast %struct.NodeInfo.148** %28 to i64*
  %186 = bitcast %"class.std::__1::vector.146"* %8 to i64*
  %187 = bitcast %struct.NodeInfo.148** %29 to i64*
  %188 = bitcast [2 x %"struct.std::__1::array.5"]* %25 to i8*
  br label %189

189:                                              ; preds = %7, %1314
  %190 = phi %struct.NodeInfo.148* [ %70, %7 ], [ %1315, %1314 ]
  %191 = getelementptr inbounds %struct.NodeInfo.148, %struct.NodeInfo.148* %190, i64 -1
  %192 = getelementptr inbounds %struct.NodeInfo.148, %struct.NodeInfo.148* %191, i64 0, i32 0
  %193 = load i64, i64* %192, align 8
  %194 = getelementptr inbounds %struct.NodeInfo.148, %struct.NodeInfo.148* %190, i64 -1, i32 1
  %195 = load i64, i64* %194, align 8
  %196 = getelementptr inbounds %struct.NodeInfo.148, %struct.NodeInfo.148* %190, i64 -1, i32 2
  %197 = load i64, i64* %196, align 8
  %198 = getelementptr inbounds %struct.NodeInfo.148, %struct.NodeInfo.148* %190, i64 -1, i32 3
  %199 = load i64, i64* %198, align 8
  %200 = getelementptr inbounds %struct.NodeInfo.148, %struct.NodeInfo.148* %190, i64 -1, i32 4
  %201 = bitcast %"struct.std::__1::array"* %200 to i64*
  %202 = load i64, i64* %201, align 8
  %203 = getelementptr inbounds %struct.NodeInfo.148, %struct.NodeInfo.148* %190, i64 -1, i32 4, i32 0, i64 1
  %204 = bitcast %"struct.std::__1::array.5"* %203 to i64*
  %205 = load i64, i64* %204, align 8
  store %struct.NodeInfo.148* %191, %struct.NodeInfo.148** %28, align 8
  %206 = icmp eq i64 %197, %195
  br i1 %206, label %1314, label %207

207:                                              ; preds = %189
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %71) #24
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %71, i8* align 8 bitcast ({ i64, i32, [4 x i8], i64, float, float, i32, i32 }* @__const._ZN3jxl8N_SCALAR13FindBestSplitERNS_11TreeSamplesEfRKNSt3__16vectorINS_21ModularMultiplierInfoENS3_9allocatorIS5_EEEENS3_5arrayINSB_IjLm2EEELm2EEEfPNS4_INS_20PropertyDecisionNodeENS6_ISE_EEEE.forced_split to i8*), i64 16, i1 false)
  store i64 0, i64* %72, align 8
  store i32 0, i32* %73, align 8
  store i64 0, i64* %74, align 8
  store float 0x47EFFFFFE0000000, float* %75, align 8
  store float 0x47EFFFFFE0000000, float* %76, align 4
  store i32 0, i32* %77, align 8
  store i32 0, i32* %78, align 4
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %79) #24
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %79, i8* align 8 bitcast ({ i64, i32, [4 x i8], i64, float, float, i32, i32 }* @__const._ZN3jxl8N_SCALAR13FindBestSplitERNS_11TreeSamplesEfRKNSt3__16vectorINS_21ModularMultiplierInfoENS3_9allocatorIS5_EEEENS3_5arrayINSB_IjLm2EEELm2EEEfPNS4_INS_20PropertyDecisionNodeENS6_ISE_EEEE.forced_split to i8*), i64 16, i1 false)
  store i64 0, i64* %80, align 8
  store i32 0, i32* %81, align 8
  store i64 0, i64* %82, align 8
  store float 0x47EFFFFFE0000000, float* %83, align 8
  store float 0x47EFFFFFE0000000, float* %84, align 4
  store i32 0, i32* %85, align 8
  store i32 0, i32* %86, align 4
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %87) #24
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %87, i8* align 8 bitcast ({ i64, i32, [4 x i8], i64, float, float, i32, i32 }* @__const._ZN3jxl8N_SCALAR13FindBestSplitERNS_11TreeSamplesEfRKNSt3__16vectorINS_21ModularMultiplierInfoENS3_9allocatorIS5_EEEENS3_5arrayINSB_IjLm2EEELm2EEEfPNS4_INS_20PropertyDecisionNodeENS6_ISE_EEEE.forced_split to i8*), i64 16, i1 false)
  store i64 0, i64* %88, align 8
  store i32 0, i32* %89, align 8
  store i64 0, i64* %90, align 8
  store float 0x47EFFFFFE0000000, float* %91, align 8
  store float 0x47EFFFFFE0000000, float* %92, align 4
  store i32 0, i32* %93, align 8
  store i32 0, i32* %94, align 4
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %95) #24
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %95, i8* align 8 bitcast ({ i64, i32, [4 x i8], i64, float, float, i32, i32 }* @__const._ZN3jxl8N_SCALAR13FindBestSplitERNS_11TreeSamplesEfRKNSt3__16vectorINS_21ModularMultiplierInfoENS3_9allocatorIS5_EEEENS3_5arrayINSB_IjLm2EEELm2EEEfPNS4_INS_20PropertyDecisionNodeENS6_ISE_EEEE.forced_split to i8*), i64 16, i1 false)
  store i64 0, i64* %96, align 8
  store i32 0, i32* %97, align 8
  store i64 0, i64* %98, align 8
  store float 0x47EFFFFFE0000000, float* %99, align 8
  store float 0x47EFFFFFE0000000, float* %100, align 4
  store i32 0, i32* %101, align 8
  store i32 0, i32* %102, align 4
  br i1 %103, label %240, label %208

208:                                              ; preds = %207
  %209 = icmp ugt i64 %197, %195
  %210 = load %"class.std::__1::vector.8"*, %"class.std::__1::vector.8"** %104, align 8
  %211 = sub i64 %197, %195
  %212 = xor i64 %195, -1
  %213 = add i64 %197, %212
  %214 = and i64 %211, 3
  %215 = icmp eq i64 %214, 0
  %216 = icmp ult i64 %213, 3
  br label %217

217:                                              ; preds = %208, %296
  %218 = phi i64 [ 0, %208 ], [ %298, %296 ]
  %219 = phi i64 [ 0, %208 ], [ %297, %296 ]
  br i1 %209, label %220, label %296

220:                                              ; preds = %217
  %221 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %210, i64 %218, i32 0, i32 0
  %222 = load %"struct.jxl::TreeSamples::ResidualToken"*, %"struct.jxl::TreeSamples::ResidualToken"** %221, align 8
  br i1 %215, label %236, label %223

223:                                              ; preds = %220, %223
  %224 = phi i64 [ %233, %223 ], [ %195, %220 ]
  %225 = phi i64 [ %232, %223 ], [ %219, %220 ]
  %226 = phi i64 [ %234, %223 ], [ %214, %220 ]
  %227 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %222, i64 %224, i32 0
  %228 = load i8, i8* %227, align 1
  %229 = zext i8 %228 to i64
  %230 = add nuw nsw i64 %229, 1
  %231 = icmp ugt i64 %225, %230
  %232 = select i1 %231, i64 %225, i64 %230
  %233 = add nuw i64 %224, 1
  %234 = add i64 %226, -1
  %235 = icmp eq i64 %234, 0
  br i1 %235, label %236, label %223, !llvm.loop !296

236:                                              ; preds = %223, %220
  %237 = phi i64 [ undef, %220 ], [ %232, %223 ]
  %238 = phi i64 [ %195, %220 ], [ %233, %223 ]
  %239 = phi i64 [ %219, %220 ], [ %232, %223 ]
  br i1 %216, label %296, label %300

240:                                              ; preds = %296, %207
  %241 = phi i64 [ 0, %207 ], [ %297, %296 ]
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %105) #24
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %105, i8 0, i64 24, i1 false) #24
  %242 = icmp eq i64 %241, 0
  br i1 %242, label %260, label %243

243:                                              ; preds = %240
  %244 = icmp ugt i64 %241, 4611686018427387903
  br i1 %244, label %245, label %247

245:                                              ; preds = %243
  %246 = bitcast %"class.std::__1::vector.43"* %13 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %246) #28
  unreachable

247:                                              ; preds = %243
  %248 = shl i64 %241, 2
  %249 = call i8* @_Znwm(i64 %248) #29
  %250 = bitcast i8* %249 to i32*
  store i8* %249, i8** %109, align 8
  %251 = getelementptr inbounds i32, i32* %250, i64 %241
  store i32* %251, i32** %108, align 8
  %252 = ptrtoint i8* %249 to i64
  %253 = add nsw i64 %241, -1
  %254 = getelementptr i32, i32* %250, i64 %253
  %255 = ptrtoint i32* %254 to i64
  %256 = sub i64 4, %252
  %257 = add i64 %256, %255
  %258 = and i64 %257, -4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %249, i8 0, i64 %258, i1 false) #24
  %259 = ptrtoint i32* %251 to i64
  store i64 %259, i64* %110, align 8
  br label %260

260:                                              ; preds = %240, %247
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %111) #24
  %261 = mul i64 %241, %67
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %111, i8 0, i64 24, i1 false) #24
  %262 = icmp eq i64 %261, 0
  br i1 %262, label %280, label %263

263:                                              ; preds = %260
  %264 = icmp ugt i64 %261, 4611686018427387903
  br i1 %264, label %265, label %267

265:                                              ; preds = %263
  %266 = bitcast %"class.std::__1::vector.43"* %14 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %266) #28
  unreachable

267:                                              ; preds = %263
  %268 = shl i64 %261, 2
  %269 = call i8* @_Znwm(i64 %268) #29
  %270 = bitcast i8* %269 to i32*
  store i8* %269, i8** %115, align 8
  %271 = getelementptr inbounds i32, i32* %270, i64 %261
  store i32* %271, i32** %114, align 8
  %272 = ptrtoint i8* %269 to i64
  %273 = add nsw i64 %261, -1
  %274 = getelementptr i32, i32* %270, i64 %273
  %275 = ptrtoint i32* %274 to i64
  %276 = sub i64 4, %272
  %277 = add i64 %276, %275
  %278 = and i64 %277, -4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %269, i8 0, i64 %278, i1 false) #24
  %279 = ptrtoint i32* %271 to i64
  store i64 %279, i64* %116, align 8
  br label %280

280:                                              ; preds = %260, %267
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %117) #24
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %117, i8 0, i64 24, i1 false) #24
  br i1 %103, label %336, label %281

281:                                              ; preds = %280
  br i1 %121, label %282, label %284

282:                                              ; preds = %281
  %283 = bitcast %"class.std::__1::vector.55"* %15 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %283) #28
  unreachable

284:                                              ; preds = %281
  %285 = call i8* @_Znwm(i64 %66) #29
  %286 = bitcast i8* %285 to i32*
  store i8* %285, i8** %122, align 8
  %287 = getelementptr inbounds i32, i32* %286, i64 %67
  store i32* %287, i32** %120, align 8
  %288 = ptrtoint i8* %285 to i64
  %289 = getelementptr i32, i32* %286, i64 %124
  %290 = ptrtoint i32* %289 to i64
  %291 = sub i64 4, %288
  %292 = add i64 %291, %290
  %293 = and i64 %292, -4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %285, i8 0, i64 %293, i1 false) #24
  %294 = ptrtoint i32* %287 to i64
  store i64 %294, i64* %123, align 8
  %295 = icmp ugt i64 %197, %195
  br label %332

296:                                              ; preds = %236, %300, %217
  %297 = phi i64 [ %219, %217 ], [ %237, %236 ], [ %329, %300 ]
  %298 = add nuw i64 %218, 1
  %299 = icmp ult i64 %298, %67
  br i1 %299, label %217, label %240

300:                                              ; preds = %236, %300
  %301 = phi i64 [ %330, %300 ], [ %238, %236 ]
  %302 = phi i64 [ %329, %300 ], [ %239, %236 ]
  %303 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %222, i64 %301, i32 0
  %304 = load i8, i8* %303, align 1
  %305 = zext i8 %304 to i64
  %306 = add nuw nsw i64 %305, 1
  %307 = icmp ugt i64 %302, %306
  %308 = select i1 %307, i64 %302, i64 %306
  %309 = add nuw i64 %301, 1
  %310 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %222, i64 %309, i32 0
  %311 = load i8, i8* %310, align 1
  %312 = zext i8 %311 to i64
  %313 = add nuw nsw i64 %312, 1
  %314 = icmp ugt i64 %308, %313
  %315 = select i1 %314, i64 %308, i64 %313
  %316 = add nuw i64 %301, 2
  %317 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %222, i64 %316, i32 0
  %318 = load i8, i8* %317, align 1
  %319 = zext i8 %318 to i64
  %320 = add nuw nsw i64 %319, 1
  %321 = icmp ugt i64 %315, %320
  %322 = select i1 %321, i64 %315, i64 %320
  %323 = add nuw i64 %301, 3
  %324 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %222, i64 %323, i32 0
  %325 = load i8, i8* %324, align 1
  %326 = zext i8 %325 to i64
  %327 = add nuw nsw i64 %326, 1
  %328 = icmp ugt i64 %322, %327
  %329 = select i1 %328, i64 %322, i64 %327
  %330 = add nuw i64 %301, 4
  %331 = icmp eq i64 %330, %197
  br i1 %331, label %296, label %300

332:                                              ; preds = %284, %379
  %333 = phi i64 [ 0, %284 ], [ %380, %379 ]
  br i1 %295, label %334, label %379

334:                                              ; preds = %332
  %335 = mul i64 %333, %241
  br label %382

336:                                              ; preds = %379, %280
  %337 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %126, align 8
  %338 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %337, i64 %193, i32 5
  %339 = load i32, i32* %338, align 8
  %340 = load i32*, i32** %127, align 8
  %341 = load i32*, i32** %65, align 8
  %342 = icmp eq i32* %340, %341
  br i1 %342, label %350, label %343

343:                                              ; preds = %336, %347
  %344 = phi i32* [ %348, %347 ], [ %340, %336 ]
  %345 = load i32, i32* %344, align 4
  %346 = icmp eq i32 %345, %339
  br i1 %346, label %350, label %347

347:                                              ; preds = %343
  %348 = getelementptr inbounds i32, i32* %344, i64 1
  %349 = icmp eq i32* %348, %341
  br i1 %349, label %350, label %343

350:                                              ; preds = %343, %347, %336
  %351 = phi i32* [ %340, %336 ], [ %341, %347 ], [ %344, %343 ]
  %352 = ptrtoint i32* %351 to i64
  %353 = ptrtoint i32* %340 to i64
  %354 = sub i64 %352, %353
  %355 = ashr exact i64 %354, 2
  %356 = load i32*, i32** %112, align 8
  %357 = mul i64 %355, %241
  %358 = getelementptr inbounds i32, i32* %356, i64 %357
  %359 = load i32*, i32** %106, align 8
  %360 = call float @_ZN3jxl8N_SCALAR12EstimateBitsEPKiPim(i32* %358, i32* %359, i64 %241)
  %361 = load i32*, i32** %118, align 8
  %362 = getelementptr inbounds i32, i32* %361, i64 %355
  %363 = load i32, i32* %362, align 4
  %364 = uitofp i32 %363 to float
  %365 = fadd float %360, %364
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %128) #24
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %128, i8* align 8 bitcast ({ i64, i32, [4 x i8], i64, float, float, i32, i32 }* @__const._ZN3jxl8N_SCALAR13FindBestSplitERNS_11TreeSamplesEfRKNSt3__16vectorINS_21ModularMultiplierInfoENS3_9allocatorIS5_EEEENS3_5arrayINSB_IjLm2EEELm2EEEfPNS4_INS_20PropertyDecisionNodeENS6_ISE_EEEE.forced_split to i8*), i64 16, i1 false)
  store i64 0, i64* %129, align 8
  store i32 0, i32* %130, align 8
  store i64 0, i64* %131, align 8
  store float 0x47EFFFFFE0000000, float* %132, align 8
  store float 0x47EFFFFFE0000000, float* %133, align 4
  store i32 0, i32* %134, align 8
  store i32 0, i32* %135, align 4
  %366 = load i64, i64* %137, align 8
  %367 = load i64, i64* %138, align 8
  %368 = icmp eq i64 %366, %367
  %369 = inttoptr i64 %367 to %"struct.jxl::ModularMultiplierInfo"*
  br i1 %368, label %555, label %370

370:                                              ; preds = %350
  %371 = lshr i64 %202, 32
  %372 = trunc i64 %371 to i32
  %373 = trunc i64 %202 to i32
  %374 = lshr i64 %205, 32
  %375 = trunc i64 %374 to i32
  %376 = trunc i64 %205 to i32
  %377 = sub i64 %366, %367
  %378 = sdiv exact i64 %377, 20
  br label %416

379:                                              ; preds = %382, %332
  %380 = add nuw i64 %333, 1
  %381 = icmp ult i64 %380, %67
  br i1 %381, label %332, label %336

382:                                              ; preds = %382, %334
  %383 = phi i64 [ %195, %334 ], [ %414, %382 ]
  %384 = load i16*, i16** %125, align 8
  %385 = getelementptr inbounds i16, i16* %384, i64 %383
  %386 = load i16, i16* %385, align 2
  %387 = load %"class.std::__1::vector.8"*, %"class.std::__1::vector.8"** %104, align 8
  %388 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %387, i64 %333, i32 0, i32 0
  %389 = load %"struct.jxl::TreeSamples::ResidualToken"*, %"struct.jxl::TreeSamples::ResidualToken"** %388, align 8
  %390 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %389, i64 %383, i32 0
  %391 = load i8, i8* %390, align 1
  %392 = zext i8 %391 to i64
  %393 = add i64 %335, %392
  %394 = load i32*, i32** %112, align 8
  %395 = getelementptr inbounds i32, i32* %394, i64 %393
  %396 = load i32, i32* %395, align 4
  %397 = zext i16 %386 to i32
  %398 = add i32 %396, %397
  store i32 %398, i32* %395, align 4
  %399 = load %"class.std::__1::vector.8"*, %"class.std::__1::vector.8"** %104, align 8
  %400 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %399, i64 %333, i32 0, i32 0
  %401 = load %"struct.jxl::TreeSamples::ResidualToken"*, %"struct.jxl::TreeSamples::ResidualToken"** %400, align 8
  %402 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %401, i64 %383, i32 1
  %403 = load i8, i8* %402, align 1
  %404 = zext i8 %403 to i32
  %405 = load i16*, i16** %125, align 8
  %406 = getelementptr inbounds i16, i16* %405, i64 %383
  %407 = load i16, i16* %406, align 2
  %408 = zext i16 %407 to i32
  %409 = mul nuw nsw i32 %408, %404
  %410 = load i32*, i32** %118, align 8
  %411 = getelementptr inbounds i32, i32* %410, i64 %333
  %412 = load i32, i32* %411, align 4
  %413 = add i32 %412, %409
  store i32 %413, i32* %411, align 4
  %414 = add nuw i64 %383, 1
  %415 = icmp eq i64 %414, %197
  br i1 %415, label %379, label %382

416:                                              ; preds = %370, %547
  %417 = phi i64 [ 0, %370 ], [ %548, %547 ]
  %418 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %369, i64 %417
  %419 = bitcast %"struct.jxl::ModularMultiplierInfo"* %418 to i64*
  %420 = load i64, i64* %419, align 4
  %421 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %369, i64 %417, i32 0, i32 0, i64 1
  %422 = bitcast %"struct.std::__1::array.5"* %421 to i64*
  %423 = load i64, i64* %422, align 4
  %424 = trunc i64 %420 to i32
  %425 = icmp ult i32 %424, %372
  %426 = lshr i64 %420, 32
  %427 = trunc i64 %426 to i32
  %428 = trunc i64 %423 to i32
  %429 = lshr i64 %423, 32
  %430 = trunc i64 %429 to i32
  %431 = icmp ugt i32 %427, %373
  %432 = and i1 %425, %431
  br i1 %432, label %433, label %547

433:                                              ; preds = %416
  %434 = icmp ugt i32 %424, %373
  br i1 %434, label %441, label %435

435:                                              ; preds = %433
  %436 = icmp ult i32 %427, %372
  %437 = add i32 %427, -1
  %438 = select i1 %436, i32 %437, i32 -1431655766
  %439 = select i1 %436, i64 0, i64 2863311530
  %440 = zext i1 %436 to i8
  br label %443

441:                                              ; preds = %433
  %442 = add i32 %424, -1
  br label %443

443:                                              ; preds = %435, %441
  %444 = phi i32 [ %442, %441 ], [ %438, %435 ]
  %445 = phi i64 [ 0, %441 ], [ %439, %435 ]
  %446 = phi i8 [ 1, %441 ], [ %440, %435 ]
  %447 = icmp ult i32 %428, %375
  %448 = icmp ugt i32 %430, %376
  %449 = and i1 %447, %448
  br i1 %449, label %450, label %547

450:                                              ; preds = %443
  %451 = trunc i64 %423 to i32
  %452 = trunc i64 %429 to i32
  %453 = icmp ugt i32 %451, %376
  br i1 %453, label %458, label %454

454:                                              ; preds = %450
  %455 = icmp ult i32 %452, %375
  br i1 %455, label %456, label %460

456:                                              ; preds = %454
  %457 = add i32 %452, -1
  br label %462

458:                                              ; preds = %450
  %459 = add i32 %451, -1
  br label %462

460:                                              ; preds = %454
  %461 = icmp eq i8 %446, 0
  br i1 %461, label %550, label %462

462:                                              ; preds = %456, %458, %460
  %463 = phi i32 [ %444, %460 ], [ %457, %456 ], [ %459, %458 ]
  %464 = phi i64 [ %445, %460 ], [ 1, %456 ], [ 1, %458 ]
  %465 = icmp sgt i32 %463, -511
  %466 = select i1 %465, i32 %463, i32 -511
  %467 = icmp slt i32 %466, 511
  %468 = select i1 %467, i32 %466, i32 511
  %469 = add nsw i32 %468, 511
  %470 = and i64 %464, 4294967295
  %471 = load %"class.std::__1::vector.29"*, %"class.std::__1::vector.29"** %176, align 8
  %472 = sext i32 %469 to i64
  %473 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %471, i64 %470, i32 0, i32 0
  %474 = load i8*, i8** %473, align 8
  %475 = getelementptr inbounds i8, i8* %474, i64 %472
  %476 = load i8, i8* %475, align 1
  %477 = zext i8 %476 to i32
  store i32 %477, i32* %130, align 8
  store i64 %470, i64* %129, align 8
  %478 = fmul float %365, 5.000000e-01
  %479 = fsub float %478, %1
  store float %479, float* %133, align 4
  store float %479, float* %132, align 8
  %480 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %126, align 8
  %481 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %480, i64 %193, i32 5
  %482 = load i32, i32* %481, align 8
  store i32 %482, i32* %135, align 4
  store i32 %482, i32* %134, align 8
  store i64 %195, i64* %131, align 8
  %483 = load i32*, i32** %175, align 8
  %484 = getelementptr inbounds i32, i32* %483, i64 %470
  %485 = load i32, i32* %484, align 4
  %486 = trunc i64 %464 to i32
  %487 = icmp eq i32 %485, %486
  br i1 %487, label %488, label %516

488:                                              ; preds = %462
  %489 = icmp ugt i64 %197, %195
  br i1 %489, label %490, label %1041

490:                                              ; preds = %488
  %491 = load %"class.std::__1::vector.29"*, %"class.std::__1::vector.29"** %174, align 8
  %492 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %491, i64 %470, i32 0, i32 0
  %493 = load i8*, i8** %492, align 8
  %494 = sub i64 %197, %195
  %495 = xor i64 %195, -1
  %496 = add i64 %197, %495
  %497 = and i64 %494, 3
  %498 = icmp eq i64 %497, 0
  br i1 %498, label %511, label %499

499:                                              ; preds = %490, %499
  %500 = phi i64 [ %507, %499 ], [ %195, %490 ]
  %501 = phi i64 [ %508, %499 ], [ %195, %490 ]
  %502 = phi i64 [ %509, %499 ], [ %497, %490 ]
  %503 = getelementptr inbounds i8, i8* %493, i64 %501
  %504 = load i8, i8* %503, align 1
  %505 = icmp ule i8 %504, %476
  %506 = zext i1 %505 to i64
  %507 = add i64 %500, %506
  %508 = add nuw i64 %501, 1
  %509 = add i64 %502, -1
  %510 = icmp eq i64 %509, 0
  br i1 %510, label %511, label %499, !llvm.loop !297

511:                                              ; preds = %499, %490
  %512 = phi i64 [ undef, %490 ], [ %507, %499 ]
  %513 = phi i64 [ %195, %490 ], [ %507, %499 ]
  %514 = phi i64 [ %195, %490 ], [ %508, %499 ]
  %515 = icmp ult i64 %496, 3
  br i1 %515, label %1039, label %519

516:                                              ; preds = %462
  %517 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.1, i64 0, i64 0), i32 299, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.3, i64 0, i64 0)) #24
  %518 = call zeroext i1 @_ZN3jxl5AbortEv() #28
  unreachable

519:                                              ; preds = %511, %519
  %520 = phi i64 [ %544, %519 ], [ %513, %511 ]
  %521 = phi i64 [ %545, %519 ], [ %514, %511 ]
  %522 = getelementptr inbounds i8, i8* %493, i64 %521
  %523 = load i8, i8* %522, align 1
  %524 = icmp ule i8 %523, %476
  %525 = zext i1 %524 to i64
  %526 = add i64 %520, %525
  %527 = add nuw i64 %521, 1
  %528 = getelementptr inbounds i8, i8* %493, i64 %527
  %529 = load i8, i8* %528, align 1
  %530 = icmp ule i8 %529, %476
  %531 = zext i1 %530 to i64
  %532 = add i64 %526, %531
  %533 = add nuw i64 %521, 2
  %534 = getelementptr inbounds i8, i8* %493, i64 %533
  %535 = load i8, i8* %534, align 1
  %536 = icmp ule i8 %535, %476
  %537 = zext i1 %536 to i64
  %538 = add i64 %532, %537
  %539 = add nuw i64 %521, 3
  %540 = getelementptr inbounds i8, i8* %493, i64 %539
  %541 = load i8, i8* %540, align 1
  %542 = icmp ule i8 %541, %476
  %543 = zext i1 %542 to i64
  %544 = add i64 %538, %543
  %545 = add nuw i64 %521, 4
  %546 = icmp eq i64 %545, %197
  br i1 %546, label %1039, label %519

547:                                              ; preds = %416, %443
  %548 = add nuw i64 %417, 1
  %549 = icmp ult i64 %548, %378
  br i1 %549, label %416, label %555

550:                                              ; preds = %460
  %551 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %369, i64 %417, i32 1
  %552 = load i32, i32* %551, align 4
  %553 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %126, align 8
  %554 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %553, i64 %193, i32 8
  store i32 %552, i32* %554, align 8
  br label %555

555:                                              ; preds = %547, %350, %550
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %139) #24
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %139, i8 0, i64 24, i1 false) #24
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %142) #24
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %142, i8 0, i64 24, i1 false) #24
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %145) #24
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %145, i8 0, i64 24, i1 false) #24
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %148) #24
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %148, i8 0, i64 24, i1 false) #24
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %151) #24
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %151, i8 0, i64 24, i1 false) #24
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %154) #24
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %154, i8 0, i64 24, i1 false) #24
  br i1 %242, label %581, label %556

556:                                              ; preds = %555
  %557 = icmp ugt i64 %241, 4611686018427387903
  br i1 %557, label %558, label %560

558:                                              ; preds = %556
  %559 = bitcast %"class.std::__1::vector.43"* %22 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %559) #28
  unreachable

560:                                              ; preds = %556
  %561 = shl i64 %241, 2
  %562 = call i8* @_Znwm(i64 %561) #29
  %563 = bitcast i8* %562 to i32*
  store i8* %562, i8** %158, align 8
  %564 = getelementptr inbounds i32, i32* %563, i64 %241
  store i32* %564, i32** %157, align 8
  %565 = ptrtoint i8* %562 to i64
  %566 = add nsw i64 %241, -1
  %567 = getelementptr i32, i32* %563, i64 %566
  %568 = ptrtoint i32* %567 to i64
  %569 = sub i64 4, %565
  %570 = add i64 %569, %568
  %571 = and i64 %570, -4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %562, i8 0, i64 %571, i1 false) #24
  %572 = ptrtoint i32* %564 to i64
  store i64 %572, i64* %159, align 8
  %573 = call i8* @_Znwm(i64 %561) #29
  %574 = bitcast i8* %573 to i32*
  %575 = ptrtoint i8* %573 to i64
  %576 = getelementptr i32, i32* %574, i64 %566
  %577 = ptrtoint i32* %576 to i64
  %578 = sub i64 4, %575
  %579 = add i64 %578, %577
  %580 = and i64 %579, -4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %573, i8 0, i64 %580, i1 false) #24
  br label %581

581:                                              ; preds = %555, %560
  %582 = phi i8* [ %573, %560 ], [ null, %555 ]
  %583 = phi i32* [ %574, %560 ], [ null, %555 ]
  %584 = fcmp ogt float %365, %1
  %585 = and i1 %584, %162
  br i1 %585, label %586, label %598

586:                                              ; preds = %581
  %587 = icmp ugt i64 %197, %195
  %588 = shl i64 %241, 2
  %589 = bitcast i8* %582 to i32*
  %590 = add i64 %241, -1
  %591 = and i64 %241, 3
  %592 = icmp ult i64 %590, 3
  %593 = sub i64 %241, %591
  %594 = icmp eq i64 %591, 0
  br label %604

595:                                              ; preds = %936
  %596 = load float, float* %99, align 8
  %597 = load float, float* %100, align 4
  br label %598

598:                                              ; preds = %595, %581
  %599 = phi float [ %597, %595 ], [ 0x47EFFFFFE0000000, %581 ]
  %600 = phi float [ %596, %595 ], [ 0x47EFFFFFE0000000, %581 ]
  %601 = fadd float %600, %599
  %602 = fadd float %601, %1
  %603 = fcmp olt float %602, %365
  br i1 %603, label %965, label %972

604:                                              ; preds = %939, %586
  %605 = phi i64 [ 0, %586 ], [ %943, %939 ]
  %606 = phi i64 [ 0, %586 ], [ %942, %939 ]
  %607 = phi i64 [ 0, %586 ], [ %941, %939 ]
  %608 = phi i64 [ 0, %586 ], [ %940, %939 ]
  %609 = phi i64 [ 0, %586 ], [ %937, %939 ]
  store i64 %608, i64* %164, align 8
  store i64 %607, i64* %166, align 8
  %610 = load %"class.std::__1::vector.43"*, %"class.std::__1::vector.43"** %167, align 8
  %611 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %610, i64 %609
  %612 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %610, i64 %609, i32 0, i32 1
  %613 = bitcast i32** %612 to i64*
  %614 = load i64, i64* %613, align 8
  %615 = bitcast %"class.std::__1::vector.43"* %611 to i64*
  %616 = load i64, i64* %615, align 8
  %617 = sub i64 %614, %616
  %618 = ashr exact i64 %617, 2
  %619 = add nsw i64 %618, 1
  %620 = sub i64 %606, %605
  %621 = ashr exact i64 %620, 3
  %622 = icmp ult i64 %621, %619
  br i1 %622, label %623, label %652

623:                                              ; preds = %604
  %624 = mul i64 %619, %241
  %625 = load i64, i64* %170, align 8
  %626 = load i64, i64* %171, align 8
  %627 = sub i64 %625, %626
  %628 = ashr exact i64 %627, 2
  %629 = icmp ugt i64 %624, %628
  %630 = inttoptr i64 %626 to i32*
  br i1 %629, label %631, label %637

631:                                              ; preds = %623
  %632 = sub i64 %624, %628
  call void @_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEm(%"class.std::__1::vector.43"* nonnull %18, i64 %632) #24
  %633 = load i64, i64* %168, align 8
  %634 = load i64, i64* %169, align 8
  %635 = sub i64 %633, %634
  %636 = ashr exact i64 %635, 3
  br label %641

637:                                              ; preds = %623
  %638 = icmp ult i64 %624, %628
  br i1 %638, label %639, label %641

639:                                              ; preds = %637
  %640 = getelementptr inbounds i32, i32* %630, i64 %624
  store i32* %640, i32** %144, align 8
  br label %641

641:                                              ; preds = %631, %637, %639
  %642 = phi i64 [ %636, %631 ], [ %621, %637 ], [ %621, %639 ]
  %643 = phi i64 [ %634, %631 ], [ %605, %637 ], [ %605, %639 ]
  %644 = icmp ugt i64 %619, %642
  %645 = inttoptr i64 %643 to i64*
  br i1 %644, label %646, label %648

646:                                              ; preds = %641
  %647 = sub nsw i64 %619, %642
  call void @_ZNSt3__16vectorImNS_9allocatorImEEE8__appendEm(%"class.std::__1::vector.83"* nonnull %19, i64 %647) #24
  br label %652

648:                                              ; preds = %641
  %649 = icmp ult i64 %619, %642
  br i1 %649, label %650, label %652

650:                                              ; preds = %648
  %651 = getelementptr inbounds i64, i64* %645, i64 %619
  store i64* %651, i64** %147, align 8
  br label %652

652:                                              ; preds = %650, %648, %646, %604
  %653 = load i64, i64* %172, align 8
  store i64 %653, i64* %173, align 8
  %654 = icmp eq i64 %619, 0
  br i1 %654, label %656, label %655

655:                                              ; preds = %652
  call void @_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEm(%"class.std::__1::vector.43"* nonnull %17, i64 %619) #24
  br label %656

656:                                              ; preds = %652, %655
  br i1 %587, label %663, label %657

657:                                              ; preds = %663, %656
  %658 = phi i64 [ 0, %656 ], [ %678, %663 ]
  %659 = phi i64 [ %619, %656 ], [ %680, %663 ]
  %660 = sub i64 %658, %659
  call fastcc void @_ZNSt3__16vectorIZN3jxl8N_SCALAR13FindBestSplitERNS1_11TreeSamplesEfRKNS0_INS1_21ModularMultiplierInfoENS_9allocatorIS5_EEEENS_5arrayINSB_IjLm2EEELm2EEEfPNS0_INS1_20PropertyDecisionNodeENS6_ISE_EEEEE8CostInfoNS6_ISI_EEE6resizeEm(%"class.std::__1::vector.155"* nonnull %20, i64 %660)
  call fastcc void @_ZNSt3__16vectorIZN3jxl8N_SCALAR13FindBestSplitERNS1_11TreeSamplesEfRKNS0_INS1_21ModularMultiplierInfoENS_9allocatorIS5_EEEENS_5arrayINSB_IjLm2EEELm2EEEfPNS0_INS1_20PropertyDecisionNodeENS6_ISE_EEEEE8CostInfoNS6_ISI_EEE6resizeEm(%"class.std::__1::vector.155"* nonnull %21, i64 %660)
  br i1 %103, label %683, label %661

661:                                              ; preds = %657
  %662 = icmp ugt i64 %658, %659
  br label %691

663:                                              ; preds = %656, %663
  %664 = phi i64 [ %681, %663 ], [ %195, %656 ]
  %665 = phi i64 [ %680, %663 ], [ %619, %656 ]
  %666 = phi i64 [ %678, %663 ], [ 0, %656 ]
  %667 = load %"class.std::__1::vector.29"*, %"class.std::__1::vector.29"** %174, align 8
  %668 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %667, i64 %609, i32 0, i32 0
  %669 = load i8*, i8** %668, align 8
  %670 = getelementptr inbounds i8, i8* %669, i64 %664
  %671 = load i8, i8* %670, align 1
  %672 = zext i8 %671 to i64
  %673 = load i32*, i32** %140, align 8
  %674 = getelementptr inbounds i32, i32* %673, i64 %672
  %675 = load i32, i32* %674, align 4
  %676 = add nsw i32 %675, 1
  store i32 %676, i32* %674, align 4
  %677 = icmp ult i64 %666, %672
  %678 = select i1 %677, i64 %672, i64 %666
  %679 = icmp ugt i64 %665, %672
  %680 = select i1 %679, i64 %672, i64 %665
  %681 = add nuw i64 %664, 1
  %682 = icmp eq i64 %681, %197
  br i1 %682, label %657, label %663

683:                                              ; preds = %737, %657
  %684 = icmp ugt i64 %658, %659
  br i1 %684, label %685, label %844

685:                                              ; preds = %683
  %686 = shl i64 1, %609
  %687 = and i64 %686, %199
  %688 = icmp ne i64 %687, 0
  %689 = icmp ult i64 %609, 2
  %690 = load i32*, i32** %140, align 8
  br label %849

691:                                              ; preds = %661, %737
  %692 = phi i64 [ 0, %661 ], [ %738, %737 ]
  br i1 %587, label %699, label %693

693:                                              ; preds = %699, %691
  %694 = load i8*, i8** %158, align 8
  %695 = load i32*, i32** %112, align 8
  %696 = mul i64 %692, %241
  %697 = getelementptr inbounds i32, i32* %695, i64 %696
  %698 = bitcast i32* %697 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %694, i8* align 4 %698, i64 %588, i1 false)
  call void @llvm.memset.p0i8.i64(i8* align 4 %582, i8 0, i64 %588, i1 false)
  br i1 %662, label %740, label %737

699:                                              ; preds = %691, %699
  %700 = phi i64 [ %735, %699 ], [ %195, %691 ]
  %701 = load %"class.std::__1::vector.29"*, %"class.std::__1::vector.29"** %174, align 8
  %702 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %701, i64 %609, i32 0, i32 0
  %703 = load i8*, i8** %702, align 8
  %704 = getelementptr inbounds i8, i8* %703, i64 %700
  %705 = load i8, i8* %704, align 1
  %706 = zext i8 %705 to i64
  %707 = load i16*, i16** %125, align 8
  %708 = getelementptr inbounds i16, i16* %707, i64 %700
  %709 = load i16, i16* %708, align 2
  %710 = zext i16 %709 to i64
  %711 = load %"class.std::__1::vector.8"*, %"class.std::__1::vector.8"** %104, align 8
  %712 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %711, i64 %692, i32 0, i32 0
  %713 = load %"struct.jxl::TreeSamples::ResidualToken"*, %"struct.jxl::TreeSamples::ResidualToken"** %712, align 8
  %714 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %713, i64 %700, i32 0
  %715 = load i8, i8* %714, align 1
  %716 = zext i8 %715 to i64
  %717 = mul i64 %241, %706
  %718 = add i64 %717, %716
  %719 = load i32*, i32** %143, align 8
  %720 = getelementptr inbounds i32, i32* %719, i64 %718
  %721 = load i32, i32* %720, align 4
  %722 = zext i16 %709 to i32
  %723 = add i32 %721, %722
  store i32 %723, i32* %720, align 4
  %724 = load %"class.std::__1::vector.8"*, %"class.std::__1::vector.8"** %104, align 8
  %725 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %724, i64 %692, i32 0, i32 0
  %726 = load %"struct.jxl::TreeSamples::ResidualToken"*, %"struct.jxl::TreeSamples::ResidualToken"** %725, align 8
  %727 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %726, i64 %700, i32 1
  %728 = load i8, i8* %727, align 1
  %729 = zext i8 %728 to i64
  %730 = mul nuw nsw i64 %729, %710
  %731 = load i64*, i64** %146, align 8
  %732 = getelementptr inbounds i64, i64* %731, i64 %706
  %733 = load i64, i64* %732, align 8
  %734 = add i64 %733, %730
  store i64 %734, i64* %732, align 8
  %735 = add nuw i64 %700, 1
  %736 = icmp eq i64 %735, %197
  br i1 %736, label %693, label %699

737:                                              ; preds = %840, %693
  %738 = add nuw i64 %692, 1
  %739 = icmp ult i64 %738, %67
  br i1 %739, label %691, label %683

740:                                              ; preds = %693, %840
  %741 = phi i64 [ %842, %840 ], [ %659, %693 ]
  %742 = phi i64 [ %841, %840 ], [ 0, %693 ]
  %743 = load i32*, i32** %140, align 8
  %744 = getelementptr inbounds i32, i32* %743, i64 %741
  %745 = load i32, i32* %744, align 4
  %746 = icmp eq i32 %745, 0
  br i1 %746, label %840, label %747

747:                                              ; preds = %740
  %748 = load i64*, i64** %146, align 8
  %749 = getelementptr inbounds i64, i64* %748, i64 %741
  %750 = load i64, i64* %749, align 8
  %751 = add i64 %750, %742
  store i64 0, i64* %749, align 8
  br i1 %242, label %754, label %752

752:                                              ; preds = %747
  %753 = mul i64 %741, %241
  br label %778

754:                                              ; preds = %778, %747
  %755 = load i32*, i32** %155, align 8
  %756 = load i32*, i32** %106, align 8
  %757 = call float @_ZN3jxl8N_SCALAR12EstimateBitsEPKiPim(i32* %755, i32* %756, i64 %241)
  %758 = load i32*, i32** %118, align 8
  %759 = getelementptr inbounds i32, i32* %758, i64 %692
  %760 = load i32, i32* %759, align 4
  %761 = uitofp i32 %760 to float
  %762 = fadd float %757, %761
  %763 = uitofp i64 %751 to float
  %764 = fsub float %762, %763
  %765 = load i32*, i32** %106, align 8
  %766 = call float @_ZN3jxl8N_SCALAR12EstimateBitsEPKiPim(i32* %589, i32* %765, i64 %241)
  %767 = fadd float %766, %763
  %768 = load i32*, i32** %127, align 8
  %769 = getelementptr inbounds i32, i32* %768, i64 %692
  %770 = load i32, i32* %769, align 4
  %771 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %126, align 8
  %772 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %771, i64 %193, i32 5
  %773 = load i32, i32* %772, align 8
  %774 = icmp eq i32 %770, %773
  %775 = icmp eq i32 %773, 6
  %776 = or i1 %774, %775
  %777 = select i1 %776, float 0.000000e+00, float %161
  switch i32 %770, label %804 [
    i32 6, label %796
    i32 0, label %800
  ]

778:                                              ; preds = %778, %752
  %779 = phi i64 [ 0, %752 ], [ %794, %778 ]
  %780 = add i64 %779, %753
  %781 = load i32*, i32** %143, align 8
  %782 = getelementptr inbounds i32, i32* %781, i64 %780
  %783 = load i32, i32* %782, align 4
  %784 = load i32*, i32** %155, align 8
  %785 = getelementptr inbounds i32, i32* %784, i64 %779
  %786 = load i32, i32* %785, align 4
  %787 = sub nsw i32 %786, %783
  store i32 %787, i32* %785, align 4
  %788 = load i32*, i32** %143, align 8
  %789 = getelementptr inbounds i32, i32* %788, i64 %780
  %790 = load i32, i32* %789, align 4
  %791 = getelementptr inbounds i32, i32* %589, i64 %779
  %792 = load i32, i32* %791, align 4
  %793 = add nsw i32 %792, %790
  store i32 %793, i32* %791, align 4
  store i32 0, i32* %789, align 4
  %794 = add nuw i64 %779, 1
  %795 = icmp eq i64 %794, %241
  br i1 %795, label %754, label %778

796:                                              ; preds = %754
  %797 = fpext float %777 to double
  %798 = fadd double %797, 1.000000e-08
  %799 = fptrunc double %798 to float
  br label %804

800:                                              ; preds = %754
  %801 = fpext float %777 to double
  %802 = fadd double %801, -1.000000e-08
  %803 = fptrunc double %802 to float
  br label %804

804:                                              ; preds = %754, %796, %800
  %805 = phi float [ %803, %800 ], [ %799, %796 ], [ %777, %754 ]
  %806 = fadd float %764, %805
  %807 = sub nuw i64 %741, %659
  %808 = load %struct.CostInfo.157*, %struct.CostInfo.157** %152, align 8
  %809 = getelementptr inbounds %struct.CostInfo.157, %struct.CostInfo.157* %808, i64 %807, i32 0
  %810 = load float, float* %809, align 4
  %811 = getelementptr inbounds %struct.CostInfo.157, %struct.CostInfo.157* %808, i64 %807, i32 1
  %812 = load float, float* %811, align 4
  %813 = fadd float %810, %812
  %814 = fcmp olt float %806, %813
  br i1 %814, label %815, label %823

815:                                              ; preds = %804
  store float %764, float* %809, align 4
  %816 = load %struct.CostInfo.157*, %struct.CostInfo.157** %152, align 8
  %817 = getelementptr inbounds %struct.CostInfo.157, %struct.CostInfo.157* %816, i64 %807, i32 1
  store float %805, float* %817, align 4
  %818 = load i32*, i32** %127, align 8
  %819 = getelementptr inbounds i32, i32* %818, i64 %692
  %820 = load i32, i32* %819, align 4
  %821 = load %struct.CostInfo.157*, %struct.CostInfo.157** %152, align 8
  %822 = getelementptr inbounds %struct.CostInfo.157, %struct.CostInfo.157* %821, i64 %807, i32 2
  store i32 %820, i32* %822, align 4
  br label %823

823:                                              ; preds = %815, %804
  %824 = fadd float %767, %805
  %825 = load %struct.CostInfo.157*, %struct.CostInfo.157** %149, align 8
  %826 = getelementptr inbounds %struct.CostInfo.157, %struct.CostInfo.157* %825, i64 %807, i32 0
  %827 = load float, float* %826, align 4
  %828 = getelementptr inbounds %struct.CostInfo.157, %struct.CostInfo.157* %825, i64 %807, i32 1
  %829 = load float, float* %828, align 4
  %830 = fadd float %827, %829
  %831 = fcmp olt float %824, %830
  br i1 %831, label %832, label %840

832:                                              ; preds = %823
  store float %767, float* %826, align 4
  %833 = load %struct.CostInfo.157*, %struct.CostInfo.157** %149, align 8
  %834 = getelementptr inbounds %struct.CostInfo.157, %struct.CostInfo.157* %833, i64 %807, i32 1
  store float %805, float* %834, align 4
  %835 = load i32*, i32** %127, align 8
  %836 = getelementptr inbounds i32, i32* %835, i64 %692
  %837 = load i32, i32* %836, align 4
  %838 = load %struct.CostInfo.157*, %struct.CostInfo.157** %149, align 8
  %839 = getelementptr inbounds %struct.CostInfo.157, %struct.CostInfo.157* %838, i64 %807, i32 2
  store i32 %837, i32* %839, align 4
  br label %840

840:                                              ; preds = %823, %832, %740
  %841 = phi i64 [ %742, %740 ], [ %751, %832 ], [ %751, %823 ]
  %842 = add nuw i64 %741, 1
  %843 = icmp eq i64 %842, %658
  br i1 %843, label %737, label %740

844:                                              ; preds = %921, %683
  %845 = load i64*, i64** %146, align 8
  %846 = getelementptr inbounds i64, i64* %845, i64 %658
  store i64 0, i64* %846, align 8
  br i1 %242, label %936, label %847

847:                                              ; preds = %844
  %848 = mul i64 %658, %241
  br i1 %592, label %925, label %944

849:                                              ; preds = %921, %685
  %850 = phi i64 [ %659, %685 ], [ %923, %921 ]
  %851 = phi i64 [ %195, %685 ], [ %922, %921 ]
  %852 = getelementptr inbounds i32, i32* %690, i64 %850
  %853 = load i32, i32* %852, align 4
  %854 = icmp eq i32 %853, 0
  br i1 %854, label %921, label %855

855:                                              ; preds = %849
  %856 = sext i32 %853 to i64
  %857 = add i64 %851, %856
  %858 = sub nuw i64 %850, %659
  %859 = load %struct.CostInfo.157*, %struct.CostInfo.157** %152, align 8
  %860 = getelementptr inbounds %struct.CostInfo.157, %struct.CostInfo.157* %859, i64 %858, i32 0
  %861 = load float, float* %860, align 4
  %862 = load %struct.CostInfo.157*, %struct.CostInfo.157** %149, align 8
  %863 = getelementptr inbounds %struct.CostInfo.157, %struct.CostInfo.157* %862, i64 %858, i32 0
  %864 = load float, float* %863, align 4
  %865 = load i32*, i32** %175, align 8
  %866 = getelementptr inbounds i32, i32* %865, i64 %609
  %867 = load i32, i32* %866, align 4
  %868 = icmp ne i32 %867, 15
  %869 = or i1 %868, %688
  br i1 %869, label %875, label %870

870:                                              ; preds = %855
  %871 = fcmp oeq float %861, 0.000000e+00
  %872 = fcmp oeq float %864, 0.000000e+00
  %873 = or i1 %871, %872
  %874 = select i1 %873, %struct.SplitInfo.154* %9, %struct.SplitInfo.154* %10
  br label %897

875:                                              ; preds = %855
  %876 = getelementptr inbounds %struct.CostInfo.157, %struct.CostInfo.157* %862, i64 %858, i32 2
  %877 = load i32, i32* %876, align 4
  %878 = icmp eq i32 %877, 6
  br i1 %878, label %888, label %879

879:                                              ; preds = %875
  %880 = getelementptr inbounds %struct.CostInfo.157, %struct.CostInfo.157* %859, i64 %858, i32 2
  %881 = load i32, i32* %880, align 4
  %882 = icmp eq i32 %881, 6
  br i1 %882, label %888, label %883

883:                                              ; preds = %879
  %884 = fcmp oeq float %861, 0.000000e+00
  %885 = fcmp oeq float %864, 0.000000e+00
  %886 = or i1 %884, %885
  %887 = select i1 %886, %struct.SplitInfo.154* %9, %struct.SplitInfo.154* %10
  br label %899

888:                                              ; preds = %875, %879
  %889 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %126, align 8
  %890 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %889, i64 %193, i32 5
  %891 = load i32, i32* %890, align 8
  %892 = icmp eq i32 %891, 6
  %893 = fcmp oeq float %861, 0.000000e+00
  %894 = fcmp oeq float %864, 0.000000e+00
  %895 = or i1 %893, %894
  %896 = select i1 %895, %struct.SplitInfo.154* %9, %struct.SplitInfo.154* %10
  br i1 %892, label %899, label %897

897:                                              ; preds = %888, %870
  %898 = phi %struct.SplitInfo.154* [ %874, %870 ], [ %896, %888 ]
  br label %899

899:                                              ; preds = %888, %883, %897
  %900 = phi %struct.SplitInfo.154* [ %898, %897 ], [ %896, %888 ], [ %887, %883 ]
  %901 = phi %struct.SplitInfo.154* [ %11, %897 ], [ %12, %888 ], [ %12, %883 ]
  %902 = select i1 %689, %struct.SplitInfo.154* %900, %struct.SplitInfo.154* %901
  %903 = fadd float %861, %864
  %904 = getelementptr inbounds %struct.SplitInfo.154, %struct.SplitInfo.154* %902, i64 0, i32 3
  %905 = load float, float* %904, align 8
  %906 = getelementptr inbounds %struct.SplitInfo.154, %struct.SplitInfo.154* %902, i64 0, i32 4
  %907 = load float, float* %906, align 4
  %908 = fadd float %905, %907
  %909 = fcmp olt float %903, %908
  br i1 %909, label %910, label %921

910:                                              ; preds = %899
  %911 = getelementptr inbounds %struct.SplitInfo.154, %struct.SplitInfo.154* %902, i64 0, i32 0
  store i64 %609, i64* %911, align 8
  %912 = trunc i64 %850 to i32
  %913 = getelementptr inbounds %struct.SplitInfo.154, %struct.SplitInfo.154* %902, i64 0, i32 1
  store i32 %912, i32* %913, align 8
  %914 = getelementptr inbounds %struct.SplitInfo.154, %struct.SplitInfo.154* %902, i64 0, i32 2
  store i64 %857, i64* %914, align 8
  store float %864, float* %904, align 8
  %915 = getelementptr inbounds %struct.CostInfo.157, %struct.CostInfo.157* %862, i64 %858, i32 2
  %916 = load i32, i32* %915, align 4
  %917 = getelementptr inbounds %struct.SplitInfo.154, %struct.SplitInfo.154* %902, i64 0, i32 5
  store i32 %916, i32* %917, align 8
  store float %861, float* %906, align 4
  %918 = getelementptr inbounds %struct.CostInfo.157, %struct.CostInfo.157* %859, i64 %858, i32 2
  %919 = load i32, i32* %918, align 4
  %920 = getelementptr inbounds %struct.SplitInfo.154, %struct.SplitInfo.154* %902, i64 0, i32 6
  store i32 %919, i32* %920, align 4
  br label %921

921:                                              ; preds = %899, %910, %849
  %922 = phi i64 [ %851, %849 ], [ %857, %910 ], [ %857, %899 ]
  %923 = add nuw i64 %850, 1
  %924 = icmp eq i64 %923, %658
  br i1 %924, label %844, label %849

925:                                              ; preds = %944, %847
  %926 = phi i64 [ 0, %847 ], [ %962, %944 ]
  br i1 %594, label %936, label %927

927:                                              ; preds = %925, %927
  %928 = phi i64 [ %933, %927 ], [ %926, %925 ]
  %929 = phi i64 [ %934, %927 ], [ %591, %925 ]
  %930 = add i64 %928, %848
  %931 = load i32*, i32** %143, align 8
  %932 = getelementptr inbounds i32, i32* %931, i64 %930
  store i32 0, i32* %932, align 4
  %933 = add nuw i64 %928, 1
  %934 = add i64 %929, -1
  %935 = icmp eq i64 %934, 0
  br i1 %935, label %936, label %927, !llvm.loop !298

936:                                              ; preds = %925, %927, %844
  %937 = add nuw i64 %609, 1
  %938 = icmp ult i64 %937, %69
  br i1 %938, label %939, label %595

939:                                              ; preds = %936
  %940 = load i64, i64* %163, align 8
  %941 = load i64, i64* %165, align 8
  %942 = load i64, i64* %168, align 8
  %943 = load i64, i64* %169, align 8
  br label %604

944:                                              ; preds = %847, %944
  %945 = phi i64 [ %962, %944 ], [ 0, %847 ]
  %946 = phi i64 [ %963, %944 ], [ %593, %847 ]
  %947 = add i64 %945, %848
  %948 = load i32*, i32** %143, align 8
  %949 = getelementptr inbounds i32, i32* %948, i64 %947
  store i32 0, i32* %949, align 4
  %950 = or i64 %945, 1
  %951 = add i64 %950, %848
  %952 = load i32*, i32** %143, align 8
  %953 = getelementptr inbounds i32, i32* %952, i64 %951
  store i32 0, i32* %953, align 4
  %954 = or i64 %945, 2
  %955 = add i64 %954, %848
  %956 = load i32*, i32** %143, align 8
  %957 = getelementptr inbounds i32, i32* %956, i64 %955
  store i32 0, i32* %957, align 4
  %958 = or i64 %945, 3
  %959 = add i64 %958, %848
  %960 = load i32*, i32** %143, align 8
  %961 = getelementptr inbounds i32, i32* %960, i64 %959
  store i32 0, i32* %961, align 4
  %962 = add nuw i64 %945, 4
  %963 = add i64 %946, -4
  %964 = icmp eq i64 %963, 0
  br i1 %964, label %925, label %944

965:                                              ; preds = %598
  %966 = load float, float* %91, align 8
  %967 = load float, float* %92, align 4
  %968 = fadd float %966, %967
  %969 = fmul float %968, %5
  %970 = fcmp ugt float %601, %969
  br i1 %970, label %972, label %971

971:                                              ; preds = %965
  br label %972

972:                                              ; preds = %965, %971, %598
  %973 = phi %struct.SplitInfo.154* [ %12, %971 ], [ %11, %965 ], [ %11, %598 ]
  %974 = load float, float* %83, align 8
  %975 = load float, float* %84, align 4
  %976 = fadd float %974, %975
  %977 = fadd float %976, %1
  %978 = fcmp olt float %977, %365
  br i1 %978, label %979, label %988

979:                                              ; preds = %972
  %980 = getelementptr inbounds %struct.SplitInfo.154, %struct.SplitInfo.154* %973, i64 0, i32 3
  %981 = load float, float* %980, align 8
  %982 = getelementptr inbounds %struct.SplitInfo.154, %struct.SplitInfo.154* %973, i64 0, i32 4
  %983 = load float, float* %982, align 4
  %984 = fadd float %981, %983
  %985 = fmul float %984, %5
  %986 = fcmp ugt float %976, %985
  br i1 %986, label %988, label %987

987:                                              ; preds = %979
  br label %988

988:                                              ; preds = %979, %987, %972
  %989 = phi %struct.SplitInfo.154* [ %10, %987 ], [ %973, %979 ], [ %973, %972 ]
  %990 = load float, float* %75, align 8
  %991 = load float, float* %76, align 4
  %992 = fadd float %990, %991
  %993 = fadd float %992, %1
  %994 = fcmp olt float %993, %365
  %995 = select i1 %994, %struct.SplitInfo.154* %9, %struct.SplitInfo.154* %989
  %996 = icmp eq i32* %583, null
  br i1 %996, label %998, label %997

997:                                              ; preds = %988
  call void @_ZdlPv(i8* %582) #29
  br label %998

998:                                              ; preds = %988, %997
  %999 = load i32*, i32** %155, align 8
  %1000 = icmp eq i32* %999, null
  br i1 %1000, label %1004, label %1001

1001:                                             ; preds = %998
  %1002 = ptrtoint i32* %999 to i64
  store i64 %1002, i64* %159, align 8
  %1003 = bitcast i32* %999 to i8*
  call void @_ZdlPv(i8* %1003) #29
  br label %1004

1004:                                             ; preds = %998, %1001
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %154) #24
  %1005 = load %struct.CostInfo.157*, %struct.CostInfo.157** %152, align 8
  %1006 = icmp eq %struct.CostInfo.157* %1005, null
  br i1 %1006, label %1010, label %1007

1007:                                             ; preds = %1004
  %1008 = ptrtoint %struct.CostInfo.157* %1005 to i64
  store i64 %1008, i64* %166, align 8
  %1009 = bitcast %struct.CostInfo.157* %1005 to i8*
  call void @_ZdlPv(i8* %1009) #29
  br label %1010

1010:                                             ; preds = %1004, %1007
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %151) #24
  %1011 = load %struct.CostInfo.157*, %struct.CostInfo.157** %149, align 8
  %1012 = icmp eq %struct.CostInfo.157* %1011, null
  br i1 %1012, label %1016, label %1013

1013:                                             ; preds = %1010
  %1014 = ptrtoint %struct.CostInfo.157* %1011 to i64
  store i64 %1014, i64* %164, align 8
  %1015 = bitcast %struct.CostInfo.157* %1011 to i8*
  call void @_ZdlPv(i8* %1015) #29
  br label %1016

1016:                                             ; preds = %1010, %1013
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %148) #24
  %1017 = load i64*, i64** %146, align 8
  %1018 = icmp eq i64* %1017, null
  br i1 %1018, label %1022, label %1019

1019:                                             ; preds = %1016
  %1020 = ptrtoint i64* %1017 to i64
  store i64 %1020, i64* %168, align 8
  %1021 = bitcast i64* %1017 to i8*
  call void @_ZdlPv(i8* %1021) #29
  br label %1022

1022:                                             ; preds = %1016, %1019
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %145) #24
  %1023 = load i32*, i32** %143, align 8
  %1024 = icmp eq i32* %1023, null
  br i1 %1024, label %1028, label %1025

1025:                                             ; preds = %1022
  %1026 = ptrtoint i32* %1023 to i64
  store i64 %1026, i64* %170, align 8
  %1027 = bitcast i32* %1023 to i8*
  call void @_ZdlPv(i8* %1027) #29
  br label %1028

1028:                                             ; preds = %1022, %1025
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %142) #24
  %1029 = load i32*, i32** %140, align 8
  %1030 = icmp eq i32* %1029, null
  br i1 %1030, label %1034, label %1031

1031:                                             ; preds = %1028
  %1032 = ptrtoint i32* %1029 to i64
  store i64 %1032, i64* %173, align 8
  %1033 = bitcast i32* %1029 to i8*
  call void @_ZdlPv(i8* %1033) #29
  br label %1034

1034:                                             ; preds = %1028, %1031
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %139) #24
  %1035 = getelementptr inbounds %struct.SplitInfo.154, %struct.SplitInfo.154* %995, i64 0, i32 3
  %1036 = load float, float* %1035, align 8
  %1037 = getelementptr inbounds %struct.SplitInfo.154, %struct.SplitInfo.154* %995, i64 0, i32 4
  %1038 = load float, float* %1037, align 4
  br label %1041

1039:                                             ; preds = %519, %511
  %1040 = phi i64 [ %512, %511 ], [ %544, %519 ]
  store i64 %1040, i64* %131, align 8
  br label %1041

1041:                                             ; preds = %488, %1039, %1034
  %1042 = phi float [ %1038, %1034 ], [ %479, %1039 ], [ %479, %488 ]
  %1043 = phi float [ %1036, %1034 ], [ %479, %1039 ], [ %479, %488 ]
  %1044 = phi %struct.SplitInfo.154* [ %995, %1034 ], [ %16, %1039 ], [ %16, %488 ]
  %1045 = fadd float %1043, %1042
  %1046 = fadd float %1045, %1
  %1047 = fcmp olt float %1046, %365
  br i1 %1047, label %1048, label %1294

1048:                                             ; preds = %1041
  %1049 = getelementptr inbounds %struct.SplitInfo.154, %struct.SplitInfo.154* %1044, i64 0, i32 0
  %1050 = load i64, i64* %1049, align 8
  %1051 = load i32*, i32** %175, align 8
  %1052 = getelementptr inbounds i32, i32* %1051, i64 %1050
  %1053 = load i32, i32* %1052, align 4
  %1054 = getelementptr inbounds %struct.SplitInfo.154, %struct.SplitInfo.154* %1044, i64 0, i32 1
  %1055 = load i32, i32* %1054, align 8
  %1056 = zext i32 %1055 to i64
  %1057 = load %"class.std::__1::vector.43"*, %"class.std::__1::vector.43"** %167, align 8
  %1058 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %1057, i64 %1050
  %1059 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %1057, i64 %1050, i32 0, i32 1
  %1060 = bitcast i32** %1059 to i64*
  %1061 = load i64, i64* %1060, align 8
  %1062 = bitcast %"class.std::__1::vector.43"* %1058 to i64*
  %1063 = load i64, i64* %1062, align 8
  %1064 = sub i64 %1061, %1063
  %1065 = ashr exact i64 %1064, 2
  %1066 = icmp ugt i64 %1065, %1056
  br i1 %1066, label %1070, label %1067

1067:                                             ; preds = %1048
  %1068 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.16, i64 0, i64 0), i32 65, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.17, i64 0, i64 0)) #24
  %1069 = call zeroext i1 @_ZN3jxl5AbortEv() #28
  unreachable

1070:                                             ; preds = %1048
  %1071 = zext i32 %1053 to i64
  %1072 = inttoptr i64 %1063 to i32*
  %1073 = getelementptr inbounds i32, i32* %1072, i64 %1056
  %1074 = load i32, i32* %1073, align 4
  %1075 = getelementptr inbounds %struct.SplitInfo.154, %struct.SplitInfo.154* %1044, i64 0, i32 5
  %1076 = load i32, i32* %1075, align 8
  %1077 = getelementptr inbounds %struct.SplitInfo.154, %struct.SplitInfo.154* %1044, i64 0, i32 6
  %1078 = load i32, i32* %1077, align 4
  %1079 = load i64, i64* %178, align 8
  %1080 = load i64, i64* %179, align 8
  %1081 = sub i64 %1079, %1080
  %1082 = sdiv exact i64 %1081, 40
  %1083 = trunc i64 %1082 to i32
  %1084 = inttoptr i64 %1080 to %"struct.jxl::PropertyDecisionNode"*
  %1085 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1084, i64 %193, i32 3
  store i32 %1083, i32* %1085, align 8
  %1086 = load i64, i64* %178, align 8
  %1087 = load i64, i64* %179, align 8
  %1088 = sub i64 %1086, %1087
  %1089 = sdiv exact i64 %1088, 40
  %1090 = trunc i64 %1089 to i32
  %1091 = add i32 %1090, 1
  %1092 = inttoptr i64 %1087 to %"struct.jxl::PropertyDecisionNode"*
  %1093 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1092, i64 %193, i32 4
  store i32 %1091, i32* %1093, align 4
  %1094 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %126, align 8
  %1095 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1094, i64 %193, i32 0
  store i32 %1074, i32* %1095, align 8
  %1096 = trunc i32 %1053 to i16
  %1097 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %126, align 8
  %1098 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1097, i64 %193, i32 1
  store i16 %1096, i16* %1098, align 4
  call void @_ZNSt3__16vectorIN3jxl20PropertyDecisionNodeENS_9allocatorIS2_EEE12emplace_backIJEEEvDpOT_(%"class.std::__1::vector"* %6) #24
  %1099 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %177, align 8
  %1100 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1099, i64 -1, i32 1
  store i16 -1, i16* %1100, align 4
  %1101 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %177, align 8
  %1102 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1101, i64 -1, i32 5
  store i32 %1078, i32* %1102, align 8
  %1103 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %177, align 8
  %1104 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1103, i64 -1, i32 7
  store i64 0, i64* %1104, align 8
  %1105 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %177, align 8
  %1106 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1105, i64 -1, i32 8
  store i32 1, i32* %1106, align 8
  call void @_ZNSt3__16vectorIN3jxl20PropertyDecisionNodeENS_9allocatorIS2_EEE12emplace_backIJEEEvDpOT_(%"class.std::__1::vector"* %6) #24
  %1107 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %177, align 8
  %1108 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1107, i64 -1, i32 1
  store i16 -1, i16* %1108, align 4
  %1109 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %177, align 8
  %1110 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1109, i64 -1, i32 5
  store i32 %1076, i32* %1110, align 8
  %1111 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %177, align 8
  %1112 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1111, i64 -1, i32 7
  store i64 0, i64* %1112, align 8
  %1113 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %177, align 8
  %1114 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1113, i64 -1, i32 8
  store i32 1, i32* %1114, align 8
  %1115 = getelementptr inbounds %struct.SplitInfo.154, %struct.SplitInfo.154* %1044, i64 0, i32 2
  %1116 = load i64, i64* %1115, align 8
  %1117 = load i64, i64* %1049, align 8
  call void @_ZN3jxl8N_SCALAR16SplitTreeSamplesERNS_11TreeSamplesEmmmm(%"struct.jxl::TreeSamples"* dereferenceable(200) %0, i64 %195, i64 %1116, i64 %197, i64 %1117)
  %1118 = icmp ugt i32 %1053, 1
  br i1 %1118, label %1119, label %1125

1119:                                             ; preds = %1070
  %1120 = load i64, i64* %1049, align 8
  %1121 = trunc i64 %1120 to i32
  %1122 = shl i32 1, %1121
  %1123 = sext i32 %1122 to i64
  %1124 = or i64 %199, %1123
  br label %1125

1125:                                             ; preds = %1119, %1070
  %1126 = phi i64 [ %1124, %1119 ], [ %199, %1070 ]
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %180) #24
  store i64 %202, i64* %181, align 8
  store i64 %205, i64* %183, align 8
  %1127 = icmp ult i32 %1053, 2
  br i1 %1127, label %1128, label %1143

1128:                                             ; preds = %1125
  %1129 = add nsw i32 %1074, 1
  %1130 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %23, i64 0, i32 0, i64 %1071, i32 0, i64 1
  %1131 = load i32, i32* %1130, align 4
  %1132 = icmp ugt i32 %1129, %1131
  br i1 %1132, label %1133, label %1136

1133:                                             ; preds = %1128
  %1134 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.1, i64 0, i64 0), i32 491, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.4, i64 0, i64 0)) #24
  %1135 = call zeroext i1 @_ZN3jxl5AbortEv() #28
  unreachable

1136:                                             ; preds = %1128
  store i32 %1129, i32* %1130, align 4
  %1137 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %23, i64 0, i32 0, i64 %1071, i32 0, i64 0
  %1138 = load i32, i32* %1137, align 8
  %1139 = icmp ult i32 %1138, %1129
  br i1 %1139, label %1143, label %1140

1140:                                             ; preds = %1136
  %1141 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.1, i64 0, i64 0), i32 493, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.5, i64 0, i64 0)) #24
  %1142 = call zeroext i1 @_ZN3jxl5AbortEv() #28
  unreachable

1143:                                             ; preds = %1136, %1125
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %184)
  %1144 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %126, align 8
  %1145 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1144, i64 %193, i32 4
  %1146 = load i32, i32* %1145, align 4
  %1147 = zext i32 %1146 to i64
  %1148 = load i64, i64* %1115, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %184, i8* nonnull align 8 %180, i64 16, i1 false)
  %1149 = load %struct.NodeInfo.148*, %struct.NodeInfo.148** %28, align 8
  %1150 = load %struct.NodeInfo.148*, %struct.NodeInfo.148** %29, align 8
  %1151 = icmp ult %struct.NodeInfo.148* %1149, %1150
  %1152 = ptrtoint %struct.NodeInfo.148* %1150 to i64
  br i1 %1151, label %1153, label %1162

1153:                                             ; preds = %1143
  %1154 = getelementptr inbounds %struct.NodeInfo.148, %struct.NodeInfo.148* %1149, i64 0, i32 0
  store i64 %1147, i64* %1154, align 8
  %1155 = getelementptr inbounds %struct.NodeInfo.148, %struct.NodeInfo.148* %1149, i64 0, i32 1
  store i64 %195, i64* %1155, align 8
  %1156 = getelementptr inbounds %struct.NodeInfo.148, %struct.NodeInfo.148* %1149, i64 0, i32 2
  store i64 %1148, i64* %1156, align 8
  %1157 = getelementptr inbounds %struct.NodeInfo.148, %struct.NodeInfo.148* %1149, i64 0, i32 3
  store i64 %1126, i64* %1157, align 8
  %1158 = getelementptr inbounds %struct.NodeInfo.148, %struct.NodeInfo.148* %1149, i64 0, i32 4
  %1159 = bitcast %"struct.std::__1::array"* %1158 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1159, i8* nonnull align 8 %184, i64 16, i1 false)
  %1160 = getelementptr inbounds %struct.NodeInfo.148, %struct.NodeInfo.148* %1149, i64 1
  %1161 = ptrtoint %struct.NodeInfo.148* %1160 to i64
  store i64 %1161, i64* %185, align 8
  br label %1210

1162:                                             ; preds = %1143
  %1163 = ptrtoint %struct.NodeInfo.148* %1149 to i64
  %1164 = load i64, i64* %186, align 8
  %1165 = sub i64 %1163, %1164
  %1166 = sdiv exact i64 %1165, 48
  %1167 = add nsw i64 %1166, 1
  %1168 = icmp ugt i64 %1167, 384307168202282325
  br i1 %1168, label %1169, label %1171

1169:                                             ; preds = %1162
  %1170 = bitcast %"class.std::__1::vector.146"* %8 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %1170) #28
  unreachable

1171:                                             ; preds = %1162
  %1172 = sub i64 %1152, %1164
  %1173 = sdiv exact i64 %1172, 48
  %1174 = icmp ult i64 %1173, 192153584101141162
  br i1 %1174, label %1175, label %1180

1175:                                             ; preds = %1171
  %1176 = shl nsw i64 %1173, 1
  %1177 = icmp ult i64 %1176, %1167
  %1178 = select i1 %1177, i64 %1167, i64 %1176
  %1179 = icmp eq i64 %1178, 0
  br i1 %1179, label %1185, label %1180

1180:                                             ; preds = %1175, %1171
  %1181 = phi i64 [ %1178, %1175 ], [ 384307168202282325, %1171 ]
  %1182 = mul i64 %1181, 48
  %1183 = call i8* @_Znwm(i64 %1182) #29
  %1184 = bitcast i8* %1183 to %struct.NodeInfo.148*
  br label %1185

1185:                                             ; preds = %1180, %1175
  %1186 = phi i64 [ %1181, %1180 ], [ 0, %1175 ]
  %1187 = phi %struct.NodeInfo.148* [ %1184, %1180 ], [ null, %1175 ]
  %1188 = getelementptr inbounds %struct.NodeInfo.148, %struct.NodeInfo.148* %1187, i64 %1166
  %1189 = getelementptr inbounds %struct.NodeInfo.148, %struct.NodeInfo.148* %1187, i64 %1186
  %1190 = ptrtoint %struct.NodeInfo.148* %1189 to i64
  %1191 = getelementptr inbounds %struct.NodeInfo.148, %struct.NodeInfo.148* %1188, i64 0, i32 0
  store i64 %1147, i64* %1191, align 8
  %1192 = getelementptr inbounds %struct.NodeInfo.148, %struct.NodeInfo.148* %1187, i64 %1166, i32 1
  store i64 %195, i64* %1192, align 8
  %1193 = getelementptr inbounds %struct.NodeInfo.148, %struct.NodeInfo.148* %1187, i64 %1166, i32 2
  store i64 %1148, i64* %1193, align 8
  %1194 = getelementptr inbounds %struct.NodeInfo.148, %struct.NodeInfo.148* %1187, i64 %1166, i32 3
  store i64 %1126, i64* %1194, align 8
  %1195 = getelementptr inbounds %struct.NodeInfo.148, %struct.NodeInfo.148* %1187, i64 %1166, i32 4
  %1196 = bitcast %"struct.std::__1::array"* %1195 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1196, i8* nonnull align 8 %184, i64 16, i1 false)
  %1197 = getelementptr inbounds %struct.NodeInfo.148, %struct.NodeInfo.148* %1188, i64 1
  %1198 = ptrtoint %struct.NodeInfo.148* %1197 to i64
  %1199 = sdiv exact i64 %1165, -48
  %1200 = getelementptr inbounds %struct.NodeInfo.148, %struct.NodeInfo.148* %1188, i64 %1199
  %1201 = ptrtoint %struct.NodeInfo.148* %1200 to i64
  %1202 = icmp sgt i64 %1165, 0
  br i1 %1202, label %1203, label %1206

1203:                                             ; preds = %1185
  %1204 = bitcast %struct.NodeInfo.148* %1200 to i8*
  %1205 = inttoptr i64 %1164 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1204, i8* align 8 %1205, i64 %1165, i1 false) #24
  br label %1206

1206:                                             ; preds = %1203, %1185
  store i64 %1201, i64* %186, align 8
  store i64 %1198, i64* %185, align 8
  store i64 %1190, i64* %187, align 8
  %1207 = icmp eq i64 %1164, 0
  br i1 %1207, label %1210, label %1208

1208:                                             ; preds = %1206
  %1209 = inttoptr i64 %1164 to i8*
  call void @_ZdlPv(i8* %1209) #29
  br label %1210

1210:                                             ; preds = %1153, %1206, %1208
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %184)
  store i64 %202, i64* %181, align 8
  store i64 %205, i64* %183, align 8
  br i1 %1127, label %1211, label %1226

1211:                                             ; preds = %1210
  %1212 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %23, i64 0, i32 0, i64 %1071, i32 0, i64 0
  %1213 = load i32, i32* %1212, align 8
  %1214 = add nsw i32 %1074, 1
  %1215 = icmp ugt i32 %1213, %1214
  br i1 %1215, label %1216, label %1219

1216:                                             ; preds = %1211
  %1217 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.1, i64 0, i64 0), i32 499, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.6, i64 0, i64 0)) #24
  %1218 = call zeroext i1 @_ZN3jxl5AbortEv() #28
  unreachable

1219:                                             ; preds = %1211
  store i32 %1214, i32* %1212, align 8
  %1220 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %23, i64 0, i32 0, i64 %1071, i32 0, i64 1
  %1221 = load i32, i32* %1220, align 4
  %1222 = icmp ult i32 %1214, %1221
  br i1 %1222, label %1226, label %1223

1223:                                             ; preds = %1219
  %1224 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.1, i64 0, i64 0), i32 501, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.5, i64 0, i64 0)) #24
  %1225 = call zeroext i1 @_ZN3jxl5AbortEv() #28
  unreachable

1226:                                             ; preds = %1219, %1210
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %188)
  %1227 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %126, align 8
  %1228 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %1227, i64 %193, i32 3
  %1229 = load i32, i32* %1228, align 8
  %1230 = zext i32 %1229 to i64
  %1231 = load i64, i64* %1115, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %188, i8* nonnull align 8 %180, i64 16, i1 false)
  %1232 = load %struct.NodeInfo.148*, %struct.NodeInfo.148** %28, align 8
  %1233 = load %struct.NodeInfo.148*, %struct.NodeInfo.148** %29, align 8
  %1234 = icmp ult %struct.NodeInfo.148* %1232, %1233
  %1235 = ptrtoint %struct.NodeInfo.148* %1233 to i64
  br i1 %1234, label %1236, label %1245

1236:                                             ; preds = %1226
  %1237 = getelementptr inbounds %struct.NodeInfo.148, %struct.NodeInfo.148* %1232, i64 0, i32 0
  store i64 %1230, i64* %1237, align 8
  %1238 = getelementptr inbounds %struct.NodeInfo.148, %struct.NodeInfo.148* %1232, i64 0, i32 1
  store i64 %1231, i64* %1238, align 8
  %1239 = getelementptr inbounds %struct.NodeInfo.148, %struct.NodeInfo.148* %1232, i64 0, i32 2
  store i64 %197, i64* %1239, align 8
  %1240 = getelementptr inbounds %struct.NodeInfo.148, %struct.NodeInfo.148* %1232, i64 0, i32 3
  store i64 %1126, i64* %1240, align 8
  %1241 = getelementptr inbounds %struct.NodeInfo.148, %struct.NodeInfo.148* %1232, i64 0, i32 4
  %1242 = bitcast %"struct.std::__1::array"* %1241 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1242, i8* nonnull align 8 %188, i64 16, i1 false)
  %1243 = getelementptr inbounds %struct.NodeInfo.148, %struct.NodeInfo.148* %1232, i64 1
  %1244 = ptrtoint %struct.NodeInfo.148* %1243 to i64
  store i64 %1244, i64* %185, align 8
  br label %1293

1245:                                             ; preds = %1226
  %1246 = ptrtoint %struct.NodeInfo.148* %1232 to i64
  %1247 = load i64, i64* %186, align 8
  %1248 = sub i64 %1246, %1247
  %1249 = sdiv exact i64 %1248, 48
  %1250 = add nsw i64 %1249, 1
  %1251 = icmp ugt i64 %1250, 384307168202282325
  br i1 %1251, label %1252, label %1254

1252:                                             ; preds = %1245
  %1253 = bitcast %"class.std::__1::vector.146"* %8 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %1253) #28
  unreachable

1254:                                             ; preds = %1245
  %1255 = sub i64 %1235, %1247
  %1256 = sdiv exact i64 %1255, 48
  %1257 = icmp ult i64 %1256, 192153584101141162
  br i1 %1257, label %1258, label %1263

1258:                                             ; preds = %1254
  %1259 = shl nsw i64 %1256, 1
  %1260 = icmp ult i64 %1259, %1250
  %1261 = select i1 %1260, i64 %1250, i64 %1259
  %1262 = icmp eq i64 %1261, 0
  br i1 %1262, label %1268, label %1263

1263:                                             ; preds = %1258, %1254
  %1264 = phi i64 [ %1261, %1258 ], [ 384307168202282325, %1254 ]
  %1265 = mul i64 %1264, 48
  %1266 = call i8* @_Znwm(i64 %1265) #29
  %1267 = bitcast i8* %1266 to %struct.NodeInfo.148*
  br label %1268

1268:                                             ; preds = %1263, %1258
  %1269 = phi i64 [ %1264, %1263 ], [ 0, %1258 ]
  %1270 = phi %struct.NodeInfo.148* [ %1267, %1263 ], [ null, %1258 ]
  %1271 = getelementptr inbounds %struct.NodeInfo.148, %struct.NodeInfo.148* %1270, i64 %1249
  %1272 = getelementptr inbounds %struct.NodeInfo.148, %struct.NodeInfo.148* %1270, i64 %1269
  %1273 = ptrtoint %struct.NodeInfo.148* %1272 to i64
  %1274 = getelementptr inbounds %struct.NodeInfo.148, %struct.NodeInfo.148* %1271, i64 0, i32 0
  store i64 %1230, i64* %1274, align 8
  %1275 = getelementptr inbounds %struct.NodeInfo.148, %struct.NodeInfo.148* %1270, i64 %1249, i32 1
  store i64 %1231, i64* %1275, align 8
  %1276 = getelementptr inbounds %struct.NodeInfo.148, %struct.NodeInfo.148* %1270, i64 %1249, i32 2
  store i64 %197, i64* %1276, align 8
  %1277 = getelementptr inbounds %struct.NodeInfo.148, %struct.NodeInfo.148* %1270, i64 %1249, i32 3
  store i64 %1126, i64* %1277, align 8
  %1278 = getelementptr inbounds %struct.NodeInfo.148, %struct.NodeInfo.148* %1270, i64 %1249, i32 4
  %1279 = bitcast %"struct.std::__1::array"* %1278 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1279, i8* nonnull align 8 %188, i64 16, i1 false)
  %1280 = getelementptr inbounds %struct.NodeInfo.148, %struct.NodeInfo.148* %1271, i64 1
  %1281 = ptrtoint %struct.NodeInfo.148* %1280 to i64
  %1282 = sdiv exact i64 %1248, -48
  %1283 = getelementptr inbounds %struct.NodeInfo.148, %struct.NodeInfo.148* %1271, i64 %1282
  %1284 = ptrtoint %struct.NodeInfo.148* %1283 to i64
  %1285 = icmp sgt i64 %1248, 0
  br i1 %1285, label %1286, label %1289

1286:                                             ; preds = %1268
  %1287 = bitcast %struct.NodeInfo.148* %1283 to i8*
  %1288 = inttoptr i64 %1247 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1287, i8* align 8 %1288, i64 %1248, i1 false) #24
  br label %1289

1289:                                             ; preds = %1286, %1268
  store i64 %1284, i64* %186, align 8
  store i64 %1281, i64* %185, align 8
  store i64 %1273, i64* %187, align 8
  %1290 = icmp eq i64 %1247, 0
  br i1 %1290, label %1293, label %1291

1291:                                             ; preds = %1289
  %1292 = inttoptr i64 %1247 to i8*
  call void @_ZdlPv(i8* %1292) #29
  br label %1293

1293:                                             ; preds = %1236, %1289, %1291
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %188)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %180) #24
  br label %1294

1294:                                             ; preds = %1293, %1041
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %128) #24
  %1295 = load i32*, i32** %118, align 8
  %1296 = icmp eq i32* %1295, null
  br i1 %1296, label %1300, label %1297

1297:                                             ; preds = %1294
  %1298 = ptrtoint i32* %1295 to i64
  store i64 %1298, i64* %123, align 8
  %1299 = bitcast i32* %1295 to i8*
  call void @_ZdlPv(i8* %1299) #29
  br label %1300

1300:                                             ; preds = %1294, %1297
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %117) #24
  %1301 = load i32*, i32** %112, align 8
  %1302 = icmp eq i32* %1301, null
  br i1 %1302, label %1306, label %1303

1303:                                             ; preds = %1300
  %1304 = ptrtoint i32* %1301 to i64
  store i64 %1304, i64* %116, align 8
  %1305 = bitcast i32* %1301 to i8*
  call void @_ZdlPv(i8* %1305) #29
  br label %1306

1306:                                             ; preds = %1300, %1303
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %111) #24
  %1307 = load i32*, i32** %106, align 8
  %1308 = icmp eq i32* %1307, null
  br i1 %1308, label %1312, label %1309

1309:                                             ; preds = %1306
  %1310 = ptrtoint i32* %1307 to i64
  store i64 %1310, i64* %110, align 8
  %1311 = bitcast i32* %1307 to i8*
  call void @_ZdlPv(i8* %1311) #29
  br label %1312

1312:                                             ; preds = %1306, %1309
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %105) #24
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %95) #24
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %87) #24
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %79) #24
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %71) #24
  %1313 = load %struct.NodeInfo.148*, %struct.NodeInfo.148** %28, align 8
  br label %1314

1314:                                             ; preds = %189, %1312
  %1315 = phi %struct.NodeInfo.148* [ %191, %189 ], [ %1313, %1312 ]
  %1316 = load %struct.NodeInfo.148*, %struct.NodeInfo.148** %27, align 8
  %1317 = icmp eq %struct.NodeInfo.148* %1316, %1315
  br i1 %1317, label %1318, label %189

1318:                                             ; preds = %1314
  %1319 = icmp eq %struct.NodeInfo.148* %1315, null
  br i1 %1319, label %1324, label %1320

1320:                                             ; preds = %1318
  %1321 = ptrtoint %struct.NodeInfo.148* %1315 to i64
  %1322 = bitcast %struct.NodeInfo.148** %28 to i64*
  store i64 %1321, i64* %1322, align 8
  %1323 = bitcast %struct.NodeInfo.148* %1315 to i8*
  call void @_ZdlPv(i8* %1323) #29
  br label %1324

1324:                                             ; preds = %1318, %1320
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %26) #24
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZNSt3__16vectorIZN3jxl8N_SCALAR13FindBestSplitERNS1_11TreeSamplesEfRKNS0_INS1_21ModularMultiplierInfoENS_9allocatorIS5_EEEENS_5arrayINSB_IjLm2EEELm2EEEfPNS0_INS1_20PropertyDecisionNodeENS6_ISE_EEEEE8CostInfoNS6_ISI_EEE6resizeEm(%"class.std::__1::vector.155"*, i64) unnamed_addr #8 align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.155", %"class.std::__1::vector.155"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %struct.CostInfo.157** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.155"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = sdiv exact i64 %8, 12
  %10 = icmp ult i64 %9, %1
  %11 = inttoptr i64 %7 to %struct.CostInfo.157*
  br i1 %10, label %12, label %87

12:                                               ; preds = %2
  %13 = sub i64 %1, %9
  %14 = getelementptr inbounds %"class.std::__1::vector.155", %"class.std::__1::vector.155"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %15 = bitcast %struct.CostInfo.157** %14 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = sub i64 %16, %5
  %18 = sdiv exact i64 %17, 12
  %19 = icmp ult i64 %18, %13
  br i1 %19, label %35, label %20

20:                                               ; preds = %12
  %21 = inttoptr i64 %5 to %struct.CostInfo.157*
  %22 = getelementptr inbounds %struct.CostInfo.157, %struct.CostInfo.157* %21, i64 %13
  %23 = icmp eq i64 %13, 0
  br i1 %23, label %33, label %26

24:                                               ; preds = %26
  %25 = ptrtoint %struct.CostInfo.157* %22 to i64
  br label %33

26:                                               ; preds = %20, %26
  %27 = phi %struct.CostInfo.157* [ %31, %26 ], [ %21, %20 ]
  %28 = getelementptr inbounds %struct.CostInfo.157, %struct.CostInfo.157* %27, i64 0, i32 2
  store i32 0, i32* %28, align 4
  %29 = getelementptr inbounds %struct.CostInfo.157, %struct.CostInfo.157* %27, i64 0, i32 0
  store float 0x47EFFFFFE0000000, float* %29, align 4
  %30 = getelementptr inbounds %struct.CostInfo.157, %struct.CostInfo.157* %27, i64 0, i32 1
  store float 0.000000e+00, float* %30, align 4
  %31 = getelementptr inbounds %struct.CostInfo.157, %struct.CostInfo.157* %27, i64 1
  %32 = icmp eq %struct.CostInfo.157* %31, %22
  br i1 %32, label %24, label %26

33:                                               ; preds = %24, %20
  %34 = phi i64 [ %25, %24 ], [ %5, %20 ]
  store i64 %34, i64* %4, align 8
  br label %91

35:                                               ; preds = %12
  %36 = icmp ugt i64 %1, 1537228672809129301
  br i1 %36, label %37, label %39

37:                                               ; preds = %35
  %38 = bitcast %"class.std::__1::vector.155"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %38) #28
  unreachable

39:                                               ; preds = %35
  %40 = sub i64 %16, %7
  %41 = sdiv exact i64 %40, 12
  %42 = icmp ult i64 %41, 768614336404564650
  br i1 %42, label %43, label %48

43:                                               ; preds = %39
  %44 = shl nsw i64 %41, 1
  %45 = icmp ult i64 %44, %1
  %46 = select i1 %45, i64 %1, i64 %44
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %53, label %48

48:                                               ; preds = %43, %39
  %49 = phi i64 [ %46, %43 ], [ 1537228672809129301, %39 ]
  %50 = mul i64 %49, 12
  %51 = tail call i8* @_Znwm(i64 %50) #29
  %52 = bitcast i8* %51 to %struct.CostInfo.157*
  br label %53

53:                                               ; preds = %48, %43
  %54 = phi i64 [ %49, %48 ], [ 0, %43 ]
  %55 = phi %struct.CostInfo.157* [ %52, %48 ], [ null, %43 ]
  %56 = getelementptr inbounds %struct.CostInfo.157, %struct.CostInfo.157* %55, i64 %9
  %57 = getelementptr inbounds %struct.CostInfo.157, %struct.CostInfo.157* %55, i64 %1
  br label %58

58:                                               ; preds = %58, %53
  %59 = phi %struct.CostInfo.157* [ %63, %58 ], [ %56, %53 ]
  %60 = getelementptr inbounds %struct.CostInfo.157, %struct.CostInfo.157* %59, i64 0, i32 2
  store i32 0, i32* %60, align 4
  %61 = getelementptr inbounds %struct.CostInfo.157, %struct.CostInfo.157* %59, i64 0, i32 0
  store float 0x47EFFFFFE0000000, float* %61, align 4
  %62 = getelementptr inbounds %struct.CostInfo.157, %struct.CostInfo.157* %59, i64 0, i32 1
  store float 0.000000e+00, float* %62, align 4
  %63 = getelementptr inbounds %struct.CostInfo.157, %struct.CostInfo.157* %59, i64 1
  %64 = icmp eq %struct.CostInfo.157* %57, %63
  br i1 %64, label %65, label %58

65:                                               ; preds = %58
  %66 = getelementptr inbounds %struct.CostInfo.157, %struct.CostInfo.157* %55, i64 %54
  %67 = ptrtoint %struct.CostInfo.157* %66 to i64
  %68 = ptrtoint %struct.CostInfo.157* %57 to i64
  %69 = getelementptr inbounds %"class.std::__1::vector.155", %"class.std::__1::vector.155"* %0, i64 0, i32 0, i32 0
  %70 = load %struct.CostInfo.157*, %struct.CostInfo.157** %69, align 8
  %71 = load i64, i64* %4, align 8
  %72 = ptrtoint %struct.CostInfo.157* %70 to i64
  %73 = sub i64 %71, %72
  %74 = sdiv exact i64 %73, -12
  %75 = getelementptr inbounds %struct.CostInfo.157, %struct.CostInfo.157* %56, i64 %74
  %76 = ptrtoint %struct.CostInfo.157* %75 to i64
  %77 = icmp sgt i64 %73, 0
  br i1 %77, label %78, label %82

78:                                               ; preds = %65
  %79 = bitcast %struct.CostInfo.157* %75 to i8*
  %80 = bitcast %struct.CostInfo.157* %70 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %79, i8* align 4 %80, i64 %73, i1 false) #24
  %81 = load %struct.CostInfo.157*, %struct.CostInfo.157** %69, align 8
  br label %82

82:                                               ; preds = %78, %65
  %83 = phi %struct.CostInfo.157* [ %70, %65 ], [ %81, %78 ]
  store i64 %76, i64* %6, align 8
  store i64 %68, i64* %4, align 8
  store i64 %67, i64* %15, align 8
  %84 = icmp eq %struct.CostInfo.157* %83, null
  br i1 %84, label %91, label %85

85:                                               ; preds = %82
  %86 = bitcast %struct.CostInfo.157* %83 to i8*
  tail call void @_ZdlPv(i8* %86) #29
  br label %91

87:                                               ; preds = %2
  %88 = icmp ugt i64 %9, %1
  br i1 %88, label %89, label %91

89:                                               ; preds = %87
  %90 = getelementptr inbounds %struct.CostInfo.157, %struct.CostInfo.157* %11, i64 %1
  store %struct.CostInfo.157* %90, %struct.CostInfo.157** %3, align 8
  br label %91

91:                                               ; preds = %85, %82, %33, %87, %89
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl15ComputeBestTreeERNS_11TreeSamplesEfRKNSt3__16vectorINS_21ModularMultiplierInfoENS2_9allocatorIS4_EEEENS2_5arrayINSA_IjLm2EEELm2EEEfPNS3_INS_20PropertyDecisionNodeENS5_ISD_EEEE(%"struct.jxl::TreeSamples"* dereferenceable(200), float, %"class.std::__1::vector.69"* dereferenceable(24), i64, i64, float, %"class.std::__1::vector"*) local_unnamed_addr #8 {
  tail call void @_ZNSt3__16vectorIN3jxl20PropertyDecisionNodeENS_9allocatorIS2_EEE12emplace_backIJEEEvDpOT_(%"class.std::__1::vector"* %6)
  %8 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %6, i64 0, i32 0, i32 1
  %9 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %8, align 8
  %10 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %9, i64 -1, i32 1
  store i16 -1, i16* %10, align 4
  %11 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 5, i32 0, i32 0
  %12 = load i32*, i32** %11, align 8
  %13 = load i32, i32* %12, align 4
  %14 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %8, align 8
  %15 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %14, i64 -1, i32 5
  store i32 %13, i32* %15, align 8
  %16 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %8, align 8
  %17 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %16, i64 -1, i32 7
  store i64 0, i64* %17, align 8
  %18 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %8, align 8
  %19 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %18, i64 -1, i32 8
  store i32 1, i32* %19, align 8
  %20 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 4
  %21 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 4, i32 0, i32 1
  %22 = bitcast i32** %21 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = bitcast %"class.std::__1::vector.55"* %20 to i64*
  %25 = load i64, i64* %24, align 8
  %26 = sub i64 %23, %25
  %27 = ashr exact i64 %26, 2
  %28 = icmp ult i64 %27, 64
  br i1 %28, label %32, label %29

29:                                               ; preds = %7
  %30 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.1, i64 0, i64 0), i32 532, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.7, i64 0, i64 0)) #24
  %31 = tail call zeroext i1 @_ZN3jxl5AbortEv() #28
  unreachable

32:                                               ; preds = %7
  %33 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 1
  %34 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 1, i32 0, i32 1
  %35 = bitcast i16** %34 to i64*
  %36 = load i64, i64* %35, align 8
  %37 = bitcast %"class.std::__1::vector.20"* %33 to i64*
  %38 = load i64, i64* %37, align 8
  %39 = sub i64 %36, %38
  %40 = ashr exact i64 %39, 1
  %41 = icmp ugt i64 %40, 4294967295
  br i1 %41, label %42, label %45

42:                                               ; preds = %32
  %43 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.1, i64 0, i64 0), i32 535, i8* getelementptr inbounds ([74 x i8], [74 x i8]* @.str.8, i64 0, i64 0)) #24
  %44 = tail call zeroext i1 @_ZN3jxl5AbortEv() #28
  unreachable

45:                                               ; preds = %32
  %46 = load atomic i32, i32* getelementptr inbounds (%"struct.hwy::ChosenTarget", %"struct.hwy::ChosenTarget"* @_ZN3hwy13chosen_targetE, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) seq_cst, align 4
  %47 = and i32 %46, 2225
  %48 = tail call i32 @llvm.cttz.i32(i32 %47, i1 true) #24, !range !299
  %49 = zext i32 %48 to i64
  %50 = getelementptr inbounds [12 x void (%"struct.jxl::TreeSamples"*, float, %"class.std::__1::vector.69"*, i64, i64, float, %"class.std::__1::vector"*)*], [12 x void (%"struct.jxl::TreeSamples"*, float, %"class.std::__1::vector.69"*, i64, i64, float, %"class.std::__1::vector"*)*]* @_ZN3jxlL33FindBestSplitHighwayDispatchTableE, i64 0, i64 %49
  %51 = load void (%"struct.jxl::TreeSamples"*, float, %"class.std::__1::vector.69"*, i64, i64, float, %"class.std::__1::vector"*)*, void (%"struct.jxl::TreeSamples"*, float, %"class.std::__1::vector.69"*, i64, i64, float, %"class.std::__1::vector"*)** %50, align 8
  tail call void %51(%"struct.jxl::TreeSamples"* dereferenceable(200) %0, float %1, %"class.std::__1::vector.69"* dereferenceable(24) %2, i64 %3, i64 %4, float %5, %"class.std::__1::vector"* %6) #24
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl11TreeSamples12SetPredictorENS_9PredictorENS_14ModularOptions10WPTreeModeE(%"struct.jxl::TreeSamples"*, i32, i32) local_unnamed_addr #8 align 2 {
  %4 = alloca [1 x i32], align 4
  %5 = icmp eq i32 %2, 0
  br i1 %5, label %6, label %40

6:                                                ; preds = %3
  %7 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 5
  tail call void @_ZNSt3__16vectorIN3jxl9PredictorENS_9allocatorIS2_EEE6assignIPKS2_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsISA_E9referenceEEE5valueEvE4typeESA_SA_(%"class.std::__1::vector.62"* %7, i32* getelementptr inbounds ([1 x i32], [1 x i32]* @.ref.tmp, i64 0, i64 0), i32* getelementptr inbounds ([1 x i32], [1 x i32]* @.ref.tmp, i64 1, i64 0)) #24
  %8 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 0, i32 0, i32 1
  %9 = bitcast %"class.std::__1::vector.8"** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %"struct.jxl::TreeSamples"* %0 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = sub i64 %10, %12
  %14 = sdiv exact i64 %13, 24
  %15 = icmp eq i64 %13, 0
  %16 = inttoptr i64 %12 to %"class.std::__1::vector.8"*
  %17 = inttoptr i64 %10 to %"class.std::__1::vector.8"*
  br i1 %15, label %18, label %21

18:                                               ; preds = %6
  %19 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 0
  %20 = sub nuw nsw i64 1, %14
  tail call void @_ZNSt3__16vectorINS0_IN3jxl11TreeSamples13ResidualTokenENS_9allocatorIS3_EEEENS4_IS6_EEE8__appendEm(%"class.std::__1::vector.6"* %19, i64 %20) #24
  br label %208

21:                                               ; preds = %6
  %22 = icmp ugt i64 %14, 1
  br i1 %22, label %23, label %208

23:                                               ; preds = %21
  %24 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %16, i64 1
  %25 = icmp eq %"class.std::__1::vector.8"* %24, %17
  br i1 %25, label %39, label %26

26:                                               ; preds = %23, %37
  %27 = phi %"class.std::__1::vector.8"* [ %28, %37 ], [ %17, %23 ]
  %28 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %27, i64 -1
  %29 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %28, i64 0, i32 0, i32 0
  %30 = load %"struct.jxl::TreeSamples::ResidualToken"*, %"struct.jxl::TreeSamples::ResidualToken"** %29, align 8
  %31 = icmp eq %"struct.jxl::TreeSamples::ResidualToken"* %30, null
  br i1 %31, label %37, label %32

32:                                               ; preds = %26
  %33 = ptrtoint %"struct.jxl::TreeSamples::ResidualToken"* %30 to i64
  %34 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %27, i64 -1, i32 0, i32 1
  %35 = bitcast %"struct.jxl::TreeSamples::ResidualToken"** %34 to i64*
  store i64 %33, i64* %35, align 8
  %36 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %30, i64 0, i32 0
  tail call void @_ZdlPv(i8* %36) #29
  br label %37

37:                                               ; preds = %32, %26
  %38 = icmp eq %"class.std::__1::vector.8"* %28, %24
  br i1 %38, label %39, label %26

39:                                               ; preds = %37, %23
  store %"class.std::__1::vector.8"* %24, %"class.std::__1::vector.8"** %8, align 8
  br label %208

40:                                               ; preds = %3
  %41 = icmp eq i32 %2, 1
  %42 = icmp eq i32 %1, 6
  %43 = and i1 %42, %41
  br i1 %43, label %208, label %44

44:                                               ; preds = %40
  switch i32 %1, label %130 [
    i32 15, label %45
    i32 14, label %128
  ]

45:                                               ; preds = %44
  %46 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 5
  %47 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 5, i32 0, i32 1
  %48 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 5, i32 0, i32 2, i32 0, i32 0
  %49 = bitcast i32** %47 to i64*
  %50 = bitcast %"class.std::__1::vector.62"* %46 to i64*
  %51 = bitcast i32** %48 to i64*
  %52 = getelementptr inbounds %"class.std::__1::vector.62", %"class.std::__1::vector.62"* %46, i64 0, i32 0, i32 0
  br label %63

53:                                               ; preds = %125
  %54 = load i32*, i32** %52, align 8
  %55 = getelementptr inbounds i32, i32* %54, i64 6
  %56 = load i32, i32* %54, align 4
  %57 = load i32, i32* %55, align 4
  store i32 %57, i32* %54, align 4
  store i32 %56, i32* %55, align 4
  %58 = load i32*, i32** %52, align 8
  %59 = getelementptr inbounds i32, i32* %58, i64 1
  %60 = getelementptr inbounds i32, i32* %58, i64 5
  %61 = load i32, i32* %59, align 4
  %62 = load i32, i32* %60, align 4
  store i32 %62, i32* %59, align 4
  store i32 %61, i32* %60, align 4
  br label %135

63:                                               ; preds = %125, %45
  %64 = phi i64 [ 0, %45 ], [ %126, %125 ]
  %65 = trunc i64 %64 to i32
  %66 = load i32*, i32** %47, align 8
  %67 = load i32*, i32** %48, align 8
  %68 = icmp ult i32* %66, %67
  %69 = ptrtoint i32* %67 to i64
  br i1 %68, label %70, label %73

70:                                               ; preds = %63
  store i32 %65, i32* %66, align 4
  %71 = getelementptr inbounds i32, i32* %66, i64 1
  %72 = ptrtoint i32* %71 to i64
  store i64 %72, i64* %49, align 8
  br label %125

73:                                               ; preds = %63
  %74 = ptrtoint i32* %66 to i64
  %75 = load i64, i64* %50, align 8
  %76 = sub i64 %74, %75
  %77 = ashr exact i64 %76, 2
  %78 = add nsw i64 %77, 1
  %79 = icmp ugt i64 %78, 4611686018427387903
  br i1 %79, label %80, label %82

80:                                               ; preds = %73
  %81 = bitcast %"class.std::__1::vector.62"* %46 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %81) #28
  unreachable

82:                                               ; preds = %73
  %83 = sub i64 %69, %75
  %84 = ashr exact i64 %83, 2
  %85 = icmp ult i64 %84, 2305843009213693951
  br i1 %85, label %86, label %94

86:                                               ; preds = %82
  %87 = ashr exact i64 %83, 1
  %88 = icmp ult i64 %87, %78
  %89 = select i1 %88, i64 %78, i64 %87
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %99, label %91

91:                                               ; preds = %86
  %92 = icmp ugt i64 %89, 4611686018427387903
  br i1 %92, label %93, label %94

93:                                               ; preds = %91
  tail call void @abort() #28
  unreachable

94:                                               ; preds = %91, %82
  %95 = phi i64 [ %89, %91 ], [ 4611686018427387903, %82 ]
  %96 = shl i64 %95, 2
  %97 = tail call i8* @_Znwm(i64 %96) #29
  %98 = bitcast i8* %97 to i32*
  br label %99

99:                                               ; preds = %94, %86
  %100 = phi i64 [ %95, %94 ], [ 0, %86 ]
  %101 = phi i32* [ %98, %94 ], [ null, %86 ]
  %102 = getelementptr inbounds i32, i32* %101, i64 %77
  %103 = getelementptr inbounds i32, i32* %101, i64 %100
  %104 = ptrtoint i32* %103 to i64
  store i32 %65, i32* %102, align 4
  %105 = getelementptr inbounds i32, i32* %102, i64 1
  %106 = ptrtoint i32* %105 to i64
  %107 = load i32*, i32** %52, align 8
  %108 = load i64, i64* %49, align 8
  %109 = ptrtoint i32* %107 to i64
  %110 = sub i64 %108, %109
  %111 = ashr exact i64 %110, 2
  %112 = sub nsw i64 0, %111
  %113 = getelementptr inbounds i32, i32* %102, i64 %112
  %114 = ptrtoint i32* %113 to i64
  %115 = icmp sgt i64 %110, 0
  br i1 %115, label %116, label %120

116:                                              ; preds = %99
  %117 = bitcast i32* %113 to i8*
  %118 = bitcast i32* %107 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %117, i8* align 4 %118, i64 %110, i1 false) #24
  %119 = load i32*, i32** %52, align 8
  br label %120

120:                                              ; preds = %116, %99
  %121 = phi i32* [ %107, %99 ], [ %119, %116 ]
  store i64 %114, i64* %50, align 8
  store i64 %106, i64* %49, align 8
  store i64 %104, i64* %51, align 8
  %122 = icmp eq i32* %121, null
  br i1 %122, label %125, label %123

123:                                              ; preds = %120
  %124 = bitcast i32* %121 to i8*
  tail call void @_ZdlPv(i8* %124) #29
  br label %125

125:                                              ; preds = %70, %120, %123
  %126 = add nuw nsw i64 %64, 1
  %127 = icmp eq i64 %126, 14
  br i1 %127, label %53, label %63

128:                                              ; preds = %44
  %129 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 5
  tail call void @_ZNSt3__16vectorIN3jxl9PredictorENS_9allocatorIS2_EEE6assignIPKS2_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsISA_E9referenceEEE5valueEvE4typeESA_SA_(%"class.std::__1::vector.62"* %129, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.ref.tmp.10, i64 0, i64 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.ref.tmp.10, i64 1, i64 0)) #24
  br label %135

130:                                              ; preds = %44
  %131 = bitcast [1 x i32]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %131) #24
  %132 = getelementptr inbounds [1 x i32], [1 x i32]* %4, i64 0, i64 0
  store i32 %1, i32* %132, align 4
  %133 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 5
  %134 = getelementptr inbounds [1 x i32], [1 x i32]* %4, i64 0, i64 1
  call void @_ZNSt3__16vectorIN3jxl9PredictorENS_9allocatorIS2_EEE6assignIPKS2_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsISA_E9referenceEEE5valueEvE4typeESA_SA_(%"class.std::__1::vector.62"* %133, i32* nonnull %132, i32* %134) #24
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %131) #24
  br label %135

135:                                              ; preds = %128, %130, %53
  br i1 %41, label %140, label %136

136:                                              ; preds = %135
  %137 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 5, i32 0, i32 1
  %138 = bitcast i32** %137 to i64*
  %139 = load i64, i64* %138, align 8
  br label %169

140:                                              ; preds = %135
  %141 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 5, i32 0, i32 0
  %142 = load i32*, i32** %141, align 8
  %143 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 5, i32 0, i32 1
  %144 = load i32*, i32** %143, align 8
  %145 = icmp eq i32* %142, %144
  %146 = ptrtoint i32* %144 to i64
  br i1 %145, label %154, label %147

147:                                              ; preds = %140, %151
  %148 = phi i32* [ %152, %151 ], [ %142, %140 ]
  %149 = load i32, i32* %148, align 4
  %150 = icmp eq i32 %149, 6
  br i1 %150, label %154, label %151

151:                                              ; preds = %147
  %152 = getelementptr inbounds i32, i32* %148, i64 1
  %153 = icmp eq i32* %152, %144
  br i1 %153, label %169, label %147

154:                                              ; preds = %147, %140
  %155 = phi i32* [ %142, %140 ], [ %148, %147 ]
  %156 = icmp eq i32* %155, %144
  br i1 %156, label %169, label %157

157:                                              ; preds = %154
  %158 = getelementptr inbounds i32, i32* %155, i64 1
  %159 = ptrtoint i32* %158 to i64
  %160 = sub i64 %146, %159
  %161 = ashr exact i64 %160, 2
  %162 = icmp eq i64 %160, 0
  br i1 %162, label %166, label %163

163:                                              ; preds = %157
  %164 = bitcast i32* %155 to i8*
  %165 = bitcast i32* %158 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %164, i8* align 4 %165, i64 %160, i1 false) #24
  br label %166

166:                                              ; preds = %157, %163
  %167 = getelementptr inbounds i32, i32* %155, i64 %161
  store i32* %167, i32** %143, align 8
  %168 = ptrtoint i32* %167 to i64
  br label %169

169:                                              ; preds = %151, %136, %154, %166
  %170 = phi i64 [ %139, %136 ], [ %146, %154 ], [ %168, %166 ], [ %146, %151 ]
  %171 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 5
  %172 = bitcast %"class.std::__1::vector.62"* %171 to i64*
  %173 = load i64, i64* %172, align 8
  %174 = sub i64 %170, %173
  %175 = ashr exact i64 %174, 2
  %176 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 0, i32 0, i32 1
  %177 = bitcast %"class.std::__1::vector.8"** %176 to i64*
  %178 = load i64, i64* %177, align 8
  %179 = bitcast %"struct.jxl::TreeSamples"* %0 to i64*
  %180 = load i64, i64* %179, align 8
  %181 = sub i64 %178, %180
  %182 = sdiv exact i64 %181, 24
  %183 = icmp ugt i64 %175, %182
  %184 = inttoptr i64 %180 to %"class.std::__1::vector.8"*
  %185 = inttoptr i64 %178 to %"class.std::__1::vector.8"*
  br i1 %183, label %186, label %189

186:                                              ; preds = %169
  %187 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 0
  %188 = sub nsw i64 %175, %182
  call void @_ZNSt3__16vectorINS0_IN3jxl11TreeSamples13ResidualTokenENS_9allocatorIS3_EEEENS4_IS6_EEE8__appendEm(%"class.std::__1::vector.6"* %187, i64 %188) #24
  br label %208

189:                                              ; preds = %169
  %190 = icmp ult i64 %175, %182
  br i1 %190, label %191, label %208

191:                                              ; preds = %189
  %192 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %184, i64 %175
  %193 = icmp eq %"class.std::__1::vector.8"* %192, %185
  br i1 %193, label %207, label %194

194:                                              ; preds = %191, %205
  %195 = phi %"class.std::__1::vector.8"* [ %196, %205 ], [ %185, %191 ]
  %196 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %195, i64 -1
  %197 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %196, i64 0, i32 0, i32 0
  %198 = load %"struct.jxl::TreeSamples::ResidualToken"*, %"struct.jxl::TreeSamples::ResidualToken"** %197, align 8
  %199 = icmp eq %"struct.jxl::TreeSamples::ResidualToken"* %198, null
  br i1 %199, label %205, label %200

200:                                              ; preds = %194
  %201 = ptrtoint %"struct.jxl::TreeSamples::ResidualToken"* %198 to i64
  %202 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %195, i64 -1, i32 0, i32 1
  %203 = bitcast %"struct.jxl::TreeSamples::ResidualToken"** %202 to i64*
  store i64 %201, i64* %203, align 8
  %204 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %198, i64 0, i32 0
  call void @_ZdlPv(i8* %204) #29
  br label %205

205:                                              ; preds = %200, %194
  %206 = icmp eq %"class.std::__1::vector.8"* %196, %192
  br i1 %206, label %207, label %194

207:                                              ; preds = %205, %191
  store %"class.std::__1::vector.8"* %192, %"class.std::__1::vector.8"** %176, align 8
  br label %208

208:                                              ; preds = %207, %189, %186, %40, %39, %21, %18
  %209 = phi i32 [ 0, %18 ], [ 0, %21 ], [ 0, %39 ], [ 1, %40 ], [ 0, %186 ], [ 0, %189 ], [ 0, %207 ]
  ret i32 %209
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl11TreeSamples13SetPropertiesERKNSt3__16vectorIjNS1_9allocatorIjEEEENS_14ModularOptions10WPTreeModeE(%"struct.jxl::TreeSamples"*, %"class.std::__1::vector.55"* readonly dereferenceable(24), i32) local_unnamed_addr #8 align 2 {
  %4 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 4
  %5 = icmp eq %"class.std::__1::vector.55"* %4, %1
  br i1 %5, label %11, label %6

6:                                                ; preds = %3
  %7 = getelementptr inbounds %"class.std::__1::vector.55", %"class.std::__1::vector.55"* %1, i64 0, i32 0, i32 0
  %8 = load i32*, i32** %7, align 8
  %9 = getelementptr inbounds %"class.std::__1::vector.55", %"class.std::__1::vector.55"* %1, i64 0, i32 0, i32 1
  %10 = load i32*, i32** %9, align 8
  tail call void @_ZNSt3__16vectorIjNS_9allocatorIjEEE6assignIPjEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIjNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_(%"class.std::__1::vector.55"* %4, i32* %8, i32* %10) #24
  br label %11

11:                                               ; preds = %3, %6
  switch i32 %2, label %41 [
    i32 0, label %12
    i32 1, label %13
  ]

12:                                               ; preds = %11
  tail call void @_ZNSt3__16vectorIjNS_9allocatorIjEEE6assignIPKjEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIjNS_15iterator_traitsIS8_E9referenceEEE5valueEvE4typeES8_S8_(%"class.std::__1::vector.55"* %4, i32* getelementptr inbounds ([1 x i32], [1 x i32]* @.ref.tmp.11, i64 0, i64 0), i32* getelementptr inbounds ([1 x i32], [1 x i32]* @.ref.tmp.11, i64 1, i64 0)) #24
  br label %41

13:                                               ; preds = %11
  %14 = getelementptr inbounds %"class.std::__1::vector.55", %"class.std::__1::vector.55"* %4, i64 0, i32 0, i32 0
  %15 = load i32*, i32** %14, align 8
  %16 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 4, i32 0, i32 1
  %17 = load i32*, i32** %16, align 8
  %18 = icmp eq i32* %15, %17
  %19 = ptrtoint i32* %17 to i64
  br i1 %18, label %27, label %20

20:                                               ; preds = %13, %24
  %21 = phi i32* [ %25, %24 ], [ %15, %13 ]
  %22 = load i32, i32* %21, align 4
  %23 = icmp eq i32 %22, 15
  br i1 %23, label %27, label %24

24:                                               ; preds = %20
  %25 = getelementptr inbounds i32, i32* %21, i64 1
  %26 = icmp eq i32* %25, %17
  br i1 %26, label %41, label %20

27:                                               ; preds = %20, %13
  %28 = phi i32* [ %15, %13 ], [ %21, %20 ]
  %29 = icmp eq i32* %28, %17
  br i1 %29, label %41, label %30

30:                                               ; preds = %27
  %31 = getelementptr inbounds i32, i32* %28, i64 1
  %32 = ptrtoint i32* %31 to i64
  %33 = sub i64 %19, %32
  %34 = ashr exact i64 %33, 2
  %35 = icmp eq i64 %33, 0
  br i1 %35, label %39, label %36

36:                                               ; preds = %30
  %37 = bitcast i32* %28 to i8*
  %38 = bitcast i32* %31 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %37, i8* align 4 %38, i64 %33, i1 false) #24
  br label %39

39:                                               ; preds = %30, %36
  %40 = getelementptr inbounds i32, i32* %28, i64 %34
  store i32* %40, i32** %16, align 8
  br label %41

41:                                               ; preds = %24, %27, %39, %12, %11
  %42 = getelementptr inbounds %"class.std::__1::vector.55", %"class.std::__1::vector.55"* %4, i64 0, i32 0, i32 0
  %43 = load i32*, i32** %42, align 8
  %44 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 4, i32 0, i32 1
  %45 = load i32*, i32** %44, align 8
  %46 = icmp eq i32* %43, %45
  br i1 %46, label %83, label %47

47:                                               ; preds = %41
  %48 = ptrtoint i32* %43 to i64
  %49 = ptrtoint i32* %45 to i64
  %50 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 2
  %51 = sub i64 %49, %48
  %52 = ashr exact i64 %51, 2
  %53 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 2, i32 0, i32 1
  %54 = bitcast %"class.std::__1::vector.29"** %53 to i64*
  %55 = load i64, i64* %54, align 8
  %56 = bitcast %"class.std::__1::vector.27"* %50 to i64*
  %57 = load i64, i64* %56, align 8
  %58 = sub i64 %55, %57
  %59 = sdiv exact i64 %58, 24
  %60 = icmp ugt i64 %52, %59
  %61 = inttoptr i64 %57 to %"class.std::__1::vector.29"*
  %62 = inttoptr i64 %55 to %"class.std::__1::vector.29"*
  br i1 %60, label %63, label %65

63:                                               ; preds = %47
  %64 = sub nsw i64 %52, %59
  tail call void @_ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEE8__appendEm(%"class.std::__1::vector.27"* %50, i64 %64) #24
  br label %83

65:                                               ; preds = %47
  %66 = icmp ult i64 %52, %59
  br i1 %66, label %67, label %83

67:                                               ; preds = %65
  %68 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %61, i64 %52
  %69 = icmp eq %"class.std::__1::vector.29"* %68, %62
  br i1 %69, label %82, label %70

70:                                               ; preds = %67, %80
  %71 = phi %"class.std::__1::vector.29"* [ %72, %80 ], [ %62, %67 ]
  %72 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %71, i64 -1
  %73 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %72, i64 0, i32 0, i32 0
  %74 = load i8*, i8** %73, align 8
  %75 = icmp eq i8* %74, null
  br i1 %75, label %80, label %76

76:                                               ; preds = %70
  %77 = ptrtoint i8* %74 to i64
  %78 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %71, i64 -1, i32 0, i32 1
  %79 = bitcast i8** %78 to i64*
  store i64 %77, i64* %79, align 8
  tail call void @_ZdlPv(i8* nonnull %74) #29
  br label %80

80:                                               ; preds = %76, %70
  %81 = icmp eq %"class.std::__1::vector.29"* %72, %68
  br i1 %81, label %82, label %70

82:                                               ; preds = %80, %67
  store %"class.std::__1::vector.29"* %68, %"class.std::__1::vector.29"** %53, align 8
  br label %83

83:                                               ; preds = %82, %65, %63, %41
  %84 = phi i32 [ 1, %41 ], [ 0, %63 ], [ 0, %65 ], [ 0, %82 ]
  ret i32 %84
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl11TreeSamples9InitTableEm(%"struct.jxl::TreeSamples"*, i64) local_unnamed_addr #8 align 2 {
  %3 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 8
  %4 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 8, i32 0, i32 1
  %5 = bitcast i32** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast %"class.std::__1::vector.55"* %3 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %6, %8
  %10 = ashr exact i64 %9, 2
  %11 = icmp eq i64 %10, %1
  br i1 %11, label %47, label %12

12:                                               ; preds = %2
  %13 = icmp ult i64 %10, %1
  %14 = inttoptr i64 %8 to i32*
  br i1 %13, label %15, label %17

15:                                               ; preds = %12
  %16 = sub i64 %1, %10
  tail call void @_ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEmRKj(%"class.std::__1::vector.55"* %3, i64 %16, i32* nonnull dereferenceable(4) @_ZN3jxl11TreeSamples17kDedupEntryUnusedE) #24
  br label %21

17:                                               ; preds = %12
  %18 = icmp ugt i64 %10, %1
  br i1 %18, label %19, label %21

19:                                               ; preds = %17
  %20 = getelementptr inbounds i32, i32* %14, i64 %1
  store i32* %20, i32** %4, align 8
  br label %21

21:                                               ; preds = %15, %17, %19
  %22 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 1
  %23 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 1, i32 0, i32 1
  %24 = bitcast i16** %23 to i64*
  %25 = load i64, i64* %24, align 8
  %26 = bitcast %"class.std::__1::vector.20"* %22 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = icmp eq i64 %25, %27
  br i1 %28, label %47, label %29

29:                                               ; preds = %21, %40
  %30 = phi i64 [ %41, %40 ], [ %27, %21 ]
  %31 = phi i64 [ %42, %40 ], [ %25, %21 ]
  %32 = phi i64 [ %43, %40 ], [ 0, %21 ]
  %33 = inttoptr i64 %30 to i16*
  %34 = getelementptr inbounds i16, i16* %33, i64 %32
  %35 = load i16, i16* %34, align 2
  %36 = icmp eq i16 %35, -1
  br i1 %36, label %40, label %37

37:                                               ; preds = %29
  tail call void @_ZN3jxl11TreeSamples10AddToTableEm(%"struct.jxl::TreeSamples"* %0, i64 %32)
  %38 = load i64, i64* %24, align 8
  %39 = load i64, i64* %26, align 8
  br label %40

40:                                               ; preds = %29, %37
  %41 = phi i64 [ %30, %29 ], [ %39, %37 ]
  %42 = phi i64 [ %31, %29 ], [ %38, %37 ]
  %43 = add nuw i64 %32, 1
  %44 = sub i64 %42, %41
  %45 = ashr exact i64 %44, 1
  %46 = icmp ult i64 %43, %45
  br i1 %46, label %29, label %47

47:                                               ; preds = %40, %21, %2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN3jxl11TreeSamples10AddToTableEm(%"struct.jxl::TreeSamples"* nocapture readonly, i64) local_unnamed_addr #19 align 2 {
  %3 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 0, i32 0, i32 0
  %4 = load %"class.std::__1::vector.8"*, %"class.std::__1::vector.8"** %3, align 8
  %5 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 0, i32 0, i32 1
  %6 = load %"class.std::__1::vector.8"*, %"class.std::__1::vector.8"** %5, align 8
  %7 = icmp eq %"class.std::__1::vector.8"* %4, %6
  br i1 %7, label %8, label %15

8:                                                ; preds = %15, %2
  %9 = phi i64 [ 506832829, %2 ], [ %29, %15 ]
  %10 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 2, i32 0, i32 0
  %11 = load %"class.std::__1::vector.29"*, %"class.std::__1::vector.29"** %10, align 8
  %12 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 2, i32 0, i32 1
  %13 = load %"class.std::__1::vector.29"*, %"class.std::__1::vector.29"** %12, align 8
  %14 = icmp eq %"class.std::__1::vector.29"* %11, %13
  br i1 %14, label %44, label %32

15:                                               ; preds = %2, %15
  %16 = phi i64 [ %29, %15 ], [ 506832829, %2 ]
  %17 = phi %"class.std::__1::vector.8"* [ %30, %15 ], [ %4, %2 ]
  %18 = mul i64 %16, 506832829
  %19 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %17, i64 0, i32 0, i32 0
  %20 = load %"struct.jxl::TreeSamples::ResidualToken"*, %"struct.jxl::TreeSamples::ResidualToken"** %19, align 8
  %21 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %20, i64 %1, i32 0
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i64
  %24 = add i64 %18, %23
  %25 = mul i64 %24, 506832829
  %26 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %20, i64 %1, i32 1
  %27 = load i8, i8* %26, align 1
  %28 = zext i8 %27 to i64
  %29 = add i64 %25, %28
  %30 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %17, i64 1
  %31 = icmp eq %"class.std::__1::vector.8"* %30, %6
  br i1 %31, label %8, label %15

32:                                               ; preds = %8, %32
  %33 = phi i64 [ %41, %32 ], [ %9, %8 ]
  %34 = phi %"class.std::__1::vector.29"* [ %42, %32 ], [ %11, %8 ]
  %35 = mul i64 %33, 506832829
  %36 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %34, i64 0, i32 0, i32 0
  %37 = load i8*, i8** %36, align 8
  %38 = getelementptr inbounds i8, i8* %37, i64 %1
  %39 = load i8, i8* %38, align 1
  %40 = zext i8 %39 to i64
  %41 = add i64 %35, %40
  %42 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %34, i64 1
  %43 = icmp eq %"class.std::__1::vector.29"* %42, %13
  br i1 %43, label %44, label %32

44:                                               ; preds = %32, %8
  %45 = phi i64 [ %9, %8 ], [ %41, %32 ]
  %46 = lshr i64 %45, 16
  %47 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 8
  %48 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 8, i32 0, i32 1
  %49 = bitcast i32** %48 to i64*
  %50 = load i64, i64* %49, align 8
  %51 = bitcast %"class.std::__1::vector.55"* %47 to i64*
  %52 = load i64, i64* %51, align 8
  %53 = sub i64 %50, %52
  %54 = lshr exact i64 %53, 2
  %55 = add nuw nsw i64 %54, 281474976710655
  %56 = and i64 %55, %46
  %57 = inttoptr i64 %52 to i32*
  br i1 %14, label %58, label %60

58:                                               ; preds = %60, %44
  %59 = phi i64 [ 2176830425600993213, %44 ], [ %69, %60 ]
  br i1 %7, label %89, label %72

60:                                               ; preds = %44, %60
  %61 = phi i64 [ %69, %60 ], [ 2176830425600993213, %44 ]
  %62 = phi %"class.std::__1::vector.29"* [ %70, %60 ], [ %11, %44 ]
  %63 = mul i64 %61, 2176830425600993213
  %64 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %62, i64 0, i32 0, i32 0
  %65 = load i8*, i8** %64, align 8
  %66 = getelementptr inbounds i8, i8* %65, i64 %1
  %67 = load i8, i8* %66, align 1
  %68 = zext i8 %67 to i64
  %69 = xor i64 %63, %68
  %70 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %62, i64 1
  %71 = icmp eq %"class.std::__1::vector.29"* %70, %13
  br i1 %71, label %58, label %60

72:                                               ; preds = %58, %72
  %73 = phi i64 [ %86, %72 ], [ %59, %58 ]
  %74 = phi %"class.std::__1::vector.8"* [ %87, %72 ], [ %4, %58 ]
  %75 = mul i64 %73, 2176830425600993213
  %76 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %74, i64 0, i32 0, i32 0
  %77 = load %"struct.jxl::TreeSamples::ResidualToken"*, %"struct.jxl::TreeSamples::ResidualToken"** %76, align 8
  %78 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %77, i64 %1, i32 0
  %79 = load i8, i8* %78, align 1
  %80 = zext i8 %79 to i64
  %81 = xor i64 %75, %80
  %82 = mul i64 %81, 2176830425600993213
  %83 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %77, i64 %1, i32 1
  %84 = load i8, i8* %83, align 1
  %85 = zext i8 %84 to i64
  %86 = xor i64 %82, %85
  %87 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %74, i64 1
  %88 = icmp eq %"class.std::__1::vector.8"* %87, %6
  br i1 %88, label %89, label %72

89:                                               ; preds = %72, %58
  %90 = phi i64 [ %59, %58 ], [ %86, %72 ]
  %91 = getelementptr inbounds i32, i32* %57, i64 %56
  %92 = load i32, i32* %91, align 4
  %93 = icmp eq i32 %92, -1
  br i1 %93, label %100, label %94

94:                                               ; preds = %89
  %95 = lshr i64 %90, 16
  %96 = and i64 %95, %55
  %97 = getelementptr inbounds i32, i32* %57, i64 %96
  %98 = load i32, i32* %97, align 4
  %99 = icmp eq i32 %98, -1
  br i1 %99, label %100, label %103

100:                                              ; preds = %94, %89
  %101 = phi i32* [ %91, %89 ], [ %97, %94 ]
  %102 = trunc i64 %1 to i32
  store i32 %102, i32* %101, align 4
  br label %103

103:                                              ; preds = %100, %94
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN3jxl11TreeSamples18AddToTableAndMergeEm(%"struct.jxl::TreeSamples"* readonly, i64) local_unnamed_addr #19 align 2 {
  %3 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 0, i32 0, i32 0
  %4 = load %"class.std::__1::vector.8"*, %"class.std::__1::vector.8"** %3, align 8
  %5 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 0, i32 0, i32 1
  %6 = load %"class.std::__1::vector.8"*, %"class.std::__1::vector.8"** %5, align 8
  %7 = icmp eq %"class.std::__1::vector.8"* %4, %6
  br i1 %7, label %8, label %15

8:                                                ; preds = %15, %2
  %9 = phi i64 [ 506832829, %2 ], [ %29, %15 ]
  %10 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 2, i32 0, i32 0
  %11 = load %"class.std::__1::vector.29"*, %"class.std::__1::vector.29"** %10, align 8
  %12 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 2, i32 0, i32 1
  %13 = load %"class.std::__1::vector.29"*, %"class.std::__1::vector.29"** %12, align 8
  %14 = icmp eq %"class.std::__1::vector.29"* %11, %13
  br i1 %14, label %44, label %32

15:                                               ; preds = %2, %15
  %16 = phi i64 [ %29, %15 ], [ 506832829, %2 ]
  %17 = phi %"class.std::__1::vector.8"* [ %30, %15 ], [ %4, %2 ]
  %18 = mul i64 %16, 506832829
  %19 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %17, i64 0, i32 0, i32 0
  %20 = load %"struct.jxl::TreeSamples::ResidualToken"*, %"struct.jxl::TreeSamples::ResidualToken"** %19, align 8
  %21 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %20, i64 %1, i32 0
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i64
  %24 = add i64 %18, %23
  %25 = mul i64 %24, 506832829
  %26 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %20, i64 %1, i32 1
  %27 = load i8, i8* %26, align 1
  %28 = zext i8 %27 to i64
  %29 = add i64 %25, %28
  %30 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %17, i64 1
  %31 = icmp eq %"class.std::__1::vector.8"* %30, %6
  br i1 %31, label %8, label %15

32:                                               ; preds = %8, %32
  %33 = phi i64 [ %41, %32 ], [ %9, %8 ]
  %34 = phi %"class.std::__1::vector.29"* [ %42, %32 ], [ %11, %8 ]
  %35 = mul i64 %33, 506832829
  %36 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %34, i64 0, i32 0, i32 0
  %37 = load i8*, i8** %36, align 8
  %38 = getelementptr inbounds i8, i8* %37, i64 %1
  %39 = load i8, i8* %38, align 1
  %40 = zext i8 %39 to i64
  %41 = add i64 %35, %40
  %42 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %34, i64 1
  %43 = icmp eq %"class.std::__1::vector.29"* %42, %13
  br i1 %43, label %44, label %32

44:                                               ; preds = %32, %8
  %45 = phi i64 [ %9, %8 ], [ %41, %32 ]
  %46 = lshr i64 %45, 16
  %47 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 8
  %48 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 8, i32 0, i32 1
  %49 = bitcast i32** %48 to i64*
  %50 = load i64, i64* %49, align 8
  %51 = bitcast %"class.std::__1::vector.55"* %47 to i64*
  %52 = load i64, i64* %51, align 8
  %53 = sub i64 %50, %52
  %54 = lshr exact i64 %53, 2
  %55 = add nuw nsw i64 %54, 281474976710655
  %56 = and i64 %55, %46
  %57 = inttoptr i64 %52 to i32*
  br i1 %14, label %58, label %60

58:                                               ; preds = %60, %44
  %59 = phi i64 [ 2176830425600993213, %44 ], [ %69, %60 ]
  br i1 %7, label %89, label %72

60:                                               ; preds = %44, %60
  %61 = phi i64 [ %69, %60 ], [ 2176830425600993213, %44 ]
  %62 = phi %"class.std::__1::vector.29"* [ %70, %60 ], [ %11, %44 ]
  %63 = mul i64 %61, 2176830425600993213
  %64 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %62, i64 0, i32 0, i32 0
  %65 = load i8*, i8** %64, align 8
  %66 = getelementptr inbounds i8, i8* %65, i64 %1
  %67 = load i8, i8* %66, align 1
  %68 = zext i8 %67 to i64
  %69 = xor i64 %63, %68
  %70 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %62, i64 1
  %71 = icmp eq %"class.std::__1::vector.29"* %70, %13
  br i1 %71, label %58, label %60

72:                                               ; preds = %58, %72
  %73 = phi i64 [ %86, %72 ], [ %59, %58 ]
  %74 = phi %"class.std::__1::vector.8"* [ %87, %72 ], [ %4, %58 ]
  %75 = mul i64 %73, 2176830425600993213
  %76 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %74, i64 0, i32 0, i32 0
  %77 = load %"struct.jxl::TreeSamples::ResidualToken"*, %"struct.jxl::TreeSamples::ResidualToken"** %76, align 8
  %78 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %77, i64 %1, i32 0
  %79 = load i8, i8* %78, align 1
  %80 = zext i8 %79 to i64
  %81 = xor i64 %75, %80
  %82 = mul i64 %81, 2176830425600993213
  %83 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %77, i64 %1, i32 1
  %84 = load i8, i8* %83, align 1
  %85 = zext i8 %84 to i64
  %86 = xor i64 %82, %85
  %87 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %74, i64 1
  %88 = icmp eq %"class.std::__1::vector.8"* %87, %6
  br i1 %88, label %89, label %72

89:                                               ; preds = %72, %58
  %90 = phi i64 [ %59, %58 ], [ %86, %72 ]
  %91 = lshr i64 %90, 16
  %92 = and i64 %91, %55
  %93 = getelementptr inbounds %"class.std::__1::vector.55", %"class.std::__1::vector.55"* %47, i64 0, i32 0, i32 0
  %94 = getelementptr inbounds i32, i32* %57, i64 %56
  %95 = load i32, i32* %94, align 4
  %96 = icmp eq i32 %95, -1
  br i1 %96, label %152, label %97

97:                                               ; preds = %89
  %98 = zext i32 %95 to i64
  br i1 %7, label %99, label %101

99:                                               ; preds = %101, %97
  %100 = phi i8 [ 1, %97 ], [ %117, %101 ]
  br i1 %14, label %133, label %120

101:                                              ; preds = %97, %101
  %102 = phi i8 [ %117, %101 ], [ 1, %97 ]
  %103 = phi %"class.std::__1::vector.8"* [ %118, %101 ], [ %4, %97 ]
  %104 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %103, i64 0, i32 0, i32 0
  %105 = load %"struct.jxl::TreeSamples::ResidualToken"*, %"struct.jxl::TreeSamples::ResidualToken"** %104, align 8
  %106 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %105, i64 %1, i32 0
  %107 = load i8, i8* %106, align 1
  %108 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %105, i64 %98, i32 0
  %109 = load i8, i8* %108, align 1
  %110 = icmp eq i8 %107, %109
  %111 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %105, i64 %1, i32 1
  %112 = load i8, i8* %111, align 1
  %113 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %105, i64 %98, i32 1
  %114 = load i8, i8* %113, align 1
  %115 = icmp eq i8 %112, %114
  %116 = and i1 %110, %115
  %117 = select i1 %116, i8 %102, i8 0
  %118 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %103, i64 1
  %119 = icmp eq %"class.std::__1::vector.8"* %118, %6
  br i1 %119, label %99, label %101

120:                                              ; preds = %99, %120
  %121 = phi i8 [ %130, %120 ], [ %100, %99 ]
  %122 = phi %"class.std::__1::vector.29"* [ %131, %120 ], [ %11, %99 ]
  %123 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %122, i64 0, i32 0, i32 0
  %124 = load i8*, i8** %123, align 8
  %125 = getelementptr inbounds i8, i8* %124, i64 %1
  %126 = load i8, i8* %125, align 1
  %127 = getelementptr inbounds i8, i8* %124, i64 %98
  %128 = load i8, i8* %127, align 1
  %129 = icmp eq i8 %126, %128
  %130 = select i1 %129, i8 %121, i8 0
  %131 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %122, i64 1
  %132 = icmp eq %"class.std::__1::vector.29"* %131, %13
  br i1 %132, label %133, label %120

133:                                              ; preds = %120, %99
  %134 = phi i8 [ %100, %99 ], [ %130, %120 ]
  %135 = and i8 %134, 1
  %136 = icmp eq i8 %135, 0
  br i1 %136, label %152, label %137

137:                                              ; preds = %133
  %138 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 1, i32 0, i32 0
  %139 = load i16*, i16** %138, align 8
  %140 = getelementptr inbounds i16, i16* %139, i64 %98
  %141 = load i16, i16* %140, align 2
  %142 = add i16 %141, 1
  store i16 %142, i16* %140, align 2
  %143 = load i32*, i32** %93, align 8
  %144 = getelementptr inbounds i32, i32* %143, i64 %56
  %145 = load i32, i32* %144, align 4
  %146 = zext i32 %145 to i64
  %147 = load i16*, i16** %138, align 8
  %148 = getelementptr inbounds i16, i16* %147, i64 %146
  %149 = load i16, i16* %148, align 2
  %150 = icmp eq i16 %149, -1
  br i1 %150, label %151, label %212

151:                                              ; preds = %137
  store i32 -1, i32* %144, align 4
  br label %212

152:                                              ; preds = %133, %89
  %153 = getelementptr inbounds i32, i32* %57, i64 %92
  %154 = load i32, i32* %153, align 4
  %155 = icmp eq i32 %154, -1
  br i1 %155, label %211, label %156

156:                                              ; preds = %152
  %157 = zext i32 %154 to i64
  br i1 %7, label %158, label %160

158:                                              ; preds = %160, %156
  %159 = phi i8 [ 1, %156 ], [ %176, %160 ]
  br i1 %14, label %192, label %179

160:                                              ; preds = %156, %160
  %161 = phi i8 [ %176, %160 ], [ 1, %156 ]
  %162 = phi %"class.std::__1::vector.8"* [ %177, %160 ], [ %4, %156 ]
  %163 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %162, i64 0, i32 0, i32 0
  %164 = load %"struct.jxl::TreeSamples::ResidualToken"*, %"struct.jxl::TreeSamples::ResidualToken"** %163, align 8
  %165 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %164, i64 %1, i32 0
  %166 = load i8, i8* %165, align 1
  %167 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %164, i64 %157, i32 0
  %168 = load i8, i8* %167, align 1
  %169 = icmp eq i8 %166, %168
  %170 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %164, i64 %1, i32 1
  %171 = load i8, i8* %170, align 1
  %172 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %164, i64 %157, i32 1
  %173 = load i8, i8* %172, align 1
  %174 = icmp eq i8 %171, %173
  %175 = and i1 %169, %174
  %176 = select i1 %175, i8 %161, i8 0
  %177 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %162, i64 1
  %178 = icmp eq %"class.std::__1::vector.8"* %177, %6
  br i1 %178, label %158, label %160

179:                                              ; preds = %158, %179
  %180 = phi i8 [ %189, %179 ], [ %159, %158 ]
  %181 = phi %"class.std::__1::vector.29"* [ %190, %179 ], [ %11, %158 ]
  %182 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %181, i64 0, i32 0, i32 0
  %183 = load i8*, i8** %182, align 8
  %184 = getelementptr inbounds i8, i8* %183, i64 %1
  %185 = load i8, i8* %184, align 1
  %186 = getelementptr inbounds i8, i8* %183, i64 %157
  %187 = load i8, i8* %186, align 1
  %188 = icmp eq i8 %185, %187
  %189 = select i1 %188, i8 %180, i8 0
  %190 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %181, i64 1
  %191 = icmp eq %"class.std::__1::vector.29"* %190, %13
  br i1 %191, label %192, label %179

192:                                              ; preds = %179, %158
  %193 = phi i8 [ %159, %158 ], [ %189, %179 ]
  %194 = and i8 %193, 1
  %195 = icmp eq i8 %194, 0
  br i1 %195, label %211, label %196

196:                                              ; preds = %192
  %197 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 1, i32 0, i32 0
  %198 = load i16*, i16** %197, align 8
  %199 = getelementptr inbounds i16, i16* %198, i64 %157
  %200 = load i16, i16* %199, align 2
  %201 = add i16 %200, 1
  store i16 %201, i16* %199, align 2
  %202 = load i32*, i32** %93, align 8
  %203 = getelementptr inbounds i32, i32* %202, i64 %92
  %204 = load i32, i32* %203, align 4
  %205 = zext i32 %204 to i64
  %206 = load i16*, i16** %197, align 8
  %207 = getelementptr inbounds i16, i16* %206, i64 %205
  %208 = load i16, i16* %207, align 2
  %209 = icmp eq i16 %208, -1
  br i1 %209, label %210, label %212

210:                                              ; preds = %196
  store i32 -1, i32* %203, align 4
  br label %212

211:                                              ; preds = %192, %152
  tail call void @_ZN3jxl11TreeSamples10AddToTableEm(%"struct.jxl::TreeSamples"* %0, i64 %1)
  br label %212

212:                                              ; preds = %196, %210, %137, %151, %211
  %213 = phi i1 [ false, %211 ], [ true, %151 ], [ true, %137 ], [ true, %210 ], [ true, %196 ]
  ret i1 %213
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i64 @_ZNK3jxl11TreeSamples5Hash1Em(%"struct.jxl::TreeSamples"* nocapture readonly, i64) local_unnamed_addr #20 align 2 {
  %3 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 0, i32 0, i32 0
  %4 = load %"class.std::__1::vector.8"*, %"class.std::__1::vector.8"** %3, align 8
  %5 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 0, i32 0, i32 1
  %6 = load %"class.std::__1::vector.8"*, %"class.std::__1::vector.8"** %5, align 8
  %7 = icmp eq %"class.std::__1::vector.8"* %4, %6
  br i1 %7, label %8, label %15

8:                                                ; preds = %15, %2
  %9 = phi i64 [ 506832829, %2 ], [ %29, %15 ]
  %10 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 2, i32 0, i32 0
  %11 = load %"class.std::__1::vector.29"*, %"class.std::__1::vector.29"** %10, align 8
  %12 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 2, i32 0, i32 1
  %13 = load %"class.std::__1::vector.29"*, %"class.std::__1::vector.29"** %12, align 8
  %14 = icmp eq %"class.std::__1::vector.29"* %11, %13
  br i1 %14, label %32, label %45

15:                                               ; preds = %2, %15
  %16 = phi i64 [ %29, %15 ], [ 506832829, %2 ]
  %17 = phi %"class.std::__1::vector.8"* [ %30, %15 ], [ %4, %2 ]
  %18 = mul i64 %16, 506832829
  %19 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %17, i64 0, i32 0, i32 0
  %20 = load %"struct.jxl::TreeSamples::ResidualToken"*, %"struct.jxl::TreeSamples::ResidualToken"** %19, align 8
  %21 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %20, i64 %1, i32 0
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i64
  %24 = add i64 %18, %23
  %25 = mul i64 %24, 506832829
  %26 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %20, i64 %1, i32 1
  %27 = load i8, i8* %26, align 1
  %28 = zext i8 %27 to i64
  %29 = add i64 %25, %28
  %30 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %17, i64 1
  %31 = icmp eq %"class.std::__1::vector.8"* %30, %6
  br i1 %31, label %8, label %15

32:                                               ; preds = %45, %8
  %33 = phi i64 [ %9, %8 ], [ %54, %45 ]
  %34 = lshr i64 %33, 16
  %35 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 8
  %36 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 8, i32 0, i32 1
  %37 = bitcast i32** %36 to i64*
  %38 = load i64, i64* %37, align 8
  %39 = bitcast %"class.std::__1::vector.55"* %35 to i64*
  %40 = load i64, i64* %39, align 8
  %41 = sub i64 %38, %40
  %42 = lshr exact i64 %41, 2
  %43 = add nuw nsw i64 %42, 281474976710655
  %44 = and i64 %43, %34
  ret i64 %44

45:                                               ; preds = %8, %45
  %46 = phi i64 [ %54, %45 ], [ %9, %8 ]
  %47 = phi %"class.std::__1::vector.29"* [ %55, %45 ], [ %11, %8 ]
  %48 = mul i64 %46, 506832829
  %49 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %47, i64 0, i32 0, i32 0
  %50 = load i8*, i8** %49, align 8
  %51 = getelementptr inbounds i8, i8* %50, i64 %1
  %52 = load i8, i8* %51, align 1
  %53 = zext i8 %52 to i64
  %54 = add i64 %48, %53
  %55 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %47, i64 1
  %56 = icmp eq %"class.std::__1::vector.29"* %55, %13
  br i1 %56, label %32, label %45
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i64 @_ZNK3jxl11TreeSamples5Hash2Em(%"struct.jxl::TreeSamples"* nocapture readonly, i64) local_unnamed_addr #20 align 2 {
  %3 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 2, i32 0, i32 0
  %4 = load %"class.std::__1::vector.29"*, %"class.std::__1::vector.29"** %3, align 8
  %5 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 2, i32 0, i32 1
  %6 = load %"class.std::__1::vector.29"*, %"class.std::__1::vector.29"** %5, align 8
  %7 = icmp eq %"class.std::__1::vector.29"* %4, %6
  br i1 %7, label %8, label %15

8:                                                ; preds = %15, %2
  %9 = phi i64 [ 2176830425600993213, %2 ], [ %24, %15 ]
  %10 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 0, i32 0, i32 0
  %11 = load %"class.std::__1::vector.8"*, %"class.std::__1::vector.8"** %10, align 8
  %12 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 0, i32 0, i32 1
  %13 = load %"class.std::__1::vector.8"*, %"class.std::__1::vector.8"** %12, align 8
  %14 = icmp eq %"class.std::__1::vector.8"* %11, %13
  br i1 %14, label %27, label %40

15:                                               ; preds = %2, %15
  %16 = phi i64 [ %24, %15 ], [ 2176830425600993213, %2 ]
  %17 = phi %"class.std::__1::vector.29"* [ %25, %15 ], [ %4, %2 ]
  %18 = mul i64 %16, 2176830425600993213
  %19 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %17, i64 0, i32 0, i32 0
  %20 = load i8*, i8** %19, align 8
  %21 = getelementptr inbounds i8, i8* %20, i64 %1
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i64
  %24 = xor i64 %18, %23
  %25 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %17, i64 1
  %26 = icmp eq %"class.std::__1::vector.29"* %25, %6
  br i1 %26, label %8, label %15

27:                                               ; preds = %40, %8
  %28 = phi i64 [ %9, %8 ], [ %54, %40 ]
  %29 = lshr i64 %28, 16
  %30 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 8
  %31 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 8, i32 0, i32 1
  %32 = bitcast i32** %31 to i64*
  %33 = load i64, i64* %32, align 8
  %34 = bitcast %"class.std::__1::vector.55"* %30 to i64*
  %35 = load i64, i64* %34, align 8
  %36 = sub i64 %33, %35
  %37 = lshr exact i64 %36, 2
  %38 = add nuw nsw i64 %37, 281474976710655
  %39 = and i64 %38, %29
  ret i64 %39

40:                                               ; preds = %8, %40
  %41 = phi i64 [ %54, %40 ], [ %9, %8 ]
  %42 = phi %"class.std::__1::vector.8"* [ %55, %40 ], [ %11, %8 ]
  %43 = mul i64 %41, 2176830425600993213
  %44 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %42, i64 0, i32 0, i32 0
  %45 = load %"struct.jxl::TreeSamples::ResidualToken"*, %"struct.jxl::TreeSamples::ResidualToken"** %44, align 8
  %46 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %45, i64 %1, i32 0
  %47 = load i8, i8* %46, align 1
  %48 = zext i8 %47 to i64
  %49 = xor i64 %43, %48
  %50 = mul i64 %49, 2176830425600993213
  %51 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %45, i64 %1, i32 1
  %52 = load i8, i8* %51, align 1
  %53 = zext i8 %52 to i64
  %54 = xor i64 %50, %53
  %55 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %42, i64 1
  %56 = icmp eq %"class.std::__1::vector.8"* %55, %13
  br i1 %56, label %27, label %40
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK3jxl11TreeSamples12IsSameSampleEmm(%"struct.jxl::TreeSamples"* nocapture readonly, i64, i64) local_unnamed_addr #20 align 2 {
  %4 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 0, i32 0, i32 0
  %5 = load %"class.std::__1::vector.8"*, %"class.std::__1::vector.8"** %4, align 8
  %6 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 0, i32 0, i32 1
  %7 = load %"class.std::__1::vector.8"*, %"class.std::__1::vector.8"** %6, align 8
  %8 = icmp eq %"class.std::__1::vector.8"* %5, %7
  br i1 %8, label %9, label %16

9:                                                ; preds = %16, %3
  %10 = phi i8 [ 1, %3 ], [ %32, %16 ]
  %11 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 2, i32 0, i32 0
  %12 = load %"class.std::__1::vector.29"*, %"class.std::__1::vector.29"** %11, align 8
  %13 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 2, i32 0, i32 1
  %14 = load %"class.std::__1::vector.29"*, %"class.std::__1::vector.29"** %13, align 8
  %15 = icmp eq %"class.std::__1::vector.29"* %12, %14
  br i1 %15, label %35, label %39

16:                                               ; preds = %3, %16
  %17 = phi i8 [ %32, %16 ], [ 1, %3 ]
  %18 = phi %"class.std::__1::vector.8"* [ %33, %16 ], [ %5, %3 ]
  %19 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %18, i64 0, i32 0, i32 0
  %20 = load %"struct.jxl::TreeSamples::ResidualToken"*, %"struct.jxl::TreeSamples::ResidualToken"** %19, align 8
  %21 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %20, i64 %1, i32 0
  %22 = load i8, i8* %21, align 1
  %23 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %20, i64 %2, i32 0
  %24 = load i8, i8* %23, align 1
  %25 = icmp eq i8 %22, %24
  %26 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %20, i64 %1, i32 1
  %27 = load i8, i8* %26, align 1
  %28 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %20, i64 %2, i32 1
  %29 = load i8, i8* %28, align 1
  %30 = icmp eq i8 %27, %29
  %31 = and i1 %25, %30
  %32 = select i1 %31, i8 %17, i8 0
  %33 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %18, i64 1
  %34 = icmp eq %"class.std::__1::vector.8"* %33, %7
  br i1 %34, label %9, label %16

35:                                               ; preds = %39, %9
  %36 = phi i8 [ %10, %9 ], [ %49, %39 ]
  %37 = and i8 %36, 1
  %38 = icmp ne i8 %37, 0
  ret i1 %38

39:                                               ; preds = %9, %39
  %40 = phi i8 [ %49, %39 ], [ %10, %9 ]
  %41 = phi %"class.std::__1::vector.29"* [ %50, %39 ], [ %12, %9 ]
  %42 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %41, i64 0, i32 0, i32 0
  %43 = load i8*, i8** %42, align 8
  %44 = getelementptr inbounds i8, i8* %43, i64 %1
  %45 = load i8, i8* %44, align 1
  %46 = getelementptr inbounds i8, i8* %43, i64 %2
  %47 = load i8, i8* %46, align 1
  %48 = icmp eq i8 %45, %47
  %49 = select i1 %48, i8 %40, i8 0
  %50 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %41, i64 1
  %51 = icmp eq %"class.std::__1::vector.29"* %50, %14
  br i1 %51, label %35, label %39
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl11TreeSamples17PrepareForSamplesEm(%"struct.jxl::TreeSamples"*, i64) local_unnamed_addr #8 align 2 {
  %3 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 0, i32 0, i32 0
  %4 = load %"class.std::__1::vector.8"*, %"class.std::__1::vector.8"** %3, align 8
  %5 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 0, i32 0, i32 1
  %6 = load %"class.std::__1::vector.8"*, %"class.std::__1::vector.8"** %5, align 8
  %7 = icmp eq %"class.std::__1::vector.8"* %4, %6
  br i1 %7, label %8, label %14

8:                                                ; preds = %50, %2
  %9 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 2, i32 0, i32 0
  %10 = load %"class.std::__1::vector.29"*, %"class.std::__1::vector.29"** %9, align 8
  %11 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 2, i32 0, i32 1
  %12 = load %"class.std::__1::vector.29"*, %"class.std::__1::vector.29"** %11, align 8
  %13 = icmp eq %"class.std::__1::vector.29"* %10, %12
  br i1 %13, label %53, label %115

14:                                               ; preds = %2, %50
  %15 = phi %"class.std::__1::vector.8"* [ %51, %50 ], [ %4, %2 ]
  %16 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %15, i64 0, i32 0, i32 1
  %17 = bitcast %"struct.jxl::TreeSamples::ResidualToken"** %16 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = bitcast %"class.std::__1::vector.8"* %15 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = sub i64 %18, %20
  %22 = ashr exact i64 %21, 1
  %23 = add i64 %22, %1
  %24 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %15, i64 0, i32 0, i32 2, i32 0, i32 0
  %25 = bitcast %"struct.jxl::TreeSamples::ResidualToken"** %24 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = sub i64 %26, %20
  %28 = ashr exact i64 %27, 1
  %29 = icmp ult i64 %28, %23
  %30 = inttoptr i64 %20 to %"struct.jxl::TreeSamples::ResidualToken"*
  br i1 %29, label %31, label %50

31:                                               ; preds = %14
  %32 = icmp slt i64 %23, 0
  br i1 %32, label %33, label %34

33:                                               ; preds = %31
  tail call void @abort() #28
  unreachable

34:                                               ; preds = %31
  %35 = shl i64 %23, 1
  %36 = tail call i8* @_Znwm(i64 %35) #29
  %37 = bitcast i8* %36 to %"struct.jxl::TreeSamples::ResidualToken"*
  %38 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %37, i64 %22
  %39 = ptrtoint %"struct.jxl::TreeSamples::ResidualToken"* %38 to i64
  %40 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %37, i64 %23
  %41 = ptrtoint %"struct.jxl::TreeSamples::ResidualToken"* %40 to i64
  %42 = ptrtoint i8* %36 to i64
  %43 = icmp sgt i64 %21, 0
  br i1 %43, label %44, label %46

44:                                               ; preds = %34
  %45 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %30, i64 0, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %36, i8* align 1 %45, i64 %21, i1 false) #24
  br label %46

46:                                               ; preds = %44, %34
  store i64 %42, i64* %19, align 8
  store i64 %39, i64* %17, align 8
  store i64 %41, i64* %25, align 8
  %47 = icmp eq i64 %20, 0
  br i1 %47, label %50, label %48

48:                                               ; preds = %46
  %49 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %30, i64 0, i32 0
  tail call void @_ZdlPv(i8* %49) #29
  br label %50

50:                                               ; preds = %14, %46, %48
  %51 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %15, i64 1
  %52 = icmp eq %"class.std::__1::vector.8"* %51, %6
  br i1 %52, label %8, label %14

53:                                               ; preds = %142, %8
  %54 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 1
  %55 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 1, i32 0, i32 1
  %56 = bitcast i16** %55 to i64*
  %57 = load i64, i64* %56, align 8
  %58 = bitcast %"class.std::__1::vector.20"* %54 to i64*
  %59 = load i64, i64* %58, align 8
  %60 = sub i64 %57, %59
  %61 = ashr exact i64 %60, 1
  %62 = add i64 %61, %1
  %63 = mul i64 %62, 3
  %64 = lshr i64 %63, 1
  %65 = tail call i64 @llvm.ctlz.i64(i64 %64, i1 true) #24, !range !300
  %66 = xor i64 %65, 63
  %67 = tail call i64 @llvm.ctpop.i64(i64 %64) #24, !range !300
  %68 = icmp ugt i64 %67, 1
  %69 = zext i1 %68 to i64
  %70 = add nuw nsw i64 %66, %69
  %71 = shl i64 1, %70
  %72 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 8
  %73 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 8, i32 0, i32 1
  %74 = bitcast i32** %73 to i64*
  %75 = load i64, i64* %74, align 8
  %76 = bitcast %"class.std::__1::vector.55"* %72 to i64*
  %77 = load i64, i64* %76, align 8
  %78 = sub i64 %75, %77
  %79 = ashr exact i64 %78, 2
  %80 = icmp eq i64 %71, %79
  br i1 %80, label %114, label %81

81:                                               ; preds = %53
  %82 = icmp ugt i64 %71, %79
  %83 = inttoptr i64 %77 to i32*
  br i1 %82, label %84, label %88

84:                                               ; preds = %81
  %85 = sub i64 %71, %79
  tail call void @_ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEmRKj(%"class.std::__1::vector.55"* %72, i64 %85, i32* nonnull dereferenceable(4) @_ZN3jxl11TreeSamples17kDedupEntryUnusedE) #24
  %86 = load i64, i64* %56, align 8
  %87 = load i64, i64* %58, align 8
  br label %92

88:                                               ; preds = %81
  %89 = icmp ult i64 %71, %79
  br i1 %89, label %90, label %92

90:                                               ; preds = %88
  %91 = getelementptr inbounds i32, i32* %83, i64 %71
  store i32* %91, i32** %73, align 8
  br label %92

92:                                               ; preds = %90, %88, %84
  %93 = phi i64 [ %59, %90 ], [ %59, %88 ], [ %87, %84 ]
  %94 = phi i64 [ %57, %90 ], [ %57, %88 ], [ %86, %84 ]
  %95 = icmp eq i64 %94, %93
  br i1 %95, label %114, label %96

96:                                               ; preds = %92, %107
  %97 = phi i64 [ %108, %107 ], [ %93, %92 ]
  %98 = phi i64 [ %109, %107 ], [ %94, %92 ]
  %99 = phi i64 [ %110, %107 ], [ 0, %92 ]
  %100 = inttoptr i64 %97 to i16*
  %101 = getelementptr inbounds i16, i16* %100, i64 %99
  %102 = load i16, i16* %101, align 2
  %103 = icmp eq i16 %102, -1
  br i1 %103, label %107, label %104

104:                                              ; preds = %96
  tail call void @_ZN3jxl11TreeSamples10AddToTableEm(%"struct.jxl::TreeSamples"* %0, i64 %99) #24
  %105 = load i64, i64* %56, align 8
  %106 = load i64, i64* %58, align 8
  br label %107

107:                                              ; preds = %104, %96
  %108 = phi i64 [ %97, %96 ], [ %106, %104 ]
  %109 = phi i64 [ %98, %96 ], [ %105, %104 ]
  %110 = add nuw i64 %99, 1
  %111 = sub i64 %109, %108
  %112 = ashr exact i64 %111, 1
  %113 = icmp ult i64 %110, %112
  br i1 %113, label %96, label %114

114:                                              ; preds = %107, %53, %92
  ret void

115:                                              ; preds = %8, %142
  %116 = phi %"class.std::__1::vector.29"* [ %143, %142 ], [ %10, %8 ]
  %117 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %116, i64 0, i32 0, i32 1
  %118 = bitcast i8** %117 to i64*
  %119 = load i64, i64* %118, align 8
  %120 = bitcast %"class.std::__1::vector.29"* %116 to i64*
  %121 = load i64, i64* %120, align 8
  %122 = sub i64 %119, %121
  %123 = add i64 %122, %1
  %124 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %116, i64 0, i32 0, i32 2, i32 0, i32 0
  %125 = bitcast i8** %124 to i64*
  %126 = load i64, i64* %125, align 8
  %127 = sub i64 %126, %121
  %128 = icmp ult i64 %127, %123
  %129 = inttoptr i64 %121 to i8*
  br i1 %128, label %130, label %142

130:                                              ; preds = %115
  %131 = tail call i8* @_Znwm(i64 %123) #29
  %132 = getelementptr inbounds i8, i8* %131, i64 %122
  %133 = ptrtoint i8* %132 to i64
  %134 = getelementptr inbounds i8, i8* %131, i64 %123
  %135 = ptrtoint i8* %134 to i64
  %136 = ptrtoint i8* %131 to i64
  %137 = icmp sgt i64 %122, 0
  br i1 %137, label %138, label %139

138:                                              ; preds = %130
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %131, i8* align 1 %129, i64 %122, i1 false) #24
  br label %139

139:                                              ; preds = %138, %130
  store i64 %136, i64* %120, align 8
  store i64 %133, i64* %118, align 8
  store i64 %135, i64* %125, align 8
  %140 = icmp eq i64 %121, 0
  br i1 %140, label %142, label %141

141:                                              ; preds = %139
  tail call void @_ZdlPv(i8* nonnull %129) #29
  br label %142

142:                                              ; preds = %115, %139, %141
  %143 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %116, i64 1
  %144 = icmp eq %"class.std::__1::vector.29"* %143, %12
  br i1 %144, label %53, label %115
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl11TreeSamples9AddSampleElRKNSt3__16vectorIiNS1_9allocatorIiEEEEPKl(%"struct.jxl::TreeSamples"*, i64, %"class.std::__1::vector.43"* nocapture readonly dereferenceable(24), i64* nocapture readonly) local_unnamed_addr #8 align 2 {
  %5 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 5
  %6 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 5, i32 0, i32 1
  %7 = bitcast i32** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = bitcast %"class.std::__1::vector.62"* %5 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = icmp eq i64 %8, %10
  br i1 %11, label %14, label %12

12:                                               ; preds = %4
  %13 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 0, i32 0, i32 0
  br label %26

14:                                               ; preds = %135, %4
  %15 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 4
  %16 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 4, i32 0, i32 1
  %17 = bitcast i32** %16 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = bitcast %"class.std::__1::vector.55"* %15 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = icmp eq i64 %18, %20
  br i1 %21, label %142, label %22

22:                                               ; preds = %14
  %23 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 2, i32 0, i32 0
  %24 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %2, i64 0, i32 0, i32 0
  %25 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 6, i32 0, i32 0
  br label %220

26:                                               ; preds = %12, %135
  %27 = phi i64 [ %10, %12 ], [ %138, %135 ]
  %28 = phi i64 [ 0, %12 ], [ %136, %135 ]
  %29 = inttoptr i64 %27 to i32*
  %30 = getelementptr inbounds i32, i32* %29, i64 %28
  %31 = load i32, i32* %30, align 4
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds i64, i64* %3, i64 %32
  %34 = load i64, i64* %33, align 8
  %35 = sub nsw i64 %1, %34
  %36 = trunc i64 %35 to i32
  %37 = shl i32 %36, 1
  %38 = ashr i32 %36, 31
  %39 = xor i32 %37, %38
  %40 = icmp ult i32 %39, 16
  br i1 %40, label %55, label %41

41:                                               ; preds = %26
  %42 = tail call i32 @llvm.ctlz.i32(i32 %39, i1 true) #24, !range !299
  %43 = xor i32 %42, 31
  %44 = shl i32 1, %43
  %45 = sub i32 %39, %44
  %46 = shl nuw nsw i32 %43, 3
  %47 = add nsw i32 %46, -16
  %48 = add nsw i32 %43, -1
  %49 = lshr i32 %45, %48
  %50 = shl i32 %49, 2
  %51 = add i32 %47, %50
  %52 = and i32 %45, 3
  %53 = or i32 %51, %52
  %54 = add nsw i32 %43, -3
  br label %55

55:                                               ; preds = %26, %41
  %56 = phi i32 [ %54, %41 ], [ 0, %26 ]
  %57 = phi i32 [ %53, %41 ], [ %39, %26 ]
  %58 = load %"class.std::__1::vector.8"*, %"class.std::__1::vector.8"** %13, align 8
  %59 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %58, i64 %28
  %60 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %58, i64 %28, i32 0, i32 1
  %61 = load %"struct.jxl::TreeSamples::ResidualToken"*, %"struct.jxl::TreeSamples::ResidualToken"** %60, align 8
  %62 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %58, i64 %28, i32 0, i32 2, i32 0, i32 0
  %63 = load %"struct.jxl::TreeSamples::ResidualToken"*, %"struct.jxl::TreeSamples::ResidualToken"** %62, align 8
  %64 = icmp ult %"struct.jxl::TreeSamples::ResidualToken"* %61, %63
  %65 = ptrtoint %"struct.jxl::TreeSamples::ResidualToken"* %63 to i64
  br i1 %64, label %66, label %76

66:                                               ; preds = %55
  %67 = trunc i32 %57 to i16
  %68 = trunc i32 %56 to i16
  %69 = bitcast %"struct.jxl::TreeSamples::ResidualToken"* %61 to i16*
  %70 = shl i16 %68, 8
  %71 = and i16 %67, 255
  %72 = or i16 %71, %70
  store i16 %72, i16* %69, align 1
  %73 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %61, i64 1
  %74 = ptrtoint %"struct.jxl::TreeSamples::ResidualToken"* %73 to i64
  %75 = bitcast %"struct.jxl::TreeSamples::ResidualToken"** %60 to i64*
  store i64 %74, i64* %75, align 8
  br label %135

76:                                               ; preds = %55
  %77 = ptrtoint %"struct.jxl::TreeSamples::ResidualToken"* %61 to i64
  %78 = bitcast %"struct.jxl::TreeSamples::ResidualToken"** %60 to i64*
  %79 = bitcast %"class.std::__1::vector.8"* %59 to i64*
  %80 = load i64, i64* %79, align 8
  %81 = sub i64 %77, %80
  %82 = ashr exact i64 %81, 1
  %83 = add nsw i64 %82, 1
  %84 = icmp slt i64 %83, 0
  br i1 %84, label %85, label %87

85:                                               ; preds = %76
  %86 = bitcast %"class.std::__1::vector.8"* %59 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %86) #28
  unreachable

87:                                               ; preds = %76
  %88 = bitcast %"struct.jxl::TreeSamples::ResidualToken"** %62 to i64*
  %89 = sub i64 %65, %80
  %90 = ashr exact i64 %89, 1
  %91 = icmp ult i64 %90, 4611686018427387903
  %92 = icmp ult i64 %89, %83
  %93 = select i1 %92, i64 %83, i64 %89
  %94 = select i1 %91, i64 %93, i64 9223372036854775807
  %95 = icmp eq i64 %94, 0
  br i1 %95, label %103, label %96

96:                                               ; preds = %87
  %97 = icmp slt i64 %94, 0
  br i1 %97, label %98, label %99

98:                                               ; preds = %96
  tail call void @abort() #28
  unreachable

99:                                               ; preds = %96
  %100 = shl i64 %94, 1
  %101 = tail call i8* @_Znwm(i64 %100) #29
  %102 = bitcast i8* %101 to %"struct.jxl::TreeSamples::ResidualToken"*
  br label %103

103:                                              ; preds = %99, %87
  %104 = phi %"struct.jxl::TreeSamples::ResidualToken"* [ %102, %99 ], [ null, %87 ]
  %105 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %104, i64 %82
  %106 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %104, i64 %94
  %107 = ptrtoint %"struct.jxl::TreeSamples::ResidualToken"* %106 to i64
  %108 = bitcast %"struct.jxl::TreeSamples::ResidualToken"* %105 to i16*
  %109 = trunc i32 %56 to i16
  %110 = shl i16 %109, 8
  %111 = trunc i32 %57 to i16
  %112 = and i16 %111, 255
  %113 = or i16 %112, %110
  store i16 %113, i16* %108, align 1
  %114 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %105, i64 1
  %115 = ptrtoint %"struct.jxl::TreeSamples::ResidualToken"* %114 to i64
  %116 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %59, i64 0, i32 0, i32 0
  %117 = load %"struct.jxl::TreeSamples::ResidualToken"*, %"struct.jxl::TreeSamples::ResidualToken"** %116, align 8
  %118 = load i64, i64* %78, align 8
  %119 = ptrtoint %"struct.jxl::TreeSamples::ResidualToken"* %117 to i64
  %120 = sub i64 %118, %119
  %121 = ashr exact i64 %120, 1
  %122 = sub nsw i64 0, %121
  %123 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %105, i64 %122
  %124 = ptrtoint %"struct.jxl::TreeSamples::ResidualToken"* %123 to i64
  %125 = icmp sgt i64 %120, 0
  br i1 %125, label %126, label %130

126:                                              ; preds = %103
  %127 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %123, i64 0, i32 0
  %128 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %117, i64 0, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %127, i8* align 1 %128, i64 %120, i1 false) #24
  %129 = load %"struct.jxl::TreeSamples::ResidualToken"*, %"struct.jxl::TreeSamples::ResidualToken"** %116, align 8
  br label %130

130:                                              ; preds = %126, %103
  %131 = phi %"struct.jxl::TreeSamples::ResidualToken"* [ %117, %103 ], [ %129, %126 ]
  store i64 %124, i64* %79, align 8
  store i64 %115, i64* %78, align 8
  store i64 %107, i64* %88, align 8
  %132 = icmp eq %"struct.jxl::TreeSamples::ResidualToken"* %131, null
  br i1 %132, label %135, label %133

133:                                              ; preds = %130
  %134 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %131, i64 0, i32 0
  tail call void @_ZdlPv(i8* %134) #29
  br label %135

135:                                              ; preds = %66, %130, %133
  %136 = add nuw i64 %28, 1
  %137 = load i64, i64* %7, align 8
  %138 = load i64, i64* %9, align 8
  %139 = sub i64 %137, %138
  %140 = ashr exact i64 %139, 2
  %141 = icmp ult i64 %136, %140
  br i1 %141, label %26, label %14

142:                                              ; preds = %299, %14
  %143 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 1
  %144 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 1, i32 0, i32 1
  %145 = load i16*, i16** %144, align 8
  %146 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %147 = load i16*, i16** %146, align 8
  %148 = icmp ult i16* %145, %147
  %149 = ptrtoint i16* %147 to i64
  br i1 %148, label %150, label %155

150:                                              ; preds = %142
  store i16 1, i16* %145, align 2
  %151 = getelementptr inbounds i16, i16* %145, i64 1
  %152 = ptrtoint i16* %151 to i64
  %153 = bitcast i16** %144 to i64*
  store i64 %152, i64* %153, align 8
  %154 = bitcast %"class.std::__1::vector.20"* %143 to i64*
  br label %209

155:                                              ; preds = %142
  %156 = ptrtoint i16* %145 to i64
  %157 = bitcast i16** %144 to i64*
  %158 = bitcast %"class.std::__1::vector.20"* %143 to i64*
  %159 = load i64, i64* %158, align 8
  %160 = sub i64 %156, %159
  %161 = ashr exact i64 %160, 1
  %162 = add nsw i64 %161, 1
  %163 = icmp slt i64 %162, 0
  br i1 %163, label %164, label %166

164:                                              ; preds = %155
  %165 = bitcast %"class.std::__1::vector.20"* %143 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %165) #28
  unreachable

166:                                              ; preds = %155
  %167 = bitcast i16** %146 to i64*
  %168 = sub i64 %149, %159
  %169 = ashr exact i64 %168, 1
  %170 = icmp ult i64 %169, 4611686018427387903
  %171 = icmp ult i64 %168, %162
  %172 = select i1 %171, i64 %162, i64 %168
  %173 = select i1 %170, i64 %172, i64 9223372036854775807
  %174 = icmp eq i64 %173, 0
  br i1 %174, label %182, label %175

175:                                              ; preds = %166
  %176 = icmp slt i64 %173, 0
  br i1 %176, label %177, label %178

177:                                              ; preds = %175
  tail call void @abort() #28
  unreachable

178:                                              ; preds = %175
  %179 = shl i64 %173, 1
  %180 = tail call i8* @_Znwm(i64 %179) #29
  %181 = bitcast i8* %180 to i16*
  br label %182

182:                                              ; preds = %178, %166
  %183 = phi i16* [ %181, %178 ], [ null, %166 ]
  %184 = getelementptr inbounds i16, i16* %183, i64 %161
  %185 = getelementptr inbounds i16, i16* %183, i64 %173
  %186 = ptrtoint i16* %185 to i64
  store i16 1, i16* %184, align 2
  %187 = getelementptr inbounds i16, i16* %184, i64 1
  %188 = ptrtoint i16* %187 to i64
  %189 = getelementptr inbounds %"class.std::__1::vector.20", %"class.std::__1::vector.20"* %143, i64 0, i32 0, i32 0
  %190 = load i16*, i16** %189, align 8
  %191 = load i64, i64* %157, align 8
  %192 = ptrtoint i16* %190 to i64
  %193 = sub i64 %191, %192
  %194 = ashr exact i64 %193, 1
  %195 = sub nsw i64 0, %194
  %196 = getelementptr inbounds i16, i16* %184, i64 %195
  %197 = ptrtoint i16* %196 to i64
  %198 = icmp sgt i64 %193, 0
  br i1 %198, label %199, label %203

199:                                              ; preds = %182
  %200 = bitcast i16* %196 to i8*
  %201 = bitcast i16* %190 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %200, i8* align 2 %201, i64 %193, i1 false) #24
  %202 = load i16*, i16** %189, align 8
  br label %203

203:                                              ; preds = %199, %182
  %204 = phi i16* [ %190, %182 ], [ %202, %199 ]
  store i64 %197, i64* %158, align 8
  store i64 %188, i64* %157, align 8
  store i64 %186, i64* %167, align 8
  %205 = icmp eq i16* %204, null
  br i1 %205, label %209, label %206

206:                                              ; preds = %203
  %207 = bitcast i16* %204 to i8*
  tail call void @_ZdlPv(i8* %207) #29
  %208 = load i64, i64* %157, align 8
  br label %209

209:                                              ; preds = %150, %203, %206
  %210 = phi i64* [ %154, %150 ], [ %158, %203 ], [ %158, %206 ]
  %211 = phi i64 [ %152, %150 ], [ %188, %203 ], [ %208, %206 ]
  %212 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 7
  %213 = load i64, i64* %212, align 8
  %214 = add i64 %213, 1
  store i64 %214, i64* %212, align 8
  %215 = load i64, i64* %210, align 8
  %216 = sub i64 %211, %215
  %217 = ashr exact i64 %216, 1
  %218 = add nsw i64 %217, -1
  %219 = tail call zeroext i1 @_ZN3jxl11TreeSamples18AddToTableAndMergeEm(%"struct.jxl::TreeSamples"* %0, i64 %218)
  br i1 %219, label %306, label %335

220:                                              ; preds = %22, %299
  %221 = phi i64 [ %20, %22 ], [ %302, %299 ]
  %222 = phi i64 [ 0, %22 ], [ %300, %299 ]
  %223 = inttoptr i64 %221 to i32*
  %224 = load %"class.std::__1::vector.29"*, %"class.std::__1::vector.29"** %23, align 8
  %225 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %224, i64 %222
  %226 = getelementptr inbounds i32, i32* %223, i64 %222
  %227 = load i32, i32* %226, align 4
  %228 = zext i32 %227 to i64
  %229 = load i32*, i32** %24, align 8
  %230 = getelementptr inbounds i32, i32* %229, i64 %228
  %231 = load i32, i32* %230, align 4
  %232 = icmp sgt i32 %231, -511
  %233 = select i1 %232, i32 %231, i32 -511
  %234 = icmp slt i32 %233, 511
  %235 = select i1 %234, i32 %233, i32 511
  %236 = add nsw i32 %235, 511
  %237 = and i64 %222, 4294967295
  %238 = load %"class.std::__1::vector.29"*, %"class.std::__1::vector.29"** %25, align 8
  %239 = sext i32 %236 to i64
  %240 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %238, i64 %237, i32 0, i32 0
  %241 = load i8*, i8** %240, align 8
  %242 = getelementptr inbounds i8, i8* %241, i64 %239
  %243 = load i8, i8* %242, align 1
  %244 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %224, i64 %222, i32 0, i32 1
  %245 = load i8*, i8** %244, align 8
  %246 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %224, i64 %222, i32 0, i32 2, i32 0, i32 0
  %247 = load i8*, i8** %246, align 8
  %248 = icmp ult i8* %245, %247
  %249 = ptrtoint i8* %247 to i64
  br i1 %248, label %250, label %254

250:                                              ; preds = %220
  store i8 %243, i8* %245, align 1
  %251 = getelementptr inbounds i8, i8* %245, i64 1
  %252 = ptrtoint i8* %251 to i64
  %253 = bitcast i8** %244 to i64*
  store i64 %252, i64* %253, align 8
  br label %299

254:                                              ; preds = %220
  %255 = ptrtoint i8* %245 to i64
  %256 = bitcast i8** %244 to i64*
  %257 = bitcast %"class.std::__1::vector.29"* %225 to i64*
  %258 = load i64, i64* %257, align 8
  %259 = sub i64 %255, %258
  %260 = add i64 %259, 1
  %261 = icmp slt i64 %260, 0
  br i1 %261, label %262, label %264

262:                                              ; preds = %254
  %263 = bitcast %"class.std::__1::vector.29"* %225 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %263) #28
  unreachable

264:                                              ; preds = %254
  %265 = bitcast i8** %246 to i64*
  %266 = sub i64 %249, %258
  %267 = icmp ult i64 %266, 4611686018427387903
  br i1 %267, label %268, label %273

268:                                              ; preds = %264
  %269 = shl i64 %266, 1
  %270 = icmp ult i64 %269, %260
  %271 = select i1 %270, i64 %260, i64 %269
  %272 = icmp eq i64 %271, 0
  br i1 %272, label %276, label %273

273:                                              ; preds = %268, %264
  %274 = phi i64 [ %271, %268 ], [ 9223372036854775807, %264 ]
  %275 = tail call i8* @_Znwm(i64 %274) #29
  br label %276

276:                                              ; preds = %273, %268
  %277 = phi i64 [ %274, %273 ], [ 0, %268 ]
  %278 = phi i8* [ %275, %273 ], [ null, %268 ]
  %279 = getelementptr inbounds i8, i8* %278, i64 %259
  %280 = getelementptr inbounds i8, i8* %278, i64 %277
  %281 = ptrtoint i8* %280 to i64
  store i8 %243, i8* %279, align 1
  %282 = getelementptr inbounds i8, i8* %279, i64 1
  %283 = ptrtoint i8* %282 to i64
  %284 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %225, i64 0, i32 0, i32 0
  %285 = load i8*, i8** %284, align 8
  %286 = load i64, i64* %256, align 8
  %287 = ptrtoint i8* %285 to i64
  %288 = sub i64 %286, %287
  %289 = sub i64 0, %288
  %290 = getelementptr inbounds i8, i8* %279, i64 %289
  %291 = ptrtoint i8* %290 to i64
  %292 = icmp sgt i64 %288, 0
  br i1 %292, label %293, label %295

293:                                              ; preds = %276
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %290, i8* align 1 %285, i64 %288, i1 false) #24
  %294 = load i8*, i8** %284, align 8
  br label %295

295:                                              ; preds = %293, %276
  %296 = phi i8* [ %285, %276 ], [ %294, %293 ]
  store i64 %291, i64* %257, align 8
  store i64 %283, i64* %256, align 8
  store i64 %281, i64* %265, align 8
  %297 = icmp eq i8* %296, null
  br i1 %297, label %299, label %298

298:                                              ; preds = %295
  tail call void @_ZdlPv(i8* nonnull %296) #29
  br label %299

299:                                              ; preds = %250, %295, %298
  %300 = add nuw i64 %222, 1
  %301 = load i64, i64* %17, align 8
  %302 = load i64, i64* %19, align 8
  %303 = sub i64 %301, %302
  %304 = ashr exact i64 %303, 2
  %305 = icmp ult i64 %300, %304
  br i1 %305, label %220, label %142

306:                                              ; preds = %209
  %307 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 0, i32 0, i32 0
  %308 = load %"class.std::__1::vector.8"*, %"class.std::__1::vector.8"** %307, align 8
  %309 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 0, i32 0, i32 1
  %310 = load %"class.std::__1::vector.8"*, %"class.std::__1::vector.8"** %309, align 8
  %311 = icmp eq %"class.std::__1::vector.8"* %308, %310
  br i1 %311, label %312, label %318

312:                                              ; preds = %318, %306
  %313 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 2, i32 0, i32 0
  %314 = load %"class.std::__1::vector.29"*, %"class.std::__1::vector.29"** %313, align 8
  %315 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 2, i32 0, i32 1
  %316 = load %"class.std::__1::vector.29"*, %"class.std::__1::vector.29"** %315, align 8
  %317 = icmp eq %"class.std::__1::vector.29"* %314, %316
  br i1 %317, label %325, label %328

318:                                              ; preds = %306, %318
  %319 = phi %"class.std::__1::vector.8"* [ %323, %318 ], [ %308, %306 ]
  %320 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %319, i64 0, i32 0, i32 1
  %321 = load %"struct.jxl::TreeSamples::ResidualToken"*, %"struct.jxl::TreeSamples::ResidualToken"** %320, align 8
  %322 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %321, i64 -1
  store %"struct.jxl::TreeSamples::ResidualToken"* %322, %"struct.jxl::TreeSamples::ResidualToken"** %320, align 8
  %323 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %319, i64 1
  %324 = icmp eq %"class.std::__1::vector.8"* %323, %310
  br i1 %324, label %312, label %318

325:                                              ; preds = %328, %312
  %326 = load i16*, i16** %144, align 8
  %327 = getelementptr inbounds i16, i16* %326, i64 -1
  store i16* %327, i16** %144, align 8
  br label %335

328:                                              ; preds = %312, %328
  %329 = phi %"class.std::__1::vector.29"* [ %333, %328 ], [ %314, %312 ]
  %330 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %329, i64 0, i32 0, i32 1
  %331 = load i8*, i8** %330, align 8
  %332 = getelementptr inbounds i8, i8* %331, i64 -1
  store i8* %332, i8** %330, align 8
  %333 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %329, i64 1
  %334 = icmp eq %"class.std::__1::vector.29"* %333, %316
  br i1 %334, label %325, label %328

335:                                              ; preds = %325, %209
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl11TreeSamples21PreQuantizePropertiesERKNSt3__15arrayINS2_IjLm2EEELm2EEERKNS1_6vectorINS_21ModularMultiplierInfoENS1_9allocatorIS8_EEEERKNS7_IjNS9_IjEEEESH_RNS7_IiNS9_IiEEEESK_m(%"struct.jxl::TreeSamples"*, %"struct.std::__1::array"* nocapture readonly dereferenceable(16), %"class.std::__1::vector.69"* nocapture readonly dereferenceable(24), %"class.std::__1::vector.55"* dereferenceable(24), %"class.std::__1::vector.55"* dereferenceable(24), %"class.std::__1::vector.43"* dereferenceable(24), %"class.std::__1::vector.43"* dereferenceable(24), i64) local_unnamed_addr #8 align 2 {
  %9 = alloca %"class.std::__1::vector.43", align 8
  %10 = alloca %"class.std::__1::vector.43", align 8
  %11 = alloca %"class.std::__1::vector.43", align 8
  %12 = alloca %"class.std::__1::vector.43", align 8
  %13 = alloca %"class.std::__1::vector.43", align 8
  %14 = alloca %"class.std::__1::vector.43", align 8
  %15 = alloca %"class.std::__1::vector.43", align 8
  %16 = alloca %"struct.std::__1::__less", align 1
  %17 = alloca %"struct.std::__1::__less", align 1
  %18 = alloca %"class.std::__1::vector.43", align 8
  %19 = alloca %"class.std::__1::vector.43", align 8
  %20 = alloca %"class.std::__1::vector.43", align 8
  %21 = alloca %"class.std::__1::vector.43", align 8
  %22 = alloca %"class.std::__1::vector.43", align 8
  %23 = alloca %"class.std::__1::vector.43", align 8
  %24 = alloca %"class.std::__1::vector.43", align 8
  %25 = alloca %"class.std::__1::vector.43", align 8
  %26 = alloca %"class.std::__1::vector.43", align 8
  %27 = alloca %"class.std::__1::vector.43", align 8
  %28 = bitcast %"class.std::__1::vector.43"* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %28) #24
  %29 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %19, i64 0, i32 0, i32 0
  %30 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %19, i64 0, i32 0, i32 1
  %31 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %19, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %28, i8 0, i64 24, i1 false) #24
  %32 = bitcast %"class.std::__1::vector.43"* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %32) #24
  %33 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %20, i64 0, i32 0, i32 0
  %34 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %20, i64 0, i32 0, i32 1
  %35 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %20, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %32, i8 0, i64 24, i1 false) #24
  %36 = getelementptr inbounds %"class.std::__1::vector.69", %"class.std::__1::vector.69"* %2, i64 0, i32 0, i32 0
  %37 = load %"struct.jxl::ModularMultiplierInfo"*, %"struct.jxl::ModularMultiplierInfo"** %36, align 8
  %38 = getelementptr inbounds %"class.std::__1::vector.69", %"class.std::__1::vector.69"* %2, i64 0, i32 0, i32 1
  %39 = load %"struct.jxl::ModularMultiplierInfo"*, %"struct.jxl::ModularMultiplierInfo"** %38, align 8
  %40 = icmp eq %"struct.jxl::ModularMultiplierInfo"* %37, %39
  br i1 %40, label %55, label %41

41:                                               ; preds = %8
  %42 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %1, i64 0, i32 0, i64 0, i32 0, i64 0
  %43 = bitcast i32** %34 to i64*
  %44 = bitcast %"class.std::__1::vector.43"* %20 to i64*
  %45 = bitcast i32** %35 to i64*
  %46 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %1, i64 0, i32 0, i64 0, i32 0, i64 1
  %47 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %1, i64 0, i32 0, i64 1, i32 0, i64 0
  %48 = bitcast i32** %30 to i64*
  %49 = bitcast %"class.std::__1::vector.43"* %19 to i64*
  %50 = bitcast i32** %31 to i64*
  %51 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %1, i64 0, i32 0, i64 1, i32 0, i64 1
  br label %453

52:                                               ; preds = %682
  %53 = load i32*, i32** %33, align 8
  %54 = load i32*, i32** %34, align 8
  br label %55

55:                                               ; preds = %52, %8
  %56 = phi i32* [ %54, %52 ], [ null, %8 ]
  %57 = phi i32* [ %53, %52 ], [ null, %8 ]
  %58 = getelementptr inbounds %"struct.std::__1::__less", %"struct.std::__1::__less"* %17, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %58) #24
  call void @_ZNSt3__16__sortIRNS_6__lessIiiEEPiEEvT0_S5_T_(i32* %57, i32* %56, %"struct.std::__1::__less"* nonnull dereferenceable(1) %17) #24
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %58) #24
  %59 = load i32*, i32** %33, align 8
  %60 = load i32*, i32** %34, align 8
  %61 = icmp eq i32* %59, %60
  %62 = ptrtoint i32* %59 to i64
  %63 = ptrtoint i32* %60 to i64
  br i1 %61, label %74, label %64

64:                                               ; preds = %55, %68
  %65 = phi i32* [ %66, %68 ], [ %59, %55 ]
  %66 = getelementptr inbounds i32, i32* %65, i64 1
  %67 = icmp eq i32* %66, %60
  br i1 %67, label %145, label %68

68:                                               ; preds = %64
  %69 = load i32, i32* %65, align 4
  %70 = load i32, i32* %66, align 4
  %71 = icmp eq i32 %69, %70
  br i1 %71, label %72, label %64

72:                                               ; preds = %68
  %73 = ptrtoint i32* %65 to i64
  br label %74

74:                                               ; preds = %72, %55
  %75 = phi i64 [ %73, %72 ], [ %62, %55 ]
  %76 = phi i32* [ %65, %72 ], [ %59, %55 ]
  %77 = ptrtoint i32* %76 to i64
  %78 = icmp eq i32* %76, %60
  br i1 %78, label %145, label %79

79:                                               ; preds = %74
  %80 = getelementptr inbounds i32, i32* %76, i64 2
  %81 = icmp eq i32* %80, %60
  br i1 %81, label %139, label %82

82:                                               ; preds = %79
  %83 = getelementptr i32, i32* %60, i64 -3
  %84 = ptrtoint i32* %83 to i64
  %85 = sub i64 %84, %77
  %86 = lshr i64 %85, 2
  %87 = add nuw nsw i64 %86, 1
  %88 = and i64 %87, 3
  %89 = icmp eq i64 %88, 0
  br i1 %89, label %109, label %90

90:                                               ; preds = %82, %101
  %91 = phi i32* [ %104, %101 ], [ %76, %82 ]
  %92 = phi i32* [ %103, %101 ], [ %80, %82 ]
  %93 = phi i64 [ %102, %101 ], [ %75, %82 ]
  %94 = phi i64 [ %105, %101 ], [ %88, %82 ]
  %95 = load i32, i32* %91, align 4
  %96 = load i32, i32* %92, align 4
  %97 = icmp eq i32 %95, %96
  br i1 %97, label %101, label %98

98:                                               ; preds = %90
  %99 = getelementptr inbounds i32, i32* %91, i64 1
  %100 = ptrtoint i32* %99 to i64
  store i32 %96, i32* %99, align 4
  br label %101

101:                                              ; preds = %98, %90
  %102 = phi i64 [ %93, %90 ], [ %100, %98 ]
  %103 = getelementptr inbounds i32, i32* %92, i64 1
  %104 = inttoptr i64 %102 to i32*
  %105 = add i64 %94, -1
  %106 = icmp eq i64 %105, 0
  br i1 %106, label %107, label %90, !llvm.loop !301

107:                                              ; preds = %101
  %108 = inttoptr i64 %102 to i32*
  br label %109

109:                                              ; preds = %82, %107
  %110 = phi i64 [ undef, %82 ], [ %102, %107 ]
  %111 = phi i32* [ %76, %82 ], [ %108, %107 ]
  %112 = phi i32* [ %80, %82 ], [ %103, %107 ]
  %113 = phi i64 [ %75, %82 ], [ %102, %107 ]
  %114 = icmp ult i64 %85, 12
  br i1 %114, label %132, label %115

115:                                              ; preds = %109, %1553
  %116 = phi i32* [ %1557, %1553 ], [ %111, %109 ]
  %117 = phi i32* [ %1555, %1553 ], [ %112, %109 ]
  %118 = phi i64 [ %1554, %1553 ], [ %113, %109 ]
  %119 = load i32, i32* %116, align 4
  %120 = load i32, i32* %117, align 4
  %121 = icmp eq i32 %119, %120
  br i1 %121, label %125, label %122

122:                                              ; preds = %115
  %123 = getelementptr inbounds i32, i32* %116, i64 1
  %124 = ptrtoint i32* %123 to i64
  store i32 %120, i32* %123, align 4
  br label %125

125:                                              ; preds = %122, %115
  %126 = phi i64 [ %118, %115 ], [ %124, %122 ]
  %127 = getelementptr inbounds i32, i32* %117, i64 1
  %128 = inttoptr i64 %126 to i32*
  %129 = load i32, i32* %128, align 4
  %130 = load i32, i32* %127, align 4
  %131 = icmp eq i32 %129, %130
  br i1 %131, label %1533, label %1530

132:                                              ; preds = %1553, %109
  %133 = phi i64 [ %110, %109 ], [ %1554, %1553 ]
  %134 = inttoptr i64 %133 to i32*
  %135 = bitcast %"class.std::__1::vector.43"* %20 to i64*
  %136 = load i64, i64* %135, align 8
  %137 = bitcast i32** %34 to i64*
  %138 = load i64, i64* %137, align 8
  br label %139

139:                                              ; preds = %79, %132
  %140 = phi i64 [ %138, %132 ], [ %63, %79 ]
  %141 = phi i64 [ %136, %132 ], [ %62, %79 ]
  %142 = phi i32* [ %134, %132 ], [ %76, %79 ]
  %143 = getelementptr inbounds i32, i32* %142, i64 1
  %144 = ptrtoint i32* %143 to i64
  br label %145

145:                                              ; preds = %64, %74, %139
  %146 = phi i64 [ %140, %139 ], [ %63, %74 ], [ %63, %64 ]
  %147 = phi i64 [ %141, %139 ], [ %62, %74 ], [ %62, %64 ]
  %148 = phi i64 [ %144, %139 ], [ %75, %74 ], [ %63, %64 ]
  %149 = sub i64 %148, %147
  %150 = ashr exact i64 %149, 2
  %151 = bitcast i32** %34 to i64*
  %152 = sub i64 %146, %147
  %153 = ashr exact i64 %152, 2
  %154 = icmp ugt i64 %150, %153
  %155 = inttoptr i64 %147 to i32*
  br i1 %154, label %156, label %158

156:                                              ; preds = %145
  %157 = sub nsw i64 %150, %153
  call void @_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEm(%"class.std::__1::vector.43"* nonnull %20, i64 %157) #24
  br label %162

158:                                              ; preds = %145
  %159 = icmp ult i64 %150, %153
  br i1 %159, label %160, label %162

160:                                              ; preds = %158
  %161 = getelementptr inbounds i32, i32* %155, i64 %150
  store i32* %161, i32** %34, align 8
  br label %162

162:                                              ; preds = %156, %158, %160
  %163 = load i32*, i32** %29, align 8
  %164 = load i32*, i32** %30, align 8
  %165 = getelementptr inbounds %"struct.std::__1::__less", %"struct.std::__1::__less"* %16, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %165) #24
  call void @_ZNSt3__16__sortIRNS_6__lessIiiEEPiEEvT0_S5_T_(i32* %163, i32* %164, %"struct.std::__1::__less"* nonnull dereferenceable(1) %16) #24
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %165) #24
  %166 = load i32*, i32** %29, align 8
  %167 = load i32*, i32** %30, align 8
  %168 = icmp eq i32* %166, %167
  %169 = ptrtoint i32* %166 to i64
  %170 = ptrtoint i32* %167 to i64
  br i1 %168, label %181, label %171

171:                                              ; preds = %162, %175
  %172 = phi i32* [ %173, %175 ], [ %166, %162 ]
  %173 = getelementptr inbounds i32, i32* %172, i64 1
  %174 = icmp eq i32* %173, %167
  br i1 %174, label %252, label %175

175:                                              ; preds = %171
  %176 = load i32, i32* %172, align 4
  %177 = load i32, i32* %173, align 4
  %178 = icmp eq i32 %176, %177
  br i1 %178, label %179, label %171

179:                                              ; preds = %175
  %180 = ptrtoint i32* %172 to i64
  br label %181

181:                                              ; preds = %179, %162
  %182 = phi i64 [ %180, %179 ], [ %169, %162 ]
  %183 = phi i32* [ %172, %179 ], [ %166, %162 ]
  %184 = ptrtoint i32* %183 to i64
  %185 = icmp eq i32* %183, %167
  br i1 %185, label %252, label %186

186:                                              ; preds = %181
  %187 = getelementptr inbounds i32, i32* %183, i64 2
  %188 = icmp eq i32* %187, %167
  br i1 %188, label %246, label %189

189:                                              ; preds = %186
  %190 = getelementptr i32, i32* %167, i64 -3
  %191 = ptrtoint i32* %190 to i64
  %192 = sub i64 %191, %184
  %193 = lshr i64 %192, 2
  %194 = add nuw nsw i64 %193, 1
  %195 = and i64 %194, 3
  %196 = icmp eq i64 %195, 0
  br i1 %196, label %216, label %197

197:                                              ; preds = %189, %208
  %198 = phi i32* [ %211, %208 ], [ %183, %189 ]
  %199 = phi i32* [ %210, %208 ], [ %187, %189 ]
  %200 = phi i64 [ %209, %208 ], [ %182, %189 ]
  %201 = phi i64 [ %212, %208 ], [ %195, %189 ]
  %202 = load i32, i32* %198, align 4
  %203 = load i32, i32* %199, align 4
  %204 = icmp eq i32 %202, %203
  br i1 %204, label %208, label %205

205:                                              ; preds = %197
  %206 = getelementptr inbounds i32, i32* %198, i64 1
  %207 = ptrtoint i32* %206 to i64
  store i32 %203, i32* %206, align 4
  br label %208

208:                                              ; preds = %205, %197
  %209 = phi i64 [ %200, %197 ], [ %207, %205 ]
  %210 = getelementptr inbounds i32, i32* %199, i64 1
  %211 = inttoptr i64 %209 to i32*
  %212 = add i64 %201, -1
  %213 = icmp eq i64 %212, 0
  br i1 %213, label %214, label %197, !llvm.loop !302

214:                                              ; preds = %208
  %215 = inttoptr i64 %209 to i32*
  br label %216

216:                                              ; preds = %189, %214
  %217 = phi i64 [ undef, %189 ], [ %209, %214 ]
  %218 = phi i32* [ %183, %189 ], [ %215, %214 ]
  %219 = phi i32* [ %187, %189 ], [ %210, %214 ]
  %220 = phi i64 [ %182, %189 ], [ %209, %214 ]
  %221 = icmp ult i64 %192, 12
  br i1 %221, label %239, label %222

222:                                              ; preds = %216, %1525
  %223 = phi i32* [ %1529, %1525 ], [ %218, %216 ]
  %224 = phi i32* [ %1527, %1525 ], [ %219, %216 ]
  %225 = phi i64 [ %1526, %1525 ], [ %220, %216 ]
  %226 = load i32, i32* %223, align 4
  %227 = load i32, i32* %224, align 4
  %228 = icmp eq i32 %226, %227
  br i1 %228, label %232, label %229

229:                                              ; preds = %222
  %230 = getelementptr inbounds i32, i32* %223, i64 1
  %231 = ptrtoint i32* %230 to i64
  store i32 %227, i32* %230, align 4
  br label %232

232:                                              ; preds = %229, %222
  %233 = phi i64 [ %225, %222 ], [ %231, %229 ]
  %234 = getelementptr inbounds i32, i32* %224, i64 1
  %235 = inttoptr i64 %233 to i32*
  %236 = load i32, i32* %235, align 4
  %237 = load i32, i32* %234, align 4
  %238 = icmp eq i32 %236, %237
  br i1 %238, label %1505, label %1502

239:                                              ; preds = %1525, %216
  %240 = phi i64 [ %217, %216 ], [ %1526, %1525 ]
  %241 = inttoptr i64 %240 to i32*
  %242 = bitcast %"class.std::__1::vector.43"* %19 to i64*
  %243 = load i64, i64* %242, align 8
  %244 = bitcast i32** %30 to i64*
  %245 = load i64, i64* %244, align 8
  br label %246

246:                                              ; preds = %186, %239
  %247 = phi i64 [ %245, %239 ], [ %170, %186 ]
  %248 = phi i64 [ %243, %239 ], [ %169, %186 ]
  %249 = phi i32* [ %241, %239 ], [ %183, %186 ]
  %250 = getelementptr inbounds i32, i32* %249, i64 1
  %251 = ptrtoint i32* %250 to i64
  br label %252

252:                                              ; preds = %171, %181, %246
  %253 = phi i64 [ %247, %246 ], [ %170, %181 ], [ %170, %171 ]
  %254 = phi i64 [ %248, %246 ], [ %169, %181 ], [ %169, %171 ]
  %255 = phi i64 [ %251, %246 ], [ %182, %181 ], [ %170, %171 ]
  %256 = sub i64 %255, %254
  %257 = ashr exact i64 %256, 2
  %258 = bitcast i32** %30 to i64*
  %259 = sub i64 %253, %254
  %260 = ashr exact i64 %259, 2
  %261 = icmp ugt i64 %257, %260
  %262 = inttoptr i64 %254 to i32*
  br i1 %261, label %263, label %265

263:                                              ; preds = %252
  %264 = sub nsw i64 %257, %260
  call void @_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEm(%"class.std::__1::vector.43"* nonnull %19, i64 %264) #24
  br label %269

265:                                              ; preds = %252
  %266 = icmp ult i64 %257, %260
  br i1 %266, label %267, label %269

267:                                              ; preds = %265
  %268 = getelementptr inbounds i32, i32* %262, i64 %257
  store i32* %268, i32** %30, align 8
  br label %269

269:                                              ; preds = %263, %265, %267
  %270 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 3
  %271 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 4
  %272 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 4, i32 0, i32 1
  %273 = bitcast i32** %272 to i64*
  %274 = load i64, i64* %273, align 8
  %275 = bitcast %"class.std::__1::vector.55"* %271 to i64*
  %276 = load i64, i64* %275, align 8
  %277 = sub i64 %274, %276
  %278 = ashr exact i64 %277, 2
  %279 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 3, i32 0, i32 1
  %280 = bitcast %"class.std::__1::vector.43"** %279 to i64*
  %281 = load i64, i64* %280, align 8
  %282 = bitcast %"class.std::__1::vector.41"* %270 to i64*
  %283 = load i64, i64* %282, align 8
  %284 = sub i64 %281, %283
  %285 = sdiv exact i64 %284, 24
  %286 = icmp ugt i64 %278, %285
  %287 = inttoptr i64 %283 to %"class.std::__1::vector.43"*
  %288 = inttoptr i64 %281 to %"class.std::__1::vector.43"*
  br i1 %286, label %289, label %291

289:                                              ; preds = %269
  %290 = sub nsw i64 %278, %285
  call void @_ZNSt3__16vectorINS0_IiNS_9allocatorIiEEEENS1_IS3_EEE8__appendEm(%"class.std::__1::vector.41"* %270, i64 %290) #24
  br label %310

291:                                              ; preds = %269
  %292 = icmp ult i64 %278, %285
  br i1 %292, label %293, label %310

293:                                              ; preds = %291
  %294 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %287, i64 %278
  %295 = icmp eq %"class.std::__1::vector.43"* %294, %288
  br i1 %295, label %309, label %296

296:                                              ; preds = %293, %307
  %297 = phi %"class.std::__1::vector.43"* [ %298, %307 ], [ %288, %293 ]
  %298 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %297, i64 -1
  %299 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %298, i64 0, i32 0, i32 0
  %300 = load i32*, i32** %299, align 8
  %301 = icmp eq i32* %300, null
  br i1 %301, label %307, label %302

302:                                              ; preds = %296
  %303 = ptrtoint i32* %300 to i64
  %304 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %297, i64 -1, i32 0, i32 1
  %305 = bitcast i32** %304 to i64*
  store i64 %303, i64* %305, align 8
  %306 = bitcast i32* %300 to i8*
  call void @_ZdlPv(i8* %306) #29
  br label %307

307:                                              ; preds = %302, %296
  %308 = icmp eq %"class.std::__1::vector.43"* %298, %294
  br i1 %308, label %309, label %296

309:                                              ; preds = %307, %293
  store %"class.std::__1::vector.43"* %294, %"class.std::__1::vector.43"** %279, align 8
  br label %310

310:                                              ; preds = %289, %291, %309
  %311 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 6
  %312 = load i64, i64* %273, align 8
  %313 = load i64, i64* %275, align 8
  %314 = sub i64 %312, %313
  %315 = ashr exact i64 %314, 2
  %316 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 6, i32 0, i32 1
  %317 = bitcast %"class.std::__1::vector.29"** %316 to i64*
  %318 = load i64, i64* %317, align 8
  %319 = bitcast %"class.std::__1::vector.27"* %311 to i64*
  %320 = load i64, i64* %319, align 8
  %321 = sub i64 %318, %320
  %322 = sdiv exact i64 %321, 24
  %323 = icmp ugt i64 %315, %322
  %324 = inttoptr i64 %320 to %"class.std::__1::vector.29"*
  %325 = inttoptr i64 %318 to %"class.std::__1::vector.29"*
  br i1 %323, label %326, label %328

326:                                              ; preds = %310
  %327 = sub nsw i64 %315, %322
  call void @_ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEE8__appendEm(%"class.std::__1::vector.27"* %311, i64 %327) #24
  br label %346

328:                                              ; preds = %310
  %329 = icmp ult i64 %315, %322
  br i1 %329, label %330, label %346

330:                                              ; preds = %328
  %331 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %324, i64 %315
  %332 = icmp eq %"class.std::__1::vector.29"* %331, %325
  br i1 %332, label %345, label %333

333:                                              ; preds = %330, %343
  %334 = phi %"class.std::__1::vector.29"* [ %335, %343 ], [ %325, %330 ]
  %335 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %334, i64 -1
  %336 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %335, i64 0, i32 0, i32 0
  %337 = load i8*, i8** %336, align 8
  %338 = icmp eq i8* %337, null
  br i1 %338, label %343, label %339

339:                                              ; preds = %333
  %340 = ptrtoint i8* %337 to i64
  %341 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %334, i64 -1, i32 0, i32 1
  %342 = bitcast i8** %341 to i64*
  store i64 %340, i64* %342, align 8
  call void @_ZdlPv(i8* nonnull %337) #29
  br label %343

343:                                              ; preds = %339, %333
  %344 = icmp eq %"class.std::__1::vector.29"* %335, %331
  br i1 %344, label %345, label %333

345:                                              ; preds = %343, %330
  store %"class.std::__1::vector.29"* %331, %"class.std::__1::vector.29"** %316, align 8
  br label %346

346:                                              ; preds = %326, %328, %345
  %347 = load i64, i64* %273, align 8
  %348 = load i64, i64* %275, align 8
  %349 = icmp eq i64 %347, %348
  br i1 %349, label %701, label %350

350:                                              ; preds = %346
  %351 = getelementptr inbounds %"class.std::__1::vector.55", %"class.std::__1::vector.55"* %271, i64 0, i32 0, i32 0
  %352 = bitcast %"class.std::__1::vector.43"* %23 to i8*
  %353 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %23, i64 0, i32 0, i32 1
  %354 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %23, i64 0, i32 0, i32 2, i32 0, i32 0
  %355 = add i64 %7, -1
  %356 = bitcast i32** %354 to i64*
  %357 = bitcast %"class.std::__1::vector.43"* %23 to i64*
  %358 = icmp eq i64 %355, 0
  %359 = icmp ugt i64 %355, 4611686018427387903
  %360 = bitcast i32** %353 to i64*
  %361 = shl i64 %355, 2
  %362 = getelementptr inbounds %"class.std::__1::vector.41", %"class.std::__1::vector.41"* %270, i64 0, i32 0, i32 0
  %363 = bitcast %"class.std::__1::vector.43"* %22 to i8*
  %364 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %22, i64 0, i32 0, i32 1
  %365 = bitcast i32** %364 to i8**
  %366 = bitcast %"class.std::__1::vector.43"* %22 to i8**
  %367 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %22, i64 0, i32 0, i32 2, i32 0, i32 0
  %368 = bitcast i32** %364 to i64*
  %369 = bitcast %"class.std::__1::vector.43"* %22 to i64*
  %370 = bitcast i32** %367 to i64*
  %371 = bitcast %"class.std::__1::vector.43"* %21 to i8*
  %372 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %21, i64 0, i32 0, i32 1
  %373 = bitcast i32** %372 to i8**
  %374 = bitcast %"class.std::__1::vector.43"* %21 to i8**
  %375 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %21, i64 0, i32 0, i32 2, i32 0, i32 0
  %376 = bitcast i32** %372 to i64*
  %377 = bitcast %"class.std::__1::vector.43"* %21 to i64*
  %378 = bitcast i32** %375 to i64*
  %379 = icmp ult i64 %7, 32
  %380 = icmp ult i64 %7, 64
  %381 = bitcast %"class.std::__1::vector.43"* %27 to i8*
  %382 = bitcast %"class.std::__1::vector.43"* %18 to i8*
  %383 = bitcast %"class.std::__1::vector.43"* %18 to i64*
  %384 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %18, i64 0, i32 0, i32 1
  %385 = bitcast i32** %384 to i64*
  %386 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %27, i64 0, i32 0, i32 1
  %387 = bitcast i32** %386 to i8**
  %388 = bitcast %"class.std::__1::vector.43"* %27 to i8**
  %389 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %27, i64 0, i32 0, i32 2, i32 0, i32 0
  %390 = bitcast i32** %386 to i64*
  %391 = bitcast %"class.std::__1::vector.43"* %27 to i64*
  %392 = bitcast i32** %389 to i64*
  %393 = bitcast %"class.std::__1::vector.43"* %26 to i8*
  %394 = bitcast %"class.std::__1::vector.43"* %14 to i8*
  %395 = bitcast %"class.std::__1::vector.43"* %13 to i8*
  %396 = bitcast %"class.std::__1::vector.43"* %13 to i64*
  %397 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %13, i64 0, i32 0, i32 1
  %398 = bitcast i32** %397 to i64*
  %399 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %14, i64 0, i32 0, i32 1
  %400 = bitcast %"class.std::__1::vector.43"* %14 to i8**
  %401 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %14, i64 0, i32 0, i32 2, i32 0, i32 0
  %402 = bitcast i32** %399 to i64*
  %403 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %6, i64 0, i32 0, i32 0
  %404 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %6, i64 0, i32 0, i32 1
  %405 = bitcast %"class.std::__1::vector.43"* %15 to i8*
  %406 = bitcast %"class.std::__1::vector.43"* %15 to i64*
  %407 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %15, i64 0, i32 0, i32 1
  %408 = bitcast i32** %407 to i64*
  %409 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %26, i64 0, i32 0, i32 1
  %410 = bitcast i32** %409 to i8**
  %411 = bitcast %"class.std::__1::vector.43"* %26 to i8**
  %412 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %26, i64 0, i32 0, i32 2, i32 0, i32 0
  %413 = bitcast i32** %409 to i64*
  %414 = bitcast %"class.std::__1::vector.43"* %26 to i64*
  %415 = bitcast i32** %412 to i64*
  %416 = bitcast %"class.std::__1::vector.43"* %25 to i8*
  %417 = bitcast %"class.std::__1::vector.43"* %11 to i8*
  %418 = bitcast %"class.std::__1::vector.43"* %10 to i8*
  %419 = bitcast %"class.std::__1::vector.43"* %10 to i64*
  %420 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %10, i64 0, i32 0, i32 1
  %421 = bitcast i32** %420 to i64*
  %422 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %11, i64 0, i32 0, i32 1
  %423 = bitcast %"class.std::__1::vector.43"* %11 to i8**
  %424 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %11, i64 0, i32 0, i32 2, i32 0, i32 0
  %425 = bitcast i32** %422 to i64*
  %426 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %5, i64 0, i32 0, i32 0
  %427 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %5, i64 0, i32 0, i32 1
  %428 = bitcast %"class.std::__1::vector.43"* %12 to i8*
  %429 = bitcast %"class.std::__1::vector.43"* %12 to i64*
  %430 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %12, i64 0, i32 0, i32 1
  %431 = bitcast i32** %430 to i64*
  %432 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %25, i64 0, i32 0, i32 1
  %433 = bitcast i32** %432 to i8**
  %434 = bitcast %"class.std::__1::vector.43"* %25 to i8**
  %435 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %25, i64 0, i32 0, i32 2, i32 0, i32 0
  %436 = bitcast i32** %432 to i64*
  %437 = bitcast %"class.std::__1::vector.43"* %25 to i64*
  %438 = bitcast i32** %435 to i64*
  %439 = bitcast %"class.std::__1::vector.43"* %24 to i8*
  %440 = bitcast %"class.std::__1::vector.43"* %9 to i8*
  %441 = bitcast %"class.std::__1::vector.43"* %9 to i64*
  %442 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %9, i64 0, i32 0, i32 1
  %443 = bitcast i32** %442 to i64*
  %444 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %24, i64 0, i32 0, i32 1
  %445 = bitcast i32** %444 to i8**
  %446 = bitcast %"class.std::__1::vector.43"* %24 to i8**
  %447 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %24, i64 0, i32 0, i32 2, i32 0, i32 0
  %448 = bitcast i32** %444 to i64*
  %449 = bitcast %"class.std::__1::vector.43"* %24 to i64*
  %450 = bitcast i32** %447 to i64*
  %451 = getelementptr inbounds %"class.std::__1::vector.27", %"class.std::__1::vector.27"* %311, i64 0, i32 0, i32 0
  %452 = load i32*, i32** %351, align 8
  br label %714

453:                                              ; preds = %41, %682
  %454 = phi %"struct.jxl::ModularMultiplierInfo"* [ %37, %41 ], [ %683, %682 ]
  %455 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %454, i64 0, i32 0, i32 0, i64 0, i32 0, i64 0
  %456 = load i32, i32* %455, align 4
  %457 = load i32, i32* %42, align 4
  %458 = icmp eq i32 %456, %457
  br i1 %458, label %511, label %459

459:                                              ; preds = %453
  %460 = add i32 %456, -1
  %461 = load i32*, i32** %34, align 8
  %462 = load i32*, i32** %35, align 8
  %463 = icmp ult i32* %461, %462
  %464 = ptrtoint i32* %462 to i64
  br i1 %463, label %465, label %468

465:                                              ; preds = %459
  store i32 %460, i32* %461, align 4
  %466 = getelementptr inbounds i32, i32* %461, i64 1
  %467 = ptrtoint i32* %466 to i64
  store i64 %467, i64* %43, align 8
  br label %511

468:                                              ; preds = %459
  %469 = ptrtoint i32* %461 to i64
  %470 = load i64, i64* %44, align 8
  %471 = sub i64 %469, %470
  %472 = ashr exact i64 %471, 2
  %473 = add nsw i64 %472, 1
  %474 = icmp ugt i64 %473, 4611686018427387903
  br i1 %474, label %475, label %477

475:                                              ; preds = %468
  %476 = bitcast %"class.std::__1::vector.43"* %20 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %476) #28
  unreachable

477:                                              ; preds = %468
  %478 = sub i64 %464, %470
  %479 = ashr exact i64 %478, 2
  %480 = icmp ult i64 %479, 2305843009213693951
  br i1 %480, label %481, label %489

481:                                              ; preds = %477
  %482 = ashr exact i64 %478, 1
  %483 = icmp ult i64 %482, %473
  %484 = select i1 %483, i64 %473, i64 %482
  %485 = icmp eq i64 %484, 0
  br i1 %485, label %494, label %486

486:                                              ; preds = %481
  %487 = icmp ugt i64 %484, 4611686018427387903
  br i1 %487, label %488, label %489

488:                                              ; preds = %486
  tail call void @abort() #28
  unreachable

489:                                              ; preds = %486, %477
  %490 = phi i64 [ %484, %486 ], [ 4611686018427387903, %477 ]
  %491 = shl i64 %490, 2
  %492 = tail call i8* @_Znwm(i64 %491) #29
  %493 = bitcast i8* %492 to i32*
  br label %494

494:                                              ; preds = %489, %481
  %495 = phi i64 [ %490, %489 ], [ 0, %481 ]
  %496 = phi i8* [ %492, %489 ], [ null, %481 ]
  %497 = phi i32* [ %493, %489 ], [ null, %481 ]
  %498 = getelementptr inbounds i32, i32* %497, i64 %472
  %499 = getelementptr inbounds i32, i32* %497, i64 %495
  %500 = ptrtoint i32* %499 to i64
  store i32 %460, i32* %498, align 4
  %501 = getelementptr inbounds i32, i32* %498, i64 1
  %502 = ptrtoint i32* %501 to i64
  %503 = ptrtoint i32* %497 to i64
  %504 = icmp sgt i64 %471, 0
  br i1 %504, label %505, label %507

505:                                              ; preds = %494
  %506 = inttoptr i64 %470 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %496, i8* align 4 %506, i64 %471, i1 false) #24
  br label %507

507:                                              ; preds = %505, %494
  store i64 %503, i64* %44, align 8
  store i64 %502, i64* %43, align 8
  store i64 %500, i64* %45, align 8
  %508 = icmp eq i64 %470, 0
  br i1 %508, label %511, label %509

509:                                              ; preds = %507
  %510 = inttoptr i64 %470 to i8*
  tail call void @_ZdlPv(i8* %510) #29
  br label %511

511:                                              ; preds = %509, %507, %465, %453
  %512 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %454, i64 0, i32 0, i32 0, i64 0, i32 0, i64 1
  %513 = load i32, i32* %512, align 4
  %514 = load i32, i32* %46, align 4
  %515 = icmp eq i32 %513, %514
  br i1 %515, label %568, label %516

516:                                              ; preds = %511
  %517 = add i32 %513, -1
  %518 = load i32*, i32** %34, align 8
  %519 = load i32*, i32** %35, align 8
  %520 = icmp ult i32* %518, %519
  %521 = ptrtoint i32* %519 to i64
  br i1 %520, label %522, label %525

522:                                              ; preds = %516
  store i32 %517, i32* %518, align 4
  %523 = getelementptr inbounds i32, i32* %518, i64 1
  %524 = ptrtoint i32* %523 to i64
  store i64 %524, i64* %43, align 8
  br label %568

525:                                              ; preds = %516
  %526 = ptrtoint i32* %518 to i64
  %527 = load i64, i64* %44, align 8
  %528 = sub i64 %526, %527
  %529 = ashr exact i64 %528, 2
  %530 = add nsw i64 %529, 1
  %531 = icmp ugt i64 %530, 4611686018427387903
  br i1 %531, label %532, label %534

532:                                              ; preds = %525
  %533 = bitcast %"class.std::__1::vector.43"* %20 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %533) #28
  unreachable

534:                                              ; preds = %525
  %535 = sub i64 %521, %527
  %536 = ashr exact i64 %535, 2
  %537 = icmp ult i64 %536, 2305843009213693951
  br i1 %537, label %538, label %546

538:                                              ; preds = %534
  %539 = ashr exact i64 %535, 1
  %540 = icmp ult i64 %539, %530
  %541 = select i1 %540, i64 %530, i64 %539
  %542 = icmp eq i64 %541, 0
  br i1 %542, label %551, label %543

543:                                              ; preds = %538
  %544 = icmp ugt i64 %541, 4611686018427387903
  br i1 %544, label %545, label %546

545:                                              ; preds = %543
  tail call void @abort() #28
  unreachable

546:                                              ; preds = %543, %534
  %547 = phi i64 [ %541, %543 ], [ 4611686018427387903, %534 ]
  %548 = shl i64 %547, 2
  %549 = tail call i8* @_Znwm(i64 %548) #29
  %550 = bitcast i8* %549 to i32*
  br label %551

551:                                              ; preds = %546, %538
  %552 = phi i64 [ %547, %546 ], [ 0, %538 ]
  %553 = phi i8* [ %549, %546 ], [ null, %538 ]
  %554 = phi i32* [ %550, %546 ], [ null, %538 ]
  %555 = getelementptr inbounds i32, i32* %554, i64 %529
  %556 = getelementptr inbounds i32, i32* %554, i64 %552
  %557 = ptrtoint i32* %556 to i64
  store i32 %517, i32* %555, align 4
  %558 = getelementptr inbounds i32, i32* %555, i64 1
  %559 = ptrtoint i32* %558 to i64
  %560 = ptrtoint i32* %554 to i64
  %561 = icmp sgt i64 %528, 0
  br i1 %561, label %562, label %564

562:                                              ; preds = %551
  %563 = inttoptr i64 %527 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %553, i8* align 4 %563, i64 %528, i1 false) #24
  br label %564

564:                                              ; preds = %562, %551
  store i64 %560, i64* %44, align 8
  store i64 %559, i64* %43, align 8
  store i64 %557, i64* %45, align 8
  %565 = icmp eq i64 %527, 0
  br i1 %565, label %568, label %566

566:                                              ; preds = %564
  %567 = inttoptr i64 %527 to i8*
  tail call void @_ZdlPv(i8* %567) #29
  br label %568

568:                                              ; preds = %566, %564, %522, %511
  %569 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %454, i64 0, i32 0, i32 0, i64 1, i32 0, i64 0
  %570 = load i32, i32* %569, align 4
  %571 = load i32, i32* %47, align 4
  %572 = icmp eq i32 %570, %571
  br i1 %572, label %625, label %573

573:                                              ; preds = %568
  %574 = add i32 %570, -1
  %575 = load i32*, i32** %30, align 8
  %576 = load i32*, i32** %31, align 8
  %577 = icmp ult i32* %575, %576
  %578 = ptrtoint i32* %576 to i64
  br i1 %577, label %579, label %582

579:                                              ; preds = %573
  store i32 %574, i32* %575, align 4
  %580 = getelementptr inbounds i32, i32* %575, i64 1
  %581 = ptrtoint i32* %580 to i64
  store i64 %581, i64* %48, align 8
  br label %625

582:                                              ; preds = %573
  %583 = ptrtoint i32* %575 to i64
  %584 = load i64, i64* %49, align 8
  %585 = sub i64 %583, %584
  %586 = ashr exact i64 %585, 2
  %587 = add nsw i64 %586, 1
  %588 = icmp ugt i64 %587, 4611686018427387903
  br i1 %588, label %589, label %591

589:                                              ; preds = %582
  %590 = bitcast %"class.std::__1::vector.43"* %19 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %590) #28
  unreachable

591:                                              ; preds = %582
  %592 = sub i64 %578, %584
  %593 = ashr exact i64 %592, 2
  %594 = icmp ult i64 %593, 2305843009213693951
  br i1 %594, label %595, label %603

595:                                              ; preds = %591
  %596 = ashr exact i64 %592, 1
  %597 = icmp ult i64 %596, %587
  %598 = select i1 %597, i64 %587, i64 %596
  %599 = icmp eq i64 %598, 0
  br i1 %599, label %608, label %600

600:                                              ; preds = %595
  %601 = icmp ugt i64 %598, 4611686018427387903
  br i1 %601, label %602, label %603

602:                                              ; preds = %600
  tail call void @abort() #28
  unreachable

603:                                              ; preds = %600, %591
  %604 = phi i64 [ %598, %600 ], [ 4611686018427387903, %591 ]
  %605 = shl i64 %604, 2
  %606 = tail call i8* @_Znwm(i64 %605) #29
  %607 = bitcast i8* %606 to i32*
  br label %608

608:                                              ; preds = %603, %595
  %609 = phi i64 [ %604, %603 ], [ 0, %595 ]
  %610 = phi i8* [ %606, %603 ], [ null, %595 ]
  %611 = phi i32* [ %607, %603 ], [ null, %595 ]
  %612 = getelementptr inbounds i32, i32* %611, i64 %586
  %613 = getelementptr inbounds i32, i32* %611, i64 %609
  %614 = ptrtoint i32* %613 to i64
  store i32 %574, i32* %612, align 4
  %615 = getelementptr inbounds i32, i32* %612, i64 1
  %616 = ptrtoint i32* %615 to i64
  %617 = ptrtoint i32* %611 to i64
  %618 = icmp sgt i64 %585, 0
  br i1 %618, label %619, label %621

619:                                              ; preds = %608
  %620 = inttoptr i64 %584 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %610, i8* align 4 %620, i64 %585, i1 false) #24
  br label %621

621:                                              ; preds = %619, %608
  store i64 %617, i64* %49, align 8
  store i64 %616, i64* %48, align 8
  store i64 %614, i64* %50, align 8
  %622 = icmp eq i64 %584, 0
  br i1 %622, label %625, label %623

623:                                              ; preds = %621
  %624 = inttoptr i64 %584 to i8*
  tail call void @_ZdlPv(i8* %624) #29
  br label %625

625:                                              ; preds = %623, %621, %579, %568
  %626 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %454, i64 0, i32 0, i32 0, i64 1, i32 0, i64 1
  %627 = load i32, i32* %626, align 4
  %628 = load i32, i32* %51, align 4
  %629 = icmp eq i32 %627, %628
  br i1 %629, label %682, label %630

630:                                              ; preds = %625
  %631 = add i32 %627, -1
  %632 = load i32*, i32** %30, align 8
  %633 = load i32*, i32** %31, align 8
  %634 = icmp ult i32* %632, %633
  %635 = ptrtoint i32* %633 to i64
  br i1 %634, label %636, label %639

636:                                              ; preds = %630
  store i32 %631, i32* %632, align 4
  %637 = getelementptr inbounds i32, i32* %632, i64 1
  %638 = ptrtoint i32* %637 to i64
  store i64 %638, i64* %48, align 8
  br label %682

639:                                              ; preds = %630
  %640 = ptrtoint i32* %632 to i64
  %641 = load i64, i64* %49, align 8
  %642 = sub i64 %640, %641
  %643 = ashr exact i64 %642, 2
  %644 = add nsw i64 %643, 1
  %645 = icmp ugt i64 %644, 4611686018427387903
  br i1 %645, label %646, label %648

646:                                              ; preds = %639
  %647 = bitcast %"class.std::__1::vector.43"* %19 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %647) #28
  unreachable

648:                                              ; preds = %639
  %649 = sub i64 %635, %641
  %650 = ashr exact i64 %649, 2
  %651 = icmp ult i64 %650, 2305843009213693951
  br i1 %651, label %652, label %660

652:                                              ; preds = %648
  %653 = ashr exact i64 %649, 1
  %654 = icmp ult i64 %653, %644
  %655 = select i1 %654, i64 %644, i64 %653
  %656 = icmp eq i64 %655, 0
  br i1 %656, label %665, label %657

657:                                              ; preds = %652
  %658 = icmp ugt i64 %655, 4611686018427387903
  br i1 %658, label %659, label %660

659:                                              ; preds = %657
  tail call void @abort() #28
  unreachable

660:                                              ; preds = %657, %648
  %661 = phi i64 [ %655, %657 ], [ 4611686018427387903, %648 ]
  %662 = shl i64 %661, 2
  %663 = tail call i8* @_Znwm(i64 %662) #29
  %664 = bitcast i8* %663 to i32*
  br label %665

665:                                              ; preds = %660, %652
  %666 = phi i64 [ %661, %660 ], [ 0, %652 ]
  %667 = phi i8* [ %663, %660 ], [ null, %652 ]
  %668 = phi i32* [ %664, %660 ], [ null, %652 ]
  %669 = getelementptr inbounds i32, i32* %668, i64 %643
  %670 = getelementptr inbounds i32, i32* %668, i64 %666
  %671 = ptrtoint i32* %670 to i64
  store i32 %631, i32* %669, align 4
  %672 = getelementptr inbounds i32, i32* %669, i64 1
  %673 = ptrtoint i32* %672 to i64
  %674 = ptrtoint i32* %668 to i64
  %675 = icmp sgt i64 %642, 0
  br i1 %675, label %676, label %678

676:                                              ; preds = %665
  %677 = inttoptr i64 %641 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %667, i8* align 4 %677, i64 %642, i1 false) #24
  br label %678

678:                                              ; preds = %676, %665
  store i64 %674, i64* %49, align 8
  store i64 %673, i64* %48, align 8
  store i64 %671, i64* %50, align 8
  %679 = icmp eq i64 %641, 0
  br i1 %679, label %682, label %680

680:                                              ; preds = %678
  %681 = inttoptr i64 %641 to i8*
  tail call void @_ZdlPv(i8* %681) #29
  br label %682

682:                                              ; preds = %680, %678, %636, %625
  %683 = getelementptr inbounds %"struct.jxl::ModularMultiplierInfo", %"struct.jxl::ModularMultiplierInfo"* %454, i64 1
  %684 = icmp eq %"struct.jxl::ModularMultiplierInfo"* %683, %39
  br i1 %684, label %52, label %453

685:                                              ; preds = %1470
  %686 = icmp eq i64 %1422, 0
  br i1 %686, label %689, label %687

687:                                              ; preds = %685
  %688 = inttoptr i64 %1422 to i8*
  call void @_ZdlPv(i8* %688) #29
  br label %689

689:                                              ; preds = %685, %687
  %690 = icmp eq i64 %1424, 0
  br i1 %690, label %693, label %691

691:                                              ; preds = %689
  %692 = inttoptr i64 %1424 to i8*
  call void @_ZdlPv(i8* %692) #29
  br label %693

693:                                              ; preds = %689, %691
  %694 = icmp eq i64 %1421, 0
  br i1 %694, label %697, label %695

695:                                              ; preds = %693
  %696 = inttoptr i64 %1421 to i8*
  call void @_ZdlPv(i8* %696) #29
  br label %697

697:                                              ; preds = %693, %695
  %698 = icmp eq i64 %1426, 0
  br i1 %698, label %701, label %699

699:                                              ; preds = %697
  %700 = inttoptr i64 %1426 to i8*
  call void @_ZdlPv(i8* %700) #29
  br label %701

701:                                              ; preds = %346, %697, %699
  %702 = load i32*, i32** %33, align 8
  %703 = icmp eq i32* %702, null
  br i1 %703, label %707, label %704

704:                                              ; preds = %701
  %705 = ptrtoint i32* %702 to i64
  store i64 %705, i64* %151, align 8
  %706 = bitcast i32* %702 to i8*
  call void @_ZdlPv(i8* %706) #29
  br label %707

707:                                              ; preds = %701, %704
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %32) #24
  %708 = load i32*, i32** %29, align 8
  %709 = icmp eq i32* %708, null
  br i1 %709, label %713, label %710

710:                                              ; preds = %707
  %711 = ptrtoint i32* %708 to i64
  store i64 %711, i64* %258, align 8
  %712 = bitcast i32* %708 to i8*
  call void @_ZdlPv(i8* %712) #29
  br label %713

713:                                              ; preds = %707, %710
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %28) #24
  ret void

714:                                              ; preds = %350, %1470
  %715 = phi i32* [ %452, %350 ], [ %1477, %1470 ]
  %716 = phi i64 [ 0, %350 ], [ %1471, %1470 ]
  %717 = phi i64 [ 0, %350 ], [ %1427, %1470 ]
  %718 = phi i64 [ 0, %350 ], [ %1426, %1470 ]
  %719 = phi i64 [ 0, %350 ], [ %1425, %1470 ]
  %720 = phi i64 [ 0, %350 ], [ %1424, %1470 ]
  %721 = phi i64 [ 0, %350 ], [ %1423, %1470 ]
  %722 = phi i64 [ 0, %350 ], [ %1422, %1470 ]
  %723 = phi i64 [ 0, %350 ], [ %1421, %1470 ]
  %724 = phi i64 [ 0, %350 ], [ %1420, %1470 ]
  %725 = getelementptr inbounds i32, i32* %715, i64 %716
  %726 = load i32, i32* %725, align 4
  switch i32 %726, label %923 [
    i32 0, label %727
    i32 1, label %776
    i32 2, label %825
    i32 3, label %825
    i32 6, label %927
    i32 7, label %927
    i32 8, label %927
  ]

727:                                              ; preds = %714
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %371) #24
  %728 = load i32*, i32** %33, align 8, !noalias !303
  %729 = load i32*, i32** %34, align 8, !noalias !303
  %730 = icmp eq i32* %728, %729
  br i1 %730, label %754, label %731

731:                                              ; preds = %727
  %732 = ptrtoint i32* %728 to i64
  %733 = ptrtoint i32* %729 to i64
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %371, i8 0, i64 24, i1 false) #24, !alias.scope !303
  %734 = sub i64 %733, %732
  %735 = ashr exact i64 %734, 2
  %736 = icmp eq i64 %734, 0
  br i1 %736, label %755, label %737

737:                                              ; preds = %731
  %738 = icmp ugt i64 %735, 4611686018427387903
  br i1 %738, label %739, label %741

739:                                              ; preds = %737
  %740 = bitcast %"class.std::__1::vector.43"* %21 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %740) #28
  unreachable

741:                                              ; preds = %737
  %742 = call i8* @_Znwm(i64 %734) #29
  %743 = bitcast i8* %742 to i32*
  store i8* %742, i8** %373, align 8, !alias.scope !303
  store i8* %742, i8** %374, align 8, !alias.scope !303
  %744 = getelementptr inbounds i32, i32* %743, i64 %735
  store i32* %744, i32** %375, align 8, !alias.scope !303
  %745 = ptrtoint i8* %742 to i64
  %746 = icmp sgt i64 %734, 0
  br i1 %746, label %747, label %752

747:                                              ; preds = %741
  %748 = lshr exact i64 %734, 2
  %749 = bitcast i32* %728 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %742, i8* align 4 %749, i64 %734, i1 false) #24
  %750 = getelementptr inbounds i32, i32* %743, i64 %748
  %751 = ptrtoint i32* %750 to i64
  br label %752

752:                                              ; preds = %747, %741
  %753 = phi i64 [ %751, %747 ], [ %745, %741 ]
  store i64 %753, i64* %376, align 8, !alias.scope !303
  br label %755

754:                                              ; preds = %727
  call fastcc void @_ZN3jxl12_GLOBAL__N_117QuantizeHistogramERKNSt3__16vectorIjNS1_9allocatorIjEEEEm(%"class.std::__1::vector.43"* nonnull sret %21, %"class.std::__1::vector.55"* dereferenceable(24) %4, i64 %7) #24
  br label %755

755:                                              ; preds = %731, %752, %754
  %756 = load %"class.std::__1::vector.43"*, %"class.std::__1::vector.43"** %362, align 8
  %757 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %756, i64 %716
  %758 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %757, i64 0, i32 0, i32 0
  %759 = load i32*, i32** %758, align 8
  %760 = icmp eq i32* %759, null
  br i1 %760, label %767, label %761

761:                                              ; preds = %755
  %762 = ptrtoint i32* %759 to i64
  %763 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %756, i64 %716, i32 0, i32 1
  %764 = bitcast i32** %763 to i64*
  store i64 %762, i64* %764, align 8
  %765 = bitcast i32* %759 to i8*
  call void @_ZdlPv(i8* %765) #29
  %766 = bitcast %"class.std::__1::vector.43"* %757 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %766, i8 0, i64 24, i1 false) #24
  br label %767

767:                                              ; preds = %761, %755
  %768 = load i64, i64* %377, align 8
  %769 = bitcast %"class.std::__1::vector.43"* %757 to i64*
  store i64 %768, i64* %769, align 8
  %770 = load i64, i64* %376, align 8
  %771 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %756, i64 %716, i32 0, i32 1
  %772 = bitcast i32** %771 to i64*
  store i64 %770, i64* %772, align 8
  %773 = load i64, i64* %378, align 8
  %774 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %756, i64 %716, i32 0, i32 2, i32 0, i32 0
  %775 = bitcast i32** %774 to i64*
  store i64 %773, i64* %775, align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %371) #24
  br label %1419

776:                                              ; preds = %714
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %363) #24
  %777 = load i32*, i32** %29, align 8, !noalias !306
  %778 = load i32*, i32** %30, align 8, !noalias !306
  %779 = icmp eq i32* %777, %778
  br i1 %779, label %803, label %780

780:                                              ; preds = %776
  %781 = ptrtoint i32* %777 to i64
  %782 = ptrtoint i32* %778 to i64
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %363, i8 0, i64 24, i1 false) #24, !alias.scope !306
  %783 = sub i64 %782, %781
  %784 = ashr exact i64 %783, 2
  %785 = icmp eq i64 %783, 0
  br i1 %785, label %804, label %786

786:                                              ; preds = %780
  %787 = icmp ugt i64 %784, 4611686018427387903
  br i1 %787, label %788, label %790

788:                                              ; preds = %786
  %789 = bitcast %"class.std::__1::vector.43"* %22 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %789) #28
  unreachable

790:                                              ; preds = %786
  %791 = call i8* @_Znwm(i64 %783) #29
  %792 = bitcast i8* %791 to i32*
  store i8* %791, i8** %365, align 8, !alias.scope !306
  store i8* %791, i8** %366, align 8, !alias.scope !306
  %793 = getelementptr inbounds i32, i32* %792, i64 %784
  store i32* %793, i32** %367, align 8, !alias.scope !306
  %794 = ptrtoint i8* %791 to i64
  %795 = icmp sgt i64 %783, 0
  br i1 %795, label %796, label %801

796:                                              ; preds = %790
  %797 = lshr exact i64 %783, 2
  %798 = bitcast i32* %777 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %791, i8* align 4 %798, i64 %783, i1 false) #24
  %799 = getelementptr inbounds i32, i32* %792, i64 %797
  %800 = ptrtoint i32* %799 to i64
  br label %801

801:                                              ; preds = %796, %790
  %802 = phi i64 [ %800, %796 ], [ %794, %790 ]
  store i64 %802, i64* %368, align 8, !alias.scope !306
  br label %804

803:                                              ; preds = %776
  call fastcc void @_ZN3jxl12_GLOBAL__N_117QuantizeHistogramERKNSt3__16vectorIjNS1_9allocatorIjEEEEm(%"class.std::__1::vector.43"* nonnull sret %22, %"class.std::__1::vector.55"* dereferenceable(24) %3, i64 %7) #24
  br label %804

804:                                              ; preds = %780, %801, %803
  %805 = load %"class.std::__1::vector.43"*, %"class.std::__1::vector.43"** %362, align 8
  %806 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %805, i64 %716
  %807 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %806, i64 0, i32 0, i32 0
  %808 = load i32*, i32** %807, align 8
  %809 = icmp eq i32* %808, null
  br i1 %809, label %816, label %810

810:                                              ; preds = %804
  %811 = ptrtoint i32* %808 to i64
  %812 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %805, i64 %716, i32 0, i32 1
  %813 = bitcast i32** %812 to i64*
  store i64 %811, i64* %813, align 8
  %814 = bitcast i32* %808 to i8*
  call void @_ZdlPv(i8* %814) #29
  %815 = bitcast %"class.std::__1::vector.43"* %806 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %815, i8 0, i64 24, i1 false) #24
  br label %816

816:                                              ; preds = %810, %804
  %817 = load i64, i64* %369, align 8
  %818 = bitcast %"class.std::__1::vector.43"* %806 to i64*
  store i64 %817, i64* %818, align 8
  %819 = load i64, i64* %368, align 8
  %820 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %805, i64 %716, i32 0, i32 1
  %821 = bitcast i32** %820 to i64*
  store i64 %819, i64* %821, align 8
  %822 = load i64, i64* %370, align 8
  %823 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %805, i64 %716, i32 0, i32 2, i32 0, i32 0
  %824 = bitcast i32** %823 to i64*
  store i64 %822, i64* %824, align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %363) #24
  br label %1419

825:                                              ; preds = %714, %714
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %352) #24
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %352, i8 0, i64 24, i1 false) #24, !alias.scope !309
  br i1 %358, label %902, label %826

826:                                              ; preds = %825
  br i1 %359, label %827, label %828

827:                                              ; preds = %826
  call void @abort() #28
  unreachable

828:                                              ; preds = %826
  %829 = call i8* @_Znwm(i64 %361) #29, !noalias !309
  %830 = bitcast i8* %829 to i32*
  %831 = ptrtoint i8* %829 to i64
  %832 = getelementptr inbounds i32, i32* %830, i64 %355
  %833 = ptrtoint i32* %832 to i64
  store i64 %831, i64* %357, align 8, !alias.scope !309
  store i64 %831, i64* %360, align 8, !alias.scope !309
  store i64 %833, i64* %356, align 8, !alias.scope !309
  br label %834

834:                                              ; preds = %898, %828
  %835 = phi i64 [ %831, %828 ], [ %901, %898 ]
  %836 = phi i32* [ %832, %828 ], [ %900, %898 ]
  %837 = phi i32* [ %830, %828 ], [ %899, %898 ]
  %838 = phi i64 [ 1, %828 ], [ %896, %898 ]
  %839 = shl i64 %838, 8
  %840 = udiv i64 %839, %7
  %841 = trunc i64 %840 to i32
  %842 = add i32 %841, -1
  %843 = icmp ult i32* %837, %836
  %844 = ptrtoint i32* %836 to i64
  br i1 %843, label %845, label %848

845:                                              ; preds = %834
  store i32 %842, i32* %837, align 4
  %846 = getelementptr inbounds i32, i32* %837, i64 1
  %847 = ptrtoint i32* %846 to i64
  store i64 %847, i64* %360, align 8, !alias.scope !309
  br label %895

848:                                              ; preds = %834
  %849 = ptrtoint i32* %837 to i64
  %850 = load i64, i64* %357, align 8, !alias.scope !309
  %851 = sub i64 %849, %850
  %852 = ashr exact i64 %851, 2
  %853 = add nsw i64 %852, 1
  %854 = icmp ugt i64 %853, 4611686018427387903
  br i1 %854, label %855, label %857

855:                                              ; preds = %848
  %856 = bitcast %"class.std::__1::vector.43"* %23 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %856) #28
  unreachable

857:                                              ; preds = %848
  %858 = sub i64 %844, %850
  %859 = ashr exact i64 %858, 2
  %860 = icmp ult i64 %859, 2305843009213693951
  br i1 %860, label %861, label %869

861:                                              ; preds = %857
  %862 = ashr exact i64 %858, 1
  %863 = icmp ult i64 %862, %853
  %864 = select i1 %863, i64 %853, i64 %862
  %865 = icmp eq i64 %864, 0
  br i1 %865, label %874, label %866

866:                                              ; preds = %861
  %867 = icmp ugt i64 %864, 4611686018427387903
  br i1 %867, label %868, label %869

868:                                              ; preds = %866
  call void @abort() #28
  unreachable

869:                                              ; preds = %866, %857
  %870 = phi i64 [ %864, %866 ], [ 4611686018427387903, %857 ]
  %871 = shl i64 %870, 2
  %872 = call i8* @_Znwm(i64 %871) #29
  %873 = bitcast i8* %872 to i32*
  br label %874

874:                                              ; preds = %869, %861
  %875 = phi i64 [ %870, %869 ], [ 0, %861 ]
  %876 = phi i32* [ %873, %869 ], [ null, %861 ]
  %877 = getelementptr inbounds i32, i32* %876, i64 %852
  %878 = getelementptr inbounds i32, i32* %876, i64 %875
  %879 = ptrtoint i32* %878 to i64
  store i32 %842, i32* %877, align 4, !noalias !309
  %880 = getelementptr inbounds i32, i32* %877, i64 1
  %881 = ptrtoint i32* %880 to i64
  %882 = sub i64 %835, %850
  %883 = ashr exact i64 %882, 2
  %884 = sub nsw i64 0, %883
  %885 = getelementptr inbounds i32, i32* %877, i64 %884
  %886 = ptrtoint i32* %885 to i64
  %887 = icmp sgt i64 %882, 0
  br i1 %887, label %888, label %891

888:                                              ; preds = %874
  %889 = bitcast i32* %885 to i8*
  %890 = inttoptr i64 %850 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %889, i8* align 4 %890, i64 %882, i1 false) #24
  br label %891

891:                                              ; preds = %888, %874
  store i64 %886, i64* %357, align 8, !alias.scope !309
  store i64 %881, i64* %360, align 8, !alias.scope !309
  store i64 %879, i64* %356, align 8, !alias.scope !309
  %892 = icmp eq i64 %850, 0
  br i1 %892, label %895, label %893

893:                                              ; preds = %891
  %894 = inttoptr i64 %850 to i8*
  call void @_ZdlPv(i8* %894) #29
  br label %895

895:                                              ; preds = %893, %891, %845
  %896 = add nuw i64 %838, 1
  %897 = icmp ult i64 %896, %7
  br i1 %897, label %898, label %902

898:                                              ; preds = %895
  %899 = load i32*, i32** %353, align 8, !alias.scope !309
  %900 = load i32*, i32** %354, align 8, !alias.scope !309
  %901 = ptrtoint i32* %899 to i64
  br label %834

902:                                              ; preds = %895, %825
  %903 = load %"class.std::__1::vector.43"*, %"class.std::__1::vector.43"** %362, align 8
  %904 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %903, i64 %716
  %905 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %904, i64 0, i32 0, i32 0
  %906 = load i32*, i32** %905, align 8
  %907 = icmp eq i32* %906, null
  br i1 %907, label %914, label %908

908:                                              ; preds = %902
  %909 = ptrtoint i32* %906 to i64
  %910 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %903, i64 %716, i32 0, i32 1
  %911 = bitcast i32** %910 to i64*
  store i64 %909, i64* %911, align 8
  %912 = bitcast i32* %906 to i8*
  call void @_ZdlPv(i8* %912) #29
  %913 = bitcast %"class.std::__1::vector.43"* %904 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %913, i8 0, i64 24, i1 false) #24
  br label %914

914:                                              ; preds = %908, %902
  %915 = load i64, i64* %357, align 8
  %916 = bitcast %"class.std::__1::vector.43"* %904 to i64*
  store i64 %915, i64* %916, align 8
  %917 = load i64, i64* %360, align 8
  %918 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %903, i64 %716, i32 0, i32 1
  %919 = bitcast i32** %918 to i64*
  store i64 %917, i64* %919, align 8
  %920 = load i64, i64* %356, align 8
  %921 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %903, i64 %716, i32 0, i32 2, i32 0, i32 0
  %922 = bitcast i32** %921 to i64*
  store i64 %920, i64* %922, align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %352) #24
  br label %1419

923:                                              ; preds = %714
  %924 = icmp ugt i32 %726, 15
  br i1 %924, label %925, label %984

925:                                              ; preds = %923
  %926 = and i32 %726, 3
  switch i32 %926, label %1362 [
    i32 1, label %927
    i32 0, label %985
    i32 2, label %1157
  ]

927:                                              ; preds = %925, %714, %714, %714
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %439) #24
  %928 = inttoptr i64 %723 to i32*
  %929 = inttoptr i64 %724 to i32*
  %930 = icmp eq i32* %928, %929
  br i1 %930, label %931, label %938

931:                                              ; preds = %927
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %440) #24, !noalias !312
  call fastcc void @_ZN3jxl12_GLOBAL__N_115QuantizeSamplesERKNSt3__16vectorIiNS1_9allocatorIiEEEEm(%"class.std::__1::vector.43"* nonnull sret %9, %"class.std::__1::vector.43"* dereferenceable(24) %5, i64 %7) #24
  %932 = icmp eq i64 %723, 0
  br i1 %932, label %935, label %933

933:                                              ; preds = %931
  %934 = inttoptr i64 %723 to i8*
  call void @_ZdlPv(i8* %934) #29
  br label %935

935:                                              ; preds = %933, %931
  %936 = load i64, i64* %441, align 8, !noalias !312
  %937 = load i64, i64* %443, align 8, !noalias !312
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %440) #24, !noalias !312
  br label %938

938:                                              ; preds = %935, %927
  %939 = phi i64 [ %937, %935 ], [ %724, %927 ]
  %940 = phi i64 [ %936, %935 ], [ %723, %927 ]
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %439, i8 0, i64 24, i1 false) #24, !alias.scope !312
  %941 = sub i64 %939, %940
  %942 = ashr exact i64 %941, 2
  %943 = icmp eq i64 %941, 0
  br i1 %943, label %961, label %944

944:                                              ; preds = %938
  %945 = icmp ugt i64 %942, 4611686018427387903
  br i1 %945, label %946, label %948

946:                                              ; preds = %944
  %947 = bitcast %"class.std::__1::vector.43"* %24 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %947) #28
  unreachable

948:                                              ; preds = %944
  %949 = call i8* @_Znwm(i64 %941) #29
  %950 = bitcast i8* %949 to i32*
  store i8* %949, i8** %445, align 8, !alias.scope !312
  store i8* %949, i8** %446, align 8, !alias.scope !312
  %951 = getelementptr inbounds i32, i32* %950, i64 %942
  store i32* %951, i32** %447, align 8, !alias.scope !312
  %952 = ptrtoint i8* %949 to i64
  %953 = icmp sgt i64 %941, 0
  br i1 %953, label %954, label %959

954:                                              ; preds = %948
  %955 = lshr exact i64 %941, 2
  %956 = inttoptr i64 %940 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %949, i8* align 4 %956, i64 %941, i1 false) #24
  %957 = getelementptr inbounds i32, i32* %950, i64 %955
  %958 = ptrtoint i32* %957 to i64
  br label %959

959:                                              ; preds = %954, %948
  %960 = phi i64 [ %958, %954 ], [ %952, %948 ]
  store i64 %960, i64* %448, align 8, !alias.scope !312
  br label %961

961:                                              ; preds = %938, %959
  %962 = phi i64 [ 0, %938 ], [ %952, %959 ]
  %963 = load %"class.std::__1::vector.43"*, %"class.std::__1::vector.43"** %362, align 8
  %964 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %963, i64 %716
  %965 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %964, i64 0, i32 0, i32 0
  %966 = load i32*, i32** %965, align 8
  %967 = icmp eq i32* %966, null
  br i1 %967, label %975, label %968

968:                                              ; preds = %961
  %969 = ptrtoint i32* %966 to i64
  %970 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %963, i64 %716, i32 0, i32 1
  %971 = bitcast i32** %970 to i64*
  store i64 %969, i64* %971, align 8
  %972 = bitcast i32* %966 to i8*
  call void @_ZdlPv(i8* %972) #29
  %973 = bitcast %"class.std::__1::vector.43"* %964 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %973, i8 0, i64 24, i1 false) #24
  %974 = load i64, i64* %449, align 8
  br label %975

975:                                              ; preds = %968, %961
  %976 = phi i64 [ %974, %968 ], [ %962, %961 ]
  %977 = bitcast %"class.std::__1::vector.43"* %964 to i64*
  store i64 %976, i64* %977, align 8
  %978 = load i64, i64* %448, align 8
  %979 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %963, i64 %716, i32 0, i32 1
  %980 = bitcast i32** %979 to i64*
  store i64 %978, i64* %980, align 8
  %981 = load i64, i64* %450, align 8
  %982 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %963, i64 %716, i32 0, i32 2, i32 0, i32 0
  %983 = bitcast i32** %982 to i64*
  store i64 %981, i64* %983, align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %439) #24
  br label %1419

984:                                              ; preds = %923
  switch i32 %726, label %1362 [
    i32 4, label %985
    i32 5, label %985
    i32 15, label %1329
  ]

985:                                              ; preds = %925, %984, %984
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %416) #24
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %417)
  %986 = inttoptr i64 %718 to i32*
  %987 = inttoptr i64 %717 to i32*
  %988 = icmp eq i32* %986, %987
  br i1 %988, label %989, label %1109

989:                                              ; preds = %985
  %990 = inttoptr i64 %723 to i32*
  %991 = inttoptr i64 %724 to i32*
  %992 = icmp eq i32* %990, %991
  br i1 %992, label %993, label %1000

993:                                              ; preds = %989
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %418) #24, !noalias !315
  call fastcc void @_ZN3jxl12_GLOBAL__N_115QuantizeSamplesERKNSt3__16vectorIiNS1_9allocatorIiEEEEm(%"class.std::__1::vector.43"* nonnull sret %10, %"class.std::__1::vector.43"* dereferenceable(24) %5, i64 %7) #24
  %994 = icmp eq i64 %723, 0
  br i1 %994, label %997, label %995

995:                                              ; preds = %993
  %996 = inttoptr i64 %723 to i8*
  call void @_ZdlPv(i8* %996) #29
  br label %997

997:                                              ; preds = %995, %993
  %998 = load i64, i64* %419, align 8, !noalias !315
  %999 = load i64, i64* %421, align 8, !noalias !315
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %418) #24, !noalias !315
  br label %1000

1000:                                             ; preds = %997, %989
  %1001 = phi i64 [ %999, %997 ], [ %724, %989 ]
  %1002 = phi i64 [ %998, %997 ], [ %723, %989 ]
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %417, i8 0, i64 24, i1 false) #24, !alias.scope !320, !noalias !321
  %1003 = sub i64 %1001, %1002
  %1004 = ashr exact i64 %1003, 2
  %1005 = icmp eq i64 %1003, 0
  br i1 %1005, label %1015, label %1006

1006:                                             ; preds = %1000
  %1007 = icmp ugt i64 %1004, 4611686018427387903
  br i1 %1007, label %1008, label %1010

1008:                                             ; preds = %1006
  %1009 = bitcast %"class.std::__1::vector.43"* %11 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %1009) #28
  unreachable

1010:                                             ; preds = %1006
  %1011 = call i8* @_Znwm(i64 %1003) #29
  %1012 = bitcast i8* %1011 to i32*
  store i8* %1011, i8** %423, align 8, !alias.scope !320, !noalias !321
  %1013 = getelementptr inbounds i32, i32* %1012, i64 %1004
  store i32* %1013, i32** %424, align 8, !alias.scope !320, !noalias !321
  %1014 = ptrtoint i8* %1011 to i64
  store i64 %1014, i64* %425, align 8, !noalias !321
  call void @_ZdlPv(i8* nonnull %1011) #29
  br label %1015

1015:                                             ; preds = %1010, %1000
  %1016 = load i32*, i32** %426, align 8
  %1017 = load i32*, i32** %427, align 8
  %1018 = icmp eq i32* %1016, %1017
  br i1 %1018, label %1094, label %1019

1019:                                             ; preds = %1015
  %1020 = ptrtoint i32* %1016 to i64
  %1021 = getelementptr i32, i32* %1017, i64 -1
  %1022 = ptrtoint i32* %1021 to i64
  %1023 = sub i64 %1022, %1020
  %1024 = lshr i64 %1023, 2
  %1025 = add nuw nsw i64 %1024, 1
  %1026 = icmp ult i64 %1025, 8
  br i1 %1026, label %1027, label %1029

1027:                                             ; preds = %1092, %1019
  %1028 = phi i32* [ %1016, %1019 ], [ %1031, %1092 ]
  br label %1101

1029:                                             ; preds = %1019
  %1030 = and i64 %1025, 9223372036854775800
  %1031 = getelementptr i32, i32* %1016, i64 %1030
  %1032 = add nsw i64 %1030, -8
  %1033 = lshr exact i64 %1032, 3
  %1034 = add nuw nsw i64 %1033, 1
  %1035 = and i64 %1034, 1
  %1036 = icmp eq i64 %1032, 0
  br i1 %1036, label %1074, label %1037

1037:                                             ; preds = %1029
  %1038 = sub nuw nsw i64 %1034, %1035
  br label %1039

1039:                                             ; preds = %1039, %1037
  %1040 = phi i64 [ 0, %1037 ], [ %1071, %1039 ]
  %1041 = phi i64 [ %1038, %1037 ], [ %1072, %1039 ]
  %1042 = getelementptr i32, i32* %1016, i64 %1040
  %1043 = bitcast i32* %1042 to <4 x i32>*
  %1044 = load <4 x i32>, <4 x i32>* %1043, align 4
  %1045 = getelementptr i32, i32* %1042, i64 4
  %1046 = bitcast i32* %1045 to <4 x i32>*
  %1047 = load <4 x i32>, <4 x i32>* %1046, align 4
  %1048 = icmp slt <4 x i32> %1044, zeroinitializer
  %1049 = icmp slt <4 x i32> %1047, zeroinitializer
  %1050 = sub nsw <4 x i32> zeroinitializer, %1044
  %1051 = sub nsw <4 x i32> zeroinitializer, %1047
  %1052 = select <4 x i1> %1048, <4 x i32> %1050, <4 x i32> %1044
  %1053 = select <4 x i1> %1049, <4 x i32> %1051, <4 x i32> %1047
  %1054 = bitcast i32* %1042 to <4 x i32>*
  store <4 x i32> %1052, <4 x i32>* %1054, align 4
  %1055 = bitcast i32* %1045 to <4 x i32>*
  store <4 x i32> %1053, <4 x i32>* %1055, align 4
  %1056 = or i64 %1040, 8
  %1057 = getelementptr i32, i32* %1016, i64 %1056
  %1058 = bitcast i32* %1057 to <4 x i32>*
  %1059 = load <4 x i32>, <4 x i32>* %1058, align 4
  %1060 = getelementptr i32, i32* %1057, i64 4
  %1061 = bitcast i32* %1060 to <4 x i32>*
  %1062 = load <4 x i32>, <4 x i32>* %1061, align 4
  %1063 = icmp slt <4 x i32> %1059, zeroinitializer
  %1064 = icmp slt <4 x i32> %1062, zeroinitializer
  %1065 = sub nsw <4 x i32> zeroinitializer, %1059
  %1066 = sub nsw <4 x i32> zeroinitializer, %1062
  %1067 = select <4 x i1> %1063, <4 x i32> %1065, <4 x i32> %1059
  %1068 = select <4 x i1> %1064, <4 x i32> %1066, <4 x i32> %1062
  %1069 = bitcast i32* %1057 to <4 x i32>*
  store <4 x i32> %1067, <4 x i32>* %1069, align 4
  %1070 = bitcast i32* %1060 to <4 x i32>*
  store <4 x i32> %1068, <4 x i32>* %1070, align 4
  %1071 = add i64 %1040, 16
  %1072 = add i64 %1041, -2
  %1073 = icmp eq i64 %1072, 0
  br i1 %1073, label %1074, label %1039, !llvm.loop !322

1074:                                             ; preds = %1039, %1029
  %1075 = phi i64 [ 0, %1029 ], [ %1071, %1039 ]
  %1076 = icmp eq i64 %1035, 0
  br i1 %1076, label %1092, label %1077

1077:                                             ; preds = %1074
  %1078 = getelementptr i32, i32* %1016, i64 %1075
  %1079 = bitcast i32* %1078 to <4 x i32>*
  %1080 = load <4 x i32>, <4 x i32>* %1079, align 4
  %1081 = getelementptr i32, i32* %1078, i64 4
  %1082 = bitcast i32* %1081 to <4 x i32>*
  %1083 = load <4 x i32>, <4 x i32>* %1082, align 4
  %1084 = icmp slt <4 x i32> %1080, zeroinitializer
  %1085 = icmp slt <4 x i32> %1083, zeroinitializer
  %1086 = sub nsw <4 x i32> zeroinitializer, %1080
  %1087 = sub nsw <4 x i32> zeroinitializer, %1083
  %1088 = select <4 x i1> %1084, <4 x i32> %1086, <4 x i32> %1080
  %1089 = select <4 x i1> %1085, <4 x i32> %1087, <4 x i32> %1083
  %1090 = bitcast i32* %1078 to <4 x i32>*
  store <4 x i32> %1088, <4 x i32>* %1090, align 4
  %1091 = bitcast i32* %1081 to <4 x i32>*
  store <4 x i32> %1089, <4 x i32>* %1091, align 4
  br label %1092

1092:                                             ; preds = %1074, %1077
  %1093 = icmp eq i64 %1025, %1030
  br i1 %1093, label %1094, label %1027

1094:                                             ; preds = %1101, %1092, %1015
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %428) #24, !noalias !321
  call fastcc void @_ZN3jxl12_GLOBAL__N_115QuantizeSamplesERKNSt3__16vectorIiNS1_9allocatorIiEEEEm(%"class.std::__1::vector.43"* nonnull sret %12, %"class.std::__1::vector.43"* dereferenceable(24) %5, i64 %7) #24
  %1095 = icmp eq i64 %718, 0
  br i1 %1095, label %1098, label %1096

1096:                                             ; preds = %1094
  %1097 = inttoptr i64 %718 to i8*
  call void @_ZdlPv(i8* %1097) #29
  br label %1098

1098:                                             ; preds = %1096, %1094
  %1099 = load i64, i64* %429, align 8, !noalias !321
  %1100 = load i64, i64* %431, align 8, !noalias !321
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %428) #24, !noalias !321
  br label %1109

1101:                                             ; preds = %1027, %1101
  %1102 = phi i32* [ %1107, %1101 ], [ %1028, %1027 ]
  %1103 = load i32, i32* %1102, align 4
  %1104 = icmp slt i32 %1103, 0
  %1105 = sub nsw i32 0, %1103
  %1106 = select i1 %1104, i32 %1105, i32 %1103
  store i32 %1106, i32* %1102, align 4
  %1107 = getelementptr inbounds i32, i32* %1102, i64 1
  %1108 = icmp eq i32* %1107, %1017
  br i1 %1108, label %1094, label %1101, !llvm.loop !323

1109:                                             ; preds = %1098, %985
  %1110 = phi i64 [ %1001, %1098 ], [ %724, %985 ]
  %1111 = phi i64 [ %1002, %1098 ], [ %723, %985 ]
  %1112 = phi i64 [ %1099, %1098 ], [ %718, %985 ]
  %1113 = phi i64 [ %1100, %1098 ], [ %717, %985 ]
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %416, i8 0, i64 24, i1 false) #24, !alias.scope !321
  %1114 = sub i64 %1113, %1112
  %1115 = ashr exact i64 %1114, 2
  %1116 = icmp eq i64 %1114, 0
  br i1 %1116, label %1134, label %1117

1117:                                             ; preds = %1109
  %1118 = icmp ugt i64 %1115, 4611686018427387903
  br i1 %1118, label %1119, label %1121

1119:                                             ; preds = %1117
  %1120 = bitcast %"class.std::__1::vector.43"* %25 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %1120) #28
  unreachable

1121:                                             ; preds = %1117
  %1122 = call i8* @_Znwm(i64 %1114) #29
  %1123 = bitcast i8* %1122 to i32*
  store i8* %1122, i8** %433, align 8, !alias.scope !321
  store i8* %1122, i8** %434, align 8, !alias.scope !321
  %1124 = getelementptr inbounds i32, i32* %1123, i64 %1115
  store i32* %1124, i32** %435, align 8, !alias.scope !321
  %1125 = ptrtoint i8* %1122 to i64
  %1126 = icmp sgt i64 %1114, 0
  br i1 %1126, label %1127, label %1132

1127:                                             ; preds = %1121
  %1128 = lshr exact i64 %1114, 2
  %1129 = inttoptr i64 %1112 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %1122, i8* align 4 %1129, i64 %1114, i1 false) #24
  %1130 = getelementptr inbounds i32, i32* %1123, i64 %1128
  %1131 = ptrtoint i32* %1130 to i64
  br label %1132

1132:                                             ; preds = %1127, %1121
  %1133 = phi i64 [ %1131, %1127 ], [ %1125, %1121 ]
  store i64 %1133, i64* %436, align 8, !alias.scope !321
  br label %1134

1134:                                             ; preds = %1109, %1132
  %1135 = phi i64 [ 0, %1109 ], [ %1125, %1132 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %417)
  %1136 = load %"class.std::__1::vector.43"*, %"class.std::__1::vector.43"** %362, align 8
  %1137 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %1136, i64 %716
  %1138 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %1137, i64 0, i32 0, i32 0
  %1139 = load i32*, i32** %1138, align 8
  %1140 = icmp eq i32* %1139, null
  br i1 %1140, label %1148, label %1141

1141:                                             ; preds = %1134
  %1142 = ptrtoint i32* %1139 to i64
  %1143 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %1136, i64 %716, i32 0, i32 1
  %1144 = bitcast i32** %1143 to i64*
  store i64 %1142, i64* %1144, align 8
  %1145 = bitcast i32* %1139 to i8*
  call void @_ZdlPv(i8* %1145) #29
  %1146 = bitcast %"class.std::__1::vector.43"* %1137 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %1146, i8 0, i64 24, i1 false) #24
  %1147 = load i64, i64* %437, align 8
  br label %1148

1148:                                             ; preds = %1141, %1134
  %1149 = phi i64 [ %1147, %1141 ], [ %1135, %1134 ]
  %1150 = bitcast %"class.std::__1::vector.43"* %1137 to i64*
  store i64 %1149, i64* %1150, align 8
  %1151 = load i64, i64* %436, align 8
  %1152 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %1136, i64 %716, i32 0, i32 1
  %1153 = bitcast i32** %1152 to i64*
  store i64 %1151, i64* %1153, align 8
  %1154 = load i64, i64* %438, align 8
  %1155 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %1136, i64 %716, i32 0, i32 2, i32 0, i32 0
  %1156 = bitcast i32** %1155 to i64*
  store i64 %1154, i64* %1156, align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %416) #24
  br label %1419

1157:                                             ; preds = %925
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %393) #24
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %394)
  %1158 = inttoptr i64 %720 to i32*
  %1159 = inttoptr i64 %719 to i32*
  %1160 = icmp eq i32* %1158, %1159
  br i1 %1160, label %1161, label %1281

1161:                                             ; preds = %1157
  %1162 = inttoptr i64 %722 to i32*
  %1163 = inttoptr i64 %721 to i32*
  %1164 = icmp eq i32* %1162, %1163
  br i1 %1164, label %1165, label %1172

1165:                                             ; preds = %1161
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %395) #24, !noalias !324
  call fastcc void @_ZN3jxl12_GLOBAL__N_115QuantizeSamplesERKNSt3__16vectorIiNS1_9allocatorIiEEEEm(%"class.std::__1::vector.43"* nonnull sret %13, %"class.std::__1::vector.43"* dereferenceable(24) %6, i64 %7) #24
  %1166 = icmp eq i64 %722, 0
  br i1 %1166, label %1169, label %1167

1167:                                             ; preds = %1165
  %1168 = inttoptr i64 %722 to i8*
  call void @_ZdlPv(i8* %1168) #29
  br label %1169

1169:                                             ; preds = %1167, %1165
  %1170 = load i64, i64* %396, align 8, !noalias !324
  %1171 = load i64, i64* %398, align 8, !noalias !324
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %395) #24, !noalias !324
  br label %1172

1172:                                             ; preds = %1169, %1161
  %1173 = phi i64 [ %1170, %1169 ], [ %722, %1161 ]
  %1174 = phi i64 [ %1171, %1169 ], [ %721, %1161 ]
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %394, i8 0, i64 24, i1 false) #24, !alias.scope !329, !noalias !330
  %1175 = sub i64 %1174, %1173
  %1176 = ashr exact i64 %1175, 2
  %1177 = icmp eq i64 %1175, 0
  br i1 %1177, label %1187, label %1178

1178:                                             ; preds = %1172
  %1179 = icmp ugt i64 %1176, 4611686018427387903
  br i1 %1179, label %1180, label %1182

1180:                                             ; preds = %1178
  %1181 = bitcast %"class.std::__1::vector.43"* %14 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %1181) #28
  unreachable

1182:                                             ; preds = %1178
  %1183 = call i8* @_Znwm(i64 %1175) #29
  %1184 = bitcast i8* %1183 to i32*
  store i8* %1183, i8** %400, align 8, !alias.scope !329, !noalias !330
  %1185 = getelementptr inbounds i32, i32* %1184, i64 %1176
  store i32* %1185, i32** %401, align 8, !alias.scope !329, !noalias !330
  %1186 = ptrtoint i8* %1183 to i64
  store i64 %1186, i64* %402, align 8, !noalias !330
  call void @_ZdlPv(i8* nonnull %1183) #29
  br label %1187

1187:                                             ; preds = %1182, %1172
  %1188 = load i32*, i32** %403, align 8
  %1189 = load i32*, i32** %404, align 8
  %1190 = icmp eq i32* %1188, %1189
  br i1 %1190, label %1266, label %1191

1191:                                             ; preds = %1187
  %1192 = ptrtoint i32* %1188 to i64
  %1193 = getelementptr i32, i32* %1189, i64 -1
  %1194 = ptrtoint i32* %1193 to i64
  %1195 = sub i64 %1194, %1192
  %1196 = lshr i64 %1195, 2
  %1197 = add nuw nsw i64 %1196, 1
  %1198 = icmp ult i64 %1197, 8
  br i1 %1198, label %1199, label %1201

1199:                                             ; preds = %1264, %1191
  %1200 = phi i32* [ %1188, %1191 ], [ %1203, %1264 ]
  br label %1273

1201:                                             ; preds = %1191
  %1202 = and i64 %1197, 9223372036854775800
  %1203 = getelementptr i32, i32* %1188, i64 %1202
  %1204 = add nsw i64 %1202, -8
  %1205 = lshr exact i64 %1204, 3
  %1206 = add nuw nsw i64 %1205, 1
  %1207 = and i64 %1206, 1
  %1208 = icmp eq i64 %1204, 0
  br i1 %1208, label %1246, label %1209

1209:                                             ; preds = %1201
  %1210 = sub nuw nsw i64 %1206, %1207
  br label %1211

1211:                                             ; preds = %1211, %1209
  %1212 = phi i64 [ 0, %1209 ], [ %1243, %1211 ]
  %1213 = phi i64 [ %1210, %1209 ], [ %1244, %1211 ]
  %1214 = getelementptr i32, i32* %1188, i64 %1212
  %1215 = bitcast i32* %1214 to <4 x i32>*
  %1216 = load <4 x i32>, <4 x i32>* %1215, align 4
  %1217 = getelementptr i32, i32* %1214, i64 4
  %1218 = bitcast i32* %1217 to <4 x i32>*
  %1219 = load <4 x i32>, <4 x i32>* %1218, align 4
  %1220 = icmp slt <4 x i32> %1216, zeroinitializer
  %1221 = icmp slt <4 x i32> %1219, zeroinitializer
  %1222 = sub nsw <4 x i32> zeroinitializer, %1216
  %1223 = sub nsw <4 x i32> zeroinitializer, %1219
  %1224 = select <4 x i1> %1220, <4 x i32> %1222, <4 x i32> %1216
  %1225 = select <4 x i1> %1221, <4 x i32> %1223, <4 x i32> %1219
  %1226 = bitcast i32* %1214 to <4 x i32>*
  store <4 x i32> %1224, <4 x i32>* %1226, align 4
  %1227 = bitcast i32* %1217 to <4 x i32>*
  store <4 x i32> %1225, <4 x i32>* %1227, align 4
  %1228 = or i64 %1212, 8
  %1229 = getelementptr i32, i32* %1188, i64 %1228
  %1230 = bitcast i32* %1229 to <4 x i32>*
  %1231 = load <4 x i32>, <4 x i32>* %1230, align 4
  %1232 = getelementptr i32, i32* %1229, i64 4
  %1233 = bitcast i32* %1232 to <4 x i32>*
  %1234 = load <4 x i32>, <4 x i32>* %1233, align 4
  %1235 = icmp slt <4 x i32> %1231, zeroinitializer
  %1236 = icmp slt <4 x i32> %1234, zeroinitializer
  %1237 = sub nsw <4 x i32> zeroinitializer, %1231
  %1238 = sub nsw <4 x i32> zeroinitializer, %1234
  %1239 = select <4 x i1> %1235, <4 x i32> %1237, <4 x i32> %1231
  %1240 = select <4 x i1> %1236, <4 x i32> %1238, <4 x i32> %1234
  %1241 = bitcast i32* %1229 to <4 x i32>*
  store <4 x i32> %1239, <4 x i32>* %1241, align 4
  %1242 = bitcast i32* %1232 to <4 x i32>*
  store <4 x i32> %1240, <4 x i32>* %1242, align 4
  %1243 = add i64 %1212, 16
  %1244 = add i64 %1213, -2
  %1245 = icmp eq i64 %1244, 0
  br i1 %1245, label %1246, label %1211, !llvm.loop !331

1246:                                             ; preds = %1211, %1201
  %1247 = phi i64 [ 0, %1201 ], [ %1243, %1211 ]
  %1248 = icmp eq i64 %1207, 0
  br i1 %1248, label %1264, label %1249

1249:                                             ; preds = %1246
  %1250 = getelementptr i32, i32* %1188, i64 %1247
  %1251 = bitcast i32* %1250 to <4 x i32>*
  %1252 = load <4 x i32>, <4 x i32>* %1251, align 4
  %1253 = getelementptr i32, i32* %1250, i64 4
  %1254 = bitcast i32* %1253 to <4 x i32>*
  %1255 = load <4 x i32>, <4 x i32>* %1254, align 4
  %1256 = icmp slt <4 x i32> %1252, zeroinitializer
  %1257 = icmp slt <4 x i32> %1255, zeroinitializer
  %1258 = sub nsw <4 x i32> zeroinitializer, %1252
  %1259 = sub nsw <4 x i32> zeroinitializer, %1255
  %1260 = select <4 x i1> %1256, <4 x i32> %1258, <4 x i32> %1252
  %1261 = select <4 x i1> %1257, <4 x i32> %1259, <4 x i32> %1255
  %1262 = bitcast i32* %1250 to <4 x i32>*
  store <4 x i32> %1260, <4 x i32>* %1262, align 4
  %1263 = bitcast i32* %1253 to <4 x i32>*
  store <4 x i32> %1261, <4 x i32>* %1263, align 4
  br label %1264

1264:                                             ; preds = %1246, %1249
  %1265 = icmp eq i64 %1197, %1202
  br i1 %1265, label %1266, label %1199

1266:                                             ; preds = %1273, %1264, %1187
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %405) #24, !noalias !330
  call fastcc void @_ZN3jxl12_GLOBAL__N_115QuantizeSamplesERKNSt3__16vectorIiNS1_9allocatorIiEEEEm(%"class.std::__1::vector.43"* nonnull sret %15, %"class.std::__1::vector.43"* dereferenceable(24) %6, i64 %7) #24
  %1267 = icmp eq i64 %720, 0
  br i1 %1267, label %1270, label %1268

1268:                                             ; preds = %1266
  %1269 = inttoptr i64 %720 to i8*
  call void @_ZdlPv(i8* %1269) #29
  br label %1270

1270:                                             ; preds = %1268, %1266
  %1271 = load i64, i64* %406, align 8, !noalias !330
  %1272 = load i64, i64* %408, align 8, !noalias !330
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %405) #24, !noalias !330
  br label %1281

1273:                                             ; preds = %1199, %1273
  %1274 = phi i32* [ %1279, %1273 ], [ %1200, %1199 ]
  %1275 = load i32, i32* %1274, align 4
  %1276 = icmp slt i32 %1275, 0
  %1277 = sub nsw i32 0, %1275
  %1278 = select i1 %1276, i32 %1277, i32 %1275
  store i32 %1278, i32* %1274, align 4
  %1279 = getelementptr inbounds i32, i32* %1274, i64 1
  %1280 = icmp eq i32* %1279, %1189
  br i1 %1280, label %1266, label %1273, !llvm.loop !332

1281:                                             ; preds = %1270, %1157
  %1282 = phi i64 [ %1173, %1270 ], [ %722, %1157 ]
  %1283 = phi i64 [ %1174, %1270 ], [ %721, %1157 ]
  %1284 = phi i64 [ %1271, %1270 ], [ %720, %1157 ]
  %1285 = phi i64 [ %1272, %1270 ], [ %719, %1157 ]
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %393, i8 0, i64 24, i1 false) #24, !alias.scope !330
  %1286 = sub i64 %1285, %1284
  %1287 = ashr exact i64 %1286, 2
  %1288 = icmp eq i64 %1286, 0
  br i1 %1288, label %1306, label %1289

1289:                                             ; preds = %1281
  %1290 = icmp ugt i64 %1287, 4611686018427387903
  br i1 %1290, label %1291, label %1293

1291:                                             ; preds = %1289
  %1292 = bitcast %"class.std::__1::vector.43"* %26 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %1292) #28
  unreachable

1293:                                             ; preds = %1289
  %1294 = call i8* @_Znwm(i64 %1286) #29
  %1295 = bitcast i8* %1294 to i32*
  store i8* %1294, i8** %410, align 8, !alias.scope !330
  store i8* %1294, i8** %411, align 8, !alias.scope !330
  %1296 = getelementptr inbounds i32, i32* %1295, i64 %1287
  store i32* %1296, i32** %412, align 8, !alias.scope !330
  %1297 = ptrtoint i8* %1294 to i64
  %1298 = icmp sgt i64 %1286, 0
  br i1 %1298, label %1299, label %1304

1299:                                             ; preds = %1293
  %1300 = lshr exact i64 %1286, 2
  %1301 = inttoptr i64 %1284 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %1294, i8* align 4 %1301, i64 %1286, i1 false) #24
  %1302 = getelementptr inbounds i32, i32* %1295, i64 %1300
  %1303 = ptrtoint i32* %1302 to i64
  br label %1304

1304:                                             ; preds = %1299, %1293
  %1305 = phi i64 [ %1303, %1299 ], [ %1297, %1293 ]
  store i64 %1305, i64* %413, align 8, !alias.scope !330
  br label %1306

1306:                                             ; preds = %1281, %1304
  %1307 = phi i64 [ 0, %1281 ], [ %1297, %1304 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %394)
  %1308 = load %"class.std::__1::vector.43"*, %"class.std::__1::vector.43"** %362, align 8
  %1309 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %1308, i64 %716
  %1310 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %1309, i64 0, i32 0, i32 0
  %1311 = load i32*, i32** %1310, align 8
  %1312 = icmp eq i32* %1311, null
  br i1 %1312, label %1320, label %1313

1313:                                             ; preds = %1306
  %1314 = ptrtoint i32* %1311 to i64
  %1315 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %1308, i64 %716, i32 0, i32 1
  %1316 = bitcast i32** %1315 to i64*
  store i64 %1314, i64* %1316, align 8
  %1317 = bitcast i32* %1311 to i8*
  call void @_ZdlPv(i8* %1317) #29
  %1318 = bitcast %"class.std::__1::vector.43"* %1309 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %1318, i8 0, i64 24, i1 false) #24
  %1319 = load i64, i64* %414, align 8
  br label %1320

1320:                                             ; preds = %1313, %1306
  %1321 = phi i64 [ %1319, %1313 ], [ %1307, %1306 ]
  %1322 = bitcast %"class.std::__1::vector.43"* %1309 to i64*
  store i64 %1321, i64* %1322, align 8
  %1323 = load i64, i64* %413, align 8
  %1324 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %1308, i64 %716, i32 0, i32 1
  %1325 = bitcast i32** %1324 to i64*
  store i64 %1323, i64* %1325, align 8
  %1326 = load i64, i64* %415, align 8
  %1327 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %1308, i64 %716, i32 0, i32 2, i32 0, i32 0
  %1328 = bitcast i32** %1327 to i64*
  store i64 %1326, i64* %1328, align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %393) #24
  br label %1419

1329:                                             ; preds = %984
  br i1 %379, label %1330, label %1333

1330:                                             ; preds = %1329
  %1331 = call i8* @_Znwm(i64 60) #29, !noalias !333
  %1332 = getelementptr inbounds i8, i8* %1331, i64 60
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %1331, i8* align 4 bitcast ([15 x i32]* @.ref.tmp.19 to i8*), i64 60, i1 false) #24, !noalias !333
  br label %1340

1333:                                             ; preds = %1329
  br i1 %380, label %1334, label %1337

1334:                                             ; preds = %1333
  %1335 = call i8* @_Znwm(i64 116) #29, !noalias !333
  %1336 = getelementptr inbounds i8, i8* %1335, i64 116
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %1335, i8* align 4 bitcast ([29 x i32]* @.ref.tmp.20 to i8*), i64 116, i1 false) #24, !noalias !333
  br label %1340

1337:                                             ; preds = %1333
  %1338 = call i8* @_Znwm(i64 220) #29, !noalias !333
  %1339 = getelementptr inbounds i8, i8* %1338, i64 220
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %1338, i8* align 4 bitcast ([55 x i32]* @.ref.tmp.21 to i8*), i64 220, i1 false) #24, !noalias !333
  br label %1340

1340:                                             ; preds = %1330, %1334, %1337
  %1341 = phi i8* [ %1331, %1330 ], [ %1335, %1334 ], [ %1338, %1337 ]
  %1342 = phi i8* [ %1332, %1330 ], [ %1336, %1334 ], [ %1339, %1337 ]
  %1343 = ptrtoint i8* %1342 to i64
  %1344 = ptrtoint i8* %1341 to i64
  %1345 = load %"class.std::__1::vector.43"*, %"class.std::__1::vector.43"** %362, align 8
  %1346 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %1345, i64 %716
  %1347 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %1346, i64 0, i32 0, i32 0
  %1348 = load i32*, i32** %1347, align 8
  %1349 = icmp eq i32* %1348, null
  br i1 %1349, label %1356, label %1350

1350:                                             ; preds = %1340
  %1351 = ptrtoint i32* %1348 to i64
  %1352 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %1345, i64 %716, i32 0, i32 1
  %1353 = bitcast i32** %1352 to i64*
  store i64 %1351, i64* %1353, align 8
  %1354 = bitcast i32* %1348 to i8*
  call void @_ZdlPv(i8* %1354) #29
  %1355 = bitcast %"class.std::__1::vector.43"* %1346 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %1355, i8 0, i64 24, i1 false) #24
  br label %1356

1356:                                             ; preds = %1340, %1350
  %1357 = bitcast %"class.std::__1::vector.43"* %1346 to i64*
  store i64 %1344, i64* %1357, align 8
  %1358 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %1345, i64 %716, i32 0, i32 1
  %1359 = bitcast i32** %1358 to i64*
  store i64 %1343, i64* %1359, align 8
  %1360 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %1345, i64 %716, i32 0, i32 2, i32 0, i32 0
  %1361 = bitcast i32** %1360 to i64*
  store i64 %1343, i64* %1361, align 8
  br label %1419

1362:                                             ; preds = %925, %984
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %381) #24
  %1363 = inttoptr i64 %722 to i32*
  %1364 = inttoptr i64 %721 to i32*
  %1365 = icmp eq i32* %1363, %1364
  br i1 %1365, label %1366, label %1373

1366:                                             ; preds = %1362
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %382) #24, !noalias !336
  call fastcc void @_ZN3jxl12_GLOBAL__N_115QuantizeSamplesERKNSt3__16vectorIiNS1_9allocatorIiEEEEm(%"class.std::__1::vector.43"* nonnull sret %18, %"class.std::__1::vector.43"* dereferenceable(24) %6, i64 %7) #24
  %1367 = icmp eq i64 %722, 0
  br i1 %1367, label %1370, label %1368

1368:                                             ; preds = %1366
  %1369 = inttoptr i64 %722 to i8*
  call void @_ZdlPv(i8* %1369) #29
  br label %1370

1370:                                             ; preds = %1368, %1366
  %1371 = load i64, i64* %383, align 8, !noalias !336
  %1372 = load i64, i64* %385, align 8, !noalias !336
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %382) #24, !noalias !336
  br label %1373

1373:                                             ; preds = %1370, %1362
  %1374 = phi i64 [ %1371, %1370 ], [ %722, %1362 ]
  %1375 = phi i64 [ %1372, %1370 ], [ %721, %1362 ]
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %381, i8 0, i64 24, i1 false) #24, !alias.scope !336
  %1376 = sub i64 %1375, %1374
  %1377 = ashr exact i64 %1376, 2
  %1378 = icmp eq i64 %1376, 0
  br i1 %1378, label %1396, label %1379

1379:                                             ; preds = %1373
  %1380 = icmp ugt i64 %1377, 4611686018427387903
  br i1 %1380, label %1381, label %1383

1381:                                             ; preds = %1379
  %1382 = bitcast %"class.std::__1::vector.43"* %27 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %1382) #28
  unreachable

1383:                                             ; preds = %1379
  %1384 = call i8* @_Znwm(i64 %1376) #29
  %1385 = bitcast i8* %1384 to i32*
  store i8* %1384, i8** %387, align 8, !alias.scope !336
  store i8* %1384, i8** %388, align 8, !alias.scope !336
  %1386 = getelementptr inbounds i32, i32* %1385, i64 %1377
  store i32* %1386, i32** %389, align 8, !alias.scope !336
  %1387 = ptrtoint i8* %1384 to i64
  %1388 = icmp sgt i64 %1376, 0
  br i1 %1388, label %1389, label %1394

1389:                                             ; preds = %1383
  %1390 = lshr exact i64 %1376, 2
  %1391 = inttoptr i64 %1374 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %1384, i8* align 4 %1391, i64 %1376, i1 false) #24
  %1392 = getelementptr inbounds i32, i32* %1385, i64 %1390
  %1393 = ptrtoint i32* %1392 to i64
  br label %1394

1394:                                             ; preds = %1389, %1383
  %1395 = phi i64 [ %1393, %1389 ], [ %1387, %1383 ]
  store i64 %1395, i64* %390, align 8, !alias.scope !336
  br label %1396

1396:                                             ; preds = %1373, %1394
  %1397 = phi i64 [ 0, %1373 ], [ %1387, %1394 ]
  %1398 = load %"class.std::__1::vector.43"*, %"class.std::__1::vector.43"** %362, align 8
  %1399 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %1398, i64 %716
  %1400 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %1399, i64 0, i32 0, i32 0
  %1401 = load i32*, i32** %1400, align 8
  %1402 = icmp eq i32* %1401, null
  br i1 %1402, label %1410, label %1403

1403:                                             ; preds = %1396
  %1404 = ptrtoint i32* %1401 to i64
  %1405 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %1398, i64 %716, i32 0, i32 1
  %1406 = bitcast i32** %1405 to i64*
  store i64 %1404, i64* %1406, align 8
  %1407 = bitcast i32* %1401 to i8*
  call void @_ZdlPv(i8* %1407) #29
  %1408 = bitcast %"class.std::__1::vector.43"* %1399 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %1408, i8 0, i64 24, i1 false) #24
  %1409 = load i64, i64* %391, align 8
  br label %1410

1410:                                             ; preds = %1403, %1396
  %1411 = phi i64 [ %1409, %1403 ], [ %1397, %1396 ]
  %1412 = bitcast %"class.std::__1::vector.43"* %1399 to i64*
  store i64 %1411, i64* %1412, align 8
  %1413 = load i64, i64* %390, align 8
  %1414 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %1398, i64 %716, i32 0, i32 1
  %1415 = bitcast i32** %1414 to i64*
  store i64 %1413, i64* %1415, align 8
  %1416 = load i64, i64* %392, align 8
  %1417 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %1398, i64 %716, i32 0, i32 2, i32 0, i32 0
  %1418 = bitcast i32** %1417 to i64*
  store i64 %1416, i64* %1418, align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %381) #24
  br label %1419

1419:                                             ; preds = %816, %975, %1320, %1410, %1356, %1148, %914, %767
  %1420 = phi i64 [ %724, %767 ], [ %724, %816 ], [ %724, %914 ], [ %939, %975 ], [ %1110, %1148 ], [ %724, %1320 ], [ %724, %1356 ], [ %724, %1410 ]
  %1421 = phi i64 [ %723, %767 ], [ %723, %816 ], [ %723, %914 ], [ %940, %975 ], [ %1111, %1148 ], [ %723, %1320 ], [ %723, %1356 ], [ %723, %1410 ]
  %1422 = phi i64 [ %722, %767 ], [ %722, %816 ], [ %722, %914 ], [ %722, %975 ], [ %722, %1148 ], [ %1282, %1320 ], [ %722, %1356 ], [ %1374, %1410 ]
  %1423 = phi i64 [ %721, %767 ], [ %721, %816 ], [ %721, %914 ], [ %721, %975 ], [ %721, %1148 ], [ %1283, %1320 ], [ %721, %1356 ], [ %1375, %1410 ]
  %1424 = phi i64 [ %720, %767 ], [ %720, %816 ], [ %720, %914 ], [ %720, %975 ], [ %720, %1148 ], [ %1284, %1320 ], [ %720, %1356 ], [ %720, %1410 ]
  %1425 = phi i64 [ %719, %767 ], [ %719, %816 ], [ %719, %914 ], [ %719, %975 ], [ %719, %1148 ], [ %1285, %1320 ], [ %719, %1356 ], [ %719, %1410 ]
  %1426 = phi i64 [ %718, %767 ], [ %718, %816 ], [ %718, %914 ], [ %718, %975 ], [ %1112, %1148 ], [ %718, %1320 ], [ %718, %1356 ], [ %718, %1410 ]
  %1427 = phi i64 [ %717, %767 ], [ %717, %816 ], [ %717, %914 ], [ %717, %975 ], [ %1113, %1148 ], [ %717, %1320 ], [ %717, %1356 ], [ %717, %1410 ]
  %1428 = load %"class.std::__1::vector.29"*, %"class.std::__1::vector.29"** %451, align 8
  %1429 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %1428, i64 %716
  %1430 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %1428, i64 %716, i32 0, i32 1
  %1431 = bitcast i8** %1430 to i64*
  %1432 = load i64, i64* %1431, align 8
  %1433 = bitcast %"class.std::__1::vector.29"* %1429 to i64*
  %1434 = load i64, i64* %1433, align 8
  %1435 = sub i64 %1432, %1434
  %1436 = icmp ult i64 %1435, 1023
  %1437 = inttoptr i64 %1434 to i8*
  br i1 %1436, label %1438, label %1440

1438:                                             ; preds = %1419
  %1439 = sub nuw nsw i64 1023, %1435
  call void @_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm(%"class.std::__1::vector.29"* %1429, i64 %1439) #24
  br label %1444

1440:                                             ; preds = %1419
  %1441 = icmp eq i64 %1435, 1023
  br i1 %1441, label %1444, label %1442

1442:                                             ; preds = %1440
  %1443 = getelementptr inbounds i8, i8* %1437, i64 1023
  store i8* %1443, i8** %1430, align 8
  br label %1444

1444:                                             ; preds = %1440, %1438, %1442
  %1445 = load %"class.std::__1::vector.29"*, %"class.std::__1::vector.29"** %451, align 8
  %1446 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %1445, i64 %716
  %1447 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %1445, i64 %716, i32 0, i32 1
  %1448 = bitcast i8** %1447 to i64*
  %1449 = load i64, i64* %1448, align 8
  %1450 = bitcast %"class.std::__1::vector.29"* %1446 to i64*
  %1451 = load i64, i64* %1450, align 8
  %1452 = icmp eq i64 %1449, %1451
  br i1 %1452, label %1470, label %1453

1453:                                             ; preds = %1444, %1486
  %1454 = phi %"class.std::__1::vector.29"* [ %1493, %1486 ], [ %1445, %1444 ]
  %1455 = phi i64 [ %1492, %1486 ], [ 0, %1444 ]
  %1456 = phi i64 [ %1487, %1486 ], [ 0, %1444 ]
  %1457 = trunc i64 %1455 to i32
  %1458 = add nsw i32 %1457, -511
  %1459 = load %"class.std::__1::vector.43"*, %"class.std::__1::vector.43"** %362, align 8
  %1460 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %1459, i64 %716
  %1461 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %1459, i64 %716, i32 0, i32 1
  %1462 = bitcast i32** %1461 to i64*
  %1463 = load i64, i64* %1462, align 8
  %1464 = bitcast %"class.std::__1::vector.43"* %1460 to i64*
  %1465 = load i64, i64* %1464, align 8
  %1466 = sub i64 %1463, %1465
  %1467 = ashr exact i64 %1466, 2
  %1468 = icmp ult i64 %1456, %1467
  %1469 = inttoptr i64 %1465 to i32*
  br i1 %1468, label %1478, label %1486

1470:                                             ; preds = %1486, %1444
  %1471 = add nuw i64 %716, 1
  %1472 = load i64, i64* %273, align 8
  %1473 = load i64, i64* %275, align 8
  %1474 = sub i64 %1472, %1473
  %1475 = ashr exact i64 %1474, 2
  %1476 = icmp ult i64 %1471, %1475
  %1477 = inttoptr i64 %1473 to i32*
  br i1 %1476, label %714, label %685

1478:                                             ; preds = %1453, %1483
  %1479 = phi i64 [ %1484, %1483 ], [ %1456, %1453 ]
  %1480 = getelementptr inbounds i32, i32* %1469, i64 %1479
  %1481 = load i32, i32* %1480, align 4
  %1482 = icmp sgt i32 %1458, %1481
  br i1 %1482, label %1483, label %1486

1483:                                             ; preds = %1478
  %1484 = add nuw i64 %1479, 1
  %1485 = icmp ult i64 %1484, %1467
  br i1 %1485, label %1478, label %1486

1486:                                             ; preds = %1478, %1483, %1453
  %1487 = phi i64 [ %1456, %1453 ], [ %1484, %1483 ], [ %1479, %1478 ]
  %1488 = trunc i64 %1487 to i8
  %1489 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %1454, i64 %716, i32 0, i32 0
  %1490 = load i8*, i8** %1489, align 8
  %1491 = getelementptr inbounds i8, i8* %1490, i64 %1455
  store i8 %1488, i8* %1491, align 1
  %1492 = add nuw i64 %1455, 1
  %1493 = load %"class.std::__1::vector.29"*, %"class.std::__1::vector.29"** %451, align 8
  %1494 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %1493, i64 %716
  %1495 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %1493, i64 %716, i32 0, i32 1
  %1496 = bitcast i8** %1495 to i64*
  %1497 = load i64, i64* %1496, align 8
  %1498 = bitcast %"class.std::__1::vector.29"* %1494 to i64*
  %1499 = load i64, i64* %1498, align 8
  %1500 = sub i64 %1497, %1499
  %1501 = icmp ult i64 %1492, %1500
  br i1 %1501, label %1453, label %1470

1502:                                             ; preds = %232
  %1503 = getelementptr inbounds i32, i32* %235, i64 1
  %1504 = ptrtoint i32* %1503 to i64
  store i32 %237, i32* %1503, align 4
  br label %1505

1505:                                             ; preds = %1502, %232
  %1506 = phi i64 [ %233, %232 ], [ %1504, %1502 ]
  %1507 = getelementptr inbounds i32, i32* %224, i64 2
  %1508 = inttoptr i64 %1506 to i32*
  %1509 = load i32, i32* %1508, align 4
  %1510 = load i32, i32* %1507, align 4
  %1511 = icmp eq i32 %1509, %1510
  br i1 %1511, label %1515, label %1512

1512:                                             ; preds = %1505
  %1513 = getelementptr inbounds i32, i32* %1508, i64 1
  %1514 = ptrtoint i32* %1513 to i64
  store i32 %1510, i32* %1513, align 4
  br label %1515

1515:                                             ; preds = %1512, %1505
  %1516 = phi i64 [ %1506, %1505 ], [ %1514, %1512 ]
  %1517 = getelementptr inbounds i32, i32* %224, i64 3
  %1518 = inttoptr i64 %1516 to i32*
  %1519 = load i32, i32* %1518, align 4
  %1520 = load i32, i32* %1517, align 4
  %1521 = icmp eq i32 %1519, %1520
  br i1 %1521, label %1525, label %1522

1522:                                             ; preds = %1515
  %1523 = getelementptr inbounds i32, i32* %1518, i64 1
  %1524 = ptrtoint i32* %1523 to i64
  store i32 %1520, i32* %1523, align 4
  br label %1525

1525:                                             ; preds = %1522, %1515
  %1526 = phi i64 [ %1516, %1515 ], [ %1524, %1522 ]
  %1527 = getelementptr inbounds i32, i32* %224, i64 4
  %1528 = icmp eq i32* %1527, %167
  %1529 = inttoptr i64 %1526 to i32*
  br i1 %1528, label %239, label %222

1530:                                             ; preds = %125
  %1531 = getelementptr inbounds i32, i32* %128, i64 1
  %1532 = ptrtoint i32* %1531 to i64
  store i32 %130, i32* %1531, align 4
  br label %1533

1533:                                             ; preds = %1530, %125
  %1534 = phi i64 [ %126, %125 ], [ %1532, %1530 ]
  %1535 = getelementptr inbounds i32, i32* %117, i64 2
  %1536 = inttoptr i64 %1534 to i32*
  %1537 = load i32, i32* %1536, align 4
  %1538 = load i32, i32* %1535, align 4
  %1539 = icmp eq i32 %1537, %1538
  br i1 %1539, label %1543, label %1540

1540:                                             ; preds = %1533
  %1541 = getelementptr inbounds i32, i32* %1536, i64 1
  %1542 = ptrtoint i32* %1541 to i64
  store i32 %1538, i32* %1541, align 4
  br label %1543

1543:                                             ; preds = %1540, %1533
  %1544 = phi i64 [ %1534, %1533 ], [ %1542, %1540 ]
  %1545 = getelementptr inbounds i32, i32* %117, i64 3
  %1546 = inttoptr i64 %1544 to i32*
  %1547 = load i32, i32* %1546, align 4
  %1548 = load i32, i32* %1545, align 4
  %1549 = icmp eq i32 %1547, %1548
  br i1 %1549, label %1553, label %1550

1550:                                             ; preds = %1543
  %1551 = getelementptr inbounds i32, i32* %1546, i64 1
  %1552 = ptrtoint i32* %1551 to i64
  store i32 %1548, i32* %1551, align 4
  br label %1553

1553:                                             ; preds = %1550, %1543
  %1554 = phi i64 [ %1544, %1543 ], [ %1552, %1550 ]
  %1555 = getelementptr inbounds i32, i32* %117, i64 4
  %1556 = icmp eq i32* %1555, %60
  %1557 = inttoptr i64 %1554 to i32*
  br i1 %1556, label %132, label %115
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl19CollectPixelSamplesERKNS_5ImageERKNS_14ModularOptionsEmRNSt3__16vectorIjNS6_9allocatorIjEEEESB_RNS7_IiNS8_IiEEEESE_(%"class.jxl::Image"* dereferenceable(104), %"struct.jxl::ModularOptions"* nocapture readonly dereferenceable(88), i64, %"class.std::__1::vector.55"* dereferenceable(24), %"class.std::__1::vector.55"* dereferenceable(24), %"class.std::__1::vector.43"* dereferenceable(24), %"class.std::__1::vector.43"* dereferenceable(24)) local_unnamed_addr #8 {
  %8 = alloca %"struct.(anonymous namespace)::Rng", align 8
  %9 = alloca %"class.std::__1::geometric_distribution", align 8
  %10 = alloca %"class.std::__1::vector.83", align 8
  %11 = getelementptr inbounds %"class.std::__1::vector.55", %"class.std::__1::vector.55"* %3, i64 0, i32 0, i32 1
  %12 = bitcast i32** %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = bitcast %"class.std::__1::vector.55"* %3 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = sub i64 %13, %15
  %17 = ashr exact i64 %16, 2
  %18 = icmp ugt i64 %17, %2
  br i1 %18, label %29, label %19

19:                                               ; preds = %7
  %20 = add i64 %2, 1
  %21 = icmp ugt i64 %20, %17
  %22 = inttoptr i64 %15 to i32*
  br i1 %21, label %23, label %25

23:                                               ; preds = %19
  %24 = sub i64 %20, %17
  tail call void @_ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEm(%"class.std::__1::vector.55"* %3, i64 %24) #24
  br label %29

25:                                               ; preds = %19
  %26 = icmp ult i64 %20, %17
  br i1 %26, label %27, label %29

27:                                               ; preds = %25
  %28 = getelementptr inbounds i32, i32* %22, i64 %20
  store i32* %28, i32** %11, align 8
  br label %29

29:                                               ; preds = %27, %25, %23, %7
  %30 = getelementptr inbounds %"class.std::__1::vector.55", %"class.std::__1::vector.55"* %4, i64 0, i32 0, i32 1
  %31 = bitcast i32** %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = bitcast %"class.std::__1::vector.55"* %4 to i64*
  %34 = load i64, i64* %33, align 8
  %35 = sub i64 %32, %34
  %36 = ashr exact i64 %35, 2
  %37 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %0, i64 0, i32 0, i32 0, i32 1
  %38 = bitcast %"class.jxl::Channel"** %37 to i64*
  %39 = load i64, i64* %38, align 8
  %40 = bitcast %"class.jxl::Image"* %0 to i64*
  %41 = load i64, i64* %40, align 8
  %42 = sub i64 %39, %41
  %43 = ashr exact i64 %42, 6
  %44 = icmp ugt i64 %43, %36
  br i1 %44, label %45, label %49

45:                                               ; preds = %29
  %46 = sub nsw i64 %43, %36
  tail call void @_ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEm(%"class.std::__1::vector.55"* %4, i64 %46) #24
  %47 = load i64, i64* %38, align 8
  %48 = load i64, i64* %40, align 8
  br label %49

49:                                               ; preds = %45, %29
  %50 = phi i64 [ %48, %45 ], [ %41, %29 ]
  %51 = phi i64 [ %47, %45 ], [ %39, %29 ]
  %52 = bitcast %"struct.(anonymous namespace)::Rng"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %52) #24
  %53 = getelementptr inbounds %"struct.(anonymous namespace)::Rng", %"struct.(anonymous namespace)::Rng"* %8, i64 0, i32 0, i64 0
  %54 = getelementptr inbounds %"struct.(anonymous namespace)::Rng", %"struct.(anonymous namespace)::Rng"* %8, i64 0, i32 0, i64 1
  store i64 -7723592293110705685, i64* %53, align 8
  %55 = add i64 %2, -4658895280553007687
  store i64 %55, i64* %54, align 8
  %56 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %1, i64 0, i32 1
  %57 = load float, float* %56, align 8
  %58 = fpext float %57 to double
  %59 = fmul double %58, 1.000000e-01
  %60 = fptrunc double %59 to float
  %61 = bitcast %"class.std::__1::geometric_distribution"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %61) #24
  %62 = getelementptr inbounds %"class.std::__1::geometric_distribution", %"class.std::__1::geometric_distribution"* %9, i64 0, i32 0, i32 0
  %63 = fpext float %60 to double
  store double %63, double* %62, align 8
  %64 = bitcast %"class.std::__1::vector.83"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %64) #24
  %65 = getelementptr inbounds %"class.std::__1::vector.83", %"class.std::__1::vector.83"* %10, i64 0, i32 0, i32 0
  %66 = getelementptr inbounds %"class.std::__1::vector.83", %"class.std::__1::vector.83"* %10, i64 0, i32 0, i32 1
  %67 = getelementptr inbounds %"class.std::__1::vector.83", %"class.std::__1::vector.83"* %10, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %64, i8 0, i64 24, i1 false) #24
  %68 = icmp eq i64 %51, %50
  br i1 %68, label %515, label %69

69:                                               ; preds = %49
  %70 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %0, i64 0, i32 0, i32 0, i32 0
  %71 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %0, i64 0, i32 8
  %72 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %1, i64 0, i32 0
  %73 = bitcast i64** %66 to i64*
  %74 = bitcast %"class.std::__1::vector.83"* %10 to i64*
  %75 = bitcast i64** %67 to i64*
  %76 = getelementptr inbounds %"class.std::__1::vector.55", %"class.std::__1::vector.55"* %3, i64 0, i32 0, i32 0
  %77 = getelementptr inbounds %"class.std::__1::vector.55", %"class.std::__1::vector.55"* %4, i64 0, i32 0, i32 0
  br label %78

78:                                               ; preds = %69, %182
  %79 = phi i64 [ %50, %69 ], [ %183, %182 ]
  %80 = phi i64 [ %51, %69 ], [ %184, %182 ]
  %81 = phi i64 [ 0, %69 ], [ %185, %182 ]
  %82 = phi i64 [ 0, %69 ], [ %186, %182 ]
  %83 = inttoptr i64 %79 to %"class.jxl::Channel"*
  %84 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %83, i64 %82, i32 1
  %85 = load i64, i64* %84, align 8
  %86 = icmp ult i64 %85, 2
  br i1 %86, label %182, label %87

87:                                               ; preds = %78
  %88 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %83, i64 %82, i32 2
  %89 = load i64, i64* %88, align 8
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %182, label %91

91:                                               ; preds = %87
  %92 = load i64, i64* %71, align 8
  %93 = icmp ult i64 %82, %92
  br i1 %93, label %99, label %94

94:                                               ; preds = %91
  %95 = load i64, i64* %72, align 8
  %96 = icmp ugt i64 %85, %95
  %97 = icmp ugt i64 %89, %95
  %98 = or i1 %96, %97
  br i1 %98, label %190, label %99

99:                                               ; preds = %94, %91
  %100 = load i64*, i64** %66, align 8
  %101 = load i64*, i64** %67, align 8
  %102 = icmp eq i64* %100, %101
  %103 = ptrtoint i64* %101 to i64
  br i1 %102, label %107, label %104

104:                                              ; preds = %99
  store i64 %82, i64* %100, align 8
  %105 = getelementptr inbounds i64, i64* %100, i64 1
  %106 = ptrtoint i64* %105 to i64
  store i64 %106, i64* %73, align 8
  br label %150

107:                                              ; preds = %99
  %108 = ptrtoint i64* %100 to i64
  %109 = load i64, i64* %74, align 8
  %110 = sub i64 %108, %109
  %111 = ashr exact i64 %110, 3
  %112 = add nsw i64 %111, 1
  %113 = icmp ugt i64 %112, 2305843009213693951
  br i1 %113, label %114, label %116

114:                                              ; preds = %107
  %115 = bitcast %"class.std::__1::vector.83"* %10 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %115) #28
  unreachable

116:                                              ; preds = %107
  %117 = sub i64 %103, %109
  %118 = ashr exact i64 %117, 3
  %119 = icmp ult i64 %118, 1152921504606846975
  br i1 %119, label %120, label %128

120:                                              ; preds = %116
  %121 = ashr exact i64 %117, 2
  %122 = icmp ult i64 %121, %112
  %123 = select i1 %122, i64 %112, i64 %121
  %124 = icmp eq i64 %123, 0
  br i1 %124, label %133, label %125

125:                                              ; preds = %120
  %126 = icmp ugt i64 %123, 2305843009213693951
  br i1 %126, label %127, label %128

127:                                              ; preds = %125
  tail call void @abort() #28
  unreachable

128:                                              ; preds = %125, %116
  %129 = phi i64 [ %123, %125 ], [ 2305843009213693951, %116 ]
  %130 = shl i64 %129, 3
  %131 = tail call i8* @_Znwm(i64 %130) #29
  %132 = bitcast i8* %131 to i64*
  br label %133

133:                                              ; preds = %128, %120
  %134 = phi i64 [ %129, %128 ], [ 0, %120 ]
  %135 = phi i8* [ %131, %128 ], [ null, %120 ]
  %136 = phi i64* [ %132, %128 ], [ null, %120 ]
  %137 = getelementptr inbounds i64, i64* %136, i64 %111
  %138 = getelementptr inbounds i64, i64* %136, i64 %134
  %139 = ptrtoint i64* %138 to i64
  store i64 %82, i64* %137, align 8
  %140 = getelementptr inbounds i64, i64* %137, i64 1
  %141 = ptrtoint i64* %140 to i64
  %142 = ptrtoint i64* %136 to i64
  %143 = icmp sgt i64 %110, 0
  br i1 %143, label %144, label %146

144:                                              ; preds = %133
  %145 = inttoptr i64 %109 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %135, i8* align 8 %145, i64 %110, i1 false) #24
  br label %146

146:                                              ; preds = %144, %133
  store i64 %142, i64* %74, align 8
  store i64 %141, i64* %73, align 8
  store i64 %139, i64* %75, align 8
  %147 = icmp eq i64 %109, 0
  br i1 %147, label %150, label %148

148:                                              ; preds = %146
  %149 = inttoptr i64 %109 to i8*
  tail call void @_ZdlPv(i8* %149) #29
  br label %150

150:                                              ; preds = %104, %146, %148
  %151 = load %"class.jxl::Channel"*, %"class.jxl::Channel"** %70, align 8
  %152 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %151, i64 %82, i32 1
  %153 = load i64, i64* %152, align 8
  %154 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %151, i64 %82, i32 2
  %155 = load i64, i64* %154, align 8
  %156 = mul i64 %155, %153
  %157 = load i32*, i32** %76, align 8
  %158 = getelementptr inbounds i32, i32* %157, i64 %2
  %159 = load i32, i32* %158, align 4
  %160 = trunc i64 %156 to i32
  %161 = add i32 %159, %160
  store i32 %161, i32* %158, align 4
  %162 = load %"class.jxl::Channel"*, %"class.jxl::Channel"** %70, align 8
  %163 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %162, i64 %82, i32 1
  %164 = load i64, i64* %163, align 8
  %165 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %162, i64 %82, i32 2
  %166 = load i64, i64* %165, align 8
  %167 = mul i64 %166, %164
  %168 = load i32*, i32** %77, align 8
  %169 = getelementptr inbounds i32, i32* %168, i64 %82
  %170 = load i32, i32* %169, align 4
  %171 = trunc i64 %167 to i32
  %172 = add i32 %170, %171
  store i32 %172, i32* %169, align 4
  %173 = load %"class.jxl::Channel"*, %"class.jxl::Channel"** %70, align 8
  %174 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %173, i64 %82, i32 1
  %175 = load i64, i64* %174, align 8
  %176 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %173, i64 %82, i32 2
  %177 = load i64, i64* %176, align 8
  %178 = mul i64 %177, %175
  %179 = add i64 %178, %81
  %180 = load i64, i64* %38, align 8
  %181 = ptrtoint %"class.jxl::Channel"* %173 to i64
  br label %182

182:                                              ; preds = %78, %87, %150
  %183 = phi i64 [ %79, %78 ], [ %79, %87 ], [ %181, %150 ]
  %184 = phi i64 [ %80, %78 ], [ %80, %87 ], [ %180, %150 ]
  %185 = phi i64 [ %81, %78 ], [ %81, %87 ], [ %179, %150 ]
  %186 = add nuw i64 %82, 1
  %187 = sub i64 %184, %183
  %188 = ashr exact i64 %187, 6
  %189 = icmp ult i64 %186, %188
  br i1 %189, label %78, label %190

190:                                              ; preds = %182, %94
  %191 = phi i64 [ %185, %182 ], [ %81, %94 ]
  %192 = load i64*, i64** %65, align 8
  %193 = load i64*, i64** %66, align 8
  %194 = icmp eq i64* %192, %193
  br i1 %194, label %508, label %195

195:                                              ; preds = %190
  %196 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %5, i64 0, i32 0, i32 1
  %197 = bitcast i32** %196 to i64*
  %198 = load i64, i64* %197, align 8
  %199 = bitcast %"class.std::__1::vector.43"* %5 to i64*
  %200 = load i64, i64* %199, align 8
  %201 = sub i64 %198, %200
  %202 = ashr exact i64 %201, 2
  %203 = uitofp i64 %202 to float
  %204 = uitofp i64 %191 to float
  %205 = fmul float %60, %204
  %206 = fadd float %205, %203
  %207 = fptoui float %206 to i64
  %208 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %5, i64 0, i32 0, i32 2, i32 0, i32 0
  %209 = bitcast i32** %208 to i64*
  %210 = load i64, i64* %209, align 8
  %211 = sub i64 %210, %200
  %212 = ashr exact i64 %211, 2
  %213 = icmp ult i64 %212, %207
  br i1 %213, label %214, label %233

214:                                              ; preds = %195
  %215 = icmp ugt i64 %207, 4611686018427387903
  br i1 %215, label %216, label %217

216:                                              ; preds = %214
  tail call void @abort() #28
  unreachable

217:                                              ; preds = %214
  %218 = shl i64 %207, 2
  %219 = tail call i8* @_Znwm(i64 %218) #29
  %220 = bitcast i8* %219 to i32*
  %221 = getelementptr inbounds i32, i32* %220, i64 %202
  %222 = ptrtoint i32* %221 to i64
  %223 = getelementptr inbounds i32, i32* %220, i64 %207
  %224 = ptrtoint i32* %223 to i64
  %225 = ptrtoint i8* %219 to i64
  %226 = icmp sgt i64 %201, 0
  br i1 %226, label %227, label %229

227:                                              ; preds = %217
  %228 = inttoptr i64 %200 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %219, i8* align 4 %228, i64 %201, i1 false) #24
  br label %229

229:                                              ; preds = %227, %217
  store i64 %225, i64* %199, align 8
  store i64 %222, i64* %197, align 8
  store i64 %224, i64* %209, align 8
  %230 = icmp eq i64 %200, 0
  br i1 %230, label %233, label %231

231:                                              ; preds = %229
  %232 = inttoptr i64 %200 to i8*
  tail call void @_ZdlPv(i8* %232) #29
  br label %233

233:                                              ; preds = %195, %229, %231
  %234 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %6, i64 0, i32 0, i32 1
  %235 = bitcast i32** %234 to i64*
  %236 = load i64, i64* %235, align 8
  %237 = bitcast %"class.std::__1::vector.43"* %6 to i64*
  %238 = load i64, i64* %237, align 8
  %239 = sub i64 %236, %238
  %240 = ashr exact i64 %239, 2
  %241 = uitofp i64 %240 to float
  %242 = fadd float %205, %241
  %243 = fptoui float %242 to i64
  %244 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %6, i64 0, i32 0, i32 2, i32 0, i32 0
  %245 = bitcast i32** %244 to i64*
  %246 = load i64, i64* %245, align 8
  %247 = sub i64 %246, %238
  %248 = ashr exact i64 %247, 2
  %249 = icmp ult i64 %248, %243
  br i1 %249, label %250, label %269

250:                                              ; preds = %233
  %251 = icmp ugt i64 %243, 4611686018427387903
  br i1 %251, label %252, label %253

252:                                              ; preds = %250
  tail call void @abort() #28
  unreachable

253:                                              ; preds = %250
  %254 = shl i64 %243, 2
  %255 = tail call i8* @_Znwm(i64 %254) #29
  %256 = bitcast i8* %255 to i32*
  %257 = getelementptr inbounds i32, i32* %256, i64 %240
  %258 = ptrtoint i32* %257 to i64
  %259 = getelementptr inbounds i32, i32* %256, i64 %243
  %260 = ptrtoint i32* %259 to i64
  %261 = ptrtoint i8* %255 to i64
  %262 = icmp sgt i64 %239, 0
  br i1 %262, label %263, label %265

263:                                              ; preds = %253
  %264 = inttoptr i64 %238 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %255, i8* align 4 %264, i64 %239, i1 false) #24
  br label %265

265:                                              ; preds = %263, %253
  store i64 %261, i64* %237, align 8
  store i64 %258, i64* %235, align 8
  store i64 %260, i64* %245, align 8
  %266 = icmp eq i64 %238, 0
  br i1 %266, label %269, label %267

267:                                              ; preds = %265
  %268 = inttoptr i64 %238 to i8*
  tail call void @_ZdlPv(i8* %268) #29
  br label %269

269:                                              ; preds = %233, %265, %267
  %270 = call fastcc i32 @_ZNSt3__122geometric_distributionIjEclIN12_GLOBAL__N_13RngEEEjRT_(%"class.std::__1::geometric_distribution"* nonnull %9, %"struct.(anonymous namespace)::Rng"* nonnull dereferenceable(16) %8)
  %271 = zext i32 %270 to i64
  %272 = load i64*, i64** %65, align 8
  %273 = load i64, i64* %272, align 8
  %274 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %0, i64 0, i32 0, i32 0, i32 0
  %275 = load %"class.jxl::Channel"*, %"class.jxl::Channel"** %274, align 8
  %276 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %275, i64 %273, i32 1
  %277 = load i64, i64* %276, align 8
  %278 = icmp ugt i64 %277, %271
  %279 = ptrtoint i64* %272 to i64
  %280 = bitcast i64** %66 to i64*
  %281 = load i64, i64* %280, align 8
  %282 = sub i64 %281, %279
  %283 = ashr exact i64 %282, 3
  br i1 %278, label %308, label %284

284:                                              ; preds = %269, %301
  %285 = phi i64 [ %302, %301 ], [ %273, %269 ]
  %286 = phi i64 [ %303, %301 ], [ 0, %269 ]
  %287 = phi i64 [ %304, %301 ], [ 0, %269 ]
  %288 = phi i64 [ %306, %301 ], [ %277, %269 ]
  %289 = phi i64 [ %290, %301 ], [ %271, %269 ]
  %290 = sub i64 %289, %288
  %291 = add i64 %286, 1
  %292 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %275, i64 %285, i32 2
  %293 = load i64, i64* %292, align 8
  %294 = icmp eq i64 %291, %293
  br i1 %294, label %295, label %301

295:                                              ; preds = %284
  %296 = add i64 %287, 1
  %297 = icmp ult i64 %296, %283
  br i1 %297, label %298, label %308

298:                                              ; preds = %295
  %299 = getelementptr inbounds i64, i64* %272, i64 %296
  %300 = load i64, i64* %299, align 8
  br label %301

301:                                              ; preds = %298, %284
  %302 = phi i64 [ %300, %298 ], [ %285, %284 ]
  %303 = phi i64 [ 0, %298 ], [ %291, %284 ]
  %304 = phi i64 [ %296, %298 ], [ %287, %284 ]
  %305 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %275, i64 %302, i32 1
  %306 = load i64, i64* %305, align 8
  %307 = icmp ult i64 %290, %306
  br i1 %307, label %308, label %284

308:                                              ; preds = %295, %301, %269
  %309 = phi i64 [ 0, %269 ], [ 0, %295 ], [ %303, %301 ]
  %310 = phi i64 [ 0, %269 ], [ %296, %295 ], [ %304, %301 ]
  %311 = phi i64 [ %271, %269 ], [ %290, %301 ], [ %290, %295 ]
  %312 = icmp ult i64 %310, %283
  br i1 %312, label %313, label %508

313:                                              ; preds = %308
  %314 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %5, i64 0, i32 0, i32 0
  %315 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %6, i64 0, i32 0, i32 0
  br label %316

316:                                              ; preds = %313, %503
  %317 = phi %"class.jxl::Channel"* [ %275, %313 ], [ %471, %503 ]
  %318 = phi i64* [ %272, %313 ], [ %468, %503 ]
  %319 = phi i64 [ %311, %313 ], [ %506, %503 ]
  %320 = phi i64 [ %310, %313 ], [ %505, %503 ]
  %321 = phi i64 [ %309, %313 ], [ %504, %503 ]
  %322 = getelementptr inbounds i64, i64* %318, i64 %320
  %323 = load i64, i64* %322, align 8
  %324 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %317, i64 %323, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %325 = load i8*, i8** %324, align 8
  %326 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %317, i64 %323, i32 0, i32 0, i32 4
  %327 = load i64, i64* %326, align 8
  %328 = mul i64 %327, %321
  %329 = getelementptr inbounds i8, i8* %325, i64 %328
  %330 = ptrtoint i8* %329 to i64
  %331 = and i64 %330, 63
  %332 = icmp eq i64 %331, 0
  tail call void @llvm.assume(i1 %332) #24
  %333 = bitcast i8* %329 to i32*
  %334 = getelementptr inbounds i32, i32* %333, i64 %319
  %335 = load i32*, i32** %196, align 8
  %336 = load i32*, i32** %208, align 8
  %337 = icmp eq i32* %335, %336
  %338 = ptrtoint i32* %336 to i64
  br i1 %337, label %343, label %339

339:                                              ; preds = %316
  %340 = load i32, i32* %334, align 4
  store i32 %340, i32* %335, align 4
  %341 = getelementptr inbounds i32, i32* %335, i64 1
  %342 = ptrtoint i32* %341 to i64
  store i64 %342, i64* %197, align 8
  br label %396

343:                                              ; preds = %316
  %344 = ptrtoint i32* %335 to i64
  %345 = load i64, i64* %199, align 8
  %346 = sub i64 %344, %345
  %347 = ashr exact i64 %346, 2
  %348 = add nsw i64 %347, 1
  %349 = icmp ugt i64 %348, 4611686018427387903
  br i1 %349, label %350, label %352

350:                                              ; preds = %343
  %351 = bitcast %"class.std::__1::vector.43"* %5 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %351) #28
  unreachable

352:                                              ; preds = %343
  %353 = sub i64 %338, %345
  %354 = ashr exact i64 %353, 2
  %355 = icmp ult i64 %354, 2305843009213693951
  br i1 %355, label %356, label %364

356:                                              ; preds = %352
  %357 = ashr exact i64 %353, 1
  %358 = icmp ult i64 %357, %348
  %359 = select i1 %358, i64 %348, i64 %357
  %360 = icmp eq i64 %359, 0
  br i1 %360, label %369, label %361

361:                                              ; preds = %356
  %362 = icmp ugt i64 %359, 4611686018427387903
  br i1 %362, label %363, label %364

363:                                              ; preds = %361
  tail call void @abort() #28
  unreachable

364:                                              ; preds = %361, %352
  %365 = phi i64 [ %359, %361 ], [ 4611686018427387903, %352 ]
  %366 = shl i64 %365, 2
  %367 = tail call i8* @_Znwm(i64 %366) #29
  %368 = bitcast i8* %367 to i32*
  br label %369

369:                                              ; preds = %364, %356
  %370 = phi i64 [ %365, %364 ], [ 0, %356 ]
  %371 = phi i32* [ %368, %364 ], [ null, %356 ]
  %372 = getelementptr inbounds i32, i32* %371, i64 %347
  %373 = getelementptr inbounds i32, i32* %371, i64 %370
  %374 = ptrtoint i32* %373 to i64
  %375 = load i32, i32* %334, align 4
  store i32 %375, i32* %372, align 4
  %376 = getelementptr inbounds i32, i32* %372, i64 1
  %377 = ptrtoint i32* %376 to i64
  %378 = load i32*, i32** %314, align 8
  %379 = load i64, i64* %197, align 8
  %380 = ptrtoint i32* %378 to i64
  %381 = sub i64 %379, %380
  %382 = ashr exact i64 %381, 2
  %383 = sub nsw i64 0, %382
  %384 = getelementptr inbounds i32, i32* %372, i64 %383
  %385 = ptrtoint i32* %384 to i64
  %386 = icmp sgt i64 %381, 0
  br i1 %386, label %387, label %391

387:                                              ; preds = %369
  %388 = bitcast i32* %384 to i8*
  %389 = bitcast i32* %378 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %388, i8* align 4 %389, i64 %381, i1 false) #24
  %390 = load i32*, i32** %314, align 8
  br label %391

391:                                              ; preds = %387, %369
  %392 = phi i32* [ %378, %369 ], [ %390, %387 ]
  store i64 %385, i64* %199, align 8
  store i64 %377, i64* %197, align 8
  store i64 %374, i64* %209, align 8
  %393 = icmp eq i32* %392, null
  br i1 %393, label %396, label %394

394:                                              ; preds = %391
  %395 = bitcast i32* %392 to i8*
  tail call void @_ZdlPv(i8* %395) #29
  br label %396

396:                                              ; preds = %339, %391, %394
  %397 = icmp eq i64 %319, 0
  %398 = add i64 %319, -1
  %399 = select i1 %397, i64 1, i64 %398
  %400 = load i32, i32* %334, align 4
  %401 = getelementptr inbounds i32, i32* %333, i64 %399
  %402 = load i32, i32* %401, align 4
  %403 = sub nsw i32 %400, %402
  %404 = load i32*, i32** %234, align 8
  %405 = load i32*, i32** %244, align 8
  %406 = icmp ult i32* %404, %405
  %407 = ptrtoint i32* %405 to i64
  br i1 %406, label %408, label %411

408:                                              ; preds = %396
  store i32 %403, i32* %404, align 4
  %409 = getelementptr inbounds i32, i32* %404, i64 1
  %410 = ptrtoint i32* %409 to i64
  store i64 %410, i64* %235, align 8
  br label %463

411:                                              ; preds = %396
  %412 = ptrtoint i32* %404 to i64
  %413 = load i64, i64* %237, align 8
  %414 = sub i64 %412, %413
  %415 = ashr exact i64 %414, 2
  %416 = add nsw i64 %415, 1
  %417 = icmp ugt i64 %416, 4611686018427387903
  br i1 %417, label %418, label %420

418:                                              ; preds = %411
  %419 = bitcast %"class.std::__1::vector.43"* %6 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %419) #28
  unreachable

420:                                              ; preds = %411
  %421 = sub i64 %407, %413
  %422 = ashr exact i64 %421, 2
  %423 = icmp ult i64 %422, 2305843009213693951
  br i1 %423, label %424, label %432

424:                                              ; preds = %420
  %425 = ashr exact i64 %421, 1
  %426 = icmp ult i64 %425, %416
  %427 = select i1 %426, i64 %416, i64 %425
  %428 = icmp eq i64 %427, 0
  br i1 %428, label %437, label %429

429:                                              ; preds = %424
  %430 = icmp ugt i64 %427, 4611686018427387903
  br i1 %430, label %431, label %432

431:                                              ; preds = %429
  tail call void @abort() #28
  unreachable

432:                                              ; preds = %429, %420
  %433 = phi i64 [ %427, %429 ], [ 4611686018427387903, %420 ]
  %434 = shl i64 %433, 2
  %435 = tail call i8* @_Znwm(i64 %434) #29
  %436 = bitcast i8* %435 to i32*
  br label %437

437:                                              ; preds = %432, %424
  %438 = phi i64 [ %433, %432 ], [ 0, %424 ]
  %439 = phi i32* [ %436, %432 ], [ null, %424 ]
  %440 = getelementptr inbounds i32, i32* %439, i64 %415
  %441 = getelementptr inbounds i32, i32* %439, i64 %438
  %442 = ptrtoint i32* %441 to i64
  store i32 %403, i32* %440, align 4
  %443 = getelementptr inbounds i32, i32* %440, i64 1
  %444 = ptrtoint i32* %443 to i64
  %445 = load i32*, i32** %315, align 8
  %446 = load i64, i64* %235, align 8
  %447 = ptrtoint i32* %445 to i64
  %448 = sub i64 %446, %447
  %449 = ashr exact i64 %448, 2
  %450 = sub nsw i64 0, %449
  %451 = getelementptr inbounds i32, i32* %440, i64 %450
  %452 = ptrtoint i32* %451 to i64
  %453 = icmp sgt i64 %448, 0
  br i1 %453, label %454, label %458

454:                                              ; preds = %437
  %455 = bitcast i32* %451 to i8*
  %456 = bitcast i32* %445 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %455, i8* align 4 %456, i64 %448, i1 false) #24
  %457 = load i32*, i32** %315, align 8
  br label %458

458:                                              ; preds = %454, %437
  %459 = phi i32* [ %445, %437 ], [ %457, %454 ]
  store i64 %452, i64* %237, align 8
  store i64 %444, i64* %235, align 8
  store i64 %442, i64* %245, align 8
  %460 = icmp eq i32* %459, null
  br i1 %460, label %463, label %461

461:                                              ; preds = %458
  %462 = bitcast i32* %459 to i8*
  tail call void @_ZdlPv(i8* %462) #29
  br label %463

463:                                              ; preds = %408, %458, %461
  %464 = call fastcc i32 @_ZNSt3__122geometric_distributionIjEclIN12_GLOBAL__N_13RngEEEjRT_(%"class.std::__1::geometric_distribution"* nonnull %9, %"struct.(anonymous namespace)::Rng"* nonnull dereferenceable(16) %8)
  %465 = add i32 %464, 1
  %466 = zext i32 %465 to i64
  %467 = add i64 %319, %466
  %468 = load i64*, i64** %65, align 8
  %469 = getelementptr inbounds i64, i64* %468, i64 %320
  %470 = load i64, i64* %469, align 8
  %471 = load %"class.jxl::Channel"*, %"class.jxl::Channel"** %274, align 8
  %472 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %471, i64 %470, i32 1
  %473 = load i64, i64* %472, align 8
  %474 = icmp ult i64 %467, %473
  %475 = ptrtoint i64* %468 to i64
  %476 = load i64, i64* %280, align 8
  %477 = sub i64 %476, %475
  %478 = ashr exact i64 %477, 3
  br i1 %474, label %503, label %479

479:                                              ; preds = %463, %496
  %480 = phi i64 [ %497, %496 ], [ %470, %463 ]
  %481 = phi i64 [ %498, %496 ], [ %321, %463 ]
  %482 = phi i64 [ %499, %496 ], [ %320, %463 ]
  %483 = phi i64 [ %501, %496 ], [ %473, %463 ]
  %484 = phi i64 [ %485, %496 ], [ %467, %463 ]
  %485 = sub i64 %484, %483
  %486 = add i64 %481, 1
  %487 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %471, i64 %480, i32 2
  %488 = load i64, i64* %487, align 8
  %489 = icmp eq i64 %486, %488
  br i1 %489, label %490, label %496

490:                                              ; preds = %479
  %491 = add i64 %482, 1
  %492 = icmp ult i64 %491, %478
  br i1 %492, label %493, label %503

493:                                              ; preds = %490
  %494 = getelementptr inbounds i64, i64* %468, i64 %491
  %495 = load i64, i64* %494, align 8
  br label %496

496:                                              ; preds = %493, %479
  %497 = phi i64 [ %495, %493 ], [ %480, %479 ]
  %498 = phi i64 [ 0, %493 ], [ %486, %479 ]
  %499 = phi i64 [ %491, %493 ], [ %482, %479 ]
  %500 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %471, i64 %497, i32 1
  %501 = load i64, i64* %500, align 8
  %502 = icmp ult i64 %485, %501
  br i1 %502, label %503, label %479

503:                                              ; preds = %490, %496, %463
  %504 = phi i64 [ %321, %463 ], [ 0, %490 ], [ %498, %496 ]
  %505 = phi i64 [ %320, %463 ], [ %491, %490 ], [ %499, %496 ]
  %506 = phi i64 [ %467, %463 ], [ %485, %496 ], [ %485, %490 ]
  %507 = icmp ult i64 %505, %478
  br i1 %507, label %316, label %508

508:                                              ; preds = %503, %308, %190
  %509 = phi i64* [ %193, %190 ], [ %272, %308 ], [ %468, %503 ]
  %510 = icmp eq i64* %509, null
  br i1 %510, label %515, label %511

511:                                              ; preds = %508
  %512 = ptrtoint i64* %509 to i64
  %513 = bitcast i64** %66 to i64*
  store i64 %512, i64* %513, align 8
  %514 = bitcast i64* %509 to i8*
  tail call void @_ZdlPv(i8* %514) #29
  br label %515

515:                                              ; preds = %49, %508, %511
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %64) #24
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %61) #24
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %52) #24
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @_ZNSt3__122geometric_distributionIjEclIN12_GLOBAL__N_13RngEEEjRT_(%"class.std::__1::geometric_distribution"* nocapture readonly, %"struct.(anonymous namespace)::Rng"* nocapture dereferenceable(16)) unnamed_addr #8 align 2 {
  %3 = getelementptr inbounds %"class.std::__1::geometric_distribution", %"class.std::__1::geometric_distribution"* %0, i64 0, i32 0, i32 0
  %4 = load double, double* %3, align 8
  %5 = fmul double %4, 2.100000e+01
  %6 = fcmp ult double %5, 1.000000e+00
  br i1 %6, label %31, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"struct.(anonymous namespace)::Rng", %"struct.(anonymous namespace)::Rng"* %1, i64 0, i32 0, i64 0
  %9 = getelementptr inbounds %"struct.(anonymous namespace)::Rng", %"struct.(anonymous namespace)::Rng"* %1, i64 0, i32 0, i64 1
  %10 = load i64, i64* %8, align 8
  %11 = load i64, i64* %9, align 8
  br label %12

12:                                               ; preds = %12, %7
  %13 = phi i64 [ %11, %7 ], [ %23, %12 ]
  %14 = phi i64 [ %10, %7 ], [ %13, %12 ]
  %15 = phi i32 [ 0, %7 ], [ %30, %12 ]
  %16 = add i64 %14, %13
  %17 = shl i64 %14, 23
  %18 = xor i64 %17, %14
  %19 = lshr i64 %18, 18
  %20 = lshr i64 %13, 5
  %21 = xor i64 %20, %13
  %22 = xor i64 %21, %18
  %23 = xor i64 %22, %19
  %24 = uitofp i64 %16 to double
  %25 = fmul double %24, 0x3BF0000000000000
  %26 = fadd double %25, 0.000000e+00
  %27 = fcmp olt double %26, %4
  %28 = xor i1 %27, true
  %29 = zext i1 %28 to i32
  %30 = add i32 %15, %29
  br i1 %27, label %362, label %12

31:                                               ; preds = %2
  %32 = fsub double 1.000000e+00, %4
  %33 = fdiv double %32, %4
  %34 = getelementptr inbounds %"struct.(anonymous namespace)::Rng", %"struct.(anonymous namespace)::Rng"* %1, i64 0, i32 0, i64 0
  %35 = load i64, i64* %34, align 8
  %36 = getelementptr inbounds %"struct.(anonymous namespace)::Rng", %"struct.(anonymous namespace)::Rng"* %1, i64 0, i32 0, i64 1
  %37 = load i64, i64* %36, align 8
  %38 = add i64 %37, %35
  store i64 %37, i64* %34, align 8
  %39 = shl i64 %35, 23
  %40 = xor i64 %39, %35
  %41 = lshr i64 %40, 18
  %42 = lshr i64 %37, 5
  %43 = xor i64 %42, %37
  %44 = xor i64 %43, %40
  %45 = xor i64 %44, %41
  store i64 %45, i64* %36, align 8
  %46 = uitofp i64 %38 to double
  %47 = fmul double %46, 0x3BF0000000000000
  %48 = fsub double 1.000000e+00, %47
  %49 = tail call double @log(double %48) #24
  %50 = fmul double %33, %49
  %51 = fsub double -0.000000e+00, %50
  %52 = tail call double @llvm.fabs.f64(double %51) #30
  %53 = fcmp oeq double %52, 0x7FF0000000000000
  br i1 %53, label %58, label %54

54:                                               ; preds = %31
  %55 = fcmp ogt double %50, -1.000000e+01
  br i1 %55, label %56, label %58

56:                                               ; preds = %54
  %57 = tail call double @exp(double %50) #24
  br label %82

58:                                               ; preds = %54, %31
  %59 = phi double [ %51, %54 ], [ 0x7FEFFFFFFFFFFFFF, %31 ]
  %60 = tail call double @sqrt(double %59) #24
  %61 = fmul double %59, 6.000000e+00
  %62 = fmul double %59, %61
  %63 = fadd double %59, -1.148400e+00
  %64 = tail call double @llvm.trunc.f64(double %63) #24
  %65 = fdiv double 0x3FD9884548DF6CE3, %60
  %66 = fdiv double 0x3FA5555571F7692E, %59
  %67 = fmul double %66, 3.000000e-01
  %68 = fmul double %66, %67
  %69 = fmul double %66, 0x3FC2492436402DED
  %70 = fmul double %69, %68
  %71 = fmul double %70, 1.500000e+01
  %72 = fsub double %68, %71
  %73 = fmul double %68, 6.000000e+00
  %74 = fsub double %66, %73
  %75 = fmul double %70, 4.500000e+01
  %76 = fadd double %74, %75
  %77 = fsub double 1.000000e+00, %66
  %78 = fmul double %68, 3.000000e+00
  %79 = fadd double %77, %78
  %80 = fsub double %79, %71
  %81 = fdiv double 1.069000e-01, %59
  br label %82

82:                                               ; preds = %58, %56
  %83 = phi double [ %62, %58 ], [ 0.000000e+00, %56 ]
  %84 = phi double [ %65, %58 ], [ 0.000000e+00, %56 ]
  %85 = phi double [ %80, %58 ], [ 0.000000e+00, %56 ]
  %86 = phi double [ %76, %58 ], [ 0.000000e+00, %56 ]
  %87 = phi double [ %72, %58 ], [ 0.000000e+00, %56 ]
  %88 = phi double [ %70, %58 ], [ 0.000000e+00, %56 ]
  %89 = phi double [ %81, %58 ], [ 0.000000e+00, %56 ]
  %90 = phi double [ %64, %58 ], [ %57, %56 ]
  %91 = phi double [ %59, %58 ], [ %51, %56 ]
  %92 = phi double [ %60, %58 ], [ 0.000000e+00, %56 ]
  %93 = fcmp olt double %91, 1.000000e+01
  %94 = bitcast %"struct.(anonymous namespace)::Rng"* %1 to <2 x i64>*
  %95 = load <2 x i64>, <2 x i64>* %94, align 8
  br i1 %93, label %96, label %130

96:                                               ; preds = %82
  %97 = extractelement <2 x i64> %95, i32 0
  %98 = extractelement <2 x i64> %95, i32 1
  %99 = add i64 %98, %97
  store i64 %98, i64* %34, align 8
  %100 = shl i64 %97, 23
  %101 = xor i64 %100, %97
  %102 = lshr i64 %101, 18
  %103 = lshr i64 %98, 5
  %104 = xor i64 %103, %98
  %105 = xor i64 %104, %101
  %106 = xor i64 %105, %102
  store i64 %106, i64* %36, align 8
  %107 = uitofp i64 %99 to double
  %108 = fmul double %107, 0x3BF0000000000000
  %109 = fadd double %108, 0.000000e+00
  %110 = fcmp ogt double %109, %90
  br i1 %110, label %111, label %354

111:                                              ; preds = %96, %111
  %112 = phi i64 [ %123, %111 ], [ %106, %96 ]
  %113 = phi i64 [ %112, %111 ], [ %98, %96 ]
  %114 = phi double [ %128, %111 ], [ 0.000000e+00, %96 ]
  %115 = phi double [ %127, %111 ], [ %109, %96 ]
  %116 = add i64 %113, %112
  %117 = shl i64 %113, 23
  %118 = xor i64 %117, %113
  %119 = lshr i64 %118, 18
  %120 = lshr i64 %112, 5
  %121 = xor i64 %120, %112
  %122 = xor i64 %121, %118
  %123 = xor i64 %122, %119
  %124 = uitofp i64 %116 to double
  %125 = fmul double %124, 0x3BF0000000000000
  %126 = fadd double %125, 0.000000e+00
  %127 = fmul double %115, %126
  %128 = fadd double %114, 1.000000e+00
  %129 = fcmp ogt double %127, %90
  br i1 %129, label %111, label %353

130:                                              ; preds = %82, %130
  %131 = phi <2 x i64> [ %163, %130 ], [ %95, %82 ]
  %132 = extractelement <2 x i64> %131, i32 0
  %133 = shl i64 %132, 23
  %134 = xor i64 %133, %132
  %135 = lshr i64 %134, 18
  %136 = extractelement <2 x i64> %131, i32 1
  %137 = lshr i64 %136, 5
  %138 = xor i64 %137, %136
  %139 = xor i64 %138, %134
  %140 = xor i64 %139, %135
  %141 = insertelement <2 x i64> undef, i64 %136, i32 0
  %142 = insertelement <2 x i64> %141, i64 %140, i32 1
  %143 = add <2 x i64> %131, %142
  %144 = shl i64 %136, 23
  %145 = xor i64 %144, %136
  %146 = lshr i64 %145, 18
  %147 = lshr i64 %140, 5
  %148 = xor i64 %146, %145
  %149 = xor i64 %148, %140
  %150 = xor i64 %149, %147
  %151 = uitofp <2 x i64> %143 to <2 x double>
  %152 = fmul <2 x double> %151, <double 0x3BF0000000000000, double 0x3BF0000000000000>
  %153 = fmul <2 x double> %152, <double 2.000000e+00, double 2.000000e+00>
  %154 = fadd <2 x double> %153, <double -1.000000e+00, double -1.000000e+00>
  %155 = fmul <2 x double> %154, %154
  %156 = extractelement <2 x double> %155, i32 0
  %157 = extractelement <2 x double> %155, i32 1
  %158 = fadd double %156, %157
  %159 = fcmp ogt double %158, 1.000000e+00
  %160 = fcmp oeq double %158, 0.000000e+00
  %161 = or i1 %159, %160
  %162 = insertelement <2 x i64> undef, i64 %140, i32 0
  %163 = insertelement <2 x i64> %162, i64 %150, i32 1
  br i1 %161, label %130, label %164

164:                                              ; preds = %130
  store i64 %140, i64* %34, align 8
  store i64 %150, i64* %36, align 8
  %165 = tail call double @log(double %158) #24
  %166 = fmul double %165, -2.000000e+00
  %167 = fdiv double %166, %158
  %168 = tail call double @sqrt(double %167) #24
  %169 = extractelement <2 x double> %154, i32 0
  %170 = fmul double %169, %168
  %171 = fadd double %170, 0.000000e+00
  %172 = fmul double %92, %171
  %173 = fadd double %91, %172
  %174 = fcmp ogt double %173, 0.000000e+00
  br i1 %174, label %175, label %211

175:                                              ; preds = %164
  %176 = tail call double @llvm.trunc.f64(double %173) #24
  %177 = fcmp ult double %176, %90
  br i1 %177, label %185, label %178

178:                                              ; preds = %175
  %179 = tail call double @nextafter(double 0x41EFFFFFFFE00000, double 0x7FF0000000000000) #24
  %180 = fcmp ugt double %179, %176
  br i1 %180, label %181, label %363

181:                                              ; preds = %178
  %182 = fcmp ugt double %176, 0.000000e+00
  br i1 %182, label %183, label %363

183:                                              ; preds = %181
  %184 = fptoui double %176 to i32
  br label %363

185:                                              ; preds = %175
  %186 = fsub double %91, %176
  %187 = load i64, i64* %34, align 8
  %188 = load i64, i64* %36, align 8
  %189 = add i64 %188, %187
  store i64 %188, i64* %34, align 8
  %190 = shl i64 %187, 23
  %191 = xor i64 %190, %187
  %192 = lshr i64 %191, 18
  %193 = lshr i64 %188, 5
  %194 = xor i64 %193, %188
  %195 = xor i64 %194, %191
  %196 = xor i64 %195, %192
  store i64 %196, i64* %36, align 8
  %197 = uitofp i64 %189 to double
  %198 = fmul double %197, 0x3BF0000000000000
  %199 = fadd double %198, 0.000000e+00
  %200 = fmul double %83, %199
  %201 = fmul double %186, %186
  %202 = fmul double %186, %201
  %203 = fcmp ult double %200, %202
  br i1 %203, label %211, label %204

204:                                              ; preds = %185
  %205 = tail call double @nextafter(double 0x41EFFFFFFFE00000, double 0x7FF0000000000000) #24
  %206 = fcmp ugt double %205, %176
  br i1 %206, label %207, label %363

207:                                              ; preds = %204
  %208 = fcmp ugt double %176, 0.000000e+00
  br i1 %208, label %209, label %363

209:                                              ; preds = %207
  %210 = fptoui double %176 to i32
  br label %363

211:                                              ; preds = %185, %164
  %212 = phi double [ %186, %185 ], [ 0xFFFFFFFFFFFFFFFF, %164 ]
  %213 = phi double [ %199, %185 ], [ 0xFFFFFFFFFFFFFFFF, %164 ]
  %214 = phi double [ %176, %185 ], [ 0xFFFFFFFFFFFFFFFF, %164 ]
  %215 = fcmp ole double %173, 0.000000e+00
  %216 = fsub double -0.000000e+00, %91
  br label %217

217:                                              ; preds = %352, %211
  %218 = phi double [ %212, %211 ], [ %267, %352 ]
  %219 = phi double [ %213, %211 ], [ %268, %352 ]
  %220 = phi i1 [ false, %211 ], [ true, %352 ]
  %221 = phi double [ %214, %211 ], [ %271, %352 ]
  %222 = or i1 %215, %220
  br i1 %222, label %223, label %266

223:                                              ; preds = %217
  %224 = load i64, i64* %34, align 8
  %225 = load i64, i64* %36, align 8
  br label %226

226:                                              ; preds = %226, %223
  %227 = phi i64 [ %225, %223 ], [ %251, %226 ]
  %228 = phi i64 [ %224, %223 ], [ %243, %226 ]
  %229 = add i64 %228, %227
  store i64 %227, i64* %34, align 8
  %230 = shl i64 %228, 23
  %231 = xor i64 %230, %228
  %232 = lshr i64 %231, 18
  %233 = lshr i64 %227, 5
  %234 = xor i64 %233, %227
  %235 = xor i64 %234, %231
  %236 = xor i64 %235, %232
  store i64 %236, i64* %36, align 8
  %237 = uitofp i64 %229 to double
  %238 = fmul double %237, 0x3BF0000000000000
  %239 = fsub double 1.000000e+00, %238
  %240 = tail call double @log(double %239) #24
  %241 = fsub double -0.000000e+00, %240
  %242 = load i64, i64* %34, align 8
  %243 = load i64, i64* %36, align 8
  %244 = add i64 %243, %242
  store i64 %243, i64* %34, align 8
  %245 = shl i64 %242, 23
  %246 = xor i64 %245, %242
  %247 = lshr i64 %246, 18
  %248 = lshr i64 %243, 5
  %249 = xor i64 %248, %243
  %250 = xor i64 %249, %246
  %251 = xor i64 %250, %247
  store i64 %251, i64* %36, align 8
  %252 = uitofp i64 %244 to double
  %253 = fmul double %252, 0x3BF0000000000000
  %254 = fadd double %253, 0.000000e+00
  %255 = fadd double %254, -1.000000e+00
  %256 = fadd double %254, %255
  %257 = fcmp olt double %256, 0.000000e+00
  %258 = select i1 %257, double %240, double %241
  %259 = fadd double %258, 1.800000e+00
  %260 = fcmp ugt double %259, -6.744000e-01
  br i1 %260, label %261, label %226

261:                                              ; preds = %226
  %262 = fmul double %92, %259
  %263 = fadd double %91, %262
  %264 = tail call double @llvm.trunc.f64(double %263) #24
  %265 = fsub double %91, %264
  br label %266

266:                                              ; preds = %261, %217
  %267 = phi double [ %265, %261 ], [ %218, %217 ]
  %268 = phi double [ %256, %261 ], [ %219, %217 ]
  %269 = phi i8 [ 1, %261 ], [ 0, %217 ]
  %270 = phi double [ %241, %261 ], [ 0xFFFFFFFFFFFFFFFF, %217 ]
  %271 = phi double [ %264, %261 ], [ %221, %217 ]
  %272 = fcmp olt double %271, 1.000000e+01
  %273 = fcmp oge double %271, 0.000000e+00
  %274 = and i1 %272, %273
  br i1 %274, label %275, label %282

275:                                              ; preds = %266
  %276 = tail call double @pow(double %91, double %271) #24
  %277 = fptosi double %271 to i32
  %278 = sext i32 %277 to i64
  %279 = getelementptr inbounds [10 x double], [10 x double]* @_ZZNSt3__120poisson_distributionIjEclIN12_GLOBAL__N_13RngEEEjRT_RKNS1_10param_typeEE5__fac, i64 0, i64 %278
  %280 = load double, double* %279, align 8
  %281 = fdiv double %276, %280
  br label %319

282:                                              ; preds = %266
  %283 = fdiv double 0x3FB5555547044B69, %271
  %284 = fmul double %283, 4.800000e+00
  %285 = fmul double %283, %284
  %286 = fmul double %283, %285
  %287 = fsub double %283, %286
  %288 = fdiv double %267, %271
  %289 = tail call double @llvm.fabs.f64(double %288) #24
  %290 = fcmp ogt double %289, 2.500000e-01
  br i1 %290, label %291, label %296

291:                                              ; preds = %282
  %292 = fadd double %288, 1.000000e+00
  %293 = tail call double @log(double %292) #24
  %294 = fmul double %271, %293
  %295 = fsub double %294, %267
  br label %314

296:                                              ; preds = %282
  %297 = fmul double %271, %288
  %298 = fmul double %288, %297
  %299 = fmul double %288, 1.250060e-01
  %300 = fadd double %299, 0xBFC1B9B16715B8CF
  %301 = fmul double %288, %300
  %302 = fadd double %301, 0x3FC23335B771F1B5
  %303 = fmul double %288, %302
  %304 = fadd double %303, 0xBFC543A5713E30BD
  %305 = fmul double %288, %304
  %306 = fadd double %305, 0x3FC999FC95E83431
  %307 = fmul double %288, %306
  %308 = fadd double %307, 0xBFD0001C8571C468
  %309 = fmul double %288, %308
  %310 = fadd double %309, 0x3FD55555318ABC87
  %311 = fmul double %288, %310
  %312 = fadd double %311, -5.000000e-01
  %313 = fmul double %298, %312
  br label %314

314:                                              ; preds = %296, %291
  %315 = phi double [ %295, %291 ], [ %313, %296 ]
  %316 = fsub double %315, %287
  %317 = tail call double @sqrt(double %271) #24
  %318 = fdiv double 0x3FD9884548DF6CE3, %317
  br label %319

319:                                              ; preds = %314, %275
  %320 = phi double [ %216, %275 ], [ %316, %314 ]
  %321 = phi double [ %281, %275 ], [ %318, %314 ]
  %322 = fsub double 5.000000e-01, %267
  %323 = fdiv double %322, %92
  %324 = fmul double %323, %323
  %325 = fmul double %324, -5.000000e-01
  %326 = fmul double %88, %324
  %327 = fadd double %87, %326
  %328 = fmul double %324, %327
  %329 = fadd double %86, %328
  %330 = fmul double %324, %329
  %331 = fadd double %85, %330
  %332 = fmul double %84, %331
  %333 = icmp eq i8 %269, 0
  br i1 %333, label %345, label %334

334:                                              ; preds = %319
  %335 = tail call double @llvm.fabs.f64(double %268) #24
  %336 = fmul double %89, %335
  %337 = fadd double %270, %320
  %338 = tail call double @exp(double %337) #24
  %339 = fmul double %321, %338
  %340 = fadd double %270, %325
  %341 = tail call double @exp(double %340) #24
  %342 = fmul double %332, %341
  %343 = fsub double %339, %342
  %344 = fcmp ugt double %336, %343
  br i1 %344, label %352, label %354

345:                                              ; preds = %319
  %346 = fmul double %268, %332
  %347 = fsub double %332, %346
  %348 = fsub double %320, %325
  %349 = tail call double @exp(double %348) #24
  %350 = fmul double %321, %349
  %351 = fcmp ugt double %347, %350
  br i1 %351, label %352, label %354

352:                                              ; preds = %345, %334
  br label %217

353:                                              ; preds = %111
  store i64 %112, i64* %34, align 8
  store i64 %123, i64* %36, align 8
  br label %354

354:                                              ; preds = %345, %334, %353, %96
  %355 = phi double [ 0.000000e+00, %96 ], [ %128, %353 ], [ %271, %334 ], [ %271, %345 ]
  %356 = tail call double @nextafter(double 0x41EFFFFFFFE00000, double 0x7FF0000000000000) #24
  %357 = fcmp ugt double %356, %355
  br i1 %357, label %358, label %363

358:                                              ; preds = %354
  %359 = fcmp ugt double %355, 0.000000e+00
  br i1 %359, label %360, label %363

360:                                              ; preds = %358
  %361 = fptoui double %355 to i32
  br label %363

362:                                              ; preds = %12
  store i64 %13, i64* %8, align 8
  store i64 %23, i64* %9, align 8
  br label %363

363:                                              ; preds = %178, %181, %183, %204, %207, %209, %354, %358, %360, %362
  %364 = phi i32 [ %361, %360 ], [ -1, %354 ], [ 0, %358 ], [ 0, %207 ], [ -1, %204 ], [ %210, %209 ], [ 0, %181 ], [ -1, %178 ], [ %184, %183 ], [ %30, %362 ]
  ret i32 %364
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl12TokenizeTreeERKNSt3__16vectorINS_20PropertyDecisionNodeENS0_9allocatorIS2_EEEEPNS1_INS_5TokenENS3_IS8_EEEEPS5_(%"class.std::__1::vector"* nocapture readonly dereferenceable(24), %"class.std::__1::vector.199"*, %"class.std::__1::vector"*) local_unnamed_addr #8 {
  %4 = alloca %"class.std::__1::queue", align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = alloca i32, align 4
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %15 = bitcast %"struct.jxl::PropertyDecisionNode"** %14 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = bitcast %"class.std::__1::vector"* %0 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = sub i64 %16, %18
  %20 = sdiv exact i64 %19, 40
  %21 = icmp ult i64 %20, 67108865
  br i1 %21, label %25, label %22

22:                                               ; preds = %3
  %23 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.1, i64 0, i64 0), i32 1012, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.13, i64 0, i64 0)) #24
  %24 = tail call zeroext i1 @_ZN3jxl5AbortEv() #28
  unreachable

25:                                               ; preds = %3
  %26 = bitcast %"class.std::__1::queue"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %26) #24
  %27 = getelementptr inbounds %"class.std::__1::queue", %"class.std::__1::queue"* %4, i64 0, i32 0, i32 0, i32 0, i32 0
  %28 = getelementptr inbounds %"class.std::__1::queue", %"class.std::__1::queue"* %4, i64 0, i32 0, i32 0, i32 0, i32 1
  %29 = getelementptr inbounds %"class.std::__1::queue", %"class.std::__1::queue"* %4, i64 0, i32 0, i32 0, i32 0, i32 2
  %30 = getelementptr inbounds %"class.std::__1::queue", %"class.std::__1::queue"* %4, i64 0, i32 0, i32 0, i32 1
  %31 = getelementptr inbounds %"class.std::__1::queue", %"class.std::__1::queue"* %4, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %26, i8 0, i64 48, i1 false) #24
  %32 = bitcast i32*** %29 to i64*
  %33 = bitcast i32*** %28 to i64*
  %34 = getelementptr inbounds %"class.std::__1::queue", %"class.std::__1::queue"* %4, i64 0, i32 0
  call void @_ZNSt3__15dequeIiNS_9allocatorIiEEE19__add_back_capacityEv(%"class.std::__1::deque"* nonnull %34) #24
  %35 = load i64, i64* %31, align 8
  %36 = load i64, i64* %30, align 8
  %37 = load i32**, i32*** %28, align 8
  %38 = load i32**, i32*** %29, align 8
  %39 = add i64 %36, %35
  %40 = icmp eq i32** %38, %37
  br i1 %40, label %47, label %41

41:                                               ; preds = %25
  %42 = lshr i64 %39, 10
  %43 = getelementptr inbounds i32*, i32** %37, i64 %42
  %44 = load i32*, i32** %43, align 8
  %45 = and i64 %39, 1023
  %46 = getelementptr inbounds i32, i32* %44, i64 %45
  br label %47

47:                                               ; preds = %25, %41
  %48 = phi i32* [ %46, %41 ], [ null, %25 ]
  store i32 0, i32* %48, align 4
  %49 = load i64, i64* %31, align 8
  %50 = add i64 %49, 1
  store i64 %50, i64* %31, align 8
  %51 = bitcast %"class.std::__1::vector"* %2 to i64*
  %52 = load i64, i64* %51, align 8
  %53 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 1
  %54 = bitcast %"struct.jxl::PropertyDecisionNode"** %53 to i64*
  store i64 %52, i64* %54, align 8
  %55 = icmp eq i64 %50, 0
  br i1 %55, label %620, label %56

56:                                               ; preds = %47
  %57 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %58 = getelementptr inbounds %"class.std::__1::vector.199", %"class.std::__1::vector.199"* %1, i64 0, i32 0, i32 1
  %59 = getelementptr inbounds %"class.std::__1::vector.199", %"class.std::__1::vector.199"* %1, i64 0, i32 0, i32 2, i32 0, i32 0
  %60 = bitcast %"struct.jxl::Token"** %58 to i64*
  %61 = bitcast %"class.std::__1::vector.199"* %1 to i64*
  %62 = bitcast %"struct.jxl::Token"** %59 to i64*
  %63 = getelementptr inbounds %"class.std::__1::vector.199", %"class.std::__1::vector.199"* %1, i64 0, i32 0, i32 0
  %64 = bitcast i64* %9 to i8*
  %65 = bitcast i64* %10 to i8*
  %66 = bitcast i32* %11 to i8*
  %67 = bitcast i32* %12 to i8*
  %68 = bitcast i32* %13 to i8*
  %69 = getelementptr inbounds %"class.std::__1::queue", %"class.std::__1::queue"* %4, i64 0, i32 0
  %70 = bitcast i32* %5 to i8*
  %71 = bitcast i32* %6 to i8*
  %72 = bitcast i64* %7 to i8*
  %73 = bitcast i32* %8 to i8*
  br label %74

74:                                               ; preds = %56, %616
  %75 = phi i64 [ %50, %56 ], [ %618, %616 ]
  %76 = phi i64 [ 0, %56 ], [ %617, %616 ]
  %77 = load i32**, i32*** %28, align 8
  %78 = load i64, i64* %30, align 8
  %79 = lshr i64 %78, 10
  %80 = getelementptr inbounds i32*, i32** %77, i64 %79
  %81 = load i32*, i32** %80, align 8
  %82 = and i64 %78, 1023
  %83 = getelementptr inbounds i32, i32* %81, i64 %82
  %84 = load i32, i32* %83, align 4
  %85 = add i64 %75, -1
  store i64 %85, i64* %31, align 8
  %86 = add i64 %78, 1
  store i64 %86, i64* %30, align 8
  %87 = icmp ult i64 %86, 2048
  br i1 %87, label %95, label %88

88:                                               ; preds = %74
  %89 = bitcast i32** %77 to i8**
  %90 = load i8*, i8** %89, align 8
  call void @_ZdlPv(i8* %90) #29
  %91 = load i32**, i32*** %28, align 8
  %92 = getelementptr inbounds i32*, i32** %91, i64 1
  store i32** %92, i32*** %28, align 8
  %93 = load i64, i64* %30, align 8
  %94 = add i64 %93, -1024
  store i64 %94, i64* %30, align 8
  br label %95

95:                                               ; preds = %74, %88
  %96 = sext i32 %84 to i64
  %97 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %57, align 8
  %98 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %97, i64 %96, i32 1
  %99 = load i16, i16* %98, align 4
  %100 = icmp sgt i16 %99, -2
  br i1 %100, label %104, label %101

101:                                              ; preds = %95
  %102 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.1, i64 0, i64 0), i32 1020, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.14, i64 0, i64 0)) #24
  %103 = call zeroext i1 @_ZN3jxl5AbortEv() #28
  unreachable

104:                                              ; preds = %95
  %105 = sext i16 %99 to i32
  %106 = add nsw i32 %105, 1
  %107 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %58, align 8
  %108 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %59, align 8
  %109 = icmp ult %"struct.jxl::Token"* %107, %108
  %110 = ptrtoint %"struct.jxl::Token"* %108 to i64
  br i1 %109, label %111, label %116

111:                                              ; preds = %104
  %112 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %107, i64 0, i32 0
  store i32 2, i32* %112, align 4
  %113 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %107, i64 0, i32 1
  store i32 %106, i32* %113, align 4
  %114 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %107, i64 1
  %115 = ptrtoint %"struct.jxl::Token"* %114 to i64
  store i64 %115, i64* %60, align 8
  br label %170

116:                                              ; preds = %104
  %117 = ptrtoint %"struct.jxl::Token"* %107 to i64
  %118 = load i64, i64* %61, align 8
  %119 = sub i64 %117, %118
  %120 = ashr exact i64 %119, 3
  %121 = add nsw i64 %120, 1
  %122 = icmp ugt i64 %121, 2305843009213693951
  br i1 %122, label %123, label %125

123:                                              ; preds = %116
  %124 = bitcast %"class.std::__1::vector.199"* %1 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %124) #28
  unreachable

125:                                              ; preds = %116
  %126 = sub i64 %110, %118
  %127 = ashr exact i64 %126, 3
  %128 = icmp ult i64 %127, 1152921504606846975
  br i1 %128, label %129, label %137

129:                                              ; preds = %125
  %130 = ashr exact i64 %126, 2
  %131 = icmp ult i64 %130, %121
  %132 = select i1 %131, i64 %121, i64 %130
  %133 = icmp eq i64 %132, 0
  br i1 %133, label %142, label %134

134:                                              ; preds = %129
  %135 = icmp ugt i64 %132, 2305843009213693951
  br i1 %135, label %136, label %137

136:                                              ; preds = %134
  call void @abort() #28
  unreachable

137:                                              ; preds = %134, %125
  %138 = phi i64 [ %132, %134 ], [ 2305843009213693951, %125 ]
  %139 = shl i64 %138, 3
  %140 = call i8* @_Znwm(i64 %139) #29
  %141 = bitcast i8* %140 to %"struct.jxl::Token"*
  br label %142

142:                                              ; preds = %137, %129
  %143 = phi i64 [ %138, %137 ], [ 0, %129 ]
  %144 = phi %"struct.jxl::Token"* [ %141, %137 ], [ null, %129 ]
  %145 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %144, i64 %120
  %146 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %144, i64 %143
  %147 = ptrtoint %"struct.jxl::Token"* %146 to i64
  %148 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %145, i64 0, i32 0
  store i32 2, i32* %148, align 4
  %149 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %144, i64 %120, i32 1
  store i32 %106, i32* %149, align 4
  %150 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %145, i64 1
  %151 = ptrtoint %"struct.jxl::Token"* %150 to i64
  %152 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %63, align 8
  %153 = load i64, i64* %60, align 8
  %154 = ptrtoint %"struct.jxl::Token"* %152 to i64
  %155 = sub i64 %153, %154
  %156 = ashr exact i64 %155, 3
  %157 = sub nsw i64 0, %156
  %158 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %145, i64 %157
  %159 = ptrtoint %"struct.jxl::Token"* %158 to i64
  %160 = icmp sgt i64 %155, 0
  br i1 %160, label %161, label %165

161:                                              ; preds = %142
  %162 = bitcast %"struct.jxl::Token"* %158 to i8*
  %163 = bitcast %"struct.jxl::Token"* %152 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %162, i8* align 4 %163, i64 %155, i1 false) #24
  %164 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %63, align 8
  br label %165

165:                                              ; preds = %161, %142
  %166 = phi %"struct.jxl::Token"* [ %152, %142 ], [ %164, %161 ]
  store i64 %159, i64* %61, align 8
  store i64 %151, i64* %60, align 8
  store i64 %147, i64* %62, align 8
  %167 = icmp eq %"struct.jxl::Token"* %166, null
  br i1 %167, label %170, label %168

168:                                              ; preds = %165
  %169 = bitcast %"struct.jxl::Token"* %166 to i8*
  call void @_ZdlPv(i8* %169) #29
  br label %170

170:                                              ; preds = %168, %165, %111
  %171 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %57, align 8
  %172 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %171, i64 %96, i32 1
  %173 = load i16, i16* %172, align 4
  %174 = icmp eq i16 %173, -1
  br i1 %174, label %175, label %464

175:                                              ; preds = %170
  %176 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %171, i64 %96, i32 5
  %177 = load i32, i32* %176, align 8
  %178 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %58, align 8
  %179 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %59, align 8
  %180 = icmp ult %"struct.jxl::Token"* %178, %179
  %181 = ptrtoint %"struct.jxl::Token"* %179 to i64
  br i1 %180, label %182, label %187

182:                                              ; preds = %175
  %183 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %178, i64 0, i32 0
  store i32 4, i32* %183, align 4
  %184 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %178, i64 0, i32 1
  store i32 %177, i32* %184, align 4
  %185 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %178, i64 1
  %186 = ptrtoint %"struct.jxl::Token"* %185 to i64
  store i64 %186, i64* %60, align 8
  br label %243

187:                                              ; preds = %175
  %188 = ptrtoint %"struct.jxl::Token"* %178 to i64
  %189 = load i64, i64* %61, align 8
  %190 = sub i64 %188, %189
  %191 = ashr exact i64 %190, 3
  %192 = add nsw i64 %191, 1
  %193 = icmp ugt i64 %192, 2305843009213693951
  br i1 %193, label %194, label %196

194:                                              ; preds = %187
  %195 = bitcast %"class.std::__1::vector.199"* %1 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %195) #28
  unreachable

196:                                              ; preds = %187
  %197 = sub i64 %181, %189
  %198 = ashr exact i64 %197, 3
  %199 = icmp ult i64 %198, 1152921504606846975
  br i1 %199, label %200, label %208

200:                                              ; preds = %196
  %201 = ashr exact i64 %197, 2
  %202 = icmp ult i64 %201, %192
  %203 = select i1 %202, i64 %192, i64 %201
  %204 = icmp eq i64 %203, 0
  br i1 %204, label %213, label %205

205:                                              ; preds = %200
  %206 = icmp ugt i64 %203, 2305843009213693951
  br i1 %206, label %207, label %208

207:                                              ; preds = %205
  call void @abort() #28
  unreachable

208:                                              ; preds = %205, %196
  %209 = phi i64 [ %203, %205 ], [ 2305843009213693951, %196 ]
  %210 = shl i64 %209, 3
  %211 = call i8* @_Znwm(i64 %210) #29
  %212 = bitcast i8* %211 to %"struct.jxl::Token"*
  br label %213

213:                                              ; preds = %208, %200
  %214 = phi i64 [ %209, %208 ], [ 0, %200 ]
  %215 = phi %"struct.jxl::Token"* [ %212, %208 ], [ null, %200 ]
  %216 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %215, i64 %191
  %217 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %215, i64 %214
  %218 = ptrtoint %"struct.jxl::Token"* %217 to i64
  %219 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %216, i64 0, i32 0
  store i32 4, i32* %219, align 4
  %220 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %215, i64 %191, i32 1
  store i32 %177, i32* %220, align 4
  %221 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %216, i64 1
  %222 = ptrtoint %"struct.jxl::Token"* %221 to i64
  %223 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %63, align 8
  %224 = load i64, i64* %60, align 8
  %225 = ptrtoint %"struct.jxl::Token"* %223 to i64
  %226 = sub i64 %224, %225
  %227 = ashr exact i64 %226, 3
  %228 = sub nsw i64 0, %227
  %229 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %216, i64 %228
  %230 = ptrtoint %"struct.jxl::Token"* %229 to i64
  %231 = icmp sgt i64 %226, 0
  br i1 %231, label %232, label %236

232:                                              ; preds = %213
  %233 = bitcast %"struct.jxl::Token"* %229 to i8*
  %234 = bitcast %"struct.jxl::Token"* %223 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %233, i8* align 4 %234, i64 %226, i1 false) #24
  %235 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %63, align 8
  br label %236

236:                                              ; preds = %232, %213
  %237 = phi %"struct.jxl::Token"* [ %223, %213 ], [ %235, %232 ]
  store i64 %230, i64* %61, align 8
  store i64 %222, i64* %60, align 8
  store i64 %218, i64* %62, align 8
  %238 = icmp eq %"struct.jxl::Token"* %237, null
  br i1 %238, label %243, label %239

239:                                              ; preds = %236
  %240 = bitcast %"struct.jxl::Token"* %237 to i8*
  call void @_ZdlPv(i8* %240) #29
  %241 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %58, align 8
  %242 = ptrtoint %"struct.jxl::Token"* %241 to i64
  br label %243

243:                                              ; preds = %239, %236, %182
  %244 = phi i64 [ %242, %239 ], [ %222, %236 ], [ %186, %182 ]
  %245 = phi %"struct.jxl::Token"* [ %241, %239 ], [ %221, %236 ], [ %185, %182 ]
  %246 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %57, align 8
  %247 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %246, i64 %96, i32 7
  %248 = load i64, i64* %247, align 8
  %249 = trunc i64 %248 to i32
  %250 = shl i32 %249, 1
  %251 = ashr i32 %249, 31
  %252 = xor i32 %250, %251
  %253 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %59, align 8
  %254 = icmp ult %"struct.jxl::Token"* %245, %253
  %255 = ptrtoint %"struct.jxl::Token"* %253 to i64
  br i1 %254, label %256, label %261

256:                                              ; preds = %243
  %257 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %245, i64 0, i32 0
  store i32 6, i32* %257, align 4
  %258 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %245, i64 0, i32 1
  store i32 %252, i32* %258, align 4
  %259 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %245, i64 1
  %260 = ptrtoint %"struct.jxl::Token"* %259 to i64
  store i64 %260, i64* %60, align 8
  br label %316

261:                                              ; preds = %243
  %262 = load i64, i64* %61, align 8
  %263 = sub i64 %244, %262
  %264 = ashr exact i64 %263, 3
  %265 = add nsw i64 %264, 1
  %266 = icmp ugt i64 %265, 2305843009213693951
  br i1 %266, label %267, label %269

267:                                              ; preds = %261
  %268 = bitcast %"class.std::__1::vector.199"* %1 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %268) #28
  unreachable

269:                                              ; preds = %261
  %270 = sub i64 %255, %262
  %271 = ashr exact i64 %270, 3
  %272 = icmp ult i64 %271, 1152921504606846975
  br i1 %272, label %273, label %281

273:                                              ; preds = %269
  %274 = ashr exact i64 %270, 2
  %275 = icmp ult i64 %274, %265
  %276 = select i1 %275, i64 %265, i64 %274
  %277 = icmp eq i64 %276, 0
  br i1 %277, label %286, label %278

278:                                              ; preds = %273
  %279 = icmp ugt i64 %276, 2305843009213693951
  br i1 %279, label %280, label %281

280:                                              ; preds = %278
  call void @abort() #28
  unreachable

281:                                              ; preds = %278, %269
  %282 = phi i64 [ %276, %278 ], [ 2305843009213693951, %269 ]
  %283 = shl i64 %282, 3
  %284 = call i8* @_Znwm(i64 %283) #29
  %285 = bitcast i8* %284 to %"struct.jxl::Token"*
  br label %286

286:                                              ; preds = %281, %273
  %287 = phi i64 [ %282, %281 ], [ 0, %273 ]
  %288 = phi %"struct.jxl::Token"* [ %285, %281 ], [ null, %273 ]
  %289 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %288, i64 %264
  %290 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %288, i64 %287
  %291 = ptrtoint %"struct.jxl::Token"* %290 to i64
  %292 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %289, i64 0, i32 0
  store i32 6, i32* %292, align 4
  %293 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %288, i64 %264, i32 1
  store i32 %252, i32* %293, align 4
  %294 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %289, i64 1
  %295 = ptrtoint %"struct.jxl::Token"* %294 to i64
  %296 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %63, align 8
  %297 = load i64, i64* %60, align 8
  %298 = ptrtoint %"struct.jxl::Token"* %296 to i64
  %299 = sub i64 %297, %298
  %300 = ashr exact i64 %299, 3
  %301 = sub nsw i64 0, %300
  %302 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %289, i64 %301
  %303 = ptrtoint %"struct.jxl::Token"* %302 to i64
  %304 = icmp sgt i64 %299, 0
  br i1 %304, label %305, label %309

305:                                              ; preds = %286
  %306 = bitcast %"struct.jxl::Token"* %302 to i8*
  %307 = bitcast %"struct.jxl::Token"* %296 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %306, i8* align 4 %307, i64 %299, i1 false) #24
  %308 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %63, align 8
  br label %309

309:                                              ; preds = %305, %286
  %310 = phi %"struct.jxl::Token"* [ %296, %286 ], [ %308, %305 ]
  store i64 %303, i64* %61, align 8
  store i64 %295, i64* %60, align 8
  store i64 %291, i64* %62, align 8
  %311 = icmp eq %"struct.jxl::Token"* %310, null
  br i1 %311, label %316, label %312

312:                                              ; preds = %309
  %313 = bitcast %"struct.jxl::Token"* %310 to i8*
  call void @_ZdlPv(i8* %313) #29
  %314 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %58, align 8
  %315 = ptrtoint %"struct.jxl::Token"* %314 to i64
  br label %316

316:                                              ; preds = %312, %309, %256
  %317 = phi i64 [ %315, %312 ], [ %295, %309 ], [ %260, %256 ]
  %318 = phi %"struct.jxl::Token"* [ %314, %312 ], [ %294, %309 ], [ %259, %256 ]
  %319 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %57, align 8
  %320 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %319, i64 %96, i32 8
  %321 = load i32, i32* %320, align 8
  %322 = call i32 @llvm.cttz.i32(i32 %321, i1 true) #24, !range !299
  %323 = lshr i32 %321, %322
  %324 = add i32 %323, -1
  %325 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %59, align 8
  %326 = icmp ult %"struct.jxl::Token"* %318, %325
  %327 = ptrtoint %"struct.jxl::Token"* %325 to i64
  br i1 %326, label %328, label %333

328:                                              ; preds = %316
  %329 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %318, i64 0, i32 0
  store i32 8, i32* %329, align 4
  %330 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %318, i64 0, i32 1
  store i32 %322, i32* %330, align 4
  %331 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %318, i64 1
  %332 = ptrtoint %"struct.jxl::Token"* %331 to i64
  store i64 %332, i64* %60, align 8
  br label %388

333:                                              ; preds = %316
  %334 = load i64, i64* %61, align 8
  %335 = sub i64 %317, %334
  %336 = ashr exact i64 %335, 3
  %337 = add nsw i64 %336, 1
  %338 = icmp ugt i64 %337, 2305843009213693951
  br i1 %338, label %339, label %341

339:                                              ; preds = %333
  %340 = bitcast %"class.std::__1::vector.199"* %1 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %340) #28
  unreachable

341:                                              ; preds = %333
  %342 = sub i64 %327, %334
  %343 = ashr exact i64 %342, 3
  %344 = icmp ult i64 %343, 1152921504606846975
  br i1 %344, label %345, label %353

345:                                              ; preds = %341
  %346 = ashr exact i64 %342, 2
  %347 = icmp ult i64 %346, %337
  %348 = select i1 %347, i64 %337, i64 %346
  %349 = icmp eq i64 %348, 0
  br i1 %349, label %358, label %350

350:                                              ; preds = %345
  %351 = icmp ugt i64 %348, 2305843009213693951
  br i1 %351, label %352, label %353

352:                                              ; preds = %350
  call void @abort() #28
  unreachable

353:                                              ; preds = %350, %341
  %354 = phi i64 [ %348, %350 ], [ 2305843009213693951, %341 ]
  %355 = shl i64 %354, 3
  %356 = call i8* @_Znwm(i64 %355) #29
  %357 = bitcast i8* %356 to %"struct.jxl::Token"*
  br label %358

358:                                              ; preds = %353, %345
  %359 = phi i64 [ %354, %353 ], [ 0, %345 ]
  %360 = phi %"struct.jxl::Token"* [ %357, %353 ], [ null, %345 ]
  %361 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %360, i64 %336
  %362 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %360, i64 %359
  %363 = ptrtoint %"struct.jxl::Token"* %362 to i64
  %364 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %361, i64 0, i32 0
  store i32 8, i32* %364, align 4
  %365 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %360, i64 %336, i32 1
  store i32 %322, i32* %365, align 4
  %366 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %361, i64 1
  %367 = ptrtoint %"struct.jxl::Token"* %366 to i64
  %368 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %63, align 8
  %369 = load i64, i64* %60, align 8
  %370 = ptrtoint %"struct.jxl::Token"* %368 to i64
  %371 = sub i64 %369, %370
  %372 = ashr exact i64 %371, 3
  %373 = sub nsw i64 0, %372
  %374 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %361, i64 %373
  %375 = ptrtoint %"struct.jxl::Token"* %374 to i64
  %376 = icmp sgt i64 %371, 0
  br i1 %376, label %377, label %381

377:                                              ; preds = %358
  %378 = bitcast %"struct.jxl::Token"* %374 to i8*
  %379 = bitcast %"struct.jxl::Token"* %368 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %378, i8* align 4 %379, i64 %371, i1 false) #24
  %380 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %63, align 8
  br label %381

381:                                              ; preds = %377, %358
  %382 = phi %"struct.jxl::Token"* [ %368, %358 ], [ %380, %377 ]
  store i64 %375, i64* %61, align 8
  store i64 %367, i64* %60, align 8
  store i64 %363, i64* %62, align 8
  %383 = icmp eq %"struct.jxl::Token"* %382, null
  br i1 %383, label %388, label %384

384:                                              ; preds = %381
  %385 = bitcast %"struct.jxl::Token"* %382 to i8*
  call void @_ZdlPv(i8* %385) #29
  %386 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %58, align 8
  %387 = ptrtoint %"struct.jxl::Token"* %386 to i64
  br label %388

388:                                              ; preds = %384, %381, %328
  %389 = phi i64 [ %387, %384 ], [ %367, %381 ], [ %332, %328 ]
  %390 = phi %"struct.jxl::Token"* [ %386, %384 ], [ %366, %381 ], [ %331, %328 ]
  %391 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %59, align 8
  %392 = icmp ult %"struct.jxl::Token"* %390, %391
  %393 = ptrtoint %"struct.jxl::Token"* %391 to i64
  br i1 %392, label %394, label %399

394:                                              ; preds = %388
  %395 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %390, i64 0, i32 0
  store i32 10, i32* %395, align 4
  %396 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %390, i64 0, i32 1
  store i32 %324, i32* %396, align 4
  %397 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %390, i64 1
  %398 = ptrtoint %"struct.jxl::Token"* %397 to i64
  store i64 %398, i64* %60, align 8
  br label %452

399:                                              ; preds = %388
  %400 = load i64, i64* %61, align 8
  %401 = sub i64 %389, %400
  %402 = ashr exact i64 %401, 3
  %403 = add nsw i64 %402, 1
  %404 = icmp ugt i64 %403, 2305843009213693951
  br i1 %404, label %405, label %407

405:                                              ; preds = %399
  %406 = bitcast %"class.std::__1::vector.199"* %1 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %406) #28
  unreachable

407:                                              ; preds = %399
  %408 = sub i64 %393, %400
  %409 = ashr exact i64 %408, 3
  %410 = icmp ult i64 %409, 1152921504606846975
  br i1 %410, label %411, label %419

411:                                              ; preds = %407
  %412 = ashr exact i64 %408, 2
  %413 = icmp ult i64 %412, %403
  %414 = select i1 %413, i64 %403, i64 %412
  %415 = icmp eq i64 %414, 0
  br i1 %415, label %424, label %416

416:                                              ; preds = %411
  %417 = icmp ugt i64 %414, 2305843009213693951
  br i1 %417, label %418, label %419

418:                                              ; preds = %416
  call void @abort() #28
  unreachable

419:                                              ; preds = %416, %407
  %420 = phi i64 [ %414, %416 ], [ 2305843009213693951, %407 ]
  %421 = shl i64 %420, 3
  %422 = call i8* @_Znwm(i64 %421) #29
  %423 = bitcast i8* %422 to %"struct.jxl::Token"*
  br label %424

424:                                              ; preds = %419, %411
  %425 = phi i64 [ %420, %419 ], [ 0, %411 ]
  %426 = phi %"struct.jxl::Token"* [ %423, %419 ], [ null, %411 ]
  %427 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %426, i64 %402
  %428 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %426, i64 %425
  %429 = ptrtoint %"struct.jxl::Token"* %428 to i64
  %430 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %427, i64 0, i32 0
  store i32 10, i32* %430, align 4
  %431 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %426, i64 %402, i32 1
  store i32 %324, i32* %431, align 4
  %432 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %427, i64 1
  %433 = ptrtoint %"struct.jxl::Token"* %432 to i64
  %434 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %63, align 8
  %435 = load i64, i64* %60, align 8
  %436 = ptrtoint %"struct.jxl::Token"* %434 to i64
  %437 = sub i64 %435, %436
  %438 = ashr exact i64 %437, 3
  %439 = sub nsw i64 0, %438
  %440 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %427, i64 %439
  %441 = ptrtoint %"struct.jxl::Token"* %440 to i64
  %442 = icmp sgt i64 %437, 0
  br i1 %442, label %443, label %447

443:                                              ; preds = %424
  %444 = bitcast %"struct.jxl::Token"* %440 to i8*
  %445 = bitcast %"struct.jxl::Token"* %434 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %444, i8* align 4 %445, i64 %437, i1 false) #24
  %446 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %63, align 8
  br label %447

447:                                              ; preds = %443, %424
  %448 = phi %"struct.jxl::Token"* [ %434, %424 ], [ %446, %443 ]
  store i64 %441, i64* %61, align 8
  store i64 %433, i64* %60, align 8
  store i64 %429, i64* %62, align 8
  %449 = icmp eq %"struct.jxl::Token"* %448, null
  br i1 %449, label %452, label %450

450:                                              ; preds = %447
  %451 = bitcast %"struct.jxl::Token"* %448 to i8*
  call void @_ZdlPv(i8* %451) #29
  br label %452

452:                                              ; preds = %450, %447, %394
  %453 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %57, align 8
  %454 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %453, i64 %96, i32 5
  %455 = load i32, i32* %454, align 8
  %456 = icmp ult i32 %455, 14
  br i1 %456, label %460, label %457

457:                                              ; preds = %452
  %458 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.1, i64 0, i64 0), i32 1031, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.15, i64 0, i64 0)) #24
  %459 = call zeroext i1 @_ZN3jxl5AbortEv() #28
  unreachable

460:                                              ; preds = %452
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %70) #24
  store i32 -1, i32* %5, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %71) #24
  store i32 0, i32* %6, align 4
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %72) #24
  %461 = add i64 %76, 1
  store i64 %76, i64* %7, align 8
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %73) #24
  store i32 0, i32* %8, align 4
  %462 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %453, i64 %96, i32 7
  %463 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %453, i64 %96, i32 8
  call void @_ZNSt3__16vectorIN3jxl20PropertyDecisionNodeENS_9allocatorIS2_EEE12emplace_backIJiimiRKNS1_9PredictorERKlRKjEEEvDpOT_(%"class.std::__1::vector"* %2, i32* nonnull dereferenceable(4) %5, i32* nonnull dereferenceable(4) %6, i64* nonnull dereferenceable(8) %7, i32* nonnull dereferenceable(4) %8, i32* dereferenceable(4) %454, i64* dereferenceable(8) %462, i32* dereferenceable(4) %463)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %73) #24
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %72) #24
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %71) #24
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %70) #24
  br label %616

464:                                              ; preds = %170
  %465 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %171, i64 %96, i32 0
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %64) #24
  %466 = load i64, i64* %54, align 8
  %467 = load i64, i64* %51, align 8
  %468 = sub i64 %466, %467
  %469 = sdiv exact i64 %468, 40
  %470 = load i64, i64* %31, align 8
  %471 = add i64 %469, %470
  %472 = add i64 %471, 1
  store i64 %472, i64* %9, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %65) #24
  %473 = add i64 %471, 2
  store i64 %473, i64* %10, align 8
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %66) #24
  store i32 0, i32* %11, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %67) #24
  store i32 0, i32* %12, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %68) #24
  store i32 1, i32* %13, align 4
  call void @_ZNSt3__16vectorIN3jxl20PropertyDecisionNodeENS_9allocatorIS2_EEE12emplace_backIJRKsRKimmNS1_9PredictorEiiEEEvDpOT_(%"class.std::__1::vector"* %2, i16* dereferenceable(2) %172, i32* dereferenceable(4) %465, i64* nonnull dereferenceable(8) %9, i64* nonnull dereferenceable(8) %10, i32* nonnull dereferenceable(4) %11, i32* nonnull dereferenceable(4) %12, i32* nonnull dereferenceable(4) %13)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %68) #24
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %67) #24
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %66) #24
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %65) #24
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %64) #24
  %474 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %57, align 8
  %475 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %474, i64 %96, i32 3
  %476 = load i32, i32* %475, align 8
  %477 = load i64, i64* %32, align 8
  %478 = load i64, i64* %33, align 8
  %479 = sub i64 %477, %478
  %480 = icmp eq i64 %479, 0
  %481 = shl i64 %479, 7
  %482 = add i64 %481, -1
  %483 = select i1 %480, i64 0, i64 %482
  %484 = load i64, i64* %30, align 8
  %485 = load i64, i64* %31, align 8
  %486 = add i64 %485, %484
  %487 = icmp eq i64 %483, %486
  %488 = inttoptr i64 %478 to i32**
  %489 = inttoptr i64 %477 to i32**
  br i1 %487, label %490, label %496

490:                                              ; preds = %464
  call void @_ZNSt3__15dequeIiNS_9allocatorIiEEE19__add_back_capacityEv(%"class.std::__1::deque"* nonnull %69) #24
  %491 = load i64, i64* %31, align 8
  %492 = load i64, i64* %30, align 8
  %493 = load i32**, i32*** %28, align 8
  %494 = load i32**, i32*** %29, align 8
  %495 = add i64 %492, %491
  br label %496

496:                                              ; preds = %490, %464
  %497 = phi i64 [ %495, %490 ], [ %486, %464 ]
  %498 = phi i32** [ %494, %490 ], [ %489, %464 ]
  %499 = phi i32** [ %493, %490 ], [ %488, %464 ]
  %500 = icmp eq i32** %498, %499
  br i1 %500, label %507, label %501

501:                                              ; preds = %496
  %502 = lshr i64 %497, 10
  %503 = getelementptr inbounds i32*, i32** %499, i64 %502
  %504 = load i32*, i32** %503, align 8
  %505 = and i64 %497, 1023
  %506 = getelementptr inbounds i32, i32* %504, i64 %505
  br label %507

507:                                              ; preds = %496, %501
  %508 = phi i32* [ %506, %501 ], [ null, %496 ]
  store i32 %476, i32* %508, align 4
  %509 = load i64, i64* %31, align 8
  %510 = add i64 %509, 1
  store i64 %510, i64* %31, align 8
  %511 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %57, align 8
  %512 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %511, i64 %96, i32 4
  %513 = load i32, i32* %512, align 4
  %514 = load i64, i64* %32, align 8
  %515 = load i64, i64* %33, align 8
  %516 = sub i64 %514, %515
  %517 = icmp eq i64 %516, 0
  %518 = shl i64 %516, 7
  %519 = add i64 %518, -1
  %520 = select i1 %517, i64 0, i64 %519
  %521 = load i64, i64* %30, align 8
  %522 = add i64 %521, %510
  %523 = icmp eq i64 %520, %522
  %524 = inttoptr i64 %515 to i32**
  %525 = inttoptr i64 %514 to i32**
  br i1 %523, label %526, label %532

526:                                              ; preds = %507
  call void @_ZNSt3__15dequeIiNS_9allocatorIiEEE19__add_back_capacityEv(%"class.std::__1::deque"* nonnull %69) #24
  %527 = load i64, i64* %31, align 8
  %528 = load i64, i64* %30, align 8
  %529 = load i32**, i32*** %28, align 8
  %530 = load i32**, i32*** %29, align 8
  %531 = add i64 %528, %527
  br label %532

532:                                              ; preds = %526, %507
  %533 = phi i64 [ %531, %526 ], [ %522, %507 ]
  %534 = phi i32** [ %530, %526 ], [ %525, %507 ]
  %535 = phi i32** [ %529, %526 ], [ %524, %507 ]
  %536 = icmp eq i32** %534, %535
  br i1 %536, label %543, label %537

537:                                              ; preds = %532
  %538 = lshr i64 %533, 10
  %539 = getelementptr inbounds i32*, i32** %535, i64 %538
  %540 = load i32*, i32** %539, align 8
  %541 = and i64 %533, 1023
  %542 = getelementptr inbounds i32, i32* %540, i64 %541
  br label %543

543:                                              ; preds = %532, %537
  %544 = phi i32* [ %542, %537 ], [ null, %532 ]
  store i32 %513, i32* %544, align 4
  %545 = load i64, i64* %31, align 8
  %546 = add i64 %545, 1
  store i64 %546, i64* %31, align 8
  %547 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %57, align 8
  %548 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %547, i64 %96, i32 0
  %549 = load i32, i32* %548, align 8
  %550 = shl i32 %549, 1
  %551 = ashr i32 %549, 31
  %552 = xor i32 %550, %551
  %553 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %58, align 8
  %554 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %59, align 8
  %555 = icmp ult %"struct.jxl::Token"* %553, %554
  %556 = ptrtoint %"struct.jxl::Token"* %554 to i64
  br i1 %555, label %557, label %562

557:                                              ; preds = %543
  %558 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %553, i64 0, i32 0
  store i32 0, i32* %558, align 4
  %559 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %553, i64 0, i32 1
  store i32 %552, i32* %559, align 4
  %560 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %553, i64 1
  %561 = ptrtoint %"struct.jxl::Token"* %560 to i64
  store i64 %561, i64* %60, align 8
  br label %616

562:                                              ; preds = %543
  %563 = ptrtoint %"struct.jxl::Token"* %553 to i64
  %564 = load i64, i64* %61, align 8
  %565 = sub i64 %563, %564
  %566 = ashr exact i64 %565, 3
  %567 = add nsw i64 %566, 1
  %568 = icmp ugt i64 %567, 2305843009213693951
  br i1 %568, label %569, label %571

569:                                              ; preds = %562
  %570 = bitcast %"class.std::__1::vector.199"* %1 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %570) #28
  unreachable

571:                                              ; preds = %562
  %572 = sub i64 %556, %564
  %573 = ashr exact i64 %572, 3
  %574 = icmp ult i64 %573, 1152921504606846975
  br i1 %574, label %575, label %583

575:                                              ; preds = %571
  %576 = ashr exact i64 %572, 2
  %577 = icmp ult i64 %576, %567
  %578 = select i1 %577, i64 %567, i64 %576
  %579 = icmp eq i64 %578, 0
  br i1 %579, label %588, label %580

580:                                              ; preds = %575
  %581 = icmp ugt i64 %578, 2305843009213693951
  br i1 %581, label %582, label %583

582:                                              ; preds = %580
  call void @abort() #28
  unreachable

583:                                              ; preds = %580, %571
  %584 = phi i64 [ %578, %580 ], [ 2305843009213693951, %571 ]
  %585 = shl i64 %584, 3
  %586 = call i8* @_Znwm(i64 %585) #29
  %587 = bitcast i8* %586 to %"struct.jxl::Token"*
  br label %588

588:                                              ; preds = %583, %575
  %589 = phi i64 [ %584, %583 ], [ 0, %575 ]
  %590 = phi %"struct.jxl::Token"* [ %587, %583 ], [ null, %575 ]
  %591 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %590, i64 %566
  %592 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %590, i64 %589
  %593 = ptrtoint %"struct.jxl::Token"* %592 to i64
  %594 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %591, i64 0, i32 0
  store i32 0, i32* %594, align 4
  %595 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %590, i64 %566, i32 1
  store i32 %552, i32* %595, align 4
  %596 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %591, i64 1
  %597 = ptrtoint %"struct.jxl::Token"* %596 to i64
  %598 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %63, align 8
  %599 = load i64, i64* %60, align 8
  %600 = ptrtoint %"struct.jxl::Token"* %598 to i64
  %601 = sub i64 %599, %600
  %602 = ashr exact i64 %601, 3
  %603 = sub nsw i64 0, %602
  %604 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %591, i64 %603
  %605 = ptrtoint %"struct.jxl::Token"* %604 to i64
  %606 = icmp sgt i64 %601, 0
  br i1 %606, label %607, label %611

607:                                              ; preds = %588
  %608 = bitcast %"struct.jxl::Token"* %604 to i8*
  %609 = bitcast %"struct.jxl::Token"* %598 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %608, i8* align 4 %609, i64 %601, i1 false) #24
  %610 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %63, align 8
  br label %611

611:                                              ; preds = %607, %588
  %612 = phi %"struct.jxl::Token"* [ %598, %588 ], [ %610, %607 ]
  store i64 %605, i64* %61, align 8
  store i64 %597, i64* %60, align 8
  store i64 %593, i64* %62, align 8
  %613 = icmp eq %"struct.jxl::Token"* %612, null
  br i1 %613, label %616, label %614

614:                                              ; preds = %611
  %615 = bitcast %"struct.jxl::Token"* %612 to i8*
  call void @_ZdlPv(i8* %615) #29
  br label %616

616:                                              ; preds = %557, %611, %614, %460
  %617 = phi i64 [ %461, %460 ], [ %76, %614 ], [ %76, %611 ], [ %76, %557 ]
  %618 = load i64, i64* %31, align 8
  %619 = icmp eq i64 %618, 0
  br i1 %619, label %620, label %74

620:                                              ; preds = %616, %47
  %621 = load i32**, i32*** %28, align 8
  %622 = load i32**, i32*** %29, align 8
  %623 = ptrtoint i32** %622 to i64
  %624 = ptrtoint i32** %621 to i64
  store i64 0, i64* %31, align 8
  %625 = sub i64 %623, %624
  %626 = ashr exact i64 %625, 3
  %627 = icmp ugt i64 %626, 2
  br i1 %627, label %628, label %641

628:                                              ; preds = %620, %628
  %629 = phi i32** [ %633, %628 ], [ %621, %620 ]
  %630 = bitcast i32** %629 to i8**
  %631 = load i8*, i8** %630, align 8
  call void @_ZdlPv(i8* %631) #29
  %632 = load i32**, i32*** %28, align 8
  %633 = getelementptr inbounds i32*, i32** %632, i64 1
  store i32** %633, i32*** %28, align 8
  %634 = load i64, i64* %32, align 8
  %635 = ptrtoint i32** %633 to i64
  %636 = sub i64 %634, %635
  %637 = ashr exact i64 %636, 3
  %638 = icmp ugt i64 %637, 2
  br i1 %638, label %628, label %639

639:                                              ; preds = %628
  %640 = inttoptr i64 %634 to i32**
  br label %641

641:                                              ; preds = %639, %620
  %642 = phi i32** [ %622, %620 ], [ %640, %639 ]
  %643 = phi i32** [ %621, %620 ], [ %633, %639 ]
  %644 = phi i64 [ %626, %620 ], [ %637, %639 ]
  switch i64 %644, label %648 [
    i64 1, label %646
    i64 2, label %645
  ]

645:                                              ; preds = %641
  br label %646

646:                                              ; preds = %641, %645
  %647 = phi i64 [ 1024, %645 ], [ 512, %641 ]
  store i64 %647, i64* %30, align 8
  br label %648

648:                                              ; preds = %646, %641
  %649 = icmp eq i32** %643, %642
  br i1 %649, label %668, label %650

650:                                              ; preds = %648, %650
  %651 = phi i32** [ %654, %650 ], [ %643, %648 ]
  %652 = bitcast i32** %651 to i8**
  %653 = load i8*, i8** %652, align 8
  call void @_ZdlPv(i8* %653) #29
  %654 = getelementptr inbounds i32*, i32** %651, i64 1
  %655 = icmp eq i32** %654, %642
  br i1 %655, label %656, label %650

656:                                              ; preds = %650
  %657 = load i32**, i32*** %28, align 8
  %658 = load i32**, i32*** %29, align 8
  %659 = icmp eq i32** %658, %657
  br i1 %659, label %668, label %660

660:                                              ; preds = %656
  %661 = ptrtoint i32** %657 to i64
  %662 = getelementptr i32*, i32** %658, i64 -1
  %663 = ptrtoint i32** %662 to i64
  %664 = sub i64 %663, %661
  %665 = lshr i64 %664, 3
  %666 = xor i64 %665, -1
  %667 = getelementptr i32*, i32** %658, i64 %666
  store i32** %667, i32*** %29, align 8
  br label %668

668:                                              ; preds = %660, %656, %648
  %669 = load i32**, i32*** %27, align 8
  %670 = icmp eq i32** %669, null
  br i1 %670, label %673, label %671

671:                                              ; preds = %668
  %672 = bitcast i32** %669 to i8*
  call void @_ZdlPv(i8* %672) #29
  br label %673

673:                                              ; preds = %668, %671
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %26) #24
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl20PropertyDecisionNodeENS_9allocatorIS2_EEE12emplace_backIJiimiRKNS1_9PredictorERKlRKjEEEvDpOT_(%"class.std::__1::vector"*, i32* dereferenceable(4), i32* dereferenceable(4), i64* dereferenceable(8), i32* dereferenceable(4), i32* dereferenceable(4), i64* dereferenceable(8), i32* dereferenceable(4)) local_unnamed_addr #4 comdat align 2 {
  %9 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %10 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %9, align 8
  %11 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %12 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %11, align 8
  %13 = icmp ult %"struct.jxl::PropertyDecisionNode"* %10, %12
  %14 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %12 to i64
  br i1 %13, label %15, label %35

15:                                               ; preds = %8
  %16 = load i32, i32* %1, align 4
  %17 = load i32, i32* %2, align 4
  %18 = load i64, i64* %3, align 8
  %19 = trunc i64 %18 to i32
  %20 = load i32, i32* %4, align 4
  %21 = load i32, i32* %5, align 4
  %22 = load i64, i64* %6, align 8
  %23 = load i32, i32* %7, align 4
  %24 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %10, i64 0, i32 0
  store i32 %17, i32* %24, align 8
  %25 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %10, i64 0, i32 1
  %26 = trunc i32 %16 to i16
  store i16 %26, i16* %25, align 4
  %27 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %10, i64 0, i32 3
  store i32 %19, i32* %27, align 8
  %28 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %10, i64 0, i32 4
  store i32 %20, i32* %28, align 4
  %29 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %10, i64 0, i32 5
  store i32 %21, i32* %29, align 8
  %30 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %10, i64 0, i32 7
  store i64 %22, i64* %30, align 8
  %31 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %10, i64 0, i32 8
  store i32 %23, i32* %31, align 8
  %32 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %10, i64 1
  %33 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %32 to i64
  %34 = bitcast %"struct.jxl::PropertyDecisionNode"** %9 to i64*
  store i64 %33, i64* %34, align 8
  br label %103

35:                                               ; preds = %8
  %36 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %10 to i64
  %37 = bitcast %"struct.jxl::PropertyDecisionNode"** %9 to i64*
  %38 = bitcast %"class.std::__1::vector"* %0 to i64*
  %39 = load i64, i64* %38, align 8
  %40 = sub i64 %36, %39
  %41 = sdiv exact i64 %40, 40
  %42 = add nsw i64 %41, 1
  %43 = icmp ugt i64 %42, 461168601842738790
  br i1 %43, label %44, label %46

44:                                               ; preds = %35
  %45 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %45) #28
  unreachable

46:                                               ; preds = %35
  %47 = bitcast %"struct.jxl::PropertyDecisionNode"** %11 to i64*
  %48 = sub i64 %14, %39
  %49 = sdiv exact i64 %48, 40
  %50 = icmp ult i64 %49, 230584300921369395
  br i1 %50, label %51, label %56

51:                                               ; preds = %46
  %52 = shl nsw i64 %49, 1
  %53 = icmp ult i64 %52, %42
  %54 = select i1 %53, i64 %42, i64 %52
  %55 = icmp eq i64 %54, 0
  br i1 %55, label %61, label %56

56:                                               ; preds = %51, %46
  %57 = phi i64 [ %54, %51 ], [ 461168601842738790, %46 ]
  %58 = mul i64 %57, 40
  %59 = tail call i8* @_Znwm(i64 %58) #29
  %60 = bitcast i8* %59 to %"struct.jxl::PropertyDecisionNode"*
  br label %61

61:                                               ; preds = %56, %51
  %62 = phi i64 [ %57, %56 ], [ 0, %51 ]
  %63 = phi %"struct.jxl::PropertyDecisionNode"* [ %60, %56 ], [ null, %51 ]
  %64 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %63, i64 %41
  %65 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %63, i64 %62
  %66 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %65 to i64
  %67 = load i32, i32* %1, align 4
  %68 = load i32, i32* %2, align 4
  %69 = load i64, i64* %3, align 8
  %70 = trunc i64 %69 to i32
  %71 = load i32, i32* %4, align 4
  %72 = load i32, i32* %5, align 4
  %73 = load i64, i64* %6, align 8
  %74 = load i32, i32* %7, align 4
  %75 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %64, i64 0, i32 0
  store i32 %68, i32* %75, align 8
  %76 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %63, i64 %41, i32 1
  %77 = trunc i32 %67 to i16
  store i16 %77, i16* %76, align 4
  %78 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %63, i64 %41, i32 3
  store i32 %70, i32* %78, align 8
  %79 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %63, i64 %41, i32 4
  store i32 %71, i32* %79, align 4
  %80 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %63, i64 %41, i32 5
  store i32 %72, i32* %80, align 8
  %81 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %63, i64 %41, i32 7
  store i64 %73, i64* %81, align 8
  %82 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %63, i64 %41, i32 8
  store i32 %74, i32* %82, align 8
  %83 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %64, i64 1
  %84 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %83 to i64
  %85 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %86 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %85, align 8
  %87 = load i64, i64* %37, align 8
  %88 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %86 to i64
  %89 = sub i64 %87, %88
  %90 = sdiv exact i64 %89, -40
  %91 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %64, i64 %90
  %92 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %91 to i64
  %93 = icmp sgt i64 %89, 0
  br i1 %93, label %94, label %98

94:                                               ; preds = %61
  %95 = bitcast %"struct.jxl::PropertyDecisionNode"* %91 to i8*
  %96 = bitcast %"struct.jxl::PropertyDecisionNode"* %86 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %95, i8* align 8 %96, i64 %89, i1 false) #24
  %97 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %85, align 8
  br label %98

98:                                               ; preds = %94, %61
  %99 = phi %"struct.jxl::PropertyDecisionNode"* [ %86, %61 ], [ %97, %94 ]
  store i64 %92, i64* %38, align 8
  store i64 %84, i64* %37, align 8
  store i64 %66, i64* %47, align 8
  %100 = icmp eq %"struct.jxl::PropertyDecisionNode"* %99, null
  br i1 %100, label %103, label %101

101:                                              ; preds = %98
  %102 = bitcast %"struct.jxl::PropertyDecisionNode"* %99 to i8*
  tail call void @_ZdlPv(i8* %102) #29
  br label %103

103:                                              ; preds = %101, %98, %15
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl20PropertyDecisionNodeENS_9allocatorIS2_EEE12emplace_backIJRKsRKimmNS1_9PredictorEiiEEEvDpOT_(%"class.std::__1::vector"*, i16* dereferenceable(2), i32* dereferenceable(4), i64* dereferenceable(8), i64* dereferenceable(8), i32* dereferenceable(4), i32* dereferenceable(4), i32* dereferenceable(4)) local_unnamed_addr #4 comdat align 2 {
  %9 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %10 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %9, align 8
  %11 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %12 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %11, align 8
  %13 = icmp ult %"struct.jxl::PropertyDecisionNode"* %10, %12
  %14 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %12 to i64
  br i1 %13, label %15, label %36

15:                                               ; preds = %8
  %16 = load i16, i16* %1, align 2
  %17 = load i32, i32* %2, align 4
  %18 = load i64, i64* %3, align 8
  %19 = trunc i64 %18 to i32
  %20 = load i64, i64* %4, align 8
  %21 = trunc i64 %20 to i32
  %22 = load i32, i32* %5, align 4
  %23 = load i32, i32* %6, align 4
  %24 = sext i32 %23 to i64
  %25 = load i32, i32* %7, align 4
  %26 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %10, i64 0, i32 0
  store i32 %17, i32* %26, align 8
  %27 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %10, i64 0, i32 1
  store i16 %16, i16* %27, align 4
  %28 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %10, i64 0, i32 3
  store i32 %19, i32* %28, align 8
  %29 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %10, i64 0, i32 4
  store i32 %21, i32* %29, align 4
  %30 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %10, i64 0, i32 5
  store i32 %22, i32* %30, align 8
  %31 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %10, i64 0, i32 7
  store i64 %24, i64* %31, align 8
  %32 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %10, i64 0, i32 8
  store i32 %25, i32* %32, align 8
  %33 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %10, i64 1
  %34 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %33 to i64
  %35 = bitcast %"struct.jxl::PropertyDecisionNode"** %9 to i64*
  store i64 %34, i64* %35, align 8
  br label %105

36:                                               ; preds = %8
  %37 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %10 to i64
  %38 = bitcast %"struct.jxl::PropertyDecisionNode"** %9 to i64*
  %39 = bitcast %"class.std::__1::vector"* %0 to i64*
  %40 = load i64, i64* %39, align 8
  %41 = sub i64 %37, %40
  %42 = sdiv exact i64 %41, 40
  %43 = add nsw i64 %42, 1
  %44 = icmp ugt i64 %43, 461168601842738790
  br i1 %44, label %45, label %47

45:                                               ; preds = %36
  %46 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %46) #28
  unreachable

47:                                               ; preds = %36
  %48 = bitcast %"struct.jxl::PropertyDecisionNode"** %11 to i64*
  %49 = sub i64 %14, %40
  %50 = sdiv exact i64 %49, 40
  %51 = icmp ult i64 %50, 230584300921369395
  br i1 %51, label %52, label %57

52:                                               ; preds = %47
  %53 = shl nsw i64 %50, 1
  %54 = icmp ult i64 %53, %43
  %55 = select i1 %54, i64 %43, i64 %53
  %56 = icmp eq i64 %55, 0
  br i1 %56, label %62, label %57

57:                                               ; preds = %52, %47
  %58 = phi i64 [ %55, %52 ], [ 461168601842738790, %47 ]
  %59 = mul i64 %58, 40
  %60 = tail call i8* @_Znwm(i64 %59) #29
  %61 = bitcast i8* %60 to %"struct.jxl::PropertyDecisionNode"*
  br label %62

62:                                               ; preds = %57, %52
  %63 = phi i64 [ %58, %57 ], [ 0, %52 ]
  %64 = phi %"struct.jxl::PropertyDecisionNode"* [ %61, %57 ], [ null, %52 ]
  %65 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %64, i64 %42
  %66 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %64, i64 %63
  %67 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %66 to i64
  %68 = load i16, i16* %1, align 2
  %69 = load i32, i32* %2, align 4
  %70 = load i64, i64* %3, align 8
  %71 = trunc i64 %70 to i32
  %72 = load i64, i64* %4, align 8
  %73 = trunc i64 %72 to i32
  %74 = load i32, i32* %5, align 4
  %75 = load i32, i32* %6, align 4
  %76 = sext i32 %75 to i64
  %77 = load i32, i32* %7, align 4
  %78 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %65, i64 0, i32 0
  store i32 %69, i32* %78, align 8
  %79 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %64, i64 %42, i32 1
  store i16 %68, i16* %79, align 4
  %80 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %64, i64 %42, i32 3
  store i32 %71, i32* %80, align 8
  %81 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %64, i64 %42, i32 4
  store i32 %73, i32* %81, align 4
  %82 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %64, i64 %42, i32 5
  store i32 %74, i32* %82, align 8
  %83 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %64, i64 %42, i32 7
  store i64 %76, i64* %83, align 8
  %84 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %64, i64 %42, i32 8
  store i32 %77, i32* %84, align 8
  %85 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %65, i64 1
  %86 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %85 to i64
  %87 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %88 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %87, align 8
  %89 = load i64, i64* %38, align 8
  %90 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %88 to i64
  %91 = sub i64 %89, %90
  %92 = sdiv exact i64 %91, -40
  %93 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %65, i64 %92
  %94 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %93 to i64
  %95 = icmp sgt i64 %91, 0
  br i1 %95, label %96, label %100

96:                                               ; preds = %62
  %97 = bitcast %"struct.jxl::PropertyDecisionNode"* %93 to i8*
  %98 = bitcast %"struct.jxl::PropertyDecisionNode"* %88 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %97, i8* align 8 %98, i64 %91, i1 false) #24
  %99 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %87, align 8
  br label %100

100:                                              ; preds = %96, %62
  %101 = phi %"struct.jxl::PropertyDecisionNode"* [ %88, %62 ], [ %99, %96 ]
  store i64 %94, i64* %39, align 8
  store i64 %86, i64* %38, align 8
  store i64 %67, i64* %48, align 8
  %102 = icmp eq %"struct.jxl::PropertyDecisionNode"* %101, null
  br i1 %102, label %105, label %103

103:                                              ; preds = %100
  %104 = bitcast %"struct.jxl::PropertyDecisionNode"* %101 to i8*
  tail call void @_ZdlPv(i8* %104) #29
  br label %105

105:                                              ; preds = %103, %100, %15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hwy13FunctionCacheIvJRN3jxl11TreeSamplesEfRKNSt3__16vectorINS1_21ModularMultiplierInfoENS4_9allocatorIS6_EEEENS4_5arrayINSC_IjLm2EEELm2EEEfPNS5_INS1_20PropertyDecisionNodeENS7_ISF_EEEEEE13ChooseAndCallIXadL_ZNS1_L33FindBestSplitHighwayDispatchTableEEEEEvS3_fSB_SE_fSI_(%"struct.jxl::TreeSamples"* dereferenceable(200), float, %"class.std::__1::vector.69"* dereferenceable(24), i64, i64, float, %"class.std::__1::vector"*) #8 align 2 {
  tail call void @_ZN3hwy12ChosenTarget6UpdateEv(%"struct.hwy::ChosenTarget"* nonnull @_ZN3hwy13chosen_targetE) #24
  %8 = load atomic i32, i32* getelementptr inbounds (%"struct.hwy::ChosenTarget", %"struct.hwy::ChosenTarget"* @_ZN3hwy13chosen_targetE, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) seq_cst, align 4
  %9 = and i32 %8, 2225
  %10 = tail call i32 @llvm.cttz.i32(i32 %9, i1 true) #24, !range !299
  %11 = zext i32 %10 to i64
  %12 = getelementptr inbounds [12 x void (%"struct.jxl::TreeSamples"*, float, %"class.std::__1::vector.69"*, i64, i64, float, %"class.std::__1::vector"*)*], [12 x void (%"struct.jxl::TreeSamples"*, float, %"class.std::__1::vector.69"*, i64, i64, float, %"class.std::__1::vector"*)*]* @_ZN3jxlL33FindBestSplitHighwayDispatchTableE, i64 0, i64 %11
  %13 = load void (%"struct.jxl::TreeSamples"*, float, %"class.std::__1::vector.69"*, i64, i64, float, %"class.std::__1::vector"*)*, void (%"struct.jxl::TreeSamples"*, float, %"class.std::__1::vector.69"*, i64, i64, float, %"class.std::__1::vector"*)** %12, align 8
  tail call void %13(%"struct.jxl::TreeSamples"* dereferenceable(200) %0, float %1, %"class.std::__1::vector.69"* dereferenceable(24) %2, i64 %3, i64 %4, float %5, %"class.std::__1::vector"* %6) #24
  ret void
}

declare void @_ZN3hwy12ChosenTarget6UpdateEv(%"struct.hwy::ChosenTarget"*) local_unnamed_addr #6

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.cttz.i32(i32, i1 immarg) #21

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #21

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN3jxl12_GLOBAL__N_117QuantizeHistogramERKNSt3__16vectorIjNS1_9allocatorIjEEEEm(%"class.std::__1::vector.43"* noalias nocapture sret, %"class.std::__1::vector.55"* nocapture readonly dereferenceable(24), i64) unnamed_addr #8 {
  %4 = alloca %"class.std::__1::vector.43", align 8
  %5 = getelementptr inbounds %"class.std::__1::vector.55", %"class.std::__1::vector.55"* %1, i64 0, i32 0, i32 0
  %6 = load i32*, i32** %5, align 8
  %7 = ptrtoint i32* %6 to i64
  %8 = getelementptr inbounds %"class.std::__1::vector.55", %"class.std::__1::vector.55"* %1, i64 0, i32 0, i32 1
  %9 = load i32*, i32** %8, align 8
  %10 = icmp eq i32* %6, %9
  %11 = ptrtoint i32* %9 to i64
  br i1 %10, label %12, label %14

12:                                               ; preds = %3
  %13 = bitcast %"class.std::__1::vector.43"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 24, i1 false) #24
  br label %214

14:                                               ; preds = %3
  %15 = bitcast %"class.std::__1::vector.43"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %15) #24
  %16 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %4, i64 0, i32 0, i32 1
  %17 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %4, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %15, i8 0, i64 24, i1 false) #24
  %18 = getelementptr i32, i32* %9, i64 -1
  %19 = ptrtoint i32* %18 to i64
  %20 = sub i64 %19, %7
  %21 = lshr i64 %20, 2
  %22 = add nuw nsw i64 %21, 1
  %23 = icmp ult i64 %22, 4
  br i1 %23, label %89, label %24

24:                                               ; preds = %14
  %25 = and i64 %22, 9223372036854775804
  %26 = getelementptr i32, i32* %6, i64 %25
  %27 = add nsw i64 %25, -4
  %28 = lshr exact i64 %27, 2
  %29 = add nuw nsw i64 %28, 1
  %30 = and i64 %29, 1
  %31 = icmp eq i64 %27, 0
  br i1 %31, label %63, label %32

32:                                               ; preds = %24
  %33 = sub nuw nsw i64 %29, %30
  br label %34

34:                                               ; preds = %34, %32
  %35 = phi i64 [ 0, %32 ], [ %60, %34 ]
  %36 = phi <2 x i64> [ zeroinitializer, %32 ], [ %58, %34 ]
  %37 = phi <2 x i64> [ zeroinitializer, %32 ], [ %59, %34 ]
  %38 = phi i64 [ %33, %32 ], [ %61, %34 ]
  %39 = getelementptr i32, i32* %6, i64 %35
  %40 = bitcast i32* %39 to <2 x i32>*
  %41 = load <2 x i32>, <2 x i32>* %40, align 4
  %42 = getelementptr i32, i32* %39, i64 2
  %43 = bitcast i32* %42 to <2 x i32>*
  %44 = load <2 x i32>, <2 x i32>* %43, align 4
  %45 = zext <2 x i32> %41 to <2 x i64>
  %46 = zext <2 x i32> %44 to <2 x i64>
  %47 = add <2 x i64> %36, %45
  %48 = add <2 x i64> %37, %46
  %49 = or i64 %35, 4
  %50 = getelementptr i32, i32* %6, i64 %49
  %51 = bitcast i32* %50 to <2 x i32>*
  %52 = load <2 x i32>, <2 x i32>* %51, align 4
  %53 = getelementptr i32, i32* %50, i64 2
  %54 = bitcast i32* %53 to <2 x i32>*
  %55 = load <2 x i32>, <2 x i32>* %54, align 4
  %56 = zext <2 x i32> %52 to <2 x i64>
  %57 = zext <2 x i32> %55 to <2 x i64>
  %58 = add <2 x i64> %47, %56
  %59 = add <2 x i64> %48, %57
  %60 = add i64 %35, 8
  %61 = add i64 %38, -2
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %63, label %34, !llvm.loop !339

63:                                               ; preds = %34, %24
  %64 = phi <2 x i64> [ undef, %24 ], [ %58, %34 ]
  %65 = phi <2 x i64> [ undef, %24 ], [ %59, %34 ]
  %66 = phi i64 [ 0, %24 ], [ %60, %34 ]
  %67 = phi <2 x i64> [ zeroinitializer, %24 ], [ %58, %34 ]
  %68 = phi <2 x i64> [ zeroinitializer, %24 ], [ %59, %34 ]
  %69 = icmp eq i64 %30, 0
  br i1 %69, label %81, label %70

70:                                               ; preds = %63
  %71 = getelementptr i32, i32* %6, i64 %66
  %72 = getelementptr i32, i32* %71, i64 2
  %73 = bitcast i32* %72 to <2 x i32>*
  %74 = load <2 x i32>, <2 x i32>* %73, align 4
  %75 = zext <2 x i32> %74 to <2 x i64>
  %76 = add <2 x i64> %68, %75
  %77 = bitcast i32* %71 to <2 x i32>*
  %78 = load <2 x i32>, <2 x i32>* %77, align 4
  %79 = zext <2 x i32> %78 to <2 x i64>
  %80 = add <2 x i64> %67, %79
  br label %81

81:                                               ; preds = %63, %70
  %82 = phi <2 x i64> [ %64, %63 ], [ %80, %70 ]
  %83 = phi <2 x i64> [ %65, %63 ], [ %76, %70 ]
  %84 = add <2 x i64> %83, %82
  %85 = shufflevector <2 x i64> %84, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %86 = add <2 x i64> %84, %85
  %87 = extractelement <2 x i64> %86, i32 0
  %88 = icmp eq i64 %22, %25
  br i1 %88, label %100, label %89

89:                                               ; preds = %81, %14
  %90 = phi i64 [ 0, %14 ], [ %87, %81 ]
  %91 = phi i32* [ %6, %14 ], [ %26, %81 ]
  br label %92

92:                                               ; preds = %89, %92
  %93 = phi i64 [ %97, %92 ], [ %90, %89 ]
  %94 = phi i32* [ %98, %92 ], [ %91, %89 ]
  %95 = load i32, i32* %94, align 4
  %96 = zext i32 %95 to i64
  %97 = add i64 %93, %96
  %98 = getelementptr inbounds i32, i32* %94, i64 1
  %99 = icmp eq i32* %98, %9
  br i1 %99, label %100, label %92, !llvm.loop !340

100:                                              ; preds = %92, %81
  %101 = phi i64 [ %87, %81 ], [ %97, %92 ]
  %102 = bitcast i32** %8 to i64*
  %103 = bitcast %"class.std::__1::vector.55"* %1 to i64*
  %104 = sub i64 %11, %7
  %105 = ashr exact i64 %104, 2
  %106 = icmp ugt i64 %105, 1
  br i1 %106, label %107, label %114

107:                                              ; preds = %100
  %108 = bitcast i32** %16 to i64*
  %109 = bitcast %"class.std::__1::vector.43"* %4 to i64*
  %110 = bitcast i32** %17 to i64*
  br label %123

111:                                              ; preds = %203
  %112 = load i64, i64* %109, align 8
  %113 = load i64, i64* %110, align 8
  br label %114

114:                                              ; preds = %111, %100
  %115 = phi i64 [ %113, %111 ], [ 0, %100 ]
  %116 = phi i64 [ %204, %111 ], [ 0, %100 ]
  %117 = phi i64 [ %112, %111 ], [ 0, %100 ]
  %118 = bitcast %"class.std::__1::vector.43"* %0 to i64*
  store i64 %117, i64* %118, align 8
  %119 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %0, i64 0, i32 0, i32 1
  %120 = bitcast i32** %119 to i64*
  store i64 %116, i64* %120, align 8
  %121 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %122 = bitcast i32** %121 to i64*
  store i64 %115, i64* %122, align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %15) #24
  br label %214

123:                                              ; preds = %107, %203
  %124 = phi i64 [ 0, %107 ], [ %204, %203 ]
  %125 = phi i32* [ null, %107 ], [ %205, %203 ]
  %126 = phi i32* [ %6, %107 ], [ %213, %203 ]
  %127 = phi i64 [ 1, %107 ], [ %207, %203 ]
  %128 = phi i64 [ 0, %107 ], [ %127, %203 ]
  %129 = phi i64 [ 0, %107 ], [ %206, %203 ]
  %130 = phi i64 [ 0, %107 ], [ %134, %203 ]
  %131 = getelementptr inbounds i32, i32* %126, i64 %128
  %132 = load i32, i32* %131, align 4
  %133 = zext i32 %132 to i64
  %134 = add i64 %130, %133
  %135 = add i64 %129, 1
  %136 = mul i64 %135, %101
  %137 = udiv i64 %136, %2
  %138 = icmp ugt i64 %134, %137
  br i1 %138, label %139, label %203

139:                                              ; preds = %123
  %140 = trunc i64 %128 to i32
  %141 = load i32*, i32** %17, align 8
  %142 = icmp ult i32* %125, %141
  %143 = ptrtoint i32* %141 to i64
  br i1 %142, label %144, label %147

144:                                              ; preds = %139
  store i32 %140, i32* %125, align 4
  %145 = getelementptr inbounds i32, i32* %125, i64 1
  %146 = ptrtoint i32* %145 to i64
  store i64 %146, i64* %108, align 8
  br label %194

147:                                              ; preds = %139
  %148 = ptrtoint i32* %125 to i64
  %149 = load i64, i64* %109, align 8
  %150 = sub i64 %148, %149
  %151 = ashr exact i64 %150, 2
  %152 = add nsw i64 %151, 1
  %153 = icmp ugt i64 %152, 4611686018427387903
  br i1 %153, label %154, label %156

154:                                              ; preds = %147
  %155 = bitcast %"class.std::__1::vector.43"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %155) #28
  unreachable

156:                                              ; preds = %147
  %157 = sub i64 %143, %149
  %158 = ashr exact i64 %157, 2
  %159 = icmp ult i64 %158, 2305843009213693951
  br i1 %159, label %160, label %168

160:                                              ; preds = %156
  %161 = ashr exact i64 %157, 1
  %162 = icmp ult i64 %161, %152
  %163 = select i1 %162, i64 %152, i64 %161
  %164 = icmp eq i64 %163, 0
  br i1 %164, label %173, label %165

165:                                              ; preds = %160
  %166 = icmp ugt i64 %163, 4611686018427387903
  br i1 %166, label %167, label %168

167:                                              ; preds = %165
  tail call void @abort() #28
  unreachable

168:                                              ; preds = %165, %156
  %169 = phi i64 [ %163, %165 ], [ 4611686018427387903, %156 ]
  %170 = shl i64 %169, 2
  %171 = tail call i8* @_Znwm(i64 %170) #29
  %172 = bitcast i8* %171 to i32*
  br label %173

173:                                              ; preds = %168, %160
  %174 = phi i64 [ %169, %168 ], [ 0, %160 ]
  %175 = phi i32* [ %172, %168 ], [ null, %160 ]
  %176 = getelementptr inbounds i32, i32* %175, i64 %151
  %177 = getelementptr inbounds i32, i32* %175, i64 %174
  %178 = ptrtoint i32* %177 to i64
  store i32 %140, i32* %176, align 4
  %179 = getelementptr inbounds i32, i32* %176, i64 1
  %180 = ptrtoint i32* %179 to i64
  %181 = sub i64 %124, %149
  %182 = ashr exact i64 %181, 2
  %183 = sub nsw i64 0, %182
  %184 = getelementptr inbounds i32, i32* %176, i64 %183
  %185 = ptrtoint i32* %184 to i64
  %186 = icmp sgt i64 %181, 0
  br i1 %186, label %187, label %190

187:                                              ; preds = %173
  %188 = bitcast i32* %184 to i8*
  %189 = inttoptr i64 %149 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %188, i8* align 4 %189, i64 %181, i1 false) #24
  br label %190

190:                                              ; preds = %187, %173
  store i64 %185, i64* %109, align 8
  store i64 %180, i64* %108, align 8
  store i64 %178, i64* %110, align 8
  %191 = icmp eq i64 %149, 0
  br i1 %191, label %194, label %192

192:                                              ; preds = %190
  %193 = inttoptr i64 %149 to i8*
  tail call void @_ZdlPv(i8* %193) #29
  br label %194

194:                                              ; preds = %144, %190, %192
  %195 = phi i64 [ %146, %144 ], [ %180, %190 ], [ %180, %192 ]
  %196 = phi i32* [ %145, %144 ], [ %179, %190 ], [ %179, %192 ]
  br label %197

197:                                              ; preds = %197, %194
  %198 = phi i64 [ %129, %194 ], [ %199, %197 ]
  %199 = add i64 %198, 1
  %200 = mul i64 %199, %101
  %201 = udiv i64 %200, %2
  %202 = icmp ult i64 %134, %201
  br i1 %202, label %203, label %197

203:                                              ; preds = %197, %123
  %204 = phi i64 [ %124, %123 ], [ %195, %197 ]
  %205 = phi i32* [ %125, %123 ], [ %196, %197 ]
  %206 = phi i64 [ %129, %123 ], [ %198, %197 ]
  %207 = add nuw i64 %127, 1
  %208 = load i64, i64* %102, align 8
  %209 = load i64, i64* %103, align 8
  %210 = sub i64 %208, %209
  %211 = ashr exact i64 %210, 2
  %212 = icmp ult i64 %207, %211
  %213 = inttoptr i64 %209 to i32*
  br i1 %212, label %123, label %111

214:                                              ; preds = %114, %12
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #7

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #22

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #23

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN3jxl12_GLOBAL__N_115QuantizeSamplesERKNSt3__16vectorIiNS1_9allocatorIiEEEEm(%"class.std::__1::vector.43"* noalias nocapture sret, %"class.std::__1::vector.43"* nocapture readonly dereferenceable(24), i64) unnamed_addr #8 {
  %4 = alloca %"class.std::__1::vector.55", align 8
  %5 = alloca %"class.std::__1::vector.43", align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %1, i64 0, i32 0, i32 0
  %7 = load i32*, i32** %6, align 8
  %8 = ptrtoint i32* %7 to i64
  %9 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %1, i64 0, i32 0, i32 1
  %10 = load i32*, i32** %9, align 8
  %11 = icmp eq i32* %7, %10
  br i1 %11, label %12, label %14

12:                                               ; preds = %3
  %13 = bitcast %"class.std::__1::vector.43"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 24, i1 false) #24
  br label %246

14:                                               ; preds = %3
  %15 = getelementptr inbounds i32, i32* %7, i64 1
  %16 = icmp eq i32* %15, %10
  br i1 %16, label %78, label %17

17:                                               ; preds = %14
  %18 = getelementptr i32, i32* %10, i64 -2
  %19 = ptrtoint i32* %18 to i64
  %20 = sub i64 %19, %8
  %21 = lshr i64 %20, 2
  %22 = add nuw nsw i64 %21, 1
  %23 = and i64 %22, 3
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %38, label %25

25:                                               ; preds = %17, %25
  %26 = phi i32* [ %35, %25 ], [ %15, %17 ]
  %27 = phi i64 [ %34, %25 ], [ %8, %17 ]
  %28 = phi i64 [ %36, %25 ], [ %23, %17 ]
  %29 = ptrtoint i32* %26 to i64
  %30 = inttoptr i64 %27 to i32*
  %31 = load i32, i32* %26, align 4
  %32 = load i32, i32* %30, align 4
  %33 = icmp slt i32 %31, %32
  %34 = select i1 %33, i64 %29, i64 %27
  %35 = getelementptr inbounds i32, i32* %26, i64 1
  %36 = add i64 %28, -1
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %38, label %25, !llvm.loop !341

38:                                               ; preds = %25, %17
  %39 = phi i64 [ undef, %17 ], [ %34, %25 ]
  %40 = phi i32* [ %15, %17 ], [ %35, %25 ]
  %41 = phi i64 [ %8, %17 ], [ %34, %25 ]
  %42 = icmp ult i64 %20, 12
  br i1 %42, label %75, label %43

43:                                               ; preds = %38, %43
  %44 = phi i32* [ %73, %43 ], [ %40, %38 ]
  %45 = phi i64 [ %72, %43 ], [ %41, %38 ]
  %46 = ptrtoint i32* %44 to i64
  %47 = inttoptr i64 %45 to i32*
  %48 = load i32, i32* %44, align 4
  %49 = load i32, i32* %47, align 4
  %50 = icmp slt i32 %48, %49
  %51 = select i1 %50, i64 %46, i64 %45
  %52 = getelementptr inbounds i32, i32* %44, i64 1
  %53 = ptrtoint i32* %52 to i64
  %54 = inttoptr i64 %51 to i32*
  %55 = load i32, i32* %52, align 4
  %56 = load i32, i32* %54, align 4
  %57 = icmp slt i32 %55, %56
  %58 = select i1 %57, i64 %53, i64 %51
  %59 = getelementptr inbounds i32, i32* %44, i64 2
  %60 = ptrtoint i32* %59 to i64
  %61 = inttoptr i64 %58 to i32*
  %62 = load i32, i32* %59, align 4
  %63 = load i32, i32* %61, align 4
  %64 = icmp slt i32 %62, %63
  %65 = select i1 %64, i64 %60, i64 %58
  %66 = getelementptr inbounds i32, i32* %44, i64 3
  %67 = ptrtoint i32* %66 to i64
  %68 = inttoptr i64 %65 to i32*
  %69 = load i32, i32* %66, align 4
  %70 = load i32, i32* %68, align 4
  %71 = icmp slt i32 %69, %70
  %72 = select i1 %71, i64 %67, i64 %65
  %73 = getelementptr inbounds i32, i32* %44, i64 4
  %74 = icmp eq i32* %73, %10
  br i1 %74, label %75, label %43

75:                                               ; preds = %43, %38
  %76 = phi i64 [ %39, %38 ], [ %72, %43 ]
  %77 = inttoptr i64 %76 to i32*
  br label %78

78:                                               ; preds = %75, %14
  %79 = phi i32* [ %7, %14 ], [ %77, %75 ]
  %80 = load i32, i32* %79, align 4
  %81 = icmp sgt i32 %80, -512
  %82 = select i1 %81, i32 %80, i32 -512
  %83 = icmp slt i32 %82, 512
  %84 = select i1 %83, i32 %82, i32 512
  %85 = bitcast %"class.std::__1::vector.55"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %85) #24
  %86 = getelementptr inbounds %"class.std::__1::vector.55", %"class.std::__1::vector.55"* %4, i64 0, i32 0, i32 0
  %87 = getelementptr inbounds %"class.std::__1::vector.55", %"class.std::__1::vector.55"* %4, i64 0, i32 0, i32 1
  %88 = getelementptr inbounds %"class.std::__1::vector.55", %"class.std::__1::vector.55"* %4, i64 0, i32 0, i32 2, i32 0, i32 0
  %89 = tail call i8* @_Znwm(i64 4100) #29
  %90 = bitcast %"class.std::__1::vector.55"* %4 to i8**
  store i8* %89, i8** %90, align 8
  %91 = getelementptr inbounds i8, i8* %89, i64 4100
  %92 = bitcast i32** %88 to i8**
  store i8* %91, i8** %92, align 8
  %93 = bitcast i32** %87 to i64*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %89, i8 0, i64 4100, i1 false) #24
  %94 = ptrtoint i8* %91 to i64
  store i64 %94, i64* %93, align 8
  %95 = bitcast i8* %89 to i32*
  %96 = getelementptr i32, i32* %10, i64 -1
  %97 = ptrtoint i32* %96 to i64
  %98 = sub i64 %97, %8
  %99 = and i64 %98, 4
  %100 = icmp eq i64 %99, 0
  br i1 %100, label %101, label %113

101:                                              ; preds = %78
  %102 = load i32, i32* %7, align 4
  %103 = icmp sgt i32 %102, -512
  %104 = select i1 %103, i32 %102, i32 -512
  %105 = icmp slt i32 %104, 512
  %106 = select i1 %105, i32 %104, i32 512
  %107 = sub nsw i32 %106, %84
  %108 = zext i32 %107 to i64
  %109 = getelementptr inbounds i32, i32* %95, i64 %108
  %110 = load i32, i32* %109, align 4
  %111 = add i32 %110, 1
  store i32 %111, i32* %109, align 4
  %112 = getelementptr inbounds i32, i32* %7, i64 1
  br label %113

113:                                              ; preds = %101, %78
  %114 = phi i32* [ %7, %78 ], [ %112, %101 ]
  %115 = icmp ult i64 %98, 4
  br i1 %115, label %116, label %194

116:                                              ; preds = %194, %113
  %117 = bitcast %"class.std::__1::vector.43"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %117) #24
  %118 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %5, i64 0, i32 0, i32 0
  %119 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %5, i64 0, i32 0, i32 1
  %120 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %5, i64 0, i32 0, i32 2, i32 0, i32 0
  %121 = bitcast %"class.std::__1::vector.43"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %121, i8 -86, i64 24, i1 false)
  call fastcc void @_ZN3jxl12_GLOBAL__N_117QuantizeHistogramERKNSt3__16vectorIjNS1_9allocatorIjEEEEm(%"class.std::__1::vector.43"* nonnull sret %5, %"class.std::__1::vector.55"* nonnull dereferenceable(24) %4, i64 %2)
  %122 = load i32*, i32** %118, align 8
  %123 = ptrtoint i32* %122 to i64
  %124 = load i32*, i32** %119, align 8
  %125 = icmp eq i32* %122, %124
  br i1 %125, label %192, label %126

126:                                              ; preds = %116
  %127 = getelementptr i32, i32* %124, i64 -1
  %128 = ptrtoint i32* %127 to i64
  %129 = sub i64 %128, %123
  %130 = lshr i64 %129, 2
  %131 = add nuw nsw i64 %130, 1
  %132 = icmp ult i64 %131, 8
  br i1 %132, label %133, label %135

133:                                              ; preds = %190, %126
  %134 = phi i32* [ %122, %126 ], [ %137, %190 ]
  br label %240

135:                                              ; preds = %126
  %136 = and i64 %131, 9223372036854775800
  %137 = getelementptr i32, i32* %122, i64 %136
  %138 = insertelement <4 x i32> undef, i32 %84, i32 0
  %139 = shufflevector <4 x i32> %138, <4 x i32> undef, <4 x i32> zeroinitializer
  %140 = insertelement <4 x i32> undef, i32 %84, i32 0
  %141 = shufflevector <4 x i32> %140, <4 x i32> undef, <4 x i32> zeroinitializer
  %142 = add nsw i64 %136, -8
  %143 = lshr exact i64 %142, 3
  %144 = add nuw nsw i64 %143, 1
  %145 = and i64 %144, 1
  %146 = icmp eq i64 %142, 0
  br i1 %146, label %176, label %147

147:                                              ; preds = %135
  %148 = sub nuw nsw i64 %144, %145
  br label %149

149:                                              ; preds = %149, %147
  %150 = phi i64 [ 0, %147 ], [ %173, %149 ]
  %151 = phi i64 [ %148, %147 ], [ %174, %149 ]
  %152 = getelementptr i32, i32* %122, i64 %150
  %153 = bitcast i32* %152 to <4 x i32>*
  %154 = load <4 x i32>, <4 x i32>* %153, align 4
  %155 = getelementptr i32, i32* %152, i64 4
  %156 = bitcast i32* %155 to <4 x i32>*
  %157 = load <4 x i32>, <4 x i32>* %156, align 4
  %158 = add nsw <4 x i32> %154, %139
  %159 = add nsw <4 x i32> %157, %141
  %160 = bitcast i32* %152 to <4 x i32>*
  store <4 x i32> %158, <4 x i32>* %160, align 4
  %161 = bitcast i32* %155 to <4 x i32>*
  store <4 x i32> %159, <4 x i32>* %161, align 4
  %162 = or i64 %150, 8
  %163 = getelementptr i32, i32* %122, i64 %162
  %164 = bitcast i32* %163 to <4 x i32>*
  %165 = load <4 x i32>, <4 x i32>* %164, align 4
  %166 = getelementptr i32, i32* %163, i64 4
  %167 = bitcast i32* %166 to <4 x i32>*
  %168 = load <4 x i32>, <4 x i32>* %167, align 4
  %169 = add nsw <4 x i32> %165, %139
  %170 = add nsw <4 x i32> %168, %141
  %171 = bitcast i32* %163 to <4 x i32>*
  store <4 x i32> %169, <4 x i32>* %171, align 4
  %172 = bitcast i32* %166 to <4 x i32>*
  store <4 x i32> %170, <4 x i32>* %172, align 4
  %173 = add i64 %150, 16
  %174 = add i64 %151, -2
  %175 = icmp eq i64 %174, 0
  br i1 %175, label %176, label %149, !llvm.loop !342

176:                                              ; preds = %149, %135
  %177 = phi i64 [ 0, %135 ], [ %173, %149 ]
  %178 = icmp eq i64 %145, 0
  br i1 %178, label %190, label %179

179:                                              ; preds = %176
  %180 = getelementptr i32, i32* %122, i64 %177
  %181 = bitcast i32* %180 to <4 x i32>*
  %182 = load <4 x i32>, <4 x i32>* %181, align 4
  %183 = getelementptr i32, i32* %180, i64 4
  %184 = bitcast i32* %183 to <4 x i32>*
  %185 = load <4 x i32>, <4 x i32>* %184, align 4
  %186 = add nsw <4 x i32> %182, %139
  %187 = add nsw <4 x i32> %185, %141
  %188 = bitcast i32* %180 to <4 x i32>*
  store <4 x i32> %186, <4 x i32>* %188, align 4
  %189 = bitcast i32* %183 to <4 x i32>*
  store <4 x i32> %187, <4 x i32>* %189, align 4
  br label %190

190:                                              ; preds = %176, %179
  %191 = icmp eq i64 %131, %136
  br i1 %191, label %219, label %133

192:                                              ; preds = %116
  %193 = ptrtoint i32* %124 to i64
  br label %224

194:                                              ; preds = %113, %194
  %195 = phi i32* [ %217, %194 ], [ %114, %113 ]
  %196 = load i32, i32* %195, align 4
  %197 = icmp sgt i32 %196, -512
  %198 = select i1 %197, i32 %196, i32 -512
  %199 = icmp slt i32 %198, 512
  %200 = select i1 %199, i32 %198, i32 512
  %201 = sub nsw i32 %200, %84
  %202 = zext i32 %201 to i64
  %203 = getelementptr inbounds i32, i32* %95, i64 %202
  %204 = load i32, i32* %203, align 4
  %205 = add i32 %204, 1
  store i32 %205, i32* %203, align 4
  %206 = getelementptr inbounds i32, i32* %195, i64 1
  %207 = load i32, i32* %206, align 4
  %208 = icmp sgt i32 %207, -512
  %209 = select i1 %208, i32 %207, i32 -512
  %210 = icmp slt i32 %209, 512
  %211 = select i1 %210, i32 %209, i32 512
  %212 = sub nsw i32 %211, %84
  %213 = zext i32 %212 to i64
  %214 = getelementptr inbounds i32, i32* %95, i64 %213
  %215 = load i32, i32* %214, align 4
  %216 = add i32 %215, 1
  store i32 %216, i32* %214, align 4
  %217 = getelementptr inbounds i32, i32* %195, i64 2
  %218 = icmp eq i32* %217, %10
  br i1 %218, label %116, label %194

219:                                              ; preds = %240, %190
  %220 = bitcast %"class.std::__1::vector.43"* %5 to i64*
  %221 = load i64, i64* %220, align 8
  %222 = bitcast i32** %119 to i64*
  %223 = load i64, i64* %222, align 8
  br label %224

224:                                              ; preds = %219, %192
  %225 = phi i64 [ %223, %219 ], [ %193, %192 ]
  %226 = phi i64 [ %221, %219 ], [ %123, %192 ]
  %227 = bitcast %"class.std::__1::vector.43"* %0 to i64*
  store i64 %226, i64* %227, align 8
  %228 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %0, i64 0, i32 0, i32 1
  %229 = bitcast i32** %228 to i64*
  store i64 %225, i64* %229, align 8
  %230 = bitcast i32** %120 to i64*
  %231 = load i64, i64* %230, align 8
  %232 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %233 = bitcast i32** %232 to i64*
  store i64 %231, i64* %233, align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %117) #24
  %234 = load i32*, i32** %86, align 8
  %235 = icmp eq i32* %234, null
  br i1 %235, label %239, label %236

236:                                              ; preds = %224
  %237 = ptrtoint i32* %234 to i64
  store i64 %237, i64* %93, align 8
  %238 = bitcast i32* %234 to i8*
  tail call void @_ZdlPv(i8* %238) #29
  br label %239

239:                                              ; preds = %224, %236
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %85) #24
  br label %246

240:                                              ; preds = %133, %240
  %241 = phi i32* [ %244, %240 ], [ %134, %133 ]
  %242 = load i32, i32* %241, align 4
  %243 = add nsw i32 %242, %84
  store i32 %243, i32* %241, align 4
  %244 = getelementptr inbounds i32, i32* %241, i64 1
  %245 = icmp eq i32* %244, %124
  br i1 %245, label %219, label %240, !llvm.loop !343

246:                                              ; preds = %239, %12
  ret void
}

; Function Attrs: nounwind
declare void @llvm.assume(i1) #24

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #25

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEm(%"class.std::__1::vector.55"*, i64) local_unnamed_addr #8 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.55", %"class.std::__1::vector.55"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i32** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.55", %"class.std::__1::vector.55"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i32** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = ashr exact i64 %9, 2
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %29, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to i32*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %27, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds i32, i32* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr i32, i32* %13, i64 %18
  %20 = bitcast i32* %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = add i64 %23, 4
  %25 = and i64 %24, -4
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %17, i8 0, i64 %25, i1 false) #24
  %26 = ptrtoint i32* %16 to i64
  br label %27

27:                                               ; preds = %12, %15
  %28 = phi i64 [ %26, %15 ], [ %8, %12 ]
  store i64 %28, i64* %7, align 8
  br label %84

29:                                               ; preds = %2
  %30 = bitcast %"class.std::__1::vector.55"* %0 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %8, %31
  %33 = ashr exact i64 %32, 2
  %34 = add i64 %33, %1
  %35 = icmp ugt i64 %34, 4611686018427387903
  br i1 %35, label %36, label %38

36:                                               ; preds = %29
  %37 = bitcast %"class.std::__1::vector.55"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %37) #28
  unreachable

38:                                               ; preds = %29
  %39 = sub i64 %5, %31
  %40 = ashr exact i64 %39, 2
  %41 = icmp ult i64 %40, 2305843009213693951
  br i1 %41, label %42, label %50

42:                                               ; preds = %38
  %43 = ashr exact i64 %39, 1
  %44 = icmp ult i64 %43, %34
  %45 = select i1 %44, i64 %34, i64 %43
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %55, label %47

47:                                               ; preds = %42
  %48 = icmp ugt i64 %45, 4611686018427387903
  br i1 %48, label %49, label %50

49:                                               ; preds = %47
  tail call void @abort() #28
  unreachable

50:                                               ; preds = %38, %47
  %51 = phi i64 [ %45, %47 ], [ 4611686018427387903, %38 ]
  %52 = shl i64 %51, 2
  %53 = tail call i8* @_Znwm(i64 %52) #29
  %54 = bitcast i8* %53 to i32*
  br label %55

55:                                               ; preds = %50, %42
  %56 = phi i64 [ %51, %50 ], [ 0, %42 ]
  %57 = phi i32* [ %54, %50 ], [ null, %42 ]
  %58 = getelementptr inbounds i32, i32* %57, i64 %33
  %59 = getelementptr inbounds i32, i32* %57, i64 %56
  %60 = getelementptr inbounds i32, i32* %58, i64 %1
  %61 = bitcast i32* %58 to i8*
  %62 = shl i64 %1, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %61, i8 0, i64 %62, i1 false) #24
  %63 = ptrtoint i32* %59 to i64
  %64 = ptrtoint i32* %60 to i64
  %65 = getelementptr inbounds %"class.std::__1::vector.55", %"class.std::__1::vector.55"* %0, i64 0, i32 0, i32 0
  %66 = load i32*, i32** %65, align 8
  %67 = load i64, i64* %7, align 8
  %68 = ptrtoint i32* %66 to i64
  %69 = sub i64 %67, %68
  %70 = ashr exact i64 %69, 2
  %71 = sub nsw i64 0, %70
  %72 = getelementptr inbounds i32, i32* %58, i64 %71
  %73 = ptrtoint i32* %72 to i64
  %74 = icmp sgt i64 %69, 0
  br i1 %74, label %75, label %79

75:                                               ; preds = %55
  %76 = bitcast i32* %72 to i8*
  %77 = bitcast i32* %66 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %76, i8* align 4 %77, i64 %69, i1 false) #24
  %78 = load i32*, i32** %65, align 8
  br label %79

79:                                               ; preds = %55, %75
  %80 = phi i32* [ %66, %55 ], [ %78, %75 ]
  store i64 %73, i64* %30, align 8
  store i64 %64, i64* %7, align 8
  store i64 %63, i64* %4, align 8
  %81 = icmp eq i32* %80, null
  br i1 %81, label %84, label %82

82:                                               ; preds = %79
  %83 = bitcast i32* %80 to i8*
  tail call void @_ZdlPv(i8* %83) #29
  br label %84

84:                                               ; preds = %82, %79, %27
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEm(%"class.std::__1::vector.43"*, i64) local_unnamed_addr #8 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i32** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i32** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = ashr exact i64 %9, 2
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %29, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to i32*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %27, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds i32, i32* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr i32, i32* %13, i64 %18
  %20 = bitcast i32* %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = add i64 %23, 4
  %25 = and i64 %24, -4
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %17, i8 0, i64 %25, i1 false) #24
  %26 = ptrtoint i32* %16 to i64
  br label %27

27:                                               ; preds = %12, %15
  %28 = phi i64 [ %26, %15 ], [ %8, %12 ]
  store i64 %28, i64* %7, align 8
  br label %84

29:                                               ; preds = %2
  %30 = bitcast %"class.std::__1::vector.43"* %0 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %8, %31
  %33 = ashr exact i64 %32, 2
  %34 = add i64 %33, %1
  %35 = icmp ugt i64 %34, 4611686018427387903
  br i1 %35, label %36, label %38

36:                                               ; preds = %29
  %37 = bitcast %"class.std::__1::vector.43"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %37) #28
  unreachable

38:                                               ; preds = %29
  %39 = sub i64 %5, %31
  %40 = ashr exact i64 %39, 2
  %41 = icmp ult i64 %40, 2305843009213693951
  br i1 %41, label %42, label %50

42:                                               ; preds = %38
  %43 = ashr exact i64 %39, 1
  %44 = icmp ult i64 %43, %34
  %45 = select i1 %44, i64 %34, i64 %43
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %55, label %47

47:                                               ; preds = %42
  %48 = icmp ugt i64 %45, 4611686018427387903
  br i1 %48, label %49, label %50

49:                                               ; preds = %47
  tail call void @abort() #28
  unreachable

50:                                               ; preds = %38, %47
  %51 = phi i64 [ %45, %47 ], [ 4611686018427387903, %38 ]
  %52 = shl i64 %51, 2
  %53 = tail call i8* @_Znwm(i64 %52) #29
  %54 = bitcast i8* %53 to i32*
  br label %55

55:                                               ; preds = %50, %42
  %56 = phi i64 [ %51, %50 ], [ 0, %42 ]
  %57 = phi i32* [ %54, %50 ], [ null, %42 ]
  %58 = getelementptr inbounds i32, i32* %57, i64 %33
  %59 = getelementptr inbounds i32, i32* %57, i64 %56
  %60 = getelementptr inbounds i32, i32* %58, i64 %1
  %61 = bitcast i32* %58 to i8*
  %62 = shl i64 %1, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %61, i8 0, i64 %62, i1 false) #24
  %63 = ptrtoint i32* %59 to i64
  %64 = ptrtoint i32* %60 to i64
  %65 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %0, i64 0, i32 0, i32 0
  %66 = load i32*, i32** %65, align 8
  %67 = load i64, i64* %7, align 8
  %68 = ptrtoint i32* %66 to i64
  %69 = sub i64 %67, %68
  %70 = ashr exact i64 %69, 2
  %71 = sub nsw i64 0, %70
  %72 = getelementptr inbounds i32, i32* %58, i64 %71
  %73 = ptrtoint i32* %72 to i64
  %74 = icmp sgt i64 %69, 0
  br i1 %74, label %75, label %79

75:                                               ; preds = %55
  %76 = bitcast i32* %72 to i8*
  %77 = bitcast i32* %66 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %76, i8* align 4 %77, i64 %69, i1 false) #24
  %78 = load i32*, i32** %65, align 8
  br label %79

79:                                               ; preds = %55, %75
  %80 = phi i32* [ %66, %55 ], [ %78, %75 ]
  store i64 %73, i64* %30, align 8
  store i64 %64, i64* %7, align 8
  store i64 %63, i64* %4, align 8
  %81 = icmp eq i32* %80, null
  br i1 %81, label %84, label %82

82:                                               ; preds = %79
  %83 = bitcast i32* %80 to i8*
  tail call void @_ZdlPv(i8* %83) #29
  br label %84

84:                                               ; preds = %82, %79, %27
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorImNS_9allocatorImEEE8__appendEm(%"class.std::__1::vector.83"*, i64) local_unnamed_addr #8 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.83", %"class.std::__1::vector.83"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i64** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.83", %"class.std::__1::vector.83"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i64** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = ashr exact i64 %9, 3
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %29, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to i64*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %27, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds i64, i64* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr i64, i64* %13, i64 %18
  %20 = bitcast i64* %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = add i64 %23, 8
  %25 = and i64 %24, -8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 %25, i1 false) #24
  %26 = ptrtoint i64* %16 to i64
  br label %27

27:                                               ; preds = %12, %15
  %28 = phi i64 [ %26, %15 ], [ %8, %12 ]
  store i64 %28, i64* %7, align 8
  br label %84

29:                                               ; preds = %2
  %30 = bitcast %"class.std::__1::vector.83"* %0 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %8, %31
  %33 = ashr exact i64 %32, 3
  %34 = add i64 %33, %1
  %35 = icmp ugt i64 %34, 2305843009213693951
  br i1 %35, label %36, label %38

36:                                               ; preds = %29
  %37 = bitcast %"class.std::__1::vector.83"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %37) #28
  unreachable

38:                                               ; preds = %29
  %39 = sub i64 %5, %31
  %40 = ashr exact i64 %39, 3
  %41 = icmp ult i64 %40, 1152921504606846975
  br i1 %41, label %42, label %50

42:                                               ; preds = %38
  %43 = ashr exact i64 %39, 2
  %44 = icmp ult i64 %43, %34
  %45 = select i1 %44, i64 %34, i64 %43
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %55, label %47

47:                                               ; preds = %42
  %48 = icmp ugt i64 %45, 2305843009213693951
  br i1 %48, label %49, label %50

49:                                               ; preds = %47
  tail call void @abort() #28
  unreachable

50:                                               ; preds = %38, %47
  %51 = phi i64 [ %45, %47 ], [ 2305843009213693951, %38 ]
  %52 = shl i64 %51, 3
  %53 = tail call i8* @_Znwm(i64 %52) #29
  %54 = bitcast i8* %53 to i64*
  br label %55

55:                                               ; preds = %50, %42
  %56 = phi i64 [ %51, %50 ], [ 0, %42 ]
  %57 = phi i64* [ %54, %50 ], [ null, %42 ]
  %58 = getelementptr inbounds i64, i64* %57, i64 %33
  %59 = getelementptr inbounds i64, i64* %57, i64 %56
  %60 = getelementptr inbounds i64, i64* %58, i64 %1
  %61 = bitcast i64* %58 to i8*
  %62 = shl i64 %1, 3
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %61, i8 0, i64 %62, i1 false) #24
  %63 = ptrtoint i64* %59 to i64
  %64 = ptrtoint i64* %60 to i64
  %65 = getelementptr inbounds %"class.std::__1::vector.83", %"class.std::__1::vector.83"* %0, i64 0, i32 0, i32 0
  %66 = load i64*, i64** %65, align 8
  %67 = load i64, i64* %7, align 8
  %68 = ptrtoint i64* %66 to i64
  %69 = sub i64 %67, %68
  %70 = ashr exact i64 %69, 3
  %71 = sub nsw i64 0, %70
  %72 = getelementptr inbounds i64, i64* %58, i64 %71
  %73 = ptrtoint i64* %72 to i64
  %74 = icmp sgt i64 %69, 0
  br i1 %74, label %75, label %79

75:                                               ; preds = %55
  %76 = bitcast i64* %72 to i8*
  %77 = bitcast i64* %66 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %76, i8* align 8 %77, i64 %69, i1 false) #24
  %78 = load i64*, i64** %65, align 8
  br label %79

79:                                               ; preds = %55, %75
  %80 = phi i64* [ %66, %55 ], [ %78, %75 ]
  store i64 %73, i64* %30, align 8
  store i64 %64, i64* %7, align 8
  store i64 %63, i64* %4, align 8
  %81 = icmp eq i64* %80, null
  br i1 %81, label %84, label %82

82:                                               ; preds = %79
  %83 = bitcast i64* %80 to i8*
  tail call void @_ZdlPv(i8* %83) #29
  br label %84

84:                                               ; preds = %82, %79, %27
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare <8 x float> @llvm.fma.v8f32(<8 x float>, <8 x float>, <8 x float>) #21

; Function Attrs: nounwind readnone speculatable
declare <16 x float> @llvm.fma.v16f32(<16 x float>, <16 x float>, <16 x float>) #21

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl9PredictorENS_9allocatorIS2_EEE6assignIPKS2_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsISA_E9referenceEEE5valueEvE4typeESA_SA_(%"class.std::__1::vector.62"*, i32*, i32*) local_unnamed_addr #8 comdat align 2 {
  %4 = ptrtoint i32* %2 to i64
  %5 = ptrtoint i32* %1 to i64
  %6 = sub i64 %4, %5
  %7 = ashr exact i64 %6, 2
  %8 = getelementptr inbounds %"class.std::__1::vector.62", %"class.std::__1::vector.62"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %9 = bitcast i32** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %"class.std::__1::vector.62"* %0 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = sub i64 %10, %12
  %14 = ashr exact i64 %13, 2
  %15 = icmp ugt i64 %7, %14
  %16 = inttoptr i64 %12 to i32*
  br i1 %15, label %49, label %17

17:                                               ; preds = %3
  %18 = getelementptr inbounds %"class.std::__1::vector.62", %"class.std::__1::vector.62"* %0, i64 0, i32 0, i32 1
  %19 = bitcast i32** %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = sub i64 %20, %12
  %22 = ashr exact i64 %21, 2
  %23 = icmp ugt i64 %7, %22
  %24 = getelementptr inbounds i32, i32* %1, i64 %22
  %25 = select i1 %23, i32* %24, i32* %2
  %26 = ptrtoint i32* %25 to i64
  %27 = sub i64 %26, %5
  %28 = ashr exact i64 %27, 2
  %29 = icmp eq i64 %27, 0
  br i1 %29, label %33, label %30

30:                                               ; preds = %17
  %31 = inttoptr i64 %12 to i8*
  %32 = bitcast i32* %1 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %31, i8* align 4 %32, i64 %27, i1 false) #24
  br label %33

33:                                               ; preds = %17, %30
  br i1 %23, label %34, label %47

34:                                               ; preds = %33
  %35 = load i64, i64* %19, align 8
  %36 = sub i64 %4, %26
  %37 = icmp sgt i64 %36, 0
  br i1 %37, label %38, label %45

38:                                               ; preds = %34
  %39 = lshr exact i64 %36, 2
  %40 = inttoptr i64 %35 to i8*
  %41 = bitcast i32* %25 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %40, i8* align 4 %41, i64 %36, i1 false) #24
  %42 = inttoptr i64 %35 to i32*
  %43 = getelementptr inbounds i32, i32* %42, i64 %39
  %44 = ptrtoint i32* %43 to i64
  br label %45

45:                                               ; preds = %34, %38
  %46 = phi i64 [ %44, %38 ], [ %35, %34 ]
  store i64 %46, i64* %19, align 8
  br label %90

47:                                               ; preds = %33
  %48 = getelementptr inbounds i32, i32* %16, i64 %28
  store i32* %48, i32** %18, align 8
  br label %90

49:                                               ; preds = %3
  %50 = icmp eq i64 %12, 0
  br i1 %50, label %56, label %51

51:                                               ; preds = %49
  %52 = getelementptr inbounds %"class.std::__1::vector.62", %"class.std::__1::vector.62"* %0, i64 0, i32 0, i32 1
  %53 = bitcast i32** %52 to i64*
  store i64 %12, i64* %53, align 8
  %54 = inttoptr i64 %12 to i8*
  tail call void @_ZdlPv(i8* %54) #29
  %55 = bitcast %"class.std::__1::vector.62"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %55, i8 0, i64 24, i1 false) #24
  br label %56

56:                                               ; preds = %49, %51
  %57 = phi i64 [ %10, %49 ], [ 0, %51 ]
  %58 = icmp ugt i64 %7, 4611686018427387903
  br i1 %58, label %59, label %61

59:                                               ; preds = %56
  %60 = bitcast %"class.std::__1::vector.62"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %60) #28
  unreachable

61:                                               ; preds = %56
  %62 = ashr exact i64 %57, 2
  %63 = icmp ult i64 %62, 2305843009213693951
  br i1 %63, label %64, label %71

64:                                               ; preds = %61
  %65 = ashr exact i64 %57, 1
  %66 = icmp ult i64 %65, %7
  br i1 %66, label %71, label %67

67:                                               ; preds = %64
  %68 = icmp ugt i64 %65, 4611686018427387903
  br i1 %68, label %69, label %71

69:                                               ; preds = %67
  %70 = bitcast %"class.std::__1::vector.62"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %70) #28
  unreachable

71:                                               ; preds = %64, %61, %67
  %72 = phi i64 [ %65, %67 ], [ 4611686018427387903, %61 ], [ %7, %64 ]
  %73 = shl i64 %72, 2
  %74 = tail call i8* @_Znwm(i64 %73) #29
  %75 = bitcast i8* %74 to i32*
  %76 = getelementptr inbounds %"class.std::__1::vector.62", %"class.std::__1::vector.62"* %0, i64 0, i32 0, i32 1
  %77 = bitcast i32** %76 to i8**
  store i8* %74, i8** %77, align 8
  %78 = bitcast %"class.std::__1::vector.62"* %0 to i8**
  store i8* %74, i8** %78, align 8
  %79 = getelementptr inbounds i32, i32* %75, i64 %72
  store i32* %79, i32** %8, align 8
  %80 = bitcast i32** %76 to i64*
  %81 = ptrtoint i8* %74 to i64
  %82 = icmp sgt i64 %6, 0
  br i1 %82, label %83, label %88

83:                                               ; preds = %71
  %84 = lshr exact i64 %6, 2
  %85 = bitcast i32* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %74, i8* align 4 %85, i64 %6, i1 false) #24
  %86 = getelementptr inbounds i32, i32* %75, i64 %84
  %87 = ptrtoint i32* %86 to i64
  br label %88

88:                                               ; preds = %71, %83
  %89 = phi i64 [ %87, %83 ], [ %81, %71 ]
  store i64 %89, i64* %80, align 8
  br label %90

90:                                               ; preds = %45, %47, %88
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorINS0_IN3jxl11TreeSamples13ResidualTokenENS_9allocatorIS3_EEEENS4_IS6_EEE8__appendEm(%"class.std::__1::vector.6"*, i64) local_unnamed_addr #8 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"class.std::__1::vector.8"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %0, i64 0, i32 0, i32 1
  %7 = bitcast %"class.std::__1::vector.8"** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = sdiv exact i64 %9, 24
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %30, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to %"class.std::__1::vector.8"*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %28, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %13, i64 %18, i32 0, i32 0
  %20 = bitcast %"struct.jxl::TreeSamples::ResidualToken"** %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = urem i64 %23, 24
  %25 = add i64 %23, 24
  %26 = sub i64 %25, %24
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 %26, i1 false) #24
  %27 = ptrtoint %"class.std::__1::vector.8"* %16 to i64
  br label %28

28:                                               ; preds = %12, %15
  %29 = phi i64 [ %27, %15 ], [ %8, %12 ]
  store i64 %29, i64* %7, align 8
  br label %124

30:                                               ; preds = %2
  %31 = bitcast %"class.std::__1::vector.6"* %0 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = sub i64 %8, %32
  %34 = sdiv exact i64 %33, 24
  %35 = add i64 %34, %1
  %36 = icmp ugt i64 %35, 768614336404564650
  br i1 %36, label %37, label %39

37:                                               ; preds = %30
  %38 = bitcast %"class.std::__1::vector.6"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %38) #28
  unreachable

39:                                               ; preds = %30
  %40 = sub i64 %5, %32
  %41 = sdiv exact i64 %40, 24
  %42 = icmp ult i64 %41, 384307168202282325
  br i1 %42, label %43, label %48

43:                                               ; preds = %39
  %44 = shl nsw i64 %41, 1
  %45 = icmp ult i64 %44, %35
  %46 = select i1 %45, i64 %35, i64 %44
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %53, label %48

48:                                               ; preds = %39, %43
  %49 = phi i64 [ %46, %43 ], [ 768614336404564650, %39 ]
  %50 = mul i64 %49, 24
  %51 = tail call i8* @_Znwm(i64 %50) #29
  %52 = bitcast i8* %51 to %"class.std::__1::vector.8"*
  br label %53

53:                                               ; preds = %43, %48
  %54 = phi i64 [ %49, %48 ], [ 0, %43 ]
  %55 = phi %"class.std::__1::vector.8"* [ %52, %48 ], [ null, %43 ]
  %56 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %55, i64 %34
  %57 = ptrtoint %"class.std::__1::vector.8"* %56 to i64
  %58 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %55, i64 %54
  %59 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %56, i64 %1
  br label %60

60:                                               ; preds = %53, %60
  %61 = phi %"class.std::__1::vector.8"* [ %64, %60 ], [ %56, %53 ]
  %62 = phi i64 [ %65, %60 ], [ %57, %53 ]
  %63 = inttoptr i64 %62 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %63, i8 0, i64 24, i1 false) #24
  %64 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %61, i64 1
  %65 = ptrtoint %"class.std::__1::vector.8"* %64 to i64
  %66 = icmp eq %"class.std::__1::vector.8"* %59, %64
  br i1 %66, label %67, label %60

67:                                               ; preds = %60
  %68 = ptrtoint %"class.std::__1::vector.8"* %58 to i64
  %69 = ptrtoint %"class.std::__1::vector.8"* %59 to i64
  %70 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %0, i64 0, i32 0, i32 0
  %71 = load %"class.std::__1::vector.8"*, %"class.std::__1::vector.8"** %70, align 8
  %72 = load %"class.std::__1::vector.8"*, %"class.std::__1::vector.8"** %6, align 8
  %73 = icmp eq %"class.std::__1::vector.8"* %72, %71
  br i1 %73, label %74, label %76

74:                                               ; preds = %67
  %75 = ptrtoint %"class.std::__1::vector.8"* %71 to i64
  br label %101

76:                                               ; preds = %67, %76
  %77 = phi %"class.std::__1::vector.8"* [ %79, %76 ], [ %56, %67 ]
  %78 = phi %"class.std::__1::vector.8"* [ %80, %76 ], [ %72, %67 ]
  %79 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %77, i64 -1
  %80 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %78, i64 -1
  %81 = bitcast %"class.std::__1::vector.8"* %79 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %81, i8 0, i64 24, i1 false) #24
  %82 = bitcast %"class.std::__1::vector.8"* %80 to i64*
  %83 = load i64, i64* %82, align 8
  %84 = bitcast %"class.std::__1::vector.8"* %79 to i64*
  store i64 %83, i64* %84, align 8
  %85 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %78, i64 -1, i32 0, i32 1
  %86 = bitcast %"struct.jxl::TreeSamples::ResidualToken"** %85 to i64*
  %87 = load i64, i64* %86, align 8
  %88 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %77, i64 -1, i32 0, i32 1
  %89 = bitcast %"struct.jxl::TreeSamples::ResidualToken"** %88 to i64*
  store i64 %87, i64* %89, align 8
  %90 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %78, i64 -1, i32 0, i32 2, i32 0, i32 0
  %91 = bitcast %"struct.jxl::TreeSamples::ResidualToken"** %90 to i64*
  %92 = load i64, i64* %91, align 8
  %93 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %77, i64 -1, i32 0, i32 2, i32 0, i32 0
  %94 = bitcast %"struct.jxl::TreeSamples::ResidualToken"** %93 to i64*
  store i64 %92, i64* %94, align 8
  %95 = bitcast %"class.std::__1::vector.8"* %80 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %95, i8 0, i64 24, i1 false) #24
  %96 = icmp eq %"class.std::__1::vector.8"* %80, %71
  br i1 %96, label %97, label %76

97:                                               ; preds = %76
  %98 = ptrtoint %"class.std::__1::vector.8"* %79 to i64
  %99 = load i64, i64* %31, align 8
  %100 = load %"class.std::__1::vector.8"*, %"class.std::__1::vector.8"** %6, align 8
  br label %101

101:                                              ; preds = %74, %97
  %102 = phi %"class.std::__1::vector.8"* [ %71, %74 ], [ %100, %97 ]
  %103 = phi i64 [ %57, %74 ], [ %98, %97 ]
  %104 = phi i64 [ %75, %74 ], [ %99, %97 ]
  store i64 %103, i64* %31, align 8
  store i64 %69, i64* %7, align 8
  store i64 %68, i64* %4, align 8
  %105 = inttoptr i64 %104 to %"class.std::__1::vector.8"*
  %106 = icmp eq %"class.std::__1::vector.8"* %102, %105
  br i1 %106, label %120, label %107

107:                                              ; preds = %101, %118
  %108 = phi %"class.std::__1::vector.8"* [ %109, %118 ], [ %102, %101 ]
  %109 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %108, i64 -1
  %110 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %109, i64 0, i32 0, i32 0
  %111 = load %"struct.jxl::TreeSamples::ResidualToken"*, %"struct.jxl::TreeSamples::ResidualToken"** %110, align 8
  %112 = icmp eq %"struct.jxl::TreeSamples::ResidualToken"* %111, null
  br i1 %112, label %118, label %113

113:                                              ; preds = %107
  %114 = ptrtoint %"struct.jxl::TreeSamples::ResidualToken"* %111 to i64
  %115 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %108, i64 -1, i32 0, i32 1
  %116 = bitcast %"struct.jxl::TreeSamples::ResidualToken"** %115 to i64*
  store i64 %114, i64* %116, align 8
  %117 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %111, i64 0, i32 0
  tail call void @_ZdlPv(i8* %117) #29
  br label %118

118:                                              ; preds = %113, %107
  %119 = icmp eq %"class.std::__1::vector.8"* %109, %105
  br i1 %119, label %120, label %107

120:                                              ; preds = %118, %101
  %121 = icmp eq i64 %104, 0
  br i1 %121, label %124, label %122

122:                                              ; preds = %120
  %123 = inttoptr i64 %104 to i8*
  tail call void @_ZdlPv(i8* %123) #29
  br label %124

124:                                              ; preds = %122, %120, %28
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIjNS_9allocatorIjEEE6assignIPjEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIjNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_(%"class.std::__1::vector.55"*, i32*, i32*) local_unnamed_addr #8 comdat align 2 {
  %4 = ptrtoint i32* %2 to i64
  %5 = ptrtoint i32* %1 to i64
  %6 = sub i64 %4, %5
  %7 = ashr exact i64 %6, 2
  %8 = getelementptr inbounds %"class.std::__1::vector.55", %"class.std::__1::vector.55"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %9 = bitcast i32** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %"class.std::__1::vector.55"* %0 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = sub i64 %10, %12
  %14 = ashr exact i64 %13, 2
  %15 = icmp ugt i64 %7, %14
  %16 = inttoptr i64 %12 to i32*
  br i1 %15, label %49, label %17

17:                                               ; preds = %3
  %18 = getelementptr inbounds %"class.std::__1::vector.55", %"class.std::__1::vector.55"* %0, i64 0, i32 0, i32 1
  %19 = bitcast i32** %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = sub i64 %20, %12
  %22 = ashr exact i64 %21, 2
  %23 = icmp ugt i64 %7, %22
  %24 = getelementptr inbounds i32, i32* %1, i64 %22
  %25 = select i1 %23, i32* %24, i32* %2
  %26 = ptrtoint i32* %25 to i64
  %27 = sub i64 %26, %5
  %28 = ashr exact i64 %27, 2
  %29 = icmp eq i64 %27, 0
  br i1 %29, label %33, label %30

30:                                               ; preds = %17
  %31 = inttoptr i64 %12 to i8*
  %32 = bitcast i32* %1 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %31, i8* align 4 %32, i64 %27, i1 false) #24
  br label %33

33:                                               ; preds = %17, %30
  br i1 %23, label %34, label %47

34:                                               ; preds = %33
  %35 = load i64, i64* %19, align 8
  %36 = sub i64 %4, %26
  %37 = icmp sgt i64 %36, 0
  br i1 %37, label %38, label %45

38:                                               ; preds = %34
  %39 = lshr exact i64 %36, 2
  %40 = inttoptr i64 %35 to i8*
  %41 = bitcast i32* %25 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %40, i8* align 4 %41, i64 %36, i1 false) #24
  %42 = inttoptr i64 %35 to i32*
  %43 = getelementptr inbounds i32, i32* %42, i64 %39
  %44 = ptrtoint i32* %43 to i64
  br label %45

45:                                               ; preds = %34, %38
  %46 = phi i64 [ %44, %38 ], [ %35, %34 ]
  store i64 %46, i64* %19, align 8
  br label %90

47:                                               ; preds = %33
  %48 = getelementptr inbounds i32, i32* %16, i64 %28
  store i32* %48, i32** %18, align 8
  br label %90

49:                                               ; preds = %3
  %50 = icmp eq i64 %12, 0
  br i1 %50, label %56, label %51

51:                                               ; preds = %49
  %52 = getelementptr inbounds %"class.std::__1::vector.55", %"class.std::__1::vector.55"* %0, i64 0, i32 0, i32 1
  %53 = bitcast i32** %52 to i64*
  store i64 %12, i64* %53, align 8
  %54 = inttoptr i64 %12 to i8*
  tail call void @_ZdlPv(i8* %54) #29
  %55 = bitcast %"class.std::__1::vector.55"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %55, i8 0, i64 24, i1 false) #24
  br label %56

56:                                               ; preds = %49, %51
  %57 = phi i64 [ %10, %49 ], [ 0, %51 ]
  %58 = icmp ugt i64 %7, 4611686018427387903
  br i1 %58, label %59, label %61

59:                                               ; preds = %56
  %60 = bitcast %"class.std::__1::vector.55"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %60) #28
  unreachable

61:                                               ; preds = %56
  %62 = ashr exact i64 %57, 2
  %63 = icmp ult i64 %62, 2305843009213693951
  br i1 %63, label %64, label %71

64:                                               ; preds = %61
  %65 = ashr exact i64 %57, 1
  %66 = icmp ult i64 %65, %7
  br i1 %66, label %71, label %67

67:                                               ; preds = %64
  %68 = icmp ugt i64 %65, 4611686018427387903
  br i1 %68, label %69, label %71

69:                                               ; preds = %67
  %70 = bitcast %"class.std::__1::vector.55"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %70) #28
  unreachable

71:                                               ; preds = %64, %61, %67
  %72 = phi i64 [ %65, %67 ], [ 4611686018427387903, %61 ], [ %7, %64 ]
  %73 = shl i64 %72, 2
  %74 = tail call i8* @_Znwm(i64 %73) #29
  %75 = bitcast i8* %74 to i32*
  %76 = getelementptr inbounds %"class.std::__1::vector.55", %"class.std::__1::vector.55"* %0, i64 0, i32 0, i32 1
  %77 = bitcast i32** %76 to i8**
  store i8* %74, i8** %77, align 8
  %78 = bitcast %"class.std::__1::vector.55"* %0 to i8**
  store i8* %74, i8** %78, align 8
  %79 = getelementptr inbounds i32, i32* %75, i64 %72
  store i32* %79, i32** %8, align 8
  %80 = bitcast i32** %76 to i64*
  %81 = ptrtoint i8* %74 to i64
  %82 = icmp sgt i64 %6, 0
  br i1 %82, label %83, label %88

83:                                               ; preds = %71
  %84 = lshr exact i64 %6, 2
  %85 = bitcast i32* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %74, i8* align 4 %85, i64 %6, i1 false) #24
  %86 = getelementptr inbounds i32, i32* %75, i64 %84
  %87 = ptrtoint i32* %86 to i64
  br label %88

88:                                               ; preds = %71, %83
  %89 = phi i64 [ %87, %83 ], [ %81, %71 ]
  store i64 %89, i64* %80, align 8
  br label %90

90:                                               ; preds = %45, %47, %88
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIjNS_9allocatorIjEEE6assignIPKjEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIjNS_15iterator_traitsIS8_E9referenceEEE5valueEvE4typeES8_S8_(%"class.std::__1::vector.55"*, i32*, i32*) local_unnamed_addr #8 comdat align 2 {
  %4 = ptrtoint i32* %2 to i64
  %5 = ptrtoint i32* %1 to i64
  %6 = sub i64 %4, %5
  %7 = ashr exact i64 %6, 2
  %8 = getelementptr inbounds %"class.std::__1::vector.55", %"class.std::__1::vector.55"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %9 = bitcast i32** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %"class.std::__1::vector.55"* %0 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = sub i64 %10, %12
  %14 = ashr exact i64 %13, 2
  %15 = icmp ugt i64 %7, %14
  %16 = inttoptr i64 %12 to i32*
  br i1 %15, label %49, label %17

17:                                               ; preds = %3
  %18 = getelementptr inbounds %"class.std::__1::vector.55", %"class.std::__1::vector.55"* %0, i64 0, i32 0, i32 1
  %19 = bitcast i32** %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = sub i64 %20, %12
  %22 = ashr exact i64 %21, 2
  %23 = icmp ugt i64 %7, %22
  %24 = getelementptr inbounds i32, i32* %1, i64 %22
  %25 = select i1 %23, i32* %24, i32* %2
  %26 = ptrtoint i32* %25 to i64
  %27 = sub i64 %26, %5
  %28 = ashr exact i64 %27, 2
  %29 = icmp eq i64 %27, 0
  br i1 %29, label %33, label %30

30:                                               ; preds = %17
  %31 = inttoptr i64 %12 to i8*
  %32 = bitcast i32* %1 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %31, i8* align 4 %32, i64 %27, i1 false) #24
  br label %33

33:                                               ; preds = %17, %30
  br i1 %23, label %34, label %47

34:                                               ; preds = %33
  %35 = load i64, i64* %19, align 8
  %36 = sub i64 %4, %26
  %37 = icmp sgt i64 %36, 0
  br i1 %37, label %38, label %45

38:                                               ; preds = %34
  %39 = lshr exact i64 %36, 2
  %40 = inttoptr i64 %35 to i8*
  %41 = bitcast i32* %25 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %40, i8* align 4 %41, i64 %36, i1 false) #24
  %42 = inttoptr i64 %35 to i32*
  %43 = getelementptr inbounds i32, i32* %42, i64 %39
  %44 = ptrtoint i32* %43 to i64
  br label %45

45:                                               ; preds = %34, %38
  %46 = phi i64 [ %44, %38 ], [ %35, %34 ]
  store i64 %46, i64* %19, align 8
  br label %90

47:                                               ; preds = %33
  %48 = getelementptr inbounds i32, i32* %16, i64 %28
  store i32* %48, i32** %18, align 8
  br label %90

49:                                               ; preds = %3
  %50 = icmp eq i64 %12, 0
  br i1 %50, label %56, label %51

51:                                               ; preds = %49
  %52 = getelementptr inbounds %"class.std::__1::vector.55", %"class.std::__1::vector.55"* %0, i64 0, i32 0, i32 1
  %53 = bitcast i32** %52 to i64*
  store i64 %12, i64* %53, align 8
  %54 = inttoptr i64 %12 to i8*
  tail call void @_ZdlPv(i8* %54) #29
  %55 = bitcast %"class.std::__1::vector.55"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %55, i8 0, i64 24, i1 false) #24
  br label %56

56:                                               ; preds = %49, %51
  %57 = phi i64 [ %10, %49 ], [ 0, %51 ]
  %58 = icmp ugt i64 %7, 4611686018427387903
  br i1 %58, label %59, label %61

59:                                               ; preds = %56
  %60 = bitcast %"class.std::__1::vector.55"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %60) #28
  unreachable

61:                                               ; preds = %56
  %62 = ashr exact i64 %57, 2
  %63 = icmp ult i64 %62, 2305843009213693951
  br i1 %63, label %64, label %71

64:                                               ; preds = %61
  %65 = ashr exact i64 %57, 1
  %66 = icmp ult i64 %65, %7
  br i1 %66, label %71, label %67

67:                                               ; preds = %64
  %68 = icmp ugt i64 %65, 4611686018427387903
  br i1 %68, label %69, label %71

69:                                               ; preds = %67
  %70 = bitcast %"class.std::__1::vector.55"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %70) #28
  unreachable

71:                                               ; preds = %64, %61, %67
  %72 = phi i64 [ %65, %67 ], [ 4611686018427387903, %61 ], [ %7, %64 ]
  %73 = shl i64 %72, 2
  %74 = tail call i8* @_Znwm(i64 %73) #29
  %75 = bitcast i8* %74 to i32*
  %76 = getelementptr inbounds %"class.std::__1::vector.55", %"class.std::__1::vector.55"* %0, i64 0, i32 0, i32 1
  %77 = bitcast i32** %76 to i8**
  store i8* %74, i8** %77, align 8
  %78 = bitcast %"class.std::__1::vector.55"* %0 to i8**
  store i8* %74, i8** %78, align 8
  %79 = getelementptr inbounds i32, i32* %75, i64 %72
  store i32* %79, i32** %8, align 8
  %80 = bitcast i32** %76 to i64*
  %81 = ptrtoint i8* %74 to i64
  %82 = icmp sgt i64 %6, 0
  br i1 %82, label %83, label %88

83:                                               ; preds = %71
  %84 = lshr exact i64 %6, 2
  %85 = bitcast i32* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %74, i8* align 4 %85, i64 %6, i1 false) #24
  %86 = getelementptr inbounds i32, i32* %75, i64 %84
  %87 = ptrtoint i32* %86 to i64
  br label %88

88:                                               ; preds = %71, %83
  %89 = phi i64 [ %87, %83 ], [ %81, %71 ]
  store i64 %89, i64* %80, align 8
  br label %90

90:                                               ; preds = %45, %47, %88
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEE8__appendEm(%"class.std::__1::vector.27"*, i64) local_unnamed_addr #8 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.27", %"class.std::__1::vector.27"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"class.std::__1::vector.29"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.27", %"class.std::__1::vector.27"* %0, i64 0, i32 0, i32 1
  %7 = bitcast %"class.std::__1::vector.29"** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = sdiv exact i64 %9, 24
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %30, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to %"class.std::__1::vector.29"*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %28, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %13, i64 %18, i32 0, i32 0
  %20 = bitcast i8** %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = urem i64 %23, 24
  %25 = add i64 %23, 24
  %26 = sub i64 %25, %24
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 %26, i1 false) #24
  %27 = ptrtoint %"class.std::__1::vector.29"* %16 to i64
  br label %28

28:                                               ; preds = %12, %15
  %29 = phi i64 [ %27, %15 ], [ %8, %12 ]
  store i64 %29, i64* %7, align 8
  br label %123

30:                                               ; preds = %2
  %31 = bitcast %"class.std::__1::vector.27"* %0 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = sub i64 %8, %32
  %34 = sdiv exact i64 %33, 24
  %35 = add i64 %34, %1
  %36 = icmp ugt i64 %35, 768614336404564650
  br i1 %36, label %37, label %39

37:                                               ; preds = %30
  %38 = bitcast %"class.std::__1::vector.27"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %38) #28
  unreachable

39:                                               ; preds = %30
  %40 = sub i64 %5, %32
  %41 = sdiv exact i64 %40, 24
  %42 = icmp ult i64 %41, 384307168202282325
  br i1 %42, label %43, label %48

43:                                               ; preds = %39
  %44 = shl nsw i64 %41, 1
  %45 = icmp ult i64 %44, %35
  %46 = select i1 %45, i64 %35, i64 %44
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %53, label %48

48:                                               ; preds = %39, %43
  %49 = phi i64 [ %46, %43 ], [ 768614336404564650, %39 ]
  %50 = mul i64 %49, 24
  %51 = tail call i8* @_Znwm(i64 %50) #29
  %52 = bitcast i8* %51 to %"class.std::__1::vector.29"*
  br label %53

53:                                               ; preds = %43, %48
  %54 = phi i64 [ %49, %48 ], [ 0, %43 ]
  %55 = phi %"class.std::__1::vector.29"* [ %52, %48 ], [ null, %43 ]
  %56 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %55, i64 %34
  %57 = ptrtoint %"class.std::__1::vector.29"* %56 to i64
  %58 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %55, i64 %54
  %59 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %56, i64 %1
  br label %60

60:                                               ; preds = %53, %60
  %61 = phi %"class.std::__1::vector.29"* [ %64, %60 ], [ %56, %53 ]
  %62 = phi i64 [ %65, %60 ], [ %57, %53 ]
  %63 = inttoptr i64 %62 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %63, i8 0, i64 24, i1 false) #24
  %64 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %61, i64 1
  %65 = ptrtoint %"class.std::__1::vector.29"* %64 to i64
  %66 = icmp eq %"class.std::__1::vector.29"* %59, %64
  br i1 %66, label %67, label %60

67:                                               ; preds = %60
  %68 = ptrtoint %"class.std::__1::vector.29"* %58 to i64
  %69 = ptrtoint %"class.std::__1::vector.29"* %59 to i64
  %70 = getelementptr inbounds %"class.std::__1::vector.27", %"class.std::__1::vector.27"* %0, i64 0, i32 0, i32 0
  %71 = load %"class.std::__1::vector.29"*, %"class.std::__1::vector.29"** %70, align 8
  %72 = load %"class.std::__1::vector.29"*, %"class.std::__1::vector.29"** %6, align 8
  %73 = icmp eq %"class.std::__1::vector.29"* %72, %71
  br i1 %73, label %74, label %76

74:                                               ; preds = %67
  %75 = ptrtoint %"class.std::__1::vector.29"* %71 to i64
  br label %101

76:                                               ; preds = %67, %76
  %77 = phi %"class.std::__1::vector.29"* [ %79, %76 ], [ %56, %67 ]
  %78 = phi %"class.std::__1::vector.29"* [ %80, %76 ], [ %72, %67 ]
  %79 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %77, i64 -1
  %80 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %78, i64 -1
  %81 = bitcast %"class.std::__1::vector.29"* %79 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %81, i8 0, i64 24, i1 false) #24
  %82 = bitcast %"class.std::__1::vector.29"* %80 to i64*
  %83 = load i64, i64* %82, align 8
  %84 = bitcast %"class.std::__1::vector.29"* %79 to i64*
  store i64 %83, i64* %84, align 8
  %85 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %78, i64 -1, i32 0, i32 1
  %86 = bitcast i8** %85 to i64*
  %87 = load i64, i64* %86, align 8
  %88 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %77, i64 -1, i32 0, i32 1
  %89 = bitcast i8** %88 to i64*
  store i64 %87, i64* %89, align 8
  %90 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %78, i64 -1, i32 0, i32 2, i32 0, i32 0
  %91 = bitcast i8** %90 to i64*
  %92 = load i64, i64* %91, align 8
  %93 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %77, i64 -1, i32 0, i32 2, i32 0, i32 0
  %94 = bitcast i8** %93 to i64*
  store i64 %92, i64* %94, align 8
  %95 = bitcast %"class.std::__1::vector.29"* %80 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %95, i8 0, i64 24, i1 false) #24
  %96 = icmp eq %"class.std::__1::vector.29"* %80, %71
  br i1 %96, label %97, label %76

97:                                               ; preds = %76
  %98 = ptrtoint %"class.std::__1::vector.29"* %79 to i64
  %99 = load i64, i64* %31, align 8
  %100 = load %"class.std::__1::vector.29"*, %"class.std::__1::vector.29"** %6, align 8
  br label %101

101:                                              ; preds = %74, %97
  %102 = phi %"class.std::__1::vector.29"* [ %71, %74 ], [ %100, %97 ]
  %103 = phi i64 [ %57, %74 ], [ %98, %97 ]
  %104 = phi i64 [ %75, %74 ], [ %99, %97 ]
  store i64 %103, i64* %31, align 8
  store i64 %69, i64* %7, align 8
  store i64 %68, i64* %4, align 8
  %105 = inttoptr i64 %104 to %"class.std::__1::vector.29"*
  %106 = icmp eq %"class.std::__1::vector.29"* %102, %105
  br i1 %106, label %119, label %107

107:                                              ; preds = %101, %117
  %108 = phi %"class.std::__1::vector.29"* [ %109, %117 ], [ %102, %101 ]
  %109 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %108, i64 -1
  %110 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %109, i64 0, i32 0, i32 0
  %111 = load i8*, i8** %110, align 8
  %112 = icmp eq i8* %111, null
  br i1 %112, label %117, label %113

113:                                              ; preds = %107
  %114 = ptrtoint i8* %111 to i64
  %115 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %108, i64 -1, i32 0, i32 1
  %116 = bitcast i8** %115 to i64*
  store i64 %114, i64* %116, align 8
  tail call void @_ZdlPv(i8* nonnull %111) #29
  br label %117

117:                                              ; preds = %113, %107
  %118 = icmp eq %"class.std::__1::vector.29"* %109, %105
  br i1 %118, label %119, label %107

119:                                              ; preds = %117, %101
  %120 = icmp eq i64 %104, 0
  br i1 %120, label %123, label %121

121:                                              ; preds = %119
  %122 = inttoptr i64 %104 to i8*
  tail call void @_ZdlPv(i8* %122) #29
  br label %123

123:                                              ; preds = %121, %119, %28
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEmRKj(%"class.std::__1::vector.55"*, i64, i32* dereferenceable(4)) local_unnamed_addr #8 comdat align 2 {
  %4 = bitcast i32* %2 to i8*
  %5 = bitcast i32* %2 to i8*
  %6 = getelementptr inbounds %"class.std::__1::vector.55", %"class.std::__1::vector.55"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %7 = bitcast i32** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %"class.std::__1::vector.55", %"class.std::__1::vector.55"* %0, i64 0, i32 0, i32 1
  %10 = bitcast i32** %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = sub i64 %8, %11
  %13 = ashr exact i64 %12, 2
  %14 = icmp ult i64 %13, %1
  br i1 %14, label %130, label %15

15:                                               ; preds = %3
  %16 = inttoptr i64 %11 to i32*
  %17 = inttoptr i64 %11 to i8*
  %18 = getelementptr inbounds i32, i32* %16, i64 %1
  %19 = icmp eq i64 %1, 0
  br i1 %19, label %128, label %20

20:                                               ; preds = %15
  %21 = shl nsw i64 %1, 2
  %22 = add i64 %21, -4
  %23 = lshr exact i64 %22, 2
  %24 = add nuw nsw i64 %23, 1
  %25 = icmp ult i64 %24, 8
  br i1 %25, label %26, label %47

26:                                               ; preds = %105, %47, %20
  %27 = phi i32* [ %16, %47 ], [ %16, %20 ], [ %59, %105 ]
  %28 = ptrtoint i32* %27 to i64
  %29 = add i64 %1, -1
  %30 = getelementptr i32, i32* %16, i64 %29
  %31 = ptrtoint i32* %30 to i64
  %32 = sub i64 %31, %28
  %33 = lshr i64 %32, 2
  %34 = add nuw nsw i64 %33, 1
  %35 = and i64 %34, 7
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %44, label %37

37:                                               ; preds = %26, %37
  %38 = phi i32* [ %41, %37 ], [ %27, %26 ]
  %39 = phi i64 [ %42, %37 ], [ %35, %26 ]
  %40 = load i32, i32* %2, align 4
  store i32 %40, i32* %38, align 4
  %41 = getelementptr inbounds i32, i32* %38, i64 1
  %42 = add i64 %39, -1
  %43 = icmp eq i64 %42, 0
  br i1 %43, label %44, label %37, !llvm.loop !344

44:                                               ; preds = %37, %26
  %45 = phi i32* [ %27, %26 ], [ %41, %37 ]
  %46 = icmp ult i64 %32, 28
  br i1 %46, label %107, label %109

47:                                               ; preds = %20
  %48 = shl nsw i64 %1, 2
  %49 = add i64 %48, -4
  %50 = lshr exact i64 %49, 2
  %51 = add nuw nsw i64 %50, 1
  %52 = getelementptr i32, i32* %16, i64 %51
  %53 = getelementptr i8, i8* %5, i64 1
  %54 = icmp ugt i8* %53, %17
  %55 = icmp ugt i32* %52, %2
  %56 = and i1 %54, %55
  br i1 %56, label %26, label %57

57:                                               ; preds = %47
  %58 = and i64 %24, 9223372036854775800
  %59 = getelementptr i32, i32* %16, i64 %58
  %60 = add nsw i64 %58, -8
  %61 = lshr exact i64 %60, 3
  %62 = add nuw nsw i64 %61, 1
  %63 = and i64 %62, 1
  %64 = icmp eq i64 %60, 0
  br i1 %64, label %92, label %65

65:                                               ; preds = %57
  %66 = sub nuw nsw i64 %62, %63
  %67 = load i32, i32* %2, align 4, !alias.scope !345
  %68 = insertelement <4 x i32> undef, i32 %67, i32 0
  %69 = shufflevector <4 x i32> %68, <4 x i32> undef, <4 x i32> zeroinitializer
  %70 = insertelement <4 x i32> undef, i32 %67, i32 0
  %71 = shufflevector <4 x i32> %70, <4 x i32> undef, <4 x i32> zeroinitializer
  %72 = load i32, i32* %2, align 4, !alias.scope !345
  %73 = insertelement <4 x i32> undef, i32 %72, i32 0
  %74 = shufflevector <4 x i32> %73, <4 x i32> undef, <4 x i32> zeroinitializer
  %75 = insertelement <4 x i32> undef, i32 %72, i32 0
  %76 = shufflevector <4 x i32> %75, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %77

77:                                               ; preds = %77, %65
  %78 = phi i64 [ 0, %65 ], [ %89, %77 ]
  %79 = phi i64 [ %66, %65 ], [ %90, %77 ]
  %80 = getelementptr i32, i32* %16, i64 %78
  %81 = bitcast i32* %80 to <4 x i32>*
  store <4 x i32> %69, <4 x i32>* %81, align 4, !alias.scope !348, !noalias !345
  %82 = getelementptr i32, i32* %80, i64 4
  %83 = bitcast i32* %82 to <4 x i32>*
  store <4 x i32> %71, <4 x i32>* %83, align 4, !alias.scope !348, !noalias !345
  %84 = or i64 %78, 8
  %85 = getelementptr i32, i32* %16, i64 %84
  %86 = bitcast i32* %85 to <4 x i32>*
  store <4 x i32> %74, <4 x i32>* %86, align 4, !alias.scope !348, !noalias !345
  %87 = getelementptr i32, i32* %85, i64 4
  %88 = bitcast i32* %87 to <4 x i32>*
  store <4 x i32> %76, <4 x i32>* %88, align 4, !alias.scope !348, !noalias !345
  %89 = add i64 %78, 16
  %90 = add i64 %79, -2
  %91 = icmp eq i64 %90, 0
  br i1 %91, label %92, label %77, !llvm.loop !350

92:                                               ; preds = %77, %57
  %93 = phi i64 [ 0, %57 ], [ %89, %77 ]
  %94 = icmp eq i64 %63, 0
  br i1 %94, label %105, label %95

95:                                               ; preds = %92
  %96 = getelementptr i32, i32* %16, i64 %93
  %97 = load i32, i32* %2, align 4, !alias.scope !345
  %98 = insertelement <4 x i32> undef, i32 %97, i32 0
  %99 = shufflevector <4 x i32> %98, <4 x i32> undef, <4 x i32> zeroinitializer
  %100 = insertelement <4 x i32> undef, i32 %97, i32 0
  %101 = shufflevector <4 x i32> %100, <4 x i32> undef, <4 x i32> zeroinitializer
  %102 = bitcast i32* %96 to <4 x i32>*
  store <4 x i32> %99, <4 x i32>* %102, align 4, !alias.scope !348, !noalias !345
  %103 = getelementptr i32, i32* %96, i64 4
  %104 = bitcast i32* %103 to <4 x i32>*
  store <4 x i32> %101, <4 x i32>* %104, align 4, !alias.scope !348, !noalias !345
  br label %105

105:                                              ; preds = %92, %95
  %106 = icmp eq i64 %24, %58
  br i1 %106, label %107, label %26

107:                                              ; preds = %44, %109, %105
  %108 = ptrtoint i32* %18 to i64
  br label %128

109:                                              ; preds = %44, %109
  %110 = phi i32* [ %126, %109 ], [ %45, %44 ]
  %111 = load i32, i32* %2, align 4
  store i32 %111, i32* %110, align 4
  %112 = getelementptr inbounds i32, i32* %110, i64 1
  %113 = load i32, i32* %2, align 4
  store i32 %113, i32* %112, align 4
  %114 = getelementptr inbounds i32, i32* %110, i64 2
  %115 = load i32, i32* %2, align 4
  store i32 %115, i32* %114, align 4
  %116 = getelementptr inbounds i32, i32* %110, i64 3
  %117 = load i32, i32* %2, align 4
  store i32 %117, i32* %116, align 4
  %118 = getelementptr inbounds i32, i32* %110, i64 4
  %119 = load i32, i32* %2, align 4
  store i32 %119, i32* %118, align 4
  %120 = getelementptr inbounds i32, i32* %110, i64 5
  %121 = load i32, i32* %2, align 4
  store i32 %121, i32* %120, align 4
  %122 = getelementptr inbounds i32, i32* %110, i64 6
  %123 = load i32, i32* %2, align 4
  store i32 %123, i32* %122, align 4
  %124 = getelementptr inbounds i32, i32* %110, i64 7
  %125 = load i32, i32* %2, align 4
  store i32 %125, i32* %124, align 4
  %126 = getelementptr inbounds i32, i32* %110, i64 8
  %127 = icmp eq i32* %126, %18
  br i1 %127, label %107, label %109, !llvm.loop !351

128:                                              ; preds = %15, %107
  %129 = phi i64 [ %108, %107 ], [ %11, %15 ]
  store i64 %129, i64* %10, align 8
  br label %292

130:                                              ; preds = %3
  %131 = bitcast %"class.std::__1::vector.55"* %0 to i64*
  %132 = load i64, i64* %131, align 8
  %133 = sub i64 %11, %132
  %134 = ashr exact i64 %133, 2
  %135 = add i64 %134, %1
  %136 = icmp ugt i64 %135, 4611686018427387903
  br i1 %136, label %137, label %139

137:                                              ; preds = %130
  %138 = bitcast %"class.std::__1::vector.55"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %138) #28
  unreachable

139:                                              ; preds = %130
  %140 = sub i64 %8, %132
  %141 = ashr exact i64 %140, 2
  %142 = icmp ult i64 %141, 2305843009213693951
  br i1 %142, label %143, label %151

143:                                              ; preds = %139
  %144 = ashr exact i64 %140, 1
  %145 = icmp ult i64 %144, %135
  %146 = select i1 %145, i64 %135, i64 %144
  %147 = icmp eq i64 %146, 0
  br i1 %147, label %156, label %148

148:                                              ; preds = %143
  %149 = icmp ugt i64 %146, 4611686018427387903
  br i1 %149, label %150, label %151

150:                                              ; preds = %148
  tail call void @abort() #28
  unreachable

151:                                              ; preds = %139, %148
  %152 = phi i64 [ %146, %148 ], [ 4611686018427387903, %139 ]
  %153 = shl i64 %152, 2
  %154 = tail call i8* @_Znwm(i64 %153) #29
  %155 = bitcast i8* %154 to i32*
  br label %156

156:                                              ; preds = %143, %151
  %157 = phi i64 [ %152, %151 ], [ 0, %143 ]
  %158 = phi i32* [ %155, %151 ], [ null, %143 ]
  %159 = getelementptr inbounds i32, i32* %158, i64 %134
  %160 = getelementptr inbounds i32, i32* %158, i64 %157
  %161 = getelementptr inbounds i32, i32* %159, i64 %1
  %162 = shl nsw i64 %1, 2
  %163 = add i64 %162, -4
  %164 = lshr exact i64 %163, 2
  %165 = add nuw nsw i64 %164, 1
  %166 = icmp ult i64 %165, 8
  br i1 %166, label %229, label %167

167:                                              ; preds = %156
  %168 = bitcast i32* %159 to i8*
  %169 = shl nsw i64 %1, 2
  %170 = add i64 %169, -4
  %171 = lshr exact i64 %170, 2
  %172 = add nsw i64 %134, %171
  %173 = add i64 %172, 1
  %174 = getelementptr i32, i32* %158, i64 %173
  %175 = getelementptr i8, i8* %4, i64 1
  %176 = icmp ugt i8* %175, %168
  %177 = icmp ugt i32* %174, %2
  %178 = and i1 %176, %177
  br i1 %178, label %229, label %179

179:                                              ; preds = %167
  %180 = and i64 %165, 9223372036854775800
  %181 = getelementptr i32, i32* %159, i64 %180
  %182 = add nsw i64 %180, -8
  %183 = lshr exact i64 %182, 3
  %184 = add nuw nsw i64 %183, 1
  %185 = and i64 %184, 1
  %186 = icmp eq i64 %182, 0
  br i1 %186, label %214, label %187

187:                                              ; preds = %179
  %188 = sub nuw nsw i64 %184, %185
  %189 = load i32, i32* %2, align 4, !alias.scope !352
  %190 = insertelement <4 x i32> undef, i32 %189, i32 0
  %191 = shufflevector <4 x i32> %190, <4 x i32> undef, <4 x i32> zeroinitializer
  %192 = insertelement <4 x i32> undef, i32 %189, i32 0
  %193 = shufflevector <4 x i32> %192, <4 x i32> undef, <4 x i32> zeroinitializer
  %194 = load i32, i32* %2, align 4, !alias.scope !352
  %195 = insertelement <4 x i32> undef, i32 %194, i32 0
  %196 = shufflevector <4 x i32> %195, <4 x i32> undef, <4 x i32> zeroinitializer
  %197 = insertelement <4 x i32> undef, i32 %194, i32 0
  %198 = shufflevector <4 x i32> %197, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %199

199:                                              ; preds = %199, %187
  %200 = phi i64 [ 0, %187 ], [ %211, %199 ]
  %201 = phi i64 [ %188, %187 ], [ %212, %199 ]
  %202 = getelementptr i32, i32* %159, i64 %200
  %203 = bitcast i32* %202 to <4 x i32>*
  store <4 x i32> %191, <4 x i32>* %203, align 4, !alias.scope !355, !noalias !352
  %204 = getelementptr i32, i32* %202, i64 4
  %205 = bitcast i32* %204 to <4 x i32>*
  store <4 x i32> %193, <4 x i32>* %205, align 4, !alias.scope !355, !noalias !352
  %206 = or i64 %200, 8
  %207 = getelementptr i32, i32* %159, i64 %206
  %208 = bitcast i32* %207 to <4 x i32>*
  store <4 x i32> %196, <4 x i32>* %208, align 4, !alias.scope !355, !noalias !352
  %209 = getelementptr i32, i32* %207, i64 4
  %210 = bitcast i32* %209 to <4 x i32>*
  store <4 x i32> %198, <4 x i32>* %210, align 4, !alias.scope !355, !noalias !352
  %211 = add i64 %200, 16
  %212 = add i64 %201, -2
  %213 = icmp eq i64 %212, 0
  br i1 %213, label %214, label %199, !llvm.loop !357

214:                                              ; preds = %199, %179
  %215 = phi i64 [ 0, %179 ], [ %211, %199 ]
  %216 = icmp eq i64 %185, 0
  br i1 %216, label %227, label %217

217:                                              ; preds = %214
  %218 = getelementptr i32, i32* %159, i64 %215
  %219 = load i32, i32* %2, align 4, !alias.scope !352
  %220 = insertelement <4 x i32> undef, i32 %219, i32 0
  %221 = shufflevector <4 x i32> %220, <4 x i32> undef, <4 x i32> zeroinitializer
  %222 = insertelement <4 x i32> undef, i32 %219, i32 0
  %223 = shufflevector <4 x i32> %222, <4 x i32> undef, <4 x i32> zeroinitializer
  %224 = bitcast i32* %218 to <4 x i32>*
  store <4 x i32> %221, <4 x i32>* %224, align 4, !alias.scope !355, !noalias !352
  %225 = getelementptr i32, i32* %218, i64 4
  %226 = bitcast i32* %225 to <4 x i32>*
  store <4 x i32> %223, <4 x i32>* %226, align 4, !alias.scope !355, !noalias !352
  br label %227

227:                                              ; preds = %214, %217
  %228 = icmp eq i64 %165, %180
  br i1 %228, label %270, label %229

229:                                              ; preds = %227, %167, %156
  %230 = phi i32* [ %159, %167 ], [ %159, %156 ], [ %181, %227 ]
  %231 = ptrtoint i32* %230 to i64
  %232 = add i64 %134, %1
  %233 = add i64 %232, -1
  %234 = getelementptr i32, i32* %158, i64 %233
  %235 = ptrtoint i32* %234 to i64
  %236 = sub i64 %235, %231
  %237 = lshr i64 %236, 2
  %238 = add nuw nsw i64 %237, 1
  %239 = and i64 %238, 7
  %240 = icmp eq i64 %239, 0
  br i1 %240, label %248, label %241

241:                                              ; preds = %229, %241
  %242 = phi i32* [ %245, %241 ], [ %230, %229 ]
  %243 = phi i64 [ %246, %241 ], [ %239, %229 ]
  %244 = load i32, i32* %2, align 4
  store i32 %244, i32* %242, align 4
  %245 = getelementptr inbounds i32, i32* %242, i64 1
  %246 = add i64 %243, -1
  %247 = icmp eq i64 %246, 0
  br i1 %247, label %248, label %241, !llvm.loop !358

248:                                              ; preds = %241, %229
  %249 = phi i32* [ %230, %229 ], [ %245, %241 ]
  %250 = icmp ult i64 %236, 28
  br i1 %250, label %270, label %251

251:                                              ; preds = %248, %251
  %252 = phi i32* [ %268, %251 ], [ %249, %248 ]
  %253 = load i32, i32* %2, align 4
  store i32 %253, i32* %252, align 4
  %254 = getelementptr inbounds i32, i32* %252, i64 1
  %255 = load i32, i32* %2, align 4
  store i32 %255, i32* %254, align 4
  %256 = getelementptr inbounds i32, i32* %252, i64 2
  %257 = load i32, i32* %2, align 4
  store i32 %257, i32* %256, align 4
  %258 = getelementptr inbounds i32, i32* %252, i64 3
  %259 = load i32, i32* %2, align 4
  store i32 %259, i32* %258, align 4
  %260 = getelementptr inbounds i32, i32* %252, i64 4
  %261 = load i32, i32* %2, align 4
  store i32 %261, i32* %260, align 4
  %262 = getelementptr inbounds i32, i32* %252, i64 5
  %263 = load i32, i32* %2, align 4
  store i32 %263, i32* %262, align 4
  %264 = getelementptr inbounds i32, i32* %252, i64 6
  %265 = load i32, i32* %2, align 4
  store i32 %265, i32* %264, align 4
  %266 = getelementptr inbounds i32, i32* %252, i64 7
  %267 = load i32, i32* %2, align 4
  store i32 %267, i32* %266, align 4
  %268 = getelementptr inbounds i32, i32* %252, i64 8
  %269 = icmp eq i32* %161, %268
  br i1 %269, label %270, label %251, !llvm.loop !359

270:                                              ; preds = %248, %251, %227
  %271 = ptrtoint i32* %160 to i64
  %272 = ptrtoint i32* %161 to i64
  %273 = getelementptr inbounds %"class.std::__1::vector.55", %"class.std::__1::vector.55"* %0, i64 0, i32 0, i32 0
  %274 = load i32*, i32** %273, align 8
  %275 = load i64, i64* %10, align 8
  %276 = ptrtoint i32* %274 to i64
  %277 = sub i64 %275, %276
  %278 = ashr exact i64 %277, 2
  %279 = sub nsw i64 0, %278
  %280 = getelementptr inbounds i32, i32* %159, i64 %279
  %281 = ptrtoint i32* %280 to i64
  %282 = icmp sgt i64 %277, 0
  br i1 %282, label %283, label %287

283:                                              ; preds = %270
  %284 = bitcast i32* %280 to i8*
  %285 = bitcast i32* %274 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %284, i8* align 4 %285, i64 %277, i1 false) #24
  %286 = load i32*, i32** %273, align 8
  br label %287

287:                                              ; preds = %270, %283
  %288 = phi i32* [ %274, %270 ], [ %286, %283 ]
  store i64 %281, i64* %131, align 8
  store i64 %272, i64* %10, align 8
  store i64 %271, i64* %7, align 8
  %289 = icmp eq i32* %288, null
  br i1 %289, label %292, label %290

290:                                              ; preds = %287
  %291 = bitcast i32* %288 to i8*
  tail call void @_ZdlPv(i8* %291) #29
  br label %292

292:                                              ; preds = %290, %287, %128
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.ctlz.i64(i64, i1 immarg) #21

declare void @_ZNSt3__16__sortIRNS_6__lessIiiEEPiEEvT0_S5_T_(i32*, i32*, %"struct.std::__1::__less"* dereferenceable(1)) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorINS0_IiNS_9allocatorIiEEEENS1_IS3_EEE8__appendEm(%"class.std::__1::vector.41"*, i64) local_unnamed_addr #8 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.41", %"class.std::__1::vector.41"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"class.std::__1::vector.43"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.41", %"class.std::__1::vector.41"* %0, i64 0, i32 0, i32 1
  %7 = bitcast %"class.std::__1::vector.43"** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = sdiv exact i64 %9, 24
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %30, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to %"class.std::__1::vector.43"*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %28, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %13, i64 %18, i32 0, i32 0
  %20 = bitcast i32** %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = urem i64 %23, 24
  %25 = add i64 %23, 24
  %26 = sub i64 %25, %24
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 %26, i1 false) #24
  %27 = ptrtoint %"class.std::__1::vector.43"* %16 to i64
  br label %28

28:                                               ; preds = %12, %15
  %29 = phi i64 [ %27, %15 ], [ %8, %12 ]
  store i64 %29, i64* %7, align 8
  br label %124

30:                                               ; preds = %2
  %31 = bitcast %"class.std::__1::vector.41"* %0 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = sub i64 %8, %32
  %34 = sdiv exact i64 %33, 24
  %35 = add i64 %34, %1
  %36 = icmp ugt i64 %35, 768614336404564650
  br i1 %36, label %37, label %39

37:                                               ; preds = %30
  %38 = bitcast %"class.std::__1::vector.41"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %38) #28
  unreachable

39:                                               ; preds = %30
  %40 = sub i64 %5, %32
  %41 = sdiv exact i64 %40, 24
  %42 = icmp ult i64 %41, 384307168202282325
  br i1 %42, label %43, label %48

43:                                               ; preds = %39
  %44 = shl nsw i64 %41, 1
  %45 = icmp ult i64 %44, %35
  %46 = select i1 %45, i64 %35, i64 %44
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %53, label %48

48:                                               ; preds = %39, %43
  %49 = phi i64 [ %46, %43 ], [ 768614336404564650, %39 ]
  %50 = mul i64 %49, 24
  %51 = tail call i8* @_Znwm(i64 %50) #29
  %52 = bitcast i8* %51 to %"class.std::__1::vector.43"*
  br label %53

53:                                               ; preds = %43, %48
  %54 = phi i64 [ %49, %48 ], [ 0, %43 ]
  %55 = phi %"class.std::__1::vector.43"* [ %52, %48 ], [ null, %43 ]
  %56 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %55, i64 %34
  %57 = ptrtoint %"class.std::__1::vector.43"* %56 to i64
  %58 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %55, i64 %54
  %59 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %56, i64 %1
  br label %60

60:                                               ; preds = %53, %60
  %61 = phi %"class.std::__1::vector.43"* [ %64, %60 ], [ %56, %53 ]
  %62 = phi i64 [ %65, %60 ], [ %57, %53 ]
  %63 = inttoptr i64 %62 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %63, i8 0, i64 24, i1 false) #24
  %64 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %61, i64 1
  %65 = ptrtoint %"class.std::__1::vector.43"* %64 to i64
  %66 = icmp eq %"class.std::__1::vector.43"* %59, %64
  br i1 %66, label %67, label %60

67:                                               ; preds = %60
  %68 = ptrtoint %"class.std::__1::vector.43"* %58 to i64
  %69 = ptrtoint %"class.std::__1::vector.43"* %59 to i64
  %70 = getelementptr inbounds %"class.std::__1::vector.41", %"class.std::__1::vector.41"* %0, i64 0, i32 0, i32 0
  %71 = load %"class.std::__1::vector.43"*, %"class.std::__1::vector.43"** %70, align 8
  %72 = load %"class.std::__1::vector.43"*, %"class.std::__1::vector.43"** %6, align 8
  %73 = icmp eq %"class.std::__1::vector.43"* %72, %71
  br i1 %73, label %74, label %76

74:                                               ; preds = %67
  %75 = ptrtoint %"class.std::__1::vector.43"* %71 to i64
  br label %101

76:                                               ; preds = %67, %76
  %77 = phi %"class.std::__1::vector.43"* [ %79, %76 ], [ %56, %67 ]
  %78 = phi %"class.std::__1::vector.43"* [ %80, %76 ], [ %72, %67 ]
  %79 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %77, i64 -1
  %80 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %78, i64 -1
  %81 = bitcast %"class.std::__1::vector.43"* %79 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %81, i8 0, i64 24, i1 false) #24
  %82 = bitcast %"class.std::__1::vector.43"* %80 to i64*
  %83 = load i64, i64* %82, align 8
  %84 = bitcast %"class.std::__1::vector.43"* %79 to i64*
  store i64 %83, i64* %84, align 8
  %85 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %78, i64 -1, i32 0, i32 1
  %86 = bitcast i32** %85 to i64*
  %87 = load i64, i64* %86, align 8
  %88 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %77, i64 -1, i32 0, i32 1
  %89 = bitcast i32** %88 to i64*
  store i64 %87, i64* %89, align 8
  %90 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %78, i64 -1, i32 0, i32 2, i32 0, i32 0
  %91 = bitcast i32** %90 to i64*
  %92 = load i64, i64* %91, align 8
  %93 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %77, i64 -1, i32 0, i32 2, i32 0, i32 0
  %94 = bitcast i32** %93 to i64*
  store i64 %92, i64* %94, align 8
  %95 = bitcast %"class.std::__1::vector.43"* %80 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %95, i8 0, i64 24, i1 false) #24
  %96 = icmp eq %"class.std::__1::vector.43"* %80, %71
  br i1 %96, label %97, label %76

97:                                               ; preds = %76
  %98 = ptrtoint %"class.std::__1::vector.43"* %79 to i64
  %99 = load i64, i64* %31, align 8
  %100 = load %"class.std::__1::vector.43"*, %"class.std::__1::vector.43"** %6, align 8
  br label %101

101:                                              ; preds = %74, %97
  %102 = phi %"class.std::__1::vector.43"* [ %71, %74 ], [ %100, %97 ]
  %103 = phi i64 [ %57, %74 ], [ %98, %97 ]
  %104 = phi i64 [ %75, %74 ], [ %99, %97 ]
  store i64 %103, i64* %31, align 8
  store i64 %69, i64* %7, align 8
  store i64 %68, i64* %4, align 8
  %105 = inttoptr i64 %104 to %"class.std::__1::vector.43"*
  %106 = icmp eq %"class.std::__1::vector.43"* %102, %105
  br i1 %106, label %120, label %107

107:                                              ; preds = %101, %118
  %108 = phi %"class.std::__1::vector.43"* [ %109, %118 ], [ %102, %101 ]
  %109 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %108, i64 -1
  %110 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %109, i64 0, i32 0, i32 0
  %111 = load i32*, i32** %110, align 8
  %112 = icmp eq i32* %111, null
  br i1 %112, label %118, label %113

113:                                              ; preds = %107
  %114 = ptrtoint i32* %111 to i64
  %115 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %108, i64 -1, i32 0, i32 1
  %116 = bitcast i32** %115 to i64*
  store i64 %114, i64* %116, align 8
  %117 = bitcast i32* %111 to i8*
  tail call void @_ZdlPv(i8* %117) #29
  br label %118

118:                                              ; preds = %113, %107
  %119 = icmp eq %"class.std::__1::vector.43"* %109, %105
  br i1 %119, label %120, label %107

120:                                              ; preds = %118, %101
  %121 = icmp eq i64 %104, 0
  br i1 %121, label %124, label %122

122:                                              ; preds = %120
  %123 = inttoptr i64 %104 to i8*
  tail call void @_ZdlPv(i8* %123) #29
  br label %124

124:                                              ; preds = %122, %120, %28
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm(%"class.std::__1::vector.29"*, i64) local_unnamed_addr #8 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i8** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i8** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = icmp ult i64 %9, %1
  br i1 %10, label %22, label %11

11:                                               ; preds = %2
  %12 = inttoptr i64 %8 to i8*
  %13 = icmp eq i64 %1, 0
  br i1 %13, label %20, label %14

14:                                               ; preds = %11
  %15 = getelementptr inbounds i8, i8* %12, i64 %1
  %16 = sub i64 %1, %8
  %17 = getelementptr i8, i8* %12, i64 %16
  %18 = ptrtoint i8* %17 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %12, i8 0, i64 %18, i1 false) #24
  %19 = ptrtoint i8* %15 to i64
  br label %20

20:                                               ; preds = %11, %14
  %21 = phi i64 [ %19, %14 ], [ %8, %11 ]
  store i64 %21, i64* %7, align 8
  br label %68

22:                                               ; preds = %2
  %23 = bitcast %"class.std::__1::vector.29"* %0 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = sub i64 %8, %24
  %26 = add i64 %25, %1
  %27 = icmp slt i64 %26, 0
  br i1 %27, label %28, label %30

28:                                               ; preds = %22
  %29 = bitcast %"class.std::__1::vector.29"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %29) #28
  unreachable

30:                                               ; preds = %22
  %31 = sub i64 %5, %24
  %32 = icmp ult i64 %31, 4611686018427387903
  br i1 %32, label %33, label %38

33:                                               ; preds = %30
  %34 = shl i64 %31, 1
  %35 = icmp ult i64 %34, %26
  %36 = select i1 %35, i64 %26, i64 %34
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %41, label %38

38:                                               ; preds = %30, %33
  %39 = phi i64 [ %36, %33 ], [ 9223372036854775807, %30 ]
  %40 = tail call i8* @_Znwm(i64 %39) #29
  br label %41

41:                                               ; preds = %38, %33
  %42 = phi i64 [ %39, %38 ], [ 0, %33 ]
  %43 = phi i8* [ %40, %38 ], [ null, %33 ]
  %44 = getelementptr inbounds i8, i8* %43, i64 %25
  %45 = ptrtoint i8* %44 to i64
  %46 = getelementptr inbounds i8, i8* %43, i64 %42
  %47 = getelementptr inbounds i8, i8* %44, i64 %1
  %48 = sub i64 %1, %45
  %49 = getelementptr i8, i8* %44, i64 %48
  %50 = ptrtoint i8* %49 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %44, i8 0, i64 %50, i1 false) #24
  %51 = ptrtoint i8* %46 to i64
  %52 = ptrtoint i8* %47 to i64
  %53 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %0, i64 0, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  %55 = load i64, i64* %7, align 8
  %56 = ptrtoint i8* %54 to i64
  %57 = sub i64 %55, %56
  %58 = sub i64 0, %57
  %59 = getelementptr inbounds i8, i8* %44, i64 %58
  %60 = ptrtoint i8* %59 to i64
  %61 = icmp sgt i64 %57, 0
  br i1 %61, label %62, label %64

62:                                               ; preds = %41
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %59, i8* align 1 %54, i64 %57, i1 false) #24
  %63 = load i8*, i8** %53, align 8
  br label %64

64:                                               ; preds = %41, %62
  %65 = phi i8* [ %54, %41 ], [ %63, %62 ]
  store i64 %60, i64* %23, align 8
  store i64 %52, i64* %7, align 8
  store i64 %51, i64* %4, align 8
  %66 = icmp eq i8* %65, null
  br i1 %66, label %68, label %67

67:                                               ; preds = %64
  tail call void @_ZdlPv(i8* nonnull %65) #29
  br label %68

68:                                               ; preds = %67, %64, %20
  ret void
}

; Function Attrs: nofree nounwind
declare double @sqrt(double) local_unnamed_addr #26

; Function Attrs: nofree nounwind
declare double @log(double) local_unnamed_addr #26

; Function Attrs: nofree nounwind
declare double @pow(double, double) local_unnamed_addr #26

; Function Attrs: nofree nounwind
declare double @exp(double) local_unnamed_addr #26

; Function Attrs: nounwind readnone speculatable
declare double @llvm.trunc.f64(double) #21

; Function Attrs: nounwind readnone speculatable
declare double @llvm.fabs.f64(double) #21

; Function Attrs: nounwind
declare double @nextafter(double, double) local_unnamed_addr #27

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__15dequeIiNS_9allocatorIiEEE19__add_back_capacityEv(%"class.std::__1::deque"*) local_unnamed_addr #8 comdat align 2 {
  %2 = alloca i32*, align 8
  %3 = alloca i32*, align 8
  %4 = alloca %"struct.std::__1::__split_buffer.293", align 8
  %5 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = icmp ugt i64 %6, 1023
  br i1 %7, label %8, label %162

8:                                                ; preds = %1
  %9 = add i64 %6, -1024
  store i64 %9, i64* %5, align 8
  %10 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 1
  %11 = load i32**, i32*** %10, align 8
  %12 = bitcast i32** %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds i32*, i32** %11, i64 1
  store i32** %14, i32*** %10, align 8
  %15 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 2
  %16 = load i32**, i32*** %15, align 8
  %17 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %18 = load i32**, i32*** %17, align 8
  %19 = icmp eq i32** %16, %18
  %20 = ptrtoint i32** %18 to i64
  %21 = bitcast i32** %16 to i64*
  br i1 %19, label %22, label %158

22:                                               ; preds = %8
  %23 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load i32**, i32*** %23, align 8
  %25 = icmp ugt i32** %14, %24
  %26 = ptrtoint i32** %24 to i64
  br i1 %25, label %27, label %47

27:                                               ; preds = %22
  %28 = ptrtoint i32** %14 to i64
  %29 = sub i64 %28, %26
  %30 = ashr exact i64 %29, 3
  %31 = add nsw i64 %30, 1
  %32 = sdiv i64 %31, -2
  %33 = getelementptr inbounds i32*, i32** %14, i64 %32
  %34 = ptrtoint i32** %16 to i64
  %35 = sub i64 %34, %28
  %36 = ashr exact i64 %35, 3
  %37 = icmp eq i64 %35, 0
  br i1 %37, label %42, label %38

38:                                               ; preds = %27
  %39 = bitcast i32** %33 to i8*
  %40 = bitcast i32** %14 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %39, i8* align 8 %40, i64 %35, i1 false) #24
  %41 = load i32**, i32*** %10, align 8
  br label %42

42:                                               ; preds = %38, %27
  %43 = phi i32** [ %14, %27 ], [ %41, %38 ]
  %44 = getelementptr inbounds i32*, i32** %33, i64 %36
  store i32** %44, i32*** %15, align 8
  %45 = getelementptr inbounds i32*, i32** %43, i64 %32
  store i32** %45, i32*** %10, align 8
  %46 = bitcast i32** %44 to i64*
  br label %158

47:                                               ; preds = %22
  %48 = bitcast i32*** %17 to i64*
  %49 = bitcast %"class.std::__1::deque"* %0 to i64*
  %50 = sub i64 %20, %26
  %51 = ashr exact i64 %50, 2
  %52 = icmp eq i64 %50, 0
  %53 = select i1 %52, i64 1, i64 %51
  %54 = icmp ugt i64 %53, 2305843009213693951
  br i1 %54, label %55, label %56

55:                                               ; preds = %47
  tail call void @abort() #28
  unreachable

56:                                               ; preds = %47
  %57 = lshr i64 %53, 2
  %58 = shl i64 %53, 3
  %59 = tail call i8* @_Znwm(i64 %58) #29
  %60 = bitcast i8* %59 to i32**
  %61 = ptrtoint i8* %59 to i64
  %62 = getelementptr inbounds i32*, i32** %60, i64 %57
  %63 = ptrtoint i32** %62 to i64
  %64 = getelementptr inbounds i32*, i32** %60, i64 %53
  %65 = ptrtoint i32** %64 to i64
  %66 = ptrtoint i32** %14 to i64
  %67 = ptrtoint i32** %16 to i64
  %68 = sub i64 %67, %66
  %69 = ashr exact i64 %68, 3
  %70 = getelementptr inbounds i32*, i32** %62, i64 %69
  %71 = icmp eq i64 %68, 0
  br i1 %71, label %147, label %72

72:                                               ; preds = %56
  %73 = add i64 %68, -8
  %74 = lshr i64 %73, 3
  %75 = add nuw nsw i64 %74, 1
  %76 = and i64 %75, 7
  %77 = icmp eq i64 %76, 0
  br i1 %77, label %93, label %78

78:                                               ; preds = %72, %78
  %79 = phi i32** [ %86, %78 ], [ %62, %72 ]
  %80 = phi i64 [ %87, %78 ], [ %63, %72 ]
  %81 = phi i32** [ %88, %78 ], [ %14, %72 ]
  %82 = phi i64 [ %89, %78 ], [ %76, %72 ]
  %83 = bitcast i32** %81 to i64*
  %84 = load i64, i64* %83, align 8
  %85 = inttoptr i64 %80 to i64*
  store i64 %84, i64* %85, align 8
  %86 = getelementptr inbounds i32*, i32** %79, i64 1
  %87 = ptrtoint i32** %86 to i64
  %88 = getelementptr inbounds i32*, i32** %81, i64 1
  %89 = add i64 %82, -1
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %91, label %78, !llvm.loop !360

91:                                               ; preds = %78
  %92 = ptrtoint i32** %86 to i64
  br label %93

93:                                               ; preds = %72, %91
  %94 = phi i32** [ %62, %72 ], [ %86, %91 ]
  %95 = phi i64 [ %63, %72 ], [ %92, %91 ]
  %96 = phi i32** [ %14, %72 ], [ %88, %91 ]
  %97 = icmp ult i64 %73, 56
  br i1 %97, label %144, label %98

98:                                               ; preds = %93, %98
  %99 = phi i32** [ %140, %98 ], [ %94, %93 ]
  %100 = phi i64 [ %141, %98 ], [ %95, %93 ]
  %101 = phi i32** [ %142, %98 ], [ %96, %93 ]
  %102 = bitcast i32** %101 to i64*
  %103 = load i64, i64* %102, align 8
  %104 = inttoptr i64 %100 to i64*
  store i64 %103, i64* %104, align 8
  %105 = getelementptr inbounds i32*, i32** %99, i64 1
  %106 = getelementptr inbounds i32*, i32** %101, i64 1
  %107 = bitcast i32** %106 to i64*
  %108 = load i64, i64* %107, align 8
  %109 = bitcast i32** %105 to i64*
  store i64 %108, i64* %109, align 8
  %110 = getelementptr inbounds i32*, i32** %99, i64 2
  %111 = getelementptr inbounds i32*, i32** %101, i64 2
  %112 = bitcast i32** %111 to i64*
  %113 = load i64, i64* %112, align 8
  %114 = bitcast i32** %110 to i64*
  store i64 %113, i64* %114, align 8
  %115 = getelementptr inbounds i32*, i32** %99, i64 3
  %116 = getelementptr inbounds i32*, i32** %101, i64 3
  %117 = bitcast i32** %116 to i64*
  %118 = load i64, i64* %117, align 8
  %119 = bitcast i32** %115 to i64*
  store i64 %118, i64* %119, align 8
  %120 = getelementptr inbounds i32*, i32** %99, i64 4
  %121 = getelementptr inbounds i32*, i32** %101, i64 4
  %122 = bitcast i32** %121 to i64*
  %123 = load i64, i64* %122, align 8
  %124 = bitcast i32** %120 to i64*
  store i64 %123, i64* %124, align 8
  %125 = getelementptr inbounds i32*, i32** %99, i64 5
  %126 = getelementptr inbounds i32*, i32** %101, i64 5
  %127 = bitcast i32** %126 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = bitcast i32** %125 to i64*
  store i64 %128, i64* %129, align 8
  %130 = getelementptr inbounds i32*, i32** %99, i64 6
  %131 = getelementptr inbounds i32*, i32** %101, i64 6
  %132 = bitcast i32** %131 to i64*
  %133 = load i64, i64* %132, align 8
  %134 = bitcast i32** %130 to i64*
  store i64 %133, i64* %134, align 8
  %135 = getelementptr inbounds i32*, i32** %99, i64 7
  %136 = getelementptr inbounds i32*, i32** %101, i64 7
  %137 = bitcast i32** %136 to i64*
  %138 = load i64, i64* %137, align 8
  %139 = bitcast i32** %135 to i64*
  store i64 %138, i64* %139, align 8
  %140 = getelementptr inbounds i32*, i32** %99, i64 8
  %141 = ptrtoint i32** %140 to i64
  %142 = getelementptr inbounds i32*, i32** %101, i64 8
  %143 = icmp eq i32** %70, %140
  br i1 %143, label %144, label %98

144:                                              ; preds = %98, %93
  %145 = ptrtoint i32** %70 to i64
  %146 = load i32**, i32*** %23, align 8
  br label %147

147:                                              ; preds = %144, %56
  %148 = phi i32** [ %146, %144 ], [ %24, %56 ]
  %149 = phi i64 [ %145, %144 ], [ %63, %56 ]
  store i64 %61, i64* %49, align 8
  %150 = bitcast i32*** %10 to i64*
  store i64 %63, i64* %150, align 8
  %151 = bitcast i32*** %15 to i64*
  store i64 %149, i64* %151, align 8
  store i64 %65, i64* %48, align 8
  %152 = icmp eq i32** %148, null
  %153 = inttoptr i64 %149 to i64*
  br i1 %152, label %158, label %154

154:                                              ; preds = %147
  %155 = bitcast i32** %148 to i8*
  tail call void @_ZdlPv(i8* %155) #29
  %156 = bitcast i32*** %15 to i64**
  %157 = load i64*, i64** %156, align 8
  br label %158

158:                                              ; preds = %8, %42, %147, %154
  %159 = phi i64* [ %157, %154 ], [ %153, %147 ], [ %46, %42 ], [ %21, %8 ]
  store i64 %13, i64* %159, align 8
  %160 = load i32**, i32*** %15, align 8
  %161 = getelementptr inbounds i32*, i32** %160, i64 1
  store i32** %161, i32*** %15, align 8
  br label %460

162:                                              ; preds = %1
  %163 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0
  %164 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 2
  %165 = bitcast i32*** %164 to i64*
  %166 = load i64, i64* %165, align 8
  %167 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 1
  %168 = bitcast i32*** %167 to i64*
  %169 = load i64, i64* %168, align 8
  %170 = sub i64 %166, %169
  %171 = ashr exact i64 %170, 3
  %172 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %173 = bitcast i32*** %172 to i64*
  %174 = load i64, i64* %173, align 8
  %175 = bitcast %"class.std::__1::deque"* %0 to i64*
  %176 = load i64, i64* %175, align 8
  %177 = sub i64 %174, %176
  %178 = ashr exact i64 %177, 3
  %179 = icmp ult i64 %171, %178
  %180 = inttoptr i64 %166 to i32**
  %181 = inttoptr i64 %169 to i32**
  br i1 %179, label %182, label %337

182:                                              ; preds = %162
  %183 = icmp eq i64 %174, %166
  br i1 %183, label %188, label %184

184:                                              ; preds = %182
  %185 = bitcast i32** %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %185) #24
  %186 = tail call i8* @_Znwm(i64 4096) #29
  %187 = bitcast i32** %2 to i8**
  store i8* %186, i8** %187, align 8
  call void @_ZNSt3__114__split_bufferIPiNS_9allocatorIS1_EEE9push_backEOS1_(%"struct.std::__1::__split_buffer"* %163, i32** nonnull dereferenceable(8) %2)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %185) #24
  br label %460

188:                                              ; preds = %182
  %189 = bitcast i32** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %189) #24
  %190 = tail call i8* @_Znwm(i64 4096) #29
  %191 = bitcast i32** %3 to i8**
  store i8* %190, i8** %191, align 8
  call void @_ZNSt3__114__split_bufferIPiNS_9allocatorIS1_EEE10push_frontEOS1_(%"struct.std::__1::__split_buffer"* %163, i32** nonnull dereferenceable(8) %3)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %189) #24
  %192 = load i32**, i32*** %167, align 8
  %193 = bitcast i32** %192 to i64*
  %194 = load i64, i64* %193, align 8
  %195 = getelementptr inbounds i32*, i32** %192, i64 1
  store i32** %195, i32*** %167, align 8
  %196 = load i32**, i32*** %164, align 8
  %197 = load i32**, i32*** %172, align 8
  %198 = icmp eq i32** %196, %197
  %199 = ptrtoint i32** %197 to i64
  %200 = bitcast i32** %196 to i64*
  br i1 %198, label %201, label %333

201:                                              ; preds = %188
  %202 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 0
  %203 = load i32**, i32*** %202, align 8
  %204 = icmp ugt i32** %195, %203
  %205 = ptrtoint i32** %203 to i64
  br i1 %204, label %206, label %226

206:                                              ; preds = %201
  %207 = ptrtoint i32** %195 to i64
  %208 = sub i64 %207, %205
  %209 = ashr exact i64 %208, 3
  %210 = add nsw i64 %209, 1
  %211 = sdiv i64 %210, -2
  %212 = getelementptr inbounds i32*, i32** %195, i64 %211
  %213 = ptrtoint i32** %196 to i64
  %214 = sub i64 %213, %207
  %215 = ashr exact i64 %214, 3
  %216 = icmp eq i64 %214, 0
  br i1 %216, label %221, label %217

217:                                              ; preds = %206
  %218 = bitcast i32** %212 to i8*
  %219 = bitcast i32** %195 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %218, i8* align 8 %219, i64 %214, i1 false) #24
  %220 = load i32**, i32*** %167, align 8
  br label %221

221:                                              ; preds = %217, %206
  %222 = phi i32** [ %195, %206 ], [ %220, %217 ]
  %223 = getelementptr inbounds i32*, i32** %212, i64 %215
  store i32** %223, i32*** %164, align 8
  %224 = getelementptr inbounds i32*, i32** %222, i64 %211
  store i32** %224, i32*** %167, align 8
  %225 = bitcast i32** %223 to i64*
  br label %333

226:                                              ; preds = %201
  %227 = sub i64 %199, %205
  %228 = ashr exact i64 %227, 2
  %229 = icmp eq i64 %227, 0
  %230 = select i1 %229, i64 1, i64 %228
  %231 = icmp ugt i64 %230, 2305843009213693951
  br i1 %231, label %232, label %233

232:                                              ; preds = %226
  call void @abort() #28
  unreachable

233:                                              ; preds = %226
  %234 = lshr i64 %230, 2
  %235 = shl i64 %230, 3
  %236 = call i8* @_Znwm(i64 %235) #29
  %237 = bitcast i8* %236 to i32**
  %238 = ptrtoint i8* %236 to i64
  %239 = getelementptr inbounds i32*, i32** %237, i64 %234
  %240 = ptrtoint i32** %239 to i64
  %241 = getelementptr inbounds i32*, i32** %237, i64 %230
  %242 = ptrtoint i32** %241 to i64
  %243 = ptrtoint i32** %195 to i64
  %244 = ptrtoint i32** %196 to i64
  %245 = sub i64 %244, %243
  %246 = ashr exact i64 %245, 3
  %247 = getelementptr inbounds i32*, i32** %239, i64 %246
  %248 = icmp eq i64 %245, 0
  br i1 %248, label %324, label %249

249:                                              ; preds = %233
  %250 = add i64 %245, -8
  %251 = lshr i64 %250, 3
  %252 = add nuw nsw i64 %251, 1
  %253 = and i64 %252, 7
  %254 = icmp eq i64 %253, 0
  br i1 %254, label %270, label %255

255:                                              ; preds = %249, %255
  %256 = phi i32** [ %263, %255 ], [ %239, %249 ]
  %257 = phi i64 [ %264, %255 ], [ %240, %249 ]
  %258 = phi i32** [ %265, %255 ], [ %195, %249 ]
  %259 = phi i64 [ %266, %255 ], [ %253, %249 ]
  %260 = bitcast i32** %258 to i64*
  %261 = load i64, i64* %260, align 8
  %262 = inttoptr i64 %257 to i64*
  store i64 %261, i64* %262, align 8
  %263 = getelementptr inbounds i32*, i32** %256, i64 1
  %264 = ptrtoint i32** %263 to i64
  %265 = getelementptr inbounds i32*, i32** %258, i64 1
  %266 = add i64 %259, -1
  %267 = icmp eq i64 %266, 0
  br i1 %267, label %268, label %255, !llvm.loop !361

268:                                              ; preds = %255
  %269 = ptrtoint i32** %263 to i64
  br label %270

270:                                              ; preds = %249, %268
  %271 = phi i32** [ %239, %249 ], [ %263, %268 ]
  %272 = phi i64 [ %240, %249 ], [ %269, %268 ]
  %273 = phi i32** [ %195, %249 ], [ %265, %268 ]
  %274 = icmp ult i64 %250, 56
  br i1 %274, label %321, label %275

275:                                              ; preds = %270, %275
  %276 = phi i32** [ %317, %275 ], [ %271, %270 ]
  %277 = phi i64 [ %318, %275 ], [ %272, %270 ]
  %278 = phi i32** [ %319, %275 ], [ %273, %270 ]
  %279 = bitcast i32** %278 to i64*
  %280 = load i64, i64* %279, align 8
  %281 = inttoptr i64 %277 to i64*
  store i64 %280, i64* %281, align 8
  %282 = getelementptr inbounds i32*, i32** %276, i64 1
  %283 = getelementptr inbounds i32*, i32** %278, i64 1
  %284 = bitcast i32** %283 to i64*
  %285 = load i64, i64* %284, align 8
  %286 = bitcast i32** %282 to i64*
  store i64 %285, i64* %286, align 8
  %287 = getelementptr inbounds i32*, i32** %276, i64 2
  %288 = getelementptr inbounds i32*, i32** %278, i64 2
  %289 = bitcast i32** %288 to i64*
  %290 = load i64, i64* %289, align 8
  %291 = bitcast i32** %287 to i64*
  store i64 %290, i64* %291, align 8
  %292 = getelementptr inbounds i32*, i32** %276, i64 3
  %293 = getelementptr inbounds i32*, i32** %278, i64 3
  %294 = bitcast i32** %293 to i64*
  %295 = load i64, i64* %294, align 8
  %296 = bitcast i32** %292 to i64*
  store i64 %295, i64* %296, align 8
  %297 = getelementptr inbounds i32*, i32** %276, i64 4
  %298 = getelementptr inbounds i32*, i32** %278, i64 4
  %299 = bitcast i32** %298 to i64*
  %300 = load i64, i64* %299, align 8
  %301 = bitcast i32** %297 to i64*
  store i64 %300, i64* %301, align 8
  %302 = getelementptr inbounds i32*, i32** %276, i64 5
  %303 = getelementptr inbounds i32*, i32** %278, i64 5
  %304 = bitcast i32** %303 to i64*
  %305 = load i64, i64* %304, align 8
  %306 = bitcast i32** %302 to i64*
  store i64 %305, i64* %306, align 8
  %307 = getelementptr inbounds i32*, i32** %276, i64 6
  %308 = getelementptr inbounds i32*, i32** %278, i64 6
  %309 = bitcast i32** %308 to i64*
  %310 = load i64, i64* %309, align 8
  %311 = bitcast i32** %307 to i64*
  store i64 %310, i64* %311, align 8
  %312 = getelementptr inbounds i32*, i32** %276, i64 7
  %313 = getelementptr inbounds i32*, i32** %278, i64 7
  %314 = bitcast i32** %313 to i64*
  %315 = load i64, i64* %314, align 8
  %316 = bitcast i32** %312 to i64*
  store i64 %315, i64* %316, align 8
  %317 = getelementptr inbounds i32*, i32** %276, i64 8
  %318 = ptrtoint i32** %317 to i64
  %319 = getelementptr inbounds i32*, i32** %278, i64 8
  %320 = icmp eq i32** %247, %317
  br i1 %320, label %321, label %275

321:                                              ; preds = %275, %270
  %322 = ptrtoint i32** %247 to i64
  %323 = load i32**, i32*** %202, align 8
  br label %324

324:                                              ; preds = %321, %233
  %325 = phi i32** [ %323, %321 ], [ %203, %233 ]
  %326 = phi i64 [ %322, %321 ], [ %240, %233 ]
  store i64 %238, i64* %175, align 8
  store i64 %240, i64* %168, align 8
  store i64 %326, i64* %165, align 8
  store i64 %242, i64* %173, align 8
  %327 = icmp eq i32** %325, null
  %328 = inttoptr i64 %326 to i64*
  br i1 %327, label %333, label %329

329:                                              ; preds = %324
  %330 = bitcast i32** %325 to i8*
  call void @_ZdlPv(i8* %330) #29
  %331 = bitcast i32*** %164 to i64**
  %332 = load i64*, i64** %331, align 8
  br label %333

333:                                              ; preds = %188, %221, %324, %329
  %334 = phi i64* [ %332, %329 ], [ %328, %324 ], [ %225, %221 ], [ %200, %188 ]
  store i64 %194, i64* %334, align 8
  %335 = load i32**, i32*** %164, align 8
  %336 = getelementptr inbounds i32*, i32** %335, i64 1
  store i32** %336, i32*** %164, align 8
  br label %460

337:                                              ; preds = %162
  %338 = bitcast %"struct.std::__1::__split_buffer.293"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %338) #24
  %339 = getelementptr inbounds %"struct.std::__1::__split_buffer.293", %"struct.std::__1::__split_buffer.293"* %4, i64 0, i32 1
  %340 = getelementptr inbounds %"struct.std::__1::__split_buffer.293", %"struct.std::__1::__split_buffer.293"* %4, i64 0, i32 2
  %341 = getelementptr inbounds %"struct.std::__1::__split_buffer.293", %"struct.std::__1::__split_buffer.293"* %4, i64 0, i32 3, i32 0, i32 0
  %342 = getelementptr inbounds %"struct.std::__1::__split_buffer.293", %"struct.std::__1::__split_buffer.293"* %4, i64 0, i32 3, i32 1, i32 0
  %343 = ashr exact i64 %177, 2
  %344 = icmp eq i64 %177, 0
  %345 = select i1 %344, i64 1, i64 %343
  %346 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 3
  %347 = bitcast %"struct.std::__1::__split_buffer.293"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %347, i8 -86, i64 24, i1 false)
  store i32** null, i32*** %341, align 8
  %348 = bitcast %"class.std::__1::allocator.209"** %342 to %"class.std::__1::__compressed_pair.206"**
  store %"class.std::__1::__compressed_pair.206"* %346, %"class.std::__1::__compressed_pair.206"** %348, align 8
  %349 = icmp ugt i64 %345, 2305843009213693951
  br i1 %349, label %350, label %351

350:                                              ; preds = %337
  tail call void @abort() #28
  unreachable

351:                                              ; preds = %337
  %352 = shl i64 %345, 3
  %353 = tail call i8* @_Znwm(i64 %352) #29
  %354 = bitcast i8* %353 to i32**
  %355 = bitcast %"struct.std::__1::__split_buffer.293"* %4 to i8**
  store i8* %353, i8** %355, align 8
  %356 = getelementptr inbounds i32*, i32** %354, i64 %171
  store i32** %356, i32*** %340, align 8
  store i32** %356, i32*** %339, align 8
  %357 = getelementptr inbounds i32*, i32** %354, i64 %345
  store i32** %357, i32*** %341, align 8
  %358 = tail call i8* @_Znwm(i64 4096) #29
  %359 = ptrtoint i8* %358 to i64
  %360 = icmp eq i64 %171, %345
  %361 = ptrtoint i32** %357 to i64
  %362 = ptrtoint i8* %353 to i64
  %363 = ptrtoint i32** %356 to i64
  br i1 %360, label %364, label %398

364:                                              ; preds = %351
  %365 = icmp ugt i32** %356, %354
  br i1 %365, label %366, label %373

366:                                              ; preds = %364
  %367 = sub i64 %363, %362
  %368 = ashr exact i64 %367, 3
  %369 = add nsw i64 %368, 1
  %370 = sdiv i64 %369, -2
  %371 = getelementptr inbounds i32*, i32** %356, i64 %370
  store i32** %371, i32*** %340, align 8
  store i32** %371, i32*** %339, align 8
  %372 = ptrtoint i32** %371 to i64
  br label %398

373:                                              ; preds = %364
  %374 = sub i64 %361, %362
  %375 = ashr exact i64 %374, 2
  %376 = icmp eq i64 %374, 0
  %377 = select i1 %376, i64 1, i64 %375
  %378 = icmp ugt i64 %377, 2305843009213693951
  br i1 %378, label %379, label %380

379:                                              ; preds = %373
  tail call void @abort() #28
  unreachable

380:                                              ; preds = %373
  %381 = bitcast %"struct.std::__1::__split_buffer.293"* %4 to i64*
  %382 = bitcast i32*** %341 to i64*
  %383 = lshr i64 %377, 2
  %384 = shl i64 %377, 3
  %385 = tail call i8* @_Znwm(i64 %384) #29
  %386 = bitcast i8* %385 to i32**
  %387 = ptrtoint i8* %385 to i64
  %388 = getelementptr inbounds i32*, i32** %386, i64 %383
  %389 = ptrtoint i32** %388 to i64
  %390 = getelementptr inbounds i32*, i32** %386, i64 %377
  %391 = ptrtoint i32** %390 to i64
  store i64 %387, i64* %381, align 8
  %392 = bitcast i32*** %339 to i64*
  store i64 %389, i64* %392, align 8
  %393 = bitcast i32*** %340 to i64*
  store i64 %389, i64* %393, align 8
  store i64 %391, i64* %382, align 8
  tail call void @_ZdlPv(i8* nonnull %353) #29
  %394 = load i32**, i32*** %164, align 8
  %395 = load i32**, i32*** %167, align 8
  %396 = ptrtoint i32** %395 to i64
  %397 = ptrtoint i32** %394 to i64
  br label %398

398:                                              ; preds = %351, %366, %380
  %399 = phi i64 [ %391, %380 ], [ %361, %366 ], [ %361, %351 ]
  %400 = phi i64 [ %397, %380 ], [ %166, %366 ], [ %166, %351 ]
  %401 = phi i64 [ %389, %380 ], [ %372, %366 ], [ %363, %351 ]
  %402 = phi i64 [ %396, %380 ], [ %169, %366 ], [ %169, %351 ]
  %403 = phi i64 [ %387, %380 ], [ %362, %366 ], [ %362, %351 ]
  %404 = phi i32** [ %395, %380 ], [ %181, %366 ], [ %181, %351 ]
  %405 = phi i32** [ %394, %380 ], [ %180, %366 ], [ %180, %351 ]
  %406 = phi i32** [ %388, %380 ], [ %371, %366 ], [ %356, %351 ]
  %407 = bitcast i32** %406 to i64*
  store i64 %359, i64* %407, align 8
  %408 = getelementptr inbounds i32*, i32** %406, i64 1
  store i32** %408, i32*** %340, align 8
  %409 = icmp eq i32** %405, %404
  br i1 %409, label %410, label %455

410:                                              ; preds = %398
  %411 = ptrtoint i32** %408 to i64
  %412 = bitcast %"struct.std::__1::__split_buffer.293"* %4 to i64*
  %413 = bitcast i32*** %339 to i64*
  %414 = bitcast i32*** %340 to i64*
  %415 = bitcast i32*** %341 to i64*
  br label %427

416:                                              ; preds = %455
  %417 = ptrtoint i32** %458 to i64
  %418 = bitcast %"struct.std::__1::__split_buffer.293"* %4 to i64*
  %419 = load i64, i64* %418, align 8
  %420 = bitcast i32*** %339 to i64*
  %421 = load i64, i64* %420, align 8
  %422 = load i64, i64* %165, align 8
  %423 = bitcast i32*** %340 to i64*
  %424 = load i64, i64* %423, align 8
  %425 = bitcast i32*** %341 to i64*
  %426 = load i64, i64* %425, align 8
  br label %427

427:                                              ; preds = %410, %416
  %428 = phi i64* [ %415, %410 ], [ %425, %416 ]
  %429 = phi i64* [ %414, %410 ], [ %423, %416 ]
  %430 = phi i64* [ %413, %410 ], [ %420, %416 ]
  %431 = phi i64* [ %412, %410 ], [ %418, %416 ]
  %432 = phi i64 [ %399, %410 ], [ %426, %416 ]
  %433 = phi i64 [ %411, %410 ], [ %424, %416 ]
  %434 = phi i64 [ %400, %410 ], [ %422, %416 ]
  %435 = phi i64 [ %401, %410 ], [ %421, %416 ]
  %436 = phi i64 [ %402, %410 ], [ %417, %416 ]
  %437 = phi i64 [ %403, %410 ], [ %419, %416 ]
  %438 = load i64, i64* %175, align 8
  store i64 %437, i64* %175, align 8
  store i64 %438, i64* %431, align 8
  store i64 %435, i64* %168, align 8
  store i64 %436, i64* %430, align 8
  store i64 %433, i64* %165, align 8
  store i64 %434, i64* %429, align 8
  %439 = load i64, i64* %173, align 8
  store i64 %432, i64* %173, align 8
  store i64 %439, i64* %428, align 8
  %440 = inttoptr i64 %436 to i32**
  %441 = inttoptr i64 %434 to i32**
  %442 = icmp eq i32** %441, %440
  br i1 %442, label %450, label %443

443:                                              ; preds = %427
  %444 = getelementptr i32*, i32** %441, i64 -1
  %445 = ptrtoint i32** %444 to i64
  %446 = sub i64 %445, %436
  %447 = lshr i64 %446, 3
  %448 = xor i64 %447, -1
  %449 = getelementptr i32*, i32** %441, i64 %448
  store i32** %449, i32*** %340, align 8
  br label %450

450:                                              ; preds = %443, %427
  %451 = icmp eq i64 %438, 0
  br i1 %451, label %454, label %452

452:                                              ; preds = %450
  %453 = inttoptr i64 %438 to i8*
  call void @_ZdlPv(i8* %453) #29
  br label %454

454:                                              ; preds = %450, %452
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %338) #24
  br label %460

455:                                              ; preds = %398, %455
  %456 = phi i32** [ %457, %455 ], [ %405, %398 ]
  %457 = getelementptr inbounds i32*, i32** %456, i64 -1
  call void @_ZNSt3__114__split_bufferIPiRNS_9allocatorIS1_EEE10push_frontERKS1_(%"struct.std::__1::__split_buffer.293"* nonnull %4, i32** dereferenceable(8) %457)
  %458 = load i32**, i32*** %167, align 8
  %459 = icmp eq i32** %457, %458
  br i1 %459, label %416, label %455

460:                                              ; preds = %454, %333, %184, %158
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIPiNS_9allocatorIS1_EEE9push_backEOS1_(%"struct.std::__1::__split_buffer"*, i32** dereferenceable(8)) local_unnamed_addr #8 comdat align 2 {
  %3 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 2
  %4 = load i32**, i32*** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 3, i32 0, i32 0
  %6 = load i32**, i32*** %5, align 8
  %7 = icmp eq i32** %4, %6
  %8 = ptrtoint i32** %6 to i64
  %9 = bitcast i32** %4 to i64*
  br i1 %7, label %10, label %148

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 1
  %12 = load i32**, i32*** %11, align 8
  %13 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 0
  %14 = load i32**, i32*** %13, align 8
  %15 = icmp ugt i32** %12, %14
  %16 = ptrtoint i32** %14 to i64
  br i1 %15, label %17, label %37

17:                                               ; preds = %10
  %18 = ptrtoint i32** %12 to i64
  %19 = sub i64 %18, %16
  %20 = ashr exact i64 %19, 3
  %21 = add nsw i64 %20, 1
  %22 = sdiv i64 %21, -2
  %23 = getelementptr inbounds i32*, i32** %12, i64 %22
  %24 = ptrtoint i32** %4 to i64
  %25 = sub i64 %24, %18
  %26 = ashr exact i64 %25, 3
  %27 = icmp eq i64 %25, 0
  br i1 %27, label %32, label %28

28:                                               ; preds = %17
  %29 = bitcast i32** %23 to i8*
  %30 = bitcast i32** %12 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %29, i8* align 8 %30, i64 %25, i1 false) #24
  %31 = load i32**, i32*** %11, align 8
  br label %32

32:                                               ; preds = %17, %28
  %33 = phi i32** [ %12, %17 ], [ %31, %28 ]
  %34 = getelementptr inbounds i32*, i32** %23, i64 %26
  store i32** %34, i32*** %3, align 8
  %35 = getelementptr inbounds i32*, i32** %33, i64 %22
  store i32** %35, i32*** %11, align 8
  %36 = bitcast i32** %34 to i64*
  br label %148

37:                                               ; preds = %10
  %38 = bitcast i32*** %5 to i64*
  %39 = bitcast %"struct.std::__1::__split_buffer"* %0 to i64*
  %40 = sub i64 %8, %16
  %41 = ashr exact i64 %40, 2
  %42 = icmp eq i64 %40, 0
  %43 = select i1 %42, i64 1, i64 %41
  %44 = icmp ugt i64 %43, 2305843009213693951
  br i1 %44, label %45, label %46

45:                                               ; preds = %37
  tail call void @abort() #28
  unreachable

46:                                               ; preds = %37
  %47 = lshr i64 %43, 2
  %48 = shl i64 %43, 3
  %49 = tail call i8* @_Znwm(i64 %48) #29
  %50 = bitcast i8* %49 to i32**
  %51 = ptrtoint i8* %49 to i64
  %52 = getelementptr inbounds i32*, i32** %50, i64 %47
  %53 = ptrtoint i32** %52 to i64
  %54 = getelementptr inbounds i32*, i32** %50, i64 %43
  %55 = ptrtoint i32** %54 to i64
  %56 = ptrtoint i32** %12 to i64
  %57 = ptrtoint i32** %4 to i64
  %58 = sub i64 %57, %56
  %59 = ashr exact i64 %58, 3
  %60 = getelementptr inbounds i32*, i32** %52, i64 %59
  %61 = icmp eq i64 %58, 0
  br i1 %61, label %137, label %62

62:                                               ; preds = %46
  %63 = add i64 %58, -8
  %64 = lshr i64 %63, 3
  %65 = add nuw nsw i64 %64, 1
  %66 = and i64 %65, 7
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %83, label %68

68:                                               ; preds = %62, %68
  %69 = phi i32** [ %76, %68 ], [ %52, %62 ]
  %70 = phi i64 [ %77, %68 ], [ %53, %62 ]
  %71 = phi i32** [ %78, %68 ], [ %12, %62 ]
  %72 = phi i64 [ %79, %68 ], [ %66, %62 ]
  %73 = bitcast i32** %71 to i64*
  %74 = load i64, i64* %73, align 8
  %75 = inttoptr i64 %70 to i64*
  store i64 %74, i64* %75, align 8
  %76 = getelementptr inbounds i32*, i32** %69, i64 1
  %77 = ptrtoint i32** %76 to i64
  %78 = getelementptr inbounds i32*, i32** %71, i64 1
  %79 = add i64 %72, -1
  %80 = icmp eq i64 %79, 0
  br i1 %80, label %81, label %68, !llvm.loop !362

81:                                               ; preds = %68
  %82 = ptrtoint i32** %76 to i64
  br label %83

83:                                               ; preds = %62, %81
  %84 = phi i32** [ %52, %62 ], [ %76, %81 ]
  %85 = phi i64 [ %53, %62 ], [ %82, %81 ]
  %86 = phi i32** [ %12, %62 ], [ %78, %81 ]
  %87 = icmp ult i64 %63, 56
  br i1 %87, label %134, label %88

88:                                               ; preds = %83, %88
  %89 = phi i32** [ %130, %88 ], [ %84, %83 ]
  %90 = phi i64 [ %131, %88 ], [ %85, %83 ]
  %91 = phi i32** [ %132, %88 ], [ %86, %83 ]
  %92 = bitcast i32** %91 to i64*
  %93 = load i64, i64* %92, align 8
  %94 = inttoptr i64 %90 to i64*
  store i64 %93, i64* %94, align 8
  %95 = getelementptr inbounds i32*, i32** %89, i64 1
  %96 = getelementptr inbounds i32*, i32** %91, i64 1
  %97 = bitcast i32** %96 to i64*
  %98 = load i64, i64* %97, align 8
  %99 = bitcast i32** %95 to i64*
  store i64 %98, i64* %99, align 8
  %100 = getelementptr inbounds i32*, i32** %89, i64 2
  %101 = getelementptr inbounds i32*, i32** %91, i64 2
  %102 = bitcast i32** %101 to i64*
  %103 = load i64, i64* %102, align 8
  %104 = bitcast i32** %100 to i64*
  store i64 %103, i64* %104, align 8
  %105 = getelementptr inbounds i32*, i32** %89, i64 3
  %106 = getelementptr inbounds i32*, i32** %91, i64 3
  %107 = bitcast i32** %106 to i64*
  %108 = load i64, i64* %107, align 8
  %109 = bitcast i32** %105 to i64*
  store i64 %108, i64* %109, align 8
  %110 = getelementptr inbounds i32*, i32** %89, i64 4
  %111 = getelementptr inbounds i32*, i32** %91, i64 4
  %112 = bitcast i32** %111 to i64*
  %113 = load i64, i64* %112, align 8
  %114 = bitcast i32** %110 to i64*
  store i64 %113, i64* %114, align 8
  %115 = getelementptr inbounds i32*, i32** %89, i64 5
  %116 = getelementptr inbounds i32*, i32** %91, i64 5
  %117 = bitcast i32** %116 to i64*
  %118 = load i64, i64* %117, align 8
  %119 = bitcast i32** %115 to i64*
  store i64 %118, i64* %119, align 8
  %120 = getelementptr inbounds i32*, i32** %89, i64 6
  %121 = getelementptr inbounds i32*, i32** %91, i64 6
  %122 = bitcast i32** %121 to i64*
  %123 = load i64, i64* %122, align 8
  %124 = bitcast i32** %120 to i64*
  store i64 %123, i64* %124, align 8
  %125 = getelementptr inbounds i32*, i32** %89, i64 7
  %126 = getelementptr inbounds i32*, i32** %91, i64 7
  %127 = bitcast i32** %126 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = bitcast i32** %125 to i64*
  store i64 %128, i64* %129, align 8
  %130 = getelementptr inbounds i32*, i32** %89, i64 8
  %131 = ptrtoint i32** %130 to i64
  %132 = getelementptr inbounds i32*, i32** %91, i64 8
  %133 = icmp eq i32** %60, %130
  br i1 %133, label %134, label %88

134:                                              ; preds = %88, %83
  %135 = ptrtoint i32** %60 to i64
  %136 = load i32**, i32*** %13, align 8
  br label %137

137:                                              ; preds = %46, %134
  %138 = phi i32** [ %136, %134 ], [ %14, %46 ]
  %139 = phi i64 [ %135, %134 ], [ %53, %46 ]
  store i64 %51, i64* %39, align 8
  %140 = bitcast i32*** %11 to i64*
  store i64 %53, i64* %140, align 8
  %141 = bitcast i32*** %3 to i64*
  store i64 %139, i64* %141, align 8
  store i64 %55, i64* %38, align 8
  %142 = icmp eq i32** %138, null
  %143 = inttoptr i64 %139 to i64*
  br i1 %142, label %148, label %144

144:                                              ; preds = %137
  %145 = bitcast i32** %138 to i8*
  tail call void @_ZdlPv(i8* %145) #29
  %146 = bitcast i32*** %3 to i64**
  %147 = load i64*, i64** %146, align 8
  br label %148

148:                                              ; preds = %144, %137, %32, %2
  %149 = phi i64* [ %147, %144 ], [ %143, %137 ], [ %36, %32 ], [ %9, %2 ]
  %150 = bitcast i32** %1 to i64*
  %151 = load i64, i64* %150, align 8
  store i64 %151, i64* %149, align 8
  %152 = load i32**, i32*** %3, align 8
  %153 = getelementptr inbounds i32*, i32** %152, i64 1
  store i32** %153, i32*** %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIPiNS_9allocatorIS1_EEE10push_frontEOS1_(%"struct.std::__1::__split_buffer"*, i32** dereferenceable(8)) local_unnamed_addr #8 comdat align 2 {
  %3 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 1
  %4 = load i32**, i32*** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 0
  %6 = load i32**, i32*** %5, align 8
  %7 = icmp eq i32** %4, %6
  %8 = ptrtoint i32** %6 to i64
  br i1 %7, label %9, label %147

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 2
  %11 = load i32**, i32*** %10, align 8
  %12 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 3, i32 0, i32 0
  %13 = load i32**, i32*** %12, align 8
  %14 = icmp ult i32** %11, %13
  %15 = bitcast i32*** %12 to i64*
  %16 = ptrtoint i32** %13 to i64
  br i1 %14, label %17, label %38

17:                                               ; preds = %9
  %18 = ptrtoint i32** %11 to i64
  %19 = sub i64 %16, %18
  %20 = ashr exact i64 %19, 3
  %21 = add nsw i64 %20, 1
  %22 = sdiv i64 %21, 2
  %23 = getelementptr inbounds i32*, i32** %11, i64 %22
  %24 = ptrtoint i32** %4 to i64
  %25 = sub i64 %18, %24
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %34, label %27

27:                                               ; preds = %17
  %28 = ashr exact i64 %25, 3
  %29 = sub nsw i64 0, %28
  %30 = getelementptr inbounds i32*, i32** %23, i64 %29
  %31 = bitcast i32** %30 to i8*
  %32 = bitcast i32** %4 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %31, i8* align 8 %32, i64 %25, i1 false) #24
  %33 = load i32**, i32*** %10, align 8
  br label %34

34:                                               ; preds = %17, %27
  %35 = phi i32** [ %33, %27 ], [ %11, %17 ]
  %36 = phi i32** [ %30, %27 ], [ %23, %17 ]
  store i32** %36, i32*** %3, align 8
  %37 = getelementptr inbounds i32*, i32** %35, i64 %22
  store i32** %37, i32*** %10, align 8
  br label %147

38:                                               ; preds = %9
  %39 = bitcast %"struct.std::__1::__split_buffer"* %0 to i64*
  %40 = sub i64 %16, %8
  %41 = ashr exact i64 %40, 2
  %42 = icmp eq i64 %40, 0
  %43 = select i1 %42, i64 1, i64 %41
  %44 = icmp ugt i64 %43, 2305843009213693951
  br i1 %44, label %45, label %46

45:                                               ; preds = %38
  tail call void @abort() #28
  unreachable

46:                                               ; preds = %38
  %47 = add nuw nsw i64 %43, 3
  %48 = lshr i64 %47, 2
  %49 = shl i64 %43, 3
  %50 = tail call i8* @_Znwm(i64 %49) #29
  %51 = bitcast i8* %50 to i32**
  %52 = ptrtoint i8* %50 to i64
  %53 = getelementptr inbounds i32*, i32** %51, i64 %48
  %54 = ptrtoint i32** %53 to i64
  %55 = getelementptr inbounds i32*, i32** %51, i64 %43
  %56 = ptrtoint i32** %55 to i64
  %57 = ptrtoint i32** %4 to i64
  %58 = ptrtoint i32** %11 to i64
  %59 = sub i64 %58, %57
  %60 = ashr exact i64 %59, 3
  %61 = getelementptr inbounds i32*, i32** %53, i64 %60
  %62 = icmp eq i64 %59, 0
  br i1 %62, label %138, label %63

63:                                               ; preds = %46
  %64 = add i64 %59, -8
  %65 = lshr i64 %64, 3
  %66 = add nuw nsw i64 %65, 1
  %67 = and i64 %66, 7
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %84, label %69

69:                                               ; preds = %63, %69
  %70 = phi i32** [ %77, %69 ], [ %53, %63 ]
  %71 = phi i64 [ %78, %69 ], [ %54, %63 ]
  %72 = phi i32** [ %79, %69 ], [ %4, %63 ]
  %73 = phi i64 [ %80, %69 ], [ %67, %63 ]
  %74 = bitcast i32** %72 to i64*
  %75 = load i64, i64* %74, align 8
  %76 = inttoptr i64 %71 to i64*
  store i64 %75, i64* %76, align 8
  %77 = getelementptr inbounds i32*, i32** %70, i64 1
  %78 = ptrtoint i32** %77 to i64
  %79 = getelementptr inbounds i32*, i32** %72, i64 1
  %80 = add i64 %73, -1
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %82, label %69, !llvm.loop !363

82:                                               ; preds = %69
  %83 = ptrtoint i32** %77 to i64
  br label %84

84:                                               ; preds = %63, %82
  %85 = phi i32** [ %53, %63 ], [ %77, %82 ]
  %86 = phi i64 [ %54, %63 ], [ %83, %82 ]
  %87 = phi i32** [ %4, %63 ], [ %79, %82 ]
  %88 = icmp ult i64 %64, 56
  br i1 %88, label %135, label %89

89:                                               ; preds = %84, %89
  %90 = phi i32** [ %131, %89 ], [ %85, %84 ]
  %91 = phi i64 [ %132, %89 ], [ %86, %84 ]
  %92 = phi i32** [ %133, %89 ], [ %87, %84 ]
  %93 = bitcast i32** %92 to i64*
  %94 = load i64, i64* %93, align 8
  %95 = inttoptr i64 %91 to i64*
  store i64 %94, i64* %95, align 8
  %96 = getelementptr inbounds i32*, i32** %90, i64 1
  %97 = getelementptr inbounds i32*, i32** %92, i64 1
  %98 = bitcast i32** %97 to i64*
  %99 = load i64, i64* %98, align 8
  %100 = bitcast i32** %96 to i64*
  store i64 %99, i64* %100, align 8
  %101 = getelementptr inbounds i32*, i32** %90, i64 2
  %102 = getelementptr inbounds i32*, i32** %92, i64 2
  %103 = bitcast i32** %102 to i64*
  %104 = load i64, i64* %103, align 8
  %105 = bitcast i32** %101 to i64*
  store i64 %104, i64* %105, align 8
  %106 = getelementptr inbounds i32*, i32** %90, i64 3
  %107 = getelementptr inbounds i32*, i32** %92, i64 3
  %108 = bitcast i32** %107 to i64*
  %109 = load i64, i64* %108, align 8
  %110 = bitcast i32** %106 to i64*
  store i64 %109, i64* %110, align 8
  %111 = getelementptr inbounds i32*, i32** %90, i64 4
  %112 = getelementptr inbounds i32*, i32** %92, i64 4
  %113 = bitcast i32** %112 to i64*
  %114 = load i64, i64* %113, align 8
  %115 = bitcast i32** %111 to i64*
  store i64 %114, i64* %115, align 8
  %116 = getelementptr inbounds i32*, i32** %90, i64 5
  %117 = getelementptr inbounds i32*, i32** %92, i64 5
  %118 = bitcast i32** %117 to i64*
  %119 = load i64, i64* %118, align 8
  %120 = bitcast i32** %116 to i64*
  store i64 %119, i64* %120, align 8
  %121 = getelementptr inbounds i32*, i32** %90, i64 6
  %122 = getelementptr inbounds i32*, i32** %92, i64 6
  %123 = bitcast i32** %122 to i64*
  %124 = load i64, i64* %123, align 8
  %125 = bitcast i32** %121 to i64*
  store i64 %124, i64* %125, align 8
  %126 = getelementptr inbounds i32*, i32** %90, i64 7
  %127 = getelementptr inbounds i32*, i32** %92, i64 7
  %128 = bitcast i32** %127 to i64*
  %129 = load i64, i64* %128, align 8
  %130 = bitcast i32** %126 to i64*
  store i64 %129, i64* %130, align 8
  %131 = getelementptr inbounds i32*, i32** %90, i64 8
  %132 = ptrtoint i32** %131 to i64
  %133 = getelementptr inbounds i32*, i32** %92, i64 8
  %134 = icmp eq i32** %61, %131
  br i1 %134, label %135, label %89

135:                                              ; preds = %89, %84
  %136 = ptrtoint i32** %61 to i64
  %137 = load i32**, i32*** %5, align 8
  br label %138

138:                                              ; preds = %46, %135
  %139 = phi i32** [ %137, %135 ], [ %4, %46 ]
  %140 = phi i64 [ %136, %135 ], [ %54, %46 ]
  store i64 %52, i64* %39, align 8
  %141 = bitcast i32*** %3 to i64*
  store i64 %54, i64* %141, align 8
  %142 = bitcast i32*** %10 to i64*
  store i64 %140, i64* %142, align 8
  store i64 %56, i64* %15, align 8
  %143 = icmp eq i32** %139, null
  br i1 %143, label %147, label %144

144:                                              ; preds = %138
  %145 = bitcast i32** %139 to i8*
  tail call void @_ZdlPv(i8* %145) #29
  %146 = load i32**, i32*** %3, align 8
  br label %147

147:                                              ; preds = %144, %138, %34, %2
  %148 = phi i32** [ %146, %144 ], [ %53, %138 ], [ %36, %34 ], [ %4, %2 ]
  %149 = getelementptr inbounds i32*, i32** %148, i64 -1
  %150 = bitcast i32** %1 to i64*
  %151 = load i64, i64* %150, align 8
  %152 = bitcast i32** %149 to i64*
  store i64 %151, i64* %152, align 8
  %153 = load i32**, i32*** %3, align 8
  %154 = getelementptr inbounds i32*, i32** %153, i64 -1
  store i32** %154, i32*** %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIPiRNS_9allocatorIS1_EEE10push_frontERKS1_(%"struct.std::__1::__split_buffer.293"*, i32** dereferenceable(8)) local_unnamed_addr #8 comdat align 2 {
  %3 = getelementptr inbounds %"struct.std::__1::__split_buffer.293", %"struct.std::__1::__split_buffer.293"* %0, i64 0, i32 1
  %4 = load i32**, i32*** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__split_buffer.293", %"struct.std::__1::__split_buffer.293"* %0, i64 0, i32 0
  %6 = load i32**, i32*** %5, align 8
  %7 = icmp eq i32** %4, %6
  %8 = ptrtoint i32** %6 to i64
  br i1 %7, label %9, label %147

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"struct.std::__1::__split_buffer.293", %"struct.std::__1::__split_buffer.293"* %0, i64 0, i32 2
  %11 = load i32**, i32*** %10, align 8
  %12 = getelementptr inbounds %"struct.std::__1::__split_buffer.293", %"struct.std::__1::__split_buffer.293"* %0, i64 0, i32 3, i32 0, i32 0
  %13 = load i32**, i32*** %12, align 8
  %14 = icmp ult i32** %11, %13
  %15 = bitcast i32*** %12 to i64*
  %16 = ptrtoint i32** %13 to i64
  br i1 %14, label %17, label %38

17:                                               ; preds = %9
  %18 = ptrtoint i32** %11 to i64
  %19 = sub i64 %16, %18
  %20 = ashr exact i64 %19, 3
  %21 = add nsw i64 %20, 1
  %22 = sdiv i64 %21, 2
  %23 = getelementptr inbounds i32*, i32** %11, i64 %22
  %24 = ptrtoint i32** %4 to i64
  %25 = sub i64 %18, %24
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %34, label %27

27:                                               ; preds = %17
  %28 = ashr exact i64 %25, 3
  %29 = sub nsw i64 0, %28
  %30 = getelementptr inbounds i32*, i32** %23, i64 %29
  %31 = bitcast i32** %30 to i8*
  %32 = bitcast i32** %4 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %31, i8* align 8 %32, i64 %25, i1 false) #24
  %33 = load i32**, i32*** %10, align 8
  br label %34

34:                                               ; preds = %17, %27
  %35 = phi i32** [ %33, %27 ], [ %11, %17 ]
  %36 = phi i32** [ %30, %27 ], [ %23, %17 ]
  store i32** %36, i32*** %3, align 8
  %37 = getelementptr inbounds i32*, i32** %35, i64 %22
  store i32** %37, i32*** %10, align 8
  br label %147

38:                                               ; preds = %9
  %39 = bitcast %"struct.std::__1::__split_buffer.293"* %0 to i64*
  %40 = sub i64 %16, %8
  %41 = ashr exact i64 %40, 2
  %42 = icmp eq i64 %40, 0
  %43 = select i1 %42, i64 1, i64 %41
  %44 = icmp ugt i64 %43, 2305843009213693951
  br i1 %44, label %45, label %46

45:                                               ; preds = %38
  tail call void @abort() #28
  unreachable

46:                                               ; preds = %38
  %47 = add nuw nsw i64 %43, 3
  %48 = lshr i64 %47, 2
  %49 = shl i64 %43, 3
  %50 = tail call i8* @_Znwm(i64 %49) #29
  %51 = bitcast i8* %50 to i32**
  %52 = ptrtoint i8* %50 to i64
  %53 = getelementptr inbounds i32*, i32** %51, i64 %48
  %54 = ptrtoint i32** %53 to i64
  %55 = getelementptr inbounds i32*, i32** %51, i64 %43
  %56 = ptrtoint i32** %55 to i64
  %57 = ptrtoint i32** %4 to i64
  %58 = ptrtoint i32** %11 to i64
  %59 = sub i64 %58, %57
  %60 = ashr exact i64 %59, 3
  %61 = getelementptr inbounds i32*, i32** %53, i64 %60
  %62 = icmp eq i64 %59, 0
  br i1 %62, label %138, label %63

63:                                               ; preds = %46
  %64 = add i64 %59, -8
  %65 = lshr i64 %64, 3
  %66 = add nuw nsw i64 %65, 1
  %67 = and i64 %66, 7
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %84, label %69

69:                                               ; preds = %63, %69
  %70 = phi i32** [ %77, %69 ], [ %53, %63 ]
  %71 = phi i64 [ %78, %69 ], [ %54, %63 ]
  %72 = phi i32** [ %79, %69 ], [ %4, %63 ]
  %73 = phi i64 [ %80, %69 ], [ %67, %63 ]
  %74 = bitcast i32** %72 to i64*
  %75 = load i64, i64* %74, align 8
  %76 = inttoptr i64 %71 to i64*
  store i64 %75, i64* %76, align 8
  %77 = getelementptr inbounds i32*, i32** %70, i64 1
  %78 = ptrtoint i32** %77 to i64
  %79 = getelementptr inbounds i32*, i32** %72, i64 1
  %80 = add i64 %73, -1
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %82, label %69, !llvm.loop !364

82:                                               ; preds = %69
  %83 = ptrtoint i32** %77 to i64
  br label %84

84:                                               ; preds = %63, %82
  %85 = phi i32** [ %53, %63 ], [ %77, %82 ]
  %86 = phi i64 [ %54, %63 ], [ %83, %82 ]
  %87 = phi i32** [ %4, %63 ], [ %79, %82 ]
  %88 = icmp ult i64 %64, 56
  br i1 %88, label %135, label %89

89:                                               ; preds = %84, %89
  %90 = phi i32** [ %131, %89 ], [ %85, %84 ]
  %91 = phi i64 [ %132, %89 ], [ %86, %84 ]
  %92 = phi i32** [ %133, %89 ], [ %87, %84 ]
  %93 = bitcast i32** %92 to i64*
  %94 = load i64, i64* %93, align 8
  %95 = inttoptr i64 %91 to i64*
  store i64 %94, i64* %95, align 8
  %96 = getelementptr inbounds i32*, i32** %90, i64 1
  %97 = getelementptr inbounds i32*, i32** %92, i64 1
  %98 = bitcast i32** %97 to i64*
  %99 = load i64, i64* %98, align 8
  %100 = bitcast i32** %96 to i64*
  store i64 %99, i64* %100, align 8
  %101 = getelementptr inbounds i32*, i32** %90, i64 2
  %102 = getelementptr inbounds i32*, i32** %92, i64 2
  %103 = bitcast i32** %102 to i64*
  %104 = load i64, i64* %103, align 8
  %105 = bitcast i32** %101 to i64*
  store i64 %104, i64* %105, align 8
  %106 = getelementptr inbounds i32*, i32** %90, i64 3
  %107 = getelementptr inbounds i32*, i32** %92, i64 3
  %108 = bitcast i32** %107 to i64*
  %109 = load i64, i64* %108, align 8
  %110 = bitcast i32** %106 to i64*
  store i64 %109, i64* %110, align 8
  %111 = getelementptr inbounds i32*, i32** %90, i64 4
  %112 = getelementptr inbounds i32*, i32** %92, i64 4
  %113 = bitcast i32** %112 to i64*
  %114 = load i64, i64* %113, align 8
  %115 = bitcast i32** %111 to i64*
  store i64 %114, i64* %115, align 8
  %116 = getelementptr inbounds i32*, i32** %90, i64 5
  %117 = getelementptr inbounds i32*, i32** %92, i64 5
  %118 = bitcast i32** %117 to i64*
  %119 = load i64, i64* %118, align 8
  %120 = bitcast i32** %116 to i64*
  store i64 %119, i64* %120, align 8
  %121 = getelementptr inbounds i32*, i32** %90, i64 6
  %122 = getelementptr inbounds i32*, i32** %92, i64 6
  %123 = bitcast i32** %122 to i64*
  %124 = load i64, i64* %123, align 8
  %125 = bitcast i32** %121 to i64*
  store i64 %124, i64* %125, align 8
  %126 = getelementptr inbounds i32*, i32** %90, i64 7
  %127 = getelementptr inbounds i32*, i32** %92, i64 7
  %128 = bitcast i32** %127 to i64*
  %129 = load i64, i64* %128, align 8
  %130 = bitcast i32** %126 to i64*
  store i64 %129, i64* %130, align 8
  %131 = getelementptr inbounds i32*, i32** %90, i64 8
  %132 = ptrtoint i32** %131 to i64
  %133 = getelementptr inbounds i32*, i32** %92, i64 8
  %134 = icmp eq i32** %61, %131
  br i1 %134, label %135, label %89

135:                                              ; preds = %89, %84
  %136 = ptrtoint i32** %61 to i64
  %137 = load i32**, i32*** %5, align 8
  br label %138

138:                                              ; preds = %46, %135
  %139 = phi i32** [ %137, %135 ], [ %4, %46 ]
  %140 = phi i64 [ %136, %135 ], [ %54, %46 ]
  store i64 %52, i64* %39, align 8
  %141 = bitcast i32*** %3 to i64*
  store i64 %54, i64* %141, align 8
  %142 = bitcast i32*** %10 to i64*
  store i64 %140, i64* %142, align 8
  store i64 %56, i64* %15, align 8
  %143 = icmp eq i32** %139, null
  br i1 %143, label %147, label %144

144:                                              ; preds = %138
  %145 = bitcast i32** %139 to i8*
  tail call void @_ZdlPv(i8* %145) #29
  %146 = load i32**, i32*** %3, align 8
  br label %147

147:                                              ; preds = %144, %138, %34, %2
  %148 = phi i32** [ %146, %144 ], [ %53, %138 ], [ %36, %34 ], [ %4, %2 ]
  %149 = getelementptr inbounds i32*, i32** %148, i64 -1
  %150 = bitcast i32** %1 to i64*
  %151 = load i64, i64* %150, align 8
  %152 = bitcast i32** %149 to i64*
  store i64 %151, i64* %152, align 8
  %153 = load i32**, i32*** %3, align 8
  %154 = getelementptr inbounds i32*, i32** %153, i64 -1
  store i32** %154, i32*** %3, align 8
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.ctpop.i64(i64) #21

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+bmi,+bmi2,+cx8,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+bmi,+bmi2,+cx8,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+bmi,+bmi2,+cx8,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+bmi,+bmi2,+cx8,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+avx512bw,+avx512dq,+avx512f,+avx512vl,+bmi,+bmi2,+cx8,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="512" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+avx512bw,+avx512dq,+avx512f,+avx512vl,+bmi,+bmi2,+cx8,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #15 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+avx512bw,+avx512dq,+avx512f,+avx512vl,+bmi,+bmi2,+cx8,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #16 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+avx512bw,+avx512dq,+avx512f,+avx512vl,+bmi,+bmi2,+cx8,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #17 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #18 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #19 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #20 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #21 = { nounwind readnone speculatable }
attributes #22 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #23 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #24 = { nounwind }
attributes #25 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #26 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #27 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #28 = { noreturn nounwind }
attributes #29 = { builtin nounwind }
attributes #30 = { nounwind readnone }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5}
!5 = !{!"llvm.loop.unroll.disable"}
!6 = distinct !{!6, !7, !3}
!7 = !{!"llvm.loop.unroll.runtime.disable"}
!8 = distinct !{!8, !3}
!9 = distinct !{!9, !5}
!10 = distinct !{!10, !7, !3}
!11 = !{!12}
!12 = distinct !{!12, !13, !"_ZN3hwy6N_SSE4L5LoadUIiEENS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPKS3_: argument 0"}
!13 = distinct !{!13, !"_ZN3hwy6N_SSE4L5LoadUIiEENS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPKS3_"}
!14 = !{!15}
!15 = distinct !{!15, !16, !"_ZN3hwy6N_SSE4L6StoreUIiEEvNS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPS3_: argument 0"}
!16 = distinct !{!16, !"_ZN3hwy6N_SSE4L6StoreUIiEEvNS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPS3_"}
!17 = !{!18}
!18 = distinct !{!18, !19, !"_ZN3hwy6N_SSE4L5LoadUIiEENS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPKS3_: argument 0"}
!19 = distinct !{!19, !"_ZN3hwy6N_SSE4L5LoadUIiEENS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPKS3_"}
!20 = !{!21}
!21 = distinct !{!21, !22, !"_ZN3hwy6N_SSE4L5LoadUIiEENS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPKS3_: argument 0"}
!22 = distinct !{!22, !"_ZN3hwy6N_SSE4L5LoadUIiEENS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPKS3_"}
!23 = distinct !{!23, !5}
!24 = distinct !{!24, !3}
!25 = distinct !{!25, !5}
!26 = distinct !{!26, !7, !3}
!27 = distinct !{!27, !3}
!28 = distinct !{!28, !5}
!29 = distinct !{!29, !7, !3}
!30 = !{!31}
!31 = distinct !{!31, !32, !"_ZN3hwy6N_SSE4L5LoadUIiEENS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPKS3_: argument 0"}
!32 = distinct !{!32, !"_ZN3hwy6N_SSE4L5LoadUIiEENS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPKS3_"}
!33 = !{!34}
!34 = distinct !{!34, !35, !"_ZN3hwy6N_SSE4L6StoreUIiEEvNS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPS3_: argument 0"}
!35 = distinct !{!35, !"_ZN3hwy6N_SSE4L6StoreUIiEEvNS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPS3_"}
!36 = !{!37}
!37 = distinct !{!37, !38, !"_ZN3hwy6N_SSE4L5LoadUIiEENS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPKS3_: argument 0"}
!38 = distinct !{!38, !"_ZN3hwy6N_SSE4L5LoadUIiEENS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPKS3_"}
!39 = !{!40}
!40 = distinct !{!40, !41, !"_ZN3hwy6N_SSE4L5LoadUIiEENS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPKS3_: argument 0"}
!41 = distinct !{!41, !"_ZN3hwy6N_SSE4L5LoadUIiEENS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPKS3_"}
!42 = distinct !{!42, !5}
!43 = distinct !{!43, !3}
!44 = distinct !{!44, !5}
!45 = distinct !{!45, !7, !3}
!46 = distinct !{!46, !3}
!47 = distinct !{!47, !5}
!48 = distinct !{!48, !7, !3}
!49 = !{!50}
!50 = distinct !{!50, !51, !"_ZN3hwy6N_SSE4L5LoadUIiEENS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPKS3_: argument 0"}
!51 = distinct !{!51, !"_ZN3hwy6N_SSE4L5LoadUIiEENS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPKS3_"}
!52 = !{!53}
!53 = distinct !{!53, !54, !"_ZN3hwy6N_SSE4L6StoreUIiEEvNS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPS3_: argument 0"}
!54 = distinct !{!54, !"_ZN3hwy6N_SSE4L6StoreUIiEEvNS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPS3_"}
!55 = !{!56}
!56 = distinct !{!56, !57, !"_ZN3hwy6N_SSE4L5LoadUIiEENS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPKS3_: argument 0"}
!57 = distinct !{!57, !"_ZN3hwy6N_SSE4L5LoadUIiEENS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPKS3_"}
!58 = !{!59}
!59 = distinct !{!59, !60, !"_ZN3hwy6N_SSE4L5LoadUIiEENS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPKS3_: argument 0"}
!60 = distinct !{!60, !"_ZN3hwy6N_SSE4L5LoadUIiEENS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPKS3_"}
!61 = distinct !{!61, !3}
!62 = distinct !{!62, !5}
!63 = distinct !{!63, !7, !3}
!64 = distinct !{!64, !3}
!65 = distinct !{!65, !5}
!66 = distinct !{!66, !7, !3}
!67 = !{!68}
!68 = distinct !{!68, !69, !"_ZN3hwy6N_SSE4L5LoadUIiEENS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPKS3_: argument 0"}
!69 = distinct !{!69, !"_ZN3hwy6N_SSE4L5LoadUIiEENS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPKS3_"}
!70 = !{!71}
!71 = distinct !{!71, !72, !"_ZN3hwy6N_SSE4L6StoreUIiEEvNS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPS3_: argument 0"}
!72 = distinct !{!72, !"_ZN3hwy6N_SSE4L6StoreUIiEEvNS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPS3_"}
!73 = !{!74}
!74 = distinct !{!74, !75, !"_ZN3hwy6N_SSE4L5LoadUIiEENS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPKS3_: argument 0"}
!75 = distinct !{!75, !"_ZN3hwy6N_SSE4L5LoadUIiEENS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPKS3_"}
!76 = !{!77}
!77 = distinct !{!77, !78, !"_ZN3hwy6N_SSE4L5LoadUIiEENS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPKS3_: argument 0"}
!78 = distinct !{!78, !"_ZN3hwy6N_SSE4L5LoadUIiEENS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPKS3_"}
!79 = distinct !{!79, !3}
!80 = distinct !{!80, !7, !3}
!81 = distinct !{!81, !3}
!82 = distinct !{!82, !7, !3}
!83 = !{!84}
!84 = distinct !{!84, !85, !"_ZN3hwy6N_AVX2L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 1"}
!85 = distinct !{!85, !"_ZN3hwy6N_AVX2L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_"}
!86 = !{!87}
!87 = distinct !{!87, !85, !"_ZN3hwy6N_AVX2L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 0"}
!88 = !{!89}
!89 = distinct !{!89, !90, !"_ZN3hwy6N_AVX2L6StoreUIiEEvNS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPS3_: argument 0"}
!90 = distinct !{!90, !"_ZN3hwy6N_AVX2L6StoreUIiEEvNS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPS3_"}
!91 = !{!92}
!92 = distinct !{!92, !93, !"_ZN3hwy6N_AVX2L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 1"}
!93 = distinct !{!93, !"_ZN3hwy6N_AVX2L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_"}
!94 = !{!95}
!95 = distinct !{!95, !93, !"_ZN3hwy6N_AVX2L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 0"}
!96 = !{!97}
!97 = distinct !{!97, !98, !"_ZN3hwy6N_AVX2L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 1"}
!98 = distinct !{!98, !"_ZN3hwy6N_AVX2L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_"}
!99 = !{!100}
!100 = distinct !{!100, !98, !"_ZN3hwy6N_AVX2L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 0"}
!101 = distinct !{!101, !5}
!102 = distinct !{!102, !3}
!103 = distinct !{!103, !7, !3}
!104 = distinct !{!104, !3}
!105 = distinct !{!105, !7, !3}
!106 = !{!107}
!107 = distinct !{!107, !108, !"_ZN3hwy6N_AVX2L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 1"}
!108 = distinct !{!108, !"_ZN3hwy6N_AVX2L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_"}
!109 = !{!110}
!110 = distinct !{!110, !108, !"_ZN3hwy6N_AVX2L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 0"}
!111 = !{!112}
!112 = distinct !{!112, !113, !"_ZN3hwy6N_AVX2L6StoreUIiEEvNS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPS3_: argument 0"}
!113 = distinct !{!113, !"_ZN3hwy6N_AVX2L6StoreUIiEEvNS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPS3_"}
!114 = !{!115}
!115 = distinct !{!115, !116, !"_ZN3hwy6N_AVX2L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 1"}
!116 = distinct !{!116, !"_ZN3hwy6N_AVX2L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_"}
!117 = !{!118}
!118 = distinct !{!118, !116, !"_ZN3hwy6N_AVX2L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 0"}
!119 = !{!120}
!120 = distinct !{!120, !121, !"_ZN3hwy6N_AVX2L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 1"}
!121 = distinct !{!121, !"_ZN3hwy6N_AVX2L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_"}
!122 = !{!123}
!123 = distinct !{!123, !121, !"_ZN3hwy6N_AVX2L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 0"}
!124 = distinct !{!124, !3}
!125 = distinct !{!125, !7, !3}
!126 = distinct !{!126, !3}
!127 = distinct !{!127, !7, !3}
!128 = distinct !{!128, !3}
!129 = distinct !{!129, !7, !3}
!130 = !{!131}
!131 = distinct !{!131, !132, !"_ZN3hwy6N_AVX2L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 1"}
!132 = distinct !{!132, !"_ZN3hwy6N_AVX2L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_"}
!133 = !{!134}
!134 = distinct !{!134, !132, !"_ZN3hwy6N_AVX2L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 0"}
!135 = !{!136}
!136 = distinct !{!136, !137, !"_ZN3hwy6N_AVX2L6StoreUIiEEvNS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPS3_: argument 0"}
!137 = distinct !{!137, !"_ZN3hwy6N_AVX2L6StoreUIiEEvNS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPS3_"}
!138 = !{!139}
!139 = distinct !{!139, !140, !"_ZN3hwy6N_AVX2L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 1"}
!140 = distinct !{!140, !"_ZN3hwy6N_AVX2L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_"}
!141 = !{!142}
!142 = distinct !{!142, !140, !"_ZN3hwy6N_AVX2L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 0"}
!143 = !{!144}
!144 = distinct !{!144, !145, !"_ZN3hwy6N_AVX2L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 1"}
!145 = distinct !{!145, !"_ZN3hwy6N_AVX2L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_"}
!146 = !{!147}
!147 = distinct !{!147, !145, !"_ZN3hwy6N_AVX2L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 0"}
!148 = distinct !{!148, !3}
!149 = distinct !{!149, !7, !3}
!150 = distinct !{!150, !3}
!151 = distinct !{!151, !7, !3}
!152 = !{!153}
!153 = distinct !{!153, !154, !"_ZN3hwy6N_AVX2L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 1"}
!154 = distinct !{!154, !"_ZN3hwy6N_AVX2L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_"}
!155 = !{!156}
!156 = distinct !{!156, !154, !"_ZN3hwy6N_AVX2L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 0"}
!157 = !{!158}
!158 = distinct !{!158, !159, !"_ZN3hwy6N_AVX2L6StoreUIiEEvNS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPS3_: argument 0"}
!159 = distinct !{!159, !"_ZN3hwy6N_AVX2L6StoreUIiEEvNS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPS3_"}
!160 = !{!161}
!161 = distinct !{!161, !162, !"_ZN3hwy6N_AVX2L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 1"}
!162 = distinct !{!162, !"_ZN3hwy6N_AVX2L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_"}
!163 = !{!164}
!164 = distinct !{!164, !162, !"_ZN3hwy6N_AVX2L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 0"}
!165 = !{!166}
!166 = distinct !{!166, !167, !"_ZN3hwy6N_AVX2L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 1"}
!167 = distinct !{!167, !"_ZN3hwy6N_AVX2L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_"}
!168 = !{!169}
!169 = distinct !{!169, !167, !"_ZN3hwy6N_AVX2L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 0"}
!170 = distinct !{!170, !3}
!171 = distinct !{!171, !7, !3}
!172 = distinct !{!172, !3}
!173 = distinct !{!173, !7, !3}
!174 = !{!175}
!175 = distinct !{!175, !176, !"_ZN3hwy6N_AVX3L5LoadUIiEENS0_6Vec512IT_EENS0_4SimdIS3_XdvLi64EstS3_EEEPKS3_: argument 1"}
!176 = distinct !{!176, !"_ZN3hwy6N_AVX3L5LoadUIiEENS0_6Vec512IT_EENS0_4SimdIS3_XdvLi64EstS3_EEEPKS3_"}
!177 = !{!178}
!178 = distinct !{!178, !176, !"_ZN3hwy6N_AVX3L5LoadUIiEENS0_6Vec512IT_EENS0_4SimdIS3_XdvLi64EstS3_EEEPKS3_: argument 0"}
!179 = !{!180}
!180 = distinct !{!180, !181, !"_ZN3hwy6N_AVX3L6StoreUIiEEvNS0_6Vec512IT_EENS0_4SimdIS3_XdvLi64EstS3_EEEPS3_: argument 0"}
!181 = distinct !{!181, !"_ZN3hwy6N_AVX3L6StoreUIiEEvNS0_6Vec512IT_EENS0_4SimdIS3_XdvLi64EstS3_EEEPS3_"}
!182 = !{!183}
!183 = distinct !{!183, !184, !"_ZN3hwy6N_AVX3L5LoadUIiEENS0_6Vec512IT_EENS0_4SimdIS3_XdvLi64EstS3_EEEPKS3_: argument 1"}
!184 = distinct !{!184, !"_ZN3hwy6N_AVX3L5LoadUIiEENS0_6Vec512IT_EENS0_4SimdIS3_XdvLi64EstS3_EEEPKS3_"}
!185 = !{!186}
!186 = distinct !{!186, !184, !"_ZN3hwy6N_AVX3L5LoadUIiEENS0_6Vec512IT_EENS0_4SimdIS3_XdvLi64EstS3_EEEPKS3_: argument 0"}
!187 = !{!188}
!188 = distinct !{!188, !189, !"_ZN3hwy6N_AVX3L5LoadUIiEENS0_6Vec512IT_EENS0_4SimdIS3_XdvLi64EstS3_EEEPKS3_: argument 1"}
!189 = distinct !{!189, !"_ZN3hwy6N_AVX3L5LoadUIiEENS0_6Vec512IT_EENS0_4SimdIS3_XdvLi64EstS3_EEEPKS3_"}
!190 = !{!191}
!191 = distinct !{!191, !189, !"_ZN3hwy6N_AVX3L5LoadUIiEENS0_6Vec512IT_EENS0_4SimdIS3_XdvLi64EstS3_EEEPKS3_: argument 0"}
!192 = distinct !{!192, !3}
!193 = distinct !{!193, !7, !3}
!194 = distinct !{!194, !3}
!195 = distinct !{!195, !7, !3}
!196 = distinct !{!196, !3}
!197 = distinct !{!197, !7, !3}
!198 = !{!199}
!199 = distinct !{!199, !200, !"_ZN3hwy6N_AVX3L5LoadUIiEENS0_6Vec512IT_EENS0_4SimdIS3_XdvLi64EstS3_EEEPKS3_: argument 1"}
!200 = distinct !{!200, !"_ZN3hwy6N_AVX3L5LoadUIiEENS0_6Vec512IT_EENS0_4SimdIS3_XdvLi64EstS3_EEEPKS3_"}
!201 = !{!202}
!202 = distinct !{!202, !200, !"_ZN3hwy6N_AVX3L5LoadUIiEENS0_6Vec512IT_EENS0_4SimdIS3_XdvLi64EstS3_EEEPKS3_: argument 0"}
!203 = !{!204}
!204 = distinct !{!204, !205, !"_ZN3hwy6N_AVX3L6StoreUIiEEvNS0_6Vec512IT_EENS0_4SimdIS3_XdvLi64EstS3_EEEPS3_: argument 0"}
!205 = distinct !{!205, !"_ZN3hwy6N_AVX3L6StoreUIiEEvNS0_6Vec512IT_EENS0_4SimdIS3_XdvLi64EstS3_EEEPS3_"}
!206 = !{!207}
!207 = distinct !{!207, !208, !"_ZN3hwy6N_AVX3L5LoadUIiEENS0_6Vec512IT_EENS0_4SimdIS3_XdvLi64EstS3_EEEPKS3_: argument 1"}
!208 = distinct !{!208, !"_ZN3hwy6N_AVX3L5LoadUIiEENS0_6Vec512IT_EENS0_4SimdIS3_XdvLi64EstS3_EEEPKS3_"}
!209 = !{!210}
!210 = distinct !{!210, !208, !"_ZN3hwy6N_AVX3L5LoadUIiEENS0_6Vec512IT_EENS0_4SimdIS3_XdvLi64EstS3_EEEPKS3_: argument 0"}
!211 = !{!212}
!212 = distinct !{!212, !213, !"_ZN3hwy6N_AVX3L5LoadUIiEENS0_6Vec512IT_EENS0_4SimdIS3_XdvLi64EstS3_EEEPKS3_: argument 1"}
!213 = distinct !{!213, !"_ZN3hwy6N_AVX3L5LoadUIiEENS0_6Vec512IT_EENS0_4SimdIS3_XdvLi64EstS3_EEEPKS3_"}
!214 = !{!215}
!215 = distinct !{!215, !213, !"_ZN3hwy6N_AVX3L5LoadUIiEENS0_6Vec512IT_EENS0_4SimdIS3_XdvLi64EstS3_EEEPKS3_: argument 0"}
!216 = distinct !{!216, !3}
!217 = distinct !{!217, !7, !3}
!218 = distinct !{!218, !3}
!219 = distinct !{!219, !7, !3}
!220 = distinct !{!220, !3}
!221 = distinct !{!221, !7, !3}
!222 = !{!223}
!223 = distinct !{!223, !224, !"_ZN3hwy6N_AVX3L5LoadUIiEENS0_6Vec512IT_EENS0_4SimdIS3_XdvLi64EstS3_EEEPKS3_: argument 1"}
!224 = distinct !{!224, !"_ZN3hwy6N_AVX3L5LoadUIiEENS0_6Vec512IT_EENS0_4SimdIS3_XdvLi64EstS3_EEEPKS3_"}
!225 = !{!226}
!226 = distinct !{!226, !224, !"_ZN3hwy6N_AVX3L5LoadUIiEENS0_6Vec512IT_EENS0_4SimdIS3_XdvLi64EstS3_EEEPKS3_: argument 0"}
!227 = !{!228}
!228 = distinct !{!228, !229, !"_ZN3hwy6N_AVX3L6StoreUIiEEvNS0_6Vec512IT_EENS0_4SimdIS3_XdvLi64EstS3_EEEPS3_: argument 0"}
!229 = distinct !{!229, !"_ZN3hwy6N_AVX3L6StoreUIiEEvNS0_6Vec512IT_EENS0_4SimdIS3_XdvLi64EstS3_EEEPS3_"}
!230 = !{!231}
!231 = distinct !{!231, !232, !"_ZN3hwy6N_AVX3L5LoadUIiEENS0_6Vec512IT_EENS0_4SimdIS3_XdvLi64EstS3_EEEPKS3_: argument 1"}
!232 = distinct !{!232, !"_ZN3hwy6N_AVX3L5LoadUIiEENS0_6Vec512IT_EENS0_4SimdIS3_XdvLi64EstS3_EEEPKS3_"}
!233 = !{!234}
!234 = distinct !{!234, !232, !"_ZN3hwy6N_AVX3L5LoadUIiEENS0_6Vec512IT_EENS0_4SimdIS3_XdvLi64EstS3_EEEPKS3_: argument 0"}
!235 = !{!236}
!236 = distinct !{!236, !237, !"_ZN3hwy6N_AVX3L5LoadUIiEENS0_6Vec512IT_EENS0_4SimdIS3_XdvLi64EstS3_EEEPKS3_: argument 1"}
!237 = distinct !{!237, !"_ZN3hwy6N_AVX3L5LoadUIiEENS0_6Vec512IT_EENS0_4SimdIS3_XdvLi64EstS3_EEEPKS3_"}
!238 = !{!239}
!239 = distinct !{!239, !237, !"_ZN3hwy6N_AVX3L5LoadUIiEENS0_6Vec512IT_EENS0_4SimdIS3_XdvLi64EstS3_EEEPKS3_: argument 0"}
!240 = distinct !{!240, !3}
!241 = distinct !{!241, !7, !3}
!242 = distinct !{!242, !3}
!243 = distinct !{!243, !7, !3}
!244 = !{!245}
!245 = distinct !{!245, !246, !"_ZN3hwy6N_AVX3L5LoadUIiEENS0_6Vec512IT_EENS0_4SimdIS3_XdvLi64EstS3_EEEPKS3_: argument 1"}
!246 = distinct !{!246, !"_ZN3hwy6N_AVX3L5LoadUIiEENS0_6Vec512IT_EENS0_4SimdIS3_XdvLi64EstS3_EEEPKS3_"}
!247 = !{!248}
!248 = distinct !{!248, !246, !"_ZN3hwy6N_AVX3L5LoadUIiEENS0_6Vec512IT_EENS0_4SimdIS3_XdvLi64EstS3_EEEPKS3_: argument 0"}
!249 = !{!250}
!250 = distinct !{!250, !251, !"_ZN3hwy6N_AVX3L6StoreUIiEEvNS0_6Vec512IT_EENS0_4SimdIS3_XdvLi64EstS3_EEEPS3_: argument 0"}
!251 = distinct !{!251, !"_ZN3hwy6N_AVX3L6StoreUIiEEvNS0_6Vec512IT_EENS0_4SimdIS3_XdvLi64EstS3_EEEPS3_"}
!252 = !{!253}
!253 = distinct !{!253, !254, !"_ZN3hwy6N_AVX3L5LoadUIiEENS0_6Vec512IT_EENS0_4SimdIS3_XdvLi64EstS3_EEEPKS3_: argument 1"}
!254 = distinct !{!254, !"_ZN3hwy6N_AVX3L5LoadUIiEENS0_6Vec512IT_EENS0_4SimdIS3_XdvLi64EstS3_EEEPKS3_"}
!255 = !{!256}
!256 = distinct !{!256, !254, !"_ZN3hwy6N_AVX3L5LoadUIiEENS0_6Vec512IT_EENS0_4SimdIS3_XdvLi64EstS3_EEEPKS3_: argument 0"}
!257 = !{!258}
!258 = distinct !{!258, !259, !"_ZN3hwy6N_AVX3L5LoadUIiEENS0_6Vec512IT_EENS0_4SimdIS3_XdvLi64EstS3_EEEPKS3_: argument 1"}
!259 = distinct !{!259, !"_ZN3hwy6N_AVX3L5LoadUIiEENS0_6Vec512IT_EENS0_4SimdIS3_XdvLi64EstS3_EEEPKS3_"}
!260 = !{!261}
!261 = distinct !{!261, !259, !"_ZN3hwy6N_AVX3L5LoadUIiEENS0_6Vec512IT_EENS0_4SimdIS3_XdvLi64EstS3_EEEPKS3_: argument 0"}
!262 = distinct !{!262, !3}
!263 = distinct !{!263, !5}
!264 = distinct !{!264, !7, !3}
!265 = !{!266, !268}
!266 = distinct !{!266, !267, !"_ZN3hwy8N_SCALAR4LoadIiEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!267 = distinct !{!267, !"_ZN3hwy8N_SCALAR4LoadIiEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!268 = distinct !{!268, !269, !"_ZN3hwy8N_SCALAR5LoadUIiEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!269 = distinct !{!269, !"_ZN3hwy8N_SCALAR5LoadUIiEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!270 = !{!271, !273}
!271 = distinct !{!271, !272, !"_ZN3hwy8N_SCALAR5StoreIiEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_: argument 0"}
!272 = distinct !{!272, !"_ZN3hwy8N_SCALAR5StoreIiEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_"}
!273 = distinct !{!273, !274, !"_ZN3hwy8N_SCALAR6StoreUIiEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_: argument 0"}
!274 = distinct !{!274, !"_ZN3hwy8N_SCALAR6StoreUIiEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_"}
!275 = !{!266, !268, !276}
!276 = distinct !{!276, !277}
!277 = distinct !{!277, !"LVerDomain"}
!278 = !{!271, !273, !279}
!279 = distinct !{!279, !277}
!280 = !{!276}
!281 = distinct !{!281, !3}
!282 = distinct !{!282, !3}
!283 = distinct !{!283, !5}
!284 = distinct !{!284, !7, !3}
!285 = distinct !{!285, !3}
!286 = !{!287, !289}
!287 = distinct !{!287, !288, !"_ZN3hwy8N_SCALAR4LoadIiEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!288 = distinct !{!288, !"_ZN3hwy8N_SCALAR4LoadIiEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!289 = distinct !{!289, !290, !"_ZN3hwy8N_SCALAR5LoadUIiEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!290 = distinct !{!290, !"_ZN3hwy8N_SCALAR5LoadUIiEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!291 = !{!292, !294}
!292 = distinct !{!292, !293, !"_ZN3hwy8N_SCALAR4LoadIiEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!293 = distinct !{!293, !"_ZN3hwy8N_SCALAR4LoadIiEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!294 = distinct !{!294, !295, !"_ZN3hwy8N_SCALAR5LoadUIiEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!295 = distinct !{!295, !"_ZN3hwy8N_SCALAR5LoadUIiEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!296 = distinct !{!296, !5}
!297 = distinct !{!297, !5}
!298 = distinct !{!298, !5}
!299 = !{i32 0, i32 33}
!300 = !{i64 0, i64 65}
!301 = distinct !{!301, !5}
!302 = distinct !{!302, !5}
!303 = !{!304}
!304 = distinct !{!304, !305, !"_ZZN3jxl11TreeSamples21PreQuantizePropertiesERKNSt3__15arrayINS2_IjLm2EEELm2EEERKNS1_6vectorINS_21ModularMultiplierInfoENS1_9allocatorIS8_EEEERKNS7_IjNS9_IjEEEESH_RNS7_IiNS9_IiEEEESK_mENK3$_4clEv: argument 0"}
!305 = distinct !{!305, !"_ZZN3jxl11TreeSamples21PreQuantizePropertiesERKNSt3__15arrayINS2_IjLm2EEELm2EEERKNS1_6vectorINS_21ModularMultiplierInfoENS1_9allocatorIS8_EEEERKNS7_IjNS9_IjEEEESH_RNS7_IiNS9_IiEEEESK_mENK3$_4clEv"}
!306 = !{!307}
!307 = distinct !{!307, !308, !"_ZZN3jxl11TreeSamples21PreQuantizePropertiesERKNSt3__15arrayINS2_IjLm2EEELm2EEERKNS1_6vectorINS_21ModularMultiplierInfoENS1_9allocatorIS8_EEEERKNS7_IjNS9_IjEEEESH_RNS7_IiNS9_IiEEEESK_mENK3$_5clEv: argument 0"}
!308 = distinct !{!308, !"_ZZN3jxl11TreeSamples21PreQuantizePropertiesERKNSt3__15arrayINS2_IjLm2EEELm2EEERKNS1_6vectorINS_21ModularMultiplierInfoENS1_9allocatorIS8_EEEERKNS7_IjNS9_IjEEEESH_RNS7_IiNS9_IiEEEESK_mENK3$_5clEv"}
!309 = !{!310}
!310 = distinct !{!310, !311, !"_ZZN3jxl11TreeSamples21PreQuantizePropertiesERKNSt3__15arrayINS2_IjLm2EEELm2EEERKNS1_6vectorINS_21ModularMultiplierInfoENS1_9allocatorIS8_EEEERKNS7_IjNS9_IjEEEESH_RNS7_IiNS9_IiEEEESK_mENK3$_6clEv: argument 0"}
!311 = distinct !{!311, !"_ZZN3jxl11TreeSamples21PreQuantizePropertiesERKNSt3__15arrayINS2_IjLm2EEELm2EEERKNS1_6vectorINS_21ModularMultiplierInfoENS1_9allocatorIS8_EEEERKNS7_IjNS9_IjEEEESH_RNS7_IiNS9_IiEEEESK_mENK3$_6clEv"}
!312 = !{!313}
!313 = distinct !{!313, !314, !"_ZZN3jxl11TreeSamples21PreQuantizePropertiesERKNSt3__15arrayINS2_IjLm2EEELm2EEERKNS1_6vectorINS_21ModularMultiplierInfoENS1_9allocatorIS8_EEEERKNS7_IjNS9_IjEEEESH_RNS7_IiNS9_IiEEEESK_mENK3$_7clEv: argument 0"}
!314 = distinct !{!314, !"_ZZN3jxl11TreeSamples21PreQuantizePropertiesERKNSt3__15arrayINS2_IjLm2EEELm2EEERKNS1_6vectorINS_21ModularMultiplierInfoENS1_9allocatorIS8_EEEERKNS7_IjNS9_IjEEEESH_RNS7_IiNS9_IiEEEESK_mENK3$_7clEv"}
!315 = !{!316, !318}
!316 = distinct !{!316, !317, !"_ZZN3jxl11TreeSamples21PreQuantizePropertiesERKNSt3__15arrayINS2_IjLm2EEELm2EEERKNS1_6vectorINS_21ModularMultiplierInfoENS1_9allocatorIS8_EEEERKNS7_IjNS9_IjEEEESH_RNS7_IiNS9_IiEEEESK_mENK3$_7clEv: argument 0"}
!317 = distinct !{!317, !"_ZZN3jxl11TreeSamples21PreQuantizePropertiesERKNSt3__15arrayINS2_IjLm2EEELm2EEERKNS1_6vectorINS_21ModularMultiplierInfoENS1_9allocatorIS8_EEEERKNS7_IjNS9_IjEEEESH_RNS7_IiNS9_IiEEEESK_mENK3$_7clEv"}
!318 = distinct !{!318, !319, !"_ZZN3jxl11TreeSamples21PreQuantizePropertiesERKNSt3__15arrayINS2_IjLm2EEELm2EEERKNS1_6vectorINS_21ModularMultiplierInfoENS1_9allocatorIS8_EEEERKNS7_IjNS9_IjEEEESH_RNS7_IiNS9_IiEEEESK_mENK3$_8clEv: argument 0"}
!319 = distinct !{!319, !"_ZZN3jxl11TreeSamples21PreQuantizePropertiesERKNSt3__15arrayINS2_IjLm2EEELm2EEERKNS1_6vectorINS_21ModularMultiplierInfoENS1_9allocatorIS8_EEEERKNS7_IjNS9_IjEEEESH_RNS7_IiNS9_IiEEEESK_mENK3$_8clEv"}
!320 = !{!316}
!321 = !{!318}
!322 = distinct !{!322, !3}
!323 = distinct !{!323, !7, !3}
!324 = !{!325, !327}
!325 = distinct !{!325, !326, !"_ZZN3jxl11TreeSamples21PreQuantizePropertiesERKNSt3__15arrayINS2_IjLm2EEELm2EEERKNS1_6vectorINS_21ModularMultiplierInfoENS1_9allocatorIS8_EEEERKNS7_IjNS9_IjEEEESH_RNS7_IiNS9_IiEEEESK_mENK4$_11clEv: argument 0"}
!326 = distinct !{!326, !"_ZZN3jxl11TreeSamples21PreQuantizePropertiesERKNSt3__15arrayINS2_IjLm2EEELm2EEERKNS1_6vectorINS_21ModularMultiplierInfoENS1_9allocatorIS8_EEEERKNS7_IjNS9_IjEEEESH_RNS7_IiNS9_IiEEEESK_mENK4$_11clEv"}
!327 = distinct !{!327, !328, !"_ZZN3jxl11TreeSamples21PreQuantizePropertiesERKNSt3__15arrayINS2_IjLm2EEELm2EEERKNS1_6vectorINS_21ModularMultiplierInfoENS1_9allocatorIS8_EEEERKNS7_IjNS9_IjEEEESH_RNS7_IiNS9_IiEEEESK_mENK3$_9clEv: argument 0"}
!328 = distinct !{!328, !"_ZZN3jxl11TreeSamples21PreQuantizePropertiesERKNSt3__15arrayINS2_IjLm2EEELm2EEERKNS1_6vectorINS_21ModularMultiplierInfoENS1_9allocatorIS8_EEEERKNS7_IjNS9_IjEEEESH_RNS7_IiNS9_IiEEEESK_mENK3$_9clEv"}
!329 = !{!325}
!330 = !{!327}
!331 = distinct !{!331, !3}
!332 = distinct !{!332, !7, !3}
!333 = !{!334}
!334 = distinct !{!334, !335, !"_ZZN3jxl11TreeSamples21PreQuantizePropertiesERKNSt3__15arrayINS2_IjLm2EEELm2EEERKNS1_6vectorINS_21ModularMultiplierInfoENS1_9allocatorIS8_EEEERKNS7_IjNS9_IjEEEESH_RNS7_IiNS9_IiEEEESK_mENK4$_10clEv: argument 0"}
!335 = distinct !{!335, !"_ZZN3jxl11TreeSamples21PreQuantizePropertiesERKNSt3__15arrayINS2_IjLm2EEELm2EEERKNS1_6vectorINS_21ModularMultiplierInfoENS1_9allocatorIS8_EEEERKNS7_IjNS9_IjEEEESH_RNS7_IiNS9_IiEEEESK_mENK4$_10clEv"}
!336 = !{!337}
!337 = distinct !{!337, !338, !"_ZZN3jxl11TreeSamples21PreQuantizePropertiesERKNSt3__15arrayINS2_IjLm2EEELm2EEERKNS1_6vectorINS_21ModularMultiplierInfoENS1_9allocatorIS8_EEEERKNS7_IjNS9_IjEEEESH_RNS7_IiNS9_IiEEEESK_mENK4$_11clEv: argument 0"}
!338 = distinct !{!338, !"_ZZN3jxl11TreeSamples21PreQuantizePropertiesERKNSt3__15arrayINS2_IjLm2EEELm2EEERKNS1_6vectorINS_21ModularMultiplierInfoENS1_9allocatorIS8_EEEERKNS7_IjNS9_IjEEEESH_RNS7_IiNS9_IiEEEESK_mENK4$_11clEv"}
!339 = distinct !{!339, !3}
!340 = distinct !{!340, !7, !3}
!341 = distinct !{!341, !5}
!342 = distinct !{!342, !3}
!343 = distinct !{!343, !7, !3}
!344 = distinct !{!344, !5}
!345 = !{!346}
!346 = distinct !{!346, !347}
!347 = distinct !{!347, !"LVerDomain"}
!348 = !{!349}
!349 = distinct !{!349, !347}
!350 = distinct !{!350, !3}
!351 = distinct !{!351, !3}
!352 = !{!353}
!353 = distinct !{!353, !354}
!354 = distinct !{!354, !"LVerDomain"}
!355 = !{!356}
!356 = distinct !{!356, !354}
!357 = distinct !{!357, !3}
!358 = distinct !{!358, !5}
!359 = distinct !{!359, !3}
!360 = distinct !{!360, !5}
!361 = distinct !{!361, !5}
!362 = distinct !{!362, !5}
!363 = distinct !{!363, !5}
!364 = distinct !{!364, !5}
