; ModuleID = '../../third_party/opus/src/celt/x86/pitch_sse.c'
source_filename = "../../third_party/opus/src/celt/x86/pitch_sse.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @xcorr_kernel_sse(float* nocapture readonly, float* nocapture readonly, float* nocapture, i32) local_unnamed_addr #0 {
  %5 = bitcast float* %2 to <4 x float>*
  %6 = load <4 x float>, <4 x float>* %5, align 1
  %7 = add nsw i32 %3, -3
  %8 = icmp sgt i32 %7, 0
  br i1 %8, label %9, label %42

9:                                                ; preds = %4
  %10 = sext i32 %7 to i64
  br label %11

11:                                               ; preds = %9, %11
  %12 = phi i64 [ 0, %9 ], [ %38, %11 ]
  %13 = phi <4 x float> [ %6, %9 ], [ %34, %11 ]
  %14 = phi <4 x float> [ zeroinitializer, %9 ], [ %37, %11 ]
  %15 = getelementptr inbounds float, float* %0, i64 %12
  %16 = bitcast float* %15 to <4 x float>*
  %17 = load <4 x float>, <4 x float>* %16, align 1
  %18 = getelementptr inbounds float, float* %1, i64 %12
  %19 = bitcast float* %18 to <4 x float>*
  %20 = load <4 x float>, <4 x float>* %19, align 1
  %21 = getelementptr inbounds float, float* %18, i64 3
  %22 = bitcast float* %21 to <4 x float>*
  %23 = load <4 x float>, <4 x float>* %22, align 1
  %24 = shufflevector <4 x float> %17, <4 x float> undef, <4 x i32> zeroinitializer
  %25 = fmul <4 x float> %24, %20
  %26 = fadd <4 x float> %13, %25
  %27 = shufflevector <4 x float> %17, <4 x float> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %28 = shufflevector <4 x float> %20, <4 x float> %23, <4 x i32> <i32 1, i32 2, i32 4, i32 5>
  %29 = fmul <4 x float> %27, %28
  %30 = fadd <4 x float> %14, %29
  %31 = shufflevector <4 x float> %17, <4 x float> undef, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
  %32 = shufflevector <4 x float> %20, <4 x float> %23, <4 x i32> <i32 2, i32 3, i32 5, i32 6>
  %33 = fmul <4 x float> %31, %32
  %34 = fadd <4 x float> %26, %33
  %35 = shufflevector <4 x float> %17, <4 x float> undef, <4 x i32> <i32 3, i32 3, i32 3, i32 3>
  %36 = fmul <4 x float> %35, %23
  %37 = fadd <4 x float> %36, %30
  %38 = add nuw nsw i64 %12, 4
  %39 = icmp slt i64 %38, %10
  br i1 %39, label %11, label %40

40:                                               ; preds = %11
  %41 = and i32 %3, -4
  br label %42

42:                                               ; preds = %40, %4
  %43 = phi <4 x float> [ zeroinitializer, %4 ], [ %37, %40 ]
  %44 = phi <4 x float> [ %6, %4 ], [ %34, %40 ]
  %45 = phi i32 [ 0, %4 ], [ %41, %40 ]
  %46 = icmp slt i32 %45, %3
  br i1 %46, label %47, label %84

47:                                               ; preds = %42
  %48 = zext i32 %45 to i64
  %49 = getelementptr inbounds float, float* %0, i64 %48
  %50 = load float, float* %49, align 1
  %51 = insertelement <4 x float> undef, float %50, i32 0
  %52 = shufflevector <4 x float> %51, <4 x float> undef, <4 x i32> zeroinitializer
  %53 = getelementptr inbounds float, float* %1, i64 %48
  %54 = bitcast float* %53 to <4 x float>*
  %55 = load <4 x float>, <4 x float>* %54, align 1
  %56 = fmul <4 x float> %55, %52
  %57 = fadd <4 x float> %44, %56
  %58 = or i32 %45, 1
  %59 = icmp slt i32 %58, %3
  br i1 %59, label %60, label %84

60:                                               ; preds = %47
  %61 = zext i32 %58 to i64
  %62 = getelementptr inbounds float, float* %0, i64 %61
  %63 = load float, float* %62, align 1
  %64 = insertelement <4 x float> undef, float %63, i32 0
  %65 = shufflevector <4 x float> %64, <4 x float> undef, <4 x i32> zeroinitializer
  %66 = getelementptr inbounds float, float* %1, i64 %61
  %67 = bitcast float* %66 to <4 x float>*
  %68 = load <4 x float>, <4 x float>* %67, align 1
  %69 = fmul <4 x float> %68, %65
  %70 = fadd <4 x float> %43, %69
  %71 = add nuw nsw i32 %58, 1
  %72 = icmp slt i32 %71, %3
  br i1 %72, label %73, label %84

73:                                               ; preds = %60
  %74 = zext i32 %71 to i64
  %75 = getelementptr inbounds float, float* %0, i64 %74
  %76 = load float, float* %75, align 1
  %77 = insertelement <4 x float> undef, float %76, i32 0
  %78 = shufflevector <4 x float> %77, <4 x float> undef, <4 x i32> zeroinitializer
  %79 = getelementptr inbounds float, float* %1, i64 %74
  %80 = bitcast float* %79 to <4 x float>*
  %81 = load <4 x float>, <4 x float>* %80, align 1
  %82 = fmul <4 x float> %81, %78
  %83 = fadd <4 x float> %57, %82
  br label %84

84:                                               ; preds = %47, %73, %60, %42
  %85 = phi <4 x float> [ %70, %73 ], [ %70, %60 ], [ %43, %47 ], [ %43, %42 ]
  %86 = phi <4 x float> [ %83, %73 ], [ %57, %60 ], [ %57, %47 ], [ %44, %42 ]
  %87 = fadd <4 x float> %85, %86
  store <4 x float> %87, <4 x float>* %5, align 1
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @dual_inner_prod_sse(float* nocapture readonly, float* nocapture readonly, float* nocapture readonly, i32, float* nocapture, float* nocapture) local_unnamed_addr #0 {
  %7 = icmp sgt i32 %3, 3
  br i1 %7, label %8, label %77

8:                                                ; preds = %6
  %9 = sext i32 %3 to i64
  %10 = add nsw i64 %9, -4
  %11 = lshr i64 %10, 2
  %12 = add nuw nsw i64 %11, 1
  %13 = and i64 %12, 1
  %14 = icmp eq i64 %11, 0
  br i1 %14, label %52, label %15

15:                                               ; preds = %8
  %16 = sub nuw nsw i64 %12, %13
  br label %17

17:                                               ; preds = %17, %15
  %18 = phi i64 [ 0, %15 ], [ %49, %17 ]
  %19 = phi <4 x float> [ zeroinitializer, %15 ], [ %46, %17 ]
  %20 = phi <4 x float> [ zeroinitializer, %15 ], [ %48, %17 ]
  %21 = phi i64 [ %16, %15 ], [ %50, %17 ]
  %22 = getelementptr inbounds float, float* %0, i64 %18
  %23 = bitcast float* %22 to <4 x float>*
  %24 = load <4 x float>, <4 x float>* %23, align 1
  %25 = getelementptr inbounds float, float* %1, i64 %18
  %26 = bitcast float* %25 to <4 x float>*
  %27 = load <4 x float>, <4 x float>* %26, align 1
  %28 = getelementptr inbounds float, float* %2, i64 %18
  %29 = bitcast float* %28 to <4 x float>*
  %30 = load <4 x float>, <4 x float>* %29, align 1
  %31 = fmul <4 x float> %24, %27
  %32 = fadd <4 x float> %19, %31
  %33 = fmul <4 x float> %24, %30
  %34 = fadd <4 x float> %20, %33
  %35 = or i64 %18, 4
  %36 = getelementptr inbounds float, float* %0, i64 %35
  %37 = bitcast float* %36 to <4 x float>*
  %38 = load <4 x float>, <4 x float>* %37, align 1
  %39 = getelementptr inbounds float, float* %1, i64 %35
  %40 = bitcast float* %39 to <4 x float>*
  %41 = load <4 x float>, <4 x float>* %40, align 1
  %42 = getelementptr inbounds float, float* %2, i64 %35
  %43 = bitcast float* %42 to <4 x float>*
  %44 = load <4 x float>, <4 x float>* %43, align 1
  %45 = fmul <4 x float> %38, %41
  %46 = fadd <4 x float> %32, %45
  %47 = fmul <4 x float> %38, %44
  %48 = fadd <4 x float> %34, %47
  %49 = add nuw nsw i64 %18, 8
  %50 = add i64 %21, -2
  %51 = icmp eq i64 %50, 0
  br i1 %51, label %52, label %17

52:                                               ; preds = %17, %8
  %53 = phi <4 x float> [ undef, %8 ], [ %46, %17 ]
  %54 = phi <4 x float> [ undef, %8 ], [ %48, %17 ]
  %55 = phi i64 [ 0, %8 ], [ %49, %17 ]
  %56 = phi <4 x float> [ zeroinitializer, %8 ], [ %46, %17 ]
  %57 = phi <4 x float> [ zeroinitializer, %8 ], [ %48, %17 ]
  %58 = icmp eq i64 %13, 0
  br i1 %58, label %73, label %59

59:                                               ; preds = %52
  %60 = getelementptr inbounds float, float* %0, i64 %55
  %61 = bitcast float* %60 to <4 x float>*
  %62 = load <4 x float>, <4 x float>* %61, align 1
  %63 = getelementptr inbounds float, float* %2, i64 %55
  %64 = bitcast float* %63 to <4 x float>*
  %65 = load <4 x float>, <4 x float>* %64, align 1
  %66 = fmul <4 x float> %62, %65
  %67 = fadd <4 x float> %57, %66
  %68 = getelementptr inbounds float, float* %1, i64 %55
  %69 = bitcast float* %68 to <4 x float>*
  %70 = load <4 x float>, <4 x float>* %69, align 1
  %71 = fmul <4 x float> %62, %70
  %72 = fadd <4 x float> %56, %71
  br label %73

73:                                               ; preds = %52, %59
  %74 = phi <4 x float> [ %53, %52 ], [ %72, %59 ]
  %75 = phi <4 x float> [ %54, %52 ], [ %67, %59 ]
  %76 = and i32 %3, -4
  br label %77

77:                                               ; preds = %73, %6
  %78 = phi <4 x float> [ zeroinitializer, %6 ], [ %75, %73 ]
  %79 = phi <4 x float> [ zeroinitializer, %6 ], [ %74, %73 ]
  %80 = phi i32 [ 0, %6 ], [ %76, %73 ]
  %81 = shufflevector <4 x float> %79, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 2, i32 3>
  %82 = fadd <4 x float> %79, %81
  %83 = extractelement <4 x float> %82, i32 1
  %84 = extractelement <4 x float> %82, i32 0
  %85 = fadd float %84, %83
  store float %85, float* %4, align 1
  %86 = shufflevector <4 x float> %78, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 2, i32 3>
  %87 = fadd <4 x float> %78, %86
  %88 = extractelement <4 x float> %87, i32 1
  %89 = extractelement <4 x float> %87, i32 0
  %90 = fadd float %89, %88
  store float %90, float* %5, align 1
  %91 = icmp slt i32 %80, %3
  br i1 %91, label %92, label %148

92:                                               ; preds = %77
  %93 = zext i32 %80 to i64
  %94 = zext i32 %3 to i64
  %95 = xor i64 %93, -1
  %96 = and i64 %94, 1
  %97 = icmp eq i64 %96, 0
  br i1 %97, label %113, label %98

98:                                               ; preds = %92
  %99 = load float, float* %4, align 4
  %100 = getelementptr inbounds float, float* %0, i64 %93
  %101 = load float, float* %100, align 4
  %102 = getelementptr inbounds float, float* %1, i64 %93
  %103 = load float, float* %102, align 4
  %104 = fmul float %101, %103
  %105 = fadd float %99, %104
  store float %105, float* %4, align 4
  %106 = load float, float* %5, align 4
  %107 = load float, float* %100, align 4
  %108 = getelementptr inbounds float, float* %2, i64 %93
  %109 = load float, float* %108, align 4
  %110 = fmul float %107, %109
  %111 = fadd float %106, %110
  store float %111, float* %5, align 4
  %112 = or i64 %93, 1
  br label %113

113:                                              ; preds = %92, %98
  %114 = phi i64 [ %93, %92 ], [ %112, %98 ]
  %115 = sub nsw i64 0, %94
  %116 = icmp eq i64 %95, %115
  br i1 %116, label %148, label %117

117:                                              ; preds = %113, %117
  %118 = phi i64 [ %146, %117 ], [ %114, %113 ]
  %119 = load float, float* %4, align 4
  %120 = getelementptr inbounds float, float* %0, i64 %118
  %121 = load float, float* %120, align 4
  %122 = getelementptr inbounds float, float* %1, i64 %118
  %123 = load float, float* %122, align 4
  %124 = fmul float %121, %123
  %125 = fadd float %119, %124
  store float %125, float* %4, align 4
  %126 = load float, float* %5, align 4
  %127 = load float, float* %120, align 4
  %128 = getelementptr inbounds float, float* %2, i64 %118
  %129 = load float, float* %128, align 4
  %130 = fmul float %127, %129
  %131 = fadd float %126, %130
  store float %131, float* %5, align 4
  %132 = add nuw nsw i64 %118, 1
  %133 = load float, float* %4, align 4
  %134 = getelementptr inbounds float, float* %0, i64 %132
  %135 = load float, float* %134, align 4
  %136 = getelementptr inbounds float, float* %1, i64 %132
  %137 = load float, float* %136, align 4
  %138 = fmul float %135, %137
  %139 = fadd float %133, %138
  store float %139, float* %4, align 4
  %140 = load float, float* %5, align 4
  %141 = load float, float* %134, align 4
  %142 = getelementptr inbounds float, float* %2, i64 %132
  %143 = load float, float* %142, align 4
  %144 = fmul float %141, %143
  %145 = fadd float %140, %144
  store float %145, float* %5, align 4
  %146 = add nuw nsw i64 %118, 2
  %147 = icmp eq i64 %146, %94
  br i1 %147, label %148, label %117

148:                                              ; preds = %113, %117, %77
  ret void
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden float @celt_inner_prod_sse(float* nocapture readonly, float* nocapture readonly, i32) local_unnamed_addr #1 {
  %4 = icmp sgt i32 %2, 3
  br i1 %4, label %5, label %79

5:                                                ; preds = %3
  %6 = sext i32 %2 to i64
  %7 = add nsw i64 %6, -4
  %8 = lshr i64 %7, 2
  %9 = add nuw nsw i64 %8, 1
  %10 = and i64 %9, 3
  %11 = icmp ult i64 %7, 12
  br i1 %11, label %56, label %12

12:                                               ; preds = %5
  %13 = sub nsw i64 %9, %10
  br label %14

14:                                               ; preds = %14, %12
  %15 = phi i64 [ 0, %12 ], [ %53, %14 ]
  %16 = phi <4 x float> [ zeroinitializer, %12 ], [ %52, %14 ]
  %17 = phi i64 [ %13, %12 ], [ %54, %14 ]
  %18 = getelementptr inbounds float, float* %0, i64 %15
  %19 = bitcast float* %18 to <4 x float>*
  %20 = load <4 x float>, <4 x float>* %19, align 1
  %21 = getelementptr inbounds float, float* %1, i64 %15
  %22 = bitcast float* %21 to <4 x float>*
  %23 = load <4 x float>, <4 x float>* %22, align 1
  %24 = fmul <4 x float> %20, %23
  %25 = fadd <4 x float> %16, %24
  %26 = or i64 %15, 4
  %27 = getelementptr inbounds float, float* %0, i64 %26
  %28 = bitcast float* %27 to <4 x float>*
  %29 = load <4 x float>, <4 x float>* %28, align 1
  %30 = getelementptr inbounds float, float* %1, i64 %26
  %31 = bitcast float* %30 to <4 x float>*
  %32 = load <4 x float>, <4 x float>* %31, align 1
  %33 = fmul <4 x float> %29, %32
  %34 = fadd <4 x float> %25, %33
  %35 = or i64 %15, 8
  %36 = getelementptr inbounds float, float* %0, i64 %35
  %37 = bitcast float* %36 to <4 x float>*
  %38 = load <4 x float>, <4 x float>* %37, align 1
  %39 = getelementptr inbounds float, float* %1, i64 %35
  %40 = bitcast float* %39 to <4 x float>*
  %41 = load <4 x float>, <4 x float>* %40, align 1
  %42 = fmul <4 x float> %38, %41
  %43 = fadd <4 x float> %34, %42
  %44 = or i64 %15, 12
  %45 = getelementptr inbounds float, float* %0, i64 %44
  %46 = bitcast float* %45 to <4 x float>*
  %47 = load <4 x float>, <4 x float>* %46, align 1
  %48 = getelementptr inbounds float, float* %1, i64 %44
  %49 = bitcast float* %48 to <4 x float>*
  %50 = load <4 x float>, <4 x float>* %49, align 1
  %51 = fmul <4 x float> %47, %50
  %52 = fadd <4 x float> %43, %51
  %53 = add nuw nsw i64 %15, 16
  %54 = add i64 %17, -4
  %55 = icmp eq i64 %54, 0
  br i1 %55, label %56, label %14

56:                                               ; preds = %14, %5
  %57 = phi <4 x float> [ undef, %5 ], [ %52, %14 ]
  %58 = phi i64 [ 0, %5 ], [ %53, %14 ]
  %59 = phi <4 x float> [ zeroinitializer, %5 ], [ %52, %14 ]
  %60 = icmp eq i64 %10, 0
  br i1 %60, label %76, label %61

61:                                               ; preds = %56, %61
  %62 = phi i64 [ %73, %61 ], [ %58, %56 ]
  %63 = phi <4 x float> [ %72, %61 ], [ %59, %56 ]
  %64 = phi i64 [ %74, %61 ], [ %10, %56 ]
  %65 = getelementptr inbounds float, float* %0, i64 %62
  %66 = bitcast float* %65 to <4 x float>*
  %67 = load <4 x float>, <4 x float>* %66, align 1
  %68 = getelementptr inbounds float, float* %1, i64 %62
  %69 = bitcast float* %68 to <4 x float>*
  %70 = load <4 x float>, <4 x float>* %69, align 1
  %71 = fmul <4 x float> %67, %70
  %72 = fadd <4 x float> %63, %71
  %73 = add nuw nsw i64 %62, 4
  %74 = add i64 %64, -1
  %75 = icmp eq i64 %74, 0
  br i1 %75, label %76, label %61, !llvm.loop !2

76:                                               ; preds = %61, %56
  %77 = phi <4 x float> [ %57, %56 ], [ %72, %61 ]
  %78 = and i32 %2, -4
  br label %79

79:                                               ; preds = %76, %3
  %80 = phi <4 x float> [ zeroinitializer, %3 ], [ %77, %76 ]
  %81 = phi i32 [ 0, %3 ], [ %78, %76 ]
  %82 = shufflevector <4 x float> %80, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 2, i32 3>
  %83 = fadd <4 x float> %80, %82
  %84 = extractelement <4 x float> %83, i32 1
  %85 = extractelement <4 x float> %83, i32 0
  %86 = fadd float %85, %84
  %87 = icmp slt i32 %81, %2
  br i1 %87, label %88, label %145

88:                                               ; preds = %79
  %89 = zext i32 %81 to i64
  %90 = zext i32 %2 to i64
  %91 = xor i64 %89, -1
  %92 = add nsw i64 %91, %90
  %93 = and i64 %90, 3
  %94 = icmp eq i64 %93, 0
  br i1 %94, label %108, label %95

95:                                               ; preds = %88, %95
  %96 = phi i64 [ %105, %95 ], [ %89, %88 ]
  %97 = phi float [ %104, %95 ], [ %86, %88 ]
  %98 = phi i64 [ %106, %95 ], [ %93, %88 ]
  %99 = getelementptr inbounds float, float* %0, i64 %96
  %100 = load float, float* %99, align 4
  %101 = getelementptr inbounds float, float* %1, i64 %96
  %102 = load float, float* %101, align 4
  %103 = fmul float %100, %102
  %104 = fadd float %97, %103
  %105 = add nuw nsw i64 %96, 1
  %106 = add i64 %98, -1
  %107 = icmp eq i64 %106, 0
  br i1 %107, label %108, label %95, !llvm.loop !4

108:                                              ; preds = %95, %88
  %109 = phi float [ undef, %88 ], [ %104, %95 ]
  %110 = phi i64 [ %89, %88 ], [ %105, %95 ]
  %111 = phi float [ %86, %88 ], [ %104, %95 ]
  %112 = icmp ult i64 %92, 3
  br i1 %112, label %145, label %113

113:                                              ; preds = %108, %113
  %114 = phi i64 [ %143, %113 ], [ %110, %108 ]
  %115 = phi float [ %142, %113 ], [ %111, %108 ]
  %116 = getelementptr inbounds float, float* %0, i64 %114
  %117 = load float, float* %116, align 4
  %118 = getelementptr inbounds float, float* %1, i64 %114
  %119 = load float, float* %118, align 4
  %120 = fmul float %117, %119
  %121 = fadd float %115, %120
  %122 = add nuw nsw i64 %114, 1
  %123 = getelementptr inbounds float, float* %0, i64 %122
  %124 = load float, float* %123, align 4
  %125 = getelementptr inbounds float, float* %1, i64 %122
  %126 = load float, float* %125, align 4
  %127 = fmul float %124, %126
  %128 = fadd float %121, %127
  %129 = add nuw nsw i64 %114, 2
  %130 = getelementptr inbounds float, float* %0, i64 %129
  %131 = load float, float* %130, align 4
  %132 = getelementptr inbounds float, float* %1, i64 %129
  %133 = load float, float* %132, align 4
  %134 = fmul float %131, %133
  %135 = fadd float %128, %134
  %136 = add nuw nsw i64 %114, 3
  %137 = getelementptr inbounds float, float* %0, i64 %136
  %138 = load float, float* %137, align 4
  %139 = getelementptr inbounds float, float* %1, i64 %136
  %140 = load float, float* %139, align 4
  %141 = fmul float %138, %140
  %142 = fadd float %135, %141
  %143 = add nuw nsw i64 %114, 4
  %144 = icmp eq i64 %143, %90
  br i1 %144, label %145, label %113

145:                                              ; preds = %108, %113, %79
  %146 = phi float [ %86, %79 ], [ %109, %108 ], [ %142, %113 ]
  ret float %146
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @comb_filter_const_sse(float* nocapture, float* nocapture readonly, i32, i32, float, float, float) local_unnamed_addr #0 {
  %8 = insertelement <4 x float> undef, float %4, i32 0
  %9 = shufflevector <4 x float> %8, <4 x float> undef, <4 x i32> zeroinitializer
  %10 = insertelement <4 x float> undef, float %5, i32 0
  %11 = shufflevector <4 x float> %10, <4 x float> undef, <4 x i32> zeroinitializer
  %12 = insertelement <4 x float> undef, float %6, i32 0
  %13 = shufflevector <4 x float> %12, <4 x float> undef, <4 x i32> zeroinitializer
  %14 = add nsw i32 %3, -3
  %15 = icmp sgt i32 %14, 0
  br i1 %15, label %16, label %51

16:                                               ; preds = %7
  %17 = sub i32 -2, %2
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds float, float* %1, i64 %18
  %20 = bitcast float* %19 to <4 x float>*
  %21 = load <4 x float>, <4 x float>* %20, align 1
  %22 = getelementptr inbounds float, float* %1, i64 4
  %23 = sext i32 %14 to i64
  br label %24

24:                                               ; preds = %16, %24
  %25 = phi i64 [ 0, %16 ], [ %49, %24 ]
  %26 = phi <4 x float> [ %21, %16 ], [ %35, %24 ]
  %27 = trunc i64 %25 to i32
  %28 = add i32 %17, %27
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds float, float* %1, i64 %25
  %31 = bitcast float* %30 to <4 x float>*
  %32 = load <4 x float>, <4 x float>* %31, align 1
  %33 = getelementptr inbounds float, float* %22, i64 %29
  %34 = bitcast float* %33 to <4 x float>*
  %35 = load <4 x float>, <4 x float>* %34, align 1
  %36 = shufflevector <4 x float> %26, <4 x float> %35, <4 x i32> <i32 2, i32 3, i32 4, i32 5>
  %37 = shufflevector <4 x float> %26, <4 x float> %36, <4 x i32> <i32 1, i32 2, i32 5, i32 6>
  %38 = shufflevector <4 x float> %36, <4 x float> %35, <4 x i32> <i32 1, i32 2, i32 5, i32 6>
  %39 = fmul <4 x float> %9, %36
  %40 = fadd <4 x float> %32, %39
  %41 = fadd <4 x float> %38, %37
  %42 = fmul <4 x float> %11, %41
  %43 = fadd <4 x float> %26, %35
  %44 = fmul <4 x float> %13, %43
  %45 = fadd <4 x float> %44, %42
  %46 = fadd <4 x float> %40, %45
  %47 = getelementptr inbounds float, float* %0, i64 %25
  %48 = bitcast float* %47 to <4 x float>*
  store <4 x float> %46, <4 x float>* %48, align 1
  %49 = add nuw nsw i64 %25, 4
  %50 = icmp slt i64 %49, %23
  br i1 %50, label %24, label %51

51:                                               ; preds = %24, %7
  ret void
}

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !3}
