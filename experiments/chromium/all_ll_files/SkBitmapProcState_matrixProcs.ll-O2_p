; ModuleID = '../../third_party/skia/src/core/SkBitmapProcState_matrixProcs.cpp'
source_filename = "../../third_party/skia/src/core/SkBitmapProcState_matrixProcs.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.SkBitmapProcState = type { %class.SkImage_Base*, %class.SkPixmap, %class.SkMatrix, i8, i32, i32, i8, void (%class.SkMatrix*, float, float, %struct.SkPoint*)*, i64, i64, i32, i32, i16, [6 x i8], %class.SkSTArenaAlloc, void (i8*, i32, i32, i32*, i32)*, {}*, void (%struct.SkBitmapProcState*, i32*, i32, i32*)* }
%class.SkImage_Base = type opaque
%class.SkPixmap = type { i8*, i64, %struct.SkImageInfo }
%struct.SkImageInfo = type { %class.SkColorInfo, %struct.SkISize }
%class.SkColorInfo = type { %class.sk_sp, i32, i32 }
%class.sk_sp = type { %class.SkColorSpace* }
%class.SkColorSpace = type <{ %class.SkNVRefCnt, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%class.SkOnce = type { %"struct.std::__1::atomic.1" }
%"struct.std::__1::atomic.1" = type { %"struct.std::__1::__atomic_base.2" }
%"struct.std::__1::__atomic_base.2" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__cxx_atomic_impl.4" }
%"struct.std::__1::__cxx_atomic_impl.4" = type { %"struct.std::__1::__cxx_atomic_base_impl.5" }
%"struct.std::__1::__cxx_atomic_base_impl.5" = type { i8 }
%struct.SkISize = type { i32, i32 }
%class.SkMatrix = type { [9 x float], i32 }
%struct.SkPoint = type { float, float }
%class.SkSTArenaAlloc = type { %"struct.std::__1::array", %class.SkArenaAlloc.base, [4 x i8] }
%"struct.std::__1::array" = type { [136 x i8] }
%class.SkArenaAlloc.base = type <{ i8*, i8*, i8*, %class.SkFibBlockSizes }>
%class.SkFibBlockSizes = type { i32 }

@_ZL19ClampX_ClampY_Procs = internal unnamed_addr constant [4 x void (%struct.SkBitmapProcState*, i32*, i32, i32, i32)*] [void (%struct.SkBitmapProcState*, i32*, i32, i32, i32)* @_ZL14nofilter_scaleIXadL_ZL5clampiiEEXadL_ZL5clampiiEELb1EEvRK17SkBitmapProcStatePjiii, void (%struct.SkBitmapProcState*, i32*, i32, i32, i32)* @_ZL12filter_scaleIXadL_ZL5clampiiEEXadL_ZL5clampiiEEXadL_ZL28extract_low_bits_clamp_clampiiEELb1EEvRK17SkBitmapProcStatePjiii, void (%struct.SkBitmapProcState*, i32*, i32, i32, i32)* @_ZL15nofilter_affineIXadL_ZL5clampiiEEXadL_ZL5clampiiEEEvRK17SkBitmapProcStatePjiii, void (%struct.SkBitmapProcState*, i32*, i32, i32, i32)* @_ZL13filter_affineIXadL_ZL5clampiiEEXadL_ZL5clampiiEEXadL_ZL28extract_low_bits_clamp_clampiiEEEvRK17SkBitmapProcStatePjiii], align 16
@_ZL21RepeatX_RepeatY_Procs = internal unnamed_addr constant [4 x void (%struct.SkBitmapProcState*, i32*, i32, i32, i32)*] [void (%struct.SkBitmapProcState*, i32*, i32, i32, i32)* @_ZL14nofilter_scaleIXadL_ZL6repeatiiEEXadL_ZL6repeatiiEELb0EEvRK17SkBitmapProcStatePjiii, void (%struct.SkBitmapProcState*, i32*, i32, i32, i32)* @_ZL12filter_scaleIXadL_ZL6repeatiiEEXadL_ZL6repeatiiEEXadL_ZL24extract_low_bits_generaliiEELb0EEvRK17SkBitmapProcStatePjiii, void (%struct.SkBitmapProcState*, i32*, i32, i32, i32)* @_ZL15nofilter_affineIXadL_ZL6repeatiiEEXadL_ZL6repeatiiEEEvRK17SkBitmapProcStatePjiii, void (%struct.SkBitmapProcState*, i32*, i32, i32, i32)* @_ZL13filter_affineIXadL_ZL6repeatiiEEXadL_ZL6repeatiiEEXadL_ZL24extract_low_bits_generaliiEEEvRK17SkBitmapProcStatePjiii], align 16
@_ZL21MirrorX_MirrorY_Procs = internal unnamed_addr constant [4 x void (%struct.SkBitmapProcState*, i32*, i32, i32, i32)*] [void (%struct.SkBitmapProcState*, i32*, i32, i32, i32)* @_ZL14nofilter_scaleIXadL_ZL6mirroriiEEXadL_ZL6mirroriiEELb0EEvRK17SkBitmapProcStatePjiii, void (%struct.SkBitmapProcState*, i32*, i32, i32, i32)* @_ZL12filter_scaleIXadL_ZL6mirroriiEEXadL_ZL6mirroriiEEXadL_ZL24extract_low_bits_generaliiEELb0EEvRK17SkBitmapProcStatePjiii, void (%struct.SkBitmapProcState*, i32*, i32, i32, i32)* @_ZL15nofilter_affineIXadL_ZL6mirroriiEEXadL_ZL6mirroriiEEEvRK17SkBitmapProcStatePjiii, void (%struct.SkBitmapProcState*, i32*, i32, i32, i32)* @_ZL13filter_affineIXadL_ZL6mirroriiEEXadL_ZL6mirroriiEEXadL_ZL24extract_low_bits_generaliiEEEvRK17SkBitmapProcStatePjiii], align 16
@_ZN6SkOpts8memset16E = external local_unnamed_addr global void (i16*, i16, i32)*, align 8

; Function Attrs: nounwind ssp uwtable
define hidden void (%struct.SkBitmapProcState*, i32*, i32, i32, i32)* @_ZN17SkBitmapProcState16chooseMatrixProcEb(%struct.SkBitmapProcState*, i1 zeroext) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 4
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 5
  %6 = load i32, i32* %5, align 8
  %7 = icmp eq i32 %4, %6
  br i1 %7, label %8, label %61

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 6
  %10 = load i8, i8* %9, align 4, !range !2
  br i1 %1, label %11, label %18

11:                                               ; preds = %8
  %12 = icmp eq i8 %10, 0
  br i1 %12, label %13, label %18

13:                                               ; preds = %11
  %14 = icmp eq i32 %4, 1
  %15 = select i1 %14, void (%struct.SkBitmapProcState*, i32*, i32, i32, i32)* @_ZL22repeatx_nofilter_transIXadL_ZL10int_repeatiiEEEvRK17SkBitmapProcStatePjiii, void (%struct.SkBitmapProcState*, i32*, i32, i32, i32)* @_ZL21clampx_nofilter_transIXadL_ZL9int_clampiiEEEvRK17SkBitmapProcStatePjiii
  %16 = icmp eq i32 %4, 2
  %17 = select i1 %16, void (%struct.SkBitmapProcState*, i32*, i32, i32, i32)* @_ZL22mirrorx_nofilter_transIXadL_ZL10int_mirroriiEEEvRK17SkBitmapProcStatePjiii, void (%struct.SkBitmapProcState*, i32*, i32, i32, i32)* %15
  br label %61

18:                                               ; preds = %8, %11
  %19 = phi i8 [ 1, %11 ], [ %10, %8 ]
  %20 = zext i8 %19 to i32
  %21 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 2, i32 1
  %22 = load i32, i32* %21, align 4
  %23 = trunc i32 %22 to i8
  %24 = icmp slt i8 %23, 0
  br i1 %24, label %25, label %30

25:                                               ; preds = %18
  %26 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 2
  %27 = tail call zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix* %26) #3
  %28 = zext i8 %27 to i32
  store i32 %28, i32* %21, align 4
  %29 = load i32, i32* %3, align 4
  br label %30

30:                                               ; preds = %18, %25
  %31 = phi i32 [ %29, %25 ], [ %4, %18 ]
  %32 = phi i32 [ %28, %25 ], [ %22, %18 ]
  %33 = and i32 %32, 12
  %34 = icmp eq i32 %33, 0
  %35 = or i32 %20, 2
  %36 = select i1 %34, i32 %20, i32 %35
  %37 = icmp eq i32 %31, 0
  br i1 %37, label %38, label %43

38:                                               ; preds = %30
  %39 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 10
  store i32 65536, i32* %39, align 8
  %40 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 11
  store i32 65536, i32* %40, align 4
  %41 = zext i32 %36 to i64
  %42 = getelementptr inbounds [4 x void (%struct.SkBitmapProcState*, i32*, i32, i32, i32)*], [4 x void (%struct.SkBitmapProcState*, i32*, i32, i32, i32)*]* @_ZL19ClampX_ClampY_Procs, i64 0, i64 %41
  br label %58

43:                                               ; preds = %30
  %44 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 1, i32 2, i32 1, i32 0
  %45 = load i32, i32* %44, align 4
  %46 = sdiv i32 65536, %45
  %47 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 10
  store i32 %46, i32* %47, align 8
  %48 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 1, i32 2, i32 1, i32 1
  %49 = load i32, i32* %48, align 4
  %50 = sdiv i32 65536, %49
  %51 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 11
  store i32 %50, i32* %51, align 4
  %52 = icmp eq i32 %31, 1
  %53 = zext i32 %36 to i64
  br i1 %52, label %54, label %56

54:                                               ; preds = %43
  %55 = getelementptr inbounds [4 x void (%struct.SkBitmapProcState*, i32*, i32, i32, i32)*], [4 x void (%struct.SkBitmapProcState*, i32*, i32, i32, i32)*]* @_ZL21RepeatX_RepeatY_Procs, i64 0, i64 %53
  br label %58

56:                                               ; preds = %43
  %57 = getelementptr inbounds [4 x void (%struct.SkBitmapProcState*, i32*, i32, i32, i32)*], [4 x void (%struct.SkBitmapProcState*, i32*, i32, i32, i32)*]* @_ZL21MirrorX_MirrorY_Procs, i64 0, i64 %53
  br label %58

58:                                               ; preds = %56, %54, %38
  %59 = phi void (%struct.SkBitmapProcState*, i32*, i32, i32, i32)** [ %42, %38 ], [ %55, %54 ], [ %57, %56 ]
  %60 = load void (%struct.SkBitmapProcState*, i32*, i32, i32, i32)*, void (%struct.SkBitmapProcState*, i32*, i32, i32, i32)** %59, align 8
  br label %61

61:                                               ; preds = %2, %13, %58
  %62 = phi void (%struct.SkBitmapProcState*, i32*, i32, i32, i32)* [ %60, %58 ], [ %17, %13 ], [ null, %2 ]
  ret void (%struct.SkBitmapProcState*, i32*, i32, i32, i32)* %62
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZL21clampx_nofilter_transIXadL_ZL9int_clampiiEEEvRK17SkBitmapProcStatePjiii(%struct.SkBitmapProcState* dereferenceable(336), i32*, i32, i32, i32) #0 {
  %6 = alloca %struct.SkPoint, align 4
  %7 = bitcast %struct.SkPoint* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #3
  %8 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %6, i64 0, i32 0
  store float 0xFFFFFFFFE0000000, float* %8, align 4
  %9 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %6, i64 0, i32 1
  store float 0xFFFFFFFFE0000000, float* %9, align 4
  %10 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 7
  %11 = load void (%class.SkMatrix*, float, float, %struct.SkPoint*)*, void (%class.SkMatrix*, float, float, %struct.SkPoint*)** %10, align 8
  %12 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 2
  %13 = sitofp i32 %3 to float
  %14 = fadd float %13, 5.000000e-01
  %15 = sitofp i32 %4 to float
  %16 = fadd float %15, 5.000000e-01
  call void %11(%class.SkMatrix* dereferenceable(40) %12, float %14, float %16, %struct.SkPoint* nonnull %6) #3
  %17 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 6
  %18 = load i8, i8* %17, align 4, !range !2
  %19 = icmp eq i8 %18, 0
  br i1 %19, label %27, label %20

20:                                               ; preds = %5
  %21 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 10
  %22 = load i32, i32* %21, align 8
  %23 = ashr i32 %22, 1
  %24 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 11
  %25 = load i32, i32* %24, align 4
  %26 = ashr i32 %25, 1
  br label %36

27:                                               ; preds = %5
  %28 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %12, i64 0, i32 0, i64 0
  %29 = load float, float* %28, align 4
  %30 = fcmp ogt float %29, 0.000000e+00
  %31 = zext i1 %30 to i32
  %32 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 2, i32 0, i64 4
  %33 = load float, float* %32, align 4
  %34 = fcmp ogt float %33, 0.000000e+00
  %35 = zext i1 %34 to i32
  br label %36

36:                                               ; preds = %20, %27
  %37 = phi i32 [ %23, %20 ], [ %31, %27 ]
  %38 = phi i32 [ %26, %20 ], [ %35, %27 ]
  %39 = load float, float* %8, align 4
  %40 = fmul float %39, 0x41F0000000000000
  %41 = fcmp olt float %40, 0x43DFFFFFE0000000
  %42 = select i1 %41, float %40, float 0x43DFFFFFE0000000
  %43 = fcmp ogt float %42, 0xC3DFFFFFE0000000
  %44 = select i1 %43, float %42, float 0xC3DFFFFFE0000000
  %45 = fptosi float %44 to i64
  %46 = sext i32 %37 to i64
  %47 = shl nsw i64 %46, 16
  %48 = sub i64 %45, %47
  %49 = load float, float* %9, align 4
  %50 = fmul float %49, 0x41F0000000000000
  %51 = fcmp olt float %50, 0x43DFFFFFE0000000
  %52 = select i1 %51, float %50, float 0x43DFFFFFE0000000
  %53 = fcmp ogt float %52, 0xC3DFFFFFE0000000
  %54 = select i1 %53, float %52, float 0xC3DFFFFFE0000000
  %55 = fptosi float %54 to i64
  %56 = sext i32 %38 to i64
  %57 = shl nsw i64 %56, 16
  %58 = sub i64 %55, %57
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #3
  %59 = lshr i64 %58, 32
  %60 = trunc i64 %59 to i32
  %61 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 1, i32 2, i32 1, i32 1
  %62 = load i32, i32* %61, align 4
  %63 = icmp sgt i32 %60, 0
  %64 = select i1 %63, i32 %60, i32 0
  %65 = icmp slt i32 %64, %62
  %66 = add nsw i32 %62, -1
  %67 = select i1 %65, i32 %64, i32 %66
  %68 = getelementptr inbounds i32, i32* %1, i64 1
  store i32 %67, i32* %1, align 4
  %69 = lshr i64 %48, 32
  %70 = trunc i64 %69 to i32
  %71 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 1, i32 2, i32 1, i32 0
  %72 = load i32, i32* %71, align 4
  %73 = icmp eq i32 %72, 1
  br i1 %73, label %74, label %78

74:                                               ; preds = %36
  %75 = bitcast i32* %68 to i8*
  %76 = sext i32 %2 to i64
  %77 = shl nsw i64 %76, 1
  call void @llvm.memset.p0i8.i64(i8* align 4 %75, i8 0, i64 %77, i1 false)
  br label %203

78:                                               ; preds = %36
  %79 = bitcast i32* %68 to i16*
  %80 = icmp slt i32 %70, 0
  br i1 %80, label %81, label %92

81:                                               ; preds = %78
  %82 = sub nsw i32 0, %70
  %83 = icmp sgt i32 %82, %2
  %84 = select i1 %83, i32 %2, i32 %82
  %85 = bitcast i32* %68 to i8*
  %86 = sext i32 %84 to i64
  %87 = shl nsw i64 %86, 1
  call void @llvm.memset.p0i8.i64(i8* align 2 %85, i8 0, i64 %87, i1 false)
  %88 = sub nsw i32 %2, %84
  %89 = icmp eq i32 %88, 0
  br i1 %89, label %203, label %90

90:                                               ; preds = %81
  %91 = getelementptr inbounds i16, i16* %79, i64 %86
  br label %92

92:                                               ; preds = %90, %78
  %93 = phi i32 [ %88, %90 ], [ %2, %78 ]
  %94 = phi i32 [ 0, %90 ], [ %70, %78 ]
  %95 = phi i16* [ %91, %90 ], [ %79, %78 ]
  %96 = icmp sgt i32 %72, %94
  br i1 %96, label %97, label %197

97:                                               ; preds = %92
  %98 = sub nsw i32 %72, %94
  %99 = icmp sgt i32 %98, %93
  %100 = select i1 %99, i32 %93, i32 %98
  %101 = icmp sgt i32 %100, 0
  br i1 %101, label %102, label %191

102:                                              ; preds = %97
  %103 = add nsw i32 %100, -1
  %104 = zext i32 %103 to i64
  %105 = add nuw nsw i64 %104, 1
  %106 = icmp ult i64 %105, 16
  br i1 %106, label %178, label %107

107:                                              ; preds = %102
  %108 = and i64 %105, 8589934576
  %109 = trunc i64 %108 to i32
  %110 = sub i32 %100, %109
  %111 = trunc i64 %108 to i32
  %112 = add i32 %94, %111
  %113 = getelementptr i16, i16* %95, i64 %108
  %114 = trunc i32 %94 to i16
  %115 = insertelement <8 x i16> undef, i16 %114, i32 0
  %116 = shufflevector <8 x i16> %115, <8 x i16> undef, <8 x i32> zeroinitializer
  %117 = add <8 x i16> %116, <i16 0, i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7>
  %118 = add nsw i64 %108, -16
  %119 = lshr exact i64 %118, 4
  %120 = add nuw nsw i64 %119, 1
  %121 = and i64 %120, 3
  %122 = icmp ult i64 %118, 48
  br i1 %122, label %159, label %123

123:                                              ; preds = %107
  %124 = sub nsw i64 %120, %121
  br label %125

125:                                              ; preds = %125, %123
  %126 = phi i64 [ 0, %123 ], [ %155, %125 ]
  %127 = phi <8 x i16> [ %117, %123 ], [ %156, %125 ]
  %128 = phi i64 [ %124, %123 ], [ %157, %125 ]
  %129 = getelementptr i16, i16* %95, i64 %126
  %130 = add <8 x i16> %127, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %131 = bitcast i16* %129 to <8 x i16>*
  store <8 x i16> %127, <8 x i16>* %131, align 2
  %132 = getelementptr i16, i16* %129, i64 8
  %133 = bitcast i16* %132 to <8 x i16>*
  store <8 x i16> %130, <8 x i16>* %133, align 2
  %134 = or i64 %126, 16
  %135 = add <8 x i16> %127, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %136 = getelementptr i16, i16* %95, i64 %134
  %137 = add <8 x i16> %127, <i16 24, i16 24, i16 24, i16 24, i16 24, i16 24, i16 24, i16 24>
  %138 = bitcast i16* %136 to <8 x i16>*
  store <8 x i16> %135, <8 x i16>* %138, align 2
  %139 = getelementptr i16, i16* %136, i64 8
  %140 = bitcast i16* %139 to <8 x i16>*
  store <8 x i16> %137, <8 x i16>* %140, align 2
  %141 = or i64 %126, 32
  %142 = add <8 x i16> %127, <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>
  %143 = getelementptr i16, i16* %95, i64 %141
  %144 = add <8 x i16> %127, <i16 40, i16 40, i16 40, i16 40, i16 40, i16 40, i16 40, i16 40>
  %145 = bitcast i16* %143 to <8 x i16>*
  store <8 x i16> %142, <8 x i16>* %145, align 2
  %146 = getelementptr i16, i16* %143, i64 8
  %147 = bitcast i16* %146 to <8 x i16>*
  store <8 x i16> %144, <8 x i16>* %147, align 2
  %148 = or i64 %126, 48
  %149 = add <8 x i16> %127, <i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48>
  %150 = getelementptr i16, i16* %95, i64 %148
  %151 = add <8 x i16> %127, <i16 56, i16 56, i16 56, i16 56, i16 56, i16 56, i16 56, i16 56>
  %152 = bitcast i16* %150 to <8 x i16>*
  store <8 x i16> %149, <8 x i16>* %152, align 2
  %153 = getelementptr i16, i16* %150, i64 8
  %154 = bitcast i16* %153 to <8 x i16>*
  store <8 x i16> %151, <8 x i16>* %154, align 2
  %155 = add i64 %126, 64
  %156 = add <8 x i16> %127, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %157 = add i64 %128, -4
  %158 = icmp eq i64 %157, 0
  br i1 %158, label %159, label %125, !llvm.loop !3

159:                                              ; preds = %125, %107
  %160 = phi i64 [ 0, %107 ], [ %155, %125 ]
  %161 = phi <8 x i16> [ %117, %107 ], [ %156, %125 ]
  %162 = icmp eq i64 %121, 0
  br i1 %162, label %176, label %163

163:                                              ; preds = %159, %163
  %164 = phi i64 [ %172, %163 ], [ %160, %159 ]
  %165 = phi <8 x i16> [ %173, %163 ], [ %161, %159 ]
  %166 = phi i64 [ %174, %163 ], [ %121, %159 ]
  %167 = getelementptr i16, i16* %95, i64 %164
  %168 = add <8 x i16> %165, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %169 = bitcast i16* %167 to <8 x i16>*
  store <8 x i16> %165, <8 x i16>* %169, align 2
  %170 = getelementptr i16, i16* %167, i64 8
  %171 = bitcast i16* %170 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %171, align 2
  %172 = add i64 %164, 16
  %173 = add <8 x i16> %165, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %174 = add i64 %166, -1
  %175 = icmp eq i64 %174, 0
  br i1 %175, label %176, label %163, !llvm.loop !5

176:                                              ; preds = %163, %159
  %177 = icmp eq i64 %105, %108
  br i1 %177, label %191, label %178

178:                                              ; preds = %176, %102
  %179 = phi i32 [ %100, %102 ], [ %110, %176 ]
  %180 = phi i32 [ %94, %102 ], [ %112, %176 ]
  %181 = phi i16* [ %95, %102 ], [ %113, %176 ]
  br label %182

182:                                              ; preds = %178, %182
  %183 = phi i32 [ %186, %182 ], [ %179, %178 ]
  %184 = phi i32 [ %187, %182 ], [ %180, %178 ]
  %185 = phi i16* [ %189, %182 ], [ %181, %178 ]
  %186 = add nsw i32 %183, -1
  %187 = add nsw i32 %184, 1
  %188 = trunc i32 %184 to i16
  %189 = getelementptr inbounds i16, i16* %185, i64 1
  store i16 %188, i16* %185, align 2
  %190 = icmp sgt i32 %186, 0
  br i1 %190, label %182, label %191, !llvm.loop !7

191:                                              ; preds = %182, %176, %97
  %192 = sub nsw i32 %93, %100
  %193 = icmp eq i32 %192, 0
  br i1 %193, label %203, label %194

194:                                              ; preds = %191
  %195 = sext i32 %100 to i64
  %196 = getelementptr inbounds i16, i16* %95, i64 %195
  br label %197

197:                                              ; preds = %194, %92
  %198 = phi i32 [ %192, %194 ], [ %93, %92 ]
  %199 = phi i16* [ %196, %194 ], [ %95, %92 ]
  %200 = trunc i32 %72 to i16
  %201 = add i16 %200, -1
  %202 = load void (i16*, i16, i32)*, void (i16*, i16, i32)** @_ZN6SkOpts8memset16E, align 8
  call void %202(i16* %199, i16 zeroext %201, i32 %198) #3
  br label %203

203:                                              ; preds = %197, %81, %191, %74
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZL22repeatx_nofilter_transIXadL_ZL10int_repeatiiEEEvRK17SkBitmapProcStatePjiii(%struct.SkBitmapProcState* dereferenceable(336), i32* nocapture, i32, i32, i32) #0 {
  %6 = alloca %struct.SkPoint, align 4
  %7 = bitcast %struct.SkPoint* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #3
  %8 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %6, i64 0, i32 0
  store float 0xFFFFFFFFE0000000, float* %8, align 4
  %9 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %6, i64 0, i32 1
  store float 0xFFFFFFFFE0000000, float* %9, align 4
  %10 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 7
  %11 = load void (%class.SkMatrix*, float, float, %struct.SkPoint*)*, void (%class.SkMatrix*, float, float, %struct.SkPoint*)** %10, align 8
  %12 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 2
  %13 = sitofp i32 %3 to float
  %14 = fadd float %13, 5.000000e-01
  %15 = sitofp i32 %4 to float
  %16 = fadd float %15, 5.000000e-01
  call void %11(%class.SkMatrix* dereferenceable(40) %12, float %14, float %16, %struct.SkPoint* nonnull %6) #3
  %17 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 6
  %18 = load i8, i8* %17, align 4, !range !2
  %19 = icmp eq i8 %18, 0
  br i1 %19, label %27, label %20

20:                                               ; preds = %5
  %21 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 10
  %22 = load i32, i32* %21, align 8
  %23 = ashr i32 %22, 1
  %24 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 11
  %25 = load i32, i32* %24, align 4
  %26 = ashr i32 %25, 1
  br label %36

27:                                               ; preds = %5
  %28 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %12, i64 0, i32 0, i64 0
  %29 = load float, float* %28, align 4
  %30 = fcmp ogt float %29, 0.000000e+00
  %31 = zext i1 %30 to i32
  %32 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 2, i32 0, i64 4
  %33 = load float, float* %32, align 4
  %34 = fcmp ogt float %33, 0.000000e+00
  %35 = zext i1 %34 to i32
  br label %36

36:                                               ; preds = %20, %27
  %37 = phi i32 [ %23, %20 ], [ %31, %27 ]
  %38 = phi i32 [ %26, %20 ], [ %35, %27 ]
  %39 = load float, float* %8, align 4
  %40 = fmul float %39, 0x41F0000000000000
  %41 = fcmp olt float %40, 0x43DFFFFFE0000000
  %42 = select i1 %41, float %40, float 0x43DFFFFFE0000000
  %43 = fcmp ogt float %42, 0xC3DFFFFFE0000000
  %44 = select i1 %43, float %42, float 0xC3DFFFFFE0000000
  %45 = fptosi float %44 to i64
  %46 = sext i32 %37 to i64
  %47 = shl nsw i64 %46, 16
  %48 = sub i64 %45, %47
  %49 = load float, float* %9, align 4
  %50 = fmul float %49, 0x41F0000000000000
  %51 = fcmp olt float %50, 0x43DFFFFFE0000000
  %52 = select i1 %51, float %50, float 0x43DFFFFFE0000000
  %53 = fcmp ogt float %52, 0xC3DFFFFFE0000000
  %54 = select i1 %53, float %52, float 0xC3DFFFFFE0000000
  %55 = fptosi float %54 to i64
  %56 = sext i32 %38 to i64
  %57 = shl nsw i64 %56, 16
  %58 = sub i64 %55, %57
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #3
  %59 = lshr i64 %58, 32
  %60 = trunc i64 %59 to i32
  %61 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 1, i32 2, i32 1, i32 1
  %62 = load i32, i32* %61, align 4
  %63 = icmp ugt i32 %62, %60
  br i1 %63, label %73, label %64

64:                                               ; preds = %36
  %65 = icmp slt i32 %60, 0
  br i1 %65, label %66, label %71

66:                                               ; preds = %64
  %67 = xor i32 %60, -1
  %68 = srem i32 %67, %62
  %69 = xor i32 %68, -1
  %70 = add nsw i32 %62, %69
  br label %73

71:                                               ; preds = %64
  %72 = srem i32 %60, %62
  br label %73

73:                                               ; preds = %36, %66, %71
  %74 = phi i32 [ %70, %66 ], [ %72, %71 ], [ %60, %36 ]
  %75 = getelementptr inbounds i32, i32* %1, i64 1
  store i32 %74, i32* %1, align 4
  %76 = lshr i64 %48, 32
  %77 = trunc i64 %76 to i32
  %78 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 1, i32 2, i32 1, i32 0
  %79 = load i32, i32* %78, align 4
  %80 = icmp eq i32 %79, 1
  br i1 %80, label %81, label %85

81:                                               ; preds = %73
  %82 = bitcast i32* %75 to i8*
  %83 = sext i32 %2 to i64
  %84 = shl nsw i64 %83, 1
  call void @llvm.memset.p0i8.i64(i8* align 4 %82, i8 0, i64 %84, i1 false)
  br label %369

85:                                               ; preds = %73
  %86 = bitcast i32* %75 to i16*
  %87 = icmp ugt i32 %79, %77
  br i1 %87, label %97, label %88

88:                                               ; preds = %85
  %89 = icmp slt i32 %77, 0
  br i1 %89, label %90, label %95

90:                                               ; preds = %88
  %91 = xor i32 %77, -1
  %92 = srem i32 %91, %79
  %93 = xor i32 %92, -1
  %94 = add nsw i32 %79, %93
  br label %97

95:                                               ; preds = %88
  %96 = srem i32 %77, %79
  br label %97

97:                                               ; preds = %85, %90, %95
  %98 = phi i32 [ %94, %90 ], [ %96, %95 ], [ %77, %85 ]
  %99 = sub nsw i32 %79, %98
  %100 = icmp sgt i32 %99, %2
  %101 = select i1 %100, i32 %2, i32 %99
  %102 = icmp sgt i32 %101, 0
  br i1 %102, label %103, label %192

103:                                              ; preds = %97
  %104 = add nsw i32 %101, -1
  %105 = zext i32 %104 to i64
  %106 = add nuw nsw i64 %105, 1
  %107 = icmp ult i64 %106, 16
  br i1 %107, label %179, label %108

108:                                              ; preds = %103
  %109 = and i64 %106, 8589934576
  %110 = trunc i64 %109 to i32
  %111 = sub i32 %101, %110
  %112 = trunc i64 %109 to i32
  %113 = add i32 %98, %112
  %114 = getelementptr i16, i16* %86, i64 %109
  %115 = trunc i32 %98 to i16
  %116 = insertelement <8 x i16> undef, i16 %115, i32 0
  %117 = shufflevector <8 x i16> %116, <8 x i16> undef, <8 x i32> zeroinitializer
  %118 = add <8 x i16> %117, <i16 0, i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7>
  %119 = add nsw i64 %109, -16
  %120 = lshr exact i64 %119, 4
  %121 = add nuw nsw i64 %120, 1
  %122 = and i64 %121, 3
  %123 = icmp ult i64 %119, 48
  br i1 %123, label %160, label %124

124:                                              ; preds = %108
  %125 = sub nsw i64 %121, %122
  br label %126

126:                                              ; preds = %126, %124
  %127 = phi i64 [ 0, %124 ], [ %156, %126 ]
  %128 = phi <8 x i16> [ %118, %124 ], [ %157, %126 ]
  %129 = phi i64 [ %125, %124 ], [ %158, %126 ]
  %130 = getelementptr i16, i16* %86, i64 %127
  %131 = add <8 x i16> %128, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %132 = bitcast i16* %130 to <8 x i16>*
  store <8 x i16> %128, <8 x i16>* %132, align 2
  %133 = getelementptr i16, i16* %130, i64 8
  %134 = bitcast i16* %133 to <8 x i16>*
  store <8 x i16> %131, <8 x i16>* %134, align 2
  %135 = or i64 %127, 16
  %136 = add <8 x i16> %128, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %137 = getelementptr i16, i16* %86, i64 %135
  %138 = add <8 x i16> %128, <i16 24, i16 24, i16 24, i16 24, i16 24, i16 24, i16 24, i16 24>
  %139 = bitcast i16* %137 to <8 x i16>*
  store <8 x i16> %136, <8 x i16>* %139, align 2
  %140 = getelementptr i16, i16* %137, i64 8
  %141 = bitcast i16* %140 to <8 x i16>*
  store <8 x i16> %138, <8 x i16>* %141, align 2
  %142 = or i64 %127, 32
  %143 = add <8 x i16> %128, <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>
  %144 = getelementptr i16, i16* %86, i64 %142
  %145 = add <8 x i16> %128, <i16 40, i16 40, i16 40, i16 40, i16 40, i16 40, i16 40, i16 40>
  %146 = bitcast i16* %144 to <8 x i16>*
  store <8 x i16> %143, <8 x i16>* %146, align 2
  %147 = getelementptr i16, i16* %144, i64 8
  %148 = bitcast i16* %147 to <8 x i16>*
  store <8 x i16> %145, <8 x i16>* %148, align 2
  %149 = or i64 %127, 48
  %150 = add <8 x i16> %128, <i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48>
  %151 = getelementptr i16, i16* %86, i64 %149
  %152 = add <8 x i16> %128, <i16 56, i16 56, i16 56, i16 56, i16 56, i16 56, i16 56, i16 56>
  %153 = bitcast i16* %151 to <8 x i16>*
  store <8 x i16> %150, <8 x i16>* %153, align 2
  %154 = getelementptr i16, i16* %151, i64 8
  %155 = bitcast i16* %154 to <8 x i16>*
  store <8 x i16> %152, <8 x i16>* %155, align 2
  %156 = add i64 %127, 64
  %157 = add <8 x i16> %128, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %158 = add i64 %129, -4
  %159 = icmp eq i64 %158, 0
  br i1 %159, label %160, label %126, !llvm.loop !9

160:                                              ; preds = %126, %108
  %161 = phi i64 [ 0, %108 ], [ %156, %126 ]
  %162 = phi <8 x i16> [ %118, %108 ], [ %157, %126 ]
  %163 = icmp eq i64 %122, 0
  br i1 %163, label %177, label %164

164:                                              ; preds = %160, %164
  %165 = phi i64 [ %173, %164 ], [ %161, %160 ]
  %166 = phi <8 x i16> [ %174, %164 ], [ %162, %160 ]
  %167 = phi i64 [ %175, %164 ], [ %122, %160 ]
  %168 = getelementptr i16, i16* %86, i64 %165
  %169 = add <8 x i16> %166, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %170 = bitcast i16* %168 to <8 x i16>*
  store <8 x i16> %166, <8 x i16>* %170, align 2
  %171 = getelementptr i16, i16* %168, i64 8
  %172 = bitcast i16* %171 to <8 x i16>*
  store <8 x i16> %169, <8 x i16>* %172, align 2
  %173 = add i64 %165, 16
  %174 = add <8 x i16> %166, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %175 = add i64 %167, -1
  %176 = icmp eq i64 %175, 0
  br i1 %176, label %177, label %164, !llvm.loop !10

177:                                              ; preds = %164, %160
  %178 = icmp eq i64 %106, %109
  br i1 %178, label %192, label %179

179:                                              ; preds = %177, %103
  %180 = phi i32 [ %101, %103 ], [ %111, %177 ]
  %181 = phi i32 [ %98, %103 ], [ %113, %177 ]
  %182 = phi i16* [ %86, %103 ], [ %114, %177 ]
  br label %183

183:                                              ; preds = %179, %183
  %184 = phi i32 [ %187, %183 ], [ %180, %179 ]
  %185 = phi i32 [ %188, %183 ], [ %181, %179 ]
  %186 = phi i16* [ %190, %183 ], [ %182, %179 ]
  %187 = add nsw i32 %184, -1
  %188 = add nsw i32 %185, 1
  %189 = trunc i32 %185 to i16
  %190 = getelementptr inbounds i16, i16* %186, i64 1
  store i16 %189, i16* %186, align 2
  %191 = icmp sgt i32 %187, 0
  br i1 %191, label %183, label %192, !llvm.loop !11

192:                                              ; preds = %183, %177, %97
  %193 = sext i32 %101 to i64
  %194 = getelementptr inbounds i16, i16* %86, i64 %193
  %195 = sub nsw i32 %2, %101
  %196 = icmp slt i32 %195, %79
  br i1 %196, label %286, label %197

197:                                              ; preds = %192
  %198 = icmp sgt i32 %79, 0
  %199 = sext i32 %79 to i64
  %200 = add i32 %79, -1
  %201 = zext i32 %200 to i64
  %202 = add nuw nsw i64 %201, 1
  %203 = and i64 %202, 8589934576
  %204 = add nsw i64 %203, -16
  %205 = lshr exact i64 %204, 4
  %206 = add nuw nsw i64 %205, 1
  %207 = icmp ult i64 %202, 16
  %208 = and i64 %202, 8589934576
  %209 = trunc i64 %208 to i32
  %210 = and i64 %206, 3
  %211 = icmp ult i64 %204, 48
  %212 = sub nsw i64 %206, %210
  %213 = icmp eq i64 %210, 0
  %214 = icmp eq i64 %202, %208
  br label %215

215:                                              ; preds = %197, %282
  %216 = phi i16* [ %194, %197 ], [ %283, %282 ]
  %217 = phi i32 [ %195, %197 ], [ %284, %282 ]
  br i1 %198, label %218, label %282

218:                                              ; preds = %215
  br i1 %207, label %272, label %219

219:                                              ; preds = %218
  %220 = getelementptr i16, i16* %216, i64 %208
  br i1 %211, label %255, label %221

221:                                              ; preds = %219, %221
  %222 = phi i64 [ %251, %221 ], [ 0, %219 ]
  %223 = phi <8 x i16> [ %252, %221 ], [ <i16 0, i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7>, %219 ]
  %224 = phi i64 [ %253, %221 ], [ %212, %219 ]
  %225 = getelementptr i16, i16* %216, i64 %222
  %226 = add <8 x i16> %223, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %227 = bitcast i16* %225 to <8 x i16>*
  store <8 x i16> %223, <8 x i16>* %227, align 2
  %228 = getelementptr i16, i16* %225, i64 8
  %229 = bitcast i16* %228 to <8 x i16>*
  store <8 x i16> %226, <8 x i16>* %229, align 2
  %230 = or i64 %222, 16
  %231 = add <8 x i16> %223, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %232 = getelementptr i16, i16* %216, i64 %230
  %233 = add <8 x i16> %223, <i16 24, i16 24, i16 24, i16 24, i16 24, i16 24, i16 24, i16 24>
  %234 = bitcast i16* %232 to <8 x i16>*
  store <8 x i16> %231, <8 x i16>* %234, align 2
  %235 = getelementptr i16, i16* %232, i64 8
  %236 = bitcast i16* %235 to <8 x i16>*
  store <8 x i16> %233, <8 x i16>* %236, align 2
  %237 = or i64 %222, 32
  %238 = add <8 x i16> %223, <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>
  %239 = getelementptr i16, i16* %216, i64 %237
  %240 = add <8 x i16> %223, <i16 40, i16 40, i16 40, i16 40, i16 40, i16 40, i16 40, i16 40>
  %241 = bitcast i16* %239 to <8 x i16>*
  store <8 x i16> %238, <8 x i16>* %241, align 2
  %242 = getelementptr i16, i16* %239, i64 8
  %243 = bitcast i16* %242 to <8 x i16>*
  store <8 x i16> %240, <8 x i16>* %243, align 2
  %244 = or i64 %222, 48
  %245 = add <8 x i16> %223, <i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48>
  %246 = getelementptr i16, i16* %216, i64 %244
  %247 = add <8 x i16> %223, <i16 56, i16 56, i16 56, i16 56, i16 56, i16 56, i16 56, i16 56>
  %248 = bitcast i16* %246 to <8 x i16>*
  store <8 x i16> %245, <8 x i16>* %248, align 2
  %249 = getelementptr i16, i16* %246, i64 8
  %250 = bitcast i16* %249 to <8 x i16>*
  store <8 x i16> %247, <8 x i16>* %250, align 2
  %251 = add i64 %222, 64
  %252 = add <8 x i16> %223, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %253 = add i64 %224, -4
  %254 = icmp eq i64 %253, 0
  br i1 %254, label %255, label %221, !llvm.loop !12

255:                                              ; preds = %221, %219
  %256 = phi i64 [ 0, %219 ], [ %251, %221 ]
  %257 = phi <8 x i16> [ <i16 0, i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7>, %219 ], [ %252, %221 ]
  br i1 %213, label %271, label %258

258:                                              ; preds = %255, %258
  %259 = phi i64 [ %267, %258 ], [ %256, %255 ]
  %260 = phi <8 x i16> [ %268, %258 ], [ %257, %255 ]
  %261 = phi i64 [ %269, %258 ], [ %210, %255 ]
  %262 = getelementptr i16, i16* %216, i64 %259
  %263 = add <8 x i16> %260, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %264 = bitcast i16* %262 to <8 x i16>*
  store <8 x i16> %260, <8 x i16>* %264, align 2
  %265 = getelementptr i16, i16* %262, i64 8
  %266 = bitcast i16* %265 to <8 x i16>*
  store <8 x i16> %263, <8 x i16>* %266, align 2
  %267 = add i64 %259, 16
  %268 = add <8 x i16> %260, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %269 = add i64 %261, -1
  %270 = icmp eq i64 %269, 0
  br i1 %270, label %271, label %258, !llvm.loop !13

271:                                              ; preds = %258, %255
  br i1 %214, label %282, label %272

272:                                              ; preds = %271, %218
  %273 = phi i32 [ 0, %218 ], [ %209, %271 ]
  %274 = phi i16* [ %216, %218 ], [ %220, %271 ]
  br label %275

275:                                              ; preds = %272, %275
  %276 = phi i32 [ %278, %275 ], [ %273, %272 ]
  %277 = phi i16* [ %280, %275 ], [ %274, %272 ]
  %278 = add nuw i32 %276, 1
  %279 = trunc i32 %276 to i16
  %280 = getelementptr inbounds i16, i16* %277, i64 1
  store i16 %279, i16* %277, align 2
  %281 = icmp eq i32 %278, %79
  br i1 %281, label %282, label %275, !llvm.loop !14

282:                                              ; preds = %275, %271, %215
  %283 = getelementptr inbounds i16, i16* %216, i64 %199
  %284 = sub nsw i32 %217, %79
  %285 = icmp slt i32 %284, %79
  br i1 %285, label %286, label %215

286:                                              ; preds = %282, %192
  %287 = phi i32 [ %195, %192 ], [ %284, %282 ]
  %288 = phi i16* [ %194, %192 ], [ %283, %282 ]
  %289 = icmp sgt i32 %287, 0
  br i1 %289, label %290, label %369

290:                                              ; preds = %286
  %291 = add i32 %287, -1
  %292 = zext i32 %291 to i64
  %293 = add nuw nsw i64 %292, 1
  %294 = icmp ult i64 %293, 16
  br i1 %294, label %359, label %295

295:                                              ; preds = %290
  %296 = and i64 %293, 8589934576
  %297 = trunc i64 %296 to i32
  %298 = getelementptr i16, i16* %288, i64 %296
  %299 = add nsw i64 %296, -16
  %300 = lshr exact i64 %299, 4
  %301 = add nuw nsw i64 %300, 1
  %302 = and i64 %301, 3
  %303 = icmp ult i64 %299, 48
  br i1 %303, label %340, label %304

304:                                              ; preds = %295
  %305 = sub nsw i64 %301, %302
  br label %306

306:                                              ; preds = %306, %304
  %307 = phi i64 [ 0, %304 ], [ %336, %306 ]
  %308 = phi <8 x i16> [ <i16 0, i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7>, %304 ], [ %337, %306 ]
  %309 = phi i64 [ %305, %304 ], [ %338, %306 ]
  %310 = getelementptr i16, i16* %288, i64 %307
  %311 = add <8 x i16> %308, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %312 = bitcast i16* %310 to <8 x i16>*
  store <8 x i16> %308, <8 x i16>* %312, align 2
  %313 = getelementptr i16, i16* %310, i64 8
  %314 = bitcast i16* %313 to <8 x i16>*
  store <8 x i16> %311, <8 x i16>* %314, align 2
  %315 = or i64 %307, 16
  %316 = add <8 x i16> %308, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %317 = getelementptr i16, i16* %288, i64 %315
  %318 = add <8 x i16> %308, <i16 24, i16 24, i16 24, i16 24, i16 24, i16 24, i16 24, i16 24>
  %319 = bitcast i16* %317 to <8 x i16>*
  store <8 x i16> %316, <8 x i16>* %319, align 2
  %320 = getelementptr i16, i16* %317, i64 8
  %321 = bitcast i16* %320 to <8 x i16>*
  store <8 x i16> %318, <8 x i16>* %321, align 2
  %322 = or i64 %307, 32
  %323 = add <8 x i16> %308, <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>
  %324 = getelementptr i16, i16* %288, i64 %322
  %325 = add <8 x i16> %308, <i16 40, i16 40, i16 40, i16 40, i16 40, i16 40, i16 40, i16 40>
  %326 = bitcast i16* %324 to <8 x i16>*
  store <8 x i16> %323, <8 x i16>* %326, align 2
  %327 = getelementptr i16, i16* %324, i64 8
  %328 = bitcast i16* %327 to <8 x i16>*
  store <8 x i16> %325, <8 x i16>* %328, align 2
  %329 = or i64 %307, 48
  %330 = add <8 x i16> %308, <i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48>
  %331 = getelementptr i16, i16* %288, i64 %329
  %332 = add <8 x i16> %308, <i16 56, i16 56, i16 56, i16 56, i16 56, i16 56, i16 56, i16 56>
  %333 = bitcast i16* %331 to <8 x i16>*
  store <8 x i16> %330, <8 x i16>* %333, align 2
  %334 = getelementptr i16, i16* %331, i64 8
  %335 = bitcast i16* %334 to <8 x i16>*
  store <8 x i16> %332, <8 x i16>* %335, align 2
  %336 = add i64 %307, 64
  %337 = add <8 x i16> %308, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %338 = add i64 %309, -4
  %339 = icmp eq i64 %338, 0
  br i1 %339, label %340, label %306, !llvm.loop !15

340:                                              ; preds = %306, %295
  %341 = phi i64 [ 0, %295 ], [ %336, %306 ]
  %342 = phi <8 x i16> [ <i16 0, i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7>, %295 ], [ %337, %306 ]
  %343 = icmp eq i64 %302, 0
  br i1 %343, label %357, label %344

344:                                              ; preds = %340, %344
  %345 = phi i64 [ %353, %344 ], [ %341, %340 ]
  %346 = phi <8 x i16> [ %354, %344 ], [ %342, %340 ]
  %347 = phi i64 [ %355, %344 ], [ %302, %340 ]
  %348 = getelementptr i16, i16* %288, i64 %345
  %349 = add <8 x i16> %346, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %350 = bitcast i16* %348 to <8 x i16>*
  store <8 x i16> %346, <8 x i16>* %350, align 2
  %351 = getelementptr i16, i16* %348, i64 8
  %352 = bitcast i16* %351 to <8 x i16>*
  store <8 x i16> %349, <8 x i16>* %352, align 2
  %353 = add i64 %345, 16
  %354 = add <8 x i16> %346, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %355 = add i64 %347, -1
  %356 = icmp eq i64 %355, 0
  br i1 %356, label %357, label %344, !llvm.loop !16

357:                                              ; preds = %344, %340
  %358 = icmp eq i64 %293, %296
  br i1 %358, label %369, label %359

359:                                              ; preds = %357, %290
  %360 = phi i32 [ 0, %290 ], [ %297, %357 ]
  %361 = phi i16* [ %288, %290 ], [ %298, %357 ]
  br label %362

362:                                              ; preds = %359, %362
  %363 = phi i32 [ %365, %362 ], [ %360, %359 ]
  %364 = phi i16* [ %367, %362 ], [ %361, %359 ]
  %365 = add nuw i32 %363, 1
  %366 = trunc i32 %363 to i16
  %367 = getelementptr inbounds i16, i16* %364, i64 1
  store i16 %366, i16* %364, align 2
  %368 = icmp eq i32 %365, %287
  br i1 %368, label %369, label %362, !llvm.loop !17

369:                                              ; preds = %362, %357, %286, %81
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZL22mirrorx_nofilter_transIXadL_ZL10int_mirroriiEEEvRK17SkBitmapProcStatePjiii(%struct.SkBitmapProcState* dereferenceable(336), i32* nocapture, i32, i32, i32) #0 {
  %6 = alloca %struct.SkPoint, align 4
  %7 = bitcast %struct.SkPoint* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #3
  %8 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %6, i64 0, i32 0
  store float 0xFFFFFFFFE0000000, float* %8, align 4
  %9 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %6, i64 0, i32 1
  store float 0xFFFFFFFFE0000000, float* %9, align 4
  %10 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 7
  %11 = load void (%class.SkMatrix*, float, float, %struct.SkPoint*)*, void (%class.SkMatrix*, float, float, %struct.SkPoint*)** %10, align 8
  %12 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 2
  %13 = sitofp i32 %3 to float
  %14 = fadd float %13, 5.000000e-01
  %15 = sitofp i32 %4 to float
  %16 = fadd float %15, 5.000000e-01
  call void %11(%class.SkMatrix* dereferenceable(40) %12, float %14, float %16, %struct.SkPoint* nonnull %6) #3
  %17 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 6
  %18 = load i8, i8* %17, align 4, !range !2
  %19 = icmp eq i8 %18, 0
  br i1 %19, label %27, label %20

20:                                               ; preds = %5
  %21 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 10
  %22 = load i32, i32* %21, align 8
  %23 = ashr i32 %22, 1
  %24 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 11
  %25 = load i32, i32* %24, align 4
  %26 = ashr i32 %25, 1
  br label %36

27:                                               ; preds = %5
  %28 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %12, i64 0, i32 0, i64 0
  %29 = load float, float* %28, align 4
  %30 = fcmp ogt float %29, 0.000000e+00
  %31 = zext i1 %30 to i32
  %32 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 2, i32 0, i64 4
  %33 = load float, float* %32, align 4
  %34 = fcmp ogt float %33, 0.000000e+00
  %35 = zext i1 %34 to i32
  br label %36

36:                                               ; preds = %20, %27
  %37 = phi i32 [ %23, %20 ], [ %31, %27 ]
  %38 = phi i32 [ %26, %20 ], [ %35, %27 ]
  %39 = load float, float* %8, align 4
  %40 = fmul float %39, 0x41F0000000000000
  %41 = fcmp olt float %40, 0x43DFFFFFE0000000
  %42 = select i1 %41, float %40, float 0x43DFFFFFE0000000
  %43 = fcmp ogt float %42, 0xC3DFFFFFE0000000
  %44 = select i1 %43, float %42, float 0xC3DFFFFFE0000000
  %45 = fptosi float %44 to i64
  %46 = sext i32 %37 to i64
  %47 = shl nsw i64 %46, 16
  %48 = sub i64 %45, %47
  %49 = load float, float* %9, align 4
  %50 = fmul float %49, 0x41F0000000000000
  %51 = fcmp olt float %50, 0x43DFFFFFE0000000
  %52 = select i1 %51, float %50, float 0x43DFFFFFE0000000
  %53 = fcmp ogt float %52, 0xC3DFFFFFE0000000
  %54 = select i1 %53, float %52, float 0xC3DFFFFFE0000000
  %55 = fptosi float %54 to i64
  %56 = sext i32 %38 to i64
  %57 = shl nsw i64 %56, 16
  %58 = sub i64 %55, %57
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #3
  %59 = lshr i64 %58, 32
  %60 = trunc i64 %59 to i32
  %61 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 1, i32 2, i32 1, i32 1
  %62 = load i32, i32* %61, align 4
  %63 = shl i32 %62, 1
  %64 = icmp ugt i32 %63, %60
  br i1 %64, label %74, label %65

65:                                               ; preds = %36
  %66 = icmp slt i32 %60, 0
  br i1 %66, label %67, label %72

67:                                               ; preds = %65
  %68 = xor i32 %60, -1
  %69 = srem i32 %68, %63
  %70 = xor i32 %69, -1
  %71 = add nsw i32 %63, %70
  br label %74

72:                                               ; preds = %65
  %73 = srem i32 %60, %63
  br label %74

74:                                               ; preds = %36, %67, %72
  %75 = phi i32 [ %71, %67 ], [ %73, %72 ], [ %60, %36 ]
  %76 = icmp slt i32 %75, %62
  %77 = xor i32 %75, -1
  %78 = add i32 %63, %77
  %79 = select i1 %76, i32 %75, i32 %78
  %80 = getelementptr inbounds i32, i32* %1, i64 1
  store i32 %79, i32* %1, align 4
  %81 = lshr i64 %48, 32
  %82 = trunc i64 %81 to i32
  %83 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 1, i32 2, i32 1, i32 0
  %84 = load i32, i32* %83, align 4
  %85 = icmp eq i32 %84, 1
  br i1 %85, label %86, label %90

86:                                               ; preds = %74
  %87 = bitcast i32* %80 to i8*
  %88 = sext i32 %2 to i64
  %89 = shl nsw i64 %88, 1
  call void @llvm.memset.p0i8.i64(i8* align 4 %87, i8 0, i64 %89, i1 false)
  br label %620

90:                                               ; preds = %74
  %91 = bitcast i32* %80 to i16*
  %92 = shl i32 %84, 1
  %93 = icmp ugt i32 %92, %82
  br i1 %93, label %103, label %94

94:                                               ; preds = %90
  %95 = icmp slt i32 %82, 0
  br i1 %95, label %96, label %101

96:                                               ; preds = %94
  %97 = xor i32 %82, -1
  %98 = srem i32 %97, %92
  %99 = xor i32 %98, -1
  %100 = add nsw i32 %92, %99
  br label %103

101:                                              ; preds = %94
  %102 = srem i32 %82, %92
  br label %103

103:                                              ; preds = %90, %96, %101
  %104 = phi i32 [ %100, %96 ], [ %102, %101 ], [ %82, %90 ]
  %105 = icmp sgt i32 %84, %104
  br i1 %105, label %106, label %200

106:                                              ; preds = %103
  %107 = sub nsw i32 %84, %104
  %108 = icmp sgt i32 %107, %2
  %109 = select i1 %108, i32 %2, i32 %107
  %110 = icmp sgt i32 %109, 0
  br i1 %110, label %111, label %296

111:                                              ; preds = %106
  %112 = add nsw i32 %109, -1
  %113 = zext i32 %112 to i64
  %114 = add nuw nsw i64 %113, 1
  %115 = icmp ult i64 %114, 16
  br i1 %115, label %187, label %116

116:                                              ; preds = %111
  %117 = and i64 %114, 8589934576
  %118 = trunc i64 %117 to i32
  %119 = sub i32 %109, %118
  %120 = trunc i64 %117 to i32
  %121 = add i32 %104, %120
  %122 = getelementptr i16, i16* %91, i64 %117
  %123 = trunc i32 %104 to i16
  %124 = insertelement <8 x i16> undef, i16 %123, i32 0
  %125 = shufflevector <8 x i16> %124, <8 x i16> undef, <8 x i32> zeroinitializer
  %126 = add <8 x i16> %125, <i16 0, i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7>
  %127 = add nsw i64 %117, -16
  %128 = lshr exact i64 %127, 4
  %129 = add nuw nsw i64 %128, 1
  %130 = and i64 %129, 3
  %131 = icmp ult i64 %127, 48
  br i1 %131, label %168, label %132

132:                                              ; preds = %116
  %133 = sub nsw i64 %129, %130
  br label %134

134:                                              ; preds = %134, %132
  %135 = phi i64 [ 0, %132 ], [ %164, %134 ]
  %136 = phi <8 x i16> [ %126, %132 ], [ %165, %134 ]
  %137 = phi i64 [ %133, %132 ], [ %166, %134 ]
  %138 = getelementptr i16, i16* %91, i64 %135
  %139 = add <8 x i16> %136, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %140 = bitcast i16* %138 to <8 x i16>*
  store <8 x i16> %136, <8 x i16>* %140, align 2
  %141 = getelementptr i16, i16* %138, i64 8
  %142 = bitcast i16* %141 to <8 x i16>*
  store <8 x i16> %139, <8 x i16>* %142, align 2
  %143 = or i64 %135, 16
  %144 = add <8 x i16> %136, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %145 = getelementptr i16, i16* %91, i64 %143
  %146 = add <8 x i16> %136, <i16 24, i16 24, i16 24, i16 24, i16 24, i16 24, i16 24, i16 24>
  %147 = bitcast i16* %145 to <8 x i16>*
  store <8 x i16> %144, <8 x i16>* %147, align 2
  %148 = getelementptr i16, i16* %145, i64 8
  %149 = bitcast i16* %148 to <8 x i16>*
  store <8 x i16> %146, <8 x i16>* %149, align 2
  %150 = or i64 %135, 32
  %151 = add <8 x i16> %136, <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>
  %152 = getelementptr i16, i16* %91, i64 %150
  %153 = add <8 x i16> %136, <i16 40, i16 40, i16 40, i16 40, i16 40, i16 40, i16 40, i16 40>
  %154 = bitcast i16* %152 to <8 x i16>*
  store <8 x i16> %151, <8 x i16>* %154, align 2
  %155 = getelementptr i16, i16* %152, i64 8
  %156 = bitcast i16* %155 to <8 x i16>*
  store <8 x i16> %153, <8 x i16>* %156, align 2
  %157 = or i64 %135, 48
  %158 = add <8 x i16> %136, <i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48>
  %159 = getelementptr i16, i16* %91, i64 %157
  %160 = add <8 x i16> %136, <i16 56, i16 56, i16 56, i16 56, i16 56, i16 56, i16 56, i16 56>
  %161 = bitcast i16* %159 to <8 x i16>*
  store <8 x i16> %158, <8 x i16>* %161, align 2
  %162 = getelementptr i16, i16* %159, i64 8
  %163 = bitcast i16* %162 to <8 x i16>*
  store <8 x i16> %160, <8 x i16>* %163, align 2
  %164 = add i64 %135, 64
  %165 = add <8 x i16> %136, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %166 = add i64 %137, -4
  %167 = icmp eq i64 %166, 0
  br i1 %167, label %168, label %134, !llvm.loop !18

168:                                              ; preds = %134, %116
  %169 = phi i64 [ 0, %116 ], [ %164, %134 ]
  %170 = phi <8 x i16> [ %126, %116 ], [ %165, %134 ]
  %171 = icmp eq i64 %130, 0
  br i1 %171, label %185, label %172

172:                                              ; preds = %168, %172
  %173 = phi i64 [ %181, %172 ], [ %169, %168 ]
  %174 = phi <8 x i16> [ %182, %172 ], [ %170, %168 ]
  %175 = phi i64 [ %183, %172 ], [ %130, %168 ]
  %176 = getelementptr i16, i16* %91, i64 %173
  %177 = add <8 x i16> %174, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %178 = bitcast i16* %176 to <8 x i16>*
  store <8 x i16> %174, <8 x i16>* %178, align 2
  %179 = getelementptr i16, i16* %176, i64 8
  %180 = bitcast i16* %179 to <8 x i16>*
  store <8 x i16> %177, <8 x i16>* %180, align 2
  %181 = add i64 %173, 16
  %182 = add <8 x i16> %174, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %183 = add i64 %175, -1
  %184 = icmp eq i64 %183, 0
  br i1 %184, label %185, label %172, !llvm.loop !19

185:                                              ; preds = %172, %168
  %186 = icmp eq i64 %114, %117
  br i1 %186, label %296, label %187

187:                                              ; preds = %185, %111
  %188 = phi i32 [ %109, %111 ], [ %119, %185 ]
  %189 = phi i32 [ %104, %111 ], [ %121, %185 ]
  %190 = phi i16* [ %91, %111 ], [ %122, %185 ]
  br label %191

191:                                              ; preds = %187, %191
  %192 = phi i32 [ %195, %191 ], [ %188, %187 ]
  %193 = phi i32 [ %196, %191 ], [ %189, %187 ]
  %194 = phi i16* [ %198, %191 ], [ %190, %187 ]
  %195 = add nsw i32 %192, -1
  %196 = add nsw i32 %193, 1
  %197 = trunc i32 %193 to i16
  %198 = getelementptr inbounds i16, i16* %194, i64 1
  store i16 %197, i16* %194, align 2
  %199 = icmp sgt i32 %195, 0
  br i1 %199, label %191, label %296, !llvm.loop !20

200:                                              ; preds = %103
  %201 = sub i32 %92, %104
  %202 = icmp sgt i32 %201, %2
  %203 = select i1 %202, i32 %2, i32 %201
  %204 = icmp sgt i32 %203, 0
  br i1 %204, label %205, label %296

205:                                              ; preds = %200
  %206 = xor i32 %104, -1
  %207 = add i32 %92, %206
  %208 = add nsw i32 %203, -1
  %209 = zext i32 %208 to i64
  %210 = add nuw nsw i64 %209, 1
  %211 = icmp ult i64 %210, 16
  br i1 %211, label %283, label %212

212:                                              ; preds = %205
  %213 = and i64 %210, 8589934576
  %214 = trunc i64 %213 to i32
  %215 = sub i32 %203, %214
  %216 = trunc i64 %213 to i32
  %217 = sub i32 %207, %216
  %218 = getelementptr i16, i16* %91, i64 %213
  %219 = trunc i32 %207 to i16
  %220 = insertelement <8 x i16> undef, i16 %219, i32 0
  %221 = shufflevector <8 x i16> %220, <8 x i16> undef, <8 x i32> zeroinitializer
  %222 = add <8 x i16> %221, <i16 0, i16 -1, i16 -2, i16 -3, i16 -4, i16 -5, i16 -6, i16 -7>
  %223 = add nsw i64 %213, -16
  %224 = lshr exact i64 %223, 4
  %225 = add nuw nsw i64 %224, 1
  %226 = and i64 %225, 3
  %227 = icmp ult i64 %223, 48
  br i1 %227, label %264, label %228

228:                                              ; preds = %212
  %229 = sub nsw i64 %225, %226
  br label %230

230:                                              ; preds = %230, %228
  %231 = phi i64 [ 0, %228 ], [ %260, %230 ]
  %232 = phi <8 x i16> [ %222, %228 ], [ %261, %230 ]
  %233 = phi i64 [ %229, %228 ], [ %262, %230 ]
  %234 = getelementptr i16, i16* %91, i64 %231
  %235 = add <8 x i16> %232, <i16 -8, i16 -8, i16 -8, i16 -8, i16 -8, i16 -8, i16 -8, i16 -8>
  %236 = bitcast i16* %234 to <8 x i16>*
  store <8 x i16> %232, <8 x i16>* %236, align 2
  %237 = getelementptr i16, i16* %234, i64 8
  %238 = bitcast i16* %237 to <8 x i16>*
  store <8 x i16> %235, <8 x i16>* %238, align 2
  %239 = or i64 %231, 16
  %240 = add <8 x i16> %232, <i16 -16, i16 -16, i16 -16, i16 -16, i16 -16, i16 -16, i16 -16, i16 -16>
  %241 = getelementptr i16, i16* %91, i64 %239
  %242 = add <8 x i16> %232, <i16 -24, i16 -24, i16 -24, i16 -24, i16 -24, i16 -24, i16 -24, i16 -24>
  %243 = bitcast i16* %241 to <8 x i16>*
  store <8 x i16> %240, <8 x i16>* %243, align 2
  %244 = getelementptr i16, i16* %241, i64 8
  %245 = bitcast i16* %244 to <8 x i16>*
  store <8 x i16> %242, <8 x i16>* %245, align 2
  %246 = or i64 %231, 32
  %247 = add <8 x i16> %232, <i16 -32, i16 -32, i16 -32, i16 -32, i16 -32, i16 -32, i16 -32, i16 -32>
  %248 = getelementptr i16, i16* %91, i64 %246
  %249 = add <8 x i16> %232, <i16 -40, i16 -40, i16 -40, i16 -40, i16 -40, i16 -40, i16 -40, i16 -40>
  %250 = bitcast i16* %248 to <8 x i16>*
  store <8 x i16> %247, <8 x i16>* %250, align 2
  %251 = getelementptr i16, i16* %248, i64 8
  %252 = bitcast i16* %251 to <8 x i16>*
  store <8 x i16> %249, <8 x i16>* %252, align 2
  %253 = or i64 %231, 48
  %254 = add <8 x i16> %232, <i16 -48, i16 -48, i16 -48, i16 -48, i16 -48, i16 -48, i16 -48, i16 -48>
  %255 = getelementptr i16, i16* %91, i64 %253
  %256 = add <8 x i16> %232, <i16 -56, i16 -56, i16 -56, i16 -56, i16 -56, i16 -56, i16 -56, i16 -56>
  %257 = bitcast i16* %255 to <8 x i16>*
  store <8 x i16> %254, <8 x i16>* %257, align 2
  %258 = getelementptr i16, i16* %255, i64 8
  %259 = bitcast i16* %258 to <8 x i16>*
  store <8 x i16> %256, <8 x i16>* %259, align 2
  %260 = add i64 %231, 64
  %261 = add <8 x i16> %232, <i16 -64, i16 -64, i16 -64, i16 -64, i16 -64, i16 -64, i16 -64, i16 -64>
  %262 = add i64 %233, -4
  %263 = icmp eq i64 %262, 0
  br i1 %263, label %264, label %230, !llvm.loop !21

264:                                              ; preds = %230, %212
  %265 = phi i64 [ 0, %212 ], [ %260, %230 ]
  %266 = phi <8 x i16> [ %222, %212 ], [ %261, %230 ]
  %267 = icmp eq i64 %226, 0
  br i1 %267, label %281, label %268

268:                                              ; preds = %264, %268
  %269 = phi i64 [ %277, %268 ], [ %265, %264 ]
  %270 = phi <8 x i16> [ %278, %268 ], [ %266, %264 ]
  %271 = phi i64 [ %279, %268 ], [ %226, %264 ]
  %272 = getelementptr i16, i16* %91, i64 %269
  %273 = add <8 x i16> %270, <i16 -8, i16 -8, i16 -8, i16 -8, i16 -8, i16 -8, i16 -8, i16 -8>
  %274 = bitcast i16* %272 to <8 x i16>*
  store <8 x i16> %270, <8 x i16>* %274, align 2
  %275 = getelementptr i16, i16* %272, i64 8
  %276 = bitcast i16* %275 to <8 x i16>*
  store <8 x i16> %273, <8 x i16>* %276, align 2
  %277 = add i64 %269, 16
  %278 = add <8 x i16> %270, <i16 -16, i16 -16, i16 -16, i16 -16, i16 -16, i16 -16, i16 -16, i16 -16>
  %279 = add i64 %271, -1
  %280 = icmp eq i64 %279, 0
  br i1 %280, label %281, label %268, !llvm.loop !22

281:                                              ; preds = %268, %264
  %282 = icmp eq i64 %210, %213
  br i1 %282, label %296, label %283

283:                                              ; preds = %281, %205
  %284 = phi i32 [ %203, %205 ], [ %215, %281 ]
  %285 = phi i32 [ %207, %205 ], [ %217, %281 ]
  %286 = phi i16* [ %91, %205 ], [ %218, %281 ]
  br label %287

287:                                              ; preds = %283, %287
  %288 = phi i32 [ %291, %287 ], [ %284, %283 ]
  %289 = phi i32 [ %292, %287 ], [ %285, %283 ]
  %290 = phi i16* [ %294, %287 ], [ %286, %283 ]
  %291 = add nsw i32 %288, -1
  %292 = add nsw i32 %289, -1
  %293 = trunc i32 %289 to i16
  %294 = getelementptr inbounds i16, i16* %290, i64 1
  store i16 %293, i16* %290, align 2
  %295 = icmp sgt i32 %291, 0
  br i1 %295, label %287, label %296, !llvm.loop !23

296:                                              ; preds = %287, %191, %281, %185, %200, %106
  %297 = phi i32 [ %109, %106 ], [ %203, %200 ], [ %109, %185 ], [ %203, %281 ], [ %109, %191 ], [ %203, %287 ]
  %298 = phi i1 [ true, %106 ], [ false, %200 ], [ true, %185 ], [ false, %281 ], [ true, %191 ], [ false, %287 ]
  %299 = sext i32 %297 to i64
  %300 = getelementptr inbounds i16, i16* %91, i64 %299
  %301 = sub nsw i32 %2, %297
  %302 = icmp slt i32 %301, %84
  br i1 %302, label %463, label %303

303:                                              ; preds = %296
  %304 = icmp sgt i32 %84, 0
  %305 = sext i32 %84 to i64
  %306 = add nsw i32 %84, -1
  %307 = zext i32 %306 to i64
  %308 = add nuw nsw i64 %307, 1
  %309 = add nsw i32 %84, -1
  %310 = zext i32 %309 to i64
  %311 = add nuw nsw i64 %310, 1
  %312 = and i64 %311, 8589934576
  %313 = add nsw i64 %312, -16
  %314 = lshr exact i64 %313, 4
  %315 = add nuw nsw i64 %314, 1
  %316 = icmp ult i64 %311, 16
  %317 = and i64 %311, 8589934576
  %318 = trunc i64 %317 to i32
  %319 = and i64 %315, 3
  %320 = icmp ult i64 %313, 48
  %321 = sub nsw i64 %315, %319
  %322 = icmp eq i64 %319, 0
  %323 = icmp eq i64 %311, %317
  %324 = icmp ult i64 %308, 16
  %325 = and i64 %308, 8589934576
  %326 = trunc i64 %325 to i32
  %327 = sub i32 %84, %326
  %328 = insertelement <8 x i32> undef, i32 %84, i32 0
  %329 = shufflevector <8 x i32> %328, <8 x i32> undef, <8 x i32> zeroinitializer
  %330 = add <8 x i32> %329, <i32 0, i32 -1, i32 -2, i32 -3, i32 -4, i32 -5, i32 -6, i32 -7>
  %331 = and i64 %315, 1
  %332 = icmp eq i64 %313, 0
  %333 = sub nuw nsw i64 %315, %331
  %334 = icmp eq i64 %331, 0
  %335 = icmp eq i64 %308, %325
  br label %336

336:                                              ; preds = %303, %459
  %337 = phi i1 [ %298, %303 ], [ %340, %459 ]
  %338 = phi i16* [ %300, %303 ], [ %460, %459 ]
  %339 = phi i32 [ %301, %303 ], [ %461, %459 ]
  %340 = xor i1 %337, true
  br i1 %337, label %406, label %341

341:                                              ; preds = %336
  br i1 %304, label %342, label %459

342:                                              ; preds = %341
  br i1 %316, label %396, label %343

343:                                              ; preds = %342
  %344 = getelementptr i16, i16* %338, i64 %317
  br i1 %320, label %379, label %345

345:                                              ; preds = %343, %345
  %346 = phi i64 [ %375, %345 ], [ 0, %343 ]
  %347 = phi <8 x i16> [ %376, %345 ], [ <i16 0, i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7>, %343 ]
  %348 = phi i64 [ %377, %345 ], [ %321, %343 ]
  %349 = getelementptr i16, i16* %338, i64 %346
  %350 = add <8 x i16> %347, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %351 = bitcast i16* %349 to <8 x i16>*
  store <8 x i16> %347, <8 x i16>* %351, align 2
  %352 = getelementptr i16, i16* %349, i64 8
  %353 = bitcast i16* %352 to <8 x i16>*
  store <8 x i16> %350, <8 x i16>* %353, align 2
  %354 = or i64 %346, 16
  %355 = add <8 x i16> %347, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %356 = getelementptr i16, i16* %338, i64 %354
  %357 = add <8 x i16> %347, <i16 24, i16 24, i16 24, i16 24, i16 24, i16 24, i16 24, i16 24>
  %358 = bitcast i16* %356 to <8 x i16>*
  store <8 x i16> %355, <8 x i16>* %358, align 2
  %359 = getelementptr i16, i16* %356, i64 8
  %360 = bitcast i16* %359 to <8 x i16>*
  store <8 x i16> %357, <8 x i16>* %360, align 2
  %361 = or i64 %346, 32
  %362 = add <8 x i16> %347, <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>
  %363 = getelementptr i16, i16* %338, i64 %361
  %364 = add <8 x i16> %347, <i16 40, i16 40, i16 40, i16 40, i16 40, i16 40, i16 40, i16 40>
  %365 = bitcast i16* %363 to <8 x i16>*
  store <8 x i16> %362, <8 x i16>* %365, align 2
  %366 = getelementptr i16, i16* %363, i64 8
  %367 = bitcast i16* %366 to <8 x i16>*
  store <8 x i16> %364, <8 x i16>* %367, align 2
  %368 = or i64 %346, 48
  %369 = add <8 x i16> %347, <i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48>
  %370 = getelementptr i16, i16* %338, i64 %368
  %371 = add <8 x i16> %347, <i16 56, i16 56, i16 56, i16 56, i16 56, i16 56, i16 56, i16 56>
  %372 = bitcast i16* %370 to <8 x i16>*
  store <8 x i16> %369, <8 x i16>* %372, align 2
  %373 = getelementptr i16, i16* %370, i64 8
  %374 = bitcast i16* %373 to <8 x i16>*
  store <8 x i16> %371, <8 x i16>* %374, align 2
  %375 = add i64 %346, 64
  %376 = add <8 x i16> %347, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %377 = add i64 %348, -4
  %378 = icmp eq i64 %377, 0
  br i1 %378, label %379, label %345, !llvm.loop !24

379:                                              ; preds = %345, %343
  %380 = phi i64 [ 0, %343 ], [ %375, %345 ]
  %381 = phi <8 x i16> [ <i16 0, i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7>, %343 ], [ %376, %345 ]
  br i1 %322, label %395, label %382

382:                                              ; preds = %379, %382
  %383 = phi i64 [ %391, %382 ], [ %380, %379 ]
  %384 = phi <8 x i16> [ %392, %382 ], [ %381, %379 ]
  %385 = phi i64 [ %393, %382 ], [ %319, %379 ]
  %386 = getelementptr i16, i16* %338, i64 %383
  %387 = add <8 x i16> %384, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %388 = bitcast i16* %386 to <8 x i16>*
  store <8 x i16> %384, <8 x i16>* %388, align 2
  %389 = getelementptr i16, i16* %386, i64 8
  %390 = bitcast i16* %389 to <8 x i16>*
  store <8 x i16> %387, <8 x i16>* %390, align 2
  %391 = add i64 %383, 16
  %392 = add <8 x i16> %384, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %393 = add i64 %385, -1
  %394 = icmp eq i64 %393, 0
  br i1 %394, label %395, label %382, !llvm.loop !25

395:                                              ; preds = %382, %379
  br i1 %323, label %459, label %396

396:                                              ; preds = %395, %342
  %397 = phi i32 [ 0, %342 ], [ %318, %395 ]
  %398 = phi i16* [ %338, %342 ], [ %344, %395 ]
  br label %399

399:                                              ; preds = %396, %399
  %400 = phi i32 [ %402, %399 ], [ %397, %396 ]
  %401 = phi i16* [ %404, %399 ], [ %398, %396 ]
  %402 = add nuw i32 %400, 1
  %403 = trunc i32 %400 to i16
  %404 = getelementptr inbounds i16, i16* %401, i64 1
  store i16 %403, i16* %401, align 2
  %405 = icmp eq i32 %402, %84
  br i1 %405, label %459, label %399, !llvm.loop !26

406:                                              ; preds = %336
  br i1 %304, label %407, label %459

407:                                              ; preds = %406
  br i1 %324, label %449, label %408

408:                                              ; preds = %407
  %409 = getelementptr i16, i16* %338, i64 %325
  br i1 %332, label %436, label %410

410:                                              ; preds = %408, %410
  %411 = phi i64 [ %432, %410 ], [ 0, %408 ]
  %412 = phi <8 x i32> [ %433, %410 ], [ %330, %408 ]
  %413 = phi i64 [ %434, %410 ], [ %333, %408 ]
  %414 = getelementptr i16, i16* %338, i64 %411
  %415 = trunc <8 x i32> %412 to <8 x i16>
  %416 = add <8 x i16> %415, <i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1>
  %417 = trunc <8 x i32> %412 to <8 x i16>
  %418 = add <8 x i16> %417, <i16 -9, i16 -9, i16 -9, i16 -9, i16 -9, i16 -9, i16 -9, i16 -9>
  %419 = bitcast i16* %414 to <8 x i16>*
  store <8 x i16> %416, <8 x i16>* %419, align 2
  %420 = getelementptr i16, i16* %414, i64 8
  %421 = bitcast i16* %420 to <8 x i16>*
  store <8 x i16> %418, <8 x i16>* %421, align 2
  %422 = or i64 %411, 16
  %423 = add <8 x i32> %412, <i32 -16, i32 -16, i32 -16, i32 -16, i32 -16, i32 -16, i32 -16, i32 -16>
  %424 = getelementptr i16, i16* %338, i64 %422
  %425 = trunc <8 x i32> %423 to <8 x i16>
  %426 = add <8 x i16> %425, <i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1>
  %427 = trunc <8 x i32> %423 to <8 x i16>
  %428 = add <8 x i16> %427, <i16 -9, i16 -9, i16 -9, i16 -9, i16 -9, i16 -9, i16 -9, i16 -9>
  %429 = bitcast i16* %424 to <8 x i16>*
  store <8 x i16> %426, <8 x i16>* %429, align 2
  %430 = getelementptr i16, i16* %424, i64 8
  %431 = bitcast i16* %430 to <8 x i16>*
  store <8 x i16> %428, <8 x i16>* %431, align 2
  %432 = add i64 %411, 32
  %433 = add <8 x i32> %412, <i32 -32, i32 -32, i32 -32, i32 -32, i32 -32, i32 -32, i32 -32, i32 -32>
  %434 = add i64 %413, -2
  %435 = icmp eq i64 %434, 0
  br i1 %435, label %436, label %410, !llvm.loop !27

436:                                              ; preds = %410, %408
  %437 = phi i64 [ 0, %408 ], [ %432, %410 ]
  %438 = phi <8 x i32> [ %330, %408 ], [ %433, %410 ]
  br i1 %334, label %448, label %439

439:                                              ; preds = %436
  %440 = getelementptr i16, i16* %338, i64 %437
  %441 = trunc <8 x i32> %438 to <8 x i16>
  %442 = add <8 x i16> %441, <i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1>
  %443 = trunc <8 x i32> %438 to <8 x i16>
  %444 = add <8 x i16> %443, <i16 -9, i16 -9, i16 -9, i16 -9, i16 -9, i16 -9, i16 -9, i16 -9>
  %445 = bitcast i16* %440 to <8 x i16>*
  store <8 x i16> %442, <8 x i16>* %445, align 2
  %446 = getelementptr i16, i16* %440, i64 8
  %447 = bitcast i16* %446 to <8 x i16>*
  store <8 x i16> %444, <8 x i16>* %447, align 2
  br label %448

448:                                              ; preds = %436, %439
  br i1 %335, label %459, label %449

449:                                              ; preds = %448, %407
  %450 = phi i32 [ %84, %407 ], [ %327, %448 ]
  %451 = phi i16* [ %338, %407 ], [ %409, %448 ]
  br label %452

452:                                              ; preds = %449, %452
  %453 = phi i32 [ %455, %452 ], [ %450, %449 ]
  %454 = phi i16* [ %457, %452 ], [ %451, %449 ]
  %455 = add nsw i32 %453, -1
  %456 = trunc i32 %455 to i16
  %457 = getelementptr inbounds i16, i16* %454, i64 1
  store i16 %456, i16* %454, align 2
  %458 = icmp sgt i32 %455, 0
  br i1 %458, label %452, label %459, !llvm.loop !28

459:                                              ; preds = %399, %452, %395, %448, %406, %341
  %460 = getelementptr inbounds i16, i16* %338, i64 %305
  %461 = sub nsw i32 %339, %84
  %462 = icmp slt i32 %461, %84
  br i1 %462, label %463, label %336

463:                                              ; preds = %459, %296
  %464 = phi i32 [ %301, %296 ], [ %461, %459 ]
  %465 = phi i16* [ %300, %296 ], [ %460, %459 ]
  %466 = phi i1 [ %298, %296 ], [ %340, %459 ]
  %467 = icmp sgt i32 %464, 0
  br i1 %467, label %468, label %620

468:                                              ; preds = %463
  %469 = add i32 %464, -1
  %470 = zext i32 %469 to i64
  %471 = add nuw nsw i64 %470, 1
  %472 = icmp ult i64 %471, 16
  br i1 %466, label %541, label %473

473:                                              ; preds = %468
  br i1 %472, label %474, label %477

474:                                              ; preds = %539, %473
  %475 = phi i32 [ 0, %473 ], [ %479, %539 ]
  %476 = phi i16* [ %465, %473 ], [ %480, %539 ]
  br label %604

477:                                              ; preds = %473
  %478 = and i64 %471, 8589934576
  %479 = trunc i64 %478 to i32
  %480 = getelementptr i16, i16* %465, i64 %478
  %481 = add nsw i64 %478, -16
  %482 = lshr exact i64 %481, 4
  %483 = add nuw nsw i64 %482, 1
  %484 = and i64 %483, 3
  %485 = icmp ult i64 %481, 48
  br i1 %485, label %522, label %486

486:                                              ; preds = %477
  %487 = sub nsw i64 %483, %484
  br label %488

488:                                              ; preds = %488, %486
  %489 = phi i64 [ 0, %486 ], [ %518, %488 ]
  %490 = phi <8 x i16> [ <i16 0, i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7>, %486 ], [ %519, %488 ]
  %491 = phi i64 [ %487, %486 ], [ %520, %488 ]
  %492 = getelementptr i16, i16* %465, i64 %489
  %493 = add <8 x i16> %490, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %494 = bitcast i16* %492 to <8 x i16>*
  store <8 x i16> %490, <8 x i16>* %494, align 2
  %495 = getelementptr i16, i16* %492, i64 8
  %496 = bitcast i16* %495 to <8 x i16>*
  store <8 x i16> %493, <8 x i16>* %496, align 2
  %497 = or i64 %489, 16
  %498 = add <8 x i16> %490, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %499 = getelementptr i16, i16* %465, i64 %497
  %500 = add <8 x i16> %490, <i16 24, i16 24, i16 24, i16 24, i16 24, i16 24, i16 24, i16 24>
  %501 = bitcast i16* %499 to <8 x i16>*
  store <8 x i16> %498, <8 x i16>* %501, align 2
  %502 = getelementptr i16, i16* %499, i64 8
  %503 = bitcast i16* %502 to <8 x i16>*
  store <8 x i16> %500, <8 x i16>* %503, align 2
  %504 = or i64 %489, 32
  %505 = add <8 x i16> %490, <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>
  %506 = getelementptr i16, i16* %465, i64 %504
  %507 = add <8 x i16> %490, <i16 40, i16 40, i16 40, i16 40, i16 40, i16 40, i16 40, i16 40>
  %508 = bitcast i16* %506 to <8 x i16>*
  store <8 x i16> %505, <8 x i16>* %508, align 2
  %509 = getelementptr i16, i16* %506, i64 8
  %510 = bitcast i16* %509 to <8 x i16>*
  store <8 x i16> %507, <8 x i16>* %510, align 2
  %511 = or i64 %489, 48
  %512 = add <8 x i16> %490, <i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48, i16 48>
  %513 = getelementptr i16, i16* %465, i64 %511
  %514 = add <8 x i16> %490, <i16 56, i16 56, i16 56, i16 56, i16 56, i16 56, i16 56, i16 56>
  %515 = bitcast i16* %513 to <8 x i16>*
  store <8 x i16> %512, <8 x i16>* %515, align 2
  %516 = getelementptr i16, i16* %513, i64 8
  %517 = bitcast i16* %516 to <8 x i16>*
  store <8 x i16> %514, <8 x i16>* %517, align 2
  %518 = add i64 %489, 64
  %519 = add <8 x i16> %490, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %520 = add i64 %491, -4
  %521 = icmp eq i64 %520, 0
  br i1 %521, label %522, label %488, !llvm.loop !29

522:                                              ; preds = %488, %477
  %523 = phi i64 [ 0, %477 ], [ %518, %488 ]
  %524 = phi <8 x i16> [ <i16 0, i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7>, %477 ], [ %519, %488 ]
  %525 = icmp eq i64 %484, 0
  br i1 %525, label %539, label %526

526:                                              ; preds = %522, %526
  %527 = phi i64 [ %535, %526 ], [ %523, %522 ]
  %528 = phi <8 x i16> [ %536, %526 ], [ %524, %522 ]
  %529 = phi i64 [ %537, %526 ], [ %484, %522 ]
  %530 = getelementptr i16, i16* %465, i64 %527
  %531 = add <8 x i16> %528, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %532 = bitcast i16* %530 to <8 x i16>*
  store <8 x i16> %528, <8 x i16>* %532, align 2
  %533 = getelementptr i16, i16* %530, i64 8
  %534 = bitcast i16* %533 to <8 x i16>*
  store <8 x i16> %531, <8 x i16>* %534, align 2
  %535 = add i64 %527, 16
  %536 = add <8 x i16> %528, <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>
  %537 = add i64 %529, -1
  %538 = icmp eq i64 %537, 0
  br i1 %538, label %539, label %526, !llvm.loop !30

539:                                              ; preds = %526, %522
  %540 = icmp eq i64 %471, %478
  br i1 %540, label %620, label %474

541:                                              ; preds = %468
  br i1 %472, label %542, label %546

542:                                              ; preds = %602, %541
  %543 = phi i32 [ %464, %541 ], [ %549, %602 ]
  %544 = phi i32 [ %84, %541 ], [ %551, %602 ]
  %545 = phi i16* [ %465, %541 ], [ %552, %602 ]
  br label %611

546:                                              ; preds = %541
  %547 = and i64 %471, 8589934576
  %548 = trunc i64 %547 to i32
  %549 = sub i32 %464, %548
  %550 = trunc i64 %547 to i32
  %551 = sub i32 %84, %550
  %552 = getelementptr i16, i16* %465, i64 %547
  %553 = insertelement <8 x i32> undef, i32 %84, i32 0
  %554 = shufflevector <8 x i32> %553, <8 x i32> undef, <8 x i32> zeroinitializer
  %555 = add <8 x i32> %554, <i32 0, i32 -1, i32 -2, i32 -3, i32 -4, i32 -5, i32 -6, i32 -7>
  %556 = add nsw i64 %547, -16
  %557 = lshr exact i64 %556, 4
  %558 = add nuw nsw i64 %557, 1
  %559 = and i64 %558, 1
  %560 = icmp eq i64 %556, 0
  br i1 %560, label %589, label %561

561:                                              ; preds = %546
  %562 = sub nuw nsw i64 %558, %559
  br label %563

563:                                              ; preds = %563, %561
  %564 = phi i64 [ 0, %561 ], [ %585, %563 ]
  %565 = phi <8 x i32> [ %555, %561 ], [ %586, %563 ]
  %566 = phi i64 [ %562, %561 ], [ %587, %563 ]
  %567 = getelementptr i16, i16* %465, i64 %564
  %568 = trunc <8 x i32> %565 to <8 x i16>
  %569 = add <8 x i16> %568, <i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1>
  %570 = trunc <8 x i32> %565 to <8 x i16>
  %571 = add <8 x i16> %570, <i16 -9, i16 -9, i16 -9, i16 -9, i16 -9, i16 -9, i16 -9, i16 -9>
  %572 = bitcast i16* %567 to <8 x i16>*
  store <8 x i16> %569, <8 x i16>* %572, align 2
  %573 = getelementptr i16, i16* %567, i64 8
  %574 = bitcast i16* %573 to <8 x i16>*
  store <8 x i16> %571, <8 x i16>* %574, align 2
  %575 = or i64 %564, 16
  %576 = add <8 x i32> %565, <i32 -16, i32 -16, i32 -16, i32 -16, i32 -16, i32 -16, i32 -16, i32 -16>
  %577 = getelementptr i16, i16* %465, i64 %575
  %578 = trunc <8 x i32> %576 to <8 x i16>
  %579 = add <8 x i16> %578, <i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1>
  %580 = trunc <8 x i32> %576 to <8 x i16>
  %581 = add <8 x i16> %580, <i16 -9, i16 -9, i16 -9, i16 -9, i16 -9, i16 -9, i16 -9, i16 -9>
  %582 = bitcast i16* %577 to <8 x i16>*
  store <8 x i16> %579, <8 x i16>* %582, align 2
  %583 = getelementptr i16, i16* %577, i64 8
  %584 = bitcast i16* %583 to <8 x i16>*
  store <8 x i16> %581, <8 x i16>* %584, align 2
  %585 = add i64 %564, 32
  %586 = add <8 x i32> %565, <i32 -32, i32 -32, i32 -32, i32 -32, i32 -32, i32 -32, i32 -32, i32 -32>
  %587 = add i64 %566, -2
  %588 = icmp eq i64 %587, 0
  br i1 %588, label %589, label %563, !llvm.loop !31

589:                                              ; preds = %563, %546
  %590 = phi i64 [ 0, %546 ], [ %585, %563 ]
  %591 = phi <8 x i32> [ %555, %546 ], [ %586, %563 ]
  %592 = icmp eq i64 %559, 0
  br i1 %592, label %602, label %593

593:                                              ; preds = %589
  %594 = getelementptr i16, i16* %465, i64 %590
  %595 = trunc <8 x i32> %591 to <8 x i16>
  %596 = add <8 x i16> %595, <i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1>
  %597 = trunc <8 x i32> %591 to <8 x i16>
  %598 = add <8 x i16> %597, <i16 -9, i16 -9, i16 -9, i16 -9, i16 -9, i16 -9, i16 -9, i16 -9>
  %599 = bitcast i16* %594 to <8 x i16>*
  store <8 x i16> %596, <8 x i16>* %599, align 2
  %600 = getelementptr i16, i16* %594, i64 8
  %601 = bitcast i16* %600 to <8 x i16>*
  store <8 x i16> %598, <8 x i16>* %601, align 2
  br label %602

602:                                              ; preds = %589, %593
  %603 = icmp eq i64 %471, %547
  br i1 %603, label %620, label %542

604:                                              ; preds = %474, %604
  %605 = phi i32 [ %607, %604 ], [ %475, %474 ]
  %606 = phi i16* [ %609, %604 ], [ %476, %474 ]
  %607 = add nuw i32 %605, 1
  %608 = trunc i32 %605 to i16
  %609 = getelementptr inbounds i16, i16* %606, i64 1
  store i16 %608, i16* %606, align 2
  %610 = icmp eq i32 %607, %464
  br i1 %610, label %620, label %604, !llvm.loop !32

611:                                              ; preds = %542, %611
  %612 = phi i32 [ %616, %611 ], [ %543, %542 ]
  %613 = phi i32 [ %615, %611 ], [ %544, %542 ]
  %614 = phi i16* [ %618, %611 ], [ %545, %542 ]
  %615 = add nsw i32 %613, -1
  %616 = add nsw i32 %612, -1
  %617 = trunc i32 %615 to i16
  %618 = getelementptr inbounds i16, i16* %614, i64 1
  store i16 %617, i16* %614, align 2
  %619 = icmp sgt i32 %616, 0
  br i1 %619, label %611, label %620, !llvm.loop !33

620:                                              ; preds = %604, %611, %539, %602, %463, %86
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal void @_ZL14nofilter_scaleIXadL_ZL5clampiiEEXadL_ZL5clampiiEELb1EEvRK17SkBitmapProcStatePjiii(%struct.SkBitmapProcState* dereferenceable(336), i32* nocapture, i32, i32, i32) #0 {
  %6 = alloca %struct.SkPoint, align 4
  %7 = bitcast %struct.SkPoint* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #3
  %8 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %6, i64 0, i32 0
  store float 0xFFFFFFFFE0000000, float* %8, align 4
  %9 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %6, i64 0, i32 1
  store float 0xFFFFFFFFE0000000, float* %9, align 4
  %10 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 7
  %11 = load void (%class.SkMatrix*, float, float, %struct.SkPoint*)*, void (%class.SkMatrix*, float, float, %struct.SkPoint*)** %10, align 8
  %12 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 2
  %13 = sitofp i32 %3 to float
  %14 = fadd float %13, 5.000000e-01
  %15 = sitofp i32 %4 to float
  %16 = fadd float %15, 5.000000e-01
  call void %11(%class.SkMatrix* dereferenceable(40) %12, float %14, float %16, %struct.SkPoint* nonnull %6) #3
  %17 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 6
  %18 = load i8, i8* %17, align 4, !range !2
  %19 = icmp eq i8 %18, 0
  br i1 %19, label %27, label %20

20:                                               ; preds = %5
  %21 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 10
  %22 = load i32, i32* %21, align 8
  %23 = ashr i32 %22, 1
  %24 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 11
  %25 = load i32, i32* %24, align 4
  %26 = ashr i32 %25, 1
  br label %36

27:                                               ; preds = %5
  %28 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %12, i64 0, i32 0, i64 0
  %29 = load float, float* %28, align 4
  %30 = fcmp ogt float %29, 0.000000e+00
  %31 = zext i1 %30 to i32
  %32 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 2, i32 0, i64 4
  %33 = load float, float* %32, align 4
  %34 = fcmp ogt float %33, 0.000000e+00
  %35 = zext i1 %34 to i32
  br label %36

36:                                               ; preds = %20, %27
  %37 = phi i32 [ %23, %20 ], [ %31, %27 ]
  %38 = phi i32 [ %26, %20 ], [ %35, %27 ]
  %39 = load float, float* %8, align 4
  %40 = fmul float %39, 0x41F0000000000000
  %41 = fcmp olt float %40, 0x43DFFFFFE0000000
  %42 = select i1 %41, float %40, float 0x43DFFFFFE0000000
  %43 = fcmp ogt float %42, 0xC3DFFFFFE0000000
  %44 = select i1 %43, float %42, float 0xC3DFFFFFE0000000
  %45 = fptosi float %44 to i64
  %46 = sext i32 %37 to i64
  %47 = shl nsw i64 %46, 16
  %48 = sub i64 %45, %47
  %49 = load float, float* %9, align 4
  %50 = fmul float %49, 0x41F0000000000000
  %51 = fcmp olt float %50, 0x43DFFFFFE0000000
  %52 = select i1 %51, float %50, float 0x43DFFFFFE0000000
  %53 = fcmp ogt float %52, 0xC3DFFFFFE0000000
  %54 = select i1 %53, float %52, float 0xC3DFFFFFE0000000
  %55 = fptosi float %54 to i64
  %56 = sext i32 %38 to i64
  %57 = shl nsw i64 %56, 16
  %58 = sub i64 %55, %57
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #3
  %59 = lshr i64 %58, 16
  %60 = trunc i64 %59 to i32
  %61 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 1, i32 2, i32 1, i32 1
  %62 = load i32, i32* %61, align 4
  %63 = add nsw i32 %62, -1
  %64 = ashr i32 %60, 16
  %65 = icmp sgt i32 %64, %63
  %66 = select i1 %65, i32 %63, i32 %64
  %67 = icmp sgt i32 %66, 0
  %68 = select i1 %67, i32 %66, i32 0
  %69 = getelementptr inbounds i32, i32* %1, i64 1
  store i32 %68, i32* %1, align 4
  %70 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 1, i32 2, i32 1, i32 0
  %71 = load i32, i32* %70, align 4
  %72 = add nsw i32 %71, -1
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %74, label %78

74:                                               ; preds = %36
  %75 = bitcast i32* %69 to i8*
  %76 = sext i32 %2 to i64
  %77 = shl nsw i64 %76, 1
  call void @llvm.memset.p0i8.i64(i8* align 4 %75, i8 0, i64 %77, i1 false)
  br label %343

78:                                               ; preds = %36
  %79 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 8
  %80 = load i64, i64* %79, align 8
  %81 = lshr i64 %48, 16
  %82 = trunc i64 %81 to i32
  %83 = lshr i64 %80, 16
  %84 = trunc i64 %83 to i32
  %85 = icmp sgt i32 %84, 256
  %86 = ashr i32 %82, 16
  %87 = icmp ult i32 %86, %72
  %88 = and i1 %87, %85
  br i1 %88, label %89, label %103

89:                                               ; preds = %78
  %90 = shl i64 %81, 32
  %91 = ashr exact i64 %90, 32
  %92 = shl i64 %83, 32
  %93 = ashr exact i64 %92, 32
  %94 = add nsw i32 %2, -1
  %95 = sext i32 %94 to i64
  %96 = mul nsw i64 %93, %95
  %97 = add nsw i64 %96, %91
  %98 = icmp ult i64 %97, 2147483648
  br i1 %98, label %99, label %103

99:                                               ; preds = %89
  %100 = trunc i64 %97 to i32
  %101 = ashr i32 %100, 16
  %102 = icmp ult i32 %101, %72
  br i1 %102, label %164, label %103

103:                                              ; preds = %89, %78, %99
  %104 = icmp sgt i32 %2, 1
  br i1 %104, label %105, label %328

105:                                              ; preds = %103
  %106 = shl i64 %80, 1
  %107 = add nsw i32 %2, -2
  %108 = lshr i32 %107, 1
  %109 = add nuw i32 %108, 1
  %110 = zext i32 %109 to i64
  %111 = icmp ult i32 %109, 4
  br i1 %111, label %112, label %116

112:                                              ; preds = %162, %105
  %113 = phi i64 [ %48, %105 ], [ %119, %162 ]
  %114 = phi i32* [ %69, %105 ], [ %120, %162 ]
  %115 = phi i32 [ %2, %105 ], [ %123, %162 ]
  br label %299

116:                                              ; preds = %105
  %117 = and i64 %110, 4294967292
  %118 = mul i64 %117, %106
  %119 = add i64 %48, %118
  %120 = getelementptr i32, i32* %69, i64 %117
  %121 = trunc i64 %117 to i32
  %122 = mul i32 %121, -2
  %123 = add i32 %122, %2
  %124 = insertelement <4 x i64> undef, i64 %48, i32 0
  %125 = shufflevector <4 x i64> %124, <4 x i64> undef, <4 x i32> zeroinitializer
  %126 = insertelement <4 x i64> undef, i64 %106, i32 0
  %127 = shufflevector <4 x i64> %126, <4 x i64> undef, <4 x i32> zeroinitializer
  %128 = mul <4 x i64> %127, <i64 0, i64 1, i64 2, i64 3>
  %129 = add <4 x i64> %125, %128
  %130 = shl i64 %80, 3
  %131 = insertelement <4 x i64> undef, i64 %130, i32 0
  %132 = shufflevector <4 x i64> %131, <4 x i64> undef, <4 x i32> zeroinitializer
  %133 = insertelement <4 x i32> undef, i32 %72, i32 0
  %134 = shufflevector <4 x i32> %133, <4 x i32> undef, <4 x i32> zeroinitializer
  %135 = insertelement <4 x i64> undef, i64 %80, i32 0
  %136 = shufflevector <4 x i64> %135, <4 x i64> undef, <4 x i32> zeroinitializer
  br label %137

137:                                              ; preds = %137, %116
  %138 = phi i64 [ 0, %116 ], [ %159, %137 ]
  %139 = phi <4 x i64> [ %129, %116 ], [ %160, %137 ]
  %140 = getelementptr i32, i32* %69, i64 %138
  %141 = lshr <4 x i64> %139, <i64 16, i64 16, i64 16, i64 16>
  %142 = trunc <4 x i64> %141 to <4 x i32>
  %143 = ashr <4 x i32> %142, <i32 16, i32 16, i32 16, i32 16>
  %144 = icmp sgt <4 x i32> %143, %134
  %145 = select <4 x i1> %144, <4 x i32> %134, <4 x i32> %143
  %146 = icmp sgt <4 x i32> %145, zeroinitializer
  %147 = select <4 x i1> %146, <4 x i32> %145, <4 x i32> zeroinitializer
  %148 = add nsw <4 x i64> %139, %136
  %149 = lshr <4 x i64> %148, <i64 16, i64 16, i64 16, i64 16>
  %150 = trunc <4 x i64> %149 to <4 x i32>
  %151 = ashr <4 x i32> %150, <i32 16, i32 16, i32 16, i32 16>
  %152 = icmp sgt <4 x i32> %151, %134
  %153 = select <4 x i1> %152, <4 x i32> %134, <4 x i32> %151
  %154 = icmp sgt <4 x i32> %153, zeroinitializer
  %155 = select <4 x i1> %154, <4 x i32> %153, <4 x i32> zeroinitializer
  %156 = shl <4 x i32> %155, <i32 16, i32 16, i32 16, i32 16>
  %157 = or <4 x i32> %156, %147
  %158 = bitcast i32* %140 to <4 x i32>*
  store <4 x i32> %157, <4 x i32>* %158, align 4
  %159 = add i64 %138, 4
  %160 = add <4 x i64> %139, %132
  %161 = icmp eq i64 %159, %117
  br i1 %161, label %162, label %137, !llvm.loop !34

162:                                              ; preds = %137
  %163 = icmp eq i64 %117, %110
  br i1 %163, label %324, label %112

164:                                              ; preds = %99
  %165 = icmp sgt i32 %2, 2
  br i1 %165, label %166, label %283

166:                                              ; preds = %164
  %167 = shl nuw nsw i64 %83, 1
  %168 = trunc i64 %167 to i32
  %169 = add nsw i32 %2, -3
  %170 = add i32 %2, -3
  %171 = lshr i32 %170, 1
  %172 = add nuw i32 %171, 1
  %173 = zext i32 %172 to i64
  %174 = icmp ult i32 %172, 8
  br i1 %174, label %261, label %175

175:                                              ; preds = %166
  %176 = and i64 %173, 4294967288
  %177 = trunc i64 %176 to i32
  %178 = mul i32 %177, -2
  %179 = add i32 %178, %2
  %180 = getelementptr i32, i32* %69, i64 %176
  %181 = trunc i64 %176 to i32
  %182 = mul i32 %181, %168
  %183 = add i32 %182, %82
  %184 = insertelement <4 x i32> undef, i32 %82, i32 0
  %185 = shufflevector <4 x i32> %184, <4 x i32> undef, <4 x i32> zeroinitializer
  %186 = insertelement <4 x i32> undef, i32 %168, i32 0
  %187 = shufflevector <4 x i32> %186, <4 x i32> undef, <4 x i32> zeroinitializer
  %188 = mul <4 x i32> %187, <i32 0, i32 1, i32 2, i32 3>
  %189 = add <4 x i32> %185, %188
  %190 = shl nuw nsw i64 %83, 3
  %191 = trunc i64 %190 to i32
  %192 = insertelement <4 x i32> undef, i32 %191, i32 0
  %193 = shufflevector <4 x i32> %192, <4 x i32> undef, <4 x i32> zeroinitializer
  %194 = insertelement <4 x i32> undef, i32 %84, i32 0
  %195 = shufflevector <4 x i32> %194, <4 x i32> undef, <4 x i32> zeroinitializer
  %196 = insertelement <4 x i32> undef, i32 %84, i32 0
  %197 = shufflevector <4 x i32> %196, <4 x i32> undef, <4 x i32> zeroinitializer
  %198 = add nsw i64 %176, -8
  %199 = lshr exact i64 %198, 3
  %200 = add nuw nsw i64 %199, 1
  %201 = and i64 %200, 1
  %202 = icmp eq i64 %198, 0
  br i1 %202, label %241, label %203

203:                                              ; preds = %175
  %204 = sub nuw nsw i64 %200, %201
  br label %205

205:                                              ; preds = %205, %203
  %206 = phi i64 [ 0, %203 ], [ %237, %205 ]
  %207 = phi <4 x i32> [ %189, %203 ], [ %238, %205 ]
  %208 = phi i64 [ %204, %203 ], [ %239, %205 ]
  %209 = getelementptr i32, i32* %69, i64 %206
  %210 = add <4 x i32> %207, %193
  %211 = ashr <4 x i32> %207, <i32 16, i32 16, i32 16, i32 16>
  %212 = ashr <4 x i32> %210, <i32 16, i32 16, i32 16, i32 16>
  %213 = add nsw <4 x i32> %207, %195
  %214 = add nsw <4 x i32> %210, %197
  %215 = and <4 x i32> %213, <i32 -65536, i32 -65536, i32 -65536, i32 -65536>
  %216 = and <4 x i32> %214, <i32 -65536, i32 -65536, i32 -65536, i32 -65536>
  %217 = or <4 x i32> %215, %211
  %218 = or <4 x i32> %216, %212
  %219 = bitcast i32* %209 to <4 x i32>*
  store <4 x i32> %217, <4 x i32>* %219, align 4
  %220 = getelementptr i32, i32* %209, i64 4
  %221 = bitcast i32* %220 to <4 x i32>*
  store <4 x i32> %218, <4 x i32>* %221, align 4
  %222 = or i64 %206, 8
  %223 = add <4 x i32> %210, %193
  %224 = getelementptr i32, i32* %69, i64 %222
  %225 = add <4 x i32> %223, %193
  %226 = ashr <4 x i32> %223, <i32 16, i32 16, i32 16, i32 16>
  %227 = ashr <4 x i32> %225, <i32 16, i32 16, i32 16, i32 16>
  %228 = add nsw <4 x i32> %223, %195
  %229 = add nsw <4 x i32> %225, %197
  %230 = and <4 x i32> %228, <i32 -65536, i32 -65536, i32 -65536, i32 -65536>
  %231 = and <4 x i32> %229, <i32 -65536, i32 -65536, i32 -65536, i32 -65536>
  %232 = or <4 x i32> %230, %226
  %233 = or <4 x i32> %231, %227
  %234 = bitcast i32* %224 to <4 x i32>*
  store <4 x i32> %232, <4 x i32>* %234, align 4
  %235 = getelementptr i32, i32* %224, i64 4
  %236 = bitcast i32* %235 to <4 x i32>*
  store <4 x i32> %233, <4 x i32>* %236, align 4
  %237 = add i64 %206, 16
  %238 = add <4 x i32> %225, %193
  %239 = add i64 %208, -2
  %240 = icmp eq i64 %239, 0
  br i1 %240, label %241, label %205, !llvm.loop !35

241:                                              ; preds = %205, %175
  %242 = phi i64 [ 0, %175 ], [ %237, %205 ]
  %243 = phi <4 x i32> [ %189, %175 ], [ %238, %205 ]
  %244 = icmp eq i64 %201, 0
  br i1 %244, label %259, label %245

245:                                              ; preds = %241
  %246 = getelementptr i32, i32* %69, i64 %242
  %247 = add <4 x i32> %243, %193
  %248 = ashr <4 x i32> %243, <i32 16, i32 16, i32 16, i32 16>
  %249 = ashr <4 x i32> %247, <i32 16, i32 16, i32 16, i32 16>
  %250 = add nsw <4 x i32> %243, %195
  %251 = add nsw <4 x i32> %247, %197
  %252 = and <4 x i32> %250, <i32 -65536, i32 -65536, i32 -65536, i32 -65536>
  %253 = and <4 x i32> %251, <i32 -65536, i32 -65536, i32 -65536, i32 -65536>
  %254 = or <4 x i32> %252, %248
  %255 = or <4 x i32> %253, %249
  %256 = bitcast i32* %246 to <4 x i32>*
  store <4 x i32> %254, <4 x i32>* %256, align 4
  %257 = getelementptr i32, i32* %246, i64 4
  %258 = bitcast i32* %257 to <4 x i32>*
  store <4 x i32> %255, <4 x i32>* %258, align 4
  br label %259

259:                                              ; preds = %241, %245
  %260 = icmp eq i64 %176, %173
  br i1 %260, label %277, label %261

261:                                              ; preds = %259, %166
  %262 = phi i32 [ %2, %166 ], [ %179, %259 ]
  %263 = phi i32* [ %69, %166 ], [ %180, %259 ]
  %264 = phi i32 [ %82, %166 ], [ %183, %259 ]
  br label %265

265:                                              ; preds = %261, %265
  %266 = phi i32 [ %275, %265 ], [ %262, %261 ]
  %267 = phi i32* [ %273, %265 ], [ %263, %261 ]
  %268 = phi i32 [ %274, %265 ], [ %264, %261 ]
  %269 = ashr i32 %268, 16
  %270 = add nsw i32 %268, %84
  %271 = and i32 %270, -65536
  %272 = or i32 %271, %269
  %273 = getelementptr inbounds i32, i32* %267, i64 1
  store i32 %272, i32* %267, align 4
  %274 = add nsw i32 %268, %168
  %275 = add nsw i32 %266, -2
  %276 = icmp sgt i32 %275, 2
  br i1 %276, label %265, label %277, !llvm.loop !36

277:                                              ; preds = %265, %259
  %278 = phi i32* [ %180, %259 ], [ %273, %265 ]
  %279 = phi i32 [ %183, %259 ], [ %274, %265 ]
  %280 = and i32 %169, -2
  %281 = add i32 %2, -2
  %282 = sub i32 %281, %280
  br label %283

283:                                              ; preds = %277, %164
  %284 = phi i32 [ %82, %164 ], [ %279, %277 ]
  %285 = phi i32* [ %69, %164 ], [ %278, %277 ]
  %286 = phi i32 [ %2, %164 ], [ %282, %277 ]
  switch i32 %286, label %343 [
    i32 2, label %289
    i32 1, label %287
  ]

287:                                              ; preds = %283
  %288 = bitcast i32* %285 to i16*
  br label %295

289:                                              ; preds = %283
  %290 = add nsw i32 %284, %84
  %291 = lshr i32 %290, 16
  %292 = trunc i32 %291 to i16
  %293 = bitcast i32* %285 to i16*
  %294 = getelementptr inbounds i16, i16* %293, i64 1
  store i16 %292, i16* %294, align 2
  br label %295

295:                                              ; preds = %289, %287
  %296 = phi i16* [ %288, %287 ], [ %293, %289 ]
  %297 = lshr i32 %284, 16
  %298 = trunc i32 %297 to i16
  store i16 %298, i16* %296, align 2
  br label %343

299:                                              ; preds = %112, %299
  %300 = phi i64 [ %321, %299 ], [ %113, %112 ]
  %301 = phi i32* [ %320, %299 ], [ %114, %112 ]
  %302 = phi i32 [ %322, %299 ], [ %115, %112 ]
  %303 = lshr i64 %300, 16
  %304 = trunc i64 %303 to i32
  %305 = ashr i32 %304, 16
  %306 = icmp sgt i32 %305, %72
  %307 = select i1 %306, i32 %72, i32 %305
  %308 = icmp sgt i32 %307, 0
  %309 = select i1 %308, i32 %307, i32 0
  %310 = add nsw i64 %300, %80
  %311 = lshr i64 %310, 16
  %312 = trunc i64 %311 to i32
  %313 = ashr i32 %312, 16
  %314 = icmp sgt i32 %313, %72
  %315 = select i1 %314, i32 %72, i32 %313
  %316 = icmp sgt i32 %315, 0
  %317 = select i1 %316, i32 %315, i32 0
  %318 = shl i32 %317, 16
  %319 = or i32 %318, %309
  %320 = getelementptr inbounds i32, i32* %301, i64 1
  store i32 %319, i32* %301, align 4
  %321 = add nsw i64 %300, %106
  %322 = add nsw i32 %302, -2
  %323 = icmp sgt i32 %322, 1
  br i1 %323, label %299, label %324, !llvm.loop !37

324:                                              ; preds = %299, %162
  %325 = phi i32* [ %120, %162 ], [ %320, %299 ]
  %326 = phi i64 [ %119, %162 ], [ %321, %299 ]
  %327 = and i32 %2, 1
  br label %328

328:                                              ; preds = %324, %103
  %329 = phi i32 [ %2, %103 ], [ %327, %324 ]
  %330 = phi i32* [ %69, %103 ], [ %325, %324 ]
  %331 = phi i64 [ %48, %103 ], [ %326, %324 ]
  %332 = icmp sgt i32 %329, 0
  br i1 %332, label %333, label %343

333:                                              ; preds = %328
  %334 = bitcast i32* %330 to i16*
  %335 = lshr i64 %331, 16
  %336 = trunc i64 %335 to i32
  %337 = ashr i32 %336, 16
  %338 = icmp sgt i32 %337, %72
  %339 = select i1 %338, i32 %72, i32 %337
  %340 = icmp sgt i32 %339, 0
  %341 = select i1 %340, i32 %339, i32 0
  %342 = trunc i32 %341 to i16
  store i16 %342, i16* %334, align 2
  br label %343

343:                                              ; preds = %333, %328, %295, %283, %74
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZL12filter_scaleIXadL_ZL5clampiiEEXadL_ZL5clampiiEEXadL_ZL28extract_low_bits_clamp_clampiiEELb1EEvRK17SkBitmapProcStatePjiii(%struct.SkBitmapProcState* dereferenceable(336), i32* nocapture, i32, i32, i32) #0 {
  %6 = alloca %struct.SkPoint, align 4
  %7 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 1, i32 2, i32 1, i32 0
  %8 = load i32, i32* %7, align 4
  %9 = add nsw i32 %8, -1
  %10 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 8
  %11 = load i64, i64* %10, align 8
  %12 = bitcast %struct.SkPoint* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12) #3
  %13 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %6, i64 0, i32 0
  store float 0xFFFFFFFFE0000000, float* %13, align 4
  %14 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %6, i64 0, i32 1
  store float 0xFFFFFFFFE0000000, float* %14, align 4
  %15 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 7
  %16 = load void (%class.SkMatrix*, float, float, %struct.SkPoint*)*, void (%class.SkMatrix*, float, float, %struct.SkPoint*)** %15, align 8
  %17 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 2
  %18 = sitofp i32 %3 to float
  %19 = fadd float %18, 5.000000e-01
  %20 = sitofp i32 %4 to float
  %21 = fadd float %20, 5.000000e-01
  call void %16(%class.SkMatrix* dereferenceable(40) %17, float %19, float %21, %struct.SkPoint* nonnull %6) #3
  %22 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 6
  %23 = load i8, i8* %22, align 4, !range !2
  %24 = icmp eq i8 %23, 0
  br i1 %24, label %32, label %25

25:                                               ; preds = %5
  %26 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 10
  %27 = load i32, i32* %26, align 8
  %28 = ashr i32 %27, 1
  %29 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 11
  %30 = load i32, i32* %29, align 4
  %31 = ashr i32 %30, 1
  br label %43

32:                                               ; preds = %5
  %33 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %17, i64 0, i32 0, i64 0
  %34 = load float, float* %33, align 4
  %35 = fcmp ogt float %34, 0.000000e+00
  %36 = zext i1 %35 to i32
  %37 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 2, i32 0, i64 4
  %38 = load float, float* %37, align 4
  %39 = fcmp ogt float %38, 0.000000e+00
  %40 = zext i1 %39 to i32
  %41 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 11
  %42 = load i32, i32* %41, align 4
  br label %43

43:                                               ; preds = %25, %32
  %44 = phi i32 [ %30, %25 ], [ %42, %32 ]
  %45 = phi i32 [ %28, %25 ], [ %36, %32 ]
  %46 = phi i32 [ %31, %25 ], [ %40, %32 ]
  %47 = load float, float* %13, align 4
  %48 = fmul float %47, 0x41F0000000000000
  %49 = fcmp olt float %48, 0x43DFFFFFE0000000
  %50 = select i1 %49, float %48, float 0x43DFFFFFE0000000
  %51 = fcmp ogt float %50, 0xC3DFFFFFE0000000
  %52 = select i1 %51, float %50, float 0xC3DFFFFFE0000000
  %53 = fptosi float %52 to i64
  %54 = sext i32 %45 to i64
  %55 = shl nsw i64 %54, 16
  %56 = sub i64 %53, %55
  %57 = load float, float* %14, align 4
  %58 = fmul float %57, 0x41F0000000000000
  %59 = fcmp olt float %58, 0x43DFFFFFE0000000
  %60 = select i1 %59, float %58, float 0x43DFFFFFE0000000
  %61 = fcmp ogt float %60, 0xC3DFFFFFE0000000
  %62 = select i1 %61, float %60, float 0xC3DFFFFFE0000000
  %63 = fptosi float %62 to i64
  %64 = sext i32 %46 to i64
  %65 = shl nsw i64 %64, 16
  %66 = sub i64 %63, %65
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12) #3
  %67 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 1, i32 2, i32 1, i32 1
  %68 = load i32, i32* %67, align 4
  %69 = add nsw i32 %68, -1
  %70 = lshr i64 %66, 16
  %71 = trunc i64 %70 to i32
  %72 = ashr i32 %71, 16
  %73 = icmp sgt i32 %72, %69
  %74 = select i1 %73, i32 %69, i32 %72
  %75 = icmp sgt i32 %74, 0
  %76 = select i1 %75, i32 %74, i32 0
  %77 = shl i32 %76, 4
  %78 = lshr i64 %66, 28
  %79 = trunc i64 %78 to i32
  %80 = and i32 %79, 15
  %81 = or i32 %77, %80
  %82 = shl i32 %81, 14
  %83 = add nsw i32 %44, %71
  %84 = ashr i32 %83, 16
  %85 = icmp sgt i32 %84, %69
  %86 = select i1 %85, i32 %69, i32 %84
  %87 = icmp sgt i32 %86, 0
  %88 = select i1 %87, i32 %86, i32 0
  %89 = or i32 %82, %88
  %90 = getelementptr inbounds i32, i32* %1, i64 1
  %91 = bitcast i32* %90 to i8*
  store i32 %89, i32* %1, align 4
  %92 = lshr i64 %56, 32
  %93 = trunc i64 %92 to i32
  %94 = icmp ugt i32 %9, %93
  br i1 %94, label %95, label %175

95:                                               ; preds = %43
  %96 = add nsw i32 %2, -1
  %97 = sext i32 %96 to i64
  %98 = mul nsw i64 %11, %97
  %99 = add nsw i64 %56, %98
  %100 = lshr i64 %99, 32
  %101 = trunc i64 %100 to i32
  %102 = icmp ugt i32 %9, %101
  br i1 %102, label %103, label %175

103:                                              ; preds = %95
  %104 = icmp sgt i32 %2, 0
  br i1 %104, label %105, label %278

105:                                              ; preds = %103
  %106 = add nsw i32 %2, -1
  %107 = zext i32 %106 to i64
  %108 = add nuw nsw i64 %107, 1
  %109 = icmp ult i64 %108, 8
  br i1 %109, label %155, label %110

110:                                              ; preds = %105
  %111 = and i64 %108, 8589934584
  %112 = getelementptr i32, i32* %90, i64 %111
  %113 = trunc i64 %111 to i32
  %114 = sub i32 %2, %113
  %115 = mul i64 %111, %11
  %116 = add i64 %56, %115
  %117 = insertelement <4 x i64> undef, i64 %56, i32 0
  %118 = shufflevector <4 x i64> %117, <4 x i64> undef, <4 x i32> zeroinitializer
  %119 = insertelement <4 x i64> undef, i64 %11, i32 0
  %120 = shufflevector <4 x i64> %119, <4 x i64> undef, <4 x i32> zeroinitializer
  %121 = mul <4 x i64> %120, <i64 0, i64 1, i64 2, i64 3>
  %122 = add <4 x i64> %118, %121
  %123 = shl i64 %11, 2
  %124 = insertelement <4 x i64> undef, i64 %123, i32 0
  %125 = shufflevector <4 x i64> %124, <4 x i64> undef, <4 x i32> zeroinitializer
  br label %126

126:                                              ; preds = %126, %110
  %127 = phi i64 [ 0, %110 ], [ %150, %126 ]
  %128 = phi <4 x i64> [ %122, %110 ], [ %151, %126 ]
  %129 = getelementptr i32, i32* %90, i64 %127
  %130 = add <4 x i64> %128, %125
  %131 = lshr <4 x i64> %128, <i64 16, i64 16, i64 16, i64 16>
  %132 = lshr <4 x i64> %130, <i64 16, i64 16, i64 16, i64 16>
  %133 = trunc <4 x i64> %131 to <4 x i32>
  %134 = trunc <4 x i64> %132 to <4 x i32>
  %135 = lshr <4 x i64> %128, <i64 28, i64 28, i64 28, i64 28>
  %136 = lshr <4 x i64> %130, <i64 28, i64 28, i64 28, i64 28>
  %137 = shl nuw nsw <4 x i64> %135, <i64 14, i64 14, i64 14, i64 14>
  %138 = shl nuw nsw <4 x i64> %136, <i64 14, i64 14, i64 14, i64 14>
  %139 = trunc <4 x i64> %137 to <4 x i32>
  %140 = trunc <4 x i64> %138 to <4 x i32>
  %141 = ashr <4 x i32> %133, <i32 16, i32 16, i32 16, i32 16>
  %142 = ashr <4 x i32> %134, <i32 16, i32 16, i32 16, i32 16>
  %143 = add nsw <4 x i32> %141, <i32 1, i32 1, i32 1, i32 1>
  %144 = add nsw <4 x i32> %142, <i32 1, i32 1, i32 1, i32 1>
  %145 = or <4 x i32> %143, %139
  %146 = or <4 x i32> %144, %140
  %147 = bitcast i32* %129 to <4 x i32>*
  store <4 x i32> %145, <4 x i32>* %147, align 4
  %148 = getelementptr i32, i32* %129, i64 4
  %149 = bitcast i32* %148 to <4 x i32>*
  store <4 x i32> %146, <4 x i32>* %149, align 4
  %150 = add i64 %127, 8
  %151 = add <4 x i64> %130, %125
  %152 = icmp eq i64 %150, %111
  br i1 %152, label %153, label %126, !llvm.loop !38

153:                                              ; preds = %126
  %154 = icmp eq i64 %108, %111
  br i1 %154, label %278, label %155

155:                                              ; preds = %153, %105
  %156 = phi i32* [ %90, %105 ], [ %112, %153 ]
  %157 = phi i32 [ %2, %105 ], [ %114, %153 ]
  %158 = phi i64 [ %56, %105 ], [ %116, %153 ]
  br label %159

159:                                              ; preds = %155, %159
  %160 = phi i32* [ %172, %159 ], [ %156, %155 ]
  %161 = phi i32 [ %163, %159 ], [ %157, %155 ]
  %162 = phi i64 [ %173, %159 ], [ %158, %155 ]
  %163 = add nsw i32 %161, -1
  %164 = lshr i64 %162, 16
  %165 = trunc i64 %164 to i32
  %166 = lshr i64 %162, 28
  %167 = shl nuw nsw i64 %166, 14
  %168 = trunc i64 %167 to i32
  %169 = ashr i32 %165, 16
  %170 = add nsw i32 %169, 1
  %171 = or i32 %170, %168
  %172 = getelementptr inbounds i32, i32* %160, i64 1
  store i32 %171, i32* %160, align 4
  %173 = add nsw i64 %162, %11
  %174 = icmp sgt i32 %163, 0
  br i1 %174, label %159, label %278, !llvm.loop !39

175:                                              ; preds = %95, %43
  %176 = icmp sgt i32 %2, 0
  br i1 %176, label %177, label %278

177:                                              ; preds = %175
  %178 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 10
  %179 = add nsw i32 %2, -1
  %180 = zext i32 %179 to i64
  %181 = add nuw nsw i64 %180, 1
  %182 = icmp ult i64 %181, 4
  br i1 %182, label %245, label %183

183:                                              ; preds = %177
  %184 = add nsw i32 %2, -1
  %185 = zext i32 %184 to i64
  %186 = add nuw nsw i64 %185, 2
  %187 = getelementptr i32, i32* %1, i64 %186
  %188 = getelementptr %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 10
  %189 = bitcast i32* %188 to i8*
  %190 = getelementptr i8, i8* %189, i64 1
  %191 = icmp ugt i8* %190, %91
  %192 = icmp ult i32* %178, %187
  %193 = and i1 %191, %192
  br i1 %193, label %245, label %194

194:                                              ; preds = %183
  %195 = and i64 %181, 8589934588
  %196 = getelementptr i32, i32* %90, i64 %195
  %197 = trunc i64 %195 to i32
  %198 = sub i32 %2, %197
  %199 = mul i64 %195, %11
  %200 = add i64 %56, %199
  %201 = insertelement <4 x i64> undef, i64 %56, i32 0
  %202 = shufflevector <4 x i64> %201, <4 x i64> undef, <4 x i32> zeroinitializer
  %203 = insertelement <4 x i64> undef, i64 %11, i32 0
  %204 = shufflevector <4 x i64> %203, <4 x i64> undef, <4 x i32> zeroinitializer
  %205 = mul <4 x i64> %204, <i64 0, i64 1, i64 2, i64 3>
  %206 = add <4 x i64> %202, %205
  %207 = shl i64 %11, 2
  %208 = insertelement <4 x i64> undef, i64 %207, i32 0
  %209 = shufflevector <4 x i64> %208, <4 x i64> undef, <4 x i32> zeroinitializer
  %210 = insertelement <4 x i32> undef, i32 %9, i32 0
  %211 = shufflevector <4 x i32> %210, <4 x i32> undef, <4 x i32> zeroinitializer
  %212 = load i32, i32* %178, align 8, !alias.scope !40
  %213 = insertelement <4 x i32> undef, i32 %212, i32 0
  %214 = shufflevector <4 x i32> %213, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %215

215:                                              ; preds = %215, %194
  %216 = phi i64 [ 0, %194 ], [ %240, %215 ]
  %217 = phi <4 x i64> [ %206, %194 ], [ %241, %215 ]
  %218 = getelementptr i32, i32* %90, i64 %216
  %219 = lshr <4 x i64> %217, <i64 16, i64 16, i64 16, i64 16>
  %220 = trunc <4 x i64> %219 to <4 x i32>
  %221 = ashr <4 x i32> %220, <i32 16, i32 16, i32 16, i32 16>
  %222 = icmp sgt <4 x i32> %221, %211
  %223 = select <4 x i1> %222, <4 x i32> %211, <4 x i32> %221
  %224 = icmp sgt <4 x i32> %223, zeroinitializer
  %225 = select <4 x i1> %224, <4 x i32> %223, <4 x i32> zeroinitializer
  %226 = shl <4 x i32> %225, <i32 4, i32 4, i32 4, i32 4>
  %227 = lshr <4 x i64> %217, <i64 28, i64 28, i64 28, i64 28>
  %228 = trunc <4 x i64> %227 to <4 x i32>
  %229 = and <4 x i32> %228, <i32 15, i32 15, i32 15, i32 15>
  %230 = or <4 x i32> %226, %229
  %231 = shl <4 x i32> %230, <i32 14, i32 14, i32 14, i32 14>
  %232 = add nsw <4 x i32> %214, %220
  %233 = ashr <4 x i32> %232, <i32 16, i32 16, i32 16, i32 16>
  %234 = icmp sgt <4 x i32> %233, %211
  %235 = select <4 x i1> %234, <4 x i32> %211, <4 x i32> %233
  %236 = icmp sgt <4 x i32> %235, zeroinitializer
  %237 = select <4 x i1> %236, <4 x i32> %235, <4 x i32> zeroinitializer
  %238 = or <4 x i32> %237, %231
  %239 = bitcast i32* %218 to <4 x i32>*
  store <4 x i32> %238, <4 x i32>* %239, align 4, !alias.scope !43, !noalias !40
  %240 = add i64 %216, 4
  %241 = add <4 x i64> %217, %209
  %242 = icmp eq i64 %240, %195
  br i1 %242, label %243, label %215, !llvm.loop !45

243:                                              ; preds = %215
  %244 = icmp eq i64 %181, %195
  br i1 %244, label %278, label %245

245:                                              ; preds = %243, %183, %177
  %246 = phi i32* [ %90, %183 ], [ %90, %177 ], [ %196, %243 ]
  %247 = phi i32 [ %2, %183 ], [ %2, %177 ], [ %198, %243 ]
  %248 = phi i64 [ %56, %183 ], [ %56, %177 ], [ %200, %243 ]
  br label %249

249:                                              ; preds = %245, %249
  %250 = phi i32* [ %275, %249 ], [ %246, %245 ]
  %251 = phi i32 [ %253, %249 ], [ %247, %245 ]
  %252 = phi i64 [ %276, %249 ], [ %248, %245 ]
  %253 = add nsw i32 %251, -1
  %254 = lshr i64 %252, 16
  %255 = trunc i64 %254 to i32
  %256 = load i32, i32* %178, align 8
  %257 = ashr i32 %255, 16
  %258 = icmp sgt i32 %257, %9
  %259 = select i1 %258, i32 %9, i32 %257
  %260 = icmp sgt i32 %259, 0
  %261 = select i1 %260, i32 %259, i32 0
  %262 = shl i32 %261, 4
  %263 = lshr i64 %252, 28
  %264 = trunc i64 %263 to i32
  %265 = and i32 %264, 15
  %266 = or i32 %262, %265
  %267 = shl i32 %266, 14
  %268 = add nsw i32 %256, %255
  %269 = ashr i32 %268, 16
  %270 = icmp sgt i32 %269, %9
  %271 = select i1 %270, i32 %9, i32 %269
  %272 = icmp sgt i32 %271, 0
  %273 = select i1 %272, i32 %271, i32 0
  %274 = or i32 %273, %267
  %275 = getelementptr inbounds i32, i32* %250, i64 1
  store i32 %274, i32* %250, align 4
  %276 = add nsw i64 %252, %11
  %277 = icmp sgt i32 %253, 0
  br i1 %277, label %249, label %278, !llvm.loop !46

278:                                              ; preds = %249, %159, %243, %153, %175, %103
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZL15nofilter_affineIXadL_ZL5clampiiEEXadL_ZL5clampiiEEEvRK17SkBitmapProcStatePjiii(%struct.SkBitmapProcState* dereferenceable(336), i32* nocapture, i32, i32, i32) #0 {
  %6 = alloca %struct.SkPoint, align 4
  %7 = bitcast %struct.SkPoint* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #3
  %8 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %6, i64 0, i32 0
  store float 0xFFFFFFFFE0000000, float* %8, align 4
  %9 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %6, i64 0, i32 1
  store float 0xFFFFFFFFE0000000, float* %9, align 4
  %10 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 7
  %11 = load void (%class.SkMatrix*, float, float, %struct.SkPoint*)*, void (%class.SkMatrix*, float, float, %struct.SkPoint*)** %10, align 8
  %12 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 2
  %13 = sitofp i32 %3 to float
  %14 = fadd float %13, 5.000000e-01
  %15 = sitofp i32 %4 to float
  %16 = fadd float %15, 5.000000e-01
  call void %11(%class.SkMatrix* dereferenceable(40) %12, float %14, float %16, %struct.SkPoint* nonnull %6) #3
  %17 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 6
  %18 = load i8, i8* %17, align 4, !range !2
  %19 = icmp eq i8 %18, 0
  br i1 %19, label %27, label %20

20:                                               ; preds = %5
  %21 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 10
  %22 = load i32, i32* %21, align 8
  %23 = ashr i32 %22, 1
  %24 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 11
  %25 = load i32, i32* %24, align 4
  %26 = ashr i32 %25, 1
  br label %36

27:                                               ; preds = %5
  %28 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %12, i64 0, i32 0, i64 0
  %29 = load float, float* %28, align 4
  %30 = fcmp ogt float %29, 0.000000e+00
  %31 = zext i1 %30 to i32
  %32 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 2, i32 0, i64 4
  %33 = load float, float* %32, align 4
  %34 = fcmp ogt float %33, 0.000000e+00
  %35 = zext i1 %34 to i32
  br label %36

36:                                               ; preds = %20, %27
  %37 = phi i32 [ %23, %20 ], [ %31, %27 ]
  %38 = phi i32 [ %26, %20 ], [ %35, %27 ]
  %39 = load float, float* %8, align 4
  %40 = fmul float %39, 0x41F0000000000000
  %41 = fcmp olt float %40, 0x43DFFFFFE0000000
  %42 = select i1 %41, float %40, float 0x43DFFFFFE0000000
  %43 = load float, float* %9, align 4
  %44 = fmul float %43, 0x41F0000000000000
  %45 = fcmp olt float %44, 0x43DFFFFFE0000000
  %46 = select i1 %45, float %44, float 0x43DFFFFFE0000000
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #3
  %47 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 8
  %48 = load i64, i64* %47, align 8
  %49 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 9
  %50 = load i64, i64* %49, align 8
  %51 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 1, i32 2, i32 1, i32 0
  %52 = load i32, i32* %51, align 4
  %53 = add nsw i32 %52, -1
  %54 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 1, i32 2, i32 1, i32 1
  %55 = load i32, i32* %54, align 4
  %56 = add nsw i32 %55, -1
  %57 = icmp sgt i32 %2, 0
  br i1 %57, label %58, label %165

58:                                               ; preds = %36
  %59 = fcmp ogt float %46, 0xC3DFFFFFE0000000
  %60 = select i1 %59, float %46, float 0xC3DFFFFFE0000000
  %61 = fptosi float %60 to i64
  %62 = sext i32 %38 to i64
  %63 = shl nsw i64 %62, 16
  %64 = sub i64 %61, %63
  %65 = fcmp ogt float %42, 0xC3DFFFFFE0000000
  %66 = select i1 %65, float %42, float 0xC3DFFFFFE0000000
  %67 = fptosi float %66 to i64
  %68 = sext i32 %37 to i64
  %69 = shl nsw i64 %68, 16
  %70 = sub i64 %67, %69
  %71 = add nsw i32 %2, -1
  %72 = zext i32 %71 to i64
  %73 = add nuw nsw i64 %72, 1
  %74 = icmp ult i64 %73, 4
  br i1 %74, label %134, label %75

75:                                               ; preds = %58
  %76 = and i64 %73, 8589934588
  %77 = mul i64 %76, %50
  %78 = add i64 %64, %77
  %79 = mul i64 %76, %48
  %80 = add i64 %70, %79
  %81 = getelementptr i32, i32* %1, i64 %76
  %82 = trunc i64 %76 to i32
  %83 = sub i32 %2, %82
  %84 = insertelement <4 x i64> undef, i64 %64, i32 0
  %85 = shufflevector <4 x i64> %84, <4 x i64> undef, <4 x i32> zeroinitializer
  %86 = insertelement <4 x i64> undef, i64 %50, i32 0
  %87 = shufflevector <4 x i64> %86, <4 x i64> undef, <4 x i32> zeroinitializer
  %88 = mul <4 x i64> %87, <i64 0, i64 1, i64 2, i64 3>
  %89 = add <4 x i64> %85, %88
  %90 = shl i64 %50, 2
  %91 = insertelement <4 x i64> undef, i64 %90, i32 0
  %92 = shufflevector <4 x i64> %91, <4 x i64> undef, <4 x i32> zeroinitializer
  %93 = insertelement <4 x i64> undef, i64 %70, i32 0
  %94 = shufflevector <4 x i64> %93, <4 x i64> undef, <4 x i32> zeroinitializer
  %95 = insertelement <4 x i64> undef, i64 %48, i32 0
  %96 = shufflevector <4 x i64> %95, <4 x i64> undef, <4 x i32> zeroinitializer
  %97 = mul <4 x i64> %96, <i64 0, i64 1, i64 2, i64 3>
  %98 = add <4 x i64> %94, %97
  %99 = shl i64 %48, 2
  %100 = insertelement <4 x i64> undef, i64 %99, i32 0
  %101 = shufflevector <4 x i64> %100, <4 x i64> undef, <4 x i32> zeroinitializer
  %102 = insertelement <4 x i32> undef, i32 %56, i32 0
  %103 = shufflevector <4 x i32> %102, <4 x i32> undef, <4 x i32> zeroinitializer
  %104 = insertelement <4 x i32> undef, i32 %53, i32 0
  %105 = shufflevector <4 x i32> %104, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %106

106:                                              ; preds = %106, %75
  %107 = phi i64 [ 0, %75 ], [ %128, %106 ]
  %108 = phi <4 x i64> [ %89, %75 ], [ %129, %106 ]
  %109 = phi <4 x i64> [ %98, %75 ], [ %130, %106 ]
  %110 = getelementptr i32, i32* %1, i64 %107
  %111 = lshr <4 x i64> %108, <i64 16, i64 16, i64 16, i64 16>
  %112 = trunc <4 x i64> %111 to <4 x i32>
  %113 = ashr <4 x i32> %112, <i32 16, i32 16, i32 16, i32 16>
  %114 = icmp sgt <4 x i32> %113, %103
  %115 = select <4 x i1> %114, <4 x i32> %103, <4 x i32> %113
  %116 = icmp sgt <4 x i32> %115, zeroinitializer
  %117 = select <4 x i1> %116, <4 x i32> %115, <4 x i32> zeroinitializer
  %118 = shl <4 x i32> %117, <i32 16, i32 16, i32 16, i32 16>
  %119 = lshr <4 x i64> %109, <i64 16, i64 16, i64 16, i64 16>
  %120 = trunc <4 x i64> %119 to <4 x i32>
  %121 = ashr <4 x i32> %120, <i32 16, i32 16, i32 16, i32 16>
  %122 = icmp sgt <4 x i32> %121, %105
  %123 = select <4 x i1> %122, <4 x i32> %105, <4 x i32> %121
  %124 = icmp sgt <4 x i32> %123, zeroinitializer
  %125 = select <4 x i1> %124, <4 x i32> %123, <4 x i32> zeroinitializer
  %126 = or <4 x i32> %118, %125
  %127 = bitcast i32* %110 to <4 x i32>*
  store <4 x i32> %126, <4 x i32>* %127, align 4
  %128 = add i64 %107, 4
  %129 = add <4 x i64> %108, %92
  %130 = add <4 x i64> %109, %101
  %131 = icmp eq i64 %128, %76
  br i1 %131, label %132, label %106, !llvm.loop !47

132:                                              ; preds = %106
  %133 = icmp eq i64 %73, %76
  br i1 %133, label %165, label %134

134:                                              ; preds = %132, %58
  %135 = phi i64 [ %64, %58 ], [ %78, %132 ]
  %136 = phi i64 [ %70, %58 ], [ %80, %132 ]
  %137 = phi i32* [ %1, %58 ], [ %81, %132 ]
  %138 = phi i32 [ %2, %58 ], [ %83, %132 ]
  br label %139

139:                                              ; preds = %134, %139
  %140 = phi i64 [ %163, %139 ], [ %135, %134 ]
  %141 = phi i64 [ %162, %139 ], [ %136, %134 ]
  %142 = phi i32* [ %161, %139 ], [ %137, %134 ]
  %143 = phi i32 [ %144, %139 ], [ %138, %134 ]
  %144 = add nsw i32 %143, -1
  %145 = lshr i64 %140, 16
  %146 = trunc i64 %145 to i32
  %147 = ashr i32 %146, 16
  %148 = icmp sgt i32 %147, %56
  %149 = select i1 %148, i32 %56, i32 %147
  %150 = icmp sgt i32 %149, 0
  %151 = select i1 %150, i32 %149, i32 0
  %152 = shl i32 %151, 16
  %153 = lshr i64 %141, 16
  %154 = trunc i64 %153 to i32
  %155 = ashr i32 %154, 16
  %156 = icmp sgt i32 %155, %53
  %157 = select i1 %156, i32 %53, i32 %155
  %158 = icmp sgt i32 %157, 0
  %159 = select i1 %158, i32 %157, i32 0
  %160 = or i32 %152, %159
  %161 = getelementptr inbounds i32, i32* %142, i64 1
  store i32 %160, i32* %142, align 4
  %162 = add nsw i64 %141, %48
  %163 = add nsw i64 %140, %50
  %164 = icmp sgt i32 %144, 0
  br i1 %164, label %139, label %165, !llvm.loop !48

165:                                              ; preds = %139, %132, %36
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZL13filter_affineIXadL_ZL5clampiiEEXadL_ZL5clampiiEEXadL_ZL28extract_low_bits_clamp_clampiiEEEvRK17SkBitmapProcStatePjiii(%struct.SkBitmapProcState* dereferenceable(336), i32* nocapture, i32, i32, i32) #0 {
  %6 = alloca %struct.SkPoint, align 4
  %7 = bitcast %struct.SkPoint* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #3
  %8 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %6, i64 0, i32 0
  store float 0xFFFFFFFFE0000000, float* %8, align 4
  %9 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %6, i64 0, i32 1
  store float 0xFFFFFFFFE0000000, float* %9, align 4
  %10 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 7
  %11 = load void (%class.SkMatrix*, float, float, %struct.SkPoint*)*, void (%class.SkMatrix*, float, float, %struct.SkPoint*)** %10, align 8
  %12 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 2
  %13 = sitofp i32 %3 to float
  %14 = fadd float %13, 5.000000e-01
  %15 = sitofp i32 %4 to float
  %16 = fadd float %15, 5.000000e-01
  call void %11(%class.SkMatrix* dereferenceable(40) %12, float %14, float %16, %struct.SkPoint* nonnull %6) #3
  %17 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 6
  %18 = load i8, i8* %17, align 4, !range !2
  %19 = icmp eq i8 %18, 0
  br i1 %19, label %27, label %20

20:                                               ; preds = %5
  %21 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 10
  %22 = load i32, i32* %21, align 8
  %23 = ashr i32 %22, 1
  %24 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 11
  %25 = load i32, i32* %24, align 4
  %26 = ashr i32 %25, 1
  br label %40

27:                                               ; preds = %5
  %28 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %12, i64 0, i32 0, i64 0
  %29 = load float, float* %28, align 4
  %30 = fcmp ogt float %29, 0.000000e+00
  %31 = zext i1 %30 to i32
  %32 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 2, i32 0, i64 4
  %33 = load float, float* %32, align 4
  %34 = fcmp ogt float %33, 0.000000e+00
  %35 = zext i1 %34 to i32
  %36 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 10
  %37 = load i32, i32* %36, align 8
  %38 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 11
  %39 = load i32, i32* %38, align 4
  br label %40

40:                                               ; preds = %20, %27
  %41 = phi i32 [ %25, %20 ], [ %39, %27 ]
  %42 = phi i32 [ %22, %20 ], [ %37, %27 ]
  %43 = phi i32 [ %23, %20 ], [ %31, %27 ]
  %44 = phi i32 [ %26, %20 ], [ %35, %27 ]
  %45 = load float, float* %8, align 4
  %46 = fmul float %45, 0x41F0000000000000
  %47 = fcmp olt float %46, 0x43DFFFFFE0000000
  %48 = select i1 %47, float %46, float 0x43DFFFFFE0000000
  %49 = load float, float* %9, align 4
  %50 = fmul float %49, 0x41F0000000000000
  %51 = fcmp olt float %50, 0x43DFFFFFE0000000
  %52 = select i1 %51, float %50, float 0x43DFFFFFE0000000
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #3
  %53 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 8
  %54 = load i64, i64* %53, align 8
  %55 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 9
  %56 = load i64, i64* %55, align 8
  %57 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 1, i32 2, i32 1, i32 0
  %58 = load i32, i32* %57, align 4
  %59 = add nsw i32 %58, -1
  %60 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 1, i32 2, i32 1, i32 1
  %61 = load i32, i32* %60, align 4
  %62 = add nsw i32 %61, -1
  %63 = icmp sgt i32 %2, 0
  br i1 %63, label %64, label %227

64:                                               ; preds = %40
  %65 = fcmp ogt float %52, 0xC3DFFFFFE0000000
  %66 = select i1 %65, float %52, float 0xC3DFFFFFE0000000
  %67 = fptosi float %66 to i64
  %68 = sext i32 %44 to i64
  %69 = shl nsw i64 %68, 16
  %70 = sub i64 %67, %69
  %71 = fcmp ogt float %48, 0xC3DFFFFFE0000000
  %72 = select i1 %71, float %48, float 0xC3DFFFFFE0000000
  %73 = fptosi float %72 to i64
  %74 = sext i32 %43 to i64
  %75 = shl nsw i64 %74, 16
  %76 = sub i64 %73, %75
  %77 = add nsw i32 %2, -1
  %78 = zext i32 %77 to i64
  %79 = add nuw nsw i64 %78, 1
  %80 = icmp ult i64 %79, 4
  br i1 %80, label %171, label %81

81:                                               ; preds = %64
  %82 = and i64 %79, 8589934588
  %83 = mul i64 %82, %56
  %84 = add i64 %70, %83
  %85 = mul i64 %82, %54
  %86 = add i64 %76, %85
  %87 = shl nuw nsw i64 %82, 1
  %88 = getelementptr i32, i32* %1, i64 %87
  %89 = trunc i64 %82 to i32
  %90 = sub i32 %2, %89
  %91 = insertelement <4 x i64> undef, i64 %70, i32 0
  %92 = shufflevector <4 x i64> %91, <4 x i64> undef, <4 x i32> zeroinitializer
  %93 = insertelement <4 x i64> undef, i64 %56, i32 0
  %94 = shufflevector <4 x i64> %93, <4 x i64> undef, <4 x i32> zeroinitializer
  %95 = mul <4 x i64> %94, <i64 0, i64 1, i64 2, i64 3>
  %96 = add <4 x i64> %92, %95
  %97 = shl i64 %56, 2
  %98 = insertelement <4 x i64> undef, i64 %97, i32 0
  %99 = shufflevector <4 x i64> %98, <4 x i64> undef, <4 x i32> zeroinitializer
  %100 = insertelement <4 x i64> undef, i64 %76, i32 0
  %101 = shufflevector <4 x i64> %100, <4 x i64> undef, <4 x i32> zeroinitializer
  %102 = insertelement <4 x i64> undef, i64 %54, i32 0
  %103 = shufflevector <4 x i64> %102, <4 x i64> undef, <4 x i32> zeroinitializer
  %104 = mul <4 x i64> %103, <i64 0, i64 1, i64 2, i64 3>
  %105 = add <4 x i64> %101, %104
  %106 = shl i64 %54, 2
  %107 = insertelement <4 x i64> undef, i64 %106, i32 0
  %108 = shufflevector <4 x i64> %107, <4 x i64> undef, <4 x i32> zeroinitializer
  %109 = insertelement <4 x i32> undef, i32 %62, i32 0
  %110 = shufflevector <4 x i32> %109, <4 x i32> undef, <4 x i32> zeroinitializer
  %111 = insertelement <4 x i32> undef, i32 %41, i32 0
  %112 = shufflevector <4 x i32> %111, <4 x i32> undef, <4 x i32> zeroinitializer
  %113 = insertelement <4 x i32> undef, i32 %59, i32 0
  %114 = shufflevector <4 x i32> %113, <4 x i32> undef, <4 x i32> zeroinitializer
  %115 = insertelement <4 x i32> undef, i32 %42, i32 0
  %116 = shufflevector <4 x i32> %115, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %117

117:                                              ; preds = %117, %81
  %118 = phi i64 [ 0, %81 ], [ %165, %117 ]
  %119 = phi <4 x i64> [ %96, %81 ], [ %166, %117 ]
  %120 = phi <4 x i64> [ %105, %81 ], [ %167, %117 ]
  %121 = shl i64 %118, 1
  %122 = lshr <4 x i64> %119, <i64 16, i64 16, i64 16, i64 16>
  %123 = trunc <4 x i64> %122 to <4 x i32>
  %124 = ashr <4 x i32> %123, <i32 16, i32 16, i32 16, i32 16>
  %125 = icmp sgt <4 x i32> %124, %110
  %126 = select <4 x i1> %125, <4 x i32> %110, <4 x i32> %124
  %127 = icmp sgt <4 x i32> %126, zeroinitializer
  %128 = select <4 x i1> %127, <4 x i32> %126, <4 x i32> zeroinitializer
  %129 = shl <4 x i32> %128, <i32 4, i32 4, i32 4, i32 4>
  %130 = lshr <4 x i64> %119, <i64 28, i64 28, i64 28, i64 28>
  %131 = trunc <4 x i64> %130 to <4 x i32>
  %132 = and <4 x i32> %131, <i32 15, i32 15, i32 15, i32 15>
  %133 = or <4 x i32> %129, %132
  %134 = shl <4 x i32> %133, <i32 14, i32 14, i32 14, i32 14>
  %135 = add nsw <4 x i32> %112, %123
  %136 = ashr <4 x i32> %135, <i32 16, i32 16, i32 16, i32 16>
  %137 = icmp sgt <4 x i32> %136, %110
  %138 = select <4 x i1> %137, <4 x i32> %110, <4 x i32> %136
  %139 = icmp sgt <4 x i32> %138, zeroinitializer
  %140 = select <4 x i1> %139, <4 x i32> %138, <4 x i32> zeroinitializer
  %141 = or <4 x i32> %134, %140
  %142 = lshr <4 x i64> %120, <i64 16, i64 16, i64 16, i64 16>
  %143 = trunc <4 x i64> %142 to <4 x i32>
  %144 = ashr <4 x i32> %143, <i32 16, i32 16, i32 16, i32 16>
  %145 = icmp sgt <4 x i32> %144, %114
  %146 = select <4 x i1> %145, <4 x i32> %114, <4 x i32> %144
  %147 = icmp sgt <4 x i32> %146, zeroinitializer
  %148 = select <4 x i1> %147, <4 x i32> %146, <4 x i32> zeroinitializer
  %149 = shl <4 x i32> %148, <i32 4, i32 4, i32 4, i32 4>
  %150 = lshr <4 x i64> %120, <i64 28, i64 28, i64 28, i64 28>
  %151 = trunc <4 x i64> %150 to <4 x i32>
  %152 = and <4 x i32> %151, <i32 15, i32 15, i32 15, i32 15>
  %153 = or <4 x i32> %149, %152
  %154 = shl <4 x i32> %153, <i32 14, i32 14, i32 14, i32 14>
  %155 = add nsw <4 x i32> %116, %143
  %156 = ashr <4 x i32> %155, <i32 16, i32 16, i32 16, i32 16>
  %157 = icmp sgt <4 x i32> %156, %114
  %158 = select <4 x i1> %157, <4 x i32> %114, <4 x i32> %156
  %159 = icmp sgt <4 x i32> %158, zeroinitializer
  %160 = select <4 x i1> %159, <4 x i32> %158, <4 x i32> zeroinitializer
  %161 = or <4 x i32> %154, %160
  %162 = getelementptr inbounds i32, i32* %1, i64 %121
  %163 = bitcast i32* %162 to <8 x i32>*
  %164 = shufflevector <4 x i32> %141, <4 x i32> %161, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  store <8 x i32> %164, <8 x i32>* %163, align 4
  %165 = add i64 %118, 4
  %166 = add <4 x i64> %119, %99
  %167 = add <4 x i64> %120, %108
  %168 = icmp eq i64 %165, %82
  br i1 %168, label %169, label %117, !llvm.loop !49

169:                                              ; preds = %117
  %170 = icmp eq i64 %79, %82
  br i1 %170, label %227, label %171

171:                                              ; preds = %169, %64
  %172 = phi i64 [ %70, %64 ], [ %84, %169 ]
  %173 = phi i64 [ %76, %64 ], [ %86, %169 ]
  %174 = phi i32* [ %1, %64 ], [ %88, %169 ]
  %175 = phi i32 [ %2, %64 ], [ %90, %169 ]
  br label %176

176:                                              ; preds = %171, %176
  %177 = phi i64 [ %224, %176 ], [ %172, %171 ]
  %178 = phi i64 [ %225, %176 ], [ %173, %171 ]
  %179 = phi i32* [ %223, %176 ], [ %174, %171 ]
  %180 = phi i32 [ %181, %176 ], [ %175, %171 ]
  %181 = add nsw i32 %180, -1
  %182 = lshr i64 %177, 16
  %183 = trunc i64 %182 to i32
  %184 = ashr i32 %183, 16
  %185 = icmp sgt i32 %184, %62
  %186 = select i1 %185, i32 %62, i32 %184
  %187 = icmp sgt i32 %186, 0
  %188 = select i1 %187, i32 %186, i32 0
  %189 = shl i32 %188, 4
  %190 = lshr i64 %177, 28
  %191 = trunc i64 %190 to i32
  %192 = and i32 %191, 15
  %193 = or i32 %189, %192
  %194 = shl i32 %193, 14
  %195 = add nsw i32 %41, %183
  %196 = ashr i32 %195, 16
  %197 = icmp sgt i32 %196, %62
  %198 = select i1 %197, i32 %62, i32 %196
  %199 = icmp sgt i32 %198, 0
  %200 = select i1 %199, i32 %198, i32 0
  %201 = or i32 %194, %200
  %202 = getelementptr inbounds i32, i32* %179, i64 1
  store i32 %201, i32* %179, align 4
  %203 = lshr i64 %178, 16
  %204 = trunc i64 %203 to i32
  %205 = ashr i32 %204, 16
  %206 = icmp sgt i32 %205, %59
  %207 = select i1 %206, i32 %59, i32 %205
  %208 = icmp sgt i32 %207, 0
  %209 = select i1 %208, i32 %207, i32 0
  %210 = shl i32 %209, 4
  %211 = lshr i64 %178, 28
  %212 = trunc i64 %211 to i32
  %213 = and i32 %212, 15
  %214 = or i32 %210, %213
  %215 = shl i32 %214, 14
  %216 = add nsw i32 %42, %204
  %217 = ashr i32 %216, 16
  %218 = icmp sgt i32 %217, %59
  %219 = select i1 %218, i32 %59, i32 %217
  %220 = icmp sgt i32 %219, 0
  %221 = select i1 %220, i32 %219, i32 0
  %222 = or i32 %215, %221
  %223 = getelementptr inbounds i32, i32* %179, i64 2
  store i32 %222, i32* %202, align 4
  %224 = add nsw i64 %177, %56
  %225 = add nsw i64 %178, %54
  %226 = icmp sgt i32 %181, 0
  br i1 %226, label %176, label %227, !llvm.loop !50

227:                                              ; preds = %176, %169, %40
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define internal void @_ZL14nofilter_scaleIXadL_ZL6repeatiiEEXadL_ZL6repeatiiEELb0EEvRK17SkBitmapProcStatePjiii(%struct.SkBitmapProcState* dereferenceable(336), i32* nocapture, i32, i32, i32) #0 {
  %6 = alloca %struct.SkPoint, align 4
  %7 = bitcast %struct.SkPoint* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #3
  %8 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %6, i64 0, i32 0
  store float 0xFFFFFFFFE0000000, float* %8, align 4
  %9 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %6, i64 0, i32 1
  store float 0xFFFFFFFFE0000000, float* %9, align 4
  %10 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 7
  %11 = load void (%class.SkMatrix*, float, float, %struct.SkPoint*)*, void (%class.SkMatrix*, float, float, %struct.SkPoint*)** %10, align 8
  %12 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 2
  %13 = sitofp i32 %3 to float
  %14 = fadd float %13, 5.000000e-01
  %15 = sitofp i32 %4 to float
  %16 = fadd float %15, 5.000000e-01
  call void %11(%class.SkMatrix* dereferenceable(40) %12, float %14, float %16, %struct.SkPoint* nonnull %6) #3
  %17 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 6
  %18 = load i8, i8* %17, align 4, !range !2
  %19 = icmp eq i8 %18, 0
  br i1 %19, label %27, label %20

20:                                               ; preds = %5
  %21 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 10
  %22 = load i32, i32* %21, align 8
  %23 = ashr i32 %22, 1
  %24 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 11
  %25 = load i32, i32* %24, align 4
  %26 = ashr i32 %25, 1
  br label %36

27:                                               ; preds = %5
  %28 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %12, i64 0, i32 0, i64 0
  %29 = load float, float* %28, align 4
  %30 = fcmp ogt float %29, 0.000000e+00
  %31 = zext i1 %30 to i32
  %32 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 2, i32 0, i64 4
  %33 = load float, float* %32, align 4
  %34 = fcmp ogt float %33, 0.000000e+00
  %35 = zext i1 %34 to i32
  br label %36

36:                                               ; preds = %20, %27
  %37 = phi i32 [ %23, %20 ], [ %31, %27 ]
  %38 = phi i32 [ %26, %20 ], [ %35, %27 ]
  %39 = load float, float* %8, align 4
  %40 = fmul float %39, 0x41F0000000000000
  %41 = fcmp olt float %40, 0x43DFFFFFE0000000
  %42 = select i1 %41, float %40, float 0x43DFFFFFE0000000
  %43 = load float, float* %9, align 4
  %44 = fmul float %43, 0x41F0000000000000
  %45 = fcmp olt float %44, 0x43DFFFFFE0000000
  %46 = select i1 %45, float %44, float 0x43DFFFFFE0000000
  %47 = fcmp ogt float %46, 0xC3DFFFFFE0000000
  %48 = select i1 %47, float %46, float 0xC3DFFFFFE0000000
  %49 = fptosi float %48 to i64
  %50 = sext i32 %38 to i64
  %51 = shl nsw i64 %50, 16
  %52 = sub i64 %49, %51
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #3
  %53 = lshr i64 %52, 16
  %54 = trunc i64 %53 to i32
  %55 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 1, i32 2, i32 1, i32 1
  %56 = load i32, i32* %55, align 4
  %57 = and i32 %54, 65535
  %58 = mul i32 %57, %56
  %59 = lshr i32 %58, 16
  %60 = getelementptr inbounds i32, i32* %1, i64 1
  store i32 %59, i32* %1, align 4
  %61 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 1, i32 2, i32 1, i32 0
  %62 = load i32, i32* %61, align 4
  %63 = icmp eq i32 %62, 1
  br i1 %63, label %64, label %68

64:                                               ; preds = %36
  %65 = bitcast i32* %60 to i8*
  %66 = sext i32 %2 to i64
  %67 = shl nsw i64 %66, 1
  call void @llvm.memset.p0i8.i64(i8* align 4 %65, i8 0, i64 %67, i1 false)
  br label %169

68:                                               ; preds = %36
  %69 = fcmp ogt float %42, 0xC3DFFFFFE0000000
  %70 = select i1 %69, float %42, float 0xC3DFFFFFE0000000
  %71 = fptosi float %70 to i64
  %72 = sext i32 %37 to i64
  %73 = shl nsw i64 %72, 16
  %74 = sub i64 %71, %73
  %75 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 8
  %76 = load i64, i64* %75, align 8
  %77 = icmp sgt i32 %2, 1
  br i1 %77, label %78, label %156

78:                                               ; preds = %68
  %79 = shl i64 %76, 1
  %80 = add nsw i32 %2, -2
  %81 = lshr i32 %80, 1
  %82 = add nuw i32 %81, 1
  %83 = zext i32 %82 to i64
  %84 = icmp ult i32 %82, 4
  br i1 %84, label %128, label %85

85:                                               ; preds = %78
  %86 = and i64 %83, 4294967292
  %87 = mul i64 %86, %79
  %88 = add i64 %74, %87
  %89 = getelementptr i32, i32* %60, i64 %86
  %90 = trunc i64 %86 to i32
  %91 = mul i32 %90, -2
  %92 = add i32 %91, %2
  %93 = insertelement <4 x i64> undef, i64 %74, i32 0
  %94 = shufflevector <4 x i64> %93, <4 x i64> undef, <4 x i32> zeroinitializer
  %95 = insertelement <4 x i64> undef, i64 %79, i32 0
  %96 = shufflevector <4 x i64> %95, <4 x i64> undef, <4 x i32> zeroinitializer
  %97 = mul <4 x i64> %96, <i64 0, i64 1, i64 2, i64 3>
  %98 = add <4 x i64> %94, %97
  %99 = shl i64 %76, 3
  %100 = insertelement <4 x i64> undef, i64 %99, i32 0
  %101 = shufflevector <4 x i64> %100, <4 x i64> undef, <4 x i32> zeroinitializer
  %102 = insertelement <4 x i32> undef, i32 %62, i32 0
  %103 = shufflevector <4 x i32> %102, <4 x i32> undef, <4 x i32> zeroinitializer
  %104 = insertelement <4 x i64> undef, i64 %76, i32 0
  %105 = shufflevector <4 x i64> %104, <4 x i64> undef, <4 x i32> zeroinitializer
  br label %106

106:                                              ; preds = %106, %85
  %107 = phi i64 [ 0, %85 ], [ %123, %106 ]
  %108 = phi <4 x i64> [ %98, %85 ], [ %124, %106 ]
  %109 = getelementptr i32, i32* %60, i64 %107
  %110 = lshr <4 x i64> %108, <i64 16, i64 16, i64 16, i64 16>
  %111 = trunc <4 x i64> %110 to <4 x i32>
  %112 = and <4 x i32> %111, <i32 65535, i32 65535, i32 65535, i32 65535>
  %113 = mul <4 x i32> %112, %103
  %114 = lshr <4 x i32> %113, <i32 16, i32 16, i32 16, i32 16>
  %115 = add nsw <4 x i64> %108, %105
  %116 = lshr <4 x i64> %115, <i64 16, i64 16, i64 16, i64 16>
  %117 = trunc <4 x i64> %116 to <4 x i32>
  %118 = and <4 x i32> %117, <i32 65535, i32 65535, i32 65535, i32 65535>
  %119 = mul <4 x i32> %118, %103
  %120 = and <4 x i32> %119, <i32 -65536, i32 -65536, i32 -65536, i32 -65536>
  %121 = or <4 x i32> %120, %114
  %122 = bitcast i32* %109 to <4 x i32>*
  store <4 x i32> %121, <4 x i32>* %122, align 4
  %123 = add i64 %107, 4
  %124 = add <4 x i64> %108, %101
  %125 = icmp eq i64 %123, %86
  br i1 %125, label %126, label %106, !llvm.loop !51

126:                                              ; preds = %106
  %127 = icmp eq i64 %86, %83
  br i1 %127, label %152, label %128

128:                                              ; preds = %126, %78
  %129 = phi i64 [ %74, %78 ], [ %88, %126 ]
  %130 = phi i32* [ %60, %78 ], [ %89, %126 ]
  %131 = phi i32 [ %2, %78 ], [ %92, %126 ]
  br label %132

132:                                              ; preds = %128, %132
  %133 = phi i64 [ %149, %132 ], [ %129, %128 ]
  %134 = phi i32* [ %148, %132 ], [ %130, %128 ]
  %135 = phi i32 [ %150, %132 ], [ %131, %128 ]
  %136 = lshr i64 %133, 16
  %137 = trunc i64 %136 to i32
  %138 = and i32 %137, 65535
  %139 = mul i32 %138, %62
  %140 = lshr i32 %139, 16
  %141 = add nsw i64 %133, %76
  %142 = lshr i64 %141, 16
  %143 = trunc i64 %142 to i32
  %144 = and i32 %143, 65535
  %145 = mul i32 %144, %62
  %146 = and i32 %145, -65536
  %147 = or i32 %146, %140
  %148 = getelementptr inbounds i32, i32* %134, i64 1
  store i32 %147, i32* %134, align 4
  %149 = add nsw i64 %133, %79
  %150 = add nsw i32 %135, -2
  %151 = icmp sgt i32 %150, 1
  br i1 %151, label %132, label %152, !llvm.loop !52

152:                                              ; preds = %132, %126
  %153 = phi i32* [ %89, %126 ], [ %148, %132 ]
  %154 = phi i64 [ %88, %126 ], [ %149, %132 ]
  %155 = and i32 %2, 1
  br label %156

156:                                              ; preds = %152, %68
  %157 = phi i32 [ %2, %68 ], [ %155, %152 ]
  %158 = phi i32* [ %60, %68 ], [ %153, %152 ]
  %159 = phi i64 [ %74, %68 ], [ %154, %152 ]
  %160 = icmp sgt i32 %157, 0
  br i1 %160, label %161, label %169

161:                                              ; preds = %156
  %162 = bitcast i32* %158 to i16*
  %163 = lshr i64 %159, 16
  %164 = trunc i64 %163 to i32
  %165 = and i32 %164, 65535
  %166 = mul i32 %165, %62
  %167 = lshr i32 %166, 16
  %168 = trunc i32 %167 to i16
  store i16 %168, i16* %162, align 2
  br label %169

169:                                              ; preds = %161, %156, %64
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZL12filter_scaleIXadL_ZL6repeatiiEEXadL_ZL6repeatiiEEXadL_ZL24extract_low_bits_generaliiEELb0EEvRK17SkBitmapProcStatePjiii(%struct.SkBitmapProcState* dereferenceable(336), i32* nocapture, i32, i32, i32) #0 {
  %6 = alloca %struct.SkPoint, align 4
  %7 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 1, i32 2, i32 1, i32 0
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 8
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %struct.SkPoint* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11) #3
  %12 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %6, i64 0, i32 0
  store float 0xFFFFFFFFE0000000, float* %12, align 4
  %13 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %6, i64 0, i32 1
  store float 0xFFFFFFFFE0000000, float* %13, align 4
  %14 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 7
  %15 = load void (%class.SkMatrix*, float, float, %struct.SkPoint*)*, void (%class.SkMatrix*, float, float, %struct.SkPoint*)** %14, align 8
  %16 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 2
  %17 = sitofp i32 %3 to float
  %18 = fadd float %17, 5.000000e-01
  %19 = sitofp i32 %4 to float
  %20 = fadd float %19, 5.000000e-01
  call void %15(%class.SkMatrix* dereferenceable(40) %16, float %18, float %20, %struct.SkPoint* nonnull %6) #3
  %21 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 6
  %22 = load i8, i8* %21, align 4, !range !2
  %23 = icmp eq i8 %22, 0
  br i1 %23, label %31, label %24

24:                                               ; preds = %5
  %25 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 10
  %26 = load i32, i32* %25, align 8
  %27 = ashr i32 %26, 1
  %28 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 11
  %29 = load i32, i32* %28, align 4
  %30 = ashr i32 %29, 1
  br label %42

31:                                               ; preds = %5
  %32 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %16, i64 0, i32 0, i64 0
  %33 = load float, float* %32, align 4
  %34 = fcmp ogt float %33, 0.000000e+00
  %35 = zext i1 %34 to i32
  %36 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 2, i32 0, i64 4
  %37 = load float, float* %36, align 4
  %38 = fcmp ogt float %37, 0.000000e+00
  %39 = zext i1 %38 to i32
  %40 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 11
  %41 = load i32, i32* %40, align 4
  br label %42

42:                                               ; preds = %24, %31
  %43 = phi i32 [ %29, %24 ], [ %41, %31 ]
  %44 = phi i32 [ %27, %24 ], [ %35, %31 ]
  %45 = phi i32 [ %30, %24 ], [ %39, %31 ]
  %46 = load float, float* %12, align 4
  %47 = fmul float %46, 0x41F0000000000000
  %48 = fcmp olt float %47, 0x43DFFFFFE0000000
  %49 = select i1 %48, float %47, float 0x43DFFFFFE0000000
  %50 = load float, float* %13, align 4
  %51 = fmul float %50, 0x41F0000000000000
  %52 = fcmp olt float %51, 0x43DFFFFFE0000000
  %53 = select i1 %52, float %51, float 0x43DFFFFFE0000000
  %54 = fcmp ogt float %53, 0xC3DFFFFFE0000000
  %55 = select i1 %54, float %53, float 0xC3DFFFFFE0000000
  %56 = fptosi float %55 to i64
  %57 = sext i32 %45 to i64
  %58 = shl nsw i64 %57, 16
  %59 = sub i64 %56, %58
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #3
  %60 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 1, i32 2, i32 1, i32 1
  %61 = load i32, i32* %60, align 4
  %62 = lshr i64 %59, 16
  %63 = trunc i64 %62 to i32
  %64 = and i32 %63, 65535
  %65 = mul i32 %64, %61
  %66 = lshr i32 %65, 16
  %67 = shl nuw nsw i32 %66, 4
  %68 = lshr i32 %65, 12
  %69 = and i32 %68, 15
  %70 = or i32 %67, %69
  %71 = shl i32 %70, 14
  %72 = add nsw i32 %43, %63
  %73 = and i32 %72, 65535
  %74 = mul i32 %73, %61
  %75 = lshr i32 %74, 16
  %76 = or i32 %71, %75
  store i32 %76, i32* %1, align 4
  %77 = icmp sgt i32 %2, 0
  br i1 %77, label %78, label %178

78:                                               ; preds = %42
  %79 = fcmp ogt float %49, 0xC3DFFFFFE0000000
  %80 = select i1 %79, float %49, float 0xC3DFFFFFE0000000
  %81 = fptosi float %80 to i64
  %82 = sext i32 %44 to i64
  %83 = shl nsw i64 %82, 16
  %84 = sub i64 %81, %83
  %85 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 10
  %86 = add nsw i32 %2, -1
  %87 = zext i32 %86 to i64
  %88 = add nuw nsw i64 %87, 1
  %89 = icmp ult i64 %88, 4
  br i1 %89, label %150, label %90

90:                                               ; preds = %78
  %91 = getelementptr i32, i32* %1, i64 1
  %92 = bitcast i32* %91 to i8*
  %93 = add nsw i32 %2, -1
  %94 = zext i32 %93 to i64
  %95 = add nuw nsw i64 %94, 2
  %96 = getelementptr i32, i32* %1, i64 %95
  %97 = getelementptr %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 10
  %98 = bitcast i32* %97 to i8*
  %99 = getelementptr i8, i8* %98, i64 1
  %100 = icmp ugt i8* %99, %92
  %101 = icmp ult i32* %85, %96
  %102 = and i1 %100, %101
  br i1 %102, label %150, label %103

103:                                              ; preds = %90
  %104 = and i64 %88, 8589934588
  %105 = getelementptr i32, i32* %1, i64 %104
  %106 = mul i64 %104, %10
  %107 = add i64 %84, %106
  %108 = trunc i64 %104 to i32
  %109 = sub i32 %2, %108
  %110 = insertelement <4 x i64> undef, i64 %84, i32 0
  %111 = shufflevector <4 x i64> %110, <4 x i64> undef, <4 x i32> zeroinitializer
  %112 = insertelement <4 x i64> undef, i64 %10, i32 0
  %113 = shufflevector <4 x i64> %112, <4 x i64> undef, <4 x i32> zeroinitializer
  %114 = mul <4 x i64> %113, <i64 0, i64 1, i64 2, i64 3>
  %115 = add <4 x i64> %111, %114
  %116 = shl i64 %10, 2
  %117 = insertelement <4 x i64> undef, i64 %116, i32 0
  %118 = shufflevector <4 x i64> %117, <4 x i64> undef, <4 x i32> zeroinitializer
  %119 = insertelement <4 x i32> undef, i32 %8, i32 0
  %120 = shufflevector <4 x i32> %119, <4 x i32> undef, <4 x i32> zeroinitializer
  %121 = getelementptr i32, i32* %1, i64 1
  %122 = load i32, i32* %85, align 8, !alias.scope !53
  %123 = insertelement <4 x i32> undef, i32 %122, i32 0
  %124 = shufflevector <4 x i32> %123, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %125

125:                                              ; preds = %125, %103
  %126 = phi i64 [ 0, %103 ], [ %145, %125 ]
  %127 = phi <4 x i64> [ %115, %103 ], [ %146, %125 ]
  %128 = getelementptr inbounds i32, i32* %121, i64 %126
  %129 = lshr <4 x i64> %127, <i64 16, i64 16, i64 16, i64 16>
  %130 = trunc <4 x i64> %129 to <4 x i32>
  %131 = and <4 x i32> %130, <i32 65535, i32 65535, i32 65535, i32 65535>
  %132 = mul <4 x i32> %131, %120
  %133 = lshr <4 x i32> %132, <i32 16, i32 16, i32 16, i32 16>
  %134 = shl nuw nsw <4 x i32> %133, <i32 4, i32 4, i32 4, i32 4>
  %135 = lshr <4 x i32> %132, <i32 12, i32 12, i32 12, i32 12>
  %136 = and <4 x i32> %135, <i32 15, i32 15, i32 15, i32 15>
  %137 = or <4 x i32> %134, %136
  %138 = shl <4 x i32> %137, <i32 14, i32 14, i32 14, i32 14>
  %139 = add nsw <4 x i32> %124, %130
  %140 = and <4 x i32> %139, <i32 65535, i32 65535, i32 65535, i32 65535>
  %141 = mul <4 x i32> %140, %120
  %142 = lshr <4 x i32> %141, <i32 16, i32 16, i32 16, i32 16>
  %143 = or <4 x i32> %142, %138
  %144 = bitcast i32* %128 to <4 x i32>*
  store <4 x i32> %143, <4 x i32>* %144, align 4, !alias.scope !56, !noalias !53
  %145 = add i64 %126, 4
  %146 = add <4 x i64> %127, %118
  %147 = icmp eq i64 %145, %104
  br i1 %147, label %148, label %125, !llvm.loop !58

148:                                              ; preds = %125
  %149 = icmp eq i64 %88, %104
  br i1 %149, label %178, label %150

150:                                              ; preds = %148, %90, %78
  %151 = phi i32* [ %1, %90 ], [ %1, %78 ], [ %105, %148 ]
  %152 = phi i64 [ %84, %90 ], [ %84, %78 ], [ %107, %148 ]
  %153 = phi i32 [ %2, %90 ], [ %2, %78 ], [ %109, %148 ]
  br label %154

154:                                              ; preds = %150, %154
  %155 = phi i32* [ %158, %154 ], [ %151, %150 ]
  %156 = phi i64 [ %176, %154 ], [ %152, %150 ]
  %157 = phi i32 [ %159, %154 ], [ %153, %150 ]
  %158 = getelementptr inbounds i32, i32* %155, i64 1
  %159 = add nsw i32 %157, -1
  %160 = lshr i64 %156, 16
  %161 = trunc i64 %160 to i32
  %162 = load i32, i32* %85, align 8
  %163 = and i32 %161, 65535
  %164 = mul i32 %163, %8
  %165 = lshr i32 %164, 16
  %166 = shl nuw nsw i32 %165, 4
  %167 = lshr i32 %164, 12
  %168 = and i32 %167, 15
  %169 = or i32 %166, %168
  %170 = shl i32 %169, 14
  %171 = add nsw i32 %162, %161
  %172 = and i32 %171, 65535
  %173 = mul i32 %172, %8
  %174 = lshr i32 %173, 16
  %175 = or i32 %174, %170
  store i32 %175, i32* %158, align 4
  %176 = add nsw i64 %156, %10
  %177 = icmp sgt i32 %159, 0
  br i1 %177, label %154, label %178, !llvm.loop !59

178:                                              ; preds = %154, %148, %42
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZL15nofilter_affineIXadL_ZL6repeatiiEEXadL_ZL6repeatiiEEEvRK17SkBitmapProcStatePjiii(%struct.SkBitmapProcState* dereferenceable(336), i32* nocapture, i32, i32, i32) #0 {
  %6 = alloca %struct.SkPoint, align 4
  %7 = bitcast %struct.SkPoint* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #3
  %8 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %6, i64 0, i32 0
  store float 0xFFFFFFFFE0000000, float* %8, align 4
  %9 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %6, i64 0, i32 1
  store float 0xFFFFFFFFE0000000, float* %9, align 4
  %10 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 7
  %11 = load void (%class.SkMatrix*, float, float, %struct.SkPoint*)*, void (%class.SkMatrix*, float, float, %struct.SkPoint*)** %10, align 8
  %12 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 2
  %13 = sitofp i32 %3 to float
  %14 = fadd float %13, 5.000000e-01
  %15 = sitofp i32 %4 to float
  %16 = fadd float %15, 5.000000e-01
  call void %11(%class.SkMatrix* dereferenceable(40) %12, float %14, float %16, %struct.SkPoint* nonnull %6) #3
  %17 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 6
  %18 = load i8, i8* %17, align 4, !range !2
  %19 = icmp eq i8 %18, 0
  br i1 %19, label %27, label %20

20:                                               ; preds = %5
  %21 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 10
  %22 = load i32, i32* %21, align 8
  %23 = ashr i32 %22, 1
  %24 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 11
  %25 = load i32, i32* %24, align 4
  %26 = ashr i32 %25, 1
  br label %36

27:                                               ; preds = %5
  %28 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %12, i64 0, i32 0, i64 0
  %29 = load float, float* %28, align 4
  %30 = fcmp ogt float %29, 0.000000e+00
  %31 = zext i1 %30 to i32
  %32 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 2, i32 0, i64 4
  %33 = load float, float* %32, align 4
  %34 = fcmp ogt float %33, 0.000000e+00
  %35 = zext i1 %34 to i32
  br label %36

36:                                               ; preds = %20, %27
  %37 = phi i32 [ %23, %20 ], [ %31, %27 ]
  %38 = phi i32 [ %26, %20 ], [ %35, %27 ]
  %39 = load float, float* %8, align 4
  %40 = fmul float %39, 0x41F0000000000000
  %41 = fcmp olt float %40, 0x43DFFFFFE0000000
  %42 = select i1 %41, float %40, float 0x43DFFFFFE0000000
  %43 = load float, float* %9, align 4
  %44 = fmul float %43, 0x41F0000000000000
  %45 = fcmp olt float %44, 0x43DFFFFFE0000000
  %46 = select i1 %45, float %44, float 0x43DFFFFFE0000000
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #3
  %47 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 8
  %48 = load i64, i64* %47, align 8
  %49 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 9
  %50 = load i64, i64* %49, align 8
  %51 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 1, i32 2, i32 1, i32 0
  %52 = load i32, i32* %51, align 4
  %53 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 1, i32 2, i32 1, i32 1
  %54 = load i32, i32* %53, align 4
  %55 = icmp sgt i32 %2, 0
  br i1 %55, label %56, label %153

56:                                               ; preds = %36
  %57 = fcmp ogt float %46, 0xC3DFFFFFE0000000
  %58 = select i1 %57, float %46, float 0xC3DFFFFFE0000000
  %59 = fptosi float %58 to i64
  %60 = sext i32 %38 to i64
  %61 = shl nsw i64 %60, 16
  %62 = sub i64 %59, %61
  %63 = fcmp ogt float %42, 0xC3DFFFFFE0000000
  %64 = select i1 %63, float %42, float 0xC3DFFFFFE0000000
  %65 = fptosi float %64 to i64
  %66 = sext i32 %37 to i64
  %67 = shl nsw i64 %66, 16
  %68 = sub i64 %65, %67
  %69 = add nsw i32 %2, -1
  %70 = zext i32 %69 to i64
  %71 = add nuw nsw i64 %70, 1
  %72 = icmp ult i64 %71, 4
  br i1 %72, label %127, label %73

73:                                               ; preds = %56
  %74 = and i64 %71, 8589934588
  %75 = mul i64 %74, %50
  %76 = add i64 %62, %75
  %77 = mul i64 %74, %48
  %78 = add i64 %68, %77
  %79 = getelementptr i32, i32* %1, i64 %74
  %80 = trunc i64 %74 to i32
  %81 = sub i32 %2, %80
  %82 = insertelement <4 x i64> undef, i64 %62, i32 0
  %83 = shufflevector <4 x i64> %82, <4 x i64> undef, <4 x i32> zeroinitializer
  %84 = insertelement <4 x i64> undef, i64 %50, i32 0
  %85 = shufflevector <4 x i64> %84, <4 x i64> undef, <4 x i32> zeroinitializer
  %86 = mul <4 x i64> %85, <i64 0, i64 1, i64 2, i64 3>
  %87 = add <4 x i64> %83, %86
  %88 = shl i64 %50, 2
  %89 = insertelement <4 x i64> undef, i64 %88, i32 0
  %90 = shufflevector <4 x i64> %89, <4 x i64> undef, <4 x i32> zeroinitializer
  %91 = insertelement <4 x i64> undef, i64 %68, i32 0
  %92 = shufflevector <4 x i64> %91, <4 x i64> undef, <4 x i32> zeroinitializer
  %93 = insertelement <4 x i64> undef, i64 %48, i32 0
  %94 = shufflevector <4 x i64> %93, <4 x i64> undef, <4 x i32> zeroinitializer
  %95 = mul <4 x i64> %94, <i64 0, i64 1, i64 2, i64 3>
  %96 = add <4 x i64> %92, %95
  %97 = shl i64 %48, 2
  %98 = insertelement <4 x i64> undef, i64 %97, i32 0
  %99 = shufflevector <4 x i64> %98, <4 x i64> undef, <4 x i32> zeroinitializer
  %100 = insertelement <4 x i32> undef, i32 %54, i32 0
  %101 = shufflevector <4 x i32> %100, <4 x i32> undef, <4 x i32> zeroinitializer
  %102 = insertelement <4 x i32> undef, i32 %52, i32 0
  %103 = shufflevector <4 x i32> %102, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %104

104:                                              ; preds = %104, %73
  %105 = phi i64 [ 0, %73 ], [ %121, %104 ]
  %106 = phi <4 x i64> [ %87, %73 ], [ %122, %104 ]
  %107 = phi <4 x i64> [ %96, %73 ], [ %123, %104 ]
  %108 = getelementptr i32, i32* %1, i64 %105
  %109 = lshr <4 x i64> %106, <i64 16, i64 16, i64 16, i64 16>
  %110 = trunc <4 x i64> %109 to <4 x i32>
  %111 = and <4 x i32> %110, <i32 65535, i32 65535, i32 65535, i32 65535>
  %112 = mul <4 x i32> %111, %101
  %113 = and <4 x i32> %112, <i32 -65536, i32 -65536, i32 -65536, i32 -65536>
  %114 = lshr <4 x i64> %107, <i64 16, i64 16, i64 16, i64 16>
  %115 = trunc <4 x i64> %114 to <4 x i32>
  %116 = and <4 x i32> %115, <i32 65535, i32 65535, i32 65535, i32 65535>
  %117 = mul <4 x i32> %116, %103
  %118 = lshr <4 x i32> %117, <i32 16, i32 16, i32 16, i32 16>
  %119 = or <4 x i32> %113, %118
  %120 = bitcast i32* %108 to <4 x i32>*
  store <4 x i32> %119, <4 x i32>* %120, align 4
  %121 = add i64 %105, 4
  %122 = add <4 x i64> %106, %90
  %123 = add <4 x i64> %107, %99
  %124 = icmp eq i64 %121, %74
  br i1 %124, label %125, label %104, !llvm.loop !60

125:                                              ; preds = %104
  %126 = icmp eq i64 %71, %74
  br i1 %126, label %153, label %127

127:                                              ; preds = %125, %56
  %128 = phi i64 [ %62, %56 ], [ %76, %125 ]
  %129 = phi i64 [ %68, %56 ], [ %78, %125 ]
  %130 = phi i32* [ %1, %56 ], [ %79, %125 ]
  %131 = phi i32 [ %2, %56 ], [ %81, %125 ]
  br label %132

132:                                              ; preds = %127, %132
  %133 = phi i64 [ %151, %132 ], [ %128, %127 ]
  %134 = phi i64 [ %150, %132 ], [ %129, %127 ]
  %135 = phi i32* [ %149, %132 ], [ %130, %127 ]
  %136 = phi i32 [ %137, %132 ], [ %131, %127 ]
  %137 = add nsw i32 %136, -1
  %138 = lshr i64 %133, 16
  %139 = trunc i64 %138 to i32
  %140 = and i32 %139, 65535
  %141 = mul i32 %140, %54
  %142 = and i32 %141, -65536
  %143 = lshr i64 %134, 16
  %144 = trunc i64 %143 to i32
  %145 = and i32 %144, 65535
  %146 = mul i32 %145, %52
  %147 = lshr i32 %146, 16
  %148 = or i32 %142, %147
  %149 = getelementptr inbounds i32, i32* %135, i64 1
  store i32 %148, i32* %135, align 4
  %150 = add nsw i64 %134, %48
  %151 = add nsw i64 %133, %50
  %152 = icmp sgt i32 %137, 0
  br i1 %152, label %132, label %153, !llvm.loop !61

153:                                              ; preds = %132, %125, %36
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZL13filter_affineIXadL_ZL6repeatiiEEXadL_ZL6repeatiiEEXadL_ZL24extract_low_bits_generaliiEEEvRK17SkBitmapProcStatePjiii(%struct.SkBitmapProcState* dereferenceable(336), i32* nocapture, i32, i32, i32) #0 {
  %6 = alloca %struct.SkPoint, align 4
  %7 = bitcast %struct.SkPoint* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #3
  %8 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %6, i64 0, i32 0
  store float 0xFFFFFFFFE0000000, float* %8, align 4
  %9 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %6, i64 0, i32 1
  store float 0xFFFFFFFFE0000000, float* %9, align 4
  %10 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 7
  %11 = load void (%class.SkMatrix*, float, float, %struct.SkPoint*)*, void (%class.SkMatrix*, float, float, %struct.SkPoint*)** %10, align 8
  %12 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 2
  %13 = sitofp i32 %3 to float
  %14 = fadd float %13, 5.000000e-01
  %15 = sitofp i32 %4 to float
  %16 = fadd float %15, 5.000000e-01
  call void %11(%class.SkMatrix* dereferenceable(40) %12, float %14, float %16, %struct.SkPoint* nonnull %6) #3
  %17 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 6
  %18 = load i8, i8* %17, align 4, !range !2
  %19 = icmp eq i8 %18, 0
  br i1 %19, label %27, label %20

20:                                               ; preds = %5
  %21 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 10
  %22 = load i32, i32* %21, align 8
  %23 = ashr i32 %22, 1
  %24 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 11
  %25 = load i32, i32* %24, align 4
  %26 = ashr i32 %25, 1
  br label %40

27:                                               ; preds = %5
  %28 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %12, i64 0, i32 0, i64 0
  %29 = load float, float* %28, align 4
  %30 = fcmp ogt float %29, 0.000000e+00
  %31 = zext i1 %30 to i32
  %32 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 2, i32 0, i64 4
  %33 = load float, float* %32, align 4
  %34 = fcmp ogt float %33, 0.000000e+00
  %35 = zext i1 %34 to i32
  %36 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 10
  %37 = load i32, i32* %36, align 8
  %38 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 11
  %39 = load i32, i32* %38, align 4
  br label %40

40:                                               ; preds = %20, %27
  %41 = phi i32 [ %25, %20 ], [ %39, %27 ]
  %42 = phi i32 [ %22, %20 ], [ %37, %27 ]
  %43 = phi i32 [ %23, %20 ], [ %31, %27 ]
  %44 = phi i32 [ %26, %20 ], [ %35, %27 ]
  %45 = load float, float* %8, align 4
  %46 = fmul float %45, 0x41F0000000000000
  %47 = fcmp olt float %46, 0x43DFFFFFE0000000
  %48 = select i1 %47, float %46, float 0x43DFFFFFE0000000
  %49 = load float, float* %9, align 4
  %50 = fmul float %49, 0x41F0000000000000
  %51 = fcmp olt float %50, 0x43DFFFFFE0000000
  %52 = select i1 %51, float %50, float 0x43DFFFFFE0000000
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #3
  %53 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 8
  %54 = load i64, i64* %53, align 8
  %55 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 9
  %56 = load i64, i64* %55, align 8
  %57 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 1, i32 2, i32 1, i32 0
  %58 = load i32, i32* %57, align 4
  %59 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 1, i32 2, i32 1, i32 1
  %60 = load i32, i32* %59, align 4
  %61 = icmp sgt i32 %2, 0
  br i1 %61, label %62, label %205

62:                                               ; preds = %40
  %63 = fcmp ogt float %52, 0xC3DFFFFFE0000000
  %64 = select i1 %63, float %52, float 0xC3DFFFFFE0000000
  %65 = fptosi float %64 to i64
  %66 = sext i32 %44 to i64
  %67 = shl nsw i64 %66, 16
  %68 = sub i64 %65, %67
  %69 = fcmp ogt float %48, 0xC3DFFFFFE0000000
  %70 = select i1 %69, float %48, float 0xC3DFFFFFE0000000
  %71 = fptosi float %70 to i64
  %72 = sext i32 %43 to i64
  %73 = shl nsw i64 %72, 16
  %74 = sub i64 %71, %73
  %75 = add nsw i32 %2, -1
  %76 = zext i32 %75 to i64
  %77 = add nuw nsw i64 %76, 1
  %78 = icmp ult i64 %77, 4
  br i1 %78, label %159, label %79

79:                                               ; preds = %62
  %80 = and i64 %77, 8589934588
  %81 = mul i64 %80, %56
  %82 = add i64 %68, %81
  %83 = mul i64 %80, %54
  %84 = add i64 %74, %83
  %85 = shl nuw nsw i64 %80, 1
  %86 = getelementptr i32, i32* %1, i64 %85
  %87 = trunc i64 %80 to i32
  %88 = sub i32 %2, %87
  %89 = insertelement <4 x i64> undef, i64 %68, i32 0
  %90 = shufflevector <4 x i64> %89, <4 x i64> undef, <4 x i32> zeroinitializer
  %91 = insertelement <4 x i64> undef, i64 %56, i32 0
  %92 = shufflevector <4 x i64> %91, <4 x i64> undef, <4 x i32> zeroinitializer
  %93 = mul <4 x i64> %92, <i64 0, i64 1, i64 2, i64 3>
  %94 = add <4 x i64> %90, %93
  %95 = shl i64 %56, 2
  %96 = insertelement <4 x i64> undef, i64 %95, i32 0
  %97 = shufflevector <4 x i64> %96, <4 x i64> undef, <4 x i32> zeroinitializer
  %98 = insertelement <4 x i64> undef, i64 %74, i32 0
  %99 = shufflevector <4 x i64> %98, <4 x i64> undef, <4 x i32> zeroinitializer
  %100 = insertelement <4 x i64> undef, i64 %54, i32 0
  %101 = shufflevector <4 x i64> %100, <4 x i64> undef, <4 x i32> zeroinitializer
  %102 = mul <4 x i64> %101, <i64 0, i64 1, i64 2, i64 3>
  %103 = add <4 x i64> %99, %102
  %104 = shl i64 %54, 2
  %105 = insertelement <4 x i64> undef, i64 %104, i32 0
  %106 = shufflevector <4 x i64> %105, <4 x i64> undef, <4 x i32> zeroinitializer
  %107 = insertelement <4 x i32> undef, i32 %60, i32 0
  %108 = shufflevector <4 x i32> %107, <4 x i32> undef, <4 x i32> zeroinitializer
  %109 = insertelement <4 x i32> undef, i32 %41, i32 0
  %110 = shufflevector <4 x i32> %109, <4 x i32> undef, <4 x i32> zeroinitializer
  %111 = insertelement <4 x i32> undef, i32 %58, i32 0
  %112 = shufflevector <4 x i32> %111, <4 x i32> undef, <4 x i32> zeroinitializer
  %113 = insertelement <4 x i32> undef, i32 %42, i32 0
  %114 = shufflevector <4 x i32> %113, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %115

115:                                              ; preds = %115, %79
  %116 = phi i64 [ 0, %79 ], [ %153, %115 ]
  %117 = phi <4 x i64> [ %94, %79 ], [ %154, %115 ]
  %118 = phi <4 x i64> [ %103, %79 ], [ %155, %115 ]
  %119 = shl i64 %116, 1
  %120 = lshr <4 x i64> %117, <i64 16, i64 16, i64 16, i64 16>
  %121 = trunc <4 x i64> %120 to <4 x i32>
  %122 = and <4 x i32> %121, <i32 65535, i32 65535, i32 65535, i32 65535>
  %123 = mul <4 x i32> %122, %108
  %124 = lshr <4 x i32> %123, <i32 16, i32 16, i32 16, i32 16>
  %125 = shl nuw nsw <4 x i32> %124, <i32 4, i32 4, i32 4, i32 4>
  %126 = lshr <4 x i32> %123, <i32 12, i32 12, i32 12, i32 12>
  %127 = and <4 x i32> %126, <i32 15, i32 15, i32 15, i32 15>
  %128 = or <4 x i32> %125, %127
  %129 = shl <4 x i32> %128, <i32 14, i32 14, i32 14, i32 14>
  %130 = add nsw <4 x i32> %110, %121
  %131 = and <4 x i32> %130, <i32 65535, i32 65535, i32 65535, i32 65535>
  %132 = mul <4 x i32> %131, %108
  %133 = lshr <4 x i32> %132, <i32 16, i32 16, i32 16, i32 16>
  %134 = or <4 x i32> %129, %133
  %135 = lshr <4 x i64> %118, <i64 16, i64 16, i64 16, i64 16>
  %136 = trunc <4 x i64> %135 to <4 x i32>
  %137 = and <4 x i32> %136, <i32 65535, i32 65535, i32 65535, i32 65535>
  %138 = mul <4 x i32> %137, %112
  %139 = lshr <4 x i32> %138, <i32 16, i32 16, i32 16, i32 16>
  %140 = shl nuw nsw <4 x i32> %139, <i32 4, i32 4, i32 4, i32 4>
  %141 = lshr <4 x i32> %138, <i32 12, i32 12, i32 12, i32 12>
  %142 = and <4 x i32> %141, <i32 15, i32 15, i32 15, i32 15>
  %143 = or <4 x i32> %140, %142
  %144 = shl <4 x i32> %143, <i32 14, i32 14, i32 14, i32 14>
  %145 = add nsw <4 x i32> %114, %136
  %146 = and <4 x i32> %145, <i32 65535, i32 65535, i32 65535, i32 65535>
  %147 = mul <4 x i32> %146, %112
  %148 = lshr <4 x i32> %147, <i32 16, i32 16, i32 16, i32 16>
  %149 = or <4 x i32> %144, %148
  %150 = getelementptr inbounds i32, i32* %1, i64 %119
  %151 = bitcast i32* %150 to <8 x i32>*
  %152 = shufflevector <4 x i32> %134, <4 x i32> %149, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  store <8 x i32> %152, <8 x i32>* %151, align 4
  %153 = add i64 %116, 4
  %154 = add <4 x i64> %117, %97
  %155 = add <4 x i64> %118, %106
  %156 = icmp eq i64 %153, %80
  br i1 %156, label %157, label %115, !llvm.loop !62

157:                                              ; preds = %115
  %158 = icmp eq i64 %77, %80
  br i1 %158, label %205, label %159

159:                                              ; preds = %157, %62
  %160 = phi i64 [ %68, %62 ], [ %82, %157 ]
  %161 = phi i64 [ %74, %62 ], [ %84, %157 ]
  %162 = phi i32* [ %1, %62 ], [ %86, %157 ]
  %163 = phi i32 [ %2, %62 ], [ %88, %157 ]
  br label %164

164:                                              ; preds = %159, %164
  %165 = phi i64 [ %202, %164 ], [ %160, %159 ]
  %166 = phi i64 [ %203, %164 ], [ %161, %159 ]
  %167 = phi i32* [ %201, %164 ], [ %162, %159 ]
  %168 = phi i32 [ %169, %164 ], [ %163, %159 ]
  %169 = add nsw i32 %168, -1
  %170 = lshr i64 %165, 16
  %171 = trunc i64 %170 to i32
  %172 = and i32 %171, 65535
  %173 = mul i32 %172, %60
  %174 = lshr i32 %173, 16
  %175 = shl nuw nsw i32 %174, 4
  %176 = lshr i32 %173, 12
  %177 = and i32 %176, 15
  %178 = or i32 %175, %177
  %179 = shl i32 %178, 14
  %180 = add nsw i32 %41, %171
  %181 = and i32 %180, 65535
  %182 = mul i32 %181, %60
  %183 = lshr i32 %182, 16
  %184 = or i32 %179, %183
  %185 = getelementptr inbounds i32, i32* %167, i64 1
  store i32 %184, i32* %167, align 4
  %186 = lshr i64 %166, 16
  %187 = trunc i64 %186 to i32
  %188 = and i32 %187, 65535
  %189 = mul i32 %188, %58
  %190 = lshr i32 %189, 16
  %191 = shl nuw nsw i32 %190, 4
  %192 = lshr i32 %189, 12
  %193 = and i32 %192, 15
  %194 = or i32 %191, %193
  %195 = shl i32 %194, 14
  %196 = add nsw i32 %42, %187
  %197 = and i32 %196, 65535
  %198 = mul i32 %197, %58
  %199 = lshr i32 %198, 16
  %200 = or i32 %195, %199
  %201 = getelementptr inbounds i32, i32* %167, i64 2
  store i32 %200, i32* %185, align 4
  %202 = add nsw i64 %165, %56
  %203 = add nsw i64 %166, %54
  %204 = icmp sgt i32 %169, 0
  br i1 %204, label %164, label %205, !llvm.loop !63

205:                                              ; preds = %164, %157, %40
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZL14nofilter_scaleIXadL_ZL6mirroriiEEXadL_ZL6mirroriiEELb0EEvRK17SkBitmapProcStatePjiii(%struct.SkBitmapProcState* dereferenceable(336), i32* nocapture, i32, i32, i32) #0 {
  %6 = alloca %struct.SkPoint, align 4
  %7 = bitcast %struct.SkPoint* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #3
  %8 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %6, i64 0, i32 0
  store float 0xFFFFFFFFE0000000, float* %8, align 4
  %9 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %6, i64 0, i32 1
  store float 0xFFFFFFFFE0000000, float* %9, align 4
  %10 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 7
  %11 = load void (%class.SkMatrix*, float, float, %struct.SkPoint*)*, void (%class.SkMatrix*, float, float, %struct.SkPoint*)** %10, align 8
  %12 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 2
  %13 = sitofp i32 %3 to float
  %14 = fadd float %13, 5.000000e-01
  %15 = sitofp i32 %4 to float
  %16 = fadd float %15, 5.000000e-01
  call void %11(%class.SkMatrix* dereferenceable(40) %12, float %14, float %16, %struct.SkPoint* nonnull %6) #3
  %17 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 6
  %18 = load i8, i8* %17, align 4, !range !2
  %19 = icmp eq i8 %18, 0
  br i1 %19, label %27, label %20

20:                                               ; preds = %5
  %21 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 10
  %22 = load i32, i32* %21, align 8
  %23 = ashr i32 %22, 1
  %24 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 11
  %25 = load i32, i32* %24, align 4
  %26 = ashr i32 %25, 1
  br label %36

27:                                               ; preds = %5
  %28 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %12, i64 0, i32 0, i64 0
  %29 = load float, float* %28, align 4
  %30 = fcmp ogt float %29, 0.000000e+00
  %31 = zext i1 %30 to i32
  %32 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 2, i32 0, i64 4
  %33 = load float, float* %32, align 4
  %34 = fcmp ogt float %33, 0.000000e+00
  %35 = zext i1 %34 to i32
  br label %36

36:                                               ; preds = %20, %27
  %37 = phi i32 [ %23, %20 ], [ %31, %27 ]
  %38 = phi i32 [ %26, %20 ], [ %35, %27 ]
  %39 = load float, float* %8, align 4
  %40 = fmul float %39, 0x41F0000000000000
  %41 = fcmp olt float %40, 0x43DFFFFFE0000000
  %42 = select i1 %41, float %40, float 0x43DFFFFFE0000000
  %43 = load float, float* %9, align 4
  %44 = fmul float %43, 0x41F0000000000000
  %45 = fcmp olt float %44, 0x43DFFFFFE0000000
  %46 = select i1 %45, float %44, float 0x43DFFFFFE0000000
  %47 = fcmp ogt float %46, 0xC3DFFFFFE0000000
  %48 = select i1 %47, float %46, float 0xC3DFFFFFE0000000
  %49 = fptosi float %48 to i64
  %50 = sext i32 %38 to i64
  %51 = shl nsw i64 %50, 16
  %52 = sub i64 %49, %51
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #3
  %53 = lshr i64 %52, 16
  %54 = trunc i64 %53 to i32
  %55 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 1, i32 2, i32 1, i32 1
  %56 = load i32, i32* %55, align 4
  %57 = shl nuw nsw i64 %53, 15
  %58 = trunc i64 %57 to i32
  %59 = ashr i32 %58, 31
  %60 = xor i32 %59, %54
  %61 = and i32 %60, 65535
  %62 = mul nsw i32 %61, %56
  %63 = lshr i32 %62, 16
  %64 = getelementptr inbounds i32, i32* %1, i64 1
  store i32 %63, i32* %1, align 4
  %65 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 1, i32 2, i32 1, i32 0
  %66 = load i32, i32* %65, align 4
  %67 = icmp eq i32 %66, 1
  br i1 %67, label %68, label %72

68:                                               ; preds = %36
  %69 = bitcast i32* %64 to i8*
  %70 = sext i32 %2 to i64
  %71 = shl nsw i64 %70, 1
  call void @llvm.memset.p0i8.i64(i8* align 4 %69, i8 0, i64 %71, i1 false)
  br label %193

72:                                               ; preds = %36
  %73 = fcmp ogt float %42, 0xC3DFFFFFE0000000
  %74 = select i1 %73, float %42, float 0xC3DFFFFFE0000000
  %75 = fptosi float %74 to i64
  %76 = sext i32 %37 to i64
  %77 = shl nsw i64 %76, 16
  %78 = sub i64 %75, %77
  %79 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 8
  %80 = load i64, i64* %79, align 8
  %81 = icmp sgt i32 %2, 1
  br i1 %81, label %82, label %176

82:                                               ; preds = %72
  %83 = shl i64 %80, 1
  %84 = add nsw i32 %2, -2
  %85 = lshr i32 %84, 1
  %86 = add nuw i32 %85, 1
  %87 = zext i32 %86 to i64
  %88 = icmp ult i32 %86, 4
  br i1 %88, label %140, label %89

89:                                               ; preds = %82
  %90 = and i64 %87, 4294967292
  %91 = mul i64 %90, %83
  %92 = add i64 %78, %91
  %93 = getelementptr i32, i32* %64, i64 %90
  %94 = trunc i64 %90 to i32
  %95 = mul i32 %94, -2
  %96 = add i32 %95, %2
  %97 = insertelement <4 x i64> undef, i64 %78, i32 0
  %98 = shufflevector <4 x i64> %97, <4 x i64> undef, <4 x i32> zeroinitializer
  %99 = insertelement <4 x i64> undef, i64 %83, i32 0
  %100 = shufflevector <4 x i64> %99, <4 x i64> undef, <4 x i32> zeroinitializer
  %101 = mul <4 x i64> %100, <i64 0, i64 1, i64 2, i64 3>
  %102 = add <4 x i64> %98, %101
  %103 = shl i64 %80, 3
  %104 = insertelement <4 x i64> undef, i64 %103, i32 0
  %105 = shufflevector <4 x i64> %104, <4 x i64> undef, <4 x i32> zeroinitializer
  %106 = insertelement <4 x i32> undef, i32 %66, i32 0
  %107 = shufflevector <4 x i32> %106, <4 x i32> undef, <4 x i32> zeroinitializer
  %108 = insertelement <4 x i64> undef, i64 %80, i32 0
  %109 = shufflevector <4 x i64> %108, <4 x i64> undef, <4 x i32> zeroinitializer
  br label %110

110:                                              ; preds = %110, %89
  %111 = phi i64 [ 0, %89 ], [ %135, %110 ]
  %112 = phi <4 x i64> [ %102, %89 ], [ %136, %110 ]
  %113 = getelementptr i32, i32* %64, i64 %111
  %114 = lshr <4 x i64> %112, <i64 16, i64 16, i64 16, i64 16>
  %115 = trunc <4 x i64> %114 to <4 x i32>
  %116 = shl nuw nsw <4 x i64> %114, <i64 15, i64 15, i64 15, i64 15>
  %117 = trunc <4 x i64> %116 to <4 x i32>
  %118 = ashr <4 x i32> %117, <i32 31, i32 31, i32 31, i32 31>
  %119 = xor <4 x i32> %118, %115
  %120 = and <4 x i32> %119, <i32 65535, i32 65535, i32 65535, i32 65535>
  %121 = mul nsw <4 x i32> %120, %107
  %122 = lshr <4 x i32> %121, <i32 16, i32 16, i32 16, i32 16>
  %123 = add nsw <4 x i64> %112, %109
  %124 = lshr <4 x i64> %123, <i64 16, i64 16, i64 16, i64 16>
  %125 = trunc <4 x i64> %124 to <4 x i32>
  %126 = shl nuw nsw <4 x i64> %124, <i64 15, i64 15, i64 15, i64 15>
  %127 = trunc <4 x i64> %126 to <4 x i32>
  %128 = ashr <4 x i32> %127, <i32 31, i32 31, i32 31, i32 31>
  %129 = xor <4 x i32> %128, %125
  %130 = and <4 x i32> %129, <i32 65535, i32 65535, i32 65535, i32 65535>
  %131 = mul nsw <4 x i32> %130, %107
  %132 = and <4 x i32> %131, <i32 -65536, i32 -65536, i32 -65536, i32 -65536>
  %133 = or <4 x i32> %132, %122
  %134 = bitcast i32* %113 to <4 x i32>*
  store <4 x i32> %133, <4 x i32>* %134, align 4
  %135 = add i64 %111, 4
  %136 = add <4 x i64> %112, %105
  %137 = icmp eq i64 %135, %90
  br i1 %137, label %138, label %110, !llvm.loop !64

138:                                              ; preds = %110
  %139 = icmp eq i64 %90, %87
  br i1 %139, label %172, label %140

140:                                              ; preds = %138, %82
  %141 = phi i64 [ %78, %82 ], [ %92, %138 ]
  %142 = phi i32* [ %64, %82 ], [ %93, %138 ]
  %143 = phi i32 [ %2, %82 ], [ %96, %138 ]
  br label %144

144:                                              ; preds = %140, %144
  %145 = phi i64 [ %169, %144 ], [ %141, %140 ]
  %146 = phi i32* [ %168, %144 ], [ %142, %140 ]
  %147 = phi i32 [ %170, %144 ], [ %143, %140 ]
  %148 = lshr i64 %145, 16
  %149 = trunc i64 %148 to i32
  %150 = shl nuw nsw i64 %148, 15
  %151 = trunc i64 %150 to i32
  %152 = ashr i32 %151, 31
  %153 = xor i32 %152, %149
  %154 = and i32 %153, 65535
  %155 = mul nsw i32 %154, %66
  %156 = lshr i32 %155, 16
  %157 = add nsw i64 %145, %80
  %158 = lshr i64 %157, 16
  %159 = trunc i64 %158 to i32
  %160 = shl nuw nsw i64 %158, 15
  %161 = trunc i64 %160 to i32
  %162 = ashr i32 %161, 31
  %163 = xor i32 %162, %159
  %164 = and i32 %163, 65535
  %165 = mul nsw i32 %164, %66
  %166 = and i32 %165, -65536
  %167 = or i32 %166, %156
  %168 = getelementptr inbounds i32, i32* %146, i64 1
  store i32 %167, i32* %146, align 4
  %169 = add nsw i64 %145, %83
  %170 = add nsw i32 %147, -2
  %171 = icmp sgt i32 %170, 1
  br i1 %171, label %144, label %172, !llvm.loop !65

172:                                              ; preds = %144, %138
  %173 = phi i32* [ %93, %138 ], [ %168, %144 ]
  %174 = phi i64 [ %92, %138 ], [ %169, %144 ]
  %175 = and i32 %2, 1
  br label %176

176:                                              ; preds = %172, %72
  %177 = phi i32 [ %2, %72 ], [ %175, %172 ]
  %178 = phi i32* [ %64, %72 ], [ %173, %172 ]
  %179 = phi i64 [ %78, %72 ], [ %174, %172 ]
  %180 = icmp sgt i32 %177, 0
  br i1 %180, label %181, label %193

181:                                              ; preds = %176
  %182 = bitcast i32* %178 to i16*
  %183 = lshr i64 %179, 16
  %184 = trunc i64 %183 to i32
  %185 = shl nuw nsw i64 %183, 15
  %186 = trunc i64 %185 to i32
  %187 = ashr i32 %186, 31
  %188 = xor i32 %187, %184
  %189 = and i32 %188, 65535
  %190 = mul nsw i32 %189, %66
  %191 = lshr i32 %190, 16
  %192 = trunc i32 %191 to i16
  store i16 %192, i16* %182, align 2
  br label %193

193:                                              ; preds = %181, %176, %68
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZL12filter_scaleIXadL_ZL6mirroriiEEXadL_ZL6mirroriiEEXadL_ZL24extract_low_bits_generaliiEELb0EEvRK17SkBitmapProcStatePjiii(%struct.SkBitmapProcState* dereferenceable(336), i32* nocapture, i32, i32, i32) #0 {
  %6 = alloca %struct.SkPoint, align 4
  %7 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 1, i32 2, i32 1, i32 0
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 8
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %struct.SkPoint* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11) #3
  %12 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %6, i64 0, i32 0
  store float 0xFFFFFFFFE0000000, float* %12, align 4
  %13 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %6, i64 0, i32 1
  store float 0xFFFFFFFFE0000000, float* %13, align 4
  %14 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 7
  %15 = load void (%class.SkMatrix*, float, float, %struct.SkPoint*)*, void (%class.SkMatrix*, float, float, %struct.SkPoint*)** %14, align 8
  %16 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 2
  %17 = sitofp i32 %3 to float
  %18 = fadd float %17, 5.000000e-01
  %19 = sitofp i32 %4 to float
  %20 = fadd float %19, 5.000000e-01
  call void %15(%class.SkMatrix* dereferenceable(40) %16, float %18, float %20, %struct.SkPoint* nonnull %6) #3
  %21 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 6
  %22 = load i8, i8* %21, align 4, !range !2
  %23 = icmp eq i8 %22, 0
  br i1 %23, label %31, label %24

24:                                               ; preds = %5
  %25 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 10
  %26 = load i32, i32* %25, align 8
  %27 = ashr i32 %26, 1
  %28 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 11
  %29 = load i32, i32* %28, align 4
  %30 = ashr i32 %29, 1
  br label %42

31:                                               ; preds = %5
  %32 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %16, i64 0, i32 0, i64 0
  %33 = load float, float* %32, align 4
  %34 = fcmp ogt float %33, 0.000000e+00
  %35 = zext i1 %34 to i32
  %36 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 2, i32 0, i64 4
  %37 = load float, float* %36, align 4
  %38 = fcmp ogt float %37, 0.000000e+00
  %39 = zext i1 %38 to i32
  %40 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 11
  %41 = load i32, i32* %40, align 4
  br label %42

42:                                               ; preds = %24, %31
  %43 = phi i32 [ %29, %24 ], [ %41, %31 ]
  %44 = phi i32 [ %27, %24 ], [ %35, %31 ]
  %45 = phi i32 [ %30, %24 ], [ %39, %31 ]
  %46 = load float, float* %12, align 4
  %47 = fmul float %46, 0x41F0000000000000
  %48 = fcmp olt float %47, 0x43DFFFFFE0000000
  %49 = select i1 %48, float %47, float 0x43DFFFFFE0000000
  %50 = load float, float* %13, align 4
  %51 = fmul float %50, 0x41F0000000000000
  %52 = fcmp olt float %51, 0x43DFFFFFE0000000
  %53 = select i1 %52, float %51, float 0x43DFFFFFE0000000
  %54 = fcmp ogt float %53, 0xC3DFFFFFE0000000
  %55 = select i1 %54, float %53, float 0xC3DFFFFFE0000000
  %56 = fptosi float %55 to i64
  %57 = sext i32 %45 to i64
  %58 = shl nsw i64 %57, 16
  %59 = sub i64 %56, %58
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #3
  %60 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 1, i32 2, i32 1, i32 1
  %61 = load i32, i32* %60, align 4
  %62 = lshr i64 %59, 16
  %63 = trunc i64 %62 to i32
  %64 = shl nuw nsw i64 %62, 15
  %65 = trunc i64 %64 to i32
  %66 = ashr i32 %65, 31
  %67 = xor i32 %66, %63
  %68 = and i32 %67, 65535
  %69 = mul nsw i32 %68, %61
  %70 = lshr i32 %69, 16
  %71 = shl nuw nsw i32 %70, 4
  %72 = and i32 %63, 65535
  %73 = mul nsw i32 %72, %61
  %74 = lshr i32 %73, 12
  %75 = and i32 %74, 15
  %76 = or i32 %71, %75
  %77 = shl i32 %76, 14
  %78 = add nsw i32 %43, %63
  %79 = shl i32 %78, 15
  %80 = ashr i32 %79, 31
  %81 = xor i32 %80, %78
  %82 = and i32 %81, 65535
  %83 = mul nsw i32 %82, %61
  %84 = lshr i32 %83, 16
  %85 = or i32 %77, %84
  store i32 %85, i32* %1, align 4
  %86 = icmp sgt i32 %2, 0
  br i1 %86, label %87, label %205

87:                                               ; preds = %42
  %88 = fcmp ogt float %49, 0xC3DFFFFFE0000000
  %89 = select i1 %88, float %49, float 0xC3DFFFFFE0000000
  %90 = fptosi float %89 to i64
  %91 = sext i32 %44 to i64
  %92 = shl nsw i64 %91, 16
  %93 = sub i64 %90, %92
  %94 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 10
  %95 = add nsw i32 %2, -1
  %96 = zext i32 %95 to i64
  %97 = add nuw nsw i64 %96, 1
  %98 = icmp ult i64 %97, 4
  br i1 %98, label %168, label %99

99:                                               ; preds = %87
  %100 = getelementptr i32, i32* %1, i64 1
  %101 = bitcast i32* %100 to i8*
  %102 = add nsw i32 %2, -1
  %103 = zext i32 %102 to i64
  %104 = add nuw nsw i64 %103, 2
  %105 = getelementptr i32, i32* %1, i64 %104
  %106 = getelementptr %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 10
  %107 = bitcast i32* %106 to i8*
  %108 = getelementptr i8, i8* %107, i64 1
  %109 = icmp ugt i8* %108, %101
  %110 = icmp ult i32* %94, %105
  %111 = and i1 %109, %110
  br i1 %111, label %168, label %112

112:                                              ; preds = %99
  %113 = and i64 %97, 8589934588
  %114 = getelementptr i32, i32* %1, i64 %113
  %115 = mul i64 %113, %10
  %116 = add i64 %93, %115
  %117 = trunc i64 %113 to i32
  %118 = sub i32 %2, %117
  %119 = insertelement <4 x i64> undef, i64 %93, i32 0
  %120 = shufflevector <4 x i64> %119, <4 x i64> undef, <4 x i32> zeroinitializer
  %121 = insertelement <4 x i64> undef, i64 %10, i32 0
  %122 = shufflevector <4 x i64> %121, <4 x i64> undef, <4 x i32> zeroinitializer
  %123 = mul <4 x i64> %122, <i64 0, i64 1, i64 2, i64 3>
  %124 = add <4 x i64> %120, %123
  %125 = shl i64 %10, 2
  %126 = insertelement <4 x i64> undef, i64 %125, i32 0
  %127 = shufflevector <4 x i64> %126, <4 x i64> undef, <4 x i32> zeroinitializer
  %128 = insertelement <4 x i32> undef, i32 %8, i32 0
  %129 = shufflevector <4 x i32> %128, <4 x i32> undef, <4 x i32> zeroinitializer
  %130 = getelementptr i32, i32* %1, i64 1
  %131 = load i32, i32* %94, align 8, !alias.scope !66
  %132 = insertelement <4 x i32> undef, i32 %131, i32 0
  %133 = shufflevector <4 x i32> %132, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %134

134:                                              ; preds = %134, %112
  %135 = phi i64 [ 0, %112 ], [ %163, %134 ]
  %136 = phi <4 x i64> [ %124, %112 ], [ %164, %134 ]
  %137 = getelementptr inbounds i32, i32* %130, i64 %135
  %138 = lshr <4 x i64> %136, <i64 16, i64 16, i64 16, i64 16>
  %139 = trunc <4 x i64> %138 to <4 x i32>
  %140 = shl nuw nsw <4 x i64> %138, <i64 15, i64 15, i64 15, i64 15>
  %141 = trunc <4 x i64> %140 to <4 x i32>
  %142 = ashr <4 x i32> %141, <i32 31, i32 31, i32 31, i32 31>
  %143 = xor <4 x i32> %142, %139
  %144 = and <4 x i32> %143, <i32 65535, i32 65535, i32 65535, i32 65535>
  %145 = mul nsw <4 x i32> %144, %129
  %146 = lshr <4 x i32> %145, <i32 16, i32 16, i32 16, i32 16>
  %147 = shl nuw nsw <4 x i32> %146, <i32 4, i32 4, i32 4, i32 4>
  %148 = and <4 x i32> %139, <i32 65535, i32 65535, i32 65535, i32 65535>
  %149 = mul nsw <4 x i32> %148, %129
  %150 = lshr <4 x i32> %149, <i32 12, i32 12, i32 12, i32 12>
  %151 = and <4 x i32> %150, <i32 15, i32 15, i32 15, i32 15>
  %152 = or <4 x i32> %147, %151
  %153 = shl <4 x i32> %152, <i32 14, i32 14, i32 14, i32 14>
  %154 = add nsw <4 x i32> %133, %139
  %155 = shl <4 x i32> %154, <i32 15, i32 15, i32 15, i32 15>
  %156 = ashr <4 x i32> %155, <i32 31, i32 31, i32 31, i32 31>
  %157 = xor <4 x i32> %156, %154
  %158 = and <4 x i32> %157, <i32 65535, i32 65535, i32 65535, i32 65535>
  %159 = mul nsw <4 x i32> %158, %129
  %160 = lshr <4 x i32> %159, <i32 16, i32 16, i32 16, i32 16>
  %161 = or <4 x i32> %160, %153
  %162 = bitcast i32* %137 to <4 x i32>*
  store <4 x i32> %161, <4 x i32>* %162, align 4, !alias.scope !69, !noalias !66
  %163 = add i64 %135, 4
  %164 = add <4 x i64> %136, %127
  %165 = icmp eq i64 %163, %113
  br i1 %165, label %166, label %134, !llvm.loop !71

166:                                              ; preds = %134
  %167 = icmp eq i64 %97, %113
  br i1 %167, label %205, label %168

168:                                              ; preds = %166, %99, %87
  %169 = phi i32* [ %1, %99 ], [ %1, %87 ], [ %114, %166 ]
  %170 = phi i64 [ %93, %99 ], [ %93, %87 ], [ %116, %166 ]
  %171 = phi i32 [ %2, %99 ], [ %2, %87 ], [ %118, %166 ]
  br label %172

172:                                              ; preds = %168, %172
  %173 = phi i32* [ %176, %172 ], [ %169, %168 ]
  %174 = phi i64 [ %203, %172 ], [ %170, %168 ]
  %175 = phi i32 [ %177, %172 ], [ %171, %168 ]
  %176 = getelementptr inbounds i32, i32* %173, i64 1
  %177 = add nsw i32 %175, -1
  %178 = lshr i64 %174, 16
  %179 = trunc i64 %178 to i32
  %180 = load i32, i32* %94, align 8
  %181 = shl nuw nsw i64 %178, 15
  %182 = trunc i64 %181 to i32
  %183 = ashr i32 %182, 31
  %184 = xor i32 %183, %179
  %185 = and i32 %184, 65535
  %186 = mul nsw i32 %185, %8
  %187 = lshr i32 %186, 16
  %188 = shl nuw nsw i32 %187, 4
  %189 = and i32 %179, 65535
  %190 = mul nsw i32 %189, %8
  %191 = lshr i32 %190, 12
  %192 = and i32 %191, 15
  %193 = or i32 %188, %192
  %194 = shl i32 %193, 14
  %195 = add nsw i32 %180, %179
  %196 = shl i32 %195, 15
  %197 = ashr i32 %196, 31
  %198 = xor i32 %197, %195
  %199 = and i32 %198, 65535
  %200 = mul nsw i32 %199, %8
  %201 = lshr i32 %200, 16
  %202 = or i32 %201, %194
  store i32 %202, i32* %176, align 4
  %203 = add nsw i64 %174, %10
  %204 = icmp sgt i32 %177, 0
  br i1 %204, label %172, label %205, !llvm.loop !72

205:                                              ; preds = %172, %166, %42
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZL15nofilter_affineIXadL_ZL6mirroriiEEXadL_ZL6mirroriiEEEvRK17SkBitmapProcStatePjiii(%struct.SkBitmapProcState* dereferenceable(336), i32* nocapture, i32, i32, i32) #0 {
  %6 = alloca %struct.SkPoint, align 4
  %7 = bitcast %struct.SkPoint* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #3
  %8 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %6, i64 0, i32 0
  store float 0xFFFFFFFFE0000000, float* %8, align 4
  %9 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %6, i64 0, i32 1
  store float 0xFFFFFFFFE0000000, float* %9, align 4
  %10 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 7
  %11 = load void (%class.SkMatrix*, float, float, %struct.SkPoint*)*, void (%class.SkMatrix*, float, float, %struct.SkPoint*)** %10, align 8
  %12 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 2
  %13 = sitofp i32 %3 to float
  %14 = fadd float %13, 5.000000e-01
  %15 = sitofp i32 %4 to float
  %16 = fadd float %15, 5.000000e-01
  call void %11(%class.SkMatrix* dereferenceable(40) %12, float %14, float %16, %struct.SkPoint* nonnull %6) #3
  %17 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 6
  %18 = load i8, i8* %17, align 4, !range !2
  %19 = icmp eq i8 %18, 0
  br i1 %19, label %27, label %20

20:                                               ; preds = %5
  %21 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 10
  %22 = load i32, i32* %21, align 8
  %23 = ashr i32 %22, 1
  %24 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 11
  %25 = load i32, i32* %24, align 4
  %26 = ashr i32 %25, 1
  br label %36

27:                                               ; preds = %5
  %28 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %12, i64 0, i32 0, i64 0
  %29 = load float, float* %28, align 4
  %30 = fcmp ogt float %29, 0.000000e+00
  %31 = zext i1 %30 to i32
  %32 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 2, i32 0, i64 4
  %33 = load float, float* %32, align 4
  %34 = fcmp ogt float %33, 0.000000e+00
  %35 = zext i1 %34 to i32
  br label %36

36:                                               ; preds = %20, %27
  %37 = phi i32 [ %23, %20 ], [ %31, %27 ]
  %38 = phi i32 [ %26, %20 ], [ %35, %27 ]
  %39 = load float, float* %8, align 4
  %40 = fmul float %39, 0x41F0000000000000
  %41 = fcmp olt float %40, 0x43DFFFFFE0000000
  %42 = select i1 %41, float %40, float 0x43DFFFFFE0000000
  %43 = load float, float* %9, align 4
  %44 = fmul float %43, 0x41F0000000000000
  %45 = fcmp olt float %44, 0x43DFFFFFE0000000
  %46 = select i1 %45, float %44, float 0x43DFFFFFE0000000
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #3
  %47 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 8
  %48 = load i64, i64* %47, align 8
  %49 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 9
  %50 = load i64, i64* %49, align 8
  %51 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 1, i32 2, i32 1, i32 0
  %52 = load i32, i32* %51, align 4
  %53 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 1, i32 2, i32 1, i32 1
  %54 = load i32, i32* %53, align 4
  %55 = icmp sgt i32 %2, 0
  br i1 %55, label %56, label %169

56:                                               ; preds = %36
  %57 = fcmp ogt float %46, 0xC3DFFFFFE0000000
  %58 = select i1 %57, float %46, float 0xC3DFFFFFE0000000
  %59 = fptosi float %58 to i64
  %60 = sext i32 %38 to i64
  %61 = shl nsw i64 %60, 16
  %62 = sub i64 %59, %61
  %63 = fcmp ogt float %42, 0xC3DFFFFFE0000000
  %64 = select i1 %63, float %42, float 0xC3DFFFFFE0000000
  %65 = fptosi float %64 to i64
  %66 = sext i32 %37 to i64
  %67 = shl nsw i64 %66, 16
  %68 = sub i64 %65, %67
  %69 = add nsw i32 %2, -1
  %70 = zext i32 %69 to i64
  %71 = add nuw nsw i64 %70, 1
  %72 = icmp ult i64 %71, 4
  br i1 %72, label %135, label %73

73:                                               ; preds = %56
  %74 = and i64 %71, 8589934588
  %75 = mul i64 %74, %50
  %76 = add i64 %62, %75
  %77 = mul i64 %74, %48
  %78 = add i64 %68, %77
  %79 = getelementptr i32, i32* %1, i64 %74
  %80 = trunc i64 %74 to i32
  %81 = sub i32 %2, %80
  %82 = insertelement <4 x i64> undef, i64 %62, i32 0
  %83 = shufflevector <4 x i64> %82, <4 x i64> undef, <4 x i32> zeroinitializer
  %84 = insertelement <4 x i64> undef, i64 %50, i32 0
  %85 = shufflevector <4 x i64> %84, <4 x i64> undef, <4 x i32> zeroinitializer
  %86 = mul <4 x i64> %85, <i64 0, i64 1, i64 2, i64 3>
  %87 = add <4 x i64> %83, %86
  %88 = shl i64 %50, 2
  %89 = insertelement <4 x i64> undef, i64 %88, i32 0
  %90 = shufflevector <4 x i64> %89, <4 x i64> undef, <4 x i32> zeroinitializer
  %91 = insertelement <4 x i64> undef, i64 %68, i32 0
  %92 = shufflevector <4 x i64> %91, <4 x i64> undef, <4 x i32> zeroinitializer
  %93 = insertelement <4 x i64> undef, i64 %48, i32 0
  %94 = shufflevector <4 x i64> %93, <4 x i64> undef, <4 x i32> zeroinitializer
  %95 = mul <4 x i64> %94, <i64 0, i64 1, i64 2, i64 3>
  %96 = add <4 x i64> %92, %95
  %97 = shl i64 %48, 2
  %98 = insertelement <4 x i64> undef, i64 %97, i32 0
  %99 = shufflevector <4 x i64> %98, <4 x i64> undef, <4 x i32> zeroinitializer
  %100 = insertelement <4 x i32> undef, i32 %54, i32 0
  %101 = shufflevector <4 x i32> %100, <4 x i32> undef, <4 x i32> zeroinitializer
  %102 = insertelement <4 x i32> undef, i32 %52, i32 0
  %103 = shufflevector <4 x i32> %102, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %104

104:                                              ; preds = %104, %73
  %105 = phi i64 [ 0, %73 ], [ %129, %104 ]
  %106 = phi <4 x i64> [ %87, %73 ], [ %130, %104 ]
  %107 = phi <4 x i64> [ %96, %73 ], [ %131, %104 ]
  %108 = getelementptr i32, i32* %1, i64 %105
  %109 = lshr <4 x i64> %106, <i64 16, i64 16, i64 16, i64 16>
  %110 = trunc <4 x i64> %109 to <4 x i32>
  %111 = shl nuw nsw <4 x i64> %109, <i64 15, i64 15, i64 15, i64 15>
  %112 = trunc <4 x i64> %111 to <4 x i32>
  %113 = ashr <4 x i32> %112, <i32 31, i32 31, i32 31, i32 31>
  %114 = xor <4 x i32> %113, %110
  %115 = and <4 x i32> %114, <i32 65535, i32 65535, i32 65535, i32 65535>
  %116 = mul nsw <4 x i32> %115, %101
  %117 = and <4 x i32> %116, <i32 -65536, i32 -65536, i32 -65536, i32 -65536>
  %118 = lshr <4 x i64> %107, <i64 16, i64 16, i64 16, i64 16>
  %119 = trunc <4 x i64> %118 to <4 x i32>
  %120 = shl nuw nsw <4 x i64> %118, <i64 15, i64 15, i64 15, i64 15>
  %121 = trunc <4 x i64> %120 to <4 x i32>
  %122 = ashr <4 x i32> %121, <i32 31, i32 31, i32 31, i32 31>
  %123 = xor <4 x i32> %122, %119
  %124 = and <4 x i32> %123, <i32 65535, i32 65535, i32 65535, i32 65535>
  %125 = mul nsw <4 x i32> %124, %103
  %126 = lshr <4 x i32> %125, <i32 16, i32 16, i32 16, i32 16>
  %127 = or <4 x i32> %117, %126
  %128 = bitcast i32* %108 to <4 x i32>*
  store <4 x i32> %127, <4 x i32>* %128, align 4
  %129 = add i64 %105, 4
  %130 = add <4 x i64> %106, %90
  %131 = add <4 x i64> %107, %99
  %132 = icmp eq i64 %129, %74
  br i1 %132, label %133, label %104, !llvm.loop !73

133:                                              ; preds = %104
  %134 = icmp eq i64 %71, %74
  br i1 %134, label %169, label %135

135:                                              ; preds = %133, %56
  %136 = phi i64 [ %62, %56 ], [ %76, %133 ]
  %137 = phi i64 [ %68, %56 ], [ %78, %133 ]
  %138 = phi i32* [ %1, %56 ], [ %79, %133 ]
  %139 = phi i32 [ %2, %56 ], [ %81, %133 ]
  br label %140

140:                                              ; preds = %135, %140
  %141 = phi i64 [ %167, %140 ], [ %136, %135 ]
  %142 = phi i64 [ %166, %140 ], [ %137, %135 ]
  %143 = phi i32* [ %165, %140 ], [ %138, %135 ]
  %144 = phi i32 [ %145, %140 ], [ %139, %135 ]
  %145 = add nsw i32 %144, -1
  %146 = lshr i64 %141, 16
  %147 = trunc i64 %146 to i32
  %148 = shl nuw nsw i64 %146, 15
  %149 = trunc i64 %148 to i32
  %150 = ashr i32 %149, 31
  %151 = xor i32 %150, %147
  %152 = and i32 %151, 65535
  %153 = mul nsw i32 %152, %54
  %154 = and i32 %153, -65536
  %155 = lshr i64 %142, 16
  %156 = trunc i64 %155 to i32
  %157 = shl nuw nsw i64 %155, 15
  %158 = trunc i64 %157 to i32
  %159 = ashr i32 %158, 31
  %160 = xor i32 %159, %156
  %161 = and i32 %160, 65535
  %162 = mul nsw i32 %161, %52
  %163 = lshr i32 %162, 16
  %164 = or i32 %154, %163
  %165 = getelementptr inbounds i32, i32* %143, i64 1
  store i32 %164, i32* %143, align 4
  %166 = add nsw i64 %142, %48
  %167 = add nsw i64 %141, %50
  %168 = icmp sgt i32 %145, 0
  br i1 %168, label %140, label %169, !llvm.loop !74

169:                                              ; preds = %140, %133, %36
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZL13filter_affineIXadL_ZL6mirroriiEEXadL_ZL6mirroriiEEXadL_ZL24extract_low_bits_generaliiEEEvRK17SkBitmapProcStatePjiii(%struct.SkBitmapProcState* dereferenceable(336), i32* nocapture, i32, i32, i32) #0 {
  %6 = alloca %struct.SkPoint, align 4
  %7 = bitcast %struct.SkPoint* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #3
  %8 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %6, i64 0, i32 0
  store float 0xFFFFFFFFE0000000, float* %8, align 4
  %9 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %6, i64 0, i32 1
  store float 0xFFFFFFFFE0000000, float* %9, align 4
  %10 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 7
  %11 = load void (%class.SkMatrix*, float, float, %struct.SkPoint*)*, void (%class.SkMatrix*, float, float, %struct.SkPoint*)** %10, align 8
  %12 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 2
  %13 = sitofp i32 %3 to float
  %14 = fadd float %13, 5.000000e-01
  %15 = sitofp i32 %4 to float
  %16 = fadd float %15, 5.000000e-01
  call void %11(%class.SkMatrix* dereferenceable(40) %12, float %14, float %16, %struct.SkPoint* nonnull %6) #3
  %17 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 6
  %18 = load i8, i8* %17, align 4, !range !2
  %19 = icmp eq i8 %18, 0
  br i1 %19, label %27, label %20

20:                                               ; preds = %5
  %21 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 10
  %22 = load i32, i32* %21, align 8
  %23 = ashr i32 %22, 1
  %24 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 11
  %25 = load i32, i32* %24, align 4
  %26 = ashr i32 %25, 1
  br label %40

27:                                               ; preds = %5
  %28 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %12, i64 0, i32 0, i64 0
  %29 = load float, float* %28, align 4
  %30 = fcmp ogt float %29, 0.000000e+00
  %31 = zext i1 %30 to i32
  %32 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 2, i32 0, i64 4
  %33 = load float, float* %32, align 4
  %34 = fcmp ogt float %33, 0.000000e+00
  %35 = zext i1 %34 to i32
  %36 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 10
  %37 = load i32, i32* %36, align 8
  %38 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 11
  %39 = load i32, i32* %38, align 4
  br label %40

40:                                               ; preds = %20, %27
  %41 = phi i32 [ %25, %20 ], [ %39, %27 ]
  %42 = phi i32 [ %22, %20 ], [ %37, %27 ]
  %43 = phi i32 [ %23, %20 ], [ %31, %27 ]
  %44 = phi i32 [ %26, %20 ], [ %35, %27 ]
  %45 = load float, float* %8, align 4
  %46 = fmul float %45, 0x41F0000000000000
  %47 = fcmp olt float %46, 0x43DFFFFFE0000000
  %48 = select i1 %47, float %46, float 0x43DFFFFFE0000000
  %49 = load float, float* %9, align 4
  %50 = fmul float %49, 0x41F0000000000000
  %51 = fcmp olt float %50, 0x43DFFFFFE0000000
  %52 = select i1 %51, float %50, float 0x43DFFFFFE0000000
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #3
  %53 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 8
  %54 = load i64, i64* %53, align 8
  %55 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 9
  %56 = load i64, i64* %55, align 8
  %57 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 1, i32 2, i32 1, i32 0
  %58 = load i32, i32* %57, align 4
  %59 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 1, i32 2, i32 1, i32 1
  %60 = load i32, i32* %59, align 4
  %61 = icmp sgt i32 %2, 0
  br i1 %61, label %62, label %241

62:                                               ; preds = %40
  %63 = fcmp ogt float %52, 0xC3DFFFFFE0000000
  %64 = select i1 %63, float %52, float 0xC3DFFFFFE0000000
  %65 = fptosi float %64 to i64
  %66 = sext i32 %44 to i64
  %67 = shl nsw i64 %66, 16
  %68 = sub i64 %65, %67
  %69 = fcmp ogt float %48, 0xC3DFFFFFE0000000
  %70 = select i1 %69, float %48, float 0xC3DFFFFFE0000000
  %71 = fptosi float %70 to i64
  %72 = sext i32 %43 to i64
  %73 = shl nsw i64 %72, 16
  %74 = sub i64 %71, %73
  %75 = add nsw i32 %2, -1
  %76 = zext i32 %75 to i64
  %77 = add nuw nsw i64 %76, 1
  %78 = icmp ult i64 %77, 4
  br i1 %78, label %177, label %79

79:                                               ; preds = %62
  %80 = and i64 %77, 8589934588
  %81 = mul i64 %80, %56
  %82 = add i64 %68, %81
  %83 = mul i64 %80, %54
  %84 = add i64 %74, %83
  %85 = shl nuw nsw i64 %80, 1
  %86 = getelementptr i32, i32* %1, i64 %85
  %87 = trunc i64 %80 to i32
  %88 = sub i32 %2, %87
  %89 = insertelement <4 x i64> undef, i64 %68, i32 0
  %90 = shufflevector <4 x i64> %89, <4 x i64> undef, <4 x i32> zeroinitializer
  %91 = insertelement <4 x i64> undef, i64 %56, i32 0
  %92 = shufflevector <4 x i64> %91, <4 x i64> undef, <4 x i32> zeroinitializer
  %93 = mul <4 x i64> %92, <i64 0, i64 1, i64 2, i64 3>
  %94 = add <4 x i64> %90, %93
  %95 = shl i64 %56, 2
  %96 = insertelement <4 x i64> undef, i64 %95, i32 0
  %97 = shufflevector <4 x i64> %96, <4 x i64> undef, <4 x i32> zeroinitializer
  %98 = insertelement <4 x i64> undef, i64 %74, i32 0
  %99 = shufflevector <4 x i64> %98, <4 x i64> undef, <4 x i32> zeroinitializer
  %100 = insertelement <4 x i64> undef, i64 %54, i32 0
  %101 = shufflevector <4 x i64> %100, <4 x i64> undef, <4 x i32> zeroinitializer
  %102 = mul <4 x i64> %101, <i64 0, i64 1, i64 2, i64 3>
  %103 = add <4 x i64> %99, %102
  %104 = shl i64 %54, 2
  %105 = insertelement <4 x i64> undef, i64 %104, i32 0
  %106 = shufflevector <4 x i64> %105, <4 x i64> undef, <4 x i32> zeroinitializer
  %107 = insertelement <4 x i32> undef, i32 %60, i32 0
  %108 = shufflevector <4 x i32> %107, <4 x i32> undef, <4 x i32> zeroinitializer
  %109 = insertelement <4 x i32> undef, i32 %41, i32 0
  %110 = shufflevector <4 x i32> %109, <4 x i32> undef, <4 x i32> zeroinitializer
  %111 = insertelement <4 x i32> undef, i32 %58, i32 0
  %112 = shufflevector <4 x i32> %111, <4 x i32> undef, <4 x i32> zeroinitializer
  %113 = insertelement <4 x i32> undef, i32 %42, i32 0
  %114 = shufflevector <4 x i32> %113, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %115

115:                                              ; preds = %115, %79
  %116 = phi i64 [ 0, %79 ], [ %171, %115 ]
  %117 = phi <4 x i64> [ %94, %79 ], [ %172, %115 ]
  %118 = phi <4 x i64> [ %103, %79 ], [ %173, %115 ]
  %119 = shl i64 %116, 1
  %120 = lshr <4 x i64> %117, <i64 16, i64 16, i64 16, i64 16>
  %121 = trunc <4 x i64> %120 to <4 x i32>
  %122 = shl nuw nsw <4 x i64> %120, <i64 15, i64 15, i64 15, i64 15>
  %123 = trunc <4 x i64> %122 to <4 x i32>
  %124 = ashr <4 x i32> %123, <i32 31, i32 31, i32 31, i32 31>
  %125 = xor <4 x i32> %124, %121
  %126 = and <4 x i32> %125, <i32 65535, i32 65535, i32 65535, i32 65535>
  %127 = mul nsw <4 x i32> %126, %108
  %128 = lshr <4 x i32> %127, <i32 16, i32 16, i32 16, i32 16>
  %129 = shl nuw nsw <4 x i32> %128, <i32 4, i32 4, i32 4, i32 4>
  %130 = and <4 x i32> %121, <i32 65535, i32 65535, i32 65535, i32 65535>
  %131 = mul nsw <4 x i32> %130, %108
  %132 = lshr <4 x i32> %131, <i32 12, i32 12, i32 12, i32 12>
  %133 = and <4 x i32> %132, <i32 15, i32 15, i32 15, i32 15>
  %134 = or <4 x i32> %129, %133
  %135 = shl <4 x i32> %134, <i32 14, i32 14, i32 14, i32 14>
  %136 = add nsw <4 x i32> %110, %121
  %137 = shl <4 x i32> %136, <i32 15, i32 15, i32 15, i32 15>
  %138 = ashr <4 x i32> %137, <i32 31, i32 31, i32 31, i32 31>
  %139 = xor <4 x i32> %138, %136
  %140 = and <4 x i32> %139, <i32 65535, i32 65535, i32 65535, i32 65535>
  %141 = mul nsw <4 x i32> %140, %108
  %142 = lshr <4 x i32> %141, <i32 16, i32 16, i32 16, i32 16>
  %143 = or <4 x i32> %135, %142
  %144 = lshr <4 x i64> %118, <i64 16, i64 16, i64 16, i64 16>
  %145 = trunc <4 x i64> %144 to <4 x i32>
  %146 = shl nuw nsw <4 x i64> %144, <i64 15, i64 15, i64 15, i64 15>
  %147 = trunc <4 x i64> %146 to <4 x i32>
  %148 = ashr <4 x i32> %147, <i32 31, i32 31, i32 31, i32 31>
  %149 = xor <4 x i32> %148, %145
  %150 = and <4 x i32> %149, <i32 65535, i32 65535, i32 65535, i32 65535>
  %151 = mul nsw <4 x i32> %150, %112
  %152 = lshr <4 x i32> %151, <i32 16, i32 16, i32 16, i32 16>
  %153 = shl nuw nsw <4 x i32> %152, <i32 4, i32 4, i32 4, i32 4>
  %154 = and <4 x i32> %145, <i32 65535, i32 65535, i32 65535, i32 65535>
  %155 = mul nsw <4 x i32> %154, %112
  %156 = lshr <4 x i32> %155, <i32 12, i32 12, i32 12, i32 12>
  %157 = and <4 x i32> %156, <i32 15, i32 15, i32 15, i32 15>
  %158 = or <4 x i32> %153, %157
  %159 = shl <4 x i32> %158, <i32 14, i32 14, i32 14, i32 14>
  %160 = add nsw <4 x i32> %114, %145
  %161 = shl <4 x i32> %160, <i32 15, i32 15, i32 15, i32 15>
  %162 = ashr <4 x i32> %161, <i32 31, i32 31, i32 31, i32 31>
  %163 = xor <4 x i32> %162, %160
  %164 = and <4 x i32> %163, <i32 65535, i32 65535, i32 65535, i32 65535>
  %165 = mul nsw <4 x i32> %164, %112
  %166 = lshr <4 x i32> %165, <i32 16, i32 16, i32 16, i32 16>
  %167 = or <4 x i32> %159, %166
  %168 = getelementptr inbounds i32, i32* %1, i64 %119
  %169 = bitcast i32* %168 to <8 x i32>*
  %170 = shufflevector <4 x i32> %143, <4 x i32> %167, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  store <8 x i32> %170, <8 x i32>* %169, align 4
  %171 = add i64 %116, 4
  %172 = add <4 x i64> %117, %97
  %173 = add <4 x i64> %118, %106
  %174 = icmp eq i64 %171, %80
  br i1 %174, label %175, label %115, !llvm.loop !75

175:                                              ; preds = %115
  %176 = icmp eq i64 %77, %80
  br i1 %176, label %241, label %177

177:                                              ; preds = %175, %62
  %178 = phi i64 [ %68, %62 ], [ %82, %175 ]
  %179 = phi i64 [ %74, %62 ], [ %84, %175 ]
  %180 = phi i32* [ %1, %62 ], [ %86, %175 ]
  %181 = phi i32 [ %2, %62 ], [ %88, %175 ]
  br label %182

182:                                              ; preds = %177, %182
  %183 = phi i64 [ %238, %182 ], [ %178, %177 ]
  %184 = phi i64 [ %239, %182 ], [ %179, %177 ]
  %185 = phi i32* [ %237, %182 ], [ %180, %177 ]
  %186 = phi i32 [ %187, %182 ], [ %181, %177 ]
  %187 = add nsw i32 %186, -1
  %188 = lshr i64 %183, 16
  %189 = trunc i64 %188 to i32
  %190 = shl nuw nsw i64 %188, 15
  %191 = trunc i64 %190 to i32
  %192 = ashr i32 %191, 31
  %193 = xor i32 %192, %189
  %194 = and i32 %193, 65535
  %195 = mul nsw i32 %194, %60
  %196 = lshr i32 %195, 16
  %197 = shl nuw nsw i32 %196, 4
  %198 = and i32 %189, 65535
  %199 = mul nsw i32 %198, %60
  %200 = lshr i32 %199, 12
  %201 = and i32 %200, 15
  %202 = or i32 %197, %201
  %203 = shl i32 %202, 14
  %204 = add nsw i32 %41, %189
  %205 = shl i32 %204, 15
  %206 = ashr i32 %205, 31
  %207 = xor i32 %206, %204
  %208 = and i32 %207, 65535
  %209 = mul nsw i32 %208, %60
  %210 = lshr i32 %209, 16
  %211 = or i32 %203, %210
  %212 = getelementptr inbounds i32, i32* %185, i64 1
  store i32 %211, i32* %185, align 4
  %213 = lshr i64 %184, 16
  %214 = trunc i64 %213 to i32
  %215 = shl nuw nsw i64 %213, 15
  %216 = trunc i64 %215 to i32
  %217 = ashr i32 %216, 31
  %218 = xor i32 %217, %214
  %219 = and i32 %218, 65535
  %220 = mul nsw i32 %219, %58
  %221 = lshr i32 %220, 16
  %222 = shl nuw nsw i32 %221, 4
  %223 = and i32 %214, 65535
  %224 = mul nsw i32 %223, %58
  %225 = lshr i32 %224, 12
  %226 = and i32 %225, 15
  %227 = or i32 %222, %226
  %228 = shl i32 %227, 14
  %229 = add nsw i32 %42, %214
  %230 = shl i32 %229, 15
  %231 = ashr i32 %230, 31
  %232 = xor i32 %231, %229
  %233 = and i32 %232, 65535
  %234 = mul nsw i32 %233, %58
  %235 = lshr i32 %234, 16
  %236 = or i32 %228, %235
  %237 = getelementptr inbounds i32, i32* %185, i64 2
  store i32 %236, i32* %212, align 4
  %238 = add nsw i64 %183, %56
  %239 = add nsw i64 %184, %54
  %240 = icmp sgt i32 %187, 0
  br i1 %240, label %182, label %241, !llvm.loop !76

241:                                              ; preds = %182, %175, %40
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = distinct !{!3, !4}
!4 = !{!"llvm.loop.isvectorized", i32 1}
!5 = distinct !{!5, !6}
!6 = !{!"llvm.loop.unroll.disable"}
!7 = distinct !{!7, !8, !4}
!8 = !{!"llvm.loop.unroll.runtime.disable"}
!9 = distinct !{!9, !4}
!10 = distinct !{!10, !6}
!11 = distinct !{!11, !8, !4}
!12 = distinct !{!12, !4}
!13 = distinct !{!13, !6}
!14 = distinct !{!14, !8, !4}
!15 = distinct !{!15, !4}
!16 = distinct !{!16, !6}
!17 = distinct !{!17, !8, !4}
!18 = distinct !{!18, !4}
!19 = distinct !{!19, !6}
!20 = distinct !{!20, !8, !4}
!21 = distinct !{!21, !4}
!22 = distinct !{!22, !6}
!23 = distinct !{!23, !8, !4}
!24 = distinct !{!24, !4}
!25 = distinct !{!25, !6}
!26 = distinct !{!26, !8, !4}
!27 = distinct !{!27, !4}
!28 = distinct !{!28, !8, !4}
!29 = distinct !{!29, !4}
!30 = distinct !{!30, !6}
!31 = distinct !{!31, !4}
!32 = distinct !{!32, !8, !4}
!33 = distinct !{!33, !8, !4}
!34 = distinct !{!34, !4}
!35 = distinct !{!35, !4}
!36 = distinct !{!36, !8, !4}
!37 = distinct !{!37, !8, !4}
!38 = distinct !{!38, !4}
!39 = distinct !{!39, !8, !4}
!40 = !{!41}
!41 = distinct !{!41, !42}
!42 = distinct !{!42, !"LVerDomain"}
!43 = !{!44}
!44 = distinct !{!44, !42}
!45 = distinct !{!45, !4}
!46 = distinct !{!46, !4}
!47 = distinct !{!47, !4}
!48 = distinct !{!48, !8, !4}
!49 = distinct !{!49, !4}
!50 = distinct !{!50, !8, !4}
!51 = distinct !{!51, !4}
!52 = distinct !{!52, !8, !4}
!53 = !{!54}
!54 = distinct !{!54, !55}
!55 = distinct !{!55, !"LVerDomain"}
!56 = !{!57}
!57 = distinct !{!57, !55}
!58 = distinct !{!58, !4}
!59 = distinct !{!59, !4}
!60 = distinct !{!60, !4}
!61 = distinct !{!61, !8, !4}
!62 = distinct !{!62, !4}
!63 = distinct !{!63, !8, !4}
!64 = distinct !{!64, !4}
!65 = distinct !{!65, !8, !4}
!66 = !{!67}
!67 = distinct !{!67, !68}
!68 = distinct !{!68, !"LVerDomain"}
!69 = !{!70}
!70 = distinct !{!70, !68}
!71 = distinct !{!71, !4}
!72 = distinct !{!72, !4}
!73 = distinct !{!73, !4}
!74 = distinct !{!74, !8, !4}
!75 = distinct !{!75, !4}
!76 = distinct !{!76, !8, !4}
