; ModuleID = '../../third_party/skia/src/core/SkGeometry.cpp'
source_filename = "../../third_party/skia/src/core/SkGeometry.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.(anonymous namespace)::SkNx.2" = type { <4 x float> }
%struct.SkPoint = type { float, float }
%struct.SkDCubic = type { [4 x %struct.SkDPoint] }
%struct.SkDPoint = type { double, double }
%struct.SkDCubicPair = type { [7 x %struct.SkDPoint] }
%struct.SkConic = type { [3 x %struct.SkPoint], float }
%struct.SkRect = type { float, float, float, float }
%class.SkMatrix = type { [9 x float], i32 }
%struct.SkPoint3 = type { float, float, float }

@_ZZ21SkFindCubicMidTangentPK7SkPointE2kM = internal global [4 x %"class.(anonymous namespace)::SkNx.2"] zeroinitializer, align 16
@_ZGVZ21SkFindCubicMidTangentPK7SkPointE2kM = internal global i64 0, align 8
@_ZZN7SkConic12BuildUnitArcERK7SkPointS2_19SkRotationDirectionPK8SkMatrixPS_E11quadrantPts = internal unnamed_addr constant [8 x %struct.SkPoint] [%struct.SkPoint { float 1.000000e+00, float 0.000000e+00 }, %struct.SkPoint { float 1.000000e+00, float 1.000000e+00 }, %struct.SkPoint { float 0.000000e+00, float 1.000000e+00 }, %struct.SkPoint { float -1.000000e+00, float 1.000000e+00 }, %struct.SkPoint { float -1.000000e+00, float 0.000000e+00 }, %struct.SkPoint { float -1.000000e+00, float -1.000000e+00 }, %struct.SkPoint { float 0.000000e+00, float -1.000000e+00 }, %struct.SkPoint { float 1.000000e+00, float -1.000000e+00 }], align 16

; Function Attrs: nofree nounwind ssp uwtable
define hidden i32 @_Z19SkFindUnitQuadRootsfffPf(float, float, float, float*) local_unnamed_addr #0 {
  %5 = fcmp oeq float %0, 0.000000e+00
  br i1 %5, label %6, label %21

6:                                                ; preds = %4
  %7 = fsub float -0.000000e+00, %2
  %8 = fcmp ogt float %2, 0.000000e+00
  %9 = fsub float -0.000000e+00, %1
  %10 = select i1 %8, float %2, float %7
  %11 = select i1 %8, float %9, float %1
  %12 = fcmp une float %11, 0.000000e+00
  %13 = fcmp une float %10, 0.000000e+00
  %14 = and i1 %13, %12
  %15 = fcmp ult float %10, %11
  %16 = and i1 %15, %14
  br i1 %16, label %17, label %95

17:                                               ; preds = %6
  %18 = fdiv float %10, %11
  %19 = fcmp ueq float %18, 0.000000e+00
  br i1 %19, label %95, label %20

20:                                               ; preds = %17
  store float %18, float* %3, align 4
  br label %95

21:                                               ; preds = %4
  %22 = fpext float %1 to double
  %23 = fmul double %22, %22
  %24 = fpext float %0 to double
  %25 = fmul double %24, 4.000000e+00
  %26 = fpext float %2 to double
  %27 = fmul double %25, %26
  %28 = fsub double %23, %27
  %29 = fcmp olt double %28, 0.000000e+00
  br i1 %29, label %95, label %30

30:                                               ; preds = %21
  %31 = tail call double @sqrt(double %28) #16
  %32 = fptrunc double %31 to float
  %33 = bitcast float %32 to i32
  %34 = and i32 %33, 2139095040
  %35 = icmp eq i32 %34, 2139095040
  br i1 %35, label %95, label %36

36:                                               ; preds = %30
  %37 = fcmp olt float %1, 0.000000e+00
  %38 = fsub float -0.000000e+00, %32
  %39 = select i1 %37, float %38, float %32
  %40 = fadd float %39, %1
  %41 = fmul float %40, -5.000000e-01
  %42 = fcmp olt float %41, 0.000000e+00
  %43 = fsub float -0.000000e+00, %41
  %44 = fsub float -0.000000e+00, %0
  %45 = select i1 %42, float %43, float %41
  %46 = select i1 %42, float %44, float %0
  %47 = fcmp une float %46, 0.000000e+00
  %48 = fcmp une float %45, 0.000000e+00
  %49 = and i1 %48, %47
  %50 = fcmp ult float %45, %46
  %51 = and i1 %50, %49
  br i1 %51, label %52, label %56

52:                                               ; preds = %36
  %53 = fdiv float %45, %46
  %54 = fcmp ueq float %53, 0.000000e+00
  br i1 %54, label %56, label %55

55:                                               ; preds = %52
  store float %53, float* %3, align 4
  br label %56

56:                                               ; preds = %36, %52, %55
  %57 = phi i64 [ 0, %36 ], [ 1, %55 ], [ 0, %52 ]
  %58 = getelementptr inbounds float, float* %3, i64 %57
  %59 = fcmp olt float %2, 0.000000e+00
  %60 = fsub float -0.000000e+00, %2
  %61 = select i1 %59, float %60, float %2
  %62 = select i1 %59, float %43, float %41
  %63 = fcmp une float %62, 0.000000e+00
  %64 = fcmp une float %61, 0.000000e+00
  %65 = and i1 %64, %63
  %66 = fcmp ult float %61, %62
  %67 = and i1 %66, %65
  br i1 %67, label %68, label %72

68:                                               ; preds = %56
  %69 = fdiv float %61, %62
  %70 = fcmp ueq float %69, 0.000000e+00
  br i1 %70, label %72, label %71

71:                                               ; preds = %68
  store float %69, float* %58, align 4
  br label %72

72:                                               ; preds = %56, %68, %71
  %73 = phi i64 [ 0, %56 ], [ 1, %71 ], [ 0, %68 ]
  %74 = getelementptr inbounds float, float* %58, i64 %73
  %75 = ptrtoint float* %74 to i64
  %76 = ptrtoint float* %3 to i64
  %77 = sub i64 %75, %76
  %78 = icmp eq i64 %77, 8
  br i1 %78, label %79, label %91

79:                                               ; preds = %72
  %80 = load float, float* %3, align 4
  %81 = getelementptr inbounds float, float* %3, i64 1
  %82 = load float, float* %81, align 4
  %83 = fcmp ogt float %80, %82
  br i1 %83, label %84, label %85

84:                                               ; preds = %79
  store float %82, float* %3, align 4
  store float %80, float* %81, align 4
  br label %91

85:                                               ; preds = %79
  %86 = fcmp oeq float %80, %82
  br i1 %86, label %87, label %91

87:                                               ; preds = %85
  %88 = getelementptr inbounds float, float* %74, i64 -1
  %89 = ptrtoint float* %88 to i64
  %90 = sub i64 %89, %76
  br label %91

91:                                               ; preds = %84, %87, %85, %72
  %92 = phi i64 [ 8, %84 ], [ %90, %87 ], [ 8, %85 ], [ %77, %72 ]
  %93 = lshr exact i64 %92, 2
  %94 = trunc i64 %93 to i32
  br label %95

95:                                               ; preds = %30, %21, %20, %17, %6, %91
  %96 = phi i32 [ %94, %91 ], [ 0, %6 ], [ 1, %20 ], [ 0, %17 ], [ 0, %21 ], [ 0, %30 ]
  ret i32 %96
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree nounwind
declare double @sqrt(double) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_Z12SkEvalQuadAtPK7SkPointfPS_S2_(%struct.SkPoint* nocapture readonly, float, %struct.SkPoint*, %struct.SkPoint*) local_unnamed_addr #3 {
  %5 = icmp eq %struct.SkPoint* %2, null
  br i1 %5, label %34, label %6

6:                                                ; preds = %4
  %7 = bitcast %struct.SkPoint* %0 to i64*
  %8 = load i64, i64* %7, align 1
  %9 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %8, i32 0
  %10 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1
  %11 = bitcast %struct.SkPoint* %10 to i64*
  %12 = load i64, i64* %11, align 1
  %13 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %12, i32 0
  %14 = bitcast <2 x i64> %13 to <4 x float>
  %15 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2
  %16 = bitcast %struct.SkPoint* %15 to i64*
  %17 = load i64, i64* %16, align 1
  %18 = insertelement <2 x i64> undef, i64 %17, i32 0
  %19 = bitcast <2 x i64> %18 to <4 x float>
  %20 = bitcast <2 x i64> %9 to <4 x float>
  %21 = fsub <4 x float> %14, %20
  %22 = fadd <4 x float> %21, %21
  %23 = fadd <4 x float> %14, %14
  %24 = fsub <4 x float> %19, %23
  %25 = fadd <4 x float> %24, %20
  %26 = insertelement <4 x float> undef, float %1, i32 0
  %27 = shufflevector <4 x float> %26, <4 x float> undef, <4 x i32> zeroinitializer
  %28 = fmul <4 x float> %27, %25
  %29 = fadd <4 x float> %22, %28
  %30 = fmul <4 x float> %27, %29
  %31 = fadd <4 x float> %30, %20
  %32 = shufflevector <4 x float> %31, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %33 = bitcast %struct.SkPoint* %2 to <2 x float>*
  store <2 x float> %32, <2 x float>* %33, align 4
  br label %34

34:                                               ; preds = %4, %6
  %35 = icmp eq %struct.SkPoint* %3, null
  br i1 %35, label %106, label %36

36:                                               ; preds = %34
  %37 = fcmp oeq float %1, 0.000000e+00
  br i1 %37, label %38, label %56

38:                                               ; preds = %36
  %39 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 0, i32 0
  %40 = load float, float* %39, align 4
  %41 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 0
  %42 = load float, float* %41, align 4
  %43 = fcmp oeq float %40, %42
  br i1 %43, label %44, label %56

44:                                               ; preds = %38
  %45 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 0, i32 1
  %46 = load float, float* %45, align 4
  %47 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 1
  %48 = load float, float* %47, align 4
  %49 = fcmp oeq float %46, %48
  br i1 %49, label %50, label %56

50:                                               ; preds = %44
  %51 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2, i32 0
  %52 = bitcast float* %51 to <2 x float>*
  %53 = load <2 x float>, <2 x float>* %52, align 4
  %54 = insertelement <2 x float> undef, float %40, i32 0
  %55 = insertelement <2 x float> %54, float %46, i32 1
  br label %75

56:                                               ; preds = %44, %38, %36
  %57 = fcmp oeq float %1, 1.000000e+00
  br i1 %57, label %58, label %79

58:                                               ; preds = %56
  %59 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 0
  %60 = load float, float* %59, align 4
  %61 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2, i32 0
  %62 = load float, float* %61, align 4
  %63 = fcmp oeq float %60, %62
  br i1 %63, label %64, label %79

64:                                               ; preds = %58
  %65 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 1
  %66 = load float, float* %65, align 4
  %67 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2, i32 1
  %68 = load float, float* %67, align 4
  %69 = fcmp oeq float %66, %68
  br i1 %69, label %70, label %79

70:                                               ; preds = %64
  %71 = bitcast %struct.SkPoint* %0 to <2 x float>*
  %72 = load <2 x float>, <2 x float>* %71, align 4
  %73 = insertelement <2 x float> undef, float %62, i32 0
  %74 = insertelement <2 x float> %73, float %68, i32 1
  br label %75

75:                                               ; preds = %70, %50
  %76 = phi <2 x float> [ %53, %50 ], [ %74, %70 ]
  %77 = phi <2 x float> [ %55, %50 ], [ %72, %70 ]
  %78 = fsub <2 x float> %76, %77
  br label %103

79:                                               ; preds = %64, %58, %56
  %80 = bitcast %struct.SkPoint* %0 to i64*
  %81 = load i64, i64* %80, align 1
  %82 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %81, i32 0
  %83 = bitcast <2 x i64> %82 to <4 x float>
  %84 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1
  %85 = bitcast %struct.SkPoint* %84 to i64*
  %86 = load i64, i64* %85, align 1
  %87 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %86, i32 0
  %88 = bitcast <2 x i64> %87 to <4 x float>
  %89 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2
  %90 = bitcast %struct.SkPoint* %89 to i64*
  %91 = load i64, i64* %90, align 1
  %92 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %91, i32 0
  %93 = bitcast <2 x i64> %92 to <4 x float>
  %94 = fsub <4 x float> %88, %83
  %95 = fsub <4 x float> %93, %88
  %96 = fsub <4 x float> %95, %94
  %97 = insertelement <4 x float> undef, float %1, i32 0
  %98 = shufflevector <4 x float> %97, <4 x float> undef, <4 x i32> zeroinitializer
  %99 = fmul <4 x float> %98, %96
  %100 = fadd <4 x float> %94, %99
  %101 = fadd <4 x float> %100, %100
  %102 = shufflevector <4 x float> %101, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  br label %103

103:                                              ; preds = %75, %79
  %104 = phi <2 x float> [ %78, %75 ], [ %102, %79 ]
  %105 = bitcast %struct.SkPoint* %3 to <2 x float>*
  store <2 x float> %104, <2 x float>* %105, align 4
  br label %106

106:                                              ; preds = %34, %103
  ret void
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden <2 x float> @_Z12SkEvalQuadAtPK7SkPointf(%struct.SkPoint* nocapture readonly, float) local_unnamed_addr #4 {
  %3 = bitcast %struct.SkPoint* %0 to i64*
  %4 = load i64, i64* %3, align 1
  %5 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %4, i32 0
  %6 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1
  %7 = bitcast %struct.SkPoint* %6 to i64*
  %8 = load i64, i64* %7, align 1
  %9 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %8, i32 0
  %10 = bitcast <2 x i64> %9 to <4 x float>
  %11 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2
  %12 = bitcast %struct.SkPoint* %11 to i64*
  %13 = load i64, i64* %12, align 1
  %14 = insertelement <2 x i64> undef, i64 %13, i32 0
  %15 = bitcast <2 x i64> %14 to <4 x float>
  %16 = bitcast <2 x i64> %5 to <4 x float>
  %17 = fsub <4 x float> %10, %16
  %18 = fadd <4 x float> %17, %17
  %19 = fadd <4 x float> %10, %10
  %20 = fsub <4 x float> %15, %19
  %21 = fadd <4 x float> %20, %16
  %22 = insertelement <4 x float> undef, float %1, i32 0
  %23 = shufflevector <4 x float> %22, <4 x float> undef, <4 x i32> zeroinitializer
  %24 = fmul <4 x float> %23, %21
  %25 = fadd <4 x float> %18, %24
  %26 = fmul <4 x float> %23, %25
  %27 = fadd <4 x float> %26, %16
  %28 = shufflevector <4 x float> %27, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  ret <2 x float> %28
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind readonly ssp uwtable
define hidden <2 x float> @_Z19SkEvalQuadTangentAtPK7SkPointf(%struct.SkPoint* nocapture readonly, float) local_unnamed_addr #4 {
  %3 = fcmp oeq float %1, 0.000000e+00
  br i1 %3, label %4, label %22

4:                                                ; preds = %2
  %5 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 0, i32 0
  %6 = load float, float* %5, align 4
  %7 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 0
  %8 = load float, float* %7, align 4
  %9 = fcmp oeq float %6, %8
  br i1 %9, label %10, label %22

10:                                               ; preds = %4
  %11 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 0, i32 1
  %12 = load float, float* %11, align 4
  %13 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 1
  %14 = load float, float* %13, align 4
  %15 = fcmp oeq float %12, %14
  br i1 %15, label %16, label %22

16:                                               ; preds = %10
  %17 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2, i32 0
  %18 = bitcast float* %17 to <2 x float>*
  %19 = load <2 x float>, <2 x float>* %18, align 4
  %20 = insertelement <2 x float> undef, float %6, i32 0
  %21 = insertelement <2 x float> %20, float %12, i32 1
  br label %41

22:                                               ; preds = %4, %10, %2
  %23 = fcmp oeq float %1, 1.000000e+00
  br i1 %23, label %24, label %45

24:                                               ; preds = %22
  %25 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 0
  %26 = load float, float* %25, align 4
  %27 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2, i32 0
  %28 = load float, float* %27, align 4
  %29 = fcmp oeq float %26, %28
  br i1 %29, label %30, label %45

30:                                               ; preds = %24
  %31 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 1
  %32 = load float, float* %31, align 4
  %33 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2, i32 1
  %34 = load float, float* %33, align 4
  %35 = fcmp oeq float %32, %34
  br i1 %35, label %36, label %45

36:                                               ; preds = %30
  %37 = bitcast %struct.SkPoint* %0 to <2 x float>*
  %38 = load <2 x float>, <2 x float>* %37, align 4
  %39 = insertelement <2 x float> undef, float %28, i32 0
  %40 = insertelement <2 x float> %39, float %34, i32 1
  br label %41

41:                                               ; preds = %36, %16
  %42 = phi <2 x float> [ %19, %16 ], [ %40, %36 ]
  %43 = phi <2 x float> [ %21, %16 ], [ %38, %36 ]
  %44 = fsub <2 x float> %42, %43
  br label %69

45:                                               ; preds = %24, %30, %22
  %46 = bitcast %struct.SkPoint* %0 to i64*
  %47 = load i64, i64* %46, align 1
  %48 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %47, i32 0
  %49 = bitcast <2 x i64> %48 to <4 x float>
  %50 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1
  %51 = bitcast %struct.SkPoint* %50 to i64*
  %52 = load i64, i64* %51, align 1
  %53 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %52, i32 0
  %54 = bitcast <2 x i64> %53 to <4 x float>
  %55 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2
  %56 = bitcast %struct.SkPoint* %55 to i64*
  %57 = load i64, i64* %56, align 1
  %58 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %57, i32 0
  %59 = bitcast <2 x i64> %58 to <4 x float>
  %60 = fsub <4 x float> %54, %49
  %61 = fsub <4 x float> %59, %54
  %62 = fsub <4 x float> %61, %60
  %63 = insertelement <4 x float> undef, float %1, i32 0
  %64 = shufflevector <4 x float> %63, <4 x float> undef, <4 x i32> zeroinitializer
  %65 = fmul <4 x float> %64, %62
  %66 = fadd <4 x float> %60, %65
  %67 = fadd <4 x float> %66, %66
  %68 = shufflevector <4 x float> %67, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  br label %69

69:                                               ; preds = %45, %41
  %70 = phi <2 x float> [ %44, %41 ], [ %68, %45 ]
  ret <2 x float> %70
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_Z12SkChopQuadAtPK7SkPointPS_f(%struct.SkPoint* nocapture readonly, %struct.SkPoint* nocapture, float) local_unnamed_addr #5 {
  %4 = bitcast %struct.SkPoint* %0 to i64*
  %5 = load i64, i64* %4, align 1
  %6 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %5, i32 0
  %7 = bitcast <2 x i64> %6 to <4 x float>
  %8 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1
  %9 = bitcast %struct.SkPoint* %8 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %10, i32 0
  %12 = bitcast <2 x i64> %11 to <4 x float>
  %13 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2
  %14 = bitcast %struct.SkPoint* %13 to i64*
  %15 = load i64, i64* %14, align 1
  %16 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %15, i32 0
  %17 = bitcast <2 x i64> %16 to <4 x float>
  %18 = insertelement <4 x float> undef, float %2, i32 0
  %19 = shufflevector <4 x float> %18, <4 x float> undef, <4 x i32> zeroinitializer
  %20 = fsub <4 x float> %12, %7
  %21 = fmul <4 x float> %19, %20
  %22 = fadd <4 x float> %21, %7
  %23 = fsub <4 x float> %17, %12
  %24 = fmul <4 x float> %19, %23
  %25 = fadd <4 x float> %24, %12
  %26 = shufflevector <4 x float> %7, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %27 = bitcast %struct.SkPoint* %1 to <2 x float>*
  store <2 x float> %26, <2 x float>* %27, align 4
  %28 = shufflevector <4 x float> %22, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %29 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 1
  %30 = bitcast %struct.SkPoint* %29 to <2 x float>*
  store <2 x float> %28, <2 x float>* %30, align 4
  %31 = fsub <4 x float> %25, %22
  %32 = fmul <4 x float> %19, %31
  %33 = fadd <4 x float> %22, %32
  %34 = shufflevector <4 x float> %33, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %35 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 2
  %36 = bitcast %struct.SkPoint* %35 to <2 x float>*
  store <2 x float> %34, <2 x float>* %36, align 4
  %37 = shufflevector <4 x float> %25, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %38 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 3
  %39 = bitcast %struct.SkPoint* %38 to <2 x float>*
  store <2 x float> %37, <2 x float>* %39, align 4
  %40 = shufflevector <4 x float> %17, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %41 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 4
  %42 = bitcast %struct.SkPoint* %41 to <2 x float>*
  store <2 x float> %40, <2 x float>* %42, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_Z16SkChopQuadAtHalfPK7SkPointPS_(%struct.SkPoint* nocapture readonly, %struct.SkPoint* nocapture) local_unnamed_addr #3 {
  %3 = bitcast %struct.SkPoint* %0 to i64*
  %4 = load i64, i64* %3, align 1
  %5 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %4, i32 0
  %6 = bitcast <2 x i64> %5 to <4 x float>
  %7 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1
  %8 = bitcast %struct.SkPoint* %7 to i64*
  %9 = load i64, i64* %8, align 1
  %10 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %9, i32 0
  %11 = bitcast <2 x i64> %10 to <4 x float>
  %12 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2
  %13 = bitcast %struct.SkPoint* %12 to i64*
  %14 = load i64, i64* %13, align 1
  %15 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %14, i32 0
  %16 = bitcast <2 x i64> %15 to <4 x float>
  %17 = fsub <4 x float> %11, %6
  %18 = fmul <4 x float> %17, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %19 = fadd <4 x float> %18, %6
  %20 = fsub <4 x float> %16, %11
  %21 = fmul <4 x float> %20, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %22 = fadd <4 x float> %21, %11
  %23 = shufflevector <4 x float> %6, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %24 = bitcast %struct.SkPoint* %1 to <2 x float>*
  store <2 x float> %23, <2 x float>* %24, align 4
  %25 = shufflevector <4 x float> %19, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %26 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 1
  %27 = bitcast %struct.SkPoint* %26 to <2 x float>*
  store <2 x float> %25, <2 x float>* %27, align 4
  %28 = fsub <4 x float> %22, %19
  %29 = fmul <4 x float> %28, <float 5.000000e-01, float 5.000000e-01, float undef, float undef>
  %30 = fadd <4 x float> %19, %29
  %31 = shufflevector <4 x float> %30, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %32 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 2
  %33 = bitcast %struct.SkPoint* %32 to <2 x float>*
  store <2 x float> %31, <2 x float>* %33, align 4
  %34 = shufflevector <4 x float> %22, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %35 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 3
  %36 = bitcast %struct.SkPoint* %35 to <2 x float>*
  store <2 x float> %34, <2 x float>* %36, align 4
  %37 = shufflevector <4 x float> %16, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %38 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 4
  %39 = bitcast %struct.SkPoint* %38 to <2 x float>*
  store <2 x float> %37, <2 x float>* %39, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden float @_Z28SkMeasureAngleBetweenVectors7SkPointS_(<2 x float>, <2 x float>) local_unnamed_addr #6 {
  %3 = extractelement <2 x float> %0, i32 0
  %4 = extractelement <2 x float> %1, i32 0
  %5 = fmul float %3, %4
  %6 = extractelement <2 x float> %0, i32 1
  %7 = extractelement <2 x float> %1, i32 1
  %8 = fmul float %6, %7
  %9 = fadd float %5, %8
  %10 = shufflevector <2 x float> %0, <2 x float> %1, <2 x i32> <i32 0, i32 2>
  %11 = fmul <2 x float> %10, %10
  %12 = shufflevector <2 x float> %0, <2 x float> %1, <2 x i32> <i32 1, i32 3>
  %13 = fmul <2 x float> %12, %12
  %14 = fadd <2 x float> %11, %13
  %15 = extractelement <2 x float> %14, i32 0
  %16 = extractelement <2 x float> %14, i32 1
  %17 = fmul float %15, %16
  %18 = tail call float @sqrtf(float %17) #16
  %19 = fdiv float %9, %18
  %20 = fcmp olt float %19, 1.000000e+00
  %21 = select i1 %20, float %19, float 1.000000e+00
  %22 = fcmp olt float %21, -1.000000e+00
  %23 = select i1 %22, float -1.000000e+00, float %21
  %24 = tail call float @acosf(float %23) #16
  ret float %24
}

; Function Attrs: nofree nounwind
declare float @sqrtf(float) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare float @acosf(float) local_unnamed_addr #2

; Function Attrs: nounwind readnone ssp uwtable
define hidden <2 x float> @_Z14SkFindBisector7SkPointS_(<2 x float>, <2 x float>) local_unnamed_addr #7 {
  %3 = extractelement <2 x float> %0, i32 0
  %4 = extractelement <2 x float> %1, i32 0
  %5 = fmul float %3, %4
  %6 = extractelement <2 x float> %0, i32 1
  %7 = extractelement <2 x float> %1, i32 1
  %8 = fmul float %6, %7
  %9 = fadd float %5, %8
  %10 = fcmp ult float %9, 0.000000e+00
  br i1 %10, label %18, label %11

11:                                               ; preds = %2
  %12 = bitcast <2 x float> %0 to <2 x i32>
  %13 = extractelement <2 x i32> %12, i32 0
  %14 = extractelement <2 x i32> %12, i32 1
  %15 = bitcast <2 x float> %1 to <2 x i32>
  %16 = extractelement <2 x i32> %15, i32 0
  %17 = extractelement <2 x i32> %15, i32 1
  br label %37

18:                                               ; preds = %2
  %19 = fmul float %3, %7
  %20 = fmul float %6, %4
  %21 = fsub float %19, %20
  %22 = fcmp ult float %21, 0.000000e+00
  br i1 %22, label %30, label %23

23:                                               ; preds = %18
  %24 = fsub float -0.000000e+00, %6
  %25 = bitcast float %24 to i32
  %26 = bitcast float %3 to i32
  %27 = fsub float -0.000000e+00, %4
  %28 = bitcast float %7 to i32
  %29 = bitcast float %27 to i32
  br label %37

30:                                               ; preds = %18
  %31 = fsub float -0.000000e+00, %3
  %32 = bitcast float %6 to i32
  %33 = bitcast float %31 to i32
  %34 = fsub float -0.000000e+00, %7
  %35 = bitcast float %34 to i32
  %36 = bitcast float %4 to i32
  br label %37

37:                                               ; preds = %23, %30, %11
  %38 = phi i32 [ %32, %30 ], [ %25, %23 ], [ %13, %11 ]
  %39 = phi i32 [ %33, %30 ], [ %26, %23 ], [ %14, %11 ]
  %40 = phi i32 [ %35, %30 ], [ %28, %23 ], [ %16, %11 ]
  %41 = phi i32 [ %36, %30 ], [ %29, %23 ], [ %17, %11 ]
  %42 = bitcast i32 %38 to float
  %43 = bitcast i32 %40 to float
  %44 = insertelement <4 x float> <float undef, float undef, float 0.000000e+00, float 0.000000e+00>, float %42, i32 0
  %45 = insertelement <4 x float> %44, float %43, i32 1
  %46 = bitcast i32 %39 to float
  %47 = bitcast i32 %41 to float
  %48 = insertelement <4 x float> <float undef, float undef, float 0.000000e+00, float 0.000000e+00>, float %46, i32 0
  %49 = insertelement <4 x float> %48, float %47, i32 1
  %50 = fmul <4 x float> %45, %45
  %51 = fmul <4 x float> %49, %49
  %52 = fadd <4 x float> %50, %51
  %53 = tail call <4 x float> @llvm.sqrt.v4f32(<4 x float> %52) #16
  %54 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %53
  %55 = fmul <4 x float> %45, %54
  %56 = fmul <4 x float> %49, %54
  %57 = extractelement <4 x float> %55, i32 0
  %58 = extractelement <4 x float> %55, i32 1
  %59 = fadd float %57, %58
  %60 = insertelement <2 x float> undef, float %59, i32 0
  %61 = extractelement <4 x float> %56, i32 0
  %62 = extractelement <4 x float> %56, i32 1
  %63 = fadd float %61, %62
  %64 = insertelement <2 x float> %60, float %63, i32 1
  ret <2 x float> %64
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden float @_Z20SkFindQuadMidTangentPK7SkPoint(%struct.SkPoint* nocapture readonly) local_unnamed_addr #4 {
  %2 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 0
  %3 = bitcast float* %2 to <2 x float>*
  %4 = load <2 x float>, <2 x float>* %3, align 4
  %5 = bitcast %struct.SkPoint* %0 to <2 x float>*
  %6 = load <2 x float>, <2 x float>* %5, align 4
  %7 = fsub <2 x float> %4, %6
  %8 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2, i32 0
  %9 = bitcast float* %8 to <2 x float>*
  %10 = load <2 x float>, <2 x float>* %9, align 4
  %11 = fsub <2 x float> %10, %4
  %12 = fsub <2 x float> <float -0.000000e+00, float -0.000000e+00>, %11
  %13 = fmul <2 x float> %7, %12
  %14 = extractelement <2 x float> %13, i32 0
  %15 = extractelement <2 x float> %13, i32 1
  %16 = fadd float %14, %15
  %17 = fcmp ult float %16, 0.000000e+00
  %18 = extractelement <2 x float> %7, i32 0
  %19 = extractelement <2 x float> %7, i32 1
  %20 = extractelement <2 x float> %12, i32 1
  %21 = extractelement <2 x float> %12, i32 0
  br i1 %17, label %22, label %35

22:                                               ; preds = %1
  %23 = shufflevector <2 x float> %12, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %24 = fmul <2 x float> %7, %23
  %25 = extractelement <2 x float> %24, i32 0
  %26 = extractelement <2 x float> %24, i32 1
  %27 = fsub float %25, %26
  %28 = fcmp ult float %27, 0.000000e+00
  br i1 %28, label %32, label %29

29:                                               ; preds = %22
  %30 = fsub float -0.000000e+00, %19
  %31 = extractelement <2 x float> %11, i32 0
  br label %35

32:                                               ; preds = %22
  %33 = fsub float -0.000000e+00, %18
  %34 = extractelement <2 x float> %11, i32 1
  br label %35

35:                                               ; preds = %1, %29, %32
  %36 = phi float [ %19, %32 ], [ %30, %29 ], [ %18, %1 ]
  %37 = phi float [ %33, %32 ], [ %18, %29 ], [ %19, %1 ]
  %38 = phi float [ %34, %32 ], [ %20, %29 ], [ %21, %1 ]
  %39 = phi float [ %21, %32 ], [ %31, %29 ], [ %20, %1 ]
  %40 = insertelement <4 x float> <float undef, float undef, float 0.000000e+00, float 0.000000e+00>, float %36, i32 0
  %41 = insertelement <4 x float> %40, float %38, i32 1
  %42 = insertelement <4 x float> <float undef, float undef, float 0.000000e+00, float 0.000000e+00>, float %37, i32 0
  %43 = insertelement <4 x float> %42, float %39, i32 1
  %44 = fmul <4 x float> %41, %41
  %45 = fmul <4 x float> %43, %43
  %46 = fadd <4 x float> %44, %45
  %47 = tail call <4 x float> @llvm.sqrt.v4f32(<4 x float> %46) #16
  %48 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %47
  %49 = fmul <4 x float> %41, %48
  %50 = fmul <4 x float> %43, %48
  %51 = extractelement <4 x float> %49, i32 0
  %52 = extractelement <4 x float> %49, i32 1
  %53 = fadd float %51, %52
  %54 = extractelement <4 x float> %50, i32 0
  %55 = extractelement <4 x float> %50, i32 1
  %56 = fadd float %54, %55
  %57 = fmul float %18, %53
  %58 = fmul float %19, %56
  %59 = fadd float %57, %58
  %60 = extractelement <2 x float> %11, i32 0
  %61 = fsub float %18, %60
  %62 = extractelement <2 x float> %11, i32 1
  %63 = fsub float %19, %62
  %64 = fmul float %61, %53
  %65 = fmul float %63, %56
  %66 = fadd float %64, %65
  %67 = fdiv float %59, %66
  %68 = fcmp ogt float %67, 0.000000e+00
  %69 = fcmp olt float %67, 1.000000e+00
  %70 = and i1 %68, %69
  %71 = select i1 %70, float %67, float 5.000000e-01
  ret float %71
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden i32 @_Z17SkFindQuadExtremafffPf(float, float, float, float* nocapture) local_unnamed_addr #8 {
  %5 = fsub float %0, %1
  %6 = fsub float %5, %1
  %7 = fadd float %6, %2
  %8 = fcmp olt float %5, 0.000000e+00
  %9 = fsub float -0.000000e+00, %5
  %10 = fsub float -0.000000e+00, %7
  %11 = select i1 %8, float %9, float %5
  %12 = select i1 %8, float %10, float %7
  %13 = fcmp une float %12, 0.000000e+00
  %14 = fcmp une float %11, 0.000000e+00
  %15 = and i1 %14, %13
  %16 = fcmp ult float %11, %12
  %17 = and i1 %16, %15
  br i1 %17, label %18, label %22

18:                                               ; preds = %4
  %19 = fdiv float %11, %12
  %20 = fcmp ueq float %19, 0.000000e+00
  br i1 %20, label %22, label %21

21:                                               ; preds = %18
  store float %19, float* %3, align 4
  br label %22

22:                                               ; preds = %4, %18, %21
  %23 = phi i32 [ 0, %4 ], [ 1, %21 ], [ 0, %18 ]
  ret i32 %23
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_Z20SkChopQuadAtYExtremaPK7SkPointPS_(%struct.SkPoint* nocapture readonly, %struct.SkPoint* nocapture) local_unnamed_addr #5 {
  %3 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 0, i32 1
  %4 = load float, float* %3, align 4
  %5 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 1
  %6 = load float, float* %5, align 4
  %7 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2, i32 1
  %8 = load float, float* %7, align 4
  %9 = fsub float %4, %6
  %10 = fsub float %6, %8
  %11 = fcmp olt float %9, 0.000000e+00
  %12 = fsub float -0.000000e+00, %10
  %13 = select i1 %11, float %12, float %10
  %14 = fcmp une float %9, 0.000000e+00
  %15 = fcmp uge float %13, 0.000000e+00
  %16 = and i1 %14, %15
  br i1 %16, label %86, label %17

17:                                               ; preds = %2
  %18 = fsub float %9, %6
  %19 = fadd float %8, %18
  %20 = fsub float -0.000000e+00, %9
  %21 = fsub float -0.000000e+00, %19
  %22 = select i1 %11, float %20, float %9
  %23 = select i1 %11, float %21, float %19
  %24 = fcmp une float %23, 0.000000e+00
  %25 = fcmp une float %22, 0.000000e+00
  %26 = and i1 %25, %24
  %27 = fcmp ult float %22, %23
  %28 = and i1 %27, %26
  br i1 %28, label %29, label %32

29:                                               ; preds = %17
  %30 = fdiv float %22, %23
  %31 = fcmp ueq float %30, 0.000000e+00
  br i1 %31, label %32, label %37

32:                                               ; preds = %29, %17
  %33 = tail call float @llvm.fabs.f32(float %9)
  %34 = tail call float @llvm.fabs.f32(float %10)
  %35 = fcmp olt float %33, %34
  %36 = select i1 %35, float %4, float %8
  br label %86

37:                                               ; preds = %29
  %38 = bitcast %struct.SkPoint* %0 to i64*
  %39 = load i64, i64* %38, align 1
  %40 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %39, i32 0
  %41 = bitcast <2 x i64> %40 to <4 x float>
  %42 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1
  %43 = bitcast %struct.SkPoint* %42 to i64*
  %44 = load i64, i64* %43, align 1
  %45 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %44, i32 0
  %46 = bitcast <2 x i64> %45 to <4 x float>
  %47 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2
  %48 = bitcast %struct.SkPoint* %47 to i64*
  %49 = load i64, i64* %48, align 1
  %50 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %49, i32 0
  %51 = bitcast <2 x i64> %50 to <4 x float>
  %52 = insertelement <4 x float> undef, float %30, i32 0
  %53 = shufflevector <4 x float> %52, <4 x float> undef, <4 x i32> zeroinitializer
  %54 = fsub <4 x float> %46, %41
  %55 = fmul <4 x float> %53, %54
  %56 = fadd <4 x float> %55, %41
  %57 = fsub <4 x float> %51, %46
  %58 = fmul <4 x float> %53, %57
  %59 = fadd <4 x float> %58, %46
  %60 = shufflevector <4 x float> %41, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %61 = bitcast %struct.SkPoint* %1 to <2 x float>*
  store <2 x float> %60, <2 x float>* %61, align 4
  %62 = shufflevector <4 x float> %56, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %63 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 1
  %64 = bitcast %struct.SkPoint* %63 to <2 x float>*
  store <2 x float> %62, <2 x float>* %64, align 4
  %65 = fsub <4 x float> %59, %56
  %66 = fmul <4 x float> %53, %65
  %67 = fadd <4 x float> %56, %66
  %68 = bitcast <4 x float> %67 to <2 x i64>
  %69 = extractelement <2 x i64> %68, i32 0
  %70 = shufflevector <4 x float> %67, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %71 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 2
  %72 = bitcast %struct.SkPoint* %71 to <2 x float>*
  store <2 x float> %70, <2 x float>* %72, align 4
  %73 = shufflevector <4 x float> %59, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %74 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 3
  %75 = bitcast %struct.SkPoint* %74 to <2 x float>*
  store <2 x float> %73, <2 x float>* %75, align 4
  %76 = shufflevector <4 x float> %51, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %77 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 4
  %78 = bitcast %struct.SkPoint* %77 to <2 x float>*
  store <2 x float> %76, <2 x float>* %78, align 4
  %79 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 0, i32 1
  %80 = lshr i64 %69, 32
  %81 = trunc i64 %80 to i32
  %82 = getelementptr inbounds float, float* %79, i64 6
  %83 = bitcast float* %82 to i32*
  store i32 %81, i32* %83, align 4
  %84 = getelementptr inbounds float, float* %79, i64 2
  %85 = bitcast float* %84 to i32*
  store i32 %81, i32* %85, align 4
  br label %104

86:                                               ; preds = %32, %2
  %87 = phi float [ %6, %2 ], [ %36, %32 ]
  %88 = bitcast %struct.SkPoint* %0 to i32*
  %89 = load i32, i32* %88, align 4
  %90 = bitcast %struct.SkPoint* %1 to i32*
  store i32 %89, i32* %90, align 4
  %91 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 0, i32 1
  store float %4, float* %91, align 4
  %92 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 1
  %93 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 0
  %94 = bitcast float* %93 to i32*
  %95 = load i32, i32* %94, align 4
  %96 = bitcast %struct.SkPoint* %92 to i32*
  store i32 %95, i32* %96, align 4
  %97 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 1, i32 1
  store float %87, float* %97, align 4
  %98 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 2
  %99 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2, i32 0
  %100 = bitcast float* %99 to i32*
  %101 = load i32, i32* %100, align 4
  %102 = bitcast %struct.SkPoint* %98 to i32*
  store i32 %101, i32* %102, align 4
  %103 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 2, i32 1
  store float %8, float* %103, align 4
  br label %104

104:                                              ; preds = %37, %86
  %105 = phi i32 [ 0, %86 ], [ 1, %37 ]
  ret i32 %105
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #9

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_Z20SkChopQuadAtXExtremaPK7SkPointPS_(%struct.SkPoint* nocapture readonly, %struct.SkPoint* nocapture) local_unnamed_addr #5 {
  %3 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 0, i32 0
  %4 = load float, float* %3, align 4
  %5 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 0
  %6 = load float, float* %5, align 4
  %7 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2, i32 0
  %8 = load float, float* %7, align 4
  %9 = fsub float %4, %6
  %10 = fsub float %6, %8
  %11 = fcmp olt float %9, 0.000000e+00
  %12 = fsub float -0.000000e+00, %10
  %13 = select i1 %11, float %12, float %10
  %14 = fcmp une float %9, 0.000000e+00
  %15 = fcmp uge float %13, 0.000000e+00
  %16 = and i1 %14, %15
  br i1 %16, label %83, label %17

17:                                               ; preds = %2
  %18 = fsub float %9, %6
  %19 = fadd float %8, %18
  %20 = fsub float -0.000000e+00, %9
  %21 = fsub float -0.000000e+00, %19
  %22 = select i1 %11, float %20, float %9
  %23 = select i1 %11, float %21, float %19
  %24 = fcmp une float %23, 0.000000e+00
  %25 = fcmp une float %22, 0.000000e+00
  %26 = and i1 %25, %24
  %27 = fcmp ult float %22, %23
  %28 = and i1 %27, %26
  br i1 %28, label %29, label %32

29:                                               ; preds = %17
  %30 = fdiv float %22, %23
  %31 = fcmp ueq float %30, 0.000000e+00
  br i1 %31, label %32, label %37

32:                                               ; preds = %29, %17
  %33 = tail call float @llvm.fabs.f32(float %9)
  %34 = tail call float @llvm.fabs.f32(float %10)
  %35 = fcmp olt float %33, %34
  %36 = select i1 %35, float %4, float %8
  br label %83

37:                                               ; preds = %29
  %38 = bitcast %struct.SkPoint* %0 to i64*
  %39 = load i64, i64* %38, align 1
  %40 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %39, i32 0
  %41 = bitcast <2 x i64> %40 to <4 x float>
  %42 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1
  %43 = bitcast %struct.SkPoint* %42 to i64*
  %44 = load i64, i64* %43, align 1
  %45 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %44, i32 0
  %46 = bitcast <2 x i64> %45 to <4 x float>
  %47 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2
  %48 = bitcast %struct.SkPoint* %47 to i64*
  %49 = load i64, i64* %48, align 1
  %50 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %49, i32 0
  %51 = bitcast <2 x i64> %50 to <4 x float>
  %52 = insertelement <4 x float> undef, float %30, i32 0
  %53 = shufflevector <4 x float> %52, <4 x float> undef, <4 x i32> zeroinitializer
  %54 = fsub <4 x float> %46, %41
  %55 = fmul <4 x float> %53, %54
  %56 = fadd <4 x float> %55, %41
  %57 = fsub <4 x float> %51, %46
  %58 = fmul <4 x float> %53, %57
  %59 = fadd <4 x float> %58, %46
  %60 = shufflevector <4 x float> %41, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %61 = bitcast %struct.SkPoint* %1 to <2 x float>*
  store <2 x float> %60, <2 x float>* %61, align 4
  %62 = shufflevector <4 x float> %56, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %63 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 1
  %64 = bitcast %struct.SkPoint* %63 to <2 x float>*
  store <2 x float> %62, <2 x float>* %64, align 4
  %65 = fsub <4 x float> %59, %56
  %66 = fmul <4 x float> %53, %65
  %67 = fadd <4 x float> %56, %66
  %68 = bitcast <4 x float> %67 to <2 x i64>
  %69 = extractelement <2 x i64> %68, i32 0
  %70 = shufflevector <4 x float> %67, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %71 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 2
  %72 = bitcast %struct.SkPoint* %71 to <2 x float>*
  store <2 x float> %70, <2 x float>* %72, align 4
  %73 = shufflevector <4 x float> %59, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %74 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 3
  %75 = bitcast %struct.SkPoint* %74 to <2 x float>*
  store <2 x float> %73, <2 x float>* %75, align 4
  %76 = shufflevector <4 x float> %51, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %77 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 4
  %78 = bitcast %struct.SkPoint* %77 to <2 x float>*
  store <2 x float> %76, <2 x float>* %78, align 4
  %79 = trunc i64 %69 to i32
  %80 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 3, i32 0
  %81 = bitcast float* %80 to i32*
  store i32 %79, i32* %81, align 4
  %82 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 1, i32 0
  br label %102

83:                                               ; preds = %32, %2
  %84 = phi float [ %6, %2 ], [ %36, %32 ]
  %85 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 0, i32 1
  %86 = bitcast float* %85 to i32*
  %87 = load i32, i32* %86, align 4
  %88 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 0, i32 0
  store float %4, float* %88, align 4
  %89 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 0, i32 1
  %90 = bitcast float* %89 to i32*
  store i32 %87, i32* %90, align 4
  %91 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 1
  %92 = bitcast float* %91 to i32*
  %93 = load i32, i32* %92, align 4
  %94 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 1, i32 0
  store float %84, float* %94, align 4
  %95 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 1, i32 1
  %96 = bitcast float* %95 to i32*
  store i32 %93, i32* %96, align 4
  %97 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2, i32 1
  %98 = bitcast float* %97 to i32*
  %99 = load i32, i32* %98, align 4
  %100 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 2, i32 0
  store float %8, float* %100, align 4
  %101 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 2, i32 1
  br label %102

102:                                              ; preds = %37, %83
  %103 = phi float* [ %82, %37 ], [ %101, %83 ]
  %104 = phi i32 [ %79, %37 ], [ %99, %83 ]
  %105 = phi i32 [ 1, %37 ], [ 0, %83 ]
  %106 = bitcast float* %103 to i32*
  store i32 %104, i32* %106, align 4
  ret i32 %105
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden float @_Z22SkFindQuadMaxCurvaturePK7SkPoint(%struct.SkPoint* nocapture readonly) local_unnamed_addr #10 {
  %2 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 0
  %3 = bitcast float* %2 to <2 x float>*
  %4 = load <2 x float>, <2 x float>* %3, align 4
  %5 = bitcast %struct.SkPoint* %0 to <2 x float>*
  %6 = load <2 x float>, <2 x float>* %5, align 4
  %7 = fsub <2 x float> %4, %6
  %8 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2, i32 0
  %9 = fsub <2 x float> %6, %4
  %10 = fsub <2 x float> %9, %4
  %11 = bitcast float* %8 to <2 x float>*
  %12 = load <2 x float>, <2 x float>* %11, align 4
  %13 = fadd <2 x float> %10, %12
  %14 = fmul <2 x float> %7, %13
  %15 = extractelement <2 x float> %14, i32 0
  %16 = extractelement <2 x float> %14, i32 1
  %17 = fadd float %15, %16
  %18 = fsub float -0.000000e+00, %17
  %19 = extractelement <2 x float> %13, i32 0
  %20 = fmul float %19, %19
  %21 = extractelement <2 x float> %13, i32 1
  %22 = fmul float %21, %21
  %23 = fadd float %20, %22
  %24 = fcmp ult float %17, 0.000000e+00
  br i1 %24, label %25, label %29

25:                                               ; preds = %1
  %26 = fcmp ugt float %23, %18
  br i1 %26, label %27, label %29

27:                                               ; preds = %25
  %28 = fdiv float %18, %23
  br label %29

29:                                               ; preds = %25, %1, %27
  %30 = phi float [ %28, %27 ], [ 0.000000e+00, %1 ], [ 1.000000e+00, %25 ]
  ret float %30
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_Z24SkChopQuadAtMaxCurvaturePK7SkPointPS_(%struct.SkPoint* nocapture readonly, %struct.SkPoint* nocapture) local_unnamed_addr #5 {
  %3 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 0
  %4 = bitcast float* %3 to <2 x float>*
  %5 = load <2 x float>, <2 x float>* %4, align 4
  %6 = bitcast %struct.SkPoint* %0 to <2 x float>*
  %7 = load <2 x float>, <2 x float>* %6, align 4
  %8 = fsub <2 x float> %5, %7
  %9 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2, i32 0
  %10 = fsub <2 x float> %7, %5
  %11 = fsub <2 x float> %10, %5
  %12 = bitcast float* %9 to <2 x float>*
  %13 = load <2 x float>, <2 x float>* %12, align 4
  %14 = fadd <2 x float> %11, %13
  %15 = fmul <2 x float> %8, %14
  %16 = extractelement <2 x float> %15, i32 0
  %17 = extractelement <2 x float> %15, i32 1
  %18 = fadd float %16, %17
  %19 = fsub float -0.000000e+00, %18
  %20 = fmul <2 x float> %14, %14
  %21 = extractelement <2 x float> %20, i32 0
  %22 = extractelement <2 x float> %20, i32 1
  %23 = fadd float %21, %22
  %24 = fcmp ult float %18, 0.000000e+00
  %25 = fcmp ugt float %23, %19
  %26 = and i1 %24, %25
  br i1 %26, label %27, label %72

27:                                               ; preds = %2
  %28 = fdiv float %19, %23
  %29 = fcmp ogt float %28, 0.000000e+00
  %30 = fcmp olt float %28, 1.000000e+00
  %31 = and i1 %29, %30
  br i1 %31, label %32, label %72

32:                                               ; preds = %27
  %33 = bitcast %struct.SkPoint* %0 to i64*
  %34 = load i64, i64* %33, align 1
  %35 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %34, i32 0
  %36 = bitcast <2 x i64> %35 to <4 x float>
  %37 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1
  %38 = bitcast %struct.SkPoint* %37 to i64*
  %39 = load i64, i64* %38, align 1
  %40 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %39, i32 0
  %41 = bitcast <2 x i64> %40 to <4 x float>
  %42 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2
  %43 = bitcast %struct.SkPoint* %42 to i64*
  %44 = load i64, i64* %43, align 1
  %45 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %44, i32 0
  %46 = bitcast <2 x i64> %45 to <4 x float>
  %47 = insertelement <4 x float> undef, float %28, i32 0
  %48 = shufflevector <4 x float> %47, <4 x float> undef, <4 x i32> zeroinitializer
  %49 = fsub <4 x float> %41, %36
  %50 = fmul <4 x float> %48, %49
  %51 = fadd <4 x float> %50, %36
  %52 = fsub <4 x float> %46, %41
  %53 = fmul <4 x float> %48, %52
  %54 = fadd <4 x float> %53, %41
  %55 = shufflevector <4 x float> %36, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %56 = bitcast %struct.SkPoint* %1 to <2 x float>*
  store <2 x float> %55, <2 x float>* %56, align 4
  %57 = shufflevector <4 x float> %51, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %58 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 1
  %59 = bitcast %struct.SkPoint* %58 to <2 x float>*
  store <2 x float> %57, <2 x float>* %59, align 4
  %60 = fsub <4 x float> %54, %51
  %61 = fmul <4 x float> %48, %60
  %62 = fadd <4 x float> %51, %61
  %63 = shufflevector <4 x float> %62, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %64 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 2
  %65 = bitcast %struct.SkPoint* %64 to <2 x float>*
  store <2 x float> %63, <2 x float>* %65, align 4
  %66 = shufflevector <4 x float> %54, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %67 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 3
  %68 = bitcast %struct.SkPoint* %67 to <2 x float>*
  store <2 x float> %66, <2 x float>* %68, align 4
  %69 = shufflevector <4 x float> %46, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %70 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 4
  %71 = bitcast %struct.SkPoint* %70 to <2 x float>*
  store <2 x float> %69, <2 x float>* %71, align 4
  br label %75

72:                                               ; preds = %2, %27
  %73 = bitcast %struct.SkPoint* %1 to i8*
  %74 = bitcast %struct.SkPoint* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %73, i8* align 4 %74, i64 24, i1 false)
  br label %75

75:                                               ; preds = %72, %32
  %76 = phi i32 [ 2, %32 ], [ 1, %72 ]
  ret i32 %76
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_Z20SkConvertQuadToCubicPK7SkPointPS_(%struct.SkPoint* nocapture readonly, %struct.SkPoint* nocapture) local_unnamed_addr #5 {
  %3 = bitcast %struct.SkPoint* %0 to i64*
  %4 = load i64, i64* %3, align 1
  %5 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %4, i32 0
  %6 = bitcast <2 x i64> %5 to <4 x float>
  %7 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1
  %8 = bitcast %struct.SkPoint* %7 to i64*
  %9 = load i64, i64* %8, align 1
  %10 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %9, i32 0
  %11 = bitcast <2 x i64> %10 to <4 x float>
  %12 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2
  %13 = bitcast %struct.SkPoint* %12 to i64*
  %14 = load i64, i64* %13, align 1
  %15 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %14, i32 0
  %16 = bitcast <2 x i64> %15 to <4 x float>
  %17 = shufflevector <4 x float> %6, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %18 = bitcast %struct.SkPoint* %1 to <2 x float>*
  store <2 x float> %17, <2 x float>* %18, align 4
  %19 = fsub <4 x float> %11, %6
  %20 = fmul <4 x float> %19, <float 0x3FE5555560000000, float 0x3FE5555560000000, float undef, float undef>
  %21 = fadd <4 x float> %20, %6
  %22 = shufflevector <4 x float> %21, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %23 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 1
  %24 = bitcast %struct.SkPoint* %23 to <2 x float>*
  store <2 x float> %22, <2 x float>* %24, align 4
  %25 = fsub <4 x float> %11, %16
  %26 = fmul <4 x float> %25, <float 0x3FE5555560000000, float 0x3FE5555560000000, float undef, float undef>
  %27 = fadd <4 x float> %26, %16
  %28 = shufflevector <4 x float> %27, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %29 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 2
  %30 = bitcast %struct.SkPoint* %29 to <2 x float>*
  store <2 x float> %28, <2 x float>* %30, align 4
  %31 = shufflevector <4 x float> %16, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %32 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 3
  %33 = bitcast %struct.SkPoint* %32 to <2 x float>*
  store <2 x float> %31, <2 x float>* %33, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_Z13SkEvalCubicAtPK7SkPointfPS_S2_S2_(%struct.SkPoint* readonly, float, %struct.SkPoint*, %struct.SkPoint*, %struct.SkPoint*) local_unnamed_addr #5 {
  %6 = icmp eq %struct.SkPoint* %2, null
  br i1 %6, label %47, label %7

7:                                                ; preds = %5
  %8 = bitcast %struct.SkPoint* %0 to i64*
  %9 = load i64, i64* %8, align 1
  %10 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %9, i32 0
  %11 = bitcast <2 x i64> %10 to <4 x float>
  %12 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1
  %13 = bitcast %struct.SkPoint* %12 to i64*
  %14 = load i64, i64* %13, align 1
  %15 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %14, i32 0
  %16 = bitcast <2 x i64> %15 to <4 x float>
  %17 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2
  %18 = bitcast %struct.SkPoint* %17 to i64*
  %19 = load i64, i64* %18, align 1
  %20 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %19, i32 0
  %21 = bitcast <2 x i64> %20 to <4 x float>
  %22 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 3
  %23 = bitcast %struct.SkPoint* %22 to i64*
  %24 = load i64, i64* %23, align 1
  %25 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %24, i32 0
  %26 = bitcast <2 x i64> %25 to <4 x float>
  %27 = fsub <4 x float> %16, %21
  %28 = fmul <4 x float> %27, <float 3.000000e+00, float 3.000000e+00, float undef, float undef>
  %29 = fadd <4 x float> %28, %26
  %30 = fsub <4 x float> %29, %11
  %31 = fadd <4 x float> %16, %16
  %32 = fsub <4 x float> %21, %31
  %33 = fadd <4 x float> %32, %11
  %34 = fmul <4 x float> %33, <float 3.000000e+00, float 3.000000e+00, float undef, float undef>
  %35 = fsub <4 x float> %16, %11
  %36 = fmul <4 x float> %35, <float 3.000000e+00, float 3.000000e+00, float undef, float undef>
  %37 = insertelement <4 x float> undef, float %1, i32 0
  %38 = shufflevector <4 x float> %37, <4 x float> undef, <4 x i32> zeroinitializer
  %39 = fmul <4 x float> %38, %30
  %40 = fadd <4 x float> %34, %39
  %41 = fmul <4 x float> %38, %40
  %42 = fadd <4 x float> %36, %41
  %43 = fmul <4 x float> %38, %42
  %44 = fadd <4 x float> %43, %11
  %45 = shufflevector <4 x float> %44, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %46 = bitcast %struct.SkPoint* %2 to <2 x float>*
  store <2 x float> %45, <2 x float>* %46, align 4
  br label %47

47:                                               ; preds = %5, %7
  %48 = icmp eq %struct.SkPoint* %3, null
  br i1 %48, label %153, label %49

49:                                               ; preds = %47
  %50 = fcmp oeq float %1, 0.000000e+00
  br i1 %50, label %51, label %69

51:                                               ; preds = %49
  %52 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 0, i32 0
  %53 = load float, float* %52, align 4
  %54 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 0
  %55 = load float, float* %54, align 4
  %56 = fcmp oeq float %53, %55
  br i1 %56, label %57, label %69

57:                                               ; preds = %51
  %58 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 0, i32 1
  %59 = load float, float* %58, align 4
  %60 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 1
  %61 = load float, float* %60, align 4
  %62 = fcmp oeq float %59, %61
  br i1 %62, label %63, label %69

63:                                               ; preds = %57
  %64 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2, i32 0
  %65 = bitcast float* %64 to <2 x float>*
  %66 = load <2 x float>, <2 x float>* %65, align 4
  %67 = insertelement <2 x float> undef, float %53, i32 0
  %68 = insertelement <2 x float> %67, float %59, i32 1
  br label %89

69:                                               ; preds = %51, %57, %49
  %70 = fcmp oeq float %1, 1.000000e+00
  br i1 %70, label %71, label %116

71:                                               ; preds = %69
  %72 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2, i32 0
  %73 = load float, float* %72, align 4
  %74 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 3, i32 0
  %75 = load float, float* %74, align 4
  %76 = fcmp oeq float %73, %75
  br i1 %76, label %77, label %116

77:                                               ; preds = %71
  %78 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2, i32 1
  %79 = load float, float* %78, align 4
  %80 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 3, i32 1
  %81 = load float, float* %80, align 4
  %82 = fcmp oeq float %79, %81
  br i1 %82, label %83, label %116

83:                                               ; preds = %77
  br i1 %50, label %84, label %93

84:                                               ; preds = %83
  %85 = bitcast %struct.SkPoint* %0 to <2 x float>*
  %86 = load <2 x float>, <2 x float>* %85, align 4
  %87 = insertelement <2 x float> undef, float %73, i32 0
  %88 = insertelement <2 x float> %87, float %79, i32 1
  br label %89

89:                                               ; preds = %84, %63
  %90 = phi <2 x float> [ %66, %63 ], [ %88, %84 ]
  %91 = phi <2 x float> [ %68, %63 ], [ %86, %84 ]
  %92 = fsub <2 x float> %90, %91
  br label %100

93:                                               ; preds = %83
  %94 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 0
  %95 = bitcast float* %94 to <2 x float>*
  %96 = load <2 x float>, <2 x float>* %95, align 4
  %97 = insertelement <2 x float> undef, float %75, i32 0
  %98 = insertelement <2 x float> %97, float %81, i32 1
  %99 = fsub <2 x float> %98, %96
  br label %100

100:                                              ; preds = %93, %89
  %101 = phi <2 x float> [ %99, %93 ], [ %92, %89 ]
  %102 = bitcast %struct.SkPoint* %3 to <2 x float>*
  store <2 x float> %101, <2 x float>* %102, align 4
  %103 = extractelement <2 x float> %101, i32 0
  %104 = fcmp une float %103, 0.000000e+00
  %105 = extractelement <2 x float> %101, i32 1
  %106 = fcmp une float %105, 0.000000e+00
  %107 = or i1 %104, %106
  br i1 %107, label %153, label %108

108:                                              ; preds = %100
  %109 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 3, i32 0
  %110 = bitcast float* %109 to <2 x float>*
  %111 = load <2 x float>, <2 x float>* %110, align 4
  %112 = bitcast %struct.SkPoint* %0 to <2 x float>*
  %113 = load <2 x float>, <2 x float>* %112, align 4
  %114 = fsub <2 x float> %111, %113
  %115 = bitcast %struct.SkPoint* %3 to <2 x float>*
  store <2 x float> %114, <2 x float>* %115, align 4
  br label %153

116:                                              ; preds = %71, %77, %69
  %117 = bitcast %struct.SkPoint* %0 to i64*
  %118 = load i64, i64* %117, align 1
  %119 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %118, i32 0
  %120 = bitcast <2 x i64> %119 to <4 x float>
  %121 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1
  %122 = bitcast %struct.SkPoint* %121 to i64*
  %123 = load i64, i64* %122, align 1
  %124 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %123, i32 0
  %125 = bitcast <2 x i64> %124 to <4 x float>
  %126 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2
  %127 = bitcast %struct.SkPoint* %126 to i64*
  %128 = load i64, i64* %127, align 1
  %129 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %128, i32 0
  %130 = bitcast <2 x i64> %129 to <4 x float>
  %131 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 3
  %132 = bitcast %struct.SkPoint* %131 to i64*
  %133 = load i64, i64* %132, align 1
  %134 = insertelement <2 x i64> undef, i64 %133, i32 0
  %135 = bitcast <2 x i64> %134 to <4 x float>
  %136 = fsub <4 x float> %125, %130
  %137 = fmul <4 x float> %136, <float 3.000000e+00, float 3.000000e+00, float undef, float undef>
  %138 = fadd <4 x float> %137, %135
  %139 = fsub <4 x float> %138, %120
  %140 = fadd <4 x float> %125, %125
  %141 = fsub <4 x float> %130, %140
  %142 = fadd <4 x float> %141, %120
  %143 = fadd <4 x float> %142, %142
  %144 = fsub <4 x float> %125, %120
  %145 = insertelement <4 x float> undef, float %1, i32 0
  %146 = shufflevector <4 x float> %145, <4 x float> undef, <4 x i32> zeroinitializer
  %147 = fmul <4 x float> %146, %139
  %148 = fadd <4 x float> %143, %147
  %149 = fmul <4 x float> %146, %148
  %150 = fadd <4 x float> %144, %149
  %151 = shufflevector <4 x float> %150, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %152 = bitcast %struct.SkPoint* %3 to <2 x float>*
  store <2 x float> %151, <2 x float>* %152, align 4
  br label %153

153:                                              ; preds = %47, %116, %108, %100
  %154 = icmp eq %struct.SkPoint* %4, null
  br i1 %154, label %188, label %155

155:                                              ; preds = %153
  %156 = bitcast %struct.SkPoint* %0 to i64*
  %157 = load i64, i64* %156, align 1
  %158 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %157, i32 0
  %159 = bitcast <2 x i64> %158 to <4 x float>
  %160 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1
  %161 = bitcast %struct.SkPoint* %160 to i64*
  %162 = load i64, i64* %161, align 1
  %163 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %162, i32 0
  %164 = bitcast <2 x i64> %163 to <4 x float>
  %165 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2
  %166 = bitcast %struct.SkPoint* %165 to i64*
  %167 = load i64, i64* %166, align 1
  %168 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %167, i32 0
  %169 = bitcast <2 x i64> %168 to <4 x float>
  %170 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 3
  %171 = bitcast %struct.SkPoint* %170 to i64*
  %172 = load i64, i64* %171, align 1
  %173 = insertelement <2 x i64> undef, i64 %172, i32 0
  %174 = bitcast <2 x i64> %173 to <4 x float>
  %175 = fsub <4 x float> %164, %169
  %176 = fmul <4 x float> %175, <float 3.000000e+00, float 3.000000e+00, float undef, float undef>
  %177 = fadd <4 x float> %176, %174
  %178 = fsub <4 x float> %177, %159
  %179 = fadd <4 x float> %164, %164
  %180 = fsub <4 x float> %169, %179
  %181 = fadd <4 x float> %180, %159
  %182 = insertelement <4 x float> undef, float %1, i32 0
  %183 = shufflevector <4 x float> %182, <4 x float> undef, <4 x i32> <i32 0, i32 0, i32 undef, i32 undef>
  %184 = fmul <4 x float> %183, %178
  %185 = fadd <4 x float> %181, %184
  %186 = shufflevector <4 x float> %185, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %187 = bitcast %struct.SkPoint* %4 to <2 x float>*
  store <2 x float> %186, <2 x float>* %187, align 4
  br label %188

188:                                              ; preds = %153, %155
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden i32 @_Z18SkFindCubicExtremaffffPf(float, float, float, float, float*) local_unnamed_addr #0 {
  %6 = fsub float %3, %0
  %7 = fsub float %1, %2
  %8 = fmul float %7, 3.000000e+00
  %9 = fadd float %6, %8
  %10 = fsub float %0, %1
  %11 = fsub float %10, %1
  %12 = fadd float %11, %2
  %13 = fmul float %12, 2.000000e+00
  %14 = fsub float %1, %0
  %15 = tail call i32 @_Z19SkFindUnitQuadRootsfffPf(float %9, float %13, float %14, float* %4)
  ret i32 %15
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_Z13SkChopCubicAtPK7SkPointPS_f(%struct.SkPoint* nocapture readonly, %struct.SkPoint* nocapture, float) local_unnamed_addr #6 {
  %4 = fcmp oeq float %2, 1.000000e+00
  br i1 %4, label %5, label %17

5:                                                ; preds = %3
  %6 = bitcast %struct.SkPoint* %1 to i8*
  %7 = bitcast %struct.SkPoint* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %6, i8* align 4 %7, i64 32, i1 false)
  %8 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 3
  %9 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 6
  %10 = bitcast %struct.SkPoint* %8 to i64*
  %11 = bitcast %struct.SkPoint* %9 to i64*
  %12 = load i64, i64* %10, align 4
  store i64 %12, i64* %11, align 4
  %13 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 5
  %14 = bitcast %struct.SkPoint* %13 to i64*
  store i64 %12, i64* %14, align 4
  %15 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 4
  %16 = bitcast %struct.SkPoint* %15 to i64*
  store i64 %12, i64* %16, align 4
  br label %62

17:                                               ; preds = %3
  %18 = bitcast %struct.SkPoint* %0 to <2 x float>*
  %19 = load <2 x float>, <2 x float>* %18, align 4
  %20 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1
  %21 = bitcast %struct.SkPoint* %20 to <2 x float>*
  %22 = load <2 x float>, <2 x float>* %21, align 4
  %23 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2
  %24 = bitcast %struct.SkPoint* %23 to <2 x float>*
  %25 = load <2 x float>, <2 x float>* %24, align 4
  %26 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 3
  %27 = bitcast %struct.SkPoint* %26 to <2 x float>*
  %28 = load <2 x float>, <2 x float>* %27, align 4
  %29 = insertelement <2 x float> undef, float %2, i32 0
  %30 = shufflevector <2 x float> %29, <2 x float> undef, <2 x i32> zeroinitializer
  %31 = fsub <2 x float> %22, %19
  %32 = fmul <2 x float> %30, %31
  %33 = fadd <2 x float> %19, %32
  %34 = fsub <2 x float> %25, %22
  %35 = fmul <2 x float> %30, %34
  %36 = fadd <2 x float> %22, %35
  %37 = fsub <2 x float> %28, %25
  %38 = fmul <2 x float> %30, %37
  %39 = fadd <2 x float> %25, %38
  %40 = fsub <2 x float> %36, %33
  %41 = fmul <2 x float> %30, %40
  %42 = fadd <2 x float> %33, %41
  %43 = fsub <2 x float> %39, %36
  %44 = fmul <2 x float> %30, %43
  %45 = fadd <2 x float> %36, %44
  %46 = fsub <2 x float> %45, %42
  %47 = fmul <2 x float> %30, %46
  %48 = fadd <2 x float> %42, %47
  %49 = bitcast %struct.SkPoint* %1 to <2 x float>*
  store <2 x float> %19, <2 x float>* %49, align 4
  %50 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 1
  %51 = bitcast %struct.SkPoint* %50 to <2 x float>*
  store <2 x float> %33, <2 x float>* %51, align 4
  %52 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 2
  %53 = bitcast %struct.SkPoint* %52 to <2 x float>*
  store <2 x float> %42, <2 x float>* %53, align 4
  %54 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 3
  %55 = bitcast %struct.SkPoint* %54 to <2 x float>*
  store <2 x float> %48, <2 x float>* %55, align 4
  %56 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 4
  %57 = bitcast %struct.SkPoint* %56 to <2 x float>*
  store <2 x float> %45, <2 x float>* %57, align 4
  %58 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 5
  %59 = bitcast %struct.SkPoint* %58 to <2 x float>*
  store <2 x float> %39, <2 x float>* %59, align 4
  %60 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 6
  %61 = bitcast %struct.SkPoint* %60 to <2 x float>*
  store <2 x float> %28, <2 x float>* %61, align 4
  br label %62

62:                                               ; preds = %17, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_Z13SkChopCubicAtPK7SkPointPS_ff(%struct.SkPoint* nocapture readonly, %struct.SkPoint*, float, float) local_unnamed_addr #5 {
  %5 = fcmp oeq float %3, 1.000000e+00
  br i1 %5, label %6, label %75

6:                                                ; preds = %4
  %7 = fcmp oeq float %2, 1.000000e+00
  br i1 %7, label %8, label %20

8:                                                ; preds = %6
  %9 = bitcast %struct.SkPoint* %1 to i8*
  %10 = bitcast %struct.SkPoint* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %9, i8* align 4 %10, i64 32, i1 false) #16
  %11 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 3
  %12 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 6
  %13 = bitcast %struct.SkPoint* %11 to i64*
  %14 = bitcast %struct.SkPoint* %12 to i64*
  %15 = load i64, i64* %13, align 4
  store i64 %15, i64* %14, align 4
  %16 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 5
  %17 = bitcast %struct.SkPoint* %16 to i64*
  store i64 %15, i64* %17, align 4
  %18 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 4
  %19 = bitcast %struct.SkPoint* %18 to i64*
  store i64 %15, i64* %19, align 4
  br label %66

20:                                               ; preds = %6
  %21 = bitcast %struct.SkPoint* %0 to <2 x float>*
  %22 = load <2 x float>, <2 x float>* %21, align 4
  %23 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1
  %24 = bitcast %struct.SkPoint* %23 to <2 x float>*
  %25 = load <2 x float>, <2 x float>* %24, align 4
  %26 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2
  %27 = bitcast %struct.SkPoint* %26 to <2 x float>*
  %28 = load <2 x float>, <2 x float>* %27, align 4
  %29 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 3
  %30 = bitcast %struct.SkPoint* %29 to <2 x float>*
  %31 = load <2 x float>, <2 x float>* %30, align 4
  %32 = insertelement <2 x float> undef, float %2, i32 0
  %33 = shufflevector <2 x float> %32, <2 x float> undef, <2 x i32> zeroinitializer
  %34 = fsub <2 x float> %25, %22
  %35 = fmul <2 x float> %33, %34
  %36 = fadd <2 x float> %22, %35
  %37 = fsub <2 x float> %28, %25
  %38 = fmul <2 x float> %33, %37
  %39 = fadd <2 x float> %25, %38
  %40 = fsub <2 x float> %31, %28
  %41 = fmul <2 x float> %33, %40
  %42 = fadd <2 x float> %28, %41
  %43 = fsub <2 x float> %39, %36
  %44 = fmul <2 x float> %33, %43
  %45 = fadd <2 x float> %36, %44
  %46 = fsub <2 x float> %42, %39
  %47 = fmul <2 x float> %33, %46
  %48 = fadd <2 x float> %39, %47
  %49 = fsub <2 x float> %48, %45
  %50 = fmul <2 x float> %33, %49
  %51 = fadd <2 x float> %45, %50
  %52 = bitcast %struct.SkPoint* %1 to <2 x float>*
  store <2 x float> %22, <2 x float>* %52, align 4
  %53 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 1
  %54 = bitcast %struct.SkPoint* %53 to <2 x float>*
  store <2 x float> %36, <2 x float>* %54, align 4
  %55 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 2
  %56 = bitcast %struct.SkPoint* %55 to <2 x float>*
  store <2 x float> %45, <2 x float>* %56, align 4
  %57 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 3
  %58 = bitcast %struct.SkPoint* %57 to <2 x float>*
  store <2 x float> %51, <2 x float>* %58, align 4
  %59 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 4
  %60 = bitcast %struct.SkPoint* %59 to <2 x float>*
  store <2 x float> %48, <2 x float>* %60, align 4
  %61 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 5
  %62 = bitcast %struct.SkPoint* %61 to <2 x float>*
  store <2 x float> %42, <2 x float>* %62, align 4
  %63 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 6
  %64 = bitcast %struct.SkPoint* %63 to <2 x float>*
  store <2 x float> %31, <2 x float>* %64, align 4
  %65 = bitcast %struct.SkPoint* %29 to i64*
  br label %66

66:                                               ; preds = %8, %20
  %67 = phi i64* [ %13, %8 ], [ %65, %20 ]
  %68 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 9
  %69 = bitcast %struct.SkPoint* %68 to i64*
  %70 = load i64, i64* %67, align 4
  store i64 %70, i64* %69, align 4
  %71 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 8
  %72 = bitcast %struct.SkPoint* %71 to i64*
  store i64 %70, i64* %72, align 4
  %73 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 7
  %74 = bitcast %struct.SkPoint* %73 to i64*
  store i64 %70, i64* %74, align 4
  br label %151

75:                                               ; preds = %4
  %76 = bitcast %struct.SkPoint* %0 to <2 x float>*
  %77 = load <2 x float>, <2 x float>* %76, align 4
  %78 = shufflevector <2 x float> %77, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %79 = shufflevector <2 x float> %77, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %80 = shufflevector <4 x float> %79, <4 x float> %78, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %81 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1
  %82 = bitcast %struct.SkPoint* %81 to <2 x float>*
  %83 = load <2 x float>, <2 x float>* %82, align 4
  %84 = shufflevector <2 x float> %83, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %85 = shufflevector <2 x float> %83, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %86 = shufflevector <4 x float> %85, <4 x float> %84, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %87 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2
  %88 = bitcast %struct.SkPoint* %87 to <2 x float>*
  %89 = load <2 x float>, <2 x float>* %88, align 4
  %90 = shufflevector <2 x float> %89, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %91 = shufflevector <2 x float> %89, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %92 = shufflevector <4 x float> %91, <4 x float> %90, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %93 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 3
  %94 = bitcast %struct.SkPoint* %93 to <2 x float>*
  %95 = load <2 x float>, <2 x float>* %94, align 4
  %96 = shufflevector <2 x float> %95, <2 x float> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %97 = shufflevector <2 x float> %95, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %98 = shufflevector <4 x float> %97, <4 x float> %96, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %99 = insertelement <4 x float> undef, float %2, i32 0
  %100 = insertelement <4 x float> %99, float %2, i32 1
  %101 = insertelement <4 x float> %100, float %3, i32 2
  %102 = insertelement <4 x float> %101, float %3, i32 3
  %103 = fsub <4 x float> %86, %80
  %104 = fmul <4 x float> %102, %103
  %105 = fadd <4 x float> %80, %104
  %106 = fsub <4 x float> %92, %86
  %107 = fmul <4 x float> %102, %106
  %108 = fadd <4 x float> %86, %107
  %109 = fsub <4 x float> %98, %92
  %110 = fmul <4 x float> %102, %109
  %111 = fadd <4 x float> %92, %110
  %112 = fsub <4 x float> %108, %105
  %113 = fmul <4 x float> %102, %112
  %114 = fadd <4 x float> %105, %113
  %115 = fsub <4 x float> %111, %108
  %116 = fmul <4 x float> %102, %115
  %117 = fadd <4 x float> %108, %116
  %118 = fsub <4 x float> %117, %114
  %119 = fmul <4 x float> %102, %118
  %120 = fadd <4 x float> %114, %119
  %121 = shufflevector <4 x float> %120, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %122 = shufflevector <4 x float> %120, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %123 = shufflevector <4 x float> %102, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %124 = fmul <4 x float> %123, %118
  %125 = fadd <4 x float> %114, %124
  %126 = shufflevector <4 x float> %125, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %127 = shufflevector <4 x float> %125, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %128 = bitcast %struct.SkPoint* %1 to <2 x float>*
  store <2 x float> %77, <2 x float>* %128, align 4
  %129 = shufflevector <4 x float> %105, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %130 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 1
  %131 = bitcast %struct.SkPoint* %130 to <2 x float>*
  store <2 x float> %129, <2 x float>* %131, align 4
  %132 = shufflevector <4 x float> %114, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %133 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 2
  %134 = bitcast %struct.SkPoint* %133 to <2 x float>*
  store <2 x float> %132, <2 x float>* %134, align 4
  %135 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 3
  %136 = bitcast %struct.SkPoint* %135 to <2 x float>*
  store <2 x float> %121, <2 x float>* %136, align 4
  %137 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 4
  %138 = bitcast %struct.SkPoint* %137 to <2 x float>*
  store <2 x float> %126, <2 x float>* %138, align 1
  %139 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 5
  %140 = bitcast %struct.SkPoint* %139 to <2 x float>*
  store <2 x float> %127, <2 x float>* %140, align 1
  %141 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 6
  %142 = bitcast %struct.SkPoint* %141 to <2 x float>*
  store <2 x float> %122, <2 x float>* %142, align 4
  %143 = shufflevector <4 x float> %117, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %144 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 7
  %145 = bitcast %struct.SkPoint* %144 to <2 x float>*
  store <2 x float> %143, <2 x float>* %145, align 4
  %146 = shufflevector <4 x float> %111, <4 x float> undef, <2 x i32> <i32 2, i32 3>
  %147 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 8
  %148 = bitcast %struct.SkPoint* %147 to <2 x float>*
  store <2 x float> %146, <2 x float>* %148, align 4
  %149 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 9
  %150 = bitcast %struct.SkPoint* %149 to <2 x float>*
  store <2 x float> %95, <2 x float>* %150, align 4
  br label %151

151:                                              ; preds = %75, %66
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_Z13SkChopCubicAtPK7SkPointPS_PKfi(%struct.SkPoint* nocapture readonly, %struct.SkPoint*, float* nocapture readonly, i32) local_unnamed_addr #6 {
  %5 = icmp eq %struct.SkPoint* %1, null
  br i1 %5, label %146, label %6

6:                                                ; preds = %4
  %7 = icmp eq i32 %3, 0
  br i1 %7, label %13, label %8

8:                                                ; preds = %6
  %9 = add nsw i32 %3, -1
  %10 = icmp sgt i32 %9, 0
  br i1 %10, label %11, label %64

11:                                               ; preds = %8
  %12 = sext i32 %9 to i64
  br label %16

13:                                               ; preds = %6
  %14 = bitcast %struct.SkPoint* %1 to i8*
  %15 = bitcast %struct.SkPoint* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %14, i8* align 4 %15, i64 32, i1 false)
  br label %146

16:                                               ; preds = %11, %55
  %17 = phi i64 [ 0, %11 ], [ %60, %55 ]
  %18 = phi %struct.SkPoint* [ %0, %11 ], [ %59, %55 ]
  %19 = phi %struct.SkPoint* [ %1, %11 ], [ %59, %55 ]
  %20 = getelementptr inbounds float, float* %2, i64 %17
  %21 = bitcast float* %20 to <2 x float>*
  %22 = load <2 x float>, <2 x float>* %21, align 1
  %23 = icmp eq i64 %17, 0
  br i1 %23, label %55, label %24

24:                                               ; preds = %16
  %25 = add nsw i64 %17, -1
  %26 = getelementptr inbounds float, float* %2, i64 %25
  %27 = load float, float* %26, align 4
  %28 = insertelement <2 x float> undef, float %27, i32 0
  %29 = shufflevector <2 x float> %28, <2 x float> undef, <2 x i32> zeroinitializer
  %30 = fsub <2 x float> %22, %29
  %31 = fsub float 1.000000e+00, %27
  %32 = insertelement <2 x float> undef, float %31, i32 0
  %33 = shufflevector <2 x float> %32, <2 x float> undef, <2 x i32> zeroinitializer
  %34 = fdiv <2 x float> %30, %33
  %35 = fcmp ule <2 x float> %34, <float 1.000000e+00, float 1.000000e+00>
  %36 = bitcast <2 x float> %34 to <2 x i32>
  %37 = select <2 x i1> %35, <2 x i32> %36, <2 x i32> <i32 1065353216, i32 1065353216>
  %38 = extractelement <2 x i32> %37, i32 0
  %39 = extractelement <2 x i32> %37, i32 1
  %40 = zext i32 %39 to i64
  %41 = shl nuw i64 %40, 32
  %42 = zext i32 %38 to i64
  %43 = or i64 %41, %42
  %44 = bitcast i64 %43 to <2 x float>
  %45 = fcmp ule <2 x float> %44, zeroinitializer
  %46 = bitcast i64 %43 to <2 x i32>
  %47 = select <2 x i1> %45, <2 x i32> zeroinitializer, <2 x i32> %46
  %48 = extractelement <2 x i32> %47, i32 0
  %49 = extractelement <2 x i32> %47, i32 1
  %50 = zext i32 %49 to i64
  %51 = shl nuw i64 %50, 32
  %52 = zext i32 %48 to i64
  %53 = or i64 %51, %52
  %54 = bitcast i64 %53 to <2 x float>
  br label %55

55:                                               ; preds = %16, %24
  %56 = phi <2 x float> [ %22, %16 ], [ %54, %24 ]
  %57 = extractelement <2 x float> %56, i32 0
  %58 = extractelement <2 x float> %56, i32 1
  tail call void @_Z13SkChopCubicAtPK7SkPointPS_ff(%struct.SkPoint* %18, %struct.SkPoint* %19, float %57, float %58)
  %59 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %19, i64 6
  %60 = add nuw i64 %17, 2
  %61 = icmp slt i64 %60, %12
  br i1 %61, label %16, label %62

62:                                               ; preds = %55
  %63 = trunc i64 %60 to i32
  br label %64

64:                                               ; preds = %62, %8
  %65 = phi i32 [ 0, %8 ], [ %63, %62 ]
  %66 = phi %struct.SkPoint* [ %1, %8 ], [ %59, %62 ]
  %67 = phi %struct.SkPoint* [ %0, %8 ], [ %59, %62 ]
  %68 = icmp slt i32 %65, %3
  br i1 %68, label %69, label %146

69:                                               ; preds = %64
  %70 = zext i32 %65 to i64
  %71 = getelementptr inbounds float, float* %2, i64 %70
  %72 = load float, float* %71, align 4
  %73 = icmp eq i32 %65, 0
  br i1 %73, label %85, label %74

74:                                               ; preds = %69
  %75 = add nsw i32 %65, -1
  %76 = sext i32 %75 to i64
  %77 = getelementptr inbounds float, float* %2, i64 %76
  %78 = load float, float* %77, align 4
  %79 = fsub float %72, %78
  %80 = fsub float 1.000000e+00, %78
  %81 = fdiv float %79, %80
  %82 = fcmp ogt float %81, 1.000000e+00
  %83 = select i1 %82, float 1.000000e+00, float %81
  %84 = fcmp ogt float %83, 0.000000e+00
  br i1 %84, label %85, label %100

85:                                               ; preds = %74, %69
  %86 = phi float [ %72, %69 ], [ %83, %74 ]
  %87 = fcmp oeq float %86, 1.000000e+00
  br i1 %87, label %88, label %100

88:                                               ; preds = %85
  %89 = bitcast %struct.SkPoint* %66 to i8*
  %90 = bitcast %struct.SkPoint* %67 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %89, i8* align 4 %90, i64 32, i1 false) #16
  %91 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %67, i64 3
  %92 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %66, i64 6
  %93 = bitcast %struct.SkPoint* %91 to i64*
  %94 = bitcast %struct.SkPoint* %92 to i64*
  %95 = load i64, i64* %93, align 4
  store i64 %95, i64* %94, align 4
  %96 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %66, i64 5
  %97 = bitcast %struct.SkPoint* %96 to i64*
  store i64 %95, i64* %97, align 4
  %98 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %66, i64 4
  %99 = bitcast %struct.SkPoint* %98 to i64*
  store i64 %95, i64* %99, align 4
  br label %146

100:                                              ; preds = %74, %85
  %101 = phi float [ %86, %85 ], [ 0.000000e+00, %74 ]
  %102 = bitcast %struct.SkPoint* %67 to <2 x float>*
  %103 = load <2 x float>, <2 x float>* %102, align 4
  %104 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %67, i64 1
  %105 = bitcast %struct.SkPoint* %104 to <2 x float>*
  %106 = load <2 x float>, <2 x float>* %105, align 4
  %107 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %67, i64 2
  %108 = bitcast %struct.SkPoint* %107 to <2 x float>*
  %109 = load <2 x float>, <2 x float>* %108, align 4
  %110 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %67, i64 3
  %111 = bitcast %struct.SkPoint* %110 to <2 x float>*
  %112 = load <2 x float>, <2 x float>* %111, align 4
  %113 = insertelement <2 x float> undef, float %101, i32 0
  %114 = shufflevector <2 x float> %113, <2 x float> undef, <2 x i32> zeroinitializer
  %115 = fsub <2 x float> %106, %103
  %116 = fmul <2 x float> %114, %115
  %117 = fadd <2 x float> %103, %116
  %118 = fsub <2 x float> %109, %106
  %119 = fmul <2 x float> %114, %118
  %120 = fadd <2 x float> %106, %119
  %121 = fsub <2 x float> %112, %109
  %122 = fmul <2 x float> %114, %121
  %123 = fadd <2 x float> %109, %122
  %124 = fsub <2 x float> %120, %117
  %125 = fmul <2 x float> %114, %124
  %126 = fadd <2 x float> %117, %125
  %127 = fsub <2 x float> %123, %120
  %128 = fmul <2 x float> %114, %127
  %129 = fadd <2 x float> %120, %128
  %130 = fsub <2 x float> %129, %126
  %131 = fmul <2 x float> %114, %130
  %132 = fadd <2 x float> %126, %131
  %133 = bitcast %struct.SkPoint* %66 to <2 x float>*
  store <2 x float> %103, <2 x float>* %133, align 4
  %134 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %66, i64 1
  %135 = bitcast %struct.SkPoint* %134 to <2 x float>*
  store <2 x float> %117, <2 x float>* %135, align 4
  %136 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %66, i64 2
  %137 = bitcast %struct.SkPoint* %136 to <2 x float>*
  store <2 x float> %126, <2 x float>* %137, align 4
  %138 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %66, i64 3
  %139 = bitcast %struct.SkPoint* %138 to <2 x float>*
  store <2 x float> %132, <2 x float>* %139, align 4
  %140 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %66, i64 4
  %141 = bitcast %struct.SkPoint* %140 to <2 x float>*
  store <2 x float> %129, <2 x float>* %141, align 4
  %142 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %66, i64 5
  %143 = bitcast %struct.SkPoint* %142 to <2 x float>*
  store <2 x float> %123, <2 x float>* %143, align 4
  %144 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %66, i64 6
  %145 = bitcast %struct.SkPoint* %144 to <2 x float>*
  store <2 x float> %112, <2 x float>* %145, align 4
  br label %146

146:                                              ; preds = %100, %88, %64, %4, %13
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_Z17SkChopCubicAtHalfPK7SkPointPS_(%struct.SkPoint* nocapture readonly, %struct.SkPoint* nocapture) local_unnamed_addr #11 {
  %3 = bitcast %struct.SkPoint* %0 to <2 x float>*
  %4 = load <2 x float>, <2 x float>* %3, align 4
  %5 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1
  %6 = bitcast %struct.SkPoint* %5 to <2 x float>*
  %7 = load <2 x float>, <2 x float>* %6, align 4
  %8 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2
  %9 = bitcast %struct.SkPoint* %8 to <2 x float>*
  %10 = load <2 x float>, <2 x float>* %9, align 4
  %11 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 3
  %12 = bitcast %struct.SkPoint* %11 to <2 x float>*
  %13 = load <2 x float>, <2 x float>* %12, align 4
  %14 = fsub <2 x float> %7, %4
  %15 = fmul <2 x float> %14, <float 5.000000e-01, float 5.000000e-01>
  %16 = fadd <2 x float> %4, %15
  %17 = fsub <2 x float> %10, %7
  %18 = fmul <2 x float> %17, <float 5.000000e-01, float 5.000000e-01>
  %19 = fadd <2 x float> %7, %18
  %20 = fsub <2 x float> %13, %10
  %21 = fmul <2 x float> %20, <float 5.000000e-01, float 5.000000e-01>
  %22 = fadd <2 x float> %10, %21
  %23 = fsub <2 x float> %19, %16
  %24 = fmul <2 x float> %23, <float 5.000000e-01, float 5.000000e-01>
  %25 = fadd <2 x float> %16, %24
  %26 = fsub <2 x float> %22, %19
  %27 = fmul <2 x float> %26, <float 5.000000e-01, float 5.000000e-01>
  %28 = fadd <2 x float> %19, %27
  %29 = fsub <2 x float> %28, %25
  %30 = fmul <2 x float> %29, <float 5.000000e-01, float 5.000000e-01>
  %31 = fadd <2 x float> %25, %30
  %32 = bitcast %struct.SkPoint* %1 to <2 x float>*
  store <2 x float> %4, <2 x float>* %32, align 4
  %33 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 1
  %34 = bitcast %struct.SkPoint* %33 to <2 x float>*
  store <2 x float> %16, <2 x float>* %34, align 4
  %35 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 2
  %36 = bitcast %struct.SkPoint* %35 to <2 x float>*
  store <2 x float> %25, <2 x float>* %36, align 4
  %37 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 3
  %38 = bitcast %struct.SkPoint* %37 to <2 x float>*
  store <2 x float> %31, <2 x float>* %38, align 4
  %39 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 4
  %40 = bitcast %struct.SkPoint* %39 to <2 x float>*
  store <2 x float> %28, <2 x float>* %40, align 4
  %41 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 5
  %42 = bitcast %struct.SkPoint* %41 to <2 x float>*
  store <2 x float> %22, <2 x float>* %42, align 4
  %43 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 6
  %44 = bitcast %struct.SkPoint* %43 to <2 x float>*
  store <2 x float> %13, <2 x float>* %44, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden float @_Z32SkMeasureNonInflectCubicRotationPK7SkPoint(%struct.SkPoint* nocapture readonly) local_unnamed_addr #6 {
  %2 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 0
  %3 = bitcast float* %2 to <2 x float>*
  %4 = load <2 x float>, <2 x float>* %3, align 4
  %5 = bitcast %struct.SkPoint* %0 to <2 x float>*
  %6 = load <2 x float>, <2 x float>* %5, align 4
  %7 = fsub <2 x float> %4, %6
  %8 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2, i32 0
  %9 = load float, float* %8, align 4
  %10 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2, i32 1
  %11 = load float, float* %10, align 4
  %12 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 3, i32 0
  %13 = load float, float* %12, align 4
  %14 = insertelement <2 x float> undef, float %9, i32 0
  %15 = insertelement <2 x float> %14, float %13, i32 1
  %16 = extractelement <2 x float> %4, i32 0
  %17 = insertelement <2 x float> undef, float %16, i32 0
  %18 = insertelement <2 x float> %17, float %9, i32 1
  %19 = fsub <2 x float> %15, %18
  %20 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 3, i32 1
  %21 = load float, float* %20, align 4
  %22 = insertelement <2 x float> undef, float %11, i32 0
  %23 = insertelement <2 x float> %22, float %21, i32 1
  %24 = extractelement <2 x float> %4, i32 1
  %25 = insertelement <2 x float> undef, float %24, i32 0
  %26 = insertelement <2 x float> %25, float %11, i32 1
  %27 = fsub <2 x float> %23, %26
  %28 = extractelement <2 x float> %7, i32 0
  %29 = fcmp oeq float %28, 0.000000e+00
  %30 = extractelement <2 x float> %7, i32 1
  %31 = fcmp oeq float %30, 0.000000e+00
  %32 = and i1 %29, %31
  %33 = extractelement <2 x float> %19, i32 0
  br i1 %32, label %34, label %54

34:                                               ; preds = %1
  %35 = extractelement <2 x float> %19, i32 1
  %36 = fmul float %33, %35
  %37 = extractelement <2 x float> %27, i32 0
  %38 = extractelement <2 x float> %27, i32 1
  %39 = fmul float %37, %38
  %40 = fadd float %36, %39
  %41 = fmul <2 x float> %19, %19
  %42 = fmul <2 x float> %27, %27
  %43 = fadd <2 x float> %41, %42
  %44 = extractelement <2 x float> %43, i32 0
  %45 = extractelement <2 x float> %43, i32 1
  %46 = fmul float %44, %45
  %47 = tail call float @sqrtf(float %46) #16
  %48 = fdiv float %40, %47
  %49 = fcmp olt float %48, 1.000000e+00
  %50 = select i1 %49, float %48, float 1.000000e+00
  %51 = fcmp olt float %50, -1.000000e+00
  %52 = select i1 %51, float -1.000000e+00, float %50
  %53 = tail call float @acosf(float %52) #16
  br label %139

54:                                               ; preds = %1
  %55 = fcmp oeq float %33, 0.000000e+00
  %56 = extractelement <2 x float> %27, i32 0
  %57 = fcmp oeq float %56, 0.000000e+00
  %58 = and i1 %55, %57
  br i1 %58, label %59, label %80

59:                                               ; preds = %54
  %60 = shufflevector <2 x float> %19, <2 x float> %27, <2 x i32> <i32 1, i32 3>
  %61 = fmul <2 x float> %7, %60
  %62 = extractelement <2 x float> %61, i32 0
  %63 = extractelement <2 x float> %61, i32 1
  %64 = fadd float %62, %63
  %65 = shufflevector <2 x float> %7, <2 x float> %19, <2 x i32> <i32 0, i32 3>
  %66 = fmul <2 x float> %65, %65
  %67 = shufflevector <2 x float> %7, <2 x float> %27, <2 x i32> <i32 1, i32 3>
  %68 = fmul <2 x float> %67, %67
  %69 = fadd <2 x float> %66, %68
  %70 = extractelement <2 x float> %69, i32 0
  %71 = extractelement <2 x float> %69, i32 1
  %72 = fmul float %70, %71
  %73 = tail call float @sqrtf(float %72) #16
  %74 = fdiv float %64, %73
  %75 = fcmp olt float %74, 1.000000e+00
  %76 = select i1 %75, float %74, float 1.000000e+00
  %77 = fcmp olt float %76, -1.000000e+00
  %78 = select i1 %77, float -1.000000e+00, float %76
  %79 = tail call float @acosf(float %78) #16
  br label %139

80:                                               ; preds = %54
  %81 = extractelement <2 x float> %19, i32 1
  %82 = fcmp oeq float %81, 0.000000e+00
  %83 = extractelement <2 x float> %27, i32 1
  %84 = fcmp oeq float %83, 0.000000e+00
  %85 = and i1 %82, %84
  %86 = fmul float %28, %33
  %87 = fmul float %30, %56
  br i1 %85, label %88, label %105

88:                                               ; preds = %80
  %89 = fadd float %86, %87
  %90 = shufflevector <2 x float> %7, <2 x float> %19, <2 x i32> <i32 0, i32 2>
  %91 = fmul <2 x float> %90, %90
  %92 = shufflevector <2 x float> %7, <2 x float> %27, <2 x i32> <i32 1, i32 2>
  %93 = fmul <2 x float> %92, %92
  %94 = fadd <2 x float> %91, %93
  %95 = extractelement <2 x float> %94, i32 0
  %96 = extractelement <2 x float> %94, i32 1
  %97 = fmul float %95, %96
  %98 = tail call float @sqrtf(float %97) #16
  %99 = fdiv float %89, %98
  %100 = fcmp olt float %99, 1.000000e+00
  %101 = select i1 %100, float %99, float 1.000000e+00
  %102 = fcmp olt float %101, -1.000000e+00
  %103 = select i1 %102, float -1.000000e+00, float %101
  %104 = tail call float @acosf(float %103) #16
  br label %139

105:                                              ; preds = %80
  %106 = fsub float -0.000000e+00, %87
  %107 = fsub float %106, %86
  %108 = fmul <2 x float> %7, %7
  %109 = extractelement <2 x float> %108, i32 0
  %110 = extractelement <2 x float> %108, i32 1
  %111 = fadd float %109, %110
  %112 = fmul <2 x float> %19, %19
  %113 = fmul <2 x float> %27, %27
  %114 = fadd <2 x float> %112, %113
  %115 = extractelement <2 x float> %114, i32 0
  %116 = fmul float %111, %115
  %117 = tail call float @sqrtf(float %116) #16
  %118 = fdiv float %107, %117
  %119 = fcmp olt float %118, 1.000000e+00
  %120 = select i1 %119, float %118, float 1.000000e+00
  %121 = fcmp olt float %120, -1.000000e+00
  %122 = select i1 %121, float -1.000000e+00, float %120
  %123 = tail call float @acosf(float %122) #16
  %124 = fsub float 0x401921FB60000000, %123
  %125 = fmul float %33, %81
  %126 = fmul float %56, %83
  %127 = fsub float -0.000000e+00, %126
  %128 = fsub float %127, %125
  %129 = extractelement <2 x float> %114, i32 1
  %130 = fmul float %115, %129
  %131 = tail call float @sqrtf(float %130) #16
  %132 = fdiv float %128, %131
  %133 = fcmp olt float %132, 1.000000e+00
  %134 = select i1 %133, float %132, float 1.000000e+00
  %135 = fcmp olt float %134, -1.000000e+00
  %136 = select i1 %135, float -1.000000e+00, float %134
  %137 = tail call float @acosf(float %136) #16
  %138 = fsub float %124, %137
  br label %139

139:                                              ; preds = %105, %88, %59, %34
  %140 = phi float [ %53, %34 ], [ %79, %59 ], [ %104, %88 ], [ %138, %105 ]
  ret float %140
}

; Function Attrs: nounwind ssp uwtable
define hidden float @_Z21SkFindCubicMidTangentPK7SkPoint(%struct.SkPoint* nocapture readonly) local_unnamed_addr #5 {
  %2 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 0, i32 0
  %3 = load float, float* %2, align 4
  %4 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 0
  %5 = load float, float* %4, align 4
  %6 = fcmp oeq float %3, %5
  br i1 %6, label %12, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 1
  %9 = load float, float* %8, align 4
  %10 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 0, i32 1
  %11 = load float, float* %10, align 4
  br label %26

12:                                               ; preds = %1
  %13 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 0, i32 1
  %14 = load float, float* %13, align 4
  %15 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 1
  %16 = load float, float* %15, align 4
  %17 = fcmp oeq float %14, %16
  br i1 %17, label %18, label %26

18:                                               ; preds = %12
  %19 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2, i32 0
  %20 = bitcast float* %19 to <2 x float>*
  %21 = load <2 x float>, <2 x float>* %20, align 4
  %22 = insertelement <2 x float> undef, float %3, i32 0
  %23 = insertelement <2 x float> %22, float %14, i32 1
  %24 = fsub <2 x float> %21, %23
  %25 = extractelement <2 x float> %21, i32 0
  br label %35

26:                                               ; preds = %7, %12
  %27 = phi float [ %11, %7 ], [ %14, %12 ]
  %28 = phi float [ %9, %7 ], [ %16, %12 ]
  %29 = fsub float %5, %3
  %30 = insertelement <2 x float> undef, float %29, i32 0
  %31 = fsub float %28, %27
  %32 = insertelement <2 x float> %30, float %31, i32 1
  %33 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2, i32 0
  %34 = load float, float* %33, align 4
  br label %35

35:                                               ; preds = %26, %18
  %36 = phi float [ %16, %18 ], [ %28, %26 ]
  %37 = phi float [ %25, %18 ], [ %34, %26 ]
  %38 = phi <2 x float> [ %24, %18 ], [ %32, %26 ]
  %39 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2, i32 0
  %40 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 3, i32 0
  %41 = load float, float* %40, align 4
  %42 = fcmp oeq float %37, %41
  br i1 %42, label %48, label %43

43:                                               ; preds = %35
  %44 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 3, i32 1
  %45 = load float, float* %44, align 4
  %46 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2, i32 1
  %47 = load float, float* %46, align 4
  br label %58

48:                                               ; preds = %35
  %49 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2, i32 1
  %50 = load float, float* %49, align 4
  %51 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 3, i32 1
  %52 = load float, float* %51, align 4
  %53 = fcmp oeq float %50, %52
  br i1 %53, label %54, label %58

54:                                               ; preds = %48
  %55 = fsub float %41, %5
  %56 = insertelement <2 x float> undef, float %55, i32 0
  %57 = fsub float %52, %36
  br label %64

58:                                               ; preds = %43, %48
  %59 = phi float [ %47, %43 ], [ %50, %48 ]
  %60 = phi float [ %45, %43 ], [ %52, %48 ]
  %61 = fsub float %41, %37
  %62 = insertelement <2 x float> undef, float %61, i32 0
  %63 = fsub float %60, %59
  br label %64

64:                                               ; preds = %58, %54
  %65 = phi float [ %63, %58 ], [ %57, %54 ]
  %66 = phi <2 x float> [ %62, %58 ], [ %56, %54 ]
  %67 = extractelement <2 x float> %66, i32 0
  %68 = fsub float -0.000000e+00, %67
  %69 = fsub float -0.000000e+00, %65
  %70 = extractelement <2 x float> %38, i32 0
  %71 = fmul float %70, %68
  %72 = extractelement <2 x float> %38, i32 1
  %73 = fmul float %72, %69
  %74 = fadd float %71, %73
  %75 = fcmp ult float %74, 0.000000e+00
  br i1 %75, label %80, label %76

76:                                               ; preds = %64
  %77 = bitcast <2 x float> %38 to <2 x i32>
  %78 = extractelement <2 x i32> %77, i32 0
  %79 = extractelement <2 x i32> %77, i32 1
  br label %93

80:                                               ; preds = %64
  %81 = fmul float %70, %69
  %82 = fmul float %72, %68
  %83 = fsub float %81, %82
  %84 = fcmp ult float %83, 0.000000e+00
  br i1 %84, label %89, label %85

85:                                               ; preds = %80
  %86 = fsub float -0.000000e+00, %72
  %87 = bitcast float %86 to i32
  %88 = bitcast float %70 to i32
  br label %93

89:                                               ; preds = %80
  %90 = fsub float -0.000000e+00, %70
  %91 = bitcast float %72 to i32
  %92 = bitcast float %90 to i32
  br label %93

93:                                               ; preds = %76, %85, %89
  %94 = phi i32 [ %91, %89 ], [ %87, %85 ], [ %78, %76 ]
  %95 = phi i32 [ %92, %89 ], [ %88, %85 ], [ %79, %76 ]
  %96 = phi float [ %65, %89 ], [ %69, %85 ], [ %68, %76 ]
  %97 = phi float [ %68, %89 ], [ %67, %85 ], [ %69, %76 ]
  %98 = bitcast i32 %94 to float
  %99 = insertelement <4 x float> <float undef, float undef, float 0.000000e+00, float 0.000000e+00>, float %98, i32 0
  %100 = insertelement <4 x float> %99, float %96, i32 1
  %101 = bitcast i32 %95 to float
  %102 = insertelement <4 x float> <float undef, float undef, float 0.000000e+00, float 0.000000e+00>, float %101, i32 0
  %103 = insertelement <4 x float> %102, float %97, i32 1
  %104 = fmul <4 x float> %100, %100
  %105 = fmul <4 x float> %103, %103
  %106 = fadd <4 x float> %104, %105
  %107 = tail call <4 x float> @llvm.sqrt.v4f32(<4 x float> %106) #16
  %108 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %107
  %109 = fmul <4 x float> %100, %108
  %110 = fmul <4 x float> %103, %108
  %111 = extractelement <4 x float> %109, i32 0
  %112 = extractelement <4 x float> %109, i32 1
  %113 = fadd float %111, %112
  %114 = extractelement <4 x float> %110, i32 0
  %115 = extractelement <4 x float> %110, i32 1
  %116 = fadd float %114, %115
  %117 = load atomic i8, i8* bitcast (i64* @_ZGVZ21SkFindCubicMidTangentPK7SkPointE2kM to i8*) acquire, align 8
  %118 = icmp eq i8 %117, 0
  br i1 %118, label %119, label %124, !prof !2

119:                                              ; preds = %93
  %120 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZ21SkFindCubicMidTangentPK7SkPointE2kM) #16
  %121 = icmp eq i32 %120, 0
  br i1 %121, label %124, label %122

122:                                              ; preds = %119
  store <4 x float> <float -1.000000e+00, float 2.000000e+00, float -1.000000e+00, float 0.000000e+00>, <4 x float>* getelementptr inbounds ([4 x %"class.(anonymous namespace)::SkNx.2"], [4 x %"class.(anonymous namespace)::SkNx.2"]* @_ZZ21SkFindCubicMidTangentPK7SkPointE2kM, i64 0, i64 0, i32 0), align 16
  store <4 x float> <float 3.000000e+00, float -4.000000e+00, float 1.000000e+00, float 0.000000e+00>, <4 x float>* getelementptr inbounds ([4 x %"class.(anonymous namespace)::SkNx.2"], [4 x %"class.(anonymous namespace)::SkNx.2"]* @_ZZ21SkFindCubicMidTangentPK7SkPointE2kM, i64 0, i64 1, i32 0), align 16
  store <4 x float> <float -3.000000e+00, float 2.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* getelementptr inbounds ([4 x %"class.(anonymous namespace)::SkNx.2"], [4 x %"class.(anonymous namespace)::SkNx.2"]* @_ZZ21SkFindCubicMidTangentPK7SkPointE2kM, i64 0, i64 2, i32 0), align 16
  %123 = tail call {}* @llvm.invariant.start.p0i8(i64 64, i8* bitcast ([4 x %"class.(anonymous namespace)::SkNx.2"]* @_ZZ21SkFindCubicMidTangentPK7SkPointE2kM to i8*))
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZ21SkFindCubicMidTangentPK7SkPointE2kM) #16
  br label %124

124:                                              ; preds = %119, %122, %93
  %125 = load float, float* %2, align 4
  %126 = load float, float* %4, align 4
  %127 = load float, float* %39, align 4
  %128 = load float, float* %40, align 4
  %129 = insertelement <4 x float> <float undef, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %128, i32 0
  %130 = insertelement <4 x float> undef, float %127, i32 0
  %131 = shufflevector <4 x float> %130, <4 x float> undef, <4 x i32> zeroinitializer
  %132 = load <4 x float>, <4 x float>* getelementptr inbounds ([4 x %"class.(anonymous namespace)::SkNx.2"], [4 x %"class.(anonymous namespace)::SkNx.2"]* @_ZZ21SkFindCubicMidTangentPK7SkPointE2kM, i64 0, i64 2, i32 0), align 16
  %133 = fmul <4 x float> %131, %132
  %134 = fadd <4 x float> %129, %133
  %135 = insertelement <4 x float> undef, float %126, i32 0
  %136 = shufflevector <4 x float> %135, <4 x float> undef, <4 x i32> zeroinitializer
  %137 = load <4 x float>, <4 x float>* getelementptr inbounds ([4 x %"class.(anonymous namespace)::SkNx.2"], [4 x %"class.(anonymous namespace)::SkNx.2"]* @_ZZ21SkFindCubicMidTangentPK7SkPointE2kM, i64 0, i64 1, i32 0), align 16
  %138 = fmul <4 x float> %136, %137
  %139 = fadd <4 x float> %138, %134
  %140 = insertelement <4 x float> undef, float %125, i32 0
  %141 = shufflevector <4 x float> %140, <4 x float> undef, <4 x i32> zeroinitializer
  %142 = load <4 x float>, <4 x float>* getelementptr inbounds ([4 x %"class.(anonymous namespace)::SkNx.2"], [4 x %"class.(anonymous namespace)::SkNx.2"]* @_ZZ21SkFindCubicMidTangentPK7SkPointE2kM, i64 0, i64 0, i32 0), align 16
  %143 = fmul <4 x float> %141, %142
  %144 = fadd <4 x float> %143, %139
  %145 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 0, i32 1
  %146 = load float, float* %145, align 4
  %147 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 1
  %148 = load float, float* %147, align 4
  %149 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2, i32 1
  %150 = load float, float* %149, align 4
  %151 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 3, i32 1
  %152 = load float, float* %151, align 4
  %153 = insertelement <4 x float> <float undef, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %152, i32 0
  %154 = insertelement <4 x float> undef, float %150, i32 0
  %155 = shufflevector <4 x float> %154, <4 x float> undef, <4 x i32> zeroinitializer
  %156 = fmul <4 x float> %132, %155
  %157 = fadd <4 x float> %153, %156
  %158 = insertelement <4 x float> undef, float %148, i32 0
  %159 = shufflevector <4 x float> %158, <4 x float> undef, <4 x i32> zeroinitializer
  %160 = fmul <4 x float> %137, %159
  %161 = fadd <4 x float> %160, %157
  %162 = insertelement <4 x float> undef, float %146, i32 0
  %163 = shufflevector <4 x float> %162, <4 x float> undef, <4 x i32> zeroinitializer
  %164 = fmul <4 x float> %142, %163
  %165 = fadd <4 x float> %164, %161
  %166 = insertelement <4 x float> undef, float %113, i32 0
  %167 = shufflevector <4 x float> %166, <4 x float> undef, <4 x i32> zeroinitializer
  %168 = fmul <4 x float> %167, %144
  %169 = insertelement <4 x float> undef, float %116, i32 0
  %170 = shufflevector <4 x float> %169, <4 x float> undef, <4 x i32> zeroinitializer
  %171 = fmul <4 x float> %170, %165
  %172 = fadd <4 x float> %168, %171
  %173 = extractelement <4 x float> %172, i32 0
  %174 = extractelement <4 x float> %172, i32 1
  %175 = extractelement <4 x float> %172, i32 2
  %176 = fmul float %174, %174
  %177 = fmul float %173, 4.000000e+00
  %178 = fmul float %175, %177
  %179 = fsub float %176, %178
  %180 = fcmp ogt float %179, 0.000000e+00
  br i1 %180, label %181, label %203

181:                                              ; preds = %124
  %182 = tail call float @sqrtf(float %179) #16
  %183 = tail call float @llvm.copysign.f32(float %182, float %174) #16
  %184 = fadd float %174, %183
  %185 = fmul float %184, -5.000000e-01
  %186 = fmul float %185, -5.000000e-01
  %187 = fmul float %173, %186
  %188 = insertelement <2 x float> undef, float %185, i32 0
  %189 = insertelement <2 x float> %188, float %173, i32 1
  %190 = insertelement <2 x float> %188, float %175, i32 1
  %191 = fmul <2 x float> %189, %190
  %192 = insertelement <2 x float> undef, float %187, i32 0
  %193 = shufflevector <2 x float> %192, <2 x float> undef, <2 x i32> zeroinitializer
  %194 = fadd <2 x float> %191, %193
  %195 = call <2 x float> @llvm.fabs.v2f32(<2 x float> %194)
  %196 = extractelement <2 x float> %195, i32 0
  %197 = extractelement <2 x float> %195, i32 1
  %198 = fcmp olt float %196, %197
  br i1 %198, label %199, label %201

199:                                              ; preds = %181
  %200 = fdiv float %185, %173
  br label %216

201:                                              ; preds = %181
  %202 = fdiv float %175, %185
  br label %216

203:                                              ; preds = %124
  %204 = shufflevector <2 x float> %38, <2 x float> undef, <4 x i32> zeroinitializer
  %205 = fmul <4 x float> %204, %144
  %206 = shufflevector <2 x float> %38, <2 x float> undef, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %207 = fmul <4 x float> %206, %165
  %208 = fadd <4 x float> %205, %207
  %209 = extractelement <4 x float> %208, i32 0
  %210 = fcmp une float %209, 0.000000e+00
  br i1 %210, label %211, label %216

211:                                              ; preds = %203
  %212 = extractelement <4 x float> %208, i32 1
  %213 = fsub float -0.000000e+00, %212
  %214 = fmul float %209, 2.000000e+00
  %215 = fdiv float %213, %214
  br label %216

216:                                              ; preds = %203, %211, %201, %199
  %217 = phi float [ %200, %199 ], [ %202, %201 ], [ %215, %211 ], [ 0.000000e+00, %203 ]
  %218 = fcmp ogt float %217, 0.000000e+00
  %219 = fcmp olt float %217, 1.000000e+00
  %220 = and i1 %218, %219
  %221 = select i1 %220, float %217, float 5.000000e-01
  ret float %221
}

; Function Attrs: nofree nounwind
declare i32 @__cxa_guard_acquire(i64*) local_unnamed_addr #12

; Function Attrs: argmemonly nounwind
declare {}* @llvm.invariant.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree nounwind
declare void @__cxa_guard_release(i64*) local_unnamed_addr #12

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_Z21SkChopCubicAtYExtremaPK7SkPointPS_(%struct.SkPoint* nocapture readonly, %struct.SkPoint*) local_unnamed_addr #13 {
  %3 = alloca [2 x float], align 4
  %4 = bitcast [2 x float]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %4) #16
  %5 = getelementptr inbounds [2 x float], [2 x float]* %3, i64 0, i64 0
  store float 0xFFFFFFFFE0000000, float* %5, align 4
  %6 = getelementptr inbounds [2 x float], [2 x float]* %3, i64 0, i64 1
  store float 0xFFFFFFFFE0000000, float* %6, align 4
  %7 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 0, i32 1
  %8 = load float, float* %7, align 4
  %9 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 1
  %10 = load float, float* %9, align 4
  %11 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2, i32 1
  %12 = load float, float* %11, align 4
  %13 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 3, i32 1
  %14 = load float, float* %13, align 4
  %15 = fsub float %14, %8
  %16 = fsub float %10, %12
  %17 = fmul float %16, 3.000000e+00
  %18 = fadd float %15, %17
  %19 = fsub float %8, %10
  %20 = fsub float %19, %10
  %21 = fadd float %12, %20
  %22 = fmul float %21, 2.000000e+00
  %23 = fsub float %10, %8
  %24 = call i32 @_Z19SkFindUnitQuadRootsfffPf(float %18, float %22, float %23, float* nonnull %5) #16
  call void @_Z13SkChopCubicAtPK7SkPointPS_PKfi(%struct.SkPoint* %0, %struct.SkPoint* %1, float* nonnull %5, i32 %24)
  %25 = icmp ne %struct.SkPoint* %1, null
  %26 = icmp sgt i32 %24, 0
  %27 = and i1 %25, %26
  br i1 %27, label %28, label %47

28:                                               ; preds = %2
  %29 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 0, i32 1
  %30 = getelementptr inbounds float, float* %29, i64 6
  %31 = bitcast float* %30 to i32*
  %32 = load i32, i32* %31, align 4
  %33 = getelementptr inbounds float, float* %29, i64 8
  %34 = bitcast float* %33 to i32*
  store i32 %32, i32* %34, align 4
  %35 = getelementptr inbounds float, float* %29, i64 4
  %36 = bitcast float* %35 to i32*
  store i32 %32, i32* %36, align 4
  %37 = icmp eq i32 %24, 2
  br i1 %37, label %38, label %47

38:                                               ; preds = %28
  %39 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 3, i32 1
  %40 = getelementptr inbounds float, float* %39, i64 6
  %41 = bitcast float* %40 to i32*
  %42 = load i32, i32* %41, align 4
  %43 = getelementptr inbounds float, float* %39, i64 8
  %44 = bitcast float* %43 to i32*
  store i32 %42, i32* %44, align 4
  %45 = getelementptr inbounds float, float* %39, i64 4
  %46 = bitcast float* %45 to i32*
  store i32 %42, i32* %46, align 4
  br label %47

47:                                               ; preds = %28, %38, %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4) #16
  ret i32 %24
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_Z21SkChopCubicAtXExtremaPK7SkPointPS_(%struct.SkPoint* nocapture readonly, %struct.SkPoint*) local_unnamed_addr #13 {
  %3 = alloca [2 x float], align 4
  %4 = bitcast [2 x float]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %4) #16
  %5 = getelementptr inbounds [2 x float], [2 x float]* %3, i64 0, i64 0
  store float 0xFFFFFFFFE0000000, float* %5, align 4
  %6 = getelementptr inbounds [2 x float], [2 x float]* %3, i64 0, i64 1
  store float 0xFFFFFFFFE0000000, float* %6, align 4
  %7 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 0, i32 0
  %8 = load float, float* %7, align 4
  %9 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 0
  %10 = load float, float* %9, align 4
  %11 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2, i32 0
  %12 = load float, float* %11, align 4
  %13 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 3, i32 0
  %14 = load float, float* %13, align 4
  %15 = fsub float %14, %8
  %16 = fsub float %10, %12
  %17 = fmul float %16, 3.000000e+00
  %18 = fadd float %15, %17
  %19 = fsub float %8, %10
  %20 = fsub float %19, %10
  %21 = fadd float %12, %20
  %22 = fmul float %21, 2.000000e+00
  %23 = fsub float %10, %8
  %24 = call i32 @_Z19SkFindUnitQuadRootsfffPf(float %18, float %22, float %23, float* nonnull %5) #16
  call void @_Z13SkChopCubicAtPK7SkPointPS_PKfi(%struct.SkPoint* %0, %struct.SkPoint* %1, float* nonnull %5, i32 %24)
  %25 = icmp ne %struct.SkPoint* %1, null
  %26 = icmp sgt i32 %24, 0
  %27 = and i1 %25, %26
  br i1 %27, label %28, label %45

28:                                               ; preds = %2
  %29 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 3, i32 0
  %30 = bitcast float* %29 to i32*
  %31 = load i32, i32* %30, align 4
  %32 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 4, i32 0
  %33 = bitcast float* %32 to i32*
  store i32 %31, i32* %33, align 4
  %34 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 2, i32 0
  %35 = bitcast float* %34 to i32*
  store i32 %31, i32* %35, align 4
  %36 = icmp eq i32 %24, 2
  br i1 %36, label %37, label %45

37:                                               ; preds = %28
  %38 = getelementptr inbounds float, float* %29, i64 6
  %39 = bitcast float* %38 to i32*
  %40 = load i32, i32* %39, align 4
  %41 = getelementptr inbounds float, float* %29, i64 8
  %42 = bitcast float* %41 to i32*
  store i32 %40, i32* %42, align 4
  %43 = getelementptr inbounds float, float* %29, i64 4
  %44 = bitcast float* %43 to i32*
  store i32 %40, i32* %44, align 4
  br label %45

45:                                               ; preds = %28, %37, %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4) #16
  ret i32 %24
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden i32 @_Z22SkFindCubicInflectionsPK7SkPointPf(%struct.SkPoint* nocapture readonly, float*) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 0
  %4 = bitcast float* %3 to <2 x float>*
  %5 = load <2 x float>, <2 x float>* %4, align 4
  %6 = bitcast %struct.SkPoint* %0 to <2 x float>*
  %7 = load <2 x float>, <2 x float>* %6, align 4
  %8 = fsub <2 x float> %5, %7
  %9 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2, i32 0
  %10 = bitcast float* %9 to <2 x float>*
  %11 = load <2 x float>, <2 x float>* %10, align 4
  %12 = fmul <2 x float> %5, <float 2.000000e+00, float 2.000000e+00>
  %13 = fsub <2 x float> %11, %12
  %14 = fadd <2 x float> %7, %13
  %15 = shufflevector <2 x float> %14, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %16 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 3, i32 0
  %17 = bitcast float* %16 to <2 x float>*
  %18 = load <2 x float>, <2 x float>* %17, align 4
  %19 = fsub <2 x float> %5, %11
  %20 = fmul <2 x float> %19, <float 3.000000e+00, float 3.000000e+00>
  %21 = fadd <2 x float> %18, %20
  %22 = fsub <2 x float> %21, %7
  %23 = fmul <2 x float> %15, %22
  %24 = extractelement <2 x float> %23, i32 0
  %25 = extractelement <2 x float> %23, i32 1
  %26 = fsub float %25, %24
  %27 = shufflevector <2 x float> %8, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %28 = fmul <2 x float> %27, %22
  %29 = extractelement <2 x float> %28, i32 0
  %30 = extractelement <2 x float> %28, i32 1
  %31 = fsub float %30, %29
  %32 = fmul <2 x float> %8, %15
  %33 = extractelement <2 x float> %32, i32 0
  %34 = extractelement <2 x float> %32, i32 1
  %35 = fsub float %33, %34
  %36 = tail call i32 @_Z19SkFindUnitQuadRootsfffPf(float %26, float %31, float %35, float* %1)
  ret i32 %36
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_Z24SkChopCubicAtInflectionsPK7SkPointPS_(%struct.SkPoint* nocapture readonly, %struct.SkPoint*) local_unnamed_addr #13 {
  %3 = alloca [2 x float], align 4
  %4 = bitcast [2 x float]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %4) #16
  %5 = getelementptr inbounds [2 x float], [2 x float]* %3, i64 0, i64 0
  store float 0xFFFFFFFFE0000000, float* %5, align 4
  %6 = getelementptr inbounds [2 x float], [2 x float]* %3, i64 0, i64 1
  store float 0xFFFFFFFFE0000000, float* %6, align 4
  %7 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 0
  %8 = load float, float* %7, align 4
  %9 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 0, i32 0
  %10 = load float, float* %9, align 4
  %11 = fsub float %8, %10
  %12 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 1
  %13 = load float, float* %12, align 4
  %14 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 0, i32 1
  %15 = load float, float* %14, align 4
  %16 = fsub float %13, %15
  %17 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2, i32 0
  %18 = load float, float* %17, align 4
  %19 = fmul float %8, 2.000000e+00
  %20 = fsub float %18, %19
  %21 = fadd float %10, %20
  %22 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2, i32 1
  %23 = load float, float* %22, align 4
  %24 = fmul float %13, 2.000000e+00
  %25 = fsub float %23, %24
  %26 = fadd float %15, %25
  %27 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 3, i32 0
  %28 = load float, float* %27, align 4
  %29 = fsub float %8, %18
  %30 = fmul float %29, 3.000000e+00
  %31 = fadd float %28, %30
  %32 = fsub float %31, %10
  %33 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 3, i32 1
  %34 = load float, float* %33, align 4
  %35 = fsub float %13, %23
  %36 = fmul float %35, 3.000000e+00
  %37 = fadd float %34, %36
  %38 = fsub float %37, %15
  %39 = fmul float %21, %38
  %40 = fmul float %26, %32
  %41 = fsub float %39, %40
  %42 = fmul float %11, %38
  %43 = fmul float %16, %32
  %44 = fsub float %42, %43
  %45 = fmul float %11, %26
  %46 = fmul float %16, %21
  %47 = fsub float %45, %46
  %48 = call i32 @_Z19SkFindUnitQuadRootsfffPf(float %41, float %44, float %47, float* nonnull %5) #16
  %49 = icmp eq %struct.SkPoint* %1, null
  br i1 %49, label %56, label %50

50:                                               ; preds = %2
  %51 = icmp eq i32 %48, 0
  br i1 %51, label %52, label %55

52:                                               ; preds = %50
  %53 = bitcast %struct.SkPoint* %1 to i8*
  %54 = bitcast %struct.SkPoint* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %53, i8* align 4 %54, i64 32, i1 false)
  br label %56

55:                                               ; preds = %50
  call void @_Z13SkChopCubicAtPK7SkPointPS_PKfi(%struct.SkPoint* %0, %struct.SkPoint* nonnull %1, float* nonnull %5, i32 %48)
  br label %56

56:                                               ; preds = %2, %52, %55
  %57 = add nsw i32 %48, 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4) #16
  ret i32 %57
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_Z15SkClassifyCubicPK7SkPointPdS2_S2_(%struct.SkPoint* nocapture readonly, double*, double*, double*) local_unnamed_addr #13 {
  %5 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 0, i32 0
  %6 = load float, float* %5, align 4
  %7 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2, i32 1
  %8 = load float, float* %7, align 4
  %9 = insertelement <2 x float> undef, float %8, i32 0
  %10 = insertelement <2 x float> %9, float %6, i32 1
  %11 = fpext <2 x float> %10 to <2 x double>
  %12 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 0, i32 1
  %13 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2, i32 0
  %14 = load float, float* %13, align 4
  %15 = fpext float %14 to double
  %16 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 3, i32 0
  %17 = bitcast float* %16 to <2 x float>*
  %18 = load <2 x float>, <2 x float>* %17, align 4
  %19 = fpext <2 x float> %18 to <2 x double>
  %20 = bitcast float* %12 to <2 x float>*
  %21 = load <2 x float>, <2 x float>* %20, align 4
  %22 = fpext <2 x float> %21 to <2 x double>
  %23 = extractelement <2 x double> %22, i32 0
  %24 = shufflevector <2 x double> %19, <2 x double> %22, <2 x i32> <i32 1, i32 2>
  %25 = shufflevector <2 x double> %11, <2 x double> %19, <2 x i32> <i32 0, i32 3>
  %26 = fsub <2 x double> %24, %25
  %27 = extractelement <2 x double> %11, i32 1
  %28 = extractelement <2 x double> %22, i32 1
  %29 = shufflevector <2 x double> %11, <2 x double> %22, <2 x i32> <i32 1, i32 3>
  %30 = fmul <2 x double> %26, %29
  %31 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 1
  %32 = load float, float* %31, align 4
  %33 = fpext float %32 to double
  %34 = insertelement <2 x double> undef, double %15, i32 0
  %35 = shufflevector <2 x double> %34, <2 x double> %19, <2 x i32> <i32 0, i32 2>
  %36 = shufflevector <2 x double> %19, <2 x double> %11, <2 x i32> <i32 0, i32 3>
  %37 = fsub <2 x double> %35, %36
  %38 = insertelement <2 x double> undef, double %23, i32 0
  %39 = insertelement <2 x double> %38, double %33, i32 1
  %40 = fmul <2 x double> %37, %39
  %41 = fmul <2 x double> %11, %19
  %42 = fmul <2 x double> %24, %35
  %43 = fsub <2 x double> %41, %42
  %44 = fadd <2 x double> %30, %40
  %45 = fadd <2 x double> %43, %44
  %46 = insertelement <2 x double> %11, double %33, i32 0
  %47 = fsub <2 x double> %46, %22
  %48 = shufflevector <2 x double> %34, <2 x double> %11, <2 x i32> <i32 0, i32 2>
  %49 = fmul <2 x double> %47, %48
  %50 = fmul double %23, %28
  %51 = fmul double %27, %33
  %52 = fsub double %50, %51
  %53 = extractelement <2 x double> %49, i32 0
  %54 = extractelement <2 x double> %49, i32 1
  %55 = fadd double %54, %53
  %56 = fadd double %52, %55
  %57 = fmul double %56, 3.000000e+00
  %58 = extractelement <2 x double> %45, i32 1
  %59 = fsub double %57, %58
  %60 = fsub double %59, %58
  %61 = extractelement <2 x double> %45, i32 0
  %62 = fadd double %61, %60
  %63 = tail call double @llvm.fabs.f64(double %62)
  %64 = tail call double @llvm.fabs.f64(double %59)
  %65 = fcmp olt double %63, %64
  %66 = tail call double @llvm.fabs.f64(double %57)
  %67 = select i1 %65, double %64, double %63
  %68 = fcmp olt double %67, %66
  %69 = select i1 %68, double %66, double %67
  %70 = bitcast double %69 to i64
  %71 = sub i64 9218868437227405311, %70
  %72 = and i64 %71, 9218868437227405312
  %73 = bitcast i64 %72 to double
  %74 = fmul double %62, %73
  %75 = insertelement <2 x double> undef, double %59, i32 0
  %76 = insertelement <2 x double> %75, double %57, i32 1
  %77 = insertelement <2 x double> undef, double %73, i32 0
  %78 = shufflevector <2 x double> %77, <2 x double> undef, <2 x i32> zeroinitializer
  %79 = fmul <2 x double> %76, %78
  %80 = icmp eq double* %3, null
  br i1 %80, label %85, label %81

81:                                               ; preds = %4
  %82 = getelementptr inbounds double, double* %3, i64 2
  %83 = bitcast double* %82 to <2 x double>*
  store <2 x double> %79, <2 x double>* %83, align 8
  %84 = getelementptr inbounds double, double* %3, i64 1
  store double %74, double* %84, align 8
  store double 0.000000e+00, double* %3, align 8
  br label %85

85:                                               ; preds = %4, %81
  %86 = fcmp une double %74, 0.000000e+00
  %87 = extractelement <2 x double> %79, i32 0
  br i1 %86, label %88, label %194

88:                                               ; preds = %85
  %89 = insertelement <2 x double> undef, double %87, i32 0
  %90 = insertelement <2 x double> %89, double %74, i32 1
  %91 = fmul <2 x double> %90, <double 3.000000e+00, double 4.000000e+00>
  %92 = fmul <2 x double> %79, %91
  %93 = extractelement <2 x double> %92, i32 0
  %94 = extractelement <2 x double> %92, i32 1
  %95 = fsub double %93, %94
  %96 = fcmp ogt double %95, 0.000000e+00
  br i1 %96, label %97, label %131

97:                                               ; preds = %88
  %98 = icmp ne double* %1, null
  %99 = icmp ne double* %2, null
  %100 = and i1 %98, %99
  br i1 %100, label %101, label %241

101:                                              ; preds = %97
  %102 = fmul double %95, 3.000000e+00
  %103 = tail call double @sqrt(double %102) #16
  %104 = tail call double @llvm.copysign.f64(double %103, double %87)
  %105 = extractelement <2 x double> %91, i32 0
  %106 = fadd double %105, %104
  %107 = fmul double %74, 6.000000e+00
  %108 = extractelement <2 x double> %79, i32 1
  %109 = fmul double %108, 2.000000e+00
  store double %106, double* %1, align 8
  store double %107, double* %2, align 8
  %110 = fmul double %109, %106
  %111 = tail call double @llvm.copysign.f64(double %109, double %110) #16
  %112 = fsub double -0.000000e+00, %111
  %113 = getelementptr inbounds double, double* %1, i64 1
  store double %112, double* %113, align 8
  %114 = tail call double @llvm.fabs.f64(double %106) #16
  %115 = fsub double -0.000000e+00, %114
  %116 = getelementptr inbounds double, double* %2, i64 1
  store double %115, double* %116, align 8
  %117 = load double, double* %2, align 8
  %118 = tail call double @llvm.copysign.f64(double %115, double %117) #16
  %119 = load double, double* %1, align 8
  %120 = fmul double %118, %119
  %121 = tail call double @llvm.fabs.f64(double %117) #16
  %122 = load double, double* %113, align 8
  %123 = fmul double %121, %122
  %124 = fsub double -0.000000e+00, %123
  %125 = fcmp ogt double %120, %124
  br i1 %125, label %126, label %241

126:                                              ; preds = %101
  store double %122, double* %1, align 8
  store double %119, double* %113, align 8
  %127 = bitcast double* %2 to <2 x i64>*
  %128 = load <2 x i64>, <2 x i64>* %127, align 8
  %129 = shufflevector <2 x i64> %128, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  %130 = bitcast double* %2 to <2 x i64>*
  store <2 x i64> %129, <2 x i64>* %130, align 8
  br label %241

131:                                              ; preds = %88
  %132 = fcmp olt double %95, 0.000000e+00
  %133 = icmp ne double* %1, null
  %134 = icmp ne double* %2, null
  %135 = and i1 %133, %134
  br i1 %132, label %136, label %170

136:                                              ; preds = %131
  br i1 %135, label %137, label %241

137:                                              ; preds = %136
  %138 = fsub double -0.000000e+00, %95
  %139 = tail call double @sqrt(double %138) #16
  %140 = tail call double @llvm.copysign.f64(double %139, double %87)
  %141 = fadd double %87, %140
  %142 = fmul double %74, 2.000000e+00
  %143 = fmul double %87, %87
  %144 = extractelement <2 x double> %79, i32 1
  %145 = fmul double %144, %74
  %146 = fsub double %143, %145
  %147 = fmul double %146, 2.000000e+00
  %148 = fmul double %74, %141
  store double %141, double* %1, align 8
  store double %142, double* %2, align 8
  %149 = fmul double %147, %148
  %150 = tail call double @llvm.copysign.f64(double %147, double %149) #16
  %151 = fsub double -0.000000e+00, %150
  %152 = getelementptr inbounds double, double* %1, i64 1
  store double %151, double* %152, align 8
  %153 = tail call double @llvm.fabs.f64(double %148) #16
  %154 = fsub double -0.000000e+00, %153
  %155 = getelementptr inbounds double, double* %2, i64 1
  store double %154, double* %155, align 8
  %156 = load double, double* %2, align 8
  %157 = tail call double @llvm.copysign.f64(double %154, double %156) #16
  %158 = load double, double* %1, align 8
  %159 = fmul double %157, %158
  %160 = tail call double @llvm.fabs.f64(double %156) #16
  %161 = load double, double* %152, align 8
  %162 = fmul double %160, %161
  %163 = fsub double -0.000000e+00, %162
  %164 = fcmp ogt double %159, %163
  br i1 %164, label %165, label %241

165:                                              ; preds = %137
  store double %161, double* %1, align 8
  store double %158, double* %152, align 8
  %166 = bitcast double* %2 to <2 x i64>*
  %167 = load <2 x i64>, <2 x i64>* %166, align 8
  %168 = shufflevector <2 x i64> %167, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  %169 = bitcast double* %2 to <2 x i64>*
  store <2 x i64> %168, <2 x i64>* %169, align 8
  br label %241

170:                                              ; preds = %131
  br i1 %135, label %171, label %241

171:                                              ; preds = %170
  %172 = fmul double %74, 2.000000e+00
  store double %87, double* %1, align 8
  store double %172, double* %2, align 8
  %173 = fmul double %87, %172
  %174 = tail call double @llvm.copysign.f64(double %87, double %173) #16
  %175 = fsub double -0.000000e+00, %174
  %176 = getelementptr inbounds double, double* %1, i64 1
  store double %175, double* %176, align 8
  %177 = tail call double @llvm.fabs.f64(double %172) #16
  %178 = fsub double -0.000000e+00, %177
  %179 = getelementptr inbounds double, double* %2, i64 1
  store double %178, double* %179, align 8
  %180 = load double, double* %2, align 8
  %181 = tail call double @llvm.copysign.f64(double %178, double %180) #16
  %182 = load double, double* %1, align 8
  %183 = fmul double %181, %182
  %184 = tail call double @llvm.fabs.f64(double %180) #16
  %185 = load double, double* %176, align 8
  %186 = fmul double %184, %185
  %187 = fsub double -0.000000e+00, %186
  %188 = fcmp ogt double %183, %187
  br i1 %188, label %189, label %241

189:                                              ; preds = %171
  store double %185, double* %1, align 8
  store double %182, double* %176, align 8
  %190 = bitcast double* %2 to <2 x i64>*
  %191 = load <2 x i64>, <2 x i64>* %190, align 8
  %192 = shufflevector <2 x i64> %191, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  %193 = bitcast double* %2 to <2 x i64>*
  store <2 x i64> %192, <2 x i64>* %193, align 8
  br label %241

194:                                              ; preds = %85
  %195 = fcmp une double %87, 0.000000e+00
  %196 = icmp ne double* %1, null
  %197 = icmp ne double* %2, null
  %198 = and i1 %196, %197
  br i1 %195, label %199, label %219

199:                                              ; preds = %194
  br i1 %198, label %200, label %241

200:                                              ; preds = %199
  %201 = fmul double %87, 3.000000e+00
  %202 = extractelement <2 x double> %79, i32 1
  store double %202, double* %1, align 8
  store double %201, double* %2, align 8
  %203 = getelementptr inbounds double, double* %1, i64 1
  store double -1.000000e+00, double* %203, align 8
  %204 = getelementptr inbounds double, double* %2, i64 1
  store double -0.000000e+00, double* %204, align 8
  %205 = load double, double* %2, align 8
  %206 = tail call double @llvm.copysign.f64(double -0.000000e+00, double %205) #16
  %207 = load double, double* %1, align 8
  %208 = fmul double %206, %207
  %209 = tail call double @llvm.fabs.f64(double %205) #16
  %210 = load double, double* %203, align 8
  %211 = fmul double %209, %210
  %212 = fsub double -0.000000e+00, %211
  %213 = fcmp ogt double %208, %212
  br i1 %213, label %214, label %241

214:                                              ; preds = %200
  store double %210, double* %1, align 8
  store double %207, double* %203, align 8
  %215 = bitcast double* %2 to <2 x i64>*
  %216 = load <2 x i64>, <2 x i64>* %215, align 8
  %217 = shufflevector <2 x i64> %216, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  %218 = bitcast double* %2 to <2 x i64>*
  store <2 x i64> %217, <2 x i64>* %218, align 8
  br label %241

219:                                              ; preds = %194
  br i1 %198, label %220, label %237

220:                                              ; preds = %219
  store double 1.000000e+00, double* %1, align 8
  store double 0.000000e+00, double* %2, align 8
  %221 = getelementptr inbounds double, double* %1, i64 1
  store double -1.000000e+00, double* %221, align 8
  %222 = getelementptr inbounds double, double* %2, i64 1
  store double -0.000000e+00, double* %222, align 8
  %223 = load double, double* %2, align 8
  %224 = tail call double @llvm.copysign.f64(double -0.000000e+00, double %223) #16
  %225 = load double, double* %1, align 8
  %226 = fmul double %224, %225
  %227 = tail call double @llvm.fabs.f64(double %223) #16
  %228 = load double, double* %221, align 8
  %229 = fmul double %227, %228
  %230 = fsub double -0.000000e+00, %229
  %231 = fcmp ogt double %226, %230
  br i1 %231, label %232, label %237

232:                                              ; preds = %220
  store double %228, double* %1, align 8
  store double %225, double* %221, align 8
  %233 = bitcast double* %2 to <2 x i64>*
  %234 = load <2 x i64>, <2 x i64>* %233, align 8
  %235 = shufflevector <2 x i64> %234, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  %236 = bitcast double* %2 to <2 x i64>*
  store <2 x i64> %235, <2 x i64>* %236, align 8
  br label %237

237:                                              ; preds = %232, %220, %219
  %238 = extractelement <2 x double> %79, i32 1
  %239 = fcmp une double %238, 0.000000e+00
  %240 = select i1 %239, i32 4, i32 5
  br label %241

241:                                              ; preds = %214, %200, %189, %171, %165, %137, %126, %101, %199, %97, %136, %170, %237
  %242 = phi i32 [ %240, %237 ], [ 0, %97 ], [ 1, %136 ], [ 2, %170 ], [ 3, %199 ], [ 0, %101 ], [ 0, %126 ], [ 1, %137 ], [ 1, %165 ], [ 2, %171 ], [ 2, %189 ], [ 3, %200 ], [ 3, %214 ]
  ret i32 %242
}

; Function Attrs: nounwind readnone speculatable
declare double @llvm.fabs.f64(double) #9

; Function Attrs: nounwind readnone speculatable
declare double @llvm.copysign.f64(double, double) #9

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_Z23SkFindCubicMaxCurvaturePK7SkPointPf(%struct.SkPoint* nocapture readonly, float*) local_unnamed_addr #13 {
  %3 = alloca float, align 4
  %4 = alloca float, align 4
  %5 = alloca float, align 4
  %6 = alloca float, align 4
  %7 = alloca float, align 4
  %8 = alloca float, align 4
  %9 = alloca float, align 4
  %10 = alloca float, align 4
  %11 = alloca float, align 4
  %12 = alloca float, align 4
  %13 = alloca float, align 4
  %14 = alloca float, align 4
  %15 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 0, i32 0
  %16 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 0
  %17 = load float, float* %16, align 4
  %18 = load float, float* %15, align 4
  %19 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2, i32 0
  %20 = load float, float* %19, align 4
  %21 = fmul float %17, 2.000000e+00
  %22 = fsub float %20, %21
  %23 = fadd float %18, %22
  %24 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 3, i32 0
  %25 = load float, float* %24, align 4
  %26 = fsub float %17, %20
  %27 = fmul float %26, 3.000000e+00
  %28 = fadd float %25, %27
  %29 = insertelement <2 x float> undef, float %17, i32 0
  %30 = insertelement <2 x float> %29, float %28, i32 1
  %31 = insertelement <2 x float> undef, float %18, i32 0
  %32 = shufflevector <2 x float> %31, <2 x float> undef, <2 x i32> zeroinitializer
  %33 = fsub <2 x float> %30, %32
  %34 = extractelement <2 x float> %33, i32 1
  %35 = fmul float %23, 3.000000e+00
  %36 = fmul float %23, 2.000000e+00
  %37 = fmul float %23, %36
  %38 = extractelement <2 x float> %33, i32 0
  %39 = fmul float %38, %34
  %40 = fadd float %37, %39
  %41 = insertelement <2 x float> undef, float %23, i32 0
  %42 = insertelement <2 x float> %41, float %35, i32 1
  %43 = fmul <2 x float> %33, %42
  %44 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 0, i32 1
  %45 = getelementptr inbounds float, float* %44, i64 2
  %46 = load float, float* %45, align 4
  %47 = load float, float* %44, align 4
  %48 = getelementptr inbounds float, float* %44, i64 4
  %49 = load float, float* %48, align 4
  %50 = fmul float %46, 2.000000e+00
  %51 = fsub float %49, %50
  %52 = fadd float %47, %51
  %53 = getelementptr inbounds float, float* %44, i64 6
  %54 = load float, float* %53, align 4
  %55 = fsub float %46, %49
  %56 = fmul float %55, 3.000000e+00
  %57 = fadd float %54, %56
  %58 = insertelement <2 x float> undef, float %46, i32 0
  %59 = insertelement <2 x float> %58, float %57, i32 1
  %60 = insertelement <2 x float> undef, float %47, i32 0
  %61 = shufflevector <2 x float> %60, <2 x float> undef, <2 x i32> zeroinitializer
  %62 = fsub <2 x float> %59, %61
  %63 = extractelement <2 x float> %62, i32 1
  %64 = shufflevector <2 x float> %62, <2 x float> %33, <2 x i32> <i32 1, i32 3>
  %65 = fmul <2 x float> %64, %64
  %66 = fmul float %52, 3.000000e+00
  %67 = fmul float %52, 2.000000e+00
  %68 = fmul float %52, %67
  %69 = extractelement <2 x float> %62, i32 0
  %70 = fmul float %69, %63
  %71 = fadd float %68, %70
  %72 = insertelement <2 x float> undef, float %52, i32 0
  %73 = insertelement <2 x float> %72, float %66, i32 1
  %74 = fmul <2 x float> %62, %73
  %75 = extractelement <2 x float> %65, i32 0
  %76 = extractelement <2 x float> %65, i32 1
  %77 = fadd float %75, %76
  %78 = fadd float %71, %40
  %79 = fadd <2 x float> %74, %43
  %80 = tail call float @llvm.fabs.f32(float %77) #16
  %81 = fcmp ugt float %80, 0x3F30000000000000
  br i1 %81, label %86, label %82

82:                                               ; preds = %2
  %83 = extractelement <2 x float> %79, i32 0
  %84 = extractelement <2 x float> %79, i32 1
  %85 = tail call i32 @_Z19SkFindUnitQuadRootsfffPf(float %84, float %78, float %83, float* %1) #16
  br label %238

86:                                               ; preds = %2
  %87 = fdiv float 1.000000e+00, %77
  %88 = insertelement <2 x float> undef, float %87, i32 0
  %89 = shufflevector <2 x float> %88, <2 x float> undef, <2 x i32> zeroinitializer
  %90 = fmul <2 x float> %89, %79
  %91 = extractelement <2 x float> %90, i32 1
  %92 = fmul float %91, 2.000000e+00
  %93 = fmul float %91, %92
  %94 = insertelement <2 x float> undef, float %91, i32 0
  %95 = insertelement <2 x float> %94, float %87, i32 1
  %96 = insertelement <2 x float> undef, float %93, i32 0
  %97 = insertelement <2 x float> %96, float %78, i32 1
  %98 = fmul <2 x float> %95, %97
  %99 = fmul float %91, 9.000000e+00
  %100 = extractelement <2 x float> %98, i32 1
  %101 = fmul float %99, %100
  %102 = insertelement <2 x float> <float undef, float 3.000000e+00>, float %101, i32 0
  %103 = fsub <2 x float> %98, %102
  %104 = fmul <2 x float> %98, %102
  %105 = shufflevector <2 x float> %103, <2 x float> %104, <2 x i32> <i32 0, i32 3>
  %106 = insertelement <2 x float> %90, float 2.700000e+01, i32 0
  %107 = fmul <2 x float> %90, %106
  %108 = fadd <2 x float> %107, %105
  %109 = fsub <2 x float> %107, %105
  %110 = shufflevector <2 x float> %108, <2 x float> %109, <2 x i32> <i32 0, i32 3>
  %111 = fdiv <2 x float> %110, <float 5.400000e+01, float 9.000000e+00>
  %112 = extractelement <2 x float> %111, i32 1
  %113 = fmul float %112, %112
  %114 = extractelement <2 x float> %111, i32 0
  %115 = insertelement <2 x float> undef, float %114, i32 0
  %116 = insertelement <2 x float> %115, float %113, i32 1
  %117 = fmul <2 x float> %111, %116
  %118 = extractelement <2 x float> %117, i32 0
  %119 = extractelement <2 x float> %117, i32 1
  %120 = fsub float %118, %119
  %121 = fdiv float %91, 3.000000e+00
  %122 = fcmp olt float %120, 0.000000e+00
  br i1 %122, label %123, label %207

123:                                              ; preds = %86
  %124 = tail call float @sqrtf(float %119) #16
  %125 = fdiv float %114, %124
  %126 = fcmp ogt float %125, 1.000000e+00
  %127 = select i1 %126, float 1.000000e+00, float %125
  %128 = fcmp ogt float %127, -1.000000e+00
  %129 = select i1 %128, float %127, float -1.000000e+00
  %130 = tail call float @acosf(float %129) #16
  %131 = tail call float @sqrtf(float %112) #16
  %132 = fmul float %131, -2.000000e+00
  %133 = bitcast float* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %133)
  %134 = fdiv float %130, 3.000000e+00
  %135 = tail call float @cosf(float %134) #16
  %136 = fmul float %132, %135
  %137 = fsub float %136, %121
  store float %137, float* %3, align 4
  %138 = bitcast float* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %138)
  store float 0.000000e+00, float* %4, align 4
  %139 = bitcast float* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %139)
  store float 1.000000e+00, float* %5, align 4
  %140 = fcmp ogt float %137, 1.000000e+00
  %141 = select i1 %140, float* %5, float* %3
  %142 = load float, float* %141, align 4
  %143 = fcmp ogt float %142, 0.000000e+00
  %144 = select i1 %143, float* %141, float* %4
  %145 = bitcast float* %144 to i32*
  %146 = load i32, i32* %145, align 4
  %147 = bitcast float* %1 to i32*
  store i32 %146, i32* %147, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %139)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %138)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %133)
  %148 = bitcast float* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %148)
  %149 = fadd float %130, 0x401921FB60000000
  %150 = fdiv float %149, 3.000000e+00
  %151 = tail call float @cosf(float %150) #16
  %152 = fmul float %132, %151
  %153 = fsub float %152, %121
  store float %153, float* %6, align 4
  %154 = bitcast float* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %154)
  store float 0.000000e+00, float* %7, align 4
  %155 = bitcast float* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %155)
  store float 1.000000e+00, float* %8, align 4
  %156 = fcmp ogt float %153, 1.000000e+00
  %157 = select i1 %156, float* %8, float* %6
  %158 = load float, float* %157, align 4
  %159 = fcmp ogt float %158, 0.000000e+00
  %160 = select i1 %159, float* %157, float* %7
  %161 = bitcast float* %160 to i32*
  %162 = load i32, i32* %161, align 4
  %163 = getelementptr inbounds float, float* %1, i64 1
  %164 = bitcast float* %163 to i32*
  store i32 %162, i32* %164, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %155)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %154)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %148)
  %165 = bitcast float* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %165)
  %166 = fadd float %130, 0xC01921FB60000000
  %167 = fdiv float %166, 3.000000e+00
  %168 = tail call float @cosf(float %167) #16
  %169 = fmul float %132, %168
  %170 = fsub float %169, %121
  store float %170, float* %9, align 4
  %171 = bitcast float* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %171)
  store float 0.000000e+00, float* %10, align 4
  %172 = bitcast float* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %172)
  store float 1.000000e+00, float* %11, align 4
  %173 = fcmp ogt float %170, 1.000000e+00
  %174 = select i1 %173, float* %11, float* %9
  %175 = load float, float* %174, align 4
  %176 = fcmp ogt float %175, 0.000000e+00
  %177 = select i1 %176, float* %174, float* %10
  %178 = bitcast float* %177 to i32*
  %179 = load i32, i32* %178, align 4
  %180 = getelementptr inbounds float, float* %1, i64 2
  %181 = bitcast float* %180 to i32*
  store i32 %179, i32* %181, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %172)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %171)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %165)
  %182 = bitcast i32 %179 to float
  %183 = load float, float* %163, align 4
  %184 = fcmp ogt float %183, %182
  br i1 %184, label %185, label %188

185:                                              ; preds = %123
  store float %183, float* %180, align 4
  %186 = bitcast float* %163 to i32*
  store i32 %179, i32* %186, align 4
  %187 = bitcast float %183 to i32
  br label %188

188:                                              ; preds = %185, %123
  %189 = phi i32 [ %179, %123 ], [ %187, %185 ]
  %190 = phi float [ %182, %123 ], [ %183, %185 ]
  %191 = phi float [ %183, %123 ], [ %182, %185 ]
  %192 = load float, float* %1, align 4
  %193 = fcmp olt float %191, %192
  br i1 %193, label %240, label %241

194:                                              ; preds = %234
  store float %235, float* %1, align 4
  store i32 %189, i32* %164, align 4
  %195 = bitcast i32 %189 to float
  br label %196

196:                                              ; preds = %234, %194
  %197 = phi float [ %195, %194 ], [ %190, %234 ]
  %198 = phi float* [ %1, %194 ], [ %163, %234 ]
  %199 = phi i32 [ 2, %194 ], [ 3, %234 ]
  %200 = fcmp oeq float %235, %197
  br i1 %200, label %201, label %238

201:                                              ; preds = %196
  %202 = getelementptr inbounds float, float* %198, i64 1
  %203 = bitcast float* %202 to i32*
  %204 = load i32, i32* %203, align 4
  %205 = bitcast float* %198 to i32*
  store i32 %204, i32* %205, align 4
  %206 = add nsw i32 %199, -1
  br label %238

207:                                              ; preds = %86
  %208 = tail call float @llvm.fabs.f32(float %114) #16
  %209 = tail call float @sqrtf(float %120) #16
  %210 = fadd float %208, %209
  %211 = tail call float @powf(float %210, float 0x3FD5555540000000) #16
  %212 = fcmp ogt float %114, 0.000000e+00
  %213 = fsub float -0.000000e+00, %211
  %214 = select i1 %212, float %213, float %211
  %215 = fcmp une float %214, 0.000000e+00
  br i1 %215, label %216, label %219

216:                                              ; preds = %207
  %217 = fdiv float %112, %214
  %218 = fadd float %214, %217
  br label %219

219:                                              ; preds = %216, %207
  %220 = phi float [ %218, %216 ], [ %214, %207 ]
  %221 = bitcast float* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %221)
  %222 = fsub float %220, %121
  store float %222, float* %12, align 4
  %223 = bitcast float* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %223)
  store float 0.000000e+00, float* %13, align 4
  %224 = bitcast float* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %224)
  store float 1.000000e+00, float* %14, align 4
  %225 = fcmp ogt float %222, 1.000000e+00
  %226 = select i1 %225, float* %14, float* %12
  %227 = load float, float* %226, align 4
  %228 = fcmp ogt float %227, 0.000000e+00
  %229 = select i1 %228, float* %226, float* %13
  %230 = bitcast float* %229 to i32*
  %231 = load i32, i32* %230, align 4
  %232 = bitcast float* %1 to i32*
  store i32 %231, i32* %232, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %224)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %223)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %221)
  br label %238

233:                                              ; preds = %241
  store float %242, float* %163, align 4
  store float %243, float* %1, align 4
  br label %234

234:                                              ; preds = %233, %241
  %235 = phi float [ %242, %233 ], [ %243, %241 ]
  %236 = phi float [ %243, %233 ], [ %242, %241 ]
  %237 = fcmp oeq float %236, %235
  br i1 %237, label %194, label %196

238:                                              ; preds = %82, %196, %201, %219
  %239 = phi i32 [ %85, %82 ], [ 1, %219 ], [ %206, %201 ], [ %199, %196 ]
  ret i32 %239

240:                                              ; preds = %188
  store float %192, float* %163, align 4
  store float %191, float* %1, align 4
  br label %241

241:                                              ; preds = %240, %188
  %242 = phi float [ %191, %240 ], [ %192, %188 ]
  %243 = phi float [ %192, %240 ], [ %191, %188 ]
  %244 = fcmp olt float %243, %242
  br i1 %244, label %233, label %234
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_Z25SkChopCubicAtMaxCurvaturePK7SkPointPS_Pf(%struct.SkPoint* nocapture readonly, %struct.SkPoint*, float*) local_unnamed_addr #13 {
  %4 = alloca [3 x float], align 4
  %5 = alloca [3 x float], align 4
  %6 = bitcast [3 x float]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %6) #16
  %7 = getelementptr inbounds [3 x float], [3 x float]* %4, i64 0, i64 0
  store float 0xFFFFFFFFE0000000, float* %7, align 4
  %8 = getelementptr inbounds [3 x float], [3 x float]* %4, i64 0, i64 1
  store float 0xFFFFFFFFE0000000, float* %8, align 4
  %9 = getelementptr inbounds [3 x float], [3 x float]* %4, i64 0, i64 2
  store float 0xFFFFFFFFE0000000, float* %9, align 4
  %10 = icmp eq float* %2, null
  %11 = select i1 %10, float* %7, float* %2
  %12 = bitcast [3 x float]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %12) #16
  %13 = getelementptr inbounds [3 x float], [3 x float]* %5, i64 0, i64 0
  store float 0xFFFFFFFFE0000000, float* %13, align 4
  %14 = getelementptr inbounds [3 x float], [3 x float]* %5, i64 0, i64 1
  store float 0xFFFFFFFFE0000000, float* %14, align 4
  %15 = getelementptr inbounds [3 x float], [3 x float]* %5, i64 0, i64 2
  store float 0xFFFFFFFFE0000000, float* %15, align 4
  %16 = call i32 @_Z23SkFindCubicMaxCurvaturePK7SkPointPf(%struct.SkPoint* %0, float* nonnull %13)
  %17 = icmp sgt i32 %16, 0
  br i1 %17, label %18, label %39

18:                                               ; preds = %3
  %19 = zext i32 %16 to i64
  %20 = and i64 %19, 1
  %21 = icmp eq i32 %16, 1
  br i1 %21, label %24, label %22

22:                                               ; preds = %18
  %23 = sub nsw i64 %19, %20
  br label %42

24:                                               ; preds = %75, %18
  %25 = phi i32 [ undef, %18 ], [ %76, %75 ]
  %26 = phi i64 [ 0, %18 ], [ %77, %75 ]
  %27 = phi i32 [ 0, %18 ], [ %76, %75 ]
  %28 = icmp eq i64 %20, 0
  br i1 %28, label %39, label %29

29:                                               ; preds = %24
  %30 = getelementptr inbounds [3 x float], [3 x float]* %5, i64 0, i64 %26
  %31 = load float, float* %30, align 4
  %32 = fcmp ogt float %31, 0.000000e+00
  %33 = fcmp olt float %31, 1.000000e+00
  %34 = and i1 %32, %33
  br i1 %34, label %35, label %39

35:                                               ; preds = %29
  %36 = add nsw i32 %27, 1
  %37 = sext i32 %27 to i64
  %38 = getelementptr inbounds float, float* %11, i64 %37
  store float %31, float* %38, align 4
  br label %39

39:                                               ; preds = %24, %29, %35, %3
  %40 = phi i32 [ 0, %3 ], [ %25, %24 ], [ %36, %35 ], [ %27, %29 ]
  %41 = icmp eq %struct.SkPoint* %1, null
  br i1 %41, label %69, label %63

42:                                               ; preds = %75, %22
  %43 = phi i64 [ 0, %22 ], [ %77, %75 ]
  %44 = phi i32 [ 0, %22 ], [ %76, %75 ]
  %45 = phi i64 [ %23, %22 ], [ %78, %75 ]
  %46 = getelementptr inbounds [3 x float], [3 x float]* %5, i64 0, i64 %43
  %47 = load float, float* %46, align 4
  %48 = fcmp ogt float %47, 0.000000e+00
  %49 = fcmp olt float %47, 1.000000e+00
  %50 = and i1 %48, %49
  br i1 %50, label %51, label %55

51:                                               ; preds = %42
  %52 = add nsw i32 %44, 1
  %53 = sext i32 %44 to i64
  %54 = getelementptr inbounds float, float* %11, i64 %53
  store float %47, float* %54, align 4
  br label %55

55:                                               ; preds = %42, %51
  %56 = phi i32 [ %52, %51 ], [ %44, %42 ]
  %57 = or i64 %43, 1
  %58 = getelementptr inbounds [3 x float], [3 x float]* %5, i64 0, i64 %57
  %59 = load float, float* %58, align 4
  %60 = fcmp ogt float %59, 0.000000e+00
  %61 = fcmp olt float %59, 1.000000e+00
  %62 = and i1 %60, %61
  br i1 %62, label %71, label %75

63:                                               ; preds = %39
  %64 = icmp eq i32 %40, 0
  br i1 %64, label %65, label %68

65:                                               ; preds = %63
  %66 = bitcast %struct.SkPoint* %1 to i8*
  %67 = bitcast %struct.SkPoint* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %66, i8* align 4 %67, i64 32, i1 false)
  br label %69

68:                                               ; preds = %63
  call void @_Z13SkChopCubicAtPK7SkPointPS_PKfi(%struct.SkPoint* %0, %struct.SkPoint* nonnull %1, float* %11, i32 %40)
  br label %69

69:                                               ; preds = %39, %65, %68
  %70 = add nsw i32 %40, 1
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %12) #16
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %6) #16
  ret i32 %70

71:                                               ; preds = %55
  %72 = add nsw i32 %56, 1
  %73 = sext i32 %56 to i64
  %74 = getelementptr inbounds float, float* %11, i64 %73
  store float %59, float* %74, align 4
  br label %75

75:                                               ; preds = %71, %55
  %76 = phi i32 [ %72, %71 ], [ %56, %55 ]
  %77 = add nuw nsw i64 %43, 2
  %78 = add i64 %45, -2
  %79 = icmp eq i64 %78, 0
  br i1 %79, label %24, label %42
}

; Function Attrs: nounwind ssp uwtable
define hidden float @_Z15SkFindCubicCuspPK7SkPoint(%struct.SkPoint* readonly) local_unnamed_addr #5 {
  %2 = alloca [3 x float], align 4
  %3 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1
  %4 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 0, i32 0
  %5 = load float, float* %4, align 4
  %6 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %3, i64 0, i32 0
  %7 = load float, float* %6, align 4
  %8 = fcmp oeq float %5, %7
  br i1 %8, label %9, label %15

9:                                                ; preds = %1
  %10 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 0, i32 1
  %11 = load float, float* %10, align 4
  %12 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 1
  %13 = load float, float* %12, align 4
  %14 = fcmp oeq float %11, %13
  br i1 %14, label %173, label %15

15:                                               ; preds = %1, %9
  %16 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2
  %17 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 3
  %18 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %17, i64 0, i32 0
  %19 = load float, float* %18, align 4
  %20 = bitcast %struct.SkPoint* %16 to <2 x float>*
  %21 = load <2 x float>, <2 x float>* %20, align 4
  %22 = extractelement <2 x float> %21, i32 0
  %23 = fcmp oeq float %22, %19
  %24 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 3, i32 1
  %25 = load float, float* %24, align 4
  %26 = extractelement <2 x float> %21, i32 1
  %27 = fcmp oeq float %26, %25
  %28 = and i1 %23, %27
  br i1 %28, label %173, label %29

29:                                               ; preds = %15
  %30 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2, i32 1
  %31 = fsub float %19, %22
  %32 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 3, i32 1
  %33 = insertelement <2 x float> undef, float %5, i32 0
  %34 = insertelement <2 x float> %33, float %25, i32 1
  %35 = fsub <2 x float> %34, %21
  %36 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 0, i32 1
  %37 = load float, float* %36, align 4
  %38 = fsub float %7, %22
  %39 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 1
  %40 = load float, float* %39, align 4
  %41 = insertelement <2 x float> undef, float %37, i32 0
  %42 = insertelement <2 x float> %41, float %40, i32 1
  %43 = shufflevector <2 x float> %21, <2 x float> undef, <2 x i32> <i32 1, i32 1>
  %44 = fsub <2 x float> %42, %43
  %45 = insertelement <2 x float> undef, float %31, i32 0
  %46 = shufflevector <2 x float> %45, <2 x float> undef, <2 x i32> zeroinitializer
  %47 = fmul <2 x float> %46, %44
  %48 = extractelement <2 x float> %35, i32 1
  %49 = insertelement <2 x float> undef, float %48, i32 0
  %50 = insertelement <2 x float> %49, float %38, i32 1
  %51 = fmul <2 x float> %35, %50
  %52 = fsub <2 x float> %47, %51
  %53 = extractelement <2 x float> %52, i32 0
  %54 = extractelement <2 x float> %52, i32 1
  %55 = fmul float %53, %54
  %56 = fcmp ult float %55, 0.000000e+00
  br i1 %56, label %57, label %173

57:                                               ; preds = %29
  %58 = shufflevector <2 x float> %21, <2 x float> undef, <2 x i32> <i32 1, i32 undef>
  %59 = fsub float %7, %5
  %60 = fsub float %40, %37
  %61 = insertelement <2 x float> %21, float %19, i32 1
  %62 = shufflevector <2 x float> %33, <2 x float> undef, <2 x i32> zeroinitializer
  %63 = fsub <2 x float> %61, %62
  %64 = insertelement <2 x float> %58, float %25, i32 1
  %65 = shufflevector <2 x float> %41, <2 x float> undef, <2 x i32> zeroinitializer
  %66 = fsub <2 x float> %64, %65
  %67 = insertelement <2 x float> undef, float %59, i32 0
  %68 = shufflevector <2 x float> %67, <2 x float> undef, <2 x i32> zeroinitializer
  %69 = fmul <2 x float> %66, %68
  %70 = insertelement <2 x float> undef, float %60, i32 0
  %71 = shufflevector <2 x float> %70, <2 x float> undef, <2 x i32> zeroinitializer
  %72 = fmul <2 x float> %63, %71
  %73 = fsub <2 x float> %69, %72
  %74 = extractelement <2 x float> %73, i32 0
  %75 = extractelement <2 x float> %73, i32 1
  %76 = fmul float %74, %75
  %77 = fcmp ult float %76, 0.000000e+00
  br i1 %77, label %78, label %173

78:                                               ; preds = %57
  %79 = bitcast [3 x float]* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %79) #16
  %80 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  store float 0xFFFFFFFFE0000000, float* %80, align 4
  %81 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  store float 0xFFFFFFFFE0000000, float* %81, align 4
  %82 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  store float 0xFFFFFFFFE0000000, float* %82, align 4
  %83 = call i32 @_Z23SkFindCubicMaxCurvaturePK7SkPointPf(%struct.SkPoint* %0, float* nonnull %80)
  %84 = bitcast %struct.SkPoint* %0 to i64*
  %85 = icmp sgt i32 %83, 0
  br i1 %85, label %86, label %171

86:                                               ; preds = %78
  %87 = bitcast %struct.SkPoint* %3 to i64*
  %88 = bitcast %struct.SkPoint* %16 to i64*
  %89 = bitcast %struct.SkPoint* %17 to i64*
  %90 = zext i32 %83 to i64
  br label %91

91:                                               ; preds = %168, %86
  %92 = phi i64 [ 0, %86 ], [ %169, %168 ]
  %93 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 %92
  %94 = load float, float* %93, align 4
  %95 = fcmp ole float %94, 0.000000e+00
  %96 = fcmp oge float %94, 1.000000e+00
  %97 = or i1 %95, %96
  br i1 %97, label %168, label %98

98:                                               ; preds = %91
  %99 = load i64, i64* %84, align 1
  %100 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %99, i32 0
  %101 = bitcast <2 x i64> %100 to <4 x float>
  %102 = load i64, i64* %87, align 1
  %103 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %102, i32 0
  %104 = bitcast <2 x i64> %103 to <4 x float>
  %105 = load i64, i64* %88, align 1
  %106 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %105, i32 0
  %107 = bitcast <2 x i64> %106 to <4 x float>
  %108 = load i64, i64* %89, align 1
  %109 = insertelement <2 x i64> undef, i64 %108, i32 0
  %110 = bitcast <2 x i64> %109 to <4 x float>
  %111 = fsub <4 x float> %104, %107
  %112 = fmul <4 x float> %111, <float 3.000000e+00, float 3.000000e+00, float undef, float undef>
  %113 = fadd <4 x float> %112, %110
  %114 = fsub <4 x float> %113, %101
  %115 = fadd <4 x float> %104, %104
  %116 = fsub <4 x float> %107, %115
  %117 = fadd <4 x float> %116, %101
  %118 = fadd <4 x float> %117, %117
  %119 = fsub <4 x float> %104, %101
  %120 = insertelement <4 x float> undef, float %94, i32 0
  %121 = shufflevector <4 x float> %120, <4 x float> undef, <4 x i32> zeroinitializer
  %122 = fmul <4 x float> %121, %114
  %123 = fadd <4 x float> %118, %122
  %124 = fmul <4 x float> %121, %123
  %125 = fadd <4 x float> %119, %124
  %126 = fmul <4 x float> %125, %125
  %127 = extractelement <4 x float> %126, i32 0
  %128 = extractelement <4 x float> %126, i32 1
  %129 = fadd float %127, %128
  %130 = load float, float* %39, align 4
  %131 = load float, float* %36, align 4
  %132 = insertelement <2 x i64> undef, i64 %99, i32 0
  %133 = insertelement <2 x i64> %132, i64 %105, i32 1
  %134 = trunc <2 x i64> %133 to <2 x i32>
  %135 = bitcast <2 x i32> %134 to <2 x float>
  %136 = insertelement <2 x i64> undef, i64 %102, i32 0
  %137 = insertelement <2 x i64> %136, i64 %108, i32 1
  %138 = trunc <2 x i64> %137 to <2 x i32>
  %139 = bitcast <2 x i32> %138 to <2 x float>
  %140 = extractelement <2 x float> %139, i32 0
  %141 = extractelement <2 x float> %135, i32 1
  %142 = load float, float* %30, align 4
  %143 = insertelement <2 x float> undef, float %141, i32 0
  %144 = insertelement <2 x float> %143, float %142, i32 1
  %145 = insertelement <2 x float> undef, float %140, i32 0
  %146 = insertelement <2 x float> %145, float %130, i32 1
  %147 = fsub <2 x float> %144, %146
  %148 = fmul <2 x float> %147, %147
  %149 = extractelement <2 x float> %148, i32 0
  %150 = extractelement <2 x float> %148, i32 1
  %151 = fadd float %149, %150
  %152 = fsub <2 x float> %139, %135
  %153 = load float, float* %32, align 4
  %154 = insertelement <2 x float> undef, float %130, i32 0
  %155 = insertelement <2 x float> %154, float %153, i32 1
  %156 = insertelement <2 x float> undef, float %131, i32 0
  %157 = insertelement <2 x float> %156, float %142, i32 1
  %158 = fsub <2 x float> %155, %157
  %159 = fmul <2 x float> %152, %152
  %160 = fmul <2 x float> %158, %158
  %161 = fadd <2 x float> %159, %160
  %162 = extractelement <2 x float> %161, i32 0
  %163 = fadd float %162, %151
  %164 = extractelement <2 x float> %161, i32 1
  %165 = fadd float %163, %164
  %166 = fmul float %165, 0x3E45798EE0000000
  %167 = fcmp olt float %129, %166
  br i1 %167, label %171, label %168

168:                                              ; preds = %98, %91
  %169 = add nuw nsw i64 %92, 1
  %170 = icmp eq i64 %169, %90
  br i1 %170, label %171, label %91

171:                                              ; preds = %98, %168, %78
  %172 = phi float [ -1.000000e+00, %78 ], [ -1.000000e+00, %168 ], [ %94, %98 ]
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %79) #16
  br label %173

173:                                              ; preds = %15, %57, %29, %9, %171
  %174 = phi float [ %172, %171 ], [ -1.000000e+00, %9 ], [ -1.000000e+00, %57 ], [ -1.000000e+00, %29 ], [ -1.000000e+00, %15 ]
  ret float %174
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_Z18SkChopMonoCubicAtYP7SkPointfS0_(%struct.SkPoint* nocapture readonly, float, %struct.SkPoint* nocapture) local_unnamed_addr #6 {
  %4 = alloca %struct.SkDCubic, align 16
  %5 = alloca [3 x double], align 16
  %6 = alloca %struct.SkDCubicPair, align 16
  %7 = bitcast %struct.SkDCubic* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %7) #16
  %8 = bitcast [3 x double]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %8) #16
  %9 = getelementptr inbounds [3 x double], [3 x double]* %5, i64 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %8, i8 -1, i64 24, i1 false) #16
  %10 = bitcast %struct.SkPoint* %0 to <2 x float>*
  %11 = load <2 x float>, <2 x float>* %10, align 4
  %12 = fpext <2 x float> %11 to <2 x double>
  %13 = bitcast %struct.SkDCubic* %4 to <2 x double>*
  store <2 x double> %12, <2 x double>* %13, align 16
  %14 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 0
  %15 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %4, i64 0, i32 0, i64 1, i32 0
  %16 = bitcast float* %14 to <2 x float>*
  %17 = load <2 x float>, <2 x float>* %16, align 4
  %18 = fpext <2 x float> %17 to <2 x double>
  %19 = bitcast double* %15 to <2 x double>*
  store <2 x double> %18, <2 x double>* %19, align 16
  %20 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2, i32 0
  %21 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %4, i64 0, i32 0, i64 2, i32 0
  %22 = bitcast float* %20 to <2 x float>*
  %23 = load <2 x float>, <2 x float>* %22, align 4
  %24 = fpext <2 x float> %23 to <2 x double>
  %25 = bitcast double* %21 to <2 x double>*
  store <2 x double> %24, <2 x double>* %25, align 16
  %26 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 3, i32 0
  %27 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %4, i64 0, i32 0, i64 3, i32 0
  %28 = bitcast float* %26 to <2 x float>*
  %29 = load <2 x float>, <2 x float>* %28, align 4
  %30 = fpext <2 x float> %29 to <2 x double>
  %31 = bitcast double* %27 to <2 x double>*
  store <2 x double> %30, <2 x double>* %31, align 16
  %32 = fpext float %1 to double
  %33 = call i32 @_ZNK8SkDCubic19horizontalIntersectEdPd(%struct.SkDCubic* nonnull %4, double %32, double* nonnull %9) #16
  %34 = icmp sgt i32 %33, 0
  br i1 %34, label %35, label %78

35:                                               ; preds = %3
  %36 = bitcast %struct.SkDCubicPair* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 112, i8* nonnull %36) #16
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %36, i8 -1, i64 112, i1 false) #16
  %37 = load double, double* %9, align 16
  call void @_ZNK8SkDCubic6chopAtEd(%struct.SkDCubicPair* nonnull sret %6, %struct.SkDCubic* nonnull %4, double %37) #16
  %38 = bitcast %struct.SkDCubicPair* %6 to <2 x double>*
  %39 = load <2 x double>, <2 x double>* %38, align 16
  %40 = fptrunc <2 x double> %39 to <2 x float>
  %41 = bitcast %struct.SkPoint* %2 to <2 x float>*
  store <2 x float> %40, <2 x float>* %41, align 4
  %42 = getelementptr inbounds %struct.SkDCubicPair, %struct.SkDCubicPair* %6, i64 0, i32 0, i64 1, i32 0
  %43 = bitcast double* %42 to <2 x double>*
  %44 = load <2 x double>, <2 x double>* %43, align 16
  %45 = fptrunc <2 x double> %44 to <2 x float>
  %46 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 1
  %47 = bitcast %struct.SkPoint* %46 to <2 x float>*
  store <2 x float> %45, <2 x float>* %47, align 4
  %48 = getelementptr inbounds %struct.SkDCubicPair, %struct.SkDCubicPair* %6, i64 0, i32 0, i64 2, i32 0
  %49 = bitcast double* %48 to <2 x double>*
  %50 = load <2 x double>, <2 x double>* %49, align 16
  %51 = fptrunc <2 x double> %50 to <2 x float>
  %52 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 2
  %53 = bitcast %struct.SkPoint* %52 to <2 x float>*
  store <2 x float> %51, <2 x float>* %53, align 4
  %54 = getelementptr inbounds %struct.SkDCubicPair, %struct.SkDCubicPair* %6, i64 0, i32 0, i64 3, i32 0
  %55 = bitcast double* %54 to <2 x double>*
  %56 = load <2 x double>, <2 x double>* %55, align 16
  %57 = fptrunc <2 x double> %56 to <2 x float>
  %58 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 3
  %59 = bitcast %struct.SkPoint* %58 to <2 x float>*
  store <2 x float> %57, <2 x float>* %59, align 4
  %60 = getelementptr inbounds %struct.SkDCubicPair, %struct.SkDCubicPair* %6, i64 0, i32 0, i64 4, i32 0
  %61 = bitcast double* %60 to <2 x double>*
  %62 = load <2 x double>, <2 x double>* %61, align 16
  %63 = fptrunc <2 x double> %62 to <2 x float>
  %64 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 4
  %65 = bitcast %struct.SkPoint* %64 to <2 x float>*
  store <2 x float> %63, <2 x float>* %65, align 4
  %66 = getelementptr inbounds %struct.SkDCubicPair, %struct.SkDCubicPair* %6, i64 0, i32 0, i64 5, i32 0
  %67 = bitcast double* %66 to <2 x double>*
  %68 = load <2 x double>, <2 x double>* %67, align 16
  %69 = fptrunc <2 x double> %68 to <2 x float>
  %70 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 5
  %71 = bitcast %struct.SkPoint* %70 to <2 x float>*
  store <2 x float> %69, <2 x float>* %71, align 4
  %72 = getelementptr inbounds %struct.SkDCubicPair, %struct.SkDCubicPair* %6, i64 0, i32 0, i64 6, i32 0
  %73 = bitcast double* %72 to <2 x double>*
  %74 = load <2 x double>, <2 x double>* %73, align 16
  %75 = fptrunc <2 x double> %74 to <2 x float>
  %76 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 6
  %77 = bitcast %struct.SkPoint* %76 to <2 x float>*
  store <2 x float> %75, <2 x float>* %77, align 4
  call void @llvm.lifetime.end.p0i8(i64 112, i8* nonnull %36) #16
  br label %78

78:                                               ; preds = %3, %35
  %79 = phi i1 [ true, %35 ], [ false, %3 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %8) #16
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %7) #16
  ret i1 %79
}

declare i32 @_ZNK8SkDCubic19horizontalIntersectEdPd(%struct.SkDCubic*, double, double*) local_unnamed_addr #14

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_Z18SkChopMonoCubicAtXP7SkPointfS0_(%struct.SkPoint* nocapture readonly, float, %struct.SkPoint* nocapture) local_unnamed_addr #6 {
  %4 = alloca %struct.SkDCubic, align 16
  %5 = alloca [3 x double], align 16
  %6 = alloca %struct.SkDCubicPair, align 16
  %7 = bitcast %struct.SkDCubic* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %7) #16
  %8 = bitcast [3 x double]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %8) #16
  %9 = getelementptr inbounds [3 x double], [3 x double]* %5, i64 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %8, i8 -1, i64 24, i1 false) #16
  %10 = bitcast %struct.SkPoint* %0 to <2 x float>*
  %11 = load <2 x float>, <2 x float>* %10, align 4
  %12 = fpext <2 x float> %11 to <2 x double>
  %13 = bitcast %struct.SkDCubic* %4 to <2 x double>*
  store <2 x double> %12, <2 x double>* %13, align 16
  %14 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 0
  %15 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %4, i64 0, i32 0, i64 1, i32 0
  %16 = bitcast float* %14 to <2 x float>*
  %17 = load <2 x float>, <2 x float>* %16, align 4
  %18 = fpext <2 x float> %17 to <2 x double>
  %19 = bitcast double* %15 to <2 x double>*
  store <2 x double> %18, <2 x double>* %19, align 16
  %20 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2, i32 0
  %21 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %4, i64 0, i32 0, i64 2, i32 0
  %22 = bitcast float* %20 to <2 x float>*
  %23 = load <2 x float>, <2 x float>* %22, align 4
  %24 = fpext <2 x float> %23 to <2 x double>
  %25 = bitcast double* %21 to <2 x double>*
  store <2 x double> %24, <2 x double>* %25, align 16
  %26 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 3, i32 0
  %27 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %4, i64 0, i32 0, i64 3, i32 0
  %28 = bitcast float* %26 to <2 x float>*
  %29 = load <2 x float>, <2 x float>* %28, align 4
  %30 = fpext <2 x float> %29 to <2 x double>
  %31 = bitcast double* %27 to <2 x double>*
  store <2 x double> %30, <2 x double>* %31, align 16
  %32 = fpext float %1 to double
  %33 = call i32 @_ZNK8SkDCubic17verticalIntersectEdPd(%struct.SkDCubic* nonnull %4, double %32, double* nonnull %9) #16
  %34 = icmp sgt i32 %33, 0
  br i1 %34, label %35, label %78

35:                                               ; preds = %3
  %36 = bitcast %struct.SkDCubicPair* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 112, i8* nonnull %36) #16
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %36, i8 -1, i64 112, i1 false) #16
  %37 = load double, double* %9, align 16
  call void @_ZNK8SkDCubic6chopAtEd(%struct.SkDCubicPair* nonnull sret %6, %struct.SkDCubic* nonnull %4, double %37) #16
  %38 = bitcast %struct.SkDCubicPair* %6 to <2 x double>*
  %39 = load <2 x double>, <2 x double>* %38, align 16
  %40 = fptrunc <2 x double> %39 to <2 x float>
  %41 = bitcast %struct.SkPoint* %2 to <2 x float>*
  store <2 x float> %40, <2 x float>* %41, align 4
  %42 = getelementptr inbounds %struct.SkDCubicPair, %struct.SkDCubicPair* %6, i64 0, i32 0, i64 1, i32 0
  %43 = bitcast double* %42 to <2 x double>*
  %44 = load <2 x double>, <2 x double>* %43, align 16
  %45 = fptrunc <2 x double> %44 to <2 x float>
  %46 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 1
  %47 = bitcast %struct.SkPoint* %46 to <2 x float>*
  store <2 x float> %45, <2 x float>* %47, align 4
  %48 = getelementptr inbounds %struct.SkDCubicPair, %struct.SkDCubicPair* %6, i64 0, i32 0, i64 2, i32 0
  %49 = bitcast double* %48 to <2 x double>*
  %50 = load <2 x double>, <2 x double>* %49, align 16
  %51 = fptrunc <2 x double> %50 to <2 x float>
  %52 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 2
  %53 = bitcast %struct.SkPoint* %52 to <2 x float>*
  store <2 x float> %51, <2 x float>* %53, align 4
  %54 = getelementptr inbounds %struct.SkDCubicPair, %struct.SkDCubicPair* %6, i64 0, i32 0, i64 3, i32 0
  %55 = bitcast double* %54 to <2 x double>*
  %56 = load <2 x double>, <2 x double>* %55, align 16
  %57 = fptrunc <2 x double> %56 to <2 x float>
  %58 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 3
  %59 = bitcast %struct.SkPoint* %58 to <2 x float>*
  store <2 x float> %57, <2 x float>* %59, align 4
  %60 = getelementptr inbounds %struct.SkDCubicPair, %struct.SkDCubicPair* %6, i64 0, i32 0, i64 4, i32 0
  %61 = bitcast double* %60 to <2 x double>*
  %62 = load <2 x double>, <2 x double>* %61, align 16
  %63 = fptrunc <2 x double> %62 to <2 x float>
  %64 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 4
  %65 = bitcast %struct.SkPoint* %64 to <2 x float>*
  store <2 x float> %63, <2 x float>* %65, align 4
  %66 = getelementptr inbounds %struct.SkDCubicPair, %struct.SkDCubicPair* %6, i64 0, i32 0, i64 5, i32 0
  %67 = bitcast double* %66 to <2 x double>*
  %68 = load <2 x double>, <2 x double>* %67, align 16
  %69 = fptrunc <2 x double> %68 to <2 x float>
  %70 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 5
  %71 = bitcast %struct.SkPoint* %70 to <2 x float>*
  store <2 x float> %69, <2 x float>* %71, align 4
  %72 = getelementptr inbounds %struct.SkDCubicPair, %struct.SkDCubicPair* %6, i64 0, i32 0, i64 6, i32 0
  %73 = bitcast double* %72 to <2 x double>*
  %74 = load <2 x double>, <2 x double>* %73, align 16
  %75 = fptrunc <2 x double> %74 to <2 x float>
  %76 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 6
  %77 = bitcast %struct.SkPoint* %76 to <2 x float>*
  store <2 x float> %75, <2 x float>* %77, align 4
  call void @llvm.lifetime.end.p0i8(i64 112, i8* nonnull %36) #16
  br label %78

78:                                               ; preds = %3, %35
  %79 = phi i1 [ true, %35 ], [ false, %3 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %8) #16
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %7) #16
  ret i1 %79
}

declare i32 @_ZNK8SkDCubic17verticalIntersectEdPd(%struct.SkDCubic*, double, double*) local_unnamed_addr #14

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK7SkConic6chopAtEfPS_(%struct.SkConic* nocapture readonly, float, %struct.SkConic* nocapture) local_unnamed_addr #6 align 2 {
  %4 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 1
  %5 = load float, float* %4, align 4
  %6 = bitcast %struct.SkConic* %0 to <2 x float>*
  %7 = load <2 x float>, <2 x float>* %6, align 4
  %8 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 0, i64 1, i32 0
  %9 = bitcast float* %8 to <2 x float>*
  %10 = load <2 x float>, <2 x float>* %9, align 4
  %11 = insertelement <2 x float> undef, float %5, i32 0
  %12 = shufflevector <2 x float> %11, <2 x float> undef, <2 x i32> zeroinitializer
  %13 = fmul <2 x float> %12, %10
  %14 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 0, i64 2, i32 0
  %15 = bitcast float* %14 to <2 x float>*
  %16 = load <2 x float>, <2 x float>* %15, align 4
  %17 = fsub <2 x float> %13, %7
  %18 = insertelement <2 x float> undef, float %1, i32 0
  %19 = shufflevector <2 x float> %18, <2 x float> undef, <2 x i32> zeroinitializer
  %20 = fmul <2 x float> %17, %19
  %21 = fadd <2 x float> %7, %20
  %22 = fsub <2 x float> %16, %13
  %23 = fmul <2 x float> %22, %19
  %24 = fadd <2 x float> %13, %23
  %25 = fsub <2 x float> %24, %21
  %26 = fmul <2 x float> %25, %19
  %27 = fadd <2 x float> %21, %26
  %28 = fadd float %5, -1.000000e+00
  %29 = fmul float %28, %1
  %30 = fadd float %29, 1.000000e+00
  %31 = fsub float 1.000000e+00, %5
  %32 = fmul float %31, %1
  %33 = fadd float %5, %32
  %34 = fsub float %33, %30
  %35 = fmul float %34, %1
  %36 = fadd float %30, %35
  %37 = bitcast %struct.SkConic* %0 to i64*
  %38 = bitcast %struct.SkConic* %2 to i64*
  %39 = load i64, i64* %37, align 4
  store i64 %39, i64* %38, align 4
  %40 = insertelement <2 x float> undef, float %30, i32 0
  %41 = shufflevector <2 x float> %40, <2 x float> undef, <2 x i32> zeroinitializer
  %42 = fdiv <2 x float> %21, %41
  %43 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %2, i64 0, i32 0, i64 1
  %44 = bitcast %struct.SkPoint* %43 to <2 x float>*
  store <2 x float> %42, <2 x float>* %44, align 4
  %45 = insertelement <2 x float> undef, float %36, i32 0
  %46 = shufflevector <2 x float> %45, <2 x float> undef, <2 x i32> zeroinitializer
  %47 = fdiv <2 x float> %27, %46
  %48 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %2, i64 0, i32 0, i64 2
  %49 = bitcast %struct.SkPoint* %48 to <2 x float>*
  store <2 x float> %47, <2 x float>* %49, align 4
  %50 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %2, i64 1
  %51 = bitcast %struct.SkConic* %50 to <2 x float>*
  store <2 x float> %47, <2 x float>* %51, align 4
  %52 = insertelement <2 x float> undef, float %33, i32 0
  %53 = shufflevector <2 x float> %52, <2 x float> undef, <2 x i32> zeroinitializer
  %54 = fdiv <2 x float> %24, %53
  %55 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %2, i64 1, i32 0, i64 1
  %56 = bitcast %struct.SkPoint* %55 to <2 x float>*
  store <2 x float> %54, <2 x float>* %56, align 4
  %57 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 0, i64 2
  %58 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %2, i64 1, i32 0, i64 2
  %59 = bitcast %struct.SkPoint* %57 to i64*
  %60 = bitcast %struct.SkPoint* %58 to i64*
  %61 = load i64, i64* %59, align 4
  store i64 %61, i64* %60, align 4
  %62 = tail call float @sqrtf(float %36) #16
  %63 = fdiv float %30, %62
  %64 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %2, i64 0, i32 1
  store float %63, float* %64, align 4
  %65 = fdiv float %33, %62
  %66 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %2, i64 1, i32 1
  store float %65, float* %66, align 4
  %67 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %2, i64 0, i32 0, i64 0, i32 0
  %68 = load float, float* %67, align 4
  %69 = fmul float %68, 0.000000e+00
  %70 = getelementptr inbounds float, float* %67, i64 1
  %71 = load float, float* %70, align 4
  %72 = fmul float %69, %71
  %73 = getelementptr inbounds float, float* %67, i64 2
  %74 = load float, float* %73, align 4
  %75 = fmul float %72, %74
  %76 = getelementptr inbounds float, float* %67, i64 3
  %77 = load float, float* %76, align 4
  %78 = fmul float %75, %77
  %79 = getelementptr inbounds float, float* %67, i64 4
  %80 = load float, float* %79, align 4
  %81 = fmul float %78, %80
  %82 = getelementptr inbounds float, float* %67, i64 5
  %83 = load float, float* %82, align 4
  %84 = fmul float %81, %83
  %85 = fmul float %84, %63
  %86 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %2, i64 1, i32 0, i64 0, i32 0
  %87 = load float, float* %86, align 4
  %88 = fmul float %85, %87
  %89 = getelementptr inbounds float, float* %67, i64 8
  %90 = load float, float* %89, align 4
  %91 = fmul float %88, %90
  %92 = getelementptr inbounds float, float* %67, i64 9
  %93 = load float, float* %92, align 4
  %94 = fmul float %91, %93
  %95 = getelementptr inbounds float, float* %67, i64 10
  %96 = load float, float* %95, align 4
  %97 = fmul float %94, %96
  %98 = getelementptr inbounds float, float* %67, i64 11
  %99 = load float, float* %98, align 4
  %100 = fmul float %97, %99
  %101 = getelementptr inbounds float, float* %67, i64 12
  %102 = load float, float* %101, align 4
  %103 = fmul float %100, %102
  %104 = fmul float %103, %65
  %105 = fcmp oeq float %104, 0.000000e+00
  ret i1 %105
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK7SkConic6chopAtEffPS_(%struct.SkConic* nocapture readonly, float, float, %struct.SkConic* nocapture) local_unnamed_addr #5 align 2 {
  %5 = alloca [2 x %struct.SkConic], align 16
  %6 = fcmp oeq float %1, 0.000000e+00
  %7 = fcmp oeq float %2, 1.000000e+00
  %8 = or i1 %6, %7
  br i1 %8, label %11, label %9

9:                                                ; preds = %4
  %10 = bitcast %struct.SkConic* %0 to i64*
  br label %120

11:                                               ; preds = %4
  %12 = and i1 %6, %7
  br i1 %12, label %13, label %16

13:                                               ; preds = %11
  %14 = bitcast %struct.SkConic* %3 to i8*
  %15 = bitcast %struct.SkConic* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %14, i8* align 4 %15, i64 28, i1 false)
  br label %204

16:                                               ; preds = %11
  %17 = bitcast [2 x %struct.SkConic]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %17) #16
  %18 = fcmp une float %1, 0.000000e+00
  %19 = select i1 %18, float %1, float %2
  %20 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 1
  %21 = load float, float* %20, align 4
  %22 = bitcast %struct.SkConic* %0 to <2 x float>*
  %23 = load <2 x float>, <2 x float>* %22, align 4
  %24 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 0, i64 1, i32 0
  %25 = bitcast float* %24 to <2 x float>*
  %26 = load <2 x float>, <2 x float>* %25, align 4
  %27 = insertelement <2 x float> undef, float %21, i32 0
  %28 = shufflevector <2 x float> %27, <2 x float> undef, <2 x i32> zeroinitializer
  %29 = fmul <2 x float> %28, %26
  %30 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 0, i64 2, i32 0
  %31 = bitcast float* %30 to <2 x float>*
  %32 = load <2 x float>, <2 x float>* %31, align 4
  %33 = fsub <2 x float> %29, %23
  %34 = insertelement <2 x float> undef, float %19, i32 0
  %35 = shufflevector <2 x float> %34, <2 x float> undef, <2 x i32> zeroinitializer
  %36 = fmul <2 x float> %35, %33
  %37 = fadd <2 x float> %23, %36
  %38 = fsub <2 x float> %32, %29
  %39 = fmul <2 x float> %35, %38
  %40 = fadd <2 x float> %29, %39
  %41 = fsub <2 x float> %40, %37
  %42 = fmul <2 x float> %35, %41
  %43 = fadd <2 x float> %37, %42
  %44 = fadd float %21, -1.000000e+00
  %45 = fmul float %19, %44
  %46 = fadd float %45, 1.000000e+00
  %47 = fsub float 1.000000e+00, %21
  %48 = fmul float %19, %47
  %49 = fadd float %21, %48
  %50 = fsub float %49, %46
  %51 = fmul float %19, %50
  %52 = fadd float %46, %51
  %53 = bitcast %struct.SkConic* %0 to i64*
  %54 = bitcast [2 x %struct.SkConic]* %5 to i64*
  %55 = load i64, i64* %53, align 4
  store i64 %55, i64* %54, align 16
  %56 = insertelement <2 x float> undef, float %46, i32 0
  %57 = shufflevector <2 x float> %56, <2 x float> undef, <2 x i32> zeroinitializer
  %58 = fdiv <2 x float> %37, %57
  %59 = extractelement <2 x float> %58, i32 0
  %60 = extractelement <2 x float> %58, i32 1
  %61 = getelementptr inbounds [2 x %struct.SkConic], [2 x %struct.SkConic]* %5, i64 0, i64 0, i32 0, i64 1
  %62 = bitcast %struct.SkPoint* %61 to <2 x float>*
  store <2 x float> %58, <2 x float>* %62, align 8
  %63 = insertelement <2 x float> undef, float %52, i32 0
  %64 = shufflevector <2 x float> %63, <2 x float> undef, <2 x i32> zeroinitializer
  %65 = fdiv <2 x float> %43, %64
  %66 = extractelement <2 x float> %65, i32 0
  %67 = extractelement <2 x float> %65, i32 1
  %68 = getelementptr inbounds [2 x %struct.SkConic], [2 x %struct.SkConic]* %5, i64 0, i64 0, i32 0, i64 2
  %69 = bitcast %struct.SkPoint* %68 to <2 x float>*
  store <2 x float> %65, <2 x float>* %69, align 16
  %70 = getelementptr inbounds [2 x %struct.SkConic], [2 x %struct.SkConic]* %5, i64 0, i64 1
  %71 = bitcast %struct.SkConic* %70 to <2 x float>*
  store <2 x float> %65, <2 x float>* %71, align 4
  %72 = insertelement <2 x float> undef, float %49, i32 0
  %73 = shufflevector <2 x float> %72, <2 x float> undef, <2 x i32> zeroinitializer
  %74 = fdiv <2 x float> %40, %73
  %75 = extractelement <2 x float> %74, i32 0
  %76 = extractelement <2 x float> %74, i32 1
  %77 = getelementptr inbounds [2 x %struct.SkConic], [2 x %struct.SkConic]* %5, i64 0, i64 1, i32 0, i64 1
  %78 = bitcast %struct.SkPoint* %77 to <2 x float>*
  store <2 x float> %74, <2 x float>* %78, align 4
  %79 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 0, i64 2
  %80 = getelementptr inbounds [2 x %struct.SkConic], [2 x %struct.SkConic]* %5, i64 0, i64 1, i32 0, i64 2
  %81 = bitcast %struct.SkPoint* %79 to i64*
  %82 = bitcast %struct.SkPoint* %80 to i64*
  %83 = load i64, i64* %81, align 4
  store i64 %83, i64* %82, align 4
  %84 = call float @sqrtf(float %52) #16
  %85 = fdiv float %46, %84
  %86 = getelementptr inbounds [2 x %struct.SkConic], [2 x %struct.SkConic]* %5, i64 0, i64 0, i32 1
  store float %85, float* %86, align 8
  %87 = fdiv float %49, %84
  %88 = getelementptr inbounds [2 x %struct.SkConic], [2 x %struct.SkConic]* %5, i64 0, i64 1, i32 1
  store float %87, float* %88, align 4
  %89 = trunc i64 %55 to i32
  %90 = bitcast i32 %89 to float
  %91 = fmul float %90, 0.000000e+00
  %92 = lshr i64 %55, 32
  %93 = trunc i64 %92 to i32
  %94 = bitcast i32 %93 to float
  %95 = fmul float %91, %94
  %96 = fmul float %95, %59
  %97 = fmul float %96, %60
  %98 = fmul float %97, %66
  %99 = fmul float %98, %67
  %100 = fmul float %85, %99
  %101 = fmul float %100, %66
  %102 = fmul float %67, %101
  %103 = fmul float %102, %75
  %104 = fmul float %76, %103
  %105 = trunc i64 %83 to i32
  %106 = bitcast i32 %105 to float
  %107 = fmul float %104, %106
  %108 = lshr i64 %83, 32
  %109 = trunc i64 %108 to i32
  %110 = bitcast i32 %109 to float
  %111 = fmul float %107, %110
  %112 = fmul float %87, %111
  %113 = fcmp oeq float %112, 0.000000e+00
  br i1 %113, label %114, label %119

114:                                              ; preds = %16
  %115 = zext i1 %18 to i64
  %116 = getelementptr inbounds [2 x %struct.SkConic], [2 x %struct.SkConic]* %5, i64 0, i64 %115
  %117 = bitcast %struct.SkConic* %3 to i8*
  %118 = bitcast %struct.SkConic* %116 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %117, i8* align 4 %118, i64 28, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %17) #16
  br label %204

119:                                              ; preds = %16
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %17) #16
  br label %120

120:                                              ; preds = %9, %119
  %121 = phi i64* [ %10, %9 ], [ %53, %119 ]
  %122 = load i64, i64* %121, align 1
  %123 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %122, i32 0
  %124 = bitcast <2 x i64> %123 to <4 x float>
  %125 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 0, i64 1
  %126 = bitcast %struct.SkPoint* %125 to i64*
  %127 = load i64, i64* %126, align 1
  %128 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %127, i32 0
  %129 = bitcast <2 x i64> %128 to <4 x float>
  %130 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 0, i64 2
  %131 = bitcast %struct.SkPoint* %130 to i64*
  %132 = load i64, i64* %131, align 1
  %133 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %132, i32 0
  %134 = bitcast <2 x i64> %133 to <4 x float>
  %135 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 1
  %136 = load float, float* %135, align 4
  %137 = insertelement <4 x float> undef, float %136, i32 0
  %138 = shufflevector <4 x float> %137, <4 x float> undef, <4 x i32> zeroinitializer
  %139 = fmul <4 x float> %138, %129
  %140 = fadd <4 x float> %139, %139
  %141 = fsub <4 x float> %134, %140
  %142 = fadd <4 x float> %141, %124
  %143 = fsub <4 x float> %139, %124
  %144 = fadd <4 x float> %143, %143
  %145 = fadd <4 x float> %138, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %146 = fadd <4 x float> %145, %145
  %147 = fsub <4 x float> zeroinitializer, %146
  %148 = insertelement <4 x float> undef, float %1, i32 0
  %149 = shufflevector <4 x float> %148, <4 x float> undef, <4 x i32> zeroinitializer
  %150 = fmul <4 x float> %149, %142
  %151 = fadd <4 x float> %144, %150
  %152 = fmul <4 x float> %149, %151
  %153 = fadd <4 x float> %152, %124
  %154 = fmul <4 x float> %149, %147
  %155 = fadd <4 x float> %146, %154
  %156 = fmul <4 x float> %149, %155
  %157 = fadd <4 x float> %156, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %158 = fadd float %1, %2
  %159 = fmul float %158, 5.000000e-01
  %160 = insertelement <4 x float> undef, float %159, i32 0
  %161 = shufflevector <4 x float> %160, <4 x float> undef, <4 x i32> zeroinitializer
  %162 = fmul <4 x float> %161, %142
  %163 = fadd <4 x float> %144, %162
  %164 = fmul <4 x float> %161, %163
  %165 = fadd <4 x float> %164, %124
  %166 = fmul <4 x float> %161, %147
  %167 = fadd <4 x float> %146, %166
  %168 = fmul <4 x float> %161, %167
  %169 = fadd <4 x float> %168, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %170 = insertelement <4 x float> undef, float %2, i32 0
  %171 = shufflevector <4 x float> %170, <4 x float> undef, <4 x i32> zeroinitializer
  %172 = fmul <4 x float> %171, %142
  %173 = fadd <4 x float> %144, %172
  %174 = fmul <4 x float> %171, %173
  %175 = fadd <4 x float> %174, %124
  %176 = fmul <4 x float> %171, %147
  %177 = fadd <4 x float> %146, %176
  %178 = fmul <4 x float> %171, %177
  %179 = fadd <4 x float> %178, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %180 = fadd <4 x float> %165, %165
  %181 = fadd <4 x float> %153, %175
  %182 = fmul <4 x float> %181, <float 5.000000e-01, float 5.000000e-01, float undef, float undef>
  %183 = fsub <4 x float> %180, %182
  %184 = fadd <4 x float> %169, %169
  %185 = fadd <4 x float> %157, %179
  %186 = fmul <4 x float> %185, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %187 = fsub <4 x float> %184, %186
  %188 = fdiv <4 x float> %153, %157
  %189 = shufflevector <4 x float> %188, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %190 = bitcast %struct.SkConic* %3 to <2 x float>*
  store <2 x float> %189, <2 x float>* %190, align 4
  %191 = fdiv <4 x float> %183, %187
  %192 = shufflevector <4 x float> %191, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %193 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %3, i64 0, i32 0, i64 1
  %194 = bitcast %struct.SkPoint* %193 to <2 x float>*
  store <2 x float> %192, <2 x float>* %194, align 4
  %195 = fdiv <4 x float> %175, %179
  %196 = shufflevector <4 x float> %195, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %197 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %3, i64 0, i32 0, i64 2
  %198 = bitcast %struct.SkPoint* %197 to <2 x float>*
  store <2 x float> %196, <2 x float>* %198, align 4
  %199 = fmul <4 x float> %157, %179
  %200 = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %199) #16
  %201 = fdiv <4 x float> %187, %200
  %202 = extractelement <4 x float> %201, i32 0
  %203 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %3, i64 0, i32 1
  store float %202, float* %203, align 4
  br label %204

204:                                              ; preds = %114, %120, %13
  ret void
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden <2 x float> @_ZNK7SkConic6evalAtEf(%struct.SkConic* nocapture readonly, float) local_unnamed_addr #4 align 2 {
  %3 = bitcast %struct.SkConic* %0 to i64*
  %4 = load i64, i64* %3, align 1
  %5 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %4, i32 0
  %6 = bitcast <2 x i64> %5 to <4 x float>
  %7 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 0, i64 1
  %8 = bitcast %struct.SkPoint* %7 to i64*
  %9 = load i64, i64* %8, align 1
  %10 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %9, i32 0
  %11 = bitcast <2 x i64> %10 to <4 x float>
  %12 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 0, i64 2
  %13 = bitcast %struct.SkPoint* %12 to i64*
  %14 = load i64, i64* %13, align 1
  %15 = insertelement <2 x i64> undef, i64 %14, i32 0
  %16 = bitcast <2 x i64> %15 to <4 x float>
  %17 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 1
  %18 = load float, float* %17, align 4
  %19 = insertelement <4 x float> undef, float %18, i32 0
  %20 = shufflevector <4 x float> %19, <4 x float> undef, <4 x i32> zeroinitializer
  %21 = fmul <4 x float> %20, %11
  %22 = fadd <4 x float> %21, %21
  %23 = fsub <4 x float> %16, %22
  %24 = fadd <4 x float> %23, %6
  %25 = fsub <4 x float> %21, %6
  %26 = fadd <4 x float> %25, %25
  %27 = fadd <4 x float> %20, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %28 = fadd <4 x float> %27, %27
  %29 = fsub <4 x float> <float 0.000000e+00, float 0.000000e+00, float undef, float undef>, %28
  %30 = insertelement <4 x float> undef, float %1, i32 0
  %31 = shufflevector <4 x float> %30, <4 x float> undef, <4 x i32> zeroinitializer
  %32 = fmul <4 x float> %31, %24
  %33 = fadd <4 x float> %26, %32
  %34 = fmul <4 x float> %31, %33
  %35 = fadd <4 x float> %34, %6
  %36 = fmul <4 x float> %31, %29
  %37 = fadd <4 x float> %28, %36
  %38 = fmul <4 x float> %31, %37
  %39 = fadd <4 x float> %38, <float 1.000000e+00, float 1.000000e+00, float undef, float undef>
  %40 = fdiv <4 x float> %35, %39
  %41 = shufflevector <4 x float> %40, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  ret <2 x float> %41
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden <2 x float> @_ZNK7SkConic13evalTangentAtEf(%struct.SkConic* nocapture readonly, float) local_unnamed_addr #4 align 2 {
  %3 = fcmp oeq float %1, 0.000000e+00
  br i1 %3, label %4, label %22

4:                                                ; preds = %2
  %5 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 0, i64 0, i32 0
  %6 = load float, float* %5, align 4
  %7 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 0, i64 1, i32 0
  %8 = load float, float* %7, align 4
  %9 = fcmp oeq float %6, %8
  br i1 %9, label %10, label %22

10:                                               ; preds = %4
  %11 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 0, i64 0, i32 1
  %12 = load float, float* %11, align 4
  %13 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 0, i64 1, i32 1
  %14 = load float, float* %13, align 4
  %15 = fcmp oeq float %12, %14
  br i1 %15, label %16, label %22

16:                                               ; preds = %10
  %17 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 0, i64 2, i32 0
  %18 = bitcast float* %17 to <2 x float>*
  %19 = load <2 x float>, <2 x float>* %18, align 4
  %20 = insertelement <2 x float> undef, float %6, i32 0
  %21 = insertelement <2 x float> %20, float %12, i32 1
  br label %41

22:                                               ; preds = %4, %10, %2
  %23 = fcmp oeq float %1, 1.000000e+00
  br i1 %23, label %24, label %45

24:                                               ; preds = %22
  %25 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 0, i64 1, i32 0
  %26 = load float, float* %25, align 4
  %27 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 0, i64 2, i32 0
  %28 = load float, float* %27, align 4
  %29 = fcmp oeq float %26, %28
  br i1 %29, label %30, label %45

30:                                               ; preds = %24
  %31 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 0, i64 1, i32 1
  %32 = load float, float* %31, align 4
  %33 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 0, i64 2, i32 1
  %34 = load float, float* %33, align 4
  %35 = fcmp oeq float %32, %34
  br i1 %35, label %36, label %45

36:                                               ; preds = %30
  %37 = bitcast %struct.SkConic* %0 to <2 x float>*
  %38 = load <2 x float>, <2 x float>* %37, align 4
  %39 = insertelement <2 x float> undef, float %28, i32 0
  %40 = insertelement <2 x float> %39, float %34, i32 1
  br label %41

41:                                               ; preds = %36, %16
  %42 = phi <2 x float> [ %19, %16 ], [ %40, %36 ]
  %43 = phi <2 x float> [ %21, %16 ], [ %38, %36 ]
  %44 = fsub <2 x float> %42, %43
  br label %78

45:                                               ; preds = %24, %30, %22
  %46 = bitcast %struct.SkConic* %0 to i64*
  %47 = load i64, i64* %46, align 1
  %48 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %47, i32 0
  %49 = bitcast <2 x i64> %48 to <4 x float>
  %50 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 0, i64 1
  %51 = bitcast %struct.SkPoint* %50 to i64*
  %52 = load i64, i64* %51, align 1
  %53 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %52, i32 0
  %54 = bitcast <2 x i64> %53 to <4 x float>
  %55 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 0, i64 2
  %56 = bitcast %struct.SkPoint* %55 to i64*
  %57 = load i64, i64* %56, align 1
  %58 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %57, i32 0
  %59 = bitcast <2 x i64> %58 to <4 x float>
  %60 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 1
  %61 = load float, float* %60, align 4
  %62 = insertelement <4 x float> undef, float %61, i32 0
  %63 = shufflevector <4 x float> %62, <4 x float> undef, <4 x i32> zeroinitializer
  %64 = fsub <4 x float> %59, %49
  %65 = fsub <4 x float> %54, %49
  %66 = fmul <4 x float> %65, %63
  %67 = fmul <4 x float> %63, %64
  %68 = fsub <4 x float> %67, %64
  %69 = fsub <4 x float> %64, %66
  %70 = fsub <4 x float> %69, %66
  %71 = insertelement <4 x float> undef, float %1, i32 0
  %72 = shufflevector <4 x float> %71, <4 x float> undef, <4 x i32> zeroinitializer
  %73 = fmul <4 x float> %72, %68
  %74 = fadd <4 x float> %73, %70
  %75 = fmul <4 x float> %72, %74
  %76 = fadd <4 x float> %66, %75
  %77 = shufflevector <4 x float> %76, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  br label %78

78:                                               ; preds = %45, %41
  %79 = phi <2 x float> [ %44, %41 ], [ %77, %45 ]
  ret <2 x float> %79
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZNK7SkConic6evalAtEfP7SkPointS1_(%struct.SkConic* nocapture readonly, float, %struct.SkPoint*, %struct.SkPoint*) local_unnamed_addr #3 align 2 {
  %5 = icmp eq %struct.SkPoint* %2, null
  br i1 %5, label %47, label %6

6:                                                ; preds = %4
  %7 = bitcast %struct.SkConic* %0 to i64*
  %8 = load i64, i64* %7, align 1
  %9 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %8, i32 0
  %10 = bitcast <2 x i64> %9 to <4 x float>
  %11 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 0, i64 1
  %12 = bitcast %struct.SkPoint* %11 to i64*
  %13 = load i64, i64* %12, align 1
  %14 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %13, i32 0
  %15 = bitcast <2 x i64> %14 to <4 x float>
  %16 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 0, i64 2
  %17 = bitcast %struct.SkPoint* %16 to i64*
  %18 = load i64, i64* %17, align 1
  %19 = insertelement <2 x i64> undef, i64 %18, i32 0
  %20 = bitcast <2 x i64> %19 to <4 x float>
  %21 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 1
  %22 = load float, float* %21, align 4
  %23 = insertelement <4 x float> undef, float %22, i32 0
  %24 = shufflevector <4 x float> %23, <4 x float> undef, <4 x i32> zeroinitializer
  %25 = fmul <4 x float> %24, %15
  %26 = fadd <4 x float> %25, %25
  %27 = fsub <4 x float> %20, %26
  %28 = fadd <4 x float> %27, %10
  %29 = fsub <4 x float> %25, %10
  %30 = fadd <4 x float> %29, %29
  %31 = fadd <4 x float> %24, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %32 = fadd <4 x float> %31, %31
  %33 = fsub <4 x float> <float 0.000000e+00, float 0.000000e+00, float undef, float undef>, %32
  %34 = insertelement <4 x float> undef, float %1, i32 0
  %35 = shufflevector <4 x float> %34, <4 x float> undef, <4 x i32> zeroinitializer
  %36 = fmul <4 x float> %35, %28
  %37 = fadd <4 x float> %30, %36
  %38 = fmul <4 x float> %35, %37
  %39 = fadd <4 x float> %38, %10
  %40 = fmul <4 x float> %35, %33
  %41 = fadd <4 x float> %32, %40
  %42 = fmul <4 x float> %35, %41
  %43 = fadd <4 x float> %42, <float 1.000000e+00, float 1.000000e+00, float undef, float undef>
  %44 = fdiv <4 x float> %39, %43
  %45 = shufflevector <4 x float> %44, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %46 = bitcast %struct.SkPoint* %2 to <2 x float>*
  store <2 x float> %45, <2 x float>* %46, align 4
  br label %47

47:                                               ; preds = %4, %6
  %48 = icmp eq %struct.SkPoint* %3, null
  br i1 %48, label %128, label %49

49:                                               ; preds = %47
  %50 = fcmp oeq float %1, 0.000000e+00
  br i1 %50, label %51, label %69

51:                                               ; preds = %49
  %52 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 0, i64 0, i32 0
  %53 = load float, float* %52, align 4
  %54 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 0, i64 1, i32 0
  %55 = load float, float* %54, align 4
  %56 = fcmp oeq float %53, %55
  br i1 %56, label %57, label %69

57:                                               ; preds = %51
  %58 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 0, i64 0, i32 1
  %59 = load float, float* %58, align 4
  %60 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 0, i64 1, i32 1
  %61 = load float, float* %60, align 4
  %62 = fcmp oeq float %59, %61
  br i1 %62, label %63, label %69

63:                                               ; preds = %57
  %64 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 0, i64 2, i32 0
  %65 = bitcast float* %64 to <2 x float>*
  %66 = load <2 x float>, <2 x float>* %65, align 4
  %67 = insertelement <2 x float> undef, float %53, i32 0
  %68 = insertelement <2 x float> %67, float %59, i32 1
  br label %88

69:                                               ; preds = %57, %51, %49
  %70 = fcmp oeq float %1, 1.000000e+00
  br i1 %70, label %71, label %92

71:                                               ; preds = %69
  %72 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 0, i64 1, i32 0
  %73 = load float, float* %72, align 4
  %74 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 0, i64 2, i32 0
  %75 = load float, float* %74, align 4
  %76 = fcmp oeq float %73, %75
  br i1 %76, label %77, label %92

77:                                               ; preds = %71
  %78 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 0, i64 1, i32 1
  %79 = load float, float* %78, align 4
  %80 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 0, i64 2, i32 1
  %81 = load float, float* %80, align 4
  %82 = fcmp oeq float %79, %81
  br i1 %82, label %83, label %92

83:                                               ; preds = %77
  %84 = bitcast %struct.SkConic* %0 to <2 x float>*
  %85 = load <2 x float>, <2 x float>* %84, align 4
  %86 = insertelement <2 x float> undef, float %75, i32 0
  %87 = insertelement <2 x float> %86, float %81, i32 1
  br label %88

88:                                               ; preds = %83, %63
  %89 = phi <2 x float> [ %66, %63 ], [ %87, %83 ]
  %90 = phi <2 x float> [ %68, %63 ], [ %85, %83 ]
  %91 = fsub <2 x float> %89, %90
  br label %125

92:                                               ; preds = %77, %71, %69
  %93 = bitcast %struct.SkConic* %0 to i64*
  %94 = load i64, i64* %93, align 1
  %95 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %94, i32 0
  %96 = bitcast <2 x i64> %95 to <4 x float>
  %97 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 0, i64 1
  %98 = bitcast %struct.SkPoint* %97 to i64*
  %99 = load i64, i64* %98, align 1
  %100 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %99, i32 0
  %101 = bitcast <2 x i64> %100 to <4 x float>
  %102 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 0, i64 2
  %103 = bitcast %struct.SkPoint* %102 to i64*
  %104 = load i64, i64* %103, align 1
  %105 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %104, i32 0
  %106 = bitcast <2 x i64> %105 to <4 x float>
  %107 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 1
  %108 = load float, float* %107, align 4
  %109 = insertelement <4 x float> undef, float %108, i32 0
  %110 = shufflevector <4 x float> %109, <4 x float> undef, <4 x i32> zeroinitializer
  %111 = fsub <4 x float> %106, %96
  %112 = fsub <4 x float> %101, %96
  %113 = fmul <4 x float> %112, %110
  %114 = fmul <4 x float> %110, %111
  %115 = fsub <4 x float> %114, %111
  %116 = fsub <4 x float> %111, %113
  %117 = fsub <4 x float> %116, %113
  %118 = insertelement <4 x float> undef, float %1, i32 0
  %119 = shufflevector <4 x float> %118, <4 x float> undef, <4 x i32> zeroinitializer
  %120 = fmul <4 x float> %119, %115
  %121 = fadd <4 x float> %120, %117
  %122 = fmul <4 x float> %119, %121
  %123 = fadd <4 x float> %113, %122
  %124 = shufflevector <4 x float> %123, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  br label %125

125:                                              ; preds = %88, %92
  %126 = phi <2 x float> [ %91, %88 ], [ %124, %92 ]
  %127 = bitcast %struct.SkPoint* %3 to <2 x float>*
  store <2 x float> %126, <2 x float>* %127, align 4
  br label %128

128:                                              ; preds = %47, %125
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK7SkConic4chopEPS_(%struct.SkConic* nocapture readonly, %struct.SkConic* noalias nocapture) local_unnamed_addr #5 align 2 {
  %3 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 1
  %4 = load float, float* %3, align 4
  %5 = fadd float %4, 1.000000e+00
  %6 = fdiv float 1.000000e+00, %5
  %7 = insertelement <4 x float> undef, float %6, i32 0
  %8 = shufflevector <4 x float> %7, <4 x float> undef, <4 x i32> zeroinitializer
  %9 = fmul float %4, 5.000000e-01
  %10 = fadd float %9, 5.000000e-01
  %11 = tail call float @sqrtf(float %10) #16
  %12 = bitcast %struct.SkConic* %0 to i64*
  %13 = load i64, i64* %12, align 1
  %14 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %13, i32 0
  %15 = bitcast <2 x i64> %14 to <4 x float>
  %16 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 0, i64 1
  %17 = bitcast %struct.SkPoint* %16 to i64*
  %18 = load i64, i64* %17, align 1
  %19 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %18, i32 0
  %20 = bitcast <2 x i64> %19 to <4 x float>
  %21 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 0, i64 2
  %22 = bitcast %struct.SkPoint* %21 to i64*
  %23 = load i64, i64* %22, align 1
  %24 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %23, i32 0
  %25 = bitcast <2 x i64> %24 to <4 x float>
  %26 = load float, float* %3, align 4
  %27 = insertelement <4 x float> undef, float %26, i32 0
  %28 = shufflevector <4 x float> %27, <4 x float> undef, <4 x i32> zeroinitializer
  %29 = fmul <4 x float> %28, %20
  %30 = fadd <4 x float> %29, %29
  %31 = fadd <4 x float> %30, %15
  %32 = fadd <4 x float> %31, %25
  %33 = fmul <4 x float> %8, %32
  %34 = fmul <4 x float> %33, <float 5.000000e-01, float 5.000000e-01, float undef, float undef>
  %35 = shufflevector <4 x float> %34, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %36 = extractelement <4 x float> %34, i32 0
  %37 = fmul float %36, 0.000000e+00
  %38 = extractelement <4 x float> %34, i32 1
  %39 = fmul float %38, %37
  %40 = fcmp ord float %39, 0.000000e+00
  br i1 %40, label %77, label %41

41:                                               ; preds = %2
  %42 = trunc i64 %23 to i32
  %43 = bitcast i32 %42 to float
  %44 = trunc i64 %18 to i32
  %45 = bitcast i32 %44 to float
  %46 = trunc i64 %13 to i32
  %47 = bitcast i32 %46 to float
  %48 = fpext float %26 to double
  %49 = fmul double %48, 2.000000e+00
  %50 = fadd double %48, 1.000000e+00
  %51 = fdiv double 1.000000e+00, %50
  %52 = fmul double %51, 5.000000e-01
  %53 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 0, i64 0, i32 1
  %54 = load float, float* %53, align 4
  %55 = insertelement <2 x float> undef, float %47, i32 0
  %56 = insertelement <2 x float> %55, float %54, i32 1
  %57 = fpext <2 x float> %56 to <2 x double>
  %58 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 0, i64 1, i32 1
  %59 = load float, float* %58, align 4
  %60 = insertelement <2 x float> undef, float %45, i32 0
  %61 = insertelement <2 x float> %60, float %59, i32 1
  %62 = fpext <2 x float> %61 to <2 x double>
  %63 = insertelement <2 x double> undef, double %49, i32 0
  %64 = shufflevector <2 x double> %63, <2 x double> undef, <2 x i32> zeroinitializer
  %65 = fmul <2 x double> %64, %62
  %66 = fadd <2 x double> %65, %57
  %67 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 0, i64 2, i32 1
  %68 = load float, float* %67, align 4
  %69 = insertelement <2 x float> undef, float %43, i32 0
  %70 = insertelement <2 x float> %69, float %68, i32 1
  %71 = fpext <2 x float> %70 to <2 x double>
  %72 = fadd <2 x double> %66, %71
  %73 = insertelement <2 x double> undef, double %52, i32 0
  %74 = shufflevector <2 x double> %73, <2 x double> undef, <2 x i32> zeroinitializer
  %75 = fmul <2 x double> %74, %72
  %76 = fptrunc <2 x double> %75 to <2 x float>
  br label %77

77:                                               ; preds = %41, %2
  %78 = phi <2 x float> [ %35, %2 ], [ %76, %41 ]
  %79 = bitcast %struct.SkConic* %1 to i64*
  store i64 %13, i64* %79, align 4
  %80 = fadd <4 x float> %29, %15
  %81 = fmul <4 x float> %8, %80
  %82 = shufflevector <4 x float> %81, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %83 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %1, i64 0, i32 0, i64 1
  %84 = bitcast %struct.SkPoint* %83 to <2 x float>*
  store <2 x float> %82, <2 x float>* %84, align 4
  %85 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %1, i64 1
  %86 = bitcast %struct.SkConic* %85 to <2 x float>*
  store <2 x float> %78, <2 x float>* %86, align 4
  %87 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %1, i64 0, i32 0, i64 2
  %88 = bitcast %struct.SkPoint* %87 to <2 x float>*
  store <2 x float> %78, <2 x float>* %88, align 4
  %89 = fadd <4 x float> %29, %25
  %90 = fmul <4 x float> %8, %89
  %91 = shufflevector <4 x float> %90, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %92 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %1, i64 1, i32 0, i64 1
  %93 = bitcast %struct.SkPoint* %92 to <2 x float>*
  store <2 x float> %91, <2 x float>* %93, align 4
  %94 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %1, i64 1, i32 0, i64 2
  %95 = bitcast %struct.SkPoint* %94 to i64*
  store i64 %23, i64* %95, align 4
  %96 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %1, i64 1, i32 1
  store float %11, float* %96, align 4
  %97 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %1, i64 0, i32 1
  store float %11, float* %97, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZNK7SkConic18computeAsQuadErrorEP7SkPoint(%struct.SkConic* nocapture readonly, %struct.SkPoint* nocapture) local_unnamed_addr #15 align 2 {
  %3 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 1
  %4 = load float, float* %3, align 4
  %5 = fadd float %4, -1.000000e+00
  %6 = fadd float %5, 2.000000e+00
  %7 = fmul float %6, 4.000000e+00
  %8 = fdiv float %5, %7
  %9 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 0, i64 0, i32 0
  %10 = load float, float* %9, align 4
  %11 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 0, i64 1, i32 0
  %12 = load float, float* %11, align 4
  %13 = fmul float %12, 2.000000e+00
  %14 = fsub float %10, %13
  %15 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 0, i64 2, i32 0
  %16 = load float, float* %15, align 4
  %17 = fadd float %16, %14
  %18 = fmul float %8, %17
  %19 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 0, i64 0, i32 1
  %20 = load float, float* %19, align 4
  %21 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 0, i64 1, i32 1
  %22 = load float, float* %21, align 4
  %23 = fmul float %22, 2.000000e+00
  %24 = fsub float %20, %23
  %25 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 0, i64 2, i32 1
  %26 = load float, float* %25, align 4
  %27 = fadd float %26, %24
  %28 = fmul float %8, %27
  %29 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 0, i32 0
  store float %18, float* %29, align 4
  %30 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 0, i32 1
  store float %28, float* %30, align 4
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK7SkConic9asQuadTolEf(%struct.SkConic* nocapture readonly, float) local_unnamed_addr #10 align 2 {
  %3 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 1
  %4 = load float, float* %3, align 4
  %5 = fadd float %4, -1.000000e+00
  %6 = fadd float %5, 2.000000e+00
  %7 = fmul float %6, 4.000000e+00
  %8 = fdiv float %5, %7
  %9 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 0, i64 1, i32 0
  %10 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 0, i64 2, i32 0
  %11 = bitcast %struct.SkConic* %0 to <2 x float>*
  %12 = load <2 x float>, <2 x float>* %11, align 4
  %13 = bitcast float* %9 to <2 x float>*
  %14 = load <2 x float>, <2 x float>* %13, align 4
  %15 = fmul <2 x float> %14, <float 2.000000e+00, float 2.000000e+00>
  %16 = fsub <2 x float> %12, %15
  %17 = bitcast float* %10 to <2 x float>*
  %18 = load <2 x float>, <2 x float>* %17, align 4
  %19 = fadd <2 x float> %18, %16
  %20 = insertelement <2 x float> undef, float %8, i32 0
  %21 = shufflevector <2 x float> %20, <2 x float> undef, <2 x i32> zeroinitializer
  %22 = fmul <2 x float> %21, %19
  %23 = fmul <2 x float> %22, %22
  %24 = extractelement <2 x float> %23, i32 0
  %25 = extractelement <2 x float> %23, i32 1
  %26 = fadd float %24, %25
  %27 = fmul float %1, %1
  %28 = fcmp ole float %26, %27
  ret i1 %28
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden i32 @_ZNK7SkConic15computeQuadPOW2Ef(%struct.SkConic* nocapture readonly, float) local_unnamed_addr #0 align 2 {
  %3 = fcmp olt float %1, 0.000000e+00
  br i1 %3, label %53, label %4

4:                                                ; preds = %2
  %5 = bitcast float %1 to i32
  %6 = and i32 %5, 2139095040
  %7 = icmp eq i32 %6, 2139095040
  br i1 %7, label %53, label %8

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 0, i64 0, i32 0
  %10 = bitcast %struct.SkConic* %0 to <2 x float>*
  %11 = load <2 x float>, <2 x float>* %10, align 4
  %12 = extractelement <2 x float> %11, i32 0
  %13 = fmul float %12, 0.000000e+00
  %14 = extractelement <2 x float> %11, i32 1
  %15 = fmul float %13, %14
  %16 = getelementptr inbounds float, float* %9, i64 2
  %17 = bitcast float* %16 to <2 x float>*
  %18 = load <2 x float>, <2 x float>* %17, align 4
  %19 = extractelement <2 x float> %18, i32 0
  %20 = fmul float %15, %19
  %21 = extractelement <2 x float> %18, i32 1
  %22 = fmul float %20, %21
  %23 = getelementptr inbounds float, float* %9, i64 4
  %24 = bitcast float* %23 to <2 x float>*
  %25 = load <2 x float>, <2 x float>* %24, align 4
  %26 = extractelement <2 x float> %25, i32 0
  %27 = fmul float %22, %26
  %28 = extractelement <2 x float> %25, i32 1
  %29 = fmul float %27, %28
  %30 = fcmp oeq float %29, 0.000000e+00
  br i1 %30, label %31, label %53

31:                                               ; preds = %8
  %32 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 1
  %33 = load float, float* %32, align 4
  %34 = fadd float %33, -1.000000e+00
  %35 = fadd float %34, 2.000000e+00
  %36 = fmul float %35, 4.000000e+00
  %37 = fdiv float %34, %36
  %38 = fmul <2 x float> %18, <float 2.000000e+00, float 2.000000e+00>
  %39 = fsub <2 x float> %11, %38
  %40 = fadd <2 x float> %25, %39
  %41 = insertelement <2 x float> undef, float %37, i32 0
  %42 = shufflevector <2 x float> %41, <2 x float> undef, <2 x i32> zeroinitializer
  %43 = fmul <2 x float> %42, %40
  %44 = fmul <2 x float> %43, %43
  %45 = extractelement <2 x float> %44, i32 0
  %46 = extractelement <2 x float> %44, i32 1
  %47 = fadd float %45, %46
  %48 = tail call float @sqrtf(float %47) #16
  %49 = fcmp ugt float %48, %1
  br i1 %49, label %50, label %53

50:                                               ; preds = %31
  %51 = fmul float %48, 2.500000e-01
  %52 = fcmp ugt float %51, %1
  br i1 %52, label %55, label %53

53:                                               ; preds = %50, %55, %58, %61, %64, %31, %4, %2, %8
  %54 = phi i32 [ 0, %8 ], [ 0, %4 ], [ 0, %2 ], [ 0, %31 ], [ 1, %50 ], [ 2, %55 ], [ 3, %58 ], [ 4, %61 ], [ 5, %64 ]
  ret i32 %54

55:                                               ; preds = %50
  %56 = fmul float %51, 2.500000e-01
  %57 = fcmp ugt float %56, %1
  br i1 %57, label %58, label %53

58:                                               ; preds = %55
  %59 = fmul float %56, 2.500000e-01
  %60 = fcmp ugt float %59, %1
  br i1 %60, label %61, label %53

61:                                               ; preds = %58
  %62 = fmul float %59, 2.500000e-01
  %63 = fcmp ugt float %62, %1
  br i1 %63, label %64, label %53

64:                                               ; preds = %61
  br label %53
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK7SkConic17chopIntoQuadsPOW2EP7SkPointi(%struct.SkConic* nocapture readonly, %struct.SkPoint*, i32) local_unnamed_addr #5 align 2 {
  %4 = bitcast %struct.SkConic* %0 to i64*
  %5 = bitcast %struct.SkPoint* %1 to i64*
  %6 = load i64, i64* %4, align 4
  store i64 %6, i64* %5, align 4
  %7 = icmp eq i32 %2, 5
  br i1 %7, label %8, label %140

8:                                                ; preds = %3
  %9 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 1
  %10 = load float, float* %9, align 4, !noalias !3
  %11 = fadd float %10, 1.000000e+00
  %12 = fdiv float 1.000000e+00, %11
  %13 = insertelement <4 x float> undef, float %12, i32 0
  %14 = shufflevector <4 x float> %13, <4 x float> undef, <4 x i32> zeroinitializer
  %15 = fmul float %10, 5.000000e-01
  %16 = fadd float %15, 5.000000e-01
  %17 = call float @sqrtf(float %16) #16, !noalias !3
  %18 = load i64, i64* %4, align 1, !noalias !3
  %19 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %18, i32 0
  %20 = bitcast <2 x i64> %19 to <4 x float>
  %21 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 0, i64 1
  %22 = bitcast %struct.SkPoint* %21 to i64*
  %23 = load i64, i64* %22, align 1, !noalias !3
  %24 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %23, i32 0
  %25 = bitcast <2 x i64> %24 to <4 x float>
  %26 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 0, i64 2
  %27 = bitcast %struct.SkPoint* %26 to i64*
  %28 = load i64, i64* %27, align 1, !noalias !3
  %29 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %28, i32 0
  %30 = bitcast <2 x i64> %29 to <4 x float>
  %31 = load float, float* %9, align 4, !noalias !3
  %32 = insertelement <4 x float> undef, float %31, i32 0
  %33 = shufflevector <4 x float> %32, <4 x float> undef, <4 x i32> zeroinitializer
  %34 = fmul <4 x float> %33, %25
  %35 = fadd <4 x float> %34, %34
  %36 = fadd <4 x float> %35, %20
  %37 = fadd <4 x float> %36, %30
  %38 = fmul <4 x float> %14, %37
  %39 = fmul <4 x float> %38, <float 5.000000e-01, float 5.000000e-01, float undef, float undef>
  %40 = shufflevector <4 x float> %39, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %41 = extractelement <4 x float> %39, i32 0
  %42 = fmul float %41, 0.000000e+00
  %43 = extractelement <4 x float> %39, i32 1
  %44 = fmul float %43, %42
  %45 = fcmp ord float %44, 0.000000e+00
  br i1 %45, label %82, label %46

46:                                               ; preds = %8
  %47 = trunc i64 %28 to i32
  %48 = bitcast i32 %47 to float
  %49 = trunc i64 %23 to i32
  %50 = bitcast i32 %49 to float
  %51 = trunc i64 %18 to i32
  %52 = bitcast i32 %51 to float
  %53 = fpext float %31 to double
  %54 = fmul double %53, 2.000000e+00
  %55 = fadd double %53, 1.000000e+00
  %56 = fdiv double 1.000000e+00, %55
  %57 = fmul double %56, 5.000000e-01
  %58 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 0, i64 0, i32 1
  %59 = load float, float* %58, align 4, !noalias !3
  %60 = insertelement <2 x float> undef, float %52, i32 0
  %61 = insertelement <2 x float> %60, float %59, i32 1
  %62 = fpext <2 x float> %61 to <2 x double>
  %63 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 0, i64 1, i32 1
  %64 = load float, float* %63, align 4, !noalias !3
  %65 = insertelement <2 x float> undef, float %50, i32 0
  %66 = insertelement <2 x float> %65, float %64, i32 1
  %67 = fpext <2 x float> %66 to <2 x double>
  %68 = insertelement <2 x double> undef, double %54, i32 0
  %69 = shufflevector <2 x double> %68, <2 x double> undef, <2 x i32> zeroinitializer
  %70 = fmul <2 x double> %69, %67
  %71 = fadd <2 x double> %70, %62
  %72 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 0, i64 2, i32 1
  %73 = load float, float* %72, align 4, !noalias !3
  %74 = insertelement <2 x float> undef, float %48, i32 0
  %75 = insertelement <2 x float> %74, float %73, i32 1
  %76 = fpext <2 x float> %75 to <2 x double>
  %77 = fadd <2 x double> %71, %76
  %78 = insertelement <2 x double> undef, double %57, i32 0
  %79 = shufflevector <2 x double> %78, <2 x double> undef, <2 x i32> zeroinitializer
  %80 = fmul <2 x double> %79, %77
  %81 = fptrunc <2 x double> %80 to <2 x float>
  br label %82

82:                                               ; preds = %8, %46
  %83 = phi <2 x float> [ %40, %8 ], [ %81, %46 ]
  %84 = fadd <4 x float> %34, %20
  %85 = fmul <4 x float> %14, %84
  %86 = bitcast <4 x float> %85 to <2 x i64>
  %87 = extractelement <2 x i64> %86, i32 0
  %88 = fadd <4 x float> %34, %30
  %89 = fmul <4 x float> %14, %88
  %90 = bitcast <4 x float> %89 to <2 x i64>
  %91 = extractelement <2 x i64> %90, i32 0
  %92 = trunc i64 %87 to i32
  %93 = bitcast i32 %92 to float
  %94 = extractelement <2 x float> %83, i32 0
  %95 = fsub float %93, %94
  %96 = lshr i64 %87, 32
  %97 = trunc i64 %96 to i32
  %98 = bitcast i32 %97 to float
  %99 = extractelement <2 x float> %83, i32 1
  %100 = fsub float %98, %99
  %101 = bitcast float %95 to i32
  %102 = and i32 %101, 2139095040
  %103 = icmp eq i32 %102, 2139095040
  %104 = trunc i64 %91 to i32
  %105 = bitcast i32 %104 to float
  %106 = lshr i64 %91, 32
  %107 = trunc i64 %106 to i32
  %108 = bitcast i32 %107 to float
  br i1 %103, label %117, label %109

109:                                              ; preds = %82
  %110 = bitcast float %100 to i32
  %111 = and i32 %110, 2139095040
  %112 = icmp eq i32 %111, 2139095040
  br i1 %112, label %117, label %113

113:                                              ; preds = %109
  %114 = fcmp oeq float %95, 0.000000e+00
  %115 = fcmp oeq float %100, 0.000000e+00
  %116 = and i1 %114, %115
  br i1 %116, label %117, label %140

117:                                              ; preds = %82, %109, %113
  %118 = fsub float %94, %105
  %119 = fsub float %99, %108
  %120 = bitcast float %118 to i32
  %121 = and i32 %120, 2139095040
  %122 = icmp eq i32 %121, 2139095040
  br i1 %122, label %131, label %123

123:                                              ; preds = %117
  %124 = bitcast float %119 to i32
  %125 = and i32 %124, 2139095040
  %126 = icmp eq i32 %125, 2139095040
  br i1 %126, label %131, label %127

127:                                              ; preds = %123
  %128 = fcmp oeq float %118, 0.000000e+00
  %129 = fcmp oeq float %119, 0.000000e+00
  %130 = and i1 %128, %129
  br i1 %130, label %131, label %140

131:                                              ; preds = %117, %123, %127
  %132 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 3
  %133 = bitcast %struct.SkPoint* %132 to i64*
  store i64 %87, i64* %133, align 4
  %134 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 2
  %135 = bitcast %struct.SkPoint* %134 to i64*
  store i64 %87, i64* %135, align 4
  %136 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 1
  %137 = bitcast %struct.SkPoint* %136 to i64*
  store i64 %87, i64* %137, align 4
  %138 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 4
  %139 = bitcast %struct.SkPoint* %138 to i64*
  store i64 %28, i64* %139, align 4
  br label %143

140:                                              ; preds = %113, %127, %3
  %141 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 1
  %142 = call fastcc %struct.SkPoint* @_ZL9subdivideRK7SkConicP7SkPointi(%struct.SkConic* dereferenceable(28) %0, %struct.SkPoint* %141, i32 %2)
  br label %143

143:                                              ; preds = %131, %140
  %144 = phi i32 [ %2, %140 ], [ 1, %131 ]
  %145 = shl i32 1, %144
  %146 = shl nsw i32 %145, 1
  %147 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 0, i32 0
  %148 = shl i32 %145, 2
  %149 = or i32 %148, 2
  %150 = icmp sgt i32 %149, 0
  br i1 %150, label %151, label %294

151:                                              ; preds = %143
  %152 = zext i32 %149 to i64
  %153 = add nsw i64 %152, -1
  %154 = and i64 %152, 6
  %155 = icmp ult i64 %153, 7
  br i1 %155, label %196, label %156

156:                                              ; preds = %151
  %157 = sub nsw i64 %152, %154
  br label %158

158:                                              ; preds = %158, %156
  %159 = phi i64 [ 0, %156 ], [ %193, %158 ]
  %160 = phi float [ 0.000000e+00, %156 ], [ %192, %158 ]
  %161 = phi i64 [ %157, %156 ], [ %194, %158 ]
  %162 = getelementptr inbounds float, float* %147, i64 %159
  %163 = load float, float* %162, align 4
  %164 = fmul float %160, %163
  %165 = or i64 %159, 1
  %166 = getelementptr inbounds float, float* %147, i64 %165
  %167 = load float, float* %166, align 4
  %168 = fmul float %164, %167
  %169 = or i64 %159, 2
  %170 = getelementptr inbounds float, float* %147, i64 %169
  %171 = load float, float* %170, align 4
  %172 = fmul float %168, %171
  %173 = or i64 %159, 3
  %174 = getelementptr inbounds float, float* %147, i64 %173
  %175 = load float, float* %174, align 4
  %176 = fmul float %172, %175
  %177 = or i64 %159, 4
  %178 = getelementptr inbounds float, float* %147, i64 %177
  %179 = load float, float* %178, align 4
  %180 = fmul float %176, %179
  %181 = or i64 %159, 5
  %182 = getelementptr inbounds float, float* %147, i64 %181
  %183 = load float, float* %182, align 4
  %184 = fmul float %180, %183
  %185 = or i64 %159, 6
  %186 = getelementptr inbounds float, float* %147, i64 %185
  %187 = load float, float* %186, align 4
  %188 = fmul float %184, %187
  %189 = or i64 %159, 7
  %190 = getelementptr inbounds float, float* %147, i64 %189
  %191 = load float, float* %190, align 4
  %192 = fmul float %188, %191
  %193 = add nuw nsw i64 %159, 8
  %194 = add i64 %161, -8
  %195 = icmp eq i64 %194, 0
  br i1 %195, label %196, label %158

196:                                              ; preds = %151, %158
  %197 = phi float [ undef, %151 ], [ %192, %158 ]
  %198 = phi i64 [ 0, %151 ], [ %193, %158 ]
  %199 = phi float [ 0.000000e+00, %151 ], [ %192, %158 ]
  br label %200

200:                                              ; preds = %200, %196
  %201 = phi i64 [ %198, %196 ], [ %207, %200 ]
  %202 = phi float [ %199, %196 ], [ %206, %200 ]
  %203 = phi i64 [ %154, %196 ], [ %208, %200 ]
  %204 = getelementptr inbounds float, float* %147, i64 %201
  %205 = load float, float* %204, align 4
  %206 = fmul float %202, %205
  %207 = add nuw nsw i64 %201, 1
  %208 = add i64 %203, -1
  %209 = icmp eq i64 %208, 0
  br i1 %209, label %210, label %200, !llvm.loop !6

210:                                              ; preds = %200
  %211 = fcmp une float %206, 0.000000e+00
  %212 = icmp ne i32 %144, 31
  %213 = and i1 %211, %212
  br i1 %213, label %214, label %294

214:                                              ; preds = %210
  %215 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 0, i64 1
  %216 = bitcast %struct.SkPoint* %215 to i64*
  %217 = sext i32 %146 to i64
  %218 = icmp sgt i64 %217, 2
  %219 = select i1 %218, i64 %217, i64 2
  %220 = add nsw i64 %219, -1
  %221 = icmp ult i64 %220, 4
  br i1 %221, label %285, label %222

222:                                              ; preds = %214
  %223 = getelementptr %struct.SkPoint, %struct.SkPoint* %1, i64 1
  %224 = bitcast %struct.SkPoint* %223 to i8*
  %225 = icmp sgt i64 %217, 2
  %226 = select i1 %225, i64 %217, i64 2
  %227 = getelementptr %struct.SkPoint, %struct.SkPoint* %1, i64 %226
  %228 = getelementptr %struct.SkConic, %struct.SkConic* %0, i64 0, i32 0, i64 1, i32 0
  %229 = bitcast float* %228 to i8*
  %230 = getelementptr i8, i8* %229, i64 1
  %231 = icmp ugt i8* %230, %224
  %232 = icmp ult %struct.SkPoint* %215, %227
  %233 = and i1 %231, %232
  br i1 %233, label %285, label %234

234:                                              ; preds = %222
  %235 = and i64 %220, -4
  %236 = or i64 %235, 1
  %237 = add nsw i64 %235, -4
  %238 = lshr exact i64 %237, 2
  %239 = add nuw nsw i64 %238, 1
  %240 = and i64 %239, 1
  %241 = icmp eq i64 %237, 0
  br i1 %241, label %272, label %242

242:                                              ; preds = %234
  %243 = sub nuw nsw i64 %239, %240
  %244 = load i64, i64* %216, align 4, !alias.scope !8
  %245 = insertelement <2 x i64> undef, i64 %244, i32 0
  %246 = shufflevector <2 x i64> %245, <2 x i64> undef, <2 x i32> zeroinitializer
  %247 = insertelement <2 x i64> undef, i64 %244, i32 0
  %248 = shufflevector <2 x i64> %247, <2 x i64> undef, <2 x i32> zeroinitializer
  %249 = load i64, i64* %216, align 4, !alias.scope !8
  %250 = insertelement <2 x i64> undef, i64 %249, i32 0
  %251 = shufflevector <2 x i64> %250, <2 x i64> undef, <2 x i32> zeroinitializer
  %252 = insertelement <2 x i64> undef, i64 %249, i32 0
  %253 = shufflevector <2 x i64> %252, <2 x i64> undef, <2 x i32> zeroinitializer
  br label %254

254:                                              ; preds = %254, %242
  %255 = phi i64 [ 0, %242 ], [ %267, %254 ]
  %256 = phi i64 [ %243, %242 ], [ %268, %254 ]
  %257 = or i64 %255, 1
  %258 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 %257
  %259 = bitcast %struct.SkPoint* %258 to <2 x i64>*
  store <2 x i64> %246, <2 x i64>* %259, align 4, !alias.scope !11, !noalias !8
  %260 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %258, i64 2
  %261 = bitcast %struct.SkPoint* %260 to <2 x i64>*
  store <2 x i64> %248, <2 x i64>* %261, align 4, !alias.scope !11, !noalias !8
  %262 = or i64 %255, 5
  %263 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 %262
  %264 = bitcast %struct.SkPoint* %263 to <2 x i64>*
  store <2 x i64> %251, <2 x i64>* %264, align 4, !alias.scope !11, !noalias !8
  %265 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %263, i64 2
  %266 = bitcast %struct.SkPoint* %265 to <2 x i64>*
  store <2 x i64> %253, <2 x i64>* %266, align 4, !alias.scope !11, !noalias !8
  %267 = add i64 %255, 8
  %268 = add i64 %256, -2
  %269 = icmp eq i64 %268, 0
  br i1 %269, label %270, label %254, !llvm.loop !13

270:                                              ; preds = %254
  %271 = or i64 %267, 1
  br label %272

272:                                              ; preds = %270, %234
  %273 = phi i64 [ 1, %234 ], [ %271, %270 ]
  %274 = icmp eq i64 %240, 0
  br i1 %274, label %285, label %275

275:                                              ; preds = %272
  %276 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 %273
  %277 = load i64, i64* %216, align 4, !alias.scope !8
  %278 = insertelement <2 x i64> undef, i64 %277, i32 0
  %279 = shufflevector <2 x i64> %278, <2 x i64> undef, <2 x i32> zeroinitializer
  %280 = insertelement <2 x i64> undef, i64 %277, i32 0
  %281 = shufflevector <2 x i64> %280, <2 x i64> undef, <2 x i32> zeroinitializer
  %282 = bitcast %struct.SkPoint* %276 to <2 x i64>*
  store <2 x i64> %279, <2 x i64>* %282, align 4, !alias.scope !11, !noalias !8
  %283 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %276, i64 2
  %284 = bitcast %struct.SkPoint* %283 to <2 x i64>*
  store <2 x i64> %281, <2 x i64>* %284, align 4, !alias.scope !11, !noalias !8
  br label %285

285:                                              ; preds = %275, %272, %222, %214
  %286 = phi i64 [ 1, %222 ], [ 1, %214 ], [ %236, %272 ], [ %236, %275 ]
  br label %287

287:                                              ; preds = %285, %287
  %288 = phi i64 [ %292, %287 ], [ %286, %285 ]
  %289 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 %288
  %290 = bitcast %struct.SkPoint* %289 to i64*
  %291 = load i64, i64* %216, align 4
  store i64 %291, i64* %290, align 4
  %292 = add nuw nsw i64 %288, 1
  %293 = icmp slt i64 %292, %217
  br i1 %293, label %287, label %294, !llvm.loop !15

294:                                              ; preds = %287, %210, %143
  ret i32 %145
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc %struct.SkPoint* @_ZL9subdivideRK7SkConicP7SkPointi(%struct.SkConic* nocapture readonly dereferenceable(28), %struct.SkPoint*, i32) unnamed_addr #5 {
  %4 = alloca [2 x %struct.SkConic], align 16
  %5 = icmp eq i32 %2, 0
  br i1 %5, label %6, label %11

6:                                                ; preds = %3
  %7 = bitcast %struct.SkPoint* %1 to i8*
  %8 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 0, i64 1
  %9 = bitcast %struct.SkPoint* %8 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %7, i8* align 4 %9, i64 16, i1 false)
  %10 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 2
  br label %171

11:                                               ; preds = %3
  %12 = bitcast [2 x %struct.SkConic]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %12) #16
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -1, i64 56, i1 false)
  %13 = getelementptr inbounds [2 x %struct.SkConic], [2 x %struct.SkConic]* %4, i64 0, i64 0
  %14 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 1
  %15 = load float, float* %14, align 4, !noalias !16
  %16 = fadd float %15, 1.000000e+00
  %17 = fdiv float 1.000000e+00, %16
  %18 = insertelement <4 x float> undef, float %17, i32 0
  %19 = shufflevector <4 x float> %18, <4 x float> undef, <4 x i32> zeroinitializer
  %20 = fmul float %15, 5.000000e-01
  %21 = fadd float %20, 5.000000e-01
  %22 = call float @sqrtf(float %21) #16, !noalias !16
  %23 = bitcast %struct.SkConic* %0 to i64*
  %24 = load i64, i64* %23, align 1, !noalias !16
  %25 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %24, i32 0
  %26 = bitcast <2 x i64> %25 to <4 x float>
  %27 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 0, i64 1
  %28 = bitcast %struct.SkPoint* %27 to i64*
  %29 = load i64, i64* %28, align 1, !noalias !16
  %30 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %29, i32 0
  %31 = bitcast <2 x i64> %30 to <4 x float>
  %32 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 0, i64 2
  %33 = bitcast %struct.SkPoint* %32 to i64*
  %34 = load i64, i64* %33, align 1, !noalias !16
  %35 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %34, i32 0
  %36 = bitcast <2 x i64> %35 to <4 x float>
  %37 = load float, float* %14, align 4, !noalias !16
  %38 = insertelement <4 x float> undef, float %37, i32 0
  %39 = shufflevector <4 x float> %38, <4 x float> undef, <4 x i32> zeroinitializer
  %40 = fmul <4 x float> %39, %31
  %41 = fadd <4 x float> %40, %40
  %42 = fadd <4 x float> %41, %26
  %43 = fadd <4 x float> %42, %36
  %44 = fmul <4 x float> %19, %43
  %45 = fmul <4 x float> %44, <float 5.000000e-01, float 5.000000e-01, float undef, float undef>
  %46 = extractelement <4 x float> %45, i32 0
  %47 = fmul float %46, 0.000000e+00
  %48 = extractelement <4 x float> %45, i32 1
  %49 = fmul float %48, %47
  %50 = fcmp ord float %49, 0.000000e+00
  br i1 %50, label %51, label %59

51:                                               ; preds = %11
  %52 = shufflevector <4 x float> %45, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %53 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 0, i64 0, i32 1
  %54 = load float, float* %53, align 4
  %55 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 0, i64 2, i32 1
  %56 = load float, float* %55, align 4
  %57 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 0, i64 1, i32 1
  %58 = load float, float* %57, align 4
  br label %95

59:                                               ; preds = %11
  %60 = trunc i64 %34 to i32
  %61 = bitcast i32 %60 to float
  %62 = trunc i64 %29 to i32
  %63 = bitcast i32 %62 to float
  %64 = trunc i64 %24 to i32
  %65 = bitcast i32 %64 to float
  %66 = fpext float %37 to double
  %67 = fmul double %66, 2.000000e+00
  %68 = fadd double %66, 1.000000e+00
  %69 = fdiv double 1.000000e+00, %68
  %70 = fmul double %69, 5.000000e-01
  %71 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 0, i64 0, i32 1
  %72 = load float, float* %71, align 4, !noalias !16
  %73 = insertelement <2 x float> undef, float %65, i32 0
  %74 = insertelement <2 x float> %73, float %72, i32 1
  %75 = fpext <2 x float> %74 to <2 x double>
  %76 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 0, i64 1, i32 1
  %77 = load float, float* %76, align 4, !noalias !16
  %78 = insertelement <2 x float> undef, float %63, i32 0
  %79 = insertelement <2 x float> %78, float %77, i32 1
  %80 = fpext <2 x float> %79 to <2 x double>
  %81 = insertelement <2 x double> undef, double %67, i32 0
  %82 = shufflevector <2 x double> %81, <2 x double> undef, <2 x i32> zeroinitializer
  %83 = fmul <2 x double> %82, %80
  %84 = fadd <2 x double> %83, %75
  %85 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 0, i64 2, i32 1
  %86 = load float, float* %85, align 4, !noalias !16
  %87 = insertelement <2 x float> undef, float %61, i32 0
  %88 = insertelement <2 x float> %87, float %86, i32 1
  %89 = fpext <2 x float> %88 to <2 x double>
  %90 = fadd <2 x double> %84, %89
  %91 = insertelement <2 x double> undef, double %70, i32 0
  %92 = shufflevector <2 x double> %91, <2 x double> undef, <2 x i32> zeroinitializer
  %93 = fmul <2 x double> %92, %90
  %94 = fptrunc <2 x double> %93 to <2 x float>
  br label %95

95:                                               ; preds = %51, %59
  %96 = phi float [ %58, %51 ], [ %77, %59 ]
  %97 = phi float [ %56, %51 ], [ %86, %59 ]
  %98 = phi float [ %54, %51 ], [ %72, %59 ]
  %99 = phi <2 x float> [ %52, %51 ], [ %94, %59 ]
  %100 = bitcast [2 x %struct.SkConic]* %4 to i64*
  store i64 %24, i64* %100, align 16, !alias.scope !16
  %101 = fadd <4 x float> %40, %26
  %102 = fmul <4 x float> %19, %101
  %103 = bitcast <4 x float> %102 to <2 x i64>
  %104 = extractelement <2 x i64> %103, i32 0
  %105 = shufflevector <4 x float> %102, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %106 = getelementptr inbounds [2 x %struct.SkConic], [2 x %struct.SkConic]* %4, i64 0, i64 0, i32 0, i64 1
  %107 = bitcast %struct.SkPoint* %106 to <2 x float>*
  store <2 x float> %105, <2 x float>* %107, align 8, !alias.scope !16
  %108 = getelementptr inbounds [2 x %struct.SkConic], [2 x %struct.SkConic]* %4, i64 0, i64 1
  %109 = bitcast %struct.SkConic* %108 to <2 x float>*
  store <2 x float> %99, <2 x float>* %109, align 4, !alias.scope !16
  %110 = getelementptr inbounds [2 x %struct.SkConic], [2 x %struct.SkConic]* %4, i64 0, i64 0, i32 0, i64 2
  %111 = bitcast %struct.SkPoint* %110 to <2 x float>*
  store <2 x float> %99, <2 x float>* %111, align 16, !alias.scope !16
  %112 = fadd <4 x float> %40, %36
  %113 = fmul <4 x float> %19, %112
  %114 = bitcast <4 x float> %113 to <2 x i64>
  %115 = extractelement <2 x i64> %114, i32 0
  %116 = shufflevector <4 x float> %113, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %117 = getelementptr inbounds [2 x %struct.SkConic], [2 x %struct.SkConic]* %4, i64 0, i64 1, i32 0, i64 1
  %118 = bitcast %struct.SkPoint* %117 to <2 x float>*
  store <2 x float> %116, <2 x float>* %118, align 4, !alias.scope !16
  %119 = getelementptr inbounds [2 x %struct.SkConic], [2 x %struct.SkConic]* %4, i64 0, i64 1, i32 0, i64 2
  %120 = bitcast %struct.SkPoint* %119 to i64*
  store i64 %34, i64* %120, align 4, !alias.scope !16
  %121 = getelementptr inbounds [2 x %struct.SkConic], [2 x %struct.SkConic]* %4, i64 0, i64 1, i32 1
  store float %22, float* %121, align 4, !alias.scope !16
  %122 = getelementptr inbounds [2 x %struct.SkConic], [2 x %struct.SkConic]* %4, i64 0, i64 0, i32 1
  store float %22, float* %122, align 8, !alias.scope !16
  %123 = fsub float %98, %96
  %124 = fsub float %97, %96
  %125 = fmul float %123, %124
  %126 = fcmp ugt float %125, 0.000000e+00
  %127 = extractelement <2 x float> %99, i32 1
  %128 = lshr i64 %104, 32
  %129 = trunc i64 %128 to i32
  %130 = bitcast i32 %129 to float
  %131 = lshr i64 %115, 32
  %132 = trunc i64 %131 to i32
  %133 = bitcast i32 %132 to float
  br i1 %126, label %167, label %134

134:                                              ; preds = %95
  %135 = fsub float %98, %127
  %136 = fsub float %97, %127
  %137 = fmul float %135, %136
  %138 = fcmp ugt float %137, 0.000000e+00
  br i1 %138, label %139, label %152

139:                                              ; preds = %134
  %140 = getelementptr inbounds [2 x %struct.SkConic], [2 x %struct.SkConic]* %4, i64 0, i64 0, i32 0, i64 2, i32 1
  %141 = fsub float %127, %98
  %142 = fcmp olt float %141, 0.000000e+00
  %143 = fsub float -0.000000e+00, %141
  %144 = select i1 %142, float %143, float %141
  %145 = fsub float %127, %97
  %146 = fcmp olt float %145, 0.000000e+00
  %147 = fsub float -0.000000e+00, %145
  %148 = select i1 %146, float %147, float %145
  %149 = fcmp olt float %144, %148
  %150 = select i1 %149, float %98, float %97
  %151 = getelementptr inbounds [2 x %struct.SkConic], [2 x %struct.SkConic]* %4, i64 0, i64 1, i32 0, i64 0, i32 1
  store float %150, float* %151, align 4
  store float %150, float* %140, align 4
  br label %152

152:                                              ; preds = %134, %139
  %153 = phi float [ %127, %134 ], [ %150, %139 ]
  %154 = fsub float %98, %130
  %155 = fsub float %153, %130
  %156 = fmul float %154, %155
  %157 = fcmp ugt float %156, 0.000000e+00
  br i1 %157, label %158, label %160

158:                                              ; preds = %152
  %159 = getelementptr inbounds [2 x %struct.SkConic], [2 x %struct.SkConic]* %4, i64 0, i64 0, i32 0, i64 1, i32 1
  store float %98, float* %159, align 4
  br label %160

160:                                              ; preds = %152, %158
  %161 = fsub float %153, %133
  %162 = fsub float %97, %133
  %163 = fmul float %161, %162
  %164 = fcmp ugt float %163, 0.000000e+00
  br i1 %164, label %165, label %167

165:                                              ; preds = %160
  %166 = getelementptr inbounds [2 x %struct.SkConic], [2 x %struct.SkConic]* %4, i64 0, i64 1, i32 0, i64 1, i32 1
  store float %97, float* %166, align 4
  br label %167

167:                                              ; preds = %160, %95, %165
  %168 = add nsw i32 %2, -1
  %169 = call fastcc %struct.SkPoint* @_ZL9subdivideRK7SkConicP7SkPointi(%struct.SkConic* nonnull dereferenceable(28) %13, %struct.SkPoint* %1, i32 %168)
  %170 = call fastcc %struct.SkPoint* @_ZL9subdivideRK7SkConicP7SkPointi(%struct.SkConic* dereferenceable(28) %108, %struct.SkPoint* %169, i32 %168)
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %12) #16
  br label %171

171:                                              ; preds = %167, %6
  %172 = phi %struct.SkPoint* [ %10, %6 ], [ %170, %167 ]
  ret %struct.SkPoint* %172
}

; Function Attrs: nounwind ssp uwtable
define hidden float @_ZNK7SkConic14findMidTangentEv(%struct.SkConic* nocapture readonly) local_unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 0, i64 1, i32 0
  %3 = bitcast float* %2 to <2 x float>*
  %4 = load <2 x float>, <2 x float>* %3, align 4
  %5 = bitcast %struct.SkConic* %0 to <2 x float>*
  %6 = load <2 x float>, <2 x float>* %5, align 4
  %7 = fsub <2 x float> %4, %6
  %8 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 0, i64 2, i32 0
  %9 = bitcast float* %8 to <2 x float>*
  %10 = load <2 x float>, <2 x float>* %9, align 4
  %11 = fsub <2 x float> %10, %4
  %12 = fsub <2 x float> <float -0.000000e+00, float -0.000000e+00>, %11
  %13 = fmul <2 x float> %7, %12
  %14 = extractelement <2 x float> %13, i32 0
  %15 = extractelement <2 x float> %13, i32 1
  %16 = fadd float %14, %15
  %17 = fcmp ult float %16, 0.000000e+00
  %18 = extractelement <2 x float> %7, i32 0
  %19 = extractelement <2 x float> %7, i32 1
  %20 = extractelement <2 x float> %12, i32 1
  %21 = extractelement <2 x float> %12, i32 0
  br i1 %17, label %22, label %35

22:                                               ; preds = %1
  %23 = shufflevector <2 x float> %12, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %24 = fmul <2 x float> %7, %23
  %25 = extractelement <2 x float> %24, i32 0
  %26 = extractelement <2 x float> %24, i32 1
  %27 = fsub float %25, %26
  %28 = fcmp ult float %27, 0.000000e+00
  br i1 %28, label %32, label %29

29:                                               ; preds = %22
  %30 = fsub float -0.000000e+00, %19
  %31 = extractelement <2 x float> %11, i32 0
  br label %35

32:                                               ; preds = %22
  %33 = fsub float -0.000000e+00, %18
  %34 = extractelement <2 x float> %11, i32 1
  br label %35

35:                                               ; preds = %1, %29, %32
  %36 = phi float [ %19, %32 ], [ %30, %29 ], [ %18, %1 ]
  %37 = phi float [ %33, %32 ], [ %18, %29 ], [ %19, %1 ]
  %38 = phi float [ %34, %32 ], [ %20, %29 ], [ %21, %1 ]
  %39 = phi float [ %21, %32 ], [ %31, %29 ], [ %20, %1 ]
  %40 = insertelement <4 x float> <float undef, float undef, float 0.000000e+00, float 0.000000e+00>, float %36, i32 0
  %41 = insertelement <4 x float> %40, float %38, i32 1
  %42 = insertelement <4 x float> <float undef, float undef, float 0.000000e+00, float 0.000000e+00>, float %37, i32 0
  %43 = insertelement <4 x float> %42, float %39, i32 1
  %44 = fmul <4 x float> %41, %41
  %45 = fmul <4 x float> %43, %43
  %46 = fadd <4 x float> %44, %45
  %47 = tail call <4 x float> @llvm.sqrt.v4f32(<4 x float> %46) #16
  %48 = fdiv <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %47
  %49 = fmul <4 x float> %41, %48
  %50 = fmul <4 x float> %43, %48
  %51 = extractelement <4 x float> %49, i32 0
  %52 = extractelement <4 x float> %49, i32 1
  %53 = fadd float %51, %52
  %54 = extractelement <4 x float> %50, i32 0
  %55 = extractelement <4 x float> %50, i32 1
  %56 = fadd float %54, %55
  %57 = extractelement <2 x float> %6, i32 0
  %58 = extractelement <2 x float> %10, i32 0
  %59 = fsub float %58, %57
  %60 = extractelement <2 x float> %6, i32 1
  %61 = extractelement <2 x float> %10, i32 1
  %62 = fsub float %61, %60
  %63 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 1
  %64 = load float, float* %63, align 4
  %65 = fadd float %64, -1.000000e+00
  %66 = fmul float %59, %65
  %67 = fmul float %62, %65
  %68 = fmul float %64, 2.000000e+00
  %69 = fmul float %18, %68
  %70 = fmul float %19, %68
  %71 = fsub float %59, %69
  %72 = fsub float %62, %70
  %73 = fmul float %18, %64
  %74 = fmul float %19, %64
  %75 = fmul float %66, %53
  %76 = fmul float %67, %56
  %77 = fadd float %75, %76
  %78 = fmul float %71, %53
  %79 = fmul float %72, %56
  %80 = fadd float %78, %79
  %81 = fmul float %73, %53
  %82 = fmul float %74, %56
  %83 = fadd float %81, %82
  %84 = fmul float %80, %80
  %85 = fmul float %77, 4.000000e+00
  %86 = fmul float %83, %85
  %87 = fsub float %84, %86
  %88 = tail call float @sqrtf(float %87) #16
  %89 = tail call float @llvm.copysign.f32(float %88, float %80) #16
  %90 = fadd float %80, %89
  %91 = fmul float %90, -5.000000e-01
  %92 = fmul float %91, -5.000000e-01
  %93 = fmul float %77, %92
  %94 = fmul float %91, %91
  %95 = fadd float %94, %93
  %96 = tail call float @llvm.fabs.f32(float %95) #16
  %97 = fmul float %77, %83
  %98 = fadd float %97, %93
  %99 = tail call float @llvm.fabs.f32(float %98) #16
  %100 = fcmp olt float %96, %99
  br i1 %100, label %101, label %103

101:                                              ; preds = %35
  %102 = fdiv float %91, %77
  br label %105

103:                                              ; preds = %35
  %104 = fdiv float %83, %91
  br label %105

105:                                              ; preds = %101, %103
  %106 = phi float [ %102, %101 ], [ %104, %103 ]
  %107 = fcmp ogt float %106, 0.000000e+00
  %108 = fcmp olt float %106, 1.000000e+00
  %109 = and i1 %107, %108
  %110 = select i1 %109, float %106, float 5.000000e-01
  ret float %110
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK7SkConic12findXExtremaEPf(%struct.SkConic* nocapture readonly, float* nocapture) local_unnamed_addr #13 align 2 {
  %3 = alloca [2 x float], align 4
  %4 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 0, i64 0, i32 0
  %5 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 1
  %6 = load float, float* %5, align 4
  %7 = getelementptr inbounds float, float* %4, i64 4
  %8 = load float, float* %7, align 4
  %9 = load float, float* %4, align 4
  %10 = fsub float %8, %9
  %11 = getelementptr inbounds float, float* %4, i64 2
  %12 = load float, float* %11, align 4
  %13 = fsub float %12, %9
  %14 = fmul float %6, %13
  %15 = fmul float %6, %10
  %16 = fsub float %15, %10
  %17 = fmul float %14, 2.000000e+00
  %18 = fsub float %10, %17
  %19 = bitcast [2 x float]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %19) #16
  %20 = getelementptr inbounds [2 x float], [2 x float]* %3, i64 0, i64 0
  store float 0xFFFFFFFFE0000000, float* %20, align 4
  %21 = getelementptr inbounds [2 x float], [2 x float]* %3, i64 0, i64 1
  store float 0xFFFFFFFFE0000000, float* %21, align 4
  %22 = call i32 @_Z19SkFindUnitQuadRootsfffPf(float %16, float %18, float %14, float* nonnull %20) #16
  %23 = icmp eq i32 %22, 1
  br i1 %23, label %24, label %28

24:                                               ; preds = %2
  %25 = bitcast [2 x float]* %3 to i32*
  %26 = load i32, i32* %25, align 4
  %27 = bitcast float* %1 to i32*
  store i32 %26, i32* %27, align 4
  br label %28

28:                                               ; preds = %2, %24
  %29 = phi i1 [ true, %24 ], [ false, %2 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19) #16
  ret i1 %29
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK7SkConic12findYExtremaEPf(%struct.SkConic* nocapture readonly, float* nocapture) local_unnamed_addr #13 align 2 {
  %3 = alloca [2 x float], align 4
  %4 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 0, i64 0, i32 1
  %5 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 1
  %6 = load float, float* %5, align 4
  %7 = getelementptr inbounds float, float* %4, i64 4
  %8 = load float, float* %7, align 4
  %9 = load float, float* %4, align 4
  %10 = fsub float %8, %9
  %11 = getelementptr inbounds float, float* %4, i64 2
  %12 = load float, float* %11, align 4
  %13 = fsub float %12, %9
  %14 = fmul float %6, %13
  %15 = fmul float %6, %10
  %16 = fsub float %15, %10
  %17 = fmul float %14, 2.000000e+00
  %18 = fsub float %10, %17
  %19 = bitcast [2 x float]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %19) #16
  %20 = getelementptr inbounds [2 x float], [2 x float]* %3, i64 0, i64 0
  store float 0xFFFFFFFFE0000000, float* %20, align 4
  %21 = getelementptr inbounds [2 x float], [2 x float]* %3, i64 0, i64 1
  store float 0xFFFFFFFFE0000000, float* %21, align 4
  %22 = call i32 @_Z19SkFindUnitQuadRootsfffPf(float %16, float %18, float %14, float* nonnull %20) #16
  %23 = icmp eq i32 %22, 1
  br i1 %23, label %24, label %28

24:                                               ; preds = %2
  %25 = bitcast [2 x float]* %3 to i32*
  %26 = load i32, i32* %25, align 4
  %27 = bitcast float* %1 to i32*
  store i32 %26, i32* %27, align 4
  br label %28

28:                                               ; preds = %2, %24
  %29 = phi i1 [ true, %24 ], [ false, %2 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19) #16
  ret i1 %29
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK7SkConic14chopAtXExtremaEPS_(%struct.SkConic* nocapture readonly, %struct.SkConic* nocapture) local_unnamed_addr #13 align 2 {
  %3 = alloca [2 x float], align 4
  %4 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 0, i64 0, i32 0
  %5 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 1
  %6 = load float, float* %5, align 4
  %7 = getelementptr inbounds float, float* %4, i64 4
  %8 = load float, float* %7, align 4
  %9 = load float, float* %4, align 4
  %10 = fsub float %8, %9
  %11 = getelementptr inbounds float, float* %4, i64 2
  %12 = load float, float* %11, align 4
  %13 = fsub float %12, %9
  %14 = fmul float %6, %13
  %15 = fmul float %6, %10
  %16 = fsub float %15, %10
  %17 = fmul float %14, 2.000000e+00
  %18 = fsub float %10, %17
  %19 = bitcast [2 x float]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %19) #16
  %20 = getelementptr inbounds [2 x float], [2 x float]* %3, i64 0, i64 0
  store float 0xFFFFFFFFE0000000, float* %20, align 4
  %21 = getelementptr inbounds [2 x float], [2 x float]* %3, i64 0, i64 1
  store float 0xFFFFFFFFE0000000, float* %21, align 4
  %22 = call i32 @_Z19SkFindUnitQuadRootsfffPf(float %16, float %18, float %14, float* nonnull %20) #16
  %23 = icmp eq i32 %22, 1
  br i1 %23, label %25, label %24

24:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19) #16
  br label %38

25:                                               ; preds = %2
  %26 = load float, float* %20, align 4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19) #16
  %27 = call zeroext i1 @_ZNK7SkConic6chopAtEfPS_(%struct.SkConic* %0, float %26, %struct.SkConic* %1)
  br i1 %27, label %28, label %38

28:                                               ; preds = %25
  %29 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %1, i64 0, i32 0, i64 2, i32 0
  %30 = bitcast float* %29 to i32*
  %31 = load i32, i32* %30, align 4
  %32 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %1, i64 0, i32 0, i64 1
  %33 = bitcast %struct.SkPoint* %32 to i32*
  store i32 %31, i32* %33, align 4
  %34 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %1, i64 1
  %35 = bitcast %struct.SkConic* %34 to i32*
  store i32 %31, i32* %35, align 4
  %36 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %1, i64 1, i32 0, i64 1
  %37 = bitcast %struct.SkPoint* %36 to i32*
  store i32 %31, i32* %37, align 4
  br label %38

38:                                               ; preds = %24, %25, %28
  %39 = phi i1 [ true, %28 ], [ false, %25 ], [ false, %24 ]
  ret i1 %39
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK7SkConic14chopAtYExtremaEPS_(%struct.SkConic* nocapture readonly, %struct.SkConic* nocapture) local_unnamed_addr #13 align 2 {
  %3 = alloca [2 x float], align 4
  %4 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 0, i64 0, i32 1
  %5 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 1
  %6 = load float, float* %5, align 4
  %7 = getelementptr inbounds float, float* %4, i64 4
  %8 = load float, float* %7, align 4
  %9 = load float, float* %4, align 4
  %10 = fsub float %8, %9
  %11 = getelementptr inbounds float, float* %4, i64 2
  %12 = load float, float* %11, align 4
  %13 = fsub float %12, %9
  %14 = fmul float %6, %13
  %15 = fmul float %6, %10
  %16 = fsub float %15, %10
  %17 = fmul float %14, 2.000000e+00
  %18 = fsub float %10, %17
  %19 = bitcast [2 x float]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %19) #16
  %20 = getelementptr inbounds [2 x float], [2 x float]* %3, i64 0, i64 0
  store float 0xFFFFFFFFE0000000, float* %20, align 4
  %21 = getelementptr inbounds [2 x float], [2 x float]* %3, i64 0, i64 1
  store float 0xFFFFFFFFE0000000, float* %21, align 4
  %22 = call i32 @_Z19SkFindUnitQuadRootsfffPf(float %16, float %18, float %14, float* nonnull %20) #16
  %23 = icmp eq i32 %22, 1
  br i1 %23, label %25, label %24

24:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19) #16
  br label %38

25:                                               ; preds = %2
  %26 = load float, float* %20, align 4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19) #16
  %27 = call zeroext i1 @_ZNK7SkConic6chopAtEfPS_(%struct.SkConic* %0, float %26, %struct.SkConic* %1)
  br i1 %27, label %28, label %38

28:                                               ; preds = %25
  %29 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %1, i64 0, i32 0, i64 2, i32 1
  %30 = bitcast float* %29 to i32*
  %31 = load i32, i32* %30, align 4
  %32 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %1, i64 0, i32 0, i64 1, i32 1
  %33 = bitcast float* %32 to i32*
  store i32 %31, i32* %33, align 4
  %34 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %1, i64 1, i32 0, i64 0, i32 1
  %35 = bitcast float* %34 to i32*
  store i32 %31, i32* %35, align 4
  %36 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %1, i64 1, i32 0, i64 1, i32 1
  %37 = bitcast float* %36 to i32*
  store i32 %31, i32* %37, align 4
  br label %38

38:                                               ; preds = %24, %25, %28
  %39 = phi i1 [ true, %28 ], [ false, %25 ], [ false, %24 ]
  ret i1 %39
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK7SkConic18computeTightBoundsEP6SkRect(%struct.SkConic* nocapture readonly, %struct.SkRect*) local_unnamed_addr #5 align 2 {
  %3 = alloca [2 x float], align 4
  %4 = alloca [4 x %struct.SkPoint], align 16
  %5 = bitcast [4 x %struct.SkPoint]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %5) #16
  %6 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %4, i64 0, i64 0
  %7 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %4, i64 0, i64 1
  %8 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %4, i64 0, i64 2
  %9 = bitcast %struct.SkConic* %0 to i64*
  %10 = bitcast [4 x %struct.SkPoint]* %4 to i64*
  %11 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %4, i64 0, i64 2
  %12 = bitcast %struct.SkPoint* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -1, i64 16, i1 false)
  %13 = load i64, i64* %9, align 4
  store i64 %13, i64* %10, align 16
  %14 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 0, i64 2
  %15 = bitcast %struct.SkPoint* %14 to i64*
  %16 = bitcast %struct.SkPoint* %7 to i64*
  %17 = load i64, i64* %15, align 4
  store i64 %17, i64* %16, align 8
  %18 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 0, i64 0, i32 0
  %19 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 1
  %20 = load float, float* %19, align 4
  %21 = trunc i64 %17 to i32
  %22 = bitcast i32 %21 to float
  %23 = trunc i64 %13 to i32
  %24 = bitcast i32 %23 to float
  %25 = fsub float %22, %24
  %26 = getelementptr inbounds float, float* %18, i64 2
  %27 = load float, float* %26, align 4
  %28 = fsub float %27, %24
  %29 = fmul float %20, %28
  %30 = fmul float %20, %25
  %31 = fsub float %30, %25
  %32 = fmul float %29, 2.000000e+00
  %33 = fsub float %25, %32
  %34 = bitcast [2 x float]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %34) #16
  %35 = getelementptr inbounds [2 x float], [2 x float]* %3, i64 0, i64 0
  store float 0xFFFFFFFFE0000000, float* %35, align 4
  %36 = getelementptr inbounds [2 x float], [2 x float]* %3, i64 0, i64 1
  store float 0xFFFFFFFFE0000000, float* %36, align 4
  %37 = call i32 @_Z19SkFindUnitQuadRootsfffPf(float %31, float %33, float %29, float* nonnull %35) #16
  %38 = icmp eq i32 %37, 1
  br i1 %38, label %40, label %39

39:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %34) #16
  br label %80

40:                                               ; preds = %2
  %41 = load float, float* %35, align 4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %34) #16
  %42 = icmp eq %struct.SkPoint* %8, null
  br i1 %42, label %80, label %43

43:                                               ; preds = %40
  %44 = load i64, i64* %9, align 1
  %45 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %44, i32 0
  %46 = bitcast <2 x i64> %45 to <4 x float>
  %47 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 0, i64 1
  %48 = bitcast %struct.SkPoint* %47 to i64*
  %49 = load i64, i64* %48, align 1
  %50 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %49, i32 0
  %51 = bitcast <2 x i64> %50 to <4 x float>
  %52 = load i64, i64* %15, align 1
  %53 = insertelement <2 x i64> undef, i64 %52, i32 0
  %54 = bitcast <2 x i64> %53 to <4 x float>
  %55 = load float, float* %19, align 4
  %56 = insertelement <4 x float> undef, float %55, i32 0
  %57 = shufflevector <4 x float> %56, <4 x float> undef, <4 x i32> zeroinitializer
  %58 = fmul <4 x float> %57, %51
  %59 = fadd <4 x float> %58, %58
  %60 = fsub <4 x float> %54, %59
  %61 = fadd <4 x float> %60, %46
  %62 = fsub <4 x float> %58, %46
  %63 = fadd <4 x float> %62, %62
  %64 = fadd <4 x float> %57, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %65 = fadd <4 x float> %64, %64
  %66 = fsub <4 x float> <float 0.000000e+00, float 0.000000e+00, float undef, float undef>, %65
  %67 = insertelement <4 x float> undef, float %41, i32 0
  %68 = shufflevector <4 x float> %67, <4 x float> undef, <4 x i32> zeroinitializer
  %69 = fmul <4 x float> %68, %61
  %70 = fadd <4 x float> %63, %69
  %71 = fmul <4 x float> %68, %70
  %72 = fadd <4 x float> %71, %46
  %73 = fmul <4 x float> %68, %66
  %74 = fadd <4 x float> %65, %73
  %75 = fmul <4 x float> %68, %74
  %76 = fadd <4 x float> %75, <float 1.000000e+00, float 1.000000e+00, float undef, float undef>
  %77 = fdiv <4 x float> %72, %76
  %78 = shufflevector <4 x float> %77, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %79 = bitcast %struct.SkPoint* %8 to <2 x float>*
  store <2 x float> %78, <2 x float>* %79, align 16
  br label %80

80:                                               ; preds = %43, %40, %39
  %81 = phi i32 [ 2, %39 ], [ 3, %40 ], [ 3, %43 ]
  %82 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 0, i64 0, i32 1
  %83 = load float, float* %19, align 4
  %84 = getelementptr inbounds float, float* %82, i64 4
  %85 = load float, float* %84, align 4
  %86 = load float, float* %82, align 4
  %87 = fsub float %85, %86
  %88 = getelementptr inbounds float, float* %82, i64 2
  %89 = load float, float* %88, align 4
  %90 = fsub float %89, %86
  %91 = fmul float %83, %90
  %92 = fmul float %83, %87
  %93 = fsub float %92, %87
  %94 = fmul float %91, 2.000000e+00
  %95 = fsub float %87, %94
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %34) #16
  store float 0xFFFFFFFFE0000000, float* %35, align 4
  store float 0xFFFFFFFFE0000000, float* %36, align 4
  %96 = call i32 @_Z19SkFindUnitQuadRootsfffPf(float %93, float %95, float %91, float* nonnull %35) #16
  %97 = icmp eq i32 %96, 1
  br i1 %97, label %99, label %98

98:                                               ; preds = %80
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %34) #16
  br label %142

99:                                               ; preds = %80
  %100 = load float, float* %35, align 4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %34) #16
  %101 = add nuw nsw i32 %81, 1
  %102 = zext i32 %81 to i64
  %103 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %4, i64 0, i64 %102
  %104 = icmp eq %struct.SkPoint* %103, null
  br i1 %104, label %142, label %105

105:                                              ; preds = %99
  %106 = load i64, i64* %9, align 1
  %107 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %106, i32 0
  %108 = bitcast <2 x i64> %107 to <4 x float>
  %109 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 0, i64 1
  %110 = bitcast %struct.SkPoint* %109 to i64*
  %111 = load i64, i64* %110, align 1
  %112 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %111, i32 0
  %113 = bitcast <2 x i64> %112 to <4 x float>
  %114 = load i64, i64* %15, align 1
  %115 = insertelement <2 x i64> undef, i64 %114, i32 0
  %116 = bitcast <2 x i64> %115 to <4 x float>
  %117 = load float, float* %19, align 4
  %118 = insertelement <4 x float> undef, float %117, i32 0
  %119 = shufflevector <4 x float> %118, <4 x float> undef, <4 x i32> zeroinitializer
  %120 = fmul <4 x float> %119, %113
  %121 = fadd <4 x float> %120, %120
  %122 = fsub <4 x float> %116, %121
  %123 = fadd <4 x float> %122, %108
  %124 = fsub <4 x float> %120, %108
  %125 = fadd <4 x float> %124, %124
  %126 = fadd <4 x float> %119, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %127 = fadd <4 x float> %126, %126
  %128 = fsub <4 x float> <float 0.000000e+00, float 0.000000e+00, float undef, float undef>, %127
  %129 = insertelement <4 x float> undef, float %100, i32 0
  %130 = shufflevector <4 x float> %129, <4 x float> undef, <4 x i32> zeroinitializer
  %131 = fmul <4 x float> %130, %123
  %132 = fadd <4 x float> %125, %131
  %133 = fmul <4 x float> %130, %132
  %134 = fadd <4 x float> %133, %108
  %135 = fmul <4 x float> %130, %128
  %136 = fadd <4 x float> %127, %135
  %137 = fmul <4 x float> %130, %136
  %138 = fadd <4 x float> %137, <float 1.000000e+00, float 1.000000e+00, float undef, float undef>
  %139 = fdiv <4 x float> %134, %138
  %140 = shufflevector <4 x float> %139, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %141 = bitcast %struct.SkPoint* %103 to <2 x float>*
  store <2 x float> %140, <2 x float>* %141, align 8
  br label %142

142:                                              ; preds = %105, %99, %98
  %143 = phi i32 [ %81, %98 ], [ %101, %99 ], [ %101, %105 ]
  %144 = call zeroext i1 @_ZN6SkRect14setBoundsCheckEPK7SkPointi(%struct.SkRect* %1, %struct.SkPoint* nonnull %6, i32 %143) #16
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %5) #16
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK7SkConic17computeFastBoundsEP6SkRect(%struct.SkConic*, %struct.SkRect*) local_unnamed_addr #13 align 2 {
  %3 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 0, i64 0
  %4 = tail call zeroext i1 @_ZN6SkRect14setBoundsCheckEPK7SkPointi(%struct.SkRect* %1, %struct.SkPoint* %3, i32 3) #16
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden float @_ZN7SkConic10TransformWEPK7SkPointfRK8SkMatrix(%struct.SkPoint* nocapture readonly, float, %class.SkMatrix* dereferenceable(40)) local_unnamed_addr #13 align 2 {
  %4 = alloca [3 x %struct.SkPoint3], align 16
  %5 = alloca [3 x %struct.SkPoint3], align 16
  %6 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %2, i64 0, i32 1
  %7 = load i32, i32* %6, align 4
  %8 = and i32 %7, 192
  %9 = icmp eq i32 %8, 128
  br i1 %9, label %10, label %13

10:                                               ; preds = %3
  %11 = tail call zeroext i8 @_ZNK8SkMatrix26computePerspectiveTypeMaskEv(%class.SkMatrix* %2) #16
  %12 = zext i8 %11 to i32
  store i32 %12, i32* %6, align 4
  br label %13

13:                                               ; preds = %3, %10
  %14 = phi i32 [ %12, %10 ], [ %7, %3 ]
  %15 = and i32 %14, 8
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %65, label %17

17:                                               ; preds = %13
  %18 = bitcast [3 x %struct.SkPoint3]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 36, i8* nonnull %18) #16
  %19 = bitcast [3 x %struct.SkPoint3]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 36, i8* nonnull %19) #16
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %19, i8 -1, i64 36, i1 false)
  %20 = getelementptr inbounds [3 x %struct.SkPoint3], [3 x %struct.SkPoint3]* %4, i64 0, i64 0
  %21 = bitcast %struct.SkPoint* %0 to i32*
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 0, i32 1
  %24 = bitcast float* %23 to i32*
  %25 = load i32, i32* %24, align 4
  %26 = bitcast [3 x %struct.SkPoint3]* %4 to i32*
  store i32 %22, i32* %26, align 16
  %27 = getelementptr inbounds [3 x %struct.SkPoint3], [3 x %struct.SkPoint3]* %4, i64 0, i64 0, i32 1
  %28 = bitcast float* %27 to i32*
  store i32 %25, i32* %28, align 4
  %29 = getelementptr inbounds [3 x %struct.SkPoint3], [3 x %struct.SkPoint3]* %4, i64 0, i64 0, i32 2
  store float 1.000000e+00, float* %29, align 8
  %30 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 0
  %31 = load float, float* %30, align 4
  %32 = fmul float %31, %1
  %33 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 1
  %34 = load float, float* %33, align 4
  %35 = fmul float %34, %1
  %36 = getelementptr inbounds [3 x %struct.SkPoint3], [3 x %struct.SkPoint3]* %4, i64 0, i64 1, i32 0
  store float %32, float* %36, align 4
  %37 = getelementptr inbounds [3 x %struct.SkPoint3], [3 x %struct.SkPoint3]* %4, i64 0, i64 1, i32 1
  store float %35, float* %37, align 4
  %38 = getelementptr inbounds [3 x %struct.SkPoint3], [3 x %struct.SkPoint3]* %4, i64 0, i64 1, i32 2
  store float %1, float* %38, align 4
  %39 = getelementptr inbounds [3 x %struct.SkPoint3], [3 x %struct.SkPoint3]* %4, i64 0, i64 2
  %40 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2, i32 0
  %41 = bitcast float* %40 to i32*
  %42 = load i32, i32* %41, align 4
  %43 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2, i32 1
  %44 = bitcast float* %43 to i32*
  %45 = load i32, i32* %44, align 4
  %46 = bitcast %struct.SkPoint3* %39 to i32*
  store i32 %42, i32* %46, align 8
  %47 = getelementptr inbounds [3 x %struct.SkPoint3], [3 x %struct.SkPoint3]* %4, i64 0, i64 2, i32 1
  %48 = bitcast float* %47 to i32*
  store i32 %45, i32* %48, align 4
  %49 = getelementptr inbounds [3 x %struct.SkPoint3], [3 x %struct.SkPoint3]* %4, i64 0, i64 2, i32 2
  store float 1.000000e+00, float* %49, align 8
  %50 = getelementptr inbounds [3 x %struct.SkPoint3], [3 x %struct.SkPoint3]* %5, i64 0, i64 0
  call void @_ZNK8SkMatrix20mapHomogeneousPointsEP8SkPoint3PKS0_i(%class.SkMatrix* %2, %struct.SkPoint3* nonnull %50, %struct.SkPoint3* nonnull %20, i32 3) #16
  %51 = getelementptr inbounds [3 x %struct.SkPoint3], [3 x %struct.SkPoint3]* %5, i64 0, i64 0, i32 2
  %52 = load float, float* %51, align 8
  %53 = fpext float %52 to double
  %54 = getelementptr inbounds [3 x %struct.SkPoint3], [3 x %struct.SkPoint3]* %5, i64 0, i64 1, i32 2
  %55 = load float, float* %54, align 4
  %56 = fpext float %55 to double
  %57 = getelementptr inbounds [3 x %struct.SkPoint3], [3 x %struct.SkPoint3]* %5, i64 0, i64 2, i32 2
  %58 = load float, float* %57, align 8
  %59 = fpext float %58 to double
  %60 = fmul double %56, %56
  %61 = fmul double %53, %59
  %62 = fdiv double %60, %61
  %63 = call double @sqrt(double %62) #16
  %64 = fptrunc double %63 to float
  call void @llvm.lifetime.end.p0i8(i64 36, i8* nonnull %19) #16
  call void @llvm.lifetime.end.p0i8(i64 36, i8* nonnull %18) #16
  br label %65

65:                                               ; preds = %13, %17
  %66 = phi float [ %64, %17 ], [ %1, %13 ]
  ret float %66
}

declare void @_ZNK8SkMatrix20mapHomogeneousPointsEP8SkPoint3PKS0_i(%class.SkMatrix*, %struct.SkPoint3*, %struct.SkPoint3*, i32) local_unnamed_addr #14

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN7SkConic12BuildUnitArcERK7SkPointS2_19SkRotationDirectionPK8SkMatrixPS_(%struct.SkPoint* nocapture readonly dereferenceable(8), %struct.SkPoint* nocapture readonly dereferenceable(8), i32, %class.SkMatrix*, %struct.SkConic*) local_unnamed_addr #13 align 2 {
  %6 = alloca i64, align 8
  %7 = bitcast i64* %6 to %struct.SkPoint*
  %8 = alloca %class.SkMatrix, align 16
  %9 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 0, i32 0
  %10 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 0, i32 1
  %11 = bitcast %struct.SkPoint* %0 to <2 x float>*
  %12 = load <2 x float>, <2 x float>* %11, align 4
  %13 = bitcast %struct.SkPoint* %1 to <2 x float>*
  %14 = load <2 x float>, <2 x float>* %13, align 4
  %15 = fmul <2 x float> %12, %14
  %16 = extractelement <2 x float> %15, i32 0
  %17 = extractelement <2 x float> %15, i32 1
  %18 = fadd float %16, %17
  %19 = extractelement <2 x float> %12, i32 0
  %20 = extractelement <2 x float> %14, i32 1
  %21 = fmul float %19, %20
  %22 = extractelement <2 x float> %12, i32 1
  %23 = extractelement <2 x float> %14, i32 0
  %24 = fmul float %23, %22
  %25 = fsub float %21, %24
  %26 = tail call float @llvm.fabs.f32(float %25)
  %27 = fcmp ole float %26, 0x3F30000000000000
  %28 = fcmp ogt float %18, 0.000000e+00
  %29 = and i1 %28, %27
  br i1 %29, label %30, label %38

30:                                               ; preds = %5
  %31 = fcmp oge float %25, 0.000000e+00
  %32 = icmp eq i32 %2, 0
  %33 = and i1 %32, %31
  br i1 %33, label %173, label %34

34:                                               ; preds = %30
  %35 = fcmp ole float %25, 0.000000e+00
  %36 = icmp eq i32 %2, 1
  %37 = and i1 %36, %35
  br i1 %37, label %173, label %38

38:                                               ; preds = %34, %5
  %39 = icmp eq i32 %2, 1
  %40 = fsub float -0.000000e+00, %25
  %41 = select i1 %39, float %40, float %25
  %42 = fcmp oeq float %41, 0.000000e+00
  br i1 %42, label %56, label %43

43:                                               ; preds = %38
  %44 = fcmp oeq float %18, 0.000000e+00
  br i1 %44, label %45, label %48

45:                                               ; preds = %43
  %46 = fcmp ogt float %41, 0.000000e+00
  %47 = select i1 %46, i32 1, i32 3
  br label %56

48:                                               ; preds = %43
  %49 = fcmp olt float %41, 0.000000e+00
  %50 = select i1 %49, i32 2, i32 0
  %51 = fcmp olt float %18, 0.000000e+00
  %52 = xor i1 %51, %49
  %53 = zext i1 %52 to i32
  %54 = or i32 %50, %53
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %73, label %56

56:                                               ; preds = %48, %38, %45
  %57 = phi i32 [ %54, %48 ], [ 2, %38 ], [ %47, %45 ]
  %58 = zext i32 %57 to i64
  %59 = and i64 %58, 1
  %60 = icmp eq i32 %57, 1
  br i1 %60, label %63, label %61

61:                                               ; preds = %56
  %62 = sub nsw i64 %58, %59
  br label %86

63:                                               ; preds = %86, %56
  %64 = phi i64 [ 0, %56 ], [ %102, %86 ]
  %65 = icmp eq i64 %59, 0
  br i1 %65, label %73, label %66

66:                                               ; preds = %63
  %67 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %4, i64 %64
  %68 = shl nuw nsw i64 %64, 1
  %69 = getelementptr inbounds [8 x %struct.SkPoint], [8 x %struct.SkPoint]* @_ZZN7SkConic12BuildUnitArcERK7SkPointS2_19SkRotationDirectionPK8SkMatrixPS_E11quadrantPts, i64 0, i64 %68
  %70 = bitcast %struct.SkConic* %67 to i8*
  %71 = bitcast %struct.SkPoint* %69 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %70, i8* align 16 %71, i64 24, i1 false) #16
  %72 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %4, i64 %64, i32 1
  store float 0x3FE6A09E60000000, float* %72, align 4
  br label %73

73:                                               ; preds = %66, %63, %48
  %74 = phi i32 [ %54, %48 ], [ %57, %63 ], [ %57, %66 ]
  %75 = shl nsw i32 %74, 1
  %76 = sext i32 %75 to i64
  %77 = getelementptr inbounds [8 x %struct.SkPoint], [8 x %struct.SkPoint]* @_ZZN7SkConic12BuildUnitArcERK7SkPointS2_19SkRotationDirectionPK8SkMatrixPS_E11quadrantPts, i64 0, i64 %76
  %78 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %77, i64 0, i32 0
  %79 = load float, float* %78, align 16
  %80 = fmul float %18, %79
  %81 = getelementptr inbounds [8 x %struct.SkPoint], [8 x %struct.SkPoint]* @_ZZN7SkConic12BuildUnitArcERK7SkPointS2_19SkRotationDirectionPK8SkMatrixPS_E11quadrantPts, i64 0, i64 %76, i32 1
  %82 = load float, float* %81, align 4
  %83 = fmul float %41, %82
  %84 = fadd float %80, %83
  %85 = fcmp olt float %84, 1.000000e+00
  br i1 %85, label %105, label %146

86:                                               ; preds = %86, %61
  %87 = phi i64 [ 0, %61 ], [ %102, %86 ]
  %88 = phi i64 [ %62, %61 ], [ %103, %86 ]
  %89 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %4, i64 %87
  %90 = shl nuw nsw i64 %87, 1
  %91 = getelementptr inbounds [8 x %struct.SkPoint], [8 x %struct.SkPoint]* @_ZZN7SkConic12BuildUnitArcERK7SkPointS2_19SkRotationDirectionPK8SkMatrixPS_E11quadrantPts, i64 0, i64 %90
  %92 = bitcast %struct.SkConic* %89 to i8*
  %93 = bitcast %struct.SkPoint* %91 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %92, i8* align 16 %93, i64 24, i1 false) #16
  %94 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %4, i64 %87, i32 1
  store float 0x3FE6A09E60000000, float* %94, align 4
  %95 = or i64 %87, 1
  %96 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %4, i64 %95
  %97 = shl nuw nsw i64 %95, 1
  %98 = getelementptr inbounds [8 x %struct.SkPoint], [8 x %struct.SkPoint]* @_ZZN7SkConic12BuildUnitArcERK7SkPointS2_19SkRotationDirectionPK8SkMatrixPS_E11quadrantPts, i64 0, i64 %97
  %99 = bitcast %struct.SkConic* %96 to i8*
  %100 = bitcast %struct.SkPoint* %98 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %99, i8* align 16 %100, i64 24, i1 false) #16
  %101 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %4, i64 %95, i32 1
  store float 0x3FE6A09E60000000, float* %101, align 4
  %102 = add nuw nsw i64 %87, 2
  %103 = add i64 %88, -2
  %104 = icmp eq i64 %103, 0
  br i1 %104, label %63, label %86

105:                                              ; preds = %73
  %106 = bitcast i64* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %106) #16
  %107 = bitcast i64* %6 to float*
  %108 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %7, i64 0, i32 1
  %109 = fadd float %18, %79
  store float %109, float* %107, align 8
  %110 = fadd float %41, %82
  store float %110, float* %108, align 4
  %111 = fadd float %84, 1.000000e+00
  %112 = fmul float %111, 5.000000e-01
  %113 = tail call float @sqrtf(float %112) #16
  %114 = fdiv float 1.000000e+00, %113
  %115 = call zeroext i1 @_ZN7SkPoint9setLengthEf(%struct.SkPoint* nonnull %7, float %114) #16
  %116 = load float, float* %107, align 8
  %117 = fsub float %79, %116
  %118 = load float, float* %108, align 4
  %119 = fsub float %82, %118
  %120 = bitcast float %117 to i32
  %121 = and i32 %120, 2139095040
  %122 = icmp eq i32 %121, 2139095040
  br i1 %122, label %144, label %123

123:                                              ; preds = %105
  %124 = bitcast float %119 to i32
  %125 = and i32 %124, 2139095040
  %126 = icmp eq i32 %125, 2139095040
  br i1 %126, label %144, label %127

127:                                              ; preds = %123
  %128 = fcmp oeq float %117, 0.000000e+00
  %129 = fcmp oeq float %119, 0.000000e+00
  %130 = and i1 %128, %129
  br i1 %130, label %144, label %131

131:                                              ; preds = %127
  %132 = sext i32 %74 to i64
  %133 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %4, i64 %132
  %134 = bitcast %struct.SkPoint* %77 to i64*
  %135 = bitcast %struct.SkConic* %133 to i64*
  %136 = load i64, i64* %134, align 16
  store i64 %136, i64* %135, align 4
  %137 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %4, i64 %132, i32 0, i64 1
  %138 = bitcast %struct.SkPoint* %137 to i64*
  %139 = load i64, i64* %6, align 8
  store i64 %139, i64* %138, align 4
  %140 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %4, i64 %132, i32 0, i64 2, i32 0
  store float %18, float* %140, align 4
  %141 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %4, i64 %132, i32 0, i64 2, i32 1
  store float %41, float* %141, align 4
  %142 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %4, i64 %132, i32 1
  store float %113, float* %142, align 4
  %143 = add nsw i32 %74, 1
  br label %144

144:                                              ; preds = %105, %123, %131, %127
  %145 = phi i32 [ %74, %127 ], [ %143, %131 ], [ %74, %123 ], [ %74, %105 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %106) #16
  br label %146

146:                                              ; preds = %144, %73
  %147 = phi i32 [ %145, %144 ], [ %74, %73 ]
  %148 = bitcast %class.SkMatrix* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %148) #16
  %149 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %8, i64 0, i32 1
  %150 = bitcast %class.SkMatrix* %8 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %150, align 16
  %151 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %8, i64 0, i32 0, i64 4
  %152 = bitcast float* %151 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %152, align 16
  %153 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %8, i64 0, i32 0, i64 8
  store float 1.000000e+00, float* %153, align 16
  store i32 16, i32* %149, align 4
  %154 = load float, float* %10, align 4
  %155 = load float, float* %9, align 4
  %156 = call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix9setSinCosEff(%class.SkMatrix* nonnull %8, float %154, float %155) #16
  br i1 %39, label %157, label %159

157:                                              ; preds = %146
  %158 = call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix8preScaleEff(%class.SkMatrix* nonnull %8, float 1.000000e+00, float -1.000000e+00) #16
  br label %159

159:                                              ; preds = %157, %146
  %160 = icmp eq %class.SkMatrix* %3, null
  br i1 %160, label %163, label %161

161:                                              ; preds = %159
  %162 = call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix10postConcatERKS_(%class.SkMatrix* nonnull %8, %class.SkMatrix* nonnull dereferenceable(40) %3) #16
  br label %163

163:                                              ; preds = %159, %161
  %164 = icmp sgt i32 %147, 0
  br i1 %164, label %165, label %167

165:                                              ; preds = %163
  %166 = zext i32 %147 to i64
  br label %168

167:                                              ; preds = %168, %163
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %148) #16
  br label %173

168:                                              ; preds = %168, %165
  %169 = phi i64 [ 0, %165 ], [ %171, %168 ]
  %170 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %4, i64 %169, i32 0, i64 0
  call void @_ZNK8SkMatrix9mapPointsEP7SkPointPKS0_i(%class.SkMatrix* nonnull %8, %struct.SkPoint* %170, %struct.SkPoint* %170, i32 3) #16
  %171 = add nuw nsw i64 %169, 1
  %172 = icmp eq i64 %171, %166
  br i1 %172, label %167, label %168

173:                                              ; preds = %30, %34, %167
  %174 = phi i32 [ %147, %167 ], [ 0, %34 ], [ 0, %30 ]
  ret i32 %174
}

declare zeroext i1 @_ZN7SkPoint9setLengthEf(%struct.SkPoint*, float) local_unnamed_addr #14

declare dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix9setSinCosEff(%class.SkMatrix*, float, float) local_unnamed_addr #14

declare dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix8preScaleEff(%class.SkMatrix*, float, float) local_unnamed_addr #14

declare dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix10postConcatERKS_(%class.SkMatrix*, %class.SkMatrix* dereferenceable(40)) local_unnamed_addr #14

; Function Attrs: nounwind readnone speculatable
declare <4 x float> @llvm.sqrt.v4f32(<4 x float>) #9

; Function Attrs: nounwind readnone speculatable
declare float @llvm.copysign.f32(float, float) #9

; Function Attrs: nofree nounwind
declare float @cosf(float) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare float @powf(float, float) local_unnamed_addr #2

declare void @_ZNK8SkDCubic6chopAtEd(%struct.SkDCubicPair* sret, %struct.SkDCubic*, double) local_unnamed_addr #14

declare zeroext i1 @_ZN6SkRect14setBoundsCheckEPK7SkPointi(%struct.SkRect*, %struct.SkPoint*, i32) local_unnamed_addr #14

declare zeroext i8 @_ZNK8SkMatrix26computePerspectiveTypeMaskEv(%class.SkMatrix*) local_unnamed_addr #14

declare void @_ZNK8SkMatrix9mapPointsEP7SkPointPKS0_i(%class.SkMatrix*, %struct.SkPoint*, %struct.SkPoint*, i32) local_unnamed_addr #14

; Function Attrs: nounwind readnone speculatable
declare <2 x float> @llvm.fabs.v2f32(<2 x float>) #9

attributes #0 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind readnone speculatable }
attributes #10 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nofree nounwind }
attributes #13 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #15 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #16 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 1048575}
!3 = !{!4}
!4 = distinct !{!4, !5, !"_ZNK7SkConic4chopEPS_: argument 0"}
!5 = distinct !{!5, !"_ZNK7SkConic4chopEPS_"}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.unroll.disable"}
!8 = !{!9}
!9 = distinct !{!9, !10}
!10 = distinct !{!10, !"LVerDomain"}
!11 = !{!12}
!12 = distinct !{!12, !10}
!13 = distinct !{!13, !14}
!14 = !{!"llvm.loop.isvectorized", i32 1}
!15 = distinct !{!15, !14}
!16 = !{!17}
!17 = distinct !{!17, !18, !"_ZNK7SkConic4chopEPS_: argument 0"}
!18 = distinct !{!18, !"_ZNK7SkConic4chopEPS_"}
