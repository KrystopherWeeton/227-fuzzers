; ModuleID = '../../cc/base/invalidation_region.cc'
source_filename = "../../cc/base/invalidation_region.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.cc::InvalidationRegion" = type { %"class.cc::Region", %"class.std::__1::vector" }
%"class.cc::Region" = type { %class.SkRegion }
%class.SkRegion = type { %struct.SkIRect, %"struct.SkRegion::RunHead"* }
%struct.SkIRect = type { i32, i32, i32, i32 }
%"struct.SkRegion::RunHead" = type opaque
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.gfx::Rect"*, %"class.gfx::Rect"*, %"class.std::__1::__compressed_pair" }
%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }
%"class.gfx::Point" = type { i32, i32 }
%"class.gfx::Size" = type { i32, i32 }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.gfx::Rect"* }
%"class.std::__1::__vector_base_common" = type { i8 }

@_ZN2cc18InvalidationRegionC1Ev = hidden unnamed_addr alias void (%"class.cc::InvalidationRegion"*), void (%"class.cc::InvalidationRegion"*)* @_ZN2cc18InvalidationRegionC2Ev
@_ZN2cc18InvalidationRegionD1Ev = hidden unnamed_addr alias void (%"class.cc::InvalidationRegion"*), void (%"class.cc::InvalidationRegion"*)* @_ZN2cc18InvalidationRegionD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc18InvalidationRegionC2Ev(%"class.cc::InvalidationRegion"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.cc::InvalidationRegion", %"class.cc::InvalidationRegion"* %0, i64 0, i32 0
  tail call void @_ZN2cc6RegionC1Ev(%"class.cc::Region"* %2) #8
  %3 = getelementptr inbounds %"class.cc::InvalidationRegion", %"class.cc::InvalidationRegion"* %0, i64 0, i32 1
  %4 = bitcast %"class.std::__1::vector"* %3 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 0, i64 24, i1 false) #8
  ret void
}

declare void @_ZN2cc6RegionC1Ev(%"class.cc::Region"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc18InvalidationRegionD2Ev(%"class.cc::InvalidationRegion"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.cc::InvalidationRegion", %"class.cc::InvalidationRegion"* %0, i64 0, i32 1, i32 0, i32 0
  %3 = load %"class.gfx::Rect"*, %"class.gfx::Rect"** %2, align 8
  %4 = icmp eq %"class.gfx::Rect"* %3, null
  br i1 %4, label %10, label %5

5:                                                ; preds = %1
  %6 = ptrtoint %"class.gfx::Rect"* %3 to i64
  %7 = getelementptr inbounds %"class.cc::InvalidationRegion", %"class.cc::InvalidationRegion"* %0, i64 0, i32 1, i32 0, i32 1
  %8 = bitcast %"class.gfx::Rect"** %7 to i64*
  store i64 %6, i64* %8, align 8
  %9 = bitcast %"class.gfx::Rect"* %3 to i8*
  tail call void @_ZdlPv(i8* %9) #9
  br label %10

10:                                               ; preds = %1, %5
  %11 = getelementptr inbounds %"class.cc::InvalidationRegion", %"class.cc::InvalidationRegion"* %0, i64 0, i32 0
  tail call void @_ZN2cc6RegionD1Ev(%"class.cc::Region"* %11) #8
  ret void
}

; Function Attrs: nounwind
declare void @_ZN2cc6RegionD1Ev(%"class.cc::Region"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc18InvalidationRegion4SwapEPNS_6RegionE(%"class.cc::InvalidationRegion"*, %"class.cc::Region"*) local_unnamed_addr #0 align 2 {
  tail call void @_ZN2cc18InvalidationRegion20FinalizePendingRectsEv(%"class.cc::InvalidationRegion"* %0)
  %3 = getelementptr inbounds %"class.cc::InvalidationRegion", %"class.cc::InvalidationRegion"* %0, i64 0, i32 0
  tail call void @_ZN2cc6Region4SwapEPS0_(%"class.cc::Region"* %3, %"class.cc::Region"* %1) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc18InvalidationRegion20FinalizePendingRectsEv(%"class.cc::InvalidationRegion"*) local_unnamed_addr #0 align 2 {
  %2 = alloca { i64, i64 }, align 8
  %3 = bitcast { i64, i64 }* %2 to %"class.gfx::Rect"*
  %4 = getelementptr inbounds %"class.cc::InvalidationRegion", %"class.cc::InvalidationRegion"* %0, i64 0, i32 1
  %5 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 0
  %6 = load %"class.gfx::Rect"*, %"class.gfx::Rect"** %5, align 8
  %7 = getelementptr inbounds %"class.cc::InvalidationRegion", %"class.cc::InvalidationRegion"* %0, i64 0, i32 1, i32 0, i32 1
  %8 = load %"class.gfx::Rect"*, %"class.gfx::Rect"** %7, align 8
  %9 = icmp eq %"class.gfx::Rect"* %6, %8
  br i1 %9, label %49, label %10

10:                                               ; preds = %1
  %11 = getelementptr inbounds %"class.cc::InvalidationRegion", %"class.cc::InvalidationRegion"* %0, i64 0, i32 0
  %12 = tail call i32 @_ZNK2cc6Region19GetRegionComplexityEv(%"class.cc::Region"* %11) #8
  %13 = sext i32 %12 to i64
  %14 = bitcast %"class.gfx::Rect"** %7 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = bitcast %"class.std::__1::vector"* %4 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %15, %17
  %19 = ashr exact i64 %18, 4
  %20 = add nsw i64 %19, %13
  %21 = icmp ugt i64 %20, 256
  %22 = inttoptr i64 %17 to %"class.gfx::Rect"*
  %23 = inttoptr i64 %15 to %"class.gfx::Rect"*
  br i1 %21, label %24, label %41

24:                                               ; preds = %10
  %25 = bitcast { i64, i64 }* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %25) #8
  %26 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %2, i64 0, i32 1
  %27 = getelementptr inbounds %"class.cc::InvalidationRegion", %"class.cc::InvalidationRegion"* %0, i64 0, i32 0, i32 0, i32 0
  %28 = tail call { i64, i64 } @_ZN3gfx13SkIRectToRectERK7SkIRect(%struct.SkIRect* dereferenceable(16) %27) #8
  %29 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %2, i64 0, i32 0
  %30 = extractvalue { i64, i64 } %28, 0
  store i64 %30, i64* %29, align 8
  %31 = extractvalue { i64, i64 } %28, 1
  store i64 %31, i64* %26, align 8
  %32 = load %"class.gfx::Rect"*, %"class.gfx::Rect"** %5, align 8
  %33 = load %"class.gfx::Rect"*, %"class.gfx::Rect"** %7, align 8
  %34 = icmp eq %"class.gfx::Rect"* %32, %33
  br i1 %34, label %35, label %37

35:                                               ; preds = %37, %24
  %36 = call dereferenceable(24) %"class.cc::Region"* @_ZN2cc6RegionaSERKN3gfx4RectE(%"class.cc::Region"* %11, %"class.gfx::Rect"* nonnull dereferenceable(16) %3) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %25) #8
  br label %47

37:                                               ; preds = %24, %37
  %38 = phi %"class.gfx::Rect"* [ %39, %37 ], [ %32, %24 ]
  call void @_ZN3gfx4Rect5UnionERKS0_(%"class.gfx::Rect"* nonnull %3, %"class.gfx::Rect"* dereferenceable(16) %38) #8
  %39 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %38, i64 1
  %40 = icmp eq %"class.gfx::Rect"* %39, %33
  br i1 %40, label %35, label %37

41:                                               ; preds = %10
  %42 = icmp eq %"class.gfx::Rect"* %22, %23
  br i1 %42, label %47, label %43

43:                                               ; preds = %41, %43
  %44 = phi %"class.gfx::Rect"* [ %45, %43 ], [ %22, %41 ]
  tail call void @_ZN2cc6Region5UnionERKN3gfx4RectE(%"class.cc::Region"* %11, %"class.gfx::Rect"* dereferenceable(16) %44) #8
  %45 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %44, i64 1
  %46 = icmp eq %"class.gfx::Rect"* %45, %23
  br i1 %46, label %47, label %43

47:                                               ; preds = %43, %41, %35
  %48 = load i64, i64* %16, align 8
  store i64 %48, i64* %14, align 8
  br label %49

49:                                               ; preds = %1, %47
  ret void
}

declare void @_ZN2cc6Region4SwapEPS0_(%"class.cc::Region"*, %"class.cc::Region"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc18InvalidationRegion5ClearEv(%"class.cc::InvalidationRegion"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.cc::InvalidationRegion", %"class.cc::InvalidationRegion"* %0, i64 0, i32 1
  %3 = bitcast %"class.std::__1::vector"* %2 to i64*
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %"class.cc::InvalidationRegion", %"class.cc::InvalidationRegion"* %0, i64 0, i32 1, i32 0, i32 1
  %6 = bitcast %"class.gfx::Rect"** %5 to i64*
  store i64 %4, i64* %6, align 8
  %7 = getelementptr inbounds %"class.cc::InvalidationRegion", %"class.cc::InvalidationRegion"* %0, i64 0, i32 0
  tail call void @_ZN2cc6Region5ClearEv(%"class.cc::Region"* %7) #8
  ret void
}

declare void @_ZN2cc6Region5ClearEv(%"class.cc::Region"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc18InvalidationRegion5UnionERKN3gfx4RectE(%"class.cc::InvalidationRegion"*, %"class.gfx::Rect"* dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.cc::InvalidationRegion", %"class.cc::InvalidationRegion"* %0, i64 0, i32 1
  %4 = getelementptr inbounds %"class.cc::InvalidationRegion", %"class.cc::InvalidationRegion"* %0, i64 0, i32 1, i32 0, i32 1
  %5 = bitcast %"class.gfx::Rect"** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast %"class.std::__1::vector"* %3 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %6, %8
  %10 = ashr exact i64 %9, 4
  %11 = icmp ugt i64 %10, 255
  %12 = inttoptr i64 %6 to %"class.gfx::Rect"*
  br i1 %11, label %13, label %15

13:                                               ; preds = %2
  %14 = inttoptr i64 %8 to %"class.gfx::Rect"*
  tail call void @_ZN3gfx4Rect5UnionERKS0_(%"class.gfx::Rect"* %14, %"class.gfx::Rect"* dereferenceable(16) %1) #8
  br label %77

15:                                               ; preds = %2
  %16 = getelementptr inbounds %"class.cc::InvalidationRegion", %"class.cc::InvalidationRegion"* %0, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %17 = load %"class.gfx::Rect"*, %"class.gfx::Rect"** %16, align 8
  %18 = icmp eq %"class.gfx::Rect"* %17, %12
  br i1 %18, label %24, label %19

19:                                               ; preds = %15
  %20 = inttoptr i64 %6 to i8*
  %21 = bitcast %"class.gfx::Rect"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %20, i8* align 4 %21, i64 16, i1 false) #8
  %22 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %12, i64 1
  %23 = ptrtoint %"class.gfx::Rect"* %22 to i64
  store i64 %23, i64* %5, align 8
  br label %77

24:                                               ; preds = %15
  %25 = ptrtoint %"class.gfx::Rect"* %17 to i64
  %26 = sub i64 %25, %8
  %27 = ashr exact i64 %26, 4
  %28 = add nsw i64 %27, 1
  %29 = icmp ugt i64 %28, 1152921504606846975
  br i1 %29, label %30, label %32

30:                                               ; preds = %24
  %31 = bitcast %"class.std::__1::vector"* %3 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %31) #10
  unreachable

32:                                               ; preds = %24
  %33 = bitcast %"class.gfx::Rect"** %16 to i64*
  %34 = icmp ult i64 %27, 576460752303423487
  br i1 %34, label %35, label %43

35:                                               ; preds = %32
  %36 = ashr exact i64 %26, 3
  %37 = icmp ult i64 %36, %28
  %38 = select i1 %37, i64 %28, i64 %36
  %39 = icmp eq i64 %38, 0
  br i1 %39, label %48, label %40

40:                                               ; preds = %35
  %41 = icmp ugt i64 %38, 1152921504606846975
  br i1 %41, label %42, label %43

42:                                               ; preds = %40
  tail call void @abort() #10
  unreachable

43:                                               ; preds = %40, %32
  %44 = phi i64 [ %38, %40 ], [ 1152921504606846975, %32 ]
  %45 = shl i64 %44, 4
  %46 = tail call i8* @_Znwm(i64 %45) #9
  %47 = bitcast i8* %46 to %"class.gfx::Rect"*
  br label %48

48:                                               ; preds = %43, %35
  %49 = phi i64 [ %44, %43 ], [ 0, %35 ]
  %50 = phi %"class.gfx::Rect"* [ %47, %43 ], [ null, %35 ]
  %51 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %50, i64 %27
  %52 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %50, i64 %49
  %53 = ptrtoint %"class.gfx::Rect"* %52 to i64
  %54 = bitcast %"class.gfx::Rect"* %51 to i8*
  %55 = bitcast %"class.gfx::Rect"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %54, i8* align 4 %55, i64 16, i1 false) #8
  %56 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %51, i64 1
  %57 = ptrtoint %"class.gfx::Rect"* %56 to i64
  %58 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 0, i32 0
  %59 = load %"class.gfx::Rect"*, %"class.gfx::Rect"** %58, align 8
  %60 = load i64, i64* %5, align 8
  %61 = ptrtoint %"class.gfx::Rect"* %59 to i64
  %62 = sub i64 %60, %61
  %63 = ashr exact i64 %62, 4
  %64 = sub nsw i64 0, %63
  %65 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %51, i64 %64
  %66 = ptrtoint %"class.gfx::Rect"* %65 to i64
  %67 = icmp sgt i64 %62, 0
  br i1 %67, label %68, label %72

68:                                               ; preds = %48
  %69 = bitcast %"class.gfx::Rect"* %65 to i8*
  %70 = bitcast %"class.gfx::Rect"* %59 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %69, i8* align 4 %70, i64 %62, i1 false) #8
  %71 = load %"class.gfx::Rect"*, %"class.gfx::Rect"** %58, align 8
  br label %72

72:                                               ; preds = %68, %48
  %73 = phi %"class.gfx::Rect"* [ %59, %48 ], [ %71, %68 ]
  store i64 %66, i64* %7, align 8
  store i64 %57, i64* %5, align 8
  store i64 %53, i64* %33, align 8
  %74 = icmp eq %"class.gfx::Rect"* %73, null
  br i1 %74, label %77, label %75

75:                                               ; preds = %72
  %76 = bitcast %"class.gfx::Rect"* %73 to i8*
  tail call void @_ZdlPv(i8* %76) #9
  br label %77

77:                                               ; preds = %75, %72, %19, %13
  ret void
}

declare void @_ZN3gfx4Rect5UnionERKS0_(%"class.gfx::Rect"*, %"class.gfx::Rect"* dereferenceable(16)) local_unnamed_addr #1

declare i32 @_ZNK2cc6Region19GetRegionComplexityEv(%"class.cc::Region"*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

declare dereferenceable(24) %"class.cc::Region"* @_ZN2cc6RegionaSERKN3gfx4RectE(%"class.cc::Region"*, %"class.gfx::Rect"* dereferenceable(16)) local_unnamed_addr #1

declare void @_ZN2cc6Region5UnionERKN3gfx4RectE(%"class.cc::Region"*, %"class.gfx::Rect"* dereferenceable(16)) local_unnamed_addr #1

declare { i64, i64 } @_ZN3gfx13SkIRectToRectERK7SkIRect(%struct.SkIRect* dereferenceable(16)) local_unnamed_addr #1

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #5

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #6

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #7

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { builtin nounwind }
attributes #10 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
