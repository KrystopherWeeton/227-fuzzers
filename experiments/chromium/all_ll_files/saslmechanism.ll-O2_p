; ModuleID = '../../third_party/libjingle_xmpp/xmpp/saslmechanism.cc'
source_filename = "../../third_party/libjingle_xmpp/xmpp/saslmechanism.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"struct.jingle_xmpp::StaticQName" = type { i8*, i8* }
%"class.jingle_xmpp::XmlElement" = type <{ %"class.jingle_xmpp::XmlChild", %"class.jingle_xmpp::QName", %"class.jingle_xmpp::XmlAttr"*, %"class.jingle_xmpp::XmlAttr"*, %"class.jingle_xmpp::XmlChild"*, %"class.jingle_xmpp::XmlChild"*, i8, [7 x i8] }>
%"class.jingle_xmpp::XmlChild" = type { i32 (...)**, %"class.jingle_xmpp::XmlChild"* }
%"class.jingle_xmpp::QName" = type { %"class.std::__1::basic_string", %"class.std::__1::basic_string" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.jingle_xmpp::XmlAttr" = type { %"class.jingle_xmpp::XmlAttr"*, %"class.jingle_xmpp::QName", %"class.std::__1::basic_string" }
%"class.jingle_xmpp::SaslMechanism" = type { i32 (...)** }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }

$_ZN11jingle_xmpp13SaslMechanismD2Ev = comdat any

$_ZN11jingle_xmpp13SaslMechanismD0Ev = comdat any

@_ZN11jingle_xmpp12QN_SASL_AUTHE = external global %"struct.jingle_xmpp::StaticQName", align 8
@_ZN11jingle_xmpp13QN_SASL_ABORTE = external global %"struct.jingle_xmpp::StaticQName", align 8
@_ZTVN11jingle_xmpp13SaslMechanismE = hidden unnamed_addr constant { [9 x i8*] } { [9 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.jingle_xmpp::SaslMechanism"*)* @_ZN11jingle_xmpp13SaslMechanismD2Ev to i8*), i8* bitcast (void (%"class.jingle_xmpp::SaslMechanism"*)* @_ZN11jingle_xmpp13SaslMechanismD0Ev to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (%"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::SaslMechanism"*)* @_ZN11jingle_xmpp13SaslMechanism13StartSaslAuthEv to i8*), i8* bitcast (%"class.jingle_xmpp::XmlElement"* (%"class.jingle_xmpp::SaslMechanism"*, %"class.jingle_xmpp::XmlElement"*)* @_ZN11jingle_xmpp13SaslMechanism19HandleSaslChallengeEPKNS_10XmlElementE to i8*), i8* bitcast (void (%"class.jingle_xmpp::SaslMechanism"*, %"class.jingle_xmpp::XmlElement"*)* @_ZN11jingle_xmpp13SaslMechanism17HandleSaslSuccessEPKNS_10XmlElementE to i8*), i8* bitcast (void (%"class.jingle_xmpp::SaslMechanism"*, %"class.jingle_xmpp::XmlElement"*)* @_ZN11jingle_xmpp13SaslMechanism17HandleSaslFailureEPKNS_10XmlElementE to i8*)] }, align 8

; Function Attrs: nounwind ssp uwtable
define hidden nonnull %"class.jingle_xmpp::XmlElement"* @_ZN11jingle_xmpp13SaslMechanism13StartSaslAuthEv(%"class.jingle_xmpp::SaslMechanism"* nocapture readnone) unnamed_addr #0 align 2 {
  %2 = alloca %"class.jingle_xmpp::QName", align 8
  %3 = tail call i8* @_Znwm(i64 104) #7
  %4 = bitcast i8* %3 to %"class.jingle_xmpp::XmlElement"*
  %5 = bitcast %"class.jingle_xmpp::QName"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %5) #8
  call void @_ZN11jingle_xmpp5QNameC1ERKNS_11StaticQNameE(%"class.jingle_xmpp::QName"* nonnull %2, %"struct.jingle_xmpp::StaticQName"* nonnull dereferenceable(16) @_ZN11jingle_xmpp12QN_SASL_AUTHE) #8
  call void @_ZN11jingle_xmpp10XmlElementC1ERKNS_5QNameEb(%"class.jingle_xmpp::XmlElement"* nonnull %4, %"class.jingle_xmpp::QName"* nonnull dereferenceable(48) %2, i1 zeroext true) #8
  call void @_ZN11jingle_xmpp5QNameD1Ev(%"class.jingle_xmpp::QName"* nonnull %2) #8
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %5) #8
  ret %"class.jingle_xmpp::XmlElement"* %4
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare void @_ZN11jingle_xmpp5QNameC1ERKNS_11StaticQNameE(%"class.jingle_xmpp::QName"*, %"struct.jingle_xmpp::StaticQName"* dereferenceable(16)) unnamed_addr #3

declare void @_ZN11jingle_xmpp10XmlElementC1ERKNS_5QNameEb(%"class.jingle_xmpp::XmlElement"*, %"class.jingle_xmpp::QName"* dereferenceable(48), i1 zeroext) unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN11jingle_xmpp5QNameD1Ev(%"class.jingle_xmpp::QName"*) unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden nonnull %"class.jingle_xmpp::XmlElement"* @_ZN11jingle_xmpp13SaslMechanism19HandleSaslChallengeEPKNS_10XmlElementE(%"class.jingle_xmpp::SaslMechanism"* nocapture readnone, %"class.jingle_xmpp::XmlElement"* nocapture readnone) unnamed_addr #0 align 2 {
  %3 = alloca %"class.jingle_xmpp::QName", align 8
  %4 = tail call i8* @_Znwm(i64 104) #7
  %5 = bitcast i8* %4 to %"class.jingle_xmpp::XmlElement"*
  %6 = bitcast %"class.jingle_xmpp::QName"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %6) #8
  call void @_ZN11jingle_xmpp5QNameC1ERKNS_11StaticQNameE(%"class.jingle_xmpp::QName"* nonnull %3, %"struct.jingle_xmpp::StaticQName"* nonnull dereferenceable(16) @_ZN11jingle_xmpp13QN_SASL_ABORTE) #8
  call void @_ZN11jingle_xmpp10XmlElementC1ERKNS_5QNameEb(%"class.jingle_xmpp::XmlElement"* nonnull %5, %"class.jingle_xmpp::QName"* nonnull dereferenceable(48) %3, i1 zeroext true) #8
  call void @_ZN11jingle_xmpp5QNameD1Ev(%"class.jingle_xmpp::QName"* nonnull %3) #8
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %6) #8
  ret %"class.jingle_xmpp::XmlElement"* %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN11jingle_xmpp13SaslMechanism17HandleSaslSuccessEPKNS_10XmlElementE(%"class.jingle_xmpp::SaslMechanism"* nocapture, %"class.jingle_xmpp::XmlElement"* nocapture) unnamed_addr #5 align 2 {
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN11jingle_xmpp13SaslMechanism17HandleSaslFailureEPKNS_10XmlElementE(%"class.jingle_xmpp::SaslMechanism"* nocapture, %"class.jingle_xmpp::XmlElement"* nocapture) unnamed_addr #5 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11jingle_xmpp13SaslMechanism12Base64EncodeERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%"class.std::__1::basic_string"* noalias sret, %"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %3 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 24, i1 false) #8, !alias.scope !2
  %4 = bitcast %"class.std::__1::basic_string"* %1 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %5 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %4, i64 0, i32 1, i32 0
  %6 = load i8, i8* %5, align 1, !noalias !2
  %7 = icmp slt i8 %6, 0
  %8 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = load i8*, i8** %8, align 8, !noalias !2
  %10 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %11 = load i64, i64* %10, align 8, !noalias !2
  %12 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  %13 = zext i8 %6 to i64
  %14 = select i1 %7, i8* %9, i8* %12
  %15 = select i1 %7, i64 %11, i64 %13
  tail call void @_ZN3rtc6Base6415EncodeFromArrayEPKvmPNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEE(i8* %14, i64 %15, %"class.std::__1::basic_string"* %0) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11jingle_xmpp13SaslMechanism12Base64DecodeERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%"class.std::__1::basic_string"* noalias sret, %"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %3 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 24, i1 false) #8, !alias.scope !5
  %4 = bitcast %"class.std::__1::basic_string"* %1 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %5 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %4, i64 0, i32 1, i32 0
  %6 = load i8, i8* %5, align 1, !noalias !5
  %7 = icmp slt i8 %6, 0
  %8 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = load i8*, i8** %8, align 8, !noalias !5
  %10 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %11 = load i64, i64* %10, align 8, !noalias !5
  %12 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  %13 = zext i8 %6 to i64
  %14 = select i1 %7, i8* %9, i8* %12
  %15 = select i1 %7, i64 %11, i64 %13
  %16 = tail call zeroext i1 @_ZN3rtc6Base6415DecodeFromArrayEPKcmiPNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPm(i8* %14, i64 %15, i32 43, %"class.std::__1::basic_string"* %0, i64* null) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11jingle_xmpp13SaslMechanism21Base64EncodeFromArrayEPKcm(%"class.std::__1::basic_string"* noalias sret, i8*, i64) local_unnamed_addr #0 align 2 {
  %4 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 0, i64 24, i1 false) #8
  tail call void @_ZN3rtc6Base6415EncodeFromArrayEPKvmPNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEE(i8* %1, i64 %2, %"class.std::__1::basic_string"* %0) #8
  ret void
}

declare void @_ZN3rtc6Base6415EncodeFromArrayEPKvmPNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEE(i8*, i64, %"class.std::__1::basic_string"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN11jingle_xmpp13SaslMechanismD2Ev(%"class.jingle_xmpp::SaslMechanism"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN11jingle_xmpp13SaslMechanismD0Ev(%"class.jingle_xmpp::SaslMechanism"*) unnamed_addr #0 comdat align 2 {
  tail call void @llvm.trap() #9
  unreachable
}

declare void @__cxa_pure_virtual() unnamed_addr

declare zeroext i1 @_ZN3rtc6Base6415DecodeFromArrayEPKcmiPNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPm(i8*, i64, i32, %"class.std::__1::basic_string"*, i64*) local_unnamed_addr #3

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { cold noreturn nounwind }
attributes #7 = { builtin nounwind }
attributes #8 = { nounwind }
attributes #9 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN3rtc6Base646EncodeERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE: argument 0"}
!4 = distinct !{!4, !"_ZN3rtc6Base646EncodeERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE"}
!5 = !{!6}
!6 = distinct !{!6, !7, !"_ZN3rtc6Base646DecodeERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEi: argument 0"}
!7 = distinct !{!7, !"_ZN3rtc6Base646DecodeERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEi"}
