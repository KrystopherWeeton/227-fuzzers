; ModuleID = '../../third_party/libwebp/src/dsp/cost_sse2.c'
source_filename = "../../third_party/libwebp/src/dsp/cost_sse2.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.VP8Residual = type { i32, i32, i16*, i32, [3 x [11 x i8]]*, [3 x [11 x i32]]*, [3 x i16*]* }

@VP8SetResidualCoeffs = external local_unnamed_addr global void (i16*, %struct.VP8Residual*)*, align 8
@VP8GetResidualCost = external local_unnamed_addr global i32 (i32, %struct.VP8Residual*)*, align 8
@VP8LevelFixedCosts = external local_unnamed_addr constant [2048 x i16], align 16
@VP8EncBands = external local_unnamed_addr constant [17 x i8], align 16
@VP8EntropyCost = external local_unnamed_addr constant [256 x i16], align 16

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @VP8EncDspCostInitSSE2() local_unnamed_addr #0 {
  store void (i16*, %struct.VP8Residual*)* @SetResidualCoeffs_SSE2, void (i16*, %struct.VP8Residual*)** @VP8SetResidualCoeffs, align 8
  store i32 (i32, %struct.VP8Residual*)* @GetResidualCost_SSE2, i32 (i32, %struct.VP8Residual*)** @VP8GetResidualCost, align 8
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @SetResidualCoeffs_SSE2(i16*, %struct.VP8Residual* nocapture) #1 {
  %3 = bitcast i16* %0 to <8 x i16>*
  %4 = load <8 x i16>, <8 x i16>* %3, align 1
  %5 = getelementptr inbounds i16, i16* %0, i64 8
  %6 = bitcast i16* %5 to <8 x i16>*
  %7 = load <8 x i16>, <8 x i16>* %6, align 1
  %8 = tail call <16 x i8> @llvm.x86.sse2.packsswb.128(<8 x i16> %4, <8 x i16> %7) #6
  %9 = icmp eq <16 x i8> %8, zeroinitializer
  %10 = bitcast <16 x i1> %9 to i16
  %11 = icmp eq i16 %10, -1
  br i1 %11, label %17, label %12

12:                                               ; preds = %2
  %13 = xor i16 %10, -1
  %14 = zext i16 %13 to i32
  %15 = tail call i32 @llvm.ctlz.i32(i32 %14, i1 true) #6, !range !2
  %16 = xor i32 %15, 31
  br label %17

17:                                               ; preds = %2, %12
  %18 = phi i32 [ %16, %12 ], [ -1, %2 ]
  %19 = getelementptr inbounds %struct.VP8Residual, %struct.VP8Residual* %1, i64 0, i32 1
  store i32 %18, i32* %19, align 4
  %20 = getelementptr inbounds %struct.VP8Residual, %struct.VP8Residual* %1, i64 0, i32 2
  store i16* %0, i16** %20, align 8
  ret void
}

; Function Attrs: nounwind readonly ssp uwtable
define internal i32 @GetResidualCost_SSE2(i32, %struct.VP8Residual* nocapture readonly) #2 {
  %3 = alloca <2 x i64>, align 16
  %4 = bitcast <2 x i64>* %3 to [16 x i8]*
  %5 = alloca <2 x i64>, align 16
  %6 = bitcast <2 x i64>* %5 to [16 x i8]*
  %7 = alloca [16 x i16], align 16
  %8 = bitcast <2 x i64>* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %8) #6
  %9 = bitcast <2 x i64>* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %8, i8 -86, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %9) #6
  %10 = bitcast [16 x i16]* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %9, i8 -86, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %10) #6
  %11 = getelementptr inbounds [16 x i16], [16 x i16]* %7, i64 0, i64 8
  %12 = getelementptr inbounds %struct.VP8Residual, %struct.VP8Residual* %1, i64 0, i32 0
  %13 = bitcast [16 x i16]* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 32, i1 false)
  %14 = load i32, i32* %12, align 8
  %15 = getelementptr inbounds %struct.VP8Residual, %struct.VP8Residual* %1, i64 0, i32 4
  %16 = load [3 x [11 x i8]]*, [3 x [11 x i8]]** %15, align 8
  %17 = sext i32 %14 to i64
  %18 = sext i32 %0 to i64
  %19 = getelementptr inbounds [3 x [11 x i8]], [3 x [11 x i8]]* %16, i64 %17, i64 %18, i64 0
  %20 = load i8, i8* %19, align 1
  %21 = getelementptr inbounds %struct.VP8Residual, %struct.VP8Residual* %1, i64 0, i32 6
  %22 = load [3 x i16*]*, [3 x i16*]** %21, align 8
  %23 = getelementptr inbounds [3 x i16*], [3 x i16*]* %22, i64 %17, i64 %18
  %24 = load i16*, i16** %23, align 8
  %25 = icmp eq i32 %0, 0
  br i1 %25, label %26, label %32

26:                                               ; preds = %2
  %27 = xor i8 %20, -1
  %28 = zext i8 %27 to i64
  %29 = getelementptr inbounds [256 x i16], [256 x i16]* @VP8EntropyCost, i64 0, i64 %28
  %30 = load i16, i16* %29, align 2
  %31 = zext i16 %30 to i32
  br label %32

32:                                               ; preds = %2, %26
  %33 = phi i32 [ %31, %26 ], [ 0, %2 ]
  %34 = getelementptr inbounds %struct.VP8Residual, %struct.VP8Residual* %1, i64 0, i32 1
  %35 = load i32, i32* %34, align 4
  %36 = icmp slt i32 %35, 0
  br i1 %36, label %37, label %42

37:                                               ; preds = %32
  %38 = zext i8 %20 to i64
  %39 = getelementptr inbounds [256 x i16], [256 x i16]* @VP8EntropyCost, i64 0, i64 %38
  %40 = load i16, i16* %39, align 2
  %41 = zext i16 %40 to i32
  br label %191

42:                                               ; preds = %32
  %43 = getelementptr inbounds %struct.VP8Residual, %struct.VP8Residual* %1, i64 0, i32 2
  %44 = bitcast i16** %43 to <8 x i16>**
  %45 = load <8 x i16>*, <8 x i16>** %44, align 8
  %46 = load <8 x i16>, <8 x i16>* %45, align 1
  %47 = getelementptr inbounds <8 x i16>, <8 x i16>* %45, i64 0, i64 8
  %48 = bitcast i16* %47 to <8 x i16>*
  %49 = load <8 x i16>, <8 x i16>* %48, align 1
  %50 = sub <8 x i16> zeroinitializer, %46
  %51 = sub <8 x i16> zeroinitializer, %49
  %52 = icmp sgt <8 x i16> %46, %50
  %53 = select <8 x i1> %52, <8 x i16> %46, <8 x i16> %50
  %54 = icmp sgt <8 x i16> %49, %51
  %55 = select <8 x i1> %54, <8 x i16> %49, <8 x i16> %51
  %56 = tail call <16 x i8> @llvm.x86.sse2.packsswb.128(<8 x i16> %53, <8 x i16> %55) #6
  %57 = icmp ult <16 x i8> %56, <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>
  %58 = select <16 x i1> %57, <16 x i8> %56, <16 x i8> <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>
  %59 = icmp ult <16 x i8> %56, <i8 67, i8 67, i8 67, i8 67, i8 67, i8 67, i8 67, i8 67, i8 67, i8 67, i8 67, i8 67, i8 67, i8 67, i8 67, i8 67>
  %60 = select <16 x i1> %59, <16 x i8> %56, <16 x i8> <i8 67, i8 67, i8 67, i8 67, i8 67, i8 67, i8 67, i8 67, i8 67, i8 67, i8 67, i8 67, i8 67, i8 67, i8 67, i8 67>
  %61 = bitcast <2 x i64>* %5 to <16 x i8>*
  store <16 x i8> %58, <16 x i8>* %61, align 16
  %62 = bitcast <2 x i64>* %3 to <16 x i8>*
  store <16 x i8> %60, <16 x i8>* %62, align 16
  %63 = bitcast [16 x i16]* %7 to <8 x i16>*
  store <8 x i16> %53, <8 x i16>* %63, align 16
  %64 = bitcast i16* %11 to <8 x i16>*
  store <8 x i16> %55, <8 x i16>* %64, align 16
  %65 = icmp slt i32 %14, %35
  br i1 %65, label %66, label %155

66:                                               ; preds = %42
  %67 = xor i32 %14, -1
  %68 = add i32 %35, %67
  %69 = zext i32 %68 to i64
  %70 = add nsw i64 %17, %69
  %71 = sext i32 %35 to i64
  %72 = sub nsw i64 %71, %17
  %73 = xor i64 %17, -1
  %74 = and i64 %72, 1
  %75 = icmp eq i64 %74, 0
  br i1 %75, label %97, label %76

76:                                               ; preds = %66
  %77 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 %17
  %78 = load i8, i8* %77, align 1
  %79 = getelementptr inbounds [16 x i8], [16 x i8]* %4, i64 0, i64 %17
  %80 = load i8, i8* %79, align 1
  %81 = getelementptr inbounds [16 x i16], [16 x i16]* %7, i64 0, i64 %17
  %82 = load i16, i16* %81, align 2
  %83 = zext i16 %82 to i64
  %84 = getelementptr inbounds [2048 x i16], [2048 x i16]* @VP8LevelFixedCosts, i64 0, i64 %83
  %85 = load i16, i16* %84, align 2
  %86 = zext i16 %85 to i32
  %87 = zext i8 %80 to i64
  %88 = getelementptr inbounds i16, i16* %24, i64 %87
  %89 = load i16, i16* %88, align 2
  %90 = zext i16 %89 to i32
  %91 = add nuw nsw i32 %33, %86
  %92 = add nuw nsw i32 %91, %90
  %93 = add nsw i64 %17, 1
  %94 = zext i8 %78 to i64
  %95 = getelementptr inbounds [3 x i16*], [3 x i16*]* %22, i64 %93, i64 %94
  %96 = load i16*, i16** %95, align 8
  br label %97

97:                                               ; preds = %66, %76
  %98 = phi i32 [ undef, %66 ], [ %92, %76 ]
  %99 = phi i16* [ undef, %66 ], [ %96, %76 ]
  %100 = phi i64 [ %17, %66 ], [ %93, %76 ]
  %101 = phi i16* [ %24, %66 ], [ %96, %76 ]
  %102 = phi i32 [ %33, %66 ], [ %92, %76 ]
  %103 = sub nsw i64 0, %71
  %104 = icmp eq i64 %73, %103
  br i1 %104, label %150, label %105

105:                                              ; preds = %97, %105
  %106 = phi i64 [ %145, %105 ], [ %100, %97 ]
  %107 = phi i16* [ %148, %105 ], [ %101, %97 ]
  %108 = phi i32 [ %144, %105 ], [ %102, %97 ]
  %109 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 %106
  %110 = load i8, i8* %109, align 1
  %111 = getelementptr inbounds [16 x i8], [16 x i8]* %4, i64 0, i64 %106
  %112 = load i8, i8* %111, align 1
  %113 = getelementptr inbounds [16 x i16], [16 x i16]* %7, i64 0, i64 %106
  %114 = load i16, i16* %113, align 2
  %115 = zext i16 %114 to i64
  %116 = getelementptr inbounds [2048 x i16], [2048 x i16]* @VP8LevelFixedCosts, i64 0, i64 %115
  %117 = load i16, i16* %116, align 2
  %118 = zext i16 %117 to i32
  %119 = zext i8 %112 to i64
  %120 = getelementptr inbounds i16, i16* %107, i64 %119
  %121 = load i16, i16* %120, align 2
  %122 = zext i16 %121 to i32
  %123 = add i32 %108, %118
  %124 = add i32 %123, %122
  %125 = add nsw i64 %106, 1
  %126 = zext i8 %110 to i64
  %127 = getelementptr inbounds [3 x i16*], [3 x i16*]* %22, i64 %125, i64 %126
  %128 = load i16*, i16** %127, align 8
  %129 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 %125
  %130 = load i8, i8* %129, align 1
  %131 = getelementptr inbounds [16 x i8], [16 x i8]* %4, i64 0, i64 %125
  %132 = load i8, i8* %131, align 1
  %133 = getelementptr inbounds [16 x i16], [16 x i16]* %7, i64 0, i64 %125
  %134 = load i16, i16* %133, align 2
  %135 = zext i16 %134 to i64
  %136 = getelementptr inbounds [2048 x i16], [2048 x i16]* @VP8LevelFixedCosts, i64 0, i64 %135
  %137 = load i16, i16* %136, align 2
  %138 = zext i16 %137 to i32
  %139 = zext i8 %132 to i64
  %140 = getelementptr inbounds i16, i16* %128, i64 %139
  %141 = load i16, i16* %140, align 2
  %142 = zext i16 %141 to i32
  %143 = add i32 %124, %138
  %144 = add i32 %143, %142
  %145 = add nsw i64 %106, 2
  %146 = zext i8 %130 to i64
  %147 = getelementptr inbounds [3 x i16*], [3 x i16*]* %22, i64 %145, i64 %146
  %148 = load i16*, i16** %147, align 8
  %149 = icmp eq i64 %145, %71
  br i1 %149, label %150, label %105

150:                                              ; preds = %105, %97
  %151 = phi i32 [ %98, %97 ], [ %144, %105 ]
  %152 = phi i16* [ %99, %97 ], [ %148, %105 ]
  %153 = add nsw i64 %70, 1
  %154 = trunc i64 %153 to i32
  br label %155

155:                                              ; preds = %150, %42
  %156 = phi i32 [ %33, %42 ], [ %151, %150 ]
  %157 = phi i16* [ %24, %42 ], [ %152, %150 ]
  %158 = phi i32 [ %14, %42 ], [ %154, %150 ]
  %159 = phi i64 [ %17, %42 ], [ %153, %150 ]
  %160 = getelementptr inbounds [16 x i8], [16 x i8]* %4, i64 0, i64 %159
  %161 = load i8, i8* %160, align 1
  %162 = getelementptr inbounds [16 x i16], [16 x i16]* %7, i64 0, i64 %159
  %163 = load i16, i16* %162, align 2
  %164 = zext i16 %163 to i64
  %165 = getelementptr inbounds [2048 x i16], [2048 x i16]* @VP8LevelFixedCosts, i64 0, i64 %164
  %166 = load i16, i16* %165, align 2
  %167 = zext i16 %166 to i32
  %168 = zext i8 %161 to i64
  %169 = getelementptr inbounds i16, i16* %157, i64 %168
  %170 = load i16, i16* %169, align 2
  %171 = zext i16 %170 to i32
  %172 = add i32 %156, %167
  %173 = add i32 %172, %171
  %174 = icmp slt i32 %158, 15
  br i1 %174, label %175, label %191

175:                                              ; preds = %155
  %176 = add nsw i32 %158, 1
  %177 = sext i32 %176 to i64
  %178 = getelementptr inbounds [17 x i8], [17 x i8]* @VP8EncBands, i64 0, i64 %177
  %179 = load i8, i8* %178, align 1
  %180 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 %159
  %181 = load i8, i8* %180, align 1
  %182 = zext i8 %179 to i64
  %183 = zext i8 %181 to i64
  %184 = getelementptr inbounds [3 x [11 x i8]], [3 x [11 x i8]]* %16, i64 %182, i64 %183, i64 0
  %185 = load i8, i8* %184, align 1
  %186 = zext i8 %185 to i64
  %187 = getelementptr inbounds [256 x i16], [256 x i16]* @VP8EntropyCost, i64 0, i64 %186
  %188 = load i16, i16* %187, align 2
  %189 = zext i16 %188 to i32
  %190 = add nuw nsw i32 %173, %189
  br label %191

191:                                              ; preds = %155, %175, %37
  %192 = phi i32 [ %41, %37 ], [ %190, %175 ], [ %173, %155 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %10) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %9) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %8) #6
  ret i32 %192
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.x86.sse2.packsswb.128(<8 x i16>, <8 x i16>) #4

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nounwind readnone }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 0, i32 33}
