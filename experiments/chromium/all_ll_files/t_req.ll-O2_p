; ModuleID = '../../third_party/boringssl/src/crypto/x509/t_req.c'
source_filename = "../../third_party/boringssl/src/crypto/x509/t_req.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.X509_req_st = type { %struct.X509_REQ_INFO*, %struct.X509_algor_st*, %struct.asn1_string_st*, i32 }
%struct.X509_REQ_INFO = type { %struct.ASN1_ENCODING_st, %struct.asn1_string_st*, %struct.X509_name_st*, %struct.X509_pubkey_st*, %struct.stack_st_X509_ATTRIBUTE* }
%struct.ASN1_ENCODING_st = type { i8*, i64, i32, i8 }
%struct.X509_name_st = type { %struct.stack_st_X509_NAME_ENTRY*, i32, %struct.buf_mem_st*, i8*, i32 }
%struct.stack_st_X509_NAME_ENTRY = type opaque
%struct.buf_mem_st = type { i64, i8*, i64 }
%struct.X509_pubkey_st = type { %struct.X509_algor_st*, %struct.asn1_string_st*, %struct.evp_pkey_st* }
%struct.evp_pkey_st = type { i32, i32, %union.anon.0, %struct.evp_pkey_asn1_method_st* }
%union.anon.0 = type { i8* }
%struct.evp_pkey_asn1_method_st = type opaque
%struct.stack_st_X509_ATTRIBUTE = type opaque
%struct.X509_algor_st = type { %struct.asn1_object_st*, %struct.asn1_type_st* }
%struct.asn1_object_st = type { i8*, i8*, i32, i32, i8*, i32 }
%struct.asn1_type_st = type { i32, %union.anon }
%union.anon = type { i8* }
%struct.asn1_string_st = type { i32, i32, i8*, i64 }
%struct.bio_st = type { %struct.bio_method_st*, i32, i32, i32, i32, i32, i32, i8*, %struct.bio_st*, i64, i64 }
%struct.bio_method_st = type { i32, i8*, i32 (%struct.bio_st*, i8*, i32)*, i32 (%struct.bio_st*, i8*, i32)*, i32 (%struct.bio_st*, i8*)*, i32 (%struct.bio_st*, i8*, i32)*, i64 (%struct.bio_st*, i32, i64, i8*)*, i32 (%struct.bio_st*)*, i32 (%struct.bio_st*)*, i64 (%struct.bio_st*, i32, i64 (%struct.bio_st*, i32, i8*, i32, i64, i64)*)* }
%struct.asn1_pctx_st = type opaque
%struct.stack_st = type { i64, i8**, i32, i64, i32 (i8**, i8**)* }
%struct.x509_attributes_st = type { %struct.asn1_object_st*, %struct.stack_st_ASN1_TYPE* }
%struct.stack_st_ASN1_TYPE = type opaque
%struct.stack_st_X509_EXTENSION = type opaque
%struct.X509_extension_st = type { %struct.asn1_object_st*, i32, %struct.asn1_string_st* }

@.str = private unnamed_addr constant [52 x i8] c"../../third_party/boringssl/src/crypto/x509/t_req.c\00", align 1
@.str.1 = private unnamed_addr constant [22 x i8] c"Certificate Request:\0A\00", align 1
@.str.2 = private unnamed_addr constant [11 x i8] c"    Data:\0A\00", align 1
@.str.3 = private unnamed_addr constant [25 x i8] c"%8sVersion: %ld (0x%lx)\0A\00", align 1
@.str.4 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.5 = private unnamed_addr constant [19 x i8] c"        Subject:%c\00", align 1
@.str.6 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.7 = private unnamed_addr constant [34 x i8] c"        Subject Public Key Info:\0A\00", align 1
@.str.8 = private unnamed_addr constant [27 x i8] c"%12sPublic Key Algorithm: \00", align 1
@.str.9 = private unnamed_addr constant [31 x i8] c"%12sUnable to load Public Key\0A\00", align 1
@.str.10 = private unnamed_addr constant [16 x i8] c"%8sAttributes:\0A\00", align 1
@.str.11 = private unnamed_addr constant [11 x i8] c"%12sa0:00\0A\00", align 1
@.str.12 = private unnamed_addr constant [5 x i8] c"%12s\00", align 1
@.str.13 = private unnamed_addr constant [33 x i8] c"(Unable to print attribute ID.)\0A\00", align 1
@.str.14 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.15 = private unnamed_addr constant [2 x i8] c":\00", align 1
@.str.16 = private unnamed_addr constant [27 x i8] c"unable to print attribute\0A\00", align 1
@.str.17 = private unnamed_addr constant [26 x i8] c"%8sRequested Extensions:\0A\00", align 1
@.str.18 = private unnamed_addr constant [6 x i8] c": %s\0A\00", align 1
@.str.19 = private unnamed_addr constant [9 x i8] c"critical\00", align 1
@.str.20 = private unnamed_addr constant [5 x i8] c"%16s\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @X509_REQ_print_fp(%struct._IO_FILE*, %struct.X509_req_st*) local_unnamed_addr #0 {
  %3 = tail call %struct.bio_st* @BIO_new_fp(%struct._IO_FILE* %0, i32 0) #3
  %4 = icmp eq %struct.bio_st* %3, null
  br i1 %4, label %5, label %6

5:                                                ; preds = %2
  tail call void @ERR_put_error(i32 11, i32 0, i32 7, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str, i64 0, i64 0), i32 72) #3
  br label %9

6:                                                ; preds = %2
  %7 = tail call i32 @X509_REQ_print_ex(%struct.bio_st* nonnull %3, %struct.X509_req_st* %1, i64 0, i64 0) #3
  %8 = tail call i32 @BIO_free(%struct.bio_st* nonnull %3) #3
  br label %9

9:                                                ; preds = %6, %5
  %10 = phi i32 [ 0, %5 ], [ %7, %6 ]
  ret i32 %10
}

declare %struct.bio_st* @BIO_new_fp(%struct._IO_FILE*, i32) local_unnamed_addr #1

declare void @ERR_put_error(i32, i32, i32, i8*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @X509_REQ_print(%struct.bio_st*, %struct.X509_req_st*) local_unnamed_addr #0 {
  %3 = tail call i32 @X509_REQ_print_ex(%struct.bio_st* %0, %struct.X509_req_st* %1, i64 0, i64 0)
  ret i32 %3
}

declare i32 @BIO_free(%struct.bio_st*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @X509_REQ_print_ex(%struct.bio_st*, %struct.X509_req_st*, i64, i64) local_unnamed_addr #0 {
  %5 = and i64 %2, 983040
  %6 = icmp eq i64 %5, 262144
  %7 = select i1 %6, i32 10, i32 32
  %8 = select i1 %6, i32 12, i32 0
  %9 = icmp eq i64 %2, 0
  %10 = select i1 %9, i32 16, i32 %8
  %11 = getelementptr inbounds %struct.X509_req_st, %struct.X509_req_st* %1, i64 0, i32 0
  %12 = load %struct.X509_REQ_INFO*, %struct.X509_REQ_INFO** %11, align 8
  %13 = and i64 %3, 1
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %15, label %21

15:                                               ; preds = %4
  %16 = tail call i32 @BIO_write(%struct.bio_st* %0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.1, i64 0, i64 0), i32 21) #3
  %17 = icmp slt i32 %16, 1
  br i1 %17, label %199, label %18

18:                                               ; preds = %15
  %19 = tail call i32 @BIO_write(%struct.bio_st* %0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i64 0, i64 0), i32 10) #3
  %20 = icmp slt i32 %19, 1
  br i1 %20, label %199, label %21

21:                                               ; preds = %4, %18
  %22 = and i64 %3, 2
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %24, label %29

24:                                               ; preds = %21
  %25 = tail call i64 @X509_REQ_get_version(%struct.X509_req_st* %1) #3
  %26 = add nsw i64 %25, 1
  %27 = tail call i32 (%struct.bio_st*, i8*, ...) @BIO_printf(%struct.bio_st* %0, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.4, i64 0, i64 0), i64 %26, i64 %25) #3
  %28 = icmp slt i32 %27, 1
  br i1 %28, label %199, label %29

29:                                               ; preds = %21, %24
  %30 = and i64 %3, 64
  %31 = icmp eq i64 %30, 0
  br i1 %31, label %32, label %43

32:                                               ; preds = %29
  %33 = tail call i32 (%struct.bio_st*, i8*, ...) @BIO_printf(%struct.bio_st* %0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.5, i64 0, i64 0), i32 %7) #3
  %34 = icmp slt i32 %33, 1
  br i1 %34, label %199, label %35

35:                                               ; preds = %32
  %36 = getelementptr inbounds %struct.X509_REQ_INFO, %struct.X509_REQ_INFO* %12, i64 0, i32 2
  %37 = load %struct.X509_name_st*, %struct.X509_name_st** %36, align 8
  %38 = tail call i32 @X509_NAME_print_ex(%struct.bio_st* %0, %struct.X509_name_st* %37, i32 %10, i64 %2) #3
  %39 = icmp slt i32 %38, 0
  br i1 %39, label %199, label %40

40:                                               ; preds = %35
  %41 = tail call i32 @BIO_write(%struct.bio_st* %0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0), i32 1) #3
  %42 = icmp slt i32 %41, 1
  br i1 %42, label %199, label %43

43:                                               ; preds = %29, %40
  %44 = trunc i64 %3 to i8
  %45 = icmp slt i8 %44, 0
  br i1 %45, label %71, label %46

46:                                               ; preds = %43
  %47 = tail call i32 @BIO_write(%struct.bio_st* %0, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.7, i64 0, i64 0), i32 33) #3
  %48 = icmp slt i32 %47, 1
  br i1 %48, label %199, label %49

49:                                               ; preds = %46
  %50 = tail call i32 (%struct.bio_st*, i8*, ...) @BIO_printf(%struct.bio_st* %0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.4, i64 0, i64 0)) #3
  %51 = icmp slt i32 %50, 1
  br i1 %51, label %199, label %52

52:                                               ; preds = %49
  %53 = getelementptr inbounds %struct.X509_REQ_INFO, %struct.X509_REQ_INFO* %12, i64 0, i32 3
  %54 = load %struct.X509_pubkey_st*, %struct.X509_pubkey_st** %53, align 8
  %55 = getelementptr inbounds %struct.X509_pubkey_st, %struct.X509_pubkey_st* %54, i64 0, i32 0
  %56 = load %struct.X509_algor_st*, %struct.X509_algor_st** %55, align 8
  %57 = getelementptr inbounds %struct.X509_algor_st, %struct.X509_algor_st* %56, i64 0, i32 0
  %58 = load %struct.asn1_object_st*, %struct.asn1_object_st** %57, align 8
  %59 = tail call i32 @i2a_ASN1_OBJECT(%struct.bio_st* %0, %struct.asn1_object_st* %58) #3
  %60 = icmp slt i32 %59, 1
  br i1 %60, label %199, label %61

61:                                               ; preds = %52
  %62 = tail call i32 @BIO_puts(%struct.bio_st* %0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0)) #3
  %63 = icmp slt i32 %62, 1
  br i1 %63, label %199, label %64

64:                                               ; preds = %61
  %65 = tail call %struct.evp_pkey_st* @X509_REQ_get_pubkey(%struct.X509_req_st* %1) #3
  %66 = icmp eq %struct.evp_pkey_st* %65, null
  br i1 %66, label %67, label %69

67:                                               ; preds = %64
  %68 = tail call i32 (%struct.bio_st*, i8*, ...) @BIO_printf(%struct.bio_st* %0, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.9, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.4, i64 0, i64 0)) #3
  tail call void @ERR_print_errors(%struct.bio_st* %0) #3
  br label %71

69:                                               ; preds = %64
  %70 = tail call i32 @EVP_PKEY_print_public(%struct.bio_st* %0, %struct.evp_pkey_st* nonnull %65, i32 16, %struct.asn1_pctx_st* null) #3
  tail call void @EVP_PKEY_free(%struct.evp_pkey_st* nonnull %65) #3
  br label %71

71:                                               ; preds = %67, %69, %43
  %72 = and i64 %3, 2048
  %73 = icmp eq i64 %72, 0
  br i1 %73, label %74, label %149

74:                                               ; preds = %71
  %75 = tail call i32 (%struct.bio_st*, i8*, ...) @BIO_printf(%struct.bio_st* %0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.4, i64 0, i64 0)) #3
  %76 = icmp slt i32 %75, 1
  br i1 %76, label %199, label %77

77:                                               ; preds = %74
  %78 = load %struct.X509_REQ_INFO*, %struct.X509_REQ_INFO** %11, align 8
  %79 = getelementptr inbounds %struct.X509_REQ_INFO, %struct.X509_REQ_INFO* %78, i64 0, i32 4
  %80 = bitcast %struct.stack_st_X509_ATTRIBUTE** %79 to %struct.stack_st**
  %81 = load %struct.stack_st*, %struct.stack_st** %80, align 8
  %82 = tail call i64 @sk_num(%struct.stack_st* %81) #3
  %83 = icmp eq i64 %82, 0
  br i1 %83, label %87, label %84

84:                                               ; preds = %77
  %85 = tail call i64 @sk_num(%struct.stack_st* %81) #3
  %86 = icmp eq i64 %85, 0
  br i1 %86, label %149, label %90

87:                                               ; preds = %77
  %88 = tail call i32 (%struct.bio_st*, i8*, ...) @BIO_printf(%struct.bio_st* %0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.4, i64 0, i64 0)) #3
  %89 = icmp slt i32 %88, 1
  br i1 %89, label %199, label %149

90:                                               ; preds = %84, %145
  %91 = phi i64 [ %146, %145 ], [ 0, %84 ]
  %92 = tail call i8* @sk_value(%struct.stack_st* %81, i64 %91) #3
  %93 = bitcast i8* %92 to %struct.x509_attributes_st*
  %94 = tail call %struct.asn1_object_st* @X509_ATTRIBUTE_get0_object(%struct.x509_attributes_st* %93) #3
  %95 = tail call i32 @OBJ_obj2nid(%struct.asn1_object_st* %94) #3
  %96 = tail call i32 @X509_REQ_extension_nid(i32 %95) #3
  %97 = icmp eq i32 %96, 0
  br i1 %97, label %98, label %145

98:                                               ; preds = %90
  %99 = tail call i32 (%struct.bio_st*, i8*, ...) @BIO_printf(%struct.bio_st* %0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.12, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.4, i64 0, i64 0)) #3
  %100 = icmp slt i32 %99, 1
  br i1 %100, label %199, label %101

101:                                              ; preds = %98
  %102 = tail call i32 @X509_ATTRIBUTE_count(%struct.x509_attributes_st* %93) #3
  %103 = tail call i32 @i2a_ASN1_OBJECT(%struct.bio_st* %0, %struct.asn1_object_st* %94) #3
  %104 = icmp slt i32 %103, 1
  br i1 %104, label %110, label %105

105:                                              ; preds = %101
  %106 = icmp sgt i32 %102, 0
  br i1 %106, label %107, label %145

107:                                              ; preds = %105
  %108 = sub nsw i32 25, %103
  %109 = icmp slt i32 %103, 25
  br label %113

110:                                              ; preds = %101
  %111 = tail call i32 @BIO_puts(%struct.bio_st* %0, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.13, i64 0, i64 0)) #3
  %112 = icmp slt i32 %111, 0
  br i1 %112, label %199, label %145

113:                                              ; preds = %140, %107
  %114 = phi i32 [ 0, %107 ], [ %143, %140 ]
  %115 = tail call %struct.asn1_type_st* @X509_ATTRIBUTE_get0_type(%struct.x509_attributes_st* %93, i32 %114) #3
  %116 = getelementptr inbounds %struct.asn1_type_st, %struct.asn1_type_st* %115, i64 0, i32 0
  %117 = load i32, i32* %116, align 8
  %118 = getelementptr inbounds %struct.asn1_type_st, %struct.asn1_type_st* %115, i64 0, i32 1
  %119 = bitcast %union.anon* %118 to %struct.asn1_string_st**
  %120 = load %struct.asn1_string_st*, %struct.asn1_string_st** %119, align 8
  br i1 %109, label %123, label %128

121:                                              ; preds = %123
  %122 = icmp sgt i32 %127, 0
  br i1 %122, label %123, label %128

123:                                              ; preds = %113, %121
  %124 = phi i32 [ %127, %121 ], [ %108, %113 ]
  %125 = tail call i32 @BIO_write(%struct.bio_st* %0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.14, i64 0, i64 0), i32 1) #3
  %126 = icmp eq i32 %125, 1
  %127 = add nsw i32 %124, -1
  br i1 %126, label %121, label %199

128:                                              ; preds = %121, %113
  %129 = tail call i32 @BIO_puts(%struct.bio_st* %0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.15, i64 0, i64 0)) #3
  %130 = icmp slt i32 %129, 1
  br i1 %130, label %199, label %131

131:                                              ; preds = %128
  switch i32 %117, label %140 [
    i32 22, label %132
    i32 20, label %132
    i32 19, label %132
    i32 12, label %132
  ]

132:                                              ; preds = %131, %131, %131, %131
  %133 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %120, i64 0, i32 2
  %134 = load i8*, i8** %133, align 8
  %135 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %120, i64 0, i32 0
  %136 = load i32, i32* %135, align 8
  %137 = tail call i32 @BIO_write(%struct.bio_st* %0, i8* %134, i32 %136) #3
  %138 = load i32, i32* %135, align 8
  %139 = icmp eq i32 %137, %138
  br i1 %139, label %140, label %199

140:                                              ; preds = %131, %132
  %141 = phi i8* [ getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0), %132 ], [ getelementptr inbounds ([27 x i8], [27 x i8]* @.str.16, i64 0, i64 0), %131 ]
  %142 = tail call i32 @BIO_puts(%struct.bio_st* %0, i8* %141) #3
  %143 = add nuw nsw i32 %114, 1
  %144 = icmp eq i32 %143, %102
  br i1 %144, label %145, label %113

145:                                              ; preds = %140, %105, %90, %110
  %146 = add nuw i64 %91, 1
  %147 = tail call i64 @sk_num(%struct.stack_st* %81) #3
  %148 = icmp ult i64 %146, %147
  br i1 %148, label %90, label %149

149:                                              ; preds = %145, %84, %71, %87
  %150 = and i64 %3, 256
  %151 = icmp eq i64 %150, 0
  br i1 %151, label %152, label %189

152:                                              ; preds = %149
  %153 = tail call %struct.stack_st_X509_EXTENSION* @X509_REQ_get_extensions(%struct.X509_req_st* %1) #3
  %154 = icmp eq %struct.stack_st_X509_EXTENSION* %153, null
  br i1 %154, label %189, label %155

155:                                              ; preds = %152
  %156 = tail call i32 (%struct.bio_st*, i8*, ...) @BIO_printf(%struct.bio_st* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.17, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.4, i64 0, i64 0)) #3
  %157 = bitcast %struct.stack_st_X509_EXTENSION* %153 to %struct.stack_st*
  %158 = tail call i64 @sk_num(%struct.stack_st* nonnull %157) #3
  %159 = icmp eq i64 %158, 0
  br i1 %159, label %188, label %163

160:                                              ; preds = %184
  %161 = tail call i64 @sk_num(%struct.stack_st* nonnull %157) #3
  %162 = icmp ult i64 %187, %161
  br i1 %162, label %163, label %188

163:                                              ; preds = %155, %160
  %164 = phi i64 [ %187, %160 ], [ 0, %155 ]
  %165 = tail call i8* @sk_value(%struct.stack_st* nonnull %157, i64 %164) #3
  %166 = bitcast i8* %165 to %struct.X509_extension_st*
  %167 = tail call i32 (%struct.bio_st*, i8*, ...) @BIO_printf(%struct.bio_st* %0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.12, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.4, i64 0, i64 0)) #3
  %168 = icmp slt i32 %167, 1
  br i1 %168, label %199, label %169

169:                                              ; preds = %163
  %170 = tail call %struct.asn1_object_st* @X509_EXTENSION_get_object(%struct.X509_extension_st* %166) #3
  %171 = tail call i32 @i2a_ASN1_OBJECT(%struct.bio_st* %0, %struct.asn1_object_st* %170) #3
  %172 = tail call i32 @X509_EXTENSION_get_critical(%struct.X509_extension_st* %166) #3
  %173 = icmp eq i32 %172, 0
  %174 = select i1 %173, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.19, i64 0, i64 0)
  %175 = tail call i32 (%struct.bio_st*, i8*, ...) @BIO_printf(%struct.bio_st* %0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.18, i64 0, i64 0), i8* %174) #3
  %176 = icmp slt i32 %175, 1
  br i1 %176, label %199, label %177

177:                                              ; preds = %169
  %178 = tail call i32 @X509V3_EXT_print(%struct.bio_st* %0, %struct.X509_extension_st* %166, i64 %3, i32 16) #3
  %179 = icmp eq i32 %178, 0
  br i1 %179, label %180, label %184

180:                                              ; preds = %177
  %181 = tail call i32 (%struct.bio_st*, i8*, ...) @BIO_printf(%struct.bio_st* %0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.20, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.4, i64 0, i64 0)) #3
  %182 = tail call %struct.asn1_string_st* @X509_EXTENSION_get_data(%struct.X509_extension_st* %166) #3
  %183 = tail call i32 @ASN1_STRING_print(%struct.bio_st* %0, %struct.asn1_string_st* %182) #3
  br label %184

184:                                              ; preds = %177, %180
  %185 = tail call i32 @BIO_write(%struct.bio_st* %0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0), i32 1) #3
  %186 = icmp slt i32 %185, 1
  %187 = add nuw i64 %164, 1
  br i1 %186, label %199, label %160

188:                                              ; preds = %160, %155
  tail call void @sk_pop_free_ex(%struct.stack_st* nonnull %157, void (void (i8*)*, i8*)* nonnull @sk_X509_EXTENSION_call_free_func, void (i8*)* bitcast (void (%struct.X509_extension_st*)* @X509_EXTENSION_free to void (i8*)*)) #3
  br label %189

189:                                              ; preds = %188, %152, %149
  %190 = and i64 %3, 512
  %191 = icmp eq i64 %190, 0
  br i1 %191, label %192, label %200

192:                                              ; preds = %189
  %193 = getelementptr inbounds %struct.X509_req_st, %struct.X509_req_st* %1, i64 0, i32 1
  %194 = load %struct.X509_algor_st*, %struct.X509_algor_st** %193, align 8
  %195 = getelementptr inbounds %struct.X509_req_st, %struct.X509_req_st* %1, i64 0, i32 2
  %196 = load %struct.asn1_string_st*, %struct.asn1_string_st** %195, align 8
  %197 = tail call i32 @X509_signature_print(%struct.bio_st* %0, %struct.X509_algor_st* %194, %struct.asn1_string_st* %196) #3
  %198 = icmp eq i32 %197, 0
  br i1 %198, label %199, label %200

199:                                              ; preds = %110, %98, %132, %128, %123, %184, %169, %163, %192, %87, %74, %46, %49, %52, %61, %32, %35, %40, %24, %15, %18
  tail call void @ERR_put_error(i32 11, i32 0, i32 7, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str, i64 0, i64 0), i32 240) #3
  br label %200

200:                                              ; preds = %189, %192, %199
  %201 = phi i32 [ 0, %199 ], [ 1, %192 ], [ 1, %189 ]
  ret i32 %201
}

declare i32 @BIO_write(%struct.bio_st*, i8*, i32) local_unnamed_addr #1

declare i64 @X509_REQ_get_version(%struct.X509_req_st*) local_unnamed_addr #1

declare i32 @BIO_printf(%struct.bio_st*, i8*, ...) local_unnamed_addr #1

declare i32 @X509_NAME_print_ex(%struct.bio_st*, %struct.X509_name_st*, i32, i64) local_unnamed_addr #1

declare i32 @i2a_ASN1_OBJECT(%struct.bio_st*, %struct.asn1_object_st*) local_unnamed_addr #1

declare i32 @BIO_puts(%struct.bio_st*, i8*) local_unnamed_addr #1

declare %struct.evp_pkey_st* @X509_REQ_get_pubkey(%struct.X509_req_st*) local_unnamed_addr #1

declare void @ERR_print_errors(%struct.bio_st*) local_unnamed_addr #1

declare i32 @EVP_PKEY_print_public(%struct.bio_st*, %struct.evp_pkey_st*, i32, %struct.asn1_pctx_st*) local_unnamed_addr #1

declare void @EVP_PKEY_free(%struct.evp_pkey_st*) local_unnamed_addr #1

declare %struct.asn1_object_st* @X509_ATTRIBUTE_get0_object(%struct.x509_attributes_st*) local_unnamed_addr #1

declare i32 @X509_REQ_extension_nid(i32) local_unnamed_addr #1

declare i32 @OBJ_obj2nid(%struct.asn1_object_st*) local_unnamed_addr #1

declare i32 @X509_ATTRIBUTE_count(%struct.x509_attributes_st*) local_unnamed_addr #1

declare %struct.asn1_type_st* @X509_ATTRIBUTE_get0_type(%struct.x509_attributes_st*, i32) local_unnamed_addr #1

declare %struct.stack_st_X509_EXTENSION* @X509_REQ_get_extensions(%struct.X509_req_st*) local_unnamed_addr #1

declare %struct.asn1_object_st* @X509_EXTENSION_get_object(%struct.X509_extension_st*) local_unnamed_addr #1

declare i32 @X509_EXTENSION_get_critical(%struct.X509_extension_st*) local_unnamed_addr #1

declare i32 @X509V3_EXT_print(%struct.bio_st*, %struct.X509_extension_st*, i64, i32) local_unnamed_addr #1

declare i32 @ASN1_STRING_print(%struct.bio_st*, %struct.asn1_string_st*) local_unnamed_addr #1

declare %struct.asn1_string_st* @X509_EXTENSION_get_data(%struct.X509_extension_st*) local_unnamed_addr #1

declare void @X509_EXTENSION_free(%struct.X509_extension_st*) #1

declare i32 @X509_signature_print(%struct.bio_st*, %struct.X509_algor_st*, %struct.asn1_string_st*) local_unnamed_addr #1

declare i64 @sk_num(%struct.stack_st*) local_unnamed_addr #1

declare i8* @sk_value(%struct.stack_st*, i64) local_unnamed_addr #1

declare void @sk_pop_free_ex(%struct.stack_st*, void (void (i8*)*, i8*)*, void (i8*)*) local_unnamed_addr #1

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @sk_X509_EXTENSION_call_free_func(void (i8*)* nocapture, i8*) #2 {
  %3 = bitcast void (i8*)* %0 to void (%struct.X509_extension_st*)*
  %4 = bitcast i8* %1 to %struct.X509_extension_st*
  tail call void %3(%struct.X509_extension_st* %4) #3
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
