; ModuleID = '../../third_party/pdfium/xfa/fwl/cfwl_eventtextwillchange.cpp'
source_filename = "../../third_party/pdfium/xfa/fwl/cfwl_eventtextwillchange.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.CFWL_EventTextWillChange = type <{ %class.CFWL_Event, %"class.fxcrt::WideString", %"class.fxcrt::WideString", i64, i64, i8, [7 x i8] }>
%class.CFWL_Event = type { i32 (...)**, i32, %class.CFWL_Widget*, %class.CFWL_Widget* }
%"class.fxcrt::WideString" = type { %"class.fxcrt::RetainPtr" }
%"class.fxcrt::RetainPtr" = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.fxcrt::StringDataTemplate"* }
%"class.fxcrt::StringDataTemplate" = type <{ i64, i64, i64, [1 x i32], [4 x i8] }>
%class.CFWL_Widget = type opaque

@_ZTV24CFWL_EventTextWillChange = hidden unnamed_addr constant { [4 x i8*] } { [4 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.CFWL_EventTextWillChange*)* @_ZN24CFWL_EventTextWillChangeD2Ev to i8*), i8* bitcast (void (%class.CFWL_EventTextWillChange*)* @_ZN24CFWL_EventTextWillChangeD0Ev to i8*)] }, align 8

@_ZN24CFWL_EventTextWillChangeC1EP11CFWL_WidgetRKN5fxcrt10WideStringES5_mm = hidden unnamed_addr alias void (%class.CFWL_EventTextWillChange*, %class.CFWL_Widget*, %"class.fxcrt::WideString"*, %"class.fxcrt::WideString"*, i64, i64), void (%class.CFWL_EventTextWillChange*, %class.CFWL_Widget*, %"class.fxcrt::WideString"*, %"class.fxcrt::WideString"*, i64, i64)* @_ZN24CFWL_EventTextWillChangeC2EP11CFWL_WidgetRKN5fxcrt10WideStringES5_mm
@_ZN24CFWL_EventTextWillChangeD1Ev = hidden unnamed_addr alias void (%class.CFWL_EventTextWillChange*), void (%class.CFWL_EventTextWillChange*)* @_ZN24CFWL_EventTextWillChangeD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN24CFWL_EventTextWillChangeC2EP11CFWL_WidgetRKN5fxcrt10WideStringES5_mm(%class.CFWL_EventTextWillChange*, %class.CFWL_Widget*, %"class.fxcrt::WideString"* dereferenceable(8), %"class.fxcrt::WideString"* dereferenceable(8), i64, i64) unnamed_addr #0 align 2 {
  %7 = getelementptr inbounds %class.CFWL_EventTextWillChange, %class.CFWL_EventTextWillChange* %0, i64 0, i32 0
  tail call void @_ZN10CFWL_EventC2ENS_4TypeEP11CFWL_Widget(%class.CFWL_Event* %7, i32 9, %class.CFWL_Widget* %1) #4
  %8 = getelementptr inbounds %class.CFWL_EventTextWillChange, %class.CFWL_EventTextWillChange* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTV24CFWL_EventTextWillChange, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %8, align 8
  %9 = getelementptr inbounds %class.CFWL_EventTextWillChange, %class.CFWL_EventTextWillChange* %0, i64 0, i32 1
  tail call void @_ZN5fxcrt10WideStringC1ERKS0_(%"class.fxcrt::WideString"* %9, %"class.fxcrt::WideString"* dereferenceable(8) %2) #4
  %10 = getelementptr inbounds %class.CFWL_EventTextWillChange, %class.CFWL_EventTextWillChange* %0, i64 0, i32 2
  tail call void @_ZN5fxcrt10WideStringC1ERKS0_(%"class.fxcrt::WideString"* %10, %"class.fxcrt::WideString"* dereferenceable(8) %3) #4
  %11 = getelementptr inbounds %class.CFWL_EventTextWillChange, %class.CFWL_EventTextWillChange* %0, i64 0, i32 3
  store i64 %4, i64* %11, align 8
  %12 = getelementptr inbounds %class.CFWL_EventTextWillChange, %class.CFWL_EventTextWillChange* %0, i64 0, i32 4
  store i64 %5, i64* %12, align 8
  %13 = getelementptr inbounds %class.CFWL_EventTextWillChange, %class.CFWL_EventTextWillChange* %0, i64 0, i32 5
  store i8 0, i8* %13, align 8
  ret void
}

declare void @_ZN10CFWL_EventC2ENS_4TypeEP11CFWL_Widget(%class.CFWL_Event*, i32, %class.CFWL_Widget*) unnamed_addr #1

declare void @_ZN5fxcrt10WideStringC1ERKS0_(%"class.fxcrt::WideString"*, %"class.fxcrt::WideString"* dereferenceable(8)) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN24CFWL_EventTextWillChangeD2Ev(%class.CFWL_EventTextWillChange*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CFWL_EventTextWillChange, %class.CFWL_EventTextWillChange* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTV24CFWL_EventTextWillChange, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.CFWL_EventTextWillChange, %class.CFWL_EventTextWillChange* %0, i64 0, i32 2
  tail call void @_ZN5fxcrt10WideStringD1Ev(%"class.fxcrt::WideString"* %3) #4
  %4 = getelementptr inbounds %class.CFWL_EventTextWillChange, %class.CFWL_EventTextWillChange* %0, i64 0, i32 1
  tail call void @_ZN5fxcrt10WideStringD1Ev(%"class.fxcrt::WideString"* %4) #4
  %5 = getelementptr inbounds %class.CFWL_EventTextWillChange, %class.CFWL_EventTextWillChange* %0, i64 0, i32 0
  tail call void @_ZN10CFWL_EventD2Ev(%class.CFWL_Event* %5) #4
  ret void
}

; Function Attrs: nounwind
declare void @_ZN5fxcrt10WideStringD1Ev(%"class.fxcrt::WideString"*) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN10CFWL_EventD2Ev(%class.CFWL_Event*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN24CFWL_EventTextWillChangeD0Ev(%class.CFWL_EventTextWillChange*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CFWL_EventTextWillChange, %class.CFWL_EventTextWillChange* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTV24CFWL_EventTextWillChange, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.CFWL_EventTextWillChange, %class.CFWL_EventTextWillChange* %0, i64 0, i32 2
  tail call void @_ZN5fxcrt10WideStringD1Ev(%"class.fxcrt::WideString"* %3) #4
  %4 = getelementptr inbounds %class.CFWL_EventTextWillChange, %class.CFWL_EventTextWillChange* %0, i64 0, i32 1
  tail call void @_ZN5fxcrt10WideStringD1Ev(%"class.fxcrt::WideString"* %4) #4
  %5 = getelementptr inbounds %class.CFWL_EventTextWillChange, %class.CFWL_EventTextWillChange* %0, i64 0, i32 0
  tail call void @_ZN10CFWL_EventD2Ev(%class.CFWL_Event* %5) #4
  %6 = bitcast %class.CFWL_EventTextWillChange* %0 to i8*
  tail call void @_ZdlPv(i8* %6) #5
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
