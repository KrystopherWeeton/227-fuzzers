; ModuleID = '../../cc/base/math_util.cc'
source_filename = "../../cc/base/math_util.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.gfx::Transform" = type { %class.SkMatrix44 }
%class.SkMatrix44 = type <{ [4 x [4 x float]], i8, [3 x i8] }>
%"class.cc::ScopedSubnormalFloatDisabler" = type { i32 }
%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }
%"class.gfx::Point" = type { i32, i32 }
%"class.gfx::Size" = type { i32, i32 }
%"class.gfx::Vector2d" = type { i32, i32 }
%"class.gfx::RectF" = type { %"class.gfx::PointF", %"class.gfx::SizeF" }
%"class.gfx::PointF" = type { float, float }
%"class.gfx::SizeF" = type { float, float }
%"struct.cc::HomogeneousCoordinate" = type { [4 x float] }
%"class.gfx::QuadF" = type { %"class.gfx::PointF", %"class.gfx::PointF", %"class.gfx::PointF", %"class.gfx::PointF" }
%"class.gfx::Vector2dF" = type { float, float }
%"class.gfx::Point3F" = type { float, float, float }
%"class.base::Value" = type { %"class.absl::variant" }
%"class.absl::variant" = type { %"class.absl::variant_internal::VariantCopyAssignBaseNontrivial" }
%"class.absl::variant_internal::VariantCopyAssignBaseNontrivial" = type { %"class.absl::variant_internal::VariantMoveAssignBaseNontrivial" }
%"class.absl::variant_internal::VariantMoveAssignBaseNontrivial" = type { %"class.absl::variant_internal::VariantCopyBaseNontrivial" }
%"class.absl::variant_internal::VariantCopyBaseNontrivial" = type { %"class.absl::variant_internal::VariantMoveBaseNontrivial" }
%"class.absl::variant_internal::VariantMoveBaseNontrivial" = type { %"class.absl::variant_internal::VariantStateBaseDestructorNontrivial" }
%"class.absl::variant_internal::VariantStateBaseDestructorNontrivial" = type { %"class.absl::variant_internal::VariantStateBase" }
%"class.absl::variant_internal::VariantStateBase" = type { %"union.absl::variant_internal::DestructibleUnionImpl", i64 }
%"union.absl::variant_internal::DestructibleUnionImpl" = type { %"union.absl::variant_internal::DestructibleUnionImpl.0" }
%"union.absl::variant_internal::DestructibleUnionImpl.0" = type { %"union.absl::variant_internal::DestructibleUnionImpl.1" }
%"union.absl::variant_internal::DestructibleUnionImpl.1" = type { %"union.absl::variant_internal::DestructibleUnionImpl.2" }
%"union.absl::variant_internal::DestructibleUnionImpl.2" = type { %"union.absl::variant_internal::DestructibleUnionImpl.3" }
%"union.absl::variant_internal::DestructibleUnionImpl.3" = type { %"class.std::__1::basic_string" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.base::ListValue" = type { %"class.base::Value" }
%"class.std::__1::vector.20" = type { %"class.std::__1::__vector_base.21" }
%"class.std::__1::__vector_base.21" = type { %"class.base::Value"*, %"class.base::Value"*, %"class.std::__1::__compressed_pair.22" }
%"class.std::__1::__compressed_pair.22" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"struct.std::__1::__compressed_pair_elem.23" = type { %"class.base::Value"* }
%"class.base::trace_event::TracedValue" = type { %"class.base::trace_event::ConvertableToTraceFormat", %"class.std::__1::unique_ptr" }
%"class.base::trace_event::ConvertableToTraceFormat" = type { i32 (...)** }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.28" }
%"class.std::__1::__compressed_pair.28" = type { %"struct.std::__1::__compressed_pair_elem.29" }
%"struct.std::__1::__compressed_pair_elem.29" = type { %"class.base::trace_event::TracedValue::Writer"* }
%"class.base::trace_event::TracedValue::Writer" = type { i32 (...)** }
%"class.gfx::ScrollOffset" = type { float, float }
%"class.gfx::BoxF" = type { %"class.gfx::Point3F", float, float, float }
%"class.gfx::RRectF" = type { %class.SkRRect }
%class.SkRRect = type { %struct.SkRect, [4 x %struct.SkPoint], i32 }
%struct.SkRect = type { float, float, float, float }
%struct.SkPoint = type { float, float }
%class.SkM44 = type { [16 x float] }

$_ZN4absl16variant_internal26TypedThrowBadVariantAccessIRKNSt3__16vectorIN4base5ValueENS2_9allocatorIS5_EEEEEET_v = comdat any

@__const._ZN2cc8MathUtil26InverseMapQuadToLocalSpaceERKN3gfx9TransformERKNS1_5QuadFE.inverse_device_transform = private unnamed_addr constant %"class.gfx::Transform" { %class.SkMatrix44 <{ [4 x [4 x float]] [[4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000]], i8 -86, [3 x i8] c"\AA\AA\AA" }> }, align 4
@.str = private unnamed_addr constant [6 x i8] c"width\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"height\00", align 1

@_ZN2cc28ScopedSubnormalFloatDisablerC1Ev = hidden unnamed_addr alias void (%"class.cc::ScopedSubnormalFloatDisabler"*), void (%"class.cc::ScopedSubnormalFloatDisabler"*)* @_ZN2cc28ScopedSubnormalFloatDisablerC2Ev
@_ZN2cc28ScopedSubnormalFloatDisablerD1Ev = hidden unnamed_addr alias void (%"class.cc::ScopedSubnormalFloatDisabler"*), void (%"class.cc::ScopedSubnormalFloatDisabler"*)* @_ZN2cc28ScopedSubnormalFloatDisablerD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden { i64, i64 } @_ZN2cc8MathUtil23MapEnclosingClippedRectERKN3gfx9TransformERKNS1_4RectE(%"class.gfx::Transform"* dereferenceable(68), %"class.gfx::Rect"* dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = tail call { i64, i64 } @_ZN2cc8MathUtil36MapEnclosingClippedRectIgnoringErrorERKN3gfx9TransformERKNS1_4RectEf(%"class.gfx::Transform"* dereferenceable(68) %0, %"class.gfx::Rect"* dereferenceable(16) %1, float 0.000000e+00)
  ret { i64, i64 } %3
}

; Function Attrs: nounwind ssp uwtable
define hidden { i64, i64 } @_ZN2cc8MathUtil36MapEnclosingClippedRectIgnoringErrorERKN3gfx9TransformERKNS1_4RectEf(%"class.gfx::Transform"* dereferenceable(68), %"class.gfx::Rect"* dereferenceable(16), float) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.gfx::Vector2d", align 4
  %5 = alloca { <2 x float>, <2 x float> }, align 8
  %6 = bitcast { <2 x float>, <2 x float> }* %5 to %"class.gfx::RectF"*
  %7 = alloca %"class.gfx::RectF", align 4
  %8 = tail call zeroext i1 @_ZNK3gfx9Transform30IsIdentityOrIntegerTranslationEv(%"class.gfx::Transform"* %0) #10
  br i1 %8, label %9, label %22

9:                                                ; preds = %3
  %10 = bitcast %"class.gfx::Vector2d"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10) #10
  %11 = getelementptr inbounds %"class.gfx::Vector2d", %"class.gfx::Vector2d"* %4, i64 0, i32 0
  %12 = getelementptr inbounds %"class.gfx::Vector2d", %"class.gfx::Vector2d"* %4, i64 0, i32 1
  %13 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %0, i64 0, i32 0, i32 0, i64 3, i64 0
  %14 = load float, float* %13, align 4
  %15 = fptosi float %14 to i32
  %16 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %0, i64 0, i32 0, i32 0, i64 3, i64 1
  %17 = load float, float* %16, align 4
  %18 = fptosi float %17 to i32
  store i32 %15, i32* %11, align 4
  store i32 %18, i32* %12, align 4
  %19 = call { i64, i64 } @_ZN3gfxplERKNS_4RectERKNS_8Vector2dE(%"class.gfx::Rect"* dereferenceable(16) %1, %"class.gfx::Vector2d"* nonnull dereferenceable(8) %4) #10
  %20 = extractvalue { i64, i64 } %19, 0
  %21 = extractvalue { i64, i64 } %19, 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #10
  br label %65

22:                                               ; preds = %3
  %23 = bitcast { <2 x float>, <2 x float> }* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %23) #10
  %24 = bitcast %"class.gfx::RectF"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %24) #10
  %25 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 0, i32 0
  %26 = load i32, i32* %25, align 4
  %27 = sitofp i32 %26 to float
  %28 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 0, i32 1
  %29 = load i32, i32* %28, align 4
  %30 = sitofp i32 %29 to float
  %31 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 1, i32 0
  %32 = load i32, i32* %31, align 4
  %33 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 1, i32 1
  %34 = load i32, i32* %33, align 4
  %35 = getelementptr inbounds %"class.gfx::RectF", %"class.gfx::RectF"* %7, i64 0, i32 0, i32 0
  store float %27, float* %35, align 4
  %36 = getelementptr inbounds %"class.gfx::RectF", %"class.gfx::RectF"* %7, i64 0, i32 0, i32 1
  store float %30, float* %36, align 4
  %37 = getelementptr inbounds %"class.gfx::RectF", %"class.gfx::RectF"* %7, i64 0, i32 1, i32 0
  %38 = icmp sgt i32 %32, 0
  %39 = select i1 %38, i32 %32, i32 0
  %40 = sitofp i32 %39 to float
  store float %40, float* %37, align 4
  %41 = getelementptr inbounds %"class.gfx::RectF", %"class.gfx::RectF"* %7, i64 0, i32 1, i32 1
  %42 = icmp sgt i32 %34, 0
  %43 = select i1 %42, i32 %34, i32 0
  %44 = sitofp i32 %43 to float
  store float %44, float* %41, align 4
  %45 = call { <2 x float>, <2 x float> } @_ZN2cc8MathUtil14MapClippedRectERKN3gfx9TransformERKNS1_5RectFE(%"class.gfx::Transform"* dereferenceable(68) %0, %"class.gfx::RectF"* nonnull dereferenceable(16) %7)
  %46 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %5, i64 0, i32 0
  %47 = extractvalue { <2 x float>, <2 x float> } %45, 0
  store <2 x float> %47, <2 x float>* %46, align 8
  %48 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %5, i64 0, i32 1
  %49 = extractvalue { <2 x float>, <2 x float> } %45, 1
  store <2 x float> %49, <2 x float>* %48, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %24) #10
  %50 = extractelement <2 x float> %47, i32 0
  %51 = extractelement <2 x float> %47, i32 1
  %52 = fcmp uno float %50, %51
  %53 = fadd <2 x float> %47, %49
  %54 = extractelement <2 x float> %53, i32 0
  %55 = extractelement <2 x float> %53, i32 1
  %56 = fcmp uno float %55, %54
  %57 = or i1 %56, %52
  br i1 %57, label %62, label %58

58:                                               ; preds = %22
  %59 = call { i64, i64 } @_ZN3gfx28ToEnclosingRectIgnoringErrorERKNS_5RectFEf(%"class.gfx::RectF"* nonnull dereferenceable(16) %6, float %2) #10
  %60 = extractvalue { i64, i64 } %59, 0
  %61 = extractvalue { i64, i64 } %59, 1
  br label %62

62:                                               ; preds = %22, %58
  %63 = phi i64 [ %60, %58 ], [ 0, %22 ]
  %64 = phi i64 [ %61, %58 ], [ 0, %22 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %23) #10
  br label %65

65:                                               ; preds = %62, %9
  %66 = phi i64 [ %20, %9 ], [ %63, %62 ]
  %67 = phi i64 [ %21, %9 ], [ %64, %62 ]
  %68 = insertvalue { i64, i64 } undef, i64 %66, 0
  %69 = insertvalue { i64, i64 } %68, i64 %67, 1
  ret { i64, i64 } %69
}

declare zeroext i1 @_ZNK3gfx9Transform30IsIdentityOrIntegerTranslationEv(%"class.gfx::Transform"*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare { i64, i64 } @_ZN3gfxplERKNS_4RectERKNS_8Vector2dE(%"class.gfx::Rect"* dereferenceable(16), %"class.gfx::Vector2d"* dereferenceable(8)) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden { <2 x float>, <2 x float> } @_ZN2cc8MathUtil14MapClippedRectERKN3gfx9TransformERKNS1_5RectFE(%"class.gfx::Transform"* dereferenceable(68), %"class.gfx::RectF"* nocapture readonly dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = alloca [8 x float], align 16
  %4 = alloca [16 x float], align 16
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  %8 = alloca <4 x i32>, align 16
  %9 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %0, i64 0, i32 0, i32 1
  %10 = load i8, i8* %9, align 4
  %11 = icmp ult i8 %10, 2
  br i1 %11, label %12, label %29

12:                                               ; preds = %2
  %13 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %0, i64 0, i32 0, i32 0, i64 3, i64 0
  %14 = bitcast float* %13 to <2 x float>*
  %15 = load <2 x float>, <2 x float>* %14, align 4
  %16 = bitcast %"class.gfx::RectF"* %1 to <2 x float>*
  %17 = load <2 x float>, <2 x float>* %16, align 4
  %18 = fadd <2 x float> %15, %17
  %19 = getelementptr inbounds %"class.gfx::RectF", %"class.gfx::RectF"* %1, i64 0, i32 1, i32 0
  %20 = load float, float* %19, align 4
  %21 = getelementptr inbounds %"class.gfx::RectF", %"class.gfx::RectF"* %1, i64 0, i32 1, i32 1
  %22 = load float, float* %21, align 4
  %23 = fcmp ogt float %20, 0x3EB0000000000000
  %24 = select i1 %23, float %20, float 0.000000e+00
  %25 = insertelement <2 x float> undef, float %24, i32 0
  %26 = fcmp ogt float %22, 0x3EB0000000000000
  %27 = select i1 %26, float %22, float 0.000000e+00
  %28 = insertelement <2 x float> %25, float %27, i32 1
  br label %74

29:                                               ; preds = %2
  %30 = bitcast <4 x i32>* %8 to %"struct.cc::HomogeneousCoordinate"*
  %31 = bitcast <4 x i32>* %7 to %"struct.cc::HomogeneousCoordinate"*
  %32 = bitcast <4 x i32>* %6 to %"struct.cc::HomogeneousCoordinate"*
  %33 = bitcast <4 x i32>* %5 to %"struct.cc::HomogeneousCoordinate"*
  %34 = bitcast [8 x float]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %34) #10
  %35 = getelementptr inbounds [8 x float], [8 x float]* %3, i64 0, i64 0
  %36 = getelementptr inbounds [8 x float], [8 x float]* %3, i64 0, i64 1
  %37 = getelementptr inbounds [8 x float], [8 x float]* %3, i64 0, i64 2
  %38 = getelementptr inbounds [8 x float], [8 x float]* %3, i64 0, i64 3
  %39 = getelementptr inbounds [8 x float], [8 x float]* %3, i64 0, i64 4
  %40 = getelementptr inbounds [8 x float], [8 x float]* %3, i64 0, i64 5
  %41 = getelementptr inbounds [8 x float], [8 x float]* %3, i64 0, i64 6
  %42 = getelementptr inbounds [8 x float], [8 x float]* %3, i64 0, i64 7
  %43 = getelementptr inbounds %"class.gfx::RectF", %"class.gfx::RectF"* %1, i64 0, i32 0, i32 0
  %44 = load float, float* %43, align 4
  store float %44, float* %35, align 16
  %45 = getelementptr inbounds %"class.gfx::RectF", %"class.gfx::RectF"* %1, i64 0, i32 0, i32 1
  %46 = load float, float* %45, align 4
  store float %46, float* %36, align 4
  %47 = getelementptr inbounds %"class.gfx::RectF", %"class.gfx::RectF"* %1, i64 0, i32 1, i32 0
  %48 = load float, float* %47, align 4
  %49 = fadd float %44, %48
  store float %49, float* %37, align 8
  store float %46, float* %38, align 4
  store float %49, float* %39, align 16
  %50 = getelementptr inbounds %"class.gfx::RectF", %"class.gfx::RectF"* %1, i64 0, i32 1, i32 1
  %51 = load float, float* %50, align 4
  %52 = fadd float %46, %51
  store float %52, float* %40, align 4
  store float %44, float* %41, align 8
  store float %52, float* %42, align 4
  %53 = bitcast [16 x float]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %53) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %53, i8 -1, i64 64, i1 false)
  %54 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %0, i64 0, i32 0
  %55 = getelementptr inbounds [16 x float], [16 x float]* %4, i64 0, i64 0
  call void @_ZNK10SkMatrix444map2EPKfiPf(%class.SkMatrix44* %54, float* nonnull %35, i32 4, float* nonnull %55) #10
  %56 = bitcast <4 x i32>* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %56) #10
  %57 = bitcast [16 x float]* %4 to <4 x i32>*
  %58 = load <4 x i32>, <4 x i32>* %57, align 16
  store <4 x i32> %58, <4 x i32>* %5, align 16
  %59 = bitcast <4 x i32>* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %59) #10
  %60 = getelementptr inbounds [16 x float], [16 x float]* %4, i64 0, i64 4
  %61 = bitcast float* %60 to <4 x i32>*
  %62 = load <4 x i32>, <4 x i32>* %61, align 16
  store <4 x i32> %62, <4 x i32>* %6, align 16
  %63 = bitcast <4 x i32>* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %63) #10
  %64 = getelementptr inbounds [16 x float], [16 x float]* %4, i64 0, i64 8
  %65 = bitcast float* %64 to <4 x i32>*
  %66 = load <4 x i32>, <4 x i32>* %65, align 16
  store <4 x i32> %66, <4 x i32>* %7, align 16
  %67 = bitcast <4 x i32>* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %67) #10
  %68 = getelementptr inbounds [16 x float], [16 x float]* %4, i64 0, i64 12
  %69 = bitcast float* %68 to <4 x i32>*
  %70 = load <4 x i32>, <4 x i32>* %69, align 16
  store <4 x i32> %70, <4 x i32>* %8, align 16
  %71 = call { <2 x float>, <2 x float> } @_ZN2cc8MathUtil27ComputeEnclosingClippedRectERKNS_21HomogeneousCoordinateES3_S3_S3_(%"struct.cc::HomogeneousCoordinate"* nonnull dereferenceable(16) %33, %"struct.cc::HomogeneousCoordinate"* nonnull dereferenceable(16) %32, %"struct.cc::HomogeneousCoordinate"* nonnull dereferenceable(16) %31, %"struct.cc::HomogeneousCoordinate"* nonnull dereferenceable(16) %30)
  %72 = extractvalue { <2 x float>, <2 x float> } %71, 0
  %73 = extractvalue { <2 x float>, <2 x float> } %71, 1
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %67) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %63) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %59) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %56) #10
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %53) #10
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %34) #10
  br label %74

74:                                               ; preds = %29, %12
  %75 = phi <2 x float> [ %18, %12 ], [ %72, %29 ]
  %76 = phi <2 x float> [ %28, %12 ], [ %73, %29 ]
  %77 = insertvalue { <2 x float>, <2 x float> } undef, <2 x float> %75, 0
  %78 = insertvalue { <2 x float>, <2 x float> } %77, <2 x float> %76, 1
  ret { <2 x float>, <2 x float> } %78
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare { i64, i64 } @_ZN3gfx28ToEnclosingRectIgnoringErrorERKNS_5RectFEf(%"class.gfx::RectF"* dereferenceable(16), float) local_unnamed_addr #1

declare void @_ZNK10SkMatrix444map2EPKfiPf(%class.SkMatrix44*, float*, i32, float*) local_unnamed_addr #1

; Function Attrs: nounwind readonly ssp uwtable
define hidden { <2 x float>, <2 x float> } @_ZN2cc8MathUtil27ComputeEnclosingClippedRectERKNS_21HomogeneousCoordinateES3_S3_S3_(%"struct.cc::HomogeneousCoordinate"* readonly dereferenceable(16), %"struct.cc::HomogeneousCoordinate"* readonly dereferenceable(16), %"struct.cc::HomogeneousCoordinate"* readonly dereferenceable(16), %"struct.cc::HomogeneousCoordinate"* readonly dereferenceable(16)) local_unnamed_addr #3 align 2 {
  %5 = getelementptr inbounds %"struct.cc::HomogeneousCoordinate", %"struct.cc::HomogeneousCoordinate"* %0, i64 0, i32 0, i64 3
  %6 = load float, float* %5, align 4
  %7 = fcmp ole float %6, 0.000000e+00
  %8 = getelementptr inbounds %"struct.cc::HomogeneousCoordinate", %"struct.cc::HomogeneousCoordinate"* %1, i64 0, i32 0, i64 3
  %9 = load float, float* %8, align 4
  %10 = fcmp ole float %9, 0.000000e+00
  br i1 %7, label %131, label %11

11:                                               ; preds = %4
  br i1 %10, label %140, label %12

12:                                               ; preds = %11
  %13 = getelementptr inbounds %"struct.cc::HomogeneousCoordinate", %"struct.cc::HomogeneousCoordinate"* %2, i64 0, i32 0, i64 3
  %14 = load float, float* %13, align 4
  %15 = fcmp ugt float %14, 0.000000e+00
  br i1 %15, label %16, label %140

16:                                               ; preds = %12
  %17 = getelementptr inbounds %"struct.cc::HomogeneousCoordinate", %"struct.cc::HomogeneousCoordinate"* %3, i64 0, i32 0, i64 3
  %18 = load float, float* %17, align 4
  %19 = fcmp ugt float %18, 0.000000e+00
  br i1 %19, label %20, label %140

20:                                               ; preds = %16
  %21 = fcmp oeq float %6, 1.000000e+00
  br i1 %21, label %22, label %25

22:                                               ; preds = %20
  %23 = bitcast %"struct.cc::HomogeneousCoordinate"* %0 to <2 x float>*
  %24 = load <2 x float>, <2 x float>* %23, align 4
  br label %36

25:                                               ; preds = %20
  %26 = fdiv float 1.000000e+00, %6
  %27 = bitcast %"struct.cc::HomogeneousCoordinate"* %0 to <2 x float>*
  %28 = load <2 x float>, <2 x float>* %27, align 4
  %29 = insertelement <2 x float> undef, float %26, i32 0
  %30 = shufflevector <2 x float> %29, <2 x float> undef, <2 x i32> zeroinitializer
  %31 = fmul <2 x float> %30, %28
  %32 = fcmp olt <2 x float> %31, <float -1.000000e+06, float -1.000000e+06>
  %33 = select <2 x i1> %32, <2 x float> <float -1.000000e+06, float -1.000000e+06>, <2 x float> %31
  %34 = fcmp ogt <2 x float> %33, <float 1.000000e+06, float 1.000000e+06>
  %35 = select <2 x i1> %34, <2 x float> <float 1.000000e+06, float 1.000000e+06>, <2 x float> %33
  br label %36

36:                                               ; preds = %22, %25
  %37 = phi <2 x float> [ %24, %22 ], [ %35, %25 ]
  %38 = fcmp oeq float %9, 1.000000e+00
  br i1 %38, label %39, label %42

39:                                               ; preds = %36
  %40 = bitcast %"struct.cc::HomogeneousCoordinate"* %1 to <2 x float>*
  %41 = load <2 x float>, <2 x float>* %40, align 4
  br label %53

42:                                               ; preds = %36
  %43 = fdiv float 1.000000e+00, %9
  %44 = bitcast %"struct.cc::HomogeneousCoordinate"* %1 to <2 x float>*
  %45 = load <2 x float>, <2 x float>* %44, align 4
  %46 = insertelement <2 x float> undef, float %43, i32 0
  %47 = shufflevector <2 x float> %46, <2 x float> undef, <2 x i32> zeroinitializer
  %48 = fmul <2 x float> %47, %45
  %49 = fcmp olt <2 x float> %48, <float -1.000000e+06, float -1.000000e+06>
  %50 = select <2 x i1> %49, <2 x float> <float -1.000000e+06, float -1.000000e+06>, <2 x float> %48
  %51 = fcmp ogt <2 x float> %50, <float 1.000000e+06, float 1.000000e+06>
  %52 = select <2 x i1> %51, <2 x float> <float 1.000000e+06, float 1.000000e+06>, <2 x float> %50
  br label %53

53:                                               ; preds = %39, %42
  %54 = phi <2 x float> [ %41, %39 ], [ %52, %42 ]
  %55 = fcmp oeq float %14, 1.000000e+00
  br i1 %55, label %56, label %59

56:                                               ; preds = %53
  %57 = bitcast %"struct.cc::HomogeneousCoordinate"* %2 to <2 x float>*
  %58 = load <2 x float>, <2 x float>* %57, align 4
  br label %70

59:                                               ; preds = %53
  %60 = fdiv float 1.000000e+00, %14
  %61 = bitcast %"struct.cc::HomogeneousCoordinate"* %2 to <2 x float>*
  %62 = load <2 x float>, <2 x float>* %61, align 4
  %63 = insertelement <2 x float> undef, float %60, i32 0
  %64 = shufflevector <2 x float> %63, <2 x float> undef, <2 x i32> zeroinitializer
  %65 = fmul <2 x float> %64, %62
  %66 = fcmp olt <2 x float> %65, <float -1.000000e+06, float -1.000000e+06>
  %67 = select <2 x i1> %66, <2 x float> <float -1.000000e+06, float -1.000000e+06>, <2 x float> %65
  %68 = fcmp ogt <2 x float> %67, <float 1.000000e+06, float 1.000000e+06>
  %69 = select <2 x i1> %68, <2 x float> <float 1.000000e+06, float 1.000000e+06>, <2 x float> %67
  br label %70

70:                                               ; preds = %56, %59
  %71 = phi <2 x float> [ %58, %56 ], [ %69, %59 ]
  %72 = fcmp oeq float %18, 1.000000e+00
  br i1 %72, label %73, label %76

73:                                               ; preds = %70
  %74 = bitcast %"struct.cc::HomogeneousCoordinate"* %3 to <2 x float>*
  %75 = load <2 x float>, <2 x float>* %74, align 4
  br label %87

76:                                               ; preds = %70
  %77 = fdiv float 1.000000e+00, %18
  %78 = bitcast %"struct.cc::HomogeneousCoordinate"* %3 to <2 x float>*
  %79 = load <2 x float>, <2 x float>* %78, align 4
  %80 = insertelement <2 x float> undef, float %77, i32 0
  %81 = shufflevector <2 x float> %80, <2 x float> undef, <2 x i32> zeroinitializer
  %82 = fmul <2 x float> %81, %79
  %83 = fcmp olt <2 x float> %82, <float -1.000000e+06, float -1.000000e+06>
  %84 = select <2 x i1> %83, <2 x float> <float -1.000000e+06, float -1.000000e+06>, <2 x float> %82
  %85 = fcmp ogt <2 x float> %84, <float 1.000000e+06, float 1.000000e+06>
  %86 = select <2 x i1> %85, <2 x float> <float 1.000000e+06, float 1.000000e+06>, <2 x float> %84
  br label %87

87:                                               ; preds = %73, %76
  %88 = phi <2 x float> [ %75, %73 ], [ %86, %76 ]
  %89 = extractelement <2 x float> %54, i32 0
  %90 = extractelement <2 x float> %37, i32 0
  %91 = fcmp olt float %89, %90
  %92 = extractelement <2 x float> %71, i32 0
  %93 = select i1 %91, float %89, float %90
  %94 = fcmp ogt float %93, %92
  %95 = extractelement <2 x float> %88, i32 0
  %96 = select i1 %94, float %92, float %93
  %97 = fcmp ogt float %96, %95
  %98 = select i1 %97, float %95, float %96
  %99 = fcmp olt float %90, %89
  %100 = select i1 %99, float %89, float %90
  %101 = fcmp olt float %100, %92
  %102 = select i1 %101, float %92, float %100
  %103 = fcmp olt float %102, %95
  %104 = select i1 %103, float %95, float %102
  %105 = extractelement <2 x float> %54, i32 1
  %106 = extractelement <2 x float> %37, i32 1
  %107 = fcmp olt float %105, %106
  %108 = extractelement <2 x float> %71, i32 1
  %109 = select i1 %107, float %105, float %106
  %110 = fcmp ogt float %109, %108
  %111 = extractelement <2 x float> %88, i32 1
  %112 = select i1 %110, float %108, float %109
  %113 = fcmp ogt float %112, %111
  %114 = select i1 %113, float %111, float %112
  %115 = fcmp olt float %106, %105
  %116 = select i1 %115, float %105, float %106
  %117 = fcmp olt float %116, %108
  %118 = select i1 %117, float %108, float %116
  %119 = fcmp olt float %118, %111
  %120 = select i1 %119, float %111, float %118
  %121 = fsub float %104, %98
  %122 = fsub float %120, %114
  %123 = insertelement <2 x float> undef, float %98, i32 0
  %124 = insertelement <2 x float> %123, float %114, i32 1
  %125 = fcmp ogt float %121, 0x3EB0000000000000
  %126 = select i1 %125, float %121, float 0.000000e+00
  %127 = insertelement <2 x float> undef, float %126, i32 0
  %128 = fcmp ogt float %122, 0x3EB0000000000000
  %129 = select i1 %128, float %122, float 0.000000e+00
  %130 = insertelement <2 x float> %127, float %129, i32 1
  br label %547

131:                                              ; preds = %4
  br i1 %10, label %132, label %168

132:                                              ; preds = %131
  %133 = getelementptr inbounds %"struct.cc::HomogeneousCoordinate", %"struct.cc::HomogeneousCoordinate"* %2, i64 0, i32 0, i64 3
  %134 = load float, float* %133, align 4
  %135 = fcmp ugt float %134, 0.000000e+00
  br i1 %135, label %168, label %136

136:                                              ; preds = %132
  %137 = getelementptr inbounds %"struct.cc::HomogeneousCoordinate", %"struct.cc::HomogeneousCoordinate"* %3, i64 0, i32 0, i64 3
  %138 = load float, float* %137, align 4
  %139 = fcmp ugt float %138, 0.000000e+00
  br i1 %139, label %168, label %547

140:                                              ; preds = %11, %12, %16
  %141 = fcmp oeq float %6, 1.000000e+00
  br i1 %141, label %142, label %145

142:                                              ; preds = %140
  %143 = bitcast %"struct.cc::HomogeneousCoordinate"* %0 to <2 x float>*
  %144 = load <2 x float>, <2 x float>* %143, align 4
  br label %156

145:                                              ; preds = %140
  %146 = fdiv float 1.000000e+00, %6
  %147 = bitcast %"struct.cc::HomogeneousCoordinate"* %0 to <2 x float>*
  %148 = load <2 x float>, <2 x float>* %147, align 4
  %149 = insertelement <2 x float> undef, float %146, i32 0
  %150 = shufflevector <2 x float> %149, <2 x float> undef, <2 x i32> zeroinitializer
  %151 = fmul <2 x float> %150, %148
  %152 = fcmp olt <2 x float> %151, <float -1.000000e+06, float -1.000000e+06>
  %153 = select <2 x i1> %152, <2 x float> <float -1.000000e+06, float -1.000000e+06>, <2 x float> %151
  %154 = fcmp ogt <2 x float> %153, <float 1.000000e+06, float 1.000000e+06>
  %155 = select <2 x i1> %154, <2 x float> <float 1.000000e+06, float 1.000000e+06>, <2 x float> %153
  br label %156

156:                                              ; preds = %142, %145
  %157 = phi <2 x float> [ %144, %142 ], [ %155, %145 ]
  %158 = extractelement <2 x float> %157, i32 0
  %159 = fcmp ogt float %158, 0x47EFFFFFE0000000
  %160 = fcmp olt float %158, 0xC7EFFFFFE0000000
  %161 = extractelement <2 x float> %157, i32 1
  %162 = fcmp ogt float %161, 0x47EFFFFFE0000000
  %163 = fcmp olt float %161, 0xC7EFFFFFE0000000
  %164 = select i1 %159, float 0x47EFFFFFE0000000, float %158
  %165 = select i1 %160, float 0xC7EFFFFFE0000000, float %158
  %166 = select i1 %162, float 0x47EFFFFFE0000000, float %161
  %167 = select i1 %163, float 0xC7EFFFFFE0000000, float %161
  br i1 %10, label %170, label %232

168:                                              ; preds = %136, %132, %131
  %169 = xor i1 %7, %10
  br i1 %169, label %170, label %227

170:                                              ; preds = %156, %168
  %171 = phi float [ %164, %156 ], [ 0x47EFFFFFE0000000, %168 ]
  %172 = phi float [ %165, %156 ], [ 0xC7EFFFFFE0000000, %168 ]
  %173 = phi float [ %166, %156 ], [ 0x47EFFFFFE0000000, %168 ]
  %174 = phi float [ %167, %156 ], [ 0xC7EFFFFFE0000000, %168 ]
  %175 = fsub float %6, %9
  %176 = fdiv float %6, %175
  %177 = getelementptr inbounds %"struct.cc::HomogeneousCoordinate", %"struct.cc::HomogeneousCoordinate"* %0, i64 0, i32 0, i64 0
  %178 = load float, float* %177, align 4
  %179 = getelementptr inbounds %"struct.cc::HomogeneousCoordinate", %"struct.cc::HomogeneousCoordinate"* %1, i64 0, i32 0, i64 0
  %180 = load float, float* %179, align 4
  %181 = fmul float %9, %178
  %182 = fdiv float %181, %6
  %183 = fdiv float %182, %180
  %184 = fadd float %183, -1.000000e+00
  %185 = tail call float @llvm.fabs.f32(float %184) #10
  %186 = fcmp ogt float %185, 0x3EE4F8B580000000
  br i1 %186, label %187, label %194

187:                                              ; preds = %170
  %188 = fsub float 1.000000e+00, %176
  %189 = fmul float %188, %178
  %190 = fmul float %176, %180
  %191 = fadd float %189, %190
  %192 = fcmp ogt float %191, 0.000000e+00
  br i1 %192, label %196, label %193

193:                                              ; preds = %187
  br label %196

194:                                              ; preds = %170
  %195 = fdiv float %178, %6
  br label %196

196:                                              ; preds = %194, %193, %187
  %197 = phi float [ -1.000000e+06, %193 ], [ %195, %194 ], [ 1.000000e+06, %187 ]
  %198 = getelementptr inbounds %"struct.cc::HomogeneousCoordinate", %"struct.cc::HomogeneousCoordinate"* %0, i64 0, i32 0, i64 1
  %199 = load float, float* %198, align 4
  %200 = getelementptr inbounds %"struct.cc::HomogeneousCoordinate", %"struct.cc::HomogeneousCoordinate"* %1, i64 0, i32 0, i64 1
  %201 = load float, float* %200, align 4
  %202 = fmul float %9, %199
  %203 = fdiv float %202, %6
  %204 = fdiv float %203, %201
  %205 = fadd float %204, -1.000000e+00
  %206 = tail call float @llvm.fabs.f32(float %205) #10
  %207 = fcmp ogt float %206, 0x3EE4F8B580000000
  br i1 %207, label %208, label %215

208:                                              ; preds = %196
  %209 = fsub float 1.000000e+00, %176
  %210 = fmul float %209, %199
  %211 = fmul float %176, %201
  %212 = fadd float %210, %211
  %213 = fcmp ogt float %212, 0.000000e+00
  br i1 %213, label %217, label %214

214:                                              ; preds = %208
  br label %217

215:                                              ; preds = %196
  %216 = fdiv float %199, %6
  br label %217

217:                                              ; preds = %208, %214, %215
  %218 = phi float [ -1.000000e+06, %214 ], [ %216, %215 ], [ 1.000000e+06, %208 ]
  %219 = fcmp olt float %171, %197
  %220 = select i1 %219, float %171, float %197
  %221 = fcmp olt float %197, %172
  %222 = select i1 %221, float %172, float %197
  %223 = fcmp olt float %173, %218
  %224 = select i1 %223, float %173, float %218
  %225 = fcmp olt float %218, %174
  %226 = select i1 %225, float %174, float %218
  br label %227

227:                                              ; preds = %217, %168
  %228 = phi float [ %226, %217 ], [ 0xC7EFFFFFE0000000, %168 ]
  %229 = phi float [ %222, %217 ], [ 0xC7EFFFFFE0000000, %168 ]
  %230 = phi float [ %224, %217 ], [ 0x47EFFFFFE0000000, %168 ]
  %231 = phi float [ %220, %217 ], [ 0x47EFFFFFE0000000, %168 ]
  br i1 %10, label %267, label %232

232:                                              ; preds = %156, %227
  %233 = phi float [ %231, %227 ], [ %164, %156 ]
  %234 = phi float [ %229, %227 ], [ %165, %156 ]
  %235 = phi float [ %230, %227 ], [ %166, %156 ]
  %236 = phi float [ %228, %227 ], [ %167, %156 ]
  %237 = fcmp oeq float %9, 1.000000e+00
  br i1 %237, label %238, label %241

238:                                              ; preds = %232
  %239 = bitcast %"struct.cc::HomogeneousCoordinate"* %1 to <2 x float>*
  %240 = load <2 x float>, <2 x float>* %239, align 4
  br label %252

241:                                              ; preds = %232
  %242 = fdiv float 1.000000e+00, %9
  %243 = bitcast %"struct.cc::HomogeneousCoordinate"* %1 to <2 x float>*
  %244 = load <2 x float>, <2 x float>* %243, align 4
  %245 = insertelement <2 x float> undef, float %242, i32 0
  %246 = shufflevector <2 x float> %245, <2 x float> undef, <2 x i32> zeroinitializer
  %247 = fmul <2 x float> %246, %244
  %248 = fcmp olt <2 x float> %247, <float -1.000000e+06, float -1.000000e+06>
  %249 = select <2 x i1> %248, <2 x float> <float -1.000000e+06, float -1.000000e+06>, <2 x float> %247
  %250 = fcmp ogt <2 x float> %249, <float 1.000000e+06, float 1.000000e+06>
  %251 = select <2 x i1> %250, <2 x float> <float 1.000000e+06, float 1.000000e+06>, <2 x float> %249
  br label %252

252:                                              ; preds = %238, %241
  %253 = phi <2 x float> [ %240, %238 ], [ %251, %241 ]
  %254 = extractelement <2 x float> %253, i32 0
  %255 = fcmp olt float %233, %254
  %256 = select i1 %255, float %233, float %254
  %257 = fcmp olt float %254, %234
  %258 = select i1 %257, float %234, float %254
  %259 = extractelement <2 x float> %253, i32 1
  %260 = fcmp olt float %235, %259
  %261 = select i1 %260, float %235, float %259
  %262 = fcmp olt float %259, %236
  %263 = select i1 %262, float %236, float %259
  %264 = getelementptr inbounds %"struct.cc::HomogeneousCoordinate", %"struct.cc::HomogeneousCoordinate"* %2, i64 0, i32 0, i64 3
  %265 = load float, float* %264, align 4
  %266 = fcmp ugt float %265, 0.000000e+00
  br i1 %266, label %330, label %271

267:                                              ; preds = %227
  %268 = getelementptr inbounds %"struct.cc::HomogeneousCoordinate", %"struct.cc::HomogeneousCoordinate"* %2, i64 0, i32 0, i64 3
  %269 = load float, float* %268, align 4
  %270 = fcmp ole float %269, 0.000000e+00
  br i1 %270, label %351, label %271

271:                                              ; preds = %267, %252
  %272 = phi i1 [ true, %252 ], [ %270, %267 ]
  %273 = phi float [ %265, %252 ], [ %269, %267 ]
  %274 = phi float [ %256, %252 ], [ %231, %267 ]
  %275 = phi float [ %258, %252 ], [ %229, %267 ]
  %276 = phi float [ %261, %252 ], [ %230, %267 ]
  %277 = phi float [ %263, %252 ], [ %228, %267 ]
  %278 = fsub float %9, %273
  %279 = fdiv float %9, %278
  %280 = getelementptr inbounds %"struct.cc::HomogeneousCoordinate", %"struct.cc::HomogeneousCoordinate"* %1, i64 0, i32 0, i64 0
  %281 = load float, float* %280, align 4
  %282 = getelementptr inbounds %"struct.cc::HomogeneousCoordinate", %"struct.cc::HomogeneousCoordinate"* %2, i64 0, i32 0, i64 0
  %283 = load float, float* %282, align 4
  %284 = fmul float %273, %281
  %285 = fdiv float %284, %9
  %286 = fdiv float %285, %283
  %287 = fadd float %286, -1.000000e+00
  %288 = tail call float @llvm.fabs.f32(float %287) #10
  %289 = fcmp ogt float %288, 0x3EE4F8B580000000
  br i1 %289, label %290, label %297

290:                                              ; preds = %271
  %291 = fsub float 1.000000e+00, %279
  %292 = fmul float %291, %281
  %293 = fmul float %279, %283
  %294 = fadd float %292, %293
  %295 = fcmp ogt float %294, 0.000000e+00
  br i1 %295, label %299, label %296

296:                                              ; preds = %290
  br label %299

297:                                              ; preds = %271
  %298 = fdiv float %281, %9
  br label %299

299:                                              ; preds = %297, %296, %290
  %300 = phi float [ -1.000000e+06, %296 ], [ %298, %297 ], [ 1.000000e+06, %290 ]
  %301 = getelementptr inbounds %"struct.cc::HomogeneousCoordinate", %"struct.cc::HomogeneousCoordinate"* %1, i64 0, i32 0, i64 1
  %302 = load float, float* %301, align 4
  %303 = getelementptr inbounds %"struct.cc::HomogeneousCoordinate", %"struct.cc::HomogeneousCoordinate"* %2, i64 0, i32 0, i64 1
  %304 = load float, float* %303, align 4
  %305 = fmul float %273, %302
  %306 = fdiv float %305, %9
  %307 = fdiv float %306, %304
  %308 = fadd float %307, -1.000000e+00
  %309 = tail call float @llvm.fabs.f32(float %308) #10
  %310 = fcmp ogt float %309, 0x3EE4F8B580000000
  br i1 %310, label %311, label %318

311:                                              ; preds = %299
  %312 = fsub float 1.000000e+00, %279
  %313 = fmul float %312, %302
  %314 = fmul float %279, %304
  %315 = fadd float %313, %314
  %316 = fcmp ogt float %315, 0.000000e+00
  br i1 %316, label %320, label %317

317:                                              ; preds = %311
  br label %320

318:                                              ; preds = %299
  %319 = fdiv float %302, %9
  br label %320

320:                                              ; preds = %311, %317, %318
  %321 = phi float [ -1.000000e+06, %317 ], [ %319, %318 ], [ 1.000000e+06, %311 ]
  %322 = fcmp olt float %274, %300
  %323 = select i1 %322, float %274, float %300
  %324 = fcmp olt float %300, %275
  %325 = select i1 %324, float %275, float %300
  %326 = fcmp olt float %276, %321
  %327 = select i1 %326, float %276, float %321
  %328 = fcmp olt float %321, %277
  %329 = select i1 %328, float %277, float %321
  br i1 %272, label %351, label %330

330:                                              ; preds = %252, %320
  %331 = phi float [ %323, %320 ], [ %256, %252 ]
  %332 = phi float [ %325, %320 ], [ %258, %252 ]
  %333 = phi float [ %327, %320 ], [ %261, %252 ]
  %334 = phi float [ %329, %320 ], [ %263, %252 ]
  %335 = phi float [ %273, %320 ], [ %265, %252 ]
  %336 = fcmp oeq float %335, 1.000000e+00
  br i1 %336, label %337, label %340

337:                                              ; preds = %330
  %338 = bitcast %"struct.cc::HomogeneousCoordinate"* %2 to <2 x float>*
  %339 = load <2 x float>, <2 x float>* %338, align 4
  br label %360

340:                                              ; preds = %330
  %341 = fdiv float 1.000000e+00, %335
  %342 = bitcast %"struct.cc::HomogeneousCoordinate"* %2 to <2 x float>*
  %343 = load <2 x float>, <2 x float>* %342, align 4
  %344 = insertelement <2 x float> undef, float %341, i32 0
  %345 = shufflevector <2 x float> %344, <2 x float> undef, <2 x i32> zeroinitializer
  %346 = fmul <2 x float> %345, %343
  %347 = fcmp olt <2 x float> %346, <float -1.000000e+06, float -1.000000e+06>
  %348 = select <2 x i1> %347, <2 x float> <float -1.000000e+06, float -1.000000e+06>, <2 x float> %346
  %349 = fcmp ogt <2 x float> %348, <float 1.000000e+06, float 1.000000e+06>
  %350 = select <2 x i1> %349, <2 x float> <float 1.000000e+06, float 1.000000e+06>, <2 x float> %348
  br label %360

351:                                              ; preds = %267, %320
  %352 = phi float [ %273, %320 ], [ %269, %267 ]
  %353 = phi float [ %329, %320 ], [ %228, %267 ]
  %354 = phi float [ %325, %320 ], [ %229, %267 ]
  %355 = phi float [ %327, %320 ], [ %230, %267 ]
  %356 = phi float [ %323, %320 ], [ %231, %267 ]
  %357 = getelementptr inbounds %"struct.cc::HomogeneousCoordinate", %"struct.cc::HomogeneousCoordinate"* %3, i64 0, i32 0, i64 3
  %358 = load float, float* %357, align 4
  %359 = fcmp ole float %358, 0.000000e+00
  br i1 %359, label %456, label %375

360:                                              ; preds = %340, %337
  %361 = phi <2 x float> [ %350, %340 ], [ %339, %337 ]
  %362 = extractelement <2 x float> %361, i32 0
  %363 = fcmp olt float %331, %362
  %364 = select i1 %363, float %331, float %362
  %365 = fcmp olt float %362, %332
  %366 = select i1 %365, float %332, float %362
  %367 = extractelement <2 x float> %361, i32 1
  %368 = fcmp olt float %333, %367
  %369 = select i1 %368, float %333, float %367
  %370 = fcmp olt float %367, %334
  %371 = select i1 %370, float %334, float %367
  %372 = getelementptr inbounds %"struct.cc::HomogeneousCoordinate", %"struct.cc::HomogeneousCoordinate"* %3, i64 0, i32 0, i64 3
  %373 = load float, float* %372, align 4
  %374 = fcmp ugt float %373, 0.000000e+00
  br i1 %374, label %435, label %375

375:                                              ; preds = %351, %360
  %376 = phi i1 [ %359, %351 ], [ true, %360 ]
  %377 = phi float [ %358, %351 ], [ %373, %360 ]
  %378 = phi float [ %356, %351 ], [ %364, %360 ]
  %379 = phi float [ %354, %351 ], [ %366, %360 ]
  %380 = phi float [ %355, %351 ], [ %369, %360 ]
  %381 = phi float [ %353, %351 ], [ %371, %360 ]
  %382 = phi float [ %352, %351 ], [ %335, %360 ]
  %383 = fsub float %382, %377
  %384 = fdiv float %382, %383
  %385 = getelementptr inbounds %"struct.cc::HomogeneousCoordinate", %"struct.cc::HomogeneousCoordinate"* %2, i64 0, i32 0, i64 0
  %386 = load float, float* %385, align 4
  %387 = getelementptr inbounds %"struct.cc::HomogeneousCoordinate", %"struct.cc::HomogeneousCoordinate"* %3, i64 0, i32 0, i64 0
  %388 = load float, float* %387, align 4
  %389 = fmul float %377, %386
  %390 = fdiv float %389, %382
  %391 = fdiv float %390, %388
  %392 = fadd float %391, -1.000000e+00
  %393 = tail call float @llvm.fabs.f32(float %392) #10
  %394 = fcmp ogt float %393, 0x3EE4F8B580000000
  br i1 %394, label %395, label %402

395:                                              ; preds = %375
  %396 = fsub float 1.000000e+00, %384
  %397 = fmul float %396, %386
  %398 = fmul float %384, %388
  %399 = fadd float %397, %398
  %400 = fcmp ogt float %399, 0.000000e+00
  br i1 %400, label %404, label %401

401:                                              ; preds = %395
  br label %404

402:                                              ; preds = %375
  %403 = fdiv float %386, %382
  br label %404

404:                                              ; preds = %402, %401, %395
  %405 = phi float [ -1.000000e+06, %401 ], [ %403, %402 ], [ 1.000000e+06, %395 ]
  %406 = getelementptr inbounds %"struct.cc::HomogeneousCoordinate", %"struct.cc::HomogeneousCoordinate"* %2, i64 0, i32 0, i64 1
  %407 = load float, float* %406, align 4
  %408 = getelementptr inbounds %"struct.cc::HomogeneousCoordinate", %"struct.cc::HomogeneousCoordinate"* %3, i64 0, i32 0, i64 1
  %409 = load float, float* %408, align 4
  %410 = fmul float %377, %407
  %411 = fdiv float %410, %382
  %412 = fdiv float %411, %409
  %413 = fadd float %412, -1.000000e+00
  %414 = tail call float @llvm.fabs.f32(float %413) #10
  %415 = fcmp ogt float %414, 0x3EE4F8B580000000
  br i1 %415, label %416, label %423

416:                                              ; preds = %404
  %417 = fsub float 1.000000e+00, %384
  %418 = fmul float %417, %407
  %419 = fmul float %384, %409
  %420 = fadd float %418, %419
  %421 = fcmp ogt float %420, 0.000000e+00
  br i1 %421, label %425, label %422

422:                                              ; preds = %416
  br label %425

423:                                              ; preds = %404
  %424 = fdiv float %407, %382
  br label %425

425:                                              ; preds = %416, %422, %423
  %426 = phi float [ -1.000000e+06, %422 ], [ %424, %423 ], [ 1.000000e+06, %416 ]
  %427 = fcmp olt float %378, %405
  %428 = select i1 %427, float %378, float %405
  %429 = fcmp olt float %405, %379
  %430 = select i1 %429, float %379, float %405
  %431 = fcmp olt float %380, %426
  %432 = select i1 %431, float %380, float %426
  %433 = fcmp olt float %426, %381
  %434 = select i1 %433, float %381, float %426
  br i1 %376, label %456, label %435

435:                                              ; preds = %360, %425
  %436 = phi float [ %428, %425 ], [ %364, %360 ]
  %437 = phi float [ %430, %425 ], [ %366, %360 ]
  %438 = phi float [ %432, %425 ], [ %369, %360 ]
  %439 = phi float [ %434, %425 ], [ %371, %360 ]
  %440 = phi float [ %377, %425 ], [ %373, %360 ]
  %441 = fcmp oeq float %440, 1.000000e+00
  br i1 %441, label %442, label %445

442:                                              ; preds = %435
  %443 = bitcast %"struct.cc::HomogeneousCoordinate"* %3 to <2 x float>*
  %444 = load <2 x float>, <2 x float>* %443, align 4
  br label %462

445:                                              ; preds = %435
  %446 = fdiv float 1.000000e+00, %440
  %447 = bitcast %"struct.cc::HomogeneousCoordinate"* %3 to <2 x float>*
  %448 = load <2 x float>, <2 x float>* %447, align 4
  %449 = insertelement <2 x float> undef, float %446, i32 0
  %450 = shufflevector <2 x float> %449, <2 x float> undef, <2 x i32> zeroinitializer
  %451 = fmul <2 x float> %450, %448
  %452 = fcmp olt <2 x float> %451, <float -1.000000e+06, float -1.000000e+06>
  %453 = select <2 x i1> %452, <2 x float> <float -1.000000e+06, float -1.000000e+06>, <2 x float> %451
  %454 = fcmp ogt <2 x float> %453, <float 1.000000e+06, float 1.000000e+06>
  %455 = select <2 x i1> %454, <2 x float> <float 1.000000e+06, float 1.000000e+06>, <2 x float> %453
  br label %462

456:                                              ; preds = %351, %425
  %457 = phi float [ %377, %425 ], [ %358, %351 ]
  %458 = phi float [ %434, %425 ], [ %353, %351 ]
  %459 = phi float [ %430, %425 ], [ %354, %351 ]
  %460 = phi float [ %432, %425 ], [ %355, %351 ]
  %461 = phi float [ %428, %425 ], [ %356, %351 ]
  br i1 %7, label %532, label %474

462:                                              ; preds = %445, %442
  %463 = phi <2 x float> [ %455, %445 ], [ %444, %442 ]
  %464 = extractelement <2 x float> %463, i32 0
  %465 = fcmp olt float %436, %464
  %466 = select i1 %465, float %436, float %464
  %467 = fcmp olt float %464, %437
  %468 = select i1 %467, float %437, float %464
  %469 = extractelement <2 x float> %463, i32 1
  %470 = fcmp olt float %438, %469
  %471 = select i1 %470, float %438, float %469
  %472 = fcmp olt float %469, %439
  %473 = select i1 %472, float %439, float %469
  br i1 %7, label %474, label %532

474:                                              ; preds = %456, %462
  %475 = phi float [ %461, %456 ], [ %466, %462 ]
  %476 = phi float [ %459, %456 ], [ %468, %462 ]
  %477 = phi float [ %460, %456 ], [ %471, %462 ]
  %478 = phi float [ %458, %456 ], [ %473, %462 ]
  %479 = phi float [ %457, %456 ], [ %440, %462 ]
  %480 = fsub float %479, %6
  %481 = fdiv float %479, %480
  %482 = getelementptr inbounds %"struct.cc::HomogeneousCoordinate", %"struct.cc::HomogeneousCoordinate"* %3, i64 0, i32 0, i64 0
  %483 = load float, float* %482, align 4
  %484 = getelementptr inbounds %"struct.cc::HomogeneousCoordinate", %"struct.cc::HomogeneousCoordinate"* %0, i64 0, i32 0, i64 0
  %485 = load float, float* %484, align 4
  %486 = fmul float %6, %483
  %487 = fdiv float %486, %479
  %488 = fdiv float %487, %485
  %489 = fadd float %488, -1.000000e+00
  %490 = tail call float @llvm.fabs.f32(float %489) #10
  %491 = fcmp ogt float %490, 0x3EE4F8B580000000
  br i1 %491, label %492, label %499

492:                                              ; preds = %474
  %493 = fsub float 1.000000e+00, %481
  %494 = fmul float %493, %483
  %495 = fmul float %481, %485
  %496 = fadd float %494, %495
  %497 = fcmp ogt float %496, 0.000000e+00
  br i1 %497, label %501, label %498

498:                                              ; preds = %492
  br label %501

499:                                              ; preds = %474
  %500 = fdiv float %483, %479
  br label %501

501:                                              ; preds = %499, %498, %492
  %502 = phi float [ -1.000000e+06, %498 ], [ %500, %499 ], [ 1.000000e+06, %492 ]
  %503 = getelementptr inbounds %"struct.cc::HomogeneousCoordinate", %"struct.cc::HomogeneousCoordinate"* %3, i64 0, i32 0, i64 1
  %504 = load float, float* %503, align 4
  %505 = getelementptr inbounds %"struct.cc::HomogeneousCoordinate", %"struct.cc::HomogeneousCoordinate"* %0, i64 0, i32 0, i64 1
  %506 = load float, float* %505, align 4
  %507 = fmul float %6, %504
  %508 = fdiv float %507, %479
  %509 = fdiv float %508, %506
  %510 = fadd float %509, -1.000000e+00
  %511 = tail call float @llvm.fabs.f32(float %510) #10
  %512 = fcmp ogt float %511, 0x3EE4F8B580000000
  br i1 %512, label %513, label %520

513:                                              ; preds = %501
  %514 = fsub float 1.000000e+00, %481
  %515 = fmul float %514, %504
  %516 = fmul float %481, %506
  %517 = fadd float %515, %516
  %518 = fcmp ogt float %517, 0.000000e+00
  br i1 %518, label %522, label %519

519:                                              ; preds = %513
  br label %522

520:                                              ; preds = %501
  %521 = fdiv float %504, %479
  br label %522

522:                                              ; preds = %513, %519, %520
  %523 = phi float [ -1.000000e+06, %519 ], [ %521, %520 ], [ 1.000000e+06, %513 ]
  %524 = fcmp olt float %475, %502
  %525 = select i1 %524, float %475, float %502
  %526 = fcmp olt float %502, %476
  %527 = select i1 %526, float %476, float %502
  %528 = fcmp olt float %477, %523
  %529 = select i1 %528, float %477, float %523
  %530 = fcmp olt float %523, %478
  %531 = select i1 %530, float %478, float %523
  br label %532

532:                                              ; preds = %456, %462, %522
  %533 = phi float [ %531, %522 ], [ %458, %456 ], [ %473, %462 ]
  %534 = phi float [ %527, %522 ], [ %459, %456 ], [ %468, %462 ]
  %535 = phi float [ %529, %522 ], [ %460, %456 ], [ %471, %462 ]
  %536 = phi float [ %525, %522 ], [ %461, %456 ], [ %466, %462 ]
  %537 = fsub float %534, %536
  %538 = fsub float %533, %535
  %539 = fcmp ogt float %537, 0x3EB0000000000000
  %540 = select i1 %539, float %537, float 0.000000e+00
  %541 = fcmp ogt float %538, 0x3EB0000000000000
  %542 = select i1 %541, float %538, float 0.000000e+00
  %543 = insertelement <2 x float> undef, float %536, i32 0
  %544 = insertelement <2 x float> %543, float %535, i32 1
  %545 = insertelement <2 x float> undef, float %540, i32 0
  %546 = insertelement <2 x float> %545, float %542, i32 1
  br label %547

547:                                              ; preds = %136, %532, %87
  %548 = phi <2 x float> [ %544, %532 ], [ %124, %87 ], [ zeroinitializer, %136 ]
  %549 = phi <2 x float> [ %546, %532 ], [ %130, %87 ], [ zeroinitializer, %136 ]
  %550 = insertvalue { <2 x float>, <2 x float> } undef, <2 x float> %548, 0
  %551 = insertvalue { <2 x float>, <2 x float> } %550, <2 x float> %549, 1
  ret { <2 x float>, <2 x float> } %551
}

; Function Attrs: nounwind ssp uwtable
define hidden { i64, i64 } @_ZN2cc8MathUtil27ProjectEnclosingClippedRectERKN3gfx9TransformERKNS1_4RectE(%"class.gfx::Transform"* dereferenceable(68), %"class.gfx::Rect"* dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.gfx::Vector2d", align 4
  %4 = alloca { <2 x float>, <2 x float> }, align 8
  %5 = bitcast { <2 x float>, <2 x float> }* %4 to %"class.gfx::RectF"*
  %6 = alloca %"class.gfx::RectF", align 4
  %7 = tail call zeroext i1 @_ZNK3gfx9Transform30IsIdentityOrIntegerTranslationEv(%"class.gfx::Transform"* %0) #10
  br i1 %7, label %8, label %21

8:                                                ; preds = %2
  %9 = bitcast %"class.gfx::Vector2d"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #10
  %10 = getelementptr inbounds %"class.gfx::Vector2d", %"class.gfx::Vector2d"* %3, i64 0, i32 0
  %11 = getelementptr inbounds %"class.gfx::Vector2d", %"class.gfx::Vector2d"* %3, i64 0, i32 1
  %12 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %0, i64 0, i32 0, i32 0, i64 3, i64 0
  %13 = load float, float* %12, align 4
  %14 = fptosi float %13 to i32
  %15 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %0, i64 0, i32 0, i32 0, i64 3, i64 1
  %16 = load float, float* %15, align 4
  %17 = fptosi float %16 to i32
  store i32 %14, i32* %10, align 4
  store i32 %17, i32* %11, align 4
  %18 = call { i64, i64 } @_ZN3gfxplERKNS_4RectERKNS_8Vector2dE(%"class.gfx::Rect"* dereferenceable(16) %1, %"class.gfx::Vector2d"* nonnull dereferenceable(8) %3) #10
  %19 = extractvalue { i64, i64 } %18, 0
  %20 = extractvalue { i64, i64 } %18, 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #10
  br label %64

21:                                               ; preds = %2
  %22 = bitcast { <2 x float>, <2 x float> }* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %22) #10
  %23 = bitcast %"class.gfx::RectF"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %23) #10
  %24 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 0, i32 0
  %25 = load i32, i32* %24, align 4
  %26 = sitofp i32 %25 to float
  %27 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 0, i32 1
  %28 = load i32, i32* %27, align 4
  %29 = sitofp i32 %28 to float
  %30 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 1, i32 0
  %31 = load i32, i32* %30, align 4
  %32 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 1, i32 1
  %33 = load i32, i32* %32, align 4
  %34 = getelementptr inbounds %"class.gfx::RectF", %"class.gfx::RectF"* %6, i64 0, i32 0, i32 0
  store float %26, float* %34, align 4
  %35 = getelementptr inbounds %"class.gfx::RectF", %"class.gfx::RectF"* %6, i64 0, i32 0, i32 1
  store float %29, float* %35, align 4
  %36 = getelementptr inbounds %"class.gfx::RectF", %"class.gfx::RectF"* %6, i64 0, i32 1, i32 0
  %37 = icmp sgt i32 %31, 0
  %38 = select i1 %37, i32 %31, i32 0
  %39 = sitofp i32 %38 to float
  store float %39, float* %36, align 4
  %40 = getelementptr inbounds %"class.gfx::RectF", %"class.gfx::RectF"* %6, i64 0, i32 1, i32 1
  %41 = icmp sgt i32 %33, 0
  %42 = select i1 %41, i32 %33, i32 0
  %43 = sitofp i32 %42 to float
  store float %43, float* %40, align 4
  %44 = call { <2 x float>, <2 x float> } @_ZN2cc8MathUtil18ProjectClippedRectERKN3gfx9TransformERKNS1_5RectFE(%"class.gfx::Transform"* dereferenceable(68) %0, %"class.gfx::RectF"* nonnull dereferenceable(16) %6)
  %45 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %4, i64 0, i32 0
  %46 = extractvalue { <2 x float>, <2 x float> } %44, 0
  store <2 x float> %46, <2 x float>* %45, align 8
  %47 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %4, i64 0, i32 1
  %48 = extractvalue { <2 x float>, <2 x float> } %44, 1
  store <2 x float> %48, <2 x float>* %47, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %23) #10
  %49 = extractelement <2 x float> %46, i32 0
  %50 = extractelement <2 x float> %46, i32 1
  %51 = fcmp uno float %49, %50
  %52 = fadd <2 x float> %46, %48
  %53 = extractelement <2 x float> %52, i32 0
  %54 = extractelement <2 x float> %52, i32 1
  %55 = fcmp uno float %54, %53
  %56 = or i1 %55, %51
  br i1 %56, label %61, label %57

57:                                               ; preds = %21
  %58 = call { i64, i64 } @_ZN3gfx15ToEnclosingRectERKNS_5RectFE(%"class.gfx::RectF"* nonnull dereferenceable(16) %5) #10
  %59 = extractvalue { i64, i64 } %58, 0
  %60 = extractvalue { i64, i64 } %58, 1
  br label %61

61:                                               ; preds = %21, %57
  %62 = phi i64 [ %59, %57 ], [ 0, %21 ]
  %63 = phi i64 [ %60, %57 ], [ 0, %21 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %22) #10
  br label %64

64:                                               ; preds = %61, %8
  %65 = phi i64 [ %19, %8 ], [ %62, %61 ]
  %66 = phi i64 [ %20, %8 ], [ %63, %61 ]
  %67 = insertvalue { i64, i64 } undef, i64 %65, 0
  %68 = insertvalue { i64, i64 } %67, i64 %66, 1
  ret { i64, i64 } %68
}

; Function Attrs: nounwind ssp uwtable
define hidden { <2 x float>, <2 x float> } @_ZN2cc8MathUtil18ProjectClippedRectERKN3gfx9TransformERKNS1_5RectFE(%"class.gfx::Transform"* dereferenceable(68), %"class.gfx::RectF"* nocapture readonly dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"struct.cc::HomogeneousCoordinate", align 8
  %4 = alloca %"struct.cc::HomogeneousCoordinate", align 8
  %5 = alloca %"struct.cc::HomogeneousCoordinate", align 8
  %6 = alloca %"struct.cc::HomogeneousCoordinate", align 8
  %7 = alloca { <2 x float>, <2 x float> }, align 8
  %8 = bitcast { <2 x float>, <2 x float> }* %7 to %"struct.cc::HomogeneousCoordinate"*
  %9 = alloca { <2 x float>, <2 x float> }, align 8
  %10 = bitcast { <2 x float>, <2 x float> }* %9 to %"struct.cc::HomogeneousCoordinate"*
  %11 = alloca { <2 x float>, <2 x float> }, align 8
  %12 = bitcast { <2 x float>, <2 x float> }* %11 to %"struct.cc::HomogeneousCoordinate"*
  %13 = alloca { <2 x float>, <2 x float> }, align 8
  %14 = bitcast { <2 x float>, <2 x float> }* %13 to %"struct.cc::HomogeneousCoordinate"*
  %15 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %0, i64 0, i32 0, i32 1
  %16 = load i8, i8* %15, align 4
  %17 = icmp ult i8 %16, 2
  br i1 %17, label %18, label %35

18:                                               ; preds = %2
  %19 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %0, i64 0, i32 0, i32 0, i64 3, i64 0
  %20 = bitcast float* %19 to <2 x float>*
  %21 = load <2 x float>, <2 x float>* %20, align 4
  %22 = bitcast %"class.gfx::RectF"* %1 to <2 x float>*
  %23 = load <2 x float>, <2 x float>* %22, align 4
  %24 = fadd <2 x float> %21, %23
  %25 = getelementptr inbounds %"class.gfx::RectF", %"class.gfx::RectF"* %1, i64 0, i32 1, i32 0
  %26 = load float, float* %25, align 4
  %27 = getelementptr inbounds %"class.gfx::RectF", %"class.gfx::RectF"* %1, i64 0, i32 1, i32 1
  %28 = load float, float* %27, align 4
  %29 = fcmp ogt float %26, 0x3EB0000000000000
  %30 = select i1 %29, float %26, float 0.000000e+00
  %31 = insertelement <2 x float> undef, float %30, i32 0
  %32 = fcmp ogt float %28, 0x3EB0000000000000
  %33 = select i1 %32, float %28, float 0.000000e+00
  %34 = insertelement <2 x float> %31, float %33, i32 1
  br label %187

35:                                               ; preds = %2
  %36 = getelementptr inbounds %"class.gfx::RectF", %"class.gfx::RectF"* %1, i64 0, i32 0, i32 0
  %37 = load float, float* %36, align 4
  %38 = getelementptr inbounds %"class.gfx::RectF", %"class.gfx::RectF"* %1, i64 0, i32 0, i32 1
  %39 = load float, float* %38, align 4
  %40 = getelementptr inbounds %"class.gfx::RectF", %"class.gfx::RectF"* %1, i64 0, i32 1, i32 0
  %41 = load float, float* %40, align 4
  %42 = fadd float %37, %41
  %43 = getelementptr inbounds %"class.gfx::RectF", %"class.gfx::RectF"* %1, i64 0, i32 1, i32 1
  %44 = load float, float* %43, align 4
  %45 = fadd float %39, %44
  %46 = bitcast { <2 x float>, <2 x float> }* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %46) #10
  %47 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %0, i64 0, i32 0, i32 0, i64 0, i64 2
  %48 = bitcast { <2 x float>, <2 x float> }* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %48, i8 -1, i64 16, i1 false)
  %49 = load float, float* %47, align 4
  %50 = fmul float %37, %49
  %51 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %0, i64 0, i32 0, i32 0, i64 1, i64 2
  %52 = load float, float* %51, align 4
  %53 = fmul float %39, %52
  %54 = fadd float %50, %53
  %55 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %0, i64 0, i32 0, i32 0, i64 3, i64 2
  %56 = load float, float* %55, align 4
  %57 = fadd float %56, %54
  %58 = fsub float -0.000000e+00, %57
  %59 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %0, i64 0, i32 0, i32 0, i64 2, i64 2
  %60 = load float, float* %59, align 4
  %61 = fdiv float %58, %60
  %62 = tail call float @llvm.fabs.f32(float %61) #14
  %63 = fcmp ueq float %62, 0x7FF0000000000000
  br i1 %63, label %80, label %64

64:                                               ; preds = %35
  %65 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %0, i64 0, i32 0
  %66 = bitcast %"struct.cc::HomogeneousCoordinate"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %66) #10
  %67 = getelementptr inbounds %"struct.cc::HomogeneousCoordinate", %"struct.cc::HomogeneousCoordinate"* %3, i64 0, i32 0, i64 0
  %68 = getelementptr inbounds %"struct.cc::HomogeneousCoordinate", %"struct.cc::HomogeneousCoordinate"* %3, i64 0, i32 0, i64 1
  %69 = getelementptr inbounds %"struct.cc::HomogeneousCoordinate", %"struct.cc::HomogeneousCoordinate"* %3, i64 0, i32 0, i64 2
  %70 = getelementptr inbounds %"struct.cc::HomogeneousCoordinate", %"struct.cc::HomogeneousCoordinate"* %3, i64 0, i32 0, i64 3
  store float %37, float* %67, align 8
  store float %39, float* %68, align 4
  store float %61, float* %69, align 8
  store float 1.000000e+00, float* %70, align 4
  call void @_ZNK10SkMatrix4410mapScalarsEPKfPf(%class.SkMatrix44* %65, float* nonnull %67, float* nonnull %67) #10
  %71 = bitcast %"struct.cc::HomogeneousCoordinate"* %3 to <2 x float>*
  %72 = load <2 x float>, <2 x float>* %71, align 8
  %73 = bitcast float* %69 to <2 x float>*
  %74 = load <2 x float>, <2 x float>* %73, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %66) #10
  %75 = load float, float* %47, align 4
  %76 = load float, float* %51, align 4
  %77 = load float, float* %55, align 4
  %78 = load float, float* %59, align 4
  %79 = fmul float %39, %76
  br label %80

80:                                               ; preds = %35, %64
  %81 = phi float [ %53, %35 ], [ %79, %64 ]
  %82 = phi float [ %60, %35 ], [ %78, %64 ]
  %83 = phi float [ %56, %35 ], [ %77, %64 ]
  %84 = phi float [ %52, %35 ], [ %76, %64 ]
  %85 = phi float [ %49, %35 ], [ %75, %64 ]
  %86 = phi <2 x float> [ <float 0.000000e+00, float 1.000000e+00>, %35 ], [ %74, %64 ]
  %87 = phi <2 x float> [ zeroinitializer, %35 ], [ %72, %64 ]
  %88 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %7, i64 0, i32 0
  store <2 x float> %87, <2 x float>* %88, align 8
  %89 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %7, i64 0, i32 1
  store <2 x float> %86, <2 x float>* %89, align 8
  %90 = bitcast { <2 x float>, <2 x float> }* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %90) #10
  %91 = fmul float %42, %85
  %92 = fadd float %91, %81
  %93 = fadd float %83, %92
  %94 = fsub float -0.000000e+00, %93
  %95 = fdiv float %94, %82
  %96 = call float @llvm.fabs.f32(float %95) #14
  %97 = fcmp ueq float %96, 0x7FF0000000000000
  %98 = bitcast { <2 x float>, <2 x float> }* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %98, i8 -1, i64 16, i1 false)
  br i1 %97, label %115, label %99

99:                                               ; preds = %80
  %100 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %0, i64 0, i32 0
  %101 = bitcast %"struct.cc::HomogeneousCoordinate"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %101) #10
  %102 = getelementptr inbounds %"struct.cc::HomogeneousCoordinate", %"struct.cc::HomogeneousCoordinate"* %4, i64 0, i32 0, i64 0
  %103 = getelementptr inbounds %"struct.cc::HomogeneousCoordinate", %"struct.cc::HomogeneousCoordinate"* %4, i64 0, i32 0, i64 1
  %104 = getelementptr inbounds %"struct.cc::HomogeneousCoordinate", %"struct.cc::HomogeneousCoordinate"* %4, i64 0, i32 0, i64 2
  %105 = getelementptr inbounds %"struct.cc::HomogeneousCoordinate", %"struct.cc::HomogeneousCoordinate"* %4, i64 0, i32 0, i64 3
  store float %42, float* %102, align 8
  store float %39, float* %103, align 4
  store float %95, float* %104, align 8
  store float 1.000000e+00, float* %105, align 4
  call void @_ZNK10SkMatrix4410mapScalarsEPKfPf(%class.SkMatrix44* %100, float* nonnull %102, float* nonnull %102) #10
  %106 = bitcast %"struct.cc::HomogeneousCoordinate"* %4 to <2 x float>*
  %107 = load <2 x float>, <2 x float>* %106, align 8
  %108 = bitcast float* %104 to <2 x float>*
  %109 = load <2 x float>, <2 x float>* %108, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %101) #10
  %110 = load float, float* %47, align 4
  %111 = load float, float* %51, align 4
  %112 = load float, float* %55, align 4
  %113 = load float, float* %59, align 4
  %114 = fmul float %42, %110
  br label %115

115:                                              ; preds = %80, %99
  %116 = phi float [ %91, %80 ], [ %114, %99 ]
  %117 = phi float [ %82, %80 ], [ %113, %99 ]
  %118 = phi float [ %83, %80 ], [ %112, %99 ]
  %119 = phi float [ %84, %80 ], [ %111, %99 ]
  %120 = phi float [ %85, %80 ], [ %110, %99 ]
  %121 = phi <2 x float> [ <float 0.000000e+00, float 1.000000e+00>, %80 ], [ %109, %99 ]
  %122 = phi <2 x float> [ zeroinitializer, %80 ], [ %107, %99 ]
  %123 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %9, i64 0, i32 0
  store <2 x float> %122, <2 x float>* %123, align 8
  %124 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %9, i64 0, i32 1
  store <2 x float> %121, <2 x float>* %124, align 8
  %125 = bitcast { <2 x float>, <2 x float> }* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %125) #10
  %126 = fmul float %45, %119
  %127 = fadd float %116, %126
  %128 = fadd float %118, %127
  %129 = fsub float -0.000000e+00, %128
  %130 = fdiv float %129, %117
  %131 = call float @llvm.fabs.f32(float %130) #14
  %132 = fcmp ueq float %131, 0x7FF0000000000000
  %133 = bitcast { <2 x float>, <2 x float> }* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %133, i8 -1, i64 16, i1 false)
  br i1 %132, label %150, label %134

134:                                              ; preds = %115
  %135 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %0, i64 0, i32 0
  %136 = bitcast %"struct.cc::HomogeneousCoordinate"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %136) #10
  %137 = getelementptr inbounds %"struct.cc::HomogeneousCoordinate", %"struct.cc::HomogeneousCoordinate"* %5, i64 0, i32 0, i64 0
  %138 = getelementptr inbounds %"struct.cc::HomogeneousCoordinate", %"struct.cc::HomogeneousCoordinate"* %5, i64 0, i32 0, i64 1
  %139 = getelementptr inbounds %"struct.cc::HomogeneousCoordinate", %"struct.cc::HomogeneousCoordinate"* %5, i64 0, i32 0, i64 2
  %140 = getelementptr inbounds %"struct.cc::HomogeneousCoordinate", %"struct.cc::HomogeneousCoordinate"* %5, i64 0, i32 0, i64 3
  store float %42, float* %137, align 8
  store float %45, float* %138, align 4
  store float %130, float* %139, align 8
  store float 1.000000e+00, float* %140, align 4
  call void @_ZNK10SkMatrix4410mapScalarsEPKfPf(%class.SkMatrix44* %135, float* nonnull %137, float* nonnull %137) #10
  %141 = bitcast %"struct.cc::HomogeneousCoordinate"* %5 to <2 x float>*
  %142 = load <2 x float>, <2 x float>* %141, align 8
  %143 = bitcast float* %139 to <2 x float>*
  %144 = load <2 x float>, <2 x float>* %143, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %136) #10
  %145 = load float, float* %47, align 4
  %146 = load float, float* %51, align 4
  %147 = load float, float* %55, align 4
  %148 = load float, float* %59, align 4
  %149 = fmul float %45, %146
  br label %150

150:                                              ; preds = %115, %134
  %151 = phi float [ %126, %115 ], [ %149, %134 ]
  %152 = phi float [ %117, %115 ], [ %148, %134 ]
  %153 = phi float [ %118, %115 ], [ %147, %134 ]
  %154 = phi float [ %120, %115 ], [ %145, %134 ]
  %155 = phi <2 x float> [ <float 0.000000e+00, float 1.000000e+00>, %115 ], [ %144, %134 ]
  %156 = phi <2 x float> [ zeroinitializer, %115 ], [ %142, %134 ]
  %157 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %11, i64 0, i32 0
  store <2 x float> %156, <2 x float>* %157, align 8
  %158 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %11, i64 0, i32 1
  store <2 x float> %155, <2 x float>* %158, align 8
  %159 = bitcast { <2 x float>, <2 x float> }* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %159) #10
  %160 = fmul float %37, %154
  %161 = fadd float %160, %151
  %162 = fadd float %153, %161
  %163 = fsub float -0.000000e+00, %162
  %164 = fdiv float %163, %152
  %165 = call float @llvm.fabs.f32(float %164) #14
  %166 = fcmp ueq float %165, 0x7FF0000000000000
  %167 = bitcast { <2 x float>, <2 x float> }* %13 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %167, i8 -1, i64 16, i1 false)
  br i1 %166, label %179, label %168

168:                                              ; preds = %150
  %169 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %0, i64 0, i32 0
  %170 = bitcast %"struct.cc::HomogeneousCoordinate"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %170) #10
  %171 = getelementptr inbounds %"struct.cc::HomogeneousCoordinate", %"struct.cc::HomogeneousCoordinate"* %6, i64 0, i32 0, i64 0
  %172 = getelementptr inbounds %"struct.cc::HomogeneousCoordinate", %"struct.cc::HomogeneousCoordinate"* %6, i64 0, i32 0, i64 1
  %173 = getelementptr inbounds %"struct.cc::HomogeneousCoordinate", %"struct.cc::HomogeneousCoordinate"* %6, i64 0, i32 0, i64 2
  %174 = getelementptr inbounds %"struct.cc::HomogeneousCoordinate", %"struct.cc::HomogeneousCoordinate"* %6, i64 0, i32 0, i64 3
  store float %37, float* %171, align 8
  store float %45, float* %172, align 4
  store float %164, float* %173, align 8
  store float 1.000000e+00, float* %174, align 4
  call void @_ZNK10SkMatrix4410mapScalarsEPKfPf(%class.SkMatrix44* %169, float* nonnull %171, float* nonnull %171) #10
  %175 = bitcast %"struct.cc::HomogeneousCoordinate"* %6 to <2 x float>*
  %176 = load <2 x float>, <2 x float>* %175, align 8
  %177 = bitcast float* %173 to <2 x float>*
  %178 = load <2 x float>, <2 x float>* %177, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %170) #10
  br label %179

179:                                              ; preds = %150, %168
  %180 = phi <2 x float> [ %178, %168 ], [ <float 0.000000e+00, float 1.000000e+00>, %150 ]
  %181 = phi <2 x float> [ %176, %168 ], [ zeroinitializer, %150 ]
  %182 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %13, i64 0, i32 0
  store <2 x float> %181, <2 x float>* %182, align 8
  %183 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %13, i64 0, i32 1
  store <2 x float> %180, <2 x float>* %183, align 8
  %184 = call { <2 x float>, <2 x float> } @_ZN2cc8MathUtil27ComputeEnclosingClippedRectERKNS_21HomogeneousCoordinateES3_S3_S3_(%"struct.cc::HomogeneousCoordinate"* nonnull dereferenceable(16) %8, %"struct.cc::HomogeneousCoordinate"* nonnull dereferenceable(16) %10, %"struct.cc::HomogeneousCoordinate"* nonnull dereferenceable(16) %12, %"struct.cc::HomogeneousCoordinate"* nonnull dereferenceable(16) %14)
  %185 = extractvalue { <2 x float>, <2 x float> } %184, 0
  %186 = extractvalue { <2 x float>, <2 x float> } %184, 1
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %159) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %125) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %90) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %46) #10
  br label %187

187:                                              ; preds = %179, %18
  %188 = phi <2 x float> [ %24, %18 ], [ %185, %179 ]
  %189 = phi <2 x float> [ %34, %18 ], [ %186, %179 ]
  %190 = insertvalue { <2 x float>, <2 x float> } undef, <2 x float> %188, 0
  %191 = insertvalue { <2 x float>, <2 x float> } %190, <2 x float> %189, 1
  ret { <2 x float>, <2 x float> } %191
}

declare { i64, i64 } @_ZN3gfx15ToEnclosingRectERKNS_5RectFE(%"class.gfx::RectF"* dereferenceable(16)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc8MathUtil26InverseMapQuadToLocalSpaceERKN3gfx9TransformERKNS1_5QuadFE(%"class.gfx::QuadF"* noalias sret, %"class.gfx::Transform"* dereferenceable(68), %"class.gfx::QuadF"* nocapture readonly dereferenceable(32)) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.gfx::Transform", align 4
  %5 = alloca i8, align 1
  %6 = bitcast %"class.gfx::Transform"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 68, i8* nonnull %6) #10
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %6, i8* align 4 bitcast (%"class.gfx::Transform"* @__const._ZN2cc8MathUtil26InverseMapQuadToLocalSpaceERKN3gfx9TransformERKNS1_5QuadFE.inverse_device_transform to i8*), i64 68, i1 false)
  %7 = call zeroext i1 @_ZNK3gfx9Transform10GetInverseEPS0_(%"class.gfx::Transform"* %1, %"class.gfx::Transform"* nonnull %4) #10
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %5) #10
  store i8 0, i8* %5, align 1
  %8 = bitcast %"class.gfx::QuadF"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %8, i8 -1, i64 32, i1 false)
  call void @_ZN2cc8MathUtil7MapQuadERKN3gfx9TransformERKNS1_5QuadFEPb(%"class.gfx::QuadF"* sret %0, %"class.gfx::Transform"* nonnull dereferenceable(68) %4, %"class.gfx::QuadF"* dereferenceable(32) %2, i8* nonnull %5)
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %5) #10
  call void @llvm.lifetime.end.p0i8(i64 68, i8* nonnull %6) #10
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

declare zeroext i1 @_ZNK3gfx9Transform10GetInverseEPS0_(%"class.gfx::Transform"*, %"class.gfx::Transform"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc8MathUtil7MapQuadERKN3gfx9TransformERKNS1_5QuadFEPb(%"class.gfx::QuadF"* noalias sret, %"class.gfx::Transform"* dereferenceable(68), %"class.gfx::QuadF"* nocapture readonly dereferenceable(32), i8* nocapture) local_unnamed_addr #4 align 2 {
  %5 = alloca { <2 x float>, <2 x float> }, align 8
  %6 = alloca { <2 x float>, <2 x float> }, align 8
  %7 = alloca { <2 x float>, <2 x float> }, align 8
  %8 = alloca { <2 x float>, <2 x float> }, align 8
  %9 = alloca %"class.gfx::Vector2dF", align 4
  %10 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %1, i64 0, i32 0, i32 1
  %11 = load i8, i8* %10, align 4
  %12 = icmp ult i8 %11, 2
  br i1 %12, label %13, label %26

13:                                               ; preds = %4
  %14 = bitcast %"class.gfx::QuadF"* %0 to i8*
  %15 = bitcast %"class.gfx::QuadF"* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %14, i8* align 4 %15, i64 32, i1 false)
  %16 = bitcast %"class.gfx::Vector2dF"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #10
  %17 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %1, i64 0, i32 0, i32 0, i64 3, i64 0
  %18 = bitcast float* %17 to i32*
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %1, i64 0, i32 0, i32 0, i64 3, i64 1
  %21 = bitcast float* %20 to i32*
  %22 = load i32, i32* %21, align 4
  %23 = bitcast %"class.gfx::Vector2dF"* %9 to i32*
  store i32 %19, i32* %23, align 4
  %24 = getelementptr inbounds %"class.gfx::Vector2dF", %"class.gfx::Vector2dF"* %9, i64 0, i32 1
  %25 = bitcast float* %24 to i32*
  store i32 %22, i32* %25, align 4
  call void @_ZN3gfx5QuadFpLERKNS_9Vector2dFE(%"class.gfx::QuadF"* %0, %"class.gfx::Vector2dF"* nonnull dereferenceable(8) %9) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #10
  store i8 0, i8* %3, align 1
  br label %201

26:                                               ; preds = %4
  %27 = bitcast %"class.gfx::QuadF"* %2 to i32*
  %28 = load i32, i32* %27, align 4
  %29 = getelementptr inbounds %"class.gfx::QuadF", %"class.gfx::QuadF"* %2, i64 0, i32 0, i32 1
  %30 = bitcast float* %29 to i32*
  %31 = load i32, i32* %30, align 4
  %32 = bitcast { <2 x float>, <2 x float> }* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %32)
  %33 = bitcast { <2 x float>, <2 x float> }* %5 to %"struct.cc::HomogeneousCoordinate"*
  %34 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %5, i64 0, i32 0, i64 0
  %35 = getelementptr inbounds %"struct.cc::HomogeneousCoordinate", %"struct.cc::HomogeneousCoordinate"* %33, i64 0, i32 0, i64 1
  %36 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %5, i64 0, i32 1, i64 0
  %37 = getelementptr inbounds %"struct.cc::HomogeneousCoordinate", %"struct.cc::HomogeneousCoordinate"* %33, i64 0, i32 0, i64 3
  %38 = bitcast { <2 x float>, <2 x float> }* %5 to i32*
  store i32 %28, i32* %38, align 8
  %39 = bitcast float* %35 to i32*
  store i32 %31, i32* %39, align 4
  %40 = bitcast float* %36 to i32*
  store i32 0, i32* %40, align 8
  store float 1.000000e+00, float* %37, align 4
  %41 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %1, i64 0, i32 0
  call void @_ZNK10SkMatrix4410mapScalarsEPKfPf(%class.SkMatrix44* %41, float* nonnull %34, float* nonnull %34) #10
  %42 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %5, i64 0, i32 0
  %43 = load <2 x float>, <2 x float>* %42, align 8
  %44 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %5, i64 0, i32 1
  %45 = load <2 x float>, <2 x float>* %44, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %32)
  %46 = getelementptr inbounds %"class.gfx::QuadF", %"class.gfx::QuadF"* %2, i64 0, i32 1
  %47 = bitcast %"class.gfx::PointF"* %46 to i32*
  %48 = load i32, i32* %47, align 4
  %49 = getelementptr inbounds %"class.gfx::QuadF", %"class.gfx::QuadF"* %2, i64 0, i32 1, i32 1
  %50 = bitcast float* %49 to i32*
  %51 = load i32, i32* %50, align 4
  %52 = bitcast { <2 x float>, <2 x float> }* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %52)
  %53 = bitcast { <2 x float>, <2 x float> }* %6 to %"struct.cc::HomogeneousCoordinate"*
  %54 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %6, i64 0, i32 0, i64 0
  %55 = getelementptr inbounds %"struct.cc::HomogeneousCoordinate", %"struct.cc::HomogeneousCoordinate"* %53, i64 0, i32 0, i64 1
  %56 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %6, i64 0, i32 1, i64 0
  %57 = getelementptr inbounds %"struct.cc::HomogeneousCoordinate", %"struct.cc::HomogeneousCoordinate"* %53, i64 0, i32 0, i64 3
  %58 = bitcast { <2 x float>, <2 x float> }* %6 to i32*
  store i32 %48, i32* %58, align 8
  %59 = bitcast float* %55 to i32*
  store i32 %51, i32* %59, align 4
  %60 = bitcast float* %56 to i32*
  store i32 0, i32* %60, align 8
  store float 1.000000e+00, float* %57, align 4
  call void @_ZNK10SkMatrix4410mapScalarsEPKfPf(%class.SkMatrix44* %41, float* nonnull %54, float* nonnull %54) #10
  %61 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %6, i64 0, i32 0
  %62 = load <2 x float>, <2 x float>* %61, align 8
  %63 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %6, i64 0, i32 1
  %64 = load <2 x float>, <2 x float>* %63, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %52)
  %65 = getelementptr inbounds %"class.gfx::QuadF", %"class.gfx::QuadF"* %2, i64 0, i32 2
  %66 = bitcast %"class.gfx::PointF"* %65 to i32*
  %67 = load i32, i32* %66, align 4
  %68 = getelementptr inbounds %"class.gfx::QuadF", %"class.gfx::QuadF"* %2, i64 0, i32 2, i32 1
  %69 = bitcast float* %68 to i32*
  %70 = load i32, i32* %69, align 4
  %71 = bitcast { <2 x float>, <2 x float> }* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %71)
  %72 = bitcast { <2 x float>, <2 x float> }* %7 to %"struct.cc::HomogeneousCoordinate"*
  %73 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %7, i64 0, i32 0, i64 0
  %74 = getelementptr inbounds %"struct.cc::HomogeneousCoordinate", %"struct.cc::HomogeneousCoordinate"* %72, i64 0, i32 0, i64 1
  %75 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %7, i64 0, i32 1, i64 0
  %76 = getelementptr inbounds %"struct.cc::HomogeneousCoordinate", %"struct.cc::HomogeneousCoordinate"* %72, i64 0, i32 0, i64 3
  %77 = bitcast { <2 x float>, <2 x float> }* %7 to i32*
  store i32 %67, i32* %77, align 8
  %78 = bitcast float* %74 to i32*
  store i32 %70, i32* %78, align 4
  %79 = bitcast float* %75 to i32*
  store i32 0, i32* %79, align 8
  store float 1.000000e+00, float* %76, align 4
  call void @_ZNK10SkMatrix4410mapScalarsEPKfPf(%class.SkMatrix44* %41, float* nonnull %73, float* nonnull %73) #10
  %80 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %7, i64 0, i32 0
  %81 = load <2 x float>, <2 x float>* %80, align 8
  %82 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %7, i64 0, i32 1
  %83 = load <2 x float>, <2 x float>* %82, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %71)
  %84 = getelementptr inbounds %"class.gfx::QuadF", %"class.gfx::QuadF"* %2, i64 0, i32 3
  %85 = bitcast %"class.gfx::PointF"* %84 to i32*
  %86 = load i32, i32* %85, align 4
  %87 = getelementptr inbounds %"class.gfx::QuadF", %"class.gfx::QuadF"* %2, i64 0, i32 3, i32 1
  %88 = bitcast float* %87 to i32*
  %89 = load i32, i32* %88, align 4
  %90 = bitcast { <2 x float>, <2 x float> }* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %90)
  %91 = bitcast { <2 x float>, <2 x float> }* %8 to %"struct.cc::HomogeneousCoordinate"*
  %92 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %8, i64 0, i32 0, i64 0
  %93 = getelementptr inbounds %"struct.cc::HomogeneousCoordinate", %"struct.cc::HomogeneousCoordinate"* %91, i64 0, i32 0, i64 1
  %94 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %8, i64 0, i32 1, i64 0
  %95 = getelementptr inbounds %"struct.cc::HomogeneousCoordinate", %"struct.cc::HomogeneousCoordinate"* %91, i64 0, i32 0, i64 3
  %96 = bitcast { <2 x float>, <2 x float> }* %8 to i32*
  store i32 %86, i32* %96, align 8
  %97 = bitcast float* %93 to i32*
  store i32 %89, i32* %97, align 4
  %98 = bitcast float* %94 to i32*
  store i32 0, i32* %98, align 8
  store float 1.000000e+00, float* %95, align 4
  call void @_ZNK10SkMatrix4410mapScalarsEPKfPf(%class.SkMatrix44* %41, float* nonnull %92, float* nonnull %92) #10
  %99 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %8, i64 0, i32 0
  %100 = load <2 x float>, <2 x float>* %99, align 8
  %101 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %8, i64 0, i32 1
  %102 = load <2 x float>, <2 x float>* %101, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %90)
  %103 = extractelement <2 x float> %45, i32 1
  %104 = fcmp ole float %103, 0.000000e+00
  %105 = extractelement <2 x float> %64, i32 1
  %106 = fcmp ole float %105, 0.000000e+00
  %107 = or i1 %104, %106
  %108 = extractelement <2 x float> %83, i32 1
  %109 = fcmp ole float %108, 0.000000e+00
  %110 = or i1 %107, %109
  br i1 %110, label %115, label %111

111:                                              ; preds = %26
  %112 = extractelement <2 x float> %102, i32 1
  %113 = fcmp ole float %112, 0.000000e+00
  %114 = zext i1 %113 to i8
  br label %115

115:                                              ; preds = %111, %26
  %116 = phi i8 [ 1, %26 ], [ %114, %111 ]
  store i8 %116, i8* %3, align 1
  %117 = fcmp oeq float %103, 1.000000e+00
  br i1 %117, label %134, label %118

118:                                              ; preds = %115
  %119 = fdiv float 1.000000e+00, %103
  %120 = extractelement <2 x float> %43, i32 0
  %121 = fmul float %120, %119
  %122 = fcmp olt float %121, -1.000000e+06
  %123 = select i1 %122, float -1.000000e+06, float %121
  %124 = fcmp ogt float %123, 1.000000e+06
  %125 = select i1 %124, float 1.000000e+06, float %123
  %126 = extractelement <2 x float> %43, i32 1
  %127 = fmul float %126, %119
  %128 = fcmp olt float %127, -1.000000e+06
  %129 = select i1 %128, float -1.000000e+06, float %127
  %130 = fcmp ogt float %129, 1.000000e+06
  %131 = select i1 %130, float 1.000000e+06, float %129
  %132 = insertelement <2 x float> undef, float %125, i32 0
  %133 = insertelement <2 x float> %132, float %131, i32 1
  br label %134

134:                                              ; preds = %115, %118
  %135 = phi <2 x float> [ %133, %118 ], [ %43, %115 ]
  %136 = fcmp oeq float %105, 1.000000e+00
  br i1 %136, label %153, label %137

137:                                              ; preds = %134
  %138 = fdiv float 1.000000e+00, %105
  %139 = extractelement <2 x float> %62, i32 0
  %140 = fmul float %139, %138
  %141 = fcmp olt float %140, -1.000000e+06
  %142 = select i1 %141, float -1.000000e+06, float %140
  %143 = fcmp ogt float %142, 1.000000e+06
  %144 = select i1 %143, float 1.000000e+06, float %142
  %145 = extractelement <2 x float> %62, i32 1
  %146 = fmul float %145, %138
  %147 = fcmp olt float %146, -1.000000e+06
  %148 = select i1 %147, float -1.000000e+06, float %146
  %149 = fcmp ogt float %148, 1.000000e+06
  %150 = select i1 %149, float 1.000000e+06, float %148
  %151 = insertelement <2 x float> undef, float %144, i32 0
  %152 = insertelement <2 x float> %151, float %150, i32 1
  br label %153

153:                                              ; preds = %134, %137
  %154 = phi <2 x float> [ %152, %137 ], [ %62, %134 ]
  %155 = fcmp oeq float %108, 1.000000e+00
  br i1 %155, label %172, label %156

156:                                              ; preds = %153
  %157 = fdiv float 1.000000e+00, %108
  %158 = extractelement <2 x float> %81, i32 0
  %159 = fmul float %158, %157
  %160 = fcmp olt float %159, -1.000000e+06
  %161 = select i1 %160, float -1.000000e+06, float %159
  %162 = fcmp ogt float %161, 1.000000e+06
  %163 = select i1 %162, float 1.000000e+06, float %161
  %164 = extractelement <2 x float> %81, i32 1
  %165 = fmul float %164, %157
  %166 = fcmp olt float %165, -1.000000e+06
  %167 = select i1 %166, float -1.000000e+06, float %165
  %168 = fcmp ogt float %167, 1.000000e+06
  %169 = select i1 %168, float 1.000000e+06, float %167
  %170 = insertelement <2 x float> undef, float %163, i32 0
  %171 = insertelement <2 x float> %170, float %169, i32 1
  br label %172

172:                                              ; preds = %153, %156
  %173 = phi <2 x float> [ %171, %156 ], [ %81, %153 ]
  %174 = extractelement <2 x float> %102, i32 1
  %175 = fcmp oeq float %174, 1.000000e+00
  br i1 %175, label %192, label %176

176:                                              ; preds = %172
  %177 = fdiv float 1.000000e+00, %174
  %178 = extractelement <2 x float> %100, i32 0
  %179 = fmul float %178, %177
  %180 = fcmp olt float %179, -1.000000e+06
  %181 = select i1 %180, float -1.000000e+06, float %179
  %182 = fcmp ogt float %181, 1.000000e+06
  %183 = select i1 %182, float 1.000000e+06, float %181
  %184 = extractelement <2 x float> %100, i32 1
  %185 = fmul float %184, %177
  %186 = fcmp olt float %185, -1.000000e+06
  %187 = select i1 %186, float -1.000000e+06, float %185
  %188 = fcmp ogt float %187, 1.000000e+06
  %189 = select i1 %188, float 1.000000e+06, float %187
  %190 = insertelement <2 x float> undef, float %183, i32 0
  %191 = insertelement <2 x float> %190, float %189, i32 1
  br label %192

192:                                              ; preds = %172, %176
  %193 = phi <2 x float> [ %191, %176 ], [ %100, %172 ]
  %194 = bitcast %"class.gfx::QuadF"* %0 to <2 x float>*
  store <2 x float> %135, <2 x float>* %194, align 4
  %195 = getelementptr inbounds %"class.gfx::QuadF", %"class.gfx::QuadF"* %0, i64 0, i32 1
  %196 = bitcast %"class.gfx::PointF"* %195 to <2 x float>*
  store <2 x float> %154, <2 x float>* %196, align 4
  %197 = getelementptr inbounds %"class.gfx::QuadF", %"class.gfx::QuadF"* %0, i64 0, i32 2
  %198 = bitcast %"class.gfx::PointF"* %197 to <2 x float>*
  store <2 x float> %173, <2 x float>* %198, align 4
  %199 = getelementptr inbounds %"class.gfx::QuadF", %"class.gfx::QuadF"* %0, i64 0, i32 3
  %200 = bitcast %"class.gfx::PointF"* %199 to <2 x float>*
  store <2 x float> %193, <2 x float>* %200, align 4
  br label %201

201:                                              ; preds = %192, %13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden { i64, i64 } @_ZN2cc8MathUtil41MapEnclosedRectWith2dAxisAlignedTransformERKN3gfx9TransformERKNS1_4RectE(%"class.gfx::Transform"* dereferenceable(68), %"class.gfx::Rect"* dereferenceable(16)) local_unnamed_addr #4 align 2 {
  %3 = alloca %"class.gfx::Vector2d", align 4
  %4 = alloca { <2 x float>, <2 x float> }, align 8
  %5 = bitcast { <2 x float>, <2 x float> }* %4 to %"class.gfx::RectF"*
  %6 = alloca [4 x float], align 16
  %7 = alloca [8 x float], align 16
  %8 = alloca <2 x float>, align 8
  %9 = bitcast <2 x float>* %8 to %"class.gfx::PointF"*
  %10 = alloca <2 x float>, align 8
  %11 = bitcast <2 x float>* %10 to %"class.gfx::PointF"*
  %12 = alloca { <2 x float>, <2 x float> }, align 8
  %13 = bitcast { <2 x float>, <2 x float> }* %12 to %"class.gfx::RectF"*
  %14 = tail call zeroext i1 @_ZNK3gfx9Transform30IsIdentityOrIntegerTranslationEv(%"class.gfx::Transform"* %0) #10
  br i1 %14, label %15, label %28

15:                                               ; preds = %2
  %16 = bitcast %"class.gfx::Vector2d"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #10
  %17 = getelementptr inbounds %"class.gfx::Vector2d", %"class.gfx::Vector2d"* %3, i64 0, i32 0
  %18 = getelementptr inbounds %"class.gfx::Vector2d", %"class.gfx::Vector2d"* %3, i64 0, i32 1
  %19 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %0, i64 0, i32 0, i32 0, i64 3, i64 0
  %20 = load float, float* %19, align 4
  %21 = fptosi float %20 to i32
  %22 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %0, i64 0, i32 0, i32 0, i64 3, i64 1
  %23 = load float, float* %22, align 4
  %24 = fptosi float %23 to i32
  store i32 %21, i32* %17, align 4
  store i32 %24, i32* %18, align 4
  %25 = call { i64, i64 } @_ZN3gfxplERKNS_4RectERKNS_8Vector2dE(%"class.gfx::Rect"* dereferenceable(16) %1, %"class.gfx::Vector2d"* nonnull dereferenceable(8) %3) #10
  %26 = extractvalue { i64, i64 } %25, 0
  %27 = extractvalue { i64, i64 } %25, 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #10
  br label %153

28:                                               ; preds = %2
  %29 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %0, i64 0, i32 0, i32 1
  %30 = load i8, i8* %29, align 4
  %31 = icmp ult i8 %30, 2
  br i1 %31, label %32, label %67

32:                                               ; preds = %28
  %33 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %0, i64 0, i32 0, i32 0, i64 3, i64 0
  %34 = load float, float* %33, align 4
  %35 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %0, i64 0, i32 0, i32 0, i64 3, i64 1
  %36 = load float, float* %35, align 4
  %37 = bitcast { <2 x float>, <2 x float> }* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %37) #10
  %38 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 0, i32 0
  %39 = load i32, i32* %38, align 4
  %40 = sitofp i32 %39 to float
  %41 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 0, i32 1
  %42 = load i32, i32* %41, align 4
  %43 = sitofp i32 %42 to float
  %44 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 1, i32 0
  %45 = load i32, i32* %44, align 4
  %46 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 1, i32 1
  %47 = load i32, i32* %46, align 4
  %48 = icmp sgt i32 %45, 0
  %49 = select i1 %48, i32 %45, i32 0
  %50 = sitofp i32 %49 to float
  %51 = icmp sgt i32 %47, 0
  %52 = select i1 %51, i32 %47, i32 0
  %53 = sitofp i32 %52 to float
  %54 = fadd float %34, %40
  %55 = fadd float %36, %43
  %56 = insertelement <2 x float> undef, float %54, i32 0
  %57 = insertelement <2 x float> %56, float %55, i32 1
  %58 = select i1 %48, float %50, float 0.000000e+00
  %59 = insertelement <2 x float> undef, float %58, i32 0
  %60 = select i1 %51, float %53, float 0.000000e+00
  %61 = insertelement <2 x float> %59, float %60, i32 1
  %62 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %4, i64 0, i32 0
  store <2 x float> %57, <2 x float>* %62, align 8
  %63 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %4, i64 0, i32 1
  store <2 x float> %61, <2 x float>* %63, align 8
  %64 = call { i64, i64 } @_ZN3gfx14ToEnclosedRectERKNS_5RectFE(%"class.gfx::RectF"* nonnull dereferenceable(16) %5) #10
  %65 = extractvalue { i64, i64 } %64, 0
  %66 = extractvalue { i64, i64 } %64, 1
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %37) #10
  br label %153

67:                                               ; preds = %28
  %68 = bitcast [4 x float]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %68) #10
  %69 = getelementptr inbounds [4 x float], [4 x float]* %6, i64 0, i64 0
  %70 = getelementptr inbounds [4 x float], [4 x float]* %6, i64 0, i64 1
  %71 = getelementptr inbounds [4 x float], [4 x float]* %6, i64 0, i64 2
  %72 = getelementptr inbounds [4 x float], [4 x float]* %6, i64 0, i64 3
  %73 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 0, i32 0
  %74 = load i32, i32* %73, align 4
  %75 = sitofp i32 %74 to float
  store float %75, float* %69, align 16
  %76 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 0, i32 1
  %77 = load i32, i32* %76, align 4
  %78 = sitofp i32 %77 to float
  store float %78, float* %70, align 4
  %79 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 1, i32 0
  %80 = load i32, i32* %79, align 4
  %81 = add nsw i32 %80, %74
  %82 = sitofp i32 %81 to float
  store float %82, float* %71, align 8
  %83 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 1, i32 1
  %84 = load i32, i32* %83, align 4
  %85 = add nsw i32 %84, %77
  %86 = sitofp i32 %85 to float
  store float %86, float* %72, align 4
  %87 = bitcast [8 x float]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %87) #10
  %88 = getelementptr inbounds [8 x float], [8 x float]* %7, i64 0, i64 0
  %89 = getelementptr inbounds [8 x float], [8 x float]* %7, i64 0, i64 1
  %90 = getelementptr inbounds [8 x float], [8 x float]* %7, i64 0, i64 3
  %91 = getelementptr inbounds [8 x float], [8 x float]* %7, i64 0, i64 4
  %92 = getelementptr inbounds [8 x float], [8 x float]* %7, i64 0, i64 5
  %93 = getelementptr inbounds [8 x float], [8 x float]* %7, i64 0, i64 7
  %94 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %0, i64 0, i32 0
  %95 = bitcast [8 x float]* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %95, i8 -1, i64 32, i1 false)
  call void @_ZNK10SkMatrix444map2EPKfiPf(%class.SkMatrix44* %94, float* nonnull %69, i32 2, float* nonnull %88) #10
  %96 = load float, float* %88, align 16
  %97 = load float, float* %89, align 4
  %98 = load float, float* %90, align 4
  %99 = load float, float* %91, align 16
  %100 = load float, float* %92, align 4
  %101 = load float, float* %93, align 4
  %102 = bitcast <2 x float>* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %102) #10
  %103 = getelementptr inbounds <2 x float>, <2 x float>* %8, i64 0, i64 0
  store float 0xFFFFFFFFE0000000, float* %103, align 8
  %104 = getelementptr inbounds %"class.gfx::PointF", %"class.gfx::PointF"* %9, i64 0, i32 1
  store float 0xFFFFFFFFE0000000, float* %104, align 4
  %105 = fcmp oeq float %98, 1.000000e+00
  br i1 %105, label %118, label %106

106:                                              ; preds = %67
  %107 = fdiv float 1.000000e+00, %98
  %108 = fmul float %96, %107
  %109 = fcmp olt float %108, -1.000000e+06
  %110 = select i1 %109, float -1.000000e+06, float %108
  %111 = fcmp ogt float %110, 1.000000e+06
  %112 = select i1 %111, float 1.000000e+06, float %110
  %113 = fmul float %97, %107
  %114 = fcmp olt float %113, -1.000000e+06
  %115 = select i1 %114, float -1.000000e+06, float %113
  %116 = fcmp ogt float %115, 1.000000e+06
  %117 = select i1 %116, float 1.000000e+06, float %115
  br label %118

118:                                              ; preds = %67, %106
  %119 = phi float [ %112, %106 ], [ %96, %67 ]
  %120 = phi float [ %117, %106 ], [ %97, %67 ]
  %121 = insertelement <2 x float> undef, float %119, i32 0
  %122 = insertelement <2 x float> %121, float %120, i32 1
  store <2 x float> %122, <2 x float>* %8, align 8
  %123 = bitcast <2 x float>* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %123) #10
  %124 = getelementptr inbounds <2 x float>, <2 x float>* %10, i64 0, i64 0
  store float 0xFFFFFFFFE0000000, float* %124, align 8
  %125 = getelementptr inbounds %"class.gfx::PointF", %"class.gfx::PointF"* %11, i64 0, i32 1
  store float 0xFFFFFFFFE0000000, float* %125, align 4
  %126 = fcmp oeq float %101, 1.000000e+00
  br i1 %126, label %139, label %127

127:                                              ; preds = %118
  %128 = fdiv float 1.000000e+00, %101
  %129 = fmul float %99, %128
  %130 = fcmp olt float %129, -1.000000e+06
  %131 = select i1 %130, float -1.000000e+06, float %129
  %132 = fcmp ogt float %131, 1.000000e+06
  %133 = select i1 %132, float 1.000000e+06, float %131
  %134 = fmul float %100, %128
  %135 = fcmp olt float %134, -1.000000e+06
  %136 = select i1 %135, float -1.000000e+06, float %134
  %137 = fcmp ogt float %136, 1.000000e+06
  %138 = select i1 %137, float 1.000000e+06, float %136
  br label %139

139:                                              ; preds = %118, %127
  %140 = phi float [ %133, %127 ], [ %99, %118 ]
  %141 = phi float [ %138, %127 ], [ %100, %118 ]
  %142 = insertelement <2 x float> undef, float %140, i32 0
  %143 = insertelement <2 x float> %142, float %141, i32 1
  store <2 x float> %143, <2 x float>* %10, align 8
  %144 = bitcast { <2 x float>, <2 x float> }* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %144) #10
  %145 = call { <2 x float>, <2 x float> } @_ZN3gfx12BoundingRectERKNS_6PointFES2_(%"class.gfx::PointF"* nonnull dereferenceable(8) %9, %"class.gfx::PointF"* nonnull dereferenceable(8) %11) #10
  %146 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %12, i64 0, i32 0
  %147 = extractvalue { <2 x float>, <2 x float> } %145, 0
  store <2 x float> %147, <2 x float>* %146, align 8
  %148 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %12, i64 0, i32 1
  %149 = extractvalue { <2 x float>, <2 x float> } %145, 1
  store <2 x float> %149, <2 x float>* %148, align 8
  %150 = call { i64, i64 } @_ZN3gfx14ToEnclosedRectERKNS_5RectFE(%"class.gfx::RectF"* nonnull dereferenceable(16) %13) #10
  %151 = extractvalue { i64, i64 } %150, 0
  %152 = extractvalue { i64, i64 } %150, 1
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %144) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %123) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %102) #10
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %87) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %68) #10
  br label %153

153:                                              ; preds = %139, %32, %15
  %154 = phi i64 [ %26, %15 ], [ %65, %32 ], [ %151, %139 ]
  %155 = phi i64 [ %27, %15 ], [ %66, %32 ], [ %152, %139 ]
  %156 = insertvalue { i64, i64 } undef, i64 %154, 0
  %157 = insertvalue { i64, i64 } %156, i64 %155, 1
  ret { i64, i64 } %157
}

declare { i64, i64 } @_ZN3gfx14ToEnclosedRectERKNS_5RectFE(%"class.gfx::RectF"* dereferenceable(16)) local_unnamed_addr #1

declare { <2 x float>, <2 x float> } @_ZN3gfx12BoundingRectERKNS_6PointFES2_(%"class.gfx::PointF"* dereferenceable(8), %"class.gfx::PointF"* dereferenceable(8)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2cc8MathUtil16MapClippedQuad3dERKN3gfx9TransformERKNS1_5QuadFEPNS1_7Point3FEPi(%"class.gfx::Transform"* dereferenceable(68), %"class.gfx::QuadF"* nocapture readonly dereferenceable(32), %"class.gfx::Point3F"*, i32*) local_unnamed_addr #0 align 2 {
  %5 = alloca { <2 x float>, <2 x float> }, align 8
  %6 = alloca { <2 x float>, <2 x float> }, align 8
  %7 = alloca { <2 x float>, <2 x float> }, align 8
  %8 = alloca { <2 x float>, <2 x float> }, align 8
  %9 = bitcast %"class.gfx::QuadF"* %1 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.gfx::QuadF", %"class.gfx::QuadF"* %1, i64 0, i32 0, i32 1
  %12 = bitcast float* %11 to i32*
  %13 = load i32, i32* %12, align 4
  %14 = bitcast { <2 x float>, <2 x float> }* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %14)
  %15 = bitcast { <2 x float>, <2 x float> }* %6 to %"struct.cc::HomogeneousCoordinate"*
  %16 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %6, i64 0, i32 0, i64 0
  %17 = getelementptr inbounds %"struct.cc::HomogeneousCoordinate", %"struct.cc::HomogeneousCoordinate"* %15, i64 0, i32 0, i64 1
  %18 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %6, i64 0, i32 1, i64 0
  %19 = getelementptr inbounds %"struct.cc::HomogeneousCoordinate", %"struct.cc::HomogeneousCoordinate"* %15, i64 0, i32 0, i64 3
  %20 = bitcast { <2 x float>, <2 x float> }* %6 to i32*
  store i32 %10, i32* %20, align 8
  %21 = bitcast float* %17 to i32*
  store i32 %13, i32* %21, align 4
  %22 = bitcast float* %18 to i32*
  store i32 0, i32* %22, align 8
  store float 1.000000e+00, float* %19, align 4
  %23 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %0, i64 0, i32 0
  call void @_ZNK10SkMatrix4410mapScalarsEPKfPf(%class.SkMatrix44* %23, float* nonnull %16, float* nonnull %16) #10
  %24 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %6, i64 0, i32 0
  %25 = load <2 x float>, <2 x float>* %24, align 8
  %26 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %6, i64 0, i32 1
  %27 = load <2 x float>, <2 x float>* %26, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %14)
  %28 = getelementptr inbounds %"class.gfx::QuadF", %"class.gfx::QuadF"* %1, i64 0, i32 1
  %29 = bitcast %"class.gfx::PointF"* %28 to i32*
  %30 = load i32, i32* %29, align 4
  %31 = getelementptr inbounds %"class.gfx::QuadF", %"class.gfx::QuadF"* %1, i64 0, i32 1, i32 1
  %32 = bitcast float* %31 to i32*
  %33 = load i32, i32* %32, align 4
  %34 = bitcast { <2 x float>, <2 x float> }* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %34)
  %35 = bitcast { <2 x float>, <2 x float> }* %5 to %"struct.cc::HomogeneousCoordinate"*
  %36 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %5, i64 0, i32 0, i64 0
  %37 = getelementptr inbounds %"struct.cc::HomogeneousCoordinate", %"struct.cc::HomogeneousCoordinate"* %35, i64 0, i32 0, i64 1
  %38 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %5, i64 0, i32 1, i64 0
  %39 = getelementptr inbounds %"struct.cc::HomogeneousCoordinate", %"struct.cc::HomogeneousCoordinate"* %35, i64 0, i32 0, i64 3
  %40 = bitcast { <2 x float>, <2 x float> }* %5 to i32*
  store i32 %30, i32* %40, align 8
  %41 = bitcast float* %37 to i32*
  store i32 %33, i32* %41, align 4
  %42 = bitcast float* %38 to i32*
  store i32 0, i32* %42, align 8
  store float 1.000000e+00, float* %39, align 4
  call void @_ZNK10SkMatrix4410mapScalarsEPKfPf(%class.SkMatrix44* %23, float* nonnull %36, float* nonnull %36) #10
  %43 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %5, i64 0, i32 0
  %44 = load <2 x float>, <2 x float>* %43, align 8
  %45 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %5, i64 0, i32 1
  %46 = load <2 x float>, <2 x float>* %45, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %34)
  %47 = getelementptr inbounds %"class.gfx::QuadF", %"class.gfx::QuadF"* %1, i64 0, i32 2
  %48 = bitcast %"class.gfx::PointF"* %47 to i32*
  %49 = load i32, i32* %48, align 4
  %50 = getelementptr inbounds %"class.gfx::QuadF", %"class.gfx::QuadF"* %1, i64 0, i32 2, i32 1
  %51 = bitcast float* %50 to i32*
  %52 = load i32, i32* %51, align 4
  %53 = bitcast { <2 x float>, <2 x float> }* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %53)
  %54 = bitcast { <2 x float>, <2 x float> }* %7 to %"struct.cc::HomogeneousCoordinate"*
  %55 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %7, i64 0, i32 0, i64 0
  %56 = getelementptr inbounds %"struct.cc::HomogeneousCoordinate", %"struct.cc::HomogeneousCoordinate"* %54, i64 0, i32 0, i64 1
  %57 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %7, i64 0, i32 1, i64 0
  %58 = getelementptr inbounds %"struct.cc::HomogeneousCoordinate", %"struct.cc::HomogeneousCoordinate"* %54, i64 0, i32 0, i64 3
  %59 = bitcast { <2 x float>, <2 x float> }* %7 to i32*
  store i32 %49, i32* %59, align 8
  %60 = bitcast float* %56 to i32*
  store i32 %52, i32* %60, align 4
  %61 = bitcast float* %57 to i32*
  store i32 0, i32* %61, align 8
  store float 1.000000e+00, float* %58, align 4
  call void @_ZNK10SkMatrix4410mapScalarsEPKfPf(%class.SkMatrix44* %23, float* nonnull %55, float* nonnull %55) #10
  %62 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %7, i64 0, i32 0
  %63 = load <2 x float>, <2 x float>* %62, align 8
  %64 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %7, i64 0, i32 1
  %65 = load <2 x float>, <2 x float>* %64, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %53)
  %66 = getelementptr inbounds %"class.gfx::QuadF", %"class.gfx::QuadF"* %1, i64 0, i32 3
  %67 = bitcast %"class.gfx::PointF"* %66 to i32*
  %68 = load i32, i32* %67, align 4
  %69 = getelementptr inbounds %"class.gfx::QuadF", %"class.gfx::QuadF"* %1, i64 0, i32 3, i32 1
  %70 = bitcast float* %69 to i32*
  %71 = load i32, i32* %70, align 4
  %72 = bitcast { <2 x float>, <2 x float> }* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %72)
  %73 = bitcast { <2 x float>, <2 x float> }* %8 to %"struct.cc::HomogeneousCoordinate"*
  %74 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %8, i64 0, i32 0, i64 0
  %75 = getelementptr inbounds %"struct.cc::HomogeneousCoordinate", %"struct.cc::HomogeneousCoordinate"* %73, i64 0, i32 0, i64 1
  %76 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %8, i64 0, i32 1, i64 0
  %77 = getelementptr inbounds %"struct.cc::HomogeneousCoordinate", %"struct.cc::HomogeneousCoordinate"* %73, i64 0, i32 0, i64 3
  %78 = bitcast { <2 x float>, <2 x float> }* %8 to i32*
  store i32 %68, i32* %78, align 8
  %79 = bitcast float* %75 to i32*
  store i32 %71, i32* %79, align 4
  %80 = bitcast float* %76 to i32*
  store i32 0, i32* %80, align 8
  store float 1.000000e+00, float* %77, align 4
  call void @_ZNK10SkMatrix4410mapScalarsEPKfPf(%class.SkMatrix44* %23, float* nonnull %74, float* nonnull %74) #10
  %81 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %8, i64 0, i32 0
  %82 = load <2 x float>, <2 x float>* %81, align 8
  %83 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %8, i64 0, i32 1
  %84 = load <2 x float>, <2 x float>* %83, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %72)
  store i32 0, i32* %3, align 4
  %85 = extractelement <2 x float> %27, i32 1
  %86 = fcmp ole float %85, 0.000000e+00
  br i1 %86, label %122, label %87

87:                                               ; preds = %4
  %88 = fcmp oeq float %85, 1.000000e+00
  br i1 %88, label %89, label %91

89:                                               ; preds = %87
  %90 = extractelement <2 x float> %27, i32 0
  br label %113

91:                                               ; preds = %87
  %92 = fdiv float 1.000000e+00, %85
  %93 = extractelement <2 x float> %25, i32 0
  %94 = fmul float %93, %92
  %95 = fcmp olt float %94, -1.000000e+06
  %96 = select i1 %95, float -1.000000e+06, float %94
  %97 = fcmp ogt float %96, 1.000000e+06
  %98 = select i1 %97, float 1.000000e+06, float %96
  %99 = extractelement <2 x float> %25, i32 1
  %100 = fmul float %99, %92
  %101 = fcmp olt float %100, -1.000000e+06
  %102 = select i1 %101, float -1.000000e+06, float %100
  %103 = fcmp ogt float %102, 1.000000e+06
  %104 = select i1 %103, float 1.000000e+06, float %102
  %105 = extractelement <2 x float> %27, i32 0
  %106 = fmul float %105, %92
  %107 = fcmp olt float %106, -1.000000e+06
  %108 = select i1 %107, float -1.000000e+06, float %106
  %109 = fcmp ogt float %108, 1.000000e+06
  %110 = select i1 %109, float 1.000000e+06, float %108
  %111 = insertelement <2 x float> undef, float %98, i32 0
  %112 = insertelement <2 x float> %111, float %104, i32 1
  br label %113

113:                                              ; preds = %89, %91
  %114 = phi <2 x float> [ %25, %89 ], [ %112, %91 ]
  %115 = phi float [ %90, %89 ], [ %110, %91 ]
  %116 = bitcast %"class.gfx::Point3F"* %2 to <2 x float>*
  store <2 x float> %114, <2 x float>* %116, align 4
  %117 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %2, i64 0, i32 2
  store float %115, float* %117, align 4
  %118 = load i32, i32* %3, align 4
  %119 = add nsw i32 %118, 1
  store i32 %119, i32* %3, align 4
  %120 = extractelement <2 x float> %46, i32 1
  %121 = fcmp ugt float %120, 0.000000e+00
  br i1 %121, label %243, label %125

122:                                              ; preds = %4
  %123 = extractelement <2 x float> %46, i32 1
  %124 = fcmp ole float %123, 0.000000e+00
  br i1 %124, label %239, label %125

125:                                              ; preds = %122, %113
  %126 = phi i1 [ true, %113 ], [ %124, %122 ]
  %127 = phi float [ %120, %113 ], [ %123, %122 ]
  %128 = phi i32 [ %119, %113 ], [ 0, %122 ]
  %129 = fsub float %85, %127
  %130 = fdiv float %85, %129
  %131 = extractelement <2 x float> %25, i32 0
  %132 = extractelement <2 x float> %44, i32 0
  %133 = fmul float %131, %127
  %134 = fdiv float %133, %85
  %135 = fdiv float %134, %132
  %136 = fadd float %135, -1.000000e+00
  %137 = call float @llvm.fabs.f32(float %136) #10
  %138 = fcmp ogt float %137, 0x3EE4F8B580000000
  br i1 %138, label %139, label %146

139:                                              ; preds = %125
  %140 = fsub float 1.000000e+00, %130
  %141 = fmul float %131, %140
  %142 = fmul float %132, %130
  %143 = fadd float %142, %141
  %144 = fcmp ogt float %143, 0.000000e+00
  br i1 %144, label %148, label %145

145:                                              ; preds = %139
  br label %148

146:                                              ; preds = %125
  %147 = fdiv float %131, %85
  br label %148

148:                                              ; preds = %146, %145, %139
  %149 = phi float [ -1.000000e+06, %145 ], [ %147, %146 ], [ 1.000000e+06, %139 ]
  %150 = extractelement <2 x float> %25, i32 1
  %151 = extractelement <2 x float> %44, i32 1
  %152 = fmul float %150, %127
  %153 = fdiv float %152, %85
  %154 = fdiv float %153, %151
  %155 = fadd float %154, -1.000000e+00
  %156 = call float @llvm.fabs.f32(float %155) #10
  %157 = fcmp ogt float %156, 0x3EE4F8B580000000
  br i1 %157, label %158, label %165

158:                                              ; preds = %148
  %159 = fsub float 1.000000e+00, %130
  %160 = fmul float %150, %159
  %161 = fmul float %151, %130
  %162 = fadd float %161, %160
  %163 = fcmp ogt float %162, 0.000000e+00
  br i1 %163, label %167, label %164

164:                                              ; preds = %158
  br label %167

165:                                              ; preds = %148
  %166 = fdiv float %150, %85
  br label %167

167:                                              ; preds = %165, %164, %158
  %168 = phi float [ -1.000000e+06, %164 ], [ %166, %165 ], [ 1.000000e+06, %158 ]
  %169 = extractelement <2 x float> %27, i32 0
  %170 = extractelement <2 x float> %46, i32 0
  %171 = fmul float %169, %127
  %172 = fdiv float %171, %85
  %173 = fdiv float %172, %170
  %174 = fadd float %173, -1.000000e+00
  %175 = call float @llvm.fabs.f32(float %174) #10
  %176 = fcmp ogt float %175, 0x3EE4F8B580000000
  br i1 %176, label %177, label %184

177:                                              ; preds = %167
  %178 = fsub float 1.000000e+00, %130
  %179 = fmul float %169, %178
  %180 = fmul float %170, %130
  %181 = fadd float %180, %179
  %182 = fcmp ogt float %181, 0.000000e+00
  br i1 %182, label %186, label %183

183:                                              ; preds = %177
  br label %186

184:                                              ; preds = %167
  %185 = fdiv float %169, %85
  br label %186

186:                                              ; preds = %177, %183, %184
  %187 = phi float [ -1.000000e+06, %183 ], [ %185, %184 ], [ 1.000000e+06, %177 ]
  %188 = insertelement <2 x float> undef, float %149, i32 0
  %189 = insertelement <2 x float> %188, float %168, i32 1
  %190 = icmp sgt i32 %128, 0
  br i1 %190, label %191, label %232

191:                                              ; preds = %186
  %192 = add nsw i32 %128, -1
  %193 = sext i32 %192 to i64
  %194 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %2, i64 %193, i32 0
  %195 = load float, float* %194, align 4
  %196 = fsub float %195, %149
  %197 = call float @llvm.fabs.f32(float %195) #10
  %198 = call float @llvm.fabs.f32(float %149) #10
  %199 = fcmp olt float %197, %198
  %200 = select i1 %199, float %198, float %197
  %201 = fcmp olt float %200, 0x3EE4F8B580000000
  %202 = call float @llvm.fabs.f32(float %196) #10
  %203 = select i1 %201, float 0x3EE4F8B580000000, float %200
  %204 = fmul float %203, 0x3EE4F8B580000000
  %205 = fcmp olt float %202, %204
  br i1 %205, label %206, label %232

206:                                              ; preds = %191
  %207 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %2, i64 %193, i32 1
  %208 = load float, float* %207, align 4
  %209 = fsub float %208, %168
  %210 = call float @llvm.fabs.f32(float %208) #10
  %211 = call float @llvm.fabs.f32(float %168) #10
  %212 = fcmp olt float %210, %211
  %213 = select i1 %212, float %211, float %210
  %214 = fcmp olt float %213, 0x3EE4F8B580000000
  %215 = call float @llvm.fabs.f32(float %209) #10
  %216 = select i1 %214, float 0x3EE4F8B580000000, float %213
  %217 = fmul float %216, 0x3EE4F8B580000000
  %218 = fcmp olt float %215, %217
  br i1 %218, label %219, label %232

219:                                              ; preds = %206
  %220 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %2, i64 %193, i32 2
  %221 = load float, float* %220, align 4
  %222 = fsub float %221, %187
  %223 = call float @llvm.fabs.f32(float %221) #10
  %224 = call float @llvm.fabs.f32(float %187) #10
  %225 = fcmp olt float %223, %224
  %226 = select i1 %225, float %224, float %223
  %227 = fcmp olt float %226, 0x3EE4F8B580000000
  %228 = call float @llvm.fabs.f32(float %222) #10
  %229 = select i1 %227, float 0x3EE4F8B580000000, float %226
  %230 = fmul float %229, 0x3EE4F8B580000000
  %231 = fcmp olt float %228, %230
  br i1 %231, label %239, label %232

232:                                              ; preds = %219, %206, %191, %186
  %233 = sext i32 %128 to i64
  %234 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %2, i64 %233
  %235 = bitcast %"class.gfx::Point3F"* %234 to <2 x float>*
  store <2 x float> %189, <2 x float>* %235, align 4
  %236 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %2, i64 %233, i32 2
  store float %187, float* %236, align 4
  %237 = load i32, i32* %3, align 4
  %238 = add nsw i32 %237, 1
  store i32 %238, i32* %3, align 4
  br i1 %126, label %329, label %243

239:                                              ; preds = %122, %219
  %240 = phi i1 [ %126, %219 ], [ %124, %122 ]
  %241 = phi float [ %127, %219 ], [ %123, %122 ]
  %242 = phi i32 [ %128, %219 ], [ 0, %122 ]
  br i1 %240, label %329, label %243

243:                                              ; preds = %113, %232, %239
  %244 = phi i32 [ %238, %232 ], [ %242, %239 ], [ %119, %113 ]
  %245 = phi float [ %127, %232 ], [ %241, %239 ], [ %120, %113 ]
  %246 = fcmp oeq float %245, 1.000000e+00
  br i1 %246, label %247, label %249

247:                                              ; preds = %243
  %248 = extractelement <2 x float> %46, i32 0
  br label %271

249:                                              ; preds = %243
  %250 = fdiv float 1.000000e+00, %245
  %251 = extractelement <2 x float> %44, i32 0
  %252 = fmul float %251, %250
  %253 = fcmp olt float %252, -1.000000e+06
  %254 = select i1 %253, float -1.000000e+06, float %252
  %255 = fcmp ogt float %254, 1.000000e+06
  %256 = select i1 %255, float 1.000000e+06, float %254
  %257 = extractelement <2 x float> %44, i32 1
  %258 = fmul float %257, %250
  %259 = fcmp olt float %258, -1.000000e+06
  %260 = select i1 %259, float -1.000000e+06, float %258
  %261 = fcmp ogt float %260, 1.000000e+06
  %262 = select i1 %261, float 1.000000e+06, float %260
  %263 = extractelement <2 x float> %46, i32 0
  %264 = fmul float %263, %250
  %265 = fcmp olt float %264, -1.000000e+06
  %266 = select i1 %265, float -1.000000e+06, float %264
  %267 = fcmp ogt float %266, 1.000000e+06
  %268 = select i1 %267, float 1.000000e+06, float %266
  %269 = insertelement <2 x float> undef, float %256, i32 0
  %270 = insertelement <2 x float> %269, float %262, i32 1
  br label %271

271:                                              ; preds = %247, %249
  %272 = phi <2 x float> [ %44, %247 ], [ %270, %249 ]
  %273 = phi float [ %248, %247 ], [ %268, %249 ]
  %274 = icmp sgt i32 %244, 0
  br i1 %274, label %275, label %318

275:                                              ; preds = %271
  %276 = add nsw i32 %244, -1
  %277 = sext i32 %276 to i64
  %278 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %2, i64 %277, i32 0
  %279 = load float, float* %278, align 4
  %280 = extractelement <2 x float> %272, i32 0
  %281 = fsub float %279, %280
  %282 = call float @llvm.fabs.f32(float %279) #10
  %283 = call float @llvm.fabs.f32(float %280) #10
  %284 = fcmp olt float %282, %283
  %285 = select i1 %284, float %283, float %282
  %286 = fcmp olt float %285, 0x3EE4F8B580000000
  %287 = call float @llvm.fabs.f32(float %281) #10
  %288 = select i1 %286, float 0x3EE4F8B580000000, float %285
  %289 = fmul float %288, 0x3EE4F8B580000000
  %290 = fcmp olt float %287, %289
  br i1 %290, label %291, label %318

291:                                              ; preds = %275
  %292 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %2, i64 %277, i32 1
  %293 = load float, float* %292, align 4
  %294 = extractelement <2 x float> %272, i32 1
  %295 = fsub float %293, %294
  %296 = call float @llvm.fabs.f32(float %293) #10
  %297 = call float @llvm.fabs.f32(float %294) #10
  %298 = fcmp olt float %296, %297
  %299 = select i1 %298, float %297, float %296
  %300 = fcmp olt float %299, 0x3EE4F8B580000000
  %301 = call float @llvm.fabs.f32(float %295) #10
  %302 = select i1 %300, float 0x3EE4F8B580000000, float %299
  %303 = fmul float %302, 0x3EE4F8B580000000
  %304 = fcmp olt float %301, %303
  br i1 %304, label %305, label %318

305:                                              ; preds = %291
  %306 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %2, i64 %277, i32 2
  %307 = load float, float* %306, align 4
  %308 = fsub float %307, %273
  %309 = call float @llvm.fabs.f32(float %307) #10
  %310 = call float @llvm.fabs.f32(float %273) #10
  %311 = fcmp olt float %309, %310
  %312 = select i1 %311, float %310, float %309
  %313 = fcmp olt float %312, 0x3EE4F8B580000000
  %314 = call float @llvm.fabs.f32(float %308) #10
  %315 = select i1 %313, float 0x3EE4F8B580000000, float %312
  %316 = fmul float %315, 0x3EE4F8B580000000
  %317 = fcmp olt float %314, %316
  br i1 %317, label %325, label %318

318:                                              ; preds = %305, %291, %275, %271
  %319 = sext i32 %244 to i64
  %320 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %2, i64 %319
  %321 = bitcast %"class.gfx::Point3F"* %320 to <2 x float>*
  store <2 x float> %272, <2 x float>* %321, align 4
  %322 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %2, i64 %319, i32 2
  store float %273, float* %322, align 4
  %323 = load i32, i32* %3, align 4
  %324 = add nsw i32 %323, 1
  store i32 %324, i32* %3, align 4
  br label %325

325:                                              ; preds = %305, %318
  %326 = phi i32 [ %244, %305 ], [ %324, %318 ]
  %327 = extractelement <2 x float> %65, i32 1
  %328 = fcmp ugt float %327, 0.000000e+00
  br i1 %328, label %453, label %334

329:                                              ; preds = %232, %239
  %330 = phi float [ %241, %239 ], [ %127, %232 ]
  %331 = phi i32 [ %242, %239 ], [ %238, %232 ]
  %332 = extractelement <2 x float> %65, i32 1
  %333 = fcmp ole float %332, 0.000000e+00
  br i1 %333, label %449, label %334

334:                                              ; preds = %329, %325
  %335 = phi i1 [ true, %325 ], [ %333, %329 ]
  %336 = phi float [ %327, %325 ], [ %332, %329 ]
  %337 = phi i32 [ %326, %325 ], [ %331, %329 ]
  %338 = phi float [ %245, %325 ], [ %330, %329 ]
  %339 = fsub float %338, %336
  %340 = fdiv float %338, %339
  %341 = extractelement <2 x float> %44, i32 0
  %342 = extractelement <2 x float> %63, i32 0
  %343 = fmul float %341, %336
  %344 = fdiv float %343, %338
  %345 = fdiv float %344, %342
  %346 = fadd float %345, -1.000000e+00
  %347 = call float @llvm.fabs.f32(float %346) #10
  %348 = fcmp ogt float %347, 0x3EE4F8B580000000
  br i1 %348, label %349, label %356

349:                                              ; preds = %334
  %350 = fsub float 1.000000e+00, %340
  %351 = fmul float %341, %350
  %352 = fmul float %342, %340
  %353 = fadd float %352, %351
  %354 = fcmp ogt float %353, 0.000000e+00
  br i1 %354, label %358, label %355

355:                                              ; preds = %349
  br label %358

356:                                              ; preds = %334
  %357 = fdiv float %341, %338
  br label %358

358:                                              ; preds = %356, %355, %349
  %359 = phi float [ -1.000000e+06, %355 ], [ %357, %356 ], [ 1.000000e+06, %349 ]
  %360 = extractelement <2 x float> %44, i32 1
  %361 = extractelement <2 x float> %63, i32 1
  %362 = fmul float %360, %336
  %363 = fdiv float %362, %338
  %364 = fdiv float %363, %361
  %365 = fadd float %364, -1.000000e+00
  %366 = call float @llvm.fabs.f32(float %365) #10
  %367 = fcmp ogt float %366, 0x3EE4F8B580000000
  br i1 %367, label %368, label %375

368:                                              ; preds = %358
  %369 = fsub float 1.000000e+00, %340
  %370 = fmul float %360, %369
  %371 = fmul float %361, %340
  %372 = fadd float %371, %370
  %373 = fcmp ogt float %372, 0.000000e+00
  br i1 %373, label %377, label %374

374:                                              ; preds = %368
  br label %377

375:                                              ; preds = %358
  %376 = fdiv float %360, %338
  br label %377

377:                                              ; preds = %375, %374, %368
  %378 = phi float [ -1.000000e+06, %374 ], [ %376, %375 ], [ 1.000000e+06, %368 ]
  %379 = extractelement <2 x float> %46, i32 0
  %380 = extractelement <2 x float> %65, i32 0
  %381 = fmul float %379, %336
  %382 = fdiv float %381, %338
  %383 = fdiv float %382, %380
  %384 = fadd float %383, -1.000000e+00
  %385 = call float @llvm.fabs.f32(float %384) #10
  %386 = fcmp ogt float %385, 0x3EE4F8B580000000
  br i1 %386, label %387, label %394

387:                                              ; preds = %377
  %388 = fsub float 1.000000e+00, %340
  %389 = fmul float %379, %388
  %390 = fmul float %380, %340
  %391 = fadd float %390, %389
  %392 = fcmp ogt float %391, 0.000000e+00
  br i1 %392, label %396, label %393

393:                                              ; preds = %387
  br label %396

394:                                              ; preds = %377
  %395 = fdiv float %379, %338
  br label %396

396:                                              ; preds = %387, %393, %394
  %397 = phi float [ -1.000000e+06, %393 ], [ %395, %394 ], [ 1.000000e+06, %387 ]
  %398 = insertelement <2 x float> undef, float %359, i32 0
  %399 = insertelement <2 x float> %398, float %378, i32 1
  %400 = icmp sgt i32 %337, 0
  br i1 %400, label %401, label %442

401:                                              ; preds = %396
  %402 = add nsw i32 %337, -1
  %403 = sext i32 %402 to i64
  %404 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %2, i64 %403, i32 0
  %405 = load float, float* %404, align 4
  %406 = fsub float %405, %359
  %407 = call float @llvm.fabs.f32(float %405) #10
  %408 = call float @llvm.fabs.f32(float %359) #10
  %409 = fcmp olt float %407, %408
  %410 = select i1 %409, float %408, float %407
  %411 = fcmp olt float %410, 0x3EE4F8B580000000
  %412 = call float @llvm.fabs.f32(float %406) #10
  %413 = select i1 %411, float 0x3EE4F8B580000000, float %410
  %414 = fmul float %413, 0x3EE4F8B580000000
  %415 = fcmp olt float %412, %414
  br i1 %415, label %416, label %442

416:                                              ; preds = %401
  %417 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %2, i64 %403, i32 1
  %418 = load float, float* %417, align 4
  %419 = fsub float %418, %378
  %420 = call float @llvm.fabs.f32(float %418) #10
  %421 = call float @llvm.fabs.f32(float %378) #10
  %422 = fcmp olt float %420, %421
  %423 = select i1 %422, float %421, float %420
  %424 = fcmp olt float %423, 0x3EE4F8B580000000
  %425 = call float @llvm.fabs.f32(float %419) #10
  %426 = select i1 %424, float 0x3EE4F8B580000000, float %423
  %427 = fmul float %426, 0x3EE4F8B580000000
  %428 = fcmp olt float %425, %427
  br i1 %428, label %429, label %442

429:                                              ; preds = %416
  %430 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %2, i64 %403, i32 2
  %431 = load float, float* %430, align 4
  %432 = fsub float %431, %397
  %433 = call float @llvm.fabs.f32(float %431) #10
  %434 = call float @llvm.fabs.f32(float %397) #10
  %435 = fcmp olt float %433, %434
  %436 = select i1 %435, float %434, float %433
  %437 = fcmp olt float %436, 0x3EE4F8B580000000
  %438 = call float @llvm.fabs.f32(float %432) #10
  %439 = select i1 %437, float 0x3EE4F8B580000000, float %436
  %440 = fmul float %439, 0x3EE4F8B580000000
  %441 = fcmp olt float %438, %440
  br i1 %441, label %449, label %442

442:                                              ; preds = %429, %416, %401, %396
  %443 = sext i32 %337 to i64
  %444 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %2, i64 %443
  %445 = bitcast %"class.gfx::Point3F"* %444 to <2 x float>*
  store <2 x float> %399, <2 x float>* %445, align 4
  %446 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %2, i64 %443, i32 2
  store float %397, float* %446, align 4
  %447 = load i32, i32* %3, align 4
  %448 = add nsw i32 %447, 1
  store i32 %448, i32* %3, align 4
  br i1 %335, label %539, label %453

449:                                              ; preds = %329, %429
  %450 = phi i1 [ %335, %429 ], [ %333, %329 ]
  %451 = phi float [ %336, %429 ], [ %332, %329 ]
  %452 = phi i32 [ %337, %429 ], [ %331, %329 ]
  br i1 %450, label %539, label %453

453:                                              ; preds = %325, %442, %449
  %454 = phi i32 [ %448, %442 ], [ %452, %449 ], [ %326, %325 ]
  %455 = phi float [ %336, %442 ], [ %451, %449 ], [ %327, %325 ]
  %456 = fcmp oeq float %455, 1.000000e+00
  br i1 %456, label %457, label %459

457:                                              ; preds = %453
  %458 = extractelement <2 x float> %65, i32 0
  br label %481

459:                                              ; preds = %453
  %460 = fdiv float 1.000000e+00, %455
  %461 = extractelement <2 x float> %63, i32 0
  %462 = fmul float %461, %460
  %463 = fcmp olt float %462, -1.000000e+06
  %464 = select i1 %463, float -1.000000e+06, float %462
  %465 = fcmp ogt float %464, 1.000000e+06
  %466 = select i1 %465, float 1.000000e+06, float %464
  %467 = extractelement <2 x float> %63, i32 1
  %468 = fmul float %467, %460
  %469 = fcmp olt float %468, -1.000000e+06
  %470 = select i1 %469, float -1.000000e+06, float %468
  %471 = fcmp ogt float %470, 1.000000e+06
  %472 = select i1 %471, float 1.000000e+06, float %470
  %473 = extractelement <2 x float> %65, i32 0
  %474 = fmul float %473, %460
  %475 = fcmp olt float %474, -1.000000e+06
  %476 = select i1 %475, float -1.000000e+06, float %474
  %477 = fcmp ogt float %476, 1.000000e+06
  %478 = select i1 %477, float 1.000000e+06, float %476
  %479 = insertelement <2 x float> undef, float %466, i32 0
  %480 = insertelement <2 x float> %479, float %472, i32 1
  br label %481

481:                                              ; preds = %457, %459
  %482 = phi <2 x float> [ %63, %457 ], [ %480, %459 ]
  %483 = phi float [ %458, %457 ], [ %478, %459 ]
  %484 = icmp sgt i32 %454, 0
  br i1 %484, label %485, label %528

485:                                              ; preds = %481
  %486 = add nsw i32 %454, -1
  %487 = sext i32 %486 to i64
  %488 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %2, i64 %487, i32 0
  %489 = load float, float* %488, align 4
  %490 = extractelement <2 x float> %482, i32 0
  %491 = fsub float %489, %490
  %492 = call float @llvm.fabs.f32(float %489) #10
  %493 = call float @llvm.fabs.f32(float %490) #10
  %494 = fcmp olt float %492, %493
  %495 = select i1 %494, float %493, float %492
  %496 = fcmp olt float %495, 0x3EE4F8B580000000
  %497 = call float @llvm.fabs.f32(float %491) #10
  %498 = select i1 %496, float 0x3EE4F8B580000000, float %495
  %499 = fmul float %498, 0x3EE4F8B580000000
  %500 = fcmp olt float %497, %499
  br i1 %500, label %501, label %528

501:                                              ; preds = %485
  %502 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %2, i64 %487, i32 1
  %503 = load float, float* %502, align 4
  %504 = extractelement <2 x float> %482, i32 1
  %505 = fsub float %503, %504
  %506 = call float @llvm.fabs.f32(float %503) #10
  %507 = call float @llvm.fabs.f32(float %504) #10
  %508 = fcmp olt float %506, %507
  %509 = select i1 %508, float %507, float %506
  %510 = fcmp olt float %509, 0x3EE4F8B580000000
  %511 = call float @llvm.fabs.f32(float %505) #10
  %512 = select i1 %510, float 0x3EE4F8B580000000, float %509
  %513 = fmul float %512, 0x3EE4F8B580000000
  %514 = fcmp olt float %511, %513
  br i1 %514, label %515, label %528

515:                                              ; preds = %501
  %516 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %2, i64 %487, i32 2
  %517 = load float, float* %516, align 4
  %518 = fsub float %517, %483
  %519 = call float @llvm.fabs.f32(float %517) #10
  %520 = call float @llvm.fabs.f32(float %483) #10
  %521 = fcmp olt float %519, %520
  %522 = select i1 %521, float %520, float %519
  %523 = fcmp olt float %522, 0x3EE4F8B580000000
  %524 = call float @llvm.fabs.f32(float %518) #10
  %525 = select i1 %523, float 0x3EE4F8B580000000, float %522
  %526 = fmul float %525, 0x3EE4F8B580000000
  %527 = fcmp olt float %524, %526
  br i1 %527, label %535, label %528

528:                                              ; preds = %515, %501, %485, %481
  %529 = sext i32 %454 to i64
  %530 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %2, i64 %529
  %531 = bitcast %"class.gfx::Point3F"* %530 to <2 x float>*
  store <2 x float> %482, <2 x float>* %531, align 4
  %532 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %2, i64 %529, i32 2
  store float %483, float* %532, align 4
  %533 = load i32, i32* %3, align 4
  %534 = add nsw i32 %533, 1
  store i32 %534, i32* %3, align 4
  br label %535

535:                                              ; preds = %515, %528
  %536 = phi i32 [ %454, %515 ], [ %534, %528 ]
  %537 = extractelement <2 x float> %84, i32 1
  %538 = fcmp ugt float %537, 0.000000e+00
  br i1 %538, label %663, label %544

539:                                              ; preds = %442, %449
  %540 = phi float [ %451, %449 ], [ %336, %442 ]
  %541 = phi i32 [ %452, %449 ], [ %448, %442 ]
  %542 = extractelement <2 x float> %84, i32 1
  %543 = fcmp ole float %542, 0.000000e+00
  br i1 %543, label %659, label %544

544:                                              ; preds = %539, %535
  %545 = phi i1 [ true, %535 ], [ %543, %539 ]
  %546 = phi float [ %537, %535 ], [ %542, %539 ]
  %547 = phi i32 [ %536, %535 ], [ %541, %539 ]
  %548 = phi float [ %455, %535 ], [ %540, %539 ]
  %549 = fsub float %548, %546
  %550 = fdiv float %548, %549
  %551 = extractelement <2 x float> %63, i32 0
  %552 = extractelement <2 x float> %82, i32 0
  %553 = fmul float %551, %546
  %554 = fdiv float %553, %548
  %555 = fdiv float %554, %552
  %556 = fadd float %555, -1.000000e+00
  %557 = call float @llvm.fabs.f32(float %556) #10
  %558 = fcmp ogt float %557, 0x3EE4F8B580000000
  br i1 %558, label %559, label %566

559:                                              ; preds = %544
  %560 = fsub float 1.000000e+00, %550
  %561 = fmul float %551, %560
  %562 = fmul float %552, %550
  %563 = fadd float %562, %561
  %564 = fcmp ogt float %563, 0.000000e+00
  br i1 %564, label %568, label %565

565:                                              ; preds = %559
  br label %568

566:                                              ; preds = %544
  %567 = fdiv float %551, %548
  br label %568

568:                                              ; preds = %566, %565, %559
  %569 = phi float [ -1.000000e+06, %565 ], [ %567, %566 ], [ 1.000000e+06, %559 ]
  %570 = extractelement <2 x float> %63, i32 1
  %571 = extractelement <2 x float> %82, i32 1
  %572 = fmul float %570, %546
  %573 = fdiv float %572, %548
  %574 = fdiv float %573, %571
  %575 = fadd float %574, -1.000000e+00
  %576 = call float @llvm.fabs.f32(float %575) #10
  %577 = fcmp ogt float %576, 0x3EE4F8B580000000
  br i1 %577, label %578, label %585

578:                                              ; preds = %568
  %579 = fsub float 1.000000e+00, %550
  %580 = fmul float %570, %579
  %581 = fmul float %571, %550
  %582 = fadd float %581, %580
  %583 = fcmp ogt float %582, 0.000000e+00
  br i1 %583, label %587, label %584

584:                                              ; preds = %578
  br label %587

585:                                              ; preds = %568
  %586 = fdiv float %570, %548
  br label %587

587:                                              ; preds = %585, %584, %578
  %588 = phi float [ -1.000000e+06, %584 ], [ %586, %585 ], [ 1.000000e+06, %578 ]
  %589 = extractelement <2 x float> %65, i32 0
  %590 = extractelement <2 x float> %84, i32 0
  %591 = fmul float %589, %546
  %592 = fdiv float %591, %548
  %593 = fdiv float %592, %590
  %594 = fadd float %593, -1.000000e+00
  %595 = call float @llvm.fabs.f32(float %594) #10
  %596 = fcmp ogt float %595, 0x3EE4F8B580000000
  br i1 %596, label %597, label %604

597:                                              ; preds = %587
  %598 = fsub float 1.000000e+00, %550
  %599 = fmul float %589, %598
  %600 = fmul float %590, %550
  %601 = fadd float %600, %599
  %602 = fcmp ogt float %601, 0.000000e+00
  br i1 %602, label %606, label %603

603:                                              ; preds = %597
  br label %606

604:                                              ; preds = %587
  %605 = fdiv float %589, %548
  br label %606

606:                                              ; preds = %597, %603, %604
  %607 = phi float [ -1.000000e+06, %603 ], [ %605, %604 ], [ 1.000000e+06, %597 ]
  %608 = insertelement <2 x float> undef, float %569, i32 0
  %609 = insertelement <2 x float> %608, float %588, i32 1
  %610 = icmp sgt i32 %547, 0
  br i1 %610, label %611, label %652

611:                                              ; preds = %606
  %612 = add nsw i32 %547, -1
  %613 = sext i32 %612 to i64
  %614 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %2, i64 %613, i32 0
  %615 = load float, float* %614, align 4
  %616 = fsub float %615, %569
  %617 = call float @llvm.fabs.f32(float %615) #10
  %618 = call float @llvm.fabs.f32(float %569) #10
  %619 = fcmp olt float %617, %618
  %620 = select i1 %619, float %618, float %617
  %621 = fcmp olt float %620, 0x3EE4F8B580000000
  %622 = call float @llvm.fabs.f32(float %616) #10
  %623 = select i1 %621, float 0x3EE4F8B580000000, float %620
  %624 = fmul float %623, 0x3EE4F8B580000000
  %625 = fcmp olt float %622, %624
  br i1 %625, label %626, label %652

626:                                              ; preds = %611
  %627 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %2, i64 %613, i32 1
  %628 = load float, float* %627, align 4
  %629 = fsub float %628, %588
  %630 = call float @llvm.fabs.f32(float %628) #10
  %631 = call float @llvm.fabs.f32(float %588) #10
  %632 = fcmp olt float %630, %631
  %633 = select i1 %632, float %631, float %630
  %634 = fcmp olt float %633, 0x3EE4F8B580000000
  %635 = call float @llvm.fabs.f32(float %629) #10
  %636 = select i1 %634, float 0x3EE4F8B580000000, float %633
  %637 = fmul float %636, 0x3EE4F8B580000000
  %638 = fcmp olt float %635, %637
  br i1 %638, label %639, label %652

639:                                              ; preds = %626
  %640 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %2, i64 %613, i32 2
  %641 = load float, float* %640, align 4
  %642 = fsub float %641, %607
  %643 = call float @llvm.fabs.f32(float %641) #10
  %644 = call float @llvm.fabs.f32(float %607) #10
  %645 = fcmp olt float %643, %644
  %646 = select i1 %645, float %644, float %643
  %647 = fcmp olt float %646, 0x3EE4F8B580000000
  %648 = call float @llvm.fabs.f32(float %642) #10
  %649 = select i1 %647, float 0x3EE4F8B580000000, float %646
  %650 = fmul float %649, 0x3EE4F8B580000000
  %651 = fcmp olt float %648, %650
  br i1 %651, label %659, label %652

652:                                              ; preds = %639, %626, %611, %606
  %653 = sext i32 %547 to i64
  %654 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %2, i64 %653
  %655 = bitcast %"class.gfx::Point3F"* %654 to <2 x float>*
  store <2 x float> %609, <2 x float>* %655, align 4
  %656 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %2, i64 %653, i32 2
  store float %607, float* %656, align 4
  %657 = load i32, i32* %3, align 4
  %658 = add nsw i32 %657, 1
  store i32 %658, i32* %3, align 4
  br i1 %545, label %747, label %663

659:                                              ; preds = %539, %639
  %660 = phi i1 [ %545, %639 ], [ %543, %539 ]
  %661 = phi float [ %546, %639 ], [ %542, %539 ]
  %662 = phi i32 [ %547, %639 ], [ %541, %539 ]
  br i1 %660, label %747, label %663

663:                                              ; preds = %535, %652, %659
  %664 = phi i32 [ %658, %652 ], [ %662, %659 ], [ %536, %535 ]
  %665 = phi float [ %546, %652 ], [ %661, %659 ], [ %537, %535 ]
  %666 = fcmp oeq float %665, 1.000000e+00
  br i1 %666, label %667, label %669

667:                                              ; preds = %663
  %668 = extractelement <2 x float> %84, i32 0
  br label %691

669:                                              ; preds = %663
  %670 = fdiv float 1.000000e+00, %665
  %671 = extractelement <2 x float> %82, i32 0
  %672 = fmul float %671, %670
  %673 = fcmp olt float %672, -1.000000e+06
  %674 = select i1 %673, float -1.000000e+06, float %672
  %675 = fcmp ogt float %674, 1.000000e+06
  %676 = select i1 %675, float 1.000000e+06, float %674
  %677 = extractelement <2 x float> %82, i32 1
  %678 = fmul float %677, %670
  %679 = fcmp olt float %678, -1.000000e+06
  %680 = select i1 %679, float -1.000000e+06, float %678
  %681 = fcmp ogt float %680, 1.000000e+06
  %682 = select i1 %681, float 1.000000e+06, float %680
  %683 = extractelement <2 x float> %84, i32 0
  %684 = fmul float %683, %670
  %685 = fcmp olt float %684, -1.000000e+06
  %686 = select i1 %685, float -1.000000e+06, float %684
  %687 = fcmp ogt float %686, 1.000000e+06
  %688 = select i1 %687, float 1.000000e+06, float %686
  %689 = insertelement <2 x float> undef, float %676, i32 0
  %690 = insertelement <2 x float> %689, float %682, i32 1
  br label %691

691:                                              ; preds = %667, %669
  %692 = phi <2 x float> [ %82, %667 ], [ %690, %669 ]
  %693 = phi float [ %668, %667 ], [ %688, %669 ]
  %694 = icmp sgt i32 %664, 0
  br i1 %694, label %695, label %738

695:                                              ; preds = %691
  %696 = add nsw i32 %664, -1
  %697 = sext i32 %696 to i64
  %698 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %2, i64 %697, i32 0
  %699 = load float, float* %698, align 4
  %700 = extractelement <2 x float> %692, i32 0
  %701 = fsub float %699, %700
  %702 = call float @llvm.fabs.f32(float %699) #10
  %703 = call float @llvm.fabs.f32(float %700) #10
  %704 = fcmp olt float %702, %703
  %705 = select i1 %704, float %703, float %702
  %706 = fcmp olt float %705, 0x3EE4F8B580000000
  %707 = call float @llvm.fabs.f32(float %701) #10
  %708 = select i1 %706, float 0x3EE4F8B580000000, float %705
  %709 = fmul float %708, 0x3EE4F8B580000000
  %710 = fcmp olt float %707, %709
  br i1 %710, label %711, label %738

711:                                              ; preds = %695
  %712 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %2, i64 %697, i32 1
  %713 = load float, float* %712, align 4
  %714 = extractelement <2 x float> %692, i32 1
  %715 = fsub float %713, %714
  %716 = call float @llvm.fabs.f32(float %713) #10
  %717 = call float @llvm.fabs.f32(float %714) #10
  %718 = fcmp olt float %716, %717
  %719 = select i1 %718, float %717, float %716
  %720 = fcmp olt float %719, 0x3EE4F8B580000000
  %721 = call float @llvm.fabs.f32(float %715) #10
  %722 = select i1 %720, float 0x3EE4F8B580000000, float %719
  %723 = fmul float %722, 0x3EE4F8B580000000
  %724 = fcmp olt float %721, %723
  br i1 %724, label %725, label %738

725:                                              ; preds = %711
  %726 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %2, i64 %697, i32 2
  %727 = load float, float* %726, align 4
  %728 = fsub float %727, %693
  %729 = call float @llvm.fabs.f32(float %727) #10
  %730 = call float @llvm.fabs.f32(float %693) #10
  %731 = fcmp olt float %729, %730
  %732 = select i1 %731, float %730, float %729
  %733 = fcmp olt float %732, 0x3EE4F8B580000000
  %734 = call float @llvm.fabs.f32(float %728) #10
  %735 = select i1 %733, float 0x3EE4F8B580000000, float %732
  %736 = fmul float %735, 0x3EE4F8B580000000
  %737 = fcmp olt float %734, %736
  br i1 %737, label %745, label %738

738:                                              ; preds = %725, %711, %695, %691
  %739 = sext i32 %664 to i64
  %740 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %2, i64 %739
  %741 = bitcast %"class.gfx::Point3F"* %740 to <2 x float>*
  store <2 x float> %692, <2 x float>* %741, align 4
  %742 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %2, i64 %739, i32 2
  store float %693, float* %742, align 4
  %743 = load i32, i32* %3, align 4
  %744 = add nsw i32 %743, 1
  store i32 %744, i32* %3, align 4
  br label %745

745:                                              ; preds = %725, %738
  %746 = phi i32 [ %664, %725 ], [ %744, %738 ]
  br i1 %86, label %750, label %863

747:                                              ; preds = %652, %659
  %748 = phi float [ %661, %659 ], [ %546, %652 ]
  %749 = phi i32 [ %662, %659 ], [ %658, %652 ]
  br i1 %86, label %863, label %750

750:                                              ; preds = %747, %745
  %751 = phi i32 [ %746, %745 ], [ %749, %747 ]
  %752 = phi float [ %665, %745 ], [ %748, %747 ]
  %753 = fsub float %752, %85
  %754 = fdiv float %752, %753
  %755 = extractelement <2 x float> %82, i32 0
  %756 = extractelement <2 x float> %25, i32 0
  %757 = fmul float %85, %755
  %758 = fdiv float %757, %752
  %759 = fdiv float %758, %756
  %760 = fadd float %759, -1.000000e+00
  %761 = call float @llvm.fabs.f32(float %760) #10
  %762 = fcmp ogt float %761, 0x3EE4F8B580000000
  br i1 %762, label %763, label %770

763:                                              ; preds = %750
  %764 = fsub float 1.000000e+00, %754
  %765 = fmul float %755, %764
  %766 = fmul float %756, %754
  %767 = fadd float %766, %765
  %768 = fcmp ogt float %767, 0.000000e+00
  br i1 %768, label %772, label %769

769:                                              ; preds = %763
  br label %772

770:                                              ; preds = %750
  %771 = fdiv float %755, %752
  br label %772

772:                                              ; preds = %770, %769, %763
  %773 = phi float [ -1.000000e+06, %769 ], [ %771, %770 ], [ 1.000000e+06, %763 ]
  %774 = extractelement <2 x float> %82, i32 1
  %775 = extractelement <2 x float> %25, i32 1
  %776 = fmul float %85, %774
  %777 = fdiv float %776, %752
  %778 = fdiv float %777, %775
  %779 = fadd float %778, -1.000000e+00
  %780 = call float @llvm.fabs.f32(float %779) #10
  %781 = fcmp ogt float %780, 0x3EE4F8B580000000
  br i1 %781, label %782, label %789

782:                                              ; preds = %772
  %783 = fsub float 1.000000e+00, %754
  %784 = fmul float %774, %783
  %785 = fmul float %775, %754
  %786 = fadd float %785, %784
  %787 = fcmp ogt float %786, 0.000000e+00
  br i1 %787, label %791, label %788

788:                                              ; preds = %782
  br label %791

789:                                              ; preds = %772
  %790 = fdiv float %774, %752
  br label %791

791:                                              ; preds = %789, %788, %782
  %792 = phi float [ -1.000000e+06, %788 ], [ %790, %789 ], [ 1.000000e+06, %782 ]
  %793 = extractelement <2 x float> %84, i32 0
  %794 = extractelement <2 x float> %27, i32 0
  %795 = fmul float %85, %793
  %796 = fdiv float %795, %752
  %797 = fdiv float %796, %794
  %798 = fadd float %797, -1.000000e+00
  %799 = call float @llvm.fabs.f32(float %798) #10
  %800 = fcmp ogt float %799, 0x3EE4F8B580000000
  br i1 %800, label %801, label %808

801:                                              ; preds = %791
  %802 = fsub float 1.000000e+00, %754
  %803 = fmul float %793, %802
  %804 = fmul float %794, %754
  %805 = fadd float %804, %803
  %806 = fcmp ogt float %805, 0.000000e+00
  br i1 %806, label %810, label %807

807:                                              ; preds = %801
  br label %810

808:                                              ; preds = %791
  %809 = fdiv float %793, %752
  br label %810

810:                                              ; preds = %801, %807, %808
  %811 = phi float [ -1.000000e+06, %807 ], [ %809, %808 ], [ 1.000000e+06, %801 ]
  %812 = insertelement <2 x float> undef, float %773, i32 0
  %813 = insertelement <2 x float> %812, float %792, i32 1
  %814 = icmp sgt i32 %751, 0
  br i1 %814, label %815, label %856

815:                                              ; preds = %810
  %816 = add nsw i32 %751, -1
  %817 = sext i32 %816 to i64
  %818 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %2, i64 %817, i32 0
  %819 = load float, float* %818, align 4
  %820 = fsub float %819, %773
  %821 = call float @llvm.fabs.f32(float %819) #10
  %822 = call float @llvm.fabs.f32(float %773) #10
  %823 = fcmp olt float %821, %822
  %824 = select i1 %823, float %822, float %821
  %825 = fcmp olt float %824, 0x3EE4F8B580000000
  %826 = call float @llvm.fabs.f32(float %820) #10
  %827 = select i1 %825, float 0x3EE4F8B580000000, float %824
  %828 = fmul float %827, 0x3EE4F8B580000000
  %829 = fcmp olt float %826, %828
  br i1 %829, label %830, label %856

830:                                              ; preds = %815
  %831 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %2, i64 %817, i32 1
  %832 = load float, float* %831, align 4
  %833 = fsub float %832, %792
  %834 = call float @llvm.fabs.f32(float %832) #10
  %835 = call float @llvm.fabs.f32(float %792) #10
  %836 = fcmp olt float %834, %835
  %837 = select i1 %836, float %835, float %834
  %838 = fcmp olt float %837, 0x3EE4F8B580000000
  %839 = call float @llvm.fabs.f32(float %833) #10
  %840 = select i1 %838, float 0x3EE4F8B580000000, float %837
  %841 = fmul float %840, 0x3EE4F8B580000000
  %842 = fcmp olt float %839, %841
  br i1 %842, label %843, label %856

843:                                              ; preds = %830
  %844 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %2, i64 %817, i32 2
  %845 = load float, float* %844, align 4
  %846 = fsub float %845, %811
  %847 = call float @llvm.fabs.f32(float %845) #10
  %848 = call float @llvm.fabs.f32(float %811) #10
  %849 = fcmp olt float %847, %848
  %850 = select i1 %849, float %848, float %847
  %851 = fcmp olt float %850, 0x3EE4F8B580000000
  %852 = call float @llvm.fabs.f32(float %846) #10
  %853 = select i1 %851, float 0x3EE4F8B580000000, float %850
  %854 = fmul float %853, 0x3EE4F8B580000000
  %855 = fcmp olt float %852, %854
  br i1 %855, label %863, label %856

856:                                              ; preds = %843, %830, %815, %810
  %857 = sext i32 %751 to i64
  %858 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %2, i64 %857
  %859 = bitcast %"class.gfx::Point3F"* %858 to <2 x float>*
  store <2 x float> %813, <2 x float>* %859, align 4
  %860 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %2, i64 %857, i32 2
  store float %811, float* %860, align 4
  %861 = load i32, i32* %3, align 4
  %862 = add nsw i32 %861, 1
  store i32 %862, i32* %3, align 4
  br label %863

863:                                              ; preds = %747, %843, %745, %856
  %864 = phi i32 [ %862, %856 ], [ %746, %745 ], [ %749, %747 ], [ %751, %843 ]
  %865 = icmp sgt i32 %864, 2
  br i1 %865, label %866, label %914

866:                                              ; preds = %863
  %867 = add nsw i32 %864, -1
  %868 = sext i32 %867 to i64
  %869 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %2, i64 0, i32 0
  %870 = load float, float* %869, align 4
  %871 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %2, i64 %868, i32 0
  %872 = load float, float* %871, align 4
  %873 = fsub float %870, %872
  %874 = call float @llvm.fabs.f32(float %870) #10
  %875 = call float @llvm.fabs.f32(float %872) #10
  %876 = fcmp olt float %874, %875
  %877 = select i1 %876, float %875, float %874
  %878 = fcmp olt float %877, 0x3EE4F8B580000000
  %879 = call float @llvm.fabs.f32(float %873) #10
  %880 = select i1 %878, float 0x3EE4F8B580000000, float %877
  %881 = fmul float %880, 0x3EE4F8B580000000
  %882 = fcmp olt float %879, %881
  br i1 %882, label %883, label %914

883:                                              ; preds = %866
  %884 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %2, i64 0, i32 1
  %885 = load float, float* %884, align 4
  %886 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %2, i64 %868, i32 1
  %887 = load float, float* %886, align 4
  %888 = fsub float %885, %887
  %889 = call float @llvm.fabs.f32(float %885) #10
  %890 = call float @llvm.fabs.f32(float %887) #10
  %891 = fcmp olt float %889, %890
  %892 = select i1 %891, float %890, float %889
  %893 = fcmp olt float %892, 0x3EE4F8B580000000
  %894 = call float @llvm.fabs.f32(float %888) #10
  %895 = select i1 %893, float 0x3EE4F8B580000000, float %892
  %896 = fmul float %895, 0x3EE4F8B580000000
  %897 = fcmp olt float %894, %896
  br i1 %897, label %898, label %914

898:                                              ; preds = %883
  %899 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %2, i64 0, i32 2
  %900 = load float, float* %899, align 4
  %901 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %2, i64 %868, i32 2
  %902 = load float, float* %901, align 4
  %903 = fsub float %900, %902
  %904 = call float @llvm.fabs.f32(float %900) #10
  %905 = call float @llvm.fabs.f32(float %902) #10
  %906 = fcmp olt float %904, %905
  %907 = select i1 %906, float %905, float %904
  %908 = fcmp olt float %907, 0x3EE4F8B580000000
  %909 = call float @llvm.fabs.f32(float %903) #10
  %910 = select i1 %908, float 0x3EE4F8B580000000, float %907
  %911 = fmul float %910, 0x3EE4F8B580000000
  %912 = fcmp olt float %909, %911
  br i1 %912, label %913, label %914

913:                                              ; preds = %898
  store i32 %867, i32* %3, align 4
  br label %914

914:                                              ; preds = %866, %883, %913, %898, %863
  %915 = phi i32 [ %864, %866 ], [ %864, %883 ], [ %867, %913 ], [ %864, %898 ], [ %864, %863 ]
  %916 = icmp sgt i32 %915, 3
  ret i1 %916
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden { <2 x float>, <2 x float> } @_ZN2cc8MathUtil30ComputeEnclosingRectOfVerticesEPKN3gfx6PointFEi(%"class.gfx::PointF"* nocapture readonly, i32) local_unnamed_addr #5 align 2 {
  %3 = icmp slt i32 %1, 2
  br i1 %3, label %73, label %4

4:                                                ; preds = %2
  %5 = zext i32 %1 to i64
  %6 = and i64 %5, 1
  %7 = sub nsw i64 %5, %6
  br label %38

8:                                                ; preds = %38
  %9 = icmp eq i64 %6, 0
  br i1 %9, label %23, label %10

10:                                               ; preds = %8
  %11 = getelementptr inbounds %"class.gfx::PointF", %"class.gfx::PointF"* %0, i64 %70, i32 0
  %12 = load float, float* %11, align 4
  %13 = getelementptr inbounds %"class.gfx::PointF", %"class.gfx::PointF"* %0, i64 %70, i32 1
  %14 = load float, float* %13, align 4
  %15 = fcmp olt float %14, %69
  %16 = select i1 %15, float %69, float %14
  %17 = fcmp olt float %67, %14
  %18 = select i1 %17, float %67, float %14
  %19 = fcmp olt float %12, %63
  %20 = select i1 %19, float %63, float %12
  %21 = fcmp olt float %61, %12
  %22 = select i1 %21, float %61, float %12
  br label %23

23:                                               ; preds = %8, %10
  %24 = phi float [ %61, %8 ], [ %22, %10 ]
  %25 = phi float [ %63, %8 ], [ %20, %10 ]
  %26 = phi float [ %67, %8 ], [ %18, %10 ]
  %27 = phi float [ %69, %8 ], [ %16, %10 ]
  %28 = fsub float %25, %24
  %29 = fsub float %27, %26
  %30 = fcmp ogt float %28, 0x3EB0000000000000
  %31 = select i1 %30, float %28, float 0.000000e+00
  %32 = fcmp ogt float %29, 0x3EB0000000000000
  %33 = select i1 %32, float %29, float 0.000000e+00
  %34 = insertelement <2 x float> undef, float %24, i32 0
  %35 = insertelement <2 x float> %34, float %26, i32 1
  %36 = insertelement <2 x float> undef, float %31, i32 0
  %37 = insertelement <2 x float> %36, float %33, i32 1
  br label %73

38:                                               ; preds = %38, %4
  %39 = phi i64 [ 0, %4 ], [ %70, %38 ]
  %40 = phi float [ 0xC7EFFFFFE0000000, %4 ], [ %69, %38 ]
  %41 = phi float [ 0x47EFFFFFE0000000, %4 ], [ %67, %38 ]
  %42 = phi float [ 0xC7EFFFFFE0000000, %4 ], [ %63, %38 ]
  %43 = phi float [ 0x47EFFFFFE0000000, %4 ], [ %61, %38 ]
  %44 = phi i64 [ %7, %4 ], [ %71, %38 ]
  %45 = getelementptr inbounds %"class.gfx::PointF", %"class.gfx::PointF"* %0, i64 %39, i32 0
  %46 = load float, float* %45, align 4
  %47 = fcmp olt float %43, %46
  %48 = select i1 %47, float %43, float %46
  %49 = fcmp olt float %46, %42
  %50 = select i1 %49, float %42, float %46
  %51 = getelementptr inbounds %"class.gfx::PointF", %"class.gfx::PointF"* %0, i64 %39, i32 1
  %52 = load float, float* %51, align 4
  %53 = fcmp olt float %41, %52
  %54 = select i1 %53, float %41, float %52
  %55 = fcmp olt float %52, %40
  %56 = select i1 %55, float %40, float %52
  %57 = or i64 %39, 1
  %58 = getelementptr inbounds %"class.gfx::PointF", %"class.gfx::PointF"* %0, i64 %57, i32 0
  %59 = load float, float* %58, align 4
  %60 = fcmp olt float %48, %59
  %61 = select i1 %60, float %48, float %59
  %62 = fcmp olt float %59, %50
  %63 = select i1 %62, float %50, float %59
  %64 = getelementptr inbounds %"class.gfx::PointF", %"class.gfx::PointF"* %0, i64 %57, i32 1
  %65 = load float, float* %64, align 4
  %66 = fcmp olt float %54, %65
  %67 = select i1 %66, float %54, float %65
  %68 = fcmp olt float %65, %56
  %69 = select i1 %68, float %56, float %65
  %70 = add nuw nsw i64 %39, 2
  %71 = add i64 %44, -2
  %72 = icmp eq i64 %71, 0
  br i1 %72, label %8, label %38

73:                                               ; preds = %2, %23
  %74 = phi <2 x float> [ %35, %23 ], [ zeroinitializer, %2 ]
  %75 = phi <2 x float> [ %37, %23 ], [ zeroinitializer, %2 ]
  %76 = insertvalue { <2 x float>, <2 x float> } undef, <2 x float> %74, 0
  %77 = insertvalue { <2 x float>, <2 x float> } %76, <2 x float> %75, 1
  ret { <2 x float>, <2 x float> } %77
}

declare void @_ZN3gfx5QuadFpLERKNS_9Vector2dFE(%"class.gfx::QuadF"*, %"class.gfx::Vector2dF"* dereferenceable(8)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden <2 x float> @_ZN2cc8MathUtil8MapPointERKN3gfx9TransformERKNS1_6PointFEPb(%"class.gfx::Transform"* dereferenceable(68), %"class.gfx::PointF"* nocapture readonly dereferenceable(8), i8* nocapture) local_unnamed_addr #4 align 2 {
  %4 = alloca { <2 x float>, <2 x float> }, align 8
  %5 = bitcast %"class.gfx::PointF"* %1 to i32*
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.gfx::PointF", %"class.gfx::PointF"* %1, i64 0, i32 1
  %8 = bitcast float* %7 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = bitcast { <2 x float>, <2 x float> }* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %10)
  %11 = bitcast { <2 x float>, <2 x float> }* %4 to %"struct.cc::HomogeneousCoordinate"*
  %12 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %4, i64 0, i32 0, i64 0
  %13 = getelementptr inbounds %"struct.cc::HomogeneousCoordinate", %"struct.cc::HomogeneousCoordinate"* %11, i64 0, i32 0, i64 1
  %14 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %4, i64 0, i32 1, i64 0
  %15 = getelementptr inbounds %"struct.cc::HomogeneousCoordinate", %"struct.cc::HomogeneousCoordinate"* %11, i64 0, i32 0, i64 3
  %16 = bitcast { <2 x float>, <2 x float> }* %4 to i32*
  store i32 %6, i32* %16, align 8
  %17 = bitcast float* %13 to i32*
  store i32 %9, i32* %17, align 4
  %18 = bitcast float* %14 to i32*
  store i32 0, i32* %18, align 8
  store float 1.000000e+00, float* %15, align 4
  %19 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %0, i64 0, i32 0
  call void @_ZNK10SkMatrix4410mapScalarsEPKfPf(%class.SkMatrix44* %19, float* nonnull %12, float* nonnull %12) #10
  %20 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %4, i64 0, i32 0
  %21 = load <2 x float>, <2 x float>* %20, align 8
  %22 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %4, i64 0, i32 1
  %23 = load <2 x float>, <2 x float>* %22, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10)
  %24 = extractelement <2 x float> %23, i32 1
  %25 = fcmp ogt float %24, 0.000000e+00
  br i1 %25, label %26, label %44

26:                                               ; preds = %3
  store i8 0, i8* %2, align 1
  %27 = fcmp oeq float %24, 1.000000e+00
  br i1 %27, label %64, label %28

28:                                               ; preds = %26
  %29 = fdiv float 1.000000e+00, %24
  %30 = extractelement <2 x float> %21, i32 0
  %31 = fmul float %30, %29
  %32 = fcmp olt float %31, -1.000000e+06
  %33 = select i1 %32, float -1.000000e+06, float %31
  %34 = fcmp ogt float %33, 1.000000e+06
  %35 = select i1 %34, float 1.000000e+06, float %33
  %36 = extractelement <2 x float> %21, i32 1
  %37 = fmul float %36, %29
  %38 = fcmp olt float %37, -1.000000e+06
  %39 = select i1 %38, float -1.000000e+06, float %37
  %40 = fcmp ogt float %39, 1.000000e+06
  %41 = select i1 %40, float 1.000000e+06, float %39
  %42 = insertelement <2 x float> undef, float %35, i32 0
  %43 = insertelement <2 x float> %42, float %41, i32 1
  br label %64

44:                                               ; preds = %3
  store i8 1, i8* %2, align 1
  %45 = fcmp une float %24, 0.000000e+00
  br i1 %45, label %46, label %64

46:                                               ; preds = %44
  %47 = fcmp oeq float %24, 1.000000e+00
  br i1 %47, label %64, label %48

48:                                               ; preds = %46
  %49 = fdiv float 1.000000e+00, %24
  %50 = extractelement <2 x float> %21, i32 0
  %51 = fmul float %50, %49
  %52 = fcmp olt float %51, -1.000000e+06
  %53 = select i1 %52, float -1.000000e+06, float %51
  %54 = fcmp ogt float %53, 1.000000e+06
  %55 = select i1 %54, float 1.000000e+06, float %53
  %56 = extractelement <2 x float> %21, i32 1
  %57 = fmul float %56, %49
  %58 = fcmp olt float %57, -1.000000e+06
  %59 = select i1 %58, float -1.000000e+06, float %57
  %60 = fcmp ogt float %59, 1.000000e+06
  %61 = select i1 %60, float 1.000000e+06, float %59
  %62 = insertelement <2 x float> undef, float %55, i32 0
  %63 = insertelement <2 x float> %62, float %61, i32 1
  br label %64

64:                                               ; preds = %46, %26, %48, %44, %28
  %65 = phi <2 x float> [ %43, %28 ], [ zeroinitializer, %44 ], [ %63, %48 ], [ %21, %26 ], [ %21, %46 ]
  ret <2 x float> %65
}

; Function Attrs: nounwind ssp uwtable
define hidden <2 x float> @_ZN2cc8MathUtil12ProjectPointERKN3gfx9TransformERKNS1_6PointFEPb(%"class.gfx::Transform"* dereferenceable(68), %"class.gfx::PointF"* nocapture readonly dereferenceable(8), i8* nocapture) local_unnamed_addr #4 align 2 {
  %4 = alloca %"struct.cc::HomogeneousCoordinate", align 8
  %5 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %0, i64 0, i32 0, i32 0, i64 0, i64 2
  %6 = load float, float* %5, align 4
  %7 = getelementptr inbounds %"class.gfx::PointF", %"class.gfx::PointF"* %1, i64 0, i32 0
  %8 = load float, float* %7, align 4
  %9 = fmul float %6, %8
  %10 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %0, i64 0, i32 0, i32 0, i64 1, i64 2
  %11 = load float, float* %10, align 4
  %12 = getelementptr inbounds %"class.gfx::PointF", %"class.gfx::PointF"* %1, i64 0, i32 1
  %13 = load float, float* %12, align 4
  %14 = fmul float %11, %13
  %15 = fadd float %9, %14
  %16 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %0, i64 0, i32 0, i32 0, i64 3, i64 2
  %17 = load float, float* %16, align 4
  %18 = fadd float %17, %15
  %19 = fsub float -0.000000e+00, %18
  %20 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %0, i64 0, i32 0, i32 0, i64 2, i64 2
  %21 = load float, float* %20, align 4
  %22 = fdiv float %19, %21
  %23 = tail call float @llvm.fabs.f32(float %22) #14
  %24 = fcmp ueq float %23, 0x7FF0000000000000
  br i1 %24, label %36, label %25

25:                                               ; preds = %3
  %26 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %0, i64 0, i32 0
  %27 = bitcast %"struct.cc::HomogeneousCoordinate"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %27) #10
  %28 = getelementptr inbounds %"struct.cc::HomogeneousCoordinate", %"struct.cc::HomogeneousCoordinate"* %4, i64 0, i32 0, i64 0
  %29 = getelementptr inbounds %"struct.cc::HomogeneousCoordinate", %"struct.cc::HomogeneousCoordinate"* %4, i64 0, i32 0, i64 1
  %30 = getelementptr inbounds %"struct.cc::HomogeneousCoordinate", %"struct.cc::HomogeneousCoordinate"* %4, i64 0, i32 0, i64 2
  %31 = getelementptr inbounds %"struct.cc::HomogeneousCoordinate", %"struct.cc::HomogeneousCoordinate"* %4, i64 0, i32 0, i64 3
  store float %8, float* %28, align 8
  store float %13, float* %29, align 4
  store float %22, float* %30, align 8
  store float 1.000000e+00, float* %31, align 4
  call void @_ZNK10SkMatrix4410mapScalarsEPKfPf(%class.SkMatrix44* %26, float* nonnull %28, float* nonnull %28) #10
  %32 = bitcast %"struct.cc::HomogeneousCoordinate"* %4 to <2 x float>*
  %33 = load <2 x float>, <2 x float>* %32, align 8
  %34 = bitcast float* %30 to <2 x float>*
  %35 = load <2 x float>, <2 x float>* %34, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %27) #10
  br label %36

36:                                               ; preds = %3, %25
  %37 = phi <2 x float> [ %35, %25 ], [ <float 0.000000e+00, float 1.000000e+00>, %3 ]
  %38 = phi <2 x float> [ %33, %25 ], [ zeroinitializer, %3 ]
  %39 = extractelement <2 x float> %37, i32 1
  %40 = fcmp ole float %39, 0.000000e+00
  %41 = zext i1 %40 to i8
  store i8 %41, i8* %2, align 1
  %42 = fcmp une float %39, 0.000000e+00
  br i1 %42, label %43, label %61

43:                                               ; preds = %36
  %44 = fcmp oeq float %39, 1.000000e+00
  br i1 %44, label %61, label %45

45:                                               ; preds = %43
  %46 = fdiv float 1.000000e+00, %39
  %47 = extractelement <2 x float> %38, i32 0
  %48 = fmul float %46, %47
  %49 = fcmp olt float %48, -1.000000e+06
  %50 = select i1 %49, float -1.000000e+06, float %48
  %51 = fcmp ogt float %50, 1.000000e+06
  %52 = select i1 %51, float 1.000000e+06, float %50
  %53 = extractelement <2 x float> %38, i32 1
  %54 = fmul float %46, %53
  %55 = fcmp olt float %54, -1.000000e+06
  %56 = select i1 %55, float -1.000000e+06, float %54
  %57 = fcmp ogt float %56, 1.000000e+06
  %58 = select i1 %57, float 1.000000e+06, float %56
  %59 = insertelement <2 x float> undef, float %52, i32 0
  %60 = insertelement <2 x float> %59, float %58, i32 1
  br label %61

61:                                               ; preds = %43, %45, %36
  %62 = phi <2 x float> [ zeroinitializer, %36 ], [ %60, %45 ], [ %38, %43 ]
  ret <2 x float> %62
}

; Function Attrs: nounwind ssp uwtable
define hidden { <2 x float>, float } @_ZN2cc8MathUtil14ProjectPoint3DERKN3gfx9TransformERKNS1_6PointFEPb(%"class.gfx::Transform"* dereferenceable(68), %"class.gfx::PointF"* nocapture readonly dereferenceable(8), i8* nocapture) local_unnamed_addr #0 align 2 {
  %4 = alloca %"struct.cc::HomogeneousCoordinate", align 8
  %5 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %0, i64 0, i32 0, i32 0, i64 0, i64 2
  %6 = load float, float* %5, align 4
  %7 = getelementptr inbounds %"class.gfx::PointF", %"class.gfx::PointF"* %1, i64 0, i32 0
  %8 = load float, float* %7, align 4
  %9 = fmul float %6, %8
  %10 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %0, i64 0, i32 0, i32 0, i64 1, i64 2
  %11 = load float, float* %10, align 4
  %12 = getelementptr inbounds %"class.gfx::PointF", %"class.gfx::PointF"* %1, i64 0, i32 1
  %13 = load float, float* %12, align 4
  %14 = fmul float %11, %13
  %15 = fadd float %9, %14
  %16 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %0, i64 0, i32 0, i32 0, i64 3, i64 2
  %17 = load float, float* %16, align 4
  %18 = fadd float %17, %15
  %19 = fsub float -0.000000e+00, %18
  %20 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %0, i64 0, i32 0, i32 0, i64 2, i64 2
  %21 = load float, float* %20, align 4
  %22 = fdiv float %19, %21
  %23 = tail call float @llvm.fabs.f32(float %22) #14
  %24 = fcmp ueq float %23, 0x7FF0000000000000
  br i1 %24, label %36, label %25

25:                                               ; preds = %3
  %26 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %0, i64 0, i32 0
  %27 = bitcast %"struct.cc::HomogeneousCoordinate"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %27) #10
  %28 = getelementptr inbounds %"struct.cc::HomogeneousCoordinate", %"struct.cc::HomogeneousCoordinate"* %4, i64 0, i32 0, i64 0
  %29 = getelementptr inbounds %"struct.cc::HomogeneousCoordinate", %"struct.cc::HomogeneousCoordinate"* %4, i64 0, i32 0, i64 1
  %30 = getelementptr inbounds %"struct.cc::HomogeneousCoordinate", %"struct.cc::HomogeneousCoordinate"* %4, i64 0, i32 0, i64 2
  %31 = getelementptr inbounds %"struct.cc::HomogeneousCoordinate", %"struct.cc::HomogeneousCoordinate"* %4, i64 0, i32 0, i64 3
  store float %8, float* %28, align 8
  store float %13, float* %29, align 4
  store float %22, float* %30, align 8
  store float 1.000000e+00, float* %31, align 4
  call void @_ZNK10SkMatrix4410mapScalarsEPKfPf(%class.SkMatrix44* %26, float* nonnull %28, float* nonnull %28) #10
  %32 = bitcast %"struct.cc::HomogeneousCoordinate"* %4 to <2 x float>*
  %33 = load <2 x float>, <2 x float>* %32, align 8
  %34 = bitcast float* %30 to <2 x float>*
  %35 = load <2 x float>, <2 x float>* %34, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %27) #10
  br label %36

36:                                               ; preds = %3, %25
  %37 = phi <2 x float> [ %35, %25 ], [ <float 0.000000e+00, float 1.000000e+00>, %3 ]
  %38 = phi <2 x float> [ %33, %25 ], [ zeroinitializer, %3 ]
  %39 = extractelement <2 x float> %37, i32 1
  %40 = fcmp ole float %39, 0.000000e+00
  %41 = zext i1 %40 to i8
  store i8 %41, i8* %2, align 1
  %42 = fcmp une float %39, 0.000000e+00
  br i1 %42, label %43, label %69

43:                                               ; preds = %36
  %44 = fcmp oeq float %39, 1.000000e+00
  br i1 %44, label %45, label %47

45:                                               ; preds = %43
  %46 = extractelement <2 x float> %37, i32 0
  br label %69

47:                                               ; preds = %43
  %48 = fdiv float 1.000000e+00, %39
  %49 = extractelement <2 x float> %38, i32 0
  %50 = fmul float %48, %49
  %51 = fcmp olt float %50, -1.000000e+06
  %52 = select i1 %51, float -1.000000e+06, float %50
  %53 = fcmp ogt float %52, 1.000000e+06
  %54 = select i1 %53, float 1.000000e+06, float %52
  %55 = extractelement <2 x float> %38, i32 1
  %56 = fmul float %48, %55
  %57 = fcmp olt float %56, -1.000000e+06
  %58 = select i1 %57, float -1.000000e+06, float %56
  %59 = fcmp ogt float %58, 1.000000e+06
  %60 = select i1 %59, float 1.000000e+06, float %58
  %61 = extractelement <2 x float> %37, i32 0
  %62 = fmul float %61, %48
  %63 = fcmp olt float %62, -1.000000e+06
  %64 = select i1 %63, float -1.000000e+06, float %62
  %65 = fcmp ogt float %64, 1.000000e+06
  %66 = select i1 %65, float 1.000000e+06, float %64
  %67 = insertelement <2 x float> undef, float %54, i32 0
  %68 = insertelement <2 x float> %67, float %60, i32 1
  br label %69

69:                                               ; preds = %47, %45, %36
  %70 = phi float [ 0.000000e+00, %36 ], [ %46, %45 ], [ %66, %47 ]
  %71 = phi <2 x float> [ zeroinitializer, %36 ], [ %38, %45 ], [ %68, %47 ]
  %72 = insertvalue { <2 x float>, float } undef, <2 x float> %71, 0
  %73 = insertvalue { <2 x float>, float } %72, float %70, 1
  ret { <2 x float>, float } %73
}

; Function Attrs: nounwind ssp uwtable
define hidden { <2 x float>, <2 x float> } @_ZN2cc8MathUtil21ScaleRectProportionalERKN3gfx5RectFES4_S4_(%"class.gfx::RectF"* nocapture readonly dereferenceable(16), %"class.gfx::RectF"* nocapture readonly dereferenceable(16), %"class.gfx::RectF"* nocapture readonly dereferenceable(16)) local_unnamed_addr #4 align 2 {
  %4 = alloca { <2 x float>, <2 x float> }, align 8
  %5 = bitcast { <2 x float>, <2 x float> }* %4 to %"class.gfx::RectF"*
  %6 = bitcast { <2 x float>, <2 x float> }* %4 to i8*
  %7 = bitcast %"class.gfx::RectF"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %6, i8* align 4 %7, i64 16, i1 false)
  %8 = getelementptr inbounds %"class.gfx::RectF", %"class.gfx::RectF"* %1, i64 0, i32 1, i32 0
  %9 = load float, float* %8, align 4
  %10 = getelementptr inbounds %"class.gfx::RectF", %"class.gfx::RectF"* %0, i64 0, i32 1, i32 0
  %11 = load float, float* %10, align 4
  %12 = fdiv float %9, %11
  %13 = getelementptr inbounds %"class.gfx::RectF", %"class.gfx::RectF"* %1, i64 0, i32 1, i32 1
  %14 = load float, float* %13, align 4
  %15 = getelementptr inbounds %"class.gfx::RectF", %"class.gfx::RectF"* %0, i64 0, i32 1, i32 1
  %16 = load float, float* %15, align 4
  %17 = fdiv float %14, %16
  %18 = getelementptr inbounds %"class.gfx::RectF", %"class.gfx::RectF"* %2, i64 0, i32 0, i32 0
  %19 = load float, float* %18, align 4
  %20 = getelementptr inbounds %"class.gfx::RectF", %"class.gfx::RectF"* %1, i64 0, i32 0, i32 0
  %21 = load float, float* %20, align 4
  %22 = fsub float %19, %21
  %23 = getelementptr inbounds %"class.gfx::RectF", %"class.gfx::RectF"* %2, i64 0, i32 0, i32 1
  %24 = load float, float* %23, align 4
  %25 = getelementptr inbounds %"class.gfx::RectF", %"class.gfx::RectF"* %1, i64 0, i32 0, i32 1
  %26 = load float, float* %25, align 4
  %27 = fsub float %24, %26
  %28 = getelementptr inbounds %"class.gfx::RectF", %"class.gfx::RectF"* %2, i64 0, i32 1, i32 0
  %29 = load float, float* %28, align 4
  %30 = fadd float %19, %29
  %31 = getelementptr inbounds %"class.gfx::RectF", %"class.gfx::RectF"* %2, i64 0, i32 1, i32 1
  %32 = load float, float* %31, align 4
  %33 = fadd float %24, %32
  %34 = fadd float %9, %21
  %35 = fadd float %14, %26
  %36 = fsub float %30, %34
  %37 = fsub float %33, %35
  %38 = fdiv float %22, %12
  %39 = fdiv float %27, %17
  %40 = fsub float -0.000000e+00, %36
  %41 = fdiv float %40, %12
  %42 = fsub float -0.000000e+00, %37
  %43 = fdiv float %42, %17
  call void @_ZN3gfx5RectF5InsetEffff(%"class.gfx::RectF"* nonnull %5, float %38, float %39, float %41, float %43) #10
  %44 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %4, i64 0, i32 0
  %45 = load <2 x float>, <2 x float>* %44, align 8
  %46 = insertvalue { <2 x float>, <2 x float> } undef, <2 x float> %45, 0
  %47 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %4, i64 0, i32 1
  %48 = load <2 x float>, <2 x float>* %47, align 8
  %49 = insertvalue { <2 x float>, <2 x float> } %46, <2 x float> %48, 1
  ret { <2 x float>, <2 x float> } %49
}

declare void @_ZN3gfx5RectF5InsetEffff(%"class.gfx::RectF"*, float, float, float, float) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden float @_ZN2cc8MathUtil27SmallestAngleBetweenVectorsERKN3gfx9Vector2dFES4_(%"class.gfx::Vector2dF"* dereferenceable(8), %"class.gfx::Vector2dF"* dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %3 = tail call double @_ZN3gfx10DotProductERKNS_9Vector2dFES2_(%"class.gfx::Vector2dF"* dereferenceable(8) %0, %"class.gfx::Vector2dF"* dereferenceable(8) %1) #10
  %4 = tail call float @_ZNK3gfx9Vector2dF6LengthEv(%"class.gfx::Vector2dF"* %0) #10
  %5 = fpext float %4 to double
  %6 = fdiv double %3, %5
  %7 = tail call float @_ZNK3gfx9Vector2dF6LengthEv(%"class.gfx::Vector2dF"* %1) #10
  %8 = fpext float %7 to double
  %9 = fdiv double %6, %8
  %10 = fcmp olt double %9, -1.000000e+00
  %11 = select i1 %10, double -1.000000e+00, double %9
  %12 = fcmp ogt double %11, 1.000000e+00
  %13 = select i1 %12, double 1.000000e+00, double %11
  %14 = tail call double @acos(double %13) #10
  %15 = fmul double %14, 1.800000e+02
  %16 = fdiv double %15, 0x400921FB54442D18
  %17 = fptrunc double %16 to float
  ret float %17
}

declare double @_ZN3gfx10DotProductERKNS_9Vector2dFES2_(%"class.gfx::Vector2dF"* dereferenceable(8), %"class.gfx::Vector2dF"* dereferenceable(8)) local_unnamed_addr #1

declare float @_ZNK3gfx9Vector2dF6LengthEv(%"class.gfx::Vector2dF"*) local_unnamed_addr #1

; Function Attrs: nofree nounwind
declare double @acos(double) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define hidden <2 x float> @_ZN2cc8MathUtil13ProjectVectorERKN3gfx9Vector2dFES4_(%"class.gfx::Vector2dF"* dereferenceable(8), %"class.gfx::Vector2dF"* dereferenceable(8)) local_unnamed_addr #4 align 2 {
  %3 = tail call double @_ZN3gfx10DotProductERKNS_9Vector2dFES2_(%"class.gfx::Vector2dF"* dereferenceable(8) %0, %"class.gfx::Vector2dF"* dereferenceable(8) %1) #10
  %4 = tail call double @_ZNK3gfx9Vector2dF13LengthSquaredEv(%"class.gfx::Vector2dF"* %1) #10
  %5 = fdiv double %3, %4
  %6 = fptrunc double %5 to float
  %7 = bitcast %"class.gfx::Vector2dF"* %1 to <2 x float>*
  %8 = load <2 x float>, <2 x float>* %7, align 4
  %9 = insertelement <2 x float> undef, float %6, i32 0
  %10 = shufflevector <2 x float> %9, <2 x float> undef, <2 x i32> zeroinitializer
  %11 = fmul <2 x float> %8, %10
  ret <2 x float> %11
}

declare double @_ZNK3gfx9Vector2dF13LengthSquaredEv(%"class.gfx::Vector2dF"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2cc8MathUtil9FromValueEPKN4base5ValueEPN3gfx4RectE(%"class.base::Value"*, %"class.gfx::Rect"* nocapture) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.base::ListValue"*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = bitcast %"class.base::ListValue"** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #10
  store %"class.base::ListValue"* null, %"class.base::ListValue"** %3, align 8
  %9 = call zeroext i1 @_ZNK4base5Value9GetAsListEPPKNS_9ListValueE(%"class.base::Value"* %0, %"class.base::ListValue"** nonnull %3) #10
  br i1 %9, label %10, label %68

10:                                               ; preds = %2
  %11 = load %"class.base::ListValue"*, %"class.base::ListValue"** %3, align 8
  %12 = getelementptr inbounds %"class.base::ListValue", %"class.base::ListValue"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %13 = load i64, i64* %12, align 8
  %14 = icmp eq i64 %13, 7
  br i1 %14, label %17, label %15, !prof !2

15:                                               ; preds = %10
  %16 = call dereferenceable(24) %"class.std::__1::vector.20"* @_ZN4absl16variant_internal26TypedThrowBadVariantAccessIRKNSt3__16vectorIN4base5ValueENS2_9allocatorIS5_EEEEEET_v() #15
  unreachable

17:                                               ; preds = %10
  %18 = getelementptr inbounds %"class.base::ListValue", %"class.base::ListValue"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %19 = load i64, i64* %18, align 8
  %20 = bitcast %"class.base::ListValue"* %11 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = sub i64 %19, %21
  %23 = icmp eq i64 %22, 128
  br i1 %23, label %24, label %68

24:                                               ; preds = %17
  %25 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %25) #10
  store i32 -1431655766, i32* %4, align 4
  %26 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %26) #10
  store i32 -1431655766, i32* %5, align 4
  %27 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %27) #10
  store i32 -1431655766, i32* %6, align 4
  %28 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %28) #10
  store i32 -1431655766, i32* %7, align 4
  %29 = call zeroext i1 @_ZNK4base9ListValue10GetIntegerEmPi(%"class.base::ListValue"* %11, i64 0, i32* nonnull %4) #10
  %30 = load %"class.base::ListValue"*, %"class.base::ListValue"** %3, align 8
  %31 = call zeroext i1 @_ZNK4base9ListValue10GetIntegerEmPi(%"class.base::ListValue"* %30, i64 1, i32* nonnull %5) #10
  %32 = and i1 %29, %31
  %33 = load %"class.base::ListValue"*, %"class.base::ListValue"** %3, align 8
  %34 = call zeroext i1 @_ZNK4base9ListValue10GetIntegerEmPi(%"class.base::ListValue"* %33, i64 2, i32* nonnull %6) #10
  %35 = and i1 %32, %34
  %36 = load %"class.base::ListValue"*, %"class.base::ListValue"** %3, align 8
  %37 = call zeroext i1 @_ZNK4base9ListValue10GetIntegerEmPi(%"class.base::ListValue"* %36, i64 3, i32* nonnull %7) #10
  %38 = and i1 %35, %37
  br i1 %38, label %39, label %66

39:                                               ; preds = %24
  %40 = load i32, i32* %4, align 4
  %41 = load i32, i32* %5, align 4
  %42 = load i32, i32* %6, align 4
  %43 = load i32, i32* %7, align 4
  %44 = icmp sgt i32 %40, 0
  %45 = icmp sgt i32 %42, 0
  %46 = and i1 %44, %45
  %47 = sub nuw nsw i32 2147483647, %40
  %48 = icmp ult i32 %47, %42
  %49 = and i1 %48, %46
  %50 = select i1 %49, i32 %47, i32 %42
  %51 = icmp sgt i32 %41, 0
  %52 = icmp sgt i32 %43, 0
  %53 = and i1 %51, %52
  %54 = sub nuw nsw i32 2147483647, %41
  %55 = icmp ult i32 %54, %43
  %56 = and i1 %55, %53
  %57 = select i1 %56, i32 %54, i32 %43
  %58 = icmp sgt i32 %50, 0
  %59 = select i1 %58, i32 %50, i32 0
  %60 = icmp sgt i32 %57, 0
  %61 = select i1 %60, i32 %57, i32 0
  %62 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 0, i32 0
  store i32 %40, i32* %62, align 4
  %63 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 0, i32 1
  store i32 %41, i32* %63, align 4
  %64 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 1, i32 0
  store i32 %59, i32* %64, align 4
  %65 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 1, i32 1
  store i32 %61, i32* %65, align 4
  br label %66

66:                                               ; preds = %24, %39
  %67 = phi i1 [ true, %39 ], [ false, %24 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %28) #10
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %27) #10
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %26) #10
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %25) #10
  br label %68

68:                                               ; preds = %17, %2, %66
  %69 = phi i1 [ %67, %66 ], [ false, %2 ], [ false, %17 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #10
  ret i1 %69
}

declare zeroext i1 @_ZNK4base5Value9GetAsListEPPKNS_9ListValueE(%"class.base::Value"*, %"class.base::ListValue"**) local_unnamed_addr #1

declare zeroext i1 @_ZNK4base9ListValue10GetIntegerEmPi(%"class.base::ListValue"*, i64, i32*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc8MathUtil16AddToTracedValueEPKcRKN3gfx4SizeEPN4base11trace_event11TracedValueE(i8*, %"class.gfx::Size"* nocapture readonly dereferenceable(8), %"class.base::trace_event::TracedValue"*) local_unnamed_addr #0 align 2 {
  tail call void @_ZN4base11trace_event11TracedValue15BeginDictionaryEPKc(%"class.base::trace_event::TracedValue"* %2, i8* %0) #10
  %4 = getelementptr inbounds %"class.gfx::Size", %"class.gfx::Size"* %1, i64 0, i32 0
  %5 = load i32, i32* %4, align 4
  %6 = sitofp i32 %5 to double
  tail call void @_ZN4base11trace_event11TracedValue9SetDoubleEPKcd(%"class.base::trace_event::TracedValue"* %2, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0), double %6) #10
  %7 = getelementptr inbounds %"class.gfx::Size", %"class.gfx::Size"* %1, i64 0, i32 1
  %8 = load i32, i32* %7, align 4
  %9 = sitofp i32 %8 to double
  tail call void @_ZN4base11trace_event11TracedValue9SetDoubleEPKcd(%"class.base::trace_event::TracedValue"* %2, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0), double %9) #10
  tail call void @_ZN4base11trace_event11TracedValue13EndDictionaryEv(%"class.base::trace_event::TracedValue"* %2) #10
  ret void
}

declare void @_ZN4base11trace_event11TracedValue15BeginDictionaryEPKc(%"class.base::trace_event::TracedValue"*, i8*) local_unnamed_addr #1

declare void @_ZN4base11trace_event11TracedValue9SetDoubleEPKcd(%"class.base::trace_event::TracedValue"*, i8*, double) local_unnamed_addr #1

declare void @_ZN4base11trace_event11TracedValue13EndDictionaryEv(%"class.base::trace_event::TracedValue"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc8MathUtil16AddToTracedValueEPKcRKN3gfx5SizeFEPN4base11trace_event11TracedValueE(i8*, %"class.gfx::SizeF"* nocapture readonly dereferenceable(8), %"class.base::trace_event::TracedValue"*) local_unnamed_addr #0 align 2 {
  tail call void @_ZN4base11trace_event11TracedValue15BeginDictionaryEPKc(%"class.base::trace_event::TracedValue"* %2, i8* %0) #10
  %4 = getelementptr inbounds %"class.gfx::SizeF", %"class.gfx::SizeF"* %1, i64 0, i32 0
  %5 = load float, float* %4, align 4
  %6 = fpext float %5 to double
  tail call void @_ZN4base11trace_event11TracedValue9SetDoubleEPKcd(%"class.base::trace_event::TracedValue"* %2, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0), double %6) #10
  %7 = getelementptr inbounds %"class.gfx::SizeF", %"class.gfx::SizeF"* %1, i64 0, i32 1
  %8 = load float, float* %7, align 4
  %9 = fpext float %8 to double
  tail call void @_ZN4base11trace_event11TracedValue9SetDoubleEPKcd(%"class.base::trace_event::TracedValue"* %2, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0), double %9) #10
  tail call void @_ZN4base11trace_event11TracedValue13EndDictionaryEv(%"class.base::trace_event::TracedValue"* %2) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc8MathUtil16AddToTracedValueEPKcRKN3gfx4RectEPN4base11trace_event11TracedValueE(i8*, %"class.gfx::Rect"* nocapture readonly dereferenceable(16), %"class.base::trace_event::TracedValue"*) local_unnamed_addr #0 align 2 {
  tail call void @_ZN4base11trace_event11TracedValue10BeginArrayEPKc(%"class.base::trace_event::TracedValue"* %2, i8* %0) #10
  %4 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 0, i32 0
  %5 = load i32, i32* %4, align 4
  tail call void @_ZN4base11trace_event11TracedValue13AppendIntegerEi(%"class.base::trace_event::TracedValue"* %2, i32 %5) #10
  %6 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 0, i32 1
  %7 = load i32, i32* %6, align 4
  tail call void @_ZN4base11trace_event11TracedValue13AppendIntegerEi(%"class.base::trace_event::TracedValue"* %2, i32 %7) #10
  %8 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 1, i32 0
  %9 = load i32, i32* %8, align 4
  tail call void @_ZN4base11trace_event11TracedValue13AppendIntegerEi(%"class.base::trace_event::TracedValue"* %2, i32 %9) #10
  %10 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 1, i32 1
  %11 = load i32, i32* %10, align 4
  tail call void @_ZN4base11trace_event11TracedValue13AppendIntegerEi(%"class.base::trace_event::TracedValue"* %2, i32 %11) #10
  tail call void @_ZN4base11trace_event11TracedValue8EndArrayEv(%"class.base::trace_event::TracedValue"* %2) #10
  ret void
}

declare void @_ZN4base11trace_event11TracedValue10BeginArrayEPKc(%"class.base::trace_event::TracedValue"*, i8*) local_unnamed_addr #1

declare void @_ZN4base11trace_event11TracedValue13AppendIntegerEi(%"class.base::trace_event::TracedValue"*, i32) local_unnamed_addr #1

declare void @_ZN4base11trace_event11TracedValue8EndArrayEv(%"class.base::trace_event::TracedValue"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc8MathUtil16AddToTracedValueEPKcRKN3gfx5PointEPN4base11trace_event11TracedValueE(i8*, %"class.gfx::Point"* nocapture readonly dereferenceable(8), %"class.base::trace_event::TracedValue"*) local_unnamed_addr #0 align 2 {
  tail call void @_ZN4base11trace_event11TracedValue10BeginArrayEPKc(%"class.base::trace_event::TracedValue"* %2, i8* %0) #10
  %4 = getelementptr inbounds %"class.gfx::Point", %"class.gfx::Point"* %1, i64 0, i32 0
  %5 = load i32, i32* %4, align 4
  tail call void @_ZN4base11trace_event11TracedValue13AppendIntegerEi(%"class.base::trace_event::TracedValue"* %2, i32 %5) #10
  %6 = getelementptr inbounds %"class.gfx::Point", %"class.gfx::Point"* %1, i64 0, i32 1
  %7 = load i32, i32* %6, align 4
  tail call void @_ZN4base11trace_event11TracedValue13AppendIntegerEi(%"class.base::trace_event::TracedValue"* %2, i32 %7) #10
  tail call void @_ZN4base11trace_event11TracedValue8EndArrayEv(%"class.base::trace_event::TracedValue"* %2) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc8MathUtil16AddToTracedValueEPKcRKN3gfx6PointFEPN4base11trace_event11TracedValueE(i8*, %"class.gfx::PointF"* nocapture readonly dereferenceable(8), %"class.base::trace_event::TracedValue"*) local_unnamed_addr #0 align 2 {
  tail call void @_ZN4base11trace_event11TracedValue10BeginArrayEPKc(%"class.base::trace_event::TracedValue"* %2, i8* %0) #10
  %4 = getelementptr inbounds %"class.gfx::PointF", %"class.gfx::PointF"* %1, i64 0, i32 0
  %5 = load float, float* %4, align 4
  %6 = fpext float %5 to double
  tail call void @_ZN4base11trace_event11TracedValue12AppendDoubleEd(%"class.base::trace_event::TracedValue"* %2, double %6) #10
  %7 = getelementptr inbounds %"class.gfx::PointF", %"class.gfx::PointF"* %1, i64 0, i32 1
  %8 = load float, float* %7, align 4
  %9 = fpext float %8 to double
  tail call void @_ZN4base11trace_event11TracedValue12AppendDoubleEd(%"class.base::trace_event::TracedValue"* %2, double %9) #10
  tail call void @_ZN4base11trace_event11TracedValue8EndArrayEv(%"class.base::trace_event::TracedValue"* %2) #10
  ret void
}

declare void @_ZN4base11trace_event11TracedValue12AppendDoubleEd(%"class.base::trace_event::TracedValue"*, double) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc8MathUtil16AddToTracedValueEPKcRKN3gfx7Point3FEPN4base11trace_event11TracedValueE(i8*, %"class.gfx::Point3F"* nocapture readonly dereferenceable(12), %"class.base::trace_event::TracedValue"*) local_unnamed_addr #0 align 2 {
  tail call void @_ZN4base11trace_event11TracedValue10BeginArrayEPKc(%"class.base::trace_event::TracedValue"* %2, i8* %0) #10
  %4 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %1, i64 0, i32 0
  %5 = load float, float* %4, align 4
  %6 = fpext float %5 to double
  tail call void @_ZN4base11trace_event11TracedValue12AppendDoubleEd(%"class.base::trace_event::TracedValue"* %2, double %6) #10
  %7 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %1, i64 0, i32 1
  %8 = load float, float* %7, align 4
  %9 = fpext float %8 to double
  tail call void @_ZN4base11trace_event11TracedValue12AppendDoubleEd(%"class.base::trace_event::TracedValue"* %2, double %9) #10
  %10 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %1, i64 0, i32 2
  %11 = load float, float* %10, align 4
  %12 = fpext float %11 to double
  tail call void @_ZN4base11trace_event11TracedValue12AppendDoubleEd(%"class.base::trace_event::TracedValue"* %2, double %12) #10
  tail call void @_ZN4base11trace_event11TracedValue8EndArrayEv(%"class.base::trace_event::TracedValue"* %2) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc8MathUtil16AddToTracedValueEPKcRKN3gfx8Vector2dEPN4base11trace_event11TracedValueE(i8*, %"class.gfx::Vector2d"* nocapture readonly dereferenceable(8), %"class.base::trace_event::TracedValue"*) local_unnamed_addr #0 align 2 {
  tail call void @_ZN4base11trace_event11TracedValue10BeginArrayEPKc(%"class.base::trace_event::TracedValue"* %2, i8* %0) #10
  %4 = getelementptr inbounds %"class.gfx::Vector2d", %"class.gfx::Vector2d"* %1, i64 0, i32 0
  %5 = load i32, i32* %4, align 4
  tail call void @_ZN4base11trace_event11TracedValue13AppendIntegerEi(%"class.base::trace_event::TracedValue"* %2, i32 %5) #10
  %6 = getelementptr inbounds %"class.gfx::Vector2d", %"class.gfx::Vector2d"* %1, i64 0, i32 1
  %7 = load i32, i32* %6, align 4
  tail call void @_ZN4base11trace_event11TracedValue13AppendIntegerEi(%"class.base::trace_event::TracedValue"* %2, i32 %7) #10
  tail call void @_ZN4base11trace_event11TracedValue8EndArrayEv(%"class.base::trace_event::TracedValue"* %2) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc8MathUtil16AddToTracedValueEPKcRKN3gfx9Vector2dFEPN4base11trace_event11TracedValueE(i8*, %"class.gfx::Vector2dF"* nocapture readonly dereferenceable(8), %"class.base::trace_event::TracedValue"*) local_unnamed_addr #0 align 2 {
  tail call void @_ZN4base11trace_event11TracedValue10BeginArrayEPKc(%"class.base::trace_event::TracedValue"* %2, i8* %0) #10
  %4 = getelementptr inbounds %"class.gfx::Vector2dF", %"class.gfx::Vector2dF"* %1, i64 0, i32 0
  %5 = load float, float* %4, align 4
  %6 = fpext float %5 to double
  tail call void @_ZN4base11trace_event11TracedValue12AppendDoubleEd(%"class.base::trace_event::TracedValue"* %2, double %6) #10
  %7 = getelementptr inbounds %"class.gfx::Vector2dF", %"class.gfx::Vector2dF"* %1, i64 0, i32 1
  %8 = load float, float* %7, align 4
  %9 = fpext float %8 to double
  tail call void @_ZN4base11trace_event11TracedValue12AppendDoubleEd(%"class.base::trace_event::TracedValue"* %2, double %9) #10
  tail call void @_ZN4base11trace_event11TracedValue8EndArrayEv(%"class.base::trace_event::TracedValue"* %2) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc8MathUtil16AddToTracedValueEPKcRKN3gfx12ScrollOffsetEPN4base11trace_event11TracedValueE(i8*, %"class.gfx::ScrollOffset"* nocapture readonly dereferenceable(8), %"class.base::trace_event::TracedValue"*) local_unnamed_addr #0 align 2 {
  tail call void @_ZN4base11trace_event11TracedValue10BeginArrayEPKc(%"class.base::trace_event::TracedValue"* %2, i8* %0) #10
  %4 = getelementptr inbounds %"class.gfx::ScrollOffset", %"class.gfx::ScrollOffset"* %1, i64 0, i32 0
  %5 = load float, float* %4, align 4
  %6 = fpext float %5 to double
  tail call void @_ZN4base11trace_event11TracedValue12AppendDoubleEd(%"class.base::trace_event::TracedValue"* %2, double %6) #10
  %7 = getelementptr inbounds %"class.gfx::ScrollOffset", %"class.gfx::ScrollOffset"* %1, i64 0, i32 1
  %8 = load float, float* %7, align 4
  %9 = fpext float %8 to double
  tail call void @_ZN4base11trace_event11TracedValue12AppendDoubleEd(%"class.base::trace_event::TracedValue"* %2, double %9) #10
  tail call void @_ZN4base11trace_event11TracedValue8EndArrayEv(%"class.base::trace_event::TracedValue"* %2) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc8MathUtil16AddToTracedValueEPKcRKN3gfx5QuadFEPN4base11trace_event11TracedValueE(i8*, %"class.gfx::QuadF"* nocapture readonly dereferenceable(32), %"class.base::trace_event::TracedValue"*) local_unnamed_addr #0 align 2 {
  tail call void @_ZN4base11trace_event11TracedValue10BeginArrayEPKc(%"class.base::trace_event::TracedValue"* %2, i8* %0) #10
  %4 = getelementptr inbounds %"class.gfx::QuadF", %"class.gfx::QuadF"* %1, i64 0, i32 0, i32 0
  %5 = load float, float* %4, align 4
  %6 = fpext float %5 to double
  tail call void @_ZN4base11trace_event11TracedValue12AppendDoubleEd(%"class.base::trace_event::TracedValue"* %2, double %6) #10
  %7 = getelementptr inbounds %"class.gfx::QuadF", %"class.gfx::QuadF"* %1, i64 0, i32 0, i32 1
  %8 = load float, float* %7, align 4
  %9 = fpext float %8 to double
  tail call void @_ZN4base11trace_event11TracedValue12AppendDoubleEd(%"class.base::trace_event::TracedValue"* %2, double %9) #10
  %10 = getelementptr inbounds %"class.gfx::QuadF", %"class.gfx::QuadF"* %1, i64 0, i32 1, i32 0
  %11 = load float, float* %10, align 4
  %12 = fpext float %11 to double
  tail call void @_ZN4base11trace_event11TracedValue12AppendDoubleEd(%"class.base::trace_event::TracedValue"* %2, double %12) #10
  %13 = getelementptr inbounds %"class.gfx::QuadF", %"class.gfx::QuadF"* %1, i64 0, i32 1, i32 1
  %14 = load float, float* %13, align 4
  %15 = fpext float %14 to double
  tail call void @_ZN4base11trace_event11TracedValue12AppendDoubleEd(%"class.base::trace_event::TracedValue"* %2, double %15) #10
  %16 = getelementptr inbounds %"class.gfx::QuadF", %"class.gfx::QuadF"* %1, i64 0, i32 2, i32 0
  %17 = load float, float* %16, align 4
  %18 = fpext float %17 to double
  tail call void @_ZN4base11trace_event11TracedValue12AppendDoubleEd(%"class.base::trace_event::TracedValue"* %2, double %18) #10
  %19 = getelementptr inbounds %"class.gfx::QuadF", %"class.gfx::QuadF"* %1, i64 0, i32 2, i32 1
  %20 = load float, float* %19, align 4
  %21 = fpext float %20 to double
  tail call void @_ZN4base11trace_event11TracedValue12AppendDoubleEd(%"class.base::trace_event::TracedValue"* %2, double %21) #10
  %22 = getelementptr inbounds %"class.gfx::QuadF", %"class.gfx::QuadF"* %1, i64 0, i32 3, i32 0
  %23 = load float, float* %22, align 4
  %24 = fpext float %23 to double
  tail call void @_ZN4base11trace_event11TracedValue12AppendDoubleEd(%"class.base::trace_event::TracedValue"* %2, double %24) #10
  %25 = getelementptr inbounds %"class.gfx::QuadF", %"class.gfx::QuadF"* %1, i64 0, i32 3, i32 1
  %26 = load float, float* %25, align 4
  %27 = fpext float %26 to double
  tail call void @_ZN4base11trace_event11TracedValue12AppendDoubleEd(%"class.base::trace_event::TracedValue"* %2, double %27) #10
  tail call void @_ZN4base11trace_event11TracedValue8EndArrayEv(%"class.base::trace_event::TracedValue"* %2) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc8MathUtil16AddToTracedValueEPKcRKN3gfx5RectFEPN4base11trace_event11TracedValueE(i8*, %"class.gfx::RectF"* nocapture readonly dereferenceable(16), %"class.base::trace_event::TracedValue"*) local_unnamed_addr #0 align 2 {
  tail call void @_ZN4base11trace_event11TracedValue10BeginArrayEPKc(%"class.base::trace_event::TracedValue"* %2, i8* %0) #10
  %4 = getelementptr inbounds %"class.gfx::RectF", %"class.gfx::RectF"* %1, i64 0, i32 0, i32 0
  %5 = load float, float* %4, align 4
  %6 = fpext float %5 to double
  tail call void @_ZN4base11trace_event11TracedValue12AppendDoubleEd(%"class.base::trace_event::TracedValue"* %2, double %6) #10
  %7 = getelementptr inbounds %"class.gfx::RectF", %"class.gfx::RectF"* %1, i64 0, i32 0, i32 1
  %8 = load float, float* %7, align 4
  %9 = fpext float %8 to double
  tail call void @_ZN4base11trace_event11TracedValue12AppendDoubleEd(%"class.base::trace_event::TracedValue"* %2, double %9) #10
  %10 = getelementptr inbounds %"class.gfx::RectF", %"class.gfx::RectF"* %1, i64 0, i32 1, i32 0
  %11 = load float, float* %10, align 4
  %12 = fpext float %11 to double
  tail call void @_ZN4base11trace_event11TracedValue12AppendDoubleEd(%"class.base::trace_event::TracedValue"* %2, double %12) #10
  %13 = getelementptr inbounds %"class.gfx::RectF", %"class.gfx::RectF"* %1, i64 0, i32 1, i32 1
  %14 = load float, float* %13, align 4
  %15 = fpext float %14 to double
  tail call void @_ZN4base11trace_event11TracedValue12AppendDoubleEd(%"class.base::trace_event::TracedValue"* %2, double %15) #10
  tail call void @_ZN4base11trace_event11TracedValue8EndArrayEv(%"class.base::trace_event::TracedValue"* %2) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc8MathUtil16AddToTracedValueEPKcRKN3gfx9TransformEPN4base11trace_event11TracedValueE(i8*, %"class.gfx::Transform"* nocapture readonly dereferenceable(68), %"class.base::trace_event::TracedValue"*) local_unnamed_addr #0 align 2 {
  tail call void @_ZN4base11trace_event11TracedValue10BeginArrayEPKc(%"class.base::trace_event::TracedValue"* %2, i8* %0) #10
  %4 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %1, i64 0, i32 0, i32 0, i64 0, i64 0
  %5 = load float, float* %4, align 4
  %6 = fpext float %5 to double
  tail call void @_ZN4base11trace_event11TracedValue12AppendDoubleEd(%"class.base::trace_event::TracedValue"* %2, double %6) #10
  %7 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %1, i64 0, i32 0, i32 0, i64 1, i64 0
  %8 = load float, float* %7, align 4
  %9 = fpext float %8 to double
  tail call void @_ZN4base11trace_event11TracedValue12AppendDoubleEd(%"class.base::trace_event::TracedValue"* %2, double %9) #10
  %10 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %1, i64 0, i32 0, i32 0, i64 2, i64 0
  %11 = load float, float* %10, align 4
  %12 = fpext float %11 to double
  tail call void @_ZN4base11trace_event11TracedValue12AppendDoubleEd(%"class.base::trace_event::TracedValue"* %2, double %12) #10
  %13 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %1, i64 0, i32 0, i32 0, i64 3, i64 0
  %14 = load float, float* %13, align 4
  %15 = fpext float %14 to double
  tail call void @_ZN4base11trace_event11TracedValue12AppendDoubleEd(%"class.base::trace_event::TracedValue"* %2, double %15) #10
  %16 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %1, i64 0, i32 0, i32 0, i64 0, i64 1
  %17 = load float, float* %16, align 4
  %18 = fpext float %17 to double
  tail call void @_ZN4base11trace_event11TracedValue12AppendDoubleEd(%"class.base::trace_event::TracedValue"* %2, double %18) #10
  %19 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %1, i64 0, i32 0, i32 0, i64 1, i64 1
  %20 = load float, float* %19, align 4
  %21 = fpext float %20 to double
  tail call void @_ZN4base11trace_event11TracedValue12AppendDoubleEd(%"class.base::trace_event::TracedValue"* %2, double %21) #10
  %22 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %1, i64 0, i32 0, i32 0, i64 2, i64 1
  %23 = load float, float* %22, align 4
  %24 = fpext float %23 to double
  tail call void @_ZN4base11trace_event11TracedValue12AppendDoubleEd(%"class.base::trace_event::TracedValue"* %2, double %24) #10
  %25 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %1, i64 0, i32 0, i32 0, i64 3, i64 1
  %26 = load float, float* %25, align 4
  %27 = fpext float %26 to double
  tail call void @_ZN4base11trace_event11TracedValue12AppendDoubleEd(%"class.base::trace_event::TracedValue"* %2, double %27) #10
  %28 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %1, i64 0, i32 0, i32 0, i64 0, i64 2
  %29 = load float, float* %28, align 4
  %30 = fpext float %29 to double
  tail call void @_ZN4base11trace_event11TracedValue12AppendDoubleEd(%"class.base::trace_event::TracedValue"* %2, double %30) #10
  %31 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %1, i64 0, i32 0, i32 0, i64 1, i64 2
  %32 = load float, float* %31, align 4
  %33 = fpext float %32 to double
  tail call void @_ZN4base11trace_event11TracedValue12AppendDoubleEd(%"class.base::trace_event::TracedValue"* %2, double %33) #10
  %34 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %1, i64 0, i32 0, i32 0, i64 2, i64 2
  %35 = load float, float* %34, align 4
  %36 = fpext float %35 to double
  tail call void @_ZN4base11trace_event11TracedValue12AppendDoubleEd(%"class.base::trace_event::TracedValue"* %2, double %36) #10
  %37 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %1, i64 0, i32 0, i32 0, i64 3, i64 2
  %38 = load float, float* %37, align 4
  %39 = fpext float %38 to double
  tail call void @_ZN4base11trace_event11TracedValue12AppendDoubleEd(%"class.base::trace_event::TracedValue"* %2, double %39) #10
  %40 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %1, i64 0, i32 0, i32 0, i64 0, i64 3
  %41 = load float, float* %40, align 4
  %42 = fpext float %41 to double
  tail call void @_ZN4base11trace_event11TracedValue12AppendDoubleEd(%"class.base::trace_event::TracedValue"* %2, double %42) #10
  %43 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %1, i64 0, i32 0, i32 0, i64 1, i64 3
  %44 = load float, float* %43, align 4
  %45 = fpext float %44 to double
  tail call void @_ZN4base11trace_event11TracedValue12AppendDoubleEd(%"class.base::trace_event::TracedValue"* %2, double %45) #10
  %46 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %1, i64 0, i32 0, i32 0, i64 2, i64 3
  %47 = load float, float* %46, align 4
  %48 = fpext float %47 to double
  tail call void @_ZN4base11trace_event11TracedValue12AppendDoubleEd(%"class.base::trace_event::TracedValue"* %2, double %48) #10
  %49 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %1, i64 0, i32 0, i32 0, i64 3, i64 3
  %50 = load float, float* %49, align 4
  %51 = fpext float %50 to double
  tail call void @_ZN4base11trace_event11TracedValue12AppendDoubleEd(%"class.base::trace_event::TracedValue"* %2, double %51) #10
  tail call void @_ZN4base11trace_event11TracedValue8EndArrayEv(%"class.base::trace_event::TracedValue"* %2) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc8MathUtil16AddToTracedValueEPKcRKN3gfx4BoxFEPN4base11trace_event11TracedValueE(i8*, %"class.gfx::BoxF"* nocapture readonly dereferenceable(24), %"class.base::trace_event::TracedValue"*) local_unnamed_addr #0 align 2 {
  tail call void @_ZN4base11trace_event11TracedValue10BeginArrayEPKc(%"class.base::trace_event::TracedValue"* %2, i8* %0) #10
  %4 = getelementptr inbounds %"class.gfx::BoxF", %"class.gfx::BoxF"* %1, i64 0, i32 0, i32 0
  %5 = load float, float* %4, align 4
  %6 = fptosi float %5 to i32
  tail call void @_ZN4base11trace_event11TracedValue13AppendIntegerEi(%"class.base::trace_event::TracedValue"* %2, i32 %6) #10
  %7 = getelementptr inbounds %"class.gfx::BoxF", %"class.gfx::BoxF"* %1, i64 0, i32 0, i32 1
  %8 = load float, float* %7, align 4
  %9 = fptosi float %8 to i32
  tail call void @_ZN4base11trace_event11TracedValue13AppendIntegerEi(%"class.base::trace_event::TracedValue"* %2, i32 %9) #10
  %10 = getelementptr inbounds %"class.gfx::BoxF", %"class.gfx::BoxF"* %1, i64 0, i32 0, i32 2
  %11 = load float, float* %10, align 4
  %12 = fptosi float %11 to i32
  tail call void @_ZN4base11trace_event11TracedValue13AppendIntegerEi(%"class.base::trace_event::TracedValue"* %2, i32 %12) #10
  %13 = getelementptr inbounds %"class.gfx::BoxF", %"class.gfx::BoxF"* %1, i64 0, i32 1
  %14 = load float, float* %13, align 4
  %15 = fptosi float %14 to i32
  tail call void @_ZN4base11trace_event11TracedValue13AppendIntegerEi(%"class.base::trace_event::TracedValue"* %2, i32 %15) #10
  %16 = getelementptr inbounds %"class.gfx::BoxF", %"class.gfx::BoxF"* %1, i64 0, i32 2
  %17 = load float, float* %16, align 4
  %18 = fptosi float %17 to i32
  tail call void @_ZN4base11trace_event11TracedValue13AppendIntegerEi(%"class.base::trace_event::TracedValue"* %2, i32 %18) #10
  %19 = getelementptr inbounds %"class.gfx::BoxF", %"class.gfx::BoxF"* %1, i64 0, i32 3
  %20 = load float, float* %19, align 4
  %21 = fptosi float %20 to i32
  tail call void @_ZN4base11trace_event11TracedValue13AppendIntegerEi(%"class.base::trace_event::TracedValue"* %2, i32 %21) #10
  tail call void @_ZN4base11trace_event11TracedValue8EndArrayEv(%"class.base::trace_event::TracedValue"* %2) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc8MathUtil16AddToTracedValueEPKcRKN3gfx6RRectFEPN4base11trace_event11TracedValueE(i8*, %"class.gfx::RRectF"* dereferenceable(52), %"class.base::trace_event::TracedValue"*) local_unnamed_addr #4 align 2 {
  tail call void @_ZN4base11trace_event11TracedValue10BeginArrayEPKc(%"class.base::trace_event::TracedValue"* %2, i8* %0) #10
  %4 = getelementptr inbounds %"class.gfx::RRectF", %"class.gfx::RRectF"* %1, i64 0, i32 0, i32 0
  %5 = tail call { <2 x float>, <2 x float> } @_ZN3gfx13SkRectToRectFERK6SkRect(%struct.SkRect* dereferenceable(16) %4) #10
  %6 = extractvalue { <2 x float>, <2 x float> } %5, 0
  %7 = extractelement <2 x float> %6, i32 0
  %8 = fpext float %7 to double
  tail call void @_ZN4base11trace_event11TracedValue12AppendDoubleEd(%"class.base::trace_event::TracedValue"* %2, double %8) #10
  %9 = tail call { <2 x float>, <2 x float> } @_ZN3gfx13SkRectToRectFERK6SkRect(%struct.SkRect* dereferenceable(16) %4) #10
  %10 = extractvalue { <2 x float>, <2 x float> } %9, 0
  %11 = extractelement <2 x float> %10, i32 1
  %12 = fpext float %11 to double
  tail call void @_ZN4base11trace_event11TracedValue12AppendDoubleEd(%"class.base::trace_event::TracedValue"* %2, double %12) #10
  %13 = tail call { <2 x float>, <2 x float> } @_ZN3gfx13SkRectToRectFERK6SkRect(%struct.SkRect* dereferenceable(16) %4) #10
  %14 = extractvalue { <2 x float>, <2 x float> } %13, 1
  %15 = extractelement <2 x float> %14, i32 0
  %16 = fpext float %15 to double
  tail call void @_ZN4base11trace_event11TracedValue12AppendDoubleEd(%"class.base::trace_event::TracedValue"* %2, double %16) #10
  %17 = tail call { <2 x float>, <2 x float> } @_ZN3gfx13SkRectToRectFERK6SkRect(%struct.SkRect* dereferenceable(16) %4) #10
  %18 = extractvalue { <2 x float>, <2 x float> } %17, 1
  %19 = extractelement <2 x float> %18, i32 1
  %20 = fpext float %19 to double
  tail call void @_ZN4base11trace_event11TracedValue12AppendDoubleEd(%"class.base::trace_event::TracedValue"* %2, double %20) #10
  %21 = tail call <2 x float> @_ZNK3gfx6RRectF14GetCornerRadiiENS0_6CornerE(%"class.gfx::RRectF"* %1, i32 0) #10
  %22 = extractelement <2 x float> %21, i32 0
  %23 = fpext float %22 to double
  tail call void @_ZN4base11trace_event11TracedValue12AppendDoubleEd(%"class.base::trace_event::TracedValue"* %2, double %23) #10
  %24 = tail call <2 x float> @_ZNK3gfx6RRectF14GetCornerRadiiENS0_6CornerE(%"class.gfx::RRectF"* %1, i32 0) #10
  %25 = extractelement <2 x float> %24, i32 1
  %26 = fpext float %25 to double
  tail call void @_ZN4base11trace_event11TracedValue12AppendDoubleEd(%"class.base::trace_event::TracedValue"* %2, double %26) #10
  %27 = tail call <2 x float> @_ZNK3gfx6RRectF14GetCornerRadiiENS0_6CornerE(%"class.gfx::RRectF"* %1, i32 1) #10
  %28 = extractelement <2 x float> %27, i32 0
  %29 = fpext float %28 to double
  tail call void @_ZN4base11trace_event11TracedValue12AppendDoubleEd(%"class.base::trace_event::TracedValue"* %2, double %29) #10
  %30 = tail call <2 x float> @_ZNK3gfx6RRectF14GetCornerRadiiENS0_6CornerE(%"class.gfx::RRectF"* %1, i32 1) #10
  %31 = extractelement <2 x float> %30, i32 1
  %32 = fpext float %31 to double
  tail call void @_ZN4base11trace_event11TracedValue12AppendDoubleEd(%"class.base::trace_event::TracedValue"* %2, double %32) #10
  %33 = tail call <2 x float> @_ZNK3gfx6RRectF14GetCornerRadiiENS0_6CornerE(%"class.gfx::RRectF"* %1, i32 2) #10
  %34 = extractelement <2 x float> %33, i32 0
  %35 = fpext float %34 to double
  tail call void @_ZN4base11trace_event11TracedValue12AppendDoubleEd(%"class.base::trace_event::TracedValue"* %2, double %35) #10
  %36 = tail call <2 x float> @_ZNK3gfx6RRectF14GetCornerRadiiENS0_6CornerE(%"class.gfx::RRectF"* %1, i32 2) #10
  %37 = extractelement <2 x float> %36, i32 1
  %38 = fpext float %37 to double
  tail call void @_ZN4base11trace_event11TracedValue12AppendDoubleEd(%"class.base::trace_event::TracedValue"* %2, double %38) #10
  %39 = tail call <2 x float> @_ZNK3gfx6RRectF14GetCornerRadiiENS0_6CornerE(%"class.gfx::RRectF"* %1, i32 3) #10
  %40 = extractelement <2 x float> %39, i32 0
  %41 = fpext float %40 to double
  tail call void @_ZN4base11trace_event11TracedValue12AppendDoubleEd(%"class.base::trace_event::TracedValue"* %2, double %41) #10
  %42 = tail call <2 x float> @_ZNK3gfx6RRectF14GetCornerRadiiENS0_6CornerE(%"class.gfx::RRectF"* %1, i32 3) #10
  %43 = extractelement <2 x float> %42, i32 1
  %44 = fpext float %43 to double
  tail call void @_ZN4base11trace_event11TracedValue12AppendDoubleEd(%"class.base::trace_event::TracedValue"* %2, double %44) #10
  tail call void @_ZN4base11trace_event11TracedValue8EndArrayEv(%"class.base::trace_event::TracedValue"* %2) #10
  ret void
}

declare <2 x float> @_ZNK3gfx6RRectF14GetCornerRadiiENS0_6CornerE(%"class.gfx::RRectF"*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc8MathUtil27AddCornerRadiiToTracedValueEPKcRKN3gfx6RRectFEPN4base11trace_event11TracedValueE(i8*, %"class.gfx::RRectF"* dereferenceable(52), %"class.base::trace_event::TracedValue"*) local_unnamed_addr #4 align 2 {
  tail call void @_ZN4base11trace_event11TracedValue10BeginArrayEPKc(%"class.base::trace_event::TracedValue"* %2, i8* %0) #10
  %4 = tail call <2 x float> @_ZNK3gfx6RRectF14GetCornerRadiiENS0_6CornerE(%"class.gfx::RRectF"* %1, i32 0) #10
  %5 = extractelement <2 x float> %4, i32 0
  %6 = fpext float %5 to double
  tail call void @_ZN4base11trace_event11TracedValue12AppendDoubleEd(%"class.base::trace_event::TracedValue"* %2, double %6) #10
  %7 = tail call <2 x float> @_ZNK3gfx6RRectF14GetCornerRadiiENS0_6CornerE(%"class.gfx::RRectF"* %1, i32 0) #10
  %8 = extractelement <2 x float> %7, i32 1
  %9 = fpext float %8 to double
  tail call void @_ZN4base11trace_event11TracedValue12AppendDoubleEd(%"class.base::trace_event::TracedValue"* %2, double %9) #10
  %10 = tail call <2 x float> @_ZNK3gfx6RRectF14GetCornerRadiiENS0_6CornerE(%"class.gfx::RRectF"* %1, i32 1) #10
  %11 = extractelement <2 x float> %10, i32 0
  %12 = fpext float %11 to double
  tail call void @_ZN4base11trace_event11TracedValue12AppendDoubleEd(%"class.base::trace_event::TracedValue"* %2, double %12) #10
  %13 = tail call <2 x float> @_ZNK3gfx6RRectF14GetCornerRadiiENS0_6CornerE(%"class.gfx::RRectF"* %1, i32 1) #10
  %14 = extractelement <2 x float> %13, i32 1
  %15 = fpext float %14 to double
  tail call void @_ZN4base11trace_event11TracedValue12AppendDoubleEd(%"class.base::trace_event::TracedValue"* %2, double %15) #10
  %16 = tail call <2 x float> @_ZNK3gfx6RRectF14GetCornerRadiiENS0_6CornerE(%"class.gfx::RRectF"* %1, i32 2) #10
  %17 = extractelement <2 x float> %16, i32 0
  %18 = fpext float %17 to double
  tail call void @_ZN4base11trace_event11TracedValue12AppendDoubleEd(%"class.base::trace_event::TracedValue"* %2, double %18) #10
  %19 = tail call <2 x float> @_ZNK3gfx6RRectF14GetCornerRadiiENS0_6CornerE(%"class.gfx::RRectF"* %1, i32 2) #10
  %20 = extractelement <2 x float> %19, i32 1
  %21 = fpext float %20 to double
  tail call void @_ZN4base11trace_event11TracedValue12AppendDoubleEd(%"class.base::trace_event::TracedValue"* %2, double %21) #10
  %22 = tail call <2 x float> @_ZNK3gfx6RRectF14GetCornerRadiiENS0_6CornerE(%"class.gfx::RRectF"* %1, i32 3) #10
  %23 = extractelement <2 x float> %22, i32 0
  %24 = fpext float %23 to double
  tail call void @_ZN4base11trace_event11TracedValue12AppendDoubleEd(%"class.base::trace_event::TracedValue"* %2, double %24) #10
  %25 = tail call <2 x float> @_ZNK3gfx6RRectF14GetCornerRadiiENS0_6CornerE(%"class.gfx::RRectF"* %1, i32 3) #10
  %26 = extractelement <2 x float> %25, i32 1
  %27 = fpext float %26 to double
  tail call void @_ZN4base11trace_event11TracedValue12AppendDoubleEd(%"class.base::trace_event::TracedValue"* %2, double %27) #10
  tail call void @_ZN4base11trace_event11TracedValue8EndArrayEv(%"class.base::trace_event::TracedValue"* %2) #10
  ret void
}

; Function Attrs: nounwind readnone ssp uwtable
define hidden double @_ZN2cc8MathUtil14AsDoubleSafelyEd(double) local_unnamed_addr #7 align 2 {
  %2 = fcmp ogt double %0, 0x7FEFFFFFFFFFFFFF
  %3 = select i1 %2, double 0x7FEFFFFFFFFFFFFF, double %0
  ret double %3
}

; Function Attrs: nounwind readnone ssp uwtable
define hidden float @_ZN2cc8MathUtil13AsFloatSafelyEf(float) local_unnamed_addr #7 align 2 {
  %2 = fcmp ogt float %0, 0x47EFFFFFE0000000
  %3 = select i1 %2, float 0x47EFFFFFE0000000, float %0
  ret float %3
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden { <2 x float>, float } @_ZN2cc8MathUtil8GetXAxisERKN3gfx9TransformE(%"class.gfx::Transform"* nocapture readonly dereferenceable(68)) local_unnamed_addr #8 align 2 {
  %2 = bitcast %"class.gfx::Transform"* %0 to <2 x float>*
  %3 = load <2 x float>, <2 x float>* %2, align 4
  %4 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %0, i64 0, i32 0, i32 0, i64 0, i64 2
  %5 = load float, float* %4, align 4
  %6 = insertvalue { <2 x float>, float } undef, <2 x float> %3, 0
  %7 = insertvalue { <2 x float>, float } %6, float %5, 1
  ret { <2 x float>, float } %7
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden { <2 x float>, float } @_ZN2cc8MathUtil8GetYAxisERKN3gfx9TransformE(%"class.gfx::Transform"* nocapture readonly dereferenceable(68)) local_unnamed_addr #8 align 2 {
  %2 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %0, i64 0, i32 0, i32 0, i64 1, i64 0
  %3 = bitcast float* %2 to <2 x float>*
  %4 = load <2 x float>, <2 x float>* %3, align 4
  %5 = getelementptr inbounds %"class.gfx::Transform", %"class.gfx::Transform"* %0, i64 0, i32 0, i32 0, i64 1, i64 2
  %6 = load float, float* %5, align 4
  %7 = insertvalue { <2 x float>, float } undef, <2 x float> %4, 0
  %8 = insertvalue { <2 x float>, float } %7, float %6, 1
  ret { <2 x float>, float } %8
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc28ScopedSubnormalFloatDisablerC2Ev(%"class.cc::ScopedSubnormalFloatDisabler"* nocapture) unnamed_addr #0 align 2 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = bitcast i32* %2 to i8*
  call void @llvm.x86.sse.stmxcsr(i8* nonnull %4)
  %5 = load i32, i32* %2, align 4
  %6 = getelementptr inbounds %"class.cc::ScopedSubnormalFloatDisabler", %"class.cc::ScopedSubnormalFloatDisabler"* %0, i64 0, i32 0
  store i32 %5, i32* %6, align 4
  %7 = or i32 %5, 32832
  store i32 %7, i32* %3, align 4
  %8 = bitcast i32* %3 to i8*
  call void @llvm.x86.sse.ldmxcsr(i8* nonnull %8)
  ret void
}

; Function Attrs: argmemonly nounwind writeonly
declare void @llvm.x86.sse.stmxcsr(i8*) #9

; Function Attrs: nounwind
declare void @llvm.x86.sse.ldmxcsr(i8*) #10

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc28ScopedSubnormalFloatDisablerD2Ev(%"class.cc::ScopedSubnormalFloatDisabler"* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = alloca i32, align 4
  %3 = getelementptr inbounds %"class.cc::ScopedSubnormalFloatDisabler", %"class.cc::ScopedSubnormalFloatDisabler"* %0, i64 0, i32 0
  %4 = load i32, i32* %3, align 4
  store i32 %4, i32* %2, align 4
  %5 = bitcast i32* %2 to i8*
  call void @llvm.x86.sse.ldmxcsr(i8* nonnull %5)
  ret void
}

; Function Attrs: nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZN2cc8MathUtil20IsFloatNearlyTheSameEff(float, float) local_unnamed_addr #7 align 2 {
  %3 = fsub float %0, %1
  %4 = tail call float @llvm.fabs.f32(float %0) #10
  %5 = tail call float @llvm.fabs.f32(float %1) #10
  %6 = fcmp olt float %4, %5
  %7 = select i1 %6, float %5, float %4
  %8 = fcmp olt float %7, 0x3EE4F8B580000000
  %9 = tail call float @llvm.fabs.f32(float %3) #10
  %10 = select i1 %8, float 0x3EE4F8B580000000, float %7
  %11 = fmul float %10, 0x3EE4F8B580000000
  %12 = fcmp olt float %9, %11
  ret i1 %12
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZN2cc8MathUtil25IsNearlyTheSameForTestingERKN3gfx6PointFES4_(%"class.gfx::PointF"* nocapture readonly dereferenceable(8), %"class.gfx::PointF"* nocapture readonly dereferenceable(8)) local_unnamed_addr #5 align 2 {
  %3 = getelementptr inbounds %"class.gfx::PointF", %"class.gfx::PointF"* %0, i64 0, i32 0
  %4 = load float, float* %3, align 4
  %5 = getelementptr inbounds %"class.gfx::PointF", %"class.gfx::PointF"* %1, i64 0, i32 0
  %6 = load float, float* %5, align 4
  %7 = fsub float %4, %6
  %8 = tail call float @llvm.fabs.f32(float %4) #10
  %9 = tail call float @llvm.fabs.f32(float %6) #10
  %10 = fcmp olt float %8, %9
  %11 = select i1 %10, float %9, float %8
  %12 = fcmp olt float %11, 0x3EE4F8B580000000
  %13 = tail call float @llvm.fabs.f32(float %7) #10
  %14 = select i1 %12, float 0x3EE4F8B580000000, float %11
  %15 = fmul float %14, 0x3EE4F8B580000000
  %16 = fcmp olt float %13, %15
  br i1 %16, label %17, label %32

17:                                               ; preds = %2
  %18 = getelementptr inbounds %"class.gfx::PointF", %"class.gfx::PointF"* %0, i64 0, i32 1
  %19 = load float, float* %18, align 4
  %20 = getelementptr inbounds %"class.gfx::PointF", %"class.gfx::PointF"* %1, i64 0, i32 1
  %21 = load float, float* %20, align 4
  %22 = fsub float %19, %21
  %23 = tail call float @llvm.fabs.f32(float %19) #10
  %24 = tail call float @llvm.fabs.f32(float %21) #10
  %25 = fcmp olt float %23, %24
  %26 = select i1 %25, float %24, float %23
  %27 = fcmp olt float %26, 0x3EE4F8B580000000
  %28 = tail call float @llvm.fabs.f32(float %22) #10
  %29 = select i1 %27, float 0x3EE4F8B580000000, float %26
  %30 = fmul float %29, 0x3EE4F8B580000000
  %31 = fcmp olt float %28, %30
  br label %32

32:                                               ; preds = %2, %17
  %33 = phi i1 [ false, %2 ], [ %31, %17 ]
  ret i1 %33
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZN2cc8MathUtil25IsNearlyTheSameForTestingERKN3gfx7Point3FES4_(%"class.gfx::Point3F"* nocapture readonly dereferenceable(12), %"class.gfx::Point3F"* nocapture readonly dereferenceable(12)) local_unnamed_addr #5 align 2 {
  %3 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %0, i64 0, i32 0
  %4 = load float, float* %3, align 4
  %5 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %1, i64 0, i32 0
  %6 = load float, float* %5, align 4
  %7 = fsub float %4, %6
  %8 = tail call float @llvm.fabs.f32(float %4) #10
  %9 = tail call float @llvm.fabs.f32(float %6) #10
  %10 = fcmp olt float %8, %9
  %11 = select i1 %10, float %9, float %8
  %12 = fcmp olt float %11, 0x3EE4F8B580000000
  %13 = tail call float @llvm.fabs.f32(float %7) #10
  %14 = select i1 %12, float 0x3EE4F8B580000000, float %11
  %15 = fmul float %14, 0x3EE4F8B580000000
  %16 = fcmp olt float %13, %15
  br i1 %16, label %17, label %47

17:                                               ; preds = %2
  %18 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %0, i64 0, i32 1
  %19 = load float, float* %18, align 4
  %20 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %1, i64 0, i32 1
  %21 = load float, float* %20, align 4
  %22 = fsub float %19, %21
  %23 = tail call float @llvm.fabs.f32(float %19) #10
  %24 = tail call float @llvm.fabs.f32(float %21) #10
  %25 = fcmp olt float %23, %24
  %26 = select i1 %25, float %24, float %23
  %27 = fcmp olt float %26, 0x3EE4F8B580000000
  %28 = tail call float @llvm.fabs.f32(float %22) #10
  %29 = select i1 %27, float 0x3EE4F8B580000000, float %26
  %30 = fmul float %29, 0x3EE4F8B580000000
  %31 = fcmp olt float %28, %30
  br i1 %31, label %32, label %47

32:                                               ; preds = %17
  %33 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %0, i64 0, i32 2
  %34 = load float, float* %33, align 4
  %35 = getelementptr inbounds %"class.gfx::Point3F", %"class.gfx::Point3F"* %1, i64 0, i32 2
  %36 = load float, float* %35, align 4
  %37 = fsub float %34, %36
  %38 = tail call float @llvm.fabs.f32(float %34) #10
  %39 = tail call float @llvm.fabs.f32(float %36) #10
  %40 = fcmp olt float %38, %39
  %41 = select i1 %40, float %39, float %38
  %42 = fcmp olt float %41, 0x3EE4F8B580000000
  %43 = tail call float @llvm.fabs.f32(float %37) #10
  %44 = select i1 %42, float 0x3EE4F8B580000000, float %41
  %45 = fmul float %44, 0x3EE4F8B580000000
  %46 = fcmp olt float %43, %45
  br label %47

47:                                               ; preds = %2, %17, %32
  %48 = phi i1 [ false, %17 ], [ false, %2 ], [ %46, %32 ]
  ret i1 %48
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZN2cc8MathUtil19SkM44HasPerspectiveERK5SkM44(%class.SkM44* nocapture readonly dereferenceable(64)) local_unnamed_addr #8 align 2 {
  %2 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 3
  %3 = load float, float* %2, align 4
  %4 = fcmp une float %3, 0.000000e+00
  br i1 %4, label %17, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 7
  %7 = load float, float* %6, align 4
  %8 = fcmp une float %7, 0.000000e+00
  br i1 %8, label %17, label %9

9:                                                ; preds = %5
  %10 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 11
  %11 = load float, float* %10, align 4
  %12 = fcmp une float %11, 0.000000e+00
  br i1 %12, label %17, label %13

13:                                               ; preds = %9
  %14 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 15
  %15 = load float, float* %14, align 4
  %16 = fcmp une float %15, 1.000000e+00
  br label %17

17:                                               ; preds = %13, %9, %5, %1
  %18 = phi i1 [ true, %9 ], [ true, %5 ], [ true, %1 ], [ %16, %13 ]
  ret i1 %18
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZN2cc8MathUtil9SkM44Is2DERK5SkM44(%class.SkM44* nocapture readonly dereferenceable(64)) local_unnamed_addr #8 align 2 {
  %2 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 8
  %3 = load float, float* %2, align 4
  %4 = fcmp oeq float %3, 0.000000e+00
  br i1 %4, label %5, label %29

5:                                                ; preds = %1
  %6 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 9
  %7 = load float, float* %6, align 4
  %8 = fcmp oeq float %7, 0.000000e+00
  br i1 %8, label %9, label %29

9:                                                ; preds = %5
  %10 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 10
  %11 = load float, float* %10, align 4
  %12 = fcmp oeq float %11, 1.000000e+00
  br i1 %12, label %13, label %29

13:                                               ; preds = %9
  %14 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 2
  %15 = load float, float* %14, align 4
  %16 = fcmp oeq float %15, 0.000000e+00
  br i1 %16, label %17, label %29

17:                                               ; preds = %13
  %18 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 6
  %19 = load float, float* %18, align 4
  %20 = fcmp oeq float %19, 0.000000e+00
  br i1 %20, label %21, label %29

21:                                               ; preds = %17
  %22 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 14
  %23 = load float, float* %22, align 4
  %24 = fcmp oeq float %23, 0.000000e+00
  br i1 %24, label %25, label %29

25:                                               ; preds = %21
  %26 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 11
  %27 = load float, float* %26, align 4
  %28 = fcmp oeq float %27, 0.000000e+00
  br label %29

29:                                               ; preds = %25, %21, %17, %13, %9, %5, %1
  %30 = phi i1 [ false, %21 ], [ false, %17 ], [ false, %13 ], [ false, %9 ], [ false, %5 ], [ false, %1 ], [ %28, %25 ]
  ret i1 %30
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZN2cc8MathUtil29SkM44Preserves2DAxisAlignmentERK5SkM44(%class.SkM44* nocapture readonly dereferenceable(64)) local_unnamed_addr #8 align 2 {
  %2 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 8
  %3 = load float, float* %2, align 4
  %4 = fcmp oeq float %3, 0.000000e+00
  br i1 %4, label %5, label %71

5:                                                ; preds = %1
  %6 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 9
  %7 = load float, float* %6, align 4
  %8 = fcmp oeq float %7, 0.000000e+00
  br i1 %8, label %9, label %71

9:                                                ; preds = %5
  %10 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 10
  %11 = load float, float* %10, align 4
  %12 = fcmp oeq float %11, 1.000000e+00
  br i1 %12, label %13, label %71

13:                                               ; preds = %9
  %14 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 2
  %15 = load float, float* %14, align 4
  %16 = fcmp oeq float %15, 0.000000e+00
  br i1 %16, label %17, label %71

17:                                               ; preds = %13
  %18 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 6
  %19 = load float, float* %18, align 4
  %20 = fcmp oeq float %19, 0.000000e+00
  br i1 %20, label %21, label %71

21:                                               ; preds = %17
  %22 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 14
  %23 = load float, float* %22, align 4
  %24 = fcmp oeq float %23, 0.000000e+00
  br i1 %24, label %25, label %71

25:                                               ; preds = %21
  %26 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 11
  %27 = load float, float* %26, align 4
  %28 = fcmp oeq float %27, 0.000000e+00
  br i1 %28, label %29, label %71

29:                                               ; preds = %25
  %30 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 3
  %31 = load float, float* %30, align 4
  %32 = fcmp une float %31, 0.000000e+00
  br i1 %32, label %71, label %33

33:                                               ; preds = %29
  %34 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 7
  %35 = load float, float* %34, align 4
  %36 = fcmp une float %35, 0.000000e+00
  br i1 %36, label %71, label %37

37:                                               ; preds = %33
  %38 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 15
  %39 = load float, float* %38, align 4
  %40 = fcmp une float %39, 1.000000e+00
  br i1 %40, label %71, label %41

41:                                               ; preds = %37
  %42 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 4
  %43 = load float, float* %42, align 4
  %44 = fcmp une float %43, 0.000000e+00
  br i1 %44, label %49, label %45

45:                                               ; preds = %41
  %46 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 1
  %47 = load float, float* %46, align 4
  %48 = fcmp une float %47, 0.000000e+00
  br i1 %48, label %49, label %63

49:                                               ; preds = %45, %41
  %50 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 0
  %51 = load float, float* %50, align 4
  %52 = fcmp oeq float %51, 0.000000e+00
  br i1 %52, label %53, label %71

53:                                               ; preds = %49
  %54 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 5
  %55 = load float, float* %54, align 4
  %56 = fcmp une float %55, 0.000000e+00
  %57 = xor i1 %44, true
  %58 = or i1 %56, %57
  br i1 %58, label %71, label %59

59:                                               ; preds = %53
  %60 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 1
  %61 = load float, float* %60, align 4
  %62 = fcmp une float %61, 0.000000e+00
  br label %71

63:                                               ; preds = %45
  %64 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 0
  %65 = load float, float* %64, align 4
  %66 = fcmp une float %65, 0.000000e+00
  br i1 %66, label %67, label %71

67:                                               ; preds = %63
  %68 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 5
  %69 = load float, float* %68, align 4
  %70 = fcmp une float %69, 0.000000e+00
  br label %71

71:                                               ; preds = %53, %29, %33, %1, %5, %9, %13, %17, %21, %63, %67, %49, %59, %25, %37
  %72 = phi i1 [ false, %37 ], [ false, %25 ], [ false, %53 ], [ false, %49 ], [ %62, %59 ], [ false, %63 ], [ %70, %67 ], [ false, %21 ], [ false, %17 ], [ false, %13 ], [ false, %9 ], [ false, %5 ], [ false, %1 ], [ false, %33 ], [ false, %29 ]
  ret i1 %72
}

declare void @_ZNK10SkMatrix4410mapScalarsEPKfPf(%class.SkMatrix44*, float*, float*) local_unnamed_addr #1

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #11

; Function Attrs: noreturn nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(24) %"class.std::__1::vector.20"* @_ZN4absl16variant_internal26TypedThrowBadVariantAccessIRKNSt3__16vectorIN4base5ValueENS2_9allocatorIS5_EEEEEET_v() local_unnamed_addr #12 comdat {
  tail call void @_ZN4absl16variant_internal21ThrowBadVariantAccessEv() #15
  unreachable
}

; Function Attrs: noreturn
declare void @_ZN4absl16variant_internal21ThrowBadVariantAccessEv() local_unnamed_addr #13

declare { <2 x float>, <2 x float> } @_ZN3gfx13SkRectToRectFERK6SkRect(%struct.SkRect* dereferenceable(16)) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { argmemonly nounwind writeonly }
attributes #10 = { nounwind }
attributes #11 = { nounwind readnone speculatable }
attributes #12 = { noreturn nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = { nounwind readnone }
attributes #15 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
