; ModuleID = '../../third_party/angle/src/compiler/translator/tree_ops/PruneNoOps.cpp'
source_filename = "../../third_party/angle/src/compiler/translator/tree_ops/PruneNoOps.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.sh::ImmutableString" = type { i8*, i64 }
%"class.sh::TCompiler" = type opaque
%"class.sh::TIntermBlock" = type <{ %"class.sh::TIntermNode", %"class.sh::TIntermAggregateBase", %"class.sh::TVector", i8, [7 x i8] }>
%"class.sh::TIntermNode" = type { i32 (...)**, %"struct.sh::TSourceLoc" }
%"struct.sh::TSourceLoc" = type { i32, i32, i32, i32 }
%"class.sh::TIntermAggregateBase" = type { i32 (...)** }
%"class.sh::TVector" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"**, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.sh::TIntermNode"** }
%"class.sh::TSymbolTable" = type opaque
%"class.sh::(anonymous namespace)::PruneNoOpsTraverser" = type { %"class.sh::TIntermTraverser" }
%"class.sh::TIntermTraverser" = type { i32 (...)**, i8, i8, i8, i32, i32, i8, %"class.std::__1::vector.1", %"class.sh::TSymbolTable"*, %"class.std::__1::vector.6", %"class.std::__1::vector.13", %"class.sh::TVector", %"class.std::__1::vector.20" }
%"class.std::__1::vector.1" = type { %"class.std::__1::__vector_base.2" }
%"class.std::__1::__vector_base.2" = type { %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"class.std::__1::__compressed_pair.3" }
%"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry" = type { %"class.sh::TIntermAggregateBase"*, %"class.sh::TIntermNode"*, %"class.sh::TVector" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* }
%"class.std::__1::vector.6" = type { %"class.std::__1::__vector_base.7" }
%"class.std::__1::__vector_base.7" = type { %"struct.sh::TIntermTraverser::NodeInsertMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeInsertMultipleEntry"*, %"class.std::__1::__compressed_pair.8" }
%"struct.sh::TIntermTraverser::NodeInsertMultipleEntry" = type { %"class.sh::TIntermBlock"*, i64, %"class.sh::TVector", %"class.sh::TVector" }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { %"struct.sh::TIntermTraverser::NodeInsertMultipleEntry"* }
%"class.std::__1::vector.13" = type { %"class.std::__1::__vector_base.14" }
%"class.std::__1::__vector_base.14" = type { %"struct.sh::TIntermTraverser::NodeUpdateEntry"*, %"struct.sh::TIntermTraverser::NodeUpdateEntry"*, %"class.std::__1::__compressed_pair.15" }
%"struct.sh::TIntermTraverser::NodeUpdateEntry" = type <{ %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"struct.std::__1::__compressed_pair_elem.16" = type { %"struct.sh::TIntermTraverser::NodeUpdateEntry"* }
%"class.std::__1::vector.20" = type { %"class.std::__1::__vector_base.21" }
%"class.std::__1::__vector_base.21" = type { %"struct.sh::TIntermTraverser::ParentBlock"*, %"struct.sh::TIntermTraverser::ParentBlock"*, %"class.std::__1::__compressed_pair.22" }
%"struct.sh::TIntermTraverser::ParentBlock" = type { %"class.sh::TIntermBlock"*, i64 }
%"class.std::__1::__compressed_pair.22" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"struct.std::__1::__compressed_pair_elem.23" = type { %"struct.sh::TIntermTraverser::ParentBlock"* }
%"class.sh::TIntermSymbol" = type { %"class.sh::TIntermTyped", %"class.sh::TVariable"* }
%"class.sh::TIntermTyped" = type { %"class.sh::TIntermNode" }
%"class.sh::TVariable" = type { %"class.sh::TSymbol.base", %"class.sh::TType"*, %"class.sh::TConstantUnion"* }
%"class.sh::TSymbol.base" = type <{ %"class.sh::ImmutableString", %"class.sh::TSymbolUniqueId", i8, i8, i8 }>
%"class.sh::TSymbolUniqueId" = type { i32 }
%"class.sh::TType" = type { i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", i8, %"struct.sh::TLayoutQualifier", i8, i8, %"class.sh::TSpan", %"class.sh::TVector.27"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* }
%"struct.sh::TMemoryQualifier" = type { i8, i8, i8, i8, i8 }
%"struct.sh::TLayoutQualifier" = type <{ i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, [2 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, [3 x i8] }>
%"struct.sh::WorkGroupSize" = type { [3 x i32] }
%"class.sh::TSpan" = type { i32*, i64 }
%"class.sh::TVector.27" = type opaque
%"class.sh::TInterfaceBlock" = type { %"class.sh::TSymbol.base", %"class.sh::TFieldListCollection", i32, i32 }
%"class.sh::TFieldListCollection" = type { %"class.sh::TVector.28"*, i64, i32, %"class.std::__1::basic_string" }
%"class.sh::TVector.28" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.29" }
%"class.std::__1::__compressed_pair.29" = type { %"struct.std::__1::__compressed_pair_elem.30" }
%"struct.std::__1::__compressed_pair_elem.30" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.sh::TStructure" = type <{ %"class.sh::TSymbol.base", i8, %"class.sh::TFieldListCollection", i8, [7 x i8] }>
%"class.sh::TConstantUnion" = type { %union.anon.34, i32 }
%union.anon.34 = type { i32 }
%"class.sh::TIntermConstantUnion" = type { %"class.sh::TIntermExpression", %"class.sh::TConstantUnion"* }
%"class.sh::TIntermExpression" = type { %"class.sh::TIntermTyped", %"class.sh::TType" }
%"class.sh::TIntermSwizzle" = type <{ %"class.sh::TIntermExpression", %"class.sh::TIntermTyped"*, %"class.sh::TVector.35", i8, [7 x i8] }>
%"class.sh::TVector.35" = type { %"class.std::__1::vector.36" }
%"class.std::__1::vector.36" = type { %"class.std::__1::__vector_base.37" }
%"class.std::__1::__vector_base.37" = type { i32*, i32*, %"class.std::__1::__compressed_pair.38" }
%"class.std::__1::__compressed_pair.38" = type { %"struct.std::__1::__compressed_pair_elem.39" }
%"struct.std::__1::__compressed_pair_elem.39" = type { i32* }
%"class.sh::TIntermBinary" = type <{ %"class.sh::TIntermOperator.base", [7 x i8], %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, i8, [7 x i8] }>
%"class.sh::TIntermOperator.base" = type <{ %"class.sh::TIntermExpression", i8 }>
%"class.sh::TIntermUnary" = type { %"class.sh::TIntermOperator.base", %"class.sh::TIntermTyped"*, i8, %"class.sh::TFunction"* }
%"class.sh::TFunction" = type <{ %"class.sh::TSymbol.base", i8, %"class.sh::TVector.43"*, %"class.sh::TVariable"**, i64, %"class.sh::TType"*, %"class.sh::ImmutableString", i8, i8, i8, i8, [4 x i8] }>
%"class.sh::TVector.43" = type opaque
%"class.sh::TIntermTernary" = type { %"class.sh::TIntermExpression", %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"* }
%"class.sh::TIntermIfElse" = type { %"class.sh::TIntermNode", %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermSwitch" = type { %"class.sh::TIntermNode", %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermCase" = type { %"class.sh::TIntermNode", %"class.sh::TIntermTyped"* }
%"class.sh::TIntermFunctionPrototype" = type { %"class.sh::TIntermTyped", %"class.sh::TFunction"* }
%"class.sh::TIntermFunctionDefinition" = type { %"class.sh::TIntermNode", %"class.sh::TIntermFunctionPrototype"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermAggregate" = type { %"class.sh::TIntermOperator.base", %"class.sh::TIntermAggregateBase", %"class.sh::TVector", i8, i8, %"class.sh::TFunction"* }
%"class.sh::TIntermDeclaration" = type { %"class.sh::TIntermNode", %"class.sh::TIntermAggregateBase", %"class.sh::TVector" }
%"class.sh::TIntermGlobalQualifierDeclaration" = type <{ %"class.sh::TIntermNode", %"class.sh::TIntermSymbol"*, i8, [7 x i8] }>
%"class.sh::TSymbol" = type <{ %"class.sh::ImmutableString", %"class.sh::TSymbolUniqueId", i8, i8, i8, i8 }>
%"class.angle::PoolAllocator" = type <{ i64, i64, i64, i64, i64, %"struct.angle::PoolAllocator::Header"*, %"struct.angle::PoolAllocator::Header"*, %"class.std::__1::vector.46", i32, [4 x i8], i64, i8, [7 x i8] }>
%"struct.angle::PoolAllocator::Header" = type { %"struct.angle::PoolAllocator::Header"*, i64 }
%"class.std::__1::vector.46" = type { %"class.std::__1::__vector_base.47" }
%"class.std::__1::__vector_base.47" = type { %"struct.angle::PoolAllocator::AllocState"*, %"struct.angle::PoolAllocator::AllocState"*, %"class.std::__1::__compressed_pair.48" }
%"struct.angle::PoolAllocator::AllocState" = type { i64, %"struct.angle::PoolAllocator::Header"* }
%"class.std::__1::__compressed_pair.48" = type { %"struct.std::__1::__compressed_pair_elem.49" }
%"struct.std::__1::__compressed_pair_elem.49" = type { %"struct.angle::PoolAllocator::AllocState"* }
%"class.sh::TIntermLoop" = type { %"class.sh::TIntermNode", i32, %"class.sh::TIntermNode"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermBranch" = type { %"class.sh::TIntermNode", i8, %"class.sh::TIntermTyped"* }
%"class.sh::TIntermPreprocessorDirective" = type { %"class.sh::TIntermNode", i32, %"class.sh::ImmutableString" }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZN2sh16TIntermTraverser11visitSymbolEPNS_13TIntermSymbolE = comdat any

$_ZN2sh16TIntermTraverser18visitConstantUnionEPNS_20TIntermConstantUnionE = comdat any

$_ZN2sh16TIntermTraverser12visitSwizzleENS_5VisitEPNS_14TIntermSwizzleE = comdat any

$_ZN2sh16TIntermTraverser11visitBinaryENS_5VisitEPNS_13TIntermBinaryE = comdat any

$_ZN2sh16TIntermTraverser10visitUnaryENS_5VisitEPNS_12TIntermUnaryE = comdat any

$_ZN2sh16TIntermTraverser12visitTernaryENS_5VisitEPNS_14TIntermTernaryE = comdat any

$_ZN2sh16TIntermTraverser11visitIfElseENS_5VisitEPNS_13TIntermIfElseE = comdat any

$_ZN2sh16TIntermTraverser11visitSwitchENS_5VisitEPNS_13TIntermSwitchE = comdat any

$_ZN2sh16TIntermTraverser9visitCaseENS_5VisitEPNS_11TIntermCaseE = comdat any

$_ZN2sh16TIntermTraverser22visitFunctionPrototypeEPNS_24TIntermFunctionPrototypeE = comdat any

$_ZN2sh16TIntermTraverser23visitFunctionDefinitionENS_5VisitEPNS_25TIntermFunctionDefinitionE = comdat any

$_ZN2sh16TIntermTraverser14visitAggregateENS_5VisitEPNS_16TIntermAggregateE = comdat any

$_ZN2sh16TIntermTraverser31visitGlobalQualifierDeclarationENS_5VisitEPNS_33TIntermGlobalQualifierDeclarationE = comdat any

$_ZN2sh16TIntermTraverser11visitBranchENS_5VisitEPNS_13TIntermBranchE = comdat any

$_ZN2sh16TIntermTraverser26visitPreprocessorDirectiveEPNS_28TIntermPreprocessorDirectiveE = comdat any

$_ZNSt3__16vectorIN2sh16TIntermTraverser28NodeReplaceWithMultipleEntryENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJRPNS1_12TIntermBlockERPNS1_11TIntermNodeENS1_7TVectorISC_EEEEEvDpOT_ = comdat any

$_ZNSt3__16vectorIN2sh16TIntermTraverser28NodeReplaceWithMultipleEntryENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJRPNS1_18TIntermDeclarationERPNS1_13TIntermSymbolENS1_7TVectorIPNS1_11TIntermNodeEEEEEEvDpOT_ = comdat any

@_ZTVN2sh12_GLOBAL__N_119PruneNoOpsTraverserE = internal unnamed_addr constant { [28 x i8*] } { [28 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.sh::TIntermTraverser"*)* @_ZN2sh16TIntermTraverserD2Ev to i8*), i8* bitcast (void (%"class.sh::(anonymous namespace)::PruneNoOpsTraverser"*)* @_ZN2sh12_GLOBAL__N_119PruneNoOpsTraverserD0Ev to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermSymbol"*)* @_ZN2sh16TIntermTraverser11visitSymbolEPNS_13TIntermSymbolE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermConstantUnion"*)* @_ZN2sh16TIntermTraverser18visitConstantUnionEPNS_20TIntermConstantUnionE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwizzle"*)* @_ZN2sh16TIntermTraverser12visitSwizzleENS_5VisitEPNS_14TIntermSwizzleE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBinary"*)* @_ZN2sh16TIntermTraverser11visitBinaryENS_5VisitEPNS_13TIntermBinaryE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermUnary"*)* @_ZN2sh16TIntermTraverser10visitUnaryENS_5VisitEPNS_12TIntermUnaryE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermTernary"*)* @_ZN2sh16TIntermTraverser12visitTernaryENS_5VisitEPNS_14TIntermTernaryE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermIfElse"*)* @_ZN2sh16TIntermTraverser11visitIfElseENS_5VisitEPNS_13TIntermIfElseE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwitch"*)* @_ZN2sh16TIntermTraverser11visitSwitchENS_5VisitEPNS_13TIntermSwitchE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermCase"*)* @_ZN2sh16TIntermTraverser9visitCaseENS_5VisitEPNS_11TIntermCaseE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionPrototype"*)* @_ZN2sh16TIntermTraverser22visitFunctionPrototypeEPNS_24TIntermFunctionPrototypeE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermFunctionDefinition"*)* @_ZN2sh16TIntermTraverser23visitFunctionDefinitionENS_5VisitEPNS_25TIntermFunctionDefinitionE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermAggregate"*)* @_ZN2sh16TIntermTraverser14visitAggregateENS_5VisitEPNS_16TIntermAggregateE to i8*), i8* bitcast (i1 (%"class.sh::(anonymous namespace)::PruneNoOpsTraverser"*, i32, %"class.sh::TIntermBlock"*)* @_ZN2sh12_GLOBAL__N_119PruneNoOpsTraverser10visitBlockENS_5VisitEPNS_12TIntermBlockE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermGlobalQualifierDeclaration"*)* @_ZN2sh16TIntermTraverser31visitGlobalQualifierDeclarationENS_5VisitEPNS_33TIntermGlobalQualifierDeclarationE to i8*), i8* bitcast (i1 (%"class.sh::(anonymous namespace)::PruneNoOpsTraverser"*, i32, %"class.sh::TIntermDeclaration"*)* @_ZN2sh12_GLOBAL__N_119PruneNoOpsTraverser16visitDeclarationENS_5VisitEPNS_18TIntermDeclarationE to i8*), i8* bitcast (i1 (%"class.sh::(anonymous namespace)::PruneNoOpsTraverser"*, i32, %"class.sh::TIntermLoop"*)* @_ZN2sh12_GLOBAL__N_119PruneNoOpsTraverser9visitLoopENS_5VisitEPNS_11TIntermLoopE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBranch"*)* @_ZN2sh16TIntermTraverser11visitBranchENS_5VisitEPNS_13TIntermBranchE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermPreprocessorDirective"*)* @_ZN2sh16TIntermTraverser26visitPreprocessorDirectiveEPNS_28TIntermPreprocessorDirectiveE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBinary"*)* @_ZN2sh16TIntermTraverser14traverseBinaryEPNS_13TIntermBinaryE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermUnary"*)* @_ZN2sh16TIntermTraverser13traverseUnaryEPNS_12TIntermUnaryE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionDefinition"*)* @_ZN2sh16TIntermTraverser26traverseFunctionDefinitionEPNS_25TIntermFunctionDefinitionE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermAggregate"*)* @_ZN2sh16TIntermTraverser17traverseAggregateEPNS_16TIntermAggregateE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBlock"*)* @_ZN2sh16TIntermTraverser13traverseBlockEPNS_12TIntermBlockE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermLoop"*)* @_ZN2sh16TIntermTraverser12traverseLoopEPNS_11TIntermLoopE to i8*)] }, align 8
@_ZN2shL21kEmptyImmutableStringE = internal constant %"class.sh::ImmutableString" { i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i32 0, i32 0), i64 0 }, align 8
@.str.1 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2sh10PruneNoOpsEPNS_9TCompilerEPNS_12TIntermBlockEPNS_12TSymbolTableE(%"class.sh::TCompiler"*, %"class.sh::TIntermBlock"*, %"class.sh::TSymbolTable"*) local_unnamed_addr #0 {
  %4 = alloca %"class.sh::(anonymous namespace)::PruneNoOpsTraverser", align 8
  %5 = bitcast %"class.sh::(anonymous namespace)::PruneNoOpsTraverser"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 152, i8* nonnull %5) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 -86, i64 152, i1 false) #8
  %6 = getelementptr inbounds %"class.sh::(anonymous namespace)::PruneNoOpsTraverser", %"class.sh::(anonymous namespace)::PruneNoOpsTraverser"* %4, i64 0, i32 0
  call void @_ZN2sh16TIntermTraverserC2EbbbPNS_12TSymbolTableE(%"class.sh::TIntermTraverser"* nonnull %6, i1 zeroext true, i1 zeroext false, i1 zeroext false, %"class.sh::TSymbolTable"* %2) #8
  %7 = getelementptr inbounds %"class.sh::(anonymous namespace)::PruneNoOpsTraverser", %"class.sh::(anonymous namespace)::PruneNoOpsTraverser"* %4, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [28 x i8*] }, { [28 x i8*] }* @_ZTVN2sh12_GLOBAL__N_119PruneNoOpsTraverserE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %7, align 8
  call void @_ZN2sh12TIntermBlock8traverseEPNS_16TIntermTraverserE(%"class.sh::TIntermBlock"* %1, %"class.sh::TIntermTraverser"* nonnull %6) #8
  %8 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %1, i64 0, i32 0
  %9 = call zeroext i1 @_ZN2sh16TIntermTraverser10updateTreeEPNS_9TCompilerEPNS_11TIntermNodeE(%"class.sh::TIntermTraverser"* nonnull %6, %"class.sh::TCompiler"* %0, %"class.sh::TIntermNode"* %8) #8
  call void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"* nonnull %6) #8
  call void @llvm.lifetime.end.p0i8(i64 152, i8* nonnull %5) #8
  ret i1 %9
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_ZN2sh12TIntermBlock8traverseEPNS_16TIntermTraverserE(%"class.sh::TIntermBlock"*, %"class.sh::TIntermTraverser"*) unnamed_addr #2

declare zeroext i1 @_ZN2sh16TIntermTraverser10updateTreeEPNS_9TCompilerEPNS_11TIntermNodeE(%"class.sh::TIntermTraverser"*, %"class.sh::TCompiler"*, %"class.sh::TIntermNode"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"*) unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN2sh16TIntermTraverserC2EbbbPNS_12TSymbolTableE(%"class.sh::TIntermTraverser"*, i1 zeroext, i1 zeroext, i1 zeroext, %"class.sh::TSymbolTable"*) unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN2sh12_GLOBAL__N_119PruneNoOpsTraverserD0Ev(%"class.sh::(anonymous namespace)::PruneNoOpsTraverser"*) unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.sh::(anonymous namespace)::PruneNoOpsTraverser", %"class.sh::(anonymous namespace)::PruneNoOpsTraverser"* %0, i64 0, i32 0
  tail call void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"* %2) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh16TIntermTraverser11visitSymbolEPNS_13TIntermSymbolE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermSymbol"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh16TIntermTraverser18visitConstantUnionEPNS_20TIntermConstantUnionE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermConstantUnion"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser12visitSwizzleENS_5VisitEPNS_14TIntermSwizzleE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwizzle"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser11visitBinaryENS_5VisitEPNS_13TIntermBinaryE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBinary"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser10visitUnaryENS_5VisitEPNS_12TIntermUnaryE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermUnary"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser12visitTernaryENS_5VisitEPNS_14TIntermTernaryE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermTernary"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser11visitIfElseENS_5VisitEPNS_13TIntermIfElseE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermIfElse"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser11visitSwitchENS_5VisitEPNS_13TIntermSwitchE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwitch"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser9visitCaseENS_5VisitEPNS_11TIntermCaseE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermCase"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh16TIntermTraverser22visitFunctionPrototypeEPNS_24TIntermFunctionPrototypeE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionPrototype"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser23visitFunctionDefinitionENS_5VisitEPNS_25TIntermFunctionDefinitionE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermFunctionDefinition"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser14visitAggregateENS_5VisitEPNS_16TIntermAggregateE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermAggregate"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZN2sh12_GLOBAL__N_119PruneNoOpsTraverser10visitBlockENS_5VisitEPNS_12TIntermBlockE(%"class.sh::(anonymous namespace)::PruneNoOpsTraverser"*, i32, %"class.sh::TIntermBlock"*) unnamed_addr #0 align 2 {
  %4 = alloca %"class.sh::TIntermBlock"*, align 8
  %5 = alloca %"class.sh::TIntermNode"*, align 8
  %6 = alloca %"class.sh::TVector", align 16
  store %"class.sh::TIntermBlock"* %2, %"class.sh::TIntermBlock"** %4, align 8
  %7 = bitcast %"class.sh::TIntermBlock"* %2 to %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)***
  %8 = load %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)**, %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)*** %7, align 8
  %9 = getelementptr inbounds %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)*, %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)** %8, i64 27
  %10 = load %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)*, %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)** %9, align 8
  %11 = tail call %"class.sh::TVector"* %10(%"class.sh::TIntermBlock"* %2) #8
  %12 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %11, i64 0, i32 0, i32 0, i32 0
  %13 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %12, align 8
  %14 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %11, i64 0, i32 0, i32 0, i32 1
  %15 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %14, align 8
  %16 = icmp eq %"class.sh::TIntermNode"** %13, %15
  br i1 %16, label %31, label %17

17:                                               ; preds = %3
  %18 = bitcast %"class.sh::TIntermNode"** %5 to i8*
  %19 = bitcast %"class.sh::TVector"* %6 to i8*
  %20 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %6, i64 0, i32 0, i32 0, i32 0
  %21 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %6, i64 0, i32 0, i32 0, i32 1
  %22 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %6, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %23 = getelementptr inbounds %"class.sh::(anonymous namespace)::PruneNoOpsTraverser", %"class.sh::(anonymous namespace)::PruneNoOpsTraverser"* %0, i64 0, i32 0, i32 7, i32 0, i32 1
  %24 = getelementptr inbounds %"class.sh::(anonymous namespace)::PruneNoOpsTraverser", %"class.sh::(anonymous namespace)::PruneNoOpsTraverser"* %0, i64 0, i32 0, i32 7, i32 0, i32 2, i32 0, i32 0
  %25 = getelementptr inbounds %"class.sh::(anonymous namespace)::PruneNoOpsTraverser", %"class.sh::(anonymous namespace)::PruneNoOpsTraverser"* %0, i64 0, i32 0, i32 7
  %26 = bitcast %"class.sh::TIntermNode"** %5 to i64*
  %27 = bitcast %"class.sh::TIntermNode"*** %21 to i64*
  %28 = bitcast %"class.sh::TIntermNode"*** %22 to i64*
  %29 = bitcast %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %23 to i64*
  %30 = bitcast %"class.sh::TVector"* %6 to <2 x i64>*
  br label %32

31:                                               ; preds = %90, %3
  ret i1 true

32:                                               ; preds = %17, %90
  %33 = phi %"class.sh::TIntermNode"** [ %13, %17 ], [ %91, %90 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18) #8
  store %"class.sh::TIntermNode"* inttoptr (i64 -6148914691236517206 to %"class.sh::TIntermNode"*), %"class.sh::TIntermNode"** %5, align 8
  %34 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %33, align 8
  store %"class.sh::TIntermNode"* %34, %"class.sh::TIntermNode"** %5, align 8
  %35 = bitcast %"class.sh::TIntermNode"* %34 to %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)***
  %36 = load %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*** %35, align 8
  %37 = getelementptr inbounds %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)** %36, i64 5
  %38 = load %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)** %37, align 8
  %39 = call %"class.sh::TIntermConstantUnion"* %38(%"class.sh::TIntermNode"* %34) #8
  %40 = icmp eq %"class.sh::TIntermConstantUnion"* %39, null
  br i1 %40, label %41, label %63

41:                                               ; preds = %32
  %42 = bitcast %"class.sh::TIntermNode"* %34 to %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)***
  %43 = load %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)*** %42, align 8
  %44 = getelementptr inbounds %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)** %43, i64 11
  %45 = load %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)** %44, align 8
  %46 = call %"class.sh::TIntermDeclaration"* %45(%"class.sh::TIntermNode"* %34) #8
  %47 = icmp eq %"class.sh::TIntermDeclaration"* %46, null
  br i1 %47, label %90, label %48

48:                                               ; preds = %41
  %49 = load %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)*** %42, align 8
  %50 = getelementptr inbounds %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)** %49, i64 11
  %51 = load %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)** %50, align 8
  %52 = call %"class.sh::TIntermDeclaration"* %51(%"class.sh::TIntermNode"* %34) #8
  %53 = bitcast %"class.sh::TIntermDeclaration"* %52 to %"class.sh::TVector"* (%"class.sh::TIntermDeclaration"*)***
  %54 = load %"class.sh::TVector"* (%"class.sh::TIntermDeclaration"*)**, %"class.sh::TVector"* (%"class.sh::TIntermDeclaration"*)*** %53, align 8
  %55 = getelementptr inbounds %"class.sh::TVector"* (%"class.sh::TIntermDeclaration"*)*, %"class.sh::TVector"* (%"class.sh::TIntermDeclaration"*)** %54, i64 27
  %56 = load %"class.sh::TVector"* (%"class.sh::TIntermDeclaration"*)*, %"class.sh::TVector"* (%"class.sh::TIntermDeclaration"*)** %55, align 8
  %57 = call %"class.sh::TVector"* %56(%"class.sh::TIntermDeclaration"* %52) #8
  %58 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %57, i64 0, i32 0, i32 0, i32 0
  %59 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %58, align 8
  %60 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %57, i64 0, i32 0, i32 0, i32 1
  %61 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %60, align 8
  %62 = icmp eq %"class.sh::TIntermNode"** %59, %61
  br i1 %62, label %63, label %90

63:                                               ; preds = %32, %48
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %19) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %19, i8 0, i64 24, i1 false) #8
  %64 = load %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %23, align 8
  %65 = load %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %24, align 8
  %66 = icmp ult %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %64, %65
  br i1 %66, label %67, label %84

67:                                               ; preds = %63
  %68 = load %"class.sh::TIntermBlock"*, %"class.sh::TIntermBlock"** %4, align 8
  %69 = icmp eq %"class.sh::TIntermBlock"* %68, null
  %70 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %68, i64 0, i32 1
  %71 = select i1 %69, %"class.sh::TIntermAggregateBase"* null, %"class.sh::TIntermAggregateBase"* %70
  %72 = load i64, i64* %26, align 8
  %73 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %64, i64 0, i32 0
  store %"class.sh::TIntermAggregateBase"* %71, %"class.sh::TIntermAggregateBase"** %73, align 8
  %74 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %64, i64 0, i32 1
  %75 = bitcast %"class.sh::TIntermNode"** %74 to i64*
  store i64 %72, i64* %75, align 8
  %76 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %64, i64 0, i32 2
  %77 = load <2 x i64>, <2 x i64>* %30, align 16
  %78 = bitcast %"class.sh::TVector"* %76 to <2 x i64>*
  store <2 x i64> %77, <2 x i64>* %78, align 8
  %79 = load i64, i64* %28, align 16
  %80 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %64, i64 0, i32 2, i32 0, i32 0, i32 2, i32 0, i32 0
  %81 = bitcast %"class.sh::TIntermNode"*** %80 to i64*
  store i64 %79, i64* %81, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %19, i8 0, i64 24, i1 false) #8
  %82 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %64, i64 1
  %83 = ptrtoint %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %82 to i64
  store i64 %83, i64* %29, align 8
  br label %89

84:                                               ; preds = %63
  call void @_ZNSt3__16vectorIN2sh16TIntermTraverser28NodeReplaceWithMultipleEntryENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJRPNS1_12TIntermBlockERPNS1_11TIntermNodeENS1_7TVectorISC_EEEEEvDpOT_(%"class.std::__1::vector.1"* %25, %"class.sh::TIntermBlock"** nonnull dereferenceable(8) %4, %"class.sh::TIntermNode"** nonnull dereferenceable(8) %5, %"class.sh::TVector"* nonnull dereferenceable(24) %6) #8
  %85 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %20, align 16
  %86 = icmp eq %"class.sh::TIntermNode"** %85, null
  br i1 %86, label %89, label %87

87:                                               ; preds = %84
  %88 = ptrtoint %"class.sh::TIntermNode"** %85 to i64
  store i64 %88, i64* %27, align 8
  br label %89

89:                                               ; preds = %67, %84, %87
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %19) #8
  br label %90

90:                                               ; preds = %41, %89, %48
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18) #8
  %91 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %33, i64 1
  %92 = icmp eq %"class.sh::TIntermNode"** %91, %15
  br i1 %92, label %31, label %32
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser31visitGlobalQualifierDeclarationENS_5VisitEPNS_33TIntermGlobalQualifierDeclarationE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermGlobalQualifierDeclaration"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZN2sh12_GLOBAL__N_119PruneNoOpsTraverser16visitDeclarationENS_5VisitEPNS_18TIntermDeclarationE(%"class.sh::(anonymous namespace)::PruneNoOpsTraverser"*, i32, %"class.sh::TIntermDeclaration"*) unnamed_addr #0 align 2 {
  %4 = alloca %"class.sh::TIntermDeclaration"*, align 8
  %5 = alloca %"class.sh::TIntermSymbol"*, align 8
  %6 = alloca %"class.sh::TVector", align 16
  store %"class.sh::TIntermDeclaration"* %2, %"class.sh::TIntermDeclaration"** %4, align 8
  %7 = bitcast %"class.sh::TIntermDeclaration"* %2 to %"class.sh::TVector"* (%"class.sh::TIntermDeclaration"*)***
  %8 = load %"class.sh::TVector"* (%"class.sh::TIntermDeclaration"*)**, %"class.sh::TVector"* (%"class.sh::TIntermDeclaration"*)*** %7, align 8
  %9 = getelementptr inbounds %"class.sh::TVector"* (%"class.sh::TIntermDeclaration"*)*, %"class.sh::TVector"* (%"class.sh::TIntermDeclaration"*)** %8, i64 27
  %10 = load %"class.sh::TVector"* (%"class.sh::TIntermDeclaration"*)*, %"class.sh::TVector"* (%"class.sh::TIntermDeclaration"*)** %9, align 8
  %11 = tail call %"class.sh::TVector"* %10(%"class.sh::TIntermDeclaration"* %2) #8
  %12 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %11, i64 0, i32 0, i32 0, i32 1
  %13 = bitcast %"class.sh::TIntermNode"*** %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = bitcast %"class.sh::TVector"* %11 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = icmp eq i64 %14, %16
  %18 = getelementptr inbounds %"class.sh::TIntermDeclaration", %"class.sh::TIntermDeclaration"* %2, i64 0, i32 0
  br i1 %17, label %140, label %19

19:                                               ; preds = %3
  %20 = bitcast %"class.sh::TIntermSymbol"** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #8
  store %"class.sh::TIntermSymbol"* inttoptr (i64 -6148914691236517206 to %"class.sh::TIntermSymbol"*), %"class.sh::TIntermSymbol"** %5, align 8
  %21 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %11, i64 0, i32 0, i32 0, i32 0
  %22 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %21, align 8
  %23 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %22, align 8
  %24 = bitcast %"class.sh::TIntermNode"* %23 to %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)***
  %25 = load %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)*** %24, align 8
  %26 = getelementptr inbounds %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)** %25, i64 19
  %27 = load %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)** %26, align 8
  %28 = tail call %"class.sh::TIntermSymbol"* %27(%"class.sh::TIntermNode"* %23) #8
  store %"class.sh::TIntermSymbol"* %28, %"class.sh::TIntermSymbol"** %5, align 8
  %29 = icmp eq %"class.sh::TIntermSymbol"* %28, null
  %30 = getelementptr inbounds %"class.sh::TIntermSymbol", %"class.sh::TIntermSymbol"* %28, i64 0, i32 0
  %31 = getelementptr inbounds %"class.sh::TIntermSymbol", %"class.sh::TIntermSymbol"* %28, i64 0, i32 0, i32 0
  %32 = ptrtoint %"class.sh::TIntermSymbol"* %28 to i64
  br i1 %29, label %139, label %33

33:                                               ; preds = %19
  %34 = getelementptr inbounds %"class.sh::TIntermSymbol", %"class.sh::TIntermSymbol"* %28, i64 0, i32 1
  %35 = bitcast %"class.sh::TVariable"** %34 to %"class.sh::TSymbol"**
  %36 = load %"class.sh::TSymbol"*, %"class.sh::TSymbol"** %35, align 8
  %37 = getelementptr inbounds %"class.sh::TSymbol", %"class.sh::TSymbol"* %36, i64 0, i32 2
  %38 = load i8, i8* %37, align 4
  %39 = icmp eq i8 %38, 3
  br i1 %39, label %40, label %139

40:                                               ; preds = %33
  %41 = bitcast %"class.sh::TIntermSymbol"* %28 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %42 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %41, align 8
  %43 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %42, i64 31
  %44 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %43, align 8
  %45 = tail call dereferenceable(184) %"class.sh::TType"* %44(%"class.sh::TIntermTyped"* %30) #8
  %46 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %45, i64 0, i32 0
  %47 = load i32, i32* %46, align 8
  %48 = icmp eq i32 %47, 91
  br i1 %48, label %139, label %49

49:                                               ; preds = %40
  %50 = load i64, i64* %13, align 8
  %51 = load i64, i64* %15, align 8
  %52 = sub i64 %50, %51
  %53 = ashr exact i64 %52, 3
  %54 = icmp ugt i64 %53, 1
  br i1 %54, label %55, label %91

55:                                               ; preds = %49
  %56 = bitcast %"class.sh::TVector"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %56) #8
  %57 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %6, i64 0, i32 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %56, i8 0, i64 24, i1 false) #8
  %58 = getelementptr inbounds %"class.sh::(anonymous namespace)::PruneNoOpsTraverser", %"class.sh::(anonymous namespace)::PruneNoOpsTraverser"* %0, i64 0, i32 0, i32 7, i32 0, i32 1
  %59 = load %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %58, align 8
  %60 = getelementptr inbounds %"class.sh::(anonymous namespace)::PruneNoOpsTraverser", %"class.sh::(anonymous namespace)::PruneNoOpsTraverser"* %0, i64 0, i32 0, i32 7, i32 0, i32 2, i32 0, i32 0
  %61 = load %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %60, align 8
  %62 = icmp ult %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %59, %61
  br i1 %62, label %63, label %82

63:                                               ; preds = %55
  %64 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %6, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %65 = icmp eq %"class.sh::TIntermDeclaration"* %2, null
  %66 = getelementptr inbounds %"class.sh::TIntermDeclaration", %"class.sh::TIntermDeclaration"* %2, i64 0, i32 1
  %67 = select i1 %65, %"class.sh::TIntermAggregateBase"* null, %"class.sh::TIntermAggregateBase"* %66
  %68 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %59, i64 0, i32 0
  store %"class.sh::TIntermAggregateBase"* %67, %"class.sh::TIntermAggregateBase"** %68, align 8
  %69 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %59, i64 0, i32 1
  %70 = bitcast %"class.sh::TIntermNode"** %69 to i64*
  store i64 %32, i64* %70, align 8
  %71 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %59, i64 0, i32 2
  %72 = bitcast %"class.sh::TVector"* %6 to <2 x i64>*
  %73 = load <2 x i64>, <2 x i64>* %72, align 16
  %74 = bitcast %"class.sh::TVector"* %71 to <2 x i64>*
  store <2 x i64> %73, <2 x i64>* %74, align 8
  %75 = bitcast %"class.sh::TIntermNode"*** %64 to i64*
  %76 = load i64, i64* %75, align 16
  %77 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %59, i64 0, i32 2, i32 0, i32 0, i32 2, i32 0, i32 0
  %78 = bitcast %"class.sh::TIntermNode"*** %77 to i64*
  store i64 %76, i64* %78, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %56, i8 0, i64 24, i1 false) #8
  %79 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %59, i64 1
  %80 = ptrtoint %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %79 to i64
  %81 = bitcast %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %58 to i64*
  store i64 %80, i64* %81, align 8
  br label %90

82:                                               ; preds = %55
  %83 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %6, i64 0, i32 0, i32 0, i32 0
  %84 = getelementptr inbounds %"class.sh::(anonymous namespace)::PruneNoOpsTraverser", %"class.sh::(anonymous namespace)::PruneNoOpsTraverser"* %0, i64 0, i32 0, i32 7
  call void @_ZNSt3__16vectorIN2sh16TIntermTraverser28NodeReplaceWithMultipleEntryENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJRPNS1_18TIntermDeclarationERPNS1_13TIntermSymbolENS1_7TVectorIPNS1_11TIntermNodeEEEEEEvDpOT_(%"class.std::__1::vector.1"* %84, %"class.sh::TIntermDeclaration"** nonnull dereferenceable(8) %4, %"class.sh::TIntermSymbol"** nonnull dereferenceable(8) %5, %"class.sh::TVector"* nonnull dereferenceable(24) %6) #8
  %85 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %83, align 16
  %86 = icmp eq %"class.sh::TIntermNode"** %85, null
  br i1 %86, label %90, label %87

87:                                               ; preds = %82
  %88 = ptrtoint %"class.sh::TIntermNode"** %85 to i64
  %89 = bitcast %"class.sh::TIntermNode"*** %57 to i64*
  store i64 %88, i64* %89, align 8
  br label %90

90:                                               ; preds = %63, %82, %87
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %56) #8
  br label %139

91:                                               ; preds = %49
  %92 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %41, align 8
  %93 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %92, i64 31
  %94 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %93, align 8
  %95 = tail call dereferenceable(184) %"class.sh::TType"* %94(%"class.sh::TIntermTyped"* %30) #8
  %96 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %95, i64 0, i32 0
  %97 = load i32, i32* %96, align 8
  %98 = icmp eq i32 %97, 90
  br i1 %98, label %99, label %139

99:                                               ; preds = %91
  %100 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %41, align 8
  %101 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %100, i64 31
  %102 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %101, align 8
  %103 = tail call dereferenceable(184) %"class.sh::TType"* %102(%"class.sh::TIntermTyped"* %30) #8
  %104 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %103, i64 0, i32 2
  %105 = load i32, i32* %104, align 8
  %106 = icmp eq i32 %105, 1
  br i1 %106, label %139, label %107

107:                                              ; preds = %99
  %108 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %41, align 8
  %109 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %108, i64 31
  %110 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %109, align 8
  %111 = tail call dereferenceable(184) %"class.sh::TType"* %110(%"class.sh::TIntermTyped"* %30) #8
  %112 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %111, i64 0, i32 2
  %113 = load i32, i32* %112, align 8
  %114 = icmp eq i32 %113, 0
  br i1 %114, label %139, label %115

115:                                              ; preds = %107
  %116 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #8
  %117 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %116, i64 184) #8
  %118 = bitcast i8* %117 to %"class.sh::TType"*
  %119 = bitcast %"class.sh::TIntermSymbol"* %28 to %"class.sh::TType"* (%"class.sh::TIntermSymbol"*)***
  %120 = load %"class.sh::TType"* (%"class.sh::TIntermSymbol"*)**, %"class.sh::TType"* (%"class.sh::TIntermSymbol"*)*** %119, align 8
  %121 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermSymbol"*)*, %"class.sh::TType"* (%"class.sh::TIntermSymbol"*)** %120, i64 31
  %122 = load %"class.sh::TType"* (%"class.sh::TIntermSymbol"*)*, %"class.sh::TType"* (%"class.sh::TIntermSymbol"*)** %121, align 8
  %123 = tail call dereferenceable(184) %"class.sh::TType"* %122(%"class.sh::TIntermSymbol"* nonnull %28) #8
  tail call void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"* %118, %"class.sh::TType"* dereferenceable(184) %123) #8
  %124 = getelementptr inbounds %"class.sh::(anonymous namespace)::PruneNoOpsTraverser", %"class.sh::(anonymous namespace)::PruneNoOpsTraverser"* %0, i64 0, i32 0
  %125 = getelementptr inbounds %"class.sh::(anonymous namespace)::PruneNoOpsTraverser", %"class.sh::(anonymous namespace)::PruneNoOpsTraverser"* %0, i64 0, i32 0, i32 6
  %126 = load i8, i8* %125, align 4, !range !2
  %127 = getelementptr inbounds i8, i8* %117, i64 8
  %128 = bitcast i8* %127 to i32*
  %129 = zext i8 %126 to i32
  store i32 %129, i32* %128, align 8
  %130 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #8
  %131 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %130, i64 40) #8
  %132 = bitcast i8* %131 to %"class.sh::TVariable"*
  %133 = getelementptr inbounds %"class.sh::(anonymous namespace)::PruneNoOpsTraverser", %"class.sh::(anonymous namespace)::PruneNoOpsTraverser"* %0, i64 0, i32 0, i32 8
  %134 = load %"class.sh::TSymbolTable"*, %"class.sh::TSymbolTable"** %133, align 8
  tail call void @_ZN2sh9TVariableC1EPNS_12TSymbolTableERKNS_15ImmutableStringEPKNS_5TTypeENS_10SymbolTypeENS_10TExtensionE(%"class.sh::TVariable"* %132, %"class.sh::TSymbolTable"* %134, %"class.sh::ImmutableString"* nonnull dereferenceable(16) @_ZN2shL21kEmptyImmutableStringE, %"class.sh::TType"* %118, i8 zeroext 3, i8 zeroext 0) #8
  %135 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #8
  %136 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %135, i64 32) #8
  %137 = bitcast i8* %136 to %"class.sh::TIntermSymbol"*
  tail call void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"* %137, %"class.sh::TVariable"* %132) #8
  %138 = bitcast i8* %136 to %"class.sh::TIntermNode"*
  tail call void @_ZN2sh16TIntermTraverser26queueReplacementWithParentEPNS_11TIntermNodeES2_S2_NS0_12OriginalNodeE(%"class.sh::TIntermTraverser"* %124, %"class.sh::TIntermNode"* %18, %"class.sh::TIntermNode"* %31, %"class.sh::TIntermNode"* %138, i32 1) #8
  br label %139

139:                                              ; preds = %107, %99, %91, %19, %90, %115, %40, %33
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #8
  br label %140

140:                                              ; preds = %3, %139
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZN2sh12_GLOBAL__N_119PruneNoOpsTraverser9visitLoopENS_5VisitEPNS_11TIntermLoopE(%"class.sh::(anonymous namespace)::PruneNoOpsTraverser"* nocapture readnone, i32, %"class.sh::TIntermLoop"* nocapture) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.sh::TIntermLoop", %"class.sh::TIntermLoop"* %2, i64 0, i32 4
  %5 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %4, align 8
  %6 = icmp eq %"class.sh::TIntermTyped"* %5, null
  br i1 %6, label %38, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %5, i64 0, i32 0
  %9 = bitcast %"class.sh::TIntermTyped"* %5 to %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)***
  %10 = load %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*** %9, align 8
  %11 = getelementptr inbounds %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)** %10, i64 5
  %12 = load %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)** %11, align 8
  %13 = tail call %"class.sh::TIntermConstantUnion"* %12(%"class.sh::TIntermNode"* %8) #8
  %14 = icmp eq %"class.sh::TIntermConstantUnion"* %13, null
  br i1 %14, label %15, label %37

15:                                               ; preds = %7
  %16 = bitcast %"class.sh::TIntermTyped"* %5 to %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)***
  %17 = load %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)*** %16, align 8
  %18 = getelementptr inbounds %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)** %17, i64 11
  %19 = load %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)** %18, align 8
  %20 = tail call %"class.sh::TIntermDeclaration"* %19(%"class.sh::TIntermNode"* %8) #8
  %21 = icmp eq %"class.sh::TIntermDeclaration"* %20, null
  br i1 %21, label %38, label %22

22:                                               ; preds = %15
  %23 = load %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)*** %16, align 8
  %24 = getelementptr inbounds %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)** %23, i64 11
  %25 = load %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)** %24, align 8
  %26 = tail call %"class.sh::TIntermDeclaration"* %25(%"class.sh::TIntermNode"* %8) #8
  %27 = bitcast %"class.sh::TIntermDeclaration"* %26 to %"class.sh::TVector"* (%"class.sh::TIntermDeclaration"*)***
  %28 = load %"class.sh::TVector"* (%"class.sh::TIntermDeclaration"*)**, %"class.sh::TVector"* (%"class.sh::TIntermDeclaration"*)*** %27, align 8
  %29 = getelementptr inbounds %"class.sh::TVector"* (%"class.sh::TIntermDeclaration"*)*, %"class.sh::TVector"* (%"class.sh::TIntermDeclaration"*)** %28, i64 27
  %30 = load %"class.sh::TVector"* (%"class.sh::TIntermDeclaration"*)*, %"class.sh::TVector"* (%"class.sh::TIntermDeclaration"*)** %29, align 8
  %31 = tail call %"class.sh::TVector"* %30(%"class.sh::TIntermDeclaration"* %26) #8
  %32 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %31, i64 0, i32 0, i32 0, i32 0
  %33 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %32, align 8
  %34 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %31, i64 0, i32 0, i32 0, i32 1
  %35 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %34, align 8
  %36 = icmp eq %"class.sh::TIntermNode"** %33, %35
  br i1 %36, label %37, label %38

37:                                               ; preds = %7, %22
  store %"class.sh::TIntermTyped"* null, %"class.sh::TIntermTyped"** %4, align 8
  br label %38

38:                                               ; preds = %15, %3, %37, %22
  %39 = getelementptr inbounds %"class.sh::TIntermLoop", %"class.sh::TIntermLoop"* %2, i64 0, i32 2
  %40 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %39, align 8
  %41 = icmp eq %"class.sh::TIntermNode"* %40, null
  br i1 %41, label %72, label %42

42:                                               ; preds = %38
  %43 = bitcast %"class.sh::TIntermNode"* %40 to %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)***
  %44 = load %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*** %43, align 8
  %45 = getelementptr inbounds %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)** %44, i64 5
  %46 = load %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)** %45, align 8
  %47 = tail call %"class.sh::TIntermConstantUnion"* %46(%"class.sh::TIntermNode"* nonnull %40) #8
  %48 = icmp eq %"class.sh::TIntermConstantUnion"* %47, null
  br i1 %48, label %49, label %71

49:                                               ; preds = %42
  %50 = bitcast %"class.sh::TIntermNode"* %40 to %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)***
  %51 = load %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)*** %50, align 8
  %52 = getelementptr inbounds %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)** %51, i64 11
  %53 = load %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)** %52, align 8
  %54 = tail call %"class.sh::TIntermDeclaration"* %53(%"class.sh::TIntermNode"* nonnull %40) #8
  %55 = icmp eq %"class.sh::TIntermDeclaration"* %54, null
  br i1 %55, label %72, label %56

56:                                               ; preds = %49
  %57 = load %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)*** %50, align 8
  %58 = getelementptr inbounds %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)** %57, i64 11
  %59 = load %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermDeclaration"* (%"class.sh::TIntermNode"*)** %58, align 8
  %60 = tail call %"class.sh::TIntermDeclaration"* %59(%"class.sh::TIntermNode"* nonnull %40) #8
  %61 = bitcast %"class.sh::TIntermDeclaration"* %60 to %"class.sh::TVector"* (%"class.sh::TIntermDeclaration"*)***
  %62 = load %"class.sh::TVector"* (%"class.sh::TIntermDeclaration"*)**, %"class.sh::TVector"* (%"class.sh::TIntermDeclaration"*)*** %61, align 8
  %63 = getelementptr inbounds %"class.sh::TVector"* (%"class.sh::TIntermDeclaration"*)*, %"class.sh::TVector"* (%"class.sh::TIntermDeclaration"*)** %62, i64 27
  %64 = load %"class.sh::TVector"* (%"class.sh::TIntermDeclaration"*)*, %"class.sh::TVector"* (%"class.sh::TIntermDeclaration"*)** %63, align 8
  %65 = tail call %"class.sh::TVector"* %64(%"class.sh::TIntermDeclaration"* %60) #8
  %66 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %65, i64 0, i32 0, i32 0, i32 0
  %67 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %66, align 8
  %68 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %65, i64 0, i32 0, i32 0, i32 1
  %69 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %68, align 8
  %70 = icmp eq %"class.sh::TIntermNode"** %67, %69
  br i1 %70, label %71, label %72

71:                                               ; preds = %42, %56
  store %"class.sh::TIntermNode"* null, %"class.sh::TIntermNode"** %39, align 8
  br label %72

72:                                               ; preds = %49, %38, %71, %56
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser11visitBranchENS_5VisitEPNS_13TIntermBranchE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBranch"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh16TIntermTraverser26visitPreprocessorDirectiveEPNS_28TIntermPreprocessorDirectiveE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermPreprocessorDirective"*) unnamed_addr #0 comdat align 2 {
  ret void
}

declare void @_ZN2sh16TIntermTraverser14traverseBinaryEPNS_13TIntermBinaryE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBinary"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser13traverseUnaryEPNS_12TIntermUnaryE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermUnary"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser26traverseFunctionDefinitionEPNS_25TIntermFunctionDefinitionE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionDefinition"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser17traverseAggregateEPNS_16TIntermAggregateE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermAggregate"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser13traverseBlockEPNS_12TIntermBlockE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBlock"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser12traverseLoopEPNS_11TIntermLoopE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermLoop"*) unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN2sh16TIntermTraverser28NodeReplaceWithMultipleEntryENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJRPNS1_12TIntermBlockERPNS1_11TIntermNodeENS1_7TVectorISC_EEEEEvDpOT_(%"class.std::__1::vector.1"*, %"class.sh::TIntermBlock"** dereferenceable(8), %"class.sh::TIntermNode"** dereferenceable(8), %"class.sh::TVector"* dereferenceable(24)) local_unnamed_addr #4 comdat align 2 {
  %5 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %0, i64 0, i32 0, i32 1
  %6 = bitcast %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = bitcast %"class.std::__1::vector.1"* %0 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %7, %9
  %11 = sdiv exact i64 %10, 40
  %12 = add nsw i64 %11, 1
  %13 = icmp ugt i64 %12, 461168601842738790
  br i1 %13, label %14, label %16

14:                                               ; preds = %4
  %15 = bitcast %"class.std::__1::vector.1"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %15) #9
  unreachable

16:                                               ; preds = %4
  %17 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %18 = bitcast %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %17 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = sub i64 %19, %9
  %21 = sdiv exact i64 %20, 40
  %22 = icmp ult i64 %21, 230584300921369395
  br i1 %22, label %23, label %28

23:                                               ; preds = %16
  %24 = shl nsw i64 %21, 1
  %25 = icmp ult i64 %24, %12
  %26 = select i1 %25, i64 %12, i64 %24
  %27 = icmp eq i64 %26, 0
  br i1 %27, label %33, label %28

28:                                               ; preds = %16, %23
  %29 = phi i64 [ %26, %23 ], [ 461168601842738790, %16 ]
  %30 = mul i64 %29, 40
  %31 = tail call i8* @_Znwm(i64 %30) #10
  %32 = bitcast i8* %31 to %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*
  br label %33

33:                                               ; preds = %23, %28
  %34 = phi i64 [ %29, %28 ], [ 0, %23 ]
  %35 = phi %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* [ %32, %28 ], [ null, %23 ]
  %36 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %35, i64 %11
  %37 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %35, i64 %34
  %38 = ptrtoint %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %37 to i64
  %39 = load %"class.sh::TIntermBlock"*, %"class.sh::TIntermBlock"** %1, align 8
  %40 = icmp eq %"class.sh::TIntermBlock"* %39, null
  %41 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %39, i64 0, i32 1
  %42 = select i1 %40, %"class.sh::TIntermAggregateBase"* null, %"class.sh::TIntermAggregateBase"* %41
  %43 = bitcast %"class.sh::TIntermNode"** %2 to i64*
  %44 = load i64, i64* %43, align 8
  %45 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %36, i64 0, i32 0
  store %"class.sh::TIntermAggregateBase"* %42, %"class.sh::TIntermAggregateBase"** %45, align 8
  %46 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %35, i64 %11, i32 1
  %47 = bitcast %"class.sh::TIntermNode"** %46 to i64*
  store i64 %44, i64* %47, align 8
  %48 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %35, i64 %11, i32 2
  %49 = bitcast %"class.sh::TVector"* %48 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %49, i8 0, i64 24, i1 false) #8
  %50 = bitcast %"class.sh::TVector"* %3 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = bitcast %"class.sh::TVector"* %48 to i64*
  store i64 %51, i64* %52, align 8
  %53 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %3, i64 0, i32 0, i32 0, i32 1
  %54 = bitcast %"class.sh::TIntermNode"*** %53 to i64*
  %55 = load i64, i64* %54, align 8
  %56 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %35, i64 %11, i32 2, i32 0, i32 0, i32 1
  %57 = bitcast %"class.sh::TIntermNode"*** %56 to i64*
  store i64 %55, i64* %57, align 8
  %58 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %3, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %59 = bitcast %"class.sh::TIntermNode"*** %58 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %35, i64 %11, i32 2, i32 0, i32 0, i32 2, i32 0, i32 0
  %62 = bitcast %"class.sh::TIntermNode"*** %61 to i64*
  store i64 %60, i64* %62, align 8
  %63 = bitcast %"class.sh::TVector"* %3 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %63, i8 0, i64 24, i1 false) #8
  %64 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %36, i64 1
  %65 = ptrtoint %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %64 to i64
  %66 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %0, i64 0, i32 0, i32 0
  %67 = load %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %66, align 8
  %68 = load %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %5, align 8
  %69 = icmp eq %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %68, %67
  br i1 %69, label %70, label %72

70:                                               ; preds = %33
  %71 = ptrtoint %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %67 to i64
  br label %100

72:                                               ; preds = %33, %72
  %73 = phi %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* [ %75, %72 ], [ %36, %33 ]
  %74 = phi %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* [ %76, %72 ], [ %68, %33 ]
  %75 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %73, i64 -1
  %76 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %74, i64 -1
  %77 = bitcast %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %75 to i8*
  %78 = bitcast %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %76 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %77, i8* align 8 %78, i64 16, i1 false) #8
  %79 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %73, i64 -1, i32 2
  %80 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %74, i64 -1, i32 2
  %81 = bitcast %"class.sh::TVector"* %79 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %81, i8 0, i64 24, i1 false) #8
  %82 = bitcast %"class.sh::TVector"* %80 to i64*
  %83 = load i64, i64* %82, align 8
  %84 = bitcast %"class.sh::TVector"* %79 to i64*
  store i64 %83, i64* %84, align 8
  %85 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %74, i64 -1, i32 2, i32 0, i32 0, i32 1
  %86 = bitcast %"class.sh::TIntermNode"*** %85 to i64*
  %87 = load i64, i64* %86, align 8
  %88 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %73, i64 -1, i32 2, i32 0, i32 0, i32 1
  %89 = bitcast %"class.sh::TIntermNode"*** %88 to i64*
  store i64 %87, i64* %89, align 8
  %90 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %74, i64 -1, i32 2, i32 0, i32 0, i32 2, i32 0, i32 0
  %91 = bitcast %"class.sh::TIntermNode"*** %90 to i64*
  %92 = load i64, i64* %91, align 8
  %93 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %73, i64 -1, i32 2, i32 0, i32 0, i32 2, i32 0, i32 0
  %94 = bitcast %"class.sh::TIntermNode"*** %93 to i64*
  store i64 %92, i64* %94, align 8
  %95 = bitcast %"class.sh::TVector"* %80 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %95, i8 0, i64 24, i1 false) #8
  %96 = icmp eq %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %76, %67
  br i1 %96, label %97, label %72

97:                                               ; preds = %72
  %98 = load i64, i64* %8, align 8
  %99 = load %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %5, align 8
  br label %100

100:                                              ; preds = %70, %97
  %101 = phi %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* [ %67, %70 ], [ %99, %97 ]
  %102 = phi %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* [ %36, %70 ], [ %75, %97 ]
  %103 = phi i64 [ %71, %70 ], [ %98, %97 ]
  %104 = ptrtoint %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %102 to i64
  store i64 %104, i64* %8, align 8
  store i64 %65, i64* %6, align 8
  store i64 %38, i64* %18, align 8
  %105 = inttoptr i64 %103 to %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*
  %106 = icmp eq %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %101, %105
  br i1 %106, label %119, label %107

107:                                              ; preds = %100, %117
  %108 = phi %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* [ %109, %117 ], [ %101, %100 ]
  %109 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %108, i64 -1
  %110 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %108, i64 -1, i32 2, i32 0, i32 0, i32 0
  %111 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %110, align 8
  %112 = icmp eq %"class.sh::TIntermNode"** %111, null
  br i1 %112, label %117, label %113

113:                                              ; preds = %107
  %114 = ptrtoint %"class.sh::TIntermNode"** %111 to i64
  %115 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %108, i64 -1, i32 2, i32 0, i32 0, i32 1
  %116 = bitcast %"class.sh::TIntermNode"*** %115 to i64*
  store i64 %114, i64* %116, align 8
  br label %117

117:                                              ; preds = %113, %107
  %118 = icmp eq %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %109, %105
  br i1 %118, label %119, label %107

119:                                              ; preds = %117, %100
  %120 = icmp eq i64 %103, 0
  br i1 %120, label %123, label %121

121:                                              ; preds = %119
  %122 = inttoptr i64 %103 to i8*
  tail call void @_ZdlPv(i8* %122) #10
  br label %123

123:                                              ; preds = %119, %121
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

declare void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"*, %"class.sh::TType"* dereferenceable(184)) unnamed_addr #2

declare void @_ZN2sh9TVariableC1EPNS_12TSymbolTableERKNS_15ImmutableStringEPKNS_5TTypeENS_10SymbolTypeENS_10TExtensionE(%"class.sh::TVariable"*, %"class.sh::TSymbolTable"*, %"class.sh::ImmutableString"* dereferenceable(16), %"class.sh::TType"*, i8 zeroext, i8 zeroext) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser26queueReplacementWithParentEPNS_11TIntermNodeES2_S2_NS0_12OriginalNodeE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*, i32) local_unnamed_addr #2

declare void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"*, %"class.sh::TVariable"*) unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN2sh16TIntermTraverser28NodeReplaceWithMultipleEntryENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJRPNS1_18TIntermDeclarationERPNS1_13TIntermSymbolENS1_7TVectorIPNS1_11TIntermNodeEEEEEEvDpOT_(%"class.std::__1::vector.1"*, %"class.sh::TIntermDeclaration"** dereferenceable(8), %"class.sh::TIntermSymbol"** dereferenceable(8), %"class.sh::TVector"* dereferenceable(24)) local_unnamed_addr #4 comdat align 2 {
  %5 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %0, i64 0, i32 0, i32 1
  %6 = bitcast %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = bitcast %"class.std::__1::vector.1"* %0 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %7, %9
  %11 = sdiv exact i64 %10, 40
  %12 = add nsw i64 %11, 1
  %13 = icmp ugt i64 %12, 461168601842738790
  br i1 %13, label %14, label %16

14:                                               ; preds = %4
  %15 = bitcast %"class.std::__1::vector.1"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %15) #9
  unreachable

16:                                               ; preds = %4
  %17 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %18 = bitcast %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %17 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = sub i64 %19, %9
  %21 = sdiv exact i64 %20, 40
  %22 = icmp ult i64 %21, 230584300921369395
  br i1 %22, label %23, label %28

23:                                               ; preds = %16
  %24 = shl nsw i64 %21, 1
  %25 = icmp ult i64 %24, %12
  %26 = select i1 %25, i64 %12, i64 %24
  %27 = icmp eq i64 %26, 0
  br i1 %27, label %33, label %28

28:                                               ; preds = %16, %23
  %29 = phi i64 [ %26, %23 ], [ 461168601842738790, %16 ]
  %30 = mul i64 %29, 40
  %31 = tail call i8* @_Znwm(i64 %30) #10
  %32 = bitcast i8* %31 to %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*
  br label %33

33:                                               ; preds = %23, %28
  %34 = phi i64 [ %29, %28 ], [ 0, %23 ]
  %35 = phi %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* [ %32, %28 ], [ null, %23 ]
  %36 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %35, i64 %11
  %37 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %35, i64 %34
  %38 = ptrtoint %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %37 to i64
  %39 = load %"class.sh::TIntermDeclaration"*, %"class.sh::TIntermDeclaration"** %1, align 8
  %40 = icmp eq %"class.sh::TIntermDeclaration"* %39, null
  %41 = getelementptr inbounds %"class.sh::TIntermDeclaration", %"class.sh::TIntermDeclaration"* %39, i64 0, i32 1
  %42 = select i1 %40, %"class.sh::TIntermAggregateBase"* null, %"class.sh::TIntermAggregateBase"* %41
  %43 = bitcast %"class.sh::TIntermSymbol"** %2 to i64*
  %44 = load i64, i64* %43, align 8
  %45 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %36, i64 0, i32 0
  store %"class.sh::TIntermAggregateBase"* %42, %"class.sh::TIntermAggregateBase"** %45, align 8
  %46 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %35, i64 %11, i32 1
  %47 = bitcast %"class.sh::TIntermNode"** %46 to i64*
  store i64 %44, i64* %47, align 8
  %48 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %35, i64 %11, i32 2
  %49 = bitcast %"class.sh::TVector"* %48 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %49, i8 0, i64 24, i1 false) #8
  %50 = bitcast %"class.sh::TVector"* %3 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = bitcast %"class.sh::TVector"* %48 to i64*
  store i64 %51, i64* %52, align 8
  %53 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %3, i64 0, i32 0, i32 0, i32 1
  %54 = bitcast %"class.sh::TIntermNode"*** %53 to i64*
  %55 = load i64, i64* %54, align 8
  %56 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %35, i64 %11, i32 2, i32 0, i32 0, i32 1
  %57 = bitcast %"class.sh::TIntermNode"*** %56 to i64*
  store i64 %55, i64* %57, align 8
  %58 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %3, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %59 = bitcast %"class.sh::TIntermNode"*** %58 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %35, i64 %11, i32 2, i32 0, i32 0, i32 2, i32 0, i32 0
  %62 = bitcast %"class.sh::TIntermNode"*** %61 to i64*
  store i64 %60, i64* %62, align 8
  %63 = bitcast %"class.sh::TVector"* %3 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %63, i8 0, i64 24, i1 false) #8
  %64 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %36, i64 1
  %65 = ptrtoint %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %64 to i64
  %66 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %0, i64 0, i32 0, i32 0
  %67 = load %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %66, align 8
  %68 = load %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %5, align 8
  %69 = icmp eq %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %68, %67
  br i1 %69, label %70, label %72

70:                                               ; preds = %33
  %71 = ptrtoint %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %67 to i64
  br label %100

72:                                               ; preds = %33, %72
  %73 = phi %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* [ %75, %72 ], [ %36, %33 ]
  %74 = phi %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* [ %76, %72 ], [ %68, %33 ]
  %75 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %73, i64 -1
  %76 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %74, i64 -1
  %77 = bitcast %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %75 to i8*
  %78 = bitcast %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %76 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %77, i8* align 8 %78, i64 16, i1 false) #8
  %79 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %73, i64 -1, i32 2
  %80 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %74, i64 -1, i32 2
  %81 = bitcast %"class.sh::TVector"* %79 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %81, i8 0, i64 24, i1 false) #8
  %82 = bitcast %"class.sh::TVector"* %80 to i64*
  %83 = load i64, i64* %82, align 8
  %84 = bitcast %"class.sh::TVector"* %79 to i64*
  store i64 %83, i64* %84, align 8
  %85 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %74, i64 -1, i32 2, i32 0, i32 0, i32 1
  %86 = bitcast %"class.sh::TIntermNode"*** %85 to i64*
  %87 = load i64, i64* %86, align 8
  %88 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %73, i64 -1, i32 2, i32 0, i32 0, i32 1
  %89 = bitcast %"class.sh::TIntermNode"*** %88 to i64*
  store i64 %87, i64* %89, align 8
  %90 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %74, i64 -1, i32 2, i32 0, i32 0, i32 2, i32 0, i32 0
  %91 = bitcast %"class.sh::TIntermNode"*** %90 to i64*
  %92 = load i64, i64* %91, align 8
  %93 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %73, i64 -1, i32 2, i32 0, i32 0, i32 2, i32 0, i32 0
  %94 = bitcast %"class.sh::TIntermNode"*** %93 to i64*
  store i64 %92, i64* %94, align 8
  %95 = bitcast %"class.sh::TVector"* %80 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %95, i8 0, i64 24, i1 false) #8
  %96 = icmp eq %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %76, %67
  br i1 %96, label %97, label %72

97:                                               ; preds = %72
  %98 = load i64, i64* %8, align 8
  %99 = load %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %5, align 8
  br label %100

100:                                              ; preds = %70, %97
  %101 = phi %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* [ %67, %70 ], [ %99, %97 ]
  %102 = phi %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* [ %36, %70 ], [ %75, %97 ]
  %103 = phi i64 [ %71, %70 ], [ %98, %97 ]
  %104 = ptrtoint %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %102 to i64
  store i64 %104, i64* %8, align 8
  store i64 %65, i64* %6, align 8
  store i64 %38, i64* %18, align 8
  %105 = inttoptr i64 %103 to %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*
  %106 = icmp eq %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %101, %105
  br i1 %106, label %119, label %107

107:                                              ; preds = %100, %117
  %108 = phi %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* [ %109, %117 ], [ %101, %100 ]
  %109 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %108, i64 -1
  %110 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %108, i64 -1, i32 2, i32 0, i32 0, i32 0
  %111 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %110, align 8
  %112 = icmp eq %"class.sh::TIntermNode"** %111, null
  br i1 %112, label %117, label %113

113:                                              ; preds = %107
  %114 = ptrtoint %"class.sh::TIntermNode"** %111 to i64
  %115 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %108, i64 -1, i32 2, i32 0, i32 0, i32 1
  %116 = bitcast %"class.sh::TIntermNode"*** %115 to i64*
  store i64 %114, i64* %116, align 8
  br label %117

117:                                              ; preds = %113, %107
  %118 = icmp eq %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %109, %105
  br i1 %118, label %119, label %107

119:                                              ; preds = %117, %100
  %120 = icmp eq i64 %103, 0
  br i1 %120, label %123, label %121

121:                                              ; preds = %119
  %122 = inttoptr i64 %103 to i8*
  tail call void @_ZdlPv(i8* %122) #10
  br label %123

123:                                              ; preds = %119, %121
  ret void
}

declare %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() local_unnamed_addr #2

declare i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"*, i64) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { noreturn nounwind }
attributes #10 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
