; ModuleID = '../../third_party/blink/renderer/platform/graphics/skia/image_pixel_locker.cc'
source_filename = "../../third_party/blink/renderer/platform/graphics/skia/image_pixel_locker.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::ImagePixelLocker" = type { %class.sk_sp, i8*, %"class.WTF::Vector" }
%class.sk_sp = type { %class.SkImage* }
%class.SkImage = type <{ %class.SkRefCnt.base, [4 x i8], %struct.SkImageInfo, i32, [4 x i8] }>
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%struct.SkImageInfo = type { %class.SkColorInfo, %struct.SkISize }
%class.SkColorInfo = type { %class.sk_sp.1, i32, i32 }
%class.sk_sp.1 = type { %class.SkColorSpace* }
%class.SkColorSpace = type <{ %class.SkNVRefCnt, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%class.SkOnce = type { %"struct.std::__1::atomic.2" }
%"struct.std::__1::atomic.2" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__atomic_base.4" }
%"struct.std::__1::__atomic_base.4" = type { %"struct.std::__1::__cxx_atomic_impl.5" }
%"struct.std::__1::__cxx_atomic_impl.5" = type { %"struct.std::__1::__cxx_atomic_base_impl.6" }
%"struct.std::__1::__cxx_atomic_base_impl.6" = type { i8 }
%struct.SkISize = type { i32, i32 }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { i8*, i32, i32 }
%class.SkPixmap = type { i8*, i64, %struct.SkImageInfo }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.logging::CheckOpResult" = type { i8* }

$_ZN3WTF18PartitionAllocator13QuantizedSizeIcEEmm = comdat any

@.str.2 = private unnamed_addr constant [44 x i8] c"count <= MaxElementCountInBackingStore<T>()\00", align 1
@.str.3 = private unnamed_addr constant [78 x i8] c"../../third_party/blink/renderer/platform/wtf/allocator/partition_allocator.h\00", align 1

@_ZN5blink16ImagePixelLockerC1E5sk_spIK7SkImageE11SkAlphaType11SkColorType = hidden unnamed_addr alias void (%"class.blink::ImagePixelLocker"*, %class.sk_sp*, i32, i32), void (%"class.blink::ImagePixelLocker"*, %class.sk_sp*, i32, i32)* @_ZN5blink16ImagePixelLockerC2E5sk_spIK7SkImageE11SkAlphaType11SkColorType

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink16ImagePixelLockerC2E5sk_spIK7SkImageE11SkAlphaType11SkColorType(%"class.blink::ImagePixelLocker"* nocapture, %class.sk_sp* nocapture, i32, i32) unnamed_addr #0 align 2 {
  %5 = alloca %class.SkPixmap, align 8
  %6 = alloca %struct.SkImageInfo, align 8
  %7 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %1, i64 0, i32 0
  %8 = bitcast %class.sk_sp* %1 to i64*
  %9 = load i64, i64* %8, align 8
  store %class.SkImage* null, %class.SkImage** %7, align 8
  %10 = bitcast %"class.blink::ImagePixelLocker"* %0 to i64*
  store i64 %9, i64* %10, align 8
  %11 = getelementptr inbounds %"class.blink::ImagePixelLocker", %"class.blink::ImagePixelLocker"* %0, i64 0, i32 2
  %12 = bitcast %"class.WTF::Vector"* %11 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 16, i1 false) #5
  %13 = bitcast %class.SkPixmap* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %13) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %13, i8 0, i64 40, i1 false) #5
  %14 = getelementptr inbounds %"class.blink::ImagePixelLocker", %"class.blink::ImagePixelLocker"* %0, i64 0, i32 0, i32 0
  %15 = inttoptr i64 %9 to %class.SkImage*
  %16 = call zeroext i1 @_ZNK7SkImage10peekPixelsEP8SkPixmap(%class.SkImage* %15, %class.SkPixmap* nonnull %5) #5
  %17 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %5, i64 0, i32 0
  %18 = load i8*, i8** %17, align 8
  %19 = getelementptr inbounds %"class.blink::ImagePixelLocker", %"class.blink::ImagePixelLocker"* %0, i64 0, i32 1
  store i8* %18, i8** %19, align 8
  %20 = icmp eq i8* %18, null
  br i1 %20, label %44, label %21

21:                                               ; preds = %4
  %22 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %5, i64 0, i32 2, i32 0, i32 1
  %23 = load i32, i32* %22, align 8
  %24 = icmp eq i32 %23, %3
  br i1 %24, label %25, label %44

25:                                               ; preds = %21
  %26 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %5, i64 0, i32 2, i32 0, i32 2
  %27 = load i32, i32* %26, align 4
  %28 = icmp eq i32 %27, %2
  %29 = icmp eq i32 %27, 1
  %30 = or i1 %28, %29
  br i1 %30, label %31, label %44

31:                                               ; preds = %25
  %32 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %5, i64 0, i32 1
  %33 = load i64, i64* %32, align 8
  %34 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %5, i64 0, i32 2, i32 1, i32 0
  %35 = load i32, i32* %34, align 8
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %5, i64 0, i32 2, i32 0
  %38 = call i32 @_ZNK11SkColorInfo13bytesPerPixelEv(%class.SkColorInfo* %37) #5
  %39 = sext i32 %38 to i64
  %40 = mul nsw i64 %39, %36
  %41 = icmp ult i64 %40, 2147483648
  %42 = select i1 %41, i64 %40, i64 0
  %43 = icmp eq i64 %33, %42
  br i1 %43, label %146, label %44

44:                                               ; preds = %21, %25, %31, %4
  store i8* null, i8** %19, align 8
  %45 = bitcast %struct.SkImageInfo* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %45) #5
  %46 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %6, i64 0, i32 0, i32 0, i32 0
  %47 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %6, i64 0, i32 0, i32 1
  %48 = load %class.SkImage*, %class.SkImage** %14, align 8
  %49 = getelementptr inbounds %class.SkImage, %class.SkImage* %48, i64 0, i32 2, i32 1, i32 0
  %50 = load i32, i32* %49, align 4
  %51 = getelementptr inbounds %class.SkImage, %class.SkImage* %48, i64 0, i32 2, i32 1, i32 1
  %52 = load i32, i32* %51, align 4
  %53 = zext i32 %3 to i64
  %54 = zext i32 %2 to i64
  %55 = shl nuw i64 %54, 32
  %56 = or i64 %55, %53
  %57 = zext i32 %52 to i64
  %58 = shl nuw i64 %57, 32
  %59 = zext i32 %50 to i64
  %60 = or i64 %58, %59
  %61 = bitcast %struct.SkImageInfo* %6 to i64*
  store i64 0, i64* %61, align 8, !alias.scope !2
  %62 = bitcast i32* %47 to i64*
  store i64 %56, i64* %62, align 8, !alias.scope !2
  %63 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %6, i64 0, i32 1
  %64 = bitcast %struct.SkISize* %63 to i64*
  store i64 %60, i64* %64, align 8, !alias.scope !2
  %65 = sext i32 %50 to i64
  %66 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %6, i64 0, i32 0
  %67 = call i32 @_ZNK11SkColorInfo13bytesPerPixelEv(%class.SkColorInfo* nonnull %66) #5
  %68 = sext i32 %67 to i64
  %69 = mul nsw i64 %68, %65
  %70 = icmp ult i64 %69, 2147483648
  %71 = select i1 %70, i64 %69, i64 0
  %72 = call i64 @_ZNK11SkImageInfo15computeByteSizeEm(%struct.SkImageInfo* nonnull %6, i64 %71) #5
  %73 = icmp eq i64 %72, 0
  br i1 %73, label %136, label %74

74:                                               ; preds = %44
  %75 = trunc i64 %72 to i32
  %76 = getelementptr inbounds %"class.blink::ImagePixelLocker", %"class.blink::ImagePixelLocker"* %0, i64 0, i32 2, i32 0, i32 0, i32 2
  %77 = load i32, i32* %76, align 4
  %78 = icmp ult i32 %77, %75
  br i1 %78, label %79, label %127

79:                                               ; preds = %74
  %80 = getelementptr inbounds %"class.blink::ImagePixelLocker", %"class.blink::ImagePixelLocker"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %81 = load i32, i32* %80, align 8
  %82 = icmp ult i32 %81, %75
  br i1 %82, label %83, label %116

83:                                               ; preds = %79
  %84 = lshr i32 %81, 2
  %85 = add nuw i32 %81, 1
  %86 = add i32 %85, %84
  %87 = icmp ugt i32 %86, 4
  %88 = select i1 %87, i32 %86, i32 4
  %89 = icmp ugt i32 %88, %75
  %90 = select i1 %89, i32 %88, i32 %75
  %91 = icmp ult i32 %81, %90
  br i1 %91, label %92, label %116, !prof !5

92:                                               ; preds = %83
  %93 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %11, i64 0, i32 0, i32 0, i32 0
  %94 = load i8*, i8** %93, align 8
  %95 = icmp eq i8* %94, null
  %96 = zext i32 %90 to i64
  %97 = call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIcEEmm(i64 %96) #5
  %98 = call i8* @_ZN3WTF18PartitionAllocator21AllocateVectorBackingIcEEPT_m(i64 %97) #5
  %99 = ptrtoint i8* %98 to i64
  br i1 %95, label %100, label %103

100:                                              ; preds = %92
  %101 = bitcast %"class.WTF::Vector"* %11 to i64*
  store atomic i64 %99, i64* %101 monotonic, align 8
  %102 = trunc i64 %97 to i32
  store i32 %102, i32* %80, align 8
  br label %116

103:                                              ; preds = %92
  %104 = load i8*, i8** %93, align 8
  %105 = icmp ne i8* %98, null
  %106 = icmp ne i8* %104, null
  %107 = and i1 %105, %106
  br i1 %107, label %108, label %112, !prof !5

108:                                              ; preds = %103
  %109 = load i32, i32* %76, align 4
  %110 = zext i32 %109 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %98, i8* nonnull align 1 %104, i64 %110, i1 false) #5
  %111 = load i8*, i8** %93, align 8
  br label %112

112:                                              ; preds = %108, %103
  %113 = phi i8* [ %104, %103 ], [ %111, %108 ]
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %113) #5
  %114 = bitcast %"class.WTF::Vector"* %11 to i64*
  store atomic i64 %99, i64* %114 monotonic, align 8
  %115 = trunc i64 %97 to i32
  store i32 %115, i32* %80, align 8
  br label %116

116:                                              ; preds = %112, %100, %83, %79
  %117 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %11, i64 0, i32 0, i32 0, i32 0
  %118 = load i8*, i8** %117, align 8
  %119 = load i32, i32* %76, align 4
  %120 = zext i32 %119 to i64
  %121 = getelementptr inbounds i8, i8* %118, i64 %120
  %122 = and i64 %72, 4294967295
  %123 = getelementptr inbounds i8, i8* %118, i64 %122
  %124 = ptrtoint i8* %123 to i64
  %125 = ptrtoint i8* %121 to i64
  %126 = sub i64 %124, %125
  call void @llvm.memset.p0i8.i64(i8* align 1 %121, i8 0, i64 %126, i1 false) #5
  br label %127

127:                                              ; preds = %74, %116
  store i32 %75, i32* %76, align 4
  %128 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %11, i64 0, i32 0, i32 0, i32 0
  %129 = load i8*, i8** %128, align 8
  call void @_ZN8SkPixmap5resetERK11SkImageInfoPKvm(%class.SkPixmap* nonnull %5, %struct.SkImageInfo* nonnull dereferenceable(24) %6, i8* %129, i64 %71) #5
  %130 = load %class.SkImage*, %class.SkImage** %14, align 8
  %131 = call zeroext i1 @_ZNK7SkImage10readPixelsERK8SkPixmapiiNS_11CachingHintE(%class.SkImage* %130, %class.SkPixmap* nonnull dereferenceable(40) %5, i32 0, i32 0, i32 0) #5
  br i1 %131, label %132, label %136

132:                                              ; preds = %127
  %133 = bitcast %"class.WTF::Vector"* %11 to i64*
  %134 = load i64, i64* %133, align 8
  %135 = bitcast i8** %19 to i64*
  store i64 %134, i64* %135, align 8
  br label %136

136:                                              ; preds = %127, %44, %132
  %137 = load %class.SkColorSpace*, %class.SkColorSpace** %46, align 8
  %138 = icmp eq %class.SkColorSpace* %137, null
  br i1 %138, label %145, label %139

139:                                              ; preds = %136
  %140 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %137, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %141 = atomicrmw add i32* %140, i32 -1 acq_rel
  %142 = icmp eq i32 %141, 1
  br i1 %142, label %143, label %145

143:                                              ; preds = %139
  %144 = bitcast %class.SkColorSpace* %137 to i8*
  call void @_ZdlPv(i8* %144) #6
  br label %145

145:                                              ; preds = %136, %139, %143
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %45) #5
  br label %146

146:                                              ; preds = %31, %145
  %147 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %5, i64 0, i32 2, i32 0, i32 0, i32 0
  %148 = load %class.SkColorSpace*, %class.SkColorSpace** %147, align 8
  %149 = icmp eq %class.SkColorSpace* %148, null
  br i1 %149, label %156, label %150

150:                                              ; preds = %146
  %151 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %148, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %152 = atomicrmw add i32* %151, i32 -1 acq_rel
  %153 = icmp eq i32 %152, 1
  br i1 %153, label %154, label %156

154:                                              ; preds = %150
  %155 = bitcast %class.SkColorSpace* %148 to i8*
  call void @_ZdlPv(i8* %155) #6
  br label %156

156:                                              ; preds = %146, %150, %154
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %13) #5
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare zeroext i1 @_ZNK7SkImage10peekPixelsEP8SkPixmap(%class.SkImage*, %class.SkPixmap*) local_unnamed_addr #2

declare i64 @_ZNK11SkImageInfo15computeByteSizeEm(%struct.SkImageInfo*, i64) local_unnamed_addr #2

declare void @_ZN8SkPixmap5resetERK11SkImageInfoPKvm(%class.SkPixmap*, %struct.SkImageInfo* dereferenceable(24), i8*, i64) local_unnamed_addr #2

declare zeroext i1 @_ZNK7SkImage10readPixelsERK8SkPixmapiiNS_11CachingHintE(%class.SkImage*, %class.SkPixmap* dereferenceable(40), i32, i32, i32) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare i32 @_ZNK11SkColorInfo13bytesPerPixelEv(%class.SkColorInfo*) local_unnamed_addr #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #4

declare i8* @_ZN3WTF18PartitionAllocator21AllocateVectorBackingIcEEPT_m(i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIcEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #5
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 2145386496
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #5
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 2145386496) #5
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.2, i64 0, i64 0), i8* %11, i8* %12) #5
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #5
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.3, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #5
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #5
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #5
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #5
  %20 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %0) #5
  ret i64 %20
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #2

declare i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64) local_unnamed_addr #2

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #2

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #2

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN11SkImageInfo4MakeEii11SkColorType11SkAlphaType5sk_spI12SkColorSpaceE: argument 0"}
!4 = distinct !{!4, !"_ZN11SkImageInfo4MakeEii11SkColorType11SkAlphaType5sk_spI12SkColorSpaceE"}
!5 = !{!"branch_weights", i32 2000, i32 1}
