; ModuleID = '../../third_party/skia/src/core/SkScalerContext.cpp'
source_filename = "../../third_party/skia/src/core/SkScalerContext.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.SkGlyph::PathData" = type <{ %"struct.SkGlyph::Intercept"*, %class.SkPath, i8, [7 x i8] }>
%"struct.SkGlyph::Intercept" = type { %"struct.SkGlyph::Intercept"*, [2 x float], [2 x float] }
%class.SkPath = type <{ %class.sk_sp.9, i32, %"struct.std::__1::atomic.1", %"struct.std::__1::atomic.1", i8, i8 }>
%class.sk_sp.9 = type { %class.SkPathRef* }
%class.SkPathRef = type <{ %class.SkNVRefCnt, %struct.SkRect, [4 x i8], %class.SkTDArray, %class.SkTDArray.10, %class.SkTDArray.11, i32, [4 x i8], %"class.SkIDChangeListener::List", i8, i8, i8, i8, i8, i8, i8, i8 }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%struct.SkRect = type { float, float, float, float }
%class.SkTDArray = type { %struct.SkPoint*, i32, i32 }
%struct.SkPoint = type { float, float }
%class.SkTDArray.10 = type { i8*, i32, i32 }
%class.SkTDArray.11 = type { float*, i32, i32 }
%"class.SkIDChangeListener::List" = type { %class.SkMutex, %class.SkTDArray.12 }
%class.SkMutex = type { %class.SkSemaphore }
%class.SkSemaphore = type { %"struct.std::__1::atomic", %class.SkOnce, %"struct.SkSemaphore::OSSemaphore"* }
%class.SkOnce = type { %"struct.std::__1::atomic.1" }
%"struct.SkSemaphore::OSSemaphore" = type opaque
%class.SkTDArray.12 = type { %class.SkIDChangeListener**, i32, i32 }
%class.SkIDChangeListener = type { %class.SkRefCnt.base, %"struct.std::__1::atomic.13", [3 x i8] }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic.13" = type { %"struct.std::__1::__atomic_base.14" }
%"struct.std::__1::__atomic_base.14" = type { %"struct.std::__1::__cxx_atomic_impl.15" }
%"struct.std::__1::__cxx_atomic_impl.15" = type { %"struct.std::__1::__cxx_atomic_base_impl.16" }
%"struct.std::__1::__cxx_atomic_base_impl.16" = type { i8 }
%"struct.std::__1::atomic.1" = type { %"struct.std::__1::__atomic_base.2" }
%"struct.std::__1::__atomic_base.2" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__cxx_atomic_impl.4" }
%"struct.std::__1::__cxx_atomic_impl.4" = type { %"struct.std::__1::__cxx_atomic_base_impl.5" }
%"struct.std::__1::__cxx_atomic_base_impl.5" = type { i8 }
%struct.SkPackedGlyphID = type { i32 }
%class.SkTMaskGamma = type { %class.SkRefCnt.base, [8 x [256 x i8]], i8, [3 x i8] }
%class.SkPaint = type <{ %class.sk_sp.6, %class.sk_sp.18, %class.sk_sp.7, %class.sk_sp.19, %class.sk_sp.20, %struct.SkRGBA4f, float, float, %union.anon, [4 x i8] }>
%class.sk_sp.6 = type { %class.SkPathEffect* }
%class.SkPathEffect = type { %class.SkFlattenable.base, [4 x i8] }
%class.SkFlattenable.base = type { %class.SkRefCnt.base }
%class.sk_sp.18 = type { %class.SkShader* }
%class.SkShader = type { %class.SkFlattenable.base, [4 x i8] }
%class.sk_sp.7 = type { %class.SkMaskFilter* }
%class.SkMaskFilter = type { %class.SkFlattenable.base, [4 x i8] }
%class.sk_sp.19 = type { %class.SkColorFilter* }
%class.SkColorFilter = type { %class.SkFlattenable.base, [4 x i8] }
%class.sk_sp.20 = type { %class.SkImageFilter* }
%class.SkImageFilter = type { %class.SkFlattenable.base, [4 x i8] }
%struct.SkRGBA4f = type { float, float, float, float }
%union.anon = type { %struct.anon }
%struct.anon = type { i32 }
%class.SkSimpleMatrixProvider = type { %class.SkMatrixProvider }
%class.SkMatrixProvider = type { i32 (...)**, %class.SkM44, %class.SkMatrix }
%class.SkM44 = type { [16 x float] }
%class.SkMatrix = type { [9 x float], i32 }
%class.SkScalerContext = type { i32 (...)**, %struct.SkScalerContextRec, %class.sk_sp, %class.sk_sp.6, %class.sk_sp.7, i8, %class.SkTMaskPreBlend }
%struct.SkScalerContextRec = type { i32, float, float, float, [2 x [2 x float]], float, float, i32, i8, i8, i8, i8, i8, i8, i16 }
%class.sk_sp = type { %class.SkTypeface* }
%class.SkTypeface = type <{ %class.SkWeakRefCnt, i32, %class.SkFontStyle, %struct.SkRect, %class.SkOnce, i8, [6 x i8] }>
%class.SkWeakRefCnt = type { %class.SkRefCnt.base, %"struct.std::__1::atomic" }
%class.SkFontStyle = type { i32 }
%class.SkTMaskPreBlend = type { %class.sk_sp.8, i8*, i8*, i8* }
%class.sk_sp.8 = type { %class.SkTMaskGamma* }
%struct.SkScalerContextEffects = type { %class.SkPathEffect*, %class.SkMaskFilter* }
%class.SkDescriptor = type { i32, i32, i32 }
%class.SkRefCntBase = type <{ i32 (...)**, %"struct.std::__1::atomic", [4 x i8] }>
%class.SkGlyph = type { i16, i16, i16, i16, i8*, %"struct.SkGlyph::PathData"*, float, float, i8, i8, %struct.SkPackedGlyphID }
%struct.SkMask = type <{ i8*, %struct.SkIRect, i32, i8, [3 x i8] }>
%struct.SkIRect = type { i32, i32, i32, i32 }
%class.SkMaskFilterBase = type { %class.SkMaskFilter.base, [4 x i8] }
%class.SkMaskFilter.base = type { %class.SkFlattenable.base }
%struct.SkIPoint = type { i32, i32 }
%class.SkStrokeRec = type { float, float, float, i32 }
%class.SkRasterClip = type { %class.SkRegion, %class.SkAAClip, i8, i8, i8, %struct.SkIRect*, %class.sk_sp.18 }
%class.SkRegion = type { %struct.SkIRect, %"struct.SkRegion::RunHead"* }
%"struct.SkRegion::RunHead" = type opaque
%class.SkAAClip = type { %struct.SkIRect, %"struct.SkAAClip::RunHead"* }
%"struct.SkAAClip::RunHead" = type opaque
%struct.SkImageInfo = type { %class.SkColorInfo, %struct.SkISize }
%class.SkColorInfo = type { %class.sk_sp.23, i32, i32 }
%class.sk_sp.23 = type { %class.SkColorSpace* }
%class.SkColorSpace = type <{ %class.SkNVRefCnt.24, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt.24 = type { %"struct.std::__1::atomic" }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%struct.SkISize = type { i32, i32 }
%class.SkAutoPixmapStorage = type { %class.SkPixmap, i8* }
%class.SkPixmap = type { i8*, i64, %struct.SkImageInfo }
%class.SkDraw = type { %"class.SkGlyphRunListPainter::BitmapDevicePainter", %class.SkPixmap, %class.SkMatrixProvider*, %class.SkRasterClip*, %class.SkPixmap* }
%"class.SkGlyphRunListPainter::BitmapDevicePainter" = type { i32 (...)** }
%class.SkBlitter = type { i32 (...)**, %class.SkAutoMalloc }
%class.SkAutoMalloc = type { %"class.std::__1::unique_ptr", i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%struct.SkFontMetrics = type { i32, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float }
%class.SkFont = type <{ %class.sk_sp, float, float, float, i8, i8, i8, i8 }>
%class.SkSurfaceProps = type { i32, i32 }
%class.SkAutoDescriptor = type { %class.SkDescriptor*, [120 x i8] }
%class.SkBinaryWriteBuffer = type { %class.SkWriteBuffer, %class.sk_sp.25, %class.sk_sp.26, %class.SkWriter32, %class.SkTHashMap }
%class.SkWriteBuffer = type { i32 (...)**, %struct.SkSerialProcs }
%struct.SkSerialProcs = type { void (%class.sk_sp.21*, %class.SkPicture*, i8*)*, i8*, void (%class.sk_sp.21*, %class.SkImage*, i8*)*, i8*, void (%class.sk_sp.21*, %class.SkTypeface*, i8*)*, i8* }
%class.sk_sp.21 = type { %class.SkData* }
%class.SkData = type { %class.SkNVRefCnt.22, void (i8*, i8*)*, i8*, i8*, i64 }
%class.SkNVRefCnt.22 = type { %"struct.std::__1::atomic" }
%class.SkPicture = type <{ %class.SkRefCnt.base, i32, %"struct.std::__1::atomic.13", [7 x i8] }>
%class.SkImage = type <{ %class.SkRefCnt.base, [4 x i8], %struct.SkImageInfo, i32, [4 x i8] }>
%class.sk_sp.25 = type { %class.SkFactorySet* }
%class.SkFactorySet = type opaque
%class.sk_sp.26 = type { %class.SkRefCntSet* }
%class.SkRefCntSet = type opaque
%class.SkWriter32 = type { i8*, i64, i64, i8*, %class.SkAutoTMalloc }
%class.SkAutoTMalloc = type { %"class.std::__1::unique_ptr.27" }
%"class.std::__1::unique_ptr.27" = type { %"class.std::__1::__compressed_pair.28" }
%"class.std::__1::__compressed_pair.28" = type { %"struct.std::__1::__compressed_pair_elem.29" }
%"struct.std::__1::__compressed_pair_elem.29" = type { i8* }
%class.SkTHashMap = type { %class.SkTHashTable }
%class.SkTHashTable = type { i32, i32, %class.SkAutoTArray }
%class.SkAutoTArray = type { %"class.std::__1::unique_ptr.31" }
%"class.std::__1::unique_ptr.31" = type { %"class.std::__1::__compressed_pair.32" }
%"class.std::__1::__compressed_pair.32" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"struct.std::__1::__compressed_pair_elem.33" = type { %"struct.SkTHashTable<SkTHashMap<const char *, unsigned int, SkGoodHash>::Pair, const char *, SkTHashMap<const char *, unsigned int, SkGoodHash>::Pair>::Slot"* }
%"struct.SkTHashTable<SkTHashMap<const char *, unsigned int, SkGoodHash>::Pair, const char *, SkTHashMap<const char *, unsigned int, SkGoodHash>::Pair>::Slot" = type opaque
%class.SkFlattenable = type { %class.SkRefCnt.base, [4 x i8] }
%class.SkColorSpaceLuminance = type { i32 (...)** }
%class.SkScalerContext_Empty = type { %class.SkScalerContext }

$_ZN12SkTMaskGammaILi3ELi3ELi3EEC2Efff = comdat any

$_ZN12SkRefCntBaseD2Ev = comdat any

$_ZN12SkTMaskGammaILi3ELi3ELi3EED0Ev = comdat any

$_ZNK12SkRefCntBase16internal_disposeEv = comdat any

$_ZN16SkMatrixProviderD2Ev = comdat any

$_ZN22SkSimpleMatrixProviderD0Ev = comdat any

$_ZNK22SkSimpleMatrixProvider16getLocalToMarkerEjP5SkM44 = comdat any

$_ZNK22SkSimpleMatrixProvider29localToDeviceHitsPixelCentersEv = comdat any

$_ZTV12SkTMaskGammaILi3ELi3ELi3EE = comdat any

$_ZTV22SkSimpleMatrixProvider = comdat any

@_ZTV15SkScalerContext = hidden unnamed_addr constant { [9 x i8*] } { [9 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.SkScalerContext*)* @_ZN15SkScalerContextD2Ev to i8*), i8* bitcast (void (%class.SkScalerContext*)* @_ZN15SkScalerContextD0Ev to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*)] }, align 8
@__const._ZN15SkScalerContext8getImageERK7SkGlyph.tmpGlyph = private unnamed_addr constant { i16, i16, i16, i16, i8*, %"struct.SkGlyph::PathData"*, float, float, i8, i8, [2 x i8], %struct.SkPackedGlyphID } { i16 -21846, i16 -21846, i16 -21846, i16 -21846, i8* inttoptr (i64 -6148914691236517206 to i8*), %"struct.SkGlyph::PathData"* inttoptr (i64 -6148914691236517206 to %"struct.SkGlyph::PathData"*), float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, i8 -86, i8 -86, [2 x i8] c"\AA\AA", %struct.SkPackedGlyphID { i32 -1431655766 } }, align 8
@_ZZL22mask_gamma_cache_mutexvE5mutex = internal unnamed_addr global %class.SkMutex* null, align 8
@_ZGVZL22mask_gamma_cache_mutexvE5mutex = internal global i64 0, align 8
@_ZL16gLinearMaskGamma = internal unnamed_addr global %class.SkTMaskGamma* null, align 8
@_ZL9gContrast = internal unnamed_addr global float 0xC7EFFFFFE0000000, align 4
@_ZL11gPaintGamma = internal unnamed_addr global float 0xC7EFFFFFE0000000, align 4
@_ZL12gDeviceGamma = internal unnamed_addr global float 0xC7EFFFFFE0000000, align 4
@_ZL10gMaskGamma = internal unnamed_addr global %class.SkTMaskGamma* null, align 8
@_ZTV12SkTMaskGammaILi3ELi3ELi3EE = linkonce_odr hidden unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.SkRefCntBase*)* @_ZN12SkRefCntBaseD2Ev to i8*), i8* bitcast (void (%class.SkTMaskGamma*)* @_ZN12SkTMaskGammaILi3ELi3ELi3EED0Ev to i8*), i8* bitcast (void (%class.SkRefCntBase*)* @_ZNK12SkRefCntBase16internal_disposeEv to i8*)] }, comdat, align 8
@__const._ZL12generateMaskRK6SkMaskRK6SkPathRK15SkTMaskPreBlendILi3ELi3ELi3EEbbbN7SkPaint5StyleE.paint = private unnamed_addr constant %class.SkPaint <{ %class.sk_sp.6 { %class.SkPathEffect* inttoptr (i64 -6148914691236517206 to %class.SkPathEffect*) }, %class.sk_sp.18 { %class.SkShader* inttoptr (i64 -6148914691236517206 to %class.SkShader*) }, %class.sk_sp.7 { %class.SkMaskFilter* inttoptr (i64 -6148914691236517206 to %class.SkMaskFilter*) }, %class.sk_sp.19 { %class.SkColorFilter* inttoptr (i64 -6148914691236517206 to %class.SkColorFilter*) }, %class.sk_sp.20 { %class.SkImageFilter* inttoptr (i64 -6148914691236517206 to %class.SkImageFilter*) }, %struct.SkRGBA4f { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, %union.anon { %struct.anon { i32 -1431655766 } }, [4 x i8] c"\AA\AA\AA\AA" }>, align 8
@__const._ZL12generateMaskRK6SkMaskRK6SkPathRK15SkTMaskPreBlendILi3ELi3ELi3EEbbbN7SkPaint5StyleE.matrixProvider = private unnamed_addr constant %class.SkSimpleMatrixProvider { %class.SkMatrixProvider { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**), %class.SkM44 { [16 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000] }, %class.SkMatrix { [9 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], i32 -1431655766 } } }, align 8
@_ZTV22SkSimpleMatrixProvider = linkonce_odr hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.SkMatrixProvider*)* @_ZN16SkMatrixProviderD2Ev to i8*), i8* bitcast (void (%class.SkSimpleMatrixProvider*)* @_ZN22SkSimpleMatrixProviderD0Ev to i8*), i8* bitcast (i1 (%class.SkSimpleMatrixProvider*, i32, %class.SkM44*)* @_ZNK22SkSimpleMatrixProvider16getLocalToMarkerEjP5SkM44 to i8*), i8* bitcast (i1 (%class.SkSimpleMatrixProvider*)* @_ZNK22SkSimpleMatrixProvider29localToDeviceHitsPixelCentersEv to i8*)] }, comdat, align 8
@_ZZL13pack4xHToMaskRK8SkPixmapRK6SkMaskRK15SkTMaskPreBlendILi3ELi3ELi3EEbbE12coefficients = internal unnamed_addr constant [3 x [12 x i32]] [[12 x i32] [i32 3, i32 11, i32 28, i32 51, i32 64, i32 57, i32 36, i32 16, i32 5, i32 1, i32 0, i32 0], [12 x i32] [i32 0, i32 2, i32 8, i32 22, i32 43, i32 61, i32 61, i32 43, i32 22, i32 8, i32 2, i32 0], [12 x i32] [i32 0, i32 0, i32 1, i32 5, i32 16, i32 36, i32 57, i32 64, i32 51, i32 28, i32 11, i32 3]], align 16
@_ZTV6SkDraw = external unnamed_addr constant { [7 x i8*] }, align 8
@.str = private unnamed_addr constant [52 x i8] c"../../third_party/skia/src/core/SkScalerContext.cpp\00", align 1
@.str.1 = private unnamed_addr constant [11 x i8] c"assert(%s)\00", align 1
@.str.2 = private unnamed_addr constant [41 x i8] c"srcMask.fFormat == origGlyph.fMaskFormat\00", align 1
@_ZTVZN15SkScalerContext9MakeEmptyE5sk_spI10SkTypefaceERK22SkScalerContextEffectsPK12SkDescriptorE21SkScalerContext_Empty = internal unnamed_addr constant { [9 x i8*] } { [9 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.SkScalerContext*)* @_ZN15SkScalerContextD2Ev to i8*), i8* bitcast (void (%class.SkScalerContext_Empty*)* @_ZZN15SkScalerContext9MakeEmptyE5sk_spI10SkTypefaceERK22SkScalerContextEffectsPK12SkDescriptorEN21SkScalerContext_EmptyD0Ev to i8*), i8* bitcast (i1 (%class.SkScalerContext_Empty*, %class.SkGlyph*)* @_ZZN15SkScalerContext9MakeEmptyE5sk_spI10SkTypefaceERK22SkScalerContextEffectsPK12SkDescriptorEN21SkScalerContext_Empty15generateAdvanceEP7SkGlyph to i8*), i8* bitcast (void (%class.SkScalerContext_Empty*, %class.SkGlyph*)* @_ZZN15SkScalerContext9MakeEmptyE5sk_spI10SkTypefaceERK22SkScalerContextEffectsPK12SkDescriptorEN21SkScalerContext_Empty15generateMetricsEP7SkGlyph to i8*), i8* bitcast (void (%class.SkScalerContext_Empty*, %class.SkGlyph*)* @_ZZN15SkScalerContext9MakeEmptyE5sk_spI10SkTypefaceERK22SkScalerContextEffectsPK12SkDescriptorEN21SkScalerContext_Empty13generateImageERK7SkGlyph to i8*), i8* bitcast (i1 (%class.SkScalerContext_Empty*, i16, %class.SkPath*)* @_ZZN15SkScalerContext9MakeEmptyE5sk_spI10SkTypefaceERK22SkScalerContextEffectsPK12SkDescriptorEN21SkScalerContext_Empty12generatePathEtP6SkPath to i8*), i8* bitcast (void (%class.SkScalerContext_Empty*, %struct.SkFontMetrics*)* @_ZZN15SkScalerContext9MakeEmptyE5sk_spI10SkTypefaceERK22SkScalerContextEffectsPK12SkDescriptorEN21SkScalerContext_Empty19generateFontMetricsEP13SkFontMetrics to i8*)] }, align 8

@_ZN15SkScalerContextD1Ev = hidden unnamed_addr alias void (%class.SkScalerContext*), void (%class.SkScalerContext*)* @_ZN15SkScalerContextD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN15SkScalerContext13PreprocessRecERK10SkTypefaceRK22SkScalerContextEffectsRK12SkDescriptor(%struct.SkScalerContextRec* noalias sret, %class.SkTypeface* dereferenceable(48), %struct.SkScalerContextEffects* nocapture readonly dereferenceable(16), %class.SkDescriptor* dereferenceable(12)) local_unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %struct.SkScalerContextRec, %struct.SkScalerContextRec* %0, i64 0, i32 0
  store i32 -1431655766, i32* %5, align 4
  %6 = getelementptr inbounds %struct.SkScalerContextRec, %struct.SkScalerContextRec* %0, i64 0, i32 1
  %7 = getelementptr inbounds %struct.SkScalerContextRec, %struct.SkScalerContextRec* %0, i64 0, i32 7
  %8 = bitcast float* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %8, i8 -1, i64 36, i1 false)
  %9 = getelementptr inbounds %struct.SkScalerContextRec, %struct.SkScalerContextRec* %0, i64 0, i32 12
  %10 = bitcast i32* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %10, i8 -86, i64 12, i1 false)
  %11 = tail call i8* @_ZNK12SkDescriptor9findEntryEjPj(%class.SkDescriptor* %3, i32 1936876899, i32* null) #19
  %12 = bitcast %struct.SkScalerContextRec* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %12, i8* align 4 %11, i64 52, i1 false)
  %13 = bitcast %class.SkTypeface* %1 to void (%class.SkTypeface*, %struct.SkScalerContextRec*)***
  %14 = load void (%class.SkTypeface*, %struct.SkScalerContextRec*)**, void (%class.SkTypeface*, %struct.SkScalerContextRec*)*** %13, align 8
  %15 = getelementptr inbounds void (%class.SkTypeface*, %struct.SkScalerContextRec*)*, void (%class.SkTypeface*, %struct.SkScalerContextRec*)** %14, i64 6
  %16 = load void (%class.SkTypeface*, %struct.SkScalerContextRec*)*, void (%class.SkTypeface*, %struct.SkScalerContextRec*)** %15, align 8
  tail call void %16(%class.SkTypeface* %1, %struct.SkScalerContextRec* %0) #19
  %17 = getelementptr inbounds %struct.SkScalerContextEffects, %struct.SkScalerContextEffects* %2, i64 0, i32 1
  %18 = load %class.SkMaskFilter*, %class.SkMaskFilter** %17, align 8
  %19 = icmp eq %class.SkMaskFilter* %18, null
  br i1 %19, label %20, label %22

20:                                               ; preds = %4
  %21 = load i32, i32* %7, align 4
  br label %26

22:                                               ; preds = %4
  %23 = getelementptr inbounds %struct.SkScalerContextRec, %struct.SkScalerContextRec* %0, i64 0, i32 10
  %24 = getelementptr inbounds %struct.SkScalerContextRec, %struct.SkScalerContextRec* %0, i64 0, i32 9
  %25 = getelementptr inbounds %struct.SkScalerContextRec, %struct.SkScalerContextRec* %0, i64 0, i32 8
  store i32 -16777216, i32* %7, align 4
  store i8 64, i8* %24, align 1
  store i8 64, i8* %25, align 4
  store i8 0, i8* %23, align 2
  br label %26

26:                                               ; preds = %20, %22
  %27 = phi i32 [ %21, %20 ], [ -16777216, %22 ]
  %28 = load i8, i8* %9, align 4
  %29 = icmp eq i8 %28, 1
  br i1 %29, label %30, label %47

30:                                               ; preds = %26
  %31 = lshr i32 %27, 16
  %32 = and i32 %31, 255
  %33 = lshr i32 %27, 8
  %34 = and i32 %33, 255
  %35 = and i32 %27, 255
  %36 = mul nuw nsw i32 %32, 54
  %37 = mul nuw nsw i32 %34, 183
  %38 = mul nuw nsw i32 %35, 19
  %39 = add nuw nsw i32 %36, %38
  %40 = add nuw nsw i32 %39, %37
  %41 = lshr i32 %40, 8
  %42 = shl nuw nsw i32 %41, 16
  %43 = and i32 %40, 130816
  %44 = or i32 %43, %41
  %45 = or i32 %44, %42
  %46 = or i32 %45, -16777216
  br label %47

47:                                               ; preds = %30, %26
  %48 = phi i32 [ %46, %30 ], [ %27, %26 ]
  %49 = lshr i32 %48, 21
  %50 = and i32 %49, 7
  %51 = shl nuw nsw i32 %50, 5
  %52 = shl nuw nsw i32 %50, 2
  %53 = or i32 %52, %51
  %54 = lshr i32 %50, 1
  %55 = or i32 %53, %54
  %56 = lshr i32 %48, 13
  %57 = and i32 %56, 7
  %58 = shl nuw nsw i32 %57, 5
  %59 = shl nuw nsw i32 %57, 2
  %60 = or i32 %59, %58
  %61 = lshr i32 %57, 1
  %62 = or i32 %60, %61
  %63 = lshr i32 %48, 5
  %64 = and i32 %63, 7
  %65 = shl nuw nsw i32 %64, 5
  %66 = shl nuw nsw i32 %64, 2
  %67 = lshr i32 %64, 1
  %68 = shl nuw nsw i32 %55, 16
  %69 = shl nuw nsw i32 %62, 8
  %70 = or i32 %65, %66
  %71 = or i32 %70, %67
  %72 = or i32 %71, %69
  %73 = or i32 %72, %68
  %74 = or i32 %73, -16777216
  store i32 %74, i32* %7, align 4
  ret void
}

declare i8* @_ZNK12SkDescriptor9findEntryEjPj(%class.SkDescriptor*, i32, i32*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN18SkScalerContextRec17setLuminanceColorEj(%struct.SkScalerContextRec* nocapture, i32) local_unnamed_addr #3 align 2 {
  %3 = lshr i32 %1, 21
  %4 = and i32 %3, 7
  %5 = shl nuw nsw i32 %4, 5
  %6 = shl nuw nsw i32 %4, 2
  %7 = or i32 %6, %5
  %8 = lshr i32 %4, 1
  %9 = or i32 %7, %8
  %10 = lshr i32 %1, 13
  %11 = and i32 %10, 7
  %12 = shl nuw nsw i32 %11, 5
  %13 = shl nuw nsw i32 %11, 2
  %14 = or i32 %13, %12
  %15 = lshr i32 %11, 1
  %16 = or i32 %14, %15
  %17 = lshr i32 %1, 5
  %18 = and i32 %17, 7
  %19 = shl nuw nsw i32 %18, 5
  %20 = shl nuw nsw i32 %18, 2
  %21 = lshr i32 %18, 1
  %22 = shl nuw nsw i32 %9, 16
  %23 = shl nuw nsw i32 %16, 8
  %24 = or i32 %20, %19
  %25 = or i32 %24, %21
  %26 = or i32 %25, %23
  %27 = or i32 %26, %22
  %28 = or i32 %27, -16777216
  %29 = getelementptr inbounds %struct.SkScalerContextRec, %struct.SkScalerContextRec* %0, i64 0, i32 7
  store i32 %28, i32* %29, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN15SkScalerContextC2E5sk_spI10SkTypefaceERK22SkScalerContextEffectsPK12SkDescriptor(%class.SkScalerContext*, %class.sk_sp* nocapture, %struct.SkScalerContextEffects* nocapture readonly dereferenceable(16), %class.SkDescriptor*) unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %class.SkScalerContext, %class.SkScalerContext* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTV15SkScalerContext, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = getelementptr inbounds %class.SkScalerContext, %class.SkScalerContext* %0, i64 0, i32 1
  %7 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %1, i64 0, i32 0
  %8 = load %class.SkTypeface*, %class.SkTypeface** %7, align 8
  tail call void @_ZN15SkScalerContext13PreprocessRecERK10SkTypefaceRK22SkScalerContextEffectsRK12SkDescriptor(%struct.SkScalerContextRec* sret %6, %class.SkTypeface* dereferenceable(48) %8, %struct.SkScalerContextEffects* dereferenceable(16) %2, %class.SkDescriptor* dereferenceable(12) %3)
  %9 = getelementptr inbounds %class.SkScalerContext, %class.SkScalerContext* %0, i64 0, i32 2
  %10 = bitcast %class.sk_sp* %1 to i64*
  %11 = load i64, i64* %10, align 8
  store %class.SkTypeface* null, %class.SkTypeface** %7, align 8
  %12 = bitcast %class.sk_sp* %9 to i64*
  store i64 %11, i64* %12, align 8
  %13 = getelementptr inbounds %struct.SkScalerContextEffects, %struct.SkScalerContextEffects* %2, i64 0, i32 0
  %14 = load %class.SkPathEffect*, %class.SkPathEffect** %13, align 8
  %15 = icmp eq %class.SkPathEffect* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %4
  %17 = getelementptr inbounds %class.SkPathEffect, %class.SkPathEffect* %14, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %18 = atomicrmw add i32* %17, i32 1 monotonic, !noalias !2
  br label %19

19:                                               ; preds = %4, %16
  %20 = getelementptr inbounds %class.SkScalerContext, %class.SkScalerContext* %0, i64 0, i32 3, i32 0
  store %class.SkPathEffect* %14, %class.SkPathEffect** %20, align 8, !alias.scope !2
  %21 = getelementptr inbounds %struct.SkScalerContextEffects, %struct.SkScalerContextEffects* %2, i64 0, i32 1
  %22 = load %class.SkMaskFilter*, %class.SkMaskFilter** %21, align 8
  %23 = icmp eq %class.SkMaskFilter* %22, null
  br i1 %23, label %27, label %24

24:                                               ; preds = %19
  %25 = getelementptr inbounds %class.SkMaskFilter, %class.SkMaskFilter* %22, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %26 = atomicrmw add i32* %25, i32 1 monotonic, !noalias !5
  br label %27

27:                                               ; preds = %19, %24
  %28 = getelementptr inbounds %class.SkScalerContext, %class.SkScalerContext* %0, i64 0, i32 4, i32 0
  store %class.SkMaskFilter* %22, %class.SkMaskFilter** %28, align 8, !alias.scope !5
  %29 = getelementptr inbounds %class.SkScalerContext, %class.SkScalerContext* %0, i64 0, i32 5
  %30 = getelementptr inbounds %class.SkScalerContext, %class.SkScalerContext* %0, i64 0, i32 1, i32 5
  %31 = load float, float* %30, align 8
  %32 = fcmp ult float %31, 0.000000e+00
  br i1 %32, label %33, label %37

33:                                               ; preds = %27
  %34 = load %class.SkPathEffect*, %class.SkPathEffect** %20, align 8
  %35 = icmp ne %class.SkPathEffect* %34, null
  %36 = zext i1 %35 to i8
  br label %37

37:                                               ; preds = %27, %33
  %38 = phi i8 [ 1, %27 ], [ %36, %33 ]
  store i8 %38, i8* %29, align 8
  %39 = getelementptr inbounds %class.SkScalerContext, %class.SkScalerContext* %0, i64 0, i32 6
  br i1 %23, label %42, label %40

40:                                               ; preds = %37
  %41 = bitcast %class.SkTMaskPreBlend* %39 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %41, i8 0, i64 32, i1 false) #19
  br label %43

42:                                               ; preds = %37
  tail call void @_ZN15SkScalerContext15GetMaskPreBlendERK18SkScalerContextRec(%class.SkTMaskPreBlend* sret %39, %struct.SkScalerContextRec* dereferenceable(52) %6)
  br label %43

43:                                               ; preds = %42, %40
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN15SkScalerContext15GetMaskPreBlendERK18SkScalerContextRec(%class.SkTMaskPreBlend* noalias nocapture sret, %struct.SkScalerContextRec* nocapture readonly dereferenceable(52)) local_unnamed_addr #0 align 2 {
  %3 = load atomic i8, i8* bitcast (i64* @_ZGVZL22mask_gamma_cache_mutexvE5mutex to i8*) acquire, align 8
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %5, label %14, !prof !8

5:                                                ; preds = %2
  %6 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZL22mask_gamma_cache_mutexvE5mutex) #19
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %14, label %8

8:                                                ; preds = %5
  %9 = tail call i8* @_Znwm(i64 16) #20
  %10 = bitcast i8* %9 to i32*
  store i32 1, i32* %10, align 4
  %11 = getelementptr inbounds i8, i8* %9, i64 4
  store i8 0, i8* %11, align 1
  %12 = getelementptr inbounds i8, i8* %9, i64 8
  %13 = bitcast i8* %12 to %"struct.SkSemaphore::OSSemaphore"**
  store %"struct.SkSemaphore::OSSemaphore"* null, %"struct.SkSemaphore::OSSemaphore"** %13, align 8
  store i8* %9, i8** bitcast (%class.SkMutex** @_ZZL22mask_gamma_cache_mutexvE5mutex to i8**), align 8
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZL22mask_gamma_cache_mutexvE5mutex) #19
  br label %14

14:                                               ; preds = %2, %5, %8
  %15 = load %class.SkMutex*, %class.SkMutex** @_ZZL22mask_gamma_cache_mutexvE5mutex, align 8
  %16 = getelementptr inbounds %class.SkMutex, %class.SkMutex* %15, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %17 = atomicrmw sub i32* %16, i32 1 acquire
  %18 = icmp slt i32 %17, 1
  br i1 %18, label %19, label %21

19:                                               ; preds = %14
  %20 = getelementptr inbounds %class.SkMutex, %class.SkMutex* %15, i64 0, i32 0
  tail call void @_ZN11SkSemaphore6osWaitEv(%class.SkSemaphore* %20) #19
  br label %21

21:                                               ; preds = %14, %19
  %22 = getelementptr inbounds %struct.SkScalerContextRec, %struct.SkScalerContextRec* %1, i64 0, i32 10
  %23 = load i8, i8* %22, align 2
  %24 = uitofp i8 %23 to float
  %25 = fdiv float %24, 2.550000e+02
  %26 = getelementptr inbounds %struct.SkScalerContextRec, %struct.SkScalerContextRec* %1, i64 0, i32 9
  %27 = load i8, i8* %26, align 1
  %28 = uitofp i8 %27 to float
  %29 = fmul float %28, 1.562500e-02
  %30 = getelementptr inbounds %struct.SkScalerContextRec, %struct.SkScalerContextRec* %1, i64 0, i32 8
  %31 = load i8, i8* %30, align 4
  %32 = uitofp i8 %31 to float
  %33 = fmul float %32, 1.562500e-02
  %34 = tail call fastcc dereferenceable(2064) %class.SkTMaskGamma* @_ZL17cached_mask_gammafff(float %25, float %29, float %33)
  %35 = getelementptr inbounds %struct.SkScalerContextRec, %struct.SkScalerContextRec* %1, i64 0, i32 7
  %36 = load i32, i32* %35, align 4
  %37 = getelementptr inbounds %class.SkTMaskGamma, %class.SkTMaskGamma* %34, i64 0, i32 2
  %38 = load i8, i8* %37, align 4, !range !9, !noalias !10
  %39 = icmp eq i8 %38, 0
  br i1 %39, label %42, label %40

40:                                               ; preds = %21
  %41 = bitcast %class.SkTMaskPreBlend* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %41, i8 0, i64 32, i1 false) #19, !alias.scope !10
  br label %65

42:                                               ; preds = %21
  %43 = icmp eq %class.SkTMaskGamma* %34, null
  br i1 %43, label %47, label %44

44:                                               ; preds = %42
  %45 = getelementptr inbounds %class.SkTMaskGamma, %class.SkTMaskGamma* %34, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %46 = atomicrmw add i32* %45, i32 1 monotonic, !noalias !13
  br label %47

47:                                               ; preds = %44, %42
  %48 = ptrtoint %class.SkTMaskGamma* %34 to i64
  %49 = lshr i32 %36, 21
  %50 = and i32 %49, 7
  %51 = zext i32 %50 to i64
  %52 = getelementptr inbounds %class.SkTMaskGamma, %class.SkTMaskGamma* %34, i64 0, i32 1, i64 %51, i64 0
  %53 = lshr i32 %36, 13
  %54 = and i32 %53, 7
  %55 = zext i32 %54 to i64
  %56 = getelementptr inbounds %class.SkTMaskGamma, %class.SkTMaskGamma* %34, i64 0, i32 1, i64 %55, i64 0
  %57 = lshr i32 %36, 5
  %58 = and i32 %57, 7
  %59 = zext i32 %58 to i64
  %60 = getelementptr inbounds %class.SkTMaskGamma, %class.SkTMaskGamma* %34, i64 0, i32 1, i64 %59, i64 0
  %61 = bitcast %class.SkTMaskPreBlend* %0 to i64*
  store i64 %48, i64* %61, align 8, !alias.scope !10
  %62 = getelementptr inbounds %class.SkTMaskPreBlend, %class.SkTMaskPreBlend* %0, i64 0, i32 1
  store i8* %52, i8** %62, align 8, !alias.scope !10
  %63 = getelementptr inbounds %class.SkTMaskPreBlend, %class.SkTMaskPreBlend* %0, i64 0, i32 2
  store i8* %56, i8** %63, align 8, !alias.scope !10
  %64 = getelementptr inbounds %class.SkTMaskPreBlend, %class.SkTMaskPreBlend* %0, i64 0, i32 3
  store i8* %60, i8** %64, align 8, !alias.scope !10
  br label %65

65:                                               ; preds = %40, %47
  %66 = atomicrmw add i32* %16, i32 1 release
  %67 = icmp slt i32 %66, 0
  br i1 %67, label %68, label %70

68:                                               ; preds = %65
  %69 = getelementptr inbounds %class.SkMutex, %class.SkMutex* %15, i64 0, i32 0
  tail call void @_ZN11SkSemaphore8osSignalEi(%class.SkSemaphore* %69, i32 1) #19
  br label %70

70:                                               ; preds = %65, %68
  ret void
}

; Function Attrs: noreturn nounwind ssp uwtable
define hidden void @_ZN15SkScalerContextD0Ev(%class.SkScalerContext* nocapture readnone) unnamed_addr #4 align 2 {
  tail call void @llvm.trap() #21
  unreachable
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #5

; Function Attrs: nounwind ssp uwtable
define internal fastcc dereferenceable(2064) %class.SkTMaskGamma* @_ZL17cached_mask_gammafff(float, float, float) unnamed_addr #0 {
  %4 = load atomic i8, i8* bitcast (i64* @_ZGVZL22mask_gamma_cache_mutexvE5mutex to i8*) acquire, align 8
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %6, label %15, !prof !8

6:                                                ; preds = %3
  %7 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZL22mask_gamma_cache_mutexvE5mutex) #19
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %15, label %9

9:                                                ; preds = %6
  %10 = tail call i8* @_Znwm(i64 16) #20
  %11 = bitcast i8* %10 to i32*
  store i32 1, i32* %11, align 4
  %12 = getelementptr inbounds i8, i8* %10, i64 4
  store i8 0, i8* %12, align 1
  %13 = getelementptr inbounds i8, i8* %10, i64 8
  %14 = bitcast i8* %13 to %"struct.SkSemaphore::OSSemaphore"**
  store %"struct.SkSemaphore::OSSemaphore"* null, %"struct.SkSemaphore::OSSemaphore"** %14, align 8
  store i8* %10, i8** bitcast (%class.SkMutex** @_ZZL22mask_gamma_cache_mutexvE5mutex to i8**), align 8
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZL22mask_gamma_cache_mutexvE5mutex) #19
  br label %15

15:                                               ; preds = %3, %6, %9
  %16 = fcmp oeq float %0, 0.000000e+00
  %17 = fcmp oeq float %1, 1.000000e+00
  %18 = and i1 %16, %17
  %19 = fcmp oeq float %2, 1.000000e+00
  %20 = and i1 %18, %19
  br i1 %20, label %21, label %31

21:                                               ; preds = %15
  %22 = load %class.SkTMaskGamma*, %class.SkTMaskGamma** @_ZL16gLinearMaskGamma, align 8
  %23 = icmp eq %class.SkTMaskGamma* %22, null
  br i1 %23, label %24, label %56

24:                                               ; preds = %21
  %25 = tail call i8* @_Znwm(i64 2064) #20
  %26 = getelementptr inbounds i8, i8* %25, i64 8
  %27 = bitcast i8* %26 to i32*
  store i32 1, i32* %27, align 4
  %28 = bitcast i8* %25 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTV12SkTMaskGammaILi3ELi3ELi3EE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %28, align 8
  %29 = getelementptr inbounds i8, i8* %25, i64 2060
  store i8 1, i8* %29, align 4
  store i8* %25, i8** bitcast (%class.SkTMaskGamma** @_ZL16gLinearMaskGamma to i8**), align 8
  %30 = bitcast i8* %25 to %class.SkTMaskGamma*
  br label %56

31:                                               ; preds = %15
  %32 = load float, float* @_ZL9gContrast, align 4
  %33 = fcmp une float %32, %0
  %34 = load float, float* @_ZL11gPaintGamma, align 4
  %35 = fcmp une float %34, %1
  %36 = or i1 %33, %35
  %37 = load float, float* @_ZL12gDeviceGamma, align 4
  %38 = fcmp une float %37, %2
  %39 = or i1 %36, %38
  %40 = load %class.SkTMaskGamma*, %class.SkTMaskGamma** @_ZL10gMaskGamma, align 8
  br i1 %39, label %41, label %56

41:                                               ; preds = %31
  %42 = icmp eq %class.SkTMaskGamma* %40, null
  br i1 %42, label %53, label %43

43:                                               ; preds = %41
  %44 = getelementptr inbounds %class.SkTMaskGamma, %class.SkTMaskGamma* %40, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %45 = atomicrmw add i32* %44, i32 -1 acq_rel
  %46 = icmp eq i32 %45, 1
  br i1 %46, label %47, label %53

47:                                               ; preds = %43
  %48 = bitcast %class.SkTMaskGamma* %40 to %class.SkRefCntBase*
  %49 = bitcast %class.SkTMaskGamma* %40 to void (%class.SkRefCntBase*)***
  %50 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %49, align 8
  %51 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %50, i64 2
  %52 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %51, align 8
  tail call void %52(%class.SkRefCntBase* nonnull %48) #19
  br label %53

53:                                               ; preds = %41, %43, %47
  %54 = tail call i8* @_Znwm(i64 2064) #20
  %55 = bitcast i8* %54 to %class.SkTMaskGamma*
  tail call void @_ZN12SkTMaskGammaILi3ELi3ELi3EEC2Efff(%class.SkTMaskGamma* nonnull %55, float %0, float %1, float %2)
  store i8* %54, i8** bitcast (%class.SkTMaskGamma** @_ZL10gMaskGamma to i8**), align 8
  store float %0, float* @_ZL9gContrast, align 4
  store float %1, float* @_ZL11gPaintGamma, align 4
  store float %2, float* @_ZL12gDeviceGamma, align 4
  br label %56

56:                                               ; preds = %31, %53, %21, %24
  %57 = phi %class.SkTMaskGamma* [ %30, %24 ], [ %22, %21 ], [ %55, %53 ], [ %40, %31 ]
  ret %class.SkTMaskGamma* %57
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN15SkScalerContext15GetGammaLUTSizeEfffPiS0_(float, float, float, i32* nocapture, i32* nocapture) local_unnamed_addr #0 align 2 {
  %6 = load atomic i8, i8* bitcast (i64* @_ZGVZL22mask_gamma_cache_mutexvE5mutex to i8*) acquire, align 8
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %8, label %17, !prof !8

8:                                                ; preds = %5
  %9 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZL22mask_gamma_cache_mutexvE5mutex) #19
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %17, label %11

11:                                               ; preds = %8
  %12 = tail call i8* @_Znwm(i64 16) #20
  %13 = bitcast i8* %12 to i32*
  store i32 1, i32* %13, align 4
  %14 = getelementptr inbounds i8, i8* %12, i64 4
  store i8 0, i8* %14, align 1
  %15 = getelementptr inbounds i8, i8* %12, i64 8
  %16 = bitcast i8* %15 to %"struct.SkSemaphore::OSSemaphore"**
  store %"struct.SkSemaphore::OSSemaphore"* null, %"struct.SkSemaphore::OSSemaphore"** %16, align 8
  store i8* %12, i8** bitcast (%class.SkMutex** @_ZZL22mask_gamma_cache_mutexvE5mutex to i8**), align 8
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZL22mask_gamma_cache_mutexvE5mutex) #19
  br label %17

17:                                               ; preds = %5, %8, %11
  %18 = load %class.SkMutex*, %class.SkMutex** @_ZZL22mask_gamma_cache_mutexvE5mutex, align 8
  %19 = getelementptr inbounds %class.SkMutex, %class.SkMutex* %18, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %20 = atomicrmw sub i32* %19, i32 1 acquire
  %21 = icmp slt i32 %20, 1
  br i1 %21, label %22, label %24

22:                                               ; preds = %17
  %23 = getelementptr inbounds %class.SkMutex, %class.SkMutex* %18, i64 0, i32 0
  tail call void @_ZN11SkSemaphore6osWaitEv(%class.SkSemaphore* %23) #19
  br label %24

24:                                               ; preds = %17, %22
  %25 = tail call fastcc dereferenceable(2064) %class.SkTMaskGamma* @_ZL17cached_mask_gammafff(float %0, float %1, float %2)
  store i32 256, i32* %3, align 4
  store i32 8, i32* %4, align 4
  %26 = load i32, i32* %3, align 4
  %27 = shl nsw i32 %26, 3
  %28 = sext i32 %27 to i64
  %29 = atomicrmw add i32* %19, i32 1 release
  %30 = icmp slt i32 %29, 0
  br i1 %30, label %31, label %33

31:                                               ; preds = %24
  %32 = getelementptr inbounds %class.SkMutex, %class.SkMutex* %18, i64 0, i32 0
  tail call void @_ZN11SkSemaphore8osSignalEi(%class.SkSemaphore* %32, i32 1) #19
  br label %33

33:                                               ; preds = %24, %31
  ret i64 %28
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN15SkScalerContext15GetGammaLUTDataEfffPh(float, float, float, i8* nocapture) local_unnamed_addr #0 align 2 {
  %5 = load atomic i8, i8* bitcast (i64* @_ZGVZL22mask_gamma_cache_mutexvE5mutex to i8*) acquire, align 8
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %7, label %16, !prof !8

7:                                                ; preds = %4
  %8 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZL22mask_gamma_cache_mutexvE5mutex) #19
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %16, label %10

10:                                               ; preds = %7
  %11 = tail call i8* @_Znwm(i64 16) #20
  %12 = bitcast i8* %11 to i32*
  store i32 1, i32* %12, align 4
  %13 = getelementptr inbounds i8, i8* %11, i64 4
  store i8 0, i8* %13, align 1
  %14 = getelementptr inbounds i8, i8* %11, i64 8
  %15 = bitcast i8* %14 to %"struct.SkSemaphore::OSSemaphore"**
  store %"struct.SkSemaphore::OSSemaphore"* null, %"struct.SkSemaphore::OSSemaphore"** %15, align 8
  store i8* %11, i8** bitcast (%class.SkMutex** @_ZZL22mask_gamma_cache_mutexvE5mutex to i8**), align 8
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZL22mask_gamma_cache_mutexvE5mutex) #19
  br label %16

16:                                               ; preds = %4, %7, %10
  %17 = load %class.SkMutex*, %class.SkMutex** @_ZZL22mask_gamma_cache_mutexvE5mutex, align 8
  %18 = getelementptr inbounds %class.SkMutex, %class.SkMutex* %17, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = atomicrmw sub i32* %18, i32 1 acquire
  %20 = icmp slt i32 %19, 1
  br i1 %20, label %21, label %23

21:                                               ; preds = %16
  %22 = getelementptr inbounds %class.SkMutex, %class.SkMutex* %17, i64 0, i32 0
  tail call void @_ZN11SkSemaphore6osWaitEv(%class.SkSemaphore* %22) #19
  br label %23

23:                                               ; preds = %16, %21
  %24 = tail call fastcc dereferenceable(2064) %class.SkTMaskGamma* @_ZL17cached_mask_gammafff(float %0, float %1, float %2)
  %25 = getelementptr inbounds %class.SkTMaskGamma, %class.SkTMaskGamma* %24, i64 0, i32 2
  %26 = load i8, i8* %25, align 4, !range !9
  %27 = icmp ne i8 %26, 0
  %28 = getelementptr inbounds %class.SkTMaskGamma, %class.SkTMaskGamma* %24, i64 0, i32 1, i64 0, i64 0
  %29 = icmp eq i8* %28, null
  %30 = or i1 %29, %27
  br i1 %30, label %32, label %31

31:                                               ; preds = %23
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %3, i8* nonnull align 1 %28, i64 2048, i1 false)
  br label %32

32:                                               ; preds = %23, %31
  %33 = phi i1 [ true, %31 ], [ false, %23 ]
  %34 = atomicrmw add i32* %18, i32 1 release
  %35 = icmp slt i32 %34, 0
  br i1 %35, label %36, label %38

36:                                               ; preds = %32
  %37 = getelementptr inbounds %class.SkMutex, %class.SkMutex* %17, i64 0, i32 0
  tail call void @_ZN11SkSemaphore8osSignalEi(%class.SkSemaphore* %37, i32 1) #19
  br label %38

38:                                               ; preds = %32, %36
  ret i1 %33
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN15SkScalerContext9makeGlyphE15SkPackedGlyphID(%class.SkGlyph* noalias sret, %class.SkScalerContext*, i32) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %class.SkScalerContext, %class.SkScalerContext* %1, i64 0, i32 1, i32 12
  %5 = load i8, i8* %4, align 8
  tail call void @_ZN15SkScalerContext17internalMakeGlyphE15SkPackedGlyphIDN6SkMask6FormatE(%class.SkGlyph* sret %0, %class.SkScalerContext* %1, i32 %2, i8 zeroext %5)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN15SkScalerContext17internalMakeGlyphE15SkPackedGlyphIDN6SkMask6FormatE(%class.SkGlyph* noalias sret, %class.SkScalerContext*, i32, i8 zeroext) local_unnamed_addr #0 align 2 {
  %5 = alloca %class.SkPath, align 8
  %6 = alloca %struct.SkMask, align 8
  %7 = alloca %struct.SkMask, align 8
  %8 = alloca %class.SkMatrix, align 4
  %9 = bitcast %class.SkGlyph* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %9, i8* align 8 bitcast ({ i16, i16, i16, i16, i8*, %"struct.SkGlyph::PathData"*, float, float, i8, i8, [2 x i8], %struct.SkPackedGlyphID }* @__const._ZN15SkScalerContext8getImageERK7SkGlyph.tmpGlyph to i8*), i64 40, i1 false)
  %10 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %0, i64 0, i32 10, i32 0
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 34, i1 false) #19
  store i32 %2, i32* %10, align 4
  %11 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %0, i64 0, i32 8
  store i8 %3, i8* %11, align 8
  %12 = getelementptr inbounds %class.SkScalerContext, %class.SkScalerContext* %1, i64 0, i32 5
  %13 = load i8, i8* %12, align 8, !range !9
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %15, label %20

15:                                               ; preds = %4
  %16 = bitcast %class.SkScalerContext* %1 to void (%class.SkScalerContext*, %class.SkGlyph*)***
  %17 = load void (%class.SkScalerContext*, %class.SkGlyph*)**, void (%class.SkScalerContext*, %class.SkGlyph*)*** %16, align 8
  %18 = getelementptr inbounds void (%class.SkScalerContext*, %class.SkGlyph*)*, void (%class.SkScalerContext*, %class.SkGlyph*)** %17, i64 3
  %19 = load void (%class.SkScalerContext*, %class.SkGlyph*)*, void (%class.SkScalerContext*, %class.SkGlyph*)** %18, align 8
  tail call void %19(%class.SkScalerContext* %1, %class.SkGlyph* %0) #19
  br label %150

20:                                               ; preds = %4
  %21 = bitcast %class.SkPath* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %21) #19
  %22 = getelementptr inbounds %class.SkPath, %class.SkPath* %5, i64 0, i32 0, i32 0
  %23 = bitcast %class.SkPath* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %23, i8 -86, i64 16, i1 false)
  call void @_ZN6SkPathC1Ev(%class.SkPath* nonnull %5) #19
  %24 = load i32, i32* %10, align 4
  %25 = call zeroext i1 @_ZN15SkScalerContext15internalGetPathE15SkPackedGlyphIDP6SkPath(%class.SkScalerContext* %1, i32 %24, %class.SkPath* nonnull %5)
  br i1 %25, label %31, label %26

26:                                               ; preds = %20
  %27 = bitcast %class.SkScalerContext* %1 to void (%class.SkScalerContext*, %class.SkGlyph*)***
  %28 = load void (%class.SkScalerContext*, %class.SkGlyph*)**, void (%class.SkScalerContext*, %class.SkGlyph*)*** %27, align 8
  %29 = getelementptr inbounds void (%class.SkScalerContext*, %class.SkGlyph*)*, void (%class.SkScalerContext*, %class.SkGlyph*)** %28, i64 3
  %30 = load void (%class.SkScalerContext*, %class.SkGlyph*)*, void (%class.SkScalerContext*, %class.SkGlyph*)** %29, align 8
  call void %30(%class.SkScalerContext* %1, %class.SkGlyph* %0) #19
  br label %148

31:                                               ; preds = %20
  %32 = bitcast %class.SkScalerContext* %1 to i1 (%class.SkScalerContext*, %class.SkGlyph*)***
  %33 = load i1 (%class.SkScalerContext*, %class.SkGlyph*)**, i1 (%class.SkScalerContext*, %class.SkGlyph*)*** %32, align 8
  %34 = getelementptr inbounds i1 (%class.SkScalerContext*, %class.SkGlyph*)*, i1 (%class.SkScalerContext*, %class.SkGlyph*)** %33, i64 2
  %35 = load i1 (%class.SkScalerContext*, %class.SkGlyph*)*, i1 (%class.SkScalerContext*, %class.SkGlyph*)** %34, align 8
  %36 = call zeroext i1 %35(%class.SkScalerContext* %1, %class.SkGlyph* %0) #19
  br i1 %36, label %42, label %37

37:                                               ; preds = %31
  %38 = bitcast %class.SkScalerContext* %1 to void (%class.SkScalerContext*, %class.SkGlyph*)***
  %39 = load void (%class.SkScalerContext*, %class.SkGlyph*)**, void (%class.SkScalerContext*, %class.SkGlyph*)*** %38, align 8
  %40 = getelementptr inbounds void (%class.SkScalerContext*, %class.SkGlyph*)*, void (%class.SkScalerContext*, %class.SkGlyph*)** %39, i64 3
  %41 = load void (%class.SkScalerContext*, %class.SkGlyph*)*, void (%class.SkScalerContext*, %class.SkGlyph*)** %40, align 8
  call void %41(%class.SkScalerContext* %1, %class.SkGlyph* %0) #19
  br label %42

42:                                               ; preds = %37, %31
  %43 = load i8, i8* %11, align 8
  %44 = icmp eq i8 %43, 3
  br i1 %44, label %45, label %46

45:                                               ; preds = %42
  store i8 1, i8* %11, align 8
  br label %46

46:                                               ; preds = %45, %42
  %47 = load %class.SkPathRef*, %class.SkPathRef** %22, align 8
  %48 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %47, i64 0, i32 9
  %49 = load i8, i8* %48, align 8
  %50 = icmp eq i8 %49, 0
  br i1 %50, label %60, label %51

51:                                               ; preds = %46
  %52 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %47, i64 0, i32 1
  %53 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %47, i64 0, i32 3, i32 0
  %54 = load %struct.SkPoint*, %struct.SkPoint** %53, align 8
  %55 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %47, i64 0, i32 3, i32 2
  %56 = load i32, i32* %55, align 4
  %57 = call zeroext i1 @_ZN6SkRect14setBoundsCheckEPK7SkPointi(%struct.SkRect* %52, %struct.SkPoint* %54, i32 %56) #19
  %58 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %47, i64 0, i32 10
  %59 = zext i1 %57 to i8
  store i8 %59, i8* %58, align 1
  store i8 0, i8* %48, align 8
  br label %60

60:                                               ; preds = %46, %51
  %61 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %47, i64 0, i32 1, i32 0
  %62 = load float, float* %61, align 4
  %63 = call float @llvm.floor.f32(float %62) #19
  %64 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %47, i64 0, i32 1, i32 1
  %65 = load float, float* %64, align 4
  %66 = call float @llvm.floor.f32(float %65) #19
  %67 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %47, i64 0, i32 1, i32 2
  %68 = load float, float* %67, align 4
  %69 = call float @llvm.ceil.f32(float %68) #19
  %70 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %47, i64 0, i32 1, i32 3
  %71 = load float, float* %70, align 4
  %72 = call float @llvm.ceil.f32(float %71) #19
  %73 = insertelement <4 x float> undef, float %66, i32 0
  %74 = insertelement <4 x float> %73, float %63, i32 1
  %75 = insertelement <4 x float> %74, float %69, i32 2
  %76 = insertelement <4 x float> %75, float %72, i32 3
  %77 = fcmp olt <4 x float> %76, <float 0x41DFFFFFE0000000, float 0x41DFFFFFE0000000, float 0x41DFFFFFE0000000, float 0x41DFFFFFE0000000>
  %78 = select <4 x i1> %77, <4 x float> %76, <4 x float> <float 0x41DFFFFFE0000000, float 0x41DFFFFFE0000000, float 0x41DFFFFFE0000000, float 0x41DFFFFFE0000000>
  %79 = fcmp ogt <4 x float> %78, <float 0xC1DFFFFFE0000000, float 0xC1DFFFFFE0000000, float 0xC1DFFFFFE0000000, float 0xC1DFFFFFE0000000>
  %80 = select <4 x i1> %79, <4 x float> %78, <4 x float> <float 0xC1DFFFFFE0000000, float 0xC1DFFFFFE0000000, float 0xC1DFFFFFE0000000, float 0xC1DFFFFFE0000000>
  %81 = fptosi <4 x float> %80 to <4 x i32>
  %82 = extractelement <4 x i32> %81, i32 2
  %83 = sext i32 %82 to i64
  %84 = extractelement <4 x i32> %81, i32 1
  %85 = sext i32 %84 to i64
  %86 = sub nsw i64 %83, %85
  %87 = extractelement <4 x i32> %81, i32 3
  %88 = sext i32 %87 to i64
  %89 = extractelement <4 x i32> %81, i32 0
  %90 = sext i32 %89 to i64
  %91 = sub nsw i64 %88, %90
  %92 = icmp slt i64 %86, 1
  %93 = icmp slt i64 %91, 1
  %94 = or i1 %92, %93
  br i1 %94, label %149, label %95

95:                                               ; preds = %60
  %96 = or i64 %91, %86
  %97 = add nsw i64 %96, 2147483648
  %98 = icmp ult i64 %97, 4294967296
  %99 = add <4 x i32> %81, <i32 32768, i32 32768, i32 32768, i32 32768>
  %100 = shufflevector <4 x i32> %99, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %101 = or <4 x i32> %99, %100
  %102 = shufflevector <4 x i32> %101, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %103 = or <4 x i32> %101, %102
  %104 = extractelement <4 x i32> %103, i32 0
  %105 = icmp ult i32 %104, 65536
  %106 = and i1 %105, %98
  br i1 %106, label %107, label %149

107:                                              ; preds = %95
  %108 = trunc i32 %84 to i16
  %109 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %0, i64 0, i32 3
  store i16 %108, i16* %109, align 2
  %110 = trunc i32 %89 to i16
  %111 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %0, i64 0, i32 2
  store i16 %110, i16* %111, align 4
  %112 = sub nsw i32 %82, %84
  %113 = trunc i32 %112 to i16
  %114 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %0, i64 0, i32 0
  store i16 %113, i16* %114, align 8
  %115 = sub nsw i32 %87, %89
  %116 = trunc i32 %115 to i16
  %117 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %0, i64 0, i32 1
  store i16 %116, i16* %117, align 2
  %118 = getelementptr inbounds %class.SkScalerContext, %class.SkScalerContext* %1, i64 0, i32 1, i32 14
  %119 = load i8, i8* %11, align 8
  %120 = icmp eq i8 %119, 4
  %121 = load i16, i16* %118, align 2
  br i1 %120, label %127, label %122

122:                                              ; preds = %107
  %123 = and i16 %121, 2048
  %124 = icmp ne i16 %123, 0
  %125 = icmp eq i8 %119, 1
  %126 = and i1 %125, %124
  br label %127

127:                                              ; preds = %107, %122
  %128 = phi i1 [ %126, %122 ], [ true, %107 ]
  %129 = icmp ne i16 %113, 0
  %130 = and i1 %129, %128
  %131 = and i16 %121, 512
  %132 = icmp ne i16 %131, 0
  %133 = getelementptr inbounds %class.SkScalerContext, %class.SkScalerContext* %1, i64 0, i32 1, i32 5
  %134 = load float, float* %133, align 8
  %135 = fcmp oeq float %134, 0.000000e+00
  %136 = xor i1 %132, true
  %137 = and i1 %130, %136
  %138 = or i1 %135, %137
  %139 = and i1 %130, %132
  %140 = or i1 %135, %139
  br i1 %138, label %141, label %144

141:                                              ; preds = %127
  %142 = add i16 %113, 2
  store i16 %142, i16* %114, align 8
  %143 = add i16 %108, -1
  store i16 %143, i16* %109, align 2
  br label %144

144:                                              ; preds = %141, %127
  br i1 %140, label %145, label %148

145:                                              ; preds = %144
  %146 = add i16 %116, 2
  store i16 %146, i16* %117, align 2
  %147 = add i16 %110, -1
  store i16 %147, i16* %111, align 4
  br label %148

148:                                              ; preds = %145, %144, %26
  call void @_ZN6SkPathD1Ev(%class.SkPath* nonnull %5) #19
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %21) #19
  br label %150

149:                                              ; preds = %95, %60
  call void @_ZN6SkPathD1Ev(%class.SkPath* nonnull %5) #19
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %21) #19
  br label %248

150:                                              ; preds = %148, %15
  %151 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %0, i64 0, i32 0
  %152 = load i16, i16* %151, align 8
  %153 = icmp eq i16 %152, 0
  br i1 %153, label %158, label %154

154:                                              ; preds = %150
  %155 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %0, i64 0, i32 1
  %156 = load i16, i16* %155, align 2
  %157 = icmp eq i16 %156, 0
  br i1 %157, label %158, label %160

158:                                              ; preds = %154, %150
  store i8 0, i8* %11, align 8
  %159 = bitcast %class.SkGlyph* %0 to i64*
  store i64 0, i64* %159, align 8
  br label %253

160:                                              ; preds = %154
  %161 = getelementptr inbounds %class.SkScalerContext, %class.SkScalerContext* %1, i64 0, i32 4
  %162 = getelementptr inbounds %class.sk_sp.7, %class.sk_sp.7* %161, i64 0, i32 0
  %163 = load %class.SkMaskFilter*, %class.SkMaskFilter** %162, align 8
  %164 = icmp eq %class.SkMaskFilter* %163, null
  br i1 %164, label %253, label %165

165:                                              ; preds = %160
  %166 = bitcast %struct.SkMask* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %166) #19
  %167 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %6, i64 0, i32 0
  %168 = bitcast %struct.SkMask* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %168, i8 -86, i64 32, i1 false)
  call void @_ZNK7SkGlyph4maskEv(%struct.SkMask* nonnull sret %6, %class.SkGlyph* %0) #19
  %169 = bitcast %struct.SkMask* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %169) #19
  %170 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %7, i64 0, i32 0
  %171 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %7, i64 0, i32 3
  %172 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %7, i64 0, i32 1
  %173 = bitcast %struct.SkIRect* %172 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %173, i8 -86, i64 24, i1 false)
  store i8* null, i8** %170, align 8
  %174 = bitcast %class.SkMatrix* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %174) #19
  %175 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %8, i64 0, i32 1
  %176 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %8, i64 0, i32 0, i64 1
  %177 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %8, i64 0, i32 0, i64 2
  %178 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %8, i64 0, i32 0, i64 3
  %179 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %8, i64 0, i32 0, i64 4
  %180 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %8, i64 0, i32 0, i64 5
  %181 = getelementptr inbounds %class.SkScalerContext, %class.SkScalerContext* %1, i64 0, i32 1, i32 4, i64 0, i64 0
  %182 = bitcast float* %181 to i32*
  %183 = load i32, i32* %182, align 4
  %184 = getelementptr inbounds %class.SkScalerContext, %class.SkScalerContext* %1, i64 0, i32 1, i32 4, i64 0, i64 1
  %185 = bitcast float* %184 to i32*
  %186 = load i32, i32* %185, align 4
  %187 = getelementptr inbounds %class.SkScalerContext, %class.SkScalerContext* %1, i64 0, i32 1, i32 4, i64 1, i64 0
  %188 = bitcast float* %187 to i32*
  %189 = load i32, i32* %188, align 4
  %190 = getelementptr inbounds %class.SkScalerContext, %class.SkScalerContext* %1, i64 0, i32 1, i32 4, i64 1, i64 1
  %191 = bitcast float* %190 to i32*
  %192 = load i32, i32* %191, align 4
  %193 = bitcast %class.SkMatrix* %8 to i32*
  store i32 %183, i32* %193, align 4
  %194 = bitcast float* %176 to i32*
  store i32 %186, i32* %194, align 4
  store float 0.000000e+00, float* %177, align 4
  %195 = bitcast float* %178 to i32*
  store i32 %189, i32* %195, align 4
  %196 = bitcast float* %179 to i32*
  store i32 %192, i32* %196, align 4
  %197 = bitcast float* %180 to <4 x float>*
  store <4 x float> <float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00>, <4 x float>* %197, align 4
  store i32 128, i32* %175, align 4
  store i8* null, i8** %167, align 8
  %198 = bitcast %class.sk_sp.7* %161 to %class.SkMaskFilterBase**
  %199 = load %class.SkMaskFilterBase*, %class.SkMaskFilterBase** %198, align 8
  %200 = bitcast %class.SkMaskFilterBase* %199 to i1 (%class.SkMaskFilterBase*, %struct.SkMask*, %struct.SkMask*, %class.SkMatrix*, %struct.SkIPoint*)***
  %201 = load i1 (%class.SkMaskFilterBase*, %struct.SkMask*, %struct.SkMask*, %class.SkMatrix*, %struct.SkIPoint*)**, i1 (%class.SkMaskFilterBase*, %struct.SkMask*, %struct.SkMask*, %class.SkMatrix*, %struct.SkIPoint*)*** %200, align 8
  %202 = getelementptr inbounds i1 (%class.SkMaskFilterBase*, %struct.SkMask*, %struct.SkMask*, %class.SkMatrix*, %struct.SkIPoint*)*, i1 (%class.SkMaskFilterBase*, %struct.SkMask*, %struct.SkMask*, %class.SkMatrix*, %struct.SkIPoint*)** %201, i64 8
  %203 = load i1 (%class.SkMaskFilterBase*, %struct.SkMask*, %struct.SkMask*, %class.SkMatrix*, %struct.SkIPoint*)*, i1 (%class.SkMaskFilterBase*, %struct.SkMask*, %struct.SkMask*, %class.SkMatrix*, %struct.SkIPoint*)** %202, align 8
  %204 = call zeroext i1 %203(%class.SkMaskFilterBase* %199, %struct.SkMask* nonnull %7, %struct.SkMask* nonnull dereferenceable(32) %6, %class.SkMatrix* nonnull dereferenceable(40) %8, %struct.SkIPoint* null) #19
  br i1 %204, label %205, label %252

205:                                              ; preds = %165
  %206 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %7, i64 0, i32 1, i32 3
  %207 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %7, i64 0, i32 1, i32 2
  %208 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %7, i64 0, i32 1, i32 1
  %209 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %7, i64 0, i32 1, i32 0
  %210 = load i32, i32* %207, align 8
  %211 = sext i32 %210 to i64
  %212 = load i32, i32* %209, align 8
  %213 = sext i32 %212 to i64
  %214 = sub nsw i64 %211, %213
  %215 = load i32, i32* %206, align 4
  %216 = sext i32 %215 to i64
  %217 = load i32, i32* %208, align 4
  %218 = sext i32 %217 to i64
  %219 = sub nsw i64 %216, %218
  %220 = icmp slt i64 %214, 1
  %221 = icmp slt i64 %219, 1
  %222 = or i1 %220, %221
  br i1 %222, label %246, label %223

223:                                              ; preds = %205
  %224 = or i64 %219, %214
  %225 = add nsw i64 %224, 2147483648
  %226 = icmp ult i64 %225, 4294967296
  %227 = add i32 %212, 32768
  %228 = add i32 %217, 32768
  %229 = add i32 %210, 32768
  %230 = add i32 %215, 32768
  %231 = or i32 %227, %229
  %232 = or i32 %231, %230
  %233 = or i32 %232, %228
  %234 = icmp ult i32 %233, 65536
  %235 = and i1 %234, %226
  br i1 %235, label %236, label %247

236:                                              ; preds = %223
  %237 = trunc i32 %212 to i16
  %238 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %0, i64 0, i32 3
  store i16 %237, i16* %238, align 2
  %239 = trunc i32 %217 to i16
  %240 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %0, i64 0, i32 2
  store i16 %239, i16* %240, align 4
  %241 = sub nsw i32 %210, %212
  %242 = trunc i32 %241 to i16
  store i16 %242, i16* %151, align 8
  %243 = sub nsw i32 %215, %217
  %244 = trunc i32 %243 to i16
  store i16 %244, i16* %155, align 2
  %245 = load i8, i8* %171, align 4
  store i8 %245, i8* %11, align 8
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %174) #19
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %169) #19
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %166) #19
  br label %253

246:                                              ; preds = %205
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %174) #19
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %169) #19
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %166) #19
  br label %248

247:                                              ; preds = %223
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %174) #19
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %169) #19
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %166) #19
  br label %248

248:                                              ; preds = %246, %247, %149
  %249 = getelementptr inbounds %class.SkScalerContext, %class.SkScalerContext* %1, i64 0, i32 1, i32 12
  %250 = bitcast %class.SkGlyph* %0 to i64*
  store i64 0, i64* %250, align 8
  %251 = load i8, i8* %249, align 8
  store i8 %251, i8* %11, align 8
  br label %253

252:                                              ; preds = %165
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %174) #19
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %169) #19
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %166) #19
  br label %253

253:                                              ; preds = %252, %236, %160, %248, %158
  ret void
}

declare void @_ZN6SkPathC1Ev(%class.SkPath*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN15SkScalerContext15internalGetPathE15SkPackedGlyphIDP6SkPath(%class.SkScalerContext*, i32, %class.SkPath*) local_unnamed_addr #0 align 2 {
  %4 = alloca %class.SkPath, align 8
  %5 = alloca %class.SkPath, align 8
  %6 = alloca %class.SkMatrix, align 4
  %7 = alloca %class.SkMatrix, align 16
  %8 = alloca %class.SkStrokeRec, align 4
  %9 = alloca %class.SkPath, align 8
  %10 = alloca %class.SkPath, align 8
  %11 = bitcast %class.SkPath* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %11) #19
  %12 = bitcast %class.SkPath* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %12, i8 -86, i64 16, i1 false)
  call void @_ZN6SkPathC1Ev(%class.SkPath* nonnull %4) #19
  %13 = lshr i32 %1, 2
  %14 = trunc i32 %13 to i16
  %15 = bitcast %class.SkScalerContext* %0 to i1 (%class.SkScalerContext*, i16, %class.SkPath*)***
  %16 = load i1 (%class.SkScalerContext*, i16, %class.SkPath*)**, i1 (%class.SkScalerContext*, i16, %class.SkPath*)*** %15, align 8
  %17 = getelementptr inbounds i1 (%class.SkScalerContext*, i16, %class.SkPath*)*, i1 (%class.SkScalerContext*, i16, %class.SkPath*)** %16, i64 5
  %18 = load i1 (%class.SkScalerContext*, i16, %class.SkPath*)*, i1 (%class.SkScalerContext*, i16, %class.SkPath*)** %17, align 8
  %19 = call zeroext i1 %18(%class.SkScalerContext* %0, i16 zeroext %14, %class.SkPath* nonnull %4) #19
  br i1 %19, label %20, label %158

20:                                               ; preds = %3
  %21 = getelementptr inbounds %class.SkScalerContext, %class.SkScalerContext* %0, i64 0, i32 1, i32 14
  %22 = load i16, i16* %21, align 2
  %23 = and i16 %22, 16
  %24 = icmp eq i16 %23, 0
  br i1 %24, label %37, label %25

25:                                               ; preds = %20
  %26 = shl i32 %1, 14
  %27 = and i32 %26, 49152
  %28 = lshr i32 %1, 4
  %29 = and i32 %28, 49152
  %30 = or i32 %27, %29
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %37, label %32

32:                                               ; preds = %25
  %33 = sitofp i32 %27 to float
  %34 = fmul float %33, 0x3EF0000000000000
  %35 = sitofp i32 %29 to float
  %36 = fmul float %35, 0x3EF0000000000000
  call void @_ZNK6SkPath6offsetEffPS_(%class.SkPath* nonnull %4, float %34, float %36, %class.SkPath* nonnull %4) #19
  br label %37

37:                                               ; preds = %32, %25, %20
  %38 = getelementptr inbounds %class.SkScalerContext, %class.SkScalerContext* %0, i64 0, i32 1, i32 5
  %39 = load float, float* %38, align 8
  %40 = fcmp ult float %39, 0.000000e+00
  br i1 %40, label %41, label %45

41:                                               ; preds = %37
  %42 = getelementptr inbounds %class.SkScalerContext, %class.SkScalerContext* %0, i64 0, i32 3, i32 0
  %43 = load %class.SkPathEffect*, %class.SkPathEffect** %42, align 8
  %44 = icmp eq %class.SkPathEffect* %43, null
  br i1 %44, label %138, label %45

45:                                               ; preds = %41, %37
  %46 = bitcast %class.SkPath* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %46) #19
  %47 = bitcast %class.SkPath* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %47, i8 -86, i64 16, i1 false)
  call void @_ZN6SkPathC1Ev(%class.SkPath* nonnull %5) #19
  %48 = bitcast %class.SkMatrix* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %48) #19
  %49 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 1
  %50 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 1
  %51 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 2
  %52 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 3
  %53 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 4
  %54 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 0, i64 5
  %55 = bitcast %class.SkMatrix* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %55) #19
  %56 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %7, i64 0, i32 1
  %57 = bitcast %class.SkMatrix* %7 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %57, align 16
  %58 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %7, i64 0, i32 0, i64 4
  %59 = bitcast float* %58 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %59, align 16
  %60 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %7, i64 0, i32 0, i64 8
  store float 1.000000e+00, float* %60, align 16
  store i32 16, i32* %56, align 4
  %61 = getelementptr inbounds %class.SkScalerContext, %class.SkScalerContext* %0, i64 0, i32 1, i32 4, i64 0, i64 0
  %62 = bitcast float* %61 to i32*
  %63 = load i32, i32* %62, align 4
  %64 = getelementptr inbounds %class.SkScalerContext, %class.SkScalerContext* %0, i64 0, i32 1, i32 4, i64 0, i64 1
  %65 = bitcast float* %64 to i32*
  %66 = load i32, i32* %65, align 4
  %67 = getelementptr inbounds %class.SkScalerContext, %class.SkScalerContext* %0, i64 0, i32 1, i32 4, i64 1, i64 0
  %68 = bitcast float* %67 to i32*
  %69 = load i32, i32* %68, align 4
  %70 = getelementptr inbounds %class.SkScalerContext, %class.SkScalerContext* %0, i64 0, i32 1, i32 4, i64 1, i64 1
  %71 = bitcast float* %70 to i32*
  %72 = load i32, i32* %71, align 4
  %73 = bitcast %class.SkMatrix* %6 to i32*
  store i32 %63, i32* %73, align 4
  %74 = bitcast float* %50 to i32*
  store i32 %66, i32* %74, align 4
  store float 0.000000e+00, float* %51, align 4
  %75 = bitcast float* %52 to i32*
  store i32 %69, i32* %75, align 4
  %76 = bitcast float* %53 to i32*
  store i32 %72, i32* %76, align 4
  %77 = bitcast float* %54 to <4 x float>*
  store <4 x float> <float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00>, <4 x float>* %77, align 4
  store i32 128, i32* %49, align 4
  %78 = call zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix* nonnull %6) #19
  %79 = zext i8 %78 to i32
  store i32 %79, i32* %49, align 4
  %80 = and i32 %79, 15
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %82, label %84

82:                                               ; preds = %45
  %83 = call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix5resetEv(%class.SkMatrix* nonnull %7) #19
  br label %86

84:                                               ; preds = %45
  %85 = call zeroext i1 @_ZNK8SkMatrix17invertNonIdentityEPS_(%class.SkMatrix* nonnull %6, %class.SkMatrix* nonnull %7) #19
  br i1 %85, label %86, label %137

86:                                               ; preds = %82, %84
  call void @_ZNK6SkPath9transformERK8SkMatrixPS_22SkApplyPerspectiveClip(%class.SkPath* nonnull %4, %class.SkMatrix* nonnull dereferenceable(40) %7, %class.SkPath* nonnull %5, i32 1) #19
  %87 = bitcast %class.SkStrokeRec* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %87) #19
  %88 = getelementptr inbounds %class.SkStrokeRec, %class.SkStrokeRec* %8, i64 0, i32 0
  store float 0xFFFFFFFFE0000000, float* %88, align 4
  %89 = getelementptr inbounds %class.SkStrokeRec, %class.SkStrokeRec* %8, i64 0, i32 1
  store float 0xFFFFFFFFE0000000, float* %89, align 4
  %90 = getelementptr inbounds %class.SkStrokeRec, %class.SkStrokeRec* %8, i64 0, i32 2
  store float 0xFFFFFFFFE0000000, float* %90, align 4
  %91 = getelementptr inbounds %class.SkStrokeRec, %class.SkStrokeRec* %8, i64 0, i32 3
  store i32 -1431655766, i32* %91, align 4
  call void @_ZN11SkStrokeRecC1ENS_9InitStyleE(%class.SkStrokeRec* nonnull %8, i32 1) #19
  %92 = load float, float* %38, align 8
  %93 = fcmp ult float %92, 0.000000e+00
  br i1 %93, label %113, label %94

94:                                               ; preds = %86
  %95 = load i16, i16* %21, align 2
  %96 = and i16 %95, 1
  %97 = icmp ne i16 %96, 0
  call void @_ZN11SkStrokeRec14setStrokeStyleEfb(%class.SkStrokeRec* nonnull %8, float %92, i1 zeroext %97) #19
  %98 = getelementptr inbounds %class.SkScalerContext, %class.SkScalerContext* %0, i64 0, i32 1, i32 13
  %99 = load i8, i8* %98, align 1
  %100 = lshr i8 %99, 4
  %101 = zext i8 %100 to i32
  %102 = and i8 %99, 15
  %103 = getelementptr inbounds %class.SkScalerContext, %class.SkScalerContext* %0, i64 0, i32 1, i32 6
  %104 = bitcast float* %103 to i32*
  %105 = load i32, i32* %104, align 4
  %106 = load i32, i32* %91, align 4
  %107 = and i32 %106, -2147483648
  %108 = zext i8 %102 to i32
  %109 = shl nuw nsw i32 %108, 16
  %110 = or i32 %109, %101
  %111 = or i32 %110, %107
  store i32 %111, i32* %91, align 4
  %112 = bitcast float* %90 to i32*
  store i32 %105, i32* %112, align 4
  br label %113

113:                                              ; preds = %86, %94
  %114 = getelementptr inbounds %class.SkScalerContext, %class.SkScalerContext* %0, i64 0, i32 3, i32 0
  %115 = load %class.SkPathEffect*, %class.SkPathEffect** %114, align 8
  %116 = icmp eq %class.SkPathEffect* %115, null
  br i1 %116, label %124, label %117

117:                                              ; preds = %113
  %118 = bitcast %class.SkPath* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %118) #19
  %119 = bitcast %class.SkPath* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %119, i8 -86, i64 16, i1 false)
  call void @_ZN6SkPathC1Ev(%class.SkPath* nonnull %9) #19
  %120 = load %class.SkPathEffect*, %class.SkPathEffect** %114, align 8
  %121 = call zeroext i1 @_ZNK12SkPathEffect10filterPathEP6SkPathRKS0_P11SkStrokeRecPK6SkRect(%class.SkPathEffect* %120, %class.SkPath* nonnull %9, %class.SkPath* nonnull dereferenceable(16) %5, %class.SkStrokeRec* nonnull %8, %struct.SkRect* null) #19
  br i1 %121, label %122, label %123

122:                                              ; preds = %117
  call void @_ZN6SkPath4swapERS_(%class.SkPath* nonnull %5, %class.SkPath* nonnull dereferenceable(16) %9) #19
  br label %123

123:                                              ; preds = %122, %117
  call void @_ZN6SkPathD1Ev(%class.SkPath* nonnull %9) #19
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %118) #19
  br label %124

124:                                              ; preds = %113, %123
  %125 = call i32 @_ZNK11SkStrokeRec8getStyleEv(%class.SkStrokeRec* nonnull %8) #19
  %126 = or i32 %125, 1
  %127 = icmp eq i32 %126, 3
  br i1 %127, label %128, label %134

128:                                              ; preds = %124
  %129 = bitcast %class.SkPath* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %129) #19
  %130 = bitcast %class.SkPath* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %130, i8 -86, i64 16, i1 false)
  call void @_ZN6SkPathC1Ev(%class.SkPath* nonnull %10) #19
  %131 = call zeroext i1 @_ZNK11SkStrokeRec11applyToPathEP6SkPathRKS0_(%class.SkStrokeRec* nonnull %8, %class.SkPath* nonnull %10, %class.SkPath* nonnull dereferenceable(16) %5) #19
  br i1 %131, label %132, label %133

132:                                              ; preds = %128
  call void @_ZN6SkPath4swapERS_(%class.SkPath* nonnull %5, %class.SkPath* nonnull dereferenceable(16) %10) #19
  br label %133

133:                                              ; preds = %132, %128
  call void @_ZN6SkPathD1Ev(%class.SkPath* nonnull %10) #19
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %129) #19
  br label %134

134:                                              ; preds = %133, %124
  %135 = icmp eq %class.SkPath* %2, null
  br i1 %135, label %141, label %136

136:                                              ; preds = %134
  call void @_ZNK6SkPath9transformERK8SkMatrixPS_22SkApplyPerspectiveClip(%class.SkPath* nonnull %5, %class.SkMatrix* nonnull dereferenceable(40) %6, %class.SkPath* nonnull %2, i32 1) #19
  br label %141

137:                                              ; preds = %84
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %55) #19
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %48) #19
  call void @_ZN6SkPathD1Ev(%class.SkPath* nonnull %5) #19
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %46) #19
  br label %158

138:                                              ; preds = %41
  %139 = icmp eq %class.SkPath* %2, null
  br i1 %139, label %158, label %140

140:                                              ; preds = %138
  call void @_ZN6SkPath4swapERS_(%class.SkPath* nonnull %2, %class.SkPath* nonnull dereferenceable(16) %4) #19
  br label %143

141:                                              ; preds = %136, %134
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %87) #19
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %55) #19
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %48) #19
  call void @_ZN6SkPathD1Ev(%class.SkPath* nonnull %5) #19
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %46) #19
  %142 = icmp eq %class.SkPath* %2, null
  br i1 %142, label %158, label %143

143:                                              ; preds = %140, %141
  %144 = getelementptr inbounds %class.SkPath, %class.SkPath* %2, i64 0, i32 0, i32 0
  %145 = load %class.SkPathRef*, %class.SkPathRef** %144, align 8
  %146 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %145, i64 0, i32 9
  %147 = load i8, i8* %146, align 8
  %148 = icmp eq i8 %147, 0
  br i1 %148, label %158, label %149

149:                                              ; preds = %143
  %150 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %145, i64 0, i32 1
  %151 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %145, i64 0, i32 3, i32 0
  %152 = load %struct.SkPoint*, %struct.SkPoint** %151, align 8
  %153 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %145, i64 0, i32 3, i32 2
  %154 = load i32, i32* %153, align 4
  %155 = call zeroext i1 @_ZN6SkRect14setBoundsCheckEPK7SkPointi(%struct.SkRect* %150, %struct.SkPoint* %152, i32 %154) #19
  %156 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %145, i64 0, i32 10
  %157 = zext i1 %155 to i8
  store i8 %157, i8* %156, align 1
  store i8 0, i8* %146, align 8
  br label %158

158:                                              ; preds = %149, %143, %138, %141, %137, %3
  %159 = phi i1 [ true, %137 ], [ false, %3 ], [ true, %138 ], [ true, %141 ], [ true, %143 ], [ true, %149 ]
  call void @_ZN6SkPathD1Ev(%class.SkPath* nonnull %4) #19
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %11) #19
  ret i1 %159
}

; Function Attrs: nounwind
declare void @_ZN6SkPathD1Ev(%class.SkPath*) unnamed_addr #6

declare void @_ZNK7SkGlyph4maskEv(%struct.SkMask* sret, %class.SkGlyph*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZNK18SkScalerContextRec16getMatrixFrom2x2EP8SkMatrix(%struct.SkScalerContextRec* nocapture readonly, %class.SkMatrix* nocapture) local_unnamed_addr #7 align 2 {
  %3 = getelementptr inbounds %struct.SkScalerContextRec, %struct.SkScalerContextRec* %0, i64 0, i32 4, i64 0, i64 0
  %4 = bitcast float* %3 to i32*
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds %struct.SkScalerContextRec, %struct.SkScalerContextRec* %0, i64 0, i32 4, i64 0, i64 1
  %7 = bitcast float* %6 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.SkScalerContextRec, %struct.SkScalerContextRec* %0, i64 0, i32 4, i64 1, i64 0
  %10 = bitcast float* %9 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %struct.SkScalerContextRec, %struct.SkScalerContextRec* %0, i64 0, i32 4, i64 1, i64 1
  %13 = bitcast float* %12 to i32*
  %14 = load i32, i32* %13, align 4
  %15 = bitcast %class.SkMatrix* %1 to i32*
  store i32 %5, i32* %15, align 4
  %16 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 1
  %17 = bitcast float* %16 to i32*
  store i32 %8, i32* %17, align 4
  %18 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 2
  store float 0.000000e+00, float* %18, align 4
  %19 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 3
  %20 = bitcast float* %19 to i32*
  store i32 %11, i32* %20, align 4
  %21 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 4
  %22 = bitcast float* %21 to i32*
  store i32 %14, i32* %22, align 4
  %23 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 0, i64 5
  %24 = bitcast float* %23 to <4 x float>*
  store <4 x float> <float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00>, <4 x float>* %24, align 4
  %25 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %1, i64 0, i32 1
  store i32 128, i32* %25, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN15SkScalerContext8getImageERK7SkGlyph(%class.SkScalerContext*, %class.SkGlyph* dereferenceable(40)) local_unnamed_addr #0 align 2 {
  %3 = alloca %class.SkPaint, align 8
  %4 = alloca %class.SkPath, align 8
  %5 = alloca %class.SkMatrix, align 16
  %6 = alloca %class.SkStrokeRec, align 4
  %7 = alloca %class.SkRasterClip, align 8
  %8 = alloca { i64, i64 }, align 8
  %9 = alloca %struct.SkImageInfo, align 16
  %10 = alloca %class.SkAutoPixmapStorage, align 8
  %11 = alloca %class.SkDraw, align 8
  %12 = alloca %class.SkSimpleMatrixProvider, align 8
  %13 = alloca %class.SkGlyph, align 8
  %14 = alloca %class.SkGlyph, align 8
  %15 = alloca %class.SkPath, align 8
  %16 = alloca %struct.SkMask, align 8
  %17 = alloca %struct.SkMask, align 8
  %18 = alloca %class.SkMatrix, align 4
  %19 = alloca %struct.SkMask, align 8
  %20 = alloca %struct.SkMask, align 8
  %21 = alloca { i64, i64 }, align 8
  %22 = alloca { i64, i64 }, align 8
  %23 = alloca %struct.SkMask, align 8
  %24 = alloca %struct.SkMask, align 8
  %25 = alloca %struct.SkIRect, align 4
  %26 = bitcast %class.SkGlyph* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %26) #19
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %26, i8* align 8 bitcast ({ i16, i16, i16, i16, i8*, %"struct.SkGlyph::PathData"*, float, float, i8, i8, [2 x i8], %struct.SkPackedGlyphID }* @__const._ZN15SkScalerContext8getImageERK7SkGlyph.tmpGlyph to i8*), i64 40, i1 false)
  %27 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %13, i64 0, i32 10, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %26, i8 0, i64 34, i1 false) #19
  store i32 -1, i32* %27, align 4
  %28 = getelementptr inbounds %class.SkScalerContext, %class.SkScalerContext* %0, i64 0, i32 4
  %29 = getelementptr inbounds %class.sk_sp.7, %class.sk_sp.7* %28, i64 0, i32 0
  %30 = load %class.SkMaskFilter*, %class.SkMaskFilter** %29, align 8
  %31 = icmp eq %class.SkMaskFilter* %30, null
  br i1 %31, label %78, label %32

32:                                               ; preds = %2
  %33 = ptrtoint %class.SkMaskFilter* %30 to i64
  %34 = bitcast %class.sk_sp.7* %28 to i64*
  store %class.SkMaskFilter* null, %class.SkMaskFilter** %29, align 8
  %35 = bitcast %class.SkGlyph* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %35) #19
  %36 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %1, i64 0, i32 10, i32 0
  %37 = load i32, i32* %36, align 4
  %38 = getelementptr inbounds %class.SkScalerContext, %class.SkScalerContext* %0, i64 0, i32 1, i32 12
  %39 = load i8, i8* %38, align 8
  call void @_ZN15SkScalerContext17internalMakeGlyphE15SkPackedGlyphIDN6SkMask6FormatE(%class.SkGlyph* nonnull sret %14, %class.SkScalerContext* %0, i32 %37, i8 zeroext %39)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %26, i8* nonnull align 8 %35, i64 40, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %35) #19
  %40 = load %class.SkMaskFilter*, %class.SkMaskFilter** %29, align 8
  store i64 %33, i64* %34, align 8
  %41 = icmp eq %class.SkMaskFilter* %40, null
  br i1 %41, label %52, label %42

42:                                               ; preds = %32
  %43 = getelementptr inbounds %class.SkMaskFilter, %class.SkMaskFilter* %40, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %44 = atomicrmw add i32* %43, i32 -1 acq_rel
  %45 = icmp eq i32 %44, 1
  br i1 %45, label %46, label %52

46:                                               ; preds = %42
  %47 = bitcast %class.SkMaskFilter* %40 to %class.SkRefCntBase*
  %48 = bitcast %class.SkMaskFilter* %40 to void (%class.SkRefCntBase*)***
  %49 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %48, align 8
  %50 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %49, i64 2
  %51 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %50, align 8
  call void %51(%class.SkRefCntBase* nonnull %47) #19
  br label %52

52:                                               ; preds = %32, %42, %46
  %53 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %13, i64 0, i32 8
  %54 = load i8, i8* %53, align 8
  %55 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %1, i64 0, i32 8
  %56 = load i8, i8* %55, align 8
  %57 = icmp eq i8 %54, %56
  br i1 %57, label %58, label %68

58:                                               ; preds = %52
  %59 = call i64 @_ZNK7SkGlyph9imageSizeEv(%class.SkGlyph* nonnull %13) #19
  %60 = call i64 @_ZNK7SkGlyph9imageSizeEv(%class.SkGlyph* %1) #19
  %61 = icmp ugt i64 %59, %60
  br i1 %61, label %68, label %62

62:                                               ; preds = %58
  %63 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %1, i64 0, i32 4
  %64 = bitcast i8** %63 to i64*
  %65 = load i64, i64* %64, align 8
  %66 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %13, i64 0, i32 4
  %67 = bitcast i8** %66 to i64*
  store i64 %65, i64* %67, align 8
  br label %78

68:                                               ; preds = %58, %52
  %69 = call i64 @_ZNK7SkGlyph9imageSizeEv(%class.SkGlyph* nonnull %13) #19
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %74, label %71

71:                                               ; preds = %68
  %72 = call i8* @_Z15sk_malloc_flagsmj(i64 %69, i32 2) #19
  %73 = ptrtoint i8* %72 to i64
  br label %74

74:                                               ; preds = %68, %71
  %75 = phi i64 [ 0, %68 ], [ %73, %71 ]
  %76 = inttoptr i64 %75 to i8*
  %77 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %13, i64 0, i32 4
  store i8* %76, i8** %77, align 8
  br label %78

78:                                               ; preds = %2, %74, %62
  %79 = phi i64 [ 0, %2 ], [ %75, %74 ], [ 0, %62 ]
  %80 = phi i64 [ 0, %2 ], [ %69, %74 ], [ 0, %62 ]
  %81 = phi %class.SkGlyph* [ %1, %2 ], [ %13, %74 ], [ %13, %62 ]
  %82 = getelementptr inbounds %class.SkScalerContext, %class.SkScalerContext* %0, i64 0, i32 5
  %83 = load i8, i8* %82, align 8, !range !9
  %84 = icmp eq i8 %83, 0
  br i1 %84, label %85, label %90

85:                                               ; preds = %78
  %86 = bitcast %class.SkScalerContext* %0 to void (%class.SkScalerContext*, %class.SkGlyph*)***
  %87 = load void (%class.SkScalerContext*, %class.SkGlyph*)**, void (%class.SkScalerContext*, %class.SkGlyph*)*** %86, align 8
  %88 = getelementptr inbounds void (%class.SkScalerContext*, %class.SkGlyph*)*, void (%class.SkScalerContext*, %class.SkGlyph*)** %87, i64 4
  %89 = load void (%class.SkScalerContext*, %class.SkGlyph*)*, void (%class.SkScalerContext*, %class.SkGlyph*)** %88, align 8
  call void %89(%class.SkScalerContext* %0, %class.SkGlyph* dereferenceable(40) %81) #19
  br label %590

90:                                               ; preds = %78
  %91 = bitcast %class.SkPath* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %91) #19
  %92 = bitcast %class.SkPath* %15 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %92, i8 -86, i64 16, i1 false)
  call void @_ZN6SkPathC1Ev(%class.SkPath* nonnull %15) #19
  %93 = bitcast %struct.SkMask* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %93) #19
  %94 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %16, i64 0, i32 0
  %95 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %16, i64 0, i32 1, i32 0
  %96 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %16, i64 0, i32 1, i32 1
  %97 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %16, i64 0, i32 1, i32 2
  %98 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %16, i64 0, i32 1, i32 3
  %99 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %16, i64 0, i32 2
  %100 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %16, i64 0, i32 3
  %101 = bitcast %struct.SkMask* %16 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %101, i8 -86, i64 32, i1 false)
  call void @_ZNK7SkGlyph4maskEv(%struct.SkMask* nonnull sret %16, %class.SkGlyph* %81) #19
  %102 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %81, i64 0, i32 10, i32 0
  %103 = load i32, i32* %102, align 4
  %104 = call zeroext i1 @_ZN15SkScalerContext15internalGetPathE15SkPackedGlyphIDP6SkPath(%class.SkScalerContext* %0, i32 %103, %class.SkPath* nonnull %15)
  br i1 %104, label %110, label %105

105:                                              ; preds = %90
  %106 = bitcast %class.SkScalerContext* %0 to void (%class.SkScalerContext*, %class.SkGlyph*)***
  %107 = load void (%class.SkScalerContext*, %class.SkGlyph*)**, void (%class.SkScalerContext*, %class.SkGlyph*)*** %106, align 8
  %108 = getelementptr inbounds void (%class.SkScalerContext*, %class.SkGlyph*)*, void (%class.SkScalerContext*, %class.SkGlyph*)** %107, i64 4
  %109 = load void (%class.SkScalerContext*, %class.SkGlyph*)*, void (%class.SkScalerContext*, %class.SkGlyph*)** %108, align 8
  call void %109(%class.SkScalerContext* %0, %class.SkGlyph* dereferenceable(40) %81) #19
  br label %589

110:                                              ; preds = %90
  %111 = getelementptr inbounds %class.SkScalerContext, %class.SkScalerContext* %0, i64 0, i32 1, i32 14
  %112 = load i16, i16* %111, align 2
  %113 = and i16 %112, 1024
  %114 = icmp ne i16 %113, 0
  %115 = and i16 %112, 512
  %116 = icmp ne i16 %115, 0
  %117 = and i16 %112, 2048
  %118 = icmp ne i16 %117, 0
  %119 = and i16 %112, 1
  %120 = icmp eq i16 %119, 0
  %121 = getelementptr inbounds %class.SkScalerContext, %class.SkScalerContext* %0, i64 0, i32 1, i32 5
  %122 = load float, float* %121, align 8
  %123 = fcmp une float %122, 0.000000e+00
  %124 = select i1 %120, i8 1, i8 2
  %125 = select i1 %123, i8 0, i8 %124
  %126 = getelementptr inbounds %class.SkScalerContext, %class.SkScalerContext* %0, i64 0, i32 6
  %127 = bitcast { i64, i64 }* %8 to %struct.SkIRect*
  %128 = bitcast %class.SkPaint* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %128) #19
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %128, i8* align 8 bitcast (%class.SkPaint* @__const._ZL12generateMaskRK6SkMaskRK6SkPathRK15SkTMaskPreBlendILi3ELi3ELi3EEbbbN7SkPaint5StyleE.paint to i8*), i64 72, i1 false) #19
  call void @_ZN7SkPaintC1Ev(%class.SkPaint* nonnull %3) #19
  %129 = bitcast %class.SkPath* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %129) #19
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %129, i8 -86, i64 16, i1 false) #19
  call void @_ZN6SkPathC1Ev(%class.SkPath* nonnull %4) #19
  %130 = load i32, i32* %97, align 8
  %131 = load i32, i32* %95, align 8
  %132 = sub i32 %130, %131
  %133 = load i32, i32* %98, align 4
  %134 = load i32, i32* %96, align 4
  %135 = sub i32 %133, %134
  %136 = bitcast %class.SkMatrix* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %136) #19
  %137 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %5, i64 0, i32 1
  %138 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %5, i64 0, i32 0, i64 1
  %139 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %5, i64 0, i32 0, i64 2
  %140 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %5, i64 0, i32 0, i64 3
  %141 = bitcast %class.SkMatrix* %5 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %141, align 16
  %142 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %5, i64 0, i32 0, i64 4
  %143 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %5, i64 0, i32 0, i64 5
  %144 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %5, i64 0, i32 0, i64 6
  %145 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %5, i64 0, i32 0, i64 7
  %146 = bitcast float* %142 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %146, align 16
  %147 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %5, i64 0, i32 0, i64 8
  store float 1.000000e+00, float* %147, align 16
  store i32 16, i32* %137, align 4
  %148 = sitofp i32 %131 to float
  %149 = fsub float -0.000000e+00, %148
  %150 = sitofp i32 %134 to float
  %151 = fsub float -0.000000e+00, %150
  %152 = call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix12setTranslateEff(%class.SkMatrix* nonnull %5, float %149, float %151) #19
  call void @_ZN7SkPaint8setStyleENS_5StyleE(%class.SkPaint* nonnull %3, i8 zeroext %125) #19
  %153 = load i8, i8* %100, align 4
  %154 = icmp ne i8 %153, 0
  %155 = zext i1 %154 to i32
  %156 = getelementptr inbounds %class.SkPaint, %class.SkPaint* %3, i64 0, i32 8, i32 0, i32 0
  %157 = load i32, i32* %156, align 8
  %158 = and i32 %157, -2
  %159 = or i32 %158, %155
  store i32 %159, i32* %156, align 8
  %160 = icmp eq i8 %153, 4
  %161 = icmp eq i8 %153, 1
  %162 = and i1 %118, %161
  %163 = or i1 %160, %162
  br i1 %163, label %166, label %164

164:                                              ; preds = %110
  %165 = icmp eq i8 %153, 0
  br label %204

166:                                              ; preds = %110
  %167 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %5, i64 0, i32 0, i64 0
  %168 = select i1 %116, float 0.000000e+00, float 4.000000e+00
  %169 = select i1 %116, float 4.000000e+00, float 0.000000e+00
  %170 = select i1 %116, float 1.000000e+00, float 0.000000e+00
  %171 = select i1 %116, float 0.000000e+00, float 1.000000e+00
  %172 = select i1 %116, i32 %135, i32 %132
  %173 = select i1 %116, i32 %132, i32 %135
  %174 = load i32, i32* %95, align 8
  %175 = load i32, i32* %96, align 4
  %176 = select i1 %116, i32 %174, i32 %175
  %177 = select i1 %116, i32 %175, i32 %174
  store float %168, float* %167, align 16
  store float %169, float* %138, align 4
  %178 = add nsw i32 %177, 1
  %179 = sitofp i32 %178 to float
  %180 = fmul float %179, -4.000000e+00
  store float %180, float* %139, align 8
  %181 = sitofp i32 %176 to float
  store float %170, float* %140, align 4
  store float %171, float* %142, align 16
  %182 = fsub float -0.000000e+00, %181
  store float %182, float* %143, align 4
  store float 0.000000e+00, float* %144, align 8
  store float 0.000000e+00, float* %145, align 4
  store float 1.000000e+00, float* %147, align 16
  store i32 128, i32* %137, align 4
  %183 = shl i32 %172, 2
  %184 = add nsw i32 %183, -8
  %185 = bitcast %class.SkStrokeRec* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %185) #19
  %186 = getelementptr inbounds %class.SkStrokeRec, %class.SkStrokeRec* %6, i64 0, i32 0
  store float 0xFFFFFFFFE0000000, float* %186, align 4
  %187 = getelementptr inbounds %class.SkStrokeRec, %class.SkStrokeRec* %6, i64 0, i32 1
  store float 0xFFFFFFFFE0000000, float* %187, align 4
  %188 = getelementptr inbounds %class.SkStrokeRec, %class.SkStrokeRec* %6, i64 0, i32 2
  store float 0xFFFFFFFFE0000000, float* %188, align 4
  %189 = getelementptr inbounds %class.SkStrokeRec, %class.SkStrokeRec* %6, i64 0, i32 3
  store i32 -1431655766, i32* %189, align 4
  call void @_ZN11SkStrokeRecC1ENS_9InitStyleE(%class.SkStrokeRec* nonnull %6, i32 1) #19
  br i1 %123, label %195, label %190

190:                                              ; preds = %166
  %191 = icmp eq i8 %125, 2
  call void @_ZN11SkStrokeRec14setStrokeStyleEfb(%class.SkStrokeRec* nonnull %6, float 1.000000e+00, i1 zeroext %191) #19
  %192 = load i32, i32* %189, align 4
  %193 = and i32 %192, -2147483648
  %194 = or i32 %193, 65536
  store i32 %194, i32* %189, align 4
  store float 0.000000e+00, float* %188, align 4
  br label %195

195:                                              ; preds = %190, %166
  %196 = call i32 @_ZNK11SkStrokeRec8getStyleEv(%class.SkStrokeRec* nonnull %6) #19
  %197 = or i32 %196, 1
  %198 = icmp eq i32 %197, 3
  br i1 %198, label %199, label %202

199:                                              ; preds = %195
  %200 = call zeroext i1 @_ZNK11SkStrokeRec11applyToPathEP6SkPathRKS0_(%class.SkStrokeRec* nonnull %6, %class.SkPath* nonnull %4, %class.SkPath* nonnull dereferenceable(16) %15) #19
  br i1 %200, label %201, label %202

201:                                              ; preds = %199
  call void @_ZN7SkPaint8setStyleENS_5StyleE(%class.SkPaint* nonnull %3, i8 zeroext 0) #19
  br label %202

202:                                              ; preds = %201, %199, %195
  %203 = phi %class.SkPath* [ %4, %201 ], [ %15, %199 ], [ %15, %195 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %185) #19
  br label %204

204:                                              ; preds = %202, %164
  %205 = phi i1 [ true, %202 ], [ %165, %164 ]
  %206 = phi i1 [ true, %202 ], [ false, %164 ]
  %207 = phi %class.SkPath* [ %203, %202 ], [ %15, %164 ]
  %208 = phi i32 [ %184, %202 ], [ %132, %164 ]
  %209 = phi i32 [ %173, %202 ], [ %135, %164 ]
  %210 = bitcast %class.SkRasterClip* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %210) #19
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %210, i8 -86, i64 72, i1 false) #19
  call void @_ZN12SkRasterClipC1Ev(%class.SkRasterClip* nonnull %7) #19
  %211 = bitcast { i64, i64 }* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %211) #19
  %212 = zext i32 %209 to i64
  %213 = shl nuw i64 %212, 32
  %214 = zext i32 %208 to i64
  %215 = or i64 %213, %214
  %216 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 0
  store i64 0, i64* %216, align 8
  %217 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  store i64 %215, i64* %217, align 8
  %218 = call zeroext i1 @_ZN12SkRasterClip7setRectERK7SkIRect(%class.SkRasterClip* nonnull %7, %struct.SkIRect* nonnull dereferenceable(16) %127) #19
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %211) #19
  %219 = bitcast %struct.SkImageInfo* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %219) #19
  %220 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %9, i64 0, i32 0, i32 0, i32 0
  %221 = bitcast %struct.SkImageInfo* %9 to <2 x i64>*
  store <2 x i64> <i64 0, i64 8589934593>, <2 x i64>* %221, align 16, !alias.scope !16
  %222 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %9, i64 0, i32 1
  %223 = bitcast %struct.SkISize* %222 to i64*
  store i64 %215, i64* %223, align 16, !alias.scope !16
  %224 = bitcast %class.SkAutoPixmapStorage* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %224) #19
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %224, i8 -86, i64 48, i1 false) #19
  call void @_ZN19SkAutoPixmapStorageC1Ev(%class.SkAutoPixmapStorage* nonnull %10) #19
  br i1 %205, label %225, label %232

225:                                              ; preds = %204
  %226 = call zeroext i1 @_ZN19SkAutoPixmapStorage8tryAllocERK11SkImageInfo(%class.SkAutoPixmapStorage* nonnull %10, %struct.SkImageInfo* nonnull dereferenceable(24) %9) #19
  br i1 %226, label %239, label %227

227:                                              ; preds = %225
  %228 = load i8*, i8** %94, align 8
  %229 = call i64 @_ZNK6SkMask16computeImageSizeEv(%struct.SkMask* nonnull %16) #19
  %230 = icmp eq i64 %229, 0
  br i1 %230, label %579, label %231

231:                                              ; preds = %227
  call void @llvm.memset.p0i8.i64(i8* align 1 %228, i8 0, i64 %229, i1 false) #19
  br label %579

232:                                              ; preds = %204
  %233 = load i8*, i8** %94, align 8
  %234 = load i32, i32* %99, align 8
  %235 = zext i32 %234 to i64
  %236 = getelementptr inbounds %class.SkAutoPixmapStorage, %class.SkAutoPixmapStorage* %10, i64 0, i32 1
  %237 = load i8*, i8** %236, align 8
  call void @_Z7sk_freePv(i8* %237) #19
  store i8* null, i8** %236, align 8
  %238 = getelementptr inbounds %class.SkAutoPixmapStorage, %class.SkAutoPixmapStorage* %10, i64 0, i32 0
  call void @_ZN8SkPixmap5resetERK11SkImageInfoPKvm(%class.SkPixmap* nonnull %238, %struct.SkImageInfo* nonnull dereferenceable(24) %9, i8* %233, i64 %235) #19
  br label %239

239:                                              ; preds = %232, %225
  %240 = getelementptr inbounds %class.SkAutoPixmapStorage, %class.SkAutoPixmapStorage* %10, i64 0, i32 0
  %241 = getelementptr inbounds %class.SkAutoPixmapStorage, %class.SkAutoPixmapStorage* %10, i64 0, i32 0, i32 0
  %242 = load i8*, i8** %241, align 8
  %243 = getelementptr inbounds %class.SkAutoPixmapStorage, %class.SkAutoPixmapStorage* %10, i64 0, i32 0, i32 2
  %244 = getelementptr inbounds %class.SkAutoPixmapStorage, %class.SkAutoPixmapStorage* %10, i64 0, i32 0, i32 1
  %245 = load i64, i64* %244, align 8
  %246 = call i64 @_ZNK11SkImageInfo15computeByteSizeEm(%struct.SkImageInfo* %243, i64 %245) #19
  %247 = icmp eq i64 %246, 0
  br i1 %247, label %249, label %248

248:                                              ; preds = %239
  call void @llvm.memset.p0i8.i64(i8* align 1 %242, i8 0, i64 %246, i1 false) #19
  br label %249

249:                                              ; preds = %248, %239
  %250 = bitcast %class.SkDraw* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %250) #19
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %250, i8 -86, i64 72, i1 false) #19
  call void @_ZN6SkDrawC1Ev(%class.SkDraw* nonnull %11) #19
  %251 = bitcast %class.SkSimpleMatrixProvider* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 112, i8* nonnull %251) #19
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %251, i8* align 8 bitcast (%class.SkSimpleMatrixProvider* @__const._ZL12generateMaskRK6SkMaskRK6SkPathRK15SkTMaskPreBlendILi3ELi3ELi3EEbbbN7SkPaint5StyleE.matrixProvider to i8*), i64 112, i1 false) #19
  %252 = getelementptr inbounds %class.SkSimpleMatrixProvider, %class.SkSimpleMatrixProvider* %12, i64 0, i32 0, i32 0
  %253 = getelementptr inbounds %class.SkSimpleMatrixProvider, %class.SkSimpleMatrixProvider* %12, i64 0, i32 0, i32 1
  %254 = bitcast %class.SkMatrix* %5 to i32*
  %255 = load i32, i32* %254, align 16
  %256 = bitcast float* %138 to i32*
  %257 = load i32, i32* %256, align 4
  %258 = bitcast float* %139 to i32*
  %259 = load i32, i32* %258, align 8
  %260 = bitcast float* %140 to i32*
  %261 = load i32, i32* %260, align 4
  %262 = bitcast float* %142 to i32*
  %263 = load i32, i32* %262, align 16
  %264 = bitcast float* %143 to i32*
  %265 = load i32, i32* %264, align 4
  %266 = bitcast float* %144 to i32*
  %267 = load i32, i32* %266, align 8
  %268 = bitcast float* %145 to i32*
  %269 = load i32, i32* %268, align 4
  %270 = bitcast float* %147 to i32*
  %271 = load i32, i32* %270, align 16
  %272 = bitcast %class.SkM44* %253 to i32*
  store i32 %255, i32* %272, align 8
  %273 = getelementptr inbounds %class.SkSimpleMatrixProvider, %class.SkSimpleMatrixProvider* %12, i64 0, i32 0, i32 1, i32 0, i64 1
  %274 = bitcast float* %273 to i32*
  store i32 %261, i32* %274, align 4
  %275 = getelementptr inbounds %class.SkSimpleMatrixProvider, %class.SkSimpleMatrixProvider* %12, i64 0, i32 0, i32 1, i32 0, i64 2
  store float 0.000000e+00, float* %275, align 8
  %276 = getelementptr inbounds %class.SkSimpleMatrixProvider, %class.SkSimpleMatrixProvider* %12, i64 0, i32 0, i32 1, i32 0, i64 3
  %277 = bitcast float* %276 to i32*
  store i32 %267, i32* %277, align 4
  %278 = getelementptr inbounds %class.SkSimpleMatrixProvider, %class.SkSimpleMatrixProvider* %12, i64 0, i32 0, i32 1, i32 0, i64 4
  %279 = bitcast float* %278 to i32*
  store i32 %257, i32* %279, align 8
  %280 = getelementptr inbounds %class.SkSimpleMatrixProvider, %class.SkSimpleMatrixProvider* %12, i64 0, i32 0, i32 1, i32 0, i64 5
  %281 = bitcast float* %280 to i32*
  store i32 %263, i32* %281, align 4
  %282 = getelementptr inbounds %class.SkSimpleMatrixProvider, %class.SkSimpleMatrixProvider* %12, i64 0, i32 0, i32 1, i32 0, i64 6
  store float 0.000000e+00, float* %282, align 8
  %283 = getelementptr inbounds %class.SkSimpleMatrixProvider, %class.SkSimpleMatrixProvider* %12, i64 0, i32 0, i32 1, i32 0, i64 7
  %284 = bitcast float* %283 to i32*
  store i32 %269, i32* %284, align 4
  %285 = getelementptr inbounds %class.SkSimpleMatrixProvider, %class.SkSimpleMatrixProvider* %12, i64 0, i32 0, i32 1, i32 0, i64 8
  %286 = bitcast float* %285 to <4 x float>*
  store <4 x float> <float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float 0.000000e+00>, <4 x float>* %286, align 8
  %287 = getelementptr inbounds %class.SkSimpleMatrixProvider, %class.SkSimpleMatrixProvider* %12, i64 0, i32 0, i32 1, i32 0, i64 12
  %288 = bitcast float* %287 to i32*
  store i32 %259, i32* %288, align 8
  %289 = getelementptr inbounds %class.SkSimpleMatrixProvider, %class.SkSimpleMatrixProvider* %12, i64 0, i32 0, i32 1, i32 0, i64 13
  %290 = bitcast float* %289 to i32*
  store i32 %265, i32* %290, align 4
  %291 = getelementptr inbounds %class.SkSimpleMatrixProvider, %class.SkSimpleMatrixProvider* %12, i64 0, i32 0, i32 1, i32 0, i64 14
  store float 0.000000e+00, float* %291, align 8
  %292 = getelementptr inbounds %class.SkSimpleMatrixProvider, %class.SkSimpleMatrixProvider* %12, i64 0, i32 0, i32 1, i32 0, i64 15
  %293 = bitcast float* %292 to i32*
  store i32 %271, i32* %293, align 4
  %294 = getelementptr inbounds %class.SkSimpleMatrixProvider, %class.SkSimpleMatrixProvider* %12, i64 0, i32 0, i32 2
  %295 = bitcast %class.SkMatrix* %294 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %295, i8* nonnull align 16 %136, i64 40, i1 false) #19
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTV22SkSimpleMatrixProvider, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %252, align 8
  %296 = getelementptr inbounds %class.SkDraw, %class.SkDraw* %11, i64 0, i32 1
  %297 = bitcast %class.SkPixmap* %296 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %297, i8* nonnull align 8 %224, i64 16, i1 false) #19
  %298 = getelementptr inbounds %class.SkAutoPixmapStorage, %class.SkAutoPixmapStorage* %10, i64 0, i32 0, i32 2, i32 0, i32 0, i32 0
  %299 = load %class.SkColorSpace*, %class.SkColorSpace** %298, align 8
  %300 = icmp eq %class.SkColorSpace* %299, null
  br i1 %300, label %304, label %301

301:                                              ; preds = %249
  %302 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %299, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %303 = atomicrmw add i32* %302, i32 1 monotonic
  br label %304

304:                                              ; preds = %301, %249
  %305 = getelementptr inbounds %class.SkDraw, %class.SkDraw* %11, i64 0, i32 1, i32 2, i32 0, i32 0, i32 0
  %306 = load %class.SkColorSpace*, %class.SkColorSpace** %305, align 8
  store %class.SkColorSpace* %299, %class.SkColorSpace** %305, align 8
  %307 = icmp eq %class.SkColorSpace* %306, null
  br i1 %307, label %314, label %308

308:                                              ; preds = %304
  %309 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %306, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %310 = atomicrmw add i32* %309, i32 -1 acq_rel
  %311 = icmp eq i32 %310, 1
  br i1 %311, label %312, label %314

312:                                              ; preds = %308
  %313 = bitcast %class.SkColorSpace* %306 to i8*
  call void @_ZdlPv(i8* %313) #20
  br label %314

314:                                              ; preds = %312, %308, %304
  %315 = getelementptr inbounds %class.SkDraw, %class.SkDraw* %11, i64 0, i32 1, i32 2, i32 0, i32 1
  %316 = getelementptr inbounds %class.SkAutoPixmapStorage, %class.SkAutoPixmapStorage* %10, i64 0, i32 0, i32 2, i32 0, i32 1
  %317 = bitcast i32* %316 to <2 x i64>*
  %318 = load <2 x i64>, <2 x i64>* %317, align 8
  %319 = bitcast i32* %315 to <2 x i64>*
  store <2 x i64> %318, <2 x i64>* %319, align 8
  %320 = getelementptr inbounds %class.SkDraw, %class.SkDraw* %11, i64 0, i32 3
  store %class.SkRasterClip* %7, %class.SkRasterClip** %320, align 8
  %321 = getelementptr inbounds %class.SkSimpleMatrixProvider, %class.SkSimpleMatrixProvider* %12, i64 0, i32 0
  %322 = getelementptr inbounds %class.SkDraw, %class.SkDraw* %11, i64 0, i32 2
  store %class.SkMatrixProvider* %321, %class.SkMatrixProvider** %322, align 8
  call void @_ZNK6SkDraw8drawPathERK6SkPathRK7SkPaintPK8SkMatrixbbP9SkBlitter(%class.SkDraw* nonnull %11, %class.SkPath* nonnull dereferenceable(16) %207, %class.SkPaint* nonnull dereferenceable(72) %3, %class.SkMatrix* null, i1 zeroext false, i1 zeroext false, %class.SkBlitter* null) #19
  %323 = load i8, i8* %100, align 4
  switch i8 %323, label %568 [
    i8 0, label %324
    i8 1, label %495
    i8 4, label %567
  ]

324:                                              ; preds = %314
  %325 = load i64, i64* %244, align 8
  %326 = load i32, i32* %98, align 4
  %327 = load i32, i32* %96, align 4
  %328 = sub i32 %326, %327
  %329 = load i32, i32* %97, align 8
  %330 = load i32, i32* %95, align 8
  %331 = sub i32 %329, %330
  %332 = ashr i32 %331, 3
  %333 = and i32 %331, 7
  %334 = sext i32 %331 to i64
  %335 = sub i64 %325, %334
  %336 = icmp sgt i32 %328, 0
  br i1 %336, label %337, label %568

337:                                              ; preds = %324
  %338 = load i8*, i8** %241, align 8
  %339 = load i32, i32* %99, align 8
  %340 = add nsw i32 %331, 7
  %341 = and i32 %340, -8
  %342 = sdiv i32 %341, 8
  %343 = sub i32 %339, %342
  %344 = load i8*, i8** %94, align 8
  %345 = icmp sgt i32 %331, 7
  %346 = icmp eq i32 %333, 0
  %347 = sext i32 %343 to i64
  %348 = add nsw i32 %333, -1
  %349 = zext i32 %348 to i64
  %350 = add nuw nsw i64 %349, 1
  %351 = icmp sgt i32 %332, 1
  %352 = select i1 %351, i32 %332, i32 1
  %353 = add nsw i32 %352, -1
  %354 = zext i32 %353 to i64
  %355 = add nuw nsw i64 %354, 1
  %356 = icmp sgt i32 %332, 1
  %357 = select i1 %356, i32 %332, i32 1
  %358 = add nsw i32 %357, -1
  %359 = zext i32 %358 to i64
  %360 = add nuw nsw i64 %359, 1
  %361 = shl nuw nsw i64 %359, 3
  %362 = add nuw nsw i64 %361, 8
  %363 = icmp ult i64 %355, 16
  %364 = and i64 %355, 8589934576
  %365 = trunc i64 %364 to i32
  %366 = shl nuw nsw i64 %364, 3
  %367 = icmp eq i64 %355, %364
  %368 = icmp eq i32 %333, 1
  %369 = icmp eq i32 %333, 2
  %370 = icmp eq i32 %333, 3
  %371 = icmp eq i32 %333, 4
  %372 = icmp eq i32 %333, 5
  %373 = icmp eq i32 %333, 6
  br label %374

374:                                              ; preds = %488, %337
  %375 = phi i32 [ 0, %337 ], [ %493, %488 ]
  %376 = phi i8* [ %344, %337 ], [ %492, %488 ]
  %377 = phi i8* [ %338, %337 ], [ %491, %488 ]
  br i1 %345, label %378, label %433

378:                                              ; preds = %374
  br i1 %363, label %379, label %383

379:                                              ; preds = %432, %383, %378
  %380 = phi i32 [ 0, %383 ], [ 0, %378 ], [ %365, %432 ]
  %381 = phi i8* [ %376, %383 ], [ %376, %378 ], [ %390, %432 ]
  %382 = phi i8* [ %377, %383 ], [ %377, %378 ], [ %391, %432 ]
  br label %436

383:                                              ; preds = %378
  %384 = getelementptr i8, i8* %376, i64 %360
  %385 = getelementptr i8, i8* %377, i64 %362
  %386 = icmp ult i8* %376, %385
  %387 = icmp ult i8* %377, %384
  %388 = and i1 %386, %387
  br i1 %388, label %379, label %389

389:                                              ; preds = %383
  %390 = getelementptr i8, i8* %376, i64 %364
  %391 = getelementptr i8, i8* %377, i64 %366
  br label %392

392:                                              ; preds = %392, %389
  %393 = phi i64 [ 0, %389 ], [ %430, %392 ]
  %394 = getelementptr i8, i8* %376, i64 %393
  %395 = shl i64 %393, 3
  %396 = getelementptr i8, i8* %377, i64 %395
  %397 = bitcast i8* %396 to <128 x i8>*
  %398 = load <128 x i8>, <128 x i8>* %397, align 1
  %399 = shufflevector <128 x i8> %398, <128 x i8> undef, <16 x i32> <i32 0, i32 8, i32 16, i32 24, i32 32, i32 40, i32 48, i32 56, i32 64, i32 72, i32 80, i32 88, i32 96, i32 104, i32 112, i32 120>
  %400 = shufflevector <128 x i8> %398, <128 x i8> undef, <16 x i32> <i32 1, i32 9, i32 17, i32 25, i32 33, i32 41, i32 49, i32 57, i32 65, i32 73, i32 81, i32 89, i32 97, i32 105, i32 113, i32 121>
  %401 = shufflevector <128 x i8> %398, <128 x i8> undef, <16 x i32> <i32 2, i32 10, i32 18, i32 26, i32 34, i32 42, i32 50, i32 58, i32 66, i32 74, i32 82, i32 90, i32 98, i32 106, i32 114, i32 122>
  %402 = shufflevector <128 x i8> %398, <128 x i8> undef, <16 x i32> <i32 3, i32 11, i32 19, i32 27, i32 35, i32 43, i32 51, i32 59, i32 67, i32 75, i32 83, i32 91, i32 99, i32 107, i32 115, i32 123>
  %403 = shufflevector <128 x i8> %398, <128 x i8> undef, <16 x i32> <i32 4, i32 12, i32 20, i32 28, i32 36, i32 44, i32 52, i32 60, i32 68, i32 76, i32 84, i32 92, i32 100, i32 108, i32 116, i32 124>
  %404 = shufflevector <128 x i8> %398, <128 x i8> undef, <16 x i32> <i32 5, i32 13, i32 21, i32 29, i32 37, i32 45, i32 53, i32 61, i32 69, i32 77, i32 85, i32 93, i32 101, i32 109, i32 117, i32 125>
  %405 = shufflevector <128 x i8> %398, <128 x i8> undef, <16 x i32> <i32 6, i32 14, i32 22, i32 30, i32 38, i32 46, i32 54, i32 62, i32 70, i32 78, i32 86, i32 94, i32 102, i32 110, i32 118, i32 126>
  %406 = shufflevector <128 x i8> %398, <128 x i8> undef, <16 x i32> <i32 7, i32 15, i32 23, i32 31, i32 39, i32 47, i32 55, i32 63, i32 71, i32 79, i32 87, i32 95, i32 103, i32 111, i32 119, i32 127>
  %407 = lshr <16 x i8> %399, <i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7>
  %408 = shl nuw nsw <16 x i8> %407, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %409 = lshr <16 x i8> %400, <i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7>
  %410 = or <16 x i8> %408, %409
  %411 = shl nuw nsw <16 x i8> %410, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %412 = lshr <16 x i8> %401, <i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7>
  %413 = or <16 x i8> %411, %412
  %414 = shl nuw nsw <16 x i8> %413, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %415 = lshr <16 x i8> %402, <i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7>
  %416 = or <16 x i8> %414, %415
  %417 = shl <16 x i8> %416, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %418 = lshr <16 x i8> %403, <i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7>
  %419 = or <16 x i8> %417, %418
  %420 = shl <16 x i8> %419, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %421 = lshr <16 x i8> %404, <i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7>
  %422 = or <16 x i8> %420, %421
  %423 = shl <16 x i8> %422, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %424 = lshr <16 x i8> %405, <i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7>
  %425 = or <16 x i8> %423, %424
  %426 = shl <16 x i8> %425, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %427 = lshr <16 x i8> %406, <i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7>
  %428 = or <16 x i8> %426, %427
  %429 = bitcast i8* %394 to <16 x i8>*
  store <16 x i8> %428, <16 x i8>* %429, align 1, !alias.scope !21, !noalias !24
  %430 = add i64 %393, 16
  %431 = icmp eq i64 %430, %364
  br i1 %431, label %432, label %392, !llvm.loop !26

432:                                              ; preds = %392
  br i1 %367, label %433, label %379

433:                                              ; preds = %436, %432, %374
  %434 = phi i8* [ %377, %374 ], [ %391, %432 ], [ %478, %436 ]
  %435 = phi i8* [ %376, %374 ], [ %390, %432 ], [ %477, %436 ]
  br i1 %346, label %488, label %485

436:                                              ; preds = %379, %436
  %437 = phi i32 [ %479, %436 ], [ %380, %379 ]
  %438 = phi i8* [ %477, %436 ], [ %381, %379 ]
  %439 = phi i8* [ %478, %436 ], [ %382, %379 ]
  %440 = load i8, i8* %439, align 1
  %441 = lshr i8 %440, 7
  %442 = shl nuw nsw i8 %441, 1
  %443 = getelementptr inbounds i8, i8* %439, i64 1
  %444 = load i8, i8* %443, align 1
  %445 = lshr i8 %444, 7
  %446 = or i8 %442, %445
  %447 = shl nuw nsw i8 %446, 1
  %448 = getelementptr inbounds i8, i8* %439, i64 2
  %449 = load i8, i8* %448, align 1
  %450 = lshr i8 %449, 7
  %451 = or i8 %447, %450
  %452 = shl nuw nsw i8 %451, 1
  %453 = getelementptr inbounds i8, i8* %439, i64 3
  %454 = load i8, i8* %453, align 1
  %455 = lshr i8 %454, 7
  %456 = or i8 %452, %455
  %457 = shl i8 %456, 1
  %458 = getelementptr inbounds i8, i8* %439, i64 4
  %459 = load i8, i8* %458, align 1
  %460 = lshr i8 %459, 7
  %461 = or i8 %457, %460
  %462 = shl i8 %461, 1
  %463 = getelementptr inbounds i8, i8* %439, i64 5
  %464 = load i8, i8* %463, align 1
  %465 = lshr i8 %464, 7
  %466 = or i8 %462, %465
  %467 = shl i8 %466, 1
  %468 = getelementptr inbounds i8, i8* %439, i64 6
  %469 = load i8, i8* %468, align 1
  %470 = lshr i8 %469, 7
  %471 = or i8 %467, %470
  %472 = shl i8 %471, 1
  %473 = getelementptr inbounds i8, i8* %439, i64 7
  %474 = load i8, i8* %473, align 1
  %475 = lshr i8 %474, 7
  %476 = or i8 %472, %475
  %477 = getelementptr inbounds i8, i8* %438, i64 1
  store i8 %476, i8* %438, align 1
  %478 = getelementptr inbounds i8, i8* %439, i64 8
  %479 = add nuw nsw i32 %437, 1
  %480 = icmp slt i32 %479, %332
  br i1 %480, label %436, label %433, !llvm.loop !28

481:                                              ; preds = %920, %914, %908, %902, %896, %890, %485
  %482 = phi i8 [ %487, %485 ], [ %895, %890 ], [ %901, %896 ], [ %907, %902 ], [ %913, %908 ], [ %919, %914 ], [ %925, %920 ]
  %483 = getelementptr i8, i8* %434, i64 %350
  %484 = getelementptr inbounds i8, i8* %435, i64 1
  store i8 %482, i8* %435, align 1
  br label %488

485:                                              ; preds = %433
  %486 = load i8, i8* %434, align 1
  %487 = and i8 %486, -128
  br i1 %368, label %481, label %890

488:                                              ; preds = %481, %433
  %489 = phi i8* [ %483, %481 ], [ %434, %433 ]
  %490 = phi i8* [ %484, %481 ], [ %435, %433 ]
  %491 = getelementptr inbounds i8, i8* %489, i64 %335
  %492 = getelementptr inbounds i8, i8* %490, i64 %347
  %493 = add nuw nsw i32 %375, 1
  %494 = icmp eq i32 %493, %328
  br i1 %494, label %568, label %374

495:                                              ; preds = %314
  br i1 %206, label %496, label %497

496:                                              ; preds = %495
  call fastcc void @_ZL13pack4xHToMaskRK8SkPixmapRK6SkMaskRK15SkTMaskPreBlendILi3ELi3ELi3EEbb(%class.SkPixmap* nonnull dereferenceable(40) %240, %struct.SkMask* nonnull dereferenceable(32) %16, %class.SkTMaskPreBlend* dereferenceable(32) %126, i1 zeroext %114, i1 zeroext %116) #19
  br label %568

497:                                              ; preds = %495
  %498 = getelementptr inbounds %class.SkScalerContext, %class.SkScalerContext* %0, i64 0, i32 6, i32 2
  %499 = load i8*, i8** %498, align 8
  %500 = icmp eq i8* %499, null
  br i1 %500, label %568, label %501

501:                                              ; preds = %497
  %502 = load i32, i32* %98, align 4
  %503 = load i32, i32* %96, align 4
  %504 = sub i32 %502, %503
  %505 = icmp sgt i32 %504, 0
  br i1 %505, label %506, label %568

506:                                              ; preds = %501
  %507 = load i32, i32* %99, align 8
  %508 = load i8*, i8** %94, align 8
  %509 = zext i32 %507 to i64
  br label %510

510:                                              ; preds = %537, %506
  %511 = phi i32 [ %504, %506 ], [ %513, %537 ]
  %512 = phi i8* [ %508, %506 ], [ %538, %537 ]
  %513 = add nsw i32 %511, -1
  %514 = load i32, i32* %97, align 8
  %515 = load i32, i32* %95, align 8
  %516 = sub i32 %514, %515
  %517 = icmp sgt i32 %516, 0
  br i1 %517, label %518, label %537

518:                                              ; preds = %510
  %519 = sext i32 %516 to i64
  %520 = add nsw i64 %519, -1
  %521 = and i64 %519, 3
  %522 = icmp eq i64 %521, 0
  br i1 %522, label %534, label %523

523:                                              ; preds = %518, %523
  %524 = phi i64 [ %526, %523 ], [ %519, %518 ]
  %525 = phi i64 [ %532, %523 ], [ %521, %518 ]
  %526 = add nsw i64 %524, -1
  %527 = getelementptr inbounds i8, i8* %512, i64 %526
  %528 = load i8, i8* %527, align 1
  %529 = zext i8 %528 to i64
  %530 = getelementptr inbounds i8, i8* %499, i64 %529
  %531 = load i8, i8* %530, align 1
  store i8 %531, i8* %527, align 1
  %532 = add i64 %525, -1
  %533 = icmp eq i64 %532, 0
  br i1 %533, label %534, label %523, !llvm.loop !29

534:                                              ; preds = %523, %518
  %535 = phi i64 [ %519, %518 ], [ %526, %523 ]
  %536 = icmp ult i64 %520, 3
  br i1 %536, label %537, label %540

537:                                              ; preds = %534, %540, %510
  %538 = getelementptr inbounds i8, i8* %512, i64 %509
  %539 = icmp sgt i32 %513, 0
  br i1 %539, label %510, label %568

540:                                              ; preds = %534, %540
  %541 = phi i64 [ %560, %540 ], [ %535, %534 ]
  %542 = add nsw i64 %541, -1
  %543 = getelementptr inbounds i8, i8* %512, i64 %542
  %544 = load i8, i8* %543, align 1
  %545 = zext i8 %544 to i64
  %546 = getelementptr inbounds i8, i8* %499, i64 %545
  %547 = load i8, i8* %546, align 1
  store i8 %547, i8* %543, align 1
  %548 = add nsw i64 %541, -2
  %549 = getelementptr inbounds i8, i8* %512, i64 %548
  %550 = load i8, i8* %549, align 1
  %551 = zext i8 %550 to i64
  %552 = getelementptr inbounds i8, i8* %499, i64 %551
  %553 = load i8, i8* %552, align 1
  store i8 %553, i8* %549, align 1
  %554 = add nsw i64 %541, -3
  %555 = getelementptr inbounds i8, i8* %512, i64 %554
  %556 = load i8, i8* %555, align 1
  %557 = zext i8 %556 to i64
  %558 = getelementptr inbounds i8, i8* %499, i64 %557
  %559 = load i8, i8* %558, align 1
  store i8 %559, i8* %555, align 1
  %560 = add nsw i64 %541, -4
  %561 = getelementptr inbounds i8, i8* %512, i64 %560
  %562 = load i8, i8* %561, align 1
  %563 = zext i8 %562 to i64
  %564 = getelementptr inbounds i8, i8* %499, i64 %563
  %565 = load i8, i8* %564, align 1
  store i8 %565, i8* %561, align 1
  %566 = icmp sgt i64 %560, 0
  br i1 %566, label %540, label %537

567:                                              ; preds = %314
  call fastcc void @_ZL13pack4xHToMaskRK8SkPixmapRK6SkMaskRK15SkTMaskPreBlendILi3ELi3ELi3EEbb(%class.SkPixmap* nonnull dereferenceable(40) %240, %struct.SkMask* nonnull dereferenceable(32) %16, %class.SkTMaskPreBlend* dereferenceable(32) %126, i1 zeroext %114, i1 zeroext %116) #19
  br label %568

568:                                              ; preds = %537, %488, %567, %501, %497, %496, %324, %314
  call void @llvm.lifetime.end.p0i8(i64 112, i8* nonnull %251) #19
  %569 = getelementptr inbounds %class.SkDraw, %class.SkDraw* %11, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTV6SkDraw, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %569, align 8
  %570 = load %class.SkColorSpace*, %class.SkColorSpace** %305, align 8
  %571 = icmp eq %class.SkColorSpace* %570, null
  br i1 %571, label %578, label %572

572:                                              ; preds = %568
  %573 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %570, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %574 = atomicrmw add i32* %573, i32 -1 acq_rel
  %575 = icmp eq i32 %574, 1
  br i1 %575, label %576, label %578

576:                                              ; preds = %572
  %577 = bitcast %class.SkColorSpace* %570 to i8*
  call void @_ZdlPv(i8* %577) #20
  br label %578

578:                                              ; preds = %576, %572, %568
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %250) #19
  br label %579

579:                                              ; preds = %578, %231, %227
  call void @_ZN19SkAutoPixmapStorageD1Ev(%class.SkAutoPixmapStorage* nonnull %10) #19
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %224) #19
  %580 = load %class.SkColorSpace*, %class.SkColorSpace** %220, align 16
  %581 = icmp eq %class.SkColorSpace* %580, null
  br i1 %581, label %588, label %582

582:                                              ; preds = %579
  %583 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %580, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %584 = atomicrmw add i32* %583, i32 -1 acq_rel
  %585 = icmp eq i32 %584, 1
  br i1 %585, label %586, label %588

586:                                              ; preds = %582
  %587 = bitcast %class.SkColorSpace* %580 to i8*
  call void @_ZdlPv(i8* %587) #20
  br label %588

588:                                              ; preds = %579, %582, %586
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %219) #19
  call void @_ZN12SkRasterClipD1Ev(%class.SkRasterClip* nonnull %7) #19
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %210) #19
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %136) #19
  call void @_ZN6SkPathD1Ev(%class.SkPath* nonnull %4) #19
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %129) #19
  call void @_ZN7SkPaintD1Ev(%class.SkPaint* nonnull %3) #19
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %128) #19
  br label %589

589:                                              ; preds = %588, %105
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %93) #19
  call void @_ZN6SkPathD1Ev(%class.SkPath* nonnull %15) #19
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %91) #19
  br label %590

590:                                              ; preds = %589, %85
  %591 = load %class.SkMaskFilter*, %class.SkMaskFilter** %29, align 8
  %592 = icmp eq %class.SkMaskFilter* %591, null
  br i1 %592, label %884, label %593

593:                                              ; preds = %590
  %594 = bitcast %class.SkMaskFilter* %591 to %class.SkMaskFilterBase*
  %595 = bitcast %struct.SkMask* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %595) #19
  %596 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %17, i64 0, i32 0
  %597 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %17, i64 0, i32 3
  %598 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %17, i64 0, i32 1
  %599 = bitcast %struct.SkIRect* %598 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %599, i8 -86, i64 24, i1 false)
  store i8* null, i8** %596, align 8
  %600 = bitcast %class.SkMatrix* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %600) #19
  %601 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %18, i64 0, i32 1
  %602 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %18, i64 0, i32 0, i64 1
  %603 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %18, i64 0, i32 0, i64 2
  %604 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %18, i64 0, i32 0, i64 3
  %605 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %18, i64 0, i32 0, i64 4
  %606 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %18, i64 0, i32 0, i64 5
  %607 = getelementptr inbounds %class.SkScalerContext, %class.SkScalerContext* %0, i64 0, i32 1, i32 4, i64 0, i64 0
  %608 = bitcast float* %607 to i32*
  %609 = load i32, i32* %608, align 4
  %610 = getelementptr inbounds %class.SkScalerContext, %class.SkScalerContext* %0, i64 0, i32 1, i32 4, i64 0, i64 1
  %611 = bitcast float* %610 to i32*
  %612 = load i32, i32* %611, align 4
  %613 = getelementptr inbounds %class.SkScalerContext, %class.SkScalerContext* %0, i64 0, i32 1, i32 4, i64 1, i64 0
  %614 = bitcast float* %613 to i32*
  %615 = load i32, i32* %614, align 4
  %616 = getelementptr inbounds %class.SkScalerContext, %class.SkScalerContext* %0, i64 0, i32 1, i32 4, i64 1, i64 1
  %617 = bitcast float* %616 to i32*
  %618 = load i32, i32* %617, align 4
  %619 = bitcast %class.SkMatrix* %18 to i32*
  store i32 %609, i32* %619, align 4
  %620 = bitcast float* %602 to i32*
  store i32 %612, i32* %620, align 4
  store float 0.000000e+00, float* %603, align 4
  %621 = bitcast float* %604 to i32*
  store i32 %615, i32* %621, align 4
  %622 = bitcast float* %605 to i32*
  store i32 %618, i32* %622, align 4
  %623 = bitcast float* %606 to <4 x float>*
  store <4 x float> <float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00>, <4 x float>* %623, align 4
  store i32 128, i32* %601, align 4
  %624 = bitcast %struct.SkMask* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %624) #19
  call void @_ZNK7SkGlyph4maskEv(%struct.SkMask* nonnull sret %19, %class.SkGlyph* %81) #19
  %625 = bitcast %class.SkMaskFilter* %591 to i1 (%class.SkMaskFilterBase*, %struct.SkMask*, %struct.SkMask*, %class.SkMatrix*, %struct.SkIPoint*)***
  %626 = load i1 (%class.SkMaskFilterBase*, %struct.SkMask*, %struct.SkMask*, %class.SkMatrix*, %struct.SkIPoint*)**, i1 (%class.SkMaskFilterBase*, %struct.SkMask*, %struct.SkMask*, %class.SkMatrix*, %struct.SkIPoint*)*** %625, align 8
  %627 = getelementptr inbounds i1 (%class.SkMaskFilterBase*, %struct.SkMask*, %struct.SkMask*, %class.SkMatrix*, %struct.SkIPoint*)*, i1 (%class.SkMaskFilterBase*, %struct.SkMask*, %struct.SkMask*, %class.SkMatrix*, %struct.SkIPoint*)** %626, i64 8
  %628 = load i1 (%class.SkMaskFilterBase*, %struct.SkMask*, %struct.SkMask*, %class.SkMatrix*, %struct.SkIPoint*)*, i1 (%class.SkMaskFilterBase*, %struct.SkMask*, %struct.SkMask*, %class.SkMatrix*, %struct.SkIPoint*)** %627, align 8
  %629 = call zeroext i1 %628(%class.SkMaskFilterBase* nonnull %594, %struct.SkMask* nonnull %17, %struct.SkMask* nonnull dereferenceable(32) %19, %class.SkMatrix* nonnull dereferenceable(40) %18, %struct.SkIPoint* null) #19
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %624) #19
  br i1 %629, label %630, label %639

630:                                              ; preds = %593
  %631 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %17, i64 0, i32 1, i32 1
  %632 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %17, i64 0, i32 1, i32 0
  %633 = load i8*, i8** %596, align 8
  %634 = load i32, i32* %632, align 8
  %635 = bitcast i32* %631 to <4 x i32>*
  %636 = load <4 x i32>, <4 x i32>* %635, align 4
  %637 = shufflevector <4 x i32> %636, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %638 = load i8, i8* %597, align 4
  br label %746

639:                                              ; preds = %593
  %640 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %81, i64 0, i32 4
  %641 = load i8*, i8** %640, align 8
  %642 = inttoptr i64 %79 to i8*
  %643 = icmp eq i8* %641, %642
  br i1 %643, label %644, label %656

644:                                              ; preds = %639
  %645 = bitcast %struct.SkMask* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %645) #19
  call void @_ZNK7SkGlyph4maskEv(%struct.SkMask* nonnull sret %20, %class.SkGlyph* %81) #19
  %646 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %20, i64 0, i32 0
  %647 = load i8*, i8** %646, align 8
  %648 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %20, i64 0, i32 1, i32 0
  %649 = load i32, i32* %648, align 8
  %650 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %20, i64 0, i32 1, i32 1
  %651 = bitcast i32* %650 to <4 x i32>*
  %652 = load <4 x i32>, <4 x i32>* %651, align 4
  %653 = shufflevector <4 x i32> %652, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %654 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %20, i64 0, i32 3
  %655 = load i8, i8* %654, align 4
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %645) #19
  br label %746

656:                                              ; preds = %639
  %657 = bitcast { i64, i64 }* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %657) #19
  %658 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %1, i64 0, i32 3
  %659 = load i16, i16* %658, align 2
  %660 = sext i16 %659 to i64
  %661 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %1, i64 0, i32 2
  %662 = load i16, i16* %661, align 4
  %663 = sext i16 %662 to i64
  %664 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %1, i64 0, i32 0
  %665 = load i16, i16* %664, align 8
  %666 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %1, i64 0, i32 1
  %667 = load i16, i16* %666, align 2
  %668 = zext i16 %665 to i64
  %669 = add nsw i64 %668, %660
  %670 = icmp slt i64 %669, 2147483647
  %671 = select i1 %670, i64 %669, i64 2147483647
  %672 = icmp sgt i64 %671, -2147483647
  %673 = select i1 %672, i64 %671, i64 -2147483647
  %674 = zext i16 %667 to i64
  %675 = add nsw i64 %674, %663
  %676 = icmp slt i64 %675, 2147483647
  %677 = select i1 %676, i64 %675, i64 2147483647
  %678 = icmp sgt i64 %677, -2147483647
  %679 = select i1 %678, i64 %677, i64 -2147483647
  %680 = shl nsw i64 %663, 32
  %681 = and i64 %660, 4294967295
  %682 = or i64 %680, %681
  %683 = shl nsw i64 %679, 32
  %684 = and i64 %673, 4294967295
  %685 = or i64 %683, %684
  %686 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %21, i64 0, i32 0
  store i64 %682, i64* %686, align 8
  %687 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %21, i64 0, i32 1
  store i64 %685, i64* %687, align 8
  %688 = bitcast { i64, i64 }* %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %688) #19
  %689 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %81, i64 0, i32 3
  %690 = load i16, i16* %689, align 2
  %691 = sext i16 %690 to i64
  %692 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %81, i64 0, i32 2
  %693 = load i16, i16* %692, align 4
  %694 = sext i16 %693 to i64
  %695 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %81, i64 0, i32 0
  %696 = load i16, i16* %695, align 8
  %697 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %81, i64 0, i32 1
  %698 = load i16, i16* %697, align 2
  %699 = zext i16 %696 to i64
  %700 = add nsw i64 %699, %691
  %701 = icmp slt i64 %700, 2147483647
  %702 = select i1 %701, i64 %700, i64 2147483647
  %703 = icmp sgt i64 %702, -2147483647
  %704 = select i1 %703, i64 %702, i64 -2147483647
  %705 = zext i16 %698 to i64
  %706 = add nsw i64 %705, %694
  %707 = icmp slt i64 %706, 2147483647
  %708 = select i1 %707, i64 %706, i64 2147483647
  %709 = icmp sgt i64 %708, -2147483647
  %710 = select i1 %709, i64 %708, i64 -2147483647
  %711 = shl nsw i64 %694, 32
  %712 = and i64 %691, 4294967295
  %713 = or i64 %711, %712
  %714 = shl nsw i64 %710, 32
  %715 = and i64 %704, 4294967295
  %716 = or i64 %714, %715
  %717 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %22, i64 0, i32 0
  store i64 %713, i64* %717, align 8
  %718 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %22, i64 0, i32 1
  store i64 %716, i64* %718, align 8
  %719 = call i32 @bcmp(i8* nonnull %657, i8* nonnull %688, i64 16) #19
  %720 = icmp eq i32 %719, 0
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %688) #19
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %657) #19
  br i1 %720, label %882, label %721

721:                                              ; preds = %656
  %722 = bitcast %struct.SkMask* %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %722) #19
  call void @_ZNK7SkGlyph4maskEv(%struct.SkMask* nonnull sret %23, %class.SkGlyph* %81) #19
  %723 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %23, i64 0, i32 1, i32 0
  %724 = load i32, i32* %723, align 8
  %725 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %23, i64 0, i32 1, i32 1
  %726 = bitcast i32* %725 to <4 x i32>*
  %727 = load <4 x i32>, <4 x i32>* %726, align 4
  %728 = shufflevector <4 x i32> %727, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %729 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %23, i64 0, i32 3
  %730 = load i8, i8* %729, align 4
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %722) #19
  %731 = call i64 @_ZNK7SkGlyph9imageSizeEv(%class.SkGlyph* %81) #19
  %732 = icmp eq i64 %80, %731
  br i1 %732, label %742, label %733

733:                                              ; preds = %721
  %734 = icmp eq i64 %731, 0
  br i1 %734, label %738, label %735

735:                                              ; preds = %733
  %736 = call i8* @_Z15sk_malloc_flagsmj(i64 %731, i32 2) #19
  %737 = ptrtoint i8* %736 to i64
  br label %738

738:                                              ; preds = %735, %733
  %739 = phi i64 [ %737, %735 ], [ 0, %733 ]
  %740 = icmp eq i64 %79, 0
  br i1 %740, label %742, label %741

741:                                              ; preds = %738
  call void @_Z7sk_freePv(i8* nonnull %642) #19
  br label %742

742:                                              ; preds = %738, %741, %721
  %743 = phi i64 [ %79, %721 ], [ %739, %741 ], [ %739, %738 ]
  %744 = inttoptr i64 %743 to i8*
  %745 = load i8*, i8** %640, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %744, i8* align 1 %745, i64 %731, i1 false)
  br label %746

746:                                              ; preds = %644, %742, %630
  %747 = phi i64 [ %79, %630 ], [ %79, %644 ], [ %743, %742 ]
  %748 = phi i8 [ %638, %630 ], [ %655, %644 ], [ %730, %742 ]
  %749 = phi i32 [ %634, %630 ], [ %649, %644 ], [ %724, %742 ]
  %750 = phi i8* [ %633, %630 ], [ %647, %644 ], [ %744, %742 ]
  %751 = phi <4 x i32> [ %637, %630 ], [ %653, %644 ], [ %728, %742 ]
  %752 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %1, i64 0, i32 8
  %753 = load i8, i8* %752, align 8
  %754 = icmp eq i8 %748, %753
  br i1 %754, label %756, label %755

755:                                              ; preds = %746
  call fastcc void @"_ZZN15SkScalerContext8getImageERK7SkGlyphENK3$_0clEv"()
  unreachable

756:                                              ; preds = %746
  %757 = bitcast %struct.SkMask* %24 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %757) #19
  %758 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %24, i64 0, i32 0
  %759 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %24, i64 0, i32 1
  %760 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %759, i64 0, i32 0
  %761 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %24, i64 0, i32 1, i32 1
  %762 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %24, i64 0, i32 1, i32 2
  %763 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %24, i64 0, i32 1, i32 3
  %764 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %24, i64 0, i32 2
  %765 = bitcast %struct.SkMask* %24 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %765, i8 -86, i64 32, i1 false)
  call void @_ZNK7SkGlyph4maskEv(%struct.SkMask* nonnull sret %24, %class.SkGlyph* %1) #19
  %766 = bitcast %struct.SkIRect* %25 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %766) #19
  %767 = bitcast %struct.SkIRect* %759 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %766, i8* align 8 %767, i64 16, i1 false)
  %768 = load i32, i32* %761, align 4
  %769 = extractelement <4 x i32> %751, i32 3
  %770 = icmp sgt i32 %768, %769
  br i1 %770, label %771, label %777

771:                                              ; preds = %756
  %772 = sub nsw i32 %768, %769
  %773 = extractelement <4 x i32> %751, i32 0
  %774 = mul i32 %772, %773
  %775 = zext i32 %774 to i64
  %776 = getelementptr inbounds i8, i8* %750, i64 %775
  br label %786

777:                                              ; preds = %756
  %778 = icmp sgt i32 %769, %768
  br i1 %778, label %779, label %786

779:                                              ; preds = %777
  %780 = sub nsw i32 %769, %768
  %781 = load i32, i32* %764, align 8
  %782 = mul i32 %781, %780
  %783 = load i8*, i8** %758, align 8
  %784 = zext i32 %782 to i64
  %785 = getelementptr inbounds i8, i8* %783, i64 %784
  store i8* %785, i8** %758, align 8
  store i32 %769, i32* %761, align 4
  br label %786

786:                                              ; preds = %771, %779, %777
  %787 = phi i8* [ %776, %771 ], [ %750, %779 ], [ %750, %777 ]
  %788 = phi i32 [ %768, %771 ], [ %769, %779 ], [ %769, %777 ]
  %789 = load i32, i32* %760, align 8
  %790 = icmp sgt i32 %789, %749
  br i1 %790, label %791, label %795

791:                                              ; preds = %786
  %792 = sub nsw i32 %789, %749
  %793 = sext i32 %792 to i64
  %794 = getelementptr inbounds i8, i8* %787, i64 %793
  br label %802

795:                                              ; preds = %786
  %796 = icmp sgt i32 %749, %789
  br i1 %796, label %797, label %802

797:                                              ; preds = %795
  %798 = sub nsw i32 %749, %789
  %799 = load i8*, i8** %758, align 8
  %800 = sext i32 %798 to i64
  %801 = getelementptr inbounds i8, i8* %799, i64 %800
  store i8* %801, i8** %758, align 8
  store i32 %749, i32* %760, align 8
  br label %802

802:                                              ; preds = %791, %797, %795
  %803 = phi i8* [ %794, %791 ], [ %787, %797 ], [ %787, %795 ]
  %804 = phi i32 [ %789, %791 ], [ %749, %797 ], [ %749, %795 ]
  %805 = load i32, i32* %763, align 4
  %806 = extractelement <4 x i32> %751, i32 1
  %807 = icmp slt i32 %806, %805
  br i1 %807, label %808, label %809

808:                                              ; preds = %802
  store i32 %806, i32* %763, align 4
  br label %809

809:                                              ; preds = %808, %802
  %810 = phi i32 [ %806, %808 ], [ %805, %802 ]
  %811 = icmp slt i32 %810, %806
  %812 = select i1 %811, i32 %810, i32 %806
  %813 = load i32, i32* %762, align 8
  %814 = extractelement <4 x i32> %751, i32 2
  %815 = icmp slt i32 %814, %813
  br i1 %815, label %816, label %817

816:                                              ; preds = %809
  store i32 %814, i32* %762, align 8
  br label %817

817:                                              ; preds = %816, %809
  %818 = phi i32 [ %814, %816 ], [ %813, %809 ]
  %819 = icmp slt i32 %818, %814
  %820 = select i1 %819, i32 %818, i32 %814
  %821 = sub i32 %820, %804
  %822 = sub i32 %812, %788
  %823 = load i32, i32* %764, align 8
  %824 = load i8*, i8** %758, align 8
  %825 = load i8, i8* %597, align 4
  %826 = icmp eq i8 %825, 2
  %827 = mul nsw i32 %822, 3
  %828 = select i1 %826, i32 %827, i32 %822
  %829 = call i32 @bcmp(i8* %767, i8* nonnull %766, i64 16) #19
  %830 = icmp eq i32 %829, 0
  br i1 %830, label %841, label %831

831:                                              ; preds = %817
  %832 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %1, i64 0, i32 4
  %833 = load i8*, i8** %832, align 8
  %834 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %1, i64 0, i32 1
  %835 = load i16, i16* %834, align 2
  %836 = zext i16 %835 to i64
  %837 = call i64 @_ZNK7SkGlyph8rowBytesEv(%class.SkGlyph* %1) #19
  %838 = mul i64 %837, %836
  %839 = icmp eq i64 %838, 0
  br i1 %839, label %841, label %840

840:                                              ; preds = %831
  call void @llvm.memset.p0i8.i64(i8* align 1 %833, i8 0, i64 %838, i1 false) #19
  br label %841

841:                                              ; preds = %817, %840, %831
  %842 = icmp sgt i32 %828, 0
  br i1 %842, label %843, label %880

843:                                              ; preds = %841
  %844 = sext i32 %821 to i64
  %845 = extractelement <4 x i32> %751, i32 0
  %846 = sext i32 %845 to i64
  %847 = sext i32 %823 to i64
  %848 = add nsw i32 %828, -1
  %849 = and i32 %828, 3
  %850 = icmp eq i32 %849, 0
  br i1 %850, label %861, label %851

851:                                              ; preds = %843, %851
  %852 = phi i8* [ %858, %851 ], [ %824, %843 ]
  %853 = phi i8* [ %857, %851 ], [ %803, %843 ]
  %854 = phi i32 [ %856, %851 ], [ %828, %843 ]
  %855 = phi i32 [ %859, %851 ], [ %849, %843 ]
  %856 = add nsw i32 %854, -1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %852, i8* align 1 %853, i64 %844, i1 false)
  %857 = getelementptr inbounds i8, i8* %853, i64 %846
  %858 = getelementptr inbounds i8, i8* %852, i64 %847
  %859 = add i32 %855, -1
  %860 = icmp eq i32 %859, 0
  br i1 %860, label %861, label %851, !llvm.loop !31

861:                                              ; preds = %851, %843
  %862 = phi i8* [ %824, %843 ], [ %858, %851 ]
  %863 = phi i8* [ %803, %843 ], [ %857, %851 ]
  %864 = phi i32 [ %828, %843 ], [ %856, %851 ]
  %865 = icmp ult i32 %848, 3
  br i1 %865, label %880, label %866

866:                                              ; preds = %861, %866
  %867 = phi i8* [ %878, %866 ], [ %862, %861 ]
  %868 = phi i8* [ %877, %866 ], [ %863, %861 ]
  %869 = phi i32 [ %876, %866 ], [ %864, %861 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %867, i8* align 1 %868, i64 %844, i1 false)
  %870 = getelementptr inbounds i8, i8* %868, i64 %846
  %871 = getelementptr inbounds i8, i8* %867, i64 %847
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %871, i8* align 1 %870, i64 %844, i1 false)
  %872 = getelementptr inbounds i8, i8* %870, i64 %846
  %873 = getelementptr inbounds i8, i8* %871, i64 %847
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %873, i8* align 1 %872, i64 %844, i1 false)
  %874 = getelementptr inbounds i8, i8* %872, i64 %846
  %875 = getelementptr inbounds i8, i8* %873, i64 %847
  %876 = add nsw i32 %869, -4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %875, i8* align 1 %874, i64 %844, i1 false)
  %877 = getelementptr inbounds i8, i8* %874, i64 %846
  %878 = getelementptr inbounds i8, i8* %875, i64 %847
  %879 = icmp sgt i32 %876, 0
  br i1 %879, label %866, label %880

880:                                              ; preds = %861, %866, %841
  %881 = load i8*, i8** %596, align 8
  call void @_ZN6SkMask9FreeImageEPv(i8* %881) #19
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %766) #19
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %757) #19
  br label %882

882:                                              ; preds = %656, %880
  %883 = phi i64 [ %747, %880 ], [ %79, %656 ]
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %600) #19
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %595) #19
  br label %884

884:                                              ; preds = %882, %590
  %885 = phi i64 [ %79, %590 ], [ %883, %882 ]
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %26) #19
  %886 = icmp eq i64 %885, 0
  br i1 %886, label %889, label %887

887:                                              ; preds = %884
  %888 = inttoptr i64 %885 to i8*
  call void @_Z7sk_freePv(i8* nonnull %888) #19
  br label %889

889:                                              ; preds = %884, %887
  ret void

890:                                              ; preds = %485
  %891 = getelementptr inbounds i8, i8* %434, i64 1
  %892 = load i8, i8* %891, align 1
  %893 = lshr i8 %892, 7
  %894 = shl nuw nsw i8 %893, 6
  %895 = or i8 %894, %487
  br i1 %369, label %481, label %896

896:                                              ; preds = %890
  %897 = getelementptr inbounds i8, i8* %434, i64 2
  %898 = load i8, i8* %897, align 1
  %899 = lshr i8 %898, 7
  %900 = shl nuw nsw i8 %899, 5
  %901 = or i8 %900, %895
  br i1 %370, label %481, label %902

902:                                              ; preds = %896
  %903 = getelementptr inbounds i8, i8* %434, i64 3
  %904 = load i8, i8* %903, align 1
  %905 = lshr i8 %904, 7
  %906 = shl nuw nsw i8 %905, 4
  %907 = or i8 %906, %901
  br i1 %371, label %481, label %908

908:                                              ; preds = %902
  %909 = getelementptr inbounds i8, i8* %434, i64 4
  %910 = load i8, i8* %909, align 1
  %911 = lshr i8 %910, 7
  %912 = shl nuw nsw i8 %911, 3
  %913 = or i8 %912, %907
  br i1 %372, label %481, label %914

914:                                              ; preds = %908
  %915 = getelementptr inbounds i8, i8* %434, i64 5
  %916 = load i8, i8* %915, align 1
  %917 = lshr i8 %916, 7
  %918 = shl nuw nsw i8 %917, 2
  %919 = or i8 %918, %913
  br i1 %373, label %481, label %920

920:                                              ; preds = %914
  %921 = getelementptr inbounds i8, i8* %434, i64 6
  %922 = load i8, i8* %921, align 1
  %923 = lshr i8 %922, 7
  %924 = shl nuw nsw i8 %923, 1
  %925 = or i8 %924, %919
  br label %481
}

declare i64 @_ZNK7SkGlyph9imageSizeEv(%class.SkGlyph*) local_unnamed_addr #1

; Function Attrs: inlinehint noreturn nounwind ssp uwtable
define internal fastcc void @"_ZZN15SkScalerContext8getImageERK7SkGlyphENK3$_0clEv"() unnamed_addr #8 align 2 {
  tail call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str, i64 0, i64 0), i32 624, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.2, i64 0, i64 0)) #21
  unreachable
}

declare i64 @_ZNK7SkGlyph8rowBytesEv(%class.SkGlyph*) local_unnamed_addr #1

declare void @_ZN6SkMask9FreeImageEPv(i8*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN15SkScalerContext7getPathE15SkPackedGlyphIDP6SkPath(%class.SkScalerContext*, i32, %class.SkPath*) local_unnamed_addr #0 align 2 {
  %4 = tail call zeroext i1 @_ZN15SkScalerContext15internalGetPathE15SkPackedGlyphIDP6SkPath(%class.SkScalerContext* %0, i32 %1, %class.SkPath* %2)
  ret i1 %4
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN15SkScalerContext14getFontMetricsEP13SkFontMetrics(%class.SkScalerContext*, %struct.SkFontMetrics*) local_unnamed_addr #0 align 2 {
  %3 = bitcast %class.SkScalerContext* %0 to void (%class.SkScalerContext*, %struct.SkFontMetrics*)***
  %4 = load void (%class.SkScalerContext*, %struct.SkFontMetrics*)**, void (%class.SkScalerContext*, %struct.SkFontMetrics*)*** %3, align 8
  %5 = getelementptr inbounds void (%class.SkScalerContext*, %struct.SkFontMetrics*)*, void (%class.SkScalerContext*, %struct.SkFontMetrics*)** %4, i64 6
  %6 = load void (%class.SkScalerContext*, %struct.SkFontMetrics*)*, void (%class.SkScalerContext*, %struct.SkFontMetrics*)** %5, align 8
  tail call void %6(%class.SkScalerContext* %0, %struct.SkFontMetrics* %1) #19
  ret void
}

declare void @_ZNK6SkPath9transformERK8SkMatrixPS_22SkApplyPerspectiveClip(%class.SkPath*, %class.SkMatrix* dereferenceable(40), %class.SkPath*, i32) local_unnamed_addr #1

declare void @_ZN11SkStrokeRecC1ENS_9InitStyleE(%class.SkStrokeRec*, i32) unnamed_addr #1

declare void @_ZN11SkStrokeRec14setStrokeStyleEfb(%class.SkStrokeRec*, float, i1 zeroext) local_unnamed_addr #1

declare zeroext i1 @_ZNK12SkPathEffect10filterPathEP6SkPathRKS0_P11SkStrokeRecPK6SkRect(%class.SkPathEffect*, %class.SkPath*, %class.SkPath* dereferenceable(16), %class.SkStrokeRec*, %struct.SkRect*) local_unnamed_addr #1

declare void @_ZN6SkPath4swapERS_(%class.SkPath*, %class.SkPath* dereferenceable(16)) local_unnamed_addr #1

declare zeroext i1 @_ZNK11SkStrokeRec11applyToPathEP6SkPathRKS0_(%class.SkStrokeRec*, %class.SkPath*, %class.SkPath* dereferenceable(16)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK18SkScalerContextRec14getLocalMatrixEP8SkMatrix(%struct.SkScalerContextRec* nocapture readonly, %class.SkMatrix* nocapture) local_unnamed_addr #0 align 2 {
  %3 = alloca %class.SkMatrix, align 16
  %4 = bitcast %class.SkMatrix* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %4) #19
  %5 = getelementptr inbounds %struct.SkScalerContextRec, %struct.SkScalerContextRec* %0, i64 0, i32 1
  %6 = load float, float* %5, align 4
  %7 = getelementptr inbounds %struct.SkScalerContextRec, %struct.SkScalerContextRec* %0, i64 0, i32 2
  %8 = load float, float* %7, align 4
  %9 = getelementptr inbounds %struct.SkScalerContextRec, %struct.SkScalerContextRec* %0, i64 0, i32 3
  %10 = load float, float* %9, align 4
  %11 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %3, i64 0, i32 1
  %12 = fmul float %6, %8
  %13 = bitcast %class.SkMatrix* %3 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %13, align 16, !alias.scope !32
  %14 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %3, i64 0, i32 0, i64 4
  %15 = bitcast float* %14 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %15, align 16, !alias.scope !32
  %16 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %3, i64 0, i32 0, i64 8
  store float 1.000000e+00, float* %16, align 16, !alias.scope !32
  store i32 16, i32* %11, align 4, !alias.scope !32
  %17 = call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix8setScaleEff(%class.SkMatrix* nonnull %3, float %12, float %6) #19
  %18 = fcmp une float %10, 0.000000e+00
  br i1 %18, label %19, label %21

19:                                               ; preds = %2
  %20 = call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix8postSkewEff(%class.SkMatrix* nonnull %3, float %10, float 0.000000e+00) #19
  br label %21

21:                                               ; preds = %2, %19
  %22 = bitcast %class.SkMatrix* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %22, i8* nonnull align 16 %4, i64 40, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %4) #19
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK18SkScalerContextRec15getSingleMatrixEP8SkMatrix(%struct.SkScalerContextRec* nocapture readonly, %class.SkMatrix*) local_unnamed_addr #0 align 2 {
  %3 = alloca %class.SkMatrix, align 16
  %4 = alloca %class.SkMatrix, align 4
  %5 = bitcast %class.SkMatrix* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %5) #19
  %6 = getelementptr inbounds %struct.SkScalerContextRec, %struct.SkScalerContextRec* %0, i64 0, i32 1
  %7 = load float, float* %6, align 4
  %8 = getelementptr inbounds %struct.SkScalerContextRec, %struct.SkScalerContextRec* %0, i64 0, i32 2
  %9 = load float, float* %8, align 4
  %10 = getelementptr inbounds %struct.SkScalerContextRec, %struct.SkScalerContextRec* %0, i64 0, i32 3
  %11 = load float, float* %10, align 4
  %12 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %3, i64 0, i32 1
  %13 = fmul float %7, %9
  %14 = bitcast %class.SkMatrix* %3 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %14, align 16, !alias.scope !37
  %15 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %3, i64 0, i32 0, i64 4
  %16 = bitcast float* %15 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %16, align 16, !alias.scope !37
  %17 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %3, i64 0, i32 0, i64 8
  store float 1.000000e+00, float* %17, align 16, !alias.scope !37
  store i32 16, i32* %12, align 4, !alias.scope !37
  %18 = call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix8setScaleEff(%class.SkMatrix* nonnull %3, float %13, float %7) #19
  %19 = fcmp une float %11, 0.000000e+00
  br i1 %19, label %20, label %22

20:                                               ; preds = %2
  %21 = call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix8postSkewEff(%class.SkMatrix* nonnull %3, float %11, float 0.000000e+00) #19
  br label %22

22:                                               ; preds = %2, %20
  %23 = bitcast %class.SkMatrix* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %23, i8* nonnull align 16 %5, i64 40, i1 false) #19
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %5) #19
  %24 = bitcast %class.SkMatrix* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %24) #19
  %25 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %4, i64 0, i32 1
  %26 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %4, i64 0, i32 0, i64 1
  %27 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %4, i64 0, i32 0, i64 2
  %28 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %4, i64 0, i32 0, i64 3
  %29 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %4, i64 0, i32 0, i64 4
  %30 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %4, i64 0, i32 0, i64 5
  %31 = getelementptr inbounds %struct.SkScalerContextRec, %struct.SkScalerContextRec* %0, i64 0, i32 4, i64 0, i64 0
  %32 = bitcast float* %31 to i32*
  %33 = load i32, i32* %32, align 4
  %34 = getelementptr inbounds %struct.SkScalerContextRec, %struct.SkScalerContextRec* %0, i64 0, i32 4, i64 0, i64 1
  %35 = bitcast float* %34 to i32*
  %36 = load i32, i32* %35, align 4
  %37 = getelementptr inbounds %struct.SkScalerContextRec, %struct.SkScalerContextRec* %0, i64 0, i32 4, i64 1, i64 0
  %38 = bitcast float* %37 to i32*
  %39 = load i32, i32* %38, align 4
  %40 = getelementptr inbounds %struct.SkScalerContextRec, %struct.SkScalerContextRec* %0, i64 0, i32 4, i64 1, i64 1
  %41 = bitcast float* %40 to i32*
  %42 = load i32, i32* %41, align 4
  %43 = bitcast %class.SkMatrix* %4 to i32*
  store i32 %33, i32* %43, align 4
  %44 = bitcast float* %26 to i32*
  store i32 %36, i32* %44, align 4
  store float 0.000000e+00, float* %27, align 4
  %45 = bitcast float* %28 to i32*
  store i32 %39, i32* %45, align 4
  %46 = bitcast float* %29 to i32*
  store i32 %42, i32* %46, align 4
  %47 = bitcast float* %30 to <4 x float>*
  store <4 x float> <float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00>, <4 x float>* %47, align 4
  store i32 128, i32* %25, align 4
  %48 = call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix10postConcatERKS_(%class.SkMatrix* %1, %class.SkMatrix* nonnull dereferenceable(40) %4) #19
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %24) #19
  ret void
}

declare dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix10postConcatERKS_(%class.SkMatrix*, %class.SkMatrix* dereferenceable(40)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN18SkScalerContextRec15computeMatricesENS_14PreMatrixScaleEP7SkPointP8SkMatrixS4_S4_S4_(%struct.SkScalerContextRec* nocapture readonly, i32, %struct.SkPoint* nocapture, %class.SkMatrix*, %class.SkMatrix*, %class.SkMatrix*, %class.SkMatrix*) local_unnamed_addr #0 align 2 {
  %8 = alloca %class.SkMatrix, align 16
  %9 = alloca %class.SkMatrix, align 16
  %10 = alloca i64, align 8
  %11 = bitcast i64* %10 to %struct.SkPoint*
  %12 = alloca %class.SkMatrix, align 16
  %13 = bitcast %class.SkMatrix* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %13) #19
  %14 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %8, i64 0, i32 1
  %15 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %8, i64 0, i32 0, i64 0
  %16 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %8, i64 0, i32 0, i64 1
  %17 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %8, i64 0, i32 0, i64 3
  %18 = bitcast %class.SkMatrix* %8 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %18, align 16
  %19 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %8, i64 0, i32 0, i64 4
  %20 = bitcast float* %19 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %20, align 16
  %21 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %8, i64 0, i32 0, i64 8
  store float 1.000000e+00, float* %21, align 16
  store i32 16, i32* %14, align 4
  call void @_ZNK18SkScalerContextRec15getSingleMatrixEP8SkMatrix(%struct.SkScalerContextRec* %0, %class.SkMatrix* nonnull %8)
  %22 = icmp eq %class.SkMatrix* %6, null
  br i1 %22, label %25, label %23

23:                                               ; preds = %7
  %24 = bitcast %class.SkMatrix* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %24, i8* nonnull align 16 %13, i64 40, i1 false)
  br label %25

25:                                               ; preds = %7, %23
  %26 = bitcast %class.SkMatrix* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %26) #19
  %27 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %9, i64 0, i32 1
  %28 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %9, i64 0, i32 0, i64 0
  %29 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %9, i64 0, i32 0, i64 1
  %30 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %9, i64 0, i32 0, i64 2
  %31 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %9, i64 0, i32 0, i64 3
  %32 = bitcast %class.SkMatrix* %9 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %32, align 16
  %33 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %9, i64 0, i32 0, i64 4
  %34 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %9, i64 0, i32 0, i64 5
  %35 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %9, i64 0, i32 0, i64 6
  %36 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %9, i64 0, i32 0, i64 7
  %37 = bitcast float* %33 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %37, align 16
  %38 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %9, i64 0, i32 0, i64 8
  store float 1.000000e+00, float* %38, align 16
  store i32 16, i32* %27, align 4
  %39 = load float, float* %16, align 4
  %40 = fcmp une float %39, 0.000000e+00
  %41 = load float, float* %17, align 4
  %42 = fcmp une float %41, 0.000000e+00
  %43 = or i1 %40, %42
  %44 = load float, float* %15, align 16
  %45 = fcmp olt float %44, 0.000000e+00
  %46 = or i1 %43, %45
  %47 = load float, float* %19, align 16
  %48 = fcmp olt float %47, 0.000000e+00
  %49 = or i1 %46, %48
  br i1 %49, label %50, label %87

50:                                               ; preds = %25
  %51 = bitcast i64* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %51) #19
  store i64 1065353216, i64* %10, align 8
  call void @_ZNK8SkMatrix9mapPointsEP7SkPointPKS0_i(%class.SkMatrix* nonnull %8, %struct.SkPoint* nonnull %11, %struct.SkPoint* nonnull %11, i32 1) #19
  %52 = bitcast %class.SkMatrix* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %52) #19
  %53 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %12, i64 0, i32 1
  %54 = bitcast %class.SkMatrix* %12 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %54, align 16
  %55 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %12, i64 0, i32 0, i64 4
  %56 = bitcast float* %55 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %56, align 16
  %57 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %12, i64 0, i32 0, i64 8
  store float 1.000000e+00, float* %57, align 16
  store i32 16, i32* %53, align 4
  call void @_Z23SkComputeGivensRotationRK7SkPointP8SkMatrix(%struct.SkPoint* nonnull dereferenceable(8) %11, %class.SkMatrix* nonnull %12) #19
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %26, i8* nonnull align 16 %52, i64 40, i1 false)
  %58 = call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix9preConcatERKS_(%class.SkMatrix* nonnull %9, %class.SkMatrix* nonnull dereferenceable(40) %8) #19
  %59 = icmp eq %class.SkMatrix* %5, null
  br i1 %59, label %86, label %60

60:                                               ; preds = %50
  %61 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %12, i64 0, i32 0, i64 3
  %62 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %12, i64 0, i32 0, i64 2
  %63 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %12, i64 0, i32 0, i64 1
  %64 = bitcast %class.SkMatrix* %12 to i32*
  %65 = load i32, i32* %64, align 16
  %66 = load float, float* %63, align 4
  %67 = fsub float -0.000000e+00, %66
  %68 = bitcast float* %62 to i32*
  %69 = load i32, i32* %68, align 8
  %70 = load float, float* %61, align 4
  %71 = fsub float -0.000000e+00, %70
  %72 = bitcast float* %55 to <4 x i32>*
  %73 = load <4 x i32>, <4 x i32>* %72, align 16
  %74 = bitcast float* %57 to i32*
  %75 = load i32, i32* %74, align 16
  %76 = bitcast %class.SkMatrix* %5 to i32*
  store i32 %65, i32* %76, align 4
  %77 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %5, i64 0, i32 0, i64 1
  store float %67, float* %77, align 4
  %78 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %5, i64 0, i32 0, i64 2
  %79 = bitcast float* %78 to i32*
  store i32 %69, i32* %79, align 4
  %80 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %5, i64 0, i32 0, i64 3
  store float %71, float* %80, align 4
  %81 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %5, i64 0, i32 0, i64 4
  %82 = bitcast float* %81 to <4 x i32>*
  store <4 x i32> %73, <4 x i32>* %82, align 4
  %83 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %5, i64 0, i32 0, i64 8
  %84 = bitcast float* %83 to i32*
  store i32 %75, i32* %84, align 4
  %85 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %5, i64 0, i32 1
  store i32 128, i32* %85, align 4
  br label %86

86:                                               ; preds = %50, %60
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %52) #19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %51) #19
  br label %91

87:                                               ; preds = %25
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %26, i8* nonnull align 16 %13, i64 40, i1 false)
  %88 = icmp eq %class.SkMatrix* %5, null
  br i1 %88, label %91, label %89

89:                                               ; preds = %87
  %90 = call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix5resetEv(%class.SkMatrix* nonnull %5) #19
  br label %91

91:                                               ; preds = %87, %89, %86
  %92 = phi i1 [ false, %87 ], [ false, %89 ], [ true, %86 ]
  %93 = load float, float* %28, align 16
  %94 = call float @llvm.fabs.f32(float %93)
  %95 = fcmp ugt float %94, 0x3F30000000000000
  br i1 %95, label %96, label %118

96:                                               ; preds = %91
  %97 = load float, float* %33, align 16
  %98 = call float @llvm.fabs.f32(float %97)
  %99 = fcmp ugt float %98, 0x3F30000000000000
  br i1 %99, label %100, label %118

100:                                              ; preds = %96
  %101 = fmul float %93, 0.000000e+00
  %102 = load float, float* %29, align 4
  %103 = fmul float %101, %102
  %104 = load float, float* %30, align 8
  %105 = fmul float %103, %104
  %106 = load float, float* %31, align 4
  %107 = fmul float %105, %106
  %108 = fmul float %97, %107
  %109 = load float, float* %34, align 4
  %110 = fmul float %109, %108
  %111 = load float, float* %35, align 8
  %112 = fmul float %111, %110
  %113 = load float, float* %36, align 4
  %114 = fmul float %113, %112
  %115 = load float, float* %38, align 16
  %116 = fmul float %115, %114
  %117 = fcmp oeq float %116, 0.000000e+00
  br i1 %117, label %129, label %118

118:                                              ; preds = %96, %91, %100
  %119 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 0, i32 0
  store float 1.000000e+00, float* %119, align 4
  %120 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 0, i32 1
  store float 1.000000e+00, float* %120, align 4
  %121 = call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix8setScaleEff(%class.SkMatrix* %3, float 0.000000e+00, float 0.000000e+00) #19
  %122 = icmp eq %class.SkMatrix* %4, null
  br i1 %122, label %125, label %123

123:                                              ; preds = %118
  %124 = call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix8setScaleEff(%class.SkMatrix* nonnull %4, float 0.000000e+00, float 0.000000e+00) #19
  br label %125

125:                                              ; preds = %118, %123
  %126 = icmp eq %class.SkMatrix* %5, null
  br i1 %126, label %177, label %127

127:                                              ; preds = %125
  %128 = call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix5resetEv(%class.SkMatrix* nonnull %5) #19
  br label %177

129:                                              ; preds = %100
  switch i32 %1, label %141 [
    i32 0, label %136
    i32 1, label %130
    i32 2, label %131
  ]

130:                                              ; preds = %129
  br label %136

131:                                              ; preds = %129
  %132 = fadd float %98, 5.000000e-01
  %133 = call float @llvm.floor.f32(float %132)
  %134 = fcmp oeq float %133, 0.000000e+00
  %135 = select i1 %134, float 1.000000e+00, float %133
  br label %136

136:                                              ; preds = %129, %130, %131
  %137 = phi float [ %135, %131 ], [ %98, %130 ], [ %94, %129 ]
  %138 = phi float [ %135, %131 ], [ %98, %130 ], [ %98, %129 ]
  %139 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 0, i32 0
  store float %137, float* %139, align 4
  %140 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 0, i32 1
  store float %138, float* %140, align 4
  br label %141

141:                                              ; preds = %136, %129
  br i1 %92, label %157, label %142

142:                                              ; preds = %141
  switch i32 %1, label %157 [
    i32 0, label %147
    i32 1, label %143
  ]

143:                                              ; preds = %142
  %144 = load float, float* %15, align 16
  %145 = load float, float* %19, align 16
  %146 = fcmp oeq float %144, %145
  br i1 %146, label %147, label %149

147:                                              ; preds = %142, %143
  %148 = call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix5resetEv(%class.SkMatrix* %3) #19
  br label %166

149:                                              ; preds = %143
  %150 = call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix5resetEv(%class.SkMatrix* %3) #19
  %151 = load float, float* %15, align 16
  %152 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 0, i32 1
  %153 = load float, float* %152, align 4
  %154 = fdiv float %151, %153
  %155 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %3, i64 0, i32 0, i64 0
  store float %154, float* %155, align 4
  %156 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %3, i64 0, i32 1
  store i32 128, i32* %156, align 4
  br label %166

157:                                              ; preds = %141, %142
  %158 = bitcast %class.SkMatrix* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %158, i8* nonnull align 16 %13, i64 40, i1 false)
  %159 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 0, i32 0
  %160 = load float, float* %159, align 4
  %161 = fdiv float 1.000000e+00, %160
  %162 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 0, i32 1
  %163 = load float, float* %162, align 4
  %164 = fdiv float 1.000000e+00, %163
  %165 = call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix8preScaleEff(%class.SkMatrix* %3, float %161, float %164) #19
  br label %166

166:                                              ; preds = %149, %157, %147
  %167 = icmp eq %class.SkMatrix* %4, null
  br i1 %167, label %177, label %168

168:                                              ; preds = %166
  %169 = bitcast %class.SkMatrix* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %169, i8* nonnull align 16 %26, i64 40, i1 false)
  %170 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 0, i32 0
  %171 = load float, float* %170, align 4
  %172 = fdiv float 1.000000e+00, %171
  %173 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 0, i32 1
  %174 = load float, float* %173, align 4
  %175 = fdiv float 1.000000e+00, %174
  %176 = call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix8preScaleEff(%class.SkMatrix* nonnull %4, float %172, float %175) #19
  br label %177

177:                                              ; preds = %168, %166, %127, %125
  %178 = phi i1 [ false, %125 ], [ false, %127 ], [ true, %166 ], [ true, %168 ]
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %26) #19
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %13) #19
  ret i1 %178
}

declare void @_Z23SkComputeGivensRotationRK7SkPointP8SkMatrix(%struct.SkPoint* dereferenceable(8), %class.SkMatrix*) local_unnamed_addr #1

declare dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix9preConcatERKS_(%class.SkMatrix*, %class.SkMatrix* dereferenceable(40)) local_unnamed_addr #1

declare dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix5resetEv(%class.SkMatrix*) local_unnamed_addr #1

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #9

declare dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix8setScaleEff(%class.SkMatrix*, float, float) local_unnamed_addr #1

; Function Attrs: nounwind readnone speculatable
declare float @llvm.floor.f32(float) #9

declare dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix8preScaleEff(%class.SkMatrix*, float, float) local_unnamed_addr #1

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK15SkScalerContext28computeAxisAlignmentForHTextEv(%class.SkScalerContext* nocapture readonly) local_unnamed_addr #10 align 2 {
  %2 = getelementptr inbounds %class.SkScalerContext, %class.SkScalerContext* %0, i64 0, i32 1, i32 14
  %3 = load i16, i16* %2, align 2
  %4 = and i16 %3, 8192
  %5 = icmp eq i16 %4, 0
  br i1 %5, label %15, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %class.SkScalerContext, %class.SkScalerContext* %0, i64 0, i32 1, i32 4, i64 1, i64 0
  %8 = load float, float* %7, align 4
  %9 = fcmp oeq float %8, 0.000000e+00
  br i1 %9, label %15, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %class.SkScalerContext, %class.SkScalerContext* %0, i64 0, i32 1, i32 4, i64 0, i64 0
  %12 = load float, float* %11, align 4
  %13 = fcmp oeq float %12, 0.000000e+00
  %14 = select i1 %13, i32 2, i32 0
  br label %15

15:                                               ; preds = %1, %6, %10
  %16 = phi i32 [ 0, %1 ], [ 1, %6 ], [ %14, %10 ]
  ret i32 %16
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @_ZNK18SkScalerContextRec28computeAxisAlignmentForHTextEv(%struct.SkScalerContextRec* nocapture readonly) local_unnamed_addr #11 align 2 {
  %2 = getelementptr inbounds %struct.SkScalerContextRec, %struct.SkScalerContextRec* %0, i64 0, i32 14
  %3 = load i16, i16* %2, align 2
  %4 = and i16 %3, 8192
  %5 = icmp eq i16 %4, 0
  br i1 %5, label %15, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %struct.SkScalerContextRec, %struct.SkScalerContextRec* %0, i64 0, i32 4, i64 1, i64 0
  %8 = load float, float* %7, align 4
  %9 = fcmp oeq float %8, 0.000000e+00
  br i1 %9, label %15, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %struct.SkScalerContextRec, %struct.SkScalerContextRec* %0, i64 0, i32 4, i64 0, i64 0
  %12 = load float, float* %11, align 4
  %13 = fcmp oeq float %12, 0.000000e+00
  %14 = select i1 %13, i32 2, i32 0
  br label %15

15:                                               ; preds = %1, %10, %6
  %16 = phi i32 [ 0, %1 ], [ 1, %6 ], [ %14, %10 ]
  ret i32 %16
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN15SkScalerContext17MakeRecAndEffectsERK6SkFontRK7SkPaintRK14SkSurfaceProps20SkScalerContextFlagsRK8SkMatrixP18SkScalerContextRecP22SkScalerContextEffects(%class.SkFont* dereferenceable(24), %class.SkPaint* dereferenceable(72), %class.SkSurfaceProps* nocapture readonly dereferenceable(8), i32, %class.SkMatrix* dereferenceable(40), %struct.SkScalerContextRec*, %struct.SkScalerContextEffects* nocapture) local_unnamed_addr #0 align 2 {
  %8 = bitcast %struct.SkScalerContextRec* %5 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %8, i8 0, i64 52, i1 false) #19
  %9 = tail call %class.SkTypeface* @_ZNK6SkFont20getTypefaceOrDefaultEv(%class.SkFont* %0) #19
  %10 = getelementptr inbounds %class.SkTypeface, %class.SkTypeface* %9, i64 0, i32 1
  %11 = load i32, i32* %10, align 8
  %12 = getelementptr inbounds %struct.SkScalerContextRec, %struct.SkScalerContextRec* %5, i64 0, i32 0
  store i32 %11, i32* %12, align 4
  %13 = getelementptr inbounds %class.SkFont, %class.SkFont* %0, i64 0, i32 1
  %14 = bitcast float* %13 to i32*
  %15 = load i32, i32* %14, align 8
  %16 = getelementptr inbounds %struct.SkScalerContextRec, %struct.SkScalerContextRec* %5, i64 0, i32 1
  %17 = bitcast float* %16 to i32*
  store i32 %15, i32* %17, align 4
  %18 = getelementptr inbounds %class.SkFont, %class.SkFont* %0, i64 0, i32 2
  %19 = bitcast float* %18 to i32*
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr inbounds %struct.SkScalerContextRec, %struct.SkScalerContextRec* %5, i64 0, i32 2
  %22 = bitcast float* %21 to i32*
  store i32 %20, i32* %22, align 4
  %23 = getelementptr inbounds %class.SkFont, %class.SkFont* %0, i64 0, i32 3
  %24 = bitcast float* %23 to i32*
  %25 = load i32, i32* %24, align 8
  %26 = getelementptr inbounds %struct.SkScalerContextRec, %struct.SkScalerContextRec* %5, i64 0, i32 3
  %27 = bitcast float* %26 to i32*
  store i32 %25, i32* %27, align 4
  %28 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %4, i64 0, i32 1
  %29 = load i32, i32* %28, align 4
  %30 = trunc i32 %29 to i8
  %31 = icmp slt i8 %30, 0
  br i1 %31, label %32, label %35

32:                                               ; preds = %7
  %33 = tail call zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix* %4) #19
  %34 = zext i8 %33 to i32
  store i32 %34, i32* %28, align 4
  br label %35

35:                                               ; preds = %7, %32
  %36 = phi i32 [ %34, %32 ], [ %29, %7 ]
  %37 = and i32 %36, 2
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %53, label %39

39:                                               ; preds = %35
  %40 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %4, i64 0, i32 0, i64 0
  %41 = load float, float* %40, align 4
  %42 = fmul float %41, 1.024000e+03
  %43 = fadd float %42, 5.000000e-01
  %44 = tail call float @llvm.floor.f32(float %43) #19
  %45 = fmul float %44, 0x3F50000000000000
  %46 = getelementptr inbounds %struct.SkScalerContextRec, %struct.SkScalerContextRec* %5, i64 0, i32 4, i64 0, i64 0
  store float %45, float* %46, align 4
  %47 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %4, i64 0, i32 0, i64 4
  %48 = load float, float* %47, align 4
  %49 = fmul float %48, 1.024000e+03
  %50 = fadd float %49, 5.000000e-01
  %51 = tail call float @llvm.floor.f32(float %50) #19
  %52 = fmul float %51, 0x3F50000000000000
  br label %55

53:                                               ; preds = %35
  %54 = getelementptr inbounds %struct.SkScalerContextRec, %struct.SkScalerContextRec* %5, i64 0, i32 4, i64 0, i64 0
  store float 1.000000e+00, float* %54, align 4
  br label %55

55:                                               ; preds = %53, %39
  %56 = phi float [ 1.000000e+00, %53 ], [ %45, %39 ]
  %57 = phi float [ 1.000000e+00, %53 ], [ %52, %39 ]
  %58 = phi i1 [ false, %53 ], [ true, %39 ]
  %59 = getelementptr inbounds %struct.SkScalerContextRec, %struct.SkScalerContextRec* %5, i64 0, i32 4, i64 1, i64 1
  store float %57, float* %59, align 4
  %60 = and i32 %36, 4
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %76, label %62

62:                                               ; preds = %55
  %63 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %4, i64 0, i32 0, i64 1
  %64 = load float, float* %63, align 4
  %65 = fmul float %64, 1.024000e+03
  %66 = fadd float %65, 5.000000e-01
  %67 = tail call float @llvm.floor.f32(float %66) #19
  %68 = fmul float %67, 0x3F50000000000000
  %69 = getelementptr inbounds %struct.SkScalerContextRec, %struct.SkScalerContextRec* %5, i64 0, i32 4, i64 0, i64 1
  store float %68, float* %69, align 4
  %70 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %4, i64 0, i32 0, i64 3
  %71 = load float, float* %70, align 4
  %72 = fmul float %71, 1.024000e+03
  %73 = fadd float %72, 5.000000e-01
  %74 = tail call float @llvm.floor.f32(float %73) #19
  %75 = fmul float %74, 0x3F50000000000000
  br label %78

76:                                               ; preds = %55
  %77 = getelementptr inbounds %struct.SkScalerContextRec, %struct.SkScalerContextRec* %5, i64 0, i32 4, i64 0, i64 1
  store float 0.000000e+00, float* %77, align 4
  br label %78

78:                                               ; preds = %76, %62
  %79 = phi float [ 0.000000e+00, %76 ], [ %68, %62 ]
  %80 = phi float [ 0.000000e+00, %76 ], [ %75, %62 ]
  %81 = phi i1 [ %58, %76 ], [ true, %62 ]
  %82 = getelementptr inbounds %struct.SkScalerContextRec, %struct.SkScalerContextRec* %5, i64 0, i32 4, i64 1, i64 0
  store float %80, float* %82, align 4
  %83 = getelementptr inbounds %class.SkPaint, %class.SkPaint* %1, i64 0, i32 8, i32 0, i32 0
  %84 = load i32, i32* %83, align 8
  %85 = lshr i32 %84, 6
  %86 = trunc i32 %85 to i8
  %87 = and i8 %86, 3
  %88 = getelementptr inbounds %class.SkPaint, %class.SkPaint* %1, i64 0, i32 6
  %89 = load float, float* %88, align 8
  %90 = getelementptr inbounds %class.SkFont, %class.SkFont* %0, i64 0, i32 4
  %91 = load i8, i8* %90, align 4
  %92 = lshr i8 %91, 1
  %93 = and i8 %92, 8
  %94 = zext i8 %93 to i32
  %95 = icmp ne i8 %87, 0
  %96 = fcmp oge float %89, 0.000000e+00
  %97 = and i1 %96, %95
  %98 = getelementptr inbounds %struct.SkScalerContextRec, %struct.SkScalerContextRec* %5, i64 0, i32 5
  br i1 %97, label %99, label %121

99:                                               ; preds = %78
  store float %89, float* %98, align 4
  %100 = getelementptr inbounds %class.SkPaint, %class.SkPaint* %1, i64 0, i32 7
  %101 = bitcast float* %100 to i32*
  %102 = load i32, i32* %101, align 4
  %103 = getelementptr inbounds %struct.SkScalerContextRec, %struct.SkScalerContextRec* %5, i64 0, i32 6
  %104 = bitcast float* %103 to i32*
  store i32 %102, i32* %104, align 4
  %105 = load i32, i32* %83, align 8
  %106 = lshr i32 %105, 4
  %107 = trunc i32 %106 to i8
  %108 = and i8 %107, 3
  %109 = getelementptr inbounds %struct.SkScalerContextRec, %struct.SkScalerContextRec* %5, i64 0, i32 13
  %110 = load i8, i8* %109, align 1
  %111 = and i8 %110, -16
  %112 = or i8 %108, %111
  store i8 %112, i8* %109, align 1
  %113 = load i32, i32* %83, align 8
  %114 = trunc i32 %113 to i8
  %115 = shl i8 %114, 2
  %116 = and i8 %115, 48
  %117 = or i8 %116, %108
  store i8 %117, i8* %109, align 1
  %118 = icmp eq i8 %87, 2
  %119 = zext i1 %118 to i32
  %120 = or i32 %119, %94
  br label %124

121:                                              ; preds = %78
  store float -1.000000e+00, float* %98, align 4
  %122 = getelementptr inbounds %struct.SkScalerContextRec, %struct.SkScalerContextRec* %5, i64 0, i32 6
  store float 0.000000e+00, float* %122, align 4
  %123 = getelementptr inbounds %struct.SkScalerContextRec, %struct.SkScalerContextRec* %5, i64 0, i32 13
  store i8 0, i8* %123, align 1
  br label %124

124:                                              ; preds = %99, %121
  %125 = phi i32 [ %94, %121 ], [ %120, %99 ]
  %126 = getelementptr inbounds %class.SkFont, %class.SkFont* %0, i64 0, i32 5
  %127 = load i8, i8* %126, align 1
  switch i8 %127, label %129 [
    i8 0, label %130
    i8 1, label %128
    i8 2, label %133
  ]

128:                                              ; preds = %124
  br label %130

129:                                              ; preds = %124
  br label %130

130:                                              ; preds = %129, %128, %124
  %131 = phi i8 [ %127, %124 ], [ 1, %128 ], [ 1, %129 ]
  %132 = getelementptr inbounds %struct.SkScalerContextRec, %struct.SkScalerContextRec* %5, i64 0, i32 12
  store i8 %131, i8* %132, align 4
  br label %159

133:                                              ; preds = %124
  %134 = getelementptr inbounds %struct.SkScalerContextRec, %struct.SkScalerContextRec* %5, i64 0, i32 12
  store i8 4, i8* %134, align 4
  br i1 %81, label %135, label %143

135:                                              ; preds = %133
  %136 = fmul float %56, %57
  %137 = fmul float %80, %79
  %138 = fsub float %136, %137
  %139 = load float, float* %16, align 4
  %140 = fmul float %139, %139
  %141 = fmul float %138, %140
  %142 = fcmp ogt float %141, 2.304000e+03
  br i1 %142, label %146, label %148

143:                                              ; preds = %133
  %144 = load float, float* %16, align 4
  %145 = fcmp ogt float %144, 4.800000e+01
  br i1 %145, label %146, label %148

146:                                              ; preds = %135, %143
  store i8 1, i8* %134, align 4
  %147 = or i32 %125, 2048
  br label %159

148:                                              ; preds = %135, %143
  %149 = getelementptr inbounds %class.SkSurfaceProps, %class.SkSurfaceProps* %2, i64 0, i32 1
  %150 = load i32, i32* %149, align 4
  switch i32 %150, label %159 [
    i32 0, label %151
    i32 4, label %157
    i32 2, label %153
    i32 3, label %155
  ]

151:                                              ; preds = %148
  store i8 1, i8* %134, align 4
  %152 = or i32 %125, 2048
  br label %159

153:                                              ; preds = %148
  %154 = or i32 %125, 1024
  br label %159

155:                                              ; preds = %148
  %156 = or i32 %125, 512
  br label %159

157:                                              ; preds = %148
  %158 = or i32 %125, 1536
  br label %159

159:                                              ; preds = %130, %151, %153, %155, %157, %148, %146
  %160 = phi i32 [ %147, %146 ], [ %125, %148 ], [ %156, %155 ], [ %154, %153 ], [ %158, %157 ], [ %152, %151 ], [ %125, %130 ]
  %161 = load i8, i8* %90, align 4
  %162 = shl i8 %161, 1
  %163 = and i8 %162, 4
  %164 = zext i8 %163 to i32
  %165 = or i32 %160, %164
  %166 = shl i8 %161, 2
  %167 = and i8 %166, 16
  %168 = zext i8 %167 to i32
  %169 = or i32 %165, %168
  %170 = shl i8 %161, 5
  %171 = and i8 %170, 32
  %172 = zext i8 %171 to i32
  %173 = or i32 %169, %172
  %174 = and i8 %161, 8
  %175 = zext i8 %174 to i32
  %176 = shl nuw nsw i32 %175, 9
  %177 = or i32 %173, %176
  %178 = and i8 %161, 32
  %179 = zext i8 %178 to i32
  %180 = shl nuw nsw i32 %179, 8
  %181 = or i32 %177, %180
  %182 = trunc i32 %181 to i16
  %183 = getelementptr inbounds %struct.SkScalerContextRec, %struct.SkScalerContextRec* %5, i64 0, i32 14
  store i16 %182, i16* %183, align 2
  %184 = getelementptr inbounds %class.SkFont, %class.SkFont* %0, i64 0, i32 6
  %185 = load i8, i8* %184, align 2
  %186 = and i16 %182, -385
  %187 = zext i8 %185 to i16
  %188 = shl nuw nsw i16 %187, 7
  %189 = or i16 %186, %188
  store i16 %189, i16* %183, align 2
  %190 = tail call i32 @_ZN11SkPaintPriv21ComputeLuminanceColorERK7SkPaint(%class.SkPaint* dereferenceable(72) %1) #19
  %191 = lshr i32 %190, 21
  %192 = and i32 %191, 7
  %193 = shl nuw nsw i32 %192, 5
  %194 = shl nuw nsw i32 %192, 2
  %195 = or i32 %194, %193
  %196 = lshr i32 %192, 1
  %197 = or i32 %195, %196
  %198 = lshr i32 %190, 13
  %199 = and i32 %198, 7
  %200 = shl nuw nsw i32 %199, 5
  %201 = shl nuw nsw i32 %199, 2
  %202 = or i32 %201, %200
  %203 = lshr i32 %199, 1
  %204 = or i32 %202, %203
  %205 = lshr i32 %190, 5
  %206 = and i32 %205, 7
  %207 = shl nuw nsw i32 %206, 5
  %208 = shl nuw nsw i32 %206, 2
  %209 = lshr i32 %206, 1
  %210 = shl nuw nsw i32 %197, 16
  %211 = shl nuw nsw i32 %204, 8
  %212 = or i32 %207, %208
  %213 = or i32 %212, %209
  %214 = or i32 %213, %211
  %215 = or i32 %214, %210
  %216 = or i32 %215, -16777216
  %217 = getelementptr inbounds %struct.SkScalerContextRec, %struct.SkScalerContextRec* %5, i64 0, i32 7
  store i32 %216, i32* %217, align 4
  %218 = getelementptr inbounds %struct.SkScalerContextRec, %struct.SkScalerContextRec* %5, i64 0, i32 8
  store i8 76, i8* %218, align 4
  %219 = getelementptr inbounds %struct.SkScalerContextRec, %struct.SkScalerContextRec* %5, i64 0, i32 9
  store i8 76, i8* %219, align 1
  %220 = getelementptr inbounds %struct.SkScalerContextRec, %struct.SkScalerContextRec* %5, i64 0, i32 10
  store i8 51, i8* %220, align 2
  %221 = and i32 %3, 1
  %222 = icmp eq i32 %221, 0
  br i1 %222, label %223, label %224

223:                                              ; preds = %159
  store i32 -16777216, i32* %217, align 4
  store i8 64, i8* %219, align 1
  store i8 64, i8* %218, align 4
  br label %224

224:                                              ; preds = %159, %223
  %225 = and i32 %3, 2
  %226 = icmp eq i32 %225, 0
  br i1 %226, label %227, label %228

227:                                              ; preds = %224
  store i8 0, i8* %220, align 2
  br label %228

228:                                              ; preds = %224, %227
  %229 = bitcast %class.SkPaint* %1 to i64*
  %230 = load i64, i64* %229, align 8
  %231 = bitcast %struct.SkScalerContextEffects* %6 to i64*
  store i64 %230, i64* %231, align 8
  %232 = getelementptr inbounds %struct.SkScalerContextEffects, %struct.SkScalerContextEffects* %6, i64 0, i32 1
  %233 = getelementptr inbounds %class.SkPaint, %class.SkPaint* %1, i64 0, i32 2, i32 0
  %234 = bitcast %class.SkMaskFilter** %233 to i64*
  %235 = load i64, i64* %234, align 8
  %236 = bitcast %class.SkMaskFilter** %232 to i64*
  store i64 %235, i64* %236, align 8
  ret void
}

declare %class.SkTypeface* @_ZNK6SkFont20getTypefaceOrDefaultEv(%class.SkFont*) local_unnamed_addr #1

declare i32 @_ZN11SkPaintPriv21ComputeLuminanceColorERK7SkPaint(%class.SkPaint* dereferenceable(72)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden %class.SkDescriptor* @_ZN15SkScalerContext36CreateDescriptorAndEffectsUsingPaintERK6SkFontRK7SkPaintRK14SkSurfaceProps20SkScalerContextFlagsRK8SkMatrixP16SkAutoDescriptorP22SkScalerContextEffects(%class.SkFont* dereferenceable(24), %class.SkPaint* dereferenceable(72), %class.SkSurfaceProps* nocapture readonly dereferenceable(8), i32, %class.SkMatrix* dereferenceable(40), %class.SkAutoDescriptor*, %struct.SkScalerContextEffects* nocapture) local_unnamed_addr #0 align 2 {
  %8 = alloca %struct.SkScalerContextRec, align 4
  %9 = bitcast %struct.SkScalerContextRec* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 52, i8* nonnull %9) #19
  %10 = getelementptr inbounds %struct.SkScalerContextRec, %struct.SkScalerContextRec* %8, i64 0, i32 0
  store i32 -1431655766, i32* %10, align 4
  %11 = getelementptr inbounds %struct.SkScalerContextRec, %struct.SkScalerContextRec* %8, i64 0, i32 1
  %12 = getelementptr inbounds %struct.SkScalerContextRec, %struct.SkScalerContextRec* %8, i64 0, i32 7
  %13 = bitcast float* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %13, i8 -1, i64 36, i1 false)
  %14 = getelementptr inbounds %struct.SkScalerContextRec, %struct.SkScalerContextRec* %8, i64 0, i32 11
  %15 = bitcast i32* %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %15, i8 -86, i64 12, i1 false)
  store i8 0, i8* %14, align 1
  call void @_ZN15SkScalerContext17MakeRecAndEffectsERK6SkFontRK7SkPaintRK14SkSurfaceProps20SkScalerContextFlagsRK8SkMatrixP18SkScalerContextRecP22SkScalerContextEffects(%class.SkFont* dereferenceable(24) %0, %class.SkPaint* dereferenceable(72) %1, %class.SkSurfaceProps* dereferenceable(8) %2, i32 %3, %class.SkMatrix* dereferenceable(40) %4, %struct.SkScalerContextRec* nonnull %8, %struct.SkScalerContextEffects* %6)
  %16 = call %class.SkDescriptor* @_ZN15SkScalerContext32AutoDescriptorGivenRecAndEffectsERK18SkScalerContextRecRK22SkScalerContextEffectsP16SkAutoDescriptor(%struct.SkScalerContextRec* nonnull dereferenceable(52) %8, %struct.SkScalerContextEffects* dereferenceable(16) %6, %class.SkAutoDescriptor* %5)
  call void @llvm.lifetime.end.p0i8(i64 52, i8* nonnull %9) #19
  ret %class.SkDescriptor* %16
}

; Function Attrs: nounwind ssp uwtable
define hidden %class.SkDescriptor* @_ZN15SkScalerContext32AutoDescriptorGivenRecAndEffectsERK18SkScalerContextRecRK22SkScalerContextEffectsP16SkAutoDescriptor(%struct.SkScalerContextRec* dereferenceable(52), %struct.SkScalerContextEffects* nocapture readonly dereferenceable(16), %class.SkAutoDescriptor*) local_unnamed_addr #0 align 2 {
  %4 = alloca %class.SkBinaryWriteBuffer, align 8
  %5 = bitcast %class.SkBinaryWriteBuffer* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %5) #19
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 -86, i64 128, i1 false)
  call void @_ZN19SkBinaryWriteBufferC1Ev(%class.SkBinaryWriteBuffer* nonnull %4) #19
  %6 = getelementptr inbounds %struct.SkScalerContextEffects, %struct.SkScalerContextEffects* %1, i64 0, i32 0
  %7 = load %class.SkPathEffect*, %class.SkPathEffect** %6, align 8
  %8 = icmp eq %class.SkPathEffect* %7, null
  br i1 %8, label %9, label %15

9:                                                ; preds = %3
  %10 = getelementptr inbounds %struct.SkScalerContextEffects, %struct.SkScalerContextEffects* %1, i64 0, i32 1
  %11 = load %class.SkMaskFilter*, %class.SkMaskFilter** %10, align 8
  %12 = icmp eq %class.SkMaskFilter* %11, null
  br i1 %12, label %35, label %13

13:                                               ; preds = %9
  %14 = bitcast %class.SkBinaryWriteBuffer* %4 to void (%class.SkBinaryWriteBuffer*, %class.SkFlattenable*)***
  br label %24

15:                                               ; preds = %3
  %16 = bitcast %class.SkPathEffect* %7 to %class.SkFlattenable*
  %17 = bitcast %class.SkBinaryWriteBuffer* %4 to void (%class.SkBinaryWriteBuffer*, %class.SkFlattenable*)***
  %18 = load void (%class.SkBinaryWriteBuffer*, %class.SkFlattenable*)**, void (%class.SkBinaryWriteBuffer*, %class.SkFlattenable*)*** %17, align 8
  %19 = getelementptr inbounds void (%class.SkBinaryWriteBuffer*, %class.SkFlattenable*)*, void (%class.SkBinaryWriteBuffer*, %class.SkFlattenable*)** %18, i64 11
  %20 = load void (%class.SkBinaryWriteBuffer*, %class.SkFlattenable*)*, void (%class.SkBinaryWriteBuffer*, %class.SkFlattenable*)** %19, align 8
  call void %20(%class.SkBinaryWriteBuffer* nonnull %4, %class.SkFlattenable* nonnull %16) #19
  %21 = getelementptr inbounds %struct.SkScalerContextEffects, %struct.SkScalerContextEffects* %1, i64 0, i32 1
  %22 = load %class.SkMaskFilter*, %class.SkMaskFilter** %21, align 8
  %23 = icmp eq %class.SkMaskFilter* %22, null
  br i1 %23, label %31, label %24

24:                                               ; preds = %13, %15
  %25 = phi void (%class.SkBinaryWriteBuffer*, %class.SkFlattenable*)*** [ %14, %13 ], [ %17, %15 ]
  %26 = phi %class.SkMaskFilter* [ %11, %13 ], [ %22, %15 ]
  %27 = bitcast %class.SkMaskFilter* %26 to %class.SkFlattenable*
  %28 = load void (%class.SkBinaryWriteBuffer*, %class.SkFlattenable*)**, void (%class.SkBinaryWriteBuffer*, %class.SkFlattenable*)*** %25, align 8
  %29 = getelementptr inbounds void (%class.SkBinaryWriteBuffer*, %class.SkFlattenable*)*, void (%class.SkBinaryWriteBuffer*, %class.SkFlattenable*)** %28, i64 11
  %30 = load void (%class.SkBinaryWriteBuffer*, %class.SkFlattenable*)*, void (%class.SkBinaryWriteBuffer*, %class.SkFlattenable*)** %29, align 8
  call void %30(%class.SkBinaryWriteBuffer* nonnull %4, %class.SkFlattenable* nonnull %27) #19
  br label %31

31:                                               ; preds = %24, %15
  %32 = getelementptr inbounds %class.SkBinaryWriteBuffer, %class.SkBinaryWriteBuffer* %4, i64 0, i32 3, i32 2
  %33 = load i64, i64* %32, align 8
  %34 = add i64 %33, 52
  br label %35

35:                                               ; preds = %9, %31
  %36 = phi i64 [ %34, %31 ], [ 52, %9 ]
  %37 = phi i64 [ 28, %31 ], [ 20, %9 ]
  %38 = add i64 %37, %36
  call void @_ZN16SkAutoDescriptor5resetEm(%class.SkAutoDescriptor* %2, i64 %38) #19
  %39 = getelementptr inbounds %class.SkAutoDescriptor, %class.SkAutoDescriptor* %2, i64 0, i32 0
  %40 = load %class.SkDescriptor*, %class.SkDescriptor** %39, align 8
  %41 = bitcast %struct.SkScalerContextRec* %0 to i8*
  %42 = call i8* @_ZN12SkDescriptor8addEntryEjmPKv(%class.SkDescriptor* %40, i32 1936876899, i64 52, i8* %41) #19
  %43 = getelementptr inbounds %class.SkBinaryWriteBuffer, %class.SkBinaryWriteBuffer* %4, i64 0, i32 3, i32 2
  %44 = load i64, i64* %43, align 8
  %45 = icmp eq i64 %44, 0
  br i1 %45, label %51, label %46

46:                                               ; preds = %35
  %47 = call i8* @_ZN12SkDescriptor8addEntryEjmPKv(%class.SkDescriptor* %40, i32 1701208948, i64 %44, i8* null) #19
  %48 = getelementptr inbounds %class.SkBinaryWriteBuffer, %class.SkBinaryWriteBuffer* %4, i64 0, i32 3, i32 0
  %49 = load i8*, i8** %48, align 8
  %50 = load i64, i64* %43, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %47, i8* align 1 %49, i64 %50, i1 false) #19
  br label %51

51:                                               ; preds = %35, %46
  call void @_ZN12SkDescriptor15computeChecksumEv(%class.SkDescriptor* %40) #19
  %52 = load %class.SkDescriptor*, %class.SkDescriptor** %39, align 8
  call void @_ZN19SkBinaryWriteBufferD1Ev(%class.SkBinaryWriteBuffer* nonnull %4) #19
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %5) #19
  ret %class.SkDescriptor* %52
}

declare void @_ZN19SkBinaryWriteBufferC1Ev(%class.SkBinaryWriteBuffer*) unnamed_addr #1

declare void @_ZN16SkAutoDescriptor5resetEm(%class.SkAutoDescriptor*, i64) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN19SkBinaryWriteBufferD1Ev(%class.SkBinaryWriteBuffer*) unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define hidden %class.SkDescriptor* @_ZN15SkScalerContext28DescriptorGivenRecAndEffectsERK18SkScalerContextRecRK22SkScalerContextEffects(%struct.SkScalerContextRec* dereferenceable(52), %struct.SkScalerContextEffects* nocapture readonly dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = alloca %class.SkBinaryWriteBuffer, align 8
  %4 = bitcast %class.SkBinaryWriteBuffer* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %4) #19
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4, i8 -86, i64 128, i1 false)
  call void @_ZN19SkBinaryWriteBufferC1Ev(%class.SkBinaryWriteBuffer* nonnull %3) #19
  %5 = getelementptr inbounds %struct.SkScalerContextEffects, %struct.SkScalerContextEffects* %1, i64 0, i32 0
  %6 = load %class.SkPathEffect*, %class.SkPathEffect** %5, align 8
  %7 = icmp eq %class.SkPathEffect* %6, null
  br i1 %7, label %8, label %14

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.SkScalerContextEffects, %struct.SkScalerContextEffects* %1, i64 0, i32 1
  %10 = load %class.SkMaskFilter*, %class.SkMaskFilter** %9, align 8
  %11 = icmp eq %class.SkMaskFilter* %10, null
  br i1 %11, label %34, label %12

12:                                               ; preds = %8
  %13 = bitcast %class.SkBinaryWriteBuffer* %3 to void (%class.SkBinaryWriteBuffer*, %class.SkFlattenable*)***
  br label %23

14:                                               ; preds = %2
  %15 = bitcast %class.SkPathEffect* %6 to %class.SkFlattenable*
  %16 = bitcast %class.SkBinaryWriteBuffer* %3 to void (%class.SkBinaryWriteBuffer*, %class.SkFlattenable*)***
  %17 = load void (%class.SkBinaryWriteBuffer*, %class.SkFlattenable*)**, void (%class.SkBinaryWriteBuffer*, %class.SkFlattenable*)*** %16, align 8
  %18 = getelementptr inbounds void (%class.SkBinaryWriteBuffer*, %class.SkFlattenable*)*, void (%class.SkBinaryWriteBuffer*, %class.SkFlattenable*)** %17, i64 11
  %19 = load void (%class.SkBinaryWriteBuffer*, %class.SkFlattenable*)*, void (%class.SkBinaryWriteBuffer*, %class.SkFlattenable*)** %18, align 8
  call void %19(%class.SkBinaryWriteBuffer* nonnull %3, %class.SkFlattenable* nonnull %15) #19
  %20 = getelementptr inbounds %struct.SkScalerContextEffects, %struct.SkScalerContextEffects* %1, i64 0, i32 1
  %21 = load %class.SkMaskFilter*, %class.SkMaskFilter** %20, align 8
  %22 = icmp eq %class.SkMaskFilter* %21, null
  br i1 %22, label %30, label %23

23:                                               ; preds = %12, %14
  %24 = phi void (%class.SkBinaryWriteBuffer*, %class.SkFlattenable*)*** [ %13, %12 ], [ %16, %14 ]
  %25 = phi %class.SkMaskFilter* [ %10, %12 ], [ %21, %14 ]
  %26 = bitcast %class.SkMaskFilter* %25 to %class.SkFlattenable*
  %27 = load void (%class.SkBinaryWriteBuffer*, %class.SkFlattenable*)**, void (%class.SkBinaryWriteBuffer*, %class.SkFlattenable*)*** %24, align 8
  %28 = getelementptr inbounds void (%class.SkBinaryWriteBuffer*, %class.SkFlattenable*)*, void (%class.SkBinaryWriteBuffer*, %class.SkFlattenable*)** %27, i64 11
  %29 = load void (%class.SkBinaryWriteBuffer*, %class.SkFlattenable*)*, void (%class.SkBinaryWriteBuffer*, %class.SkFlattenable*)** %28, align 8
  call void %29(%class.SkBinaryWriteBuffer* nonnull %3, %class.SkFlattenable* nonnull %26) #19
  br label %30

30:                                               ; preds = %23, %14
  %31 = getelementptr inbounds %class.SkBinaryWriteBuffer, %class.SkBinaryWriteBuffer* %3, i64 0, i32 3, i32 2
  %32 = load i64, i64* %31, align 8
  %33 = add i64 %32, 52
  br label %34

34:                                               ; preds = %8, %30
  %35 = phi i64 [ %33, %30 ], [ 52, %8 ]
  %36 = phi i64 [ 28, %30 ], [ 20, %8 ]
  %37 = add i64 %36, %35
  %38 = call %class.SkDescriptor* @_ZN12SkDescriptor5AllocEm(i64 %37) #19
  %39 = bitcast %struct.SkScalerContextRec* %0 to i8*
  %40 = call i8* @_ZN12SkDescriptor8addEntryEjmPKv(%class.SkDescriptor* %38, i32 1936876899, i64 52, i8* %39) #19
  %41 = getelementptr inbounds %class.SkBinaryWriteBuffer, %class.SkBinaryWriteBuffer* %3, i64 0, i32 3, i32 2
  %42 = load i64, i64* %41, align 8
  %43 = icmp eq i64 %42, 0
  br i1 %43, label %49, label %44

44:                                               ; preds = %34
  %45 = call i8* @_ZN12SkDescriptor8addEntryEjmPKv(%class.SkDescriptor* %38, i32 1701208948, i64 %42, i8* null) #19
  %46 = getelementptr inbounds %class.SkBinaryWriteBuffer, %class.SkBinaryWriteBuffer* %3, i64 0, i32 3, i32 0
  %47 = load i8*, i8** %46, align 8
  %48 = load i64, i64* %41, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %45, i8* align 1 %47, i64 %48, i1 false) #19
  br label %49

49:                                               ; preds = %34, %44
  call void @_ZN12SkDescriptor15computeChecksumEv(%class.SkDescriptor* %38) #19
  call void @_ZN19SkBinaryWriteBufferD1Ev(%class.SkBinaryWriteBuffer* nonnull %3) #19
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %4) #19
  ret %class.SkDescriptor* %38
}

declare %class.SkDescriptor* @_ZN12SkDescriptor5AllocEm(i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN15SkScalerContext23DescriptorBufferGiveRecERK18SkScalerContextRecPv(%struct.SkScalerContextRec* dereferenceable(52), i8*) local_unnamed_addr #0 align 2 {
  %3 = alloca %class.SkBinaryWriteBuffer, align 8
  %4 = bitcast %class.SkBinaryWriteBuffer* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %4) #19
  call void @_ZN19SkBinaryWriteBufferC1Ev(%class.SkBinaryWriteBuffer* nonnull %3) #19
  %5 = bitcast i8* %1 to %class.SkDescriptor*
  %6 = bitcast %struct.SkScalerContextRec* %0 to i8*
  %7 = call i8* @_ZN12SkDescriptor8addEntryEjmPKv(%class.SkDescriptor* %5, i32 1936876899, i64 52, i8* %6) #19
  %8 = getelementptr inbounds %class.SkBinaryWriteBuffer, %class.SkBinaryWriteBuffer* %3, i64 0, i32 3, i32 2
  %9 = load i64, i64* %8, align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %16, label %11

11:                                               ; preds = %2
  %12 = call i8* @_ZN12SkDescriptor8addEntryEjmPKv(%class.SkDescriptor* %5, i32 1701208948, i64 %9, i8* null) #19
  %13 = getelementptr inbounds %class.SkBinaryWriteBuffer, %class.SkBinaryWriteBuffer* %3, i64 0, i32 3, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = load i64, i64* %8, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %12, i8* align 1 %14, i64 %15, i1 false) #19
  br label %16

16:                                               ; preds = %2, %11
  call void @_ZN12SkDescriptor15computeChecksumEv(%class.SkDescriptor* %5) #19
  call void @_ZN19SkBinaryWriteBufferD1Ev(%class.SkBinaryWriteBuffer* nonnull %3) #19
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %4) #19
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN15SkScalerContext21CheckBufferSizeForRecERK18SkScalerContextRecRK22SkScalerContextEffectsm(%struct.SkScalerContextRec* nocapture readnone dereferenceable(52), %struct.SkScalerContextEffects* nocapture readonly dereferenceable(16), i64) local_unnamed_addr #0 align 2 {
  %4 = alloca %class.SkBinaryWriteBuffer, align 8
  %5 = bitcast %class.SkBinaryWriteBuffer* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %5) #19
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 -86, i64 128, i1 false)
  call void @_ZN19SkBinaryWriteBufferC1Ev(%class.SkBinaryWriteBuffer* nonnull %4) #19
  %6 = getelementptr inbounds %struct.SkScalerContextEffects, %struct.SkScalerContextEffects* %1, i64 0, i32 0
  %7 = load %class.SkPathEffect*, %class.SkPathEffect** %6, align 8
  %8 = icmp eq %class.SkPathEffect* %7, null
  br i1 %8, label %9, label %15

9:                                                ; preds = %3
  %10 = getelementptr inbounds %struct.SkScalerContextEffects, %struct.SkScalerContextEffects* %1, i64 0, i32 1
  %11 = load %class.SkMaskFilter*, %class.SkMaskFilter** %10, align 8
  %12 = icmp eq %class.SkMaskFilter* %11, null
  br i1 %12, label %35, label %13

13:                                               ; preds = %9
  %14 = bitcast %class.SkBinaryWriteBuffer* %4 to void (%class.SkBinaryWriteBuffer*, %class.SkFlattenable*)***
  br label %24

15:                                               ; preds = %3
  %16 = bitcast %class.SkPathEffect* %7 to %class.SkFlattenable*
  %17 = bitcast %class.SkBinaryWriteBuffer* %4 to void (%class.SkBinaryWriteBuffer*, %class.SkFlattenable*)***
  %18 = load void (%class.SkBinaryWriteBuffer*, %class.SkFlattenable*)**, void (%class.SkBinaryWriteBuffer*, %class.SkFlattenable*)*** %17, align 8
  %19 = getelementptr inbounds void (%class.SkBinaryWriteBuffer*, %class.SkFlattenable*)*, void (%class.SkBinaryWriteBuffer*, %class.SkFlattenable*)** %18, i64 11
  %20 = load void (%class.SkBinaryWriteBuffer*, %class.SkFlattenable*)*, void (%class.SkBinaryWriteBuffer*, %class.SkFlattenable*)** %19, align 8
  call void %20(%class.SkBinaryWriteBuffer* nonnull %4, %class.SkFlattenable* nonnull %16) #19
  %21 = getelementptr inbounds %struct.SkScalerContextEffects, %struct.SkScalerContextEffects* %1, i64 0, i32 1
  %22 = load %class.SkMaskFilter*, %class.SkMaskFilter** %21, align 8
  %23 = icmp eq %class.SkMaskFilter* %22, null
  br i1 %23, label %31, label %24

24:                                               ; preds = %13, %15
  %25 = phi void (%class.SkBinaryWriteBuffer*, %class.SkFlattenable*)*** [ %14, %13 ], [ %17, %15 ]
  %26 = phi %class.SkMaskFilter* [ %11, %13 ], [ %22, %15 ]
  %27 = bitcast %class.SkMaskFilter* %26 to %class.SkFlattenable*
  %28 = load void (%class.SkBinaryWriteBuffer*, %class.SkFlattenable*)**, void (%class.SkBinaryWriteBuffer*, %class.SkFlattenable*)*** %25, align 8
  %29 = getelementptr inbounds void (%class.SkBinaryWriteBuffer*, %class.SkFlattenable*)*, void (%class.SkBinaryWriteBuffer*, %class.SkFlattenable*)** %28, i64 11
  %30 = load void (%class.SkBinaryWriteBuffer*, %class.SkFlattenable*)*, void (%class.SkBinaryWriteBuffer*, %class.SkFlattenable*)** %29, align 8
  call void %30(%class.SkBinaryWriteBuffer* nonnull %4, %class.SkFlattenable* nonnull %27) #19
  br label %31

31:                                               ; preds = %24, %15
  %32 = getelementptr inbounds %class.SkBinaryWriteBuffer, %class.SkBinaryWriteBuffer* %4, i64 0, i32 3, i32 2
  %33 = load i64, i64* %32, align 8
  %34 = add i64 %33, 52
  br label %35

35:                                               ; preds = %9, %31
  %36 = phi i64 [ %34, %31 ], [ 52, %9 ]
  %37 = phi i64 [ 28, %31 ], [ 20, %9 ]
  %38 = add i64 %37, %36
  %39 = icmp ule i64 %38, %2
  call void @_ZN19SkBinaryWriteBufferD1Ev(%class.SkBinaryWriteBuffer* nonnull %4) #19
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %5) #19
  ret i1 %39
}

; Function Attrs: nounwind ssp uwtable
define hidden %class.SkScalerContext* @_ZN15SkScalerContext9MakeEmptyE5sk_spI10SkTypefaceERK22SkScalerContextEffectsPK12SkDescriptor(%class.sk_sp* nocapture, %struct.SkScalerContextEffects* nocapture readonly dereferenceable(16), %class.SkDescriptor*) local_unnamed_addr #0 align 2 {
  %4 = tail call i8* @_Znwm(i64 128) #20
  %5 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %0, i64 0, i32 0
  %6 = bitcast %class.sk_sp* %0 to i64*
  %7 = load i64, i64* %6, align 8
  store %class.SkTypeface* null, %class.SkTypeface** %5, align 8
  %8 = bitcast i8* %4 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTV15SkScalerContext, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %8, align 8
  %9 = getelementptr inbounds i8, i8* %4, i64 8
  %10 = bitcast i8* %9 to %struct.SkScalerContextRec*
  %11 = inttoptr i64 %7 to %class.SkTypeface*
  tail call void @_ZN15SkScalerContext13PreprocessRecERK10SkTypefaceRK22SkScalerContextEffectsRK12SkDescriptor(%struct.SkScalerContextRec* sret %10, %class.SkTypeface* dereferenceable(48) %11, %struct.SkScalerContextEffects* dereferenceable(16) %1, %class.SkDescriptor* dereferenceable(12) %2) #19
  %12 = getelementptr inbounds i8, i8* %4, i64 64
  %13 = bitcast i8* %12 to i64*
  store i64 %7, i64* %13, align 8
  %14 = getelementptr inbounds %struct.SkScalerContextEffects, %struct.SkScalerContextEffects* %1, i64 0, i32 0
  %15 = load %class.SkPathEffect*, %class.SkPathEffect** %14, align 8
  %16 = icmp eq %class.SkPathEffect* %15, null
  br i1 %16, label %20, label %17

17:                                               ; preds = %3
  %18 = getelementptr inbounds %class.SkPathEffect, %class.SkPathEffect* %15, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = atomicrmw add i32* %18, i32 1 monotonic, !noalias !42
  br label %20

20:                                               ; preds = %17, %3
  %21 = getelementptr inbounds i8, i8* %4, i64 72
  %22 = bitcast i8* %21 to %class.SkPathEffect**
  store %class.SkPathEffect* %15, %class.SkPathEffect** %22, align 8, !alias.scope !42
  %23 = getelementptr inbounds %struct.SkScalerContextEffects, %struct.SkScalerContextEffects* %1, i64 0, i32 1
  %24 = load %class.SkMaskFilter*, %class.SkMaskFilter** %23, align 8
  %25 = icmp eq %class.SkMaskFilter* %24, null
  br i1 %25, label %29, label %26

26:                                               ; preds = %20
  %27 = getelementptr inbounds %class.SkMaskFilter, %class.SkMaskFilter* %24, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %28 = atomicrmw add i32* %27, i32 1 monotonic, !noalias !45
  br label %29

29:                                               ; preds = %26, %20
  %30 = getelementptr inbounds i8, i8* %4, i64 80
  %31 = bitcast i8* %30 to %class.SkMaskFilter**
  store %class.SkMaskFilter* %24, %class.SkMaskFilter** %31, align 8, !alias.scope !45
  %32 = getelementptr inbounds i8, i8* %4, i64 88
  %33 = getelementptr inbounds i8, i8* %4, i64 40
  %34 = bitcast i8* %33 to float*
  %35 = load float, float* %34, align 8
  %36 = fcmp ult float %35, 0.000000e+00
  br i1 %36, label %37, label %41

37:                                               ; preds = %29
  %38 = load %class.SkPathEffect*, %class.SkPathEffect** %22, align 8
  %39 = icmp ne %class.SkPathEffect* %38, null
  %40 = zext i1 %39 to i8
  br label %41

41:                                               ; preds = %37, %29
  %42 = phi i8 [ 1, %29 ], [ %40, %37 ]
  store i8 %42, i8* %32, align 8
  %43 = getelementptr inbounds i8, i8* %4, i64 96
  br i1 %25, label %45, label %44

44:                                               ; preds = %41
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %43, i8 0, i64 32, i1 false) #19
  br label %47

45:                                               ; preds = %41
  %46 = bitcast i8* %43 to %class.SkTMaskPreBlend*
  tail call void @_ZN15SkScalerContext15GetMaskPreBlendERK18SkScalerContextRec(%class.SkTMaskPreBlend* sret %46, %struct.SkScalerContextRec* dereferenceable(52) %10) #19
  br label %47

47:                                               ; preds = %45, %44
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVZN15SkScalerContext9MakeEmptyE5sk_spI10SkTypefaceERK22SkScalerContextEffectsPK12SkDescriptorE21SkScalerContext_Empty, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %8, align 8
  %48 = bitcast i8* %4 to %class.SkScalerContext*
  ret %class.SkScalerContext* %48
}

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: nofree nounwind
declare i32 @__cxa_guard_acquire(i64*) local_unnamed_addr #12

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #13

; Function Attrs: nofree nounwind
declare void @__cxa_guard_release(i64*) local_unnamed_addr #12

declare void @_ZN11SkSemaphore6osWaitEv(%class.SkSemaphore*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN12SkTMaskGammaILi3ELi3ELi3EEC2Efff(%class.SkTMaskGamma*, float, float, float) unnamed_addr #0 comdat align 2 {
  %5 = getelementptr inbounds %class.SkTMaskGamma, %class.SkTMaskGamma* %0, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 1, i32* %5, align 4
  %6 = getelementptr inbounds %class.SkTMaskGamma, %class.SkTMaskGamma* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTV12SkTMaskGammaILi3ELi3ELi3EE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %6, align 8
  %7 = getelementptr inbounds %class.SkTMaskGamma, %class.SkTMaskGamma* %0, i64 0, i32 2
  store i8 0, i8* %7, align 4
  %8 = tail call dereferenceable(8) %class.SkColorSpaceLuminance* @_ZN21SkColorSpaceLuminance5FetchEf(float %2) #19
  %9 = tail call dereferenceable(8) %class.SkColorSpaceLuminance* @_ZN21SkColorSpaceLuminance5FetchEf(float %3) #19
  %10 = getelementptr inbounds %class.SkTMaskGamma, %class.SkTMaskGamma* %0, i64 0, i32 1, i64 0, i64 0
  tail call void @_Z33SkTMaskGamma_build_correcting_lutPhjfRK21SkColorSpaceLuminancefS2_f(i8* %10, i32 0, float %1, %class.SkColorSpaceLuminance* dereferenceable(8) %8, float %2, %class.SkColorSpaceLuminance* dereferenceable(8) %9, float %3) #19
  %11 = getelementptr inbounds %class.SkTMaskGamma, %class.SkTMaskGamma* %0, i64 0, i32 1, i64 1, i64 0
  tail call void @_Z33SkTMaskGamma_build_correcting_lutPhjfRK21SkColorSpaceLuminancefS2_f(i8* %11, i32 36, float %1, %class.SkColorSpaceLuminance* dereferenceable(8) %8, float %2, %class.SkColorSpaceLuminance* dereferenceable(8) %9, float %3) #19
  %12 = getelementptr inbounds %class.SkTMaskGamma, %class.SkTMaskGamma* %0, i64 0, i32 1, i64 2, i64 0
  tail call void @_Z33SkTMaskGamma_build_correcting_lutPhjfRK21SkColorSpaceLuminancefS2_f(i8* %12, i32 73, float %1, %class.SkColorSpaceLuminance* dereferenceable(8) %8, float %2, %class.SkColorSpaceLuminance* dereferenceable(8) %9, float %3) #19
  %13 = getelementptr inbounds %class.SkTMaskGamma, %class.SkTMaskGamma* %0, i64 0, i32 1, i64 3, i64 0
  tail call void @_Z33SkTMaskGamma_build_correcting_lutPhjfRK21SkColorSpaceLuminancefS2_f(i8* %13, i32 109, float %1, %class.SkColorSpaceLuminance* dereferenceable(8) %8, float %2, %class.SkColorSpaceLuminance* dereferenceable(8) %9, float %3) #19
  %14 = getelementptr inbounds %class.SkTMaskGamma, %class.SkTMaskGamma* %0, i64 0, i32 1, i64 4, i64 0
  tail call void @_Z33SkTMaskGamma_build_correcting_lutPhjfRK21SkColorSpaceLuminancefS2_f(i8* %14, i32 146, float %1, %class.SkColorSpaceLuminance* dereferenceable(8) %8, float %2, %class.SkColorSpaceLuminance* dereferenceable(8) %9, float %3) #19
  %15 = getelementptr inbounds %class.SkTMaskGamma, %class.SkTMaskGamma* %0, i64 0, i32 1, i64 5, i64 0
  tail call void @_Z33SkTMaskGamma_build_correcting_lutPhjfRK21SkColorSpaceLuminancefS2_f(i8* %15, i32 182, float %1, %class.SkColorSpaceLuminance* dereferenceable(8) %8, float %2, %class.SkColorSpaceLuminance* dereferenceable(8) %9, float %3) #19
  %16 = getelementptr inbounds %class.SkTMaskGamma, %class.SkTMaskGamma* %0, i64 0, i32 1, i64 6, i64 0
  tail call void @_Z33SkTMaskGamma_build_correcting_lutPhjfRK21SkColorSpaceLuminancefS2_f(i8* %16, i32 219, float %1, %class.SkColorSpaceLuminance* dereferenceable(8) %8, float %2, %class.SkColorSpaceLuminance* dereferenceable(8) %9, float %3) #19
  %17 = getelementptr inbounds %class.SkTMaskGamma, %class.SkTMaskGamma* %0, i64 0, i32 1, i64 7, i64 0
  tail call void @_Z33SkTMaskGamma_build_correcting_lutPhjfRK21SkColorSpaceLuminancefS2_f(i8* %17, i32 255, float %1, %class.SkColorSpaceLuminance* dereferenceable(8) %8, float %2, %class.SkColorSpaceLuminance* dereferenceable(8) %9, float %3) #19
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN12SkRefCntBaseD2Ev(%class.SkRefCntBase*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN12SkTMaskGammaILi3ELi3ELi3EED0Ev(%class.SkTMaskGamma*) unnamed_addr #14 comdat align 2 {
  %2 = bitcast %class.SkTMaskGamma* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #20
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK12SkRefCntBase16internal_disposeEv(%class.SkRefCntBase*) unnamed_addr #0 comdat align 2 {
  %2 = icmp eq %class.SkRefCntBase* %0, null
  br i1 %2, label %8, label %3

3:                                                ; preds = %1
  %4 = bitcast %class.SkRefCntBase* %0 to void (%class.SkRefCntBase*)***
  %5 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %4, align 8
  %6 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %5, i64 1
  %7 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %6, align 8
  tail call void %7(%class.SkRefCntBase* nonnull %0) #19
  br label %8

8:                                                ; preds = %3, %1
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #15

declare dereferenceable(8) %class.SkColorSpaceLuminance* @_ZN21SkColorSpaceLuminance5FetchEf(float) local_unnamed_addr #1

declare void @_Z33SkTMaskGamma_build_correcting_lutPhjfRK21SkColorSpaceLuminancefS2_f(i8*, i32, float, %class.SkColorSpaceLuminance* dereferenceable(8), float, %class.SkColorSpaceLuminance* dereferenceable(8), float) local_unnamed_addr #1

declare void @_ZN11SkSemaphore8osSignalEi(%class.SkSemaphore*, i32) local_unnamed_addr #1

declare zeroext i1 @_ZN6SkRect14setBoundsCheckEPK7SkPointi(%struct.SkRect*, %struct.SkPoint*, i32) local_unnamed_addr #1

; Function Attrs: nounwind readnone speculatable
declare float @llvm.ceil.f32(float) #9

declare i8* @_Z15sk_malloc_flagsmj(i64, i32) local_unnamed_addr #1

declare void @_Z7sk_freePv(i8*) local_unnamed_addr #1

declare void @_ZN7SkPaintC1Ev(%class.SkPaint*) unnamed_addr #1

declare dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix12setTranslateEff(%class.SkMatrix*, float, float) local_unnamed_addr #1

declare void @_ZN7SkPaint8setStyleENS_5StyleE(%class.SkPaint*, i8 zeroext) local_unnamed_addr #1

declare void @_ZN12SkRasterClipC1Ev(%class.SkRasterClip*) unnamed_addr #1

declare zeroext i1 @_ZN12SkRasterClip7setRectERK7SkIRect(%class.SkRasterClip*, %struct.SkIRect* dereferenceable(16)) local_unnamed_addr #1

declare void @_ZN19SkAutoPixmapStorageC1Ev(%class.SkAutoPixmapStorage*) unnamed_addr #1

declare zeroext i1 @_ZN19SkAutoPixmapStorage8tryAllocERK11SkImageInfo(%class.SkAutoPixmapStorage*, %struct.SkImageInfo* dereferenceable(24)) local_unnamed_addr #1

declare i64 @_ZNK6SkMask16computeImageSizeEv(%struct.SkMask*) local_unnamed_addr #1

declare void @_ZN6SkDrawC1Ev(%class.SkDraw*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZL13pack4xHToMaskRK8SkPixmapRK6SkMaskRK15SkTMaskPreBlendILi3ELi3ELi3EEbb(%class.SkPixmap* nocapture readonly dereferenceable(40), %struct.SkMask* nocapture readonly dereferenceable(32), %class.SkTMaskPreBlend* nocapture readonly dereferenceable(32), i1 zeroext, i1 zeroext) unnamed_addr #0 {
  %6 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 3
  %7 = load i8, i8* %6, align 4
  %8 = icmp eq i8 %7, 1
  %9 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 2, i32 1, i32 0
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 2, i32 1, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 2
  %16 = load i32, i32* %15, align 8
  %17 = zext i32 %16 to i64
  %18 = select i1 %8, i64 1, i64 2
  %19 = icmp sgt i32 %12, 0
  br i1 %19, label %20, label %31

20:                                               ; preds = %5
  %21 = select i1 %4, i64 %18, i64 %17
  %22 = select i1 %4, i64 %17, i64 %18
  %23 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 0
  %24 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 1
  %25 = add nsw i32 %10, 4
  %26 = icmp sgt i32 %25, -4
  %27 = getelementptr inbounds %class.SkTMaskPreBlend, %class.SkTMaskPreBlend* %2, i64 0, i32 2
  %28 = getelementptr inbounds %class.SkTMaskPreBlend, %class.SkTMaskPreBlend* %2, i64 0, i32 1
  %29 = getelementptr inbounds %class.SkTMaskPreBlend, %class.SkTMaskPreBlend* %2, i64 0, i32 3
  %30 = zext i32 %12 to i64
  br label %32

31:                                               ; preds = %41, %5
  ret void

32:                                               ; preds = %41, %20
  %33 = phi i64 [ 0, %20 ], [ %42, %41 ]
  %34 = load i8*, i8** %23, align 8
  %35 = load i64, i64* %24, align 8
  %36 = mul i64 %35, %33
  %37 = getelementptr inbounds i8, i8* %34, i64 %36
  br i1 %26, label %38, label %41

38:                                               ; preds = %32
  %39 = mul nuw nsw i64 %21, %33
  %40 = getelementptr inbounds i8, i8* %14, i64 %39
  br label %44

41:                                               ; preds = %217, %32
  %42 = add nuw nsw i64 %33, 1
  %43 = icmp eq i64 %42, %30
  br i1 %43, label %31, label %32

44:                                               ; preds = %38, %217
  %45 = phi i32 [ 0, %38 ], [ %223, %217 ]
  %46 = phi i32 [ 8, %38 ], [ %222, %217 ]
  %47 = phi i32 [ -8, %38 ], [ %221, %217 ]
  %48 = phi i32 [ -4, %38 ], [ %219, %217 ]
  %49 = phi i8* [ %40, %38 ], [ %218, %217 ]
  %50 = shl nuw i32 %45, 2
  %51 = add i32 %50, -8
  %52 = icmp sgt i32 %51, 0
  %53 = select i1 %52, i32 %51, i32 0
  %54 = zext i32 %53 to i64
  %55 = or i64 %54, 1
  %56 = add i32 %50, 4
  %57 = icmp slt i32 %10, %56
  %58 = select i1 %57, i32 %10, i32 %56
  %59 = sext i32 %58 to i64
  %60 = icmp sgt i64 %55, %59
  %61 = select i1 %60, i64 %55, i64 %59
  %62 = sub nsw i64 %61, %54
  %63 = icmp sgt i32 %47, 0
  %64 = select i1 %63, i32 %47, i32 0
  %65 = icmp sgt i32 %48, 4
  %66 = select i1 %65, i32 %48, i32 4
  %67 = add nsw i32 %66, -4
  %68 = add nsw i32 %48, 8
  %69 = icmp slt i32 %10, %68
  %70 = select i1 %69, i32 %10, i32 %68
  %71 = icmp slt i32 %67, %70
  br i1 %71, label %72, label %133

72:                                               ; preds = %44
  %73 = zext i32 %64 to i64
  %74 = add i32 %64, %46
  %75 = sext i32 %74 to i64
  %76 = sext i32 %70 to i64
  %77 = icmp ult i64 %62, 4
  br i1 %77, label %78, label %84

78:                                               ; preds = %116, %72
  %79 = phi i32 [ 0, %72 ], [ %131, %116 ]
  %80 = phi i32 [ 0, %72 ], [ %126, %116 ]
  %81 = phi i32 [ 0, %72 ], [ %121, %116 ]
  %82 = phi i64 [ %73, %72 ], [ %86, %116 ]
  %83 = phi i64 [ %75, %72 ], [ %87, %116 ]
  br label %148

84:                                               ; preds = %72
  %85 = and i64 %62, -4
  %86 = add nsw i64 %85, %73
  %87 = add nsw i64 %85, %75
  br label %88

88:                                               ; preds = %88, %84
  %89 = phi i64 [ 0, %84 ], [ %114, %88 ]
  %90 = phi <4 x i32> [ zeroinitializer, %84 ], [ %113, %88 ]
  %91 = phi <4 x i32> [ zeroinitializer, %84 ], [ %108, %88 ]
  %92 = phi <4 x i32> [ zeroinitializer, %84 ], [ %103, %88 ]
  %93 = add i64 %89, %73
  %94 = add i64 %89, %75
  %95 = getelementptr inbounds i8, i8* %37, i64 %93
  %96 = bitcast i8* %95 to <4 x i8>*
  %97 = load <4 x i8>, <4 x i8>* %96, align 1
  %98 = zext <4 x i8> %97 to <4 x i32>
  %99 = getelementptr inbounds [3 x [12 x i32]], [3 x [12 x i32]]* @_ZZL13pack4xHToMaskRK8SkPixmapRK6SkMaskRK15SkTMaskPreBlendILi3ELi3ELi3EEbbE12coefficients, i64 0, i64 0, i64 %94
  %100 = bitcast i32* %99 to <4 x i32>*
  %101 = load <4 x i32>, <4 x i32>* %100, align 4
  %102 = mul <4 x i32> %101, %98
  %103 = add <4 x i32> %92, %102
  %104 = getelementptr inbounds [3 x [12 x i32]], [3 x [12 x i32]]* @_ZZL13pack4xHToMaskRK8SkPixmapRK6SkMaskRK15SkTMaskPreBlendILi3ELi3ELi3EEbbE12coefficients, i64 0, i64 1, i64 %94
  %105 = bitcast i32* %104 to <4 x i32>*
  %106 = load <4 x i32>, <4 x i32>* %105, align 4
  %107 = mul <4 x i32> %106, %98
  %108 = add <4 x i32> %91, %107
  %109 = getelementptr inbounds [3 x [12 x i32]], [3 x [12 x i32]]* @_ZZL13pack4xHToMaskRK8SkPixmapRK6SkMaskRK15SkTMaskPreBlendILi3ELi3ELi3EEbbE12coefficients, i64 0, i64 2, i64 %94
  %110 = bitcast i32* %109 to <4 x i32>*
  %111 = load <4 x i32>, <4 x i32>* %110, align 4
  %112 = mul <4 x i32> %111, %98
  %113 = add <4 x i32> %90, %112
  %114 = add i64 %89, 4
  %115 = icmp eq i64 %114, %85
  br i1 %115, label %116, label %88, !llvm.loop !48

116:                                              ; preds = %88
  %117 = shufflevector <4 x i32> %103, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %118 = add <4 x i32> %103, %117
  %119 = shufflevector <4 x i32> %118, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %120 = add <4 x i32> %118, %119
  %121 = extractelement <4 x i32> %120, i32 0
  %122 = shufflevector <4 x i32> %108, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %123 = add <4 x i32> %108, %122
  %124 = shufflevector <4 x i32> %123, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %125 = add <4 x i32> %123, %124
  %126 = extractelement <4 x i32> %125, i32 0
  %127 = shufflevector <4 x i32> %113, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %128 = add <4 x i32> %113, %127
  %129 = shufflevector <4 x i32> %128, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %130 = add <4 x i32> %128, %129
  %131 = extractelement <4 x i32> %130, i32 0
  %132 = icmp eq i64 %62, %85
  br i1 %132, label %133, label %78

133:                                              ; preds = %148, %116, %44
  %134 = phi i32 [ 0, %44 ], [ %131, %116 ], [ %168, %148 ]
  %135 = phi i32 [ 0, %44 ], [ %126, %116 ], [ %164, %148 ]
  %136 = phi i32 [ 0, %44 ], [ %121, %116 ], [ %160, %148 ]
  %137 = sdiv i32 %136, 256
  %138 = icmp slt i32 %137, 255
  %139 = select i1 %138, i32 %137, i32 255
  %140 = sdiv i32 %135, 256
  %141 = icmp slt i32 %140, 255
  %142 = select i1 %141, i32 %140, i32 255
  %143 = sdiv i32 %134, 256
  %144 = icmp slt i32 %143, 255
  %145 = select i1 %144, i32 %143, i32 255
  %146 = select i1 %3, i32 %145, i32 %139
  %147 = select i1 %3, i32 %139, i32 %145
  br i1 %8, label %172, label %186

148:                                              ; preds = %78, %148
  %149 = phi i32 [ %168, %148 ], [ %79, %78 ]
  %150 = phi i32 [ %164, %148 ], [ %80, %78 ]
  %151 = phi i32 [ %160, %148 ], [ %81, %78 ]
  %152 = phi i64 [ %169, %148 ], [ %82, %78 ]
  %153 = phi i64 [ %170, %148 ], [ %83, %78 ]
  %154 = getelementptr inbounds i8, i8* %37, i64 %152
  %155 = load i8, i8* %154, align 1
  %156 = zext i8 %155 to i32
  %157 = getelementptr inbounds [3 x [12 x i32]], [3 x [12 x i32]]* @_ZZL13pack4xHToMaskRK8SkPixmapRK6SkMaskRK15SkTMaskPreBlendILi3ELi3ELi3EEbbE12coefficients, i64 0, i64 0, i64 %153
  %158 = load i32, i32* %157, align 4
  %159 = mul i32 %158, %156
  %160 = add i32 %151, %159
  %161 = getelementptr inbounds [3 x [12 x i32]], [3 x [12 x i32]]* @_ZZL13pack4xHToMaskRK8SkPixmapRK6SkMaskRK15SkTMaskPreBlendILi3ELi3ELi3EEbbE12coefficients, i64 0, i64 1, i64 %153
  %162 = load i32, i32* %161, align 4
  %163 = mul i32 %162, %156
  %164 = add i32 %150, %163
  %165 = getelementptr inbounds [3 x [12 x i32]], [3 x [12 x i32]]* @_ZZL13pack4xHToMaskRK8SkPixmapRK6SkMaskRK15SkTMaskPreBlendILi3ELi3ELi3EEbbE12coefficients, i64 0, i64 2, i64 %153
  %166 = load i32, i32* %165, align 4
  %167 = mul i32 %166, %156
  %168 = add i32 %149, %167
  %169 = add nuw nsw i64 %152, 1
  %170 = add nsw i64 %153, 1
  %171 = icmp slt i64 %169, %76
  br i1 %171, label %148, label %133, !llvm.loop !49

172:                                              ; preds = %133
  %173 = add nsw i32 %142, %146
  %174 = add nsw i32 %173, %147
  %175 = udiv i32 %174, 3
  %176 = load i8*, i8** %27, align 8
  %177 = icmp eq i8* %176, null
  br i1 %177, label %183, label %178

178:                                              ; preds = %172
  %179 = zext i32 %175 to i64
  %180 = getelementptr inbounds i8, i8* %176, i64 %179
  %181 = load i8, i8* %180, align 1
  %182 = zext i8 %181 to i32
  br label %183

183:                                              ; preds = %172, %178
  %184 = phi i32 [ %182, %178 ], [ %175, %172 ]
  %185 = trunc i32 %184 to i8
  store i8 %185, i8* %49, align 1
  br label %217

186:                                              ; preds = %133
  %187 = load i8*, i8** %27, align 8
  %188 = icmp eq i8* %187, null
  br i1 %188, label %204, label %189

189:                                              ; preds = %186
  %190 = load i8*, i8** %28, align 8
  %191 = zext i32 %146 to i64
  %192 = getelementptr inbounds i8, i8* %190, i64 %191
  %193 = load i8, i8* %192, align 1
  %194 = zext i8 %193 to i32
  %195 = zext i32 %142 to i64
  %196 = getelementptr inbounds i8, i8* %187, i64 %195
  %197 = load i8, i8* %196, align 1
  %198 = zext i8 %197 to i32
  %199 = load i8*, i8** %29, align 8
  %200 = zext i32 %147 to i64
  %201 = getelementptr inbounds i8, i8* %199, i64 %200
  %202 = load i8, i8* %201, align 1
  %203 = zext i8 %202 to i32
  br label %204

204:                                              ; preds = %186, %189
  %205 = phi i32 [ %194, %189 ], [ %146, %186 ]
  %206 = phi i32 [ %198, %189 ], [ %142, %186 ]
  %207 = phi i32 [ %203, %189 ], [ %147, %186 ]
  %208 = lshr i32 %205, 3
  %209 = shl i32 %208, 11
  %210 = lshr i32 %206, 2
  %211 = shl i32 %210, 5
  %212 = or i32 %211, %209
  %213 = lshr i32 %207, 3
  %214 = or i32 %212, %213
  %215 = trunc i32 %214 to i16
  %216 = bitcast i8* %49 to i16*
  store i16 %215, i16* %216, align 2
  br label %217

217:                                              ; preds = %204, %183
  %218 = getelementptr inbounds i8, i8* %49, i64 %22
  %219 = add nsw i32 %48, 4
  %220 = icmp slt i32 %219, %25
  %221 = add nsw i32 %47, 4
  %222 = add nsw i32 %46, -4
  %223 = add i32 %45, 1
  br i1 %220, label %44, label %41
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN16SkMatrixProviderD2Ev(%class.SkMatrixProvider*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind
declare void @_ZN19SkAutoPixmapStorageD1Ev(%class.SkAutoPixmapStorage*) unnamed_addr #6

; Function Attrs: nounwind
declare void @_ZN12SkRasterClipD1Ev(%class.SkRasterClip*) unnamed_addr #6

; Function Attrs: nounwind
declare void @_ZN7SkPaintD1Ev(%class.SkPaint*) unnamed_addr #6

declare void @_ZN8SkPixmap5resetERK11SkImageInfoPKvm(%class.SkPixmap*, %struct.SkImageInfo* dereferenceable(24), i8*, i64) local_unnamed_addr #1

declare i64 @_ZNK11SkImageInfo15computeByteSizeEm(%struct.SkImageInfo*, i64) local_unnamed_addr #1

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN22SkSimpleMatrixProviderD0Ev(%class.SkSimpleMatrixProvider*) unnamed_addr #14 comdat align 2 {
  %2 = bitcast %class.SkSimpleMatrixProvider* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #20
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK22SkSimpleMatrixProvider16getLocalToMarkerEjP5SkM44(%class.SkSimpleMatrixProvider*, i32, %class.SkM44*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK22SkSimpleMatrixProvider29localToDeviceHitsPixelCentersEv(%class.SkSimpleMatrixProvider*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

declare void @_ZNK6SkDraw8drawPathERK6SkPathRK7SkPaintPK8SkMatrixbbP9SkBlitter(%class.SkDraw*, %class.SkPath* dereferenceable(16), %class.SkPaint* dereferenceable(72), %class.SkMatrix*, i1 zeroext, i1 zeroext, %class.SkBlitter*) local_unnamed_addr #1

; Function Attrs: noreturn
declare void @_Z16SkAbort_FileLinePKciS0_z(i8*, i32, i8*, ...) local_unnamed_addr #16

declare void @_ZNK6SkPath6offsetEffPS_(%class.SkPath*, float, float, %class.SkPath*) local_unnamed_addr #1

declare zeroext i1 @_ZNK8SkMatrix17invertNonIdentityEPS_(%class.SkMatrix*, %class.SkMatrix*) local_unnamed_addr #1

declare i32 @_ZNK11SkStrokeRec8getStyleEv(%class.SkStrokeRec*) local_unnamed_addr #1

declare dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix8postSkewEff(%class.SkMatrix*, float, float) local_unnamed_addr #1

declare void @_ZNK8SkMatrix9mapPointsEP7SkPointPKS0_i(%class.SkMatrix*, %struct.SkPoint*, %struct.SkPoint*, i32) local_unnamed_addr #1

declare zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix*) local_unnamed_addr #1

declare i8* @_ZN12SkDescriptor8addEntryEjmPKv(%class.SkDescriptor*, i32, i64, i8*) local_unnamed_addr #1

declare void @_ZN12SkDescriptor15computeChecksumEv(%class.SkDescriptor*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN15SkScalerContextD2Ev(%class.SkScalerContext* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.SkScalerContext, %class.SkScalerContext* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTV15SkScalerContext, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.SkScalerContext, %class.SkScalerContext* %0, i64 0, i32 6, i32 0, i32 0
  %4 = load %class.SkTMaskGamma*, %class.SkTMaskGamma** %3, align 8
  %5 = icmp eq %class.SkTMaskGamma* %4, null
  br i1 %5, label %16, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %class.SkTMaskGamma, %class.SkTMaskGamma* %4, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = atomicrmw add i32* %7, i32 -1 acq_rel
  %9 = icmp eq i32 %8, 1
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = bitcast %class.SkTMaskGamma* %4 to %class.SkRefCntBase*
  %12 = bitcast %class.SkTMaskGamma* %4 to void (%class.SkRefCntBase*)***
  %13 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %12, align 8
  %14 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %13, i64 2
  %15 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %14, align 8
  tail call void %15(%class.SkRefCntBase* nonnull %11) #19
  br label %16

16:                                               ; preds = %1, %6, %10
  %17 = getelementptr inbounds %class.SkScalerContext, %class.SkScalerContext* %0, i64 0, i32 4, i32 0
  %18 = load %class.SkMaskFilter*, %class.SkMaskFilter** %17, align 8
  %19 = icmp eq %class.SkMaskFilter* %18, null
  br i1 %19, label %30, label %20

20:                                               ; preds = %16
  %21 = getelementptr inbounds %class.SkMaskFilter, %class.SkMaskFilter* %18, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %22 = atomicrmw add i32* %21, i32 -1 acq_rel
  %23 = icmp eq i32 %22, 1
  br i1 %23, label %24, label %30

24:                                               ; preds = %20
  %25 = bitcast %class.SkMaskFilter* %18 to %class.SkRefCntBase*
  %26 = bitcast %class.SkMaskFilter* %18 to void (%class.SkRefCntBase*)***
  %27 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %26, align 8
  %28 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %27, i64 2
  %29 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %28, align 8
  tail call void %29(%class.SkRefCntBase* nonnull %25) #19
  br label %30

30:                                               ; preds = %16, %20, %24
  %31 = getelementptr inbounds %class.SkScalerContext, %class.SkScalerContext* %0, i64 0, i32 3, i32 0
  %32 = load %class.SkPathEffect*, %class.SkPathEffect** %31, align 8
  %33 = icmp eq %class.SkPathEffect* %32, null
  br i1 %33, label %44, label %34

34:                                               ; preds = %30
  %35 = getelementptr inbounds %class.SkPathEffect, %class.SkPathEffect* %32, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %36 = atomicrmw add i32* %35, i32 -1 acq_rel
  %37 = icmp eq i32 %36, 1
  br i1 %37, label %38, label %44

38:                                               ; preds = %34
  %39 = bitcast %class.SkPathEffect* %32 to %class.SkRefCntBase*
  %40 = bitcast %class.SkPathEffect* %32 to void (%class.SkRefCntBase*)***
  %41 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %40, align 8
  %42 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %41, i64 2
  %43 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %42, align 8
  tail call void %43(%class.SkRefCntBase* nonnull %39) #19
  br label %44

44:                                               ; preds = %30, %34, %38
  %45 = getelementptr inbounds %class.SkScalerContext, %class.SkScalerContext* %0, i64 0, i32 2, i32 0
  %46 = load %class.SkTypeface*, %class.SkTypeface** %45, align 8
  %47 = icmp eq %class.SkTypeface* %46, null
  br i1 %47, label %58, label %48

48:                                               ; preds = %44
  %49 = getelementptr inbounds %class.SkTypeface, %class.SkTypeface* %46, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %50 = atomicrmw add i32* %49, i32 -1 acq_rel
  %51 = icmp eq i32 %50, 1
  br i1 %51, label %52, label %58

52:                                               ; preds = %48
  %53 = bitcast %class.SkTypeface* %46 to %class.SkRefCntBase*
  %54 = bitcast %class.SkTypeface* %46 to void (%class.SkRefCntBase*)***
  %55 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %54, align 8
  %56 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %55, i64 2
  %57 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %56, align 8
  tail call void %57(%class.SkRefCntBase* nonnull %53) #19
  br label %58

58:                                               ; preds = %44, %48, %52
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZZN15SkScalerContext9MakeEmptyE5sk_spI10SkTypefaceERK22SkScalerContextEffectsPK12SkDescriptorEN21SkScalerContext_EmptyD0Ev(%class.SkScalerContext_Empty*) unnamed_addr #14 align 2 {
  %2 = getelementptr inbounds %class.SkScalerContext_Empty, %class.SkScalerContext_Empty* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTV15SkScalerContext, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.SkScalerContext_Empty, %class.SkScalerContext_Empty* %0, i64 0, i32 0, i32 6, i32 0, i32 0
  %4 = load %class.SkTMaskGamma*, %class.SkTMaskGamma** %3, align 8
  %5 = icmp eq %class.SkTMaskGamma* %4, null
  br i1 %5, label %16, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %class.SkTMaskGamma, %class.SkTMaskGamma* %4, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = atomicrmw add i32* %7, i32 -1 acq_rel
  %9 = icmp eq i32 %8, 1
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = bitcast %class.SkTMaskGamma* %4 to %class.SkRefCntBase*
  %12 = bitcast %class.SkTMaskGamma* %4 to void (%class.SkRefCntBase*)***
  %13 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %12, align 8
  %14 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %13, i64 2
  %15 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %14, align 8
  tail call void %15(%class.SkRefCntBase* nonnull %11) #19
  br label %16

16:                                               ; preds = %10, %6, %1
  %17 = getelementptr inbounds %class.SkScalerContext_Empty, %class.SkScalerContext_Empty* %0, i64 0, i32 0, i32 4, i32 0
  %18 = load %class.SkMaskFilter*, %class.SkMaskFilter** %17, align 8
  %19 = icmp eq %class.SkMaskFilter* %18, null
  br i1 %19, label %30, label %20

20:                                               ; preds = %16
  %21 = getelementptr inbounds %class.SkMaskFilter, %class.SkMaskFilter* %18, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %22 = atomicrmw add i32* %21, i32 -1 acq_rel
  %23 = icmp eq i32 %22, 1
  br i1 %23, label %24, label %30

24:                                               ; preds = %20
  %25 = bitcast %class.SkMaskFilter* %18 to %class.SkRefCntBase*
  %26 = bitcast %class.SkMaskFilter* %18 to void (%class.SkRefCntBase*)***
  %27 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %26, align 8
  %28 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %27, i64 2
  %29 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %28, align 8
  tail call void %29(%class.SkRefCntBase* nonnull %25) #19
  br label %30

30:                                               ; preds = %24, %20, %16
  %31 = getelementptr inbounds %class.SkScalerContext_Empty, %class.SkScalerContext_Empty* %0, i64 0, i32 0, i32 3, i32 0
  %32 = load %class.SkPathEffect*, %class.SkPathEffect** %31, align 8
  %33 = icmp eq %class.SkPathEffect* %32, null
  br i1 %33, label %44, label %34

34:                                               ; preds = %30
  %35 = getelementptr inbounds %class.SkPathEffect, %class.SkPathEffect* %32, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %36 = atomicrmw add i32* %35, i32 -1 acq_rel
  %37 = icmp eq i32 %36, 1
  br i1 %37, label %38, label %44

38:                                               ; preds = %34
  %39 = bitcast %class.SkPathEffect* %32 to %class.SkRefCntBase*
  %40 = bitcast %class.SkPathEffect* %32 to void (%class.SkRefCntBase*)***
  %41 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %40, align 8
  %42 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %41, i64 2
  %43 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %42, align 8
  tail call void %43(%class.SkRefCntBase* nonnull %39) #19
  br label %44

44:                                               ; preds = %38, %34, %30
  %45 = getelementptr inbounds %class.SkScalerContext_Empty, %class.SkScalerContext_Empty* %0, i64 0, i32 0, i32 2, i32 0
  %46 = load %class.SkTypeface*, %class.SkTypeface** %45, align 8
  %47 = icmp eq %class.SkTypeface* %46, null
  br i1 %47, label %58, label %48

48:                                               ; preds = %44
  %49 = getelementptr inbounds %class.SkTypeface, %class.SkTypeface* %46, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %50 = atomicrmw add i32* %49, i32 -1 acq_rel
  %51 = icmp eq i32 %50, 1
  br i1 %51, label %52, label %58

52:                                               ; preds = %48
  %53 = bitcast %class.SkTypeface* %46 to %class.SkRefCntBase*
  %54 = bitcast %class.SkTypeface* %46 to void (%class.SkRefCntBase*)***
  %55 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %54, align 8
  %56 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %55, i64 2
  %57 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %56, align 8
  tail call void %57(%class.SkRefCntBase* nonnull %53) #19
  br label %58

58:                                               ; preds = %44, %48, %52
  %59 = bitcast %class.SkScalerContext_Empty* %0 to i8*
  tail call void @_ZdlPv(i8* %59) #20
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZZN15SkScalerContext9MakeEmptyE5sk_spI10SkTypefaceERK22SkScalerContextEffectsPK12SkDescriptorEN21SkScalerContext_Empty15generateAdvanceEP7SkGlyph(%class.SkScalerContext_Empty* nocapture readnone, %class.SkGlyph*) unnamed_addr #0 align 2 {
  tail call void @_ZN7SkGlyph11zeroMetricsEv(%class.SkGlyph* %1) #19
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZZN15SkScalerContext9MakeEmptyE5sk_spI10SkTypefaceERK22SkScalerContextEffectsPK12SkDescriptorEN21SkScalerContext_Empty15generateMetricsEP7SkGlyph(%class.SkScalerContext_Empty* nocapture readonly, %class.SkGlyph*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.SkScalerContext_Empty, %class.SkScalerContext_Empty* %0, i64 0, i32 0, i32 1, i32 12
  %4 = load i8, i8* %3, align 8
  %5 = getelementptr inbounds %class.SkGlyph, %class.SkGlyph* %1, i64 0, i32 8
  store i8 %4, i8* %5, align 8
  tail call void @_ZN7SkGlyph11zeroMetricsEv(%class.SkGlyph* %1) #19
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal void @_ZZN15SkScalerContext9MakeEmptyE5sk_spI10SkTypefaceERK22SkScalerContextEffectsPK12SkDescriptorEN21SkScalerContext_Empty13generateImageERK7SkGlyph(%class.SkScalerContext_Empty* nocapture, %class.SkGlyph* nocapture dereferenceable(40)) unnamed_addr #17 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZZN15SkScalerContext9MakeEmptyE5sk_spI10SkTypefaceERK22SkScalerContextEffectsPK12SkDescriptorEN21SkScalerContext_Empty12generatePathEtP6SkPath(%class.SkScalerContext_Empty* nocapture readnone, i16 zeroext, %class.SkPath*) unnamed_addr #0 align 2 {
  %4 = tail call dereferenceable(16) %class.SkPath* @_ZN6SkPath5resetEv(%class.SkPath* %2) #19
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZZN15SkScalerContext9MakeEmptyE5sk_spI10SkTypefaceERK22SkScalerContextEffectsPK12SkDescriptorEN21SkScalerContext_Empty19generateFontMetricsEP13SkFontMetrics(%class.SkScalerContext_Empty* nocapture readnone, %struct.SkFontMetrics*) unnamed_addr #0 align 2 {
  %3 = icmp eq %struct.SkFontMetrics* %1, null
  br i1 %3, label %6, label %4

4:                                                ; preds = %2
  %5 = bitcast %struct.SkFontMetrics* %1 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %5, i8 0, i64 64, i1 false) #19
  br label %6

6:                                                ; preds = %2, %4
  ret void
}

declare void @_ZN7SkGlyph11zeroMetricsEv(%class.SkGlyph*) local_unnamed_addr #1

declare dereferenceable(16) %class.SkPath* @_ZN6SkPath5resetEv(%class.SkPath*) local_unnamed_addr #1

; Function Attrs: nofree nounwind readonly
declare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #18

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { cold noreturn nounwind }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { inlinehint noreturn nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind readnone speculatable }
attributes #10 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nofree nounwind }
attributes #13 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #15 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #16 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #17 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #18 = { nofree nounwind readonly }
attributes #19 = { nounwind }
attributes #20 = { builtin nounwind }
attributes #21 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_Z9sk_ref_spI12SkPathEffectE5sk_spIT_EPS2_: argument 0"}
!4 = distinct !{!4, !"_Z9sk_ref_spI12SkPathEffectE5sk_spIT_EPS2_"}
!5 = !{!6}
!6 = distinct !{!6, !7, !"_Z9sk_ref_spI12SkMaskFilterE5sk_spIT_EPS2_: argument 0"}
!7 = distinct !{!7, !"_Z9sk_ref_spI12SkMaskFilterE5sk_spIT_EPS2_"}
!8 = !{!"branch_weights", i32 1, i32 1048575}
!9 = !{i8 0, i8 2}
!10 = !{!11}
!11 = distinct !{!11, !12, !"_ZNK12SkTMaskGammaILi3ELi3ELi3EE8preBlendEj: argument 0"}
!12 = distinct !{!12, !"_ZNK12SkTMaskGammaILi3ELi3ELi3EE8preBlendEj"}
!13 = !{!14, !11}
!14 = distinct !{!14, !15, !"_Z9sk_ref_spI12SkTMaskGammaILi3ELi3ELi3EEE5sk_spIT_EPKS3_: argument 0"}
!15 = distinct !{!15, !"_Z9sk_ref_spI12SkTMaskGammaILi3ELi3ELi3EEE5sk_spIT_EPKS3_"}
!16 = !{!17, !19}
!17 = distinct !{!17, !18, !"_ZN11SkImageInfo4MakeE7SkISize11SkColorType11SkAlphaType5sk_spI12SkColorSpaceE: argument 0"}
!18 = distinct !{!18, !"_ZN11SkImageInfo4MakeE7SkISize11SkColorType11SkAlphaType5sk_spI12SkColorSpaceE"}
!19 = distinct !{!19, !20, !"_ZN11SkImageInfo6MakeA8Eii: argument 0"}
!20 = distinct !{!20, !"_ZN11SkImageInfo6MakeA8Eii"}
!21 = !{!22}
!22 = distinct !{!22, !23}
!23 = distinct !{!23, !"LVerDomain"}
!24 = !{!25}
!25 = distinct !{!25, !23}
!26 = distinct !{!26, !27}
!27 = !{!"llvm.loop.isvectorized", i32 1}
!28 = distinct !{!28, !27}
!29 = distinct !{!29, !30}
!30 = !{!"llvm.loop.unroll.disable"}
!31 = distinct !{!31, !30}
!32 = !{!33, !35}
!33 = distinct !{!33, !34, !"_ZN8SkMatrix5ScaleEff: argument 0"}
!34 = distinct !{!34, !"_ZN8SkMatrix5ScaleEff"}
!35 = distinct !{!35, !36, !"_ZN10SkFontPriv14MakeTextMatrixEfff: argument 0"}
!36 = distinct !{!36, !"_ZN10SkFontPriv14MakeTextMatrixEfff"}
!37 = !{!38, !40}
!38 = distinct !{!38, !39, !"_ZN8SkMatrix5ScaleEff: argument 0"}
!39 = distinct !{!39, !"_ZN8SkMatrix5ScaleEff"}
!40 = distinct !{!40, !41, !"_ZN10SkFontPriv14MakeTextMatrixEfff: argument 0"}
!41 = distinct !{!41, !"_ZN10SkFontPriv14MakeTextMatrixEfff"}
!42 = !{!43}
!43 = distinct !{!43, !44, !"_Z9sk_ref_spI12SkPathEffectE5sk_spIT_EPS2_: argument 0"}
!44 = distinct !{!44, !"_Z9sk_ref_spI12SkPathEffectE5sk_spIT_EPS2_"}
!45 = !{!46}
!46 = distinct !{!46, !47, !"_Z9sk_ref_spI12SkMaskFilterE5sk_spIT_EPS2_: argument 0"}
!47 = distinct !{!47, !"_Z9sk_ref_spI12SkMaskFilterE5sk_spIT_EPS2_"}
!48 = distinct !{!48, !27}
!49 = distinct !{!49, !50, !27}
!50 = !{!"llvm.loop.unroll.runtime.disable"}
