; ModuleID = '../../ui/aura/client/screen_position_client.cc'
source_filename = "../../ui/aura/client/screen_position_client.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.ui::ClassProperty" = type { %"class.aura::client::ScreenPositionClient"*, i8*, void (i64)* }
%"class.aura::client::ScreenPositionClient" = type { i32 (...)** }
%"class.ui::PropertyHandler" = type { i32 (...)**, %"class.std::__1::map" }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair", %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { i64 }
%"class.aura::Window" = type { %"class.ui::LayerDelegate", %"class.ui::LayerOwner", %"class.ui::EventTarget", %"class.ui::GestureConsumer", %"class.ui::PropertyHandler", %"class.ui::metadata::MetaDataProvider", %"class.viz::HostFrameSinkClient", %"class.gfx::Rect", %"class.aura::WindowTreeHost"*, i32, i8, i8, %"class.aura::WindowDelegate"*, %"class.aura::Window"*, %"class.std::__1::vector.35", i8, i32, %class.SkRegion, i32, i8, i8, %"class.std::__1::unique_ptr.42", %"class.std::__1::unique_ptr.48", %"class.std::__1::vector.54", i32, i32, i32, [4 x i8], %"class.base::ObserverList.61", i32, %"class.viz::SubtreeCaptureId", float, %"class.viz::FrameSinkId", i8, i8, i8, %"class.std::__1::unique_ptr.78", %"class.base::WeakPtr.84" }
%"class.ui::LayerDelegate" = type { i32 (...)** }
%"class.ui::LayerOwner" = type { i32 (...)**, %"class.std::__1::unique_ptr", %"class.ui::Layer"*, %"class.base::ObserverList" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.4" }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %"class.ui::Layer"* }
%"class.ui::Layer" = type opaque
%"class.base::ObserverList" = type <{ %"class.std::__1::vector", %"class.base::LinkedList", i64, i32, [4 x i8] }>
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.base::internal::UncheckedObserverAdapter"*, %"class.base::internal::UncheckedObserverAdapter"*, %"class.std::__1::__compressed_pair.7" }
%"class.base::internal::UncheckedObserverAdapter" = type { i8* }
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::__compressed_pair_elem.8" = type { %"class.base::internal::UncheckedObserverAdapter"* }
%"class.base::LinkedList" = type { %"class.base::LinkNode" }
%"class.base::LinkNode" = type { %"class.base::internal::LinkNodeBase" }
%"class.base::internal::LinkNodeBase" = type { %"class.base::internal::LinkNodeBase"*, %"class.base::internal::LinkNodeBase"* }
%"class.ui::EventTarget" = type { i32 (...)**, %"class.std::__1::vector.12", %"class.std::__1::vector.19", %"class.ui::EventHandler"* }
%"class.std::__1::vector.12" = type { %"class.std::__1::__vector_base.13" }
%"class.std::__1::__vector_base.13" = type { %"struct.ui::EventTarget::PrioritizedHandler"*, %"struct.ui::EventTarget::PrioritizedHandler"*, %"class.std::__1::__compressed_pair.14" }
%"struct.ui::EventTarget::PrioritizedHandler" = type <{ %"class.ui::EventHandler"*, i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%"struct.std::__1::__compressed_pair_elem.15" = type { %"struct.ui::EventTarget::PrioritizedHandler"* }
%"class.std::__1::vector.19" = type { %"class.std::__1::__vector_base.20" }
%"class.std::__1::__vector_base.20" = type { %"class.ui::EventHandler"**, %"class.ui::EventHandler"**, %"class.std::__1::__compressed_pair.21" }
%"class.std::__1::__compressed_pair.21" = type { %"struct.std::__1::__compressed_pair_elem.22" }
%"struct.std::__1::__compressed_pair_elem.22" = type { %"class.ui::EventHandler"** }
%"class.ui::EventHandler" = type { i32 (...)**, %"class.std::__1::stack" }
%"class.std::__1::stack" = type { %"class.base::circular_deque" }
%"class.base::circular_deque" = type { %"class.base::internal::VectorBuffer", i64, i64 }
%"class.base::internal::VectorBuffer" = type { %"class.ui::EventDispatcher"**, i64 }
%"class.ui::EventDispatcher" = type opaque
%"class.ui::GestureConsumer" = type { i32 (...)** }
%"class.ui::metadata::MetaDataProvider" = type { i32 (...)**, %"class.std::__1::map.26" }
%"class.std::__1::map.26" = type { %"class.std::__1::__tree.27" }
%"class.std::__1::__tree.27" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.28", %"class.std::__1::__compressed_pair.32" }
%"class.std::__1::__compressed_pair.28" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.32" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.viz::HostFrameSinkClient" = type { i32 (...)** }
%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }
%"class.gfx::Point" = type { i32, i32 }
%"class.gfx::Size" = type { i32, i32 }
%"class.aura::WindowTreeHost" = type opaque
%"class.aura::WindowDelegate" = type opaque
%"class.std::__1::vector.35" = type { %"class.std::__1::__vector_base.36" }
%"class.std::__1::__vector_base.36" = type { %"class.aura::Window"**, %"class.aura::Window"**, %"class.std::__1::__compressed_pair.37" }
%"class.std::__1::__compressed_pair.37" = type { %"struct.std::__1::__compressed_pair_elem.38" }
%"struct.std::__1::__compressed_pair_elem.38" = type { %"class.aura::Window"** }
%class.SkRegion = type { %struct.SkIRect, %"struct.SkRegion::RunHead"* }
%struct.SkIRect = type { i32, i32, i32, i32 }
%"struct.SkRegion::RunHead" = type opaque
%"class.std::__1::unique_ptr.42" = type { %"class.std::__1::__compressed_pair.43" }
%"class.std::__1::__compressed_pair.43" = type { %"struct.std::__1::__compressed_pair_elem.44" }
%"struct.std::__1::__compressed_pair_elem.44" = type { %"class.aura::LayoutManager"* }
%"class.aura::LayoutManager" = type opaque
%"class.std::__1::unique_ptr.48" = type { %"class.std::__1::__compressed_pair.49" }
%"class.std::__1::__compressed_pair.49" = type { %"struct.std::__1::__compressed_pair_elem.50" }
%"struct.std::__1::__compressed_pair_elem.50" = type { %"class.aura::WindowTargeter"* }
%"class.aura::WindowTargeter" = type opaque
%"class.std::__1::vector.54" = type { %"class.std::__1::__vector_base.55" }
%"class.std::__1::__vector_base.55" = type { %"class.gfx::Rect"*, %"class.gfx::Rect"*, %"class.std::__1::__compressed_pair.56" }
%"class.std::__1::__compressed_pair.56" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%"struct.std::__1::__compressed_pair_elem.57" = type { %"class.gfx::Rect"* }
%"class.base::ObserverList.61" = type <{ %"class.std::__1::vector.62", %"class.base::LinkedList.75", i64, i32, [4 x i8] }>
%"class.std::__1::vector.62" = type { %"class.std::__1::__vector_base.63" }
%"class.std::__1::__vector_base.63" = type { %"class.base::internal::CheckedObserverAdapter"*, %"class.base::internal::CheckedObserverAdapter"*, %"class.std::__1::__compressed_pair.70" }
%"class.base::internal::CheckedObserverAdapter" = type { %"class.base::WeakPtr" }
%"class.base::WeakPtr" = type { %"class.base::internal::WeakPtrBase" }
%"class.base::internal::WeakPtrBase" = type { %"class.base::internal::WeakReference", i64 }
%"class.base::internal::WeakReference" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::internal::WeakReference::Flag" = type <{ %"class.base::RefCountedThreadSafe", %"class.base::AtomicFlag", [3 x i8] }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.64" }
%"struct.std::__1::__atomic_base.64" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.65" }
%"struct.std::__1::atomic.65" = type { %"struct.std::__1::__atomic_base.66" }
%"struct.std::__1::__atomic_base.66" = type { %"struct.std::__1::__atomic_base.67" }
%"struct.std::__1::__atomic_base.67" = type { %"struct.std::__1::__cxx_atomic_impl.68" }
%"struct.std::__1::__cxx_atomic_impl.68" = type { %"struct.std::__1::__cxx_atomic_base_impl.69" }
%"struct.std::__1::__cxx_atomic_base_impl.69" = type { i8 }
%"class.std::__1::__compressed_pair.70" = type { %"struct.std::__1::__compressed_pair_elem.71" }
%"struct.std::__1::__compressed_pair_elem.71" = type { %"class.base::internal::CheckedObserverAdapter"* }
%"class.base::LinkedList.75" = type { %"class.base::LinkNode.76" }
%"class.base::LinkNode.76" = type { %"class.base::internal::LinkNodeBase" }
%"class.viz::SubtreeCaptureId" = type { i32 }
%"class.viz::FrameSinkId" = type { i32, i32 }
%"class.std::__1::unique_ptr.78" = type { %"class.std::__1::__compressed_pair.79" }
%"class.std::__1::__compressed_pair.79" = type { %"struct.std::__1::__compressed_pair_elem.80" }
%"struct.std::__1::__compressed_pair_elem.80" = type { %"class.viz::ParentLocalSurfaceIdAllocator"* }
%"class.viz::ParentLocalSurfaceIdAllocator" = type opaque
%"class.base::WeakPtr.84" = type { %"class.base::internal::WeakPtrBase" }
%"class.gfx::PointF" = type { float, float }

@_ZN4aura6clientL30kScreenPositionClientKey_ValueE = internal constant %"struct.ui::ClassProperty" { %"class.aura::client::ScreenPositionClient"* null, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str, i32 0, i32 0), void (i64)* null }, align 8
@.str = private unnamed_addr constant [25 x i8] c"kScreenPositionClientKey\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2ui15PropertyHandler11SetPropertyIPN4aura6client20ScreenPositionClientEEEvPKNS_13ClassPropertyIT_EES7_(%"class.ui::PropertyHandler"*, %"struct.ui::ClassProperty"*, %"class.aura::client::ScreenPositionClient"*) local_unnamed_addr #0 align 2 {
  %4 = bitcast %"struct.ui::ClassProperty"* %1 to i8*
  %5 = getelementptr inbounds %"struct.ui::ClassProperty", %"struct.ui::ClassProperty"* %1, i64 0, i32 1
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"struct.ui::ClassProperty", %"struct.ui::ClassProperty"* %1, i64 0, i32 0
  %8 = load %"class.aura::client::ScreenPositionClient"*, %"class.aura::client::ScreenPositionClient"** %7, align 8
  %9 = icmp eq %"class.aura::client::ScreenPositionClient"* %8, %2
  br i1 %9, label %13, label %10

10:                                               ; preds = %3
  %11 = getelementptr inbounds %"struct.ui::ClassProperty", %"struct.ui::ClassProperty"* %1, i64 0, i32 2
  %12 = load void (i64)*, void (i64)** %11, align 8
  br label %13

13:                                               ; preds = %10, %3
  %14 = phi void (i64)* [ %12, %10 ], [ null, %3 ]
  %15 = ptrtoint %"class.aura::client::ScreenPositionClient"* %2 to i64
  %16 = ptrtoint %"class.aura::client::ScreenPositionClient"* %8 to i64
  %17 = tail call i64 @_ZN2ui15PropertyHandler19SetPropertyInternalEPKvPKcPFvlEll(%"class.ui::PropertyHandler"* %0, i8* %4, i8* %6, void (i64)* %14, i64 %15, i64 %16) #4
  %18 = getelementptr inbounds %"struct.ui::ClassProperty", %"struct.ui::ClassProperty"* %1, i64 0, i32 2
  %19 = load void (i64)*, void (i64)** %18, align 8
  %20 = icmp eq void (i64)* %19, null
  br i1 %20, label %26, label %21

21:                                               ; preds = %13
  %22 = bitcast %"struct.ui::ClassProperty"* %1 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = icmp eq i64 %17, %23
  br i1 %24, label %26, label %25

25:                                               ; preds = %21
  tail call void %19(i64 %17) #4
  br label %26

26:                                               ; preds = %13, %21, %25
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.aura::client::ScreenPositionClient"* @_ZNK2ui15PropertyHandler11GetPropertyIPN4aura6client20ScreenPositionClientEEET_PKNS_13ClassPropertyIS6_EE(%"class.ui::PropertyHandler"*, %"struct.ui::ClassProperty"*) local_unnamed_addr #0 align 2 {
  %3 = bitcast %"struct.ui::ClassProperty"* %1 to i8*
  %4 = bitcast %"struct.ui::ClassProperty"* %1 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = tail call i64 @_ZNK2ui15PropertyHandler19GetPropertyInternalEPKvl(%"class.ui::PropertyHandler"* %0, i8* %3, i64 %5) #4
  %7 = inttoptr i64 %6 to %"class.aura::client::ScreenPositionClient"*
  ret %"class.aura::client::ScreenPositionClient"* %7
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2ui15PropertyHandler13ClearPropertyIPN4aura6client20ScreenPositionClientEEEvPKNS_13ClassPropertyIT_EE(%"class.ui::PropertyHandler"*, %"struct.ui::ClassProperty"*) local_unnamed_addr #0 align 2 {
  %3 = bitcast %"struct.ui::ClassProperty"* %1 to i64*
  %4 = load i64, i64* %3, align 8
  %5 = bitcast %"struct.ui::ClassProperty"* %1 to i8*
  %6 = getelementptr inbounds %"struct.ui::ClassProperty", %"struct.ui::ClassProperty"* %1, i64 0, i32 1
  %7 = load i8*, i8** %6, align 8
  %8 = tail call i64 @_ZN2ui15PropertyHandler19SetPropertyInternalEPKvPKcPFvlEll(%"class.ui::PropertyHandler"* %0, i8* %5, i8* %7, void (i64)* null, i64 %4, i64 %4) #4
  %9 = getelementptr inbounds %"struct.ui::ClassProperty", %"struct.ui::ClassProperty"* %1, i64 0, i32 2
  %10 = load void (i64)*, void (i64)** %9, align 8
  %11 = icmp eq void (i64)* %10, null
  br i1 %11, label %16, label %12

12:                                               ; preds = %2
  %13 = load i64, i64* %3, align 8
  %14 = icmp eq i64 %8, %13
  br i1 %14, label %16, label %15

15:                                               ; preds = %12
  tail call void %10(i64 %8) #4
  br label %16

16:                                               ; preds = %2, %12, %15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4aura6client20ScreenPositionClient20ConvertPointToScreenEPKNS_6WindowEPN3gfx5PointE(%"class.aura::client::ScreenPositionClient"*, %"class.aura::Window"*, %"class.gfx::Point"* nocapture) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.gfx::PointF", align 4
  %5 = bitcast %"class.gfx::PointF"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #4
  %6 = getelementptr inbounds %"class.gfx::PointF", %"class.gfx::PointF"* %4, i64 0, i32 0
  %7 = getelementptr inbounds %"class.gfx::PointF", %"class.gfx::PointF"* %4, i64 0, i32 1
  %8 = getelementptr inbounds %"class.gfx::Point", %"class.gfx::Point"* %2, i64 0, i32 0
  %9 = load i32, i32* %8, align 4
  %10 = sitofp i32 %9 to float
  %11 = getelementptr inbounds %"class.gfx::Point", %"class.gfx::Point"* %2, i64 0, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = sitofp i32 %12 to float
  store float %10, float* %6, align 4
  store float %13, float* %7, align 4
  %14 = bitcast %"class.aura::client::ScreenPositionClient"* %0 to void (%"class.aura::client::ScreenPositionClient"*, %"class.aura::Window"*, %"class.gfx::PointF"*)***
  %15 = load void (%"class.aura::client::ScreenPositionClient"*, %"class.aura::Window"*, %"class.gfx::PointF"*)**, void (%"class.aura::client::ScreenPositionClient"*, %"class.aura::Window"*, %"class.gfx::PointF"*)*** %14, align 8
  %16 = getelementptr inbounds void (%"class.aura::client::ScreenPositionClient"*, %"class.aura::Window"*, %"class.gfx::PointF"*)*, void (%"class.aura::client::ScreenPositionClient"*, %"class.aura::Window"*, %"class.gfx::PointF"*)** %15, i64 2
  %17 = load void (%"class.aura::client::ScreenPositionClient"*, %"class.aura::Window"*, %"class.gfx::PointF"*)*, void (%"class.aura::client::ScreenPositionClient"*, %"class.aura::Window"*, %"class.gfx::PointF"*)** %16, align 8
  call void %17(%"class.aura::client::ScreenPositionClient"* %0, %"class.aura::Window"* %1, %"class.gfx::PointF"* nonnull %4) #4
  %18 = call i64 @_ZN3gfx14ToFlooredPointERKNS_6PointFE(%"class.gfx::PointF"* nonnull dereferenceable(8) %4) #4
  %19 = bitcast %"class.gfx::Point"* %2 to i64*
  store i64 %18, i64* %19, align 4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare i64 @_ZN3gfx14ToFlooredPointERKNS_6PointFE(%"class.gfx::PointF"* dereferenceable(8)) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4aura6client20ScreenPositionClient22ConvertPointFromScreenEPKNS_6WindowEPN3gfx5PointE(%"class.aura::client::ScreenPositionClient"*, %"class.aura::Window"*, %"class.gfx::Point"* nocapture) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.gfx::PointF", align 4
  %5 = bitcast %"class.gfx::PointF"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #4
  %6 = getelementptr inbounds %"class.gfx::PointF", %"class.gfx::PointF"* %4, i64 0, i32 0
  %7 = getelementptr inbounds %"class.gfx::PointF", %"class.gfx::PointF"* %4, i64 0, i32 1
  %8 = getelementptr inbounds %"class.gfx::Point", %"class.gfx::Point"* %2, i64 0, i32 0
  %9 = load i32, i32* %8, align 4
  %10 = sitofp i32 %9 to float
  %11 = getelementptr inbounds %"class.gfx::Point", %"class.gfx::Point"* %2, i64 0, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = sitofp i32 %12 to float
  store float %10, float* %6, align 4
  store float %13, float* %7, align 4
  %14 = bitcast %"class.aura::client::ScreenPositionClient"* %0 to void (%"class.aura::client::ScreenPositionClient"*, %"class.aura::Window"*, %"class.gfx::PointF"*)***
  %15 = load void (%"class.aura::client::ScreenPositionClient"*, %"class.aura::Window"*, %"class.gfx::PointF"*)**, void (%"class.aura::client::ScreenPositionClient"*, %"class.aura::Window"*, %"class.gfx::PointF"*)*** %14, align 8
  %16 = getelementptr inbounds void (%"class.aura::client::ScreenPositionClient"*, %"class.aura::Window"*, %"class.gfx::PointF"*)*, void (%"class.aura::client::ScreenPositionClient"*, %"class.aura::Window"*, %"class.gfx::PointF"*)** %15, i64 3
  %17 = load void (%"class.aura::client::ScreenPositionClient"*, %"class.aura::Window"*, %"class.gfx::PointF"*)*, void (%"class.aura::client::ScreenPositionClient"*, %"class.aura::Window"*, %"class.gfx::PointF"*)** %16, align 8
  call void %17(%"class.aura::client::ScreenPositionClient"* %0, %"class.aura::Window"* %1, %"class.gfx::PointF"* nonnull %4) #4
  %18 = call i64 @_ZN3gfx14ToFlooredPointERKNS_6PointFE(%"class.gfx::PointF"* nonnull dereferenceable(8) %4) #4
  %19 = bitcast %"class.gfx::Point"* %2 to i64*
  store i64 %18, i64* %19, align 4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4aura6client20ScreenPositionClient42ConvertPointToRootWindowIgnoringTransformsEPKNS_6WindowEPN3gfx5PointE(%"class.aura::client::ScreenPositionClient"* nocapture readnone, %"class.aura::Window"* readonly, %"class.gfx::Point"* nocapture) local_unnamed_addr #0 align 2 {
  %4 = icmp eq %"class.aura::Window"* %1, null
  br i1 %4, label %37, label %5

5:                                                ; preds = %3
  %6 = getelementptr inbounds %"class.gfx::Point", %"class.gfx::Point"* %2, i64 0, i32 0
  %7 = getelementptr inbounds %"class.gfx::Point", %"class.gfx::Point"* %2, i64 0, i32 1
  br label %8

8:                                                ; preds = %5, %13
  %9 = phi %"class.aura::Window"* [ %1, %5 ], [ %35, %13 ]
  %10 = getelementptr inbounds %"class.aura::Window", %"class.aura::Window"* %9, i64 0, i32 8
  %11 = load %"class.aura::WindowTreeHost"*, %"class.aura::WindowTreeHost"** %10, align 8
  %12 = icmp eq %"class.aura::WindowTreeHost"* %11, null
  br i1 %12, label %13, label %37

13:                                               ; preds = %8
  %14 = getelementptr inbounds %"class.aura::Window", %"class.aura::Window"* %9, i64 0, i32 7, i32 0
  %15 = bitcast %"class.gfx::Point"* %14 to i64*
  %16 = load i64, i64* %15, align 4
  %17 = trunc i64 %16 to i32
  %18 = lshr i64 %16, 32
  %19 = trunc i64 %18 to i32
  %20 = load i32, i32* %6, align 4
  %21 = icmp slt i32 %17, 0
  %22 = select i1 %21, i32 -2147483648, i32 2147483647
  %23 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %20, i32 %17) #4
  %24 = extractvalue { i32, i1 } %23, 1
  %25 = extractvalue { i32, i1 } %23, 0
  %26 = select i1 %24, i32 %22, i32 %25, !prof !2
  store i32 %26, i32* %6, align 4
  %27 = load i32, i32* %7, align 4
  %28 = icmp slt i32 %19, 0
  %29 = select i1 %28, i32 -2147483648, i32 2147483647
  %30 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %27, i32 %19) #4
  %31 = extractvalue { i32, i1 } %30, 1
  %32 = extractvalue { i32, i1 } %30, 0
  %33 = select i1 %31, i32 %29, i32 %32, !prof !2
  store i32 %33, i32* %7, align 4
  %34 = getelementptr inbounds %"class.aura::Window", %"class.aura::Window"* %9, i64 0, i32 13
  %35 = load %"class.aura::Window"*, %"class.aura::Window"** %34, align 8
  %36 = icmp eq %"class.aura::Window"* %35, null
  br i1 %36, label %37, label %8

37:                                               ; preds = %13, %8, %3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4aura6client20ScreenPositionClient38ConvertPointToScreenIgnoringTransformsEPKNS_6WindowEPN3gfx5PointE(%"class.aura::client::ScreenPositionClient"*, %"class.aura::Window"*, %"class.gfx::Point"* nocapture) local_unnamed_addr #0 align 2 {
  %4 = tail call %"class.aura::Window"* @_ZNK4aura6Window13GetRootWindowEv(%"class.aura::Window"* %1) #4
  %5 = icmp eq %"class.aura::Window"* %1, null
  br i1 %5, label %38, label %6

6:                                                ; preds = %3
  %7 = getelementptr inbounds %"class.gfx::Point", %"class.gfx::Point"* %2, i64 0, i32 0
  %8 = getelementptr inbounds %"class.gfx::Point", %"class.gfx::Point"* %2, i64 0, i32 1
  br label %9

9:                                                ; preds = %14, %6
  %10 = phi %"class.aura::Window"* [ %1, %6 ], [ %36, %14 ]
  %11 = getelementptr inbounds %"class.aura::Window", %"class.aura::Window"* %10, i64 0, i32 8
  %12 = load %"class.aura::WindowTreeHost"*, %"class.aura::WindowTreeHost"** %11, align 8
  %13 = icmp eq %"class.aura::WindowTreeHost"* %12, null
  br i1 %13, label %14, label %38

14:                                               ; preds = %9
  %15 = getelementptr inbounds %"class.aura::Window", %"class.aura::Window"* %10, i64 0, i32 7, i32 0
  %16 = bitcast %"class.gfx::Point"* %15 to i64*
  %17 = load i64, i64* %16, align 4
  %18 = trunc i64 %17 to i32
  %19 = lshr i64 %17, 32
  %20 = trunc i64 %19 to i32
  %21 = load i32, i32* %7, align 4
  %22 = icmp slt i32 %18, 0
  %23 = select i1 %22, i32 -2147483648, i32 2147483647
  %24 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %21, i32 %18) #4
  %25 = extractvalue { i32, i1 } %24, 1
  %26 = extractvalue { i32, i1 } %24, 0
  %27 = select i1 %25, i32 %23, i32 %26, !prof !2
  store i32 %27, i32* %7, align 4
  %28 = load i32, i32* %8, align 4
  %29 = icmp slt i32 %20, 0
  %30 = select i1 %29, i32 -2147483648, i32 2147483647
  %31 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %28, i32 %20) #4
  %32 = extractvalue { i32, i1 } %31, 1
  %33 = extractvalue { i32, i1 } %31, 0
  %34 = select i1 %32, i32 %30, i32 %33, !prof !2
  store i32 %34, i32* %8, align 4
  %35 = getelementptr inbounds %"class.aura::Window", %"class.aura::Window"* %10, i64 0, i32 13
  %36 = load %"class.aura::Window"*, %"class.aura::Window"** %35, align 8
  %37 = icmp eq %"class.aura::Window"* %36, null
  br i1 %37, label %38, label %9

38:                                               ; preds = %9, %14, %3
  %39 = bitcast %"class.aura::client::ScreenPositionClient"* %0 to i64 (%"class.aura::client::ScreenPositionClient"*, %"class.aura::Window"*)***
  %40 = load i64 (%"class.aura::client::ScreenPositionClient"*, %"class.aura::Window"*)**, i64 (%"class.aura::client::ScreenPositionClient"*, %"class.aura::Window"*)*** %39, align 8
  %41 = getelementptr inbounds i64 (%"class.aura::client::ScreenPositionClient"*, %"class.aura::Window"*)*, i64 (%"class.aura::client::ScreenPositionClient"*, %"class.aura::Window"*)** %40, i64 6
  %42 = load i64 (%"class.aura::client::ScreenPositionClient"*, %"class.aura::Window"*)*, i64 (%"class.aura::client::ScreenPositionClient"*, %"class.aura::Window"*)** %41, align 8
  %43 = tail call i64 %42(%"class.aura::client::ScreenPositionClient"* %0, %"class.aura::Window"* %4) #4
  %44 = trunc i64 %43 to i32
  %45 = lshr i64 %43, 32
  %46 = trunc i64 %45 to i32
  %47 = getelementptr inbounds %"class.gfx::Point", %"class.gfx::Point"* %2, i64 0, i32 0
  %48 = load i32, i32* %47, align 4
  %49 = icmp slt i32 %44, 0
  %50 = select i1 %49, i32 -2147483648, i32 2147483647
  %51 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %48, i32 %44) #4
  %52 = extractvalue { i32, i1 } %51, 1
  %53 = extractvalue { i32, i1 } %51, 0
  %54 = select i1 %52, i32 %50, i32 %53, !prof !2
  store i32 %54, i32* %47, align 4
  %55 = getelementptr inbounds %"class.gfx::Point", %"class.gfx::Point"* %2, i64 0, i32 1
  %56 = load i32, i32* %55, align 4
  %57 = icmp slt i32 %46, 0
  %58 = select i1 %57, i32 -2147483648, i32 2147483647
  %59 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %56, i32 %46) #4
  %60 = extractvalue { i32, i1 } %59, 1
  %61 = extractvalue { i32, i1 } %59, 0
  %62 = select i1 %60, i32 %58, i32 %61, !prof !2
  store i32 %62, i32* %55, align 4
  ret void
}

declare %"class.aura::Window"* @_ZNK4aura6Window13GetRootWindowEv(%"class.aura::Window"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4aura6client23SetScreenPositionClientEPNS_6WindowEPNS0_20ScreenPositionClientE(%"class.aura::Window"*, %"class.aura::client::ScreenPositionClient"*) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %"class.aura::Window", %"class.aura::Window"* %0, i64 0, i32 4
  %4 = ptrtoint %"class.aura::client::ScreenPositionClient"* %1 to i64
  %5 = tail call i64 @_ZN2ui15PropertyHandler19SetPropertyInternalEPKvPKcPFvlEll(%"class.ui::PropertyHandler"* %3, i8* bitcast (%"struct.ui::ClassProperty"* @_ZN4aura6clientL30kScreenPositionClientKey_ValueE to i8*), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str, i64 0, i64 0), void (i64)* null, i64 %4, i64 0) #4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.aura::client::ScreenPositionClient"* @_ZN4aura6client23GetScreenPositionClientEPKNS_6WindowE(%"class.aura::Window"*) local_unnamed_addr #0 {
  %2 = icmp eq %"class.aura::Window"* %0, null
  br i1 %2, label %7, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %"class.aura::Window", %"class.aura::Window"* %0, i64 0, i32 4
  %5 = tail call i64 @_ZNK2ui15PropertyHandler19GetPropertyInternalEPKvl(%"class.ui::PropertyHandler"* %4, i8* bitcast (%"struct.ui::ClassProperty"* @_ZN4aura6clientL30kScreenPositionClientKey_ValueE to i8*), i64 0) #4
  %6 = inttoptr i64 %5 to %"class.aura::client::ScreenPositionClient"*
  br label %7

7:                                                ; preds = %1, %3
  %8 = phi %"class.aura::client::ScreenPositionClient"* [ %6, %3 ], [ null, %1 ]
  ret %"class.aura::client::ScreenPositionClient"* %8
}

; Function Attrs: nounwind readnone speculatable
declare { i32, i1 } @llvm.sadd.with.overflow.i32(i32, i32) #3

declare i64 @_ZN2ui15PropertyHandler19SetPropertyInternalEPKvPKcPFvlEll(%"class.ui::PropertyHandler"*, i8*, i8*, void (i64)*, i64, i64) local_unnamed_addr #2

declare i64 @_ZNK2ui15PropertyHandler19GetPropertyInternalEPKvl(%"class.ui::PropertyHandler"*, i8*, i64) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
