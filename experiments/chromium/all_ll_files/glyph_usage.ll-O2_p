; ModuleID = '../../components/paint_preview/common/glyph_usage.cc'
source_filename = "../../components/paint_preview/common/glyph_usage.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.paint_preview::GlyphUsage" = type <{ i32 (...)**, i16, i16, [4 x i8] }>
%"class.paint_preview::DenseGlyphUsage" = type { %"class.paint_preview::GlyphUsage.base", %"class.std::__1::vector" }
%"class.paint_preview::GlyphUsage.base" = type <{ i32 (...)**, i16, i16 }>
%"class.std::__1::vector" = type { i64*, i64, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i64 }
%"class.paint_preview::SparseGlyphUsage" = type { %"class.paint_preview::GlyphUsage.base", %"class.base::internal::flat_tree" }
%"class.base::internal::flat_tree" = type { %"class.std::__1::vector.2" }
%"class.std::__1::vector.2" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i16*, i16*, %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { i16* }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.base::RepeatingCallback" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.base::internal::CallbackBaseCopyable" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.1" }
%"struct.std::__1::__atomic_base.1" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }

$_ZNSt3__16vectorIbNS_9allocatorIbEEEC2EmRKb = comdat any

$_ZNSt3__16vectorItNS_9allocatorItEEE7emplaceIJRKtEEENS_11__wrap_iterIPtEENS7_IPS5_EEDpOT_ = comdat any

@_ZTVN13paint_preview10GlyphUsageE = hidden unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.paint_preview::GlyphUsage"*)* @_ZN13paint_preview10GlyphUsageD2Ev to i8*), i8* bitcast (void (%"class.paint_preview::GlyphUsage"*)* @_ZN13paint_preview10GlyphUsageD0Ev to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*)] }, align 8
@_ZTVN13paint_preview15DenseGlyphUsageE = hidden unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.paint_preview::DenseGlyphUsage"*)* @_ZN13paint_preview15DenseGlyphUsageD2Ev to i8*), i8* bitcast (void (%"class.paint_preview::DenseGlyphUsage"*)* @_ZN13paint_preview15DenseGlyphUsageD0Ev to i8*), i8* bitcast (void (%"class.paint_preview::DenseGlyphUsage"*, i16)* @_ZN13paint_preview15DenseGlyphUsage3SetEt to i8*), i8* bitcast (i1 (%"class.paint_preview::DenseGlyphUsage"*, i16)* @_ZNK13paint_preview15DenseGlyphUsage5IsSetEt to i8*), i8* bitcast (void (%"class.paint_preview::DenseGlyphUsage"*, %"class.base::RepeatingCallback"*)* @_ZNK13paint_preview15DenseGlyphUsage7ForEachERKN4base17RepeatingCallbackIFvtEEE to i8*)] }, align 8
@_ZTVN13paint_preview16SparseGlyphUsageE = hidden unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.paint_preview::SparseGlyphUsage"*)* @_ZN13paint_preview16SparseGlyphUsageD2Ev to i8*), i8* bitcast (void (%"class.paint_preview::SparseGlyphUsage"*)* @_ZN13paint_preview16SparseGlyphUsageD0Ev to i8*), i8* bitcast (void (%"class.paint_preview::SparseGlyphUsage"*, i16)* @_ZN13paint_preview16SparseGlyphUsage3SetEt to i8*), i8* bitcast (i1 (%"class.paint_preview::SparseGlyphUsage"*, i16)* @_ZNK13paint_preview16SparseGlyphUsage5IsSetEt to i8*), i8* bitcast (void (%"class.paint_preview::SparseGlyphUsage"*, %"class.base::RepeatingCallback"*)* @_ZNK13paint_preview16SparseGlyphUsage7ForEachERKN4base17RepeatingCallbackIFvtEEE to i8*)] }, align 8

@_ZN13paint_preview10GlyphUsageD1Ev = hidden unnamed_addr alias void (%"class.paint_preview::GlyphUsage"*), void (%"class.paint_preview::GlyphUsage"*)* @_ZN13paint_preview10GlyphUsageD2Ev
@_ZN13paint_preview15DenseGlyphUsageC1Ev = hidden unnamed_addr alias void (%"class.paint_preview::DenseGlyphUsage"*), void (%"class.paint_preview::DenseGlyphUsage"*)* @_ZN13paint_preview15DenseGlyphUsageC2Ev
@_ZN13paint_preview15DenseGlyphUsageC1Et = hidden unnamed_addr alias void (%"class.paint_preview::DenseGlyphUsage"*, i16), void (%"class.paint_preview::DenseGlyphUsage"*, i16)* @_ZN13paint_preview15DenseGlyphUsageC2Et
@_ZN13paint_preview15DenseGlyphUsageD1Ev = hidden unnamed_addr alias void (%"class.paint_preview::DenseGlyphUsage"*), void (%"class.paint_preview::DenseGlyphUsage"*)* @_ZN13paint_preview15DenseGlyphUsageD2Ev
@_ZN13paint_preview16SparseGlyphUsageC1Ev = hidden unnamed_addr alias void (%"class.paint_preview::SparseGlyphUsage"*), void (%"class.paint_preview::SparseGlyphUsage"*)* @_ZN13paint_preview16SparseGlyphUsageC2Ev
@_ZN13paint_preview16SparseGlyphUsageC1Et = hidden unnamed_addr alias void (%"class.paint_preview::SparseGlyphUsage"*, i16), void (%"class.paint_preview::SparseGlyphUsage"*, i16)* @_ZN13paint_preview16SparseGlyphUsageC2Et
@_ZN13paint_preview16SparseGlyphUsageD1Ev = hidden unnamed_addr alias void (%"class.paint_preview::SparseGlyphUsage"*), void (%"class.paint_preview::SparseGlyphUsage"*)* @_ZN13paint_preview16SparseGlyphUsageD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN13paint_preview10GlyphUsageC2Ev(%"class.paint_preview::GlyphUsage"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.paint_preview::GlyphUsage", %"class.paint_preview::GlyphUsage"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN13paint_preview10GlyphUsageE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.paint_preview::GlyphUsage", %"class.paint_preview::GlyphUsage"* %0, i64 0, i32 1
  store i16 0, i16* %3, align 8
  %4 = getelementptr inbounds %"class.paint_preview::GlyphUsage", %"class.paint_preview::GlyphUsage"* %0, i64 0, i32 2
  store i16 0, i16* %4, align 2
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN13paint_preview10GlyphUsageC2Ett(%"class.paint_preview::GlyphUsage"* nocapture, i16 zeroext, i16 zeroext) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.paint_preview::GlyphUsage", %"class.paint_preview::GlyphUsage"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN13paint_preview10GlyphUsageE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %5 = getelementptr inbounds %"class.paint_preview::GlyphUsage", %"class.paint_preview::GlyphUsage"* %0, i64 0, i32 1
  store i16 %1, i16* %5, align 8
  %6 = getelementptr inbounds %"class.paint_preview::GlyphUsage", %"class.paint_preview::GlyphUsage"* %0, i64 0, i32 2
  store i16 %2, i16* %6, align 2
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN13paint_preview10GlyphUsageD2Ev(%"class.paint_preview::GlyphUsage"* nocapture) unnamed_addr #1 align 2 {
  ret void
}

; Function Attrs: noreturn nounwind ssp uwtable
define hidden void @_ZN13paint_preview10GlyphUsageD0Ev(%"class.paint_preview::GlyphUsage"* nocapture readnone) unnamed_addr #2 align 2 {
  tail call void @llvm.trap() #12
  unreachable
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13paint_preview15DenseGlyphUsageC2Ev(%"class.paint_preview::DenseGlyphUsage"* nocapture) unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.paint_preview::DenseGlyphUsage", %"class.paint_preview::DenseGlyphUsage"* %0, i64 0, i32 0, i32 0
  %3 = getelementptr inbounds %"class.paint_preview::DenseGlyphUsage", %"class.paint_preview::DenseGlyphUsage"* %0, i64 0, i32 0, i32 1
  store i16 0, i16* %3, align 8
  %4 = getelementptr inbounds %"class.paint_preview::DenseGlyphUsage", %"class.paint_preview::DenseGlyphUsage"* %0, i64 0, i32 0, i32 2
  store i16 0, i16* %4, align 2
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN13paint_preview15DenseGlyphUsageE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %5 = getelementptr inbounds %"class.paint_preview::DenseGlyphUsage", %"class.paint_preview::DenseGlyphUsage"* %0, i64 0, i32 1
  %6 = bitcast %"class.std::__1::vector"* %5 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 24, i1 false) #13
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIbNS_9allocatorIbEEEC2EmRKb(%"class.std::__1::vector"*, i64, i8* dereferenceable(1)) unnamed_addr #4 comdat align 2 {
  %4 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 1
  %5 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 2, i32 0, i32 0
  %6 = icmp eq i64 %1, 0
  %7 = bitcast %"class.std::__1::vector"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 24, i1 false)
  br i1 %6, label %48, label %8

8:                                                ; preds = %3
  %9 = icmp slt i64 %1, 0
  br i1 %9, label %10, label %12

10:                                               ; preds = %8
  %11 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %11) #12
  unreachable

12:                                               ; preds = %8
  %13 = add nsw i64 %1, -1
  %14 = lshr i64 %13, 6
  %15 = add nuw nsw i64 %14, 1
  %16 = shl nuw nsw i64 %15, 3
  %17 = tail call i8* @_Znwm(i64 %16) #14
  %18 = bitcast %"class.std::__1::vector"* %0 to i8**
  store i8* %17, i8** %18, align 8
  store i64 0, i64* %4, align 8
  store i64 %15, i64* %5, align 8
  %19 = load i8, i8* %2, align 1, !range !2
  %20 = icmp eq i8 %19, 0
  store i64 %1, i64* %4, align 8
  %21 = icmp ult i64 %1, 65
  %22 = bitcast i8* %17 to i64*
  %23 = getelementptr inbounds i64, i64* %22, i64 %14
  %24 = select i1 %21, i64* %22, i64* %23
  store i64 0, i64* %24, align 8
  %25 = lshr i64 %1, 6
  %26 = shl nuw nsw i64 %25, 3
  br i1 %20, label %37, label %27

27:                                               ; preds = %12
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %17, i8 -1, i64 %26, i1 false) #13
  %28 = and i64 %1, 63
  %29 = icmp eq i64 %28, 0
  br i1 %29, label %48, label %30

30:                                               ; preds = %27
  %31 = bitcast i8* %17 to i64*
  %32 = getelementptr inbounds i64, i64* %31, i64 %25
  %33 = sub nuw nsw i64 64, %28
  %34 = lshr i64 -1, %33
  %35 = load i64, i64* %32, align 8
  %36 = or i64 %35, %34
  store i64 %36, i64* %32, align 8
  br label %48

37:                                               ; preds = %12
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %17, i8 0, i64 %26, i1 false) #13
  %38 = and i64 %1, 63
  %39 = icmp eq i64 %38, 0
  br i1 %39, label %48, label %40

40:                                               ; preds = %37
  %41 = bitcast i8* %17 to i64*
  %42 = getelementptr inbounds i64, i64* %41, i64 %25
  %43 = sub nuw nsw i64 64, %38
  %44 = lshr i64 -1, %43
  %45 = xor i64 %44, -1
  %46 = load i64, i64* %42, align 8
  %47 = and i64 %46, %45
  store i64 %47, i64* %42, align 8
  br label %48

48:                                               ; preds = %40, %37, %30, %27, %3
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #5

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13paint_preview15DenseGlyphUsageC2Et(%"class.paint_preview::DenseGlyphUsage"*, i16 zeroext) unnamed_addr #4 align 2 {
  %3 = alloca i8, align 1
  %4 = getelementptr inbounds %"class.paint_preview::DenseGlyphUsage", %"class.paint_preview::DenseGlyphUsage"* %0, i64 0, i32 0, i32 0
  %5 = getelementptr inbounds %"class.paint_preview::DenseGlyphUsage", %"class.paint_preview::DenseGlyphUsage"* %0, i64 0, i32 0, i32 1
  store i16 1, i16* %5, align 8
  %6 = getelementptr inbounds %"class.paint_preview::DenseGlyphUsage", %"class.paint_preview::DenseGlyphUsage"* %0, i64 0, i32 0, i32 2
  store i16 %1, i16* %6, align 2
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN13paint_preview15DenseGlyphUsageE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %7 = getelementptr inbounds %"class.paint_preview::DenseGlyphUsage", %"class.paint_preview::DenseGlyphUsage"* %0, i64 0, i32 1
  %8 = zext i16 %1 to i64
  %9 = add nuw nsw i64 %8, 1
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %3) #13
  store i8 0, i8* %3, align 1
  call void @_ZNSt3__16vectorIbNS_9allocatorIbEEEC2EmRKb(%"class.std::__1::vector"* %7, i64 %9, i8* nonnull dereferenceable(1) %3)
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %3) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13paint_preview15DenseGlyphUsageD2Ev(%"class.paint_preview::DenseGlyphUsage"* nocapture) unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.paint_preview::DenseGlyphUsage", %"class.paint_preview::DenseGlyphUsage"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN13paint_preview15DenseGlyphUsageE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.paint_preview::DenseGlyphUsage", %"class.paint_preview::DenseGlyphUsage"* %0, i64 0, i32 1, i32 0
  %4 = load i64*, i64** %3, align 8
  %5 = icmp eq i64* %4, null
  br i1 %5, label %8, label %6

6:                                                ; preds = %1
  %7 = bitcast i64* %4 to i8*
  tail call void @_ZdlPv(i8* %7) #14
  br label %8

8:                                                ; preds = %1, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13paint_preview15DenseGlyphUsageD0Ev(%"class.paint_preview::DenseGlyphUsage"*) unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.paint_preview::DenseGlyphUsage", %"class.paint_preview::DenseGlyphUsage"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN13paint_preview15DenseGlyphUsageE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.paint_preview::DenseGlyphUsage", %"class.paint_preview::DenseGlyphUsage"* %0, i64 0, i32 1, i32 0
  %4 = load i64*, i64** %3, align 8
  %5 = icmp eq i64* %4, null
  br i1 %5, label %8, label %6

6:                                                ; preds = %1
  %7 = bitcast i64* %4 to i8*
  tail call void @_ZdlPv(i8* %7) #14
  br label %8

8:                                                ; preds = %1, %6
  %9 = bitcast %"class.paint_preview::DenseGlyphUsage"* %0 to i8*
  tail call void @_ZdlPv(i8* %9) #14
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13paint_preview15DenseGlyphUsage3SetEt(%"class.paint_preview::DenseGlyphUsage"* nocapture readonly, i16 zeroext) unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.paint_preview::DenseGlyphUsage", %"class.paint_preview::DenseGlyphUsage"* %0, i64 0, i32 0, i32 1
  %4 = load i16, i16* %3, align 8
  %5 = getelementptr inbounds %"class.paint_preview::DenseGlyphUsage", %"class.paint_preview::DenseGlyphUsage"* %0, i64 0, i32 0, i32 2
  %6 = load i16, i16* %5, align 2
  %7 = icmp ult i16 %4, %6
  br i1 %7, label %8, label %24

8:                                                ; preds = %2
  %9 = icmp eq i16 %1, 0
  br i1 %9, label %14, label %10

10:                                               ; preds = %8
  %11 = icmp ugt i16 %4, %1
  %12 = icmp ult i16 %6, %1
  %13 = or i1 %11, %12
  br i1 %13, label %24, label %14

14:                                               ; preds = %10, %8
  %15 = zext i16 %1 to i64
  %16 = getelementptr inbounds %"class.paint_preview::DenseGlyphUsage", %"class.paint_preview::DenseGlyphUsage"* %0, i64 0, i32 1, i32 0
  %17 = load i64*, i64** %16, align 8
  %18 = lshr i64 %15, 6
  %19 = getelementptr inbounds i64, i64* %17, i64 %18
  %20 = and i64 %15, 63
  %21 = shl i64 1, %20
  %22 = load i64, i64* %19, align 8
  %23 = or i64 %22, %21
  store i64 %23, i64* %19, align 8
  br label %24

24:                                               ; preds = %2, %10, %14
  ret void
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK13paint_preview15DenseGlyphUsage5IsSetEt(%"class.paint_preview::DenseGlyphUsage"* nocapture readonly, i16 zeroext) unnamed_addr #7 align 2 {
  %3 = getelementptr inbounds %"class.paint_preview::DenseGlyphUsage", %"class.paint_preview::DenseGlyphUsage"* %0, i64 0, i32 0, i32 1
  %4 = load i16, i16* %3, align 8
  %5 = getelementptr inbounds %"class.paint_preview::DenseGlyphUsage", %"class.paint_preview::DenseGlyphUsage"* %0, i64 0, i32 0, i32 2
  %6 = load i16, i16* %5, align 2
  %7 = icmp ult i16 %4, %6
  br i1 %7, label %8, label %25

8:                                                ; preds = %2
  %9 = icmp eq i16 %1, 0
  br i1 %9, label %14, label %10

10:                                               ; preds = %8
  %11 = icmp ugt i16 %4, %1
  %12 = icmp ult i16 %6, %1
  %13 = or i1 %11, %12
  br i1 %13, label %25, label %14

14:                                               ; preds = %10, %8
  %15 = zext i16 %1 to i64
  %16 = getelementptr inbounds %"class.paint_preview::DenseGlyphUsage", %"class.paint_preview::DenseGlyphUsage"* %0, i64 0, i32 1, i32 0
  %17 = load i64*, i64** %16, align 8
  %18 = lshr i64 %15, 6
  %19 = getelementptr inbounds i64, i64* %17, i64 %18
  %20 = and i64 %15, 63
  %21 = shl i64 1, %20
  %22 = load i64, i64* %19, align 8
  %23 = and i64 %22, %21
  %24 = icmp ne i64 %23, 0
  br label %25

25:                                               ; preds = %2, %10, %14
  %26 = phi i1 [ %24, %14 ], [ false, %10 ], [ false, %2 ]
  ret i1 %26
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK13paint_preview15DenseGlyphUsage7ForEachERKN4base17RepeatingCallbackIFvtEEE(%"class.paint_preview::DenseGlyphUsage"* nocapture readonly, %"class.base::RepeatingCallback"* nocapture readonly dereferenceable(8)) unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.paint_preview::DenseGlyphUsage", %"class.paint_preview::DenseGlyphUsage"* %0, i64 0, i32 1, i32 1
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %9, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.paint_preview::DenseGlyphUsage", %"class.paint_preview::DenseGlyphUsage"* %0, i64 0, i32 1, i32 0
  %8 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  br label %10

9:                                                ; preds = %28, %2
  ret void

10:                                               ; preds = %6, %28
  %11 = phi i64 [ %4, %6 ], [ %29, %28 ]
  %12 = phi i64 [ 0, %6 ], [ %31, %28 ]
  %13 = phi i16 [ 0, %6 ], [ %30, %28 ]
  %14 = load i64*, i64** %7, align 8
  %15 = lshr i64 %12, 6
  %16 = getelementptr inbounds i64, i64* %14, i64 %15
  %17 = and i64 %12, 63
  %18 = shl i64 1, %17
  %19 = load i64, i64* %16, align 8
  %20 = and i64 %19, %18
  %21 = icmp eq i64 %20, 0
  br i1 %21, label %28, label %22

22:                                               ; preds = %10
  %23 = load %"class.base::internal::BindStateBase"*, %"class.base::internal::BindStateBase"** %8, align 8
  %24 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %23, i64 0, i32 1
  %25 = bitcast void ()** %24 to void (%"class.base::internal::BindStateBase"*, i16)**
  %26 = load void (%"class.base::internal::BindStateBase"*, i16)*, void (%"class.base::internal::BindStateBase"*, i16)** %25, align 8
  tail call void %26(%"class.base::internal::BindStateBase"* %23, i16 zeroext %13) #13
  %27 = load i64, i64* %3, align 8
  br label %28

28:                                               ; preds = %10, %22
  %29 = phi i64 [ %11, %10 ], [ %27, %22 ]
  %30 = add i16 %13, 1
  %31 = zext i16 %30 to i64
  %32 = icmp ugt i64 %29, %31
  br i1 %32, label %10, label %9
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13paint_preview16SparseGlyphUsageC2Ev(%"class.paint_preview::SparseGlyphUsage"* nocapture) unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.paint_preview::SparseGlyphUsage", %"class.paint_preview::SparseGlyphUsage"* %0, i64 0, i32 0, i32 0
  %3 = getelementptr inbounds %"class.paint_preview::SparseGlyphUsage", %"class.paint_preview::SparseGlyphUsage"* %0, i64 0, i32 0, i32 1
  store i16 0, i16* %3, align 8
  %4 = getelementptr inbounds %"class.paint_preview::SparseGlyphUsage", %"class.paint_preview::SparseGlyphUsage"* %0, i64 0, i32 0, i32 2
  store i16 0, i16* %4, align 2
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN13paint_preview16SparseGlyphUsageE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %5 = getelementptr inbounds %"class.paint_preview::SparseGlyphUsage", %"class.paint_preview::SparseGlyphUsage"* %0, i64 0, i32 1
  %6 = bitcast %"class.base::internal::flat_tree"* %5 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 24, i1 false) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13paint_preview16SparseGlyphUsageC2Et(%"class.paint_preview::SparseGlyphUsage"* nocapture, i16 zeroext) unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.paint_preview::SparseGlyphUsage", %"class.paint_preview::SparseGlyphUsage"* %0, i64 0, i32 0, i32 0
  %4 = getelementptr inbounds %"class.paint_preview::SparseGlyphUsage", %"class.paint_preview::SparseGlyphUsage"* %0, i64 0, i32 0, i32 1
  store i16 1, i16* %4, align 8
  %5 = getelementptr inbounds %"class.paint_preview::SparseGlyphUsage", %"class.paint_preview::SparseGlyphUsage"* %0, i64 0, i32 0, i32 2
  store i16 %1, i16* %5, align 2
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN13paint_preview16SparseGlyphUsageE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %6 = getelementptr inbounds %"class.paint_preview::SparseGlyphUsage", %"class.paint_preview::SparseGlyphUsage"* %0, i64 0, i32 1
  %7 = bitcast %"class.base::internal::flat_tree"* %6 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 24, i1 false) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13paint_preview16SparseGlyphUsageD2Ev(%"class.paint_preview::SparseGlyphUsage"* nocapture) unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.paint_preview::SparseGlyphUsage", %"class.paint_preview::SparseGlyphUsage"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN13paint_preview16SparseGlyphUsageE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.paint_preview::SparseGlyphUsage", %"class.paint_preview::SparseGlyphUsage"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %4 = load i16*, i16** %3, align 8
  %5 = icmp eq i16* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = ptrtoint i16* %4 to i64
  %8 = getelementptr inbounds %"class.paint_preview::SparseGlyphUsage", %"class.paint_preview::SparseGlyphUsage"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  %9 = bitcast i16** %8 to i64*
  store i64 %7, i64* %9, align 8
  %10 = bitcast i16* %4 to i8*
  tail call void @_ZdlPv(i8* %10) #14
  br label %11

11:                                               ; preds = %1, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13paint_preview16SparseGlyphUsageD0Ev(%"class.paint_preview::SparseGlyphUsage"*) unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.paint_preview::SparseGlyphUsage", %"class.paint_preview::SparseGlyphUsage"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN13paint_preview16SparseGlyphUsageE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.paint_preview::SparseGlyphUsage", %"class.paint_preview::SparseGlyphUsage"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %4 = load i16*, i16** %3, align 8
  %5 = icmp eq i16* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = ptrtoint i16* %4 to i64
  %8 = getelementptr inbounds %"class.paint_preview::SparseGlyphUsage", %"class.paint_preview::SparseGlyphUsage"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  %9 = bitcast i16** %8 to i64*
  store i64 %7, i64* %9, align 8
  %10 = bitcast i16* %4 to i8*
  tail call void @_ZdlPv(i8* %10) #14
  br label %11

11:                                               ; preds = %1, %6
  %12 = bitcast %"class.paint_preview::SparseGlyphUsage"* %0 to i8*
  tail call void @_ZdlPv(i8* %12) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13paint_preview16SparseGlyphUsage3SetEt(%"class.paint_preview::SparseGlyphUsage"*, i16 zeroext) unnamed_addr #4 align 2 {
  %3 = alloca i16, align 2
  store i16 %1, i16* %3, align 2
  %4 = getelementptr inbounds %"class.paint_preview::SparseGlyphUsage", %"class.paint_preview::SparseGlyphUsage"* %0, i64 0, i32 0, i32 1
  %5 = load i16, i16* %4, align 8
  %6 = getelementptr inbounds %"class.paint_preview::SparseGlyphUsage", %"class.paint_preview::SparseGlyphUsage"* %0, i64 0, i32 0, i32 2
  %7 = load i16, i16* %6, align 2
  %8 = icmp ult i16 %5, %7
  br i1 %8, label %9, label %50

9:                                                ; preds = %2
  %10 = icmp eq i16 %1, 0
  br i1 %10, label %15, label %11

11:                                               ; preds = %9
  %12 = icmp ugt i16 %5, %1
  %13 = icmp ult i16 %7, %1
  %14 = or i1 %12, %13
  br i1 %14, label %50, label %15

15:                                               ; preds = %11, %9
  %16 = getelementptr inbounds %"class.paint_preview::SparseGlyphUsage", %"class.paint_preview::SparseGlyphUsage"* %0, i64 0, i32 1
  %17 = getelementptr inbounds %"class.base::internal::flat_tree", %"class.base::internal::flat_tree"* %16, i64 0, i32 0, i32 0, i32 0
  %18 = load i16*, i16** %17, align 8
  %19 = getelementptr inbounds %"class.paint_preview::SparseGlyphUsage", %"class.paint_preview::SparseGlyphUsage"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  %20 = bitcast i16** %19 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = ptrtoint i16* %18 to i64
  %23 = sub i64 %21, %22
  %24 = icmp eq i64 %23, 0
  %25 = inttoptr i64 %21 to i16*
  br i1 %24, label %41, label %26

26:                                               ; preds = %15
  %27 = ashr exact i64 %23, 1
  br label %28

28:                                               ; preds = %28, %26
  %29 = phi i16* [ %18, %26 ], [ %39, %28 ]
  %30 = phi i64 [ %27, %26 ], [ %38, %28 ]
  %31 = lshr i64 %30, 1
  %32 = getelementptr inbounds i16, i16* %29, i64 %31
  %33 = load i16, i16* %32, align 2
  %34 = icmp ult i16 %33, %1
  %35 = getelementptr inbounds i16, i16* %32, i64 1
  %36 = xor i64 %31, -1
  %37 = add i64 %30, %36
  %38 = select i1 %34, i64 %37, i64 %31
  %39 = select i1 %34, i16* %35, i16* %29
  %40 = icmp eq i64 %38, 0
  br i1 %40, label %41, label %28

41:                                               ; preds = %28, %15
  %42 = phi i16* [ %18, %15 ], [ %39, %28 ]
  %43 = icmp eq i16* %42, %25
  br i1 %43, label %47, label %44

44:                                               ; preds = %41
  %45 = load i16, i16* %42, align 2
  %46 = icmp ugt i16 %45, %1
  br i1 %46, label %47, label %50

47:                                               ; preds = %44, %41
  %48 = getelementptr inbounds %"class.base::internal::flat_tree", %"class.base::internal::flat_tree"* %16, i64 0, i32 0
  %49 = call i16* @_ZNSt3__16vectorItNS_9allocatorItEEE7emplaceIJRKtEEENS_11__wrap_iterIPtEENS7_IPS5_EEDpOT_(%"class.std::__1::vector.2"* %48, i16* %42, i16* nonnull dereferenceable(2) %3) #13
  br label %50

50:                                               ; preds = %47, %44, %2, %11
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK13paint_preview16SparseGlyphUsage5IsSetEt(%"class.paint_preview::SparseGlyphUsage"* nocapture readonly, i16 zeroext) unnamed_addr #8 align 2 {
  %3 = getelementptr inbounds %"class.paint_preview::SparseGlyphUsage", %"class.paint_preview::SparseGlyphUsage"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %4 = load i16*, i16** %3, align 8
  %5 = getelementptr inbounds %"class.paint_preview::SparseGlyphUsage", %"class.paint_preview::SparseGlyphUsage"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  %6 = bitcast i16** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = ptrtoint i16* %4 to i64
  %9 = sub i64 %7, %8
  %10 = icmp eq i64 %9, 0
  %11 = inttoptr i64 %7 to i16*
  br i1 %10, label %29, label %12

12:                                               ; preds = %2
  %13 = ashr exact i64 %9, 1
  br label %14

14:                                               ; preds = %14, %12
  %15 = phi i16* [ %4, %12 ], [ %25, %14 ]
  %16 = phi i64 [ %13, %12 ], [ %24, %14 ]
  %17 = lshr i64 %16, 1
  %18 = getelementptr inbounds i16, i16* %15, i64 %17
  %19 = load i16, i16* %18, align 2
  %20 = icmp ult i16 %19, %1
  %21 = getelementptr inbounds i16, i16* %18, i64 1
  %22 = xor i64 %17, -1
  %23 = add i64 %16, %22
  %24 = select i1 %20, i64 %23, i64 %17
  %25 = select i1 %20, i16* %21, i16* %15
  %26 = icmp eq i64 %24, 0
  br i1 %26, label %27, label %14

27:                                               ; preds = %14
  %28 = ptrtoint i16* %25 to i64
  br label %29

29:                                               ; preds = %27, %2
  %30 = phi i64 [ %28, %27 ], [ %8, %2 ]
  %31 = phi i16* [ %25, %27 ], [ %4, %2 ]
  %32 = icmp eq i16* %31, %11
  br i1 %32, label %39, label %33

33:                                               ; preds = %29
  %34 = load i16, i16* %31, align 2
  %35 = icmp ugt i16 %34, %1
  br i1 %35, label %39, label %36

36:                                               ; preds = %33
  %37 = getelementptr inbounds i16, i16* %31, i64 1
  %38 = ptrtoint i16* %37 to i64
  br label %39

39:                                               ; preds = %29, %33, %36
  %40 = phi i64 [ %38, %36 ], [ %30, %29 ], [ %30, %33 ]
  %41 = ptrtoint i16* %31 to i64
  %42 = icmp ne i64 %40, %41
  ret i1 %42
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK13paint_preview16SparseGlyphUsage7ForEachERKN4base17RepeatingCallbackIFvtEEE(%"class.paint_preview::SparseGlyphUsage"* nocapture readonly, %"class.base::RepeatingCallback"* nocapture readonly dereferenceable(8)) unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.paint_preview::SparseGlyphUsage", %"class.paint_preview::SparseGlyphUsage"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %4 = load i16*, i16** %3, align 8
  %5 = getelementptr inbounds %"class.paint_preview::SparseGlyphUsage", %"class.paint_preview::SparseGlyphUsage"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  %6 = load i16*, i16** %5, align 8
  %7 = icmp eq i16* %4, %6
  br i1 %7, label %10, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  br label %11

10:                                               ; preds = %11, %2
  ret void

11:                                               ; preds = %8, %11
  %12 = phi i16* [ %4, %8 ], [ %18, %11 ]
  %13 = load i16, i16* %12, align 2
  %14 = load %"class.base::internal::BindStateBase"*, %"class.base::internal::BindStateBase"** %9, align 8
  %15 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %14, i64 0, i32 1
  %16 = bitcast void ()** %15 to void (%"class.base::internal::BindStateBase"*, i16)**
  %17 = load void (%"class.base::internal::BindStateBase"*, i16)*, void (%"class.base::internal::BindStateBase"*, i16)** %16, align 8
  tail call void %17(%"class.base::internal::BindStateBase"* %14, i16 zeroext %13) #13
  %18 = getelementptr inbounds i16, i16* %12, i64 1
  %19 = icmp eq i16* %18, %6
  br i1 %19, label %10, label %11
}

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #9

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #10

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #11

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i16* @_ZNSt3__16vectorItNS_9allocatorItEEE7emplaceIJRKtEEENS_11__wrap_iterIPtEENS7_IPS5_EEDpOT_(%"class.std::__1::vector.2"*, i16*, i16* dereferenceable(2)) local_unnamed_addr #4 comdat align 2 {
  %4 = ptrtoint i16* %1 to i64
  %5 = bitcast i16* %1 to i8*
  %6 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %0, i64 0, i32 0, i32 0
  %7 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %0, i64 0, i32 0, i32 1
  %8 = load i16*, i16** %7, align 8
  %9 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %10 = load i16*, i16** %9, align 8
  %11 = icmp ult i16* %8, %10
  %12 = ptrtoint i16* %8 to i64
  %13 = ptrtoint i16* %10 to i64
  br i1 %11, label %14, label %157

14:                                               ; preds = %3
  %15 = icmp eq i16* %8, %1
  %16 = load i16, i16* %2, align 2
  br i1 %15, label %17, label %21

17:                                               ; preds = %14
  store i16 %16, i16* %1, align 2
  %18 = getelementptr inbounds i16, i16* %1, i64 1
  %19 = ptrtoint i16* %18 to i64
  %20 = bitcast i16** %7 to i64*
  store i64 %19, i64* %20, align 8
  br label %392

21:                                               ; preds = %14
  %22 = getelementptr inbounds i16, i16* %1, i64 1
  %23 = ptrtoint i16* %22 to i64
  %24 = sub i64 %12, %23
  %25 = ashr exact i64 %24, 1
  %26 = getelementptr inbounds i16, i16* %1, i64 %25
  %27 = bitcast i16** %7 to i64*
  %28 = icmp ult i16* %26, %8
  br i1 %28, label %29, label %142

29:                                               ; preds = %21
  %30 = sub nsw i64 0, %25
  %31 = getelementptr i16, i16* %8, i64 %30
  %32 = bitcast i16* %31 to i8*
  %33 = xor i64 %4, -1
  %34 = getelementptr i8, i8* %32, i64 %33
  %35 = ptrtoint i8* %34 to i64
  %36 = lshr i64 %35, 1
  %37 = add nuw i64 %36, 1
  %38 = icmp ult i64 %37, 16
  br i1 %38, label %39, label %42

39:                                               ; preds = %137, %42, %29
  %40 = phi i16* [ %8, %42 ], [ %8, %29 ], [ %60, %137 ]
  %41 = phi i16* [ %26, %42 ], [ %26, %29 ], [ %61, %137 ]
  br label %149

42:                                               ; preds = %29
  %43 = sub nsw i64 0, %25
  %44 = getelementptr i16, i16* %8, i64 %43
  %45 = bitcast i16* %44 to i8*
  %46 = xor i64 %4, -1
  %47 = getelementptr i8, i8* %45, i64 %46
  %48 = ptrtoint i8* %47 to i64
  %49 = lshr i64 %48, 1
  %50 = add nuw i64 %49, 1
  %51 = getelementptr i16, i16* %8, i64 %50
  %52 = add i64 %25, %49
  %53 = add i64 %52, 1
  %54 = getelementptr i16, i16* %1, i64 %53
  %55 = icmp ult i16* %8, %54
  %56 = icmp ult i16* %26, %51
  %57 = and i1 %55, %56
  br i1 %57, label %39, label %58

58:                                               ; preds = %42
  %59 = and i64 %37, -16
  %60 = getelementptr i16, i16* %8, i64 %59
  %61 = getelementptr i16, i16* %26, i64 %59
  %62 = add i64 %59, -16
  %63 = lshr exact i64 %62, 4
  %64 = add nuw nsw i64 %63, 1
  %65 = and i64 %64, 3
  %66 = icmp ult i64 %62, 48
  br i1 %66, label %118, label %67

67:                                               ; preds = %58
  %68 = sub nsw i64 %64, %65
  br label %69

69:                                               ; preds = %69, %67
  %70 = phi i64 [ 0, %67 ], [ %115, %69 ]
  %71 = phi i64 [ %68, %67 ], [ %116, %69 ]
  %72 = getelementptr i16, i16* %8, i64 %70
  %73 = getelementptr i16, i16* %26, i64 %70
  %74 = bitcast i16* %73 to <8 x i16>*
  %75 = load <8 x i16>, <8 x i16>* %74, align 2, !alias.scope !3
  %76 = getelementptr i16, i16* %73, i64 8
  %77 = bitcast i16* %76 to <8 x i16>*
  %78 = load <8 x i16>, <8 x i16>* %77, align 2, !alias.scope !3
  %79 = bitcast i16* %72 to <8 x i16>*
  store <8 x i16> %75, <8 x i16>* %79, align 2, !alias.scope !6, !noalias !3
  %80 = getelementptr i16, i16* %72, i64 8
  %81 = bitcast i16* %80 to <8 x i16>*
  store <8 x i16> %78, <8 x i16>* %81, align 2, !alias.scope !6, !noalias !3
  %82 = or i64 %70, 16
  %83 = getelementptr i16, i16* %8, i64 %82
  %84 = getelementptr i16, i16* %26, i64 %82
  %85 = bitcast i16* %84 to <8 x i16>*
  %86 = load <8 x i16>, <8 x i16>* %85, align 2, !alias.scope !3
  %87 = getelementptr i16, i16* %84, i64 8
  %88 = bitcast i16* %87 to <8 x i16>*
  %89 = load <8 x i16>, <8 x i16>* %88, align 2, !alias.scope !3
  %90 = bitcast i16* %83 to <8 x i16>*
  store <8 x i16> %86, <8 x i16>* %90, align 2, !alias.scope !6, !noalias !3
  %91 = getelementptr i16, i16* %83, i64 8
  %92 = bitcast i16* %91 to <8 x i16>*
  store <8 x i16> %89, <8 x i16>* %92, align 2, !alias.scope !6, !noalias !3
  %93 = or i64 %70, 32
  %94 = getelementptr i16, i16* %8, i64 %93
  %95 = getelementptr i16, i16* %26, i64 %93
  %96 = bitcast i16* %95 to <8 x i16>*
  %97 = load <8 x i16>, <8 x i16>* %96, align 2, !alias.scope !3
  %98 = getelementptr i16, i16* %95, i64 8
  %99 = bitcast i16* %98 to <8 x i16>*
  %100 = load <8 x i16>, <8 x i16>* %99, align 2, !alias.scope !3
  %101 = bitcast i16* %94 to <8 x i16>*
  store <8 x i16> %97, <8 x i16>* %101, align 2, !alias.scope !6, !noalias !3
  %102 = getelementptr i16, i16* %94, i64 8
  %103 = bitcast i16* %102 to <8 x i16>*
  store <8 x i16> %100, <8 x i16>* %103, align 2, !alias.scope !6, !noalias !3
  %104 = or i64 %70, 48
  %105 = getelementptr i16, i16* %8, i64 %104
  %106 = getelementptr i16, i16* %26, i64 %104
  %107 = bitcast i16* %106 to <8 x i16>*
  %108 = load <8 x i16>, <8 x i16>* %107, align 2, !alias.scope !3
  %109 = getelementptr i16, i16* %106, i64 8
  %110 = bitcast i16* %109 to <8 x i16>*
  %111 = load <8 x i16>, <8 x i16>* %110, align 2, !alias.scope !3
  %112 = bitcast i16* %105 to <8 x i16>*
  store <8 x i16> %108, <8 x i16>* %112, align 2, !alias.scope !6, !noalias !3
  %113 = getelementptr i16, i16* %105, i64 8
  %114 = bitcast i16* %113 to <8 x i16>*
  store <8 x i16> %111, <8 x i16>* %114, align 2, !alias.scope !6, !noalias !3
  %115 = add i64 %70, 64
  %116 = add i64 %71, -4
  %117 = icmp eq i64 %116, 0
  br i1 %117, label %118, label %69, !llvm.loop !8

118:                                              ; preds = %69, %58
  %119 = phi i64 [ 0, %58 ], [ %115, %69 ]
  %120 = icmp eq i64 %65, 0
  br i1 %120, label %137, label %121

121:                                              ; preds = %118, %121
  %122 = phi i64 [ %134, %121 ], [ %119, %118 ]
  %123 = phi i64 [ %135, %121 ], [ %65, %118 ]
  %124 = getelementptr i16, i16* %8, i64 %122
  %125 = getelementptr i16, i16* %26, i64 %122
  %126 = bitcast i16* %125 to <8 x i16>*
  %127 = load <8 x i16>, <8 x i16>* %126, align 2, !alias.scope !3
  %128 = getelementptr i16, i16* %125, i64 8
  %129 = bitcast i16* %128 to <8 x i16>*
  %130 = load <8 x i16>, <8 x i16>* %129, align 2, !alias.scope !3
  %131 = bitcast i16* %124 to <8 x i16>*
  store <8 x i16> %127, <8 x i16>* %131, align 2, !alias.scope !6, !noalias !3
  %132 = getelementptr i16, i16* %124, i64 8
  %133 = bitcast i16* %132 to <8 x i16>*
  store <8 x i16> %130, <8 x i16>* %133, align 2, !alias.scope !6, !noalias !3
  %134 = add i64 %122, 16
  %135 = add i64 %123, -1
  %136 = icmp eq i64 %135, 0
  br i1 %136, label %137, label %121, !llvm.loop !10

137:                                              ; preds = %121, %118
  %138 = icmp eq i64 %37, %59
  br i1 %138, label %139, label %39

139:                                              ; preds = %149, %137
  %140 = phi i16* [ %60, %137 ], [ %154, %149 ]
  %141 = ptrtoint i16* %140 to i64
  br label %142

142:                                              ; preds = %139, %21
  %143 = phi i64 [ %141, %139 ], [ %12, %21 ]
  store i64 %143, i64* %27, align 8
  %144 = icmp eq i64 %24, 0
  br i1 %144, label %156, label %145

145:                                              ; preds = %142
  %146 = sub nsw i64 0, %25
  %147 = getelementptr inbounds i16, i16* %8, i64 %146
  %148 = bitcast i16* %147 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 2 %148, i8* align 2 %5, i64 %24, i1 false) #13
  br label %156

149:                                              ; preds = %39, %149
  %150 = phi i16* [ %154, %149 ], [ %40, %39 ]
  %151 = phi i16* [ %153, %149 ], [ %41, %39 ]
  %152 = load i16, i16* %151, align 2
  store i16 %152, i16* %150, align 2
  %153 = getelementptr inbounds i16, i16* %151, i64 1
  %154 = getelementptr inbounds i16, i16* %150, i64 1
  %155 = icmp ult i16* %153, %8
  br i1 %155, label %149, label %139, !llvm.loop !12

156:                                              ; preds = %142, %145
  store i16 %16, i16* %1, align 2
  br label %392

157:                                              ; preds = %3
  %158 = bitcast i16** %7 to i64*
  %159 = bitcast %"class.std::__1::vector.2"* %0 to i64*
  %160 = load i64, i64* %159, align 8
  %161 = sub i64 %12, %160
  %162 = ashr exact i64 %161, 1
  %163 = add nsw i64 %162, 1
  %164 = icmp slt i64 %163, 0
  br i1 %164, label %165, label %167

165:                                              ; preds = %157
  %166 = bitcast %"class.std::__1::vector.2"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %166) #12
  unreachable

167:                                              ; preds = %157
  %168 = bitcast i16** %9 to i64*
  %169 = sub i64 %13, %160
  %170 = ashr exact i64 %169, 1
  %171 = icmp ult i64 %170, 4611686018427387903
  %172 = icmp ult i64 %169, %163
  %173 = select i1 %172, i64 %163, i64 %169
  %174 = select i1 %171, i64 %173, i64 9223372036854775807
  %175 = sub i64 %4, %160
  %176 = ashr exact i64 %175, 1
  %177 = icmp eq i64 %174, 0
  br i1 %177, label %185, label %178

178:                                              ; preds = %167
  %179 = icmp slt i64 %174, 0
  br i1 %179, label %180, label %181

180:                                              ; preds = %178
  tail call void @abort() #12
  unreachable

181:                                              ; preds = %178
  %182 = shl i64 %174, 1
  %183 = tail call i8* @_Znwm(i64 %182) #14
  %184 = bitcast i8* %183 to i16*
  br label %185

185:                                              ; preds = %167, %181
  %186 = phi i8* [ %183, %181 ], [ null, %167 ]
  %187 = phi i16* [ %184, %181 ], [ null, %167 ]
  %188 = getelementptr inbounds i16, i16* %187, i64 %176
  %189 = getelementptr inbounds i16, i16* %187, i64 %174
  %190 = ptrtoint i16* %189 to i64
  %191 = icmp eq i64 %176, %174
  br i1 %191, label %192, label %213

192:                                              ; preds = %185
  %193 = icmp sgt i64 %175, 0
  br i1 %193, label %194, label %198

194:                                              ; preds = %192
  %195 = add nuw nsw i64 %174, 1
  %196 = sdiv i64 %195, -2
  %197 = getelementptr inbounds i16, i16* %188, i64 %196
  br label %213

198:                                              ; preds = %192
  %199 = shl nuw i64 %174, 1
  %200 = select i1 %177, i64 1, i64 %199
  %201 = icmp slt i64 %200, 0
  br i1 %201, label %202, label %203

202:                                              ; preds = %198
  tail call void @abort() #12
  unreachable

203:                                              ; preds = %198
  %204 = lshr i64 %200, 2
  %205 = shl i64 %200, 1
  %206 = tail call i8* @_Znwm(i64 %205) #14
  %207 = bitcast i8* %206 to i16*
  %208 = getelementptr inbounds i16, i16* %207, i64 %204
  %209 = getelementptr inbounds i16, i16* %207, i64 %200
  %210 = ptrtoint i16* %209 to i64
  %211 = icmp eq i16* %187, null
  br i1 %211, label %213, label %212

212:                                              ; preds = %203
  tail call void @_ZdlPv(i8* %186) #14
  br label %213

213:                                              ; preds = %185, %194, %203, %212
  %214 = phi i16* [ %197, %194 ], [ %208, %203 ], [ %208, %212 ], [ %188, %185 ]
  %215 = phi i64 [ %190, %194 ], [ %210, %203 ], [ %210, %212 ], [ %190, %185 ]
  %216 = load i16, i16* %2, align 2
  store i16 %216, i16* %214, align 2
  %217 = getelementptr inbounds i16, i16* %214, i64 1
  %218 = load i16*, i16** %6, align 8
  %219 = ptrtoint i16* %218 to i64
  %220 = sub i64 %4, %219
  %221 = ashr exact i64 %220, 1
  %222 = sub nsw i64 0, %221
  %223 = getelementptr inbounds i16, i16* %214, i64 %222
  %224 = ptrtoint i16* %223 to i64
  %225 = icmp sgt i64 %220, 0
  br i1 %225, label %226, label %229

226:                                              ; preds = %213
  %227 = bitcast i16* %223 to i8*
  %228 = bitcast i16* %218 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %227, i8* align 2 %228, i64 %220, i1 false) #13
  br label %229

229:                                              ; preds = %226, %213
  %230 = load i16*, i16** %7, align 8
  %231 = icmp eq i16* %230, %1
  br i1 %231, label %385, label %232

232:                                              ; preds = %229
  %233 = getelementptr i16, i16* %230, i64 -1
  %234 = ptrtoint i16* %233 to i64
  %235 = sub i64 %234, %4
  %236 = lshr i64 %235, 1
  %237 = add nuw i64 %236, 1
  %238 = icmp ult i64 %237, 16
  br i1 %238, label %332, label %239

239:                                              ; preds = %232
  %240 = getelementptr i16, i16* %230, i64 -1
  %241 = ptrtoint i16* %240 to i64
  %242 = sub i64 %241, %4
  %243 = lshr i64 %242, 1
  %244 = add nuw i64 %243, 2
  %245 = getelementptr i16, i16* %214, i64 %244
  %246 = add nuw i64 %243, 1
  %247 = getelementptr i16, i16* %1, i64 %246
  %248 = icmp ult i16* %217, %247
  %249 = icmp ugt i16* %245, %1
  %250 = and i1 %248, %249
  br i1 %250, label %332, label %251

251:                                              ; preds = %239
  %252 = and i64 %237, -16
  %253 = getelementptr i16, i16* %217, i64 %252
  %254 = getelementptr i16, i16* %1, i64 %252
  %255 = add i64 %252, -16
  %256 = lshr exact i64 %255, 4
  %257 = add nuw nsw i64 %256, 1
  %258 = and i64 %257, 3
  %259 = icmp ult i64 %255, 48
  br i1 %259, label %311, label %260

260:                                              ; preds = %251
  %261 = sub nsw i64 %257, %258
  br label %262

262:                                              ; preds = %262, %260
  %263 = phi i64 [ 0, %260 ], [ %308, %262 ]
  %264 = phi i64 [ %261, %260 ], [ %309, %262 ]
  %265 = getelementptr i16, i16* %217, i64 %263
  %266 = getelementptr i16, i16* %1, i64 %263
  %267 = bitcast i16* %266 to <8 x i16>*
  %268 = load <8 x i16>, <8 x i16>* %267, align 2, !alias.scope !13
  %269 = getelementptr i16, i16* %266, i64 8
  %270 = bitcast i16* %269 to <8 x i16>*
  %271 = load <8 x i16>, <8 x i16>* %270, align 2, !alias.scope !13
  %272 = bitcast i16* %265 to <8 x i16>*
  store <8 x i16> %268, <8 x i16>* %272, align 2, !alias.scope !16, !noalias !13
  %273 = getelementptr i16, i16* %265, i64 8
  %274 = bitcast i16* %273 to <8 x i16>*
  store <8 x i16> %271, <8 x i16>* %274, align 2, !alias.scope !16, !noalias !13
  %275 = or i64 %263, 16
  %276 = getelementptr i16, i16* %217, i64 %275
  %277 = getelementptr i16, i16* %1, i64 %275
  %278 = bitcast i16* %277 to <8 x i16>*
  %279 = load <8 x i16>, <8 x i16>* %278, align 2, !alias.scope !13
  %280 = getelementptr i16, i16* %277, i64 8
  %281 = bitcast i16* %280 to <8 x i16>*
  %282 = load <8 x i16>, <8 x i16>* %281, align 2, !alias.scope !13
  %283 = bitcast i16* %276 to <8 x i16>*
  store <8 x i16> %279, <8 x i16>* %283, align 2, !alias.scope !16, !noalias !13
  %284 = getelementptr i16, i16* %276, i64 8
  %285 = bitcast i16* %284 to <8 x i16>*
  store <8 x i16> %282, <8 x i16>* %285, align 2, !alias.scope !16, !noalias !13
  %286 = or i64 %263, 32
  %287 = getelementptr i16, i16* %217, i64 %286
  %288 = getelementptr i16, i16* %1, i64 %286
  %289 = bitcast i16* %288 to <8 x i16>*
  %290 = load <8 x i16>, <8 x i16>* %289, align 2, !alias.scope !13
  %291 = getelementptr i16, i16* %288, i64 8
  %292 = bitcast i16* %291 to <8 x i16>*
  %293 = load <8 x i16>, <8 x i16>* %292, align 2, !alias.scope !13
  %294 = bitcast i16* %287 to <8 x i16>*
  store <8 x i16> %290, <8 x i16>* %294, align 2, !alias.scope !16, !noalias !13
  %295 = getelementptr i16, i16* %287, i64 8
  %296 = bitcast i16* %295 to <8 x i16>*
  store <8 x i16> %293, <8 x i16>* %296, align 2, !alias.scope !16, !noalias !13
  %297 = or i64 %263, 48
  %298 = getelementptr i16, i16* %217, i64 %297
  %299 = getelementptr i16, i16* %1, i64 %297
  %300 = bitcast i16* %299 to <8 x i16>*
  %301 = load <8 x i16>, <8 x i16>* %300, align 2, !alias.scope !13
  %302 = getelementptr i16, i16* %299, i64 8
  %303 = bitcast i16* %302 to <8 x i16>*
  %304 = load <8 x i16>, <8 x i16>* %303, align 2, !alias.scope !13
  %305 = bitcast i16* %298 to <8 x i16>*
  store <8 x i16> %301, <8 x i16>* %305, align 2, !alias.scope !16, !noalias !13
  %306 = getelementptr i16, i16* %298, i64 8
  %307 = bitcast i16* %306 to <8 x i16>*
  store <8 x i16> %304, <8 x i16>* %307, align 2, !alias.scope !16, !noalias !13
  %308 = add i64 %263, 64
  %309 = add i64 %264, -4
  %310 = icmp eq i64 %309, 0
  br i1 %310, label %311, label %262, !llvm.loop !18

311:                                              ; preds = %262, %251
  %312 = phi i64 [ 0, %251 ], [ %308, %262 ]
  %313 = icmp eq i64 %258, 0
  br i1 %313, label %330, label %314

314:                                              ; preds = %311, %314
  %315 = phi i64 [ %327, %314 ], [ %312, %311 ]
  %316 = phi i64 [ %328, %314 ], [ %258, %311 ]
  %317 = getelementptr i16, i16* %217, i64 %315
  %318 = getelementptr i16, i16* %1, i64 %315
  %319 = bitcast i16* %318 to <8 x i16>*
  %320 = load <8 x i16>, <8 x i16>* %319, align 2, !alias.scope !13
  %321 = getelementptr i16, i16* %318, i64 8
  %322 = bitcast i16* %321 to <8 x i16>*
  %323 = load <8 x i16>, <8 x i16>* %322, align 2, !alias.scope !13
  %324 = bitcast i16* %317 to <8 x i16>*
  store <8 x i16> %320, <8 x i16>* %324, align 2, !alias.scope !16, !noalias !13
  %325 = getelementptr i16, i16* %317, i64 8
  %326 = bitcast i16* %325 to <8 x i16>*
  store <8 x i16> %323, <8 x i16>* %326, align 2, !alias.scope !16, !noalias !13
  %327 = add i64 %315, 16
  %328 = add i64 %316, -1
  %329 = icmp eq i64 %328, 0
  br i1 %329, label %330, label %314, !llvm.loop !19

330:                                              ; preds = %314, %311
  %331 = icmp eq i64 %237, %252
  br i1 %331, label %385, label %332

332:                                              ; preds = %330, %239, %232
  %333 = phi i16* [ %217, %239 ], [ %217, %232 ], [ %253, %330 ]
  %334 = phi i16* [ %1, %239 ], [ %1, %232 ], [ %254, %330 ]
  %335 = ptrtoint i16* %334 to i64
  %336 = getelementptr i16, i16* %230, i64 -1
  %337 = ptrtoint i16* %336 to i64
  %338 = sub i64 %337, %335
  %339 = lshr i64 %338, 1
  %340 = add nuw i64 %339, 1
  %341 = and i64 %340, 7
  %342 = icmp eq i64 %341, 0
  br i1 %342, label %352, label %343

343:                                              ; preds = %332, %343
  %344 = phi i16* [ %349, %343 ], [ %333, %332 ]
  %345 = phi i16* [ %348, %343 ], [ %334, %332 ]
  %346 = phi i64 [ %350, %343 ], [ %341, %332 ]
  %347 = load i16, i16* %345, align 2
  store i16 %347, i16* %344, align 2
  %348 = getelementptr inbounds i16, i16* %345, i64 1
  %349 = getelementptr inbounds i16, i16* %344, i64 1
  %350 = add i64 %346, -1
  %351 = icmp eq i64 %350, 0
  br i1 %351, label %352, label %343, !llvm.loop !20

352:                                              ; preds = %343, %332
  %353 = phi i16* [ undef, %332 ], [ %349, %343 ]
  %354 = phi i16* [ %333, %332 ], [ %349, %343 ]
  %355 = phi i16* [ %334, %332 ], [ %348, %343 ]
  %356 = icmp ult i64 %338, 14
  br i1 %356, label %385, label %357

357:                                              ; preds = %352, %357
  %358 = phi i16* [ %383, %357 ], [ %354, %352 ]
  %359 = phi i16* [ %382, %357 ], [ %355, %352 ]
  %360 = load i16, i16* %359, align 2
  store i16 %360, i16* %358, align 2
  %361 = getelementptr inbounds i16, i16* %359, i64 1
  %362 = getelementptr inbounds i16, i16* %358, i64 1
  %363 = load i16, i16* %361, align 2
  store i16 %363, i16* %362, align 2
  %364 = getelementptr inbounds i16, i16* %359, i64 2
  %365 = getelementptr inbounds i16, i16* %358, i64 2
  %366 = load i16, i16* %364, align 2
  store i16 %366, i16* %365, align 2
  %367 = getelementptr inbounds i16, i16* %359, i64 3
  %368 = getelementptr inbounds i16, i16* %358, i64 3
  %369 = load i16, i16* %367, align 2
  store i16 %369, i16* %368, align 2
  %370 = getelementptr inbounds i16, i16* %359, i64 4
  %371 = getelementptr inbounds i16, i16* %358, i64 4
  %372 = load i16, i16* %370, align 2
  store i16 %372, i16* %371, align 2
  %373 = getelementptr inbounds i16, i16* %359, i64 5
  %374 = getelementptr inbounds i16, i16* %358, i64 5
  %375 = load i16, i16* %373, align 2
  store i16 %375, i16* %374, align 2
  %376 = getelementptr inbounds i16, i16* %359, i64 6
  %377 = getelementptr inbounds i16, i16* %358, i64 6
  %378 = load i16, i16* %376, align 2
  store i16 %378, i16* %377, align 2
  %379 = getelementptr inbounds i16, i16* %359, i64 7
  %380 = getelementptr inbounds i16, i16* %358, i64 7
  %381 = load i16, i16* %379, align 2
  store i16 %381, i16* %380, align 2
  %382 = getelementptr inbounds i16, i16* %359, i64 8
  %383 = getelementptr inbounds i16, i16* %358, i64 8
  %384 = icmp eq i16* %382, %230
  br i1 %384, label %385, label %357, !llvm.loop !21

385:                                              ; preds = %352, %357, %330, %229
  %386 = phi i16* [ %217, %229 ], [ %253, %330 ], [ %353, %352 ], [ %383, %357 ]
  %387 = ptrtoint i16* %386 to i64
  %388 = load i16*, i16** %6, align 8
  store i64 %224, i64* %159, align 8
  store i64 %387, i64* %158, align 8
  store i64 %215, i64* %168, align 8
  %389 = icmp eq i16* %388, null
  br i1 %389, label %392, label %390

390:                                              ; preds = %385
  %391 = bitcast i16* %388 to i8*
  tail call void @_ZdlPv(i8* %391) #14
  br label %392

392:                                              ; preds = %390, %385, %17, %156
  %393 = phi i16* [ %1, %17 ], [ %1, %156 ], [ %214, %385 ], [ %214, %390 ]
  ret i16* %393
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #5

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { cold noreturn nounwind }
attributes #4 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { noreturn nounwind }
attributes #13 = { nounwind }
attributes #14 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!4}
!4 = distinct !{!4, !5}
!5 = distinct !{!5, !"LVerDomain"}
!6 = !{!7}
!7 = distinct !{!7, !5}
!8 = distinct !{!8, !9}
!9 = !{!"llvm.loop.isvectorized", i32 1}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.unroll.disable"}
!12 = distinct !{!12, !9}
!13 = !{!14}
!14 = distinct !{!14, !15}
!15 = distinct !{!15, !"LVerDomain"}
!16 = !{!17}
!17 = distinct !{!17, !15}
!18 = distinct !{!18, !9}
!19 = distinct !{!19, !11}
!20 = distinct !{!20, !11}
!21 = distinct !{!21, !9}
