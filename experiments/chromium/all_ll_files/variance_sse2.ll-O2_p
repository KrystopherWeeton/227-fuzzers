; ModuleID = '../../third_party/libvpx/source/libvpx/vpx_dsp/x86/variance_sse2.c'
source_filename = "../../third_party/libvpx/source/libvpx/vpx_dsp/x86/variance_sse2.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @vpx_get_mb_ss_sse2(i16* nocapture readonly) local_unnamed_addr #0 {
  %2 = bitcast i16* %0 to <8 x i16>*
  %3 = load <8 x i16>, <8 x i16>* %2, align 1
  %4 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %3, <8 x i16> %3) #7
  %5 = getelementptr inbounds i16, i16* %0, i64 8
  %6 = bitcast i16* %5 to <8 x i16>*
  %7 = load <8 x i16>, <8 x i16>* %6, align 1
  %8 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %7, <8 x i16> %7) #7
  %9 = add <4 x i32> %8, %4
  %10 = getelementptr inbounds i16, i16* %0, i64 16
  %11 = bitcast i16* %10 to <8 x i16>*
  %12 = load <8 x i16>, <8 x i16>* %11, align 1
  %13 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %12, <8 x i16> %12) #7
  %14 = add <4 x i32> %13, %9
  %15 = getelementptr inbounds i16, i16* %0, i64 24
  %16 = bitcast i16* %15 to <8 x i16>*
  %17 = load <8 x i16>, <8 x i16>* %16, align 1
  %18 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %17, <8 x i16> %17) #7
  %19 = add <4 x i32> %18, %14
  %20 = getelementptr inbounds i16, i16* %0, i64 32
  %21 = bitcast i16* %20 to <8 x i16>*
  %22 = load <8 x i16>, <8 x i16>* %21, align 1
  %23 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %22, <8 x i16> %22) #7
  %24 = add <4 x i32> %23, %19
  %25 = getelementptr inbounds i16, i16* %0, i64 40
  %26 = bitcast i16* %25 to <8 x i16>*
  %27 = load <8 x i16>, <8 x i16>* %26, align 1
  %28 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %27, <8 x i16> %27) #7
  %29 = add <4 x i32> %28, %24
  %30 = getelementptr inbounds i16, i16* %0, i64 48
  %31 = bitcast i16* %30 to <8 x i16>*
  %32 = load <8 x i16>, <8 x i16>* %31, align 1
  %33 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %32, <8 x i16> %32) #7
  %34 = add <4 x i32> %33, %29
  %35 = getelementptr inbounds i16, i16* %0, i64 56
  %36 = bitcast i16* %35 to <8 x i16>*
  %37 = load <8 x i16>, <8 x i16>* %36, align 1
  %38 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %37, <8 x i16> %37) #7
  %39 = add <4 x i32> %38, %34
  %40 = getelementptr inbounds i16, i16* %0, i64 64
  %41 = bitcast i16* %40 to <8 x i16>*
  %42 = load <8 x i16>, <8 x i16>* %41, align 1
  %43 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %42, <8 x i16> %42) #7
  %44 = add <4 x i32> %43, %39
  %45 = getelementptr inbounds i16, i16* %0, i64 72
  %46 = bitcast i16* %45 to <8 x i16>*
  %47 = load <8 x i16>, <8 x i16>* %46, align 1
  %48 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %47, <8 x i16> %47) #7
  %49 = add <4 x i32> %48, %44
  %50 = getelementptr inbounds i16, i16* %0, i64 80
  %51 = bitcast i16* %50 to <8 x i16>*
  %52 = load <8 x i16>, <8 x i16>* %51, align 1
  %53 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %52, <8 x i16> %52) #7
  %54 = add <4 x i32> %53, %49
  %55 = getelementptr inbounds i16, i16* %0, i64 88
  %56 = bitcast i16* %55 to <8 x i16>*
  %57 = load <8 x i16>, <8 x i16>* %56, align 1
  %58 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %57, <8 x i16> %57) #7
  %59 = add <4 x i32> %58, %54
  %60 = getelementptr inbounds i16, i16* %0, i64 96
  %61 = bitcast i16* %60 to <8 x i16>*
  %62 = load <8 x i16>, <8 x i16>* %61, align 1
  %63 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %62, <8 x i16> %62) #7
  %64 = add <4 x i32> %63, %59
  %65 = getelementptr inbounds i16, i16* %0, i64 104
  %66 = bitcast i16* %65 to <8 x i16>*
  %67 = load <8 x i16>, <8 x i16>* %66, align 1
  %68 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %67, <8 x i16> %67) #7
  %69 = add <4 x i32> %68, %64
  %70 = getelementptr inbounds i16, i16* %0, i64 112
  %71 = bitcast i16* %70 to <8 x i16>*
  %72 = load <8 x i16>, <8 x i16>* %71, align 1
  %73 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %72, <8 x i16> %72) #7
  %74 = add <4 x i32> %73, %69
  %75 = getelementptr inbounds i16, i16* %0, i64 120
  %76 = bitcast i16* %75 to <8 x i16>*
  %77 = load <8 x i16>, <8 x i16>* %76, align 1
  %78 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %77, <8 x i16> %77) #7
  %79 = add <4 x i32> %78, %74
  %80 = getelementptr inbounds i16, i16* %0, i64 128
  %81 = bitcast i16* %80 to <8 x i16>*
  %82 = load <8 x i16>, <8 x i16>* %81, align 1
  %83 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %82, <8 x i16> %82) #7
  %84 = add <4 x i32> %83, %79
  %85 = getelementptr inbounds i16, i16* %0, i64 136
  %86 = bitcast i16* %85 to <8 x i16>*
  %87 = load <8 x i16>, <8 x i16>* %86, align 1
  %88 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %87, <8 x i16> %87) #7
  %89 = add <4 x i32> %88, %84
  %90 = getelementptr inbounds i16, i16* %0, i64 144
  %91 = bitcast i16* %90 to <8 x i16>*
  %92 = load <8 x i16>, <8 x i16>* %91, align 1
  %93 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %92, <8 x i16> %92) #7
  %94 = add <4 x i32> %93, %89
  %95 = getelementptr inbounds i16, i16* %0, i64 152
  %96 = bitcast i16* %95 to <8 x i16>*
  %97 = load <8 x i16>, <8 x i16>* %96, align 1
  %98 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %97, <8 x i16> %97) #7
  %99 = add <4 x i32> %98, %94
  %100 = getelementptr inbounds i16, i16* %0, i64 160
  %101 = bitcast i16* %100 to <8 x i16>*
  %102 = load <8 x i16>, <8 x i16>* %101, align 1
  %103 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %102, <8 x i16> %102) #7
  %104 = add <4 x i32> %103, %99
  %105 = getelementptr inbounds i16, i16* %0, i64 168
  %106 = bitcast i16* %105 to <8 x i16>*
  %107 = load <8 x i16>, <8 x i16>* %106, align 1
  %108 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %107, <8 x i16> %107) #7
  %109 = add <4 x i32> %108, %104
  %110 = getelementptr inbounds i16, i16* %0, i64 176
  %111 = bitcast i16* %110 to <8 x i16>*
  %112 = load <8 x i16>, <8 x i16>* %111, align 1
  %113 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %112, <8 x i16> %112) #7
  %114 = add <4 x i32> %113, %109
  %115 = getelementptr inbounds i16, i16* %0, i64 184
  %116 = bitcast i16* %115 to <8 x i16>*
  %117 = load <8 x i16>, <8 x i16>* %116, align 1
  %118 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %117, <8 x i16> %117) #7
  %119 = add <4 x i32> %118, %114
  %120 = getelementptr inbounds i16, i16* %0, i64 192
  %121 = bitcast i16* %120 to <8 x i16>*
  %122 = load <8 x i16>, <8 x i16>* %121, align 1
  %123 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %122, <8 x i16> %122) #7
  %124 = add <4 x i32> %123, %119
  %125 = getelementptr inbounds i16, i16* %0, i64 200
  %126 = bitcast i16* %125 to <8 x i16>*
  %127 = load <8 x i16>, <8 x i16>* %126, align 1
  %128 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %127, <8 x i16> %127) #7
  %129 = add <4 x i32> %128, %124
  %130 = getelementptr inbounds i16, i16* %0, i64 208
  %131 = bitcast i16* %130 to <8 x i16>*
  %132 = load <8 x i16>, <8 x i16>* %131, align 1
  %133 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %132, <8 x i16> %132) #7
  %134 = add <4 x i32> %133, %129
  %135 = getelementptr inbounds i16, i16* %0, i64 216
  %136 = bitcast i16* %135 to <8 x i16>*
  %137 = load <8 x i16>, <8 x i16>* %136, align 1
  %138 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %137, <8 x i16> %137) #7
  %139 = add <4 x i32> %138, %134
  %140 = getelementptr inbounds i16, i16* %0, i64 224
  %141 = bitcast i16* %140 to <8 x i16>*
  %142 = load <8 x i16>, <8 x i16>* %141, align 1
  %143 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %142, <8 x i16> %142) #7
  %144 = add <4 x i32> %143, %139
  %145 = getelementptr inbounds i16, i16* %0, i64 232
  %146 = bitcast i16* %145 to <8 x i16>*
  %147 = load <8 x i16>, <8 x i16>* %146, align 1
  %148 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %147, <8 x i16> %147) #7
  %149 = add <4 x i32> %148, %144
  %150 = getelementptr inbounds i16, i16* %0, i64 240
  %151 = bitcast i16* %150 to <8 x i16>*
  %152 = load <8 x i16>, <8 x i16>* %151, align 1
  %153 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %152, <8 x i16> %152) #7
  %154 = add <4 x i32> %153, %149
  %155 = getelementptr inbounds i16, i16* %0, i64 248
  %156 = bitcast i16* %155 to <8 x i16>*
  %157 = load <8 x i16>, <8 x i16>* %156, align 1
  %158 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %157, <8 x i16> %157) #7
  %159 = add <4 x i32> %158, %154
  %160 = bitcast <4 x i32> %159 to <16 x i8>
  %161 = shufflevector <16 x i8> %160, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %162 = bitcast <16 x i8> %161 to <4 x i32>
  %163 = add <4 x i32> %159, %162
  %164 = bitcast <4 x i32> %163 to <16 x i8>
  %165 = shufflevector <16 x i8> %164, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %166 = bitcast <16 x i8> %165 to <4 x i32>
  %167 = add <4 x i32> %163, %166
  %168 = extractelement <4 x i32> %167, i32 0
  ret i32 %168
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_get8x8var_sse2(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i32* nocapture, i32* nocapture) local_unnamed_addr #2 {
  %7 = sext i32 %1 to i64
  %8 = sext i32 %3 to i64
  %9 = bitcast i8* %0 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = insertelement <2 x i64> undef, i64 %10, i32 0
  %12 = bitcast <2 x i64> %11 to <16 x i8>
  %13 = shufflevector <16 x i8> %12, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %14 = bitcast i8* %2 to i64*
  %15 = load i64, i64* %14, align 1
  %16 = insertelement <2 x i64> undef, i64 %15, i32 0
  %17 = bitcast <2 x i64> %16 to <16 x i8>
  %18 = shufflevector <16 x i8> %17, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %19 = bitcast <16 x i8> %13 to <8 x i16>
  %20 = bitcast <16 x i8> %18 to <8 x i16>
  %21 = sub <8 x i16> %19, %20
  %22 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %21, <8 x i16> %21) #7
  %23 = getelementptr inbounds i8, i8* %0, i64 %7
  %24 = getelementptr inbounds i8, i8* %2, i64 %8
  %25 = bitcast i8* %23 to i64*
  %26 = load i64, i64* %25, align 1
  %27 = insertelement <2 x i64> undef, i64 %26, i32 0
  %28 = bitcast <2 x i64> %27 to <16 x i8>
  %29 = shufflevector <16 x i8> %28, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %30 = bitcast i8* %24 to i64*
  %31 = load i64, i64* %30, align 1
  %32 = insertelement <2 x i64> undef, i64 %31, i32 0
  %33 = bitcast <2 x i64> %32 to <16 x i8>
  %34 = shufflevector <16 x i8> %33, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %35 = bitcast <16 x i8> %29 to <8 x i16>
  %36 = bitcast <16 x i8> %34 to <8 x i16>
  %37 = sub <8 x i16> %35, %36
  %38 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %37, <8 x i16> %37) #7
  %39 = add <4 x i32> %38, %22
  %40 = add <8 x i16> %37, %21
  %41 = getelementptr inbounds i8, i8* %23, i64 %7
  %42 = getelementptr inbounds i8, i8* %24, i64 %8
  %43 = bitcast i8* %41 to i64*
  %44 = load i64, i64* %43, align 1
  %45 = insertelement <2 x i64> undef, i64 %44, i32 0
  %46 = bitcast <2 x i64> %45 to <16 x i8>
  %47 = shufflevector <16 x i8> %46, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %48 = bitcast i8* %42 to i64*
  %49 = load i64, i64* %48, align 1
  %50 = insertelement <2 x i64> undef, i64 %49, i32 0
  %51 = bitcast <2 x i64> %50 to <16 x i8>
  %52 = shufflevector <16 x i8> %51, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %53 = bitcast <16 x i8> %47 to <8 x i16>
  %54 = bitcast <16 x i8> %52 to <8 x i16>
  %55 = sub <8 x i16> %53, %54
  %56 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %55, <8 x i16> %55) #7
  %57 = add <4 x i32> %56, %39
  %58 = add <8 x i16> %55, %40
  %59 = getelementptr inbounds i8, i8* %41, i64 %7
  %60 = getelementptr inbounds i8, i8* %42, i64 %8
  %61 = bitcast i8* %59 to i64*
  %62 = load i64, i64* %61, align 1
  %63 = insertelement <2 x i64> undef, i64 %62, i32 0
  %64 = bitcast <2 x i64> %63 to <16 x i8>
  %65 = shufflevector <16 x i8> %64, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %66 = bitcast i8* %60 to i64*
  %67 = load i64, i64* %66, align 1
  %68 = insertelement <2 x i64> undef, i64 %67, i32 0
  %69 = bitcast <2 x i64> %68 to <16 x i8>
  %70 = shufflevector <16 x i8> %69, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %71 = bitcast <16 x i8> %65 to <8 x i16>
  %72 = bitcast <16 x i8> %70 to <8 x i16>
  %73 = sub <8 x i16> %71, %72
  %74 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %73, <8 x i16> %73) #7
  %75 = add <4 x i32> %74, %57
  %76 = add <8 x i16> %73, %58
  %77 = getelementptr inbounds i8, i8* %59, i64 %7
  %78 = getelementptr inbounds i8, i8* %60, i64 %8
  %79 = bitcast i8* %77 to i64*
  %80 = load i64, i64* %79, align 1
  %81 = insertelement <2 x i64> undef, i64 %80, i32 0
  %82 = bitcast <2 x i64> %81 to <16 x i8>
  %83 = shufflevector <16 x i8> %82, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %84 = bitcast i8* %78 to i64*
  %85 = load i64, i64* %84, align 1
  %86 = insertelement <2 x i64> undef, i64 %85, i32 0
  %87 = bitcast <2 x i64> %86 to <16 x i8>
  %88 = shufflevector <16 x i8> %87, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %89 = bitcast <16 x i8> %83 to <8 x i16>
  %90 = bitcast <16 x i8> %88 to <8 x i16>
  %91 = sub <8 x i16> %89, %90
  %92 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %91, <8 x i16> %91) #7
  %93 = add <4 x i32> %92, %75
  %94 = add <8 x i16> %91, %76
  %95 = getelementptr inbounds i8, i8* %77, i64 %7
  %96 = getelementptr inbounds i8, i8* %78, i64 %8
  %97 = bitcast i8* %95 to i64*
  %98 = load i64, i64* %97, align 1
  %99 = insertelement <2 x i64> undef, i64 %98, i32 0
  %100 = bitcast <2 x i64> %99 to <16 x i8>
  %101 = shufflevector <16 x i8> %100, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %102 = bitcast i8* %96 to i64*
  %103 = load i64, i64* %102, align 1
  %104 = insertelement <2 x i64> undef, i64 %103, i32 0
  %105 = bitcast <2 x i64> %104 to <16 x i8>
  %106 = shufflevector <16 x i8> %105, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %107 = bitcast <16 x i8> %101 to <8 x i16>
  %108 = bitcast <16 x i8> %106 to <8 x i16>
  %109 = sub <8 x i16> %107, %108
  %110 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %109, <8 x i16> %109) #7
  %111 = add <4 x i32> %110, %93
  %112 = add <8 x i16> %109, %94
  %113 = getelementptr inbounds i8, i8* %95, i64 %7
  %114 = getelementptr inbounds i8, i8* %96, i64 %8
  %115 = bitcast i8* %113 to i64*
  %116 = load i64, i64* %115, align 1
  %117 = insertelement <2 x i64> undef, i64 %116, i32 0
  %118 = bitcast <2 x i64> %117 to <16 x i8>
  %119 = shufflevector <16 x i8> %118, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %120 = bitcast i8* %114 to i64*
  %121 = load i64, i64* %120, align 1
  %122 = insertelement <2 x i64> undef, i64 %121, i32 0
  %123 = bitcast <2 x i64> %122 to <16 x i8>
  %124 = shufflevector <16 x i8> %123, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %125 = bitcast <16 x i8> %119 to <8 x i16>
  %126 = bitcast <16 x i8> %124 to <8 x i16>
  %127 = sub <8 x i16> %125, %126
  %128 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %127, <8 x i16> %127) #7
  %129 = add <4 x i32> %128, %111
  %130 = add <8 x i16> %127, %112
  %131 = getelementptr inbounds i8, i8* %113, i64 %7
  %132 = getelementptr inbounds i8, i8* %114, i64 %8
  %133 = bitcast i8* %131 to i64*
  %134 = load i64, i64* %133, align 1
  %135 = insertelement <2 x i64> undef, i64 %134, i32 0
  %136 = bitcast <2 x i64> %135 to <16 x i8>
  %137 = shufflevector <16 x i8> %136, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %138 = bitcast i8* %132 to i64*
  %139 = load i64, i64* %138, align 1
  %140 = insertelement <2 x i64> undef, i64 %139, i32 0
  %141 = bitcast <2 x i64> %140 to <16 x i8>
  %142 = shufflevector <16 x i8> %141, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %143 = bitcast <16 x i8> %137 to <8 x i16>
  %144 = bitcast <16 x i8> %142 to <8 x i16>
  %145 = sub <8 x i16> %143, %144
  %146 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %145, <8 x i16> %145) #7
  %147 = add <4 x i32> %146, %129
  %148 = add <8 x i16> %145, %130
  %149 = bitcast <4 x i32> %147 to <16 x i8>
  %150 = shufflevector <16 x i8> %149, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %151 = bitcast <16 x i8> %150 to <4 x i32>
  %152 = add <4 x i32> %147, %151
  %153 = bitcast <4 x i32> %152 to <16 x i8>
  %154 = shufflevector <16 x i8> %153, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %155 = bitcast <16 x i8> %154 to <4 x i32>
  %156 = add <4 x i32> %152, %155
  %157 = extractelement <4 x i32> %156, i32 0
  store i32 %157, i32* %4, align 4
  %158 = bitcast <8 x i16> %148 to <16 x i8>
  %159 = shufflevector <16 x i8> %158, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %160 = bitcast <16 x i8> %159 to <8 x i16>
  %161 = add <8 x i16> %148, %160
  %162 = bitcast <8 x i16> %161 to <16 x i8>
  %163 = shufflevector <16 x i8> %162, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %164 = bitcast <16 x i8> %163 to <8 x i16>
  %165 = add <8 x i16> %161, %164
  %166 = bitcast <8 x i16> %165 to <16 x i8>
  %167 = shufflevector <16 x i8> %166, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %168 = bitcast <16 x i8> %167 to <8 x i16>
  %169 = add <8 x i16> %165, %168
  %170 = extractelement <8 x i16> %169, i64 0
  %171 = sext i16 %170 to i32
  store i32 %171, i32* %5, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_get16x16var_sse2(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i32* nocapture, i32* nocapture) local_unnamed_addr #2 {
  %7 = sext i32 %1 to i64
  %8 = sext i32 %3 to i64
  br label %9

9:                                                ; preds = %9, %6
  %10 = phi <4 x i32> [ zeroinitializer, %6 ], [ %33, %9 ]
  %11 = phi <8 x i16> [ zeroinitializer, %6 ], [ %34, %9 ]
  %12 = phi i32 [ 0, %6 ], [ %37, %9 ]
  %13 = phi i8* [ %0, %6 ], [ %35, %9 ]
  %14 = phi i8* [ %2, %6 ], [ %36, %9 ]
  %15 = bitcast i8* %13 to <16 x i8>*
  %16 = load <16 x i8>, <16 x i8>* %15, align 1
  %17 = bitcast i8* %14 to <16 x i8>*
  %18 = load <16 x i8>, <16 x i8>* %17, align 1
  %19 = shufflevector <16 x i8> %16, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %20 = shufflevector <16 x i8> %18, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %21 = shufflevector <16 x i8> %16, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %22 = shufflevector <16 x i8> %18, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %23 = bitcast <16 x i8> %19 to <8 x i16>
  %24 = bitcast <16 x i8> %20 to <8 x i16>
  %25 = sub <8 x i16> %23, %24
  %26 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %25, <8 x i16> %25) #7
  %27 = add <4 x i32> %26, %10
  %28 = add <8 x i16> %25, %11
  %29 = bitcast <16 x i8> %21 to <8 x i16>
  %30 = bitcast <16 x i8> %22 to <8 x i16>
  %31 = sub <8 x i16> %29, %30
  %32 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %31, <8 x i16> %31) #7
  %33 = add <4 x i32> %27, %32
  %34 = add <8 x i16> %28, %31
  %35 = getelementptr inbounds i8, i8* %13, i64 %7
  %36 = getelementptr inbounds i8, i8* %14, i64 %8
  %37 = add nuw nsw i32 %12, 1
  %38 = icmp eq i32 %37, 16
  br i1 %38, label %39, label %9

39:                                               ; preds = %9
  %40 = bitcast <4 x i32> %33 to <16 x i8>
  %41 = shufflevector <16 x i8> %40, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %42 = bitcast <16 x i8> %41 to <4 x i32>
  %43 = add <4 x i32> %33, %42
  %44 = bitcast <4 x i32> %43 to <16 x i8>
  %45 = shufflevector <16 x i8> %44, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %46 = bitcast <16 x i8> %45 to <4 x i32>
  %47 = add <4 x i32> %43, %46
  %48 = extractelement <4 x i32> %47, i32 0
  store i32 %48, i32* %4, align 4
  %49 = bitcast <8 x i16> %34 to <16 x i8>
  %50 = shufflevector <16 x i8> %49, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %51 = bitcast <16 x i8> %50 to <8 x i16>
  %52 = add <8 x i16> %34, %51
  %53 = bitcast <8 x i16> %52 to <16 x i8>
  %54 = shufflevector <16 x i8> %53, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %55 = bitcast <16 x i8> %54 to <8 x i16>
  %56 = add <8 x i16> %52, %55
  %57 = extractelement <8 x i16> %56, i64 0
  %58 = sext i16 %57 to i32
  %59 = extractelement <8 x i16> %56, i64 1
  %60 = sext i16 %59 to i32
  %61 = add nsw i32 %58, %60
  store i32 %61, i32* %5, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_variance4x4_sse2(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i32* nocapture) local_unnamed_addr #2 {
  %6 = sext i32 %1 to i64
  %7 = sext i32 %3 to i64
  %8 = shl nsw i32 %1, 1
  %9 = sext i32 %8 to i64
  %10 = shl nsw i32 %3, 1
  %11 = sext i32 %10 to i64
  %12 = bitcast i8* %0 to i32*
  %13 = load i32, i32* %12, align 1
  %14 = insertelement <4 x i32> undef, i32 %13, i32 0
  %15 = getelementptr inbounds i8, i8* %0, i64 %6
  %16 = bitcast i8* %15 to i32*
  %17 = load i32, i32* %16, align 1
  %18 = insertelement <4 x i32> %14, i32 %17, i32 1
  %19 = bitcast <4 x i32> %18 to <16 x i8>
  %20 = shufflevector <16 x i8> %19, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %21 = bitcast i8* %2 to i32*
  %22 = load i32, i32* %21, align 1
  %23 = insertelement <4 x i32> undef, i32 %22, i32 0
  %24 = getelementptr inbounds i8, i8* %2, i64 %7
  %25 = bitcast i8* %24 to i32*
  %26 = load i32, i32* %25, align 1
  %27 = insertelement <4 x i32> %23, i32 %26, i32 1
  %28 = bitcast <4 x i32> %27 to <16 x i8>
  %29 = shufflevector <16 x i8> %28, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %30 = bitcast <16 x i8> %20 to <8 x i16>
  %31 = bitcast <16 x i8> %29 to <8 x i16>
  %32 = sub <8 x i16> %30, %31
  %33 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %32, <8 x i16> %32) #7
  %34 = getelementptr inbounds i8, i8* %0, i64 %9
  %35 = getelementptr inbounds i8, i8* %2, i64 %11
  %36 = bitcast i8* %34 to i32*
  %37 = load i32, i32* %36, align 1
  %38 = insertelement <4 x i32> undef, i32 %37, i32 0
  %39 = getelementptr inbounds i8, i8* %34, i64 %6
  %40 = bitcast i8* %39 to i32*
  %41 = load i32, i32* %40, align 1
  %42 = insertelement <4 x i32> %38, i32 %41, i32 1
  %43 = bitcast <4 x i32> %42 to <16 x i8>
  %44 = shufflevector <16 x i8> %43, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %45 = bitcast i8* %35 to i32*
  %46 = load i32, i32* %45, align 1
  %47 = insertelement <4 x i32> undef, i32 %46, i32 0
  %48 = getelementptr inbounds i8, i8* %35, i64 %7
  %49 = bitcast i8* %48 to i32*
  %50 = load i32, i32* %49, align 1
  %51 = insertelement <4 x i32> %47, i32 %50, i32 1
  %52 = bitcast <4 x i32> %51 to <16 x i8>
  %53 = shufflevector <16 x i8> %52, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %54 = bitcast <16 x i8> %44 to <8 x i16>
  %55 = bitcast <16 x i8> %53 to <8 x i16>
  %56 = sub <8 x i16> %54, %55
  %57 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %56, <8 x i16> %56) #7
  %58 = add <4 x i32> %57, %33
  %59 = add <8 x i16> %56, %32
  %60 = bitcast <4 x i32> %58 to <16 x i8>
  %61 = shufflevector <16 x i8> %60, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %62 = bitcast <16 x i8> %61 to <4 x i32>
  %63 = add <4 x i32> %58, %62
  %64 = bitcast <4 x i32> %63 to <16 x i8>
  %65 = shufflevector <16 x i8> %64, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %66 = bitcast <16 x i8> %65 to <4 x i32>
  %67 = add <4 x i32> %63, %66
  %68 = extractelement <4 x i32> %67, i32 0
  store i32 %68, i32* %4, align 4
  %69 = bitcast <8 x i16> %59 to <16 x i8>
  %70 = shufflevector <16 x i8> %69, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %71 = bitcast <16 x i8> %70 to <8 x i16>
  %72 = add <8 x i16> %59, %71
  %73 = bitcast <8 x i16> %72 to <16 x i8>
  %74 = shufflevector <16 x i8> %73, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %75 = bitcast <16 x i8> %74 to <8 x i16>
  %76 = add <8 x i16> %72, %75
  %77 = bitcast <8 x i16> %76 to <16 x i8>
  %78 = shufflevector <16 x i8> %77, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %79 = bitcast <16 x i8> %78 to <8 x i16>
  %80 = add <8 x i16> %76, %79
  %81 = extractelement <8 x i16> %80, i64 0
  %82 = sext i16 %81 to i32
  %83 = mul nsw i32 %82, %82
  %84 = lshr i32 %83, 4
  %85 = sub i32 %68, %84
  ret i32 %85
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_variance4x8_sse2(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i32* nocapture) local_unnamed_addr #2 {
  %6 = sext i32 %1 to i64
  %7 = sext i32 %3 to i64
  %8 = shl nsw i32 %1, 1
  %9 = sext i32 %8 to i64
  %10 = shl nsw i32 %3, 1
  %11 = sext i32 %10 to i64
  %12 = bitcast i8* %0 to i32*
  %13 = load i32, i32* %12, align 1
  %14 = insertelement <4 x i32> undef, i32 %13, i32 0
  %15 = getelementptr inbounds i8, i8* %0, i64 %6
  %16 = bitcast i8* %15 to i32*
  %17 = load i32, i32* %16, align 1
  %18 = insertelement <4 x i32> %14, i32 %17, i32 1
  %19 = bitcast <4 x i32> %18 to <16 x i8>
  %20 = shufflevector <16 x i8> %19, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %21 = bitcast i8* %2 to i32*
  %22 = load i32, i32* %21, align 1
  %23 = insertelement <4 x i32> undef, i32 %22, i32 0
  %24 = getelementptr inbounds i8, i8* %2, i64 %7
  %25 = bitcast i8* %24 to i32*
  %26 = load i32, i32* %25, align 1
  %27 = insertelement <4 x i32> %23, i32 %26, i32 1
  %28 = bitcast <4 x i32> %27 to <16 x i8>
  %29 = shufflevector <16 x i8> %28, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %30 = bitcast <16 x i8> %20 to <8 x i16>
  %31 = bitcast <16 x i8> %29 to <8 x i16>
  %32 = sub <8 x i16> %30, %31
  %33 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %32, <8 x i16> %32) #7
  %34 = getelementptr inbounds i8, i8* %0, i64 %9
  %35 = getelementptr inbounds i8, i8* %2, i64 %11
  %36 = bitcast i8* %34 to i32*
  %37 = load i32, i32* %36, align 1
  %38 = insertelement <4 x i32> undef, i32 %37, i32 0
  %39 = getelementptr inbounds i8, i8* %34, i64 %6
  %40 = bitcast i8* %39 to i32*
  %41 = load i32, i32* %40, align 1
  %42 = insertelement <4 x i32> %38, i32 %41, i32 1
  %43 = bitcast <4 x i32> %42 to <16 x i8>
  %44 = shufflevector <16 x i8> %43, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %45 = bitcast i8* %35 to i32*
  %46 = load i32, i32* %45, align 1
  %47 = insertelement <4 x i32> undef, i32 %46, i32 0
  %48 = getelementptr inbounds i8, i8* %35, i64 %7
  %49 = bitcast i8* %48 to i32*
  %50 = load i32, i32* %49, align 1
  %51 = insertelement <4 x i32> %47, i32 %50, i32 1
  %52 = bitcast <4 x i32> %51 to <16 x i8>
  %53 = shufflevector <16 x i8> %52, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %54 = bitcast <16 x i8> %44 to <8 x i16>
  %55 = bitcast <16 x i8> %53 to <8 x i16>
  %56 = sub <8 x i16> %54, %55
  %57 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %56, <8 x i16> %56) #7
  %58 = add <4 x i32> %57, %33
  %59 = add <8 x i16> %56, %32
  %60 = getelementptr inbounds i8, i8* %34, i64 %9
  %61 = getelementptr inbounds i8, i8* %35, i64 %11
  %62 = bitcast i8* %60 to i32*
  %63 = load i32, i32* %62, align 1
  %64 = insertelement <4 x i32> undef, i32 %63, i32 0
  %65 = getelementptr inbounds i8, i8* %60, i64 %6
  %66 = bitcast i8* %65 to i32*
  %67 = load i32, i32* %66, align 1
  %68 = insertelement <4 x i32> %64, i32 %67, i32 1
  %69 = bitcast <4 x i32> %68 to <16 x i8>
  %70 = shufflevector <16 x i8> %69, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %71 = bitcast i8* %61 to i32*
  %72 = load i32, i32* %71, align 1
  %73 = insertelement <4 x i32> undef, i32 %72, i32 0
  %74 = getelementptr inbounds i8, i8* %61, i64 %7
  %75 = bitcast i8* %74 to i32*
  %76 = load i32, i32* %75, align 1
  %77 = insertelement <4 x i32> %73, i32 %76, i32 1
  %78 = bitcast <4 x i32> %77 to <16 x i8>
  %79 = shufflevector <16 x i8> %78, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %80 = bitcast <16 x i8> %70 to <8 x i16>
  %81 = bitcast <16 x i8> %79 to <8 x i16>
  %82 = sub <8 x i16> %80, %81
  %83 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %82, <8 x i16> %82) #7
  %84 = add <4 x i32> %83, %58
  %85 = add <8 x i16> %82, %59
  %86 = getelementptr inbounds i8, i8* %60, i64 %9
  %87 = getelementptr inbounds i8, i8* %61, i64 %11
  %88 = bitcast i8* %86 to i32*
  %89 = load i32, i32* %88, align 1
  %90 = insertelement <4 x i32> undef, i32 %89, i32 0
  %91 = getelementptr inbounds i8, i8* %86, i64 %6
  %92 = bitcast i8* %91 to i32*
  %93 = load i32, i32* %92, align 1
  %94 = insertelement <4 x i32> %90, i32 %93, i32 1
  %95 = bitcast <4 x i32> %94 to <16 x i8>
  %96 = shufflevector <16 x i8> %95, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %97 = bitcast i8* %87 to i32*
  %98 = load i32, i32* %97, align 1
  %99 = insertelement <4 x i32> undef, i32 %98, i32 0
  %100 = getelementptr inbounds i8, i8* %87, i64 %7
  %101 = bitcast i8* %100 to i32*
  %102 = load i32, i32* %101, align 1
  %103 = insertelement <4 x i32> %99, i32 %102, i32 1
  %104 = bitcast <4 x i32> %103 to <16 x i8>
  %105 = shufflevector <16 x i8> %104, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %106 = bitcast <16 x i8> %96 to <8 x i16>
  %107 = bitcast <16 x i8> %105 to <8 x i16>
  %108 = sub <8 x i16> %106, %107
  %109 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %108, <8 x i16> %108) #7
  %110 = add <4 x i32> %109, %84
  %111 = add <8 x i16> %108, %85
  %112 = bitcast <4 x i32> %110 to <16 x i8>
  %113 = shufflevector <16 x i8> %112, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %114 = bitcast <16 x i8> %113 to <4 x i32>
  %115 = add <4 x i32> %110, %114
  %116 = bitcast <4 x i32> %115 to <16 x i8>
  %117 = shufflevector <16 x i8> %116, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %118 = bitcast <16 x i8> %117 to <4 x i32>
  %119 = add <4 x i32> %115, %118
  %120 = extractelement <4 x i32> %119, i32 0
  store i32 %120, i32* %4, align 4
  %121 = bitcast <8 x i16> %111 to <16 x i8>
  %122 = shufflevector <16 x i8> %121, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %123 = bitcast <16 x i8> %122 to <8 x i16>
  %124 = add <8 x i16> %111, %123
  %125 = bitcast <8 x i16> %124 to <16 x i8>
  %126 = shufflevector <16 x i8> %125, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %127 = bitcast <16 x i8> %126 to <8 x i16>
  %128 = add <8 x i16> %124, %127
  %129 = bitcast <8 x i16> %128 to <16 x i8>
  %130 = shufflevector <16 x i8> %129, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %131 = bitcast <16 x i8> %130 to <8 x i16>
  %132 = add <8 x i16> %128, %131
  %133 = extractelement <8 x i16> %132, i64 0
  %134 = sext i16 %133 to i32
  %135 = mul nsw i32 %134, %134
  %136 = lshr i32 %135, 5
  %137 = sub i32 %120, %136
  ret i32 %137
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_variance8x4_sse2(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i32* nocapture) local_unnamed_addr #2 {
  %6 = sext i32 %1 to i64
  %7 = sext i32 %3 to i64
  %8 = bitcast i8* %0 to i64*
  %9 = load i64, i64* %8, align 1
  %10 = insertelement <2 x i64> undef, i64 %9, i32 0
  %11 = bitcast <2 x i64> %10 to <16 x i8>
  %12 = shufflevector <16 x i8> %11, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %13 = bitcast i8* %2 to i64*
  %14 = load i64, i64* %13, align 1
  %15 = insertelement <2 x i64> undef, i64 %14, i32 0
  %16 = bitcast <2 x i64> %15 to <16 x i8>
  %17 = shufflevector <16 x i8> %16, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %18 = bitcast <16 x i8> %12 to <8 x i16>
  %19 = bitcast <16 x i8> %17 to <8 x i16>
  %20 = sub <8 x i16> %18, %19
  %21 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %20, <8 x i16> %20) #7
  %22 = getelementptr inbounds i8, i8* %0, i64 %6
  %23 = getelementptr inbounds i8, i8* %2, i64 %7
  %24 = bitcast i8* %22 to i64*
  %25 = load i64, i64* %24, align 1
  %26 = insertelement <2 x i64> undef, i64 %25, i32 0
  %27 = bitcast <2 x i64> %26 to <16 x i8>
  %28 = shufflevector <16 x i8> %27, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %29 = bitcast i8* %23 to i64*
  %30 = load i64, i64* %29, align 1
  %31 = insertelement <2 x i64> undef, i64 %30, i32 0
  %32 = bitcast <2 x i64> %31 to <16 x i8>
  %33 = shufflevector <16 x i8> %32, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %34 = bitcast <16 x i8> %28 to <8 x i16>
  %35 = bitcast <16 x i8> %33 to <8 x i16>
  %36 = sub <8 x i16> %34, %35
  %37 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %36, <8 x i16> %36) #7
  %38 = add <4 x i32> %37, %21
  %39 = add <8 x i16> %36, %20
  %40 = getelementptr inbounds i8, i8* %22, i64 %6
  %41 = getelementptr inbounds i8, i8* %23, i64 %7
  %42 = bitcast i8* %40 to i64*
  %43 = load i64, i64* %42, align 1
  %44 = insertelement <2 x i64> undef, i64 %43, i32 0
  %45 = bitcast <2 x i64> %44 to <16 x i8>
  %46 = shufflevector <16 x i8> %45, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %47 = bitcast i8* %41 to i64*
  %48 = load i64, i64* %47, align 1
  %49 = insertelement <2 x i64> undef, i64 %48, i32 0
  %50 = bitcast <2 x i64> %49 to <16 x i8>
  %51 = shufflevector <16 x i8> %50, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %52 = bitcast <16 x i8> %46 to <8 x i16>
  %53 = bitcast <16 x i8> %51 to <8 x i16>
  %54 = sub <8 x i16> %52, %53
  %55 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %54, <8 x i16> %54) #7
  %56 = add <4 x i32> %55, %38
  %57 = add <8 x i16> %54, %39
  %58 = getelementptr inbounds i8, i8* %40, i64 %6
  %59 = getelementptr inbounds i8, i8* %41, i64 %7
  %60 = bitcast i8* %58 to i64*
  %61 = load i64, i64* %60, align 1
  %62 = insertelement <2 x i64> undef, i64 %61, i32 0
  %63 = bitcast <2 x i64> %62 to <16 x i8>
  %64 = shufflevector <16 x i8> %63, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %65 = bitcast i8* %59 to i64*
  %66 = load i64, i64* %65, align 1
  %67 = insertelement <2 x i64> undef, i64 %66, i32 0
  %68 = bitcast <2 x i64> %67 to <16 x i8>
  %69 = shufflevector <16 x i8> %68, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %70 = bitcast <16 x i8> %64 to <8 x i16>
  %71 = bitcast <16 x i8> %69 to <8 x i16>
  %72 = sub <8 x i16> %70, %71
  %73 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %72, <8 x i16> %72) #7
  %74 = add <4 x i32> %73, %56
  %75 = add <8 x i16> %72, %57
  %76 = bitcast <4 x i32> %74 to <16 x i8>
  %77 = shufflevector <16 x i8> %76, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %78 = bitcast <16 x i8> %77 to <4 x i32>
  %79 = add <4 x i32> %74, %78
  %80 = bitcast <4 x i32> %79 to <16 x i8>
  %81 = shufflevector <16 x i8> %80, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %82 = bitcast <16 x i8> %81 to <4 x i32>
  %83 = add <4 x i32> %79, %82
  %84 = extractelement <4 x i32> %83, i32 0
  store i32 %84, i32* %4, align 4
  %85 = bitcast <8 x i16> %75 to <16 x i8>
  %86 = shufflevector <16 x i8> %85, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %87 = bitcast <16 x i8> %86 to <8 x i16>
  %88 = add <8 x i16> %75, %87
  %89 = bitcast <8 x i16> %88 to <16 x i8>
  %90 = shufflevector <16 x i8> %89, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %91 = bitcast <16 x i8> %90 to <8 x i16>
  %92 = add <8 x i16> %88, %91
  %93 = bitcast <8 x i16> %92 to <16 x i8>
  %94 = shufflevector <16 x i8> %93, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %95 = bitcast <16 x i8> %94 to <8 x i16>
  %96 = add <8 x i16> %92, %95
  %97 = extractelement <8 x i16> %96, i64 0
  %98 = sext i16 %97 to i32
  %99 = mul nsw i32 %98, %98
  %100 = lshr i32 %99, 5
  %101 = sub i32 %84, %100
  ret i32 %101
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_variance8x8_sse2(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i32* nocapture) local_unnamed_addr #2 {
  %6 = sext i32 %1 to i64
  %7 = sext i32 %3 to i64
  %8 = bitcast i8* %0 to i64*
  %9 = load i64, i64* %8, align 1
  %10 = insertelement <2 x i64> undef, i64 %9, i32 0
  %11 = bitcast <2 x i64> %10 to <16 x i8>
  %12 = shufflevector <16 x i8> %11, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %13 = bitcast i8* %2 to i64*
  %14 = load i64, i64* %13, align 1
  %15 = insertelement <2 x i64> undef, i64 %14, i32 0
  %16 = bitcast <2 x i64> %15 to <16 x i8>
  %17 = shufflevector <16 x i8> %16, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %18 = bitcast <16 x i8> %12 to <8 x i16>
  %19 = bitcast <16 x i8> %17 to <8 x i16>
  %20 = sub <8 x i16> %18, %19
  %21 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %20, <8 x i16> %20) #7
  %22 = getelementptr inbounds i8, i8* %0, i64 %6
  %23 = getelementptr inbounds i8, i8* %2, i64 %7
  %24 = bitcast i8* %22 to i64*
  %25 = load i64, i64* %24, align 1
  %26 = insertelement <2 x i64> undef, i64 %25, i32 0
  %27 = bitcast <2 x i64> %26 to <16 x i8>
  %28 = shufflevector <16 x i8> %27, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %29 = bitcast i8* %23 to i64*
  %30 = load i64, i64* %29, align 1
  %31 = insertelement <2 x i64> undef, i64 %30, i32 0
  %32 = bitcast <2 x i64> %31 to <16 x i8>
  %33 = shufflevector <16 x i8> %32, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %34 = bitcast <16 x i8> %28 to <8 x i16>
  %35 = bitcast <16 x i8> %33 to <8 x i16>
  %36 = sub <8 x i16> %34, %35
  %37 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %36, <8 x i16> %36) #7
  %38 = add <4 x i32> %37, %21
  %39 = add <8 x i16> %36, %20
  %40 = getelementptr inbounds i8, i8* %22, i64 %6
  %41 = getelementptr inbounds i8, i8* %23, i64 %7
  %42 = bitcast i8* %40 to i64*
  %43 = load i64, i64* %42, align 1
  %44 = insertelement <2 x i64> undef, i64 %43, i32 0
  %45 = bitcast <2 x i64> %44 to <16 x i8>
  %46 = shufflevector <16 x i8> %45, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %47 = bitcast i8* %41 to i64*
  %48 = load i64, i64* %47, align 1
  %49 = insertelement <2 x i64> undef, i64 %48, i32 0
  %50 = bitcast <2 x i64> %49 to <16 x i8>
  %51 = shufflevector <16 x i8> %50, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %52 = bitcast <16 x i8> %46 to <8 x i16>
  %53 = bitcast <16 x i8> %51 to <8 x i16>
  %54 = sub <8 x i16> %52, %53
  %55 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %54, <8 x i16> %54) #7
  %56 = add <4 x i32> %55, %38
  %57 = add <8 x i16> %54, %39
  %58 = getelementptr inbounds i8, i8* %40, i64 %6
  %59 = getelementptr inbounds i8, i8* %41, i64 %7
  %60 = bitcast i8* %58 to i64*
  %61 = load i64, i64* %60, align 1
  %62 = insertelement <2 x i64> undef, i64 %61, i32 0
  %63 = bitcast <2 x i64> %62 to <16 x i8>
  %64 = shufflevector <16 x i8> %63, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %65 = bitcast i8* %59 to i64*
  %66 = load i64, i64* %65, align 1
  %67 = insertelement <2 x i64> undef, i64 %66, i32 0
  %68 = bitcast <2 x i64> %67 to <16 x i8>
  %69 = shufflevector <16 x i8> %68, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %70 = bitcast <16 x i8> %64 to <8 x i16>
  %71 = bitcast <16 x i8> %69 to <8 x i16>
  %72 = sub <8 x i16> %70, %71
  %73 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %72, <8 x i16> %72) #7
  %74 = add <4 x i32> %73, %56
  %75 = add <8 x i16> %72, %57
  %76 = getelementptr inbounds i8, i8* %58, i64 %6
  %77 = getelementptr inbounds i8, i8* %59, i64 %7
  %78 = bitcast i8* %76 to i64*
  %79 = load i64, i64* %78, align 1
  %80 = insertelement <2 x i64> undef, i64 %79, i32 0
  %81 = bitcast <2 x i64> %80 to <16 x i8>
  %82 = shufflevector <16 x i8> %81, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %83 = bitcast i8* %77 to i64*
  %84 = load i64, i64* %83, align 1
  %85 = insertelement <2 x i64> undef, i64 %84, i32 0
  %86 = bitcast <2 x i64> %85 to <16 x i8>
  %87 = shufflevector <16 x i8> %86, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %88 = bitcast <16 x i8> %82 to <8 x i16>
  %89 = bitcast <16 x i8> %87 to <8 x i16>
  %90 = sub <8 x i16> %88, %89
  %91 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %90, <8 x i16> %90) #7
  %92 = add <4 x i32> %91, %74
  %93 = add <8 x i16> %90, %75
  %94 = getelementptr inbounds i8, i8* %76, i64 %6
  %95 = getelementptr inbounds i8, i8* %77, i64 %7
  %96 = bitcast i8* %94 to i64*
  %97 = load i64, i64* %96, align 1
  %98 = insertelement <2 x i64> undef, i64 %97, i32 0
  %99 = bitcast <2 x i64> %98 to <16 x i8>
  %100 = shufflevector <16 x i8> %99, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %101 = bitcast i8* %95 to i64*
  %102 = load i64, i64* %101, align 1
  %103 = insertelement <2 x i64> undef, i64 %102, i32 0
  %104 = bitcast <2 x i64> %103 to <16 x i8>
  %105 = shufflevector <16 x i8> %104, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %106 = bitcast <16 x i8> %100 to <8 x i16>
  %107 = bitcast <16 x i8> %105 to <8 x i16>
  %108 = sub <8 x i16> %106, %107
  %109 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %108, <8 x i16> %108) #7
  %110 = add <4 x i32> %109, %92
  %111 = add <8 x i16> %108, %93
  %112 = getelementptr inbounds i8, i8* %94, i64 %6
  %113 = getelementptr inbounds i8, i8* %95, i64 %7
  %114 = bitcast i8* %112 to i64*
  %115 = load i64, i64* %114, align 1
  %116 = insertelement <2 x i64> undef, i64 %115, i32 0
  %117 = bitcast <2 x i64> %116 to <16 x i8>
  %118 = shufflevector <16 x i8> %117, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %119 = bitcast i8* %113 to i64*
  %120 = load i64, i64* %119, align 1
  %121 = insertelement <2 x i64> undef, i64 %120, i32 0
  %122 = bitcast <2 x i64> %121 to <16 x i8>
  %123 = shufflevector <16 x i8> %122, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %124 = bitcast <16 x i8> %118 to <8 x i16>
  %125 = bitcast <16 x i8> %123 to <8 x i16>
  %126 = sub <8 x i16> %124, %125
  %127 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %126, <8 x i16> %126) #7
  %128 = add <4 x i32> %127, %110
  %129 = add <8 x i16> %126, %111
  %130 = getelementptr inbounds i8, i8* %112, i64 %6
  %131 = getelementptr inbounds i8, i8* %113, i64 %7
  %132 = bitcast i8* %130 to i64*
  %133 = load i64, i64* %132, align 1
  %134 = insertelement <2 x i64> undef, i64 %133, i32 0
  %135 = bitcast <2 x i64> %134 to <16 x i8>
  %136 = shufflevector <16 x i8> %135, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %137 = bitcast i8* %131 to i64*
  %138 = load i64, i64* %137, align 1
  %139 = insertelement <2 x i64> undef, i64 %138, i32 0
  %140 = bitcast <2 x i64> %139 to <16 x i8>
  %141 = shufflevector <16 x i8> %140, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %142 = bitcast <16 x i8> %136 to <8 x i16>
  %143 = bitcast <16 x i8> %141 to <8 x i16>
  %144 = sub <8 x i16> %142, %143
  %145 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %144, <8 x i16> %144) #7
  %146 = add <4 x i32> %145, %128
  %147 = add <8 x i16> %144, %129
  %148 = bitcast <4 x i32> %146 to <16 x i8>
  %149 = shufflevector <16 x i8> %148, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %150 = bitcast <16 x i8> %149 to <4 x i32>
  %151 = add <4 x i32> %146, %150
  %152 = bitcast <4 x i32> %151 to <16 x i8>
  %153 = shufflevector <16 x i8> %152, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %154 = bitcast <16 x i8> %153 to <4 x i32>
  %155 = add <4 x i32> %151, %154
  %156 = extractelement <4 x i32> %155, i32 0
  store i32 %156, i32* %4, align 4
  %157 = bitcast <8 x i16> %147 to <16 x i8>
  %158 = shufflevector <16 x i8> %157, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %159 = bitcast <16 x i8> %158 to <8 x i16>
  %160 = add <8 x i16> %147, %159
  %161 = bitcast <8 x i16> %160 to <16 x i8>
  %162 = shufflevector <16 x i8> %161, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %163 = bitcast <16 x i8> %162 to <8 x i16>
  %164 = add <8 x i16> %160, %163
  %165 = bitcast <8 x i16> %164 to <16 x i8>
  %166 = shufflevector <16 x i8> %165, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %167 = bitcast <16 x i8> %166 to <8 x i16>
  %168 = add <8 x i16> %164, %167
  %169 = extractelement <8 x i16> %168, i64 0
  %170 = sext i16 %169 to i32
  %171 = mul nsw i32 %170, %170
  %172 = lshr i32 %171, 6
  %173 = sub i32 %156, %172
  ret i32 %173
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_variance8x16_sse2(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i32* nocapture) local_unnamed_addr #2 {
  %6 = sext i32 %1 to i64
  %7 = sext i32 %3 to i64
  br label %8

8:                                                ; preds = %8, %5
  %9 = phi <4 x i32> [ zeroinitializer, %5 ], [ %28, %8 ]
  %10 = phi <8 x i16> [ zeroinitializer, %5 ], [ %29, %8 ]
  %11 = phi i8* [ %0, %5 ], [ %30, %8 ]
  %12 = phi i8* [ %2, %5 ], [ %31, %8 ]
  %13 = phi i32 [ 0, %5 ], [ %32, %8 ]
  %14 = bitcast i8* %11 to i64*
  %15 = load i64, i64* %14, align 1
  %16 = insertelement <2 x i64> undef, i64 %15, i32 0
  %17 = bitcast <2 x i64> %16 to <16 x i8>
  %18 = shufflevector <16 x i8> %17, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %19 = bitcast i8* %12 to i64*
  %20 = load i64, i64* %19, align 1
  %21 = insertelement <2 x i64> undef, i64 %20, i32 0
  %22 = bitcast <2 x i64> %21 to <16 x i8>
  %23 = shufflevector <16 x i8> %22, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %24 = bitcast <16 x i8> %18 to <8 x i16>
  %25 = bitcast <16 x i8> %23 to <8 x i16>
  %26 = sub <8 x i16> %24, %25
  %27 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %26, <8 x i16> %26) #7
  %28 = add <4 x i32> %27, %9
  %29 = add <8 x i16> %26, %10
  %30 = getelementptr inbounds i8, i8* %11, i64 %6
  %31 = getelementptr inbounds i8, i8* %12, i64 %7
  %32 = add nuw nsw i32 %13, 1
  %33 = icmp eq i32 %32, 16
  br i1 %33, label %34, label %8

34:                                               ; preds = %8
  %35 = bitcast <4 x i32> %28 to <16 x i8>
  %36 = shufflevector <16 x i8> %35, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %37 = bitcast <16 x i8> %36 to <4 x i32>
  %38 = add <4 x i32> %28, %37
  %39 = bitcast <4 x i32> %38 to <16 x i8>
  %40 = shufflevector <16 x i8> %39, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %41 = bitcast <16 x i8> %40 to <4 x i32>
  %42 = add <4 x i32> %38, %41
  %43 = extractelement <4 x i32> %42, i32 0
  store i32 %43, i32* %4, align 4
  %44 = bitcast <8 x i16> %29 to <16 x i8>
  %45 = shufflevector <16 x i8> %44, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %46 = bitcast <16 x i8> %45 to <8 x i16>
  %47 = add <8 x i16> %29, %46
  %48 = bitcast <8 x i16> %47 to <16 x i8>
  %49 = shufflevector <16 x i8> %48, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %50 = bitcast <16 x i8> %49 to <8 x i16>
  %51 = add <8 x i16> %47, %50
  %52 = bitcast <8 x i16> %51 to <16 x i8>
  %53 = shufflevector <16 x i8> %52, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %54 = bitcast <16 x i8> %53 to <8 x i16>
  %55 = add <8 x i16> %51, %54
  %56 = extractelement <8 x i16> %55, i64 0
  %57 = sext i16 %56 to i32
  %58 = mul nsw i32 %57, %57
  %59 = lshr i32 %58, 7
  %60 = sub i32 %43, %59
  ret i32 %60
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_variance16x8_sse2(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i32* nocapture) local_unnamed_addr #2 {
  %6 = sext i32 %1 to i64
  %7 = sext i32 %3 to i64
  %8 = bitcast i8* %0 to <16 x i8>*
  %9 = load <16 x i8>, <16 x i8>* %8, align 1
  %10 = bitcast i8* %2 to <16 x i8>*
  %11 = load <16 x i8>, <16 x i8>* %10, align 1
  %12 = shufflevector <16 x i8> %9, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %13 = shufflevector <16 x i8> %11, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %14 = shufflevector <16 x i8> %9, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %15 = shufflevector <16 x i8> %11, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %16 = bitcast <16 x i8> %12 to <8 x i16>
  %17 = bitcast <16 x i8> %13 to <8 x i16>
  %18 = sub <8 x i16> %16, %17
  %19 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %18, <8 x i16> %18) #7
  %20 = bitcast <16 x i8> %14 to <8 x i16>
  %21 = bitcast <16 x i8> %15 to <8 x i16>
  %22 = sub <8 x i16> %20, %21
  %23 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %22, <8 x i16> %22) #7
  %24 = add <4 x i32> %19, %23
  %25 = add <8 x i16> %18, %22
  %26 = getelementptr inbounds i8, i8* %0, i64 %6
  %27 = getelementptr inbounds i8, i8* %2, i64 %7
  %28 = bitcast i8* %26 to <16 x i8>*
  %29 = load <16 x i8>, <16 x i8>* %28, align 1
  %30 = bitcast i8* %27 to <16 x i8>*
  %31 = load <16 x i8>, <16 x i8>* %30, align 1
  %32 = shufflevector <16 x i8> %29, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %33 = shufflevector <16 x i8> %31, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %34 = shufflevector <16 x i8> %29, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %35 = shufflevector <16 x i8> %31, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %36 = bitcast <16 x i8> %32 to <8 x i16>
  %37 = bitcast <16 x i8> %33 to <8 x i16>
  %38 = sub <8 x i16> %36, %37
  %39 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %38, <8 x i16> %38) #7
  %40 = add <4 x i32> %39, %24
  %41 = add <8 x i16> %38, %25
  %42 = bitcast <16 x i8> %34 to <8 x i16>
  %43 = bitcast <16 x i8> %35 to <8 x i16>
  %44 = sub <8 x i16> %42, %43
  %45 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %44, <8 x i16> %44) #7
  %46 = add <4 x i32> %40, %45
  %47 = add <8 x i16> %41, %44
  %48 = getelementptr inbounds i8, i8* %26, i64 %6
  %49 = getelementptr inbounds i8, i8* %27, i64 %7
  %50 = bitcast i8* %48 to <16 x i8>*
  %51 = load <16 x i8>, <16 x i8>* %50, align 1
  %52 = bitcast i8* %49 to <16 x i8>*
  %53 = load <16 x i8>, <16 x i8>* %52, align 1
  %54 = shufflevector <16 x i8> %51, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %55 = shufflevector <16 x i8> %53, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %56 = shufflevector <16 x i8> %51, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %57 = shufflevector <16 x i8> %53, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %58 = bitcast <16 x i8> %54 to <8 x i16>
  %59 = bitcast <16 x i8> %55 to <8 x i16>
  %60 = sub <8 x i16> %58, %59
  %61 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %60, <8 x i16> %60) #7
  %62 = add <4 x i32> %61, %46
  %63 = add <8 x i16> %60, %47
  %64 = bitcast <16 x i8> %56 to <8 x i16>
  %65 = bitcast <16 x i8> %57 to <8 x i16>
  %66 = sub <8 x i16> %64, %65
  %67 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %66, <8 x i16> %66) #7
  %68 = add <4 x i32> %62, %67
  %69 = add <8 x i16> %63, %66
  %70 = getelementptr inbounds i8, i8* %48, i64 %6
  %71 = getelementptr inbounds i8, i8* %49, i64 %7
  %72 = bitcast i8* %70 to <16 x i8>*
  %73 = load <16 x i8>, <16 x i8>* %72, align 1
  %74 = bitcast i8* %71 to <16 x i8>*
  %75 = load <16 x i8>, <16 x i8>* %74, align 1
  %76 = shufflevector <16 x i8> %73, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %77 = shufflevector <16 x i8> %75, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %78 = shufflevector <16 x i8> %73, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %79 = shufflevector <16 x i8> %75, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %80 = bitcast <16 x i8> %76 to <8 x i16>
  %81 = bitcast <16 x i8> %77 to <8 x i16>
  %82 = sub <8 x i16> %80, %81
  %83 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %82, <8 x i16> %82) #7
  %84 = add <4 x i32> %83, %68
  %85 = add <8 x i16> %82, %69
  %86 = bitcast <16 x i8> %78 to <8 x i16>
  %87 = bitcast <16 x i8> %79 to <8 x i16>
  %88 = sub <8 x i16> %86, %87
  %89 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %88, <8 x i16> %88) #7
  %90 = add <4 x i32> %84, %89
  %91 = add <8 x i16> %85, %88
  %92 = getelementptr inbounds i8, i8* %70, i64 %6
  %93 = getelementptr inbounds i8, i8* %71, i64 %7
  %94 = bitcast i8* %92 to <16 x i8>*
  %95 = load <16 x i8>, <16 x i8>* %94, align 1
  %96 = bitcast i8* %93 to <16 x i8>*
  %97 = load <16 x i8>, <16 x i8>* %96, align 1
  %98 = shufflevector <16 x i8> %95, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %99 = shufflevector <16 x i8> %97, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %100 = shufflevector <16 x i8> %95, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %101 = shufflevector <16 x i8> %97, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %102 = bitcast <16 x i8> %98 to <8 x i16>
  %103 = bitcast <16 x i8> %99 to <8 x i16>
  %104 = sub <8 x i16> %102, %103
  %105 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %104, <8 x i16> %104) #7
  %106 = add <4 x i32> %105, %90
  %107 = add <8 x i16> %104, %91
  %108 = bitcast <16 x i8> %100 to <8 x i16>
  %109 = bitcast <16 x i8> %101 to <8 x i16>
  %110 = sub <8 x i16> %108, %109
  %111 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %110, <8 x i16> %110) #7
  %112 = add <4 x i32> %106, %111
  %113 = add <8 x i16> %107, %110
  %114 = getelementptr inbounds i8, i8* %92, i64 %6
  %115 = getelementptr inbounds i8, i8* %93, i64 %7
  %116 = bitcast i8* %114 to <16 x i8>*
  %117 = load <16 x i8>, <16 x i8>* %116, align 1
  %118 = bitcast i8* %115 to <16 x i8>*
  %119 = load <16 x i8>, <16 x i8>* %118, align 1
  %120 = shufflevector <16 x i8> %117, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %121 = shufflevector <16 x i8> %119, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %122 = shufflevector <16 x i8> %117, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %123 = shufflevector <16 x i8> %119, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %124 = bitcast <16 x i8> %120 to <8 x i16>
  %125 = bitcast <16 x i8> %121 to <8 x i16>
  %126 = sub <8 x i16> %124, %125
  %127 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %126, <8 x i16> %126) #7
  %128 = add <4 x i32> %127, %112
  %129 = add <8 x i16> %126, %113
  %130 = bitcast <16 x i8> %122 to <8 x i16>
  %131 = bitcast <16 x i8> %123 to <8 x i16>
  %132 = sub <8 x i16> %130, %131
  %133 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %132, <8 x i16> %132) #7
  %134 = add <4 x i32> %128, %133
  %135 = add <8 x i16> %129, %132
  %136 = getelementptr inbounds i8, i8* %114, i64 %6
  %137 = getelementptr inbounds i8, i8* %115, i64 %7
  %138 = bitcast i8* %136 to <16 x i8>*
  %139 = load <16 x i8>, <16 x i8>* %138, align 1
  %140 = bitcast i8* %137 to <16 x i8>*
  %141 = load <16 x i8>, <16 x i8>* %140, align 1
  %142 = shufflevector <16 x i8> %139, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %143 = shufflevector <16 x i8> %141, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %144 = shufflevector <16 x i8> %139, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %145 = shufflevector <16 x i8> %141, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %146 = bitcast <16 x i8> %142 to <8 x i16>
  %147 = bitcast <16 x i8> %143 to <8 x i16>
  %148 = sub <8 x i16> %146, %147
  %149 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %148, <8 x i16> %148) #7
  %150 = add <4 x i32> %149, %134
  %151 = add <8 x i16> %148, %135
  %152 = bitcast <16 x i8> %144 to <8 x i16>
  %153 = bitcast <16 x i8> %145 to <8 x i16>
  %154 = sub <8 x i16> %152, %153
  %155 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %154, <8 x i16> %154) #7
  %156 = add <4 x i32> %150, %155
  %157 = add <8 x i16> %151, %154
  %158 = getelementptr inbounds i8, i8* %136, i64 %6
  %159 = getelementptr inbounds i8, i8* %137, i64 %7
  %160 = bitcast i8* %158 to <16 x i8>*
  %161 = load <16 x i8>, <16 x i8>* %160, align 1
  %162 = bitcast i8* %159 to <16 x i8>*
  %163 = load <16 x i8>, <16 x i8>* %162, align 1
  %164 = shufflevector <16 x i8> %161, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %165 = shufflevector <16 x i8> %163, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %166 = shufflevector <16 x i8> %161, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %167 = shufflevector <16 x i8> %163, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %168 = bitcast <16 x i8> %164 to <8 x i16>
  %169 = bitcast <16 x i8> %165 to <8 x i16>
  %170 = sub <8 x i16> %168, %169
  %171 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %170, <8 x i16> %170) #7
  %172 = add <4 x i32> %171, %156
  %173 = add <8 x i16> %170, %157
  %174 = bitcast <16 x i8> %166 to <8 x i16>
  %175 = bitcast <16 x i8> %167 to <8 x i16>
  %176 = sub <8 x i16> %174, %175
  %177 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %176, <8 x i16> %176) #7
  %178 = add <4 x i32> %172, %177
  %179 = add <8 x i16> %173, %176
  %180 = bitcast <4 x i32> %178 to <16 x i8>
  %181 = shufflevector <16 x i8> %180, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %182 = bitcast <16 x i8> %181 to <4 x i32>
  %183 = add <4 x i32> %178, %182
  %184 = bitcast <4 x i32> %183 to <16 x i8>
  %185 = shufflevector <16 x i8> %184, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %186 = bitcast <16 x i8> %185 to <4 x i32>
  %187 = add <4 x i32> %183, %186
  %188 = extractelement <4 x i32> %187, i32 0
  store i32 %188, i32* %4, align 4
  %189 = bitcast <8 x i16> %179 to <16 x i8>
  %190 = shufflevector <16 x i8> %189, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %191 = bitcast <16 x i8> %190 to <8 x i16>
  %192 = add <8 x i16> %179, %191
  %193 = bitcast <8 x i16> %192 to <16 x i8>
  %194 = shufflevector <16 x i8> %193, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %195 = bitcast <16 x i8> %194 to <8 x i16>
  %196 = add <8 x i16> %192, %195
  %197 = bitcast <8 x i16> %196 to <16 x i8>
  %198 = shufflevector <16 x i8> %197, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %199 = bitcast <16 x i8> %198 to <8 x i16>
  %200 = add <8 x i16> %196, %199
  %201 = extractelement <8 x i16> %200, i64 0
  %202 = sext i16 %201 to i32
  %203 = mul nsw i32 %202, %202
  %204 = lshr i32 %203, 7
  %205 = sub i32 %188, %204
  ret i32 %205
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_variance16x16_sse2(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i32* nocapture) local_unnamed_addr #2 {
  %6 = sext i32 %1 to i64
  %7 = sext i32 %3 to i64
  br label %8

8:                                                ; preds = %8, %5
  %9 = phi <4 x i32> [ zeroinitializer, %5 ], [ %32, %8 ]
  %10 = phi <8 x i16> [ zeroinitializer, %5 ], [ %33, %8 ]
  %11 = phi i32 [ 0, %5 ], [ %36, %8 ]
  %12 = phi i8* [ %0, %5 ], [ %34, %8 ]
  %13 = phi i8* [ %2, %5 ], [ %35, %8 ]
  %14 = bitcast i8* %12 to <16 x i8>*
  %15 = load <16 x i8>, <16 x i8>* %14, align 1
  %16 = bitcast i8* %13 to <16 x i8>*
  %17 = load <16 x i8>, <16 x i8>* %16, align 1
  %18 = shufflevector <16 x i8> %15, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %19 = shufflevector <16 x i8> %17, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %20 = shufflevector <16 x i8> %15, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %21 = shufflevector <16 x i8> %17, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %22 = bitcast <16 x i8> %18 to <8 x i16>
  %23 = bitcast <16 x i8> %19 to <8 x i16>
  %24 = sub <8 x i16> %22, %23
  %25 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %24, <8 x i16> %24) #7
  %26 = add <4 x i32> %25, %9
  %27 = add <8 x i16> %24, %10
  %28 = bitcast <16 x i8> %20 to <8 x i16>
  %29 = bitcast <16 x i8> %21 to <8 x i16>
  %30 = sub <8 x i16> %28, %29
  %31 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %30, <8 x i16> %30) #7
  %32 = add <4 x i32> %26, %31
  %33 = add <8 x i16> %27, %30
  %34 = getelementptr inbounds i8, i8* %12, i64 %6
  %35 = getelementptr inbounds i8, i8* %13, i64 %7
  %36 = add nuw nsw i32 %11, 1
  %37 = icmp eq i32 %36, 16
  br i1 %37, label %38, label %8

38:                                               ; preds = %8
  %39 = bitcast <4 x i32> %32 to <16 x i8>
  %40 = shufflevector <16 x i8> %39, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %41 = bitcast <16 x i8> %40 to <4 x i32>
  %42 = add <4 x i32> %32, %41
  %43 = bitcast <4 x i32> %42 to <16 x i8>
  %44 = shufflevector <16 x i8> %43, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %45 = bitcast <16 x i8> %44 to <4 x i32>
  %46 = add <4 x i32> %42, %45
  %47 = extractelement <4 x i32> %46, i32 0
  store i32 %47, i32* %4, align 4
  %48 = bitcast <8 x i16> %33 to <16 x i8>
  %49 = shufflevector <16 x i8> %48, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %50 = bitcast <16 x i8> %49 to <8 x i16>
  %51 = add <8 x i16> %33, %50
  %52 = bitcast <8 x i16> %51 to <16 x i8>
  %53 = shufflevector <16 x i8> %52, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %54 = bitcast <16 x i8> %53 to <8 x i16>
  %55 = add <8 x i16> %51, %54
  %56 = extractelement <8 x i16> %55, i64 0
  %57 = sext i16 %56 to i64
  %58 = extractelement <8 x i16> %55, i64 1
  %59 = sext i16 %58 to i64
  %60 = add nsw i64 %57, %59
  %61 = mul nsw i64 %60, %60
  %62 = lshr i64 %61, 8
  %63 = trunc i64 %62 to i32
  %64 = sub i32 %47, %63
  ret i32 %64
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_variance16x32_sse2(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i32* nocapture) local_unnamed_addr #2 {
  %6 = sext i32 %1 to i64
  %7 = sext i32 %3 to i64
  br label %8

8:                                                ; preds = %8, %5
  %9 = phi <4 x i32> [ zeroinitializer, %5 ], [ %32, %8 ]
  %10 = phi <8 x i16> [ zeroinitializer, %5 ], [ %33, %8 ]
  %11 = phi i32 [ 0, %5 ], [ %36, %8 ]
  %12 = phi i8* [ %0, %5 ], [ %34, %8 ]
  %13 = phi i8* [ %2, %5 ], [ %35, %8 ]
  %14 = bitcast i8* %12 to <16 x i8>*
  %15 = load <16 x i8>, <16 x i8>* %14, align 1
  %16 = bitcast i8* %13 to <16 x i8>*
  %17 = load <16 x i8>, <16 x i8>* %16, align 1
  %18 = shufflevector <16 x i8> %15, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %19 = shufflevector <16 x i8> %17, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %20 = shufflevector <16 x i8> %15, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %21 = shufflevector <16 x i8> %17, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %22 = bitcast <16 x i8> %18 to <8 x i16>
  %23 = bitcast <16 x i8> %19 to <8 x i16>
  %24 = sub <8 x i16> %22, %23
  %25 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %24, <8 x i16> %24) #7
  %26 = add <4 x i32> %25, %9
  %27 = add <8 x i16> %24, %10
  %28 = bitcast <16 x i8> %20 to <8 x i16>
  %29 = bitcast <16 x i8> %21 to <8 x i16>
  %30 = sub <8 x i16> %28, %29
  %31 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %30, <8 x i16> %30) #7
  %32 = add <4 x i32> %26, %31
  %33 = add <8 x i16> %27, %30
  %34 = getelementptr inbounds i8, i8* %12, i64 %6
  %35 = getelementptr inbounds i8, i8* %13, i64 %7
  %36 = add nuw nsw i32 %11, 1
  %37 = icmp eq i32 %36, 32
  br i1 %37, label %38, label %8

38:                                               ; preds = %8
  %39 = bitcast <4 x i32> %32 to <16 x i8>
  %40 = shufflevector <16 x i8> %39, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %41 = bitcast <16 x i8> %40 to <4 x i32>
  %42 = add <4 x i32> %32, %41
  %43 = bitcast <4 x i32> %42 to <16 x i8>
  %44 = shufflevector <16 x i8> %43, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %45 = bitcast <16 x i8> %44 to <4 x i32>
  %46 = add <4 x i32> %42, %45
  %47 = extractelement <4 x i32> %46, i32 0
  store i32 %47, i32* %4, align 4
  %48 = bitcast <8 x i16> %33 to <16 x i8>
  %49 = shufflevector <16 x i8> %48, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %50 = bitcast <16 x i8> %49 to <8 x i16>
  %51 = add <8 x i16> %33, %50
  %52 = shufflevector <8 x i16> %51, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>
  %53 = bitcast <8 x i16> %52 to <4 x i32>
  %54 = ashr <4 x i32> %53, <i32 16, i32 16, i32 16, i32 16>
  %55 = bitcast <4 x i32> %54 to <16 x i8>
  %56 = shufflevector <16 x i8> %55, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %57 = bitcast <16 x i8> %56 to <4 x i32>
  %58 = add <4 x i32> %54, %57
  %59 = bitcast <4 x i32> %58 to <16 x i8>
  %60 = shufflevector <16 x i8> %59, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %61 = bitcast <16 x i8> %60 to <4 x i32>
  %62 = add <4 x i32> %58, %61
  %63 = extractelement <4 x i32> %62, i32 0
  %64 = sext i32 %63 to i64
  %65 = mul nsw i64 %64, %64
  %66 = lshr i64 %65, 9
  %67 = trunc i64 %66 to i32
  %68 = sub i32 %47, %67
  ret i32 %68
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_variance32x16_sse2(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i32* nocapture) local_unnamed_addr #2 {
  %6 = sext i32 %1 to i64
  %7 = sext i32 %3 to i64
  br label %8

8:                                                ; preds = %8, %5
  %9 = phi <4 x i32> [ zeroinitializer, %5 ], [ %54, %8 ]
  %10 = phi <8 x i16> [ zeroinitializer, %5 ], [ %55, %8 ]
  %11 = phi i32 [ 0, %5 ], [ %58, %8 ]
  %12 = phi i8* [ %0, %5 ], [ %56, %8 ]
  %13 = phi i8* [ %2, %5 ], [ %57, %8 ]
  %14 = bitcast i8* %12 to <16 x i8>*
  %15 = load <16 x i8>, <16 x i8>* %14, align 1
  %16 = bitcast i8* %13 to <16 x i8>*
  %17 = load <16 x i8>, <16 x i8>* %16, align 1
  %18 = shufflevector <16 x i8> %15, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %19 = shufflevector <16 x i8> %17, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %20 = shufflevector <16 x i8> %15, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %21 = shufflevector <16 x i8> %17, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %22 = bitcast <16 x i8> %18 to <8 x i16>
  %23 = bitcast <16 x i8> %19 to <8 x i16>
  %24 = sub <8 x i16> %22, %23
  %25 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %24, <8 x i16> %24) #7
  %26 = add <4 x i32> %25, %9
  %27 = add <8 x i16> %24, %10
  %28 = bitcast <16 x i8> %20 to <8 x i16>
  %29 = bitcast <16 x i8> %21 to <8 x i16>
  %30 = sub <8 x i16> %28, %29
  %31 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %30, <8 x i16> %30) #7
  %32 = add <4 x i32> %26, %31
  %33 = add <8 x i16> %27, %30
  %34 = getelementptr inbounds i8, i8* %12, i64 16
  %35 = getelementptr inbounds i8, i8* %13, i64 16
  %36 = bitcast i8* %34 to <16 x i8>*
  %37 = load <16 x i8>, <16 x i8>* %36, align 1
  %38 = bitcast i8* %35 to <16 x i8>*
  %39 = load <16 x i8>, <16 x i8>* %38, align 1
  %40 = shufflevector <16 x i8> %37, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %41 = shufflevector <16 x i8> %39, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %42 = shufflevector <16 x i8> %37, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %43 = shufflevector <16 x i8> %39, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %44 = bitcast <16 x i8> %40 to <8 x i16>
  %45 = bitcast <16 x i8> %41 to <8 x i16>
  %46 = sub <8 x i16> %44, %45
  %47 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %46, <8 x i16> %46) #7
  %48 = add <4 x i32> %32, %47
  %49 = add <8 x i16> %33, %46
  %50 = bitcast <16 x i8> %42 to <8 x i16>
  %51 = bitcast <16 x i8> %43 to <8 x i16>
  %52 = sub <8 x i16> %50, %51
  %53 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %52, <8 x i16> %52) #7
  %54 = add <4 x i32> %48, %53
  %55 = add <8 x i16> %49, %52
  %56 = getelementptr inbounds i8, i8* %12, i64 %6
  %57 = getelementptr inbounds i8, i8* %13, i64 %7
  %58 = add nuw nsw i32 %11, 1
  %59 = icmp eq i32 %58, 16
  br i1 %59, label %60, label %8

60:                                               ; preds = %8
  %61 = bitcast <4 x i32> %54 to <16 x i8>
  %62 = shufflevector <16 x i8> %61, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %63 = bitcast <16 x i8> %62 to <4 x i32>
  %64 = add <4 x i32> %54, %63
  %65 = bitcast <4 x i32> %64 to <16 x i8>
  %66 = shufflevector <16 x i8> %65, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %67 = bitcast <16 x i8> %66 to <4 x i32>
  %68 = add <4 x i32> %64, %67
  %69 = extractelement <4 x i32> %68, i32 0
  store i32 %69, i32* %4, align 4
  %70 = bitcast <8 x i16> %55 to <16 x i8>
  %71 = shufflevector <16 x i8> %70, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %72 = bitcast <16 x i8> %71 to <8 x i16>
  %73 = add <8 x i16> %55, %72
  %74 = shufflevector <8 x i16> %73, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>
  %75 = bitcast <8 x i16> %74 to <4 x i32>
  %76 = ashr <4 x i32> %75, <i32 16, i32 16, i32 16, i32 16>
  %77 = bitcast <4 x i32> %76 to <16 x i8>
  %78 = shufflevector <16 x i8> %77, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %79 = bitcast <16 x i8> %78 to <4 x i32>
  %80 = add <4 x i32> %76, %79
  %81 = bitcast <4 x i32> %80 to <16 x i8>
  %82 = shufflevector <16 x i8> %81, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %83 = bitcast <16 x i8> %82 to <4 x i32>
  %84 = add <4 x i32> %80, %83
  %85 = extractelement <4 x i32> %84, i32 0
  %86 = sext i32 %85 to i64
  %87 = mul nsw i64 %86, %86
  %88 = lshr i64 %87, 9
  %89 = trunc i64 %88 to i32
  %90 = sub i32 %69, %89
  ret i32 %90
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_variance32x32_sse2(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i32* nocapture) local_unnamed_addr #2 {
  %6 = sext i32 %1 to i64
  %7 = sext i32 %3 to i64
  br label %8

8:                                                ; preds = %8, %5
  %9 = phi <4 x i32> [ zeroinitializer, %5 ], [ %54, %8 ]
  %10 = phi <8 x i16> [ zeroinitializer, %5 ], [ %55, %8 ]
  %11 = phi i32 [ 0, %5 ], [ %58, %8 ]
  %12 = phi i8* [ %0, %5 ], [ %56, %8 ]
  %13 = phi i8* [ %2, %5 ], [ %57, %8 ]
  %14 = bitcast i8* %12 to <16 x i8>*
  %15 = load <16 x i8>, <16 x i8>* %14, align 1
  %16 = bitcast i8* %13 to <16 x i8>*
  %17 = load <16 x i8>, <16 x i8>* %16, align 1
  %18 = shufflevector <16 x i8> %15, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %19 = shufflevector <16 x i8> %17, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %20 = shufflevector <16 x i8> %15, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %21 = shufflevector <16 x i8> %17, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %22 = bitcast <16 x i8> %18 to <8 x i16>
  %23 = bitcast <16 x i8> %19 to <8 x i16>
  %24 = sub <8 x i16> %22, %23
  %25 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %24, <8 x i16> %24) #7
  %26 = add <4 x i32> %25, %9
  %27 = add <8 x i16> %24, %10
  %28 = bitcast <16 x i8> %20 to <8 x i16>
  %29 = bitcast <16 x i8> %21 to <8 x i16>
  %30 = sub <8 x i16> %28, %29
  %31 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %30, <8 x i16> %30) #7
  %32 = add <4 x i32> %26, %31
  %33 = add <8 x i16> %27, %30
  %34 = getelementptr inbounds i8, i8* %12, i64 16
  %35 = getelementptr inbounds i8, i8* %13, i64 16
  %36 = bitcast i8* %34 to <16 x i8>*
  %37 = load <16 x i8>, <16 x i8>* %36, align 1
  %38 = bitcast i8* %35 to <16 x i8>*
  %39 = load <16 x i8>, <16 x i8>* %38, align 1
  %40 = shufflevector <16 x i8> %37, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %41 = shufflevector <16 x i8> %39, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %42 = shufflevector <16 x i8> %37, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %43 = shufflevector <16 x i8> %39, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %44 = bitcast <16 x i8> %40 to <8 x i16>
  %45 = bitcast <16 x i8> %41 to <8 x i16>
  %46 = sub <8 x i16> %44, %45
  %47 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %46, <8 x i16> %46) #7
  %48 = add <4 x i32> %32, %47
  %49 = add <8 x i16> %33, %46
  %50 = bitcast <16 x i8> %42 to <8 x i16>
  %51 = bitcast <16 x i8> %43 to <8 x i16>
  %52 = sub <8 x i16> %50, %51
  %53 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %52, <8 x i16> %52) #7
  %54 = add <4 x i32> %48, %53
  %55 = add <8 x i16> %49, %52
  %56 = getelementptr inbounds i8, i8* %12, i64 %6
  %57 = getelementptr inbounds i8, i8* %13, i64 %7
  %58 = add nuw nsw i32 %11, 1
  %59 = icmp eq i32 %58, 32
  br i1 %59, label %60, label %8

60:                                               ; preds = %8
  %61 = bitcast <4 x i32> %54 to <16 x i8>
  %62 = shufflevector <16 x i8> %61, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %63 = bitcast <16 x i8> %62 to <4 x i32>
  %64 = add <4 x i32> %54, %63
  %65 = bitcast <4 x i32> %64 to <16 x i8>
  %66 = shufflevector <16 x i8> %65, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %67 = bitcast <16 x i8> %66 to <4 x i32>
  %68 = add <4 x i32> %64, %67
  %69 = extractelement <4 x i32> %68, i32 0
  store i32 %69, i32* %4, align 4
  %70 = shufflevector <8 x i16> %55, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>
  %71 = bitcast <8 x i16> %70 to <4 x i32>
  %72 = ashr <4 x i32> %71, <i32 16, i32 16, i32 16, i32 16>
  %73 = shufflevector <8 x i16> %55, <8 x i16> undef, <8 x i32> <i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7>
  %74 = bitcast <8 x i16> %73 to <4 x i32>
  %75 = ashr <4 x i32> %74, <i32 16, i32 16, i32 16, i32 16>
  %76 = add nsw <4 x i32> %75, %72
  %77 = bitcast <4 x i32> %76 to <16 x i8>
  %78 = shufflevector <16 x i8> %77, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %79 = bitcast <16 x i8> %78 to <4 x i32>
  %80 = add <4 x i32> %76, %79
  %81 = bitcast <4 x i32> %80 to <16 x i8>
  %82 = shufflevector <16 x i8> %81, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %83 = bitcast <16 x i8> %82 to <4 x i32>
  %84 = add <4 x i32> %80, %83
  %85 = extractelement <4 x i32> %84, i32 0
  %86 = sext i32 %85 to i64
  %87 = mul nsw i64 %86, %86
  %88 = lshr i64 %87, 10
  %89 = trunc i64 %88 to i32
  %90 = sub i32 %69, %89
  ret i32 %90
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_variance32x64_sse2(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i32* nocapture) local_unnamed_addr #2 {
  %6 = sext i32 %1 to i64
  %7 = sext i32 %3 to i64
  br label %8

8:                                                ; preds = %8, %5
  %9 = phi <4 x i32> [ zeroinitializer, %5 ], [ %54, %8 ]
  %10 = phi <8 x i16> [ zeroinitializer, %5 ], [ %55, %8 ]
  %11 = phi i32 [ 0, %5 ], [ %58, %8 ]
  %12 = phi i8* [ %0, %5 ], [ %56, %8 ]
  %13 = phi i8* [ %2, %5 ], [ %57, %8 ]
  %14 = bitcast i8* %12 to <16 x i8>*
  %15 = load <16 x i8>, <16 x i8>* %14, align 1
  %16 = bitcast i8* %13 to <16 x i8>*
  %17 = load <16 x i8>, <16 x i8>* %16, align 1
  %18 = shufflevector <16 x i8> %15, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %19 = shufflevector <16 x i8> %17, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %20 = shufflevector <16 x i8> %15, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %21 = shufflevector <16 x i8> %17, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %22 = bitcast <16 x i8> %18 to <8 x i16>
  %23 = bitcast <16 x i8> %19 to <8 x i16>
  %24 = sub <8 x i16> %22, %23
  %25 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %24, <8 x i16> %24) #7
  %26 = add <4 x i32> %25, %9
  %27 = add <8 x i16> %24, %10
  %28 = bitcast <16 x i8> %20 to <8 x i16>
  %29 = bitcast <16 x i8> %21 to <8 x i16>
  %30 = sub <8 x i16> %28, %29
  %31 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %30, <8 x i16> %30) #7
  %32 = add <4 x i32> %26, %31
  %33 = add <8 x i16> %27, %30
  %34 = getelementptr inbounds i8, i8* %12, i64 16
  %35 = getelementptr inbounds i8, i8* %13, i64 16
  %36 = bitcast i8* %34 to <16 x i8>*
  %37 = load <16 x i8>, <16 x i8>* %36, align 1
  %38 = bitcast i8* %35 to <16 x i8>*
  %39 = load <16 x i8>, <16 x i8>* %38, align 1
  %40 = shufflevector <16 x i8> %37, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %41 = shufflevector <16 x i8> %39, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %42 = shufflevector <16 x i8> %37, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %43 = shufflevector <16 x i8> %39, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %44 = bitcast <16 x i8> %40 to <8 x i16>
  %45 = bitcast <16 x i8> %41 to <8 x i16>
  %46 = sub <8 x i16> %44, %45
  %47 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %46, <8 x i16> %46) #7
  %48 = add <4 x i32> %32, %47
  %49 = add <8 x i16> %33, %46
  %50 = bitcast <16 x i8> %42 to <8 x i16>
  %51 = bitcast <16 x i8> %43 to <8 x i16>
  %52 = sub <8 x i16> %50, %51
  %53 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %52, <8 x i16> %52) #7
  %54 = add <4 x i32> %48, %53
  %55 = add <8 x i16> %49, %52
  %56 = getelementptr inbounds i8, i8* %12, i64 %6
  %57 = getelementptr inbounds i8, i8* %13, i64 %7
  %58 = add nuw nsw i32 %11, 1
  %59 = icmp eq i32 %58, 32
  br i1 %59, label %60, label %8

60:                                               ; preds = %8
  %61 = shufflevector <8 x i16> %55, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>
  %62 = bitcast <8 x i16> %61 to <4 x i32>
  %63 = ashr <4 x i32> %62, <i32 16, i32 16, i32 16, i32 16>
  %64 = shufflevector <8 x i16> %55, <8 x i16> undef, <8 x i32> <i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7>
  %65 = bitcast <8 x i16> %64 to <4 x i32>
  %66 = ashr <4 x i32> %65, <i32 16, i32 16, i32 16, i32 16>
  %67 = add nsw <4 x i32> %63, %66
  %68 = shl nsw i64 %6, 5
  %69 = getelementptr inbounds i8, i8* %0, i64 %68
  %70 = shl nsw i64 %7, 5
  %71 = getelementptr inbounds i8, i8* %2, i64 %70
  br label %72

72:                                               ; preds = %72, %60
  %73 = phi <4 x i32> [ %54, %60 ], [ %118, %72 ]
  %74 = phi <8 x i16> [ zeroinitializer, %60 ], [ %119, %72 ]
  %75 = phi i32 [ 0, %60 ], [ %122, %72 ]
  %76 = phi i8* [ %69, %60 ], [ %120, %72 ]
  %77 = phi i8* [ %71, %60 ], [ %121, %72 ]
  %78 = bitcast i8* %76 to <16 x i8>*
  %79 = load <16 x i8>, <16 x i8>* %78, align 1
  %80 = bitcast i8* %77 to <16 x i8>*
  %81 = load <16 x i8>, <16 x i8>* %80, align 1
  %82 = shufflevector <16 x i8> %79, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %83 = shufflevector <16 x i8> %81, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %84 = shufflevector <16 x i8> %79, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %85 = shufflevector <16 x i8> %81, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %86 = bitcast <16 x i8> %82 to <8 x i16>
  %87 = bitcast <16 x i8> %83 to <8 x i16>
  %88 = sub <8 x i16> %86, %87
  %89 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %88, <8 x i16> %88) #7
  %90 = add <4 x i32> %89, %73
  %91 = add <8 x i16> %88, %74
  %92 = bitcast <16 x i8> %84 to <8 x i16>
  %93 = bitcast <16 x i8> %85 to <8 x i16>
  %94 = sub <8 x i16> %92, %93
  %95 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %94, <8 x i16> %94) #7
  %96 = add <4 x i32> %90, %95
  %97 = add <8 x i16> %91, %94
  %98 = getelementptr inbounds i8, i8* %76, i64 16
  %99 = getelementptr inbounds i8, i8* %77, i64 16
  %100 = bitcast i8* %98 to <16 x i8>*
  %101 = load <16 x i8>, <16 x i8>* %100, align 1
  %102 = bitcast i8* %99 to <16 x i8>*
  %103 = load <16 x i8>, <16 x i8>* %102, align 1
  %104 = shufflevector <16 x i8> %101, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %105 = shufflevector <16 x i8> %103, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %106 = shufflevector <16 x i8> %101, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %107 = shufflevector <16 x i8> %103, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %108 = bitcast <16 x i8> %104 to <8 x i16>
  %109 = bitcast <16 x i8> %105 to <8 x i16>
  %110 = sub <8 x i16> %108, %109
  %111 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %110, <8 x i16> %110) #7
  %112 = add <4 x i32> %96, %111
  %113 = add <8 x i16> %97, %110
  %114 = bitcast <16 x i8> %106 to <8 x i16>
  %115 = bitcast <16 x i8> %107 to <8 x i16>
  %116 = sub <8 x i16> %114, %115
  %117 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %116, <8 x i16> %116) #7
  %118 = add <4 x i32> %112, %117
  %119 = add <8 x i16> %113, %116
  %120 = getelementptr inbounds i8, i8* %76, i64 %6
  %121 = getelementptr inbounds i8, i8* %77, i64 %7
  %122 = add nuw nsw i32 %75, 1
  %123 = icmp eq i32 %122, 32
  br i1 %123, label %124, label %72

124:                                              ; preds = %72
  %125 = shufflevector <8 x i16> %119, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>
  %126 = bitcast <8 x i16> %125 to <4 x i32>
  %127 = ashr <4 x i32> %126, <i32 16, i32 16, i32 16, i32 16>
  %128 = shufflevector <8 x i16> %119, <8 x i16> undef, <8 x i32> <i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7>
  %129 = bitcast <8 x i16> %128 to <4 x i32>
  %130 = ashr <4 x i32> %129, <i32 16, i32 16, i32 16, i32 16>
  %131 = add nsw <4 x i32> %127, %67
  %132 = add nsw <4 x i32> %131, %130
  %133 = bitcast <4 x i32> %118 to <16 x i8>
  %134 = bitcast <4 x i32> %132 to <16 x i8>
  %135 = shufflevector <16 x i8> %133, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %136 = bitcast <16 x i8> %135 to <4 x i32>
  %137 = add <4 x i32> %118, %136
  %138 = bitcast <4 x i32> %137 to <16 x i8>
  %139 = shufflevector <16 x i8> %138, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %140 = bitcast <16 x i8> %139 to <4 x i32>
  %141 = add <4 x i32> %137, %140
  %142 = extractelement <4 x i32> %141, i32 0
  store i32 %142, i32* %4, align 4
  %143 = shufflevector <16 x i8> %134, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %144 = bitcast <16 x i8> %143 to <4 x i32>
  %145 = add <4 x i32> %132, %144
  %146 = bitcast <4 x i32> %145 to <16 x i8>
  %147 = shufflevector <16 x i8> %146, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %148 = bitcast <16 x i8> %147 to <4 x i32>
  %149 = add <4 x i32> %145, %148
  %150 = extractelement <4 x i32> %149, i32 0
  %151 = sext i32 %150 to i64
  %152 = mul nsw i64 %151, %151
  %153 = lshr i64 %152, 11
  %154 = trunc i64 %153 to i32
  %155 = sub i32 %142, %154
  ret i32 %155
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_variance64x32_sse2(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i32* nocapture) local_unnamed_addr #2 {
  %6 = sext i32 %1 to i64
  %7 = sext i32 %3 to i64
  br label %8

8:                                                ; preds = %113, %5
  %9 = phi i64 [ 0, %5 ], [ %122, %113 ]
  %10 = phi <4 x i32> [ zeroinitializer, %5 ], [ %121, %113 ]
  %11 = phi <4 x i32> [ zeroinitializer, %5 ], [ %107, %113 ]
  %12 = shl nsw i64 %9, 4
  %13 = mul nsw i64 %12, %6
  %14 = getelementptr inbounds i8, i8* %0, i64 %13
  %15 = mul nsw i64 %12, %7
  %16 = getelementptr inbounds i8, i8* %2, i64 %15
  br label %17

17:                                               ; preds = %17, %8
  %18 = phi <4 x i32> [ %11, %8 ], [ %107, %17 ]
  %19 = phi <8 x i16> [ zeroinitializer, %8 ], [ %108, %17 ]
  %20 = phi i32 [ 0, %8 ], [ %111, %17 ]
  %21 = phi i8* [ %14, %8 ], [ %109, %17 ]
  %22 = phi i8* [ %16, %8 ], [ %110, %17 ]
  %23 = bitcast i8* %21 to <16 x i8>*
  %24 = load <16 x i8>, <16 x i8>* %23, align 1
  %25 = bitcast i8* %22 to <16 x i8>*
  %26 = load <16 x i8>, <16 x i8>* %25, align 1
  %27 = shufflevector <16 x i8> %24, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %28 = shufflevector <16 x i8> %26, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %29 = shufflevector <16 x i8> %24, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %30 = shufflevector <16 x i8> %26, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %31 = bitcast <16 x i8> %27 to <8 x i16>
  %32 = bitcast <16 x i8> %28 to <8 x i16>
  %33 = sub <8 x i16> %31, %32
  %34 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %33, <8 x i16> %33) #7
  %35 = add <4 x i32> %34, %18
  %36 = add <8 x i16> %33, %19
  %37 = bitcast <16 x i8> %29 to <8 x i16>
  %38 = bitcast <16 x i8> %30 to <8 x i16>
  %39 = sub <8 x i16> %37, %38
  %40 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %39, <8 x i16> %39) #7
  %41 = add <4 x i32> %35, %40
  %42 = add <8 x i16> %36, %39
  %43 = getelementptr inbounds i8, i8* %21, i64 16
  %44 = getelementptr inbounds i8, i8* %22, i64 16
  %45 = bitcast i8* %43 to <16 x i8>*
  %46 = load <16 x i8>, <16 x i8>* %45, align 1
  %47 = bitcast i8* %44 to <16 x i8>*
  %48 = load <16 x i8>, <16 x i8>* %47, align 1
  %49 = shufflevector <16 x i8> %46, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %50 = shufflevector <16 x i8> %48, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %51 = shufflevector <16 x i8> %46, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %52 = shufflevector <16 x i8> %48, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %53 = bitcast <16 x i8> %49 to <8 x i16>
  %54 = bitcast <16 x i8> %50 to <8 x i16>
  %55 = sub <8 x i16> %53, %54
  %56 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %55, <8 x i16> %55) #7
  %57 = add <4 x i32> %41, %56
  %58 = add <8 x i16> %42, %55
  %59 = bitcast <16 x i8> %51 to <8 x i16>
  %60 = bitcast <16 x i8> %52 to <8 x i16>
  %61 = sub <8 x i16> %59, %60
  %62 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %61, <8 x i16> %61) #7
  %63 = add <4 x i32> %57, %62
  %64 = add <8 x i16> %58, %61
  %65 = getelementptr inbounds i8, i8* %21, i64 32
  %66 = getelementptr inbounds i8, i8* %22, i64 32
  %67 = bitcast i8* %65 to <16 x i8>*
  %68 = load <16 x i8>, <16 x i8>* %67, align 1
  %69 = bitcast i8* %66 to <16 x i8>*
  %70 = load <16 x i8>, <16 x i8>* %69, align 1
  %71 = shufflevector <16 x i8> %68, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %72 = shufflevector <16 x i8> %70, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %73 = shufflevector <16 x i8> %68, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %74 = shufflevector <16 x i8> %70, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %75 = bitcast <16 x i8> %71 to <8 x i16>
  %76 = bitcast <16 x i8> %72 to <8 x i16>
  %77 = sub <8 x i16> %75, %76
  %78 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %77, <8 x i16> %77) #7
  %79 = add <4 x i32> %63, %78
  %80 = add <8 x i16> %64, %77
  %81 = bitcast <16 x i8> %73 to <8 x i16>
  %82 = bitcast <16 x i8> %74 to <8 x i16>
  %83 = sub <8 x i16> %81, %82
  %84 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %83, <8 x i16> %83) #7
  %85 = add <4 x i32> %79, %84
  %86 = add <8 x i16> %80, %83
  %87 = getelementptr inbounds i8, i8* %21, i64 48
  %88 = getelementptr inbounds i8, i8* %22, i64 48
  %89 = bitcast i8* %87 to <16 x i8>*
  %90 = load <16 x i8>, <16 x i8>* %89, align 1
  %91 = bitcast i8* %88 to <16 x i8>*
  %92 = load <16 x i8>, <16 x i8>* %91, align 1
  %93 = shufflevector <16 x i8> %90, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %94 = shufflevector <16 x i8> %92, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %95 = shufflevector <16 x i8> %90, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %96 = shufflevector <16 x i8> %92, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %97 = bitcast <16 x i8> %93 to <8 x i16>
  %98 = bitcast <16 x i8> %94 to <8 x i16>
  %99 = sub <8 x i16> %97, %98
  %100 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %99, <8 x i16> %99) #7
  %101 = add <4 x i32> %85, %100
  %102 = add <8 x i16> %86, %99
  %103 = bitcast <16 x i8> %95 to <8 x i16>
  %104 = bitcast <16 x i8> %96 to <8 x i16>
  %105 = sub <8 x i16> %103, %104
  %106 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %105, <8 x i16> %105) #7
  %107 = add <4 x i32> %101, %106
  %108 = add <8 x i16> %102, %105
  %109 = getelementptr inbounds i8, i8* %21, i64 %6
  %110 = getelementptr inbounds i8, i8* %22, i64 %7
  %111 = add nuw nsw i32 %20, 1
  %112 = icmp eq i32 %111, 16
  br i1 %112, label %113, label %17

113:                                              ; preds = %17
  %114 = shufflevector <8 x i16> %108, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>
  %115 = bitcast <8 x i16> %114 to <4 x i32>
  %116 = ashr <4 x i32> %115, <i32 16, i32 16, i32 16, i32 16>
  %117 = shufflevector <8 x i16> %108, <8 x i16> undef, <8 x i32> <i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7>
  %118 = bitcast <8 x i16> %117 to <4 x i32>
  %119 = ashr <4 x i32> %118, <i32 16, i32 16, i32 16, i32 16>
  %120 = add <4 x i32> %116, %10
  %121 = add <4 x i32> %120, %119
  %122 = add nuw nsw i64 %9, 1
  %123 = icmp eq i64 %122, 2
  br i1 %123, label %124, label %8

124:                                              ; preds = %113
  %125 = bitcast <4 x i32> %107 to <16 x i8>
  %126 = bitcast <4 x i32> %121 to <16 x i8>
  %127 = shufflevector <16 x i8> %125, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %128 = bitcast <16 x i8> %127 to <4 x i32>
  %129 = add <4 x i32> %107, %128
  %130 = bitcast <4 x i32> %129 to <16 x i8>
  %131 = shufflevector <16 x i8> %130, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %132 = bitcast <16 x i8> %131 to <4 x i32>
  %133 = add <4 x i32> %129, %132
  %134 = extractelement <4 x i32> %133, i32 0
  store i32 %134, i32* %4, align 4
  %135 = shufflevector <16 x i8> %126, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %136 = bitcast <16 x i8> %135 to <4 x i32>
  %137 = add <4 x i32> %121, %136
  %138 = bitcast <4 x i32> %137 to <16 x i8>
  %139 = shufflevector <16 x i8> %138, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %140 = bitcast <16 x i8> %139 to <4 x i32>
  %141 = add <4 x i32> %137, %140
  %142 = extractelement <4 x i32> %141, i32 0
  %143 = sext i32 %142 to i64
  %144 = mul nsw i64 %143, %143
  %145 = lshr i64 %144, 11
  %146 = trunc i64 %145 to i32
  %147 = sub i32 %134, %146
  ret i32 %147
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_variance64x64_sse2(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i32* nocapture) local_unnamed_addr #2 {
  %6 = sext i32 %1 to i64
  %7 = sext i32 %3 to i64
  br label %8

8:                                                ; preds = %113, %5
  %9 = phi i64 [ 0, %5 ], [ %122, %113 ]
  %10 = phi <4 x i32> [ zeroinitializer, %5 ], [ %121, %113 ]
  %11 = phi <4 x i32> [ zeroinitializer, %5 ], [ %107, %113 ]
  %12 = shl nsw i64 %9, 4
  %13 = mul nsw i64 %12, %6
  %14 = getelementptr inbounds i8, i8* %0, i64 %13
  %15 = mul nsw i64 %12, %7
  %16 = getelementptr inbounds i8, i8* %2, i64 %15
  br label %17

17:                                               ; preds = %17, %8
  %18 = phi <4 x i32> [ %11, %8 ], [ %107, %17 ]
  %19 = phi <8 x i16> [ zeroinitializer, %8 ], [ %108, %17 ]
  %20 = phi i32 [ 0, %8 ], [ %111, %17 ]
  %21 = phi i8* [ %14, %8 ], [ %109, %17 ]
  %22 = phi i8* [ %16, %8 ], [ %110, %17 ]
  %23 = bitcast i8* %21 to <16 x i8>*
  %24 = load <16 x i8>, <16 x i8>* %23, align 1
  %25 = bitcast i8* %22 to <16 x i8>*
  %26 = load <16 x i8>, <16 x i8>* %25, align 1
  %27 = shufflevector <16 x i8> %24, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %28 = shufflevector <16 x i8> %26, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %29 = shufflevector <16 x i8> %24, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %30 = shufflevector <16 x i8> %26, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %31 = bitcast <16 x i8> %27 to <8 x i16>
  %32 = bitcast <16 x i8> %28 to <8 x i16>
  %33 = sub <8 x i16> %31, %32
  %34 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %33, <8 x i16> %33) #7
  %35 = add <4 x i32> %34, %18
  %36 = add <8 x i16> %33, %19
  %37 = bitcast <16 x i8> %29 to <8 x i16>
  %38 = bitcast <16 x i8> %30 to <8 x i16>
  %39 = sub <8 x i16> %37, %38
  %40 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %39, <8 x i16> %39) #7
  %41 = add <4 x i32> %35, %40
  %42 = add <8 x i16> %36, %39
  %43 = getelementptr inbounds i8, i8* %21, i64 16
  %44 = getelementptr inbounds i8, i8* %22, i64 16
  %45 = bitcast i8* %43 to <16 x i8>*
  %46 = load <16 x i8>, <16 x i8>* %45, align 1
  %47 = bitcast i8* %44 to <16 x i8>*
  %48 = load <16 x i8>, <16 x i8>* %47, align 1
  %49 = shufflevector <16 x i8> %46, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %50 = shufflevector <16 x i8> %48, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %51 = shufflevector <16 x i8> %46, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %52 = shufflevector <16 x i8> %48, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %53 = bitcast <16 x i8> %49 to <8 x i16>
  %54 = bitcast <16 x i8> %50 to <8 x i16>
  %55 = sub <8 x i16> %53, %54
  %56 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %55, <8 x i16> %55) #7
  %57 = add <4 x i32> %41, %56
  %58 = add <8 x i16> %42, %55
  %59 = bitcast <16 x i8> %51 to <8 x i16>
  %60 = bitcast <16 x i8> %52 to <8 x i16>
  %61 = sub <8 x i16> %59, %60
  %62 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %61, <8 x i16> %61) #7
  %63 = add <4 x i32> %57, %62
  %64 = add <8 x i16> %58, %61
  %65 = getelementptr inbounds i8, i8* %21, i64 32
  %66 = getelementptr inbounds i8, i8* %22, i64 32
  %67 = bitcast i8* %65 to <16 x i8>*
  %68 = load <16 x i8>, <16 x i8>* %67, align 1
  %69 = bitcast i8* %66 to <16 x i8>*
  %70 = load <16 x i8>, <16 x i8>* %69, align 1
  %71 = shufflevector <16 x i8> %68, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %72 = shufflevector <16 x i8> %70, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %73 = shufflevector <16 x i8> %68, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %74 = shufflevector <16 x i8> %70, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %75 = bitcast <16 x i8> %71 to <8 x i16>
  %76 = bitcast <16 x i8> %72 to <8 x i16>
  %77 = sub <8 x i16> %75, %76
  %78 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %77, <8 x i16> %77) #7
  %79 = add <4 x i32> %63, %78
  %80 = add <8 x i16> %64, %77
  %81 = bitcast <16 x i8> %73 to <8 x i16>
  %82 = bitcast <16 x i8> %74 to <8 x i16>
  %83 = sub <8 x i16> %81, %82
  %84 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %83, <8 x i16> %83) #7
  %85 = add <4 x i32> %79, %84
  %86 = add <8 x i16> %80, %83
  %87 = getelementptr inbounds i8, i8* %21, i64 48
  %88 = getelementptr inbounds i8, i8* %22, i64 48
  %89 = bitcast i8* %87 to <16 x i8>*
  %90 = load <16 x i8>, <16 x i8>* %89, align 1
  %91 = bitcast i8* %88 to <16 x i8>*
  %92 = load <16 x i8>, <16 x i8>* %91, align 1
  %93 = shufflevector <16 x i8> %90, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %94 = shufflevector <16 x i8> %92, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %95 = shufflevector <16 x i8> %90, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %96 = shufflevector <16 x i8> %92, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %97 = bitcast <16 x i8> %93 to <8 x i16>
  %98 = bitcast <16 x i8> %94 to <8 x i16>
  %99 = sub <8 x i16> %97, %98
  %100 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %99, <8 x i16> %99) #7
  %101 = add <4 x i32> %85, %100
  %102 = add <8 x i16> %86, %99
  %103 = bitcast <16 x i8> %95 to <8 x i16>
  %104 = bitcast <16 x i8> %96 to <8 x i16>
  %105 = sub <8 x i16> %103, %104
  %106 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %105, <8 x i16> %105) #7
  %107 = add <4 x i32> %101, %106
  %108 = add <8 x i16> %102, %105
  %109 = getelementptr inbounds i8, i8* %21, i64 %6
  %110 = getelementptr inbounds i8, i8* %22, i64 %7
  %111 = add nuw nsw i32 %20, 1
  %112 = icmp eq i32 %111, 16
  br i1 %112, label %113, label %17

113:                                              ; preds = %17
  %114 = shufflevector <8 x i16> %108, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>
  %115 = bitcast <8 x i16> %114 to <4 x i32>
  %116 = ashr <4 x i32> %115, <i32 16, i32 16, i32 16, i32 16>
  %117 = shufflevector <8 x i16> %108, <8 x i16> undef, <8 x i32> <i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7>
  %118 = bitcast <8 x i16> %117 to <4 x i32>
  %119 = ashr <4 x i32> %118, <i32 16, i32 16, i32 16, i32 16>
  %120 = add <4 x i32> %116, %10
  %121 = add <4 x i32> %120, %119
  %122 = add nuw nsw i64 %9, 1
  %123 = icmp eq i64 %122, 4
  br i1 %123, label %124, label %8

124:                                              ; preds = %113
  %125 = bitcast <4 x i32> %107 to <16 x i8>
  %126 = bitcast <4 x i32> %121 to <16 x i8>
  %127 = shufflevector <16 x i8> %125, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %128 = bitcast <16 x i8> %127 to <4 x i32>
  %129 = add <4 x i32> %107, %128
  %130 = bitcast <4 x i32> %129 to <16 x i8>
  %131 = shufflevector <16 x i8> %130, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %132 = bitcast <16 x i8> %131 to <4 x i32>
  %133 = add <4 x i32> %129, %132
  %134 = extractelement <4 x i32> %133, i32 0
  store i32 %134, i32* %4, align 4
  %135 = shufflevector <16 x i8> %126, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %136 = bitcast <16 x i8> %135 to <4 x i32>
  %137 = add <4 x i32> %121, %136
  %138 = bitcast <4 x i32> %137 to <16 x i8>
  %139 = shufflevector <16 x i8> %138, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %140 = bitcast <16 x i8> %139 to <4 x i32>
  %141 = add <4 x i32> %137, %140
  %142 = extractelement <4 x i32> %141, i32 0
  %143 = sext i32 %142 to i64
  %144 = mul nsw i64 %143, %143
  %145 = lshr i64 %144, 12
  %146 = trunc i64 %145 to i32
  %147 = sub i32 %134, %146
  ret i32 %147
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden i32 @vpx_mse8x8_sse2(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i32* nocapture) local_unnamed_addr #3 {
  %6 = sext i32 %1 to i64
  %7 = sext i32 %3 to i64
  %8 = bitcast i8* %0 to i64*
  %9 = load i64, i64* %8, align 1
  %10 = insertelement <2 x i64> undef, i64 %9, i32 0
  %11 = bitcast <2 x i64> %10 to <16 x i8>
  %12 = shufflevector <16 x i8> %11, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %13 = bitcast i8* %2 to i64*
  %14 = load i64, i64* %13, align 1
  %15 = insertelement <2 x i64> undef, i64 %14, i32 0
  %16 = bitcast <2 x i64> %15 to <16 x i8>
  %17 = shufflevector <16 x i8> %16, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %18 = bitcast <16 x i8> %12 to <8 x i16>
  %19 = bitcast <16 x i8> %17 to <8 x i16>
  %20 = sub <8 x i16> %18, %19
  %21 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %20, <8 x i16> %20) #7
  %22 = getelementptr inbounds i8, i8* %0, i64 %6
  %23 = getelementptr inbounds i8, i8* %2, i64 %7
  %24 = bitcast i8* %22 to i64*
  %25 = load i64, i64* %24, align 1
  %26 = insertelement <2 x i64> undef, i64 %25, i32 0
  %27 = bitcast <2 x i64> %26 to <16 x i8>
  %28 = shufflevector <16 x i8> %27, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %29 = bitcast i8* %23 to i64*
  %30 = load i64, i64* %29, align 1
  %31 = insertelement <2 x i64> undef, i64 %30, i32 0
  %32 = bitcast <2 x i64> %31 to <16 x i8>
  %33 = shufflevector <16 x i8> %32, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %34 = bitcast <16 x i8> %28 to <8 x i16>
  %35 = bitcast <16 x i8> %33 to <8 x i16>
  %36 = sub <8 x i16> %34, %35
  %37 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %36, <8 x i16> %36) #7
  %38 = add <4 x i32> %37, %21
  %39 = getelementptr inbounds i8, i8* %22, i64 %6
  %40 = getelementptr inbounds i8, i8* %23, i64 %7
  %41 = bitcast i8* %39 to i64*
  %42 = load i64, i64* %41, align 1
  %43 = insertelement <2 x i64> undef, i64 %42, i32 0
  %44 = bitcast <2 x i64> %43 to <16 x i8>
  %45 = shufflevector <16 x i8> %44, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %46 = bitcast i8* %40 to i64*
  %47 = load i64, i64* %46, align 1
  %48 = insertelement <2 x i64> undef, i64 %47, i32 0
  %49 = bitcast <2 x i64> %48 to <16 x i8>
  %50 = shufflevector <16 x i8> %49, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %51 = bitcast <16 x i8> %45 to <8 x i16>
  %52 = bitcast <16 x i8> %50 to <8 x i16>
  %53 = sub <8 x i16> %51, %52
  %54 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %53, <8 x i16> %53) #7
  %55 = add <4 x i32> %38, %54
  %56 = getelementptr inbounds i8, i8* %39, i64 %6
  %57 = getelementptr inbounds i8, i8* %40, i64 %7
  %58 = bitcast i8* %56 to i64*
  %59 = load i64, i64* %58, align 1
  %60 = insertelement <2 x i64> undef, i64 %59, i32 0
  %61 = bitcast <2 x i64> %60 to <16 x i8>
  %62 = shufflevector <16 x i8> %61, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %63 = bitcast i8* %57 to i64*
  %64 = load i64, i64* %63, align 1
  %65 = insertelement <2 x i64> undef, i64 %64, i32 0
  %66 = bitcast <2 x i64> %65 to <16 x i8>
  %67 = shufflevector <16 x i8> %66, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %68 = bitcast <16 x i8> %62 to <8 x i16>
  %69 = bitcast <16 x i8> %67 to <8 x i16>
  %70 = sub <8 x i16> %68, %69
  %71 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %70, <8 x i16> %70) #7
  %72 = add <4 x i32> %55, %71
  %73 = getelementptr inbounds i8, i8* %56, i64 %6
  %74 = getelementptr inbounds i8, i8* %57, i64 %7
  %75 = bitcast i8* %73 to i64*
  %76 = load i64, i64* %75, align 1
  %77 = insertelement <2 x i64> undef, i64 %76, i32 0
  %78 = bitcast <2 x i64> %77 to <16 x i8>
  %79 = shufflevector <16 x i8> %78, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %80 = bitcast i8* %74 to i64*
  %81 = load i64, i64* %80, align 1
  %82 = insertelement <2 x i64> undef, i64 %81, i32 0
  %83 = bitcast <2 x i64> %82 to <16 x i8>
  %84 = shufflevector <16 x i8> %83, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %85 = bitcast <16 x i8> %79 to <8 x i16>
  %86 = bitcast <16 x i8> %84 to <8 x i16>
  %87 = sub <8 x i16> %85, %86
  %88 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %87, <8 x i16> %87) #7
  %89 = add <4 x i32> %72, %88
  %90 = getelementptr inbounds i8, i8* %73, i64 %6
  %91 = getelementptr inbounds i8, i8* %74, i64 %7
  %92 = bitcast i8* %90 to i64*
  %93 = load i64, i64* %92, align 1
  %94 = insertelement <2 x i64> undef, i64 %93, i32 0
  %95 = bitcast <2 x i64> %94 to <16 x i8>
  %96 = shufflevector <16 x i8> %95, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %97 = bitcast i8* %91 to i64*
  %98 = load i64, i64* %97, align 1
  %99 = insertelement <2 x i64> undef, i64 %98, i32 0
  %100 = bitcast <2 x i64> %99 to <16 x i8>
  %101 = shufflevector <16 x i8> %100, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %102 = bitcast <16 x i8> %96 to <8 x i16>
  %103 = bitcast <16 x i8> %101 to <8 x i16>
  %104 = sub <8 x i16> %102, %103
  %105 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %104, <8 x i16> %104) #7
  %106 = add <4 x i32> %89, %105
  %107 = getelementptr inbounds i8, i8* %90, i64 %6
  %108 = getelementptr inbounds i8, i8* %91, i64 %7
  %109 = bitcast i8* %107 to i64*
  %110 = load i64, i64* %109, align 1
  %111 = insertelement <2 x i64> undef, i64 %110, i32 0
  %112 = bitcast <2 x i64> %111 to <16 x i8>
  %113 = shufflevector <16 x i8> %112, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %114 = bitcast i8* %108 to i64*
  %115 = load i64, i64* %114, align 1
  %116 = insertelement <2 x i64> undef, i64 %115, i32 0
  %117 = bitcast <2 x i64> %116 to <16 x i8>
  %118 = shufflevector <16 x i8> %117, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %119 = bitcast <16 x i8> %113 to <8 x i16>
  %120 = bitcast <16 x i8> %118 to <8 x i16>
  %121 = sub <8 x i16> %119, %120
  %122 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %121, <8 x i16> %121) #7
  %123 = add <4 x i32> %106, %122
  %124 = getelementptr inbounds i8, i8* %107, i64 %6
  %125 = getelementptr inbounds i8, i8* %108, i64 %7
  %126 = bitcast i8* %124 to i64*
  %127 = load i64, i64* %126, align 1
  %128 = insertelement <2 x i64> undef, i64 %127, i32 0
  %129 = bitcast <2 x i64> %128 to <16 x i8>
  %130 = shufflevector <16 x i8> %129, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %131 = bitcast i8* %125 to i64*
  %132 = load i64, i64* %131, align 1
  %133 = insertelement <2 x i64> undef, i64 %132, i32 0
  %134 = bitcast <2 x i64> %133 to <16 x i8>
  %135 = shufflevector <16 x i8> %134, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %136 = bitcast <16 x i8> %130 to <8 x i16>
  %137 = bitcast <16 x i8> %135 to <8 x i16>
  %138 = sub <8 x i16> %136, %137
  %139 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %138, <8 x i16> %138) #7
  %140 = add <4 x i32> %123, %139
  %141 = bitcast <4 x i32> %140 to <16 x i8>
  %142 = shufflevector <16 x i8> %141, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %143 = bitcast <16 x i8> %142 to <4 x i32>
  %144 = add <4 x i32> %140, %143
  %145 = bitcast <4 x i32> %144 to <16 x i8>
  %146 = shufflevector <16 x i8> %145, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %147 = bitcast <16 x i8> %146 to <4 x i32>
  %148 = add <4 x i32> %144, %147
  %149 = extractelement <4 x i32> %148, i32 0
  store i32 %149, i32* %4, align 4
  ret i32 %149
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden i32 @vpx_mse8x16_sse2(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i32* nocapture) local_unnamed_addr #3 {
  %6 = sext i32 %1 to i64
  %7 = sext i32 %3 to i64
  br label %8

8:                                                ; preds = %8, %5
  %9 = phi <4 x i32> [ zeroinitializer, %5 ], [ %27, %8 ]
  %10 = phi i8* [ %0, %5 ], [ %28, %8 ]
  %11 = phi i8* [ %2, %5 ], [ %29, %8 ]
  %12 = phi i32 [ 0, %5 ], [ %30, %8 ]
  %13 = bitcast i8* %10 to i64*
  %14 = load i64, i64* %13, align 1
  %15 = insertelement <2 x i64> undef, i64 %14, i32 0
  %16 = bitcast <2 x i64> %15 to <16 x i8>
  %17 = shufflevector <16 x i8> %16, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %18 = bitcast i8* %11 to i64*
  %19 = load i64, i64* %18, align 1
  %20 = insertelement <2 x i64> undef, i64 %19, i32 0
  %21 = bitcast <2 x i64> %20 to <16 x i8>
  %22 = shufflevector <16 x i8> %21, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %23 = bitcast <16 x i8> %17 to <8 x i16>
  %24 = bitcast <16 x i8> %22 to <8 x i16>
  %25 = sub <8 x i16> %23, %24
  %26 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %25, <8 x i16> %25) #7
  %27 = add <4 x i32> %26, %9
  %28 = getelementptr inbounds i8, i8* %10, i64 %6
  %29 = getelementptr inbounds i8, i8* %11, i64 %7
  %30 = add nuw nsw i32 %12, 1
  %31 = icmp eq i32 %30, 16
  br i1 %31, label %32, label %8

32:                                               ; preds = %8
  %33 = bitcast <4 x i32> %27 to <16 x i8>
  %34 = shufflevector <16 x i8> %33, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %35 = bitcast <16 x i8> %34 to <4 x i32>
  %36 = add <4 x i32> %27, %35
  %37 = bitcast <4 x i32> %36 to <16 x i8>
  %38 = shufflevector <16 x i8> %37, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %39 = bitcast <16 x i8> %38 to <4 x i32>
  %40 = add <4 x i32> %36, %39
  %41 = extractelement <4 x i32> %40, i32 0
  store i32 %41, i32* %4, align 4
  ret i32 %41
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden i32 @vpx_mse16x8_sse2(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i32* nocapture) local_unnamed_addr #3 {
  %6 = sext i32 %1 to i64
  %7 = sext i32 %3 to i64
  %8 = bitcast i8* %0 to <16 x i8>*
  %9 = load <16 x i8>, <16 x i8>* %8, align 1
  %10 = bitcast i8* %2 to <16 x i8>*
  %11 = load <16 x i8>, <16 x i8>* %10, align 1
  %12 = shufflevector <16 x i8> %9, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %13 = shufflevector <16 x i8> %11, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %14 = shufflevector <16 x i8> %9, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %15 = shufflevector <16 x i8> %11, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %16 = bitcast <16 x i8> %12 to <8 x i16>
  %17 = bitcast <16 x i8> %13 to <8 x i16>
  %18 = sub <8 x i16> %16, %17
  %19 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %18, <8 x i16> %18) #7
  %20 = bitcast <16 x i8> %14 to <8 x i16>
  %21 = bitcast <16 x i8> %15 to <8 x i16>
  %22 = sub <8 x i16> %20, %21
  %23 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %22, <8 x i16> %22) #7
  %24 = add <4 x i32> %23, %19
  %25 = getelementptr inbounds i8, i8* %0, i64 %6
  %26 = getelementptr inbounds i8, i8* %2, i64 %7
  %27 = bitcast i8* %25 to <16 x i8>*
  %28 = load <16 x i8>, <16 x i8>* %27, align 1
  %29 = bitcast i8* %26 to <16 x i8>*
  %30 = load <16 x i8>, <16 x i8>* %29, align 1
  %31 = shufflevector <16 x i8> %28, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %32 = shufflevector <16 x i8> %30, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %33 = shufflevector <16 x i8> %28, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %34 = shufflevector <16 x i8> %30, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %35 = bitcast <16 x i8> %31 to <8 x i16>
  %36 = bitcast <16 x i8> %32 to <8 x i16>
  %37 = sub <8 x i16> %35, %36
  %38 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %37, <8 x i16> %37) #7
  %39 = add <4 x i32> %24, %38
  %40 = bitcast <16 x i8> %33 to <8 x i16>
  %41 = bitcast <16 x i8> %34 to <8 x i16>
  %42 = sub <8 x i16> %40, %41
  %43 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %42, <8 x i16> %42) #7
  %44 = add <4 x i32> %39, %43
  %45 = getelementptr inbounds i8, i8* %25, i64 %6
  %46 = getelementptr inbounds i8, i8* %26, i64 %7
  %47 = bitcast i8* %45 to <16 x i8>*
  %48 = load <16 x i8>, <16 x i8>* %47, align 1
  %49 = bitcast i8* %46 to <16 x i8>*
  %50 = load <16 x i8>, <16 x i8>* %49, align 1
  %51 = shufflevector <16 x i8> %48, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %52 = shufflevector <16 x i8> %50, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %53 = shufflevector <16 x i8> %48, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %54 = shufflevector <16 x i8> %50, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %55 = bitcast <16 x i8> %51 to <8 x i16>
  %56 = bitcast <16 x i8> %52 to <8 x i16>
  %57 = sub <8 x i16> %55, %56
  %58 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %57, <8 x i16> %57) #7
  %59 = add <4 x i32> %44, %58
  %60 = bitcast <16 x i8> %53 to <8 x i16>
  %61 = bitcast <16 x i8> %54 to <8 x i16>
  %62 = sub <8 x i16> %60, %61
  %63 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %62, <8 x i16> %62) #7
  %64 = add <4 x i32> %59, %63
  %65 = getelementptr inbounds i8, i8* %45, i64 %6
  %66 = getelementptr inbounds i8, i8* %46, i64 %7
  %67 = bitcast i8* %65 to <16 x i8>*
  %68 = load <16 x i8>, <16 x i8>* %67, align 1
  %69 = bitcast i8* %66 to <16 x i8>*
  %70 = load <16 x i8>, <16 x i8>* %69, align 1
  %71 = shufflevector <16 x i8> %68, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %72 = shufflevector <16 x i8> %70, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %73 = shufflevector <16 x i8> %68, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %74 = shufflevector <16 x i8> %70, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %75 = bitcast <16 x i8> %71 to <8 x i16>
  %76 = bitcast <16 x i8> %72 to <8 x i16>
  %77 = sub <8 x i16> %75, %76
  %78 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %77, <8 x i16> %77) #7
  %79 = add <4 x i32> %64, %78
  %80 = bitcast <16 x i8> %73 to <8 x i16>
  %81 = bitcast <16 x i8> %74 to <8 x i16>
  %82 = sub <8 x i16> %80, %81
  %83 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %82, <8 x i16> %82) #7
  %84 = add <4 x i32> %79, %83
  %85 = getelementptr inbounds i8, i8* %65, i64 %6
  %86 = getelementptr inbounds i8, i8* %66, i64 %7
  %87 = bitcast i8* %85 to <16 x i8>*
  %88 = load <16 x i8>, <16 x i8>* %87, align 1
  %89 = bitcast i8* %86 to <16 x i8>*
  %90 = load <16 x i8>, <16 x i8>* %89, align 1
  %91 = shufflevector <16 x i8> %88, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %92 = shufflevector <16 x i8> %90, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %93 = shufflevector <16 x i8> %88, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %94 = shufflevector <16 x i8> %90, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %95 = bitcast <16 x i8> %91 to <8 x i16>
  %96 = bitcast <16 x i8> %92 to <8 x i16>
  %97 = sub <8 x i16> %95, %96
  %98 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %97, <8 x i16> %97) #7
  %99 = add <4 x i32> %84, %98
  %100 = bitcast <16 x i8> %93 to <8 x i16>
  %101 = bitcast <16 x i8> %94 to <8 x i16>
  %102 = sub <8 x i16> %100, %101
  %103 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %102, <8 x i16> %102) #7
  %104 = add <4 x i32> %99, %103
  %105 = getelementptr inbounds i8, i8* %85, i64 %6
  %106 = getelementptr inbounds i8, i8* %86, i64 %7
  %107 = bitcast i8* %105 to <16 x i8>*
  %108 = load <16 x i8>, <16 x i8>* %107, align 1
  %109 = bitcast i8* %106 to <16 x i8>*
  %110 = load <16 x i8>, <16 x i8>* %109, align 1
  %111 = shufflevector <16 x i8> %108, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %112 = shufflevector <16 x i8> %110, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %113 = shufflevector <16 x i8> %108, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %114 = shufflevector <16 x i8> %110, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %115 = bitcast <16 x i8> %111 to <8 x i16>
  %116 = bitcast <16 x i8> %112 to <8 x i16>
  %117 = sub <8 x i16> %115, %116
  %118 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %117, <8 x i16> %117) #7
  %119 = add <4 x i32> %104, %118
  %120 = bitcast <16 x i8> %113 to <8 x i16>
  %121 = bitcast <16 x i8> %114 to <8 x i16>
  %122 = sub <8 x i16> %120, %121
  %123 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %122, <8 x i16> %122) #7
  %124 = add <4 x i32> %119, %123
  %125 = getelementptr inbounds i8, i8* %105, i64 %6
  %126 = getelementptr inbounds i8, i8* %106, i64 %7
  %127 = bitcast i8* %125 to <16 x i8>*
  %128 = load <16 x i8>, <16 x i8>* %127, align 1
  %129 = bitcast i8* %126 to <16 x i8>*
  %130 = load <16 x i8>, <16 x i8>* %129, align 1
  %131 = shufflevector <16 x i8> %128, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %132 = shufflevector <16 x i8> %130, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %133 = shufflevector <16 x i8> %128, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %134 = shufflevector <16 x i8> %130, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %135 = bitcast <16 x i8> %131 to <8 x i16>
  %136 = bitcast <16 x i8> %132 to <8 x i16>
  %137 = sub <8 x i16> %135, %136
  %138 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %137, <8 x i16> %137) #7
  %139 = add <4 x i32> %124, %138
  %140 = bitcast <16 x i8> %133 to <8 x i16>
  %141 = bitcast <16 x i8> %134 to <8 x i16>
  %142 = sub <8 x i16> %140, %141
  %143 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %142, <8 x i16> %142) #7
  %144 = add <4 x i32> %139, %143
  %145 = getelementptr inbounds i8, i8* %125, i64 %6
  %146 = getelementptr inbounds i8, i8* %126, i64 %7
  %147 = bitcast i8* %145 to <16 x i8>*
  %148 = load <16 x i8>, <16 x i8>* %147, align 1
  %149 = bitcast i8* %146 to <16 x i8>*
  %150 = load <16 x i8>, <16 x i8>* %149, align 1
  %151 = shufflevector <16 x i8> %148, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %152 = shufflevector <16 x i8> %150, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %153 = shufflevector <16 x i8> %148, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %154 = shufflevector <16 x i8> %150, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %155 = bitcast <16 x i8> %151 to <8 x i16>
  %156 = bitcast <16 x i8> %152 to <8 x i16>
  %157 = sub <8 x i16> %155, %156
  %158 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %157, <8 x i16> %157) #7
  %159 = add <4 x i32> %144, %158
  %160 = bitcast <16 x i8> %153 to <8 x i16>
  %161 = bitcast <16 x i8> %154 to <8 x i16>
  %162 = sub <8 x i16> %160, %161
  %163 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %162, <8 x i16> %162) #7
  %164 = add <4 x i32> %159, %163
  %165 = bitcast <4 x i32> %164 to <16 x i8>
  %166 = shufflevector <16 x i8> %165, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %167 = bitcast <16 x i8> %166 to <4 x i32>
  %168 = add <4 x i32> %164, %167
  %169 = bitcast <4 x i32> %168 to <16 x i8>
  %170 = shufflevector <16 x i8> %169, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %171 = bitcast <16 x i8> %170 to <4 x i32>
  %172 = add <4 x i32> %168, %171
  %173 = extractelement <4 x i32> %172, i32 0
  store i32 %173, i32* %4, align 4
  ret i32 %173
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden i32 @vpx_mse16x16_sse2(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i32* nocapture) local_unnamed_addr #3 {
  %6 = sext i32 %1 to i64
  %7 = sext i32 %3 to i64
  br label %8

8:                                                ; preds = %8, %5
  %9 = phi <4 x i32> [ zeroinitializer, %5 ], [ %30, %8 ]
  %10 = phi i32 [ 0, %5 ], [ %33, %8 ]
  %11 = phi i8* [ %0, %5 ], [ %31, %8 ]
  %12 = phi i8* [ %2, %5 ], [ %32, %8 ]
  %13 = bitcast i8* %11 to <16 x i8>*
  %14 = load <16 x i8>, <16 x i8>* %13, align 1
  %15 = bitcast i8* %12 to <16 x i8>*
  %16 = load <16 x i8>, <16 x i8>* %15, align 1
  %17 = shufflevector <16 x i8> %14, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %18 = shufflevector <16 x i8> %16, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %19 = shufflevector <16 x i8> %14, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %20 = shufflevector <16 x i8> %16, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %21 = bitcast <16 x i8> %17 to <8 x i16>
  %22 = bitcast <16 x i8> %18 to <8 x i16>
  %23 = sub <8 x i16> %21, %22
  %24 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %23, <8 x i16> %23) #7
  %25 = add <4 x i32> %24, %9
  %26 = bitcast <16 x i8> %19 to <8 x i16>
  %27 = bitcast <16 x i8> %20 to <8 x i16>
  %28 = sub <8 x i16> %26, %27
  %29 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %28, <8 x i16> %28) #7
  %30 = add <4 x i32> %25, %29
  %31 = getelementptr inbounds i8, i8* %11, i64 %6
  %32 = getelementptr inbounds i8, i8* %12, i64 %7
  %33 = add nuw nsw i32 %10, 1
  %34 = icmp eq i32 %33, 16
  br i1 %34, label %35, label %8

35:                                               ; preds = %8
  %36 = bitcast <4 x i32> %30 to <16 x i8>
  %37 = shufflevector <16 x i8> %36, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %38 = bitcast <16 x i8> %37 to <4 x i32>
  %39 = add <4 x i32> %30, %38
  %40 = bitcast <4 x i32> %39 to <16 x i8>
  %41 = shufflevector <16 x i8> %40, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %42 = bitcast <16 x i8> %41 to <4 x i32>
  %43 = add <4 x i32> %39, %42
  %44 = extractelement <4 x i32> %43, i32 0
  store i32 %44, i32* %4, align 4
  ret i32 %44
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_sub_pixel_variance64x64_sse2(i8*, i32, i32, i32, i8*, i32, i32* nocapture) local_unnamed_addr #4 {
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #7
  store i32 -1431655766, i32* %8, align 4
  %11 = sext i32 %1 to i64
  %12 = sext i32 %5 to i64
  %13 = call i32 @vpx_sub_pixel_variance16xh_sse2(i8* %0, i64 %11, i32 %2, i32 %3, i8* %4, i64 %12, i32 64, i32* nonnull %8, i8* null, i8* null) #7
  %14 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %14) #7
  store i32 -1431655766, i32* %9, align 4
  %15 = getelementptr inbounds i8, i8* %0, i64 16
  %16 = getelementptr inbounds i8, i8* %4, i64 16
  %17 = call i32 @vpx_sub_pixel_variance16xh_sse2(i8* %15, i64 %11, i32 %2, i32 %3, i8* %16, i64 %12, i32 64, i32* nonnull %9, i8* null, i8* null) #7
  %18 = add nsw i32 %17, %13
  %19 = load i32, i32* %9, align 4
  %20 = load i32, i32* %8, align 4
  %21 = add i32 %20, %19
  store i32 %21, i32* %8, align 4
  %22 = getelementptr inbounds i8, i8* %0, i64 32
  %23 = getelementptr inbounds i8, i8* %4, i64 32
  %24 = call i32 @vpx_sub_pixel_variance16xh_sse2(i8* %22, i64 %11, i32 %2, i32 %3, i8* %23, i64 %12, i32 64, i32* nonnull %9, i8* null, i8* null) #7
  %25 = add nsw i32 %18, %24
  %26 = load i32, i32* %9, align 4
  %27 = load i32, i32* %8, align 4
  %28 = add i32 %27, %26
  store i32 %28, i32* %8, align 4
  %29 = getelementptr inbounds i8, i8* %0, i64 48
  %30 = getelementptr inbounds i8, i8* %4, i64 48
  %31 = call i32 @vpx_sub_pixel_variance16xh_sse2(i8* %29, i64 %11, i32 %2, i32 %3, i8* %30, i64 %12, i32 64, i32* nonnull %9, i8* null, i8* null) #7
  %32 = add nsw i32 %25, %31
  %33 = load i32, i32* %9, align 4
  %34 = load i32, i32* %8, align 4
  %35 = add i32 %34, %33
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %14) #7
  store i32 %35, i32* %6, align 4
  %36 = sext i32 %32 to i64
  %37 = mul nsw i64 %36, %36
  %38 = lshr i64 %37, 12
  %39 = trunc i64 %38 to i32
  %40 = sub i32 %35, %39
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #7
  ret i32 %40
}

declare i32 @vpx_sub_pixel_variance16xh_sse2(i8*, i64, i32, i32, i8*, i64, i32, i32*, i8*, i8*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_sub_pixel_variance64x32_sse2(i8*, i32, i32, i32, i8*, i32, i32* nocapture) local_unnamed_addr #4 {
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #7
  store i32 -1431655766, i32* %8, align 4
  %11 = sext i32 %1 to i64
  %12 = sext i32 %5 to i64
  %13 = call i32 @vpx_sub_pixel_variance16xh_sse2(i8* %0, i64 %11, i32 %2, i32 %3, i8* %4, i64 %12, i32 32, i32* nonnull %8, i8* null, i8* null) #7
  %14 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %14) #7
  store i32 -1431655766, i32* %9, align 4
  %15 = getelementptr inbounds i8, i8* %0, i64 16
  %16 = getelementptr inbounds i8, i8* %4, i64 16
  %17 = call i32 @vpx_sub_pixel_variance16xh_sse2(i8* %15, i64 %11, i32 %2, i32 %3, i8* %16, i64 %12, i32 32, i32* nonnull %9, i8* null, i8* null) #7
  %18 = add nsw i32 %17, %13
  %19 = load i32, i32* %9, align 4
  %20 = load i32, i32* %8, align 4
  %21 = add i32 %20, %19
  store i32 %21, i32* %8, align 4
  %22 = getelementptr inbounds i8, i8* %0, i64 32
  %23 = getelementptr inbounds i8, i8* %4, i64 32
  %24 = call i32 @vpx_sub_pixel_variance16xh_sse2(i8* %22, i64 %11, i32 %2, i32 %3, i8* %23, i64 %12, i32 32, i32* nonnull %9, i8* null, i8* null) #7
  %25 = add nsw i32 %18, %24
  %26 = load i32, i32* %9, align 4
  %27 = load i32, i32* %8, align 4
  %28 = add i32 %27, %26
  store i32 %28, i32* %8, align 4
  %29 = getelementptr inbounds i8, i8* %0, i64 48
  %30 = getelementptr inbounds i8, i8* %4, i64 48
  %31 = call i32 @vpx_sub_pixel_variance16xh_sse2(i8* %29, i64 %11, i32 %2, i32 %3, i8* %30, i64 %12, i32 32, i32* nonnull %9, i8* null, i8* null) #7
  %32 = add nsw i32 %25, %31
  %33 = load i32, i32* %9, align 4
  %34 = load i32, i32* %8, align 4
  %35 = add i32 %34, %33
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %14) #7
  store i32 %35, i32* %6, align 4
  %36 = sext i32 %32 to i64
  %37 = mul nsw i64 %36, %36
  %38 = lshr i64 %37, 11
  %39 = trunc i64 %38 to i32
  %40 = sub i32 %35, %39
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #7
  ret i32 %40
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_sub_pixel_variance32x64_sse2(i8*, i32, i32, i32, i8*, i32, i32* nocapture) local_unnamed_addr #4 {
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #7
  store i32 -1431655766, i32* %8, align 4
  %11 = sext i32 %1 to i64
  %12 = sext i32 %5 to i64
  %13 = call i32 @vpx_sub_pixel_variance16xh_sse2(i8* %0, i64 %11, i32 %2, i32 %3, i8* %4, i64 %12, i32 64, i32* nonnull %8, i8* null, i8* null) #7
  %14 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %14) #7
  store i32 -1431655766, i32* %9, align 4
  %15 = getelementptr inbounds i8, i8* %0, i64 16
  %16 = getelementptr inbounds i8, i8* %4, i64 16
  %17 = call i32 @vpx_sub_pixel_variance16xh_sse2(i8* %15, i64 %11, i32 %2, i32 %3, i8* %16, i64 %12, i32 64, i32* nonnull %9, i8* null, i8* null) #7
  %18 = add nsw i32 %17, %13
  %19 = load i32, i32* %9, align 4
  %20 = load i32, i32* %8, align 4
  %21 = add i32 %20, %19
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %14) #7
  store i32 %21, i32* %6, align 4
  %22 = sext i32 %18 to i64
  %23 = mul nsw i64 %22, %22
  %24 = lshr i64 %23, 11
  %25 = trunc i64 %24 to i32
  %26 = sub i32 %21, %25
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #7
  ret i32 %26
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_sub_pixel_variance32x32_sse2(i8*, i32, i32, i32, i8*, i32, i32* nocapture) local_unnamed_addr #4 {
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #7
  store i32 -1431655766, i32* %8, align 4
  %11 = sext i32 %1 to i64
  %12 = sext i32 %5 to i64
  %13 = call i32 @vpx_sub_pixel_variance16xh_sse2(i8* %0, i64 %11, i32 %2, i32 %3, i8* %4, i64 %12, i32 32, i32* nonnull %8, i8* null, i8* null) #7
  %14 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %14) #7
  store i32 -1431655766, i32* %9, align 4
  %15 = getelementptr inbounds i8, i8* %0, i64 16
  %16 = getelementptr inbounds i8, i8* %4, i64 16
  %17 = call i32 @vpx_sub_pixel_variance16xh_sse2(i8* %15, i64 %11, i32 %2, i32 %3, i8* %16, i64 %12, i32 32, i32* nonnull %9, i8* null, i8* null) #7
  %18 = add nsw i32 %17, %13
  %19 = load i32, i32* %9, align 4
  %20 = load i32, i32* %8, align 4
  %21 = add i32 %20, %19
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %14) #7
  store i32 %21, i32* %6, align 4
  %22 = sext i32 %18 to i64
  %23 = mul nsw i64 %22, %22
  %24 = lshr i64 %23, 10
  %25 = trunc i64 %24 to i32
  %26 = sub i32 %21, %25
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #7
  ret i32 %26
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_sub_pixel_variance32x16_sse2(i8*, i32, i32, i32, i8*, i32, i32* nocapture) local_unnamed_addr #4 {
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #7
  store i32 -1431655766, i32* %8, align 4
  %11 = sext i32 %1 to i64
  %12 = sext i32 %5 to i64
  %13 = call i32 @vpx_sub_pixel_variance16xh_sse2(i8* %0, i64 %11, i32 %2, i32 %3, i8* %4, i64 %12, i32 16, i32* nonnull %8, i8* null, i8* null) #7
  %14 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %14) #7
  store i32 -1431655766, i32* %9, align 4
  %15 = getelementptr inbounds i8, i8* %0, i64 16
  %16 = getelementptr inbounds i8, i8* %4, i64 16
  %17 = call i32 @vpx_sub_pixel_variance16xh_sse2(i8* %15, i64 %11, i32 %2, i32 %3, i8* %16, i64 %12, i32 16, i32* nonnull %9, i8* null, i8* null) #7
  %18 = add nsw i32 %17, %13
  %19 = load i32, i32* %9, align 4
  %20 = load i32, i32* %8, align 4
  %21 = add i32 %20, %19
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %14) #7
  store i32 %21, i32* %6, align 4
  %22 = sext i32 %18 to i64
  %23 = mul nsw i64 %22, %22
  %24 = lshr i64 %23, 9
  %25 = trunc i64 %24 to i32
  %26 = sub i32 %21, %25
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #7
  ret i32 %26
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_sub_pixel_variance16x32_sse2(i8*, i32, i32, i32, i8*, i32, i32* nocapture) local_unnamed_addr #4 {
  %8 = alloca i32, align 4
  %9 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #7
  store i32 -1431655766, i32* %8, align 4
  %10 = sext i32 %1 to i64
  %11 = sext i32 %5 to i64
  %12 = call i32 @vpx_sub_pixel_variance16xh_sse2(i8* %0, i64 %10, i32 %2, i32 %3, i8* %4, i64 %11, i32 32, i32* nonnull %8, i8* null, i8* null) #7
  %13 = load i32, i32* %8, align 4
  store i32 %13, i32* %6, align 4
  %14 = sext i32 %12 to i64
  %15 = mul nsw i64 %14, %14
  %16 = lshr i64 %15, 9
  %17 = trunc i64 %16 to i32
  %18 = sub i32 %13, %17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #7
  ret i32 %18
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_sub_pixel_variance16x16_sse2(i8*, i32, i32, i32, i8*, i32, i32* nocapture) local_unnamed_addr #4 {
  %8 = alloca i32, align 4
  %9 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #7
  store i32 -1431655766, i32* %8, align 4
  %10 = sext i32 %1 to i64
  %11 = sext i32 %5 to i64
  %12 = call i32 @vpx_sub_pixel_variance16xh_sse2(i8* %0, i64 %10, i32 %2, i32 %3, i8* %4, i64 %11, i32 16, i32* nonnull %8, i8* null, i8* null) #7
  %13 = load i32, i32* %8, align 4
  store i32 %13, i32* %6, align 4
  %14 = mul i32 %12, %12
  %15 = lshr i32 %14, 8
  %16 = sub i32 %13, %15
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #7
  ret i32 %16
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_sub_pixel_variance16x8_sse2(i8*, i32, i32, i32, i8*, i32, i32* nocapture) local_unnamed_addr #4 {
  %8 = alloca i32, align 4
  %9 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #7
  store i32 -1431655766, i32* %8, align 4
  %10 = sext i32 %1 to i64
  %11 = sext i32 %5 to i64
  %12 = call i32 @vpx_sub_pixel_variance16xh_sse2(i8* %0, i64 %10, i32 %2, i32 %3, i8* %4, i64 %11, i32 8, i32* nonnull %8, i8* null, i8* null) #7
  %13 = load i32, i32* %8, align 4
  store i32 %13, i32* %6, align 4
  %14 = mul nsw i32 %12, %12
  %15 = lshr i32 %14, 7
  %16 = sub i32 %13, %15
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #7
  ret i32 %16
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_sub_pixel_variance8x16_sse2(i8*, i32, i32, i32, i8*, i32, i32* nocapture) local_unnamed_addr #4 {
  %8 = alloca i32, align 4
  %9 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #7
  store i32 -1431655766, i32* %8, align 4
  %10 = sext i32 %1 to i64
  %11 = sext i32 %5 to i64
  %12 = call i32 @vpx_sub_pixel_variance8xh_sse2(i8* %0, i64 %10, i32 %2, i32 %3, i8* %4, i64 %11, i32 16, i32* nonnull %8, i8* null, i8* null) #7
  %13 = load i32, i32* %8, align 4
  store i32 %13, i32* %6, align 4
  %14 = mul nsw i32 %12, %12
  %15 = lshr i32 %14, 7
  %16 = sub i32 %13, %15
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #7
  ret i32 %16
}

declare i32 @vpx_sub_pixel_variance8xh_sse2(i8*, i64, i32, i32, i8*, i64, i32, i32*, i8*, i8*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_sub_pixel_variance8x8_sse2(i8*, i32, i32, i32, i8*, i32, i32* nocapture) local_unnamed_addr #4 {
  %8 = alloca i32, align 4
  %9 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #7
  store i32 -1431655766, i32* %8, align 4
  %10 = sext i32 %1 to i64
  %11 = sext i32 %5 to i64
  %12 = call i32 @vpx_sub_pixel_variance8xh_sse2(i8* %0, i64 %10, i32 %2, i32 %3, i8* %4, i64 %11, i32 8, i32* nonnull %8, i8* null, i8* null) #7
  %13 = load i32, i32* %8, align 4
  store i32 %13, i32* %6, align 4
  %14 = mul nsw i32 %12, %12
  %15 = lshr i32 %14, 6
  %16 = sub i32 %13, %15
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #7
  ret i32 %16
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_sub_pixel_variance8x4_sse2(i8*, i32, i32, i32, i8*, i32, i32* nocapture) local_unnamed_addr #4 {
  %8 = alloca i32, align 4
  %9 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #7
  store i32 -1431655766, i32* %8, align 4
  %10 = sext i32 %1 to i64
  %11 = sext i32 %5 to i64
  %12 = call i32 @vpx_sub_pixel_variance8xh_sse2(i8* %0, i64 %10, i32 %2, i32 %3, i8* %4, i64 %11, i32 4, i32* nonnull %8, i8* null, i8* null) #7
  %13 = load i32, i32* %8, align 4
  store i32 %13, i32* %6, align 4
  %14 = mul nsw i32 %12, %12
  %15 = lshr i32 %14, 5
  %16 = sub i32 %13, %15
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #7
  ret i32 %16
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_sub_pixel_variance4x8_sse2(i8*, i32, i32, i32, i8*, i32, i32* nocapture) local_unnamed_addr #4 {
  %8 = alloca i32, align 4
  %9 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #7
  store i32 -1431655766, i32* %8, align 4
  %10 = sext i32 %1 to i64
  %11 = sext i32 %5 to i64
  %12 = call i32 @vpx_sub_pixel_variance4xh_sse2(i8* %0, i64 %10, i32 %2, i32 %3, i8* %4, i64 %11, i32 8, i32* nonnull %8, i8* null, i8* null) #7
  %13 = load i32, i32* %8, align 4
  store i32 %13, i32* %6, align 4
  %14 = mul nsw i32 %12, %12
  %15 = lshr i32 %14, 5
  %16 = sub i32 %13, %15
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #7
  ret i32 %16
}

declare i32 @vpx_sub_pixel_variance4xh_sse2(i8*, i64, i32, i32, i8*, i64, i32, i32*, i8*, i8*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_sub_pixel_variance4x4_sse2(i8*, i32, i32, i32, i8*, i32, i32* nocapture) local_unnamed_addr #4 {
  %8 = alloca i32, align 4
  %9 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #7
  store i32 -1431655766, i32* %8, align 4
  %10 = sext i32 %1 to i64
  %11 = sext i32 %5 to i64
  %12 = call i32 @vpx_sub_pixel_variance4xh_sse2(i8* %0, i64 %10, i32 %2, i32 %3, i8* %4, i64 %11, i32 4, i32* nonnull %8, i8* null, i8* null) #7
  %13 = load i32, i32* %8, align 4
  store i32 %13, i32* %6, align 4
  %14 = mul nsw i32 %12, %12
  %15 = lshr i32 %14, 4
  %16 = sub i32 %13, %15
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #7
  ret i32 %16
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_sub_pixel_variance64x64_ssse3(i8*, i32, i32, i32, i8*, i32, i32* nocapture) local_unnamed_addr #4 {
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #7
  store i32 -1431655766, i32* %8, align 4
  %11 = sext i32 %1 to i64
  %12 = sext i32 %5 to i64
  %13 = call i32 @vpx_sub_pixel_variance16xh_ssse3(i8* %0, i64 %11, i32 %2, i32 %3, i8* %4, i64 %12, i32 64, i32* nonnull %8, i8* null, i8* null) #7
  %14 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %14) #7
  store i32 -1431655766, i32* %9, align 4
  %15 = getelementptr inbounds i8, i8* %0, i64 16
  %16 = getelementptr inbounds i8, i8* %4, i64 16
  %17 = call i32 @vpx_sub_pixel_variance16xh_ssse3(i8* %15, i64 %11, i32 %2, i32 %3, i8* %16, i64 %12, i32 64, i32* nonnull %9, i8* null, i8* null) #7
  %18 = add nsw i32 %17, %13
  %19 = load i32, i32* %9, align 4
  %20 = load i32, i32* %8, align 4
  %21 = add i32 %20, %19
  store i32 %21, i32* %8, align 4
  %22 = getelementptr inbounds i8, i8* %0, i64 32
  %23 = getelementptr inbounds i8, i8* %4, i64 32
  %24 = call i32 @vpx_sub_pixel_variance16xh_ssse3(i8* %22, i64 %11, i32 %2, i32 %3, i8* %23, i64 %12, i32 64, i32* nonnull %9, i8* null, i8* null) #7
  %25 = add nsw i32 %18, %24
  %26 = load i32, i32* %9, align 4
  %27 = load i32, i32* %8, align 4
  %28 = add i32 %27, %26
  store i32 %28, i32* %8, align 4
  %29 = getelementptr inbounds i8, i8* %0, i64 48
  %30 = getelementptr inbounds i8, i8* %4, i64 48
  %31 = call i32 @vpx_sub_pixel_variance16xh_ssse3(i8* %29, i64 %11, i32 %2, i32 %3, i8* %30, i64 %12, i32 64, i32* nonnull %9, i8* null, i8* null) #7
  %32 = add nsw i32 %25, %31
  %33 = load i32, i32* %9, align 4
  %34 = load i32, i32* %8, align 4
  %35 = add i32 %34, %33
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %14) #7
  store i32 %35, i32* %6, align 4
  %36 = sext i32 %32 to i64
  %37 = mul nsw i64 %36, %36
  %38 = lshr i64 %37, 12
  %39 = trunc i64 %38 to i32
  %40 = sub i32 %35, %39
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #7
  ret i32 %40
}

declare i32 @vpx_sub_pixel_variance16xh_ssse3(i8*, i64, i32, i32, i8*, i64, i32, i32*, i8*, i8*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_sub_pixel_variance64x32_ssse3(i8*, i32, i32, i32, i8*, i32, i32* nocapture) local_unnamed_addr #4 {
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #7
  store i32 -1431655766, i32* %8, align 4
  %11 = sext i32 %1 to i64
  %12 = sext i32 %5 to i64
  %13 = call i32 @vpx_sub_pixel_variance16xh_ssse3(i8* %0, i64 %11, i32 %2, i32 %3, i8* %4, i64 %12, i32 32, i32* nonnull %8, i8* null, i8* null) #7
  %14 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %14) #7
  store i32 -1431655766, i32* %9, align 4
  %15 = getelementptr inbounds i8, i8* %0, i64 16
  %16 = getelementptr inbounds i8, i8* %4, i64 16
  %17 = call i32 @vpx_sub_pixel_variance16xh_ssse3(i8* %15, i64 %11, i32 %2, i32 %3, i8* %16, i64 %12, i32 32, i32* nonnull %9, i8* null, i8* null) #7
  %18 = add nsw i32 %17, %13
  %19 = load i32, i32* %9, align 4
  %20 = load i32, i32* %8, align 4
  %21 = add i32 %20, %19
  store i32 %21, i32* %8, align 4
  %22 = getelementptr inbounds i8, i8* %0, i64 32
  %23 = getelementptr inbounds i8, i8* %4, i64 32
  %24 = call i32 @vpx_sub_pixel_variance16xh_ssse3(i8* %22, i64 %11, i32 %2, i32 %3, i8* %23, i64 %12, i32 32, i32* nonnull %9, i8* null, i8* null) #7
  %25 = add nsw i32 %18, %24
  %26 = load i32, i32* %9, align 4
  %27 = load i32, i32* %8, align 4
  %28 = add i32 %27, %26
  store i32 %28, i32* %8, align 4
  %29 = getelementptr inbounds i8, i8* %0, i64 48
  %30 = getelementptr inbounds i8, i8* %4, i64 48
  %31 = call i32 @vpx_sub_pixel_variance16xh_ssse3(i8* %29, i64 %11, i32 %2, i32 %3, i8* %30, i64 %12, i32 32, i32* nonnull %9, i8* null, i8* null) #7
  %32 = add nsw i32 %25, %31
  %33 = load i32, i32* %9, align 4
  %34 = load i32, i32* %8, align 4
  %35 = add i32 %34, %33
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %14) #7
  store i32 %35, i32* %6, align 4
  %36 = sext i32 %32 to i64
  %37 = mul nsw i64 %36, %36
  %38 = lshr i64 %37, 11
  %39 = trunc i64 %38 to i32
  %40 = sub i32 %35, %39
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #7
  ret i32 %40
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_sub_pixel_variance32x64_ssse3(i8*, i32, i32, i32, i8*, i32, i32* nocapture) local_unnamed_addr #4 {
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #7
  store i32 -1431655766, i32* %8, align 4
  %11 = sext i32 %1 to i64
  %12 = sext i32 %5 to i64
  %13 = call i32 @vpx_sub_pixel_variance16xh_ssse3(i8* %0, i64 %11, i32 %2, i32 %3, i8* %4, i64 %12, i32 64, i32* nonnull %8, i8* null, i8* null) #7
  %14 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %14) #7
  store i32 -1431655766, i32* %9, align 4
  %15 = getelementptr inbounds i8, i8* %0, i64 16
  %16 = getelementptr inbounds i8, i8* %4, i64 16
  %17 = call i32 @vpx_sub_pixel_variance16xh_ssse3(i8* %15, i64 %11, i32 %2, i32 %3, i8* %16, i64 %12, i32 64, i32* nonnull %9, i8* null, i8* null) #7
  %18 = add nsw i32 %17, %13
  %19 = load i32, i32* %9, align 4
  %20 = load i32, i32* %8, align 4
  %21 = add i32 %20, %19
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %14) #7
  store i32 %21, i32* %6, align 4
  %22 = sext i32 %18 to i64
  %23 = mul nsw i64 %22, %22
  %24 = lshr i64 %23, 11
  %25 = trunc i64 %24 to i32
  %26 = sub i32 %21, %25
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #7
  ret i32 %26
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_sub_pixel_variance32x32_ssse3(i8*, i32, i32, i32, i8*, i32, i32* nocapture) local_unnamed_addr #4 {
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #7
  store i32 -1431655766, i32* %8, align 4
  %11 = sext i32 %1 to i64
  %12 = sext i32 %5 to i64
  %13 = call i32 @vpx_sub_pixel_variance16xh_ssse3(i8* %0, i64 %11, i32 %2, i32 %3, i8* %4, i64 %12, i32 32, i32* nonnull %8, i8* null, i8* null) #7
  %14 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %14) #7
  store i32 -1431655766, i32* %9, align 4
  %15 = getelementptr inbounds i8, i8* %0, i64 16
  %16 = getelementptr inbounds i8, i8* %4, i64 16
  %17 = call i32 @vpx_sub_pixel_variance16xh_ssse3(i8* %15, i64 %11, i32 %2, i32 %3, i8* %16, i64 %12, i32 32, i32* nonnull %9, i8* null, i8* null) #7
  %18 = add nsw i32 %17, %13
  %19 = load i32, i32* %9, align 4
  %20 = load i32, i32* %8, align 4
  %21 = add i32 %20, %19
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %14) #7
  store i32 %21, i32* %6, align 4
  %22 = sext i32 %18 to i64
  %23 = mul nsw i64 %22, %22
  %24 = lshr i64 %23, 10
  %25 = trunc i64 %24 to i32
  %26 = sub i32 %21, %25
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #7
  ret i32 %26
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_sub_pixel_variance32x16_ssse3(i8*, i32, i32, i32, i8*, i32, i32* nocapture) local_unnamed_addr #4 {
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #7
  store i32 -1431655766, i32* %8, align 4
  %11 = sext i32 %1 to i64
  %12 = sext i32 %5 to i64
  %13 = call i32 @vpx_sub_pixel_variance16xh_ssse3(i8* %0, i64 %11, i32 %2, i32 %3, i8* %4, i64 %12, i32 16, i32* nonnull %8, i8* null, i8* null) #7
  %14 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %14) #7
  store i32 -1431655766, i32* %9, align 4
  %15 = getelementptr inbounds i8, i8* %0, i64 16
  %16 = getelementptr inbounds i8, i8* %4, i64 16
  %17 = call i32 @vpx_sub_pixel_variance16xh_ssse3(i8* %15, i64 %11, i32 %2, i32 %3, i8* %16, i64 %12, i32 16, i32* nonnull %9, i8* null, i8* null) #7
  %18 = add nsw i32 %17, %13
  %19 = load i32, i32* %9, align 4
  %20 = load i32, i32* %8, align 4
  %21 = add i32 %20, %19
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %14) #7
  store i32 %21, i32* %6, align 4
  %22 = sext i32 %18 to i64
  %23 = mul nsw i64 %22, %22
  %24 = lshr i64 %23, 9
  %25 = trunc i64 %24 to i32
  %26 = sub i32 %21, %25
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #7
  ret i32 %26
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_sub_pixel_variance16x32_ssse3(i8*, i32, i32, i32, i8*, i32, i32* nocapture) local_unnamed_addr #4 {
  %8 = alloca i32, align 4
  %9 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #7
  store i32 -1431655766, i32* %8, align 4
  %10 = sext i32 %1 to i64
  %11 = sext i32 %5 to i64
  %12 = call i32 @vpx_sub_pixel_variance16xh_ssse3(i8* %0, i64 %10, i32 %2, i32 %3, i8* %4, i64 %11, i32 32, i32* nonnull %8, i8* null, i8* null) #7
  %13 = load i32, i32* %8, align 4
  store i32 %13, i32* %6, align 4
  %14 = sext i32 %12 to i64
  %15 = mul nsw i64 %14, %14
  %16 = lshr i64 %15, 9
  %17 = trunc i64 %16 to i32
  %18 = sub i32 %13, %17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #7
  ret i32 %18
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_sub_pixel_variance16x16_ssse3(i8*, i32, i32, i32, i8*, i32, i32* nocapture) local_unnamed_addr #4 {
  %8 = alloca i32, align 4
  %9 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #7
  store i32 -1431655766, i32* %8, align 4
  %10 = sext i32 %1 to i64
  %11 = sext i32 %5 to i64
  %12 = call i32 @vpx_sub_pixel_variance16xh_ssse3(i8* %0, i64 %10, i32 %2, i32 %3, i8* %4, i64 %11, i32 16, i32* nonnull %8, i8* null, i8* null) #7
  %13 = load i32, i32* %8, align 4
  store i32 %13, i32* %6, align 4
  %14 = mul i32 %12, %12
  %15 = lshr i32 %14, 8
  %16 = sub i32 %13, %15
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #7
  ret i32 %16
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_sub_pixel_variance16x8_ssse3(i8*, i32, i32, i32, i8*, i32, i32* nocapture) local_unnamed_addr #4 {
  %8 = alloca i32, align 4
  %9 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #7
  store i32 -1431655766, i32* %8, align 4
  %10 = sext i32 %1 to i64
  %11 = sext i32 %5 to i64
  %12 = call i32 @vpx_sub_pixel_variance16xh_ssse3(i8* %0, i64 %10, i32 %2, i32 %3, i8* %4, i64 %11, i32 8, i32* nonnull %8, i8* null, i8* null) #7
  %13 = load i32, i32* %8, align 4
  store i32 %13, i32* %6, align 4
  %14 = mul nsw i32 %12, %12
  %15 = lshr i32 %14, 7
  %16 = sub i32 %13, %15
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #7
  ret i32 %16
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_sub_pixel_variance8x16_ssse3(i8*, i32, i32, i32, i8*, i32, i32* nocapture) local_unnamed_addr #4 {
  %8 = alloca i32, align 4
  %9 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #7
  store i32 -1431655766, i32* %8, align 4
  %10 = sext i32 %1 to i64
  %11 = sext i32 %5 to i64
  %12 = call i32 @vpx_sub_pixel_variance8xh_ssse3(i8* %0, i64 %10, i32 %2, i32 %3, i8* %4, i64 %11, i32 16, i32* nonnull %8, i8* null, i8* null) #7
  %13 = load i32, i32* %8, align 4
  store i32 %13, i32* %6, align 4
  %14 = mul nsw i32 %12, %12
  %15 = lshr i32 %14, 7
  %16 = sub i32 %13, %15
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #7
  ret i32 %16
}

declare i32 @vpx_sub_pixel_variance8xh_ssse3(i8*, i64, i32, i32, i8*, i64, i32, i32*, i8*, i8*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_sub_pixel_variance8x8_ssse3(i8*, i32, i32, i32, i8*, i32, i32* nocapture) local_unnamed_addr #4 {
  %8 = alloca i32, align 4
  %9 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #7
  store i32 -1431655766, i32* %8, align 4
  %10 = sext i32 %1 to i64
  %11 = sext i32 %5 to i64
  %12 = call i32 @vpx_sub_pixel_variance8xh_ssse3(i8* %0, i64 %10, i32 %2, i32 %3, i8* %4, i64 %11, i32 8, i32* nonnull %8, i8* null, i8* null) #7
  %13 = load i32, i32* %8, align 4
  store i32 %13, i32* %6, align 4
  %14 = mul nsw i32 %12, %12
  %15 = lshr i32 %14, 6
  %16 = sub i32 %13, %15
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #7
  ret i32 %16
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_sub_pixel_variance8x4_ssse3(i8*, i32, i32, i32, i8*, i32, i32* nocapture) local_unnamed_addr #4 {
  %8 = alloca i32, align 4
  %9 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #7
  store i32 -1431655766, i32* %8, align 4
  %10 = sext i32 %1 to i64
  %11 = sext i32 %5 to i64
  %12 = call i32 @vpx_sub_pixel_variance8xh_ssse3(i8* %0, i64 %10, i32 %2, i32 %3, i8* %4, i64 %11, i32 4, i32* nonnull %8, i8* null, i8* null) #7
  %13 = load i32, i32* %8, align 4
  store i32 %13, i32* %6, align 4
  %14 = mul nsw i32 %12, %12
  %15 = lshr i32 %14, 5
  %16 = sub i32 %13, %15
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #7
  ret i32 %16
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_sub_pixel_variance4x8_ssse3(i8*, i32, i32, i32, i8*, i32, i32* nocapture) local_unnamed_addr #4 {
  %8 = alloca i32, align 4
  %9 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #7
  store i32 -1431655766, i32* %8, align 4
  %10 = sext i32 %1 to i64
  %11 = sext i32 %5 to i64
  %12 = call i32 @vpx_sub_pixel_variance4xh_ssse3(i8* %0, i64 %10, i32 %2, i32 %3, i8* %4, i64 %11, i32 8, i32* nonnull %8, i8* null, i8* null) #7
  %13 = load i32, i32* %8, align 4
  store i32 %13, i32* %6, align 4
  %14 = mul nsw i32 %12, %12
  %15 = lshr i32 %14, 5
  %16 = sub i32 %13, %15
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #7
  ret i32 %16
}

declare i32 @vpx_sub_pixel_variance4xh_ssse3(i8*, i64, i32, i32, i8*, i64, i32, i32*, i8*, i8*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_sub_pixel_variance4x4_ssse3(i8*, i32, i32, i32, i8*, i32, i32* nocapture) local_unnamed_addr #4 {
  %8 = alloca i32, align 4
  %9 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #7
  store i32 -1431655766, i32* %8, align 4
  %10 = sext i32 %1 to i64
  %11 = sext i32 %5 to i64
  %12 = call i32 @vpx_sub_pixel_variance4xh_ssse3(i8* %0, i64 %10, i32 %2, i32 %3, i8* %4, i64 %11, i32 4, i32* nonnull %8, i8* null, i8* null) #7
  %13 = load i32, i32* %8, align 4
  store i32 %13, i32* %6, align 4
  %14 = mul nsw i32 %12, %12
  %15 = lshr i32 %14, 4
  %16 = sub i32 %13, %15
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #7
  ret i32 %16
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_sub_pixel_avg_variance64x64_sse2(i8*, i32, i32, i32, i8*, i32, i32* nocapture, i8*) local_unnamed_addr #4 {
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #7
  store i32 -1431655766, i32* %9, align 4
  %12 = sext i32 %1 to i64
  %13 = sext i32 %5 to i64
  %14 = call i32 @vpx_sub_pixel_avg_variance16xh_sse2(i8* %0, i64 %12, i32 %2, i32 %3, i8* %4, i64 %13, i8* %7, i64 64, i32 64, i32* nonnull %9, i8* null, i8* null) #7
  %15 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %15) #7
  store i32 -1431655766, i32* %10, align 4
  %16 = getelementptr inbounds i8, i8* %0, i64 16
  %17 = getelementptr inbounds i8, i8* %4, i64 16
  %18 = getelementptr inbounds i8, i8* %7, i64 16
  %19 = call i32 @vpx_sub_pixel_avg_variance16xh_sse2(i8* %16, i64 %12, i32 %2, i32 %3, i8* %17, i64 %13, i8* %18, i64 64, i32 64, i32* nonnull %10, i8* null, i8* null) #7
  %20 = add nsw i32 %19, %14
  %21 = load i32, i32* %10, align 4
  %22 = load i32, i32* %9, align 4
  %23 = add i32 %22, %21
  store i32 %23, i32* %9, align 4
  %24 = getelementptr inbounds i8, i8* %0, i64 32
  %25 = getelementptr inbounds i8, i8* %4, i64 32
  %26 = getelementptr inbounds i8, i8* %7, i64 32
  %27 = call i32 @vpx_sub_pixel_avg_variance16xh_sse2(i8* %24, i64 %12, i32 %2, i32 %3, i8* %25, i64 %13, i8* %26, i64 64, i32 64, i32* nonnull %10, i8* null, i8* null) #7
  %28 = add nsw i32 %20, %27
  %29 = load i32, i32* %10, align 4
  %30 = load i32, i32* %9, align 4
  %31 = add i32 %30, %29
  store i32 %31, i32* %9, align 4
  %32 = getelementptr inbounds i8, i8* %0, i64 48
  %33 = getelementptr inbounds i8, i8* %4, i64 48
  %34 = getelementptr inbounds i8, i8* %7, i64 48
  %35 = call i32 @vpx_sub_pixel_avg_variance16xh_sse2(i8* %32, i64 %12, i32 %2, i32 %3, i8* %33, i64 %13, i8* %34, i64 64, i32 64, i32* nonnull %10, i8* null, i8* null) #7
  %36 = add nsw i32 %28, %35
  %37 = load i32, i32* %10, align 4
  %38 = load i32, i32* %9, align 4
  %39 = add i32 %38, %37
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %15) #7
  store i32 %39, i32* %6, align 4
  %40 = sext i32 %36 to i64
  %41 = mul nsw i64 %40, %40
  %42 = lshr i64 %41, 12
  %43 = trunc i64 %42 to i32
  %44 = sub i32 %39, %43
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #7
  ret i32 %44
}

declare i32 @vpx_sub_pixel_avg_variance16xh_sse2(i8*, i64, i32, i32, i8*, i64, i8*, i64, i32, i32*, i8*, i8*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_sub_pixel_avg_variance64x32_sse2(i8*, i32, i32, i32, i8*, i32, i32* nocapture, i8*) local_unnamed_addr #4 {
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #7
  store i32 -1431655766, i32* %9, align 4
  %12 = sext i32 %1 to i64
  %13 = sext i32 %5 to i64
  %14 = call i32 @vpx_sub_pixel_avg_variance16xh_sse2(i8* %0, i64 %12, i32 %2, i32 %3, i8* %4, i64 %13, i8* %7, i64 64, i32 32, i32* nonnull %9, i8* null, i8* null) #7
  %15 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %15) #7
  store i32 -1431655766, i32* %10, align 4
  %16 = getelementptr inbounds i8, i8* %0, i64 16
  %17 = getelementptr inbounds i8, i8* %4, i64 16
  %18 = getelementptr inbounds i8, i8* %7, i64 16
  %19 = call i32 @vpx_sub_pixel_avg_variance16xh_sse2(i8* %16, i64 %12, i32 %2, i32 %3, i8* %17, i64 %13, i8* %18, i64 64, i32 32, i32* nonnull %10, i8* null, i8* null) #7
  %20 = add nsw i32 %19, %14
  %21 = load i32, i32* %10, align 4
  %22 = load i32, i32* %9, align 4
  %23 = add i32 %22, %21
  store i32 %23, i32* %9, align 4
  %24 = getelementptr inbounds i8, i8* %0, i64 32
  %25 = getelementptr inbounds i8, i8* %4, i64 32
  %26 = getelementptr inbounds i8, i8* %7, i64 32
  %27 = call i32 @vpx_sub_pixel_avg_variance16xh_sse2(i8* %24, i64 %12, i32 %2, i32 %3, i8* %25, i64 %13, i8* %26, i64 64, i32 32, i32* nonnull %10, i8* null, i8* null) #7
  %28 = add nsw i32 %20, %27
  %29 = load i32, i32* %10, align 4
  %30 = load i32, i32* %9, align 4
  %31 = add i32 %30, %29
  store i32 %31, i32* %9, align 4
  %32 = getelementptr inbounds i8, i8* %0, i64 48
  %33 = getelementptr inbounds i8, i8* %4, i64 48
  %34 = getelementptr inbounds i8, i8* %7, i64 48
  %35 = call i32 @vpx_sub_pixel_avg_variance16xh_sse2(i8* %32, i64 %12, i32 %2, i32 %3, i8* %33, i64 %13, i8* %34, i64 64, i32 32, i32* nonnull %10, i8* null, i8* null) #7
  %36 = add nsw i32 %28, %35
  %37 = load i32, i32* %10, align 4
  %38 = load i32, i32* %9, align 4
  %39 = add i32 %38, %37
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %15) #7
  store i32 %39, i32* %6, align 4
  %40 = sext i32 %36 to i64
  %41 = mul nsw i64 %40, %40
  %42 = lshr i64 %41, 11
  %43 = trunc i64 %42 to i32
  %44 = sub i32 %39, %43
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #7
  ret i32 %44
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_sub_pixel_avg_variance32x64_sse2(i8*, i32, i32, i32, i8*, i32, i32* nocapture, i8*) local_unnamed_addr #4 {
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #7
  store i32 -1431655766, i32* %9, align 4
  %12 = sext i32 %1 to i64
  %13 = sext i32 %5 to i64
  %14 = call i32 @vpx_sub_pixel_avg_variance16xh_sse2(i8* %0, i64 %12, i32 %2, i32 %3, i8* %4, i64 %13, i8* %7, i64 32, i32 64, i32* nonnull %9, i8* null, i8* null) #7
  %15 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %15) #7
  store i32 -1431655766, i32* %10, align 4
  %16 = getelementptr inbounds i8, i8* %0, i64 16
  %17 = getelementptr inbounds i8, i8* %4, i64 16
  %18 = getelementptr inbounds i8, i8* %7, i64 16
  %19 = call i32 @vpx_sub_pixel_avg_variance16xh_sse2(i8* %16, i64 %12, i32 %2, i32 %3, i8* %17, i64 %13, i8* %18, i64 32, i32 64, i32* nonnull %10, i8* null, i8* null) #7
  %20 = add nsw i32 %19, %14
  %21 = load i32, i32* %10, align 4
  %22 = load i32, i32* %9, align 4
  %23 = add i32 %22, %21
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %15) #7
  store i32 %23, i32* %6, align 4
  %24 = sext i32 %20 to i64
  %25 = mul nsw i64 %24, %24
  %26 = lshr i64 %25, 11
  %27 = trunc i64 %26 to i32
  %28 = sub i32 %23, %27
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #7
  ret i32 %28
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_sub_pixel_avg_variance32x32_sse2(i8*, i32, i32, i32, i8*, i32, i32* nocapture, i8*) local_unnamed_addr #4 {
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #7
  store i32 -1431655766, i32* %9, align 4
  %12 = sext i32 %1 to i64
  %13 = sext i32 %5 to i64
  %14 = call i32 @vpx_sub_pixel_avg_variance16xh_sse2(i8* %0, i64 %12, i32 %2, i32 %3, i8* %4, i64 %13, i8* %7, i64 32, i32 32, i32* nonnull %9, i8* null, i8* null) #7
  %15 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %15) #7
  store i32 -1431655766, i32* %10, align 4
  %16 = getelementptr inbounds i8, i8* %0, i64 16
  %17 = getelementptr inbounds i8, i8* %4, i64 16
  %18 = getelementptr inbounds i8, i8* %7, i64 16
  %19 = call i32 @vpx_sub_pixel_avg_variance16xh_sse2(i8* %16, i64 %12, i32 %2, i32 %3, i8* %17, i64 %13, i8* %18, i64 32, i32 32, i32* nonnull %10, i8* null, i8* null) #7
  %20 = add nsw i32 %19, %14
  %21 = load i32, i32* %10, align 4
  %22 = load i32, i32* %9, align 4
  %23 = add i32 %22, %21
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %15) #7
  store i32 %23, i32* %6, align 4
  %24 = sext i32 %20 to i64
  %25 = mul nsw i64 %24, %24
  %26 = lshr i64 %25, 10
  %27 = trunc i64 %26 to i32
  %28 = sub i32 %23, %27
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #7
  ret i32 %28
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_sub_pixel_avg_variance32x16_sse2(i8*, i32, i32, i32, i8*, i32, i32* nocapture, i8*) local_unnamed_addr #4 {
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #7
  store i32 -1431655766, i32* %9, align 4
  %12 = sext i32 %1 to i64
  %13 = sext i32 %5 to i64
  %14 = call i32 @vpx_sub_pixel_avg_variance16xh_sse2(i8* %0, i64 %12, i32 %2, i32 %3, i8* %4, i64 %13, i8* %7, i64 32, i32 16, i32* nonnull %9, i8* null, i8* null) #7
  %15 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %15) #7
  store i32 -1431655766, i32* %10, align 4
  %16 = getelementptr inbounds i8, i8* %0, i64 16
  %17 = getelementptr inbounds i8, i8* %4, i64 16
  %18 = getelementptr inbounds i8, i8* %7, i64 16
  %19 = call i32 @vpx_sub_pixel_avg_variance16xh_sse2(i8* %16, i64 %12, i32 %2, i32 %3, i8* %17, i64 %13, i8* %18, i64 32, i32 16, i32* nonnull %10, i8* null, i8* null) #7
  %20 = add nsw i32 %19, %14
  %21 = load i32, i32* %10, align 4
  %22 = load i32, i32* %9, align 4
  %23 = add i32 %22, %21
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %15) #7
  store i32 %23, i32* %6, align 4
  %24 = sext i32 %20 to i64
  %25 = mul nsw i64 %24, %24
  %26 = lshr i64 %25, 9
  %27 = trunc i64 %26 to i32
  %28 = sub i32 %23, %27
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #7
  ret i32 %28
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_sub_pixel_avg_variance16x32_sse2(i8*, i32, i32, i32, i8*, i32, i32* nocapture, i8*) local_unnamed_addr #4 {
  %9 = alloca i32, align 4
  %10 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #7
  store i32 -1431655766, i32* %9, align 4
  %11 = sext i32 %1 to i64
  %12 = sext i32 %5 to i64
  %13 = call i32 @vpx_sub_pixel_avg_variance16xh_sse2(i8* %0, i64 %11, i32 %2, i32 %3, i8* %4, i64 %12, i8* %7, i64 16, i32 32, i32* nonnull %9, i8* null, i8* null) #7
  %14 = load i32, i32* %9, align 4
  store i32 %14, i32* %6, align 4
  %15 = sext i32 %13 to i64
  %16 = mul nsw i64 %15, %15
  %17 = lshr i64 %16, 9
  %18 = trunc i64 %17 to i32
  %19 = sub i32 %14, %18
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #7
  ret i32 %19
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_sub_pixel_avg_variance16x16_sse2(i8*, i32, i32, i32, i8*, i32, i32* nocapture, i8*) local_unnamed_addr #4 {
  %9 = alloca i32, align 4
  %10 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #7
  store i32 -1431655766, i32* %9, align 4
  %11 = sext i32 %1 to i64
  %12 = sext i32 %5 to i64
  %13 = call i32 @vpx_sub_pixel_avg_variance16xh_sse2(i8* %0, i64 %11, i32 %2, i32 %3, i8* %4, i64 %12, i8* %7, i64 16, i32 16, i32* nonnull %9, i8* null, i8* null) #7
  %14 = load i32, i32* %9, align 4
  store i32 %14, i32* %6, align 4
  %15 = mul i32 %13, %13
  %16 = lshr i32 %15, 8
  %17 = sub i32 %14, %16
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #7
  ret i32 %17
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_sub_pixel_avg_variance16x8_sse2(i8*, i32, i32, i32, i8*, i32, i32* nocapture, i8*) local_unnamed_addr #4 {
  %9 = alloca i32, align 4
  %10 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #7
  store i32 -1431655766, i32* %9, align 4
  %11 = sext i32 %1 to i64
  %12 = sext i32 %5 to i64
  %13 = call i32 @vpx_sub_pixel_avg_variance16xh_sse2(i8* %0, i64 %11, i32 %2, i32 %3, i8* %4, i64 %12, i8* %7, i64 16, i32 8, i32* nonnull %9, i8* null, i8* null) #7
  %14 = load i32, i32* %9, align 4
  store i32 %14, i32* %6, align 4
  %15 = mul nsw i32 %13, %13
  %16 = lshr i32 %15, 7
  %17 = sub i32 %14, %16
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #7
  ret i32 %17
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_sub_pixel_avg_variance8x16_sse2(i8*, i32, i32, i32, i8*, i32, i32* nocapture, i8*) local_unnamed_addr #4 {
  %9 = alloca i32, align 4
  %10 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #7
  store i32 -1431655766, i32* %9, align 4
  %11 = sext i32 %1 to i64
  %12 = sext i32 %5 to i64
  %13 = call i32 @vpx_sub_pixel_avg_variance8xh_sse2(i8* %0, i64 %11, i32 %2, i32 %3, i8* %4, i64 %12, i8* %7, i64 8, i32 16, i32* nonnull %9, i8* null, i8* null) #7
  %14 = load i32, i32* %9, align 4
  store i32 %14, i32* %6, align 4
  %15 = mul nsw i32 %13, %13
  %16 = lshr i32 %15, 7
  %17 = sub i32 %14, %16
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #7
  ret i32 %17
}

declare i32 @vpx_sub_pixel_avg_variance8xh_sse2(i8*, i64, i32, i32, i8*, i64, i8*, i64, i32, i32*, i8*, i8*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_sub_pixel_avg_variance8x8_sse2(i8*, i32, i32, i32, i8*, i32, i32* nocapture, i8*) local_unnamed_addr #4 {
  %9 = alloca i32, align 4
  %10 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #7
  store i32 -1431655766, i32* %9, align 4
  %11 = sext i32 %1 to i64
  %12 = sext i32 %5 to i64
  %13 = call i32 @vpx_sub_pixel_avg_variance8xh_sse2(i8* %0, i64 %11, i32 %2, i32 %3, i8* %4, i64 %12, i8* %7, i64 8, i32 8, i32* nonnull %9, i8* null, i8* null) #7
  %14 = load i32, i32* %9, align 4
  store i32 %14, i32* %6, align 4
  %15 = mul nsw i32 %13, %13
  %16 = lshr i32 %15, 6
  %17 = sub i32 %14, %16
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #7
  ret i32 %17
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_sub_pixel_avg_variance8x4_sse2(i8*, i32, i32, i32, i8*, i32, i32* nocapture, i8*) local_unnamed_addr #4 {
  %9 = alloca i32, align 4
  %10 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #7
  store i32 -1431655766, i32* %9, align 4
  %11 = sext i32 %1 to i64
  %12 = sext i32 %5 to i64
  %13 = call i32 @vpx_sub_pixel_avg_variance8xh_sse2(i8* %0, i64 %11, i32 %2, i32 %3, i8* %4, i64 %12, i8* %7, i64 8, i32 4, i32* nonnull %9, i8* null, i8* null) #7
  %14 = load i32, i32* %9, align 4
  store i32 %14, i32* %6, align 4
  %15 = mul nsw i32 %13, %13
  %16 = lshr i32 %15, 5
  %17 = sub i32 %14, %16
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #7
  ret i32 %17
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_sub_pixel_avg_variance4x8_sse2(i8*, i32, i32, i32, i8*, i32, i32* nocapture, i8*) local_unnamed_addr #4 {
  %9 = alloca i32, align 4
  %10 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #7
  store i32 -1431655766, i32* %9, align 4
  %11 = sext i32 %1 to i64
  %12 = sext i32 %5 to i64
  %13 = call i32 @vpx_sub_pixel_avg_variance4xh_sse2(i8* %0, i64 %11, i32 %2, i32 %3, i8* %4, i64 %12, i8* %7, i64 4, i32 8, i32* nonnull %9, i8* null, i8* null) #7
  %14 = load i32, i32* %9, align 4
  store i32 %14, i32* %6, align 4
  %15 = mul nsw i32 %13, %13
  %16 = lshr i32 %15, 5
  %17 = sub i32 %14, %16
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #7
  ret i32 %17
}

declare i32 @vpx_sub_pixel_avg_variance4xh_sse2(i8*, i64, i32, i32, i8*, i64, i8*, i64, i32, i32*, i8*, i8*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_sub_pixel_avg_variance4x4_sse2(i8*, i32, i32, i32, i8*, i32, i32* nocapture, i8*) local_unnamed_addr #4 {
  %9 = alloca i32, align 4
  %10 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #7
  store i32 -1431655766, i32* %9, align 4
  %11 = sext i32 %1 to i64
  %12 = sext i32 %5 to i64
  %13 = call i32 @vpx_sub_pixel_avg_variance4xh_sse2(i8* %0, i64 %11, i32 %2, i32 %3, i8* %4, i64 %12, i8* %7, i64 4, i32 4, i32* nonnull %9, i8* null, i8* null) #7
  %14 = load i32, i32* %9, align 4
  store i32 %14, i32* %6, align 4
  %15 = mul nsw i32 %13, %13
  %16 = lshr i32 %15, 4
  %17 = sub i32 %14, %16
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #7
  ret i32 %17
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_sub_pixel_avg_variance64x64_ssse3(i8*, i32, i32, i32, i8*, i32, i32* nocapture, i8*) local_unnamed_addr #4 {
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #7
  store i32 -1431655766, i32* %9, align 4
  %12 = sext i32 %1 to i64
  %13 = sext i32 %5 to i64
  %14 = call i32 @vpx_sub_pixel_avg_variance16xh_ssse3(i8* %0, i64 %12, i32 %2, i32 %3, i8* %4, i64 %13, i8* %7, i64 64, i32 64, i32* nonnull %9, i8* null, i8* null) #7
  %15 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %15) #7
  store i32 -1431655766, i32* %10, align 4
  %16 = getelementptr inbounds i8, i8* %0, i64 16
  %17 = getelementptr inbounds i8, i8* %4, i64 16
  %18 = getelementptr inbounds i8, i8* %7, i64 16
  %19 = call i32 @vpx_sub_pixel_avg_variance16xh_ssse3(i8* %16, i64 %12, i32 %2, i32 %3, i8* %17, i64 %13, i8* %18, i64 64, i32 64, i32* nonnull %10, i8* null, i8* null) #7
  %20 = add nsw i32 %19, %14
  %21 = load i32, i32* %10, align 4
  %22 = load i32, i32* %9, align 4
  %23 = add i32 %22, %21
  store i32 %23, i32* %9, align 4
  %24 = getelementptr inbounds i8, i8* %0, i64 32
  %25 = getelementptr inbounds i8, i8* %4, i64 32
  %26 = getelementptr inbounds i8, i8* %7, i64 32
  %27 = call i32 @vpx_sub_pixel_avg_variance16xh_ssse3(i8* %24, i64 %12, i32 %2, i32 %3, i8* %25, i64 %13, i8* %26, i64 64, i32 64, i32* nonnull %10, i8* null, i8* null) #7
  %28 = add nsw i32 %20, %27
  %29 = load i32, i32* %10, align 4
  %30 = load i32, i32* %9, align 4
  %31 = add i32 %30, %29
  store i32 %31, i32* %9, align 4
  %32 = getelementptr inbounds i8, i8* %0, i64 48
  %33 = getelementptr inbounds i8, i8* %4, i64 48
  %34 = getelementptr inbounds i8, i8* %7, i64 48
  %35 = call i32 @vpx_sub_pixel_avg_variance16xh_ssse3(i8* %32, i64 %12, i32 %2, i32 %3, i8* %33, i64 %13, i8* %34, i64 64, i32 64, i32* nonnull %10, i8* null, i8* null) #7
  %36 = add nsw i32 %28, %35
  %37 = load i32, i32* %10, align 4
  %38 = load i32, i32* %9, align 4
  %39 = add i32 %38, %37
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %15) #7
  store i32 %39, i32* %6, align 4
  %40 = sext i32 %36 to i64
  %41 = mul nsw i64 %40, %40
  %42 = lshr i64 %41, 12
  %43 = trunc i64 %42 to i32
  %44 = sub i32 %39, %43
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #7
  ret i32 %44
}

declare i32 @vpx_sub_pixel_avg_variance16xh_ssse3(i8*, i64, i32, i32, i8*, i64, i8*, i64, i32, i32*, i8*, i8*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_sub_pixel_avg_variance64x32_ssse3(i8*, i32, i32, i32, i8*, i32, i32* nocapture, i8*) local_unnamed_addr #4 {
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #7
  store i32 -1431655766, i32* %9, align 4
  %12 = sext i32 %1 to i64
  %13 = sext i32 %5 to i64
  %14 = call i32 @vpx_sub_pixel_avg_variance16xh_ssse3(i8* %0, i64 %12, i32 %2, i32 %3, i8* %4, i64 %13, i8* %7, i64 64, i32 32, i32* nonnull %9, i8* null, i8* null) #7
  %15 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %15) #7
  store i32 -1431655766, i32* %10, align 4
  %16 = getelementptr inbounds i8, i8* %0, i64 16
  %17 = getelementptr inbounds i8, i8* %4, i64 16
  %18 = getelementptr inbounds i8, i8* %7, i64 16
  %19 = call i32 @vpx_sub_pixel_avg_variance16xh_ssse3(i8* %16, i64 %12, i32 %2, i32 %3, i8* %17, i64 %13, i8* %18, i64 64, i32 32, i32* nonnull %10, i8* null, i8* null) #7
  %20 = add nsw i32 %19, %14
  %21 = load i32, i32* %10, align 4
  %22 = load i32, i32* %9, align 4
  %23 = add i32 %22, %21
  store i32 %23, i32* %9, align 4
  %24 = getelementptr inbounds i8, i8* %0, i64 32
  %25 = getelementptr inbounds i8, i8* %4, i64 32
  %26 = getelementptr inbounds i8, i8* %7, i64 32
  %27 = call i32 @vpx_sub_pixel_avg_variance16xh_ssse3(i8* %24, i64 %12, i32 %2, i32 %3, i8* %25, i64 %13, i8* %26, i64 64, i32 32, i32* nonnull %10, i8* null, i8* null) #7
  %28 = add nsw i32 %20, %27
  %29 = load i32, i32* %10, align 4
  %30 = load i32, i32* %9, align 4
  %31 = add i32 %30, %29
  store i32 %31, i32* %9, align 4
  %32 = getelementptr inbounds i8, i8* %0, i64 48
  %33 = getelementptr inbounds i8, i8* %4, i64 48
  %34 = getelementptr inbounds i8, i8* %7, i64 48
  %35 = call i32 @vpx_sub_pixel_avg_variance16xh_ssse3(i8* %32, i64 %12, i32 %2, i32 %3, i8* %33, i64 %13, i8* %34, i64 64, i32 32, i32* nonnull %10, i8* null, i8* null) #7
  %36 = add nsw i32 %28, %35
  %37 = load i32, i32* %10, align 4
  %38 = load i32, i32* %9, align 4
  %39 = add i32 %38, %37
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %15) #7
  store i32 %39, i32* %6, align 4
  %40 = sext i32 %36 to i64
  %41 = mul nsw i64 %40, %40
  %42 = lshr i64 %41, 11
  %43 = trunc i64 %42 to i32
  %44 = sub i32 %39, %43
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #7
  ret i32 %44
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_sub_pixel_avg_variance32x64_ssse3(i8*, i32, i32, i32, i8*, i32, i32* nocapture, i8*) local_unnamed_addr #4 {
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #7
  store i32 -1431655766, i32* %9, align 4
  %12 = sext i32 %1 to i64
  %13 = sext i32 %5 to i64
  %14 = call i32 @vpx_sub_pixel_avg_variance16xh_ssse3(i8* %0, i64 %12, i32 %2, i32 %3, i8* %4, i64 %13, i8* %7, i64 32, i32 64, i32* nonnull %9, i8* null, i8* null) #7
  %15 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %15) #7
  store i32 -1431655766, i32* %10, align 4
  %16 = getelementptr inbounds i8, i8* %0, i64 16
  %17 = getelementptr inbounds i8, i8* %4, i64 16
  %18 = getelementptr inbounds i8, i8* %7, i64 16
  %19 = call i32 @vpx_sub_pixel_avg_variance16xh_ssse3(i8* %16, i64 %12, i32 %2, i32 %3, i8* %17, i64 %13, i8* %18, i64 32, i32 64, i32* nonnull %10, i8* null, i8* null) #7
  %20 = add nsw i32 %19, %14
  %21 = load i32, i32* %10, align 4
  %22 = load i32, i32* %9, align 4
  %23 = add i32 %22, %21
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %15) #7
  store i32 %23, i32* %6, align 4
  %24 = sext i32 %20 to i64
  %25 = mul nsw i64 %24, %24
  %26 = lshr i64 %25, 11
  %27 = trunc i64 %26 to i32
  %28 = sub i32 %23, %27
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #7
  ret i32 %28
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_sub_pixel_avg_variance32x32_ssse3(i8*, i32, i32, i32, i8*, i32, i32* nocapture, i8*) local_unnamed_addr #4 {
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #7
  store i32 -1431655766, i32* %9, align 4
  %12 = sext i32 %1 to i64
  %13 = sext i32 %5 to i64
  %14 = call i32 @vpx_sub_pixel_avg_variance16xh_ssse3(i8* %0, i64 %12, i32 %2, i32 %3, i8* %4, i64 %13, i8* %7, i64 32, i32 32, i32* nonnull %9, i8* null, i8* null) #7
  %15 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %15) #7
  store i32 -1431655766, i32* %10, align 4
  %16 = getelementptr inbounds i8, i8* %0, i64 16
  %17 = getelementptr inbounds i8, i8* %4, i64 16
  %18 = getelementptr inbounds i8, i8* %7, i64 16
  %19 = call i32 @vpx_sub_pixel_avg_variance16xh_ssse3(i8* %16, i64 %12, i32 %2, i32 %3, i8* %17, i64 %13, i8* %18, i64 32, i32 32, i32* nonnull %10, i8* null, i8* null) #7
  %20 = add nsw i32 %19, %14
  %21 = load i32, i32* %10, align 4
  %22 = load i32, i32* %9, align 4
  %23 = add i32 %22, %21
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %15) #7
  store i32 %23, i32* %6, align 4
  %24 = sext i32 %20 to i64
  %25 = mul nsw i64 %24, %24
  %26 = lshr i64 %25, 10
  %27 = trunc i64 %26 to i32
  %28 = sub i32 %23, %27
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #7
  ret i32 %28
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_sub_pixel_avg_variance32x16_ssse3(i8*, i32, i32, i32, i8*, i32, i32* nocapture, i8*) local_unnamed_addr #4 {
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #7
  store i32 -1431655766, i32* %9, align 4
  %12 = sext i32 %1 to i64
  %13 = sext i32 %5 to i64
  %14 = call i32 @vpx_sub_pixel_avg_variance16xh_ssse3(i8* %0, i64 %12, i32 %2, i32 %3, i8* %4, i64 %13, i8* %7, i64 32, i32 16, i32* nonnull %9, i8* null, i8* null) #7
  %15 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %15) #7
  store i32 -1431655766, i32* %10, align 4
  %16 = getelementptr inbounds i8, i8* %0, i64 16
  %17 = getelementptr inbounds i8, i8* %4, i64 16
  %18 = getelementptr inbounds i8, i8* %7, i64 16
  %19 = call i32 @vpx_sub_pixel_avg_variance16xh_ssse3(i8* %16, i64 %12, i32 %2, i32 %3, i8* %17, i64 %13, i8* %18, i64 32, i32 16, i32* nonnull %10, i8* null, i8* null) #7
  %20 = add nsw i32 %19, %14
  %21 = load i32, i32* %10, align 4
  %22 = load i32, i32* %9, align 4
  %23 = add i32 %22, %21
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %15) #7
  store i32 %23, i32* %6, align 4
  %24 = sext i32 %20 to i64
  %25 = mul nsw i64 %24, %24
  %26 = lshr i64 %25, 9
  %27 = trunc i64 %26 to i32
  %28 = sub i32 %23, %27
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #7
  ret i32 %28
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_sub_pixel_avg_variance16x32_ssse3(i8*, i32, i32, i32, i8*, i32, i32* nocapture, i8*) local_unnamed_addr #4 {
  %9 = alloca i32, align 4
  %10 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #7
  store i32 -1431655766, i32* %9, align 4
  %11 = sext i32 %1 to i64
  %12 = sext i32 %5 to i64
  %13 = call i32 @vpx_sub_pixel_avg_variance16xh_ssse3(i8* %0, i64 %11, i32 %2, i32 %3, i8* %4, i64 %12, i8* %7, i64 16, i32 32, i32* nonnull %9, i8* null, i8* null) #7
  %14 = load i32, i32* %9, align 4
  store i32 %14, i32* %6, align 4
  %15 = sext i32 %13 to i64
  %16 = mul nsw i64 %15, %15
  %17 = lshr i64 %16, 9
  %18 = trunc i64 %17 to i32
  %19 = sub i32 %14, %18
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #7
  ret i32 %19
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_sub_pixel_avg_variance16x16_ssse3(i8*, i32, i32, i32, i8*, i32, i32* nocapture, i8*) local_unnamed_addr #4 {
  %9 = alloca i32, align 4
  %10 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #7
  store i32 -1431655766, i32* %9, align 4
  %11 = sext i32 %1 to i64
  %12 = sext i32 %5 to i64
  %13 = call i32 @vpx_sub_pixel_avg_variance16xh_ssse3(i8* %0, i64 %11, i32 %2, i32 %3, i8* %4, i64 %12, i8* %7, i64 16, i32 16, i32* nonnull %9, i8* null, i8* null) #7
  %14 = load i32, i32* %9, align 4
  store i32 %14, i32* %6, align 4
  %15 = mul i32 %13, %13
  %16 = lshr i32 %15, 8
  %17 = sub i32 %14, %16
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #7
  ret i32 %17
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_sub_pixel_avg_variance16x8_ssse3(i8*, i32, i32, i32, i8*, i32, i32* nocapture, i8*) local_unnamed_addr #4 {
  %9 = alloca i32, align 4
  %10 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #7
  store i32 -1431655766, i32* %9, align 4
  %11 = sext i32 %1 to i64
  %12 = sext i32 %5 to i64
  %13 = call i32 @vpx_sub_pixel_avg_variance16xh_ssse3(i8* %0, i64 %11, i32 %2, i32 %3, i8* %4, i64 %12, i8* %7, i64 16, i32 8, i32* nonnull %9, i8* null, i8* null) #7
  %14 = load i32, i32* %9, align 4
  store i32 %14, i32* %6, align 4
  %15 = mul nsw i32 %13, %13
  %16 = lshr i32 %15, 7
  %17 = sub i32 %14, %16
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #7
  ret i32 %17
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_sub_pixel_avg_variance8x16_ssse3(i8*, i32, i32, i32, i8*, i32, i32* nocapture, i8*) local_unnamed_addr #4 {
  %9 = alloca i32, align 4
  %10 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #7
  store i32 -1431655766, i32* %9, align 4
  %11 = sext i32 %1 to i64
  %12 = sext i32 %5 to i64
  %13 = call i32 @vpx_sub_pixel_avg_variance8xh_ssse3(i8* %0, i64 %11, i32 %2, i32 %3, i8* %4, i64 %12, i8* %7, i64 8, i32 16, i32* nonnull %9, i8* null, i8* null) #7
  %14 = load i32, i32* %9, align 4
  store i32 %14, i32* %6, align 4
  %15 = mul nsw i32 %13, %13
  %16 = lshr i32 %15, 7
  %17 = sub i32 %14, %16
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #7
  ret i32 %17
}

declare i32 @vpx_sub_pixel_avg_variance8xh_ssse3(i8*, i64, i32, i32, i8*, i64, i8*, i64, i32, i32*, i8*, i8*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_sub_pixel_avg_variance8x8_ssse3(i8*, i32, i32, i32, i8*, i32, i32* nocapture, i8*) local_unnamed_addr #4 {
  %9 = alloca i32, align 4
  %10 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #7
  store i32 -1431655766, i32* %9, align 4
  %11 = sext i32 %1 to i64
  %12 = sext i32 %5 to i64
  %13 = call i32 @vpx_sub_pixel_avg_variance8xh_ssse3(i8* %0, i64 %11, i32 %2, i32 %3, i8* %4, i64 %12, i8* %7, i64 8, i32 8, i32* nonnull %9, i8* null, i8* null) #7
  %14 = load i32, i32* %9, align 4
  store i32 %14, i32* %6, align 4
  %15 = mul nsw i32 %13, %13
  %16 = lshr i32 %15, 6
  %17 = sub i32 %14, %16
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #7
  ret i32 %17
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_sub_pixel_avg_variance8x4_ssse3(i8*, i32, i32, i32, i8*, i32, i32* nocapture, i8*) local_unnamed_addr #4 {
  %9 = alloca i32, align 4
  %10 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #7
  store i32 -1431655766, i32* %9, align 4
  %11 = sext i32 %1 to i64
  %12 = sext i32 %5 to i64
  %13 = call i32 @vpx_sub_pixel_avg_variance8xh_ssse3(i8* %0, i64 %11, i32 %2, i32 %3, i8* %4, i64 %12, i8* %7, i64 8, i32 4, i32* nonnull %9, i8* null, i8* null) #7
  %14 = load i32, i32* %9, align 4
  store i32 %14, i32* %6, align 4
  %15 = mul nsw i32 %13, %13
  %16 = lshr i32 %15, 5
  %17 = sub i32 %14, %16
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #7
  ret i32 %17
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_sub_pixel_avg_variance4x8_ssse3(i8*, i32, i32, i32, i8*, i32, i32* nocapture, i8*) local_unnamed_addr #4 {
  %9 = alloca i32, align 4
  %10 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #7
  store i32 -1431655766, i32* %9, align 4
  %11 = sext i32 %1 to i64
  %12 = sext i32 %5 to i64
  %13 = call i32 @vpx_sub_pixel_avg_variance4xh_ssse3(i8* %0, i64 %11, i32 %2, i32 %3, i8* %4, i64 %12, i8* %7, i64 4, i32 8, i32* nonnull %9, i8* null, i8* null) #7
  %14 = load i32, i32* %9, align 4
  store i32 %14, i32* %6, align 4
  %15 = mul nsw i32 %13, %13
  %16 = lshr i32 %15, 5
  %17 = sub i32 %14, %16
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #7
  ret i32 %17
}

declare i32 @vpx_sub_pixel_avg_variance4xh_ssse3(i8*, i64, i32, i32, i8*, i64, i8*, i64, i32, i32*, i8*, i8*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_sub_pixel_avg_variance4x4_ssse3(i8*, i32, i32, i32, i8*, i32, i32* nocapture, i8*) local_unnamed_addr #4 {
  %9 = alloca i32, align 4
  %10 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #7
  store i32 -1431655766, i32* %9, align 4
  %11 = sext i32 %1 to i64
  %12 = sext i32 %5 to i64
  %13 = call i32 @vpx_sub_pixel_avg_variance4xh_ssse3(i8* %0, i64 %11, i32 %2, i32 %3, i8* %4, i64 %12, i8* %7, i64 4, i32 4, i32* nonnull %9, i8* null, i8* null) #7
  %14 = load i32, i32* %9, align 4
  store i32 %14, i32* %6, align 4
  %15 = mul nsw i32 %13, %13
  %16 = lshr i32 %15, 4
  %17 = sub i32 %14, %16
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #7
  ret i32 %17
}

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16>, <8 x i16>) #6

attributes #0 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
