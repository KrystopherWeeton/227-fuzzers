; ModuleID = '../../content/browser/renderer_host/display_util.cc'
source_filename = "../../content/browser/renderer_host/display_util.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }
%"class.gfx::Point" = type { i32, i32 }
%union.anon.4 = type { i32 }
%"class.gfx::Size" = type { i32, i32 }
%"class.gfx::ColorSpace" = type { i8, i8, i8, i8, [9 x float], [7 x float] }
%union.anon = type { %"struct.gfx::HDRStaticMetadata" }
%"struct.gfx::HDRStaticMetadata" = type { double, double, double }
%"struct.blink::ScreenInfo" = type { float, %"class.gfx::DisplayColorSpaces", i32, i32, i8, i32, %"class.gfx::Rect", %"class.gfx::Rect", i32, i16, i8, i8, i8, i64 }
%"class.gfx::DisplayColorSpaces" = type { [6 x %"class.gfx::ColorSpace"], [6 x i32], float, %"class.absl::optional" }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%"class.display::Display" = type { i64, %"class.gfx::Rect", %"class.gfx::Size", %"class.gfx::Rect", float, i32, %"class.absl::optional.0", i32, i32, %"class.gfx::Size", %"class.gfx::DisplayColorSpaces", i32, i32, i8, i32 }
%"class.absl::optional.0" = type { %"class.absl::optional_internal::optional_data.1" }
%"class.absl::optional_internal::optional_data.1" = type { %"class.absl::optional_internal::optional_data_base.2" }
%"class.absl::optional_internal::optional_data_base.2" = type { %"class.absl::optional_internal::optional_data_dtor_base.3" }
%"class.absl::optional_internal::optional_data_dtor_base.3" = type { i8, %union.anon.4 }
%"class.display::Screen" = type { i32 (...)**, i64, i64 }
%"class.aura::Window" = type opaque

@__const._ZN7content11DisplayUtil23GetNativeViewScreenInfoEPN5blink10ScreenInfoEPN4aura6WindowE.display = private unnamed_addr constant { i64, %"class.gfx::Rect", %"class.gfx::Size", %"class.gfx::Rect", float, i32, { { { { i8, [3 x i8], %union.anon.4 } } } }, i32, i32, %"class.gfx::Size", { [6 x %"class.gfx::ColorSpace"], [6 x i32], float, [4 x i8], { { { { i8, [7 x i8], %union.anon } } } } }, i32, i32, i8, [3 x i8], i32 } { i64 -6148914691236517206, %"class.gfx::Rect" { %"class.gfx::Point" { i32 -1431655766, i32 -1431655766 }, %"class.gfx::Size" { i32 -1431655766, i32 -1431655766 } }, %"class.gfx::Size" { i32 -1431655766, i32 -1431655766 }, %"class.gfx::Rect" { %"class.gfx::Point" { i32 -1431655766, i32 -1431655766 }, %"class.gfx::Size" { i32 -1431655766, i32 -1431655766 } }, float 0xFFFFFFFFE0000000, i32 -1431655766, { { { { i8, [3 x i8], %union.anon.4 } } } } { { { { i8, [3 x i8], %union.anon.4 } } } { { { i8, [3 x i8], %union.anon.4 } } { { i8, [3 x i8], %union.anon.4 } { i8 -86, [3 x i8] c"\AA\AA\AA", %union.anon.4 { i32 -1431655766 } } } } }, i32 -1431655766, i32 -1431655766, %"class.gfx::Size" { i32 -1431655766, i32 -1431655766 }, { [6 x %"class.gfx::ColorSpace"], [6 x i32], float, [4 x i8], { { { { i8, [7 x i8], %union.anon } } } } } { [6 x %"class.gfx::ColorSpace"] [%"class.gfx::ColorSpace" { i8 -86, i8 -86, i8 -86, i8 -86, [9 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [7 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000] }, %"class.gfx::ColorSpace" { i8 -86, i8 -86, i8 -86, i8 -86, [9 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [7 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000] }, %"class.gfx::ColorSpace" { i8 -86, i8 -86, i8 -86, i8 -86, [9 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [7 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000] }, %"class.gfx::ColorSpace" { i8 -86, i8 -86, i8 -86, i8 -86, [9 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [7 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000] }, %"class.gfx::ColorSpace" { i8 -86, i8 -86, i8 -86, i8 -86, [9 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [7 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000] }, %"class.gfx::ColorSpace" { i8 -86, i8 -86, i8 -86, i8 -86, [9 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [7 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000] }], [6 x i32] [i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766], float 0xFFFFFFFFE0000000, [4 x i8] c"\AA\AA\AA\AA", { { { { i8, [7 x i8], %union.anon } } } } { { { { i8, [7 x i8], %union.anon } } } { { { i8, [7 x i8], %union.anon } } { { i8, [7 x i8], %union.anon } { i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA", %union.anon { %"struct.gfx::HDRStaticMetadata" { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF } } } } } } }, i32 -1431655766, i32 -1431655766, i8 -86, [3 x i8] c"\AA\AA\AA", i32 -1431655766 }, align 8
@_ZZN7content11DisplayUtil28GetOrientationTypeForDesktopERKN7display7DisplayEE23primary_landscape_angle = internal unnamed_addr global i32 -1, align 4
@_ZZN7content11DisplayUtil28GetOrientationTypeForDesktopERKN7display7DisplayEE22primary_portrait_angle = internal unnamed_addr global i32 -1, align 4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7content11DisplayUtil19DisplayToScreenInfoEPN5blink10ScreenInfoERKN7display7DisplayE(%"struct.blink::ScreenInfo"*, %"class.display::Display"* dereferenceable(568)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.display::Display", align 8
  %4 = getelementptr inbounds %"class.display::Display", %"class.display::Display"* %1, i64 0, i32 1
  %5 = getelementptr inbounds %"struct.blink::ScreenInfo", %"struct.blink::ScreenInfo"* %0, i64 0, i32 6
  %6 = bitcast %"class.gfx::Rect"* %5 to i8*
  %7 = bitcast %"class.gfx::Rect"* %4 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* align 4 %7, i64 16, i1 false)
  %8 = getelementptr inbounds %"class.display::Display", %"class.display::Display"* %1, i64 0, i32 3
  %9 = getelementptr inbounds %"struct.blink::ScreenInfo", %"struct.blink::ScreenInfo"* %0, i64 0, i32 7
  %10 = bitcast %"class.gfx::Rect"* %9 to i8*
  %11 = bitcast %"class.gfx::Rect"* %8 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %10, i8* align 4 %11, i64 16, i1 false)
  %12 = getelementptr inbounds %"class.display::Display", %"class.display::Display"* %1, i64 0, i32 4
  %13 = bitcast float* %12 to i32*
  %14 = load i32, i32* %13, align 8
  %15 = bitcast %"struct.blink::ScreenInfo"* %0 to i32*
  store i32 %14, i32* %15, align 8
  %16 = getelementptr inbounds %"struct.blink::ScreenInfo", %"struct.blink::ScreenInfo"* %0, i64 0, i32 1, i32 0, i64 0, i32 0
  %17 = getelementptr inbounds %"class.display::Display", %"class.display::Display"* %1, i64 0, i32 10, i32 0, i64 0, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %16, i8* align 8 %17, i64 436, i1 false) #4
  %18 = getelementptr inbounds %"struct.blink::ScreenInfo", %"struct.blink::ScreenInfo"* %0, i64 0, i32 1, i32 3
  %19 = getelementptr inbounds %"class.display::Display", %"class.display::Display"* %1, i64 0, i32 10, i32 3, i32 0, i32 0, i32 0, i32 0
  %20 = load i8, i8* %19, align 8, !range !2
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %32, label %22

22:                                               ; preds = %2
  %23 = getelementptr inbounds %"class.display::Display", %"class.display::Display"* %1, i64 0, i32 10, i32 3, i32 0, i32 0, i32 0, i32 1, i32 0
  %24 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %18, i64 0, i32 0, i32 0, i32 0, i32 0
  %25 = load i8, i8* %24, align 8, !range !2
  %26 = icmp eq i8 %25, 0
  %27 = getelementptr inbounds %"struct.blink::ScreenInfo", %"struct.blink::ScreenInfo"* %0, i64 0, i32 1, i32 3, i32 0, i32 0, i32 0, i32 1, i32 0
  br i1 %26, label %31, label %28

28:                                               ; preds = %22
  %29 = bitcast %"struct.gfx::HDRStaticMetadata"* %27 to i8*
  %30 = bitcast %"struct.gfx::HDRStaticMetadata"* %23 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %29, i8* align 8 %30, i64 24, i1 false) #4
  br label %34

31:                                               ; preds = %22
  tail call void @_ZN3gfx17HDRStaticMetadataC1ERKS0_(%"struct.gfx::HDRStaticMetadata"* %27, %"struct.gfx::HDRStaticMetadata"* dereferenceable(24) %23) #4
  store i8 1, i8* %24, align 8
  br label %34

32:                                               ; preds = %2
  %33 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %18, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %33, align 8
  br label %34

34:                                               ; preds = %28, %31, %32
  %35 = getelementptr inbounds %"class.display::Display", %"class.display::Display"* %1, i64 0, i32 11
  %36 = load i32, i32* %35, align 8
  %37 = getelementptr inbounds %"struct.blink::ScreenInfo", %"struct.blink::ScreenInfo"* %0, i64 0, i32 2
  store i32 %36, i32* %37, align 8
  %38 = getelementptr inbounds %"class.display::Display", %"class.display::Display"* %1, i64 0, i32 12
  %39 = load i32, i32* %38, align 4
  %40 = getelementptr inbounds %"struct.blink::ScreenInfo", %"struct.blink::ScreenInfo"* %0, i64 0, i32 3
  store i32 %39, i32* %40, align 4
  %41 = getelementptr inbounds %"class.display::Display", %"class.display::Display"* %1, i64 0, i32 13
  %42 = load i8, i8* %41, align 8, !range !2
  %43 = getelementptr inbounds %"struct.blink::ScreenInfo", %"struct.blink::ScreenInfo"* %0, i64 0, i32 4
  store i8 %42, i8* %43, align 8
  %44 = getelementptr inbounds %"class.display::Display", %"class.display::Display"* %1, i64 0, i32 14
  %45 = load i32, i32* %44, align 4
  %46 = getelementptr inbounds %"struct.blink::ScreenInfo", %"struct.blink::ScreenInfo"* %0, i64 0, i32 5
  store i32 %45, i32* %46, align 4
  %47 = tail call i32 @_ZNK7display7Display21PanelRotationAsDegreeEv(%"class.display::Display"* %1) #4
  %48 = trunc i32 %47 to i16
  %49 = getelementptr inbounds %"struct.blink::ScreenInfo", %"struct.blink::ScreenInfo"* %0, i64 0, i32 9
  store i16 %48, i16* %49, align 4
  switch i16 %48, label %53 [
    i16 90, label %51
    i16 270, label %50
  ]

50:                                               ; preds = %34
  br label %51

51:                                               ; preds = %34, %50
  %52 = phi i16 [ 90, %50 ], [ 270, %34 ]
  store i16 %52, i16* %49, align 4
  br label %53

53:                                               ; preds = %51, %34
  %54 = tail call i32 @_ZNK7display7Display21PanelRotationAsDegreeEv(%"class.display::Display"* %1) #4
  %55 = getelementptr inbounds %"class.display::Display", %"class.display::Display"* %1, i64 0, i32 1, i32 1, i32 1
  %56 = load i32, i32* %55, align 4
  %57 = getelementptr inbounds %"class.display::Display", %"class.display::Display"* %1, i64 0, i32 1, i32 1, i32 0
  %58 = load i32, i32* %57, align 4
  %59 = icmp sge i32 %56, %58
  %60 = load i32, i32* @_ZZN7content11DisplayUtil28GetOrientationTypeForDesktopERKN7display7DisplayEE22primary_portrait_angle, align 4
  %61 = icmp eq i32 %60, -1
  %62 = and i1 %59, %61
  br i1 %62, label %63, label %64

63:                                               ; preds = %53
  store i32 %54, i32* @_ZZN7content11DisplayUtil28GetOrientationTypeForDesktopERKN7display7DisplayEE22primary_portrait_angle, align 4
  br label %64

64:                                               ; preds = %63, %53
  %65 = phi i32 [ %54, %63 ], [ %60, %53 ]
  %66 = xor i1 %59, true
  %67 = load i32, i32* @_ZZN7content11DisplayUtil28GetOrientationTypeForDesktopERKN7display7DisplayEE23primary_landscape_angle, align 4
  %68 = icmp eq i32 %67, -1
  %69 = and i1 %68, %66
  br i1 %69, label %70, label %71

70:                                               ; preds = %64
  store i32 %54, i32* @_ZZN7content11DisplayUtil28GetOrientationTypeForDesktopERKN7display7DisplayEE23primary_landscape_angle, align 4
  br label %71

71:                                               ; preds = %64, %70
  %72 = phi i32 [ %67, %64 ], [ %54, %70 ]
  %73 = icmp eq i32 %65, %54
  %74 = select i1 %73, i32 1, i32 2
  %75 = icmp eq i32 %72, %54
  %76 = select i1 %75, i32 3, i32 4
  %77 = select i1 %59, i32 %74, i32 %76
  %78 = getelementptr inbounds %"struct.blink::ScreenInfo", %"struct.blink::ScreenInfo"* %0, i64 0, i32 8
  store i32 %77, i32* %78, align 8
  %79 = tail call %"class.display::Screen"* @_ZN7display6Screen9GetScreenEv() #4
  %80 = icmp eq %"class.display::Screen"* %79, null
  br i1 %80, label %102, label %81

81:                                               ; preds = %71
  %82 = bitcast %"class.display::Screen"* %79 to i32 (%"class.display::Screen"*)***
  %83 = load i32 (%"class.display::Screen"*)**, i32 (%"class.display::Screen"*)*** %82, align 8
  %84 = getelementptr inbounds i32 (%"class.display::Screen"*)*, i32 (%"class.display::Screen"*)** %83, i64 6
  %85 = load i32 (%"class.display::Screen"*)*, i32 (%"class.display::Screen"*)** %84, align 8
  %86 = tail call i32 %85(%"class.display::Screen"* nonnull %79) #4
  %87 = icmp sgt i32 %86, 1
  %88 = zext i1 %87 to i8
  %89 = getelementptr inbounds %"struct.blink::ScreenInfo", %"struct.blink::ScreenInfo"* %0, i64 0, i32 10
  store i8 %88, i8* %89, align 2
  %90 = bitcast %"class.display::Display"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 568, i8* nonnull %90) #4
  %91 = bitcast %"class.display::Screen"* %79 to void (%"class.display::Display"*, %"class.display::Screen"*)***
  %92 = load void (%"class.display::Display"*, %"class.display::Screen"*)**, void (%"class.display::Display"*, %"class.display::Screen"*)*** %91, align 8
  %93 = getelementptr inbounds void (%"class.display::Display"*, %"class.display::Screen"*)*, void (%"class.display::Display"*, %"class.display::Screen"*)** %92, i64 12
  %94 = load void (%"class.display::Display"*, %"class.display::Screen"*)*, void (%"class.display::Display"*, %"class.display::Screen"*)** %93, align 8
  call void %94(%"class.display::Display"* nonnull sret %3, %"class.display::Screen"* nonnull %79) #4
  %95 = getelementptr inbounds %"class.display::Display", %"class.display::Display"* %3, i64 0, i32 0
  %96 = load i64, i64* %95, align 8
  %97 = getelementptr inbounds %"class.display::Display", %"class.display::Display"* %1, i64 0, i32 0
  %98 = load i64, i64* %97, align 8
  %99 = icmp eq i64 %96, %98
  %100 = zext i1 %99 to i8
  %101 = getelementptr inbounds %"struct.blink::ScreenInfo", %"struct.blink::ScreenInfo"* %0, i64 0, i32 11
  store i8 %100, i8* %101, align 1
  call void @_ZN7display7DisplayD1Ev(%"class.display::Display"* nonnull %3) #4
  call void @llvm.lifetime.end.p0i8(i64 568, i8* nonnull %90) #4
  br label %105

102:                                              ; preds = %71
  %103 = getelementptr inbounds %"struct.blink::ScreenInfo", %"struct.blink::ScreenInfo"* %0, i64 0, i32 10
  store i8 0, i8* %103, align 2
  %104 = getelementptr inbounds %"struct.blink::ScreenInfo", %"struct.blink::ScreenInfo"* %0, i64 0, i32 11
  store i8 0, i8* %104, align 1
  br label %105

105:                                              ; preds = %102, %81
  %106 = call zeroext i1 @_ZNK7display7Display10IsInternalEv(%"class.display::Display"* %1) #4
  %107 = getelementptr inbounds %"struct.blink::ScreenInfo", %"struct.blink::ScreenInfo"* %0, i64 0, i32 12
  %108 = zext i1 %106 to i8
  store i8 %108, i8* %107, align 8
  %109 = getelementptr inbounds %"class.display::Display", %"class.display::Display"* %1, i64 0, i32 0
  %110 = load i64, i64* %109, align 8
  %111 = getelementptr inbounds %"struct.blink::ScreenInfo", %"struct.blink::ScreenInfo"* %0, i64 0, i32 13
  store i64 %110, i64* %111, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare i32 @_ZNK7display7Display21PanelRotationAsDegreeEv(%"class.display::Display"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN7content11DisplayUtil28GetOrientationTypeForDesktopERKN7display7DisplayE(%"class.display::Display"* dereferenceable(568)) local_unnamed_addr #0 align 2 {
  %2 = tail call i32 @_ZNK7display7Display21PanelRotationAsDegreeEv(%"class.display::Display"* %0) #4
  %3 = getelementptr inbounds %"class.display::Display", %"class.display::Display"* %0, i64 0, i32 1, i32 1, i32 1
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %"class.display::Display", %"class.display::Display"* %0, i64 0, i32 1, i32 1, i32 0
  %6 = load i32, i32* %5, align 4
  %7 = icmp sge i32 %4, %6
  %8 = load i32, i32* @_ZZN7content11DisplayUtil28GetOrientationTypeForDesktopERKN7display7DisplayEE22primary_portrait_angle, align 4
  %9 = icmp eq i32 %8, -1
  %10 = and i1 %7, %9
  br i1 %10, label %11, label %12

11:                                               ; preds = %1
  store i32 %2, i32* @_ZZN7content11DisplayUtil28GetOrientationTypeForDesktopERKN7display7DisplayEE22primary_portrait_angle, align 4
  br label %12

12:                                               ; preds = %11, %1
  %13 = phi i32 [ %2, %11 ], [ %8, %1 ]
  %14 = xor i1 %7, true
  %15 = load i32, i32* @_ZZN7content11DisplayUtil28GetOrientationTypeForDesktopERKN7display7DisplayEE23primary_landscape_angle, align 4
  %16 = icmp eq i32 %15, -1
  %17 = and i1 %16, %14
  br i1 %17, label %18, label %19

18:                                               ; preds = %12
  store i32 %2, i32* @_ZZN7content11DisplayUtil28GetOrientationTypeForDesktopERKN7display7DisplayEE23primary_landscape_angle, align 4
  br label %19

19:                                               ; preds = %12, %18
  %20 = phi i32 [ %15, %12 ], [ %2, %18 ]
  %21 = icmp eq i32 %13, %2
  %22 = select i1 %21, i32 1, i32 2
  %23 = icmp eq i32 %20, %2
  %24 = select i1 %23, i32 3, i32 4
  %25 = select i1 %7, i32 %22, i32 %24
  ret i32 %25
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare %"class.display::Screen"* @_ZN7display6Screen9GetScreenEv() local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN7display7DisplayD1Ev(%"class.display::Display"*) unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare zeroext i1 @_ZNK7display7Display10IsInternalEv(%"class.display::Display"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7content11DisplayUtil20GetDefaultScreenInfoEPN5blink10ScreenInfoE(%"struct.blink::ScreenInfo"*) local_unnamed_addr #0 align 2 {
  tail call void @_ZN7content11DisplayUtil23GetNativeViewScreenInfoEPN5blink10ScreenInfoEPN4aura6WindowE(%"struct.blink::ScreenInfo"* %0, %"class.aura::Window"* null)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7content11DisplayUtil23GetNativeViewScreenInfoEPN5blink10ScreenInfoEPN4aura6WindowE(%"struct.blink::ScreenInfo"*, %"class.aura::Window"*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"struct.blink::ScreenInfo", align 8
  %4 = alloca %"class.display::Display", align 8
  %5 = tail call %"class.display::Screen"* @_ZN7display6Screen9GetScreenEv() #4
  %6 = icmp eq %"class.display::Screen"* %5, null
  br i1 %6, label %7, label %10

7:                                                ; preds = %2
  %8 = bitcast %"struct.blink::ScreenInfo"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 552, i8* nonnull %8) #4
  call void @_ZN5blink10ScreenInfoC1Ev(%"struct.blink::ScreenInfo"* nonnull %3) #4
  %9 = call dereferenceable(552) %"struct.blink::ScreenInfo"* @_ZN5blink10ScreenInfoaSERKS0_(%"struct.blink::ScreenInfo"* %0, %"struct.blink::ScreenInfo"* nonnull dereferenceable(552) %3) #4
  call void @_ZN5blink10ScreenInfoD1Ev(%"struct.blink::ScreenInfo"* nonnull %3) #4
  call void @llvm.lifetime.end.p0i8(i64 552, i8* nonnull %8) #4
  br label %24

10:                                               ; preds = %2
  %11 = bitcast %"class.display::Display"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 568, i8* nonnull %11) #4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %11, i8* align 8 bitcast ({ i64, %"class.gfx::Rect", %"class.gfx::Size", %"class.gfx::Rect", float, i32, { { { { i8, [3 x i8], %union.anon.4 } } } }, i32, i32, %"class.gfx::Size", { [6 x %"class.gfx::ColorSpace"], [6 x i32], float, [4 x i8], { { { { i8, [7 x i8], %union.anon } } } } }, i32, i32, i8, [3 x i8], i32 }* @__const._ZN7content11DisplayUtil23GetNativeViewScreenInfoEPN5blink10ScreenInfoEPN4aura6WindowE.display to i8*), i64 568, i1 false)
  %12 = icmp eq %"class.aura::Window"* %1, null
  br i1 %12, label %18, label %13

13:                                               ; preds = %10
  %14 = bitcast %"class.display::Screen"* %5 to void (%"class.display::Display"*, %"class.display::Screen"*, %"class.aura::Window"*)***
  %15 = load void (%"class.display::Display"*, %"class.display::Screen"*, %"class.aura::Window"*)**, void (%"class.display::Display"*, %"class.display::Screen"*, %"class.aura::Window"*)*** %14, align 8
  %16 = getelementptr inbounds void (%"class.display::Display"*, %"class.display::Screen"*, %"class.aura::Window"*)*, void (%"class.display::Display"*, %"class.display::Screen"*, %"class.aura::Window"*)** %15, i64 9
  %17 = load void (%"class.display::Display"*, %"class.display::Screen"*, %"class.aura::Window"*)*, void (%"class.display::Display"*, %"class.display::Screen"*, %"class.aura::Window"*)** %16, align 8
  call void %17(%"class.display::Display"* nonnull sret %4, %"class.display::Screen"* nonnull %5, %"class.aura::Window"* nonnull %1) #4
  br label %23

18:                                               ; preds = %10
  %19 = bitcast %"class.display::Screen"* %5 to void (%"class.display::Display"*, %"class.display::Screen"*)***
  %20 = load void (%"class.display::Display"*, %"class.display::Screen"*)**, void (%"class.display::Display"*, %"class.display::Screen"*)*** %19, align 8
  %21 = getelementptr inbounds void (%"class.display::Display"*, %"class.display::Screen"*)*, void (%"class.display::Display"*, %"class.display::Screen"*)** %20, i64 12
  %22 = load void (%"class.display::Display"*, %"class.display::Screen"*)*, void (%"class.display::Display"*, %"class.display::Screen"*)** %21, align 8
  call void %22(%"class.display::Display"* nonnull sret %4, %"class.display::Screen"* nonnull %5) #4
  br label %23

23:                                               ; preds = %18, %13
  call void @_ZN7content11DisplayUtil19DisplayToScreenInfoEPN5blink10ScreenInfoERKN7display7DisplayE(%"struct.blink::ScreenInfo"* %0, %"class.display::Display"* nonnull dereferenceable(568) %4)
  call void @_ZN7display7DisplayD1Ev(%"class.display::Display"* nonnull %4) #4
  call void @llvm.lifetime.end.p0i8(i64 568, i8* nonnull %11) #4
  br label %24

24:                                               ; preds = %23, %7
  ret void
}

declare void @_ZN5blink10ScreenInfoC1Ev(%"struct.blink::ScreenInfo"*) unnamed_addr #2

declare dereferenceable(552) %"struct.blink::ScreenInfo"* @_ZN5blink10ScreenInfoaSERKS0_(%"struct.blink::ScreenInfo"*, %"struct.blink::ScreenInfo"* dereferenceable(552)) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN5blink10ScreenInfoD1Ev(%"struct.blink::ScreenInfo"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN7content11DisplayUtil27GetOrientationTypeForMobileERKN7display7DisplayE(%"class.display::Display"* dereferenceable(568)) local_unnamed_addr #0 align 2 {
  %2 = tail call i32 @_ZNK7display7Display21PanelRotationAsDegreeEv(%"class.display::Display"* %0) #4
  %3 = getelementptr inbounds %"class.display::Display", %"class.display::Display"* %0, i64 0, i32 1, i32 1, i32 1
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %"class.display::Display", %"class.display::Display"* %0, i64 0, i32 1, i32 1, i32 0
  %6 = load i32, i32* %5, align 4
  switch i32 %2, label %9 [
    i32 180, label %7
    i32 0, label %7
  ]

7:                                                ; preds = %1, %1
  %8 = icmp sge i32 %4, %6
  br label %11

9:                                                ; preds = %1
  %10 = icmp sle i32 %4, %6
  br label %11

11:                                               ; preds = %9, %7
  %12 = phi i1 [ %8, %7 ], [ %10, %9 ]
  switch i32 %2, label %21 [
    i32 0, label %13
    i32 90, label %15
    i32 180, label %17
    i32 270, label %19
  ]

13:                                               ; preds = %11
  %14 = select i1 %12, i32 1, i32 3
  br label %21

15:                                               ; preds = %11
  %16 = select i1 %12, i32 3, i32 2
  br label %21

17:                                               ; preds = %11
  %18 = select i1 %12, i32 2, i32 4
  br label %21

19:                                               ; preds = %11
  %20 = select i1 %12, i32 4, i32 1
  br label %21

21:                                               ; preds = %11, %19, %17, %15, %13
  %22 = phi i32 [ %20, %19 ], [ %18, %17 ], [ %16, %15 ], [ %14, %13 ], [ 1, %11 ]
  ret i32 %22
}

declare void @_ZN3gfx17HDRStaticMetadataC1ERKS0_(%"struct.gfx::HDRStaticMetadata"*, %"struct.gfx::HDRStaticMetadata"* dereferenceable(24)) unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
