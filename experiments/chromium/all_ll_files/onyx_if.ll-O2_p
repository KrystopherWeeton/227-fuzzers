; ModuleID = '../../third_party/libvpx/source/libvpx/vp8/encoder/onyx_if.c'
source_filename = "../../third_party/libvpx/source/libvpx/vp8/encoder/onyx_if.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.block = type { i16*, i16*, i16*, i16*, i16*, i16*, i16*, i16*, i16, i8**, i32, i32 }
%struct.blockd = type { i16*, i16*, i8*, i16*, i32, i8*, %union.b_mode_info }
%union.b_mode_info = type { i32 }
%struct.macroblock = type { [400 x i16], [400 x i16], [256 x i8], i8*, [25 x %struct.block], %struct.yv12_buffer_config, %struct.macroblockd, %struct.PARTITION_INFO*, %struct.PARTITION_INFO*, %struct.PARTITION_INFO*, [4 x i32], %struct.search_site*, i32, i32, i32, i32, i32, i32, i32, i32*, i32*, i32, i32, [2 x i32*], [2 x i32*], [10 x i32]*, [10 x i32]*, [10 x [10 x i32]]*, i32*, [8 x [3 x [12 x i32]]]*, i32, i32, i32, i32, i32, i32, i8*, i8*, %struct.mv_context*, i32, i32, i32, i32, i32, i32, %union.int_mv, i32, i32, i8, i32, [4 x [8 x [3 x [12 x i32]]]], [2 x [2047 x i32]], [5 x i32], [4 x i32], i64, i64, [4 x i32], [20 x i32], [20 x i32], i32, [20 x i32], i32, i32, i32, i32, i32, [1024 x i32], void (i16*, i16*, i32)*, void (i16*, i16*, i32)*, void (i16*, i16*, i32)*, void (%struct.block*, %struct.blockd*)*, i32, i32, [8 x i8] }
%struct.yv12_buffer_config = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i8*, i8*, i8*, i64, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.macroblockd = type { [384 x i8], [400 x i16], [400 x i16], [25 x i8], [7 x i8], [16 x i16], [16 x i16], [16 x i16], [16 x i16], [25 x %struct.blockd], i32, %struct.yv12_buffer_config, %struct.yv12_buffer_config, %struct.modeinfo*, i32, i32, i32, i32, [3 x i8*], [3 x i8*], [2 x i32], %struct.ENTROPY_CONTEXT_PLANES*, %struct.ENTROPY_CONTEXT_PLANES*, i8, i8, i8, i8, [3 x i8], [2 x [4 x i8]], i8, i8, [4 x i8], [4 x i8], [4 x i8], [4 x i8], i32, i32, i32, i32, void (i8*, i32, i32, i32, i8*, i32)*, void (i8*, i32, i32, i32, i8*, i32)*, void (i8*, i32, i32, i32, i8*, i32)*, void (i8*, i32, i32, i32, i8*, i32)*, i8*, i32, %struct.vpx_internal_error_info, [16 x i8], [704 x i8] }
%struct.modeinfo = type { %struct.MB_MODE_INFO, [16 x %union.b_mode_info] }
%struct.MB_MODE_INFO = type { i8, i8, i8, i8, %union.int_mv, i8, i8, i8, i8 }
%struct.ENTROPY_CONTEXT_PLANES = type { [4 x i8], [2 x i8], [2 x i8], i8 }
%struct.vpx_internal_error_info = type { i32, i32, [80 x i8], i32, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.PARTITION_INFO = type { i32, [16 x %struct.anon] }
%struct.anon = type { i32, %union.int_mv }
%struct.search_site = type { %struct.MV, i32 }
%struct.MV = type { i16, i16 }
%struct.mv_context = type { [19 x i8] }
%union.int_mv = type { i32 }
%struct.variance_vtable = type { i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*)*, void (i8*, i32, i8*, i32, i32*)*, void (i8*, i32, i8*, i32, i32*)*, void (i8*, i32, i8**, i32, i32*)*, void (i8*, i32, i8*, i32, i32)* }
%struct.VP8_COMP = type { [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], %struct.macroblock, %struct.VP8Common, [9 x %struct.BOOL_CODER], %struct.VP8_CONFIG, %struct.lookahead_ctx*, %struct.lookahead_entry*, %struct.lookahead_entry*, %struct.lookahead_entry*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, %struct.yv12_buffer_config*, i32, i32, i32, i32, i32, i32, i32, %struct.yv12_buffer_config, %struct.TOKENEXTRA*, i32, i32, i32, i32, i32, i32, [20 x i32], [20 x i32], i32, i32, %struct.CODING_CONTEXT, i64, i64, i32, i32, [2 x i32], double, double, double, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, [5 x i32], i32, i32, i32, i32, double, i64, i64, i64, i32, i32, i32, i32, i64, i32, double, double, i64, i64, i32, i32, i32, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, [4 x [8 x [3 x [11 x i8]]]], [4 x [8 x [3 x [11 x i8]]]], [4 x [8 x [3 x [11 x [2 x i32]]]]], i32, i32, i32, i32, %struct.vpx_codec_pkt_list*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [3 x i32], [3 x i32], [4 x i32], i32, i32, i32, %struct.SPEED_FEATURES, i32, i32, i8*, i8*, [2 x [4 x i8]], [4 x i32], i8*, i32, i32, i32, i32, i32, i8*, i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.vpx_atomic_int*, i32, %struct.vpx_atomic_int, i32, i32, i64*, i64, %struct.MB_ROW_COMP*, %struct.ENCODETHREAD_DATA*, %struct.LPFTHREAD_DATA, %union.sem_t*, %union.sem_t*, %union.sem_t, %union.sem_t, %struct.TOKENLIST*, [9 x i32], [9 x i8*], [9 x i8*], i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, %union.int_mv*, i32, %struct.variance_vtable*, i32**, i32*, i32*)*, i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, i32, i32, %struct.variance_vtable*, i32**, %union.int_mv*)*, i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, i32, i32, %struct.variance_vtable*, i32**, %union.int_mv*)*, i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, %union.int_mv*, i32, i32, i32*, %struct.variance_vtable*, i32**, %union.int_mv*)*, [5 x %struct.variance_vtable], i64, i64, i64, i64, [128 x i32], %struct.frame_contexts, %struct.frame_contexts, %struct.frame_contexts, %struct.twopass_rc, i32, i32, i32*, i8*, i32, i32, %union.int_mv*, i32*, i32*, i32, i32, i32, i32, %struct.vp8_denoiser, i32, [5 x %struct.LAYER_CONTEXT], [5 x i64], [5 x i64], [5 x double], [5 x double], [5 x double], [5 x double], [5 x double], [5 x double], [5 x double], [5 x double], [5 x double], [5 x double], i32, i8, [4 x i32], i32, %struct.rd_costs_struct, i32, i32, [12 x i8] }
%struct.VP8Common = type { %struct.vpx_internal_error_info, [8 x i8], [128 x [2 x i16]], [128 x [2 x i16]], [128 x [2 x i16]], i32, i32, i32, i32, i32, %struct.yv12_buffer_config*, [4 x %struct.yv12_buffer_config], [4 x i32], i32, i32, i32, i32, %struct.yv12_buffer_config, %struct.yv12_buffer_config, %struct.yv12_buffer_config, i32, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.modeinfo*, %struct.modeinfo*, %struct.modeinfo*, i32, [12 x i8], %struct.loop_filter_info_n, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i32], %struct.ENTROPY_CONTEXT_PLANES*, %struct.ENTROPY_CONTEXT_PLANES, %struct.frame_contexts, %struct.frame_contexts, i32, i32, i32, i32, %struct.postproc_state, i32, [12 x i8] }
%struct.loop_filter_info_n = type { [64 x [16 x i8]], [64 x [16 x i8]], [64 x [16 x i8]], [4 x [16 x i8]], [4 x [4 x [4 x i8]]], [2 x [64 x i8]], [10 x i8], [6 x i8] }
%struct.postproc_state = type { i32, i32, i32, i32, i32, i8* }
%struct.BOOL_CODER = type { i32, i32, i32, i32, i8*, i8*, %struct.vpx_internal_error_info* }
%struct.VP8_CONFIG = type { i32, i32, i32, %struct.vpx_rational, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.vpx_fixed_buf, %struct.vpx_codec_pkt_list*, i32, i32, [16 x i32], [16 x i32], i32, [16 x i32], i32, i32, %struct.vpx_rational, i8* }
%struct.vpx_fixed_buf = type { i8*, i64 }
%struct.vpx_rational = type { i32, i32 }
%struct.lookahead_ctx = type opaque
%struct.lookahead_entry = type { %struct.yv12_buffer_config, i64, i64, i32 }
%struct.TOKENEXTRA = type { i8*, i16, i8, i8 }
%struct.CODING_CONTEXT = type { i32, i32, i32, i32, i32, [4 x i32], [2 x %struct.mv_context], [2 x [2048 x i32]], [4 x i8], [3 x i8], [4 x i8], [3 x i8], [5 x i32], [4 x i32], [4 x i32], i32, i32 }
%struct.vpx_codec_pkt_list = type { i32, i32, [1 x %struct.vpx_codec_cx_pkt] }
%struct.vpx_codec_cx_pkt = type { i32, %union.anon }
%union.anon = type { %struct.anon.0, [40 x i8] }
%struct.anon.0 = type { i8*, i64, i64, i64, i32, i32, [5 x i32], [5 x i32], [5 x i8] }
%struct.SPEED_FEATURES = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, [20 x i32], i32, i32, i32, i32, i32, i32 }
%struct.vpx_atomic_int = type { i32 }
%struct.MB_ROW_COMP = type { %struct.macroblock, [4 x i32], i32, [12 x i8] }
%struct.ENCODETHREAD_DATA = type { i32, i8*, i8* }
%struct.LPFTHREAD_DATA = type { i32, i8* }
%union.sem_t = type { i64, [24 x i8] }
%struct.TOKENLIST = type { %struct.TOKENEXTRA*, %struct.TOKENEXTRA* }
%struct.frame_contexts = type { [9 x i8], [4 x i8], [3 x i8], [3 x i8], [4 x [8 x [3 x [11 x i8]]]], [2 x %struct.mv_context] }
%struct.twopass_rc = type { i32, double, i32, i32, %struct.FIRSTPASS_STATS, %struct.FIRSTPASS_STATS, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS, i32, i64, i64, double, double, double, double, double, double, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, i32, i32, double }
%struct.FIRSTPASS_STATS = type { double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double }
%struct.vp8_denoiser = type { [4 x %struct.yv12_buffer_config], %struct.yv12_buffer_config, %struct.yv12_buffer_config, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.denoise_params }
%struct.denoise_params = type { i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.LAYER_CONTEXT = type { double, i32, i64, i64, i64, i64, i64, i64, i32, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, double, double, double, i32, i32, i64, i32, i32, i32, i32, [4 x i32], [2 x i32] }
%struct.rd_costs_struct = type { [2 x [2048 x i32]], [2 x [512 x i32]], [2 x [10 x i32]], [2 x [10 x i32]], [10 x [10 x [10 x i32]]], [14 x i32], [4 x [8 x [3 x [12 x i32]]]] }
%struct.vpx_usec_timer = type { %struct.timeval, %struct.timeval }
%struct.timeval = type { i64, i64 }
%struct.LOWER_RES_FRAME_INFO = type { i32, i32, i32, double, [4 x i32], i32, i32, i32, %struct.LOWER_RES_MB_INFO* }
%struct.LOWER_RES_MB_INFO = type { i32, i32, %union.int_mv, i32 }
%struct.vp8_ppflags_t = type { i32, i32, i32, i32, i32, i32, i32 }

@vp8_initialize_enc.init_done = internal global i32 0, align 4
@thresh_mult_map_znn = internal unnamed_addr constant [10 x i32] [i32 0, i32 3, i32 1500, i32 4, i32 2000, i32 7, i32 1000, i32 9, i32 2000, i32 2147483647], align 16
@thresh_mult_map_vhpred = internal unnamed_addr constant [12 x i32] [i32 1000, i32 3, i32 1500, i32 4, i32 2000, i32 7, i32 1000, i32 8, i32 2000, i32 14, i32 2147483647, i32 2147483647], align 16
@thresh_mult_map_bpred = internal unnamed_addr constant [14 x i32] [i32 2000, i32 1, i32 2500, i32 3, i32 5000, i32 4, i32 7500, i32 7, i32 2500, i32 8, i32 5000, i32 13, i32 2147483647, i32 2147483647], align 16
@thresh_mult_map_tm = internal unnamed_addr constant [14 x i32] [i32 1000, i32 3, i32 1500, i32 4, i32 2000, i32 7, i32 0, i32 8, i32 1000, i32 9, i32 2000, i32 14, i32 2147483647, i32 2147483647], align 16
@thresh_mult_map_new1 = internal unnamed_addr constant [6 x i32] [i32 1000, i32 3, i32 2000, i32 7, i32 2000, i32 2147483647], align 16
@thresh_mult_map_new2 = internal unnamed_addr constant [14 x i32] [i32 1000, i32 3, i32 2000, i32 4, i32 2500, i32 6, i32 4000, i32 7, i32 2000, i32 9, i32 2500, i32 12, i32 4000, i32 2147483647], align 16
@thresh_mult_map_split1 = internal unnamed_addr constant [18 x i32] [i32 2500, i32 1, i32 1700, i32 3, i32 10000, i32 4, i32 25000, i32 5, i32 2147483647, i32 7, i32 5000, i32 8, i32 10000, i32 9, i32 25000, i32 10, i32 2147483647, i32 2147483647], align 16
@thresh_mult_map_split2 = internal unnamed_addr constant [18 x i32] [i32 5000, i32 1, i32 4500, i32 3, i32 20000, i32 4, i32 50000, i32 5, i32 2147483647, i32 7, i32 10000, i32 8, i32 20000, i32 9, i32 50000, i32 10, i32 2147483647, i32 2147483647], align 16
@mode_check_freq_map_near2 = internal unnamed_addr constant [14 x i32] [i32 0, i32 6, i32 2, i32 7, i32 0, i32 10, i32 2, i32 17, i32 4, i32 18, i32 8, i32 19, i32 16, i32 2147483647], align 16
@mode_check_freq_map_vhbpred = internal unnamed_addr constant [10 x i32] [i32 0, i32 6, i32 2, i32 7, i32 0, i32 10, i32 2, i32 12, i32 4, i32 2147483647], align 16
@mode_check_freq_map_new1 = internal unnamed_addr constant [8 x i32] [i32 0, i32 17, i32 2, i32 18, i32 4, i32 19, i32 8, i32 2147483647], align 16
@mode_check_freq_map_new2 = internal unnamed_addr constant [14 x i32] [i32 0, i32 6, i32 4, i32 7, i32 0, i32 10, i32 4, i32 17, i32 8, i32 18, i32 16, i32 19, i32 32, i32 2147483647], align 16
@mode_check_freq_map_split1 = internal unnamed_addr constant [10 x i32] [i32 0, i32 3, i32 2, i32 4, i32 7, i32 8, i32 2, i32 9, i32 7, i32 2147483647], align 16
@mode_check_freq_map_split2 = internal unnamed_addr constant [12 x i32] [i32 0, i32 2, i32 2, i32 3, i32 4, i32 4, i32 15, i32 8, i32 4, i32 9, i32 15, i32 2147483647], align 16
@vp8_regular_quantize_b = external local_unnamed_addr global void (%struct.block*, %struct.blockd*)*, align 8
@vp8_fast_quantize_b = external local_unnamed_addr global void (%struct.block*, %struct.blockd*)*, align 8
@.str = private unnamed_addr constant [33 x i8] c"Failed to allocate frame buffers\00", align 1
@.str.1 = private unnamed_addr constant [34 x i8] c"Failed to allocate partition data\00", align 1
@.str.2 = private unnamed_addr constant [37 x i8] c"Failed to allocate last frame buffer\00", align 1
@.str.3 = private unnamed_addr constant [40 x i8] c"Failed to allocate scaled source buffer\00", align 1
@.str.4 = private unnamed_addr constant [28 x i8] c"Failed to allocate cpi->tok\00", align 1
@.str.5 = private unnamed_addr constant [40 x i8] c"Failed to allocate cpi->gf_active_flags\00", align 1
@.str.6 = private unnamed_addr constant [40 x i8] c"Failed to allocate cpi->mb_activity_map\00", align 1
@.str.7 = private unnamed_addr constant [29 x i8] c"Failed to allocate cpi->lfmv\00", align 1
@.str.8 = private unnamed_addr constant [47 x i8] c"Failed to allocate cpi->lf_ref_frame_sign_bias\00", align 1
@.str.9 = private unnamed_addr constant [37 x i8] c"Failed to allocate cpi->lf_ref_frame\00", align 1
@.str.10 = private unnamed_addr constant [41 x i8] c"Failed to allocate cpi->segmentation_map\00", align 1
@.str.11 = private unnamed_addr constant [35 x i8] c"Failed to allocate cpi->active_map\00", align 1
@.str.12 = private unnamed_addr constant [42 x i8] c"Failed to allocate cpi->mt_current_mb_col\00", align 1
@.str.13 = private unnamed_addr constant [31 x i8] c"Failed to allocate cpi->tplist\00", align 1
@.str.14 = private unnamed_addr constant [28 x i8] c"Failed to allocate denoiser\00", align 1
@q_trans = internal unnamed_addr constant [64 x i32] [i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 7, i32 8, i32 9, i32 10, i32 12, i32 13, i32 15, i32 17, i32 18, i32 19, i32 20, i32 21, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 33, i32 35, i32 37, i32 39, i32 41, i32 43, i32 45, i32 47, i32 49, i32 51, i32 53, i32 55, i32 57, i32 59, i32 61, i32 64, i32 67, i32 70, i32 73, i32 76, i32 79, i32 82, i32 85, i32 88, i32 91, i32 94, i32 97, i32 100, i32 103, i32 106, i32 109, i32 112, i32 115, i32 118, i32 121, i32 124, i32 127], align 16
@.str.15 = private unnamed_addr constant [30 x i8] c"Failed to allocate cpi->mb.ss\00", align 1
@vp8cx_base_skip_false_prob = external local_unnamed_addr constant [128 x i32], align 16
@.str.16 = private unnamed_addr constant [43 x i8] c"Failed to allocate cpi->cyclic_refresh_map\00", align 1
@.str.17 = private unnamed_addr constant [33 x i8] c"Failed to allocate cpi->skin_map\00", align 1
@.str.18 = private unnamed_addr constant [41 x i8] c"Failed to allocate cpi->consec_zero_last\00", align 1
@.str.19 = private unnamed_addr constant [48 x i8] c"Failed to allocate cpi->consec_zero_last_mvbias\00", align 1
@vpx_variance16x16 = external local_unnamed_addr global i32 (i8*, i32, i8*, i32, i32*)*, align 8
@vpx_sub_pixel_variance16x16 = external local_unnamed_addr global i32 (i8*, i32, i32, i32, i8*, i32, i32*)*, align 8
@vpx_sad16x16x3 = external local_unnamed_addr global void (i8*, i32, i8*, i32, i32*)*, align 8
@vpx_sad16x16x8 = external local_unnamed_addr global void (i8*, i32, i8*, i32, i32*)*, align 8
@vpx_variance16x8 = external local_unnamed_addr global i32 (i8*, i32, i8*, i32, i32*)*, align 8
@vpx_sub_pixel_variance16x8 = external local_unnamed_addr global i32 (i8*, i32, i32, i32, i8*, i32, i32*)*, align 8
@vpx_sad16x8x3 = external local_unnamed_addr global void (i8*, i32, i8*, i32, i32*)*, align 8
@vpx_sad16x8x8 = external local_unnamed_addr global void (i8*, i32, i8*, i32, i32*)*, align 8
@vpx_sub_pixel_variance8x16 = external local_unnamed_addr global i32 (i8*, i32, i32, i32, i8*, i32, i32*)*, align 8
@vpx_sad8x16x3 = external local_unnamed_addr global void (i8*, i32, i8*, i32, i32*)*, align 8
@vpx_sad8x16x8 = external local_unnamed_addr global void (i8*, i32, i8*, i32, i32*)*, align 8
@vpx_sub_pixel_variance8x8 = external local_unnamed_addr global i32 (i8*, i32, i32, i32, i8*, i32, i32*)*, align 8
@vpx_sad8x8x3 = external local_unnamed_addr global void (i8*, i32, i8*, i32, i32*)*, align 8
@vpx_sad8x8x8 = external local_unnamed_addr global void (i8*, i32, i8*, i32, i32*)*, align 8
@vpx_sub_pixel_variance4x4 = external local_unnamed_addr global i32 (i8*, i32, i32, i32, i8*, i32, i32*)*, align 8
@vpx_sad4x4x3 = external local_unnamed_addr global void (i8*, i32, i8*, i32, i32*)*, align 8
@vpx_sad4x4x8 = external local_unnamed_addr global void (i8*, i32, i8*, i32, i32*)*, align 8
@vp8_copy32xn = external local_unnamed_addr global void (i8*, i32, i8*, i32, i32)*, align 8
@vp8_full_search_sad = external local_unnamed_addr global i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, i32, i32, %struct.variance_vtable*, i32**, %union.int_mv*)*, align 8
@vpx_mse16x16 = external local_unnamed_addr global i32 (i8*, i32, i8*, i32, i32*)*, align 8
@.str.20 = private unnamed_addr constant [31 x i8] c"Failed to allocate lag buffers\00", align 1
@kf_low_motion_minq = internal unnamed_addr constant [128 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\01\01\01\01\01\01\01\01\02\02\02\02\03\03\03\03\03\03\04\04\04\05\05\05\05\05\06\06\06\06\07\07\08\08\08\08\09\09\0A\0A\0A\0A\0B\0B\0B\0B\0C\0C\0D\0D\0D\0D\0E\0E\0F\0F\0F\0F\10\10\10\10\11\11\12\12\12\12\13\14\14\15\15\16\17\17", align 16
@kf_high_motion_minq = internal unnamed_addr constant [128 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\01\01\01\01\01\01\01\01\02\02\02\02\03\03\03\03\03\03\03\03\04\04\04\04\05\05\05\05\05\05\06\06\06\06\07\07\08\08\08\08\09\09\0A\0A\0A\0A\0B\0B\0B\0B\0C\0C\0D\0D\0D\0D\0E\0E\0F\0F\0F\0F\10\10\10\10\11\11\12\12\12\12\13\13\14\14\14\14\15\15\15\15\16\16\17\17\18\19\19\1A\1A\1B\1C\1C\1D\1E", align 16
@gf_low_motion_minq = internal unnamed_addr constant [128 x i8] c"\00\00\00\00\01\01\01\01\01\01\01\01\02\02\02\02\03\03\03\03\04\04\04\04\05\05\05\05\06\06\06\06\07\07\07\07\08\08\08\08\09\09\09\09\0A\0A\0A\0A\0B\0B\0C\0C\0D\0D\0E\0E\0F\0F\10\10\11\11\12\12\13\13\14\14\15\15\16\16\17\17\18\18\19\19\1A\1A\1B\1B\1C\1C\1D\1D\1E\1E\1F\1F  !!\22\22##$$%%&&''(())**+,-./0123456789:", align 16
@gf_high_motion_minq = internal unnamed_addr constant [128 x i8] c"\00\00\00\00\01\01\01\01\01\02\02\02\03\03\03\04\04\04\05\05\05\06\06\06\07\07\07\08\08\08\09\09\09\0A\0A\0A\0B\0B\0C\0C\0D\0D\0E\0E\0F\0F\10\10\11\11\12\12\13\13\14\14\15\15\16\16\17\17\18\18\19\19\1A\1A\1B\1B\1C\1C\1D\1D\1E\1E\1F\1F  !!\22\22##$$%%&&''(())**+,-./0123456789:;<>@BDFHJLNP", align 16
@gf_mid_motion_minq = internal unnamed_addr constant [128 x i8] c"\00\00\00\00\01\01\01\01\01\01\02\02\03\03\03\04\04\04\05\05\05\06\06\06\07\07\07\08\08\08\09\09\09\0A\0A\0A\0A\0B\0B\0B\0C\0C\0C\0C\0D\0D\0D\0E\0E\0E\0F\0F\10\10\11\11\12\12\13\13\14\14\15\15\16\16\17\17\18\18\19\19\1A\1A\1B\1B\1C\1C\1D\1D\1E\1E\1F\1F  !!\22\22##$$%%&''(())**++,-./0123456789:;<=>?@", align 16
@inter_minq = internal unnamed_addr constant [128 x i8] c"\00\00\01\01\02\03\03\04\04\05\06\06\07\08\08\09\09\0A\0B\0B\0C\0D\0D\0E\0F\0F\10\11\11\12\13\14\14\15\16\16\17\18\18\19\1A\1B\1B\1C\1D\1E\1E\1F !!\22#$$%&''()**+,-../012234567789:;<<=>?@ABCCDEFGHIJKKLMNOPQRSTUVVWXYZ[\5C]^_`abcd", align 16
@process_denoiser_mode_change.const_source = internal constant [16 x i8] c"\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80", align 16
@switch.table.vp8_get_compressed_data.27 = private unnamed_addr constant [3 x i32] [i32 4, i32 3, i32 1], align 4
@switch.table.vp8_get_compressed_data.28 = private unnamed_addr constant [3 x i32] [i32 5, i32 5, i32 2], align 4
@switch.table.vp8_get_compressed_data.29 = private unnamed_addr constant [3 x i32] [i32 3, i32 5, i32 5], align 4
@switch.table.vp8_get_compressed_data.30 = private unnamed_addr constant [3 x i32] [i32 2, i32 4, i32 4], align 4

; Function Attrs: nounwind ssp uwtable
define hidden void @vp8_initialize_enc() local_unnamed_addr #0 {
  %1 = load volatile i32, i32* @vp8_initialize_enc.init_done, align 4
  %2 = icmp eq i32 %1, 0
  br i1 %2, label %3, label %4

3:                                                ; preds = %0
  tail call void @vpx_dsp_rtcd() #10
  tail call void @vp8_init_intra_predictors() #10
  store volatile i32 1, i32* @vp8_initialize_enc.init_done, align 4
  br label %4

4:                                                ; preds = %0, %3
  ret void
}

declare void @vpx_dsp_rtcd() local_unnamed_addr #1

declare void @vp8_init_intra_predictors() local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @vp8_set_speed_features(%struct.VP8_COMP*) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 114
  %3 = load i32, i32* %2, align 4
  %4 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 113
  %5 = load i32, i32* %4, align 16
  %6 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 130, i32 2
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 45, i64 0
  %9 = bitcast i32* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %9, i8 0, i64 80, i1 false)
  %10 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 59
  store i32 0, i32* %10, align 8
  %11 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 71
  store i32 0, i32* %11, align 16
  %12 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 130, i32 0
  %13 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 130, i32 1
  %14 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 130, i32 3
  %15 = bitcast i32* %12 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %15, align 4
  %16 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 130, i32 4
  %17 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 130, i32 5
  %18 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 130, i32 8
  store i32 1, i32* %18, align 4
  %19 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 130, i32 7
  %20 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 130, i32 6
  %21 = bitcast i32* %16 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %21, align 4
  %22 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 130, i32 12
  %23 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 130, i32 13
  %24 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 130, i32 14
  store i32 1, i32* %24, align 4
  %25 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 130, i32 11
  %26 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 130, i32 10
  %27 = bitcast i32* %26 to <4 x i32>*
  store <4 x i32> <i32 8, i32 0, i32 1, i32 0>, <4 x i32>* %27, align 4
  %28 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 130, i32 15
  store i32 1, i32* %28, align 4
  %29 = getelementptr %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 130, i32 9, i64 0
  %30 = bitcast i32* %29 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %30, i8 0, i64 80, i1 false)
  %31 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18
  %32 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 129
  %33 = load i32, i32* %32, align 4
  %34 = and i32 %33, 1
  %35 = icmp eq i32 %34, 0
  %36 = select i1 %35, i32 1, i32 2
  %37 = lshr i32 %33, 1
  %38 = and i32 %37, 1
  %39 = lshr i32 %33, 2
  %40 = and i32 %39, 1
  %41 = add nuw nsw i32 %40, %38
  %42 = add nuw nsw i32 %41, %36
  switch i32 %3, label %45 [
    i32 0, label %49
    i32 2, label %43
  ]

43:                                               ; preds = %1
  %44 = add nsw i32 %5, 7
  br label %49

45:                                               ; preds = %1
  %46 = icmp slt i32 %5, 5
  %47 = select i1 %46, i32 %5, i32 5
  %48 = add nsw i32 %47, 1
  br label %49

49:                                               ; preds = %1, %43, %45
  %50 = phi i32 [ %44, %43 ], [ %48, %45 ], [ %3, %1 ]
  %51 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 130, i32 9, i64 3
  %52 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 130, i32 9, i64 2
  %53 = bitcast i32* %29 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %53, i8 0, i64 16, i1 false)
  br label %54

54:                                               ; preds = %54, %49
  %55 = phi i32* [ getelementptr inbounds ([10 x i32], [10 x i32]* @thresh_mult_map_znn, i64 0, i64 0), %49 ], [ %57, %54 ]
  %56 = getelementptr inbounds i32, i32* %55, i64 1
  %57 = getelementptr inbounds i32, i32* %55, i64 2
  %58 = load i32, i32* %56, align 4
  %59 = icmp sgt i32 %58, %50
  br i1 %59, label %60, label %54

60:                                               ; preds = %54
  %61 = load i32, i32* %55, align 4
  %62 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 130, i32 9, i64 9
  store i32 %61, i32* %62, align 4
  %63 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 130, i32 9, i64 8
  store i32 %61, i32* %63, align 4
  %64 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 130, i32 9, i64 7
  %65 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 130, i32 9, i64 5
  %66 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 130, i32 9, i64 4
  %67 = insertelement <4 x i32> undef, i32 %61, i32 0
  %68 = shufflevector <4 x i32> %67, <4 x i32> undef, <4 x i32> zeroinitializer
  %69 = bitcast i32* %66 to <4 x i32>*
  store <4 x i32> %68, <4 x i32>* %69, align 4
  br label %70

70:                                               ; preds = %70, %60
  %71 = phi i32* [ getelementptr inbounds ([12 x i32], [12 x i32]* @thresh_mult_map_vhpred, i64 0, i64 0), %60 ], [ %73, %70 ]
  %72 = getelementptr inbounds i32, i32* %71, i64 1
  %73 = getelementptr inbounds i32, i32* %71, i64 2
  %74 = load i32, i32* %72, align 4
  %75 = icmp sgt i32 %74, %50
  br i1 %75, label %76, label %70

76:                                               ; preds = %70
  %77 = load i32, i32* %71, align 4
  %78 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 130, i32 9, i64 11
  store i32 %77, i32* %78, align 4
  %79 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 130, i32 9, i64 10
  store i32 %77, i32* %79, align 4
  br label %80

80:                                               ; preds = %80, %76
  %81 = phi i32* [ getelementptr inbounds ([14 x i32], [14 x i32]* @thresh_mult_map_bpred, i64 0, i64 0), %76 ], [ %83, %80 ]
  %82 = getelementptr inbounds i32, i32* %81, i64 1
  %83 = getelementptr inbounds i32, i32* %81, i64 2
  %84 = load i32, i32* %82, align 4
  %85 = icmp sgt i32 %84, %50
  br i1 %85, label %86, label %80

86:                                               ; preds = %80
  %87 = load i32, i32* %81, align 4
  %88 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 130, i32 9, i64 19
  store i32 %87, i32* %88, align 4
  br label %89

89:                                               ; preds = %89, %86
  %90 = phi i32* [ getelementptr inbounds ([14 x i32], [14 x i32]* @thresh_mult_map_tm, i64 0, i64 0), %86 ], [ %92, %89 ]
  %91 = getelementptr inbounds i32, i32* %90, i64 1
  %92 = getelementptr inbounds i32, i32* %90, i64 2
  %93 = load i32, i32* %91, align 4
  %94 = icmp sgt i32 %93, %50
  br i1 %94, label %95, label %89

95:                                               ; preds = %89
  %96 = load i32, i32* %90, align 4
  %97 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 130, i32 9, i64 12
  store i32 %96, i32* %97, align 4
  br label %98

98:                                               ; preds = %98, %95
  %99 = phi i32* [ getelementptr inbounds ([6 x i32], [6 x i32]* @thresh_mult_map_new1, i64 0, i64 0), %95 ], [ %101, %98 ]
  %100 = getelementptr inbounds i32, i32* %99, i64 1
  %101 = getelementptr inbounds i32, i32* %99, i64 2
  %102 = load i32, i32* %100, align 4
  %103 = icmp sgt i32 %102, %50
  br i1 %103, label %104, label %98

104:                                              ; preds = %98
  %105 = load i32, i32* %99, align 4
  %106 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 130, i32 9, i64 13
  store i32 %105, i32* %106, align 4
  br label %107

107:                                              ; preds = %107, %104
  %108 = phi i32* [ getelementptr inbounds ([14 x i32], [14 x i32]* @thresh_mult_map_new2, i64 0, i64 0), %104 ], [ %110, %107 ]
  %109 = getelementptr inbounds i32, i32* %108, i64 1
  %110 = getelementptr inbounds i32, i32* %108, i64 2
  %111 = load i32, i32* %109, align 4
  %112 = icmp sgt i32 %111, %50
  br i1 %112, label %113, label %107

113:                                              ; preds = %107
  %114 = load i32, i32* %108, align 4
  %115 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 130, i32 9, i64 15
  store i32 %114, i32* %115, align 4
  %116 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 130, i32 9, i64 14
  store i32 %114, i32* %116, align 4
  br label %117

117:                                              ; preds = %117, %113
  %118 = phi i32* [ getelementptr inbounds ([18 x i32], [18 x i32]* @thresh_mult_map_split1, i64 0, i64 0), %113 ], [ %120, %117 ]
  %119 = getelementptr inbounds i32, i32* %118, i64 1
  %120 = getelementptr inbounds i32, i32* %118, i64 2
  %121 = load i32, i32* %119, align 4
  %122 = icmp sgt i32 %121, %50
  br i1 %122, label %123, label %117

123:                                              ; preds = %117
  %124 = load i32, i32* %118, align 4
  %125 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 130, i32 9, i64 16
  store i32 %124, i32* %125, align 4
  br label %126

126:                                              ; preds = %126, %123
  %127 = phi i32* [ getelementptr inbounds ([18 x i32], [18 x i32]* @thresh_mult_map_split2, i64 0, i64 0), %123 ], [ %129, %126 ]
  %128 = getelementptr inbounds i32, i32* %127, i64 1
  %129 = getelementptr inbounds i32, i32* %127, i64 2
  %130 = load i32, i32* %128, align 4
  %131 = icmp sgt i32 %130, %50
  br i1 %131, label %132, label %126

132:                                              ; preds = %126
  %133 = load i32, i32* %127, align 4
  %134 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 130, i32 9, i64 18
  store i32 %133, i32* %134, align 4
  %135 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 130, i32 9, i64 17
  store i32 %133, i32* %135, align 4
  %136 = icmp slt i32 %5, 7
  br i1 %136, label %137, label %152

137:                                              ; preds = %132
  %138 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 52
  %139 = load i32, i32* %138, align 4
  %140 = icmp ult i32 %139, 2
  %141 = and i32 %33, 3
  %142 = icmp ne i32 %141, 3
  %143 = or i1 %142, %140
  br i1 %143, label %152, label %144

144:                                              ; preds = %137
  %145 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 218
  %146 = load i32, i32* %145, align 16
  %147 = icmp eq i32 %146, 2
  br i1 %147, label %148, label %150

148:                                              ; preds = %144
  %149 = ashr i32 %61, 3
  store i32 %149, i32* %66, align 4
  store i32 %149, i32* %65, align 4
  store i32 %149, i32* %63, align 4
  br label %152

150:                                              ; preds = %144
  %151 = ashr i32 %61, 1
  store i32 %151, i32* %66, align 4
  store i32 %151, i32* %65, align 4
  store i32 %151, i32* %63, align 4
  br label %152

152:                                              ; preds = %137, %148, %150, %132
  %153 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 45, i64 12
  store i32 0, i32* %153, align 16
  %154 = bitcast i32* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 32 %154, i8 0, i64 16, i1 false)
  br label %155

155:                                              ; preds = %155, %152
  %156 = phi i32* [ getelementptr inbounds ([8 x i32], [8 x i32]* @mode_check_freq_map_new1, i64 0, i64 0), %152 ], [ %158, %155 ]
  %157 = getelementptr inbounds i32, i32* %156, i64 1
  %158 = getelementptr inbounds i32, i32* %156, i64 2
  %159 = load i32, i32* %157, align 4
  %160 = icmp sgt i32 %159, %50
  br i1 %160, label %161, label %155

161:                                              ; preds = %155
  %162 = load i32, i32* %156, align 4
  %163 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 45, i64 4
  %164 = insertelement <4 x i32> undef, i32 %162, i32 0
  %165 = shufflevector <4 x i32> %164, <4 x i32> undef, <4 x i32> zeroinitializer
  %166 = bitcast i32* %163 to <4 x i32>*
  store <4 x i32> %165, <4 x i32>* %166, align 16
  br label %167

167:                                              ; preds = %167, %161
  %168 = phi i32* [ getelementptr inbounds ([14 x i32], [14 x i32]* @mode_check_freq_map_near2, i64 0, i64 0), %161 ], [ %170, %167 ]
  %169 = getelementptr inbounds i32, i32* %168, i64 1
  %170 = getelementptr inbounds i32, i32* %168, i64 2
  %171 = load i32, i32* %169, align 4
  %172 = icmp sgt i32 %171, %50
  br i1 %172, label %173, label %167

173:                                              ; preds = %167
  %174 = load i32, i32* %168, align 4
  %175 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 45, i64 9
  store i32 %174, i32* %175, align 4
  %176 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 45, i64 8
  store i32 %174, i32* %176, align 32
  br label %177

177:                                              ; preds = %177, %173
  %178 = phi i32* [ getelementptr inbounds ([10 x i32], [10 x i32]* @mode_check_freq_map_vhbpred, i64 0, i64 0), %173 ], [ %180, %177 ]
  %179 = getelementptr inbounds i32, i32* %178, i64 1
  %180 = getelementptr inbounds i32, i32* %178, i64 2
  %181 = load i32, i32* %179, align 4
  %182 = icmp sgt i32 %181, %50
  br i1 %182, label %183, label %177

183:                                              ; preds = %177
  %184 = load i32, i32* %178, align 4
  %185 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 45, i64 19
  store i32 %184, i32* %185, align 4
  %186 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 45, i64 11
  store i32 %184, i32* %186, align 4
  %187 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 45, i64 10
  store i32 %184, i32* %187, align 8
  %188 = icmp eq i32 %5, 10
  %189 = icmp eq i32 %3, 2
  %190 = and i1 %189, %188
  %191 = select i1 %190, i32 16, i32 %50
  br label %192

192:                                              ; preds = %192, %183
  %193 = phi i32* [ getelementptr inbounds ([8 x i32], [8 x i32]* @mode_check_freq_map_new1, i64 0, i64 0), %183 ], [ %195, %192 ]
  %194 = getelementptr inbounds i32, i32* %193, i64 1
  %195 = getelementptr inbounds i32, i32* %193, i64 2
  %196 = load i32, i32* %194, align 4
  %197 = icmp sgt i32 %196, %191
  br i1 %197, label %198, label %192

198:                                              ; preds = %192
  %199 = load i32, i32* %193, align 4
  %200 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 45, i64 13
  store i32 %199, i32* %200, align 4
  br label %201

201:                                              ; preds = %201, %198
  %202 = phi i32* [ getelementptr inbounds ([14 x i32], [14 x i32]* @mode_check_freq_map_new2, i64 0, i64 0), %198 ], [ %204, %201 ]
  %203 = getelementptr inbounds i32, i32* %202, i64 1
  %204 = getelementptr inbounds i32, i32* %202, i64 2
  %205 = load i32, i32* %203, align 4
  %206 = icmp sgt i32 %205, %50
  br i1 %206, label %207, label %201

207:                                              ; preds = %201
  %208 = load i32, i32* %202, align 4
  %209 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 45, i64 15
  store i32 %208, i32* %209, align 4
  %210 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 45, i64 14
  store i32 %208, i32* %210, align 8
  br label %211

211:                                              ; preds = %211, %207
  %212 = phi i32* [ getelementptr inbounds ([10 x i32], [10 x i32]* @mode_check_freq_map_split1, i64 0, i64 0), %207 ], [ %214, %211 ]
  %213 = getelementptr inbounds i32, i32* %212, i64 1
  %214 = getelementptr inbounds i32, i32* %212, i64 2
  %215 = load i32, i32* %213, align 4
  %216 = icmp sgt i32 %215, %50
  br i1 %216, label %217, label %211

217:                                              ; preds = %211
  %218 = load i32, i32* %212, align 4
  %219 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 45, i64 16
  store i32 %218, i32* %219, align 32
  br label %220

220:                                              ; preds = %220, %217
  %221 = phi i32* [ getelementptr inbounds ([12 x i32], [12 x i32]* @mode_check_freq_map_split2, i64 0, i64 0), %217 ], [ %223, %220 ]
  %222 = getelementptr inbounds i32, i32* %221, i64 1
  %223 = getelementptr inbounds i32, i32* %221, i64 2
  %224 = load i32, i32* %222, align 4
  %225 = icmp sgt i32 %224, %50
  br i1 %225, label %226, label %220

226:                                              ; preds = %220
  %227 = load i32, i32* %221, align 4
  %228 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 45, i64 18
  store i32 %227, i32* %228, align 8
  %229 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 45, i64 17
  store i32 %227, i32* %229, align 4
  br i1 %189, label %230, label %399

230:                                              ; preds = %226
  store i32 0, i32* %22, align 4
  store i32 0, i32* %17, align 4
  store i32 1, i32* %16, align 4
  store i32 1, i32* %20, align 4
  store i32 1, i32* %13, align 4
  %231 = icmp sgt i32 %5, 0
  br i1 %231, label %232, label %385

232:                                              ; preds = %230
  store i32 0, i32* %6, align 4
  store i32 0, i32* %14, align 4
  store i32 1, i32* %23, align 4
  store i32 0, i32* %24, align 4
  store i32 1, i32* %25, align 4
  %233 = icmp sgt i32 %5, 2
  br i1 %233, label %234, label %385

234:                                              ; preds = %232
  store i32 0, i32* %16, align 4
  %235 = icmp eq i32 %5, 3
  br i1 %235, label %385, label %236

236:                                              ; preds = %234
  store i32 0, i32* %12, align 4
  store i32 1, i32* %16, align 4
  %237 = icmp sgt i32 %5, 4
  br i1 %237, label %238, label %385

238:                                              ; preds = %236
  store i32 0, i32* %16, align 4
  store i32 2, i32* %13, align 4
  store i32 0, i32* %20, align 4
  %239 = icmp sgt i32 %5, 6
  br i1 %239, label %240, label %385

240:                                              ; preds = %238
  %241 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 26
  %242 = load i32, i32* %241, align 16
  %243 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 44
  %244 = load i32, i32* %243, align 4
  %245 = icmp sgt i32 %244, 2000
  %246 = select i1 %245, i32 %244, i32 2000
  %247 = lshr i32 %246, 7
  %248 = icmp eq i32 %247, 0
  br i1 %248, label %338, label %249

249:                                              ; preds = %240
  %250 = zext i32 %247 to i64
  %251 = and i64 %250, 16777208
  %252 = add nsw i64 %251, -8
  %253 = lshr exact i64 %252, 3
  %254 = add nuw nsw i64 %253, 1
  %255 = and i64 %254, 3
  %256 = icmp ult i64 %252, 24
  br i1 %256, label %302, label %257

257:                                              ; preds = %249
  %258 = sub nsw i64 %254, %255
  br label %259

259:                                              ; preds = %259, %257
  %260 = phi i64 [ 0, %257 ], [ %299, %259 ]
  %261 = phi <4 x i32> [ zeroinitializer, %257 ], [ %297, %259 ]
  %262 = phi <4 x i32> [ zeroinitializer, %257 ], [ %298, %259 ]
  %263 = phi i64 [ %258, %257 ], [ %300, %259 ]
  %264 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 66, i64 %260
  %265 = bitcast i32* %264 to <4 x i32>*
  %266 = load <4 x i32>, <4 x i32>* %265, align 4
  %267 = getelementptr inbounds i32, i32* %264, i64 4
  %268 = bitcast i32* %267 to <4 x i32>*
  %269 = load <4 x i32>, <4 x i32>* %268, align 4
  %270 = add <4 x i32> %266, %261
  %271 = add <4 x i32> %269, %262
  %272 = or i64 %260, 8
  %273 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 66, i64 %272
  %274 = bitcast i32* %273 to <4 x i32>*
  %275 = load <4 x i32>, <4 x i32>* %274, align 4
  %276 = getelementptr inbounds i32, i32* %273, i64 4
  %277 = bitcast i32* %276 to <4 x i32>*
  %278 = load <4 x i32>, <4 x i32>* %277, align 4
  %279 = add <4 x i32> %275, %270
  %280 = add <4 x i32> %278, %271
  %281 = or i64 %260, 16
  %282 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 66, i64 %281
  %283 = bitcast i32* %282 to <4 x i32>*
  %284 = load <4 x i32>, <4 x i32>* %283, align 4
  %285 = getelementptr inbounds i32, i32* %282, i64 4
  %286 = bitcast i32* %285 to <4 x i32>*
  %287 = load <4 x i32>, <4 x i32>* %286, align 4
  %288 = add <4 x i32> %284, %279
  %289 = add <4 x i32> %287, %280
  %290 = or i64 %260, 24
  %291 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 66, i64 %290
  %292 = bitcast i32* %291 to <4 x i32>*
  %293 = load <4 x i32>, <4 x i32>* %292, align 4
  %294 = getelementptr inbounds i32, i32* %291, i64 4
  %295 = bitcast i32* %294 to <4 x i32>*
  %296 = load <4 x i32>, <4 x i32>* %295, align 4
  %297 = add <4 x i32> %293, %288
  %298 = add <4 x i32> %296, %289
  %299 = add i64 %260, 32
  %300 = add i64 %263, -4
  %301 = icmp eq i64 %300, 0
  br i1 %301, label %302, label %259, !llvm.loop !2

302:                                              ; preds = %259, %249
  %303 = phi <4 x i32> [ undef, %249 ], [ %297, %259 ]
  %304 = phi <4 x i32> [ undef, %249 ], [ %298, %259 ]
  %305 = phi i64 [ 0, %249 ], [ %299, %259 ]
  %306 = phi <4 x i32> [ zeroinitializer, %249 ], [ %297, %259 ]
  %307 = phi <4 x i32> [ zeroinitializer, %249 ], [ %298, %259 ]
  %308 = icmp eq i64 %255, 0
  br i1 %308, label %325, label %309

309:                                              ; preds = %302, %309
  %310 = phi i64 [ %322, %309 ], [ %305, %302 ]
  %311 = phi <4 x i32> [ %320, %309 ], [ %306, %302 ]
  %312 = phi <4 x i32> [ %321, %309 ], [ %307, %302 ]
  %313 = phi i64 [ %323, %309 ], [ %255, %302 ]
  %314 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 66, i64 %310
  %315 = bitcast i32* %314 to <4 x i32>*
  %316 = load <4 x i32>, <4 x i32>* %315, align 4
  %317 = getelementptr inbounds i32, i32* %314, i64 4
  %318 = bitcast i32* %317 to <4 x i32>*
  %319 = load <4 x i32>, <4 x i32>* %318, align 4
  %320 = add <4 x i32> %316, %311
  %321 = add <4 x i32> %319, %312
  %322 = add i64 %310, 8
  %323 = add i64 %313, -1
  %324 = icmp eq i64 %323, 0
  br i1 %324, label %325, label %309, !llvm.loop !4

325:                                              ; preds = %309, %302
  %326 = phi <4 x i32> [ %303, %302 ], [ %320, %309 ]
  %327 = phi <4 x i32> [ %304, %302 ], [ %321, %309 ]
  %328 = add <4 x i32> %327, %326
  %329 = shufflevector <4 x i32> %328, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %330 = add <4 x i32> %328, %329
  %331 = shufflevector <4 x i32> %330, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %332 = add <4 x i32> %330, %331
  %333 = extractelement <4 x i32> %332, i32 0
  %334 = icmp eq i64 %251, %250
  br i1 %334, label %335, label %345

335:                                              ; preds = %345, %325
  %336 = phi i32 [ %333, %325 ], [ %350, %345 ]
  %337 = icmp ult i32 %246, 131072
  br i1 %337, label %338, label %368

338:                                              ; preds = %240, %335
  %339 = phi i32 [ %336, %335 ], [ 0, %240 ]
  %340 = phi i32 [ %247, %335 ], [ 0, %240 ]
  %341 = add nsw i32 %5, -6
  %342 = sub i32 %242, %339
  %343 = mul i32 %342, %341
  %344 = zext i32 %340 to i64
  br label %353

345:                                              ; preds = %325, %345
  %346 = phi i64 [ %351, %345 ], [ %251, %325 ]
  %347 = phi i32 [ %350, %345 ], [ %333, %325 ]
  %348 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 66, i64 %346
  %349 = load i32, i32* %348, align 4
  %350 = add i32 %349, %347
  %351 = add nuw nsw i64 %346, 1
  %352 = icmp ult i64 %351, %250
  br i1 %352, label %345, label %335, !llvm.loop !6

353:                                              ; preds = %362, %338
  %354 = phi i64 [ %344, %338 ], [ %363, %362 ]
  %355 = phi i32 [ 0, %338 ], [ %359, %362 ]
  %356 = phi i32 [ %340, %338 ], [ %364, %362 ]
  %357 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 66, i64 %354
  %358 = load i32, i32* %357, align 4
  %359 = add i32 %358, %355
  %360 = mul i32 %359, 10
  %361 = icmp ult i32 %360, %343
  br i1 %361, label %362, label %366

362:                                              ; preds = %353
  %363 = add nuw nsw i64 %354, 1
  %364 = add nuw nsw i32 %356, 1
  %365 = icmp eq i64 %363, 1024
  br i1 %365, label %368, label %353

366:                                              ; preds = %353
  %367 = trunc i64 %354 to i32
  br label %368

368:                                              ; preds = %362, %366, %335
  %369 = phi i32 [ %247, %335 ], [ %367, %366 ], [ %364, %362 ]
  %370 = shl i32 %369, 7
  %371 = add i32 %370, -128
  %372 = icmp sgt i32 %371, 2000
  %373 = select i1 %372, i32 %371, i32 2000
  %374 = icmp ugt i32 %42, 1
  br i1 %374, label %375, label %382

375:                                              ; preds = %368
  store i32 %373, i32* %106, align 4
  %376 = lshr exact i32 %373, 1
  store i32 %376, i32* %52, align 4
  store i32 %376, i32* %51, align 4
  %377 = icmp eq i32 %42, 2
  br i1 %377, label %382, label %378

378:                                              ; preds = %375
  %379 = shl nuw i32 %373, 1
  store i32 %379, i32* %116, align 4
  store i32 %373, i32* %65, align 4
  store i32 %373, i32* %63, align 4
  %380 = icmp ugt i32 %42, 3
  br i1 %380, label %381, label %382

381:                                              ; preds = %378
  store i32 %379, i32* %115, align 4
  store i32 %373, i32* %64, align 4
  store i32 %373, i32* %62, align 4
  br label %382

382:                                              ; preds = %375, %368, %378, %381
  store i32 0, i32* %28, align 4
  %383 = icmp sgt i32 %5, 8
  br i1 %383, label %384, label %385

384:                                              ; preds = %382
  store i32 0, i32* %18, align 4
  br label %385

385:                                              ; preds = %234, %230, %232, %236, %238, %384, %382
  %386 = phi i32 [ 1, %234 ], [ 1, %230 ], [ 1, %232 ], [ 1, %236 ], [ 2, %238 ], [ 2, %384 ], [ 2, %382 ]
  %387 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 61
  %388 = load i32, i32* %387, align 16
  %389 = icmp ne i32 %388, 0
  %390 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 43
  %391 = icmp sgt i32 %5, 13
  %392 = or i1 %391, %389
  %393 = zext i1 %392 to i32
  store i32 %393, i32* %390, align 16
  %394 = icmp sgt i32 %5, 14
  br i1 %394, label %395, label %396

395:                                              ; preds = %385
  store i32 0, i32* %19, align 4
  br label %396

396:                                              ; preds = %395, %385
  %397 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 66, i64 0
  %398 = bitcast i32* %397 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 16 %398, i8 0, i64 4096, i1 false)
  br label %399

399:                                              ; preds = %226, %396
  %400 = phi i32 [ 1, %226 ], [ %386, %396 ]
  %401 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 119
  %402 = load i32, i32* %401, align 8
  %403 = icmp eq i32 %402, 1
  br i1 %403, label %404, label %405

404:                                              ; preds = %399
  store i32 0, i32* %6, align 4
  store i32 0, i32* %22, align 4
  store i32 0, i32* %14, align 4
  br label %405

405:                                              ; preds = %404, %399
  %406 = icmp eq i32 %400, 1
  br i1 %406, label %407, label %413

407:                                              ; preds = %405
  %408 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 14
  %409 = load i32, i32* %408, align 4
  %410 = sext i32 %409 to i64
  %411 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 11, i64 %410, i32 4
  %412 = load i32, i32* %411, align 16
  tail call void @vp8_init3smotion_compensation(%struct.macroblock* %31, i32 %412) #10
  br label %413

413:                                              ; preds = %405, %407
  %414 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 67
  %415 = bitcast void (i16*, i16*, i32)** %414 to <2 x void (i16*, i16*, i32)*>*
  store <2 x void (i16*, i16*, i32)*> <void (i16*, i16*, i32)* @vp8_short_fdct4x4_sse2, void (i16*, i16*, i32)* @vp8_short_fdct8x4_sse2>, <2 x void (i16*, i16*, i32)*>* %415, align 16
  %416 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 69
  store void (i16*, i16*, i32)* @vp8_short_walsh4x4_sse2, void (i16*, i16*, i32)** %416, align 32
  %417 = load i32, i32* %6, align 8
  %418 = icmp eq i32 %417, 0
  %419 = load i64, i64* bitcast (void (%struct.block*, %struct.blockd*)** @vp8_fast_quantize_b to i64*), align 8
  %420 = load i64, i64* bitcast (void (%struct.block*, %struct.blockd*)** @vp8_regular_quantize_b to i64*), align 8
  %421 = select i1 %418, i64 %419, i64 %420
  %422 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 70
  %423 = bitcast void (%struct.block*, %struct.blockd*)** %422 to i64*
  store i64 %421, i64* %423, align 8
  %424 = icmp eq i32 %417, %7
  br i1 %424, label %426, label %425

425:                                              ; preds = %413
  tail call void @vp8cx_init_quantizer(%struct.VP8_COMP* %0) #10
  br label %426

426:                                              ; preds = %413, %425
  %427 = load i32, i32* %20, align 8
  %428 = icmp eq i32 %427, 1
  br i1 %428, label %429, label %431

429:                                              ; preds = %426
  %430 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 173
  store i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, %union.int_mv*, i32, %struct.variance_vtable*, i32**, i32*, i32*)* @vp8_find_best_sub_pixel_step_iteratively, i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, %union.int_mv*, i32, %struct.variance_vtable*, i32**, i32*, i32*)** %430, align 8
  br label %442

431:                                              ; preds = %426
  %432 = load i32, i32* %18, align 16
  %433 = icmp eq i32 %432, 0
  br i1 %433, label %436, label %434

434:                                              ; preds = %431
  %435 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 173
  store i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, %union.int_mv*, i32, %struct.variance_vtable*, i32**, i32*, i32*)* @vp8_find_best_sub_pixel_step, i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, %union.int_mv*, i32, %struct.variance_vtable*, i32**, i32*, i32*)** %435, align 8
  br label %442

436:                                              ; preds = %431
  %437 = load i32, i32* %19, align 4
  %438 = icmp eq i32 %437, 0
  %439 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 173
  br i1 %438, label %441, label %440

440:                                              ; preds = %436
  store i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, %union.int_mv*, i32, %struct.variance_vtable*, i32**, i32*, i32*)* @vp8_find_best_half_pixel_step, i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, %union.int_mv*, i32, %struct.variance_vtable*, i32**, i32*, i32*)** %439, align 8
  br label %442

441:                                              ; preds = %436
  store i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, %union.int_mv*, i32, %struct.variance_vtable*, i32**, i32*, i32*)* @vp8_skip_fractional_mv_step, i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, %union.int_mv*, i32, %struct.variance_vtable*, i32**, i32*, i32*)** %439, align 8
  br label %442

442:                                              ; preds = %434, %441, %440, %429
  %443 = load i32, i32* %22, align 4
  %444 = icmp eq i32 %443, 1
  br i1 %444, label %445, label %448

445:                                              ; preds = %442
  %446 = load i32, i32* %401, align 8
  %447 = icmp eq i32 %446, 1
  br i1 %447, label %448, label %449

448:                                              ; preds = %445, %442
  br label %449

449:                                              ; preds = %445, %448
  %450 = phi i32 [ 0, %448 ], [ 1, %445 ]
  %451 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 39
  store i32 %450, i32* %451, align 32
  %452 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 33
  %453 = load i32, i32* %452, align 4
  %454 = icmp eq i32 %453, 0
  br i1 %454, label %457, label %455

455:                                              ; preds = %449
  %456 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 173
  store i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, %union.int_mv*, i32, %struct.variance_vtable*, i32**, i32*, i32*)* @vp8_skip_fractional_mv_step, i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, %union.int_mv*, i32, %struct.variance_vtable*, i32**, i32*, i32*)** %456, align 8
  br label %457

457:                                              ; preds = %449, %455
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare void @vp8_init3smotion_compensation(%struct.macroblock*, i32) local_unnamed_addr #1

declare void @vp8_short_fdct8x4_sse2(i16*, i16*, i32) #1

declare void @vp8_short_fdct4x4_sse2(i16*, i16*, i32) #1

declare void @vp8_short_walsh4x4_sse2(i16*, i16*, i32) #1

declare void @vp8cx_init_quantizer(%struct.VP8_COMP*) local_unnamed_addr #1

declare i32 @vp8_find_best_sub_pixel_step_iteratively(%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, %union.int_mv*, i32, %struct.variance_vtable*, i32**, i32*, i32*) #1

declare i32 @vp8_find_best_sub_pixel_step(%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, %union.int_mv*, i32, %struct.variance_vtable*, i32**, i32*, i32*) #1

declare i32 @vp8_find_best_half_pixel_step(%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, %union.int_mv*, i32, %struct.variance_vtable*, i32**, i32*, i32*) #1

declare i32 @vp8_skip_fractional_mv_step(%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, %union.int_mv*, i32, %struct.variance_vtable*, i32**, i32*, i32*) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @vp8_alloc_compressor_data(%struct.VP8_COMP*) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19
  %3 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 5
  %4 = load i32, i32* %3, align 16
  %5 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 6
  %6 = load i32, i32* %5, align 4
  %7 = tail call i32 @vp8_alloc_frame_buffers(%struct.VP8Common* %2, i32 %4, i32 %6) #10
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %1
  %10 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %2, i64 0, i32 0
  tail call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %10, i32 2, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str, i64 0, i64 0)) #10
  br label %11

11:                                               ; preds = %1, %9
  %12 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 9
  %13 = bitcast %struct.PARTITION_INFO** %12 to i8**
  %14 = load i8*, i8** %13, align 16
  tail call void @vpx_free(i8* %14) #10
  %15 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 28
  %16 = load i32, i32* %15, align 8
  %17 = add nsw i32 %16, 1
  %18 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 27
  %19 = load i32, i32* %18, align 4
  %20 = add nsw i32 %19, 1
  %21 = mul nsw i32 %20, %17
  %22 = sext i32 %21 to i64
  %23 = tail call i8* @vpx_calloc(i64 %22, i64 132) #10
  store i8* %23, i8** %13, align 16
  %24 = icmp eq i8* %23, null
  br i1 %24, label %33, label %25

25:                                               ; preds = %11
  %26 = bitcast i8* %23 to %struct.PARTITION_INFO*
  %27 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 29
  %28 = load i32, i32* %27, align 4
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds %struct.PARTITION_INFO, %struct.PARTITION_INFO* %26, i64 %29
  %31 = getelementptr inbounds %struct.PARTITION_INFO, %struct.PARTITION_INFO* %30, i64 1
  %32 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 8
  store %struct.PARTITION_INFO* %31, %struct.PARTITION_INFO** %32, align 8
  br label %35

33:                                               ; preds = %11
  %34 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %2, i64 0, i32 0
  tail call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %34, i32 2, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.1, i64 0, i64 0)) #10
  br label %35

35:                                               ; preds = %25, %33
  %36 = and i32 %4, 15
  %37 = icmp eq i32 %36, 0
  %38 = sub nuw nsw i32 16, %36
  %39 = select i1 %37, i32 0, i32 %38
  %40 = add nsw i32 %39, %4
  %41 = and i32 %6, 15
  %42 = icmp eq i32 %41, 0
  %43 = sub nuw nsw i32 16, %41
  %44 = select i1 %42, i32 0, i32 %43
  %45 = add nsw i32 %44, %6
  %46 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 37
  %47 = tail call i32 @vp8_yv12_alloc_frame_buffer(%struct.yv12_buffer_config* %46, i32 %40, i32 %45, i32 32) #10
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %51, label %49

49:                                               ; preds = %35
  %50 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %2, i64 0, i32 0
  tail call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %50, i32 2, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.2, i64 0, i64 0)) #10
  br label %51

51:                                               ; preds = %35, %49
  %52 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 28
  %53 = tail call i32 @vp8_yv12_alloc_frame_buffer(%struct.yv12_buffer_config* %52, i32 %40, i32 %45, i32 32) #10
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %57, label %55

55:                                               ; preds = %51
  %56 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %2, i64 0, i32 0
  tail call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %56, i32 2, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.3, i64 0, i64 0)) #10
  br label %57

57:                                               ; preds = %51, %55
  %58 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 38
  %59 = bitcast %struct.TOKENEXTRA** %58 to i8**
  %60 = load i8*, i8** %59, align 32
  tail call void @vpx_free(i8* %60) #10
  %61 = load i32, i32* %18, align 4
  %62 = load i32, i32* %15, align 8
  %63 = mul i32 %61, 384
  %64 = mul i32 %63, %62
  %65 = zext i32 %64 to i64
  %66 = tail call i8* @vpx_calloc(i64 %65, i64 16) #10
  store i8* %66, i8** %59, align 32
  %67 = icmp eq i8* %66, null
  br i1 %67, label %68, label %70

68:                                               ; preds = %57
  %69 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %2, i64 0, i32 0
  tail call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %69, i32 2, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.4, i64 0, i64 0)) #10
  br label %70

70:                                               ; preds = %57, %68
  %71 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 131
  store i32 0, i32* %71, align 4
  %72 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 190
  %73 = load i8*, i8** %72, align 16
  tail call void @vpx_free(i8* %73) #10
  %74 = load i32, i32* %18, align 4
  %75 = load i32, i32* %15, align 8
  %76 = mul nsw i32 %75, %74
  %77 = sext i32 %76 to i64
  %78 = tail call i8* @vpx_calloc(i64 1, i64 %77) #10
  store i8* %78, i8** %72, align 16
  %79 = icmp eq i8* %78, null
  br i1 %79, label %80, label %82

80:                                               ; preds = %70
  %81 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %2, i64 0, i32 0
  tail call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %81, i32 2, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.5, i64 0, i64 0)) #10
  br label %82

82:                                               ; preds = %70, %80
  %83 = load i32, i32* %18, align 4
  %84 = load i32, i32* %15, align 8
  %85 = mul nsw i32 %84, %83
  %86 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 191
  store i32 %85, i32* %86, align 8
  %87 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 189
  %88 = bitcast i32** %87 to i8**
  %89 = load i8*, i8** %88, align 8
  tail call void @vpx_free(i8* %89) #10
  %90 = load i32, i32* %18, align 4
  %91 = load i32, i32* %15, align 8
  %92 = mul nsw i32 %91, %90
  %93 = sext i32 %92 to i64
  %94 = tail call i8* @vpx_calloc(i64 4, i64 %93) #10
  store i8* %94, i8** %88, align 8
  %95 = icmp eq i8* %94, null
  br i1 %95, label %96, label %98

96:                                               ; preds = %82
  %97 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %2, i64 0, i32 0
  tail call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %97, i32 2, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.6, i64 0, i64 0)) #10
  br label %98

98:                                               ; preds = %82, %96
  %99 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 193
  %100 = bitcast %union.int_mv** %99 to i8**
  %101 = load i8*, i8** %100, align 32
  tail call void @vpx_free(i8* %101) #10
  %102 = load i32, i32* %18, align 4
  %103 = add nsw i32 %102, 2
  %104 = load i32, i32* %15, align 8
  %105 = add nsw i32 %104, 2
  %106 = mul nsw i32 %105, %103
  %107 = sext i32 %106 to i64
  %108 = tail call i8* @vpx_calloc(i64 %107, i64 4) #10
  store i8* %108, i8** %100, align 32
  %109 = icmp eq i8* %108, null
  br i1 %109, label %110, label %112

110:                                              ; preds = %98
  %111 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %2, i64 0, i32 0
  tail call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %111, i32 2, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.7, i64 0, i64 0)) #10
  br label %112

112:                                              ; preds = %98, %110
  %113 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 194
  %114 = bitcast i32** %113 to i8**
  %115 = load i8*, i8** %114, align 8
  tail call void @vpx_free(i8* %115) #10
  %116 = load i32, i32* %18, align 4
  %117 = add nsw i32 %116, 2
  %118 = load i32, i32* %15, align 8
  %119 = add nsw i32 %118, 2
  %120 = mul nsw i32 %119, %117
  %121 = sext i32 %120 to i64
  %122 = tail call i8* @vpx_calloc(i64 %121, i64 4) #10
  store i8* %122, i8** %114, align 8
  %123 = icmp eq i8* %122, null
  br i1 %123, label %124, label %126

124:                                              ; preds = %112
  %125 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %2, i64 0, i32 0
  tail call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %125, i32 2, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.8, i64 0, i64 0)) #10
  br label %126

126:                                              ; preds = %112, %124
  %127 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 195
  %128 = bitcast i32** %127 to i8**
  %129 = load i8*, i8** %128, align 16
  tail call void @vpx_free(i8* %129) #10
  %130 = load i32, i32* %18, align 4
  %131 = add nsw i32 %130, 2
  %132 = load i32, i32* %15, align 8
  %133 = add nsw i32 %132, 2
  %134 = mul nsw i32 %133, %131
  %135 = sext i32 %134 to i64
  %136 = tail call i8* @vpx_calloc(i64 %135, i64 4) #10
  store i8* %136, i8** %128, align 16
  %137 = icmp eq i8* %136, null
  br i1 %137, label %138, label %140

138:                                              ; preds = %126
  %139 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %2, i64 0, i32 0
  tail call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %139, i32 2, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.9, i64 0, i64 0)) #10
  br label %140

140:                                              ; preds = %126, %138
  %141 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 134
  %142 = load i8*, i8** %141, align 16
  tail call void @vpx_free(i8* %142) #10
  %143 = load i32, i32* %18, align 4
  %144 = load i32, i32* %15, align 8
  %145 = mul nsw i32 %144, %143
  %146 = sext i32 %145 to i64
  %147 = tail call i8* @vpx_calloc(i64 %146, i64 1) #10
  store i8* %147, i8** %141, align 16
  %148 = icmp eq i8* %147, null
  br i1 %148, label %149, label %151

149:                                              ; preds = %140
  %150 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %2, i64 0, i32 0
  tail call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %150, i32 2, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.10, i64 0, i64 0)) #10
  br label %151

151:                                              ; preds = %140, %149
  %152 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 141
  store i32 0, i32* %152, align 4
  %153 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 137
  %154 = load i8*, i8** %153, align 16
  tail call void @vpx_free(i8* %154) #10
  %155 = load i32, i32* %18, align 4
  %156 = load i32, i32* %15, align 8
  %157 = mul nsw i32 %156, %155
  %158 = sext i32 %157 to i64
  %159 = tail call i8* @vpx_calloc(i64 %158, i64 1) #10
  store i8* %159, i8** %153, align 16
  %160 = icmp eq i8* %159, null
  br i1 %160, label %161, label %164

161:                                              ; preds = %151
  %162 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %2, i64 0, i32 0
  tail call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %162, i32 2, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.11, i64 0, i64 0)) #10
  %163 = load i8*, i8** %153, align 16
  br label %164

164:                                              ; preds = %151, %161
  %165 = phi i8* [ %159, %151 ], [ %163, %161 ]
  %166 = load i32, i32* %18, align 4
  %167 = load i32, i32* %15, align 8
  %168 = mul nsw i32 %167, %166
  %169 = sext i32 %168 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %165, i8 1, i64 %169, i1 false)
  %170 = icmp slt i32 %40, 640
  br i1 %170, label %171, label %173

171:                                              ; preds = %164
  %172 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 156
  store i32 1, i32* %172, align 8
  br label %182

173:                                              ; preds = %164
  %174 = icmp slt i32 %40, 1281
  br i1 %174, label %175, label %177

175:                                              ; preds = %173
  %176 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 156
  store i32 4, i32* %176, align 8
  br label %182

177:                                              ; preds = %173
  %178 = icmp slt i32 %40, 2561
  %179 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 156
  br i1 %178, label %180, label %181

180:                                              ; preds = %177
  store i32 8, i32* %179, align 8
  br label %182

181:                                              ; preds = %177
  store i32 16, i32* %179, align 8
  br label %182

182:                                              ; preds = %175, %181, %180, %171
  %183 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 42
  %184 = load i32, i32* %183, align 4
  %185 = icmp sgt i32 %184, 1
  br i1 %185, label %186, label %208

186:                                              ; preds = %182
  %187 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 155
  %188 = bitcast %struct.vpx_atomic_int** %187 to i8**
  %189 = load i8*, i8** %188, align 16
  tail call void @vpx_free(i8* %189) #10
  %190 = load i32, i32* %18, align 4
  %191 = sext i32 %190 to i64
  %192 = shl nsw i64 %191, 2
  %193 = tail call i8* @vpx_malloc(i64 %192) #10
  store i8* %193, i8** %188, align 16
  %194 = icmp eq i8* %193, null
  br i1 %194, label %195, label %197

195:                                              ; preds = %186
  %196 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %2, i64 0, i32 0
  tail call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %196, i32 2, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.12, i64 0, i64 0)) #10
  br label %197

197:                                              ; preds = %186, %195
  %198 = load i32, i32* %18, align 4
  %199 = icmp sgt i32 %198, 0
  br i1 %199, label %200, label %208

200:                                              ; preds = %197, %200
  %201 = phi i64 [ %204, %200 ], [ 0, %197 ]
  %202 = load %struct.vpx_atomic_int*, %struct.vpx_atomic_int** %187, align 16
  %203 = getelementptr inbounds %struct.vpx_atomic_int, %struct.vpx_atomic_int* %202, i64 %201, i32 0
  store volatile i32 0, i32* %203, align 4
  %204 = add nuw nsw i64 %201, 1
  %205 = load i32, i32* %18, align 4
  %206 = sext i32 %205 to i64
  %207 = icmp slt i64 %204, %206
  br i1 %207, label %200, label %208

208:                                              ; preds = %200, %197, %182
  %209 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 169
  %210 = bitcast %struct.TOKENLIST** %209 to i8**
  %211 = load i8*, i8** %210, align 8
  tail call void @vpx_free(i8* %211) #10
  %212 = load i32, i32* %18, align 4
  %213 = sext i32 %212 to i64
  %214 = shl nsw i64 %213, 4
  %215 = tail call i8* @vpx_malloc(i64 %214) #10
  store i8* %215, i8** %210, align 8
  %216 = icmp eq i8* %215, null
  br i1 %216, label %217, label %219

217:                                              ; preds = %208
  %218 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %2, i64 0, i32 0
  tail call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %218, i32 2, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.13, i64 0, i64 0)) #10
  br label %219

219:                                              ; preds = %208, %217
  %220 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 5
  %221 = load i32, i32* %220, align 8
  %222 = icmp sgt i32 %221, 0
  br i1 %222, label %223, label %232

223:                                              ; preds = %219
  %224 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 200
  tail call void @vp8_denoiser_free(%struct.vp8_denoiser* %224) #10
  %225 = load i32, i32* %18, align 4
  %226 = load i32, i32* %15, align 8
  %227 = load i32, i32* %220, align 8
  %228 = tail call i32 @vp8_denoiser_allocate(%struct.vp8_denoiser* %224, i32 %40, i32 %45, i32 %225, i32 %226, i32 %227) #10
  %229 = icmp eq i32 %228, 0
  br i1 %229, label %232, label %230

230:                                              ; preds = %223
  %231 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %2, i64 0, i32 0
  tail call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %231, i32 2, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.14, i64 0, i64 0)) #10
  br label %232

232:                                              ; preds = %223, %230, %219
  ret void
}

declare i32 @vp8_alloc_frame_buffers(%struct.VP8Common*, i32, i32) local_unnamed_addr #1

declare void @vpx_internal_error(%struct.vpx_internal_error_info*, i32, i8*, ...) local_unnamed_addr #1

declare i32 @vp8_yv12_alloc_frame_buffer(%struct.yv12_buffer_config*, i32, i32, i32) local_unnamed_addr #1

declare void @vpx_free(i8*) local_unnamed_addr #1

declare i8* @vpx_calloc(i64, i64) local_unnamed_addr #1

declare i8* @vpx_malloc(i64) local_unnamed_addr #1

declare void @vp8_denoiser_free(%struct.vp8_denoiser*) local_unnamed_addr #1

declare i32 @vp8_denoiser_allocate(%struct.vp8_denoiser*, i32, i32, i32, i32, i32) local_unnamed_addr #1

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @vp8_reverse_trans(i32) local_unnamed_addr #3 {
  br label %2

2:                                                ; preds = %25, %1
  %3 = phi i64 [ 0, %1 ], [ %26, %25 ]
  %4 = getelementptr inbounds [64 x i32], [64 x i32]* @q_trans, i64 0, i64 %3
  %5 = load i32, i32* %4, align 16
  %6 = icmp slt i32 %5, %0
  br i1 %6, label %7, label %12

7:                                                ; preds = %2
  %8 = or i64 %3, 1
  %9 = getelementptr inbounds [64 x i32], [64 x i32]* @q_trans, i64 0, i64 %8
  %10 = load i32, i32* %9, align 4
  %11 = icmp slt i32 %10, %0
  br i1 %11, label %15, label %12

12:                                               ; preds = %25, %20, %15, %7, %2
  %13 = phi i64 [ %3, %2 ], [ %8, %7 ], [ %16, %15 ], [ %21, %20 ], [ %21, %25 ]
  %14 = trunc i64 %13 to i32
  ret i32 %14

15:                                               ; preds = %7
  %16 = or i64 %3, 2
  %17 = getelementptr inbounds [64 x i32], [64 x i32]* @q_trans, i64 0, i64 %16
  %18 = load i32, i32* %17, align 8
  %19 = icmp slt i32 %18, %0
  br i1 %19, label %20, label %12

20:                                               ; preds = %15
  %21 = or i64 %3, 3
  %22 = getelementptr inbounds [64 x i32], [64 x i32]* @q_trans, i64 0, i64 %21
  %23 = load i32, i32* %22, align 4
  %24 = icmp slt i32 %23, %0
  br i1 %24, label %25, label %12

25:                                               ; preds = %20
  %26 = add nuw nsw i64 %3, 4
  %27 = icmp eq i64 %26, 64
  br i1 %27, label %12, label %2
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vp8_new_framerate(%struct.VP8_COMP* nocapture, double) local_unnamed_addr #4 {
  %3 = fcmp olt double %1, 1.000000e-01
  %4 = select i1 %3, double 3.000000e+01, double %1
  %5 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 84
  store double %4, double* %5, align 16
  %6 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 74
  store double %4, double* %6, align 16
  %7 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 4
  %8 = load i32, i32* %7, align 4
  %9 = uitofp i32 %8 to double
  %10 = fdiv double %9, %4
  %11 = fptosi double %10 to i32
  %12 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 70
  store i32 %11, i32* %12, align 4
  %13 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 71
  store i32 %11, i32* %13, align 32
  %14 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 35
  %15 = load i32, i32* %14, align 8
  %16 = mul nsw i32 %15, %11
  %17 = sdiv i32 %16, 100
  %18 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 72
  store i32 %17, i32* %18, align 4
  %19 = fmul double %4, 5.000000e-01
  %20 = fptosi double %19 to i32
  %21 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 65
  %22 = icmp sgt i32 %20, 10
  %23 = select i1 %22, i32 %20, i32 10
  %24 = add nuw nsw i32 %23, 2
  store i32 %24, i32* %21, align 4
  %25 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 41
  %26 = load i32, i32* %25, align 16
  %27 = lshr i32 %26, 1
  %28 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 186, i32 23
  store i32 %27, i32* %28, align 8
  %29 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 37
  %30 = load i32, i32* %29, align 8
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %45, label %32

32:                                               ; preds = %2
  %33 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 15
  %34 = load i32, i32* %33, align 8
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %45, label %36

36:                                               ; preds = %32
  %37 = icmp slt i32 %24, %34
  br i1 %37, label %40, label %38

38:                                               ; preds = %36
  %39 = add nsw i32 %34, -1
  store i32 %39, i32* %21, align 4
  br label %40

40:                                               ; preds = %36, %38
  %41 = phi i32 [ %24, %36 ], [ %39, %38 ]
  %42 = icmp slt i32 %27, %34
  br i1 %42, label %45, label %43

43:                                               ; preds = %40
  %44 = add nsw i32 %34, -1
  store i32 %44, i32* %28, align 8
  br label %45

45:                                               ; preds = %40, %32, %2, %43
  %46 = phi i32 [ %27, %40 ], [ %27, %32 ], [ %27, %2 ], [ %44, %43 ]
  %47 = phi i32 [ %41, %40 ], [ %24, %32 ], [ %24, %2 ], [ %41, %43 ]
  %48 = icmp sgt i32 %47, %46
  br i1 %48, label %49, label %50

49:                                               ; preds = %45
  store i32 %46, i32* %21, align 4
  br label %50

50:                                               ; preds = %49, %45
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vp8_change_config(%struct.VP8_COMP*, %struct.VP8_CONFIG* readonly) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19
  %4 = icmp eq %struct.VP8_COMP* %0, null
  %5 = icmp eq %struct.VP8_CONFIG* %1, null
  %6 = or i1 %4, %5
  br i1 %6, label %596, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 61
  %9 = load i32, i32* %8, align 16
  %10 = getelementptr inbounds %struct.VP8_CONFIG, %struct.VP8_CONFIG* %1, i64 0, i32 0
  %11 = load i32, i32* %10, align 8
  %12 = icmp eq i32 %9, %11
  br i1 %12, label %14, label %13

13:                                               ; preds = %7
  store i32 %11, i32* %8, align 16
  tail call void @vp8_setup_version(%struct.VP8Common* %3) #10
  br label %14

14:                                               ; preds = %7, %13
  %15 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21
  %16 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 1
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 2
  %19 = load i32, i32* %18, align 8
  %20 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 52
  %21 = load i32, i32* %20, align 4
  %22 = bitcast %struct.VP8_CONFIG* %15 to i8*
  %23 = bitcast %struct.VP8_CONFIG* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %22, i8* nonnull align 8 %23, i64 480, i1 false)
  %24 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 11
  %25 = load i32, i32* %24, align 8
  switch i32 %25, label %65 [
    i32 0, label %26
    i32 1, label %36
    i32 2, label %46
    i32 3, label %49
    i32 4, label %52
    i32 5, label %62
  ]

26:                                               ; preds = %14
  %27 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 119
  store i32 0, i32* %27, align 8
  %28 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 114
  store i32 2, i32* %28, align 4
  %29 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 7
  %30 = load i32, i32* %29, align 8
  %31 = icmp slt i32 %30, -16
  br i1 %31, label %32, label %33

32:                                               ; preds = %26
  store i32 -16, i32* %29, align 8
  br label %69

33:                                               ; preds = %26
  %34 = icmp sgt i32 %30, 16
  br i1 %34, label %35, label %69

35:                                               ; preds = %33
  store i32 16, i32* %29, align 8
  br label %69

36:                                               ; preds = %14
  %37 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 119
  store i32 0, i32* %37, align 8
  %38 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 114
  store i32 1, i32* %38, align 4
  %39 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 7
  %40 = load i32, i32* %39, align 8
  %41 = icmp slt i32 %40, -5
  br i1 %41, label %42, label %43

42:                                               ; preds = %36
  store i32 -5, i32* %39, align 8
  br label %69

43:                                               ; preds = %36
  %44 = icmp sgt i32 %40, 5
  br i1 %44, label %45, label %69

45:                                               ; preds = %43
  store i32 5, i32* %39, align 8
  br label %69

46:                                               ; preds = %14
  %47 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 119
  store i32 0, i32* %47, align 8
  %48 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 114
  store i32 0, i32* %48, align 4
  br label %69

49:                                               ; preds = %14
  %50 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 119
  store i32 1, i32* %50, align 8
  %51 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 114
  store i32 1, i32* %51, align 4
  br label %71

52:                                               ; preds = %14
  %53 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 119
  store i32 2, i32* %53, align 8
  %54 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 114
  store i32 1, i32* %54, align 4
  %55 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 7
  %56 = load i32, i32* %55, align 8
  %57 = icmp slt i32 %56, -5
  br i1 %57, label %58, label %59

58:                                               ; preds = %52
  store i32 -5, i32* %55, align 8
  br label %71

59:                                               ; preds = %52
  %60 = icmp sgt i32 %56, 5
  br i1 %60, label %61, label %71

61:                                               ; preds = %59
  store i32 5, i32* %55, align 8
  br label %71

62:                                               ; preds = %14
  %63 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 119
  store i32 2, i32* %63, align 8
  %64 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 114
  store i32 0, i32* %64, align 4
  br label %71

65:                                               ; preds = %14
  %66 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 119
  %67 = load i32, i32* %66, align 8
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %69, label %71

69:                                               ; preds = %46, %35, %33, %45, %43, %32, %42, %65
  %70 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 117
  store i32 1, i32* %70, align 32
  br label %71

71:                                               ; preds = %49, %62, %61, %59, %58, %69, %65
  %72 = getelementptr inbounds %struct.VP8_CONFIG, %struct.VP8_CONFIG* %1, i64 0, i32 26
  %73 = load i32, i32* %72, align 4
  %74 = sext i32 %73 to i64
  %75 = getelementptr inbounds [64 x i32], [64 x i32]* @q_trans, i64 0, i64 %74
  %76 = load i32, i32* %75, align 4
  %77 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 26
  store i32 %76, i32* %77, align 4
  %78 = getelementptr inbounds %struct.VP8_CONFIG, %struct.VP8_CONFIG* %1, i64 0, i32 27
  %79 = load i32, i32* %78, align 8
  %80 = sext i32 %79 to i64
  %81 = getelementptr inbounds [64 x i32], [64 x i32]* @q_trans, i64 0, i64 %80
  %82 = load i32, i32* %81, align 4
  %83 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 27
  store i32 %82, i32* %83, align 8
  %84 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 28
  %85 = load i32, i32* %84, align 4
  %86 = sext i32 %85 to i64
  %87 = getelementptr inbounds [64 x i32], [64 x i32]* @q_trans, i64 0, i64 %86
  %88 = load i32, i32* %87, align 4
  store i32 %88, i32* %84, align 4
  %89 = getelementptr inbounds %struct.VP8_CONFIG, %struct.VP8_CONFIG* %1, i64 0, i32 25
  %90 = load i32, i32* %89, align 8
  %91 = icmp sgt i32 %90, -1
  br i1 %91, label %92, label %132

92:                                               ; preds = %71
  %93 = load i32, i32* %72, align 4
  %94 = icmp slt i32 %93, 0
  br i1 %94, label %99, label %95

95:                                               ; preds = %92
  %96 = sext i32 %93 to i64
  %97 = getelementptr inbounds [64 x i32], [64 x i32]* @q_trans, i64 0, i64 %96
  %98 = load i32, i32* %97, align 4
  br label %99

99:                                               ; preds = %92, %95
  %100 = phi i32 [ %98, %95 ], [ 0, %92 ]
  %101 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 25
  store i32 %100, i32* %101, align 8
  %102 = getelementptr inbounds %struct.VP8_CONFIG, %struct.VP8_CONFIG* %1, i64 0, i32 39
  %103 = load i32, i32* %102, align 8
  %104 = icmp slt i32 %103, 0
  br i1 %104, label %109, label %105

105:                                              ; preds = %99
  %106 = sext i32 %103 to i64
  %107 = getelementptr inbounds [64 x i32], [64 x i32]* @q_trans, i64 0, i64 %106
  %108 = load i32, i32* %107, align 4
  br label %109

109:                                              ; preds = %99, %105
  %110 = phi i32 [ %108, %105 ], [ 0, %99 ]
  %111 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 39
  store i32 %110, i32* %111, align 8
  %112 = getelementptr inbounds %struct.VP8_CONFIG, %struct.VP8_CONFIG* %1, i64 0, i32 40
  %113 = load i32, i32* %112, align 4
  %114 = icmp slt i32 %113, 0
  br i1 %114, label %119, label %115

115:                                              ; preds = %109
  %116 = sext i32 %113 to i64
  %117 = getelementptr inbounds [64 x i32], [64 x i32]* @q_trans, i64 0, i64 %116
  %118 = load i32, i32* %117, align 4
  br label %119

119:                                              ; preds = %109, %115
  %120 = phi i32 [ %118, %115 ], [ 0, %109 ]
  %121 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 40
  store i32 %120, i32* %121, align 4
  %122 = getelementptr inbounds %struct.VP8_CONFIG, %struct.VP8_CONFIG* %1, i64 0, i32 41
  %123 = load i32, i32* %122, align 8
  %124 = icmp slt i32 %123, 0
  br i1 %124, label %129, label %125

125:                                              ; preds = %119
  %126 = sext i32 %123 to i64
  %127 = getelementptr inbounds [64 x i32], [64 x i32]* @q_trans, i64 0, i64 %126
  %128 = load i32, i32* %127, align 4
  br label %129

129:                                              ; preds = %119, %125
  %130 = phi i32 [ %128, %125 ], [ 0, %119 ]
  %131 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 41
  store i32 %130, i32* %131, align 8
  br label %132

132:                                              ; preds = %129, %71
  %133 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 221
  store i32 0, i32* %133, align 16
  %134 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 38
  %135 = load i32, i32* %134, align 4
  %136 = icmp eq i32 %135, 0
  %137 = select i1 %136, i32 7, i32 %135
  %138 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 66
  store i32 %137, i32* %138, align 8
  %139 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 45
  %140 = load i32, i32* %139, align 8
  %141 = icmp eq i32 %140, 0
  br i1 %141, label %142, label %151

142:                                              ; preds = %132
  %143 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 16
  %144 = load i32, i32* %143, align 4
  %145 = icmp eq i32 %144, 1
  %146 = icmp eq i32 %25, 0
  %147 = and i1 %146, %145
  br i1 %147, label %148, label %151

148:                                              ; preds = %142
  %149 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 153
  %150 = load i32, i32* %149, align 4
  store i32 %150, i32* %138, align 8
  br label %151

151:                                              ; preds = %132, %148, %142
  %152 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 43
  %153 = load i32, i32* %152, align 8
  %154 = icmp ult i32 %153, 4
  br i1 %154, label %155, label %157

155:                                              ; preds = %151
  %156 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 62
  store i32 %153, i32* %156, align 4
  br label %157

157:                                              ; preds = %155, %151
  %158 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 6, i32 23
  %159 = load i8, i8* %158, align 32
  %160 = icmp ne i8 %159, 0
  %161 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 6, i32 24
  %162 = zext i1 %160 to i8
  store i8 %162, i8* %161, align 1
  %163 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 6, i32 25
  store i8 %162, i8* %163, align 2
  %164 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 6, i32 29
  %165 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 6, i32 30
  %166 = getelementptr inbounds i8, i8* %164, i64 2
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %166, i8 0, i64 12, i1 false) #10
  store i8 1, i8* %164, align 1
  store i8 1, i8* %165, align 16
  %167 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 6, i32 32
  %168 = bitcast [4 x i8]* %167 to i32*
  store i32 -16908286, i32* %168, align 1
  %169 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 6, i32 34
  %170 = bitcast [4 x i8]* %169 to i32*
  store i32 67239940, i32* %170, align 1
  %171 = icmp eq i32 %25, 0
  %172 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 6, i32 34, i64 1
  %173 = select i1 %171, i8 -12, i8 -2
  store i8 %173, i8* %172, align 1
  %174 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 220
  %175 = load i32, i32* %174, align 4
  %176 = icmp eq i32 %175, 0
  br i1 %176, label %177, label %184

177:                                              ; preds = %157
  %178 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 44
  %179 = load i32, i32* %178, align 4
  %180 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 136, i64 0
  %181 = insertelement <4 x i32> undef, i32 %179, i32 0
  %182 = shufflevector <4 x i32> %181, <4 x i32> undef, <4 x i32> zeroinitializer
  %183 = bitcast i32* %180 to <4 x i32>*
  store <4 x i32> %182, <4 x i32>* %183, align 4
  br label %184

184:                                              ; preds = %177, %157
  %185 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 25
  %186 = load i32, i32* %185, align 8
  %187 = icmp sgt i32 %186, 127
  br i1 %187, label %188, label %189

188:                                              ; preds = %184
  store i32 127, i32* %185, align 8
  br label %189

189:                                              ; preds = %188, %184
  %190 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 16
  %191 = load i32, i32* %190, align 4
  %192 = icmp eq i32 %191, 0
  br i1 %192, label %193, label %200

193:                                              ; preds = %189
  %194 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 19
  %195 = bitcast i64* %194 to <2 x i64>*
  store <2 x i64> <i64 60000, i64 60000>, <2 x i64>* %195, align 8
  %196 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 21
  %197 = bitcast i64* %196 to <2 x i64>*
  store <2 x i64> <i64 240000, i64 60000>, <2 x i64>* %197, align 8
  %198 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 23
  %199 = bitcast i64* %198 to <2 x i64>*
  store <2 x i64> <i64 60000, i64 240000>, <2 x i64>* %199, align 8
  br label %200

200:                                              ; preds = %193, %189
  %201 = load i32, i32* %16, align 4
  %202 = sext i32 %201 to i64
  %203 = load i32, i32* %18, align 8
  %204 = sext i32 %203 to i64
  %205 = mul nsw i64 %202, 24
  %206 = mul i64 %205, %204
  %207 = sitofp i64 %206 to double
  %208 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 84
  %209 = load double, double* %208, align 16
  %210 = fmul double %209, %207
  %211 = fdiv double %210, 1.000000e+03
  %212 = fptoui double %211 to i32
  %213 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 4
  %214 = load i32, i32* %213, align 4
  %215 = icmp ugt i32 %214, %212
  br i1 %215, label %216, label %217

216:                                              ; preds = %200
  store i32 %212, i32* %213, align 4
  br label %217

217:                                              ; preds = %216, %200
  %218 = phi i32 [ %212, %216 ], [ %214, %200 ]
  %219 = mul i32 %218, 1000
  store i32 %219, i32* %213, align 4
  %220 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 19
  %221 = load i64, i64* %220, align 8
  %222 = sext i32 %219 to i64
  %223 = shl i64 %221, 32
  %224 = ashr exact i64 %223, 32
  %225 = mul nsw i64 %224, %222
  %226 = sdiv i64 %225, 1000
  %227 = shl i64 %226, 32
  %228 = ashr exact i64 %227, 32
  store i64 %228, i64* %220, align 8
  %229 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 20
  %230 = load i64, i64* %229, align 8
  %231 = icmp eq i64 %230, 0
  br i1 %231, label %232, label %235

232:                                              ; preds = %217
  %233 = lshr exact i32 %219, 3
  %234 = zext i32 %233 to i64
  br label %242

235:                                              ; preds = %217
  %236 = shl i64 %230, 32
  %237 = ashr exact i64 %236, 32
  %238 = mul nsw i64 %237, %222
  %239 = sdiv i64 %238, 1000
  %240 = shl i64 %239, 32
  %241 = ashr exact i64 %240, 32
  br label %242

242:                                              ; preds = %235, %232
  %243 = phi i64 [ %241, %235 ], [ %234, %232 ]
  store i64 %243, i64* %229, align 8
  %244 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 21
  %245 = load i64, i64* %244, align 8
  %246 = icmp eq i64 %245, 0
  br i1 %246, label %247, label %250

247:                                              ; preds = %242
  %248 = lshr exact i32 %219, 3
  %249 = zext i32 %248 to i64
  br label %257

250:                                              ; preds = %242
  %251 = shl i64 %245, 32
  %252 = ashr exact i64 %251, 32
  %253 = mul nsw i64 %252, %222
  %254 = sdiv i64 %253, 1000
  %255 = shl i64 %254, 32
  %256 = ashr exact i64 %255, 32
  br label %257

257:                                              ; preds = %250, %247
  %258 = phi i64 [ %256, %250 ], [ %249, %247 ]
  store i64 %258, i64* %244, align 8
  %259 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 87
  %260 = load i64, i64* %259, align 8
  %261 = icmp sgt i64 %260, %258
  br i1 %261, label %262, label %264

262:                                              ; preds = %257
  store i64 %258, i64* %259, align 8
  %263 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 86
  store i64 %258, i64* %263, align 32
  br label %264

264:                                              ; preds = %262, %257
  %265 = fcmp olt double %209, 1.000000e-01
  %266 = select i1 %265, double 3.000000e+01, double %209
  store double %266, double* %208, align 16
  %267 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 74
  store double %266, double* %267, align 16
  %268 = uitofp i32 %219 to double
  %269 = fdiv double %268, %266
  %270 = fptosi double %269 to i32
  %271 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 70
  store i32 %270, i32* %271, align 4
  %272 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 71
  store i32 %270, i32* %272, align 32
  %273 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 35
  %274 = load i32, i32* %273, align 8
  %275 = mul nsw i32 %274, %270
  %276 = sdiv i32 %275, 100
  %277 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 72
  store i32 %276, i32* %277, align 4
  %278 = fmul double %266, 5.000000e-01
  %279 = fptosi double %278 to i32
  %280 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 65
  %281 = icmp sgt i32 %279, 10
  %282 = select i1 %281, i32 %279, i32 10
  %283 = add nuw nsw i32 %282, 2
  store i32 %283, i32* %280, align 4
  %284 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 41
  %285 = load i32, i32* %284, align 16
  %286 = lshr i32 %285, 1
  %287 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 186, i32 23
  store i32 %286, i32* %287, align 8
  %288 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 37
  %289 = load i32, i32* %288, align 8
  %290 = icmp eq i32 %289, 0
  br i1 %290, label %304, label %291

291:                                              ; preds = %264
  %292 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 15
  %293 = load i32, i32* %292, align 8
  %294 = icmp eq i32 %293, 0
  br i1 %294, label %304, label %295

295:                                              ; preds = %291
  %296 = icmp slt i32 %283, %293
  br i1 %296, label %299, label %297

297:                                              ; preds = %295
  %298 = add nsw i32 %293, -1
  store i32 %298, i32* %280, align 4
  br label %299

299:                                              ; preds = %297, %295
  %300 = phi i32 [ %283, %295 ], [ %298, %297 ]
  %301 = icmp slt i32 %286, %293
  br i1 %301, label %304, label %302

302:                                              ; preds = %299
  %303 = add nsw i32 %293, -1
  store i32 %303, i32* %287, align 8
  br label %304

304:                                              ; preds = %302, %299, %291, %264
  %305 = phi i32 [ %286, %299 ], [ %286, %291 ], [ %286, %264 ], [ %303, %302 ]
  %306 = phi i32 [ %300, %299 ], [ %283, %291 ], [ %283, %264 ], [ %300, %302 ]
  %307 = icmp sgt i32 %306, %305
  br i1 %307, label %308, label %309

308:                                              ; preds = %304
  store i32 %305, i32* %280, align 4
  br label %309

309:                                              ; preds = %304, %308
  %310 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 94
  store i32 %76, i32* %310, align 4
  %311 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 96
  store i32 %82, i32* %311, align 4
  %312 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 95
  %313 = load i32, i32* %312, align 16
  %314 = icmp sgt i32 %313, %76
  br i1 %314, label %317, label %315

315:                                              ; preds = %309
  %316 = icmp slt i32 %313, %82
  br i1 %316, label %317, label %319

317:                                              ; preds = %315, %309
  %318 = phi i32 [ %76, %309 ], [ %82, %315 ]
  store i32 %318, i32* %312, align 16
  br label %319

319:                                              ; preds = %317, %315
  %320 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 97
  %321 = load i32, i32* %320, align 8
  %322 = icmp slt i32 %321, %82
  br i1 %322, label %325, label %323

323:                                              ; preds = %319
  %324 = icmp sgt i32 %321, %76
  br i1 %324, label %325, label %327

325:                                              ; preds = %323, %319
  %326 = phi i32 [ %82, %319 ], [ %76, %323 ]
  store i32 %326, i32* %320, align 8
  br label %327

327:                                              ; preds = %325, %323
  %328 = icmp sgt i64 %243, 0
  %329 = zext i1 %328 to i32
  %330 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 83
  store i32 %329, i32* %330, align 8
  %331 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 98
  store i32 %88, i32* %331, align 4
  %332 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 32
  %333 = load i32, i32* %332, align 4
  %334 = icmp ne i32 %333, 0
  %335 = and i1 %328, %334
  %336 = zext i1 %335 to i32
  %337 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 99
  store i32 %336, i32* %337, align 32
  %338 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 107
  store i32 %219, i32* %338, align 4
  %339 = load i32, i32* %20, align 4
  %340 = icmp eq i32 %339, %21
  br i1 %340, label %460, label %341

341:                                              ; preds = %327
  %342 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 147
  %343 = load i32, i32* %342, align 4
  %344 = icmp sgt i32 %343, 0
  br i1 %344, label %345, label %346

345:                                              ; preds = %341
  store i32 0, i32* %342, align 4
  br label %346

346:                                              ; preds = %345, %341
  %347 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 146
  store i32 0, i32* %347, align 8
  %348 = icmp eq i32 %21, 1
  br i1 %348, label %349, label %351

349:                                              ; preds = %346
  %350 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 201
  store i32 0, i32* %350, align 8
  tail call fastcc void @save_layer_context(%struct.VP8_COMP* nonnull %0) #10
  br label %351

351:                                              ; preds = %349, %346
  %352 = icmp sgt i32 %339, 0
  br i1 %352, label %353, label %460

353:                                              ; preds = %351
  %354 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 22
  %355 = icmp eq i32 %339, 1
  %356 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 201
  %357 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 0, i32 1
  %358 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 0, i32 2
  %359 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 0, i32 4
  %360 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 0, i32 6
  %361 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 23
  %362 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 0, i32 9
  %363 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 86
  %364 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 0, i32 11
  %365 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 92
  %366 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 0, i32 14
  %367 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 0, i32 16
  %368 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 0, i32 17
  %369 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 78
  %370 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 0, i32 21
  %371 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 55
  %372 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 0, i32 23
  %373 = bitcast double* %372 to i64*
  %374 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 57
  %375 = bitcast double* %374 to i64*
  %376 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 0, i32 24
  %377 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 65
  %378 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 0, i32 25
  %379 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 73
  %380 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 0, i32 26
  %381 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 82
  %382 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 0, i32 27
  %383 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 46
  %384 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 0, i32 28
  %385 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 150
  %386 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 0, i32 29
  %387 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 149
  %388 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 0, i32 30
  %389 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 128
  %390 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 0, i32 32, i64 0
  %391 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 54, i64 0
  %392 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 0, i32 32, i64 1
  %393 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 54, i64 1
  %394 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 56, i64 0
  %395 = bitcast i32* %394 to i8*
  %396 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 0, i32 31, i64 0
  %397 = bitcast i32* %396 to i8*
  %398 = sext i32 %21 to i64
  %399 = zext i32 %339 to i64
  %400 = bitcast i64* %358 to <2 x i64>*
  %401 = bitcast i64* %220 to <2 x i64>*
  %402 = bitcast i64* %359 to <2 x i64>*
  %403 = bitcast i64* %244 to <2 x i64>*
  %404 = bitcast i64* %360 to <2 x i64>*
  %405 = bitcast i64* %361 to <2 x i64>*
  %406 = bitcast i64* %362 to <2 x i64>*
  %407 = bitcast i64* %363 to <2 x i64>*
  %408 = bitcast i32* %368 to <4 x i32>*
  %409 = bitcast i32* %369 to <4 x i32>*
  %410 = bitcast double* %370 to <2 x i64>*
  %411 = bitcast double* %371 to <2 x i64>*
  br label %412

412:                                              ; preds = %452, %353
  %413 = phi i64 [ 0, %353 ], [ %458, %452 ]
  %414 = phi double [ 0.000000e+00, %353 ], [ %457, %452 ]
  %415 = icmp slt i64 %413, %398
  br i1 %415, label %418, label %416

416:                                              ; preds = %412
  %417 = trunc i64 %413 to i32
  tail call fastcc void @init_temporal_layer_context(%struct.VP8_COMP* %0, %struct.VP8_CONFIG* %1, i32 %417, double %414) #10
  br label %418

418:                                              ; preds = %416, %412
  %419 = load i64, i64* %354, align 8
  %420 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 53, i64 %413
  %421 = load i32, i32* %420, align 4
  %422 = zext i32 %421 to i64
  %423 = mul nsw i64 %419, %422
  %424 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %413, i32 9
  store i64 %423, i64* %424, align 8
  %425 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %413, i32 10
  store i64 %423, i64* %425, align 8
  br i1 %355, label %426, label %452

426:                                              ; preds = %418
  %427 = load i32, i32* %213, align 4
  %428 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %413, i32 1
  store i32 %427, i32* %428, align 8
  %429 = sext i32 %427 to i64
  %430 = mul nsw i64 %419, %429
  %431 = sdiv i64 %430, 1000
  store i64 %431, i64* %424, align 8
  store i64 %431, i64* %425, align 8
  store i32 0, i32* %356, align 8
  %432 = load i32, i32* %357, align 8
  store i32 %432, i32* %338, align 4
  store i32 %432, i32* %213, align 4
  %433 = load <2 x i64>, <2 x i64>* %400, align 8
  store <2 x i64> %433, <2 x i64>* %401, align 8
  %434 = load <2 x i64>, <2 x i64>* %402, align 8
  store <2 x i64> %434, <2 x i64>* %403, align 8
  %435 = load <2 x i64>, <2 x i64>* %404, align 8
  store <2 x i64> %435, <2 x i64>* %405, align 8
  %436 = load <2 x i64>, <2 x i64>* %406, align 8
  store <2 x i64> %436, <2 x i64>* %407, align 32
  %437 = load i64, i64* %364, align 8
  store i64 %437, i64* %365, align 32
  %438 = load i32, i32* %366, align 8
  store i32 %438, i32* %312, align 16
  %439 = load i32, i32* %367, align 8
  store i32 %439, i32* %320, align 8
  %440 = load <4 x i32>, <4 x i32>* %408, align 4
  store <4 x i32> %440, <4 x i32>* %409, align 16
  %441 = load <2 x i64>, <2 x i64>* %410, align 8
  store <2 x i64> %441, <2 x i64>* %411, align 32
  %442 = load i64, i64* %373, align 8
  store i64 %442, i64* %375, align 16
  %443 = load i32, i32* %376, align 8
  store i32 %443, i32* %377, align 4
  %444 = load i32, i32* %378, align 4
  store i32 %444, i32* %379, align 8
  %445 = load i64, i64* %380, align 8
  store i64 %445, i64* %381, align 32
  %446 = load i32, i32* %382, align 8
  store i32 %446, i32* %383, align 32
  %447 = load i32, i32* %384, align 4
  store i32 %447, i32* %385, align 8
  %448 = load i32, i32* %386, align 8
  store i32 %448, i32* %387, align 4
  %449 = load i32, i32* %388, align 4
  store i32 %449, i32* %389, align 8
  %450 = load i32, i32* %390, align 8
  store i32 %450, i32* %391, align 8
  %451 = load i32, i32* %392, align 4
  store i32 %451, i32* %393, align 4
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %395, i8* align 8 %397, i64 16, i1 false) #10
  br label %452

452:                                              ; preds = %426, %418
  %453 = load double, double* %267, align 16
  %454 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 54, i64 %413
  %455 = load i32, i32* %454, align 4
  %456 = uitofp i32 %455 to double
  %457 = fdiv double %453, %456
  %458 = add nuw nsw i64 %413, 1
  %459 = icmp eq i64 %458, %399
  br i1 %459, label %460, label %412

460:                                              ; preds = %452, %351, %327
  %461 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 198
  %462 = load i32, i32* %461, align 32
  %463 = icmp eq i32 %462, 0
  %464 = load i32, i32* %16, align 4
  br i1 %463, label %467, label %465

465:                                              ; preds = %460
  %466 = load i32, i32* %18, align 8
  br label %470

467:                                              ; preds = %460
  store i32 %464, i32* %461, align 32
  %468 = load i32, i32* %18, align 8
  %469 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 199
  store i32 %468, i32* %469, align 4
  br label %470

470:                                              ; preds = %465, %467
  %471 = phi i32 [ %466, %465 ], [ %468, %467 ]
  %472 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 5
  store i32 %464, i32* %472, align 16
  %473 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 6
  store i32 %471, i32* %473, align 4
  %474 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 6
  %475 = load i32, i32* %474, align 4
  %476 = icmp sgt i32 %475, 7
  br i1 %476, label %477, label %478

477:                                              ; preds = %470
  store i32 7, i32* %474, align 4
  br label %478

478:                                              ; preds = %477, %470
  %479 = phi i32 [ 7, %477 ], [ %475, %470 ]
  %480 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 48
  store i32 %479, i32* %480, align 8
  %481 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 7
  %482 = load i32, i32* %481, align 8
  switch i32 %482, label %490 [
    i32 0, label %483
    i32 3, label %489
    i32 1, label %487
    i32 2, label %488
  ]

483:                                              ; preds = %478
  %484 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 8
  %485 = load i32, i32* %484, align 4
  %486 = icmp eq i32 %485, 0
  br i1 %486, label %515, label %490

487:                                              ; preds = %478
  br label %490

488:                                              ; preds = %478
  br label %490

489:                                              ; preds = %478
  br label %490

490:                                              ; preds = %478, %483, %487, %488, %489
  %491 = phi i32 [ 1, %489 ], [ 3, %488 ], [ 4, %487 ], [ 1, %483 ], [ 1, %478 ]
  %492 = phi i32 [ 2, %489 ], [ 5, %488 ], [ 5, %487 ], [ 1, %483 ], [ 1, %478 ]
  %493 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 8
  %494 = load i32, i32* %493, align 4
  %495 = add i32 %494, -1
  %496 = icmp ult i32 %495, 3
  br i1 %496, label %497, label %504

497:                                              ; preds = %490
  %498 = sext i32 %495 to i64
  %499 = getelementptr inbounds [3 x i32], [3 x i32]* @switch.table.vp8_get_compressed_data.27, i64 0, i64 %498
  %500 = load i32, i32* %499, align 4
  %501 = sext i32 %495 to i64
  %502 = getelementptr inbounds [3 x i32], [3 x i32]* @switch.table.vp8_get_compressed_data.28, i64 0, i64 %501
  %503 = load i32, i32* %502, align 4
  br label %504

504:                                              ; preds = %497, %490
  %505 = phi i32 [ 1, %490 ], [ %500, %497 ]
  %506 = phi i32 [ 1, %490 ], [ %503, %497 ]
  %507 = add nsw i32 %492, -1
  %508 = mul nsw i32 %491, %464
  %509 = add nsw i32 %507, %508
  %510 = sdiv i32 %509, %492
  store i32 %510, i32* %472, align 16
  %511 = add nsw i32 %506, -1
  %512 = mul nsw i32 %505, %471
  %513 = add nsw i32 %511, %512
  %514 = sdiv i32 %513, %506
  store i32 %514, i32* %473, align 4
  br label %515

515:                                              ; preds = %483, %504
  %516 = phi i32 [ %471, %483 ], [ %514, %504 ]
  %517 = phi i32 [ %464, %483 ], [ %510, %504 ]
  %518 = icmp eq i32 %17, %464
  %519 = icmp eq i32 %19, %471
  %520 = and i1 %518, %519
  br i1 %520, label %523, label %521

521:                                              ; preds = %515
  %522 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 196
  store i32 1, i32* %522, align 8
  br label %523

523:                                              ; preds = %515, %521
  %524 = add nsw i32 %517, 15
  %525 = and i32 %524, -16
  %526 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 14
  %527 = load i32, i32* %526, align 4
  %528 = sext i32 %527 to i64
  %529 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 11, i64 %528, i32 0
  %530 = load i32, i32* %529, align 16
  %531 = icmp eq i32 %525, %530
  br i1 %531, label %532, label %540

532:                                              ; preds = %523
  %533 = add nsw i32 %516, 15
  %534 = and i32 %533, -16
  %535 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 11, i64 %528, i32 1
  %536 = load i32, i32* %535, align 4
  %537 = icmp ne i32 %534, %536
  %538 = icmp eq i32 %525, 0
  %539 = or i1 %538, %537
  br i1 %539, label %540, label %552

540:                                              ; preds = %532, %523
  %541 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 22
  %542 = load %struct.lookahead_ctx*, %struct.lookahead_ctx** %541, align 8
  tail call void @vp8_lookahead_destroy(%struct.lookahead_ctx* %542) #10
  %543 = load i32, i32* %16, align 4
  %544 = load i32, i32* %18, align 8
  %545 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 15
  %546 = load i32, i32* %545, align 8
  %547 = tail call %struct.lookahead_ctx* @vp8_lookahead_init(i32 %543, i32 %544, i32 %546) #10
  store %struct.lookahead_ctx* %547, %struct.lookahead_ctx** %541, align 8
  %548 = icmp eq %struct.lookahead_ctx* %547, null
  br i1 %548, label %549, label %551

549:                                              ; preds = %540
  %550 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 0
  tail call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %550, i32 2, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.20, i64 0, i64 0)) #10
  br label %551

551:                                              ; preds = %540, %549
  tail call void @vp8_alloc_compressor_data(%struct.VP8_COMP* %0)
  br label %552

552:                                              ; preds = %532, %551
  %553 = load i32, i32* %185, align 8
  %554 = icmp sgt i32 %553, -1
  br i1 %554, label %555, label %558

555:                                              ; preds = %552
  %556 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 54, i64 0
  store i32 %553, i32* %556, align 8
  %557 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 54, i64 1
  store i32 %553, i32* %557, align 4
  br label %558

558:                                              ; preds = %555, %552
  %559 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 7
  %560 = load i32, i32* %559, align 8
  %561 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 113
  store i32 %560, i32* %561, align 16
  %562 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 15
  %563 = load i32, i32* %562, align 8
  %564 = icmp eq i32 %563, 0
  br i1 %564, label %565, label %567

565:                                              ; preds = %558
  %566 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 14
  store i32 0, i32* %566, align 4
  br label %570

567:                                              ; preds = %558
  %568 = icmp sgt i32 %563, 1
  br i1 %568, label %569, label %570

569:                                              ; preds = %567
  store i32 1, i32* %562, align 8
  br label %570

570:                                              ; preds = %567, %569, %565
  %571 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 24
  store %struct.lookahead_entry* null, %struct.lookahead_entry** %571, align 8
  %572 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 33
  store i32 0, i32* %572, align 4
  %573 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 5
  %574 = load i32, i32* %573, align 8
  %575 = icmp eq i32 %574, 0
  br i1 %575, label %596, label %576

576:                                              ; preds = %570
  %577 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 200, i32 1, i32 17
  %578 = load i8*, i8** %577, align 8
  %579 = icmp eq i8* %578, null
  br i1 %579, label %580, label %596

580:                                              ; preds = %576
  %581 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 200
  %582 = load i32, i32* %16, align 4
  %583 = add nsw i32 %582, 15
  %584 = and i32 %583, -16
  %585 = load i32, i32* %18, align 8
  %586 = add nsw i32 %585, 15
  %587 = and i32 %586, -16
  %588 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 27
  %589 = load i32, i32* %588, align 4
  %590 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 28
  %591 = load i32, i32* %590, align 8
  %592 = tail call i32 @vp8_denoiser_allocate(%struct.vp8_denoiser* %581, i32 %584, i32 %587, i32 %589, i32 %591, i32 %574) #10
  %593 = icmp eq i32 %592, 0
  br i1 %593, label %596, label %594

594:                                              ; preds = %580
  %595 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %3, i64 0, i32 0
  tail call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %595, i32 2, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.14, i64 0, i64 0)) #10
  br label %596

596:                                              ; preds = %570, %576, %580, %594, %2
  ret void
}

declare void @vp8_setup_version(%struct.VP8Common*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden %struct.VP8_COMP* @vp8_create_compressor(%struct.VP8_CONFIG* readonly) local_unnamed_addr #0 {
  %2 = alloca %struct.VP8_COMP*, align 8
  %3 = bitcast %struct.VP8_COMP** %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %3) #10
  store %struct.VP8_COMP* inttoptr (i64 -6148914691236517206 to %struct.VP8_COMP*), %struct.VP8_COMP** %2, align 8
  %4 = call i8* @vpx_memalign(i64 32, i64 184096) #10
  %5 = bitcast %struct.VP8_COMP** %2 to i8**
  store i8* %4, i8** %5, align 8
  %6 = icmp eq i8* %4, null
  br i1 %6, label %443, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds i8, i8* %4, i64 108768
  %9 = bitcast i8* %8 to %struct.VP8Common*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %4, i8 0, i64 184096, i1 false)
  %10 = getelementptr inbounds i8, i8* %4, i64 108864
  %11 = bitcast i8* %10 to %struct.__jmp_buf_tag*
  %12 = call i32 @_setjmp(%struct.__jmp_buf_tag* %11) #11
  %13 = icmp eq i32 %12, 0
  %14 = load %struct.VP8_COMP*, %struct.VP8_COMP** %2, align 8
  %15 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %14, i64 0, i32 19, i32 0, i32 3
  br i1 %13, label %17, label %16

16:                                               ; preds = %7
  store i32 0, i32* %15, align 8
  call void @vp8_remove_compressor(%struct.VP8_COMP** nonnull %2)
  br label %443

17:                                               ; preds = %7
  store i32 1, i32* %15, align 8
  %18 = call i8* @vpx_calloc(i64 8, i64 65) #10
  %19 = load %struct.VP8_COMP*, %struct.VP8_COMP** %2, align 8
  %20 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %19, i64 0, i32 18, i32 11
  %21 = bitcast %struct.search_site** %20 to i8**
  store i8* %18, i8** %21, align 8
  %22 = icmp eq i8* %18, null
  br i1 %22, label %23, label %26

23:                                               ; preds = %17
  %24 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %19, i64 0, i32 19, i32 0
  call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %24, i32 2, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.15, i64 0, i64 0)) #10
  %25 = load %struct.VP8_COMP*, %struct.VP8_COMP** %2, align 8
  br label %26

26:                                               ; preds = %17, %23
  %27 = phi %struct.VP8_COMP* [ %19, %17 ], [ %25, %23 ]
  %28 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %27, i64 0, i32 19
  call void @vp8_create_common(%struct.VP8Common* %28) #10
  %29 = load %struct.VP8_COMP*, %struct.VP8_COMP** %2, align 8
  %30 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %29, i64 0, i32 19
  %31 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %29, i64 0, i32 21
  %32 = bitcast %struct.VP8_CONFIG* %31 to i8*
  %33 = bitcast %struct.VP8_CONFIG* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %32, i8* align 8 %33, i64 480, i1 false) #10
  %34 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %29, i64 0, i32 115
  store i32 1, i32* %34, align 8
  %35 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %29, i64 0, i32 116
  store i32 1, i32* %35, align 4
  %36 = getelementptr inbounds %struct.VP8_CONFIG, %struct.VP8_CONFIG* %0, i64 0, i32 0
  %37 = load i32, i32* %36, align 8
  %38 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %29, i64 0, i32 19, i32 61
  store i32 %37, i32* %38, align 16
  call void @vp8_setup_version(%struct.VP8Common* %30) #10
  %39 = getelementptr inbounds %struct.VP8_CONFIG, %struct.VP8_CONFIG* %0, i64 0, i32 3, i32 0
  %40 = load i32, i32* %39, align 4
  %41 = icmp sgt i32 %40, 0
  br i1 %41, label %44, label %42

42:                                               ; preds = %26
  %43 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %29, i64 0, i32 84
  br label %54

44:                                               ; preds = %26
  %45 = getelementptr inbounds %struct.VP8_CONFIG, %struct.VP8_CONFIG* %0, i64 0, i32 3, i32 1
  %46 = load i32, i32* %45, align 4
  %47 = sitofp i32 %46 to double
  %48 = sitofp i32 %40 to double
  %49 = fdiv double %47, %48
  %50 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %29, i64 0, i32 84
  %51 = fcmp ogt double %49, 1.800000e+02
  %52 = bitcast double %49 to i64
  br i1 %51, label %53, label %54

53:                                               ; preds = %44
  br label %54

54:                                               ; preds = %53, %44, %42
  %55 = phi double* [ %50, %53 ], [ %50, %44 ], [ %43, %42 ]
  %56 = phi double [ 3.000000e+01, %53 ], [ %49, %44 ], [ 3.000000e+01, %42 ]
  %57 = phi i64 [ 4629137466983448576, %53 ], [ %52, %44 ], [ 4629137466983448576, %42 ]
  store double %56, double* %55, align 16
  %58 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %29, i64 0, i32 85
  %59 = bitcast double* %58 to i64*
  store i64 %57, i64* %59, align 8
  %60 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %29, i64 0, i32 129
  store i32 7, i32* %60, align 4
  %61 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %29, i64 0, i32 19, i32 50
  store i32 0, i32* %61, align 16
  %62 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %29, i64 0, i32 19, i32 49
  store i32 1, i32* %62, align 4
  %63 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %29, i64 0, i32 19, i32 54
  store i32 1, i32* %63, align 16
  call void @vp8_change_config(%struct.VP8_COMP* %29, %struct.VP8_CONFIG* %0) #10
  %64 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %29, i64 0, i32 21, i32 26
  %65 = load i32, i32* %64, align 4
  %66 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %29, i64 0, i32 95
  store i32 %65, i32* %66, align 16
  %67 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %29, i64 0, i32 21, i32 27
  %68 = load i32, i32* %67, align 8
  %69 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %29, i64 0, i32 97
  store i32 %68, i32* %69, align 8
  %70 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %29, i64 0, i32 81
  store i32 %65, i32* %70, align 4
  %71 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %29, i64 0, i32 21, i32 19
  %72 = load i64, i64* %71, align 8
  %73 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %29, i64 0, i32 86
  store i64 %72, i64* %73, align 32
  %74 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %29, i64 0, i32 87
  store i64 %72, i64* %74, align 8
  %75 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %29, i64 0, i32 71
  %76 = load i32, i32* %75, align 32
  %77 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %29, i64 0, i32 88
  %78 = insertelement <4 x i32> undef, i32 %76, i32 0
  %79 = shufflevector <4 x i32> %78, <4 x i32> undef, <4 x i32> zeroinitializer
  %80 = bitcast i32* %77 to <4 x i32>*
  store <4 x i32> %79, <4 x i32>* %80, align 16
  %81 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %29, i64 0, i32 92
  store i64 0, i64* %81, align 32
  %82 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %29, i64 0, i32 93
  store i32 0, i32* %82, align 8
  %83 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %29, i64 0, i32 21, i32 52
  %84 = load i32, i32* %83, align 4
  %85 = icmp ugt i32 %84, 1
  br i1 %85, label %86, label %101

86:                                               ; preds = %54
  %87 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %29, i64 0, i32 74
  br label %88

88:                                               ; preds = %88, %86
  %89 = phi i64 [ 0, %86 ], [ %97, %88 ]
  %90 = phi double [ 0.000000e+00, %86 ], [ %96, %88 ]
  %91 = trunc i64 %89 to i32
  call fastcc void @init_temporal_layer_context(%struct.VP8_COMP* %29, %struct.VP8_CONFIG* %0, i32 %91, double %90) #10
  %92 = load double, double* %87, align 16
  %93 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %29, i64 0, i32 21, i32 54, i64 %89
  %94 = load i32, i32* %93, align 4
  %95 = uitofp i32 %94 to double
  %96 = fdiv double %92, %95
  %97 = add nuw nsw i64 %89, 1
  %98 = load i32, i32* %83, align 4
  %99 = zext i32 %98 to i64
  %100 = icmp ult i64 %97, %99
  br i1 %100, label %88, label %101

101:                                              ; preds = %88, %54
  %102 = load %struct.VP8_COMP*, %struct.VP8_COMP** %2, align 8
  %103 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %102, i64 0, i32 182, i64 0
  %104 = bitcast i32* %103 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 32 %104, i8* align 16 bitcast ([128 x i32]* @vp8cx_base_skip_false_prob to i8*), i64 512, i1 false)
  %105 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %102, i64 0, i32 19, i32 60
  store i32 0, i32* %105, align 4
  %106 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %102, i64 0, i32 146
  store i32 0, i32* %106, align 8
  %107 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %102, i64 0, i32 147
  store i32 -1, i32* %107, align 4
  %108 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %102, i64 0, i32 59
  store i32 0, i32* %108, align 4
  %109 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %102, i64 0, i32 61
  %110 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %102, i64 0, i32 121
  %111 = bitcast i32* %109 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %111, i8 0, i64 16, i1 false)
  store i32 128, i32* %110, align 16
  %112 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %102, i64 0, i32 122
  store i32 128, i32* %112, align 4
  %113 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %102, i64 0, i32 120
  store i32 63, i32* %113, align 4
  %114 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %102, i64 0, i32 126, i64 0
  %115 = bitcast i32* %114 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %115, align 4
  %116 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %102, i64 0, i32 19, i32 55, i64 3
  store i32 1, i32* %116, align 4
  %117 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %102, i64 0, i32 186, i32 22
  store i32 0, i32* %117, align 4
  %118 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %102, i64 0, i32 66
  store i32 7, i32* %118, align 8
  %119 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %102, i64 0, i32 34
  store i32 0, i32* %119, align 16
  %120 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %102, i64 0, i32 35
  store i32 0, i32* %120, align 4
  %121 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %102, i64 0, i32 36
  store i32 0, i32* %121, align 8
  %122 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %102, i64 0, i32 138
  store i32 0, i32* %122, align 8
  %123 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %102, i64 0, i32 220
  store i32 0, i32* %123, align 4
  %124 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %102, i64 0, i32 148
  store i32 0, i32* %124, align 16
  %125 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %102, i64 0, i32 21, i32 45
  %126 = load i32, i32* %125, align 8
  %127 = icmp eq i32 %126, 0
  br i1 %127, label %128, label %136

128:                                              ; preds = %101
  %129 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %102, i64 0, i32 21, i32 16
  %130 = load i32, i32* %129, align 4
  %131 = icmp eq i32 %130, 1
  br i1 %131, label %132, label %136

132:                                              ; preds = %128
  %133 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %102, i64 0, i32 21, i32 11
  %134 = load i32, i32* %133, align 8
  %135 = icmp slt i32 %134, 3
  br label %136

136:                                              ; preds = %101, %128, %132
  %137 = phi i1 [ true, %101 ], [ false, %128 ], [ %135, %132 ]
  %138 = zext i1 %137 to i32
  %139 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %102, i64 0, i32 139
  store i32 %138, i32* %139, align 4
  %140 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %102, i64 0, i32 19, i32 27
  %141 = load i32, i32* %140, align 4
  %142 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %102, i64 0, i32 19, i32 28
  %143 = load i32, i32* %142, align 8
  %144 = mul nsw i32 %143, %141
  %145 = sdiv i32 %144, 7
  %146 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %102, i64 0, i32 140
  store i32 %145, i32* %146, align 32
  %147 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %102, i64 0, i32 21, i32 52
  %148 = load i32, i32* %147, align 4
  switch i32 %148, label %155 [
    i32 1, label %149
    i32 2, label %151
  ]

149:                                              ; preds = %136
  %150 = sdiv i32 %144, 20
  br label %153

151:                                              ; preds = %136
  %152 = sdiv i32 %144, 10
  br label %153

153:                                              ; preds = %149, %151
  %154 = phi i32 [ %152, %151 ], [ %150, %149 ]
  store i32 %154, i32* %146, align 32
  br label %155

155:                                              ; preds = %153, %136
  %156 = phi i32 [ %145, %136 ], [ %154, %153 ]
  %157 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %102, i64 0, i32 141
  store i32 0, i32* %157, align 4
  %158 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %102, i64 0, i32 142
  store i32 32, i32* %158, align 8
  %159 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %102, i64 0, i32 152
  store i32 0, i32* %159, align 32
  %160 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %102, i64 0, i32 154
  store i32 0, i32* %160, align 8
  br i1 %127, label %161, label %187

161:                                              ; preds = %155
  %162 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %102, i64 0, i32 21, i32 16
  %163 = load i32, i32* %162, align 4
  %164 = icmp eq i32 %163, 1
  br i1 %164, label %165, label %187

165:                                              ; preds = %161
  %166 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %102, i64 0, i32 21, i32 11
  %167 = load i32, i32* %166, align 8
  %168 = icmp slt i32 %167, 3
  br i1 %168, label %169, label %187

169:                                              ; preds = %165
  store i32 1, i32* %159, align 32
  store i32 1, i32* %160, align 8
  %170 = icmp sgt i32 %156, 0
  br i1 %170, label %173, label %171

171:                                              ; preds = %169
  %172 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %102, i64 0, i32 153
  store i32 10, i32* %172, align 4
  br label %181

173:                                              ; preds = %169
  %174 = shl i32 %141, 1
  %175 = mul i32 %174, %143
  %176 = sdiv i32 %175, %156
  %177 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %102, i64 0, i32 153
  store i32 %176, i32* %177, align 4
  %178 = icmp slt i32 %176, 6
  br i1 %178, label %181, label %179

179:                                              ; preds = %173
  %180 = icmp sgt i32 %176, 40
  br i1 %180, label %184, label %181

181:                                              ; preds = %173, %171, %179
  %182 = phi i32 [ %176, %179 ], [ 10, %171 ], [ 6, %173 ]
  %183 = phi i32* [ %177, %179 ], [ %172, %171 ], [ %177, %173 ]
  br label %184

184:                                              ; preds = %181, %179
  %185 = phi i32* [ %177, %179 ], [ %183, %181 ]
  %186 = phi i32 [ 40, %179 ], [ %182, %181 ]
  store i32 %186, i32* %185, align 4
  store i32 %186, i32* %118, align 8
  br label %187

187:                                              ; preds = %155, %184, %165, %161
  br i1 %137, label %188, label %196

188:                                              ; preds = %187
  %189 = sext i32 %144 to i64
  %190 = call i8* @vpx_calloc(i64 %189, i64 1) #10
  %191 = load %struct.VP8_COMP*, %struct.VP8_COMP** %2, align 8
  %192 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %191, i64 0, i32 143
  store i8* %190, i8** %192, align 16
  %193 = icmp eq i8* %190, null
  br i1 %193, label %194, label %198

194:                                              ; preds = %188
  %195 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %191, i64 0, i32 19, i32 0
  call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %195, i32 2, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.16, i64 0, i64 0)) #10
  br label %198

196:                                              ; preds = %187
  %197 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %102, i64 0, i32 143
  store i8* null, i8** %197, align 16
  br label %198

198:                                              ; preds = %188, %196, %194
  %199 = getelementptr inbounds i8, i8* %4, i64 111828
  %200 = bitcast i8* %199 to i32*
  %201 = load i32, i32* %200, align 4
  %202 = getelementptr inbounds i8, i8* %4, i64 111832
  %203 = bitcast i8* %202 to i32*
  %204 = load i32, i32* %203, align 8
  %205 = mul nsw i32 %204, %201
  %206 = sext i32 %205 to i64
  %207 = call i8* @vpx_calloc(i64 %206, i64 1) #10
  %208 = load %struct.VP8_COMP*, %struct.VP8_COMP** %2, align 8
  %209 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %208, i64 0, i32 133
  store i8* %207, i8** %209, align 8
  %210 = icmp eq i8* %207, null
  br i1 %210, label %211, label %213

211:                                              ; preds = %198
  %212 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %208, i64 0, i32 19, i32 0
  call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %212, i32 2, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.17, i64 0, i64 0)) #10
  br label %213

213:                                              ; preds = %198, %211
  %214 = load i32, i32* %200, align 4
  %215 = load i32, i32* %203, align 8
  %216 = mul nsw i32 %215, %214
  %217 = sext i32 %216 to i64
  %218 = call i8* @vpx_calloc(i64 %217, i64 1) #10
  %219 = load %struct.VP8_COMP*, %struct.VP8_COMP** %2, align 8
  %220 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %219, i64 0, i32 144
  store i8* %218, i8** %220, align 8
  %221 = icmp eq i8* %218, null
  br i1 %221, label %222, label %225

222:                                              ; preds = %213
  %223 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %219, i64 0, i32 19, i32 0
  call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %223, i32 2, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.18, i64 0, i64 0)) #10
  %224 = load %struct.VP8_COMP*, %struct.VP8_COMP** %2, align 8
  br label %225

225:                                              ; preds = %213, %222
  %226 = phi %struct.VP8_COMP* [ %219, %213 ], [ %224, %222 ]
  %227 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %226, i64 0, i32 19, i32 27
  %228 = load i32, i32* %227, align 4
  %229 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %226, i64 0, i32 19, i32 28
  %230 = load i32, i32* %229, align 8
  %231 = mul nsw i32 %230, %228
  %232 = sext i32 %231 to i64
  %233 = call i8* @vpx_calloc(i64 %232, i64 1) #10
  %234 = load %struct.VP8_COMP*, %struct.VP8_COMP** %2, align 8
  %235 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %234, i64 0, i32 145
  store i8* %233, i8** %235, align 32
  %236 = icmp eq i8* %233, null
  br i1 %236, label %237, label %240

237:                                              ; preds = %225
  %238 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %234, i64 0, i32 19, i32 0
  call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %238, i32 2, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.19, i64 0, i64 0)) #10
  %239 = load %struct.VP8_COMP*, %struct.VP8_COMP** %2, align 8
  br label %240

240:                                              ; preds = %225, %237
  %241 = phi %struct.VP8_COMP* [ %234, %225 ], [ %239, %237 ]
  %242 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %241, i64 0, i32 188
  store i32 368640, i32* %242, align 4
  %243 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %241, i64 0, i32 40
  store i32 8, i32* %243, align 4
  %244 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %241, i64 0, i32 21, i32 13
  %245 = load i32, i32* %244, align 8
  %246 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %241, i64 0, i32 41
  store i32 %245, i32* %246, align 16
  %247 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %241, i64 0, i32 42
  store i32 0, i32* %247, align 4
  %248 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %241, i64 0, i32 43
  store i32 0, i32* %248, align 8
  %249 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %241, i64 0, i32 31
  store i32 0, i32* %249, align 4
  %250 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %241, i64 0, i32 32
  store i32 0, i32* %250, align 8
  %251 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %241, i64 0, i32 19, i32 51
  store i32 0, i32* %251, align 4
  %252 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %241, i64 0, i32 149
  store i32 0, i32* %252, align 4
  %253 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %241, i64 0, i32 150
  store i32 0, i32* %253, align 8
  %254 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %241, i64 0, i32 187
  store i32 0, i32* %254, align 32
  %255 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %241, i64 0, i32 77
  store i64 2147483647, i64* %255, align 8
  %256 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %241, i64 0, i32 59
  store i32 0, i32* %256, align 4
  %257 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %241, i64 0, i32 68
  store i64 1, i64* %257, align 32
  %258 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %241, i64 0, i32 21, i32 26
  %259 = load i32, i32* %258, align 4
  %260 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %241, i64 0, i32 78
  store i32 %259, i32* %260, align 16
  %261 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %241, i64 0, i32 79
  store i32 0, i32* %261, align 4
  %262 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %241, i64 0, i32 80
  store i32 0, i32* %262, align 8
  %263 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %241, i64 0, i32 82
  store i64 0, i64* %263, align 32
  %264 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %241, i64 0, i32 100
  store i32 0, i32* %264, align 4
  %265 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %241, i64 0, i32 55
  %266 = bitcast double* %265 to <2 x double>*
  store <2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double>* %266, align 32
  %267 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %241, i64 0, i32 57
  store double 1.000000e+00, double* %267, align 16
  %268 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %241, i64 0, i32 186, i32 31
  store double 1.000000e+00, double* %268, align 8
  %269 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %241, i64 0, i32 74
  %270 = load double, double* %269, align 16
  %271 = fptosi double %270 to i32
  %272 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %241, i64 0, i32 69, i64 0
  %273 = insertelement <4 x i32> undef, i32 %271, i32 0
  %274 = shufflevector <4 x i32> %273, <4 x i32> undef, <4 x i32> zeroinitializer
  %275 = bitcast i32* %272 to <4 x i32>*
  store <4 x i32> %274, <4 x i32>* %275, align 4
  %276 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %241, i64 0, i32 69, i64 4
  store i32 %271, i32* %276, align 4
  %277 = getelementptr inbounds %struct.VP8_CONFIG, %struct.VP8_CONFIG* %0, i64 0, i32 50
  %278 = bitcast %struct.vpx_codec_pkt_list** %277 to i64*
  %279 = load i64, i64* %278, align 8
  %280 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %241, i64 0, i32 108
  %281 = bitcast %struct.vpx_codec_pkt_list** %280 to i64*
  store i64 %279, i64* %281, align 8
  %282 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %241, i64 0, i32 114
  %283 = load i32, i32* %282, align 4
  %284 = icmp eq i32 %283, 2
  br i1 %284, label %285, label %288

285:                                              ; preds = %240
  %286 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %241, i64 0, i32 111
  store i32 0, i32* %286, align 8
  %287 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %241, i64 0, i32 112
  store i32 0, i32* %287, align 4
  br label %288

288:                                              ; preds = %285, %240
  call void @vp8_set_speed_features(%struct.VP8_COMP* %241)
  %289 = load %struct.VP8_COMP*, %struct.VP8_COMP** %2, align 8
  %290 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %289, i64 0, i32 18, i32 57, i64 0
  %291 = bitcast i32* %290 to <4 x i32>*
  store <4 x i32> <i32 128, i32 128, i32 128, i32 128>, <4 x i32>* %291, align 4
  %292 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %289, i64 0, i32 18, i32 57, i64 4
  %293 = bitcast i32* %292 to <4 x i32>*
  store <4 x i32> <i32 128, i32 128, i32 128, i32 128>, <4 x i32>* %293, align 4
  %294 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %289, i64 0, i32 18, i32 57, i64 8
  %295 = bitcast i32* %294 to <4 x i32>*
  store <4 x i32> <i32 128, i32 128, i32 128, i32 128>, <4 x i32>* %295, align 4
  %296 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %289, i64 0, i32 18, i32 57, i64 12
  %297 = bitcast i32* %296 to <4 x i32>*
  store <4 x i32> <i32 128, i32 128, i32 128, i32 128>, <4 x i32>* %297, align 4
  %298 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %289, i64 0, i32 18, i32 57, i64 16
  %299 = bitcast i32* %298 to <4 x i32>*
  store <4 x i32> <i32 128, i32 128, i32 128, i32 128>, <4 x i32>* %299, align 4
  %300 = call i32 @vp8cx_create_encoder_threads(%struct.VP8_COMP* %289) #10
  %301 = icmp eq i32 %300, 0
  br i1 %301, label %303, label %302

302:                                              ; preds = %288
  call void @vp8_remove_compressor(%struct.VP8_COMP** nonnull %2)
  br label %443

303:                                              ; preds = %288
  %304 = load %struct.VP8_COMP*, %struct.VP8_COMP** %2, align 8
  %305 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %304, i64 0, i32 177, i64 4, i32 0
  store i32 (i8*, i32, i8*, i32)* @vpx_sad16x16_sse2, i32 (i8*, i32, i8*, i32)** %305, align 8
  %306 = load i64, i64* bitcast (i32 (i8*, i32, i8*, i32, i32*)** @vpx_variance16x16 to i64*), align 8
  %307 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %304, i64 0, i32 177, i64 4, i32 1
  %308 = bitcast i32 (i8*, i32, i8*, i32, i32*)** %307 to i64*
  store i64 %306, i64* %308, align 8
  %309 = load i64, i64* bitcast (i32 (i8*, i32, i32, i32, i8*, i32, i32*)** @vpx_sub_pixel_variance16x16 to i64*), align 8
  %310 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %304, i64 0, i32 177, i64 4, i32 2
  %311 = bitcast i32 (i8*, i32, i32, i32, i8*, i32, i32*)** %310 to i64*
  store i64 %309, i64* %311, align 8
  %312 = load i64, i64* bitcast (void (i8*, i32, i8*, i32, i32*)** @vpx_sad16x16x3 to i64*), align 8
  %313 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %304, i64 0, i32 177, i64 4, i32 3
  %314 = bitcast void (i8*, i32, i8*, i32, i32*)** %313 to i64*
  store i64 %312, i64* %314, align 8
  %315 = load i64, i64* bitcast (void (i8*, i32, i8*, i32, i32*)** @vpx_sad16x16x8 to i64*), align 8
  %316 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %304, i64 0, i32 177, i64 4, i32 4
  %317 = bitcast void (i8*, i32, i8*, i32, i32*)** %316 to i64*
  store i64 %315, i64* %317, align 8
  %318 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %304, i64 0, i32 177, i64 4, i32 5
  store void (i8*, i32, i8**, i32, i32*)* @vpx_sad16x16x4d_sse2, void (i8*, i32, i8**, i32, i32*)** %318, align 8
  %319 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %304, i64 0, i32 177, i64 0, i32 0
  store i32 (i8*, i32, i8*, i32)* @vpx_sad16x8_sse2, i32 (i8*, i32, i8*, i32)** %319, align 8
  %320 = load i64, i64* bitcast (i32 (i8*, i32, i8*, i32, i32*)** @vpx_variance16x8 to i64*), align 8
  %321 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %304, i64 0, i32 177, i64 0, i32 1
  %322 = bitcast i32 (i8*, i32, i8*, i32, i32*)** %321 to i64*
  store i64 %320, i64* %322, align 8
  %323 = load i64, i64* bitcast (i32 (i8*, i32, i32, i32, i8*, i32, i32*)** @vpx_sub_pixel_variance16x8 to i64*), align 8
  %324 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %304, i64 0, i32 177, i64 0, i32 2
  %325 = bitcast i32 (i8*, i32, i32, i32, i8*, i32, i32*)** %324 to i64*
  store i64 %323, i64* %325, align 8
  %326 = load i64, i64* bitcast (void (i8*, i32, i8*, i32, i32*)** @vpx_sad16x8x3 to i64*), align 8
  %327 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %304, i64 0, i32 177, i64 0, i32 3
  %328 = bitcast void (i8*, i32, i8*, i32, i32*)** %327 to i64*
  store i64 %326, i64* %328, align 8
  %329 = load i64, i64* bitcast (void (i8*, i32, i8*, i32, i32*)** @vpx_sad16x8x8 to i64*), align 8
  %330 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %304, i64 0, i32 177, i64 0, i32 4
  %331 = bitcast void (i8*, i32, i8*, i32, i32*)** %330 to i64*
  store i64 %329, i64* %331, align 8
  %332 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %304, i64 0, i32 177, i64 0, i32 5
  store void (i8*, i32, i8**, i32, i32*)* @vpx_sad16x8x4d_sse2, void (i8*, i32, i8**, i32, i32*)** %332, align 8
  %333 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %304, i64 0, i32 177, i64 1, i32 0
  store i32 (i8*, i32, i8*, i32)* @vpx_sad8x16_sse2, i32 (i8*, i32, i8*, i32)** %333, align 8
  %334 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %304, i64 0, i32 177, i64 1, i32 1
  store i32 (i8*, i32, i8*, i32, i32*)* @vpx_variance8x16_sse2, i32 (i8*, i32, i8*, i32, i32*)** %334, align 8
  %335 = load i64, i64* bitcast (i32 (i8*, i32, i32, i32, i8*, i32, i32*)** @vpx_sub_pixel_variance8x16 to i64*), align 8
  %336 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %304, i64 0, i32 177, i64 1, i32 2
  %337 = bitcast i32 (i8*, i32, i32, i32, i8*, i32, i32*)** %336 to i64*
  store i64 %335, i64* %337, align 8
  %338 = load i64, i64* bitcast (void (i8*, i32, i8*, i32, i32*)** @vpx_sad8x16x3 to i64*), align 8
  %339 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %304, i64 0, i32 177, i64 1, i32 3
  %340 = bitcast void (i8*, i32, i8*, i32, i32*)** %339 to i64*
  store i64 %338, i64* %340, align 8
  %341 = load i64, i64* bitcast (void (i8*, i32, i8*, i32, i32*)** @vpx_sad8x16x8 to i64*), align 8
  %342 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %304, i64 0, i32 177, i64 1, i32 4
  %343 = bitcast void (i8*, i32, i8*, i32, i32*)** %342 to i64*
  store i64 %341, i64* %343, align 8
  %344 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %304, i64 0, i32 177, i64 1, i32 5
  store void (i8*, i32, i8**, i32, i32*)* @vpx_sad8x16x4d_sse2, void (i8*, i32, i8**, i32, i32*)** %344, align 8
  %345 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %304, i64 0, i32 177, i64 2, i32 0
  store i32 (i8*, i32, i8*, i32)* @vpx_sad8x8_sse2, i32 (i8*, i32, i8*, i32)** %345, align 8
  %346 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %304, i64 0, i32 177, i64 2, i32 1
  store i32 (i8*, i32, i8*, i32, i32*)* @vpx_variance8x8_sse2, i32 (i8*, i32, i8*, i32, i32*)** %346, align 8
  %347 = load i64, i64* bitcast (i32 (i8*, i32, i32, i32, i8*, i32, i32*)** @vpx_sub_pixel_variance8x8 to i64*), align 8
  %348 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %304, i64 0, i32 177, i64 2, i32 2
  %349 = bitcast i32 (i8*, i32, i32, i32, i8*, i32, i32*)** %348 to i64*
  store i64 %347, i64* %349, align 8
  %350 = load i64, i64* bitcast (void (i8*, i32, i8*, i32, i32*)** @vpx_sad8x8x3 to i64*), align 8
  %351 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %304, i64 0, i32 177, i64 2, i32 3
  %352 = bitcast void (i8*, i32, i8*, i32, i32*)** %351 to i64*
  store i64 %350, i64* %352, align 8
  %353 = load i64, i64* bitcast (void (i8*, i32, i8*, i32, i32*)** @vpx_sad8x8x8 to i64*), align 8
  %354 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %304, i64 0, i32 177, i64 2, i32 4
  %355 = bitcast void (i8*, i32, i8*, i32, i32*)** %354 to i64*
  store i64 %353, i64* %355, align 8
  %356 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %304, i64 0, i32 177, i64 2, i32 5
  store void (i8*, i32, i8**, i32, i32*)* @vpx_sad8x8x4d_sse2, void (i8*, i32, i8**, i32, i32*)** %356, align 8
  %357 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %304, i64 0, i32 177, i64 3, i32 0
  store i32 (i8*, i32, i8*, i32)* @vpx_sad4x4_sse2, i32 (i8*, i32, i8*, i32)** %357, align 8
  %358 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %304, i64 0, i32 177, i64 3, i32 1
  store i32 (i8*, i32, i8*, i32, i32*)* @vpx_variance4x4_sse2, i32 (i8*, i32, i8*, i32, i32*)** %358, align 8
  %359 = load i64, i64* bitcast (i32 (i8*, i32, i32, i32, i8*, i32, i32*)** @vpx_sub_pixel_variance4x4 to i64*), align 8
  %360 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %304, i64 0, i32 177, i64 3, i32 2
  %361 = bitcast i32 (i8*, i32, i32, i32, i8*, i32, i32*)** %360 to i64*
  store i64 %359, i64* %361, align 8
  %362 = load i64, i64* bitcast (void (i8*, i32, i8*, i32, i32*)** @vpx_sad4x4x3 to i64*), align 8
  %363 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %304, i64 0, i32 177, i64 3, i32 3
  %364 = bitcast void (i8*, i32, i8*, i32, i32*)** %363 to i64*
  store i64 %362, i64* %364, align 8
  %365 = load i64, i64* bitcast (void (i8*, i32, i8*, i32, i32*)** @vpx_sad4x4x8 to i64*), align 8
  %366 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %304, i64 0, i32 177, i64 3, i32 4
  %367 = bitcast void (i8*, i32, i8*, i32, i32*)** %366 to i64*
  store i64 %365, i64* %367, align 8
  %368 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %304, i64 0, i32 177, i64 3, i32 5
  store void (i8*, i32, i8**, i32, i32*)* @vpx_sad4x4x4d_sse2, void (i8*, i32, i8**, i32, i32*)** %368, align 8
  %369 = load i64, i64* bitcast (void (i8*, i32, i8*, i32, i32)** @vp8_copy32xn to i64*), align 8
  %370 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %304, i64 0, i32 177, i64 4, i32 6
  %371 = bitcast void (i8*, i32, i8*, i32, i32)** %370 to i64*
  store i64 %369, i64* %371, align 8
  %372 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %304, i64 0, i32 177, i64 0, i32 6
  %373 = bitcast void (i8*, i32, i8*, i32, i32)** %372 to i64*
  store i64 %369, i64* %373, align 8
  %374 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %304, i64 0, i32 177, i64 1, i32 6
  %375 = bitcast void (i8*, i32, i8*, i32, i32)** %374 to i64*
  store i64 %369, i64* %375, align 8
  %376 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %304, i64 0, i32 177, i64 2, i32 6
  %377 = bitcast void (i8*, i32, i8*, i32, i32)** %376 to i64*
  store i64 %369, i64* %377, align 8
  %378 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %304, i64 0, i32 177, i64 3, i32 6
  %379 = bitcast void (i8*, i32, i8*, i32, i32)** %378 to i64*
  store i64 %369, i64* %379, align 8
  %380 = load i64, i64* bitcast (i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, i32, i32, %struct.variance_vtable*, i32**, %union.int_mv*)** @vp8_full_search_sad to i64*), align 8
  %381 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %304, i64 0, i32 174
  %382 = bitcast i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, i32, i32, %struct.variance_vtable*, i32**, %union.int_mv*)** %381 to i64*
  store i64 %380, i64* %382, align 16
  %383 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %304, i64 0, i32 176
  store i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, %union.int_mv*, i32, i32, i32*, %struct.variance_vtable*, i32**, %union.int_mv*)* @vp8_diamond_search_sadx4, i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, %union.int_mv*, i32, i32, i32*, %struct.variance_vtable*, i32**, %union.int_mv*)** %383, align 32
  %384 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %304, i64 0, i32 175
  store i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, i32, i32, %struct.variance_vtable*, i32**, %union.int_mv*)* @vp8_refining_search_sadx4, i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, i32, i32, %struct.variance_vtable*, i32**, %union.int_mv*)** %384, align 8
  %385 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %304, i64 0, i32 19, i32 26
  %386 = load i32, i32* %385, align 16
  %387 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %304, i64 0, i32 18, i32 66, i64 0
  store i32 %386, i32* %387, align 16
  call void @vp8cx_init_quantizer(%struct.VP8_COMP* %304) #10
  call void @vp8_loop_filter_init(%struct.VP8Common* %9) #10
  %388 = load %struct.VP8_COMP*, %struct.VP8_COMP** %2, align 8
  %389 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %388, i64 0, i32 19, i32 0, i32 3
  store i32 0, i32* %389, align 8
  %390 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %388, i64 0, i32 21, i32 58
  %391 = load i32, i32* %390, align 8
  %392 = icmp eq i32 %391, 0
  br i1 %392, label %395, label %393

393:                                              ; preds = %303
  call void @vp8_cal_low_res_mb_cols(%struct.VP8_COMP* %388) #10
  %394 = load %struct.VP8_COMP*, %struct.VP8_COMP** %2, align 8
  br label %395

395:                                              ; preds = %303, %393
  %396 = phi %struct.VP8_COMP* [ %388, %303 ], [ %394, %393 ]
  %397 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %396, i64 0, i32 219, i32 0, i64 0, i64 1024
  %398 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %396, i64 0, i32 18, i32 23, i64 0
  store i32* %397, i32** %398, align 8
  %399 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %396, i64 0, i32 219, i32 0, i64 1, i64 1024
  %400 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %396, i64 0, i32 18, i32 23, i64 1
  store i32* %399, i32** %400, align 8
  %401 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %396, i64 0, i32 219, i32 1, i64 0, i64 256
  %402 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %396, i64 0, i32 18, i32 24, i64 0
  store i32* %401, i32** %402, align 8
  %403 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %396, i64 0, i32 219, i32 1, i64 1, i64 256
  %404 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %396, i64 0, i32 18, i32 24, i64 1
  store i32* %403, i32** %404, align 8
  store i32 300, i32* %401, align 4
  store i32 300, i32* %403, align 4
  br label %405

405:                                              ; preds = %405, %395
  %406 = phi i64 [ %425, %405 ], [ 1, %395 ]
  %407 = trunc i64 %406 to i32
  %408 = shl i32 %407, 3
  %409 = sitofp i32 %408 to double
  %410 = call double @log(double %409) #10
  %411 = fdiv double %410, 0x3FE62E4300000000
  %412 = fadd double %411, 6.000000e-01
  %413 = fmul double %412, 2.000000e+00
  %414 = fmul double %413, 2.560000e+02
  %415 = fptosi double %414 to i32
  %416 = load i32*, i32** %402, align 8
  %417 = getelementptr inbounds i32, i32* %416, i64 %406
  store i32 %415, i32* %417, align 4
  %418 = load i32*, i32** %404, align 8
  %419 = getelementptr inbounds i32, i32* %418, i64 %406
  store i32 %415, i32* %419, align 4
  %420 = load i32*, i32** %402, align 8
  %421 = sub nsw i64 0, %406
  %422 = getelementptr inbounds i32, i32* %420, i64 %421
  store i32 %415, i32* %422, align 4
  %423 = load i32*, i32** %404, align 8
  %424 = getelementptr inbounds i32, i32* %423, i64 %421
  store i32 %415, i32* %424, align 4
  %425 = add nuw nsw i64 %406, 1
  %426 = icmp eq i64 %425, 256
  br i1 %426, label %427, label %405

427:                                              ; preds = %405
  %428 = load %struct.VP8_COMP*, %struct.VP8_COMP** %2, align 8
  %429 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %428, i64 0, i32 219, i32 2, i64 0
  %430 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %428, i64 0, i32 18, i32 25
  store [10 x i32]* %429, [10 x i32]** %430, align 8
  %431 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %428, i64 0, i32 219, i32 3, i64 0
  %432 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %428, i64 0, i32 18, i32 26
  store [10 x i32]* %431, [10 x i32]** %432, align 16
  %433 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %428, i64 0, i32 219, i32 4, i64 0
  %434 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %428, i64 0, i32 18, i32 27
  store [10 x [10 x i32]]* %433, [10 x [10 x i32]]** %434, align 8
  %435 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %428, i64 0, i32 219, i32 5, i64 0
  %436 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %428, i64 0, i32 18, i32 28
  store i32* %435, i32** %436, align 32
  %437 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %428, i64 0, i32 219, i32 6, i64 0
  %438 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %428, i64 0, i32 18, i32 29
  store [8 x [3 x [12 x i32]]]* %437, [8 x [3 x [12 x i32]]]** %438, align 8
  %439 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %428, i64 0, i32 18
  call void @vp8_setup_block_ptrs(%struct.macroblock* %439) #10
  %440 = load %struct.VP8_COMP*, %struct.VP8_COMP** %2, align 8
  %441 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %440, i64 0, i32 18, i32 6
  call void @vp8_setup_block_dptrs(%struct.macroblockd* %441) #10
  %442 = load %struct.VP8_COMP*, %struct.VP8_COMP** %2, align 8
  br label %443

443:                                              ; preds = %1, %427, %302, %16
  %444 = phi %struct.VP8_COMP* [ null, %16 ], [ null, %302 ], [ %442, %427 ], [ null, %1 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %3) #10
  ret %struct.VP8_COMP* %444
}

declare i8* @vpx_memalign(i64, i64) local_unnamed_addr #1

; Function Attrs: nounwind returns_twice
declare i32 @_setjmp(%struct.__jmp_buf_tag*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden void @vp8_remove_compressor(%struct.VP8_COMP** nocapture) local_unnamed_addr #0 {
  %2 = load %struct.VP8_COMP*, %struct.VP8_COMP** %0, align 8
  %3 = icmp eq %struct.VP8_COMP* %2, null
  br i1 %3, label %56, label %4

4:                                                ; preds = %1
  tail call void @vp8cx_remove_encoder_threads(%struct.VP8_COMP* nonnull %2) #10
  %5 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %2, i64 0, i32 200
  tail call void @vp8_denoiser_free(%struct.vp8_denoiser* %5) #10
  %6 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %2, i64 0, i32 169
  %7 = bitcast %struct.TOKENLIST** %6 to i8**
  %8 = load i8*, i8** %7, align 8
  tail call void @vpx_free(i8* %8) #10
  store %struct.TOKENLIST* null, %struct.TOKENLIST** %6, align 8
  %9 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %2, i64 0, i32 193
  %10 = bitcast %union.int_mv** %9 to i8**
  %11 = load i8*, i8** %10, align 32
  tail call void @vpx_free(i8* %11) #10
  store %union.int_mv* null, %union.int_mv** %9, align 32
  %12 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %2, i64 0, i32 194
  %13 = bitcast i32** %12 to i8**
  %14 = load i8*, i8** %13, align 8
  tail call void @vpx_free(i8* %14) #10
  store i32* null, i32** %12, align 8
  %15 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %2, i64 0, i32 195
  %16 = bitcast i32** %15 to i8**
  %17 = load i8*, i8** %16, align 16
  tail call void @vpx_free(i8* %17) #10
  store i32* null, i32** %15, align 16
  %18 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %2, i64 0, i32 134
  %19 = load i8*, i8** %18, align 16
  tail call void @vpx_free(i8* %19) #10
  store i8* null, i8** %18, align 16
  %20 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %2, i64 0, i32 137
  %21 = load i8*, i8** %20, align 16
  tail call void @vpx_free(i8* %21) #10
  store i8* null, i8** %20, align 16
  %22 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %2, i64 0, i32 19
  tail call void @vp8_de_alloc_frame_buffers(%struct.VP8Common* %22) #10
  %23 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %2, i64 0, i32 37
  %24 = tail call i32 @vp8_yv12_de_alloc_frame_buffer(%struct.yv12_buffer_config* %23) #10
  %25 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %2, i64 0, i32 28
  %26 = tail call i32 @vp8_yv12_de_alloc_frame_buffer(%struct.yv12_buffer_config* %25) #10
  %27 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %2, i64 0, i32 22
  %28 = load %struct.lookahead_ctx*, %struct.lookahead_ctx** %27, align 8
  tail call void @vp8_lookahead_destroy(%struct.lookahead_ctx* %28) #10
  %29 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %2, i64 0, i32 38
  %30 = bitcast %struct.TOKENEXTRA** %29 to i8**
  %31 = load i8*, i8** %30, align 32
  tail call void @vpx_free(i8* %31) #10
  store %struct.TOKENEXTRA* null, %struct.TOKENEXTRA** %29, align 32
  %32 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %2, i64 0, i32 190
  %33 = load i8*, i8** %32, align 16
  tail call void @vpx_free(i8* %33) #10
  store i8* null, i8** %32, align 16
  %34 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %2, i64 0, i32 189
  %35 = bitcast i32** %34 to i8**
  %36 = load i8*, i8** %35, align 8
  tail call void @vpx_free(i8* %36) #10
  store i32* null, i32** %34, align 8
  %37 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %2, i64 0, i32 18, i32 9
  %38 = bitcast %struct.PARTITION_INFO** %37 to i8**
  %39 = load i8*, i8** %38, align 16
  tail call void @vpx_free(i8* %39) #10
  store %struct.PARTITION_INFO* null, %struct.PARTITION_INFO** %37, align 16
  %40 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %2, i64 0, i32 155
  %41 = bitcast %struct.vpx_atomic_int** %40 to i8**
  %42 = load i8*, i8** %41, align 16
  tail call void @vpx_free(i8* %42) #10
  store %struct.vpx_atomic_int* null, %struct.vpx_atomic_int** %40, align 16
  %43 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %2, i64 0, i32 18, i32 11
  %44 = bitcast %struct.search_site** %43 to i8**
  %45 = load i8*, i8** %44, align 8
  tail call void @vpx_free(i8* %45) #10
  %46 = load i8*, i8** %30, align 32
  tail call void @vpx_free(i8* %46) #10
  %47 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %2, i64 0, i32 133
  %48 = load i8*, i8** %47, align 8
  tail call void @vpx_free(i8* %48) #10
  %49 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %2, i64 0, i32 143
  %50 = load i8*, i8** %49, align 16
  tail call void @vpx_free(i8* %50) #10
  %51 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %2, i64 0, i32 144
  %52 = load i8*, i8** %51, align 8
  tail call void @vpx_free(i8* %52) #10
  %53 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %2, i64 0, i32 145
  %54 = load i8*, i8** %53, align 32
  tail call void @vpx_free(i8* %54) #10
  tail call void @vp8_remove_common(%struct.VP8Common* %22) #10
  %55 = bitcast %struct.VP8_COMP* %2 to i8*
  tail call void @vpx_free(i8* nonnull %55) #10
  store %struct.VP8_COMP* null, %struct.VP8_COMP** %0, align 8
  br label %56

56:                                               ; preds = %1, %4
  ret void
}

declare void @vp8_create_common(%struct.VP8Common*) local_unnamed_addr #1

declare i32 @vp8cx_create_encoder_threads(%struct.VP8_COMP*) local_unnamed_addr #1

declare i32 @vpx_sad16x16_sse2(i8*, i32, i8*, i32) #1

declare void @vpx_sad16x16x4d_sse2(i8*, i32, i8**, i32, i32*) #1

declare i32 @vpx_sad16x8_sse2(i8*, i32, i8*, i32) #1

declare void @vpx_sad16x8x4d_sse2(i8*, i32, i8**, i32, i32*) #1

declare i32 @vpx_sad8x16_sse2(i8*, i32, i8*, i32) #1

declare i32 @vpx_variance8x16_sse2(i8*, i32, i8*, i32, i32*) #1

declare void @vpx_sad8x16x4d_sse2(i8*, i32, i8**, i32, i32*) #1

declare i32 @vpx_sad8x8_sse2(i8*, i32, i8*, i32) #1

declare i32 @vpx_variance8x8_sse2(i8*, i32, i8*, i32, i32*) #1

declare void @vpx_sad8x8x4d_sse2(i8*, i32, i8**, i32, i32*) #1

declare i32 @vpx_sad4x4_sse2(i8*, i32, i8*, i32) #1

declare i32 @vpx_variance4x4_sse2(i8*, i32, i8*, i32, i32*) #1

declare void @vpx_sad4x4x4d_sse2(i8*, i32, i8**, i32, i32*) #1

declare i32 @vp8_diamond_search_sadx4(%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, %union.int_mv*, i32, i32, i32*, %struct.variance_vtable*, i32**, %union.int_mv*) #1

declare i32 @vp8_refining_search_sadx4(%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, i32, i32, %struct.variance_vtable*, i32**, %union.int_mv*) #1

declare void @vp8_loop_filter_init(%struct.VP8Common*) local_unnamed_addr #1

declare void @vp8_cal_low_res_mb_cols(%struct.VP8_COMP*) local_unnamed_addr #1

declare void @vp8_setup_block_ptrs(%struct.macroblock*) local_unnamed_addr #1

declare void @vp8_setup_block_dptrs(%struct.macroblockd*) local_unnamed_addr #1

declare void @vp8cx_remove_encoder_threads(%struct.VP8_COMP*) local_unnamed_addr #1

declare void @vp8_remove_common(%struct.VP8Common*) local_unnamed_addr #1

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden i32 @vp8_use_as_reference(%struct.VP8_COMP* nocapture, i32) local_unnamed_addr #6 {
  %3 = icmp sgt i32 %1, 7
  br i1 %3, label %6, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 129
  store i32 %1, i32* %5, align 4
  br label %6

6:                                                ; preds = %2, %4
  %7 = phi i32 [ 0, %4 ], [ -1, %2 ]
  ret i32 %7
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden i32 @vp8_update_reference(%struct.VP8_COMP* nocapture, i32) local_unnamed_addr #6 {
  %3 = icmp sgt i32 %1, 7
  br i1 %3, label %18, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 50
  store i32 0, i32* %5, align 16
  %6 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 51
  store i32 0, i32* %6, align 4
  %7 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 49
  %8 = and i32 %1, 1
  store i32 %8, i32* %7, align 4
  %9 = and i32 %1, 2
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %12, label %11

11:                                               ; preds = %4
  store i32 1, i32* %5, align 16
  br label %12

12:                                               ; preds = %4, %11
  %13 = and i32 %1, 4
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %16, label %15

15:                                               ; preds = %12
  store i32 1, i32* %6, align 4
  br label %16

16:                                               ; preds = %12, %15
  %17 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 221
  store i32 1, i32* %17, align 16
  br label %18

18:                                               ; preds = %2, %16
  %19 = phi i32 [ 0, %16 ], [ -1, %2 ]
  ret i32 %19
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vp8_get_reference(%struct.VP8_COMP*, i32, %struct.yv12_buffer_config*) local_unnamed_addr #0 {
  switch i32 %1, label %15 [
    i32 1, label %4
    i32 2, label %6
    i32 4, label %8
  ]

4:                                                ; preds = %3
  %5 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 14
  br label %10

6:                                                ; preds = %3
  %7 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 15
  br label %10

8:                                                ; preds = %3
  %9 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 16
  br label %10

10:                                               ; preds = %6, %8, %4
  %11 = phi i32* [ %5, %4 ], [ %7, %6 ], [ %9, %8 ]
  %12 = load i32, i32* %11, align 4
  %13 = sext i32 %12 to i64
  %14 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 11, i64 %13
  tail call void @vp8_yv12_copy_frame_c(%struct.yv12_buffer_config* %14, %struct.yv12_buffer_config* %2) #10
  br label %15

15:                                               ; preds = %3, %10
  %16 = phi i32 [ 0, %10 ], [ -1, %3 ]
  ret i32 %16
}

declare void @vp8_yv12_copy_frame_c(%struct.yv12_buffer_config*, %struct.yv12_buffer_config*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vp8_set_reference(%struct.VP8_COMP*, i32, %struct.yv12_buffer_config*) local_unnamed_addr #0 {
  switch i32 %1, label %15 [
    i32 1, label %4
    i32 2, label %6
    i32 4, label %8
  ]

4:                                                ; preds = %3
  %5 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 14
  br label %10

6:                                                ; preds = %3
  %7 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 15
  br label %10

8:                                                ; preds = %3
  %9 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 16
  br label %10

10:                                               ; preds = %6, %8, %4
  %11 = phi i32* [ %5, %4 ], [ %7, %6 ], [ %9, %8 ]
  %12 = load i32, i32* %11, align 4
  %13 = sext i32 %12 to i64
  %14 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 11, i64 %13
  tail call void @vp8_yv12_copy_frame_c(%struct.yv12_buffer_config* %2, %struct.yv12_buffer_config* %14) #10
  br label %15

15:                                               ; preds = %3, %10
  %16 = phi i32 [ 0, %10 ], [ -1, %3 ]
  ret i32 %16
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden i32 @vp8_update_entropy(%struct.VP8_COMP* nocapture, i32) local_unnamed_addr #6 {
  %3 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 54
  store i32 %1, i32* %3, align 16
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vp8_loopfilter_frame(%struct.VP8_COMP*, %struct.VP8Common*) local_unnamed_addr #0 {
  %3 = alloca %struct.vpx_usec_timer, align 8
  %4 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %1, i64 0, i32 23
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 49
  %7 = load i32, i32* %6, align 4
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %18

9:                                                ; preds = %2
  %10 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 50
  %11 = load i32, i32* %10, align 16
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %18

13:                                               ; preds = %9
  %14 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 51
  %15 = load i32, i32* %14, align 4
  %16 = icmp ne i32 %15, 0
  %17 = zext i1 %16 to i32
  br label %18

18:                                               ; preds = %13, %9, %2
  %19 = phi i32 [ 1, %9 ], [ 1, %2 ], [ %17, %13 ]
  %20 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %1, i64 0, i32 31
  %21 = load i32, i32* %20, align 4
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %25, label %23

23:                                               ; preds = %18
  %24 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %1, i64 0, i32 46
  store i32 0, i32* %24, align 16
  br label %82

25:                                               ; preds = %18
  %26 = bitcast %struct.vpx_usec_timer* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %26) #10
  %27 = getelementptr inbounds %struct.vpx_usec_timer, %struct.vpx_usec_timer* %3, i64 0, i32 0, i32 0
  %28 = getelementptr inbounds %struct.vpx_usec_timer, %struct.vpx_usec_timer* %3, i64 0, i32 0, i32 1
  %29 = getelementptr inbounds %struct.vpx_usec_timer, %struct.vpx_usec_timer* %3, i64 0, i32 1, i32 0
  %30 = getelementptr inbounds %struct.vpx_usec_timer, %struct.vpx_usec_timer* %3, i64 0, i32 1, i32 1
  %31 = bitcast %struct.vpx_usec_timer* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %31, i8 -86, i64 32, i1 false)
  tail call void @vpx_clear_system_state() #10
  %32 = getelementptr inbounds %struct.vpx_usec_timer, %struct.vpx_usec_timer* %3, i64 0, i32 0
  %33 = call i32 @gettimeofday(%struct.timeval* nonnull %32, i8* null) #10
  %34 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 130, i32 4
  %35 = load i32, i32* %34, align 16
  %36 = icmp eq i32 %35, 0
  %37 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 5
  %38 = load i32, i32* %37, align 8
  %39 = icmp ne i32 %38, 0
  br i1 %36, label %40, label %49

40:                                               ; preds = %25
  br i1 %39, label %41, label %46

41:                                               ; preds = %40
  %42 = load i32, i32* %4, align 4
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %46, label %44

44:                                               ; preds = %41
  %45 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 200, i32 0, i64 0
  tail call void @vp8cx_pick_filter_level_fast(%struct.yv12_buffer_config* %45, %struct.VP8_COMP* %0) #10
  br label %58

46:                                               ; preds = %41, %40
  %47 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 26
  %48 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %47, align 8
  tail call void @vp8cx_pick_filter_level_fast(%struct.yv12_buffer_config* %48, %struct.VP8_COMP* %0) #10
  br label %58

49:                                               ; preds = %25
  br i1 %39, label %50, label %55

50:                                               ; preds = %49
  %51 = load i32, i32* %4, align 4
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %55, label %53

53:                                               ; preds = %50
  %54 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 200, i32 0, i64 0
  tail call void @vp8cx_pick_filter_level(%struct.yv12_buffer_config* %54, %struct.VP8_COMP* %0) #10
  br label %58

55:                                               ; preds = %50, %49
  %56 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 26
  %57 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %56, align 8
  tail call void @vp8cx_pick_filter_level(%struct.yv12_buffer_config* %57, %struct.VP8_COMP* %0) #10
  br label %58

58:                                               ; preds = %53, %55, %44, %46
  %59 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %1, i64 0, i32 46
  %60 = load i32, i32* %59, align 16
  %61 = icmp sgt i32 %60, 0
  br i1 %61, label %62, label %63

62:                                               ; preds = %58
  tail call void @vp8cx_set_alt_lf_level(%struct.VP8_COMP* %0, i32 %60) #10
  br label %63

63:                                               ; preds = %62, %58
  %64 = getelementptr inbounds %struct.vpx_usec_timer, %struct.vpx_usec_timer* %3, i64 0, i32 1
  %65 = call i32 @gettimeofday(%struct.timeval* %64, i8* null) #10
  %66 = load i64, i64* %29, align 8
  %67 = load i64, i64* %27, align 8
  %68 = sub i64 %66, %67
  %69 = load i64, i64* %30, align 8
  %70 = load i64, i64* %28, align 8
  %71 = sub nsw i64 %69, %70
  %72 = icmp slt i64 %71, 0
  %73 = add nsw i64 %71, 1000000
  %74 = select i1 %72, i64 %73, i64 %71
  %75 = ashr i64 %71, 63
  %76 = add nsw i64 %68, %75
  %77 = mul nsw i64 %76, 1000000
  %78 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 180
  %79 = load i64, i64* %78, align 16
  %80 = add i64 %74, %79
  %81 = add i64 %80, %77
  store i64 %81, i64* %78, align 16
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %26) #10
  br label %82

82:                                               ; preds = %63, %23
  %83 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 157, i32 0
  %84 = load atomic volatile i32, i32* %83 acquire, align 4
  %85 = icmp eq i32 %84, 0
  br i1 %85, label %89, label %86

86:                                               ; preds = %82
  %87 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 168
  %88 = tail call i32 @sem_post(%union.sem_t* %87) #10
  br label %89

89:                                               ; preds = %82, %86
  %90 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %1, i64 0, i32 46
  %91 = load i32, i32* %90, align 16
  %92 = icmp sgt i32 %91, 0
  %93 = icmp ne i32 %19, 0
  %94 = and i1 %93, %92
  br i1 %94, label %95, label %97

95:                                               ; preds = %89
  %96 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 6
  tail call void @vp8_loop_filter_frame(%struct.VP8Common* %1, %struct.macroblockd* %96, i32 %5) #10
  br label %97

97:                                               ; preds = %95, %89
  %98 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %1, i64 0, i32 10
  %99 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %98, align 8
  tail call void @vp8_yv12_extend_frame_borders_c(%struct.yv12_buffer_config* %99) #10
  ret void
}

declare void @vpx_clear_system_state() local_unnamed_addr #1

declare void @vp8cx_pick_filter_level_fast(%struct.yv12_buffer_config*, %struct.VP8_COMP*) local_unnamed_addr #1

declare void @vp8cx_pick_filter_level(%struct.yv12_buffer_config*, %struct.VP8_COMP*) local_unnamed_addr #1

declare void @vp8cx_set_alt_lf_level(%struct.VP8_COMP*, i32) local_unnamed_addr #1

; Function Attrs: nounwind
declare i32 @sem_post(%union.sem_t*) local_unnamed_addr #7

declare void @vp8_loop_filter_frame(%struct.VP8Common*, %struct.macroblockd*, i32) local_unnamed_addr #1

declare void @vp8_yv12_extend_frame_borders_c(%struct.yv12_buffer_config*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vp8_receive_raw_frame(%struct.VP8_COMP*, i32, %struct.yv12_buffer_config*, i64, i64) local_unnamed_addr #0 {
  %6 = alloca %struct.vpx_usec_timer, align 8
  %7 = bitcast %struct.vpx_usec_timer* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %7) #10
  %8 = getelementptr inbounds %struct.vpx_usec_timer, %struct.vpx_usec_timer* %6, i64 0, i32 0, i32 0
  %9 = getelementptr inbounds %struct.vpx_usec_timer, %struct.vpx_usec_timer* %6, i64 0, i32 0, i32 1
  %10 = getelementptr inbounds %struct.vpx_usec_timer, %struct.vpx_usec_timer* %6, i64 0, i32 1, i32 0
  %11 = getelementptr inbounds %struct.vpx_usec_timer, %struct.vpx_usec_timer* %6, i64 0, i32 1, i32 1
  %12 = getelementptr inbounds %struct.vpx_usec_timer, %struct.vpx_usec_timer* %6, i64 0, i32 0
  %13 = bitcast %struct.vpx_usec_timer* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %13, i8 -86, i64 32, i1 false)
  %14 = call i32 @gettimeofday(%struct.timeval* nonnull %12, i8* null) #10
  %15 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %2, i64 0, i32 0
  %16 = load i32, i32* %15, align 8
  %17 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 1
  %18 = load i32, i32* %17, align 4
  %19 = icmp eq i32 %16, %18
  br i1 %19, label %20, label %26

20:                                               ; preds = %5
  %21 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %2, i64 0, i32 1
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 2
  %24 = load i32, i32* %23, align 8
  %25 = icmp eq i32 %22, %24
  br i1 %25, label %38, label %26

26:                                               ; preds = %20, %5
  %27 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 22
  %28 = load %struct.lookahead_ctx*, %struct.lookahead_ctx** %27, align 8
  tail call void @vp8_lookahead_destroy(%struct.lookahead_ctx* %28) #10
  %29 = load i32, i32* %17, align 4
  %30 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 2
  %31 = load i32, i32* %30, align 8
  %32 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 15
  %33 = load i32, i32* %32, align 8
  %34 = tail call %struct.lookahead_ctx* @vp8_lookahead_init(i32 %29, i32 %31, i32 %33) #10
  store %struct.lookahead_ctx* %34, %struct.lookahead_ctx** %27, align 8
  %35 = icmp eq %struct.lookahead_ctx* %34, null
  br i1 %35, label %36, label %38

36:                                               ; preds = %26
  %37 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 0
  tail call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %37, i32 2, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.20, i64 0, i64 0)) #10
  br label %38

38:                                               ; preds = %36, %26, %20
  %39 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 22
  %40 = load %struct.lookahead_ctx*, %struct.lookahead_ctx** %39, align 8
  %41 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 138
  %42 = load i32, i32* %41, align 8
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %47, label %44

44:                                               ; preds = %38
  %45 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 137
  %46 = load i8*, i8** %45, align 16
  br label %47

47:                                               ; preds = %38, %44
  %48 = phi i8* [ %46, %44 ], [ null, %38 ]
  %49 = tail call i32 @vp8_lookahead_push(%struct.lookahead_ctx* %40, %struct.yv12_buffer_config* %2, i64 %3, i64 %4, i32 %1, i8* %48) #10
  %50 = icmp ne i32 %49, 0
  %51 = sext i1 %50 to i32
  %52 = getelementptr inbounds %struct.vpx_usec_timer, %struct.vpx_usec_timer* %6, i64 0, i32 1
  %53 = call i32 @gettimeofday(%struct.timeval* %52, i8* null) #10
  %54 = load i64, i64* %10, align 8
  %55 = load i64, i64* %8, align 8
  %56 = sub i64 %54, %55
  %57 = load i64, i64* %11, align 8
  %58 = load i64, i64* %9, align 8
  %59 = sub nsw i64 %57, %58
  %60 = icmp slt i64 %59, 0
  %61 = add nsw i64 %59, 1000000
  %62 = select i1 %60, i64 %61, i64 %59
  %63 = ashr i64 %59, 63
  %64 = add nsw i64 %56, %63
  %65 = mul nsw i64 %64, 1000000
  %66 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 178
  %67 = load i64, i64* %66, align 32
  %68 = add i64 %62, %67
  %69 = add i64 %68, %65
  store i64 %69, i64* %66, align 32
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %7) #10
  ret i32 %51
}

declare i32 @vp8_lookahead_push(%struct.lookahead_ctx*, %struct.yv12_buffer_config*, i64, i64, i32, i8*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vp8_get_compressed_data(%struct.VP8_COMP*, i32* nocapture, i64*, i8*, i8*, i64* nocapture, i64* nocapture, i32) local_unnamed_addr #0 {
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca %struct.vpx_codec_cx_pkt, align 8
  %16 = alloca %struct.vpx_usec_timer, align 8
  %17 = alloca %struct.vpx_usec_timer, align 8
  %18 = alloca %struct.vpx_usec_timer, align 8
  %19 = bitcast %struct.vpx_usec_timer* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %19) #10
  %20 = bitcast %struct.vpx_usec_timer* %17 to i8*
  %21 = bitcast %struct.vpx_usec_timer* %16 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %21, i8 -86, i64 32, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %20) #10
  %22 = getelementptr inbounds %struct.vpx_usec_timer, %struct.vpx_usec_timer* %17, i64 0, i32 0, i32 0
  %23 = getelementptr inbounds %struct.vpx_usec_timer, %struct.vpx_usec_timer* %17, i64 0, i32 0, i32 1
  %24 = getelementptr inbounds %struct.vpx_usec_timer, %struct.vpx_usec_timer* %17, i64 0, i32 1, i32 0
  %25 = getelementptr inbounds %struct.vpx_usec_timer, %struct.vpx_usec_timer* %17, i64 0, i32 1, i32 1
  %26 = bitcast %struct.vpx_usec_timer* %18 to i8*
  %27 = bitcast %struct.vpx_usec_timer* %17 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %27, i8 -86, i64 32, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %26) #10
  %28 = getelementptr inbounds %struct.vpx_usec_timer, %struct.vpx_usec_timer* %18, i64 0, i32 0, i32 0
  %29 = getelementptr inbounds %struct.vpx_usec_timer, %struct.vpx_usec_timer* %18, i64 0, i32 0, i32 1
  %30 = getelementptr inbounds %struct.vpx_usec_timer, %struct.vpx_usec_timer* %18, i64 0, i32 1, i32 0
  %31 = getelementptr inbounds %struct.vpx_usec_timer, %struct.vpx_usec_timer* %18, i64 0, i32 1, i32 1
  %32 = icmp eq %struct.VP8_COMP* %0, null
  %33 = bitcast %struct.vpx_usec_timer* %18 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %33, i8 -86, i64 32, i1 false)
  br i1 %32, label %3271, label %34

34:                                               ; preds = %8
  %35 = getelementptr inbounds %struct.vpx_usec_timer, %struct.vpx_usec_timer* %18, i64 0, i32 0
  %36 = call i32 @gettimeofday(%struct.timeval* nonnull %35, i8* null) #10
  %37 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 23
  store %struct.lookahead_entry* null, %struct.lookahead_entry** %37, align 16
  %38 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 119
  %39 = load i32, i32* %38, align 8
  %40 = icmp eq i32 %39, 1
  br i1 %40, label %41, label %51

41:                                               ; preds = %34
  %42 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 60
  %43 = load i32, i32* %42, align 4
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %51, label %45

45:                                               ; preds = %41
  %46 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 22
  %47 = load %struct.lookahead_ctx*, %struct.lookahead_ctx** %46, align 8
  %48 = tail call %struct.lookahead_entry* @vp8_lookahead_peek(%struct.lookahead_ctx* %47, i32 1, i32 -1) #10
  %49 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 25
  store %struct.lookahead_entry* %48, %struct.lookahead_entry** %49, align 32
  %50 = icmp eq %struct.lookahead_entry* %48, null
  br i1 %50, label %3271, label %51

51:                                               ; preds = %41, %45, %34
  %52 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 22
  %53 = load %struct.lookahead_ctx*, %struct.lookahead_ctx** %52, align 8
  %54 = tail call %struct.lookahead_entry* @vp8_lookahead_pop(%struct.lookahead_ctx* %53, i32 %7) #10
  store %struct.lookahead_entry* %54, %struct.lookahead_entry** %37, align 16
  %55 = icmp eq %struct.lookahead_entry* %54, null
  br i1 %55, label %91, label %56

56:                                               ; preds = %51
  %57 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 24
  store i32 1, i32* %57, align 8
  %58 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 24
  %59 = load %struct.lookahead_entry*, %struct.lookahead_entry** %58, align 8
  %60 = icmp eq %struct.lookahead_entry* %59, null
  br i1 %60, label %61, label %63

61:                                               ; preds = %56
  %62 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 33
  store i32 0, i32* %62, align 4
  br label %68

63:                                               ; preds = %56
  %64 = icmp eq %struct.lookahead_entry* %54, %59
  %65 = zext i1 %64 to i32
  %66 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 33
  store i32 %65, i32* %66, align 4
  br i1 %64, label %67, label %68

67:                                               ; preds = %63
  store %struct.lookahead_entry* null, %struct.lookahead_entry** %58, align 8
  br label %68

68:                                               ; preds = %61, %67, %63
  %69 = getelementptr inbounds %struct.lookahead_entry, %struct.lookahead_entry* %54, i64 0, i32 0
  %70 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 26
  store %struct.yv12_buffer_config* %69, %struct.yv12_buffer_config** %70, align 8
  %71 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 27
  store %struct.yv12_buffer_config* %69, %struct.yv12_buffer_config** %71, align 16
  %72 = getelementptr inbounds %struct.lookahead_entry, %struct.lookahead_entry* %54, i64 0, i32 1
  %73 = load i64, i64* %72, align 8
  store i64 %73, i64* %5, align 8
  %74 = load %struct.lookahead_entry*, %struct.lookahead_entry** %37, align 16
  %75 = getelementptr inbounds %struct.lookahead_entry, %struct.lookahead_entry* %74, i64 0, i32 2
  %76 = load i64, i64* %75, align 8
  store i64 %76, i64* %6, align 8
  %77 = load %struct.lookahead_entry*, %struct.lookahead_entry** %37, align 16
  %78 = getelementptr inbounds %struct.lookahead_entry, %struct.lookahead_entry* %77, i64 0, i32 3
  %79 = load i32, i32* %78, align 8
  store i32 %79, i32* %1, align 4
  %80 = load i32, i32* %38, align 8
  %81 = icmp eq i32 %80, 1
  br i1 %81, label %82, label %92

82:                                               ; preds = %68
  %83 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 60
  %84 = load i32, i32* %83, align 4
  %85 = icmp eq i32 %84, 0
  br i1 %85, label %92, label %86

86:                                               ; preds = %82
  %87 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 25
  %88 = load %struct.lookahead_entry*, %struct.lookahead_entry** %87, align 32
  %89 = getelementptr inbounds %struct.lookahead_entry, %struct.lookahead_entry* %88, i64 0, i32 0
  %90 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 29
  store %struct.yv12_buffer_config* %89, %struct.yv12_buffer_config** %90, align 8
  br label %92

91:                                               ; preds = %51
  store i64 0, i64* %2, align 8
  br label %3271

92:                                               ; preds = %82, %68, %86
  %93 = load %struct.lookahead_entry*, %struct.lookahead_entry** %37, align 16
  %94 = getelementptr inbounds %struct.lookahead_entry, %struct.lookahead_entry* %93, i64 0, i32 1
  %95 = load i64, i64* %94, align 8
  %96 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 77
  %97 = load i64, i64* %96, align 8
  %98 = icmp slt i64 %95, %97
  br i1 %98, label %99, label %102

99:                                               ; preds = %92
  store i64 %95, i64* %96, align 8
  %100 = load i64, i64* %94, align 8
  %101 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 76
  store i64 %100, i64* %101, align 32
  br label %102

102:                                              ; preds = %99, %92
  %103 = phi i64 [ %95, %99 ], [ %97, %92 ]
  %104 = load i32, i32* %57, align 8
  %105 = icmp eq i32 %104, 0
  br i1 %105, label %249, label %106

106:                                              ; preds = %102
  %107 = load i64, i64* %94, align 8
  %108 = icmp eq i64 %107, %103
  %109 = getelementptr inbounds %struct.lookahead_entry, %struct.lookahead_entry* %93, i64 0, i32 2
  %110 = load i64, i64* %109, align 8
  br i1 %108, label %111, label %113

111:                                              ; preds = %106
  %112 = sub nsw i64 %110, %103
  br label %126

113:                                              ; preds = %106
  %114 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 76
  %115 = load i64, i64* %114, align 32
  %116 = sub nsw i64 %110, %115
  %117 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 75
  %118 = load i64, i64* %117, align 8
  %119 = sub nsw i64 %115, %118
  %120 = icmp eq i64 %119, 0
  br i1 %120, label %126, label %121

121:                                              ; preds = %113
  %122 = sub nsw i64 %116, %119
  %123 = mul nsw i64 %122, 10
  %124 = sdiv i64 %123, %119
  %125 = trunc i64 %124 to i32
  br label %126

126:                                              ; preds = %121, %113, %111
  %127 = phi i64 [ %112, %111 ], [ %116, %113 ], [ %116, %121 ]
  %128 = phi i32 [ 1, %111 ], [ 0, %113 ], [ %125, %121 ]
  %129 = icmp eq i64 %127, 0
  br i1 %129, label %241, label %130

130:                                              ; preds = %126
  %131 = icmp eq i32 %128, 0
  br i1 %131, label %136, label %132

132:                                              ; preds = %130
  %133 = sitofp i64 %127 to double
  %134 = fdiv double 1.000000e+07, %133
  %135 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 85
  store double %134, double* %135, align 8
  br label %150

136:                                              ; preds = %130
  %137 = sub nsw i64 %110, %103
  %138 = icmp slt i64 %137, 10000000
  %139 = select i1 %138, i64 %137, i64 10000000
  %140 = sitofp i64 %139 to double
  %141 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 85
  %142 = load double, double* %141, align 8
  %143 = fdiv double 1.000000e+07, %142
  %144 = fsub double %140, %143
  %145 = sitofp i64 %127 to double
  %146 = fadd double %144, %145
  %147 = fmul double %143, %146
  %148 = fdiv double %147, %140
  %149 = fdiv double 1.000000e+07, %148
  store double %149, double* %141, align 8
  br label %150

150:                                              ; preds = %136, %132
  %151 = phi double [ %149, %136 ], [ %134, %132 ]
  %152 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 57
  %153 = load i32, i32* %152, align 4
  %154 = icmp ugt i32 %153, 1
  br i1 %154, label %155, label %175

155:                                              ; preds = %150
  %156 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 60
  %157 = bitcast i8** %156 to %struct.LOWER_RES_FRAME_INFO**
  %158 = load %struct.LOWER_RES_FRAME_INFO*, %struct.LOWER_RES_FRAME_INFO** %157, align 8
  %159 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 58
  %160 = load i32, i32* %159, align 8
  %161 = icmp eq i32 %160, 0
  br i1 %161, label %172, label %162

162:                                              ; preds = %155
  %163 = getelementptr inbounds %struct.LOWER_RES_FRAME_INFO, %struct.LOWER_RES_FRAME_INFO* %158, i64 0, i32 7
  %164 = load i32, i32* %163, align 8
  %165 = icmp eq i32 %164, 0
  br i1 %165, label %166, label %175

166:                                              ; preds = %162
  %167 = getelementptr inbounds %struct.LOWER_RES_FRAME_INFO, %struct.LOWER_RES_FRAME_INFO* %158, i64 0, i32 3
  %168 = bitcast double* %167 to i64*
  %169 = load i64, i64* %168, align 8
  %170 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 85
  %171 = bitcast double* %170 to i64*
  store i64 %169, i64* %171, align 8
  br label %175

172:                                              ; preds = %155
  %173 = getelementptr inbounds %struct.LOWER_RES_FRAME_INFO, %struct.LOWER_RES_FRAME_INFO* %158, i64 0, i32 3
  store double %151, double* %173, align 8
  %174 = getelementptr inbounds %struct.LOWER_RES_FRAME_INFO, %struct.LOWER_RES_FRAME_INFO* %158, i64 0, i32 7
  store i32 0, i32* %174, align 8
  br label %175

175:                                              ; preds = %172, %166, %162, %150
  %176 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 52
  %177 = load i32, i32* %176, align 4
  %178 = icmp ugt i32 %177, 1
  %179 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 85
  %180 = load double, double* %179, align 8
  br i1 %178, label %181, label %193

181:                                              ; preds = %175
  %182 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 54, i64 0
  %183 = load i32, i32* %182, align 4
  %184 = uitofp i32 %183 to double
  %185 = fdiv double %180, %184
  %186 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 0, i32 0
  store double %185, double* %186, align 8
  %187 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 54, i64 1
  %188 = load i32, i32* %187, align 4
  %189 = uitofp i32 %188 to double
  %190 = fdiv double %180, %189
  %191 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 1, i32 0
  store double %190, double* %191, align 8
  %192 = icmp eq i32 %177, 2
  br i1 %192, label %241, label %3292

193:                                              ; preds = %175
  %194 = fcmp olt double %180, 1.000000e-01
  %195 = select i1 %194, double 3.000000e+01, double %180
  %196 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 84
  store double %195, double* %196, align 16
  %197 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 74
  store double %195, double* %197, align 16
  %198 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 4
  %199 = load i32, i32* %198, align 4
  %200 = uitofp i32 %199 to double
  %201 = fdiv double %200, %195
  %202 = fptosi double %201 to i32
  %203 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 70
  store i32 %202, i32* %203, align 4
  %204 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 71
  store i32 %202, i32* %204, align 32
  %205 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 35
  %206 = load i32, i32* %205, align 8
  %207 = mul nsw i32 %206, %202
  %208 = sdiv i32 %207, 100
  %209 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 72
  store i32 %208, i32* %209, align 4
  %210 = fmul double %195, 5.000000e-01
  %211 = fptosi double %210 to i32
  %212 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 65
  %213 = icmp sgt i32 %211, 10
  %214 = select i1 %213, i32 %211, i32 10
  %215 = add nuw nsw i32 %214, 2
  store i32 %215, i32* %212, align 4
  %216 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 41
  %217 = load i32, i32* %216, align 16
  %218 = lshr i32 %217, 1
  %219 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 186, i32 23
  store i32 %218, i32* %219, align 8
  %220 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 37
  %221 = load i32, i32* %220, align 8
  %222 = icmp eq i32 %221, 0
  br i1 %222, label %236, label %223

223:                                              ; preds = %193
  %224 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 15
  %225 = load i32, i32* %224, align 8
  %226 = icmp eq i32 %225, 0
  br i1 %226, label %236, label %227

227:                                              ; preds = %223
  %228 = icmp slt i32 %215, %225
  br i1 %228, label %231, label %229

229:                                              ; preds = %227
  %230 = add nsw i32 %225, -1
  store i32 %230, i32* %212, align 4
  br label %231

231:                                              ; preds = %229, %227
  %232 = phi i32 [ %215, %227 ], [ %230, %229 ]
  %233 = icmp slt i32 %218, %225
  br i1 %233, label %236, label %234

234:                                              ; preds = %231
  %235 = add nsw i32 %225, -1
  store i32 %235, i32* %219, align 8
  br label %236

236:                                              ; preds = %234, %231, %223, %193
  %237 = phi i32 [ %218, %231 ], [ %218, %223 ], [ %218, %193 ], [ %235, %234 ]
  %238 = phi i32 [ %232, %231 ], [ %215, %223 ], [ %215, %193 ], [ %232, %234 ]
  %239 = icmp sgt i32 %238, %237
  br i1 %239, label %240, label %241

240:                                              ; preds = %236
  store i32 %237, i32* %212, align 4
  br label %241

241:                                              ; preds = %3292, %3306, %181, %3299, %240, %236, %126
  %242 = load %struct.lookahead_entry*, %struct.lookahead_entry** %37, align 16
  %243 = getelementptr inbounds %struct.lookahead_entry, %struct.lookahead_entry* %242, i64 0, i32 1
  %244 = load i64, i64* %243, align 8
  %245 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 75
  store i64 %244, i64* %245, align 8
  %246 = getelementptr inbounds %struct.lookahead_entry, %struct.lookahead_entry* %242, i64 0, i32 2
  %247 = load i64, i64* %246, align 8
  %248 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 76
  store i64 %247, i64* %248, align 32
  br label %249

249:                                              ; preds = %102, %241
  %250 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 52
  %251 = load i32, i32* %250, align 4
  %252 = icmp ugt i32 %251, 1
  br i1 %252, label %253, label %487

253:                                              ; preds = %249
  %254 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 85
  %255 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 22
  %256 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 20
  %257 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 23
  %258 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 21
  %259 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 24
  %260 = zext i32 %251 to i64
  %261 = load double, double* %254, align 8
  %262 = load i64, i64* %255, align 8
  %263 = load i64, i64* %256, align 8
  %264 = shl i64 %262, 32
  %265 = ashr exact i64 %264, 32
  %266 = icmp eq i64 %263, 0
  br label %267

267:                                              ; preds = %328, %253
  %268 = phi i64 [ 0, %253 ], [ %329, %328 ]
  %269 = phi double [ 0.000000e+00, %253 ], [ %273, %328 ]
  %270 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 54, i64 %268
  %271 = load i32, i32* %270, align 4
  %272 = uitofp i32 %271 to double
  %273 = fdiv double %261, %272
  %274 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %268, i32 0
  store double %273, double* %274, align 8
  %275 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 53, i64 %268
  %276 = load i32, i32* %275, align 4
  %277 = mul i32 %276, 1000
  %278 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %268, i32 1
  store i32 %277, i32* %278, align 8
  %279 = sext i32 %277 to i64
  %280 = mul nsw i64 %265, %279
  %281 = sdiv i64 %280, 1000
  %282 = shl i64 %281, 32
  %283 = ashr exact i64 %282, 32
  %284 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %268, i32 2
  store i64 %283, i64* %284, align 8
  br i1 %266, label %285, label %288

285:                                              ; preds = %267
  %286 = sdiv i32 %277, 8
  %287 = sext i32 %286 to i64
  br label %296

288:                                              ; preds = %267
  %289 = load i64, i64* %257, align 8
  %290 = shl i64 %289, 32
  %291 = ashr exact i64 %290, 32
  %292 = mul nsw i64 %291, %279
  %293 = sdiv i64 %292, 1000
  %294 = shl i64 %293, 32
  %295 = ashr exact i64 %294, 32
  br label %296

296:                                              ; preds = %288, %285
  %297 = phi i64 [ %295, %288 ], [ %287, %285 ]
  %298 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %268, i32 3
  store i64 %297, i64* %298, align 8
  %299 = load i64, i64* %258, align 8
  %300 = icmp eq i64 %299, 0
  br i1 %300, label %301, label %304

301:                                              ; preds = %296
  %302 = sdiv i32 %277, 8
  %303 = sext i32 %302 to i64
  br label %312

304:                                              ; preds = %296
  %305 = load i64, i64* %259, align 8
  %306 = shl i64 %305, 32
  %307 = ashr exact i64 %306, 32
  %308 = mul nsw i64 %307, %279
  %309 = sdiv i64 %308, 1000
  %310 = shl i64 %309, 32
  %311 = ashr exact i64 %310, 32
  br label %312

312:                                              ; preds = %304, %301
  %313 = phi i64 [ %311, %304 ], [ %303, %301 ]
  %314 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %268, i32 4
  store i64 %313, i64* %314, align 8
  %315 = icmp eq i64 %268, 0
  br i1 %315, label %328, label %316

316:                                              ; preds = %312
  %317 = add nuw nsw i64 %268, 4294967295
  %318 = and i64 %317, 4294967295
  %319 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 53, i64 %318
  %320 = load i32, i32* %319, align 4
  %321 = sub i32 %276, %320
  %322 = mul i32 %321, 1000
  %323 = uitofp i32 %322 to double
  %324 = fsub double %273, %269
  %325 = fdiv double %323, %324
  %326 = fptosi double %325 to i32
  %327 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %268, i32 8
  store i32 %326, i32* %327, align 8
  br label %328

328:                                              ; preds = %316, %312
  %329 = add nuw nsw i64 %268, 1
  %330 = icmp ult i64 %329, %260
  %331 = icmp ult i64 %329, 5
  %332 = and i1 %330, %331
  br i1 %332, label %267, label %333

333:                                              ; preds = %328
  %334 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 147
  %335 = load i32, i32* %334, align 4
  %336 = icmp sgt i32 %335, -1
  br i1 %336, label %346, label %337

337:                                              ; preds = %333
  %338 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 146
  %339 = load i32, i32* %338, align 8
  %340 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 55
  %341 = load i32, i32* %340, align 8
  %342 = urem i32 %339, %341
  %343 = zext i32 %342 to i64
  %344 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 56, i64 %343
  %345 = load i32, i32* %344, align 4
  br label %346

346:                                              ; preds = %333, %337
  %347 = phi i32 [ %345, %337 ], [ %335, %333 ]
  %348 = sext i32 %347 to i64
  %349 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 201
  store i32 %347, i32* %349, align 8
  %350 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %348, i32 1
  %351 = load i32, i32* %350, align 8
  %352 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 107
  store i32 %351, i32* %352, align 4
  %353 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 4
  store i32 %351, i32* %353, align 4
  %354 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %348, i32 2
  %355 = load i64, i64* %354, align 8
  %356 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 19
  store i64 %355, i64* %356, align 8
  %357 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %348, i32 3
  %358 = load i64, i64* %357, align 8
  store i64 %358, i64* %256, align 8
  %359 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %348, i32 4
  %360 = load i64, i64* %359, align 8
  store i64 %360, i64* %258, align 8
  %361 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %348, i32 5
  %362 = load i64, i64* %361, align 8
  store i64 %362, i64* %255, align 8
  %363 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %348, i32 6
  %364 = load i64, i64* %363, align 8
  store i64 %364, i64* %257, align 8
  %365 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %348, i32 7
  %366 = load i64, i64* %365, align 8
  store i64 %366, i64* %259, align 8
  %367 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %348, i32 9
  %368 = load i64, i64* %367, align 8
  %369 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 86
  store i64 %368, i64* %369, align 32
  %370 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %348, i32 10
  %371 = load i64, i64* %370, align 8
  %372 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 87
  store i64 %371, i64* %372, align 8
  %373 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %348, i32 11
  %374 = load i64, i64* %373, align 8
  %375 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 92
  store i64 %374, i64* %375, align 32
  %376 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %348, i32 14
  %377 = load i32, i32* %376, align 8
  %378 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 95
  store i32 %377, i32* %378, align 16
  %379 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %348, i32 16
  %380 = load i32, i32* %379, align 8
  %381 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 97
  store i32 %380, i32* %381, align 8
  %382 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %348, i32 17
  %383 = load i32, i32* %382, align 4
  %384 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 78
  store i32 %383, i32* %384, align 16
  %385 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %348, i32 18
  %386 = load i32, i32* %385, align 8
  %387 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 79
  store i32 %386, i32* %387, align 4
  %388 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %348, i32 19
  %389 = load i32, i32* %388, align 4
  %390 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 80
  store i32 %389, i32* %390, align 8
  %391 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %348, i32 20
  %392 = load i32, i32* %391, align 8
  %393 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 81
  store i32 %392, i32* %393, align 4
  %394 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %348, i32 21
  %395 = bitcast double* %394 to i64*
  %396 = load i64, i64* %395, align 8
  %397 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 55
  %398 = bitcast double* %397 to i64*
  store i64 %396, i64* %398, align 32
  %399 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %348, i32 22
  %400 = bitcast double* %399 to i64*
  %401 = load i64, i64* %400, align 8
  %402 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 56
  %403 = bitcast double* %402 to i64*
  store i64 %401, i64* %403, align 8
  %404 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %348, i32 23
  %405 = bitcast double* %404 to i64*
  %406 = load i64, i64* %405, align 8
  %407 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 57
  %408 = bitcast double* %407 to i64*
  store i64 %406, i64* %408, align 16
  %409 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %348, i32 24
  %410 = load i32, i32* %409, align 8
  %411 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 65
  store i32 %410, i32* %411, align 4
  %412 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %348, i32 25
  %413 = load i32, i32* %412, align 4
  %414 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 73
  store i32 %413, i32* %414, align 8
  %415 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %348, i32 26
  %416 = load i64, i64* %415, align 8
  %417 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 82
  store i64 %416, i64* %417, align 32
  %418 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %348, i32 27
  %419 = load i32, i32* %418, align 8
  %420 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 46
  store i32 %419, i32* %420, align 32
  %421 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %348, i32 28
  %422 = load i32, i32* %421, align 4
  %423 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 150
  store i32 %422, i32* %423, align 8
  %424 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %348, i32 29
  %425 = load i32, i32* %424, align 8
  %426 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 149
  store i32 %425, i32* %426, align 4
  %427 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %348, i32 30
  %428 = load i32, i32* %427, align 4
  %429 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 128
  store i32 %428, i32* %429, align 8
  %430 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %348, i32 32, i64 0
  %431 = load i32, i32* %430, align 8
  %432 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 54, i64 0
  store i32 %431, i32* %432, align 8
  %433 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %348, i32 32, i64 1
  %434 = load i32, i32* %433, align 4
  %435 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 54, i64 1
  store i32 %434, i32* %435, align 4
  %436 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 56, i64 0
  %437 = bitcast i32* %436 to i8*
  %438 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %348, i32 31, i64 0
  %439 = bitcast i32* %438 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %437, i8* align 8 %439, i64 16, i1 false) #10
  %440 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %348, i32 0
  %441 = load double, double* %440, align 8
  %442 = fcmp olt double %441, 1.000000e-01
  %443 = select i1 %442, double 3.000000e+01, double %441
  %444 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 84
  store double %443, double* %444, align 16
  %445 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 74
  store double %443, double* %445, align 16
  %446 = uitofp i32 %351 to double
  %447 = fdiv double %446, %443
  %448 = fptosi double %447 to i32
  %449 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 70
  store i32 %448, i32* %449, align 4
  %450 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 71
  store i32 %448, i32* %450, align 32
  %451 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 35
  %452 = load i32, i32* %451, align 8
  %453 = mul nsw i32 %452, %448
  %454 = sdiv i32 %453, 100
  %455 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 72
  store i32 %454, i32* %455, align 4
  %456 = fmul double %443, 5.000000e-01
  %457 = fptosi double %456 to i32
  %458 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 65
  %459 = icmp sgt i32 %457, 10
  %460 = select i1 %459, i32 %457, i32 10
  %461 = add nuw nsw i32 %460, 2
  store i32 %461, i32* %458, align 4
  %462 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 41
  %463 = load i32, i32* %462, align 16
  %464 = lshr i32 %463, 1
  %465 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 186, i32 23
  store i32 %464, i32* %465, align 8
  %466 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 37
  %467 = load i32, i32* %466, align 8
  %468 = icmp eq i32 %467, 0
  br i1 %468, label %482, label %469

469:                                              ; preds = %346
  %470 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 15
  %471 = load i32, i32* %470, align 8
  %472 = icmp eq i32 %471, 0
  br i1 %472, label %482, label %473

473:                                              ; preds = %469
  %474 = icmp slt i32 %461, %471
  br i1 %474, label %477, label %475

475:                                              ; preds = %473
  %476 = add nsw i32 %471, -1
  store i32 %476, i32* %458, align 4
  br label %477

477:                                              ; preds = %475, %473
  %478 = phi i32 [ %461, %473 ], [ %476, %475 ]
  %479 = icmp slt i32 %464, %471
  br i1 %479, label %482, label %480

480:                                              ; preds = %477
  %481 = add nsw i32 %471, -1
  store i32 %481, i32* %465, align 8
  br label %482

482:                                              ; preds = %480, %477, %469, %346
  %483 = phi i32 [ %464, %477 ], [ %464, %469 ], [ %464, %346 ], [ %481, %480 ]
  %484 = phi i32 [ %478, %477 ], [ %461, %469 ], [ %461, %346 ], [ %478, %480 ]
  %485 = icmp sgt i32 %484, %483
  br i1 %485, label %486, label %487

486:                                              ; preds = %482
  store i32 %483, i32* %458, align 4
  br label %487

487:                                              ; preds = %486, %482, %249
  %488 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 114
  %489 = load i32, i32* %488, align 4
  %490 = icmp eq i32 %489, 2
  br i1 %490, label %491, label %496

491:                                              ; preds = %487
  %492 = getelementptr inbounds %struct.vpx_usec_timer, %struct.vpx_usec_timer* %16, i64 0, i32 0
  %493 = call i32 @gettimeofday(%struct.timeval* nonnull %492, i8* null) #10
  %494 = getelementptr inbounds %struct.vpx_usec_timer, %struct.vpx_usec_timer* %17, i64 0, i32 0
  %495 = call i32 @gettimeofday(%struct.timeval* nonnull %494, i8* null) #10
  br label %496

496:                                              ; preds = %491, %487
  %497 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 131
  %498 = load i32, i32* %497, align 4
  %499 = mul nsw i32 %498, 100
  %500 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 26
  %501 = load i32, i32* %500, align 16
  %502 = sdiv i32 %499, %501
  %503 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 132
  store i32 %502, i32* %503, align 32
  store i64 0, i64* %2, align 8
  tail call void @vpx_clear_system_state() #10
  %504 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 23
  store i32 1, i32* %504, align 4
  %505 = load i32, i32* %1, align 4
  %506 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 25
  store i32 %505, i32* %506, align 4
  %507 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 11, i64 0, i32 29
  %508 = load i32, i32* %507, align 8
  %509 = icmp eq i32 %508, 0
  br i1 %509, label %510, label %513

510:                                              ; preds = %3277, %3273, %513, %496
  %511 = phi i32 [ 0, %496 ], [ 1, %513 ], [ 2, %3273 ], [ 3, %3277 ]
  %512 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 13
  store i32 %511, i32* %512, align 16
  br label %517

513:                                              ; preds = %496
  %514 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 11, i64 1, i32 29
  %515 = load i32, i32* %514, align 8
  %516 = icmp eq i32 %515, 0
  br i1 %516, label %510, label %3273

517:                                              ; preds = %3277, %510
  %518 = bitcast i32* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %518) #10
  store i32 -1431655766, i32* %13, align 4
  %519 = bitcast i32* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %519) #10
  store i32 -1431655766, i32* %14, align 4
  %520 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19
  %521 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 33
  %522 = load i32, i32* %521, align 8
  %523 = sext i32 %522 to i64
  %524 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 20
  %525 = load i64, i64* %524, align 8
  %526 = mul nsw i64 %525, %523
  %527 = sdiv i64 %526, 100
  %528 = trunc i64 %527 to i32
  %529 = shl nsw i32 %528, 1
  %530 = sdiv i32 %529, 3
  %531 = sdiv i32 %528, 4
  %532 = sdiv i32 %528, 8
  tail call void @vpx_clear_system_state() #10
  %533 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 196
  %534 = load i32, i32* %533, align 8
  %535 = icmp eq i32 %534, 0
  br i1 %535, label %537, label %536

536:                                              ; preds = %517
  store i32 0, i32* %504, align 4
  store i32 0, i32* %533, align 8
  br label %537

537:                                              ; preds = %536, %517
  %538 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 107
  %539 = load i32, i32* %538, align 4
  %540 = sitofp i32 %539 to double
  %541 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 74
  %542 = load double, double* %541, align 16
  %543 = fdiv double %540, %542
  %544 = fptosi double %543 to i32
  %545 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 70
  store i32 %544, i32* %545, align 4
  %546 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 52
  store i32 0, i32* %546, align 8
  %547 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 53
  store i32 0, i32* %547, align 4
  %548 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18
  %549 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 65
  store i32 0, i32* %549, align 4
  %550 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 62
  store i32 0, i32* %550, align 32
  %551 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 61
  store i32 1, i32* %551, align 4
  %552 = load i32, i32* %38, align 8
  %553 = icmp eq i32 %552, 2
  br i1 %553, label %554, label %559

554:                                              ; preds = %537
  %555 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 104
  %556 = load i32, i32* %555, align 8
  %557 = icmp slt i32 %556, 401
  br i1 %557, label %558, label %559

558:                                              ; preds = %554
  store i32 0, i32* %551, align 4
  br label %559

559:                                              ; preds = %558, %554, %537
  %560 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 32
  %561 = load i32, i32* %560, align 8
  %562 = icmp ne i32 %561, 0
  %563 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 55, i64 3
  %564 = zext i1 %562 to i32
  store i32 %564, i32* %563, align 4
  %565 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 60
  %566 = load i32, i32* %565, align 4
  %567 = icmp eq i32 %566, 0
  br i1 %567, label %583, label %568

568:                                              ; preds = %559
  %569 = load i32, i32* %506, align 4
  %570 = and i32 %569, 1
  %571 = icmp eq i32 %570, 0
  br i1 %571, label %572, label %583

572:                                              ; preds = %568
  %573 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 12
  %574 = load i32, i32* %573, align 4
  %575 = icmp eq i32 %574, 0
  br i1 %575, label %589, label %576

576:                                              ; preds = %572
  %577 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 40
  %578 = load i32, i32* %577, align 4
  %579 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 41
  %580 = load i32, i32* %579, align 16
  %581 = urem i32 %578, %580
  %582 = icmp eq i32 %581, 0
  br i1 %582, label %583, label %589

583:                                              ; preds = %576, %568, %559
  store i32 0, i32* %504, align 4
  %584 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 5
  %585 = load i32, i32* %584, align 8
  %586 = icmp eq i32 %585, 4
  br i1 %586, label %587, label %589

587:                                              ; preds = %583
  %588 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 200
  tail call void @vp8_denoiser_set_parameters(%struct.vp8_denoiser* %588, i32 2) #10
  br label %589

589:                                              ; preds = %587, %583, %576, %572
  %590 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 57
  %591 = load i32, i32* %590, align 4
  %592 = icmp ugt i32 %591, 1
  br i1 %592, label %593, label %695

593:                                              ; preds = %589
  %594 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 60
  %595 = bitcast i8** %594 to %struct.LOWER_RES_FRAME_INFO**
  %596 = load %struct.LOWER_RES_FRAME_INFO*, %struct.LOWER_RES_FRAME_INFO** %595, align 8
  %597 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 58
  %598 = load i32, i32* %597, align 8
  %599 = icmp eq i32 %598, 0
  br i1 %599, label %639, label %600

600:                                              ; preds = %593
  %601 = load i32, i32* %504, align 4
  %602 = icmp eq i32 %601, 0
  br i1 %602, label %633, label %603

603:                                              ; preds = %600
  %604 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 216
  store i8 1, i8* %604, align 4
  %605 = getelementptr inbounds %struct.LOWER_RES_FRAME_INFO, %struct.LOWER_RES_FRAME_INFO* %596, i64 0, i32 1
  %606 = load i32, i32* %605, align 4
  %607 = icmp eq i32 %606, 0
  %608 = zext i1 %607 to i8
  store i8 %608, i8* %604, align 4
  %609 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 129
  %610 = load i32, i32* %609, align 4
  %611 = and i32 %610, 1
  %612 = icmp eq i32 %611, 0
  br i1 %612, label %621, label %613

613:                                              ; preds = %603
  %614 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 217, i64 1
  %615 = load i32, i32* %614, align 4
  %616 = getelementptr inbounds %struct.LOWER_RES_FRAME_INFO, %struct.LOWER_RES_FRAME_INFO* %596, i64 0, i32 4, i64 1
  %617 = load i32, i32* %616, align 4
  %618 = icmp eq i32 %615, %617
  %619 = and i1 %607, %618
  %620 = zext i1 %619 to i8
  store i8 %620, i8* %604, align 4
  br label %621

621:                                              ; preds = %613, %603
  %622 = phi i8 [ %608, %603 ], [ %620, %613 ]
  %623 = and i32 %610, 2
  %624 = icmp eq i32 %623, 0
  br i1 %624, label %633, label %625

625:                                              ; preds = %621
  %626 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 217, i64 2
  %627 = load i32, i32* %626, align 8
  %628 = getelementptr inbounds %struct.LOWER_RES_FRAME_INFO, %struct.LOWER_RES_FRAME_INFO* %596, i64 0, i32 4, i64 2
  %629 = load i32, i32* %628, align 8
  %630 = icmp eq i32 %627, %629
  %631 = zext i1 %630 to i8
  %632 = and i8 %622, %631
  store i8 %632, i8* %604, align 4
  br label %633

633:                                              ; preds = %625, %621, %600
  %634 = getelementptr inbounds %struct.LOWER_RES_FRAME_INFO, %struct.LOWER_RES_FRAME_INFO* %596, i64 0, i32 6
  %635 = load i32, i32* %634, align 4
  %636 = icmp eq i32 %635, 0
  br i1 %636, label %639, label %637

637:                                              ; preds = %633
  %638 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 216
  store i8 0, i8* %638, align 4
  br label %639

639:                                              ; preds = %637, %633, %593
  %640 = getelementptr inbounds %struct.LOWER_RES_FRAME_INFO, %struct.LOWER_RES_FRAME_INFO* %596, i64 0, i32 6
  store i32 0, i32* %640, align 4
  %641 = load i32, i32* %504, align 4
  %642 = icmp eq i32 %641, 0
  br i1 %642, label %645, label %643

643:                                              ; preds = %639
  %644 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 218
  store i32 1, i32* %644, align 16
  br label %699

645:                                              ; preds = %639
  %646 = load i32, i32* %597, align 8
  %647 = icmp eq i32 %646, 0
  %648 = load i32, i32* %565, align 4
  br i1 %647, label %693, label %649

649:                                              ; preds = %645
  %650 = icmp eq i32 %648, 0
  br i1 %650, label %651, label %690

651:                                              ; preds = %649
  %652 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 86
  %653 = load i64, i64* %652, align 32
  %654 = icmp eq i64 %653, 0
  br i1 %654, label %655, label %690

655:                                              ; preds = %651
  %656 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 19
  %657 = load i64, i64* %656, align 8
  %658 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 87
  store i64 %657, i64* %658, align 8
  store i64 %657, i64* %652, align 32
  %659 = load i32, i32* %250, align 4
  %660 = icmp eq i32 %659, 0
  br i1 %660, label %690, label %661

661:                                              ; preds = %655
  %662 = zext i32 %659 to i64
  %663 = and i64 %662, 1
  %664 = icmp eq i32 %659, 1
  br i1 %664, label %682, label %665

665:                                              ; preds = %661
  %666 = sub nsw i64 %662, %663
  br label %667

667:                                              ; preds = %667, %665
  %668 = phi i64 [ 0, %665 ], [ %679, %667 ]
  %669 = phi i64 [ %666, %665 ], [ %680, %667 ]
  %670 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %668, i32 2
  %671 = load i64, i64* %670, align 8
  %672 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %668, i32 10
  store i64 %671, i64* %672, align 8
  %673 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %668, i32 9
  store i64 %671, i64* %673, align 8
  %674 = or i64 %668, 1
  %675 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %674, i32 2
  %676 = load i64, i64* %675, align 8
  %677 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %674, i32 10
  store i64 %676, i64* %677, align 8
  %678 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %674, i32 9
  store i64 %676, i64* %678, align 8
  %679 = add nuw nsw i64 %668, 2
  %680 = add i64 %669, -2
  %681 = icmp eq i64 %680, 0
  br i1 %681, label %682, label %667

682:                                              ; preds = %667, %661
  %683 = phi i64 [ 0, %661 ], [ %679, %667 ]
  %684 = icmp eq i64 %663, 0
  br i1 %684, label %690, label %685

685:                                              ; preds = %682
  %686 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %683, i32 2
  %687 = load i64, i64* %686, align 8
  %688 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %683, i32 10
  store i64 %687, i64* %688, align 8
  %689 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %683, i32 9
  store i64 %687, i64* %689, align 8
  br label %690

690:                                              ; preds = %685, %682, %655, %651, %649
  %691 = getelementptr inbounds %struct.LOWER_RES_FRAME_INFO, %struct.LOWER_RES_FRAME_INFO* %596, i64 0, i32 5
  %692 = load i32, i32* %691, align 8
  store i32 %692, i32* %565, align 4
  br label %695

693:                                              ; preds = %645
  %694 = getelementptr inbounds %struct.LOWER_RES_FRAME_INFO, %struct.LOWER_RES_FRAME_INFO* %596, i64 0, i32 5
  store i32 %648, i32* %694, align 8
  br label %695

695:                                              ; preds = %693, %690, %589
  %696 = load i32, i32* %504, align 4
  %697 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 218
  store i32 1, i32* %697, align 16
  %698 = icmp eq i32 %696, 0
  br i1 %698, label %713, label %699

699:                                              ; preds = %643, %695
  %700 = phi i32* [ %644, %643 ], [ %697, %695 ]
  %701 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 129
  %702 = load i32, i32* %701, align 4
  %703 = and i32 %702, 1
  %704 = icmp eq i32 %703, 0
  %705 = and i32 %702, 2
  %706 = icmp eq i32 %705, 0
  br i1 %704, label %707, label %712

707:                                              ; preds = %699
  br i1 %706, label %708, label %3008

708:                                              ; preds = %707
  %709 = and i32 %702, 4
  %710 = icmp eq i32 %709, 0
  %711 = select i1 %710, i32 0, i32 3
  br label %3020

712:                                              ; preds = %699
  br i1 %706, label %3020, label %3008

713:                                              ; preds = %695
  %714 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 6, i32 23
  %715 = load i8, i8* %714, align 32
  %716 = icmp ne i8 %715, 0
  %717 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 6, i32 24
  %718 = zext i1 %716 to i8
  store i8 %718, i8* %717, align 1
  %719 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 6, i32 25
  store i8 %718, i8* %719, align 2
  %720 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 6, i32 29
  %721 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 6, i32 30
  %722 = getelementptr inbounds i8, i8* %720, i64 2
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %722, i8 0, i64 12, i1 false) #10
  store i8 1, i8* %720, align 1
  store i8 1, i8* %721, align 16
  %723 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 6, i32 32
  %724 = bitcast [4 x i8]* %723 to i32*
  store i32 -16908286, i32* %724, align 1
  %725 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 6, i32 34
  %726 = bitcast [4 x i8]* %725 to i32*
  store i32 67239940, i32* %726, align 1
  %727 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 11
  %728 = load i32, i32* %727, align 8
  %729 = icmp eq i32 %728, 0
  %730 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 6, i32 34, i64 1
  %731 = select i1 %729, i8 -12, i8 -2
  store i8 %731, i8* %730, align 1
  store i32 0, i32* %560, align 8
  %732 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 57, i64 0
  %733 = bitcast i32* %732 to <4 x i32>*
  store <4 x i32> <i32 128, i32 128, i32 128, i32 128>, <4 x i32>* %733, align 4
  %734 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 57, i64 4
  %735 = bitcast i32* %734 to <4 x i32>*
  store <4 x i32> <i32 128, i32 128, i32 128, i32 128>, <4 x i32>* %735, align 4
  %736 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 57, i64 8
  %737 = bitcast i32* %736 to <4 x i32>*
  store <4 x i32> <i32 128, i32 128, i32 128, i32 128>, <4 x i32>* %737, align 4
  %738 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 57, i64 12
  %739 = bitcast i32* %738 to <4 x i32>*
  store <4 x i32> <i32 128, i32 128, i32 128, i32 128>, <4 x i32>* %739, align 4
  %740 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 57, i64 16
  %741 = bitcast i32* %740 to <4 x i32>*
  store <4 x i32> <i32 128, i32 128, i32 128, i32 128>, <4 x i32>* %741, align 4
  %742 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 144
  %743 = load i8*, i8** %742, align 8
  %744 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 27
  %745 = load i32, i32* %744, align 4
  %746 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 28
  %747 = load i32, i32* %746, align 8
  %748 = mul nsw i32 %747, %745
  %749 = sext i32 %748 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %743, i8 0, i64 %749, i1 false) #10
  %750 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 145
  %751 = load i8*, i8** %750, align 32
  %752 = load i32, i32* %744, align 4
  %753 = load i32, i32* %746, align 8
  %754 = mul nsw i32 %753, %752
  %755 = sext i32 %754 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %751, i8 0, i64 %755, i1 false) #10
  %756 = load i32, i32* %504, align 4
  %757 = icmp eq i32 %756, 0
  br i1 %757, label %771, label %758

758:                                              ; preds = %3035, %713
  %759 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 56, i64 1
  %760 = load i32, i32* %759, align 4
  %761 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 56, i64 2
  %762 = load i32, i32* %761, align 4
  %763 = add nsw i32 %760, %762
  %764 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 56, i64 3
  %765 = load i32, i32* %764, align 4
  %766 = add nsw i32 %763, %765
  %767 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 56, i64 0
  %768 = load i32, i32* %767, align 4
  %769 = sub i32 0, %766
  %770 = icmp eq i32 %768, %769
  br i1 %770, label %771, label %777

771:                                              ; preds = %758, %713
  %772 = phi i32 [ 255, %713 ], [ 63, %758 ]
  %773 = phi i1 [ true, %713 ], [ false, %758 ]
  %774 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 120
  store i32 %772, i32* %774, align 4
  %775 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 121
  store i32 128, i32* %775, align 16
  %776 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 122
  store i32 128, i32* %776, align 4
  br label %777

777:                                              ; preds = %771, %758
  %778 = phi i1 [ false, %758 ], [ %773, %771 ]
  %779 = load i32, i32* %250, align 4
  %780 = icmp eq i32 %779, 1
  br i1 %780, label %781, label %815

781:                                              ; preds = %777
  %782 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 51
  %783 = load i32, i32* %782, align 4
  %784 = icmp eq i32 %783, 0
  br i1 %784, label %793, label %785

785:                                              ; preds = %781
  %786 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 120
  %787 = load i32, i32* %786, align 4
  %788 = icmp slt i32 %787, 215
  %789 = select i1 %788, i32 %787, i32 215
  %790 = add nsw i32 %789, 40
  store i32 %790, i32* %786, align 4
  %791 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 121
  store i32 200, i32* %791, align 16
  %792 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 122
  store i32 1, i32* %792, align 4
  br label %810

793:                                              ; preds = %781
  %794 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 58
  %795 = load i32, i32* %794, align 8
  switch i32 %795, label %801 [
    i32 0, label %796
    i32 1, label %798
  ]

796:                                              ; preds = %793
  %797 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 121
  store i32 214, i32* %797, align 16
  br label %810

798:                                              ; preds = %793
  %799 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 121
  store i32 192, i32* %799, align 16
  %800 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 122
  store i32 220, i32* %800, align 4
  br label %810

801:                                              ; preds = %793
  %802 = load i32, i32* %560, align 8
  %803 = icmp eq i32 %802, 0
  br i1 %803, label %813, label %804

804:                                              ; preds = %801
  %805 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 122
  %806 = load i32, i32* %805, align 4
  %807 = icmp sgt i32 %806, 30
  %808 = select i1 %807, i32 %806, i32 30
  %809 = add nsw i32 %808, -20
  store i32 %809, i32* %805, align 4
  br label %810

810:                                              ; preds = %804, %798, %796, %785
  %811 = load i32, i32* %560, align 8
  %812 = icmp eq i32 %811, 0
  br i1 %812, label %813, label %815

813:                                              ; preds = %810, %801
  %814 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 122
  store i32 255, i32* %814, align 4
  br label %815

815:                                              ; preds = %813, %810, %777
  %816 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 99
  %817 = load i32, i32* %816, align 32
  %818 = icmp eq i32 %817, 0
  br i1 %818, label %864, label %819

819:                                              ; preds = %815
  %820 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 86
  %821 = load i64, i64* %820, align 32
  %822 = shl i64 %527, 32
  %823 = ashr exact i64 %822, 32
  %824 = icmp sgt i64 %821, %823
  br i1 %824, label %825, label %831

825:                                              ; preds = %819
  %826 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 109
  %827 = load i32, i32* %826, align 32
  %828 = icmp sgt i32 %827, 0
  br i1 %828, label %829, label %831

829:                                              ; preds = %825
  %830 = add nsw i32 %827, -1
  store i32 %830, i32* %826, align 32
  br label %831

831:                                              ; preds = %829, %825, %819
  %832 = sext i32 %530 to i64
  %833 = icmp sgt i64 %821, %832
  br i1 %833, label %834, label %839

834:                                              ; preds = %831
  %835 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 109
  %836 = load i32, i32* %835, align 32
  %837 = icmp sgt i32 %836, 0
  br i1 %837, label %838, label %839

838:                                              ; preds = %834
  store i32 1, i32* %835, align 32
  br label %864

839:                                              ; preds = %834, %831
  %840 = sext i32 %532 to i64
  %841 = icmp slt i64 %821, %840
  br i1 %841, label %842, label %848

842:                                              ; preds = %839
  %843 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 109
  %844 = load i32, i32* %843, align 32
  %845 = and i32 %844, -2
  %846 = icmp eq i32 %845, 2
  br i1 %846, label %847, label %848

847:                                              ; preds = %842
  store i32 3, i32* %843, align 32
  br label %864

848:                                              ; preds = %842, %839
  %849 = sext i32 %531 to i64
  %850 = icmp slt i64 %821, %849
  br i1 %850, label %851, label %857

851:                                              ; preds = %848
  %852 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 109
  %853 = load i32, i32* %852, align 32
  %854 = add i32 %853, -1
  %855 = icmp ult i32 %854, 2
  br i1 %855, label %856, label %857

856:                                              ; preds = %851
  store i32 2, i32* %852, align 32
  br label %864

857:                                              ; preds = %851, %848
  %858 = icmp slt i64 %821, %832
  br i1 %858, label %859, label %864

859:                                              ; preds = %857
  %860 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 109
  %861 = load i32, i32* %860, align 32
  %862 = icmp ult i32 %861, 2
  br i1 %862, label %863, label %864

863:                                              ; preds = %859
  store i32 1, i32* %860, align 32
  br label %864

864:                                              ; preds = %863, %859, %857, %856, %847, %838, %815
  %865 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 109
  %866 = load i32, i32* %865, align 32
  %867 = icmp sgt i32 %866, 0
  br i1 %867, label %868, label %942

868:                                              ; preds = %864
  %869 = add i32 %866, -1
  %870 = icmp ult i32 %869, 3
  br i1 %870, label %871, label %881

871:                                              ; preds = %868
  %872 = sext i32 %869 to i64
  %873 = getelementptr inbounds [3 x i32], [3 x i32]* @switch.table.vp8_get_compressed_data.29, i64 0, i64 %872
  %874 = load i32, i32* %873, align 4
  %875 = sext i32 %869 to i64
  %876 = getelementptr inbounds [3 x i32], [3 x i32]* @switch.table.vp8_get_compressed_data.30, i64 0, i64 %875
  %877 = load i32, i32* %876, align 4
  %878 = load i32, i32* %545, align 4
  %879 = mul nsw i32 %878, %874
  %880 = sdiv i32 %879, %877
  store i32 %880, i32* %545, align 4
  br label %881

881:                                              ; preds = %868, %871
  %882 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 110
  br i1 %778, label %883, label %884

883:                                              ; preds = %881
  store i32 %866, i32* %882, align 4
  br label %944

884:                                              ; preds = %881
  %885 = load i32, i32* %882, align 4
  %886 = icmp sgt i32 %885, 0
  br i1 %886, label %887, label %941

887:                                              ; preds = %884
  %888 = add nsw i32 %885, -1
  store i32 %888, i32* %882, align 4
  %889 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 71
  %890 = load i32, i32* %889, align 32
  %891 = sext i32 %890 to i64
  %892 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 87
  %893 = load i64, i64* %892, align 8
  %894 = add nsw i64 %893, %891
  %895 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 21
  %896 = load i64, i64* %895, align 8
  %897 = icmp sgt i64 %894, %896
  %898 = select i1 %897, i64 %896, i64 %894
  store i64 %898, i64* %892, align 8
  tail call void @vp8_store_drop_frame_info(%struct.VP8_COMP* %0) #10
  %899 = load i32, i32* %565, align 4
  %900 = add i32 %899, 1
  store i32 %900, i32* %565, align 4
  %901 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 40
  %902 = load i32, i32* %901, align 4
  %903 = add i32 %902, 1
  store i32 %903, i32* %901, align 4
  %904 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 221
  store i32 0, i32* %904, align 16
  %905 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 146
  %906 = load i32, i32* %905, align 8
  %907 = add i32 %906, 1
  store i32 %907, i32* %905, align 8
  %908 = load i64, i64* %892, align 8
  %909 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 86
  store i64 %908, i64* %909, align 32
  %910 = load i32, i32* %250, align 4
  %911 = icmp ugt i32 %910, 1
  br i1 %911, label %912, label %3037

912:                                              ; preds = %887
  %913 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 201
  %914 = load i32, i32* %913, align 8
  %915 = add i32 %914, 1
  %916 = icmp ult i32 %915, %910
  br i1 %916, label %917, label %3037

917:                                              ; preds = %912
  %918 = zext i32 %915 to i64
  br label %919

919:                                              ; preds = %919, %917
  %920 = phi i64 [ %918, %917 ], [ %939, %919 ]
  %921 = phi i32 [ %915, %917 ], [ %938, %919 ]
  %922 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %920, i32 1
  %923 = load i32, i32* %922, align 8
  %924 = sitofp i32 %923 to double
  %925 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %920, i32 0
  %926 = load double, double* %925, align 8
  %927 = fdiv double %924, %926
  %928 = fptosi double %927 to i32
  %929 = sext i32 %928 to i64
  %930 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %920, i32 10
  %931 = load i64, i64* %930, align 8
  %932 = add nsw i64 %931, %929
  %933 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %920, i32 4
  %934 = load i64, i64* %933, align 8
  %935 = icmp sgt i64 %932, %934
  %936 = select i1 %935, i64 %934, i64 %932
  store i64 %936, i64* %930, align 8
  %937 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %920, i32 9
  store i64 %936, i64* %937, align 8
  %938 = add i32 %921, 1
  %939 = add nuw nsw i64 %920, 1
  %940 = icmp eq i32 %938, %910
  br i1 %940, label %3037, label %919

941:                                              ; preds = %884
  store i32 %866, i32* %882, align 4
  br label %944

942:                                              ; preds = %864
  %943 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 110
  store i32 0, i32* %943, align 4
  br label %944

944:                                              ; preds = %942, %941, %883
  %945 = tail call i32 @vp8_pick_frame_size(%struct.VP8_COMP* %0) #10
  %946 = icmp eq i32 %945, 0
  br i1 %946, label %947, label %957

947:                                              ; preds = %944
  tail call void @vp8_store_drop_frame_info(%struct.VP8_COMP* %0) #10
  %948 = load i32, i32* %565, align 4
  %949 = add i32 %948, 1
  store i32 %949, i32* %565, align 4
  %950 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 40
  %951 = load i32, i32* %950, align 4
  %952 = add i32 %951, 1
  store i32 %952, i32* %950, align 4
  %953 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 221
  store i32 0, i32* %953, align 16
  %954 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 146
  %955 = load i32, i32* %954, align 8
  %956 = add i32 %955, 1
  store i32 %956, i32* %954, align 8
  br label %3037

957:                                              ; preds = %944
  %958 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 16
  %959 = load i32, i32* %958, align 4
  %960 = icmp eq i32 %959, 1
  br i1 %960, label %961, label %999

961:                                              ; preds = %957
  %962 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 86
  %963 = load i64, i64* %962, align 32
  %964 = load i64, i64* %524, align 8
  %965 = icmp slt i64 %963, %964
  br i1 %965, label %999, label %966

966:                                              ; preds = %961
  %967 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 83
  %968 = load i32, i32* %967, align 8
  %969 = icmp eq i32 %968, 0
  br i1 %969, label %999, label %970

970:                                              ; preds = %966
  %971 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 95
  %972 = load i32, i32* %971, align 16
  %973 = sdiv i32 %972, 4
  %974 = add i32 %972, 3
  %975 = icmp ugt i32 %974, 6
  br i1 %975, label %976, label %999

976:                                              ; preds = %970
  %977 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 21
  %978 = load i64, i64* %977, align 8
  %979 = icmp slt i64 %963, %978
  br i1 %979, label %980, label %992

980:                                              ; preds = %976
  %981 = sub nsw i64 %978, %964
  %982 = sext i32 %973 to i64
  %983 = sdiv i64 %981, %982
  %984 = trunc i64 %983 to i32
  %985 = icmp eq i32 %984, 0
  br i1 %985, label %992, label %986

986:                                              ; preds = %980
  %987 = sub nsw i64 %963, %964
  %988 = shl i64 %983, 32
  %989 = ashr exact i64 %988, 32
  %990 = sdiv i64 %987, %989
  %991 = trunc i64 %990 to i32
  br label %992

992:                                              ; preds = %986, %980, %976
  %993 = phi i32 [ %991, %986 ], [ %973, %976 ], [ 0, %980 ]
  %994 = sub nsw i32 %972, %993
  %995 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 97
  %996 = load i32, i32* %995, align 8
  %997 = icmp slt i32 %994, %996
  %998 = select i1 %997, i32 %996, i32 %994
  store i32 %998, i32* %971, align 16
  br label %999

999:                                              ; preds = %992, %970, %966, %961, %957
  %1000 = load i32, i32* %38, align 8
  %1001 = icmp eq i32 %1000, 2
  br i1 %1001, label %1006, label %1002

1002:                                             ; preds = %999
  %1003 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 80
  %1004 = load i32, i32* %1003, align 8
  %1005 = icmp sgt i32 %1004, 150
  br i1 %1005, label %1006, label %1165

1006:                                             ; preds = %1002, %999
  tail call void @vpx_clear_system_state() #10
  %1007 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 95
  %1008 = load i32, i32* %1007, align 16
  %1009 = load i32, i32* %504, align 4
  %1010 = icmp eq i32 %1009, 0
  br i1 %1010, label %1011, label %1044

1011:                                             ; preds = %1006
  %1012 = load i32, i32* %38, align 8
  %1013 = icmp eq i32 %1012, 2
  br i1 %1013, label %1014, label %1038

1014:                                             ; preds = %1011
  %1015 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 104
  %1016 = load i32, i32* %1015, align 8
  %1017 = icmp sgt i32 %1016, 600
  %1018 = sext i32 %1008 to i64
  %1019 = select i1 %1017, [128 x i8]* @kf_low_motion_minq, [128 x i8]* @kf_high_motion_minq
  %1020 = getelementptr inbounds [128 x i8], [128 x i8]* %1019, i64 0, i64 %1018
  %1021 = load i8, i8* %1020, align 1
  %1022 = zext i8 %1021 to i32
  %1023 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 97
  store i32 %1022, i32* %1023, align 8
  %1024 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 42
  %1025 = load i32, i32* %1024, align 4
  %1026 = icmp eq i32 %1025, 0
  br i1 %1026, label %1132, label %1027

1027:                                             ; preds = %1014
  %1028 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 81
  %1029 = load i32, i32* %1028, align 4
  %1030 = mul nsw i32 %1029, 7
  %1031 = sdiv i32 %1030, 8
  %1032 = icmp slt i32 %1031, %1022
  br i1 %1032, label %1033, label %1034

1033:                                             ; preds = %1027
  store i32 %1031, i32* %1023, align 8
  br label %1132

1034:                                             ; preds = %1027
  %1035 = ashr i32 %1029, 2
  %1036 = icmp sgt i32 %1035, %1022
  br i1 %1036, label %1037, label %1132

1037:                                             ; preds = %1034
  store i32 %1035, i32* %1023, align 8
  br label %1132

1038:                                             ; preds = %1011
  %1039 = sext i32 %1008 to i64
  %1040 = getelementptr inbounds [128 x i8], [128 x i8]* @kf_high_motion_minq, i64 0, i64 %1039
  %1041 = load i8, i8* %1040, align 1
  %1042 = zext i8 %1041 to i32
  %1043 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 97
  store i32 %1042, i32* %1043, align 8
  br label %1132

1044:                                             ; preds = %1006
  %1045 = load i32, i32* %250, align 4
  %1046 = icmp eq i32 %1045, 1
  br i1 %1046, label %1047, label %1110

1047:                                             ; preds = %1044
  %1048 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 50
  %1049 = load i32, i32* %1048, align 16
  %1050 = icmp eq i32 %1049, 0
  br i1 %1050, label %1051, label %1055

1051:                                             ; preds = %1047
  %1052 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 51
  %1053 = load i32, i32* %1052, align 4
  %1054 = icmp eq i32 %1053, 0
  br i1 %1054, label %1110, label %1055

1055:                                             ; preds = %1051, %1047
  %1056 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 40
  %1057 = load i32, i32* %1056, align 4
  %1058 = icmp ugt i32 %1057, 1
  br i1 %1058, label %1059, label %1064

1059:                                             ; preds = %1055
  %1060 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 81
  %1061 = load i32, i32* %1060, align 4
  %1062 = icmp slt i32 %1061, %1008
  %1063 = select i1 %1062, i32 %1061, i32 %1008
  br label %1064

1064:                                             ; preds = %1059, %1055
  %1065 = phi i32 [ %1008, %1055 ], [ %1063, %1059 ]
  %1066 = load i32, i32* %958, align 4
  %1067 = icmp eq i32 %1066, 2
  br i1 %1067, label %1068, label %1073

1068:                                             ; preds = %1064
  %1069 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 98
  %1070 = load i32, i32* %1069, align 4
  %1071 = icmp slt i32 %1065, %1070
  %1072 = select i1 %1071, i32 %1070, i32 %1065
  br label %1073

1073:                                             ; preds = %1068, %1064
  %1074 = phi i32 [ %1065, %1064 ], [ %1072, %1068 ]
  %1075 = load i32, i32* %38, align 8
  %1076 = icmp eq i32 %1075, 2
  br i1 %1076, label %1077, label %1104

1077:                                             ; preds = %1073
  %1078 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 104
  %1079 = load i32, i32* %1078, align 8
  %1080 = icmp sgt i32 %1079, 1000
  br i1 %1080, label %1081, label %1086

1081:                                             ; preds = %1077
  %1082 = sext i32 %1074 to i64
  %1083 = getelementptr inbounds [128 x i8], [128 x i8]* @gf_low_motion_minq, i64 0, i64 %1082
  %1084 = load i8, i8* %1083, align 1
  %1085 = zext i8 %1084 to i32
  br label %1097

1086:                                             ; preds = %1077
  %1087 = icmp slt i32 %1079, 400
  %1088 = sext i32 %1074 to i64
  br i1 %1087, label %1089, label %1093

1089:                                             ; preds = %1086
  %1090 = getelementptr inbounds [128 x i8], [128 x i8]* @gf_high_motion_minq, i64 0, i64 %1088
  %1091 = load i8, i8* %1090, align 1
  %1092 = zext i8 %1091 to i32
  br label %1097

1093:                                             ; preds = %1086
  %1094 = getelementptr inbounds [128 x i8], [128 x i8]* @gf_mid_motion_minq, i64 0, i64 %1088
  %1095 = load i8, i8* %1094, align 1
  %1096 = zext i8 %1095 to i32
  br label %1097

1097:                                             ; preds = %1093, %1089, %1081
  %1098 = phi i32 [ %1096, %1093 ], [ %1092, %1089 ], [ %1085, %1081 ]
  %1099 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 97
  store i32 %1098, i32* %1099, align 8
  br i1 %1067, label %1100, label %1132

1100:                                             ; preds = %1097
  %1101 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 97
  %1102 = mul nuw nsw i32 %1098, 15
  %1103 = lshr i32 %1102, 4
  store i32 %1103, i32* %1101, align 8
  br label %1132

1104:                                             ; preds = %1073
  %1105 = sext i32 %1074 to i64
  %1106 = getelementptr inbounds [128 x i8], [128 x i8]* @gf_high_motion_minq, i64 0, i64 %1105
  %1107 = load i8, i8* %1106, align 1
  %1108 = zext i8 %1107 to i32
  %1109 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 97
  store i32 %1108, i32* %1109, align 8
  br label %1132

1110:                                             ; preds = %1051, %1044
  %1111 = sext i32 %1008 to i64
  %1112 = getelementptr inbounds [128 x i8], [128 x i8]* @inter_minq, i64 0, i64 %1111
  %1113 = load i8, i8* %1112, align 1
  %1114 = zext i8 %1113 to i32
  %1115 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 97
  store i32 %1114, i32* %1115, align 8
  %1116 = load i32, i32* %958, align 4
  %1117 = icmp eq i32 %1116, 2
  br i1 %1117, label %1118, label %1135

1118:                                             ; preds = %1110
  %1119 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 98
  %1120 = load i32, i32* %1119, align 4
  %1121 = icmp sgt i32 %1120, %1114
  br i1 %1121, label %1122, label %1132

1122:                                             ; preds = %1118
  %1123 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 89
  %1124 = load i32, i32* %1123, align 4
  %1125 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 72
  %1126 = load i32, i32* %1125, align 4
  %1127 = icmp slt i32 %1124, %1126
  br i1 %1127, label %1128, label %1131

1128:                                             ; preds = %1122
  %1129 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 28
  %1130 = load i32, i32* %1129, align 4
  store i32 %1130, i32* %1115, align 8
  br label %1132

1131:                                             ; preds = %1122
  store i32 %1120, i32* %1115, align 8
  br label %1132

1132:                                             ; preds = %1131, %1128, %1118, %1104, %1100, %1097, %1038, %1037, %1034, %1033, %1014
  %1133 = phi i32 [ %1022, %1034 ], [ %1035, %1037 ], [ %1031, %1033 ], [ %1042, %1038 ], [ %1114, %1118 ], [ %1120, %1131 ], [ %1130, %1128 ], [ %1108, %1104 ], [ %1103, %1100 ], [ %1098, %1097 ], [ %1022, %1014 ]
  %1134 = load i32, i32* %958, align 4
  br label %1135

1135:                                             ; preds = %1132, %1110
  %1136 = phi i32 [ %1133, %1132 ], [ %1114, %1110 ]
  %1137 = phi i32 [ %1134, %1132 ], [ %1116, %1110 ]
  %1138 = icmp eq i32 %1137, 1
  br i1 %1138, label %1139, label %1189

1139:                                             ; preds = %1135
  %1140 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 86
  %1141 = load i64, i64* %1140, align 32
  %1142 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 21
  %1143 = load i64, i64* %1142, align 8
  %1144 = icmp slt i64 %1141, %1143
  br i1 %1144, label %1149, label %1145

1145:                                             ; preds = %1139
  %1146 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 96
  %1147 = load i32, i32* %1146, align 4
  %1148 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 97
  store i32 %1147, i32* %1148, align 8
  br label %1189

1149:                                             ; preds = %1139
  %1150 = load i64, i64* %524, align 8
  %1151 = icmp sgt i64 %1141, %1150
  br i1 %1151, label %1152, label %1189

1152:                                             ; preds = %1149
  %1153 = sub nsw i64 %1141, %1150
  %1154 = shl nsw i64 %1153, 7
  %1155 = sub nsw i64 %1143, %1150
  %1156 = sdiv i64 %1154, %1155
  %1157 = trunc i64 %1156 to i32
  %1158 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 97
  %1159 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 96
  %1160 = load i32, i32* %1159, align 4
  %1161 = sub nsw i32 %1136, %1160
  %1162 = mul nsw i32 %1161, %1157
  %1163 = sdiv i32 %1162, 128
  %1164 = sub nsw i32 %1136, %1163
  store i32 %1164, i32* %1158, align 8
  br label %1189

1165:                                             ; preds = %1002
  %1166 = icmp eq i32 %959, 2
  br i1 %1166, label %1167, label %1189

1167:                                             ; preds = %1165
  %1168 = load i32, i32* %504, align 4
  %1169 = icmp eq i32 %1168, 0
  br i1 %1169, label %1178, label %1170

1170:                                             ; preds = %1167
  %1171 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 50
  %1172 = load i32, i32* %1171, align 16
  %1173 = icmp eq i32 %1172, 0
  br i1 %1173, label %1174, label %1178

1174:                                             ; preds = %1170
  %1175 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 51
  %1176 = load i32, i32* %1175, align 4
  %1177 = icmp eq i32 %1176, 0
  br i1 %1177, label %1182, label %1178

1178:                                             ; preds = %1174, %1170, %1167
  %1179 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 96
  %1180 = load i32, i32* %1179, align 4
  %1181 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 97
  store i32 %1180, i32* %1181, align 8
  br label %1189

1182:                                             ; preds = %1174
  %1183 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 97
  %1184 = load i32, i32* %1183, align 8
  %1185 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 98
  %1186 = load i32, i32* %1185, align 4
  %1187 = icmp slt i32 %1184, %1186
  br i1 %1187, label %1188, label %1189

1188:                                             ; preds = %1182
  store i32 %1186, i32* %1183, align 8
  br label %1189

1189:                                             ; preds = %1188, %1182, %1178, %1165, %1152, %1149, %1145, %1135
  %1190 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 95
  %1191 = load i32, i32* %1190, align 16
  %1192 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 94
  %1193 = load i32, i32* %1192, align 4
  %1194 = icmp sgt i32 %1191, %1193
  br i1 %1194, label %1195, label %1196

1195:                                             ; preds = %1189
  store i32 %1193, i32* %1190, align 16
  br label %1196

1196:                                             ; preds = %1195, %1189
  %1197 = phi i32 [ %1193, %1195 ], [ %1191, %1189 ]
  %1198 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 97
  %1199 = load i32, i32* %1198, align 8
  %1200 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 96
  %1201 = load i32, i32* %1200, align 4
  %1202 = icmp slt i32 %1199, %1201
  br i1 %1202, label %1203, label %1204

1203:                                             ; preds = %1196
  store i32 %1201, i32* %1198, align 8
  br label %1204

1204:                                             ; preds = %1203, %1196
  %1205 = phi i32 [ %1201, %1203 ], [ %1199, %1196 ]
  %1206 = icmp slt i32 %1197, %1205
  br i1 %1206, label %1207, label %1208

1207:                                             ; preds = %1204
  store i32 %1205, i32* %1190, align 16
  br label %1208

1208:                                             ; preds = %1207, %1204
  %1209 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 52
  %1210 = load i32, i32* %1209, align 16
  %1211 = tail call i32 @vp8_regulate_q(%struct.VP8_COMP* %0, i32 %1210) #10
  %1212 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %70, align 8
  %1213 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1212, i64 0, i32 4
  %1214 = load i32, i32* %1213, align 8
  %1215 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1212, i64 0, i32 9
  %1216 = load i32, i32* %1215, align 4
  %1217 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 5
  %1218 = load i32, i32* %1217, align 16
  %1219 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 6
  %1220 = load i32, i32* %1219, align 4
  %1221 = mul nsw i32 %1220, %1218
  %1222 = icmp sgt i32 %1221, 101376
  %1223 = zext i1 %1222 to i32
  %1224 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 27
  %1225 = load i32, i32* %1224, align 4
  %1226 = icmp sgt i32 %1225, 0
  br i1 %1226, label %1227, label %1387

1227:                                             ; preds = %1208
  %1228 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1212, i64 0, i32 15
  %1229 = load i8*, i8** %1228, align 8
  %1230 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1212, i64 0, i32 14
  %1231 = load i8*, i8** %1230, align 8
  %1232 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1212, i64 0, i32 13
  %1233 = load i8*, i8** %1232, align 8
  %1234 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 28
  %1235 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 144
  %1236 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 133
  %1237 = load i32, i32* %1234, align 8
  br label %1238

1238:                                             ; preds = %1273, %1227
  %1239 = phi i32 [ %1225, %1227 ], [ %1274, %1273 ]
  %1240 = phi i32 [ %1237, %1227 ], [ %1275, %1273 ]
  %1241 = phi i32 [ 0, %1227 ], [ %1289, %1273 ]
  %1242 = phi i8* [ %1229, %1227 ], [ %1288, %1273 ]
  %1243 = phi i8* [ %1231, %1227 ], [ %1287, %1273 ]
  %1244 = phi i8* [ %1233, %1227 ], [ %1283, %1273 ]
  %1245 = icmp sgt i32 %1240, 0
  br i1 %1245, label %1248, label %1273

1246:                                             ; preds = %1273
  %1247 = icmp sgt i32 %1274, 2
  br i1 %1247, label %1291, label %1387

1248:                                             ; preds = %1238, %1248
  %1249 = phi i32 [ %1269, %1248 ], [ %1240, %1238 ]
  %1250 = phi i32 [ %1265, %1248 ], [ 0, %1238 ]
  %1251 = phi i8* [ %1268, %1248 ], [ %1242, %1238 ]
  %1252 = phi i8* [ %1267, %1248 ], [ %1243, %1238 ]
  %1253 = phi i8* [ %1266, %1248 ], [ %1244, %1238 ]
  %1254 = mul nsw i32 %1249, %1241
  %1255 = add nsw i32 %1254, %1250
  %1256 = load i8*, i8** %1235, align 8
  %1257 = sext i32 %1255 to i64
  %1258 = getelementptr inbounds i8, i8* %1256, i64 %1257
  %1259 = load i8, i8* %1258, align 1
  %1260 = zext i8 %1259 to i32
  %1261 = tail call i32 @vp8_compute_skin_block(i8* %1253, i8* %1252, i8* %1251, i32 %1214, i32 %1216, i32 %1223, i32 %1260, i32 0) #10
  %1262 = trunc i32 %1261 to i8
  %1263 = load i8*, i8** %1236, align 8
  %1264 = getelementptr inbounds i8, i8* %1263, i64 %1257
  store i8 %1262, i8* %1264, align 1
  %1265 = add nuw nsw i32 %1250, 1
  %1266 = getelementptr inbounds i8, i8* %1253, i64 16
  %1267 = getelementptr inbounds i8, i8* %1252, i64 8
  %1268 = getelementptr inbounds i8, i8* %1251, i64 8
  %1269 = load i32, i32* %1234, align 8
  %1270 = icmp slt i32 %1265, %1269
  br i1 %1270, label %1248, label %1271

1271:                                             ; preds = %1248
  %1272 = load i32, i32* %1224, align 4
  br label %1273

1273:                                             ; preds = %1271, %1238
  %1274 = phi i32 [ %1239, %1238 ], [ %1272, %1271 ]
  %1275 = phi i32 [ %1240, %1238 ], [ %1269, %1271 ]
  %1276 = phi i32 [ 0, %1238 ], [ %1265, %1271 ]
  %1277 = phi i8* [ %1244, %1238 ], [ %1266, %1271 ]
  %1278 = phi i8* [ %1243, %1238 ], [ %1267, %1271 ]
  %1279 = phi i8* [ %1242, %1238 ], [ %1268, %1271 ]
  %1280 = sub i32 %1214, %1276
  %1281 = shl i32 %1280, 4
  %1282 = sext i32 %1281 to i64
  %1283 = getelementptr inbounds i8, i8* %1277, i64 %1282
  %1284 = sub i32 %1216, %1276
  %1285 = shl i32 %1284, 3
  %1286 = sext i32 %1285 to i64
  %1287 = getelementptr inbounds i8, i8* %1278, i64 %1286
  %1288 = getelementptr inbounds i8, i8* %1279, i64 %1286
  %1289 = add nuw nsw i32 %1241, 1
  %1290 = icmp slt i32 %1289, %1274
  br i1 %1290, label %1238, label %1246

1291:                                             ; preds = %1246, %1380
  %1292 = phi i32 [ %1382, %1380 ], [ %1274, %1246 ]
  %1293 = phi i32 [ %1383, %1380 ], [ %1275, %1246 ]
  %1294 = phi i64 [ %1381, %1380 ], [ 1, %1246 ]
  %1295 = icmp sgt i32 %1293, 2
  br i1 %1295, label %1298, label %1296

1296:                                             ; preds = %1291
  %1297 = add nuw nsw i64 %1294, 1
  br label %1380

1298:                                             ; preds = %1291
  %1299 = trunc i64 %1294 to i32
  %1300 = add nsw i64 %1294, -1
  %1301 = add nuw nsw i64 %1294, 1
  br label %1302

1302:                                             ; preds = %1372, %1298
  %1303 = phi i64 [ 1, %1298 ], [ %1373, %1372 ]
  %1304 = phi i32 [ %1293, %1298 ], [ %1374, %1372 ]
  %1305 = mul nsw i32 %1304, %1299
  %1306 = load i8*, i8** %1236, align 8
  %1307 = sext i32 %1304 to i64
  %1308 = mul nsw i64 %1300, %1307
  %1309 = add nsw i64 %1308, %1303
  %1310 = add nsw i64 %1309, -1
  %1311 = getelementptr inbounds i8, i8* %1306, i64 %1310
  %1312 = load i8, i8* %1311, align 1
  %1313 = getelementptr inbounds i8, i8* %1306, i64 %1309
  %1314 = load i8, i8* %1313, align 1
  %1315 = add nsw i64 %1309, 1
  %1316 = getelementptr inbounds i8, i8* %1306, i64 %1315
  %1317 = load i8, i8* %1316, align 1
  %1318 = mul nsw i64 %1294, %1307
  %1319 = add nsw i64 %1318, %1303
  %1320 = add nsw i64 %1319, -1
  %1321 = getelementptr inbounds i8, i8* %1306, i64 %1320
  %1322 = load i8, i8* %1321, align 1
  %1323 = getelementptr inbounds i8, i8* %1306, i64 %1319
  %1324 = load i8, i8* %1323, align 1
  %1325 = add nsw i64 %1319, 1
  %1326 = getelementptr inbounds i8, i8* %1306, i64 %1325
  %1327 = load i8, i8* %1326, align 1
  %1328 = mul nsw i64 %1301, %1307
  %1329 = add nsw i64 %1328, %1303
  %1330 = add nsw i64 %1329, -1
  %1331 = getelementptr inbounds i8, i8* %1306, i64 %1330
  %1332 = load i8, i8* %1331, align 1
  %1333 = getelementptr inbounds i8, i8* %1306, i64 %1329
  %1334 = load i8, i8* %1333, align 1
  %1335 = insertelement <8 x i8> undef, i8 %1314, i32 0
  %1336 = insertelement <8 x i8> %1335, i8 %1312, i32 1
  %1337 = insertelement <8 x i8> %1336, i8 %1317, i32 2
  %1338 = insertelement <8 x i8> %1337, i8 %1322, i32 3
  %1339 = insertelement <8 x i8> %1338, i8 %1324, i32 4
  %1340 = insertelement <8 x i8> %1339, i8 %1327, i32 5
  %1341 = insertelement <8 x i8> %1340, i8 %1332, i32 6
  %1342 = insertelement <8 x i8> %1341, i8 %1334, i32 7
  %1343 = icmp ne <8 x i8> %1342, zeroinitializer
  %1344 = zext <8 x i1> %1343 to <8 x i32>
  %1345 = add nsw i64 %1329, 1
  %1346 = getelementptr inbounds i8, i8* %1306, i64 %1345
  %1347 = load i8, i8* %1346, align 1
  %1348 = icmp ne i8 %1347, 0
  %1349 = zext i1 %1348 to i32
  %1350 = shufflevector <8 x i32> %1344, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %1351 = add nuw nsw <8 x i32> %1350, %1344
  %1352 = shufflevector <8 x i32> %1351, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1353 = add nuw nsw <8 x i32> %1351, %1352
  %1354 = shufflevector <8 x i32> %1353, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %1355 = add nuw nsw <8 x i32> %1353, %1354
  %1356 = extractelement <8 x i32> %1355, i32 0
  %1357 = add nuw nsw i32 %1356, %1349
  %1358 = trunc i64 %1303 to i32
  %1359 = add nsw i32 %1305, %1358
  %1360 = sext i32 %1359 to i64
  %1361 = getelementptr inbounds i8, i8* %1306, i64 %1360
  %1362 = load i8, i8* %1361, align 1
  %1363 = icmp ne i8 %1362, 0
  %1364 = icmp slt i32 %1357, 2
  %1365 = and i1 %1363, %1364
  br i1 %1365, label %1370, label %1366

1366:                                             ; preds = %1302
  %1367 = icmp eq i8 %1362, 0
  %1368 = icmp eq i32 %1357, 8
  %1369 = and i1 %1367, %1368
  br i1 %1369, label %1370, label %1372

1370:                                             ; preds = %1366, %1302
  %1371 = phi i8 [ 0, %1302 ], [ 1, %1366 ]
  store i8 %1371, i8* %1361, align 1
  br label %1372

1372:                                             ; preds = %1370, %1366
  %1373 = add nuw nsw i64 %1303, 1
  %1374 = load i32, i32* %1234, align 8
  %1375 = add nsw i32 %1374, -1
  %1376 = sext i32 %1375 to i64
  %1377 = icmp slt i64 %1373, %1376
  br i1 %1377, label %1302, label %1378

1378:                                             ; preds = %1372
  %1379 = load i32, i32* %1224, align 4
  br label %1380

1380:                                             ; preds = %1378, %1296
  %1381 = phi i64 [ %1297, %1296 ], [ %1301, %1378 ]
  %1382 = phi i32 [ %1292, %1296 ], [ %1379, %1378 ]
  %1383 = phi i32 [ %1293, %1296 ], [ %1374, %1378 ]
  %1384 = add nsw i32 %1382, -1
  %1385 = sext i32 %1384 to i64
  %1386 = icmp slt i64 %1381, %1385
  br i1 %1386, label %1291, label %1387

1387:                                             ; preds = %1380, %1246, %1208
  %1388 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 139
  %1389 = load i32, i32* %1388, align 4
  %1390 = icmp eq i32 %1389, 0
  br i1 %1390, label %1412, label %1391

1391:                                             ; preds = %1387
  %1392 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 10
  %1393 = load i32, i32* %1392, align 4
  %1394 = icmp eq i32 %1393, 2
  br i1 %1394, label %1395, label %1399

1395:                                             ; preds = %1391
  %1396 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 50
  %1397 = load i32, i32* %1396, align 16
  %1398 = icmp ne i32 %1397, 0
  br label %1399

1399:                                             ; preds = %1395, %1391
  %1400 = phi i1 [ false, %1391 ], [ %1398, %1395 ]
  %1401 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 201
  %1402 = load i32, i32* %1401, align 8
  %1403 = icmp eq i32 %1402, 0
  br i1 %1403, label %1404, label %1410

1404:                                             ; preds = %1399
  %1405 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 149
  %1406 = load i32, i32* %1405, align 4
  %1407 = icmp ne i32 %1406, 0
  %1408 = or i1 %1400, %1407
  br i1 %1408, label %1410, label %1409

1409:                                             ; preds = %1404
  tail call fastcc void @cyclic_background_refresh(%struct.VP8_COMP* %0, i32 %1211) #10
  br label %1412

1410:                                             ; preds = %1404, %1399
  %1411 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 6, i32 23
  store i8 0, i8* %1411, align 32
  br label %1412

1412:                                             ; preds = %1410, %1409, %1387
  call void @vp8_compute_frame_size_bounds(%struct.VP8_COMP* %0, i32* nonnull %14, i32* nonnull %13) #10
  call void @vp8_save_coding_context(%struct.VP8_COMP* %0) #10
  %1413 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %71, align 16
  %1414 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 7
  %1415 = load i32, i32* %1414, align 8
  %1416 = icmp eq i32 %1415, 0
  %1417 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 8
  %1418 = load i32, i32* %1417, align 4
  br i1 %1416, label %1419, label %1424

1419:                                             ; preds = %1412
  %1420 = icmp eq i32 %1418, 0
  br i1 %1420, label %1449, label %1421

1421:                                             ; preds = %1419
  %1422 = icmp eq i32 %1418, 3
  %1423 = select i1 %1422, i8 9, i8 11
  br label %1430

1424:                                             ; preds = %1412
  %1425 = icmp eq i32 %1418, 3
  %1426 = select i1 %1425, i8 9, i8 11
  switch i32 %1415, label %1430 [
    i32 3, label %1429
    i32 1, label %1427
    i32 2, label %1428
  ]

1427:                                             ; preds = %1424
  br label %1430

1428:                                             ; preds = %1424
  br label %1430

1429:                                             ; preds = %1424
  br label %1430

1430:                                             ; preds = %1429, %1428, %1427, %1424, %1421
  %1431 = phi i8 [ %1426, %1429 ], [ %1426, %1428 ], [ %1426, %1427 ], [ %1423, %1421 ], [ %1426, %1424 ]
  %1432 = phi i32 [ 1, %1429 ], [ 3, %1428 ], [ 4, %1427 ], [ 1, %1421 ], [ 1, %1424 ]
  %1433 = phi i32 [ 2, %1429 ], [ 5, %1428 ], [ 5, %1427 ], [ 1, %1421 ], [ 1, %1424 ]
  %1434 = add i32 %1418, -1
  %1435 = icmp ult i32 %1434, 3
  br i1 %1435, label %1436, label %1443

1436:                                             ; preds = %1430
  %1437 = sext i32 %1434 to i64
  %1438 = getelementptr inbounds [3 x i32], [3 x i32]* @switch.table.vp8_get_compressed_data.27, i64 0, i64 %1437
  %1439 = load i32, i32* %1438, align 4
  %1440 = sext i32 %1434 to i64
  %1441 = getelementptr inbounds [3 x i32], [3 x i32]* @switch.table.vp8_get_compressed_data.28, i64 0, i64 %1440
  %1442 = load i32, i32* %1441, align 4
  br label %1443

1443:                                             ; preds = %1436, %1430
  %1444 = phi i32 [ 1, %1430 ], [ %1439, %1436 ]
  %1445 = phi i32 [ 1, %1430 ], [ %1442, %1436 ]
  %1446 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 28
  %1447 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 17, i32 13
  %1448 = load i8*, i8** %1447, align 8
  call void @vpx_scale_frame(%struct.yv12_buffer_config* %1413, %struct.yv12_buffer_config* %1446, i8* %1448, i8 zeroext %1431, i32 %1433, i32 %1432, i32 %1445, i32 %1444, i32 0) #10
  call void @vp8_yv12_extend_frame_borders_c(%struct.yv12_buffer_config* %1446) #10
  br label %1449

1449:                                             ; preds = %1443, %1419
  %1450 = phi %struct.yv12_buffer_config* [ %1446, %1443 ], [ %1413, %1419 ]
  store %struct.yv12_buffer_config* %1450, %struct.yv12_buffer_config** %70, align 8
  %1451 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 5
  %1452 = load i32, i32* %1451, align 8
  %1453 = icmp sgt i32 %1452, 2
  br i1 %1453, label %1454, label %1459

1454:                                             ; preds = %1449
  %1455 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 200, i32 13, i32 7
  %1456 = load i32, i32* %1455, align 4
  %1457 = icmp eq i32 %1456, 0
  br i1 %1457, label %1459, label %1458

1458:                                             ; preds = %1454
  call void @vp8_de_noise(%struct.VP8Common* %520, %struct.yv12_buffer_config* %1450, i32 %1456, i32 1) #10
  br label %1459

1459:                                             ; preds = %1458, %1454, %1449
  call void @vpx_clear_system_state() #10
  call void @vp8_set_quantizer(%struct.VP8_COMP* %0, i32 %1211) #10
  %1460 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 30
  %1461 = load i32, i32* %1460, align 32
  %1462 = icmp eq i32 %1461, 0
  br i1 %1462, label %1508, label %1463

1463:                                             ; preds = %1459
  %1464 = sext i32 %1211 to i64
  %1465 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 182, i64 %1464
  %1466 = load i32, i32* %1465, align 4
  %1467 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 123
  store i32 %1466, i32* %1467, align 8
  %1468 = load i32, i32* %504, align 4
  %1469 = icmp eq i32 %1468, 0
  br i1 %1469, label %1511, label %1470

1470:                                             ; preds = %1463
  %1471 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 51
  %1472 = load i32, i32* %1471, align 4
  %1473 = icmp eq i32 %1472, 0
  br i1 %1473, label %1479, label %1474

1474:                                             ; preds = %1470
  %1475 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 124, i64 2
  %1476 = load i32, i32* %1475, align 4
  %1477 = icmp eq i32 %1476, 0
  br i1 %1477, label %1493, label %1478

1478:                                             ; preds = %1474
  store i32 %1476, i32* %1467, align 8
  br label %1493

1479:                                             ; preds = %1470
  %1480 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 50
  %1481 = load i32, i32* %1480, align 16
  %1482 = icmp eq i32 %1481, 0
  br i1 %1482, label %1488, label %1483

1483:                                             ; preds = %1479
  %1484 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 124, i64 1
  %1485 = load i32, i32* %1484, align 4
  %1486 = icmp eq i32 %1485, 0
  br i1 %1486, label %1493, label %1487

1487:                                             ; preds = %1483
  store i32 %1485, i32* %1467, align 8
  br label %1493

1488:                                             ; preds = %1479
  %1489 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 124, i64 0
  %1490 = load i32, i32* %1489, align 4
  %1491 = icmp eq i32 %1490, 0
  br i1 %1491, label %1493, label %1492

1492:                                             ; preds = %1488
  store i32 %1490, i32* %1467, align 8
  br label %1493

1493:                                             ; preds = %1492, %1488, %1487, %1483, %1478, %1474
  %1494 = phi i32 [ %1485, %1487 ], [ %1490, %1492 ], [ %1476, %1478 ], [ %1466, %1488 ], [ %1466, %1483 ], [ %1466, %1474 ]
  %1495 = icmp slt i32 %1494, 5
  br i1 %1495, label %1498, label %1496

1496:                                             ; preds = %1493
  %1497 = icmp sgt i32 %1494, 250
  br i1 %1497, label %1498, label %1500

1498:                                             ; preds = %1496, %1493
  %1499 = phi i32 [ 5, %1493 ], [ 250, %1496 ]
  store i32 %1499, i32* %1467, align 8
  br label %1500

1500:                                             ; preds = %1498, %1496
  %1501 = load i32, i32* %250, align 4
  %1502 = icmp eq i32 %1501, 1
  br i1 %1502, label %1503, label %1664

1503:                                             ; preds = %1500
  %1504 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 33
  %1505 = load i32, i32* %1504, align 4
  %1506 = icmp eq i32 %1505, 0
  br i1 %1506, label %1664, label %1507

1507:                                             ; preds = %1503
  store i32 1, i32* %1467, align 8
  br label %1664

1508:                                             ; preds = %1459
  %1509 = load i32, i32* %504, align 4
  %1510 = icmp eq i32 %1509, 0
  br i1 %1510, label %1511, label %1664

1511:                                             ; preds = %1508, %1463
  %1512 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 29
  %1513 = load i32, i32* %1512, align 8
  %1514 = icmp eq i32 %1513, 0
  br i1 %1514, label %1662, label %1515

1515:                                             ; preds = %1511
  %1516 = load i32, i32* %958, align 4
  %1517 = icmp eq i32 %1516, 1
  br i1 %1517, label %1518, label %1662

1518:                                             ; preds = %1515
  %1519 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 86
  %1520 = load i64, i64* %1519, align 32
  %1521 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 30
  %1522 = load i32, i32* %1521, align 4
  %1523 = sext i32 %1522 to i64
  %1524 = load i64, i64* %524, align 8
  %1525 = mul nsw i64 %1524, %1523
  %1526 = sdiv i64 %1525, 100
  %1527 = icmp slt i64 %1520, %1526
  br i1 %1527, label %1528, label %1537

1528:                                             ; preds = %1518
  %1529 = load i32, i32* %1414, align 8
  %1530 = icmp slt i32 %1529, 3
  %1531 = add nsw i32 %1529, 1
  %1532 = select i1 %1530, i32 %1531, i32 3
  store i32 %1532, i32* %1414, align 8
  %1533 = load i32, i32* %1417, align 4
  %1534 = icmp slt i32 %1533, 3
  %1535 = add nsw i32 %1533, 1
  %1536 = select i1 %1534, i32 %1535, i32 3
  br label %1553

1537:                                             ; preds = %1518
  %1538 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 31
  %1539 = load i32, i32* %1538, align 8
  %1540 = sext i32 %1539 to i64
  %1541 = mul nsw i64 %1524, %1540
  %1542 = sdiv i64 %1541, 100
  %1543 = icmp sgt i64 %1520, %1542
  %1544 = load i32, i32* %1414, align 8
  br i1 %1543, label %1545, label %1556

1545:                                             ; preds = %1537
  %1546 = icmp sgt i32 %1544, 0
  %1547 = add nsw i32 %1544, -1
  %1548 = select i1 %1546, i32 %1547, i32 0
  store i32 %1548, i32* %1414, align 8
  %1549 = load i32, i32* %1417, align 4
  %1550 = icmp sgt i32 %1549, 0
  %1551 = add nsw i32 %1549, -1
  %1552 = select i1 %1550, i32 %1551, i32 0
  br label %1553

1553:                                             ; preds = %1528, %1545
  %1554 = phi i32 [ %1552, %1545 ], [ %1536, %1528 ]
  %1555 = phi i32 [ %1548, %1545 ], [ %1532, %1528 ]
  store i32 %1554, i32* %1417, align 4
  br label %1556

1556:                                             ; preds = %1553, %1537
  %1557 = phi i32 [ %1544, %1537 ], [ %1555, %1553 ]
  %1558 = add i32 %1557, -1
  %1559 = icmp ult i32 %1558, 3
  br i1 %1559, label %1560, label %1567

1560:                                             ; preds = %1556
  %1561 = sext i32 %1558 to i64
  %1562 = getelementptr inbounds [3 x i32], [3 x i32]* @switch.table.vp8_get_compressed_data.27, i64 0, i64 %1561
  %1563 = load i32, i32* %1562, align 4
  %1564 = sext i32 %1558 to i64
  %1565 = getelementptr inbounds [3 x i32], [3 x i32]* @switch.table.vp8_get_compressed_data.28, i64 0, i64 %1564
  %1566 = load i32, i32* %1565, align 4
  br label %1567

1567:                                             ; preds = %1560, %1556
  %1568 = phi i32 [ 1, %1556 ], [ %1563, %1560 ]
  %1569 = phi i32 [ 1, %1556 ], [ %1566, %1560 ]
  %1570 = load i32, i32* %1417, align 4
  %1571 = add i32 %1570, -1
  %1572 = icmp ult i32 %1571, 3
  br i1 %1572, label %1573, label %1580

1573:                                             ; preds = %1567
  %1574 = sext i32 %1571 to i64
  %1575 = getelementptr inbounds [3 x i32], [3 x i32]* @switch.table.vp8_get_compressed_data.27, i64 0, i64 %1574
  %1576 = load i32, i32* %1575, align 4
  %1577 = sext i32 %1571 to i64
  %1578 = getelementptr inbounds [3 x i32], [3 x i32]* @switch.table.vp8_get_compressed_data.28, i64 0, i64 %1577
  %1579 = load i32, i32* %1578, align 4
  br label %1580

1580:                                             ; preds = %1573, %1567
  %1581 = phi i32 [ 1, %1567 ], [ %1576, %1573 ]
  %1582 = phi i32 [ 1, %1567 ], [ %1579, %1573 ]
  %1583 = add nsw i32 %1569, -1
  %1584 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 1
  %1585 = load i32, i32* %1584, align 4
  %1586 = mul nsw i32 %1585, %1568
  %1587 = add nsw i32 %1583, %1586
  %1588 = sdiv i32 %1587, %1569
  %1589 = add nsw i32 %1582, -1
  %1590 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 2
  %1591 = load i32, i32* %1590, align 8
  %1592 = mul nsw i32 %1591, %1581
  %1593 = add nsw i32 %1589, %1592
  %1594 = sdiv i32 %1593, %1582
  %1595 = load i32, i32* %1217, align 16
  %1596 = icmp eq i32 %1595, %1588
  br i1 %1596, label %1597, label %1600

1597:                                             ; preds = %1580
  %1598 = load i32, i32* %1219, align 4
  %1599 = icmp eq i32 %1598, %1594
  br i1 %1599, label %1662, label %1600

1600:                                             ; preds = %1597, %1580
  store i32 %1588, i32* %1217, align 16
  store i32 %1594, i32* %1219, align 4
  call void @vp8_alloc_compressor_data(%struct.VP8_COMP* %0) #10
  %1601 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %71, align 16
  %1602 = load i32, i32* %1414, align 8
  %1603 = icmp eq i32 %1602, 0
  %1604 = load i32, i32* %1417, align 4
  br i1 %1603, label %1605, label %1610

1605:                                             ; preds = %1600
  %1606 = icmp eq i32 %1604, 0
  br i1 %1606, label %1635, label %1607

1607:                                             ; preds = %1605
  %1608 = icmp eq i32 %1604, 3
  %1609 = select i1 %1608, i8 9, i8 11
  br label %1616

1610:                                             ; preds = %1600
  %1611 = icmp eq i32 %1604, 3
  %1612 = select i1 %1611, i8 9, i8 11
  switch i32 %1602, label %1616 [
    i32 3, label %1615
    i32 1, label %1613
    i32 2, label %1614
  ]

1613:                                             ; preds = %1610
  br label %1616

1614:                                             ; preds = %1610
  br label %1616

1615:                                             ; preds = %1610
  br label %1616

1616:                                             ; preds = %1615, %1614, %1613, %1610, %1607
  %1617 = phi i8 [ %1612, %1615 ], [ %1612, %1614 ], [ %1612, %1613 ], [ %1609, %1607 ], [ %1612, %1610 ]
  %1618 = phi i32 [ 1, %1615 ], [ 3, %1614 ], [ 4, %1613 ], [ 1, %1607 ], [ 1, %1610 ]
  %1619 = phi i32 [ 2, %1615 ], [ 5, %1614 ], [ 5, %1613 ], [ 1, %1607 ], [ 1, %1610 ]
  %1620 = add i32 %1604, -1
  %1621 = icmp ult i32 %1620, 3
  br i1 %1621, label %1622, label %1629

1622:                                             ; preds = %1616
  %1623 = sext i32 %1620 to i64
  %1624 = getelementptr inbounds [3 x i32], [3 x i32]* @switch.table.vp8_get_compressed_data.27, i64 0, i64 %1623
  %1625 = load i32, i32* %1624, align 4
  %1626 = sext i32 %1620 to i64
  %1627 = getelementptr inbounds [3 x i32], [3 x i32]* @switch.table.vp8_get_compressed_data.28, i64 0, i64 %1626
  %1628 = load i32, i32* %1627, align 4
  br label %1629

1629:                                             ; preds = %1622, %1616
  %1630 = phi i32 [ 1, %1616 ], [ %1625, %1622 ]
  %1631 = phi i32 [ 1, %1616 ], [ %1628, %1622 ]
  %1632 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 28
  %1633 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 17, i32 13
  %1634 = load i8*, i8** %1633, align 8
  call void @vpx_scale_frame(%struct.yv12_buffer_config* %1601, %struct.yv12_buffer_config* %1632, i8* %1634, i8 zeroext %1617, i32 %1619, i32 %1618, i32 %1631, i32 %1630, i32 0) #10
  call void @vp8_yv12_extend_frame_borders_c(%struct.yv12_buffer_config* %1632) #10
  br label %1635

1635:                                             ; preds = %1629, %1605
  %1636 = phi %struct.yv12_buffer_config* [ %1632, %1629 ], [ %1601, %1605 ]
  store %struct.yv12_buffer_config* %1636, %struct.yv12_buffer_config** %70, align 8
  %1637 = load i32, i32* %1209, align 16
  %1638 = call i32 @vp8_regulate_q(%struct.VP8_COMP* %0, i32 %1637) #10
  %1639 = load i32, i32* %1388, align 4
  %1640 = icmp eq i32 %1639, 0
  br i1 %1640, label %1648, label %1641

1641:                                             ; preds = %1635
  %1642 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 201
  %1643 = load i32, i32* %1642, align 8
  %1644 = icmp eq i32 %1643, 0
  br i1 %1644, label %1645, label %1646

1645:                                             ; preds = %1641
  call fastcc void @cyclic_background_refresh(%struct.VP8_COMP* %0, i32 %1638) #10
  br label %1648

1646:                                             ; preds = %1641
  %1647 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 6, i32 23
  store i8 0, i8* %1647, align 32
  br label %1648

1648:                                             ; preds = %1646, %1645, %1635
  %1649 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 144
  %1650 = load i8*, i8** %1649, align 8
  %1651 = load i32, i32* %1224, align 4
  %1652 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 28
  %1653 = load i32, i32* %1652, align 8
  %1654 = mul nsw i32 %1653, %1651
  %1655 = sext i32 %1654 to i64
  call void @llvm.memset.p0i8.i64(i8* align 1 %1650, i8 0, i64 %1655, i1 false) #10
  %1656 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 145
  %1657 = load i8*, i8** %1656, align 32
  %1658 = load i32, i32* %1224, align 4
  %1659 = load i32, i32* %1652, align 8
  %1660 = mul nsw i32 %1659, %1658
  %1661 = sext i32 %1660 to i64
  call void @llvm.memset.p0i8.i64(i8* align 1 %1657, i8 0, i64 %1661, i1 false) #10
  call void @vp8_set_quantizer(%struct.VP8_COMP* %0, i32 %1638) #10
  br label %1662

1662:                                             ; preds = %1648, %1597, %1515, %1511
  %1663 = phi i32 [ %1638, %1648 ], [ %1211, %1511 ], [ %1211, %1515 ], [ %1211, %1597 ]
  call void @vp8_setup_key_frame(%struct.VP8_COMP* %0) #10
  br label %1664

1664:                                             ; preds = %1662, %1508, %1507, %1503, %1500
  %1665 = phi i32 [ %1663, %1662 ], [ %1211, %1508 ], [ %1211, %1503 ], [ %1211, %1507 ], [ %1211, %1500 ]
  call void @vp8_encode_frame(%struct.VP8_COMP* %0) #10
  %1666 = load i32, i32* %38, align 8
  %1667 = icmp eq i32 %1666, 0
  br i1 %1667, label %1668, label %1686

1668:                                             ; preds = %1664
  %1669 = load i32, i32* %958, align 4
  %1670 = icmp eq i32 %1669, 1
  br i1 %1670, label %1671, label %1686

1671:                                             ; preds = %1668
  %1672 = call i32 @vp8_drop_encodedframe_overshoot(%struct.VP8_COMP* %0, i32 %1665) #10
  %1673 = icmp eq i32 %1672, 0
  br i1 %1673, label %1675, label %1674

1674:                                             ; preds = %1671
  call void @vpx_clear_system_state() #10
  br label %3037

1675:                                             ; preds = %1671
  %1676 = load i32, i32* %504, align 4
  %1677 = icmp eq i32 %1676, 0
  br i1 %1677, label %1686, label %1678

1678:                                             ; preds = %1675
  %1679 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 54
  %1680 = load i64, i64* %1679, align 8
  %1681 = load i32, i32* %500, align 16
  %1682 = sext i32 %1681 to i64
  %1683 = sdiv i64 %1680, %1682
  %1684 = trunc i64 %1683 to i32
  %1685 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 151
  store i32 %1684, i32* %1685, align 4
  br label %1686

1686:                                             ; preds = %1678, %1675, %1668, %1664
  %1687 = call i32 @vp8_estimate_entropy_savings(%struct.VP8_COMP* %0) #10
  %1688 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 53
  %1689 = load i32, i32* %1688, align 4
  %1690 = sub nsw i32 %1689, %1687
  %1691 = icmp sgt i32 %1690, 0
  %1692 = select i1 %1691, i32 %1690, i32 0
  store i32 %1692, i32* %1688, align 4
  call void @vpx_clear_system_state() #10
  call void @vpx_clear_system_state() #10
  %1693 = load i32, i32* %13, align 4
  %1694 = icmp eq i32 %1693, 0
  br i1 %1694, label %1695, label %1696

1695:                                             ; preds = %1686
  store i32 1, i32* %13, align 4
  br label %1696

1696:                                             ; preds = %1695, %1686
  %1697 = phi i32 [ 1, %1695 ], [ %1693, %1686 ]
  %1698 = load i32, i32* %38, align 8
  %1699 = icmp eq i32 %1698, 2
  br i1 %1699, label %1700, label %1703

1700:                                             ; preds = %1696
  %1701 = load i32, i32* %958, align 4
  %1702 = icmp eq i32 %1701, 1
  br i1 %1702, label %1703, label %1728

1703:                                             ; preds = %1700, %1696
  %1704 = load i32, i32* %1190, align 16
  %1705 = icmp eq i32 %1665, %1704
  br i1 %1705, label %1706, label %1728

1706:                                             ; preds = %1703
  %1707 = load i32, i32* %1192, align 4
  %1708 = icmp slt i32 %1665, %1707
  br i1 %1708, label %1709, label %1728

1709:                                             ; preds = %1706
  %1710 = load i32, i32* %1688, align 4
  %1711 = icmp sgt i32 %1710, %1697
  br i1 %1711, label %1712, label %1728

1712:                                             ; preds = %1709
  %1713 = sub nsw i32 %1710, %1697
  %1714 = mul nsw i32 %1713, 100
  %1715 = sdiv i32 %1714, %1697
  %1716 = icmp sgt i32 %1715, 0
  br i1 %1716, label %1717, label %1728

1717:                                             ; preds = %1712, %1717
  %1718 = phi i32 [ %1720, %1717 ], [ %1665, %1712 ]
  %1719 = phi i32 [ %1723, %1717 ], [ %1715, %1712 ]
  %1720 = add nsw i32 %1718, 1
  %1721 = sitofp i32 %1719 to double
  %1722 = fmul double %1721, 0x3FEEB851EB851EB8
  %1723 = fptosi double %1722 to i32
  %1724 = icmp slt i32 %1720, %1707
  %1725 = icmp sgt i32 %1723, 0
  %1726 = and i1 %1724, %1725
  br i1 %1726, label %1717, label %1727

1727:                                             ; preds = %1717
  store i32 %1720, i32* %1190, align 16
  br label %1728

1728:                                             ; preds = %1727, %1712, %1709, %1706, %1703, %1700
  %1729 = phi i32 [ 0, %1709 ], [ 0, %1706 ], [ 0, %1703 ], [ 0, %1700 ], [ 1, %1727 ], [ 1, %1712 ]
  %1730 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 43
  %1731 = load i32, i32* %1730, align 8
  %1732 = icmp eq i32 %1731, 0
  br i1 %1732, label %1796, label %1733

1733:                                             ; preds = %1728
  %1734 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 186, i32 19
  %1735 = load i32, i32* %1734, align 8
  %1736 = icmp eq i32 %1735, 0
  br i1 %1736, label %1737, label %1796

1737:                                             ; preds = %1733
  %1738 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %70, align 8
  %1739 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 13
  %1740 = load i32, i32* %1739, align 16
  %1741 = sext i32 %1740 to i64
  %1742 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1738, i64 0, i32 1
  %1743 = load i32, i32* %1742, align 4
  %1744 = icmp sgt i32 %1743, 0
  br i1 %1744, label %1745, label %1793

1745:                                             ; preds = %1737
  %1746 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 11, i64 %1741, i32 13
  %1747 = load i8*, i8** %1746, align 8
  %1748 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1738, i64 0, i32 13
  %1749 = load i8*, i8** %1748, align 8
  %1750 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1738, i64 0, i32 0
  %1751 = bitcast i32* %12 to i8*
  %1752 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1738, i64 0, i32 4
  %1753 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 11, i64 %1741, i32 4
  %1754 = load i32, i32* %1750, align 8
  br label %1755

1755:                                             ; preds = %1779, %1745
  %1756 = phi i32 [ %1743, %1745 ], [ %1780, %1779 ]
  %1757 = phi i32 [ %1754, %1745 ], [ %1781, %1779 ]
  %1758 = phi i8* [ %1747, %1745 ], [ %1790, %1779 ]
  %1759 = phi i8* [ %1749, %1745 ], [ %1786, %1779 ]
  %1760 = phi i32 [ 0, %1745 ], [ %1782, %1779 ]
  %1761 = phi i32 [ 0, %1745 ], [ %1791, %1779 ]
  %1762 = icmp sgt i32 %1757, 0
  br i1 %1762, label %1763, label %1779

1763:                                             ; preds = %1755, %1763
  %1764 = phi i64 [ %1773, %1763 ], [ 0, %1755 ]
  %1765 = phi i32 [ %1772, %1763 ], [ %1760, %1755 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1751) #10
  store i32 -1431655766, i32* %12, align 4
  %1766 = load i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i8*, i32, i32*)** @vpx_mse16x16, align 8
  %1767 = getelementptr inbounds i8, i8* %1759, i64 %1764
  %1768 = load i32, i32* %1752, align 8
  %1769 = getelementptr inbounds i8, i8* %1758, i64 %1764
  %1770 = load i32, i32* %1753, align 8
  %1771 = call i32 %1766(i8* %1767, i32 %1768, i8* %1769, i32 %1770, i32* nonnull %12) #10
  %1772 = add i32 %1771, %1765
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1751) #10
  %1773 = add nuw i64 %1764, 16
  %1774 = load i32, i32* %1750, align 8
  %1775 = trunc i64 %1773 to i32
  %1776 = icmp sgt i32 %1774, %1775
  br i1 %1776, label %1763, label %1777

1777:                                             ; preds = %1763
  %1778 = load i32, i32* %1742, align 4
  br label %1779

1779:                                             ; preds = %1777, %1755
  %1780 = phi i32 [ %1756, %1755 ], [ %1778, %1777 ]
  %1781 = phi i32 [ %1757, %1755 ], [ %1774, %1777 ]
  %1782 = phi i32 [ %1760, %1755 ], [ %1772, %1777 ]
  %1783 = load i32, i32* %1752, align 8
  %1784 = shl nsw i32 %1783, 4
  %1785 = sext i32 %1784 to i64
  %1786 = getelementptr inbounds i8, i8* %1759, i64 %1785
  %1787 = load i32, i32* %1753, align 8
  %1788 = shl nsw i32 %1787, 4
  %1789 = sext i32 %1788 to i64
  %1790 = getelementptr inbounds i8, i8* %1758, i64 %1789
  %1791 = add nuw nsw i32 %1761, 16
  %1792 = icmp slt i32 %1791, %1780
  br i1 %1792, label %1755, label %1793

1793:                                             ; preds = %1779, %1737
  %1794 = phi i32 [ 0, %1737 ], [ %1782, %1779 ]
  %1795 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 44
  store i32 %1794, i32* %1795, align 4
  br label %1796

1796:                                             ; preds = %1793, %1733, %1728
  %1797 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 58
  %1798 = load i32, i32* %1797, align 8
  %1799 = icmp eq i32 %1798, 0
  br i1 %1799, label %1800, label %1876

1800:                                             ; preds = %1796
  %1801 = load i32, i32* %57, align 8
  %1802 = icmp eq i32 %1801, 0
  br i1 %1802, label %1876, label %1803

1803:                                             ; preds = %1800
  %1804 = load i32, i32* %504, align 4
  %1805 = icmp eq i32 %1804, 0
  br i1 %1805, label %1806, label %1807

1806:                                             ; preds = %1803
  store i32 0, i32* %497, align 4
  br label %1941

1807:                                             ; preds = %1803
  %1808 = load i32, i32* %1224, align 4
  %1809 = icmp slt i32 %1808, 0
  br i1 %1809, label %1810, label %1811

1810:                                             ; preds = %1807
  store i32 0, i32* %497, align 4
  br label %1941

1811:                                             ; preds = %1807
  %1812 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 40
  %1813 = load %struct.modeinfo*, %struct.modeinfo** %1812, align 8
  %1814 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 28
  %1815 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 193
  %1816 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 29
  %1817 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 194
  %1818 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 195
  %1819 = load i32, i32* %1814, align 8
  br label %1820

1820:                                             ; preds = %1870, %1811
  %1821 = phi i32 [ %1808, %1811 ], [ %1871, %1870 ]
  %1822 = phi i32 [ %1819, %1811 ], [ %1872, %1870 ]
  %1823 = phi %struct.modeinfo* [ %1813, %1811 ], [ %1873, %1870 ]
  %1824 = phi i32 [ 0, %1811 ], [ %1874, %1870 ]
  %1825 = icmp slt i32 %1822, 0
  br i1 %1825, label %1870, label %1826

1826:                                             ; preds = %1820, %1843
  %1827 = phi %struct.modeinfo* [ %1864, %1843 ], [ %1823, %1820 ]
  %1828 = phi i32 [ %1865, %1843 ], [ 0, %1820 ]
  %1829 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1827, i64 0, i32 0, i32 2
  %1830 = load i8, i8* %1829, align 2
  %1831 = icmp eq i8 %1830, 0
  br i1 %1831, label %1843, label %1832

1832:                                             ; preds = %1826
  %1833 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1827, i64 0, i32 0, i32 4, i32 0
  %1834 = load i32, i32* %1833, align 4
  %1835 = load %union.int_mv*, %union.int_mv** %1815, align 32
  %1836 = load i32, i32* %1816, align 4
  %1837 = add nsw i32 %1836, 1
  %1838 = mul nsw i32 %1837, %1824
  %1839 = add nsw i32 %1838, %1828
  %1840 = sext i32 %1839 to i64
  %1841 = getelementptr inbounds %union.int_mv, %union.int_mv* %1835, i64 %1840, i32 0
  store i32 %1834, i32* %1841, align 4
  %1842 = load i8, i8* %1829, align 2
  br label %1843

1843:                                             ; preds = %1832, %1826
  %1844 = phi i8 [ 0, %1826 ], [ %1842, %1832 ]
  %1845 = zext i8 %1844 to i64
  %1846 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 55, i64 %1845
  %1847 = load i32, i32* %1846, align 4
  %1848 = load i32*, i32** %1817, align 8
  %1849 = load i32, i32* %1816, align 4
  %1850 = add nsw i32 %1849, 1
  %1851 = mul nsw i32 %1850, %1824
  %1852 = add nsw i32 %1851, %1828
  %1853 = sext i32 %1852 to i64
  %1854 = getelementptr inbounds i32, i32* %1848, i64 %1853
  store i32 %1847, i32* %1854, align 4
  %1855 = load i8, i8* %1829, align 2
  %1856 = zext i8 %1855 to i32
  %1857 = load i32*, i32** %1818, align 16
  %1858 = load i32, i32* %1816, align 4
  %1859 = add nsw i32 %1858, 1
  %1860 = mul nsw i32 %1859, %1824
  %1861 = add nsw i32 %1860, %1828
  %1862 = sext i32 %1861 to i64
  %1863 = getelementptr inbounds i32, i32* %1857, i64 %1862
  store i32 %1856, i32* %1863, align 4
  %1864 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1827, i64 1
  %1865 = add nuw nsw i32 %1828, 1
  %1866 = load i32, i32* %1814, align 8
  %1867 = icmp slt i32 %1828, %1866
  br i1 %1867, label %1826, label %1868

1868:                                             ; preds = %1843
  %1869 = load i32, i32* %1224, align 4
  br label %1870

1870:                                             ; preds = %1868, %1820
  %1871 = phi i32 [ %1821, %1820 ], [ %1869, %1868 ]
  %1872 = phi i32 [ %1822, %1820 ], [ %1866, %1868 ]
  %1873 = phi %struct.modeinfo* [ %1823, %1820 ], [ %1864, %1868 ]
  %1874 = add nuw nsw i32 %1824, 1
  %1875 = icmp slt i32 %1824, %1871
  br i1 %1875, label %1820, label %1876

1876:                                             ; preds = %1870, %1800, %1796
  %1877 = load i32, i32* %504, align 4
  %1878 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 41
  %1879 = load %struct.modeinfo*, %struct.modeinfo** %1878, align 16
  store i32 0, i32* %497, align 4
  %1880 = icmp eq i32 %1877, 0
  br i1 %1880, label %1941, label %1881

1881:                                             ; preds = %1876
  %1882 = load i32, i32* %1224, align 4
  %1883 = icmp sgt i32 %1882, 0
  br i1 %1883, label %1884, label %1941

1884:                                             ; preds = %1881
  %1885 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 28
  %1886 = load i32, i32* %1885, align 8
  %1887 = icmp sgt i32 %1886, 0
  %1888 = add i32 %1886, -1
  %1889 = zext i32 %1888 to i64
  %1890 = add nuw nsw i64 %1889, 1
  %1891 = and i32 %1886, 1
  %1892 = icmp eq i32 %1888, 0
  %1893 = sub i32 %1886, %1891
  %1894 = icmp eq i32 %1891, 0
  br label %1895

1895:                                             ; preds = %1935, %1884
  %1896 = phi i32 [ 0, %1884 ], [ %1936, %1935 ]
  %1897 = phi %struct.modeinfo* [ %1879, %1884 ], [ %1938, %1935 ]
  %1898 = phi i32 [ 0, %1884 ], [ %1939, %1935 ]
  br i1 %1887, label %1899, label %1935

1899:                                             ; preds = %1895
  br i1 %1892, label %1918, label %1900

1900:                                             ; preds = %1899, %3287
  %1901 = phi i32 [ %3288, %3287 ], [ %1896, %1899 ]
  %1902 = phi %struct.modeinfo* [ %3289, %3287 ], [ %1897, %1899 ]
  %1903 = phi i32 [ %3290, %3287 ], [ %1893, %1899 ]
  %1904 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1902, i64 0, i32 0, i32 0
  %1905 = load i8, i8* %1904, align 4
  %1906 = icmp eq i8 %1905, 7
  br i1 %1906, label %1907, label %1913

1907:                                             ; preds = %1900
  %1908 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1902, i64 0, i32 0, i32 2
  %1909 = load i8, i8* %1908, align 2
  %1910 = icmp eq i8 %1909, 1
  br i1 %1910, label %1911, label %1913

1911:                                             ; preds = %1907
  %1912 = add nsw i32 %1901, 1
  store i32 %1912, i32* %497, align 4
  br label %1913

1913:                                             ; preds = %1911, %1907, %1900
  %1914 = phi i32 [ %1912, %1911 ], [ %1901, %1907 ], [ %1901, %1900 ]
  %1915 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1902, i64 1, i32 0, i32 0
  %1916 = load i8, i8* %1915, align 4
  %1917 = icmp eq i8 %1916, 7
  br i1 %1917, label %3281, label %3287

1918:                                             ; preds = %3287, %1899
  %1919 = phi i32 [ undef, %1899 ], [ %3288, %3287 ]
  %1920 = phi i32 [ %1896, %1899 ], [ %3288, %3287 ]
  %1921 = phi %struct.modeinfo* [ %1897, %1899 ], [ %3289, %3287 ]
  br i1 %1894, label %1932, label %1922

1922:                                             ; preds = %1918
  %1923 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1921, i64 0, i32 0, i32 0
  %1924 = load i8, i8* %1923, align 4
  %1925 = icmp eq i8 %1924, 7
  br i1 %1925, label %1926, label %1932

1926:                                             ; preds = %1922
  %1927 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1921, i64 0, i32 0, i32 2
  %1928 = load i8, i8* %1927, align 2
  %1929 = icmp eq i8 %1928, 1
  br i1 %1929, label %1930, label %1932

1930:                                             ; preds = %1926
  %1931 = add nsw i32 %1920, 1
  store i32 %1931, i32* %497, align 4
  br label %1932

1932:                                             ; preds = %1930, %1926, %1922, %1918
  %1933 = phi i32 [ %1919, %1918 ], [ %1931, %1930 ], [ %1920, %1926 ], [ %1920, %1922 ]
  %1934 = getelementptr %struct.modeinfo, %struct.modeinfo* %1897, i64 %1890
  br label %1935

1935:                                             ; preds = %1932, %1895
  %1936 = phi i32 [ %1896, %1895 ], [ %1933, %1932 ]
  %1937 = phi %struct.modeinfo* [ %1897, %1895 ], [ %1934, %1932 ]
  %1938 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1937, i64 1
  %1939 = add nuw nsw i32 %1898, 1
  %1940 = icmp eq i32 %1939, %1882
  br i1 %1940, label %1941, label %1895

1941:                                             ; preds = %1935, %1810, %1881, %1876, %1806
  call void @vp8_cal_dissimilarity(%struct.VP8_COMP* %0) #10
  %1942 = load i32, i32* %250, align 4
  %1943 = icmp eq i32 %1942, 1
  br i1 %1943, label %1944, label %1945

1944:                                             ; preds = %1941
  call void @vp8_update_gf_useage_maps(%struct.VP8_COMP* %0, %struct.VP8Common* %520, %struct.macroblock* %548) #10
  br label %1945

1945:                                             ; preds = %1944, %1941
  %1946 = load i32, i32* %504, align 4
  %1947 = icmp eq i32 %1946, 0
  br i1 %1947, label %1948, label %1950

1948:                                             ; preds = %1945
  %1949 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 49
  store i32 1, i32* %1949, align 4
  br label %1950

1950:                                             ; preds = %1948, %1945
  %1951 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 45
  %1952 = load i32, i32* %1951, align 8
  %1953 = icmp eq i32 %1952, 0
  br i1 %1953, label %1954, label %1962

1954:                                             ; preds = %1950
  %1955 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 50
  %1956 = load i32, i32* %1955, align 16
  %1957 = icmp eq i32 %1956, 0
  br i1 %1957, label %1962, label %1958

1958:                                             ; preds = %1954
  %1959 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 221
  %1960 = load i32, i32* %1959, align 16
  %1961 = icmp eq i32 %1960, 0
  br i1 %1961, label %1963, label %1962

1962:                                             ; preds = %1958, %1954, %1950
  br label %1963

1963:                                             ; preds = %1962, %1958
  %1964 = phi i32 [ 0, %1962 ], [ 2, %1958 ]
  store i32 %1964, i32* %547, align 4
  %1965 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 13
  %1966 = load i32, i32* %1965, align 16
  %1967 = sext i32 %1966 to i64
  %1968 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 11, i64 %1967
  %1969 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 10
  store %struct.yv12_buffer_config* %1968, %struct.yv12_buffer_config** %1969, align 8
  %1970 = load i32, i32* %1451, align 8
  %1971 = add i32 %1970, -1
  %1972 = icmp ult i32 %1971, 3
  br i1 %1972, label %1973, label %2073

1973:                                             ; preds = %1963
  %1974 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 10
  %1975 = load i32, i32* %1974, align 4
  %1976 = icmp eq i32 %1975, 0
  br i1 %1976, label %1977, label %2274

1977:                                             ; preds = %1973
  %1978 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 40
  %1979 = load i32, i32* %1978, align 4
  %1980 = and i32 %1979, 7
  %1981 = icmp ne i32 %1980, 0
  %1982 = or i1 %1947, %1981
  br i1 %1982, label %2274, label %1983

1983:                                             ; preds = %1977
  %1984 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %70, align 8
  %1985 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 200, i32 0, i64 0, i32 1
  %1986 = load i32, i32* %1985, align 4
  %1987 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 200, i32 0, i64 0, i32 0
  %1988 = load i32, i32* %1987, align 8
  %1989 = mul nsw i32 %1988, %1986
  %1990 = icmp sgt i32 %1986, 0
  br i1 %1990, label %1991, label %2062

1991:                                             ; preds = %1983
  %1992 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1984, i64 0, i32 13
  %1993 = load i8*, i8** %1992, align 8
  %1994 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 200, i32 0, i64 0, i32 13
  %1995 = load i8*, i8** %1994, align 8
  %1996 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 28
  %1997 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 144
  %1998 = bitcast i32* %11 to i8*
  %1999 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 200, i32 0, i64 0, i32 4
  %2000 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1984, i64 0, i32 4
  br label %2001

2001:                                             ; preds = %2046, %1991
  %2002 = phi i32 [ %1986, %1991 ], [ %2047, %2046 ]
  %2003 = phi i32 [ %1988, %1991 ], [ %2048, %2046 ]
  %2004 = phi i32 [ %1988, %1991 ], [ %2049, %2046 ]
  %2005 = phi i8* [ %1993, %1991 ], [ %2059, %2046 ]
  %2006 = phi i8* [ %1995, %1991 ], [ %2055, %2046 ]
  %2007 = phi i32 [ 0, %1991 ], [ %2051, %2046 ]
  %2008 = phi i32 [ 0, %1991 ], [ %2050, %2046 ]
  %2009 = phi i32 [ 0, %1991 ], [ %2060, %2046 ]
  %2010 = lshr exact i32 %2009, 4
  %2011 = load i32, i32* %1996, align 8
  %2012 = mul nsw i32 %2011, %2010
  %2013 = icmp sgt i32 %2004, 0
  br i1 %2013, label %2014, label %2046

2014:                                             ; preds = %2001, %2037
  %2015 = phi i32 [ %2038, %2037 ], [ %2003, %2001 ]
  %2016 = phi i64 [ %2041, %2037 ], [ 0, %2001 ]
  %2017 = phi i32 [ %2040, %2037 ], [ %2007, %2001 ]
  %2018 = phi i32 [ %2039, %2037 ], [ %2008, %2001 ]
  %2019 = trunc i64 %2016 to i32
  %2020 = lshr exact i32 %2019, 4
  %2021 = add nsw i32 %2020, %2012
  %2022 = load i8*, i8** %1997, align 8
  %2023 = sext i32 %2021 to i64
  %2024 = getelementptr inbounds i8, i8* %2022, i64 %2023
  %2025 = load i8, i8* %2024, align 1
  %2026 = icmp ugt i8 %2025, 9
  br i1 %2026, label %2027, label %2037

2027:                                             ; preds = %2014
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1998) #10
  store i32 -1431655766, i32* %11, align 4
  %2028 = load i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i8*, i32, i32*)** @vpx_mse16x16, align 8
  %2029 = getelementptr inbounds i8, i8* %2006, i64 %2016
  %2030 = load i32, i32* %1999, align 8
  %2031 = getelementptr inbounds i8, i8* %2005, i64 %2016
  %2032 = load i32, i32* %2000, align 8
  %2033 = call i32 %2028(i8* %2029, i32 %2030, i8* %2031, i32 %2032, i32* nonnull %11) #10
  %2034 = add i32 %2033, %2018
  %2035 = add nsw i32 %2017, 1
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1998) #10
  %2036 = load i32, i32* %1987, align 8
  br label %2037

2037:                                             ; preds = %2027, %2014
  %2038 = phi i32 [ %2036, %2027 ], [ %2015, %2014 ]
  %2039 = phi i32 [ %2034, %2027 ], [ %2018, %2014 ]
  %2040 = phi i32 [ %2035, %2027 ], [ %2017, %2014 ]
  %2041 = add nuw i64 %2016, 32
  %2042 = trunc i64 %2041 to i32
  %2043 = icmp sgt i32 %2038, %2042
  br i1 %2043, label %2014, label %2044

2044:                                             ; preds = %2037
  %2045 = load i32, i32* %1985, align 4
  br label %2046

2046:                                             ; preds = %2044, %2001
  %2047 = phi i32 [ %2002, %2001 ], [ %2045, %2044 ]
  %2048 = phi i32 [ %2003, %2001 ], [ %2038, %2044 ]
  %2049 = phi i32 [ %2004, %2001 ], [ %2038, %2044 ]
  %2050 = phi i32 [ %2008, %2001 ], [ %2039, %2044 ]
  %2051 = phi i32 [ %2007, %2001 ], [ %2040, %2044 ]
  %2052 = load i32, i32* %1999, align 8
  %2053 = shl nsw i32 %2052, 5
  %2054 = sext i32 %2053 to i64
  %2055 = getelementptr inbounds i8, i8* %2006, i64 %2054
  %2056 = load i32, i32* %2000, align 8
  %2057 = shl nsw i32 %2056, 5
  %2058 = sext i32 %2057 to i64
  %2059 = getelementptr inbounds i8, i8* %2005, i64 %2058
  %2060 = add nuw nsw i32 %2009, 32
  %2061 = icmp slt i32 %2060, %2047
  br i1 %2061, label %2001, label %2062

2062:                                             ; preds = %2046, %1983
  %2063 = phi i32 [ 0, %1983 ], [ %2050, %2046 ]
  %2064 = phi i32 [ 0, %1983 ], [ %2051, %2046 ]
  %2065 = ashr i32 %1989, 12
  %2066 = icmp sgt i32 %2064, %2065
  br i1 %2066, label %2067, label %2069

2067:                                             ; preds = %2062
  %2068 = sdiv i32 %2063, %2064
  br label %2069

2069:                                             ; preds = %2067, %2062
  %2070 = phi i32 [ %2068, %2067 ], [ 0, %2062 ]
  %2071 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 148
  store i32 %2070, i32* %2071, align 16
  %2072 = load i32, i32* %1451, align 8
  br label %2073

2073:                                             ; preds = %2069, %1963
  %2074 = phi i32 [ %1970, %1963 ], [ %2072, %2069 ]
  %2075 = icmp eq i32 %2074, 4
  br i1 %2075, label %2076, label %2274

2076:                                             ; preds = %2073
  %2077 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 10
  %2078 = load i32, i32* %2077, align 4
  %2079 = icmp eq i32 %2078, 0
  br i1 %2079, label %2080, label %2274

2080:                                             ; preds = %2076
  %2081 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 40
  %2082 = load i32, i32* %2081, align 4
  %2083 = and i32 %2082, 7
  %2084 = icmp eq i32 %2083, 0
  br i1 %2084, label %2085, label %2274

2085:                                             ; preds = %2080
  %2086 = load i32, i32* %504, align 4
  %2087 = icmp eq i32 %2086, 0
  br i1 %2087, label %2274, label %2088

2088:                                             ; preds = %2085
  %2089 = load i32, i32* %250, align 4
  %2090 = udiv i32 12, %2089
  %2091 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 85
  %2092 = load double, double* %2091, align 8
  %2093 = fcmp olt double %2092, 2.500000e+01
  %2094 = select i1 %2093, i32 80, i32 100
  %2095 = load i32, i32* %1224, align 4
  %2096 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 28
  %2097 = load i32, i32* %2096, align 8
  %2098 = mul nsw i32 %2097, %2095
  %2099 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %70, align 8
  %2100 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %2099, i64 0, i32 4
  %2101 = load i32, i32* %2100, align 8
  %2102 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 200
  %2103 = icmp ugt i32 %2089, 1
  %2104 = add i32 %2089, -1
  %2105 = zext i32 %2104 to i64
  %2106 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %2105, i32 1
  %2107 = select i1 %2103, i32* %2106, i32* %538
  %2108 = load i32, i32* %2107, align 4
  %2109 = load i32, i32* %1219, align 4
  %2110 = icmp sgt i32 %2109, 0
  br i1 %2110, label %2111, label %2193

2111:                                             ; preds = %2088
  %2112 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 200, i32 2, i32 13
  %2113 = load i8*, i8** %2112, align 8
  %2114 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %2099, i64 0, i32 13
  %2115 = load i8*, i8** %2114, align 8
  %2116 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 144
  %2117 = bitcast i32* %9 to i8*
  %2118 = bitcast i32* %10 to i8*
  %2119 = shl nsw i32 %2101, 5
  %2120 = sext i32 %2119 to i64
  %2121 = load i32, i32* %1217, align 16
  br label %2122

2122:                                             ; preds = %2189, %2111
  %2123 = phi i32 [ %2109, %2111 ], [ %2182, %2189 ]
  %2124 = phi i32 [ %2121, %2111 ], [ %2183, %2189 ]
  %2125 = phi i32 [ %2121, %2111 ], [ %2184, %2189 ]
  %2126 = phi i32 [ %2097, %2111 ], [ %2192, %2189 ]
  %2127 = phi i32 [ 0, %2111 ], [ %2187, %2189 ]
  %2128 = phi i8* [ %2113, %2111 ], [ %2190, %2189 ]
  %2129 = phi i8* [ %2115, %2111 ], [ %2191, %2189 ]
  %2130 = phi i32 [ 0, %2111 ], [ %2186, %2189 ]
  %2131 = phi i32 [ 0, %2111 ], [ %2185, %2189 ]
  %2132 = lshr exact i32 %2127, 4
  %2133 = mul nsw i32 %2132, %2126
  %2134 = icmp sgt i32 %2125, 0
  br i1 %2134, label %2135, label %2181

2135:                                             ; preds = %2122, %2172
  %2136 = phi i32 [ %2173, %2172 ], [ %2124, %2122 ]
  %2137 = phi i64 [ %2176, %2172 ], [ 0, %2122 ]
  %2138 = phi i32 [ %2175, %2172 ], [ %2130, %2122 ]
  %2139 = phi i32 [ %2174, %2172 ], [ %2131, %2122 ]
  %2140 = trunc i64 %2137 to i32
  %2141 = lshr exact i32 %2140, 4
  %2142 = add nsw i32 %2141, %2133
  %2143 = load i8*, i8** %2116, align 8
  %2144 = sext i32 %2142 to i64
  %2145 = getelementptr inbounds i8, i8* %2143, i64 %2144
  %2146 = load i8, i8* %2145, align 1
  %2147 = zext i8 %2146 to i32
  %2148 = icmp sgt i32 %2090, %2147
  br i1 %2148, label %2172, label %2149

2149:                                             ; preds = %2135
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %2117) #10
  store i32 -1431655766, i32* %9, align 4
  %2150 = load i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i8*, i32, i32*)** @vpx_variance16x16, align 8
  %2151 = getelementptr inbounds i8, i8* %2129, i64 %2137
  %2152 = getelementptr inbounds i8, i8* %2128, i64 %2137
  %2153 = call i32 %2150(i8* %2151, i32 %2101, i8* %2152, i32 %2101, i32* nonnull %9) #10
  %2154 = load i32, i32* %9, align 4
  %2155 = sub i32 %2154, %2153
  %2156 = icmp ult i32 %2155, 128
  br i1 %2156, label %2157, label %2168

2157:                                             ; preds = %2149
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %2118) #10
  store i32 -1431655766, i32* %10, align 4
  %2158 = load i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i8*, i32, i32*)** @vpx_variance16x16, align 8
  %2159 = call i32 %2158(i8* %2151, i32 %2101, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @process_denoiser_mode_change.const_source, i64 0, i64 0), i32 0, i32* nonnull %10) #10
  %2160 = icmp eq i32 %2159, 0
  br i1 %2160, label %2165, label %2161

2161:                                             ; preds = %2157
  %2162 = load i32, i32* %9, align 4
  %2163 = udiv i32 %2162, %2159
  %2164 = add i32 %2163, %2139
  br label %2165

2165:                                             ; preds = %2161, %2157
  %2166 = phi i32 [ %2164, %2161 ], [ %2139, %2157 ]
  %2167 = add nsw i32 %2138, 1
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %2118) #10
  br label %2168

2168:                                             ; preds = %2165, %2149
  %2169 = phi i32 [ %2166, %2165 ], [ %2139, %2149 ]
  %2170 = phi i32 [ %2167, %2165 ], [ %2138, %2149 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %2117) #10
  %2171 = load i32, i32* %1217, align 16
  br label %2172

2172:                                             ; preds = %2168, %2135
  %2173 = phi i32 [ %2171, %2168 ], [ %2136, %2135 ]
  %2174 = phi i32 [ %2169, %2168 ], [ %2139, %2135 ]
  %2175 = phi i32 [ %2170, %2168 ], [ %2138, %2135 ]
  %2176 = add nuw i64 %2137, 32
  %2177 = trunc i64 %2176 to i32
  %2178 = icmp sgt i32 %2173, %2177
  br i1 %2178, label %2135, label %2179

2179:                                             ; preds = %2172
  %2180 = load i32, i32* %1219, align 4
  br label %2181

2181:                                             ; preds = %2179, %2122
  %2182 = phi i32 [ %2123, %2122 ], [ %2180, %2179 ]
  %2183 = phi i32 [ %2124, %2122 ], [ %2173, %2179 ]
  %2184 = phi i32 [ %2125, %2122 ], [ %2173, %2179 ]
  %2185 = phi i32 [ %2131, %2122 ], [ %2174, %2179 ]
  %2186 = phi i32 [ %2130, %2122 ], [ %2175, %2179 ]
  %2187 = add nuw nsw i32 %2127, 32
  %2188 = icmp slt i32 %2187, %2182
  br i1 %2188, label %2189, label %2193

2189:                                             ; preds = %2181
  %2190 = getelementptr inbounds i8, i8* %2128, i64 %2120
  %2191 = getelementptr inbounds i8, i8* %2129, i64 %2120
  %2192 = load i32, i32* %2096, align 8
  br label %2122

2193:                                             ; preds = %2181, %2088
  %2194 = phi i32 [ 0, %2088 ], [ %2185, %2181 ]
  %2195 = phi i32 [ 0, %2088 ], [ %2186, %2181 ]
  %2196 = mul nsw i32 %2194, %2094
  %2197 = icmp sgt i32 %2196, 99
  %2198 = ashr i32 %2098, 4
  %2199 = icmp sgt i32 %2195, %2198
  %2200 = and i1 %2197, %2199
  br i1 %2200, label %2204, label %2201

2201:                                             ; preds = %2193
  %2202 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 200, i32 8
  %2203 = load i32, i32* %2202, align 8
  br label %2230

2204:                                             ; preds = %2193
  %2205 = udiv i32 %2196, 100
  %2206 = shl i32 %2205, 8
  %2207 = sdiv i32 %2206, %2195
  %2208 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 200, i32 8
  %2209 = load i32, i32* %2208, align 8
  %2210 = icmp eq i32 %2209, 0
  %2211 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 200, i32 7
  br i1 %2210, label %2212, label %2216

2212:                                             ; preds = %2204
  store i32 %2207, i32* %2211, align 4
  %2213 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 34
  %2214 = load i32, i32* %2213, align 16
  %2215 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 200, i32 9
  store i32 %2214, i32* %2215, align 4
  br label %2228

2216:                                             ; preds = %2204
  %2217 = load i32, i32* %2211, align 4
  %2218 = mul nsw i32 %2217, 3
  %2219 = add nsw i32 %2218, %2207
  %2220 = ashr i32 %2219, 2
  store i32 %2220, i32* %2211, align 4
  %2221 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 34
  %2222 = load i32, i32* %2221, align 16
  %2223 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 200, i32 9
  %2224 = load i32, i32* %2223, align 4
  %2225 = mul nsw i32 %2224, 3
  %2226 = add nsw i32 %2225, %2222
  %2227 = ashr i32 %2226, 2
  store i32 %2227, i32* %2223, align 4
  br label %2228

2228:                                             ; preds = %2216, %2212
  %2229 = add nsw i32 %2209, 1
  store i32 %2229, i32* %2208, align 8
  br label %2230

2230:                                             ; preds = %2228, %2201
  %2231 = phi i32 [ %2203, %2201 ], [ %2229, %2228 ]
  %2232 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 200, i32 8
  %2233 = icmp eq i32 %2231, 20
  br i1 %2233, label %2234, label %2274

2234:                                             ; preds = %2230
  %2235 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 200, i32 5
  %2236 = load i32, i32* %2235, align 4
  switch i32 %2236, label %2271 [
    i32 2, label %2237
    i32 3, label %2254
  ]

2237:                                             ; preds = %2234
  %2238 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 200, i32 7
  %2239 = load i32, i32* %2238, align 4
  %2240 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 200, i32 6
  %2241 = load i32, i32* %2240, align 8
  %2242 = icmp sgt i32 %2239, %2241
  br i1 %2242, label %2243, label %2271

2243:                                             ; preds = %2237
  %2244 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 200, i32 9
  %2245 = load i32, i32* %2244, align 4
  %2246 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 200, i32 10
  %2247 = load i32, i32* %2246, align 8
  %2248 = icmp slt i32 %2245, %2247
  br i1 %2248, label %2249, label %2271

2249:                                             ; preds = %2243
  %2250 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 200, i32 12
  %2251 = load i32, i32* %2250, align 8
  %2252 = icmp sgt i32 %2108, %2251
  br i1 %2252, label %2253, label %2271

2253:                                             ; preds = %2249
  call void @vp8_denoiser_set_parameters(%struct.vp8_denoiser* %2102, i32 3) #10
  br label %2271

2254:                                             ; preds = %2234
  %2255 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 200, i32 7
  %2256 = load i32, i32* %2255, align 4
  %2257 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 200, i32 6
  %2258 = load i32, i32* %2257, align 8
  %2259 = icmp slt i32 %2256, %2258
  br i1 %2259, label %2270, label %2260

2260:                                             ; preds = %2254
  %2261 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 200, i32 9
  %2262 = load i32, i32* %2261, align 4
  %2263 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 200, i32 11
  %2264 = load i32, i32* %2263, align 4
  %2265 = icmp sgt i32 %2262, %2264
  br i1 %2265, label %2270, label %2266

2266:                                             ; preds = %2260
  %2267 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 200, i32 12
  %2268 = load i32, i32* %2267, align 8
  %2269 = icmp slt i32 %2108, %2268
  br i1 %2269, label %2270, label %2271

2270:                                             ; preds = %2266, %2260, %2254
  call void @vp8_denoiser_set_parameters(%struct.vp8_denoiser* %2102, i32 2) #10
  br label %2271

2271:                                             ; preds = %2270, %2266, %2253, %2249, %2243, %2237, %2234
  %2272 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 200, i32 7
  store i32 0, i32* %2272, align 4
  %2273 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 200, i32 9
  store i32 0, i32* %2273, align 4
  store i32 0, i32* %2232, align 8
  br label %2274

2274:                                             ; preds = %2271, %2230, %2085, %2080, %2076, %2073, %1977, %1973
  %2275 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 157, i32 0
  %2276 = load atomic volatile i32, i32* %2275 acquire, align 4
  %2277 = icmp eq i32 %2276, 0
  br i1 %2277, label %2284, label %2278

2278:                                             ; preds = %2274
  %2279 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 167
  %2280 = call i32 @sem_post(%union.sem_t* %2279) #10
  %2281 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 159
  store i32 1, i32* %2281, align 4
  %2282 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 168
  %2283 = call i32 @sem_wait(%union.sem_t* %2282) #10
  br label %2285

2284:                                             ; preds = %2274
  call void @vp8_loopfilter_frame(%struct.VP8_COMP* %0, %struct.VP8Common* %520) #10
  br label %2285

2285:                                             ; preds = %2284, %2278
  %2286 = load i32, i32* %504, align 4
  %2287 = icmp eq i32 %2286, 0
  br i1 %2287, label %2288, label %2309

2288:                                             ; preds = %2285
  %2289 = load i32, i32* %1965, align 16
  %2290 = sext i32 %2289 to i64
  %2291 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 11, i64 %2290, i32 29
  %2292 = load i32, i32* %2291, align 8
  %2293 = or i32 %2292, 6
  store i32 %2293, i32* %2291, align 8
  %2294 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 15
  %2295 = load i32, i32* %2294, align 8
  %2296 = sext i32 %2295 to i64
  %2297 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 11, i64 %2296, i32 29
  %2298 = load i32, i32* %2297, align 8
  %2299 = and i32 %2298, -3
  store i32 %2299, i32* %2297, align 8
  %2300 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 16
  %2301 = load i32, i32* %2300, align 4
  %2302 = sext i32 %2301 to i64
  %2303 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 11, i64 %2302, i32 29
  %2304 = load i32, i32* %2303, align 8
  %2305 = and i32 %2304, -5
  store i32 %2305, i32* %2303, align 8
  store i32 %2289, i32* %2294, align 8
  store i32 %2289, i32* %2300, align 4
  %2306 = load i32, i32* %565, align 4
  %2307 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 217, i64 2
  store i32 %2306, i32* %2307, align 8
  %2308 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 217, i64 3
  store i32 %2306, i32* %2308, align 4
  br label %2425

2309:                                             ; preds = %2285
  %2310 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 51
  %2311 = load i32, i32* %2310, align 4
  %2312 = icmp eq i32 %2311, 0
  br i1 %2312, label %2327, label %2313

2313:                                             ; preds = %2309
  %2314 = load i32, i32* %1965, align 16
  %2315 = sext i32 %2314 to i64
  %2316 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 11, i64 %2315, i32 29
  %2317 = load i32, i32* %2316, align 8
  %2318 = or i32 %2317, 4
  store i32 %2318, i32* %2316, align 8
  %2319 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 16
  %2320 = load i32, i32* %2319, align 4
  %2321 = sext i32 %2320 to i64
  %2322 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 11, i64 %2321, i32 29
  %2323 = load i32, i32* %2322, align 8
  %2324 = and i32 %2323, -5
  store i32 %2324, i32* %2322, align 8
  store i32 %2314, i32* %2319, align 4
  %2325 = load i32, i32* %565, align 4
  %2326 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 217, i64 3
  store i32 %2325, i32* %2326, align 4
  br label %2367

2327:                                             ; preds = %2309
  %2328 = load i32, i32* %547, align 4
  %2329 = icmp eq i32 %2328, 0
  br i1 %2329, label %2367, label %2330

2330:                                             ; preds = %2327
  %2331 = icmp eq i32 %2328, 1
  %2332 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 16
  %2333 = load i32, i32* %2332, align 4
  br i1 %2331, label %2334, label %2350

2334:                                             ; preds = %2330
  %2335 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 14
  %2336 = load i32, i32* %2335, align 4
  %2337 = icmp eq i32 %2333, %2336
  br i1 %2337, label %2367, label %2338

2338:                                             ; preds = %2334
  %2339 = sext i32 %2336 to i64
  %2340 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 11, i64 %2339, i32 29
  %2341 = load i32, i32* %2340, align 8
  %2342 = or i32 %2341, 4
  store i32 %2342, i32* %2340, align 8
  %2343 = sext i32 %2333 to i64
  %2344 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 11, i64 %2343, i32 29
  %2345 = load i32, i32* %2344, align 8
  %2346 = and i32 %2345, -5
  store i32 %2346, i32* %2344, align 8
  store i32 %2336, i32* %2332, align 4
  %2347 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 217, i64 1
  %2348 = load i32, i32* %2347, align 4
  %2349 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 217, i64 3
  store i32 %2348, i32* %2349, align 4
  br label %2367

2350:                                             ; preds = %2330
  %2351 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 15
  %2352 = load i32, i32* %2351, align 8
  %2353 = icmp eq i32 %2333, %2352
  br i1 %2353, label %2367, label %2354

2354:                                             ; preds = %2350
  %2355 = sext i32 %2352 to i64
  %2356 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 11, i64 %2355, i32 29
  %2357 = load i32, i32* %2356, align 8
  %2358 = or i32 %2357, 4
  store i32 %2358, i32* %2356, align 8
  %2359 = sext i32 %2333 to i64
  %2360 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 11, i64 %2359, i32 29
  %2361 = load i32, i32* %2360, align 8
  %2362 = and i32 %2361, -5
  store i32 %2362, i32* %2360, align 8
  %2363 = load i32, i32* %2351, align 8
  store i32 %2363, i32* %2332, align 4
  %2364 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 217, i64 2
  %2365 = load i32, i32* %2364, align 8
  %2366 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 217, i64 3
  store i32 %2365, i32* %2366, align 4
  br label %2367

2367:                                             ; preds = %2354, %2350, %2338, %2334, %2327, %2313
  %2368 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 50
  %2369 = load i32, i32* %2368, align 16
  %2370 = icmp eq i32 %2369, 0
  br i1 %2370, label %2385, label %2371

2371:                                             ; preds = %2367
  %2372 = load i32, i32* %1965, align 16
  %2373 = sext i32 %2372 to i64
  %2374 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 11, i64 %2373, i32 29
  %2375 = load i32, i32* %2374, align 8
  %2376 = or i32 %2375, 2
  store i32 %2376, i32* %2374, align 8
  %2377 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 15
  %2378 = load i32, i32* %2377, align 8
  %2379 = sext i32 %2378 to i64
  %2380 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 11, i64 %2379, i32 29
  %2381 = load i32, i32* %2380, align 8
  %2382 = and i32 %2381, -3
  store i32 %2382, i32* %2380, align 8
  store i32 %2372, i32* %2377, align 8
  %2383 = load i32, i32* %565, align 4
  %2384 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 217, i64 2
  store i32 %2383, i32* %2384, align 8
  br label %2425

2385:                                             ; preds = %2367
  %2386 = load i32, i32* %546, align 8
  switch i32 %2386, label %2406 [
    i32 0, label %2425
    i32 1, label %2387
  ]

2387:                                             ; preds = %2385
  %2388 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 15
  %2389 = load i32, i32* %2388, align 8
  %2390 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 14
  %2391 = load i32, i32* %2390, align 4
  %2392 = icmp eq i32 %2389, %2391
  br i1 %2392, label %2425, label %2393

2393:                                             ; preds = %2387
  %2394 = sext i32 %2391 to i64
  %2395 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 11, i64 %2394, i32 29
  %2396 = load i32, i32* %2395, align 8
  %2397 = or i32 %2396, 2
  store i32 %2397, i32* %2395, align 8
  %2398 = load i32, i32* %2388, align 8
  %2399 = sext i32 %2398 to i64
  %2400 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 11, i64 %2399, i32 29
  %2401 = load i32, i32* %2400, align 8
  %2402 = and i32 %2401, -3
  store i32 %2402, i32* %2400, align 8
  store i32 %2391, i32* %2388, align 8
  %2403 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 217, i64 1
  %2404 = load i32, i32* %2403, align 4
  %2405 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 217, i64 2
  store i32 %2404, i32* %2405, align 8
  br label %2425

2406:                                             ; preds = %2385
  %2407 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 16
  %2408 = load i32, i32* %2407, align 4
  %2409 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 15
  %2410 = load i32, i32* %2409, align 8
  %2411 = icmp eq i32 %2408, %2410
  br i1 %2411, label %2425, label %2412

2412:                                             ; preds = %2406
  %2413 = sext i32 %2408 to i64
  %2414 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 11, i64 %2413, i32 29
  %2415 = load i32, i32* %2414, align 8
  %2416 = or i32 %2415, 2
  store i32 %2416, i32* %2414, align 8
  %2417 = load i32, i32* %2409, align 8
  %2418 = sext i32 %2417 to i64
  %2419 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 11, i64 %2418, i32 29
  %2420 = load i32, i32* %2419, align 8
  %2421 = and i32 %2420, -3
  store i32 %2421, i32* %2419, align 8
  store i32 %2408, i32* %2409, align 8
  %2422 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 217, i64 3
  %2423 = load i32, i32* %2422, align 4
  %2424 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 217, i64 2
  store i32 %2423, i32* %2424, align 8
  br label %2425

2425:                                             ; preds = %2412, %2406, %2393, %2387, %2385, %2371, %2288
  %2426 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 49
  %2427 = load i32, i32* %2426, align 4
  %2428 = icmp eq i32 %2427, 0
  br i1 %2428, label %2443, label %2429

2429:                                             ; preds = %2425
  %2430 = load i32, i32* %1965, align 16
  %2431 = sext i32 %2430 to i64
  %2432 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 11, i64 %2431, i32 29
  %2433 = load i32, i32* %2432, align 8
  %2434 = or i32 %2433, 1
  store i32 %2434, i32* %2432, align 8
  %2435 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 14
  %2436 = load i32, i32* %2435, align 4
  %2437 = sext i32 %2436 to i64
  %2438 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 11, i64 %2437, i32 29
  %2439 = load i32, i32* %2438, align 8
  %2440 = and i32 %2439, -2
  store i32 %2440, i32* %2438, align 8
  store i32 %2430, i32* %2435, align 4
  %2441 = load i32, i32* %565, align 4
  %2442 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 217, i64 1
  store i32 %2441, i32* %2442, align 4
  br label %2443

2443:                                             ; preds = %2429, %2425
  %2444 = load i32, i32* %1451, align 8
  %2445 = icmp eq i32 %2444, 0
  br i1 %2445, label %2484, label %2446

2446:                                             ; preds = %2443
  br i1 %2287, label %2447, label %2454

2447:                                             ; preds = %2446
  %2448 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %70, align 8
  %2449 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 200, i32 0, i64 1
  call void @vp8_yv12_copy_frame_c(%struct.yv12_buffer_config* %2448, %struct.yv12_buffer_config* %2449) #10
  %2450 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %70, align 8
  %2451 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 200, i32 0, i64 2
  call void @vp8_yv12_copy_frame_c(%struct.yv12_buffer_config* %2450, %struct.yv12_buffer_config* %2451) #10
  %2452 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %70, align 8
  %2453 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 200, i32 0, i64 3
  call void @vp8_yv12_copy_frame_c(%struct.yv12_buffer_config* %2452, %struct.yv12_buffer_config* %2453) #10
  br label %2478

2454:                                             ; preds = %2446
  %2455 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 200, i32 0, i64 0
  call void @vp8_yv12_extend_frame_borders_c(%struct.yv12_buffer_config* %2455) #10
  %2456 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 51
  %2457 = load i32, i32* %2456, align 4
  %2458 = icmp eq i32 %2457, 0
  br i1 %2458, label %2459, label %2462

2459:                                             ; preds = %2454
  %2460 = load i32, i32* %547, align 4
  %2461 = icmp eq i32 %2460, 0
  br i1 %2461, label %2464, label %2462

2462:                                             ; preds = %2459, %2454
  %2463 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 200, i32 0, i64 3
  call void @vp8_yv12_copy_frame_c(%struct.yv12_buffer_config* %2455, %struct.yv12_buffer_config* %2463) #10
  br label %2464

2464:                                             ; preds = %2462, %2459
  %2465 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 50
  %2466 = load i32, i32* %2465, align 16
  %2467 = icmp eq i32 %2466, 0
  br i1 %2467, label %2468, label %2471

2468:                                             ; preds = %2464
  %2469 = load i32, i32* %546, align 8
  %2470 = icmp eq i32 %2469, 0
  br i1 %2470, label %2473, label %2471

2471:                                             ; preds = %2468, %2464
  %2472 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 200, i32 0, i64 2
  call void @vp8_yv12_copy_frame_c(%struct.yv12_buffer_config* %2455, %struct.yv12_buffer_config* %2472) #10
  br label %2473

2473:                                             ; preds = %2471, %2468
  %2474 = load i32, i32* %2426, align 4
  %2475 = icmp eq i32 %2474, 0
  br i1 %2475, label %2478, label %2476

2476:                                             ; preds = %2473
  %2477 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 200, i32 0, i64 1
  call void @vp8_yv12_copy_frame_c(%struct.yv12_buffer_config* %2455, %struct.yv12_buffer_config* %2477) #10
  br label %2478

2478:                                             ; preds = %2476, %2473, %2447
  %2479 = load i32, i32* %1451, align 8
  %2480 = icmp eq i32 %2479, 4
  br i1 %2480, label %2481, label %2484

2481:                                             ; preds = %2478
  %2482 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %70, align 8
  %2483 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 200, i32 2
  call void @vp8_yv12_copy_frame_c(%struct.yv12_buffer_config* %2482, %struct.yv12_buffer_config* %2483) #10
  br label %2484

2484:                                             ; preds = %2481, %2478, %2443
  %2485 = load i32, i32* %1951, align 8
  %2486 = icmp eq i32 %2485, 0
  br i1 %2486, label %2489, label %2487

2487:                                             ; preds = %2484
  %2488 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 54
  store i32 0, i32* %2488, align 16
  br label %2489

2489:                                             ; preds = %2487, %2484
  call void @vp8_pack_bitstream(%struct.VP8_COMP* %0, i8* %3, i8* %4, i64* %2) #10
  %2490 = load i32, i32* %504, align 4
  %2491 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 22
  store i32 %2490, i32* %2491, align 16
  %2492 = load i64, i64* %2, align 8
  %2493 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 82
  %2494 = load i64, i64* %2493, align 32
  %2495 = add i64 %2494, %2492
  store i64 %2495, i64* %2493, align 32
  %2496 = load i64, i64* %2, align 8
  %2497 = trunc i64 %2496 to i32
  %2498 = shl i32 %2497, 3
  store i32 %2498, i32* %1688, align 4
  %2499 = load i32, i32* %250, align 4
  %2500 = icmp ugt i32 %2499, 1
  br i1 %2500, label %2501, label %2539

2501:                                             ; preds = %2489
  %2502 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 201
  %2503 = load i32, i32* %2502, align 8
  %2504 = add i32 %2503, 1
  %2505 = icmp ult i32 %2504, %2499
  br i1 %2505, label %2506, label %2539

2506:                                             ; preds = %2501
  %2507 = zext i32 %2504 to i64
  %2508 = xor i32 %2503, 1
  %2509 = add i32 %2499, %2508
  %2510 = add i32 %2499, -2
  %2511 = and i32 %2509, 1
  %2512 = icmp eq i32 %2511, 0
  br i1 %2512, label %2520, label %2513

2513:                                             ; preds = %2506
  %2514 = load i64, i64* %2, align 8
  %2515 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %2507, i32 26
  %2516 = load i64, i64* %2515, align 8
  %2517 = add i64 %2516, %2514
  store i64 %2517, i64* %2515, align 8
  %2518 = add i32 %2503, 2
  %2519 = add nuw nsw i64 %2507, 1
  br label %2520

2520:                                             ; preds = %2506, %2513
  %2521 = phi i64 [ %2507, %2506 ], [ %2519, %2513 ]
  %2522 = phi i32 [ %2504, %2506 ], [ %2518, %2513 ]
  %2523 = icmp eq i32 %2510, %2503
  br i1 %2523, label %2539, label %2524

2524:                                             ; preds = %2520, %2524
  %2525 = phi i64 [ %2537, %2524 ], [ %2521, %2520 ]
  %2526 = phi i32 [ %2536, %2524 ], [ %2522, %2520 ]
  %2527 = load i64, i64* %2, align 8
  %2528 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %2525, i32 26
  %2529 = load i64, i64* %2528, align 8
  %2530 = add i64 %2529, %2527
  store i64 %2530, i64* %2528, align 8
  %2531 = add nuw nsw i64 %2525, 1
  %2532 = load i64, i64* %2, align 8
  %2533 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %2531, i32 26
  %2534 = load i64, i64* %2533, align 8
  %2535 = add i64 %2534, %2532
  store i64 %2535, i64* %2533, align 8
  %2536 = add i32 %2526, 2
  %2537 = add nuw nsw i64 %2525, 2
  %2538 = icmp eq i32 %2536, %2499
  br i1 %2538, label %2539, label %2524

2539:                                             ; preds = %2520, %2524, %2501, %2489
  %2540 = icmp eq i32 %1729, 0
  br i1 %2540, label %2541, label %2543

2541:                                             ; preds = %2539
  call void @vp8_update_rate_correction_factors(%struct.VP8_COMP* %0, i32 2) #10
  %2542 = load i32, i32* %504, align 4
  br label %2543

2543:                                             ; preds = %2541, %2539
  %2544 = phi i32 [ %2490, %2539 ], [ %2542, %2541 ]
  %2545 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 34
  %2546 = load i32, i32* %2545, align 16
  %2547 = zext i32 %2544 to i64
  %2548 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 54, i64 %2547
  store i32 %2546, i32* %2548, align 4
  %2549 = icmp eq i32 %2544, 0
  br i1 %2549, label %2550, label %2553

2550:                                             ; preds = %2543
  call void @vp8_adjust_key_frame_context(%struct.VP8_COMP* %0) #10
  %2551 = load i32, i32* %504, align 4
  %2552 = icmp eq i32 %2551, 0
  br i1 %2552, label %2609, label %2559

2553:                                             ; preds = %2543
  %2554 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 81
  %2555 = load i32, i32* %2554, align 4
  %2556 = mul nsw i32 %2555, 3
  %2557 = add i32 %2546, 2
  %2558 = add i32 %2557, %2556
  br label %2566

2559:                                             ; preds = %2550
  %2560 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 81
  %2561 = load i32, i32* %2560, align 4
  %2562 = mul nsw i32 %2561, 3
  %2563 = add nsw i32 %2562, 2
  %2564 = load i32, i32* %2545, align 16
  %2565 = add nsw i32 %2563, %2564
  br label %2566

2566:                                             ; preds = %2559, %2553
  %2567 = phi i32 [ %2565, %2559 ], [ %2558, %2553 ]
  %2568 = phi i32* [ %2560, %2559 ], [ %2554, %2553 ]
  %2569 = ashr i32 %2567, 2
  store i32 %2569, i32* %2568, align 4
  %2570 = load i32, i32* %250, align 4
  %2571 = icmp ugt i32 %2570, 1
  br i1 %2571, label %2580, label %2572

2572:                                             ; preds = %2566
  %2573 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 50
  %2574 = load i32, i32* %2573, align 16
  %2575 = icmp eq i32 %2574, 0
  br i1 %2575, label %2576, label %2609

2576:                                             ; preds = %2572
  %2577 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 51
  %2578 = load i32, i32* %2577, align 4
  %2579 = icmp eq i32 %2578, 0
  br i1 %2579, label %2580, label %2609

2580:                                             ; preds = %2576, %2566
  %2581 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 80
  %2582 = load i32, i32* %2581, align 8
  %2583 = add nsw i32 %2582, 1
  store i32 %2583, i32* %2581, align 8
  %2584 = load i32, i32* %38, align 8
  %2585 = icmp eq i32 %2584, 2
  br i1 %2585, label %2586, label %2592

2586:                                             ; preds = %2580
  %2587 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 79
  %2588 = load i32, i32* %2587, align 4
  %2589 = add nsw i32 %2588, %1665
  store i32 %2589, i32* %2587, align 4
  %2590 = sdiv i32 %2589, %2583
  %2591 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 78
  store i32 %2590, i32* %2591, align 16
  br label %2609

2592:                                             ; preds = %2580
  %2593 = icmp sgt i32 %2582, 149
  %2594 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 79
  %2595 = load i32, i32* %2594, align 4
  %2596 = add nsw i32 %2595, %1665
  store i32 %2596, i32* %2594, align 4
  %2597 = sdiv i32 %2596, %2583
  br i1 %2593, label %2603, label %2598

2598:                                             ; preds = %2592
  %2599 = load i32, i32* %1192, align 4
  %2600 = add i32 %2597, 1
  %2601 = add i32 %2600, %2599
  %2602 = sdiv i32 %2601, 2
  br label %2603

2603:                                             ; preds = %2598, %2592
  %2604 = phi i32 [ %2602, %2598 ], [ %2597, %2592 ]
  %2605 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 78
  store i32 %2604, i32* %2605, align 16
  %2606 = icmp sgt i32 %1665, %2604
  br i1 %2606, label %2607, label %2609

2607:                                             ; preds = %2603
  %2608 = add nsw i32 %1665, -1
  store i32 %2608, i32* %2605, align 16
  br label %2609

2609:                                             ; preds = %2607, %2603, %2586, %2576, %2572, %2550
  %2610 = phi i1 [ false, %2576 ], [ false, %2572 ], [ false, %2586 ], [ false, %2607 ], [ false, %2603 ], [ true, %2550 ]
  %2611 = load i32, i32* %57, align 8
  %2612 = icmp eq i32 %2611, 0
  br i1 %2612, label %2613, label %2619

2613:                                             ; preds = %2609
  %2614 = load i32, i32* %1688, align 4
  %2615 = sext i32 %2614 to i64
  %2616 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 87
  %2617 = load i64, i64* %2616, align 8
  %2618 = sub nsw i64 %2617, %2615
  store i64 %2618, i64* %2616, align 8
  br label %2628

2619:                                             ; preds = %2609
  %2620 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 71
  %2621 = load i32, i32* %2620, align 32
  %2622 = load i32, i32* %1688, align 4
  %2623 = sub nsw i32 %2621, %2622
  %2624 = sext i32 %2623 to i64
  %2625 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 87
  %2626 = load i64, i64* %2625, align 8
  %2627 = add nsw i64 %2626, %2624
  store i64 %2627, i64* %2625, align 8
  br label %2628

2628:                                             ; preds = %2619, %2613
  %2629 = phi i32 [ %2622, %2619 ], [ %2614, %2613 ]
  %2630 = phi i64 [ %2627, %2619 ], [ %2618, %2613 ]
  %2631 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 87
  %2632 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 21
  %2633 = load i64, i64* %2632, align 8
  %2634 = icmp sgt i64 %2630, %2633
  br i1 %2634, label %2635, label %2636

2635:                                             ; preds = %2628
  store i64 %2633, i64* %2631, align 8
  br label %2636

2636:                                             ; preds = %2635, %2628
  %2637 = phi i64 [ %2633, %2635 ], [ %2630, %2628 ]
  %2638 = load i32, i32* %816, align 32
  %2639 = icmp eq i32 %2638, 0
  br i1 %2639, label %2640, label %2648

2640:                                             ; preds = %2636
  %2641 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 10
  %2642 = load i32, i32* %2641, align 4
  %2643 = icmp eq i32 %2642, 0
  br i1 %2643, label %2648, label %2644

2644:                                             ; preds = %2640
  %2645 = sub nsw i64 0, %2633
  %2646 = icmp slt i64 %2637, %2645
  br i1 %2646, label %2647, label %2648

2647:                                             ; preds = %2644
  store i64 %2645, i64* %2631, align 8
  br label %2648

2648:                                             ; preds = %2647, %2644, %2640, %2636
  %2649 = phi i64 [ %2637, %2640 ], [ %2645, %2647 ], [ %2637, %2644 ], [ %2637, %2636 ]
  %2650 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 88
  %2651 = load i32, i32* %2650, align 16
  %2652 = sext i32 %2651 to i64
  %2653 = mul nsw i64 %2652, 3
  %2654 = load i32, i32* %1209, align 16
  %2655 = sext i32 %2654 to i64
  %2656 = add nsw i64 %2655, 2
  %2657 = add nsw i64 %2656, %2653
  %2658 = lshr i64 %2657, 2
  %2659 = trunc i64 %2658 to i32
  store i32 %2659, i32* %2650, align 16
  %2660 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 89
  %2661 = load i32, i32* %2660, align 4
  %2662 = sext i32 %2661 to i64
  %2663 = mul nsw i64 %2662, 3
  %2664 = sext i32 %2629 to i64
  %2665 = add nsw i64 %2664, 2
  %2666 = add nsw i64 %2665, %2663
  %2667 = lshr i64 %2666, 2
  %2668 = trunc i64 %2667 to i32
  store i32 %2668, i32* %2660, align 4
  %2669 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 90
  %2670 = load i32, i32* %2669, align 8
  %2671 = sext i32 %2670 to i64
  %2672 = mul nsw i64 %2671, 31
  %2673 = add nsw i64 %2655, 16
  %2674 = add nsw i64 %2673, %2672
  %2675 = lshr i64 %2674, 5
  %2676 = trunc i64 %2675 to i32
  store i32 %2676, i32* %2669, align 8
  %2677 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 91
  %2678 = load i32, i32* %2677, align 4
  %2679 = sext i32 %2678 to i64
  %2680 = mul nsw i64 %2679, 31
  %2681 = add nsw i64 %2664, 16
  %2682 = add nsw i64 %2681, %2680
  %2683 = lshr i64 %2682, 5
  %2684 = trunc i64 %2683 to i32
  store i32 %2684, i32* %2677, align 4
  %2685 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 92
  %2686 = load i64, i64* %2685, align 32
  %2687 = add nsw i64 %2686, %2664
  store i64 %2687, i64* %2685, align 32
  %2688 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 86
  store i64 %2649, i64* %2688, align 32
  %2689 = load i32, i32* %250, align 4
  %2690 = icmp ugt i32 %2689, 1
  br i1 %2690, label %2691, label %2728

2691:                                             ; preds = %2648
  %2692 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 201
  %2693 = load i32, i32* %2692, align 8
  %2694 = add i32 %2693, 1
  %2695 = icmp ult i32 %2694, %2689
  br i1 %2695, label %2696, label %2728

2696:                                             ; preds = %2691
  %2697 = sitofp i32 %2629 to double
  %2698 = zext i32 %2694 to i64
  br label %2699

2699:                                             ; preds = %2699, %2696
  %2700 = phi i64 [ %2698, %2696 ], [ %2726, %2699 ]
  %2701 = phi i32 [ %2694, %2696 ], [ %2725, %2699 ]
  %2702 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %2700, i32 1
  %2703 = load i32, i32* %2702, align 8
  %2704 = sitofp i32 %2703 to double
  %2705 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %2700, i32 0
  %2706 = load double, double* %2705, align 8
  %2707 = fdiv double %2704, %2706
  %2708 = fsub double %2707, %2697
  %2709 = fptosi double %2708 to i32
  %2710 = sext i32 %2709 to i64
  %2711 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %2700, i32 10
  %2712 = load i64, i64* %2711, align 8
  %2713 = add nsw i64 %2712, %2710
  %2714 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %2700, i32 4
  %2715 = load i64, i64* %2714, align 8
  %2716 = icmp sgt i64 %2713, %2715
  %2717 = select i1 %2716, i64 %2715, i64 %2713
  store i64 %2717, i64* %2711, align 8
  %2718 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %2700, i32 11
  %2719 = load i64, i64* %2718, align 8
  %2720 = add nsw i64 %2719, %2664
  store i64 %2720, i64* %2718, align 8
  %2721 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %2700, i32 12
  %2722 = load i32, i32* %2721, align 8
  %2723 = add nsw i32 %2722, %2709
  store i32 %2723, i32* %2721, align 8
  %2724 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %2700, i32 9
  store i64 %2717, i64* %2724, align 8
  %2725 = add i32 %2701, 1
  %2726 = add nuw nsw i64 %2700, 1
  %2727 = icmp eq i32 %2725, %2689
  br i1 %2727, label %2728, label %2699

2728:                                             ; preds = %2699, %2691, %2648
  br i1 %2610, label %2740, label %2729

2729:                                             ; preds = %2728
  %2730 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 50
  %2731 = load i32, i32* %2730, align 16
  %2732 = icmp eq i32 %2731, 0
  %2733 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 51
  %2734 = load i32, i32* %2733, align 4
  %2735 = or i32 %2734, %2731
  %2736 = icmp eq i32 %2735, 0
  br i1 %2736, label %2737, label %2748

2737:                                             ; preds = %2729
  %2738 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 123
  %2739 = load i32, i32* %2738, align 8
  br label %2768

2740:                                             ; preds = %2728
  %2741 = sub nsw i32 %2654, %2629
  %2742 = sext i32 %2741 to i64
  %2743 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 186, i32 26
  %2744 = load i64, i64* %2743, align 8
  %2745 = add nsw i64 %2744, %2742
  %2746 = icmp sgt i64 %2745, 0
  %2747 = select i1 %2746, i64 %2745, i64 0
  store i64 %2747, i64* %2743, align 8
  br label %2775

2748:                                             ; preds = %2729
  %2749 = sub nsw i32 %2654, %2629
  %2750 = sext i32 %2749 to i64
  %2751 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 186, i32 28
  %2752 = load i64, i64* %2751, align 8
  %2753 = add nsw i64 %2752, %2750
  %2754 = icmp sgt i64 %2753, 0
  %2755 = select i1 %2754, i64 %2753, i64 0
  store i64 %2755, i64* %2751, align 8
  %2756 = icmp eq i32 %2734, 0
  %2757 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 123
  %2758 = load i32, i32* %2757, align 8
  br i1 %2756, label %2763, label %2759

2759:                                             ; preds = %2748
  %2760 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 124, i64 2
  store i32 %2758, i32* %2760, align 4
  %2761 = load i32, i32* %2545, align 16
  %2762 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 125, i64 2
  store i32 %2761, i32* %2762, align 8
  br label %2775

2763:                                             ; preds = %2748
  br i1 %2732, label %2768, label %2764

2764:                                             ; preds = %2763
  %2765 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 124, i64 1
  store i32 %2758, i32* %2765, align 4
  %2766 = load i32, i32* %2545, align 16
  %2767 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 125, i64 1
  store i32 %2766, i32* %2767, align 4
  br label %2775

2768:                                             ; preds = %2763, %2737
  %2769 = phi i32 [ %2739, %2737 ], [ %2758, %2763 ]
  %2770 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 124, i64 0
  store i32 %2769, i32* %2770, align 4
  %2771 = load i32, i32* %2545, align 16
  %2772 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 125, i64 0
  store i32 %2771, i32* %2772, align 8
  %2773 = sext i32 %2771 to i64
  %2774 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 182, i64 %2773
  store i32 %2769, i32* %2774, align 4
  br label %2775

2775:                                             ; preds = %2768, %2764, %2759, %2740
  %2776 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 221
  store i32 0, i32* %2776, align 16
  %2777 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 50
  %2778 = load i32, i32* %2777, align 16
  %2779 = icmp eq i32 %2778, 1
  %2780 = load i32, i32* %506, align 4
  %2781 = and i32 %2780, -3
  %2782 = or i32 %2780, 2
  %2783 = select i1 %2779, i32 %2782, i32 %2781
  %2784 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 51
  %2785 = load i32, i32* %2784, align 4
  %2786 = icmp eq i32 %2785, 1
  %2787 = and i32 %2783, -5
  %2788 = or i32 %2783, 4
  %2789 = select i1 %2786, i32 %2788, i32 %2787
  store i32 %2789, i32* %506, align 4
  %2790 = load i32, i32* %2426, align 4
  %2791 = and i32 %2790, %2778
  %2792 = icmp eq i32 %2791, 0
  br i1 %2792, label %2793, label %2795

2793:                                             ; preds = %2775
  %2794 = icmp eq i32 %2790, %2778
  br i1 %2794, label %2798, label %2795

2795:                                             ; preds = %2793, %2775
  %2796 = phi i32 [ 1, %2775 ], [ 0, %2793 ]
  %2797 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 34
  store i32 %2796, i32* %2797, align 16
  br label %2798

2798:                                             ; preds = %2795, %2793
  %2799 = and i32 %2790, %2785
  %2800 = icmp eq i32 %2799, 0
  br i1 %2800, label %2801, label %2803

2801:                                             ; preds = %2798
  %2802 = icmp eq i32 %2790, %2785
  br i1 %2802, label %2806, label %2803

2803:                                             ; preds = %2801, %2798
  %2804 = phi i32 [ 1, %2798 ], [ 0, %2801 ]
  %2805 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 35
  store i32 %2804, i32* %2805, align 4
  br label %2806

2806:                                             ; preds = %2803, %2801
  %2807 = and i32 %2785, %2778
  %2808 = icmp eq i32 %2807, 0
  br i1 %2808, label %2809, label %2811

2809:                                             ; preds = %2806
  %2810 = icmp eq i32 %2785, %2778
  br i1 %2810, label %2814, label %2811

2811:                                             ; preds = %2809, %2806
  %2812 = phi i32 [ 1, %2806 ], [ 0, %2809 ]
  %2813 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 36
  store i32 %2812, i32* %2813, align 8
  br label %2814

2814:                                             ; preds = %2811, %2809
  %2815 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 129
  %2816 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 34
  %2817 = load i32, i32* %2816, align 16
  %2818 = icmp eq i32 %2817, 0
  %2819 = select i1 %2818, i32 7, i32 5
  store i32 %2819, i32* %2815, align 4
  %2820 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 35
  %2821 = load i32, i32* %2820, align 4
  %2822 = icmp eq i32 %2821, 0
  br i1 %2822, label %2825, label %2823

2823:                                             ; preds = %2814
  %2824 = and i32 %2819, 3
  store i32 %2824, i32* %2815, align 4
  br label %2825

2825:                                             ; preds = %2823, %2814
  %2826 = phi i32 [ %2819, %2814 ], [ %2824, %2823 ]
  %2827 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 36
  %2828 = load i32, i32* %2827, align 8
  %2829 = icmp eq i32 %2828, 0
  br i1 %2829, label %2832, label %2830

2830:                                             ; preds = %2825
  %2831 = and i32 %2826, 3
  store i32 %2831, i32* %2815, align 4
  br label %2832

2832:                                             ; preds = %2830, %2825
  %2833 = load i32, i32* %1951, align 8
  %2834 = icmp eq i32 %2833, 0
  br i1 %2834, label %2835, label %2981

2835:                                             ; preds = %2832
  %2836 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 37
  %2837 = load i32, i32* %2836, align 8
  %2838 = icmp eq i32 %2837, 0
  %2839 = icmp eq i32 %2785, 0
  %2840 = or i1 %2839, %2838
  br i1 %2840, label %2879, label %2841

2841:                                             ; preds = %2835
  %2842 = load i32, i32* %504, align 4
  %2843 = icmp eq i32 %2842, 0
  br i1 %2843, label %2879, label %2844

2844:                                             ; preds = %2841
  %2845 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 115
  %2846 = load i32, i32* %2845, align 8
  %2847 = icmp eq i32 %2846, 0
  br i1 %2847, label %2848, label %2850

2848:                                             ; preds = %2844
  %2849 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 59
  store i32 7, i32* %2849, align 4
  br label %2850

2850:                                             ; preds = %2848, %2844
  %2851 = load i32, i32* %38, align 8
  %2852 = icmp eq i32 %2851, 2
  br i1 %2852, label %2865, label %2853

2853:                                             ; preds = %2850
  %2854 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 59
  %2855 = load i32, i32* %2854, align 4
  %2856 = icmp eq i32 %2855, 0
  br i1 %2856, label %2865, label %2857

2857:                                             ; preds = %2853
  %2858 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 60
  store i32 %2855, i32* %2858, align 32
  %2859 = load i32, i32* %1688, align 4
  %2860 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 61
  %2861 = load i32, i32* %2860, align 4
  %2862 = add nsw i32 %2861, %2859
  store i32 %2862, i32* %2860, align 4
  %2863 = sdiv i32 %2862, %2855
  %2864 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 62
  store i32 %2863, i32* %2864, align 8
  br label %2865

2865:                                             ; preds = %2857, %2853, %2850
  %2866 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 190
  %2867 = load i8*, i8** %2866, align 16
  %2868 = load i32, i32* %1224, align 4
  %2869 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 28
  %2870 = load i32, i32* %2869, align 8
  %2871 = mul nsw i32 %2870, %2868
  %2872 = sext i32 %2871 to i64
  call void @llvm.memset.p0i8.i64(i8* align 1 %2867, i8 1, i64 %2872, i1 false) #10
  %2873 = load i32, i32* %1224, align 4
  %2874 = load i32, i32* %2869, align 8
  %2875 = mul nsw i32 %2874, %2873
  %2876 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 191
  store i32 %2875, i32* %2876, align 8
  %2877 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 58
  store i32 0, i32* %2877, align 8
  %2878 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 31
  store i32 0, i32* %2878, align 4
  store i32 1, i32* %560, align 8
  br label %2981

2879:                                             ; preds = %2841, %2835
  %2880 = icmp eq i32 %2778, 0
  br i1 %2880, label %2954, label %2881

2881:                                             ; preds = %2879
  %2882 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 115
  %2883 = load i32, i32* %2882, align 8
  %2884 = icmp eq i32 %2883, 0
  br i1 %2884, label %2885, label %2887

2885:                                             ; preds = %2881
  %2886 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 59
  store i32 7, i32* %2886, align 4
  br label %2887

2887:                                             ; preds = %2885, %2881
  %2888 = load i32, i32* %38, align 8
  %2889 = icmp eq i32 %2888, 2
  br i1 %2889, label %2914, label %2890

2890:                                             ; preds = %2887
  %2891 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 59
  %2892 = load i32, i32* %2891, align 4
  %2893 = icmp sgt i32 %2892, 0
  br i1 %2893, label %2894, label %2914

2894:                                             ; preds = %2890
  %2895 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 60
  store i32 %2892, i32* %2895, align 32
  %2896 = load i32, i32* %504, align 4
  %2897 = icmp eq i32 %2896, 0
  br i1 %2897, label %2909, label %2898

2898:                                             ; preds = %2894
  %2899 = load i32, i32* %560, align 8
  %2900 = icmp eq i32 %2899, 0
  br i1 %2900, label %2901, label %2909

2901:                                             ; preds = %2898
  %2902 = load i32, i32* %1688, align 4
  %2903 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 73
  %2904 = load i32, i32* %2903, align 8
  %2905 = sub i32 %2902, %2904
  %2906 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 61
  %2907 = load i32, i32* %2906, align 4
  %2908 = add nsw i32 %2905, %2907
  store i32 %2908, i32* %2906, align 4
  br label %2909

2909:                                             ; preds = %2901, %2898, %2894
  %2910 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 61
  %2911 = load i32, i32* %2910, align 4
  %2912 = sdiv i32 %2911, %2892
  %2913 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 62
  store i32 %2912, i32* %2913, align 8
  br label %2914

2914:                                             ; preds = %2909, %2890, %2887
  %2915 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 190
  %2916 = load i8*, i8** %2915, align 16
  %2917 = load i32, i32* %1224, align 4
  %2918 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 28
  %2919 = load i32, i32* %2918, align 8
  %2920 = mul nsw i32 %2919, %2917
  %2921 = sext i32 %2920 to i64
  call void @llvm.memset.p0i8.i64(i8* align 1 %2916, i8 1, i64 %2921, i1 false) #10
  %2922 = load i32, i32* %1224, align 4
  %2923 = load i32, i32* %2918, align 8
  %2924 = mul nsw i32 %2923, %2922
  %2925 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 191
  store i32 %2924, i32* %2925, align 8
  store i32 0, i32* %2777, align 16
  %2926 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 58
  store i32 0, i32* %2926, align 8
  %2927 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 126, i64 0
  %2928 = bitcast i32* %2927 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %2928, align 4
  %2929 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 25
  %2930 = load i32, i32* %2929, align 8
  %2931 = icmp sgt i32 %2930, -1
  br i1 %2931, label %2932, label %2943

2932:                                             ; preds = %2914
  %2933 = load i32, i32* %2836, align 8
  %2934 = icmp eq i32 %2933, 0
  br i1 %2934, label %2943, label %2935

2935:                                             ; preds = %2932
  %2936 = load i32, i32* %2784, align 4
  %2937 = icmp eq i32 %2936, 0
  br i1 %2937, label %2938, label %2943

2938:                                             ; preds = %2935
  %2939 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 31
  store i32 1, i32* %2939, align 4
  %2940 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 66
  %2941 = load i32, i32* %2940, align 8
  %2942 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 59
  store i32 %2941, i32* %2942, align 4
  br label %2943

2943:                                             ; preds = %2938, %2935, %2932, %2914
  %2944 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 31
  %2945 = load i32, i32* %2944, align 4
  %2946 = icmp eq i32 %2945, 0
  br i1 %2946, label %2947, label %2948

2947:                                             ; preds = %2943
  store i32 0, i32* %560, align 8
  br label %2948

2948:                                             ; preds = %2947, %2943
  %2949 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 59
  %2950 = load i32, i32* %2949, align 4
  %2951 = icmp sgt i32 %2950, 0
  br i1 %2951, label %2952, label %2981

2952:                                             ; preds = %2948
  %2953 = add nsw i32 %2950, -1
  store i32 %2953, i32* %2949, align 4
  br label %2981

2954:                                             ; preds = %2879
  br i1 %2839, label %2955, label %2981

2955:                                             ; preds = %2954
  %2956 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 59
  %2957 = load i32, i32* %2956, align 4
  %2958 = icmp sgt i32 %2957, 0
  br i1 %2958, label %2959, label %2961

2959:                                             ; preds = %2955
  %2960 = add nsw i32 %2957, -1
  store i32 %2960, i32* %2956, align 4
  br label %2961

2961:                                             ; preds = %2959, %2955
  %2962 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 30
  %2963 = load i32, i32* %2962, align 32
  %2964 = icmp eq i32 %2963, 0
  br i1 %2964, label %2967, label %2965

2965:                                             ; preds = %2961
  %2966 = add i32 %2963, -1
  store i32 %2966, i32* %2962, align 32
  br label %2967

2967:                                             ; preds = %2965, %2961
  %2968 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 58
  %2969 = load i32, i32* %2968, align 8
  %2970 = add nsw i32 %2969, 1
  store i32 %2970, i32* %2968, align 8
  %2971 = icmp sgt i32 %2969, 0
  br i1 %2971, label %2972, label %2981

2972:                                             ; preds = %2967
  %2973 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 56, i64 0
  %2974 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 126, i64 0
  %2975 = bitcast i32* %2973 to <4 x i32>*
  %2976 = load <4 x i32>, <4 x i32>* %2975, align 8
  %2977 = bitcast i32* %2974 to <4 x i32>*
  %2978 = load <4 x i32>, <4 x i32>* %2977, align 4
  %2979 = add nsw <4 x i32> %2978, %2976
  %2980 = bitcast i32* %2974 to <4 x i32>*
  store <4 x i32> %2979, <4 x i32>* %2980, align 4
  br label %2981

2981:                                             ; preds = %2972, %2967, %2954, %2952, %2948, %2865, %2832
  %2982 = load i32, i32* %504, align 4
  %2983 = icmp eq i32 %2982, 0
  %2984 = load i32, i32* %506, align 4
  br i1 %2983, label %2985, label %2987

2985:                                             ; preds = %2981
  %2986 = or i32 %2984, 1
  store i32 %2986, i32* %1, align 4
  store i32 1, i32* %504, align 4
  br label %2991

2987:                                             ; preds = %2981
  %2988 = and i32 %2984, -2
  store i32 %2988, i32* %1, align 4
  %2989 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 127
  %2990 = load i32, i32* %2989, align 4
  br label %2991

2991:                                             ; preds = %2987, %2985
  %2992 = phi i32 [ %2990, %2987 ], [ 100, %2985 ]
  %2993 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 128
  store i32 %2992, i32* %2993, align 8
  %2994 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 6, i32 24
  store i8 0, i8* %2994, align 1
  %2995 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 6, i32 25
  store i8 0, i8* %2995, align 2
  %2996 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 6, i32 30
  store i8 0, i8* %2996, align 16
  %2997 = load i32, i32* %57, align 8
  %2998 = icmp eq i32 %2997, 0
  br i1 %2998, label %3037, label %2999

2999:                                             ; preds = %2991
  %3000 = load i32, i32* %565, align 4
  %3001 = add i32 %3000, 1
  store i32 %3001, i32* %565, align 4
  %3002 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 40
  %3003 = load i32, i32* %3002, align 4
  %3004 = add i32 %3003, 1
  store i32 %3004, i32* %3002, align 4
  %3005 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 146
  %3006 = load i32, i32* %3005, align 8
  %3007 = add i32 %3006, 1
  store i32 %3007, i32* %3005, align 8
  br label %3037

3008:                                             ; preds = %707, %712
  %3009 = phi i32 [ 1, %712 ], [ 2, %707 ]
  %3010 = load i32, i32* %565, align 4
  %3011 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 217, i64 2
  %3012 = load i32, i32* %3011, align 4
  %3013 = sub i32 %3010, %3012
  %3014 = zext i32 %3009 to i64
  %3015 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 217, i64 %3014
  %3016 = load i32, i32* %3015, align 4
  %3017 = sub i32 %3010, %3016
  %3018 = icmp ult i32 %3013, %3017
  %3019 = select i1 %3018, i32 2, i32 %3009
  br label %3020

3020:                                             ; preds = %708, %3008, %712
  %3021 = phi i32 [ 1, %712 ], [ %3019, %3008 ], [ %711, %708 ]
  %3022 = and i32 %702, 4
  %3023 = icmp eq i32 %3022, 0
  br i1 %3023, label %3035, label %3024

3024:                                             ; preds = %3020
  %3025 = load i32, i32* %565, align 4
  %3026 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 217, i64 3
  %3027 = load i32, i32* %3026, align 4
  %3028 = sub i32 %3025, %3027
  %3029 = zext i32 %3021 to i64
  %3030 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 217, i64 %3029
  %3031 = load i32, i32* %3030, align 4
  %3032 = sub i32 %3025, %3031
  %3033 = icmp ult i32 %3028, %3032
  %3034 = select i1 %3033, i32 3, i32 %3021
  br label %3035

3035:                                             ; preds = %3024, %3020
  %3036 = phi i32 [ %3021, %3020 ], [ %3034, %3024 ]
  store i32 %3036, i32* %700, align 16
  br label %758

3037:                                             ; preds = %919, %887, %912, %947, %1674, %2991, %2999
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %519) #10
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %518) #10
  %3038 = load i32, i32* %488, align 4
  %3039 = icmp eq i32 %3038, 2
  br i1 %3039, label %3040, label %3085

3040:                                             ; preds = %3037
  %3041 = getelementptr inbounds %struct.vpx_usec_timer, %struct.vpx_usec_timer* %16, i64 0, i32 1
  %3042 = call i32 @gettimeofday(%struct.timeval* %3041, i8* null) #10
  %3043 = getelementptr inbounds %struct.vpx_usec_timer, %struct.vpx_usec_timer* %17, i64 0, i32 1
  %3044 = call i32 @gettimeofday(%struct.timeval* %3043, i8* null) #10
  %3045 = load i64, i64* %24, align 8
  %3046 = load i64, i64* %22, align 8
  %3047 = sub i64 %3045, %3046
  %3048 = load i64, i64* %25, align 8
  %3049 = load i64, i64* %23, align 8
  %3050 = sub nsw i64 %3048, %3049
  %3051 = icmp slt i64 %3050, 0
  %3052 = add nsw i64 %3050, 1000000
  %3053 = select i1 %3051, i64 %3052, i64 %3050
  %3054 = ashr i64 %3050, 63
  %3055 = add nsw i64 %3047, %3054
  %3056 = mul nsw i64 %3055, 1000000
  %3057 = add nsw i64 %3056, %3053
  %3058 = trunc i64 %3057 to i32
  %3059 = uitofp i32 %3058 to double
  %3060 = fmul double %3059, 5.000000e-01
  %3061 = fptoui double %3060 to i32
  %3062 = load i32, i32* %504, align 4
  %3063 = icmp eq i32 %3062, 0
  br i1 %3063, label %3074, label %3064

3064:                                             ; preds = %3040
  %3065 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 111
  %3066 = load i32, i32* %3065, align 8
  %3067 = icmp eq i32 %3066, 0
  br i1 %3067, label %3072, label %3068

3068:                                             ; preds = %3064
  %3069 = mul nsw i32 %3066, 7
  %3070 = add i32 %3069, %3058
  %3071 = lshr i32 %3070, 3
  br label %3072

3072:                                             ; preds = %3064, %3068
  %3073 = phi i32 [ %3071, %3068 ], [ %3058, %3064 ]
  store i32 %3073, i32* %3065, align 8
  br label %3074

3074:                                             ; preds = %3072, %3040
  %3075 = icmp eq i32 %3061, 0
  br i1 %3075, label %3085, label %3076

3076:                                             ; preds = %3074
  %3077 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 112
  %3078 = load i32, i32* %3077, align 4
  %3079 = icmp eq i32 %3078, 0
  br i1 %3079, label %3080, label %3081

3080:                                             ; preds = %3076
  store i32 %3061, i32* %3077, align 4
  br label %3085

3081:                                             ; preds = %3076
  %3082 = mul nsw i32 %3078, 7
  %3083 = add i32 %3082, %3061
  %3084 = lshr i32 %3083, 3
  store i32 %3084, i32* %3077, align 4
  br label %3085

3085:                                             ; preds = %3081, %3080, %3074, %3037
  %3086 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 54
  %3087 = load i32, i32* %3086, align 16
  %3088 = icmp eq i32 %3087, 0
  br i1 %3088, label %3089, label %3092

3089:                                             ; preds = %3085
  %3090 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 59, i32 0, i64 0
  %3091 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 58, i32 0, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %3090, i8* align 1 %3091, i64 1113, i1 false)
  br label %3092

3092:                                             ; preds = %3089, %3085
  %3093 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 51
  %3094 = load i32, i32* %3093, align 4
  %3095 = icmp eq i32 %3094, 0
  br i1 %3095, label %3099, label %3096

3096:                                             ; preds = %3092
  %3097 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 184, i32 0, i64 0
  %3098 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 59, i32 0, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %3097, i8* align 2 %3098, i64 1113, i1 false)
  br label %3099

3099:                                             ; preds = %3092, %3096
  %3100 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 50
  %3101 = load i32, i32* %3100, align 16
  %3102 = icmp eq i32 %3101, 0
  br i1 %3102, label %3106, label %3103

3103:                                             ; preds = %3099
  %3104 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 185, i32 0, i64 0
  %3105 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 59, i32 0, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %3104, i8* align 2 %3105, i64 1113, i1 false)
  br label %3106

3106:                                             ; preds = %3099, %3103
  %3107 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 49
  %3108 = load i32, i32* %3107, align 4
  %3109 = icmp eq i32 %3108, 0
  br i1 %3109, label %3113, label %3110

3110:                                             ; preds = %3106
  %3111 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 183, i32 0, i64 0
  %3112 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 59, i32 0, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 32 %3111, i8* align 2 %3112, i64 1113, i1 false)
  br label %3113

3113:                                             ; preds = %3106, %3110
  %3114 = load i64, i64* %2, align 8
  %3115 = icmp eq i64 %3114, 0
  br i1 %3115, label %3149, label %3116

3116:                                             ; preds = %3113
  %3117 = load i32, i32* %504, align 4
  %3118 = icmp eq i32 %3117, 0
  %3119 = xor i1 %3109, true
  %3120 = or i1 %3118, %3119
  %3121 = xor i1 %3102, true
  %3122 = or i1 %3120, %3121
  %3123 = xor i1 %3095, true
  %3124 = or i1 %3122, %3123
  br i1 %3124, label %3146, label %3125

3125:                                             ; preds = %3116
  %3126 = load i32, i32* %546, align 8
  %3127 = icmp eq i32 %3126, 0
  br i1 %3127, label %3128, label %3146

3128:                                             ; preds = %3125
  %3129 = load i32, i32* %547, align 4
  %3130 = icmp ne i32 %3129, 0
  %3131 = xor i1 %3088, true
  %3132 = or i1 %3130, %3131
  br i1 %3132, label %3146, label %3133

3133:                                             ; preds = %3128
  %3134 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 6, i32 30
  %3135 = load i8, i8* %3134, align 16
  %3136 = icmp eq i8 %3135, 0
  br i1 %3136, label %3137, label %3146

3137:                                             ; preds = %3133
  %3138 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 6, i32 24
  %3139 = load i8, i8* %3138, align 1
  %3140 = icmp eq i8 %3139, 0
  br i1 %3140, label %3141, label %3146

3141:                                             ; preds = %3137
  %3142 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 6, i32 25
  %3143 = load i8, i8* %3142, align 2
  %3144 = icmp eq i8 %3143, 0
  %3145 = zext i1 %3144 to i32
  br label %3146

3146:                                             ; preds = %3128, %3116, %3125, %3133, %3137, %3141
  %3147 = phi i32 [ 0, %3137 ], [ 0, %3133 ], [ 0, %3128 ], [ 0, %3125 ], [ 0, %3116 ], [ %3145, %3141 ]
  %3148 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 197
  store i32 %3147, i32* %3148, align 4
  store i32 1, i32* %3086, align 16
  store i32 0, i32* %3093, align 4
  store i32 0, i32* %3100, align 16
  store i32 1, i32* %3107, align 4
  store i32 1, i32* %504, align 4
  br label %3149

3149:                                             ; preds = %3113, %3146
  %3150 = load i32, i32* %250, align 4
  %3151 = icmp ugt i32 %3150, 1
  br i1 %3151, label %3152, label %3153

3152:                                             ; preds = %3149
  call fastcc void @save_layer_context(%struct.VP8_COMP* %0)
  br label %3153

3153:                                             ; preds = %3152, %3149
  %3154 = getelementptr inbounds %struct.vpx_usec_timer, %struct.vpx_usec_timer* %18, i64 0, i32 1
  %3155 = call i32 @gettimeofday(%struct.timeval* %3154, i8* null) #10
  %3156 = load i64, i64* %30, align 8
  %3157 = load i64, i64* %28, align 8
  %3158 = sub i64 %3156, %3157
  %3159 = load i64, i64* %31, align 8
  %3160 = load i64, i64* %29, align 8
  %3161 = sub nsw i64 %3159, %3160
  %3162 = icmp slt i64 %3161, 0
  %3163 = add nsw i64 %3161, 1000000
  %3164 = select i1 %3162, i64 %3163, i64 %3161
  %3165 = ashr i64 %3161, 63
  %3166 = add nsw i64 %3158, %3165
  %3167 = mul nsw i64 %3166, 1000000
  %3168 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 179
  %3169 = load i64, i64* %3168, align 8
  %3170 = add i64 %3164, %3169
  %3171 = add i64 %3170, %3167
  store i64 %3171, i64* %3168, align 8
  %3172 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 187
  %3173 = load i32, i32* %3172, align 32
  %3174 = icmp eq i32 %3173, 0
  br i1 %3174, label %3259, label %3175

3175:                                             ; preds = %3153
  %3176 = load i32, i32* %38, align 8
  %3177 = icmp eq i32 %3176, 1
  br i1 %3177, label %3259, label %3178

3178:                                             ; preds = %3175
  %3179 = load i32, i32* %57, align 8
  %3180 = icmp eq i32 %3179, 0
  br i1 %3180, label %3259, label %3181

3181:                                             ; preds = %3178
  %3182 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %70, align 8
  %3183 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 10
  %3184 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %3183, align 8
  %3185 = bitcast %struct.vpx_codec_cx_pkt* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 136, i8* nonnull %3185) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %3185, i8 -86, i64 136, i1 false) #10
  %3186 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 5
  %3187 = load i32, i32* %3186, align 16
  %3188 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 6
  %3189 = load i32, i32* %3188, align 4
  %3190 = getelementptr inbounds %struct.vpx_codec_cx_pkt, %struct.vpx_codec_cx_pkt* %15, i64 0, i32 0
  store i32 3, i32* %3190, align 8
  %3191 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3182, i64 0, i32 13
  %3192 = load i8*, i8** %3191, align 8
  %3193 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3182, i64 0, i32 4
  %3194 = load i32, i32* %3193, align 8
  %3195 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3184, i64 0, i32 13
  %3196 = load i8*, i8** %3195, align 8
  %3197 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3184, i64 0, i32 4
  %3198 = load i32, i32* %3197, align 8
  %3199 = call fastcc i64 @calc_plane_error(i8* %3192, i32 %3194, i8* %3196, i32 %3198, i32 %3187, i32 %3189) #10
  %3200 = getelementptr inbounds %struct.vpx_codec_cx_pkt, %struct.vpx_codec_cx_pkt* %15, i64 0, i32 1
  %3201 = getelementptr inbounds %struct.vpx_codec_cx_pkt, %struct.vpx_codec_cx_pkt* %15, i64 0, i32 1, i32 0, i32 2
  %3202 = getelementptr inbounds i64, i64* %3201, i64 1
  store i64 %3199, i64* %3202, align 8
  %3203 = mul i32 %3189, %3187
  %3204 = bitcast %union.anon* %3200 to [4 x i32]*
  %3205 = bitcast %union.anon* %3200 to i32*
  %3206 = getelementptr inbounds [4 x i32], [4 x i32]* %3204, i64 0, i64 1
  store i32 %3203, i32* %3206, align 4
  %3207 = add i32 %3187, 1
  %3208 = lshr i32 %3207, 1
  %3209 = add i32 %3189, 1
  %3210 = lshr i32 %3209, 1
  %3211 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3182, i64 0, i32 14
  %3212 = load i8*, i8** %3211, align 8
  %3213 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3182, i64 0, i32 9
  %3214 = load i32, i32* %3213, align 4
  %3215 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3184, i64 0, i32 14
  %3216 = load i8*, i8** %3215, align 8
  %3217 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3184, i64 0, i32 9
  %3218 = load i32, i32* %3217, align 4
  %3219 = call fastcc i64 @calc_plane_error(i8* %3212, i32 %3214, i8* %3216, i32 %3218, i32 %3208, i32 %3210) #10
  %3220 = add i64 %3219, %3199
  %3221 = getelementptr inbounds i64, i64* %3201, i64 2
  store i64 %3219, i64* %3221, align 8
  %3222 = mul i32 %3210, %3208
  %3223 = getelementptr inbounds %struct.vpx_codec_cx_pkt, %struct.vpx_codec_cx_pkt* %15, i64 0, i32 1, i32 0, i32 1
  %3224 = bitcast i64* %3223 to i32*
  store i32 %3222, i32* %3224, align 8
  %3225 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3182, i64 0, i32 15
  %3226 = load i8*, i8** %3225, align 8
  %3227 = load i32, i32* %3213, align 4
  %3228 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3184, i64 0, i32 15
  %3229 = load i8*, i8** %3228, align 8
  %3230 = load i32, i32* %3217, align 4
  %3231 = call fastcc i64 @calc_plane_error(i8* %3226, i32 %3227, i8* %3229, i32 %3230, i32 %3208, i32 %3210) #10
  %3232 = add i64 %3220, %3231
  store i64 %3232, i64* %3201, align 8
  %3233 = getelementptr inbounds i64, i64* %3201, i64 3
  store i64 %3231, i64* %3233, align 8
  %3234 = shl i32 %3222, 1
  %3235 = add i32 %3234, %3203
  store i32 %3235, i32* %3205, align 8
  %3236 = getelementptr inbounds [4 x i32], [4 x i32]* %3204, i64 0, i64 3
  store i32 %3222, i32* %3236, align 4
  %3237 = getelementptr inbounds %struct.vpx_codec_cx_pkt, %struct.vpx_codec_cx_pkt* %15, i64 0, i32 1, i32 0, i32 6, i64 2
  %3238 = uitofp i32 %3235 to double
  %3239 = uitofp i64 %3232 to double
  %3240 = call double @vpx_sse_to_psnr(double %3238, double 2.550000e+02, double %3239) #10
  %3241 = bitcast i32* %3237 to double*
  store double %3240, double* %3241, align 8
  %3242 = uitofp i32 %3203 to double
  %3243 = uitofp i64 %3199 to double
  %3244 = call double @vpx_sse_to_psnr(double %3242, double 2.550000e+02, double %3243) #10
  %3245 = getelementptr inbounds %struct.vpx_codec_cx_pkt, %struct.vpx_codec_cx_pkt* %15, i64 0, i32 1, i32 0, i32 6, i64 4
  %3246 = bitcast i32* %3245 to double*
  store double %3244, double* %3246, align 8
  %3247 = uitofp i32 %3222 to double
  %3248 = uitofp i64 %3219 to double
  %3249 = call double @vpx_sse_to_psnr(double %3247, double 2.550000e+02, double %3248) #10
  %3250 = getelementptr inbounds %struct.vpx_codec_cx_pkt, %struct.vpx_codec_cx_pkt* %15, i64 0, i32 1, i32 0, i32 6, i64 6
  %3251 = bitcast i32* %3250 to double*
  store double %3249, double* %3251, align 8
  %3252 = uitofp i64 %3231 to double
  %3253 = call double @vpx_sse_to_psnr(double %3247, double 2.550000e+02, double %3252) #10
  %3254 = getelementptr inbounds %struct.vpx_codec_cx_pkt, %struct.vpx_codec_cx_pkt* %15, i64 0, i32 1, i32 0, i32 6, i64 8
  %3255 = bitcast i32* %3254 to double*
  store double %3253, double* %3255, align 8
  %3256 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 108
  %3257 = load %struct.vpx_codec_pkt_list*, %struct.vpx_codec_pkt_list** %3256, align 8
  %3258 = call i32 @vpx_codec_pkt_list_add(%struct.vpx_codec_pkt_list* %3257, %struct.vpx_codec_cx_pkt* nonnull %15) #10
  call void @llvm.lifetime.end.p0i8(i64 136, i8* nonnull %3185) #10
  br label %3259

3259:                                             ; preds = %3178, %3175, %3153, %3181
  %3260 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 0, i32 3
  store i32 0, i32* %3260, align 8
  %3261 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 157, i32 0
  %3262 = load atomic volatile i32, i32* %3261 acquire, align 4
  %3263 = icmp eq i32 %3262, 0
  br i1 %3263, label %3271, label %3264

3264:                                             ; preds = %3259
  %3265 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 159
  %3266 = load i32, i32* %3265, align 4
  %3267 = icmp eq i32 %3266, 0
  br i1 %3267, label %3271, label %3268

3268:                                             ; preds = %3264
  %3269 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 168
  %3270 = call i32 @sem_wait(%union.sem_t* %3269) #10
  store i32 0, i32* %3265, align 4
  br label %3271

3271:                                             ; preds = %3268, %3259, %3264, %45, %8, %91
  %3272 = phi i32 [ -1, %91 ], [ -1, %8 ], [ -1, %45 ], [ 0, %3264 ], [ 0, %3259 ], [ 0, %3268 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %26) #10
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %20) #10
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %19) #10
  ret i32 %3272

3273:                                             ; preds = %513
  %3274 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 11, i64 2, i32 29
  %3275 = load i32, i32* %3274, align 8
  %3276 = icmp eq i32 %3275, 0
  br i1 %3276, label %510, label %3277

3277:                                             ; preds = %3273
  %3278 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 11, i64 3, i32 29
  %3279 = load i32, i32* %3278, align 8
  %3280 = icmp eq i32 %3279, 0
  br i1 %3280, label %510, label %517

3281:                                             ; preds = %1913
  %3282 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1902, i64 1, i32 0, i32 2
  %3283 = load i8, i8* %3282, align 2
  %3284 = icmp eq i8 %3283, 1
  br i1 %3284, label %3285, label %3287

3285:                                             ; preds = %3281
  %3286 = add nsw i32 %1914, 1
  store i32 %3286, i32* %497, align 4
  br label %3287

3287:                                             ; preds = %3285, %3281, %1913
  %3288 = phi i32 [ %3286, %3285 ], [ %1914, %3281 ], [ %1914, %1913 ]
  %3289 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1902, i64 2
  %3290 = add i32 %1903, -2
  %3291 = icmp eq i32 %3290, 0
  br i1 %3291, label %1918, label %1900

3292:                                             ; preds = %181
  %3293 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 54, i64 2
  %3294 = load i32, i32* %3293, align 4
  %3295 = uitofp i32 %3294 to double
  %3296 = fdiv double %180, %3295
  %3297 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 2, i32 0
  store double %3296, double* %3297, align 8
  %3298 = icmp ugt i32 %177, 3
  br i1 %3298, label %3299, label %241

3299:                                             ; preds = %3292
  %3300 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 54, i64 3
  %3301 = load i32, i32* %3300, align 4
  %3302 = uitofp i32 %3301 to double
  %3303 = fdiv double %180, %3302
  %3304 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 3, i32 0
  store double %3303, double* %3304, align 8
  %3305 = icmp eq i32 %177, 4
  br i1 %3305, label %241, label %3306

3306:                                             ; preds = %3299
  %3307 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 54, i64 4
  %3308 = load i32, i32* %3307, align 4
  %3309 = uitofp i32 %3308 to double
  %3310 = fdiv double %180, %3309
  %3311 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 4, i32 0
  store double %3310, double* %3311, align 8
  br label %241
}

declare %struct.lookahead_entry* @vp8_lookahead_peek(%struct.lookahead_ctx*, i32, i32) local_unnamed_addr #1

declare %struct.lookahead_entry* @vp8_lookahead_pop(%struct.lookahead_ctx*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @save_layer_context(%struct.VP8_COMP*) unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 201
  %3 = load i32, i32* %2, align 8
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 107
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %4, i32 1
  store i32 %6, i32* %7, align 8
  %8 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 19
  %9 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %4, i32 2
  %10 = bitcast i64* %8 to <2 x i64>*
  %11 = load <2 x i64>, <2 x i64>* %10, align 8
  %12 = bitcast i64* %9 to <2 x i64>*
  store <2 x i64> %11, <2 x i64>* %12, align 8
  %13 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 21
  %14 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %4, i32 4
  %15 = bitcast i64* %13 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 8
  %17 = bitcast i64* %14 to <2 x i64>*
  store <2 x i64> %16, <2 x i64>* %17, align 8
  %18 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 23
  %19 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %4, i32 6
  %20 = bitcast i64* %18 to <2 x i64>*
  %21 = load <2 x i64>, <2 x i64>* %20, align 8
  %22 = bitcast i64* %19 to <2 x i64>*
  store <2 x i64> %21, <2 x i64>* %22, align 8
  %23 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 86
  %24 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %4, i32 9
  %25 = bitcast i64* %23 to <2 x i64>*
  %26 = load <2 x i64>, <2 x i64>* %25, align 32
  %27 = bitcast i64* %24 to <2 x i64>*
  store <2 x i64> %26, <2 x i64>* %27, align 8
  %28 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 92
  %29 = load i64, i64* %28, align 32
  %30 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %4, i32 11
  store i64 %29, i64* %30, align 8
  %31 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 94
  %32 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %4, i32 13
  %33 = bitcast i32* %31 to <4 x i32>*
  %34 = load <4 x i32>, <4 x i32>* %33, align 4
  %35 = bitcast i32* %32 to <4 x i32>*
  store <4 x i32> %34, <4 x i32>* %35, align 4
  %36 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 78
  %37 = load i32, i32* %36, align 16
  %38 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %4, i32 17
  store i32 %37, i32* %38, align 4
  %39 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 79
  %40 = load i32, i32* %39, align 4
  %41 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %4, i32 18
  store i32 %40, i32* %41, align 8
  %42 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 80
  %43 = load i32, i32* %42, align 8
  %44 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %4, i32 19
  store i32 %43, i32* %44, align 4
  %45 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 81
  %46 = load i32, i32* %45, align 4
  %47 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %4, i32 20
  store i32 %46, i32* %47, align 8
  %48 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 55
  %49 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %4, i32 21
  %50 = bitcast double* %48 to <2 x i64>*
  %51 = load <2 x i64>, <2 x i64>* %50, align 32
  %52 = bitcast double* %49 to <2 x i64>*
  store <2 x i64> %51, <2 x i64>* %52, align 8
  %53 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 57
  %54 = bitcast double* %53 to i64*
  %55 = load i64, i64* %54, align 16
  %56 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %4, i32 23
  %57 = bitcast double* %56 to i64*
  store i64 %55, i64* %57, align 8
  %58 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 65
  %59 = load i32, i32* %58, align 4
  %60 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %4, i32 24
  store i32 %59, i32* %60, align 8
  %61 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 73
  %62 = load i32, i32* %61, align 8
  %63 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %4, i32 25
  store i32 %62, i32* %63, align 4
  %64 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 82
  %65 = load i64, i64* %64, align 32
  %66 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %4, i32 26
  store i64 %65, i64* %66, align 8
  %67 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 46
  %68 = load i32, i32* %67, align 32
  %69 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %4, i32 27
  store i32 %68, i32* %69, align 8
  %70 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 150
  %71 = load i32, i32* %70, align 8
  %72 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %4, i32 28
  store i32 %71, i32* %72, align 4
  %73 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 149
  %74 = load i32, i32* %73, align 4
  %75 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %4, i32 29
  store i32 %74, i32* %75, align 8
  %76 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 128
  %77 = load i32, i32* %76, align 8
  %78 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %4, i32 30
  store i32 %77, i32* %78, align 4
  %79 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 54, i64 0
  %80 = load i32, i32* %79, align 8
  %81 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %4, i32 32, i64 0
  store i32 %80, i32* %81, align 8
  %82 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 54, i64 1
  %83 = load i32, i32* %82, align 4
  %84 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %4, i32 32, i64 1
  store i32 %83, i32* %84, align 4
  %85 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %4, i32 31, i64 0
  %86 = bitcast i32* %85 to i8*
  %87 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 56, i64 0
  %88 = bitcast i32* %87 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %86, i8* align 8 %88, i64 16, i1 false)
  ret void
}

declare i32 @sem_wait(%union.sem_t*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vp8_get_preview_raw_frame(%struct.VP8_COMP*, %struct.yv12_buffer_config*, %struct.vp8_ppflags_t*) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 51
  %5 = load i32, i32* %4, align 4
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %7, label %15

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19
  %9 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 41
  %10 = bitcast %struct.modeinfo** %9 to i64*
  %11 = load i64, i64* %10, align 16
  %12 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 42
  %13 = bitcast %struct.modeinfo** %12 to i64*
  store i64 %11, i64* %13, align 8
  %14 = tail call i32 @vp8_post_proc_frame(%struct.VP8Common* %8, %struct.yv12_buffer_config* %1, %struct.vp8_ppflags_t* %2) #10
  tail call void @vpx_clear_system_state() #10
  br label %15

15:                                               ; preds = %3, %7
  %16 = phi i32 [ %14, %7 ], [ -1, %3 ]
  ret i32 %16
}

declare i32 @vp8_post_proc_frame(%struct.VP8Common*, %struct.yv12_buffer_config*, %struct.vp8_ppflags_t*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vp8_set_roimap(%struct.VP8_COMP* nocapture, i8* readonly, i32, i32, i32* nocapture readonly, i32* nocapture readonly, i32* nocapture readonly) local_unnamed_addr #0 {
  %8 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 27
  %9 = load i32, i32* %8, align 4
  %10 = icmp eq i32 %9, %2
  br i1 %10, label %11, label %124

11:                                               ; preds = %7
  %12 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 28
  %13 = load i32, i32* %12, align 8
  %14 = icmp eq i32 %13, %3
  br i1 %14, label %15, label %124

15:                                               ; preds = %11
  %16 = load i32, i32* %4, align 4
  %17 = icmp slt i32 %16, 0
  %18 = sub nsw i32 0, %16
  %19 = select i1 %17, i32 %18, i32 %16
  %20 = icmp sgt i32 %19, 63
  br i1 %20, label %124, label %21

21:                                               ; preds = %15
  %22 = getelementptr inbounds i32, i32* %4, i64 1
  %23 = load i32, i32* %22, align 4
  %24 = icmp slt i32 %23, 0
  %25 = sub nsw i32 0, %23
  %26 = select i1 %24, i32 %25, i32 %23
  %27 = icmp sgt i32 %26, 63
  br i1 %27, label %124, label %28

28:                                               ; preds = %21
  %29 = getelementptr inbounds i32, i32* %4, i64 2
  %30 = load i32, i32* %29, align 4
  %31 = icmp slt i32 %30, 0
  %32 = sub nsw i32 0, %30
  %33 = select i1 %31, i32 %32, i32 %30
  %34 = icmp sgt i32 %33, 63
  br i1 %34, label %124, label %35

35:                                               ; preds = %28
  %36 = getelementptr inbounds i32, i32* %4, i64 3
  %37 = load i32, i32* %36, align 4
  %38 = icmp slt i32 %37, 0
  %39 = sub nsw i32 0, %37
  %40 = select i1 %38, i32 %39, i32 %37
  %41 = icmp sgt i32 %40, 63
  br i1 %41, label %124, label %42

42:                                               ; preds = %35
  %43 = load i32, i32* %5, align 4
  %44 = icmp slt i32 %43, 0
  %45 = sub nsw i32 0, %43
  %46 = select i1 %44, i32 %45, i32 %43
  %47 = icmp sgt i32 %46, 63
  br i1 %47, label %124, label %48

48:                                               ; preds = %42
  %49 = getelementptr inbounds i32, i32* %5, i64 1
  %50 = load i32, i32* %49, align 4
  %51 = icmp slt i32 %50, 0
  %52 = sub nsw i32 0, %50
  %53 = select i1 %51, i32 %52, i32 %50
  %54 = icmp sgt i32 %53, 63
  br i1 %54, label %124, label %55

55:                                               ; preds = %48
  %56 = getelementptr inbounds i32, i32* %5, i64 2
  %57 = load i32, i32* %56, align 4
  %58 = icmp slt i32 %57, 0
  %59 = sub nsw i32 0, %57
  %60 = select i1 %58, i32 %59, i32 %57
  %61 = icmp sgt i32 %60, 63
  br i1 %61, label %124, label %62

62:                                               ; preds = %55
  %63 = getelementptr inbounds i32, i32* %5, i64 3
  %64 = load i32, i32* %63, align 4
  %65 = icmp slt i32 %64, 0
  %66 = sub nsw i32 0, %64
  %67 = select i1 %65, i32 %66, i32 %64
  %68 = icmp sgt i32 %67, 63
  br i1 %68, label %124, label %69

69:                                               ; preds = %62
  %70 = icmp eq i8* %1, null
  br i1 %70, label %95, label %71

71:                                               ; preds = %69
  %72 = or i32 %23, %16
  %73 = or i32 %72, %30
  %74 = or i32 %73, %37
  %75 = or i32 %74, %43
  %76 = or i32 %75, %50
  %77 = or i32 %76, %57
  %78 = or i32 %77, %64
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %80, label %97

80:                                               ; preds = %71
  %81 = load i32, i32* %6, align 4
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %83, label %97

83:                                               ; preds = %80
  %84 = getelementptr inbounds i32, i32* %6, i64 1
  %85 = load i32, i32* %84, align 4
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %87, label %97

87:                                               ; preds = %83
  %88 = getelementptr inbounds i32, i32* %6, i64 2
  %89 = load i32, i32* %88, align 4
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %91, label %97

91:                                               ; preds = %87
  %92 = getelementptr inbounds i32, i32* %6, i64 3
  %93 = load i32, i32* %92, align 4
  %94 = icmp eq i32 %93, 0
  br i1 %94, label %95, label %97

95:                                               ; preds = %69, %91
  %96 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 6, i32 23
  store i8 0, i8* %96, align 32
  br label %124

97:                                               ; preds = %91, %87, %83, %80, %71
  %98 = icmp sgt i32 %16, -1
  br i1 %98, label %99, label %103

99:                                               ; preds = %97
  %100 = sext i32 %16 to i64
  %101 = getelementptr inbounds [64 x i32], [64 x i32]* @q_trans, i64 0, i64 %100
  %102 = load i32, i32* %101, align 4
  br label %108

103:                                              ; preds = %97
  %104 = sext i32 %18 to i64
  %105 = getelementptr inbounds [64 x i32], [64 x i32]* @q_trans, i64 0, i64 %104
  %106 = load i32, i32* %105, align 4
  %107 = sub nsw i32 0, %106
  br label %108

108:                                              ; preds = %103, %99
  %109 = phi i32 [ %102, %99 ], [ %107, %103 ]
  %110 = icmp sgt i32 %23, -1
  br i1 %110, label %131, label %126

111:                                              ; preds = %159
  %112 = load i32, i32* %172, align 4
  %113 = icmp eq i32 %112, 0
  br i1 %113, label %114, label %120

114:                                              ; preds = %111
  %115 = load i32, i32* %175, align 4
  %116 = icmp eq i32 %115, 0
  br i1 %116, label %117, label %120

117:                                              ; preds = %114
  %118 = load i32, i32* %178, align 4
  %119 = icmp eq i32 %118, 0
  br i1 %119, label %122, label %120

120:                                              ; preds = %117, %114, %111, %159
  %121 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 220
  store i32 1, i32* %121, align 4
  br label %122

122:                                              ; preds = %117, %120
  %123 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 139
  store i32 0, i32* %123, align 4
  br label %124

124:                                              ; preds = %42, %48, %55, %62, %15, %21, %28, %35, %7, %11, %122, %95
  %125 = phi i32 [ 0, %95 ], [ 0, %122 ], [ -1, %11 ], [ -1, %7 ], [ -1, %35 ], [ -1, %28 ], [ -1, %21 ], [ -1, %15 ], [ -1, %62 ], [ -1, %55 ], [ -1, %48 ], [ -1, %42 ]
  ret i32 %125

126:                                              ; preds = %108
  %127 = sext i32 %25 to i64
  %128 = getelementptr inbounds [64 x i32], [64 x i32]* @q_trans, i64 0, i64 %127
  %129 = load i32, i32* %128, align 4
  %130 = sub nsw i32 0, %129
  br label %135

131:                                              ; preds = %108
  %132 = sext i32 %23 to i64
  %133 = getelementptr inbounds [64 x i32], [64 x i32]* @q_trans, i64 0, i64 %132
  %134 = load i32, i32* %133, align 4
  br label %135

135:                                              ; preds = %131, %126
  %136 = phi i32 [ %134, %131 ], [ %130, %126 ]
  %137 = icmp sgt i32 %30, -1
  br i1 %137, label %143, label %138

138:                                              ; preds = %135
  %139 = sext i32 %32 to i64
  %140 = getelementptr inbounds [64 x i32], [64 x i32]* @q_trans, i64 0, i64 %139
  %141 = load i32, i32* %140, align 4
  %142 = sub nsw i32 0, %141
  br label %147

143:                                              ; preds = %135
  %144 = sext i32 %30 to i64
  %145 = getelementptr inbounds [64 x i32], [64 x i32]* @q_trans, i64 0, i64 %144
  %146 = load i32, i32* %145, align 4
  br label %147

147:                                              ; preds = %143, %138
  %148 = phi i32 [ %146, %143 ], [ %142, %138 ]
  %149 = icmp sgt i32 %37, -1
  br i1 %149, label %155, label %150

150:                                              ; preds = %147
  %151 = sext i32 %39 to i64
  %152 = getelementptr inbounds [64 x i32], [64 x i32]* @q_trans, i64 0, i64 %151
  %153 = load i32, i32* %152, align 4
  %154 = sub nsw i32 0, %153
  br label %159

155:                                              ; preds = %147
  %156 = sext i32 %37 to i64
  %157 = getelementptr inbounds [64 x i32], [64 x i32]* @q_trans, i64 0, i64 %156
  %158 = load i32, i32* %157, align 4
  br label %159

159:                                              ; preds = %155, %150
  %160 = phi i32 [ %158, %155 ], [ %154, %150 ]
  %161 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 134
  %162 = load i8*, i8** %161, align 16
  %163 = mul nsw i32 %3, %2
  %164 = sext i32 %163 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %162, i8* nonnull align 1 %1, i64 %164, i1 false) #10
  %165 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 6, i32 23
  call void @llvm.memset.p0i8.i64(i8* align 32 %165, i8 1, i64 3, i1 false)
  %166 = load i32, i32* %5, align 4
  %167 = load i32, i32* %49, align 4
  %168 = load i32, i32* %56, align 4
  %169 = load i32, i32* %63, align 4
  %170 = load i32, i32* %6, align 4
  %171 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 136, i64 0
  store i32 %170, i32* %171, align 32
  %172 = getelementptr inbounds i32, i32* %6, i64 1
  %173 = load i32, i32* %172, align 4
  %174 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 136, i64 1
  store i32 %173, i32* %174, align 4
  %175 = getelementptr inbounds i32, i32* %6, i64 2
  %176 = load i32, i32* %175, align 4
  %177 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 136, i64 2
  store i32 %176, i32* %177, align 8
  %178 = getelementptr inbounds i32, i32* %6, i64 3
  %179 = load i32, i32* %178, align 4
  %180 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 136, i64 3
  store i32 %179, i32* %180, align 4
  %181 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 6, i32 26
  store i8 0, i8* %181, align 1
  %182 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 135, i64 0, i64 0
  %183 = bitcast i8* %182 to i64*
  %184 = zext i32 %169 to i64
  %185 = shl i64 %184, 56
  %186 = and i32 %168, 255
  %187 = zext i32 %186 to i64
  %188 = shl nuw nsw i64 %187, 48
  %189 = and i32 %167, 255
  %190 = zext i32 %189 to i64
  %191 = shl nuw nsw i64 %190, 40
  %192 = and i32 %166, 255
  %193 = zext i32 %192 to i64
  %194 = shl nuw nsw i64 %193, 32
  %195 = shl i32 %160, 24
  %196 = shl i32 %148, 16
  %197 = and i32 %196, 16711680
  %198 = shl i32 %136, 8
  %199 = and i32 %198, 65280
  %200 = and i32 %109, 255
  %201 = or i32 %199, %200
  %202 = or i32 %201, %195
  %203 = or i32 %202, %197
  %204 = zext i32 %203 to i64
  %205 = or i64 %194, %204
  %206 = or i64 %205, %191
  %207 = or i64 %206, %188
  %208 = or i64 %207, %185
  store i64 %208, i64* %183, align 8
  %209 = load i32, i32* %6, align 4
  %210 = icmp eq i32 %209, 0
  br i1 %210, label %111, label %120
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vp8_set_active_map(%struct.VP8_COMP* nocapture, i8* readonly, i32, i32) local_unnamed_addr #0 {
  %5 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 27
  %6 = load i32, i32* %5, align 4
  %7 = icmp eq i32 %6, %2
  br i1 %7, label %8, label %22

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 28
  %10 = load i32, i32* %9, align 8
  %11 = icmp eq i32 %10, %3
  br i1 %11, label %12, label %22

12:                                               ; preds = %8
  %13 = icmp eq i8* %1, null
  br i1 %13, label %20, label %14

14:                                               ; preds = %12
  %15 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 137
  %16 = load i8*, i8** %15, align 16
  %17 = mul i32 %3, %2
  %18 = zext i32 %17 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %16, i8* nonnull align 1 %1, i64 %18, i1 false)
  %19 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 138
  store i32 1, i32* %19, align 8
  br label %22

20:                                               ; preds = %12
  %21 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 138
  store i32 0, i32* %21, align 8
  br label %22

22:                                               ; preds = %4, %8, %14, %20
  %23 = phi i32 [ 0, %20 ], [ 0, %14 ], [ -1, %8 ], [ -1, %4 ]
  ret i32 %23
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden i32 @vp8_set_internal_size(%struct.VP8_COMP* nocapture, i32, i32) local_unnamed_addr #6 {
  %4 = icmp ult i32 %1, 4
  br i1 %4, label %5, label %10

5:                                                ; preds = %3
  %6 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 7
  store i32 %1, i32* %6, align 8
  %7 = icmp ult i32 %2, 4
  br i1 %7, label %8, label %10

8:                                                ; preds = %5
  %9 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 8
  store i32 %2, i32* %9, align 4
  br label %10

10:                                               ; preds = %5, %3, %8
  %11 = phi i32 [ 0, %8 ], [ -1, %3 ], [ -1, %5 ]
  ret i32 %11
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vp8_calc_ss_err(%struct.yv12_buffer_config* nocapture readonly, %struct.yv12_buffer_config* nocapture readonly) local_unnamed_addr #0 {
  %3 = alloca i32, align 4
  %4 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 1
  %5 = load i32, i32* %4, align 4
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %55

7:                                                ; preds = %2
  %8 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 13
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 13
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 0
  %13 = bitcast i32* %3 to i8*
  %14 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 4
  %15 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 4
  %16 = load i32, i32* %12, align 8
  br label %17

17:                                               ; preds = %7, %41
  %18 = phi i32 [ %5, %7 ], [ %42, %41 ]
  %19 = phi i32 [ %16, %7 ], [ %43, %41 ]
  %20 = phi i8* [ %9, %7 ], [ %52, %41 ]
  %21 = phi i8* [ %11, %7 ], [ %48, %41 ]
  %22 = phi i32 [ 0, %7 ], [ %44, %41 ]
  %23 = phi i32 [ 0, %7 ], [ %53, %41 ]
  %24 = icmp sgt i32 %19, 0
  br i1 %24, label %25, label %41

25:                                               ; preds = %17, %25
  %26 = phi i64 [ %35, %25 ], [ 0, %17 ]
  %27 = phi i32 [ %34, %25 ], [ %22, %17 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %13) #10
  store i32 -1431655766, i32* %3, align 4
  %28 = load i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i8*, i32, i32*)** @vpx_mse16x16, align 8
  %29 = getelementptr inbounds i8, i8* %21, i64 %26
  %30 = load i32, i32* %14, align 8
  %31 = getelementptr inbounds i8, i8* %20, i64 %26
  %32 = load i32, i32* %15, align 8
  %33 = call i32 %28(i8* %29, i32 %30, i8* %31, i32 %32, i32* nonnull %3) #10
  %34 = add i32 %33, %27
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %13) #10
  %35 = add nuw i64 %26, 16
  %36 = load i32, i32* %12, align 8
  %37 = trunc i64 %35 to i32
  %38 = icmp sgt i32 %36, %37
  br i1 %38, label %25, label %39

39:                                               ; preds = %25
  %40 = load i32, i32* %4, align 4
  br label %41

41:                                               ; preds = %39, %17
  %42 = phi i32 [ %18, %17 ], [ %40, %39 ]
  %43 = phi i32 [ %19, %17 ], [ %36, %39 ]
  %44 = phi i32 [ %22, %17 ], [ %34, %39 ]
  %45 = load i32, i32* %14, align 8
  %46 = shl nsw i32 %45, 4
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds i8, i8* %21, i64 %47
  %49 = load i32, i32* %15, align 8
  %50 = shl nsw i32 %49, 4
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds i8, i8* %20, i64 %51
  %53 = add nuw nsw i32 %23, 16
  %54 = icmp slt i32 %53, %42
  br i1 %54, label %17, label %55

55:                                               ; preds = %41, %2
  %56 = phi i32 [ 0, %2 ], [ %44, %41 ]
  ret i32 %56
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @vp8_get_quantizer(%struct.VP8_COMP* nocapture readonly) local_unnamed_addr #8 {
  %2 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 34
  %3 = load i32, i32* %2, align 16
  ret i32 %3
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc void @init_temporal_layer_context(%struct.VP8_COMP*, %struct.VP8_CONFIG* nocapture readonly, i32, double) unnamed_addr #4 {
  %5 = sext i32 %2 to i64
  %6 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 74
  %7 = load double, double* %6, align 16
  %8 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 54, i64 %5
  %9 = load i32, i32* %8, align 4
  %10 = uitofp i32 %9 to double
  %11 = fdiv double %7, %10
  %12 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %5, i32 0
  store double %11, double* %12, align 8
  %13 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 53, i64 %5
  %14 = load i32, i32* %13, align 4
  %15 = mul i32 %14, 1000
  %16 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %5, i32 1
  store i32 %15, i32* %16, align 8
  %17 = getelementptr inbounds %struct.VP8_CONFIG, %struct.VP8_CONFIG* %1, i64 0, i32 19
  %18 = load i64, i64* %17, align 8
  %19 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %5, i32 5
  store i64 %18, i64* %19, align 8
  %20 = getelementptr inbounds %struct.VP8_CONFIG, %struct.VP8_CONFIG* %1, i64 0, i32 20
  %21 = load i64, i64* %20, align 8
  %22 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %5, i32 6
  store i64 %21, i64* %22, align 8
  %23 = getelementptr inbounds %struct.VP8_CONFIG, %struct.VP8_CONFIG* %1, i64 0, i32 21
  %24 = load i64, i64* %23, align 8
  %25 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %5, i32 7
  store i64 %24, i64* %25, align 8
  %26 = load i64, i64* %17, align 8
  %27 = sext i32 %15 to i64
  %28 = shl i64 %26, 32
  %29 = ashr exact i64 %28, 32
  %30 = mul nsw i64 %29, %27
  %31 = sdiv i64 %30, 1000
  %32 = shl i64 %31, 32
  %33 = ashr exact i64 %32, 32
  %34 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %5, i32 2
  store i64 %33, i64* %34, align 8
  %35 = load i64, i64* %20, align 8
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %37, label %40

37:                                               ; preds = %4
  %38 = sdiv i32 %15, 8
  %39 = sext i32 %38 to i64
  br label %47

40:                                               ; preds = %4
  %41 = shl i64 %35, 32
  %42 = ashr exact i64 %41, 32
  %43 = mul nsw i64 %42, %27
  %44 = sdiv i64 %43, 1000
  %45 = shl i64 %44, 32
  %46 = ashr exact i64 %45, 32
  br label %47

47:                                               ; preds = %40, %37
  %48 = phi i64 [ %46, %40 ], [ %39, %37 ]
  %49 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %5, i32 3
  store i64 %48, i64* %49, align 8
  %50 = load i64, i64* %23, align 8
  %51 = icmp eq i64 %50, 0
  br i1 %51, label %52, label %55

52:                                               ; preds = %47
  %53 = sdiv i32 %15, 8
  %54 = sext i32 %53 to i64
  br label %62

55:                                               ; preds = %47
  %56 = shl i64 %50, 32
  %57 = ashr exact i64 %56, 32
  %58 = mul nsw i64 %57, %27
  %59 = sdiv i64 %58, 1000
  %60 = shl i64 %59, 32
  %61 = ashr exact i64 %60, 32
  br label %62

62:                                               ; preds = %55, %52
  %63 = phi i64 [ %61, %55 ], [ %54, %52 ]
  %64 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %5, i32 4
  store i64 %63, i64* %64, align 8
  %65 = icmp sgt i32 %2, 0
  br i1 %65, label %66, label %79

66:                                               ; preds = %62
  %67 = load i32, i32* %13, align 4
  %68 = add nsw i32 %2, -1
  %69 = sext i32 %68 to i64
  %70 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 53, i64 %69
  %71 = load i32, i32* %70, align 4
  %72 = sub i32 %67, %71
  %73 = mul i32 %72, 1000
  %74 = uitofp i32 %73 to double
  %75 = fsub double %11, %3
  %76 = fdiv double %74, %75
  %77 = fptosi double %76 to i32
  %78 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %5, i32 8
  store i32 %77, i32* %78, align 8
  br label %79

79:                                               ; preds = %66, %62
  %80 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 26
  %81 = load i32, i32* %80, align 4
  %82 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %5, i32 14
  store i32 %81, i32* %82, align 8
  %83 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 27
  %84 = load i32, i32* %83, align 8
  %85 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %5, i32 16
  store i32 %84, i32* %85, align 8
  %86 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %5, i32 20
  store i32 %81, i32* %86, align 8
  %87 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %5, i32 9
  store i64 %33, i64* %87, align 8
  %88 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %5, i32 10
  store i64 %33, i64* %88, align 8
  %89 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %5, i32 11
  store i64 0, i64* %89, align 8
  %90 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %5, i32 17
  store i32 0, i32* %90, align 4
  %91 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %5, i32 18
  store i32 0, i32* %91, align 8
  %92 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %5, i32 19
  store i32 0, i32* %92, align 4
  %93 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %5, i32 21
  %94 = bitcast double* %93 to <2 x double>*
  store <2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double>* %94, align 8
  %95 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %5, i32 23
  store double 1.000000e+00, double* %95, align 8
  %96 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %5, i32 25
  store i32 0, i32* %96, align 4
  ret void
}

declare void @vp8_lookahead_destroy(%struct.lookahead_ctx*) local_unnamed_addr #1

declare %struct.lookahead_ctx* @vp8_lookahead_init(i32, i32, i32) local_unnamed_addr #1

; Function Attrs: nofree nounwind
declare double @log(double) local_unnamed_addr #9

declare void @vp8_de_alloc_frame_buffers(%struct.VP8Common*) local_unnamed_addr #1

declare i32 @vp8_yv12_de_alloc_frame_buffer(%struct.yv12_buffer_config*) local_unnamed_addr #1

; Function Attrs: nofree nounwind
declare i32 @gettimeofday(%struct.timeval* nocapture, i8* nocapture) local_unnamed_addr #9

declare void @vp8_denoiser_set_parameters(%struct.vp8_denoiser*, i32) local_unnamed_addr #1

declare void @vp8_store_drop_frame_info(%struct.VP8_COMP*) local_unnamed_addr #1

declare i32 @vp8_pick_frame_size(%struct.VP8_COMP*) local_unnamed_addr #1

declare i32 @vp8_regulate_q(%struct.VP8_COMP*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @cyclic_background_refresh(%struct.VP8_COMP*, i32) unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 134
  %4 = load i8*, i8** %3, align 16
  %5 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 140
  %6 = load i32, i32* %5, align 32
  %7 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 27
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 28
  %10 = load i32, i32* %9, align 8
  %11 = mul i32 %10, %8
  %12 = sdiv i32 %1, 2
  %13 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 142
  store i32 %12, i32* %13, align 8
  %14 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 10
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %40, label %17

17:                                               ; preds = %2
  %18 = icmp eq i32 %15, 2
  %19 = select i1 %18, i32 80, i32 100
  %20 = icmp sgt i32 %19, %1
  br i1 %20, label %23, label %21

21:                                               ; preds = %17
  %22 = sdiv i32 %11, 10
  br label %38

23:                                               ; preds = %17
  %24 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 40
  %25 = load i32, i32* %24, align 4
  %26 = icmp ugt i32 %25, 250
  %27 = icmp slt i32 %1, 20
  %28 = and i1 %27, %26
  br i1 %28, label %29, label %36

29:                                               ; preds = %23
  %30 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 49
  %31 = load i32, i32* %30, align 8
  %32 = sitofp i32 %11 to double
  %33 = fmul double %32, 0x3FEE666666666666
  %34 = fptosi double %33 to i32
  %35 = icmp sgt i32 %31, %34
  br i1 %35, label %38, label %36

36:                                               ; preds = %29, %23
  %37 = sdiv i32 %11, 20
  br label %38

38:                                               ; preds = %29, %36, %21
  %39 = phi i32 [ %22, %21 ], [ %37, %36 ], [ 0, %29 ]
  store i32 %39, i32* %5, align 32
  br label %40

40:                                               ; preds = %38, %2
  %41 = phi i32 [ %6, %2 ], [ %39, %38 ]
  %42 = sext i32 %11 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %4, i8 0, i64 %42, i1 false)
  %43 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 23
  %44 = load i32, i32* %43, align 4
  %45 = icmp ne i32 %44, 0
  %46 = icmp sgt i32 %41, 0
  %47 = and i1 %46, %45
  br i1 %47, label %48, label %152

48:                                               ; preds = %40
  %49 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 141
  %50 = load i32, i32* %49, align 4
  %51 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 143
  br label %52

52:                                               ; preds = %75, %48
  %53 = phi i32 [ %50, %48 ], [ %76, %75 ]
  %54 = phi i32 [ %41, %48 ], [ %77, %75 ]
  %55 = load i8*, i8** %51, align 16
  %56 = sext i32 %53 to i64
  %57 = getelementptr inbounds i8, i8* %55, i64 %56
  %58 = load i8, i8* %57, align 1
  %59 = icmp eq i8 %58, 0
  br i1 %59, label %68, label %60

60:                                               ; preds = %52
  %61 = icmp slt i8 %58, 0
  br i1 %61, label %62, label %64

62:                                               ; preds = %60
  %63 = add nsw i8 %58, 1
  store i8 %63, i8* %57, align 1
  br label %64

64:                                               ; preds = %62, %60
  %65 = add nsw i32 %53, 1
  %66 = icmp eq i32 %65, %11
  %67 = select i1 %66, i32 0, i32 %65
  br label %75

68:                                               ; preds = %52
  %69 = getelementptr inbounds i8, i8* %4, i64 %56
  store i8 1, i8* %69, align 1
  %70 = add nsw i32 %54, -1
  %71 = add nsw i32 %53, 1
  %72 = icmp eq i32 %71, %11
  %73 = select i1 %72, i32 0, i32 %71
  %74 = icmp eq i32 %70, 0
  br i1 %74, label %80, label %75

75:                                               ; preds = %64, %68
  %76 = phi i32 [ %67, %64 ], [ %73, %68 ]
  %77 = phi i32 [ %54, %64 ], [ %70, %68 ]
  %78 = load i32, i32* %49, align 4
  %79 = icmp eq i32 %76, %78
  br i1 %79, label %80, label %52

80:                                               ; preds = %75, %68
  %81 = phi i32 [ %76, %75 ], [ %73, %68 ]
  store i32 %81, i32* %49, align 4
  %82 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 5
  %83 = load i32, i32* %82, align 8
  %84 = icmp sgt i32 %83, 0
  br i1 %84, label %85, label %152

85:                                               ; preds = %80
  %86 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 200, i32 5
  %87 = load i32, i32* %86, align 4
  %88 = icmp eq i32 %87, 3
  br i1 %88, label %89, label %152

89:                                               ; preds = %85
  %90 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 200, i32 13, i32 5
  %91 = load i32, i32* %90, align 4
  %92 = icmp sgt i32 %91, %1
  br i1 %92, label %93, label %152

93:                                               ; preds = %89
  %94 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 40
  %95 = load i32, i32* %94, align 4
  %96 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 200, i32 13, i32 6
  %97 = load i32, i32* %96, align 4
  %98 = shl i32 %97, 1
  %99 = icmp ugt i32 %95, %98
  br i1 %99, label %100, label %152

100:                                              ; preds = %93
  store i32 %1, i32* %13, align 8
  %101 = icmp sgt i32 %11, 0
  br i1 %101, label %102, label %152

102:                                              ; preds = %100
  %103 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 144
  %104 = load i8*, i8** %103, align 8
  %105 = load i8, i8* %104, align 1
  %106 = zext i8 %105 to i32
  %107 = icmp ult i32 %97, %106
  %108 = zext i1 %107 to i8
  store i8 %108, i8* %4, align 1
  %109 = icmp eq i32 %11, 1
  br i1 %109, label %152, label %110

110:                                              ; preds = %102
  %111 = zext i32 %11 to i64
  %112 = add nsw i64 %111, -1
  %113 = and i64 %112, 1
  %114 = icmp eq i32 %11, 2
  br i1 %114, label %140, label %115

115:                                              ; preds = %110
  %116 = sub nsw i64 %112, %113
  br label %117

117:                                              ; preds = %117, %115
  %118 = phi i64 [ 1, %115 ], [ %137, %117 ]
  %119 = phi i64 [ %116, %115 ], [ %138, %117 ]
  %120 = load i32, i32* %96, align 4
  %121 = load i8*, i8** %103, align 8
  %122 = getelementptr inbounds i8, i8* %121, i64 %118
  %123 = load i8, i8* %122, align 1
  %124 = zext i8 %123 to i32
  %125 = icmp ult i32 %120, %124
  %126 = zext i1 %125 to i8
  %127 = getelementptr inbounds i8, i8* %4, i64 %118
  store i8 %126, i8* %127, align 1
  %128 = add nuw nsw i64 %118, 1
  %129 = load i32, i32* %96, align 4
  %130 = load i8*, i8** %103, align 8
  %131 = getelementptr inbounds i8, i8* %130, i64 %128
  %132 = load i8, i8* %131, align 1
  %133 = zext i8 %132 to i32
  %134 = icmp ult i32 %129, %133
  %135 = zext i1 %134 to i8
  %136 = getelementptr inbounds i8, i8* %4, i64 %128
  store i8 %135, i8* %136, align 1
  %137 = add nuw nsw i64 %118, 2
  %138 = add i64 %119, -2
  %139 = icmp eq i64 %138, 0
  br i1 %139, label %140, label %117

140:                                              ; preds = %117, %110
  %141 = phi i64 [ 1, %110 ], [ %137, %117 ]
  %142 = icmp eq i64 %113, 0
  br i1 %142, label %152, label %143

143:                                              ; preds = %140
  %144 = load i32, i32* %96, align 4
  %145 = load i8*, i8** %103, align 8
  %146 = getelementptr inbounds i8, i8* %145, i64 %141
  %147 = load i8, i8* %146, align 1
  %148 = zext i8 %147 to i32
  %149 = icmp ult i32 %144, %148
  %150 = zext i1 %149 to i8
  %151 = getelementptr inbounds i8, i8* %4, i64 %141
  store i8 %150, i8* %151, align 1
  br label %152

152:                                              ; preds = %143, %140, %102, %100, %80, %93, %89, %85, %40
  %153 = phi i64 [ 0, %93 ], [ 0, %89 ], [ 0, %85 ], [ 0, %80 ], [ 0, %40 ], [ 237494511599616, %100 ], [ 237494511599616, %102 ], [ 237494511599616, %140 ], [ 237494511599616, %143 ]
  %154 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 6, i32 23
  call void @llvm.memset.p0i8.i64(i8* align 32 %154, i8 1, i64 3, i1 false)
  %155 = load i32, i32* %13, align 8
  %156 = sub nsw i32 %155, %1
  %157 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 6, i32 26
  store i8 0, i8* %157, align 1
  %158 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 135, i64 0, i64 0
  %159 = bitcast i8* %158 to i64*
  %160 = shl i32 %156, 8
  %161 = and i32 %160, 65280
  %162 = zext i32 %161 to i64
  %163 = or i64 %153, %162
  store i64 %163, i64* %159, align 8
  ret void
}

declare void @vp8_compute_frame_size_bounds(%struct.VP8_COMP*, i32*, i32*) local_unnamed_addr #1

declare void @vp8_save_coding_context(%struct.VP8_COMP*) local_unnamed_addr #1

declare void @vp8_de_noise(%struct.VP8Common*, %struct.yv12_buffer_config*, i32, i32) local_unnamed_addr #1

declare void @vp8_set_quantizer(%struct.VP8_COMP*, i32) local_unnamed_addr #1

declare void @vp8_setup_key_frame(%struct.VP8_COMP*) local_unnamed_addr #1

declare void @vp8_encode_frame(%struct.VP8_COMP*) local_unnamed_addr #1

declare i32 @vp8_drop_encodedframe_overshoot(%struct.VP8_COMP*, i32) local_unnamed_addr #1

declare i32 @vp8_estimate_entropy_savings(%struct.VP8_COMP*) local_unnamed_addr #1

declare void @vp8_cal_dissimilarity(%struct.VP8_COMP*) local_unnamed_addr #1

declare void @vp8_update_gf_useage_maps(%struct.VP8_COMP*, %struct.VP8Common*, %struct.macroblock*) local_unnamed_addr #1

declare void @vp8_pack_bitstream(%struct.VP8_COMP*, i8*, i8*, i64*) local_unnamed_addr #1

declare void @vp8_update_rate_correction_factors(%struct.VP8_COMP*, i32) local_unnamed_addr #1

declare void @vp8_adjust_key_frame_context(%struct.VP8_COMP*) local_unnamed_addr #1

declare i32 @vp8_compute_skin_block(i8*, i8*, i8*, i32, i32, i32, i32, i32) local_unnamed_addr #1

declare void @vpx_scale_frame(%struct.yv12_buffer_config*, %struct.yv12_buffer_config*, i8*, i8 zeroext, i32, i32, i32, i32, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc i64 @calc_plane_error(i8*, i32, i8*, i32, i32, i32) unnamed_addr #0 {
  %7 = alloca i32, align 4
  %8 = icmp ult i32 %5, 16
  br i1 %8, label %26, label %9

9:                                                ; preds = %6
  %10 = icmp ult i32 %4, 16
  %11 = bitcast i32* %7 to i8*
  %12 = sext i32 %1 to i64
  %13 = sext i32 %3 to i64
  %14 = shl nsw i32 %1, 4
  %15 = sext i32 %14 to i64
  %16 = shl nsw i32 %3, 4
  %17 = sext i32 %16 to i64
  %18 = zext i32 %4 to i64
  %19 = and i64 %18, 3
  %20 = icmp eq i64 %19, 0
  br label %21

21:                                               ; preds = %9, %145
  %22 = phi i32 [ 16, %9 ], [ %149, %145 ]
  %23 = phi i64 [ 0, %9 ], [ %146, %145 ]
  %24 = phi i8* [ %0, %9 ], [ %147, %145 ]
  %25 = phi i8* [ %2, %9 ], [ %148, %145 ]
  br i1 %10, label %56, label %42

26:                                               ; preds = %145, %6
  %27 = phi i8* [ %2, %6 ], [ %148, %145 ]
  %28 = phi i8* [ %0, %6 ], [ %147, %145 ]
  %29 = phi i32 [ 0, %6 ], [ %22, %145 ]
  %30 = phi i64 [ 0, %6 ], [ %146, %145 ]
  %31 = icmp ult i32 %29, %5
  br i1 %31, label %32, label %234

32:                                               ; preds = %26
  %33 = icmp eq i32 %4, 0
  %34 = sext i32 %1 to i64
  %35 = sext i32 %3 to i64
  %36 = zext i32 %4 to i64
  %37 = add nsw i64 %36, -1
  %38 = and i64 %36, 3
  %39 = icmp ult i64 %37, 3
  %40 = sub nsw i64 %36, %38
  %41 = icmp eq i64 %38, 0
  br label %151

42:                                               ; preds = %21, %42
  %43 = phi i32 [ %54, %42 ], [ 16, %21 ]
  %44 = phi i64 [ %53, %42 ], [ %23, %21 ]
  %45 = phi i32 [ %43, %42 ], [ 0, %21 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #10
  store i32 -1431655766, i32* %7, align 4
  %46 = load i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i8*, i32, i32*)** @vpx_mse16x16, align 8
  %47 = zext i32 %45 to i64
  %48 = getelementptr inbounds i8, i8* %24, i64 %47
  %49 = getelementptr inbounds i8, i8* %25, i64 %47
  %50 = call i32 %46(i8* %48, i32 %1, i8* %49, i32 %3, i32* nonnull %7) #10
  %51 = load i32, i32* %7, align 4
  %52 = zext i32 %51 to i64
  %53 = add i64 %44, %52
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #10
  %54 = add i32 %43, 16
  %55 = icmp ugt i32 %54, %4
  br i1 %55, label %56, label %42

56:                                               ; preds = %42, %21
  %57 = phi i32 [ 0, %21 ], [ %43, %42 ]
  %58 = phi i64 [ %23, %21 ], [ %53, %42 ]
  %59 = icmp ult i32 %57, %4
  br i1 %59, label %60, label %145

60:                                               ; preds = %56
  %61 = zext i32 %57 to i64
  %62 = xor i64 %61, -1
  %63 = add nsw i64 %62, %18
  %64 = icmp ult i64 %63, 3
  br label %65

65:                                               ; preds = %60, %139
  %66 = phi i8* [ %25, %60 ], [ %142, %139 ]
  %67 = phi i8* [ %24, %60 ], [ %141, %139 ]
  %68 = phi i32 [ 0, %60 ], [ %143, %139 ]
  %69 = phi i64 [ %58, %60 ], [ %140, %139 ]
  br i1 %20, label %87, label %70

70:                                               ; preds = %65, %70
  %71 = phi i64 [ %84, %70 ], [ %61, %65 ]
  %72 = phi i64 [ %83, %70 ], [ %69, %65 ]
  %73 = phi i64 [ %85, %70 ], [ %19, %65 ]
  %74 = getelementptr inbounds i8, i8* %67, i64 %71
  %75 = load i8, i8* %74, align 1
  %76 = zext i8 %75 to i32
  %77 = getelementptr inbounds i8, i8* %66, i64 %71
  %78 = load i8, i8* %77, align 1
  %79 = zext i8 %78 to i32
  %80 = sub nsw i32 %76, %79
  %81 = mul nsw i32 %80, %80
  %82 = zext i32 %81 to i64
  %83 = add i64 %72, %82
  %84 = add nuw nsw i64 %71, 1
  %85 = add i64 %73, -1
  %86 = icmp eq i64 %85, 0
  br i1 %86, label %87, label %70, !llvm.loop !8

87:                                               ; preds = %70, %65
  %88 = phi i64 [ undef, %65 ], [ %83, %70 ]
  %89 = phi i64 [ %61, %65 ], [ %84, %70 ]
  %90 = phi i64 [ %69, %65 ], [ %83, %70 ]
  br i1 %64, label %139, label %91

91:                                               ; preds = %87, %91
  %92 = phi i64 [ %137, %91 ], [ %89, %87 ]
  %93 = phi i64 [ %136, %91 ], [ %90, %87 ]
  %94 = getelementptr inbounds i8, i8* %67, i64 %92
  %95 = load i8, i8* %94, align 1
  %96 = zext i8 %95 to i32
  %97 = getelementptr inbounds i8, i8* %66, i64 %92
  %98 = load i8, i8* %97, align 1
  %99 = zext i8 %98 to i32
  %100 = sub nsw i32 %96, %99
  %101 = mul nsw i32 %100, %100
  %102 = zext i32 %101 to i64
  %103 = add i64 %93, %102
  %104 = add nuw nsw i64 %92, 1
  %105 = getelementptr inbounds i8, i8* %67, i64 %104
  %106 = load i8, i8* %105, align 1
  %107 = zext i8 %106 to i32
  %108 = getelementptr inbounds i8, i8* %66, i64 %104
  %109 = load i8, i8* %108, align 1
  %110 = zext i8 %109 to i32
  %111 = sub nsw i32 %107, %110
  %112 = mul nsw i32 %111, %111
  %113 = zext i32 %112 to i64
  %114 = add i64 %103, %113
  %115 = add nuw nsw i64 %92, 2
  %116 = getelementptr inbounds i8, i8* %67, i64 %115
  %117 = load i8, i8* %116, align 1
  %118 = zext i8 %117 to i32
  %119 = getelementptr inbounds i8, i8* %66, i64 %115
  %120 = load i8, i8* %119, align 1
  %121 = zext i8 %120 to i32
  %122 = sub nsw i32 %118, %121
  %123 = mul nsw i32 %122, %122
  %124 = zext i32 %123 to i64
  %125 = add i64 %114, %124
  %126 = add nuw nsw i64 %92, 3
  %127 = getelementptr inbounds i8, i8* %67, i64 %126
  %128 = load i8, i8* %127, align 1
  %129 = zext i8 %128 to i32
  %130 = getelementptr inbounds i8, i8* %66, i64 %126
  %131 = load i8, i8* %130, align 1
  %132 = zext i8 %131 to i32
  %133 = sub nsw i32 %129, %132
  %134 = mul nsw i32 %133, %133
  %135 = zext i32 %134 to i64
  %136 = add i64 %125, %135
  %137 = add nuw nsw i64 %92, 4
  %138 = icmp eq i64 %137, %18
  br i1 %138, label %139, label %91

139:                                              ; preds = %91, %87
  %140 = phi i64 [ %88, %87 ], [ %136, %91 ]
  %141 = getelementptr inbounds i8, i8* %67, i64 %12
  %142 = getelementptr inbounds i8, i8* %66, i64 %13
  %143 = add nuw nsw i32 %68, 1
  %144 = icmp eq i32 %143, 16
  br i1 %144, label %145, label %65

145:                                              ; preds = %139, %56
  %146 = phi i64 [ %58, %56 ], [ %140, %139 ]
  %147 = getelementptr inbounds i8, i8* %24, i64 %15
  %148 = getelementptr inbounds i8, i8* %25, i64 %17
  %149 = add i32 %22, 16
  %150 = icmp ugt i32 %149, %5
  br i1 %150, label %26, label %21

151:                                              ; preds = %228, %32
  %152 = phi i64 [ %30, %32 ], [ %229, %228 ]
  %153 = phi i32 [ %29, %32 ], [ %232, %228 ]
  %154 = phi i8* [ %28, %32 ], [ %230, %228 ]
  %155 = phi i8* [ %27, %32 ], [ %231, %228 ]
  br i1 %33, label %228, label %156

156:                                              ; preds = %151
  br i1 %39, label %207, label %157

157:                                              ; preds = %156, %157
  %158 = phi i64 [ %204, %157 ], [ 0, %156 ]
  %159 = phi i64 [ %203, %157 ], [ %152, %156 ]
  %160 = phi i64 [ %205, %157 ], [ %40, %156 ]
  %161 = getelementptr inbounds i8, i8* %154, i64 %158
  %162 = load i8, i8* %161, align 1
  %163 = zext i8 %162 to i32
  %164 = getelementptr inbounds i8, i8* %155, i64 %158
  %165 = load i8, i8* %164, align 1
  %166 = zext i8 %165 to i32
  %167 = sub nsw i32 %163, %166
  %168 = mul nsw i32 %167, %167
  %169 = zext i32 %168 to i64
  %170 = add i64 %159, %169
  %171 = or i64 %158, 1
  %172 = getelementptr inbounds i8, i8* %154, i64 %171
  %173 = load i8, i8* %172, align 1
  %174 = zext i8 %173 to i32
  %175 = getelementptr inbounds i8, i8* %155, i64 %171
  %176 = load i8, i8* %175, align 1
  %177 = zext i8 %176 to i32
  %178 = sub nsw i32 %174, %177
  %179 = mul nsw i32 %178, %178
  %180 = zext i32 %179 to i64
  %181 = add i64 %170, %180
  %182 = or i64 %158, 2
  %183 = getelementptr inbounds i8, i8* %154, i64 %182
  %184 = load i8, i8* %183, align 1
  %185 = zext i8 %184 to i32
  %186 = getelementptr inbounds i8, i8* %155, i64 %182
  %187 = load i8, i8* %186, align 1
  %188 = zext i8 %187 to i32
  %189 = sub nsw i32 %185, %188
  %190 = mul nsw i32 %189, %189
  %191 = zext i32 %190 to i64
  %192 = add i64 %181, %191
  %193 = or i64 %158, 3
  %194 = getelementptr inbounds i8, i8* %154, i64 %193
  %195 = load i8, i8* %194, align 1
  %196 = zext i8 %195 to i32
  %197 = getelementptr inbounds i8, i8* %155, i64 %193
  %198 = load i8, i8* %197, align 1
  %199 = zext i8 %198 to i32
  %200 = sub nsw i32 %196, %199
  %201 = mul nsw i32 %200, %200
  %202 = zext i32 %201 to i64
  %203 = add i64 %192, %202
  %204 = add nuw nsw i64 %158, 4
  %205 = add i64 %160, -4
  %206 = icmp eq i64 %205, 0
  br i1 %206, label %207, label %157

207:                                              ; preds = %157, %156
  %208 = phi i64 [ undef, %156 ], [ %203, %157 ]
  %209 = phi i64 [ 0, %156 ], [ %204, %157 ]
  %210 = phi i64 [ %152, %156 ], [ %203, %157 ]
  br i1 %41, label %228, label %211

211:                                              ; preds = %207, %211
  %212 = phi i64 [ %225, %211 ], [ %209, %207 ]
  %213 = phi i64 [ %224, %211 ], [ %210, %207 ]
  %214 = phi i64 [ %226, %211 ], [ %38, %207 ]
  %215 = getelementptr inbounds i8, i8* %154, i64 %212
  %216 = load i8, i8* %215, align 1
  %217 = zext i8 %216 to i32
  %218 = getelementptr inbounds i8, i8* %155, i64 %212
  %219 = load i8, i8* %218, align 1
  %220 = zext i8 %219 to i32
  %221 = sub nsw i32 %217, %220
  %222 = mul nsw i32 %221, %221
  %223 = zext i32 %222 to i64
  %224 = add i64 %213, %223
  %225 = add nuw nsw i64 %212, 1
  %226 = add i64 %214, -1
  %227 = icmp eq i64 %226, 0
  br i1 %227, label %228, label %211, !llvm.loop !9

228:                                              ; preds = %207, %211, %151
  %229 = phi i64 [ %152, %151 ], [ %208, %207 ], [ %224, %211 ]
  %230 = getelementptr inbounds i8, i8* %154, i64 %34
  %231 = getelementptr inbounds i8, i8* %155, i64 %35
  %232 = add nuw i32 %153, 1
  %233 = icmp eq i32 %232, %5
  br i1 %233, label %234, label %151

234:                                              ; preds = %228, %26
  %235 = phi i64 [ %30, %26 ], [ %229, %228 ]
  call void @vpx_clear_system_state() #10
  ret i64 %235
}

declare double @vpx_sse_to_psnr(double, double, double) local_unnamed_addr #1

declare i32 @vpx_codec_pkt_list_add(%struct.vpx_codec_pkt_list*, %struct.vpx_codec_cx_pkt*) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind returns_twice "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { nounwind returns_twice }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5}
!5 = !{!"llvm.loop.unroll.disable"}
!6 = distinct !{!6, !7, !3}
!7 = !{!"llvm.loop.unroll.runtime.disable"}
!8 = distinct !{!8, !5}
!9 = distinct !{!9, !5}
