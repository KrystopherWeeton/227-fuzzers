; ModuleID = '../../cc/scheduler/scheduler_settings.cc'
source_filename = "../../cc/scheduler/scheduler_settings.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.cc::SchedulerSettings" = type { i8, i8, i8, i8, i8, i8, i32 }
%"class.base::trace_event::ConvertableToTraceFormat" = type { i32 (...)** }
%"class.base::trace_event::TracedValue" = type { %"class.base::trace_event::ConvertableToTraceFormat", %"class.std::__1::unique_ptr.4" }
%"class.std::__1::unique_ptr.4" = type { %"class.std::__1::__compressed_pair.5" }
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { %"class.base::trace_event::TracedValue::Writer"* }
%"class.base::trace_event::TracedValue::Writer" = type { i32 (...)** }

@.str = private unnamed_addr constant [37 x i8] c"main_frame_before_activation_enabled\00", align 1
@.str.1 = private unnamed_addr constant [22 x i8] c"commit_to_active_tree\00", align 1
@.str.2 = private unnamed_addr constant [53 x i8] c"maximum_number_of_failed_draws_before_draw_is_forced\00", align 1
@.str.3 = private unnamed_addr constant [38 x i8] c"using_synchronous_renderer_compositor\00", align 1
@.str.4 = private unnamed_addr constant [29 x i8] c"enable_impl_latency_recovery\00", align 1
@.str.5 = private unnamed_addr constant [29 x i8] c"enable_main_latency_recovery\00", align 1
@.str.6 = private unnamed_addr constant [41 x i8] c"wait_for_all_pipeline_stages_before_draw\00", align 1

@_ZN2cc17SchedulerSettingsC1Ev = hidden unnamed_addr alias void (%"class.cc::SchedulerSettings"*), void (%"class.cc::SchedulerSettings"*)* @_ZN2cc17SchedulerSettingsC2Ev
@_ZN2cc17SchedulerSettingsC1ERKS0_ = hidden unnamed_addr alias void (%"class.cc::SchedulerSettings"*, %"class.cc::SchedulerSettings"*), void (%"class.cc::SchedulerSettings"*, %"class.cc::SchedulerSettings"*)* @_ZN2cc17SchedulerSettingsC2ERKS0_
@_ZN2cc17SchedulerSettingsD1Ev = hidden unnamed_addr alias void (%"class.cc::SchedulerSettings"*), void (%"class.cc::SchedulerSettings"*)* @_ZN2cc17SchedulerSettingsD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN2cc17SchedulerSettingsC2Ev(%"class.cc::SchedulerSettings"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.cc::SchedulerSettings", %"class.cc::SchedulerSettings"* %0, i64 0, i32 0
  %3 = getelementptr inbounds %"class.cc::SchedulerSettings", %"class.cc::SchedulerSettings"* %0, i64 0, i32 6
  call void @llvm.memset.p0i8.i64(i8* align 4 %2, i8 0, i64 6, i1 false)
  store i32 3, i32* %3, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc17SchedulerSettingsC2ERKS0_(%"class.cc::SchedulerSettings"* nocapture, %"class.cc::SchedulerSettings"* nocapture readonly dereferenceable(12)) unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.cc::SchedulerSettings", %"class.cc::SchedulerSettings"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"class.cc::SchedulerSettings", %"class.cc::SchedulerSettings"* %1, i64 0, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %3, i8* align 4 %4, i64 12, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN2cc17SchedulerSettingsD2Ev(%"class.cc::SchedulerSettings"* nocapture) unnamed_addr #3 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.base::trace_event::ConvertableToTraceFormat"* @_ZNK2cc17SchedulerSettings7AsValueEv(%"class.cc::SchedulerSettings"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %2 = tail call i8* @_Znwm(i64 16) #6
  %3 = bitcast i8* %2 to %"class.base::trace_event::TracedValue"*
  tail call void @_ZN4base11trace_event11TracedValueC1Em(%"class.base::trace_event::TracedValue"* nonnull %3, i64 0) #7
  %4 = getelementptr inbounds %"class.cc::SchedulerSettings", %"class.cc::SchedulerSettings"* %0, i64 0, i32 0
  %5 = load i8, i8* %4, align 4, !range !2
  %6 = icmp ne i8 %5, 0
  tail call void @_ZN4base11trace_event11TracedValue10SetBooleanEPKcb(%"class.base::trace_event::TracedValue"* nonnull %3, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str, i64 0, i64 0), i1 zeroext %6) #7
  %7 = getelementptr inbounds %"class.cc::SchedulerSettings", %"class.cc::SchedulerSettings"* %0, i64 0, i32 1
  %8 = load i8, i8* %7, align 1, !range !2
  %9 = icmp ne i8 %8, 0
  tail call void @_ZN4base11trace_event11TracedValue10SetBooleanEPKcb(%"class.base::trace_event::TracedValue"* nonnull %3, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.1, i64 0, i64 0), i1 zeroext %9) #7
  %10 = getelementptr inbounds %"class.cc::SchedulerSettings", %"class.cc::SchedulerSettings"* %0, i64 0, i32 6
  %11 = load i32, i32* %10, align 4
  tail call void @_ZN4base11trace_event11TracedValue10SetIntegerEPKci(%"class.base::trace_event::TracedValue"* nonnull %3, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.2, i64 0, i64 0), i32 %11) #7
  %12 = getelementptr inbounds %"class.cc::SchedulerSettings", %"class.cc::SchedulerSettings"* %0, i64 0, i32 2
  %13 = load i8, i8* %12, align 2, !range !2
  %14 = icmp ne i8 %13, 0
  tail call void @_ZN4base11trace_event11TracedValue10SetBooleanEPKcb(%"class.base::trace_event::TracedValue"* nonnull %3, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.3, i64 0, i64 0), i1 zeroext %14) #7
  %15 = getelementptr inbounds %"class.cc::SchedulerSettings", %"class.cc::SchedulerSettings"* %0, i64 0, i32 3
  %16 = load i8, i8* %15, align 1, !range !2
  %17 = icmp ne i8 %16, 0
  tail call void @_ZN4base11trace_event11TracedValue10SetBooleanEPKcb(%"class.base::trace_event::TracedValue"* nonnull %3, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.4, i64 0, i64 0), i1 zeroext %17) #7
  %18 = getelementptr inbounds %"class.cc::SchedulerSettings", %"class.cc::SchedulerSettings"* %0, i64 0, i32 4
  %19 = load i8, i8* %18, align 4, !range !2
  %20 = icmp ne i8 %19, 0
  tail call void @_ZN4base11trace_event11TracedValue10SetBooleanEPKcb(%"class.base::trace_event::TracedValue"* nonnull %3, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.5, i64 0, i64 0), i1 zeroext %20) #7
  %21 = getelementptr inbounds %"class.cc::SchedulerSettings", %"class.cc::SchedulerSettings"* %0, i64 0, i32 5
  %22 = load i8, i8* %21, align 1, !range !2
  %23 = icmp ne i8 %22, 0
  tail call void @_ZN4base11trace_event11TracedValue10SetBooleanEPKcb(%"class.base::trace_event::TracedValue"* nonnull %3, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.6, i64 0, i64 0), i1 zeroext %23) #7
  %24 = bitcast i8* %2 to %"class.base::trace_event::ConvertableToTraceFormat"*
  ret %"class.base::trace_event::ConvertableToTraceFormat"* %24
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #4

declare void @_ZN4base11trace_event11TracedValueC1Em(%"class.base::trace_event::TracedValue"*, i64) unnamed_addr #5

declare void @_ZN4base11trace_event11TracedValue10SetBooleanEPKcb(%"class.base::trace_event::TracedValue"*, i8*, i1 zeroext) local_unnamed_addr #5

declare void @_ZN4base11trace_event11TracedValue10SetIntegerEPKci(%"class.base::trace_event::TracedValue"*, i8*, i32) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { builtin nounwind }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
