; ModuleID = '../../components/language/core/common/language_util.cc'
source_filename = "../../components/language/core/common/language_util.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.language::(anonymous namespace)::LanguageCodePair" = type { i8*, i8* }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.std::__1::pair" = type { %"class.base::BasicStringPiece", %"class.base::BasicStringPiece" }
%"class.base::BasicStringPiece" = type { i8*, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.std::__1::__basic_string_common" = type { i8 }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type opaque
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }

@_ZN8language12_GLOBAL__N_135kLanguageCodeChineseCompatiblePairsE = internal unnamed_addr constant [3 x %"struct.language::(anonymous namespace)::LanguageCodePair"] [%"struct.language::(anonymous namespace)::LanguageCodePair" { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i32 0, i32 0) }, %"struct.language::(anonymous namespace)::LanguageCodePair" { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i32 0, i32 0) }, %"struct.language::(anonymous namespace)::LanguageCodePair" { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.5, i32 0, i32 0) }], align 16
@.str = private unnamed_addr constant [3 x i8] c"zh\00", align 1
@_ZN8language12_GLOBAL__N_129kChromeToTranslateLanguageMapE = internal unnamed_addr constant [2 x %"struct.language::(anonymous namespace)::LanguageCodePair"] [%"struct.language::(anonymous namespace)::LanguageCodePair" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.9, i32 0, i32 0) }, %"struct.language::(anonymous namespace)::LanguageCodePair" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.11, i32 0, i32 0) }], align 16
@_ZN8language12_GLOBAL__N_121kLanguageCodeSynonymsE = internal constant [2 x %"struct.language::(anonymous namespace)::LanguageCodePair"] [%"struct.language::(anonymous namespace)::LanguageCodePair" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.13, i32 0, i32 0) }, %"struct.language::(anonymous namespace)::LanguageCodePair" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.15, i32 0, i32 0) }], align 16
@.str.1 = private unnamed_addr constant [6 x i8] c"zh-TW\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"zh-HK\00", align 1
@.str.3 = private unnamed_addr constant [6 x i8] c"zh-MO\00", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c"zh-CN\00", align 1
@.str.5 = private unnamed_addr constant [6 x i8] c"zh-SG\00", align 1
@.str.6 = private unnamed_addr constant [34 x i8] c"../../base/strings/string_piece.h\00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c"s\00", align 1
@.str.8 = private unnamed_addr constant [3 x i8] c"no\00", align 1
@.str.9 = private unnamed_addr constant [3 x i8] c"nb\00", align 1
@.str.10 = private unnamed_addr constant [3 x i8] c"tl\00", align 1
@.str.11 = private unnamed_addr constant [4 x i8] c"fil\00", align 1
@.str.12 = private unnamed_addr constant [3 x i8] c"iw\00", align 1
@.str.13 = private unnamed_addr constant [3 x i8] c"he\00", align 1
@.str.14 = private unnamed_addr constant [3 x i8] c"jw\00", align 1
@.str.15 = private unnamed_addr constant [3 x i8] c"jv\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8language26ToTranslateLanguageSynonymEPNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE(%"class.std::__1::basic_string"*) local_unnamed_addr #0 {
  %2 = alloca %"struct.std::__1::pair", align 8
  %3 = alloca %"class.std::__1::basic_string", align 8
  %4 = bitcast %"struct.std::__1::pair"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %4) #10
  %5 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %6 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %5, i64 0, i32 1, i32 0
  %7 = load i8, i8* %6, align 1
  %8 = icmp slt i8 %7, 0
  %9 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  %12 = select i1 %8, i8* %10, i8* %11
  %13 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %14 = load i64, i64* %13, align 8
  %15 = zext i8 %7 to i64
  %16 = select i1 %8, i64 %14, i64 %15
  call void @_ZN8language20SplitIntoMainAndTailEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"struct.std::__1::pair"* nonnull sret %2, i8* %12, i64 %16) #10
  %17 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %2, i64 0, i32 0, i32 0
  %18 = load i8*, i8** %17, align 8
  %19 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %2, i64 0, i32 0, i32 1
  %20 = load i64, i64* %19, align 8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %4) #10
  %21 = icmp eq i64 %20, 0
  br i1 %21, label %160, label %22

22:                                               ; preds = %1
  %23 = load i8, i8* %6, align 1
  %24 = icmp slt i8 %23, 0
  %25 = load i64, i64* %13, align 8
  %26 = zext i8 %23 to i64
  %27 = select i1 %24, i64 %25, i64 %26
  %28 = icmp eq i64 %27, 5
  br i1 %28, label %29, label %62

29:                                               ; preds = %22
  %30 = call i32 @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm(%"class.std::__1::basic_string"* %0, i64 0, i64 -1, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i64 5) #10
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %36, label %32

32:                                               ; preds = %29
  %33 = load i8, i8* %6, align 1
  %34 = load i64, i64* %13, align 8
  %35 = zext i8 %33 to i64
  br label %62

36:                                               ; preds = %184, %170, %29
  %37 = phi %"struct.language::(anonymous namespace)::LanguageCodePair"* [ getelementptr inbounds ([3 x %"struct.language::(anonymous namespace)::LanguageCodePair"], [3 x %"struct.language::(anonymous namespace)::LanguageCodePair"]* @_ZN8language12_GLOBAL__N_135kLanguageCodeChineseCompatiblePairsE, i64 0, i64 0), %29 ], [ getelementptr inbounds ([3 x %"struct.language::(anonymous namespace)::LanguageCodePair"], [3 x %"struct.language::(anonymous namespace)::LanguageCodePair"]* @_ZN8language12_GLOBAL__N_135kLanguageCodeChineseCompatiblePairsE, i64 0, i64 1), %170 ], [ getelementptr inbounds ([3 x %"struct.language::(anonymous namespace)::LanguageCodePair"], [3 x %"struct.language::(anonymous namespace)::LanguageCodePair"]* @_ZN8language12_GLOBAL__N_135kLanguageCodeChineseCompatiblePairsE, i64 0, i64 2), %184 ]
  %38 = getelementptr inbounds %"struct.language::(anonymous namespace)::LanguageCodePair", %"struct.language::(anonymous namespace)::LanguageCodePair"* %37, i64 0, i32 0
  %39 = load i8*, i8** %38, align 8
  %40 = load i8, i8* %39, align 1
  %41 = call i1 @llvm.is.constant.i8(i8 %40) #10
  br i1 %41, label %42, label %60

42:                                               ; preds = %36
  %43 = call i64 @strlen(i8* %39) #10
  %44 = icmp ult i64 %43, 23
  br i1 %44, label %45, label %58

45:                                               ; preds = %42
  %46 = load i8, i8* %6, align 1
  %47 = icmp slt i8 %46, 0
  br i1 %47, label %48, label %50

48:                                               ; preds = %45
  store i64 %43, i64* %13, align 8
  %49 = load i8*, i8** %9, align 8
  br label %52

50:                                               ; preds = %45
  %51 = trunc i64 %43 to i8
  store i8 %51, i8* %6, align 1
  br label %52

52:                                               ; preds = %50, %48
  %53 = phi i8* [ %49, %48 ], [ %11, %50 ]
  %54 = icmp eq i64 %43, 0
  br i1 %54, label %56, label %55

55:                                               ; preds = %52
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %53, i8* align 1 %39, i64 %43, i1 false) #10
  br label %56

56:                                               ; preds = %55, %52
  %57 = getelementptr inbounds i8, i8* %53, i64 %43
  store i8 0, i8* %57, align 1
  br label %160

58:                                               ; preds = %42
  %59 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_externalEPKcm(%"class.std::__1::basic_string"* %0, i8* %39, i64 %43) #10
  br label %160

60:                                               ; preds = %36
  %61 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_externalEPKc(%"class.std::__1::basic_string"* %0, i8* %39) #10
  br label %160

62:                                               ; preds = %32, %22
  %63 = phi i64 [ %35, %32 ], [ %26, %22 ]
  %64 = phi i64 [ %34, %32 ], [ %25, %22 ]
  %65 = phi i8 [ %33, %32 ], [ %23, %22 ]
  %66 = icmp slt i8 %65, 0
  %67 = select i1 %66, i64 %64, i64 %63
  %68 = icmp eq i64 %67, 5
  br i1 %68, label %170, label %177

69:                                               ; preds = %187
  %70 = call i32 @bcmp(i8* %18, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i64 2) #10
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %160, label %72

72:                                               ; preds = %69
  %73 = call i32 @bcmp(i8* %18, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.9, i64 0, i64 0), i64 %20) #10
  %74 = icmp eq i32 %73, 0
  br i1 %74, label %75, label %101

75:                                               ; preds = %167, %72
  %76 = phi %"struct.language::(anonymous namespace)::LanguageCodePair"* [ getelementptr inbounds ([2 x %"struct.language::(anonymous namespace)::LanguageCodePair"], [2 x %"struct.language::(anonymous namespace)::LanguageCodePair"]* @_ZN8language12_GLOBAL__N_129kChromeToTranslateLanguageMapE, i64 0, i64 0), %72 ], [ getelementptr inbounds ([2 x %"struct.language::(anonymous namespace)::LanguageCodePair"], [2 x %"struct.language::(anonymous namespace)::LanguageCodePair"]* @_ZN8language12_GLOBAL__N_129kChromeToTranslateLanguageMapE, i64 0, i64 1), %167 ]
  %77 = getelementptr inbounds %"struct.language::(anonymous namespace)::LanguageCodePair", %"struct.language::(anonymous namespace)::LanguageCodePair"* %76, i64 0, i32 0
  %78 = load i8*, i8** %77, align 8
  %79 = load i8, i8* %78, align 1
  %80 = call i1 @llvm.is.constant.i8(i8 %79) #10
  br i1 %80, label %81, label %99

81:                                               ; preds = %75
  %82 = call i64 @strlen(i8* %78) #10
  %83 = icmp ult i64 %82, 23
  br i1 %83, label %84, label %97

84:                                               ; preds = %81
  %85 = load i8, i8* %6, align 1
  %86 = icmp slt i8 %85, 0
  br i1 %86, label %87, label %89

87:                                               ; preds = %84
  store i64 %82, i64* %13, align 8
  %88 = load i8*, i8** %9, align 8
  br label %91

89:                                               ; preds = %84
  %90 = trunc i64 %82 to i8
  store i8 %90, i8* %6, align 1
  br label %91

91:                                               ; preds = %89, %87
  %92 = phi i8* [ %88, %87 ], [ %11, %89 ]
  %93 = icmp eq i64 %82, 0
  br i1 %93, label %95, label %94

94:                                               ; preds = %91
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %92, i8* align 1 %78, i64 %82, i1 false) #10
  br label %95

95:                                               ; preds = %94, %91
  %96 = getelementptr inbounds i8, i8* %92, i64 %82
  store i8 0, i8* %96, align 1
  br label %160

97:                                               ; preds = %81
  %98 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_externalEPKcm(%"class.std::__1::basic_string"* %0, i8* %78, i64 %82) #10
  br label %160

99:                                               ; preds = %75
  %100 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_externalEPKc(%"class.std::__1::basic_string"* %0, i8* %78) #10
  br label %160

101:                                              ; preds = %72
  %102 = call i32 @bcmp(i8* %18, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.13, i64 0, i64 0), i64 %20) #10
  %103 = icmp eq i32 %102, 0
  br i1 %103, label %104, label %161

104:                                              ; preds = %161, %101
  %105 = phi %"struct.language::(anonymous namespace)::LanguageCodePair"* [ getelementptr inbounds ([2 x %"struct.language::(anonymous namespace)::LanguageCodePair"], [2 x %"struct.language::(anonymous namespace)::LanguageCodePair"]* @_ZN8language12_GLOBAL__N_121kLanguageCodeSynonymsE, i64 0, i64 0), %101 ], [ getelementptr inbounds ([2 x %"struct.language::(anonymous namespace)::LanguageCodePair"], [2 x %"struct.language::(anonymous namespace)::LanguageCodePair"]* @_ZN8language12_GLOBAL__N_121kLanguageCodeSynonymsE, i64 0, i64 1), %161 ]
  %106 = getelementptr inbounds %"struct.language::(anonymous namespace)::LanguageCodePair", %"struct.language::(anonymous namespace)::LanguageCodePair"* %105, i64 0, i32 0
  %107 = load i8*, i8** %106, align 8
  %108 = load i8, i8* %107, align 1
  %109 = call i1 @llvm.is.constant.i8(i8 %108) #10
  br i1 %109, label %110, label %128

110:                                              ; preds = %104
  %111 = call i64 @strlen(i8* %107) #10
  %112 = icmp ult i64 %111, 23
  br i1 %112, label %113, label %126

113:                                              ; preds = %110
  %114 = load i8, i8* %6, align 1
  %115 = icmp slt i8 %114, 0
  br i1 %115, label %116, label %118

116:                                              ; preds = %113
  store i64 %111, i64* %13, align 8
  %117 = load i8*, i8** %9, align 8
  br label %120

118:                                              ; preds = %113
  %119 = trunc i64 %111 to i8
  store i8 %119, i8* %6, align 1
  br label %120

120:                                              ; preds = %118, %116
  %121 = phi i8* [ %117, %116 ], [ %11, %118 ]
  %122 = icmp eq i64 %111, 0
  br i1 %122, label %124, label %123

123:                                              ; preds = %120
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %121, i8* align 1 %107, i64 %111, i1 false) #10
  br label %124

124:                                              ; preds = %123, %120
  %125 = getelementptr inbounds i8, i8* %121, i64 %111
  store i8 0, i8* %125, align 1
  br label %160

126:                                              ; preds = %110
  %127 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_externalEPKcm(%"class.std::__1::basic_string"* %0, i8* %107, i64 %111) #10
  br label %160

128:                                              ; preds = %104
  %129 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_externalEPKc(%"class.std::__1::basic_string"* %0, i8* %107) #10
  br label %160

130:                                              ; preds = %164
  %131 = bitcast %"class.std::__1::basic_string"* %3 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %131) #11
  unreachable

132:                                              ; preds = %164
  %133 = icmp ult i64 %20, 23
  br i1 %133, label %144, label %134

134:                                              ; preds = %132
  %135 = add nuw i64 %20, 16
  %136 = and i64 %135, -16
  %137 = call i8* @_Znwm(i64 %136) #12
  %138 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %137, i8** %138, align 8, !alias.scope !2
  %139 = or i64 %136, -9223372036854775808
  %140 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %139, i64* %140, align 8, !alias.scope !2
  %141 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %20, i64* %141, align 8, !alias.scope !2
  br label %149

142:                                              ; preds = %167, %161
  %143 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %143) #10
  br label %144

144:                                              ; preds = %142, %132
  %145 = phi i8* [ %165, %132 ], [ %143, %142 ]
  %146 = trunc i64 %20 to i8
  %147 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %148 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %147, i64 0, i32 1, i32 0
  store i8 %146, i8* %148, align 1, !alias.scope !2
  br label %149

149:                                              ; preds = %134, %144
  %150 = phi i8* [ %165, %134 ], [ %145, %144 ]
  %151 = phi i8* [ %137, %134 ], [ %145, %144 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %151, i8* align 1 %18, i64 %20, i1 false) #10
  %152 = getelementptr inbounds i8, i8* %151, i64 %20
  store i8 0, i8* %152, align 1
  %153 = load i8, i8* %6, align 1
  %154 = icmp slt i8 %153, 0
  br i1 %154, label %155, label %157

155:                                              ; preds = %149
  %156 = load i8*, i8** %9, align 8
  call void @_ZdlPv(i8* %156) #12
  br label %157

157:                                              ; preds = %155, %149
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %11, i8* nonnull align 8 %150, i64 24, i1 false) #10
  %158 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %159 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %158, i64 0, i32 1, i32 0
  store i8 0, i8* %159, align 1
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %150) #10
  br label %160

160:                                              ; preds = %95, %97, %99, %128, %126, %124, %69, %60, %58, %56, %1, %157
  ret void

161:                                              ; preds = %101
  %162 = call i32 @bcmp(i8* %18, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.15, i64 0, i64 0), i64 %20) #10
  %163 = icmp eq i32 %162, 0
  br i1 %163, label %104, label %142

164:                                              ; preds = %187
  %165 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %165) #10
  %166 = icmp ugt i64 %20, -17
  br i1 %166, label %130, label %132

167:                                              ; preds = %187
  %168 = call i32 @bcmp(i8* %18, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.11, i64 0, i64 0), i64 %20) #10
  %169 = icmp eq i32 %168, 0
  br i1 %169, label %75, label %142

170:                                              ; preds = %62
  %171 = call i32 @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm(%"class.std::__1::basic_string"* %0, i64 0, i64 -1, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i64 0, i64 0), i64 5) #10
  %172 = icmp eq i32 %171, 0
  br i1 %172, label %36, label %173

173:                                              ; preds = %170
  %174 = load i8, i8* %6, align 1
  %175 = load i64, i64* %13, align 8
  %176 = zext i8 %174 to i64
  br label %177

177:                                              ; preds = %173, %62
  %178 = phi i64 [ %176, %173 ], [ %63, %62 ]
  %179 = phi i64 [ %175, %173 ], [ %64, %62 ]
  %180 = phi i8 [ %174, %173 ], [ %65, %62 ]
  %181 = icmp slt i8 %180, 0
  %182 = select i1 %181, i64 %179, i64 %178
  %183 = icmp eq i64 %182, 5
  br i1 %183, label %184, label %187

184:                                              ; preds = %177
  %185 = call i32 @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm(%"class.std::__1::basic_string"* %0, i64 0, i64 -1, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.5, i64 0, i64 0), i64 5) #10
  %186 = icmp eq i32 %185, 0
  br i1 %186, label %36, label %187

187:                                              ; preds = %184, %177
  switch i64 %20, label %164 [
    i64 2, label %69
    i64 3, label %167
  ]
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN8language20SplitIntoMainAndTailEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"struct.std::__1::pair"* sret, i8*, i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8language23ToChromeLanguageSynonymEPNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE(%"class.std::__1::basic_string"*) local_unnamed_addr #0 {
  %2 = alloca %"class.logging::CheckError", align 8
  %3 = alloca %"class.base::BasicStringPiece", align 8
  %4 = alloca %"class.base::BasicStringPiece", align 8
  %5 = alloca %"struct.std::__1::pair", align 8
  %6 = alloca %"class.std::__1::basic_string", align 8
  %7 = alloca [2 x %"class.base::BasicStringPiece"], align 8
  %8 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %9 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %8, i64 0, i32 1, i32 0
  %10 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %11 = load i8, i8* %9, align 1
  %12 = icmp slt i8 %11, 0
  %13 = load i64, i64* %10, align 8
  %14 = zext i8 %11 to i64
  %15 = select i1 %12, i64 %13, i64 %14
  %16 = icmp eq i64 %15, 2
  br i1 %16, label %17, label %34

17:                                               ; preds = %1
  %18 = tail call i32 @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm(%"class.std::__1::basic_string"* %0, i64 0, i64 -1, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.10, i64 0, i64 0), i64 2) #10
  %19 = icmp eq i32 %18, 0
  %20 = load i8, i8* %9, align 1
  br i1 %19, label %24, label %21

21:                                               ; preds = %17
  %22 = load i64, i64* %10, align 8
  %23 = zext i8 %20 to i64
  br label %34

24:                                               ; preds = %17
  %25 = icmp slt i8 %20, 0
  br i1 %25, label %26, label %29

26:                                               ; preds = %24
  store i64 3, i64* %10, align 8
  %27 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %28 = load i8*, i8** %27, align 8
  br label %31

29:                                               ; preds = %24
  store i8 3, i8* %9, align 1
  %30 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  br label %31

31:                                               ; preds = %29, %26
  %32 = phi i8* [ %28, %26 ], [ %30, %29 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %32, i8* align 1 getelementptr inbounds ([4 x i8], [4 x i8]* @.str.11, i64 0, i64 0), i64 3, i1 false) #10
  %33 = getelementptr inbounds i8, i8* %32, i64 3
  store i8 0, i8* %33, align 1
  br label %83

34:                                               ; preds = %21, %1
  %35 = phi i64 [ %23, %21 ], [ %14, %1 ]
  %36 = phi i64 [ %22, %21 ], [ %13, %1 ]
  %37 = phi i8 [ %20, %21 ], [ %11, %1 ]
  %38 = bitcast %"class.base::BasicStringPiece"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %38) #10
  %39 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %3, i64 0, i32 0
  %40 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %3, i64 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %38, i8 0, i64 16, i1 false) #10
  %41 = bitcast %"class.base::BasicStringPiece"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %41) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %41, i8 0, i64 16, i1 false) #10
  %42 = bitcast %"struct.std::__1::pair"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %42) #10
  %43 = icmp slt i8 %37, 0
  %44 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %45 = load i8*, i8** %44, align 8
  %46 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  %47 = select i1 %43, i8* %45, i8* %46
  %48 = select i1 %43, i64 %36, i64 %35
  call void @_ZN8language20SplitIntoMainAndTailEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"struct.std::__1::pair"* nonnull sret %5, i8* %47, i64 %48) #10
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %38, i8* nonnull align 8 %42, i64 16, i1 false) #10
  %49 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %5, i64 0, i32 1
  %50 = bitcast %"class.base::BasicStringPiece"* %49 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %41, i8* align 8 %50, i64 16, i1 false) #10
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %42) #10
  %51 = load i64, i64* %40, align 8
  %52 = icmp eq i64 %51, 0
  br i1 %52, label %82, label %53

53:                                               ; preds = %34
  %54 = load i8*, i8** %39, align 8
  %55 = icmp eq i64 %51, 2
  br i1 %55, label %56, label %71

56:                                               ; preds = %53
  %57 = call i32 @bcmp(i8* %54, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i64 0, i64 0), i64 %51) #10
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %59, label %84

59:                                               ; preds = %84, %56
  %60 = phi %"struct.language::(anonymous namespace)::LanguageCodePair"* [ getelementptr inbounds ([2 x %"struct.language::(anonymous namespace)::LanguageCodePair"], [2 x %"struct.language::(anonymous namespace)::LanguageCodePair"]* @_ZN8language12_GLOBAL__N_121kLanguageCodeSynonymsE, i64 0, i64 0), %56 ], [ getelementptr inbounds ([2 x %"struct.language::(anonymous namespace)::LanguageCodePair"], [2 x %"struct.language::(anonymous namespace)::LanguageCodePair"]* @_ZN8language12_GLOBAL__N_121kLanguageCodeSynonymsE, i64 0, i64 1), %84 ]
  %61 = getelementptr inbounds %"struct.language::(anonymous namespace)::LanguageCodePair", %"struct.language::(anonymous namespace)::LanguageCodePair"* %60, i64 0, i32 1
  %62 = load i8*, i8** %61, align 8
  %63 = icmp eq i8* %62, null
  br i1 %63, label %66, label %64

64:                                               ; preds = %59
  %65 = call i64 @strlen(i8* nonnull %62) #10
  br label %69

66:                                               ; preds = %59
  %67 = bitcast %"class.logging::CheckError"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %67) #10
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %2, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.6, i64 0, i64 0), i32 125, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i64 0, i64 0)) #10
  %68 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %2) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %2) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %67) #10
  br label %69

69:                                               ; preds = %64, %66
  %70 = phi i64 [ 0, %66 ], [ %65, %64 ]
  store i8* %62, i8** %39, align 8
  store i64 %70, i64* %40, align 8
  br label %71

71:                                               ; preds = %53, %84, %69
  %72 = bitcast %"class.std::__1::basic_string"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %72) #10
  %73 = bitcast [2 x %"class.base::BasicStringPiece"]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %73) #10
  %74 = getelementptr inbounds [2 x %"class.base::BasicStringPiece"], [2 x %"class.base::BasicStringPiece"]* %7, i64 0, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %73, i8* nonnull align 8 %38, i64 16, i1 false)
  %75 = getelementptr inbounds [2 x %"class.base::BasicStringPiece"], [2 x %"class.base::BasicStringPiece"]* %7, i64 0, i64 1
  %76 = bitcast %"class.base::BasicStringPiece"* %75 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %76, i8* nonnull align 8 %41, i64 16, i1 false)
  call void @_ZN4base6StrCatENS_4spanIKNS_16BasicStringPieceIcNSt3__111char_traitsIcEEEELm18446744073709551615EEE(%"class.std::__1::basic_string"* nonnull sret %6, i64 2, %"class.base::BasicStringPiece"* nonnull %74) #10
  %77 = load i8, i8* %9, align 1
  %78 = icmp slt i8 %77, 0
  br i1 %78, label %79, label %81

79:                                               ; preds = %71
  %80 = load i8*, i8** %44, align 8
  call void @_ZdlPv(i8* %80) #12
  br label %81

81:                                               ; preds = %79, %71
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %46, i8* nonnull align 8 %72, i64 24, i1 false) #10
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %73) #10
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %72) #10
  br label %82

82:                                               ; preds = %34, %81
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %41) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %38) #10
  br label %83

83:                                               ; preds = %31, %82
  ret void

84:                                               ; preds = %56
  %85 = call i32 @bcmp(i8* %54, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.14, i64 0, i64 0), i64 %51) #10
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %59, label %71
}

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #2

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #3

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #4

declare void @_ZN4base6StrCatENS_4spanIKNS_16BasicStringPieceIcNSt3__111char_traitsIcEEEELm18446744073709551615EEE(%"class.std::__1::basic_string"* sret, i64, %"class.base::BasicStringPiece"*) local_unnamed_addr #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

declare i32 @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm(%"class.std::__1::basic_string"*, i64, i64, i8*, i64) local_unnamed_addr #2

; Function Attrs: nounwind readnone
declare i1 @llvm.is.constant.i8(i8) #6

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_externalEPKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #2

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_externalEPKc(%"class.std::__1::basic_string"*, i8*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #7

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #8

; Function Attrs: nofree nounwind readonly
declare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #9

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone }
attributes #7 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nofree nounwind readonly }
attributes #10 = { nounwind }
attributes #11 = { noreturn nounwind }
attributes #12 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEEcvNS1_12basic_stringIcS3_NS1_9allocatorIcEEEEEv: argument 0"}
!4 = distinct !{!4, !"_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEEcvNS1_12basic_stringIcS3_NS1_9allocatorIcEEEEEv"}
