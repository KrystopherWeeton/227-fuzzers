; ModuleID = '../../cc/benchmarks/micro_benchmark_impl.cc'
source_filename = "../../cc/benchmarks/micro_benchmark_impl.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.cc::MicroBenchmarkImpl" = type { i32 (...)**, %"class.base::OnceCallback", i8, %class.scoped_refptr.1 }
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.scoped_refptr.1 = type { %"class.base::SingleThreadTaskRunner"* }
%"class.base::SingleThreadTaskRunner" = type { %"class.base::SequencedTaskRunner.base", [4 x i8] }
%"class.base::SequencedTaskRunner.base" = type { %"class.base::TaskRunner.base" }
%"class.base::TaskRunner.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.2" }>
%"class.base::RefCountedThreadSafe.2" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::TaskRunner" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.2", [4 x i8] }>
%"class.cc::LayerTreeHostImpl" = type opaque
%"class.base::Value" = type { %"class.absl::variant" }
%"class.absl::variant" = type { %"class.absl::variant_internal::VariantCopyAssignBaseNontrivial" }
%"class.absl::variant_internal::VariantCopyAssignBaseNontrivial" = type { %"class.absl::variant_internal::VariantMoveAssignBaseNontrivial" }
%"class.absl::variant_internal::VariantMoveAssignBaseNontrivial" = type { %"class.absl::variant_internal::VariantCopyBaseNontrivial" }
%"class.absl::variant_internal::VariantCopyBaseNontrivial" = type { %"class.absl::variant_internal::VariantMoveBaseNontrivial" }
%"class.absl::variant_internal::VariantMoveBaseNontrivial" = type { %"class.absl::variant_internal::VariantStateBaseDestructorNontrivial" }
%"class.absl::variant_internal::VariantStateBaseDestructorNontrivial" = type { %"class.absl::variant_internal::VariantStateBase" }
%"class.absl::variant_internal::VariantStateBase" = type { %"union.absl::variant_internal::DestructibleUnionImpl", i64 }
%"union.absl::variant_internal::DestructibleUnionImpl" = type { %"union.absl::variant_internal::DestructibleUnionImpl.4" }
%"union.absl::variant_internal::DestructibleUnionImpl.4" = type { %"union.absl::variant_internal::DestructibleUnionImpl.5" }
%"union.absl::variant_internal::DestructibleUnionImpl.5" = type { %"union.absl::variant_internal::DestructibleUnionImpl.6" }
%"union.absl::variant_internal::DestructibleUnionImpl.6" = type { %"union.absl::variant_internal::DestructibleUnionImpl.7" }
%"union.absl::variant_internal::DestructibleUnionImpl.7" = type { %"class.std::__1::basic_string" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.8" }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type opaque
%"class.base::Location" = type { i8*, i8*, i32, i8* }
%"class.base::OnceCallback.33" = type { %"class.base::internal::CallbackBase" }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.cc::LayerImpl" = type opaque
%"class.cc::PictureLayerImpl" = type opaque
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.base::Value"* }

$_ZN4base8internal7InvokerINS0_9BindStateINS_12OnceCallbackIFvNSt3__110unique_ptrINS_5ValueENS4_14default_deleteIS6_EEEEEEEJS9_EEEFvvEE7RunOnceEPNS0_13BindStateBaseE = comdat any

$_ZN4base8internal9BindStateINS_12OnceCallbackIFvNSt3__110unique_ptrINS_5ValueENS3_14default_deleteIS5_EEEEEEEJS8_EE7DestroyEPKNS0_13BindStateBaseE = comdat any

$_ZN4base8internal23QueryCancellationTraitsINS0_9BindStateINS_12OnceCallbackIFvNSt3__110unique_ptrINS_5ValueENS4_14default_deleteIS6_EEEEEEEJS9_EEEEEbPKNS0_13BindStateBaseENSD_21CancellationQueryModeE = comdat any

@_ZTVN2cc18MicroBenchmarkImplE = hidden unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.cc::MicroBenchmarkImpl"*)* @_ZN2cc18MicroBenchmarkImplD2Ev to i8*), i8* bitcast (void (%"class.cc::MicroBenchmarkImpl"*)* @_ZN2cc18MicroBenchmarkImplD0Ev to i8*), i8* bitcast (void (%"class.cc::MicroBenchmarkImpl"*, %"class.cc::LayerTreeHostImpl"*)* @_ZN2cc18MicroBenchmarkImpl17DidCompleteCommitEPNS_17LayerTreeHostImplE to i8*), i8* bitcast (void (%"class.cc::MicroBenchmarkImpl"*, %"class.cc::LayerImpl"*)* @_ZN2cc18MicroBenchmarkImpl10RunOnLayerEPNS_9LayerImplE to i8*), i8* bitcast (void (%"class.cc::MicroBenchmarkImpl"*, %"class.cc::PictureLayerImpl"*)* @_ZN2cc18MicroBenchmarkImpl10RunOnLayerEPNS_16PictureLayerImplE to i8*)] }, align 8
@.str = private unnamed_addr constant [11 x i8] c"NotifyDone\00", align 1
@.str.1 = private unnamed_addr constant [44 x i8] c"../../cc/benchmarks/micro_benchmark_impl.cc\00", align 1
@.str.2 = private unnamed_addr constant [27 x i8] c"../../base/bind_internal.h\00", align 1
@.str.3 = private unnamed_addr constant [18 x i8] c"!IsNull(functor_)\00", align 1

@_ZN2cc18MicroBenchmarkImplC1EN4base12OnceCallbackIFvNSt3__110unique_ptrINS1_5ValueENS3_14default_deleteIS5_EEEEEEE13scoped_refptrINS1_22SingleThreadTaskRunnerEE = hidden unnamed_addr alias void (%"class.cc::MicroBenchmarkImpl"*, %"class.base::OnceCallback"*, %"class.base::SingleThreadTaskRunner"*), void (%"class.cc::MicroBenchmarkImpl"*, %"class.base::OnceCallback"*, %"class.base::SingleThreadTaskRunner"*)* @_ZN2cc18MicroBenchmarkImplC2EN4base12OnceCallbackIFvNSt3__110unique_ptrINS1_5ValueENS3_14default_deleteIS5_EEEEEEE13scoped_refptrINS1_22SingleThreadTaskRunnerEE
@_ZN2cc18MicroBenchmarkImplD1Ev = hidden unnamed_addr alias void (%"class.cc::MicroBenchmarkImpl"*), void (%"class.cc::MicroBenchmarkImpl"*)* @_ZN2cc18MicroBenchmarkImplD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc18MicroBenchmarkImplC2EN4base12OnceCallbackIFvNSt3__110unique_ptrINS1_5ValueENS3_14default_deleteIS5_EEEEEEE13scoped_refptrINS1_22SingleThreadTaskRunnerEE(%"class.cc::MicroBenchmarkImpl"* nocapture, %"class.base::OnceCallback"* nocapture, %"class.base::SingleThreadTaskRunner"*) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.cc::MicroBenchmarkImpl", %"class.cc::MicroBenchmarkImpl"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN2cc18MicroBenchmarkImplE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %5 = getelementptr inbounds %"class.cc::MicroBenchmarkImpl", %"class.cc::MicroBenchmarkImpl"* %0, i64 0, i32 1
  %6 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %1, i64 0, i32 0, i32 0, i32 0
  %7 = bitcast %"class.base::OnceCallback"* %1 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = bitcast %"class.base::OnceCallback"* %5 to i64*
  store i64 %8, i64* %9, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %6, align 8
  %10 = getelementptr inbounds %"class.cc::MicroBenchmarkImpl", %"class.cc::MicroBenchmarkImpl"* %0, i64 0, i32 2
  store i8 0, i8* %10, align 8
  %11 = getelementptr inbounds %"class.cc::MicroBenchmarkImpl", %"class.cc::MicroBenchmarkImpl"* %0, i64 0, i32 3, i32 0
  store %"class.base::SingleThreadTaskRunner"* %2, %"class.base::SingleThreadTaskRunner"** %11, align 8
  %12 = icmp eq %"class.base::SingleThreadTaskRunner"* %2, null
  br i1 %12, label %23, label %13

13:                                               ; preds = %3
  %14 = getelementptr inbounds %"class.base::SingleThreadTaskRunner", %"class.base::SingleThreadTaskRunner"* %2, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %15 = atomicrmw add i32* %14, i32 1 monotonic
  %16 = getelementptr inbounds %"class.base::SingleThreadTaskRunner", %"class.base::SingleThreadTaskRunner"* %2, i64 0, i32 0, i32 0, i32 1
  %17 = getelementptr inbounds %"class.base::RefCountedThreadSafe.2", %"class.base::RefCountedThreadSafe.2"* %16, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %18 = atomicrmw sub i32* %17, i32 1 acq_rel
  %19 = icmp eq i32 %18, 1
  br i1 %19, label %20, label %23

20:                                               ; preds = %13
  %21 = getelementptr inbounds %"class.base::RefCountedThreadSafe.2", %"class.base::RefCountedThreadSafe.2"* %16, i64 -2
  %22 = bitcast %"class.base::RefCountedThreadSafe.2"* %21 to %"class.base::TaskRunner"*
  tail call void @_ZN4base16TaskRunnerTraits8DestructEPKNS_10TaskRunnerE(%"class.base::TaskRunner"* %22) #8
  br label %23

23:                                               ; preds = %3, %13, %20
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc18MicroBenchmarkImplD2Ev(%"class.cc::MicroBenchmarkImpl"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.cc::MicroBenchmarkImpl", %"class.cc::MicroBenchmarkImpl"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN2cc18MicroBenchmarkImplE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.cc::MicroBenchmarkImpl", %"class.cc::MicroBenchmarkImpl"* %0, i64 0, i32 3, i32 0
  %4 = load %"class.base::SingleThreadTaskRunner"*, %"class.base::SingleThreadTaskRunner"** %3, align 8
  %5 = icmp eq %"class.base::SingleThreadTaskRunner"* %4, null
  br i1 %5, label %14, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.base::SingleThreadTaskRunner", %"class.base::SingleThreadTaskRunner"* %4, i64 0, i32 0, i32 0, i32 1
  %8 = getelementptr inbounds %"class.base::RefCountedThreadSafe.2", %"class.base::RefCountedThreadSafe.2"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = atomicrmw sub i32* %8, i32 1 acq_rel
  %10 = icmp eq i32 %9, 1
  br i1 %10, label %11, label %14

11:                                               ; preds = %6
  %12 = getelementptr inbounds %"class.base::RefCountedThreadSafe.2", %"class.base::RefCountedThreadSafe.2"* %7, i64 -2
  %13 = bitcast %"class.base::RefCountedThreadSafe.2"* %12 to %"class.base::TaskRunner"*
  tail call void @_ZN4base16TaskRunnerTraits8DestructEPKNS_10TaskRunnerE(%"class.base::TaskRunner"* %13) #8
  br label %14

14:                                               ; preds = %1, %6, %11
  %15 = getelementptr inbounds %"class.cc::MicroBenchmarkImpl", %"class.cc::MicroBenchmarkImpl"* %0, i64 0, i32 1, i32 0
  tail call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* %15) #8
  ret void
}

; Function Attrs: nounwind
declare void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc18MicroBenchmarkImplD0Ev(%"class.cc::MicroBenchmarkImpl"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.cc::MicroBenchmarkImpl", %"class.cc::MicroBenchmarkImpl"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN2cc18MicroBenchmarkImplE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.cc::MicroBenchmarkImpl", %"class.cc::MicroBenchmarkImpl"* %0, i64 0, i32 3, i32 0
  %4 = load %"class.base::SingleThreadTaskRunner"*, %"class.base::SingleThreadTaskRunner"** %3, align 8
  %5 = icmp eq %"class.base::SingleThreadTaskRunner"* %4, null
  br i1 %5, label %14, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.base::SingleThreadTaskRunner", %"class.base::SingleThreadTaskRunner"* %4, i64 0, i32 0, i32 0, i32 1
  %8 = getelementptr inbounds %"class.base::RefCountedThreadSafe.2", %"class.base::RefCountedThreadSafe.2"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = atomicrmw sub i32* %8, i32 1 acq_rel
  %10 = icmp eq i32 %9, 1
  br i1 %10, label %11, label %14

11:                                               ; preds = %6
  %12 = getelementptr inbounds %"class.base::RefCountedThreadSafe.2", %"class.base::RefCountedThreadSafe.2"* %7, i64 -2
  %13 = bitcast %"class.base::RefCountedThreadSafe.2"* %12 to %"class.base::TaskRunner"*
  tail call void @_ZN4base16TaskRunnerTraits8DestructEPKNS_10TaskRunnerE(%"class.base::TaskRunner"* %13) #8
  br label %14

14:                                               ; preds = %1, %6, %11
  %15 = getelementptr inbounds %"class.cc::MicroBenchmarkImpl", %"class.cc::MicroBenchmarkImpl"* %0, i64 0, i32 1, i32 0
  tail call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* %15) #8
  %16 = bitcast %"class.cc::MicroBenchmarkImpl"* %0 to i8*
  tail call void @_ZdlPv(i8* %16) #9
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #2

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2cc18MicroBenchmarkImpl6IsDoneEv(%"class.cc::MicroBenchmarkImpl"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.cc::MicroBenchmarkImpl", %"class.cc::MicroBenchmarkImpl"* %0, i64 0, i32 2
  %3 = load i8, i8* %2, align 8, !range !2
  %4 = icmp ne i8 %3, 0
  ret i1 %4
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN2cc18MicroBenchmarkImpl17DidCompleteCommitEPNS_17LayerTreeHostImplE(%"class.cc::MicroBenchmarkImpl"* nocapture, %"class.cc::LayerTreeHostImpl"* nocapture) unnamed_addr #4 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc18MicroBenchmarkImpl10NotifyDoneENSt3__110unique_ptrIN4base5ValueENS1_14default_deleteIS4_EEEE(%"class.cc::MicroBenchmarkImpl"* nocapture, %"class.base::Value"*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.logging::CheckError", align 8
  %4 = alloca %"class.base::Location", align 8
  %5 = alloca %"class.base::OnceCallback.33", align 8
  %6 = ptrtoint %"class.base::Value"* %1 to i64
  %7 = getelementptr inbounds %"class.cc::MicroBenchmarkImpl", %"class.cc::MicroBenchmarkImpl"* %0, i64 0, i32 3, i32 0
  %8 = bitcast %"class.base::SingleThreadTaskRunner"** %7 to %"class.base::TaskRunner"**
  %9 = load %"class.base::TaskRunner"*, %"class.base::TaskRunner"** %8, align 8
  %10 = bitcast %"class.base::Location"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %10) #8
  call void @_ZN4base8Location7CurrentEPKcS2_i(%"class.base::Location"* nonnull sret %4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.1, i64 0, i64 0), i32 34) #8
  %11 = getelementptr inbounds %"class.cc::MicroBenchmarkImpl", %"class.cc::MicroBenchmarkImpl"* %0, i64 0, i32 1
  %12 = call i8* @_Znwm(i64 48) #9, !noalias !3
  %13 = bitcast i8* %12 to %"class.base::internal::BindStateBase"*
  call void @_ZN4base8internal13BindStateBaseC2EPFvvEPFvPKS1_EPFbS5_NS1_21CancellationQueryModeEE(%"class.base::internal::BindStateBase"* nonnull %13, void ()* bitcast (void (%"class.base::internal::BindStateBase"*)* @_ZN4base8internal7InvokerINS0_9BindStateINS_12OnceCallbackIFvNSt3__110unique_ptrINS_5ValueENS4_14default_deleteIS6_EEEEEEEJS9_EEEFvvEE7RunOnceEPNS0_13BindStateBaseE to void ()*), void (%"class.base::internal::BindStateBase"*)* nonnull @_ZN4base8internal9BindStateINS_12OnceCallbackIFvNSt3__110unique_ptrINS_5ValueENS3_14default_deleteIS5_EEEEEEEJS8_EE7DestroyEPKNS0_13BindStateBaseE, i1 (%"class.base::internal::BindStateBase"*, i32)* nonnull @_ZN4base8internal23QueryCancellationTraitsINS0_9BindStateINS_12OnceCallbackIFvNSt3__110unique_ptrINS_5ValueENS4_14default_deleteIS6_EEEEEEEJS9_EEEEEbPKNS0_13BindStateBaseENSD_21CancellationQueryModeE) #8, !noalias !3
  %14 = getelementptr inbounds i8, i8* %12, i64 32
  %15 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %11, i64 0, i32 0, i32 0, i32 0
  %16 = bitcast %"class.base::OnceCallback"* %11 to i64*
  %17 = load i64, i64* %16, align 8, !noalias !3
  %18 = bitcast i8* %14 to i64*
  store i64 %17, i64* %18, align 8, !noalias !3
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %15, align 8, !noalias !3
  %19 = getelementptr inbounds i8, i8* %12, i64 40
  %20 = bitcast i8* %19 to i64*
  store i64 %6, i64* %20, align 8, !noalias !3
  %21 = icmp eq i64 %17, 0
  br i1 %21, label %22, label %25

22:                                               ; preds = %2
  %23 = bitcast %"class.logging::CheckError"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %23) #8, !noalias !3
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %3, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.2, i64 0, i64 0), i32 896, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3, i64 0, i64 0)) #8, !noalias !3
  %24 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %3) #8, !noalias !3
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %3) #8, !noalias !3
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %23) #8, !noalias !3
  br label %25

25:                                               ; preds = %22, %2
  %26 = bitcast %"class.base::OnceCallback.33"* %5 to i8**
  store i8* %12, i8** %26, align 8, !alias.scope !3
  %27 = call zeroext i1 @_ZN4base10TaskRunner8PostTaskERKNS_8LocationENS_12OnceCallbackIFvvEEE(%"class.base::TaskRunner"* %9, %"class.base::Location"* nonnull dereferenceable(32) %4, %"class.base::OnceCallback.33"* nonnull %5) #8
  %28 = getelementptr inbounds %"class.base::OnceCallback.33", %"class.base::OnceCallback.33"* %5, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %28) #8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %10) #8
  %29 = getelementptr inbounds %"class.cc::MicroBenchmarkImpl", %"class.cc::MicroBenchmarkImpl"* %0, i64 0, i32 2
  store i8 1, i8* %29, align 8
  ret void
}

declare zeroext i1 @_ZN4base10TaskRunner8PostTaskERKNS_8LocationENS_12OnceCallbackIFvvEEE(%"class.base::TaskRunner"*, %"class.base::Location"* dereferenceable(32), %"class.base::OnceCallback.33"*) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #6

declare void @_ZN4base8Location7CurrentEPKcS2_i(%"class.base::Location"* sret, i8*, i8*, i32) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #6

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN2cc18MicroBenchmarkImpl10RunOnLayerEPNS_9LayerImplE(%"class.cc::MicroBenchmarkImpl"* nocapture, %"class.cc::LayerImpl"* nocapture) unnamed_addr #4 align 2 {
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN2cc18MicroBenchmarkImpl10RunOnLayerEPNS_16PictureLayerImplE(%"class.cc::MicroBenchmarkImpl"* nocapture, %"class.cc::PictureLayerImpl"* nocapture) unnamed_addr #4 align 2 {
  ret void
}

declare void @_ZN4base16TaskRunnerTraits8DestructEPKNS_10TaskRunnerE(%"class.base::TaskRunner"*) local_unnamed_addr #5

; Function Attrs: nounwind
declare void @_ZN4base5ValueD1Ev(%"class.base::Value"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base8internal7InvokerINS0_9BindStateINS_12OnceCallbackIFvNSt3__110unique_ptrINS_5ValueENS4_14default_deleteIS6_EEEEEEEJS9_EEEFvvEE7RunOnceEPNS0_13BindStateBaseE(%"class.base::internal::BindStateBase"*) #0 comdat align 2 {
  %2 = alloca %"class.std::__1::unique_ptr", align 8
  %3 = alloca %"class.base::OnceCallback", align 8
  %4 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1
  %5 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1, i32 1
  %6 = bitcast void ()** %5 to %"class.base::Value"**
  %7 = bitcast void ()** %5 to i64*
  %8 = load i64, i64* %7, align 8
  store %"class.base::Value"* null, %"class.base::Value"** %6, align 8
  %9 = bitcast %"class.std::__1::unique_ptr"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #8
  %10 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %2, i64 0, i32 0, i32 0, i32 0
  %11 = bitcast %"class.std::__1::unique_ptr"* %2 to i64*
  store i64 %8, i64* %11, align 8
  %12 = bitcast %"class.base::OnceCallback"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12) #8
  %13 = bitcast %"class.base::internal::BindStateBase"* %4 to %"class.base::internal::BindStateBase"**
  %14 = bitcast %"class.base::internal::BindStateBase"* %4 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = bitcast %"class.base::OnceCallback"* %3 to i64*
  store i64 %15, i64* %16, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %13, align 8
  %17 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %3, i64 0, i32 0
  %18 = inttoptr i64 %15 to %"class.base::internal::BindStateBase"*
  %19 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %18, i64 0, i32 1
  %20 = bitcast void ()** %19 to void (%"class.base::internal::BindStateBase"*, %"class.std::__1::unique_ptr"*)**
  %21 = load void (%"class.base::internal::BindStateBase"*, %"class.std::__1::unique_ptr"*)*, void (%"class.base::internal::BindStateBase"*, %"class.std::__1::unique_ptr"*)** %20, align 8
  call void %21(%"class.base::internal::BindStateBase"* %18, %"class.std::__1::unique_ptr"* nonnull dereferenceable(8) %2) #8
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %17) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12) #8
  %22 = load %"class.base::Value"*, %"class.base::Value"** %10, align 8
  store %"class.base::Value"* null, %"class.base::Value"** %10, align 8
  %23 = icmp eq %"class.base::Value"* %22, null
  br i1 %23, label %26, label %24

24:                                               ; preds = %1
  call void @_ZN4base5ValueD1Ev(%"class.base::Value"* nonnull %22) #8
  %25 = bitcast %"class.base::Value"* %22 to i8*
  call void @_ZdlPv(i8* %25) #9
  br label %26

26:                                               ; preds = %1, %24
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #8
  ret void
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base8internal9BindStateINS_12OnceCallbackIFvNSt3__110unique_ptrINS_5ValueENS3_14default_deleteIS5_EEEEEEEJS8_EE7DestroyEPKNS0_13BindStateBaseE(%"class.base::internal::BindStateBase"*) #0 comdat align 2 {
  %2 = icmp eq %"class.base::internal::BindStateBase"* %0, null
  br i1 %2, label %14, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1, i32 1
  %5 = bitcast void ()** %4 to %"class.base::Value"**
  %6 = load %"class.base::Value"*, %"class.base::Value"** %5, align 8
  store %"class.base::Value"* null, %"class.base::Value"** %5, align 8
  %7 = icmp eq %"class.base::Value"* %6, null
  br i1 %7, label %10, label %8

8:                                                ; preds = %3
  tail call void @_ZN4base5ValueD1Ev(%"class.base::Value"* nonnull %6) #8
  %9 = bitcast %"class.base::Value"* %6 to i8*
  tail call void @_ZdlPv(i8* %9) #9
  br label %10

10:                                               ; preds = %3, %8
  %11 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1
  %12 = bitcast %"class.base::internal::BindStateBase"* %11 to %"class.base::internal::CallbackBase"*
  tail call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* %12) #8
  %13 = bitcast %"class.base::internal::BindStateBase"* %0 to i8*
  tail call void @_ZdlPv(i8* %13) #9
  br label %14

14:                                               ; preds = %10, %1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN4base8internal23QueryCancellationTraitsINS0_9BindStateINS_12OnceCallbackIFvNSt3__110unique_ptrINS_5ValueENS4_14default_deleteIS6_EEEEEEEJS9_EEEEEbPKNS0_13BindStateBaseENSD_21CancellationQueryModeE(%"class.base::internal::BindStateBase"*, i32) #0 comdat {
  %3 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1
  switch i32 %1, label %10 [
    i32 0, label %4
    i32 1, label %7
  ]

4:                                                ; preds = %2
  %5 = bitcast %"class.base::internal::BindStateBase"* %3 to %"class.base::internal::CallbackBase"*
  %6 = tail call zeroext i1 @_ZNK4base8internal12CallbackBase11IsCancelledEv(%"class.base::internal::CallbackBase"* %5) #8
  br label %10

7:                                                ; preds = %2
  %8 = bitcast %"class.base::internal::BindStateBase"* %3 to %"class.base::internal::CallbackBase"*
  %9 = tail call zeroext i1 @_ZNK4base8internal12CallbackBase10MaybeValidEv(%"class.base::internal::CallbackBase"* %8) #8
  br label %10

10:                                               ; preds = %2, %4, %7
  %11 = phi i1 [ %9, %7 ], [ %6, %4 ], [ false, %2 ]
  ret i1 %11
}

declare void @_ZN4base8internal13BindStateBaseC2EPFvvEPFvPKS1_EPFbS5_NS1_21CancellationQueryModeEE(%"class.base::internal::BindStateBase"*, void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)*) unnamed_addr #5

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #5

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #5

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #1

declare zeroext i1 @_ZNK4base8internal12CallbackBase11IsCancelledEv(%"class.base::internal::CallbackBase"*) local_unnamed_addr #5

declare zeroext i1 @_ZNK4base8internal12CallbackBase10MaybeValidEv(%"class.base::internal::CallbackBase"*) local_unnamed_addr #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { argmemonly nounwind }
attributes #7 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!4, !6}
!4 = distinct !{!4, !5, !"_ZN4base8internal8BindImplINS_12OnceCallbackENS2_IFvNSt3__110unique_ptrINS_5ValueENS3_14default_deleteIS5_EEEEEEEJS8_EEEDcOT0_DpOT1_: argument 0"}
!5 = distinct !{!5, !"_ZN4base8internal8BindImplINS_12OnceCallbackENS2_IFvNSt3__110unique_ptrINS_5ValueENS3_14default_deleteIS5_EEEEEEEJS8_EEEDcOT0_DpOT1_"}
!6 = distinct !{!6, !7, !"_ZN4base8BindOnceINS_12OnceCallbackIFvNSt3__110unique_ptrINS_5ValueENS2_14default_deleteIS4_EEEEEEEJS7_EEENS1_INS_8internal14BindTypeHelperIT_JDpT0_EE14UnboundRunTypeEEEOSC_DpOSD_: argument 0"}
!7 = distinct !{!7, !"_ZN4base8BindOnceINS_12OnceCallbackIFvNSt3__110unique_ptrINS_5ValueENS2_14default_deleteIS4_EEEEEEEJS7_EEENS1_INS_8internal14BindTypeHelperIT_JDpT0_EE14UnboundRunTypeEEEOSC_DpOSD_"}
