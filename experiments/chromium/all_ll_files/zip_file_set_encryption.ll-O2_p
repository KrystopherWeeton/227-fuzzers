; ModuleID = '../../third_party/libzip/src/lib/zip_file_set_encryption.c'
source_filename = "../../third_party/libzip/src/lib/zip_file_set_encryption.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.zip = type { %struct.zip_source*, i32, %struct.zip_error, i32, i32, i8*, %struct.zip_string*, %struct.zip_string*, i8, i64, i64, %struct.zip_entry*, i32, i32, %struct.zip_source**, %struct.zip_hash*, %struct.zip_progress* }
%struct.zip_source = type { %struct.zip_source*, %union.anon, i8*, %struct.zip_error, i64, i32, i32, i8, %struct.zip*, i32, i8, i8 }
%union.anon = type { i64 (i8*, i8*, i64, i32)* }
%struct.zip_error = type { i32, i32, i8* }
%struct.zip_string = type { i8*, i16, i32, i8*, i32 }
%struct.zip_entry = type { %struct.zip_dirent*, %struct.zip_dirent*, %struct.zip_source*, i8 }
%struct.zip_dirent = type { i32, i8, i8, i8, i16, i16, i16, i32, i64, i32, i64, i64, %struct.zip_string*, %struct.zip_extra_field*, %struct.zip_string*, i32, i16, i32, i64, i16, i16, i8* }
%struct.zip_extra_field = type { %struct.zip_extra_field*, i32, i16, i16, i8* }
%struct.zip_hash = type opaque
%struct.zip_progress = type opaque

; Function Attrs: nounwind ssp uwtable
define hidden i32 @zip_file_set_encryption(%struct.zip*, i64, i16 zeroext, i8* readonly) local_unnamed_addr #0 {
  %5 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 9
  %6 = load i64, i64* %5, align 8
  %7 = icmp ugt i64 %6, %1
  br i1 %7, label %10, label %8

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 2
  tail call void @zip_error_set(%struct.zip_error* %9, i32 18, i32 0) #6
  br label %135

10:                                               ; preds = %4
  %11 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 4
  %12 = load i32, i32* %11, align 4
  %13 = and i32 %12, 2
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %17, label %15

15:                                               ; preds = %10
  %16 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 2
  tail call void @zip_error_set(%struct.zip_error* %16, i32 25, i32 0) #6
  br label %135

17:                                               ; preds = %10
  %18 = zext i16 %2 to i32
  %19 = icmp eq i16 %2, 0
  br i1 %19, label %25, label %20

20:                                               ; preds = %17
  %21 = tail call %struct.zip_source* (%struct.zip*, %struct.zip_source*, i16, i32, i8*)* @_zip_get_encryption_implementation(i16 zeroext %2, i32 1) #6
  %22 = icmp eq %struct.zip_source* (%struct.zip*, %struct.zip_source*, i16, i32, i8*)* %21, null
  br i1 %22, label %23, label %25

23:                                               ; preds = %20
  %24 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 2
  tail call void @zip_error_set(%struct.zip_error* %24, i32 24, i32 0) #6
  br label %135

25:                                               ; preds = %17, %20
  %26 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 11
  %27 = load %struct.zip_entry*, %struct.zip_entry** %26, align 8
  %28 = getelementptr inbounds %struct.zip_entry, %struct.zip_entry* %27, i64 %1, i32 0
  %29 = load %struct.zip_dirent*, %struct.zip_dirent** %28, align 8
  %30 = icmp eq %struct.zip_dirent* %29, null
  br i1 %30, label %35, label %31

31:                                               ; preds = %25
  %32 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %29, i64 0, i32 20
  %33 = load i16, i16* %32, align 2
  %34 = zext i16 %33 to i32
  br label %35

35:                                               ; preds = %25, %31
  %36 = phi i32 [ %34, %31 ], [ 0, %25 ]
  %37 = icmp eq i32 %36, %18
  %38 = icmp eq i8* %3, null
  %39 = and i1 %38, %37
  br i1 %39, label %40, label %78

40:                                               ; preds = %35
  %41 = getelementptr inbounds %struct.zip_entry, %struct.zip_entry* %27, i64 %1, i32 1
  %42 = load %struct.zip_dirent*, %struct.zip_dirent** %41, align 8
  %43 = icmp eq %struct.zip_dirent* %42, null
  br i1 %43, label %135, label %44

44:                                               ; preds = %40
  %45 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %42, i64 0, i32 0
  %46 = load i32, i32* %45, align 8
  %47 = trunc i32 %46 to i8
  %48 = icmp slt i8 %47, 0
  br i1 %48, label %49, label %68

49:                                               ; preds = %44
  %50 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %42, i64 0, i32 21
  %51 = load i8*, i8** %50, align 8
  %52 = tail call i64 @strlen(i8* %51) #7
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %51, i8 0, i64 %52, i1 false)
  %53 = load %struct.zip_dirent*, %struct.zip_dirent** %41, align 8
  %54 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %53, i64 0, i32 21
  %55 = load i8*, i8** %54, align 8
  tail call void @free(i8* %55) #6
  %56 = load %struct.zip_dirent*, %struct.zip_dirent** %28, align 8
  %57 = icmp eq %struct.zip_dirent* %56, null
  br i1 %57, label %61, label %58

58:                                               ; preds = %49
  %59 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %56, i64 0, i32 21
  %60 = load i8*, i8** %59, align 8
  br label %61

61:                                               ; preds = %49, %58
  %62 = phi i8* [ %60, %58 ], [ null, %49 ]
  %63 = load %struct.zip_dirent*, %struct.zip_dirent** %41, align 8
  %64 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %63, i64 0, i32 21
  store i8* %62, i8** %64, align 8
  %65 = load %struct.zip_dirent*, %struct.zip_dirent** %41, align 8
  %66 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %65, i64 0, i32 0
  %67 = load i32, i32* %66, align 8
  br label %68

68:                                               ; preds = %61, %44
  %69 = phi i32 [ %67, %61 ], [ %46, %44 ]
  %70 = phi %struct.zip_dirent* [ %65, %61 ], [ %42, %44 ]
  %71 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %70, i64 0, i32 0
  %72 = and i32 %69, -193
  store i32 %72, i32* %71, align 8
  %73 = load %struct.zip_dirent*, %struct.zip_dirent** %41, align 8
  %74 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %73, i64 0, i32 0
  %75 = load i32, i32* %74, align 8
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %77, label %135

77:                                               ; preds = %68
  tail call void @_zip_dirent_free(%struct.zip_dirent* %73) #6
  store %struct.zip_dirent* null, %struct.zip_dirent** %41, align 8
  br label %135

78:                                               ; preds = %35
  %79 = icmp ne i8* %3, null
  br i1 %79, label %80, label %85

80:                                               ; preds = %78
  %81 = tail call noalias i8* @strdup(i8* nonnull %3) #6
  %82 = icmp eq i8* %81, null
  br i1 %82, label %83, label %85

83:                                               ; preds = %80
  %84 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 2
  tail call void @zip_error_set(%struct.zip_error* %84, i32 14, i32 0) #6
  br label %135

85:                                               ; preds = %80, %78
  %86 = phi i8* [ %81, %80 ], [ null, %78 ]
  %87 = getelementptr inbounds %struct.zip_entry, %struct.zip_entry* %27, i64 %1, i32 1
  %88 = load %struct.zip_dirent*, %struct.zip_dirent** %87, align 8
  %89 = icmp eq %struct.zip_dirent* %88, null
  br i1 %89, label %90, label %96

90:                                               ; preds = %85
  %91 = load %struct.zip_dirent*, %struct.zip_dirent** %28, align 8
  %92 = tail call %struct.zip_dirent* @_zip_dirent_clone(%struct.zip_dirent* %91) #6
  store %struct.zip_dirent* %92, %struct.zip_dirent** %87, align 8
  %93 = icmp eq %struct.zip_dirent* %92, null
  br i1 %93, label %94, label %96

94:                                               ; preds = %90
  tail call void @free(i8* %86) #6
  %95 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 2
  tail call void @zip_error_set(%struct.zip_error* %95, i32 14, i32 0) #6
  br label %135

96:                                               ; preds = %90, %85
  %97 = phi %struct.zip_dirent* [ %92, %90 ], [ %88, %85 ]
  %98 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %97, i64 0, i32 20
  store i16 %2, i16* %98, align 2
  %99 = load %struct.zip_dirent*, %struct.zip_dirent** %87, align 8
  %100 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %99, i64 0, i32 0
  %101 = load i32, i32* %100, align 8
  %102 = or i32 %101, 64
  store i32 %102, i32* %100, align 8
  %103 = load %struct.zip_dirent*, %struct.zip_dirent** %87, align 8
  br i1 %79, label %104, label %110

104:                                              ; preds = %96
  %105 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %103, i64 0, i32 21
  store i8* %86, i8** %105, align 8
  %106 = load %struct.zip_dirent*, %struct.zip_dirent** %87, align 8
  %107 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %106, i64 0, i32 0
  %108 = load i32, i32* %107, align 8
  %109 = or i32 %108, 128
  store i32 %109, i32* %107, align 8
  br label %135

110:                                              ; preds = %96
  %111 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %103, i64 0, i32 0
  %112 = load i32, i32* %111, align 8
  %113 = trunc i32 %112 to i8
  %114 = icmp slt i8 %113, 0
  br i1 %114, label %115, label %135

115:                                              ; preds = %110
  %116 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %103, i64 0, i32 21
  %117 = load i8*, i8** %116, align 8
  %118 = tail call i64 @strlen(i8* %117) #7
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %117, i8 0, i64 %118, i1 false)
  %119 = load %struct.zip_dirent*, %struct.zip_dirent** %87, align 8
  %120 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %119, i64 0, i32 21
  %121 = load i8*, i8** %120, align 8
  tail call void @free(i8* %121) #6
  %122 = load %struct.zip_dirent*, %struct.zip_dirent** %28, align 8
  %123 = icmp eq %struct.zip_dirent* %122, null
  br i1 %123, label %127, label %124

124:                                              ; preds = %115
  %125 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %122, i64 0, i32 21
  %126 = load i8*, i8** %125, align 8
  br label %127

127:                                              ; preds = %115, %124
  %128 = phi i8* [ %126, %124 ], [ null, %115 ]
  %129 = load %struct.zip_dirent*, %struct.zip_dirent** %87, align 8
  %130 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %129, i64 0, i32 21
  store i8* %128, i8** %130, align 8
  %131 = load %struct.zip_dirent*, %struct.zip_dirent** %87, align 8
  %132 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %131, i64 0, i32 0
  %133 = load i32, i32* %132, align 8
  %134 = and i32 %133, -129
  store i32 %134, i32* %132, align 8
  br label %135

135:                                              ; preds = %68, %77, %40, %104, %127, %110, %94, %83, %23, %15, %8
  %136 = phi i32 [ -1, %8 ], [ -1, %15 ], [ -1, %23 ], [ -1, %83 ], [ -1, %94 ], [ 0, %110 ], [ 0, %127 ], [ 0, %104 ], [ 0, %40 ], [ 0, %77 ], [ 0, %68 ]
  ret i32 %136
}

declare void @zip_error_set(%struct.zip_error*, i32, i32) local_unnamed_addr #1

declare %struct.zip_source* (%struct.zip*, %struct.zip_source*, i16, i32, i8*)* @_zip_get_encryption_implementation(i16 zeroext, i32) local_unnamed_addr #1

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #4

declare void @_zip_dirent_free(%struct.zip_dirent*) local_unnamed_addr #1

; Function Attrs: nofree nounwind
declare noalias i8* @strdup(i8* nocapture readonly) local_unnamed_addr #5

declare %struct.zip_dirent* @_zip_dirent_clone(%struct.zip_dirent*) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
