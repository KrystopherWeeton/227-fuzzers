; ModuleID = '../../third_party/libvpx/source/libvpx/vp9/encoder/vp9_denoiser.c'
source_filename = "../../third_party/libvpx/source/libvpx/vp9/encoder/vp9_denoiser.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.VP9_COMP = type { %struct.FRAME_INFO, [8 x i8], %struct.QUANTS, %struct.ThreadData, %struct.MB_MODE_INFO_EXT*, [8 x i8], [256 x [8 x i16]], [256 x [8 x i16]], %struct.VP9Common, %struct.VP9EncoderConfig, %struct.lookahead_ctx*, %struct.lookahead_entry*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, %struct.yv12_buffer_config*, i8, [50 x %struct.TplDepFrame], [8 x %struct.yv12_buffer_config*], [8 x %struct.EncFrameBuf], %union.pthread_mutex_t, i32, %struct.KMEANS_DATA*, i32, i32, [8 x double], [8 x double], [8 x i32], i32, %struct.TileDataEnc*, i32, i32, [3 x i32], i32, i32, i32, [8 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64*, i32, i32, double*, %struct.yv12_buffer_config, [4 x [64 x %struct.TOKENEXTRA*]], [4 x [64 x %struct.TOKENLIST*]], i64, %struct.RD_OPT, %struct.CODING_CONTEXT, [2 x i32*], [2 x i32*], [2 x i32*], [2 x i32*], i64, i64, i64, %struct.RATE_CONTROL, double, [8 x [4 x i32]], %struct.vpx_codec_pkt_list*, [25 x %struct.MBGRAPH_FRAME_STATS], i32, i32, i32, %struct.SPEED_FEATURES, i32, i32, i32, i32, i32, i8*, i8*, [8 x i32], %struct.CYCLIC_REFRESH*, %struct.ActiveMap, i32 (%struct.macroblock*, %struct.mv*, %struct.mv*, i32, i32, %struct.vp9_variance_vtable*, i32, i32, i32*, i32*, i32**, i32*, i32*, i8*, i32, i32, i32)*, %struct.scale_factors, i32 (%struct.macroblock*, %struct.search_site_config*, %struct.mv*, %struct.mv*, i32, i32, i32*, %struct.vp9_variance_vtable*, %struct.mv*)*, [13 x %struct.vp9_variance_vtable], i64, i64, i64, i64, %struct.TWO_PASS, i8, %struct.yv12_buffer_config, %struct.ALT_REF_AQ*, i32, i32, i32, i32, i32, i32, %struct.SVC, %struct.diff*, i32, i32, i32, %struct.search_site_config, [10 x i32], [7 x [4 x i32]], [2 x [10 x [10 x i32]]], [10 x [10 x [10 x i32]]], [4 x [3 x i32]], [16 x [4 x i32]], [3 x [2 x [4 x i32]]], %struct.vp9_denoiser, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.noise_estimate, i8*, [4 x i64], i64, i64, i64, i8, i32, %struct.VPxWorker*, %struct.EncWorkerData*, %struct.VP9LfSyncData, %struct.VP9BitstreamWorkerData*, i32, %struct.Vp9LevelInfo, %struct.MultiThreadHandle, void (%struct.VP9RowMTSyncData*, i32, i32)*, void (%struct.VP9RowMTSyncData*, i32, i32, i32)*, %struct.ARNRFilterData, i32, i32, i8*, i8*, i8*, i8*, i8, i8, i8*, i32, %struct.LevelConstraint, i8*, i8*, i32, %struct.vpx_roi_map, i32, %struct.EXT_RATECTRL, [8 x i8] }
%struct.FRAME_INFO = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.QUANTS = type { [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]] }
%struct.ThreadData = type { %struct.macroblock, %struct.RD_COUNTS, %struct.FRAME_COUNTS*, %struct.PICK_MODE_CONTEXT*, %struct.PC_TREE*, %struct.PC_TREE*, [8 x i8] }
%struct.macroblock = type { [3 x %struct.macroblock_plane], %struct.macroblockd, %struct.MB_MODE_INFO_EXT*, %struct.MB_MODE_INFO_EXT*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i8, [4 x i32], [4 x i32], i32, [4 x i32], [4 x i32], [4 x i32], [2 x i32*], [2 x i32*], i32**, [4 x i32], [2 x i32*], [2 x i32*], i32**, i32, i32, %struct.MvLimits, [4 x [256 x i8]], [4 x i32], i32, i32, [4 x [2 x [2 x [6 x [2 x [6 x [12 x i32]]]]]]], i32, i32, i32, i32, i32, [12 x i8], [12 x i64], [4 x %struct.mv], [2 x i8], i8, i8, i8, i8, i32, i32, i32, i32, i32, i8, [25 x i8], i8, i8, void (i16*, i32*, i32)*, void (i32*, i8*, i32, i32)*, void (i32*, i16*, i32, i32, i32)*, [8 x i8], [4096 x i8], %struct.scale_factors*, [8 x i8] }
%struct.macroblock_plane = type { [4096 x i16], i32*, i32*, i16*, %struct.buf_2d, [8 x i8], [8 x i16], i16*, i16*, i16*, i16*, i16*, [2 x i64], [8 x i8] }
%struct.buf_2d = type { i8*, i32 }
%struct.macroblockd = type { [3 x %struct.macroblockd_plane], i8, i8, %struct.FRAME_COUNTS*, %struct.TileInfo, i32, %struct.MODE_INFO**, %struct.MODE_INFO*, %struct.MODE_INFO*, i32, i32, [3 x i8]*, i32, i32, i32, i32, %struct.frame_contexts*, [2 x %struct.RefBuffer*], %struct.yv12_buffer_config*, [3 x i8*], [3 x [16 x i8]], i8*, [8 x i8], i32, i32, i32, %struct.vpx_internal_error_info*, i32* }
%struct.macroblockd_plane = type { i32*, i32, i32, %struct.buf_2d, [2 x %struct.buf_2d], i8*, i8*, [8 x [2 x i16]], i16, i16, i8, i8, i16*, i32* }
%struct.TileInfo = type { i32, i32, i32, i32 }
%struct.MODE_INFO = type { i8, i8, i8, i8, i8, i8, i8, i8, [2 x i8], [2 x %union.int_mv], [4 x %struct.b_mode_info] }
%union.int_mv = type { i32 }
%struct.b_mode_info = type { i8, [2 x %union.int_mv] }
%struct.frame_contexts = type { [4 x [9 x i8]], [10 x [9 x i8]], [16 x [3 x i8]], [4 x [2 x [2 x [6 x [6 x [3 x i8]]]]]], [4 x [2 x i8]], [7 x [3 x i8]], [4 x i8], [5 x i8], [5 x [2 x i8]], [5 x i8], %struct.tx_probs, [3 x i8], %struct.nmv_context, i32 }
%struct.tx_probs = type { [2 x [3 x i8]], [2 x [2 x i8]], [2 x [1 x i8]] }
%struct.nmv_context = type { [3 x i8], [2 x %struct.nmv_component] }
%struct.nmv_component = type { i8, [10 x i8], [1 x i8], [10 x i8], [2 x [3 x i8]], [3 x i8], i8, i8 }
%struct.RefBuffer = type { i32, %struct.yv12_buffer_config*, %struct.scale_factors }
%struct.vpx_internal_error_info = type { i32, i32, [80 x i8], i32, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.MvLimits = type { i32, i32, i32, i32 }
%struct.mv = type { i16, i16 }
%struct.RD_COUNTS = type { [4 x [2 x [2 x [6 x [6 x [12 x i32]]]]]], [3 x i64], [4 x i64] }
%struct.FRAME_COUNTS = type { [4 x [10 x i32]], [10 x [10 x i32]], [16 x [4 x i32]], [4 x [2 x [2 x [6 x [6 x [4 x i32]]]]]], [4 x [2 x [2 x [6 x [6 x i32]]]]], [4 x [3 x i32]], [7 x [4 x i32]], [4 x [2 x i32]], [5 x [2 x i32]], [5 x [2 x [2 x i32]]], [5 x [2 x i32]], %struct.tx_counts, [3 x [2 x i32]], %struct.nmv_context_counts }
%struct.tx_counts = type { [2 x [4 x i32]], [2 x [3 x i32]], [2 x [2 x i32]], [4 x i32] }
%struct.nmv_context_counts = type { [4 x i32], [2 x %struct.nmv_component_counts] }
%struct.nmv_component_counts = type { [2 x i32], [11 x i32], [2 x i32], [10 x [2 x i32]], [2 x [4 x i32]], [4 x i32], [2 x i32], [2 x i32] }
%struct.PC_TREE = type { i32, i32, i8, %struct.PICK_MODE_CONTEXT, [2 x %struct.PICK_MODE_CONTEXT], [2 x %struct.PICK_MODE_CONTEXT], %union.anon, %struct.mv }
%struct.PICK_MODE_CONTEXT = type { %struct.MODE_INFO, %struct.MB_MODE_INFO_EXT, i8*, [3 x [3 x i32*]], [3 x [3 x i32*]], [3 x [3 x i32*]], [3 x [3 x i16*]], [3 x [3 x i32*]], [3 x [3 x i32*]], [3 x [3 x i32*]], [3 x [3 x i16*]], i32, i32, i32, i32, i32, [12 x i8], i32, i32, i32, i32, [4 x i64], i32, i64, i64, i32, i32, i32, i8, %union.int_mv, i8, i8, i32, [4 x %struct.mv], i8, i32, i8 }
%struct.MB_MODE_INFO_EXT = type { [4 x [2 x %union.int_mv]], [4 x i8] }
%union.anon = type { [4 x %struct.PC_TREE*] }
%struct.VP9Common = type { %struct.vpx_internal_error_info, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.yv12_buffer_config*, %struct.RefCntBuffer*, %struct.RefCntBuffer*, [8 x i32], [8 x i32], [3 x %struct.RefBuffer], i32, i32, %struct.yv12_buffer_config, %struct.yv12_buffer_config, i32, i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [8 x [2 x i16]], [8 x [2 x i16]], i32, %struct.MODE_INFO*, %struct.MODE_INFO*, %struct.MODE_INFO*, %struct.MODE_INFO*, i32 (%struct.VP9Common*, i32)*, void (%struct.VP9Common*)*, void (%struct.VP9Common*)*, %struct.MODE_INFO**, %struct.MODE_INFO**, %struct.MODE_INFO**, %struct.MODE_INFO**, i32, i32, i32, [2 x i8*], i8*, i8*, i32, i8, [11 x i8], %struct.loop_filter_info_n, i32, [4 x i32], %struct.loopfilter, %struct.segmentation, i8, [2 x i8], i32, %struct.frame_contexts*, %struct.frame_contexts*, i32, %struct.FRAME_COUNTS, i32, i32, i32, i32, i32, %struct.postproc_state, i32, i32, i32, i32, i32, i32, %struct.BufferPool*, i8*, i8*, i32, i32, [8 x i8] }
%struct.RefCntBuffer = type { i32, %struct.MV_REF*, i32, i32, i8, i32, i32, %struct.vpx_codec_frame_buffer, %struct.yv12_buffer_config }
%struct.MV_REF = type { [2 x %union.int_mv], [2 x i8] }
%struct.vpx_codec_frame_buffer = type { i8*, i64, i8* }
%struct.loop_filter_info_n = type { [64 x %struct.loop_filter_thresh], [8 x [4 x [2 x i8]]] }
%struct.loop_filter_thresh = type { [16 x i8], [16 x i8], [16 x i8] }
%struct.loopfilter = type { i32, i32, i32, i32, i8, i8, [4 x i8], [4 x i8], [2 x i8], [2 x i8], %struct.LOOP_FILTER_MASK*, i32 }
%struct.LOOP_FILTER_MASK = type { [4 x i64], [4 x i64], i64, [4 x i16], [4 x i16], i16, [64 x i8] }
%struct.segmentation = type { i8, i8, i8, i8, i8, [7 x i8], [3 x i8], [8 x [4 x i16]], [8 x i32], i32 }
%struct.postproc_state = type { i32, i32, i32, i32, %struct.MODE_INFO*, %struct.MODE_INFO*, i32, i8*, i8* }
%struct.BufferPool = type { i8*, i32 (i8*, i64, %struct.vpx_codec_frame_buffer*)*, i32 (i8*, %struct.vpx_codec_frame_buffer*)*, [12 x %struct.RefCntBuffer], %struct.InternalFrameBufferList }
%struct.InternalFrameBufferList = type { i32, %struct.InternalFrameBuffer* }
%struct.InternalFrameBuffer = type { i8*, i64, i32 }
%struct.VP9EncoderConfig = type { i32, i32, i32, i32, i32, double, %struct.vpx_rational, %struct.vpx_rational64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [12 x i32], [5 x i32], [5 x i32], [5 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.vpx_fixed_buf, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.vpx_rational = type { i32, i32 }
%struct.vpx_rational64 = type { i64, i32 }
%struct.vpx_fixed_buf = type { i8*, i64 }
%struct.lookahead_ctx = type { i32, i32, i32, i32, i32, %struct.lookahead_entry* }
%struct.lookahead_entry = type { %struct.yv12_buffer_config, i64, i64, i32, i64 }
%struct.TplDepFrame = type { i8, %struct.TplDepStats*, i32, i32, i32, i32, i32, i32 }
%struct.TplDepStats = type { i64, i64, i64, i64, i64, i32, %union.int_mv }
%struct.EncFrameBuf = type { i32, i32, %struct.yv12_buffer_config }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%struct.KMEANS_DATA = type { double, i32, i32 }
%struct.TileDataEnc = type { %struct.TileInfo, [13 x [30 x i32]], [13 x [30 x i8]], %struct.FIRSTPASS_DATA, %struct.VP9RowMTSyncData, i32* }
%struct.FIRSTPASS_DATA = type { double, double, i64, i64, i64, i64, i32, i32, double, double, double, i32, i32, i32, i32, i32, i32, i32, i64, i64, i32, i32 }
%struct.VP9RowMTSyncData = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32, i32 }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon.0, %union.anon.1, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon.0 = type { i64 }
%union.anon.1 = type { i64 }
%struct.TOKENEXTRA = type { i8*, i16, i32 }
%struct.TOKENLIST = type { %struct.TOKENEXTRA*, %struct.TOKENEXTRA*, i32 }
%struct.RD_OPT = type { [30 x i32], [6 x i32], [8 x [13 x [30 x i32]]], [4 x [3 x i64]], [4 x [4 x i64]], i32, i32, double }
%struct.CODING_CONTEXT = type { [4 x i32], [2 x [32767 x i32]], [2 x [32767 x i32]], [3 x i8], i8*, [4 x i8], [2 x i8], %struct.frame_contexts }
%struct.RATE_CONTROL = type { i32, i32, i32, i32, [2 x i32], i32, i32, i32, i32, i32, [5 x double], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [2 x i32], double, double, i64, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, i32, i32, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, [2 x i32], [2 x i32], [5 x i32], i32, i32, [25 x i64], i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, double, i32, i32, i32, i32, i32, [5 x i32], double, i32, i32, i32, i32 }
%struct.vpx_codec_pkt_list = type { i32, i32, [1 x %struct.vpx_codec_cx_pkt] }
%struct.vpx_codec_cx_pkt = type { i32, %union.anon.3 }
%union.anon.3 = type { %struct.anon.4, [40 x i8] }
%struct.anon.4 = type { i8*, i64, i64, i64, i32, i32, [5 x i32], [5 x i32], [5 x i8] }
%struct.MBGRAPH_FRAME_STATS = type { %struct.MBGRAPH_MB_STATS* }
%struct.MBGRAPH_MB_STATS = type { [4 x %struct.anon.5] }
%struct.anon.5 = type { i32, %union.anon.6 }
%union.anon.6 = type { %union.int_mv }
%struct.SPEED_FEATURES = type { %struct.MV_SPEED_FEATURES, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, i32, double, i32, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i8, i8, i32, i32, i8, i8, i8, i32, i32, i32, i32, i32, i32, [4 x %struct.MESH_PATTERN], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i32], [4 x i32], [13 x i32], i32, i32, i32, i32, i32, [13 x i32], i32, i32, i32, i8, i32, i32, i32, i8, i32, i32, i32, %struct.PARTITION_SEARCH_BREAKOUT_THR, %struct.anon.7, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.MV_SPEED_FEATURES = type { i32, i32, i32, i32, i32, i32, i32, %struct.ADAPT_SUBPEL_FORCE_STOP, i32 }
%struct.ADAPT_SUBPEL_FORCE_STOP = type { i32, i32, i32 }
%struct.MESH_PATTERN = type { i32, i32 }
%struct.PARTITION_SEARCH_BREAKOUT_THR = type { i64, i32 }
%struct.anon.7 = type { i32, [3 x float], i32, i32, [4 x i32] }
%struct.CYCLIC_REFRESH = type { i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i64, i64, i16, double, i32, double, [3 x i32], i32, double, i32, i32, i32 }
%struct.ActiveMap = type { i32, i32, i8* }
%struct.vp9_variance_vtable = type { i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32, i8*)*, i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*)*, void (i8*, i32, i8**, i32, i32*)*, void (i8*, i32, i8*, i32, i32*)* }
%struct.scale_factors = type { i32, i32, i32, i32, i32 (i32, %struct.scale_factors*)*, i32 (i32, %struct.scale_factors*)*, [2 x [2 x [2 x void (i8*, i64, i8*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32)*]]], [2 x [2 x [2 x void (i16*, i64, i16*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32, i32)*]]] }
%struct.TWO_PASS = type { i32, i32, %struct.FIRSTPASS_STATS, %struct.FIRSTPASS_STATS, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRST_PASS_INFO, %struct.FIRSTPASS_STATS, i32, i64, double, double, double, double, %struct.FP_MB_FLOAT_STATS*, i32, i64, double, double, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [6 x i32], %struct.GF_GROUP }
%struct.FIRST_PASS_INFO = type { %struct.FIRSTPASS_STATS*, i32 }
%struct.FIRSTPASS_STATS = type { double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, i64 }
%struct.FP_MB_FLOAT_STATS = type { double, double, double }
%struct.GF_GROUP = type { i8, [252 x i32], [252 x i32], [252 x i8], [252 x i8], [252 x i8], [252 x i32], [252 x i32], i32, i32, [50 x i32], i32, i32, i32, i32, i32, i32 }
%struct.yv12_buffer_config = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i8*, i8*, i8*, i64, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.ALT_REF_AQ = type opaque
%struct.SVC = type { i32, i32, i32, i32, i32, i32, %struct.lookahead_entry, i32, [25 x %struct.yv12_buffer_config], %struct.yv12_buffer_config, i32, i32, [12 x %struct.LAYER_CONTEXT], i32, [12 x i32], [12 x i32], [12 x i32], [12 x i32], i32, i32, i32, [2 x %struct.BUFFER_LONGTERM_REF], i32, i32, i32, i32, [5 x i8], [5 x i32], i8*, [12 x i32], [12 x i32], [12 x i32], i32, i32, i32, [12 x i32], [12 x i32], [12 x i32], [12 x i32], [12 x i32], i32, i32, i32, i32, i32, [5 x i32], [5 x i8], [5 x i8], [5 x i8], [5 x i8], [5 x i8], [5 x i8], [5 x i32], [8 x i8], [8 x i8], [5 x i32], i8, i8, i8, [8 x i8], i32, [5 x i32], i32, [5 x i64], i64, i64, [5 x i64], i32, i32, i32, i32 }
%struct.LAYER_CONTEXT = type { %struct.RATE_CONTROL, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, %struct.TWO_PASS, %struct.vpx_fixed_buf, i32, i32, i32, i32, %struct.lookahead_entry*, i32, i32, i32, i64, i32, i8*, i8*, i8*, i32, i32, i32, i8, i32 }
%struct.BUFFER_LONGTERM_REF = type { i32, i32 }
%struct.diff = type { i32, i32, i32 }
%struct.search_site_config = type { [88 x %struct.mv], [88 x i64], i32, i32 }
%struct.vp9_denoiser = type { %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, i32, i32, i32, i32, i32, i32, i32 }
%struct.noise_estimate = type { i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.VPxWorker = type { %struct.VPxWorkerImpl*, i32, i32 (i8*, i8*)*, i8*, i8*, i32 }
%struct.VPxWorkerImpl = type opaque
%struct.EncWorkerData = type { %struct.VP9_COMP*, %struct.ThreadData*, i32, i32, [64 x i32] }
%struct.VP9LfSyncData = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32, i32, %struct.LoopFilterWorkerData*, i32, i32, %union.pthread_mutex_t*, %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32 }
%struct.LoopFilterWorkerData = type { %struct.yv12_buffer_config*, %struct.VP9Common*, [3 x %struct.macroblockd_plane], i32, i32, i32 }
%struct.VP9BitstreamWorkerData = type opaque
%struct.Vp9LevelInfo = type { %struct.Vp9LevelStats, %struct.Vp9LevelSpec }
%struct.Vp9LevelStats = type { i8, i32, i64, i64, double, %struct.FrameWindowBuffer, i32 }
%struct.FrameWindowBuffer = type { [128 x %struct.FrameRecord], i8, i8 }
%struct.FrameRecord = type { i64, i32, i32 }
%struct.Vp9LevelSpec = type { i32, i64, i32, i32, double, double, double, i8, i32, i8 }
%struct.MultiThreadHandle = type { i32, i32, i32, [4 x i32], %struct.JobQueue*, i32, [64 x %struct.RowMTInfo], [80 x i32] }
%struct.JobQueue = type { i8*, %struct.JobNode }
%struct.JobNode = type { i32, i32, i32 }
%struct.RowMTInfo = type { %struct.JobQueueHandle, %union.pthread_mutex_t }
%struct.JobQueueHandle = type { i8*, i32 }
%struct.ARNRFilterData = type { [25 x %struct.yv12_buffer_config*], i32, i32, i32, %struct.scale_factors }
%struct.LevelConstraint = type { i8, i8, i32, double }
%struct.vpx_roi_map = type { i8, i8*, i32, i32, [8 x i32], [8 x i32], [8 x i32], [8 x i32], [4 x i32] }
%struct.EXT_RATECTRL = type { i32, i8*, %struct.vpx_rc_funcs, %struct.vpx_rc_config, %struct.vpx_rc_firstpass_stats }
%struct.vpx_rc_funcs = type { i32 (i8*, %struct.vpx_rc_config*, i8**)*, i32 (i8*, %struct.vpx_rc_firstpass_stats*)*, i32 (i8*, %struct.vpx_rc_encodeframe_info*, %struct.vpx_rc_encodeframe_decision*)*, i32 (i8*, %struct.vpx_rc_encodeframe_result*)*, i32 (i8*)*, i8* }
%struct.vpx_rc_encodeframe_info = type { i32, i32, i32, i32, [3 x i32], [3 x i32] }
%struct.vpx_rc_encodeframe_decision = type { i32 }
%struct.vpx_rc_encodeframe_result = type { i64, i64, i64 }
%struct.vpx_rc_config = type { i32, i32, i32, i32, i32, i32 }
%struct.vpx_rc_firstpass_stats = type { %struct.vpx_rc_frame_stats*, i32 }
%struct.vpx_rc_frame_stats = type { double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double }

@b_height_log2_lookup = external local_unnamed_addr constant [13 x i8], align 1
@b_width_log2_lookup = external local_unnamed_addr constant [13 x i8], align 1
@num_pels_log2_lookup = external local_unnamed_addr constant [13 x i8], align 1
@num_8x8_blocks_wide_lookup = external local_unnamed_addr constant [13 x i8], align 1
@num_8x8_blocks_high_lookup = external local_unnamed_addr constant [13 x i8], align 1
@num_4x4_blocks_wide_lookup = external local_unnamed_addr constant [13 x i8], align 1
@num_4x4_blocks_high_lookup = external local_unnamed_addr constant [13 x i8], align 1
@.str = private unnamed_addr constant [43 x i8] c"Failed to allocate denoiser->running_avg_y\00", align 1
@.str.1 = private unnamed_addr constant [46 x i8] c"Failed to allocate denoiser->mc_running_avg_y\00", align 1
@.str.2 = private unnamed_addr constant [39 x i8] c"Failed to re-allocate denoiser for SVC\00", align 1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @vp9_denoiser_filter_c(i8* nocapture readonly, i32, i8* nocapture readonly, i32, i8* nocapture, i32, i32, i8 zeroext, i32) local_unnamed_addr #0 {
  %10 = icmp slt i32 %8, 25
  br i1 %10, label %11, label %17

11:                                               ; preds = %9
  %12 = icmp eq i32 %6, 0
  %13 = select i1 %12, i32 1, i32 2
  %14 = add nuw nsw i32 %13, 3
  %15 = or i32 %13, 4
  %16 = add nuw nsw i32 %13, 6
  br label %17

17:                                               ; preds = %11, %9
  %18 = phi i32 [ %16, %11 ], [ 6, %9 ]
  %19 = phi i32 [ %15, %11 ], [ 4, %9 ]
  %20 = phi i32 [ %14, %11 ], [ 3, %9 ]
  %21 = zext i8 %7 to i64
  %22 = getelementptr inbounds [13 x i8], [13 x i8]* @b_height_log2_lookup, i64 0, i64 %21
  %23 = load i8, i8* %22, align 1
  %24 = zext i8 %23 to i32
  %25 = shl i32 4, %24
  %26 = icmp sgt i32 %25, 0
  br i1 %26, label %27, label %97

27:                                               ; preds = %17
  %28 = getelementptr inbounds [13 x i8], [13 x i8]* @b_width_log2_lookup, i64 0, i64 %21
  %29 = load i8, i8* %28, align 1
  %30 = zext i8 %29 to i32
  %31 = shl i32 4, %30
  %32 = icmp sgt i32 %31, 0
  %33 = icmp eq i32 %6, 0
  %34 = select i1 %33, i32 3, i32 4
  %35 = sext i32 %1 to i64
  %36 = sext i32 %5 to i64
  %37 = sext i32 %3 to i64
  %38 = sext i32 %31 to i64
  br label %39

39:                                               ; preds = %27, %86
  %40 = phi i32 [ 0, %27 ], [ %87, %86 ]
  %41 = phi i32 [ 0, %27 ], [ %91, %86 ]
  %42 = phi i8* [ %0, %27 ], [ %88, %86 ]
  %43 = phi i8* [ %2, %27 ], [ %90, %86 ]
  %44 = phi i8* [ %4, %27 ], [ %89, %86 ]
  br i1 %32, label %45, label %86

45:                                               ; preds = %39, %82
  %46 = phi i64 [ %84, %82 ], [ 0, %39 ]
  %47 = phi i32 [ %83, %82 ], [ %40, %39 ]
  %48 = getelementptr inbounds i8, i8* %43, i64 %46
  %49 = load i8, i8* %48, align 1
  %50 = zext i8 %49 to i32
  %51 = getelementptr inbounds i8, i8* %42, i64 %46
  %52 = load i8, i8* %51, align 1
  %53 = zext i8 %52 to i32
  %54 = sub nsw i32 %50, %53
  %55 = icmp slt i32 %54, 0
  %56 = sub nsw i32 0, %54
  %57 = select i1 %55, i32 %56, i32 %54
  %58 = icmp sgt i32 %57, %34
  br i1 %58, label %62, label %59

59:                                               ; preds = %45
  %60 = getelementptr inbounds i8, i8* %44, i64 %46
  store i8 %49, i8* %60, align 1
  %61 = add nsw i32 %54, %47
  br label %82

62:                                               ; preds = %45
  switch i32 %57, label %64 [
    i32 4, label %65
    i32 5, label %65
    i32 6, label %65
    i32 7, label %65
    i32 8, label %63
    i32 9, label %63
    i32 10, label %63
    i32 11, label %63
    i32 12, label %63
    i32 13, label %63
    i32 14, label %63
    i32 15, label %63
  ]

63:                                               ; preds = %62, %62, %62, %62, %62, %62, %62, %62
  br label %65

64:                                               ; preds = %62
  br label %65

65:                                               ; preds = %62, %62, %62, %62, %64, %63
  %66 = phi i32 [ %18, %64 ], [ %19, %63 ], [ %20, %62 ], [ %20, %62 ], [ %20, %62 ], [ %20, %62 ]
  %67 = icmp sgt i32 %54, 0
  br i1 %67, label %68, label %75

68:                                               ; preds = %65
  %69 = add nsw i32 %66, %53
  %70 = icmp slt i32 %69, 255
  %71 = select i1 %70, i32 %69, i32 255
  %72 = trunc i32 %71 to i8
  %73 = getelementptr inbounds i8, i8* %44, i64 %46
  store i8 %72, i8* %73, align 1
  %74 = add nsw i32 %66, %47
  br label %82

75:                                               ; preds = %65
  %76 = sub nsw i32 %53, %66
  %77 = icmp sgt i32 %76, 0
  %78 = select i1 %77, i32 %76, i32 0
  %79 = trunc i32 %78 to i8
  %80 = getelementptr inbounds i8, i8* %44, i64 %46
  store i8 %79, i8* %80, align 1
  %81 = sub nsw i32 %47, %66
  br label %82

82:                                               ; preds = %59, %75, %68
  %83 = phi i32 [ %61, %59 ], [ %74, %68 ], [ %81, %75 ]
  %84 = add nuw nsw i64 %46, 1
  %85 = icmp slt i64 %84, %38
  br i1 %85, label %45, label %86

86:                                               ; preds = %82, %39
  %87 = phi i32 [ %40, %39 ], [ %83, %82 ]
  %88 = getelementptr inbounds i8, i8* %42, i64 %35
  %89 = getelementptr inbounds i8, i8* %44, i64 %36
  %90 = getelementptr inbounds i8, i8* %43, i64 %37
  %91 = add nuw nsw i32 %41, 1
  %92 = icmp slt i32 %91, %25
  br i1 %92, label %39, label %93

93:                                               ; preds = %86
  %94 = icmp slt i32 %87, 0
  %95 = sub nsw i32 0, %87
  %96 = select i1 %94, i32 %95, i32 %87
  br label %97

97:                                               ; preds = %93, %17
  %98 = phi i32 [ 0, %17 ], [ %95, %93 ]
  %99 = phi i32 [ 0, %17 ], [ %87, %93 ]
  %100 = phi i32 [ 0, %17 ], [ %96, %93 ]
  %101 = getelementptr inbounds [13 x i8], [13 x i8]* @num_pels_log2_lookup, i64 0, i64 %21
  %102 = load i8, i8* %101, align 1
  %103 = zext i8 %102 to i32
  %104 = icmp eq i32 %6, 0
  %105 = select i1 %104, i32 2, i32 3
  %106 = shl i32 %105, %103
  %107 = icmp sgt i32 %100, %106
  br i1 %107, label %108, label %181

108:                                              ; preds = %97
  %109 = sub nsw i32 %100, %106
  %110 = ashr i32 %109, %103
  %111 = add nsw i32 %110, 1
  %112 = icmp sgt i32 %110, 2
  br i1 %112, label %181, label %113

113:                                              ; preds = %108
  br i1 %26, label %114, label %174

114:                                              ; preds = %113
  %115 = getelementptr inbounds [13 x i8], [13 x i8]* @b_width_log2_lookup, i64 0, i64 %21
  %116 = load i8, i8* %115, align 1
  %117 = zext i8 %116 to i32
  %118 = shl i32 4, %117
  %119 = icmp sgt i32 %118, 0
  %120 = sext i32 %1 to i64
  %121 = sext i32 %5 to i64
  %122 = sext i32 %3 to i64
  %123 = sext i32 %118 to i64
  br label %124

124:                                              ; preds = %165, %114
  %125 = phi i32 [ %99, %114 ], [ %166, %165 ]
  %126 = phi i32 [ 0, %114 ], [ %170, %165 ]
  %127 = phi i8* [ %0, %114 ], [ %167, %165 ]
  %128 = phi i8* [ %2, %114 ], [ %169, %165 ]
  %129 = phi i8* [ %4, %114 ], [ %168, %165 ]
  br i1 %119, label %130, label %165

130:                                              ; preds = %124, %161
  %131 = phi i64 [ %163, %161 ], [ 0, %124 ]
  %132 = phi i32 [ %162, %161 ], [ %125, %124 ]
  %133 = getelementptr inbounds i8, i8* %128, i64 %131
  %134 = load i8, i8* %133, align 1
  %135 = zext i8 %134 to i32
  %136 = getelementptr inbounds i8, i8* %127, i64 %131
  %137 = load i8, i8* %136, align 1
  %138 = zext i8 %137 to i32
  %139 = sub nsw i32 %135, %138
  %140 = icmp slt i32 %139, 0
  %141 = sub nsw i32 0, %139
  %142 = select i1 %140, i32 %141, i32 %139
  %143 = icmp sgt i32 %142, %111
  %144 = select i1 %143, i32 %111, i32 %142
  %145 = icmp sgt i32 %139, 0
  %146 = getelementptr inbounds i8, i8* %129, i64 %131
  %147 = load i8, i8* %146, align 1
  %148 = zext i8 %147 to i32
  br i1 %145, label %149, label %155

149:                                              ; preds = %130
  %150 = sub nsw i32 %148, %144
  %151 = icmp sgt i32 %150, 0
  %152 = select i1 %151, i32 %150, i32 0
  %153 = trunc i32 %152 to i8
  store i8 %153, i8* %146, align 1
  %154 = sub nsw i32 %132, %144
  br label %161

155:                                              ; preds = %130
  %156 = add nsw i32 %144, %148
  %157 = icmp slt i32 %156, 255
  %158 = select i1 %157, i32 %156, i32 255
  %159 = trunc i32 %158 to i8
  store i8 %159, i8* %146, align 1
  %160 = add nsw i32 %144, %132
  br label %161

161:                                              ; preds = %149, %155
  %162 = phi i32 [ %154, %149 ], [ %160, %155 ]
  %163 = add nuw nsw i64 %131, 1
  %164 = icmp slt i64 %163, %123
  br i1 %164, label %130, label %165

165:                                              ; preds = %161, %124
  %166 = phi i32 [ %125, %124 ], [ %162, %161 ]
  %167 = getelementptr inbounds i8, i8* %127, i64 %120
  %168 = getelementptr inbounds i8, i8* %129, i64 %121
  %169 = getelementptr inbounds i8, i8* %128, i64 %122
  %170 = add nuw nsw i32 %126, 1
  %171 = icmp eq i32 %170, %25
  br i1 %171, label %172, label %124

172:                                              ; preds = %165
  %173 = sub nsw i32 0, %166
  br label %174

174:                                              ; preds = %172, %113
  %175 = phi i32 [ %173, %172 ], [ %98, %113 ]
  %176 = phi i32 [ %166, %172 ], [ %99, %113 ]
  %177 = icmp slt i32 %176, 0
  %178 = select i1 %177, i32 %175, i32 %176
  %179 = icmp sle i32 %178, %106
  %180 = zext i1 %179 to i32
  br label %181

181:                                              ; preds = %174, %108, %97
  %182 = phi i32 [ 1, %97 ], [ 0, %108 ], [ %180, %174 ]
  ret i32 %182
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_denoiser_denoise(%struct.VP9_COMP*, %struct.macroblock*, i32, i32, i8 zeroext, %struct.PICK_MODE_CONTEXT* nocapture, i32* nocapture, i32) local_unnamed_addr #2 {
  %9 = alloca %struct.MODE_INFO, align 4
  %10 = alloca [3 x %struct.buf_2d], align 16
  %11 = alloca [3 x %struct.buf_2d], align 16
  %12 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 2
  %13 = load i32, i32* %12, align 8
  %14 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 0
  %15 = load i32, i32* %14, align 16
  %16 = sub nsw i32 %13, %15
  %17 = icmp eq i32 %16, 2
  br i1 %17, label %18, label %22

18:                                               ; preds = %8
  %19 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 117, i32 5
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  br label %22

22:                                               ; preds = %8, %18
  %23 = phi i64 [ %21, %18 ], [ 0, %8 ]
  %24 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 117, i32 0
  %25 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %24, align 8
  %26 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %25, i64 %23, i32 4
  %27 = load i32, i32* %26, align 8
  %28 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %25, i64 %23, i32 13
  %29 = load i8*, i8** %28, align 8
  %30 = xor i32 %15, -1
  %31 = add i32 %13, %30
  %32 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 117, i32 1
  %33 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %32, align 8
  %34 = sext i32 %31 to i64
  %35 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %33, i64 %34, i32 4
  %36 = load i32, i32* %35, align 8
  %37 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %33, i64 %34, i32 13
  %38 = load i8*, i8** %37, align 8
  %39 = shl i32 %2, 3
  %40 = mul i32 %39, %27
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i8, i8* %29, i64 %41
  %43 = shl i32 %3, 3
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds i8, i8* %42, i64 %44
  %46 = mul i32 %39, %36
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds i8, i8* %38, i64 %47
  %49 = getelementptr inbounds i8, i8* %48, i64 %44
  %50 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 0, i32 4, i32 0
  %51 = load i8*, i8** %50, align 8
  %52 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 0, i32 4, i32 1
  %53 = load i32, i32* %52, align 8
  %54 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 74
  %55 = load i32, i32* %54, align 16
  %56 = and i32 %55, 1
  %57 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %5, i64 0, i32 29
  %58 = bitcast %union.int_mv* %57 to %struct.mv*
  %59 = getelementptr inbounds %struct.mv, %struct.mv* %58, i64 0, i32 1
  %60 = load i16, i16* %59, align 2
  %61 = sext i16 %60 to i32
  %62 = bitcast %union.int_mv* %57 to i16*
  %63 = load i16, i16* %62, align 8
  %64 = sext i16 %63 to i32
  %65 = mul nsw i32 %64, %64
  %66 = mul nsw i32 %61, %61
  %67 = add nuw nsw i32 %65, %66
  %68 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 126
  %69 = load i32, i32* %68, align 16
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %144, label %71

71:                                               ; preds = %22
  %72 = zext i8 %4 to i32
  %73 = icmp ult i8 %4, 10
  br i1 %73, label %74, label %144

74:                                               ; preds = %71
  %75 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 117, i32 8
  %76 = load i32, i32* %75, align 4
  %77 = icmp ult i32 %76, 3
  br i1 %77, label %78, label %144

78:                                               ; preds = %74
  %79 = icmp ult i32 %67, 16
  %80 = xor i1 %79, true
  %81 = zext i1 %80 to i32
  br i1 %79, label %82, label %134

82:                                               ; preds = %78
  %83 = zext i8 %4 to i64
  %84 = getelementptr inbounds [13 x i8], [13 x i8]* @num_8x8_blocks_wide_lookup, i64 0, i64 %83
  %85 = load i8, i8* %84, align 1
  %86 = zext i8 %85 to i32
  %87 = getelementptr inbounds [13 x i8], [13 x i8]* @num_8x8_blocks_high_lookup, i64 0, i64 %83
  %88 = load i8, i8* %87, align 1
  %89 = zext i8 %88 to i32
  %90 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 35
  %91 = load i32, i32* %90, align 8
  %92 = sub nsw i32 %91, %3
  %93 = icmp slt i32 %92, %86
  %94 = select i1 %93, i32 %92, i32 %86
  %95 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 33
  %96 = load i32, i32* %95, align 16
  %97 = sub nsw i32 %96, %2
  %98 = icmp slt i32 %97, %89
  %99 = select i1 %98, i32 %97, i32 %89
  %100 = icmp sgt i32 %99, 0
  br i1 %100, label %101, label %134

101:                                              ; preds = %82
  %102 = icmp sgt i32 %94, 0
  %103 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 129
  br label %104

104:                                              ; preds = %101, %129
  %105 = phi i32 [ 0, %101 ], [ %132, %129 ]
  %106 = phi i32 [ 100, %101 ], [ %130, %129 ]
  br i1 %102, label %107, label %129

107:                                              ; preds = %104
  %108 = load i8*, i8** %103, align 16
  br label %109

109:                                              ; preds = %109, %107
  %110 = phi i32 [ %105, %107 ], [ %124, %109 ]
  %111 = phi i32 [ 0, %107 ], [ %125, %109 ]
  %112 = phi i32 [ %106, %107 ], [ %122, %109 ]
  %113 = add i32 %110, %2
  %114 = mul i32 %113, %91
  %115 = add i32 %111, %3
  %116 = add i32 %115, %114
  %117 = sext i32 %116 to i64
  %118 = getelementptr inbounds i8, i8* %108, i64 %117
  %119 = load i8, i8* %118, align 1
  %120 = zext i8 %119 to i32
  %121 = icmp sgt i32 %112, %120
  %122 = select i1 %121, i32 %120, i32 %112
  %123 = icmp slt i32 %122, 4
  %124 = select i1 %123, i32 %99, i32 %110
  %125 = add nuw nsw i32 %111, 1
  %126 = xor i1 %123, true
  %127 = icmp slt i32 %125, %94
  %128 = and i1 %127, %126
  br i1 %128, label %109, label %129

129:                                              ; preds = %109, %104
  %130 = phi i32 [ %106, %104 ], [ %122, %109 ]
  %131 = phi i32 [ %105, %104 ], [ %124, %109 ]
  %132 = add nsw i32 %131, 1
  %133 = icmp slt i32 %132, %99
  br i1 %133, label %104, label %134

134:                                              ; preds = %129, %82, %78
  %135 = phi i32 [ 0, %78 ], [ 100, %82 ], [ %130, %129 ]
  %136 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 1, i32 4, i32 0
  %137 = load i8*, i8** %136, align 8
  %138 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 2, i32 4, i32 0
  %139 = load i8*, i8** %138, align 8
  %140 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 1, i32 4, i32 1
  %141 = load i32, i32* %140, align 8
  %142 = tail call i32 @vp9_compute_skin_block(i8* %51, i8* %137, i8* %139, i32 %53, i32 %141, i32 %72, i32 %135, i32 %81) #6
  %143 = icmp eq i32 %142, 0
  br i1 %143, label %144, label %150

144:                                              ; preds = %22, %71, %74, %134
  %145 = phi i32 [ %135, %134 ], [ 0, %74 ], [ 0, %71 ], [ 0, %22 ]
  %146 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 117, i32 8
  %147 = load i32, i32* %146, align 4
  %148 = icmp eq i32 %147, 3
  %149 = zext i1 %148 to i32
  br label %150

150:                                              ; preds = %144, %134
  %151 = phi i1 [ false, %134 ], [ true, %144 ]
  %152 = phi i32 [ %135, %134 ], [ %145, %144 ]
  %153 = phi i32 [ 0, %134 ], [ %149, %144 ]
  %154 = icmp eq i32 %56, 0
  br i1 %154, label %450, label %155

155:                                              ; preds = %150
  %156 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 117, i32 8
  %157 = load i32, i32* %156, align 4
  %158 = icmp eq i32 %157, 0
  br i1 %158, label %450, label %159

159:                                              ; preds = %155
  %160 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %5, i64 0, i32 32
  %161 = load i32, i32* %160, align 8
  %162 = icmp eq i32 %161, 0
  br i1 %162, label %163, label %450

163:                                              ; preds = %159
  %164 = load i32, i32* %12, align 8
  %165 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 12
  %166 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %165, align 8
  %167 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %166, i64 0, i32 0
  %168 = load i32, i32* %167, align 8
  %169 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 36
  %170 = load i32, i32* %169, align 4
  %171 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 37
  %172 = load i32, i32* %171, align 16
  %173 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 103
  %174 = load i32, i32* %173, align 4
  %175 = load i32, i32* %14, align 16
  %176 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %5, i64 0, i32 25
  %177 = load i32, i32* %176, align 8
  %178 = icmp eq i32 %177, -1
  br i1 %178, label %183, label %179

179:                                              ; preds = %163
  %180 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %5, i64 0, i32 26
  %181 = load i32, i32* %180, align 4
  %182 = sub nsw i32 %181, %177
  br label %183

183:                                              ; preds = %179, %163
  %184 = phi i32 [ %182, %179 ], [ 0, %163 ]
  %185 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1
  %186 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 6
  %187 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %186, align 8
  %188 = load %struct.MODE_INFO*, %struct.MODE_INFO** %187, align 8
  %189 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %9, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 68, i8* nonnull %189)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %189, i8 -86, i64 68, i1 false)
  %190 = bitcast [3 x %struct.buf_2d]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %190)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %190, i8 -86, i64 48, i1 false)
  %191 = bitcast [3 x %struct.buf_2d]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %191)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %191, i8 -86, i64 48, i1 false)
  %192 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %5, i64 0, i32 30
  %193 = load i8, i8* %192, align 4
  %194 = sext i8 %193 to i32
  %195 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %188, i64 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %189, i8* align 4 %195, i64 68, i1 false) #6
  br i1 %151, label %200, label %196

196:                                              ; preds = %183
  %197 = icmp ne i32 %67, 0
  %198 = icmp slt i32 %152, 4
  %199 = or i1 %197, %198
  br i1 %199, label %320, label %200

200:                                              ; preds = %196, %183
  %201 = add i8 %4, -3
  %202 = icmp ult i8 %201, 3
  br i1 %202, label %320, label %203

203:                                              ; preds = %200
  %204 = icmp eq i8 %4, 6
  %205 = icmp sgt i32 %168, 480
  %206 = and i1 %204, %205
  %207 = icmp ult i32 %157, 2
  %208 = and i1 %206, %207
  br i1 %208, label %320, label %209

209:                                              ; preds = %203
  switch i8 %193, label %210 [
    i8 3, label %232
    i8 2, label %232
    i8 0, label %232
  ]

210:                                              ; preds = %209
  %211 = icmp ugt i32 %67, 625
  br i1 %211, label %212, label %214

212:                                              ; preds = %210
  %213 = icmp eq i32 %153, 0
  br i1 %213, label %221, label %214

214:                                              ; preds = %210, %212
  %215 = phi i32 [ 4, %212 ], [ 16, %210 ]
  %216 = zext i8 %4 to i64
  %217 = getelementptr inbounds [13 x i8], [13 x i8]* @num_pels_log2_lookup, i64 0, i64 %216
  %218 = load i8, i8* %217, align 1
  %219 = zext i8 %218 to i32
  %220 = shl i32 %215, %219
  br label %221

221:                                              ; preds = %214, %212
  %222 = phi i32 [ 0, %212 ], [ %220, %214 ]
  %223 = icmp sgt i32 %184, %222
  br i1 %223, label %224, label %232

224:                                              ; preds = %221
  %225 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %188, i64 0, i32 8, i64 0
  store i8 %193, i8* %225, align 4
  %226 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %5, i64 0, i32 28
  %227 = load i8, i8* %226, align 4
  %228 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %188, i64 0, i32 1
  store i8 %227, i8* %228, align 1
  %229 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %5, i64 0, i32 29, i32 0
  %230 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %188, i64 0, i32 9, i64 0, i32 0
  %231 = load i32, i32* %229, align 8
  store i32 %231, i32* %230, align 4
  br label %274

232:                                              ; preds = %221, %209, %209, %209
  %233 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %5, i64 0, i32 31
  %234 = load i8, i8* %233, align 1
  %235 = sext i8 %234 to i32
  %236 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %5, i64 0, i32 26
  %237 = load i32, i32* %236, align 4
  store i32 %237, i32* %176, align 8
  %238 = icmp slt i32 %164, 2
  %239 = icmp ne i32 %7, 0
  %240 = or i1 %239, %238
  %241 = xor i1 %240, true
  %242 = icmp eq i8 %234, 3
  %243 = or i1 %242, %241
  %244 = icmp eq i8 %234, 2
  %245 = and i1 %239, %244
  %246 = or i1 %243, %245
  br i1 %246, label %247, label %250

247:                                              ; preds = %232
  %248 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %5, i64 0, i32 27
  %249 = load i32, i32* %248, align 8
  br label %261

250:                                              ; preds = %232
  %251 = icmp eq i8 %234, 1
  br i1 %251, label %263, label %252

252:                                              ; preds = %250
  %253 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %5, i64 0, i32 27
  %254 = load i32, i32* %253, align 8
  %255 = mul i32 %237, 5
  %256 = lshr i32 %255, 2
  %257 = icmp ult i32 %254, %256
  br i1 %257, label %261, label %258

258:                                              ; preds = %252
  %259 = load i32, i32* %156, align 4
  %260 = icmp ugt i32 %259, 2
  br i1 %260, label %261, label %263

261:                                              ; preds = %258, %252, %247
  %262 = phi i32 [ %249, %247 ], [ %254, %258 ], [ %254, %252 ]
  store i32 %262, i32* %176, align 8
  br label %263

263:                                              ; preds = %261, %258, %250
  %264 = phi i32 [ 1, %261 ], [ %235, %258 ], [ 1, %250 ]
  %265 = trunc i32 %264 to i8
  %266 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %188, i64 0, i32 8, i64 0
  store i8 %265, i8* %266, align 4
  %267 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %188, i64 0, i32 1
  store i8 12, i8* %267, align 1
  %268 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %188, i64 0, i32 9, i64 0, i32 0
  store i32 0, i32* %268, align 4
  %269 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %5, i64 0, i32 28
  store i8 12, i8* %269, align 4
  %270 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %5, i64 0, i32 29, i32 0
  store i32 0, i32* %270, align 8
  %271 = load i32, i32* %156, align 4
  %272 = icmp ugt i32 %271, 2
  %273 = select i1 %272, i32 0, i32 %67
  br label %274

274:                                              ; preds = %263, %224
  %275 = phi i32 [ 0, %224 ], [ 1, %263 ]
  %276 = phi i8 [ %193, %224 ], [ %265, %263 ]
  %277 = phi i32 [ %67, %224 ], [ %273, %263 ]
  %278 = phi i32 [ %194, %224 ], [ %264, %263 ]
  %279 = icmp eq i32 %174, 0
  br i1 %279, label %297, label %280

280:                                              ; preds = %274
  switch i32 %278, label %285 [
    i32 1, label %281
    i32 2, label %283
  ]

281:                                              ; preds = %280
  %282 = add nsw i32 %170, 1
  br label %285

283:                                              ; preds = %280
  %284 = add nsw i32 %172, 1
  br label %285

285:                                              ; preds = %283, %281, %280
  %286 = phi i32 [ %282, %281 ], [ %284, %283 ], [ %278, %280 ]
  %287 = sub nsw i32 %164, %175
  %288 = icmp eq i32 %287, 2
  br i1 %288, label %289, label %293

289:                                              ; preds = %285
  %290 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 117, i32 5
  %291 = load i32, i32* %290, align 8
  %292 = add nsw i32 %291, %286
  br label %293

293:                                              ; preds = %289, %285
  %294 = phi i32 [ %292, %289 ], [ %286, %285 ]
  %295 = add nsw i32 %287, -1
  %296 = sext i32 %295 to i64
  br label %297

297:                                              ; preds = %293, %274
  %298 = phi i32 [ %294, %293 ], [ %278, %274 ]
  %299 = phi i64 [ %296, %293 ], [ 0, %274 ]
  %300 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %24, align 8
  %301 = sext i32 %298 to i64
  %302 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %300, i64 %301, i32 17
  %303 = load i8*, i8** %302, align 8
  %304 = icmp eq i8* %303, null
  br i1 %304, label %305, label %306

305:                                              ; preds = %297
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %195, i8* nonnull align 4 %189, i64 68, i1 false) #6
  br label %320

306:                                              ; preds = %297
  %307 = load i32, i32* %176, align 8
  %308 = zext i8 %4 to i64
  %309 = getelementptr inbounds [13 x i8], [13 x i8]* @num_pels_log2_lookup, i64 0, i64 %308
  %310 = load i8, i8* %309, align 1
  %311 = zext i8 %310 to i32
  %312 = icmp eq i32 %153, 0
  %313 = select i1 %312, i32 40, i32 80
  %314 = shl i32 %313, %311
  %315 = icmp ugt i32 %307, %314
  br i1 %315, label %316, label %317

316:                                              ; preds = %306
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %195, i8* nonnull align 4 %189, i64 68, i1 false) #6
  br label %320

317:                                              ; preds = %306
  %318 = icmp sgt i32 %277, 5000
  br i1 %318, label %319, label %322

319:                                              ; preds = %317
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %195, i8* nonnull align 4 %189, i64 68, i1 false) #6
  br label %320

320:                                              ; preds = %203, %200, %305, %316, %319, %196
  %321 = phi i32 [ 0, %196 ], [ %275, %319 ], [ %275, %316 ], [ %275, %305 ], [ 0, %200 ], [ 0, %203 ]
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %191)
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %190)
  call void @llvm.lifetime.end.p0i8(i64 68, i8* nonnull %189)
  br label %450

322:                                              ; preds = %317
  %323 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 0, i64 0, i32 4, i64 0
  %324 = bitcast %struct.buf_2d* %323 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %191, i8* align 8 %324, i64 16, i1 false) #6
  %325 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 0, i64 0, i32 3
  %326 = bitcast %struct.buf_2d* %325 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %190, i8* align 8 %326, i64 16, i1 false) #6
  %327 = getelementptr inbounds [3 x %struct.buf_2d], [3 x %struct.buf_2d]* %11, i64 0, i64 1
  %328 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 0, i64 1, i32 4, i64 0
  %329 = bitcast %struct.buf_2d* %327 to i8*
  %330 = bitcast %struct.buf_2d* %328 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %329, i8* align 8 %330, i64 16, i1 false) #6
  %331 = getelementptr inbounds [3 x %struct.buf_2d], [3 x %struct.buf_2d]* %10, i64 0, i64 1
  %332 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 0, i64 1, i32 3
  %333 = bitcast %struct.buf_2d* %331 to i8*
  %334 = bitcast %struct.buf_2d* %332 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %333, i8* align 8 %334, i64 16, i1 false) #6
  %335 = getelementptr inbounds [3 x %struct.buf_2d], [3 x %struct.buf_2d]* %11, i64 0, i64 2
  %336 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 0, i64 2, i32 4, i64 0
  %337 = bitcast %struct.buf_2d* %335 to i8*
  %338 = bitcast %struct.buf_2d* %336 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %337, i8* align 8 %338, i64 16, i1 false) #6
  %339 = getelementptr inbounds [3 x %struct.buf_2d], [3 x %struct.buf_2d]* %10, i64 0, i64 2
  %340 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 0, i64 2, i32 3
  %341 = bitcast %struct.buf_2d* %339 to i8*
  %342 = bitcast %struct.buf_2d* %340 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %341, i8* align 8 %342, i64 16, i1 false) #6
  %343 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 17, i64 0
  %344 = bitcast %struct.RefBuffer** %343 to i64*
  %345 = load i64, i64* %344, align 8
  %346 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %300, i64 %301, i32 13
  %347 = load i8*, i8** %346, align 8
  %348 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %300, i64 %301, i32 4
  %349 = load i32, i32* %348, align 8
  %350 = mul i32 %349, %39
  %351 = sext i32 %350 to i64
  %352 = getelementptr inbounds i8, i8* %347, i64 %351
  %353 = getelementptr inbounds i8, i8* %352, i64 %44
  %354 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 0, i64 0, i32 4, i64 0, i32 0
  store i8* %353, i8** %354, align 8
  %355 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %24, align 8
  %356 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %355, i64 %301, i32 4
  %357 = load i32, i32* %356, align 8
  %358 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 0, i64 0, i32 4, i64 0, i32 1
  store i32 %357, i32* %358, align 8
  %359 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %24, align 8
  %360 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %359, i64 %301, i32 14
  %361 = load i8*, i8** %360, align 8
  %362 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %359, i64 %301, i32 9
  %363 = load i32, i32* %362, align 4
  %364 = mul i32 %363, %39
  %365 = sext i32 %364 to i64
  %366 = getelementptr inbounds i8, i8* %361, i64 %365
  %367 = getelementptr inbounds i8, i8* %366, i64 %44
  %368 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 0, i64 1, i32 4, i64 0, i32 0
  store i8* %367, i8** %368, align 8
  %369 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %24, align 8
  %370 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %369, i64 %301, i32 9
  %371 = load i32, i32* %370, align 4
  %372 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 0, i64 1, i32 4, i64 0, i32 1
  store i32 %371, i32* %372, align 8
  %373 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %24, align 8
  %374 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %373, i64 %301, i32 15
  %375 = load i8*, i8** %374, align 8
  %376 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %373, i64 %301, i32 9
  %377 = load i32, i32* %376, align 4
  %378 = mul i32 %377, %39
  %379 = sext i32 %378 to i64
  %380 = getelementptr inbounds i8, i8* %375, i64 %379
  %381 = getelementptr inbounds i8, i8* %380, i64 %44
  %382 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 0, i64 2, i32 4, i64 0, i32 0
  store i8* %381, i8** %382, align 8
  %383 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %24, align 8
  %384 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %383, i64 %301, i32 9
  %385 = load i32, i32* %384, align 4
  %386 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 0, i64 2, i32 4, i64 0, i32 1
  store i32 %385, i32* %386, align 8
  %387 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %32, align 8
  %388 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %387, i64 %299, i32 13
  %389 = load i8*, i8** %388, align 8
  %390 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %387, i64 %299, i32 4
  %391 = load i32, i32* %390, align 8
  %392 = mul i32 %391, %39
  %393 = sext i32 %392 to i64
  %394 = getelementptr inbounds i8, i8* %389, i64 %393
  %395 = getelementptr inbounds i8, i8* %394, i64 %44
  %396 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 0, i64 0, i32 3, i32 0
  store i8* %395, i8** %396, align 8
  %397 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %32, align 8
  %398 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %397, i64 %299, i32 4
  %399 = load i32, i32* %398, align 8
  %400 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 0, i64 0, i32 3, i32 1
  store i32 %399, i32* %400, align 8
  %401 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %32, align 8
  %402 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %401, i64 %299, i32 14
  %403 = load i8*, i8** %402, align 8
  %404 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %401, i64 %299, i32 9
  %405 = load i32, i32* %404, align 4
  %406 = mul i32 %405, %39
  %407 = sext i32 %406 to i64
  %408 = getelementptr inbounds i8, i8* %403, i64 %407
  %409 = getelementptr inbounds i8, i8* %408, i64 %44
  %410 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 0, i64 1, i32 3, i32 0
  store i8* %409, i8** %410, align 8
  %411 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %32, align 8
  %412 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %411, i64 %299, i32 9
  %413 = load i32, i32* %412, align 4
  %414 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 0, i64 1, i32 3, i32 1
  store i32 %413, i32* %414, align 8
  %415 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %32, align 8
  %416 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %415, i64 %299, i32 15
  %417 = load i8*, i8** %416, align 8
  %418 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %415, i64 %299, i32 9
  %419 = load i32, i32* %418, align 4
  %420 = mul i32 %419, %39
  %421 = sext i32 %420 to i64
  %422 = getelementptr inbounds i8, i8* %417, i64 %421
  %423 = getelementptr inbounds i8, i8* %422, i64 %44
  %424 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 0, i64 2, i32 3, i32 0
  store i8* %423, i8** %424, align 8
  %425 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %32, align 8
  %426 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %425, i64 %299, i32 9
  %427 = load i32, i32* %426, align 4
  %428 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 0, i64 2, i32 3, i32 1
  store i32 %427, i32* %428, align 8
  %429 = sext i8 %276 to i64
  %430 = icmp sgt i8 %276, 0
  %431 = add nsw i64 %429, -1
  %432 = select i1 %430, i64 %431, i64 0
  %433 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 17, i64 %432
  store %struct.RefBuffer* %433, %struct.RefBuffer** %343, align 8
  %434 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 17, i64 0
  %435 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 17, i64 1
  store %struct.RefBuffer* %434, %struct.RefBuffer** %435, align 8
  tail call void @vp9_build_inter_predictors_sby(%struct.macroblockd* %185, i32 %2, i32 %3, i8 zeroext %4) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %195, i8* nonnull align 4 %189, i64 68, i1 false) #6
  store i64 %345, i64* %344, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %324, i8* nonnull align 16 %191, i64 16, i1 false) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %326, i8* nonnull align 16 %190, i64 16, i1 false) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %330, i8* align 16 %329, i64 16, i1 false) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %334, i8* align 16 %333, i64 16, i1 false) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %338, i8* align 16 %337, i64 16, i1 false) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %342, i8* align 16 %341, i64 16, i1 false) #6
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %191)
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %190)
  call void @llvm.lifetime.end.p0i8(i64 68, i8* nonnull %189)
  %436 = tail call i32 @vp9_denoiser_filter_sse2(i8* %51, i32 %53, i8* %49, i32 %36, i8* %45, i32 %27, i32 %153, i8 zeroext %4, i32 %67) #6
  %437 = icmp eq i32 %436, 1
  br i1 %437, label %438, label %450

438:                                              ; preds = %322
  %439 = sext i32 %27 to i64
  %440 = sext i32 %53 to i64
  %441 = zext i8 %4 to i64
  %442 = getelementptr inbounds [13 x i8], [13 x i8]* @num_4x4_blocks_wide_lookup, i64 0, i64 %441
  %443 = load i8, i8* %442, align 1
  %444 = zext i8 %443 to i32
  %445 = shl nuw nsw i32 %444, 2
  %446 = getelementptr inbounds [13 x i8], [13 x i8]* @num_4x4_blocks_high_lookup, i64 0, i64 %441
  %447 = load i8, i8* %446, align 1
  %448 = zext i8 %447 to i32
  %449 = shl nuw nsw i32 %448, 2
  tail call void @vpx_convolve_copy_sse2(i8* %45, i64 %439, i8* %51, i64 %440, [8 x i16]* null, i32 0, i32 0, i32 0, i32 0, i32 %445, i32 %449) #6
  br label %464

450:                                              ; preds = %320, %150, %155, %159, %322
  %451 = phi i32 [ %436, %322 ], [ 0, %159 ], [ 0, %155 ], [ 0, %150 ], [ 0, %320 ]
  %452 = phi i32 [ %275, %322 ], [ 0, %159 ], [ 0, %155 ], [ 0, %150 ], [ %321, %320 ]
  %453 = sext i32 %53 to i64
  %454 = sext i32 %27 to i64
  %455 = zext i8 %4 to i64
  %456 = getelementptr inbounds [13 x i8], [13 x i8]* @num_4x4_blocks_wide_lookup, i64 0, i64 %455
  %457 = load i8, i8* %456, align 1
  %458 = zext i8 %457 to i32
  %459 = shl nuw nsw i32 %458, 2
  %460 = getelementptr inbounds [13 x i8], [13 x i8]* @num_4x4_blocks_high_lookup, i64 0, i64 %455
  %461 = load i8, i8* %460, align 1
  %462 = zext i8 %461 to i32
  %463 = shl nuw nsw i32 %462, 2
  tail call void @vpx_convolve_copy_sse2(i8* %51, i64 %453, i8* %45, i64 %454, [8 x i16]* null, i32 0, i32 0, i32 0, i32 0, i32 %459, i32 %463) #6
  br label %464

464:                                              ; preds = %450, %438
  %465 = phi i1 [ false, %450 ], [ true, %438 ]
  %466 = phi i32 [ %451, %450 ], [ 1, %438 ]
  %467 = phi i32 [ %452, %450 ], [ %275, %438 ]
  %468 = icmp eq i32 %467, 1
  %469 = and i1 %465, %468
  %470 = select i1 %469, i32 2, i32 %466
  store i32 %470, i32* %6, align 4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare i32 @vp9_compute_skin_block(i8*, i8*, i8*, i32, i32, i32, i32, i32) local_unnamed_addr #3

declare i32 @vp9_denoiser_filter_sse2(i8*, i32, i8*, i32, i8*, i32, i32, i8 zeroext, i32) local_unnamed_addr #3

declare void @vpx_convolve_copy_sse2(i8*, i64, i8*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_denoiser_update_frame_info(%struct.vp9_denoiser* nocapture, %struct.yv12_buffer_config* nocapture readonly byval(%struct.yv12_buffer_config) align 8, %struct.SVC* nocapture readonly, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32) local_unnamed_addr #2 {
  %14 = icmp eq i32 %12, 0
  br i1 %14, label %18, label %15

15:                                               ; preds = %13
  %16 = getelementptr inbounds %struct.vp9_denoiser, %struct.vp9_denoiser* %0, i64 0, i32 5
  %17 = load i32, i32* %16, align 8
  br label %18

18:                                               ; preds = %13, %15
  %19 = phi i32 [ %17, %15 ], [ 0, %13 ]
  %20 = icmp eq i32 %3, 0
  %21 = icmp ne i32 %10, 0
  %22 = or i1 %20, %21
  br i1 %22, label %28, label %23

23:                                               ; preds = %18
  %24 = getelementptr inbounds %struct.vp9_denoiser, %struct.vp9_denoiser* %0, i64 0, i32 4
  %25 = load i32, i32* %24, align 4
  %26 = or i32 %25, %11
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %79, label %28

28:                                               ; preds = %23, %18
  %29 = getelementptr inbounds %struct.vp9_denoiser, %struct.vp9_denoiser* %0, i64 0, i32 5
  %30 = load i32, i32* %29, align 8
  %31 = icmp sgt i32 %30, 1
  br i1 %31, label %32, label %77

32:                                               ; preds = %28
  %33 = getelementptr inbounds %struct.vp9_denoiser, %struct.vp9_denoiser* %0, i64 0, i32 0
  %34 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 13
  %35 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 4
  %36 = sext i32 %19 to i64
  br label %37

37:                                               ; preds = %32, %72
  %38 = phi i32 [ %30, %32 ], [ %73, %72 ]
  %39 = phi i64 [ 1, %32 ], [ %74, %72 ]
  %40 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %33, align 8
  %41 = add nsw i64 %39, %36
  %42 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %40, i64 %41, i32 17
  %43 = load i8*, i8** %42, align 8
  %44 = icmp eq i8* %43, null
  br i1 %44, label %72, label %45

45:                                               ; preds = %37
  %46 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %40, i64 %41, i32 1
  %47 = load i32, i32* %46, align 4
  %48 = icmp sgt i32 %47, 0
  br i1 %48, label %49, label %72

49:                                               ; preds = %45
  %50 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %40, i64 %41, i32 13
  %51 = load i8*, i8** %50, align 8
  %52 = load i8*, i8** %34, align 8
  %53 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %40, i64 %41, i32 0
  %54 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %40, i64 %41, i32 4
  br label %55

55:                                               ; preds = %55, %49
  %56 = phi i8* [ %51, %49 ], [ %63, %55 ]
  %57 = phi i8* [ %52, %49 ], [ %66, %55 ]
  %58 = phi i32 [ 0, %49 ], [ %67, %55 ]
  %59 = load i32, i32* %53, align 8
  %60 = sext i32 %59 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %56, i8* align 1 %57, i64 %60, i1 false) #6
  %61 = load i32, i32* %54, align 8
  %62 = sext i32 %61 to i64
  %63 = getelementptr inbounds i8, i8* %56, i64 %62
  %64 = load i32, i32* %35, align 8
  %65 = sext i32 %64 to i64
  %66 = getelementptr inbounds i8, i8* %57, i64 %65
  %67 = add nuw nsw i32 %58, 1
  %68 = load i32, i32* %46, align 4
  %69 = icmp slt i32 %67, %68
  br i1 %69, label %55, label %70

70:                                               ; preds = %55
  %71 = load i32, i32* %29, align 8
  br label %72

72:                                               ; preds = %70, %45, %37
  %73 = phi i32 [ %71, %70 ], [ %38, %45 ], [ %38, %37 ]
  %74 = add nuw nsw i64 %39, 1
  %75 = sext i32 %73 to i64
  %76 = icmp slt i64 %74, %75
  br i1 %76, label %37, label %77

77:                                               ; preds = %72, %28
  %78 = getelementptr inbounds %struct.vp9_denoiser, %struct.vp9_denoiser* %0, i64 0, i32 4
  store i32 0, i32* %78, align 4
  br label %288

79:                                               ; preds = %23
  %80 = getelementptr inbounds %struct.SVC, %struct.SVC* %2, i64 0, i32 13
  %81 = load i32, i32* %80, align 8
  %82 = icmp eq i32 %81, 1
  br i1 %82, label %83, label %135

83:                                               ; preds = %79
  %84 = getelementptr inbounds %struct.SVC, %struct.SVC* %2, i64 0, i32 60
  %85 = load i32, i32* %84, align 8
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %135, label %87

87:                                               ; preds = %83
  %88 = getelementptr inbounds %struct.SVC, %struct.SVC* %2, i64 0, i32 0
  %89 = getelementptr inbounds %struct.vp9_denoiser, %struct.vp9_denoiser* %0, i64 0, i32 0
  %90 = add i32 %19, 1
  %91 = sext i32 %19 to i64
  br label %92

92:                                               ; preds = %132, %87
  %93 = phi i64 [ 0, %87 ], [ %133, %132 ]
  %94 = load i32, i32* %88, align 8
  %95 = sext i32 %94 to i64
  %96 = getelementptr inbounds %struct.SVC, %struct.SVC* %2, i64 0, i32 45, i64 %95
  %97 = load i32, i32* %96, align 4
  %98 = trunc i64 %93 to i32
  %99 = shl i32 1, %98
  %100 = and i32 %97, %99
  %101 = icmp eq i32 %100, 0
  br i1 %101, label %132, label %102

102:                                              ; preds = %92
  %103 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %89, align 8
  %104 = add i32 %90, %98
  %105 = sext i32 %104 to i64
  %106 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %103, i64 %105, i32 1
  %107 = load i32, i32* %106, align 4
  %108 = icmp sgt i32 %107, 0
  br i1 %108, label %109, label %132

109:                                              ; preds = %102
  %110 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %103, i64 %105, i32 13
  %111 = load i8*, i8** %110, align 8
  %112 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %103, i64 %91, i32 13
  %113 = load i8*, i8** %112, align 8
  %114 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %103, i64 %105, i32 0
  %115 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %103, i64 %105, i32 4
  %116 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %103, i64 %91, i32 4
  br label %117

117:                                              ; preds = %117, %109
  %118 = phi i8* [ %111, %109 ], [ %125, %117 ]
  %119 = phi i8* [ %113, %109 ], [ %128, %117 ]
  %120 = phi i32 [ 0, %109 ], [ %129, %117 ]
  %121 = load i32, i32* %114, align 8
  %122 = sext i32 %121 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %118, i8* align 1 %119, i64 %122, i1 false) #6
  %123 = load i32, i32* %115, align 8
  %124 = sext i32 %123 to i64
  %125 = getelementptr inbounds i8, i8* %118, i64 %124
  %126 = load i32, i32* %116, align 8
  %127 = sext i32 %126 to i64
  %128 = getelementptr inbounds i8, i8* %119, i64 %127
  %129 = add nuw nsw i32 %120, 1
  %130 = load i32, i32* %106, align 4
  %131 = icmp slt i32 %129, %130
  br i1 %131, label %117, label %132

132:                                              ; preds = %117, %102, %92
  %133 = add nuw nsw i64 %93, 1
  %134 = icmp eq i64 %133, 8
  br i1 %134, label %288, label %92

135:                                              ; preds = %83, %79
  %136 = add nsw i32 %5, %4
  %137 = add nsw i32 %136, %6
  %138 = icmp sgt i32 %137, 1
  %139 = icmp ne i32 %4, 0
  br i1 %138, label %140, label %244

140:                                              ; preds = %135
  br i1 %139, label %141, label %174

141:                                              ; preds = %140
  %142 = getelementptr inbounds %struct.vp9_denoiser, %struct.vp9_denoiser* %0, i64 0, i32 0
  %143 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %142, align 8
  %144 = add i32 %19, 1
  %145 = add i32 %144, %7
  %146 = sext i32 %145 to i64
  %147 = sext i32 %19 to i64
  %148 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %143, i64 %146, i32 1
  %149 = load i32, i32* %148, align 4
  %150 = icmp sgt i32 %149, 0
  br i1 %150, label %151, label %174

151:                                              ; preds = %141
  %152 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %143, i64 %146, i32 13
  %153 = load i8*, i8** %152, align 8
  %154 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %143, i64 %147, i32 13
  %155 = load i8*, i8** %154, align 8
  %156 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %143, i64 %146, i32 0
  %157 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %143, i64 %146, i32 4
  %158 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %143, i64 %147, i32 4
  br label %159

159:                                              ; preds = %159, %151
  %160 = phi i8* [ %153, %151 ], [ %167, %159 ]
  %161 = phi i8* [ %155, %151 ], [ %170, %159 ]
  %162 = phi i32 [ 0, %151 ], [ %171, %159 ]
  %163 = load i32, i32* %156, align 8
  %164 = sext i32 %163 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %160, i8* align 1 %161, i64 %164, i1 false) #6
  %165 = load i32, i32* %157, align 8
  %166 = sext i32 %165 to i64
  %167 = getelementptr inbounds i8, i8* %160, i64 %166
  %168 = load i32, i32* %158, align 8
  %169 = sext i32 %168 to i64
  %170 = getelementptr inbounds i8, i8* %161, i64 %169
  %171 = add nuw nsw i32 %162, 1
  %172 = load i32, i32* %148, align 4
  %173 = icmp slt i32 %171, %172
  br i1 %173, label %159, label %174

174:                                              ; preds = %159, %141, %140
  %175 = icmp eq i32 %5, 0
  br i1 %175, label %209, label %176

176:                                              ; preds = %174
  %177 = getelementptr inbounds %struct.vp9_denoiser, %struct.vp9_denoiser* %0, i64 0, i32 0
  %178 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %177, align 8
  %179 = add i32 %19, 1
  %180 = add i32 %179, %8
  %181 = sext i32 %180 to i64
  %182 = sext i32 %19 to i64
  %183 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %178, i64 %181, i32 1
  %184 = load i32, i32* %183, align 4
  %185 = icmp sgt i32 %184, 0
  br i1 %185, label %186, label %209

186:                                              ; preds = %176
  %187 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %178, i64 %181, i32 13
  %188 = load i8*, i8** %187, align 8
  %189 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %178, i64 %182, i32 13
  %190 = load i8*, i8** %189, align 8
  %191 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %178, i64 %181, i32 0
  %192 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %178, i64 %181, i32 4
  %193 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %178, i64 %182, i32 4
  br label %194

194:                                              ; preds = %194, %186
  %195 = phi i8* [ %188, %186 ], [ %202, %194 ]
  %196 = phi i8* [ %190, %186 ], [ %205, %194 ]
  %197 = phi i32 [ 0, %186 ], [ %206, %194 ]
  %198 = load i32, i32* %191, align 8
  %199 = sext i32 %198 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %195, i8* align 1 %196, i64 %199, i1 false) #6
  %200 = load i32, i32* %192, align 8
  %201 = sext i32 %200 to i64
  %202 = getelementptr inbounds i8, i8* %195, i64 %201
  %203 = load i32, i32* %193, align 8
  %204 = sext i32 %203 to i64
  %205 = getelementptr inbounds i8, i8* %196, i64 %204
  %206 = add nuw nsw i32 %197, 1
  %207 = load i32, i32* %183, align 4
  %208 = icmp slt i32 %206, %207
  br i1 %208, label %194, label %209

209:                                              ; preds = %194, %176, %174
  %210 = icmp eq i32 %6, 0
  br i1 %210, label %288, label %211

211:                                              ; preds = %209
  %212 = getelementptr inbounds %struct.vp9_denoiser, %struct.vp9_denoiser* %0, i64 0, i32 0
  %213 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %212, align 8
  %214 = add i32 %19, 1
  %215 = add i32 %214, %9
  %216 = sext i32 %215 to i64
  %217 = sext i32 %19 to i64
  %218 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %213, i64 %216, i32 1
  %219 = load i32, i32* %218, align 4
  %220 = icmp sgt i32 %219, 0
  br i1 %220, label %221, label %288

221:                                              ; preds = %211
  %222 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %213, i64 %216, i32 13
  %223 = load i8*, i8** %222, align 8
  %224 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %213, i64 %217, i32 13
  %225 = load i8*, i8** %224, align 8
  %226 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %213, i64 %216, i32 0
  %227 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %213, i64 %216, i32 4
  %228 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %213, i64 %217, i32 4
  br label %229

229:                                              ; preds = %229, %221
  %230 = phi i8* [ %223, %221 ], [ %237, %229 ]
  %231 = phi i8* [ %225, %221 ], [ %240, %229 ]
  %232 = phi i32 [ 0, %221 ], [ %241, %229 ]
  %233 = load i32, i32* %226, align 8
  %234 = sext i32 %233 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %230, i8* align 1 %231, i64 %234, i1 false) #6
  %235 = load i32, i32* %227, align 8
  %236 = sext i32 %235 to i64
  %237 = getelementptr inbounds i8, i8* %230, i64 %236
  %238 = load i32, i32* %228, align 8
  %239 = sext i32 %238 to i64
  %240 = getelementptr inbounds i8, i8* %231, i64 %239
  %241 = add nuw nsw i32 %232, 1
  %242 = load i32, i32* %218, align 4
  %243 = icmp slt i32 %241, %242
  br i1 %243, label %229, label %288

244:                                              ; preds = %135
  br i1 %139, label %245, label %258

245:                                              ; preds = %244
  %246 = getelementptr inbounds %struct.vp9_denoiser, %struct.vp9_denoiser* %0, i64 0, i32 0
  %247 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %246, align 8
  %248 = add i32 %19, 1
  %249 = add i32 %248, %7
  %250 = sext i32 %249 to i64
  %251 = sext i32 %19 to i64
  %252 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %247, i64 %250, i32 13
  %253 = bitcast i8** %252 to i64*
  %254 = load i64, i64* %253, align 8
  %255 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %247, i64 %251, i32 13
  %256 = bitcast i8** %255 to i64*
  %257 = load i64, i64* %256, align 8
  store i64 %257, i64* %253, align 8
  store i64 %254, i64* %256, align 8
  br label %258

258:                                              ; preds = %245, %244
  %259 = icmp eq i32 %5, 0
  br i1 %259, label %273, label %260

260:                                              ; preds = %258
  %261 = getelementptr inbounds %struct.vp9_denoiser, %struct.vp9_denoiser* %0, i64 0, i32 0
  %262 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %261, align 8
  %263 = add i32 %19, 1
  %264 = add i32 %263, %8
  %265 = sext i32 %264 to i64
  %266 = sext i32 %19 to i64
  %267 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %262, i64 %265, i32 13
  %268 = bitcast i8** %267 to i64*
  %269 = load i64, i64* %268, align 8
  %270 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %262, i64 %266, i32 13
  %271 = bitcast i8** %270 to i64*
  %272 = load i64, i64* %271, align 8
  store i64 %272, i64* %268, align 8
  store i64 %269, i64* %271, align 8
  br label %273

273:                                              ; preds = %258, %260
  %274 = icmp eq i32 %6, 0
  br i1 %274, label %288, label %275

275:                                              ; preds = %273
  %276 = getelementptr inbounds %struct.vp9_denoiser, %struct.vp9_denoiser* %0, i64 0, i32 0
  %277 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %276, align 8
  %278 = add i32 %19, 1
  %279 = add i32 %278, %9
  %280 = sext i32 %279 to i64
  %281 = sext i32 %19 to i64
  %282 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %277, i64 %280, i32 13
  %283 = bitcast i8** %282 to i64*
  %284 = load i64, i64* %283, align 8
  %285 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %277, i64 %281, i32 13
  %286 = bitcast i8** %285 to i64*
  %287 = load i64, i64* %286, align 8
  store i64 %287, i64* %283, align 8
  store i64 %284, i64* %286, align 8
  br label %288

288:                                              ; preds = %132, %229, %211, %275, %273, %209, %77
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @vp9_denoiser_reset_frame_stats(%struct.PICK_MODE_CONTEXT* nocapture) local_unnamed_addr #4 {
  %2 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %0, i64 0, i32 26
  store i32 -1, i32* %2, align 4
  %3 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %0, i64 0, i32 25
  store i32 -1, i32* %3, align 8
  %4 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %0, i64 0, i32 27
  store i32 -1, i32* %4, align 8
  %5 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %0, i64 0, i32 29, i32 0
  store i32 0, i32* %5, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vp9_denoiser_update_frame_stats(%struct.MODE_INFO* nocapture readonly, i32, i8 zeroext, %struct.PICK_MODE_CONTEXT* nocapture) local_unnamed_addr #0 {
  %5 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %0, i64 0, i32 9, i64 0, i32 0
  %6 = load i32, i32* %5, align 4
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %23

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %3, i64 0, i32 26
  %10 = load i32, i32* %9, align 4
  %11 = icmp ugt i32 %10, %1
  br i1 %11, label %12, label %20

12:                                               ; preds = %8
  store i32 %1, i32* %9, align 4
  %13 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %0, i64 0, i32 8, i64 0
  %14 = load i8, i8* %13, align 4
  %15 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %3, i64 0, i32 31
  store i8 %14, i8* %15, align 1
  %16 = load i8, i8* %13, align 4
  %17 = icmp eq i8 %16, 1
  br i1 %17, label %18, label %20

18:                                               ; preds = %12
  %19 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %3, i64 0, i32 27
  store i32 %1, i32* %19, align 8
  br label %20

20:                                               ; preds = %12, %18, %8
  %21 = load i32, i32* %5, align 4
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %34, label %23

23:                                               ; preds = %4, %20
  %24 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %3, i64 0, i32 25
  %25 = load i32, i32* %24, align 8
  %26 = icmp ugt i32 %25, %1
  br i1 %26, label %27, label %34

27:                                               ; preds = %23
  store i32 %1, i32* %24, align 8
  %28 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %3, i64 0, i32 28
  store i8 %2, i8* %28, align 4
  %29 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %3, i64 0, i32 29, i32 0
  %30 = load i32, i32* %5, align 4
  store i32 %30, i32* %29, align 8
  %31 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %0, i64 0, i32 8, i64 0
  %32 = load i8, i8* %31, align 4
  %33 = getelementptr inbounds %struct.PICK_MODE_CONTEXT, %struct.PICK_MODE_CONTEXT* %3, i64 0, i32 30
  store i8 %32, i8* %33, align 4
  br label %34

34:                                               ; preds = %20, %27, %23
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vp9_denoiser_realloc_svc(%struct.VP9Common* readonly, %struct.vp9_denoiser*, %struct.SVC* nocapture readonly, i32, i32, i32, i32, i32, i32, i32) local_unnamed_addr #2 {
  %11 = getelementptr inbounds %struct.SVC, %struct.SVC* %2, i64 0, i32 13
  %12 = load i32, i32* %11, align 8
  %13 = icmp eq i32 %12, 1
  br i1 %13, label %14, label %64

14:                                               ; preds = %10
  %15 = getelementptr inbounds %struct.SVC, %struct.SVC* %2, i64 0, i32 60
  %16 = load i32, i32* %15, align 8
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %64, label %18

18:                                               ; preds = %14
  %19 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 23
  %20 = getelementptr inbounds %struct.SVC, %struct.SVC* %2, i64 0, i32 0
  %21 = add i32 %3, 1
  %22 = getelementptr inbounds %struct.vp9_denoiser, %struct.vp9_denoiser* %1, i64 0, i32 0
  %23 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 3
  %24 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 4
  %25 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 9
  %26 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 10
  %27 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 11
  br label %28

28:                                               ; preds = %61, %18
  %29 = phi i64 [ 0, %18 ], [ %62, %61 ]
  %30 = load i32, i32* %19, align 4
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %32, label %34

32:                                               ; preds = %28
  %33 = trunc i64 %29 to i32
  br label %43

34:                                               ; preds = %28
  %35 = load i32, i32* %20, align 8
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds %struct.SVC, %struct.SVC* %2, i64 0, i32 45, i64 %36
  %38 = load i32, i32* %37, align 4
  %39 = trunc i64 %29 to i32
  %40 = shl i32 1, %39
  %41 = and i32 %38, %40
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %61, label %43

43:                                               ; preds = %32, %34
  %44 = phi i32 [ %33, %32 ], [ %39, %34 ]
  %45 = add i32 %21, %44
  %46 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %22, align 8
  %47 = sext i32 %45 to i64
  %48 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %46, i64 %47, i32 17
  %49 = load i8*, i8** %48, align 8
  %50 = icmp eq i8* %49, null
  br i1 %50, label %51, label %61

51:                                               ; preds = %43
  %52 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %46, i64 %47
  %53 = load i32, i32* %23, align 16
  %54 = load i32, i32* %24, align 4
  %55 = load i32, i32* %25, align 8
  %56 = load i32, i32* %26, align 4
  %57 = load i32, i32* %27, align 16
  %58 = tail call i32 @vpx_alloc_frame_buffer(%struct.yv12_buffer_config* %52, i32 %53, i32 %54, i32 %55, i32 %56, i32 %57, i32 160, i32 0) #6
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %61, label %60

60:                                               ; preds = %51
  tail call void @vp9_denoiser_free(%struct.vp9_denoiser* %1) #6
  br label %61

61:                                               ; preds = %60, %51, %43, %34
  %62 = add nuw nsw i64 %29, 1
  %63 = icmp eq i64 %62, 8
  br i1 %63, label %142, label %28

64:                                               ; preds = %14, %10
  %65 = icmp eq i32 %4, 0
  br i1 %65, label %90, label %66

66:                                               ; preds = %64
  %67 = add i32 %3, 1
  %68 = add i32 %67, %7
  %69 = getelementptr inbounds %struct.vp9_denoiser, %struct.vp9_denoiser* %1, i64 0, i32 0
  %70 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %69, align 8
  %71 = sext i32 %68 to i64
  %72 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %70, i64 %71, i32 17
  %73 = load i8*, i8** %72, align 8
  %74 = icmp eq i8* %73, null
  br i1 %74, label %75, label %90

75:                                               ; preds = %66
  %76 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %70, i64 %71
  %77 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 3
  %78 = load i32, i32* %77, align 16
  %79 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 4
  %80 = load i32, i32* %79, align 4
  %81 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 9
  %82 = load i32, i32* %81, align 8
  %83 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 10
  %84 = load i32, i32* %83, align 4
  %85 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 11
  %86 = load i32, i32* %85, align 16
  %87 = tail call i32 @vpx_alloc_frame_buffer(%struct.yv12_buffer_config* %76, i32 %78, i32 %80, i32 %82, i32 %84, i32 %86, i32 160, i32 0) #6
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %90, label %89

89:                                               ; preds = %75
  tail call void @vp9_denoiser_free(%struct.vp9_denoiser* %1) #6
  br label %142

90:                                               ; preds = %66, %75, %64
  %91 = icmp eq i32 %5, 0
  br i1 %91, label %116, label %92

92:                                               ; preds = %90
  %93 = add i32 %3, 1
  %94 = add i32 %93, %8
  %95 = getelementptr inbounds %struct.vp9_denoiser, %struct.vp9_denoiser* %1, i64 0, i32 0
  %96 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %95, align 8
  %97 = sext i32 %94 to i64
  %98 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %96, i64 %97, i32 17
  %99 = load i8*, i8** %98, align 8
  %100 = icmp eq i8* %99, null
  br i1 %100, label %101, label %116

101:                                              ; preds = %92
  %102 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %96, i64 %97
  %103 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 3
  %104 = load i32, i32* %103, align 16
  %105 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 4
  %106 = load i32, i32* %105, align 4
  %107 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 9
  %108 = load i32, i32* %107, align 8
  %109 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 10
  %110 = load i32, i32* %109, align 4
  %111 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 11
  %112 = load i32, i32* %111, align 16
  %113 = tail call i32 @vpx_alloc_frame_buffer(%struct.yv12_buffer_config* %102, i32 %104, i32 %106, i32 %108, i32 %110, i32 %112, i32 160, i32 0) #6
  %114 = icmp eq i32 %113, 0
  br i1 %114, label %116, label %115

115:                                              ; preds = %101
  tail call void @vp9_denoiser_free(%struct.vp9_denoiser* %1) #6
  br label %142

116:                                              ; preds = %92, %101, %90
  %117 = icmp eq i32 %6, 0
  br i1 %117, label %142, label %118

118:                                              ; preds = %116
  %119 = add i32 %3, 1
  %120 = add i32 %119, %9
  %121 = getelementptr inbounds %struct.vp9_denoiser, %struct.vp9_denoiser* %1, i64 0, i32 0
  %122 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %121, align 8
  %123 = sext i32 %120 to i64
  %124 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %122, i64 %123, i32 17
  %125 = load i8*, i8** %124, align 8
  %126 = icmp eq i8* %125, null
  br i1 %126, label %127, label %142

127:                                              ; preds = %118
  %128 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %122, i64 %123
  %129 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 3
  %130 = load i32, i32* %129, align 16
  %131 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 4
  %132 = load i32, i32* %131, align 4
  %133 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 9
  %134 = load i32, i32* %133, align 8
  %135 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 10
  %136 = load i32, i32* %135, align 4
  %137 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 11
  %138 = load i32, i32* %137, align 16
  %139 = tail call i32 @vpx_alloc_frame_buffer(%struct.yv12_buffer_config* %128, i32 %130, i32 %132, i32 %134, i32 %136, i32 %138, i32 160, i32 0) #6
  %140 = icmp eq i32 %139, 0
  br i1 %140, label %142, label %141

141:                                              ; preds = %127
  tail call void @vp9_denoiser_free(%struct.vp9_denoiser* %1) #6
  br label %142

142:                                              ; preds = %61, %118, %127, %116, %141, %115, %89
  %143 = phi i32 [ 1, %89 ], [ 1, %115 ], [ 1, %141 ], [ 0, %116 ], [ 0, %127 ], [ 0, %118 ], [ 0, %61 ]
  ret i32 %143
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vp9_denoiser_alloc(%struct.VP9Common*, %struct.SVC* nocapture, %struct.vp9_denoiser*, i32, i32, i32, i32, i32, i32, i32, i32) local_unnamed_addr #2 {
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %14) #6
  store i32 %5, i32* %12, align 4
  %15 = bitcast i32* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %15) #6
  store i32 %6, i32* %13, align 4
  %16 = icmp ne i32 %3, 0
  br i1 %16, label %17, label %42

17:                                               ; preds = %11
  %18 = getelementptr inbounds %struct.SVC, %struct.SVC* %1, i64 0, i32 0
  %19 = load i32, i32* %18, align 8
  %20 = getelementptr inbounds %struct.SVC, %struct.SVC* %1, i64 0, i32 3
  %21 = load i32, i32* %20, align 4
  %22 = mul nsw i32 %21, %19
  %23 = getelementptr inbounds %struct.SVC, %struct.SVC* %1, i64 0, i32 1
  %24 = load i32, i32* %23, align 4
  %25 = add nsw i32 %22, %24
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds %struct.SVC, %struct.SVC* %1, i64 0, i32 12, i64 %26, i32 7
  %28 = load i32, i32* %27, align 4
  %29 = getelementptr inbounds %struct.SVC, %struct.SVC* %1, i64 0, i32 12, i64 %26, i32 8
  %30 = load i32, i32* %29, align 8
  call void @get_layer_resolution(i32 %5, i32 %6, i32 %28, i32 %30, i32* nonnull %12, i32* nonnull %13) #6
  %31 = icmp sgt i32 %4, 1
  %32 = getelementptr inbounds %struct.SVC, %struct.SVC* %1, i64 0, i32 2
  %33 = load i32, i32* %32, align 8
  %34 = select i1 %31, i32 2, i32 1
  %35 = select i1 %31, i32 2, i32 1
  %36 = select i1 %31, i32 -2, i32 -1
  %37 = icmp sgt i32 %33, %34
  %38 = select i1 %37, i32 %33, i32 %35
  %39 = add nsw i32 %38, %36
  %40 = getelementptr inbounds %struct.SVC, %struct.SVC* %1, i64 0, i32 32
  store i32 %39, i32* %40, align 8
  %41 = sub nsw i32 %33, %39
  br label %42

42:                                               ; preds = %17, %11
  %43 = phi i32 [ %41, %17 ], [ 1, %11 ]
  %44 = select i1 %16, i32 9, i32 3
  %45 = getelementptr inbounds %struct.vp9_denoiser, %struct.vp9_denoiser* %2, i64 0, i32 5
  store i32 %44, i32* %45, align 8
  %46 = select i1 %16, i32 4, i32 3
  %47 = getelementptr inbounds %struct.vp9_denoiser, %struct.vp9_denoiser* %2, i64 0, i32 6
  store i32 %43, i32* %47, align 4
  %48 = mul nsw i32 %43, %44
  %49 = sext i32 %48 to i64
  %50 = call i8* @vpx_calloc(i64 %49, i64 160) #6
  %51 = getelementptr inbounds %struct.vp9_denoiser, %struct.vp9_denoiser* %2, i64 0, i32 0
  %52 = bitcast %struct.vp9_denoiser* %2 to i8**
  store i8* %50, i8** %52, align 8
  %53 = icmp eq i8* %50, null
  br i1 %53, label %54, label %56

54:                                               ; preds = %42
  %55 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 0
  call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %55, i32 2, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str, i64 0, i64 0)) #6
  br label %56

56:                                               ; preds = %42, %54
  %57 = sext i32 %43 to i64
  %58 = call i8* @vpx_calloc(i64 %57, i64 160) #6
  %59 = getelementptr inbounds %struct.vp9_denoiser, %struct.vp9_denoiser* %2, i64 0, i32 1
  %60 = bitcast %struct.yv12_buffer_config** %59 to i8**
  store i8* %58, i8** %60, align 8
  %61 = icmp eq i8* %58, null
  br i1 %61, label %62, label %64

62:                                               ; preds = %56
  %63 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 0
  call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %63, i32 2, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.1, i64 0, i64 0)) #6
  br label %64

64:                                               ; preds = %56, %62
  %65 = icmp sgt i32 %43, 0
  br i1 %65, label %66, label %99

66:                                               ; preds = %64
  %67 = zext i32 %43 to i64
  br label %70

68:                                               ; preds = %92
  %69 = icmp eq i64 %97, %67
  br i1 %69, label %99, label %70

70:                                               ; preds = %68, %66
  %71 = phi i64 [ 0, %66 ], [ %97, %68 ]
  %72 = icmp eq i64 %71, 0
  %73 = load i32, i32* %12, align 4
  %74 = select i1 %72, i32 %5, i32 %73
  %75 = load i32, i32* %13, align 4
  %76 = select i1 %72, i32 %6, i32 %75
  %77 = trunc i64 %71 to i32
  br label %80

78:                                               ; preds = %80
  %79 = icmp ult i32 %90, %46
  br i1 %79, label %80, label %92

80:                                               ; preds = %70, %78
  %81 = phi i32 [ 0, %70 ], [ %90, %78 ]
  %82 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %51, align 8
  %83 = load i32, i32* %45, align 8
  %84 = mul nsw i32 %83, %77
  %85 = add nsw i32 %84, %81
  %86 = sext i32 %85 to i64
  %87 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %82, i64 %86
  %88 = call i32 @vpx_alloc_frame_buffer(%struct.yv12_buffer_config* %87, i32 %74, i32 %76, i32 %7, i32 %8, i32 %9, i32 %10, i32 0) #6
  %89 = icmp eq i32 %88, 0
  %90 = add nuw nsw i32 %81, 1
  br i1 %89, label %78, label %91

91:                                               ; preds = %80
  call void @vp9_denoiser_free(%struct.vp9_denoiser* %2)
  br label %110

92:                                               ; preds = %78
  %93 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %59, align 8
  %94 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %93, i64 %71
  %95 = call i32 @vpx_alloc_frame_buffer(%struct.yv12_buffer_config* %94, i32 %74, i32 %76, i32 %7, i32 %8, i32 %9, i32 %10, i32 0) #6
  %96 = icmp eq i32 %95, 0
  %97 = add nuw nsw i64 %71, 1
  br i1 %96, label %68, label %98

98:                                               ; preds = %92
  call void @vp9_denoiser_free(%struct.vp9_denoiser* %2)
  br label %110

99:                                               ; preds = %68, %64
  %100 = getelementptr inbounds %struct.vp9_denoiser, %struct.vp9_denoiser* %2, i64 0, i32 2
  %101 = call i32 @vpx_alloc_frame_buffer(%struct.yv12_buffer_config* %100, i32 %5, i32 %6, i32 %7, i32 %8, i32 %9, i32 %10, i32 0) #6
  %102 = icmp eq i32 %101, 0
  br i1 %102, label %104, label %103

103:                                              ; preds = %99
  call void @vp9_denoiser_free(%struct.vp9_denoiser* %2)
  br label %110

104:                                              ; preds = %99
  %105 = getelementptr inbounds %struct.vp9_denoiser, %struct.vp9_denoiser* %2, i64 0, i32 3
  store i32 1, i32* %105, align 8
  %106 = getelementptr inbounds %struct.vp9_denoiser, %struct.vp9_denoiser* %2, i64 0, i32 8
  store i32 2, i32* %106, align 4
  %107 = getelementptr inbounds %struct.vp9_denoiser, %struct.vp9_denoiser* %2, i64 0, i32 9
  store i32 2, i32* %107, align 8
  %108 = getelementptr inbounds %struct.vp9_denoiser, %struct.vp9_denoiser* %2, i64 0, i32 4
  store i32 0, i32* %108, align 4
  %109 = getelementptr inbounds %struct.vp9_denoiser, %struct.vp9_denoiser* %2, i64 0, i32 7
  store i32 0, i32* %109, align 8
  br label %110

110:                                              ; preds = %98, %91, %104, %103
  %111 = phi i32 [ 1, %103 ], [ 0, %104 ], [ 1, %91 ], [ 1, %98 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %15) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %14) #6
  ret i32 %111
}

declare void @get_layer_resolution(i32, i32, i32, i32, i32*, i32*) local_unnamed_addr #3

declare i8* @vpx_calloc(i64, i64) local_unnamed_addr #3

declare void @vpx_internal_error(%struct.vpx_internal_error_info*, i32, i8*, ...) local_unnamed_addr #3

declare i32 @vpx_alloc_frame_buffer(%struct.yv12_buffer_config*, i32, i32, i32, i32, i32, i32, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_denoiser_free(%struct.vp9_denoiser*) local_unnamed_addr #2 {
  %2 = icmp eq %struct.vp9_denoiser* %0, null
  br i1 %2, label %47, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.vp9_denoiser, %struct.vp9_denoiser* %0, i64 0, i32 3
  store i32 0, i32* %4, align 8
  %5 = getelementptr inbounds %struct.vp9_denoiser, %struct.vp9_denoiser* %0, i64 0, i32 5
  %6 = load i32, i32* %5, align 8
  %7 = getelementptr inbounds %struct.vp9_denoiser, %struct.vp9_denoiser* %0, i64 0, i32 6
  %8 = load i32, i32* %7, align 4
  %9 = mul nsw i32 %8, %6
  %10 = icmp sgt i32 %9, 0
  %11 = getelementptr inbounds %struct.vp9_denoiser, %struct.vp9_denoiser* %0, i64 0, i32 0
  %12 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %11, align 8
  br i1 %10, label %13, label %25

13:                                               ; preds = %3, %13
  %14 = phi i64 [ %18, %13 ], [ 0, %3 ]
  %15 = phi %struct.yv12_buffer_config* [ %24, %13 ], [ %12, %3 ]
  %16 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %15, i64 %14
  %17 = tail call i32 @vpx_free_frame_buffer(%struct.yv12_buffer_config* %16) #6
  %18 = add nuw nsw i64 %14, 1
  %19 = load i32, i32* %5, align 8
  %20 = load i32, i32* %7, align 4
  %21 = mul nsw i32 %20, %19
  %22 = sext i32 %21 to i64
  %23 = icmp slt i64 %18, %22
  %24 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %11, align 8
  br i1 %23, label %13, label %25

25:                                               ; preds = %13, %3
  %26 = phi %struct.yv12_buffer_config* [ %12, %3 ], [ %24, %13 ]
  %27 = bitcast %struct.yv12_buffer_config* %26 to i8*
  tail call void @vpx_free(i8* %27) #6
  store %struct.yv12_buffer_config* null, %struct.yv12_buffer_config** %11, align 8
  %28 = load i32, i32* %7, align 4
  %29 = icmp sgt i32 %28, 0
  %30 = getelementptr inbounds %struct.vp9_denoiser, %struct.vp9_denoiser* %0, i64 0, i32 1
  %31 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %30, align 8
  br i1 %29, label %32, label %42

32:                                               ; preds = %25, %32
  %33 = phi i64 [ %37, %32 ], [ 0, %25 ]
  %34 = phi %struct.yv12_buffer_config* [ %41, %32 ], [ %31, %25 ]
  %35 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %34, i64 %33
  %36 = tail call i32 @vpx_free_frame_buffer(%struct.yv12_buffer_config* %35) #6
  %37 = add nuw nsw i64 %33, 1
  %38 = load i32, i32* %7, align 4
  %39 = sext i32 %38 to i64
  %40 = icmp slt i64 %37, %39
  %41 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %30, align 8
  br i1 %40, label %32, label %42

42:                                               ; preds = %32, %25
  %43 = phi %struct.yv12_buffer_config* [ %31, %25 ], [ %41, %32 ]
  %44 = bitcast %struct.yv12_buffer_config* %43 to i8*
  tail call void @vpx_free(i8* %44) #6
  store %struct.yv12_buffer_config* null, %struct.yv12_buffer_config** %30, align 8
  %45 = getelementptr inbounds %struct.vp9_denoiser, %struct.vp9_denoiser* %0, i64 0, i32 2
  %46 = tail call i32 @vpx_free_frame_buffer(%struct.yv12_buffer_config* %45) #6
  br label %47

47:                                               ; preds = %1, %42
  ret void
}

declare i32 @vpx_free_frame_buffer(%struct.yv12_buffer_config*) local_unnamed_addr #3

declare void @vpx_free(i8*) local_unnamed_addr #3

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vp9_denoiser_set_noise_level(%struct.VP9_COMP* nocapture, i32) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 117, i32 8
  store i32 %1, i32* %3, align 4
  %4 = icmp eq i32 %1, 0
  br i1 %4, label %27, label %5

5:                                                ; preds = %2
  %6 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 117, i32 9
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %27

9:                                                ; preds = %5
  %10 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 117, i32 4
  store i32 1, i32* %10, align 4
  %11 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 20
  %12 = load i32, i32* %11, align 4
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %29, label %14

14:                                               ; preds = %9
  %15 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 0
  %16 = load i32, i32* %15, align 8
  %17 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 2
  %18 = load i32, i32* %17, align 8
  %19 = icmp eq i32 %18, 3
  %20 = zext i1 %19 to i32
  %21 = sub i32 %16, %20
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 21, i64 %22, i32 0
  %24 = load i32, i32* %23, align 8
  %25 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 38
  store i32 %24, i32* %25, align 4
  %26 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 42
  store i32 1, i32* %26, align 16
  br label %29

27:                                               ; preds = %2, %5
  %28 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 117, i32 4
  store i32 0, i32* %28, align 4
  br label %29

29:                                               ; preds = %14, %9, %27
  %30 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 117, i32 9
  store i32 %1, i32* %30, align 8
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i64 @vp9_scale_part_thresh(i64, i32, i32, i32) local_unnamed_addr #5 {
  %5 = or i32 %2, 2
  %6 = icmp eq i32 %5, 3
  %7 = icmp eq i32 %2, 5
  %8 = or i1 %7, %6
  %9 = icmp eq i32 %1, 3
  %10 = or i1 %9, %8
  %11 = icmp ne i32 %3, 0
  %12 = or i1 %11, %10
  br i1 %12, label %13, label %20

13:                                               ; preds = %4
  %14 = icmp slt i32 %3, 2
  %15 = mul nsw i64 %0, 3
  %16 = ashr i64 %15, 1
  %17 = mul nsw i64 %0, 7
  %18 = ashr i64 %17, 2
  %19 = select i1 %14, i64 %16, i64 %18
  br label %23

20:                                               ; preds = %4
  %21 = mul nsw i64 %0, 5
  %22 = ashr i64 %21, 2
  br label %23

23:                                               ; preds = %20, %13
  %24 = phi i64 [ %19, %13 ], [ %22, %20 ]
  ret i64 %24
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i64 @vp9_scale_acskip_thresh(i64, i32, i32, i32) local_unnamed_addr #5 {
  %5 = icmp ne i32 %1, 0
  %6 = icmp slt i32 %2, 5
  %7 = and i1 %5, %6
  br i1 %7, label %8, label %14

8:                                                ; preds = %4
  %9 = icmp eq i32 %1, 1
  %10 = icmp eq i32 %3, 2
  %11 = select i1 %10, i64 10, i64 6
  %12 = select i1 %9, i64 2, i64 %11
  %13 = mul nsw i64 %12, %0
  br label %14

14:                                               ; preds = %4, %8
  %15 = phi i64 [ %13, %8 ], [ %0, %4 ]
  ret i64 %15
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_denoiser_reset_on_first_frame(%struct.VP9_COMP*) local_unnamed_addr #2 {
  %2 = tail call i32 @vp9_denoise_svc_non_key(%struct.VP9_COMP* %0) #6
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %26, label %4

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 117, i32 7
  %6 = load i32, i32* %5, align 16
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %26

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 117, i32 4
  store i32 1, i32* %9, align 4
  %10 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 20
  %11 = load i32, i32* %10, align 4
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %26, label %13

13:                                               ; preds = %8
  %14 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 0
  %15 = load i32, i32* %14, align 8
  %16 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 2
  %17 = load i32, i32* %16, align 8
  %18 = icmp eq i32 %17, 3
  %19 = zext i1 %18 to i32
  %20 = sub i32 %15, %19
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 21, i64 %21, i32 0
  %23 = load i32, i32* %22, align 8
  %24 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 38
  store i32 %23, i32* %24, align 4
  %25 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 42
  store i32 1, i32* %25, align 16
  br label %26

26:                                               ; preds = %13, %8, %1, %4
  ret void
}

declare i32 @vp9_denoise_svc_non_key(%struct.VP9_COMP*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_denoiser_update_ref_frame(%struct.VP9_COMP*) local_unnamed_addr #2 {
  %2 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8
  %3 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104
  %4 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 9, i32 9
  %5 = load i32, i32* %4, align 16
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %100

7:                                                ; preds = %1
  %8 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 103
  %9 = load i32, i32* %8, align 4
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %17, label %11

11:                                               ; preds = %7
  %12 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 0
  %13 = load i32, i32* %12, align 16
  %14 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 32
  %15 = load i32, i32* %14, align 16
  %16 = icmp slt i32 %13, %15
  br i1 %16, label %100, label %17

17:                                               ; preds = %7, %11
  %18 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 117
  %19 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 117, i32 8
  %20 = load i32, i32* %19, align 4
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %100, label %22

22:                                               ; preds = %17
  %23 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 27
  %24 = load i8, i8* %23, align 4
  %25 = icmp eq i8 %24, 0
  br i1 %25, label %26, label %29

26:                                               ; preds = %22
  %27 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 23
  %28 = load i32, i32* %27, align 4
  br label %29

29:                                               ; preds = %22, %26
  %30 = phi i32 [ %28, %26 ], [ 0, %22 ]
  %31 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 117, i32 7
  %32 = load i32, i32* %31, align 16
  %33 = add i32 %32, 1
  store i32 %33, i32* %31, align 16
  br i1 %10, label %81, label %34

34:                                               ; preds = %29
  %35 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 2
  %36 = load i32, i32* %35, align 8
  %37 = getelementptr inbounds %struct.SVC, %struct.SVC* %3, i64 0, i32 0
  %38 = load i32, i32* %37, align 8
  %39 = sub nsw i32 %36, %38
  %40 = icmp eq i32 %39, 2
  br i1 %40, label %41, label %44

41:                                               ; preds = %34
  %42 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 117, i32 5
  %43 = load i32, i32* %42, align 8
  br label %44

44:                                               ; preds = %34, %41
  %45 = phi i32 [ %43, %41 ], [ 0, %34 ]
  %46 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 3
  %47 = load i32, i32* %46, align 4
  %48 = mul nsw i32 %47, %38
  %49 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 1
  %50 = load i32, i32* %49, align 4
  %51 = add nsw i32 %48, %50
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 12, i64 %52, i32 14
  %54 = load i32, i32* %53, align 4
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %56, label %62

56:                                               ; preds = %44
  %57 = sext i32 %38 to i64
  %58 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 55, i64 %57
  %59 = load i32, i32* %58, align 4
  %60 = icmp ne i32 %59, 0
  %61 = zext i1 %60 to i32
  br label %62

62:                                               ; preds = %44, %56
  %63 = phi i32 [ 1, %44 ], [ %61, %56 ]
  %64 = zext i1 %40 to i32
  %65 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 42
  %66 = load i32, i32* %65, align 16
  %67 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 41
  %68 = load i32, i32* %67, align 4
  %69 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 40
  %70 = load i32, i32* %69, align 8
  %71 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 38
  %72 = load i32, i32* %71, align 4
  %73 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 37
  %74 = load i32, i32* %73, align 16
  %75 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 36
  %76 = load i32, i32* %75, align 4
  %77 = tail call i32 @vp9_denoiser_realloc_svc(%struct.VP9Common* %2, %struct.vp9_denoiser* %18, %struct.SVC* %3, i32 %45, i32 %66, i32 %68, i32 %70, i32 %72, i32 %74, i32 %76)
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %81, label %79

79:                                               ; preds = %62
  %80 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %2, i64 0, i32 0
  tail call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %80, i32 2, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.2, i64 0, i64 0)) #6
  br label %81

81:                                               ; preds = %79, %62, %29
  %82 = phi i32 [ 0, %29 ], [ %63, %62 ], [ %63, %79 ]
  %83 = phi i32 [ 0, %29 ], [ %64, %62 ], [ %64, %79 ]
  %84 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 12
  %85 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %84, align 8
  %86 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 42
  %87 = load i32, i32* %86, align 16
  %88 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 41
  %89 = load i32, i32* %88, align 4
  %90 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 40
  %91 = load i32, i32* %90, align 8
  %92 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 38
  %93 = load i32, i32* %92, align 4
  %94 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 37
  %95 = load i32, i32* %94, align 16
  %96 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 36
  %97 = load i32, i32* %96, align 4
  %98 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 118
  %99 = load i32, i32* %98, align 16
  tail call void @vp9_denoiser_update_frame_info(%struct.vp9_denoiser* %18, %struct.yv12_buffer_config* byval(%struct.yv12_buffer_config) align 8 %85, %struct.SVC* %3, i32 %30, i32 %87, i32 %89, i32 %91, i32 %93, i32 %95, i32 %97, i32 %99, i32 %82, i32 %83)
  br label %100

100:                                              ; preds = %17, %11, %81, %1
  ret void
}

declare void @vp9_build_inter_predictors_sby(%struct.macroblockd*, i32, i32, i8 zeroext) local_unnamed_addr #3

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
