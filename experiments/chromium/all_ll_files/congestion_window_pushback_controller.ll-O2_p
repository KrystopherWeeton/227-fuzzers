; ModuleID = '../../third_party/webrtc/modules/congestion_controller/goog_cc/congestion_window_pushback_controller.cc'
source_filename = "../../third_party/webrtc/modules/congestion_controller/goog_cc/congestion_window_pushback_controller.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.webrtc::CongestionWindowPushbackController" = type { i8, i32, %"class.absl::optional", i64, i64, double }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"class.webrtc::DataSize" }
%"class.webrtc::DataSize" = type { %"class.webrtc::rtc_units_impl::RelativeUnit" }
%"class.webrtc::rtc_units_impl::RelativeUnit" = type { %"class.webrtc::rtc_units_impl::UnitBase" }
%"class.webrtc::rtc_units_impl::UnitBase" = type { i64 }
%"class.webrtc::WebRtcKeyValueConfig" = type { i32 (...)** }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.0 }
%union.anon.0 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.webrtc::RateControlSettings" = type { %"struct.webrtc::CongestionWindowConfig", %"struct.webrtc::VideoRateControlConfig" }
%"struct.webrtc::CongestionWindowConfig" = type <{ %"class.absl::optional.2", %"class.absl::optional.2", %"class.absl::optional", i8, [7 x i8] }>
%"class.absl::optional.2" = type { %"class.absl::optional_internal::optional_data.3" }
%"class.absl::optional_internal::optional_data.3" = type { %"class.absl::optional_internal::optional_data_base.4" }
%"class.absl::optional_internal::optional_data_base.4" = type { %"class.absl::optional_internal::optional_data_dtor_base.5" }
%"class.absl::optional_internal::optional_data_dtor_base.5" = type { i8, %union.anon.6 }
%union.anon.6 = type { i32 }
%"struct.webrtc::VideoRateControlConfig" = type <{ %"class.absl::optional.7", i8, [3 x i8], %"class.absl::optional.2", %"class.absl::optional.2", i8, i8, [2 x i8], double, double, i8, i8, i8, i8, i8, [3 x i8] }>
%"class.absl::optional.7" = type { %"class.absl::optional_internal::optional_data.8" }
%"class.absl::optional_internal::optional_data.8" = type { %"class.absl::optional_internal::optional_data_base.9" }
%"class.absl::optional_internal::optional_data_base.9" = type { %"class.absl::optional_internal::optional_data_dtor_base.10" }
%"class.absl::optional_internal::optional_data_dtor_base.10" = type { i8, %union.anon.11 }
%union.anon.11 = type { double }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }

@.str = private unnamed_addr constant [43 x i8] c"WebRTC-AddPacingToCongestionWindowPushback\00", align 1
@.str.1 = private unnamed_addr constant [8 x i8] c"Enabled\00", align 1

@_ZN6webrtc34CongestionWindowPushbackControllerC1EPKNS_20WebRtcKeyValueConfigE = hidden unnamed_addr alias void (%"class.webrtc::CongestionWindowPushbackController"*, %"class.webrtc::WebRtcKeyValueConfig"*), void (%"class.webrtc::CongestionWindowPushbackController"*, %"class.webrtc::WebRtcKeyValueConfig"*)* @_ZN6webrtc34CongestionWindowPushbackControllerC2EPKNS_20WebRtcKeyValueConfigE

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc34CongestionWindowPushbackControllerC2EPKNS_20WebRtcKeyValueConfigE(%"class.webrtc::CongestionWindowPushbackController"* nocapture, %"class.webrtc::WebRtcKeyValueConfig"*) unnamed_addr #0 align 2 {
  %3 = alloca %"class.std::__1::basic_string", align 8
  %4 = alloca %"class.webrtc::RateControlSettings", align 8
  %5 = alloca %"class.webrtc::RateControlSettings", align 8
  %6 = getelementptr inbounds %"class.webrtc::CongestionWindowPushbackController", %"class.webrtc::CongestionWindowPushbackController"* %0, i64 0, i32 0
  %7 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %7) #9
  %8 = bitcast %"class.webrtc::WebRtcKeyValueConfig"* %1 to void (%"class.std::__1::basic_string"*, %"class.webrtc::WebRtcKeyValueConfig"*, i8*, i64)***
  %9 = load void (%"class.std::__1::basic_string"*, %"class.webrtc::WebRtcKeyValueConfig"*, i8*, i64)**, void (%"class.std::__1::basic_string"*, %"class.webrtc::WebRtcKeyValueConfig"*, i8*, i64)*** %8, align 8
  %10 = getelementptr inbounds void (%"class.std::__1::basic_string"*, %"class.webrtc::WebRtcKeyValueConfig"*, i8*, i64)*, void (%"class.std::__1::basic_string"*, %"class.webrtc::WebRtcKeyValueConfig"*, i8*, i64)** %9, i64 2
  %11 = load void (%"class.std::__1::basic_string"*, %"class.webrtc::WebRtcKeyValueConfig"*, i8*, i64)*, void (%"class.std::__1::basic_string"*, %"class.webrtc::WebRtcKeyValueConfig"*, i8*, i64)** %10, align 8
  call void %11(%"class.std::__1::basic_string"* nonnull sret %3, %"class.webrtc::WebRtcKeyValueConfig"* %1, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str, i64 0, i64 0), i64 42) #9
  %12 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %13 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %12, i64 0, i32 1, i32 0
  %14 = load i8, i8* %13, align 1
  %15 = icmp slt i8 %14, 0
  br i1 %15, label %19, label %16

16:                                               ; preds = %2
  %17 = zext i8 %14 to i64
  %18 = ptrtoint %"class.std::__1::basic_string"* %3 to i64
  br label %26

19:                                               ; preds = %2
  %20 = bitcast %"class.std::__1::basic_string"* %3 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %23 = load i64, i64* %22, align 8
  %24 = icmp sgt i64 %23, -1
  br i1 %24, label %26, label %25, !prof !2

25:                                               ; preds = %19
  call void @llvm.trap() #9
  unreachable

26:                                               ; preds = %19, %16
  %27 = phi i64 [ %21, %19 ], [ %18, %16 ]
  %28 = phi i64 [ %23, %19 ], [ %17, %16 ]
  %29 = icmp ult i64 %28, 7
  br i1 %29, label %35, label %30

30:                                               ; preds = %26
  %31 = inttoptr i64 %27 to i8*
  %32 = call i32 @bcmp(i8* %31, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i64 0, i64 0), i64 7) #9
  %33 = icmp eq i32 %32, 0
  %34 = zext i1 %33 to i8
  br label %35

35:                                               ; preds = %26, %30
  %36 = phi i8 [ 0, %26 ], [ %34, %30 ]
  br i1 %15, label %37, label %40

37:                                               ; preds = %35
  %38 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %39 = load i8*, i8** %38, align 8
  call void @_ZdlPv(i8* %39) #10
  br label %40

40:                                               ; preds = %35, %37
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %7) #9
  store i8 %36, i8* %6, align 8
  %41 = getelementptr inbounds %"class.webrtc::CongestionWindowPushbackController", %"class.webrtc::CongestionWindowPushbackController"* %0, i64 0, i32 1
  %42 = getelementptr inbounds %"class.webrtc::RateControlSettings", %"class.webrtc::RateControlSettings"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 104, i8* nonnull %42) #9
  call void @_ZN6webrtc19RateControlSettings23ParseFromKeyValueConfigEPKNS_20WebRtcKeyValueConfigE(%"class.webrtc::RateControlSettings"* nonnull sret %4, %"class.webrtc::WebRtcKeyValueConfig"* %1) #9
  %43 = call i32 @_ZNK6webrtc19RateControlSettings43CongestionWindowMinPushbackTargetBitrateBpsEv(%"class.webrtc::RateControlSettings"* nonnull %4) #9
  call void @_ZN6webrtc19RateControlSettingsD1Ev(%"class.webrtc::RateControlSettings"* nonnull %4) #9
  call void @llvm.lifetime.end.p0i8(i64 104, i8* nonnull %42) #9
  store i32 %43, i32* %41, align 4
  %44 = getelementptr inbounds %"class.webrtc::RateControlSettings", %"class.webrtc::RateControlSettings"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 104, i8* nonnull %44) #9
  call void @_ZN6webrtc19RateControlSettings23ParseFromKeyValueConfigEPKNS_20WebRtcKeyValueConfigE(%"class.webrtc::RateControlSettings"* nonnull sret %5, %"class.webrtc::WebRtcKeyValueConfig"* %1) #9
  %45 = call { i8, i64 } @_ZNK6webrtc19RateControlSettings33CongestionWindowInitialDataWindowEv(%"class.webrtc::RateControlSettings"* nonnull %5) #9
  %46 = getelementptr inbounds %"class.webrtc::CongestionWindowPushbackController", %"class.webrtc::CongestionWindowPushbackController"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %47 = extractvalue { i8, i64 } %45, 0
  store i8 %47, i8* %46, align 8
  %48 = getelementptr inbounds %"class.webrtc::CongestionWindowPushbackController", %"class.webrtc::CongestionWindowPushbackController"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %49 = extractvalue { i8, i64 } %45, 1
  store i64 %49, i64* %48, align 8
  call void @_ZN6webrtc19RateControlSettingsD1Ev(%"class.webrtc::RateControlSettings"* nonnull %5) #9
  call void @llvm.lifetime.end.p0i8(i64 104, i8* nonnull %44) #9
  %50 = getelementptr inbounds %"class.webrtc::CongestionWindowPushbackController", %"class.webrtc::CongestionWindowPushbackController"* %0, i64 0, i32 3
  %51 = getelementptr inbounds %"class.webrtc::CongestionWindowPushbackController", %"class.webrtc::CongestionWindowPushbackController"* %0, i64 0, i32 5
  %52 = bitcast i64* %50 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %52, i8 0, i64 16, i1 false)
  store double 1.000000e+00, double* %51, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN6webrtc19RateControlSettings23ParseFromKeyValueConfigEPKNS_20WebRtcKeyValueConfigE(%"class.webrtc::RateControlSettings"* sret, %"class.webrtc::WebRtcKeyValueConfig"*) local_unnamed_addr #2

declare i32 @_ZNK6webrtc19RateControlSettings43CongestionWindowMinPushbackTargetBitrateBpsEv(%"class.webrtc::RateControlSettings"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN6webrtc19RateControlSettingsD1Ev(%"class.webrtc::RateControlSettings"*) unnamed_addr #3

declare { i8, i64 } @_ZNK6webrtc19RateControlSettings33CongestionWindowInitialDataWindowEv(%"class.webrtc::RateControlSettings"*) local_unnamed_addr #2

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN6webrtc34CongestionWindowPushbackController21UpdateOutstandingDataEl(%"class.webrtc::CongestionWindowPushbackController"* nocapture, i64) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.webrtc::CongestionWindowPushbackController", %"class.webrtc::CongestionWindowPushbackController"* %0, i64 0, i32 3
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN6webrtc34CongestionWindowPushbackController17UpdatePacingQueueEl(%"class.webrtc::CongestionWindowPushbackController"* nocapture, i64) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.webrtc::CongestionWindowPushbackController", %"class.webrtc::CongestionWindowPushbackController"* %0, i64 0, i32 4
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN6webrtc34CongestionWindowPushbackController13SetDataWindowENS_8DataSizeE(%"class.webrtc::CongestionWindowPushbackController"* nocapture, i64) local_unnamed_addr #5 align 2 {
  %3 = getelementptr inbounds %"class.webrtc::CongestionWindowPushbackController", %"class.webrtc::CongestionWindowPushbackController"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %4 = load i8, i8* %3, align 8, !range !3
  %5 = icmp eq i8 %4, 0
  %6 = getelementptr inbounds %"class.webrtc::CongestionWindowPushbackController", %"class.webrtc::CongestionWindowPushbackController"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  store i64 %1, i64* %6, align 8
  br i1 %5, label %7, label %8

7:                                                ; preds = %2
  store i8 1, i8* %3, align 8
  br label %8

8:                                                ; preds = %2, %7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN6webrtc34CongestionWindowPushbackController19UpdateTargetBitrateEj(%"class.webrtc::CongestionWindowPushbackController"* nocapture, i32) local_unnamed_addr #0 align 2 {
  %3 = alloca double, align 8
  %4 = getelementptr inbounds %"class.webrtc::CongestionWindowPushbackController", %"class.webrtc::CongestionWindowPushbackController"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %5 = load i8, i8* %4, align 8, !range !3
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %62, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.webrtc::CongestionWindowPushbackController", %"class.webrtc::CongestionWindowPushbackController"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %9 = load i64, i64* %8, align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %62, label %11

11:                                               ; preds = %7
  %12 = getelementptr inbounds %"class.webrtc::CongestionWindowPushbackController", %"class.webrtc::CongestionWindowPushbackController"* %0, i64 0, i32 3
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds %"class.webrtc::CongestionWindowPushbackController", %"class.webrtc::CongestionWindowPushbackController"* %0, i64 0, i32 0
  %15 = load i8, i8* %14, align 8, !range !3
  %16 = icmp eq i8 %15, 0
  br i1 %16, label %21, label %17

17:                                               ; preds = %11
  %18 = getelementptr inbounds %"class.webrtc::CongestionWindowPushbackController", %"class.webrtc::CongestionWindowPushbackController"* %0, i64 0, i32 4
  %19 = load i64, i64* %18, align 8
  %20 = add nsw i64 %19, %13
  br label %21

21:                                               ; preds = %17, %11
  %22 = phi i64 [ %20, %17 ], [ %13, %11 ]
  %23 = sitofp i64 %22 to double
  %24 = sitofp i64 %9 to double
  %25 = fdiv double %23, %24
  %26 = fcmp ogt double %25, 1.500000e+00
  br i1 %26, label %27, label %31

27:                                               ; preds = %21
  %28 = getelementptr inbounds %"class.webrtc::CongestionWindowPushbackController", %"class.webrtc::CongestionWindowPushbackController"* %0, i64 0, i32 5
  %29 = load double, double* %28, align 8
  %30 = fmul double %29, 9.000000e-01
  store double %30, double* %28, align 8
  br label %51

31:                                               ; preds = %21
  %32 = fcmp ogt double %25, 1.000000e+00
  br i1 %32, label %33, label %37

33:                                               ; preds = %31
  %34 = getelementptr inbounds %"class.webrtc::CongestionWindowPushbackController", %"class.webrtc::CongestionWindowPushbackController"* %0, i64 0, i32 5
  %35 = load double, double* %34, align 8
  %36 = fmul double %35, 0x3FEE666666666666
  store double %36, double* %34, align 8
  br label %51

37:                                               ; preds = %31
  %38 = fcmp olt double %25, 1.000000e-01
  %39 = getelementptr inbounds %"class.webrtc::CongestionWindowPushbackController", %"class.webrtc::CongestionWindowPushbackController"* %0, i64 0, i32 5
  br i1 %38, label %40, label %41

40:                                               ; preds = %37
  store double 1.000000e+00, double* %39, align 8
  br label %51

41:                                               ; preds = %37
  %42 = load double, double* %39, align 8
  %43 = fmul double %42, 1.050000e+00
  store double %43, double* %39, align 8
  %44 = bitcast double* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %44)
  store double 1.000000e+00, double* %3, align 8
  %45 = fcmp ogt double %43, 1.000000e+00
  %46 = select i1 %45, double* %3, double* %39
  %47 = bitcast double* %46 to i64*
  %48 = load i64, i64* %47, align 8
  %49 = bitcast double* %39 to i64*
  store i64 %48, i64* %49, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %44)
  %50 = bitcast i64 %48 to double
  br label %51

51:                                               ; preds = %33, %41, %40, %27
  %52 = phi double [ %36, %33 ], [ %50, %41 ], [ 1.000000e+00, %40 ], [ %30, %27 ]
  %53 = uitofp i32 %1 to double
  %54 = fmul double %52, %53
  %55 = fptoui double %54 to i32
  %56 = getelementptr inbounds %"class.webrtc::CongestionWindowPushbackController", %"class.webrtc::CongestionWindowPushbackController"* %0, i64 0, i32 1
  %57 = load i32, i32* %56, align 4
  %58 = icmp ugt i32 %57, %55
  br i1 %58, label %59, label %62

59:                                               ; preds = %51
  %60 = icmp ult i32 %57, %1
  %61 = select i1 %60, i32 %57, i32 %1
  br label %62

62:                                               ; preds = %2, %59, %51, %7
  %63 = phi i32 [ %1, %7 ], [ %1, %2 ], [ %61, %59 ], [ %55, %51 ]
  ret i32 %63
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #6

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

; Function Attrs: nofree nounwind readonly
declare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #8

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { cold noreturn nounwind }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree nounwind readonly }
attributes #9 = { nounwind }
attributes #10 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = !{i8 0, i8 2}
