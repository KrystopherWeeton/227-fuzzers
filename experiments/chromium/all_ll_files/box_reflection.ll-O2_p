; ModuleID = '../../third_party/blink/renderer/platform/graphics/box_reflection.cc'
source_filename = "../../third_party/blink/renderer/platform/graphics/box_reflection.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::BoxReflection" = type { i32, float, %class.sk_sp, %"class.blink::FloatRect" }
%class.sk_sp = type { %"class.cc::PaintOpBuffer"* }
%"class.cc::PaintOpBuffer" = type <{ %class.SkRefCnt.base, [4 x i8], %"class.std::__1::unique_ptr", i64, i64, i64, i64, i64, i32, i8, [3 x i8] }>
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.blink::FloatRect" = type { %"class.blink::FloatPoint", %"class.blink::FloatSize" }
%"class.blink::FloatPoint" = type { float, float }
%"class.blink::FloatSize" = type { float, float }
%class.SkRefCntBase = type <{ i32 (...)**, %"struct.std::__1::atomic", [4 x i8] }>
%class.SkMatrix = type { [9 x float], i32 }
%struct.SkRect = type { float, float, float, float }

@_ZN5blink13BoxReflectionC1ENS0_19ReflectionDirectionEf = hidden unnamed_addr alias void (%"class.blink::BoxReflection"*, i32, float), void (%"class.blink::BoxReflection"*, i32, float)* @_ZN5blink13BoxReflectionC2ENS0_19ReflectionDirectionEf
@_ZN5blink13BoxReflectionC1ENS0_19ReflectionDirectionEf5sk_spIN2cc13PaintOpBufferEERKNS_9FloatRectE = hidden unnamed_addr alias void (%"class.blink::BoxReflection"*, i32, float, %class.sk_sp*, %"class.blink::FloatRect"*), void (%"class.blink::BoxReflection"*, i32, float, %class.sk_sp*, %"class.blink::FloatRect"*)* @_ZN5blink13BoxReflectionC2ENS0_19ReflectionDirectionEf5sk_spIN2cc13PaintOpBufferEERKNS_9FloatRectE
@_ZN5blink13BoxReflectionC1ERKS0_ = hidden unnamed_addr alias void (%"class.blink::BoxReflection"*, %"class.blink::BoxReflection"*), void (%"class.blink::BoxReflection"*, %"class.blink::BoxReflection"*)* @_ZN5blink13BoxReflectionC2ERKS0_
@_ZN5blink13BoxReflectionD1Ev = hidden unnamed_addr alias void (%"class.blink::BoxReflection"*), void (%"class.blink::BoxReflection"*)* @_ZN5blink13BoxReflectionD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink13BoxReflectionC2ENS0_19ReflectionDirectionEf(%"class.blink::BoxReflection"* nocapture, i32, float) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.blink::BoxReflection", %"class.blink::BoxReflection"* %0, i64 0, i32 0
  store i32 %1, i32* %4, align 8
  %5 = getelementptr inbounds %"class.blink::BoxReflection", %"class.blink::BoxReflection"* %0, i64 0, i32 1
  store float %2, float* %5, align 4
  %6 = getelementptr inbounds %"class.blink::BoxReflection", %"class.blink::BoxReflection"* %0, i64 0, i32 2
  %7 = bitcast %class.sk_sp* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 24, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink13BoxReflectionC2ENS0_19ReflectionDirectionEf5sk_spIN2cc13PaintOpBufferEERKNS_9FloatRectE(%"class.blink::BoxReflection"* nocapture, i32, float, %class.sk_sp* nocapture, %"class.blink::FloatRect"* nocapture readonly dereferenceable(16)) unnamed_addr #0 align 2 {
  %6 = getelementptr inbounds %"class.blink::BoxReflection", %"class.blink::BoxReflection"* %0, i64 0, i32 0
  store i32 %1, i32* %6, align 8
  %7 = getelementptr inbounds %"class.blink::BoxReflection", %"class.blink::BoxReflection"* %0, i64 0, i32 1
  store float %2, float* %7, align 4
  %8 = getelementptr inbounds %"class.blink::BoxReflection", %"class.blink::BoxReflection"* %0, i64 0, i32 2
  %9 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %3, i64 0, i32 0
  %10 = bitcast %class.sk_sp* %3 to i64*
  %11 = load i64, i64* %10, align 8
  store %"class.cc::PaintOpBuffer"* null, %"class.cc::PaintOpBuffer"** %9, align 8
  %12 = bitcast %class.sk_sp* %8 to i64*
  store i64 %11, i64* %12, align 8
  %13 = getelementptr inbounds %"class.blink::BoxReflection", %"class.blink::BoxReflection"* %0, i64 0, i32 3
  %14 = bitcast %"class.blink::FloatRect"* %13 to i8*
  %15 = bitcast %"class.blink::FloatRect"* %4 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %14, i8* align 4 %15, i64 16, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink13BoxReflectionC2ERKS0_(%"class.blink::BoxReflection"* nocapture, %"class.blink::BoxReflection"* nocapture readonly dereferenceable(32)) unnamed_addr #0 align 2 {
  %3 = bitcast %"class.blink::BoxReflection"* %1 to i64*
  %4 = bitcast %"class.blink::BoxReflection"* %0 to i64*
  %5 = load i64, i64* %3, align 8
  store i64 %5, i64* %4, align 8
  %6 = getelementptr inbounds %"class.blink::BoxReflection", %"class.blink::BoxReflection"* %0, i64 0, i32 2, i32 0
  %7 = getelementptr inbounds %"class.blink::BoxReflection", %"class.blink::BoxReflection"* %1, i64 0, i32 2, i32 0
  %8 = load %"class.cc::PaintOpBuffer"*, %"class.cc::PaintOpBuffer"** %7, align 8
  %9 = icmp eq %"class.cc::PaintOpBuffer"* %8, null
  br i1 %9, label %13, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.cc::PaintOpBuffer", %"class.cc::PaintOpBuffer"* %8, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = atomicrmw add i32* %11, i32 1 monotonic
  br label %13

13:                                               ; preds = %2, %10
  store %"class.cc::PaintOpBuffer"* %8, %"class.cc::PaintOpBuffer"** %6, align 8
  %14 = getelementptr inbounds %"class.blink::BoxReflection", %"class.blink::BoxReflection"* %0, i64 0, i32 3
  %15 = getelementptr inbounds %"class.blink::BoxReflection", %"class.blink::BoxReflection"* %1, i64 0, i32 3
  %16 = bitcast %"class.blink::FloatRect"* %14 to i8*
  %17 = bitcast %"class.blink::FloatRect"* %15 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %16, i8* align 8 %17, i64 16, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink13BoxReflectionD2Ev(%"class.blink::BoxReflection"* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::BoxReflection", %"class.blink::BoxReflection"* %0, i64 0, i32 2, i32 0
  %3 = load %"class.cc::PaintOpBuffer"*, %"class.cc::PaintOpBuffer"** %2, align 8
  %4 = icmp eq %"class.cc::PaintOpBuffer"* %3, null
  br i1 %4, label %15, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.cc::PaintOpBuffer", %"class.cc::PaintOpBuffer"* %3, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %7 = atomicrmw add i32* %6, i32 -1 acq_rel
  %8 = icmp eq i32 %7, 1
  br i1 %8, label %9, label %15

9:                                                ; preds = %5
  %10 = bitcast %"class.cc::PaintOpBuffer"* %3 to %class.SkRefCntBase*
  %11 = bitcast %"class.cc::PaintOpBuffer"* %3 to void (%class.SkRefCntBase*)***
  %12 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %11, align 8
  %13 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %12, i64 2
  %14 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %13, align 8
  tail call void %14(%class.SkRefCntBase* nonnull %10) #3
  br label %15

15:                                               ; preds = %1, %5, %9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink13BoxReflection16ReflectionMatrixEv(%class.SkMatrix* noalias sret, %"class.blink::BoxReflection"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 1
  %4 = bitcast %class.SkMatrix* %0 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %4, align 4
  %5 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 4
  %6 = bitcast float* %5 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %6, align 4
  %7 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 8
  store float 1.000000e+00, float* %7, align 4
  store i32 16, i32* %3, align 4
  %8 = getelementptr inbounds %"class.blink::BoxReflection", %"class.blink::BoxReflection"* %1, i64 0, i32 0
  %9 = load i32, i32* %8, align 8
  switch i32 %9, label %20 [
    i32 0, label %10
    i32 1, label %15
  ]

10:                                               ; preds = %2
  %11 = tail call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix8setScaleEff(%class.SkMatrix* %0, float 1.000000e+00, float -1.000000e+00) #3
  %12 = getelementptr inbounds %"class.blink::BoxReflection", %"class.blink::BoxReflection"* %1, i64 0, i32 1
  %13 = load float, float* %12, align 4
  %14 = tail call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix13postTranslateEff(%class.SkMatrix* %0, float 0.000000e+00, float %13) #3
  br label %22

15:                                               ; preds = %2
  %16 = tail call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix8setScaleEff(%class.SkMatrix* %0, float -1.000000e+00, float 1.000000e+00) #3
  %17 = getelementptr inbounds %"class.blink::BoxReflection", %"class.blink::BoxReflection"* %1, i64 0, i32 1
  %18 = load float, float* %17, align 4
  %19 = tail call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix13postTranslateEff(%class.SkMatrix* %0, float %18, float 0.000000e+00) #3
  br label %22

20:                                               ; preds = %2
  %21 = tail call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix5resetEv(%class.SkMatrix* %0) #3
  br label %22

22:                                               ; preds = %20, %15, %10
  ret void
}

declare dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix8setScaleEff(%class.SkMatrix*, float, float) local_unnamed_addr #2

declare dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix13postTranslateEff(%class.SkMatrix*, float, float) local_unnamed_addr #2

declare dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix5resetEv(%class.SkMatrix*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden { <2 x float>, <2 x float> } @_ZNK5blink13BoxReflection7MapRectERKNS_9FloatRectE(%"class.blink::BoxReflection"* nocapture readonly, %"class.blink::FloatRect"* nocapture readonly dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = alloca { <2 x float>, <2 x float> }, align 8
  %4 = bitcast { <2 x float>, <2 x float> }* %3 to %"class.blink::FloatRect"*
  %5 = alloca { <2 x float>, <2 x float> }, align 8
  %6 = bitcast { <2 x float>, <2 x float> }* %5 to %struct.SkRect*
  %7 = alloca %class.SkMatrix, align 4
  %8 = alloca %"class.blink::FloatRect", align 4
  %9 = bitcast { <2 x float>, <2 x float> }* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %9) #3
  %10 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %5, i64 0, i32 0, i64 0
  %11 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %6, i64 0, i32 1
  %12 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %5, i64 0, i32 1, i64 0
  %13 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %6, i64 0, i32 3
  %14 = bitcast %"class.blink::FloatRect"* %1 to <2 x float>*
  %15 = load <2 x float>, <2 x float>* %14, align 4
  %16 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %1, i64 0, i32 1, i32 0
  %17 = bitcast float* %16 to <2 x float>*
  %18 = load <2 x float>, <2 x float>* %17, align 4
  %19 = fadd <2 x float> %15, %18
  %20 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %5, i64 0, i32 0
  store <2 x float> %15, <2 x float>* %20, align 8
  %21 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %5, i64 0, i32 1
  store <2 x float> %19, <2 x float>* %21, align 8
  %22 = bitcast %class.SkMatrix* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %22) #3
  call void @_ZNK5blink13BoxReflection16ReflectionMatrixEv(%class.SkMatrix* nonnull sret %7, %"class.blink::BoxReflection"* %0)
  %23 = call zeroext i1 @_ZNK8SkMatrix7mapRectEP6SkRectRKS0_22SkApplyPerspectiveClip(%class.SkMatrix* nonnull %7, %struct.SkRect* nonnull %6, %struct.SkRect* nonnull dereferenceable(16) %6, i32 1) #3
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %22) #3
  %24 = bitcast { <2 x float>, <2 x float> }* %3 to i8*
  %25 = bitcast %"class.blink::FloatRect"* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %24, i8* align 4 %25, i64 16, i1 false)
  %26 = bitcast %"class.blink::FloatRect"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %26) #3
  %27 = load float, float* %10, align 8
  %28 = load float, float* %11, align 4
  %29 = load float, float* %12, align 8
  %30 = fsub float %29, %27
  %31 = load float, float* %13, align 4
  %32 = fsub float %31, %28
  %33 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %8, i64 0, i32 0, i32 0
  store float %27, float* %33, align 4
  %34 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %8, i64 0, i32 0, i32 1
  store float %28, float* %34, align 4
  %35 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %8, i64 0, i32 1, i32 0
  store float %30, float* %35, align 4
  %36 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %8, i64 0, i32 1, i32 1
  store float %32, float* %36, align 4
  call void @_ZN5blink9FloatRect5UniteERKS0_(%"class.blink::FloatRect"* nonnull %4, %"class.blink::FloatRect"* nonnull dereferenceable(16) %8) #3
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %26) #3
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %9) #3
  %37 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %3, i64 0, i32 0
  %38 = load <2 x float>, <2 x float>* %37, align 8
  %39 = insertvalue { <2 x float>, <2 x float> } undef, <2 x float> %38, 0
  %40 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %3, i64 0, i32 1
  %41 = load <2 x float>, <2 x float>* %40, align 8
  %42 = insertvalue { <2 x float>, <2 x float> } %39, <2 x float> %41, 1
  ret { <2 x float>, <2 x float> } %42
}

declare void @_ZN5blink9FloatRect5UniteERKS0_(%"class.blink::FloatRect"*, %"class.blink::FloatRect"* dereferenceable(16)) local_unnamed_addr #2

declare zeroext i1 @_ZNK8SkMatrix7mapRectEP6SkRectRKS0_22SkApplyPerspectiveClip(%class.SkMatrix*, %struct.SkRect*, %struct.SkRect* dereferenceable(16), i32) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
