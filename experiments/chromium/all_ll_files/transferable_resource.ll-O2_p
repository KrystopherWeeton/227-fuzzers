; ModuleID = '../../components/viz/common/resources/transferable_resource.cc'
source_filename = "../../components/viz/common/resources/transferable_resource.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.viz::TransferableResource" = type { %"class.util::IdType", i8, %"class.gfx::Size", i32, [4 x i8], %"struct.gpu::MailboxHolder", %"class.gfx::ColorSpace", %"class.absl::optional", i8, i32, i8, [7 x i8], %"class.absl::optional.2" }
%"class.util::IdType" = type { %"class.base::StrongAlias" }
%"class.base::StrongAlias" = type { i32 }
%"class.gfx::Size" = type { i32, i32 }
%"struct.gpu::MailboxHolder" = type <{ %"struct.gpu::Mailbox", %"struct.gpu::SyncToken", i32, [4 x i8] }>
%"struct.gpu::Mailbox" = type { [16 x i8] }
%"struct.gpu::SyncToken" = type { i8, i8, %"class.util::IdType.0", i64 }
%"class.util::IdType.0" = type { %"class.base::StrongAlias.1" }
%"class.base::StrongAlias.1" = type { i64 }
%"class.gfx::ColorSpace" = type { i8, i8, i8, i8, [9 x float], [7 x float] }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"struct.gfx::HDRMetadata" }
%"struct.gfx::HDRMetadata" = type { %"struct.gfx::MasteringMetadata", i32, i32 }
%"struct.gfx::MasteringMetadata" = type { %"class.gfx::PointF", %"class.gfx::PointF", %"class.gfx::PointF", %"class.gfx::PointF", float, float }
%"class.gfx::PointF" = type { float, float }
%"class.absl::optional.2" = type { %"class.absl::optional_internal::optional_data.3" }
%"class.absl::optional_internal::optional_data.3" = type { %"class.absl::optional_internal::optional_data_base.4" }
%"class.absl::optional_internal::optional_data_base.4" = type { %"class.absl::optional_internal::optional_data_dtor_base.5" }
%"class.absl::optional_internal::optional_data_dtor_base.5" = type { i8, [7 x i8], %union.anon.6 }
%union.anon.6 = type { %"struct.gpu::VulkanYCbCrInfo" }
%"struct.gpu::VulkanYCbCrInfo" = type <{ i32, [4 x i8], i64, i32, i32, i32, i32, i32, [4 x i8] }>
%"struct.viz::ReturnedResource" = type <{ %"class.util::IdType", [4 x i8], %"struct.gpu::SyncToken", %"struct.gfx::GpuFenceHandle", i32, i8, [3 x i8] }>
%"struct.gfx::GpuFenceHandle" = type { %"class.base::ScopedGeneric" }
%"class.base::ScopedGeneric" = type <{ i32 (...)**, %"struct.base::ScopedGeneric<int, base::internal::ScopedFDCloseTraits>::Data", i8, [3 x i8] }>
%"struct.base::ScopedGeneric<int, base::internal::ScopedFDCloseTraits>::Data" = type { i32 }
%"class.std::__1::vector.8" = type { %"class.std::__1::__vector_base.9" }
%"class.std::__1::__vector_base.9" = type { %"struct.viz::ReturnedResource"*, %"struct.viz::ReturnedResource"*, %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { %"struct.viz::ReturnedResource"* }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.viz::TransferableResource"*, %"struct.viz::TransferableResource"*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.viz::TransferableResource"* }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZNSt3__16vectorIN3viz16ReturnedResourceENS_9allocatorIS2_EEE7reserveEm = comdat any

$_ZNSt3__16vectorIN3viz16ReturnedResourceENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_ = comdat any

@_ZN3viz20TransferableResourceC1Ev = hidden unnamed_addr alias void (%"struct.viz::TransferableResource"*), void (%"struct.viz::TransferableResource"*)* @_ZN3viz20TransferableResourceC2Ev
@_ZN3viz20TransferableResourceD1Ev = hidden unnamed_addr alias void (%"struct.viz::TransferableResource"*), void (%"struct.viz::TransferableResource"*)* @_ZN3viz20TransferableResourceD2Ev
@_ZN3viz20TransferableResourceC1ERKS0_ = hidden unnamed_addr alias void (%"struct.viz::TransferableResource"*, %"struct.viz::TransferableResource"*), void (%"struct.viz::TransferableResource"*, %"struct.viz::TransferableResource"*)* @_ZN3viz20TransferableResourceC2ERKS0_

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz20TransferableResourceC2Ev(%"struct.viz::TransferableResource"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"struct.viz::TransferableResource", %"struct.viz::TransferableResource"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 0, i32* %2, align 8
  %3 = getelementptr inbounds %"struct.viz::TransferableResource", %"struct.viz::TransferableResource"* %0, i64 0, i32 1
  store i8 0, i8* %3, align 4
  %4 = getelementptr inbounds %"struct.viz::TransferableResource", %"struct.viz::TransferableResource"* %0, i64 0, i32 2, i32 0
  store i32 0, i32* %4, align 4
  %5 = getelementptr inbounds %"struct.viz::TransferableResource", %"struct.viz::TransferableResource"* %0, i64 0, i32 2, i32 1
  store i32 0, i32* %5, align 4
  %6 = getelementptr inbounds %"struct.viz::TransferableResource", %"struct.viz::TransferableResource"* %0, i64 0, i32 3
  store i32 0, i32* %6, align 8
  %7 = getelementptr inbounds %"struct.viz::TransferableResource", %"struct.viz::TransferableResource"* %0, i64 0, i32 5
  tail call void @_ZN3gpu13MailboxHolderC1Ev(%"struct.gpu::MailboxHolder"* %7) #10
  %8 = getelementptr inbounds %"struct.viz::TransferableResource", %"struct.viz::TransferableResource"* %0, i64 0, i32 6, i32 0
  %9 = getelementptr inbounds %"struct.viz::TransferableResource", %"struct.viz::TransferableResource"* %0, i64 0, i32 7, i32 0, i32 0, i32 0, i32 1
  %10 = getelementptr inbounds %"struct.viz::TransferableResource", %"struct.viz::TransferableResource"* %0, i64 0, i32 9
  store i32 0, i32* %10, align 4
  %11 = getelementptr inbounds %"struct.viz::TransferableResource", %"struct.viz::TransferableResource"* %0, i64 0, i32 10
  store i8 0, i8* %11, align 8
  %12 = getelementptr inbounds %"struct.viz::TransferableResource", %"struct.viz::TransferableResource"* %0, i64 0, i32 12, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %12, align 8
  %13 = getelementptr inbounds %"struct.viz::TransferableResource", %"struct.viz::TransferableResource"* %0, i64 0, i32 12, i32 0, i32 0, i32 0, i32 2
  %14 = bitcast %union.anon.6* %13 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %14, i8 0, i64 40, i1 false) #10
  call void @llvm.memset.p0i8.i64(i8* align 4 %8, i8 0, i64 69, i1 false)
  %15 = bitcast %union.anon* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %15, i8 0, i64 49, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare void @_ZN3gpu13MailboxHolderC1Ev(%"struct.gpu::MailboxHolder"*) unnamed_addr #2

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN3viz20TransferableResourceD2Ev(%"struct.viz::TransferableResource"* nocapture) unnamed_addr #3 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz20TransferableResourceC2ERKS0_(%"struct.viz::TransferableResource"*, %"struct.viz::TransferableResource"* dereferenceable(256)) unnamed_addr #0 align 2 {
  %3 = bitcast %"struct.viz::TransferableResource"* %0 to i8*
  %4 = bitcast %"struct.viz::TransferableResource"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %4, i64 20, i1 false)
  %5 = getelementptr inbounds %"struct.viz::TransferableResource", %"struct.viz::TransferableResource"* %0, i64 0, i32 5, i32 0, i32 0, i64 0
  %6 = getelementptr inbounds %"struct.viz::TransferableResource", %"struct.viz::TransferableResource"* %1, i64 0, i32 5, i32 0, i32 0, i64 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %5, i8* align 8 %6, i64 16, i1 false) #10
  %7 = getelementptr inbounds %"struct.viz::TransferableResource", %"struct.viz::TransferableResource"* %0, i64 0, i32 5, i32 1
  %8 = getelementptr inbounds %"struct.viz::TransferableResource", %"struct.viz::TransferableResource"* %1, i64 0, i32 5, i32 1
  tail call void @_ZN3gpu9SyncTokenC1ERKS0_(%"struct.gpu::SyncToken"* %7, %"struct.gpu::SyncToken"* dereferenceable(24) %8) #10
  %9 = getelementptr inbounds %"struct.viz::TransferableResource", %"struct.viz::TransferableResource"* %0, i64 0, i32 5, i32 2
  %10 = getelementptr inbounds %"struct.viz::TransferableResource", %"struct.viz::TransferableResource"* %1, i64 0, i32 5, i32 2
  %11 = load i32, i32* %10, align 8
  store i32 %11, i32* %9, align 8
  %12 = getelementptr inbounds %"struct.viz::TransferableResource", %"struct.viz::TransferableResource"* %0, i64 0, i32 6, i32 0
  %13 = getelementptr inbounds %"struct.viz::TransferableResource", %"struct.viz::TransferableResource"* %1, i64 0, i32 6, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %12, i8* align 8 %13, i64 68, i1 false)
  %14 = getelementptr inbounds %"struct.viz::TransferableResource", %"struct.viz::TransferableResource"* %0, i64 0, i32 7, i32 0, i32 0, i32 0, i32 0
  %15 = getelementptr inbounds %"struct.viz::TransferableResource", %"struct.viz::TransferableResource"* %1, i64 0, i32 7, i32 0, i32 0, i32 0, i32 0
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %14, i8 0, i64 52, i1 false) #10
  %16 = load i8, i8* %15, align 4, !range !2
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %21, label %18

18:                                               ; preds = %2
  %19 = getelementptr inbounds %"struct.viz::TransferableResource", %"struct.viz::TransferableResource"* %1, i64 0, i32 7, i32 0, i32 0, i32 0, i32 1, i32 0
  %20 = getelementptr inbounds %"struct.viz::TransferableResource", %"struct.viz::TransferableResource"* %0, i64 0, i32 7, i32 0, i32 0, i32 0, i32 1, i32 0
  tail call void @_ZN3gfx11HDRMetadataC1ERKS0_(%"struct.gfx::HDRMetadata"* %20, %"struct.gfx::HDRMetadata"* dereferenceable(48) %19) #10
  store i8 1, i8* %14, align 4
  br label %21

21:                                               ; preds = %2, %18
  %22 = getelementptr inbounds %"struct.viz::TransferableResource", %"struct.viz::TransferableResource"* %0, i64 0, i32 8
  %23 = getelementptr inbounds %"struct.viz::TransferableResource", %"struct.viz::TransferableResource"* %1, i64 0, i32 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %22, i8* align 8 %23, i64 64, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(256) %"struct.viz::TransferableResource"* @_ZN3viz20TransferableResourceaSERKS0_(%"struct.viz::TransferableResource"* returned, %"struct.viz::TransferableResource"* dereferenceable(256)) local_unnamed_addr #0 align 2 {
  %3 = bitcast %"struct.viz::TransferableResource"* %0 to i8*
  %4 = bitcast %"struct.viz::TransferableResource"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %4, i64 140, i1 false)
  %5 = getelementptr inbounds %"struct.viz::TransferableResource", %"struct.viz::TransferableResource"* %0, i64 0, i32 7
  %6 = getelementptr inbounds %"struct.viz::TransferableResource", %"struct.viz::TransferableResource"* %1, i64 0, i32 7, i32 0, i32 0, i32 0, i32 0
  %7 = load i8, i8* %6, align 4, !range !2
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %19, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"struct.viz::TransferableResource", %"struct.viz::TransferableResource"* %1, i64 0, i32 7, i32 0, i32 0, i32 0, i32 1, i32 0
  %11 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %5, i64 0, i32 0, i32 0, i32 0, i32 0
  %12 = load i8, i8* %11, align 4, !range !2
  %13 = icmp eq i8 %12, 0
  %14 = getelementptr inbounds %"struct.viz::TransferableResource", %"struct.viz::TransferableResource"* %0, i64 0, i32 7, i32 0, i32 0, i32 0, i32 1, i32 0
  br i1 %13, label %18, label %15

15:                                               ; preds = %9
  %16 = bitcast %"struct.gfx::HDRMetadata"* %14 to i8*
  %17 = bitcast %"struct.gfx::HDRMetadata"* %10 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %16, i8* align 4 %17, i64 48, i1 false) #10
  br label %21

18:                                               ; preds = %9
  tail call void @_ZN3gfx11HDRMetadataC1ERKS0_(%"struct.gfx::HDRMetadata"* %14, %"struct.gfx::HDRMetadata"* dereferenceable(48) %10) #10
  store i8 1, i8* %11, align 4
  br label %21

19:                                               ; preds = %2
  %20 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %5, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %20, align 4
  br label %21

21:                                               ; preds = %15, %18, %19
  %22 = getelementptr inbounds %"struct.viz::TransferableResource", %"struct.viz::TransferableResource"* %0, i64 0, i32 8
  %23 = getelementptr inbounds %"struct.viz::TransferableResource", %"struct.viz::TransferableResource"* %1, i64 0, i32 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %22, i8* align 8 %23, i64 64, i1 false)
  ret %"struct.viz::TransferableResource"* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK3viz20TransferableResource18ToReturnedResourceEv(%"struct.viz::ReturnedResource"* noalias sret, %"struct.viz::TransferableResource"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = bitcast %"struct.viz::ReturnedResource"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 -86, i64 56, i1 false)
  tail call void @_ZN3viz16ReturnedResourceC1Ev(%"struct.viz::ReturnedResource"* %0) #10
  %4 = getelementptr inbounds %"struct.viz::TransferableResource", %"struct.viz::TransferableResource"* %1, i64 0, i32 0, i32 0, i32 0
  %5 = getelementptr inbounds %"struct.viz::ReturnedResource", %"struct.viz::ReturnedResource"* %0, i64 0, i32 0, i32 0, i32 0
  %6 = load i32, i32* %4, align 4
  store i32 %6, i32* %5, align 8
  %7 = getelementptr inbounds %"struct.viz::ReturnedResource", %"struct.viz::ReturnedResource"* %0, i64 0, i32 2, i32 0
  %8 = getelementptr inbounds %"struct.viz::TransferableResource", %"struct.viz::TransferableResource"* %1, i64 0, i32 5, i32 1, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %7, i8* align 8 %8, i64 24, i1 false)
  %9 = getelementptr inbounds %"struct.viz::ReturnedResource", %"struct.viz::ReturnedResource"* %0, i64 0, i32 4
  store i32 1, i32* %9, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_ZN3viz16ReturnedResourceC1Ev(%"struct.viz::ReturnedResource"*) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN3viz16ReturnedResourceD1Ev(%"struct.viz::ReturnedResource"*) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz20TransferableResource15ReturnResourcesERKNSt3__16vectorIS0_NS1_9allocatorIS0_EEEE(%"class.std::__1::vector.8"* noalias sret, %"class.std::__1::vector"* nocapture readonly dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"struct.viz::ReturnedResource", align 8
  %4 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %0, i64 0, i32 0, i32 1
  %5 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %6 = bitcast %"class.std::__1::vector.8"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 24, i1 false) #10
  %7 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 1
  %8 = bitcast %"struct.viz::TransferableResource"** %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = bitcast %"class.std::__1::vector"* %1 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = sub i64 %9, %11
  %13 = ashr exact i64 %12, 8
  tail call void @_ZNSt3__16vectorIN3viz16ReturnedResourceENS_9allocatorIS2_EEE7reserveEm(%"class.std::__1::vector.8"* %0, i64 %13)
  %14 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 0
  %15 = load %"struct.viz::TransferableResource"*, %"struct.viz::TransferableResource"** %14, align 8
  %16 = load %"struct.viz::TransferableResource"*, %"struct.viz::TransferableResource"** %7, align 8
  %17 = icmp eq %"struct.viz::TransferableResource"* %15, %16
  br i1 %17, label %24, label %18

18:                                               ; preds = %2
  %19 = bitcast %"struct.viz::ReturnedResource"* %3 to i8*
  %20 = getelementptr inbounds %"struct.viz::ReturnedResource", %"struct.viz::ReturnedResource"* %3, i64 0, i32 0, i32 0, i32 0
  %21 = getelementptr inbounds %"struct.viz::ReturnedResource", %"struct.viz::ReturnedResource"* %3, i64 0, i32 2, i32 0
  %22 = getelementptr inbounds %"struct.viz::ReturnedResource", %"struct.viz::ReturnedResource"* %3, i64 0, i32 4
  %23 = bitcast %"struct.viz::ReturnedResource"** %4 to i64*
  br label %25

24:                                               ; preds = %37, %2
  ret void

25:                                               ; preds = %18, %37
  %26 = phi %"struct.viz::TransferableResource"* [ %15, %18 ], [ %38, %37 ]
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %19) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %19, i8 -86, i64 56, i1 false) #10, !alias.scope !3
  call void @_ZN3viz16ReturnedResourceC1Ev(%"struct.viz::ReturnedResource"* nonnull %3) #10
  %27 = getelementptr inbounds %"struct.viz::TransferableResource", %"struct.viz::TransferableResource"* %26, i64 0, i32 0, i32 0, i32 0
  %28 = load i32, i32* %27, align 4, !noalias !3
  store i32 %28, i32* %20, align 8, !alias.scope !3
  %29 = getelementptr inbounds %"struct.viz::TransferableResource", %"struct.viz::TransferableResource"* %26, i64 0, i32 5, i32 1, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %21, i8* align 8 %29, i64 24, i1 false) #10
  store i32 1, i32* %22, align 8, !alias.scope !3
  %30 = load %"struct.viz::ReturnedResource"*, %"struct.viz::ReturnedResource"** %4, align 8
  %31 = load %"struct.viz::ReturnedResource"*, %"struct.viz::ReturnedResource"** %5, align 8
  %32 = icmp ult %"struct.viz::ReturnedResource"* %30, %31
  br i1 %32, label %33, label %36

33:                                               ; preds = %25
  call void @_ZN3viz16ReturnedResourceC1EOS0_(%"struct.viz::ReturnedResource"* %30, %"struct.viz::ReturnedResource"* nonnull dereferenceable(56) %3) #10
  %34 = getelementptr inbounds %"struct.viz::ReturnedResource", %"struct.viz::ReturnedResource"* %30, i64 1
  %35 = ptrtoint %"struct.viz::ReturnedResource"* %34 to i64
  store i64 %35, i64* %23, align 8
  br label %37

36:                                               ; preds = %25
  call void @_ZNSt3__16vectorIN3viz16ReturnedResourceENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(%"class.std::__1::vector.8"* %0, %"struct.viz::ReturnedResource"* nonnull dereferenceable(56) %3) #10
  br label %37

37:                                               ; preds = %33, %36
  call void @_ZN3viz16ReturnedResourceD1Ev(%"struct.viz::ReturnedResource"* nonnull %3) #10
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %19) #10
  %38 = getelementptr inbounds %"struct.viz::TransferableResource", %"struct.viz::TransferableResource"* %26, i64 1
  %39 = icmp eq %"struct.viz::TransferableResource"* %38, %16
  br i1 %39, label %24, label %25
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3viz16ReturnedResourceENS_9allocatorIS2_EEE7reserveEm(%"class.std::__1::vector.8"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"struct.viz::ReturnedResource"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.8"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = sdiv exact i64 %8, 56
  %10 = icmp ult i64 %9, %1
  %11 = inttoptr i64 %7 to %"struct.viz::ReturnedResource"*
  br i1 %10, label %12, label %55

12:                                               ; preds = %2
  %13 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %0, i64 0, i32 0, i32 1
  %14 = bitcast %"struct.viz::ReturnedResource"** %13 to i64*
  %15 = icmp ugt i64 %1, 329406144173384850
  br i1 %15, label %16, label %17

16:                                               ; preds = %12
  tail call void @abort() #11
  unreachable

17:                                               ; preds = %12
  %18 = load i64, i64* %14, align 8
  %19 = sub i64 %18, %7
  %20 = sdiv exact i64 %19, 56
  %21 = mul i64 %1, 56
  %22 = tail call i8* @_Znwm(i64 %21) #12
  %23 = bitcast i8* %22 to %"struct.viz::ReturnedResource"*
  %24 = getelementptr inbounds %"struct.viz::ReturnedResource", %"struct.viz::ReturnedResource"* %23, i64 %20
  %25 = ptrtoint %"struct.viz::ReturnedResource"* %24 to i64
  %26 = getelementptr inbounds %"struct.viz::ReturnedResource", %"struct.viz::ReturnedResource"* %23, i64 %1
  %27 = ptrtoint %"struct.viz::ReturnedResource"* %26 to i64
  %28 = inttoptr i64 %18 to %"struct.viz::ReturnedResource"*
  %29 = icmp eq %"struct.viz::ReturnedResource"* %28, %11
  br i1 %29, label %41, label %30

30:                                               ; preds = %17, %30
  %31 = phi %"struct.viz::ReturnedResource"* [ %33, %30 ], [ %24, %17 ]
  %32 = phi %"struct.viz::ReturnedResource"* [ %34, %30 ], [ %28, %17 ]
  %33 = getelementptr inbounds %"struct.viz::ReturnedResource", %"struct.viz::ReturnedResource"* %31, i64 -1
  %34 = getelementptr inbounds %"struct.viz::ReturnedResource", %"struct.viz::ReturnedResource"* %32, i64 -1
  tail call void @_ZN3viz16ReturnedResourceC1EOS0_(%"struct.viz::ReturnedResource"* %33, %"struct.viz::ReturnedResource"* dereferenceable(56) %34) #10
  %35 = icmp eq %"struct.viz::ReturnedResource"* %34, %11
  br i1 %35, label %36, label %30

36:                                               ; preds = %30
  %37 = ptrtoint %"struct.viz::ReturnedResource"* %33 to i64
  %38 = load i64, i64* %6, align 8
  %39 = load %"struct.viz::ReturnedResource"*, %"struct.viz::ReturnedResource"** %13, align 8
  %40 = inttoptr i64 %38 to %"struct.viz::ReturnedResource"*
  br label %41

41:                                               ; preds = %17, %36
  %42 = phi %"struct.viz::ReturnedResource"* [ %40, %36 ], [ %28, %17 ]
  %43 = phi %"struct.viz::ReturnedResource"* [ %39, %36 ], [ %11, %17 ]
  %44 = phi i64 [ %37, %36 ], [ %25, %17 ]
  %45 = phi i64 [ %38, %36 ], [ %18, %17 ]
  store i64 %44, i64* %6, align 8
  store i64 %25, i64* %14, align 8
  store i64 %27, i64* %4, align 8
  %46 = icmp eq %"struct.viz::ReturnedResource"* %43, %42
  br i1 %46, label %51, label %47

47:                                               ; preds = %41, %47
  %48 = phi %"struct.viz::ReturnedResource"* [ %49, %47 ], [ %43, %41 ]
  %49 = getelementptr inbounds %"struct.viz::ReturnedResource", %"struct.viz::ReturnedResource"* %48, i64 -1
  tail call void @_ZN3viz16ReturnedResourceD1Ev(%"struct.viz::ReturnedResource"* %49) #10
  %50 = icmp eq %"struct.viz::ReturnedResource"* %49, %42
  br i1 %50, label %51, label %47

51:                                               ; preds = %47, %41
  %52 = icmp eq i64 %45, 0
  br i1 %52, label %55, label %53

53:                                               ; preds = %51
  %54 = inttoptr i64 %45 to i8*
  tail call void @_ZdlPv(i8* %54) #12
  br label %55

55:                                               ; preds = %53, %51, %2
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN3gpu9SyncTokenC1ERKS0_(%"struct.gpu::SyncToken"*, %"struct.gpu::SyncToken"* dereferenceable(24)) unnamed_addr #2

declare void @_ZN3gfx11HDRMetadataC1ERKS0_(%"struct.gfx::HDRMetadata"*, %"struct.gfx::HDRMetadata"* dereferenceable(48)) unnamed_addr #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #6

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #7

declare void @_ZN3viz16ReturnedResourceC1EOS0_(%"struct.viz::ReturnedResource"*, %"struct.viz::ReturnedResource"* dereferenceable(56)) unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3viz16ReturnedResourceENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(%"class.std::__1::vector.8"*, %"struct.viz::ReturnedResource"* dereferenceable(56)) local_unnamed_addr #8 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"struct.viz::ReturnedResource"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.8"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = sdiv exact i64 %8, 56
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 329406144173384850
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector.8"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #11
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"struct.viz::ReturnedResource"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = sdiv exact i64 %18, 56
  %20 = icmp ult i64 %19, 164703072086692425
  br i1 %20, label %21, label %26

21:                                               ; preds = %14
  %22 = shl nsw i64 %19, 1
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %31, label %26

26:                                               ; preds = %14, %21
  %27 = phi i64 [ %24, %21 ], [ 329406144173384850, %14 ]
  %28 = mul i64 %27, 56
  %29 = tail call i8* @_Znwm(i64 %28) #12
  %30 = bitcast i8* %29 to %"struct.viz::ReturnedResource"*
  br label %31

31:                                               ; preds = %21, %26
  %32 = phi i64 [ %27, %26 ], [ 0, %21 ]
  %33 = phi %"struct.viz::ReturnedResource"* [ %30, %26 ], [ null, %21 ]
  %34 = getelementptr inbounds %"struct.viz::ReturnedResource", %"struct.viz::ReturnedResource"* %33, i64 %9
  %35 = getelementptr inbounds %"struct.viz::ReturnedResource", %"struct.viz::ReturnedResource"* %33, i64 %32
  %36 = ptrtoint %"struct.viz::ReturnedResource"* %35 to i64
  tail call void @_ZN3viz16ReturnedResourceC1EOS0_(%"struct.viz::ReturnedResource"* %34, %"struct.viz::ReturnedResource"* dereferenceable(56) %1) #10
  %37 = getelementptr inbounds %"struct.viz::ReturnedResource", %"struct.viz::ReturnedResource"* %34, i64 1
  %38 = ptrtoint %"struct.viz::ReturnedResource"* %37 to i64
  %39 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %0, i64 0, i32 0, i32 0
  %40 = load %"struct.viz::ReturnedResource"*, %"struct.viz::ReturnedResource"** %39, align 8
  %41 = load %"struct.viz::ReturnedResource"*, %"struct.viz::ReturnedResource"** %3, align 8
  %42 = icmp eq %"struct.viz::ReturnedResource"* %41, %40
  br i1 %42, label %43, label %45

43:                                               ; preds = %31
  %44 = ptrtoint %"struct.viz::ReturnedResource"* %40 to i64
  br label %54

45:                                               ; preds = %31, %45
  %46 = phi %"struct.viz::ReturnedResource"* [ %48, %45 ], [ %34, %31 ]
  %47 = phi %"struct.viz::ReturnedResource"* [ %49, %45 ], [ %41, %31 ]
  %48 = getelementptr inbounds %"struct.viz::ReturnedResource", %"struct.viz::ReturnedResource"* %46, i64 -1
  %49 = getelementptr inbounds %"struct.viz::ReturnedResource", %"struct.viz::ReturnedResource"* %47, i64 -1
  tail call void @_ZN3viz16ReturnedResourceC1EOS0_(%"struct.viz::ReturnedResource"* %48, %"struct.viz::ReturnedResource"* dereferenceable(56) %49) #10
  %50 = icmp eq %"struct.viz::ReturnedResource"* %49, %40
  br i1 %50, label %51, label %45

51:                                               ; preds = %45
  %52 = load i64, i64* %6, align 8
  %53 = load %"struct.viz::ReturnedResource"*, %"struct.viz::ReturnedResource"** %3, align 8
  br label %54

54:                                               ; preds = %43, %51
  %55 = phi %"struct.viz::ReturnedResource"* [ %40, %43 ], [ %53, %51 ]
  %56 = phi %"struct.viz::ReturnedResource"* [ %34, %43 ], [ %48, %51 ]
  %57 = phi i64 [ %44, %43 ], [ %52, %51 ]
  %58 = ptrtoint %"struct.viz::ReturnedResource"* %56 to i64
  store i64 %58, i64* %6, align 8
  store i64 %38, i64* %4, align 8
  store i64 %36, i64* %16, align 8
  %59 = inttoptr i64 %57 to %"struct.viz::ReturnedResource"*
  %60 = icmp eq %"struct.viz::ReturnedResource"* %55, %59
  br i1 %60, label %65, label %61

61:                                               ; preds = %54, %61
  %62 = phi %"struct.viz::ReturnedResource"* [ %63, %61 ], [ %55, %54 ]
  %63 = getelementptr inbounds %"struct.viz::ReturnedResource", %"struct.viz::ReturnedResource"* %62, i64 -1
  tail call void @_ZN3viz16ReturnedResourceD1Ev(%"struct.viz::ReturnedResource"* %63) #10
  %64 = icmp eq %"struct.viz::ReturnedResource"* %63, %59
  br i1 %64, label %65, label %61

65:                                               ; preds = %61, %54
  %66 = icmp eq i64 %57, 0
  br i1 %66, label %69, label %67

67:                                               ; preds = %65
  %68 = inttoptr i64 %57 to i8*
  tail call void @_ZdlPv(i8* %68) #12
  br label %69

69:                                               ; preds = %65, %67
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #9

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { noreturn nounwind }
attributes #12 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!4}
!4 = distinct !{!4, !5, !"_ZNK3viz20TransferableResource18ToReturnedResourceEv: argument 0"}
!5 = distinct !{!5, !"_ZNK3viz20TransferableResource18ToReturnedResourceEv"}
