; ModuleID = '../../components/url_matcher/string_pattern.cc'
source_filename = "../../components/url_matcher/string_pattern.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.url_matcher::StringPattern" = type <{ %"class.std::__1::basic_string", i32, [4 x i8] }>
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }

@_ZN11url_matcher13StringPatternC1ENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEi = hidden unnamed_addr alias void (%"class.url_matcher::StringPattern"*, %"class.std::__1::basic_string"*, i32), void (%"class.url_matcher::StringPattern"*, %"class.std::__1::basic_string"*, i32)* @_ZN11url_matcher13StringPatternC2ENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEi
@_ZN11url_matcher13StringPatternD1Ev = hidden unnamed_addr alias void (%"class.url_matcher::StringPattern"*), void (%"class.url_matcher::StringPattern"*)* @_ZN11url_matcher13StringPatternD2Ev
@_ZN11url_matcher13StringPatternC1EOS0_ = hidden unnamed_addr alias void (%"class.url_matcher::StringPattern"*, %"class.url_matcher::StringPattern"*), void (%"class.url_matcher::StringPattern"*, %"class.url_matcher::StringPattern"*)* @_ZN11url_matcher13StringPatternC2EOS0_

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11url_matcher13StringPatternC2ENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEi(%"class.url_matcher::StringPattern"* nocapture, %"class.std::__1::basic_string"* nocapture, i32) unnamed_addr #0 align 2 {
  %4 = bitcast %"class.url_matcher::StringPattern"* %0 to i8*
  %5 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %4, i8* align 8 %5, i64 24, i1 false) #5
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 24, i1 false) #5
  %6 = getelementptr inbounds %"class.url_matcher::StringPattern", %"class.url_matcher::StringPattern"* %0, i64 0, i32 1
  store i32 %2, i32* %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11url_matcher13StringPatternD2Ev(%"class.url_matcher::StringPattern"* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.url_matcher::StringPattern"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %3 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %2, i64 0, i32 1, i32 0
  %4 = load i8, i8* %3, align 1
  %5 = icmp slt i8 %4, 0
  br i1 %5, label %6, label %9

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.url_matcher::StringPattern", %"class.url_matcher::StringPattern"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = load i8*, i8** %7, align 8
  tail call void @_ZdlPv(i8* %8) #6
  br label %9

9:                                                ; preds = %1, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11url_matcher13StringPatternC2EOS0_(%"class.url_matcher::StringPattern"* nocapture, %"class.url_matcher::StringPattern"* nocapture dereferenceable(32)) unnamed_addr #0 align 2 {
  %3 = bitcast %"class.url_matcher::StringPattern"* %0 to i8*
  %4 = bitcast %"class.url_matcher::StringPattern"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %4, i64 24, i1 false) #5
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 0, i64 24, i1 false) #5
  %5 = getelementptr inbounds %"class.url_matcher::StringPattern", %"class.url_matcher::StringPattern"* %0, i64 0, i32 1
  %6 = getelementptr inbounds %"class.url_matcher::StringPattern", %"class.url_matcher::StringPattern"* %1, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  store i32 %7, i32* %5, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(32) %"class.url_matcher::StringPattern"* @_ZN11url_matcher13StringPatternaSEOS0_(%"class.url_matcher::StringPattern"* returned, %"class.url_matcher::StringPattern"* nocapture dereferenceable(32)) local_unnamed_addr #0 align 2 {
  %3 = bitcast %"class.url_matcher::StringPattern"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %4 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %3, i64 0, i32 1, i32 0
  %5 = load i8, i8* %4, align 1
  %6 = icmp slt i8 %5, 0
  br i1 %6, label %7, label %10

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.url_matcher::StringPattern", %"class.url_matcher::StringPattern"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = load i8*, i8** %8, align 8
  tail call void @_ZdlPv(i8* %9) #6
  br label %10

10:                                               ; preds = %2, %7
  %11 = bitcast %"class.url_matcher::StringPattern"* %0 to i8*
  %12 = bitcast %"class.url_matcher::StringPattern"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %11, i8* align 8 %12, i64 24, i1 false) #5
  %13 = bitcast %"class.url_matcher::StringPattern"* %1 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %14 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %13, i64 0, i32 1, i32 0
  store i8 0, i8* %14, align 1
  store i8 0, i8* %12, align 1
  %15 = getelementptr inbounds %"class.url_matcher::StringPattern", %"class.url_matcher::StringPattern"* %1, i64 0, i32 1
  %16 = load i32, i32* %15, align 8
  %17 = getelementptr inbounds %"class.url_matcher::StringPattern", %"class.url_matcher::StringPattern"* %0, i64 0, i32 1
  store i32 %16, i32* %17, align 8
  ret %"class.url_matcher::StringPattern"* %0
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK11url_matcher13StringPatternltERKS0_(%"class.url_matcher::StringPattern"*, %"class.url_matcher::StringPattern"* dereferenceable(32)) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.url_matcher::StringPattern", %"class.url_matcher::StringPattern"* %0, i64 0, i32 1
  %4 = getelementptr inbounds %"class.url_matcher::StringPattern", %"class.url_matcher::StringPattern"* %1, i64 0, i32 1
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = icmp slt i32 %5, %6
  br i1 %7, label %45, label %8

8:                                                ; preds = %2
  %9 = icmp slt i32 %6, %5
  br i1 %9, label %45, label %10

10:                                               ; preds = %8
  %11 = bitcast %"class.url_matcher::StringPattern"* %1 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %12 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %11, i64 0, i32 1, i32 0
  %13 = load i8, i8* %12, align 1
  %14 = icmp slt i8 %13, 0
  %15 = getelementptr inbounds %"class.url_matcher::StringPattern", %"class.url_matcher::StringPattern"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %16 = load i64, i64* %15, align 8
  %17 = zext i8 %13 to i64
  %18 = select i1 %14, i64 %16, i64 %17
  %19 = bitcast %"class.url_matcher::StringPattern"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %20 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %19, i64 0, i32 1, i32 0
  %21 = load i8, i8* %20, align 1
  %22 = icmp slt i8 %21, 0
  %23 = getelementptr inbounds %"class.url_matcher::StringPattern", %"class.url_matcher::StringPattern"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %24 = load i64, i64* %23, align 8
  %25 = zext i8 %21 to i64
  %26 = select i1 %22, i64 %24, i64 %25
  %27 = icmp ult i64 %18, %26
  %28 = select i1 %27, i64 %18, i64 %26
  %29 = icmp eq i64 %28, 0
  br i1 %29, label %41, label %30

30:                                               ; preds = %10
  %31 = getelementptr inbounds %"class.url_matcher::StringPattern", %"class.url_matcher::StringPattern"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %32 = load i8*, i8** %31, align 8
  %33 = bitcast %"class.url_matcher::StringPattern"* %0 to i8*
  %34 = select i1 %22, i8* %32, i8* %33
  %35 = getelementptr inbounds %"class.url_matcher::StringPattern", %"class.url_matcher::StringPattern"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %36 = load i8*, i8** %35, align 8
  %37 = bitcast %"class.url_matcher::StringPattern"* %1 to i8*
  %38 = select i1 %14, i8* %36, i8* %37
  %39 = tail call i32 @memcmp(i8* %34, i8* %38, i64 %28) #5
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %41, label %43

41:                                               ; preds = %30, %10
  %42 = icmp ult i64 %26, %18
  br label %45

43:                                               ; preds = %30
  %44 = icmp slt i32 %39, 0
  br label %45

45:                                               ; preds = %2, %8, %41, %43
  %46 = phi i1 [ true, %2 ], [ false, %8 ], [ %42, %41 ], [ %44, %43 ]
  ret i1 %46
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nofree nounwind readonly
declare i32 @memcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
