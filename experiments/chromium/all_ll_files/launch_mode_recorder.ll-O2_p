; ModuleID = '../../chrome/browser/ui/startup/launch_mode_recorder.cc'
source_filename = "../../chrome/browser/ui/startup/launch_mode_recorder.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.LaunchModeRecorder = type { %"class.absl::optional" }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { i32 }

@_ZZN12_GLOBAL__N_125RecordLaunchModeHistogramE10LaunchModeE21kLaunchModesHistogram = internal constant [13 x i8] c"Launch.Modes\00", align 1

@_ZN18LaunchModeRecorderC1Ev = hidden unnamed_addr alias void (%class.LaunchModeRecorder*), void (%class.LaunchModeRecorder*)* @_ZN18LaunchModeRecorderC2Ev
@_ZN18LaunchModeRecorderD1Ev = hidden unnamed_addr alias void (%class.LaunchModeRecorder*), void (%class.LaunchModeRecorder*)* @_ZN18LaunchModeRecorderD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN18LaunchModeRecorderC2Ev(%class.LaunchModeRecorder* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.LaunchModeRecorder, %class.LaunchModeRecorder* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %2, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN18LaunchModeRecorderD2Ev(%class.LaunchModeRecorder* nocapture readonly) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %class.LaunchModeRecorder, %class.LaunchModeRecorder* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i8, i8* %2, align 4, !range !2
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %10, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %class.LaunchModeRecorder, %class.LaunchModeRecorder* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %7 = load i32, i32* %6, align 4
  %8 = icmp eq i32 %7, 0
  %9 = select i1 %8, i32 10, i32 %7
  tail call void @_ZN4base23UmaHistogramExactLinearEPKcii(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @_ZZN12_GLOBAL__N_125RecordLaunchModeHistogramE10LaunchModeE21kLaunchModesHistogram, i64 0, i64 0), i32 %9, i32 23) #3
  br label %10

10:                                               ; preds = %1, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN18LaunchModeRecorder13SetLaunchModeE10LaunchMode(%class.LaunchModeRecorder* nocapture, i32) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %class.LaunchModeRecorder, %class.LaunchModeRecorder* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i8, i8* %3, align 4, !range !2
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %6, label %11

6:                                                ; preds = %2
  %7 = bitcast %class.LaunchModeRecorder* %0 to i64*
  %8 = zext i32 %1 to i64
  %9 = shl nuw i64 %8, 32
  %10 = or i64 %9, 1
  store i64 %10, i64* %7, align 4
  br label %11

11:                                               ; preds = %2, %6
  ret void
}

declare void @_ZN4base23UmaHistogramExactLinearEPKcii(i8*, i32, i32) local_unnamed_addr #2

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
