; ModuleID = '../../third_party/opus/src/silk/LPC_fit.c'
source_filename = "../../third_party/opus/src/silk/LPC_fit.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

; Function Attrs: nounwind ssp uwtable
define hidden void @silk_LPC_fit(i16* nocapture, i32*, i32, i32, i32) local_unnamed_addr #0 {
  %6 = icmp sgt i32 %4, 0
  %7 = sub nsw i32 %3, %2
  %8 = icmp eq i32 %7, 1
  %9 = add nsw i32 %7, -1
  br i1 %6, label %10, label %501

10:                                               ; preds = %5
  %11 = zext i32 %4 to i64
  %12 = and i64 %11, 1
  %13 = icmp eq i32 %4, 1
  %14 = sub nsw i64 %11, %12
  %15 = icmp eq i64 %12, 0
  br label %16

16:                                               ; preds = %30, %10
  %17 = phi i32 [ %86, %30 ], [ 0, %10 ]
  %18 = phi i32 [ %40, %30 ], [ 0, %10 ]
  br i1 %13, label %69, label %42

19:                                               ; preds = %85
  %20 = lshr i32 %87, %9
  %21 = add nsw i32 %20, 1
  %22 = ashr i32 %21, 1
  br label %27

23:                                               ; preds = %85
  %24 = lshr i32 %87, 1
  %25 = and i32 %87, 1
  %26 = add nuw nsw i32 %24, %25
  br label %27

27:                                               ; preds = %23, %19
  %28 = phi i32 [ %26, %23 ], [ %22, %19 ]
  %29 = icmp sgt i32 %28, 32767
  br i1 %29, label %30, label %88

30:                                               ; preds = %27
  %31 = icmp slt i32 %28, 163838
  %32 = select i1 %31, i32 %28, i32 163838
  %33 = shl i32 %32, 14
  %34 = add i32 %33, -536854528
  %35 = add nsw i32 %86, 1
  %36 = mul nsw i32 %32, %35
  %37 = ashr i32 %36, 2
  %38 = sdiv i32 %34, %37
  %39 = sub nsw i32 65470, %38
  tail call void @silk_bwexpander_32(i32* %1, i32 %4, i32 %39) #2
  %40 = add nuw nsw i32 %18, 1
  %41 = icmp eq i32 %40, 10
  br i1 %41, label %323, label %16

42:                                               ; preds = %16, %42
  %43 = phi i64 [ %66, %42 ], [ 0, %16 ]
  %44 = phi i32 [ %65, %42 ], [ 0, %16 ]
  %45 = phi i32 [ %64, %42 ], [ %17, %16 ]
  %46 = phi i64 [ %67, %42 ], [ %14, %16 ]
  %47 = getelementptr inbounds i32, i32* %1, i64 %43
  %48 = load i32, i32* %47, align 4
  %49 = icmp slt i32 %48, 0
  %50 = sub nsw i32 0, %48
  %51 = select i1 %49, i32 %50, i32 %48
  %52 = icmp sgt i32 %51, %44
  %53 = trunc i64 %43 to i32
  %54 = select i1 %52, i32 %53, i32 %45
  %55 = select i1 %52, i32 %51, i32 %44
  %56 = or i64 %43, 1
  %57 = getelementptr inbounds i32, i32* %1, i64 %56
  %58 = load i32, i32* %57, align 4
  %59 = icmp slt i32 %58, 0
  %60 = sub nsw i32 0, %58
  %61 = select i1 %59, i32 %60, i32 %58
  %62 = icmp sgt i32 %61, %55
  %63 = trunc i64 %56 to i32
  %64 = select i1 %62, i32 %63, i32 %54
  %65 = select i1 %62, i32 %61, i32 %55
  %66 = add nuw nsw i64 %43, 2
  %67 = add i64 %46, -2
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %69, label %42

69:                                               ; preds = %42, %16
  %70 = phi i32 [ undef, %16 ], [ %64, %42 ]
  %71 = phi i32 [ undef, %16 ], [ %65, %42 ]
  %72 = phi i64 [ 0, %16 ], [ %66, %42 ]
  %73 = phi i32 [ 0, %16 ], [ %65, %42 ]
  %74 = phi i32 [ %17, %16 ], [ %64, %42 ]
  br i1 %15, label %85, label %75

75:                                               ; preds = %69
  %76 = getelementptr inbounds i32, i32* %1, i64 %72
  %77 = load i32, i32* %76, align 4
  %78 = icmp slt i32 %77, 0
  %79 = sub nsw i32 0, %77
  %80 = select i1 %78, i32 %79, i32 %77
  %81 = icmp sgt i32 %80, %73
  %82 = select i1 %81, i32 %80, i32 %73
  %83 = trunc i64 %72 to i32
  %84 = select i1 %81, i32 %83, i32 %74
  br label %85

85:                                               ; preds = %69, %75
  %86 = phi i32 [ %70, %69 ], [ %84, %75 ]
  %87 = phi i32 [ %71, %69 ], [ %82, %75 ]
  br i1 %8, label %23, label %19

88:                                               ; preds = %27
  %89 = icmp eq i32 %18, 10
  br i1 %89, label %323, label %90

90:                                               ; preds = %88
  br i1 %6, label %91, label %501

91:                                               ; preds = %90
  %92 = zext i32 %4 to i64
  %93 = icmp ult i32 %4, 8
  br i1 %8, label %201, label %94

94:                                               ; preds = %91
  br i1 %93, label %95, label %113

95:                                               ; preds = %199, %113, %94
  %96 = phi i64 [ 0, %113 ], [ 0, %94 ], [ %122, %199 ]
  %97 = xor i64 %96, -1
  %98 = and i64 %92, 1
  %99 = icmp eq i64 %98, 0
  br i1 %99, label %109, label %100

100:                                              ; preds = %95
  %101 = getelementptr inbounds i32, i32* %1, i64 %96
  %102 = load i32, i32* %101, align 4
  %103 = ashr i32 %102, %9
  %104 = add nsw i32 %103, 1
  %105 = lshr i32 %104, 1
  %106 = trunc i32 %105 to i16
  %107 = getelementptr inbounds i16, i16* %0, i64 %96
  store i16 %106, i16* %107, align 2
  %108 = or i64 %96, 1
  br label %109

109:                                              ; preds = %95, %100
  %110 = phi i64 [ %96, %95 ], [ %108, %100 ]
  %111 = sub nsw i64 0, %92
  %112 = icmp eq i64 %97, %111
  br i1 %112, label %501, label %482

113:                                              ; preds = %94
  %114 = getelementptr i16, i16* %0, i64 %92
  %115 = getelementptr i32, i32* %1, i64 %92
  %116 = bitcast i32* %115 to i16*
  %117 = icmp ugt i16* %116, %0
  %118 = bitcast i16* %114 to i32*
  %119 = icmp ugt i32* %118, %1
  %120 = and i1 %117, %119
  br i1 %120, label %95, label %121

121:                                              ; preds = %113
  %122 = and i64 %92, 4294967288
  %123 = insertelement <4 x i32> undef, i32 %9, i32 0
  %124 = shufflevector <4 x i32> %123, <4 x i32> undef, <4 x i32> zeroinitializer
  %125 = insertelement <4 x i32> undef, i32 %9, i32 0
  %126 = shufflevector <4 x i32> %125, <4 x i32> undef, <4 x i32> zeroinitializer
  %127 = add nsw i64 %122, -8
  %128 = lshr exact i64 %127, 3
  %129 = add nuw nsw i64 %128, 1
  %130 = and i64 %129, 1
  %131 = icmp eq i64 %127, 0
  br i1 %131, label %177, label %132

132:                                              ; preds = %121
  %133 = sub nuw nsw i64 %129, %130
  br label %134

134:                                              ; preds = %134, %132
  %135 = phi i64 [ 0, %132 ], [ %174, %134 ]
  %136 = phi i64 [ %133, %132 ], [ %175, %134 ]
  %137 = getelementptr inbounds i32, i32* %1, i64 %135
  %138 = bitcast i32* %137 to <4 x i32>*
  %139 = load <4 x i32>, <4 x i32>* %138, align 4, !alias.scope !2
  %140 = getelementptr inbounds i32, i32* %137, i64 4
  %141 = bitcast i32* %140 to <4 x i32>*
  %142 = load <4 x i32>, <4 x i32>* %141, align 4, !alias.scope !2
  %143 = ashr <4 x i32> %139, %124
  %144 = ashr <4 x i32> %142, %126
  %145 = add nsw <4 x i32> %143, <i32 1, i32 1, i32 1, i32 1>
  %146 = add nsw <4 x i32> %144, <i32 1, i32 1, i32 1, i32 1>
  %147 = lshr <4 x i32> %145, <i32 1, i32 1, i32 1, i32 1>
  %148 = lshr <4 x i32> %146, <i32 1, i32 1, i32 1, i32 1>
  %149 = trunc <4 x i32> %147 to <4 x i16>
  %150 = trunc <4 x i32> %148 to <4 x i16>
  %151 = getelementptr inbounds i16, i16* %0, i64 %135
  %152 = bitcast i16* %151 to <4 x i16>*
  store <4 x i16> %149, <4 x i16>* %152, align 2, !alias.scope !5, !noalias !2
  %153 = getelementptr inbounds i16, i16* %151, i64 4
  %154 = bitcast i16* %153 to <4 x i16>*
  store <4 x i16> %150, <4 x i16>* %154, align 2, !alias.scope !5, !noalias !2
  %155 = or i64 %135, 8
  %156 = getelementptr inbounds i32, i32* %1, i64 %155
  %157 = bitcast i32* %156 to <4 x i32>*
  %158 = load <4 x i32>, <4 x i32>* %157, align 4, !alias.scope !2
  %159 = getelementptr inbounds i32, i32* %156, i64 4
  %160 = bitcast i32* %159 to <4 x i32>*
  %161 = load <4 x i32>, <4 x i32>* %160, align 4, !alias.scope !2
  %162 = ashr <4 x i32> %158, %124
  %163 = ashr <4 x i32> %161, %126
  %164 = add nsw <4 x i32> %162, <i32 1, i32 1, i32 1, i32 1>
  %165 = add nsw <4 x i32> %163, <i32 1, i32 1, i32 1, i32 1>
  %166 = lshr <4 x i32> %164, <i32 1, i32 1, i32 1, i32 1>
  %167 = lshr <4 x i32> %165, <i32 1, i32 1, i32 1, i32 1>
  %168 = trunc <4 x i32> %166 to <4 x i16>
  %169 = trunc <4 x i32> %167 to <4 x i16>
  %170 = getelementptr inbounds i16, i16* %0, i64 %155
  %171 = bitcast i16* %170 to <4 x i16>*
  store <4 x i16> %168, <4 x i16>* %171, align 2, !alias.scope !5, !noalias !2
  %172 = getelementptr inbounds i16, i16* %170, i64 4
  %173 = bitcast i16* %172 to <4 x i16>*
  store <4 x i16> %169, <4 x i16>* %173, align 2, !alias.scope !5, !noalias !2
  %174 = add i64 %135, 16
  %175 = add i64 %136, -2
  %176 = icmp eq i64 %175, 0
  br i1 %176, label %177, label %134, !llvm.loop !7

177:                                              ; preds = %134, %121
  %178 = phi i64 [ 0, %121 ], [ %174, %134 ]
  %179 = icmp eq i64 %130, 0
  br i1 %179, label %199, label %180

180:                                              ; preds = %177
  %181 = getelementptr inbounds i32, i32* %1, i64 %178
  %182 = bitcast i32* %181 to <4 x i32>*
  %183 = load <4 x i32>, <4 x i32>* %182, align 4, !alias.scope !2
  %184 = getelementptr inbounds i32, i32* %181, i64 4
  %185 = bitcast i32* %184 to <4 x i32>*
  %186 = load <4 x i32>, <4 x i32>* %185, align 4, !alias.scope !2
  %187 = ashr <4 x i32> %183, %124
  %188 = ashr <4 x i32> %186, %126
  %189 = add nsw <4 x i32> %187, <i32 1, i32 1, i32 1, i32 1>
  %190 = add nsw <4 x i32> %188, <i32 1, i32 1, i32 1, i32 1>
  %191 = lshr <4 x i32> %189, <i32 1, i32 1, i32 1, i32 1>
  %192 = lshr <4 x i32> %190, <i32 1, i32 1, i32 1, i32 1>
  %193 = trunc <4 x i32> %191 to <4 x i16>
  %194 = trunc <4 x i32> %192 to <4 x i16>
  %195 = getelementptr inbounds i16, i16* %0, i64 %178
  %196 = bitcast i16* %195 to <4 x i16>*
  store <4 x i16> %193, <4 x i16>* %196, align 2, !alias.scope !5, !noalias !2
  %197 = getelementptr inbounds i16, i16* %195, i64 4
  %198 = bitcast i16* %197 to <4 x i16>*
  store <4 x i16> %194, <4 x i16>* %198, align 2, !alias.scope !5, !noalias !2
  br label %199

199:                                              ; preds = %177, %180
  %200 = icmp eq i64 %122, %92
  br i1 %200, label %501, label %95

201:                                              ; preds = %91
  br i1 %93, label %286, label %202

202:                                              ; preds = %201
  %203 = getelementptr i16, i16* %0, i64 %92
  %204 = getelementptr i32, i32* %1, i64 %92
  %205 = bitcast i32* %204 to i16*
  %206 = icmp ugt i16* %205, %0
  %207 = bitcast i16* %203 to i32*
  %208 = icmp ugt i32* %207, %1
  %209 = and i1 %206, %208
  br i1 %209, label %286, label %210

210:                                              ; preds = %202
  %211 = and i64 %92, 4294967288
  %212 = add nsw i64 %211, -8
  %213 = lshr exact i64 %212, 3
  %214 = add nuw nsw i64 %213, 1
  %215 = and i64 %214, 1
  %216 = icmp eq i64 %212, 0
  br i1 %216, label %262, label %217

217:                                              ; preds = %210
  %218 = sub nuw nsw i64 %214, %215
  br label %219

219:                                              ; preds = %219, %217
  %220 = phi i64 [ 0, %217 ], [ %259, %219 ]
  %221 = phi i64 [ %218, %217 ], [ %260, %219 ]
  %222 = getelementptr inbounds i32, i32* %1, i64 %220
  %223 = bitcast i32* %222 to <4 x i32>*
  %224 = load <4 x i32>, <4 x i32>* %223, align 4, !alias.scope !9
  %225 = getelementptr inbounds i32, i32* %222, i64 4
  %226 = bitcast i32* %225 to <4 x i32>*
  %227 = load <4 x i32>, <4 x i32>* %226, align 4, !alias.scope !9
  %228 = lshr <4 x i32> %224, <i32 1, i32 1, i32 1, i32 1>
  %229 = lshr <4 x i32> %227, <i32 1, i32 1, i32 1, i32 1>
  %230 = and <4 x i32> %224, <i32 1, i32 1, i32 1, i32 1>
  %231 = and <4 x i32> %227, <i32 1, i32 1, i32 1, i32 1>
  %232 = add nuw <4 x i32> %228, %230
  %233 = add nuw <4 x i32> %229, %231
  %234 = trunc <4 x i32> %232 to <4 x i16>
  %235 = trunc <4 x i32> %233 to <4 x i16>
  %236 = getelementptr inbounds i16, i16* %0, i64 %220
  %237 = bitcast i16* %236 to <4 x i16>*
  store <4 x i16> %234, <4 x i16>* %237, align 2, !alias.scope !12, !noalias !9
  %238 = getelementptr inbounds i16, i16* %236, i64 4
  %239 = bitcast i16* %238 to <4 x i16>*
  store <4 x i16> %235, <4 x i16>* %239, align 2, !alias.scope !12, !noalias !9
  %240 = or i64 %220, 8
  %241 = getelementptr inbounds i32, i32* %1, i64 %240
  %242 = bitcast i32* %241 to <4 x i32>*
  %243 = load <4 x i32>, <4 x i32>* %242, align 4, !alias.scope !9
  %244 = getelementptr inbounds i32, i32* %241, i64 4
  %245 = bitcast i32* %244 to <4 x i32>*
  %246 = load <4 x i32>, <4 x i32>* %245, align 4, !alias.scope !9
  %247 = lshr <4 x i32> %243, <i32 1, i32 1, i32 1, i32 1>
  %248 = lshr <4 x i32> %246, <i32 1, i32 1, i32 1, i32 1>
  %249 = and <4 x i32> %243, <i32 1, i32 1, i32 1, i32 1>
  %250 = and <4 x i32> %246, <i32 1, i32 1, i32 1, i32 1>
  %251 = add nuw <4 x i32> %247, %249
  %252 = add nuw <4 x i32> %248, %250
  %253 = trunc <4 x i32> %251 to <4 x i16>
  %254 = trunc <4 x i32> %252 to <4 x i16>
  %255 = getelementptr inbounds i16, i16* %0, i64 %240
  %256 = bitcast i16* %255 to <4 x i16>*
  store <4 x i16> %253, <4 x i16>* %256, align 2, !alias.scope !12, !noalias !9
  %257 = getelementptr inbounds i16, i16* %255, i64 4
  %258 = bitcast i16* %257 to <4 x i16>*
  store <4 x i16> %254, <4 x i16>* %258, align 2, !alias.scope !12, !noalias !9
  %259 = add i64 %220, 16
  %260 = add i64 %221, -2
  %261 = icmp eq i64 %260, 0
  br i1 %261, label %262, label %219, !llvm.loop !14

262:                                              ; preds = %219, %210
  %263 = phi i64 [ 0, %210 ], [ %259, %219 ]
  %264 = icmp eq i64 %215, 0
  br i1 %264, label %284, label %265

265:                                              ; preds = %262
  %266 = getelementptr inbounds i32, i32* %1, i64 %263
  %267 = bitcast i32* %266 to <4 x i32>*
  %268 = load <4 x i32>, <4 x i32>* %267, align 4, !alias.scope !9
  %269 = getelementptr inbounds i32, i32* %266, i64 4
  %270 = bitcast i32* %269 to <4 x i32>*
  %271 = load <4 x i32>, <4 x i32>* %270, align 4, !alias.scope !9
  %272 = lshr <4 x i32> %268, <i32 1, i32 1, i32 1, i32 1>
  %273 = lshr <4 x i32> %271, <i32 1, i32 1, i32 1, i32 1>
  %274 = and <4 x i32> %268, <i32 1, i32 1, i32 1, i32 1>
  %275 = and <4 x i32> %271, <i32 1, i32 1, i32 1, i32 1>
  %276 = add nuw <4 x i32> %272, %274
  %277 = add nuw <4 x i32> %273, %275
  %278 = trunc <4 x i32> %276 to <4 x i16>
  %279 = trunc <4 x i32> %277 to <4 x i16>
  %280 = getelementptr inbounds i16, i16* %0, i64 %263
  %281 = bitcast i16* %280 to <4 x i16>*
  store <4 x i16> %278, <4 x i16>* %281, align 2, !alias.scope !12, !noalias !9
  %282 = getelementptr inbounds i16, i16* %280, i64 4
  %283 = bitcast i16* %282 to <4 x i16>*
  store <4 x i16> %279, <4 x i16>* %283, align 2, !alias.scope !12, !noalias !9
  br label %284

284:                                              ; preds = %262, %265
  %285 = icmp eq i64 %211, %92
  br i1 %285, label %501, label %286

286:                                              ; preds = %284, %202, %201
  %287 = phi i64 [ 0, %202 ], [ 0, %201 ], [ %211, %284 ]
  %288 = xor i64 %287, -1
  %289 = and i64 %92, 1
  %290 = icmp eq i64 %289, 0
  br i1 %290, label %300, label %291

291:                                              ; preds = %286
  %292 = getelementptr inbounds i32, i32* %1, i64 %287
  %293 = load i32, i32* %292, align 4
  %294 = lshr i32 %293, 1
  %295 = and i32 %293, 1
  %296 = add nuw i32 %294, %295
  %297 = trunc i32 %296 to i16
  %298 = getelementptr inbounds i16, i16* %0, i64 %287
  store i16 %297, i16* %298, align 2
  %299 = or i64 %287, 1
  br label %300

300:                                              ; preds = %286, %291
  %301 = phi i64 [ %287, %286 ], [ %299, %291 ]
  %302 = sub nsw i64 0, %92
  %303 = icmp eq i64 %288, %302
  br i1 %303, label %501, label %304

304:                                              ; preds = %300, %304
  %305 = phi i64 [ %321, %304 ], [ %301, %300 ]
  %306 = getelementptr inbounds i32, i32* %1, i64 %305
  %307 = load i32, i32* %306, align 4
  %308 = lshr i32 %307, 1
  %309 = and i32 %307, 1
  %310 = add nuw i32 %308, %309
  %311 = trunc i32 %310 to i16
  %312 = getelementptr inbounds i16, i16* %0, i64 %305
  store i16 %311, i16* %312, align 2
  %313 = add nuw nsw i64 %305, 1
  %314 = getelementptr inbounds i32, i32* %1, i64 %313
  %315 = load i32, i32* %314, align 4
  %316 = lshr i32 %315, 1
  %317 = and i32 %315, 1
  %318 = add nuw i32 %316, %317
  %319 = trunc i32 %318 to i16
  %320 = getelementptr inbounds i16, i16* %0, i64 %313
  store i16 %319, i16* %320, align 2
  %321 = add nuw nsw i64 %305, 2
  %322 = icmp eq i64 %321, %92
  br i1 %322, label %501, label %304, !llvm.loop !15

323:                                              ; preds = %30, %88
  br i1 %6, label %324, label %501

324:                                              ; preds = %323
  %325 = zext i32 %4 to i64
  %326 = icmp ult i32 %4, 4
  br i1 %8, label %368, label %327

327:                                              ; preds = %324
  br i1 %326, label %328, label %330

328:                                              ; preds = %366, %330, %327
  %329 = phi i64 [ 0, %330 ], [ 0, %327 ], [ %339, %366 ]
  br label %462

330:                                              ; preds = %327
  %331 = getelementptr i16, i16* %0, i64 %325
  %332 = getelementptr i32, i32* %1, i64 %325
  %333 = bitcast i32* %332 to i16*
  %334 = icmp ugt i16* %333, %0
  %335 = bitcast i16* %331 to i32*
  %336 = icmp ugt i32* %335, %1
  %337 = and i1 %334, %336
  br i1 %337, label %328, label %338

338:                                              ; preds = %330
  %339 = and i64 %325, 4294967292
  %340 = insertelement <4 x i32> undef, i32 %9, i32 0
  %341 = shufflevector <4 x i32> %340, <4 x i32> undef, <4 x i32> zeroinitializer
  %342 = insertelement <4 x i32> undef, i32 %7, i32 0
  %343 = shufflevector <4 x i32> %342, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %344

344:                                              ; preds = %344, %338
  %345 = phi i64 [ 0, %338 ], [ %364, %344 ]
  %346 = getelementptr inbounds i32, i32* %1, i64 %345
  %347 = bitcast i32* %346 to <4 x i32>*
  %348 = load <4 x i32>, <4 x i32>* %347, align 4, !alias.scope !16
  %349 = ashr <4 x i32> %348, %341
  %350 = icmp slt <4 x i32> %349, <i32 65535, i32 65535, i32 65535, i32 65535>
  %351 = icmp slt <4 x i32> %349, <i32 -65537, i32 -65537, i32 -65537, i32 -65537>
  %352 = add nsw <4 x i32> %349, <i32 1, i32 1, i32 1, i32 1>
  %353 = ashr <4 x i32> %352, <i32 1, i32 1, i32 1, i32 1>
  %354 = xor <4 x i1> %351, %350
  %355 = select <4 x i1> %351, <4 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768>, <4 x i32> <i32 32767, i32 32767, i32 32767, i32 32767>
  %356 = select <4 x i1> %354, <4 x i32> %353, <4 x i32> %355
  %357 = trunc <4 x i32> %356 to <4 x i16>
  %358 = getelementptr inbounds i16, i16* %0, i64 %345
  %359 = bitcast i16* %358 to <4 x i16>*
  store <4 x i16> %357, <4 x i16>* %359, align 2, !alias.scope !19, !noalias !16
  %360 = shl <4 x i32> %356, <i32 16, i32 16, i32 16, i32 16>
  %361 = ashr exact <4 x i32> %360, <i32 16, i32 16, i32 16, i32 16>
  %362 = shl <4 x i32> %361, %343
  %363 = bitcast i32* %346 to <4 x i32>*
  store <4 x i32> %362, <4 x i32>* %363, align 4, !alias.scope !16
  %364 = add i64 %345, 4
  %365 = icmp eq i64 %364, %339
  br i1 %365, label %366, label %344, !llvm.loop !21

366:                                              ; preds = %344
  %367 = icmp eq i64 %339, %325
  br i1 %367, label %501, label %328

368:                                              ; preds = %324
  br i1 %326, label %444, label %369

369:                                              ; preds = %368
  %370 = getelementptr i16, i16* %0, i64 %325
  %371 = getelementptr i32, i32* %1, i64 %325
  %372 = bitcast i32* %371 to i16*
  %373 = icmp ugt i16* %372, %0
  %374 = bitcast i16* %370 to i32*
  %375 = icmp ugt i32* %374, %1
  %376 = and i1 %373, %375
  br i1 %376, label %444, label %377

377:                                              ; preds = %369
  %378 = and i64 %325, 4294967292
  %379 = add nsw i64 %378, -4
  %380 = lshr exact i64 %379, 2
  %381 = add nuw nsw i64 %380, 1
  %382 = and i64 %381, 1
  %383 = icmp eq i64 %379, 0
  br i1 %383, label %423, label %384

384:                                              ; preds = %377
  %385 = sub nuw nsw i64 %381, %382
  br label %386

386:                                              ; preds = %386, %384
  %387 = phi i64 [ 0, %384 ], [ %420, %386 ]
  %388 = phi i64 [ %385, %384 ], [ %421, %386 ]
  %389 = getelementptr inbounds i32, i32* %1, i64 %387
  %390 = bitcast i32* %389 to <4 x i32>*
  %391 = load <4 x i32>, <4 x i32>* %390, align 4, !alias.scope !22
  %392 = ashr <4 x i32> %391, <i32 1, i32 1, i32 1, i32 1>
  %393 = and <4 x i32> %391, <i32 1, i32 1, i32 1, i32 1>
  %394 = add nsw <4 x i32> %392, %393
  %395 = icmp sgt <4 x i32> %394, <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %396 = select <4 x i1> %395, <4 x i32> %394, <4 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %397 = icmp slt <4 x i32> %396, <i32 32767, i32 32767, i32 32767, i32 32767>
  %398 = select <4 x i1> %397, <4 x i32> %396, <4 x i32> <i32 32767, i32 32767, i32 32767, i32 32767>
  %399 = trunc <4 x i32> %398 to <4 x i16>
  %400 = getelementptr inbounds i16, i16* %0, i64 %387
  %401 = bitcast i16* %400 to <4 x i16>*
  store <4 x i16> %399, <4 x i16>* %401, align 2, !alias.scope !25, !noalias !22
  %402 = shl nsw <4 x i32> %398, <i32 1, i32 1, i32 1, i32 1>
  %403 = bitcast i32* %389 to <4 x i32>*
  store <4 x i32> %402, <4 x i32>* %403, align 4, !alias.scope !22
  %404 = or i64 %387, 4
  %405 = getelementptr inbounds i32, i32* %1, i64 %404
  %406 = bitcast i32* %405 to <4 x i32>*
  %407 = load <4 x i32>, <4 x i32>* %406, align 4, !alias.scope !22
  %408 = ashr <4 x i32> %407, <i32 1, i32 1, i32 1, i32 1>
  %409 = and <4 x i32> %407, <i32 1, i32 1, i32 1, i32 1>
  %410 = add nsw <4 x i32> %408, %409
  %411 = icmp sgt <4 x i32> %410, <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %412 = select <4 x i1> %411, <4 x i32> %410, <4 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %413 = icmp slt <4 x i32> %412, <i32 32767, i32 32767, i32 32767, i32 32767>
  %414 = select <4 x i1> %413, <4 x i32> %412, <4 x i32> <i32 32767, i32 32767, i32 32767, i32 32767>
  %415 = trunc <4 x i32> %414 to <4 x i16>
  %416 = getelementptr inbounds i16, i16* %0, i64 %404
  %417 = bitcast i16* %416 to <4 x i16>*
  store <4 x i16> %415, <4 x i16>* %417, align 2, !alias.scope !25, !noalias !22
  %418 = shl nsw <4 x i32> %414, <i32 1, i32 1, i32 1, i32 1>
  %419 = bitcast i32* %405 to <4 x i32>*
  store <4 x i32> %418, <4 x i32>* %419, align 4, !alias.scope !22
  %420 = add i64 %387, 8
  %421 = add i64 %388, -2
  %422 = icmp eq i64 %421, 0
  br i1 %422, label %423, label %386, !llvm.loop !27

423:                                              ; preds = %386, %377
  %424 = phi i64 [ 0, %377 ], [ %420, %386 ]
  %425 = icmp eq i64 %382, 0
  br i1 %425, label %442, label %426

426:                                              ; preds = %423
  %427 = getelementptr inbounds i32, i32* %1, i64 %424
  %428 = bitcast i32* %427 to <4 x i32>*
  %429 = load <4 x i32>, <4 x i32>* %428, align 4, !alias.scope !22
  %430 = ashr <4 x i32> %429, <i32 1, i32 1, i32 1, i32 1>
  %431 = and <4 x i32> %429, <i32 1, i32 1, i32 1, i32 1>
  %432 = add nsw <4 x i32> %430, %431
  %433 = icmp sgt <4 x i32> %432, <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %434 = select <4 x i1> %433, <4 x i32> %432, <4 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %435 = icmp slt <4 x i32> %434, <i32 32767, i32 32767, i32 32767, i32 32767>
  %436 = select <4 x i1> %435, <4 x i32> %434, <4 x i32> <i32 32767, i32 32767, i32 32767, i32 32767>
  %437 = trunc <4 x i32> %436 to <4 x i16>
  %438 = getelementptr inbounds i16, i16* %0, i64 %424
  %439 = bitcast i16* %438 to <4 x i16>*
  store <4 x i16> %437, <4 x i16>* %439, align 2, !alias.scope !25, !noalias !22
  %440 = shl nsw <4 x i32> %436, <i32 1, i32 1, i32 1, i32 1>
  %441 = bitcast i32* %427 to <4 x i32>*
  store <4 x i32> %440, <4 x i32>* %441, align 4, !alias.scope !22
  br label %442

442:                                              ; preds = %423, %426
  %443 = icmp eq i64 %378, %325
  br i1 %443, label %501, label %444

444:                                              ; preds = %442, %369, %368
  %445 = phi i64 [ 0, %369 ], [ 0, %368 ], [ %378, %442 ]
  br label %446

446:                                              ; preds = %444, %446
  %447 = phi i64 [ %460, %446 ], [ %445, %444 ]
  %448 = getelementptr inbounds i32, i32* %1, i64 %447
  %449 = load i32, i32* %448, align 4
  %450 = ashr i32 %449, 1
  %451 = and i32 %449, 1
  %452 = add nsw i32 %450, %451
  %453 = icmp sgt i32 %452, -32768
  %454 = select i1 %453, i32 %452, i32 -32768
  %455 = icmp slt i32 %454, 32767
  %456 = select i1 %455, i32 %454, i32 32767
  %457 = trunc i32 %456 to i16
  %458 = getelementptr inbounds i16, i16* %0, i64 %447
  store i16 %457, i16* %458, align 2
  %459 = shl nsw i32 %456, 1
  store i32 %459, i32* %448, align 4
  %460 = add nuw nsw i64 %447, 1
  %461 = icmp eq i64 %460, %325
  br i1 %461, label %501, label %446, !llvm.loop !28

462:                                              ; preds = %328, %473
  %463 = phi i64 [ %480, %473 ], [ %329, %328 ]
  %464 = getelementptr inbounds i32, i32* %1, i64 %463
  %465 = load i32, i32* %464, align 4
  %466 = ashr i32 %465, %9
  %467 = icmp sgt i32 %466, 65534
  br i1 %467, label %473, label %468

468:                                              ; preds = %462
  %469 = icmp slt i32 %466, -65537
  br i1 %469, label %473, label %470

470:                                              ; preds = %468
  %471 = add nsw i32 %466, 1
  %472 = ashr i32 %471, 1
  br label %473

473:                                              ; preds = %468, %470, %462
  %474 = phi i32 [ 32767, %462 ], [ -32768, %468 ], [ %472, %470 ]
  %475 = trunc i32 %474 to i16
  %476 = getelementptr inbounds i16, i16* %0, i64 %463
  store i16 %475, i16* %476, align 2
  %477 = shl i32 %474, 16
  %478 = ashr exact i32 %477, 16
  %479 = shl i32 %478, %7
  store i32 %479, i32* %464, align 4
  %480 = add nuw nsw i64 %463, 1
  %481 = icmp eq i64 %480, %325
  br i1 %481, label %501, label %462, !llvm.loop !29

482:                                              ; preds = %109, %482
  %483 = phi i64 [ %499, %482 ], [ %110, %109 ]
  %484 = getelementptr inbounds i32, i32* %1, i64 %483
  %485 = load i32, i32* %484, align 4
  %486 = ashr i32 %485, %9
  %487 = add nsw i32 %486, 1
  %488 = lshr i32 %487, 1
  %489 = trunc i32 %488 to i16
  %490 = getelementptr inbounds i16, i16* %0, i64 %483
  store i16 %489, i16* %490, align 2
  %491 = add nuw nsw i64 %483, 1
  %492 = getelementptr inbounds i32, i32* %1, i64 %491
  %493 = load i32, i32* %492, align 4
  %494 = ashr i32 %493, %9
  %495 = add nsw i32 %494, 1
  %496 = lshr i32 %495, 1
  %497 = trunc i32 %496 to i16
  %498 = getelementptr inbounds i16, i16* %0, i64 %491
  store i16 %497, i16* %498, align 2
  %499 = add nuw nsw i64 %483, 2
  %500 = icmp eq i64 %499, %92
  br i1 %500, label %501, label %482, !llvm.loop !30

501:                                              ; preds = %109, %482, %300, %304, %473, %446, %199, %284, %366, %442, %5, %90, %323
  ret void
}

declare void @silk_bwexpander_32(i32*, i32, i32) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = !{!10}
!10 = distinct !{!10, !11}
!11 = distinct !{!11, !"LVerDomain"}
!12 = !{!13}
!13 = distinct !{!13, !11}
!14 = distinct !{!14, !8}
!15 = distinct !{!15, !8}
!16 = !{!17}
!17 = distinct !{!17, !18}
!18 = distinct !{!18, !"LVerDomain"}
!19 = !{!20}
!20 = distinct !{!20, !18}
!21 = distinct !{!21, !8}
!22 = !{!23}
!23 = distinct !{!23, !24}
!24 = distinct !{!24, !"LVerDomain"}
!25 = !{!26}
!26 = distinct !{!26, !24}
!27 = distinct !{!27, !8}
!28 = distinct !{!28, !8}
!29 = distinct !{!29, !8}
!30 = distinct !{!30, !8}
