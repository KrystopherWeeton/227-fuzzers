; ModuleID = '../../third_party/opus/src/src/opus.c'
source_filename = "../../third_party/opus/src/src/opus.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @opus_pcm_soft_clip(float*, i32, i32, float*) local_unnamed_addr #0 {
  %5 = icmp sgt i32 %2, 0
  %6 = icmp sgt i32 %1, 0
  %7 = and i1 %6, %5
  %8 = icmp ne float* %0, null
  %9 = and i1 %8, %7
  %10 = icmp ne float* %3, null
  %11 = and i1 %10, %9
  br i1 %11, label %12, label %276

12:                                               ; preds = %4
  %13 = mul i32 %2, %1
  %14 = icmp sgt i32 %13, 0
  br i1 %14, label %15, label %48

15:                                               ; preds = %12
  %16 = zext i32 %13 to i64
  %17 = icmp ult i32 %13, 8
  br i1 %17, label %18, label %20

18:                                               ; preds = %46, %15
  %19 = phi i64 [ 0, %15 ], [ %21, %46 ]
  br label %52

20:                                               ; preds = %15
  %21 = and i64 %16, 4294967288
  br label %22

22:                                               ; preds = %22, %20
  %23 = phi i64 [ 0, %20 ], [ %44, %22 ]
  %24 = getelementptr inbounds float, float* %0, i64 %23
  %25 = bitcast float* %24 to <4 x float>*
  %26 = load <4 x float>, <4 x float>* %25, align 4
  %27 = getelementptr inbounds float, float* %24, i64 4
  %28 = bitcast float* %27 to <4 x float>*
  %29 = load <4 x float>, <4 x float>* %28, align 4
  %30 = fcmp ogt <4 x float> %26, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %31 = fcmp ogt <4 x float> %29, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %32 = select <4 x i1> %30, <4 x float> <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>, <4 x float> %26
  %33 = select <4 x i1> %31, <4 x float> <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>, <4 x float> %29
  %34 = fcmp olt <4 x float> %32, <float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00>
  %35 = fcmp olt <4 x float> %33, <float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00>
  %36 = or <4 x i1> %30, %34
  %37 = or <4 x i1> %31, %35
  %38 = select <4 x i1> %34, <4 x float> <float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00>, <4 x float> <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %39 = select <4 x i1> %35, <4 x float> <float -2.000000e+00, float -2.000000e+00, float -2.000000e+00, float -2.000000e+00>, <4 x float> <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %40 = select <4 x i1> %36, <4 x float> %38, <4 x float> %26
  %41 = select <4 x i1> %37, <4 x float> %39, <4 x float> %29
  %42 = bitcast float* %24 to <4 x float>*
  store <4 x float> %40, <4 x float>* %42, align 4
  %43 = bitcast float* %27 to <4 x float>*
  store <4 x float> %41, <4 x float>* %43, align 4
  %44 = add i64 %23, 8
  %45 = icmp eq i64 %44, %21
  br i1 %45, label %46, label %22, !llvm.loop !2

46:                                               ; preds = %22
  %47 = icmp eq i64 %21, %16
  br i1 %47, label %48, label %18

48:                                               ; preds = %52, %46, %12
  %49 = sext i32 %2 to i64
  %50 = zext i32 %2 to i64
  %51 = zext i32 %1 to i64
  br label %64

52:                                               ; preds = %18, %52
  %53 = phi i64 [ %62, %52 ], [ %19, %18 ]
  %54 = getelementptr inbounds float, float* %0, i64 %53
  %55 = load float, float* %54, align 4
  %56 = fcmp ogt float %55, 2.000000e+00
  %57 = select i1 %56, float 2.000000e+00, float %55
  %58 = fcmp olt float %57, -2.000000e+00
  %59 = or i1 %56, %58
  %60 = select i1 %58, float -2.000000e+00, float 2.000000e+00
  %61 = select i1 %59, float %60, float %55
  store float %61, float* %54, align 4
  %62 = add nuw nsw i64 %53, 1
  %63 = icmp eq i64 %62, %16
  br i1 %63, label %48, label %52, !llvm.loop !4

64:                                               ; preds = %48, %272
  %65 = phi i64 [ 0, %48 ], [ %274, %272 ]
  %66 = getelementptr inbounds float, float* %0, i64 %65
  %67 = getelementptr inbounds float, float* %3, i64 %65
  %68 = load float, float* %67, align 4
  br label %69

69:                                               ; preds = %76, %64
  %70 = phi i64 [ 0, %64 ], [ %79, %76 ]
  %71 = mul nsw i64 %70, %49
  %72 = getelementptr inbounds float, float* %66, i64 %71
  %73 = load float, float* %72, align 4
  %74 = fmul float %68, %73
  %75 = fcmp ult float %74, 0.000000e+00
  br i1 %75, label %76, label %81

76:                                               ; preds = %69
  %77 = fmul float %73, %74
  %78 = fadd float %73, %77
  store float %78, float* %72, align 4
  %79 = add nuw nsw i64 %70, 1
  %80 = icmp eq i64 %79, %51
  br i1 %80, label %81, label %69

81:                                               ; preds = %69, %76
  %82 = load float, float* %66, align 4
  br label %83

83:                                               ; preds = %270, %81
  %84 = phi i32 [ 0, %81 ], [ %150, %270 ]
  %85 = icmp slt i32 %84, %1
  br i1 %85, label %86, label %104

86:                                               ; preds = %83
  %87 = sext i32 %84 to i64
  br label %88

88:                                               ; preds = %97, %86
  %89 = phi i64 [ %87, %86 ], [ %98, %97 ]
  %90 = phi i32 [ %84, %86 ], [ %99, %97 ]
  %91 = mul nsw i64 %89, %49
  %92 = getelementptr inbounds float, float* %66, i64 %91
  %93 = load float, float* %92, align 4
  %94 = fcmp ogt float %93, 1.000000e+00
  %95 = fcmp olt float %93, -1.000000e+00
  %96 = or i1 %94, %95
  br i1 %96, label %102, label %97

97:                                               ; preds = %88
  %98 = add nsw i64 %89, 1
  %99 = add nsw i32 %90, 1
  %100 = trunc i64 %98 to i32
  %101 = icmp eq i32 %100, %1
  br i1 %101, label %104, label %88

102:                                              ; preds = %88
  %103 = trunc i64 %89 to i32
  br label %104

104:                                              ; preds = %97, %102, %83
  %105 = phi i32 [ %84, %83 ], [ %103, %102 ], [ %99, %97 ]
  %106 = icmp eq i32 %105, %1
  br i1 %106, label %272, label %107

107:                                              ; preds = %104
  %108 = mul nsw i32 %105, %2
  %109 = sext i32 %108 to i64
  %110 = getelementptr inbounds float, float* %66, i64 %109
  %111 = load float, float* %110, align 4
  %112 = tail call float @llvm.fabs.f32(float %111)
  %113 = sext i32 %105 to i64
  br label %114

114:                                              ; preds = %117, %107
  %115 = phi i64 [ %118, %117 ], [ %113, %107 ]
  %116 = icmp sgt i64 %115, 0
  br i1 %116, label %117, label %124

117:                                              ; preds = %114
  %118 = add nsw i64 %115, -1
  %119 = mul nsw i64 %118, %49
  %120 = getelementptr inbounds float, float* %66, i64 %119
  %121 = load float, float* %120, align 4
  %122 = fmul float %111, %121
  %123 = fcmp ult float %122, 0.000000e+00
  br i1 %123, label %124, label %114

124:                                              ; preds = %117, %114
  %125 = trunc i64 %115 to i32
  %126 = icmp slt i32 %105, %1
  br i1 %126, label %127, label %149

127:                                              ; preds = %124, %138
  %128 = phi i64 [ %143, %138 ], [ %113, %124 ]
  %129 = phi i32 [ %142, %138 ], [ %105, %124 ]
  %130 = phi float [ %141, %138 ], [ %112, %124 ]
  %131 = phi i32 [ %144, %138 ], [ %105, %124 ]
  %132 = mul nsw i64 %128, %49
  %133 = getelementptr inbounds float, float* %66, i64 %132
  %134 = load float, float* %133, align 4
  %135 = fmul float %111, %134
  %136 = fcmp ult float %135, 0.000000e+00
  %137 = trunc i64 %128 to i32
  br i1 %136, label %147, label %138

138:                                              ; preds = %127
  %139 = tail call float @llvm.fabs.f32(float %134)
  %140 = fcmp ogt float %139, %130
  %141 = select i1 %140, float %139, float %130
  %142 = select i1 %140, i32 %137, i32 %129
  %143 = add nsw i64 %128, 1
  %144 = add nsw i32 %131, 1
  %145 = trunc i64 %143 to i32
  %146 = icmp eq i32 %145, %1
  br i1 %146, label %149, label %127

147:                                              ; preds = %127
  %148 = trunc i64 %128 to i32
  br label %149

149:                                              ; preds = %147, %138, %124
  %150 = phi i32 [ %105, %124 ], [ %148, %147 ], [ %144, %138 ]
  %151 = phi float [ %112, %124 ], [ %130, %147 ], [ %141, %138 ]
  %152 = phi i32 [ %105, %124 ], [ %129, %147 ], [ %142, %138 ]
  %153 = icmp eq i32 %125, 0
  br i1 %153, label %154, label %158

154:                                              ; preds = %149
  %155 = load float, float* %66, align 4
  %156 = fmul float %111, %155
  %157 = fcmp oge float %156, 0.000000e+00
  br label %158

158:                                              ; preds = %154, %149
  %159 = phi i1 [ false, %149 ], [ %157, %154 ]
  %160 = fadd float %151, -1.000000e+00
  %161 = fmul float %151, %151
  %162 = fdiv float %160, %161
  %163 = fmul float %162, 0x3E901B2B20000000
  %164 = fadd float %162, %163
  %165 = fcmp ogt float %111, 0.000000e+00
  %166 = fsub float -0.000000e+00, %164
  %167 = select i1 %165, float %166, float %164
  %168 = icmp sgt i32 %150, %125
  br i1 %168, label %169, label %208

169:                                              ; preds = %158
  %170 = shl i64 %115, 32
  %171 = ashr exact i64 %170, 32
  %172 = sext i32 %150 to i64
  %173 = shl i64 %115, 32
  %174 = ashr exact i64 %173, 32
  %175 = sub nsw i64 %172, %174
  %176 = xor i64 %174, -1
  %177 = and i64 %175, 1
  %178 = icmp eq i64 %177, 0
  br i1 %178, label %187, label %179

179:                                              ; preds = %169
  %180 = mul nsw i64 %171, %49
  %181 = getelementptr inbounds float, float* %66, i64 %180
  %182 = load float, float* %181, align 4
  %183 = fmul float %167, %182
  %184 = fmul float %182, %183
  %185 = fadd float %182, %184
  store float %185, float* %181, align 4
  %186 = add nsw i64 %171, 1
  br label %187

187:                                              ; preds = %179, %169
  %188 = phi i64 [ %186, %179 ], [ %171, %169 ]
  %189 = sub nsw i64 0, %172
  %190 = icmp eq i64 %176, %189
  br i1 %190, label %208, label %191

191:                                              ; preds = %187, %191
  %192 = phi i64 [ %206, %191 ], [ %188, %187 ]
  %193 = mul nsw i64 %192, %49
  %194 = getelementptr inbounds float, float* %66, i64 %193
  %195 = load float, float* %194, align 4
  %196 = fmul float %167, %195
  %197 = fmul float %195, %196
  %198 = fadd float %195, %197
  store float %198, float* %194, align 4
  %199 = add nsw i64 %192, 1
  %200 = mul nsw i64 %199, %49
  %201 = getelementptr inbounds float, float* %66, i64 %200
  %202 = load float, float* %201, align 4
  %203 = fmul float %167, %202
  %204 = fmul float %202, %203
  %205 = fadd float %202, %204
  store float %205, float* %201, align 4
  %206 = add nsw i64 %192, 2
  %207 = icmp eq i64 %206, %172
  br i1 %207, label %208, label %191

208:                                              ; preds = %187, %191, %158
  %209 = icmp sgt i32 %152, 1
  %210 = and i1 %209, %159
  br i1 %210, label %211, label %270

211:                                              ; preds = %208
  %212 = load float, float* %66, align 4
  %213 = fsub float %82, %212
  %214 = sitofp i32 %152 to float
  %215 = fdiv float %213, %214
  %216 = icmp slt i32 %84, %152
  br i1 %216, label %217, label %270

217:                                              ; preds = %211
  %218 = sext i32 %84 to i64
  %219 = sext i32 %152 to i64
  %220 = sub nsw i64 %219, %218
  %221 = xor i64 %218, -1
  %222 = and i64 %220, 1
  %223 = icmp eq i64 %222, 0
  br i1 %223, label %237, label %224

224:                                              ; preds = %217
  %225 = fsub float %213, %215
  %226 = mul nsw i64 %218, %49
  %227 = getelementptr inbounds float, float* %66, i64 %226
  %228 = load float, float* %227, align 4
  %229 = fadd float %225, %228
  %230 = fcmp ogt float %229, 1.000000e+00
  %231 = select i1 %230, float 1.000000e+00, float %229
  %232 = fcmp olt float %231, -1.000000e+00
  %233 = or i1 %230, %232
  %234 = select i1 %232, float -1.000000e+00, float 1.000000e+00
  %235 = select i1 %233, float %234, float %229
  store float %235, float* %227, align 4
  %236 = add nsw i64 %218, 1
  br label %237

237:                                              ; preds = %224, %217
  %238 = phi i64 [ %236, %224 ], [ %218, %217 ]
  %239 = phi float [ %225, %224 ], [ %213, %217 ]
  %240 = sub nsw i64 0, %219
  %241 = icmp eq i64 %221, %240
  br i1 %241, label %270, label %242

242:                                              ; preds = %237, %242
  %243 = phi i64 [ %268, %242 ], [ %238, %237 ]
  %244 = phi float [ %257, %242 ], [ %239, %237 ]
  %245 = fsub float %244, %215
  %246 = mul nsw i64 %243, %49
  %247 = getelementptr inbounds float, float* %66, i64 %246
  %248 = load float, float* %247, align 4
  %249 = fadd float %245, %248
  %250 = fcmp ogt float %249, 1.000000e+00
  %251 = select i1 %250, float 1.000000e+00, float %249
  %252 = fcmp olt float %251, -1.000000e+00
  %253 = or i1 %250, %252
  %254 = select i1 %252, float -1.000000e+00, float 1.000000e+00
  %255 = select i1 %253, float %254, float %249
  store float %255, float* %247, align 4
  %256 = add nsw i64 %243, 1
  %257 = fsub float %245, %215
  %258 = mul nsw i64 %256, %49
  %259 = getelementptr inbounds float, float* %66, i64 %258
  %260 = load float, float* %259, align 4
  %261 = fadd float %257, %260
  %262 = fcmp ogt float %261, 1.000000e+00
  %263 = select i1 %262, float 1.000000e+00, float %261
  %264 = fcmp olt float %263, -1.000000e+00
  %265 = or i1 %262, %264
  %266 = select i1 %264, float -1.000000e+00, float 1.000000e+00
  %267 = select i1 %265, float %266, float %261
  store float %267, float* %259, align 4
  %268 = add nsw i64 %243, 2
  %269 = icmp eq i64 %268, %219
  br i1 %269, label %270, label %242

270:                                              ; preds = %237, %242, %211, %208
  %271 = icmp eq i32 %150, %1
  br i1 %271, label %272, label %83

272:                                              ; preds = %270, %104
  %273 = phi float [ %167, %270 ], [ 0.000000e+00, %104 ]
  store float %273, float* %67, align 4
  %274 = add nuw nsw i64 %65, 1
  %275 = icmp eq i64 %274, %50
  br i1 %275, label %276, label %64

276:                                              ; preds = %272, %4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden i32 @encode_size(i32, i8* nocapture) local_unnamed_addr #1 {
  %3 = icmp slt i32 %0, 252
  %4 = trunc i32 %0 to i8
  br i1 %3, label %5, label %6

5:                                                ; preds = %2
  store i8 %4, i8* %1, align 1
  br label %13

6:                                                ; preds = %2
  %7 = or i8 %4, -4
  store i8 %7, i8* %1, align 1
  %8 = zext i8 %7 to i32
  %9 = sub nsw i32 %0, %8
  %10 = lshr i32 %9, 2
  %11 = trunc i32 %10 to i8
  %12 = getelementptr inbounds i8, i8* %1, i64 1
  store i8 %11, i8* %12, align 1
  br label %13

13:                                               ; preds = %6, %5
  %14 = phi i32 [ 1, %5 ], [ 2, %6 ]
  ret i32 %14
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @opus_packet_get_samples_per_frame(i8* nocapture readonly, i32) local_unnamed_addr #2 {
  %3 = load i8, i8* %0, align 1
  %4 = zext i8 %3 to i32
  %5 = icmp slt i8 %3, 0
  br i1 %5, label %6, label %11

6:                                                ; preds = %2
  %7 = lshr i32 %4, 3
  %8 = and i32 %7, 3
  %9 = shl i32 %1, %8
  %10 = sdiv i32 %9, 400
  br label %31

11:                                               ; preds = %2
  %12 = and i32 %4, 96
  %13 = icmp eq i32 %12, 96
  br i1 %13, label %14, label %21

14:                                               ; preds = %11
  %15 = and i32 %4, 8
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %19, label %17

17:                                               ; preds = %14
  %18 = sdiv i32 %1, 50
  br label %31

19:                                               ; preds = %14
  %20 = sdiv i32 %1, 100
  br label %31

21:                                               ; preds = %11
  %22 = lshr i32 %4, 3
  %23 = and i32 %22, 3
  %24 = icmp eq i32 %23, 3
  br i1 %24, label %25, label %28

25:                                               ; preds = %21
  %26 = mul nsw i32 %1, 60
  %27 = sdiv i32 %26, 1000
  br label %31

28:                                               ; preds = %21
  %29 = shl i32 %1, %23
  %30 = sdiv i32 %29, 100
  br label %31

31:                                               ; preds = %17, %19, %28, %25, %6
  %32 = phi i32 [ %10, %6 ], [ %27, %25 ], [ %30, %28 ], [ %18, %17 ], [ %20, %19 ]
  ret i32 %32
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @opus_packet_parse_impl(i8*, i32, i32, i8*, i8**, i16*, i32*, i32*) local_unnamed_addr #3 {
  %9 = icmp eq i16* %5, null
  %10 = icmp slt i32 %1, 0
  %11 = or i1 %10, %9
  br i1 %11, label %501, label %12

12:                                               ; preds = %8
  %13 = icmp eq i32 %1, 0
  br i1 %13, label %501, label %14

14:                                               ; preds = %12
  %15 = load i8, i8* %0, align 1
  %16 = zext i8 %15 to i32
  %17 = icmp slt i8 %15, 0
  br i1 %17, label %18, label %23

18:                                               ; preds = %14
  %19 = lshr i32 %16, 3
  %20 = and i32 %19, 3
  %21 = shl i32 48000, %20
  %22 = udiv i32 %21, 400
  br label %37

23:                                               ; preds = %14
  %24 = and i32 %16, 96
  %25 = icmp eq i32 %24, 96
  br i1 %25, label %26, label %30

26:                                               ; preds = %23
  %27 = and i32 %16, 8
  %28 = icmp eq i32 %27, 0
  %29 = select i1 %28, i32 480, i32 960
  br label %37

30:                                               ; preds = %23
  %31 = lshr i32 %16, 3
  %32 = and i32 %31, 3
  %33 = icmp eq i32 %32, 3
  br i1 %33, label %37, label %34

34:                                               ; preds = %30
  %35 = shl i32 48000, %32
  %36 = udiv i32 %35, 100
  br label %37

37:                                               ; preds = %26, %30, %18, %34
  %38 = phi i32 [ %22, %18 ], [ %36, %34 ], [ 2880, %30 ], [ %29, %26 ]
  %39 = getelementptr inbounds i8, i8* %0, i64 1
  %40 = add nsw i32 %1, -1
  %41 = and i8 %15, 3
  %42 = zext i8 %41 to i32
  switch i32 %42, label %77 [
    i32 0, label %250
    i32 1, label %43
    i32 2, label %51
  ]

43:                                               ; preds = %37
  %44 = icmp eq i32 %2, 0
  br i1 %44, label %45, label %258

45:                                               ; preds = %43
  %46 = and i32 %40, 1
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %48, label %501

48:                                               ; preds = %45
  %49 = lshr i32 %40, 1
  %50 = trunc i32 %49 to i16
  store i16 %50, i16* %5, align 2
  br label %332

51:                                               ; preds = %37
  %52 = icmp slt i32 %1, 2
  br i1 %52, label %53, label %54

53:                                               ; preds = %51
  store i16 -1, i16* %5, align 2
  br label %501

54:                                               ; preds = %51
  %55 = load i8, i8* %39, align 1
  %56 = zext i8 %55 to i16
  %57 = icmp ult i8 %55, -4
  br i1 %57, label %67, label %58

58:                                               ; preds = %54
  %59 = icmp slt i32 %1, 3
  br i1 %59, label %60, label %61

60:                                               ; preds = %58
  store i16 -1, i16* %5, align 2
  br label %501

61:                                               ; preds = %58
  %62 = getelementptr inbounds i8, i8* %0, i64 2
  %63 = load i8, i8* %62, align 1
  %64 = zext i8 %63 to i16
  %65 = shl nuw nsw i16 %64, 2
  %66 = add nuw nsw i16 %65, %56
  br label %67

67:                                               ; preds = %54, %61
  %68 = phi i16 [ %66, %61 ], [ %56, %54 ]
  %69 = phi i32 [ 2, %61 ], [ 1, %54 ]
  store i16 %68, i16* %5, align 2
  %70 = sub nsw i32 %40, %69
  %71 = sext i16 %68 to i32
  %72 = icmp slt i32 %70, %71
  br i1 %72, label %501, label %73

73:                                               ; preds = %67
  %74 = zext i32 %69 to i64
  %75 = getelementptr inbounds i8, i8* %39, i64 %74
  %76 = sub nsw i32 %70, %71
  br label %250

77:                                               ; preds = %37
  %78 = icmp slt i32 %1, 2
  br i1 %78, label %501, label %79

79:                                               ; preds = %77
  %80 = getelementptr inbounds i8, i8* %0, i64 2
  %81 = load i8, i8* %39, align 1
  %82 = zext i8 %81 to i32
  %83 = and i32 %82, 63
  %84 = icmp eq i32 %83, 0
  %85 = mul nuw nsw i32 %83, %38
  %86 = icmp ugt i32 %85, 5760
  %87 = or i1 %84, %86
  br i1 %87, label %501, label %88

88:                                               ; preds = %79
  %89 = add nsw i32 %1, -2
  %90 = and i32 %82, 64
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %108, label %92

92:                                               ; preds = %88, %97
  %93 = phi i32 [ %104, %97 ], [ %89, %88 ]
  %94 = phi i8* [ %98, %97 ], [ %80, %88 ]
  %95 = phi i32 [ %105, %97 ], [ 0, %88 ]
  %96 = icmp slt i32 %93, 1
  br i1 %96, label %501, label %97

97:                                               ; preds = %92
  %98 = getelementptr inbounds i8, i8* %94, i64 1
  %99 = load i8, i8* %94, align 1
  %100 = icmp eq i8 %99, -1
  %101 = select i1 %100, i8 -2, i8 %99
  %102 = zext i8 %101 to i32
  %103 = xor i32 %102, -1
  %104 = add i32 %93, %103
  %105 = add nuw nsw i32 %95, %102
  br i1 %100, label %92, label %106

106:                                              ; preds = %97
  %107 = icmp slt i32 %104, 0
  br i1 %107, label %501, label %108

108:                                              ; preds = %88, %106
  %109 = phi i32 [ %105, %106 ], [ 0, %88 ]
  %110 = phi i8* [ %98, %106 ], [ %80, %88 ]
  %111 = phi i32 [ %104, %106 ], [ %89, %88 ]
  %112 = icmp sgt i8 %81, -1
  %113 = lshr i8 %81, 7
  %114 = xor i8 %113, 1
  %115 = zext i8 %114 to i32
  br i1 %112, label %157, label %116

116:                                              ; preds = %108
  %117 = add nsw i32 %83, -1
  %118 = icmp sgt i32 %117, 0
  br i1 %118, label %119, label %250

119:                                              ; preds = %116
  %120 = zext i32 %117 to i64
  br label %121

121:                                              ; preds = %148, %119
  %122 = phi i64 [ 0, %119 ], [ %153, %148 ]
  %123 = phi i32 [ %111, %119 ], [ %152, %148 ]
  %124 = phi i8* [ %110, %119 ], [ %150, %148 ]
  %125 = phi i32 [ %111, %119 ], [ %145, %148 ]
  %126 = getelementptr inbounds i16, i16* %5, i64 %122
  %127 = icmp slt i32 %125, 1
  br i1 %127, label %128, label %129

128:                                              ; preds = %121
  store i16 -1, i16* %126, align 2
  br label %501

129:                                              ; preds = %121
  %130 = load i8, i8* %124, align 1
  %131 = zext i8 %130 to i16
  %132 = icmp ult i8 %130, -4
  br i1 %132, label %142, label %133

133:                                              ; preds = %129
  %134 = icmp slt i32 %125, 2
  br i1 %134, label %135, label %136

135:                                              ; preds = %133
  store i16 -1, i16* %126, align 2
  br label %501

136:                                              ; preds = %133
  %137 = getelementptr inbounds i8, i8* %124, i64 1
  %138 = load i8, i8* %137, align 1
  %139 = zext i8 %138 to i16
  %140 = shl nuw nsw i16 %139, 2
  %141 = add nuw nsw i16 %140, %131
  br label %142

142:                                              ; preds = %129, %136
  %143 = phi i16 [ %141, %136 ], [ %131, %129 ]
  %144 = phi i32 [ 2, %136 ], [ 1, %129 ]
  store i16 %143, i16* %126, align 2
  %145 = sub nsw i32 %125, %144
  %146 = sext i16 %143 to i32
  %147 = icmp slt i32 %145, %146
  br i1 %147, label %501, label %148

148:                                              ; preds = %142
  %149 = zext i32 %144 to i64
  %150 = getelementptr inbounds i8, i8* %124, i64 %149
  %151 = sub i32 %123, %144
  %152 = sub i32 %151, %146
  %153 = add nuw nsw i64 %122, 1
  %154 = icmp eq i64 %153, %120
  br i1 %154, label %155, label %121

155:                                              ; preds = %148
  %156 = icmp slt i32 %152, 0
  br i1 %156, label %501, label %250

157:                                              ; preds = %108
  %158 = icmp eq i32 %2, 0
  br i1 %158, label %159, label %258

159:                                              ; preds = %157
  %160 = sdiv i32 %111, %83
  %161 = mul nsw i32 %160, %83
  %162 = icmp eq i32 %161, %111
  br i1 %162, label %163, label %501

163:                                              ; preds = %159
  %164 = add nsw i32 %83, -1
  %165 = icmp sgt i32 %164, 0
  br i1 %165, label %166, label %332

166:                                              ; preds = %163
  %167 = trunc i32 %160 to i16
  %168 = zext i32 %164 to i64
  %169 = icmp ult i32 %164, 16
  br i1 %169, label %243, label %170

170:                                              ; preds = %166
  %171 = and i64 %168, 4294967280
  %172 = insertelement <8 x i16> undef, i16 %167, i32 0
  %173 = shufflevector <8 x i16> %172, <8 x i16> undef, <8 x i32> zeroinitializer
  %174 = insertelement <8 x i16> undef, i16 %167, i32 0
  %175 = shufflevector <8 x i16> %174, <8 x i16> undef, <8 x i32> zeroinitializer
  %176 = add nsw i64 %171, -16
  %177 = lshr exact i64 %176, 4
  %178 = add nuw nsw i64 %177, 1
  %179 = and i64 %178, 7
  %180 = icmp ult i64 %176, 112
  br i1 %180, label %228, label %181

181:                                              ; preds = %170
  %182 = sub nsw i64 %178, %179
  br label %183

183:                                              ; preds = %183, %181
  %184 = phi i64 [ 0, %181 ], [ %225, %183 ]
  %185 = phi i64 [ %182, %181 ], [ %226, %183 ]
  %186 = getelementptr inbounds i16, i16* %5, i64 %184
  %187 = bitcast i16* %186 to <8 x i16>*
  store <8 x i16> %173, <8 x i16>* %187, align 2
  %188 = getelementptr inbounds i16, i16* %186, i64 8
  %189 = bitcast i16* %188 to <8 x i16>*
  store <8 x i16> %175, <8 x i16>* %189, align 2
  %190 = or i64 %184, 16
  %191 = getelementptr inbounds i16, i16* %5, i64 %190
  %192 = bitcast i16* %191 to <8 x i16>*
  store <8 x i16> %173, <8 x i16>* %192, align 2
  %193 = getelementptr inbounds i16, i16* %191, i64 8
  %194 = bitcast i16* %193 to <8 x i16>*
  store <8 x i16> %175, <8 x i16>* %194, align 2
  %195 = or i64 %184, 32
  %196 = getelementptr inbounds i16, i16* %5, i64 %195
  %197 = bitcast i16* %196 to <8 x i16>*
  store <8 x i16> %173, <8 x i16>* %197, align 2
  %198 = getelementptr inbounds i16, i16* %196, i64 8
  %199 = bitcast i16* %198 to <8 x i16>*
  store <8 x i16> %175, <8 x i16>* %199, align 2
  %200 = or i64 %184, 48
  %201 = getelementptr inbounds i16, i16* %5, i64 %200
  %202 = bitcast i16* %201 to <8 x i16>*
  store <8 x i16> %173, <8 x i16>* %202, align 2
  %203 = getelementptr inbounds i16, i16* %201, i64 8
  %204 = bitcast i16* %203 to <8 x i16>*
  store <8 x i16> %175, <8 x i16>* %204, align 2
  %205 = or i64 %184, 64
  %206 = getelementptr inbounds i16, i16* %5, i64 %205
  %207 = bitcast i16* %206 to <8 x i16>*
  store <8 x i16> %173, <8 x i16>* %207, align 2
  %208 = getelementptr inbounds i16, i16* %206, i64 8
  %209 = bitcast i16* %208 to <8 x i16>*
  store <8 x i16> %175, <8 x i16>* %209, align 2
  %210 = or i64 %184, 80
  %211 = getelementptr inbounds i16, i16* %5, i64 %210
  %212 = bitcast i16* %211 to <8 x i16>*
  store <8 x i16> %173, <8 x i16>* %212, align 2
  %213 = getelementptr inbounds i16, i16* %211, i64 8
  %214 = bitcast i16* %213 to <8 x i16>*
  store <8 x i16> %175, <8 x i16>* %214, align 2
  %215 = or i64 %184, 96
  %216 = getelementptr inbounds i16, i16* %5, i64 %215
  %217 = bitcast i16* %216 to <8 x i16>*
  store <8 x i16> %173, <8 x i16>* %217, align 2
  %218 = getelementptr inbounds i16, i16* %216, i64 8
  %219 = bitcast i16* %218 to <8 x i16>*
  store <8 x i16> %175, <8 x i16>* %219, align 2
  %220 = or i64 %184, 112
  %221 = getelementptr inbounds i16, i16* %5, i64 %220
  %222 = bitcast i16* %221 to <8 x i16>*
  store <8 x i16> %173, <8 x i16>* %222, align 2
  %223 = getelementptr inbounds i16, i16* %221, i64 8
  %224 = bitcast i16* %223 to <8 x i16>*
  store <8 x i16> %175, <8 x i16>* %224, align 2
  %225 = add i64 %184, 128
  %226 = add i64 %185, -8
  %227 = icmp eq i64 %226, 0
  br i1 %227, label %228, label %183, !llvm.loop !6

228:                                              ; preds = %183, %170
  %229 = phi i64 [ 0, %170 ], [ %225, %183 ]
  %230 = icmp eq i64 %179, 0
  br i1 %230, label %241, label %231

231:                                              ; preds = %228, %231
  %232 = phi i64 [ %238, %231 ], [ %229, %228 ]
  %233 = phi i64 [ %239, %231 ], [ %179, %228 ]
  %234 = getelementptr inbounds i16, i16* %5, i64 %232
  %235 = bitcast i16* %234 to <8 x i16>*
  store <8 x i16> %173, <8 x i16>* %235, align 2
  %236 = getelementptr inbounds i16, i16* %234, i64 8
  %237 = bitcast i16* %236 to <8 x i16>*
  store <8 x i16> %175, <8 x i16>* %237, align 2
  %238 = add i64 %232, 16
  %239 = add i64 %233, -1
  %240 = icmp eq i64 %239, 0
  br i1 %240, label %241, label %231, !llvm.loop !7

241:                                              ; preds = %231, %228
  %242 = icmp eq i64 %171, %168
  br i1 %242, label %250, label %243

243:                                              ; preds = %241, %166
  %244 = phi i64 [ 0, %166 ], [ %171, %241 ]
  br label %245

245:                                              ; preds = %243, %245
  %246 = phi i64 [ %248, %245 ], [ %244, %243 ]
  %247 = getelementptr inbounds i16, i16* %5, i64 %246
  store i16 %167, i16* %247, align 2
  %248 = add nuw nsw i64 %246, 1
  %249 = icmp eq i64 %248, %168
  br i1 %249, label %250, label %245, !llvm.loop !9

250:                                              ; preds = %245, %241, %116, %37, %155, %73
  %251 = phi i32 [ %145, %155 ], [ %70, %73 ], [ %40, %37 ], [ %111, %116 ], [ %111, %241 ], [ %111, %245 ]
  %252 = phi i8* [ %150, %155 ], [ %75, %73 ], [ %39, %37 ], [ %110, %116 ], [ %110, %241 ], [ %110, %245 ]
  %253 = phi i32 [ %83, %155 ], [ 2, %73 ], [ 1, %37 ], [ %83, %116 ], [ %83, %241 ], [ %83, %245 ]
  %254 = phi i32 [ %115, %155 ], [ 0, %73 ], [ %42, %37 ], [ %115, %116 ], [ %115, %241 ], [ %115, %245 ]
  %255 = phi i32 [ %152, %155 ], [ %76, %73 ], [ %40, %37 ], [ %111, %116 ], [ %160, %241 ], [ %160, %245 ]
  %256 = phi i32 [ %109, %155 ], [ 0, %73 ], [ %42, %37 ], [ %109, %116 ], [ %109, %241 ], [ %109, %245 ]
  %257 = icmp eq i32 %2, 0
  br i1 %257, label %332, label %258

258:                                              ; preds = %43, %157, %250
  %259 = phi i32 [ %256, %250 ], [ 0, %43 ], [ %109, %157 ]
  %260 = phi i32 [ %255, %250 ], [ %40, %43 ], [ %40, %157 ]
  %261 = phi i32 [ %254, %250 ], [ 1, %43 ], [ %115, %157 ]
  %262 = phi i32 [ %253, %250 ], [ 2, %43 ], [ %83, %157 ]
  %263 = phi i8* [ %252, %250 ], [ %39, %43 ], [ %110, %157 ]
  %264 = phi i32 [ %251, %250 ], [ %40, %43 ], [ %111, %157 ]
  %265 = zext i32 %262 to i64
  %266 = getelementptr inbounds i16, i16* %5, i64 %265
  %267 = getelementptr inbounds i16, i16* %266, i64 -1
  %268 = icmp slt i32 %264, 1
  br i1 %268, label %281, label %269

269:                                              ; preds = %258
  %270 = load i8, i8* %263, align 1
  %271 = zext i8 %270 to i16
  %272 = icmp ult i8 %270, -4
  br i1 %272, label %281, label %273

273:                                              ; preds = %269
  %274 = icmp slt i32 %264, 2
  br i1 %274, label %281, label %275

275:                                              ; preds = %273
  %276 = getelementptr inbounds i8, i8* %263, i64 1
  %277 = load i8, i8* %276, align 1
  %278 = zext i8 %277 to i16
  %279 = shl nuw nsw i16 %278, 2
  %280 = add nuw nsw i16 %279, %271
  br label %281

281:                                              ; preds = %273, %269, %258, %275
  %282 = phi i16 [ %280, %275 ], [ -1, %258 ], [ %271, %269 ], [ -1, %273 ]
  %283 = phi i32 [ 2, %275 ], [ -1, %258 ], [ 1, %269 ], [ -1, %273 ]
  store i16 %282, i16* %267, align 2
  %284 = sub nsw i32 %264, %283
  %285 = add nsw i32 %262, -1
  %286 = sext i32 %285 to i64
  %287 = getelementptr inbounds i16, i16* %5, i64 %286
  %288 = load i16, i16* %287, align 2
  %289 = sext i16 %288 to i32
  %290 = icmp slt i16 %288, 0
  %291 = icmp slt i32 %284, %289
  %292 = or i1 %290, %291
  br i1 %292, label %501, label %293

293:                                              ; preds = %281
  %294 = sext i32 %283 to i64
  %295 = getelementptr inbounds i8, i8* %263, i64 %294
  %296 = icmp eq i32 %261, 0
  br i1 %296, label %329, label %297

297:                                              ; preds = %293
  %298 = mul nsw i32 %262, %289
  %299 = icmp sgt i32 %298, %284
  br i1 %299, label %501, label %300

300:                                              ; preds = %297
  %301 = icmp sgt i32 %285, 0
  br i1 %301, label %302, label %354

302:                                              ; preds = %300
  %303 = zext i32 %285 to i64
  store i16 %288, i16* %5, align 2
  %304 = icmp eq i32 %285, 1
  br i1 %304, label %354, label %305

305:                                              ; preds = %302
  %306 = add nsw i64 %303, -1
  %307 = add nsw i64 %303, -2
  %308 = and i64 %306, 3
  %309 = icmp ult i64 %307, 3
  br i1 %309, label %343, label %310

310:                                              ; preds = %305
  %311 = sub nsw i64 %306, %308
  br label %312

312:                                              ; preds = %312, %310
  %313 = phi i64 [ 1, %310 ], [ %326, %312 ]
  %314 = phi i64 [ %311, %310 ], [ %327, %312 ]
  %315 = load i16, i16* %287, align 2
  %316 = getelementptr inbounds i16, i16* %5, i64 %313
  store i16 %315, i16* %316, align 2
  %317 = add nuw nsw i64 %313, 1
  %318 = load i16, i16* %287, align 2
  %319 = getelementptr inbounds i16, i16* %5, i64 %317
  store i16 %318, i16* %319, align 2
  %320 = add nuw nsw i64 %313, 2
  %321 = load i16, i16* %287, align 2
  %322 = getelementptr inbounds i16, i16* %5, i64 %320
  store i16 %321, i16* %322, align 2
  %323 = add nuw nsw i64 %313, 3
  %324 = load i16, i16* %287, align 2
  %325 = getelementptr inbounds i16, i16* %5, i64 %323
  store i16 %324, i16* %325, align 2
  %326 = add nuw nsw i64 %313, 4
  %327 = add i64 %314, -4
  %328 = icmp eq i64 %327, 0
  br i1 %328, label %343, label %312

329:                                              ; preds = %293
  %330 = add nsw i32 %283, %289
  %331 = icmp sgt i32 %330, %260
  br i1 %331, label %501, label %354

332:                                              ; preds = %163, %48, %250
  %333 = phi i32 [ 0, %48 ], [ %256, %250 ], [ %109, %163 ]
  %334 = phi i32 [ %49, %48 ], [ %255, %250 ], [ %160, %163 ]
  %335 = phi i32 [ 2, %48 ], [ %253, %250 ], [ %83, %163 ]
  %336 = phi i8* [ %39, %48 ], [ %252, %250 ], [ %110, %163 ]
  %337 = icmp sgt i32 %334, 1275
  br i1 %337, label %501, label %338

338:                                              ; preds = %332
  %339 = trunc i32 %334 to i16
  %340 = add nsw i32 %335, -1
  %341 = sext i32 %340 to i64
  %342 = getelementptr inbounds i16, i16* %5, i64 %341
  store i16 %339, i16* %342, align 2
  br label %354

343:                                              ; preds = %312, %305
  %344 = phi i64 [ 1, %305 ], [ %326, %312 ]
  %345 = icmp eq i64 %308, 0
  br i1 %345, label %354, label %346

346:                                              ; preds = %343, %346
  %347 = phi i64 [ %351, %346 ], [ %344, %343 ]
  %348 = phi i64 [ %352, %346 ], [ %308, %343 ]
  %349 = load i16, i16* %287, align 2
  %350 = getelementptr inbounds i16, i16* %5, i64 %347
  store i16 %349, i16* %350, align 2
  %351 = add nuw nsw i64 %347, 1
  %352 = add i64 %348, -1
  %353 = icmp eq i64 %352, 0
  br i1 %353, label %354, label %346, !llvm.loop !10

354:                                              ; preds = %343, %346, %302, %300, %329, %338
  %355 = phi i32 [ %259, %329 ], [ %333, %338 ], [ %259, %300 ], [ %259, %302 ], [ %259, %346 ], [ %259, %343 ]
  %356 = phi i32 [ %262, %329 ], [ %335, %338 ], [ %262, %300 ], [ %262, %302 ], [ %262, %346 ], [ %262, %343 ]
  %357 = phi i8* [ %295, %329 ], [ %336, %338 ], [ %295, %300 ], [ %295, %302 ], [ %295, %346 ], [ %295, %343 ]
  %358 = icmp eq i32* %6, null
  br i1 %358, label %364, label %359

359:                                              ; preds = %354
  %360 = ptrtoint i8* %357 to i64
  %361 = ptrtoint i8* %0 to i64
  %362 = sub i64 %360, %361
  %363 = trunc i64 %362 to i32
  store i32 %363, i32* %6, align 4
  br label %364

364:                                              ; preds = %354, %359
  %365 = icmp eq i32 %356, 0
  br i1 %365, label %489, label %366

366:                                              ; preds = %364
  %367 = icmp eq i8** %4, null
  %368 = zext i32 %356 to i64
  %369 = add nsw i64 %368, -1
  br i1 %367, label %375, label %370

370:                                              ; preds = %366
  %371 = and i64 %368, 3
  %372 = icmp ult i64 %369, 3
  br i1 %372, label %472, label %373

373:                                              ; preds = %370
  %374 = sub nsw i64 %368, %371
  br label %426

375:                                              ; preds = %366
  %376 = and i64 %368, 7
  %377 = icmp ult i64 %369, 7
  br i1 %377, label %456, label %378

378:                                              ; preds = %375
  %379 = sub nsw i64 %368, %376
  br label %380

380:                                              ; preds = %380, %378
  %381 = phi i64 [ 0, %378 ], [ %423, %380 ]
  %382 = phi i8* [ %357, %378 ], [ %422, %380 ]
  %383 = phi i64 [ %379, %378 ], [ %424, %380 ]
  %384 = getelementptr inbounds i16, i16* %5, i64 %381
  %385 = load i16, i16* %384, align 2
  %386 = sext i16 %385 to i64
  %387 = getelementptr inbounds i8, i8* %382, i64 %386
  %388 = or i64 %381, 1
  %389 = getelementptr inbounds i16, i16* %5, i64 %388
  %390 = load i16, i16* %389, align 2
  %391 = sext i16 %390 to i64
  %392 = getelementptr inbounds i8, i8* %387, i64 %391
  %393 = or i64 %381, 2
  %394 = getelementptr inbounds i16, i16* %5, i64 %393
  %395 = load i16, i16* %394, align 2
  %396 = sext i16 %395 to i64
  %397 = getelementptr inbounds i8, i8* %392, i64 %396
  %398 = or i64 %381, 3
  %399 = getelementptr inbounds i16, i16* %5, i64 %398
  %400 = load i16, i16* %399, align 2
  %401 = sext i16 %400 to i64
  %402 = getelementptr inbounds i8, i8* %397, i64 %401
  %403 = or i64 %381, 4
  %404 = getelementptr inbounds i16, i16* %5, i64 %403
  %405 = load i16, i16* %404, align 2
  %406 = sext i16 %405 to i64
  %407 = getelementptr inbounds i8, i8* %402, i64 %406
  %408 = or i64 %381, 5
  %409 = getelementptr inbounds i16, i16* %5, i64 %408
  %410 = load i16, i16* %409, align 2
  %411 = sext i16 %410 to i64
  %412 = getelementptr inbounds i8, i8* %407, i64 %411
  %413 = or i64 %381, 6
  %414 = getelementptr inbounds i16, i16* %5, i64 %413
  %415 = load i16, i16* %414, align 2
  %416 = sext i16 %415 to i64
  %417 = getelementptr inbounds i8, i8* %412, i64 %416
  %418 = or i64 %381, 7
  %419 = getelementptr inbounds i16, i16* %5, i64 %418
  %420 = load i16, i16* %419, align 2
  %421 = sext i16 %420 to i64
  %422 = getelementptr inbounds i8, i8* %417, i64 %421
  %423 = add nuw nsw i64 %381, 8
  %424 = add i64 %383, -8
  %425 = icmp eq i64 %424, 0
  br i1 %425, label %456, label %380

426:                                              ; preds = %426, %373
  %427 = phi i64 [ 0, %373 ], [ %453, %426 ]
  %428 = phi i8* [ %357, %373 ], [ %452, %426 ]
  %429 = phi i64 [ %374, %373 ], [ %454, %426 ]
  %430 = getelementptr inbounds i8*, i8** %4, i64 %427
  store i8* %428, i8** %430, align 8
  %431 = getelementptr inbounds i16, i16* %5, i64 %427
  %432 = load i16, i16* %431, align 2
  %433 = sext i16 %432 to i64
  %434 = getelementptr inbounds i8, i8* %428, i64 %433
  %435 = or i64 %427, 1
  %436 = getelementptr inbounds i8*, i8** %4, i64 %435
  store i8* %434, i8** %436, align 8
  %437 = getelementptr inbounds i16, i16* %5, i64 %435
  %438 = load i16, i16* %437, align 2
  %439 = sext i16 %438 to i64
  %440 = getelementptr inbounds i8, i8* %434, i64 %439
  %441 = or i64 %427, 2
  %442 = getelementptr inbounds i8*, i8** %4, i64 %441
  store i8* %440, i8** %442, align 8
  %443 = getelementptr inbounds i16, i16* %5, i64 %441
  %444 = load i16, i16* %443, align 2
  %445 = sext i16 %444 to i64
  %446 = getelementptr inbounds i8, i8* %440, i64 %445
  %447 = or i64 %427, 3
  %448 = getelementptr inbounds i8*, i8** %4, i64 %447
  store i8* %446, i8** %448, align 8
  %449 = getelementptr inbounds i16, i16* %5, i64 %447
  %450 = load i16, i16* %449, align 2
  %451 = sext i16 %450 to i64
  %452 = getelementptr inbounds i8, i8* %446, i64 %451
  %453 = add nuw nsw i64 %427, 4
  %454 = add i64 %429, -4
  %455 = icmp eq i64 %454, 0
  br i1 %455, label %472, label %426

456:                                              ; preds = %380, %375
  %457 = phi i8* [ undef, %375 ], [ %422, %380 ]
  %458 = phi i64 [ 0, %375 ], [ %423, %380 ]
  %459 = phi i8* [ %357, %375 ], [ %422, %380 ]
  %460 = icmp eq i64 %376, 0
  br i1 %460, label %489, label %461

461:                                              ; preds = %456, %461
  %462 = phi i64 [ %469, %461 ], [ %458, %456 ]
  %463 = phi i8* [ %468, %461 ], [ %459, %456 ]
  %464 = phi i64 [ %470, %461 ], [ %376, %456 ]
  %465 = getelementptr inbounds i16, i16* %5, i64 %462
  %466 = load i16, i16* %465, align 2
  %467 = sext i16 %466 to i64
  %468 = getelementptr inbounds i8, i8* %463, i64 %467
  %469 = add nuw nsw i64 %462, 1
  %470 = add i64 %464, -1
  %471 = icmp eq i64 %470, 0
  br i1 %471, label %489, label %461, !llvm.loop !11

472:                                              ; preds = %426, %370
  %473 = phi i8* [ undef, %370 ], [ %452, %426 ]
  %474 = phi i64 [ 0, %370 ], [ %453, %426 ]
  %475 = phi i8* [ %357, %370 ], [ %452, %426 ]
  %476 = icmp eq i64 %371, 0
  br i1 %476, label %489, label %477

477:                                              ; preds = %472, %477
  %478 = phi i64 [ %486, %477 ], [ %474, %472 ]
  %479 = phi i8* [ %485, %477 ], [ %475, %472 ]
  %480 = phi i64 [ %487, %477 ], [ %371, %472 ]
  %481 = getelementptr inbounds i8*, i8** %4, i64 %478
  store i8* %479, i8** %481, align 8
  %482 = getelementptr inbounds i16, i16* %5, i64 %478
  %483 = load i16, i16* %482, align 2
  %484 = sext i16 %483 to i64
  %485 = getelementptr inbounds i8, i8* %479, i64 %484
  %486 = add nuw nsw i64 %478, 1
  %487 = add i64 %480, -1
  %488 = icmp eq i64 %487, 0
  br i1 %488, label %489, label %477, !llvm.loop !12

489:                                              ; preds = %472, %477, %456, %461, %364
  %490 = phi i8* [ %357, %364 ], [ %457, %456 ], [ %468, %461 ], [ %473, %472 ], [ %485, %477 ]
  %491 = icmp eq i32* %7, null
  br i1 %491, label %498, label %492

492:                                              ; preds = %489
  %493 = ptrtoint i8* %490 to i64
  %494 = ptrtoint i8* %0 to i64
  %495 = sub i64 %493, %494
  %496 = trunc i64 %495 to i32
  %497 = add nsw i32 %355, %496
  store i32 %497, i32* %7, align 4
  br label %498

498:                                              ; preds = %489, %492
  %499 = icmp eq i8* %3, null
  br i1 %499, label %501, label %500

500:                                              ; preds = %498
  store i8 %15, i8* %3, align 1
  br label %501

501:                                              ; preds = %92, %142, %135, %128, %60, %53, %500, %498, %332, %329, %297, %281, %159, %155, %106, %79, %77, %67, %45, %12, %8
  %502 = phi i32 [ -1, %8 ], [ -4, %12 ], [ -4, %45 ], [ -4, %67 ], [ -4, %77 ], [ -4, %79 ], [ -4, %106 ], [ -4, %155 ], [ -4, %159 ], [ -4, %281 ], [ -4, %297 ], [ -4, %329 ], [ -4, %332 ], [ %356, %498 ], [ %356, %500 ], [ -4, %53 ], [ -4, %60 ], [ -4, %128 ], [ -4, %135 ], [ -4, %142 ], [ -4, %92 ]
  ret i32 %502
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @opus_packet_parse(i8*, i32, i8*, i8**, i16*, i32*) local_unnamed_addr #3 {
  %7 = tail call i32 @opus_packet_parse_impl(i8* %0, i32 %1, i32 0, i8* %2, i8** %3, i16* %4, i32* %5, i32* null)
  ret i32 %7
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #4

attributes #0 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone speculatable }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5, !3}
!5 = !{!"llvm.loop.unroll.runtime.disable"}
!6 = distinct !{!6, !3}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.unroll.disable"}
!9 = distinct !{!9, !5, !3}
!10 = distinct !{!10, !8}
!11 = distinct !{!11, !8}
!12 = distinct !{!12, !8}
