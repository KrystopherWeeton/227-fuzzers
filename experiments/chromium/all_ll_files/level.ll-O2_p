; ModuleID = '../../third_party/libaom/source/libaom/av1/encoder/level.c'
source_filename = "../../third_party/libaom/source/libaom/av1/encoder/level.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.AV1LevelSpec = type { i8, i32, i32, i32, i32, i32, i32, i32, i64, i64, double, double, double, double }
%struct.DECODER_MODEL = type { i8, i8, i8, i8, i32, i32, i32, i32, i64, double, double, double, double, i32, i32, i32, [8 x i32], [10 x %struct.FRAME_BUFFER], %struct.DFG_INTERVAL_QUEUE, double, double, i64, double, double, i32, i32, double, double }
%struct.FRAME_BUFFER = type { i32, i32, i32, i8, double }
%struct.DFG_INTERVAL_QUEUE = type { i32, i32, double, [64 x %struct.DFG_INTERVAL] }
%struct.DFG_INTERVAL = type { double, double, double }
%struct.AV1_COMP = type { %struct.AV1_PRIMARY*, [8 x i8], %struct.EncQuantDequantParams, %struct.ThreadData, %struct.FRAME_COUNTS, %struct.MBMIExtFrameBufferInfo, %struct.CB_COEFF_BUFFER*, %struct.CoeffBufferPool, %struct.AV1Common, %struct.AV1EncoderConfig, i32, [8 x i8], %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, %struct.yv12_buffer_config*, i32, %struct.TemporalFilterCtx, i32, %struct.ForceIntegerMVInfo, [7 x %struct.RefCntBuffer*], %struct.RefCntBuffer*, %struct.RefreshFrameFlagsInfo, [8 x i32], %struct.ExternalFlags, %struct.yv12_buffer_config, %struct.yv12_buffer_config, i64, %struct.RD_OPT, %struct.CODING_CONTEXT, %struct.GlobalMotionInfo, %struct.WinnerModeParams, %struct.TimeStamps, %struct.RATE_CONTROL, double, i32, i32, %struct.SPEED_FEATURES, %struct.MotionVectorSearchParams, i32, %struct.EncSegmentationInfo, %struct.CYCLIC_REFRESH*, %struct.ActiveMap, i8, %struct.RefBufferStack, i32, i32, %struct.FRAME_INFO, %struct.FRAME_INDEX_SET, %struct.InitialDimensions, i32, %struct.ResizePendingParams, %struct.TileDataEnc*, i32, %struct.TokenInfo, i32, %struct.VarBasedPartitionInfo, %struct.FrameProbInfo, %struct.MultiThreadInfo, i32, i32, i32, %struct.AV1LrStruct, %struct.aom_film_grain_table_t*, %struct.aom_denoise_and_model_t*, %struct.InterpSearchFlags, i32, i32, i32, i32, %struct.RefFrameDistanceInfo, double*, %struct.SVC, i8, %struct.MV_STATS, i8, i32, i32, %struct.FirstPassData, %struct.noise_estimate, %struct.av1_denoiser, i8*, i8, i32, i64, [8 x i8] }
%struct.AV1_PRIMARY = type { %struct.AV1_COMP*, %struct.AV1_COMP*, %struct.lookahead_ctx*, i32, %struct.aom_codec_pkt_list*, i32, %struct.GF_GROUP, %struct.GF_STATE, i32, %struct.AV1LevelParams, i32, i32, %struct.TWO_PASS, %struct.PRIMARY_RATE_CONTROL, %struct.yv12_buffer_config, %struct.SequenceHeader, i32, i8, i32, i32, %struct.aom_internal_error_info, [22 x %struct.aom_variance_vtable], double*, double*, %struct.TplParams }
%struct.lookahead_ctx = type { i32, i32, [2 x %struct.read_ctx], %struct.lookahead_entry*, i32, i8 }
%struct.read_ctx = type { i32, i32, i32, i32 }
%struct.lookahead_entry = type { %struct.yv12_buffer_config, i64, i64, i32, i64 }
%struct.aom_codec_pkt_list = type { i32, i32, [1 x %struct.aom_codec_cx_pkt] }
%struct.aom_codec_cx_pkt = type { i32, %union.anon.10 }
%union.anon.10 = type { %struct.aom_psnr_pkt }
%struct.aom_psnr_pkt = type { [4 x i32], [4 x i64], [4 x double], [4 x i32], [4 x i64], [4 x double] }
%struct.GF_GROUP = type { [250 x i8], [250 x i8], [250 x i8], [250 x i32], [250 x i32], i32, i32, [250 x i8], [250 x i32], [250 x i8], [250 x i8], i32, i32 }
%struct.GF_STATE = type { i32 }
%struct.AV1LevelParams = type { [32 x i8], i32, [32 x %struct.AV1LevelInfo*] }
%struct.AV1LevelInfo = type { %struct.AV1LevelStats, %struct.AV1LevelSpec, %struct.FrameWindowBuffer, [24 x %struct.DECODER_MODEL] }
%struct.AV1LevelStats = type { i32, i32, i32, i32, i32, i32, i32, i32, double, double, double }
%struct.FrameWindowBuffer = type { [256 x %struct.FrameRecord], i32, i32 }
%struct.FrameRecord = type { i64, i64, i64, i32, i32, i32, i32, i32 }
%struct.TWO_PASS = type { i32, [36 x %struct.FIRSTPASS_STATS*], i32, %struct.FIRSTPASS_STATS*, %struct.STATS_BUFFER_CTX*, i32, i64, double, double, double, double, double, i8, i64, i64, double, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.FIRSTPASS_STATS = type { double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, i64, double, double }
%struct.STATS_BUFFER_CTX = type { %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS* }
%struct.PRIMARY_RATE_CONTROL = type { i64, i32, i32, [15 x i32], i32, i32, [150 x %struct.regions], i32, i32, i32, i32, i32, i32, i64, i64, i64, i32, float, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.regions = type { i32, i32, double, double, double, double, double, i32 }
%struct.SequenceHeader = type { i32, i32, i32, i32, i8, i32, i32, i8, i32, i32, %struct.OrderHintInfo, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i8, i8, i32, [32 x i32], i32, %struct.aom_timing, i8, %struct.aom_dec_model_info, i8, [32 x i8], [32 x i8], [33 x %struct.aom_dec_model_op_parameters] }
%struct.OrderHintInfo = type { i32, i32, i32, i32 }
%struct.aom_timing = type { i32, i32, i32, i32 }
%struct.aom_dec_model_info = type { i32, i32, i32, i32 }
%struct.aom_dec_model_op_parameters = type { i32, i64, i64, i32, i32, i32, i32, i32 }
%struct.aom_internal_error_info = type { i32, i32, [200 x i8], i32, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.aom_variance_vtable = type { i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32, i8*)*, i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*)*, void (i8*, i32, i8**, i32, i32*)*, void (i8*, i32, i8**, i32, i32*)*, i32 (i8*, i32, i8*, i32, i8*, i8*, i32, i32)*, i32 (i8*, i32, i32, i32, i8*, i32, i8*, i8*, i32, i32, i32*)*, i32 (i8*, i32, i32*, i32*)*, i32 (i8*, i32, i32*, i32*, i32*)*, i32 (i8*, i32, i32, i32, i32*, i32*, i32*)*, i32 (i8*, i32, i8*, i32, i8*, %struct.dist_wtd_comp_params*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*, %struct.dist_wtd_comp_params*)* }
%struct.dist_wtd_comp_params = type { i32, i32, i32 }
%struct.TplParams = type { i8, i8, [79 x %struct.TplDepFrame], [35 x %struct.TplDepStats*], [35 x %struct.yv12_buffer_config], %struct.TplDepFrame*, %struct.scale_factors, i32, [7 x %struct.yv12_buffer_config*], [7 x %struct.yv12_buffer_config*], %struct.AV1TplRowMultiThreadSync, i32 }
%struct.TplDepFrame = type { i8, %struct.TplDepStats*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, [8 x i32], i32, i32, i32, i32, i32, i32, i32, [256 x double], [256 x double], i32, i32 }
%struct.TplDepStats = type { i64, i64, i64, i64, [2 x i64], i64, i64, [2 x i64], i64, i64, [7 x %union.int_mv], [2 x i32], [7 x i64] }
%union.int_mv = type { i32 }
%struct.scale_factors = type { i32, i32, i32, i32, i32 (i32, %struct.scale_factors*)*, i32 (i32, %struct.scale_factors*)* }
%struct.AV1TplRowMultiThreadSync = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32, i32, i32 }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon.12, %union.anon.14, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon.12 = type { i64 }
%union.anon.14 = type { i64 }
%struct.EncQuantDequantParams = type { %struct.QUANTS, %struct.Dequants }
%struct.QUANTS = type { [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]] }
%struct.Dequants = type { [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]] }
%struct.ThreadData = type { %struct.macroblock, %struct.RD_COUNTS, %struct.FRAME_COUNTS*, %struct.PC_TREE_SHARED_BUFFERS, %struct.SIMPLE_MOTION_DATA_TREE*, %struct.SIMPLE_MOTION_DATA_TREE*, %struct.inter_modes_info*, [2 x [2 x i32*]], %struct.OBMCBuffer, %struct.PALETTE_BUFFER*, %struct.CompoundTypeRdBuffers, i16*, [2 x i8*], i32, i32, i32, i32, [4 x i32], %struct.frame_contexts*, %struct.VP64x64*, i32, %struct.PICK_MODE_CONTEXT*, %struct.TemporalFilterData, %struct.TplTxfmStats, %struct.PixelLevelGradientInfo*, [8 x i8] }
%struct.macroblock = type { [3 x %struct.macroblock_plane], [8 x i8], %struct.macroblockd, %struct.MB_MODE_INFO_EXT, %struct.MB_MODE_INFO_EXT_FRAME*, %struct.frame_contexts*, %struct.frame_contexts*, %struct.CB_COEFF_BUFFER*, [2 x i16], %struct.OBMCBuffer, %struct.PALETTE_BUFFER*, %struct.CompoundTypeRdBuffers, i16*, %struct.aom_internal_error_info*, [2 x i8*], i32, i32, i32, i32, i32, %struct.ModeCosts, %struct.MvCosts*, %struct.IntraBCMVCosts*, %struct.CoeffCosts, i32, i32, i32, i32, i32, i32, %struct.SuperBlockEnc, %struct.CONTENT_STATE_SB, [8 x i32], i32, [8 x i8], [8 x %struct.WARP_SAMPLE_INFO], [1024 x i32], i32, %struct.PartitionSearchInfo, i32, i32, [22 x [169 x i32]], %struct.WinnerModeStats*, i32, i8, %struct.inter_modes_info*, i8, [64 x %struct.COMP_RD_STATS], i32, i32, %struct.intrabc_hash_info, i32, %struct.MB_MODE_INFO*, %struct.PixelLevelGradientInfo*, [2 x i8], [8 x i32], %struct.FullMvLimits, %struct.TxfmSearchParams, %struct.TxfmSearchInfo, [2 x i8], i32, [8 x i32] }
%struct.macroblock_plane = type { i16*, i32*, i32*, i32*, i16*, i8*, %struct.buf_2d, i16*, i16*, i16*, i16*, i16*, i16*, i16* }
%struct.buf_2d = type { i8*, i8*, i32, i32, i32 }
%struct.macroblockd = type { i32, i32, i32, i8, [3 x %struct.macroblockd_plane], %struct.TileInfo, %struct.MB_MODE_INFO**, i8, i8, i8, i8, %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO*, i8*, i32, i32, i32, i32, i32, [2 x %struct.scale_factors*], %struct.yv12_buffer_config*, [3 x i8*], [3 x [32 x i8]], i8*, [32 x i8], i8*, i8*, [32 x i8], [3 x %struct.WienerInfo], [3 x %struct.SgrprojInfo], i8, i8, [29 x [8 x %struct.candidate_mv]], [29 x [8 x i16]], i8, i8, [8 x i8], %struct.frame_contexts*, i32, [8 x i32], [8 x i32], i32, i32, %struct.aom_internal_error_info*, %struct.WarpedMotionParams*, i8, [4 x i8], [4 x i8], i8*, %struct.cfl_ctx, [2 x i16], i16*, [2 x i8*], [8 x i8] }
%struct.macroblockd_plane = type { i8, i32, i32, %struct.buf_2d, [2 x %struct.buf_2d], i8*, i8*, [8 x [2 x i16]], i8*, i8, i8, [8 x [19 x i8*]], [8 x [19 x i8*]] }
%struct.TileInfo = type { i32, i32, i32, i32, i32, i32 }
%struct.WienerInfo = type { [8 x i16], [8 x i16] }
%struct.SgrprojInfo = type { i32, [2 x i32] }
%struct.candidate_mv = type { %union.int_mv, %union.int_mv }
%struct.WarpedMotionParams = type { [8 x i32], i16, i16, i16, i16, i8, i8 }
%struct.cfl_ctx = type { [1024 x i16], [1024 x i16], [2 x i32], i32, [2 x [32 x i16]], i32, i32, i32, i32, i32, i32 }
%struct.MB_MODE_INFO_EXT = type { [29 x [4 x %struct.candidate_mv]], [29 x [4 x i16]], [29 x i8], [8 x %union.int_mv], [29 x i16] }
%struct.MB_MODE_INFO_EXT_FRAME = type { [4 x %struct.candidate_mv], [4 x i16], i8, [8 x %union.int_mv], i16, [2 x i16] }
%struct.ModeCosts = type { [20 x [10 x i32]], [4 x [13 x i32]], [13 x [13 x [13 x i32]]], [2 x [13 x [14 x i32]]], [22 x [2 x i32]], [5 x i32], [8 x [7 x i32]], [8 x [2 x [16 x i32]]], [2 x i32], [7 x [7 x i32]], [7 x [7 x i32]], [7 x [5 x [8 x i32]]], [7 x [5 x [8 x i32]]], [7 x [3 x [2 x i32]]], [2 x [2 x i32]], [3 x [2 x i32]], [6 x [2 x i32]], [2 x [2 x i32]], [6 x [2 x i32]], [3 x [2 x i32]], [3 x [6 x [2 x i32]]], [5 x [2 x i32]], [5 x [3 x i32]], [3 x [3 x [3 x i32]]], [3 x [3 x [2 x i32]]], [3 x [2 x [2 x i32]]], [4 x [2 x i32]], [8 x [8 x i32]], [22 x [2 x i32]], [22 x [16 x i32]], [4 x [2 x i32]], [22 x [2 x i32]], [4 x [4 x i32]], [6 x [2 x i32]], [6 x [2 x i32]], [22 x [3 x i32]], [22 x [2 x i32]], [16 x [3 x i32]], [3 x [2 x i32]], [4 x [3 x [5 x i32]]], [21 x [2 x i32]], [4 x [4 x [16 x i32]]], [3 x [4 x [13 x [16 x i32]]]], [3 x i32], [2 x i32], [2 x i32] }
%struct.MvCosts = type { [4 x i32], [2 x [32767 x i32]], [2 x [32767 x i32]], [2 x i32*], [2 x i32*], i32** }
%struct.IntraBCMVCosts = type { [4 x i32], [2 x [32767 x i32]], [2 x i32*] }
%struct.CoeffCosts = type { [5 x [2 x %struct.LV_MAP_COEFF_COST]], [7 x [2 x %struct.LV_MAP_EOB_COST]] }
%struct.LV_MAP_COEFF_COST = type { [13 x [2 x i32]], [4 x [3 x i32]], [42 x [8 x i32]], [9 x [2 x i32]], [3 x [2 x i32]], [21 x [26 x i32]] }
%struct.LV_MAP_EOB_COST = type { [2 x [11 x i32]] }
%struct.SuperBlockEnc = type { i8, i8, i32, [64 x i64], [64 x i64], [64 x [7 x %union.int_mv]], i32 }
%struct.CONTENT_STATE_SB = type { i32, i32, i32 }
%struct.WARP_SAMPLE_INFO = type { i32, [16 x i32], [16 x i32] }
%struct.PartitionSearchInfo = type { [105 x i8] }
%struct.WinnerModeStats = type { %struct.MB_MODE_INFO, %struct.RD_STATS, i64, i32, i32, [16384 x i8], i8 }
%struct.MB_MODE_INFO = type <{ i8, i8, i8, i8, i32, [2 x %union.int_mv], [2 x i8], [2 x i8], %union.int_interpfilters, i8, i8, i8, i8, %struct.WarpedMotionParams, i8, i8, [6 x i8], %struct.INTERINTER_COMPOUND_DATA, [2 x i8], %struct.FILTER_INTRA_MODE_INFO, i8, i8, %struct.PALETTE_MODE_INFO, i8, i8, [16 x i8], i8, [4 x i8], i16, [7 x i8] }>
%union.int_interpfilters = type { i32 }
%struct.INTERINTER_COMPOUND_DATA = type { i8*, i8, i8, i8, i8 }
%struct.FILTER_INTRA_MODE_INFO = type { i8, i8 }
%struct.PALETTE_MODE_INFO = type { [24 x i16], [2 x i8] }
%struct.RD_STATS = type { i32, i64, i64, i64, i32, i32 }
%struct.COMP_RD_STATS = type { [4 x i32], [4 x i64], [4 x i32], [4 x i64], [4 x i32], [2 x %union.int_mv], [2 x i8], i8, %union.int_interpfilters, i32, [2 x i32], %struct.INTERINTER_COMPOUND_DATA }
%struct.intrabc_hash_info = type { [2 x [2 x i32*]], %struct._hash_table, %struct._crc_calculator, %struct._crc_calculator, i32 }
%struct._hash_table = type { %struct.Vector** }
%struct.Vector = type { i64, i64, i64, i8* }
%struct._crc_calculator = type { i32, i32, i32, [256 x i32], i32 }
%struct.FullMvLimits = type { i32, i32, i32, i32 }
%struct.TxfmSearchParams = type { i32, i32, i32, [2 x i32], i32, i8, i32, i32, i8, i32 }
%struct.TxfmSearchInfo = type { i32, [1024 x i8], [1024 x i8], %struct.TxbRdRecords*, i32 }
%struct.TxbRdRecords = type { %struct.MB_RD_RECORD, [256 x %struct.TXB_RD_RECORD], [64 x %struct.TXB_RD_RECORD], [16 x %struct.TXB_RD_RECORD], [4 x %struct.TXB_RD_RECORD], %struct.TXB_RD_RECORD }
%struct.MB_RD_RECORD = type { [8 x %struct.MB_RD_INFO], i32, i32, %struct._CRC32C }
%struct.MB_RD_INFO = type { i8, [16 x i8], [1024 x i8], [1024 x i8], %struct.RD_STATS, i32 }
%struct._CRC32C = type { [8 x [256 x i32]] }
%struct.TXB_RD_RECORD = type { [256 x i32], [256 x %struct.TXB_RD_INFO], i32, i32 }
%struct.TXB_RD_INFO = type { i64, i64, i32, i16, i8, i16, i8, i8, i8, i8 }
%struct.RD_COUNTS = type { [3 x i64], i32, i32, [19 x [16 x i32]], [22 x [2 x i32]], [2 x i32] }
%struct.PC_TREE_SHARED_BUFFERS = type { [3 x i32*], [3 x i32*], [3 x i32*] }
%struct.SIMPLE_MOTION_DATA_TREE = type { i8, i8, [4 x %struct.SIMPLE_MOTION_DATA_TREE*], [8 x %struct.fullpel_mv], [2 x i32], [8 x i32], i32, i32 }
%struct.fullpel_mv = type { i16, i16 }
%struct.inter_modes_info = type { i32, [4 x i8], [1024 x %struct.MB_MODE_INFO], [1024 x i32], [1024 x i64], [1024 x i64], [1024 x %struct.RdIdxPair], [1024 x %struct.RD_STATS], [1024 x %struct.RD_STATS], [1024 x %struct.RD_STATS] }
%struct.RdIdxPair = type { i32, i64 }
%struct.OBMCBuffer = type { i32*, i32*, i8*, i8* }
%struct.PALETTE_BUFFER = type { [4096 x i8], [8192 x i32] }
%struct.CompoundTypeRdBuffers = type { i8*, i8*, i16*, i16*, i8* }
%struct.frame_contexts = type { [5 x [13 x [3 x i16]]], [5 x [2 x [9 x [3 x i16]]]], [2 x [3 x [3 x i16]]], [2 x [2 x [6 x i16]]], [2 x [2 x [7 x i16]]], [2 x [2 x [8 x i16]]], [2 x [2 x [9 x i16]]], [2 x [2 x [10 x i16]]], [2 x [2 x [11 x i16]]], [2 x [2 x [12 x i16]]], [5 x [2 x [4 x [4 x i16]]]], [5 x [2 x [42 x [5 x i16]]]], [5 x [2 x [21 x [5 x i16]]]], [6 x [3 x i16]], [2 x [3 x i16]], [6 x [3 x i16]], [3 x [3 x i16]], [8 x [9 x i16]], [22 x [3 x i16]], [22 x [17 x i16]], [4 x [3 x i16]], [22 x [3 x i16]], [4 x [5 x i16]], [22 x [4 x i16]], [22 x [3 x i16]], [7 x [8 x i16]], [7 x [8 x i16]], [7 x [5 x [9 x i16]]], [7 x [5 x [9 x i16]]], [7 x [3 x [3 x i16]]], [2 x [3 x i16]], [5 x [3 x i16]], [3 x [6 x [3 x i16]]], [5 x [3 x i16]], [3 x [3 x [3 x i16]]], [3 x [3 x [3 x i16]]], [3 x [2 x [3 x i16]]], [21 x [3 x i16]], [6 x [3 x i16]], [6 x [3 x i16]], [3 x [3 x i16]], [3 x [3 x i16]], [4 x [3 x i16]], %struct.nmv_context, %struct.nmv_context, [3 x i16], %struct.segmentation_probs, [22 x [3 x i16]], [6 x i16], [4 x i16], [3 x i16], [3 x i16], [4 x [14 x i16]], [2 x [13 x [15 x i16]]], [20 x [11 x i16]], [16 x [4 x i16]], [5 x [5 x [14 x i16]]], [8 x [8 x i16]], [4 x [3 x [4 x i16]]], [5 x i16], [4 x [5 x i16]], [5 x i16], [3 x [4 x [13 x [17 x i16]]]], [4 x [4 x [17 x i16]]], [9 x i16], [6 x [17 x i16]], i32 }
%struct.nmv_context = type { [5 x i16], [2 x %struct.nmv_component] }
%struct.nmv_component = type { [12 x i16], [2 x [5 x i16]], [5 x i16], [3 x i16], [3 x i16], [3 x i16], [3 x i16], [10 x [3 x i16]] }
%struct.segmentation_probs = type { [9 x i16], [3 x [3 x i16]], [3 x [9 x i16]] }
%struct.VP64x64 = type { %struct.VPVariance, [4 x %struct.VP32x32] }
%struct.VPVariance = type { %struct.VPartVar, [2 x %struct.VPartVar], [2 x %struct.VPartVar] }
%struct.VPartVar = type { i32, i32, i32, i32 }
%struct.VP32x32 = type { %struct.VPVariance, [4 x %struct.VP16x16] }
%struct.VP16x16 = type { %struct.VPVariance, [4 x %struct.VP8x8] }
%struct.VP8x8 = type { %struct.VPVariance, [4 x %struct.VP4x4] }
%struct.VP4x4 = type { %struct.VPVariance, [4 x %struct.VPartVar] }
%struct.PICK_MODE_CONTEXT = type { %struct.MB_MODE_INFO, %struct.MB_MODE_INFO_EXT_FRAME, [2 x i8*], i8*, [3 x i32*], [3 x i32*], [3 x i32*], [3 x i16*], [3 x i8*], i8*, i32, i32, i32, i32, i32, %struct.RD_STATS, i32, i64, i64, i64, i8, %union.int_mv, i8, i8, i32 }
%struct.TemporalFilterData = type { %struct.FRAME_DIFF, %struct.MB_MODE_INFO*, i32*, i16*, i8* }
%struct.FRAME_DIFF = type { i64, i64 }
%struct.TplTxfmStats = type { [256 x double], i32 }
%struct.PixelLevelGradientInfo = type { i16, i8, i8 }
%struct.FRAME_COUNTS = type { [16 x [3 x i32]] }
%struct.MBMIExtFrameBufferInfo = type { %struct.MB_MODE_INFO_EXT_FRAME*, i32, i32 }
%struct.CB_COEFF_BUFFER = type { [3 x i32*], [3 x i16*], [3 x i8*] }
%struct.CoeffBufferPool = type { i32*, i16*, i8* }
%struct.AV1Common = type { %struct.CurrentFrame, %struct.aom_internal_error_info*, i32, i32, i32, i32, i32, i32, i8, [33 x i32], i32, %struct.RefCntBuffer*, %struct.RefCntBuffer*, [8 x i32], %struct.scale_factors, [8 x %struct.scale_factors], [8 x %struct.RefCntBuffer*], i32, i32, i32, %struct.FeatureFlags, %struct.CommonModeInfoParams, %struct.CommonQuantParams, %struct.segmentation, i8*, %struct.loop_filter_info_n, %struct.loopfilter, [3 x %struct.RestorationInfo], i32*, %struct.RestorationLineBuffers*, %struct.yv12_buffer_config, %struct.CdefInfo, %struct.aom_film_grain_t, %struct.DeltaQInfo, [8 x %struct.WarpedMotionParams], %struct.SequenceHeader*, %struct.frame_contexts*, %struct.frame_contexts*, %struct.CommonTileParams, %struct.BufferPool*, %struct.CommonContexts, i32, [8 x i32], %struct.TPL_MV_REF*, i32, [8 x i32], [8 x i8], i32, i32 }
%struct.CurrentFrame = type { i8, i8, i32, i32, i32, %struct.SkipModeInfo, i32, i32 }
%struct.SkipModeInfo = type { i32, i32, i32, i32 }
%struct.FeatureFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i32, i8 }
%struct.CommonModeInfoParams = type { i32, i32, i32, i32, i32, %struct.MB_MODE_INFO*, i32, i32, i8, %struct.MB_MODE_INFO**, i32, i32, i8*, void (%struct.CommonModeInfoParams*)*, void (%struct.CommonModeInfoParams*)*, void (%struct.CommonModeInfoParams*, i32, i32)* }
%struct.CommonQuantParams = type { i32, i32, i32, i32, i32, i32, [8 x [2 x i16]], [8 x [2 x i16]], [8 x [2 x i16]], [16 x [3 x [19 x i8*]]], [16 x [3 x [19 x i8*]]], [8 x [19 x i8*]], [8 x [19 x i8*]], [8 x [19 x i8*]], i8, i32, i32, i32 }
%struct.segmentation = type { i8, i8, i8, i8, [8 x [8 x i16]], [8 x i32], i32, i8 }
%struct.loop_filter_info_n = type { [64 x %struct.loop_filter_thresh], [3 x [8 x [2 x [8 x [2 x i8]]]]] }
%struct.loop_filter_thresh = type { [16 x i8], [16 x i8], [16 x i8] }
%struct.loopfilter = type { [2 x i32], i32, i32, i32, i8, i8, [8 x i8], [2 x i8], i32 }
%struct.RestorationInfo = type { i32, i32, i32, i32, i32, %struct.RestorationUnitInfo*, %struct.RestorationStripeBoundaries, i32 }
%struct.RestorationUnitInfo = type { i32, [12 x i8], %struct.WienerInfo, %struct.SgrprojInfo, [4 x i8] }
%struct.RestorationStripeBoundaries = type { i8*, i8*, i32, i32 }
%struct.RestorationLineBuffers = type { [3 x [392 x i16]], [3 x [392 x i16]] }
%struct.CdefInfo = type { [3 x i16*], [3 x i16*], i16*, [3 x i64], [3 x i64], i64, i32, i32, [16 x i32], [16 x i32], i32, i32, i32 }
%struct.aom_film_grain_t = type { i32, i32, [14 x [2 x i32]], i32, [10 x [2 x i32]], i32, [10 x [2 x i32]], i32, i32, i32, [24 x i32], [25 x i32], [25 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16 }
%struct.DeltaQInfo = type { i32, i32, i32, i32, i32 }
%struct.CommonTileParams = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [65 x i32], [65 x i32], i32, i32 }
%struct.BufferPool = type { %union.pthread_mutex_t, i8*, i32 (i8*, i64, %struct.aom_codec_frame_buffer*)*, i32 (i8*, %struct.aom_codec_frame_buffer*)*, [16 x %struct.RefCntBuffer], %struct.InternalFrameBufferList }
%struct.aom_codec_frame_buffer = type { i8*, i64, i8* }
%struct.RefCntBuffer = type { i32, i32, [7 x i32], i32, [7 x i32], %struct.MV_REF*, i8*, %struct.segmentation, i32, i32, i32, i32, [8 x %struct.WarpedMotionParams], i32, i8, %struct.aom_film_grain_t, %struct.aom_codec_frame_buffer, %struct.yv12_buffer_config, i8, [4 x i32], [8 x i8], [2 x i8], %struct.frame_contexts }
%struct.MV_REF = type { %union.int_mv, i8 }
%struct.InternalFrameBufferList = type { i32, %struct.InternalFrameBuffer* }
%struct.InternalFrameBuffer = type { i8*, i64, i32 }
%struct.CommonContexts = type { i8**, [3 x i8**], i8**, i32, i32, i32 }
%struct.TPL_MV_REF = type { %union.int_mv, i8 }
%struct.AV1EncoderConfig = type { %struct.InputCfg, %struct.FrameDimensionCfg, %struct.AlgoCfg, %struct.KeyFrameCfg, %struct.RateControlCfg, %struct.QuantizationCfg, %struct.ResizeCfg, %struct.SuperResCfg, %struct.aom_fixed_buf, %struct.ToolCfg, %struct.GFConfig, %struct.TileConfig, %struct.TuneCfg, %struct.ColorCfg, %struct.DecoderModelCfg, %struct.RefFrameCfg, %struct.UnitTestCfg, %struct.MotionModeCfg, %struct.IntraModeCfg, %struct.TxfmSizeTypeCfg, %struct.CompoundTypeCfg, %struct.PartitionCfg, %struct.CostUpdateFreq, float, i32, i32, i32, i32, i32, i32, i32, [32 x i8], i8, i32, i8, i8, i8, i8, i8* }
%struct.InputCfg = type { double, i32, i32, i32, i32 }
%struct.FrameDimensionCfg = type { i32, i32, i32, i32, i32, i32 }
%struct.AlgoCfg = type { i32, i32, i32, i32, i8, i8, i8 }
%struct.KeyFrameCfg = type { i32, i32, i32, i32, i32, i8, i8, i8, i8 }
%struct.RateControlCfg = type { i64, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.QuantizationCfg = type { [5 x double], i32, i32, i32, i32, i8, i8, i8, i8 }
%struct.ResizeCfg = type { i8, i8, i8 }
%struct.SuperResCfg = type { i32, i32, i8, i8, i32, i8 }
%struct.aom_fixed_buf = type { i8*, i64 }
%struct.ToolCfg = type { i32, i32, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.GFConfig = type { i32, i32, i32, i32, i32, i8, i8 }
%struct.TileConfig = type { i32, i32, i32, i32, i32, i32, [64 x i32], [64 x i32], i8, i8, i8 }
%struct.TuneCfg = type { i8*, i8*, i32, i32, i32 }
%struct.ColorCfg = type { i32, i32, i32, i32, i32 }
%struct.DecoderModelCfg = type { %struct.aom_timing, i32, i8, i8, i8 }
%struct.RefFrameCfg = type { i32, i8, i8 }
%struct.UnitTestCfg = type { i32, i32 }
%struct.MotionModeCfg = type { i8, i8, i8 }
%struct.IntraModeCfg = type { i8, i8, i8, i8, i8, i8, i8 }
%struct.TxfmSizeTypeCfg = type { i8, i8, i8, i8, i8, i8, i8 }
%struct.CompoundTypeCfg = type { i8, i8, i8, i8, i8, i8 }
%struct.PartitionCfg = type { i8, i8, i8, i8, i8 }
%struct.CostUpdateFreq = type { i32, i32, i32, i32 }
%struct.TemporalFilterCtx = type { [35 x %struct.yv12_buffer_config*], i32, i32, i32, %struct.scale_factors, [3 x double], i32, i32, i32, i32, i32 }
%struct.ForceIntegerMVInfo = type { [32 x double], i32, i32 }
%struct.RefreshFrameFlagsInfo = type { i8, i8, i8 }
%struct.ExternalFlags = type { i32, %struct.ExtRefreshFrameFlagsInfo, i8, i8, i8, i8, i8, i8 }
%struct.ExtRefreshFrameFlagsInfo = type { i8, i8, i8, i8, i8, i8 }
%struct.yv12_buffer_config = type { %union.anon, %union.anon.0, %union.anon.2, %union.anon.4, %union.anon.6, %union.anon.8, i32, [3 x i8*], i8*, i32, i8*, i64, i32, i64, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, %struct.aom_metadata_array* }
%union.anon = type { %struct.anon }
%struct.anon = type { i32, i32 }
%union.anon.0 = type { %struct.anon.1 }
%struct.anon.1 = type { i32, i32 }
%union.anon.2 = type { %struct.anon.3 }
%struct.anon.3 = type { i32, i32 }
%union.anon.4 = type { %struct.anon.5 }
%struct.anon.5 = type { i32, i32 }
%union.anon.6 = type { %struct.anon.7 }
%struct.anon.7 = type { i32, i32 }
%union.anon.8 = type { %struct.anon.9 }
%struct.anon.9 = type { i8*, i8*, i8* }
%struct.aom_metadata_array = type { i64, %struct.aom_metadata** }
%struct.aom_metadata = type { i32, i8*, i64, i32 }
%struct.RD_OPT = type { [169 x i32], [8 x [22 x [169 x i32]]], i32, double }
%struct.CODING_CONTEXT = type { %struct.loopfilter, %struct.CdefInfo, %struct.yv12_buffer_config, %struct.RATE_CONTROL, %struct.MV_STATS }
%struct.GlobalMotionInfo = type { i8, [8 x %struct.yv12_buffer_config*], i8*, [2 x i32], [2 x [7 x %struct.FrameDistPair]], i32, i32, i32, [8192 x i32] }
%struct.FrameDistPair = type { i32, i8 }
%struct.WinnerModeParams = type { [3 x [2 x i32]], [3 x i8], [3 x i32], [3 x i32], [3 x i32], [3 x i32] }
%struct.TimeStamps = type { i64, i64, i64 }
%struct.RATE_CONTROL = type { i32, i32, i32, i32, i32, [4 x i32], i32, [4 x double], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i32, i32, i32, i32, i32, i32, i32, [4 x i32], double, double, i64, i64, i64, i64, i32, i32, i32, i32, i32, i64, i64, i32, i32, i32, i32, i32, i32, i32, [7 x i32], i32, i32, i32, i32, i32 }
%struct.SPEED_FEATURES = type { %struct.HIGH_LEVEL_SPEED_FEATURES, %struct.FIRST_PASS_SPEED_FEATURES, %struct.TPL_SPEED_FEATURES, %struct.GLOBAL_MOTION_SPEED_FEATURES, %struct.PARTITION_SPEED_FEATURES, %struct.MV_SPEED_FEATURES, %struct.INTER_MODE_SPEED_FEATURES, %struct.INTERP_FILTER_SPEED_FEATURES, %struct.INTRA_MODE_SPEED_FEATURES, %struct.TX_SPEED_FEATURES, %struct.RD_CALC_SPEED_FEATURES, %struct.WINNER_MODE_SPEED_FEATURES, %struct.LOOP_FILTER_SPEED_FEATURES, %struct.REAL_TIME_SPEED_FEATURES }
%struct.HIGH_LEVEL_SPEED_FEATURES = type { i32, i8, i32, i8, i32, i8, i32, i32 }
%struct.FIRST_PASS_SPEED_FEATURES = type { i32, i32 }
%struct.TPL_SPEED_FEATURES = type { i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32 }
%struct.GLOBAL_MOTION_SPEED_FEATURES = type { i8, i32, i32 }
%struct.PARTITION_SPEED_FEATURES = type { i8, i8, i32, i32, i32, i32, i32, i8, i8, i8, i8, i32, i64, i32, [5 x i32], i32, i32, i32, i32, i32, i32, i8, i32, i8, i32, i32, i32, i32, i32, i32, i32 }
%struct.MV_SPEED_FEATURES = type { i8, i32, i32, i8, i32, i8, i8, i8, i32, [4 x %struct.MESH_PATTERN], [4 x %struct.MESH_PATTERN], i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.MESH_PATTERN = type { i32, i32 }
%struct.INTER_MODE_SPEED_FEATURES = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.INTERP_FILTER_SPEED_FEATURES = type { i32, i32, i32, i32, i32, i32 }
%struct.INTRA_MODE_SPEED_FEATURES = type { [5 x i32], [5 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.TX_SPEED_FEATURES = type { i32, i32, i32, i32, i32, %struct.TX_TYPE_SEARCH, i32, i32, i32, i32, i32, i32, i32 }
%struct.TX_TYPE_SEARCH = type { i8, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.RD_CALC_SPEED_FEATURES = type { i32, i32, i32, i8, i32, i32 }
%struct.WINNER_MODE_SPEED_FEATURES = type { i32, i32, i32, i32, i8, i32, i32 }
%struct.LOOP_FILTER_SPEED_FEATURES = type { i8, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.REAL_TIME_SPEED_FEATURES = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, [16 x i32], i32 }
%struct.MotionVectorSearchParams = type { i32, i32, i32 (%struct.macroblockd*, %struct.AV1Common*, %struct.SUBPEL_MOTION_SEARCH_PARAMS*, i32, %struct.mv*, i32*, i32*, %union.int_mv*)*, [3 x [7 x %struct.search_site_config]] }
%struct.SUBPEL_MOTION_SEARCH_PARAMS = type { i32, i32*, i8, i32, %struct.SubpelMvLimits, %struct.MV_COST_PARAMS, %struct.SUBPEL_SEARCH_VAR_PARAMS }
%struct.SubpelMvLimits = type { i32, i32, i32, i32 }
%struct.MV_COST_PARAMS = type { %struct.mv*, %struct.fullpel_mv, i8, i32*, [2 x i32*], i32, i32 }
%struct.SUBPEL_SEARCH_VAR_PARAMS = type { %struct.aom_variance_vtable*, i8, %struct.MSBuffers, i32, i32 }
%struct.MSBuffers = type { %struct.buf_2d*, %struct.buf_2d*, i8*, i8*, i32, i32, i32*, i32* }
%struct.mv = type { i16, i16 }
%struct.search_site_config = type { [22 x [17 x %struct.search_site]], i32, [22 x i32], [22 x i32], i32 }
%struct.search_site = type { %struct.fullpel_mv, i32 }
%struct.EncSegmentationInfo = type { i8*, i8 }
%struct.CYCLIC_REFRESH = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i64, i64, i16, double, i32, [3 x i32], double, i32 }
%struct.ActiveMap = type { i32, i32, i8* }
%struct.RefBufferStack = type { [16 x i32], i32, [16 x i32], i32, [16 x i32], i32 }
%struct.FRAME_INFO = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.FRAME_INDEX_SET = type { i32 }
%struct.InitialDimensions = type { i32, i32 }
%struct.ResizePendingParams = type { i32, i32 }
%struct.TileDataEnc = type { %struct.TileInfo, [8 x i8], %struct.frame_contexts, %struct.frame_contexts*, i8, [22 x %struct.InterModeRdModel], %struct.AV1EncRowMultiThreadSync, %struct.mv }
%struct.InterModeRdModel = type { i32, double, double, double, double, double, double, double, i32, double, double, double, double, double }
%struct.AV1EncRowMultiThreadSync = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32, i32, i32, i32 }
%struct.TokenInfo = type { [64 x [64 x %struct.TokenExtra*]], [64 x [64 x %struct.TokenList*]] }
%struct.TokenExtra = type { i8 }
%struct.TokenList = type { %struct.TokenExtra*, i32 }
%struct.VarBasedPartitionInfo = type { [5 x i64], i64 }
%struct.FrameProbInfo = type { [7 x [22 x i32]], [7 x i32], [7 x [19 x [16 x i32]]], [7 x [16 x [3 x i32]]] }
%struct.MultiThreadInfo = type { i32, [10 x i32], i32, i32, %struct.AVxWorker*, %struct.EncWorkerData*, i8, %struct.AV1EncRowMultiThreadInfo, %struct.AV1TplRowMultiThreadInfo, %struct.AV1LfSyncData, %struct.AV1LrSyncData, %struct.AV1EncPackBSSync, %struct.AV1GlobalMotionSync, %struct.AV1TemporalFilterSync, %struct.AV1CdefSyncData, %struct.AV1CdefWorker* }
%struct.AVxWorker = type { %struct.AVxWorkerImpl*, i32, i8*, i32 (i8*, i8*)*, i8*, i8*, i32 }
%struct.AVxWorkerImpl = type opaque
%struct.EncWorkerData = type opaque
%struct.AV1EncRowMultiThreadInfo = type { i32, i32, i32, i32, [64 x i32], %union.pthread_mutex_t*, void (%struct.AV1EncRowMultiThreadSync*, i32, i32)*, void (%struct.AV1EncRowMultiThreadSync*, i32, i32, i32)* }
%struct.AV1TplRowMultiThreadInfo = type { void (%struct.AV1TplRowMultiThreadSync*, i32, i32)*, void (%struct.AV1TplRowMultiThreadSync*, i32, i32, i32)* }
%struct.AV1LfSyncData = type { [3 x %union.pthread_mutex_t*], [3 x %union.pthread_cond_t*], [3 x i32*], i32, i32, %struct.LoopFilterWorkerData*, i32, %union.pthread_mutex_t*, %struct.AV1LfMTInfo*, i32, i32 }
%struct.LoopFilterWorkerData = type { %struct.yv12_buffer_config*, %struct.AV1Common*, [3 x %struct.macroblockd_plane], %struct.macroblockd* }
%struct.AV1LfMTInfo = type { i32, i32, i32 }
%struct.AV1LrSyncData = type { [3 x %union.pthread_mutex_t*], [3 x %union.pthread_cond_t*], [3 x i32*], i32, i32, i32, i32, %union.pthread_mutex_t*, %struct.LoopRestorationWorkerData*, %struct.AV1LrMTInfo*, i32, i32 }
%struct.LoopRestorationWorkerData = type { i32*, i8*, i8* }
%struct.AV1LrMTInfo = type { i32, i32, i32, i32, i32, i32, i32 }
%struct.AV1EncPackBSSync = type { %union.pthread_mutex_t*, [512 x %struct.PackBSTileOrder], i32 }
%struct.PackBSTileOrder = type { i16, i32 }
%struct.AV1GlobalMotionSync = type { %struct.JobInfo, %struct.GlobalMotionThreadData*, %union.pthread_mutex_t*, i32, i32, i8 }
%struct.JobInfo = type { [64 x i8], [2 x i8], [2 x i8] }
%struct.GlobalMotionThreadData = type { [1 x %struct.MotionModel], i8* }
%struct.MotionModel = type { [8 x double], i32*, i32 }
%struct.AV1TemporalFilterSync = type { %union.pthread_mutex_t*, i32 }
%struct.AV1CdefSyncData = type { %union.pthread_mutex_t*, %struct.AV1CdefRowSync*, i32, i32, i32 }
%struct.AV1CdefRowSync = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32 }
%struct.AV1CdefWorker = type { %struct.AV1Common*, %struct.macroblockd*, [3 x i16*], i16*, [3 x i16*], void (%struct.AV1Common*, %struct.macroblockd*, %struct.CdefBlockInfo*, i16**, i16*, %struct.AV1CdefSyncData*, i32)* }
%struct.CdefBlockInfo = type { i16*, [3 x i16*], [3 x i16*], i8*, [256 x %struct.cdef_list], i32, i32, i32, i32, [4 x i32], i32, i32, i32, i32, i32, i32, [16 x [16 x i32]], [16 x [16 x i32]], i32, i32, i32 }
%struct.cdef_list = type { i8, i8 }
%struct.AV1LrStruct = type { void (%struct.RestorationTileLimits*, %struct.AV1PixelRect*, i32, i8*, i32*, %struct.RestorationLineBuffers*)*, [3 x %struct.FilterFrameCtxt], %struct.yv12_buffer_config*, %struct.yv12_buffer_config* }
%struct.RestorationTileLimits = type { i32, i32, i32, i32 }
%struct.AV1PixelRect = type { i32, i32, i32, i32 }
%struct.FilterFrameCtxt = type { %struct.RestorationInfo*, i32, i32, i32, i32, i32, i8*, i8*, i32, i32, %struct.AV1PixelRect }
%struct.aom_film_grain_table_t = type { %struct.aom_film_grain_table_entry_t*, %struct.aom_film_grain_table_entry_t* }
%struct.aom_film_grain_table_entry_t = type { %struct.aom_film_grain_t, i64, i64, %struct.aom_film_grain_table_entry_t* }
%struct.aom_denoise_and_model_t = type opaque
%struct.InterpSearchFlags = type { i32, i16 }
%struct.RefFrameDistanceInfo = type { [7 x i32], i8, i8 }
%struct.SVC = type { i32, i32, i32, i32, i32, i32, i32, i32, [7 x i32], [7 x i32], [8 x i32], double, i32, [8 x i32], [8 x i8], i32, i32, [8 x i32], [8 x i32], i32, i32, [32 x %struct.LAYER_CONTEXT], [4 x i8], [4 x i32], i32 }
%struct.LAYER_CONTEXT = type { %struct.RATE_CONTROL, %struct.PRIMARY_RATE_CONTROL, i32, i64, i32, i32, i64, i64, double, i32, i32, i32, i32, i32, i8*, i8*, i32, i32, i32, i8, i8, i32, i32 }
%struct.MV_STATS = type { i32, i32, i32, i32, i32, i32, [4 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.FirstPassData = type { %struct.FRAME_STATS*, i32* }
%struct.FRAME_STATS = type { i64, i64, i64, i64, i64, i32, i32, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, double, double }
%struct.noise_estimate = type { i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.av1_denoiser = type { %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, i32, i32, i32, i32, i32, i32, i32 }

@av1_level_defs = internal unnamed_addr constant [24 x %struct.AV1LevelSpec] [%struct.AV1LevelSpec { i8 0, i32 147456, i32 2048, i32 1152, i32 150, i32 0, i32 8, i32 4, i64 4423680, i64 5529600, double 1.500000e+00, double 0.000000e+00, double 2.000000e+00, double 0.000000e+00 }, %struct.AV1LevelSpec { i8 1, i32 278784, i32 2816, i32 1584, i32 150, i32 0, i32 8, i32 4, i64 8363520, i64 10454400, double 3.000000e+00, double 0.000000e+00, double 2.000000e+00, double 0.000000e+00 }, %struct.AV1LevelSpec { i8 31, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i64 0, i64 0, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00 }, %struct.AV1LevelSpec { i8 31, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i64 0, i64 0, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00 }, %struct.AV1LevelSpec { i8 4, i32 665856, i32 4352, i32 2448, i32 150, i32 0, i32 16, i32 6, i64 19975680, i64 24969600, double 6.000000e+00, double 0.000000e+00, double 2.000000e+00, double 0.000000e+00 }, %struct.AV1LevelSpec { i8 5, i32 1065024, i32 5504, i32 3096, i32 150, i32 0, i32 16, i32 6, i64 31950720, i64 39938400, double 1.000000e+01, double 0.000000e+00, double 2.000000e+00, double 0.000000e+00 }, %struct.AV1LevelSpec { i8 31, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i64 0, i64 0, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00 }, %struct.AV1LevelSpec { i8 31, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i64 0, i64 0, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00 }, %struct.AV1LevelSpec { i8 8, i32 2359296, i32 6144, i32 3456, i32 300, i32 0, i32 32, i32 8, i64 70778880, i64 77856768, double 1.200000e+01, double 3.000000e+01, double 4.000000e+00, double 4.000000e+00 }, %struct.AV1LevelSpec { i8 9, i32 2359296, i32 6144, i32 3456, i32 300, i32 0, i32 32, i32 8, i64 141557760, i64 155713536, double 2.000000e+01, double 5.000000e+01, double 4.000000e+00, double 4.000000e+00 }, %struct.AV1LevelSpec { i8 31, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i64 0, i64 0, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00 }, %struct.AV1LevelSpec { i8 31, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i64 0, i64 0, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00 }, %struct.AV1LevelSpec { i8 12, i32 8912896, i32 8192, i32 4352, i32 300, i32 0, i32 64, i32 8, i64 267386880, i64 273715200, double 3.000000e+01, double 1.000000e+02, double 6.000000e+00, double 4.000000e+00 }, %struct.AV1LevelSpec { i8 13, i32 8912896, i32 8192, i32 4352, i32 300, i32 0, i32 64, i32 8, i64 534773760, i64 547430400, double 4.000000e+01, double 1.600000e+02, double 8.000000e+00, double 4.000000e+00 }, %struct.AV1LevelSpec { i8 14, i32 8912896, i32 8192, i32 4352, i32 300, i32 0, i32 64, i32 8, i64 1069547520, i64 1094860800, double 6.000000e+01, double 2.400000e+02, double 8.000000e+00, double 4.000000e+00 }, %struct.AV1LevelSpec { i8 15, i32 8912896, i32 8192, i32 4352, i32 300, i32 0, i32 64, i32 8, i64 1069547520, i64 1176502272, double 6.000000e+01, double 2.400000e+02, double 8.000000e+00, double 4.000000e+00 }, %struct.AV1LevelSpec { i8 16, i32 35651584, i32 16384, i32 8704, i32 300, i32 0, i32 128, i32 16, i64 1069547520, i64 1176502272, double 6.000000e+01, double 2.400000e+02, double 8.000000e+00, double 4.000000e+00 }, %struct.AV1LevelSpec { i8 17, i32 35651584, i32 16384, i32 8704, i32 300, i32 0, i32 128, i32 16, i64 2139095040, i64 2189721600, double 1.000000e+02, double 4.800000e+02, double 8.000000e+00, double 4.000000e+00 }, %struct.AV1LevelSpec { i8 18, i32 35651584, i32 16384, i32 8704, i32 300, i32 0, i32 128, i32 16, i64 4278190080, i64 4379443200, double 1.600000e+02, double 8.000000e+02, double 8.000000e+00, double 4.000000e+00 }, %struct.AV1LevelSpec { i8 19, i32 35651584, i32 16384, i32 8704, i32 300, i32 0, i32 128, i32 16, i64 4278190080, i64 4706009088, double 1.600000e+02, double 8.000000e+02, double 8.000000e+00, double 4.000000e+00 }, %struct.AV1LevelSpec { i8 31, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i64 0, i64 0, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00 }, %struct.AV1LevelSpec { i8 31, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i64 0, i64 0, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00 }, %struct.AV1LevelSpec { i8 31, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i64 0, i64 0, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00 }, %struct.AV1LevelSpec { i8 31, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i64 0, i64 0, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00 }], align 16
@.str = private unnamed_addr constant [162 x i8] c"\0A status %d, num_frame %3d, num_decoded_frame %3d, num_shown_frame %3d, current time %6.2f, frames in buffer %2d, presentation delay %6.2f, total interval %6.2f\0A\00", align 1
@.str.1 = private unnamed_addr constant [66 x i8] c"buffer %d, decode count %d, display count %d, present time %6.4f\0A\00", align 1
@.str.2 = private unnamed_addr constant [47 x i8] c"Failed to encode to the target level %d_%d. %s\00", align 1
@level_fail_messages = internal unnamed_addr constant [20 x i8*] [i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.18, i32 0, i32 0), i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.21, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.22, i32 0, i32 0)], align 16
@.str.3 = private unnamed_addr constant [31 x i8] c"The picture size is too large.\00", align 1
@.str.4 = private unnamed_addr constant [32 x i8] c"The picture width is too large.\00", align 1
@.str.5 = private unnamed_addr constant [33 x i8] c"The picture height is too large.\00", align 1
@.str.6 = private unnamed_addr constant [32 x i8] c"The picture width is too small.\00", align 1
@.str.7 = private unnamed_addr constant [33 x i8] c"The picture height is too small.\00", align 1
@.str.8 = private unnamed_addr constant [32 x i8] c"Too many tile columns are used.\00", align 1
@.str.9 = private unnamed_addr constant [25 x i8] c"Too many tiles are used.\00", align 1
@.str.10 = private unnamed_addr constant [27 x i8] c"The tile rate is too high.\00", align 1
@.str.11 = private unnamed_addr constant [28 x i8] c"The tile size is too large.\00", align 1
@.str.12 = private unnamed_addr constant [38 x i8] c"The superres tile width is too large.\00", align 1
@.str.13 = private unnamed_addr constant [39 x i8] c"The cropped tile width is less than 8.\00", align 1
@.str.14 = private unnamed_addr constant [40 x i8] c"The cropped tile height is less than 8.\00", align 1
@.str.15 = private unnamed_addr constant [27 x i8] c"The tile width is invalid.\00", align 1
@.str.16 = private unnamed_addr constant [35 x i8] c"The frame header rate is too high.\00", align 1
@.str.17 = private unnamed_addr constant [42 x i8] c"The display luma sample rate is too high.\00", align 1
@.str.18 = private unnamed_addr constant [42 x i8] c"The decoded luma sample rate is too high.\00", align 1
@.str.19 = private unnamed_addr constant [36 x i8] c"The compression ratio is too small.\00", align 1
@.str.20 = private unnamed_addr constant [58 x i8] c"The product of max tile size and header rate is too high.\00", align 1
@.str.21 = private unnamed_addr constant [25 x i8] c"The bitrate is too high.\00", align 1
@.str.22 = private unnamed_addr constant [25 x i8] c"The decoder model fails.\00", align 1

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden double @av1_get_max_bitrate_for_level(i8 zeroext, i32, i8 signext) local_unnamed_addr #0 {
  %4 = zext i8 %0 to i64
  %5 = lshr i64 51, %4
  %6 = and i64 %5, 1
  %7 = icmp ne i64 %6, 0
  %8 = icmp eq i32 %1, 0
  %9 = or i1 %8, %7
  %10 = getelementptr inbounds [24 x %struct.AV1LevelSpec], [24 x %struct.AV1LevelSpec]* @av1_level_defs, i64 0, i64 %4, i32 11
  %11 = getelementptr inbounds [24 x %struct.AV1LevelSpec], [24 x %struct.AV1LevelSpec]* @av1_level_defs, i64 0, i64 %4, i32 10
  %12 = select i1 %9, double* %11, double* %10
  %13 = load double, double* %12, align 8
  %14 = fmul double %13, 1.000000e+06
  %15 = icmp eq i8 %2, 0
  %16 = icmp eq i8 %2, 1
  %17 = select i1 %16, double 2.000000e+00, double 3.000000e+00
  %18 = select i1 %15, double 1.000000e+00, double %17
  %19 = fmul double %18, %14
  ret double %19
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @av1_get_max_tiles_for_level(i8 zeroext, i32* nocapture, i32* nocapture) local_unnamed_addr #1 {
  %4 = zext i8 %0 to i64
  %5 = getelementptr inbounds [24 x %struct.AV1LevelSpec], [24 x %struct.AV1LevelSpec]* @av1_level_defs, i64 0, i64 %4, i32 6
  %6 = load i32, i32* %5, align 8
  store i32 %6, i32* %1, align 4
  %7 = getelementptr inbounds [24 x %struct.AV1LevelSpec], [24 x %struct.AV1LevelSpec]* @av1_level_defs, i64 0, i64 %4, i32 7
  %8 = load i32, i32* %7, align 4
  store i32 %8, i32* %2, align 4
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden double @time_next_buffer_is_free(%struct.DECODER_MODEL* nocapture readonly) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 14
  %3 = load i32, i32* %2, align 4
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %9, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 17, i64 0, i32 0
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %14, label %25

9:                                                ; preds = %1
  %10 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 5
  %11 = load i32, i32* %10, align 8
  %12 = sitofp i32 %11 to double
  %13 = fdiv double %12, 9.000000e+04
  br label %33

14:                                               ; preds = %5
  %15 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 17, i64 0, i32 1
  %16 = load i32, i32* %15, align 4
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %30, label %18

18:                                               ; preds = %14
  %19 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 17, i64 0, i32 4
  %20 = load double, double* %19, align 8
  %21 = fcmp oge double %20, 0.000000e+00
  %22 = fcmp olt double %20, 1.000000e+16
  %23 = and i1 %21, %22
  %24 = select i1 %23, double %20, double 1.000000e+16
  br label %25

25:                                               ; preds = %18, %5
  %26 = phi double [ %24, %18 ], [ 1.000000e+16, %5 ]
  %27 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 17, i64 1, i32 0
  %28 = load i32, i32* %27, align 8
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %35, label %46

30:                                               ; preds = %163, %147, %131, %115, %99, %83, %67, %51, %35, %14
  %31 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 10
  %32 = load double, double* %31, align 8
  br label %33

33:                                               ; preds = %174, %30, %9
  %34 = phi double [ %13, %9 ], [ %177, %174 ], [ %32, %30 ]
  ret double %34

35:                                               ; preds = %25
  %36 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 17, i64 1, i32 1
  %37 = load i32, i32* %36, align 4
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %30, label %39

39:                                               ; preds = %35
  %40 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 17, i64 1, i32 4
  %41 = load double, double* %40, align 8
  %42 = fcmp oge double %41, 0.000000e+00
  %43 = fcmp olt double %41, %26
  %44 = and i1 %42, %43
  %45 = select i1 %44, double %41, double %26
  br label %46

46:                                               ; preds = %39, %25
  %47 = phi double [ %45, %39 ], [ %26, %25 ]
  %48 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 17, i64 2, i32 0
  %49 = load i32, i32* %48, align 8
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %51, label %62

51:                                               ; preds = %46
  %52 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 17, i64 2, i32 1
  %53 = load i32, i32* %52, align 4
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %30, label %55

55:                                               ; preds = %51
  %56 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 17, i64 2, i32 4
  %57 = load double, double* %56, align 8
  %58 = fcmp oge double %57, 0.000000e+00
  %59 = fcmp olt double %57, %47
  %60 = and i1 %58, %59
  %61 = select i1 %60, double %57, double %47
  br label %62

62:                                               ; preds = %55, %46
  %63 = phi double [ %61, %55 ], [ %47, %46 ]
  %64 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 17, i64 3, i32 0
  %65 = load i32, i32* %64, align 8
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %67, label %78

67:                                               ; preds = %62
  %68 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 17, i64 3, i32 1
  %69 = load i32, i32* %68, align 4
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %30, label %71

71:                                               ; preds = %67
  %72 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 17, i64 3, i32 4
  %73 = load double, double* %72, align 8
  %74 = fcmp oge double %73, 0.000000e+00
  %75 = fcmp olt double %73, %63
  %76 = and i1 %74, %75
  %77 = select i1 %76, double %73, double %63
  br label %78

78:                                               ; preds = %71, %62
  %79 = phi double [ %77, %71 ], [ %63, %62 ]
  %80 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 17, i64 4, i32 0
  %81 = load i32, i32* %80, align 8
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %83, label %94

83:                                               ; preds = %78
  %84 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 17, i64 4, i32 1
  %85 = load i32, i32* %84, align 4
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %30, label %87

87:                                               ; preds = %83
  %88 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 17, i64 4, i32 4
  %89 = load double, double* %88, align 8
  %90 = fcmp oge double %89, 0.000000e+00
  %91 = fcmp olt double %89, %79
  %92 = and i1 %90, %91
  %93 = select i1 %92, double %89, double %79
  br label %94

94:                                               ; preds = %87, %78
  %95 = phi double [ %93, %87 ], [ %79, %78 ]
  %96 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 17, i64 5, i32 0
  %97 = load i32, i32* %96, align 8
  %98 = icmp eq i32 %97, 0
  br i1 %98, label %99, label %110

99:                                               ; preds = %94
  %100 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 17, i64 5, i32 1
  %101 = load i32, i32* %100, align 4
  %102 = icmp eq i32 %101, 0
  br i1 %102, label %30, label %103

103:                                              ; preds = %99
  %104 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 17, i64 5, i32 4
  %105 = load double, double* %104, align 8
  %106 = fcmp oge double %105, 0.000000e+00
  %107 = fcmp olt double %105, %95
  %108 = and i1 %106, %107
  %109 = select i1 %108, double %105, double %95
  br label %110

110:                                              ; preds = %103, %94
  %111 = phi double [ %109, %103 ], [ %95, %94 ]
  %112 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 17, i64 6, i32 0
  %113 = load i32, i32* %112, align 8
  %114 = icmp eq i32 %113, 0
  br i1 %114, label %115, label %126

115:                                              ; preds = %110
  %116 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 17, i64 6, i32 1
  %117 = load i32, i32* %116, align 4
  %118 = icmp eq i32 %117, 0
  br i1 %118, label %30, label %119

119:                                              ; preds = %115
  %120 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 17, i64 6, i32 4
  %121 = load double, double* %120, align 8
  %122 = fcmp oge double %121, 0.000000e+00
  %123 = fcmp olt double %121, %111
  %124 = and i1 %122, %123
  %125 = select i1 %124, double %121, double %111
  br label %126

126:                                              ; preds = %119, %110
  %127 = phi double [ %125, %119 ], [ %111, %110 ]
  %128 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 17, i64 7, i32 0
  %129 = load i32, i32* %128, align 8
  %130 = icmp eq i32 %129, 0
  br i1 %130, label %131, label %142

131:                                              ; preds = %126
  %132 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 17, i64 7, i32 1
  %133 = load i32, i32* %132, align 4
  %134 = icmp eq i32 %133, 0
  br i1 %134, label %30, label %135

135:                                              ; preds = %131
  %136 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 17, i64 7, i32 4
  %137 = load double, double* %136, align 8
  %138 = fcmp oge double %137, 0.000000e+00
  %139 = fcmp olt double %137, %127
  %140 = and i1 %138, %139
  %141 = select i1 %140, double %137, double %127
  br label %142

142:                                              ; preds = %135, %126
  %143 = phi double [ %141, %135 ], [ %127, %126 ]
  %144 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 17, i64 8, i32 0
  %145 = load i32, i32* %144, align 8
  %146 = icmp eq i32 %145, 0
  br i1 %146, label %147, label %158

147:                                              ; preds = %142
  %148 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 17, i64 8, i32 1
  %149 = load i32, i32* %148, align 4
  %150 = icmp eq i32 %149, 0
  br i1 %150, label %30, label %151

151:                                              ; preds = %147
  %152 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 17, i64 8, i32 4
  %153 = load double, double* %152, align 8
  %154 = fcmp oge double %153, 0.000000e+00
  %155 = fcmp olt double %153, %143
  %156 = and i1 %154, %155
  %157 = select i1 %156, double %153, double %143
  br label %158

158:                                              ; preds = %151, %142
  %159 = phi double [ %157, %151 ], [ %143, %142 ]
  %160 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 17, i64 9, i32 0
  %161 = load i32, i32* %160, align 8
  %162 = icmp eq i32 %161, 0
  br i1 %162, label %163, label %174

163:                                              ; preds = %158
  %164 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 17, i64 9, i32 1
  %165 = load i32, i32* %164, align 4
  %166 = icmp eq i32 %165, 0
  br i1 %166, label %30, label %167

167:                                              ; preds = %163
  %168 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 17, i64 9, i32 4
  %169 = load double, double* %168, align 8
  %170 = fcmp oge double %169, 0.000000e+00
  %171 = fcmp olt double %169, %159
  %172 = and i1 %170, %171
  %173 = select i1 %172, double %169, double %159
  br label %174

174:                                              ; preds = %167, %158
  %175 = phi double [ %173, %167 ], [ %159, %158 ]
  %176 = fcmp olt double %175, 1.000000e+16
  %177 = select i1 %176, double %175, double -1.000000e+00
  br label %33
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @av1_decoder_model_print_status(%struct.DECODER_MODEL* nocapture readonly) local_unnamed_addr #2 {
  %2 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 0
  %3 = load i8, i8* %2, align 8
  %4 = zext i8 %3 to i32
  %5 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 13
  %6 = load i32, i32* %5, align 8
  %7 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 14
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 15
  %10 = load i32, i32* %9, align 8
  %11 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 10
  %12 = load double, double* %11, align 8
  %13 = tail call fastcc i32 @frames_in_buffer_pool(%struct.DECODER_MODEL* %0)
  %14 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 11
  %15 = load double, double* %14, align 8
  %16 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 18, i32 2
  %17 = load double, double* %16, align 8
  %18 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([162 x i8], [162 x i8]* @.str, i64 0, i64 0), i32 %4, i32 %6, i32 %8, i32 %10, double %12, i32 %13, double %15, double %17)
  %19 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 17, i64 0, i32 0
  %20 = load i32, i32* %19, align 8
  %21 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 17, i64 0, i32 1
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 17, i64 0, i32 4
  %24 = load double, double* %23, align 8
  %25 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.1, i64 0, i64 0), i32 0, i32 %20, i32 %22, double %24)
  %26 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 17, i64 1, i32 0
  %27 = load i32, i32* %26, align 8
  %28 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 17, i64 1, i32 1
  %29 = load i32, i32* %28, align 4
  %30 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 17, i64 1, i32 4
  %31 = load double, double* %30, align 8
  %32 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.1, i64 0, i64 0), i32 1, i32 %27, i32 %29, double %31)
  %33 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 17, i64 2, i32 0
  %34 = load i32, i32* %33, align 8
  %35 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 17, i64 2, i32 1
  %36 = load i32, i32* %35, align 4
  %37 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 17, i64 2, i32 4
  %38 = load double, double* %37, align 8
  %39 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.1, i64 0, i64 0), i32 2, i32 %34, i32 %36, double %38)
  %40 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 17, i64 3, i32 0
  %41 = load i32, i32* %40, align 8
  %42 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 17, i64 3, i32 1
  %43 = load i32, i32* %42, align 4
  %44 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 17, i64 3, i32 4
  %45 = load double, double* %44, align 8
  %46 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.1, i64 0, i64 0), i32 3, i32 %41, i32 %43, double %45)
  %47 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 17, i64 4, i32 0
  %48 = load i32, i32* %47, align 8
  %49 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 17, i64 4, i32 1
  %50 = load i32, i32* %49, align 4
  %51 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 17, i64 4, i32 4
  %52 = load double, double* %51, align 8
  %53 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.1, i64 0, i64 0), i32 4, i32 %48, i32 %50, double %52)
  %54 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 17, i64 5, i32 0
  %55 = load i32, i32* %54, align 8
  %56 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 17, i64 5, i32 1
  %57 = load i32, i32* %56, align 4
  %58 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 17, i64 5, i32 4
  %59 = load double, double* %58, align 8
  %60 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.1, i64 0, i64 0), i32 5, i32 %55, i32 %57, double %59)
  %61 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 17, i64 6, i32 0
  %62 = load i32, i32* %61, align 8
  %63 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 17, i64 6, i32 1
  %64 = load i32, i32* %63, align 4
  %65 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 17, i64 6, i32 4
  %66 = load double, double* %65, align 8
  %67 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.1, i64 0, i64 0), i32 6, i32 %62, i32 %64, double %66)
  %68 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 17, i64 7, i32 0
  %69 = load i32, i32* %68, align 8
  %70 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 17, i64 7, i32 1
  %71 = load i32, i32* %70, align 4
  %72 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 17, i64 7, i32 4
  %73 = load double, double* %72, align 8
  %74 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.1, i64 0, i64 0), i32 7, i32 %69, i32 %71, double %73)
  %75 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 17, i64 8, i32 0
  %76 = load i32, i32* %75, align 8
  %77 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 17, i64 8, i32 1
  %78 = load i32, i32* %77, align 4
  %79 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 17, i64 8, i32 4
  %80 = load double, double* %79, align 8
  %81 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.1, i64 0, i64 0), i32 8, i32 %76, i32 %78, double %80)
  %82 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 17, i64 9, i32 0
  %83 = load i32, i32* %82, align 8
  %84 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 17, i64 9, i32 1
  %85 = load i32, i32* %84, align 4
  %86 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 17, i64 9, i32 4
  %87 = load double, double* %86, align 8
  %88 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.1, i64 0, i64 0), i32 9, i32 %83, i32 %85, double %87)
  ret void
}

; Function Attrs: nofree nounwind
declare i32 @printf(i8* nocapture readonly, ...) local_unnamed_addr #3

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal fastcc i32 @frames_in_buffer_pool(%struct.DECODER_MODEL* nocapture readonly) unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 17, i64 0, i32 0
  %3 = load i32, i32* %2, align 8
  %4 = icmp sgt i32 %3, 0
  br i1 %4, label %9, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 17, i64 0, i32 1
  %7 = load i32, i32* %6, align 4
  %8 = icmp sgt i32 %7, 0
  br i1 %8, label %9, label %10

9:                                                ; preds = %5, %1
  br label %10

10:                                               ; preds = %9, %5
  %11 = phi i32 [ 1, %9 ], [ 0, %5 ]
  %12 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 17, i64 1, i32 0
  %13 = load i32, i32* %12, align 8
  %14 = icmp sgt i32 %13, 0
  br i1 %14, label %19, label %15

15:                                               ; preds = %10
  %16 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 17, i64 1, i32 1
  %17 = load i32, i32* %16, align 4
  %18 = icmp sgt i32 %17, 0
  br i1 %18, label %19, label %21

19:                                               ; preds = %15, %10
  %20 = add nuw nsw i32 %11, 1
  br label %21

21:                                               ; preds = %19, %15
  %22 = phi i32 [ %20, %19 ], [ %11, %15 ]
  %23 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 17, i64 2, i32 0
  %24 = load i32, i32* %23, align 8
  %25 = icmp sgt i32 %24, 0
  br i1 %25, label %30, label %26

26:                                               ; preds = %21
  %27 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 17, i64 2, i32 1
  %28 = load i32, i32* %27, align 4
  %29 = icmp sgt i32 %28, 0
  br i1 %29, label %30, label %32

30:                                               ; preds = %26, %21
  %31 = add nuw nsw i32 %22, 1
  br label %32

32:                                               ; preds = %30, %26
  %33 = phi i32 [ %31, %30 ], [ %22, %26 ]
  %34 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 17, i64 3, i32 0
  %35 = load i32, i32* %34, align 8
  %36 = icmp sgt i32 %35, 0
  br i1 %36, label %41, label %37

37:                                               ; preds = %32
  %38 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 17, i64 3, i32 1
  %39 = load i32, i32* %38, align 4
  %40 = icmp sgt i32 %39, 0
  br i1 %40, label %41, label %43

41:                                               ; preds = %37, %32
  %42 = add nuw nsw i32 %33, 1
  br label %43

43:                                               ; preds = %41, %37
  %44 = phi i32 [ %42, %41 ], [ %33, %37 ]
  %45 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 17, i64 4, i32 0
  %46 = load i32, i32* %45, align 8
  %47 = icmp sgt i32 %46, 0
  br i1 %47, label %52, label %48

48:                                               ; preds = %43
  %49 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 17, i64 4, i32 1
  %50 = load i32, i32* %49, align 4
  %51 = icmp sgt i32 %50, 0
  br i1 %51, label %52, label %54

52:                                               ; preds = %48, %43
  %53 = add nuw nsw i32 %44, 1
  br label %54

54:                                               ; preds = %52, %48
  %55 = phi i32 [ %53, %52 ], [ %44, %48 ]
  %56 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 17, i64 5, i32 0
  %57 = load i32, i32* %56, align 8
  %58 = icmp sgt i32 %57, 0
  br i1 %58, label %63, label %59

59:                                               ; preds = %54
  %60 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 17, i64 5, i32 1
  %61 = load i32, i32* %60, align 4
  %62 = icmp sgt i32 %61, 0
  br i1 %62, label %63, label %65

63:                                               ; preds = %59, %54
  %64 = add nuw nsw i32 %55, 1
  br label %65

65:                                               ; preds = %63, %59
  %66 = phi i32 [ %64, %63 ], [ %55, %59 ]
  %67 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 17, i64 6, i32 0
  %68 = load i32, i32* %67, align 8
  %69 = icmp sgt i32 %68, 0
  br i1 %69, label %74, label %70

70:                                               ; preds = %65
  %71 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 17, i64 6, i32 1
  %72 = load i32, i32* %71, align 4
  %73 = icmp sgt i32 %72, 0
  br i1 %73, label %74, label %76

74:                                               ; preds = %70, %65
  %75 = add nuw nsw i32 %66, 1
  br label %76

76:                                               ; preds = %74, %70
  %77 = phi i32 [ %75, %74 ], [ %66, %70 ]
  %78 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 17, i64 7, i32 0
  %79 = load i32, i32* %78, align 8
  %80 = icmp sgt i32 %79, 0
  br i1 %80, label %85, label %81

81:                                               ; preds = %76
  %82 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 17, i64 7, i32 1
  %83 = load i32, i32* %82, align 4
  %84 = icmp sgt i32 %83, 0
  br i1 %84, label %85, label %87

85:                                               ; preds = %81, %76
  %86 = add nuw nsw i32 %77, 1
  br label %87

87:                                               ; preds = %85, %81
  %88 = phi i32 [ %86, %85 ], [ %77, %81 ]
  %89 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 17, i64 8, i32 0
  %90 = load i32, i32* %89, align 8
  %91 = icmp sgt i32 %90, 0
  br i1 %91, label %96, label %92

92:                                               ; preds = %87
  %93 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 17, i64 8, i32 1
  %94 = load i32, i32* %93, align 4
  %95 = icmp sgt i32 %94, 0
  br i1 %95, label %96, label %98

96:                                               ; preds = %92, %87
  %97 = add nuw nsw i32 %88, 1
  br label %98

98:                                               ; preds = %96, %92
  %99 = phi i32 [ %97, %96 ], [ %88, %92 ]
  %100 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 17, i64 9, i32 0
  %101 = load i32, i32* %100, align 8
  %102 = icmp sgt i32 %101, 0
  br i1 %102, label %107, label %103

103:                                              ; preds = %98
  %104 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 17, i64 9, i32 1
  %105 = load i32, i32* %104, align 4
  %106 = icmp sgt i32 %105, 0
  br i1 %106, label %107, label %109

107:                                              ; preds = %103, %98
  %108 = add nuw nsw i32 %99, 1
  br label %109

109:                                              ; preds = %107, %103
  %110 = phi i32 [ %108, %107 ], [ %99, %103 ]
  ret i32 %110
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_decoder_model_init(%struct.AV1_COMP* nocapture readonly, i8 zeroext, i32, %struct.DECODER_MODEL*) local_unnamed_addr #4 {
  %5 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %3, i64 0, i32 0
  store i8 0, i8* %5, align 8
  %6 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %3, i64 0, i32 3
  store i8 %1, i8* %6, align 1
  %7 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 35
  %8 = load %struct.SequenceHeader*, %struct.SequenceHeader** %7, align 16
  %9 = zext i8 %1 to i64
  %10 = sext i32 %2 to i64
  %11 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %8, i64 0, i32 45, i64 %10
  %12 = load i8, i8* %11, align 1
  %13 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %8, i64 0, i32 24
  %14 = load i8, i8* %13, align 1
  %15 = lshr i64 51, %9
  %16 = and i64 %15, 1
  %17 = icmp ne i64 %16, 0
  %18 = icmp eq i8 %12, 0
  %19 = or i1 %17, %18
  %20 = getelementptr inbounds [24 x %struct.AV1LevelSpec], [24 x %struct.AV1LevelSpec]* @av1_level_defs, i64 0, i64 %9, i32 11
  %21 = getelementptr inbounds [24 x %struct.AV1LevelSpec], [24 x %struct.AV1LevelSpec]* @av1_level_defs, i64 0, i64 %9, i32 10
  %22 = select i1 %19, double* %21, double* %20
  %23 = load double, double* %22, align 8
  %24 = fmul double %23, 1.000000e+06
  %25 = icmp eq i8 %14, 0
  %26 = icmp eq i8 %14, 1
  %27 = select i1 %26, double 2.000000e+00, double 3.000000e+00
  %28 = select i1 %25, double 1.000000e+00, double %27
  %29 = fmul double %24, %28
  %30 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %3, i64 0, i32 12
  store double %29, double* %30, align 8
  %31 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %3, i64 0, i32 1
  store i8 0, i8* %31, align 1
  %32 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %3, i64 0, i32 4
  store i32 20000, i32* %32, align 4
  %33 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %3, i64 0, i32 5
  store i32 70000, i32* %33, align 8
  %34 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %3, i64 0, i32 2
  store i8 0, i8* %34, align 2
  %35 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %3, i64 0, i32 19
  %36 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %3, i64 0, i32 22
  %37 = bitcast double* %35 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %37, i8 0, i64 24, i1 false)
  %38 = bitcast double* %36 to <2 x double>*
  store <2 x double> <double -1.000000e+00, double -1.000000e+00>, <2 x double>* %38, align 8
  %39 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %3, i64 0, i32 24
  %40 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %3, i64 0, i32 13
  %41 = bitcast i32* %39 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %41, i8 0, i64 24, i1 false)
  store i32 -1, i32* %40, align 8
  %42 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %3, i64 0, i32 14
  store i32 -1, i32* %42, align 4
  %43 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %3, i64 0, i32 15
  store i32 -1, i32* %43, align 8
  %44 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %3, i64 0, i32 10
  store double 0.000000e+00, double* %44, align 8
  %45 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %3, i64 0, i32 17, i64 0, i32 0
  store i32 0, i32* %45, align 8
  %46 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %3, i64 0, i32 17, i64 0, i32 1
  store i32 0, i32* %46, align 4
  %47 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %3, i64 0, i32 17, i64 0, i32 2
  store i32 -1, i32* %47, align 8
  %48 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %3, i64 0, i32 17, i64 0, i32 4
  store double -1.000000e+00, double* %48, align 8
  %49 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %3, i64 0, i32 17, i64 1, i32 0
  store i32 0, i32* %49, align 8
  %50 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %3, i64 0, i32 17, i64 1, i32 1
  store i32 0, i32* %50, align 4
  %51 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %3, i64 0, i32 17, i64 1, i32 2
  store i32 -1, i32* %51, align 8
  %52 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %3, i64 0, i32 17, i64 1, i32 4
  store double -1.000000e+00, double* %52, align 8
  %53 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %3, i64 0, i32 17, i64 2, i32 0
  store i32 0, i32* %53, align 8
  %54 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %3, i64 0, i32 17, i64 2, i32 1
  store i32 0, i32* %54, align 4
  %55 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %3, i64 0, i32 17, i64 2, i32 2
  store i32 -1, i32* %55, align 8
  %56 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %3, i64 0, i32 17, i64 2, i32 4
  store double -1.000000e+00, double* %56, align 8
  %57 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %3, i64 0, i32 17, i64 3, i32 0
  store i32 0, i32* %57, align 8
  %58 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %3, i64 0, i32 17, i64 3, i32 1
  store i32 0, i32* %58, align 4
  %59 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %3, i64 0, i32 17, i64 3, i32 2
  store i32 -1, i32* %59, align 8
  %60 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %3, i64 0, i32 17, i64 3, i32 4
  store double -1.000000e+00, double* %60, align 8
  %61 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %3, i64 0, i32 17, i64 4, i32 0
  store i32 0, i32* %61, align 8
  %62 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %3, i64 0, i32 17, i64 4, i32 1
  store i32 0, i32* %62, align 4
  %63 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %3, i64 0, i32 17, i64 4, i32 2
  store i32 -1, i32* %63, align 8
  %64 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %3, i64 0, i32 17, i64 4, i32 4
  store double -1.000000e+00, double* %64, align 8
  %65 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %3, i64 0, i32 17, i64 5, i32 0
  store i32 0, i32* %65, align 8
  %66 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %3, i64 0, i32 17, i64 5, i32 1
  store i32 0, i32* %66, align 4
  %67 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %3, i64 0, i32 17, i64 5, i32 2
  store i32 -1, i32* %67, align 8
  %68 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %3, i64 0, i32 17, i64 5, i32 4
  store double -1.000000e+00, double* %68, align 8
  %69 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %3, i64 0, i32 17, i64 6, i32 0
  store i32 0, i32* %69, align 8
  %70 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %3, i64 0, i32 17, i64 6, i32 1
  store i32 0, i32* %70, align 4
  %71 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %3, i64 0, i32 17, i64 6, i32 2
  store i32 -1, i32* %71, align 8
  %72 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %3, i64 0, i32 17, i64 6, i32 4
  store double -1.000000e+00, double* %72, align 8
  %73 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %3, i64 0, i32 17, i64 7, i32 0
  store i32 0, i32* %73, align 8
  %74 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %3, i64 0, i32 17, i64 7, i32 1
  store i32 0, i32* %74, align 4
  %75 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %3, i64 0, i32 17, i64 7, i32 2
  store i32 -1, i32* %75, align 8
  %76 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %3, i64 0, i32 17, i64 7, i32 4
  store double -1.000000e+00, double* %76, align 8
  %77 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %3, i64 0, i32 17, i64 8, i32 0
  store i32 0, i32* %77, align 8
  %78 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %3, i64 0, i32 17, i64 8, i32 1
  store i32 0, i32* %78, align 4
  %79 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %3, i64 0, i32 17, i64 8, i32 2
  store i32 -1, i32* %79, align 8
  %80 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %3, i64 0, i32 17, i64 8, i32 4
  store double -1.000000e+00, double* %80, align 8
  %81 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %3, i64 0, i32 17, i64 9, i32 0
  store i32 0, i32* %81, align 8
  %82 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %3, i64 0, i32 17, i64 9, i32 1
  store i32 0, i32* %82, align 4
  %83 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %3, i64 0, i32 17, i64 9, i32 2
  store i32 -1, i32* %83, align 8
  %84 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %3, i64 0, i32 17, i64 9, i32 4
  store double -1.000000e+00, double* %84, align 8
  %85 = getelementptr %struct.DECODER_MODEL, %struct.DECODER_MODEL* %3, i64 0, i32 16, i64 0
  %86 = bitcast i32* %85 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %86, i8 -1, i64 32, i1 false) #9
  %87 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %3, i64 0, i32 18, i32 0
  %88 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %8, i64 0, i32 39
  %89 = bitcast i32* %87 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %89, i8 0, i64 16, i1 false)
  %90 = load i32, i32* %88, align 4
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %102, label %92

92:                                               ; preds = %4
  %93 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %8, i64 0, i32 40, i32 3
  %94 = load i32, i32* %93, align 4
  %95 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %3, i64 0, i32 6
  store i32 %94, i32* %95, align 4
  %96 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %8, i64 0, i32 40, i32 0
  %97 = load i32, i32* %96, align 8
  %98 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %8, i64 0, i32 40, i32 1
  %99 = load i32, i32* %98, align 4
  %100 = udiv i32 %97, %99
  %101 = uitofp i32 %100 to double
  br label %107

102:                                              ; preds = %4
  %103 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %3, i64 0, i32 6
  store i32 1, i32* %103, align 4
  %104 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 37
  %105 = load double, double* %104, align 16
  %106 = fdiv double 1.000000e+00, %105
  br label %107

107:                                              ; preds = %102, %92
  %108 = phi double [ %106, %102 ], [ %101, %92 ]
  %109 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %3, i64 0, i32 9
  store double %108, double* %109, align 8
  %110 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %8, i64 0, i32 46, i64 %10, i32 7
  %111 = load i32, i32* %110, align 8
  %112 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %3, i64 0, i32 7
  store i32 %111, i32* %112, align 8
  %113 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %3, i64 0, i32 11
  store double -1.000000e+00, double* %113, align 8
  %114 = getelementptr inbounds [24 x %struct.AV1LevelSpec], [24 x %struct.AV1LevelSpec]* @av1_level_defs, i64 0, i64 %9, i32 9
  %115 = load i64, i64* %114, align 8
  %116 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %3, i64 0, i32 8
  store i64 %115, i64* %116, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @av1_decoder_model_process_frame(%struct.AV1_COMP* nocapture readonly, i64, %struct.DECODER_MODEL*) local_unnamed_addr #5 {
  %4 = icmp eq %struct.DECODER_MODEL* %2, null
  br i1 %4, label %377, label %5

5:                                                ; preds = %3
  %6 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 0
  %7 = load i8, i8* %6, align 8
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %9, label %377

9:                                                ; preds = %5
  %10 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8
  %11 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 6
  %12 = load i32, i32* %11, align 16
  %13 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 3
  %14 = load i32, i32* %13, align 4
  %15 = mul nsw i32 %14, %12
  %16 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 19
  %17 = load i32, i32* %16, align 16
  %18 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 17
  %19 = load i32, i32* %18, align 8
  %20 = icmp ne i32 %17, 0
  %21 = or i32 %19, %17
  %22 = icmp ne i32 %21, 0
  %23 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 13
  %24 = load i32, i32* %23, align 8
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %23, align 8
  br i1 %20, label %30, label %26

26:                                               ; preds = %9
  %27 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 14
  %28 = load i32, i32* %27, align 4
  %29 = add nsw i32 %28, 1
  store i32 %29, i32* %27, align 4
  br label %30

30:                                               ; preds = %26, %9
  br i1 %22, label %31, label %35

31:                                               ; preds = %30
  %32 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 15
  %33 = load i32, i32* %32, align 8
  %34 = add nsw i32 %33, 1
  store i32 %34, i32* %32, align 8
  br label %35

35:                                               ; preds = %31, %30
  %36 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 21
  %37 = load i64, i64* %36, align 8
  %38 = add i64 %37, %1
  store i64 %38, i64* %36, align 8
  br i1 %20, label %39, label %53

39:                                               ; preds = %35
  %40 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 62
  %41 = load i32, i32* %40, align 16
  %42 = sext i32 %41 to i64
  %43 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 16, i64 %42
  %44 = load i32, i32* %43, align 4
  %45 = icmp slt i32 %44, 0
  br i1 %45, label %46, label %47

46:                                               ; preds = %39
  store i8 3, i8* %6, align 8
  br label %377

47:                                               ; preds = %39
  %48 = sext i32 %44 to i64
  %49 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 17, i64 %48, i32 3
  %50 = load i8, i8* %49, align 4
  %51 = icmp eq i8 %50, 0
  br i1 %51, label %52, label %325

52:                                               ; preds = %47
  tail call fastcc void @update_ref_buffers(%struct.DECODER_MODEL* nonnull %2, i32 %44, i32 255)
  br label %325

53:                                               ; preds = %35
  %54 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 1
  %55 = load i8, i8* %54, align 1
  %56 = icmp eq i8 %55, 1
  br i1 %56, label %60, label %57

57:                                               ; preds = %53
  %58 = tail call double @time_next_buffer_is_free(%struct.DECODER_MODEL* nonnull %2) #9
  %59 = fcmp olt double %58, 0.000000e+00
  br i1 %59, label %60, label %61

60:                                               ; preds = %53, %57
  store i8 2, i8* %6, align 8
  br label %377

61:                                               ; preds = %57
  %62 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 24
  %63 = load i32, i32* %62, align 8
  %64 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 22
  %65 = load double, double* %64, align 8
  store double %58, double* %64, align 8
  store i32 %15, i32* %62, align 8
  %66 = sitofp i32 %63 to double
  %67 = fsub double %58, %65
  %68 = fdiv double %66, %67
  %69 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 27
  %70 = load double, double* %69, align 8
  %71 = fcmp ogt double %70, %68
  %72 = select i1 %71, double %70, double %68
  store double %72, double* %69, align 8
  %73 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 4
  %74 = load i32, i32* %73, align 4
  %75 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 5
  %76 = load i32, i32* %75, align 8
  %77 = add nsw i32 %76, %74
  %78 = sitofp i32 %77 to double
  %79 = fdiv double %78, 9.000000e+04
  %80 = fsub double %58, %79
  %81 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 20
  %82 = load double, double* %81, align 8
  %83 = fcmp ogt double %82, %80
  %84 = select i1 %83, double %82, double %80
  %85 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 19
  store double %84, double* %85, align 8
  %86 = uitofp i64 %38 to double
  %87 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 12
  %88 = load double, double* %87, align 8
  %89 = fdiv double %86, %88
  %90 = fadd double %89, %84
  store double %90, double* %81, align 8
  %91 = fcmp ogt double %90, %58
  br i1 %91, label %92, label %97

92:                                               ; preds = %61
  %93 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 2
  %94 = load i8, i8* %93, align 2, !range !2
  %95 = icmp eq i8 %94, 0
  br i1 %95, label %96, label %97

96:                                               ; preds = %92
  store i8 5, i8* %6, align 8
  br label %377

97:                                               ; preds = %92, %61
  store i64 0, i64* %36, align 8
  %98 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 18, i32 1
  %99 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 18, i32 0
  %100 = load i32, i32* %99, align 8
  %101 = sext i32 %100 to i64
  %102 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 18, i32 3, i64 %101, i32 2
  %103 = load double, double* %102, align 8
  %104 = fcmp ugt double %103, %90
  br i1 %104, label %105, label %107

105:                                              ; preds = %97
  %106 = load i32, i32* %98, align 4
  br label %136

107:                                              ; preds = %97
  %108 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 18, i32 2
  %109 = load i32, i32* %98, align 4
  br label %110

110:                                              ; preds = %107, %122
  %111 = phi i32 [ %109, %107 ], [ %131, %122 ]
  %112 = phi double [ %103, %107 ], [ %134, %122 ]
  %113 = phi i64 [ %101, %107 ], [ %132, %122 ]
  %114 = phi i32 [ %100, %107 ], [ %130, %122 ]
  %115 = icmp sgt i32 %111, 0
  br i1 %115, label %116, label %136

116:                                              ; preds = %110
  %117 = fsub double %112, %84
  %118 = load double, double* %108, align 8
  %119 = fadd double %117, %118
  %120 = fcmp ogt double %119, 1.000000e+00
  br i1 %120, label %121, label %122

121:                                              ; preds = %116
  store i8 6, i8* %6, align 8
  br label %377

122:                                              ; preds = %116
  %123 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 18, i32 3, i64 %113, i32 1
  %124 = load double, double* %123, align 8
  %125 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 18, i32 3, i64 %113, i32 0
  %126 = load double, double* %125, align 8
  %127 = fsub double %124, %126
  %128 = fsub double %118, %127
  store double %128, double* %108, align 8
  %129 = add nsw i32 %114, 1
  %130 = srem i32 %129, 64
  store i32 %130, i32* %99, align 8
  %131 = add nsw i32 %111, -1
  store i32 %131, i32* %98, align 4
  %132 = sext i32 %130 to i64
  %133 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 18, i32 3, i64 %132, i32 2
  %134 = load double, double* %133, align 8
  %135 = fcmp ugt double %134, %90
  br i1 %135, label %136, label %110

136:                                              ; preds = %110, %122, %105
  %137 = phi i32 [ %106, %105 ], [ %131, %122 ], [ %111, %110 ]
  %138 = phi i32 [ %100, %105 ], [ %130, %122 ], [ %114, %110 ]
  %139 = add nsw i32 %137, 1
  store i32 %139, i32* %98, align 4
  %140 = add nsw i32 %137, %138
  %141 = srem i32 %140, 64
  %142 = sext i32 %141 to i64
  %143 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 18, i32 3, i64 %142, i32 0
  store double %84, double* %143, align 8
  %144 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 18, i32 3, i64 %142, i32 1
  store double %90, double* %144, align 8
  %145 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 18, i32 3, i64 %142, i32 2
  store double %58, double* %145, align 8
  %146 = fsub double %90, %84
  %147 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 18, i32 2
  %148 = load double, double* %147, align 8
  %149 = fadd double %146, %148
  store double %149, double* %147, align 8
  %150 = fcmp ogt double %149, 1.000000e+00
  br i1 %150, label %151, label %152

151:                                              ; preds = %136
  store i8 6, i8* %6, align 8
  br label %377

152:                                              ; preds = %136, %169
  %153 = phi i64 [ %170, %169 ], [ 0, %136 ]
  %154 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 17, i64 %153, i32 1
  %155 = load i32, i32* %154, align 4
  %156 = icmp sgt i32 %155, 0
  br i1 %156, label %157, label %169

157:                                              ; preds = %152
  %158 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 17, i64 %153, i32 4
  %159 = load double, double* %158, align 8
  %160 = fcmp ult double %159, 0.000000e+00
  %161 = fcmp ugt double %159, %58
  %162 = or i1 %160, %161
  br i1 %162, label %169, label %163

163:                                              ; preds = %157
  store i32 0, i32* %154, align 4
  %164 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 17, i64 %153, i32 0
  %165 = load i32, i32* %164, align 8
  %166 = icmp eq i32 %165, 0
  br i1 %166, label %167, label %169

167:                                              ; preds = %163
  store i32 0, i32* %164, align 8
  store i32 0, i32* %154, align 4
  %168 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 17, i64 %153, i32 2
  store i32 -1, i32* %168, align 8
  store double -1.000000e+00, double* %158, align 8
  br label %169

169:                                              ; preds = %167, %163, %157, %152
  %170 = add nuw nsw i64 %153, 1
  %171 = icmp eq i64 %170, 10
  br i1 %171, label %172, label %152

172:                                              ; preds = %169
  %173 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 8
  %174 = load i64, i64* %173, align 8
  %175 = load i32, i32* %16, align 16
  %176 = icmp eq i32 %175, 0
  br i1 %176, label %177, label %194

177:                                              ; preds = %172
  %178 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %10, i64 0, i32 0, i32 0
  %179 = load i8, i8* %178, align 16
  switch i8 %179, label %180 [
    i8 0, label %185
    i8 2, label %185
  ]

180:                                              ; preds = %177
  %181 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 35
  %182 = load %struct.SequenceHeader*, %struct.SequenceHeader** %181, align 16
  %183 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %182, i64 0, i32 2
  %184 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %182, i64 0, i32 3
  br label %185

185:                                              ; preds = %177, %177, %180
  %186 = phi i32* [ %184, %180 ], [ %13, %177 ], [ %13, %177 ]
  %187 = phi i32* [ %183, %180 ], [ %11, %177 ], [ %11, %177 ]
  %188 = load i32, i32* %187, align 8
  %189 = load i32, i32* %186, align 4
  %190 = mul nsw i32 %189, %188
  %191 = sitofp i32 %190 to double
  %192 = sitofp i64 %174 to double
  %193 = fdiv double %191, %192
  br label %194

194:                                              ; preds = %172, %185
  %195 = phi double [ %193, %185 ], [ 0.000000e+00, %172 ]
  %196 = fadd double %58, %195
  %197 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 10
  store double %196, double* %197, align 8
  %198 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 17, i64 0, i32 0
  %199 = load i32, i32* %198, align 8
  %200 = icmp eq i32 %199, 0
  br i1 %200, label %201, label %205

201:                                              ; preds = %194
  %202 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 17, i64 0, i32 1
  %203 = load i32, i32* %202, align 4
  %204 = icmp eq i32 %203, 0
  br i1 %204, label %278, label %205

205:                                              ; preds = %201, %194
  %206 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 17, i64 1, i32 0
  %207 = load i32, i32* %206, align 8
  %208 = icmp eq i32 %207, 0
  br i1 %208, label %209, label %213

209:                                              ; preds = %205
  %210 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 17, i64 1, i32 1
  %211 = load i32, i32* %210, align 4
  %212 = icmp eq i32 %211, 0
  br i1 %212, label %278, label %213

213:                                              ; preds = %209, %205
  %214 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 17, i64 2, i32 0
  %215 = load i32, i32* %214, align 8
  %216 = icmp eq i32 %215, 0
  br i1 %216, label %217, label %221

217:                                              ; preds = %213
  %218 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 17, i64 2, i32 1
  %219 = load i32, i32* %218, align 4
  %220 = icmp eq i32 %219, 0
  br i1 %220, label %278, label %221

221:                                              ; preds = %217, %213
  %222 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 17, i64 3, i32 0
  %223 = load i32, i32* %222, align 8
  %224 = icmp eq i32 %223, 0
  br i1 %224, label %225, label %229

225:                                              ; preds = %221
  %226 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 17, i64 3, i32 1
  %227 = load i32, i32* %226, align 4
  %228 = icmp eq i32 %227, 0
  br i1 %228, label %278, label %229

229:                                              ; preds = %225, %221
  %230 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 17, i64 4, i32 0
  %231 = load i32, i32* %230, align 8
  %232 = icmp eq i32 %231, 0
  br i1 %232, label %233, label %237

233:                                              ; preds = %229
  %234 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 17, i64 4, i32 1
  %235 = load i32, i32* %234, align 4
  %236 = icmp eq i32 %235, 0
  br i1 %236, label %278, label %237

237:                                              ; preds = %233, %229
  %238 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 17, i64 5, i32 0
  %239 = load i32, i32* %238, align 8
  %240 = icmp eq i32 %239, 0
  br i1 %240, label %241, label %245

241:                                              ; preds = %237
  %242 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 17, i64 5, i32 1
  %243 = load i32, i32* %242, align 4
  %244 = icmp eq i32 %243, 0
  br i1 %244, label %278, label %245

245:                                              ; preds = %241, %237
  %246 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 17, i64 6, i32 0
  %247 = load i32, i32* %246, align 8
  %248 = icmp eq i32 %247, 0
  br i1 %248, label %249, label %253

249:                                              ; preds = %245
  %250 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 17, i64 6, i32 1
  %251 = load i32, i32* %250, align 4
  %252 = icmp eq i32 %251, 0
  br i1 %252, label %278, label %253

253:                                              ; preds = %249, %245
  %254 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 17, i64 7, i32 0
  %255 = load i32, i32* %254, align 8
  %256 = icmp eq i32 %255, 0
  br i1 %256, label %257, label %261

257:                                              ; preds = %253
  %258 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 17, i64 7, i32 1
  %259 = load i32, i32* %258, align 4
  %260 = icmp eq i32 %259, 0
  br i1 %260, label %278, label %261

261:                                              ; preds = %257, %253
  %262 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 17, i64 8, i32 0
  %263 = load i32, i32* %262, align 8
  %264 = icmp eq i32 %263, 0
  br i1 %264, label %265, label %269

265:                                              ; preds = %261
  %266 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 17, i64 8, i32 1
  %267 = load i32, i32* %266, align 4
  %268 = icmp eq i32 %267, 0
  br i1 %268, label %278, label %269

269:                                              ; preds = %265, %261
  %270 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 17, i64 9, i32 0
  %271 = load i32, i32* %270, align 8
  %272 = icmp eq i32 %271, 0
  br i1 %272, label %273, label %277

273:                                              ; preds = %269
  %274 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 17, i64 9, i32 1
  %275 = load i32, i32* %274, align 4
  %276 = icmp eq i32 %275, 0
  br i1 %276, label %278, label %277

277:                                              ; preds = %273, %269
  store i8 2, i8* %6, align 8
  br label %377

278:                                              ; preds = %201, %209, %217, %225, %233, %241, %249, %257, %265, %273
  %279 = phi i32 [ 9, %273 ], [ 8, %265 ], [ 7, %257 ], [ 6, %249 ], [ 5, %241 ], [ 4, %233 ], [ 3, %225 ], [ 2, %217 ], [ 1, %209 ], [ 0, %201 ]
  %280 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %10, i64 0, i32 0, i32 0
  %281 = load i8, i8* %280, align 16
  %282 = zext i32 %279 to i64
  %283 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 17, i64 %282, i32 3
  store i8 %281, i8* %283, align 4
  %284 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 0, i32 6
  %285 = load i32, i32* %284, align 4
  tail call fastcc void @update_ref_buffers(%struct.DECODER_MODEL* %2, i32 %279, i32 %285)
  %286 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 11
  %287 = load double, double* %286, align 8
  %288 = fcmp olt double %287, 0.000000e+00
  br i1 %288, label %289, label %325

289:                                              ; preds = %278
  %290 = tail call fastcc i32 @frames_in_buffer_pool(%struct.DECODER_MODEL* %2)
  %291 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 7
  %292 = load i32, i32* %291, align 8
  %293 = icmp slt i32 %290, %292
  br i1 %293, label %325, label %294

294:                                              ; preds = %289
  %295 = bitcast double* %197 to i64*
  %296 = load i64, i64* %295, align 8
  %297 = bitcast double* %286 to i64*
  store i64 %296, i64* %297, align 8
  %298 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 6
  %299 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 9
  %300 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 17, i64 0, i32 1
  %301 = load i32, i32* %300, align 4
  %302 = icmp eq i32 %301, 0
  %303 = bitcast i64 %296 to double
  br i1 %302, label %321, label %304

304:                                              ; preds = %294
  %305 = load i8, i8* %54, align 1
  %306 = icmp eq i8 %305, 1
  %307 = fcmp olt double %303, 0.000000e+00
  %308 = or i1 %306, %307
  br i1 %308, label %318, label %309

309:                                              ; preds = %304
  %310 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 17, i64 0, i32 2
  %311 = load i32, i32* %310, align 8
  %312 = load i32, i32* %298, align 4
  %313 = mul nsw i32 %312, %311
  %314 = sitofp i32 %313 to double
  %315 = load double, double* %299, align 8
  %316 = fmul double %315, %314
  %317 = fadd double %316, %303
  br label %318

318:                                              ; preds = %304, %309
  %319 = phi double [ -1.000000e+00, %304 ], [ %317, %309 ]
  %320 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 17, i64 0, i32 4
  store double %319, double* %320, align 8
  br label %321

321:                                              ; preds = %294, %318
  %322 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 17, i64 1, i32 1
  %323 = load i32, i32* %322, align 4
  %324 = icmp eq i32 %323, 0
  br i1 %324, label %395, label %378

325:                                              ; preds = %542, %560, %289, %278, %47, %52
  %326 = phi i32 [ %44, %52 ], [ %44, %47 ], [ %279, %289 ], [ %279, %278 ], [ %279, %560 ], [ %279, %542 ]
  br i1 %22, label %327, label %377

327:                                              ; preds = %325
  %328 = sext i32 %326 to i64
  %329 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 17, i64 %328, i32 1
  %330 = load i32, i32* %329, align 4
  %331 = add nsw i32 %330, 1
  store i32 %331, i32* %329, align 4
  %332 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 15
  %333 = load i32, i32* %332, align 8
  %334 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 17, i64 %328, i32 2
  store i32 %333, i32* %334, align 8
  %335 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 1
  %336 = load i8, i8* %335, align 1
  %337 = icmp eq i8 %336, 1
  br i1 %337, label %342, label %338

338:                                              ; preds = %327
  %339 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 11
  %340 = load double, double* %339, align 8
  %341 = fcmp olt double %340, 0.000000e+00
  br i1 %341, label %342, label %344

342:                                              ; preds = %327, %338
  %343 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 17, i64 %328, i32 4
  store double -1.000000e+00, double* %343, align 8
  br label %360

344:                                              ; preds = %338
  %345 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 6
  %346 = load i32, i32* %345, align 4
  %347 = mul nsw i32 %346, %333
  %348 = sitofp i32 %347 to double
  %349 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 9
  %350 = load double, double* %349, align 8
  %351 = fmul double %350, %348
  %352 = fadd double %340, %351
  %353 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 17, i64 %328, i32 4
  store double %352, double* %353, align 8
  %354 = fcmp ult double %352, 0.000000e+00
  br i1 %354, label %360, label %355

355:                                              ; preds = %344
  %356 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 10
  %357 = load double, double* %356, align 8
  %358 = fcmp ogt double %357, %352
  br i1 %358, label %359, label %360

359:                                              ; preds = %355
  store i8 4, i8* %6, align 8
  br label %377

360:                                              ; preds = %344, %342, %355
  %361 = phi i1 [ false, %342 ], [ true, %355 ], [ false, %344 ]
  %362 = phi double [ -1.000000e+00, %342 ], [ %352, %355 ], [ %352, %344 ]
  %363 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 25
  %364 = load i32, i32* %363, align 4
  %365 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 23
  %366 = load double, double* %365, align 8
  store i32 %15, i32* %363, align 4
  store double %362, double* %365, align 8
  %367 = fcmp oge double %366, 0.000000e+00
  %368 = and i1 %361, %367
  br i1 %368, label %369, label %377

369:                                              ; preds = %360
  %370 = sitofp i32 %364 to double
  %371 = fsub double %362, %366
  %372 = fdiv double %370, %371
  %373 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 26
  %374 = load double, double* %373, align 8
  %375 = fcmp ogt double %374, %372
  %376 = select i1 %375, double %374, double %372
  store double %376, double* %373, align 8
  br label %377

377:                                              ; preds = %277, %151, %121, %96, %60, %46, %359, %369, %360, %325, %5, %3
  ret void

378:                                              ; preds = %321
  %379 = load i8, i8* %54, align 1
  %380 = icmp eq i8 %379, 1
  %381 = fcmp olt double %303, 0.000000e+00
  %382 = or i1 %380, %381
  br i1 %382, label %392, label %383

383:                                              ; preds = %378
  %384 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 17, i64 1, i32 2
  %385 = load i32, i32* %384, align 8
  %386 = load i32, i32* %298, align 4
  %387 = mul nsw i32 %386, %385
  %388 = sitofp i32 %387 to double
  %389 = load double, double* %299, align 8
  %390 = fmul double %389, %388
  %391 = fadd double %390, %303
  br label %392

392:                                              ; preds = %383, %378
  %393 = phi double [ -1.000000e+00, %378 ], [ %391, %383 ]
  %394 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 17, i64 1, i32 4
  store double %393, double* %394, align 8
  br label %395

395:                                              ; preds = %392, %321
  %396 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 17, i64 2, i32 1
  %397 = load i32, i32* %396, align 4
  %398 = icmp eq i32 %397, 0
  br i1 %398, label %416, label %399

399:                                              ; preds = %395
  %400 = load i8, i8* %54, align 1
  %401 = icmp eq i8 %400, 1
  %402 = fcmp olt double %303, 0.000000e+00
  %403 = or i1 %401, %402
  br i1 %403, label %413, label %404

404:                                              ; preds = %399
  %405 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 17, i64 2, i32 2
  %406 = load i32, i32* %405, align 8
  %407 = load i32, i32* %298, align 4
  %408 = mul nsw i32 %407, %406
  %409 = sitofp i32 %408 to double
  %410 = load double, double* %299, align 8
  %411 = fmul double %410, %409
  %412 = fadd double %411, %303
  br label %413

413:                                              ; preds = %404, %399
  %414 = phi double [ -1.000000e+00, %399 ], [ %412, %404 ]
  %415 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 17, i64 2, i32 4
  store double %414, double* %415, align 8
  br label %416

416:                                              ; preds = %413, %395
  %417 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 17, i64 3, i32 1
  %418 = load i32, i32* %417, align 4
  %419 = icmp eq i32 %418, 0
  br i1 %419, label %437, label %420

420:                                              ; preds = %416
  %421 = load i8, i8* %54, align 1
  %422 = icmp eq i8 %421, 1
  %423 = fcmp olt double %303, 0.000000e+00
  %424 = or i1 %422, %423
  br i1 %424, label %434, label %425

425:                                              ; preds = %420
  %426 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 17, i64 3, i32 2
  %427 = load i32, i32* %426, align 8
  %428 = load i32, i32* %298, align 4
  %429 = mul nsw i32 %428, %427
  %430 = sitofp i32 %429 to double
  %431 = load double, double* %299, align 8
  %432 = fmul double %431, %430
  %433 = fadd double %432, %303
  br label %434

434:                                              ; preds = %425, %420
  %435 = phi double [ -1.000000e+00, %420 ], [ %433, %425 ]
  %436 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 17, i64 3, i32 4
  store double %435, double* %436, align 8
  br label %437

437:                                              ; preds = %434, %416
  %438 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 17, i64 4, i32 1
  %439 = load i32, i32* %438, align 4
  %440 = icmp eq i32 %439, 0
  br i1 %440, label %458, label %441

441:                                              ; preds = %437
  %442 = load i8, i8* %54, align 1
  %443 = icmp eq i8 %442, 1
  %444 = fcmp olt double %303, 0.000000e+00
  %445 = or i1 %443, %444
  br i1 %445, label %455, label %446

446:                                              ; preds = %441
  %447 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 17, i64 4, i32 2
  %448 = load i32, i32* %447, align 8
  %449 = load i32, i32* %298, align 4
  %450 = mul nsw i32 %449, %448
  %451 = sitofp i32 %450 to double
  %452 = load double, double* %299, align 8
  %453 = fmul double %452, %451
  %454 = fadd double %453, %303
  br label %455

455:                                              ; preds = %446, %441
  %456 = phi double [ -1.000000e+00, %441 ], [ %454, %446 ]
  %457 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 17, i64 4, i32 4
  store double %456, double* %457, align 8
  br label %458

458:                                              ; preds = %455, %437
  %459 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 17, i64 5, i32 1
  %460 = load i32, i32* %459, align 4
  %461 = icmp eq i32 %460, 0
  br i1 %461, label %479, label %462

462:                                              ; preds = %458
  %463 = load i8, i8* %54, align 1
  %464 = icmp eq i8 %463, 1
  %465 = fcmp olt double %303, 0.000000e+00
  %466 = or i1 %464, %465
  br i1 %466, label %476, label %467

467:                                              ; preds = %462
  %468 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 17, i64 5, i32 2
  %469 = load i32, i32* %468, align 8
  %470 = load i32, i32* %298, align 4
  %471 = mul nsw i32 %470, %469
  %472 = sitofp i32 %471 to double
  %473 = load double, double* %299, align 8
  %474 = fmul double %473, %472
  %475 = fadd double %474, %303
  br label %476

476:                                              ; preds = %467, %462
  %477 = phi double [ -1.000000e+00, %462 ], [ %475, %467 ]
  %478 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 17, i64 5, i32 4
  store double %477, double* %478, align 8
  br label %479

479:                                              ; preds = %476, %458
  %480 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 17, i64 6, i32 1
  %481 = load i32, i32* %480, align 4
  %482 = icmp eq i32 %481, 0
  br i1 %482, label %500, label %483

483:                                              ; preds = %479
  %484 = load i8, i8* %54, align 1
  %485 = icmp eq i8 %484, 1
  %486 = fcmp olt double %303, 0.000000e+00
  %487 = or i1 %485, %486
  br i1 %487, label %497, label %488

488:                                              ; preds = %483
  %489 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 17, i64 6, i32 2
  %490 = load i32, i32* %489, align 8
  %491 = load i32, i32* %298, align 4
  %492 = mul nsw i32 %491, %490
  %493 = sitofp i32 %492 to double
  %494 = load double, double* %299, align 8
  %495 = fmul double %494, %493
  %496 = fadd double %495, %303
  br label %497

497:                                              ; preds = %488, %483
  %498 = phi double [ -1.000000e+00, %483 ], [ %496, %488 ]
  %499 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 17, i64 6, i32 4
  store double %498, double* %499, align 8
  br label %500

500:                                              ; preds = %497, %479
  %501 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 17, i64 7, i32 1
  %502 = load i32, i32* %501, align 4
  %503 = icmp eq i32 %502, 0
  br i1 %503, label %521, label %504

504:                                              ; preds = %500
  %505 = load i8, i8* %54, align 1
  %506 = icmp eq i8 %505, 1
  %507 = fcmp olt double %303, 0.000000e+00
  %508 = or i1 %506, %507
  br i1 %508, label %518, label %509

509:                                              ; preds = %504
  %510 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 17, i64 7, i32 2
  %511 = load i32, i32* %510, align 8
  %512 = load i32, i32* %298, align 4
  %513 = mul nsw i32 %512, %511
  %514 = sitofp i32 %513 to double
  %515 = load double, double* %299, align 8
  %516 = fmul double %515, %514
  %517 = fadd double %516, %303
  br label %518

518:                                              ; preds = %509, %504
  %519 = phi double [ -1.000000e+00, %504 ], [ %517, %509 ]
  %520 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 17, i64 7, i32 4
  store double %519, double* %520, align 8
  br label %521

521:                                              ; preds = %518, %500
  %522 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 17, i64 8, i32 1
  %523 = load i32, i32* %522, align 4
  %524 = icmp eq i32 %523, 0
  br i1 %524, label %542, label %525

525:                                              ; preds = %521
  %526 = load i8, i8* %54, align 1
  %527 = icmp eq i8 %526, 1
  %528 = fcmp olt double %303, 0.000000e+00
  %529 = or i1 %527, %528
  br i1 %529, label %539, label %530

530:                                              ; preds = %525
  %531 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 17, i64 8, i32 2
  %532 = load i32, i32* %531, align 8
  %533 = load i32, i32* %298, align 4
  %534 = mul nsw i32 %533, %532
  %535 = sitofp i32 %534 to double
  %536 = load double, double* %299, align 8
  %537 = fmul double %536, %535
  %538 = fadd double %537, %303
  br label %539

539:                                              ; preds = %530, %525
  %540 = phi double [ -1.000000e+00, %525 ], [ %538, %530 ]
  %541 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 17, i64 8, i32 4
  store double %540, double* %541, align 8
  br label %542

542:                                              ; preds = %539, %521
  %543 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 17, i64 9, i32 1
  %544 = load i32, i32* %543, align 4
  %545 = icmp eq i32 %544, 0
  br i1 %545, label %325, label %546

546:                                              ; preds = %542
  %547 = load i8, i8* %54, align 1
  %548 = icmp eq i8 %547, 1
  %549 = fcmp olt double %303, 0.000000e+00
  %550 = or i1 %548, %549
  br i1 %550, label %560, label %551

551:                                              ; preds = %546
  %552 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 17, i64 9, i32 2
  %553 = load i32, i32* %552, align 8
  %554 = load i32, i32* %298, align 4
  %555 = mul nsw i32 %554, %553
  %556 = sitofp i32 %555 to double
  %557 = load double, double* %299, align 8
  %558 = fmul double %557, %556
  %559 = fadd double %558, %303
  br label %560

560:                                              ; preds = %551, %546
  %561 = phi double [ -1.000000e+00, %546 ], [ %559, %551 ]
  %562 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %2, i64 0, i32 17, i64 9, i32 4
  store double %561, double* %562, align 8
  br label %325
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc void @update_ref_buffers(%struct.DECODER_MODEL* nocapture, i32, i32) unnamed_addr #5 {
  %4 = sext i32 %1 to i64
  %5 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 17, i64 %4, i32 0
  %6 = and i32 %2, 1
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %20, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 16, i64 0
  %10 = load i32, i32* %9, align 4
  %11 = icmp eq i32 %10, -1
  br i1 %11, label %17, label %12

12:                                               ; preds = %8
  %13 = sext i32 %10 to i64
  %14 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 17, i64 %13, i32 0
  %15 = load i32, i32* %14, align 8
  %16 = add nsw i32 %15, -1
  store i32 %16, i32* %14, align 8
  br label %17

17:                                               ; preds = %8, %12
  store i32 %1, i32* %9, align 4
  %18 = load i32, i32* %5, align 8
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %5, align 8
  br label %20

20:                                               ; preds = %3, %17
  %21 = and i32 %2, 2
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %35, label %23

23:                                               ; preds = %20
  %24 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 16, i64 1
  %25 = load i32, i32* %24, align 4
  %26 = icmp eq i32 %25, -1
  br i1 %26, label %32, label %27

27:                                               ; preds = %23
  %28 = sext i32 %25 to i64
  %29 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 17, i64 %28, i32 0
  %30 = load i32, i32* %29, align 8
  %31 = add nsw i32 %30, -1
  store i32 %31, i32* %29, align 8
  br label %32

32:                                               ; preds = %27, %23
  store i32 %1, i32* %24, align 4
  %33 = load i32, i32* %5, align 8
  %34 = add nsw i32 %33, 1
  store i32 %34, i32* %5, align 8
  br label %35

35:                                               ; preds = %32, %20
  %36 = and i32 %2, 4
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %50, label %38

38:                                               ; preds = %35
  %39 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 16, i64 2
  %40 = load i32, i32* %39, align 4
  %41 = icmp eq i32 %40, -1
  br i1 %41, label %47, label %42

42:                                               ; preds = %38
  %43 = sext i32 %40 to i64
  %44 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 17, i64 %43, i32 0
  %45 = load i32, i32* %44, align 8
  %46 = add nsw i32 %45, -1
  store i32 %46, i32* %44, align 8
  br label %47

47:                                               ; preds = %42, %38
  store i32 %1, i32* %39, align 4
  %48 = load i32, i32* %5, align 8
  %49 = add nsw i32 %48, 1
  store i32 %49, i32* %5, align 8
  br label %50

50:                                               ; preds = %47, %35
  %51 = and i32 %2, 8
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %65, label %53

53:                                               ; preds = %50
  %54 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 16, i64 3
  %55 = load i32, i32* %54, align 4
  %56 = icmp eq i32 %55, -1
  br i1 %56, label %62, label %57

57:                                               ; preds = %53
  %58 = sext i32 %55 to i64
  %59 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 17, i64 %58, i32 0
  %60 = load i32, i32* %59, align 8
  %61 = add nsw i32 %60, -1
  store i32 %61, i32* %59, align 8
  br label %62

62:                                               ; preds = %57, %53
  store i32 %1, i32* %54, align 4
  %63 = load i32, i32* %5, align 8
  %64 = add nsw i32 %63, 1
  store i32 %64, i32* %5, align 8
  br label %65

65:                                               ; preds = %62, %50
  %66 = and i32 %2, 16
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %80, label %68

68:                                               ; preds = %65
  %69 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 16, i64 4
  %70 = load i32, i32* %69, align 4
  %71 = icmp eq i32 %70, -1
  br i1 %71, label %77, label %72

72:                                               ; preds = %68
  %73 = sext i32 %70 to i64
  %74 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 17, i64 %73, i32 0
  %75 = load i32, i32* %74, align 8
  %76 = add nsw i32 %75, -1
  store i32 %76, i32* %74, align 8
  br label %77

77:                                               ; preds = %72, %68
  store i32 %1, i32* %69, align 4
  %78 = load i32, i32* %5, align 8
  %79 = add nsw i32 %78, 1
  store i32 %79, i32* %5, align 8
  br label %80

80:                                               ; preds = %77, %65
  %81 = and i32 %2, 32
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %95, label %83

83:                                               ; preds = %80
  %84 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 16, i64 5
  %85 = load i32, i32* %84, align 4
  %86 = icmp eq i32 %85, -1
  br i1 %86, label %92, label %87

87:                                               ; preds = %83
  %88 = sext i32 %85 to i64
  %89 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 17, i64 %88, i32 0
  %90 = load i32, i32* %89, align 8
  %91 = add nsw i32 %90, -1
  store i32 %91, i32* %89, align 8
  br label %92

92:                                               ; preds = %87, %83
  store i32 %1, i32* %84, align 4
  %93 = load i32, i32* %5, align 8
  %94 = add nsw i32 %93, 1
  store i32 %94, i32* %5, align 8
  br label %95

95:                                               ; preds = %92, %80
  %96 = and i32 %2, 64
  %97 = icmp eq i32 %96, 0
  br i1 %97, label %110, label %98

98:                                               ; preds = %95
  %99 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 16, i64 6
  %100 = load i32, i32* %99, align 4
  %101 = icmp eq i32 %100, -1
  br i1 %101, label %107, label %102

102:                                              ; preds = %98
  %103 = sext i32 %100 to i64
  %104 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 17, i64 %103, i32 0
  %105 = load i32, i32* %104, align 8
  %106 = add nsw i32 %105, -1
  store i32 %106, i32* %104, align 8
  br label %107

107:                                              ; preds = %102, %98
  store i32 %1, i32* %99, align 4
  %108 = load i32, i32* %5, align 8
  %109 = add nsw i32 %108, 1
  store i32 %109, i32* %5, align 8
  br label %110

110:                                              ; preds = %107, %95
  %111 = trunc i32 %2 to i8
  %112 = icmp sgt i8 %111, -1
  br i1 %112, label %125, label %113

113:                                              ; preds = %110
  %114 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 16, i64 7
  %115 = load i32, i32* %114, align 4
  %116 = icmp eq i32 %115, -1
  br i1 %116, label %122, label %117

117:                                              ; preds = %113
  %118 = sext i32 %115 to i64
  %119 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %0, i64 0, i32 17, i64 %118, i32 0
  %120 = load i32, i32* %119, align 8
  %121 = add nsw i32 %120, -1
  store i32 %121, i32* %119, align 8
  br label %122

122:                                              ; preds = %117, %113
  store i32 %1, i32* %114, align 4
  %123 = load i32, i32* %5, align 8
  %124 = add nsw i32 %123, 1
  store i32 %124, i32* %5, align 8
  br label %125

125:                                              ; preds = %122, %110
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_init_level_info(%struct.AV1_COMP* nocapture readonly) local_unnamed_addr #4 {
  %2 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 0
  %3 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 6
  %4 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 3
  br label %6

5:                                                ; preds = %46
  ret void

6:                                                ; preds = %46, %1
  %7 = phi i64 [ 0, %1 ], [ %47, %46 ]
  %8 = load %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %2, align 16
  %9 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %8, i64 0, i32 9, i32 2, i64 %7
  %10 = load %struct.AV1LevelInfo*, %struct.AV1LevelInfo** %9, align 8
  %11 = icmp eq %struct.AV1LevelInfo* %10, null
  br i1 %11, label %46, label %12

12:                                               ; preds = %6
  %13 = bitcast %struct.AV1LevelInfo* %10 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %13, i8 0, i64 59664, i1 false)
  %14 = getelementptr inbounds %struct.AV1LevelInfo, %struct.AV1LevelInfo* %10, i64 0, i32 1, i32 0
  store i8 31, i8* %14, align 8
  %15 = getelementptr inbounds %struct.AV1LevelInfo, %struct.AV1LevelInfo* %10, i64 0, i32 0, i32 3
  %16 = getelementptr inbounds %struct.AV1LevelInfo, %struct.AV1LevelInfo* %10, i64 0, i32 0, i32 7
  store i32 2147483647, i32* %16, align 4
  %17 = bitcast i32* %15 to <4 x i32>*
  store <4 x i32> <i32 2147483647, i32 2147483647, i32 1, i32 2147483647>, <4 x i32>* %17, align 4
  %18 = getelementptr inbounds %struct.AV1LevelInfo, %struct.AV1LevelInfo* %10, i64 0, i32 0, i32 10
  store double 1.000000e+08, double* %18, align 8
  %19 = getelementptr inbounds %struct.AV1LevelInfo, %struct.AV1LevelInfo* %10, i64 0, i32 2, i32 1
  store i32 0, i32* %19, align 8
  %20 = getelementptr inbounds %struct.AV1LevelInfo, %struct.AV1LevelInfo* %10, i64 0, i32 2, i32 2
  store i32 0, i32* %20, align 4
  %21 = load i32, i32* %3, align 16
  %22 = load i32, i32* %4, align 4
  %23 = mul nsw i32 %22, %21
  %24 = trunc i64 %7 to i32
  br label %25

25:                                               ; preds = %43, %12
  %26 = phi i64 [ 0, %12 ], [ %44, %43 ]
  %27 = getelementptr inbounds %struct.AV1LevelInfo, %struct.AV1LevelInfo* %10, i64 0, i32 3, i64 %26
  %28 = getelementptr inbounds [24 x %struct.AV1LevelSpec], [24 x %struct.AV1LevelSpec]* @av1_level_defs, i64 0, i64 %26, i32 2
  %29 = load i32, i32* %28, align 8
  %30 = icmp sgt i32 %21, %29
  br i1 %30, label %39, label %31

31:                                               ; preds = %25
  %32 = getelementptr inbounds [24 x %struct.AV1LevelSpec], [24 x %struct.AV1LevelSpec]* @av1_level_defs, i64 0, i64 %26, i32 3
  %33 = load i32, i32* %32, align 4
  %34 = icmp sgt i32 %22, %33
  br i1 %34, label %39, label %35

35:                                               ; preds = %31
  %36 = getelementptr inbounds [24 x %struct.AV1LevelSpec], [24 x %struct.AV1LevelSpec]* @av1_level_defs, i64 0, i64 %26, i32 1
  %37 = load i32, i32* %36, align 4
  %38 = icmp sgt i32 %23, %37
  br i1 %38, label %39, label %41

39:                                               ; preds = %35, %31, %25
  %40 = getelementptr inbounds %struct.DECODER_MODEL, %struct.DECODER_MODEL* %27, i64 0, i32 0
  store i8 7, i8* %40, align 8
  br label %43

41:                                               ; preds = %35
  %42 = trunc i64 %26 to i8
  tail call void @av1_decoder_model_init(%struct.AV1_COMP* %0, i8 zeroext %42, i32 %24, %struct.DECODER_MODEL* %27)
  br label %43

43:                                               ; preds = %41, %39
  %44 = add nuw nsw i64 %26, 1
  %45 = icmp eq i64 %44, 24
  br i1 %45, label %46, label %25

46:                                               ; preds = %43, %6
  %47 = add nuw nsw i64 %7, 1
  %48 = icmp eq i64 %47, 32
  br i1 %48, label %5, label %6
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #6

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden double @av1_get_min_cr_for_level(i8 zeroext, i32, i32) local_unnamed_addr #0 {
  %4 = zext i8 %0 to i64
  %5 = icmp eq i32 %2, 0
  br i1 %5, label %6, label %26

6:                                                ; preds = %3
  %7 = getelementptr inbounds [24 x %struct.AV1LevelSpec], [24 x %struct.AV1LevelSpec]* @av1_level_defs, i64 0, i64 %4, i32 9
  %8 = load i64, i64* %7, align 8
  %9 = lshr i64 51, %4
  %10 = and i64 %9, 1
  %11 = icmp ne i64 %10, 0
  %12 = icmp eq i32 %1, 0
  %13 = or i1 %12, %11
  %14 = getelementptr inbounds [24 x %struct.AV1LevelSpec], [24 x %struct.AV1LevelSpec]* @av1_level_defs, i64 0, i64 %4, i32 13
  %15 = getelementptr inbounds [24 x %struct.AV1LevelSpec], [24 x %struct.AV1LevelSpec]* @av1_level_defs, i64 0, i64 %4, i32 12
  %16 = select i1 %13, double* %15, double* %14
  %17 = load double, double* %16, align 8
  %18 = sitofp i64 %8 to double
  %19 = getelementptr inbounds [24 x %struct.AV1LevelSpec], [24 x %struct.AV1LevelSpec]* @av1_level_defs, i64 0, i64 %4, i32 8
  %20 = load i64, i64* %19, align 16
  %21 = sitofp i64 %20 to double
  %22 = fdiv double %18, %21
  %23 = fmul double %17, %22
  %24 = fcmp ogt double %23, 8.000000e-01
  %25 = select i1 %24, double %23, double 8.000000e-01
  br label %26

26:                                               ; preds = %3, %6
  %27 = phi double [ 8.000000e-01, %3 ], [ %25, %6 ]
  ret double %27
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_update_level_info(%struct.AV1_COMP*, i64, i64, i64) local_unnamed_addr #4 {
  %5 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8
  %6 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 0
  %7 = load %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %6, align 16
  %8 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 6
  %9 = load i32, i32* %8, align 16
  %10 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 2
  %11 = load i32, i32* %10, align 16
  %12 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 3
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 38, i32 0
  %15 = load i32, i32* %14, align 8
  %16 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 38, i32 1
  %17 = load i32, i32* %16, align 4
  %18 = mul nsw i32 %17, %15
  %19 = mul nsw i32 %13, %9
  %20 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 71
  %21 = load i32, i32* %20, align 16
  %22 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 17
  %23 = load i32, i32* %22, align 8
  %24 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 19
  %25 = load i32, i32* %24, align 16
  %26 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 55
  %27 = load %struct.TileDataEnc*, %struct.TileDataEnc** %26, align 8
  %28 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 8
  %29 = load i8, i8* %28, align 8
  %30 = zext i8 %29 to i32
  %31 = icmp sgt i32 %17, 0
  br i1 %31, label %32, label %106

32:                                               ; preds = %4
  %33 = icmp sgt i32 %15, 0
  %34 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 4
  %35 = zext i32 %15 to i64
  %36 = zext i32 %17 to i64
  %37 = sext i32 %15 to i64
  %38 = icmp eq i32 %11, %9
  br label %39

39:                                               ; preds = %49, %32
  %40 = phi i64 [ %55, %49 ], [ 0, %32 ]
  %41 = phi i32 [ %50, %49 ], [ 0, %32 ]
  %42 = phi i32 [ %51, %49 ], [ 2147483647, %32 ]
  %43 = phi i32 [ %52, %49 ], [ 2147483647, %32 ]
  %44 = phi i32 [ %53, %49 ], [ 0, %32 ]
  %45 = phi i32 [ %54, %49 ], [ 1, %32 ]
  br i1 %33, label %46, label %49

46:                                               ; preds = %39
  %47 = mul nsw i64 %40, %37
  %48 = load i32, i32* %34, align 16
  br label %57

49:                                               ; preds = %102, %39
  %50 = phi i32 [ %41, %39 ], [ %79, %102 ]
  %51 = phi i32 [ %42, %39 ], [ %89, %102 ]
  %52 = phi i32 [ %43, %39 ], [ %91, %102 ]
  %53 = phi i32 [ %44, %39 ], [ %83, %102 ]
  %54 = phi i32 [ %45, %39 ], [ %103, %102 ]
  %55 = add nuw nsw i64 %40, 1
  %56 = icmp eq i64 %55, %36
  br i1 %56, label %106, label %39

57:                                               ; preds = %46, %102
  %58 = phi i64 [ 0, %46 ], [ %104, %102 ]
  %59 = phi i32 [ %41, %46 ], [ %79, %102 ]
  %60 = phi i32 [ %42, %46 ], [ %89, %102 ]
  %61 = phi i32 [ %43, %46 ], [ %91, %102 ]
  %62 = phi i32 [ %44, %46 ], [ %83, %102 ]
  %63 = phi i32 [ %45, %46 ], [ %103, %102 ]
  %64 = add nsw i64 %58, %47
  %65 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %27, i64 %64, i32 0, i32 3
  %66 = load i32, i32* %65, align 4
  %67 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %27, i64 %64, i32 0, i32 2
  %68 = load i32, i32* %67, align 4
  %69 = sub nsw i32 %66, %68
  %70 = shl nsw i32 %69, 2
  %71 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %27, i64 %64, i32 0, i32 1
  %72 = load i32, i32* %71, align 4
  %73 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %27, i64 %64, i32 0, i32 0
  %74 = load i32, i32* %73, align 4
  %75 = sub nsw i32 %72, %74
  %76 = shl nsw i32 %75, 2
  %77 = mul nsw i32 %76, %70
  %78 = icmp sgt i32 %59, %77
  %79 = select i1 %78, i32 %59, i32 %77
  %80 = mul nsw i32 %70, %30
  %81 = sdiv i32 %80, 8
  %82 = icmp sgt i32 %62, %81
  %83 = select i1 %82, i32 %62, i32 %81
  %84 = shl nsw i32 %68, 2
  %85 = sub nsw i32 %11, %84
  %86 = shl nsw i32 %74, 2
  %87 = sub nsw i32 %13, %86
  %88 = icmp slt i32 %60, %85
  %89 = select i1 %88, i32 %60, i32 %85
  %90 = icmp slt i32 %61, %87
  %91 = select i1 %90, i32 %61, i32 %87
  %92 = icmp eq i32 %66, %48
  br i1 %92, label %102, label %93

93:                                               ; preds = %57
  br i1 %38, label %98, label %94

94:                                               ; preds = %93
  %95 = icmp sgt i32 %69, 31
  %96 = zext i1 %95 to i32
  %97 = and i32 %63, %96
  br label %102

98:                                               ; preds = %93
  %99 = icmp sgt i32 %69, 15
  %100 = zext i1 %99 to i32
  %101 = and i32 %63, %100
  br label %102

102:                                              ; preds = %98, %94, %57
  %103 = phi i32 [ %63, %57 ], [ %101, %98 ], [ %97, %94 ]
  %104 = add nuw nsw i64 %58, 1
  %105 = icmp eq i64 %104, %35
  br i1 %105, label %49, label %57

106:                                              ; preds = %49, %4
  %107 = phi i32 [ 0, %4 ], [ %50, %49 ]
  %108 = phi i32 [ 2147483647, %4 ], [ %51, %49 ]
  %109 = phi i32 [ 2147483647, %4 ], [ %52, %49 ]
  %110 = phi i32 [ 0, %4 ], [ %53, %49 ]
  %111 = phi i32 [ 1, %4 ], [ %54, %49 ]
  %112 = tail call double @av1_get_compression_ratio(%struct.AV1Common* %5, i64 %1) #9
  %113 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 35
  %114 = load %struct.SequenceHeader*, %struct.SequenceHeader** %113, align 16
  %115 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %114, i64 0, i32 24
  %116 = load i8, i8* %115, align 1
  %117 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %114, i64 0, i32 12
  %118 = load i8, i8* %117, align 1
  %119 = zext i8 %118 to i32
  %120 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %114, i64 0, i32 37
  %121 = load i32, i32* %120, align 8
  %122 = icmp slt i32 %121, 0
  br i1 %122, label %139, label %123

123:                                              ; preds = %106
  %124 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 48
  %125 = load i32, i32* %124, align 8
  %126 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 47
  %127 = load i32, i32* %126, align 4
  %128 = shl i32 1, %127
  %129 = add nsw i32 %125, 8
  %130 = shl i32 1, %129
  %131 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %7, i64 0, i32 9, i32 1
  %132 = uitofp i64 %1 to double
  %133 = icmp eq i32 %23, 0
  %134 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 35, i32 1
  %135 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 35, i32 0
  %136 = shl i64 %1, 3
  %137 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 1
  %138 = or i32 %128, %130
  br label %140

139:                                              ; preds = %402, %106
  ret void

140:                                              ; preds = %402, %123
  %141 = phi i64 [ %403, %402 ], [ 0, %123 ]
  %142 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %114, i64 0, i32 38, i64 %141
  %143 = load i32, i32* %142, align 4
  %144 = icmp eq i32 %143, 0
  %145 = and i32 %143, %138
  %146 = icmp eq i32 %145, %138
  %147 = or i1 %144, %146
  br i1 %147, label %148, label %402

148:                                              ; preds = %140
  %149 = load i32, i32* %131, align 8
  %150 = trunc i64 %141 to i32
  %151 = shl i32 1, %150
  %152 = and i32 %149, %151
  %153 = icmp eq i32 %152, 0
  br i1 %153, label %402, label %154

154:                                              ; preds = %148
  %155 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %7, i64 0, i32 9, i32 2, i64 %141
  %156 = load %struct.AV1LevelInfo*, %struct.AV1LevelInfo** %155, align 8
  %157 = getelementptr inbounds %struct.AV1LevelInfo, %struct.AV1LevelInfo* %156, i64 0, i32 0, i32 1
  %158 = load i32, i32* %157, align 4
  %159 = icmp sgt i32 %158, %107
  %160 = select i1 %159, i32 %158, i32 %107
  store i32 %160, i32* %157, align 4
  %161 = getelementptr inbounds %struct.AV1LevelInfo, %struct.AV1LevelInfo* %156, i64 0, i32 0, i32 2
  %162 = load i32, i32* %161, align 8
  %163 = icmp sgt i32 %162, %110
  %164 = select i1 %163, i32 %162, i32 %110
  store i32 %164, i32* %161, align 8
  %165 = getelementptr inbounds %struct.AV1LevelInfo, %struct.AV1LevelInfo* %156, i64 0, i32 0, i32 3
  %166 = load i32, i32* %165, align 4
  %167 = icmp slt i32 %166, %108
  %168 = select i1 %167, i32 %166, i32 %108
  store i32 %168, i32* %165, align 4
  %169 = getelementptr inbounds %struct.AV1LevelInfo, %struct.AV1LevelInfo* %156, i64 0, i32 0, i32 4
  %170 = load i32, i32* %169, align 8
  %171 = icmp slt i32 %170, %109
  %172 = select i1 %171, i32 %170, i32 %109
  store i32 %172, i32* %169, align 8
  %173 = getelementptr inbounds %struct.AV1LevelInfo, %struct.AV1LevelInfo* %156, i64 0, i32 0, i32 5
  %174 = load i32, i32* %173, align 4
  %175 = and i32 %174, %111
  store i32 %175, i32* %173, align 4
  %176 = getelementptr inbounds %struct.AV1LevelInfo, %struct.AV1LevelInfo* %156, i64 0, i32 0, i32 6
  %177 = load i32, i32* %176, align 8
  %178 = icmp slt i32 %177, %11
  %179 = select i1 %178, i32 %177, i32 %11
  store i32 %179, i32* %176, align 8
  %180 = getelementptr inbounds %struct.AV1LevelInfo, %struct.AV1LevelInfo* %156, i64 0, i32 0, i32 7
  %181 = load i32, i32* %180, align 4
  %182 = icmp slt i32 %181, %13
  %183 = select i1 %182, i32 %181, i32 %13
  store i32 %183, i32* %180, align 4
  %184 = getelementptr inbounds %struct.AV1LevelInfo, %struct.AV1LevelInfo* %156, i64 0, i32 0, i32 10
  %185 = load double, double* %184, align 8
  %186 = fcmp olt double %185, %112
  %187 = select i1 %186, double %185, double %112
  store double %187, double* %184, align 8
  %188 = getelementptr inbounds %struct.AV1LevelInfo, %struct.AV1LevelInfo* %156, i64 0, i32 0, i32 8
  %189 = load double, double* %188, align 8
  %190 = fadd double %189, %132
  store double %190, double* %188, align 8
  %191 = getelementptr inbounds %struct.AV1LevelInfo, %struct.AV1LevelInfo* %156, i64 0, i32 1, i32 1
  %192 = load i32, i32* %191, align 4
  %193 = icmp sgt i32 %192, %19
  %194 = select i1 %193, i32 %192, i32 %19
  store i32 %194, i32* %191, align 4
  %195 = getelementptr inbounds %struct.AV1LevelInfo, %struct.AV1LevelInfo* %156, i64 0, i32 1, i32 2
  %196 = load i32, i32* %195, align 8
  %197 = load i32, i32* %8, align 16
  %198 = icmp sgt i32 %196, %197
  %199 = select i1 %198, i32 %196, i32 %197
  store i32 %199, i32* %195, align 8
  %200 = getelementptr inbounds %struct.AV1LevelInfo, %struct.AV1LevelInfo* %156, i64 0, i32 1, i32 3
  %201 = load i32, i32* %200, align 4
  %202 = icmp sgt i32 %201, %13
  %203 = select i1 %202, i32 %201, i32 %13
  store i32 %203, i32* %200, align 4
  %204 = getelementptr inbounds %struct.AV1LevelInfo, %struct.AV1LevelInfo* %156, i64 0, i32 1, i32 7
  %205 = load i32, i32* %204, align 4
  %206 = icmp sgt i32 %205, %15
  %207 = select i1 %206, i32 %205, i32 %15
  store i32 %207, i32* %204, align 4
  %208 = getelementptr inbounds %struct.AV1LevelInfo, %struct.AV1LevelInfo* %156, i64 0, i32 1, i32 6
  %209 = load i32, i32* %208, align 8
  %210 = icmp sgt i32 %209, %18
  %211 = select i1 %210, i32 %209, i32 %18
  store i32 %211, i32* %208, align 8
  %212 = getelementptr inbounds %struct.AV1LevelInfo, %struct.AV1LevelInfo* %156, i64 0, i32 2, i32 1
  %213 = load i32, i32* %212, align 8
  %214 = icmp slt i32 %213, 256
  br i1 %214, label %215, label %219

215:                                              ; preds = %154
  %216 = add nsw i32 %213, 1
  store i32 %216, i32* %212, align 8
  %217 = getelementptr inbounds %struct.AV1LevelInfo, %struct.AV1LevelInfo* %156, i64 0, i32 2, i32 2
  %218 = load i32, i32* %217, align 4
  br label %224

219:                                              ; preds = %154
  %220 = getelementptr inbounds %struct.AV1LevelInfo, %struct.AV1LevelInfo* %156, i64 0, i32 2, i32 2
  %221 = load i32, i32* %220, align 4
  %222 = add nsw i32 %221, 1
  %223 = srem i32 %222, 256
  store i32 %223, i32* %220, align 4
  br label %224

224:                                              ; preds = %215, %219
  %225 = phi i32 [ %213, %219 ], [ %216, %215 ]
  %226 = phi i32 [ %223, %219 ], [ %218, %215 ]
  %227 = add nsw i32 %225, -1
  %228 = add i32 %227, %226
  %229 = srem i32 %228, 256
  %230 = sext i32 %229 to i64
  %231 = getelementptr inbounds %struct.AV1LevelInfo, %struct.AV1LevelInfo* %156, i64 0, i32 2, i32 0, i64 %230, i32 0
  store i64 %2, i64* %231, align 8
  %232 = getelementptr inbounds %struct.AV1LevelInfo, %struct.AV1LevelInfo* %156, i64 0, i32 2, i32 0, i64 %230, i32 1
  store i64 %3, i64* %232, align 8
  %233 = getelementptr inbounds %struct.AV1LevelInfo, %struct.AV1LevelInfo* %156, i64 0, i32 2, i32 0, i64 %230, i32 2
  store i64 %1, i64* %233, align 8
  %234 = getelementptr inbounds %struct.AV1LevelInfo, %struct.AV1LevelInfo* %156, i64 0, i32 2, i32 0, i64 %230, i32 3
  store i32 %19, i32* %234, align 8
  %235 = getelementptr inbounds %struct.AV1LevelInfo, %struct.AV1LevelInfo* %156, i64 0, i32 2, i32 0, i64 %230, i32 4
  store i32 %21, i32* %235, align 4
  %236 = getelementptr inbounds %struct.AV1LevelInfo, %struct.AV1LevelInfo* %156, i64 0, i32 2, i32 0, i64 %230, i32 5
  store i32 %18, i32* %236, align 8
  %237 = getelementptr inbounds %struct.AV1LevelInfo, %struct.AV1LevelInfo* %156, i64 0, i32 2, i32 0, i64 %230, i32 6
  store i32 %23, i32* %237, align 4
  %238 = getelementptr inbounds %struct.AV1LevelInfo, %struct.AV1LevelInfo* %156, i64 0, i32 2, i32 0, i64 %230, i32 7
  store i32 %25, i32* %238, align 8
  br i1 %133, label %359, label %239

239:                                              ; preds = %224
  %240 = getelementptr inbounds %struct.AV1LevelInfo, %struct.AV1LevelInfo* %156, i64 0, i32 2, i32 2
  %241 = load i32, i32* %240, align 4
  %242 = load i32, i32* %212, align 8
  %243 = add i32 %241, -1
  %244 = add i32 %243, %242
  %245 = srem i32 %244, 256
  %246 = sext i32 %245 to i64
  %247 = getelementptr inbounds %struct.AV1LevelInfo, %struct.AV1LevelInfo* %156, i64 0, i32 2, i32 0, i64 %246, i32 1
  %248 = load i64, i64* %247, align 8
  %249 = icmp sgt i64 %248, 10000000
  %250 = select i1 %249, i64 %248, i64 10000000
  %251 = add nsw i64 %250, -10000000
  %252 = add nsw i32 %242, -2
  %253 = icmp sgt i32 %252, -1
  br i1 %253, label %254, label %273

254:                                              ; preds = %239, %269
  %255 = phi i32 [ %270, %269 ], [ %252, %239 ]
  %256 = phi i32 [ %260, %269 ], [ %245, %239 ]
  %257 = phi i32 [ %271, %269 ], [ 1, %239 ]
  %258 = add nsw i32 %256, -1
  %259 = icmp slt i32 %256, 1
  %260 = select i1 %259, i32 255, i32 %258
  %261 = sext i32 %260 to i64
  %262 = getelementptr inbounds %struct.AV1LevelInfo, %struct.AV1LevelInfo* %156, i64 0, i32 2, i32 0, i64 %261, i32 6
  %263 = load i32, i32* %262, align 4
  %264 = icmp eq i32 %263, 0
  br i1 %264, label %269, label %265

265:                                              ; preds = %254
  %266 = getelementptr inbounds %struct.AV1LevelInfo, %struct.AV1LevelInfo* %156, i64 0, i32 2, i32 0, i64 %261, i32 0
  %267 = load i64, i64* %266, align 8
  %268 = icmp slt i64 %267, %251
  br i1 %268, label %273, label %269

269:                                              ; preds = %265, %254
  %270 = add nsw i32 %255, -1
  %271 = add nuw nsw i32 %257, 1
  %272 = icmp sgt i32 %255, 0
  br i1 %272, label %254, label %273

273:                                              ; preds = %265, %269, %239
  %274 = phi i32 [ 1, %239 ], [ %271, %269 ], [ %257, %265 ]
  %275 = icmp slt i32 %242, %274
  %276 = select i1 %275, i32 %242, i32 %274
  %277 = icmp sgt i32 %276, 0
  br i1 %277, label %281, label %325

278:                                              ; preds = %312
  %279 = trunc i64 %319 to i32
  %280 = shl i32 %279, 3
  br label %325

281:                                              ; preds = %273, %312
  %282 = phi i32 [ %323, %312 ], [ 0, %273 ]
  %283 = phi i64 [ %319, %312 ], [ 0, %273 ]
  %284 = phi i64 [ %303, %312 ], [ 0, %273 ]
  %285 = phi i64 [ %313, %312 ], [ 0, %273 ]
  %286 = phi i32 [ %316, %312 ], [ 0, %273 ]
  %287 = phi i32 [ %302, %312 ], [ 0, %273 ]
  %288 = phi i32 [ %322, %312 ], [ %245, %273 ]
  %289 = sext i32 %288 to i64
  %290 = getelementptr inbounds %struct.AV1LevelInfo, %struct.AV1LevelInfo* %156, i64 0, i32 2, i32 0, i64 %289, i32 7
  %291 = load i32, i32* %290, align 8
  %292 = icmp eq i32 %291, 0
  br i1 %292, label %293, label %301

293:                                              ; preds = %281
  %294 = getelementptr inbounds %struct.AV1LevelInfo, %struct.AV1LevelInfo* %156, i64 0, i32 2, i32 0, i64 %289, i32 4
  %295 = load i32, i32* %294, align 4
  %296 = add nsw i32 %295, %287
  %297 = getelementptr inbounds %struct.AV1LevelInfo, %struct.AV1LevelInfo* %156, i64 0, i32 2, i32 0, i64 %289, i32 3
  %298 = load i32, i32* %297, align 8
  %299 = sext i32 %298 to i64
  %300 = add nsw i64 %284, %299
  br label %301

301:                                              ; preds = %293, %281
  %302 = phi i32 [ %287, %281 ], [ %296, %293 ]
  %303 = phi i64 [ %284, %281 ], [ %300, %293 ]
  %304 = getelementptr inbounds %struct.AV1LevelInfo, %struct.AV1LevelInfo* %156, i64 0, i32 2, i32 0, i64 %289, i32 6
  %305 = load i32, i32* %304, align 4
  %306 = icmp eq i32 %305, 0
  br i1 %306, label %312, label %307

307:                                              ; preds = %301
  %308 = getelementptr inbounds %struct.AV1LevelInfo, %struct.AV1LevelInfo* %156, i64 0, i32 2, i32 0, i64 %289, i32 3
  %309 = load i32, i32* %308, align 8
  %310 = sext i32 %309 to i64
  %311 = add nsw i64 %285, %310
  br label %312

312:                                              ; preds = %307, %301
  %313 = phi i64 [ %311, %307 ], [ %285, %301 ]
  %314 = getelementptr inbounds %struct.AV1LevelInfo, %struct.AV1LevelInfo* %156, i64 0, i32 2, i32 0, i64 %289, i32 5
  %315 = load i32, i32* %314, align 8
  %316 = add nsw i32 %315, %286
  %317 = getelementptr inbounds %struct.AV1LevelInfo, %struct.AV1LevelInfo* %156, i64 0, i32 2, i32 0, i64 %289, i32 2
  %318 = load i64, i64* %317, align 8
  %319 = add i64 %318, %283
  %320 = add nsw i32 %288, -1
  %321 = icmp slt i32 %288, 1
  %322 = select i1 %321, i32 255, i32 %320
  %323 = add nuw nsw i32 %282, 1
  %324 = icmp slt i32 %323, %276
  br i1 %324, label %281, label %278

325:                                              ; preds = %273, %278
  %326 = phi i32 [ 0, %273 ], [ %302, %278 ]
  %327 = phi i32 [ 0, %273 ], [ %316, %278 ]
  %328 = phi i64 [ 0, %273 ], [ %313, %278 ]
  %329 = phi i64 [ 0, %273 ], [ %303, %278 ]
  %330 = phi i32 [ 0, %273 ], [ %280, %278 ]
  %331 = getelementptr inbounds %struct.AV1LevelInfo, %struct.AV1LevelInfo* %156, i64 0, i32 1, i32 4
  %332 = load i32, i32* %331, align 8
  %333 = icmp sgt i32 %332, %326
  %334 = select i1 %333, i32 %332, i32 %326
  store i32 %334, i32* %331, align 8
  %335 = getelementptr inbounds %struct.AV1LevelInfo, %struct.AV1LevelInfo* %156, i64 0, i32 1, i32 8
  %336 = load i64, i64* %335, align 8
  %337 = icmp sgt i64 %336, %328
  %338 = select i1 %337, i64 %336, i64 %328
  store i64 %338, i64* %335, align 8
  %339 = getelementptr inbounds %struct.AV1LevelInfo, %struct.AV1LevelInfo* %156, i64 0, i32 1, i32 9
  %340 = load i64, i64* %339, align 8
  %341 = icmp sgt i64 %340, %329
  %342 = select i1 %341, i64 %340, i64 %329
  store i64 %342, i64* %339, align 8
  %343 = getelementptr inbounds %struct.AV1LevelInfo, %struct.AV1LevelInfo* %156, i64 0, i32 1, i32 5
  %344 = load i32, i32* %343, align 4
  %345 = icmp sgt i32 %344, %327
  %346 = select i1 %345, i32 %344, i32 %327
  store i32 %346, i32* %343, align 4
  %347 = getelementptr inbounds %struct.AV1LevelInfo, %struct.AV1LevelInfo* %156, i64 0, i32 0, i32 0
  %348 = load i32, i32* %347, align 8
  %349 = icmp sgt i32 %348, %330
  %350 = select i1 %349, i32 %348, i32 %330
  store i32 %350, i32* %347, align 8
  %351 = load i64, i64* %134, align 8
  %352 = load i64, i64* %135, align 8
  %353 = sub nsw i64 %351, %352
  %354 = sitofp i64 %353 to double
  %355 = fdiv double %354, 1.000000e+07
  %356 = getelementptr inbounds %struct.AV1LevelInfo, %struct.AV1LevelInfo* %156, i64 0, i32 0, i32 9
  %357 = load double, double* %356, align 8
  %358 = fadd double %357, %355
  store double %358, double* %356, align 8
  br label %359

359:                                              ; preds = %224, %325
  %360 = getelementptr inbounds %struct.AV1LevelInfo, %struct.AV1LevelInfo* %156, i64 0, i32 3, i64 0
  tail call void @av1_decoder_model_process_frame(%struct.AV1_COMP* %0, i64 %136, %struct.DECODER_MODEL* %360)
  %361 = getelementptr inbounds %struct.AV1LevelInfo, %struct.AV1LevelInfo* %156, i64 0, i32 3, i64 1
  tail call void @av1_decoder_model_process_frame(%struct.AV1_COMP* %0, i64 %136, %struct.DECODER_MODEL* %361)
  %362 = getelementptr inbounds %struct.AV1LevelInfo, %struct.AV1LevelInfo* %156, i64 0, i32 3, i64 2
  tail call void @av1_decoder_model_process_frame(%struct.AV1_COMP* %0, i64 %136, %struct.DECODER_MODEL* %362)
  %363 = getelementptr inbounds %struct.AV1LevelInfo, %struct.AV1LevelInfo* %156, i64 0, i32 3, i64 3
  tail call void @av1_decoder_model_process_frame(%struct.AV1_COMP* %0, i64 %136, %struct.DECODER_MODEL* %363)
  %364 = getelementptr inbounds %struct.AV1LevelInfo, %struct.AV1LevelInfo* %156, i64 0, i32 3, i64 4
  tail call void @av1_decoder_model_process_frame(%struct.AV1_COMP* %0, i64 %136, %struct.DECODER_MODEL* %364)
  %365 = getelementptr inbounds %struct.AV1LevelInfo, %struct.AV1LevelInfo* %156, i64 0, i32 3, i64 5
  tail call void @av1_decoder_model_process_frame(%struct.AV1_COMP* %0, i64 %136, %struct.DECODER_MODEL* %365)
  %366 = getelementptr inbounds %struct.AV1LevelInfo, %struct.AV1LevelInfo* %156, i64 0, i32 3, i64 6
  tail call void @av1_decoder_model_process_frame(%struct.AV1_COMP* %0, i64 %136, %struct.DECODER_MODEL* %366)
  %367 = getelementptr inbounds %struct.AV1LevelInfo, %struct.AV1LevelInfo* %156, i64 0, i32 3, i64 7
  tail call void @av1_decoder_model_process_frame(%struct.AV1_COMP* %0, i64 %136, %struct.DECODER_MODEL* %367)
  %368 = getelementptr inbounds %struct.AV1LevelInfo, %struct.AV1LevelInfo* %156, i64 0, i32 3, i64 8
  tail call void @av1_decoder_model_process_frame(%struct.AV1_COMP* %0, i64 %136, %struct.DECODER_MODEL* %368)
  %369 = getelementptr inbounds %struct.AV1LevelInfo, %struct.AV1LevelInfo* %156, i64 0, i32 3, i64 9
  tail call void @av1_decoder_model_process_frame(%struct.AV1_COMP* %0, i64 %136, %struct.DECODER_MODEL* %369)
  %370 = getelementptr inbounds %struct.AV1LevelInfo, %struct.AV1LevelInfo* %156, i64 0, i32 3, i64 10
  tail call void @av1_decoder_model_process_frame(%struct.AV1_COMP* %0, i64 %136, %struct.DECODER_MODEL* %370)
  %371 = getelementptr inbounds %struct.AV1LevelInfo, %struct.AV1LevelInfo* %156, i64 0, i32 3, i64 11
  tail call void @av1_decoder_model_process_frame(%struct.AV1_COMP* %0, i64 %136, %struct.DECODER_MODEL* %371)
  %372 = getelementptr inbounds %struct.AV1LevelInfo, %struct.AV1LevelInfo* %156, i64 0, i32 3, i64 12
  tail call void @av1_decoder_model_process_frame(%struct.AV1_COMP* %0, i64 %136, %struct.DECODER_MODEL* %372)
  %373 = getelementptr inbounds %struct.AV1LevelInfo, %struct.AV1LevelInfo* %156, i64 0, i32 3, i64 13
  tail call void @av1_decoder_model_process_frame(%struct.AV1_COMP* %0, i64 %136, %struct.DECODER_MODEL* %373)
  %374 = getelementptr inbounds %struct.AV1LevelInfo, %struct.AV1LevelInfo* %156, i64 0, i32 3, i64 14
  tail call void @av1_decoder_model_process_frame(%struct.AV1_COMP* %0, i64 %136, %struct.DECODER_MODEL* %374)
  %375 = getelementptr inbounds %struct.AV1LevelInfo, %struct.AV1LevelInfo* %156, i64 0, i32 3, i64 15
  tail call void @av1_decoder_model_process_frame(%struct.AV1_COMP* %0, i64 %136, %struct.DECODER_MODEL* %375)
  %376 = getelementptr inbounds %struct.AV1LevelInfo, %struct.AV1LevelInfo* %156, i64 0, i32 3, i64 16
  tail call void @av1_decoder_model_process_frame(%struct.AV1_COMP* %0, i64 %136, %struct.DECODER_MODEL* %376)
  %377 = getelementptr inbounds %struct.AV1LevelInfo, %struct.AV1LevelInfo* %156, i64 0, i32 3, i64 17
  tail call void @av1_decoder_model_process_frame(%struct.AV1_COMP* %0, i64 %136, %struct.DECODER_MODEL* %377)
  %378 = getelementptr inbounds %struct.AV1LevelInfo, %struct.AV1LevelInfo* %156, i64 0, i32 3, i64 18
  tail call void @av1_decoder_model_process_frame(%struct.AV1_COMP* %0, i64 %136, %struct.DECODER_MODEL* %378)
  %379 = getelementptr inbounds %struct.AV1LevelInfo, %struct.AV1LevelInfo* %156, i64 0, i32 3, i64 19
  tail call void @av1_decoder_model_process_frame(%struct.AV1_COMP* %0, i64 %136, %struct.DECODER_MODEL* %379)
  %380 = getelementptr inbounds %struct.AV1LevelInfo, %struct.AV1LevelInfo* %156, i64 0, i32 3, i64 20
  tail call void @av1_decoder_model_process_frame(%struct.AV1_COMP* %0, i64 %136, %struct.DECODER_MODEL* %380)
  %381 = getelementptr inbounds %struct.AV1LevelInfo, %struct.AV1LevelInfo* %156, i64 0, i32 3, i64 21
  tail call void @av1_decoder_model_process_frame(%struct.AV1_COMP* %0, i64 %136, %struct.DECODER_MODEL* %381)
  %382 = getelementptr inbounds %struct.AV1LevelInfo, %struct.AV1LevelInfo* %156, i64 0, i32 3, i64 22
  tail call void @av1_decoder_model_process_frame(%struct.AV1_COMP* %0, i64 %136, %struct.DECODER_MODEL* %382)
  %383 = getelementptr inbounds %struct.AV1LevelInfo, %struct.AV1LevelInfo* %156, i64 0, i32 3, i64 23
  tail call void @av1_decoder_model_process_frame(%struct.AV1_COMP* %0, i64 %136, %struct.DECODER_MODEL* %383)
  %384 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %7, i64 0, i32 9, i32 0, i64 %141
  %385 = load i8, i8* %384, align 1
  %386 = zext i8 %385 to i32
  %387 = icmp ult i8 %385, 24
  br i1 %387, label %388, label %402

388:                                              ; preds = %359
  %389 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %114, i64 0, i32 45, i64 %141
  %390 = load i8, i8* %389, align 1
  %391 = zext i8 %390 to i32
  %392 = tail call fastcc i32 @check_level_constraints(%struct.AV1LevelInfo* %156, i8 zeroext %385, i32 %391, i32 %119, i8 signext %116, i32 0)
  %393 = icmp eq i32 %392, 21
  br i1 %393, label %402, label %394

394:                                              ; preds = %388
  %395 = lshr i32 %386, 2
  %396 = add nuw nsw i32 %395, 2
  %397 = and i32 %386, 3
  %398 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %137, align 8
  %399 = zext i32 %392 to i64
  %400 = getelementptr inbounds [20 x i8*], [20 x i8*]* @level_fail_messages, i64 0, i64 %399
  %401 = load i8*, i8** %400, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %398, i32 1, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.2, i64 0, i64 0), i32 %396, i32 %397, i8* %401) #9
  br label %402

402:                                              ; preds = %140, %359, %388, %394, %148
  %403 = add nuw nsw i64 %141, 1
  %404 = load i32, i32* %120, align 8
  %405 = sext i32 %404 to i64
  %406 = icmp slt i64 %141, %405
  br i1 %406, label %140, label %139
}

declare double @av1_get_compression_ratio(%struct.AV1Common*, i64) local_unnamed_addr #7

; Function Attrs: nounwind readonly ssp uwtable
define internal fastcc i32 @check_level_constraints(%struct.AV1LevelInfo* nocapture readonly, i8 zeroext, i32, i32, i8 signext, i32) unnamed_addr #8 {
  %7 = zext i8 %1 to i64
  %8 = getelementptr inbounds %struct.AV1LevelInfo, %struct.AV1LevelInfo* %0, i64 0, i32 3, i64 %7, i32 0
  %9 = load i8, i8* %8, align 8
  switch i8 %9, label %146 [
    i8 0, label %10
    i8 7, label %10
  ]

10:                                               ; preds = %6, %6
  %11 = getelementptr inbounds [24 x %struct.AV1LevelSpec], [24 x %struct.AV1LevelSpec]* @av1_level_defs, i64 0, i64 %7
  %12 = getelementptr inbounds %struct.AV1LevelInfo, %struct.AV1LevelInfo* %0, i64 0, i32 1, i32 1
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds [24 x %struct.AV1LevelSpec], [24 x %struct.AV1LevelSpec]* @av1_level_defs, i64 0, i64 %7, i32 1
  %15 = load i32, i32* %14, align 4
  %16 = icmp sgt i32 %13, %15
  br i1 %16, label %146, label %17

17:                                               ; preds = %10
  %18 = getelementptr inbounds %struct.AV1LevelInfo, %struct.AV1LevelInfo* %0, i64 0, i32 1, i32 2
  %19 = load i32, i32* %18, align 8
  %20 = getelementptr inbounds [24 x %struct.AV1LevelSpec], [24 x %struct.AV1LevelSpec]* @av1_level_defs, i64 0, i64 %7, i32 2
  %21 = load i32, i32* %20, align 8
  %22 = icmp sgt i32 %19, %21
  br i1 %22, label %146, label %23

23:                                               ; preds = %17
  %24 = getelementptr inbounds %struct.AV1LevelInfo, %struct.AV1LevelInfo* %0, i64 0, i32 1, i32 3
  %25 = load i32, i32* %24, align 4
  %26 = getelementptr inbounds [24 x %struct.AV1LevelSpec], [24 x %struct.AV1LevelSpec]* @av1_level_defs, i64 0, i64 %7, i32 3
  %27 = load i32, i32* %26, align 4
  %28 = icmp sgt i32 %25, %27
  br i1 %28, label %146, label %29

29:                                               ; preds = %23
  %30 = getelementptr inbounds %struct.AV1LevelInfo, %struct.AV1LevelInfo* %0, i64 0, i32 1, i32 7
  %31 = load i32, i32* %30, align 4
  %32 = getelementptr inbounds [24 x %struct.AV1LevelSpec], [24 x %struct.AV1LevelSpec]* @av1_level_defs, i64 0, i64 %7, i32 7
  %33 = load i32, i32* %32, align 4
  %34 = icmp sgt i32 %31, %33
  br i1 %34, label %146, label %35

35:                                               ; preds = %29
  %36 = getelementptr inbounds %struct.AV1LevelInfo, %struct.AV1LevelInfo* %0, i64 0, i32 1, i32 6
  %37 = load i32, i32* %36, align 8
  %38 = getelementptr inbounds [24 x %struct.AV1LevelSpec], [24 x %struct.AV1LevelSpec]* @av1_level_defs, i64 0, i64 %7, i32 6
  %39 = load i32, i32* %38, align 8
  %40 = icmp sgt i32 %37, %39
  br i1 %40, label %146, label %41

41:                                               ; preds = %35
  %42 = getelementptr inbounds %struct.AV1LevelInfo, %struct.AV1LevelInfo* %0, i64 0, i32 1, i32 4
  %43 = load i32, i32* %42, align 8
  %44 = getelementptr inbounds [24 x %struct.AV1LevelSpec], [24 x %struct.AV1LevelSpec]* @av1_level_defs, i64 0, i64 %7, i32 4
  %45 = load i32, i32* %44, align 16
  %46 = icmp sgt i32 %43, %45
  br i1 %46, label %146, label %47

47:                                               ; preds = %41
  %48 = getelementptr inbounds %struct.AV1LevelInfo, %struct.AV1LevelInfo* %0, i64 0, i32 3, i64 %7, i32 26
  %49 = load double, double* %48, align 8
  %50 = getelementptr inbounds [24 x %struct.AV1LevelSpec], [24 x %struct.AV1LevelSpec]* @av1_level_defs, i64 0, i64 %7, i32 8
  %51 = load i64, i64* %50, align 16
  %52 = sitofp i64 %51 to double
  %53 = fcmp ogt double %49, %52
  br i1 %53, label %146, label %54

54:                                               ; preds = %47
  %55 = getelementptr inbounds %struct.AV1LevelInfo, %struct.AV1LevelInfo* %0, i64 0, i32 1, i32 9
  %56 = load i64, i64* %55, align 8
  %57 = getelementptr inbounds [24 x %struct.AV1LevelSpec], [24 x %struct.AV1LevelSpec]* @av1_level_defs, i64 0, i64 %7, i32 9
  %58 = load i64, i64* %57, align 8
  %59 = icmp sgt i64 %56, %58
  br i1 %59, label %146, label %60

60:                                               ; preds = %54
  %61 = getelementptr inbounds %struct.AV1LevelInfo, %struct.AV1LevelInfo* %0, i64 0, i32 1, i32 5
  %62 = load i32, i32* %61, align 4
  %63 = mul nsw i32 %39, 120
  %64 = icmp sgt i32 %62, %63
  br i1 %64, label %146, label %65

65:                                               ; preds = %60
  %66 = getelementptr inbounds %struct.AV1LevelInfo, %struct.AV1LevelInfo* %0, i64 0, i32 0, i32 1
  %67 = load i32, i32* %66, align 4
  %68 = icmp sgt i32 %67, 9437184
  br i1 %68, label %146, label %69

69:                                               ; preds = %65
  %70 = getelementptr inbounds %struct.AV1LevelInfo, %struct.AV1LevelInfo* %0, i64 0, i32 0, i32 2
  %71 = load i32, i32* %70, align 8
  %72 = icmp sgt i32 %71, 4096
  br i1 %72, label %146, label %73

73:                                               ; preds = %69
  %74 = getelementptr inbounds %struct.AV1LevelInfo, %struct.AV1LevelInfo* %0, i64 0, i32 0, i32 3
  %75 = load i32, i32* %74, align 4
  %76 = icmp slt i32 %75, 8
  br i1 %76, label %146, label %77

77:                                               ; preds = %73
  %78 = getelementptr inbounds %struct.AV1LevelInfo, %struct.AV1LevelInfo* %0, i64 0, i32 0, i32 4
  %79 = load i32, i32* %78, align 8
  %80 = icmp slt i32 %79, 8
  br i1 %80, label %146, label %81

81:                                               ; preds = %77
  %82 = getelementptr inbounds %struct.AV1LevelInfo, %struct.AV1LevelInfo* %0, i64 0, i32 0, i32 6
  %83 = load i32, i32* %82, align 8
  %84 = icmp slt i32 %83, 16
  br i1 %84, label %146, label %85

85:                                               ; preds = %81
  %86 = getelementptr inbounds %struct.AV1LevelInfo, %struct.AV1LevelInfo* %0, i64 0, i32 0, i32 7
  %87 = load i32, i32* %86, align 4
  %88 = icmp slt i32 %87, 16
  br i1 %88, label %146, label %89

89:                                               ; preds = %85
  %90 = getelementptr inbounds %struct.AV1LevelInfo, %struct.AV1LevelInfo* %0, i64 0, i32 0, i32 5
  %91 = load i32, i32* %90, align 4
  %92 = icmp eq i32 %91, 0
  br i1 %92, label %146, label %93

93:                                               ; preds = %89
  %94 = icmp eq i32 %3, 0
  br i1 %94, label %95, label %110

95:                                               ; preds = %93
  %96 = getelementptr inbounds %struct.AV1LevelSpec, %struct.AV1LevelSpec* %11, i64 0, i32 0
  %97 = load i8, i8* %96, align 16
  %98 = icmp ult i8 %97, 8
  %99 = icmp eq i32 %2, 0
  %100 = or i1 %99, %98
  %101 = getelementptr inbounds [24 x %struct.AV1LevelSpec], [24 x %struct.AV1LevelSpec]* @av1_level_defs, i64 0, i64 %7, i32 13
  %102 = getelementptr inbounds [24 x %struct.AV1LevelSpec], [24 x %struct.AV1LevelSpec]* @av1_level_defs, i64 0, i64 %7, i32 12
  %103 = select i1 %100, double* %102, double* %101
  %104 = load double, double* %103, align 8
  %105 = sitofp i64 %56 to double
  %106 = fdiv double %105, %52
  %107 = fmul double %104, %106
  %108 = fcmp ogt double %107, 8.000000e-01
  %109 = select i1 %108, double %107, double 8.000000e-01
  br label %110

110:                                              ; preds = %93, %95
  %111 = phi double [ 8.000000e-01, %93 ], [ %109, %95 ]
  %112 = getelementptr inbounds %struct.AV1LevelInfo, %struct.AV1LevelInfo* %0, i64 0, i32 0, i32 10
  %113 = load double, double* %112, align 8
  %114 = fcmp olt double %113, %111
  br i1 %114, label %146, label %115

115:                                              ; preds = %110
  %116 = icmp eq i32 %5, 0
  %117 = getelementptr inbounds %struct.AV1LevelSpec, %struct.AV1LevelSpec* %11, i64 0, i32 0
  %118 = load i8, i8* %117, align 16
  br i1 %116, label %140, label %119

119:                                              ; preds = %115
  %120 = icmp ult i8 %118, 8
  %121 = icmp eq i32 %2, 0
  %122 = or i1 %121, %120
  %123 = getelementptr inbounds [24 x %struct.AV1LevelSpec], [24 x %struct.AV1LevelSpec]* @av1_level_defs, i64 0, i64 %7, i32 11
  %124 = getelementptr inbounds [24 x %struct.AV1LevelSpec], [24 x %struct.AV1LevelSpec]* @av1_level_defs, i64 0, i64 %7, i32 10
  %125 = select i1 %122, double* %124, double* %123
  %126 = load double, double* %125, align 8
  %127 = fmul double %126, 1.000000e+06
  %128 = icmp eq i8 %4, 0
  %129 = icmp eq i8 %4, 1
  %130 = select i1 %129, double 2.000000e+00, double 3.000000e+00
  %131 = select i1 %128, double 1.000000e+00, double %130
  %132 = fmul double %131, %127
  %133 = getelementptr inbounds %struct.AV1LevelInfo, %struct.AV1LevelInfo* %0, i64 0, i32 0, i32 8
  %134 = load double, double* %133, align 8
  %135 = fmul double %134, 8.000000e+00
  %136 = getelementptr inbounds %struct.AV1LevelInfo, %struct.AV1LevelInfo* %0, i64 0, i32 0, i32 9
  %137 = load double, double* %136, align 8
  %138 = fdiv double %135, %137
  %139 = fcmp ogt double %138, %132
  br i1 %139, label %146, label %140

140:                                              ; preds = %115, %119
  %141 = icmp ugt i8 %118, 13
  br i1 %141, label %142, label %146

142:                                              ; preds = %140
  %143 = mul nsw i32 %67, %43
  %144 = icmp sgt i32 %143, 588251136
  %145 = select i1 %144, i32 17, i32 21
  ret i32 %145

146:                                              ; preds = %119, %10, %17, %23, %29, %35, %41, %47, %54, %60, %65, %69, %73, %77, %81, %85, %89, %140, %110, %6
  %147 = phi i32 [ 19, %6 ], [ 0, %10 ], [ 1, %17 ], [ 2, %23 ], [ 5, %29 ], [ 6, %35 ], [ 13, %41 ], [ 14, %47 ], [ 15, %54 ], [ 7, %60 ], [ 8, %65 ], [ 9, %69 ], [ 10, %73 ], [ 11, %77 ], [ 3, %81 ], [ 4, %85 ], [ 12, %89 ], [ 18, %119 ], [ 16, %110 ], [ 21, %140 ]
  ret i32 %147
}

declare void @aom_internal_error(%struct.aom_internal_error_info*, i32, i8*, ...) local_unnamed_addr #7

; Function Attrs: nofree nounwind ssp uwtable
define hidden i32 @av1_get_seq_level_idx(%struct.SequenceHeader* nocapture readonly, %struct.AV1LevelParams* nocapture readonly, i32* nocapture) local_unnamed_addr #2 {
  %4 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %0, i64 0, i32 12
  %5 = load i8, i8* %4, align 1
  %6 = zext i8 %5 to i32
  %7 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %0, i64 0, i32 24
  %8 = load i8, i8* %7, align 1
  %9 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %0, i64 0, i32 37
  %10 = load i32, i32* %9, align 8
  %11 = icmp slt i32 %10, 0
  br i1 %11, label %14, label %12

12:                                               ; preds = %3
  %13 = getelementptr inbounds %struct.AV1LevelParams, %struct.AV1LevelParams* %1, i64 0, i32 1
  br label %15

14:                                               ; preds = %39, %3
  ret i32 0

15:                                               ; preds = %39, %12
  %16 = phi i64 [ %40, %39 ], [ 0, %12 ]
  %17 = getelementptr inbounds i32, i32* %2, i64 %16
  store i32 31, i32* %17, align 4
  %18 = load i32, i32* %13, align 8
  %19 = trunc i64 %16 to i32
  %20 = shl i32 1, %19
  %21 = and i32 %18, %20
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %39, label %23

23:                                               ; preds = %15
  %24 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %0, i64 0, i32 45, i64 %16
  %25 = load i8, i8* %24, align 1
  %26 = zext i8 %25 to i32
  %27 = getelementptr inbounds %struct.AV1LevelParams, %struct.AV1LevelParams* %1, i64 0, i32 2, i64 %16
  %28 = load %struct.AV1LevelInfo*, %struct.AV1LevelInfo** %27, align 8
  br label %29

29:                                               ; preds = %36, %23
  %30 = phi i32 [ 0, %23 ], [ %37, %36 ]
  %31 = trunc i32 %30 to i8
  switch i8 %31, label %32 [
    i8 23, label %36
    i8 22, label %36
    i8 21, label %36
    i8 20, label %36
    i8 11, label %36
    i8 10, label %36
    i8 7, label %36
    i8 6, label %36
    i8 3, label %36
    i8 2, label %36
  ]

32:                                               ; preds = %29
  %33 = tail call fastcc i32 @check_level_constraints(%struct.AV1LevelInfo* %28, i8 zeroext %31, i32 %26, i32 %6, i8 signext %8, i32 1)
  %34 = icmp eq i32 %33, 21
  br i1 %34, label %35, label %36

35:                                               ; preds = %32
  store i32 %30, i32* %17, align 4
  br label %39

36:                                               ; preds = %29, %29, %29, %29, %29, %29, %29, %29, %29, %29, %32
  %37 = add nuw nsw i32 %30, 1
  %38 = icmp eq i32 %37, 24
  br i1 %38, label %39, label %29

39:                                               ; preds = %36, %35, %15
  %40 = add nuw nsw i64 %16, 1
  %41 = load i32, i32* %9, align 8
  %42 = sext i32 %41 to i64
  %43 = icmp slt i64 %16, %42
  br i1 %43, label %15, label %14
}

attributes #0 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { argmemonly nounwind }
attributes #7 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
