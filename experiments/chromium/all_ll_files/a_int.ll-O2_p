; ModuleID = '../../third_party/boringssl/src/crypto/asn1/a_int.c'
source_filename = "../../third_party/boringssl/src/crypto/asn1/a_int.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.asn1_string_st = type { i32, i32, i8*, i64 }
%struct.bignum_st = type { i64*, i32, i32, i32, i32 }

@.str = private unnamed_addr constant [52 x i8] c"../../third_party/boringssl/src/crypto/asn1/a_int.c\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden %struct.asn1_string_st* @ASN1_INTEGER_dup(%struct.asn1_string_st*) local_unnamed_addr #0 {
  %2 = tail call %struct.asn1_string_st* @ASN1_STRING_dup(%struct.asn1_string_st* %0) #5
  ret %struct.asn1_string_st* %2
}

declare %struct.asn1_string_st* @ASN1_STRING_dup(%struct.asn1_string_st*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ASN1_INTEGER_cmp(%struct.asn1_string_st*, %struct.asn1_string_st*) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %0, i64 0, i32 1
  %4 = load i32, i32* %3, align 4
  %5 = and i32 %4, 256
  %6 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %1, i64 0, i32 1
  %7 = load i32, i32* %6, align 4
  %8 = and i32 %7, 256
  %9 = icmp eq i32 %5, %8
  br i1 %9, label %13, label %10

10:                                               ; preds = %2
  %11 = icmp eq i32 %5, 0
  %12 = select i1 %11, i32 1, i32 -1
  ret i32 %12

13:                                               ; preds = %2
  %14 = tail call i32 @ASN1_STRING_cmp(%struct.asn1_string_st* %0, %struct.asn1_string_st* %1) #5
  %15 = icmp eq i32 %5, 0
  %16 = sub nsw i32 0, %14
  %17 = select i1 %15, i32 %14, i32 %16
  ret i32 %17
}

declare i32 @ASN1_STRING_cmp(%struct.asn1_string_st*, %struct.asn1_string_st*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @i2c_ASN1_INTEGER(%struct.asn1_string_st* readonly, i8**) local_unnamed_addr #0 {
  %3 = icmp eq %struct.asn1_string_st* %0, null
  br i1 %3, label %216, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %0, i64 0, i32 1
  %6 = load i32, i32* %5, align 4
  %7 = and i32 %6, 256
  %8 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %0, i64 0, i32 0
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %43, label %11

11:                                               ; preds = %4
  %12 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %0, i64 0, i32 2
  %13 = load i8*, i8** %12, align 8
  %14 = load i8, i8* %13, align 1
  %15 = icmp eq i32 %9, 1
  %16 = icmp eq i8 %14, 0
  %17 = and i1 %15, %16
  %18 = select i1 %17, i32 0, i32 %7
  %19 = icmp eq i32 %18, 0
  %20 = icmp slt i8 %14, 0
  %21 = and i1 %20, %19
  %22 = zext i1 %21 to i32
  br i1 %19, label %39, label %23

23:                                               ; preds = %11
  %24 = icmp ugt i8 %14, -128
  br i1 %24, label %39, label %25

25:                                               ; preds = %23
  %26 = icmp eq i8 %14, -128
  %27 = icmp sgt i32 %9, 1
  %28 = and i1 %26, %27
  br i1 %28, label %29, label %39

29:                                               ; preds = %25
  %30 = zext i32 %9 to i64
  br label %33

31:                                               ; preds = %33
  %32 = icmp eq i64 %38, %30
  br i1 %32, label %39, label %33

33:                                               ; preds = %31, %29
  %34 = phi i64 [ 1, %29 ], [ %38, %31 ]
  %35 = getelementptr inbounds i8, i8* %13, i64 %34
  %36 = load i8, i8* %35, align 1
  %37 = icmp eq i8 %36, 0
  %38 = add nuw nsw i64 %34, 1
  br i1 %37, label %31, label %39

39:                                               ; preds = %33, %31, %11, %23, %25
  %40 = phi i32 [ 0, %25 ], [ %22, %11 ], [ 1, %23 ], [ 0, %31 ], [ 1, %33 ]
  %41 = phi i8 [ 0, %25 ], [ 0, %11 ], [ -1, %23 ], [ 0, %31 ], [ -1, %33 ]
  %42 = add nsw i32 %40, %9
  br label %43

43:                                               ; preds = %4, %39
  %44 = phi i32 [ %40, %39 ], [ 0, %4 ]
  %45 = phi i32 [ %42, %39 ], [ 1, %4 ]
  %46 = phi i32 [ %18, %39 ], [ %7, %4 ]
  %47 = phi i8 [ %41, %39 ], [ 0, %4 ]
  %48 = icmp eq i8** %1, null
  br i1 %48, label %216, label %49

49:                                               ; preds = %43
  %50 = load i8*, i8** %1, align 8
  %51 = icmp eq i32 %44, 0
  br i1 %51, label %55, label %52

52:                                               ; preds = %49
  %53 = getelementptr inbounds i8, i8* %50, i64 1
  store i8 %47, i8* %50, align 1
  %54 = load i32, i32* %8, align 8
  br label %55

55:                                               ; preds = %49, %52
  %56 = phi i32 [ %54, %52 ], [ %9, %49 ]
  %57 = phi i8* [ %53, %52 ], [ %50, %49 ]
  %58 = icmp eq i32 %56, 0
  br i1 %58, label %59, label %60

59:                                               ; preds = %55
  store i8 0, i8* %57, align 1
  br label %212

60:                                               ; preds = %55
  %61 = icmp eq i32 %46, 0
  %62 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %0, i64 0, i32 2
  %63 = load i8*, i8** %62, align 8
  br i1 %61, label %64, label %66

64:                                               ; preds = %60
  %65 = zext i32 %56 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %57, i8* align 1 %63, i64 %65, i1 false) #5
  br label %212

66:                                               ; preds = %60
  %67 = sext i32 %56 to i64
  %68 = getelementptr inbounds i8, i8* %63, i64 %67
  %69 = add nsw i32 %56, -1
  %70 = sext i32 %69 to i64
  %71 = getelementptr inbounds i8, i8* %57, i64 %70
  %72 = getelementptr inbounds i8, i8* %68, i64 -1
  %73 = load i8, i8* %72, align 1
  %74 = icmp eq i8 %73, 0
  %75 = icmp sgt i32 %56, 1
  %76 = and i1 %75, %74
  br i1 %76, label %77, label %90

77:                                               ; preds = %66, %77
  %78 = phi i8* [ %83, %77 ], [ %72, %66 ]
  %79 = phi i8* [ %81, %77 ], [ %71, %66 ]
  %80 = phi i32 [ %82, %77 ], [ %56, %66 ]
  %81 = getelementptr inbounds i8, i8* %79, i64 -1
  store i8 0, i8* %79, align 1
  %82 = add nsw i32 %80, -1
  %83 = getelementptr inbounds i8, i8* %78, i64 -1
  %84 = load i8, i8* %83, align 1
  %85 = icmp eq i8 %84, 0
  %86 = icmp sgt i32 %82, 1
  %87 = and i1 %86, %85
  br i1 %87, label %77, label %88

88:                                               ; preds = %77
  %89 = add nsw i32 %80, -2
  br label %90

90:                                               ; preds = %88, %66
  %91 = phi i32 [ %89, %88 ], [ %69, %66 ]
  %92 = phi i8* [ %81, %88 ], [ %71, %66 ]
  %93 = phi i8* [ %78, %88 ], [ %68, %66 ]
  %94 = phi i8 [ %84, %88 ], [ %73, %66 ]
  %95 = sub i8 0, %94
  store i8 %95, i8* %92, align 1
  %96 = icmp sgt i32 %91, 0
  br i1 %96, label %97, label %212

97:                                               ; preds = %90
  %98 = getelementptr inbounds i8, i8* %93, i64 -2
  %99 = add nsw i32 %91, -1
  %100 = zext i32 %99 to i64
  %101 = add nuw nsw i64 %100, 1
  %102 = icmp ult i64 %101, 16
  br i1 %102, label %198, label %103

103:                                              ; preds = %97
  %104 = add nsw i32 %91, -1
  %105 = zext i32 %104 to i64
  %106 = xor i64 %105, -1
  %107 = getelementptr i8, i8* %92, i64 %106
  %108 = sub nuw nsw i64 -2, %105
  %109 = getelementptr i8, i8* %93, i64 %108
  %110 = getelementptr i8, i8* %93, i64 -1
  %111 = icmp ult i8* %107, %110
  %112 = icmp ult i8* %109, %92
  %113 = and i1 %111, %112
  br i1 %113, label %198, label %114

114:                                              ; preds = %103
  %115 = and i64 %101, 8589934576
  %116 = trunc i64 %115 to i32
  %117 = sub i32 %91, %116
  %118 = sub nsw i64 0, %115
  %119 = getelementptr i8, i8* %98, i64 %118
  %120 = sub nsw i64 0, %115
  %121 = getelementptr i8, i8* %92, i64 %120
  %122 = add nsw i64 %115, -16
  %123 = lshr exact i64 %122, 4
  %124 = add nuw nsw i64 %123, 1
  %125 = and i64 %124, 1
  %126 = icmp eq i64 %122, 0
  br i1 %126, label %175, label %127

127:                                              ; preds = %114
  %128 = sub nuw nsw i64 %124, %125
  %129 = getelementptr i8, i8* %92, i64 -1
  %130 = getelementptr i8, i8* %92, i64 -1
  br label %131

131:                                              ; preds = %131, %127
  %132 = phi i64 [ 0, %127 ], [ %170, %131 ]
  %133 = phi i64 [ %128, %127 ], [ %171, %131 ]
  %134 = sub i64 0, %132
  %135 = getelementptr i8, i8* %98, i64 %134
  %136 = sub i64 0, %132
  %137 = getelementptr inbounds i8, i8* %129, i64 %136
  %138 = getelementptr i8, i8* %135, i64 -7
  %139 = bitcast i8* %138 to <8 x i8>*
  %140 = load <8 x i8>, <8 x i8>* %139, align 1, !alias.scope !2
  %141 = getelementptr i8, i8* %135, i64 -8
  %142 = getelementptr i8, i8* %141, i64 -7
  %143 = bitcast i8* %142 to <8 x i8>*
  %144 = load <8 x i8>, <8 x i8>* %143, align 1, !alias.scope !2
  %145 = xor <8 x i8> %140, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %146 = xor <8 x i8> %144, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %147 = getelementptr inbounds i8, i8* %137, i64 -7
  %148 = bitcast i8* %147 to <8 x i8>*
  store <8 x i8> %145, <8 x i8>* %148, align 1, !alias.scope !5, !noalias !2
  %149 = getelementptr inbounds i8, i8* %137, i64 -8
  %150 = getelementptr inbounds i8, i8* %149, i64 -7
  %151 = bitcast i8* %150 to <8 x i8>*
  store <8 x i8> %146, <8 x i8>* %151, align 1, !alias.scope !5, !noalias !2
  %152 = sub nuw nsw i64 -16, %132
  %153 = getelementptr i8, i8* %98, i64 %152
  %154 = sub nuw nsw i64 -16, %132
  %155 = getelementptr inbounds i8, i8* %130, i64 %154
  %156 = getelementptr i8, i8* %153, i64 -7
  %157 = bitcast i8* %156 to <8 x i8>*
  %158 = load <8 x i8>, <8 x i8>* %157, align 1, !alias.scope !2
  %159 = getelementptr i8, i8* %153, i64 -8
  %160 = getelementptr i8, i8* %159, i64 -7
  %161 = bitcast i8* %160 to <8 x i8>*
  %162 = load <8 x i8>, <8 x i8>* %161, align 1, !alias.scope !2
  %163 = xor <8 x i8> %158, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %164 = xor <8 x i8> %162, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %165 = getelementptr inbounds i8, i8* %155, i64 -7
  %166 = bitcast i8* %165 to <8 x i8>*
  store <8 x i8> %163, <8 x i8>* %166, align 1, !alias.scope !5, !noalias !2
  %167 = getelementptr inbounds i8, i8* %155, i64 -8
  %168 = getelementptr inbounds i8, i8* %167, i64 -7
  %169 = bitcast i8* %168 to <8 x i8>*
  store <8 x i8> %164, <8 x i8>* %169, align 1, !alias.scope !5, !noalias !2
  %170 = add i64 %132, 32
  %171 = add i64 %133, -2
  %172 = icmp eq i64 %171, 0
  br i1 %172, label %173, label %131, !llvm.loop !7

173:                                              ; preds = %131
  %174 = sub nuw nsw i64 -32, %132
  br label %175

175:                                              ; preds = %173, %114
  %176 = phi i64 [ 0, %114 ], [ %174, %173 ]
  %177 = icmp eq i64 %125, 0
  br i1 %177, label %196, label %178

178:                                              ; preds = %175
  %179 = getelementptr i8, i8* %98, i64 %176
  %180 = getelementptr i8, i8* %92, i64 -1
  %181 = getelementptr inbounds i8, i8* %180, i64 %176
  %182 = getelementptr i8, i8* %179, i64 -7
  %183 = bitcast i8* %182 to <8 x i8>*
  %184 = load <8 x i8>, <8 x i8>* %183, align 1, !alias.scope !2
  %185 = getelementptr i8, i8* %179, i64 -8
  %186 = getelementptr i8, i8* %185, i64 -7
  %187 = bitcast i8* %186 to <8 x i8>*
  %188 = load <8 x i8>, <8 x i8>* %187, align 1, !alias.scope !2
  %189 = xor <8 x i8> %184, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %190 = xor <8 x i8> %188, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %191 = getelementptr inbounds i8, i8* %181, i64 -7
  %192 = bitcast i8* %191 to <8 x i8>*
  store <8 x i8> %189, <8 x i8>* %192, align 1, !alias.scope !5, !noalias !2
  %193 = getelementptr inbounds i8, i8* %181, i64 -8
  %194 = getelementptr inbounds i8, i8* %193, i64 -7
  %195 = bitcast i8* %194 to <8 x i8>*
  store <8 x i8> %190, <8 x i8>* %195, align 1, !alias.scope !5, !noalias !2
  br label %196

196:                                              ; preds = %175, %178
  %197 = icmp eq i64 %101, %115
  br i1 %197, label %212, label %198

198:                                              ; preds = %196, %103, %97
  %199 = phi i32 [ %91, %103 ], [ %91, %97 ], [ %117, %196 ]
  %200 = phi i8* [ %98, %103 ], [ %98, %97 ], [ %119, %196 ]
  %201 = phi i8* [ %92, %103 ], [ %92, %97 ], [ %121, %196 ]
  br label %202

202:                                              ; preds = %198, %202
  %203 = phi i32 [ %210, %202 ], [ %199, %198 ]
  %204 = phi i8* [ %209, %202 ], [ %200, %198 ]
  %205 = phi i8* [ %206, %202 ], [ %201, %198 ]
  %206 = getelementptr inbounds i8, i8* %205, i64 -1
  %207 = load i8, i8* %204, align 1
  %208 = xor i8 %207, -1
  store i8 %208, i8* %206, align 1
  %209 = getelementptr inbounds i8, i8* %204, i64 -1
  %210 = add nsw i32 %203, -1
  %211 = icmp sgt i32 %210, 0
  br i1 %211, label %202, label %212, !llvm.loop !9

212:                                              ; preds = %202, %196, %90, %64, %59
  %213 = load i8*, i8** %1, align 8
  %214 = sext i32 %45 to i64
  %215 = getelementptr inbounds i8, i8* %213, i64 %214
  store i8* %215, i8** %1, align 8
  br label %216

216:                                              ; preds = %43, %2, %212
  %217 = phi i32 [ %45, %212 ], [ 0, %2 ], [ %45, %43 ]
  ret i32 %217
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.asn1_string_st* @c2i_ASN1_INTEGER(%struct.asn1_string_st**, i8** nocapture, i64) local_unnamed_addr #0 {
  %4 = icmp ugt i64 %2, 1073741823
  br i1 %4, label %5, label %6

5:                                                ; preds = %3
  tail call void @ERR_put_error(i32 12, i32 0, i32 177, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str, i64 0, i64 0), i32 204) #5
  br label %219

6:                                                ; preds = %3
  %7 = icmp eq %struct.asn1_string_st** %0, null
  br i1 %7, label %11, label %8

8:                                                ; preds = %6
  %9 = load %struct.asn1_string_st*, %struct.asn1_string_st** %0, align 8
  %10 = icmp eq %struct.asn1_string_st* %9, null
  br i1 %10, label %11, label %16

11:                                               ; preds = %8, %6
  %12 = tail call %struct.asn1_string_st* @ASN1_INTEGER_new() #5
  %13 = icmp eq %struct.asn1_string_st* %12, null
  br i1 %13, label %219, label %14

14:                                               ; preds = %11
  %15 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %12, i64 0, i32 1
  store i32 2, i32* %15, align 4
  br label %16

16:                                               ; preds = %8, %14
  %17 = phi %struct.asn1_string_st* [ %12, %14 ], [ %9, %8 ]
  %18 = load i8*, i8** %1, align 8
  %19 = getelementptr inbounds i8, i8* %18, i64 %2
  %20 = shl i64 %2, 32
  %21 = add nuw nsw i64 %20, 4294967296
  %22 = ashr exact i64 %21, 32
  %23 = tail call i8* @OPENSSL_malloc(i64 %22) #5
  %24 = icmp eq i8* %23, null
  br i1 %24, label %214, label %25

25:                                               ; preds = %16
  %26 = icmp eq i64 %2, 0
  br i1 %26, label %27, label %29

27:                                               ; preds = %25
  %28 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %17, i64 0, i32 1
  store i32 2, i32* %28, align 4
  br label %203

29:                                               ; preds = %25
  %30 = load i8, i8* %18, align 1
  %31 = icmp slt i8 %30, 0
  %32 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %17, i64 0, i32 1
  br i1 %31, label %33, label %191

33:                                               ; preds = %29
  store i32 258, i32* %32, align 4
  %34 = load i8, i8* %18, align 1
  %35 = icmp eq i8 %34, -1
  %36 = icmp ne i64 %2, 1
  %37 = and i1 %36, %35
  %38 = getelementptr inbounds i8, i8* %18, i64 1
  %39 = zext i1 %37 to i64
  %40 = sub nuw nsw i64 %2, %39
  %41 = select i1 %37, i8* %38, i8* %18
  %42 = trunc i64 %40 to i32
  %43 = shl i64 %40, 32
  %44 = add nsw i64 %43, -4294967296
  %45 = ashr exact i64 %44, 32
  %46 = getelementptr inbounds i8, i8* %41, i64 %45
  %47 = getelementptr inbounds i8, i8* %23, i64 %45
  %48 = load i8, i8* %46, align 1
  %49 = icmp eq i8 %48, 0
  %50 = icmp ne i32 %42, 0
  %51 = and i1 %50, %49
  br i1 %51, label %52, label %63

52:                                               ; preds = %33, %52
  %53 = phi i32 [ %57, %52 ], [ %42, %33 ]
  %54 = phi i8* [ %56, %52 ], [ %47, %33 ]
  %55 = phi i8* [ %58, %52 ], [ %46, %33 ]
  %56 = getelementptr inbounds i8, i8* %54, i64 -1
  store i8 0, i8* %54, align 1
  %57 = add nsw i32 %53, -1
  %58 = getelementptr inbounds i8, i8* %55, i64 -1
  %59 = load i8, i8* %58, align 1
  %60 = icmp eq i8 %59, 0
  %61 = icmp ne i32 %57, 0
  %62 = and i1 %61, %60
  br i1 %62, label %52, label %63

63:                                               ; preds = %52, %33
  %64 = phi i8* [ %46, %33 ], [ %58, %52 ]
  %65 = phi i8* [ %47, %33 ], [ %56, %52 ]
  %66 = phi i32 [ %42, %33 ], [ %57, %52 ]
  %67 = phi i8 [ %48, %33 ], [ %59, %52 ]
  %68 = phi i1 [ %50, %33 ], [ %61, %52 ]
  br i1 %68, label %72, label %69

69:                                               ; preds = %63
  store i8 1, i8* %23, align 1
  %70 = getelementptr inbounds i8, i8* %23, i64 %40
  store i8 0, i8* %70, align 1
  %71 = add nsw i64 %40, 1
  br label %203

72:                                               ; preds = %63
  %73 = sub i8 0, %67
  store i8 %73, i8* %65, align 1
  %74 = add nsw i32 %66, -1
  %75 = icmp sgt i32 %74, 0
  br i1 %75, label %76, label %203

76:                                               ; preds = %72
  %77 = add i32 %66, -2
  %78 = zext i32 %77 to i64
  %79 = add nuw nsw i64 %78, 1
  %80 = icmp ult i64 %79, 16
  br i1 %80, label %177, label %81

81:                                               ; preds = %76
  %82 = add i32 %66, -2
  %83 = zext i32 %82 to i64
  %84 = xor i64 %83, -1
  %85 = getelementptr i8, i8* %65, i64 %84
  %86 = getelementptr i8, i8* %64, i64 %84
  %87 = icmp ult i8* %85, %64
  %88 = icmp ult i8* %86, %65
  %89 = and i1 %87, %88
  br i1 %89, label %177, label %90

90:                                               ; preds = %81
  %91 = and i64 %79, 8589934576
  %92 = trunc i64 %91 to i32
  %93 = sub i32 %74, %92
  %94 = sub nsw i64 0, %91
  %95 = getelementptr i8, i8* %64, i64 %94
  %96 = sub nsw i64 0, %91
  %97 = getelementptr i8, i8* %65, i64 %96
  %98 = add nsw i64 %91, -16
  %99 = lshr exact i64 %98, 4
  %100 = add nuw nsw i64 %99, 1
  %101 = and i64 %100, 1
  %102 = icmp eq i64 %98, 0
  br i1 %102, label %153, label %103

103:                                              ; preds = %90
  %104 = sub nuw nsw i64 %100, %101
  %105 = getelementptr i8, i8* %64, i64 -1
  %106 = getelementptr i8, i8* %65, i64 -1
  %107 = getelementptr i8, i8* %64, i64 -1
  %108 = getelementptr i8, i8* %65, i64 -1
  br label %109

109:                                              ; preds = %109, %103
  %110 = phi i64 [ 0, %103 ], [ %148, %109 ]
  %111 = phi i64 [ %104, %103 ], [ %149, %109 ]
  %112 = sub i64 0, %110
  %113 = sub i64 0, %110
  %114 = getelementptr inbounds i8, i8* %106, i64 %113
  %115 = getelementptr inbounds i8, i8* %105, i64 %112
  %116 = getelementptr inbounds i8, i8* %115, i64 -7
  %117 = bitcast i8* %116 to <8 x i8>*
  %118 = load <8 x i8>, <8 x i8>* %117, align 1, !alias.scope !10
  %119 = getelementptr inbounds i8, i8* %115, i64 -8
  %120 = getelementptr inbounds i8, i8* %119, i64 -7
  %121 = bitcast i8* %120 to <8 x i8>*
  %122 = load <8 x i8>, <8 x i8>* %121, align 1, !alias.scope !10
  %123 = xor <8 x i8> %118, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %124 = xor <8 x i8> %122, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %125 = getelementptr inbounds i8, i8* %114, i64 -7
  %126 = bitcast i8* %125 to <8 x i8>*
  store <8 x i8> %123, <8 x i8>* %126, align 1, !alias.scope !13, !noalias !10
  %127 = getelementptr inbounds i8, i8* %114, i64 -8
  %128 = getelementptr inbounds i8, i8* %127, i64 -7
  %129 = bitcast i8* %128 to <8 x i8>*
  store <8 x i8> %124, <8 x i8>* %129, align 1, !alias.scope !13, !noalias !10
  %130 = sub nuw nsw i64 -16, %110
  %131 = sub nuw nsw i64 -16, %110
  %132 = getelementptr inbounds i8, i8* %108, i64 %131
  %133 = getelementptr inbounds i8, i8* %107, i64 %130
  %134 = getelementptr inbounds i8, i8* %133, i64 -7
  %135 = bitcast i8* %134 to <8 x i8>*
  %136 = load <8 x i8>, <8 x i8>* %135, align 1, !alias.scope !10
  %137 = getelementptr inbounds i8, i8* %133, i64 -8
  %138 = getelementptr inbounds i8, i8* %137, i64 -7
  %139 = bitcast i8* %138 to <8 x i8>*
  %140 = load <8 x i8>, <8 x i8>* %139, align 1, !alias.scope !10
  %141 = xor <8 x i8> %136, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %142 = xor <8 x i8> %140, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %143 = getelementptr inbounds i8, i8* %132, i64 -7
  %144 = bitcast i8* %143 to <8 x i8>*
  store <8 x i8> %141, <8 x i8>* %144, align 1, !alias.scope !13, !noalias !10
  %145 = getelementptr inbounds i8, i8* %132, i64 -8
  %146 = getelementptr inbounds i8, i8* %145, i64 -7
  %147 = bitcast i8* %146 to <8 x i8>*
  store <8 x i8> %142, <8 x i8>* %147, align 1, !alias.scope !13, !noalias !10
  %148 = add i64 %110, 32
  %149 = add i64 %111, -2
  %150 = icmp eq i64 %149, 0
  br i1 %150, label %151, label %109, !llvm.loop !15

151:                                              ; preds = %109
  %152 = sub nuw nsw i64 -32, %110
  br label %153

153:                                              ; preds = %151, %90
  %154 = phi i64 [ 0, %90 ], [ %152, %151 ]
  %155 = icmp eq i64 %101, 0
  br i1 %155, label %175, label %156

156:                                              ; preds = %153
  %157 = getelementptr i8, i8* %64, i64 -1
  %158 = getelementptr i8, i8* %65, i64 -1
  %159 = getelementptr inbounds i8, i8* %158, i64 %154
  %160 = getelementptr inbounds i8, i8* %157, i64 %154
  %161 = getelementptr inbounds i8, i8* %160, i64 -7
  %162 = bitcast i8* %161 to <8 x i8>*
  %163 = load <8 x i8>, <8 x i8>* %162, align 1, !alias.scope !10
  %164 = getelementptr inbounds i8, i8* %160, i64 -8
  %165 = getelementptr inbounds i8, i8* %164, i64 -7
  %166 = bitcast i8* %165 to <8 x i8>*
  %167 = load <8 x i8>, <8 x i8>* %166, align 1, !alias.scope !10
  %168 = xor <8 x i8> %163, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %169 = xor <8 x i8> %167, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %170 = getelementptr inbounds i8, i8* %159, i64 -7
  %171 = bitcast i8* %170 to <8 x i8>*
  store <8 x i8> %168, <8 x i8>* %171, align 1, !alias.scope !13, !noalias !10
  %172 = getelementptr inbounds i8, i8* %159, i64 -8
  %173 = getelementptr inbounds i8, i8* %172, i64 -7
  %174 = bitcast i8* %173 to <8 x i8>*
  store <8 x i8> %169, <8 x i8>* %174, align 1, !alias.scope !13, !noalias !10
  br label %175

175:                                              ; preds = %153, %156
  %176 = icmp eq i64 %79, %91
  br i1 %176, label %203, label %177

177:                                              ; preds = %175, %81, %76
  %178 = phi i32 [ %74, %81 ], [ %74, %76 ], [ %93, %175 ]
  %179 = phi i8* [ %64, %81 ], [ %64, %76 ], [ %95, %175 ]
  %180 = phi i8* [ %65, %81 ], [ %65, %76 ], [ %97, %175 ]
  br label %181

181:                                              ; preds = %177, %181
  %182 = phi i32 [ %189, %181 ], [ %178, %177 ]
  %183 = phi i8* [ %186, %181 ], [ %179, %177 ]
  %184 = phi i8* [ %185, %181 ], [ %180, %177 ]
  %185 = getelementptr inbounds i8, i8* %184, i64 -1
  %186 = getelementptr inbounds i8, i8* %183, i64 -1
  %187 = load i8, i8* %186, align 1
  %188 = xor i8 %187, -1
  store i8 %188, i8* %185, align 1
  %189 = add nsw i32 %182, -1
  %190 = icmp sgt i32 %189, 0
  br i1 %190, label %181, label %203, !llvm.loop !16

191:                                              ; preds = %29
  store i32 2, i32* %32, align 4
  %192 = load i8, i8* %18, align 1
  %193 = icmp eq i8 %192, 0
  %194 = icmp ne i64 %2, 1
  %195 = and i1 %194, %193
  %196 = zext i1 %195 to i64
  %197 = sub nuw nsw i64 %2, %196
  %198 = and i64 %197, 4294967295
  %199 = icmp eq i64 %198, 0
  br i1 %199, label %203, label %200

200:                                              ; preds = %191
  %201 = getelementptr inbounds i8, i8* %18, i64 1
  %202 = select i1 %195, i8* %201, i8* %18
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %23, i8* align 1 %202, i64 %198, i1 false) #5
  br label %203

203:                                              ; preds = %181, %175, %72, %200, %191, %69, %27
  %204 = phi i64 [ %71, %69 ], [ 0, %27 ], [ %197, %191 ], [ %197, %200 ], [ %40, %72 ], [ %40, %175 ], [ %40, %181 ]
  %205 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %17, i64 0, i32 2
  %206 = load i8*, i8** %205, align 8
  %207 = icmp eq i8* %206, null
  br i1 %207, label %209, label %208

208:                                              ; preds = %203
  tail call void @OPENSSL_free(i8* nonnull %206) #5
  br label %209

209:                                              ; preds = %203, %208
  store i8* %23, i8** %205, align 8
  %210 = trunc i64 %204 to i32
  %211 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %17, i64 0, i32 0
  store i32 %210, i32* %211, align 8
  br i1 %7, label %213, label %212

212:                                              ; preds = %209
  store %struct.asn1_string_st* %17, %struct.asn1_string_st** %0, align 8
  br label %213

213:                                              ; preds = %209, %212
  store i8* %19, i8** %1, align 8
  br label %219

214:                                              ; preds = %16
  tail call void @ERR_put_error(i32 12, i32 0, i32 65, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str, i64 0, i64 0), i32 283) #5
  br i1 %7, label %218, label %215

215:                                              ; preds = %214
  %216 = load %struct.asn1_string_st*, %struct.asn1_string_st** %0, align 8
  %217 = icmp eq %struct.asn1_string_st* %216, %17
  br i1 %217, label %219, label %218

218:                                              ; preds = %215, %214
  tail call void @ASN1_INTEGER_free(%struct.asn1_string_st* nonnull %17) #5
  br label %219

219:                                              ; preds = %218, %215, %11, %213, %5
  %220 = phi %struct.asn1_string_st* [ null, %5 ], [ %17, %213 ], [ null, %11 ], [ null, %215 ], [ null, %218 ]
  ret %struct.asn1_string_st* %220
}

declare void @ERR_put_error(i32, i32, i32, i8*, i32) local_unnamed_addr #1

declare %struct.asn1_string_st* @ASN1_INTEGER_new() local_unnamed_addr #1

declare i8* @OPENSSL_malloc(i64) local_unnamed_addr #1

declare void @OPENSSL_free(i8*) local_unnamed_addr #1

declare void @ASN1_INTEGER_free(%struct.asn1_string_st*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ASN1_INTEGER_set(%struct.asn1_string_st* nocapture, i64) local_unnamed_addr #0 {
  %3 = icmp sgt i64 %1, -1
  br i1 %3, label %4, label %6

4:                                                ; preds = %2
  %5 = tail call i32 @ASN1_INTEGER_set_uint64(%struct.asn1_string_st* %0, i64 %1)
  br label %12

6:                                                ; preds = %2
  %7 = sub i64 0, %1
  %8 = tail call i32 @ASN1_INTEGER_set_uint64(%struct.asn1_string_st* %0, i64 %7)
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %12, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %0, i64 0, i32 1
  store i32 258, i32* %11, align 4
  br label %12

12:                                               ; preds = %6, %10, %4
  %13 = phi i32 [ %5, %4 ], [ 1, %10 ], [ 0, %6 ]
  ret i32 %13
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ASN1_INTEGER_set_uint64(%struct.asn1_string_st* nocapture, i64) local_unnamed_addr #0 {
  %3 = tail call i8* @OPENSSL_malloc(i64 8) #5
  %4 = icmp eq i8* %3, null
  br i1 %4, label %5, label %6

5:                                                ; preds = %2
  tail call void @ERR_put_error(i32 12, i32 0, i32 65, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str, i64 0, i64 0), i32 307) #5
  br label %28

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %0, i64 0, i32 2
  %8 = load i8*, i8** %7, align 8
  tail call void @OPENSSL_free(i8* %8) #5
  store i8* %3, i8** %7, align 8
  %9 = tail call i64 @llvm.bswap.i64(i64 %1) #5
  %10 = bitcast i8* %3 to i64*
  store i64 %9, i64* %10, align 1
  %11 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %0, i64 0, i32 1
  store i32 2, i32* %11, align 4
  %12 = load i8*, i8** %7, align 8
  %13 = load i8, i8* %12, align 1
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %15, label %19

15:                                               ; preds = %6
  %16 = getelementptr inbounds i8, i8* %12, i64 1
  %17 = load i8, i8* %16, align 1
  %18 = icmp eq i8 %17, 0
  br i1 %18, label %30, label %19

19:                                               ; preds = %46, %42, %38, %34, %30, %15, %6
  %20 = phi i64 [ 0, %6 ], [ 1, %15 ], [ 2, %30 ], [ 3, %34 ], [ 4, %38 ], [ 5, %42 ], [ %50, %46 ]
  %21 = trunc i64 %20 to i32
  %22 = sub nuw nsw i32 8, %21
  %23 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %0, i64 0, i32 0
  store i32 %22, i32* %23, align 8
  %24 = icmp eq i32 %22, 0
  br i1 %24, label %28, label %25

25:                                               ; preds = %19
  %26 = zext i32 %22 to i64
  %27 = getelementptr inbounds i8, i8* %12, i64 %20
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %12, i8* align 1 %27, i64 %26, i1 false) #5
  br label %28

28:                                               ; preds = %25, %19, %5
  %29 = phi i32 [ 0, %5 ], [ 1, %19 ], [ 1, %25 ]
  ret i32 %29

30:                                               ; preds = %15
  %31 = getelementptr inbounds i8, i8* %12, i64 2
  %32 = load i8, i8* %31, align 1
  %33 = icmp eq i8 %32, 0
  br i1 %33, label %34, label %19

34:                                               ; preds = %30
  %35 = getelementptr inbounds i8, i8* %12, i64 3
  %36 = load i8, i8* %35, align 1
  %37 = icmp eq i8 %36, 0
  br i1 %37, label %38, label %19

38:                                               ; preds = %34
  %39 = getelementptr inbounds i8, i8* %12, i64 4
  %40 = load i8, i8* %39, align 1
  %41 = icmp eq i8 %40, 0
  br i1 %41, label %42, label %19

42:                                               ; preds = %38
  %43 = getelementptr inbounds i8, i8* %12, i64 5
  %44 = load i8, i8* %43, align 1
  %45 = icmp eq i8 %44, 0
  br i1 %45, label %46, label %19

46:                                               ; preds = %42
  %47 = getelementptr inbounds i8, i8* %12, i64 6
  %48 = load i8, i8* %47, align 1
  %49 = icmp eq i8 %48, 0
  %50 = select i1 %49, i64 7, i64 6
  br label %19
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @ASN1_INTEGER_get(%struct.asn1_string_st* readonly) local_unnamed_addr #3 {
  %2 = icmp eq %struct.asn1_string_st* %0, null
  br i1 %2, label %80, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %0, i64 0, i32 1
  %5 = load i32, i32* %4, align 4
  switch i32 %5, label %80 [
    i32 258, label %7
    i32 2, label %6
  ]

6:                                                ; preds = %3
  br label %7

7:                                                ; preds = %3, %6
  %8 = phi i32 [ 1, %3 ], [ 0, %6 ]
  %9 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %0, i64 0, i32 0
  %10 = load i32, i32* %9, align 8
  %11 = icmp sgt i32 %10, 8
  br i1 %11, label %80, label %12

12:                                               ; preds = %7
  %13 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %0, i64 0, i32 2
  %14 = load i8*, i8** %13, align 8
  %15 = icmp ne i8* %14, null
  %16 = icmp sgt i32 %10, 0
  %17 = and i1 %15, %16
  br i1 %17, label %18, label %75

18:                                               ; preds = %12
  %19 = zext i32 %10 to i64
  %20 = add nsw i64 %19, -1
  %21 = and i64 %19, 3
  %22 = icmp ult i64 %20, 3
  br i1 %22, label %55, label %23

23:                                               ; preds = %18
  %24 = sub nsw i64 %19, %21
  br label %25

25:                                               ; preds = %25, %23
  %26 = phi i64 [ 0, %23 ], [ %52, %25 ]
  %27 = phi i64 [ 0, %23 ], [ %51, %25 ]
  %28 = phi i64 [ %24, %23 ], [ %53, %25 ]
  %29 = shl i64 %27, 8
  %30 = getelementptr inbounds i8, i8* %14, i64 %26
  %31 = load i8, i8* %30, align 1
  %32 = zext i8 %31 to i64
  %33 = or i64 %29, %32
  %34 = or i64 %26, 1
  %35 = shl i64 %33, 8
  %36 = getelementptr inbounds i8, i8* %14, i64 %34
  %37 = load i8, i8* %36, align 1
  %38 = zext i8 %37 to i64
  %39 = or i64 %35, %38
  %40 = or i64 %26, 2
  %41 = shl i64 %39, 8
  %42 = getelementptr inbounds i8, i8* %14, i64 %40
  %43 = load i8, i8* %42, align 1
  %44 = zext i8 %43 to i64
  %45 = or i64 %41, %44
  %46 = or i64 %26, 3
  %47 = shl i64 %45, 8
  %48 = getelementptr inbounds i8, i8* %14, i64 %46
  %49 = load i8, i8* %48, align 1
  %50 = zext i8 %49 to i64
  %51 = or i64 %47, %50
  %52 = add nuw nsw i64 %26, 4
  %53 = add i64 %28, -4
  %54 = icmp eq i64 %53, 0
  br i1 %54, label %55, label %25

55:                                               ; preds = %25, %18
  %56 = phi i64 [ undef, %18 ], [ %51, %25 ]
  %57 = phi i64 [ 0, %18 ], [ %52, %25 ]
  %58 = phi i64 [ 0, %18 ], [ %51, %25 ]
  %59 = icmp eq i64 %21, 0
  br i1 %59, label %72, label %60

60:                                               ; preds = %55, %60
  %61 = phi i64 [ %69, %60 ], [ %57, %55 ]
  %62 = phi i64 [ %68, %60 ], [ %58, %55 ]
  %63 = phi i64 [ %70, %60 ], [ %21, %55 ]
  %64 = shl i64 %62, 8
  %65 = getelementptr inbounds i8, i8* %14, i64 %61
  %66 = load i8, i8* %65, align 1
  %67 = zext i8 %66 to i64
  %68 = or i64 %64, %67
  %69 = add nuw nsw i64 %61, 1
  %70 = add i64 %63, -1
  %71 = icmp eq i64 %70, 0
  br i1 %71, label %72, label %60, !llvm.loop !17

72:                                               ; preds = %60, %55
  %73 = phi i64 [ %56, %55 ], [ %68, %60 ]
  %74 = icmp slt i64 %73, 0
  br i1 %74, label %80, label %75

75:                                               ; preds = %12, %72
  %76 = phi i64 [ %73, %72 ], [ 0, %12 ]
  %77 = icmp eq i32 %8, 0
  %78 = sub nsw i64 0, %76
  %79 = select i1 %77, i64 %76, i64 %78
  br label %80

80:                                               ; preds = %75, %72, %7, %3, %1
  %81 = phi i64 [ 0, %1 ], [ -1, %3 ], [ -1, %7 ], [ %79, %75 ], [ -1, %72 ]
  ret i64 %81
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.asn1_string_st* @BN_to_ASN1_INTEGER(%struct.bignum_st*, %struct.asn1_string_st*) local_unnamed_addr #0 {
  %3 = icmp eq %struct.asn1_string_st* %1, null
  br i1 %3, label %4, label %8

4:                                                ; preds = %2
  %5 = tail call %struct.asn1_string_st* @ASN1_INTEGER_new() #5
  %6 = icmp eq %struct.asn1_string_st* %5, null
  br i1 %6, label %7, label %8

7:                                                ; preds = %4
  tail call void @ERR_put_error(i32 12, i32 0, i32 158, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str, i64 0, i64 0), i32 381) #5
  br label %45

8:                                                ; preds = %2, %4
  %9 = phi %struct.asn1_string_st* [ %5, %4 ], [ %1, %2 ]
  %10 = tail call i32 @BN_is_negative(%struct.bignum_st* %0) #5
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %15, label %12

12:                                               ; preds = %8
  %13 = tail call i32 @BN_is_zero(%struct.bignum_st* %0) #5
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %16, label %15

15:                                               ; preds = %12, %8
  br label %16

16:                                               ; preds = %12, %15
  %17 = phi i32 [ 2, %15 ], [ 258, %12 ]
  %18 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %9, i64 0, i32 1
  store i32 %17, i32* %18, align 4
  %19 = tail call i32 @BN_num_bits(%struct.bignum_st* %0) #5
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %24, label %21

21:                                               ; preds = %16
  %22 = sdiv i32 %19, 8
  %23 = add nsw i32 %22, 5
  br label %24

24:                                               ; preds = %16, %21
  %25 = phi i32 [ %23, %21 ], [ 4, %16 ]
  %26 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %9, i64 0, i32 0
  %27 = load i32, i32* %26, align 8
  %28 = icmp slt i32 %27, %25
  %29 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %9, i64 0, i32 2
  %30 = load i8*, i8** %29, align 8
  br i1 %28, label %31, label %37

31:                                               ; preds = %24
  %32 = sext i32 %25 to i64
  %33 = tail call i8* @OPENSSL_realloc(i8* %30, i64 %32) #5
  %34 = icmp eq i8* %33, null
  br i1 %34, label %36, label %35

35:                                               ; preds = %31
  store i8* %33, i8** %29, align 8
  br label %37

36:                                               ; preds = %31
  tail call void @ERR_put_error(i32 12, i32 0, i32 65, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str, i64 0, i64 0), i32 393) #5
  br label %45

37:                                               ; preds = %24, %35
  %38 = phi i8* [ %33, %35 ], [ %30, %24 ]
  %39 = tail call i64 @BN_bn2bin(%struct.bignum_st* %0, i8* %38) #5
  %40 = trunc i64 %39 to i32
  store i32 %40, i32* %26, align 8
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %42, label %49

42:                                               ; preds = %37
  %43 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %9, i64 0, i32 2
  %44 = load i8*, i8** %43, align 8
  store i8 0, i8* %44, align 1
  store i32 1, i32* %26, align 8
  br label %49

45:                                               ; preds = %36, %7
  %46 = phi %struct.asn1_string_st* [ %9, %36 ], [ null, %7 ]
  %47 = icmp eq %struct.asn1_string_st* %46, %1
  br i1 %47, label %49, label %48

48:                                               ; preds = %45
  tail call void @ASN1_INTEGER_free(%struct.asn1_string_st* %46) #5
  br label %49

49:                                               ; preds = %48, %45, %42, %37
  %50 = phi %struct.asn1_string_st* [ %9, %37 ], [ %9, %42 ], [ null, %45 ], [ null, %48 ]
  ret %struct.asn1_string_st* %50
}

declare i32 @BN_is_negative(%struct.bignum_st*) local_unnamed_addr #1

declare i32 @BN_is_zero(%struct.bignum_st*) local_unnamed_addr #1

declare i32 @BN_num_bits(%struct.bignum_st*) local_unnamed_addr #1

declare i8* @OPENSSL_realloc(i8*, i64) local_unnamed_addr #1

declare i64 @BN_bn2bin(%struct.bignum_st*, i8*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden %struct.bignum_st* @ASN1_INTEGER_to_BN(%struct.asn1_string_st* nocapture readonly, %struct.bignum_st*) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %0, i64 0, i32 2
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %0, i64 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = sext i32 %6 to i64
  %8 = tail call %struct.bignum_st* @BN_bin2bn(i8* %4, i64 %7, %struct.bignum_st* %1) #5
  %9 = icmp eq %struct.bignum_st* %8, null
  br i1 %9, label %10, label %11

10:                                               ; preds = %2
  tail call void @ERR_put_error(i32 12, i32 0, i32 105, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str, i64 0, i64 0), i32 416) #5
  br label %16

11:                                               ; preds = %2
  %12 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 4
  %14 = icmp eq i32 %13, 258
  br i1 %14, label %15, label %16

15:                                               ; preds = %11
  tail call void @BN_set_negative(%struct.bignum_st* nonnull %8, i32 1) #5
  br label %16

16:                                               ; preds = %11, %15, %10
  ret %struct.bignum_st* %8
}

declare %struct.bignum_st* @BN_bin2bn(i8*, i64, %struct.bignum_st*) local_unnamed_addr #1

declare void @BN_set_negative(%struct.bignum_st*, i32) local_unnamed_addr #1

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.bswap.i64(i64) #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !8}
!10 = !{!11}
!11 = distinct !{!11, !12}
!12 = distinct !{!12, !"LVerDomain"}
!13 = !{!14}
!14 = distinct !{!14, !12}
!15 = distinct !{!15, !8}
!16 = distinct !{!16, !8}
!17 = distinct !{!17, !18}
!18 = !{!"llvm.loop.unroll.disable"}
