; ModuleID = '../../third_party/pdfium/xfa/fgas/layout/cfgas_breakline.cpp'
source_filename = "../../third_party/pdfium/xfa/fgas/layout/cfgas_breakline.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.CFGAS_BreakLine = type <{ %"class.std::__1::vector", %"class.std::__1::vector.16", i32, i32, i32, [4 x i8] }>
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %class.CFGAS_Char*, %class.CFGAS_Char*, %"class.std::__1::__compressed_pair.13" }
%class.CFGAS_Char = type <{ i8, i8, i8, i8, i32, i32, i16, i16, i16, [2 x i8], i32, i32, [4 x i8], %"class.fxcrt::RetainPtr", i16, [2 x i8], i32, i32, [4 x i8] }>
%"class.fxcrt::RetainPtr" = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %class.CFGAS_TextUserData* }
%class.CFGAS_TextUserData = type { %"class.fxcrt::Retainable", %"class.fxcrt::RetainPtr.0", %"class.fxcrt::RetainPtr.5" }
%"class.fxcrt::Retainable" = type { i32 (...)**, i64 }
%"class.fxcrt::RetainPtr.0" = type { %"class.std::__1::unique_ptr.1" }
%"class.std::__1::unique_ptr.1" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %class.CFX_CSSComputedStyle* }
%class.CFX_CSSComputedStyle = type opaque
%"class.fxcrt::RetainPtr.5" = type { %"class.std::__1::unique_ptr.6" }
%"class.std::__1::unique_ptr.6" = type { %"class.std::__1::__compressed_pair.7" }
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::__compressed_pair_elem.8" = type { %class.CFGAS_LinkUserData* }
%class.CFGAS_LinkUserData = type opaque
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem.14" }
%"struct.std::__1::__compressed_pair_elem.14" = type { %class.CFGAS_Char* }
%"class.std::__1::vector.16" = type { %"class.std::__1::__vector_base.17" }
%"class.std::__1::__vector_base.17" = type { %class.CFGAS_BreakPiece*, %class.CFGAS_BreakPiece*, %"class.std::__1::__compressed_pair.18" }
%class.CFGAS_BreakPiece = type { i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %"class.fxcrt::UnownedPtr", %"class.fxcrt::RetainPtr" }
%"class.fxcrt::UnownedPtr" = type { %"class.std::__1::vector"* }
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"struct.std::__1::__compressed_pair_elem.19" = type { %class.CFGAS_BreakPiece* }

@_ZN15CFGAS_BreakLineC1Ev = hidden unnamed_addr alias void (%class.CFGAS_BreakLine*), void (%class.CFGAS_BreakLine*)* @_ZN15CFGAS_BreakLineC2Ev
@_ZN15CFGAS_BreakLineD1Ev = hidden unnamed_addr alias void (%class.CFGAS_BreakLine*), void (%class.CFGAS_BreakLine*)* @_ZN15CFGAS_BreakLineD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN15CFGAS_BreakLineC2Ev(%class.CFGAS_BreakLine* nocapture) unnamed_addr #0 align 2 {
  %2 = bitcast %class.CFGAS_BreakLine* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 60, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN15CFGAS_BreakLineD2Ev(%class.CFGAS_BreakLine* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %0, i64 0, i32 1, i32 0, i32 0
  %3 = load %class.CFGAS_BreakPiece*, %class.CFGAS_BreakPiece** %2, align 8
  %4 = icmp eq %class.CFGAS_BreakPiece* %3, null
  br i1 %4, label %18, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %0, i64 0, i32 1, i32 0, i32 1
  %7 = load %class.CFGAS_BreakPiece*, %class.CFGAS_BreakPiece** %6, align 8
  %8 = icmp eq %class.CFGAS_BreakPiece* %7, %3
  br i1 %8, label %15, label %9

9:                                                ; preds = %5, %9
  %10 = phi %class.CFGAS_BreakPiece* [ %11, %9 ], [ %7, %5 ]
  %11 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %10, i64 -1
  tail call void @_ZN16CFGAS_BreakPieceD1Ev(%class.CFGAS_BreakPiece* %11) #6
  %12 = icmp eq %class.CFGAS_BreakPiece* %11, %3
  br i1 %12, label %13, label %9

13:                                               ; preds = %9
  %14 = load %class.CFGAS_BreakPiece*, %class.CFGAS_BreakPiece** %2, align 8
  br label %15

15:                                               ; preds = %13, %5
  %16 = phi %class.CFGAS_BreakPiece* [ %14, %13 ], [ %3, %5 ]
  store %class.CFGAS_BreakPiece* %3, %class.CFGAS_BreakPiece** %6, align 8
  %17 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %16, i64 0, i32 0
  tail call void @_ZdlPv(i8* %17) #7
  br label %18

18:                                               ; preds = %1, %15
  %19 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %0, i64 0, i32 0, i32 0, i32 0
  %20 = load %class.CFGAS_Char*, %class.CFGAS_Char** %19, align 8
  %21 = icmp eq %class.CFGAS_Char* %20, null
  br i1 %21, label %35, label %22

22:                                               ; preds = %18
  %23 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %0, i64 0, i32 0, i32 0, i32 1
  %24 = load %class.CFGAS_Char*, %class.CFGAS_Char** %23, align 8
  %25 = icmp eq %class.CFGAS_Char* %24, %20
  br i1 %25, label %32, label %26

26:                                               ; preds = %22, %26
  %27 = phi %class.CFGAS_Char* [ %28, %26 ], [ %24, %22 ]
  %28 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %27, i64 -1
  tail call void @_ZN10CFGAS_CharD1Ev(%class.CFGAS_Char* %28) #6
  %29 = icmp eq %class.CFGAS_Char* %28, %20
  br i1 %29, label %30, label %26

30:                                               ; preds = %26
  %31 = load %class.CFGAS_Char*, %class.CFGAS_Char** %19, align 8
  br label %32

32:                                               ; preds = %30, %22
  %33 = phi %class.CFGAS_Char* [ %31, %30 ], [ %20, %22 ]
  store %class.CFGAS_Char* %20, %class.CFGAS_Char** %23, align 8
  %34 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %33, i64 0, i32 0
  tail call void @_ZdlPv(i8* %34) #7
  br label %35

35:                                               ; preds = %18, %32
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %class.CFGAS_Char* @_ZN15CFGAS_BreakLine7GetCharEi(%class.CFGAS_BreakLine* nocapture readonly, i32) local_unnamed_addr #1 align 2 {
  %3 = sext i32 %1 to i64
  %4 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %0, i64 0, i32 0, i32 0, i32 0
  %5 = load %class.CFGAS_Char*, %class.CFGAS_Char** %4, align 8
  %6 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %5, i64 %3
  ret %class.CFGAS_Char* %6
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK15CFGAS_BreakLine10GetLineEndEv(%class.CFGAS_BreakLine* nocapture readonly) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %0, i64 0, i32 2
  %3 = load i32, i32* %2, align 8
  %4 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %0, i64 0, i32 3
  %5 = load i32, i32* %4, align 4
  %6 = add nsw i32 %5, %3
  ret i32 %6
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN15CFGAS_BreakLine5ClearEv(%class.CFGAS_BreakLine* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %0, i64 0, i32 0, i32 0, i32 0
  %3 = load %class.CFGAS_Char*, %class.CFGAS_Char** %2, align 8
  %4 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %0, i64 0, i32 0, i32 0, i32 1
  %5 = load %class.CFGAS_Char*, %class.CFGAS_Char** %4, align 8
  %6 = icmp eq %class.CFGAS_Char* %5, %3
  br i1 %6, label %11, label %7

7:                                                ; preds = %1, %7
  %8 = phi %class.CFGAS_Char* [ %9, %7 ], [ %5, %1 ]
  %9 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %8, i64 -1
  tail call void @_ZN10CFGAS_CharD1Ev(%class.CFGAS_Char* %9) #6
  %10 = icmp eq %class.CFGAS_Char* %9, %3
  br i1 %10, label %11, label %7

11:                                               ; preds = %7, %1
  store %class.CFGAS_Char* %3, %class.CFGAS_Char** %4, align 8
  %12 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %0, i64 0, i32 1, i32 0, i32 0
  %13 = load %class.CFGAS_BreakPiece*, %class.CFGAS_BreakPiece** %12, align 8
  %14 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %0, i64 0, i32 1, i32 0, i32 1
  %15 = load %class.CFGAS_BreakPiece*, %class.CFGAS_BreakPiece** %14, align 8
  %16 = icmp eq %class.CFGAS_BreakPiece* %15, %13
  br i1 %16, label %21, label %17

17:                                               ; preds = %11, %17
  %18 = phi %class.CFGAS_BreakPiece* [ %19, %17 ], [ %15, %11 ]
  %19 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %18, i64 -1
  tail call void @_ZN16CFGAS_BreakPieceD1Ev(%class.CFGAS_BreakPiece* %19) #6
  %20 = icmp eq %class.CFGAS_BreakPiece* %19, %13
  br i1 %20, label %21, label %17

21:                                               ; preds = %17, %11
  store %class.CFGAS_BreakPiece* %13, %class.CFGAS_BreakPiece** %14, align 8
  %22 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %0, i64 0, i32 3
  store i32 0, i32* %22, align 4
  %23 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %0, i64 0, i32 4
  store i32 0, i32* %23, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN15CFGAS_BreakLine24IncrementArabicCharCountEv(%class.CFGAS_BreakLine* nocapture) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %0, i64 0, i32 4
  %3 = load i32, i32* %2, align 8
  %4 = add nsw i32 %3, 1
  store i32 %4, i32* %2, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN15CFGAS_BreakLine24DecrementArabicCharCountEv(%class.CFGAS_BreakLine* nocapture) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %0, i64 0, i32 4
  %3 = load i32, i32* %2, align 8
  %4 = add nsw i32 %3, -1
  store i32 %4, i32* %2, align 8
  ret void
}

; Function Attrs: nounwind
declare void @_ZN10CFGAS_CharD1Ev(%class.CFGAS_Char*) unnamed_addr #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN16CFGAS_BreakPieceD1Ev(%class.CFGAS_BreakPiece*) unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind }
attributes #6 = { nounwind }
attributes #7 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
