; ModuleID = '../../third_party/libgav1/src/src/prediction_mask.cc'
source_filename = "../../third_party/libgav1/src/src/prediction_mask.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.libgav1::BitMaskSet" = type { i32 }
%"struct.std::nothrow_t" = type { i8 }
%"struct.std::__1::array" = type { [9 x %"struct.std::__1::array.0"] }
%"struct.std::__1::array.0" = type { [2 x %"struct.std::__1::array.1"] }
%"struct.std::__1::array.1" = type { [16 x %"class.libgav1::Array2D"] }
%"class.libgav1::Array2D" = type { %"class.std::__1::unique_ptr", i64, i64, %"class.libgav1::Array2DView" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.libgav1::Array2DView" = type { i32, i32, i8* }

@_ZN7libgav112_GLOBAL__N_120kWedgeMasterVerticalE = internal unnamed_addr constant [64 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\02\07\15+9>@@@@@@@@@@@@@@@@@@@@@@@@@@@@@", align 16
@_ZN7libgav112_GLOBAL__N_123kWedgeMasterObliqueEvenE = internal unnamed_addr constant [96 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\01\04\0B\1B.:>?@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@", align 16
@_ZN7libgav112_GLOBAL__N_122kWedgeMasterObliqueOddE = internal unnamed_addr constant [96 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\01\02\06\12%5<?@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@", align 16
@_ZN7libgav117kBlockWidthPixelsE = external local_unnamed_addr constant [22 x i8], align 16
@_ZN7libgav118kBlockHeightPixelsE = external local_unnamed_addr constant [22 x i8], align 16
@_ZN7libgav112_GLOBAL__N_119kWedgeFlipSignMasksE = internal unnamed_addr constant [9 x %"class.libgav1::BitMaskSet"] [%"class.libgav1::BitMaskSet" { i32 48127 }, %"class.libgav1::BitMaskSet" { i32 48111 }, %"class.libgav1::BitMaskSet" { i32 47855 }, %"class.libgav1::BitMaskSet" { i32 48111 }, %"class.libgav1::BitMaskSet" { i32 48127 }, %"class.libgav1::BitMaskSet" { i32 48111 }, %"class.libgav1::BitMaskSet" { i32 44015 }, %"class.libgav1::BitMaskSet" { i32 48111 }, %"class.libgav1::BitMaskSet" { i32 48127 }], align 16
@_ZN7libgav112_GLOBAL__N_114kWedgeCodebookE = internal unnamed_addr constant [3 x [16 x [3 x i8]]] [[16 x [3 x i8]] [[3 x i8] c"\02\04\04", [3 x i8] c"\03\04\04", [3 x i8] c"\04\04\04", [3 x i8] c"\05\04\04", [3 x i8] c"\00\04\02", [3 x i8] c"\00\04\04", [3 x i8] c"\00\04\06", [3 x i8] c"\01\04\04", [3 x i8] c"\02\04\02", [3 x i8] c"\02\04\06", [3 x i8] c"\05\04\02", [3 x i8] c"\05\04\06", [3 x i8] c"\03\02\04", [3 x i8] c"\03\06\04", [3 x i8] c"\04\02\04", [3 x i8] c"\04\06\04"], [16 x [3 x i8]] [[3 x i8] c"\02\04\04", [3 x i8] c"\03\04\04", [3 x i8] c"\04\04\04", [3 x i8] c"\05\04\04", [3 x i8] c"\01\02\04", [3 x i8] c"\01\04\04", [3 x i8] c"\01\06\04", [3 x i8] c"\00\04\04", [3 x i8] c"\02\04\02", [3 x i8] c"\02\04\06", [3 x i8] c"\05\04\02", [3 x i8] c"\05\04\06", [3 x i8] c"\03\02\04", [3 x i8] c"\03\06\04", [3 x i8] c"\04\02\04", [3 x i8] c"\04\06\04"], [16 x [3 x i8]] [[3 x i8] c"\02\04\04", [3 x i8] c"\03\04\04", [3 x i8] c"\04\04\04", [3 x i8] c"\05\04\04", [3 x i8] c"\00\04\02", [3 x i8] c"\00\04\06", [3 x i8] c"\01\02\04", [3 x i8] c"\01\06\04", [3 x i8] c"\02\04\02", [3 x i8] c"\02\04\06", [3 x i8] c"\05\04\02", [3 x i8] c"\05\04\06", [3 x i8] c"\03\02\04", [3 x i8] c"\03\06\04", [3 x i8] c"\04\02\04", [3 x i8] c"\04\06\04"]], align 16
@_ZN7libgav117kNum4x4BlocksWideE = external local_unnamed_addr constant [22 x i8], align 16
@_ZN7libgav117kNum4x4BlocksHighE = external local_unnamed_addr constant [22 x i8], align 16
@_ZSt7nothrow = external global %"struct.std::nothrow_t", align 1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN7libgav117GenerateWedgeMaskEPNSt3__15arrayINS1_INS1_INS_7Array2DIhEELm16EEELm2EEELm9EEE(%"struct.std::__1::array"* nocapture) local_unnamed_addr #0 {
  %2 = alloca [6 x [64 x [64 x i8]]], align 16
  %3 = getelementptr inbounds [6 x [64 x [64 x i8]]], [6 x [64 x [64 x i8]]]* %2, i64 0, i64 0, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 24576, i8* nonnull %3) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %3, i8 -86, i64 24576, i1 false)
  br label %4

4:                                                ; preds = %4, %1
  %5 = phi i64 [ 0, %1 ], [ %13, %4 ]
  %6 = getelementptr inbounds [6 x [64 x [64 x i8]]], [6 x [64 x [64 x i8]]]* %2, i64 0, i64 1, i64 %5, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %6, i8* align 16 getelementptr inbounds ([64 x i8], [64 x i8]* @_ZN7libgav112_GLOBAL__N_120kWedgeMasterVerticalE, i64 0, i64 0), i64 64, i1 false)
  %7 = or i64 %5, 1
  %8 = getelementptr inbounds [6 x [64 x [64 x i8]]], [6 x [64 x [64 x i8]]]* %2, i64 0, i64 1, i64 %7, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %8, i8* align 16 getelementptr inbounds ([64 x i8], [64 x i8]* @_ZN7libgav112_GLOBAL__N_120kWedgeMasterVerticalE, i64 0, i64 0), i64 64, i1 false)
  %9 = or i64 %5, 2
  %10 = getelementptr inbounds [6 x [64 x [64 x i8]]], [6 x [64 x [64 x i8]]]* %2, i64 0, i64 1, i64 %9, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %10, i8* align 16 getelementptr inbounds ([64 x i8], [64 x i8]* @_ZN7libgav112_GLOBAL__N_120kWedgeMasterVerticalE, i64 0, i64 0), i64 64, i1 false)
  %11 = or i64 %5, 3
  %12 = getelementptr inbounds [6 x [64 x [64 x i8]]], [6 x [64 x [64 x i8]]]* %2, i64 0, i64 1, i64 %11, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %12, i8* align 16 getelementptr inbounds ([64 x i8], [64 x i8]* @_ZN7libgav112_GLOBAL__N_120kWedgeMasterVerticalE, i64 0, i64 0), i64 64, i1 false)
  %13 = add nuw nsw i64 %5, 4
  %14 = icmp eq i64 %13, 64
  br i1 %14, label %15, label %4

15:                                               ; preds = %4, %15
  %16 = phi i64 [ %30, %15 ], [ 0, %4 ]
  %17 = phi i64 [ %31, %15 ], [ 0, %4 ]
  %18 = getelementptr inbounds [6 x [64 x [64 x i8]]], [6 x [64 x [64 x i8]]]* %2, i64 0, i64 3, i64 %16, i64 0
  %19 = getelementptr inbounds [96 x i8], [96 x i8]* @_ZN7libgav112_GLOBAL__N_123kWedgeMasterObliqueEvenE, i64 0, i64 %17
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %18, i8* align 2 %19, i64 64, i1 false)
  %20 = or i64 %16, 1
  %21 = getelementptr inbounds [6 x [64 x [64 x i8]]], [6 x [64 x [64 x i8]]]* %2, i64 0, i64 3, i64 %20, i64 0
  %22 = getelementptr inbounds [96 x i8], [96 x i8]* @_ZN7libgav112_GLOBAL__N_122kWedgeMasterObliqueOddE, i64 0, i64 %17
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %21, i8* align 2 %22, i64 64, i1 false)
  %23 = or i64 %16, 2
  %24 = or i64 %17, 1
  %25 = getelementptr inbounds [6 x [64 x [64 x i8]]], [6 x [64 x [64 x i8]]]* %2, i64 0, i64 3, i64 %23, i64 0
  %26 = getelementptr inbounds [96 x i8], [96 x i8]* @_ZN7libgav112_GLOBAL__N_123kWedgeMasterObliqueEvenE, i64 0, i64 %24
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %25, i8* align 1 %26, i64 64, i1 false)
  %27 = or i64 %16, 3
  %28 = getelementptr inbounds [6 x [64 x [64 x i8]]], [6 x [64 x [64 x i8]]]* %2, i64 0, i64 3, i64 %27, i64 0
  %29 = getelementptr inbounds [96 x i8], [96 x i8]* @_ZN7libgav112_GLOBAL__N_122kWedgeMasterObliqueOddE, i64 0, i64 %24
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %28, i8* align 1 %29, i64 64, i1 false)
  %30 = add nuw nsw i64 %16, 4
  %31 = add nuw nsw i64 %17, 2
  %32 = icmp eq i64 %31, 32
  br i1 %32, label %33, label %15

33:                                               ; preds = %15, %35
  %34 = phi i64 [ %36, %35 ], [ 0, %15 ]
  br label %38

35:                                               ; preds = %38
  %36 = add nuw nsw i64 %34, 1
  %37 = icmp eq i64 %36, 64
  br i1 %37, label %52, label %33

38:                                               ; preds = %38, %33
  %39 = phi i64 [ 0, %33 ], [ %50, %38 ]
  %40 = getelementptr inbounds [6 x [64 x [64 x i8]]], [6 x [64 x [64 x i8]]]* %2, i64 0, i64 3, i64 %34, i64 %39
  %41 = load i8, i8* %40, align 1
  %42 = getelementptr inbounds [6 x [64 x [64 x i8]]], [6 x [64 x [64 x i8]]]* %2, i64 0, i64 1, i64 %34, i64 %39
  %43 = load i8, i8* %42, align 1
  %44 = getelementptr inbounds [6 x [64 x [64 x i8]]], [6 x [64 x [64 x i8]]]* %2, i64 0, i64 0, i64 %39, i64 %34
  store i8 %43, i8* %44, align 1
  %45 = getelementptr inbounds [6 x [64 x [64 x i8]]], [6 x [64 x [64 x i8]]]* %2, i64 0, i64 2, i64 %39, i64 %34
  store i8 %41, i8* %45, align 1
  %46 = sub i8 64, %41
  %47 = sub nuw nsw i64 63, %39
  %48 = getelementptr inbounds [6 x [64 x [64 x i8]]], [6 x [64 x [64 x i8]]]* %2, i64 0, i64 4, i64 %34, i64 %47
  store i8 %46, i8* %48, align 1
  %49 = getelementptr inbounds [6 x [64 x [64 x i8]]], [6 x [64 x [64 x i8]]]* %2, i64 0, i64 5, i64 %47, i64 %34
  store i8 %46, i8* %49, align 1
  %50 = add nuw nsw i64 %39, 1
  %51 = icmp eq i64 %50, 64
  br i1 %51, label %35, label %38

52:                                               ; preds = %35, %277
  %53 = phi i64 [ %279, %277 ], [ 4, %35 ]
  %54 = phi i32 [ %278, %277 ], [ 0, %35 ]
  %55 = trunc i64 %53 to i32
  %56 = shl i32 1, %55
  %57 = and i32 %56, 30576
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %277, label %59

59:                                               ; preds = %52
  %60 = getelementptr inbounds [22 x i8], [22 x i8]* @_ZN7libgav117kBlockWidthPixelsE, i64 0, i64 %53
  %61 = load i8, i8* %60, align 1
  %62 = zext i8 %61 to i32
  %63 = getelementptr inbounds [22 x i8], [22 x i8]* @_ZN7libgav118kBlockHeightPixelsE, i64 0, i64 %53
  %64 = load i8, i8* %63, align 1
  %65 = zext i8 %64 to i32
  %66 = getelementptr inbounds [22 x i8], [22 x i8]* @_ZN7libgav117kNum4x4BlocksWideE, i64 0, i64 %53
  %67 = load i8, i8* %66, align 1
  %68 = getelementptr inbounds [22 x i8], [22 x i8]* @_ZN7libgav117kNum4x4BlocksHighE, i64 0, i64 %53
  %69 = load i8, i8* %68, align 1
  %70 = icmp ugt i8 %69, %67
  %71 = icmp ult i8 %69, %67
  %72 = select i1 %71, i64 1, i64 2
  %73 = select i1 %70, i64 0, i64 %72
  %74 = sext i32 %54 to i64
  %75 = mul nuw nsw i32 %65, %62
  %76 = zext i32 %75 to i64
  %77 = icmp eq i8 %64, 0
  %78 = zext i8 %61 to i64
  %79 = icmp eq i8 %61, 0
  %80 = getelementptr inbounds [9 x %"class.libgav1::BitMaskSet"], [9 x %"class.libgav1::BitMaskSet"]* @_ZN7libgav112_GLOBAL__N_119kWedgeFlipSignMasksE, i64 0, i64 %74, i32 0
  %81 = zext i8 %61 to i64
  %82 = and i64 %78, 224
  %83 = add nsw i64 %82, -32
  %84 = lshr exact i64 %83, 5
  %85 = add nuw nsw i64 %84, 1
  %86 = icmp ult i8 %61, 32
  %87 = and i64 %78, 224
  %88 = and i64 %85, 1
  %89 = icmp eq i64 %83, 0
  %90 = sub nuw nsw i64 %85, %88
  %91 = icmp eq i64 %88, 0
  %92 = icmp eq i64 %87, %78
  %93 = and i64 %78, 3
  %94 = icmp eq i64 %93, 0
  br label %97

95:                                               ; preds = %274
  %96 = add nsw i32 %54, 1
  br label %277

97:                                               ; preds = %274, %59
  %98 = phi i64 [ 0, %59 ], [ %275, %274 ]
  %99 = getelementptr inbounds [3 x [16 x [3 x i8]]], [3 x [16 x [3 x i8]]]* @_ZN7libgav112_GLOBAL__N_114kWedgeCodebookE, i64 0, i64 %73, i64 %98, i64 0
  %100 = load i8, i8* %99, align 1
  %101 = getelementptr inbounds [3 x [16 x [3 x i8]]], [3 x [16 x [3 x i8]]]* @_ZN7libgav112_GLOBAL__N_114kWedgeCodebookE, i64 0, i64 %73, i64 %98, i64 1
  %102 = load i8, i8* %101, align 1
  %103 = zext i8 %102 to i32
  %104 = mul nuw nsw i32 %103, %62
  %105 = lshr i32 %104, 3
  %106 = sub nsw i32 32, %105
  %107 = getelementptr inbounds [3 x [16 x [3 x i8]]], [3 x [16 x [3 x i8]]]* @_ZN7libgav112_GLOBAL__N_114kWedgeCodebookE, i64 0, i64 %73, i64 %98, i64 2
  %108 = load i8, i8* %107, align 1
  %109 = zext i8 %108 to i32
  %110 = mul nuw nsw i32 %109, %65
  %111 = lshr i32 %110, 3
  %112 = sub nsw i32 32, %111
  %113 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %0, i64 0, i32 0, i64 %74, i32 0, i64 0, i32 0, i64 %98
  %114 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %0, i64 0, i32 0, i64 %74, i32 0, i64 0, i32 0, i64 %98, i32 2
  store i64 %76, i64* %114, align 8
  %115 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %0, i64 0, i32 0, i64 %74, i32 0, i64 0, i32 0, i64 %98, i32 1
  %116 = load i64, i64* %115, align 8
  %117 = icmp ult i64 %116, %76
  br i1 %117, label %121, label %118

118:                                              ; preds = %97
  %119 = bitcast %"class.libgav1::Array2D"* %113 to i64*
  %120 = load i64, i64* %119, align 8
  br label %134

121:                                              ; preds = %97
  %122 = tail call noalias i8* @_ZnamRKSt9nothrow_t(i64 %76, %"struct.std::nothrow_t"* dereferenceable(1) @_ZSt7nothrow) #5
  %123 = getelementptr inbounds %"class.libgav1::Array2D", %"class.libgav1::Array2D"* %113, i64 0, i32 0, i32 0, i32 0, i32 0
  %124 = load i8*, i8** %123, align 8
  store i8* %122, i8** %123, align 8
  %125 = icmp eq i8* %124, null
  br i1 %125, label %128, label %126

126:                                              ; preds = %121
  tail call void @_ZdaPv(i8* nonnull %124) #5
  %127 = load i8*, i8** %123, align 8
  br label %128

128:                                              ; preds = %126, %121
  %129 = phi i8* [ %127, %126 ], [ %122, %121 ]
  %130 = icmp eq i8* %129, null
  br i1 %130, label %281, label %131

131:                                              ; preds = %128
  %132 = ptrtoint i8* %129 to i64
  %133 = load i64, i64* %114, align 8
  store i64 %133, i64* %115, align 8
  br label %134

134:                                              ; preds = %118, %131
  %135 = phi i64 [ %120, %118 ], [ %132, %131 ]
  %136 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %0, i64 0, i32 0, i64 %74, i32 0, i64 0, i32 0, i64 %98, i32 3, i32 0
  store i32 %65, i32* %136, align 8
  %137 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %0, i64 0, i32 0, i64 %74, i32 0, i64 0, i32 0, i64 %98, i32 3, i32 1
  store i32 %62, i32* %137, align 4
  %138 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %0, i64 0, i32 0, i64 %74, i32 0, i64 0, i32 0, i64 %98, i32 3, i32 2
  %139 = bitcast i8** %138 to i64*
  store i64 %135, i64* %139, align 8
  %140 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %0, i64 0, i32 0, i64 %74, i32 0, i64 1, i32 0, i64 %98
  %141 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %0, i64 0, i32 0, i64 %74, i32 0, i64 1, i32 0, i64 %98, i32 2
  store i64 %76, i64* %141, align 8
  %142 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %0, i64 0, i32 0, i64 %74, i32 0, i64 1, i32 0, i64 %98, i32 1
  %143 = load i64, i64* %142, align 8
  %144 = icmp ult i64 %143, %76
  br i1 %144, label %285, label %145

145:                                              ; preds = %134
  %146 = bitcast %"class.libgav1::Array2D"* %140 to i64*
  %147 = load i64, i64* %146, align 8
  br label %298

148:                                              ; preds = %298
  %149 = zext i8 %100 to i64
  %150 = and i32 %112, 255
  %151 = zext i32 %150 to i64
  %152 = and i32 %106, 255
  %153 = zext i32 %152 to i64
  %154 = getelementptr inbounds [6 x [64 x [64 x i8]]], [6 x [64 x [64 x i8]]]* %2, i64 0, i64 %149, i64 %151, i64 %153
  %155 = xor i1 %308, true
  %156 = zext i1 %155 to i64
  %157 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %0, i64 0, i32 0, i64 %74, i32 0, i64 %156, i32 0, i64 %98, i32 3, i32 2
  %158 = load i8*, i8** %157, align 8
  %159 = zext i1 %308 to i64
  %160 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %0, i64 0, i32 0, i64 %74, i32 0, i64 %159, i32 0, i64 %98, i32 3, i32 2
  %161 = load i8*, i8** %160, align 8
  br label %162

162:                                              ; preds = %244, %148
  %163 = phi i64 [ %250, %244 ], [ 0, %148 ]
  %164 = phi i32 [ %248, %244 ], [ 0, %148 ]
  %165 = phi i8* [ %247, %244 ], [ %154, %148 ]
  %166 = phi i8* [ %246, %244 ], [ %158, %148 ]
  %167 = phi i8* [ %245, %244 ], [ %161, %148 ]
  %168 = mul i64 %163, %78
  %169 = getelementptr i8, i8* %158, i64 %168
  %170 = add i64 %168, %78
  %171 = getelementptr i8, i8* %158, i64 %170
  %172 = getelementptr i8, i8* %161, i64 %168
  %173 = getelementptr i8, i8* %161, i64 %170
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %167, i8* align 1 %165, i64 %78, i1 false)
  br i1 %79, label %244, label %174

174:                                              ; preds = %162
  br i1 %86, label %175, label %192

175:                                              ; preds = %243, %192, %174
  %176 = phi i64 [ 0, %192 ], [ 0, %174 ], [ %87, %243 ]
  %177 = xor i64 %176, -1
  %178 = add nsw i64 %177, %78
  br i1 %94, label %189, label %179

179:                                              ; preds = %175, %179
  %180 = phi i64 [ %186, %179 ], [ %176, %175 ]
  %181 = phi i64 [ %187, %179 ], [ %93, %175 ]
  %182 = getelementptr inbounds i8, i8* %167, i64 %180
  %183 = load i8, i8* %182, align 1
  %184 = sub i8 64, %183
  %185 = getelementptr inbounds i8, i8* %166, i64 %180
  store i8 %184, i8* %185, align 1
  %186 = add nuw nsw i64 %180, 1
  %187 = add i64 %181, -1
  %188 = icmp eq i64 %187, 0
  br i1 %188, label %189, label %179, !llvm.loop !2

189:                                              ; preds = %179, %175
  %190 = phi i64 [ %176, %175 ], [ %186, %179 ]
  %191 = icmp ult i64 %178, 3
  br i1 %191, label %244, label %251

192:                                              ; preds = %174
  %193 = icmp ult i8* %169, %173
  %194 = icmp ult i8* %172, %171
  %195 = and i1 %193, %194
  br i1 %195, label %175, label %196

196:                                              ; preds = %192
  br i1 %89, label %228, label %197

197:                                              ; preds = %196, %197
  %198 = phi i64 [ %225, %197 ], [ 0, %196 ]
  %199 = phi i64 [ %226, %197 ], [ %90, %196 ]
  %200 = getelementptr inbounds i8, i8* %167, i64 %198
  %201 = bitcast i8* %200 to <16 x i8>*
  %202 = load <16 x i8>, <16 x i8>* %201, align 1, !alias.scope !4
  %203 = getelementptr inbounds i8, i8* %200, i64 16
  %204 = bitcast i8* %203 to <16 x i8>*
  %205 = load <16 x i8>, <16 x i8>* %204, align 1, !alias.scope !4
  %206 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %202
  %207 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %205
  %208 = getelementptr inbounds i8, i8* %166, i64 %198
  %209 = bitcast i8* %208 to <16 x i8>*
  store <16 x i8> %206, <16 x i8>* %209, align 1, !alias.scope !7, !noalias !4
  %210 = getelementptr inbounds i8, i8* %208, i64 16
  %211 = bitcast i8* %210 to <16 x i8>*
  store <16 x i8> %207, <16 x i8>* %211, align 1, !alias.scope !7, !noalias !4
  %212 = or i64 %198, 32
  %213 = getelementptr inbounds i8, i8* %167, i64 %212
  %214 = bitcast i8* %213 to <16 x i8>*
  %215 = load <16 x i8>, <16 x i8>* %214, align 1, !alias.scope !4
  %216 = getelementptr inbounds i8, i8* %213, i64 16
  %217 = bitcast i8* %216 to <16 x i8>*
  %218 = load <16 x i8>, <16 x i8>* %217, align 1, !alias.scope !4
  %219 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %215
  %220 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %218
  %221 = getelementptr inbounds i8, i8* %166, i64 %212
  %222 = bitcast i8* %221 to <16 x i8>*
  store <16 x i8> %219, <16 x i8>* %222, align 1, !alias.scope !7, !noalias !4
  %223 = getelementptr inbounds i8, i8* %221, i64 16
  %224 = bitcast i8* %223 to <16 x i8>*
  store <16 x i8> %220, <16 x i8>* %224, align 1, !alias.scope !7, !noalias !4
  %225 = add i64 %198, 64
  %226 = add i64 %199, -2
  %227 = icmp eq i64 %226, 0
  br i1 %227, label %228, label %197, !llvm.loop !9

228:                                              ; preds = %197, %196
  %229 = phi i64 [ 0, %196 ], [ %225, %197 ]
  br i1 %91, label %243, label %230

230:                                              ; preds = %228
  %231 = getelementptr inbounds i8, i8* %167, i64 %229
  %232 = bitcast i8* %231 to <16 x i8>*
  %233 = load <16 x i8>, <16 x i8>* %232, align 1, !alias.scope !4
  %234 = getelementptr inbounds i8, i8* %231, i64 16
  %235 = bitcast i8* %234 to <16 x i8>*
  %236 = load <16 x i8>, <16 x i8>* %235, align 1, !alias.scope !4
  %237 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %233
  %238 = sub <16 x i8> <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>, %236
  %239 = getelementptr inbounds i8, i8* %166, i64 %229
  %240 = bitcast i8* %239 to <16 x i8>*
  store <16 x i8> %237, <16 x i8>* %240, align 1, !alias.scope !7, !noalias !4
  %241 = getelementptr inbounds i8, i8* %239, i64 16
  %242 = bitcast i8* %241 to <16 x i8>*
  store <16 x i8> %238, <16 x i8>* %242, align 1, !alias.scope !7, !noalias !4
  br label %243

243:                                              ; preds = %228, %230
  br i1 %92, label %244, label %175

244:                                              ; preds = %189, %251, %243, %162
  %245 = getelementptr inbounds i8, i8* %167, i64 %78
  %246 = getelementptr inbounds i8, i8* %166, i64 %78
  %247 = getelementptr inbounds i8, i8* %165, i64 64
  %248 = add nuw nsw i32 %164, 1
  %249 = icmp eq i32 %248, %65
  %250 = add i64 %163, 1
  br i1 %249, label %274, label %162

251:                                              ; preds = %189, %251
  %252 = phi i64 [ %272, %251 ], [ %190, %189 ]
  %253 = getelementptr inbounds i8, i8* %167, i64 %252
  %254 = load i8, i8* %253, align 1
  %255 = sub i8 64, %254
  %256 = getelementptr inbounds i8, i8* %166, i64 %252
  store i8 %255, i8* %256, align 1
  %257 = add nuw nsw i64 %252, 1
  %258 = getelementptr inbounds i8, i8* %167, i64 %257
  %259 = load i8, i8* %258, align 1
  %260 = sub i8 64, %259
  %261 = getelementptr inbounds i8, i8* %166, i64 %257
  store i8 %260, i8* %261, align 1
  %262 = add nuw nsw i64 %252, 2
  %263 = getelementptr inbounds i8, i8* %167, i64 %262
  %264 = load i8, i8* %263, align 1
  %265 = sub i8 64, %264
  %266 = getelementptr inbounds i8, i8* %166, i64 %262
  store i8 %265, i8* %266, align 1
  %267 = add nuw nsw i64 %252, 3
  %268 = getelementptr inbounds i8, i8* %167, i64 %267
  %269 = load i8, i8* %268, align 1
  %270 = sub i8 64, %269
  %271 = getelementptr inbounds i8, i8* %166, i64 %267
  store i8 %270, i8* %271, align 1
  %272 = add nuw nsw i64 %252, 4
  %273 = icmp eq i64 %272, %81
  br i1 %273, label %244, label %251, !llvm.loop !11

274:                                              ; preds = %244, %298
  %275 = add nuw nsw i64 %98, 1
  %276 = icmp eq i64 %275, 16
  br i1 %276, label %95, label %97

277:                                              ; preds = %52, %95
  %278 = phi i32 [ %54, %52 ], [ %96, %95 ]
  %279 = add nuw nsw i64 %53, 1
  %280 = icmp eq i64 %279, 15
  br i1 %280, label %283, label %52

281:                                              ; preds = %292, %128
  %282 = phi i64* [ %115, %128 ], [ %142, %292 ]
  store i64 0, i64* %282, align 8
  br label %283

283:                                              ; preds = %277, %281
  %284 = phi i1 [ false, %281 ], [ true, %277 ]
  call void @llvm.lifetime.end.p0i8(i64 24576, i8* nonnull %3) #4
  ret i1 %284

285:                                              ; preds = %134
  %286 = tail call noalias i8* @_ZnamRKSt9nothrow_t(i64 %76, %"struct.std::nothrow_t"* dereferenceable(1) @_ZSt7nothrow) #5
  %287 = getelementptr inbounds %"class.libgav1::Array2D", %"class.libgav1::Array2D"* %140, i64 0, i32 0, i32 0, i32 0, i32 0
  %288 = load i8*, i8** %287, align 8
  store i8* %286, i8** %287, align 8
  %289 = icmp eq i8* %288, null
  br i1 %289, label %292, label %290

290:                                              ; preds = %285
  tail call void @_ZdaPv(i8* nonnull %288) #5
  %291 = load i8*, i8** %287, align 8
  br label %292

292:                                              ; preds = %290, %285
  %293 = phi i8* [ %291, %290 ], [ %286, %285 ]
  %294 = icmp eq i8* %293, null
  br i1 %294, label %281, label %295

295:                                              ; preds = %292
  %296 = ptrtoint i8* %293 to i64
  %297 = load i64, i64* %141, align 8
  store i64 %297, i64* %142, align 8
  br label %298

298:                                              ; preds = %145, %295
  %299 = phi i64 [ %147, %145 ], [ %296, %295 ]
  %300 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %0, i64 0, i32 0, i64 %74, i32 0, i64 1, i32 0, i64 %98, i32 3, i32 0
  store i32 %65, i32* %300, align 8
  %301 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %0, i64 0, i32 0, i64 %74, i32 0, i64 1, i32 0, i64 %98, i32 3, i32 1
  store i32 %62, i32* %301, align 4
  %302 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %0, i64 0, i32 0, i64 %74, i32 0, i64 1, i32 0, i64 %98, i32 3, i32 2
  %303 = bitcast i8** %302 to i64*
  store i64 %299, i64* %303, align 8
  %304 = load i32, i32* %80, align 4
  %305 = trunc i64 %98 to i32
  %306 = shl i32 1, %305
  %307 = and i32 %304, %306
  %308 = icmp ne i32 %307, 0
  br i1 %77, label %274, label %148
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nobuiltin nofree nounwind
declare noalias i8* @_ZnamRKSt9nothrow_t(i64, %"struct.std::nothrow_t"* dereferenceable(1)) local_unnamed_addr #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nobuiltin nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = !{!5}
!5 = distinct !{!5, !6}
!6 = distinct !{!6, !"LVerDomain"}
!7 = !{!8}
!8 = distinct !{!8, !6}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.isvectorized", i32 1}
!11 = distinct !{!11, !10}
