; ModuleID = '../../media/filters/ffmpeg_glue.cc'
source_filename = "../../media/filters/ffmpeg_glue.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.media::FFmpegGlue" = type <{ i8, i8, [6 x i8], %struct.AVFormatContext*, %"class.std::__1::unique_ptr", i32, [4 x i8] }>
%struct.AVFormatContext = type { %struct.AVClass*, %struct.AVInputFormat*, %struct.AVOutputFormat*, i8*, %struct.AVIOContext*, i32, i32, %struct.AVStream**, [1024 x i8], i8*, i64, i64, i64, i32, i32, i32, i64, i64, i8*, i32, i32, %struct.AVProgram**, i32, i32, i32, i32, i32, i32, %struct.AVChapter**, %struct.AVDictionary*, i64, i32, i32, %struct.AVIOInterruptCB, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i32, i32, i32, i32, i32, i8*, i8*, %struct.AVFormatInternal*, i32, %struct.AVCodec*, %struct.AVCodec*, %struct.AVCodec*, %struct.AVCodec*, i32, i8*, i32 (%struct.AVFormatContext*, i32, i8*, i64)*, i64, i8*, i32, i32 (%struct.AVFormatContext*, %struct.AVIOContext**, i8*, i32, %struct.AVIOInterruptCB*, %struct.AVDictionary**)*, i8*, i32 (%struct.AVFormatContext*, %struct.AVIOContext**, i8*, i32, %struct.AVDictionary**)*, void (%struct.AVFormatContext*, %struct.AVIOContext*)*, i8*, i32, i32, i32 }
%struct.AVClass = type { i8*, i8* (i8*)*, %struct.AVOption*, i32, i32, i32, i8* (i8*, i8*)*, %struct.AVClass* (%struct.AVClass*)*, i32, i32 (i8*)*, i32 (%struct.AVOptionRanges**, i8*, i8*, i32)*, %struct.AVClass* (i8**)* }
%struct.AVOption = type { i8*, i8*, i32, i32, %union.anon, double, double, i32, i8* }
%union.anon = type { i64 }
%struct.AVOptionRanges = type { %struct.AVOptionRange**, i32, i32 }
%struct.AVOptionRange = type { i8*, double, double, double, double, i32 }
%struct.AVInputFormat = type { i8*, i8*, i32, i8*, %struct.AVCodecTag**, %struct.AVClass*, i8*, %struct.AVInputFormat*, i32, i32, i32 (%struct.AVProbeData*)*, i32 (%struct.AVFormatContext*)*, i32 (%struct.AVFormatContext*, %struct.AVPacket*)*, i32 (%struct.AVFormatContext*)*, i32 (%struct.AVFormatContext*, i32, i64, i32)*, i64 (%struct.AVFormatContext*, i32, i64*, i64)*, i32 (%struct.AVFormatContext*)*, i32 (%struct.AVFormatContext*)*, i32 (%struct.AVFormatContext*, i32, i64, i64, i64, i32)*, i32 (%struct.AVFormatContext*, %struct.AVDeviceInfoList*)*, i32 (%struct.AVFormatContext*, %struct.AVDeviceCapabilitiesQuery*)*, i32 (%struct.AVFormatContext*, %struct.AVDeviceCapabilitiesQuery*)* }
%struct.AVCodecTag = type opaque
%struct.AVProbeData = type { i8*, i8*, i32, i8* }
%struct.AVPacket = type { %struct.AVBufferRef*, i64, i64, i8*, i32, i32, i32, %struct.AVPacketSideData*, i32, i64, i64, i64 }
%struct.AVBufferRef = type { %struct.AVBuffer*, i8*, i32 }
%struct.AVBuffer = type opaque
%struct.AVPacketSideData = type { i8*, i32, i32 }
%struct.AVDeviceInfoList = type opaque
%struct.AVDeviceCapabilitiesQuery = type opaque
%struct.AVOutputFormat = type { i8*, i8*, i8*, i8*, i32, i32, i32, i32, %struct.AVCodecTag**, %struct.AVClass*, %struct.AVOutputFormat*, i32, i32 (%struct.AVFormatContext*)*, i32 (%struct.AVFormatContext*, %struct.AVPacket*)*, i32 (%struct.AVFormatContext*)*, i32 (%struct.AVFormatContext*, %struct.AVPacket*, %struct.AVPacket*, i32)*, i32 (i32, i32)*, void (%struct.AVFormatContext*, i32, i64*, i64*)*, i32 (%struct.AVFormatContext*, i32, i8*, i64)*, i32 (%struct.AVFormatContext*, i32, %struct.AVFrame**, i32)*, i32 (%struct.AVFormatContext*, %struct.AVDeviceInfoList*)*, i32 (%struct.AVFormatContext*, %struct.AVDeviceCapabilitiesQuery*)*, i32 (%struct.AVFormatContext*, %struct.AVDeviceCapabilitiesQuery*)*, i32, i32 (%struct.AVFormatContext*)*, void (%struct.AVFormatContext*)*, i32 (%struct.AVFormatContext*, %struct.AVPacket*)* }
%struct.AVFrame = type { [8 x i8*], [8 x i32], i8**, i32, i32, i32, i32, i32, i32, %struct.AVRational, i64, i64, i64, i32, i32, i32, i8*, [8 x i64], i32, i32, i32, i32, i64, i32, i64, [8 x %struct.AVBufferRef*], %struct.AVBufferRef**, i32, %struct.AVFrameSideData**, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, %struct.AVDictionary*, i32, i32, i32, i8*, i32, i32, %struct.AVBufferRef*, %struct.AVBufferRef*, %struct.AVBufferRef*, i64, i64, i64, i64, %struct.AVBufferRef* }
%struct.AVRational = type { i32, i32 }
%struct.AVFrameSideData = type { i32, i8*, i32, %struct.AVDictionary*, %struct.AVBufferRef* }
%struct.AVIOContext = type { %struct.AVClass*, i8*, i32, i8*, i8*, i8*, i32 (i8*, i8*, i32)*, i32 (i8*, i8*, i32)*, i64 (i8*, i64, i32)*, i64, i32, i32, i32, i64, i8*, i64 (i64, i8*, i32)*, i32, i32 (i8*, i32)*, i64 (i8*, i32, i64, i32)*, i32, i64, i32, i64, i32, i32, i32, i32, i8*, i8*, i32 (i8*, i8*, i32, i32, i64)*, i32, i32, i64, i32 (i8*)*, i64, i8*, i32 }
%struct.AVStream = type { i32, i32, %struct.AVCodecContext*, i8*, %struct.AVRational, i64, i64, i64, i32, i32, %struct.AVRational, %struct.AVDictionary*, %struct.AVRational, %struct.AVPacket, %struct.AVPacketSideData*, i32, i32, %struct.AVRational, i8*, %struct.AVCodecParameters*, i8*, i32, i64, i64, i64, i32, i32, i32, i32, %struct.AVCodecParserContext*, i8*, %struct.AVProbeData, [17 x i64], i8*, i32, i32, i32, i32, i32, i32, %struct.AVStreamInternal* }
%struct.AVCodecContext = type { %struct.AVClass*, i32, i32, %struct.AVCodec*, i32, i32, i8*, %struct.AVCodecInternal*, i8*, i64, i32, i32, i32, i32, i32, i8*, i32, %struct.AVRational, i32, i32, i32, i32, i32, i32, i32, i32, void (%struct.AVCodecContext*, %struct.AVFrame*, i32*, i32, i32, i32)*, i32 (%struct.AVCodecContext*, i32*)*, i32, float, i32, float, i32, i32, float, float, float, float, float, float, float, i32, i32, i32*, %struct.AVRational, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16*, i16*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i32, i32, i32 (%struct.AVCodecContext*, %struct.AVFrame*, i32)*, i32, float, float, i32, i32, i32, i32, i32, %struct.RcOverride*, i64, i64, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, void (%struct.AVCodecContext*, i8*, i32, i32)*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i32, i32, i32, i32, i32, i64, %struct.AVHWAccel*, i8*, [8 x i64], i32, i32, i32, i32, i32, %struct.AVFrame*, i32, i32, i32, i32, i32 (%struct.AVCodecContext*, i32 (%struct.AVCodecContext*, i8*)*, i8*, i32*, i32, i32)*, i32 (%struct.AVCodecContext*, i32 (%struct.AVCodecContext*, i8*, i32, i32)*, i8*, i32*, i32)*, i32, i32, i32, i32, i32, i32, i8*, i32, i64, i32, i32, %struct.AVRational, i32, %struct.AVRational, %struct.AVCodecDescriptor*, i64, i64, i64, i64, i8*, i32, i32, i32, i32, i16*, i8*, i8*, i32, %struct.AVPacketSideData*, i32, %struct.AVBufferRef*, i32, i32, i64, %struct.AVBufferRef*, i32, i32, i32, i32, i64, i32 }
%struct.AVCodecInternal = type opaque
%struct.RcOverride = type { i32, i32, i32, float }
%struct.AVHWAccel = type { i8*, i32, i32, i32, i32, i32 (%struct.AVCodecContext*, %struct.AVFrame*)*, i32 (%struct.AVCodecContext*, i8*, i32)*, i32 (%struct.AVCodecContext*, i32, i8*, i32)*, i32 (%struct.AVCodecContext*, i8*, i32)*, i32 (%struct.AVCodecContext*)*, i32, void (%struct.MpegEncContext*)*, i32 (%struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*)*, i32, i32, i32 (%struct.AVCodecContext*, %struct.AVBufferRef*)* }
%struct.MpegEncContext = type opaque
%struct.AVCodecDescriptor = type { i32, i32, i8*, i8*, i32, i8**, %struct.AVProfile* }
%struct.AVProfile = type { i32, i8* }
%struct.AVCodecParameters = type { i32, i32, i32, i8*, i32, i32, i64, i32, i32, i32, i32, i32, i32, %struct.AVRational, i32, i32, i32, i32, i32, i32, i32, i64, i32, i32, i32, i32, i32, i32, i32 }
%struct.AVCodecParserContext = type { i8*, %struct.AVCodecParser*, i64, i64, i64, i32, i32, i64, i64, i64, i64, i32, i32, [4 x i64], [4 x i64], [4 x i64], i32, i64, [4 x i64], i32, i64, i32, i32, i32, [4 x i64], i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.AVCodecParser = type { [5 x i32], i32, i32 (%struct.AVCodecParserContext*)*, i32 (%struct.AVCodecParserContext*, %struct.AVCodecContext*, i8**, i32*, i8*, i32)*, void (%struct.AVCodecParserContext*)*, i32 (%struct.AVCodecContext*, i8*, i32)*, %struct.AVCodecParser* }
%struct.AVStreamInternal = type opaque
%struct.AVProgram = type { i32, i32, i32, i32*, i32, %struct.AVDictionary*, i32, i32, i32, i32, i64, i64, i64, i32 }
%struct.AVChapter = type { i32, %struct.AVRational, i64, i64, %struct.AVDictionary* }
%struct.AVDictionary = type opaque
%struct.AVIOInterruptCB = type { i32 (i8*)*, i8* }
%struct.AVFormatInternal = type opaque
%struct.AVCodec = type { i8*, i8*, i32, i32, i32, %struct.AVRational*, i32*, i32*, i32*, i64*, i8, %struct.AVClass*, %struct.AVProfile*, i8*, i32, %struct.AVCodec*, i32 (%struct.AVCodecContext*, %struct.AVCodecContext*)*, %struct.AVCodecDefault*, void (%struct.AVCodec*)*, i32 (%struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*, i8*, i32, %struct.AVSubtitle*)*, i32 (%struct.AVCodecContext*, %struct.AVPacket*, %struct.AVFrame*, i32*)*, i32 (%struct.AVCodecContext*, i8*, i32*, %struct.AVPacket*)*, i32 (%struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*, %struct.AVPacket*)*, i32 (%struct.AVCodecContext*, %struct.AVFrame*)*, void (%struct.AVCodecContext*)*, i32, i8*, %struct.AVCodecHWConfigInternal**, i32* }
%struct.AVCodecDefault = type opaque
%struct.AVSubtitle = type { i16, i32, i32, i32, %struct.AVSubtitleRect**, i64 }
%struct.AVSubtitleRect = type { i32, i32, i32, i32, i32, %struct.AVPicture, [4 x i8*], [4 x i32], i32, i8*, i8*, i32 }
%struct.AVPicture = type { [8 x i8*], [8 x i32] }
%struct.AVCodecHWConfigInternal = type opaque
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %struct.AVIOContext* }
%"class.media::FFmpegURLProtocol" = type { i32 (...)** }

@.str = private unnamed_addr constant [24 x i8] c"mov,mp4,m4a,3gp,3g2,mj2\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"flac\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"matroska,webm\00", align 1
@.str.3 = private unnamed_addr constant [4 x i8] c"ogg\00", align 1
@.str.4 = private unnamed_addr constant [4 x i8] c"wav\00", align 1
@.str.5 = private unnamed_addr constant [4 x i8] c"aac\00", align 1
@.str.6 = private unnamed_addr constant [4 x i8] c"mp3\00", align 1
@.str.7 = private unnamed_addr constant [4 x i8] c"amr\00", align 1
@.str.8 = private unnamed_addr constant [4 x i8] c"avi\00", align 1
@.str.9 = private unnamed_addr constant [24 x i8] c"Media.DetectedContainer\00", align 1
@.str.10 = private unnamed_addr constant [30 x i8] c"Media.DetectedContainer.Local\00", align 1

@_ZN5media10FFmpegGlueC1EPNS_17FFmpegURLProtocolE = hidden unnamed_addr alias void (%"class.media::FFmpegGlue"*, %"class.media::FFmpegURLProtocol"*), void (%"class.media::FFmpegGlue"*, %"class.media::FFmpegURLProtocol"*)* @_ZN5media10FFmpegGlueC2EPNS_17FFmpegURLProtocolE
@_ZN5media10FFmpegGlueD1Ev = hidden unnamed_addr alias void (%"class.media::FFmpegGlue"*), void (%"class.media::FFmpegGlue"*)* @_ZN5media10FFmpegGlueD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5media10FFmpegGlueC2EPNS_17FFmpegURLProtocolE(%"class.media::FFmpegGlue"* nocapture, %"class.media::FFmpegURLProtocol"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.media::FFmpegGlue", %"class.media::FFmpegGlue"* %0, i64 0, i32 0
  store i8 0, i8* %3, align 8
  %4 = getelementptr inbounds %"class.media::FFmpegGlue", %"class.media::FFmpegGlue"* %0, i64 0, i32 1
  store i8 0, i8* %4, align 1
  %5 = getelementptr inbounds %"class.media::FFmpegGlue", %"class.media::FFmpegGlue"* %0, i64 0, i32 3
  %6 = getelementptr inbounds %"class.media::FFmpegGlue", %"class.media::FFmpegGlue"* %0, i64 0, i32 4
  %7 = bitcast %"class.std::__1::unique_ptr"* %6 to i64*
  %8 = bitcast %struct.AVFormatContext** %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 20, i1 false)
  %9 = tail call %struct.AVFormatContext* @avformat_alloc_context() #6
  store %struct.AVFormatContext* %9, %struct.AVFormatContext** %5, align 8
  %10 = tail call noalias i8* @av_malloc(i64 32768) #6
  %11 = bitcast %"class.media::FFmpegURLProtocol"* %1 to i8*
  %12 = tail call %struct.AVIOContext* @avio_alloc_context(i8* %10, i32 32768, i32 0, i8* %11, i32 (i8*, i8*, i32)* nonnull @_ZN5mediaL17AVIOReadOperationEPvPhi, i32 (i8*, i8*, i32)* null, i64 (i8*, i64, i32)* nonnull @_ZN5mediaL17AVIOSeekOperationEPvli) #6
  %13 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %6, i64 0, i32 0, i32 0, i32 0
  %14 = load %struct.AVIOContext*, %struct.AVIOContext** %13, align 8
  store %struct.AVIOContext* %12, %struct.AVIOContext** %13, align 8
  %15 = icmp eq %struct.AVIOContext* %14, null
  br i1 %15, label %18, label %16

16:                                               ; preds = %2
  %17 = bitcast %struct.AVIOContext* %14 to i8*
  tail call void @av_free(i8* nonnull %17) #6
  br label %18

18:                                               ; preds = %2, %16
  %19 = bitcast %"class.media::FFmpegURLProtocol"* %1 to i1 (%"class.media::FFmpegURLProtocol"*)***
  %20 = load i1 (%"class.media::FFmpegURLProtocol"*)**, i1 (%"class.media::FFmpegURLProtocol"*)*** %19, align 8
  %21 = getelementptr inbounds i1 (%"class.media::FFmpegURLProtocol"*)*, i1 (%"class.media::FFmpegURLProtocol"*)** %20, i64 4
  %22 = load i1 (%"class.media::FFmpegURLProtocol"*)*, i1 (%"class.media::FFmpegURLProtocol"*)** %21, align 8
  %23 = tail call zeroext i1 %22(%"class.media::FFmpegURLProtocol"* %1) #6
  %24 = xor i1 %23, true
  %25 = zext i1 %24 to i32
  %26 = load %struct.AVIOContext*, %struct.AVIOContext** %13, align 8
  %27 = getelementptr inbounds %struct.AVIOContext, %struct.AVIOContext* %26, i64 0, i32 19
  store i32 %25, i32* %27, align 8
  %28 = load %struct.AVIOContext*, %struct.AVIOContext** %13, align 8
  %29 = getelementptr inbounds %struct.AVIOContext, %struct.AVIOContext* %28, i64 0, i32 11
  store i32 0, i32* %29, align 4
  %30 = load %struct.AVFormatContext*, %struct.AVFormatContext** %5, align 8
  %31 = getelementptr inbounds %struct.AVFormatContext, %struct.AVFormatContext* %30, i64 0, i32 15
  %32 = load i32, i32* %31, align 8
  %33 = or i32 %32, 128
  store i32 %33, i32* %31, align 8
  %34 = load %struct.AVFormatContext*, %struct.AVFormatContext** %5, align 8
  %35 = getelementptr inbounds %struct.AVFormatContext, %struct.AVFormatContext* %34, i64 0, i32 15
  %36 = load i32, i32* %35, align 8
  %37 = or i32 %36, 524288
  store i32 %37, i32* %35, align 8
  %38 = load %struct.AVFormatContext*, %struct.AVFormatContext** %5, align 8
  %39 = getelementptr inbounds %struct.AVFormatContext, %struct.AVFormatContext* %38, i64 0, i32 15
  %40 = load i32, i32* %39, align 8
  %41 = or i32 %40, 262144
  store i32 %41, i32* %39, align 8
  %42 = load %struct.AVFormatContext*, %struct.AVFormatContext** %5, align 8
  %43 = getelementptr inbounds %struct.AVFormatContext, %struct.AVFormatContext* %42, i64 0, i32 32
  %44 = load i32, i32* %43, align 4
  %45 = or i32 %44, 8
  store i32 %45, i32* %43, align 4
  %46 = load i64, i64* %7, align 8
  %47 = load %struct.AVFormatContext*, %struct.AVFormatContext** %5, align 8
  %48 = getelementptr inbounds %struct.AVFormatContext, %struct.AVFormatContext* %47, i64 0, i32 4
  %49 = bitcast %struct.AVIOContext** %48 to i64*
  store i64 %46, i64* %49, align 8
  ret void
}

declare %struct.AVFormatContext* @avformat_alloc_context() local_unnamed_addr #1

declare %struct.AVIOContext* @avio_alloc_context(i8*, i32, i32, i8*, i32 (i8*, i8*, i32)*, i32 (i8*, i8*, i32)*, i64 (i8*, i64, i32)*) local_unnamed_addr #1

declare noalias i8* @av_malloc(i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZN5mediaL17AVIOReadOperationEPvPhi(i8*, i8*, i32) #0 {
  %4 = bitcast i8* %0 to %"class.media::FFmpegURLProtocol"*
  %5 = bitcast i8* %0 to i32 (%"class.media::FFmpegURLProtocol"*, i32, i8*)***
  %6 = load i32 (%"class.media::FFmpegURLProtocol"*, i32, i8*)**, i32 (%"class.media::FFmpegURLProtocol"*, i32, i8*)*** %5, align 8
  %7 = load i32 (%"class.media::FFmpegURLProtocol"*, i32, i8*)*, i32 (%"class.media::FFmpegURLProtocol"*, i32, i8*)** %6, align 8
  %8 = tail call i32 %7(%"class.media::FFmpegURLProtocol"* %4, i32 %2, i8* %1) #6
  ret i32 %8
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @_ZN5mediaL17AVIOSeekOperationEPvli(i8*, i64, i32) #0 {
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = bitcast i8* %0 to %"class.media::FFmpegURLProtocol"*
  %8 = bitcast i64* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #6
  store i64 -5, i64* %4, align 8
  switch i32 %2, label %65 [
    i32 0, label %9
    i32 1, label %21
    i32 2, label %40
    i32 65536, label %59
  ]

9:                                                ; preds = %3
  %10 = bitcast i8* %0 to i1 (%"class.media::FFmpegURLProtocol"*, i64)***
  %11 = load i1 (%"class.media::FFmpegURLProtocol"*, i64)**, i1 (%"class.media::FFmpegURLProtocol"*, i64)*** %10, align 8
  %12 = getelementptr inbounds i1 (%"class.media::FFmpegURLProtocol"*, i64)*, i1 (%"class.media::FFmpegURLProtocol"*, i64)** %11, i64 2
  %13 = load i1 (%"class.media::FFmpegURLProtocol"*, i64)*, i1 (%"class.media::FFmpegURLProtocol"*, i64)** %12, align 8
  %14 = tail call zeroext i1 %13(%"class.media::FFmpegURLProtocol"* %7, i64 %1) #6
  br i1 %14, label %15, label %65

15:                                               ; preds = %9
  %16 = bitcast i8* %0 to i1 (%"class.media::FFmpegURLProtocol"*, i64*)***
  %17 = load i1 (%"class.media::FFmpegURLProtocol"*, i64*)**, i1 (%"class.media::FFmpegURLProtocol"*, i64*)*** %16, align 8
  %18 = getelementptr inbounds i1 (%"class.media::FFmpegURLProtocol"*, i64*)*, i1 (%"class.media::FFmpegURLProtocol"*, i64*)** %17, i64 1
  %19 = load i1 (%"class.media::FFmpegURLProtocol"*, i64*)*, i1 (%"class.media::FFmpegURLProtocol"*, i64*)** %18, align 8
  %20 = call zeroext i1 %19(%"class.media::FFmpegURLProtocol"* %7, i64* nonnull %4) #6
  br label %65

21:                                               ; preds = %3
  store i64 -6148914691236517206, i64* %5, align 8
  %22 = bitcast i8* %0 to i1 (%"class.media::FFmpegURLProtocol"*, i64*)***
  %23 = load i1 (%"class.media::FFmpegURLProtocol"*, i64*)**, i1 (%"class.media::FFmpegURLProtocol"*, i64*)*** %22, align 8
  %24 = getelementptr inbounds i1 (%"class.media::FFmpegURLProtocol"*, i64*)*, i1 (%"class.media::FFmpegURLProtocol"*, i64*)** %23, i64 1
  %25 = load i1 (%"class.media::FFmpegURLProtocol"*, i64*)*, i1 (%"class.media::FFmpegURLProtocol"*, i64*)** %24, align 8
  %26 = call zeroext i1 %25(%"class.media::FFmpegURLProtocol"* %7, i64* nonnull %5) #6
  br i1 %26, label %27, label %65

27:                                               ; preds = %21
  %28 = load i64, i64* %5, align 8
  %29 = add nsw i64 %28, %1
  %30 = bitcast i8* %0 to i1 (%"class.media::FFmpegURLProtocol"*, i64)***
  %31 = load i1 (%"class.media::FFmpegURLProtocol"*, i64)**, i1 (%"class.media::FFmpegURLProtocol"*, i64)*** %30, align 8
  %32 = getelementptr inbounds i1 (%"class.media::FFmpegURLProtocol"*, i64)*, i1 (%"class.media::FFmpegURLProtocol"*, i64)** %31, i64 2
  %33 = load i1 (%"class.media::FFmpegURLProtocol"*, i64)*, i1 (%"class.media::FFmpegURLProtocol"*, i64)** %32, align 8
  %34 = call zeroext i1 %33(%"class.media::FFmpegURLProtocol"* %7, i64 %29) #6
  br i1 %34, label %35, label %65

35:                                               ; preds = %27
  %36 = load i1 (%"class.media::FFmpegURLProtocol"*, i64*)**, i1 (%"class.media::FFmpegURLProtocol"*, i64*)*** %22, align 8
  %37 = getelementptr inbounds i1 (%"class.media::FFmpegURLProtocol"*, i64*)*, i1 (%"class.media::FFmpegURLProtocol"*, i64*)** %36, i64 1
  %38 = load i1 (%"class.media::FFmpegURLProtocol"*, i64*)*, i1 (%"class.media::FFmpegURLProtocol"*, i64*)** %37, align 8
  %39 = call zeroext i1 %38(%"class.media::FFmpegURLProtocol"* %7, i64* nonnull %4) #6
  br label %65

40:                                               ; preds = %3
  store i64 -6148914691236517206, i64* %6, align 8
  %41 = bitcast i8* %0 to i1 (%"class.media::FFmpegURLProtocol"*, i64*)***
  %42 = load i1 (%"class.media::FFmpegURLProtocol"*, i64*)**, i1 (%"class.media::FFmpegURLProtocol"*, i64*)*** %41, align 8
  %43 = getelementptr inbounds i1 (%"class.media::FFmpegURLProtocol"*, i64*)*, i1 (%"class.media::FFmpegURLProtocol"*, i64*)** %42, i64 3
  %44 = load i1 (%"class.media::FFmpegURLProtocol"*, i64*)*, i1 (%"class.media::FFmpegURLProtocol"*, i64*)** %43, align 8
  %45 = call zeroext i1 %44(%"class.media::FFmpegURLProtocol"* %7, i64* nonnull %6) #6
  br i1 %45, label %46, label %65

46:                                               ; preds = %40
  %47 = load i64, i64* %6, align 8
  %48 = add nsw i64 %47, %1
  %49 = bitcast i8* %0 to i1 (%"class.media::FFmpegURLProtocol"*, i64)***
  %50 = load i1 (%"class.media::FFmpegURLProtocol"*, i64)**, i1 (%"class.media::FFmpegURLProtocol"*, i64)*** %49, align 8
  %51 = getelementptr inbounds i1 (%"class.media::FFmpegURLProtocol"*, i64)*, i1 (%"class.media::FFmpegURLProtocol"*, i64)** %50, i64 2
  %52 = load i1 (%"class.media::FFmpegURLProtocol"*, i64)*, i1 (%"class.media::FFmpegURLProtocol"*, i64)** %51, align 8
  %53 = call zeroext i1 %52(%"class.media::FFmpegURLProtocol"* %7, i64 %48) #6
  br i1 %53, label %54, label %65

54:                                               ; preds = %46
  %55 = load i1 (%"class.media::FFmpegURLProtocol"*, i64*)**, i1 (%"class.media::FFmpegURLProtocol"*, i64*)*** %41, align 8
  %56 = getelementptr inbounds i1 (%"class.media::FFmpegURLProtocol"*, i64*)*, i1 (%"class.media::FFmpegURLProtocol"*, i64*)** %55, i64 1
  %57 = load i1 (%"class.media::FFmpegURLProtocol"*, i64*)*, i1 (%"class.media::FFmpegURLProtocol"*, i64*)** %56, align 8
  %58 = call zeroext i1 %57(%"class.media::FFmpegURLProtocol"* %7, i64* nonnull %4) #6
  br label %65

59:                                               ; preds = %3
  %60 = bitcast i8* %0 to i1 (%"class.media::FFmpegURLProtocol"*, i64*)***
  %61 = load i1 (%"class.media::FFmpegURLProtocol"*, i64*)**, i1 (%"class.media::FFmpegURLProtocol"*, i64*)*** %60, align 8
  %62 = getelementptr inbounds i1 (%"class.media::FFmpegURLProtocol"*, i64*)*, i1 (%"class.media::FFmpegURLProtocol"*, i64*)** %61, i64 3
  %63 = load i1 (%"class.media::FFmpegURLProtocol"*, i64*)*, i1 (%"class.media::FFmpegURLProtocol"*, i64*)** %62, align 8
  %64 = call zeroext i1 %63(%"class.media::FFmpegURLProtocol"* %7, i64* nonnull %4) #6
  br label %65

65:                                               ; preds = %3, %46, %54, %40, %27, %35, %21, %9, %15, %59
  %66 = load i64, i64* %4, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #6
  ret i64 %66
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5media10FFmpegGlue11OpenContextEb(%"class.media::FFmpegGlue"*, i1 zeroext) local_unnamed_addr #0 align 2 {
  %3 = alloca i64, align 8
  %4 = getelementptr inbounds %"class.media::FFmpegGlue", %"class.media::FFmpegGlue"* %0, i64 0, i32 0
  store i8 1, i8* %4, align 8
  %5 = getelementptr inbounds %"class.media::FFmpegGlue", %"class.media::FFmpegGlue"* %0, i64 0, i32 3
  %6 = tail call i32 @avformat_open_input(%struct.AVFormatContext** %5, i8* null, %struct.AVInputFormat* null, %struct.AVDictionary** null) #6
  %7 = icmp eq i32 %6, -1094995529
  br i1 %7, label %8, label %54

8:                                                ; preds = %2
  %9 = tail call i8* @_Znwm(i64 8192) #7
  %10 = ptrtoint i8* %9 to i64
  %11 = sub i64 8192, %10
  %12 = getelementptr i8, i8* %9, i64 %11
  %13 = ptrtoint i8* %12 to i64
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %9, i8 0, i64 %13, i1 false) #6
  %14 = getelementptr inbounds %"class.media::FFmpegGlue", %"class.media::FFmpegGlue"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %15 = load %struct.AVIOContext*, %struct.AVIOContext** %14, align 8
  %16 = getelementptr inbounds %struct.AVIOContext, %struct.AVIOContext* %15, i64 0, i32 5
  %17 = load i8*, i8** %16, align 8
  %18 = bitcast i8* %17 to %"class.media::FFmpegURLProtocol"*
  %19 = bitcast i64* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %19) #6
  store i64 -5, i64* %3, align 8
  %20 = bitcast i8* %17 to i1 (%"class.media::FFmpegURLProtocol"*, i64)***
  %21 = load i1 (%"class.media::FFmpegURLProtocol"*, i64)**, i1 (%"class.media::FFmpegURLProtocol"*, i64)*** %20, align 8
  %22 = getelementptr inbounds i1 (%"class.media::FFmpegURLProtocol"*, i64)*, i1 (%"class.media::FFmpegURLProtocol"*, i64)** %21, i64 2
  %23 = load i1 (%"class.media::FFmpegURLProtocol"*, i64)*, i1 (%"class.media::FFmpegURLProtocol"*, i64)** %22, align 8
  %24 = tail call zeroext i1 %23(%"class.media::FFmpegURLProtocol"* %18, i64 0) #6
  br i1 %24, label %26, label %25

25:                                               ; preds = %8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19) #6
  br label %53

26:                                               ; preds = %8
  %27 = bitcast i8* %17 to i1 (%"class.media::FFmpegURLProtocol"*, i64*)***
  %28 = load i1 (%"class.media::FFmpegURLProtocol"*, i64*)**, i1 (%"class.media::FFmpegURLProtocol"*, i64*)*** %27, align 8
  %29 = getelementptr inbounds i1 (%"class.media::FFmpegURLProtocol"*, i64*)*, i1 (%"class.media::FFmpegURLProtocol"*, i64*)** %28, i64 1
  %30 = load i1 (%"class.media::FFmpegURLProtocol"*, i64*)*, i1 (%"class.media::FFmpegURLProtocol"*, i64*)** %29, align 8
  %31 = call zeroext i1 %30(%"class.media::FFmpegURLProtocol"* %18, i64* nonnull %3) #6
  %32 = load i64, i64* %3, align 8
  %33 = icmp slt i64 %32, 0
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19) #6
  br i1 %33, label %53, label %34

34:                                               ; preds = %26
  %35 = load %struct.AVIOContext*, %struct.AVIOContext** %14, align 8
  %36 = getelementptr inbounds %struct.AVIOContext, %struct.AVIOContext* %35, i64 0, i32 5
  %37 = load i8*, i8** %36, align 8
  %38 = bitcast i8* %37 to %"class.media::FFmpegURLProtocol"*
  %39 = bitcast i8* %37 to i32 (%"class.media::FFmpegURLProtocol"*, i32, i8*)***
  %40 = load i32 (%"class.media::FFmpegURLProtocol"*, i32, i8*)**, i32 (%"class.media::FFmpegURLProtocol"*, i32, i8*)*** %39, align 8
  %41 = load i32 (%"class.media::FFmpegURLProtocol"*, i32, i8*)*, i32 (%"class.media::FFmpegURLProtocol"*, i32, i8*)** %40, align 8
  %42 = call i32 %41(%"class.media::FFmpegURLProtocol"* %38, i32 8192, i8* nonnull %9) #6
  %43 = icmp slt i32 %42, 12
  br i1 %43, label %53, label %44

44:                                               ; preds = %34
  %45 = call i32 @_ZN5media15container_names18DetermineContainerEPKhi(i8* nonnull %9, i32 %42) #6
  %46 = getelementptr inbounds %"class.media::FFmpegGlue", %"class.media::FFmpegGlue"* %0, i64 0, i32 5
  store i32 %45, i32* %46, align 8
  call void @_ZN4base18UmaHistogramSparseEPKci(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.9, i64 0, i64 0), i32 %45) #6
  br i1 %1, label %47, label %48

47:                                               ; preds = %44
  call void @_ZN4base18UmaHistogramSparseEPKci(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.10, i64 0, i64 0), i32 %45) #6
  br label %48

48:                                               ; preds = %44, %47
  %49 = load i32, i32* %46, align 8
  %50 = icmp eq i32 %49, 22
  %51 = getelementptr inbounds %"class.media::FFmpegGlue", %"class.media::FFmpegGlue"* %0, i64 0, i32 1
  %52 = zext i1 %50 to i8
  store i8 %52, i8* %51, align 1
  br label %53

53:                                               ; preds = %25, %48, %34, %26
  call void @_ZdlPv(i8* nonnull %9) #7
  br label %111

54:                                               ; preds = %2
  %55 = icmp slt i32 %6, 0
  br i1 %55, label %111, label %56

56:                                               ; preds = %54
  %57 = load %struct.AVFormatContext*, %struct.AVFormatContext** %5, align 8
  %58 = getelementptr inbounds %struct.AVFormatContext, %struct.AVFormatContext* %57, i64 0, i32 1
  %59 = load %struct.AVInputFormat*, %struct.AVInputFormat** %58, align 8
  %60 = getelementptr inbounds %struct.AVInputFormat, %struct.AVInputFormat* %59, i64 0, i32 0
  %61 = load i8*, i8** %60, align 8
  %62 = tail call i32 @strcmp(i8* %61, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str, i64 0, i64 0)) #8
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %64, label %66

64:                                               ; preds = %56
  %65 = getelementptr inbounds %"class.media::FFmpegGlue", %"class.media::FFmpegGlue"* %0, i64 0, i32 5
  store i32 25, i32* %65, align 8
  br label %108

66:                                               ; preds = %56
  %67 = tail call i32 @strcmp(i8* %61, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0)) #8
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %69, label %71

69:                                               ; preds = %66
  %70 = getelementptr inbounds %"class.media::FFmpegGlue", %"class.media::FFmpegGlue"* %0, i64 0, i32 5
  store i32 16, i32* %70, align 8
  br label %108

71:                                               ; preds = %66
  %72 = tail call i32 @strcmp(i8* %61, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0)) #8
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %74, label %76

74:                                               ; preds = %71
  %75 = getelementptr inbounds %"class.media::FFmpegGlue", %"class.media::FFmpegGlue"* %0, i64 0, i32 5
  store i32 36, i32* %75, align 8
  br label %108

76:                                               ; preds = %71
  %77 = tail call i32 @strcmp(i8* %61, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0)) #8
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %79, label %81

79:                                               ; preds = %76
  %80 = getelementptr inbounds %"class.media::FFmpegGlue", %"class.media::FFmpegGlue"* %0, i64 0, i32 5
  store i32 30, i32* %80, align 8
  br label %108

81:                                               ; preds = %76
  %82 = tail call i32 @strcmp(i8* %61, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i64 0, i64 0)) #8
  %83 = icmp eq i32 %82, 0
  br i1 %83, label %84, label %86

84:                                               ; preds = %81
  %85 = getelementptr inbounds %"class.media::FFmpegGlue", %"class.media::FFmpegGlue"* %0, i64 0, i32 5
  store i32 35, i32* %85, align 8
  br label %108

86:                                               ; preds = %81
  %87 = tail call i32 @strcmp(i8* %61, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0)) #8
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %89, label %91

89:                                               ; preds = %86
  %90 = getelementptr inbounds %"class.media::FFmpegGlue", %"class.media::FFmpegGlue"* %0, i64 0, i32 5
  store i32 1, i32* %90, align 8
  br label %108

91:                                               ; preds = %86
  %92 = tail call i32 @strcmp(i8* %61, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i64 0, i64 0)) #8
  %93 = icmp eq i32 %92, 0
  br i1 %93, label %94, label %96

94:                                               ; preds = %91
  %95 = getelementptr inbounds %"class.media::FFmpegGlue", %"class.media::FFmpegGlue"* %0, i64 0, i32 5
  store i32 26, i32* %95, align 8
  br label %108

96:                                               ; preds = %91
  %97 = tail call i32 @strcmp(i8* %61, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i64 0, i64 0)) #8
  %98 = icmp eq i32 %97, 0
  br i1 %98, label %99, label %101

99:                                               ; preds = %96
  %100 = getelementptr inbounds %"class.media::FFmpegGlue", %"class.media::FFmpegGlue"* %0, i64 0, i32 5
  store i32 4, i32* %100, align 8
  br label %108

101:                                              ; preds = %96
  %102 = tail call i32 @strcmp(i8* %61, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i64 0, i64 0)) #8
  %103 = icmp eq i32 %102, 0
  %104 = getelementptr inbounds %"class.media::FFmpegGlue", %"class.media::FFmpegGlue"* %0, i64 0, i32 5
  br i1 %103, label %107, label %105

105:                                              ; preds = %101
  %106 = load i32, i32* %104, align 8
  br label %108

107:                                              ; preds = %101
  store i32 8, i32* %104, align 8
  br label %108

108:                                              ; preds = %105, %69, %79, %89, %99, %107, %94, %84, %74, %64
  %109 = phi i32 [ %106, %105 ], [ 16, %69 ], [ 30, %79 ], [ 1, %89 ], [ 4, %99 ], [ 8, %107 ], [ 26, %94 ], [ 35, %84 ], [ 36, %74 ], [ 25, %64 ]
  tail call void @_ZN4base18UmaHistogramSparseEPKci(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.9, i64 0, i64 0), i32 %109) #6
  br i1 %1, label %110, label %111

110:                                              ; preds = %108
  tail call void @_ZN4base18UmaHistogramSparseEPKci(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.10, i64 0, i64 0), i32 %109) #6
  br label %111

111:                                              ; preds = %110, %108, %54, %53
  %112 = phi i1 [ false, %53 ], [ false, %54 ], [ true, %108 ], [ true, %110 ]
  ret i1 %112
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare i32 @avformat_open_input(%struct.AVFormatContext**, i8*, %struct.AVInputFormat*, %struct.AVDictionary**) local_unnamed_addr #1

declare i32 @_ZN5media15container_names18DetermineContainerEPKhi(i8*, i32) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind readonly
declare i32 @strcmp(i8* nocapture, i8* nocapture) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5media10FFmpegGlueD2Ev(%"class.media::FFmpegGlue"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.media::FFmpegGlue", %"class.media::FFmpegGlue"* %0, i64 0, i32 3
  %3 = load %struct.AVFormatContext*, %struct.AVFormatContext** %2, align 8
  %4 = icmp eq %struct.AVFormatContext* %3, null
  br i1 %4, label %11, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.media::FFmpegGlue", %"class.media::FFmpegGlue"* %0, i64 0, i32 0
  %7 = load i8, i8* %6, align 8, !range !2
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %9, label %10

9:                                                ; preds = %5
  tail call void @avformat_free_context(%struct.AVFormatContext* nonnull %3) #6
  br label %11

10:                                               ; preds = %5
  tail call void @avformat_close_input(%struct.AVFormatContext** %2) #6
  br label %11

11:                                               ; preds = %1, %10, %9
  %12 = getelementptr inbounds %"class.media::FFmpegGlue", %"class.media::FFmpegGlue"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %13 = load %struct.AVIOContext*, %struct.AVIOContext** %12, align 8
  %14 = getelementptr inbounds %struct.AVIOContext, %struct.AVIOContext* %13, i64 0, i32 1
  %15 = load i8*, i8** %14, align 8
  tail call void @av_free(i8* %15) #6
  %16 = getelementptr inbounds %"class.media::FFmpegGlue", %"class.media::FFmpegGlue"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %17 = load %struct.AVIOContext*, %struct.AVIOContext** %16, align 8
  store %struct.AVIOContext* null, %struct.AVIOContext** %16, align 8
  %18 = icmp eq %struct.AVIOContext* %17, null
  br i1 %18, label %21, label %19

19:                                               ; preds = %11
  %20 = bitcast %struct.AVIOContext* %17 to i8*
  tail call void @av_free(i8* nonnull %20) #6
  br label %21

21:                                               ; preds = %11, %19
  ret void
}

declare void @av_free(i8*) local_unnamed_addr #1

declare void @avformat_free_context(%struct.AVFormatContext*) local_unnamed_addr #1

declare void @avformat_close_input(%struct.AVFormatContext**) local_unnamed_addr #1

declare void @_ZN4base18UmaHistogramSparseEPKci(i8*, i32) local_unnamed_addr #1

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #4

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { builtin nounwind }
attributes #8 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
