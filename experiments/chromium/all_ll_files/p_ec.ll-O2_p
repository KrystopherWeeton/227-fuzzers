; ModuleID = '../../third_party/boringssl/src/crypto/evp/p_ec.c'
source_filename = "../../third_party/boringssl/src/crypto/evp/p_ec.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.evp_pkey_ctx_st = type { %struct.evp_pkey_method_st*, %struct.engine_st*, %struct.evp_pkey_st*, %struct.evp_pkey_st*, i32, i8* }
%struct.evp_pkey_method_st = type { i32, {}*, i32 (%struct.evp_pkey_ctx_st*, %struct.evp_pkey_ctx_st*)*, void (%struct.evp_pkey_ctx_st*)*, i32 (%struct.evp_pkey_ctx_st*, %struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_ctx_st*, i8*, i64*, i8*, i64)*, i32 (%struct.evp_pkey_ctx_st*, i8*, i64*, i8*, i64)*, i32 (%struct.evp_pkey_ctx_st*, i8*, i64, i8*, i64)*, i32 (%struct.evp_pkey_ctx_st*, i8*, i64, i8*, i64)*, i32 (%struct.evp_pkey_ctx_st*, i8*, i64*, i8*, i64)*, i32 (%struct.evp_pkey_ctx_st*, i8*, i64*, i8*, i64)*, i32 (%struct.evp_pkey_ctx_st*, i8*, i64*, i8*, i64)*, i32 (%struct.evp_pkey_ctx_st*, i8*, i64*)*, i32 (%struct.evp_pkey_ctx_st*, %struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_ctx_st*, i32, i32, i8*)* }
%struct.engine_st = type opaque
%struct.evp_pkey_st = type { i32, i32, %union.anon, %struct.evp_pkey_asn1_method_st* }
%union.anon = type { i8* }
%struct.evp_pkey_asn1_method_st = type { i32, [9 x i8], i8, i32 (%struct.evp_pkey_st*, %struct.cbs_st*, %struct.cbs_st*)*, i32 (%struct.cbb_st*, %struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*, %struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*, %struct.cbs_st*, %struct.cbs_st*)*, i32 (%struct.cbb_st*, %struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*, i8*, i64)*, i32 (%struct.evp_pkey_st*, i8*, i64)*, i32 (%struct.evp_pkey_st*, i8*, i64*)*, i32 (%struct.evp_pkey_st*, i8*, i64*)*, i32 (%struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*, %struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*, %struct.evp_pkey_st*)*, void (%struct.evp_pkey_st*)* }
%struct.cbs_st = type opaque
%struct.cbb_st = type opaque
%struct.ec_group_st = type { %struct.ec_method_st*, %struct.ec_point_st*, %struct.bignum_st, i32, %struct.bn_mont_ctx_st*, %struct.bignum_st, %union.EC_FELEM, %union.EC_FELEM, i32, i32, %union.EC_FELEM, i32, %struct.bn_mont_ctx_st*, %union.EC_FELEM }
%struct.ec_method_st = type { i32 (%struct.ec_group_st*)*, void (%struct.ec_group_st*)*, i32 (%struct.ec_group_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_ctx*)*, i32 (%struct.ec_group_st*, %struct.EC_RAW_POINT*, %union.EC_FELEM*, %union.EC_FELEM*)*, i32 (%struct.ec_group_st*, %struct.EC_AFFINE*, %struct.EC_RAW_POINT*, i64)*, void (%struct.ec_group_st*, %struct.EC_RAW_POINT*, %struct.EC_RAW_POINT*, %struct.EC_RAW_POINT*)*, void (%struct.ec_group_st*, %struct.EC_RAW_POINT*, %struct.EC_RAW_POINT*)*, void (%struct.ec_group_st*, %struct.EC_RAW_POINT*, %struct.EC_RAW_POINT*, %union.EC_SCALAR*)*, void (%struct.ec_group_st*, %struct.EC_RAW_POINT*, %union.EC_SCALAR*)*, void (%struct.ec_group_st*, %struct.EC_RAW_POINT*, %struct.EC_RAW_POINT*, %union.EC_SCALAR*, %struct.EC_RAW_POINT*, %union.EC_SCALAR*, %struct.EC_RAW_POINT*, %union.EC_SCALAR*)*, void (%struct.ec_group_st*, %struct.EC_RAW_POINT*, %union.EC_SCALAR*, %struct.EC_RAW_POINT*, %union.EC_SCALAR*)*, i32 (%struct.ec_group_st*, %struct.EC_RAW_POINT*, %union.EC_SCALAR*, %struct.EC_RAW_POINT*, %union.EC_SCALAR*, i64)*, i32 (%struct.ec_group_st*, %union.EC_PRECOMP*, %struct.EC_RAW_POINT*)*, void (%struct.ec_group_st*, %struct.EC_RAW_POINT*, %union.EC_PRECOMP*, %union.EC_SCALAR*, %union.EC_PRECOMP*, %union.EC_SCALAR*, %union.EC_PRECOMP*, %union.EC_SCALAR*)*, void (%struct.ec_group_st*, %union.EC_FELEM*, %union.EC_FELEM*, %union.EC_FELEM*)*, void (%struct.ec_group_st*, %union.EC_FELEM*, %union.EC_FELEM*)*, void (%struct.ec_group_st*, i8*, i64*, %union.EC_FELEM*)*, i32 (%struct.ec_group_st*, %union.EC_FELEM*, i8*, i64)*, void (%struct.ec_group_st*, %union.EC_FELEM*, i64*, i64)*, void (%struct.ec_group_st*, %union.EC_FELEM*, %union.EC_FELEM*, i64*, i64)*, void (%struct.ec_group_st*, %union.EC_SCALAR*, %union.EC_SCALAR*)*, i32 (%struct.ec_group_st*, %union.EC_SCALAR*, %union.EC_SCALAR*)*, i32 (%struct.ec_group_st*, %struct.EC_RAW_POINT*, %union.EC_SCALAR*)* }
%struct.bignum_ctx = type opaque
%struct.EC_RAW_POINT = type { %union.EC_FELEM, %union.EC_FELEM, %union.EC_FELEM }
%struct.EC_AFFINE = type { %union.EC_FELEM, %union.EC_FELEM }
%union.EC_SCALAR = type { [9 x i64] }
%union.EC_PRECOMP = type { [31 x %struct.EC_AFFINE] }
%struct.ec_point_st = type { %struct.ec_group_st*, %struct.EC_RAW_POINT }
%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
%struct.bn_mont_ctx_st = type { %struct.bignum_st, %struct.bignum_st, [2 x i64] }
%union.EC_FELEM = type { [9 x i64] }
%struct.EC_PKEY_CTX = type { %struct.env_md_st*, %struct.ec_group_st* }
%struct.env_md_st = type opaque
%struct.ec_key_st = type { %struct.ec_group_st*, %struct.ec_point_st*, %struct.EC_WRAPPED_SCALAR*, i32, i32, i32, %struct.ecdsa_method_st*, %struct.crypto_ex_data_st }
%struct.EC_WRAPPED_SCALAR = type { %struct.bignum_st, %union.EC_SCALAR }
%struct.ecdsa_method_st = type { %struct.openssl_method_common_st, i8*, i32 (%struct.ec_key_st*)*, i32 (%struct.ec_key_st*)*, i64 (%struct.ec_key_st*)*, i32 (i8*, i64, i8*, i32*, %struct.ec_key_st*)*, i32 }
%struct.openssl_method_common_st = type { i32, i8 }
%struct.crypto_ex_data_st = type { %struct.stack_st_void* }
%struct.stack_st_void = type opaque

@ec_pkey_meth = hidden local_unnamed_addr constant { i32, i32 (%struct.evp_pkey_ctx_st*)*, i32 (%struct.evp_pkey_ctx_st*, %struct.evp_pkey_ctx_st*)*, void (%struct.evp_pkey_ctx_st*)*, i32 (%struct.evp_pkey_ctx_st*, %struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_ctx_st*, i8*, i64*, i8*, i64)*, i32 (%struct.evp_pkey_ctx_st*, i8*, i64*, i8*, i64)*, i32 (%struct.evp_pkey_ctx_st*, i8*, i64, i8*, i64)*, i32 (%struct.evp_pkey_ctx_st*, i8*, i64, i8*, i64)*, i32 (%struct.evp_pkey_ctx_st*, i8*, i64*, i8*, i64)*, i32 (%struct.evp_pkey_ctx_st*, i8*, i64*, i8*, i64)*, i32 (%struct.evp_pkey_ctx_st*, i8*, i64*, i8*, i64)*, i32 (%struct.evp_pkey_ctx_st*, i8*, i64*)*, i32 (%struct.evp_pkey_ctx_st*, %struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_ctx_st*, i32, i32, i8*)* } { i32 408, i32 (%struct.evp_pkey_ctx_st*)* @pkey_ec_init, i32 (%struct.evp_pkey_ctx_st*, %struct.evp_pkey_ctx_st*)* @pkey_ec_copy, void (%struct.evp_pkey_ctx_st*)* @pkey_ec_cleanup, i32 (%struct.evp_pkey_ctx_st*, %struct.evp_pkey_st*)* @pkey_ec_keygen, i32 (%struct.evp_pkey_ctx_st*, i8*, i64*, i8*, i64)* @pkey_ec_sign, i32 (%struct.evp_pkey_ctx_st*, i8*, i64*, i8*, i64)* null, i32 (%struct.evp_pkey_ctx_st*, i8*, i64, i8*, i64)* @pkey_ec_verify, i32 (%struct.evp_pkey_ctx_st*, i8*, i64, i8*, i64)* null, i32 (%struct.evp_pkey_ctx_st*, i8*, i64*, i8*, i64)* null, i32 (%struct.evp_pkey_ctx_st*, i8*, i64*, i8*, i64)* null, i32 (%struct.evp_pkey_ctx_st*, i8*, i64*, i8*, i64)* null, i32 (%struct.evp_pkey_ctx_st*, i8*, i64*)* @pkey_ec_derive, i32 (%struct.evp_pkey_ctx_st*, %struct.evp_pkey_st*)* @pkey_ec_paramgen, i32 (%struct.evp_pkey_ctx_st*, i32, i32, i8*)* @pkey_ec_ctrl }, align 8
@.str = private unnamed_addr constant [50 x i8] c"../../third_party/boringssl/src/crypto/evp/p_ec.c\00", align 1

; Function Attrs: nounwind ssp uwtable
define internal i32 @pkey_ec_init(%struct.evp_pkey_ctx_st* nocapture) #0 {
  %2 = tail call i8* @OPENSSL_malloc(i64 16) #3
  %3 = icmp eq i8* %2, null
  br i1 %3, label %6, label %4

4:                                                ; preds = %1
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %2, i8 0, i64 16, i1 false) #3
  %5 = getelementptr inbounds %struct.evp_pkey_ctx_st, %struct.evp_pkey_ctx_st* %0, i64 0, i32 5
  store i8* %2, i8** %5, align 8
  br label %6

6:                                                ; preds = %1, %4
  %7 = phi i32 [ 1, %4 ], [ 0, %1 ]
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @pkey_ec_copy(%struct.evp_pkey_ctx_st* nocapture, %struct.evp_pkey_ctx_st* nocapture readonly) #0 {
  %3 = tail call i8* @OPENSSL_malloc(i64 16) #3
  %4 = icmp eq i8* %3, null
  br i1 %4, label %12, label %5

5:                                                ; preds = %2
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %3, i8 0, i64 16, i1 false) #3
  %6 = getelementptr inbounds %struct.evp_pkey_ctx_st, %struct.evp_pkey_ctx_st* %0, i64 0, i32 5
  store i8* %3, i8** %6, align 8
  %7 = getelementptr inbounds %struct.evp_pkey_ctx_st, %struct.evp_pkey_ctx_st* %1, i64 0, i32 5
  %8 = bitcast i8** %7 to i64**
  %9 = load i64*, i64** %8, align 8
  %10 = bitcast i8* %3 to i64*
  %11 = load i64, i64* %9, align 8
  store i64 %11, i64* %10, align 8
  br label %12

12:                                               ; preds = %2, %5
  %13 = phi i32 [ 1, %5 ], [ 0, %2 ]
  ret i32 %13
}

; Function Attrs: nounwind ssp uwtable
define internal void @pkey_ec_cleanup(%struct.evp_pkey_ctx_st* nocapture readonly) #0 {
  %2 = getelementptr inbounds %struct.evp_pkey_ctx_st, %struct.evp_pkey_ctx_st* %0, i64 0, i32 5
  %3 = load i8*, i8** %2, align 8
  %4 = icmp eq i8* %3, null
  br i1 %4, label %9, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds i8, i8* %3, i64 8
  %7 = bitcast i8* %6 to %struct.ec_group_st**
  %8 = load %struct.ec_group_st*, %struct.ec_group_st** %7, align 8
  tail call void @EC_GROUP_free(%struct.ec_group_st* %8) #3
  tail call void @OPENSSL_free(i8* nonnull %3) #3
  br label %9

9:                                                ; preds = %1, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @pkey_ec_keygen(%struct.evp_pkey_ctx_st* nocapture readonly, %struct.evp_pkey_st*) #0 {
  %3 = getelementptr inbounds %struct.evp_pkey_ctx_st, %struct.evp_pkey_ctx_st* %0, i64 0, i32 5
  %4 = bitcast i8** %3 to %struct.EC_PKEY_CTX**
  %5 = load %struct.EC_PKEY_CTX*, %struct.EC_PKEY_CTX** %4, align 8
  %6 = getelementptr inbounds %struct.EC_PKEY_CTX, %struct.EC_PKEY_CTX* %5, i64 0, i32 1
  %7 = load %struct.ec_group_st*, %struct.ec_group_st** %6, align 8
  %8 = icmp eq %struct.ec_group_st* %7, null
  br i1 %8, label %9, label %19

9:                                                ; preds = %2
  %10 = getelementptr inbounds %struct.evp_pkey_ctx_st, %struct.evp_pkey_ctx_st* %0, i64 0, i32 2
  %11 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %10, align 8
  %12 = icmp eq %struct.evp_pkey_st* %11, null
  br i1 %12, label %13, label %14

13:                                               ; preds = %9
  tail call void @ERR_put_error(i32 6, i32 0, i32 124, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str, i64 0, i64 0), i32 224) #3
  br label %32

14:                                               ; preds = %9
  %15 = getelementptr inbounds %struct.evp_pkey_st, %struct.evp_pkey_st* %11, i64 0, i32 2
  %16 = bitcast %union.anon* %15 to %struct.ec_key_st**
  %17 = load %struct.ec_key_st*, %struct.ec_key_st** %16, align 8
  %18 = tail call %struct.ec_group_st* @EC_KEY_get0_group(%struct.ec_key_st* %17) #3
  br label %19

19:                                               ; preds = %14, %2
  %20 = phi %struct.ec_group_st* [ %18, %14 ], [ %7, %2 ]
  %21 = tail call %struct.ec_key_st* @EC_KEY_new() #3
  %22 = icmp eq %struct.ec_key_st* %21, null
  br i1 %22, label %29, label %23

23:                                               ; preds = %19
  %24 = tail call i32 @EC_KEY_set_group(%struct.ec_key_st* nonnull %21, %struct.ec_group_st* %20) #3
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %29, label %26

26:                                               ; preds = %23
  %27 = tail call i32 @EC_KEY_generate_key(%struct.ec_key_st* nonnull %21) #3
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %30

29:                                               ; preds = %26, %23, %19
  tail call void @EC_KEY_free(%struct.ec_key_st* %21) #3
  br label %32

30:                                               ; preds = %26
  %31 = tail call i32 @EVP_PKEY_assign_EC_KEY(%struct.evp_pkey_st* %1, %struct.ec_key_st* nonnull %21) #3
  br label %32

32:                                               ; preds = %29, %30, %13
  %33 = phi i32 [ 0, %13 ], [ 0, %29 ], [ 1, %30 ]
  ret i32 %33
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @pkey_ec_sign(%struct.evp_pkey_ctx_st* nocapture readonly, i8*, i64* nocapture, i8*, i64) #0 {
  %6 = alloca i32, align 4
  %7 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #3
  store i32 -1431655766, i32* %6, align 4
  %8 = getelementptr inbounds %struct.evp_pkey_ctx_st, %struct.evp_pkey_ctx_st* %0, i64 0, i32 2
  %9 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %8, align 8
  %10 = getelementptr inbounds %struct.evp_pkey_st, %struct.evp_pkey_st* %9, i64 0, i32 2
  %11 = bitcast %union.anon* %10 to %struct.ec_key_st**
  %12 = load %struct.ec_key_st*, %struct.ec_key_st** %11, align 8
  %13 = icmp eq i8* %1, null
  br i1 %13, label %14, label %16

14:                                               ; preds = %5
  %15 = tail call i64 @ECDSA_size(%struct.ec_key_st* %12) #3
  store i64 %15, i64* %2, align 8
  br label %27

16:                                               ; preds = %5
  %17 = load i64, i64* %2, align 8
  %18 = tail call i64 @ECDSA_size(%struct.ec_key_st* %12) #3
  %19 = icmp ult i64 %17, %18
  br i1 %19, label %20, label %21

20:                                               ; preds = %16
  tail call void @ERR_put_error(i32 6, i32 0, i32 100, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str, i64 0, i64 0), i32 127) #3
  br label %27

21:                                               ; preds = %16
  %22 = call i32 @ECDSA_sign(i32 0, i8* %3, i64 %4, i8* nonnull %1, i32* nonnull %6, %struct.ec_key_st* %12) #3
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %27, label %24

24:                                               ; preds = %21
  %25 = load i32, i32* %6, align 4
  %26 = zext i32 %25 to i64
  store i64 %26, i64* %2, align 8
  br label %27

27:                                               ; preds = %21, %24, %20, %14
  %28 = phi i32 [ 0, %20 ], [ 1, %24 ], [ 1, %14 ], [ 0, %21 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #3
  ret i32 %28
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @pkey_ec_verify(%struct.evp_pkey_ctx_st* nocapture readonly, i8*, i64, i8*, i64) #0 {
  %6 = getelementptr inbounds %struct.evp_pkey_ctx_st, %struct.evp_pkey_ctx_st* %0, i64 0, i32 2
  %7 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %6, align 8
  %8 = getelementptr inbounds %struct.evp_pkey_st, %struct.evp_pkey_st* %7, i64 0, i32 2
  %9 = bitcast %union.anon* %8 to %struct.ec_key_st**
  %10 = load %struct.ec_key_st*, %struct.ec_key_st** %9, align 8
  %11 = tail call i32 @ECDSA_verify(i32 0, i8* %3, i64 %4, i8* %1, i64 %2, %struct.ec_key_st* %10) #3
  ret i32 %11
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @pkey_ec_derive(%struct.evp_pkey_ctx_st* nocapture readonly, i8*, i64* nocapture) #0 {
  %4 = getelementptr inbounds %struct.evp_pkey_ctx_st, %struct.evp_pkey_ctx_st* %0, i64 0, i32 2
  %5 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %4, align 8
  %6 = icmp eq %struct.evp_pkey_st* %5, null
  br i1 %6, label %11, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.evp_pkey_ctx_st, %struct.evp_pkey_ctx_st* %0, i64 0, i32 3
  %9 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %8, align 8
  %10 = icmp eq %struct.evp_pkey_st* %9, null
  br i1 %10, label %11, label %12

11:                                               ; preds = %7, %3
  tail call void @ERR_put_error(i32 6, i32 0, i32 117, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str, i64 0, i64 0), i32 151) #3
  br label %33

12:                                               ; preds = %7
  %13 = getelementptr inbounds %struct.evp_pkey_st, %struct.evp_pkey_st* %5, i64 0, i32 2
  %14 = bitcast %union.anon* %13 to %struct.ec_key_st**
  %15 = load %struct.ec_key_st*, %struct.ec_key_st** %14, align 8
  %16 = icmp eq i8* %1, null
  br i1 %16, label %17, label %23

17:                                               ; preds = %12
  %18 = tail call %struct.ec_group_st* @EC_KEY_get0_group(%struct.ec_key_st* %15) #3
  %19 = tail call i32 @EC_GROUP_get_degree(%struct.ec_group_st* %18) #3
  %20 = add i32 %19, 7
  %21 = lshr i32 %20, 3
  %22 = zext i32 %21 to i64
  store i64 %22, i64* %2, align 8
  br label %33

23:                                               ; preds = %12
  %24 = getelementptr inbounds %struct.evp_pkey_st, %struct.evp_pkey_st* %9, i64 0, i32 2
  %25 = bitcast %union.anon* %24 to %struct.ec_key_st**
  %26 = load %struct.ec_key_st*, %struct.ec_key_st** %25, align 8
  %27 = tail call %struct.ec_point_st* @EC_KEY_get0_public_key(%struct.ec_key_st* %26) #3
  %28 = load i64, i64* %2, align 8
  %29 = tail call i32 @ECDH_compute_key(i8* nonnull %1, i64 %28, %struct.ec_point_st* %27, %struct.ec_key_st* %15, i8* (i8*, i64, i8*, i64*)* null) #3
  %30 = icmp slt i32 %29, 0
  br i1 %30, label %33, label %31

31:                                               ; preds = %23
  %32 = sext i32 %29 to i64
  store i64 %32, i64* %2, align 8
  br label %33

33:                                               ; preds = %23, %31, %17, %11
  %34 = phi i32 [ 1, %31 ], [ 1, %17 ], [ 0, %11 ], [ 0, %23 ]
  ret i32 %34
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @pkey_ec_paramgen(%struct.evp_pkey_ctx_st* nocapture readonly, %struct.evp_pkey_st*) #0 {
  %3 = getelementptr inbounds %struct.evp_pkey_ctx_st, %struct.evp_pkey_ctx_st* %0, i64 0, i32 5
  %4 = bitcast i8** %3 to %struct.EC_PKEY_CTX**
  %5 = load %struct.EC_PKEY_CTX*, %struct.EC_PKEY_CTX** %4, align 8
  %6 = getelementptr inbounds %struct.EC_PKEY_CTX, %struct.EC_PKEY_CTX* %5, i64 0, i32 1
  %7 = load %struct.ec_group_st*, %struct.ec_group_st** %6, align 8
  %8 = icmp eq %struct.ec_group_st* %7, null
  br i1 %8, label %9, label %10

9:                                                ; preds = %2
  tail call void @ERR_put_error(i32 6, i32 0, i32 124, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str, i64 0, i64 0), i32 243) #3
  br label %20

10:                                               ; preds = %2
  %11 = tail call %struct.ec_key_st* @EC_KEY_new() #3
  %12 = icmp eq %struct.ec_key_st* %11, null
  br i1 %12, label %17, label %13

13:                                               ; preds = %10
  %14 = load %struct.ec_group_st*, %struct.ec_group_st** %6, align 8
  %15 = tail call i32 @EC_KEY_set_group(%struct.ec_key_st* nonnull %11, %struct.ec_group_st* %14) #3
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %18

17:                                               ; preds = %13, %10
  tail call void @EC_KEY_free(%struct.ec_key_st* %11) #3
  br label %20

18:                                               ; preds = %13
  %19 = tail call i32 @EVP_PKEY_assign_EC_KEY(%struct.evp_pkey_st* %1, %struct.ec_key_st* nonnull %11) #3
  br label %20

20:                                               ; preds = %17, %18, %9
  %21 = phi i32 [ 0, %9 ], [ 0, %17 ], [ 1, %18 ]
  ret i32 %21
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @pkey_ec_ctrl(%struct.evp_pkey_ctx_st* nocapture readonly, i32, i32, i8*) #0 {
  %5 = getelementptr inbounds %struct.evp_pkey_ctx_st, %struct.evp_pkey_ctx_st* %0, i64 0, i32 5
  %6 = bitcast i8** %5 to %struct.EC_PKEY_CTX**
  %7 = load %struct.EC_PKEY_CTX*, %struct.EC_PKEY_CTX** %6, align 8
  switch i32 %1, label %40 [
    i32 1, label %8
    i32 2, label %30
    i32 3, label %41
    i32 4109, label %34
  ]

8:                                                ; preds = %4
  %9 = bitcast i8* %3 to %struct.env_md_st*
  %10 = tail call i32 @EVP_MD_type(%struct.env_md_st* %9) #3
  %11 = icmp eq i32 %10, 64
  br i1 %11, label %28, label %12

12:                                               ; preds = %8
  %13 = tail call i32 @EVP_MD_type(%struct.env_md_st* %9) #3
  %14 = icmp eq i32 %13, 416
  br i1 %14, label %28, label %15

15:                                               ; preds = %12
  %16 = tail call i32 @EVP_MD_type(%struct.env_md_st* %9) #3
  %17 = icmp eq i32 %16, 675
  br i1 %17, label %28, label %18

18:                                               ; preds = %15
  %19 = tail call i32 @EVP_MD_type(%struct.env_md_st* %9) #3
  %20 = icmp eq i32 %19, 672
  br i1 %20, label %28, label %21

21:                                               ; preds = %18
  %22 = tail call i32 @EVP_MD_type(%struct.env_md_st* %9) #3
  %23 = icmp eq i32 %22, 673
  br i1 %23, label %28, label %24

24:                                               ; preds = %21
  %25 = tail call i32 @EVP_MD_type(%struct.env_md_st* %9) #3
  %26 = icmp eq i32 %25, 674
  br i1 %26, label %28, label %27

27:                                               ; preds = %24
  tail call void @ERR_put_error(i32 6, i32 0, i32 111, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str, i64 0, i64 0), i32 189) #3
  br label %41

28:                                               ; preds = %24, %21, %18, %15, %12, %8
  %29 = bitcast %struct.EC_PKEY_CTX* %7 to i8**
  store i8* %3, i8** %29, align 8
  br label %41

30:                                               ; preds = %4
  %31 = bitcast %struct.EC_PKEY_CTX* %7 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = bitcast i8* %3 to i64*
  store i64 %32, i64* %33, align 8
  br label %41

34:                                               ; preds = %4
  %35 = tail call %struct.ec_group_st* @EC_GROUP_new_by_curve_name(i32 %2) #3
  %36 = icmp eq %struct.ec_group_st* %35, null
  br i1 %36, label %41, label %37

37:                                               ; preds = %34
  %38 = getelementptr inbounds %struct.EC_PKEY_CTX, %struct.EC_PKEY_CTX* %7, i64 0, i32 1
  %39 = load %struct.ec_group_st*, %struct.ec_group_st** %38, align 8
  tail call void @EC_GROUP_free(%struct.ec_group_st* %39) #3
  store %struct.ec_group_st* %35, %struct.ec_group_st** %38, align 8
  br label %41

40:                                               ; preds = %4
  tail call void @ERR_put_error(i32 6, i32 0, i32 101, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str, i64 0, i64 0), i32 214) #3
  br label %41

41:                                               ; preds = %37, %34, %4, %40, %30, %28, %27
  %42 = phi i32 [ 0, %40 ], [ 1, %30 ], [ 0, %27 ], [ 1, %28 ], [ 1, %4 ], [ 1, %37 ], [ 0, %34 ]
  ret i32 %42
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @EVP_PKEY_CTX_set_ec_paramgen_curve_nid(%struct.evp_pkey_ctx_st*, i32) local_unnamed_addr #0 {
  %3 = tail call i32 @EVP_PKEY_CTX_ctrl(%struct.evp_pkey_ctx_st* %0, i32 408, i32 516, i32 4109, i32 %1, i8* null) #3
  ret i32 %3
}

declare i32 @EVP_PKEY_CTX_ctrl(%struct.evp_pkey_ctx_st*, i32, i32, i32, i32, i8*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @EVP_PKEY_CTX_set_ec_param_enc(%struct.evp_pkey_ctx_st* nocapture readnone, i32) local_unnamed_addr #0 {
  %3 = icmp eq i32 %1, 1
  br i1 %3, label %5, label %4

4:                                                ; preds = %2
  tail call void @ERR_put_error(i32 6, i32 0, i32 133, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str, i64 0, i64 0), i32 282) #3
  br label %5

5:                                                ; preds = %2, %4
  %6 = phi i32 [ 0, %4 ], [ 1, %2 ]
  ret i32 %6
}

declare void @ERR_put_error(i32, i32, i32, i8*, i32) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare i8* @OPENSSL_malloc(i64) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare void @EC_GROUP_free(%struct.ec_group_st*) local_unnamed_addr #1

declare void @OPENSSL_free(i8*) local_unnamed_addr #1

declare %struct.ec_group_st* @EC_KEY_get0_group(%struct.ec_key_st*) local_unnamed_addr #1

declare %struct.ec_key_st* @EC_KEY_new() local_unnamed_addr #1

declare i32 @EC_KEY_set_group(%struct.ec_key_st*, %struct.ec_group_st*) local_unnamed_addr #1

declare i32 @EC_KEY_generate_key(%struct.ec_key_st*) local_unnamed_addr #1

declare void @EC_KEY_free(%struct.ec_key_st*) local_unnamed_addr #1

declare i32 @EVP_PKEY_assign_EC_KEY(%struct.evp_pkey_st*, %struct.ec_key_st*) local_unnamed_addr #1

declare i64 @ECDSA_size(%struct.ec_key_st*) local_unnamed_addr #1

declare i32 @ECDSA_sign(i32, i8*, i64, i8*, i32*, %struct.ec_key_st*) local_unnamed_addr #1

declare i32 @ECDSA_verify(i32, i8*, i64, i8*, i64, %struct.ec_key_st*) local_unnamed_addr #1

declare i32 @EC_GROUP_get_degree(%struct.ec_group_st*) local_unnamed_addr #1

declare %struct.ec_point_st* @EC_KEY_get0_public_key(%struct.ec_key_st*) local_unnamed_addr #1

declare i32 @ECDH_compute_key(i8*, i64, %struct.ec_point_st*, %struct.ec_key_st*, i8* (i8*, i64, i8*, i64*)*) local_unnamed_addr #1

declare i32 @EVP_MD_type(%struct.env_md_st*) local_unnamed_addr #1

declare %struct.ec_group_st* @EC_GROUP_new_by_curve_name(i32) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
