; ModuleID = '../../third_party/blink/renderer/modules/payments/secure_payment_confirmation_type_converter.cc'
source_filename = "../../third_party/blink/renderer/modules/payments/secure_payment_confirmation_type_converter.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.mojo::StructPtr" = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.payments::mojom::blink::SecurePaymentConfirmationRequest"* }
%"class.payments::mojom::blink::SecurePaymentConfirmationRequest" = type { %"class.WTF::Vector.9", %"class.WTF::Vector.12", %"class.absl::optional" }
%"class.WTF::Vector.9" = type { %"class.WTF::VectorBuffer.10" }
%"class.WTF::VectorBuffer.10" = type { %"class.WTF::VectorBufferBase.11" }
%"class.WTF::VectorBufferBase.11" = type { %"class.WTF::Vector.12"*, i32, i32 }
%"class.WTF::Vector.12" = type { %"class.WTF::VectorBuffer.13" }
%"class.WTF::VectorBuffer.13" = type { %"class.WTF::VectorBufferBase.14" }
%"class.WTF::VectorBufferBase.14" = type { i8*, i32, i32 }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"class.base::TimeDelta" }
%"class.base::TimeDelta" = type { i64 }
%"class.blink::SecurePaymentConfirmationRequest" = type <{ %"class.blink::IDLDictionaryBase", i8, i8, [6 x i8], %"class.WTF::String", %"class.blink::HeapVector", %"class.blink::ArrayBufferOrArrayBufferView", i32, [4 x i8] }>
%"class.blink::IDLDictionaryBase" = type { i32 (...)** }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.blink::HeapVector" = type { %"class.WTF::Vector" }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { %"class.blink::ArrayBufferOrArrayBufferView"*, i32, i32 }
%"class.blink::ArrayBufferOrArrayBufferView" = type { i32, %"class.blink::Member", %"class.blink::NotShared" }
%"class.blink::Member" = type { %"class.blink::MemberBase" }
%"class.blink::MemberBase" = type { %"class.blink::DOMArrayBuffer"* }
%"class.blink::DOMArrayBuffer" = type { %"class.blink::DOMArrayBufferBase.base", [7 x i8] }
%"class.blink::DOMArrayBufferBase.base" = type <{ %"class.blink::ScriptWrappable", %"class.blink::ArrayBufferContents", i8 }>
%"class.blink::ScriptWrappable" = type { %"class.blink::NameClient", %"class.blink::TraceWrapperV8Reference" }
%"class.blink::NameClient" = type { i32 (...)** }
%"class.blink::TraceWrapperV8Reference" = type { %"class.v8::TracedReference" }
%"class.v8::TracedReference" = type { %"class.v8::BasicTracedReference" }
%"class.v8::BasicTracedReference" = type { %"class.v8::TracedReferenceBase" }
%"class.v8::TracedReferenceBase" = type { i64* }
%"class.blink::ArrayBufferContents" = type { %"class.std::__1::shared_ptr" }
%"class.std::__1::shared_ptr" = type { %"class.v8::BackingStore"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::BackingStore" = type { i8 }
%"class.std::__1::__shared_weak_count" = type { %"class.std::__1::__shared_count", i64 }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"class.blink::NotShared" = type { %"class.blink::Member.5" }
%"class.blink::Member.5" = type { %"class.blink::MemberBase.6" }
%"class.blink::MemberBase.6" = type { %"class.blink::DOMArrayBufferView"* }
%"class.blink::DOMArrayBufferView" = type { %"class.blink::ScriptWrappable", i8*, i64, %"class.blink::Member.7" }
%"class.blink::Member.7" = type { %"class.blink::MemberBase.8" }
%"class.blink::MemberBase.8" = type { %"class.blink::DOMArrayBufferBase"* }
%"class.blink::DOMArrayBufferBase" = type <{ %"class.blink::ScriptWrappable", %"class.blink::ArrayBufferContents", i8, [7 x i8] }>
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.23" }
%"class.std::__1::__compressed_pair.23" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"struct.std::__1::__compressed_pair_elem.24" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.25 }
%union.anon.25 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.logging::CheckOpResult" = type { i8* }

$_ZN4mojo13TypeConverterIN3WTF6VectorINS2_IhLj0ENS1_18PartitionAllocatorEEELj0ES3_EEN5blink10HeapVectorINS6_28ArrayBufferOrArrayBufferViewELj0EEEE7ConvertERKS9_ = comdat any

$_ZN3WTF6VectorINS0_IhLj0ENS_18PartitionAllocatorEEELj0ES1_E14AppendSlowCaseIS2_EEvOT_ = comdat any

$_ZN3WTF6VectorINS0_IhLj0ENS_18PartitionAllocatorEEELj0ES1_E16ReallocateBufferEj = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6VectorIhLj0ES0_EEEEmm = comdat any

@.str.2 = private unnamed_addr constant [44 x i8] c"count <= MaxElementCountInBackingStore<T>()\00", align 1
@.str.3 = private unnamed_addr constant [78 x i8] c"../../third_party/blink/renderer/platform/wtf/allocator/partition_allocator.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6VectorIhLj0ENS_18PartitionAllocatorEEEEEPKcv = private unnamed_addr constant [102 x i8] c"const char *WTF::GetStringWithTypeName() [T = WTF::Vector<unsigned char, 0, WTF::PartitionAllocator>]\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4mojo13TypeConverterINS_9StructPtrIN8payments5mojom5blink32SecurePaymentConfirmationRequestEEEPN5blink32SecurePaymentConfirmationRequestEE7ConvertEPKS8_(%"class.mojo::StructPtr"* noalias nocapture sret, %"class.blink::SecurePaymentConfirmationRequest"*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.WTF::Vector.9", align 8
  %4 = alloca %"class.WTF::Vector.12", align 8
  %5 = getelementptr inbounds %"class.mojo::StructPtr", %"class.mojo::StructPtr"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %6 = tail call i8* @_Znwm(i64 48) #6, !noalias !2
  %7 = bitcast i8* %6 to %"class.payments::mojom::blink::SecurePaymentConfirmationRequest"*
  tail call void @_ZN8payments5mojom5blink32SecurePaymentConfirmationRequestC1Ev(%"class.payments::mojom::blink::SecurePaymentConfirmationRequest"* nonnull %7) #7, !noalias !2
  %8 = ptrtoint i8* %6 to i64
  %9 = bitcast %"class.mojo::StructPtr"* %0 to i64*
  store i64 %8, i64* %9, align 8, !alias.scope !2
  %10 = bitcast %"class.WTF::Vector.9"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %10) #7
  %11 = getelementptr inbounds %"class.blink::SecurePaymentConfirmationRequest", %"class.blink::SecurePaymentConfirmationRequest"* %1, i64 0, i32 5
  call void @_ZN4mojo13TypeConverterIN3WTF6VectorINS2_IhLj0ENS1_18PartitionAllocatorEEELj0ES3_EEN5blink10HeapVectorINS6_28ArrayBufferOrArrayBufferViewELj0EEEE7ConvertERKS9_(%"class.WTF::Vector.9"* nonnull sret %3, %"class.blink::HeapVector"* dereferenceable(16) %11) #7
  %12 = bitcast %"class.WTF::Vector.9"* %3 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = bitcast i8* %6 to i64*
  %15 = load i64, i64* %14, align 8
  store atomic i64 %15, i64* %12 monotonic, align 8
  store atomic i64 %13, i64* %14 monotonic, align 8
  %16 = getelementptr inbounds i8, i8* %6, i64 8
  %17 = bitcast i8* %16 to i32*
  %18 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %3, i64 0, i32 0, i32 0, i32 1
  %19 = load i32, i32* %17, align 4
  %20 = load i32, i32* %18, align 8
  store i32 %20, i32* %17, align 4
  store i32 %19, i32* %18, align 8
  %21 = getelementptr inbounds i8, i8* %6, i64 12
  %22 = bitcast i8* %21 to i32*
  %23 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %3, i64 0, i32 0, i32 0, i32 2
  %24 = load i32, i32* %22, align 4
  %25 = load i32, i32* %23, align 4
  store i32 %25, i32* %22, align 4
  store i32 %24, i32* %23, align 4
  %26 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %3, i64 0, i32 0, i32 0, i32 0
  %27 = inttoptr i64 %15 to %"class.WTF::Vector.12"*
  %28 = icmp eq i64 %15, 0
  %29 = bitcast i8* %6 to %"class.payments::mojom::blink::SecurePaymentConfirmationRequest"*
  br i1 %28, label %57, label %30, !prof !5

30:                                               ; preds = %2
  %31 = inttoptr i64 %15 to i8*
  %32 = icmp eq i32 %24, 0
  br i1 %32, label %54, label %33, !prof !6

33:                                               ; preds = %30
  %34 = zext i32 %24 to i64
  %35 = getelementptr inbounds %"class.WTF::Vector.12", %"class.WTF::Vector.12"* %27, i64 %34
  br label %36

36:                                               ; preds = %47, %33
  %37 = phi %"class.WTF::Vector.12"* [ %48, %47 ], [ %27, %33 ]
  %38 = getelementptr inbounds %"class.WTF::Vector.12", %"class.WTF::Vector.12"* %37, i64 0, i32 0, i32 0, i32 0
  %39 = load i8*, i8** %38, align 8
  %40 = icmp eq i8* %39, null
  br i1 %40, label %47, label %41, !prof !5

41:                                               ; preds = %36
  %42 = getelementptr inbounds %"class.WTF::Vector.12", %"class.WTF::Vector.12"* %37, i64 0, i32 0, i32 0, i32 2
  %43 = load i32, i32* %42, align 4
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %46, label %45, !prof !6

45:                                               ; preds = %41
  store i32 0, i32* %42, align 4
  br label %46

46:                                               ; preds = %45, %41
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %39) #7
  store i8* null, i8** %38, align 8
  br label %47

47:                                               ; preds = %46, %36
  %48 = getelementptr inbounds %"class.WTF::Vector.12", %"class.WTF::Vector.12"* %37, i64 1
  %49 = icmp eq %"class.WTF::Vector.12"* %48, %35
  br i1 %49, label %50, label %36

50:                                               ; preds = %47
  store i32 0, i32* %23, align 4
  %51 = bitcast %"class.WTF::Vector.9"* %3 to i8**
  %52 = load i8*, i8** %51, align 8
  %53 = load %"class.payments::mojom::blink::SecurePaymentConfirmationRequest"*, %"class.payments::mojom::blink::SecurePaymentConfirmationRequest"** %5, align 8
  br label %54

54:                                               ; preds = %50, %30
  %55 = phi %"class.payments::mojom::blink::SecurePaymentConfirmationRequest"* [ %53, %50 ], [ %29, %30 ]
  %56 = phi i8* [ %52, %50 ], [ %31, %30 ]
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %56) #7
  store %"class.WTF::Vector.12"* null, %"class.WTF::Vector.12"** %26, align 8
  br label %57

57:                                               ; preds = %2, %54
  %58 = phi %"class.payments::mojom::blink::SecurePaymentConfirmationRequest"* [ %29, %2 ], [ %55, %54 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10) #7
  %59 = bitcast %"class.WTF::Vector.12"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %59) #7
  %60 = getelementptr inbounds %"class.blink::SecurePaymentConfirmationRequest", %"class.blink::SecurePaymentConfirmationRequest"* %1, i64 0, i32 6
  call void @_ZN4mojo13TypeConverterIN3WTF6VectorIhLj0ENS1_18PartitionAllocatorEEEN5blink28ArrayBufferOrArrayBufferViewEE7ConvertERKS6_(%"class.WTF::Vector.12"* nonnull sret %4, %"class.blink::ArrayBufferOrArrayBufferView"* dereferenceable(24) %60) #7
  %61 = getelementptr inbounds %"class.payments::mojom::blink::SecurePaymentConfirmationRequest", %"class.payments::mojom::blink::SecurePaymentConfirmationRequest"* %58, i64 0, i32 1
  %62 = bitcast %"class.WTF::Vector.12"* %4 to i64*
  %63 = load i64, i64* %62, align 8
  %64 = bitcast %"class.WTF::Vector.12"* %61 to i64*
  %65 = load i64, i64* %64, align 8
  store atomic i64 %65, i64* %62 monotonic, align 8
  store atomic i64 %63, i64* %64 monotonic, align 8
  %66 = getelementptr inbounds %"class.payments::mojom::blink::SecurePaymentConfirmationRequest", %"class.payments::mojom::blink::SecurePaymentConfirmationRequest"* %58, i64 0, i32 1, i32 0, i32 0, i32 1
  %67 = getelementptr inbounds %"class.WTF::Vector.12", %"class.WTF::Vector.12"* %4, i64 0, i32 0, i32 0, i32 1
  %68 = load i32, i32* %66, align 4
  %69 = load i32, i32* %67, align 8
  store i32 %69, i32* %66, align 4
  store i32 %68, i32* %67, align 8
  %70 = getelementptr inbounds %"class.payments::mojom::blink::SecurePaymentConfirmationRequest", %"class.payments::mojom::blink::SecurePaymentConfirmationRequest"* %58, i64 0, i32 1, i32 0, i32 0, i32 2
  %71 = getelementptr inbounds %"class.WTF::Vector.12", %"class.WTF::Vector.12"* %4, i64 0, i32 0, i32 0, i32 2
  %72 = load i32, i32* %70, align 4
  %73 = load i32, i32* %71, align 4
  store i32 %73, i32* %70, align 4
  store i32 %72, i32* %71, align 4
  %74 = getelementptr inbounds %"class.WTF::Vector.12", %"class.WTF::Vector.12"* %4, i64 0, i32 0, i32 0, i32 0
  %75 = inttoptr i64 %65 to i8*
  %76 = icmp eq i64 %65, 0
  br i1 %76, label %81, label %77, !prof !5

77:                                               ; preds = %57
  %78 = icmp eq i32 %72, 0
  br i1 %78, label %80, label %79, !prof !6

79:                                               ; preds = %77
  store i32 0, i32* %71, align 4
  br label %80

80:                                               ; preds = %79, %77
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %75) #7
  store i8* null, i8** %74, align 8
  br label %81

81:                                               ; preds = %57, %80
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %59) #7
  %82 = getelementptr inbounds %"class.blink::SecurePaymentConfirmationRequest", %"class.blink::SecurePaymentConfirmationRequest"* %1, i64 0, i32 2
  %83 = load i8, i8* %82, align 1, !range !7
  %84 = icmp eq i8 %83, 0
  br i1 %84, label %96, label %85

85:                                               ; preds = %81
  %86 = getelementptr inbounds %"class.blink::SecurePaymentConfirmationRequest", %"class.blink::SecurePaymentConfirmationRequest"* %1, i64 0, i32 7
  %87 = load i32, i32* %86, align 8
  %88 = zext i32 %87 to i64
  %89 = mul nuw nsw i64 %88, 1000
  %90 = load %"class.payments::mojom::blink::SecurePaymentConfirmationRequest"*, %"class.payments::mojom::blink::SecurePaymentConfirmationRequest"** %5, align 8
  %91 = getelementptr inbounds %"class.payments::mojom::blink::SecurePaymentConfirmationRequest", %"class.payments::mojom::blink::SecurePaymentConfirmationRequest"* %90, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %92 = load i8, i8* %91, align 8, !range !7
  %93 = icmp eq i8 %92, 0
  %94 = getelementptr inbounds %"class.payments::mojom::blink::SecurePaymentConfirmationRequest", %"class.payments::mojom::blink::SecurePaymentConfirmationRequest"* %90, i64 0, i32 2, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  store i64 %89, i64* %94, align 8
  br i1 %93, label %95, label %96

95:                                               ; preds = %85
  store i8 1, i8* %91, align 8
  br label %96

96:                                               ; preds = %81, %95, %85
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #2

declare void @_ZN4mojo13TypeConverterIN3WTF6VectorIhLj0ENS1_18PartitionAllocatorEEEN5blink28ArrayBufferOrArrayBufferViewEE7ConvertERKS6_(%"class.WTF::Vector.12"* sret, %"class.blink::ArrayBufferOrArrayBufferView"* dereferenceable(24)) local_unnamed_addr #2

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #3

declare void @_ZN8payments5mojom5blink32SecurePaymentConfirmationRequestC1Ev(%"class.payments::mojom::blink::SecurePaymentConfirmationRequest"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4mojo13TypeConverterIN3WTF6VectorINS2_IhLj0ENS1_18PartitionAllocatorEEELj0ES3_EEN5blink10HeapVectorINS6_28ArrayBufferOrArrayBufferViewELj0EEEE7ConvertERKS9_(%"class.WTF::Vector.9"* noalias sret, %"class.blink::HeapVector"* dereferenceable(16)) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.WTF::Vector.12", align 8
  %4 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %0, i64 0, i32 0, i32 0, i32 0
  %5 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %0, i64 0, i32 0, i32 0, i32 1
  %6 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %0, i64 0, i32 0, i32 0, i32 2
  %7 = bitcast %"class.WTF::Vector.9"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 16, i1 false) #7
  %8 = getelementptr inbounds %"class.blink::HeapVector", %"class.blink::HeapVector"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %9 = load %"class.blink::ArrayBufferOrArrayBufferView"*, %"class.blink::ArrayBufferOrArrayBufferView"** %8, align 8
  %10 = getelementptr inbounds %"class.blink::HeapVector", %"class.blink::HeapVector"* %1, i64 0, i32 0, i32 0, i32 0, i32 2
  %11 = load i32, i32* %10, align 4
  %12 = zext i32 %11 to i64
  %13 = getelementptr inbounds %"class.blink::ArrayBufferOrArrayBufferView", %"class.blink::ArrayBufferOrArrayBufferView"* %9, i64 %12
  %14 = icmp eq i32 %11, 0
  br i1 %14, label %53, label %15

15:                                               ; preds = %2
  %16 = bitcast %"class.WTF::Vector.12"* %3 to i8*
  %17 = bitcast %"class.WTF::Vector.12"* %3 to i64*
  %18 = getelementptr inbounds %"class.WTF::Vector.12", %"class.WTF::Vector.12"* %3, i64 0, i32 0, i32 0, i32 1
  %19 = getelementptr inbounds %"class.WTF::Vector.12", %"class.WTF::Vector.12"* %3, i64 0, i32 0, i32 0, i32 2
  %20 = getelementptr inbounds %"class.WTF::Vector.12", %"class.WTF::Vector.12"* %3, i64 0, i32 0, i32 0, i32 0
  br label %21

21:                                               ; preds = %15, %50
  %22 = phi %"class.blink::ArrayBufferOrArrayBufferView"* [ %9, %15 ], [ %51, %50 ]
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %16) #7
  call void @_ZN4mojo13TypeConverterIN3WTF6VectorIhLj0ENS1_18PartitionAllocatorEEEN5blink28ArrayBufferOrArrayBufferViewEE7ConvertERKS6_(%"class.WTF::Vector.12"* nonnull sret %3, %"class.blink::ArrayBufferOrArrayBufferView"* dereferenceable(24) %22) #7
  %23 = load i32, i32* %6, align 4
  %24 = load i32, i32* %5, align 8
  %25 = icmp eq i32 %23, %24
  br i1 %25, label %41, label %26, !prof !6

26:                                               ; preds = %21
  %27 = load %"class.WTF::Vector.12"*, %"class.WTF::Vector.12"** %4, align 8
  %28 = zext i32 %23 to i64
  %29 = getelementptr inbounds %"class.WTF::Vector.12", %"class.WTF::Vector.12"* %27, i64 %28
  %30 = bitcast %"class.WTF::Vector.12"* %29 to i8*
  %31 = getelementptr inbounds %"class.WTF::Vector.12", %"class.WTF::Vector.12"* %27, i64 %28, i32 0, i32 0, i32 1
  %32 = getelementptr inbounds %"class.WTF::Vector.12", %"class.WTF::Vector.12"* %27, i64 %28, i32 0, i32 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* align 8 %30, i8 0, i64 16, i1 false) #7
  %33 = load i64, i64* %17, align 8
  %34 = bitcast %"class.WTF::Vector.12"* %29 to i64*
  store atomic i64 0, i64* %17 monotonic, align 8
  store atomic i64 %33, i64* %34 monotonic, align 8
  %35 = load i32, i32* %31, align 4
  %36 = load i32, i32* %18, align 8
  store i32 %36, i32* %31, align 4
  store i32 %35, i32* %18, align 8
  %37 = load i32, i32* %32, align 4
  %38 = load i32, i32* %19, align 4
  store i32 %38, i32* %32, align 4
  store i32 %37, i32* %19, align 4
  %39 = load i32, i32* %6, align 4
  %40 = add i32 %39, 1
  store i32 %40, i32* %6, align 4
  br label %42

41:                                               ; preds = %21
  call void @_ZN3WTF6VectorINS0_IhLj0ENS_18PartitionAllocatorEEELj0ES1_E14AppendSlowCaseIS2_EEvOT_(%"class.WTF::Vector.9"* %0, %"class.WTF::Vector.12"* nonnull dereferenceable(16) %3) #7
  br label %42

42:                                               ; preds = %26, %41
  %43 = load i8*, i8** %20, align 8
  %44 = icmp eq i8* %43, null
  br i1 %44, label %50, label %45, !prof !5

45:                                               ; preds = %42
  %46 = load i32, i32* %19, align 4
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %49, label %48, !prof !6

48:                                               ; preds = %45
  store i32 0, i32* %19, align 4
  br label %49

49:                                               ; preds = %48, %45
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %43) #7
  store i8* null, i8** %20, align 8
  br label %50

50:                                               ; preds = %42, %49
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %16) #7
  %51 = getelementptr inbounds %"class.blink::ArrayBufferOrArrayBufferView", %"class.blink::ArrayBufferOrArrayBufferView"* %22, i64 1
  %52 = icmp eq %"class.blink::ArrayBufferOrArrayBufferView"* %51, %13
  br i1 %52, label %53, label %21

53:                                               ; preds = %50, %2
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorINS0_IhLj0ENS_18PartitionAllocatorEEELj0ES1_E14AppendSlowCaseIS2_EEvOT_(%"class.WTF::Vector.9"*, %"class.WTF::Vector.12"* dereferenceable(16)) local_unnamed_addr #4 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  %6 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = load %"class.WTF::Vector.12"*, %"class.WTF::Vector.12"** %6, align 8
  %8 = icmp ugt %"class.WTF::Vector.12"* %7, %1
  br i1 %8, label %13, label %9

9:                                                ; preds = %2
  %10 = zext i32 %4 to i64
  %11 = getelementptr inbounds %"class.WTF::Vector.12", %"class.WTF::Vector.12"* %7, i64 %10
  %12 = icmp ugt %"class.WTF::Vector.12"* %11, %1
  br i1 %12, label %37, label %13

13:                                               ; preds = %9, %2
  %14 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %0, i64 0, i32 0, i32 0, i32 1
  %15 = load i32, i32* %14, align 8
  %16 = lshr i32 %15, 2
  %17 = add i32 %15, 1
  %18 = add i32 %17, %16
  %19 = icmp ugt i32 %18, 4
  %20 = select i1 %19, i32 %18, i32 4
  %21 = icmp ugt i32 %20, %5
  %22 = select i1 %21, i32 %20, i32 %5
  %23 = icmp ult i32 %15, %22
  br i1 %23, label %24, label %68, !prof !5

24:                                               ; preds = %13
  %25 = icmp eq %"class.WTF::Vector.12"* %7, null
  br i1 %25, label %26, label %35

26:                                               ; preds = %24
  %27 = zext i32 %22 to i64
  %28 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6VectorIhLj0ES0_EEEEmm(i64 %27) #7
  %29 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %28, i8* getelementptr inbounds ([102 x i8], [102 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6VectorIhLj0ENS_18PartitionAllocatorEEEEEPKcv, i64 0, i64 0)) #7
  %30 = ptrtoint i8* %29 to i64
  %31 = bitcast %"class.WTF::Vector.9"* %0 to i64*
  store atomic i64 %30, i64* %31 monotonic, align 8
  %32 = lshr i64 %28, 4
  %33 = trunc i64 %32 to i32
  store i32 %33, i32* %14, align 8
  %34 = bitcast i8* %29 to %"class.WTF::Vector.12"*
  br label %68

35:                                               ; preds = %24
  tail call void @_ZN3WTF6VectorINS0_IhLj0ENS_18PartitionAllocatorEEELj0ES1_E16ReallocateBufferEj(%"class.WTF::Vector.9"* %0, i32 %22) #7
  %36 = load %"class.WTF::Vector.12"*, %"class.WTF::Vector.12"** %6, align 8
  br label %68

37:                                               ; preds = %9
  %38 = ptrtoint %"class.WTF::Vector.12"* %1 to i64
  %39 = ptrtoint %"class.WTF::Vector.12"* %7 to i64
  %40 = sub i64 %38, %39
  %41 = ashr exact i64 %40, 4
  %42 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %0, i64 0, i32 0, i32 0, i32 1
  %43 = load i32, i32* %42, align 8
  %44 = lshr i32 %43, 2
  %45 = add i32 %43, 1
  %46 = add i32 %45, %44
  %47 = icmp ugt i32 %46, 4
  %48 = select i1 %47, i32 %46, i32 4
  %49 = icmp ugt i32 %48, %5
  %50 = select i1 %49, i32 %48, i32 %5
  %51 = icmp ult i32 %43, %50
  br i1 %51, label %52, label %65, !prof !5

52:                                               ; preds = %37
  %53 = icmp eq %"class.WTF::Vector.12"* %7, null
  br i1 %53, label %54, label %63

54:                                               ; preds = %52
  %55 = zext i32 %50 to i64
  %56 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6VectorIhLj0ES0_EEEEmm(i64 %55) #7
  %57 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %56, i8* getelementptr inbounds ([102 x i8], [102 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6VectorIhLj0ENS_18PartitionAllocatorEEEEEPKcv, i64 0, i64 0)) #7
  %58 = ptrtoint i8* %57 to i64
  %59 = bitcast %"class.WTF::Vector.9"* %0 to i64*
  store atomic i64 %58, i64* %59 monotonic, align 8
  %60 = lshr i64 %56, 4
  %61 = trunc i64 %60 to i32
  store i32 %61, i32* %42, align 8
  %62 = bitcast i8* %57 to %"class.WTF::Vector.12"*
  br label %65

63:                                               ; preds = %52
  tail call void @_ZN3WTF6VectorINS0_IhLj0ENS_18PartitionAllocatorEEELj0ES1_E16ReallocateBufferEj(%"class.WTF::Vector.9"* %0, i32 %50) #7
  %64 = load %"class.WTF::Vector.12"*, %"class.WTF::Vector.12"** %6, align 8
  br label %65

65:                                               ; preds = %37, %54, %63
  %66 = phi %"class.WTF::Vector.12"* [ %7, %37 ], [ %62, %54 ], [ %64, %63 ]
  %67 = getelementptr inbounds %"class.WTF::Vector.12", %"class.WTF::Vector.12"* %66, i64 %41
  br label %68

68:                                               ; preds = %35, %26, %13, %65
  %69 = phi %"class.WTF::Vector.12"* [ %66, %65 ], [ %7, %13 ], [ %34, %26 ], [ %36, %35 ]
  %70 = phi %"class.WTF::Vector.12"* [ %67, %65 ], [ %1, %13 ], [ %1, %26 ], [ %1, %35 ]
  %71 = load i32, i32* %3, align 4
  %72 = zext i32 %71 to i64
  %73 = getelementptr inbounds %"class.WTF::Vector.12", %"class.WTF::Vector.12"* %69, i64 %72
  %74 = bitcast %"class.WTF::Vector.12"* %73 to i8*
  %75 = getelementptr inbounds %"class.WTF::Vector.12", %"class.WTF::Vector.12"* %69, i64 %72, i32 0, i32 0, i32 1
  %76 = getelementptr inbounds %"class.WTF::Vector.12", %"class.WTF::Vector.12"* %69, i64 %72, i32 0, i32 0, i32 2
  %77 = bitcast %"class.WTF::Vector.12"* %70 to i64*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %74, i8 0, i64 16, i1 false) #7
  %78 = load i64, i64* %77, align 8
  %79 = bitcast %"class.WTF::Vector.12"* %73 to i64*
  store atomic i64 0, i64* %77 monotonic, align 8
  store atomic i64 %78, i64* %79 monotonic, align 8
  %80 = getelementptr inbounds %"class.WTF::Vector.12", %"class.WTF::Vector.12"* %70, i64 0, i32 0, i32 0, i32 1
  %81 = load i32, i32* %75, align 4
  %82 = load i32, i32* %80, align 4
  store i32 %82, i32* %75, align 4
  store i32 %81, i32* %80, align 4
  %83 = getelementptr inbounds %"class.WTF::Vector.12", %"class.WTF::Vector.12"* %70, i64 0, i32 0, i32 0, i32 2
  %84 = load i32, i32* %76, align 4
  %85 = load i32, i32* %83, align 4
  store i32 %85, i32* %76, align 4
  store i32 %84, i32* %83, align 4
  %86 = load i32, i32* %3, align 4
  %87 = add i32 %86, 1
  store i32 %87, i32* %3, align 4
  ret void
}

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorINS0_IhLj0ENS_18PartitionAllocatorEEELj0ES1_E16ReallocateBufferEj(%"class.WTF::Vector.9"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp eq i32 %1, 0
  br i1 %3, label %4, label %42

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %0, i64 0, i32 0, i32 0, i32 0
  %6 = load %"class.WTF::Vector.12"*, %"class.WTF::Vector.12"** %5, align 8
  %7 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %0, i64 0, i32 0, i32 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  %10 = getelementptr inbounds %"class.WTF::Vector.12", %"class.WTF::Vector.12"* %6, i64 %9
  %11 = bitcast %"class.WTF::Vector.9"* %0 to i64*
  store atomic i64 0, i64* %11 monotonic, align 8
  %12 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 0, i32* %12, align 8
  %13 = icmp eq i32 %8, 0
  br i1 %13, label %40, label %14

14:                                               ; preds = %4, %36
  %15 = phi %"class.WTF::Vector.12"* [ %38, %36 ], [ %6, %4 ]
  %16 = phi %"class.WTF::Vector.12"* [ %37, %36 ], [ null, %4 ]
  %17 = bitcast %"class.WTF::Vector.12"* %16 to i8*
  %18 = getelementptr inbounds %"class.WTF::Vector.12", %"class.WTF::Vector.12"* %16, i64 0, i32 0, i32 0, i32 1
  %19 = getelementptr inbounds %"class.WTF::Vector.12", %"class.WTF::Vector.12"* %16, i64 0, i32 0, i32 0, i32 2
  %20 = bitcast %"class.WTF::Vector.12"* %15 to i64*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 16, i1 false) #7
  %21 = load i64, i64* %20, align 8
  %22 = bitcast %"class.WTF::Vector.12"* %16 to i64*
  store atomic i64 0, i64* %20 monotonic, align 8
  store atomic i64 %21, i64* %22 monotonic, align 8
  %23 = getelementptr inbounds %"class.WTF::Vector.12", %"class.WTF::Vector.12"* %15, i64 0, i32 0, i32 0, i32 1
  %24 = load i32, i32* %18, align 4
  %25 = load i32, i32* %23, align 4
  store i32 %25, i32* %18, align 4
  store i32 %24, i32* %23, align 4
  %26 = getelementptr inbounds %"class.WTF::Vector.12", %"class.WTF::Vector.12"* %15, i64 0, i32 0, i32 0, i32 2
  %27 = load i32, i32* %19, align 4
  %28 = load i32, i32* %26, align 4
  store i32 %28, i32* %19, align 4
  store i32 %27, i32* %26, align 4
  %29 = getelementptr inbounds %"class.WTF::Vector.12", %"class.WTF::Vector.12"* %15, i64 0, i32 0, i32 0, i32 0
  %30 = load i8*, i8** %29, align 8
  %31 = icmp eq i8* %30, null
  br i1 %31, label %36, label %32, !prof !5

32:                                               ; preds = %14
  %33 = icmp eq i32 %27, 0
  br i1 %33, label %35, label %34, !prof !6

34:                                               ; preds = %32
  store i32 0, i32* %26, align 4
  br label %35

35:                                               ; preds = %34, %32
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %30) #7
  store i8* null, i8** %29, align 8
  br label %36

36:                                               ; preds = %35, %14
  %37 = getelementptr inbounds %"class.WTF::Vector.12", %"class.WTF::Vector.12"* %16, i64 1
  %38 = getelementptr inbounds %"class.WTF::Vector.12", %"class.WTF::Vector.12"* %15, i64 1
  %39 = icmp eq %"class.WTF::Vector.12"* %38, %10
  br i1 %39, label %40, label %14

40:                                               ; preds = %36, %4
  %41 = bitcast %"class.WTF::Vector.12"* %6 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %41) #7
  br label %93

42:                                               ; preds = %2
  %43 = zext i32 %1 to i64
  %44 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6VectorIhLj0ES0_EEEEmm(i64 %43) #7
  %45 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %44, i8* getelementptr inbounds ([102 x i8], [102 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6VectorIhLj0ENS_18PartitionAllocatorEEEEEPKcv, i64 0, i64 0)) #7
  %46 = lshr i64 %44, 4
  %47 = ptrtoint i8* %45 to i64
  %48 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %0, i64 0, i32 0, i32 0, i32 0
  %49 = load %"class.WTF::Vector.12"*, %"class.WTF::Vector.12"** %48, align 8
  %50 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %0, i64 0, i32 0, i32 0, i32 2
  %51 = load i32, i32* %50, align 4
  %52 = zext i32 %51 to i64
  %53 = getelementptr inbounds %"class.WTF::Vector.12", %"class.WTF::Vector.12"* %49, i64 %52
  %54 = icmp eq i32 %51, 0
  br i1 %54, label %55, label %57

55:                                               ; preds = %42
  %56 = bitcast %"class.WTF::Vector.12"* %49 to i8*
  br label %88

57:                                               ; preds = %42
  %58 = bitcast i8* %45 to %"class.WTF::Vector.12"*
  br label %59

59:                                               ; preds = %57, %81
  %60 = phi %"class.WTF::Vector.12"* [ %83, %81 ], [ %49, %57 ]
  %61 = phi %"class.WTF::Vector.12"* [ %82, %81 ], [ %58, %57 ]
  %62 = bitcast %"class.WTF::Vector.12"* %61 to i8*
  %63 = getelementptr inbounds %"class.WTF::Vector.12", %"class.WTF::Vector.12"* %61, i64 0, i32 0, i32 0, i32 1
  %64 = getelementptr inbounds %"class.WTF::Vector.12", %"class.WTF::Vector.12"* %61, i64 0, i32 0, i32 0, i32 2
  %65 = bitcast %"class.WTF::Vector.12"* %60 to i64*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %62, i8 0, i64 16, i1 false) #7
  %66 = load i64, i64* %65, align 8
  %67 = bitcast %"class.WTF::Vector.12"* %61 to i64*
  store atomic i64 0, i64* %65 monotonic, align 8
  store atomic i64 %66, i64* %67 monotonic, align 8
  %68 = getelementptr inbounds %"class.WTF::Vector.12", %"class.WTF::Vector.12"* %60, i64 0, i32 0, i32 0, i32 1
  %69 = load i32, i32* %63, align 4
  %70 = load i32, i32* %68, align 4
  store i32 %70, i32* %63, align 4
  store i32 %69, i32* %68, align 4
  %71 = getelementptr inbounds %"class.WTF::Vector.12", %"class.WTF::Vector.12"* %60, i64 0, i32 0, i32 0, i32 2
  %72 = load i32, i32* %64, align 4
  %73 = load i32, i32* %71, align 4
  store i32 %73, i32* %64, align 4
  store i32 %72, i32* %71, align 4
  %74 = getelementptr inbounds %"class.WTF::Vector.12", %"class.WTF::Vector.12"* %60, i64 0, i32 0, i32 0, i32 0
  %75 = load i8*, i8** %74, align 8
  %76 = icmp eq i8* %75, null
  br i1 %76, label %81, label %77, !prof !5

77:                                               ; preds = %59
  %78 = icmp eq i32 %72, 0
  br i1 %78, label %80, label %79, !prof !6

79:                                               ; preds = %77
  store i32 0, i32* %71, align 4
  br label %80

80:                                               ; preds = %79, %77
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %75) #7
  store i8* null, i8** %74, align 8
  br label %81

81:                                               ; preds = %80, %59
  %82 = getelementptr inbounds %"class.WTF::Vector.12", %"class.WTF::Vector.12"* %61, i64 1
  %83 = getelementptr inbounds %"class.WTF::Vector.12", %"class.WTF::Vector.12"* %60, i64 1
  %84 = icmp eq %"class.WTF::Vector.12"* %83, %53
  br i1 %84, label %85, label %59

85:                                               ; preds = %81
  %86 = bitcast %"class.WTF::Vector.9"* %0 to i8**
  %87 = load i8*, i8** %86, align 8
  br label %88

88:                                               ; preds = %55, %85
  %89 = phi i8* [ %87, %85 ], [ %56, %55 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %89) #7
  %90 = bitcast %"class.WTF::Vector.9"* %0 to i64*
  store atomic i64 %47, i64* %90 monotonic, align 8
  %91 = trunc i64 %46 to i32
  %92 = getelementptr inbounds %"class.WTF::Vector.9", %"class.WTF::Vector.9"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 %91, i32* %92, align 8
  br label %93

93:                                               ; preds = %88, %40
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6VectorIhLj0ES0_EEEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #7
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 134086656
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #7
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 134086656) #7
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.2, i64 0, i64 0), i8* %11, i8* %12) #7
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #7
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.3, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #7
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #7
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #7
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #7
  %20 = shl i64 %0, 4
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #7
  ret i64 %21
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #2

declare i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64) local_unnamed_addr #2

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #2

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #2

declare i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64, i8*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { builtin nounwind }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN8payments5mojom5blink32SecurePaymentConfirmationRequest3NewIJEEEN4mojo9StructPtrIS2_EEDpOT_: argument 0"}
!4 = distinct !{!4, !"_ZN8payments5mojom5blink32SecurePaymentConfirmationRequest3NewIJEEEN4mojo9StructPtrIS2_EEDpOT_"}
!5 = !{!"branch_weights", i32 2000, i32 1}
!6 = !{!"branch_weights", i32 1, i32 2000}
!7 = !{i8 0, i8 2}
