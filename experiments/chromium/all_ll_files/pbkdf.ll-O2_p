; ModuleID = '../../third_party/boringssl/src/crypto/evp/pbkdf.c'
source_filename = "../../third_party/boringssl/src/crypto/evp/pbkdf.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.env_md_st = type opaque
%struct.hmac_ctx_st = type { %struct.env_md_st*, %struct.env_md_ctx_st, %struct.env_md_ctx_st, %struct.env_md_ctx_st }
%struct.env_md_ctx_st = type { %struct.env_md_st*, i8*, %struct.evp_pkey_ctx_st*, %struct.evp_md_pctx_ops* }
%struct.evp_pkey_ctx_st = type opaque
%struct.evp_md_pctx_ops = type opaque
%struct.engine_st = type opaque

; Function Attrs: nounwind ssp uwtable
define hidden i32 @PKCS5_PBKDF2_HMAC(i8*, i64, i8*, i64, i32, %struct.env_md_st*, i64, i8* nocapture) local_unnamed_addr #0 {
  %9 = alloca %struct.hmac_ctx_st, align 8
  %10 = alloca i32, align 4
  %11 = bitcast i32* %10 to [4 x i8]*
  %12 = alloca [64 x i8], align 16
  %13 = getelementptr inbounds [64 x i8], [64 x i8]* %12, i64 0, i64 0
  %14 = tail call i64 @EVP_MD_size(%struct.env_md_st* %5) #3
  %15 = bitcast %struct.hmac_ctx_st* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 104, i8* nonnull %15) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %15, i8 -86, i64 104, i1 false)
  call void @HMAC_CTX_init(%struct.hmac_ctx_st* nonnull %9) #3
  %16 = call i32 @HMAC_Init_ex(%struct.hmac_ctx_st* nonnull %9, i8* %0, i64 %1, %struct.env_md_st* %5, %struct.engine_st* null) #3
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %167, label %18

18:                                               ; preds = %8
  %19 = icmp eq i64 %6, 0
  br i1 %19, label %164, label %20

20:                                               ; preds = %18
  %21 = bitcast i32* %10 to i8*
  %22 = getelementptr inbounds [4 x i8], [4 x i8]* %11, i64 0, i64 1
  %23 = getelementptr inbounds [4 x i8], [4 x i8]* %11, i64 0, i64 2
  %24 = getelementptr inbounds [4 x i8], [4 x i8]* %11, i64 0, i64 3
  %25 = getelementptr inbounds [64 x i8], [64 x i8]* %12, i64 0, i64 0
  %26 = icmp ugt i32 %4, 1
  br label %27

27:                                               ; preds = %20, %159
  %28 = phi i32 [ 1, %20 ], [ %162, %159 ]
  %29 = phi i8* [ %7, %20 ], [ %161, %159 ]
  %30 = phi i64 [ %6, %20 ], [ %160, %159 ]
  %31 = icmp ugt i64 %14, %30
  %32 = select i1 %31, i64 %30, i64 %14
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %21) #3
  %33 = lshr i32 %28, 24
  %34 = trunc i32 %33 to i8
  store i8 %34, i8* %21, align 4
  %35 = lshr i32 %28, 16
  %36 = trunc i32 %35 to i8
  store i8 %36, i8* %22, align 1
  %37 = lshr i32 %28, 8
  %38 = trunc i32 %37 to i8
  store i8 %38, i8* %23, align 2
  %39 = trunc i32 %28 to i8
  store i8 %39, i8* %24, align 1
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %25) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %25, i8 -86, i64 64, i1 false)
  %40 = call i32 @HMAC_Init_ex(%struct.hmac_ctx_st* nonnull %9, i8* null, i64 0, %struct.env_md_st* null, %struct.engine_st* null) #3
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %158, label %42

42:                                               ; preds = %27
  %43 = call i32 @HMAC_Update(%struct.hmac_ctx_st* nonnull %9, i8* %2, i64 %3) #3
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %158, label %45

45:                                               ; preds = %42
  %46 = call i32 @HMAC_Update(%struct.hmac_ctx_st* nonnull %9, i8* nonnull %21, i64 4) #3
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %158, label %48

48:                                               ; preds = %45
  %49 = call i32 @HMAC_Final(%struct.hmac_ctx_st* nonnull %9, i8* nonnull %25, i32* null) #3
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %158, label %51

51:                                               ; preds = %48
  %52 = icmp eq i64 %32, 0
  br i1 %52, label %54, label %53

53:                                               ; preds = %51
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %29, i8* nonnull align 16 %25, i64 %32, i1 false) #3
  br label %54

54:                                               ; preds = %51, %53
  br i1 %26, label %55, label %159

55:                                               ; preds = %54
  %56 = getelementptr i8, i8* %29, i64 %32
  %57 = getelementptr [64 x i8], [64 x i8]* %12, i64 0, i64 %32
  %58 = add i64 %32, -32
  %59 = lshr i64 %58, 5
  %60 = add nuw nsw i64 %59, 1
  %61 = icmp ult i64 %32, 32
  %62 = icmp ult i8* %29, %57
  %63 = icmp ult i8* %13, %56
  %64 = and i1 %62, %63
  %65 = and i64 %32, -32
  %66 = and i64 %60, 1
  %67 = icmp eq i64 %59, 0
  %68 = sub nuw nsw i64 %60, %66
  %69 = icmp eq i64 %66, 0
  %70 = icmp eq i64 %32, %65
  br label %71

71:                                               ; preds = %55, %146
  %72 = phi i32 [ %147, %146 ], [ 1, %55 ]
  %73 = call i32 @HMAC_Init_ex(%struct.hmac_ctx_st* nonnull %9, i8* null, i64 0, %struct.env_md_st* null, %struct.engine_st* null) #3
  %74 = icmp eq i32 %73, 0
  br i1 %74, label %158, label %75

75:                                               ; preds = %71
  %76 = call i32 @HMAC_Update(%struct.hmac_ctx_st* nonnull %9, i8* nonnull %25, i64 %14) #3
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %158, label %78

78:                                               ; preds = %75
  %79 = call i32 @HMAC_Final(%struct.hmac_ctx_st* nonnull %9, i8* nonnull %25, i32* null) #3
  %80 = icmp eq i32 %79, 0
  br i1 %80, label %158, label %81

81:                                               ; preds = %78
  br i1 %52, label %146, label %82

82:                                               ; preds = %81
  %83 = or i1 %61, %64
  br i1 %83, label %84, label %86

84:                                               ; preds = %82, %145
  %85 = phi i64 [ 0, %82 ], [ %65, %145 ]
  br label %149

86:                                               ; preds = %82
  br i1 %67, label %126, label %87

87:                                               ; preds = %86, %87
  %88 = phi i64 [ %123, %87 ], [ 0, %86 ]
  %89 = phi i64 [ %124, %87 ], [ %68, %86 ]
  %90 = getelementptr inbounds [64 x i8], [64 x i8]* %12, i64 0, i64 %88
  %91 = bitcast i8* %90 to <16 x i8>*
  %92 = load <16 x i8>, <16 x i8>* %91, align 16, !alias.scope !2
  %93 = getelementptr inbounds i8, i8* %90, i64 16
  %94 = bitcast i8* %93 to <16 x i8>*
  %95 = load <16 x i8>, <16 x i8>* %94, align 16, !alias.scope !2
  %96 = getelementptr inbounds i8, i8* %29, i64 %88
  %97 = bitcast i8* %96 to <16 x i8>*
  %98 = load <16 x i8>, <16 x i8>* %97, align 1, !alias.scope !5, !noalias !2
  %99 = getelementptr inbounds i8, i8* %96, i64 16
  %100 = bitcast i8* %99 to <16 x i8>*
  %101 = load <16 x i8>, <16 x i8>* %100, align 1, !alias.scope !5, !noalias !2
  %102 = xor <16 x i8> %98, %92
  %103 = xor <16 x i8> %101, %95
  %104 = bitcast i8* %96 to <16 x i8>*
  store <16 x i8> %102, <16 x i8>* %104, align 1, !alias.scope !5, !noalias !2
  %105 = bitcast i8* %99 to <16 x i8>*
  store <16 x i8> %103, <16 x i8>* %105, align 1, !alias.scope !5, !noalias !2
  %106 = or i64 %88, 32
  %107 = getelementptr inbounds [64 x i8], [64 x i8]* %12, i64 0, i64 %106
  %108 = bitcast i8* %107 to <16 x i8>*
  %109 = load <16 x i8>, <16 x i8>* %108, align 16, !alias.scope !2
  %110 = getelementptr inbounds i8, i8* %107, i64 16
  %111 = bitcast i8* %110 to <16 x i8>*
  %112 = load <16 x i8>, <16 x i8>* %111, align 16, !alias.scope !2
  %113 = getelementptr inbounds i8, i8* %29, i64 %106
  %114 = bitcast i8* %113 to <16 x i8>*
  %115 = load <16 x i8>, <16 x i8>* %114, align 1, !alias.scope !5, !noalias !2
  %116 = getelementptr inbounds i8, i8* %113, i64 16
  %117 = bitcast i8* %116 to <16 x i8>*
  %118 = load <16 x i8>, <16 x i8>* %117, align 1, !alias.scope !5, !noalias !2
  %119 = xor <16 x i8> %115, %109
  %120 = xor <16 x i8> %118, %112
  %121 = bitcast i8* %113 to <16 x i8>*
  store <16 x i8> %119, <16 x i8>* %121, align 1, !alias.scope !5, !noalias !2
  %122 = bitcast i8* %116 to <16 x i8>*
  store <16 x i8> %120, <16 x i8>* %122, align 1, !alias.scope !5, !noalias !2
  %123 = add i64 %88, 64
  %124 = add i64 %89, -2
  %125 = icmp eq i64 %124, 0
  br i1 %125, label %126, label %87, !llvm.loop !7

126:                                              ; preds = %87, %86
  %127 = phi i64 [ 0, %86 ], [ %123, %87 ]
  br i1 %69, label %145, label %128

128:                                              ; preds = %126
  %129 = getelementptr inbounds [64 x i8], [64 x i8]* %12, i64 0, i64 %127
  %130 = bitcast i8* %129 to <16 x i8>*
  %131 = load <16 x i8>, <16 x i8>* %130, align 16, !alias.scope !2
  %132 = getelementptr inbounds i8, i8* %129, i64 16
  %133 = bitcast i8* %132 to <16 x i8>*
  %134 = load <16 x i8>, <16 x i8>* %133, align 16, !alias.scope !2
  %135 = getelementptr inbounds i8, i8* %29, i64 %127
  %136 = bitcast i8* %135 to <16 x i8>*
  %137 = load <16 x i8>, <16 x i8>* %136, align 1, !alias.scope !5, !noalias !2
  %138 = getelementptr inbounds i8, i8* %135, i64 16
  %139 = bitcast i8* %138 to <16 x i8>*
  %140 = load <16 x i8>, <16 x i8>* %139, align 1, !alias.scope !5, !noalias !2
  %141 = xor <16 x i8> %137, %131
  %142 = xor <16 x i8> %140, %134
  %143 = bitcast i8* %135 to <16 x i8>*
  store <16 x i8> %141, <16 x i8>* %143, align 1, !alias.scope !5, !noalias !2
  %144 = bitcast i8* %138 to <16 x i8>*
  store <16 x i8> %142, <16 x i8>* %144, align 1, !alias.scope !5, !noalias !2
  br label %145

145:                                              ; preds = %126, %128
  br i1 %70, label %146, label %84

146:                                              ; preds = %149, %145, %81
  %147 = add nuw i32 %72, 1
  %148 = icmp eq i32 %147, %4
  br i1 %148, label %159, label %71

149:                                              ; preds = %84, %149
  %150 = phi i64 [ %156, %149 ], [ %85, %84 ]
  %151 = getelementptr inbounds [64 x i8], [64 x i8]* %12, i64 0, i64 %150
  %152 = load i8, i8* %151, align 1
  %153 = getelementptr inbounds i8, i8* %29, i64 %150
  %154 = load i8, i8* %153, align 1
  %155 = xor i8 %154, %152
  store i8 %155, i8* %153, align 1
  %156 = add nuw i64 %150, 1
  %157 = icmp ult i64 %156, %32
  br i1 %157, label %149, label %146, !llvm.loop !9

158:                                              ; preds = %48, %45, %42, %27, %78, %75, %71
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %25) #3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %21) #3
  br label %167

159:                                              ; preds = %146, %54
  %160 = sub i64 %30, %32
  %161 = getelementptr inbounds i8, i8* %29, i64 %32
  %162 = add i32 %28, 1
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %25) #3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %21) #3
  %163 = icmp eq i64 %160, 0
  br i1 %163, label %164, label %27

164:                                              ; preds = %159, %18
  %165 = icmp ne i32 %4, 0
  %166 = zext i1 %165 to i32
  br label %167

167:                                              ; preds = %8, %164, %158
  %168 = phi i32 [ 0, %8 ], [ %166, %164 ], [ 0, %158 ]
  call void @HMAC_CTX_cleanup(%struct.hmac_ctx_st* nonnull %9) #3
  call void @llvm.lifetime.end.p0i8(i64 104, i8* nonnull %15) #3
  ret i32 %168
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare i64 @EVP_MD_size(%struct.env_md_st*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @HMAC_CTX_init(%struct.hmac_ctx_st*) local_unnamed_addr #2

declare i32 @HMAC_Init_ex(%struct.hmac_ctx_st*, i8*, i64, %struct.env_md_st*, %struct.engine_st*) local_unnamed_addr #2

declare i32 @HMAC_Update(%struct.hmac_ctx_st*, i8*, i64) local_unnamed_addr #2

declare i32 @HMAC_Final(%struct.hmac_ctx_st*, i8*, i32*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @HMAC_CTX_cleanup(%struct.hmac_ctx_st*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @PKCS5_PBKDF2_HMAC_SHA1(i8*, i64, i8*, i64, i32, i64, i8* nocapture) local_unnamed_addr #0 {
  %8 = tail call %struct.env_md_st* @EVP_sha1() #3
  %9 = tail call i32 @PKCS5_PBKDF2_HMAC(i8* %0, i64 %1, i8* %2, i64 %3, i32 %4, %struct.env_md_st* %8, i64 %5, i8* %6)
  ret i32 %9
}

declare %struct.env_md_st* @EVP_sha1() local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !8}
