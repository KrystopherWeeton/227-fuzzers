; ModuleID = '../../v8/src/diagnostics/unwinder.cc'
source_filename = "../../v8/src/diagnostics/unwinder.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.v8::JSEntryStubs" = type { %"struct.v8::JSEntryStub", %"struct.v8::JSEntryStub", %"struct.v8::JSEntryStub" }
%"struct.v8::JSEntryStub" = type { %"struct.v8::MemoryRange" }
%"struct.v8::MemoryRange" = type { i8*, i64 }
%"struct.v8::RegisterState" = type { i8*, i8*, i8*, i8*, %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.v8::CalleeSavedRegisters"* }
%"struct.v8::CalleeSavedRegisters" = type opaque

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZN2v84LoadEm(i64) local_unnamed_addr #0 {
  %2 = inttoptr i64 %0 to i64*
  %3 = load i64, i64* %2, align 8
  ret i64 %3
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2v88Unwinder17TryUnwindV8FramesERKNS_12JSEntryStubsEmPKNS_11MemoryRangeEPNS_13RegisterStateEPKv(%"struct.v8::JSEntryStubs"* nocapture readonly dereferenceable(48), i64, %"struct.v8::MemoryRange"* readonly, %"struct.v8::RegisterState"*, i8* readnone) local_unnamed_addr #1 align 2 {
  %6 = getelementptr inbounds %"struct.v8::RegisterState", %"struct.v8::RegisterState"* %3, i64 0, i32 1
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %"struct.v8::RegisterState", %"struct.v8::RegisterState"* %3, i64 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = icmp eq i8* %9, null
  %11 = icmp eq i64 %1, 0
  %12 = or i1 %11, %10
  br i1 %12, label %162, label %13

13:                                               ; preds = %5
  %14 = shl nuw i64 %1, 4
  %15 = ashr exact i64 %14, 4
  br label %16

16:                                               ; preds = %16, %13
  %17 = phi %"struct.v8::MemoryRange"* [ %28, %16 ], [ %2, %13 ]
  %18 = phi i64 [ %27, %16 ], [ %15, %13 ]
  %19 = lshr i64 %18, 1
  %20 = getelementptr inbounds %"struct.v8::MemoryRange", %"struct.v8::MemoryRange"* %17, i64 %19
  %21 = getelementptr %"struct.v8::MemoryRange", %"struct.v8::MemoryRange"* %20, i64 0, i32 0
  %22 = load i8*, i8** %21, align 8
  %23 = icmp ugt i8* %22, %9
  %24 = getelementptr inbounds %"struct.v8::MemoryRange", %"struct.v8::MemoryRange"* %20, i64 1
  %25 = xor i64 %19, -1
  %26 = add i64 %18, %25
  %27 = select i1 %23, i64 %19, i64 %26
  %28 = select i1 %23, %"struct.v8::MemoryRange"* %17, %"struct.v8::MemoryRange"* %24
  %29 = icmp eq i64 %27, 0
  br i1 %29, label %30, label %16

30:                                               ; preds = %16
  %31 = icmp eq %"struct.v8::MemoryRange"* %28, %2
  br i1 %31, label %162, label %32

32:                                               ; preds = %30
  %33 = getelementptr inbounds %"struct.v8::MemoryRange", %"struct.v8::MemoryRange"* %28, i64 -1, i32 0
  %34 = load i8*, i8** %33, align 8
  %35 = icmp ugt i8* %34, %9
  br i1 %35, label %162, label %36

36:                                               ; preds = %32
  %37 = getelementptr inbounds %"struct.v8::MemoryRange", %"struct.v8::MemoryRange"* %28, i64 -1, i32 1
  %38 = load i64, i64* %37, align 8
  %39 = getelementptr inbounds i8, i8* %34, i64 %38
  %40 = icmp ugt i8* %39, %9
  br i1 %40, label %41, label %162

41:                                               ; preds = %36
  %42 = getelementptr %"struct.v8::JSEntryStubs", %"struct.v8::JSEntryStubs"* %0, i64 0, i32 0, i32 0, i32 0
  %43 = load i8*, i8** %42, align 8
  %44 = getelementptr %"struct.v8::JSEntryStubs", %"struct.v8::JSEntryStubs"* %0, i64 0, i32 0, i32 0, i32 1
  %45 = load i64, i64* %44, align 8
  %46 = icmp ule i8* %43, %9
  %47 = getelementptr inbounds i8, i8* %43, i64 %45
  %48 = icmp ugt i8* %47, %9
  %49 = and i1 %46, %48
  br i1 %49, label %162, label %50

50:                                               ; preds = %41
  %51 = getelementptr %"struct.v8::JSEntryStubs", %"struct.v8::JSEntryStubs"* %0, i64 0, i32 1, i32 0, i32 0
  %52 = load i8*, i8** %51, align 8
  %53 = getelementptr %"struct.v8::JSEntryStubs", %"struct.v8::JSEntryStubs"* %0, i64 0, i32 1, i32 0, i32 1
  %54 = load i64, i64* %53, align 8
  %55 = icmp ule i8* %52, %9
  %56 = getelementptr inbounds i8, i8* %52, i64 %54
  %57 = icmp ugt i8* %56, %9
  %58 = and i1 %55, %57
  br i1 %58, label %162, label %59

59:                                               ; preds = %50
  %60 = getelementptr %"struct.v8::JSEntryStubs", %"struct.v8::JSEntryStubs"* %0, i64 0, i32 2, i32 0, i32 0
  %61 = load i8*, i8** %60, align 8
  %62 = getelementptr %"struct.v8::JSEntryStubs", %"struct.v8::JSEntryStubs"* %0, i64 0, i32 2, i32 0, i32 1
  %63 = load i64, i64* %62, align 8
  %64 = icmp ule i8* %61, %9
  %65 = getelementptr inbounds i8, i8* %61, i64 %63
  %66 = icmp ugt i8* %65, %9
  %67 = and i1 %64, %66
  br i1 %67, label %162, label %68

68:                                               ; preds = %59
  %69 = getelementptr inbounds %"struct.v8::RegisterState", %"struct.v8::RegisterState"* %3, i64 0, i32 2
  %70 = load i8*, i8** %69, align 8
  %71 = icmp ule i8* %70, %4
  %72 = icmp uge i8* %70, %7
  %73 = and i1 %71, %72
  br i1 %73, label %74, label %162

74:                                               ; preds = %68
  %75 = ptrtoint i8* %70 to i64
  %76 = add i64 %75, 8
  %77 = inttoptr i64 %76 to i8**
  %78 = load i8*, i8** %77, align 8
  %79 = icmp eq i8* %78, null
  br i1 %79, label %126, label %86

80:                                               ; preds = %115
  %81 = ptrtoint i8* %117 to i64
  %82 = add i64 %81, 8
  %83 = inttoptr i64 %82 to i8**
  %84 = load i8*, i8** %83, align 8
  %85 = icmp eq i8* %84, null
  br i1 %85, label %121, label %86

86:                                               ; preds = %74, %80
  %87 = phi i8* [ %84, %80 ], [ %78, %74 ]
  %88 = phi i8* [ %87, %80 ], [ %9, %74 ]
  %89 = phi i8* [ %117, %80 ], [ %70, %74 ]
  br label %90

90:                                               ; preds = %90, %86
  %91 = phi %"struct.v8::MemoryRange"* [ %102, %90 ], [ %2, %86 ]
  %92 = phi i64 [ %101, %90 ], [ %15, %86 ]
  %93 = lshr i64 %92, 1
  %94 = getelementptr inbounds %"struct.v8::MemoryRange", %"struct.v8::MemoryRange"* %91, i64 %93
  %95 = getelementptr %"struct.v8::MemoryRange", %"struct.v8::MemoryRange"* %94, i64 0, i32 0
  %96 = load i8*, i8** %95, align 8
  %97 = icmp ugt i8* %96, %87
  %98 = getelementptr inbounds %"struct.v8::MemoryRange", %"struct.v8::MemoryRange"* %94, i64 1
  %99 = xor i64 %93, -1
  %100 = add i64 %92, %99
  %101 = select i1 %97, i64 %93, i64 %100
  %102 = select i1 %97, %"struct.v8::MemoryRange"* %91, %"struct.v8::MemoryRange"* %98
  %103 = icmp eq i64 %101, 0
  br i1 %103, label %104, label %90

104:                                              ; preds = %90
  %105 = icmp eq %"struct.v8::MemoryRange"* %102, %2
  br i1 %105, label %121, label %106

106:                                              ; preds = %104
  %107 = getelementptr inbounds %"struct.v8::MemoryRange", %"struct.v8::MemoryRange"* %102, i64 -1, i32 0
  %108 = load i8*, i8** %107, align 8
  %109 = icmp ugt i8* %108, %87
  br i1 %109, label %121, label %110

110:                                              ; preds = %106
  %111 = getelementptr inbounds %"struct.v8::MemoryRange", %"struct.v8::MemoryRange"* %102, i64 -1, i32 1
  %112 = load i64, i64* %111, align 8
  %113 = getelementptr inbounds i8, i8* %108, i64 %112
  %114 = icmp ugt i8* %113, %87
  br i1 %114, label %115, label %121

115:                                              ; preds = %110
  %116 = bitcast i8* %89 to i8**
  %117 = load i8*, i8** %116, align 8
  %118 = icmp ule i8* %117, %4
  %119 = icmp uge i8* %117, %7
  %120 = and i1 %118, %119
  br i1 %120, label %80, label %162

121:                                              ; preds = %106, %104, %80, %110
  %122 = phi i8* [ %89, %110 ], [ %117, %80 ], [ %89, %104 ], [ %89, %106 ]
  %123 = phi i8* [ %88, %110 ], [ %87, %80 ], [ %88, %104 ], [ %88, %106 ]
  %124 = phi i8* [ %87, %110 ], [ null, %80 ], [ %87, %104 ], [ %87, %106 ]
  %125 = ptrtoint i8* %122 to i64
  br label %126

126:                                              ; preds = %121, %74
  %127 = phi i64 [ %125, %121 ], [ %75, %74 ]
  %128 = phi i8* [ %122, %121 ], [ %70, %74 ]
  %129 = phi i8* [ %123, %121 ], [ %9, %74 ]
  %130 = phi i8* [ %124, %121 ], [ null, %74 ]
  %131 = add i64 %127, 16
  %132 = inttoptr i64 %131 to i8*
  %133 = icmp ule i8* %132, %4
  %134 = icmp ule i8* %7, %132
  %135 = and i1 %133, %134
  br i1 %135, label %136, label %162

136:                                              ; preds = %126
  store i8* %132, i8** %6, align 8
  %137 = bitcast i8* %128 to i64*
  %138 = load i64, i64* %137, align 8
  %139 = bitcast i8** %69 to i64*
  store i64 %138, i64* %139, align 8
  store i8* %130, i8** %8, align 8
  %140 = getelementptr inbounds %"struct.v8::RegisterState", %"struct.v8::RegisterState"* %3, i64 0, i32 3
  store i8* null, i8** %140, align 8
  %141 = load i8*, i8** %42, align 8
  %142 = load i64, i64* %44, align 8
  %143 = icmp ule i8* %141, %129
  %144 = getelementptr inbounds i8, i8* %141, i64 %142
  %145 = icmp ugt i8* %144, %129
  %146 = and i1 %143, %145
  br i1 %146, label %161, label %147

147:                                              ; preds = %136
  %148 = load i8*, i8** %51, align 8
  %149 = load i64, i64* %53, align 8
  %150 = icmp ule i8* %148, %129
  %151 = getelementptr inbounds i8, i8* %148, i64 %149
  %152 = icmp ugt i8* %151, %129
  %153 = and i1 %150, %152
  br i1 %153, label %161, label %154

154:                                              ; preds = %147
  %155 = load i8*, i8** %60, align 8
  %156 = load i64, i64* %62, align 8
  %157 = icmp ule i8* %155, %129
  %158 = getelementptr inbounds i8, i8* %155, i64 %156
  %159 = icmp ugt i8* %158, %129
  %160 = and i1 %157, %159
  br i1 %160, label %161, label %162

161:                                              ; preds = %136, %147, %154
  tail call void @_ZN2v837GetCalleeSavedRegistersFromEntryFrameEPvPNS_13RegisterStateE(i8* %128, %"struct.v8::RegisterState"* %3) #3
  br label %162

162:                                              ; preds = %115, %41, %50, %32, %30, %5, %36, %59, %68, %126, %161, %154
  %163 = phi i1 [ false, %68 ], [ false, %126 ], [ true, %161 ], [ true, %154 ], [ false, %59 ], [ false, %36 ], [ false, %5 ], [ false, %30 ], [ false, %32 ], [ false, %50 ], [ false, %41 ], [ false, %115 ]
  ret i1 %163
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZN2v88Unwinder8PCIsInV8EmPKNS_11MemoryRangeEPv(i64, %"struct.v8::MemoryRange"* readonly, i8* readnone) local_unnamed_addr #0 align 2 {
  %4 = icmp eq i8* %2, null
  %5 = icmp eq i64 %0, 0
  %6 = or i1 %5, %4
  br i1 %6, label %35, label %7

7:                                                ; preds = %3
  %8 = shl nuw i64 %0, 4
  %9 = ashr exact i64 %8, 4
  br label %10

10:                                               ; preds = %10, %7
  %11 = phi %"struct.v8::MemoryRange"* [ %22, %10 ], [ %1, %7 ]
  %12 = phi i64 [ %21, %10 ], [ %9, %7 ]
  %13 = lshr i64 %12, 1
  %14 = getelementptr inbounds %"struct.v8::MemoryRange", %"struct.v8::MemoryRange"* %11, i64 %13
  %15 = getelementptr %"struct.v8::MemoryRange", %"struct.v8::MemoryRange"* %14, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  %17 = icmp ugt i8* %16, %2
  %18 = getelementptr inbounds %"struct.v8::MemoryRange", %"struct.v8::MemoryRange"* %14, i64 1
  %19 = xor i64 %13, -1
  %20 = add i64 %12, %19
  %21 = select i1 %17, i64 %13, i64 %20
  %22 = select i1 %17, %"struct.v8::MemoryRange"* %11, %"struct.v8::MemoryRange"* %18
  %23 = icmp eq i64 %21, 0
  br i1 %23, label %24, label %10

24:                                               ; preds = %10
  %25 = icmp eq %"struct.v8::MemoryRange"* %22, %1
  br i1 %25, label %35, label %26

26:                                               ; preds = %24
  %27 = getelementptr inbounds %"struct.v8::MemoryRange", %"struct.v8::MemoryRange"* %22, i64 -1, i32 0
  %28 = load i8*, i8** %27, align 8
  %29 = icmp ugt i8* %28, %2
  br i1 %29, label %35, label %30

30:                                               ; preds = %26
  %31 = getelementptr inbounds %"struct.v8::MemoryRange", %"struct.v8::MemoryRange"* %22, i64 -1, i32 1
  %32 = load i64, i64* %31, align 8
  %33 = getelementptr inbounds i8, i8* %28, i64 %32
  %34 = icmp ugt i8* %33, %2
  br label %35

35:                                               ; preds = %30, %26, %24, %3
  %36 = phi i1 [ false, %3 ], [ false, %24 ], [ false, %26 ], [ %34, %30 ]
  ret i1 %36
}

declare void @_ZN2v837GetCalleeSavedRegistersFromEntryFrameEPvPNS_13RegisterStateE(i8*, %"struct.v8::RegisterState"*) local_unnamed_addr #2

attributes #0 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
