; ModuleID = '../../third_party/boringssl/src/crypto/evp/sign.c'
source_filename = "../../third_party/boringssl/src/crypto/evp/sign.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.env_md_ctx_st = type { %struct.env_md_st*, i8*, %struct.evp_pkey_ctx_st*, %struct.evp_md_pctx_ops* }
%struct.evp_pkey_ctx_st = type { %struct.evp_pkey_method_st*, %struct.engine_st*, %struct.evp_pkey_st*, %struct.evp_pkey_st*, i32, i8* }
%struct.evp_pkey_method_st = type { i32, i32 (%struct.evp_pkey_ctx_st*)*, i32 (%struct.evp_pkey_ctx_st*, %struct.evp_pkey_ctx_st*)*, void (%struct.evp_pkey_ctx_st*)*, i32 (%struct.evp_pkey_ctx_st*, %struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_ctx_st*, i8*, i64*, i8*, i64)*, i32 (%struct.evp_pkey_ctx_st*, i8*, i64*, i8*, i64)*, i32 (%struct.evp_pkey_ctx_st*, i8*, i64, i8*, i64)*, i32 (%struct.evp_pkey_ctx_st*, i8*, i64, i8*, i64)*, i32 (%struct.evp_pkey_ctx_st*, i8*, i64*, i8*, i64)*, i32 (%struct.evp_pkey_ctx_st*, i8*, i64*, i8*, i64)*, i32 (%struct.evp_pkey_ctx_st*, i8*, i64*, i8*, i64)*, i32 (%struct.evp_pkey_ctx_st*, i8*, i64*)*, i32 (%struct.evp_pkey_ctx_st*, %struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_ctx_st*, i32, i32, i8*)* }
%struct.evp_pkey_st = type { i32, i32, %union.anon, %struct.evp_pkey_asn1_method_st* }
%union.anon = type { i8* }
%struct.evp_pkey_asn1_method_st = type { i32, [9 x i8], i8, i32 (%struct.evp_pkey_st*, %struct.cbs_st*, %struct.cbs_st*)*, i32 (%struct.cbb_st*, %struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*, %struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*, %struct.cbs_st*, %struct.cbs_st*)*, i32 (%struct.cbb_st*, %struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*, i8*, i64)*, i32 (%struct.evp_pkey_st*, i8*, i64)*, i32 (%struct.evp_pkey_st*, i8*, i64*)*, i32 (%struct.evp_pkey_st*, i8*, i64*)*, i32 (%struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*, %struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*, %struct.evp_pkey_st*)*, void (%struct.evp_pkey_st*)* }
%struct.cbs_st = type opaque
%struct.cbb_st = type opaque
%struct.evp_md_pctx_ops = type opaque
%struct.env_md_st = type opaque
%struct.engine_st = type opaque

; Function Attrs: nounwind ssp uwtable
define hidden i32 @EVP_SignInit_ex(%struct.env_md_ctx_st*, %struct.env_md_st*, %struct.engine_st*) local_unnamed_addr #0 {
  %4 = tail call i32 @EVP_DigestInit_ex(%struct.env_md_ctx_st* %0, %struct.env_md_st* %1, %struct.engine_st* %2) #3
  ret i32 %4
}

declare i32 @EVP_DigestInit_ex(%struct.env_md_ctx_st*, %struct.env_md_st*, %struct.engine_st*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @EVP_SignInit(%struct.env_md_ctx_st*, %struct.env_md_st*) local_unnamed_addr #0 {
  %3 = tail call i32 @EVP_DigestInit(%struct.env_md_ctx_st* %0, %struct.env_md_st* %1) #3
  ret i32 %3
}

declare i32 @EVP_DigestInit(%struct.env_md_ctx_st*, %struct.env_md_st*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @EVP_SignUpdate(%struct.env_md_ctx_st*, i8*, i64) local_unnamed_addr #0 {
  %4 = tail call i32 @EVP_DigestUpdate(%struct.env_md_ctx_st* %0, i8* %1, i64 %2) #3
  ret i32 %4
}

declare i32 @EVP_DigestUpdate(%struct.env_md_ctx_st*, i8*, i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @EVP_SignFinal(%struct.env_md_ctx_st*, i8*, i32* nocapture, %struct.evp_pkey_st*) local_unnamed_addr #0 {
  %5 = alloca [64 x i8], align 16
  %6 = alloca i32, align 4
  %7 = alloca %struct.env_md_ctx_st, align 8
  %8 = alloca i64, align 8
  %9 = getelementptr inbounds [64 x i8], [64 x i8]* %5, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %9) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %9, i8 -86, i64 64, i1 false)
  %10 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #3
  store i32 -1431655766, i32* %6, align 4
  %11 = bitcast %struct.env_md_ctx_st* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %11) #3
  %12 = bitcast i64* %8 to i8*
  %13 = bitcast %struct.env_md_ctx_st* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %13, i8 -86, i64 32, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12) #3
  %14 = tail call i32 @EVP_PKEY_size(%struct.evp_pkey_st* %3) #3
  %15 = sext i32 %14 to i64
  store i64 %15, i64* %8, align 8
  store i32 0, i32* %2, align 4
  call void @EVP_MD_CTX_init(%struct.env_md_ctx_st* nonnull %7) #3
  %16 = call i32 @EVP_MD_CTX_copy_ex(%struct.env_md_ctx_st* nonnull %7, %struct.env_md_ctx_st* %0) #3
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %43, label %18

18:                                               ; preds = %4
  %19 = call i32 @EVP_DigestFinal_ex(%struct.env_md_ctx_st* nonnull %7, i8* nonnull %9, i32* nonnull %6) #3
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %43, label %21

21:                                               ; preds = %18
  %22 = call i32 @EVP_MD_CTX_cleanup(%struct.env_md_ctx_st* nonnull %7) #3
  %23 = call %struct.evp_pkey_ctx_st* @EVP_PKEY_CTX_new(%struct.evp_pkey_st* %3, %struct.engine_st* null) #3
  %24 = icmp eq %struct.evp_pkey_ctx_st* %23, null
  br i1 %24, label %43, label %25

25:                                               ; preds = %21
  %26 = call i32 @EVP_PKEY_sign_init(%struct.evp_pkey_ctx_st* nonnull %23) #3
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %41, label %28

28:                                               ; preds = %25
  %29 = getelementptr inbounds %struct.env_md_ctx_st, %struct.env_md_ctx_st* %0, i64 0, i32 0
  %30 = load %struct.env_md_st*, %struct.env_md_st** %29, align 8
  %31 = call i32 @EVP_PKEY_CTX_set_signature_md(%struct.evp_pkey_ctx_st* nonnull %23, %struct.env_md_st* %30) #3
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %41, label %33

33:                                               ; preds = %28
  %34 = load i32, i32* %6, align 4
  %35 = zext i32 %34 to i64
  %36 = call i32 @EVP_PKEY_sign(%struct.evp_pkey_ctx_st* nonnull %23, i8* %1, i64* nonnull %8, i8* nonnull %9, i64 %35) #3
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %41, label %38

38:                                               ; preds = %33
  %39 = load i64, i64* %8, align 8
  %40 = trunc i64 %39 to i32
  store i32 %40, i32* %2, align 4
  br label %41

41:                                               ; preds = %38, %33, %28, %25
  %42 = phi i32 [ 0, %25 ], [ 0, %28 ], [ 0, %33 ], [ 1, %38 ]
  call void @EVP_PKEY_CTX_free(%struct.evp_pkey_ctx_st* nonnull %23) #3
  br label %43

43:                                               ; preds = %4, %18, %21, %41
  %44 = phi i32 [ %42, %41 ], [ 0, %21 ], [ 0, %18 ], [ 0, %4 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12) #3
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %11) #3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #3
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %9) #3
  ret i32 %44
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare i32 @EVP_PKEY_size(%struct.evp_pkey_st*) local_unnamed_addr #1

declare void @EVP_MD_CTX_init(%struct.env_md_ctx_st*) local_unnamed_addr #1

declare i32 @EVP_MD_CTX_copy_ex(%struct.env_md_ctx_st*, %struct.env_md_ctx_st*) local_unnamed_addr #1

declare i32 @EVP_DigestFinal_ex(%struct.env_md_ctx_st*, i8*, i32*) local_unnamed_addr #1

declare i32 @EVP_MD_CTX_cleanup(%struct.env_md_ctx_st*) local_unnamed_addr #1

declare %struct.evp_pkey_ctx_st* @EVP_PKEY_CTX_new(%struct.evp_pkey_st*, %struct.engine_st*) local_unnamed_addr #1

declare i32 @EVP_PKEY_sign_init(%struct.evp_pkey_ctx_st*) local_unnamed_addr #1

declare i32 @EVP_PKEY_CTX_set_signature_md(%struct.evp_pkey_ctx_st*, %struct.env_md_st*) local_unnamed_addr #1

declare i32 @EVP_PKEY_sign(%struct.evp_pkey_ctx_st*, i8*, i64*, i8*, i64) local_unnamed_addr #1

declare void @EVP_PKEY_CTX_free(%struct.evp_pkey_ctx_st*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @EVP_VerifyInit_ex(%struct.env_md_ctx_st*, %struct.env_md_st*, %struct.engine_st*) local_unnamed_addr #0 {
  %4 = tail call i32 @EVP_DigestInit_ex(%struct.env_md_ctx_st* %0, %struct.env_md_st* %1, %struct.engine_st* %2) #3
  ret i32 %4
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @EVP_VerifyInit(%struct.env_md_ctx_st*, %struct.env_md_st*) local_unnamed_addr #0 {
  %3 = tail call i32 @EVP_DigestInit(%struct.env_md_ctx_st* %0, %struct.env_md_st* %1) #3
  ret i32 %3
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @EVP_VerifyUpdate(%struct.env_md_ctx_st*, i8*, i64) local_unnamed_addr #0 {
  %4 = tail call i32 @EVP_DigestUpdate(%struct.env_md_ctx_st* %0, i8* %1, i64 %2) #3
  ret i32 %4
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @EVP_VerifyFinal(%struct.env_md_ctx_st*, i8*, i64, %struct.evp_pkey_st*) local_unnamed_addr #0 {
  %5 = alloca [64 x i8], align 16
  %6 = alloca i32, align 4
  %7 = alloca %struct.env_md_ctx_st, align 8
  %8 = getelementptr inbounds [64 x i8], [64 x i8]* %5, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %8) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %8, i8 -86, i64 64, i1 false)
  %9 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #3
  store i32 -1431655766, i32* %6, align 4
  %10 = bitcast %struct.env_md_ctx_st* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %10) #3
  %11 = bitcast %struct.env_md_ctx_st* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 32, i1 false)
  call void @EVP_MD_CTX_init(%struct.env_md_ctx_st* nonnull %7) #3
  %12 = call i32 @EVP_MD_CTX_copy_ex(%struct.env_md_ctx_st* nonnull %7, %struct.env_md_ctx_st* %0) #3
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %17, label %14

14:                                               ; preds = %4
  %15 = call i32 @EVP_DigestFinal_ex(%struct.env_md_ctx_st* nonnull %7, i8* nonnull %8, i32* nonnull %6) #3
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %19

17:                                               ; preds = %14, %4
  %18 = call i32 @EVP_MD_CTX_cleanup(%struct.env_md_ctx_st* nonnull %7) #3
  br label %35

19:                                               ; preds = %14
  %20 = call i32 @EVP_MD_CTX_cleanup(%struct.env_md_ctx_st* nonnull %7) #3
  %21 = call %struct.evp_pkey_ctx_st* @EVP_PKEY_CTX_new(%struct.evp_pkey_st* %3, %struct.engine_st* null) #3
  %22 = icmp eq %struct.evp_pkey_ctx_st* %21, null
  br i1 %22, label %35, label %23

23:                                               ; preds = %19
  %24 = call i32 @EVP_PKEY_verify_init(%struct.evp_pkey_ctx_st* nonnull %21) #3
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %35, label %26

26:                                               ; preds = %23
  %27 = getelementptr inbounds %struct.env_md_ctx_st, %struct.env_md_ctx_st* %0, i64 0, i32 0
  %28 = load %struct.env_md_st*, %struct.env_md_st** %27, align 8
  %29 = call i32 @EVP_PKEY_CTX_set_signature_md(%struct.evp_pkey_ctx_st* nonnull %21, %struct.env_md_st* %28) #3
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %35, label %31

31:                                               ; preds = %26
  %32 = load i32, i32* %6, align 4
  %33 = zext i32 %32 to i64
  %34 = call i32 @EVP_PKEY_verify(%struct.evp_pkey_ctx_st* nonnull %21, i8* %1, i64 %2, i8* nonnull %8, i64 %33) #3
  br label %35

35:                                               ; preds = %26, %23, %19, %31, %17
  %36 = phi i32 [ %34, %31 ], [ 0, %26 ], [ 0, %23 ], [ 0, %19 ], [ 0, %17 ]
  %37 = phi %struct.evp_pkey_ctx_st* [ %21, %31 ], [ %21, %26 ], [ %21, %23 ], [ null, %19 ], [ null, %17 ]
  call void @EVP_PKEY_CTX_free(%struct.evp_pkey_ctx_st* %37) #3
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %10) #3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #3
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %8) #3
  ret i32 %36
}

declare i32 @EVP_PKEY_verify_init(%struct.evp_pkey_ctx_st*) local_unnamed_addr #1

declare i32 @EVP_PKEY_verify(%struct.evp_pkey_ctx_st*, i8*, i64, i8*, i64) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
