; ModuleID = '../../third_party/icu/source/i18n/csrutf8.cpp'
source_filename = "../../third_party/icu/source/i18n/csrutf8.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.icu_69::CharsetRecog_UTF8" = type { %"class.icu_69::CharsetRecognizer" }
%"class.icu_69::CharsetRecognizer" = type { i32 (...)** }
%"class.icu_69::InputText" = type <{ i8*, i32, [4 x i8], i16*, i8, [7 x i8], i8*, i8*, i32, [4 x i8] }>
%"class.icu_69::CharsetMatch" = type { %"class.icu_69::InputText"*, i32, i8*, i8* }

@.str = private unnamed_addr constant [6 x i8] c"UTF-8\00", align 1
@_ZTVN6icu_6917CharsetRecog_UTF8E = hidden unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* bitcast ({ i8*, i8*, i8* }* @_ZTIN6icu_6917CharsetRecog_UTF8E to i8*), i8* bitcast (i8* (%"class.icu_69::CharsetRecog_UTF8"*)* @_ZNK6icu_6917CharsetRecog_UTF87getNameEv to i8*), i8* bitcast (i8* (%"class.icu_69::CharsetRecognizer"*)* @_ZNK6icu_6917CharsetRecognizer11getLanguageEv to i8*), i8* bitcast (i8 (%"class.icu_69::CharsetRecog_UTF8"*, %"class.icu_69::InputText"*, %"class.icu_69::CharsetMatch"*)* @_ZNK6icu_6917CharsetRecog_UTF85matchEPNS_9InputTextEPNS_12CharsetMatchE to i8*), i8* bitcast (void (%"class.icu_69::CharsetRecog_UTF8"*)* @_ZN6icu_6917CharsetRecog_UTF8D2Ev to i8*), i8* bitcast (void (%"class.icu_69::CharsetRecog_UTF8"*)* @_ZN6icu_6917CharsetRecog_UTF8D0Ev to i8*)] }, align 8
@_ZTVN10__cxxabiv120__si_class_type_infoE = external global i8*
@_ZTSN6icu_6917CharsetRecog_UTF8E = hidden constant [29 x i8] c"N6icu_6917CharsetRecog_UTF8E\00", align 1
@_ZTIN6icu_6917CharsetRecognizerE = external constant i8*
@_ZTIN6icu_6917CharsetRecog_UTF8E = hidden constant { i8*, i8*, i8* } { i8* bitcast (i8** getelementptr inbounds (i8*, i8** @_ZTVN10__cxxabiv120__si_class_type_infoE, i64 2) to i8*), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @_ZTSN6icu_6917CharsetRecog_UTF8E, i32 0, i32 0), i8* bitcast (i8** @_ZTIN6icu_6917CharsetRecognizerE to i8*) }, align 8

@_ZN6icu_6917CharsetRecog_UTF8D1Ev = hidden unnamed_addr alias void (%"class.icu_69::CharsetRecog_UTF8"*), void (%"class.icu_69::CharsetRecog_UTF8"*)* @_ZN6icu_6917CharsetRecog_UTF8D2Ev

; Function Attrs: nounwind
declare void @_ZN6icu_6917CharsetRecognizerD2Ev(%"class.icu_69::CharsetRecognizer"*) unnamed_addr #0

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6icu_6917CharsetRecog_UTF8D2Ev(%"class.icu_69::CharsetRecog_UTF8"*) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.icu_69::CharsetRecog_UTF8", %"class.icu_69::CharsetRecog_UTF8"* %0, i64 0, i32 0
  tail call void @_ZN6icu_6917CharsetRecognizerD2Ev(%"class.icu_69::CharsetRecognizer"* %2) #4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6icu_6917CharsetRecog_UTF8D0Ev(%"class.icu_69::CharsetRecog_UTF8"*) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.icu_69::CharsetRecog_UTF8", %"class.icu_69::CharsetRecog_UTF8"* %0, i64 0, i32 0
  tail call void @_ZN6icu_6917CharsetRecognizerD2Ev(%"class.icu_69::CharsetRecognizer"* %2) #4
  %3 = bitcast %"class.icu_69::CharsetRecog_UTF8"* %0 to i8*
  tail call void @_ZN6icu_697UMemorydlEPv(i8* %3) #4
  ret void
}

; Function Attrs: nounwind
declare void @_ZN6icu_697UMemorydlEPv(i8*) local_unnamed_addr #0

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i8* @_ZNK6icu_6917CharsetRecog_UTF87getNameEv(%"class.icu_69::CharsetRecog_UTF8"* nocapture readnone) unnamed_addr #2 align 2 {
  ret i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0)
}

; Function Attrs: nounwind ssp uwtable
define hidden signext i8 @_ZNK6icu_6917CharsetRecog_UTF85matchEPNS_9InputTextEPNS_12CharsetMatchE(%"class.icu_69::CharsetRecog_UTF8"*, %"class.icu_69::InputText"*, %"class.icu_69::CharsetMatch"*) unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.icu_69::InputText", %"class.icu_69::InputText"* %1, i64 0, i32 7
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.icu_69::InputText", %"class.icu_69::InputText"* %1, i64 0, i32 8
  %7 = load i32, i32* %6, align 8
  %8 = icmp sgt i32 %7, 2
  br i1 %8, label %9, label %20

9:                                                ; preds = %3
  %10 = load i8, i8* %5, align 1
  %11 = icmp eq i8 %10, -17
  br i1 %11, label %12, label %22

12:                                               ; preds = %9
  %13 = getelementptr inbounds i8, i8* %5, i64 1
  %14 = load i8, i8* %13, align 1
  %15 = icmp eq i8 %14, -69
  br i1 %15, label %16, label %22

16:                                               ; preds = %12
  %17 = getelementptr inbounds i8, i8* %5, i64 2
  %18 = load i8, i8* %17, align 1
  %19 = icmp eq i8 %18, -65
  br label %22

20:                                               ; preds = %3
  %21 = icmp sgt i32 %7, 0
  br i1 %21, label %22, label %90

22:                                               ; preds = %9, %12, %16, %20
  %23 = phi i1 [ false, %20 ], [ %19, %16 ], [ false, %9 ], [ false, %12 ]
  %24 = sext i32 %7 to i64
  br label %25

25:                                               ; preds = %22, %67
  %26 = phi i32 [ %71, %67 ], [ 0, %22 ]
  %27 = phi i32 [ %69, %67 ], [ 0, %22 ]
  %28 = phi i32 [ %68, %67 ], [ 0, %22 ]
  %29 = sext i32 %26 to i64
  %30 = getelementptr inbounds i8, i8* %5, i64 %29
  %31 = load i8, i8* %30, align 1
  %32 = zext i8 %31 to i32
  %33 = icmp sgt i8 %31, -1
  br i1 %33, label %67, label %34

34:                                               ; preds = %25
  %35 = and i32 %32, 224
  %36 = icmp eq i32 %35, 192
  br i1 %36, label %45, label %37

37:                                               ; preds = %34
  %38 = and i32 %32, 240
  %39 = icmp eq i32 %38, 224
  br i1 %39, label %45, label %40

40:                                               ; preds = %37
  %41 = and i32 %32, 248
  %42 = icmp eq i32 %41, 240
  br i1 %42, label %45, label %43

43:                                               ; preds = %40
  %44 = add nsw i32 %27, 1
  br label %67

45:                                               ; preds = %34, %37, %40
  %46 = phi i32 [ 0, %34 ], [ 1, %37 ], [ 2, %40 ]
  %47 = add nsw i64 %29, 1
  %48 = icmp slt i64 %47, %24
  br i1 %48, label %49, label %64

49:                                               ; preds = %45
  %50 = getelementptr inbounds i8, i8* %5, i64 %47
  %51 = load i8, i8* %50, align 1
  %52 = and i8 %51, -64
  %53 = icmp eq i8 %52, -128
  br i1 %53, label %58, label %54

54:                                               ; preds = %109, %99, %49
  %55 = phi i64 [ %47, %49 ], [ %97, %99 ], [ %107, %109 ]
  %56 = trunc i64 %55 to i32
  %57 = add nsw i32 %27, 1
  br label %67

58:                                               ; preds = %49
  %59 = icmp eq i32 %46, 0
  br i1 %59, label %60, label %96

60:                                               ; preds = %109, %104, %58
  %61 = phi i64 [ %47, %58 ], [ %97, %104 ], [ %107, %109 ]
  %62 = trunc i64 %61 to i32
  %63 = add nsw i32 %28, 1
  br label %67

64:                                               ; preds = %106, %96, %45
  %65 = phi i64 [ %47, %45 ], [ %97, %96 ], [ %107, %106 ]
  %66 = trunc i64 %65 to i32
  br label %67

67:                                               ; preds = %64, %54, %60, %25, %43
  %68 = phi i32 [ %28, %43 ], [ %28, %25 ], [ %28, %54 ], [ %63, %60 ], [ %28, %64 ]
  %69 = phi i32 [ %44, %43 ], [ %27, %25 ], [ %57, %54 ], [ %27, %60 ], [ %27, %64 ]
  %70 = phi i32 [ %26, %43 ], [ %26, %25 ], [ %56, %54 ], [ %62, %60 ], [ %66, %64 ]
  %71 = add nsw i32 %70, 1
  %72 = icmp slt i32 %71, %7
  br i1 %72, label %25, label %73

73:                                               ; preds = %67
  %74 = icmp eq i32 %69, 0
  %75 = and i1 %23, %74
  br i1 %75, label %91, label %76

76:                                               ; preds = %73
  %77 = mul nsw i32 %69, 10
  %78 = icmp sgt i32 %68, %77
  %79 = and i1 %23, %78
  br i1 %79, label %91, label %80

80:                                               ; preds = %76
  %81 = icmp sgt i32 %68, 3
  %82 = and i1 %81, %74
  br i1 %82, label %91, label %83

83:                                               ; preds = %80
  %84 = icmp sgt i32 %68, 0
  %85 = and i1 %84, %74
  br i1 %85, label %91, label %86

86:                                               ; preds = %83
  %87 = or i32 %69, %68
  %88 = icmp eq i32 %87, 0
  %89 = select i1 %78, i32 25, i32 0
  br i1 %88, label %90, label %91

90:                                               ; preds = %86, %20
  br label %91

91:                                               ; preds = %86, %90, %83, %80, %76, %73
  %92 = phi i32 [ 100, %73 ], [ 80, %76 ], [ 100, %80 ], [ 80, %83 ], [ 15, %90 ], [ %89, %86 ]
  %93 = getelementptr inbounds %"class.icu_69::CharsetRecog_UTF8", %"class.icu_69::CharsetRecog_UTF8"* %0, i64 0, i32 0
  tail call void @_ZN6icu_6912CharsetMatch3setEPNS_9InputTextEPKNS_17CharsetRecognizerEiPKcS7_(%"class.icu_69::CharsetMatch"* %2, %"class.icu_69::InputText"* %1, %"class.icu_69::CharsetRecognizer"* %93, i32 %92, i8* null, i8* null) #4
  %94 = icmp ne i32 %92, 0
  %95 = zext i1 %94 to i8
  ret i8 %95

96:                                               ; preds = %58
  %97 = add nsw i64 %29, 2
  %98 = icmp slt i64 %97, %24
  br i1 %98, label %99, label %64

99:                                               ; preds = %96
  %100 = getelementptr inbounds i8, i8* %5, i64 %97
  %101 = load i8, i8* %100, align 1
  %102 = and i8 %101, -64
  %103 = icmp eq i8 %102, -128
  br i1 %103, label %104, label %54

104:                                              ; preds = %99
  %105 = icmp eq i32 %46, 1
  br i1 %105, label %60, label %106

106:                                              ; preds = %104
  %107 = add nsw i64 %29, 3
  %108 = icmp slt i64 %107, %24
  br i1 %108, label %109, label %64

109:                                              ; preds = %106
  %110 = getelementptr inbounds i8, i8* %5, i64 %107
  %111 = load i8, i8* %110, align 1
  %112 = and i8 %111, -64
  %113 = icmp eq i8 %112, -128
  br i1 %113, label %60, label %54
}

declare void @_ZN6icu_6912CharsetMatch3setEPNS_9InputTextEPKNS_17CharsetRecognizerEiPKcS7_(%"class.icu_69::CharsetMatch"*, %"class.icu_69::InputText"*, %"class.icu_69::CharsetRecognizer"*, i32, i8*, i8*) local_unnamed_addr #3

declare i8* @_ZNK6icu_6917CharsetRecognizer11getLanguageEv(%"class.icu_69::CharsetRecognizer"*) unnamed_addr #3

attributes #0 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
