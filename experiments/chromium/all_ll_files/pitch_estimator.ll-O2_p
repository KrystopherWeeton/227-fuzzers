; ModuleID = '../../third_party/webrtc/modules/audio_coding/codecs/isac/main/source/pitch_estimator.c'
source_filename = "../../third_party/webrtc/modules/audio_coding/codecs/isac/main/source/pitch_estimator.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.PitchAnalysisStruct = type { [72 x double], [5 x double], [2 x double], [24 x double], [24 x double], %struct.PitchFiltstr, %struct.PitchFiltstr, %struct.WeightFiltstr }
%struct.PitchFiltstr = type { [190 x double], [5 x double], [1 x double], [1 x double] }
%struct.WeightFiltstr = type { [240 x double], [6 x double], [6 x double], [6 x double], [240 x double] }

; Function Attrs: nounwind ssp uwtable
define hidden void @WebRtcIsac_PitchAnalysis(double* nocapture readonly, double*, %struct.PitchAnalysisStruct*, double*, double*) local_unnamed_addr #0 {
  %6 = alloca [240 x double], align 16
  %7 = alloca [192 x double], align 16
  %8 = alloca [65 x double], align 16
  %9 = alloca [65 x double], align 16
  %10 = alloca [1735 x double], align 16
  %11 = alloca [25 x double*], align 16
  %12 = alloca [10 x i32], align 16
  %13 = alloca [10 x double], align 16
  %14 = alloca [10 x double], align 16
  %15 = alloca [10 x double], align 16
  %16 = alloca [240 x double], align 16
  %17 = alloca [240 x double], align 16
  %18 = alloca [264 x double], align 16
  %19 = alloca [264 x double], align 16
  %20 = alloca [264 x double], align 16
  %21 = alloca [4 x [264 x double]], align 16
  %22 = alloca [4 x [4 x double]], align 16
  %23 = bitcast [240 x double]* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1920, i8* nonnull %23) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %23, i8 -1, i64 1920, i1 false)
  %24 = bitcast [240 x double]* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1920, i8* nonnull %24) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %24, i8 -1, i64 1920, i1 false)
  %25 = bitcast [264 x double]* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2112, i8* nonnull %25) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %25, i8 -1, i64 2112, i1 false)
  %26 = bitcast [264 x double]* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2112, i8* nonnull %26) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %26, i8 -1, i64 2112, i1 false)
  %27 = bitcast [264 x double]* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2112, i8* nonnull %27) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %27, i8 -1, i64 2112, i1 false)
  %28 = bitcast [4 x [264 x double]]* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8448, i8* nonnull %28) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %28, i8 -1, i64 8448, i1 false)
  %29 = bitcast [4 x [4 x double]]* %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %29) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %29, i8 -1, i64 128, i1 false)
  %30 = getelementptr inbounds [240 x double], [240 x double]* %16, i64 0, i64 0
  %31 = getelementptr inbounds %struct.PitchAnalysisStruct, %struct.PitchAnalysisStruct* %2, i64 0, i32 2, i64 0
  %32 = getelementptr inbounds %struct.PitchAnalysisStruct, %struct.PitchAnalysisStruct* %2, i64 0, i32 2, i64 1
  %33 = load double, double* %32, align 8
  br label %34

34:                                               ; preds = %34, %5
  %35 = phi double [ %33, %5 ], [ %45, %34 ]
  %36 = phi i64 [ 0, %5 ], [ %53, %34 ]
  %37 = phi double* [ %0, %5 ], [ %46, %34 ]
  %38 = phi double* [ %30, %5 ], [ %49, %34 ]
  %39 = load double, double* %37, align 8
  %40 = fadd double %35, %39
  store double %40, double* %38, align 8
  %41 = load double, double* %31, align 8
  %42 = fmul double %39, 0x3FFFEC86FB9C6F7F
  %43 = fsub double %41, %42
  %44 = fmul double %40, 0x3FFDE5F9F92B33B0
  %45 = fadd double %44, %43
  store double %45, double* %32, align 8
  %46 = getelementptr inbounds double, double* %37, i64 1
  %47 = load double, double* %37, align 8
  %48 = fmul double %47, 9.960040e-01
  %49 = getelementptr inbounds double, double* %38, i64 1
  %50 = load double, double* %38, align 8
  %51 = fmul double %50, 8.836000e-01
  %52 = fsub double %48, %51
  store double %52, double* %31, align 8
  %53 = add nuw nsw i64 %36, 1
  %54 = icmp eq i64 %53, 240
  br i1 %54, label %55, label %34

55:                                               ; preds = %34
  %56 = getelementptr inbounds %struct.PitchAnalysisStruct, %struct.PitchAnalysisStruct* %2, i64 0, i32 3, i64 0
  %57 = bitcast double* %56 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %25, i8* align 8 %57, i64 192, i1 false)
  %58 = getelementptr inbounds [240 x double], [240 x double]* %17, i64 0, i64 0
  %59 = getelementptr inbounds [264 x double], [264 x double]* %18, i64 0, i64 24
  %60 = getelementptr inbounds %struct.PitchAnalysisStruct, %struct.PitchAnalysisStruct* %2, i64 0, i32 7
  call void @WebRtcIsac_WeightingFilter(double* nonnull %30, double* nonnull %58, double* %59, %struct.WeightFiltstr* %60) #4
  %61 = getelementptr inbounds [264 x double], [264 x double]* %18, i64 0, i64 240
  %62 = bitcast double* %61 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %57, i8* align 16 %62, i64 192, i1 false)
  %63 = getelementptr inbounds %struct.PitchAnalysisStruct, %struct.PitchAnalysisStruct* %2, i64 0, i32 5, i32 2, i64 0
  %64 = load double, double* %63, align 8
  %65 = getelementptr inbounds %struct.PitchAnalysisStruct, %struct.PitchAnalysisStruct* %2, i64 0, i32 5, i32 3, i64 0
  %66 = load double, double* %65, align 8
  %67 = bitcast [192 x double]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1536, i8* nonnull %67) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %67, i8 -1, i64 1536, i1 false) #4
  %68 = bitcast [65 x double]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 520, i8* nonnull %68) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %68, i8 -1, i64 520, i1 false) #4
  %69 = bitcast [65 x double]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 520, i8* nonnull %69) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %69, i8 -1, i64 520, i1 false) #4
  %70 = bitcast [1735 x double]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 13880, i8* nonnull %70) #4
  %71 = bitcast [25 x double*]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 200, i8* nonnull %71) #4
  %72 = bitcast [10 x i32]* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %72) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %72, i8 -86, i64 40, i1 false) #4
  %73 = bitcast [10 x double]* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %73) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %73, i8 -1, i64 80, i1 false) #4
  %74 = bitcast [10 x double]* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %74) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %74, i8 -1, i64 80, i1 false) #4
  %75 = bitcast [10 x double]* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %75) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %75, i8 -1, i64 80, i1 false) #4
  %76 = getelementptr inbounds [1735 x double], [1735 x double]* %10, i64 0, i64 10
  %77 = getelementptr inbounds [25 x double*], [25 x double*]* %11, i64 0, i64 0
  store double* %76, double** %77, align 16
  %78 = getelementptr inbounds [1735 x double], [1735 x double]* %10, i64 0, i64 79
  %79 = getelementptr inbounds [25 x double*], [25 x double*]* %11, i64 0, i64 1
  store double* %78, double** %79, align 8
  %80 = getelementptr inbounds [1735 x double], [1735 x double]* %10, i64 0, i64 148
  %81 = getelementptr inbounds [25 x double*], [25 x double*]* %11, i64 0, i64 2
  store double* %80, double** %81, align 16
  %82 = getelementptr inbounds [1735 x double], [1735 x double]* %10, i64 0, i64 217
  %83 = getelementptr inbounds [25 x double*], [25 x double*]* %11, i64 0, i64 3
  store double* %82, double** %83, align 8
  %84 = getelementptr inbounds [1735 x double], [1735 x double]* %10, i64 0, i64 286
  %85 = getelementptr inbounds [25 x double*], [25 x double*]* %11, i64 0, i64 4
  store double* %84, double** %85, align 16
  %86 = getelementptr inbounds [1735 x double], [1735 x double]* %10, i64 0, i64 355
  %87 = getelementptr inbounds [25 x double*], [25 x double*]* %11, i64 0, i64 5
  store double* %86, double** %87, align 8
  %88 = getelementptr inbounds [1735 x double], [1735 x double]* %10, i64 0, i64 424
  %89 = getelementptr inbounds [25 x double*], [25 x double*]* %11, i64 0, i64 6
  store double* %88, double** %89, align 16
  %90 = getelementptr inbounds [1735 x double], [1735 x double]* %10, i64 0, i64 493
  %91 = getelementptr inbounds [25 x double*], [25 x double*]* %11, i64 0, i64 7
  store double* %90, double** %91, align 8
  %92 = getelementptr inbounds [1735 x double], [1735 x double]* %10, i64 0, i64 562
  %93 = getelementptr inbounds [25 x double*], [25 x double*]* %11, i64 0, i64 8
  store double* %92, double** %93, align 16
  %94 = getelementptr inbounds [1735 x double], [1735 x double]* %10, i64 0, i64 631
  %95 = getelementptr inbounds [25 x double*], [25 x double*]* %11, i64 0, i64 9
  store double* %94, double** %95, align 8
  %96 = getelementptr inbounds [1735 x double], [1735 x double]* %10, i64 0, i64 700
  %97 = getelementptr inbounds [25 x double*], [25 x double*]* %11, i64 0, i64 10
  store double* %96, double** %97, align 16
  %98 = getelementptr inbounds [1735 x double], [1735 x double]* %10, i64 0, i64 769
  %99 = getelementptr inbounds [25 x double*], [25 x double*]* %11, i64 0, i64 11
  store double* %98, double** %99, align 8
  %100 = getelementptr inbounds [1735 x double], [1735 x double]* %10, i64 0, i64 838
  %101 = getelementptr inbounds [25 x double*], [25 x double*]* %11, i64 0, i64 12
  store double* %100, double** %101, align 16
  %102 = getelementptr inbounds [1735 x double], [1735 x double]* %10, i64 0, i64 907
  %103 = getelementptr inbounds [25 x double*], [25 x double*]* %11, i64 0, i64 13
  store double* %102, double** %103, align 8
  %104 = getelementptr inbounds [1735 x double], [1735 x double]* %10, i64 0, i64 976
  %105 = getelementptr inbounds [25 x double*], [25 x double*]* %11, i64 0, i64 14
  store double* %104, double** %105, align 16
  %106 = getelementptr inbounds [1735 x double], [1735 x double]* %10, i64 0, i64 1045
  %107 = getelementptr inbounds [25 x double*], [25 x double*]* %11, i64 0, i64 15
  store double* %106, double** %107, align 8
  %108 = getelementptr inbounds [1735 x double], [1735 x double]* %10, i64 0, i64 1114
  %109 = getelementptr inbounds [25 x double*], [25 x double*]* %11, i64 0, i64 16
  store double* %108, double** %109, align 16
  %110 = getelementptr inbounds [1735 x double], [1735 x double]* %10, i64 0, i64 1183
  %111 = getelementptr inbounds [25 x double*], [25 x double*]* %11, i64 0, i64 17
  store double* %110, double** %111, align 8
  %112 = getelementptr inbounds [1735 x double], [1735 x double]* %10, i64 0, i64 1252
  %113 = getelementptr inbounds [25 x double*], [25 x double*]* %11, i64 0, i64 18
  store double* %112, double** %113, align 16
  %114 = getelementptr inbounds [1735 x double], [1735 x double]* %10, i64 0, i64 1321
  %115 = getelementptr inbounds [25 x double*], [25 x double*]* %11, i64 0, i64 19
  store double* %114, double** %115, align 8
  %116 = getelementptr inbounds [1735 x double], [1735 x double]* %10, i64 0, i64 1390
  %117 = getelementptr inbounds [25 x double*], [25 x double*]* %11, i64 0, i64 20
  store double* %116, double** %117, align 16
  %118 = getelementptr inbounds [1735 x double], [1735 x double]* %10, i64 0, i64 1459
  %119 = getelementptr inbounds [25 x double*], [25 x double*]* %11, i64 0, i64 21
  store double* %118, double** %119, align 8
  %120 = getelementptr inbounds [1735 x double], [1735 x double]* %10, i64 0, i64 1528
  %121 = getelementptr inbounds [25 x double*], [25 x double*]* %11, i64 0, i64 22
  store double* %120, double** %121, align 16
  %122 = getelementptr inbounds [1735 x double], [1735 x double]* %10, i64 0, i64 1597
  %123 = getelementptr inbounds [25 x double*], [25 x double*]* %11, i64 0, i64 23
  store double* %122, double** %123, align 8
  %124 = getelementptr inbounds [1735 x double], [1735 x double]* %10, i64 0, i64 1666
  %125 = getelementptr inbounds [25 x double*], [25 x double*]* %11, i64 0, i64 24
  store double* %124, double** %125, align 16
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %70, i8 0, i64 13880, i1 false) #4
  %126 = bitcast %struct.PitchAnalysisStruct* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %67, i8* align 8 %126, i64 576, i1 false) #4
  %127 = getelementptr inbounds %struct.PitchAnalysisStruct, %struct.PitchAnalysisStruct* %2, i64 0, i32 1, i64 0
  %128 = bitcast [240 x double]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1920, i8* nonnull %128) #4
  %129 = getelementptr inbounds [240 x double], [240 x double]* %6, i64 0, i64 1
  %130 = bitcast double* %129 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %130, i8* nonnull align 16 %24, i64 1912, i1 false) #4
  %131 = getelementptr inbounds %struct.PitchAnalysisStruct, %struct.PitchAnalysisStruct* %2, i64 0, i32 1, i64 4
  %132 = bitcast double* %131 to i64*
  %133 = load i64, i64* %132, align 8
  %134 = bitcast [240 x double]* %6 to i64*
  store i64 %133, i64* %134, align 16
  %135 = getelementptr inbounds [240 x double], [240 x double]* %17, i64 0, i64 239
  %136 = bitcast double* %135 to i64*
  %137 = load i64, i64* %136, align 8
  store i64 %137, i64* %132, align 8
  %138 = load double, double* %127, align 8
  br label %139

139:                                              ; preds = %139, %55
  %140 = phi double [ %138, %55 ], [ %161, %139 ]
  %141 = phi i64 [ 0, %55 ], [ %162, %139 ]
  %142 = getelementptr inbounds double, double* %129, i64 %141
  %143 = load double, double* %142, align 8
  %144 = fmul double %143, 3.470000e-02
  %145 = fadd double %140, %144
  store double %145, double* %142, align 8
  %146 = fmul double %145, 3.470000e-02
  %147 = fsub double %143, %146
  %148 = add nuw nsw i64 %141, 2
  %149 = getelementptr inbounds double, double* %129, i64 %148
  %150 = load double, double* %149, align 8
  %151 = fmul double %150, 3.470000e-02
  %152 = fadd double %147, %151
  store double %152, double* %149, align 8
  %153 = fmul double %152, 3.470000e-02
  %154 = fsub double %150, %153
  %155 = add nuw nsw i64 %141, 4
  %156 = getelementptr inbounds double, double* %129, i64 %155
  %157 = load double, double* %156, align 8
  %158 = fmul double %157, 3.470000e-02
  %159 = fadd double %154, %158
  store double %159, double* %156, align 8
  %160 = fmul double %159, 3.470000e-02
  %161 = fsub double %157, %160
  %162 = add nuw nsw i64 %141, 6
  %163 = icmp ult i64 %162, 240
  br i1 %163, label %139, label %164

164:                                              ; preds = %139
  %165 = getelementptr inbounds [264 x double], [264 x double]* %18, i64 0, i64 0
  %166 = getelementptr inbounds %struct.PitchAnalysisStruct, %struct.PitchAnalysisStruct* %2, i64 0, i32 5
  store double %161, double* %127, align 8
  %167 = getelementptr inbounds %struct.PitchAnalysisStruct, %struct.PitchAnalysisStruct* %2, i64 0, i32 1, i64 1
  %168 = load double, double* %167, align 8
  br label %169

169:                                              ; preds = %169, %164
  %170 = phi double [ %168, %164 ], [ %191, %169 ]
  %171 = phi i64 [ 0, %164 ], [ %192, %169 ]
  %172 = getelementptr inbounds double, double* %129, i64 %171
  %173 = load double, double* %172, align 8
  %174 = fmul double %173, 3.826000e-01
  %175 = fadd double %170, %174
  store double %175, double* %172, align 8
  %176 = fmul double %175, 3.826000e-01
  %177 = fsub double %173, %176
  %178 = add nuw nsw i64 %171, 2
  %179 = getelementptr inbounds double, double* %129, i64 %178
  %180 = load double, double* %179, align 8
  %181 = fmul double %180, 3.826000e-01
  %182 = fadd double %177, %181
  store double %182, double* %179, align 8
  %183 = fmul double %182, 3.826000e-01
  %184 = fsub double %180, %183
  %185 = add nuw nsw i64 %171, 4
  %186 = getelementptr inbounds double, double* %129, i64 %185
  %187 = load double, double* %186, align 8
  %188 = fmul double %187, 3.826000e-01
  %189 = fadd double %184, %188
  store double %189, double* %186, align 8
  %190 = fmul double %189, 3.826000e-01
  %191 = fsub double %187, %190
  %192 = add nuw nsw i64 %171, 6
  %193 = icmp ult i64 %192, 240
  br i1 %193, label %169, label %194

194:                                              ; preds = %169
  %195 = getelementptr inbounds [192 x double], [192 x double]* %7, i64 0, i64 72
  store double %191, double* %167, align 8
  %196 = getelementptr inbounds %struct.PitchAnalysisStruct, %struct.PitchAnalysisStruct* %2, i64 0, i32 1, i64 2
  %197 = load double, double* %196, align 8
  br label %198

198:                                              ; preds = %198, %194
  %199 = phi double [ %197, %194 ], [ %220, %198 ]
  %200 = phi i64 [ 0, %194 ], [ %221, %198 ]
  %201 = getelementptr inbounds [240 x double], [240 x double]* %6, i64 0, i64 %200
  %202 = load double, double* %201, align 16
  %203 = fmul double %202, 1.544000e-01
  %204 = fadd double %199, %203
  store double %204, double* %201, align 16
  %205 = fmul double %204, 1.544000e-01
  %206 = fsub double %202, %205
  %207 = add nuw nsw i64 %200, 2
  %208 = getelementptr inbounds [240 x double], [240 x double]* %6, i64 0, i64 %207
  %209 = load double, double* %208, align 16
  %210 = fmul double %209, 1.544000e-01
  %211 = fadd double %206, %210
  store double %211, double* %208, align 16
  %212 = fmul double %211, 1.544000e-01
  %213 = fsub double %209, %212
  %214 = add nuw nsw i64 %200, 4
  %215 = getelementptr inbounds [240 x double], [240 x double]* %6, i64 0, i64 %214
  %216 = load double, double* %215, align 16
  %217 = fmul double %216, 1.544000e-01
  %218 = fadd double %213, %217
  store double %218, double* %215, align 16
  %219 = fmul double %218, 1.544000e-01
  %220 = fsub double %216, %219
  %221 = add nuw nsw i64 %200, 6
  %222 = icmp ult i64 %221, 240
  br i1 %222, label %198, label %223

223:                                              ; preds = %198
  store double %220, double* %196, align 8
  %224 = getelementptr inbounds %struct.PitchAnalysisStruct, %struct.PitchAnalysisStruct* %2, i64 0, i32 1, i64 3
  %225 = load double, double* %224, align 8
  br label %226

226:                                              ; preds = %226, %223
  %227 = phi double [ %225, %223 ], [ %248, %226 ]
  %228 = phi i64 [ 0, %223 ], [ %249, %226 ]
  %229 = getelementptr inbounds [240 x double], [240 x double]* %6, i64 0, i64 %228
  %230 = load double, double* %229, align 16
  %231 = fmul double %230, 0x3FE7CED916872B02
  %232 = fadd double %227, %231
  store double %232, double* %229, align 16
  %233 = fmul double %232, 0x3FE7CED916872B02
  %234 = fsub double %230, %233
  %235 = add nuw nsw i64 %228, 2
  %236 = getelementptr inbounds [240 x double], [240 x double]* %6, i64 0, i64 %235
  %237 = load double, double* %236, align 16
  %238 = fmul double %237, 0x3FE7CED916872B02
  %239 = fadd double %234, %238
  store double %239, double* %236, align 16
  %240 = fmul double %239, 0x3FE7CED916872B02
  %241 = fsub double %237, %240
  %242 = add nuw nsw i64 %228, 4
  %243 = getelementptr inbounds [240 x double], [240 x double]* %6, i64 0, i64 %242
  %244 = load double, double* %243, align 16
  %245 = fmul double %244, 0x3FE7CED916872B02
  %246 = fadd double %241, %245
  store double %246, double* %243, align 16
  %247 = fmul double %246, 0x3FE7CED916872B02
  %248 = fsub double %244, %247
  %249 = add nuw nsw i64 %228, 6
  %250 = icmp ult i64 %249, 240
  br i1 %250, label %226, label %251

251:                                              ; preds = %226
  store double %248, double* %224, align 8
  br label %252

252:                                              ; preds = %252, %251
  %253 = phi i64 [ 0, %251 ], [ %283, %252 ]
  %254 = shl nuw i64 %253, 1
  %255 = getelementptr inbounds [240 x double], [240 x double]* %6, i64 0, i64 %254
  %256 = bitcast double* %255 to <4 x double>*
  %257 = load <4 x double>, <4 x double>* %256, align 16
  %258 = shufflevector <4 x double> %257, <4 x double> undef, <2 x i32> <i32 0, i32 2>
  %259 = shufflevector <4 x double> %257, <4 x double> undef, <2 x i32> <i32 1, i32 3>
  %260 = fadd <2 x double> %258, %259
  %261 = getelementptr inbounds double, double* %195, i64 %253
  %262 = bitcast double* %261 to <2 x double>*
  store <2 x double> %260, <2 x double>* %262, align 16
  %263 = add nuw nsw i64 %253, 2
  %264 = shl nuw i64 %263, 1
  %265 = getelementptr inbounds [240 x double], [240 x double]* %6, i64 0, i64 %264
  %266 = bitcast double* %265 to <4 x double>*
  %267 = load <4 x double>, <4 x double>* %266, align 16
  %268 = shufflevector <4 x double> %267, <4 x double> undef, <2 x i32> <i32 0, i32 2>
  %269 = shufflevector <4 x double> %267, <4 x double> undef, <2 x i32> <i32 1, i32 3>
  %270 = fadd <2 x double> %268, %269
  %271 = getelementptr inbounds double, double* %195, i64 %263
  %272 = bitcast double* %271 to <2 x double>*
  store <2 x double> %270, <2 x double>* %272, align 16
  %273 = add nuw nsw i64 %253, 4
  %274 = shl nuw i64 %273, 1
  %275 = getelementptr inbounds [240 x double], [240 x double]* %6, i64 0, i64 %274
  %276 = bitcast double* %275 to <4 x double>*
  %277 = load <4 x double>, <4 x double>* %276, align 16
  %278 = shufflevector <4 x double> %277, <4 x double> undef, <2 x i32> <i32 0, i32 2>
  %279 = shufflevector <4 x double> %277, <4 x double> undef, <2 x i32> <i32 1, i32 3>
  %280 = fadd <2 x double> %278, %279
  %281 = getelementptr inbounds double, double* %195, i64 %273
  %282 = bitcast double* %281 to <2 x double>*
  store <2 x double> %280, <2 x double>* %282, align 16
  %283 = add nuw nsw i64 %253, 6
  %284 = icmp eq i64 %283, 120
  br i1 %284, label %285, label %252, !llvm.loop !2

285:                                              ; preds = %252
  call void @llvm.lifetime.end.p0i8(i64 1920, i8* nonnull %128) #4
  %286 = getelementptr inbounds [192 x double], [192 x double]* %7, i64 0, i64 71
  %287 = load double, double* %286, align 8
  br label %288

288:                                              ; preds = %288, %285
  %289 = phi double [ %287, %285 ], [ %309, %288 ]
  %290 = phi i64 [ 72, %285 ], [ %310, %288 ]
  %291 = fmul double %289, 7.500000e-01
  %292 = add nsw i64 %290, -2
  %293 = getelementptr inbounds [192 x double], [192 x double]* %7, i64 0, i64 %292
  %294 = load double, double* %293, align 16
  %295 = fmul double %294, 2.500000e-01
  %296 = fsub double %291, %295
  %297 = getelementptr inbounds [192 x double], [192 x double]* %7, i64 0, i64 %290
  %298 = load double, double* %297, align 16
  %299 = fadd double %298, %296
  store double %299, double* %297, align 16
  %300 = or i64 %290, 1
  %301 = fmul double %299, 7.500000e-01
  %302 = add nsw i64 %290, -1
  %303 = getelementptr inbounds [192 x double], [192 x double]* %7, i64 0, i64 %302
  %304 = load double, double* %303, align 8
  %305 = fmul double %304, 2.500000e-01
  %306 = fsub double %301, %305
  %307 = getelementptr inbounds [192 x double], [192 x double]* %7, i64 0, i64 %300
  %308 = load double, double* %307, align 8
  %309 = fadd double %308, %306
  store double %309, double* %307, align 8
  %310 = add nuw nsw i64 %290, 2
  %311 = icmp eq i64 %310, 192
  br i1 %311, label %312, label %288

312:                                              ; preds = %288
  %313 = getelementptr inbounds [192 x double], [192 x double]* %7, i64 0, i64 120
  %314 = bitcast double* %313 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %126, i8* align 16 %314, i64 576, i1 false) #4
  br label %315

315:                                              ; preds = %315, %312
  %316 = phi i64 [ 0, %312 ], [ %347, %315 ]
  %317 = phi <2 x double> [ <double 1.000000e-13, double 0.000000e+00>, %312 ], [ %346, %315 ]
  %318 = getelementptr inbounds [192 x double], [192 x double]* %7, i64 0, i64 %316
  %319 = load double, double* %318, align 8
  %320 = getelementptr inbounds double, double* %195, i64 %316
  %321 = load double, double* %320, align 8
  %322 = insertelement <2 x double> undef, double %319, i32 0
  %323 = shufflevector <2 x double> %322, <2 x double> undef, <2 x i32> zeroinitializer
  %324 = insertelement <2 x double> %322, double %321, i32 1
  %325 = fmul <2 x double> %323, %324
  %326 = fadd <2 x double> %317, %325
  %327 = add nuw nsw i64 %316, 1
  %328 = getelementptr inbounds [192 x double], [192 x double]* %7, i64 0, i64 %327
  %329 = load double, double* %328, align 8
  %330 = getelementptr inbounds double, double* %195, i64 %327
  %331 = load double, double* %330, align 8
  %332 = insertelement <2 x double> undef, double %329, i32 0
  %333 = shufflevector <2 x double> %332, <2 x double> undef, <2 x i32> zeroinitializer
  %334 = insertelement <2 x double> %332, double %331, i32 1
  %335 = fmul <2 x double> %333, %334
  %336 = fadd <2 x double> %326, %335
  %337 = add nuw nsw i64 %316, 2
  %338 = getelementptr inbounds [192 x double], [192 x double]* %7, i64 0, i64 %337
  %339 = load double, double* %338, align 8
  %340 = getelementptr inbounds double, double* %195, i64 %337
  %341 = load double, double* %340, align 8
  %342 = insertelement <2 x double> undef, double %339, i32 0
  %343 = shufflevector <2 x double> %342, <2 x double> undef, <2 x i32> zeroinitializer
  %344 = insertelement <2 x double> %342, double %341, i32 1
  %345 = fmul <2 x double> %343, %344
  %346 = fadd <2 x double> %336, %345
  %347 = add nuw nsw i64 %316, 3
  %348 = icmp eq i64 %347, 60
  br i1 %348, label %349, label %315

349:                                              ; preds = %315
  %350 = getelementptr inbounds [65 x double], [65 x double]* %8, i64 0, i64 64
  %351 = extractelement <2 x double> %346, i32 0
  %352 = call double @sqrt(double %351) #4
  %353 = extractelement <2 x double> %346, i32 1
  %354 = fdiv double %353, %352
  store double %354, double* %350, align 16
  br label %355

355:                                              ; preds = %395, %349
  %356 = phi i64 [ 1, %349 ], [ %403, %395 ]
  %357 = phi double [ %351, %349 ], [ %399, %395 ]
  %358 = phi double* [ %350, %349 ], [ %400, %395 ]
  %359 = add nsw i64 %356, -1
  %360 = getelementptr inbounds [192 x double], [192 x double]* %7, i64 0, i64 %359
  %361 = load double, double* %360, align 8
  %362 = add nuw nsw i64 %356, 59
  %363 = getelementptr inbounds [192 x double], [192 x double]* %7, i64 0, i64 %362
  %364 = load double, double* %363, align 8
  %365 = getelementptr inbounds [192 x double], [192 x double]* %7, i64 0, i64 %356
  %366 = load double, double* %195, align 16
  %367 = load double, double* %365, align 8
  %368 = fmul double %366, %367
  %369 = fadd double %368, 0.000000e+00
  br label %370

370:                                              ; preds = %2265, %355
  %371 = phi i64 [ 1, %355 ], [ %2271, %2265 ]
  %372 = phi double [ %369, %355 ], [ %2272, %2265 ]
  %373 = getelementptr inbounds double, double* %195, i64 %371
  %374 = load double, double* %373, align 8
  %375 = getelementptr inbounds double, double* %365, i64 %371
  %376 = load double, double* %375, align 8
  %377 = fmul double %374, %376
  %378 = add nuw nsw i64 %371, 1
  %379 = fadd double %372, %377
  %380 = getelementptr inbounds double, double* %195, i64 %378
  %381 = load double, double* %380, align 8
  %382 = getelementptr inbounds double, double* %365, i64 %378
  %383 = load double, double* %382, align 8
  %384 = fmul double %381, %383
  %385 = add nuw nsw i64 %371, 2
  %386 = fadd double %379, %384
  %387 = getelementptr inbounds double, double* %195, i64 %385
  %388 = load double, double* %387, align 8
  %389 = getelementptr inbounds double, double* %365, i64 %385
  %390 = load double, double* %389, align 8
  %391 = fmul double %388, %390
  %392 = add nuw nsw i64 %371, 3
  %393 = fadd double %386, %391
  %394 = icmp eq i64 %392, 60
  br i1 %394, label %395, label %2265

395:                                              ; preds = %370
  %396 = fmul double %361, %361
  %397 = fmul double %364, %364
  %398 = fsub double %357, %396
  %399 = fadd double %398, %397
  %400 = getelementptr inbounds double, double* %358, i64 -1
  %401 = call double @sqrt(double %399) #4
  %402 = fdiv double %393, %401
  store double %402, double* %400, align 8
  %403 = add nuw nsw i64 %356, 1
  %404 = icmp eq i64 %403, 65
  br i1 %404, label %405, label %355

405:                                              ; preds = %395
  %406 = getelementptr inbounds [192 x double], [192 x double]* %7, i64 0, i64 60
  %407 = getelementptr inbounds [192 x double], [192 x double]* %7, i64 0, i64 132
  br label %408

408:                                              ; preds = %408, %405
  %409 = phi i64 [ 0, %405 ], [ %440, %408 ]
  %410 = phi <2 x double> [ <double 1.000000e-13, double 0.000000e+00>, %405 ], [ %439, %408 ]
  %411 = getelementptr inbounds double, double* %406, i64 %409
  %412 = load double, double* %411, align 8
  %413 = getelementptr inbounds double, double* %407, i64 %409
  %414 = load double, double* %413, align 8
  %415 = insertelement <2 x double> undef, double %412, i32 0
  %416 = shufflevector <2 x double> %415, <2 x double> undef, <2 x i32> zeroinitializer
  %417 = insertelement <2 x double> %415, double %414, i32 1
  %418 = fmul <2 x double> %416, %417
  %419 = fadd <2 x double> %410, %418
  %420 = add nuw nsw i64 %409, 1
  %421 = getelementptr inbounds double, double* %406, i64 %420
  %422 = load double, double* %421, align 8
  %423 = getelementptr inbounds double, double* %407, i64 %420
  %424 = load double, double* %423, align 8
  %425 = insertelement <2 x double> undef, double %422, i32 0
  %426 = shufflevector <2 x double> %425, <2 x double> undef, <2 x i32> zeroinitializer
  %427 = insertelement <2 x double> %425, double %424, i32 1
  %428 = fmul <2 x double> %426, %427
  %429 = fadd <2 x double> %419, %428
  %430 = add nuw nsw i64 %409, 2
  %431 = getelementptr inbounds double, double* %406, i64 %430
  %432 = load double, double* %431, align 8
  %433 = getelementptr inbounds double, double* %407, i64 %430
  %434 = load double, double* %433, align 8
  %435 = insertelement <2 x double> undef, double %432, i32 0
  %436 = shufflevector <2 x double> %435, <2 x double> undef, <2 x i32> zeroinitializer
  %437 = insertelement <2 x double> %435, double %434, i32 1
  %438 = fmul <2 x double> %436, %437
  %439 = fadd <2 x double> %429, %438
  %440 = add nuw nsw i64 %409, 3
  %441 = icmp eq i64 %440, 60
  br i1 %441, label %442, label %408

442:                                              ; preds = %408
  %443 = getelementptr inbounds [65 x double], [65 x double]* %9, i64 0, i64 64
  %444 = extractelement <2 x double> %439, i32 0
  %445 = call double @sqrt(double %444) #4
  %446 = extractelement <2 x double> %439, i32 1
  %447 = fdiv double %446, %445
  store double %447, double* %443, align 16
  br label %448

448:                                              ; preds = %488, %442
  %449 = phi i64 [ 1, %442 ], [ %496, %488 ]
  %450 = phi double [ %444, %442 ], [ %492, %488 ]
  %451 = phi double* [ %443, %442 ], [ %493, %488 ]
  %452 = add nsw i64 %449, -1
  %453 = getelementptr inbounds double, double* %406, i64 %452
  %454 = load double, double* %453, align 8
  %455 = add nuw nsw i64 %449, 59
  %456 = getelementptr inbounds double, double* %406, i64 %455
  %457 = load double, double* %456, align 8
  %458 = getelementptr inbounds double, double* %406, i64 %449
  %459 = load double, double* %407, align 16
  %460 = load double, double* %458, align 8
  %461 = fmul double %459, %460
  %462 = fadd double %461, 0.000000e+00
  br label %463

463:                                              ; preds = %2257, %448
  %464 = phi i64 [ 1, %448 ], [ %2263, %2257 ]
  %465 = phi double [ %462, %448 ], [ %2264, %2257 ]
  %466 = getelementptr inbounds double, double* %407, i64 %464
  %467 = load double, double* %466, align 8
  %468 = getelementptr inbounds double, double* %458, i64 %464
  %469 = load double, double* %468, align 8
  %470 = fmul double %467, %469
  %471 = add nuw nsw i64 %464, 1
  %472 = fadd double %465, %470
  %473 = getelementptr inbounds double, double* %407, i64 %471
  %474 = load double, double* %473, align 8
  %475 = getelementptr inbounds double, double* %458, i64 %471
  %476 = load double, double* %475, align 8
  %477 = fmul double %474, %476
  %478 = add nuw nsw i64 %464, 2
  %479 = fadd double %472, %477
  %480 = getelementptr inbounds double, double* %407, i64 %478
  %481 = load double, double* %480, align 8
  %482 = getelementptr inbounds double, double* %458, i64 %478
  %483 = load double, double* %482, align 8
  %484 = fmul double %481, %483
  %485 = add nuw nsw i64 %464, 3
  %486 = fadd double %479, %484
  %487 = icmp eq i64 %485, 60
  br i1 %487, label %488, label %2257

488:                                              ; preds = %463
  %489 = fmul double %454, %454
  %490 = fmul double %457, %457
  %491 = fsub double %450, %489
  %492 = fadd double %491, %490
  %493 = getelementptr inbounds double, double* %451, i64 -1
  %494 = call double @sqrt(double %492) #4
  %495 = fdiv double %486, %494
  store double %495, double* %493, align 8
  %496 = add nuw nsw i64 %449, 1
  %497 = icmp eq i64 %496, 65
  br i1 %497, label %498, label %448

498:                                              ; preds = %488
  %499 = fmul double %64, 5.000000e-01
  %500 = call double @log(double %499) #4
  %501 = fmul double %66, 4.000000e+00
  %502 = fmul double %66, %501
  %503 = fcmp ogt double %502, 8.000000e-01
  %504 = select i1 %503, double 8.000000e-01, double %502
  br label %505

505:                                              ; preds = %505, %498
  %506 = phi i64 [ 0, %498 ], [ %520, %505 ]
  %507 = trunc i64 %506 to i32
  %508 = add i32 %507, 8
  %509 = sitofp i32 %508 to double
  %510 = call double @log(double %509) #4
  %511 = fsub double %510, %500
  %512 = fmul double %511, -5.000000e+00
  %513 = fmul double %511, %512
  %514 = call double @exp(double %513) #4
  %515 = fmul double %504, %514
  %516 = fadd double %515, 1.000000e+00
  %517 = getelementptr inbounds [65 x double], [65 x double]* %8, i64 0, i64 %506
  %518 = load double, double* %517, align 8
  %519 = fmul double %518, %516
  store double %519, double* %517, align 8
  %520 = add nuw nsw i64 %506, 1
  %521 = icmp eq i64 %520, 65
  br i1 %521, label %522, label %505

522:                                              ; preds = %505
  %523 = load double, double* %350, align 16
  %524 = fmul double %523, 2.000000e-01
  store double %524, double* %350, align 16
  %525 = load double, double* %443, align 16
  %526 = fmul double %525, 2.000000e-01
  store double %526, double* %443, align 16
  %527 = bitcast [65 x double]* %8 to <2 x double>*
  %528 = load <2 x double>, <2 x double>* %527, align 16
  %529 = fmul <2 x double> %528, <double 2.000000e-01, double 5.000000e-01>
  %530 = bitcast [65 x double]* %8 to <2 x double>*
  store <2 x double> %529, <2 x double>* %530, align 16
  %531 = bitcast [65 x double]* %9 to <2 x double>*
  %532 = load <2 x double>, <2 x double>* %531, align 16
  %533 = fmul <2 x double> %532, <double 2.000000e-01, double 5.000000e-01>
  %534 = bitcast [65 x double]* %9 to <2 x double>*
  store <2 x double> %533, <2 x double>* %534, align 16
  %535 = getelementptr inbounds [65 x double], [65 x double]* %8, i64 0, i64 2
  %536 = load double, double* %535, align 16
  %537 = fmul double %536, 0x3FEF5C28F5C28F5C
  store double %537, double* %535, align 16
  %538 = getelementptr inbounds [65 x double], [65 x double]* %9, i64 0, i64 2
  %539 = load double, double* %538, align 16
  %540 = fmul double %539, 0x3FEF5C28F5C28F5C
  store double %540, double* %538, align 16
  %541 = getelementptr inbounds [65 x double], [65 x double]* %8, i64 0, i64 62
  %542 = bitcast double* %541 to <2 x double>*
  %543 = load <2 x double>, <2 x double>* %542, align 16
  %544 = fmul <2 x double> %543, <double 0x3FEF5C28F5C28F5C, double 5.000000e-01>
  %545 = bitcast double* %541 to <2 x double>*
  store <2 x double> %544, <2 x double>* %545, align 16
  %546 = getelementptr inbounds [65 x double], [65 x double]* %9, i64 0, i64 62
  %547 = bitcast double* %546 to <2 x double>*
  %548 = load <2 x double>, <2 x double>* %547, align 16
  %549 = fmul <2 x double> %548, <double 0x3FEF5C28F5C28F5C, double 5.000000e-01>
  %550 = bitcast double* %546 to <2 x double>*
  store <2 x double> %549, <2 x double>* %550, align 16
  %551 = load double*, double** %99, align 8
  %552 = getelementptr inbounds double, double* %551, i64 2
  %553 = bitcast [25 x double*]* %11 to i64*
  %554 = load i64, i64* %553, align 16
  %555 = fadd <2 x double> %533, %529
  %556 = extractelement <2 x double> %555, i32 0
  %557 = fcmp ogt double %556, 0.000000e+00
  %558 = ptrtoint double* %552 to i64
  %559 = sub i64 %558, %554
  %560 = lshr exact i64 %559, 3
  %561 = trunc i64 %560 to i32
  %562 = select i1 %557, i32 %561, i32 0
  %563 = select i1 %557, double %556, double 0.000000e+00
  %564 = getelementptr inbounds double, double* %551, i64 3
  %565 = bitcast double* %552 to <2 x double>*
  store <2 x double> %555, <2 x double>* %565, align 8
  %566 = extractelement <2 x double> %555, i32 1
  %567 = fcmp ogt double %566, %563
  %568 = ptrtoint double* %564 to i64
  %569 = sub i64 %568, %554
  %570 = lshr exact i64 %569, 3
  %571 = trunc i64 %570 to i32
  %572 = select i1 %567, i32 %571, i32 %562
  %573 = select i1 %567, double %566, double %563
  br label %574

574:                                              ; preds = %2242, %522
  %575 = phi double [ %573, %522 ], [ %2256, %2242 ]
  %576 = phi i32 [ %572, %522 ], [ %2255, %2242 ]
  %577 = phi i64 [ 2, %522 ], [ %2247, %2242 ]
  %578 = getelementptr inbounds [65 x double], [65 x double]* %8, i64 0, i64 %577
  %579 = load double, double* %578, align 16
  %580 = getelementptr inbounds [65 x double], [65 x double]* %9, i64 0, i64 %577
  %581 = load double, double* %580, align 16
  %582 = or i64 %577, 1
  %583 = fadd double %581, %579
  %584 = getelementptr inbounds double, double* %552, i64 %577
  store double %583, double* %584, align 8
  %585 = fcmp ogt double %583, %575
  %586 = ptrtoint double* %584 to i64
  %587 = sub i64 %586, %554
  %588 = lshr exact i64 %587, 3
  %589 = trunc i64 %588 to i32
  %590 = select i1 %585, i32 %589, i32 %576
  %591 = select i1 %585, double %583, double %575
  %592 = icmp eq i64 %582, 65
  br i1 %592, label %593, label %2242

593:                                              ; preds = %574
  %594 = load double*, double** %77, align 16
  %595 = getelementptr inbounds double, double* %594, i64 2
  %596 = load double*, double** %121, align 16
  %597 = getelementptr inbounds double, double* %596, i64 13
  %598 = ptrtoint double* %594 to i64
  %599 = extractelement <2 x double> %529, i32 0
  %600 = extractelement <2 x double> %533, i32 0
  br label %601

601:                                              ; preds = %644, %593
  %602 = phi double [ %600, %593 ], [ %649, %644 ]
  %603 = phi double [ %599, %593 ], [ %647, %644 ]
  %604 = phi i64 [ 0, %593 ], [ %632, %644 ]
  %605 = phi i64 [ 11, %593 ], [ %645, %644 ]
  %606 = phi double [ %591, %593 ], [ %642, %644 ]
  %607 = phi i32 [ %590, %593 ], [ %641, %644 ]
  %608 = trunc i64 %604 to i32
  %609 = add i32 %608, 12
  %610 = sitofp i32 %609 to double
  %611 = trunc i64 %605 to i32
  %612 = add i32 %611, 12
  %613 = sitofp i32 %612 to double
  %614 = fdiv double %610, %613
  %615 = fmul double %614, 2.000000e-01
  %616 = fsub double 2.000000e+00, %614
  %617 = fmul double %615, %616
  %618 = getelementptr inbounds [65 x double], [65 x double]* %9, i64 0, i64 %605
  %619 = load double, double* %618, align 8
  %620 = fadd double %603, %619
  %621 = fmul double %620, %617
  %622 = getelementptr inbounds double, double* %595, i64 %604
  store double %621, double* %622, align 8
  %623 = fcmp ogt double %621, %606
  %624 = ptrtoint double* %622 to i64
  %625 = sub i64 %624, %598
  %626 = lshr exact i64 %625, 3
  %627 = trunc i64 %626 to i32
  %628 = select i1 %623, i32 %627, i32 %607
  %629 = select i1 %623, double %621, double %606
  %630 = getelementptr inbounds [65 x double], [65 x double]* %8, i64 0, i64 %605
  %631 = load double, double* %630, align 8
  %632 = add nuw nsw i64 %604, 1
  %633 = fadd double %602, %631
  %634 = fmul double %617, %633
  %635 = getelementptr inbounds double, double* %597, i64 %604
  store double %634, double* %635, align 8
  %636 = fcmp ogt double %634, %629
  %637 = ptrtoint double* %635 to i64
  %638 = sub i64 %637, %598
  %639 = lshr exact i64 %638, 3
  %640 = trunc i64 %639 to i32
  %641 = select i1 %636, i32 %640, i32 %628
  %642 = select i1 %636, double %634, double %629
  %643 = icmp eq i64 %632, 54
  br i1 %643, label %650, label %644

644:                                              ; preds = %601
  %645 = add nuw nsw i64 %605, 1
  %646 = getelementptr inbounds [65 x double], [65 x double]* %8, i64 0, i64 %632
  %647 = load double, double* %646, align 8
  %648 = getelementptr inbounds [65 x double], [65 x double]* %9, i64 0, i64 %632
  %649 = load double, double* %648, align 8
  br label %601

650:                                              ; preds = %601
  %651 = load double*, double** %79, align 8
  %652 = getelementptr inbounds double, double* %651, i64 2
  %653 = load double*, double** %119, align 8
  %654 = getelementptr inbounds double, double* %653, i64 12
  %655 = load i64, i64* %553, align 16
  br label %658

656:                                              ; preds = %658
  %657 = load i64, i64* %553, align 16
  br label %707

658:                                              ; preds = %701, %650
  %659 = phi double [ %600, %650 ], [ %706, %701 ]
  %660 = phi double [ %599, %650 ], [ %704, %701 ]
  %661 = phi i64 [ 0, %650 ], [ %689, %701 ]
  %662 = phi i64 [ 10, %650 ], [ %702, %701 ]
  %663 = phi double [ %642, %650 ], [ %699, %701 ]
  %664 = phi i32 [ %641, %650 ], [ %698, %701 ]
  %665 = trunc i64 %661 to i32
  %666 = add i32 %665, 12
  %667 = sitofp i32 %666 to double
  %668 = trunc i64 %662 to i32
  %669 = add i32 %668, 12
  %670 = sitofp i32 %669 to double
  %671 = fdiv double %667, %670
  %672 = fmul double %671, 9.000000e-01
  %673 = fsub double 2.000000e+00, %671
  %674 = fmul double %672, %673
  %675 = getelementptr inbounds [65 x double], [65 x double]* %9, i64 0, i64 %662
  %676 = load double, double* %675, align 8
  %677 = fadd double %660, %676
  %678 = fmul double %677, %674
  %679 = getelementptr inbounds double, double* %652, i64 %661
  store double %678, double* %679, align 8
  %680 = fcmp ogt double %678, %663
  %681 = ptrtoint double* %679 to i64
  %682 = sub i64 %681, %655
  %683 = lshr exact i64 %682, 3
  %684 = trunc i64 %683 to i32
  %685 = select i1 %680, i32 %684, i32 %664
  %686 = select i1 %680, double %678, double %663
  %687 = getelementptr inbounds [65 x double], [65 x double]* %8, i64 0, i64 %662
  %688 = load double, double* %687, align 8
  %689 = add nuw nsw i64 %661, 1
  %690 = fadd double %659, %688
  %691 = fmul double %674, %690
  %692 = getelementptr inbounds double, double* %654, i64 %661
  store double %691, double* %692, align 8
  %693 = fcmp ogt double %691, %686
  %694 = ptrtoint double* %692 to i64
  %695 = sub i64 %694, %655
  %696 = lshr exact i64 %695, 3
  %697 = trunc i64 %696 to i32
  %698 = select i1 %693, i32 %697, i32 %685
  %699 = select i1 %693, double %691, double %686
  %700 = icmp eq i64 %689, 55
  br i1 %700, label %656, label %701

701:                                              ; preds = %658
  %702 = add nuw nsw i64 %662, 1
  %703 = getelementptr inbounds [65 x double], [65 x double]* %8, i64 0, i64 %689
  %704 = load double, double* %703, align 8
  %705 = getelementptr inbounds [65 x double], [65 x double]* %9, i64 0, i64 %689
  %706 = load double, double* %705, align 8
  br label %658

707:                                              ; preds = %766, %656
  %708 = phi i64 [ 2, %656 ], [ %767, %766 ]
  %709 = phi i64 [ 56, %656 ], [ %769, %766 ]
  %710 = phi i64 [ 9, %656 ], [ %768, %766 ]
  %711 = phi double [ %699, %656 ], [ %764, %766 ]
  %712 = phi i32 [ %698, %656 ], [ %763, %766 ]
  %713 = getelementptr inbounds [25 x double*], [25 x double*]* %11, i64 0, i64 %708
  %714 = load double*, double** %713, align 8
  %715 = getelementptr inbounds double, double* %714, i64 2
  %716 = sub nuw nsw i64 22, %708
  %717 = getelementptr inbounds [25 x double*], [25 x double*]* %11, i64 0, i64 %716
  %718 = load double*, double** %717, align 8
  %719 = sub nuw nsw i64 13, %708
  %720 = getelementptr inbounds double, double* %718, i64 %719
  br label %721

721:                                              ; preds = %721, %707
  %722 = phi i64 [ 0, %707 ], [ %752, %721 ]
  %723 = phi i64 [ %710, %707 ], [ %749, %721 ]
  %724 = phi double [ %711, %707 ], [ %764, %721 ]
  %725 = phi i32 [ %712, %707 ], [ %763, %721 ]
  %726 = trunc i64 %722 to i32
  %727 = add i32 %726, 12
  %728 = sitofp i32 %727 to double
  %729 = trunc i64 %723 to i32
  %730 = add i32 %729, 12
  %731 = sitofp i32 %730 to double
  %732 = fdiv double %728, %731
  %733 = fsub double 2.000000e+00, %732
  %734 = fmul double %732, %733
  %735 = getelementptr inbounds [65 x double], [65 x double]* %8, i64 0, i64 %722
  %736 = load double, double* %735, align 8
  %737 = getelementptr inbounds [65 x double], [65 x double]* %9, i64 0, i64 %723
  %738 = load double, double* %737, align 8
  %739 = fadd double %736, %738
  %740 = fmul double %739, %734
  %741 = getelementptr inbounds double, double* %715, i64 %722
  store double %740, double* %741, align 8
  %742 = fcmp ogt double %740, %724
  %743 = ptrtoint double* %741 to i64
  %744 = sub i64 %743, %657
  %745 = lshr exact i64 %744, 3
  %746 = trunc i64 %745 to i32
  %747 = select i1 %742, i32 %746, i32 %725
  %748 = select i1 %742, double %740, double %724
  %749 = add nuw nsw i64 %723, 1
  %750 = getelementptr inbounds [65 x double], [65 x double]* %8, i64 0, i64 %723
  %751 = load double, double* %750, align 8
  %752 = add nuw nsw i64 %722, 1
  %753 = getelementptr inbounds [65 x double], [65 x double]* %9, i64 0, i64 %722
  %754 = load double, double* %753, align 8
  %755 = fadd double %751, %754
  %756 = fmul double %734, %755
  %757 = getelementptr inbounds double, double* %720, i64 %722
  store double %756, double* %757, align 8
  %758 = fcmp ogt double %756, %748
  %759 = ptrtoint double* %757 to i64
  %760 = sub i64 %759, %657
  %761 = lshr exact i64 %760, 3
  %762 = trunc i64 %761 to i32
  %763 = select i1 %758, i32 %762, i32 %747
  %764 = select i1 %758, double %756, double %748
  %765 = icmp eq i64 %752, %709
  br i1 %765, label %766, label %721

766:                                              ; preds = %721
  %767 = add nuw nsw i64 %708, 1
  %768 = add nsw i64 %710, -1
  %769 = add nuw nsw i64 %709, 1
  %770 = icmp eq i64 %767, 11
  br i1 %770, label %771, label %707

771:                                              ; preds = %766
  %772 = fmul double %764, 6.000000e-01
  %773 = load i64, i64* %553, align 16
  br label %775

774:                                              ; preds = %821
  br i1 %824, label %881, label %827

775:                                              ; preds = %821, %771
  %776 = phi i64 [ 1, %771 ], [ %822, %821 ]
  %777 = phi i64 [ 53, %771 ], [ %826, %821 ]
  %778 = phi i32 [ 0, %771 ], [ %818, %821 ]
  %779 = getelementptr inbounds [25 x double*], [25 x double*]* %11, i64 0, i64 %776
  %780 = load double*, double** %779, align 8
  %781 = getelementptr inbounds double, double* %780, i64 2
  br label %782

782:                                              ; preds = %817, %775
  %783 = phi i64 [ 2, %775 ], [ %819, %817 ]
  %784 = phi i32 [ %778, %775 ], [ %818, %817 ]
  %785 = getelementptr inbounds double, double* %781, i64 %783
  %786 = load double, double* %785, align 8
  %787 = fcmp ogt double %786, %772
  br i1 %787, label %788, label %817

788:                                              ; preds = %782
  %789 = add nuw nsw i64 %783, -70
  %790 = getelementptr inbounds double, double* %781, i64 %789
  %791 = load double, double* %790, align 8
  %792 = fcmp ogt double %786, %791
  br i1 %792, label %793, label %817

793:                                              ; preds = %788
  %794 = add nuw nsw i64 %783, -69
  %795 = getelementptr inbounds double, double* %781, i64 %794
  %796 = load double, double* %795, align 8
  %797 = fcmp ogt double %786, %796
  br i1 %797, label %798, label %817

798:                                              ; preds = %793
  %799 = add nuw nsw i64 %783, 69
  %800 = getelementptr inbounds double, double* %781, i64 %799
  %801 = load double, double* %800, align 8
  %802 = fcmp ogt double %786, %801
  br i1 %802, label %803, label %817

803:                                              ; preds = %798
  %804 = add nuw nsw i64 %783, 70
  %805 = getelementptr inbounds double, double* %781, i64 %804
  %806 = load double, double* %805, align 8
  %807 = fcmp ogt double %786, %806
  br i1 %807, label %808, label %817

808:                                              ; preds = %803
  %809 = ptrtoint double* %785 to i64
  %810 = sub i64 %809, %773
  %811 = lshr exact i64 %810, 3
  %812 = trunc i64 %811 to i32
  %813 = add nsw i32 %784, 1
  %814 = sext i32 %784 to i64
  %815 = getelementptr inbounds [10 x i32], [10 x i32]* %12, i64 0, i64 %814
  store i32 %812, i32* %815, align 4
  %816 = icmp eq i32 %813, 10
  br i1 %816, label %881, label %817

817:                                              ; preds = %808, %803, %798, %793, %788, %782
  %818 = phi i32 [ %813, %808 ], [ %784, %803 ], [ %784, %798 ], [ %784, %793 ], [ %784, %788 ], [ %784, %782 ]
  %819 = add nuw nsw i64 %783, 1
  %820 = icmp eq i64 %819, %777
  br i1 %820, label %821, label %782

821:                                              ; preds = %817
  %822 = add nuw nsw i64 %776, 1
  %823 = icmp ugt i64 %776, 10
  %824 = icmp eq i32 %818, 10
  %825 = or i1 %823, %824
  %826 = add nuw nsw i64 %777, 1
  br i1 %825, label %774, label %775

827:                                              ; preds = %774, %873
  %828 = phi i64 [ %874, %873 ], [ 12, %774 ]
  %829 = phi i64 [ %878, %873 ], [ 3, %774 ]
  %830 = phi i32 [ %870, %873 ], [ %818, %774 ]
  %831 = getelementptr inbounds [25 x double*], [25 x double*]* %11, i64 0, i64 %828
  %832 = load double*, double** %831, align 8
  %833 = getelementptr inbounds double, double* %832, i64 2
  br label %834

834:                                              ; preds = %869, %827
  %835 = phi i64 [ %829, %827 ], [ %871, %869 ]
  %836 = phi i32 [ %830, %827 ], [ %870, %869 ]
  %837 = getelementptr inbounds double, double* %833, i64 %835
  %838 = load double, double* %837, align 8
  %839 = fcmp ogt double %838, %772
  br i1 %839, label %840, label %869

840:                                              ; preds = %834
  %841 = add nsw i64 %835, -70
  %842 = getelementptr inbounds double, double* %833, i64 %841
  %843 = load double, double* %842, align 8
  %844 = fcmp ogt double %838, %843
  br i1 %844, label %845, label %869

845:                                              ; preds = %840
  %846 = add nsw i64 %835, -69
  %847 = getelementptr inbounds double, double* %833, i64 %846
  %848 = load double, double* %847, align 8
  %849 = fcmp ogt double %838, %848
  br i1 %849, label %850, label %869

850:                                              ; preds = %845
  %851 = add nuw nsw i64 %835, 69
  %852 = getelementptr inbounds double, double* %833, i64 %851
  %853 = load double, double* %852, align 8
  %854 = fcmp ogt double %838, %853
  br i1 %854, label %855, label %869

855:                                              ; preds = %850
  %856 = add nuw nsw i64 %835, 70
  %857 = getelementptr inbounds double, double* %833, i64 %856
  %858 = load double, double* %857, align 8
  %859 = fcmp ogt double %838, %858
  br i1 %859, label %860, label %869

860:                                              ; preds = %855
  %861 = ptrtoint double* %837 to i64
  %862 = sub i64 %861, %773
  %863 = lshr exact i64 %862, 3
  %864 = trunc i64 %863 to i32
  %865 = add nsw i32 %836, 1
  %866 = sext i32 %836 to i64
  %867 = getelementptr inbounds [10 x i32], [10 x i32]* %12, i64 0, i64 %866
  store i32 %864, i32* %867, align 4
  %868 = icmp eq i32 %865, 10
  br i1 %868, label %881, label %869

869:                                              ; preds = %860, %855, %850, %845, %840, %834
  %870 = phi i32 [ %865, %860 ], [ %836, %855 ], [ %836, %850 ], [ %836, %845 ], [ %836, %840 ], [ %836, %834 ]
  %871 = add nuw nsw i64 %835, 1
  %872 = icmp eq i64 %871, 63
  br i1 %872, label %873, label %834

873:                                              ; preds = %869
  %874 = add nuw nsw i64 %828, 1
  %875 = icmp ugt i64 %828, 20
  %876 = icmp eq i32 %870, 10
  %877 = or i1 %875, %876
  %878 = add nuw nsw i64 %829, 1
  br i1 %877, label %879, label %827

879:                                              ; preds = %873
  %880 = icmp sgt i32 %870, 0
  br i1 %880, label %881, label %1403

881:                                              ; preds = %808, %860, %879, %774
  %882 = phi i32 [ %870, %879 ], [ 10, %774 ], [ 10, %860 ], [ 10, %808 ]
  %883 = zext i32 %882 to i64
  %884 = getelementptr inbounds double, double* %594, i64 4
  %885 = getelementptr inbounds double, double* %594, i64 -3
  br label %886

886:                                              ; preds = %1354, %881
  %887 = phi i64 [ 0, %881 ], [ %1355, %1354 ]
  %888 = getelementptr inbounds [10 x i32], [10 x i32]* %12, i64 0, i64 %887
  %889 = load i32, i32* %888, align 4
  %890 = add nsw i32 %889, -70
  %891 = sext i32 %890 to i64
  %892 = getelementptr inbounds double, double* %594, i64 %891
  %893 = getelementptr inbounds double, double* %892, i64 -3
  %894 = bitcast double* %893 to <2 x double>*
  %895 = load <2 x double>, <2 x double>* %894, align 8
  %896 = fmul <2 x double> %895, <double 0x3F462302AB148AC4, double 0x3F965DDFC7BFD364>
  %897 = extractelement <2 x double> %896, i32 0
  %898 = extractelement <2 x double> %896, i32 1
  %899 = fsub double %898, %897
  %900 = getelementptr inbounds double, double* %892, i64 -1
  %901 = bitcast double* %900 to <2 x double>*
  %902 = load <2 x double>, <2 x double>* %901, align 8
  %903 = fmul <2 x double> %902, <double 0x3FBF3D79260FD3E5, double 0x3FE33A48E72EC104>
  %904 = extractelement <2 x double> %903, i32 0
  %905 = fsub double %899, %904
  %906 = extractelement <2 x double> %903, i32 1
  %907 = fadd double %905, %906
  %908 = getelementptr inbounds double, double* %892, i64 1
  %909 = bitcast double* %908 to <2 x double>*
  %910 = load <2 x double>, <2 x double>* %909, align 8
  %911 = fmul <2 x double> %910, <double 0x3FE33A48E72EC104, double 0x3FBF3D79260FD3E5>
  %912 = extractelement <2 x double> %911, i32 0
  %913 = fadd double %907, %912
  %914 = extractelement <2 x double> %911, i32 1
  %915 = fsub double %913, %914
  %916 = getelementptr inbounds double, double* %892, i64 3
  %917 = bitcast double* %916 to <2 x double>*
  %918 = load <2 x double>, <2 x double>* %917, align 8
  %919 = fmul <2 x double> %918, <double 0x3F965DDFC7BFD364, double 0x3F462302AB148AC4>
  %920 = extractelement <2 x double> %919, i32 0
  %921 = fadd double %915, %920
  %922 = extractelement <2 x double> %919, i32 1
  %923 = fsub double %921, %922
  %924 = add nsw i32 %889, -1
  %925 = sext i32 %924 to i64
  %926 = getelementptr inbounds double, double* %594, i64 %925
  %927 = getelementptr inbounds double, double* %926, i64 -3
  %928 = bitcast double* %927 to <2 x double>*
  %929 = load <2 x double>, <2 x double>* %928, align 8
  %930 = fmul <2 x double> %929, <double 0x3F462302AB148AC4, double 0x3F965DDFC7BFD364>
  %931 = getelementptr inbounds double, double* %926, i64 -1
  %932 = bitcast double* %931 to <2 x double>*
  %933 = load <2 x double>, <2 x double>* %932, align 8
  %934 = getelementptr inbounds double, double* %926, i64 1
  %935 = load double, double* %934, align 8
  %936 = getelementptr inbounds double, double* %926, i64 2
  %937 = load double, double* %936, align 8
  %938 = getelementptr inbounds double, double* %926, i64 3
  %939 = bitcast double* %938 to <2 x double>*
  %940 = load <2 x double>, <2 x double>* %939, align 8
  %941 = sext i32 %889 to i64
  %942 = extractelement <2 x double> %929, i32 1
  %943 = fmul double %942, 0x3F462302AB148AC4
  %944 = fmul <2 x double> %933, <double 0x3F965DDFC7BFD364, double 0x3FBF3D79260FD3E5>
  %945 = extractelement <2 x double> %944, i32 0
  %946 = fsub double %945, %943
  %947 = extractelement <2 x double> %944, i32 1
  %948 = fsub double %946, %947
  %949 = add nsw i32 %889, 69
  %950 = sext i32 %949 to i64
  %951 = getelementptr inbounds double, double* %594, i64 %950
  %952 = getelementptr inbounds double, double* %951, i64 1
  %953 = load double, double* %952, align 8
  %954 = insertelement <2 x double> undef, double %953, i32 0
  %955 = insertelement <2 x double> %954, double %935, i32 1
  %956 = fmul <2 x double> %955, <double 0x3FE33A48E72EC104, double 0x3FE33A48E72EC104>
  %957 = extractelement <2 x double> %956, i32 1
  %958 = fadd double %948, %957
  %959 = fmul double %937, 0x3FE33A48E72EC104
  %960 = fadd double %958, %959
  %961 = fmul <2 x double> %940, <double 0x3FBF3D79260FD3E5, double 0x3F965DDFC7BFD364>
  %962 = extractelement <2 x double> %961, i32 0
  %963 = fsub double %960, %962
  %964 = extractelement <2 x double> %961, i32 1
  %965 = fadd double %963, %964
  %966 = getelementptr inbounds double, double* %884, i64 %941
  %967 = load double, double* %966, align 8
  %968 = fmul double %967, 0x3F462302AB148AC4
  %969 = fsub double %965, %968
  %970 = getelementptr inbounds double, double* %951, i64 -3
  %971 = bitcast double* %970 to <2 x double>*
  %972 = load <2 x double>, <2 x double>* %971, align 8
  %973 = fmul <2 x double> %972, <double 0x3F462302AB148AC4, double 0x3F965DDFC7BFD364>
  %974 = shufflevector <2 x double> %973, <2 x double> %930, <2 x i32> <i32 1, i32 3>
  %975 = shufflevector <2 x double> %973, <2 x double> %930, <2 x i32> <i32 0, i32 2>
  %976 = fsub <2 x double> %974, %975
  %977 = getelementptr inbounds double, double* %951, i64 -1
  %978 = load double, double* %977, align 8
  %979 = insertelement <2 x double> undef, double %978, i32 0
  %980 = shufflevector <2 x double> %979, <2 x double> %933, <2 x i32> <i32 0, i32 2>
  %981 = fmul <2 x double> %980, <double 0x3FBF3D79260FD3E5, double 0x3FBF3D79260FD3E5>
  %982 = fsub <2 x double> %976, %981
  %983 = load double, double* %951, align 8
  %984 = insertelement <2 x double> %933, double %983, i32 0
  %985 = fmul <2 x double> %984, <double 0x3FE33A48E72EC104, double 0x3FE33A48E72EC104>
  %986 = fadd <2 x double> %982, %985
  %987 = fadd <2 x double> %986, %956
  %988 = getelementptr inbounds double, double* %951, i64 2
  %989 = load double, double* %988, align 8
  %990 = insertelement <2 x double> undef, double %989, i32 0
  %991 = insertelement <2 x double> %990, double %937, i32 1
  %992 = fmul <2 x double> %991, <double 0x3FBF3D79260FD3E5, double 0x3FBF3D79260FD3E5>
  %993 = fsub <2 x double> %987, %992
  %994 = getelementptr inbounds double, double* %951, i64 3
  %995 = load double, double* %994, align 8
  %996 = insertelement <2 x double> undef, double %995, i32 0
  %997 = shufflevector <2 x double> %996, <2 x double> %940, <2 x i32> <i32 0, i32 2>
  %998 = fmul <2 x double> %997, <double 0x3F965DDFC7BFD364, double 0x3F965DDFC7BFD364>
  %999 = fadd <2 x double> %993, %998
  %1000 = getelementptr inbounds double, double* %951, i64 4
  %1001 = load double, double* %1000, align 8
  %1002 = insertelement <2 x double> %940, double %1001, i32 0
  %1003 = fmul <2 x double> %1002, <double 0x3F462302AB148AC4, double 0x3F462302AB148AC4>
  %1004 = fsub <2 x double> %999, %1003
  %1005 = extractelement <2 x double> %1004, i32 1
  %1006 = fcmp ogt double %1005, %923
  %1007 = select i1 %1006, double %1005, double %923
  %1008 = fcmp ogt double %969, %1007
  %1009 = select i1 %1008, double %969, double %1007
  %1010 = extractelement <2 x double> %1004, i32 0
  %1011 = fcmp ogt double %1010, %1009
  %1012 = select i1 %1011, double %1010, double %1009
  %1013 = sdiv i32 %889, 69
  %1014 = mul i32 %1013, -69
  %1015 = add i32 %889, 6
  %1016 = add i32 %1015, %1014
  %1017 = sitofp i32 %1016 to double
  %1018 = getelementptr inbounds [10 x double], [10 x double]* %14, i64 0, i64 %887
  store double %1017, double* %1018, align 8
  %1019 = fadd double %1017, 1.100000e+01
  %1020 = sitofp i32 %1013 to double
  %1021 = fsub double %1019, %1020
  %1022 = getelementptr inbounds [10 x double], [10 x double]* %15, i64 0, i64 %887
  store double %1021, double* %1022, align 8
  %1023 = fcmp ogt double %935, %1012
  br i1 %1023, label %1024, label %1030

1024:                                             ; preds = %886
  %1025 = add nsw i32 %889, -69
  %1026 = sext i32 %1025 to i64
  %1027 = getelementptr inbounds double, double* %594, i64 %1026
  %1028 = load double, double* %1027, align 8
  %1029 = extractelement <2 x double> %902, i32 1
  br label %1263

1030:                                             ; preds = %886
  %1031 = fcmp oeq double %923, %1012
  br i1 %1031, label %1032, label %1091

1032:                                             ; preds = %1030
  %1033 = fadd double %1017, -5.000000e-01
  store double %1033, double* %1018, align 8
  %1034 = fadd double %1021, 5.000000e-01
  store double %1034, double* %1022, align 8
  %1035 = add nsw i32 %889, -140
  %1036 = sext i32 %1035 to i64
  %1037 = getelementptr inbounds double, double* %594, i64 %1036
  %1038 = getelementptr inbounds double, double* %1037, i64 -3
  %1039 = load double, double* %1038, align 8
  %1040 = fmul double %1039, 0x3F462302AB148AC4
  %1041 = getelementptr inbounds double, double* %1037, i64 -2
  %1042 = load double, double* %1041, align 8
  %1043 = fmul double %1042, 0x3F965DDFC7BFD364
  %1044 = fsub double %1043, %1040
  %1045 = getelementptr inbounds double, double* %1037, i64 -1
  %1046 = load double, double* %1045, align 8
  %1047 = fmul double %1046, 0x3FBF3D79260FD3E5
  %1048 = fsub double %1044, %1047
  %1049 = load double, double* %1037, align 8
  %1050 = fmul double %1049, 0x3FE33A48E72EC104
  %1051 = fadd double %1048, %1050
  %1052 = getelementptr inbounds double, double* %1037, i64 1
  %1053 = load double, double* %1052, align 8
  %1054 = fmul double %1053, 0x3FE33A48E72EC104
  %1055 = fadd double %1051, %1054
  %1056 = getelementptr inbounds double, double* %1037, i64 2
  %1057 = load double, double* %1056, align 8
  %1058 = fmul double %1057, 0x3FBF3D79260FD3E5
  %1059 = fsub double %1055, %1058
  %1060 = getelementptr inbounds double, double* %1037, i64 3
  %1061 = load double, double* %1060, align 8
  %1062 = fmul double %1061, 0x3F965DDFC7BFD364
  %1063 = fadd double %1059, %1062
  %1064 = getelementptr inbounds double, double* %1037, i64 4
  %1065 = load double, double* %1064, align 8
  %1066 = fmul double %1065, 0x3F462302AB148AC4
  %1067 = fsub double %1063, %1066
  %1068 = add nsw i32 %889, -139
  %1069 = sext i32 %1068 to i64
  %1070 = fmul double %1042, 0x3F462302AB148AC4
  %1071 = fmul double %1046, 0x3F965DDFC7BFD364
  %1072 = fsub double %1071, %1070
  %1073 = fmul double %1049, 0x3FBF3D79260FD3E5
  %1074 = fsub double %1072, %1073
  %1075 = fadd double %1074, %1054
  %1076 = fmul double %1057, 0x3FE33A48E72EC104
  %1077 = fadd double %1075, %1076
  %1078 = fmul double %1061, 0x3FBF3D79260FD3E5
  %1079 = fsub double %1077, %1078
  %1080 = fmul double %1065, 0x3F965DDFC7BFD364
  %1081 = fadd double %1079, %1080
  %1082 = getelementptr inbounds double, double* %884, i64 %1069
  %1083 = load double, double* %1082, align 8
  %1084 = fmul double %1083, 0x3F462302AB148AC4
  %1085 = fsub double %1081, %1084
  %1086 = add nsw i32 %889, -69
  %1087 = sext i32 %1086 to i64
  %1088 = getelementptr inbounds double, double* %594, i64 %1087
  %1089 = load double, double* %1088, align 8
  %1090 = insertelement <2 x double> %902, double %935, i32 0
  br label %1263

1091:                                             ; preds = %1030
  %1092 = fcmp oeq double %1005, %1012
  br i1 %1092, label %1093, label %1150

1093:                                             ; preds = %1091
  %1094 = fadd double %1017, -5.000000e-01
  store double %1094, double* %1018, align 8
  %1095 = fadd double %1021, -5.000000e-01
  store double %1095, double* %1022, align 8
  %1096 = add nsw i32 %889, -71
  %1097 = sext i32 %1096 to i64
  %1098 = getelementptr inbounds double, double* %594, i64 %1097
  %1099 = getelementptr inbounds double, double* %1098, i64 -3
  %1100 = load double, double* %1099, align 8
  %1101 = fmul double %1100, 0x3F462302AB148AC4
  %1102 = getelementptr inbounds double, double* %1098, i64 -2
  %1103 = load double, double* %1102, align 8
  %1104 = fmul double %1103, 0x3F965DDFC7BFD364
  %1105 = fsub double %1104, %1101
  %1106 = getelementptr inbounds double, double* %1098, i64 -1
  %1107 = load double, double* %1106, align 8
  %1108 = fmul double %1107, 0x3FBF3D79260FD3E5
  %1109 = fsub double %1105, %1108
  %1110 = load double, double* %1098, align 8
  %1111 = fmul double %1110, 0x3FE33A48E72EC104
  %1112 = fadd double %1109, %1111
  %1113 = getelementptr inbounds double, double* %1098, i64 1
  %1114 = load double, double* %1113, align 8
  %1115 = fmul double %1114, 0x3FE33A48E72EC104
  %1116 = fadd double %1112, %1115
  %1117 = getelementptr inbounds double, double* %1098, i64 2
  %1118 = load double, double* %1117, align 8
  %1119 = fmul double %1118, 0x3FBF3D79260FD3E5
  %1120 = fsub double %1116, %1119
  %1121 = getelementptr inbounds double, double* %1098, i64 3
  %1122 = load double, double* %1121, align 8
  %1123 = fmul double %1122, 0x3F965DDFC7BFD364
  %1124 = fadd double %1120, %1123
  %1125 = getelementptr inbounds double, double* %1098, i64 4
  %1126 = load double, double* %1125, align 8
  %1127 = fmul double %1126, 0x3F462302AB148AC4
  %1128 = fsub double %1124, %1127
  %1129 = add nsw i32 %889, 68
  %1130 = sext i32 %1129 to i64
  %1131 = getelementptr inbounds double, double* %885, i64 %1130
  %1132 = load double, double* %1131, align 8
  %1133 = fmul double %1132, 0x3F462302AB148AC4
  %1134 = extractelement <2 x double> %972, i32 0
  %1135 = fmul double %1134, 0x3F965DDFC7BFD364
  %1136 = fsub double %1135, %1133
  %1137 = extractelement <2 x double> %972, i32 1
  %1138 = fmul double %1137, 0x3FBF3D79260FD3E5
  %1139 = fsub double %1136, %1138
  %1140 = fmul double %978, 0x3FE33A48E72EC104
  %1141 = fadd double %1140, %1139
  %1142 = extractelement <2 x double> %985, i32 0
  %1143 = fadd double %1142, %1141
  %1144 = fmul double %953, 0x3FBF3D79260FD3E5
  %1145 = fsub double %1143, %1144
  %1146 = fmul double %989, 0x3F965DDFC7BFD364
  %1147 = fadd double %1146, %1145
  %1148 = fmul double %995, 0x3F462302AB148AC4
  %1149 = fsub double %1147, %1148
  br label %1263

1150:                                             ; preds = %1091
  %1151 = fcmp oeq double %969, %1012
  %1152 = fadd double %1017, 5.000000e-01
  store double %1152, double* %1018, align 8
  br i1 %1151, label %1153, label %1208

1153:                                             ; preds = %1150
  %1154 = fadd double %1021, 5.000000e-01
  store double %1154, double* %1022, align 8
  %1155 = add nsw i32 %889, -69
  %1156 = sext i32 %1155 to i64
  %1157 = getelementptr inbounds double, double* %594, i64 %1156
  %1158 = getelementptr inbounds double, double* %1157, i64 -3
  %1159 = load double, double* %1158, align 8
  %1160 = fmul double %1159, 0x3F462302AB148AC4
  %1161 = getelementptr inbounds double, double* %1157, i64 -2
  %1162 = load double, double* %1161, align 8
  %1163 = fmul double %1162, 0x3F965DDFC7BFD364
  %1164 = fsub double %1163, %1160
  %1165 = getelementptr inbounds double, double* %1157, i64 -1
  %1166 = load double, double* %1165, align 8
  %1167 = fmul double %1166, 0x3FBF3D79260FD3E5
  %1168 = fsub double %1164, %1167
  %1169 = load double, double* %1157, align 8
  %1170 = fmul double %1169, 0x3FE33A48E72EC104
  %1171 = fadd double %1168, %1170
  %1172 = getelementptr inbounds double, double* %1157, i64 1
  %1173 = load double, double* %1172, align 8
  %1174 = fmul double %1173, 0x3FE33A48E72EC104
  %1175 = fadd double %1171, %1174
  %1176 = getelementptr inbounds double, double* %1157, i64 2
  %1177 = load double, double* %1176, align 8
  %1178 = fmul double %1177, 0x3FBF3D79260FD3E5
  %1179 = fsub double %1175, %1178
  %1180 = getelementptr inbounds double, double* %1157, i64 3
  %1181 = load double, double* %1180, align 8
  %1182 = fmul double %1181, 0x3F965DDFC7BFD364
  %1183 = fadd double %1179, %1182
  %1184 = getelementptr inbounds double, double* %1157, i64 4
  %1185 = load double, double* %1184, align 8
  %1186 = fmul double %1185, 0x3F462302AB148AC4
  %1187 = fsub double %1183, %1186
  %1188 = add nsw i32 %889, 70
  %1189 = sext i32 %1188 to i64
  %1190 = extractelement <2 x double> %972, i32 1
  %1191 = fmul double %1190, 0x3F462302AB148AC4
  %1192 = fmul double %978, 0x3F965DDFC7BFD364
  %1193 = fsub double %1192, %1191
  %1194 = fmul double %983, 0x3FBF3D79260FD3E5
  %1195 = fsub double %1193, %1194
  %1196 = extractelement <2 x double> %956, i32 0
  %1197 = fadd double %1195, %1196
  %1198 = fmul double %989, 0x3FE33A48E72EC104
  %1199 = fadd double %1197, %1198
  %1200 = fmul double %995, 0x3FBF3D79260FD3E5
  %1201 = fsub double %1199, %1200
  %1202 = fmul double %1001, 0x3F965DDFC7BFD364
  %1203 = fadd double %1201, %1202
  %1204 = getelementptr inbounds double, double* %884, i64 %1189
  %1205 = load double, double* %1204, align 8
  %1206 = fmul double %1205, 0x3F462302AB148AC4
  %1207 = fsub double %1203, %1206
  br label %1263

1208:                                             ; preds = %1150
  %1209 = fadd double %1021, -5.000000e-01
  store double %1209, double* %1022, align 8
  %1210 = add nsw i32 %889, 138
  %1211 = sext i32 %1210 to i64
  %1212 = getelementptr inbounds double, double* %594, i64 %1211
  %1213 = getelementptr inbounds double, double* %1212, i64 -3
  %1214 = load double, double* %1213, align 8
  %1215 = fmul double %1214, 0x3F462302AB148AC4
  %1216 = getelementptr inbounds double, double* %1212, i64 -2
  %1217 = load double, double* %1216, align 8
  %1218 = fmul double %1217, 0x3F965DDFC7BFD364
  %1219 = fsub double %1218, %1215
  %1220 = getelementptr inbounds double, double* %1212, i64 -1
  %1221 = load double, double* %1220, align 8
  %1222 = fmul double %1221, 0x3FBF3D79260FD3E5
  %1223 = fsub double %1219, %1222
  %1224 = load double, double* %1212, align 8
  %1225 = fmul double %1224, 0x3FE33A48E72EC104
  %1226 = fadd double %1223, %1225
  %1227 = getelementptr inbounds double, double* %1212, i64 1
  %1228 = load double, double* %1227, align 8
  %1229 = fmul double %1228, 0x3FE33A48E72EC104
  %1230 = fadd double %1226, %1229
  %1231 = getelementptr inbounds double, double* %1212, i64 2
  %1232 = load double, double* %1231, align 8
  %1233 = fmul double %1232, 0x3FBF3D79260FD3E5
  %1234 = fsub double %1230, %1233
  %1235 = getelementptr inbounds double, double* %1212, i64 3
  %1236 = load double, double* %1235, align 8
  %1237 = fmul double %1236, 0x3F965DDFC7BFD364
  %1238 = fadd double %1234, %1237
  %1239 = getelementptr inbounds double, double* %1212, i64 4
  %1240 = load double, double* %1239, align 8
  %1241 = fmul double %1240, 0x3F462302AB148AC4
  %1242 = fsub double %1238, %1241
  %1243 = add nsw i32 %889, 139
  %1244 = sext i32 %1243 to i64
  %1245 = fmul double %1217, 0x3F462302AB148AC4
  %1246 = fmul double %1221, 0x3F965DDFC7BFD364
  %1247 = fsub double %1246, %1245
  %1248 = fmul double %1224, 0x3FBF3D79260FD3E5
  %1249 = fsub double %1247, %1248
  %1250 = fadd double %1249, %1229
  %1251 = fmul double %1232, 0x3FE33A48E72EC104
  %1252 = fadd double %1250, %1251
  %1253 = fmul double %1236, 0x3FBF3D79260FD3E5
  %1254 = fsub double %1252, %1253
  %1255 = fmul double %1240, 0x3F965DDFC7BFD364
  %1256 = fadd double %1254, %1255
  %1257 = getelementptr inbounds double, double* %884, i64 %1244
  %1258 = load double, double* %1257, align 8
  %1259 = fmul double %1258, 0x3F462302AB148AC4
  %1260 = fsub double %1256, %1259
  %1261 = insertelement <2 x double> undef, double %1228, i32 0
  %1262 = insertelement <2 x double> %1261, double %983, i32 1
  br label %1263

1263:                                             ; preds = %1208, %1153, %1093, %1032, %1024
  %1264 = phi double [ %1021, %1024 ], [ %1034, %1032 ], [ %1095, %1093 ], [ %1154, %1153 ], [ %1209, %1208 ]
  %1265 = phi double [ %1017, %1024 ], [ %1033, %1032 ], [ %1094, %1093 ], [ %1152, %1153 ], [ %1152, %1208 ]
  %1266 = phi double [ %1029, %1024 ], [ %1067, %1032 ], [ %1128, %1093 ], [ %923, %1153 ], [ %1005, %1208 ]
  %1267 = phi double [ %983, %1024 ], [ %1005, %1032 ], [ %1149, %1093 ], [ %1010, %1153 ], [ %1242, %1208 ]
  %1268 = phi double [ %923, %1024 ], [ %1053, %1032 ], [ %1114, %1093 ], [ %1169, %1153 ], [ %935, %1208 ]
  %1269 = phi double [ %935, %1024 ], [ %923, %1032 ], [ %1005, %1093 ], [ %969, %1153 ], [ %1010, %1208 ]
  %1270 = phi double [ %1028, %1024 ], [ %1085, %1032 ], [ %923, %1093 ], [ %1187, %1153 ], [ %969, %1208 ]
  %1271 = phi double [ %969, %1024 ], [ %1089, %1032 ], [ %935, %1093 ], [ %937, %1153 ], [ %953, %1208 ]
  %1272 = phi double [ %953, %1024 ], [ %969, %1032 ], [ %1010, %1093 ], [ %1207, %1153 ], [ %1260, %1208 ]
  %1273 = phi <2 x double> [ %1004, %1024 ], [ %1090, %1032 ], [ %984, %1093 ], [ %955, %1153 ], [ %1262, %1208 ]
  %1274 = getelementptr inbounds [10 x double], [10 x double]* %13, i64 0, i64 %887
  %1275 = fadd double %1268, %1271
  %1276 = extractelement <2 x double> %1273, i32 1
  %1277 = fsub double %1275, %1276
  %1278 = extractelement <2 x double> %1273, i32 0
  %1279 = fsub double %1277, %1278
  %1280 = fmul double %1279, 5.000000e-01
  %1281 = insertelement <2 x double> undef, double %1271, i32 0
  %1282 = shufflevector <2 x double> %1281, <2 x double> undef, <2 x i32> zeroinitializer
  %1283 = fadd <2 x double> %1273, %1282
  %1284 = insertelement <2 x double> undef, double %1276, i32 0
  %1285 = insertelement <2 x double> %1284, double %1268, i32 1
  %1286 = fsub <2 x double> %1283, %1285
  %1287 = insertelement <2 x double> undef, double %1268, i32 0
  %1288 = shufflevector <2 x double> %1287, <2 x double> %1273, <2 x i32> <i32 0, i32 2>
  %1289 = fsub <2 x double> %1286, %1288
  %1290 = fmul <2 x double> %1289, <double 5.000000e-01, double -5.000000e-01>
  %1291 = fadd double %1266, %1272
  %1292 = fmul double %1291, 5.000000e-01
  %1293 = fsub double %1292, %1269
  %1294 = fadd double %1267, %1270
  %1295 = fmul double %1294, 5.000000e-01
  %1296 = fsub double %1295, %1269
  %1297 = fadd double %1276, %1278
  %1298 = fadd double %1268, %1297
  %1299 = fadd double %1271, %1298
  %1300 = fmul double %1269, 4.000000e+00
  %1301 = fsub double %1299, %1300
  %1302 = fsub double %1301, %1293
  %1303 = fsub double %1302, %1296
  %1304 = fsub double -0.000000e+00, %1293
  %1305 = fmul double %1303, 5.000000e-01
  %1306 = fsub double %1304, %1305
  %1307 = fsub double -0.000000e+00, %1296
  %1308 = fsub double %1307, %1305
  %1309 = fcmp olt double %1306, 0x3E7AD7F29ABCAF48
  br i1 %1309, label %1316, label %1310

1310:                                             ; preds = %1263
  %1311 = fmul double %1306, %1308
  %1312 = extractelement <2 x double> %1290, i32 1
  %1313 = fmul double %1312, %1312
  %1314 = fsub double %1311, %1313
  %1315 = fcmp olt double %1314, 0x3E7AD7F29ABCAF48
  br i1 %1315, label %1316, label %1317

1316:                                             ; preds = %1310, %1263
  store double %1269, double* %1274, align 8
  br label %1354

1317:                                             ; preds = %1310
  %1318 = call double @sqrt(double %1306) #4
  %1319 = insertelement <2 x double> undef, double %1318, i32 0
  %1320 = shufflevector <2 x double> %1319, <2 x double> undef, <2 x i32> zeroinitializer
  %1321 = fdiv <2 x double> %1290, %1320
  %1322 = extractelement <2 x double> %1321, i32 1
  %1323 = fmul double %1322, %1322
  %1324 = fsub double %1308, %1323
  %1325 = call double @sqrt(double %1324) #4
  %1326 = extractelement <2 x double> %1321, i32 0
  %1327 = fmul double %1326, %1322
  %1328 = fsub double %1280, %1327
  %1329 = fdiv double %1328, %1325
  %1330 = fdiv double %1329, %1325
  %1331 = fmul double %1322, %1330
  %1332 = fsub double %1326, %1331
  %1333 = fmul double %1332, 5.000000e-01
  %1334 = fdiv double %1333, %1318
  %1335 = fmul double %1330, 5.000000e-01
  %1336 = fmul double %1334, %1334
  %1337 = fmul double %1335, %1335
  %1338 = fadd double %1337, %1336
  %1339 = fcmp ogt double %1338, 1.000000e+00
  br i1 %1339, label %1340, label %1343

1340:                                             ; preds = %1317
  %1341 = fdiv double %1334, %1338
  %1342 = fdiv double %1335, %1338
  br label %1343

1343:                                             ; preds = %1340, %1317
  %1344 = phi double [ %1341, %1340 ], [ %1334, %1317 ]
  %1345 = phi double [ %1342, %1340 ], [ %1335, %1317 ]
  %1346 = extractelement <2 x double> %1290, i32 0
  %1347 = fmul double %1346, %1344
  %1348 = fmul double %1280, %1345
  %1349 = fadd double %1347, %1348
  %1350 = fmul double %1349, 5.000000e-01
  %1351 = fadd double %1269, %1350
  store double %1351, double* %1274, align 8
  %1352 = fadd double %1265, %1344
  store double %1352, double* %1018, align 8
  %1353 = fadd double %1264, %1345
  store double %1353, double* %1022, align 8
  br label %1354

1354:                                             ; preds = %1343, %1316
  %1355 = add nuw nsw i64 %887, 1
  %1356 = icmp eq i64 %1355, %883
  br i1 %1356, label %1357, label %886

1357:                                             ; preds = %1354, %1357
  %1358 = phi i64 [ %1375, %1357 ], [ 0, %1354 ]
  %1359 = phi double [ %1374, %1357 ], [ 0.000000e+00, %1354 ]
  %1360 = phi i32 [ %1373, %1357 ], [ %889, %1354 ]
  %1361 = getelementptr inbounds [10 x double], [10 x double]* %13, i64 0, i64 %1358
  %1362 = load double, double* %1361, align 8
  %1363 = getelementptr inbounds [10 x double], [10 x double]* %14, i64 0, i64 %1358
  %1364 = load double, double* %1363, align 8
  %1365 = getelementptr inbounds [10 x double], [10 x double]* %15, i64 0, i64 %1358
  %1366 = load double, double* %1365, align 8
  %1367 = fadd double %1364, %1366
  %1368 = call double @log(double %1367) #4
  %1369 = call double @pow(double 8.500000e-01, double %1368) #4
  %1370 = fmul double %1362, %1369
  %1371 = fcmp ogt double %1370, %1359
  %1372 = trunc i64 %1358 to i32
  %1373 = select i1 %1371, i32 %1372, i32 %1360
  %1374 = select i1 %1371, double %1370, double %1359
  %1375 = add nuw nsw i64 %1358, 1
  %1376 = icmp eq i64 %1375, %883
  br i1 %1376, label %1377, label %1357

1377:                                             ; preds = %1357
  %1378 = sext i32 %1373 to i64
  %1379 = getelementptr inbounds [10 x double], [10 x double]* %14, i64 0, i64 %1378
  %1380 = load double, double* %1379, align 8
  %1381 = fmul double %1380, 2.000000e+00
  store double %1381, double* %1379, align 8
  %1382 = getelementptr inbounds [10 x double], [10 x double]* %15, i64 0, i64 %1378
  %1383 = load double, double* %1382, align 8
  %1384 = fmul double %1383, 2.000000e+00
  store double %1384, double* %1382, align 8
  %1385 = fcmp olt double %1381, 2.000000e+01
  %1386 = bitcast double %1381 to i64
  %1387 = bitcast double %1384 to i64
  br i1 %1385, label %1388, label %1389

1388:                                             ; preds = %1377
  store double 2.000000e+01, double* %1379, align 8
  br label %1389

1389:                                             ; preds = %1388, %1377
  %1390 = phi i64 [ 4626322717216342016, %1388 ], [ %1386, %1377 ]
  %1391 = phi double [ 2.000000e+01, %1388 ], [ %1381, %1377 ]
  %1392 = fcmp olt double %1384, 2.000000e+01
  br i1 %1392, label %1393, label %1394

1393:                                             ; preds = %1389
  store double 2.000000e+01, double* %1382, align 8
  br label %1394

1394:                                             ; preds = %1393, %1389
  %1395 = phi i64 [ 4626322717216342016, %1393 ], [ %1387, %1389 ]
  %1396 = phi double [ 2.000000e+01, %1393 ], [ %1384, %1389 ]
  %1397 = fcmp ogt double %1391, 1.400000e+02
  br i1 %1397, label %1398, label %1399

1398:                                             ; preds = %1394
  store double 1.400000e+02, double* %1379, align 8
  br label %1399

1399:                                             ; preds = %1398, %1394
  %1400 = phi i64 [ 4639129828656676864, %1398 ], [ %1390, %1394 ]
  %1401 = fcmp ogt double %1396, 1.400000e+02
  br i1 %1401, label %1402, label %1432

1402:                                             ; preds = %1399
  store double 1.400000e+02, double* %1382, align 8
  br label %1432

1403:                                             ; preds = %879
  %1404 = sdiv i32 %763, 69
  %1405 = mul i32 %1404, -69
  %1406 = add i32 %763, 6
  %1407 = add i32 %1406, %1405
  %1408 = sitofp i32 %1407 to double
  %1409 = getelementptr inbounds [10 x double], [10 x double]* %14, i64 0, i64 0
  store double %1408, double* %1409, align 16
  %1410 = fadd double %1408, 1.100000e+01
  %1411 = sitofp i32 %1404 to double
  %1412 = fsub double %1410, %1411
  %1413 = getelementptr inbounds [10 x double], [10 x double]* %15, i64 0, i64 0
  store double %1412, double* %1413, align 16
  %1414 = icmp slt i32 %1407, 20
  %1415 = bitcast double %1408 to i64
  %1416 = bitcast double %1412 to i64
  br i1 %1414, label %1417, label %1418

1417:                                             ; preds = %1403
  store double 2.000000e+01, double* %1409, align 16
  br label %1418

1418:                                             ; preds = %1417, %1403
  %1419 = phi i64 [ 4626322717216342016, %1417 ], [ %1415, %1403 ]
  %1420 = phi double [ 2.000000e+01, %1417 ], [ %1408, %1403 ]
  %1421 = fcmp olt double %1412, 2.000000e+01
  br i1 %1421, label %1422, label %1423

1422:                                             ; preds = %1418
  store double 2.000000e+01, double* %1413, align 16
  br label %1423

1423:                                             ; preds = %1422, %1418
  %1424 = phi i64 [ 4626322717216342016, %1422 ], [ %1416, %1418 ]
  %1425 = phi double [ 2.000000e+01, %1422 ], [ %1412, %1418 ]
  %1426 = fcmp ogt double %1420, 1.400000e+02
  br i1 %1426, label %1427, label %1428

1427:                                             ; preds = %1423
  store double 1.400000e+02, double* %1409, align 16
  br label %1428

1428:                                             ; preds = %1427, %1423
  %1429 = phi i64 [ 4639129828656676864, %1427 ], [ %1419, %1423 ]
  %1430 = fcmp ogt double %1425, 1.400000e+02
  br i1 %1430, label %1431, label %1432

1431:                                             ; preds = %1428
  store double 1.400000e+02, double* %1413, align 16
  br label %1432

1432:                                             ; preds = %1428, %1431, %1399, %1402
  %1433 = phi i64 [ %1400, %1402 ], [ %1400, %1399 ], [ %1429, %1431 ], [ %1429, %1428 ]
  %1434 = phi i64 [ 4639129828656676864, %1402 ], [ %1395, %1399 ], [ 4639129828656676864, %1431 ], [ %1424, %1428 ]
  %1435 = bitcast double* %3 to i64*
  store i64 %1433, i64* %1435, align 8
  %1436 = getelementptr inbounds double, double* %3, i64 1
  %1437 = bitcast double* %1436 to i64*
  store i64 %1433, i64* %1437, align 8
  %1438 = getelementptr inbounds double, double* %3, i64 2
  %1439 = bitcast double* %1438 to i64*
  store i64 %1434, i64* %1439, align 8
  %1440 = getelementptr inbounds double, double* %3, i64 3
  %1441 = bitcast double* %1440 to i64*
  store i64 %1434, i64* %1441, align 8
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %75) #4
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %74) #4
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %73) #4
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %72) #4
  call void @llvm.lifetime.end.p0i8(i64 200, i8* nonnull %71) #4
  call void @llvm.lifetime.end.p0i8(i64 13880, i8* nonnull %70) #4
  call void @llvm.lifetime.end.p0i8(i64 520, i8* nonnull %69) #4
  call void @llvm.lifetime.end.p0i8(i64 520, i8* nonnull %68) #4
  call void @llvm.lifetime.end.p0i8(i64 1536, i8* nonnull %67) #4
  br label %1442

1442:                                             ; preds = %1442, %1432
  %1443 = phi i64 [ 0, %1432 ], [ %1474, %1442 ]
  %1444 = phi double [ 0.000000e+00, %1432 ], [ %1473, %1442 ]
  %1445 = getelementptr inbounds [264 x double], [264 x double]* %18, i64 0, i64 %1443
  %1446 = load double, double* %1445, align 16
  %1447 = fmul double %1446, %1446
  %1448 = fadd double %1444, %1447
  %1449 = or i64 %1443, 1
  %1450 = getelementptr inbounds [264 x double], [264 x double]* %18, i64 0, i64 %1449
  %1451 = load double, double* %1450, align 8
  %1452 = fmul double %1451, %1451
  %1453 = fadd double %1448, %1452
  %1454 = add nuw nsw i64 %1443, 2
  %1455 = getelementptr inbounds [264 x double], [264 x double]* %18, i64 0, i64 %1454
  %1456 = load double, double* %1455, align 16
  %1457 = fmul double %1456, %1456
  %1458 = fadd double %1453, %1457
  %1459 = add nuw nsw i64 %1443, 3
  %1460 = getelementptr inbounds [264 x double], [264 x double]* %18, i64 0, i64 %1459
  %1461 = load double, double* %1460, align 8
  %1462 = fmul double %1461, %1461
  %1463 = fadd double %1458, %1462
  %1464 = add nuw nsw i64 %1443, 4
  %1465 = getelementptr inbounds [264 x double], [264 x double]* %18, i64 0, i64 %1464
  %1466 = load double, double* %1465, align 16
  %1467 = fmul double %1466, %1466
  %1468 = fadd double %1463, %1467
  %1469 = add nuw nsw i64 %1443, 5
  %1470 = getelementptr inbounds [264 x double], [264 x double]* %18, i64 0, i64 %1469
  %1471 = load double, double* %1470, align 8
  %1472 = fmul double %1471, %1471
  %1473 = fadd double %1468, %1472
  %1474 = add nuw nsw i64 %1443, 6
  %1475 = icmp eq i64 %1474, 264
  br i1 %1475, label %1476, label %1442

1476:                                             ; preds = %1442
  %1477 = getelementptr inbounds double, double* %4, i64 1
  %1478 = bitcast double* %4 to <2 x double>*
  store <2 x double> <double 2.700000e-01, double 2.700000e-01>, <2 x double>* %1478, align 8
  %1479 = getelementptr inbounds double, double* %4, i64 2
  %1480 = getelementptr inbounds double, double* %4, i64 3
  %1481 = bitcast double* %1479 to <2 x double>*
  store <2 x double> <double 2.700000e-01, double 2.700000e-01>, <2 x double>* %1481, align 8
  %1482 = fdiv double 1.000000e+00, %1473
  %1483 = getelementptr inbounds [264 x double], [264 x double]* %20, i64 0, i64 0
  %1484 = getelementptr inbounds [4 x [264 x double]], [4 x [264 x double]]* %21, i64 0, i64 0
  %1485 = getelementptr inbounds [4 x [4 x double]], [4 x [4 x double]]* %22, i64 0, i64 3, i64 3
  %1486 = getelementptr inbounds [4 x [4 x double]], [4 x [4 x double]]* %22, i64 0, i64 1, i64 0
  %1487 = getelementptr inbounds [4 x [4 x double]], [4 x [4 x double]]* %22, i64 0, i64 0, i64 0
  %1488 = getelementptr inbounds [4 x [4 x double]], [4 x [4 x double]]* %22, i64 0, i64 0, i64 1
  %1489 = getelementptr inbounds [4 x [4 x double]], [4 x [4 x double]]* %22, i64 0, i64 2, i64 0
  %1490 = getelementptr inbounds [4 x [4 x double]], [4 x [4 x double]]* %22, i64 0, i64 3, i64 0
  %1491 = getelementptr inbounds [4 x [4 x double]], [4 x [4 x double]]* %22, i64 0, i64 0, i64 3
  %1492 = getelementptr inbounds [4 x [4 x double]], [4 x [4 x double]]* %22, i64 0, i64 1, i64 1
  %1493 = getelementptr inbounds [4 x [4 x double]], [4 x [4 x double]]* %22, i64 0, i64 2, i64 1
  %1494 = getelementptr inbounds [4 x [4 x double]], [4 x [4 x double]]* %22, i64 0, i64 1, i64 2
  %1495 = getelementptr inbounds [4 x [4 x double]], [4 x [4 x double]]* %22, i64 0, i64 3, i64 1
  %1496 = getelementptr inbounds [4 x [4 x double]], [4 x [4 x double]]* %22, i64 0, i64 2, i64 2
  %1497 = getelementptr inbounds [4 x [4 x double]], [4 x [4 x double]]* %22, i64 0, i64 3, i64 2
  %1498 = getelementptr inbounds [4 x [4 x double]], [4 x [4 x double]]* %22, i64 0, i64 2, i64 3
  %1499 = getelementptr inbounds [4 x [4 x double]], [4 x [4 x double]]* %22, i64 0, i64 0, i64 0
  %1500 = fmul double %66, 0xBFD3BFA2608C6F47
  %1501 = fmul double %66, 0xBFAD41D41D41D5B9
  %1502 = fmul double %66, 0x3FAA54D880BB3E19
  %1503 = fmul double %66, 0x3F918DE5AB27827C
  %1504 = getelementptr inbounds [4 x [4 x double]], [4 x [4 x double]]* %22, i64 0, i64 0, i64 0
  %1505 = getelementptr inbounds [4 x [4 x double]], [4 x [4 x double]]* %22, i64 0, i64 1, i64 0
  %1506 = getelementptr inbounds [4 x [4 x double]], [4 x [4 x double]]* %22, i64 0, i64 1, i64 1
  %1507 = getelementptr inbounds [4 x [4 x double]], [4 x [4 x double]]* %22, i64 0, i64 2, i64 0
  %1508 = getelementptr inbounds [4 x [4 x double]], [4 x [4 x double]]* %22, i64 0, i64 2, i64 1
  %1509 = getelementptr inbounds [4 x [4 x double]], [4 x [4 x double]]* %22, i64 0, i64 2, i64 2
  %1510 = getelementptr inbounds [4 x [4 x double]], [4 x [4 x double]]* %22, i64 0, i64 3, i64 0
  %1511 = getelementptr inbounds [4 x [4 x double]], [4 x [4 x double]]* %22, i64 0, i64 3, i64 1
  %1512 = getelementptr inbounds [4 x [4 x double]], [4 x [4 x double]]* %22, i64 0, i64 3, i64 2
  %1513 = getelementptr inbounds [4 x [4 x double]], [4 x [4 x double]]* %22, i64 0, i64 3, i64 3
  %1514 = getelementptr inbounds [4 x [4 x double]], [4 x [4 x double]]* %22, i64 0, i64 1, i64 0
  %1515 = bitcast double* %1514 to <2 x double>*
  %1516 = bitcast double* %1514 to <2 x double>*
  %1517 = getelementptr inbounds [4 x [4 x double]], [4 x [4 x double]]* %22, i64 0, i64 2, i64 0
  %1518 = getelementptr inbounds [4 x [4 x double]], [4 x [4 x double]]* %22, i64 0, i64 2, i64 1
  %1519 = getelementptr inbounds [4 x [4 x double]], [4 x [4 x double]]* %22, i64 0, i64 2, i64 2
  %1520 = getelementptr inbounds [4 x [4 x double]], [4 x [4 x double]]* %22, i64 0, i64 3, i64 0
  %1521 = bitcast double* %1520 to <2 x double>*
  %1522 = bitcast double* %1520 to <2 x double>*
  %1523 = getelementptr inbounds [4 x [4 x double]], [4 x [4 x double]]* %22, i64 0, i64 3, i64 2
  %1524 = bitcast double* %1523 to <2 x double>*
  %1525 = bitcast double* %1523 to <2 x double>*
  %1526 = bitcast double* %1488 to <2 x double>*
  %1527 = bitcast double* %1494 to <2 x double>*
  br label %1528

1528:                                             ; preds = %1844, %1476
  %1529 = phi i32 [ 0, %1476 ], [ %1845, %1844 ]
  call void @WebRtcIsac_PitchfilterPre_gains(double* nonnull %165, double* nonnull %1483, [264 x double]* nonnull %1484, %struct.PitchFiltstr* %166, double* %3, double* %4) #4
  br label %1530

1530:                                             ; preds = %1530, %1528
  %1531 = phi i64 [ 0, %1528 ], [ %1560, %1530 ]
  %1532 = phi double [ 0.000000e+00, %1528 ], [ %1559, %1530 ]
  %1533 = getelementptr inbounds [264 x double], [264 x double]* %20, i64 0, i64 %1531
  %1534 = load double, double* %1533, align 16
  %1535 = getelementptr inbounds [4 x [264 x double]], [4 x [264 x double]]* %21, i64 0, i64 0, i64 %1531
  %1536 = load double, double* %1535, align 16
  %1537 = fmul double %1534, %1536
  %1538 = fadd double %1532, %1537
  %1539 = or i64 %1531, 1
  %1540 = getelementptr inbounds [264 x double], [264 x double]* %20, i64 0, i64 %1539
  %1541 = load double, double* %1540, align 8
  %1542 = getelementptr inbounds [4 x [264 x double]], [4 x [264 x double]]* %21, i64 0, i64 0, i64 %1539
  %1543 = load double, double* %1542, align 8
  %1544 = fmul double %1541, %1543
  %1545 = fadd double %1538, %1544
  %1546 = or i64 %1531, 2
  %1547 = getelementptr inbounds [264 x double], [264 x double]* %20, i64 0, i64 %1546
  %1548 = load double, double* %1547, align 16
  %1549 = getelementptr inbounds [4 x [264 x double]], [4 x [264 x double]]* %21, i64 0, i64 0, i64 %1546
  %1550 = load double, double* %1549, align 16
  %1551 = fmul double %1548, %1550
  %1552 = fadd double %1545, %1551
  %1553 = or i64 %1531, 3
  %1554 = getelementptr inbounds [264 x double], [264 x double]* %20, i64 0, i64 %1553
  %1555 = load double, double* %1554, align 8
  %1556 = getelementptr inbounds [4 x [264 x double]], [4 x [264 x double]]* %21, i64 0, i64 0, i64 %1553
  %1557 = load double, double* %1556, align 8
  %1558 = fmul double %1555, %1557
  %1559 = fadd double %1552, %1558
  %1560 = add nuw nsw i64 %1531, 4
  %1561 = icmp eq i64 %1560, 264
  br i1 %1561, label %1562, label %1530

1562:                                             ; preds = %1530
  %1563 = fmul double %1482, %1559
  br label %1622

1564:                                             ; preds = %1690
  %1565 = fmul double %1482, %1719
  br label %1566

1566:                                             ; preds = %1566, %1564
  %1567 = phi i64 [ 0, %1564 ], [ %1598, %1566 ]
  %1568 = phi double [ 0.000000e+00, %1564 ], [ %1597, %1566 ]
  %1569 = getelementptr inbounds [4 x [264 x double]], [4 x [264 x double]]* %21, i64 0, i64 0, i64 %1567
  %1570 = load double, double* %1569, align 16
  %1571 = fmul double %1570, %1570
  %1572 = fadd double %1568, %1571
  %1573 = or i64 %1567, 1
  %1574 = getelementptr inbounds [4 x [264 x double]], [4 x [264 x double]]* %21, i64 0, i64 0, i64 %1573
  %1575 = load double, double* %1574, align 8
  %1576 = fmul double %1575, %1575
  %1577 = fadd double %1572, %1576
  %1578 = add nuw nsw i64 %1567, 2
  %1579 = getelementptr inbounds [4 x [264 x double]], [4 x [264 x double]]* %21, i64 0, i64 0, i64 %1578
  %1580 = load double, double* %1579, align 16
  %1581 = fmul double %1580, %1580
  %1582 = fadd double %1577, %1581
  %1583 = add nuw nsw i64 %1567, 3
  %1584 = getelementptr inbounds [4 x [264 x double]], [4 x [264 x double]]* %21, i64 0, i64 0, i64 %1583
  %1585 = load double, double* %1584, align 8
  %1586 = fmul double %1585, %1585
  %1587 = fadd double %1582, %1586
  %1588 = add nuw nsw i64 %1567, 4
  %1589 = getelementptr inbounds [4 x [264 x double]], [4 x [264 x double]]* %21, i64 0, i64 0, i64 %1588
  %1590 = load double, double* %1589, align 16
  %1591 = fmul double %1590, %1590
  %1592 = fadd double %1587, %1591
  %1593 = add nuw nsw i64 %1567, 5
  %1594 = getelementptr inbounds [4 x [264 x double]], [4 x [264 x double]]* %21, i64 0, i64 0, i64 %1593
  %1595 = load double, double* %1594, align 8
  %1596 = fmul double %1595, %1595
  %1597 = fadd double %1592, %1596
  %1598 = add nuw nsw i64 %1567, 6
  %1599 = icmp eq i64 %1598, 264
  br i1 %1599, label %1600, label %1566

1600:                                             ; preds = %1566
  %1601 = fmul double %1482, %1597
  store double %1601, double* %1499, align 16
  br label %1722

1602:                                             ; preds = %2025
  %1603 = fcmp olt double %2240, 0.000000e+00
  br i1 %1603, label %1604, label %1606

1604:                                             ; preds = %1602, %2025
  %1605 = phi double [ 4.500000e-01, %2025 ], [ 0.000000e+00, %1602 ]
  store double %1605, double* %4, align 8
  br label %1606

1606:                                             ; preds = %1604, %1602
  %1607 = load double, double* %1477, align 8
  %1608 = fadd double %2229, %1607
  store double %1608, double* %1477, align 8
  %1609 = fcmp ogt double %1608, 4.500000e-01
  br i1 %1609, label %1826, label %1824

1610:                                             ; preds = %1844
  call void @WebRtcIsac_PitchfilterPre(double* nonnull %165, double* %1, %struct.PitchFiltstr* %166, double* %3, double* %4) #4
  %1611 = getelementptr inbounds [264 x double], [264 x double]* %19, i64 0, i64 0
  %1612 = getelementptr inbounds %struct.PitchAnalysisStruct, %struct.PitchAnalysisStruct* %2, i64 0, i32 4
  %1613 = bitcast [24 x double]* %1612 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %26, i8* align 8 %1613, i64 192, i1 false)
  %1614 = getelementptr inbounds [264 x double], [264 x double]* %19, i64 0, i64 24
  %1615 = bitcast double* %1614 to i8*
  %1616 = bitcast double* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %1615, i8* align 8 %1616, i64 1920, i1 false)
  %1617 = getelementptr inbounds %struct.PitchAnalysisStruct, %struct.PitchAnalysisStruct* %2, i64 0, i32 6
  call void @WebRtcIsac_PitchfilterPre_la(double* nonnull %1611, double* %1, %struct.PitchFiltstr* %1617, double* %3, double* %4) #4
  %1618 = getelementptr %struct.PitchAnalysisStruct, %struct.PitchAnalysisStruct* %2, i64 0, i32 4, i64 0
  %1619 = bitcast double* %1618 to i8*
  %1620 = getelementptr inbounds [264 x double], [264 x double]* %19, i64 0, i64 240
  %1621 = bitcast double* %1620 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1619, i8* align 16 %1621, i64 192, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %29) #4
  call void @llvm.lifetime.end.p0i8(i64 8448, i8* nonnull %28) #4
  call void @llvm.lifetime.end.p0i8(i64 2112, i8* nonnull %27) #4
  call void @llvm.lifetime.end.p0i8(i64 2112, i8* nonnull %26) #4
  call void @llvm.lifetime.end.p0i8(i64 2112, i8* nonnull %25) #4
  call void @llvm.lifetime.end.p0i8(i64 1920, i8* nonnull %24) #4
  call void @llvm.lifetime.end.p0i8(i64 1920, i8* nonnull %23) #4
  ret void

1622:                                             ; preds = %1622, %1562
  %1623 = phi i64 [ 0, %1562 ], [ %1652, %1622 ]
  %1624 = phi double [ 0.000000e+00, %1562 ], [ %1651, %1622 ]
  %1625 = getelementptr inbounds [264 x double], [264 x double]* %20, i64 0, i64 %1623
  %1626 = load double, double* %1625, align 16
  %1627 = getelementptr inbounds [4 x [264 x double]], [4 x [264 x double]]* %21, i64 0, i64 1, i64 %1623
  %1628 = load double, double* %1627, align 16
  %1629 = fmul double %1626, %1628
  %1630 = fadd double %1624, %1629
  %1631 = or i64 %1623, 1
  %1632 = getelementptr inbounds [264 x double], [264 x double]* %20, i64 0, i64 %1631
  %1633 = load double, double* %1632, align 8
  %1634 = getelementptr inbounds [4 x [264 x double]], [4 x [264 x double]]* %21, i64 0, i64 1, i64 %1631
  %1635 = load double, double* %1634, align 8
  %1636 = fmul double %1633, %1635
  %1637 = fadd double %1630, %1636
  %1638 = or i64 %1623, 2
  %1639 = getelementptr inbounds [264 x double], [264 x double]* %20, i64 0, i64 %1638
  %1640 = load double, double* %1639, align 16
  %1641 = getelementptr inbounds [4 x [264 x double]], [4 x [264 x double]]* %21, i64 0, i64 1, i64 %1638
  %1642 = load double, double* %1641, align 16
  %1643 = fmul double %1640, %1642
  %1644 = fadd double %1637, %1643
  %1645 = or i64 %1623, 3
  %1646 = getelementptr inbounds [264 x double], [264 x double]* %20, i64 0, i64 %1645
  %1647 = load double, double* %1646, align 8
  %1648 = getelementptr inbounds [4 x [264 x double]], [4 x [264 x double]]* %21, i64 0, i64 1, i64 %1645
  %1649 = load double, double* %1648, align 8
  %1650 = fmul double %1647, %1649
  %1651 = fadd double %1644, %1650
  %1652 = add nuw nsw i64 %1623, 4
  %1653 = icmp eq i64 %1652, 264
  br i1 %1653, label %1654, label %1622

1654:                                             ; preds = %1622
  %1655 = fmul double %1482, %1651
  br label %1656

1656:                                             ; preds = %1656, %1654
  %1657 = phi i64 [ 0, %1654 ], [ %1686, %1656 ]
  %1658 = phi double [ 0.000000e+00, %1654 ], [ %1685, %1656 ]
  %1659 = getelementptr inbounds [264 x double], [264 x double]* %20, i64 0, i64 %1657
  %1660 = load double, double* %1659, align 16
  %1661 = getelementptr inbounds [4 x [264 x double]], [4 x [264 x double]]* %21, i64 0, i64 2, i64 %1657
  %1662 = load double, double* %1661, align 16
  %1663 = fmul double %1660, %1662
  %1664 = fadd double %1658, %1663
  %1665 = or i64 %1657, 1
  %1666 = getelementptr inbounds [264 x double], [264 x double]* %20, i64 0, i64 %1665
  %1667 = load double, double* %1666, align 8
  %1668 = getelementptr inbounds [4 x [264 x double]], [4 x [264 x double]]* %21, i64 0, i64 2, i64 %1665
  %1669 = load double, double* %1668, align 8
  %1670 = fmul double %1667, %1669
  %1671 = fadd double %1664, %1670
  %1672 = or i64 %1657, 2
  %1673 = getelementptr inbounds [264 x double], [264 x double]* %20, i64 0, i64 %1672
  %1674 = load double, double* %1673, align 16
  %1675 = getelementptr inbounds [4 x [264 x double]], [4 x [264 x double]]* %21, i64 0, i64 2, i64 %1672
  %1676 = load double, double* %1675, align 16
  %1677 = fmul double %1674, %1676
  %1678 = fadd double %1671, %1677
  %1679 = or i64 %1657, 3
  %1680 = getelementptr inbounds [264 x double], [264 x double]* %20, i64 0, i64 %1679
  %1681 = load double, double* %1680, align 8
  %1682 = getelementptr inbounds [4 x [264 x double]], [4 x [264 x double]]* %21, i64 0, i64 2, i64 %1679
  %1683 = load double, double* %1682, align 8
  %1684 = fmul double %1681, %1683
  %1685 = fadd double %1678, %1684
  %1686 = add nuw nsw i64 %1657, 4
  %1687 = icmp eq i64 %1686, 264
  br i1 %1687, label %1688, label %1656

1688:                                             ; preds = %1656
  %1689 = fmul double %1482, %1685
  br label %1690

1690:                                             ; preds = %1690, %1688
  %1691 = phi i64 [ 0, %1688 ], [ %1720, %1690 ]
  %1692 = phi double [ 0.000000e+00, %1688 ], [ %1719, %1690 ]
  %1693 = getelementptr inbounds [264 x double], [264 x double]* %20, i64 0, i64 %1691
  %1694 = load double, double* %1693, align 16
  %1695 = getelementptr inbounds [4 x [264 x double]], [4 x [264 x double]]* %21, i64 0, i64 3, i64 %1691
  %1696 = load double, double* %1695, align 16
  %1697 = fmul double %1694, %1696
  %1698 = fadd double %1692, %1697
  %1699 = or i64 %1691, 1
  %1700 = getelementptr inbounds [264 x double], [264 x double]* %20, i64 0, i64 %1699
  %1701 = load double, double* %1700, align 8
  %1702 = getelementptr inbounds [4 x [264 x double]], [4 x [264 x double]]* %21, i64 0, i64 3, i64 %1699
  %1703 = load double, double* %1702, align 8
  %1704 = fmul double %1701, %1703
  %1705 = fadd double %1698, %1704
  %1706 = or i64 %1691, 2
  %1707 = getelementptr inbounds [264 x double], [264 x double]* %20, i64 0, i64 %1706
  %1708 = load double, double* %1707, align 16
  %1709 = getelementptr inbounds [4 x [264 x double]], [4 x [264 x double]]* %21, i64 0, i64 3, i64 %1706
  %1710 = load double, double* %1709, align 16
  %1711 = fmul double %1708, %1710
  %1712 = fadd double %1705, %1711
  %1713 = or i64 %1691, 3
  %1714 = getelementptr inbounds [264 x double], [264 x double]* %20, i64 0, i64 %1713
  %1715 = load double, double* %1714, align 8
  %1716 = getelementptr inbounds [4 x [264 x double]], [4 x [264 x double]]* %21, i64 0, i64 3, i64 %1713
  %1717 = load double, double* %1716, align 8
  %1718 = fmul double %1715, %1717
  %1719 = fadd double %1712, %1718
  %1720 = add nuw nsw i64 %1691, 4
  %1721 = icmp eq i64 %1720, 264
  br i1 %1721, label %1564, label %1690

1722:                                             ; preds = %1722, %1600
  %1723 = phi i64 [ 0, %1600 ], [ %1752, %1722 ]
  %1724 = phi double [ 0.000000e+00, %1600 ], [ %1751, %1722 ]
  %1725 = getelementptr inbounds [4 x [264 x double]], [4 x [264 x double]]* %21, i64 0, i64 0, i64 %1723
  %1726 = load double, double* %1725, align 16
  %1727 = getelementptr inbounds [4 x [264 x double]], [4 x [264 x double]]* %21, i64 0, i64 1, i64 %1723
  %1728 = load double, double* %1727, align 16
  %1729 = fmul double %1726, %1728
  %1730 = fadd double %1724, %1729
  %1731 = or i64 %1723, 1
  %1732 = getelementptr inbounds [4 x [264 x double]], [4 x [264 x double]]* %21, i64 0, i64 0, i64 %1731
  %1733 = load double, double* %1732, align 8
  %1734 = getelementptr inbounds [4 x [264 x double]], [4 x [264 x double]]* %21, i64 0, i64 1, i64 %1731
  %1735 = load double, double* %1734, align 8
  %1736 = fmul double %1733, %1735
  %1737 = fadd double %1730, %1736
  %1738 = or i64 %1723, 2
  %1739 = getelementptr inbounds [4 x [264 x double]], [4 x [264 x double]]* %21, i64 0, i64 0, i64 %1738
  %1740 = load double, double* %1739, align 16
  %1741 = getelementptr inbounds [4 x [264 x double]], [4 x [264 x double]]* %21, i64 0, i64 1, i64 %1738
  %1742 = load double, double* %1741, align 16
  %1743 = fmul double %1740, %1742
  %1744 = fadd double %1737, %1743
  %1745 = or i64 %1723, 3
  %1746 = getelementptr inbounds [4 x [264 x double]], [4 x [264 x double]]* %21, i64 0, i64 0, i64 %1745
  %1747 = load double, double* %1746, align 8
  %1748 = getelementptr inbounds [4 x [264 x double]], [4 x [264 x double]]* %21, i64 0, i64 1, i64 %1745
  %1749 = load double, double* %1748, align 8
  %1750 = fmul double %1747, %1749
  %1751 = fadd double %1744, %1750
  %1752 = add nuw nsw i64 %1723, 4
  %1753 = icmp eq i64 %1752, 264
  br i1 %1753, label %1754, label %1722

1754:                                             ; preds = %1722
  %1755 = fmul double %1482, %1751
  store double %1755, double* %1505, align 16
  br label %1847

1756:                                             ; preds = %1756, %1871
  %1757 = phi i64 [ 0, %1871 ], [ %1786, %1756 ]
  %1758 = phi double [ 0.000000e+00, %1871 ], [ %1785, %1756 ]
  %1759 = getelementptr inbounds [4 x [264 x double]], [4 x [264 x double]]* %21, i64 0, i64 0, i64 %1757
  %1760 = load double, double* %1759, align 16
  %1761 = getelementptr inbounds [4 x [264 x double]], [4 x [264 x double]]* %21, i64 0, i64 2, i64 %1757
  %1762 = load double, double* %1761, align 16
  %1763 = fmul double %1760, %1762
  %1764 = fadd double %1758, %1763
  %1765 = or i64 %1757, 1
  %1766 = getelementptr inbounds [4 x [264 x double]], [4 x [264 x double]]* %21, i64 0, i64 0, i64 %1765
  %1767 = load double, double* %1766, align 8
  %1768 = getelementptr inbounds [4 x [264 x double]], [4 x [264 x double]]* %21, i64 0, i64 2, i64 %1765
  %1769 = load double, double* %1768, align 8
  %1770 = fmul double %1767, %1769
  %1771 = fadd double %1764, %1770
  %1772 = or i64 %1757, 2
  %1773 = getelementptr inbounds [4 x [264 x double]], [4 x [264 x double]]* %21, i64 0, i64 0, i64 %1772
  %1774 = load double, double* %1773, align 16
  %1775 = getelementptr inbounds [4 x [264 x double]], [4 x [264 x double]]* %21, i64 0, i64 2, i64 %1772
  %1776 = load double, double* %1775, align 16
  %1777 = fmul double %1774, %1776
  %1778 = fadd double %1771, %1777
  %1779 = or i64 %1757, 3
  %1780 = getelementptr inbounds [4 x [264 x double]], [4 x [264 x double]]* %21, i64 0, i64 0, i64 %1779
  %1781 = load double, double* %1780, align 8
  %1782 = getelementptr inbounds [4 x [264 x double]], [4 x [264 x double]]* %21, i64 0, i64 2, i64 %1779
  %1783 = load double, double* %1782, align 8
  %1784 = fmul double %1781, %1783
  %1785 = fadd double %1778, %1784
  %1786 = add nuw nsw i64 %1757, 4
  %1787 = icmp eq i64 %1786, 264
  br i1 %1787, label %1788, label %1756

1788:                                             ; preds = %1756
  %1789 = fmul double %1482, %1785
  store double %1789, double* %1507, align 16
  br label %1873

1790:                                             ; preds = %1790, %1931
  %1791 = phi i64 [ 0, %1931 ], [ %1820, %1790 ]
  %1792 = phi double [ 0.000000e+00, %1931 ], [ %1819, %1790 ]
  %1793 = getelementptr inbounds [4 x [264 x double]], [4 x [264 x double]]* %21, i64 0, i64 0, i64 %1791
  %1794 = load double, double* %1793, align 16
  %1795 = getelementptr inbounds [4 x [264 x double]], [4 x [264 x double]]* %21, i64 0, i64 3, i64 %1791
  %1796 = load double, double* %1795, align 16
  %1797 = fmul double %1794, %1796
  %1798 = fadd double %1792, %1797
  %1799 = or i64 %1791, 1
  %1800 = getelementptr inbounds [4 x [264 x double]], [4 x [264 x double]]* %21, i64 0, i64 0, i64 %1799
  %1801 = load double, double* %1800, align 8
  %1802 = getelementptr inbounds [4 x [264 x double]], [4 x [264 x double]]* %21, i64 0, i64 3, i64 %1799
  %1803 = load double, double* %1802, align 8
  %1804 = fmul double %1801, %1803
  %1805 = fadd double %1798, %1804
  %1806 = or i64 %1791, 2
  %1807 = getelementptr inbounds [4 x [264 x double]], [4 x [264 x double]]* %21, i64 0, i64 0, i64 %1806
  %1808 = load double, double* %1807, align 16
  %1809 = getelementptr inbounds [4 x [264 x double]], [4 x [264 x double]]* %21, i64 0, i64 3, i64 %1806
  %1810 = load double, double* %1809, align 16
  %1811 = fmul double %1808, %1810
  %1812 = fadd double %1805, %1811
  %1813 = or i64 %1791, 3
  %1814 = getelementptr inbounds [4 x [264 x double]], [4 x [264 x double]]* %21, i64 0, i64 0, i64 %1813
  %1815 = load double, double* %1814, align 8
  %1816 = getelementptr inbounds [4 x [264 x double]], [4 x [264 x double]]* %21, i64 0, i64 3, i64 %1813
  %1817 = load double, double* %1816, align 8
  %1818 = fmul double %1815, %1817
  %1819 = fadd double %1812, %1818
  %1820 = add nuw nsw i64 %1791, 4
  %1821 = icmp eq i64 %1820, 264
  br i1 %1821, label %1822, label %1790

1822:                                             ; preds = %1790
  %1823 = fmul double %1482, %1819
  store double %1823, double* %1510, align 16
  br label %1933

1824:                                             ; preds = %1606
  %1825 = fcmp olt double %1608, 0.000000e+00
  br i1 %1825, label %1826, label %1828

1826:                                             ; preds = %1606, %1824
  %1827 = phi double [ 0.000000e+00, %1824 ], [ 4.500000e-01, %1606 ]
  store double %1827, double* %1477, align 8
  br label %1828

1828:                                             ; preds = %1826, %1824
  %1829 = load double, double* %1479, align 8
  %1830 = fadd double %2222, %1829
  store double %1830, double* %1479, align 8
  %1831 = fcmp ogt double %1830, 4.500000e-01
  br i1 %1831, label %1834, label %1832

1832:                                             ; preds = %1828
  %1833 = fcmp olt double %1830, 0.000000e+00
  br i1 %1833, label %1834, label %1836

1834:                                             ; preds = %1828, %1832
  %1835 = phi double [ 0.000000e+00, %1832 ], [ 4.500000e-01, %1828 ]
  store double %1835, double* %1479, align 8
  br label %1836

1836:                                             ; preds = %1834, %1832
  %1837 = load double, double* %1480, align 8
  %1838 = fadd double %2219, %1837
  store double %1838, double* %1480, align 8
  %1839 = fcmp ogt double %1838, 4.500000e-01
  br i1 %1839, label %1842, label %1840

1840:                                             ; preds = %1836
  %1841 = fcmp olt double %1838, 0.000000e+00
  br i1 %1841, label %1842, label %1844

1842:                                             ; preds = %1836, %1840
  %1843 = phi double [ 0.000000e+00, %1840 ], [ 4.500000e-01, %1836 ]
  store double %1843, double* %1480, align 8
  br label %1844

1844:                                             ; preds = %1842, %1840
  %1845 = add nuw nsw i32 %1529, 1
  %1846 = icmp eq i32 %1845, 2
  br i1 %1846, label %1610, label %1528

1847:                                             ; preds = %1847, %1754
  %1848 = phi i64 [ 0, %1754 ], [ %1869, %1847 ]
  %1849 = phi double [ 0.000000e+00, %1754 ], [ %1868, %1847 ]
  %1850 = getelementptr inbounds [4 x [264 x double]], [4 x [264 x double]]* %21, i64 0, i64 1, i64 %1848
  %1851 = load double, double* %1850, align 16
  %1852 = fmul double %1851, %1851
  %1853 = fadd double %1849, %1852
  %1854 = or i64 %1848, 1
  %1855 = getelementptr inbounds [4 x [264 x double]], [4 x [264 x double]]* %21, i64 0, i64 1, i64 %1854
  %1856 = load double, double* %1855, align 8
  %1857 = fmul double %1856, %1856
  %1858 = fadd double %1853, %1857
  %1859 = or i64 %1848, 2
  %1860 = getelementptr inbounds [4 x [264 x double]], [4 x [264 x double]]* %21, i64 0, i64 1, i64 %1859
  %1861 = load double, double* %1860, align 16
  %1862 = fmul double %1861, %1861
  %1863 = fadd double %1858, %1862
  %1864 = or i64 %1848, 3
  %1865 = getelementptr inbounds [4 x [264 x double]], [4 x [264 x double]]* %21, i64 0, i64 1, i64 %1864
  %1866 = load double, double* %1865, align 8
  %1867 = fmul double %1866, %1866
  %1868 = fadd double %1863, %1867
  %1869 = add nuw nsw i64 %1848, 4
  %1870 = icmp eq i64 %1869, 264
  br i1 %1870, label %1871, label %1847

1871:                                             ; preds = %1847
  %1872 = fmul double %1482, %1868
  store double %1872, double* %1506, align 8
  br label %1756

1873:                                             ; preds = %1873, %1788
  %1874 = phi i64 [ 0, %1788 ], [ %1903, %1873 ]
  %1875 = phi double [ 0.000000e+00, %1788 ], [ %1902, %1873 ]
  %1876 = getelementptr inbounds [4 x [264 x double]], [4 x [264 x double]]* %21, i64 0, i64 1, i64 %1874
  %1877 = load double, double* %1876, align 16
  %1878 = getelementptr inbounds [4 x [264 x double]], [4 x [264 x double]]* %21, i64 0, i64 2, i64 %1874
  %1879 = load double, double* %1878, align 16
  %1880 = fmul double %1877, %1879
  %1881 = fadd double %1875, %1880
  %1882 = or i64 %1874, 1
  %1883 = getelementptr inbounds [4 x [264 x double]], [4 x [264 x double]]* %21, i64 0, i64 1, i64 %1882
  %1884 = load double, double* %1883, align 8
  %1885 = getelementptr inbounds [4 x [264 x double]], [4 x [264 x double]]* %21, i64 0, i64 2, i64 %1882
  %1886 = load double, double* %1885, align 8
  %1887 = fmul double %1884, %1886
  %1888 = fadd double %1881, %1887
  %1889 = or i64 %1874, 2
  %1890 = getelementptr inbounds [4 x [264 x double]], [4 x [264 x double]]* %21, i64 0, i64 1, i64 %1889
  %1891 = load double, double* %1890, align 16
  %1892 = getelementptr inbounds [4 x [264 x double]], [4 x [264 x double]]* %21, i64 0, i64 2, i64 %1889
  %1893 = load double, double* %1892, align 16
  %1894 = fmul double %1891, %1893
  %1895 = fadd double %1888, %1894
  %1896 = or i64 %1874, 3
  %1897 = getelementptr inbounds [4 x [264 x double]], [4 x [264 x double]]* %21, i64 0, i64 1, i64 %1896
  %1898 = load double, double* %1897, align 8
  %1899 = getelementptr inbounds [4 x [264 x double]], [4 x [264 x double]]* %21, i64 0, i64 2, i64 %1896
  %1900 = load double, double* %1899, align 8
  %1901 = fmul double %1898, %1900
  %1902 = fadd double %1895, %1901
  %1903 = add nuw nsw i64 %1874, 4
  %1904 = icmp eq i64 %1903, 264
  br i1 %1904, label %1905, label %1873

1905:                                             ; preds = %1873
  %1906 = fmul double %1482, %1902
  store double %1906, double* %1508, align 8
  br label %1907

1907:                                             ; preds = %1907, %1905
  %1908 = phi i64 [ 0, %1905 ], [ %1929, %1907 ]
  %1909 = phi double [ 0.000000e+00, %1905 ], [ %1928, %1907 ]
  %1910 = getelementptr inbounds [4 x [264 x double]], [4 x [264 x double]]* %21, i64 0, i64 2, i64 %1908
  %1911 = load double, double* %1910, align 16
  %1912 = fmul double %1911, %1911
  %1913 = fadd double %1909, %1912
  %1914 = or i64 %1908, 1
  %1915 = getelementptr inbounds [4 x [264 x double]], [4 x [264 x double]]* %21, i64 0, i64 2, i64 %1914
  %1916 = load double, double* %1915, align 8
  %1917 = fmul double %1916, %1916
  %1918 = fadd double %1913, %1917
  %1919 = or i64 %1908, 2
  %1920 = getelementptr inbounds [4 x [264 x double]], [4 x [264 x double]]* %21, i64 0, i64 2, i64 %1919
  %1921 = load double, double* %1920, align 16
  %1922 = fmul double %1921, %1921
  %1923 = fadd double %1918, %1922
  %1924 = or i64 %1908, 3
  %1925 = getelementptr inbounds [4 x [264 x double]], [4 x [264 x double]]* %21, i64 0, i64 2, i64 %1924
  %1926 = load double, double* %1925, align 8
  %1927 = fmul double %1926, %1926
  %1928 = fadd double %1923, %1927
  %1929 = add nuw nsw i64 %1908, 4
  %1930 = icmp eq i64 %1929, 264
  br i1 %1930, label %1931, label %1907

1931:                                             ; preds = %1907
  %1932 = fmul double %1482, %1928
  store double %1932, double* %1509, align 16
  br label %1790

1933:                                             ; preds = %1933, %1822
  %1934 = phi i64 [ 0, %1822 ], [ %1963, %1933 ]
  %1935 = phi double [ 0.000000e+00, %1822 ], [ %1962, %1933 ]
  %1936 = getelementptr inbounds [4 x [264 x double]], [4 x [264 x double]]* %21, i64 0, i64 1, i64 %1934
  %1937 = load double, double* %1936, align 16
  %1938 = getelementptr inbounds [4 x [264 x double]], [4 x [264 x double]]* %21, i64 0, i64 3, i64 %1934
  %1939 = load double, double* %1938, align 16
  %1940 = fmul double %1937, %1939
  %1941 = fadd double %1935, %1940
  %1942 = or i64 %1934, 1
  %1943 = getelementptr inbounds [4 x [264 x double]], [4 x [264 x double]]* %21, i64 0, i64 1, i64 %1942
  %1944 = load double, double* %1943, align 8
  %1945 = getelementptr inbounds [4 x [264 x double]], [4 x [264 x double]]* %21, i64 0, i64 3, i64 %1942
  %1946 = load double, double* %1945, align 8
  %1947 = fmul double %1944, %1946
  %1948 = fadd double %1941, %1947
  %1949 = or i64 %1934, 2
  %1950 = getelementptr inbounds [4 x [264 x double]], [4 x [264 x double]]* %21, i64 0, i64 1, i64 %1949
  %1951 = load double, double* %1950, align 16
  %1952 = getelementptr inbounds [4 x [264 x double]], [4 x [264 x double]]* %21, i64 0, i64 3, i64 %1949
  %1953 = load double, double* %1952, align 16
  %1954 = fmul double %1951, %1953
  %1955 = fadd double %1948, %1954
  %1956 = or i64 %1934, 3
  %1957 = getelementptr inbounds [4 x [264 x double]], [4 x [264 x double]]* %21, i64 0, i64 1, i64 %1956
  %1958 = load double, double* %1957, align 8
  %1959 = getelementptr inbounds [4 x [264 x double]], [4 x [264 x double]]* %21, i64 0, i64 3, i64 %1956
  %1960 = load double, double* %1959, align 8
  %1961 = fmul double %1958, %1960
  %1962 = fadd double %1955, %1961
  %1963 = add nuw nsw i64 %1934, 4
  %1964 = icmp eq i64 %1963, 264
  br i1 %1964, label %1965, label %1933

1965:                                             ; preds = %1933
  %1966 = fmul double %1482, %1962
  store double %1966, double* %1511, align 8
  br label %1967

1967:                                             ; preds = %1967, %1965
  %1968 = phi i64 [ 0, %1965 ], [ %1997, %1967 ]
  %1969 = phi double [ 0.000000e+00, %1965 ], [ %1996, %1967 ]
  %1970 = getelementptr inbounds [4 x [264 x double]], [4 x [264 x double]]* %21, i64 0, i64 2, i64 %1968
  %1971 = load double, double* %1970, align 16
  %1972 = getelementptr inbounds [4 x [264 x double]], [4 x [264 x double]]* %21, i64 0, i64 3, i64 %1968
  %1973 = load double, double* %1972, align 16
  %1974 = fmul double %1971, %1973
  %1975 = fadd double %1969, %1974
  %1976 = or i64 %1968, 1
  %1977 = getelementptr inbounds [4 x [264 x double]], [4 x [264 x double]]* %21, i64 0, i64 2, i64 %1976
  %1978 = load double, double* %1977, align 8
  %1979 = getelementptr inbounds [4 x [264 x double]], [4 x [264 x double]]* %21, i64 0, i64 3, i64 %1976
  %1980 = load double, double* %1979, align 8
  %1981 = fmul double %1978, %1980
  %1982 = fadd double %1975, %1981
  %1983 = or i64 %1968, 2
  %1984 = getelementptr inbounds [4 x [264 x double]], [4 x [264 x double]]* %21, i64 0, i64 2, i64 %1983
  %1985 = load double, double* %1984, align 16
  %1986 = getelementptr inbounds [4 x [264 x double]], [4 x [264 x double]]* %21, i64 0, i64 3, i64 %1983
  %1987 = load double, double* %1986, align 16
  %1988 = fmul double %1985, %1987
  %1989 = fadd double %1982, %1988
  %1990 = or i64 %1968, 3
  %1991 = getelementptr inbounds [4 x [264 x double]], [4 x [264 x double]]* %21, i64 0, i64 2, i64 %1990
  %1992 = load double, double* %1991, align 8
  %1993 = getelementptr inbounds [4 x [264 x double]], [4 x [264 x double]]* %21, i64 0, i64 3, i64 %1990
  %1994 = load double, double* %1993, align 8
  %1995 = fmul double %1992, %1994
  %1996 = fadd double %1989, %1995
  %1997 = add nuw nsw i64 %1968, 4
  %1998 = icmp eq i64 %1997, 264
  br i1 %1998, label %1999, label %1967

1999:                                             ; preds = %1967
  %2000 = fmul double %1482, %1996
  store double %2000, double* %1512, align 16
  br label %2001

2001:                                             ; preds = %2001, %1999
  %2002 = phi i64 [ 0, %1999 ], [ %2023, %2001 ]
  %2003 = phi double [ 0.000000e+00, %1999 ], [ %2022, %2001 ]
  %2004 = getelementptr inbounds [4 x [264 x double]], [4 x [264 x double]]* %21, i64 0, i64 3, i64 %2002
  %2005 = load double, double* %2004, align 16
  %2006 = fmul double %2005, %2005
  %2007 = fadd double %2003, %2006
  %2008 = or i64 %2002, 1
  %2009 = getelementptr inbounds [4 x [264 x double]], [4 x [264 x double]]* %21, i64 0, i64 3, i64 %2008
  %2010 = load double, double* %2009, align 8
  %2011 = fmul double %2010, %2010
  %2012 = fadd double %2007, %2011
  %2013 = or i64 %2002, 2
  %2014 = getelementptr inbounds [4 x [264 x double]], [4 x [264 x double]]* %21, i64 0, i64 3, i64 %2013
  %2015 = load double, double* %2014, align 16
  %2016 = fmul double %2015, %2015
  %2017 = fadd double %2012, %2016
  %2018 = or i64 %2002, 3
  %2019 = getelementptr inbounds [4 x [264 x double]], [4 x [264 x double]]* %21, i64 0, i64 3, i64 %2018
  %2020 = load double, double* %2019, align 8
  %2021 = fmul double %2020, %2020
  %2022 = fadd double %2017, %2021
  %2023 = add nuw nsw i64 %2002, 4
  %2024 = icmp eq i64 %2023, 264
  br i1 %2024, label %2025, label %2001

2025:                                             ; preds = %2001
  %2026 = fmul double %1482, %2022
  store double %2026, double* %1513, align 8
  %2027 = load double, double* %4, align 8
  %2028 = fmul double %2027, 0x3FE593BFA2608C49
  %2029 = fadd double %1500, %2028
  %2030 = load double, double* %1477, align 8
  %2031 = fmul double %2030, 0xBFD15F15F15F15D8
  %2032 = fadd double %2029, %2031
  %2033 = load double, double* %1479, align 8
  %2034 = fmul double %2033, 0xBFC2A6C405D9F7D3
  %2035 = fadd double %2032, %2034
  %2036 = load double, double* %1480, align 8
  %2037 = fmul double %2036, 0x3FAA54D880BB3E19
  %2038 = fadd double %2035, %2037
  %2039 = fmul double %2038, 3.000000e+00
  %2040 = fadd double %2039, %1563
  %2041 = fmul double %2027, 0xBFD15F15F15F15D8
  %2042 = fadd double %1501, %2041
  %2043 = fmul double %2030, 0x3FE507507507508F
  %2044 = fadd double %2042, %2043
  %2045 = fmul double %2033, 0xBFD15F15F15F15D8
  %2046 = fadd double %2044, %2045
  %2047 = fmul double %2036, 0xBFAD41D41D41D5B9
  %2048 = fadd double %2046, %2047
  %2049 = fmul double %2048, 3.000000e+00
  %2050 = fadd double %2049, %1655
  %2051 = fmul double %2027, 0xBFC2A6C405D9F7D3
  %2052 = fadd double %1502, %2051
  %2053 = fadd double %2052, %2031
  %2054 = fmul double %2033, 0x3FE593BFA2608C49
  %2055 = fadd double %2053, %2054
  %2056 = fmul double %2036, 0xBFD3BFA2608C6F47
  %2057 = fadd double %2055, %2056
  %2058 = fmul double %2057, 3.000000e+00
  %2059 = fadd double %2058, %1689
  %2060 = fmul double %2027, 0x3FAA54D880BB3E19
  %2061 = fadd double %1503, %2060
  %2062 = fmul double %2030, 0xBFAD41D41D41D5B9
  %2063 = fadd double %2061, %2062
  %2064 = fmul double %2033, 0xBFD3BFA2608C6F47
  %2065 = fadd double %2063, %2064
  %2066 = fmul double %2036, 0x3FD30463796ACA13
  %2067 = fadd double %2065, %2066
  %2068 = fmul double %2067, 3.000000e+00
  %2069 = fadd double %2068, %1565
  %2070 = load double, double* %1504, align 16
  %2071 = fadd double %2070, 0x40002ECFB9C86937
  store double %2071, double* %1504, align 16
  %2072 = load <2 x double>, <2 x double>* %1515, align 16
  %2073 = fadd <2 x double> %2072, <double 0xBFEA0EA0EA0EA0C4, double 0x3FFF8AF8AF8AF8D6>
  store <2 x double> %2073, <2 x double>* %1516, align 16
  %2074 = load double, double* %1517, align 16
  %2075 = fadd double %2074, 0xBFDBFA2608C6F3BC
  store double %2075, double* %1517, align 16
  %2076 = load double, double* %1518, align 8
  %2077 = fadd double %2076, 0xBFEA0EA0EA0EA0C4
  store double %2077, double* %1518, align 8
  %2078 = load double, double* %1519, align 16
  %2079 = fadd double %2078, 0x40002ECFB9C86937
  store double %2079, double* %1519, align 16
  %2080 = load <2 x double>, <2 x double>* %1521, align 16
  %2081 = fadd <2 x double> %2080, <double 0x3FC3BFA2608C6E93, double 0xBFC5F15F15F1604B>
  store <2 x double> %2081, <2 x double>* %1522, align 16
  %2082 = load <2 x double>, <2 x double>* %1524, align 16
  %2083 = fadd <2 x double> %2082, <double 0xBFED9F7390D2A6EA, double 0x3FEC869536202F1C>
  store <2 x double> %2083, <2 x double>* %1525, align 16
  %2084 = fsub double 1.000000e+00, %2027
  %2085 = fdiv double 1.000000e+00, %2084
  %2086 = fmul double %2085, %2085
  %2087 = fmul double %2086, 5.000000e-03
  %2088 = fmul double %2085, 2.000000e+00
  %2089 = fmul double %2088, %2087
  %2090 = load double, double* %1487, align 16
  %2091 = fadd double %2090, %2089
  store double %2091, double* %1487, align 16
  %2092 = fsub double 1.000000e+00, %2030
  %2093 = fdiv double 1.000000e+00, %2092
  %2094 = fmul double %2093, %2093
  %2095 = fmul double %2094, 5.000000e-03
  %2096 = fadd double %2050, %2095
  %2097 = fmul double %2093, 2.000000e+00
  %2098 = fmul double %2097, %2095
  %2099 = load double, double* %1492, align 8
  %2100 = fadd double %2099, %2098
  %2101 = fsub double 1.000000e+00, %2033
  %2102 = fdiv double 1.000000e+00, %2101
  %2103 = fmul double %2102, %2102
  %2104 = fmul double %2103, 5.000000e-03
  %2105 = fmul double %2102, 2.000000e+00
  %2106 = fmul double %2105, %2104
  %2107 = load double, double* %1496, align 16
  %2108 = fadd double %2107, %2106
  %2109 = fsub double 1.000000e+00, %2036
  %2110 = fdiv double 1.000000e+00, %2109
  %2111 = fmul double %2110, %2110
  %2112 = fmul double %2111, 5.000000e-03
  %2113 = fmul double %2112, 1.330000e+00
  %2114 = fmul double %2110, 2.660000e+00
  %2115 = insertelement <2 x double> undef, double %2069, i32 0
  %2116 = insertelement <2 x double> %2115, double %2114, i32 1
  %2117 = insertelement <2 x double> undef, double %2113, i32 0
  %2118 = insertelement <2 x double> %2117, double %2112, i32 1
  %2119 = fadd <2 x double> %2116, %2118
  %2120 = fmul <2 x double> %2116, %2118
  %2121 = shufflevector <2 x double> %2119, <2 x double> %2120, <2 x i32> <i32 0, i32 3>
  %2122 = load double, double* %1485, align 8
  %2123 = load double, double* %1486, align 16
  %2124 = load double, double* %1489, align 16
  %2125 = insertelement <2 x double> undef, double %2123, i32 0
  %2126 = insertelement <2 x double> %2125, double %2124, i32 1
  %2127 = insertelement <2 x double> undef, double %2091, i32 0
  %2128 = shufflevector <2 x double> %2127, <2 x double> undef, <2 x i32> zeroinitializer
  %2129 = fdiv <2 x double> %2126, %2128
  store <2 x double> %2129, <2 x double>* %1526, align 8
  %2130 = load double, double* %1490, align 16
  %2131 = fdiv double %2130, %2091
  store double %2131, double* %1491, align 8
  %2132 = extractelement <2 x double> %2129, i32 0
  %2133 = fmul double %2091, %2132
  %2134 = insertelement <2 x double> undef, double %2040, i32 0
  %2135 = shufflevector <2 x double> %2134, <2 x double> %2129, <2 x i32> <i32 0, i32 2>
  %2136 = insertelement <2 x double> undef, double %2087, i32 0
  %2137 = insertelement <2 x double> %2136, double %2133, i32 1
  %2138 = fadd <2 x double> %2135, %2137
  %2139 = fmul <2 x double> %2135, %2137
  %2140 = shufflevector <2 x double> %2138, <2 x double> %2139, <2 x i32> <i32 0, i32 3>
  %2141 = insertelement <2 x double> <double -0.000000e+00, double undef>, double %2100, i32 1
  %2142 = fsub <2 x double> %2141, %2140
  %2143 = extractelement <2 x double> %2142, i32 1
  store double %2143, double* %1492, align 8
  %2144 = load double, double* %1493, align 8
  %2145 = load double, double* %1495, align 8
  %2146 = shufflevector <2 x double> %2129, <2 x double> undef, <2 x i32> zeroinitializer
  %2147 = insertelement <2 x double> undef, double %2124, i32 0
  %2148 = insertelement <2 x double> %2147, double %2130, i32 1
  %2149 = fmul <2 x double> %2146, %2148
  %2150 = insertelement <2 x double> undef, double %2144, i32 0
  %2151 = insertelement <2 x double> %2150, double %2145, i32 1
  %2152 = fsub <2 x double> %2151, %2149
  %2153 = shufflevector <2 x double> %2142, <2 x double> undef, <2 x i32> <i32 1, i32 1>
  %2154 = fdiv <2 x double> %2152, %2153
  store <2 x double> %2154, <2 x double>* %1527, align 16
  %2155 = extractelement <2 x double> %2129, i32 1
  %2156 = fmul double %2091, %2155
  %2157 = fmul double %2155, %2156
  %2158 = extractelement <2 x double> %2154, i32 0
  %2159 = shufflevector <2 x double> %2129, <2 x double> %2154, <2 x i32> <i32 1, i32 2>
  %2160 = fmul <2 x double> %2159, %2142
  %2161 = extractelement <2 x double> %2160, i32 1
  %2162 = fmul double %2158, %2161
  %2163 = fadd double %2157, %2162
  %2164 = fsub double %2108, %2163
  store double %2164, double* %1496, align 16
  %2165 = load double, double* %1497, align 16
  %2166 = insertelement <2 x double> %2129, double %2059, i32 0
  %2167 = insertelement <2 x double> undef, double %2104, i32 0
  %2168 = insertelement <2 x double> %2167, double %2130, i32 1
  %2169 = fadd <2 x double> %2166, %2168
  %2170 = fmul <2 x double> %2166, %2168
  %2171 = shufflevector <2 x double> %2169, <2 x double> %2170, <2 x i32> <i32 0, i32 3>
  %2172 = fsub double -0.000000e+00, %2096
  %2173 = insertelement <2 x double> <double -0.000000e+00, double undef>, double %2165, i32 1
  %2174 = fsub <2 x double> %2173, %2171
  %2175 = extractelement <2 x double> %2142, i32 0
  %2176 = fmul double %2132, %2175
  %2177 = insertelement <2 x double> %2142, double %2172, i32 0
  %2178 = insertelement <2 x double> %2154, double %2176, i32 0
  %2179 = fsub <2 x double> %2177, %2178
  %2180 = fmul <2 x double> %2177, %2178
  %2181 = shufflevector <2 x double> %2179, <2 x double> %2180, <2 x i32> <i32 0, i32 3>
  %2182 = extractelement <2 x double> %2179, i32 0
  %2183 = fmul double %2158, %2182
  %2184 = insertelement <2 x double> %2154, double %2183, i32 0
  %2185 = fadd <2 x double> %2160, %2184
  %2186 = fmul <2 x double> %2160, %2184
  %2187 = shufflevector <2 x double> %2185, <2 x double> %2186, <2 x i32> <i32 0, i32 3>
  %2188 = fsub <2 x double> %2174, %2187
  %2189 = insertelement <2 x double> undef, double %2164, i32 0
  %2190 = shufflevector <2 x double> %2189, <2 x double> undef, <2 x i32> zeroinitializer
  %2191 = fdiv <2 x double> %2188, %2190
  %2192 = extractelement <2 x double> %2191, i32 1
  store double %2192, double* %1498, align 8
  %2193 = fmul double %2091, %2131
  %2194 = fmul double %2164, %2192
  %2195 = insertelement <2 x double> <double -0.000000e+00, double undef>, double %2122, i32 1
  %2196 = fsub <2 x double> %2195, %2121
  %2197 = fadd <2 x double> %2195, %2121
  %2198 = shufflevector <2 x double> %2196, <2 x double> %2197, <2 x i32> <i32 0, i32 3>
  %2199 = insertelement <2 x double> undef, double %2131, i32 0
  %2200 = shufflevector <2 x double> %2199, <2 x double> undef, <2 x i32> zeroinitializer
  %2201 = insertelement <2 x double> undef, double %2175, i32 0
  %2202 = insertelement <2 x double> %2201, double %2193, i32 1
  %2203 = fmul <2 x double> %2200, %2202
  %2204 = shufflevector <2 x double> %2154, <2 x double> undef, <2 x i32> <i32 1, i32 1>
  %2205 = fmul <2 x double> %2204, %2181
  %2206 = fadd <2 x double> %2203, %2205
  %2207 = extractelement <2 x double> %2188, i32 0
  %2208 = shufflevector <2 x double> %2191, <2 x double> undef, <2 x i32> <i32 1, i32 1>
  %2209 = insertelement <2 x double> undef, double %2207, i32 0
  %2210 = insertelement <2 x double> %2209, double %2194, i32 1
  %2211 = fmul <2 x double> %2208, %2210
  %2212 = fadd <2 x double> %2206, %2211
  %2213 = fsub <2 x double> %2198, %2212
  %2214 = extractelement <2 x double> %2213, i32 1
  store double %2214, double* %1485, align 8
  %2215 = load double, double* %1487, align 16
  %2216 = fdiv double %2175, %2215
  %2217 = fdiv double %2182, %2143
  %2218 = extractelement <2 x double> %2213, i32 0
  %2219 = fdiv double %2218, %2214
  %2220 = fmul double %2192, %2219
  %2221 = extractelement <2 x double> %2191, i32 0
  %2222 = fsub double %2221, %2220
  %2223 = insertelement <2 x double> undef, double %2222, i32 0
  %2224 = insertelement <2 x double> %2223, double %2219, i32 1
  %2225 = fmul <2 x double> %2154, %2224
  %2226 = extractelement <2 x double> %2225, i32 0
  %2227 = extractelement <2 x double> %2225, i32 1
  %2228 = fadd double %2227, %2226
  %2229 = fsub double %2217, %2228
  %2230 = fmul double %2131, %2219
  %2231 = insertelement <2 x double> undef, double %2229, i32 0
  %2232 = insertelement <2 x double> %2231, double %2222, i32 1
  %2233 = fmul <2 x double> %2129, %2232
  %2234 = extractelement <2 x double> %2233, i32 1
  %2235 = fadd double %2230, %2234
  %2236 = extractelement <2 x double> %2233, i32 0
  %2237 = fadd double %2235, %2236
  %2238 = fsub double %2216, %2237
  %2239 = load double, double* %4, align 8
  %2240 = fadd double %2238, %2239
  store double %2240, double* %4, align 8
  %2241 = fcmp ogt double %2240, 4.500000e-01
  br i1 %2241, label %1604, label %1602

2242:                                             ; preds = %574
  %2243 = getelementptr inbounds [65 x double], [65 x double]* %8, i64 0, i64 %582
  %2244 = load double, double* %2243, align 8
  %2245 = getelementptr inbounds [65 x double], [65 x double]* %9, i64 0, i64 %582
  %2246 = load double, double* %2245, align 8
  %2247 = add nuw nsw i64 %577, 2
  %2248 = fadd double %2246, %2244
  %2249 = getelementptr inbounds double, double* %552, i64 %582
  store double %2248, double* %2249, align 8
  %2250 = fcmp ogt double %2248, %591
  %2251 = ptrtoint double* %2249 to i64
  %2252 = sub i64 %2251, %554
  %2253 = lshr exact i64 %2252, 3
  %2254 = trunc i64 %2253 to i32
  %2255 = select i1 %2250, i32 %2254, i32 %590
  %2256 = select i1 %2250, double %2248, double %591
  br label %574

2257:                                             ; preds = %463
  %2258 = getelementptr inbounds double, double* %407, i64 %485
  %2259 = load double, double* %2258, align 8
  %2260 = getelementptr inbounds double, double* %458, i64 %485
  %2261 = load double, double* %2260, align 8
  %2262 = fmul double %2259, %2261
  %2263 = add nuw nsw i64 %464, 4
  %2264 = fadd double %486, %2262
  br label %463

2265:                                             ; preds = %370
  %2266 = getelementptr inbounds double, double* %195, i64 %392
  %2267 = load double, double* %2266, align 8
  %2268 = getelementptr inbounds double, double* %365, i64 %392
  %2269 = load double, double* %2268, align 8
  %2270 = fmul double %2267, %2269
  %2271 = add nuw nsw i64 %371, 4
  %2272 = fadd double %393, %2270
  br label %370
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare void @WebRtcIsac_WeightingFilter(double*, double*, double*, %struct.WeightFiltstr*) local_unnamed_addr #2

declare void @WebRtcIsac_PitchfilterPre_gains(double*, double*, [264 x double]*, %struct.PitchFiltstr*, double*, double*) local_unnamed_addr #2

declare void @WebRtcIsac_PitchfilterPre(double*, double*, %struct.PitchFiltstr*, double*, double*) local_unnamed_addr #2

declare void @WebRtcIsac_PitchfilterPre_la(double*, double*, %struct.PitchFiltstr*, double*, double*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree nounwind
declare double @log(double) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare double @exp(double) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare double @pow(double, double) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare double @sqrt(double) local_unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
