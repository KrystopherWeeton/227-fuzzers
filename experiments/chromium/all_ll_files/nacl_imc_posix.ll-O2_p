; ModuleID = '../../native_client/src/shared/imc/posix/nacl_imc_posix.cc'
source_filename = "../../native_client/src/shared/imc/posix/nacl_imc_posix.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver fmemopen, fmemopen@GLIBC_2.2.5"
module asm ".symver glob, glob@GLIBC_2.2.5"
module asm ".symver glob64, glob64@GLIBC_2.2.5"
module asm ".symver quick_exit, quick_exit@GLIBC_2.10"

%struct.NaClDescEffector = type opaque

@_ZL27g_create_memory_object_func = internal unnamed_addr global i32 (i64, i32)* null, align 8
@_ZZ22NaClCreateMemoryObjectE20s_dev_shm_executable = internal unnamed_addr global i8 0, align 1
@_ZGVZ22NaClCreateMemoryObjectE20s_dev_shm_executable = internal global i64 0, align 8
@.str = private unnamed_addr constant [119 x i8] c"NaClCreateMemoryObjectFunc: PROT_EXEC not supported by shm_open(), falling back to /tmp for shared exectuable memory.\0A\00", align 1
@_ZZ7NaClMapE10kPosixProt = internal unnamed_addr constant [8 x i32] [i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7], align 16
@.str.1 = private unnamed_addr constant [40 x i8] c"Fatal error in file %s, line %d: !(%s)\0A\00", align 1
@.str.2 = private unnamed_addr constant [59 x i8] c"../../native_client/src/shared/imc/posix/nacl_imc_posix.cc\00", align 1
@.str.3 = private unnamed_addr constant [31 x i8] c"munmap(mapping, pagesize) == 0\00", align 1
@.str.4 = private unnamed_addr constant [15 x i8] c"close(fd) == 0\00", align 1
@_ZL14kShmOpenPrefix = internal constant [18 x i8] c"/google-nacl-shm-\00", align 16
@.str.5 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@.str.6 = private unnamed_addr constant [9 x i8] c"%s-%u.%u\00", align 1
@_ZL19memory_object_count = internal global i32 0, align 4
@nacl_check_debug_mode = external local_unnamed_addr global i32, align 4
@.str.7 = private unnamed_addr constant [8 x i8] c"rc == 0\00", align 1
@.str.8 = private unnamed_addr constant [7 x i8] c"TMPDIR\00", align 1
@_ZL11kDefaultTmp = internal constant [5 x i8] c"/tmp\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @NaClDuplicateNaClHandle(i32) local_unnamed_addr #0 {
  %2 = tail call i32 @dup(i32 %0) #11
  ret i32 %2
}

; Function Attrs: nounwind
declare i32 @dup(i32) local_unnamed_addr #1

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @NaClSetCreateMemoryObjectFunc(i32 (i64, i32)*) local_unnamed_addr #2 {
  store i32 (i64, i32)* %0, i32 (i64, i32)** @_ZL27g_create_memory_object_func, align 8
  ret void
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @NaClWouldBlock() local_unnamed_addr #3 {
  %1 = tail call i32* @__errno_location() #12
  %2 = load i32, i32* %1, align 4
  %3 = icmp eq i32 %2, 11
  %4 = zext i1 %3 to i32
  ret i32 %4
}

; Function Attrs: nounwind readnone
declare i32* @__errno_location() local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden i32 @NaClCreateMemoryObject(i64, i32) local_unnamed_addr #0 {
  %3 = icmp eq i64 %0, 0
  br i1 %3, label %48, label %4

4:                                                ; preds = %2
  %5 = load i32 (i64, i32)*, i32 (i64, i32)** @_ZL27g_create_memory_object_func, align 8
  %6 = icmp eq i32 (i64, i32)* %5, null
  br i1 %6, label %10, label %7

7:                                                ; preds = %4
  %8 = tail call i32 %5(i64 %0, i32 %1) #11
  %9 = icmp sgt i32 %8, -1
  br i1 %9, label %48, label %10

10:                                               ; preds = %4, %7
  %11 = icmp eq i32 %1, 0
  br i1 %11, label %45, label %12

12:                                               ; preds = %10
  %13 = load atomic i8, i8* bitcast (i64* @_ZGVZ22NaClCreateMemoryObjectE20s_dev_shm_executable to i8*) acquire, align 8
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %15, label %39, !prof !2

15:                                               ; preds = %12
  %16 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZ22NaClCreateMemoryObjectE20s_dev_shm_executable) #11
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %39, label %18

18:                                               ; preds = %15
  %19 = tail call i64 @sysconf(i32 30) #11
  %20 = tail call fastcc i32 @_ZL16TryShmOrTempOpenmb(i64 %19, i1 zeroext false) #11
  %21 = icmp slt i32 %20, 0
  br i1 %21, label %37, label %22

22:                                               ; preds = %18
  %23 = tail call i8* @mmap64(i8* null, i64 %19, i32 1, i32 1, i32 %20, i64 0) #11
  %24 = icmp eq i8* %23, inttoptr (i64 -1 to i8*)
  br i1 %24, label %32, label %25

25:                                               ; preds = %22
  %26 = tail call i32 @mprotect(i8* %23, i64 %19, i32 5) #11
  %27 = icmp eq i32 %26, 0
  %28 = zext i1 %27 to i8
  %29 = tail call i32 @munmap(i8* %23, i64 %19) #11
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %32, label %31

31:                                               ; preds = %25
  tail call void (i32, i8*, ...) @NaClLog(i32 -4, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.2, i64 0, i64 0), i32 162, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.3, i64 0, i64 0)) #11
  br label %32

32:                                               ; preds = %31, %25, %22
  %33 = phi i8 [ %28, %25 ], [ %28, %31 ], [ 0, %22 ]
  %34 = tail call i32 @close(i32 %20) #11
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %37, label %36

36:                                               ; preds = %32
  tail call void (i32, i8*, ...) @NaClLog(i32 -4, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.2, i64 0, i64 0), i32 164, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.4, i64 0, i64 0)) #11
  br label %37

37:                                               ; preds = %32, %36, %18
  %38 = phi i8 [ 0, %18 ], [ %33, %36 ], [ %33, %32 ]
  store i8 %38, i8* @_ZZ22NaClCreateMemoryObjectE20s_dev_shm_executable, align 1
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZ22NaClCreateMemoryObjectE20s_dev_shm_executable) #11
  br label %39

39:                                               ; preds = %15, %37, %12
  %40 = load i8, i8* @_ZZ22NaClCreateMemoryObjectE20s_dev_shm_executable, align 1, !range !3
  %41 = icmp eq i8 %40, 0
  br i1 %41, label %42, label %45

42:                                               ; preds = %39
  tail call void (i32, i8*, ...) @NaClLog(i32 1, i8* getelementptr inbounds ([119 x i8], [119 x i8]* @.str, i64 0, i64 0)) #11
  %43 = load i8, i8* @_ZZ22NaClCreateMemoryObjectE20s_dev_shm_executable, align 1, !range !3
  %44 = icmp eq i8 %43, 0
  br label %45

45:                                               ; preds = %42, %39, %10
  %46 = phi i1 [ false, %10 ], [ false, %39 ], [ %44, %42 ]
  %47 = tail call fastcc i32 @_ZL16TryShmOrTempOpenmb(i64 %0, i1 zeroext %46)
  br label %48

48:                                               ; preds = %7, %2, %45
  %49 = phi i32 [ %47, %45 ], [ -1, %2 ], [ %8, %7 ]
  ret i32 %49
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #5

; Function Attrs: nofree nounwind
declare i32 @__cxa_guard_acquire(i64*) local_unnamed_addr #6

; Function Attrs: nofree nounwind
declare void @__cxa_guard_release(i64*) local_unnamed_addr #6

declare void @NaClLog(i32, i8*, ...) local_unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @_ZL16TryShmOrTempOpenmb(i64, i1 zeroext) unnamed_addr #0 {
  %3 = alloca [4096 x i8], align 16
  %4 = alloca [4096 x i8], align 16
  %5 = getelementptr inbounds [4096 x i8], [4096 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %5) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %5, i8 -86, i64 4096, i1 false)
  %6 = getelementptr inbounds [4096 x i8], [4096 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %6) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %6, i8 -86, i64 4096, i1 false)
  %7 = icmp eq i64 %0, 0
  br i1 %7, label %52, label %8

8:                                                ; preds = %2
  br i1 %1, label %9, label %14

9:                                                ; preds = %8
  %10 = tail call i8* @getenv(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.8, i64 0, i64 0)) #11
  %11 = icmp eq i8* %10, null
  %12 = select i1 %11, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @_ZL11kDefaultTmp, i64 0, i64 0), i8* %10
  %13 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* nonnull %6, i64 4096, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i64 0, i64 0), i8* %12, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @_ZL14kShmOpenPrefix, i64 0, i64 0)) #11
  br label %14

14:                                               ; preds = %9, %8
  %15 = phi i8* [ %6, %9 ], [ getelementptr inbounds ([18 x i8], [18 x i8]* @_ZL14kShmOpenPrefix, i64 0, i64 0), %8 ]
  br label %16

16:                                               ; preds = %48, %14
  %17 = call i32 @getpid() #11
  %18 = atomicrmw add i32* @_ZL19memory_object_count, i32 1 seq_cst
  %19 = add i32 %18, 1
  %20 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* nonnull %5, i64 4096, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.6, i64 0, i64 0), i8* %15, i32 %17, i32 %19) #11
  br i1 %1, label %21, label %23

21:                                               ; preds = %16
  %22 = call i32 (i8*, i32, ...) @open64(i8* nonnull %5, i32 194, i32 0) #11
  br label %25

23:                                               ; preds = %16
  %24 = call i32 @shm_open(i8* nonnull %5, i32 194, i32 128) #11
  br label %25

25:                                               ; preds = %23, %21
  %26 = phi i32 [ %22, %21 ], [ %24, %23 ]
  %27 = icmp sgt i32 %26, -1
  br i1 %27, label %28, label %48

28:                                               ; preds = %25
  br i1 %1, label %29, label %36

29:                                               ; preds = %28
  %30 = call i32 @unlink(i8* nonnull %5) #11
  %31 = load i32, i32* @nacl_check_debug_mode, align 4
  %32 = icmp eq i32 %31, 0
  %33 = icmp eq i32 %30, 0
  %34 = or i1 %33, %32
  br i1 %34, label %43, label %35

35:                                               ; preds = %29
  call void (i32, i8*, ...) @NaClLog(i32 -4, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.2, i64 0, i64 0), i32 127, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7, i64 0, i64 0)) #11
  br label %43

36:                                               ; preds = %28
  %37 = call i32 @shm_unlink(i8* nonnull %5) #11
  %38 = load i32, i32* @nacl_check_debug_mode, align 4
  %39 = icmp eq i32 %38, 0
  %40 = icmp eq i32 %37, 0
  %41 = or i1 %40, %39
  br i1 %41, label %43, label %42

42:                                               ; preds = %36
  call void (i32, i8*, ...) @NaClLog(i32 -4, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.2, i64 0, i64 0), i32 130, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7, i64 0, i64 0)) #11
  br label %43

43:                                               ; preds = %42, %36, %35, %29
  %44 = call i32 @ftruncate64(i32 %26, i64 %0) #11
  %45 = icmp eq i32 %44, -1
  br i1 %45, label %46, label %52

46:                                               ; preds = %43
  %47 = call i32 @close(i32 %26) #11
  br label %52

48:                                               ; preds = %25
  %49 = tail call i32* @__errno_location() #12
  %50 = load i32, i32* %49, align 4
  %51 = icmp eq i32 %50, 17
  br i1 %51, label %16, label %52

52:                                               ; preds = %48, %43, %46, %2
  %53 = phi i32 [ -1, %2 ], [ %26, %43 ], [ -1, %46 ], [ -1, %48 ]
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %6) #11
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %5) #11
  ret i32 %53
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #5

; Function Attrs: nounwind ssp uwtable
define hidden i8* @NaClMap(%struct.NaClDescEffector* nocapture readnone, i8*, i64, i32, i32, i32, i64) local_unnamed_addr #0 {
  %8 = and i32 %4, 19
  %9 = and i32 %3, 7
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds [8 x i32], [8 x i32]* @_ZZ7NaClMapE10kPosixProt, i64 0, i64 %10
  %12 = load i32, i32* %11, align 4
  %13 = tail call i8* @mmap64(i8* %1, i64 %2, i32 %12, i32 %8, i32 %5, i64 %6) #11
  ret i8* %13
}

; Function Attrs: nounwind
declare i8* @mmap64(i8*, i64, i32, i32, i32, i64) local_unnamed_addr #1

; Function Attrs: nounwind
declare i64 @sysconf(i32) local_unnamed_addr #1

; Function Attrs: nounwind
declare i32 @mprotect(i8*, i64, i32) local_unnamed_addr #1

; Function Attrs: nounwind
declare i32 @munmap(i8*, i64) local_unnamed_addr #1

declare i32 @close(i32) local_unnamed_addr #7

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #5

; Function Attrs: nofree nounwind
declare i32 @snprintf(i8* nocapture, i64, i8* nocapture readonly, ...) local_unnamed_addr #8

; Function Attrs: nounwind
declare i32 @getpid() local_unnamed_addr #1

; Function Attrs: nofree
declare i32 @open64(i8* nocapture readonly, i32, ...) local_unnamed_addr #9

declare i32 @shm_open(i8*, i32, i32) local_unnamed_addr #7

; Function Attrs: nofree nounwind
declare i32 @unlink(i8* nocapture readonly) local_unnamed_addr #8

declare i32 @shm_unlink(i8*) local_unnamed_addr #7

; Function Attrs: nounwind
declare i32 @ftruncate64(i32, i64) local_unnamed_addr #1

; Function Attrs: nofree nounwind readonly
declare i8* @getenv(i8* nocapture) local_unnamed_addr #10

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind }
attributes #6 = { nofree nounwind }
attributes #7 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nounwind }
attributes #12 = { nounwind readnone }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 1048575}
!3 = !{i8 0, i8 2}
