; ModuleID = '../../third_party/blink/renderer/modules/peerconnection/byte_buffer_queue.cc'
source_filename = "../../third_party/blink/renderer/modules/peerconnection/byte_buffer_queue.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::ByteBufferQueue" = type <{ i32, [4 x i8], %"class.WTF::Deque", i32, [4 x i8] }>
%"class.WTF::Deque" = type { %"class.WTF::Deque<WTF::Vector<unsigned char, 0, WTF::PartitionAllocator>, 0, WTF::PartitionAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<WTF::Vector<unsigned char, 0, WTF::PartitionAllocator>, 0, WTF::PartitionAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { %"class.WTF::Vector"*, i32, i32 }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer.0" }
%"class.WTF::VectorBuffer.0" = type { %"class.WTF::VectorBufferBase.1" }
%"class.WTF::VectorBufferBase.1" = type { i8*, i32, i32 }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.logging::CheckOpResult" = type { i8* }

$_ZN3WTF5DequeINS_6VectorIhLj0ENS_18PartitionAllocatorEEELj0ES2_E5clearEv = comdat any

$_ZN3WTF5DequeINS_6VectorIhLj0ENS_18PartitionAllocatorEEELj0ES2_E14ExpandCapacityEv = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6VectorIhLj0ES0_EEEEmm = comdat any

@.str = private unnamed_addr constant [29 x i8] c"../../base/containers/span.h\00", align 1
@.str.1 = private unnamed_addr constant [17 x i8] c"offset <= size()\00", align 1
@.str.3 = private unnamed_addr constant [44 x i8] c"count <= MaxElementCountInBackingStore<T>()\00", align 1
@.str.4 = private unnamed_addr constant [78 x i8] c"../../third_party/blink/renderer/platform/wtf/allocator/partition_allocator.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6VectorIhLj0ENS_18PartitionAllocatorEEEEEPKcv = private unnamed_addr constant [102 x i8] c"const char *WTF::GetStringWithTypeName() [T = WTF::Vector<unsigned char, 0, WTF::PartitionAllocator>]\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN5blink15ByteBufferQueue8ReadIntoEN4base4spanIhLm18446744073709551615EEE(%"class.blink::ByteBufferQueue"* nocapture, i64, i8*) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = getelementptr inbounds %"class.blink::ByteBufferQueue", %"class.blink::ByteBufferQueue"* %0, i64 0, i32 2, i32 1
  %7 = icmp eq i64 %1, 0
  br i1 %7, label %86, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.blink::ByteBufferQueue", %"class.blink::ByteBufferQueue"* %0, i64 0, i32 2, i32 2
  %10 = getelementptr inbounds %"class.blink::ByteBufferQueue", %"class.blink::ByteBufferQueue"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %11 = getelementptr inbounds %"class.blink::ByteBufferQueue", %"class.blink::ByteBufferQueue"* %0, i64 0, i32 3
  %12 = bitcast %"class.logging::CheckError"* %4 to i8*
  %13 = bitcast %"class.logging::CheckError"* %5 to i8*
  %14 = getelementptr inbounds %"class.blink::ByteBufferQueue", %"class.blink::ByteBufferQueue"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 1
  br label %15

15:                                               ; preds = %8, %83
  %16 = phi i32 [ 0, %8 ], [ %43, %83 ]
  %17 = phi i8* [ %2, %8 ], [ %49, %83 ]
  %18 = phi i64 [ %1, %8 ], [ %48, %83 ]
  %19 = load i32, i32* %6, align 8
  %20 = load i32, i32* %9, align 4
  %21 = icmp eq i32 %19, %20
  br i1 %21, label %86, label %22

22:                                               ; preds = %15
  %23 = load %"class.WTF::Vector"*, %"class.WTF::Vector"** %10, align 8
  %24 = zext i32 %19 to i64
  %25 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %23, i64 %24, i32 0, i32 0, i32 0
  %26 = load i8*, i8** %25, align 8
  %27 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %23, i64 %24, i32 0, i32 0, i32 2
  %28 = load i32, i32* %27, align 4
  %29 = zext i32 %28 to i64
  %30 = load i32, i32* %11, align 8
  %31 = zext i32 %30 to i64
  %32 = icmp ult i32 %28, %30
  br i1 %32, label %33, label %35

33:                                               ; preds = %22
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12) #5
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str, i64 0, i64 0), i32 403, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0)) #5
  %34 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #5
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12) #5
  br label %35

35:                                               ; preds = %22, %33
  %36 = sub nsw i64 %29, %31
  %37 = getelementptr inbounds i8, i8* %26, i64 %31
  %38 = trunc i64 %18 to i32
  %39 = trunc i64 %36 to i32
  %40 = icmp ult i32 %39, %38
  %41 = select i1 %40, i32 %39, i32 %38
  %42 = zext i32 %41 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %17, i8* align 1 %37, i64 %42, i1 false)
  %43 = add i32 %41, %16
  %44 = icmp ult i64 %18, %42
  br i1 %44, label %45, label %47

45:                                               ; preds = %35
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %13) #5
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str, i64 0, i64 0), i32 403, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0)) #5
  %46 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #5
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %13) #5
  br label %47

47:                                               ; preds = %35, %45
  %48 = sub i64 %18, %42
  %49 = getelementptr inbounds i8, i8* %17, i64 %42
  %50 = icmp ugt i64 %36, %42
  br i1 %50, label %51, label %54

51:                                               ; preds = %47
  %52 = load i32, i32* %11, align 8
  %53 = add i32 %52, %41
  br label %83

54:                                               ; preds = %47
  %55 = load %"class.WTF::Vector"*, %"class.WTF::Vector"** %10, align 8
  %56 = load i32, i32* %6, align 8
  %57 = zext i32 %56 to i64
  %58 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %55, i64 %57
  %59 = add i32 %56, 1
  %60 = zext i32 %59 to i64
  %61 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %55, i64 %60
  br label %62

62:                                               ; preds = %73, %54
  %63 = phi %"class.WTF::Vector"* [ %74, %73 ], [ %58, %54 ]
  %64 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %63, i64 0, i32 0, i32 0, i32 0
  %65 = load i8*, i8** %64, align 8
  %66 = icmp eq i8* %65, null
  br i1 %66, label %73, label %67, !prof !2

67:                                               ; preds = %62
  %68 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %63, i64 0, i32 0, i32 0, i32 2
  %69 = load i32, i32* %68, align 4
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %72, label %71, !prof !3

71:                                               ; preds = %67
  store i32 0, i32* %68, align 4
  br label %72

72:                                               ; preds = %71, %67
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %65) #5
  store i8* null, i8** %64, align 8
  br label %73

73:                                               ; preds = %72, %62
  %74 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %63, i64 1
  %75 = icmp eq %"class.WTF::Vector"* %74, %61
  br i1 %75, label %76, label %62

76:                                               ; preds = %73
  %77 = load i32, i32* %6, align 8
  %78 = add i32 %77, 1
  %79 = load i32, i32* %14, align 8
  %80 = add i32 %79, -1
  %81 = icmp eq i32 %77, %80
  %82 = select i1 %81, i32 0, i32 %78
  store i32 %82, i32* %6, align 8
  br label %83

83:                                               ; preds = %76, %51
  %84 = phi i32 [ 0, %76 ], [ %53, %51 ]
  store i32 %84, i32* %11, align 8
  %85 = icmp eq i64 %48, 0
  br i1 %85, label %86, label %15

86:                                               ; preds = %83, %15, %3
  %87 = phi i32 [ 0, %3 ], [ %16, %15 ], [ %43, %83 ]
  %88 = getelementptr inbounds %"class.blink::ByteBufferQueue", %"class.blink::ByteBufferQueue"* %0, i64 0, i32 0
  %89 = load i32, i32* %88, align 8
  %90 = sub i32 %89, %87
  store i32 %90, i32* %88, align 8
  ret i32 %87
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink15ByteBufferQueue6AppendEN3WTF6VectorIhLj0ENS1_18PartitionAllocatorEEE(%"class.blink::ByteBufferQueue"*, %"class.WTF::Vector"* nocapture) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %1, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %53, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.blink::ByteBufferQueue", %"class.blink::ByteBufferQueue"* %0, i64 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = add i32 %8, %4
  store i32 %9, i32* %7, align 8
  %10 = getelementptr inbounds %"class.blink::ByteBufferQueue", %"class.blink::ByteBufferQueue"* %0, i64 0, i32 2
  %11 = getelementptr inbounds %"class.blink::ByteBufferQueue", %"class.blink::ByteBufferQueue"* %0, i64 0, i32 2, i32 1
  %12 = load i32, i32* %11, align 8
  %13 = icmp eq i32 %12, 0
  %14 = getelementptr inbounds %"class.blink::ByteBufferQueue", %"class.blink::ByteBufferQueue"* %0, i64 0, i32 2, i32 2
  %15 = load i32, i32* %14, align 4
  br i1 %13, label %19, label %16

16:                                               ; preds = %6
  %17 = add i32 %15, 1
  %18 = icmp eq i32 %17, %12
  br i1 %18, label %28, label %30

19:                                               ; preds = %6
  %20 = icmp eq i32 %15, 0
  %21 = getelementptr inbounds %"class.blink::ByteBufferQueue", %"class.blink::ByteBufferQueue"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 1
  %22 = load i32, i32* %21, align 8
  br i1 %20, label %26, label %23

23:                                               ; preds = %19
  %24 = add i32 %22, -1
  %25 = icmp eq i32 %15, %24
  br i1 %25, label %28, label %30

26:                                               ; preds = %19
  %27 = icmp eq i32 %22, 0
  br i1 %27, label %28, label %30

28:                                               ; preds = %26, %23, %16
  tail call void @_ZN3WTF5DequeINS_6VectorIhLj0ENS_18PartitionAllocatorEEELj0ES2_E14ExpandCapacityEv(%"class.WTF::Deque"* %10) #5
  %29 = load i32, i32* %14, align 4
  br label %30

30:                                               ; preds = %16, %23, %26, %28
  %31 = phi i32 [ %15, %16 ], [ %15, %23 ], [ 0, %26 ], [ %29, %28 ]
  %32 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %10, i64 0, i32 0, i32 0, i32 0, i32 0
  %33 = load %"class.WTF::Vector"*, %"class.WTF::Vector"** %32, align 8
  %34 = zext i32 %31 to i64
  %35 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %33, i64 %34
  %36 = getelementptr inbounds %"class.blink::ByteBufferQueue", %"class.blink::ByteBufferQueue"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 1
  %37 = load i32, i32* %36, align 8
  %38 = add i32 %37, -1
  %39 = icmp eq i32 %31, %38
  %40 = add i32 %31, 1
  %41 = select i1 %39, i32 0, i32 %40
  store i32 %41, i32* %14, align 4
  %42 = bitcast %"class.WTF::Vector"* %35 to i8*
  %43 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %33, i64 %34, i32 0, i32 0, i32 1
  %44 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %33, i64 %34, i32 0, i32 0, i32 2
  %45 = bitcast %"class.WTF::Vector"* %1 to i64*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %42, i8 0, i64 16, i1 false) #5
  %46 = load i64, i64* %45, align 8
  %47 = bitcast %"class.WTF::Vector"* %35 to i64*
  store atomic i64 0, i64* %45 monotonic, align 8
  store atomic i64 %46, i64* %47 monotonic, align 8
  %48 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %1, i64 0, i32 0, i32 0, i32 1
  %49 = load i32, i32* %43, align 4
  %50 = load i32, i32* %48, align 4
  store i32 %50, i32* %43, align 4
  store i32 %49, i32* %48, align 4
  %51 = load i32, i32* %44, align 4
  %52 = load i32, i32* %3, align 4
  store i32 %52, i32* %44, align 4
  store i32 %51, i32* %3, align 4
  br label %53

53:                                               ; preds = %2, %30
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink15ByteBufferQueue5ClearEv(%"class.blink::ByteBufferQueue"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::ByteBufferQueue", %"class.blink::ByteBufferQueue"* %0, i64 0, i32 2
  tail call void @_ZN3WTF5DequeINS_6VectorIhLj0ENS_18PartitionAllocatorEEELj0ES2_E5clearEv(%"class.WTF::Deque"* %2)
  %3 = getelementptr inbounds %"class.blink::ByteBufferQueue", %"class.blink::ByteBufferQueue"* %0, i64 0, i32 3
  store i32 0, i32* %3, align 8
  %4 = getelementptr inbounds %"class.blink::ByteBufferQueue", %"class.blink::ByteBufferQueue"* %0, i64 0, i32 0
  store i32 0, i32* %4, align 8
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF5DequeINS_6VectorIhLj0ENS_18PartitionAllocatorEEELj0ES2_E5clearEv(%"class.WTF::Deque"*) local_unnamed_addr #2 comdat align 2 {
  %2 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %0, i64 0, i32 1
  %3 = load i32, i32* %2, align 8
  %4 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %0, i64 0, i32 2
  %5 = load i32, i32* %4, align 4
  %6 = icmp ugt i32 %3, %5
  %7 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %8 = load %"class.WTF::Vector"*, %"class.WTF::Vector"** %7, align 8
  %9 = zext i32 %5 to i64
  %10 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %8, i64 %9
  br i1 %6, label %30, label %11

11:                                               ; preds = %1
  %12 = icmp eq i32 %3, %5
  br i1 %12, label %74, label %13

13:                                               ; preds = %11
  %14 = zext i32 %3 to i64
  %15 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %8, i64 %14
  br label %16

16:                                               ; preds = %27, %13
  %17 = phi %"class.WTF::Vector"* [ %28, %27 ], [ %15, %13 ]
  %18 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %17, i64 0, i32 0, i32 0, i32 0
  %19 = load i8*, i8** %18, align 8
  %20 = icmp eq i8* %19, null
  br i1 %20, label %27, label %21, !prof !2

21:                                               ; preds = %16
  %22 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %17, i64 0, i32 0, i32 0, i32 2
  %23 = load i32, i32* %22, align 4
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %26, label %25, !prof !3

25:                                               ; preds = %21
  store i32 0, i32* %22, align 4
  br label %26

26:                                               ; preds = %25, %21
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %19) #5
  store i8* null, i8** %18, align 8
  br label %27

27:                                               ; preds = %26, %16
  %28 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %17, i64 1
  %29 = icmp eq %"class.WTF::Vector"* %28, %10
  br i1 %29, label %74, label %16

30:                                               ; preds = %1
  %31 = icmp eq i32 %5, 0
  br i1 %31, label %49, label %32

32:                                               ; preds = %30, %43
  %33 = phi %"class.WTF::Vector"* [ %44, %43 ], [ %8, %30 ]
  %34 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %33, i64 0, i32 0, i32 0, i32 0
  %35 = load i8*, i8** %34, align 8
  %36 = icmp eq i8* %35, null
  br i1 %36, label %43, label %37, !prof !2

37:                                               ; preds = %32
  %38 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %33, i64 0, i32 0, i32 0, i32 2
  %39 = load i32, i32* %38, align 4
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %42, label %41, !prof !3

41:                                               ; preds = %37
  store i32 0, i32* %38, align 4
  br label %42

42:                                               ; preds = %41, %37
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %35) #5
  store i8* null, i8** %34, align 8
  br label %43

43:                                               ; preds = %42, %32
  %44 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %33, i64 1
  %45 = icmp eq %"class.WTF::Vector"* %44, %10
  br i1 %45, label %46, label %32

46:                                               ; preds = %43
  %47 = load %"class.WTF::Vector"*, %"class.WTF::Vector"** %7, align 8
  %48 = load i32, i32* %2, align 8
  br label %49

49:                                               ; preds = %46, %30
  %50 = phi i32 [ %48, %46 ], [ %3, %30 ]
  %51 = phi %"class.WTF::Vector"* [ %47, %46 ], [ %8, %30 ]
  %52 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %53 = load i32, i32* %52, align 8
  %54 = zext i32 %53 to i64
  %55 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %51, i64 %54
  %56 = icmp eq i32 %50, %53
  br i1 %56, label %74, label %57

57:                                               ; preds = %49
  %58 = zext i32 %50 to i64
  %59 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %51, i64 %58
  br label %60

60:                                               ; preds = %71, %57
  %61 = phi %"class.WTF::Vector"* [ %72, %71 ], [ %59, %57 ]
  %62 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %61, i64 0, i32 0, i32 0, i32 0
  %63 = load i8*, i8** %62, align 8
  %64 = icmp eq i8* %63, null
  br i1 %64, label %71, label %65, !prof !2

65:                                               ; preds = %60
  %66 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %61, i64 0, i32 0, i32 0, i32 2
  %67 = load i32, i32* %66, align 4
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %70, label %69, !prof !3

69:                                               ; preds = %65
  store i32 0, i32* %66, align 4
  br label %70

70:                                               ; preds = %69, %65
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %63) #5
  store i8* null, i8** %62, align 8
  br label %71

71:                                               ; preds = %70, %60
  %72 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %61, i64 1
  %73 = icmp eq %"class.WTF::Vector"* %72, %55
  br i1 %73, label %74, label %60

74:                                               ; preds = %27, %71, %11, %49
  store i32 0, i32* %2, align 8
  store i32 0, i32* %4, align 4
  %75 = bitcast %"class.WTF::Deque"* %0 to i8**
  %76 = load i8*, i8** %75, align 8
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %76) #5
  %77 = bitcast %"class.WTF::Deque"* %0 to i64*
  store atomic i64 0, i64* %77 monotonic, align 8
  %78 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  store i32 0, i32* %78, align 8
  ret void
}

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #3

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #4

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF5DequeINS_6VectorIhLj0ENS_18PartitionAllocatorEEELj0ES2_E14ExpandCapacityEv(%"class.WTF::Deque"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %3 = load i32, i32* %2, align 8
  %4 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %5 = load %"class.WTF::Vector"*, %"class.WTF::Vector"** %4, align 8
  %6 = lshr i32 %3, 2
  %7 = add i32 %3, 1
  %8 = add i32 %7, %6
  %9 = icmp ugt i32 %8, 16
  %10 = select i1 %9, i32 %8, i32 16
  %11 = zext i32 %10 to i64
  %12 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6VectorIhLj0ES0_EEEEmm(i64 %11) #5
  %13 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6VectorIhLj0ES0_EEEEmm(i64 %11) #5
  %14 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %13, i8* getelementptr inbounds ([102 x i8], [102 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6VectorIhLj0ENS_18PartitionAllocatorEEEEEPKcv, i64 0, i64 0)) #5
  %15 = ptrtoint i8* %14 to i64
  %16 = bitcast %"class.WTF::Deque"* %0 to i64*
  store atomic i64 %15, i64* %16 monotonic, align 8
  %17 = lshr i64 %13, 4
  %18 = trunc i64 %17 to i32
  store i32 %18, i32* %2, align 8
  %19 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %0, i64 0, i32 1
  %20 = load i32, i32* %19, align 8
  %21 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %0, i64 0, i32 2
  %22 = load i32, i32* %21, align 4
  %23 = icmp ugt i32 %20, %22
  %24 = bitcast i8* %14 to %"class.WTF::Vector"*
  br i1 %23, label %59, label %25

25:                                               ; preds = %1
  %26 = zext i32 %20 to i64
  %27 = zext i32 %22 to i64
  %28 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %5, i64 %27
  %29 = icmp eq i32 %20, %22
  br i1 %29, label %134, label %30

30:                                               ; preds = %25
  %31 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %24, i64 %26
  %32 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %5, i64 %26
  br label %33

33:                                               ; preds = %30, %55
  %34 = phi %"class.WTF::Vector"* [ %57, %55 ], [ %32, %30 ]
  %35 = phi %"class.WTF::Vector"* [ %56, %55 ], [ %31, %30 ]
  %36 = bitcast %"class.WTF::Vector"* %35 to i8*
  %37 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %35, i64 0, i32 0, i32 0, i32 1
  %38 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %35, i64 0, i32 0, i32 0, i32 2
  %39 = bitcast %"class.WTF::Vector"* %34 to i64*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %36, i8 0, i64 16, i1 false) #5
  %40 = load i64, i64* %39, align 8
  %41 = bitcast %"class.WTF::Vector"* %35 to i64*
  store atomic i64 0, i64* %39 monotonic, align 8
  store atomic i64 %40, i64* %41 monotonic, align 8
  %42 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %34, i64 0, i32 0, i32 0, i32 1
  %43 = load i32, i32* %37, align 4
  %44 = load i32, i32* %42, align 4
  store i32 %44, i32* %37, align 4
  store i32 %43, i32* %42, align 4
  %45 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %34, i64 0, i32 0, i32 0, i32 2
  %46 = load i32, i32* %38, align 4
  %47 = load i32, i32* %45, align 4
  store i32 %47, i32* %38, align 4
  store i32 %46, i32* %45, align 4
  %48 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %34, i64 0, i32 0, i32 0, i32 0
  %49 = load i8*, i8** %48, align 8
  %50 = icmp eq i8* %49, null
  br i1 %50, label %55, label %51, !prof !2

51:                                               ; preds = %33
  %52 = icmp eq i32 %46, 0
  br i1 %52, label %54, label %53, !prof !3

53:                                               ; preds = %51
  store i32 0, i32* %45, align 4
  br label %54

54:                                               ; preds = %53, %51
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %49) #5
  store i8* null, i8** %48, align 8
  br label %55

55:                                               ; preds = %54, %33
  %56 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %35, i64 1
  %57 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %34, i64 1
  %58 = icmp eq %"class.WTF::Vector"* %57, %28
  br i1 %58, label %134, label %33

59:                                               ; preds = %1
  %60 = zext i32 %22 to i64
  %61 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %5, i64 %60
  %62 = icmp eq i32 %22, 0
  br i1 %62, label %93, label %63

63:                                               ; preds = %59, %85
  %64 = phi %"class.WTF::Vector"* [ %87, %85 ], [ %5, %59 ]
  %65 = phi %"class.WTF::Vector"* [ %86, %85 ], [ %24, %59 ]
  %66 = bitcast %"class.WTF::Vector"* %65 to i8*
  %67 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %65, i64 0, i32 0, i32 0, i32 1
  %68 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %65, i64 0, i32 0, i32 0, i32 2
  %69 = bitcast %"class.WTF::Vector"* %64 to i64*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %66, i8 0, i64 16, i1 false) #5
  %70 = load i64, i64* %69, align 8
  %71 = bitcast %"class.WTF::Vector"* %65 to i64*
  store atomic i64 0, i64* %69 monotonic, align 8
  store atomic i64 %70, i64* %71 monotonic, align 8
  %72 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %64, i64 0, i32 0, i32 0, i32 1
  %73 = load i32, i32* %67, align 4
  %74 = load i32, i32* %72, align 4
  store i32 %74, i32* %67, align 4
  store i32 %73, i32* %72, align 4
  %75 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %64, i64 0, i32 0, i32 0, i32 2
  %76 = load i32, i32* %68, align 4
  %77 = load i32, i32* %75, align 4
  store i32 %77, i32* %68, align 4
  store i32 %76, i32* %75, align 4
  %78 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %64, i64 0, i32 0, i32 0, i32 0
  %79 = load i8*, i8** %78, align 8
  %80 = icmp eq i8* %79, null
  br i1 %80, label %85, label %81, !prof !2

81:                                               ; preds = %63
  %82 = icmp eq i32 %76, 0
  br i1 %82, label %84, label %83, !prof !3

83:                                               ; preds = %81
  store i32 0, i32* %75, align 4
  br label %84

84:                                               ; preds = %83, %81
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %79) #5
  store i8* null, i8** %78, align 8
  br label %85

85:                                               ; preds = %84, %63
  %86 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %65, i64 1
  %87 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %64, i64 1
  %88 = icmp eq %"class.WTF::Vector"* %87, %61
  br i1 %88, label %89, label %63

89:                                               ; preds = %85
  %90 = load i32, i32* %2, align 8
  %91 = load i32, i32* %19, align 8
  %92 = load %"class.WTF::Vector"*, %"class.WTF::Vector"** %4, align 8
  br label %93

93:                                               ; preds = %89, %59
  %94 = phi %"class.WTF::Vector"* [ %92, %89 ], [ %24, %59 ]
  %95 = phi i32 [ %91, %89 ], [ %20, %59 ]
  %96 = phi i32 [ %90, %89 ], [ %18, %59 ]
  %97 = sub i32 %95, %3
  %98 = add i32 %97, %96
  %99 = zext i32 %3 to i64
  %100 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %5, i64 %99
  %101 = icmp eq i32 %95, %3
  br i1 %101, label %133, label %102

102:                                              ; preds = %93
  %103 = zext i32 %98 to i64
  %104 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %94, i64 %103
  %105 = zext i32 %95 to i64
  %106 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %5, i64 %105
  br label %107

107:                                              ; preds = %102, %129
  %108 = phi %"class.WTF::Vector"* [ %131, %129 ], [ %106, %102 ]
  %109 = phi %"class.WTF::Vector"* [ %130, %129 ], [ %104, %102 ]
  %110 = bitcast %"class.WTF::Vector"* %109 to i8*
  %111 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %109, i64 0, i32 0, i32 0, i32 1
  %112 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %109, i64 0, i32 0, i32 0, i32 2
  %113 = bitcast %"class.WTF::Vector"* %108 to i64*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %110, i8 0, i64 16, i1 false) #5
  %114 = load i64, i64* %113, align 8
  %115 = bitcast %"class.WTF::Vector"* %109 to i64*
  store atomic i64 0, i64* %113 monotonic, align 8
  store atomic i64 %114, i64* %115 monotonic, align 8
  %116 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %108, i64 0, i32 0, i32 0, i32 1
  %117 = load i32, i32* %111, align 4
  %118 = load i32, i32* %116, align 4
  store i32 %118, i32* %111, align 4
  store i32 %117, i32* %116, align 4
  %119 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %108, i64 0, i32 0, i32 0, i32 2
  %120 = load i32, i32* %112, align 4
  %121 = load i32, i32* %119, align 4
  store i32 %121, i32* %112, align 4
  store i32 %120, i32* %119, align 4
  %122 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %108, i64 0, i32 0, i32 0, i32 0
  %123 = load i8*, i8** %122, align 8
  %124 = icmp eq i8* %123, null
  br i1 %124, label %129, label %125, !prof !2

125:                                              ; preds = %107
  %126 = icmp eq i32 %120, 0
  br i1 %126, label %128, label %127, !prof !3

127:                                              ; preds = %125
  store i32 0, i32* %119, align 4
  br label %128

128:                                              ; preds = %127, %125
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %123) #5
  store i8* null, i8** %122, align 8
  br label %129

129:                                              ; preds = %128, %107
  %130 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %109, i64 1
  %131 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %108, i64 1
  %132 = icmp eq %"class.WTF::Vector"* %131, %100
  br i1 %132, label %133, label %107

133:                                              ; preds = %129, %93
  store i32 %98, i32* %19, align 8
  br label %134

134:                                              ; preds = %55, %25, %133
  %135 = bitcast %"class.WTF::Vector"* %5 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %135) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6VectorIhLj0ES0_EEEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #5
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 134086656
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #5
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 134086656) #5
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.3, i64 0, i64 0), i8* %11, i8* %12) #5
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #5
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.4, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #5
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #5
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #5
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #5
  %20 = shl i64 %0, 4
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #5
  ret i64 %21
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #3

declare i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64) local_unnamed_addr #3

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #3

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #3

declare i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64, i8*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = !{!"branch_weights", i32 1, i32 2000}
