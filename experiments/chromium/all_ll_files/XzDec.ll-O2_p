; ModuleID = '../../third_party/lzma_sdk/XzDec.c'
source_filename = "../../third_party/lzma_sdk/XzDec.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._IStateCoder = type { i8*, void (i8*, %struct.ISzAlloc*)*, i32 (i8*, i8*, i64, %struct.ISzAlloc*)*, void (i8*)*, i32 (i8*, i8*, i64*, i8*, i64*, i32, i32, i32*)* }
%struct.ISzAlloc = type { i8* (i8*, i64)*, void (i8*, i8*)* }
%struct.CMixCoder = type { %struct.ISzAlloc*, i8*, i32, [3 x i32], [3 x i64], [3 x i64], [4 x i64], [4 x %struct._IStateCoder] }
%struct.CXzBlock = type { i64, i64, i8, [4 x %struct.CXzFilter] }
%struct.CXzFilter = type { i64, i32, [20 x i8] }
%struct.CXzUnpacker = type { i32, i32, i32, i32, i16, i32, i64, i64, i64, i64, i64, i64, i64, i64, i64, i32, %struct.CMixCoder, %struct.CXzBlock, %struct.CXzCheck, %struct.CSha256, [32 x i8], [1024 x i8] }
%struct.CXzCheck = type { i32, i32, i64, %struct.CSha256 }
%struct.CSha256 = type { [8 x i32], i64, [64 x i8] }
%struct.CLzmaDec = type { %struct._CLzmaProps, i32*, i8*, i8*, i32, i32, i64, i64, i32, i32, i32, [4 x i32], i32, i32, i32, i32, i32, [20 x i8] }
%struct._CLzmaProps = type { i32, i32, i32, i32 }
%struct.CLzma2Dec = type { %struct.CLzmaDec, i32, i32, i32, i8, i32, i32, i32 }

@XZ_SIG = external local_unnamed_addr constant [6 x i8], align 1
@g_CrcTable = external local_unnamed_addr global [0 x i32], align 4
@XZ_FOOTER_SIG = external constant [2 x i8], align 1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @Xz_ReadVarInt(i8* nocapture readonly, i64, i64* nocapture) local_unnamed_addr #0 {
  store i64 0, i64* %2, align 8
  %4 = icmp ult i64 %1, 9
  %5 = select i1 %4, i64 %1, i64 9
  br label %6

6:                                                ; preds = %10, %3
  %7 = phi i64 [ %19, %10 ], [ 0, %3 ]
  %8 = phi i64 [ %15, %10 ], [ 0, %3 ]
  %9 = icmp ult i64 %8, %5
  br i1 %9, label %10, label %28

10:                                               ; preds = %6
  %11 = getelementptr inbounds i8, i8* %0, i64 %8
  %12 = load i8, i8* %11, align 1
  %13 = and i8 %12, 127
  %14 = zext i8 %13 to i64
  %15 = add nuw nsw i64 %8, 1
  %16 = mul i64 %8, 7
  %17 = and i64 %16, 4294967295
  %18 = shl i64 %14, %17
  %19 = or i64 %18, %7
  store i64 %19, i64* %2, align 8
  %20 = icmp sgt i8 %12, -1
  br i1 %20, label %21, label %6

21:                                               ; preds = %10
  %22 = trunc i64 %8 to i32
  %23 = trunc i64 %15 to i32
  %24 = icmp eq i8 %12, 0
  %25 = icmp ne i32 %22, 0
  %26 = and i1 %25, %24
  %27 = select i1 %26, i32 0, i32 %23
  br label %28

28:                                               ; preds = %6, %21
  %29 = phi i32 [ %27, %21 ], [ 0, %6 ]
  ret i32 %29
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @BraState_SetFromMethod(%struct._IStateCoder* nocapture, i64, i32, %struct.ISzAlloc*) local_unnamed_addr #2 {
  %5 = add i64 %1, -3
  %6 = icmp ult i64 %5, 7
  br i1 %6, label %7, label %24

7:                                                ; preds = %4
  %8 = getelementptr inbounds %struct._IStateCoder, %struct._IStateCoder* %0, i64 0, i32 0
  store i8* null, i8** %8, align 8
  %9 = getelementptr inbounds %struct.ISzAlloc, %struct.ISzAlloc* %3, i64 0, i32 0
  %10 = load i8* (i8*, i64)*, i8* (i8*, i64)** %9, align 8
  %11 = bitcast %struct.ISzAlloc* %3 to i8*
  %12 = tail call i8* %10(i8* %11, i64 16688) #7
  %13 = icmp eq i8* %12, null
  br i1 %13, label %24, label %14

14:                                               ; preds = %7
  %15 = trunc i64 %1 to i32
  %16 = getelementptr inbounds i8, i8* %12, i64 24
  %17 = bitcast i8* %16 to i32*
  store i32 %15, i32* %17, align 8
  %18 = getelementptr inbounds i8, i8* %12, i64 28
  %19 = bitcast i8* %18 to i32*
  store i32 %2, i32* %19, align 4
  store i8* %12, i8** %8, align 8
  %20 = getelementptr inbounds %struct._IStateCoder, %struct._IStateCoder* %0, i64 0, i32 1
  store void (i8*, %struct.ISzAlloc*)* @BraState_Free, void (i8*, %struct.ISzAlloc*)** %20, align 8
  %21 = getelementptr inbounds %struct._IStateCoder, %struct._IStateCoder* %0, i64 0, i32 2
  store i32 (i8*, i8*, i64, %struct.ISzAlloc*)* @BraState_SetProps, i32 (i8*, i8*, i64, %struct.ISzAlloc*)** %21, align 8
  %22 = getelementptr inbounds %struct._IStateCoder, %struct._IStateCoder* %0, i64 0, i32 3
  store void (i8*)* @BraState_Init, void (i8*)** %22, align 8
  %23 = getelementptr inbounds %struct._IStateCoder, %struct._IStateCoder* %0, i64 0, i32 4
  store i32 (i8*, i8*, i64*, i8*, i64*, i32, i32, i32*)* @BraState_Code, i32 (i8*, i8*, i64*, i8*, i64*, i32, i32, i32*)** %23, align 8
  br label %24

24:                                               ; preds = %4, %7, %14
  %25 = phi i32 [ 0, %14 ], [ 4, %4 ], [ 2, %7 ]
  ret i32 %25
}

; Function Attrs: nounwind ssp uwtable
define internal void @BraState_Free(i8*, %struct.ISzAlloc*) #2 {
  %3 = getelementptr inbounds %struct.ISzAlloc, %struct.ISzAlloc* %1, i64 0, i32 1
  %4 = load void (i8*, i8*)*, void (i8*, i8*)** %3, align 8
  %5 = bitcast %struct.ISzAlloc* %1 to i8*
  tail call void %4(i8* %5, i8* %0) #7
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i32 @BraState_SetProps(i8* nocapture, i8* nocapture readonly, i64, %struct.ISzAlloc* nocapture readnone) #0 {
  %5 = getelementptr inbounds i8, i8* %0, i64 36
  %6 = bitcast i8* %5 to i32*
  store i32 0, i32* %6, align 4
  %7 = getelementptr inbounds i8, i8* %0, i64 24
  %8 = bitcast i8* %7 to i32*
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i32 %9, 3
  br i1 %10, label %11, label %19

11:                                               ; preds = %4
  %12 = icmp eq i64 %2, 1
  br i1 %12, label %13, label %34

13:                                               ; preds = %11
  %14 = load i8, i8* %1, align 1
  %15 = zext i8 %14 to i32
  %16 = add nuw nsw i32 %15, 1
  %17 = getelementptr inbounds i8, i8* %0, i64 32
  %18 = bitcast i8* %17 to i32*
  store i32 %16, i32* %18, align 8
  br label %33

19:                                               ; preds = %4
  switch i64 %2, label %34 [
    i64 4, label %20
    i64 0, label %33
  ]

20:                                               ; preds = %19
  %21 = bitcast i8* %1 to i32*
  %22 = load i32, i32* %21, align 4
  switch i32 %9, label %32 [
    i32 5, label %23
    i32 7, label %23
    i32 9, label %23
    i32 8, label %26
    i32 6, label %29
  ]

23:                                               ; preds = %20, %20, %20
  %24 = and i32 %22, 3
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %32, label %34

26:                                               ; preds = %20
  %27 = and i32 %22, 1
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %32, label %34

29:                                               ; preds = %20
  %30 = and i32 %22, 15
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %32, label %34

32:                                               ; preds = %23, %26, %29, %20
  store i32 %22, i32* %6, align 4
  br label %33

33:                                               ; preds = %19, %32, %13
  br label %34

34:                                               ; preds = %19, %23, %26, %29, %11, %33
  %35 = phi i32 [ 0, %33 ], [ 4, %11 ], [ 4, %29 ], [ 4, %26 ], [ 4, %23 ], [ 4, %19 ]
  ret i32 %35
}

; Function Attrs: nounwind ssp uwtable
define internal void @BraState_Init(i8*) #2 {
  %2 = getelementptr inbounds i8, i8* %0, i64 40
  %3 = bitcast i8* %2 to i32*
  store i32 0, i32* %3, align 8
  %4 = getelementptr inbounds i8, i8* %0, i64 24
  %5 = bitcast i8* %4 to i32*
  call void @llvm.memset.p0i8.i64(i8* align 8 %0, i8 0, i64 24, i1 false)
  %6 = load i32, i32* %5, align 8
  %7 = icmp eq i32 %6, 3
  br i1 %7, label %8, label %10

8:                                                ; preds = %1
  %9 = getelementptr inbounds i8, i8* %0, i64 44
  tail call void @Delta_Init(i8* %9) #7
  br label %10

10:                                               ; preds = %8, %1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @BraState_Code(i8*, i8* nocapture, i64* nocapture, i8* nocapture readonly, i64* nocapture, i32, i32, i32* nocapture) #2 {
  %9 = load i64, i64* %2, align 8
  %10 = load i64, i64* %4, align 8
  store i64 0, i64* %2, align 8
  store i64 0, i64* %4, align 8
  store i32 0, i32* %7, align 4
  %11 = icmp eq i64 %9, 0
  %12 = bitcast i8* %0 to i64*
  br i1 %11, label %113, label %13

13:                                               ; preds = %8
  %14 = getelementptr inbounds i8, i8* %0, i64 8
  %15 = bitcast i8* %14 to i64*
  %16 = getelementptr inbounds i8, i8* %0, i64 300
  %17 = getelementptr inbounds i8, i8* %0, i64 16
  %18 = bitcast i8* %17 to i64*
  %19 = getelementptr inbounds i8, i8* %0, i64 24
  %20 = bitcast i8* %19 to i32*
  %21 = getelementptr inbounds i8, i8* %0, i64 36
  %22 = bitcast i8* %21 to i32*
  %23 = getelementptr inbounds i8, i8* %0, i64 28
  %24 = bitcast i8* %23 to i32*
  %25 = getelementptr inbounds i8, i8* %0, i64 40
  %26 = bitcast i8* %25 to i32*
  %27 = getelementptr inbounds i8, i8* %0, i64 44
  %28 = getelementptr inbounds i8, i8* %0, i64 32
  %29 = bitcast i8* %28 to i32*
  %30 = icmp eq i32 %5, 0
  br label %31

31:                                               ; preds = %112, %13
  %32 = phi i64 [ %10, %13 ], [ %65, %112 ]
  %33 = phi i64 [ %9, %13 ], [ %37, %112 ]
  %34 = phi i8* [ %1, %13 ], [ %38, %112 ]
  %35 = phi i8* [ %3, %13 ], [ %64, %112 ]
  br label %36

36:                                               ; preds = %31, %42
  %37 = phi i64 [ %33, %31 ], [ %52, %42 ]
  %38 = phi i8* [ %34, %31 ], [ %51, %42 ]
  %39 = load i64, i64* %12, align 8
  %40 = load i64, i64* %15, align 8
  %41 = icmp eq i64 %40, %39
  br i1 %41, label %54, label %42

42:                                               ; preds = %36
  %43 = sub i64 %40, %39
  %44 = icmp ugt i64 %43, %37
  %45 = select i1 %44, i64 %37, i64 %43
  %46 = getelementptr inbounds i8, i8* %16, i64 %39
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %38, i8* align 1 %46, i64 %45, i1 false)
  %47 = load i64, i64* %12, align 8
  %48 = add i64 %47, %45
  store i64 %48, i64* %12, align 8
  %49 = load i64, i64* %2, align 8
  %50 = add i64 %49, %45
  store i64 %50, i64* %2, align 8
  %51 = getelementptr inbounds i8, i8* %38, i64 %45
  %52 = sub i64 %37, %45
  %53 = icmp eq i64 %52, 0
  br i1 %53, label %113, label %36

54:                                               ; preds = %36
  %55 = load i64, i64* %18, align 8
  %56 = sub i64 %55, %39
  store i64 %56, i64* %18, align 8
  %57 = getelementptr inbounds i8, i8* %16, i64 %39
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %16, i8* align 1 %57, i64 %56, i1 false)
  %58 = sub i64 16384, %56
  %59 = icmp ugt i64 %58, %32
  %60 = select i1 %59, i64 %32, i64 %58
  %61 = getelementptr inbounds i8, i8* %16, i64 %56
  call void @llvm.memset.p0i8.i64(i8* align 8 %0, i8 0, i64 16, i1 false)
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %61, i8* align 1 %35, i64 %60, i1 false)
  %62 = load i64, i64* %4, align 8
  %63 = add i64 %62, %60
  store i64 %63, i64* %4, align 8
  %64 = getelementptr inbounds i8, i8* %35, i64 %60
  %65 = sub i64 %32, %60
  %66 = load i64, i64* %18, align 8
  %67 = add i64 %66, %60
  store i64 %67, i64* %18, align 8
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %113, label %69

69:                                               ; preds = %54
  %70 = load i32, i32* %20, align 8
  switch i32 %70, label %125 [
    i32 3, label %71
    i32 4, label %79
    i32 5, label %83
    i32 6, label %87
    i32 7, label %91
    i32 8, label %95
    i32 9, label %99
  ]

71:                                               ; preds = %69
  %72 = load i32, i32* %24, align 4
  %73 = icmp eq i32 %72, 0
  %74 = load i32, i32* %29, align 8
  br i1 %73, label %76, label %75

75:                                               ; preds = %71
  tail call void @Delta_Encode(i8* %27, i32 %74, i8* %16, i64 %67) #7
  br label %77

76:                                               ; preds = %71
  tail call void @Delta_Decode(i8* %27, i32 %74, i8* %16, i64 %67) #7
  br label %77

77:                                               ; preds = %76, %75
  %78 = load i64, i64* %18, align 8
  br label %103

79:                                               ; preds = %69
  %80 = load i32, i32* %22, align 4
  %81 = load i32, i32* %24, align 4
  %82 = tail call i64 @x86_Convert(i8* %16, i64 %67, i32 %80, i32* %26, i32 %81) #7
  br label %103

83:                                               ; preds = %69
  %84 = load i32, i32* %22, align 4
  %85 = load i32, i32* %24, align 4
  %86 = tail call i64 @PPC_Convert(i8* %16, i64 %67, i32 %84, i32 %85) #7
  br label %103

87:                                               ; preds = %69
  %88 = load i32, i32* %22, align 4
  %89 = load i32, i32* %24, align 4
  %90 = tail call i64 @IA64_Convert(i8* %16, i64 %67, i32 %88, i32 %89) #7
  br label %103

91:                                               ; preds = %69
  %92 = load i32, i32* %22, align 4
  %93 = load i32, i32* %24, align 4
  %94 = tail call i64 @ARM_Convert(i8* %16, i64 %67, i32 %92, i32 %93) #7
  br label %103

95:                                               ; preds = %69
  %96 = load i32, i32* %22, align 4
  %97 = load i32, i32* %24, align 4
  %98 = tail call i64 @ARMT_Convert(i8* %16, i64 %67, i32 %96, i32 %97) #7
  br label %103

99:                                               ; preds = %69
  %100 = load i32, i32* %22, align 4
  %101 = load i32, i32* %24, align 4
  %102 = tail call i64 @SPARC_Convert(i8* %16, i64 %67, i32 %100, i32 %101) #7
  br label %103

103:                                              ; preds = %99, %95, %91, %87, %83, %79, %77
  %104 = phi i64 [ %102, %99 ], [ %98, %95 ], [ %94, %91 ], [ %90, %87 ], [ %86, %83 ], [ %82, %79 ], [ %78, %77 ]
  store i64 %104, i64* %15, align 8
  %105 = trunc i64 %104 to i32
  %106 = load i32, i32* %22, align 4
  %107 = add i32 %106, %105
  store i32 %107, i32* %22, align 4
  %108 = icmp eq i64 %104, 0
  br i1 %108, label %109, label %112

109:                                              ; preds = %103
  br i1 %30, label %113, label %110

110:                                              ; preds = %109
  %111 = load i64, i64* %18, align 8
  store i64 %111, i64* %15, align 8
  br label %112

112:                                              ; preds = %110, %103
  br label %31

113:                                              ; preds = %109, %54, %42, %8
  %114 = phi i64 [ %10, %8 ], [ %32, %42 ], [ %65, %54 ], [ %65, %109 ]
  %115 = getelementptr inbounds i8, i8* %0, i64 16
  %116 = bitcast i8* %115 to i64*
  %117 = load i64, i64* %116, align 8
  %118 = load i64, i64* %12, align 8
  %119 = icmp eq i64 %117, %118
  %120 = icmp eq i64 %114, 0
  %121 = and i1 %120, %119
  %122 = icmp ne i32 %5, 0
  %123 = and i1 %122, %121
  br i1 %123, label %124, label %125

124:                                              ; preds = %113
  store i32 1, i32* %7, align 4
  br label %125

125:                                              ; preds = %69, %113, %124
  %126 = phi i32 [ 0, %124 ], [ 0, %113 ], [ 4, %69 ]
  ret i32 %126
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @MixCoder_Construct(%struct.CMixCoder* nocapture, %struct.ISzAlloc*) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %struct.CMixCoder, %struct.CMixCoder* %0, i64 0, i32 0
  store %struct.ISzAlloc* %1, %struct.ISzAlloc** %3, align 8
  %4 = getelementptr inbounds %struct.CMixCoder, %struct.CMixCoder* %0, i64 0, i32 1
  store i8* null, i8** %4, align 8
  %5 = getelementptr inbounds %struct.CMixCoder, %struct.CMixCoder* %0, i64 0, i32 2
  store i32 0, i32* %5, align 8
  %6 = getelementptr inbounds %struct.CMixCoder, %struct.CMixCoder* %0, i64 0, i32 7, i64 0, i32 0
  store i8* null, i8** %6, align 8
  %7 = getelementptr inbounds %struct.CMixCoder, %struct.CMixCoder* %0, i64 0, i32 7, i64 1, i32 0
  store i8* null, i8** %7, align 8
  %8 = getelementptr inbounds %struct.CMixCoder, %struct.CMixCoder* %0, i64 0, i32 7, i64 2, i32 0
  store i8* null, i8** %8, align 8
  %9 = getelementptr inbounds %struct.CMixCoder, %struct.CMixCoder* %0, i64 0, i32 7, i64 3, i32 0
  store i8* null, i8** %9, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @MixCoder_Free(%struct.CMixCoder* nocapture) local_unnamed_addr #2 {
  %2 = getelementptr inbounds %struct.CMixCoder, %struct.CMixCoder* %0, i64 0, i32 2
  %3 = load i32, i32* %2, align 8
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %25, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.CMixCoder, %struct.CMixCoder* %0, i64 0, i32 0
  br label %7

7:                                                ; preds = %5, %20
  %8 = phi i32 [ %3, %5 ], [ %21, %20 ]
  %9 = phi i64 [ 0, %5 ], [ %22, %20 ]
  %10 = load %struct.ISzAlloc*, %struct.ISzAlloc** %6, align 8
  %11 = icmp eq %struct.ISzAlloc* %10, null
  br i1 %11, label %20, label %12

12:                                               ; preds = %7
  %13 = getelementptr inbounds %struct.CMixCoder, %struct.CMixCoder* %0, i64 0, i32 7, i64 %9, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %20, label %16

16:                                               ; preds = %12
  %17 = getelementptr inbounds %struct.CMixCoder, %struct.CMixCoder* %0, i64 0, i32 7, i64 %9, i32 1
  %18 = load void (i8*, %struct.ISzAlloc*)*, void (i8*, %struct.ISzAlloc*)** %17, align 8
  tail call void %18(i8* nonnull %14, %struct.ISzAlloc* nonnull %10) #7
  %19 = load i32, i32* %2, align 8
  br label %20

20:                                               ; preds = %12, %7, %16
  %21 = phi i32 [ %8, %12 ], [ %8, %7 ], [ %19, %16 ]
  %22 = add nuw nsw i64 %9, 1
  %23 = zext i32 %21 to i64
  %24 = icmp ult i64 %22, %23
  br i1 %24, label %7, label %25

25:                                               ; preds = %20, %1
  store i32 0, i32* %2, align 8
  %26 = getelementptr inbounds %struct.CMixCoder, %struct.CMixCoder* %0, i64 0, i32 1
  %27 = load i8*, i8** %26, align 8
  %28 = icmp eq i8* %27, null
  br i1 %28, label %35, label %29

29:                                               ; preds = %25
  %30 = getelementptr inbounds %struct.CMixCoder, %struct.CMixCoder* %0, i64 0, i32 0
  %31 = load %struct.ISzAlloc*, %struct.ISzAlloc** %30, align 8
  %32 = getelementptr inbounds %struct.ISzAlloc, %struct.ISzAlloc* %31, i64 0, i32 1
  %33 = load void (i8*, i8*)*, void (i8*, i8*)** %32, align 8
  %34 = bitcast %struct.ISzAlloc* %31 to i8*
  tail call void %33(i8* %34, i8* nonnull %27) #7
  store i8* null, i8** %26, align 8
  br label %35

35:                                               ; preds = %25, %29
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @MixCoder_Init(%struct.CMixCoder* nocapture) local_unnamed_addr #2 {
  %2 = getelementptr %struct.CMixCoder, %struct.CMixCoder* %0, i64 0, i32 3, i64 0
  %3 = getelementptr inbounds %struct.CMixCoder, %struct.CMixCoder* %0, i64 0, i32 2
  %4 = bitcast i32* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %4, i8 0, i64 60, i1 false)
  %5 = load i32, i32* %3, align 8
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %17, label %7

7:                                                ; preds = %1, %7
  %8 = phi i64 [ %13, %7 ], [ 0, %1 ]
  %9 = getelementptr inbounds %struct.CMixCoder, %struct.CMixCoder* %0, i64 0, i32 7, i64 %8, i32 3
  %10 = load void (i8*)*, void (i8*)** %9, align 8
  %11 = getelementptr inbounds %struct.CMixCoder, %struct.CMixCoder* %0, i64 0, i32 7, i64 %8, i32 0
  %12 = load i8*, i8** %11, align 8
  tail call void %10(i8* %12) #7
  %13 = add nuw nsw i64 %8, 1
  %14 = load i32, i32* %3, align 8
  %15 = zext i32 %14 to i64
  %16 = icmp ult i64 %13, %15
  br i1 %16, label %7, label %17

17:                                               ; preds = %7, %1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @MixCoder_SetFromMethod(%struct.CMixCoder* nocapture, i32, i64) local_unnamed_addr #2 {
  %4 = zext i32 %1 to i64
  %5 = getelementptr inbounds %struct.CMixCoder, %struct.CMixCoder* %0, i64 0, i32 7, i64 %4
  %6 = getelementptr inbounds %struct.CMixCoder, %struct.CMixCoder* %0, i64 0, i32 6, i64 %4
  store i64 %2, i64* %6, align 8
  %7 = icmp eq i64 %2, 33
  br i1 %7, label %8, label %23

8:                                                ; preds = %3
  %9 = getelementptr inbounds %struct.CMixCoder, %struct.CMixCoder* %0, i64 0, i32 0
  %10 = load %struct.ISzAlloc*, %struct.ISzAlloc** %9, align 8
  %11 = getelementptr inbounds %struct.ISzAlloc, %struct.ISzAlloc* %10, i64 0, i32 0
  %12 = load i8* (i8*, i64)*, i8* (i8*, i64)** %11, align 8
  %13 = bitcast %struct.ISzAlloc* %10 to i8*
  %14 = tail call i8* %12(i8* %13, i64 168) #7
  %15 = getelementptr inbounds %struct._IStateCoder, %struct._IStateCoder* %5, i64 0, i32 0
  store i8* %14, i8** %15, align 8
  %16 = icmp eq i8* %14, null
  br i1 %16, label %47, label %17

17:                                               ; preds = %8
  %18 = getelementptr inbounds %struct.CMixCoder, %struct.CMixCoder* %0, i64 0, i32 7, i64 %4, i32 1
  store void (i8*, %struct.ISzAlloc*)* @Lzma2State_Free, void (i8*, %struct.ISzAlloc*)** %18, align 8
  %19 = getelementptr inbounds %struct.CMixCoder, %struct.CMixCoder* %0, i64 0, i32 7, i64 %4, i32 2
  store i32 (i8*, i8*, i64, %struct.ISzAlloc*)* @Lzma2State_SetProps, i32 (i8*, i8*, i64, %struct.ISzAlloc*)** %19, align 8
  %20 = getelementptr inbounds %struct.CMixCoder, %struct.CMixCoder* %0, i64 0, i32 7, i64 %4, i32 3
  store void (i8*)* @Lzma2State_Init, void (i8*)** %20, align 8
  %21 = getelementptr inbounds %struct.CMixCoder, %struct.CMixCoder* %0, i64 0, i32 7, i64 %4, i32 4
  store i32 (i8*, i8*, i64*, i8*, i64*, i32, i32, i32*)* @Lzma2State_Code, i32 (i8*, i8*, i64*, i8*, i64*, i32, i32, i32*)** %21, align 8
  %22 = getelementptr inbounds i8, i8* %14, i64 16
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %22, i8 0, i64 16, i1 false) #7
  br label %47

23:                                               ; preds = %3
  %24 = icmp eq i32 %1, 0
  br i1 %24, label %47, label %25

25:                                               ; preds = %23
  %26 = getelementptr inbounds %struct.CMixCoder, %struct.CMixCoder* %0, i64 0, i32 0
  %27 = load %struct.ISzAlloc*, %struct.ISzAlloc** %26, align 8
  %28 = add i64 %2, -3
  %29 = icmp ult i64 %28, 7
  br i1 %29, label %30, label %47

30:                                               ; preds = %25
  %31 = getelementptr inbounds %struct._IStateCoder, %struct._IStateCoder* %5, i64 0, i32 0
  store i8* null, i8** %31, align 8
  %32 = getelementptr inbounds %struct.ISzAlloc, %struct.ISzAlloc* %27, i64 0, i32 0
  %33 = load i8* (i8*, i64)*, i8* (i8*, i64)** %32, align 8
  %34 = bitcast %struct.ISzAlloc* %27 to i8*
  %35 = tail call i8* %33(i8* %34, i64 16688) #7
  %36 = icmp eq i8* %35, null
  br i1 %36, label %47, label %37

37:                                               ; preds = %30
  %38 = trunc i64 %2 to i32
  %39 = getelementptr inbounds i8, i8* %35, i64 24
  %40 = bitcast i8* %39 to i32*
  store i32 %38, i32* %40, align 8
  %41 = getelementptr inbounds i8, i8* %35, i64 28
  %42 = bitcast i8* %41 to i32*
  store i32 0, i32* %42, align 4
  store i8* %35, i8** %31, align 8
  %43 = getelementptr inbounds %struct.CMixCoder, %struct.CMixCoder* %0, i64 0, i32 7, i64 %4, i32 1
  store void (i8*, %struct.ISzAlloc*)* @BraState_Free, void (i8*, %struct.ISzAlloc*)** %43, align 8
  %44 = getelementptr inbounds %struct.CMixCoder, %struct.CMixCoder* %0, i64 0, i32 7, i64 %4, i32 2
  store i32 (i8*, i8*, i64, %struct.ISzAlloc*)* @BraState_SetProps, i32 (i8*, i8*, i64, %struct.ISzAlloc*)** %44, align 8
  %45 = getelementptr inbounds %struct.CMixCoder, %struct.CMixCoder* %0, i64 0, i32 7, i64 %4, i32 3
  store void (i8*)* @BraState_Init, void (i8*)** %45, align 8
  %46 = getelementptr inbounds %struct.CMixCoder, %struct.CMixCoder* %0, i64 0, i32 7, i64 %4, i32 4
  store i32 (i8*, i8*, i64*, i8*, i64*, i32, i32, i32*)* @BraState_Code, i32 (i8*, i8*, i64*, i8*, i64*, i32, i32, i32*)** %46, align 8
  br label %47

47:                                               ; preds = %37, %30, %25, %17, %8, %23
  %48 = phi i32 [ 4, %23 ], [ 0, %17 ], [ 2, %8 ], [ 0, %37 ], [ 4, %25 ], [ 2, %30 ]
  ret i32 %48
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @MixCoder_Code(%struct.CMixCoder* nocapture, i8*, i64* nocapture, i8*, i64* nocapture, i32, i32, i32* nocapture) local_unnamed_addr #2 {
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i32, align 4
  %12 = load i64, i64* %2, align 8
  %13 = load i64, i64* %4, align 8
  store i64 0, i64* %2, align 8
  store i64 0, i64* %4, align 8
  store i32 2, i32* %7, align 4
  %14 = getelementptr inbounds %struct.CMixCoder, %struct.CMixCoder* %0, i64 0, i32 1
  %15 = load i8*, i8** %14, align 8
  %16 = icmp eq i8* %15, null
  br i1 %16, label %17, label %25

17:                                               ; preds = %8
  %18 = getelementptr inbounds %struct.CMixCoder, %struct.CMixCoder* %0, i64 0, i32 0
  %19 = load %struct.ISzAlloc*, %struct.ISzAlloc** %18, align 8
  %20 = getelementptr inbounds %struct.ISzAlloc, %struct.ISzAlloc* %19, i64 0, i32 0
  %21 = load i8* (i8*, i64)*, i8* (i8*, i64)** %20, align 8
  %22 = bitcast %struct.ISzAlloc* %19 to i8*
  %23 = tail call i8* %21(i8* %22, i64 393216) #7
  store i8* %23, i8** %14, align 8
  %24 = icmp eq i8* %23, null
  br i1 %24, label %147, label %25

25:                                               ; preds = %17, %8
  %26 = getelementptr inbounds %struct.CMixCoder, %struct.CMixCoder* %0, i64 0, i32 2
  %27 = load i32, i32* %26, align 8
  %28 = icmp eq i32 %27, 1
  %29 = select i1 %28, i32 %6, i32 0
  %30 = bitcast i64* %9 to i8*
  %31 = bitcast i64* %10 to i8*
  %32 = bitcast i32* %11 to i8*
  br label %33

33:                                               ; preds = %141, %25
  %34 = phi i32 [ %27, %25 ], [ %133, %141 ]
  %35 = phi i8* [ %3, %25 ], [ %134, %141 ]
  %36 = phi i8* [ %1, %25 ], [ %135, %141 ]
  %37 = phi i32 [ 1, %25 ], [ %136, %141 ]
  %38 = icmp eq i32 %34, 0
  br i1 %38, label %143, label %39

39:                                               ; preds = %33, %132
  %40 = phi i32 [ %133, %132 ], [ %34, %33 ]
  %41 = phi i64 [ %138, %132 ], [ 0, %33 ]
  %42 = phi i32 [ %137, %132 ], [ 0, %33 ]
  %43 = phi i32 [ %136, %132 ], [ %37, %33 ]
  %44 = phi i8* [ %135, %132 ], [ %36, %33 ]
  %45 = phi i8* [ %134, %132 ], [ %35, %33 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %30) #7
  store i64 -6148914691236517206, i64* %9, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %31) #7
  store i64 -6148914691236517206, i64* %10, align 8
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %32) #7
  store i32 -1431655766, i32* %11, align 4
  %46 = icmp eq i64 %41, 0
  br i1 %46, label %47, label %50

47:                                               ; preds = %39
  %48 = load i64, i64* %4, align 8
  %49 = sub i64 %13, %48
  store i64 %49, i64* %10, align 8
  br label %66

50:                                               ; preds = %39
  %51 = load i8*, i8** %14, align 8
  %52 = trunc i64 %41 to i32
  %53 = add i32 %52, -1
  %54 = shl i32 %53, 17
  %55 = zext i32 %54 to i64
  %56 = getelementptr inbounds i8, i8* %51, i64 %55
  %57 = zext i32 %53 to i64
  %58 = getelementptr inbounds %struct.CMixCoder, %struct.CMixCoder* %0, i64 0, i32 4, i64 %57
  %59 = load i64, i64* %58, align 8
  %60 = getelementptr inbounds i8, i8* %56, i64 %59
  %61 = getelementptr inbounds %struct.CMixCoder, %struct.CMixCoder* %0, i64 0, i32 5, i64 %57
  %62 = load i64, i64* %61, align 8
  %63 = sub i64 %62, %59
  store i64 %63, i64* %10, align 8
  %64 = getelementptr inbounds %struct.CMixCoder, %struct.CMixCoder* %0, i64 0, i32 3, i64 %57
  %65 = load i32, i32* %64, align 4
  br label %66

66:                                               ; preds = %50, %47
  %67 = phi i8* [ %45, %47 ], [ %60, %50 ]
  %68 = phi i32 [ %5, %47 ], [ %65, %50 ]
  %69 = add i32 %40, -1
  %70 = zext i32 %69 to i64
  %71 = icmp eq i64 %41, %70
  br i1 %71, label %72, label %75

72:                                               ; preds = %66
  %73 = load i64, i64* %2, align 8
  %74 = sub i64 %12, %73
  br label %86

75:                                               ; preds = %66
  %76 = getelementptr inbounds %struct.CMixCoder, %struct.CMixCoder* %0, i64 0, i32 4, i64 %41
  %77 = load i64, i64* %76, align 8
  %78 = getelementptr inbounds %struct.CMixCoder, %struct.CMixCoder* %0, i64 0, i32 5, i64 %41
  %79 = load i64, i64* %78, align 8
  %80 = icmp eq i64 %77, %79
  br i1 %80, label %81, label %132

81:                                               ; preds = %75
  %82 = load i8*, i8** %14, align 8
  %83 = shl i64 %41, 17
  %84 = and i64 %83, 4294836224
  %85 = getelementptr inbounds i8, i8* %82, i64 %84
  br label %86

86:                                               ; preds = %81, %72
  %87 = phi i64 [ 131072, %81 ], [ %74, %72 ]
  %88 = phi i8* [ %85, %81 ], [ %44, %72 ]
  store i64 %87, i64* %9, align 8
  %89 = getelementptr inbounds %struct.CMixCoder, %struct.CMixCoder* %0, i64 0, i32 7, i64 %41, i32 4
  %90 = load i32 (i8*, i8*, i64*, i8*, i64*, i32, i32, i32*)*, i32 (i8*, i8*, i64*, i8*, i64*, i32, i32, i32*)** %89, align 8
  %91 = getelementptr inbounds %struct.CMixCoder, %struct.CMixCoder* %0, i64 0, i32 7, i64 %41, i32 0
  %92 = load i8*, i8** %91, align 8
  %93 = call i32 %90(i8* %92, i8* %88, i64* nonnull %9, i8* %67, i64* nonnull %10, i32 %68, i32 %29, i32* nonnull %11) #7
  %94 = load i32, i32* %11, align 4
  %95 = icmp eq i32 %94, 0
  %96 = select i1 %95, i32 0, i32 %43
  %97 = load i64, i64* %10, align 8
  br i1 %46, label %98, label %102

98:                                               ; preds = %86
  %99 = load i64, i64* %4, align 8
  %100 = add i64 %99, %97
  store i64 %100, i64* %4, align 8
  %101 = getelementptr inbounds i8, i8* %45, i64 %97
  br label %108

102:                                              ; preds = %86
  %103 = add nuw i64 %41, 4294967295
  %104 = and i64 %103, 4294967295
  %105 = getelementptr inbounds %struct.CMixCoder, %struct.CMixCoder* %0, i64 0, i32 4, i64 %104
  %106 = load i64, i64* %105, align 8
  %107 = add i64 %106, %97
  store i64 %107, i64* %105, align 8
  br label %108

108:                                              ; preds = %102, %98
  %109 = phi i8* [ %101, %98 ], [ %45, %102 ]
  %110 = load i32, i32* %26, align 8
  %111 = add i32 %110, -1
  %112 = zext i32 %111 to i64
  %113 = icmp eq i64 %41, %112
  %114 = load i64, i64* %9, align 8
  br i1 %113, label %115, label %119

115:                                              ; preds = %108
  %116 = load i64, i64* %2, align 8
  %117 = add i64 %116, %114
  store i64 %117, i64* %2, align 8
  %118 = getelementptr inbounds i8, i8* %44, i64 %114
  br label %123

119:                                              ; preds = %108
  %120 = getelementptr inbounds %struct.CMixCoder, %struct.CMixCoder* %0, i64 0, i32 5, i64 %41
  store i64 %114, i64* %120, align 8
  %121 = getelementptr inbounds %struct.CMixCoder, %struct.CMixCoder* %0, i64 0, i32 4, i64 %41
  store i64 0, i64* %121, align 8
  %122 = getelementptr inbounds %struct.CMixCoder, %struct.CMixCoder* %0, i64 0, i32 3, i64 %41
  store i32 %94, i32* %122, align 4
  br label %123

123:                                              ; preds = %119, %115
  %124 = phi i8* [ %118, %115 ], [ %44, %119 ]
  %125 = icmp eq i32 %93, 0
  br i1 %125, label %126, label %131

126:                                              ; preds = %123
  %127 = or i64 %114, %97
  %128 = icmp eq i64 %127, 0
  %129 = select i1 %128, i32 %42, i32 1
  %130 = load i32, i32* %26, align 8
  br label %132

131:                                              ; preds = %123
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %32) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %31) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %30) #7
  br label %147

132:                                              ; preds = %126, %75
  %133 = phi i32 [ %40, %75 ], [ %130, %126 ]
  %134 = phi i8* [ %45, %75 ], [ %109, %126 ]
  %135 = phi i8* [ %44, %75 ], [ %124, %126 ]
  %136 = phi i32 [ %43, %75 ], [ %96, %126 ]
  %137 = phi i32 [ %42, %75 ], [ %129, %126 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %32) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %31) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %30) #7
  %138 = add nuw nsw i64 %41, 1
  %139 = zext i32 %133 to i64
  %140 = icmp ult i64 %138, %139
  br i1 %140, label %39, label %141

141:                                              ; preds = %132
  %142 = icmp eq i32 %137, 0
  br i1 %142, label %143, label %33

143:                                              ; preds = %33, %141
  %144 = phi i32 [ %136, %141 ], [ %37, %33 ]
  %145 = icmp eq i32 %144, 0
  br i1 %145, label %147, label %146

146:                                              ; preds = %143
  store i32 1, i32* %7, align 4
  br label %147

147:                                              ; preds = %131, %146, %143, %17
  %148 = phi i32 [ 2, %17 ], [ 0, %143 ], [ 0, %146 ], [ %93, %131 ]
  ret i32 %148
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @Xz_ParseHeader(i16* nocapture, i8*) local_unnamed_addr #2 {
  %3 = getelementptr inbounds i8, i8* %1, i64 6
  %4 = load i8, i8* %3, align 1
  %5 = zext i8 %4 to i16
  %6 = shl nuw i16 %5, 8
  %7 = getelementptr inbounds i8, i8* %1, i64 7
  %8 = load i8, i8* %7, align 1
  %9 = zext i8 %8 to i16
  %10 = or i16 %6, %9
  store i16 %10, i16* %0, align 2
  %11 = tail call i32 @CrcCalc(i8* %3, i64 2) #7
  %12 = getelementptr inbounds i8, i8* %1, i64 8
  %13 = bitcast i8* %12 to i32*
  %14 = load i32, i32* %13, align 4
  %15 = icmp eq i32 %11, %14
  br i1 %15, label %16, label %20

16:                                               ; preds = %2
  %17 = load i16, i16* %0, align 2
  %18 = icmp ult i16 %17, 16
  %19 = select i1 %18, i32 0, i32 4
  br label %20

20:                                               ; preds = %2, %16
  %21 = phi i32 [ %19, %16 ], [ 17, %2 ]
  ret i32 %21
}

declare i32 @CrcCalc(i8*, i64) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden i32 @XzBlock_Parse(%struct.CXzBlock* nocapture, i8*) local_unnamed_addr #2 {
  %3 = load i8, i8* %1, align 1
  %4 = zext i8 %3 to i32
  %5 = shl nuw nsw i32 %4, 2
  %6 = zext i32 %5 to i64
  %7 = tail call i32 @CrcCalc(i8* %1, i64 %6) #7
  %8 = getelementptr inbounds i8, i8* %1, i64 %6
  %9 = bitcast i8* %8 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = icmp eq i32 %7, %10
  br i1 %11, label %12, label %184

12:                                               ; preds = %2
  %13 = getelementptr inbounds i8, i8* %1, i64 1
  %14 = load i8, i8* %13, align 1
  %15 = getelementptr inbounds %struct.CXzBlock, %struct.CXzBlock* %0, i64 0, i32 2
  store i8 %14, i8* %15, align 8
  %16 = and i8 %14, 64
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %54, label %18

18:                                               ; preds = %12
  %19 = getelementptr inbounds i8, i8* %1, i64 2
  %20 = add nsw i32 %5, -2
  %21 = zext i32 %20 to i64
  %22 = getelementptr inbounds %struct.CXzBlock, %struct.CXzBlock* %0, i64 0, i32 0
  store i64 0, i64* %22, align 8
  %23 = icmp ult i64 %21, 9
  %24 = select i1 %23, i64 %21, i64 9
  br label %25

25:                                               ; preds = %29, %18
  %26 = phi i64 [ %38, %29 ], [ 0, %18 ]
  %27 = phi i64 [ %34, %29 ], [ 0, %18 ]
  %28 = icmp ult i64 %27, %24
  br i1 %28, label %29, label %184

29:                                               ; preds = %25
  %30 = getelementptr inbounds i8, i8* %19, i64 %27
  %31 = load i8, i8* %30, align 1
  %32 = and i8 %31, 127
  %33 = zext i8 %32 to i64
  %34 = add nuw nsw i64 %27, 1
  %35 = mul i64 %27, 7
  %36 = and i64 %35, 4294967295
  %37 = shl i64 %33, %36
  %38 = or i64 %37, %26
  store i64 %38, i64* %22, align 8
  %39 = icmp sgt i8 %31, -1
  br i1 %39, label %40, label %25

40:                                               ; preds = %29
  %41 = trunc i64 %27 to i32
  %42 = trunc i64 %34 to i32
  %43 = icmp eq i8 %31, 0
  %44 = icmp ne i32 %41, 0
  %45 = and i1 %44, %43
  %46 = icmp eq i32 %42, 0
  %47 = or i1 %46, %45
  br i1 %47, label %184, label %48

48:                                               ; preds = %40
  %49 = add i32 %42, 2
  %50 = icmp eq i64 %38, 0
  %51 = add i64 %38, %6
  %52 = icmp slt i64 %51, 0
  %53 = or i1 %50, %52
  br i1 %53, label %184, label %54

54:                                               ; preds = %48, %12
  %55 = phi i32 [ 2, %12 ], [ %49, %48 ]
  %56 = icmp slt i8 %14, 0
  br i1 %56, label %57, label %89

57:                                               ; preds = %54
  %58 = zext i32 %55 to i64
  %59 = getelementptr inbounds i8, i8* %1, i64 %58
  %60 = sub i32 %5, %55
  %61 = zext i32 %60 to i64
  %62 = getelementptr inbounds %struct.CXzBlock, %struct.CXzBlock* %0, i64 0, i32 1
  store i64 0, i64* %62, align 8
  %63 = icmp ult i64 %61, 9
  %64 = select i1 %63, i64 %61, i64 9
  br label %65

65:                                               ; preds = %69, %57
  %66 = phi i64 [ %78, %69 ], [ 0, %57 ]
  %67 = phi i64 [ %74, %69 ], [ 0, %57 ]
  %68 = icmp ult i64 %67, %64
  br i1 %68, label %69, label %184

69:                                               ; preds = %65
  %70 = getelementptr inbounds i8, i8* %59, i64 %67
  %71 = load i8, i8* %70, align 1
  %72 = and i8 %71, 127
  %73 = zext i8 %72 to i64
  %74 = add nuw nsw i64 %67, 1
  %75 = mul i64 %67, 7
  %76 = and i64 %75, 4294967295
  %77 = shl i64 %73, %76
  %78 = or i64 %77, %66
  store i64 %78, i64* %62, align 8
  %79 = icmp sgt i8 %71, -1
  br i1 %79, label %80, label %65

80:                                               ; preds = %69
  %81 = trunc i64 %67 to i32
  %82 = trunc i64 %74 to i32
  %83 = icmp eq i8 %71, 0
  %84 = icmp ne i32 %81, 0
  %85 = and i1 %84, %83
  br i1 %85, label %184, label %86

86:                                               ; preds = %80
  %87 = icmp eq i32 %82, 0
  %88 = add i32 %55, %82
  br i1 %87, label %184, label %89

89:                                               ; preds = %86, %54
  %90 = phi i32 [ %55, %54 ], [ %88, %86 ]
  %91 = and i8 %14, 3
  %92 = add nuw nsw i8 %91, 1
  %93 = zext i8 %92 to i64
  br label %94

94:                                               ; preds = %165, %89
  %95 = phi i64 [ 0, %89 ], [ %172, %165 ]
  %96 = phi i32 [ %90, %89 ], [ %171, %165 ]
  %97 = zext i32 %96 to i64
  %98 = getelementptr inbounds i8, i8* %1, i64 %97
  %99 = sub i32 %5, %96
  %100 = zext i32 %99 to i64
  %101 = getelementptr inbounds %struct.CXzBlock, %struct.CXzBlock* %0, i64 0, i32 3, i64 %95, i32 0
  store i64 0, i64* %101, align 8
  %102 = icmp ult i64 %100, 9
  %103 = select i1 %102, i64 %100, i64 9
  br label %104

104:                                              ; preds = %108, %94
  %105 = phi i64 [ %117, %108 ], [ 0, %94 ]
  %106 = phi i64 [ %113, %108 ], [ 0, %94 ]
  %107 = icmp ult i64 %106, %103
  br i1 %107, label %108, label %184

108:                                              ; preds = %104
  %109 = getelementptr inbounds i8, i8* %98, i64 %106
  %110 = load i8, i8* %109, align 1
  %111 = and i8 %110, 127
  %112 = zext i8 %111 to i64
  %113 = add nuw nsw i64 %106, 1
  %114 = mul i64 %106, 7
  %115 = and i64 %114, 4294967295
  %116 = shl i64 %112, %115
  %117 = or i64 %116, %105
  store i64 %117, i64* %101, align 8
  %118 = icmp sgt i8 %110, -1
  br i1 %118, label %119, label %104

119:                                              ; preds = %108
  %120 = trunc i64 %106 to i32
  %121 = trunc i64 %113 to i32
  %122 = icmp eq i8 %110, 0
  %123 = icmp ne i32 %120, 0
  %124 = and i1 %123, %122
  br i1 %124, label %184, label %125

125:                                              ; preds = %119
  %126 = icmp eq i32 %121, 0
  %127 = add i32 %96, %121
  br i1 %126, label %184, label %128

128:                                              ; preds = %125
  %129 = zext i32 %127 to i64
  %130 = getelementptr inbounds i8, i8* %1, i64 %129
  %131 = sub i32 %5, %127
  %132 = zext i32 %131 to i64
  %133 = icmp ult i64 %132, 9
  %134 = select i1 %133, i64 %132, i64 9
  br label %135

135:                                              ; preds = %139, %128
  %136 = phi i64 [ %148, %139 ], [ 0, %128 ]
  %137 = phi i64 [ %144, %139 ], [ 0, %128 ]
  %138 = icmp ult i64 %137, %134
  br i1 %138, label %139, label %184

139:                                              ; preds = %135
  %140 = getelementptr inbounds i8, i8* %130, i64 %137
  %141 = load i8, i8* %140, align 1
  %142 = and i8 %141, 127
  %143 = zext i8 %142 to i64
  %144 = add nuw nsw i64 %137, 1
  %145 = mul i64 %137, 7
  %146 = and i64 %145, 4294967295
  %147 = shl i64 %143, %146
  %148 = or i64 %147, %136
  %149 = icmp sgt i8 %141, -1
  br i1 %149, label %150, label %135

150:                                              ; preds = %139
  %151 = trunc i64 %137 to i32
  %152 = trunc i64 %144 to i32
  %153 = icmp eq i8 %141, 0
  %154 = icmp ne i32 %151, 0
  %155 = and i1 %154, %153
  br i1 %155, label %184, label %156

156:                                              ; preds = %150
  %157 = icmp eq i32 %152, 0
  %158 = add i32 %127, %152
  br i1 %157, label %184, label %159

159:                                              ; preds = %156
  %160 = sub i32 %5, %158
  %161 = zext i32 %160 to i64
  %162 = icmp ugt i64 %148, %161
  %163 = icmp ugt i64 %148, 20
  %164 = or i1 %162, %163
  br i1 %164, label %184, label %165

165:                                              ; preds = %159
  %166 = trunc i64 %148 to i32
  %167 = getelementptr inbounds %struct.CXzBlock, %struct.CXzBlock* %0, i64 0, i32 3, i64 %95, i32 1
  store i32 %166, i32* %167, align 8
  %168 = getelementptr inbounds %struct.CXzBlock, %struct.CXzBlock* %0, i64 0, i32 3, i64 %95, i32 2, i64 0
  %169 = zext i32 %158 to i64
  %170 = getelementptr inbounds i8, i8* %1, i64 %169
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %168, i8* align 1 %170, i64 %148, i1 false)
  %171 = add i32 %158, %166
  %172 = add nuw nsw i64 %95, 1
  %173 = icmp eq i64 %172, %93
  br i1 %173, label %174, label %94

174:                                              ; preds = %165
  %175 = zext i32 %171 to i64
  br label %176

176:                                              ; preds = %174, %179
  %177 = phi i64 [ %175, %174 ], [ %180, %179 ]
  %178 = icmp ult i64 %177, %6
  br i1 %178, label %179, label %184

179:                                              ; preds = %176
  %180 = add nuw nsw i64 %177, 1
  %181 = getelementptr inbounds i8, i8* %1, i64 %177
  %182 = load i8, i8* %181, align 1
  %183 = icmp eq i8 %182, 0
  br i1 %183, label %176, label %184

184:                                              ; preds = %25, %65, %150, %119, %156, %125, %159, %104, %135, %176, %179, %80, %40, %86, %48, %2
  %185 = phi i32 [ 16, %2 ], [ 16, %48 ], [ 16, %86 ], [ 16, %40 ], [ 16, %80 ], [ 0, %176 ], [ 16, %179 ], [ 16, %135 ], [ 16, %104 ], [ 16, %159 ], [ 16, %125 ], [ 16, %156 ], [ 16, %119 ], [ 16, %150 ], [ 16, %65 ], [ 16, %25 ]
  ret i32 %185
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @XzDec_Init(%struct.CMixCoder*, %struct.CXzBlock*) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %struct.CXzBlock, %struct.CXzBlock* %1, i64 0, i32 2
  %4 = load i8, i8* %3, align 8
  %5 = and i8 %4, 3
  %6 = zext i8 %5 to i32
  %7 = add nuw nsw i32 %6, 1
  %8 = getelementptr inbounds %struct.CMixCoder, %struct.CMixCoder* %0, i64 0, i32 2
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i32 %7, %9
  br i1 %10, label %11, label %26

11:                                               ; preds = %2
  %12 = getelementptr inbounds %struct.CMixCoder, %struct.CMixCoder* %0, i64 0, i32 6, i64 0
  %13 = load i64, i64* %12, align 8
  %14 = zext i8 %5 to i64
  %15 = getelementptr inbounds %struct.CXzBlock, %struct.CXzBlock* %1, i64 0, i32 3, i64 %14, i32 0
  %16 = load i64, i64* %15, align 8
  %17 = icmp eq i64 %13, %16
  br i1 %17, label %18, label %20

18:                                               ; preds = %11
  %19 = icmp eq i8 %5, 0
  br i1 %19, label %23, label %150

20:                                               ; preds = %170, %160, %150, %11
  %21 = phi i32 [ 0, %11 ], [ 1, %150 ], [ 2, %160 ], [ 3, %170 ]
  %22 = icmp eq i32 %21, %7
  br i1 %22, label %23, label %26

23:                                               ; preds = %170, %18, %158, %168, %20
  %24 = zext i8 %5 to i64
  %25 = zext i32 %7 to i64
  br label %111

26:                                               ; preds = %20, %2
  %27 = icmp eq i32 %9, 0
  br i1 %27, label %48, label %28

28:                                               ; preds = %26
  %29 = getelementptr inbounds %struct.CMixCoder, %struct.CMixCoder* %0, i64 0, i32 0
  br label %30

30:                                               ; preds = %43, %28
  %31 = phi i32 [ %9, %28 ], [ %44, %43 ]
  %32 = phi i64 [ 0, %28 ], [ %45, %43 ]
  %33 = load %struct.ISzAlloc*, %struct.ISzAlloc** %29, align 8
  %34 = icmp eq %struct.ISzAlloc* %33, null
  br i1 %34, label %43, label %35

35:                                               ; preds = %30
  %36 = getelementptr inbounds %struct.CMixCoder, %struct.CMixCoder* %0, i64 0, i32 7, i64 %32, i32 0
  %37 = load i8*, i8** %36, align 8
  %38 = icmp eq i8* %37, null
  br i1 %38, label %43, label %39

39:                                               ; preds = %35
  %40 = getelementptr inbounds %struct.CMixCoder, %struct.CMixCoder* %0, i64 0, i32 7, i64 %32, i32 1
  %41 = load void (i8*, %struct.ISzAlloc*)*, void (i8*, %struct.ISzAlloc*)** %40, align 8
  tail call void %41(i8* nonnull %37, %struct.ISzAlloc* nonnull %33) #7
  %42 = load i32, i32* %8, align 8
  br label %43

43:                                               ; preds = %39, %35, %30
  %44 = phi i32 [ %31, %35 ], [ %31, %30 ], [ %42, %39 ]
  %45 = add nuw nsw i64 %32, 1
  %46 = zext i32 %44 to i64
  %47 = icmp ult i64 %45, %46
  br i1 %47, label %30, label %48

48:                                               ; preds = %43, %26
  store i32 0, i32* %8, align 8
  %49 = getelementptr inbounds %struct.CMixCoder, %struct.CMixCoder* %0, i64 0, i32 1
  %50 = load i8*, i8** %49, align 8
  %51 = icmp eq i8* %50, null
  br i1 %51, label %58, label %52

52:                                               ; preds = %48
  %53 = getelementptr inbounds %struct.CMixCoder, %struct.CMixCoder* %0, i64 0, i32 0
  %54 = load %struct.ISzAlloc*, %struct.ISzAlloc** %53, align 8
  %55 = getelementptr inbounds %struct.ISzAlloc, %struct.ISzAlloc* %54, i64 0, i32 1
  %56 = load void (i8*, i8*)*, void (i8*, i8*)** %55, align 8
  %57 = bitcast %struct.ISzAlloc* %54 to i8*
  tail call void %56(i8* %57, i8* nonnull %50) #7
  store i8* null, i8** %49, align 8
  br label %58

58:                                               ; preds = %48, %52
  store i32 %7, i32* %8, align 8
  %59 = getelementptr inbounds %struct.CMixCoder, %struct.CMixCoder* %0, i64 0, i32 0
  %60 = zext i8 %5 to i64
  %61 = zext i32 %7 to i64
  br label %62

62:                                               ; preds = %58, %108
  %63 = phi i64 [ 0, %58 ], [ %109, %108 ]
  %64 = sub nsw i64 %60, %63
  %65 = and i64 %64, 4294967295
  %66 = getelementptr inbounds %struct.CXzBlock, %struct.CXzBlock* %1, i64 0, i32 3, i64 %65, i32 0
  %67 = load i64, i64* %66, align 8
  %68 = getelementptr inbounds %struct.CMixCoder, %struct.CMixCoder* %0, i64 0, i32 7, i64 %63
  %69 = getelementptr inbounds %struct.CMixCoder, %struct.CMixCoder* %0, i64 0, i32 6, i64 %63
  store i64 %67, i64* %69, align 8
  %70 = icmp eq i64 %67, 33
  br i1 %70, label %71, label %85

71:                                               ; preds = %62
  %72 = load %struct.ISzAlloc*, %struct.ISzAlloc** %59, align 8
  %73 = getelementptr inbounds %struct.ISzAlloc, %struct.ISzAlloc* %72, i64 0, i32 0
  %74 = load i8* (i8*, i64)*, i8* (i8*, i64)** %73, align 8
  %75 = bitcast %struct.ISzAlloc* %72 to i8*
  %76 = tail call i8* %74(i8* %75, i64 168) #7
  %77 = getelementptr inbounds %struct._IStateCoder, %struct._IStateCoder* %68, i64 0, i32 0
  store i8* %76, i8** %77, align 8
  %78 = icmp eq i8* %76, null
  br i1 %78, label %148, label %79

79:                                               ; preds = %71
  %80 = getelementptr inbounds %struct.CMixCoder, %struct.CMixCoder* %0, i64 0, i32 7, i64 %63, i32 1
  store void (i8*, %struct.ISzAlloc*)* @Lzma2State_Free, void (i8*, %struct.ISzAlloc*)** %80, align 8
  %81 = getelementptr inbounds %struct.CMixCoder, %struct.CMixCoder* %0, i64 0, i32 7, i64 %63, i32 2
  store i32 (i8*, i8*, i64, %struct.ISzAlloc*)* @Lzma2State_SetProps, i32 (i8*, i8*, i64, %struct.ISzAlloc*)** %81, align 8
  %82 = getelementptr inbounds %struct.CMixCoder, %struct.CMixCoder* %0, i64 0, i32 7, i64 %63, i32 3
  store void (i8*)* @Lzma2State_Init, void (i8*)** %82, align 8
  %83 = getelementptr inbounds %struct.CMixCoder, %struct.CMixCoder* %0, i64 0, i32 7, i64 %63, i32 4
  store i32 (i8*, i8*, i64*, i8*, i64*, i32, i32, i32*)* @Lzma2State_Code, i32 (i8*, i8*, i64*, i8*, i64*, i32, i32, i32*)** %83, align 8
  %84 = getelementptr inbounds i8, i8* %76, i64 16
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %84, i8 0, i64 16, i1 false) #7
  br label %108

85:                                               ; preds = %62
  %86 = icmp eq i64 %63, 0
  br i1 %86, label %148, label %87

87:                                               ; preds = %85
  %88 = load %struct.ISzAlloc*, %struct.ISzAlloc** %59, align 8
  %89 = add i64 %67, -3
  %90 = icmp ult i64 %89, 7
  br i1 %90, label %91, label %148

91:                                               ; preds = %87
  %92 = getelementptr inbounds %struct._IStateCoder, %struct._IStateCoder* %68, i64 0, i32 0
  store i8* null, i8** %92, align 8
  %93 = getelementptr inbounds %struct.ISzAlloc, %struct.ISzAlloc* %88, i64 0, i32 0
  %94 = load i8* (i8*, i64)*, i8* (i8*, i64)** %93, align 8
  %95 = bitcast %struct.ISzAlloc* %88 to i8*
  %96 = tail call i8* %94(i8* %95, i64 16688) #7
  %97 = icmp eq i8* %96, null
  br i1 %97, label %148, label %98

98:                                               ; preds = %91
  %99 = trunc i64 %67 to i32
  %100 = getelementptr inbounds i8, i8* %96, i64 24
  %101 = bitcast i8* %100 to i32*
  store i32 %99, i32* %101, align 8
  %102 = getelementptr inbounds i8, i8* %96, i64 28
  %103 = bitcast i8* %102 to i32*
  store i32 0, i32* %103, align 4
  store i8* %96, i8** %92, align 8
  %104 = getelementptr inbounds %struct.CMixCoder, %struct.CMixCoder* %0, i64 0, i32 7, i64 %63, i32 1
  store void (i8*, %struct.ISzAlloc*)* @BraState_Free, void (i8*, %struct.ISzAlloc*)** %104, align 8
  %105 = getelementptr inbounds %struct.CMixCoder, %struct.CMixCoder* %0, i64 0, i32 7, i64 %63, i32 2
  store i32 (i8*, i8*, i64, %struct.ISzAlloc*)* @BraState_SetProps, i32 (i8*, i8*, i64, %struct.ISzAlloc*)** %105, align 8
  %106 = getelementptr inbounds %struct.CMixCoder, %struct.CMixCoder* %0, i64 0, i32 7, i64 %63, i32 3
  store void (i8*)* @BraState_Init, void (i8*)** %106, align 8
  %107 = getelementptr inbounds %struct.CMixCoder, %struct.CMixCoder* %0, i64 0, i32 7, i64 %63, i32 4
  store i32 (i8*, i8*, i64*, i8*, i64*, i32, i32, i32*)* @BraState_Code, i32 (i8*, i8*, i64*, i8*, i64*, i32, i32, i32*)** %107, align 8
  br label %108

108:                                              ; preds = %98, %79
  %109 = add nuw nsw i64 %63, 1
  %110 = icmp eq i64 %109, %61
  br i1 %110, label %111, label %62

111:                                              ; preds = %108, %23
  %112 = phi i64 [ %25, %23 ], [ %61, %108 ]
  %113 = phi i64 [ %24, %23 ], [ %60, %108 ]
  %114 = getelementptr inbounds %struct.CMixCoder, %struct.CMixCoder* %0, i64 0, i32 0
  br label %117

115:                                              ; preds = %117
  %116 = icmp eq i64 %132, %112
  br i1 %116, label %133, label %117

117:                                              ; preds = %111, %115
  %118 = phi i64 [ 0, %111 ], [ %132, %115 ]
  %119 = sub nsw i64 %113, %118
  %120 = and i64 %119, 4294967295
  %121 = getelementptr inbounds %struct.CMixCoder, %struct.CMixCoder* %0, i64 0, i32 7, i64 %118, i32 2
  %122 = load i32 (i8*, i8*, i64, %struct.ISzAlloc*)*, i32 (i8*, i8*, i64, %struct.ISzAlloc*)** %121, align 8
  %123 = getelementptr inbounds %struct.CMixCoder, %struct.CMixCoder* %0, i64 0, i32 7, i64 %118, i32 0
  %124 = load i8*, i8** %123, align 8
  %125 = getelementptr inbounds %struct.CXzBlock, %struct.CXzBlock* %1, i64 0, i32 3, i64 %120, i32 2, i64 0
  %126 = getelementptr inbounds %struct.CXzBlock, %struct.CXzBlock* %1, i64 0, i32 3, i64 %120, i32 1
  %127 = load i32, i32* %126, align 8
  %128 = zext i32 %127 to i64
  %129 = load %struct.ISzAlloc*, %struct.ISzAlloc** %114, align 8
  %130 = tail call i32 %122(i8* %124, i8* %125, i64 %128, %struct.ISzAlloc* %129) #7
  %131 = icmp eq i32 %130, 0
  %132 = add nuw nsw i64 %118, 1
  br i1 %131, label %115, label %148

133:                                              ; preds = %115
  %134 = getelementptr %struct.CMixCoder, %struct.CMixCoder* %0, i64 0, i32 3, i64 0
  %135 = bitcast i32* %134 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %135, i8 0, i64 60, i1 false) #7
  %136 = load i32, i32* %8, align 8
  %137 = icmp eq i32 %136, 0
  br i1 %137, label %148, label %138

138:                                              ; preds = %133, %138
  %139 = phi i64 [ %144, %138 ], [ 0, %133 ]
  %140 = getelementptr inbounds %struct.CMixCoder, %struct.CMixCoder* %0, i64 0, i32 7, i64 %139, i32 3
  %141 = load void (i8*)*, void (i8*)** %140, align 8
  %142 = getelementptr inbounds %struct.CMixCoder, %struct.CMixCoder* %0, i64 0, i32 7, i64 %139, i32 0
  %143 = load i8*, i8** %142, align 8
  tail call void %141(i8* %143) #7
  %144 = add nuw nsw i64 %139, 1
  %145 = load i32, i32* %8, align 8
  %146 = zext i32 %145 to i64
  %147 = icmp ult i64 %144, %146
  br i1 %147, label %138, label %148

148:                                              ; preds = %91, %87, %71, %85, %117, %138, %133
  %149 = phi i32 [ 0, %133 ], [ 0, %138 ], [ %130, %117 ], [ 4, %85 ], [ 2, %71 ], [ 4, %87 ], [ 2, %91 ]
  ret i32 %149

150:                                              ; preds = %18
  %151 = getelementptr inbounds %struct.CMixCoder, %struct.CMixCoder* %0, i64 0, i32 6, i64 1
  %152 = load i64, i64* %151, align 8
  %153 = add nsw i32 %6, -1
  %154 = zext i32 %153 to i64
  %155 = getelementptr inbounds %struct.CXzBlock, %struct.CXzBlock* %1, i64 0, i32 3, i64 %154, i32 0
  %156 = load i64, i64* %155, align 8
  %157 = icmp eq i64 %152, %156
  br i1 %157, label %158, label %20

158:                                              ; preds = %150
  %159 = icmp eq i32 %7, 2
  br i1 %159, label %23, label %160

160:                                              ; preds = %158
  %161 = getelementptr inbounds %struct.CMixCoder, %struct.CMixCoder* %0, i64 0, i32 6, i64 2
  %162 = load i64, i64* %161, align 8
  %163 = add nsw i32 %6, -2
  %164 = zext i32 %163 to i64
  %165 = getelementptr inbounds %struct.CXzBlock, %struct.CXzBlock* %1, i64 0, i32 3, i64 %164, i32 0
  %166 = load i64, i64* %165, align 8
  %167 = icmp eq i64 %162, %166
  br i1 %167, label %168, label %20

168:                                              ; preds = %160
  %169 = icmp eq i32 %7, 3
  br i1 %169, label %23, label %170

170:                                              ; preds = %168
  %171 = getelementptr inbounds %struct.CMixCoder, %struct.CMixCoder* %0, i64 0, i32 6, i64 3
  %172 = load i64, i64* %171, align 8
  %173 = add nsw i32 %6, -3
  %174 = zext i32 %173 to i64
  %175 = getelementptr inbounds %struct.CXzBlock, %struct.CXzBlock* %1, i64 0, i32 3, i64 %174, i32 0
  %176 = load i64, i64* %175, align 8
  %177 = icmp eq i64 %172, %176
  br i1 %177, label %23, label %20
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @XzUnpacker_Init(%struct.CXzUnpacker* nocapture) local_unnamed_addr #3 {
  %2 = getelementptr inbounds %struct.CXzUnpacker, %struct.CXzUnpacker* %0, i64 0, i32 0
  store i32 0, i32* %2, align 8
  %3 = getelementptr inbounds %struct.CXzUnpacker, %struct.CXzUnpacker* %0, i64 0, i32 1
  store i32 0, i32* %3, align 4
  %4 = getelementptr inbounds %struct.CXzUnpacker, %struct.CXzUnpacker* %0, i64 0, i32 11
  %5 = bitcast i64* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 32, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @XzUnpacker_Construct(%struct.CXzUnpacker* nocapture, %struct.ISzAlloc*) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %struct.CXzUnpacker, %struct.CXzUnpacker* %0, i64 0, i32 16, i32 0
  store %struct.ISzAlloc* %1, %struct.ISzAlloc** %3, align 8
  %4 = getelementptr inbounds %struct.CXzUnpacker, %struct.CXzUnpacker* %0, i64 0, i32 16, i32 1
  store i8* null, i8** %4, align 8
  %5 = getelementptr inbounds %struct.CXzUnpacker, %struct.CXzUnpacker* %0, i64 0, i32 16, i32 2
  store i32 0, i32* %5, align 8
  %6 = getelementptr inbounds %struct.CXzUnpacker, %struct.CXzUnpacker* %0, i64 0, i32 16, i32 7, i64 0, i32 0
  store i8* null, i8** %6, align 8
  %7 = getelementptr inbounds %struct.CXzUnpacker, %struct.CXzUnpacker* %0, i64 0, i32 16, i32 7, i64 1, i32 0
  store i8* null, i8** %7, align 8
  %8 = getelementptr inbounds %struct.CXzUnpacker, %struct.CXzUnpacker* %0, i64 0, i32 16, i32 7, i64 2, i32 0
  store i8* null, i8** %8, align 8
  %9 = getelementptr inbounds %struct.CXzUnpacker, %struct.CXzUnpacker* %0, i64 0, i32 16, i32 7, i64 3, i32 0
  store i8* null, i8** %9, align 8
  %10 = getelementptr inbounds %struct.CXzUnpacker, %struct.CXzUnpacker* %0, i64 0, i32 0
  store i32 0, i32* %10, align 8
  %11 = getelementptr inbounds %struct.CXzUnpacker, %struct.CXzUnpacker* %0, i64 0, i32 1
  store i32 0, i32* %11, align 4
  %12 = getelementptr inbounds %struct.CXzUnpacker, %struct.CXzUnpacker* %0, i64 0, i32 11
  %13 = bitcast i64* %12 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 32, i1 false) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @XzUnpacker_Free(%struct.CXzUnpacker* nocapture) local_unnamed_addr #2 {
  %2 = getelementptr inbounds %struct.CXzUnpacker, %struct.CXzUnpacker* %0, i64 0, i32 16
  %3 = getelementptr inbounds %struct.CXzUnpacker, %struct.CXzUnpacker* %0, i64 0, i32 16, i32 2
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %26, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %struct.CMixCoder, %struct.CMixCoder* %2, i64 0, i32 0
  br label %8

8:                                                ; preds = %21, %6
  %9 = phi i32 [ %4, %6 ], [ %22, %21 ]
  %10 = phi i64 [ 0, %6 ], [ %23, %21 ]
  %11 = load %struct.ISzAlloc*, %struct.ISzAlloc** %7, align 8
  %12 = icmp eq %struct.ISzAlloc* %11, null
  br i1 %12, label %21, label %13

13:                                               ; preds = %8
  %14 = getelementptr inbounds %struct.CXzUnpacker, %struct.CXzUnpacker* %0, i64 0, i32 16, i32 7, i64 %10, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = icmp eq i8* %15, null
  br i1 %16, label %21, label %17

17:                                               ; preds = %13
  %18 = getelementptr inbounds %struct.CXzUnpacker, %struct.CXzUnpacker* %0, i64 0, i32 16, i32 7, i64 %10, i32 1
  %19 = load void (i8*, %struct.ISzAlloc*)*, void (i8*, %struct.ISzAlloc*)** %18, align 8
  tail call void %19(i8* nonnull %15, %struct.ISzAlloc* nonnull %11) #7
  %20 = load i32, i32* %3, align 8
  br label %21

21:                                               ; preds = %17, %13, %8
  %22 = phi i32 [ %9, %13 ], [ %9, %8 ], [ %20, %17 ]
  %23 = add nuw nsw i64 %10, 1
  %24 = zext i32 %22 to i64
  %25 = icmp ult i64 %23, %24
  br i1 %25, label %8, label %26

26:                                               ; preds = %21, %1
  store i32 0, i32* %3, align 8
  %27 = getelementptr inbounds %struct.CXzUnpacker, %struct.CXzUnpacker* %0, i64 0, i32 16, i32 1
  %28 = load i8*, i8** %27, align 8
  %29 = icmp eq i8* %28, null
  br i1 %29, label %36, label %30

30:                                               ; preds = %26
  %31 = getelementptr inbounds %struct.CMixCoder, %struct.CMixCoder* %2, i64 0, i32 0
  %32 = load %struct.ISzAlloc*, %struct.ISzAlloc** %31, align 8
  %33 = getelementptr inbounds %struct.ISzAlloc, %struct.ISzAlloc* %32, i64 0, i32 1
  %34 = load void (i8*, i8*)*, void (i8*, i8*)** %33, align 8
  %35 = bitcast %struct.ISzAlloc* %32 to i8*
  tail call void %34(i8* %35, i8* nonnull %28) #7
  store i8* null, i8** %27, align 8
  br label %36

36:                                               ; preds = %26, %30
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @XzUnpacker_Code(%struct.CXzUnpacker*, i8*, i64* nocapture, i8*, i64*, i32, i32* nocapture) local_unnamed_addr #2 {
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca [32 x i8], align 16
  %11 = alloca [64 x i8], align 16
  %12 = alloca [32 x i8], align 16
  %13 = load i64, i64* %2, align 8
  %14 = load i64, i64* %4, align 8
  store i64 0, i64* %2, align 8
  store i64 0, i64* %4, align 8
  store i32 0, i32* %6, align 4
  %15 = getelementptr inbounds %struct.CXzUnpacker, %struct.CXzUnpacker* %0, i64 0, i32 0
  %16 = getelementptr inbounds %struct.CXzUnpacker, %struct.CXzUnpacker* %0, i64 0, i32 11
  %17 = getelementptr inbounds %struct.CXzUnpacker, %struct.CXzUnpacker* %0, i64 0, i32 1
  %18 = getelementptr inbounds %struct.CXzUnpacker, %struct.CXzUnpacker* %0, i64 0, i32 13
  %19 = getelementptr inbounds %struct.CXzUnpacker, %struct.CXzUnpacker* %0, i64 0, i32 4
  %20 = getelementptr inbounds %struct.CXzUnpacker, %struct.CXzUnpacker* %0, i64 0, i32 9
  %21 = getelementptr inbounds %struct.CXzUnpacker, %struct.CXzUnpacker* %0, i64 0, i32 21, i64 4
  %22 = bitcast i8* %21 to i32*
  %23 = getelementptr inbounds %struct.CXzUnpacker, %struct.CXzUnpacker* %0, i64 0, i32 21, i64 0
  %24 = bitcast i8* %23 to i32*
  %25 = getelementptr inbounds %struct.CXzUnpacker, %struct.CXzUnpacker* %0, i64 0, i32 21, i64 8
  %26 = getelementptr inbounds %struct.CXzUnpacker, %struct.CXzUnpacker* %0, i64 0, i32 21, i64 9
  %27 = getelementptr inbounds %struct.CXzUnpacker, %struct.CXzUnpacker* %0, i64 0, i32 21, i64 10
  %28 = getelementptr inbounds %struct.CXzUnpacker, %struct.CXzUnpacker* %0, i64 0, i32 15
  %29 = getelementptr inbounds %struct.CXzUnpacker, %struct.CXzUnpacker* %0, i64 0, i32 3
  %30 = getelementptr inbounds %struct.CXzUnpacker, %struct.CXzUnpacker* %0, i64 0, i32 10
  %31 = getelementptr inbounds [32 x i8], [32 x i8]* %12, i64 0, i64 0
  %32 = getelementptr inbounds %struct.CXzUnpacker, %struct.CXzUnpacker* %0, i64 0, i32 19
  %33 = getelementptr inbounds %struct.CXzUnpacker, %struct.CXzUnpacker* %0, i64 0, i32 20, i64 0
  %34 = getelementptr inbounds %struct.CXzUnpacker, %struct.CXzUnpacker* %0, i64 0, i32 6
  %35 = getelementptr inbounds %struct.CXzUnpacker, %struct.CXzUnpacker* %0, i64 0, i32 2
  %36 = getelementptr inbounds [64 x i8], [64 x i8]* %11, i64 0, i64 0
  %37 = getelementptr inbounds %struct.CXzUnpacker, %struct.CXzUnpacker* %0, i64 0, i32 18
  %38 = getelementptr inbounds %struct.CXzUnpacker, %struct.CXzUnpacker* %0, i64 0, i32 5
  %39 = getelementptr inbounds %struct.CXzUnpacker, %struct.CXzUnpacker* %0, i64 0, i32 17
  %40 = getelementptr inbounds %struct.CXzUnpacker, %struct.CXzUnpacker* %0, i64 0, i32 14
  %41 = getelementptr inbounds %struct.CXzUnpacker, %struct.CXzUnpacker* %0, i64 0, i32 7
  %42 = getelementptr inbounds %struct.CXzUnpacker, %struct.CXzUnpacker* %0, i64 0, i32 16
  %43 = getelementptr inbounds %struct.CXzUnpacker, %struct.CXzUnpacker* %0, i64 0, i32 21, i64 1
  %44 = getelementptr inbounds %struct.CXzUnpacker, %struct.CXzUnpacker* %0, i64 0, i32 8
  %45 = getelementptr inbounds %struct.CXzUnpacker, %struct.CXzUnpacker* %0, i64 0, i32 21, i64 6
  %46 = getelementptr inbounds %struct.CXzUnpacker, %struct.CXzUnpacker* %0, i64 0, i32 21, i64 7
  %47 = bitcast i8* %25 to i32*
  %48 = getelementptr inbounds %struct.CXzUnpacker, %struct.CXzUnpacker* %0, i64 0, i32 12
  %49 = bitcast i64* %8 to i8*
  %50 = bitcast i64* %9 to i8*
  %51 = getelementptr inbounds [32 x i8], [32 x i8]* %10, i64 0, i64 0
  %52 = bitcast i64* %34 to i8*
  %53 = bitcast i64* %44 to i8*
  %54 = bitcast i64* %20 to <2 x i64>*
  %55 = bitcast i64* %20 to <2 x i64>*
  %56 = bitcast i64* %44 to <2 x i64>*
  %57 = bitcast i64* %44 to <2 x i64>*
  br label %58

58:                                               ; preds = %353, %7
  %59 = phi i8* [ %3, %7 ], [ %354, %353 ]
  %60 = phi i8* [ %1, %7 ], [ %355, %353 ]
  %61 = load i64, i64* %4, align 8
  %62 = sub i64 %14, %61
  %63 = load i32, i32* %15, align 8
  %64 = icmp eq i32 %63, 6
  br i1 %64, label %65, label %111

65:                                               ; preds = %58
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %49) #7
  %66 = load i64, i64* %2, align 8
  %67 = sub i64 %13, %66
  store i64 %67, i64* %8, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %50) #7
  store i64 %62, i64* %9, align 8
  %68 = or i64 %67, %62
  %69 = icmp eq i64 %68, 0
  br i1 %69, label %70, label %71

70:                                               ; preds = %65
  store i32 2, i32* %6, align 4
  br label %369

71:                                               ; preds = %65
  %72 = call i32 @MixCoder_Code(%struct.CMixCoder* %42, i8* %60, i64* nonnull %8, i8* %59, i64* nonnull %9, i32 0, i32 %5, i32* %6)
  %73 = load i64, i64* %8, align 8
  call void @XzCheck_Update(%struct.CXzCheck* %37, i8* %60, i64 %73) #7
  %74 = load i64, i64* %9, align 8
  %75 = load i64, i64* %4, align 8
  %76 = add i64 %75, %74
  store i64 %76, i64* %4, align 8
  %77 = getelementptr inbounds i8, i8* %59, i64 %74
  %78 = load i64, i64* %34, align 8
  %79 = add i64 %78, %74
  store i64 %79, i64* %34, align 8
  %80 = load i64, i64* %2, align 8
  %81 = add i64 %80, %73
  store i64 %81, i64* %2, align 8
  %82 = getelementptr inbounds i8, i8* %60, i64 %73
  %83 = load i64, i64* %41, align 8
  %84 = add i64 %83, %73
  store i64 %84, i64* %41, align 8
  %85 = icmp eq i32 %72, 0
  br i1 %85, label %86, label %369

86:                                               ; preds = %71
  %87 = load i32, i32* %6, align 4
  %88 = icmp eq i32 %87, 1
  br i1 %88, label %89, label %108

89:                                               ; preds = %86
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %51) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %51, i8 -86, i64 32, i1 false)
  %90 = load i64, i64* %34, align 8
  %91 = load i32, i32* %38, align 4
  %92 = zext i32 %91 to i64
  %93 = add i64 %90, %92
  %94 = load i16, i16* %19, align 8
  %95 = call i32 @XzFlags_GetCheckSize(i16 zeroext %94) #7
  %96 = zext i32 %95 to i64
  %97 = add i64 %93, %96
  %98 = call i32 @Xz_WriteVarInt(i8* nonnull %51, i64 %97) #7
  %99 = zext i32 %98 to i64
  %100 = getelementptr inbounds [32 x i8], [32 x i8]* %10, i64 0, i64 %99
  %101 = load i64, i64* %41, align 8
  %102 = call i32 @Xz_WriteVarInt(i8* %100, i64 %101) #7
  %103 = add i32 %102, %98
  %104 = zext i32 %103 to i64
  call void @Sha256_Update(%struct.CSha256* %32, i8* nonnull %51, i64 %104) #7
  %105 = load <2 x i64>, <2 x i64>* %56, align 8
  %106 = insertelement <2 x i64> <i64 1, i64 undef>, i64 %104, i32 1
  %107 = add <2 x i64> %105, %106
  store <2 x i64> %107, <2 x i64>* %57, align 8
  store i32 7, i32* %15, align 8
  store i32 0, i32* %17, align 4
  store i32 0, i32* %35, align 8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %51) #7
  br label %371

108:                                              ; preds = %86
  %109 = or i64 %74, %73
  %110 = icmp eq i64 %109, 0
  br i1 %110, label %369, label %371

111:                                              ; preds = %58
  %112 = icmp eq i64 %62, 0
  br i1 %112, label %113, label %114

113:                                              ; preds = %111
  store i32 3, i32* %6, align 4
  br label %372

114:                                              ; preds = %111
  switch i32 %63, label %353 [
    i32 0, label %115
    i32 5, label %148
    i32 7, label %201
    i32 1, label %242
    i32 2, label %295
    i32 3, label %311
    i32 4, label %356
  ]

115:                                              ; preds = %114
  %116 = load i32, i32* %17, align 4
  %117 = icmp ult i32 %116, 12
  br i1 %117, label %118, label %132

118:                                              ; preds = %115
  %119 = icmp ult i32 %116, 6
  %120 = load i8, i8* %59, align 1
  %121 = zext i32 %116 to i64
  br i1 %119, label %122, label %126

122:                                              ; preds = %118
  %123 = getelementptr inbounds [6 x i8], [6 x i8]* @XZ_SIG, i64 0, i64 %121
  %124 = load i8, i8* %123, align 1
  %125 = icmp eq i8 %120, %124
  br i1 %125, label %126, label %372

126:                                              ; preds = %118, %122
  %127 = getelementptr inbounds i8, i8* %59, i64 1
  %128 = add nuw nsw i32 %116, 1
  store i32 %128, i32* %17, align 4
  %129 = getelementptr inbounds %struct.CXzUnpacker, %struct.CXzUnpacker* %0, i64 0, i32 21, i64 %121
  store i8 %120, i8* %129, align 1
  %130 = load i64, i64* %4, align 8
  %131 = add i64 %130, 1
  store i64 %131, i64* %4, align 8
  br label %353

132:                                              ; preds = %115
  %133 = load i8, i8* %45, align 1
  %134 = zext i8 %133 to i16
  %135 = shl nuw i16 %134, 8
  %136 = load i8, i8* %46, align 1
  %137 = zext i8 %136 to i16
  %138 = or i16 %135, %137
  store i16 %138, i16* %19, align 2
  %139 = call i32 @CrcCalc(i8* %45, i64 2) #7
  %140 = load i32, i32* %47, align 4
  %141 = icmp eq i32 %139, %140
  br i1 %141, label %142, label %372

142:                                              ; preds = %132
  %143 = load i16, i16* %19, align 2
  %144 = icmp ult i16 %143, 16
  br i1 %144, label %145, label %372

145:                                              ; preds = %142
  %146 = load i64, i64* %48, align 8
  %147 = add i64 %146, 1
  store i64 %147, i64* %48, align 8
  store i32 5, i32* %15, align 8
  call void @Sha256_Init(%struct.CSha256* %32) #7
  store i32 0, i32* %17, align 4
  call void @llvm.memset.p0i8.i64(i8* align 8 %53, i8 0, i64 16, i1 false)
  br label %353

148:                                              ; preds = %114
  %149 = load i32, i32* %17, align 4
  %150 = icmp eq i32 %149, 0
  br i1 %150, label %151, label %174

151:                                              ; preds = %148
  %152 = getelementptr inbounds i8, i8* %59, i64 1
  %153 = load i8, i8* %59, align 1
  store i32 1, i32* %17, align 4
  store i8 %153, i8* %23, align 1
  %154 = load i64, i64* %4, align 8
  %155 = add i64 %154, 1
  store i64 %155, i64* %4, align 8
  %156 = load i8, i8* %23, align 8
  %157 = icmp eq i8 %156, 0
  br i1 %157, label %158, label %169

158:                                              ; preds = %151
  %159 = load i64, i64* %44, align 8
  %160 = call i32 @Xz_WriteVarInt(i8* %43, i64 %159) #7
  %161 = add i32 %160, 1
  store i32 %161, i32* %29, align 4
  %162 = zext i32 %161 to i64
  store i64 %162, i64* %30, align 8
  %163 = load i64, i64* %20, align 8
  %164 = add i64 %163, %162
  store i64 %164, i64* %20, align 8
  call void @Sha256_Final(%struct.CSha256* %32, i8* %33) #7
  call void @Sha256_Init(%struct.CSha256* %32) #7
  %165 = load i32, i32* %29, align 4
  %166 = zext i32 %165 to i64
  %167 = call i32 @CrcUpdate(i32 -1, i8* %23, i64 %166) #7
  store i32 %167, i32* %28, align 8
  store i32 1, i32* %15, align 8
  %168 = load i8, i8* %23, align 8
  br label %169

169:                                              ; preds = %158, %151
  %170 = phi i8 [ %168, %158 ], [ %156, %151 ]
  %171 = zext i8 %170 to i32
  %172 = shl nuw nsw i32 %171, 2
  %173 = add nuw nsw i32 %172, 4
  store i32 %173, i32* %38, align 4
  br label %353

174:                                              ; preds = %148
  %175 = load i32, i32* %38, align 4
  %176 = icmp eq i32 %175, %149
  br i1 %176, label %190, label %177

177:                                              ; preds = %174
  %178 = sub i32 %175, %149
  %179 = zext i32 %178 to i64
  %180 = icmp ult i64 %62, %179
  %181 = trunc i64 %62 to i32
  %182 = select i1 %180, i32 %181, i32 %178
  %183 = zext i32 %149 to i64
  %184 = getelementptr inbounds %struct.CXzUnpacker, %struct.CXzUnpacker* %0, i64 0, i32 21, i64 %183
  %185 = zext i32 %182 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %184, i8* align 1 %59, i64 %185, i1 false)
  %186 = add i32 %182, %149
  store i32 %186, i32* %17, align 4
  %187 = load i64, i64* %4, align 8
  %188 = add i64 %187, %185
  store i64 %188, i64* %4, align 8
  %189 = getelementptr inbounds i8, i8* %59, i64 %185
  br label %353

190:                                              ; preds = %174
  %191 = call i32 @XzBlock_Parse(%struct.CXzBlock* %39, i8* %23)
  %192 = icmp eq i32 %191, 0
  br i1 %192, label %193, label %372

193:                                              ; preds = %190
  %194 = load i64, i64* %40, align 8
  %195 = add i64 %194, 1
  store i64 %195, i64* %40, align 8
  store i32 6, i32* %15, align 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %52, i8 0, i64 16, i1 false)
  %196 = load i16, i16* %19, align 8
  %197 = and i16 %196, 15
  %198 = zext i16 %197 to i32
  call void @XzCheck_Init(%struct.CXzCheck* %37, i32 %198) #7
  %199 = call i32 @XzDec_Init(%struct.CMixCoder* %42, %struct.CXzBlock* %39)
  %200 = icmp eq i32 %199, 0
  br i1 %200, label %353, label %372

201:                                              ; preds = %114
  %202 = load i64, i64* %34, align 8
  %203 = load i32, i32* %35, align 8
  %204 = zext i32 %203 to i64
  %205 = add i64 %202, %204
  %206 = and i64 %205, 3
  %207 = icmp eq i64 %206, 0
  br i1 %207, label %215, label %208

208:                                              ; preds = %201
  %209 = add i64 %61, 1
  store i64 %209, i64* %4, align 8
  %210 = load i32, i32* %35, align 8
  %211 = add i32 %210, 1
  store i32 %211, i32* %35, align 8
  %212 = getelementptr inbounds i8, i8* %59, i64 1
  %213 = load i8, i8* %59, align 1
  %214 = icmp eq i8 %213, 0
  br i1 %214, label %353, label %372

215:                                              ; preds = %201
  %216 = load i16, i16* %19, align 8
  %217 = call i32 @XzFlags_GetCheckSize(i16 zeroext %216) #7
  %218 = load i32, i32* %17, align 4
  %219 = sub i32 %217, %218
  %220 = icmp eq i32 %219, 0
  br i1 %220, label %233, label %221

221:                                              ; preds = %215
  %222 = zext i32 %219 to i64
  %223 = icmp ult i64 %62, %222
  %224 = trunc i64 %62 to i32
  %225 = select i1 %223, i32 %224, i32 %219
  %226 = zext i32 %218 to i64
  %227 = getelementptr inbounds %struct.CXzUnpacker, %struct.CXzUnpacker* %0, i64 0, i32 21, i64 %226
  %228 = zext i32 %225 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %227, i8* align 1 %59, i64 %228, i1 false)
  %229 = add i32 %225, %218
  store i32 %229, i32* %17, align 4
  %230 = load i64, i64* %4, align 8
  %231 = add i64 %230, %228
  store i64 %231, i64* %4, align 8
  %232 = getelementptr inbounds i8, i8* %59, i64 %228
  br label %353

233:                                              ; preds = %215
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %36) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %36, i8 -86, i64 64, i1 false)
  store i32 5, i32* %15, align 8
  store i32 0, i32* %17, align 4
  %234 = call i32 @XzCheck_Final(%struct.CXzCheck* %37, i8* nonnull %36) #7
  %235 = icmp eq i32 %234, 0
  br i1 %235, label %240, label %236

236:                                              ; preds = %233
  %237 = zext i32 %217 to i64
  %238 = call i32 @bcmp(i8* nonnull %36, i8* %23, i64 %237)
  %239 = icmp eq i32 %238, 0
  br i1 %239, label %240, label %241

240:                                              ; preds = %233, %236
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %36) #7
  br label %353

241:                                              ; preds = %236
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %36) #7
  br label %372

242:                                              ; preds = %114
  %243 = load i32, i32* %17, align 4
  %244 = load i32, i32* %29, align 4
  %245 = icmp ult i32 %243, %244
  br i1 %245, label %246, label %256

246:                                              ; preds = %242
  %247 = add i64 %61, 1
  store i64 %247, i64* %4, align 8
  %248 = getelementptr inbounds i8, i8* %59, i64 1
  %249 = load i8, i8* %59, align 1
  %250 = load i32, i32* %17, align 4
  %251 = add i32 %250, 1
  store i32 %251, i32* %17, align 4
  %252 = zext i32 %250 to i64
  %253 = getelementptr inbounds %struct.CXzUnpacker, %struct.CXzUnpacker* %0, i64 0, i32 21, i64 %252
  %254 = load i8, i8* %253, align 1
  %255 = icmp eq i8 %249, %254
  br i1 %255, label %353, label %372

256:                                              ; preds = %242
  %257 = load i64, i64* %30, align 8
  %258 = load i64, i64* %20, align 8
  %259 = icmp ugt i64 %258, %257
  br i1 %259, label %260, label %271

260:                                              ; preds = %256
  %261 = sub i64 %258, %257
  %262 = icmp ugt i64 %62, %261
  %263 = select i1 %262, i64 %261, i64 %62
  %264 = load i32, i32* %28, align 8
  %265 = call i32 @CrcUpdate(i32 %264, i8* %59, i64 %263) #7
  store i32 %265, i32* %28, align 8
  call void @Sha256_Update(%struct.CSha256* %32, i8* %59, i64 %263) #7
  %266 = load i64, i64* %4, align 8
  %267 = add i64 %266, %263
  store i64 %267, i64* %4, align 8
  %268 = getelementptr inbounds i8, i8* %59, i64 %263
  %269 = load i64, i64* %30, align 8
  %270 = add i64 %269, %263
  store i64 %270, i64* %30, align 8
  br label %353

271:                                              ; preds = %256
  %272 = and i64 %257, 3
  %273 = icmp eq i64 %272, 0
  br i1 %273, label %291, label %274

274:                                              ; preds = %271
  %275 = getelementptr inbounds i8, i8* %59, i64 1
  %276 = load i8, i8* %59, align 1
  %277 = load i32, i32* %28, align 8
  %278 = zext i8 %276 to i32
  %279 = and i32 %277, 255
  %280 = xor i32 %279, %278
  %281 = zext i32 %280 to i64
  %282 = getelementptr inbounds [0 x i32], [0 x i32]* @g_CrcTable, i64 0, i64 %281
  %283 = load i32, i32* %282, align 4
  %284 = lshr i32 %277, 8
  %285 = xor i32 %283, %284
  store i32 %285, i32* %28, align 8
  %286 = load i64, i64* %4, align 8
  %287 = add i64 %286, 1
  store i64 %287, i64* %4, align 8
  %288 = load <2 x i64>, <2 x i64>* %54, align 8
  %289 = add <2 x i64> %288, <i64 1, i64 1>
  store <2 x i64> %289, <2 x i64>* %55, align 8
  %290 = icmp eq i8 %276, 0
  br i1 %290, label %353, label %372

291:                                              ; preds = %271
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %31) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %31, i8 -86, i64 32, i1 false)
  store i32 2, i32* %15, align 8
  %292 = add i64 %258, 4
  store i64 %292, i64* %20, align 8
  store i32 0, i32* %17, align 4
  call void @Sha256_Final(%struct.CSha256* %32, i8* nonnull %31) #7
  %293 = call i32 @bcmp(i8* nonnull %31, i8* %33, i64 32)
  %294 = icmp eq i32 %293, 0
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %31) #7
  br i1 %294, label %353, label %372

295:                                              ; preds = %114
  %296 = load i32, i32* %17, align 4
  %297 = icmp ult i32 %296, 4
  br i1 %297, label %298, label %306

298:                                              ; preds = %295
  %299 = add i64 %61, 1
  store i64 %299, i64* %4, align 8
  %300 = getelementptr inbounds i8, i8* %59, i64 1
  %301 = load i8, i8* %59, align 1
  %302 = load i32, i32* %17, align 4
  %303 = add i32 %302, 1
  store i32 %303, i32* %17, align 4
  %304 = zext i32 %302 to i64
  %305 = getelementptr inbounds %struct.CXzUnpacker, %struct.CXzUnpacker* %0, i64 0, i32 21, i64 %304
  store i8 %301, i8* %305, align 1
  br label %353

306:                                              ; preds = %295
  store i32 3, i32* %15, align 8
  store i32 0, i32* %17, align 4
  %307 = load i32, i32* %28, align 8
  %308 = xor i32 %307, -1
  %309 = load i32, i32* %24, align 4
  %310 = icmp eq i32 %309, %308
  br i1 %310, label %353, label %372

311:                                              ; preds = %114
  %312 = load i32, i32* %17, align 4
  %313 = sub i32 12, %312
  %314 = zext i32 %313 to i64
  %315 = icmp ult i64 %62, %314
  %316 = trunc i64 %62 to i32
  %317 = select i1 %315, i32 %316, i32 %313
  %318 = zext i32 %312 to i64
  %319 = getelementptr inbounds %struct.CXzUnpacker, %struct.CXzUnpacker* %0, i64 0, i32 21, i64 %318
  %320 = zext i32 %317 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %319, i8* align 1 %59, i64 %320, i1 false)
  %321 = add i32 %317, %312
  store i32 %321, i32* %17, align 4
  %322 = load i64, i64* %4, align 8
  %323 = add i64 %322, %320
  store i64 %323, i64* %4, align 8
  %324 = getelementptr inbounds i8, i8* %59, i64 %320
  %325 = load i32, i32* %17, align 4
  %326 = icmp eq i32 %325, 12
  br i1 %326, label %327, label %353

327:                                              ; preds = %311
  store i32 4, i32* %15, align 8
  %328 = load i64, i64* %18, align 8
  %329 = add i64 %328, 1
  store i64 %329, i64* %18, align 8
  store i64 0, i64* %16, align 8
  %330 = load i16, i16* %19, align 8
  %331 = load i64, i64* %20, align 8
  %332 = load i32, i32* %22, align 4
  %333 = zext i32 %332 to i64
  %334 = shl nuw nsw i64 %333, 2
  %335 = add nuw nsw i64 %334, 4
  %336 = icmp eq i64 %335, %331
  br i1 %336, label %337, label %372

337:                                              ; preds = %327
  %338 = load i32, i32* %24, align 4
  %339 = call i32 @CrcCalc(i8* %21, i64 6) #7
  %340 = icmp eq i32 %338, %339
  br i1 %340, label %341, label %372

341:                                              ; preds = %337
  %342 = zext i16 %330 to i32
  %343 = load i8, i8* %25, align 1
  %344 = zext i8 %343 to i32
  %345 = shl nuw nsw i32 %344, 8
  %346 = load i8, i8* %26, align 1
  %347 = zext i8 %346 to i32
  %348 = or i32 %345, %347
  %349 = icmp eq i32 %348, %342
  br i1 %349, label %350, label %372

350:                                              ; preds = %341
  %351 = call i32 @bcmp(i8* %27, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @XZ_FOOTER_SIG, i64 0, i64 0), i64 2) #7
  %352 = icmp eq i32 %351, 0
  br i1 %352, label %353, label %372

353:                                              ; preds = %350, %221, %240, %311, %208, %246, %306, %363, %364, %298, %274, %291, %260, %169, %193, %177, %126, %145, %114, %371
  %354 = phi i8* [ %77, %371 ], [ %59, %114 ], [ %59, %145 ], [ %127, %126 ], [ %189, %177 ], [ %59, %193 ], [ %152, %169 ], [ %268, %260 ], [ %59, %291 ], [ %275, %274 ], [ %300, %298 ], [ %366, %364 ], [ %59, %363 ], [ %59, %306 ], [ %248, %246 ], [ %212, %208 ], [ %324, %311 ], [ %59, %240 ], [ %232, %221 ], [ %324, %350 ]
  %355 = phi i8* [ %82, %371 ], [ %60, %114 ], [ %60, %145 ], [ %60, %126 ], [ %60, %177 ], [ %60, %193 ], [ %60, %169 ], [ %60, %260 ], [ %60, %291 ], [ %60, %274 ], [ %60, %298 ], [ %60, %364 ], [ %60, %363 ], [ %60, %306 ], [ %60, %246 ], [ %60, %208 ], [ %60, %311 ], [ %60, %240 ], [ %60, %221 ], [ %60, %350 ]
  br label %58

356:                                              ; preds = %114
  %357 = load i8, i8* %59, align 1
  %358 = icmp eq i8 %357, 0
  br i1 %358, label %364, label %359

359:                                              ; preds = %356
  %360 = load i64, i64* %16, align 8
  %361 = and i64 %360, 3
  %362 = icmp eq i64 %361, 0
  br i1 %362, label %363, label %372

363:                                              ; preds = %359
  store i32 0, i32* %17, align 4
  store i32 0, i32* %15, align 8
  br label %353

364:                                              ; preds = %356
  %365 = add i64 %61, 1
  store i64 %365, i64* %4, align 8
  %366 = getelementptr inbounds i8, i8* %59, i64 1
  %367 = load i64, i64* %16, align 8
  %368 = add i64 %367, 1
  store i64 %368, i64* %16, align 8
  br label %353

369:                                              ; preds = %71, %108, %70
  %370 = phi i32 [ 0, %70 ], [ %72, %71 ], [ 0, %108 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %50) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %49) #7
  br label %372

371:                                              ; preds = %89, %108
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %50) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %49) #7
  br label %353

372:                                              ; preds = %190, %193, %291, %274, %350, %337, %341, %327, %132, %142, %359, %306, %246, %208, %122, %369, %241, %113
  %373 = phi i32 [ 3, %241 ], [ 0, %113 ], [ %370, %369 ], [ 3, %274 ], [ 3, %291 ], [ %199, %193 ], [ %191, %190 ], [ 3, %337 ], [ 3, %341 ], [ 3, %327 ], [ 3, %350 ], [ 4, %142 ], [ 17, %132 ], [ 17, %122 ], [ 3, %208 ], [ 3, %246 ], [ 3, %306 ], [ 17, %359 ]
  ret i32 %373
}

declare void @XzCheck_Update(%struct.CXzCheck*, i8*, i64) local_unnamed_addr #4

declare i32 @Xz_WriteVarInt(i8*, i64) local_unnamed_addr #4

declare i32 @XzFlags_GetCheckSize(i16 zeroext) local_unnamed_addr #4

declare void @Sha256_Update(%struct.CSha256*, i8*, i64) local_unnamed_addr #4

declare void @Sha256_Init(%struct.CSha256*) local_unnamed_addr #4

declare void @Sha256_Final(%struct.CSha256*, i8*) local_unnamed_addr #4

declare i32 @CrcUpdate(i32, i8*, i64) local_unnamed_addr #4

declare void @XzCheck_Init(%struct.CXzCheck*, i32) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare i32 @XzCheck_Final(%struct.CXzCheck*, i8*) local_unnamed_addr #4

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @XzUnpacker_IsStreamWasFinished(%struct.CXzUnpacker* nocapture readonly) local_unnamed_addr #5 {
  %2 = getelementptr inbounds %struct.CXzUnpacker, %struct.CXzUnpacker* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 8
  %4 = icmp eq i32 %3, 4
  br i1 %4, label %5, label %11

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.CXzUnpacker, %struct.CXzUnpacker* %0, i64 0, i32 11
  %7 = load i64, i64* %6, align 8
  %8 = and i64 %7, 3
  %9 = icmp eq i64 %8, 0
  %10 = zext i1 %9 to i32
  br label %11

11:                                               ; preds = %5, %1
  %12 = phi i32 [ 0, %1 ], [ %10, %5 ]
  ret i32 %12
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @XzUnpacker_GetExtraSize(%struct.CXzUnpacker* nocapture readonly) local_unnamed_addr #5 {
  %2 = getelementptr inbounds %struct.CXzUnpacker, %struct.CXzUnpacker* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 8
  switch i32 %3, label %14 [
    i32 4, label %4
    i32 0, label %7
  ]

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.CXzUnpacker, %struct.CXzUnpacker* %0, i64 0, i32 11
  %6 = load i64, i64* %5, align 8
  br label %14

7:                                                ; preds = %1
  %8 = getelementptr inbounds %struct.CXzUnpacker, %struct.CXzUnpacker* %0, i64 0, i32 11
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds %struct.CXzUnpacker, %struct.CXzUnpacker* %0, i64 0, i32 1
  %11 = load i32, i32* %10, align 4
  %12 = zext i32 %11 to i64
  %13 = add i64 %9, %12
  br label %14

14:                                               ; preds = %1, %7, %4
  %15 = phi i64 [ %6, %4 ], [ %13, %7 ], [ 0, %1 ]
  ret i64 %15
}

declare void @Delta_Init(i8*) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

declare void @Delta_Encode(i8*, i32, i8*, i64) local_unnamed_addr #4

declare void @Delta_Decode(i8*, i32, i8*, i64) local_unnamed_addr #4

declare i64 @x86_Convert(i8*, i64, i32, i32*, i32) local_unnamed_addr #4

declare i64 @PPC_Convert(i8*, i64, i32, i32) local_unnamed_addr #4

declare i64 @IA64_Convert(i8*, i64, i32, i32) local_unnamed_addr #4

declare i64 @ARM_Convert(i8*, i64, i32, i32) local_unnamed_addr #4

declare i64 @ARMT_Convert(i8*, i64, i32, i32) local_unnamed_addr #4

declare i64 @SPARC_Convert(i8*, i64, i32, i32) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define internal void @Lzma2State_Free(i8*, %struct.ISzAlloc*) #2 {
  %3 = bitcast i8* %0 to %struct.CLzmaDec*
  tail call void @LzmaDec_Free(%struct.CLzmaDec* %3, %struct.ISzAlloc* %1) #7
  %4 = getelementptr inbounds %struct.ISzAlloc, %struct.ISzAlloc* %1, i64 0, i32 1
  %5 = load void (i8*, i8*)*, void (i8*, i8*)** %4, align 8
  %6 = bitcast %struct.ISzAlloc* %1 to i8*
  tail call void %5(i8* %6, i8* %0) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @Lzma2State_SetProps(i8*, i8* nocapture readonly, i64, %struct.ISzAlloc*) #2 {
  %5 = icmp eq i64 %2, 1
  br i1 %5, label %6, label %10

6:                                                ; preds = %4
  %7 = bitcast i8* %0 to %struct.CLzma2Dec*
  %8 = load i8, i8* %1, align 1
  %9 = tail call i32 @Lzma2Dec_Allocate(%struct.CLzma2Dec* %7, i8 zeroext %8, %struct.ISzAlloc* %3) #7
  br label %10

10:                                               ; preds = %4, %6
  %11 = phi i32 [ %9, %6 ], [ 4, %4 ]
  ret i32 %11
}

; Function Attrs: nounwind ssp uwtable
define internal void @Lzma2State_Init(i8*) #2 {
  %2 = bitcast i8* %0 to %struct.CLzma2Dec*
  tail call void @Lzma2Dec_Init(%struct.CLzma2Dec* %2) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @Lzma2State_Code(i8*, i8*, i64*, i8*, i64*, i32, i32, i32* nocapture) #2 {
  %9 = alloca i32, align 4
  %10 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #7
  store i32 -1431655766, i32* %9, align 4
  %11 = bitcast i8* %0 to %struct.CLzma2Dec*
  %12 = call i32 @Lzma2Dec_DecodeToBuf(%struct.CLzma2Dec* %11, i8* %1, i64* %2, i8* %3, i64* %4, i32 %6, i32* nonnull %9) #7
  %13 = load i32, i32* %9, align 4
  %14 = icmp eq i32 %13, 1
  %15 = zext i1 %14 to i32
  store i32 %15, i32* %7, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #7
  ret i32 %12
}

declare void @LzmaDec_Free(%struct.CLzmaDec*, %struct.ISzAlloc*) local_unnamed_addr #4

declare i32 @Lzma2Dec_Allocate(%struct.CLzma2Dec*, i8 zeroext, %struct.ISzAlloc*) local_unnamed_addr #4

declare void @Lzma2Dec_Init(%struct.CLzma2Dec*) local_unnamed_addr #4

declare i32 @Lzma2Dec_DecodeToBuf(%struct.CLzma2Dec*, i8*, i64*, i8*, i64*, i32, i32*) local_unnamed_addr #4

; Function Attrs: nofree nounwind readonly
declare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #6

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind readonly }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
