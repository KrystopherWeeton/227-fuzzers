; ModuleID = '../../third_party/libjpeg_turbo/jerror.c'
source_filename = "../../third_party/libjpeg_turbo/jerror.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.jpeg_error_mgr = type { void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i8*)*, void (%struct.jpeg_common_struct*)*, i32, %union.anon, i32, i64, i8**, i32, i8**, i32, i32 }
%struct.jpeg_common_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i8*, i32, i32 }
%struct.jpeg_memory_mgr = type { i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)*, i8** (%struct.jpeg_common_struct*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, i32, i32, i32)*, %struct.jvirt_sarray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, %struct.jvirt_barray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, {}*, i8** (%struct.jpeg_common_struct*, %struct.jvirt_sarray_control*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, %struct.jvirt_barray_control*, i32, i32, i32)*, void (%struct.jpeg_common_struct*, i32)*, {}*, i64, i64 }
%struct.jvirt_sarray_control = type opaque
%struct.jvirt_barray_control = type opaque
%struct.jpeg_progress_mgr = type { {}*, i64, i64, i32, i32 }
%union.anon = type { [8 x i32], [48 x i8] }

@.str = private unnamed_addr constant [22 x i8] c"Bogus message code %d\00", align 1
@.str.1 = private unnamed_addr constant [44 x i8] c"Sorry, arithmetic coding is not implemented\00", align 1
@.str.2 = private unnamed_addr constant [32 x i8] c"ALIGN_TYPE is wrong, please fix\00", align 1
@.str.3 = private unnamed_addr constant [37 x i8] c"MAX_ALLOC_CHUNK is wrong, please fix\00", align 1
@.str.4 = private unnamed_addr constant [26 x i8] c"Bogus buffer control mode\00", align 1
@.str.5 = private unnamed_addr constant [31 x i8] c"Invalid component ID %d in SOS\00", align 1
@.str.6 = private unnamed_addr constant [29 x i8] c"DCT coefficient out of range\00", align 1
@.str.7 = private unnamed_addr constant [40 x i8] c"IDCT output block size %d not supported\00", align 1
@.str.8 = private unnamed_addr constant [31 x i8] c"Bogus Huffman table definition\00", align 1
@.str.9 = private unnamed_addr constant [23 x i8] c"Bogus input colorspace\00", align 1
@.str.10 = private unnamed_addr constant [22 x i8] c"Bogus JPEG colorspace\00", align 1
@.str.11 = private unnamed_addr constant [20 x i8] c"Bogus marker length\00", align 1
@.str.12 = private unnamed_addr constant [61 x i8] c"Wrong JPEG library version: library is %d, caller expects %d\00", align 1
@.str.13 = private unnamed_addr constant [48 x i8] c"Sampling factors too large for interleaved scan\00", align 1
@.str.14 = private unnamed_addr constant [28 x i8] c"Invalid memory pool code %d\00", align 1
@.str.15 = private unnamed_addr constant [35 x i8] c"Unsupported JPEG data precision %d\00", align 1
@.str.16 = private unnamed_addr constant [55 x i8] c"Invalid progressive parameters Ss=%d Se=%d Ah=%d Al=%d\00", align 1
@.str.17 = private unnamed_addr constant [55 x i8] c"Invalid progressive parameters at scan script entry %d\00", align 1
@.str.18 = private unnamed_addr constant [23 x i8] c"Bogus sampling factors\00", align 1
@.str.19 = private unnamed_addr constant [32 x i8] c"Invalid scan script at entry %d\00", align 1
@.str.20 = private unnamed_addr constant [42 x i8] c"Improper call to JPEG library in state %d\00", align 1
@.str.21 = private unnamed_addr constant [77 x i8] c"JPEG parameter struct mismatch: library thinks size is %u, caller expects %u\00", align 1
@.str.22 = private unnamed_addr constant [27 x i8] c"Bogus virtual array access\00", align 1
@.str.23 = private unnamed_addr constant [43 x i8] c"Buffer passed to JPEG library is too small\00", align 1
@.str.24 = private unnamed_addr constant [28 x i8] c"Suspension not allowed here\00", align 1
@.str.25 = private unnamed_addr constant [37 x i8] c"CCIR601 sampling not implemented yet\00", align 1
@.str.26 = private unnamed_addr constant [38 x i8] c"Too many color components: %d, max %d\00", align 1
@.str.27 = private unnamed_addr constant [37 x i8] c"Unsupported color conversion request\00", align 1
@.str.28 = private unnamed_addr constant [19 x i8] c"Bogus DAC index %d\00", align 1
@.str.29 = private unnamed_addr constant [21 x i8] c"Bogus DAC value 0x%x\00", align 1
@.str.30 = private unnamed_addr constant [19 x i8] c"Bogus DHT index %d\00", align 1
@.str.31 = private unnamed_addr constant [19 x i8] c"Bogus DQT index %d\00", align 1
@.str.32 = private unnamed_addr constant [37 x i8] c"Empty JPEG image (DNL not supported)\00", align 1
@.str.33 = private unnamed_addr constant [21 x i8] c"Read from EMS failed\00", align 1
@.str.34 = private unnamed_addr constant [20 x i8] c"Write to EMS failed\00", align 1
@.str.35 = private unnamed_addr constant [33 x i8] c"Didn't expect more than one scan\00", align 1
@.str.36 = private unnamed_addr constant [22 x i8] c"Input file read error\00", align 1
@.str.37 = private unnamed_addr constant [47 x i8] c"Output file write error --- out of disk space?\00", align 1
@.str.38 = private unnamed_addr constant [40 x i8] c"Fractional sampling not implemented yet\00", align 1
@.str.39 = private unnamed_addr constant [33 x i8] c"Huffman code size table overflow\00", align 1
@.str.40 = private unnamed_addr constant [33 x i8] c"Missing Huffman code table entry\00", align 1
@.str.41 = private unnamed_addr constant [47 x i8] c"Maximum supported image dimension is %u pixels\00", align 1
@.str.42 = private unnamed_addr constant [17 x i8] c"Empty input file\00", align 1
@.str.43 = private unnamed_addr constant [28 x i8] c"Premature end of input file\00", align 1
@.str.44 = private unnamed_addr constant [62 x i8] c"Cannot transcode due to multiple use of quantization table %d\00", align 1
@.str.45 = private unnamed_addr constant [39 x i8] c"Scan script does not transmit all data\00", align 1
@.str.46 = private unnamed_addr constant [39 x i8] c"Invalid color quantization mode change\00", align 1
@.str.47 = private unnamed_addr constant [20 x i8] c"Not implemented yet\00", align 1
@.str.48 = private unnamed_addr constant [46 x i8] c"Requested feature was omitted at compile time\00", align 1
@.str.49 = private unnamed_addr constant [28 x i8] c"Backing store not supported\00", align 1
@.str.50 = private unnamed_addr constant [37 x i8] c"Huffman table 0x%02x was not defined\00", align 1
@.str.51 = private unnamed_addr constant [34 x i8] c"JPEG datastream contains no image\00", align 1
@.str.52 = private unnamed_addr constant [42 x i8] c"Quantization table 0x%02x was not defined\00", align 1
@.str.53 = private unnamed_addr constant [43 x i8] c"Not a JPEG file: starts with 0x%02x 0x%02x\00", align 1
@.str.54 = private unnamed_addr constant [30 x i8] c"Insufficient memory (case %d)\00", align 1
@.str.55 = private unnamed_addr constant [46 x i8] c"Cannot quantize more than %d color components\00", align 1
@.str.56 = private unnamed_addr constant [40 x i8] c"Cannot quantize to fewer than %d colors\00", align 1
@.str.57 = private unnamed_addr constant [39 x i8] c"Cannot quantize to more than %d colors\00", align 1
@.str.58 = private unnamed_addr constant [45 x i8] c"Invalid JPEG file structure: two SOF markers\00", align 1
@.str.59 = private unnamed_addr constant [48 x i8] c"Invalid JPEG file structure: missing SOS marker\00", align 1
@.str.60 = private unnamed_addr constant [42 x i8] c"Unsupported JPEG process: SOF type 0x%02x\00", align 1
@.str.61 = private unnamed_addr constant [45 x i8] c"Invalid JPEG file structure: two SOI markers\00", align 1
@.str.62 = private unnamed_addr constant [44 x i8] c"Invalid JPEG file structure: SOS before SOF\00", align 1
@.str.63 = private unnamed_addr constant [35 x i8] c"Failed to create temporary file %s\00", align 1
@.str.64 = private unnamed_addr constant [30 x i8] c"Read failed on temporary file\00", align 1
@.str.65 = private unnamed_addr constant [30 x i8] c"Seek failed on temporary file\00", align 1
@.str.66 = private unnamed_addr constant [54 x i8] c"Write failed on temporary file --- out of disk space?\00", align 1
@.str.67 = private unnamed_addr constant [42 x i8] c"Application transferred too few scanlines\00", align 1
@.str.68 = private unnamed_addr constant [31 x i8] c"Unsupported marker type 0x%02x\00", align 1
@.str.69 = private unnamed_addr constant [35 x i8] c"Virtual array controller messed up\00", align 1
@.str.70 = private unnamed_addr constant [39 x i8] c"Image too wide for this implementation\00", align 1
@.str.71 = private unnamed_addr constant [21 x i8] c"Read from XMS failed\00", align 1
@.str.72 = private unnamed_addr constant [20 x i8] c"Write to XMS failed\00", align 1
@.str.73 = private unnamed_addr constant [66 x i8] c"Copyright (C) 1991-2021 The libjpeg-turbo Project and many others\00", align 1
@.str.74 = private unnamed_addr constant [16 x i8] c"6b  27-Mar-1998\00", align 1
@.str.75 = private unnamed_addr constant [62 x i8] c"Caution: quantization tables are too coarse for baseline JPEG\00", align 1
@.str.76 = private unnamed_addr constant [66 x i8] c"Adobe APP14 marker: version %d, flags 0x%04x 0x%04x, transform %d\00", align 1
@.str.77 = private unnamed_addr constant [42 x i8] c"Unknown APP0 marker (not JFIF), length %u\00", align 1
@.str.78 = private unnamed_addr constant [44 x i8] c"Unknown APP14 marker (not Adobe), length %u\00", align 1
@.str.79 = private unnamed_addr constant [39 x i8] c"Define Arithmetic Table 0x%02x: 0x%02x\00", align 1
@.str.80 = private unnamed_addr constant [28 x i8] c"Define Huffman Table 0x%02x\00", align 1
@.str.81 = private unnamed_addr constant [43 x i8] c"Define Quantization Table %d  precision %d\00", align 1
@.str.82 = private unnamed_addr constant [27 x i8] c"Define Restart Interval %u\00", align 1
@.str.83 = private unnamed_addr constant [20 x i8] c"Freed EMS handle %u\00", align 1
@.str.84 = private unnamed_addr constant [23 x i8] c"Obtained EMS handle %u\00", align 1
@.str.85 = private unnamed_addr constant [13 x i8] c"End Of Image\00", align 1
@.str.86 = private unnamed_addr constant [40 x i8] c"        %3d %3d %3d %3d %3d %3d %3d %3d\00", align 1
@.str.87 = private unnamed_addr constant [53 x i8] c"JFIF APP0 marker: version %d.%02d, density %dx%d  %d\00", align 1
@.str.88 = private unnamed_addr constant [60 x i8] c"Warning: thumbnail image size does not match data length %u\00", align 1
@.str.89 = private unnamed_addr constant [46 x i8] c"JFIF extension marker: type 0x%02x, length %u\00", align 1
@.str.90 = private unnamed_addr constant [33 x i8] c"    with %d x %d thumbnail image\00", align 1
@.str.91 = private unnamed_addr constant [39 x i8] c"Miscellaneous marker 0x%02x, length %u\00", align 1
@.str.92 = private unnamed_addr constant [25 x i8] c"Unexpected marker 0x%02x\00", align 1
@.str.93 = private unnamed_addr constant [40 x i8] c"        %4u %4u %4u %4u %4u %4u %4u %4u\00", align 1
@.str.94 = private unnamed_addr constant [35 x i8] c"Quantizing to %d = %d*%d*%d colors\00", align 1
@.str.95 = private unnamed_addr constant [24 x i8] c"Quantizing to %d colors\00", align 1
@.str.96 = private unnamed_addr constant [36 x i8] c"Selected %d colors for quantization\00", align 1
@.str.97 = private unnamed_addr constant [37 x i8] c"At marker 0x%02x, recovery action %d\00", align 1
@.str.98 = private unnamed_addr constant [6 x i8] c"RST%d\00", align 1
@.str.99 = private unnamed_addr constant [57 x i8] c"Smoothing not supported with nonstandard sampling ratios\00", align 1
@.str.100 = private unnamed_addr constant [58 x i8] c"Start Of Frame 0x%02x: width=%u, height=%u, components=%d\00", align 1
@.str.101 = private unnamed_addr constant [31 x i8] c"    Component %d: %dhx%dv q=%d\00", align 1
@.str.102 = private unnamed_addr constant [15 x i8] c"Start of Image\00", align 1
@.str.103 = private unnamed_addr constant [29 x i8] c"Start Of Scan: %d components\00", align 1
@.str.104 = private unnamed_addr constant [30 x i8] c"    Component %d: dc=%d ac=%d\00", align 1
@.str.105 = private unnamed_addr constant [29 x i8] c"  Ss=%d, Se=%d, Ah=%d, Al=%d\00", align 1
@.str.106 = private unnamed_addr constant [25 x i8] c"Closed temporary file %s\00", align 1
@.str.107 = private unnamed_addr constant [25 x i8] c"Opened temporary file %s\00", align 1
@.str.108 = private unnamed_addr constant [66 x i8] c"JFIF extension marker: JPEG-compressed thumbnail image, length %u\00", align 1
@.str.109 = private unnamed_addr constant [58 x i8] c"JFIF extension marker: palette thumbnail image, length %u\00", align 1
@.str.110 = private unnamed_addr constant [54 x i8] c"JFIF extension marker: RGB thumbnail image, length %u\00", align 1
@.str.111 = private unnamed_addr constant [52 x i8] c"Unrecognized component IDs %d %d %d, assuming YCbCr\00", align 1
@.str.112 = private unnamed_addr constant [20 x i8] c"Freed XMS handle %u\00", align 1
@.str.113 = private unnamed_addr constant [23 x i8] c"Obtained XMS handle %u\00", align 1
@.str.114 = private unnamed_addr constant [38 x i8] c"Unknown Adobe color transform code %d\00", align 1
@.str.115 = private unnamed_addr constant [66 x i8] c"Inconsistent progression sequence for component %d coefficient %d\00", align 1
@.str.116 = private unnamed_addr constant [60 x i8] c"Corrupt JPEG data: %u extraneous bytes before marker 0x%02x\00", align 1
@.str.117 = private unnamed_addr constant [49 x i8] c"Corrupt JPEG data: premature end of data segment\00", align 1
@.str.118 = private unnamed_addr constant [36 x i8] c"Corrupt JPEG data: bad Huffman code\00", align 1
@.str.119 = private unnamed_addr constant [46 x i8] c"Warning: unknown JFIF revision number %d.%02d\00", align 1
@.str.120 = private unnamed_addr constant [27 x i8] c"Premature end of JPEG file\00", align 1
@.str.121 = private unnamed_addr constant [56 x i8] c"Corrupt JPEG data: found marker 0x%02x instead of RST%d\00", align 1
@.str.122 = private unnamed_addr constant [43 x i8] c"Invalid SOS parameters for sequential JPEG\00", align 1
@.str.123 = private unnamed_addr constant [43 x i8] c"Application transferred too many scanlines\00", align 1
@.str.124 = private unnamed_addr constant [21 x i8] c"Invalid crop request\00", align 1
@.str.125 = private unnamed_addr constant [34 x i8] c"Corrupt JPEG data: bad ICC marker\00", align 1
@.str.126 = private unnamed_addr constant [64 x i8] c"Component index %d: mismatching sampling ratio %d:%d, %d:%d, %c\00", align 1
@jpeg_std_message_table = hidden constant [128 x i8*] [i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.18, i32 0, i32 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.21, i32 0, i32 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.22, i32 0, i32 0), i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.23, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.24, i32 0, i32 0), i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.25, i32 0, i32 0), i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.26, i32 0, i32 0), i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.27, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.28, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.29, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.30, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.31, i32 0, i32 0), i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.32, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.33, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.34, i32 0, i32 0), i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.35, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36, i32 0, i32 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.37, i32 0, i32 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.38, i32 0, i32 0), i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.39, i32 0, i32 0), i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.40, i32 0, i32 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.41, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.42, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.43, i32 0, i32 0), i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.44, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.45, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.46, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.47, i32 0, i32 0), i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.48, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.49, i32 0, i32 0), i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.50, i32 0, i32 0), i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.51, i32 0, i32 0), i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.52, i32 0, i32 0), i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.53, i32 0, i32 0), i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.54, i32 0, i32 0), i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.55, i32 0, i32 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.56, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.57, i32 0, i32 0), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.58, i32 0, i32 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.59, i32 0, i32 0), i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.60, i32 0, i32 0), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.61, i32 0, i32 0), i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.62, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.63, i32 0, i32 0), i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.64, i32 0, i32 0), i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.65, i32 0, i32 0), i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.66, i32 0, i32 0), i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.67, i32 0, i32 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.68, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.69, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.70, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.71, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.72, i32 0, i32 0), i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.73, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.74, i32 0, i32 0), i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.75, i32 0, i32 0), i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.76, i32 0, i32 0), i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.77, i32 0, i32 0), i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.78, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.79, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.80, i32 0, i32 0), i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.81, i32 0, i32 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.82, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.83, i32 0, i32 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.84, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.85, i32 0, i32 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.86, i32 0, i32 0), i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.87, i32 0, i32 0), i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.88, i32 0, i32 0), i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.89, i32 0, i32 0), i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.90, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.91, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.92, i32 0, i32 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.93, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.94, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.95, i32 0, i32 0), i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.96, i32 0, i32 0), i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.97, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.98, i32 0, i32 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.99, i32 0, i32 0), i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.100, i32 0, i32 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.101, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.102, i32 0, i32 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.103, i32 0, i32 0), i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.104, i32 0, i32 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.105, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.106, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.107, i32 0, i32 0), i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.108, i32 0, i32 0), i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.109, i32 0, i32 0), i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.110, i32 0, i32 0), i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.111, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.112, i32 0, i32 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.113, i32 0, i32 0), i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.114, i32 0, i32 0), i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.115, i32 0, i32 0), i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.116, i32 0, i32 0), i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.117, i32 0, i32 0), i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.118, i32 0, i32 0), i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.119, i32 0, i32 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.120, i32 0, i32 0), i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.121, i32 0, i32 0), i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.122, i32 0, i32 0), i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.123, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.124, i32 0, i32 0), i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.125, i32 0, i32 0), i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.126, i32 0, i32 0), i8* null], align 16
@stderr = external local_unnamed_addr global %struct._IO_FILE*, align 8
@.str.127 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden %struct.jpeg_error_mgr* @jpeg_std_error(%struct.jpeg_error_mgr* returned) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %0, i64 0, i32 0
  store void (%struct.jpeg_common_struct*)* @error_exit, void (%struct.jpeg_common_struct*)** %2, align 8
  %3 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %0, i64 0, i32 1
  store void (%struct.jpeg_common_struct*, i32)* @emit_message, void (%struct.jpeg_common_struct*, i32)** %3, align 8
  %4 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %0, i64 0, i32 2
  store void (%struct.jpeg_common_struct*)* @output_message, void (%struct.jpeg_common_struct*)** %4, align 8
  %5 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %0, i64 0, i32 3
  store void (%struct.jpeg_common_struct*, i8*)* @format_message, void (%struct.jpeg_common_struct*, i8*)** %5, align 8
  %6 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %0, i64 0, i32 4
  store void (%struct.jpeg_common_struct*)* @reset_error_mgr, void (%struct.jpeg_common_struct*)** %6, align 8
  %7 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %0, i64 0, i32 7
  store i32 0, i32* %7, align 4
  %8 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %0, i64 0, i32 8
  store i64 0, i64* %8, align 8
  %9 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %0, i64 0, i32 5
  store i32 0, i32* %9, align 8
  %10 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %0, i64 0, i32 9
  store i8** getelementptr inbounds ([128 x i8*], [128 x i8*]* @jpeg_std_message_table, i64 0, i64 0), i8*** %10, align 8
  %11 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %0, i64 0, i32 10
  store i32 126, i32* %11, align 8
  %12 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %0, i64 0, i32 11
  %13 = bitcast i8*** %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 16, i1 false)
  ret %struct.jpeg_error_mgr* %0
}

; Function Attrs: noreturn nounwind ssp uwtable
define internal void @error_exit(%struct.jpeg_common_struct*) #1 {
  %2 = getelementptr inbounds %struct.jpeg_common_struct, %struct.jpeg_common_struct* %0, i64 0, i32 0
  %3 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %2, align 8
  %4 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %3, i64 0, i32 2
  %5 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %4, align 8
  tail call void %5(%struct.jpeg_common_struct* %0) #10
  tail call void @jpeg_destroy(%struct.jpeg_common_struct* %0) #10
  tail call void @exit(i32 1) #11
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define internal void @emit_message(%struct.jpeg_common_struct*, i32) #2 {
  %3 = getelementptr inbounds %struct.jpeg_common_struct, %struct.jpeg_common_struct* %0, i64 0, i32 0
  %4 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %3, align 8
  %5 = icmp slt i32 %1, 0
  br i1 %5, label %6, label %21

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %4, i64 0, i32 8
  %8 = load i64, i64* %7, align 8
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %14, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %4, i64 0, i32 7
  %12 = load i32, i32* %11, align 4
  %13 = icmp sgt i32 %12, 2
  br i1 %13, label %14, label %18

14:                                               ; preds = %10, %6
  %15 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %4, i64 0, i32 2
  %16 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %15, align 8
  tail call void %16(%struct.jpeg_common_struct* %0) #10
  %17 = load i64, i64* %7, align 8
  br label %18

18:                                               ; preds = %14, %10
  %19 = phi i64 [ %17, %14 ], [ %8, %10 ]
  %20 = add nsw i64 %19, 1
  store i64 %20, i64* %7, align 8
  br label %28

21:                                               ; preds = %2
  %22 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %4, i64 0, i32 7
  %23 = load i32, i32* %22, align 4
  %24 = icmp slt i32 %23, %1
  br i1 %24, label %28, label %25

25:                                               ; preds = %21
  %26 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %4, i64 0, i32 2
  %27 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %26, align 8
  tail call void %27(%struct.jpeg_common_struct* %0) #10
  br label %28

28:                                               ; preds = %21, %25, %18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @output_message(%struct.jpeg_common_struct*) #2 {
  %2 = alloca [200 x i8], align 16
  %3 = getelementptr inbounds [200 x i8], [200 x i8]* %2, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 200, i8* nonnull %3) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %3, i8 -86, i64 200, i1 false)
  %4 = getelementptr inbounds %struct.jpeg_common_struct, %struct.jpeg_common_struct* %0, i64 0, i32 0
  %5 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %4, align 8
  %6 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %5, i64 0, i32 3
  %7 = load void (%struct.jpeg_common_struct*, i8*)*, void (%struct.jpeg_common_struct*, i8*)** %6, align 8
  call void %7(%struct.jpeg_common_struct* %0, i8* nonnull %3) #10
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %9 = call i32 (%struct._IO_FILE*, i32, i8*, ...) @__fprintf_chk(%struct._IO_FILE* %8, i32 1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.127, i64 0, i64 0), i8* nonnull %3) #10
  call void @llvm.lifetime.end.p0i8(i64 200, i8* nonnull %3) #10
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @format_message(%struct.jpeg_common_struct* nocapture readonly, i8*) #3 {
  %3 = getelementptr inbounds %struct.jpeg_common_struct, %struct.jpeg_common_struct* %0, i64 0, i32 0
  %4 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %3, align 8
  %5 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %4, i64 0, i32 5
  %6 = load i32, i32* %5, align 8
  %7 = icmp sgt i32 %6, 0
  br i1 %7, label %8, label %15

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %4, i64 0, i32 10
  %10 = load i32, i32* %9, align 8
  %11 = icmp sgt i32 %6, %10
  br i1 %11, label %15, label %12

12:                                               ; preds = %8
  %13 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %4, i64 0, i32 9
  %14 = load i8**, i8*** %13, align 8
  br label %29

15:                                               ; preds = %8, %2
  %16 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %4, i64 0, i32 11
  %17 = load i8**, i8*** %16, align 8
  %18 = icmp eq i8** %17, null
  br i1 %18, label %36, label %19

19:                                               ; preds = %15
  %20 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %4, i64 0, i32 12
  %21 = load i32, i32* %20, align 8
  %22 = icmp slt i32 %6, %21
  br i1 %22, label %36, label %23

23:                                               ; preds = %19
  %24 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %4, i64 0, i32 13
  %25 = load i32, i32* %24, align 4
  %26 = icmp sgt i32 %6, %25
  br i1 %26, label %36, label %27

27:                                               ; preds = %23
  %28 = sub nsw i32 %6, %21
  br label %29

29:                                               ; preds = %27, %12
  %30 = phi i32 [ %28, %27 ], [ %6, %12 ]
  %31 = phi i8** [ %17, %27 ], [ %14, %12 ]
  %32 = sext i32 %30 to i64
  %33 = getelementptr inbounds i8*, i8** %31, i64 %32
  %34 = load i8*, i8** %33, align 8
  %35 = icmp eq i8* %34, null
  br i1 %35, label %36, label %41

36:                                               ; preds = %15, %19, %23, %29
  %37 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %4, i64 0, i32 6, i32 0, i64 0
  store i32 %6, i32* %37, align 4
  %38 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %4, i64 0, i32 9
  %39 = load i8**, i8*** %38, align 8
  %40 = load i8*, i8** %39, align 8
  br label %41

41:                                               ; preds = %36, %29
  %42 = phi i8* [ %40, %36 ], [ %34, %29 ]
  br label %43

43:                                               ; preds = %43, %41
  %44 = phi i8* [ %42, %41 ], [ %45, %43 ]
  %45 = getelementptr inbounds i8, i8* %44, i64 1
  %46 = load i8, i8* %44, align 1
  switch i8 %46, label %43 [
    i8 0, label %47
    i8 37, label %49
  ]

47:                                               ; preds = %43
  %48 = tail call i64 @llvm.objectsize.i64.p0i8(i8* %1, i1 false, i1 true, i1 false)
  br label %56

49:                                               ; preds = %43
  %50 = load i8, i8* %45, align 1
  %51 = icmp eq i8 %50, 115
  %52 = tail call i64 @llvm.objectsize.i64.p0i8(i8* %1, i1 false, i1 true, i1 false)
  br i1 %51, label %53, label %56

53:                                               ; preds = %49
  %54 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %4, i64 0, i32 6
  %55 = tail call i32 (i8*, i32, i64, i8*, ...) @__sprintf_chk(i8* %1, i32 1, i64 %52, i8* %42, %union.anon* %54) #10
  br label %75

56:                                               ; preds = %47, %49
  %57 = phi i64 [ %48, %47 ], [ %52, %49 ]
  %58 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %4, i64 0, i32 6, i32 0, i64 0
  %59 = load i32, i32* %58, align 4
  %60 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %4, i64 0, i32 6, i32 0, i64 1
  %61 = load i32, i32* %60, align 4
  %62 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %4, i64 0, i32 6, i32 0, i64 2
  %63 = load i32, i32* %62, align 4
  %64 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %4, i64 0, i32 6, i32 0, i64 3
  %65 = load i32, i32* %64, align 4
  %66 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %4, i64 0, i32 6, i32 0, i64 4
  %67 = load i32, i32* %66, align 4
  %68 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %4, i64 0, i32 6, i32 0, i64 5
  %69 = load i32, i32* %68, align 4
  %70 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %4, i64 0, i32 6, i32 0, i64 6
  %71 = load i32, i32* %70, align 4
  %72 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %4, i64 0, i32 6, i32 0, i64 7
  %73 = load i32, i32* %72, align 4
  %74 = tail call i32 (i8*, i32, i64, i8*, ...) @__sprintf_chk(i8* %1, i32 1, i64 %57, i8* %42, i32 %59, i32 %61, i32 %63, i32 %65, i32 %67, i32 %69, i32 %71, i32 %73) #10
  br label %75

75:                                               ; preds = %56, %53
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @reset_error_mgr(%struct.jpeg_common_struct* nocapture readonly) #4 {
  %2 = getelementptr inbounds %struct.jpeg_common_struct, %struct.jpeg_common_struct* %0, i64 0, i32 0
  %3 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %2, align 8
  %4 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %3, i64 0, i32 8
  store i64 0, i64* %4, align 8
  %5 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %2, align 8
  %6 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %5, i64 0, i32 5
  store i32 0, i32* %6, align 8
  ret void
}

declare void @jpeg_destroy(%struct.jpeg_common_struct*) local_unnamed_addr #5

; Function Attrs: noreturn nounwind
declare void @exit(i32) local_unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #7

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #7

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #7

declare i32 @__fprintf_chk(%struct._IO_FILE*, i32, i8*, ...) local_unnamed_addr #5

; Function Attrs: nofree
declare i32 @__sprintf_chk(i8*, i32, i64, i8*, ...) local_unnamed_addr #8

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.objectsize.i64.p0i8(i8*, i1 immarg, i1 immarg, i1 immarg) #9

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { noreturn nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { argmemonly nounwind }
attributes #8 = { nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind readnone speculatable }
attributes #10 = { nounwind }
attributes #11 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
