; ModuleID = '../../extensions/common/permissions/manifest_permission.cc'
source_filename = "../../extensions/common/permissions/manifest_permission.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.extensions::ManifestPermission" = type { i32 (...)** }
%"class.base::Value" = type { %"class.absl::variant" }
%"class.absl::variant" = type { %"class.absl::variant_internal::VariantCopyAssignBaseNontrivial" }
%"class.absl::variant_internal::VariantCopyAssignBaseNontrivial" = type { %"class.absl::variant_internal::VariantMoveAssignBaseNontrivial" }
%"class.absl::variant_internal::VariantMoveAssignBaseNontrivial" = type { %"class.absl::variant_internal::VariantCopyBaseNontrivial" }
%"class.absl::variant_internal::VariantCopyBaseNontrivial" = type { %"class.absl::variant_internal::VariantMoveBaseNontrivial" }
%"class.absl::variant_internal::VariantMoveBaseNontrivial" = type { %"class.absl::variant_internal::VariantStateBaseDestructorNontrivial" }
%"class.absl::variant_internal::VariantStateBaseDestructorNontrivial" = type { %"class.absl::variant_internal::VariantStateBase" }
%"class.absl::variant_internal::VariantStateBase" = type { %"union.absl::variant_internal::DestructibleUnionImpl", i64 }
%"union.absl::variant_internal::DestructibleUnionImpl" = type { %"union.absl::variant_internal::DestructibleUnionImpl.1" }
%"union.absl::variant_internal::DestructibleUnionImpl.1" = type { %"union.absl::variant_internal::DestructibleUnionImpl.2" }
%"union.absl::variant_internal::DestructibleUnionImpl.2" = type { %"union.absl::variant_internal::DestructibleUnionImpl.3" }
%"union.absl::variant_internal::DestructibleUnionImpl.3" = type { %"union.absl::variant_internal::DestructibleUnionImpl.4" }
%"union.absl::variant_internal::DestructibleUnionImpl.4" = type { %"class.std::__1::basic_string" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.5" }
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }

@_ZTVN10extensions18ManifestPermissionE = hidden unnamed_addr constant { [14 x i8*] } { [14 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.extensions::ManifestPermission"*)* @_ZN10extensions18ManifestPermissionD2Ev to i8*), i8* bitcast (void (%"class.extensions::ManifestPermission"*)* @_ZN10extensions18ManifestPermissionD0Ev to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (i1 (%"class.extensions::ManifestPermission"*)* @_ZNK10extensions18ManifestPermission38RequiresManagedSessionFullLoginWarningEv to i8*)] }, align 8

@_ZN10extensions18ManifestPermissionD1Ev = hidden unnamed_addr alias void (%"class.extensions::ManifestPermission"*), void (%"class.extensions::ManifestPermission"*)* @_ZN10extensions18ManifestPermissionD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN10extensions18ManifestPermissionC2Ev(%"class.extensions::ManifestPermission"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.extensions::ManifestPermission", %"class.extensions::ManifestPermission"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [14 x i8*] }, { [14 x i8*] }* @_ZTVN10extensions18ManifestPermissionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN10extensions18ManifestPermissionD2Ev(%"class.extensions::ManifestPermission"* nocapture) unnamed_addr #1 align 2 {
  ret void
}

; Function Attrs: noreturn nounwind ssp uwtable
define hidden void @_ZN10extensions18ManifestPermissionD0Ev(%"class.extensions::ManifestPermission"* nocapture readnone) unnamed_addr #2 align 2 {
  tail call void @llvm.trap() #8
  unreachable
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #3

; Function Attrs: nounwind ssp uwtable
define hidden %"class.extensions::ManifestPermission"* @_ZNK10extensions18ManifestPermission5CloneEv(%"class.extensions::ManifestPermission"*) local_unnamed_addr #4 align 2 {
  %2 = bitcast %"class.extensions::ManifestPermission"* %0 to %"class.extensions::ManifestPermission"* (%"class.extensions::ManifestPermission"*, %"class.extensions::ManifestPermission"*)***
  %3 = load %"class.extensions::ManifestPermission"* (%"class.extensions::ManifestPermission"*, %"class.extensions::ManifestPermission"*)**, %"class.extensions::ManifestPermission"* (%"class.extensions::ManifestPermission"*, %"class.extensions::ManifestPermission"*)*** %2, align 8
  %4 = getelementptr inbounds %"class.extensions::ManifestPermission"* (%"class.extensions::ManifestPermission"*, %"class.extensions::ManifestPermission"*)*, %"class.extensions::ManifestPermission"* (%"class.extensions::ManifestPermission"*, %"class.extensions::ManifestPermission"*)** %3, i64 8
  %5 = load %"class.extensions::ManifestPermission"* (%"class.extensions::ManifestPermission"*, %"class.extensions::ManifestPermission"*)*, %"class.extensions::ManifestPermission"* (%"class.extensions::ManifestPermission"*, %"class.extensions::ManifestPermission"*)** %4, align 8
  %6 = tail call %"class.extensions::ManifestPermission"* %5(%"class.extensions::ManifestPermission"* %0, %"class.extensions::ManifestPermission"* %0) #9
  ret %"class.extensions::ManifestPermission"* %6
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK10extensions18ManifestPermission8ContainsEPKS0_(%"class.extensions::ManifestPermission"*, %"class.extensions::ManifestPermission"*) local_unnamed_addr #4 align 2 {
  %3 = bitcast %"class.extensions::ManifestPermission"* %0 to %"class.extensions::ManifestPermission"* (%"class.extensions::ManifestPermission"*, %"class.extensions::ManifestPermission"*)***
  %4 = load %"class.extensions::ManifestPermission"* (%"class.extensions::ManifestPermission"*, %"class.extensions::ManifestPermission"*)**, %"class.extensions::ManifestPermission"* (%"class.extensions::ManifestPermission"*, %"class.extensions::ManifestPermission"*)*** %3, align 8
  %5 = getelementptr inbounds %"class.extensions::ManifestPermission"* (%"class.extensions::ManifestPermission"*, %"class.extensions::ManifestPermission"*)*, %"class.extensions::ManifestPermission"* (%"class.extensions::ManifestPermission"*, %"class.extensions::ManifestPermission"*)** %4, i64 9
  %6 = load %"class.extensions::ManifestPermission"* (%"class.extensions::ManifestPermission"*, %"class.extensions::ManifestPermission"*)*, %"class.extensions::ManifestPermission"* (%"class.extensions::ManifestPermission"*, %"class.extensions::ManifestPermission"*)** %5, align 8
  %7 = tail call %"class.extensions::ManifestPermission"* %6(%"class.extensions::ManifestPermission"* %0, %"class.extensions::ManifestPermission"* %1) #9
  %8 = bitcast %"class.extensions::ManifestPermission"* %7 to %"class.base::Value"* (%"class.extensions::ManifestPermission"*)***
  %9 = load %"class.base::Value"* (%"class.extensions::ManifestPermission"*)**, %"class.base::Value"* (%"class.extensions::ManifestPermission"*)*** %8, align 8
  %10 = getelementptr inbounds %"class.base::Value"* (%"class.extensions::ManifestPermission"*)*, %"class.base::Value"* (%"class.extensions::ManifestPermission"*)** %9, i64 6
  %11 = load %"class.base::Value"* (%"class.extensions::ManifestPermission"*)*, %"class.base::Value"* (%"class.extensions::ManifestPermission"*)** %10, align 8
  %12 = tail call %"class.base::Value"* %11(%"class.extensions::ManifestPermission"* %7) #9
  %13 = bitcast %"class.extensions::ManifestPermission"* %1 to %"class.base::Value"* (%"class.extensions::ManifestPermission"*)***
  %14 = load %"class.base::Value"* (%"class.extensions::ManifestPermission"*)**, %"class.base::Value"* (%"class.extensions::ManifestPermission"*)*** %13, align 8
  %15 = getelementptr inbounds %"class.base::Value"* (%"class.extensions::ManifestPermission"*)*, %"class.base::Value"* (%"class.extensions::ManifestPermission"*)** %14, i64 6
  %16 = load %"class.base::Value"* (%"class.extensions::ManifestPermission"*)*, %"class.base::Value"* (%"class.extensions::ManifestPermission"*)** %15, align 8
  %17 = tail call %"class.base::Value"* %16(%"class.extensions::ManifestPermission"* %1) #9
  %18 = tail call zeroext i1 @_ZN4baseeqERKNS_5ValueES2_(%"class.base::Value"* dereferenceable(32) %12, %"class.base::Value"* dereferenceable(32) %17) #9
  %19 = icmp eq %"class.base::Value"* %17, null
  br i1 %19, label %22, label %20

20:                                               ; preds = %2
  tail call void @_ZN4base5ValueD1Ev(%"class.base::Value"* nonnull %17) #9
  %21 = bitcast %"class.base::Value"* %17 to i8*
  tail call void @_ZdlPv(i8* %21) #10
  br label %22

22:                                               ; preds = %20, %2
  %23 = icmp eq %"class.base::Value"* %12, null
  br i1 %23, label %26, label %24

24:                                               ; preds = %22
  tail call void @_ZN4base5ValueD1Ev(%"class.base::Value"* nonnull %12) #9
  %25 = bitcast %"class.base::Value"* %12 to i8*
  tail call void @_ZdlPv(i8* %25) #10
  br label %26

26:                                               ; preds = %22, %24
  %27 = icmp eq %"class.extensions::ManifestPermission"* %7, null
  br i1 %27, label %33, label %28

28:                                               ; preds = %26
  %29 = bitcast %"class.extensions::ManifestPermission"* %7 to void (%"class.extensions::ManifestPermission"*)***
  %30 = load void (%"class.extensions::ManifestPermission"*)**, void (%"class.extensions::ManifestPermission"*)*** %29, align 8
  %31 = getelementptr inbounds void (%"class.extensions::ManifestPermission"*)*, void (%"class.extensions::ManifestPermission"*)** %30, i64 1
  %32 = load void (%"class.extensions::ManifestPermission"*)*, void (%"class.extensions::ManifestPermission"*)** %31, align 8
  tail call void %32(%"class.extensions::ManifestPermission"* nonnull %7) #9
  br label %33

33:                                               ; preds = %26, %28
  ret i1 %18
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK10extensions18ManifestPermission5EqualEPKS0_(%"class.extensions::ManifestPermission"*, %"class.extensions::ManifestPermission"*) local_unnamed_addr #4 align 2 {
  %3 = bitcast %"class.extensions::ManifestPermission"* %0 to %"class.base::Value"* (%"class.extensions::ManifestPermission"*)***
  %4 = load %"class.base::Value"* (%"class.extensions::ManifestPermission"*)**, %"class.base::Value"* (%"class.extensions::ManifestPermission"*)*** %3, align 8
  %5 = getelementptr inbounds %"class.base::Value"* (%"class.extensions::ManifestPermission"*)*, %"class.base::Value"* (%"class.extensions::ManifestPermission"*)** %4, i64 6
  %6 = load %"class.base::Value"* (%"class.extensions::ManifestPermission"*)*, %"class.base::Value"* (%"class.extensions::ManifestPermission"*)** %5, align 8
  %7 = tail call %"class.base::Value"* %6(%"class.extensions::ManifestPermission"* %0) #9
  %8 = bitcast %"class.extensions::ManifestPermission"* %1 to %"class.base::Value"* (%"class.extensions::ManifestPermission"*)***
  %9 = load %"class.base::Value"* (%"class.extensions::ManifestPermission"*)**, %"class.base::Value"* (%"class.extensions::ManifestPermission"*)*** %8, align 8
  %10 = getelementptr inbounds %"class.base::Value"* (%"class.extensions::ManifestPermission"*)*, %"class.base::Value"* (%"class.extensions::ManifestPermission"*)** %9, i64 6
  %11 = load %"class.base::Value"* (%"class.extensions::ManifestPermission"*)*, %"class.base::Value"* (%"class.extensions::ManifestPermission"*)** %10, align 8
  %12 = tail call %"class.base::Value"* %11(%"class.extensions::ManifestPermission"* %1) #9
  %13 = tail call zeroext i1 @_ZN4baseeqERKNS_5ValueES2_(%"class.base::Value"* dereferenceable(32) %7, %"class.base::Value"* dereferenceable(32) %12) #9
  %14 = icmp eq %"class.base::Value"* %12, null
  br i1 %14, label %17, label %15

15:                                               ; preds = %2
  tail call void @_ZN4base5ValueD1Ev(%"class.base::Value"* nonnull %12) #9
  %16 = bitcast %"class.base::Value"* %12 to i8*
  tail call void @_ZdlPv(i8* %16) #10
  br label %17

17:                                               ; preds = %2, %15
  %18 = icmp eq %"class.base::Value"* %7, null
  br i1 %18, label %21, label %19

19:                                               ; preds = %17
  tail call void @_ZN4base5ValueD1Ev(%"class.base::Value"* nonnull %7) #9
  %20 = bitcast %"class.base::Value"* %7 to i8*
  tail call void @_ZdlPv(i8* %20) #10
  br label %21

21:                                               ; preds = %17, %19
  ret i1 %13
}

declare zeroext i1 @_ZN4baseeqERKNS_5ValueES2_(%"class.base::Value"* dereferenceable(32), %"class.base::Value"* dereferenceable(32)) local_unnamed_addr #5

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZNK10extensions18ManifestPermission38RequiresManagedSessionFullLoginWarningEv(%"class.extensions::ManifestPermission"* nocapture readnone) unnamed_addr #1 align 2 {
  ret i1 true
}

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: nounwind
declare void @_ZN4base5ValueD1Ev(%"class.base::Value"*) unnamed_addr #6

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { cold noreturn nounwind }
attributes #4 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noreturn nounwind }
attributes #9 = { nounwind }
attributes #10 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
