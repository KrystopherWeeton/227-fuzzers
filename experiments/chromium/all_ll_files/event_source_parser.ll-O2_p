; ModuleID = '../../third_party/blink/renderer/modules/eventsource/event_source_parser.cc'
source_filename = "../../third_party/blink/renderer/modules/eventsource/event_source_parser.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.WTF::AtomicString" = type { %"class.WTF::String" }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.blink::GCInfoTable" = type { %"struct.blink::GCInfo"**, i32, i32, %"class.WTF::Mutex" }
%"struct.blink::GCInfo" = type { void (%"class.blink::Visitor"*, i8*)*, void (i8*)*, { i8*, i8 } (i8*)*, i8 }
%"class.blink::Visitor" = type { i32 (...)**, %"class.blink::ThreadState"* }
%"class.blink::ThreadState" = type <{ %"class.std::__1::unique_ptr.2", i32, [4 x i8], %"class.std::__1::unique_ptr.138", %"class.std::__1::unique_ptr.138", i8**, i8, i8, i8, i8, i8, i8, [2 x i8], i64, i64, i32, i32, i32, [4 x i8], %"class.WTF::Deque", %"class.v8::Isolate"*, void (%"class.v8::Isolate"*, %"class.v8::EmbedderGraph"*, i8*)*, %"class.std::__1::unique_ptr.148", %"class.std::__1::unique_ptr.154", %"struct.blink::ThreadState::GCData", %"class.std::__1::unique_ptr.166", %"class.std::__1::unique_ptr.172", %"class.base::JobHandle", %"class.base::JobHandle", %"struct.std::__1::atomic.179", [7 x i8], i64, i8, [7 x i8], i64, %"class.base::TimeTicks", i8, i8, [6 x i8] }>
%"class.std::__1::unique_ptr.2" = type { %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"class.blink::ThreadHeap"* }
%"class.blink::ThreadHeap" = type { %"class.blink::ThreadState"*, %"class.std::__1::unique_ptr.5", %"class.std::__1::unique_ptr.11", %"class.std::__1::unique_ptr.17", %"class.std::__1::unique_ptr.23", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.35", %"class.std::__1::unique_ptr.46", %"class.std::__1::unique_ptr.53", %"class.std::__1::unique_ptr.53", %"class.std::__1::unique_ptr.60", %"class.std::__1::unique_ptr.67", %"class.std::__1::unique_ptr.74", %"class.std::__1::unique_ptr.74", %"class.std::__1::unique_ptr.81", %"class.std::__1::unique_ptr.88", %"class.std::__1::unique_ptr.95", %"class.std::__1::unique_ptr.118", %"struct.blink::ThreadHeap::LastAllocatedRegion", [9 x %"class.blink::BaseArena"*], i64, i64 }
%"class.std::__1::unique_ptr.5" = type { %"class.std::__1::__compressed_pair.6" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %"class.blink::ThreadHeapStatsCollector"* }
%"class.blink::ThreadHeapStatsCollector" = type opaque
%"class.std::__1::unique_ptr.11" = type { %"class.std::__1::__compressed_pair.12" }
%"class.std::__1::__compressed_pair.12" = type { %"struct.std::__1::__compressed_pair_elem.13" }
%"struct.std::__1::__compressed_pair_elem.13" = type { %"class.blink::RegionTree"* }
%"class.blink::RegionTree" = type opaque
%"class.std::__1::unique_ptr.17" = type { %"class.std::__1::__compressed_pair.18" }
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"struct.std::__1::__compressed_pair_elem.19" = type { %"class.blink::PageBloomFilter"* }
%"class.blink::PageBloomFilter" = type opaque
%"class.std::__1::unique_ptr.23" = type { %"class.std::__1::__compressed_pair.24" }
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.25" }
%"struct.std::__1::__compressed_pair_elem.25" = type { %"class.blink::PagePool"* }
%"class.blink::PagePool" = type opaque
%"class.std::__1::unique_ptr.29" = type { %"class.std::__1::__compressed_pair.30" }
%"class.std::__1::__compressed_pair.30" = type { %"struct.std::__1::__compressed_pair_elem.31" }
%"struct.std::__1::__compressed_pair_elem.31" = type { %"class.blink::ProcessHeapReporter"* }
%"class.blink::ProcessHeapReporter" = type opaque
%"class.std::__1::unique_ptr.35" = type { %"class.std::__1::__compressed_pair.36" }
%"class.std::__1::__compressed_pair.36" = type { %"struct.std::__1::__compressed_pair_elem.37" }
%"struct.std::__1::__compressed_pair_elem.37" = type { %"class.blink::Worklist"* }
%"class.blink::Worklist" = type { [4 x %"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, i64, [512 x %"struct.blink::TraceDescriptor"] }
%"struct.blink::TraceDescriptor" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"struct.std::__1::atomic.38" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"struct.std::__1::atomic.38" = type { %"struct.std::__1::__atomic_base.39" }
%"struct.std::__1::__atomic_base.39" = type { %"struct.std::__1::__atomic_base.40" }
%"struct.std::__1::__atomic_base.40" = type { %"struct.std::__1::__cxx_atomic_impl.41" }
%"struct.std::__1::__cxx_atomic_impl.41" = type { %"struct.std::__1::__cxx_atomic_base_impl.42" }
%"struct.std::__1::__cxx_atomic_base_impl.42" = type { i64 }
%"class.std::__1::unique_ptr.46" = type { %"class.std::__1::__compressed_pair.47" }
%"class.std::__1::__compressed_pair.47" = type { %"struct.std::__1::__compressed_pair_elem.48" }
%"struct.std::__1::__compressed_pair_elem.48" = type { %"class.blink::Worklist.49"* }
%"class.blink::Worklist.49" = type { [4 x %"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"struct.std::__1::atomic.38" }
%"class.std::__1::unique_ptr.53" = type { %"class.std::__1::__compressed_pair.54" }
%"class.std::__1::__compressed_pair.54" = type { %"struct.std::__1::__compressed_pair_elem.55" }
%"struct.std::__1::__compressed_pair_elem.55" = type { %"class.blink::Worklist.56"* }
%"class.blink::Worklist.56" = type { [4 x %"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"class.blink::Worklist<const void *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *, 16, 4>::Segment" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, i64, [16 x i8*] }
%"class.blink::Worklist<const void *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"struct.std::__1::atomic.38" }
%"class.std::__1::unique_ptr.60" = type { %"class.std::__1::__compressed_pair.61" }
%"class.std::__1::__compressed_pair.61" = type { %"struct.std::__1::__compressed_pair_elem.62" }
%"struct.std::__1::__compressed_pair_elem.62" = type { %"class.blink::Worklist.63"* }
%"class.blink::Worklist.63" = type { [4 x %"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.38" }
%"class.std::__1::unique_ptr.67" = type { %"class.std::__1::__compressed_pair.68" }
%"class.std::__1::__compressed_pair.68" = type { %"struct.std::__1::__compressed_pair_elem.69" }
%"struct.std::__1::__compressed_pair_elem.69" = type { %"class.blink::Worklist.70"* }
%"class.blink::Worklist.70" = type { [4 x %"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *const *, 256, 4>::Segment" = type opaque
%"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"struct.std::__1::atomic.38" }
%"class.std::__1::unique_ptr.74" = type { %"class.std::__1::__compressed_pair.75" }
%"class.std::__1::__compressed_pair.75" = type { %"struct.std::__1::__compressed_pair_elem.76" }
%"struct.std::__1::__compressed_pair_elem.76" = type { %"class.blink::Worklist.77"* }
%"class.blink::Worklist.77" = type { [4 x %"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.38" }
%"class.std::__1::unique_ptr.81" = type { %"class.std::__1::__compressed_pair.82" }
%"class.std::__1::__compressed_pair.82" = type { %"struct.std::__1::__compressed_pair_elem.83" }
%"struct.std::__1::__compressed_pair_elem.83" = type { %"class.blink::Worklist.84"* }
%"class.blink::Worklist.84" = type { [4 x %"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment" = type opaque
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"struct.std::__1::atomic.38" }
%"class.std::__1::unique_ptr.88" = type { %"class.std::__1::__compressed_pair.89" }
%"class.std::__1::__compressed_pair.89" = type { %"struct.std::__1::__compressed_pair_elem.90" }
%"struct.std::__1::__compressed_pair_elem.90" = type { %"class.blink::Worklist.91"* }
%"class.blink::Worklist.91" = type { [4 x %"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, i64, [64 x %"struct.blink::NotSafeToConcurrentlyTraceItem"] }
%"struct.blink::NotSafeToConcurrentlyTraceItem" = type { %"struct.blink::TraceDescriptor", i64 }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.38" }
%"class.std::__1::unique_ptr.95" = type { %"class.std::__1::__compressed_pair.96" }
%"class.std::__1::__compressed_pair.96" = type { %"struct.std::__1::__compressed_pair_elem.97" }
%"struct.std::__1::__compressed_pair_elem.97" = type { %"class.blink::WeakContainersWorklist"* }
%"class.blink::WeakContainersWorklist" = type { %"class.WTF::Mutex", %"class.std::__1::unordered_set" }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.98", %"class.std::__1::__compressed_pair.105", %"class.std::__1::__compressed_pair.110", %"class.std::__1::__compressed_pair.112", [4 x i8] }>
%"class.std::__1::unique_ptr.98" = type { %"class.std::__1::__compressed_pair.99" }
%"class.std::__1::__compressed_pair.99" = type { %"struct.std::__1::__compressed_pair_elem.100", %"struct.std::__1::__compressed_pair_elem.101" }
%"struct.std::__1::__compressed_pair_elem.100" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.101" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.102" }
%"class.std::__1::__compressed_pair.102" = type { %"struct.std::__1::__compressed_pair_elem.103" }
%"struct.std::__1::__compressed_pair_elem.103" = type { i64 }
%"class.std::__1::__compressed_pair.105" = type { %"struct.std::__1::__compressed_pair_elem.106" }
%"struct.std::__1::__compressed_pair_elem.106" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.110" = type { %"struct.std::__1::__compressed_pair_elem.103" }
%"class.std::__1::__compressed_pair.112" = type { %"struct.std::__1::__compressed_pair_elem.113" }
%"struct.std::__1::__compressed_pair_elem.113" = type { float }
%"class.std::__1::unique_ptr.118" = type { %"class.std::__1::__compressed_pair.119" }
%"class.std::__1::__compressed_pair.119" = type { %"struct.std::__1::__compressed_pair_elem.120" }
%"struct.std::__1::__compressed_pair_elem.120" = type { %"class.blink::HeapCompact"* }
%"class.blink::HeapCompact" = type <{ %"class.blink::ThreadHeap"*, %"class.std::__1::unique_ptr.121", i8, [7 x i8], i64, i64, i32, [4 x i8], i64, i8, [7 x i8] }>
%"class.std::__1::unique_ptr.121" = type { %"class.std::__1::__compressed_pair.122" }
%"class.std::__1::__compressed_pair.122" = type { %"struct.std::__1::__compressed_pair_elem.123" }
%"struct.std::__1::__compressed_pair_elem.123" = type { %"class.blink::HeapCompact::MovableObjectFixups"* }
%"class.blink::HeapCompact::MovableObjectFixups" = type opaque
%"struct.blink::ThreadHeap::LastAllocatedRegion" = type { i8*, i64 }
%"class.blink::BaseArena" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32, [4 x i8] }>
%"class.blink::PageStackThreadSafe" = type { %"class.blink::PageStack", %"class.WTF::Mutex" }
%"class.blink::PageStack" = type { %"class.WTF::Vector.130" }
%"class.WTF::Vector.130" = type { %"class.WTF::VectorBuffer.131" }
%"class.WTF::VectorBuffer.131" = type { %"class.WTF::VectorBufferBase.132" }
%"class.WTF::VectorBufferBase.132" = type { %"class.blink::BasePage"**, i32, i32 }
%"class.blink::BasePage" = type <{ i32 (...)**, %"class.blink::PageMemory"*, %"class.blink::BaseArena"*, %"class.blink::ThreadState"*, i64, i8, i8, i8, [5 x i8] }>
%"class.blink::PageMemory" = type opaque
%"class.std::__1::unique_ptr.138" = type { %"class.std::__1::__compressed_pair.139" }
%"class.std::__1::__compressed_pair.139" = type { %"struct.std::__1::__compressed_pair_elem.140" }
%"struct.std::__1::__compressed_pair_elem.140" = type { %"class.blink::PersistentRegion"* }
%"class.blink::PersistentRegion" = type { %"class.blink::PersistentRegionBase" }
%"class.blink::PersistentRegionBase" = type { %"class.blink::PersistentNode"*, %"struct.blink::PersistentNodeSlots"* }
%"class.blink::PersistentNode" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"struct.blink::PersistentNodeSlots" = type { %"struct.blink::PersistentNodeSlots"*, [256 x %"class.blink::PersistentNode"] }
%"class.WTF::Deque" = type { %"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer.146" }
%"class.WTF::VectorBuffer.146" = type { %"class.WTF::VectorBufferBase.147" }
%"class.WTF::VectorBufferBase.147" = type { %"struct.std::__1::pair"*, i32, i32 }
%"struct.std::__1::pair" = type { i8*, i1 (%"class.blink::LivenessBroker"*, i8*)* }
%"class.blink::LivenessBroker" = type { i8 }
%"class.v8::Isolate" = type { i8 }
%"class.v8::EmbedderGraph" = type opaque
%"class.std::__1::unique_ptr.148" = type { %"class.std::__1::__compressed_pair.149" }
%"class.std::__1::__compressed_pair.149" = type { %"struct.std::__1::__compressed_pair_elem.150" }
%"struct.std::__1::__compressed_pair_elem.150" = type { %"class.blink::UnifiedHeapController"* }
%"class.blink::UnifiedHeapController" = type opaque
%"class.std::__1::unique_ptr.154" = type { %"class.std::__1::__compressed_pair.155" }
%"class.std::__1::__compressed_pair.155" = type { %"struct.std::__1::__compressed_pair_elem.156" }
%"struct.std::__1::__compressed_pair_elem.156" = type { %"class.v8::EmbedderRootsHandler"* }
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"struct.blink::ThreadState::GCData" = type { i32, i32, i32, i32, %"class.std::__1::unique_ptr.160" }
%"class.std::__1::unique_ptr.160" = type { %"class.std::__1::__compressed_pair.161" }
%"class.std::__1::__compressed_pair.161" = type { %"struct.std::__1::__compressed_pair_elem.162" }
%"struct.std::__1::__compressed_pair_elem.162" = type { %"class.blink::MarkingVisitor"* }
%"class.blink::MarkingVisitor" = type { %"class.blink::MarkingVisitorBase", %"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" }
%"class.blink::MarkingVisitorBase" = type { %"class.blink::Visitor", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View", %"class.blink::Worklist<const void *, 16, 4>::View", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View", %"class.blink::Worklist<const void *const *, 256, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::WeakContainersWorklist"*, i64, i32, i32 }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View" = type <{ %"class.blink::Worklist"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View" = type <{ %"class.blink::Worklist.49"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *, 16, 4>::View" = type <{ %"class.blink::Worklist.56"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View" = type <{ %"class.blink::Worklist.63"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *const *, 256, 4>::View" = type <{ %"class.blink::Worklist.70"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View" = type <{ %"class.blink::Worklist.77"*, i32, [4 x i8] }>
%"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" = type { %"class.std::__1::vector", i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.blink::HeapObjectHeader"**, %"class.blink::HeapObjectHeader"**, %"class.std::__1::__compressed_pair.183" }
%"class.blink::HeapObjectHeader" = type { i32, i16, i16 }
%"class.std::__1::__compressed_pair.183" = type { %"struct.std::__1::__compressed_pair_elem.184" }
%"struct.std::__1::__compressed_pair_elem.184" = type { %"class.blink::HeapObjectHeader"** }
%"class.std::__1::unique_ptr.166" = type { %"class.std::__1::__compressed_pair.167" }
%"class.std::__1::__compressed_pair.167" = type { %"struct.std::__1::__compressed_pair_elem.168" }
%"struct.std::__1::__compressed_pair_elem.168" = type { %"class.blink::ThreadState::IncrementalMarkingScheduler"* }
%"class.blink::ThreadState::IncrementalMarkingScheduler" = type opaque
%"class.std::__1::unique_ptr.172" = type { %"class.std::__1::__compressed_pair.173" }
%"class.std::__1::__compressed_pair.173" = type { %"struct.std::__1::__compressed_pair_elem.174" }
%"struct.std::__1::__compressed_pair_elem.174" = type { %"class.blink::MarkingSchedulingOracle"* }
%"class.blink::MarkingSchedulingOracle" = type opaque
%"class.base::JobHandle" = type { %class.scoped_refptr.178 }
%class.scoped_refptr.178 = type { %"class.base::internal::JobTaskSource"* }
%"class.base::internal::JobTaskSource" = type opaque
%"struct.std::__1::atomic.179" = type { %"struct.std::__1::__atomic_base.180" }
%"struct.std::__1::__atomic_base.180" = type { %"struct.std::__1::__cxx_atomic_impl.181" }
%"struct.std::__1::__cxx_atomic_impl.181" = type { %"struct.std::__1::__cxx_atomic_base_impl.182" }
%"struct.std::__1::__cxx_atomic_base_impl.182" = type { i8 }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.WTF::Mutex" = type { %"class.WTF::MutexBase" }
%"class.WTF::MutexBase" = type { %"struct.WTF::PlatformMutex" }
%"struct.WTF::PlatformMutex" = type { %union.pthread_mutex_t }
%"class.blink::EventSourceParser" = type <{ %"class.WTF::Vector", %"class.WTF::AtomicString", %"class.WTF::Vector", %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.blink::Member", %"class.std::__1::unique_ptr", i8, i8, i8, [5 x i8] }>
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { i8*, i32, i32 }
%"class.blink::Member" = type { %"class.blink::MemberBase" }
%"class.blink::MemberBase" = type { %"class.blink::EventSourceParser::Client"* }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.WTF::TextCodec"* }
%"class.WTF::TextCodec" = type { i32 (...)** }
%"class.blink::EventSourceParser::Client" = type { %"class.blink::GarbageCollectedMixin" }
%"class.blink::GarbageCollectedMixin" = type { i32 (...)** }
%"class.WTF::TextEncoding" = type { i8* }
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.188" }
%"class.std::__1::__compressed_pair.188" = type { %"struct.std::__1::__compressed_pair_elem.189" }
%"struct.std::__1::__compressed_pair_elem.189" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.WTF::StringView" = type <{ %"class.WTF::StringImpl"*, i8*, i32, [4 x i8] }>
%"class.blink::NormalPage" = type { %"class.blink::BasePage.base", %"class.blink::NormalPage::CardTable", %"class.blink::PlatformAwareObjectStartBitmap", %"class.WTF::Vector.201", %"class.blink::FreeList", %"class.WTF::Vector.206" }
%"class.blink::BasePage.base" = type <{ i32 (...)**, %"class.blink::PageMemory"*, %"class.blink::BaseArena"*, %"class.blink::ThreadState"*, i64, i8, i8, i8 }>
%"class.blink::NormalPage::CardTable" = type { %"struct.std::__1::array" }
%"struct.std::__1::array" = type { [256 x i8] }
%"class.blink::PlatformAwareObjectStartBitmap" = type { %"class.blink::ObjectStartBitmap" }
%"class.blink::ObjectStartBitmap" = type { i8*, [2048 x i8] }
%"class.WTF::Vector.201" = type { %"class.WTF::VectorBuffer.202" }
%"class.WTF::VectorBuffer.202" = type { %"class.WTF::VectorBufferBase.203" }
%"class.WTF::VectorBufferBase.203" = type { %"struct.blink::NormalPage::ToBeFinalizedObject"*, i32, i32 }
%"struct.blink::NormalPage::ToBeFinalizedObject" = type { %"class.blink::HeapObjectHeader"* }
%"class.blink::FreeList" = type <{ [17 x %"class.blink::FreeListEntry"*], [17 x %"class.blink::FreeListEntry"*], i32, [4 x i8] }>
%"class.blink::FreeListEntry" = type { %"class.blink::HeapObjectHeader", %"class.blink::FreeListEntry"* }
%"class.WTF::Vector.206" = type { %"class.WTF::VectorBuffer.207" }
%"class.WTF::VectorBuffer.207" = type { %"class.WTF::VectorBufferBase.208" }
%"class.WTF::VectorBufferBase.208" = type { %"struct.blink::NormalPage::FutureFreelistEntry"*, i32, i32 }
%"struct.blink::NormalPage::FutureFreelistEntry" = type { i8*, i64 }

$_ZN3WTF6VectorIcLj0ENS_18PartitionAllocatorEE6AppendIcEEvPKT_j = comdat any

$_ZN3WTF6VectorIcLj0ENS_18PartitionAllocatorEE14ExpandCapacityEjPc = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeIcEEmm = comdat any

$_ZN3WTF6VectorIcLj0ENS_18PartitionAllocatorEE2atEj = comdat any

$_ZN3WTF6VectorIcLj0ENS_18PartitionAllocatorEE14AppendSlowCaseIcEEvOT_ = comdat any

@_ZZN5blink17EventSourceParser8AddBytesEPKcjE4kBOM = internal constant [3 x i8] c"\EF\BB\BF", align 1
@_ZN5blink16event_type_names8kMessageE = external local_unnamed_addr constant %"class.WTF::AtomicString"*, align 8
@_ZN3WTF11g_null_atomE = external local_unnamed_addr constant %"class.WTF::AtomicString"*, align 8
@.str = private unnamed_addr constant [6 x i8] c"event\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"data\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"id\00", align 1
@.str.3 = private unnamed_addr constant [6 x i8] c"retry\00", align 1
@_ZN5blink11EventSource22kDefaultReconnectDelayE = external local_unnamed_addr constant i64, align 8
@_ZN3WTF10StringImpl6empty_E = external local_unnamed_addr global %"class.WTF::StringImpl"*, align 8
@.str.4 = private unnamed_addr constant [18 x i8] c"new_size >= size_\00", align 1
@.str.5 = private unnamed_addr constant [55 x i8] c"../../third_party/blink/renderer/platform/wtf/vector.h\00", align 1
@.str.7 = private unnamed_addr constant [44 x i8] c"count <= MaxElementCountInBackingStore<T>()\00", align 1
@.str.8 = private unnamed_addr constant [78 x i8] c"../../third_party/blink/renderer/platform/wtf/allocator/partition_allocator.h\00", align 1
@.str.9 = private unnamed_addr constant [11 x i8] c"i < size()\00", align 1
@_ZN5blink11GCInfoTable13global_table_E = external local_unnamed_addr global %"class.blink::GCInfoTable"*, align 8

@_ZN5blink17EventSourceParserC1ERKN3WTF12AtomicStringEPNS0_6ClientE = hidden unnamed_addr alias void (%"class.blink::EventSourceParser"*, %"class.WTF::AtomicString"*, %"class.blink::EventSourceParser::Client"*), void (%"class.blink::EventSourceParser"*, %"class.WTF::AtomicString"*, %"class.blink::EventSourceParser::Client"*)* @_ZN5blink17EventSourceParserC2ERKN3WTF12AtomicStringEPNS0_6ClientE

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink17EventSourceParserC2ERKN3WTF12AtomicStringEPNS0_6ClientE(%"class.blink::EventSourceParser"* nocapture, %"class.WTF::AtomicString"* nocapture readonly dereferenceable(8), %"class.blink::EventSourceParser::Client"*) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 0, i32 0, i32 0, i32 0
  %5 = bitcast %"class.blink::EventSourceParser"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 40, i1 false)
  %6 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %4, align 8
  %7 = getelementptr inbounds %"class.blink::EventSourceParser", %"class.blink::EventSourceParser"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %6, %"class.WTF::StringImpl"** %7, align 8
  %8 = icmp eq %"class.WTF::StringImpl"* %6, null
  br i1 %8, label %26, label %9

9:                                                ; preds = %3
  %10 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %11 = load atomic i32, i32* %10 monotonic, align 4
  %12 = and i32 %11, 2
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %26

14:                                               ; preds = %9
  %15 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 0, i32 0
  %16 = load i32, i32* %15, align 4
  %17 = zext i32 %16 to i33
  %18 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %17, i33 1) #9
  %19 = extractvalue { i33, i1 } %18, 1
  %20 = extractvalue { i33, i1 } %18, 0
  %21 = icmp slt i33 %20, 0
  %22 = or i1 %19, %21
  br i1 %22, label %23, label %24, !prof !2

23:                                               ; preds = %14
  tail call void @llvm.trap() #9
  unreachable

24:                                               ; preds = %14
  %25 = trunc i33 %20 to i32
  store i32 %25, i32* %15, align 4
  br label %26

26:                                               ; preds = %3, %9, %24
  %27 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %4, align 8
  %28 = getelementptr inbounds %"class.blink::EventSourceParser", %"class.blink::EventSourceParser"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %27, %"class.WTF::StringImpl"** %28, align 8
  %29 = icmp eq %"class.WTF::StringImpl"* %27, null
  br i1 %29, label %47, label %30

30:                                               ; preds = %26
  %31 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %27, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %32 = load atomic i32, i32* %31 monotonic, align 4
  %33 = and i32 %32, 2
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %47

35:                                               ; preds = %30
  %36 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %27, i64 0, i32 0
  %37 = load i32, i32* %36, align 4
  %38 = zext i32 %37 to i33
  %39 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %38, i33 1) #9
  %40 = extractvalue { i33, i1 } %39, 1
  %41 = extractvalue { i33, i1 } %39, 0
  %42 = icmp slt i33 %41, 0
  %43 = or i1 %40, %42
  br i1 %43, label %44, label %45, !prof !2

44:                                               ; preds = %35
  tail call void @llvm.trap() #9
  unreachable

45:                                               ; preds = %35
  %46 = trunc i33 %41 to i32
  store i32 %46, i32* %36, align 4
  br label %47

47:                                               ; preds = %26, %30, %45
  %48 = getelementptr inbounds %"class.blink::EventSourceParser", %"class.blink::EventSourceParser"* %0, i64 0, i32 5, i32 0, i32 0
  store %"class.blink::EventSourceParser::Client"* %2, %"class.blink::EventSourceParser::Client"** %48, align 8
  %49 = tail call dereferenceable(8) %"class.WTF::TextEncoding"* @_ZN3WTF12UTF8EncodingEv() #9
  %50 = tail call %"class.WTF::TextCodec"* @_ZN3WTF12NewTextCodecERKNS_12TextEncodingE(%"class.WTF::TextEncoding"* dereferenceable(8) %49) #9
  %51 = getelementptr inbounds %"class.blink::EventSourceParser", %"class.blink::EventSourceParser"* %0, i64 0, i32 6, i32 0, i32 0, i32 0
  store %"class.WTF::TextCodec"* %50, %"class.WTF::TextCodec"** %51, align 8
  %52 = getelementptr inbounds %"class.blink::EventSourceParser", %"class.blink::EventSourceParser"* %0, i64 0, i32 7
  store i8 0, i8* %52, align 8
  %53 = getelementptr inbounds %"class.blink::EventSourceParser", %"class.blink::EventSourceParser"* %0, i64 0, i32 8
  store i8 1, i8* %53, align 1
  %54 = getelementptr inbounds %"class.blink::EventSourceParser", %"class.blink::EventSourceParser"* %0, i64 0, i32 9
  store i8 0, i8* %54, align 2
  ret void
}

declare %"class.WTF::TextCodec"* @_ZN3WTF12NewTextCodecERKNS_12TextEncodingE(%"class.WTF::TextEncoding"* dereferenceable(8)) local_unnamed_addr #1

declare dereferenceable(8) %"class.WTF::TextEncoding"* @_ZN3WTF12UTF8EncodingEv() local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink17EventSourceParser8AddBytesEPKcj(%"class.blink::EventSourceParser"*, i8*, i32) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.WTF::Vector", align 8
  %5 = getelementptr inbounds %"class.blink::EventSourceParser", %"class.blink::EventSourceParser"* %0, i64 0, i32 9
  %6 = icmp eq i32 %2, 0
  br i1 %6, label %27, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.blink::EventSourceParser", %"class.blink::EventSourceParser"* %0, i64 0, i32 8
  %9 = getelementptr inbounds %"class.blink::EventSourceParser", %"class.blink::EventSourceParser"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %10 = bitcast %"class.WTF::Vector"* %4 to i8*
  %11 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %4, i64 0, i32 0, i32 0, i32 0
  %12 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %4, i64 0, i32 0, i32 0, i32 1
  %13 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %4, i64 0, i32 0, i32 0, i32 2
  %14 = getelementptr inbounds %"class.blink::EventSourceParser", %"class.blink::EventSourceParser"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %15 = bitcast %"class.WTF::Vector"* %4 to i64*
  %16 = getelementptr inbounds %"class.blink::EventSourceParser", %"class.blink::EventSourceParser"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %17 = bitcast %"class.blink::EventSourceParser"* %0 to i64*
  %18 = getelementptr inbounds %"class.blink::EventSourceParser", %"class.blink::EventSourceParser"* %0, i64 0, i32 7
  %19 = getelementptr inbounds %"class.blink::EventSourceParser", %"class.blink::EventSourceParser"* %0, i64 0, i32 0
  %20 = zext i32 %2 to i64
  %21 = bitcast %"class.WTF::Vector"* %4 to i8*
  br label %22

22:                                               ; preds = %116, %7
  %23 = phi i64 [ 0, %7 ], [ %118, %116 ]
  %24 = phi i32 [ 0, %7 ], [ %117, %116 ]
  %25 = load i8, i8* %5, align 2, !range !3
  %26 = icmp eq i8 %25, 0
  br i1 %26, label %31, label %125

27:                                               ; preds = %116, %3
  %28 = phi i32 [ 0, %3 ], [ %117, %116 ]
  %29 = load i8, i8* %5, align 2
  %30 = icmp eq i8 %29, 0
  br i1 %30, label %120, label %125

31:                                               ; preds = %22
  %32 = load i8, i8* %8, align 1, !range !3
  %33 = icmp eq i8 %32, 0
  br i1 %33, label %84, label %34

34:                                               ; preds = %31
  %35 = load i32, i32* %9, align 4
  %36 = trunc i64 %23 to i32
  %37 = sub i32 %36, %24
  %38 = add i32 %35, %37
  %39 = icmp eq i32 %38, 3
  br i1 %39, label %40, label %84

40:                                               ; preds = %34
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %10) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %21, i8 -86, i64 16, i1 false)
  %41 = load i32, i32* %14, align 8
  store i8* null, i8** %11, align 8
  store i32 0, i32* %12, align 8
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %43, label %44

43:                                               ; preds = %40
  store i32 %35, i32* %13, align 4
  br label %57

44:                                               ; preds = %40
  %45 = zext i32 %41 to i64
  %46 = call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIcEEmm(i64 %45) #9
  %47 = call i8* @_ZN3WTF18PartitionAllocator21AllocateVectorBackingIcEEPT_m(i64 %46) #9
  %48 = ptrtoint i8* %47 to i64
  store atomic i64 %48, i64* %15 monotonic, align 8
  %49 = trunc i64 %46 to i32
  store i32 %49, i32* %12, align 8
  %50 = load i32, i32* %9, align 4
  store i32 %50, i32* %13, align 4
  %51 = load i8*, i8** %16, align 8
  %52 = icmp ne i8* %47, null
  %53 = icmp ne i8* %51, null
  %54 = and i1 %52, %53
  br i1 %54, label %55, label %57, !prof !4

55:                                               ; preds = %44
  %56 = zext i32 %50 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %47, i8* nonnull align 1 %51, i64 %56, i1 false) #9
  br label %57

57:                                               ; preds = %43, %44, %55
  %58 = zext i32 %24 to i64
  %59 = getelementptr inbounds i8, i8* %1, i64 %58
  call void @_ZN3WTF6VectorIcLj0ENS_18PartitionAllocatorEE6AppendIcEEvPKT_j(%"class.WTF::Vector"* nonnull %4, i8* %59, i32 %37)
  store i8 0, i8* %8, align 1
  %60 = load i8*, i8** %11, align 8
  %61 = call i32 @bcmp(i8* %60, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @_ZZN5blink17EventSourceParser8AddBytesEPKcjE4kBOM, i64 0, i64 0), i64 3)
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %63, label %73

63:                                               ; preds = %57
  %64 = load i32, i32* %14, align 8
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %73, label %66

66:                                               ; preds = %63
  %67 = load i32, i32* %9, align 4
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %70, label %69

69:                                               ; preds = %66
  store i32 0, i32* %9, align 4
  br label %70

70:                                               ; preds = %69, %66
  %71 = load i8*, i8** %16, align 8
  store atomic i64 0, i64* %17 monotonic, align 8
  store i32 0, i32* %14, align 8
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %71) #9
  %72 = load i8*, i8** %11, align 8
  br label %73

73:                                               ; preds = %70, %63, %57
  %74 = phi i8* [ %60, %57 ], [ %60, %63 ], [ %72, %70 ]
  %75 = phi i32 [ %24, %57 ], [ %36, %63 ], [ %36, %70 ]
  %76 = phi i1 [ true, %57 ], [ false, %63 ], [ false, %70 ]
  %77 = icmp eq i8* %74, null
  br i1 %77, label %83, label %78, !prof !4

78:                                               ; preds = %73
  %79 = load i32, i32* %13, align 4
  %80 = icmp eq i32 %79, 0
  br i1 %80, label %82, label %81, !prof !2

81:                                               ; preds = %78
  store i32 0, i32* %13, align 4
  br label %82

82:                                               ; preds = %81, %78
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %74) #9
  store i8* null, i8** %11, align 8
  br label %83

83:                                               ; preds = %73, %82
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10) #9
  br i1 %76, label %84, label %116

84:                                               ; preds = %31, %83, %34
  %85 = phi i32 [ %75, %83 ], [ %24, %34 ], [ %24, %31 ]
  %86 = load i8, i8* %18, align 8, !range !3
  %87 = icmp eq i8 %86, 0
  br i1 %87, label %94, label %88

88:                                               ; preds = %84
  %89 = getelementptr inbounds i8, i8* %1, i64 %23
  %90 = load i8, i8* %89, align 1
  %91 = icmp eq i8 %90, 10
  br i1 %91, label %92, label %94

92:                                               ; preds = %88
  store i8 0, i8* %18, align 8
  %93 = add i32 %85, 1
  br label %116

94:                                               ; preds = %84, %88
  store i8 0, i8* %18, align 8
  %95 = getelementptr inbounds i8, i8* %1, i64 %23
  %96 = load i8, i8* %95, align 1
  switch i8 %96, label %116 [
    i8 13, label %97
    i8 10, label %97
  ]

97:                                               ; preds = %94, %94
  %98 = zext i32 %85 to i64
  %99 = getelementptr inbounds i8, i8* %1, i64 %98
  %100 = trunc i64 %23 to i32
  %101 = sub i32 %100, %85
  call void @_ZN3WTF6VectorIcLj0ENS_18PartitionAllocatorEE6AppendIcEEvPKT_j(%"class.WTF::Vector"* %19, i8* %99, i32 %101)
  call void @_ZN5blink17EventSourceParser9ParseLineEv(%"class.blink::EventSourceParser"* %0)
  %102 = load i32, i32* %14, align 8
  %103 = icmp eq i32 %102, 0
  br i1 %103, label %110, label %104

104:                                              ; preds = %97
  %105 = load i32, i32* %9, align 4
  %106 = icmp eq i32 %105, 0
  br i1 %106, label %108, label %107

107:                                              ; preds = %104
  store i32 0, i32* %9, align 4
  br label %108

108:                                              ; preds = %107, %104
  %109 = load i8*, i8** %16, align 8
  store atomic i64 0, i64* %17 monotonic, align 8
  store i32 0, i32* %14, align 8
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %109) #9
  br label %110

110:                                              ; preds = %97, %108
  %111 = load i8, i8* %95, align 1
  %112 = icmp eq i8 %111, 13
  %113 = zext i1 %112 to i8
  store i8 %113, i8* %18, align 8
  store i8 0, i8* %8, align 1
  %114 = trunc i64 %23 to i32
  %115 = add i32 %114, 1
  br label %116

116:                                              ; preds = %94, %110, %83, %92
  %117 = phi i32 [ %93, %92 ], [ %115, %110 ], [ %75, %83 ], [ %85, %94 ]
  %118 = add nuw nsw i64 %23, 1
  %119 = icmp eq i64 %118, %20
  br i1 %119, label %27, label %22

120:                                              ; preds = %27
  %121 = getelementptr inbounds %"class.blink::EventSourceParser", %"class.blink::EventSourceParser"* %0, i64 0, i32 0
  %122 = zext i32 %28 to i64
  %123 = getelementptr inbounds i8, i8* %1, i64 %122
  %124 = sub i32 %2, %28
  call void @_ZN3WTF6VectorIcLj0ENS_18PartitionAllocatorEE6AppendIcEEvPKT_j(%"class.WTF::Vector"* %121, i8* %123, i32 %124)
  br label %125

125:                                              ; preds = %22, %27, %120
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIcLj0ENS_18PartitionAllocatorEE6AppendIcEEvPKT_j(%"class.WTF::Vector"*, i8*, i32) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckOpResult", align 8
  %6 = alloca %"class.logging::CheckError", align 8
  %7 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, %2
  %10 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  %11 = load i32, i32* %10, align 8
  %12 = icmp ugt i32 %9, %11
  br i1 %12, label %13, label %16

13:                                               ; preds = %3
  %14 = tail call i8* @_ZN3WTF6VectorIcLj0ENS_18PartitionAllocatorEE14ExpandCapacityEjPc(%"class.WTF::Vector"* %0, i32 %9, i8* %1) #9
  %15 = load i32, i32* %7, align 4
  br label %16

16:                                               ; preds = %13, %3
  %17 = phi i32 [ %15, %13 ], [ %8, %3 ]
  %18 = phi i8* [ %14, %13 ], [ %1, %3 ]
  %19 = bitcast %"class.logging::CheckOpResult"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %19) #9
  %20 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %5, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %20, align 8
  %21 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21)
  %22 = icmp ult i32 %9, %17
  br i1 %22, label %24, label %23

23:                                               ; preds = %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21)
  store i8* null, i8** %20, align 8
  br label %33

24:                                               ; preds = %16
  %25 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #9
  %26 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %17) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %4, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.4, i64 0, i64 0), i8* %25, i8* %26) #9
  %27 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  %28 = load i8*, i8** %27, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21)
  store i8* %28, i8** %20, align 8
  %29 = icmp eq i8* %28, null
  br i1 %29, label %33, label %30

30:                                               ; preds = %24
  %31 = bitcast %"class.logging::CheckError"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %31) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %6, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.5, i64 0, i64 0), i32 1907, %"class.logging::CheckOpResult"* nonnull %5) #9
  %32 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %6) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %6) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %31) #9
  br label %33

33:                                               ; preds = %23, %24, %30
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19) #9
  %34 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %35 = load i8*, i8** %34, align 8
  %36 = load i32, i32* %7, align 4
  %37 = zext i32 %36 to i64
  %38 = getelementptr inbounds i8, i8* %35, i64 %37
  %39 = icmp ne i8* %38, null
  %40 = icmp ne i8* %18, null
  %41 = and i1 %40, %39
  br i1 %41, label %42, label %44, !prof !4

42:                                               ; preds = %33
  %43 = zext i32 %2 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %38, i8* nonnull align 1 %18, i64 %43, i1 false) #9
  br label %44

44:                                               ; preds = %33, %42
  store i32 %9, i32* %7, align 4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink17EventSourceParser9ParseLineEv(%"class.blink::EventSourceParser"*) local_unnamed_addr #0 align 2 {
  %2 = alloca i8, align 1
  %3 = alloca %"class.WTF::StringView", align 8
  %4 = alloca %"class.WTF::StringView", align 8
  %5 = alloca %"class.WTF::StringView", align 8
  %6 = alloca %"class.WTF::StringView", align 8
  %7 = alloca i8, align 1
  %8 = alloca %"class.WTF::StringView", align 8
  %9 = alloca %"class.WTF::StringView", align 8
  %10 = alloca i8, align 1
  %11 = alloca %"class.WTF::StringView", align 8
  %12 = alloca %"class.WTF::StringView", align 8
  %13 = alloca i8, align 1
  %14 = alloca i8, align 1
  %15 = alloca %"class.WTF::String", align 8
  %16 = alloca i8, align 1
  %17 = alloca i8, align 1
  %18 = alloca %"class.WTF::String", align 8
  %19 = getelementptr inbounds %"class.blink::EventSourceParser", %"class.blink::EventSourceParser"* %0, i64 0, i32 0
  %20 = getelementptr inbounds %"class.blink::EventSourceParser", %"class.blink::EventSourceParser"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %21 = load i32, i32* %20, align 4
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %23, label %169

23:                                               ; preds = %1
  %24 = getelementptr inbounds %"class.blink::EventSourceParser", %"class.blink::EventSourceParser"* %0, i64 0, i32 4
  %25 = getelementptr inbounds %"class.blink::EventSourceParser", %"class.blink::EventSourceParser"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %26 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %25, align 8
  %27 = icmp eq %"class.WTF::StringImpl"* %26, null
  br i1 %27, label %45, label %28

28:                                               ; preds = %23
  %29 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %26, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %30 = load atomic i32, i32* %29 monotonic, align 4
  %31 = and i32 %30, 2
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %33, label %45

33:                                               ; preds = %28
  %34 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %26, i64 0, i32 0
  %35 = load i32, i32* %34, align 4
  %36 = zext i32 %35 to i33
  %37 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %36, i33 1) #9
  %38 = extractvalue { i33, i1 } %37, 1
  %39 = extractvalue { i33, i1 } %37, 0
  %40 = icmp slt i33 %39, 0
  %41 = or i1 %38, %40
  br i1 %41, label %42, label %43, !prof !2

42:                                               ; preds = %33
  tail call void @llvm.trap() #9
  unreachable

43:                                               ; preds = %33
  %44 = trunc i33 %39 to i32
  store i32 %44, i32* %34, align 4
  br label %45

45:                                               ; preds = %43, %28, %23
  %46 = ptrtoint %"class.WTF::StringImpl"* %26 to i64
  %47 = bitcast %"class.WTF::AtomicString"* %24 to i64*
  %48 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %24, i64 0, i32 0, i32 0, i32 0
  %49 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %48, align 8
  store i64 %46, i64* %47, align 8
  %50 = icmp eq %"class.WTF::StringImpl"* %49, null
  br i1 %50, label %64, label %51

51:                                               ; preds = %45
  %52 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %49, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %53 = load atomic i32, i32* %52 monotonic, align 4
  %54 = and i32 %53, 2
  %55 = icmp eq i32 %54, 0
  %56 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %49, i64 0, i32 0
  %57 = load i32, i32* %56, align 4
  br i1 %55, label %58, label %60

58:                                               ; preds = %51
  %59 = add i32 %57, -1
  store i32 %59, i32* %56, align 4
  br label %60

60:                                               ; preds = %58, %51
  %61 = phi i32 [ %59, %58 ], [ %57, %51 ]
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %63, label %64

63:                                               ; preds = %60
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %49) #9
  br label %64

64:                                               ; preds = %45, %60, %63
  %65 = getelementptr inbounds %"class.blink::EventSourceParser", %"class.blink::EventSourceParser"* %0, i64 0, i32 2
  %66 = getelementptr inbounds %"class.blink::EventSourceParser", %"class.blink::EventSourceParser"* %0, i64 0, i32 2, i32 0, i32 0, i32 2
  %67 = load i32, i32* %66, align 4
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %127, label %69

69:                                               ; preds = %64
  %70 = bitcast %"class.WTF::String"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %70) #9
  %71 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %15, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* inttoptr (i64 -6148914691236517206 to %"class.WTF::StringImpl"*), %"class.WTF::StringImpl"** %71, align 8
  %72 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %65, i64 0, i32 0, i32 0, i32 0
  %73 = load i8*, i8** %72, align 8
  %74 = add i32 %67, -1
  %75 = getelementptr inbounds %"class.blink::EventSourceParser", %"class.blink::EventSourceParser"* %0, i64 0, i32 6, i32 0, i32 0, i32 0
  %76 = load %"class.WTF::TextCodec"*, %"class.WTF::TextCodec"** %75, align 8
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %13) #9
  store i8 -86, i8* %13, align 1
  %77 = bitcast %"class.WTF::TextCodec"* %76 to %"class.WTF::StringImpl"* (%"class.WTF::TextCodec"*, i8*, i32, i32, i1, i8*)***
  %78 = load %"class.WTF::StringImpl"* (%"class.WTF::TextCodec"*, i8*, i32, i32, i1, i8*)**, %"class.WTF::StringImpl"* (%"class.WTF::TextCodec"*, i8*, i32, i32, i1, i8*)*** %77, align 8
  %79 = getelementptr inbounds %"class.WTF::StringImpl"* (%"class.WTF::TextCodec"*, i8*, i32, i32, i1, i8*)*, %"class.WTF::StringImpl"* (%"class.WTF::TextCodec"*, i8*, i32, i32, i1, i8*)** %78, i64 2
  %80 = load %"class.WTF::StringImpl"* (%"class.WTF::TextCodec"*, i8*, i32, i32, i1, i8*)*, %"class.WTF::StringImpl"* (%"class.WTF::TextCodec"*, i8*, i32, i32, i1, i8*)** %79, align 8
  %81 = call %"class.WTF::StringImpl"* %80(%"class.WTF::TextCodec"* %76, i8* %73, i32 %74, i32 2, i1 zeroext false, i8* nonnull dereferenceable(1) %13) #9
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %13) #9
  store %"class.WTF::StringImpl"* %81, %"class.WTF::StringImpl"** %71, align 8
  %82 = getelementptr inbounds %"class.blink::EventSourceParser", %"class.blink::EventSourceParser"* %0, i64 0, i32 5, i32 0, i32 0
  %83 = load %"class.blink::EventSourceParser::Client"*, %"class.blink::EventSourceParser::Client"** %82, align 8
  %84 = getelementptr inbounds %"class.blink::EventSourceParser", %"class.blink::EventSourceParser"* %0, i64 0, i32 1
  %85 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %84, i64 0, i32 0, i32 0, i32 0
  %86 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %85, align 8
  %87 = icmp eq %"class.WTF::StringImpl"* %86, null
  br i1 %87, label %92, label %88

88:                                               ; preds = %69
  %89 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %86, i64 0, i32 1
  %90 = load i32, i32* %89, align 4
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %92, label %94

92:                                               ; preds = %69, %88
  %93 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN5blink16event_type_names8kMessageE, align 8
  br label %94

94:                                               ; preds = %88, %92
  %95 = phi %"class.WTF::AtomicString"* [ %93, %92 ], [ %84, %88 ]
  %96 = bitcast %"class.blink::EventSourceParser::Client"* %83 to void (%"class.blink::EventSourceParser::Client"*, %"class.WTF::AtomicString"*, %"class.WTF::String"*, %"class.WTF::AtomicString"*)***
  %97 = load void (%"class.blink::EventSourceParser::Client"*, %"class.WTF::AtomicString"*, %"class.WTF::String"*, %"class.WTF::AtomicString"*)**, void (%"class.blink::EventSourceParser::Client"*, %"class.WTF::AtomicString"*, %"class.WTF::String"*, %"class.WTF::AtomicString"*)*** %96, align 8
  %98 = getelementptr inbounds void (%"class.blink::EventSourceParser::Client"*, %"class.WTF::AtomicString"*, %"class.WTF::String"*, %"class.WTF::AtomicString"*)*, void (%"class.blink::EventSourceParser::Client"*, %"class.WTF::AtomicString"*, %"class.WTF::String"*, %"class.WTF::AtomicString"*)** %97, i64 3
  %99 = load void (%"class.blink::EventSourceParser::Client"*, %"class.WTF::AtomicString"*, %"class.WTF::String"*, %"class.WTF::AtomicString"*)*, void (%"class.blink::EventSourceParser::Client"*, %"class.WTF::AtomicString"*, %"class.WTF::String"*, %"class.WTF::AtomicString"*)** %98, align 8
  call void %99(%"class.blink::EventSourceParser::Client"* %83, %"class.WTF::AtomicString"* dereferenceable(8) %95, %"class.WTF::String"* nonnull dereferenceable(8) %15, %"class.WTF::AtomicString"* dereferenceable(8) %24) #9
  %100 = getelementptr inbounds %"class.blink::EventSourceParser", %"class.blink::EventSourceParser"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %101 = load i32, i32* %100, align 8
  %102 = icmp eq i32 %101, 0
  br i1 %102, label %110, label %103

103:                                              ; preds = %94
  %104 = load i32, i32* %66, align 4
  %105 = icmp eq i32 %104, 0
  br i1 %105, label %107, label %106

106:                                              ; preds = %103
  store i32 0, i32* %66, align 4
  br label %107

107:                                              ; preds = %106, %103
  %108 = load i8*, i8** %72, align 8
  %109 = bitcast %"class.WTF::Vector"* %65 to i64*
  store atomic i64 0, i64* %109 monotonic, align 8
  store i32 0, i32* %100, align 8
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %108) #9
  br label %110

110:                                              ; preds = %94, %107
  %111 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %71, align 8
  %112 = icmp eq %"class.WTF::StringImpl"* %111, null
  br i1 %112, label %126, label %113

113:                                              ; preds = %110
  %114 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %111, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %115 = load atomic i32, i32* %114 monotonic, align 4
  %116 = and i32 %115, 2
  %117 = icmp eq i32 %116, 0
  %118 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %111, i64 0, i32 0
  %119 = load i32, i32* %118, align 4
  br i1 %117, label %120, label %122

120:                                              ; preds = %113
  %121 = add i32 %119, -1
  store i32 %121, i32* %118, align 4
  br label %122

122:                                              ; preds = %120, %113
  %123 = phi i32 [ %121, %120 ], [ %119, %113 ]
  %124 = icmp eq i32 %123, 0
  br i1 %124, label %125, label %126

125:                                              ; preds = %122
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %111) #9
  br label %126

126:                                              ; preds = %110, %122, %125
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %70) #9
  br label %127

127:                                              ; preds = %126, %64
  %128 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_null_atomE, align 8
  %129 = getelementptr inbounds %"class.blink::EventSourceParser", %"class.blink::EventSourceParser"* %0, i64 0, i32 1
  %130 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %128, i64 0, i32 0, i32 0, i32 0
  %131 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %130, align 8
  %132 = icmp eq %"class.WTF::StringImpl"* %131, null
  br i1 %132, label %150, label %133

133:                                              ; preds = %127
  %134 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %131, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %135 = load atomic i32, i32* %134 monotonic, align 4
  %136 = and i32 %135, 2
  %137 = icmp eq i32 %136, 0
  br i1 %137, label %138, label %150

138:                                              ; preds = %133
  %139 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %131, i64 0, i32 0
  %140 = load i32, i32* %139, align 4
  %141 = zext i32 %140 to i33
  %142 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %141, i33 1) #9
  %143 = extractvalue { i33, i1 } %142, 1
  %144 = extractvalue { i33, i1 } %142, 0
  %145 = icmp slt i33 %144, 0
  %146 = or i1 %143, %145
  br i1 %146, label %147, label %148, !prof !2

147:                                              ; preds = %138
  call void @llvm.trap() #9
  unreachable

148:                                              ; preds = %138
  %149 = trunc i33 %144 to i32
  store i32 %149, i32* %139, align 4
  br label %150

150:                                              ; preds = %148, %133, %127
  %151 = ptrtoint %"class.WTF::StringImpl"* %131 to i64
  %152 = bitcast %"class.WTF::AtomicString"* %129 to i64*
  %153 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %129, i64 0, i32 0, i32 0, i32 0
  %154 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %153, align 8
  store i64 %151, i64* %152, align 8
  %155 = icmp eq %"class.WTF::StringImpl"* %154, null
  br i1 %155, label %543, label %156

156:                                              ; preds = %150
  %157 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %154, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %158 = load atomic i32, i32* %157 monotonic, align 4
  %159 = and i32 %158, 2
  %160 = icmp eq i32 %159, 0
  %161 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %154, i64 0, i32 0
  %162 = load i32, i32* %161, align 4
  br i1 %160, label %163, label %165

163:                                              ; preds = %156
  %164 = add i32 %162, -1
  store i32 %164, i32* %161, align 4
  br label %165

165:                                              ; preds = %163, %156
  %166 = phi i32 [ %164, %163 ], [ %162, %156 ]
  %167 = icmp eq i32 %166, 0
  br i1 %167, label %168, label %543

168:                                              ; preds = %165
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %154) #9
  br label %543

169:                                              ; preds = %1
  %170 = getelementptr inbounds %"class.blink::EventSourceParser", %"class.blink::EventSourceParser"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %171 = load i8*, i8** %170, align 8
  %172 = zext i32 %21 to i64
  %173 = getelementptr inbounds i8, i8* %171, i64 %172
  br label %174

174:                                              ; preds = %178, %169
  %175 = phi i8* [ %171, %169 ], [ %179, %178 ]
  %176 = load i8, i8* %175, align 1
  %177 = icmp eq i8 %176, 58
  br i1 %177, label %181, label %178

178:                                              ; preds = %174
  %179 = getelementptr inbounds i8, i8* %175, i64 1
  %180 = icmp ult i8* %179, %173
  br i1 %180, label %174, label %198

181:                                              ; preds = %174
  %182 = ptrtoint i8* %175 to i64
  %183 = ptrtoint i8* %171 to i64
  %184 = sub i64 %182, %183
  %185 = trunc i64 %184 to i32
  %186 = icmp eq i32 %185, -1
  br i1 %186, label %198, label %187

187:                                              ; preds = %181
  %188 = add nuw i32 %185, 1
  %189 = icmp ult i32 %188, %21
  br i1 %189, label %190, label %198

190:                                              ; preds = %187
  %191 = tail call dereferenceable(1) i8* @_ZN3WTF6VectorIcLj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %19, i32 %188) #9
  %192 = load i8, i8* %191, align 1
  %193 = icmp eq i8 %192, 32
  %194 = add nuw i32 %185, 2
  %195 = select i1 %193, i32 %194, i32 %188
  %196 = load i32, i32* %20, align 4
  %197 = load i8*, i8** %170, align 8
  br label %198

198:                                              ; preds = %178, %181, %190, %187
  %199 = phi i8* [ %171, %187 ], [ %197, %190 ], [ %171, %181 ], [ %171, %178 ]
  %200 = phi i32 [ %21, %187 ], [ %196, %190 ], [ %21, %181 ], [ %21, %178 ]
  %201 = phi i32 [ %185, %187 ], [ %185, %190 ], [ %21, %181 ], [ %21, %178 ]
  %202 = phi i32 [ %188, %187 ], [ %195, %190 ], [ %21, %181 ], [ %21, %178 ]
  %203 = sub i32 %200, %202
  %204 = getelementptr inbounds %"class.blink::EventSourceParser", %"class.blink::EventSourceParser"* %0, i64 0, i32 6, i32 0, i32 0, i32 0
  %205 = load %"class.WTF::TextCodec"*, %"class.WTF::TextCodec"** %204, align 8
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %10) #9
  store i8 -86, i8* %10, align 1
  %206 = bitcast %"class.WTF::TextCodec"* %205 to %"class.WTF::StringImpl"* (%"class.WTF::TextCodec"*, i8*, i32, i32, i1, i8*)***
  %207 = load %"class.WTF::StringImpl"* (%"class.WTF::TextCodec"*, i8*, i32, i32, i1, i8*)**, %"class.WTF::StringImpl"* (%"class.WTF::TextCodec"*, i8*, i32, i32, i1, i8*)*** %206, align 8
  %208 = getelementptr inbounds %"class.WTF::StringImpl"* (%"class.WTF::TextCodec"*, i8*, i32, i32, i1, i8*)*, %"class.WTF::StringImpl"* (%"class.WTF::TextCodec"*, i8*, i32, i32, i1, i8*)** %207, i64 2
  %209 = load %"class.WTF::StringImpl"* (%"class.WTF::TextCodec"*, i8*, i32, i32, i1, i8*)*, %"class.WTF::StringImpl"* (%"class.WTF::TextCodec"*, i8*, i32, i32, i1, i8*)** %208, align 8
  %210 = call %"class.WTF::StringImpl"* %209(%"class.WTF::TextCodec"* %205, i8* %199, i32 %201, i32 2, i1 zeroext false, i8* nonnull dereferenceable(1) %10) #9
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %10) #9
  %211 = bitcast %"class.WTF::StringView"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %211) #9
  %212 = icmp eq %"class.WTF::StringImpl"* %210, null
  br i1 %212, label %213, label %217

213:                                              ; preds = %198
  %214 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %8, i64 0, i32 1
  store i8* null, i8** %214, align 8
  %215 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %216 = bitcast %"class.WTF::StringView"* %8 to i64*
  store i64 %215, i64* %216, align 8
  br label %225

217:                                              ; preds = %198
  %218 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %8, i64 0, i32 0
  store %"class.WTF::StringImpl"* %210, %"class.WTF::StringImpl"** %218, align 8
  %219 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %210, i64 0, i32 1
  %220 = load i32, i32* %219, align 4
  %221 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %210, i64 1
  %222 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %8, i64 0, i32 1
  %223 = bitcast i8** %222 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %221, %"class.WTF::StringImpl"** %223, align 8
  %224 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %225

225:                                              ; preds = %217, %213
  %226 = phi i64 [ %224, %217 ], [ %215, %213 ]
  %227 = phi i32 [ %220, %217 ], [ 0, %213 ]
  %228 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %8, i64 0, i32 2
  store i32 %227, i32* %228, align 8
  %229 = bitcast %"class.WTF::StringView"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %229) #9
  %230 = bitcast %"class.WTF::StringView"* %9 to i64*
  store i64 %226, i64* %230, align 8
  %231 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %9, i64 0, i32 1
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0), i8** %231, align 8
  %232 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %9, i64 0, i32 2
  store i32 5, i32* %232, align 8
  %233 = call zeroext i1 @_ZN3WTF15EqualStringViewERKNS_10StringViewES2_(%"class.WTF::StringView"* nonnull dereferenceable(24) %8, %"class.WTF::StringView"* nonnull dereferenceable(24) %9) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %229) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %211) #9
  br i1 %233, label %234, label %303

234:                                              ; preds = %225
  %235 = load i8*, i8** %170, align 8
  %236 = zext i32 %202 to i64
  %237 = getelementptr inbounds i8, i8* %235, i64 %236
  %238 = load %"class.WTF::TextCodec"*, %"class.WTF::TextCodec"** %204, align 8
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %7) #9
  store i8 -86, i8* %7, align 1
  %239 = bitcast %"class.WTF::TextCodec"* %238 to %"class.WTF::StringImpl"* (%"class.WTF::TextCodec"*, i8*, i32, i32, i1, i8*)***
  %240 = load %"class.WTF::StringImpl"* (%"class.WTF::TextCodec"*, i8*, i32, i32, i1, i8*)**, %"class.WTF::StringImpl"* (%"class.WTF::TextCodec"*, i8*, i32, i32, i1, i8*)*** %239, align 8
  %241 = getelementptr inbounds %"class.WTF::StringImpl"* (%"class.WTF::TextCodec"*, i8*, i32, i32, i1, i8*)*, %"class.WTF::StringImpl"* (%"class.WTF::TextCodec"*, i8*, i32, i32, i1, i8*)** %240, i64 2
  %242 = load %"class.WTF::StringImpl"* (%"class.WTF::TextCodec"*, i8*, i32, i32, i1, i8*)*, %"class.WTF::StringImpl"* (%"class.WTF::TextCodec"*, i8*, i32, i32, i1, i8*)** %241, align 8
  %243 = call %"class.WTF::StringImpl"* %242(%"class.WTF::TextCodec"* %238, i8* %237, i32 %203, i32 2, i1 zeroext false, i8* nonnull dereferenceable(1) %7) #9
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %7) #9
  %244 = icmp eq %"class.WTF::StringImpl"* %243, null
  br i1 %244, label %268, label %245

245:                                              ; preds = %234
  %246 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %243, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %247 = load atomic i32, i32* %246 acquire, align 4
  %248 = and i32 %247, 4
  %249 = icmp eq i32 %248, 0
  br i1 %249, label %266, label %250

250:                                              ; preds = %245
  %251 = load atomic i32, i32* %246 monotonic, align 4
  %252 = and i32 %251, 2
  %253 = icmp eq i32 %252, 0
  br i1 %253, label %254, label %268

254:                                              ; preds = %250
  %255 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %243, i64 0, i32 0
  %256 = load i32, i32* %255, align 4
  %257 = zext i32 %256 to i33
  %258 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %257, i33 1) #9
  %259 = extractvalue { i33, i1 } %258, 1
  %260 = extractvalue { i33, i1 } %258, 0
  %261 = icmp slt i33 %260, 0
  %262 = or i1 %259, %261
  br i1 %262, label %263, label %264, !prof !2

263:                                              ; preds = %254
  call void @llvm.trap() #9
  unreachable

264:                                              ; preds = %254
  %265 = trunc i33 %260 to i32
  store i32 %265, i32* %255, align 4
  br label %268

266:                                              ; preds = %245
  %267 = call %"class.WTF::StringImpl"* @_ZN3WTF12AtomicString11AddSlowCaseEPNS_10StringImplE(%"class.WTF::StringImpl"* nonnull %243) #9
  br label %268

268:                                              ; preds = %234, %250, %264, %266
  %269 = phi %"class.WTF::StringImpl"* [ %267, %266 ], [ %243, %250 ], [ %243, %264 ], [ null, %234 ]
  %270 = ptrtoint %"class.WTF::StringImpl"* %269 to i64
  %271 = getelementptr inbounds %"class.blink::EventSourceParser", %"class.blink::EventSourceParser"* %0, i64 0, i32 1
  %272 = bitcast %"class.WTF::AtomicString"* %271 to i64*
  %273 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %271, i64 0, i32 0, i32 0, i32 0
  %274 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %273, align 8
  store i64 %270, i64* %272, align 8
  %275 = icmp eq %"class.WTF::StringImpl"* %274, null
  br i1 %275, label %289, label %276

276:                                              ; preds = %268
  %277 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %274, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %278 = load atomic i32, i32* %277 monotonic, align 4
  %279 = and i32 %278, 2
  %280 = icmp eq i32 %279, 0
  %281 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %274, i64 0, i32 0
  %282 = load i32, i32* %281, align 4
  br i1 %280, label %283, label %285

283:                                              ; preds = %276
  %284 = add i32 %282, -1
  store i32 %284, i32* %281, align 4
  br label %285

285:                                              ; preds = %283, %276
  %286 = phi i32 [ %284, %283 ], [ %282, %276 ]
  %287 = icmp eq i32 %286, 0
  br i1 %287, label %288, label %289

288:                                              ; preds = %285
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %274) #9
  br label %289

289:                                              ; preds = %288, %285, %268
  br i1 %244, label %529, label %290

290:                                              ; preds = %289
  %291 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %243, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %292 = load atomic i32, i32* %291 monotonic, align 4
  %293 = and i32 %292, 2
  %294 = icmp eq i32 %293, 0
  %295 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %243, i64 0, i32 0
  %296 = load i32, i32* %295, align 4
  br i1 %294, label %297, label %299

297:                                              ; preds = %290
  %298 = add i32 %296, -1
  store i32 %298, i32* %295, align 4
  br label %299

299:                                              ; preds = %297, %290
  %300 = phi i32 [ %298, %297 ], [ %296, %290 ]
  %301 = icmp eq i32 %300, 0
  br i1 %301, label %302, label %529

302:                                              ; preds = %299
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %243) #9
  br label %529

303:                                              ; preds = %225
  %304 = bitcast %"class.WTF::StringView"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %304) #9
  br i1 %212, label %305, label %309

305:                                              ; preds = %303
  %306 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %5, i64 0, i32 1
  store i8* null, i8** %306, align 8
  %307 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %308 = bitcast %"class.WTF::StringView"* %5 to i64*
  store i64 %307, i64* %308, align 8
  br label %317

309:                                              ; preds = %303
  %310 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %5, i64 0, i32 0
  store %"class.WTF::StringImpl"* %210, %"class.WTF::StringImpl"** %310, align 8
  %311 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %210, i64 0, i32 1
  %312 = load i32, i32* %311, align 4
  %313 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %210, i64 1
  %314 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %5, i64 0, i32 1
  %315 = bitcast i8** %314 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %313, %"class.WTF::StringImpl"** %315, align 8
  %316 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %317

317:                                              ; preds = %309, %305
  %318 = phi i64 [ %316, %309 ], [ %307, %305 ]
  %319 = phi i32 [ %312, %309 ], [ 0, %305 ]
  %320 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %5, i64 0, i32 2
  store i32 %319, i32* %320, align 8
  %321 = bitcast %"class.WTF::StringView"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %321) #9
  %322 = bitcast %"class.WTF::StringView"* %6 to i64*
  store i64 %318, i64* %322, align 8
  %323 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %6, i64 0, i32 1
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i8** %323, align 8
  %324 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %6, i64 0, i32 2
  store i32 4, i32* %324, align 8
  %325 = call zeroext i1 @_ZN3WTF15EqualStringViewERKNS_10StringViewES2_(%"class.WTF::StringView"* nonnull dereferenceable(24) %5, %"class.WTF::StringView"* nonnull dereferenceable(24) %6) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %321) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %304) #9
  br i1 %325, label %326, label %345

326:                                              ; preds = %317
  %327 = getelementptr inbounds %"class.blink::EventSourceParser", %"class.blink::EventSourceParser"* %0, i64 0, i32 2
  %328 = load i8*, i8** %170, align 8
  %329 = zext i32 %202 to i64
  %330 = getelementptr inbounds i8, i8* %328, i64 %329
  call void @_ZN3WTF6VectorIcLj0ENS_18PartitionAllocatorEE6AppendIcEEvPKT_j(%"class.WTF::Vector"* %327, i8* %330, i32 %203)
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %16) #9
  store i8 10, i8* %16, align 1
  %331 = getelementptr inbounds %"class.blink::EventSourceParser", %"class.blink::EventSourceParser"* %0, i64 0, i32 2, i32 0, i32 0, i32 2
  %332 = load i32, i32* %331, align 4
  %333 = getelementptr inbounds %"class.blink::EventSourceParser", %"class.blink::EventSourceParser"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %334 = load i32, i32* %333, align 8
  %335 = icmp eq i32 %332, %334
  br i1 %335, label %343, label %336, !prof !2

336:                                              ; preds = %326
  %337 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %327, i64 0, i32 0, i32 0, i32 0
  %338 = load i8*, i8** %337, align 8
  %339 = zext i32 %332 to i64
  %340 = getelementptr inbounds i8, i8* %338, i64 %339
  store i8 10, i8* %340, align 1
  %341 = load i32, i32* %331, align 4
  %342 = add i32 %341, 1
  store i32 %342, i32* %331, align 4
  br label %344

343:                                              ; preds = %326
  call void @_ZN3WTF6VectorIcLj0ENS_18PartitionAllocatorEE14AppendSlowCaseIcEEvOT_(%"class.WTF::Vector"* %327, i8* nonnull dereferenceable(1) %16) #9
  br label %344

344:                                              ; preds = %336, %343
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %16) #9
  br label %529

345:                                              ; preds = %317
  %346 = bitcast %"class.WTF::StringView"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %346) #9
  br i1 %212, label %347, label %351

347:                                              ; preds = %345
  %348 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %3, i64 0, i32 1
  store i8* null, i8** %348, align 8
  %349 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %350 = bitcast %"class.WTF::StringView"* %3 to i64*
  store i64 %349, i64* %350, align 8
  br label %359

351:                                              ; preds = %345
  %352 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %3, i64 0, i32 0
  store %"class.WTF::StringImpl"* %210, %"class.WTF::StringImpl"** %352, align 8
  %353 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %210, i64 0, i32 1
  %354 = load i32, i32* %353, align 4
  %355 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %210, i64 1
  %356 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %3, i64 0, i32 1
  %357 = bitcast i8** %356 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %355, %"class.WTF::StringImpl"** %357, align 8
  %358 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %359

359:                                              ; preds = %351, %347
  %360 = phi i64 [ %358, %351 ], [ %349, %347 ]
  %361 = phi i32 [ %354, %351 ], [ 0, %347 ]
  %362 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %3, i64 0, i32 2
  store i32 %361, i32* %362, align 8
  %363 = bitcast %"class.WTF::StringView"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %363) #9
  %364 = bitcast %"class.WTF::StringView"* %4 to i64*
  store i64 %360, i64* %364, align 8
  %365 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %4, i64 0, i32 1
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i8** %365, align 8
  %366 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %4, i64 0, i32 2
  store i32 2, i32* %366, align 8
  %367 = call zeroext i1 @_ZN3WTF15EqualStringViewERKNS_10StringViewES2_(%"class.WTF::StringView"* nonnull dereferenceable(24) %3, %"class.WTF::StringView"* nonnull dereferenceable(24) %4) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %363) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %346) #9
  br i1 %367, label %368, label %441

368:                                              ; preds = %359
  %369 = load i8*, i8** %170, align 8
  %370 = zext i32 %202 to i64
  %371 = getelementptr inbounds i8, i8* %369, i64 %370
  %372 = zext i32 %203 to i64
  %373 = call i8* @memchr(i8* %371, i32 0, i64 %372) #10
  %374 = icmp eq i8* %373, null
  br i1 %374, label %375, label %529

375:                                              ; preds = %368
  %376 = load %"class.WTF::TextCodec"*, %"class.WTF::TextCodec"** %204, align 8
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %2) #9
  store i8 -86, i8* %2, align 1
  %377 = bitcast %"class.WTF::TextCodec"* %376 to %"class.WTF::StringImpl"* (%"class.WTF::TextCodec"*, i8*, i32, i32, i1, i8*)***
  %378 = load %"class.WTF::StringImpl"* (%"class.WTF::TextCodec"*, i8*, i32, i32, i1, i8*)**, %"class.WTF::StringImpl"* (%"class.WTF::TextCodec"*, i8*, i32, i32, i1, i8*)*** %377, align 8
  %379 = getelementptr inbounds %"class.WTF::StringImpl"* (%"class.WTF::TextCodec"*, i8*, i32, i32, i1, i8*)*, %"class.WTF::StringImpl"* (%"class.WTF::TextCodec"*, i8*, i32, i32, i1, i8*)** %378, i64 2
  %380 = load %"class.WTF::StringImpl"* (%"class.WTF::TextCodec"*, i8*, i32, i32, i1, i8*)*, %"class.WTF::StringImpl"* (%"class.WTF::TextCodec"*, i8*, i32, i32, i1, i8*)** %379, align 8
  %381 = call %"class.WTF::StringImpl"* %380(%"class.WTF::TextCodec"* %376, i8* %371, i32 %203, i32 2, i1 zeroext false, i8* nonnull dereferenceable(1) %2) #9
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %2) #9
  %382 = icmp eq %"class.WTF::StringImpl"* %381, null
  br i1 %382, label %406, label %383

383:                                              ; preds = %375
  %384 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %381, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %385 = load atomic i32, i32* %384 acquire, align 4
  %386 = and i32 %385, 4
  %387 = icmp eq i32 %386, 0
  br i1 %387, label %404, label %388

388:                                              ; preds = %383
  %389 = load atomic i32, i32* %384 monotonic, align 4
  %390 = and i32 %389, 2
  %391 = icmp eq i32 %390, 0
  br i1 %391, label %392, label %406

392:                                              ; preds = %388
  %393 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %381, i64 0, i32 0
  %394 = load i32, i32* %393, align 4
  %395 = zext i32 %394 to i33
  %396 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %395, i33 1) #9
  %397 = extractvalue { i33, i1 } %396, 1
  %398 = extractvalue { i33, i1 } %396, 0
  %399 = icmp slt i33 %398, 0
  %400 = or i1 %397, %399
  br i1 %400, label %401, label %402, !prof !2

401:                                              ; preds = %392
  call void @llvm.trap() #9
  unreachable

402:                                              ; preds = %392
  %403 = trunc i33 %398 to i32
  store i32 %403, i32* %393, align 4
  br label %406

404:                                              ; preds = %383
  %405 = call %"class.WTF::StringImpl"* @_ZN3WTF12AtomicString11AddSlowCaseEPNS_10StringImplE(%"class.WTF::StringImpl"* nonnull %381) #9
  br label %406

406:                                              ; preds = %375, %388, %402, %404
  %407 = phi %"class.WTF::StringImpl"* [ %405, %404 ], [ %381, %388 ], [ %381, %402 ], [ null, %375 ]
  %408 = ptrtoint %"class.WTF::StringImpl"* %407 to i64
  %409 = getelementptr inbounds %"class.blink::EventSourceParser", %"class.blink::EventSourceParser"* %0, i64 0, i32 3
  %410 = bitcast %"class.WTF::AtomicString"* %409 to i64*
  %411 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %409, i64 0, i32 0, i32 0, i32 0
  %412 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %411, align 8
  store i64 %408, i64* %410, align 8
  %413 = icmp eq %"class.WTF::StringImpl"* %412, null
  br i1 %413, label %427, label %414

414:                                              ; preds = %406
  %415 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %412, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %416 = load atomic i32, i32* %415 monotonic, align 4
  %417 = and i32 %416, 2
  %418 = icmp eq i32 %417, 0
  %419 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %412, i64 0, i32 0
  %420 = load i32, i32* %419, align 4
  br i1 %418, label %421, label %423

421:                                              ; preds = %414
  %422 = add i32 %420, -1
  store i32 %422, i32* %419, align 4
  br label %423

423:                                              ; preds = %421, %414
  %424 = phi i32 [ %422, %421 ], [ %420, %414 ]
  %425 = icmp eq i32 %424, 0
  br i1 %425, label %426, label %427

426:                                              ; preds = %423
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %412) #9
  br label %427

427:                                              ; preds = %426, %423, %406
  br i1 %382, label %529, label %428

428:                                              ; preds = %427
  %429 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %381, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %430 = load atomic i32, i32* %429 monotonic, align 4
  %431 = and i32 %430, 2
  %432 = icmp eq i32 %431, 0
  %433 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %381, i64 0, i32 0
  %434 = load i32, i32* %433, align 4
  br i1 %432, label %435, label %437

435:                                              ; preds = %428
  %436 = add i32 %434, -1
  store i32 %436, i32* %433, align 4
  br label %437

437:                                              ; preds = %435, %428
  %438 = phi i32 [ %436, %435 ], [ %434, %428 ]
  %439 = icmp eq i32 %438, 0
  br i1 %439, label %440, label %529

440:                                              ; preds = %437
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %381) #9
  br label %529

441:                                              ; preds = %359
  %442 = bitcast %"class.WTF::StringView"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %442) #9
  br i1 %212, label %443, label %447

443:                                              ; preds = %441
  %444 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %11, i64 0, i32 1
  store i8* null, i8** %444, align 8
  %445 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %446 = bitcast %"class.WTF::StringView"* %11 to i64*
  store i64 %445, i64* %446, align 8
  br label %455

447:                                              ; preds = %441
  %448 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %11, i64 0, i32 0
  store %"class.WTF::StringImpl"* %210, %"class.WTF::StringImpl"** %448, align 8
  %449 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %210, i64 0, i32 1
  %450 = load i32, i32* %449, align 4
  %451 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %210, i64 1
  %452 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %11, i64 0, i32 1
  %453 = bitcast i8** %452 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %451, %"class.WTF::StringImpl"** %453, align 8
  %454 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %455

455:                                              ; preds = %447, %443
  %456 = phi i64 [ %454, %447 ], [ %445, %443 ]
  %457 = phi i32 [ %450, %447 ], [ 0, %443 ]
  %458 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %11, i64 0, i32 2
  store i32 %457, i32* %458, align 8
  %459 = bitcast %"class.WTF::StringView"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %459) #9
  %460 = bitcast %"class.WTF::StringView"* %12 to i64*
  store i64 %456, i64* %460, align 8
  %461 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %12, i64 0, i32 1
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i64 0, i64 0), i8** %461, align 8
  %462 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %12, i64 0, i32 2
  store i32 5, i32* %462, align 8
  %463 = call zeroext i1 @_ZN3WTF15EqualStringViewERKNS_10StringViewES2_(%"class.WTF::StringView"* nonnull dereferenceable(24) %11, %"class.WTF::StringView"* nonnull dereferenceable(24) %12) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %459) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %442) #9
  br i1 %463, label %464, label %529

464:                                              ; preds = %455
  %465 = load i32, i32* %20, align 4
  %466 = icmp ult i32 %202, %465
  br i1 %466, label %471, label %467

467:                                              ; preds = %471, %464
  %468 = phi i1 [ true, %464 ], [ %476, %471 ]
  %469 = phi i32 [ %465, %464 ], [ %478, %471 ]
  %470 = icmp eq i32 %202, %469
  br i1 %470, label %481, label %489

471:                                              ; preds = %464, %471
  %472 = phi i32 [ %477, %471 ], [ %202, %464 ]
  %473 = call dereferenceable(1) i8* @_ZN3WTF6VectorIcLj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %19, i32 %472) #9
  %474 = load i8, i8* %473, align 1
  %475 = add i8 %474, -48
  %476 = icmp ult i8 %475, 10
  %477 = add nuw i32 %472, 1
  %478 = load i32, i32* %20, align 4
  %479 = icmp ult i32 %477, %478
  %480 = and i1 %476, %479
  br i1 %480, label %471, label %467

481:                                              ; preds = %467
  %482 = getelementptr inbounds %"class.blink::EventSourceParser", %"class.blink::EventSourceParser"* %0, i64 0, i32 5, i32 0, i32 0
  %483 = load %"class.blink::EventSourceParser::Client"*, %"class.blink::EventSourceParser::Client"** %482, align 8
  %484 = load i64, i64* @_ZN5blink11EventSource22kDefaultReconnectDelayE, align 8
  %485 = bitcast %"class.blink::EventSourceParser::Client"* %483 to void (%"class.blink::EventSourceParser::Client"*, i64)***
  %486 = load void (%"class.blink::EventSourceParser::Client"*, i64)**, void (%"class.blink::EventSourceParser::Client"*, i64)*** %485, align 8
  %487 = getelementptr inbounds void (%"class.blink::EventSourceParser::Client"*, i64)*, void (%"class.blink::EventSourceParser::Client"*, i64)** %486, i64 4
  %488 = load void (%"class.blink::EventSourceParser::Client"*, i64)*, void (%"class.blink::EventSourceParser::Client"*, i64)** %487, align 8
  call void %488(%"class.blink::EventSourceParser::Client"* %483, i64 %484) #9
  br label %529

489:                                              ; preds = %467
  br i1 %468, label %490, label %529

490:                                              ; preds = %489
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %17) #9
  store i8 -86, i8* %17, align 1
  %491 = bitcast %"class.WTF::String"* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %491) #9
  %492 = load i8*, i8** %170, align 8
  %493 = zext i32 %202 to i64
  %494 = getelementptr inbounds i8, i8* %492, i64 %493
  %495 = load %"class.WTF::TextCodec"*, %"class.WTF::TextCodec"** %204, align 8
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %14) #9
  store i8 -86, i8* %14, align 1
  %496 = bitcast %"class.WTF::TextCodec"* %495 to %"class.WTF::StringImpl"* (%"class.WTF::TextCodec"*, i8*, i32, i32, i1, i8*)***
  %497 = load %"class.WTF::StringImpl"* (%"class.WTF::TextCodec"*, i8*, i32, i32, i1, i8*)**, %"class.WTF::StringImpl"* (%"class.WTF::TextCodec"*, i8*, i32, i32, i1, i8*)*** %496, align 8
  %498 = getelementptr inbounds %"class.WTF::StringImpl"* (%"class.WTF::TextCodec"*, i8*, i32, i32, i1, i8*)*, %"class.WTF::StringImpl"* (%"class.WTF::TextCodec"*, i8*, i32, i32, i1, i8*)** %497, i64 2
  %499 = load %"class.WTF::StringImpl"* (%"class.WTF::TextCodec"*, i8*, i32, i32, i1, i8*)*, %"class.WTF::StringImpl"* (%"class.WTF::TextCodec"*, i8*, i32, i32, i1, i8*)** %498, align 8
  %500 = call %"class.WTF::StringImpl"* %499(%"class.WTF::TextCodec"* %495, i8* %494, i32 %203, i32 2, i1 zeroext false, i8* nonnull dereferenceable(1) %14) #9
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %14) #9
  %501 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %18, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %500, %"class.WTF::StringImpl"** %501, align 8
  %502 = call i64 @_ZNK3WTF6String14ToUInt64StrictEPb(%"class.WTF::String"* nonnull %18, i8* nonnull %17) #9
  %503 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %501, align 8
  %504 = icmp eq %"class.WTF::StringImpl"* %503, null
  br i1 %504, label %518, label %505

505:                                              ; preds = %490
  %506 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %503, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %507 = load atomic i32, i32* %506 monotonic, align 4
  %508 = and i32 %507, 2
  %509 = icmp eq i32 %508, 0
  %510 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %503, i64 0, i32 0
  %511 = load i32, i32* %510, align 4
  br i1 %509, label %512, label %514

512:                                              ; preds = %505
  %513 = add i32 %511, -1
  store i32 %513, i32* %510, align 4
  br label %514

514:                                              ; preds = %512, %505
  %515 = phi i32 [ %513, %512 ], [ %511, %505 ]
  %516 = icmp eq i32 %515, 0
  br i1 %516, label %517, label %518

517:                                              ; preds = %514
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %503) #9
  br label %518

518:                                              ; preds = %490, %514, %517
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %491) #9
  %519 = load i8, i8* %17, align 1, !range !3
  %520 = icmp eq i8 %519, 0
  br i1 %520, label %528, label %521

521:                                              ; preds = %518
  %522 = getelementptr inbounds %"class.blink::EventSourceParser", %"class.blink::EventSourceParser"* %0, i64 0, i32 5, i32 0, i32 0
  %523 = load %"class.blink::EventSourceParser::Client"*, %"class.blink::EventSourceParser::Client"** %522, align 8
  %524 = bitcast %"class.blink::EventSourceParser::Client"* %523 to void (%"class.blink::EventSourceParser::Client"*, i64)***
  %525 = load void (%"class.blink::EventSourceParser::Client"*, i64)**, void (%"class.blink::EventSourceParser::Client"*, i64)*** %524, align 8
  %526 = getelementptr inbounds void (%"class.blink::EventSourceParser::Client"*, i64)*, void (%"class.blink::EventSourceParser::Client"*, i64)** %525, i64 4
  %527 = load void (%"class.blink::EventSourceParser::Client"*, i64)*, void (%"class.blink::EventSourceParser::Client"*, i64)** %526, align 8
  call void %527(%"class.blink::EventSourceParser::Client"* %523, i64 %502) #9
  br label %528

528:                                              ; preds = %518, %521
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %17) #9
  br label %529

529:                                              ; preds = %440, %437, %427, %302, %299, %289, %455, %481, %528, %489, %368, %344
  br i1 %212, label %543, label %530

530:                                              ; preds = %529
  %531 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %210, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %532 = load atomic i32, i32* %531 monotonic, align 4
  %533 = and i32 %532, 2
  %534 = icmp eq i32 %533, 0
  %535 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %210, i64 0, i32 0
  %536 = load i32, i32* %535, align 4
  br i1 %534, label %537, label %539

537:                                              ; preds = %530
  %538 = add i32 %536, -1
  store i32 %538, i32* %535, align 4
  br label %539

539:                                              ; preds = %537, %530
  %540 = phi i32 [ %538, %537 ], [ %536, %530 ]
  %541 = icmp eq i32 %540, 0
  br i1 %541, label %542, label %543

542:                                              ; preds = %539
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %210) #9
  br label %543

543:                                              ; preds = %542, %539, %529, %168, %165, %150
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZN5blink17EventSourceParser8FromUTF8EPKcj(%"class.blink::EventSourceParser"* nocapture readonly, i8*, i32) local_unnamed_addr #0 align 2 {
  %4 = alloca i8, align 1
  %5 = getelementptr inbounds %"class.blink::EventSourceParser", %"class.blink::EventSourceParser"* %0, i64 0, i32 6, i32 0, i32 0, i32 0
  %6 = load %"class.WTF::TextCodec"*, %"class.WTF::TextCodec"** %5, align 8
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %4) #9
  store i8 -86, i8* %4, align 1
  %7 = bitcast %"class.WTF::TextCodec"* %6 to %"class.WTF::StringImpl"* (%"class.WTF::TextCodec"*, i8*, i32, i32, i1, i8*)***
  %8 = load %"class.WTF::StringImpl"* (%"class.WTF::TextCodec"*, i8*, i32, i32, i1, i8*)**, %"class.WTF::StringImpl"* (%"class.WTF::TextCodec"*, i8*, i32, i32, i1, i8*)*** %7, align 8
  %9 = getelementptr inbounds %"class.WTF::StringImpl"* (%"class.WTF::TextCodec"*, i8*, i32, i32, i1, i8*)*, %"class.WTF::StringImpl"* (%"class.WTF::TextCodec"*, i8*, i32, i32, i1, i8*)** %8, i64 2
  %10 = load %"class.WTF::StringImpl"* (%"class.WTF::TextCodec"*, i8*, i32, i32, i1, i8*)*, %"class.WTF::StringImpl"* (%"class.WTF::TextCodec"*, i8*, i32, i32, i1, i8*)** %9, align 8
  %11 = call %"class.WTF::StringImpl"* %10(%"class.WTF::TextCodec"* %6, i8* %1, i32 %2, i32 2, i1 zeroext false, i8* nonnull dereferenceable(1) %4) #9
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %4) #9
  ret %"class.WTF::StringImpl"* %11
}

; Function Attrs: nofree nounwind readonly
declare i8* @memchr(i8*, i32, i64) local_unnamed_addr #3

declare i64 @_ZNK3WTF6String14ToUInt64StrictEPb(%"class.WTF::String"*, i8*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink17EventSourceParser5TraceEPNS_7VisitorE(%"class.blink::EventSourceParser"* nocapture readonly, %"class.blink::Visitor"*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::EventSourceParser", %"class.blink::EventSourceParser"* %0, i64 0, i32 5
  %4 = bitcast %"class.blink::Member"* %3 to i64*
  %5 = load atomic i64, i64* %4 monotonic, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %73, label %7

7:                                                ; preds = %2
  %8 = inttoptr i64 %5 to i8*
  %9 = and i64 %5, -131072
  %10 = inttoptr i64 %9 to i8*
  %11 = getelementptr inbounds i8, i8* %10, i64 4138
  %12 = load i8, i8* %11, align 2
  %13 = icmp eq i8 %12, 1
  br i1 %13, label %14, label %16

14:                                               ; preds = %7
  %15 = getelementptr inbounds i8, i8* %10, i64 4160
  br label %54

16:                                               ; preds = %7
  %17 = getelementptr inbounds i8, i8* %10, i64 4096
  %18 = bitcast i8* %17 to %"class.blink::NormalPage"*
  %19 = getelementptr inbounds i8, i8* %10, i64 4400
  %20 = bitcast i8* %19 to i8**
  %21 = bitcast i8* %19 to i64*
  %22 = load i64, i64* %21, align 16
  %23 = sub i64 %5, %22
  %24 = lshr i64 %23, 3
  %25 = lshr i64 %23, 6
  %26 = getelementptr inbounds %"class.blink::NormalPage", %"class.blink::NormalPage"* %18, i64 0, i32 2, i32 0, i32 1, i64 %25
  %27 = load atomic i8, i8* %26 acquire, align 1
  %28 = trunc i64 %24 to i32
  %29 = and i32 %28, 7
  %30 = shl i32 2, %29
  %31 = trunc i32 %30 to i8
  %32 = add i8 %31, -1
  %33 = and i8 %32, %27
  %34 = icmp eq i8 %33, 0
  br i1 %34, label %35, label %41

35:                                               ; preds = %16, %35
  %36 = phi i64 [ %37, %35 ], [ %25, %16 ]
  %37 = add i64 %36, -1
  %38 = getelementptr inbounds %"class.blink::NormalPage", %"class.blink::NormalPage"* %18, i64 0, i32 2, i32 0, i32 1, i64 %37
  %39 = load atomic i8, i8* %38 acquire, align 1
  %40 = icmp eq i8 %39, 0
  br i1 %40, label %35, label %41

41:                                               ; preds = %35, %16
  %42 = phi i64 [ %25, %16 ], [ %37, %35 ]
  %43 = phi i8 [ %33, %16 ], [ %39, %35 ]
  %44 = zext i8 %43 to i32
  %45 = tail call i32 @llvm.ctlz.i32(i32 %44, i1 true) #9, !range !5
  %46 = add nsw i32 %45, -24
  %47 = shl i64 %42, 3
  %48 = or i64 %47, 7
  %49 = sext i32 %46 to i64
  %50 = sub i64 %48, %49
  %51 = shl i64 %50, 3
  %52 = load i8*, i8** %20, align 16
  %53 = getelementptr inbounds i8, i8* %52, i64 %51
  br label %54

54:                                               ; preds = %41, %14
  %55 = phi i8* [ %15, %14 ], [ %53, %41 ]
  %56 = getelementptr inbounds i8, i8* %55, i64 8
  %57 = getelementptr inbounds i8, i8* %55, i64 4
  %58 = bitcast i8* %57 to i16*
  %59 = load atomic i16, i16* %58 acquire, align 2
  %60 = lshr i16 %59, 2
  %61 = load %"class.blink::GCInfoTable"*, %"class.blink::GCInfoTable"** @_ZN5blink11GCInfoTable13global_table_E, align 8
  %62 = getelementptr inbounds %"class.blink::GCInfoTable", %"class.blink::GCInfoTable"* %61, i64 0, i32 0
  %63 = load %"struct.blink::GCInfo"**, %"struct.blink::GCInfo"*** %62, align 8
  %64 = zext i16 %60 to i64
  %65 = getelementptr inbounds %"struct.blink::GCInfo"*, %"struct.blink::GCInfo"** %63, i64 %64
  %66 = load %"struct.blink::GCInfo"*, %"struct.blink::GCInfo"** %65, align 8
  %67 = getelementptr inbounds %"struct.blink::GCInfo", %"struct.blink::GCInfo"* %66, i64 0, i32 0
  %68 = load void (%"class.blink::Visitor"*, i8*)*, void (%"class.blink::Visitor"*, i8*)** %67, align 8
  %69 = bitcast %"class.blink::Visitor"* %1 to void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)***
  %70 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*** %69, align 8
  %71 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %70, i64 5
  %72 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %71, align 8
  tail call void %72(%"class.blink::Visitor"* %1, i8* nonnull %8, i8* %56, void (%"class.blink::Visitor"*, i8*)* %68) #9
  br label %73

73:                                               ; preds = %2, %54
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #4

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #5

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #1

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #1

declare zeroext i1 @_ZN3WTF15EqualStringViewERKNS_10StringViewES2_(%"class.WTF::StringView"* dereferenceable(24), %"class.WTF::StringView"* dereferenceable(24)) local_unnamed_addr #1

declare %"class.WTF::StringImpl"* @_ZN3WTF12AtomicString11AddSlowCaseEPNS_10StringImplE(%"class.WTF::StringImpl"*) local_unnamed_addr #1

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #1

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZN3WTF6VectorIcLj0ENS_18PartitionAllocatorEE14ExpandCapacityEjPc(%"class.WTF::Vector"*, i32, i8*) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = icmp ugt i8* %5, %2
  br i1 %6, label %13, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds i8, i8* %5, i64 %10
  %12 = icmp ugt i8* %11, %2
  br i1 %12, label %47, label %13

13:                                               ; preds = %7, %3
  %14 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  %15 = load i32, i32* %14, align 8
  %16 = lshr i32 %15, 2
  %17 = add i32 %15, 1
  %18 = add i32 %17, %16
  %19 = icmp ugt i32 %18, 4
  %20 = select i1 %19, i32 %18, i32 4
  %21 = icmp ugt i32 %20, %1
  %22 = select i1 %21, i32 %20, i32 %1
  %23 = icmp ult i32 %15, %22
  br i1 %23, label %24, label %84, !prof !4

24:                                               ; preds = %13
  %25 = icmp eq i8* %5, null
  %26 = zext i32 %22 to i64
  %27 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIcEEmm(i64 %26) #9
  %28 = tail call i8* @_ZN3WTF18PartitionAllocator21AllocateVectorBackingIcEEPT_m(i64 %27) #9
  %29 = ptrtoint i8* %28 to i64
  br i1 %25, label %30, label %33

30:                                               ; preds = %24
  %31 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %29, i64* %31 monotonic, align 8
  %32 = trunc i64 %27 to i32
  store i32 %32, i32* %14, align 8
  br label %84

33:                                               ; preds = %24
  %34 = load i8*, i8** %4, align 8
  %35 = icmp ne i8* %28, null
  %36 = icmp ne i8* %34, null
  %37 = and i1 %35, %36
  br i1 %37, label %38, label %43, !prof !4

38:                                               ; preds = %33
  %39 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %40 = load i32, i32* %39, align 4
  %41 = zext i32 %40 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %28, i8* nonnull align 1 %34, i64 %41, i1 false) #9
  %42 = load i8*, i8** %4, align 8
  br label %43

43:                                               ; preds = %38, %33
  %44 = phi i8* [ %34, %33 ], [ %42, %38 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %44) #9
  %45 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %29, i64* %45 monotonic, align 8
  %46 = trunc i64 %27 to i32
  store i32 %46, i32* %14, align 8
  br label %84

47:                                               ; preds = %7
  %48 = ptrtoint i8* %2 to i64
  %49 = ptrtoint i8* %5 to i64
  %50 = sub i64 %48, %49
  %51 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  %52 = load i32, i32* %51, align 8
  %53 = lshr i32 %52, 2
  %54 = add i32 %52, 1
  %55 = add i32 %54, %53
  %56 = icmp ugt i32 %55, 4
  %57 = select i1 %56, i32 %55, i32 4
  %58 = icmp ugt i32 %57, %1
  %59 = select i1 %58, i32 %57, i32 %1
  %60 = icmp ult i32 %52, %59
  br i1 %60, label %61, label %81, !prof !4

61:                                               ; preds = %47
  %62 = icmp eq i8* %5, null
  %63 = zext i32 %59 to i64
  %64 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIcEEmm(i64 %63) #9
  %65 = tail call i8* @_ZN3WTF18PartitionAllocator21AllocateVectorBackingIcEEPT_m(i64 %64) #9
  %66 = ptrtoint i8* %65 to i64
  br i1 %62, label %78, label %67

67:                                               ; preds = %61
  %68 = load i8*, i8** %4, align 8
  %69 = icmp ne i8* %65, null
  %70 = icmp ne i8* %68, null
  %71 = and i1 %69, %70
  br i1 %71, label %72, label %76, !prof !4

72:                                               ; preds = %67
  %73 = load i32, i32* %8, align 4
  %74 = zext i32 %73 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %65, i8* nonnull align 1 %68, i64 %74, i1 false) #9
  %75 = load i8*, i8** %4, align 8
  br label %76

76:                                               ; preds = %72, %67
  %77 = phi i8* [ %68, %67 ], [ %75, %72 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %77) #9
  br label %78

78:                                               ; preds = %61, %76
  %79 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %66, i64* %79 monotonic, align 8
  %80 = trunc i64 %64 to i32
  store i32 %80, i32* %51, align 8
  br label %81

81:                                               ; preds = %78, %47
  %82 = phi i8* [ %5, %47 ], [ %65, %78 ]
  %83 = getelementptr inbounds i8, i8* %82, i64 %50
  br label %84

84:                                               ; preds = %43, %30, %13, %81
  %85 = phi i8* [ %83, %81 ], [ %2, %13 ], [ %2, %30 ], [ %2, %43 ]
  ret i8* %85
}

declare i8* @_ZN3WTF18PartitionAllocator21AllocateVectorBackingIcEEPT_m(i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIcEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #9
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 2145386496
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #9
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 2145386496) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.7, i64 0, i64 0), i8* %11, i8* %12) #9
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.8, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #9
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #9
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #9
  %20 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %0) #9
  ret i64 %20
}

declare i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64) local_unnamed_addr #1

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #1

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(1) i8* @_ZN3WTF6VectorIcLj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #9
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i32 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #9
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.9, i64 0, i64 0), i8* %14, i8* %15) #9
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.5, i64 0, i64 0), i32 1172, %"class.logging::CheckOpResult"* nonnull %4) #9
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #9
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #9
  %23 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load i8*, i8** %23, align 8
  %25 = zext i32 %1 to i64
  %26 = getelementptr inbounds i8, i8* %24, i64 %25
  ret i8* %26
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIcLj0ENS_18PartitionAllocatorEE14AppendSlowCaseIcEEvOT_(%"class.WTF::Vector"*, i8* dereferenceable(1)) local_unnamed_addr #7 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  %6 = tail call i8* @_ZN3WTF6VectorIcLj0ENS_18PartitionAllocatorEE14ExpandCapacityEjPc(%"class.WTF::Vector"* %0, i32 %5, i8* %1)
  %7 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = load i32, i32* %3, align 4
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds i8, i8* %8, i64 %10
  %12 = load i8, i8* %6, align 1
  store i8 %12, i8* %11, align 1
  %13 = load i32, i32* %3, align 4
  %14 = add i32 %13, 1
  store i32 %14, i32* %3, align 4
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #4

; Function Attrs: nofree nounwind readonly
declare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #8

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { cold noreturn nounwind }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree nounwind readonly }
attributes #9 = { nounwind }
attributes #10 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{i8 0, i8 2}
!4 = !{!"branch_weights", i32 2000, i32 1}
!5 = !{i32 24, i32 33}
