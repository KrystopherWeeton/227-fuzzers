; ModuleID = '../../net/third_party/quiche/src/spdy/core/hpack/hpack_static_table.cc'
source_filename = "../../net/third_party/quiche/src/spdy/core/hpack/hpack_static_table.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.spdy::HpackStaticTable" = type { %"class.std::__1::vector", %"class.absl::flat_hash_map", %"class.absl::flat_hash_map.13" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"*, %"class.std::__1::__compressed_pair.1" }
%"class.spdy::HpackEntry" = type { %"class.std::__1::basic_string", %"class.std::__1::basic_string" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"class.spdy::HpackEntry"* }
%"class.absl::flat_hash_map" = type { %"class.absl::container_internal::raw_hash_map" }
%"class.absl::container_internal::raw_hash_map" = type { %"class.absl::container_internal::raw_hash_set" }
%"class.absl::container_internal::raw_hash_set" = type { i8*, %"union.absl::container_internal::map_slot_type"*, i64, i64, %"class.absl::container_internal::CompressedTuple" }
%"union.absl::container_internal::map_slot_type" = type { %"struct.std::__1::pair" }
%"struct.std::__1::pair" = type { %"struct.spdy::HpackLookupEntry", i64 }
%"struct.spdy::HpackLookupEntry" = type { %"class.absl::string_view", %"class.absl::string_view" }
%"class.absl::string_view" = type { i8*, i64 }
%"class.absl::container_internal::CompressedTuple" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"struct.absl::container_internal::internal_compressed_tuple::Storage" = type { i64 }
%"class.absl::flat_hash_map.13" = type { %"class.absl::container_internal::raw_hash_map.14" }
%"class.absl::container_internal::raw_hash_map.14" = type { %"class.absl::container_internal::raw_hash_set.15" }
%"class.absl::container_internal::raw_hash_set.15" = type { i8*, %"union.absl::container_internal::map_slot_type.16"*, i64, i64, %"class.absl::container_internal::CompressedTuple.19" }
%"union.absl::container_internal::map_slot_type.16" = type { %"struct.std::__1::pair.17" }
%"struct.std::__1::pair.17" = type { %"class.absl::string_view", i64 }
%"class.absl::container_internal::CompressedTuple.19" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.20" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.20" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"struct.spdy::HpackStaticEntry" = type { i8*, i64, i8*, i64 }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"struct.std::__1::pair.28" = type <{ %"struct.spdy::HpackLookupEntry", i32, [4 x i8] }>
%"struct.std::__1::pair.30" = type <{ %"class.absl::string_view", i32, [4 x i8] }>
%"class.std::__1::__basic_string_common" = type { i8 }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZNSt3__16vectorIN4spdy10HpackEntryENS_9allocatorIS2_EEE7reserveEm = comdat any

$_ZNSt3__16vectorIN4spdy10HpackEntryENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_ = comdat any

$_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS4_EENSt3__18equal_toIS4_EENS9_9allocatorINS9_4pairIKS4_mEEEEE22find_or_prepare_insertIS4_EENSD_ImbEERKT_ = comdat any

$_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS4_EENSt3__18equal_toIS4_EENS9_9allocatorINS9_4pairIKS4_mEEEEE14prepare_insertEm = comdat any

$_ZN4absl13hash_internal15MixingHashState18combine_contiguousES1_PKhm = comdat any

$_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS4_EENSt3__18equal_toIS4_EENS9_9allocatorINS9_4pairIKS4_mEEEEE6resizeEm = comdat any

$_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS4_EENSt3__18equal_toIS4_EENS9_9allocatorINS9_4pairIKS4_mEEEEE27drop_deletes_without_resizeEv = comdat any

$_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS8_4pairIKS3_mEEEEE22find_or_prepare_insertIS3_EENSA_ImbEERKT_ = comdat any

$_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS8_4pairIKS3_mEEEEE14prepare_insertEm = comdat any

$_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS8_4pairIKS3_mEEEEE6resizeEm = comdat any

$_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS8_4pairIKS3_mEEEEE27drop_deletes_without_resizeEv = comdat any

$_ZZN4absl18container_internal10EmptyGroupEvE11empty_group = comdat any

@.str = private unnamed_addr constant [71 x i8] c"../../net/third_party/quiche/src/spdy/core/hpack/hpack_static_table.cc\00", align 1
@.str.1 = private unnamed_addr constant [17 x i8] c"!IsInitialized()\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"result.second\00", align 1
@_ZZN4absl18container_internal10EmptyGroupEvE11empty_group = linkonce_odr hidden constant [16 x i8] c"\FF\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80", comdat, align 16
@_ZN4absl13hash_internal15MixingHashState5kSeedE = external local_unnamed_addr constant i8*, align 8

@_ZN4spdy16HpackStaticTableC1Ev = hidden unnamed_addr alias void (%"class.spdy::HpackStaticTable"*), void (%"class.spdy::HpackStaticTable"*)* @_ZN4spdy16HpackStaticTableC2Ev
@_ZN4spdy16HpackStaticTableD1Ev = hidden unnamed_addr alias void (%"class.spdy::HpackStaticTable"*), void (%"class.spdy::HpackStaticTable"*)* @_ZN4spdy16HpackStaticTableD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4spdy16HpackStaticTableC2Ev(%"class.spdy::HpackStaticTable"* nocapture) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.spdy::HpackStaticTable"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 24, i1 false) #14
  %3 = getelementptr inbounds %"class.spdy::HpackStaticTable", %"class.spdy::HpackStaticTable"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @_ZZN4absl18container_internal10EmptyGroupEvE11empty_group, i64 0, i64 0), i8** %3, align 8
  %4 = getelementptr inbounds %"class.spdy::HpackStaticTable", %"class.spdy::HpackStaticTable"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  %5 = bitcast %"union.absl::container_internal::map_slot_type"** %4 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 32, i1 false) #14
  %6 = getelementptr inbounds %"class.spdy::HpackStaticTable", %"class.spdy::HpackStaticTable"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @_ZZN4absl18container_internal10EmptyGroupEvE11empty_group, i64 0, i64 0), i8** %6, align 8
  %7 = getelementptr inbounds %"class.spdy::HpackStaticTable", %"class.spdy::HpackStaticTable"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %8 = bitcast %"union.absl::container_internal::map_slot_type.16"** %7 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 32, i1 false) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4spdy16HpackStaticTableD2Ev(%"class.spdy::HpackStaticTable"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.spdy::HpackStaticTable", %"class.spdy::HpackStaticTable"* %0, i64 0, i32 2, i32 0, i32 0, i32 3
  %3 = load i64, i64* %2, align 8
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %10, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.spdy::HpackStaticTable", %"class.spdy::HpackStaticTable"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %7 = getelementptr inbounds %"class.spdy::HpackStaticTable", %"class.spdy::HpackStaticTable"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %8 = load i8*, i8** %7, align 8
  tail call void @_ZdlPv(i8* %8) #17
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @_ZZN4absl18container_internal10EmptyGroupEvE11empty_group, i64 0, i64 0), i8** %7, align 8
  %9 = bitcast %"union.absl::container_internal::map_slot_type.16"** %6 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 32, i1 false) #14
  br label %10

10:                                               ; preds = %1, %5
  %11 = getelementptr inbounds %"class.spdy::HpackStaticTable", %"class.spdy::HpackStaticTable"* %0, i64 0, i32 1, i32 0, i32 0, i32 3
  %12 = load i64, i64* %11, align 8
  %13 = icmp eq i64 %12, 0
  br i1 %13, label %19, label %14

14:                                               ; preds = %10
  %15 = getelementptr inbounds %"class.spdy::HpackStaticTable", %"class.spdy::HpackStaticTable"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  %16 = getelementptr inbounds %"class.spdy::HpackStaticTable", %"class.spdy::HpackStaticTable"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %17 = load i8*, i8** %16, align 8
  tail call void @_ZdlPv(i8* %17) #17
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @_ZZN4absl18container_internal10EmptyGroupEvE11empty_group, i64 0, i64 0), i8** %16, align 8
  %18 = bitcast %"union.absl::container_internal::map_slot_type"** %15 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %18, i8 0, i64 32, i1 false) #14
  br label %19

19:                                               ; preds = %10, %14
  %20 = getelementptr inbounds %"class.spdy::HpackStaticTable", %"class.spdy::HpackStaticTable"* %0, i64 0, i32 0, i32 0, i32 0
  %21 = load %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %20, align 8
  %22 = icmp eq %"class.spdy::HpackEntry"* %21, null
  br i1 %22, label %54, label %23

23:                                               ; preds = %19
  %24 = bitcast %"class.spdy::HpackEntry"* %21 to i8*
  %25 = getelementptr inbounds %"class.spdy::HpackStaticTable", %"class.spdy::HpackStaticTable"* %0, i64 0, i32 0, i32 0, i32 1
  %26 = load %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %25, align 8
  %27 = icmp eq %"class.spdy::HpackEntry"* %26, %21
  br i1 %27, label %52, label %28

28:                                               ; preds = %23, %47
  %29 = phi %"class.spdy::HpackEntry"* [ %30, %47 ], [ %26, %23 ]
  %30 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %29, i64 -1
  %31 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %29, i64 -1, i32 1
  %32 = bitcast %"class.std::__1::basic_string"* %31 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %33 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %32, i64 0, i32 1, i32 0
  %34 = load i8, i8* %33, align 1
  %35 = icmp slt i8 %34, 0
  br i1 %35, label %36, label %39

36:                                               ; preds = %28
  %37 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %31, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %38 = load i8*, i8** %37, align 8
  tail call void @_ZdlPv(i8* %38) #17
  br label %39

39:                                               ; preds = %36, %28
  %40 = bitcast %"class.spdy::HpackEntry"* %30 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %41 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %40, i64 0, i32 1, i32 0
  %42 = load i8, i8* %41, align 1
  %43 = icmp slt i8 %42, 0
  br i1 %43, label %44, label %47

44:                                               ; preds = %39
  %45 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %30, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %46 = load i8*, i8** %45, align 8
  tail call void @_ZdlPv(i8* %46) #17
  br label %47

47:                                               ; preds = %44, %39
  %48 = icmp eq %"class.spdy::HpackEntry"* %30, %21
  br i1 %48, label %49, label %28

49:                                               ; preds = %47
  %50 = bitcast %"class.spdy::HpackStaticTable"* %0 to i8**
  %51 = load i8*, i8** %50, align 8
  br label %52

52:                                               ; preds = %49, %23
  %53 = phi i8* [ %51, %49 ], [ %24, %23 ]
  store %"class.spdy::HpackEntry"* %21, %"class.spdy::HpackEntry"** %25, align 8
  tail call void @_ZdlPv(i8* %53) #17
  br label %54

54:                                               ; preds = %19, %52
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4spdy16HpackStaticTable10InitializeEPKNS_16HpackStaticEntryEm(%"class.spdy::HpackStaticTable"*, %"struct.spdy::HpackStaticEntry"* readonly, i64) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = alloca %"class.std::__1::basic_string", align 8
  %6 = alloca %"class.std::__1::basic_string", align 8
  %7 = alloca %"class.spdy::HpackEntry", align 8
  %8 = alloca %"class.std::__1::basic_string", align 8
  %9 = alloca %"class.std::__1::basic_string", align 8
  %10 = alloca %"struct.std::__1::pair.28", align 8
  %11 = alloca %"class.logging::CheckError", align 8
  %12 = alloca %"struct.std::__1::pair.30", align 8
  %13 = getelementptr inbounds %"class.spdy::HpackStaticTable", %"class.spdy::HpackStaticTable"* %0, i64 0, i32 0, i32 0, i32 0
  %14 = load %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %13, align 8
  %15 = getelementptr inbounds %"class.spdy::HpackStaticTable", %"class.spdy::HpackStaticTable"* %0, i64 0, i32 0, i32 0, i32 1
  %16 = load %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %15, align 8
  %17 = icmp eq %"class.spdy::HpackEntry"* %14, %16
  br i1 %17, label %21, label %18

18:                                               ; preds = %3
  %19 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %19) #14
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str, i64 0, i64 0), i32 21, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0)) #14
  %20 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19) #14
  br label %21

21:                                               ; preds = %3, %18
  %22 = getelementptr inbounds %"class.spdy::HpackStaticTable", %"class.spdy::HpackStaticTable"* %0, i64 0, i32 0
  call void @_ZNSt3__16vectorIN4spdy10HpackEntryENS_9allocatorIS2_EEE7reserveEm(%"class.std::__1::vector"* %22, i64 %2)
  %23 = getelementptr inbounds %"struct.spdy::HpackStaticEntry", %"struct.spdy::HpackStaticEntry"* %1, i64 %2
  %24 = icmp eq i64 %2, 0
  br i1 %24, label %59, label %25

25:                                               ; preds = %21
  %26 = bitcast %"class.std::__1::basic_string"* %5 to i8*
  %27 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %28 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %29 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %30 = bitcast %"class.std::__1::basic_string"* %5 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %31 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %30, i64 0, i32 1, i32 0
  %32 = bitcast %"class.std::__1::basic_string"* %6 to i8*
  %33 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %34 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %35 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %36 = bitcast %"class.std::__1::basic_string"* %6 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %37 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %36, i64 0, i32 1, i32 0
  %38 = bitcast %"class.spdy::HpackEntry"* %7 to i8*
  %39 = bitcast %"class.std::__1::basic_string"* %8 to i8*
  %40 = bitcast %"class.std::__1::basic_string"* %9 to i8*
  %41 = getelementptr inbounds %"class.spdy::HpackStaticTable", %"class.spdy::HpackStaticTable"* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %42 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %7, i64 0, i32 1
  %43 = bitcast %"class.std::__1::basic_string"* %42 to i8*
  %44 = bitcast %"class.spdy::HpackEntry"** %15 to i64*
  %45 = bitcast %"class.std::__1::basic_string"* %42 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %46 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %45, i64 0, i32 1, i32 0
  %47 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %42, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %48 = bitcast %"class.spdy::HpackEntry"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %49 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %48, i64 0, i32 1, i32 0
  %50 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %51 = bitcast %"class.std::__1::basic_string"* %9 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %52 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %51, i64 0, i32 1, i32 0
  %53 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %54 = bitcast %"class.std::__1::basic_string"* %8 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %55 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %54, i64 0, i32 1, i32 0
  %56 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %57 = bitcast %"class.std::__1::basic_string"* %5 to i8*
  %58 = bitcast %"class.std::__1::basic_string"* %6 to i8*
  br label %83

59:                                               ; preds = %168, %21
  %60 = load %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %13, align 8
  %61 = load %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %15, align 8
  %62 = icmp eq %"class.spdy::HpackEntry"* %60, %61
  br i1 %62, label %171, label %63

63:                                               ; preds = %59
  %64 = getelementptr inbounds %"class.spdy::HpackStaticTable", %"class.spdy::HpackStaticTable"* %0, i64 0, i32 1, i32 0, i32 0
  %65 = bitcast %"struct.std::__1::pair.28"* %10 to i8*
  %66 = getelementptr inbounds %"struct.std::__1::pair.28", %"struct.std::__1::pair.28"* %10, i64 0, i32 0, i32 0, i32 0
  %67 = getelementptr inbounds %"struct.std::__1::pair.28", %"struct.std::__1::pair.28"* %10, i64 0, i32 0, i32 0, i32 1
  %68 = getelementptr inbounds %"struct.std::__1::pair.28", %"struct.std::__1::pair.28"* %10, i64 0, i32 0, i32 1, i32 0
  %69 = getelementptr inbounds %"struct.std::__1::pair.28", %"struct.std::__1::pair.28"* %10, i64 0, i32 0, i32 1, i32 1
  %70 = getelementptr inbounds %"struct.std::__1::pair.28", %"struct.std::__1::pair.28"* %10, i64 0, i32 1
  %71 = getelementptr inbounds %"struct.std::__1::pair.28", %"struct.std::__1::pair.28"* %10, i64 0, i32 0
  %72 = getelementptr inbounds %"class.spdy::HpackStaticTable", %"class.spdy::HpackStaticTable"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  %73 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %64, i64 0, i32 0
  %74 = bitcast %"class.logging::CheckError"* %11 to i8*
  %75 = getelementptr inbounds %"class.spdy::HpackStaticTable", %"class.spdy::HpackStaticTable"* %0, i64 0, i32 2, i32 0, i32 0
  %76 = bitcast %"struct.std::__1::pair.30"* %12 to i8*
  %77 = getelementptr inbounds %"struct.std::__1::pair.30", %"struct.std::__1::pair.30"* %12, i64 0, i32 0, i32 0
  %78 = getelementptr inbounds %"struct.std::__1::pair.30", %"struct.std::__1::pair.30"* %12, i64 0, i32 0, i32 1
  %79 = getelementptr inbounds %"struct.std::__1::pair.30", %"struct.std::__1::pair.30"* %12, i64 0, i32 1
  %80 = getelementptr inbounds %"struct.std::__1::pair.30", %"struct.std::__1::pair.30"* %12, i64 0, i32 0
  %81 = getelementptr inbounds %"class.spdy::HpackStaticTable", %"class.spdy::HpackStaticTable"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %82 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.15", %"class.absl::container_internal::raw_hash_set.15"* %75, i64 0, i32 0
  br label %172

83:                                               ; preds = %25, %168
  %84 = phi %"struct.spdy::HpackStaticEntry"* [ %1, %25 ], [ %169, %168 ]
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %26) #14
  %85 = getelementptr inbounds %"struct.spdy::HpackStaticEntry", %"struct.spdy::HpackStaticEntry"* %84, i64 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %57, i8 -86, i64 24, i1 false)
  %86 = load i8*, i8** %85, align 8
  %87 = getelementptr inbounds %"struct.spdy::HpackStaticEntry", %"struct.spdy::HpackStaticEntry"* %84, i64 0, i32 1
  %88 = load i64, i64* %87, align 8
  %89 = icmp ugt i64 %88, -17
  br i1 %89, label %90, label %92

90:                                               ; preds = %83
  %91 = bitcast %"class.std::__1::basic_string"* %5 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %91) #18
  unreachable

92:                                               ; preds = %83
  %93 = icmp ult i64 %88, 23
  br i1 %93, label %99, label %94

94:                                               ; preds = %92
  %95 = add nuw i64 %88, 16
  %96 = and i64 %95, -16
  %97 = call i8* @_Znwm(i64 %96) #17
  store i8* %97, i8** %27, align 8
  %98 = or i64 %96, -9223372036854775808
  store i64 %98, i64* %29, align 8
  store i64 %88, i64* %28, align 8
  br label %102

99:                                               ; preds = %92
  %100 = trunc i64 %88 to i8
  store i8 %100, i8* %31, align 1
  %101 = icmp eq i64 %88, 0
  br i1 %101, label %104, label %102

102:                                              ; preds = %99, %94
  %103 = phi i8* [ %97, %94 ], [ %26, %99 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %103, i8* align 1 %86, i64 %88, i1 false) #14
  br label %104

104:                                              ; preds = %99, %102
  %105 = phi i8* [ %26, %99 ], [ %103, %102 ]
  %106 = getelementptr inbounds i8, i8* %105, i64 %88
  store i8 0, i8* %106, align 1
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %32) #14
  %107 = getelementptr inbounds %"struct.spdy::HpackStaticEntry", %"struct.spdy::HpackStaticEntry"* %84, i64 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %58, i8 -86, i64 24, i1 false)
  %108 = load i8*, i8** %107, align 8
  %109 = getelementptr inbounds %"struct.spdy::HpackStaticEntry", %"struct.spdy::HpackStaticEntry"* %84, i64 0, i32 3
  %110 = load i64, i64* %109, align 8
  %111 = icmp ugt i64 %110, -17
  br i1 %111, label %112, label %114

112:                                              ; preds = %104
  %113 = bitcast %"class.std::__1::basic_string"* %6 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %113) #18
  unreachable

114:                                              ; preds = %104
  %115 = icmp ult i64 %110, 23
  br i1 %115, label %121, label %116

116:                                              ; preds = %114
  %117 = add nuw i64 %110, 16
  %118 = and i64 %117, -16
  %119 = call i8* @_Znwm(i64 %118) #17
  store i8* %119, i8** %33, align 8
  %120 = or i64 %118, -9223372036854775808
  store i64 %120, i64* %35, align 8
  store i64 %110, i64* %34, align 8
  br label %124

121:                                              ; preds = %114
  %122 = trunc i64 %110 to i8
  store i8 %122, i8* %37, align 1
  %123 = icmp eq i64 %110, 0
  br i1 %123, label %126, label %124

124:                                              ; preds = %121, %116
  %125 = phi i8* [ %119, %116 ], [ %32, %121 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %125, i8* align 1 %108, i64 %110, i1 false) #14
  br label %126

126:                                              ; preds = %121, %124
  %127 = phi i8* [ %32, %121 ], [ %125, %124 ]
  %128 = getelementptr inbounds i8, i8* %127, i64 %110
  store i8 0, i8* %128, align 1
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %38) #14
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %39, i8* nonnull align 8 %26, i64 24, i1 false) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %26, i8 0, i64 24, i1 false) #14
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %40, i8* nonnull align 8 %32, i64 24, i1 false) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %32, i8 0, i64 24, i1 false) #14
  call void @_ZN4spdy10HpackEntryC1ENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_(%"class.spdy::HpackEntry"* nonnull %7, %"class.std::__1::basic_string"* nonnull %8, %"class.std::__1::basic_string"* nonnull %9) #14
  %129 = load %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %15, align 8
  %130 = load %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %41, align 8
  %131 = icmp ult %"class.spdy::HpackEntry"* %129, %130
  br i1 %131, label %132, label %138

132:                                              ; preds = %126
  %133 = bitcast %"class.spdy::HpackEntry"* %129 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %133, i8* nonnull align 8 %38, i64 24, i1 false) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %38, i8 0, i64 24, i1 false) #14
  %134 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %129, i64 0, i32 1
  %135 = bitcast %"class.std::__1::basic_string"* %134 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %135, i8* align 8 %43, i64 24, i1 false) #14
  call void @llvm.memset.p0i8.i64(i8* align 8 %43, i8 0, i64 24, i1 false) #14
  %136 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %129, i64 1
  %137 = ptrtoint %"class.spdy::HpackEntry"* %136 to i64
  store i64 %137, i64* %44, align 8
  br label %143

138:                                              ; preds = %126
  call void @_ZNSt3__16vectorIN4spdy10HpackEntryENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(%"class.std::__1::vector"* %22, %"class.spdy::HpackEntry"* nonnull dereferenceable(48) %7) #14
  %139 = load i8, i8* %46, align 1
  %140 = icmp slt i8 %139, 0
  br i1 %140, label %141, label %143

141:                                              ; preds = %138
  %142 = load i8*, i8** %47, align 8
  call void @_ZdlPv(i8* %142) #17
  br label %143

143:                                              ; preds = %132, %141, %138
  %144 = load i8, i8* %49, align 1
  %145 = icmp slt i8 %144, 0
  br i1 %145, label %146, label %148

146:                                              ; preds = %143
  %147 = load i8*, i8** %50, align 8
  call void @_ZdlPv(i8* %147) #17
  br label %148

148:                                              ; preds = %143, %146
  %149 = load i8, i8* %52, align 1
  %150 = icmp slt i8 %149, 0
  br i1 %150, label %151, label %153

151:                                              ; preds = %148
  %152 = load i8*, i8** %53, align 8
  call void @_ZdlPv(i8* %152) #17
  br label %153

153:                                              ; preds = %148, %151
  %154 = load i8, i8* %55, align 1
  %155 = icmp slt i8 %154, 0
  br i1 %155, label %156, label %158

156:                                              ; preds = %153
  %157 = load i8*, i8** %56, align 8
  call void @_ZdlPv(i8* %157) #17
  br label %158

158:                                              ; preds = %153, %156
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %38) #14
  %159 = load i8, i8* %37, align 1
  %160 = icmp slt i8 %159, 0
  br i1 %160, label %161, label %163

161:                                              ; preds = %158
  %162 = load i8*, i8** %33, align 8
  call void @_ZdlPv(i8* %162) #17
  br label %163

163:                                              ; preds = %158, %161
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %32) #14
  %164 = load i8, i8* %31, align 1
  %165 = icmp slt i8 %164, 0
  br i1 %165, label %166, label %168

166:                                              ; preds = %163
  %167 = load i8*, i8** %27, align 8
  call void @_ZdlPv(i8* %167) #17
  br label %168

168:                                              ; preds = %163, %166
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %26) #14
  %169 = getelementptr inbounds %"struct.spdy::HpackStaticEntry", %"struct.spdy::HpackStaticEntry"* %84, i64 1
  %170 = icmp eq %"struct.spdy::HpackStaticEntry"* %169, %23
  br i1 %170, label %59, label %83

171:                                              ; preds = %260, %59
  ret void

172:                                              ; preds = %63, %260
  %173 = phi i32 [ 0, %63 ], [ %264, %260 ]
  %174 = phi %"class.spdy::HpackEntry"* [ %60, %63 ], [ %265, %260 ]
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %65) #14
  %175 = bitcast %"class.spdy::HpackEntry"* %174 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %176 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %175, i64 0, i32 1, i32 0
  %177 = load i8, i8* %176, align 1
  %178 = icmp slt i8 %177, 0
  br i1 %178, label %182, label %179

179:                                              ; preds = %172
  %180 = zext i8 %177 to i64
  %181 = ptrtoint %"class.spdy::HpackEntry"* %174 to i64
  br label %189

182:                                              ; preds = %172
  %183 = bitcast %"class.spdy::HpackEntry"* %174 to i64*
  %184 = load i64, i64* %183, align 8
  %185 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %174, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %186 = load i64, i64* %185, align 8
  %187 = icmp sgt i64 %186, -1
  br i1 %187, label %189, label %188, !prof !2

188:                                              ; preds = %182
  call void @llvm.trap() #14
  unreachable

189:                                              ; preds = %179, %182
  %190 = phi i64 [ %184, %182 ], [ %181, %179 ]
  %191 = phi i64 [ %186, %182 ], [ %180, %179 ]
  %192 = inttoptr i64 %190 to i8*
  %193 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %174, i64 0, i32 1
  %194 = bitcast %"class.std::__1::basic_string"* %193 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %195 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %194, i64 0, i32 1, i32 0
  %196 = load i8, i8* %195, align 1
  %197 = icmp slt i8 %196, 0
  br i1 %197, label %201, label %198

198:                                              ; preds = %189
  %199 = zext i8 %196 to i64
  %200 = ptrtoint %"class.std::__1::basic_string"* %193 to i64
  br label %208

201:                                              ; preds = %189
  %202 = bitcast %"class.std::__1::basic_string"* %193 to i64*
  %203 = load i64, i64* %202, align 8
  %204 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %174, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %205 = load i64, i64* %204, align 8
  %206 = icmp sgt i64 %205, -1
  br i1 %206, label %208, label %207, !prof !2

207:                                              ; preds = %201
  call void @llvm.trap() #14
  unreachable

208:                                              ; preds = %198, %201
  %209 = phi i64 [ %203, %201 ], [ %200, %198 ]
  %210 = phi i64 [ %205, %201 ], [ %199, %198 ]
  %211 = inttoptr i64 %209 to i8*
  store i8* %192, i8** %66, align 8
  store i64 %191, i64* %67, align 8
  store i8* %211, i8** %68, align 8
  store i64 %210, i64* %69, align 8
  store i32 %173, i32* %70, align 8, !alias.scope !3
  %212 = call { i64, i8 } @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS4_EENSt3__18equal_toIS4_EENS9_9allocatorINS9_4pairIKS4_mEEEEE22find_or_prepare_insertIS4_EENSD_ImbEERKT_(%"class.absl::container_internal::raw_hash_set"* %64, %"struct.spdy::HpackLookupEntry"* nonnull dereferenceable(32) %71) #14, !noalias !6
  %213 = extractvalue { i64, i8 } %212, 0
  %214 = extractvalue { i64, i8 } %212, 1
  %215 = and i8 %214, 1
  %216 = icmp eq i8 %215, 0
  br i1 %216, label %224, label %217

217:                                              ; preds = %208
  %218 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %72, align 8, !noalias !6
  %219 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %218, i64 %213
  %220 = bitcast %"union.absl::container_internal::map_slot_type"* %219 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %220, i8* nonnull align 8 %65, i64 32, i1 false) #14, !noalias !6
  %221 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %218, i64 %213, i32 0, i32 1
  %222 = load i32, i32* %70, align 8, !noalias !6
  %223 = sext i32 %222 to i64
  store i64 %223, i64* %221, align 8, !noalias !6
  br label %224

224:                                              ; preds = %208, %217
  %225 = load i8*, i8** %73, align 8, !noalias !6
  %226 = getelementptr inbounds i8, i8* %225, i64 %213
  %227 = icmp ne i8* %226, null
  call void @llvm.assume(i1 %227) #14, !noalias !6
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %65) #14
  %228 = icmp eq i8 %214, 0
  br i1 %228, label %229, label %231

229:                                              ; preds = %224
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %74) #14
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %11, i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str, i64 0, i64 0), i32 38, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0)) #14
  %230 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %11) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %11) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %74) #14
  br label %231

231:                                              ; preds = %224, %229
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %76) #14
  %232 = load i8, i8* %176, align 1
  %233 = icmp slt i8 %232, 0
  br i1 %233, label %237, label %234

234:                                              ; preds = %231
  %235 = zext i8 %232 to i64
  %236 = ptrtoint %"class.spdy::HpackEntry"* %174 to i64
  br label %244

237:                                              ; preds = %231
  %238 = bitcast %"class.spdy::HpackEntry"* %174 to i64*
  %239 = load i64, i64* %238, align 8
  %240 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %174, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %241 = load i64, i64* %240, align 8
  %242 = icmp sgt i64 %241, -1
  br i1 %242, label %244, label %243, !prof !2

243:                                              ; preds = %237
  call void @llvm.trap() #14
  unreachable

244:                                              ; preds = %234, %237
  %245 = phi i64 [ %239, %237 ], [ %236, %234 ]
  %246 = phi i64 [ %241, %237 ], [ %235, %234 ]
  %247 = inttoptr i64 %245 to i8*
  store i8* %247, i8** %77, align 8
  store i64 %246, i64* %78, align 8
  store i32 %173, i32* %79, align 8, !alias.scope !21
  %248 = call { i64, i8 } @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS8_4pairIKS3_mEEEEE22find_or_prepare_insertIS3_EENSA_ImbEERKT_(%"class.absl::container_internal::raw_hash_set.15"* %75, %"class.absl::string_view"* nonnull dereferenceable(16) %80) #14, !noalias !24
  %249 = extractvalue { i64, i8 } %248, 0
  %250 = extractvalue { i64, i8 } %248, 1
  %251 = and i8 %250, 1
  %252 = icmp eq i8 %251, 0
  br i1 %252, label %260, label %253

253:                                              ; preds = %244
  %254 = load %"union.absl::container_internal::map_slot_type.16"*, %"union.absl::container_internal::map_slot_type.16"** %81, align 8, !noalias !24
  %255 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.16", %"union.absl::container_internal::map_slot_type.16"* %254, i64 %249
  %256 = bitcast %"union.absl::container_internal::map_slot_type.16"* %255 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %256, i8* nonnull align 8 %76, i64 16, i1 false) #14, !noalias !24
  %257 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.16", %"union.absl::container_internal::map_slot_type.16"* %254, i64 %249, i32 0, i32 1
  %258 = load i32, i32* %79, align 8, !noalias !24
  %259 = sext i32 %258 to i64
  store i64 %259, i64* %257, align 8, !noalias !24
  br label %260

260:                                              ; preds = %244, %253
  %261 = load i8*, i8** %82, align 8, !noalias !24
  %262 = getelementptr inbounds i8, i8* %261, i64 %249
  %263 = icmp ne i8* %262, null
  call void @llvm.assume(i1 %263) #14, !noalias !24
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %76) #14
  %264 = add nuw nsw i32 %173, 1
  %265 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %174, i64 1
  %266 = icmp eq %"class.spdy::HpackEntry"* %265, %61
  br i1 %266, label %171, label %172
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK4spdy16HpackStaticTable13IsInitializedEv(%"class.spdy::HpackStaticTable"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.spdy::HpackStaticTable", %"class.spdy::HpackStaticTable"* %0, i64 0, i32 0, i32 0, i32 0
  %3 = load %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %2, align 8
  %4 = getelementptr inbounds %"class.spdy::HpackStaticTable", %"class.spdy::HpackStaticTable"* %0, i64 0, i32 0, i32 0, i32 1
  %5 = load %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %4, align 8
  %6 = icmp ne %"class.spdy::HpackEntry"* %3, %5
  ret i1 %6
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #3

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN4spdy10HpackEntryENS_9allocatorIS2_EEE7reserveEm(%"class.std::__1::vector"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"class.spdy::HpackEntry"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = sdiv exact i64 %8, 48
  %10 = icmp ult i64 %9, %1
  %11 = inttoptr i64 %7 to %"class.spdy::HpackEntry"*
  br i1 %10, label %12, label %78

12:                                               ; preds = %2
  %13 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %14 = bitcast %"class.spdy::HpackEntry"** %13 to i64*
  %15 = icmp ugt i64 %1, 384307168202282325
  br i1 %15, label %16, label %17

16:                                               ; preds = %12
  tail call void @abort() #18
  unreachable

17:                                               ; preds = %12
  %18 = load i64, i64* %14, align 8
  %19 = sub i64 %18, %7
  %20 = sdiv exact i64 %19, 48
  %21 = mul i64 %1, 48
  %22 = tail call i8* @_Znwm(i64 %21) #17
  %23 = bitcast i8* %22 to %"class.spdy::HpackEntry"*
  %24 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %23, i64 %20
  %25 = ptrtoint %"class.spdy::HpackEntry"* %24 to i64
  %26 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %23, i64 %1
  %27 = ptrtoint %"class.spdy::HpackEntry"* %26 to i64
  %28 = inttoptr i64 %18 to %"class.spdy::HpackEntry"*
  %29 = icmp eq %"class.spdy::HpackEntry"* %28, %11
  br i1 %29, label %47, label %30

30:                                               ; preds = %17, %30
  %31 = phi %"class.spdy::HpackEntry"* [ %33, %30 ], [ %24, %17 ]
  %32 = phi %"class.spdy::HpackEntry"* [ %34, %30 ], [ %28, %17 ]
  %33 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %31, i64 -1
  %34 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %32, i64 -1
  %35 = bitcast %"class.spdy::HpackEntry"* %33 to i8*
  %36 = bitcast %"class.spdy::HpackEntry"* %34 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %35, i8* align 8 %36, i64 24, i1 false) #14
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %36, i8 0, i64 24, i1 false) #14
  %37 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %31, i64 -1, i32 1
  %38 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %32, i64 -1, i32 1
  %39 = bitcast %"class.std::__1::basic_string"* %37 to i8*
  %40 = bitcast %"class.std::__1::basic_string"* %38 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %39, i8* align 8 %40, i64 24, i1 false) #14
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %40, i8 0, i64 24, i1 false) #14
  %41 = icmp eq %"class.spdy::HpackEntry"* %34, %11
  br i1 %41, label %42, label %30

42:                                               ; preds = %30
  %43 = ptrtoint %"class.spdy::HpackEntry"* %33 to i64
  %44 = load i64, i64* %6, align 8
  %45 = load %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %13, align 8
  %46 = inttoptr i64 %44 to %"class.spdy::HpackEntry"*
  br label %47

47:                                               ; preds = %17, %42
  %48 = phi %"class.spdy::HpackEntry"* [ %46, %42 ], [ %28, %17 ]
  %49 = phi %"class.spdy::HpackEntry"* [ %45, %42 ], [ %11, %17 ]
  %50 = phi i64 [ %43, %42 ], [ %25, %17 ]
  %51 = phi i64 [ %44, %42 ], [ %18, %17 ]
  store i64 %50, i64* %6, align 8
  store i64 %25, i64* %14, align 8
  store i64 %27, i64* %4, align 8
  %52 = icmp eq %"class.spdy::HpackEntry"* %49, %48
  br i1 %52, label %74, label %53

53:                                               ; preds = %47, %72
  %54 = phi %"class.spdy::HpackEntry"* [ %55, %72 ], [ %49, %47 ]
  %55 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %54, i64 -1
  %56 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %54, i64 -1, i32 1
  %57 = bitcast %"class.std::__1::basic_string"* %56 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %58 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %57, i64 0, i32 1, i32 0
  %59 = load i8, i8* %58, align 1
  %60 = icmp slt i8 %59, 0
  br i1 %60, label %61, label %64

61:                                               ; preds = %53
  %62 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %56, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %63 = load i8*, i8** %62, align 8
  tail call void @_ZdlPv(i8* %63) #17
  br label %64

64:                                               ; preds = %61, %53
  %65 = bitcast %"class.spdy::HpackEntry"* %55 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %66 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %65, i64 0, i32 1, i32 0
  %67 = load i8, i8* %66, align 1
  %68 = icmp slt i8 %67, 0
  br i1 %68, label %69, label %72

69:                                               ; preds = %64
  %70 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %55, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %71 = load i8*, i8** %70, align 8
  tail call void @_ZdlPv(i8* %71) #17
  br label %72

72:                                               ; preds = %69, %64
  %73 = icmp eq %"class.spdy::HpackEntry"* %55, %48
  br i1 %73, label %74, label %53

74:                                               ; preds = %72, %47
  %75 = icmp eq i64 %51, 0
  br i1 %75, label %78, label %76

76:                                               ; preds = %74
  %77 = inttoptr i64 %51 to i8*
  tail call void @_ZdlPv(i8* %77) #17
  br label %78

78:                                               ; preds = %76, %74, %2
  ret void
}

declare void @_ZN4spdy10HpackEntryC1ENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_(%"class.spdy::HpackEntry"*, %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"*) unnamed_addr #3

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i64 @_ZNK4spdy16HpackStaticTable19EstimateMemoryUsageEv(%"class.spdy::HpackStaticTable"* nocapture readnone) local_unnamed_addr #5 align 2 {
  ret i64 0
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #7

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #8

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #9

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #10

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN4spdy10HpackEntryENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(%"class.std::__1::vector"*, %"class.spdy::HpackEntry"* dereferenceable(48)) local_unnamed_addr #11 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"class.spdy::HpackEntry"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = sdiv exact i64 %8, 48
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 384307168202282325
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #18
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"class.spdy::HpackEntry"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = sdiv exact i64 %18, 48
  %20 = icmp ult i64 %19, 192153584101141162
  br i1 %20, label %21, label %26

21:                                               ; preds = %14
  %22 = shl nsw i64 %19, 1
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %31, label %26

26:                                               ; preds = %14, %21
  %27 = phi i64 [ %24, %21 ], [ 384307168202282325, %14 ]
  %28 = mul i64 %27, 48
  %29 = tail call i8* @_Znwm(i64 %28) #17
  %30 = bitcast i8* %29 to %"class.spdy::HpackEntry"*
  br label %31

31:                                               ; preds = %21, %26
  %32 = phi i64 [ %27, %26 ], [ 0, %21 ]
  %33 = phi %"class.spdy::HpackEntry"* [ %30, %26 ], [ null, %21 ]
  %34 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %33, i64 %9
  %35 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %33, i64 %32
  %36 = ptrtoint %"class.spdy::HpackEntry"* %35 to i64
  %37 = bitcast %"class.spdy::HpackEntry"* %34 to i8*
  %38 = bitcast %"class.spdy::HpackEntry"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %37, i8* align 8 %38, i64 24, i1 false) #14
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %38, i8 0, i64 24, i1 false) #14
  %39 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %33, i64 %9, i32 1
  %40 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %1, i64 0, i32 1
  %41 = bitcast %"class.std::__1::basic_string"* %39 to i8*
  %42 = bitcast %"class.std::__1::basic_string"* %40 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %41, i8* align 8 %42, i64 24, i1 false) #14
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %42, i8 0, i64 24, i1 false) #14
  %43 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %34, i64 1
  %44 = ptrtoint %"class.spdy::HpackEntry"* %43 to i64
  %45 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %46 = load %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %45, align 8
  %47 = load %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %3, align 8
  %48 = icmp eq %"class.spdy::HpackEntry"* %47, %46
  br i1 %48, label %49, label %51

49:                                               ; preds = %31
  %50 = ptrtoint %"class.spdy::HpackEntry"* %46 to i64
  br label %66

51:                                               ; preds = %31, %51
  %52 = phi %"class.spdy::HpackEntry"* [ %54, %51 ], [ %34, %31 ]
  %53 = phi %"class.spdy::HpackEntry"* [ %55, %51 ], [ %47, %31 ]
  %54 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %52, i64 -1
  %55 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %53, i64 -1
  %56 = bitcast %"class.spdy::HpackEntry"* %54 to i8*
  %57 = bitcast %"class.spdy::HpackEntry"* %55 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %56, i8* align 8 %57, i64 24, i1 false) #14
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %57, i8 0, i64 24, i1 false) #14
  %58 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %52, i64 -1, i32 1
  %59 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %53, i64 -1, i32 1
  %60 = bitcast %"class.std::__1::basic_string"* %58 to i8*
  %61 = bitcast %"class.std::__1::basic_string"* %59 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %60, i8* align 8 %61, i64 24, i1 false) #14
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %61, i8 0, i64 24, i1 false) #14
  %62 = icmp eq %"class.spdy::HpackEntry"* %55, %46
  br i1 %62, label %63, label %51

63:                                               ; preds = %51
  %64 = load i64, i64* %6, align 8
  %65 = load %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %3, align 8
  br label %66

66:                                               ; preds = %49, %63
  %67 = phi %"class.spdy::HpackEntry"* [ %46, %49 ], [ %65, %63 ]
  %68 = phi %"class.spdy::HpackEntry"* [ %34, %49 ], [ %54, %63 ]
  %69 = phi i64 [ %50, %49 ], [ %64, %63 ]
  %70 = ptrtoint %"class.spdy::HpackEntry"* %68 to i64
  store i64 %70, i64* %6, align 8
  store i64 %44, i64* %4, align 8
  store i64 %36, i64* %16, align 8
  %71 = inttoptr i64 %69 to %"class.spdy::HpackEntry"*
  %72 = icmp eq %"class.spdy::HpackEntry"* %67, %71
  br i1 %72, label %94, label %73

73:                                               ; preds = %66, %92
  %74 = phi %"class.spdy::HpackEntry"* [ %75, %92 ], [ %67, %66 ]
  %75 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %74, i64 -1
  %76 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %74, i64 -1, i32 1
  %77 = bitcast %"class.std::__1::basic_string"* %76 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %78 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %77, i64 0, i32 1, i32 0
  %79 = load i8, i8* %78, align 1
  %80 = icmp slt i8 %79, 0
  br i1 %80, label %81, label %84

81:                                               ; preds = %73
  %82 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %76, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %83 = load i8*, i8** %82, align 8
  tail call void @_ZdlPv(i8* %83) #17
  br label %84

84:                                               ; preds = %81, %73
  %85 = bitcast %"class.spdy::HpackEntry"* %75 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %86 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %85, i64 0, i32 1, i32 0
  %87 = load i8, i8* %86, align 1
  %88 = icmp slt i8 %87, 0
  br i1 %88, label %89, label %92

89:                                               ; preds = %84
  %90 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %75, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %91 = load i8*, i8** %90, align 8
  tail call void @_ZdlPv(i8* %91) #17
  br label %92

92:                                               ; preds = %89, %84
  %93 = icmp eq %"class.spdy::HpackEntry"* %75, %71
  br i1 %93, label %94, label %73

94:                                               ; preds = %92, %66
  %95 = icmp eq i64 %69, 0
  br i1 %95, label %98, label %96

96:                                               ; preds = %94
  %97 = inttoptr i64 %69 to i8*
  tail call void @_ZdlPv(i8* %97) #17
  br label %98

98:                                               ; preds = %94, %96
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #8

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i64, i8 } @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS4_EENSt3__18equal_toIS4_EENS9_9allocatorINS9_4pairIKS4_mEEEEE22find_or_prepare_insertIS4_EENSD_ImbEERKT_(%"class.absl::container_internal::raw_hash_set"*, %"struct.spdy::HpackLookupEntry"* dereferenceable(32)) local_unnamed_addr #12 comdat align 2 {
  %3 = load i64, i64* bitcast (i8** @_ZN4absl13hash_internal15MixingHashState5kSeedE to i64*), align 8
  %4 = getelementptr inbounds %"struct.spdy::HpackLookupEntry", %"struct.spdy::HpackLookupEntry"* %1, i64 0, i32 0, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"struct.spdy::HpackLookupEntry", %"struct.spdy::HpackLookupEntry"* %1, i64 0, i32 0, i32 1
  %7 = load i64, i64* %6, align 8
  %8 = tail call i64 @_ZN4absl13hash_internal15MixingHashState18combine_contiguousES1_PKhm(i64 %3, i8* %5, i64 %7) #14
  %9 = add i64 %8, %7
  %10 = zext i64 %9 to i128
  %11 = mul nuw i128 %10, 11376068507788127593
  %12 = lshr i128 %11, 64
  %13 = xor i128 %12, %11
  %14 = trunc i128 %13 to i64
  %15 = getelementptr inbounds %"struct.spdy::HpackLookupEntry", %"struct.spdy::HpackLookupEntry"* %1, i64 0, i32 1, i32 0
  %16 = load i8*, i8** %15, align 8
  %17 = getelementptr inbounds %"struct.spdy::HpackLookupEntry", %"struct.spdy::HpackLookupEntry"* %1, i64 0, i32 1, i32 1
  %18 = load i64, i64* %17, align 8
  %19 = tail call i64 @_ZN4absl13hash_internal15MixingHashState18combine_contiguousES1_PKhm(i64 %14, i8* %16, i64 %18) #14
  %20 = add i64 %19, %18
  %21 = zext i64 %20 to i128
  %22 = mul nuw i128 %21, 11376068507788127593
  %23 = lshr i128 %22, 64
  %24 = xor i128 %23, %22
  %25 = trunc i128 %24 to i64
  %26 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 0
  %27 = load i8*, i8** %26, align 8
  %28 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 3
  %29 = load i64, i64* %28, align 8
  %30 = lshr i64 %25, 7
  %31 = ptrtoint i8* %27 to i64
  %32 = lshr i64 %31, 12
  %33 = xor i64 %30, %32
  %34 = trunc i128 %24 to i8
  %35 = and i8 %34, 127
  %36 = insertelement <16 x i8> undef, i8 %35, i32 0
  %37 = shufflevector <16 x i8> %36, <16 x i8> undef, <16 x i32> zeroinitializer
  %38 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 1
  %39 = load i8*, i8** %4, align 8
  %40 = load i64, i64* %6, align 8
  %41 = load i8*, i8** %15, align 8
  %42 = load i64, i64* %17, align 8
  %43 = icmp eq i64 %40, 0
  %44 = icmp eq i64 %42, 0
  br label %45

45:                                               ; preds = %91, %2
  %46 = phi i64 [ %33, %2 ], [ %93, %91 ]
  %47 = phi i64 [ 0, %2 ], [ %92, %91 ]
  %48 = and i64 %46, %29
  %49 = getelementptr inbounds i8, i8* %27, i64 %48
  %50 = bitcast i8* %49 to <16 x i8>*
  %51 = load <16 x i8>, <16 x i8>* %50, align 1
  %52 = icmp eq <16 x i8> %37, %51
  %53 = bitcast <16 x i1> %52 to i16
  %54 = icmp eq i16 %53, 0
  br i1 %54, label %87, label %55

55:                                               ; preds = %45
  %56 = zext i16 %53 to i32
  %57 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %38, align 8
  br label %58

58:                                               ; preds = %55, %83
  %59 = phi i32 [ %56, %55 ], [ %85, %83 ]
  %60 = tail call i32 @llvm.cttz.i32(i32 %59, i1 false) #14, !range !39
  %61 = zext i32 %60 to i64
  %62 = add i64 %48, %61
  %63 = and i64 %62, %29
  %64 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %57, i64 %63, i32 0, i32 0, i32 0, i32 0
  %65 = load i8*, i8** %64, align 8
  %66 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %57, i64 %63, i32 0, i32 0, i32 0, i32 1
  %67 = load i64, i64* %66, align 8
  %68 = icmp eq i64 %67, %40
  br i1 %68, label %69, label %83, !prof !40

69:                                               ; preds = %58
  br i1 %43, label %73, label %70

70:                                               ; preds = %69
  %71 = tail call i32 @bcmp(i8* %65, i8* %39, i64 %40) #14
  %72 = icmp eq i32 %71, 0
  br i1 %72, label %73, label %83, !prof !40

73:                                               ; preds = %70, %69
  %74 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %57, i64 %63, i32 0, i32 0, i32 1, i32 0
  %75 = load i8*, i8** %74, align 8
  %76 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %57, i64 %63, i32 0, i32 0, i32 1, i32 1
  %77 = load i64, i64* %76, align 8
  %78 = icmp eq i64 %77, %42
  br i1 %78, label %79, label %83, !prof !40

79:                                               ; preds = %73
  br i1 %44, label %96, label %80

80:                                               ; preds = %79
  %81 = tail call i32 @bcmp(i8* %75, i8* %41, i64 %42) #14
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %96, label %83, !prof !2

83:                                               ; preds = %58, %73, %70, %80
  %84 = add i32 %59, -1
  %85 = and i32 %84, %59
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %87, label %58

87:                                               ; preds = %83, %45
  %88 = icmp eq <16 x i8> %51, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %89 = bitcast <16 x i1> %88 to i16
  %90 = icmp eq i16 %89, 0
  br i1 %90, label %91, label %94, !prof !41

91:                                               ; preds = %87
  %92 = add i64 %47, 16
  %93 = add i64 %92, %48
  br label %45

94:                                               ; preds = %87
  %95 = tail call i64 @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS4_EENSt3__18equal_toIS4_EENS9_9allocatorINS9_4pairIKS4_mEEEEE14prepare_insertEm(%"class.absl::container_internal::raw_hash_set"* %0, i64 %25)
  br label %96

96:                                               ; preds = %80, %79, %94
  %97 = phi i64 [ %95, %94 ], [ %63, %79 ], [ %63, %80 ]
  %98 = phi i8 [ 1, %94 ], [ 0, %79 ], [ 0, %80 ]
  %99 = insertvalue { i64, i8 } undef, i64 %97, 0
  %100 = insertvalue { i64, i8 } %99, i8 %98, 1
  ret { i64, i8 } %100
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS4_EENSt3__18equal_toIS4_EENS9_9allocatorINS9_4pairIKS4_mEEEEE14prepare_insertEm(%"class.absl::container_internal::raw_hash_set"*, i64) local_unnamed_addr #13 comdat align 2 {
  %3 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 3
  %6 = load i64, i64* %5, align 8
  %7 = lshr i64 %1, 7
  %8 = ptrtoint i8* %4 to i64
  %9 = lshr i64 %8, 12
  %10 = xor i64 %9, %7
  %11 = and i64 %10, %6
  %12 = getelementptr inbounds i8, i8* %4, i64 %11
  %13 = bitcast i8* %12 to <16 x i8>*
  %14 = load <16 x i8>, <16 x i8>* %13, align 1
  %15 = icmp slt <16 x i8> %14, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %16 = bitcast <16 x i1> %15 to i16
  %17 = icmp eq i16 %16, 0
  br i1 %17, label %18, label %30

18:                                               ; preds = %2, %18
  %19 = phi i64 [ %23, %18 ], [ %11, %2 ]
  %20 = phi i64 [ %21, %18 ], [ 0, %2 ]
  %21 = add i64 %20, 16
  %22 = add i64 %21, %19
  %23 = and i64 %22, %6
  %24 = getelementptr inbounds i8, i8* %4, i64 %23
  %25 = bitcast i8* %24 to <16 x i8>*
  %26 = load <16 x i8>, <16 x i8>* %25, align 1
  %27 = icmp slt <16 x i8> %26, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %28 = bitcast <16 x i1> %27 to i16
  %29 = icmp eq i16 %28, 0
  br i1 %29, label %18, label %30

30:                                               ; preds = %18, %2
  %31 = phi i64 [ %11, %2 ], [ %23, %18 ]
  %32 = phi i16 [ %16, %2 ], [ %28, %18 ]
  %33 = zext i16 %32 to i32
  %34 = tail call i32 @llvm.cttz.i32(i32 %33, i1 false) #14, !range !39
  %35 = zext i32 %34 to i64
  %36 = add i64 %31, %35
  %37 = and i64 %36, %6
  %38 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %39 = load i64, i64* %38, align 8
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %41, label %93

41:                                               ; preds = %30
  %42 = getelementptr inbounds i8, i8* %4, i64 %37
  %43 = load i8, i8* %42, align 1
  %44 = icmp eq i8 %43, -2
  br i1 %44, label %93, label %45, !prof !2

45:                                               ; preds = %41
  %46 = icmp eq i64 %6, 0
  br i1 %46, label %47, label %48

47:                                               ; preds = %45
  tail call void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS4_EENSt3__18equal_toIS4_EENS9_9allocatorINS9_4pairIKS4_mEEEEE6resizeEm(%"class.absl::container_internal::raw_hash_set"* %0, i64 1) #14
  br label %59

48:                                               ; preds = %45
  %49 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 2
  %50 = load i64, i64* %49, align 8
  %51 = lshr i64 %6, 3
  %52 = sub i64 %6, %51
  %53 = lshr i64 %52, 1
  %54 = icmp ugt i64 %50, %53
  br i1 %54, label %56, label %55

55:                                               ; preds = %48
  tail call void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS4_EENSt3__18equal_toIS4_EENS9_9allocatorINS9_4pairIKS4_mEEEEE27drop_deletes_without_resizeEv(%"class.absl::container_internal::raw_hash_set"* %0) #14
  br label %59

56:                                               ; preds = %48
  %57 = shl i64 %6, 1
  %58 = or i64 %57, 1
  tail call void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS4_EENSt3__18equal_toIS4_EENS9_9allocatorINS9_4pairIKS4_mEEEEE6resizeEm(%"class.absl::container_internal::raw_hash_set"* %0, i64 %58) #14
  br label %59

59:                                               ; preds = %47, %55, %56
  %60 = load i8*, i8** %3, align 8
  %61 = load i64, i64* %5, align 8
  %62 = ptrtoint i8* %60 to i64
  %63 = lshr i64 %62, 12
  %64 = xor i64 %63, %7
  %65 = and i64 %64, %61
  %66 = getelementptr inbounds i8, i8* %60, i64 %65
  %67 = bitcast i8* %66 to <16 x i8>*
  %68 = load <16 x i8>, <16 x i8>* %67, align 1
  %69 = icmp slt <16 x i8> %68, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %70 = bitcast <16 x i1> %69 to i16
  %71 = icmp eq i16 %70, 0
  br i1 %71, label %72, label %84

72:                                               ; preds = %59, %72
  %73 = phi i64 [ %77, %72 ], [ %65, %59 ]
  %74 = phi i64 [ %75, %72 ], [ 0, %59 ]
  %75 = add i64 %74, 16
  %76 = add i64 %75, %73
  %77 = and i64 %76, %61
  %78 = getelementptr inbounds i8, i8* %60, i64 %77
  %79 = bitcast i8* %78 to <16 x i8>*
  %80 = load <16 x i8>, <16 x i8>* %79, align 1
  %81 = icmp slt <16 x i8> %80, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %82 = bitcast <16 x i1> %81 to i16
  %83 = icmp eq i16 %82, 0
  br i1 %83, label %72, label %84

84:                                               ; preds = %72, %59
  %85 = phi i64 [ %65, %59 ], [ %77, %72 ]
  %86 = phi i16 [ %70, %59 ], [ %82, %72 ]
  %87 = zext i16 %86 to i32
  %88 = tail call i32 @llvm.cttz.i32(i32 %87, i1 false) #14, !range !39
  %89 = zext i32 %88 to i64
  %90 = add i64 %85, %89
  %91 = and i64 %90, %61
  %92 = load i64, i64* %38, align 8
  br label %93

93:                                               ; preds = %41, %30, %84
  %94 = phi i64 [ %92, %84 ], [ 0, %41 ], [ %39, %30 ]
  %95 = phi i8* [ %60, %84 ], [ %4, %41 ], [ %4, %30 ]
  %96 = phi i64 [ %91, %84 ], [ %37, %41 ], [ %37, %30 ]
  %97 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 2
  %98 = load i64, i64* %97, align 8
  %99 = add i64 %98, 1
  store i64 %99, i64* %97, align 8
  %100 = getelementptr inbounds i8, i8* %95, i64 %96
  %101 = load i8, i8* %100, align 1
  %102 = icmp eq i8 %101, -128
  %103 = zext i1 %102 to i64
  %104 = sub i64 %94, %103
  store i64 %104, i64* %38, align 8
  %105 = trunc i64 %1 to i8
  %106 = and i8 %105, 127
  store i8 %106, i8* %100, align 1
  %107 = load i8*, i8** %3, align 8
  %108 = add i64 %96, -15
  %109 = load i64, i64* %5, align 8
  %110 = and i64 %109, %108
  %111 = and i64 %109, 15
  %112 = add i64 %110, %111
  %113 = getelementptr inbounds i8, i8* %107, i64 %112
  store i8 %106, i8* %113, align 1
  ret i64 %96
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN4absl13hash_internal15MixingHashState18combine_contiguousES1_PKhm(i64, i8*, i64) local_unnamed_addr #0 comdat align 2 {
  %4 = icmp ugt i64 %2, 16
  br i1 %4, label %5, label %11

5:                                                ; preds = %3
  %6 = icmp ugt i64 %2, 1024
  br i1 %6, label %7, label %9, !prof !41

7:                                                ; preds = %5
  %8 = tail call i64 @_ZN4absl13hash_internal15MixingHashState28CombineLargeContiguousImpl64EmPKhm(i64 %0, i8* %1, i64 %2) #14
  br label %75

9:                                                ; preds = %5
  %10 = tail call i64 @_ZN4absl13hash_internal15MixingHashState10WyhashImplEPKhm(i8* %1, i64 %2) #14
  br label %66

11:                                               ; preds = %3
  %12 = icmp ugt i64 %2, 8
  br i1 %12, label %13, label %29

13:                                               ; preds = %11
  %14 = bitcast i8* %1 to i64*
  %15 = load i64, i64* %14, align 1
  %16 = getelementptr inbounds i8, i8* %1, i64 %2
  %17 = getelementptr inbounds i8, i8* %16, i64 -8
  %18 = bitcast i8* %17 to i64*
  %19 = load i64, i64* %18, align 1
  %20 = shl i64 %2, 3
  %21 = sub nuw nsw i64 128, %20
  %22 = lshr i64 %19, %21
  %23 = add i64 %15, %0
  %24 = zext i64 %23 to i128
  %25 = mul nuw i128 %24, 11376068507788127593
  %26 = lshr i128 %25, 64
  %27 = xor i128 %26, %25
  %28 = trunc i128 %27 to i64
  br label %66

29:                                               ; preds = %11
  %30 = icmp ugt i64 %2, 3
  br i1 %30, label %31, label %44

31:                                               ; preds = %29
  %32 = bitcast i8* %1 to i32*
  %33 = load i32, i32* %32, align 1
  %34 = getelementptr inbounds i8, i8* %1, i64 %2
  %35 = getelementptr inbounds i8, i8* %34, i64 -4
  %36 = bitcast i8* %35 to i32*
  %37 = load i32, i32* %36, align 1
  %38 = zext i32 %37 to i64
  %39 = shl i64 %2, 3
  %40 = add nsw i64 %39, -32
  %41 = shl i64 %38, %40
  %42 = zext i32 %33 to i64
  %43 = or i64 %41, %42
  br label %66

44:                                               ; preds = %29
  %45 = icmp eq i64 %2, 0
  br i1 %45, label %75, label %46

46:                                               ; preds = %44
  %47 = load i8, i8* %1, align 1
  %48 = lshr i64 %2, 1
  %49 = getelementptr inbounds i8, i8* %1, i64 %48
  %50 = load i8, i8* %49, align 1
  %51 = add nsw i64 %2, -1
  %52 = getelementptr inbounds i8, i8* %1, i64 %51
  %53 = load i8, i8* %52, align 1
  %54 = zext i8 %47 to i32
  %55 = zext i8 %50 to i32
  %56 = shl i64 %48, 3
  %57 = trunc i64 %56 to i32
  %58 = shl i32 %55, %57
  %59 = or i32 %58, %54
  %60 = zext i8 %53 to i32
  %61 = trunc i64 %51 to i32
  %62 = shl i32 %61, 3
  %63 = shl i32 %60, %62
  %64 = or i32 %59, %63
  %65 = zext i32 %64 to i64
  br label %66

66:                                               ; preds = %46, %31, %13, %9
  %67 = phi i64 [ %10, %9 ], [ %22, %13 ], [ %43, %31 ], [ %65, %46 ]
  %68 = phi i64 [ %0, %9 ], [ %28, %13 ], [ %0, %31 ], [ %0, %46 ]
  %69 = add i64 %68, %67
  %70 = zext i64 %69 to i128
  %71 = mul nuw i128 %70, 11376068507788127593
  %72 = lshr i128 %71, 64
  %73 = xor i128 %72, %71
  %74 = trunc i128 %73 to i64
  br label %75

75:                                               ; preds = %7, %44, %66
  %76 = phi i64 [ %8, %7 ], [ %74, %66 ], [ %0, %44 ]
  ret i64 %76
}

declare i64 @_ZN4absl13hash_internal15MixingHashState28CombineLargeContiguousImpl64EmPKhm(i64, i8*, i64) local_unnamed_addr #3

declare i64 @_ZN4absl13hash_internal15MixingHashState10WyhashImplEPKhm(i8*, i64) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @llvm.assume(i1) #14

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.cttz.i32(i32, i1 immarg) #15

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS4_EENSt3__18equal_toIS4_EENS9_9allocatorINS9_4pairIKS4_mEEEEE6resizeEm(%"class.absl::container_internal::raw_hash_set"*, i64) local_unnamed_addr #12 comdat align 2 {
  %3 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 1
  %6 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %5, align 8
  %7 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 3
  %8 = load i64, i64* %7, align 8
  store i64 %1, i64* %7, align 8
  %9 = add i64 %1, 16
  %10 = add i64 %1, 23
  %11 = and i64 %10, -8
  %12 = mul i64 %1, 40
  %13 = add i64 %11, %12
  %14 = tail call i8* @_Znwm(i64 %13) #17
  store i8* %14, i8** %3, align 8
  %15 = getelementptr inbounds i8, i8* %14, i64 %11
  %16 = bitcast %"union.absl::container_internal::map_slot_type"** %5 to i8**
  store i8* %15, i8** %16, align 8
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %14, i8 -128, i64 %9, i1 false) #14
  %17 = getelementptr inbounds i8, i8* %14, i64 %1
  store i8 -1, i8* %17, align 1
  %18 = lshr i64 %1, 3
  %19 = sub i64 %1, %18
  %20 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 2
  %21 = load i64, i64* %20, align 8
  %22 = sub i64 %19, %21
  %23 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  store i64 %22, i64* %23, align 8
  %24 = icmp eq i64 %8, 0
  br i1 %24, label %108, label %25

25:                                               ; preds = %2
  %26 = load i64, i64* bitcast (i8** @_ZN4absl13hash_internal15MixingHashState5kSeedE to i64*), align 8
  br label %28

27:                                               ; preds = %104
  br i1 %24, label %108, label %107

28:                                               ; preds = %25, %104
  %29 = phi i64 [ 0, %25 ], [ %105, %104 ]
  %30 = getelementptr inbounds i8, i8* %4, i64 %29
  %31 = load i8, i8* %30, align 1
  %32 = icmp sgt i8 %31, -1
  br i1 %32, label %33, label %104

33:                                               ; preds = %28
  %34 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %6, i64 %29
  %35 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %34, i64 0, i32 0, i32 0, i32 0, i32 0
  %36 = load i8*, i8** %35, align 8
  %37 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %6, i64 %29, i32 0, i32 0, i32 0, i32 1
  %38 = load i64, i64* %37, align 8
  %39 = tail call i64 @_ZN4absl13hash_internal15MixingHashState18combine_contiguousES1_PKhm(i64 %26, i8* %36, i64 %38) #14
  %40 = add i64 %39, %38
  %41 = zext i64 %40 to i128
  %42 = mul nuw i128 %41, 11376068507788127593
  %43 = lshr i128 %42, 64
  %44 = xor i128 %43, %42
  %45 = trunc i128 %44 to i64
  %46 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %6, i64 %29, i32 0, i32 0, i32 1, i32 0
  %47 = load i8*, i8** %46, align 8
  %48 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %6, i64 %29, i32 0, i32 0, i32 1, i32 1
  %49 = load i64, i64* %48, align 8
  %50 = tail call i64 @_ZN4absl13hash_internal15MixingHashState18combine_contiguousES1_PKhm(i64 %45, i8* %47, i64 %49) #14
  %51 = add i64 %50, %49
  %52 = zext i64 %51 to i128
  %53 = mul nuw i128 %52, 11376068507788127593
  %54 = lshr i128 %53, 64
  %55 = xor i128 %54, %53
  %56 = trunc i128 %55 to i64
  %57 = load i8*, i8** %3, align 8
  %58 = load i64, i64* %7, align 8
  %59 = lshr i64 %56, 7
  %60 = ptrtoint i8* %57 to i64
  %61 = lshr i64 %60, 12
  %62 = xor i64 %59, %61
  %63 = and i64 %62, %58
  %64 = getelementptr inbounds i8, i8* %57, i64 %63
  %65 = bitcast i8* %64 to <16 x i8>*
  %66 = load <16 x i8>, <16 x i8>* %65, align 1
  %67 = icmp slt <16 x i8> %66, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %68 = bitcast <16 x i1> %67 to i16
  %69 = icmp eq i16 %68, 0
  br i1 %69, label %70, label %82

70:                                               ; preds = %33, %70
  %71 = phi i64 [ %75, %70 ], [ %63, %33 ]
  %72 = phi i64 [ %73, %70 ], [ 0, %33 ]
  %73 = add i64 %72, 16
  %74 = add i64 %73, %71
  %75 = and i64 %74, %58
  %76 = getelementptr inbounds i8, i8* %57, i64 %75
  %77 = bitcast i8* %76 to <16 x i8>*
  %78 = load <16 x i8>, <16 x i8>* %77, align 1
  %79 = icmp slt <16 x i8> %78, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %80 = bitcast <16 x i1> %79 to i16
  %81 = icmp eq i16 %80, 0
  br i1 %81, label %70, label %82

82:                                               ; preds = %70, %33
  %83 = phi i64 [ %63, %33 ], [ %75, %70 ]
  %84 = phi i16 [ %68, %33 ], [ %80, %70 ]
  %85 = zext i16 %84 to i32
  %86 = tail call i32 @llvm.cttz.i32(i32 %85, i1 false) #14, !range !39
  %87 = zext i32 %86 to i64
  %88 = add i64 %83, %87
  %89 = and i64 %88, %58
  %90 = trunc i128 %55 to i8
  %91 = and i8 %90, 127
  %92 = getelementptr inbounds i8, i8* %57, i64 %89
  store i8 %91, i8* %92, align 1
  %93 = load i8*, i8** %3, align 8
  %94 = add i64 %89, -15
  %95 = load i64, i64* %7, align 8
  %96 = and i64 %94, %95
  %97 = and i64 %95, 15
  %98 = add i64 %96, %97
  %99 = getelementptr inbounds i8, i8* %93, i64 %98
  store i8 %91, i8* %99, align 1
  %100 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %5, align 8
  %101 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %100, i64 %89
  %102 = bitcast %"union.absl::container_internal::map_slot_type"* %101 to i8*
  %103 = bitcast %"union.absl::container_internal::map_slot_type"* %34 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %102, i8* align 8 %103, i64 40, i1 false) #14
  br label %104

104:                                              ; preds = %28, %82
  %105 = add nuw i64 %29, 1
  %106 = icmp eq i64 %105, %8
  br i1 %106, label %27, label %28

107:                                              ; preds = %27
  tail call void @_ZdlPv(i8* %4) #17
  br label %108

108:                                              ; preds = %2, %27, %107
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS4_EENSt3__18equal_toIS4_EENS9_9allocatorINS9_4pairIKS4_mEEEEE27drop_deletes_without_resizeEv(%"class.absl::container_internal::raw_hash_set"*) local_unnamed_addr #13 comdat align 2 {
  %2 = alloca %"struct.std::__1::pair", align 8
  %3 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 3
  %6 = load i64, i64* %5, align 8
  tail call void @_ZN4absl18container_internal37ConvertDeletedToEmptyAndFullToDeletedEPam(i8* %4, i64 %6) #14
  %7 = bitcast %"struct.std::__1::pair"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %7)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 -86, i64 40, i1 false)
  %8 = load i64, i64* %5, align 8
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %13, label %10

10:                                               ; preds = %1
  %11 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 1
  %12 = load i64, i64* bitcast (i8** @_ZN4absl13hash_internal15MixingHashState5kSeedE to i64*), align 8
  br label %21

13:                                               ; preds = %137, %1
  %14 = phi i64 [ 0, %1 ], [ %139, %137 ]
  %15 = lshr i64 %14, 3
  %16 = sub i64 %14, %15
  %17 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 2
  %18 = load i64, i64* %17, align 8
  %19 = sub i64 %16, %18
  %20 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  store i64 %19, i64* %20, align 8
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %7)
  ret void

21:                                               ; preds = %10, %137
  %22 = phi i64 [ 0, %10 ], [ %139, %137 ]
  %23 = load i8*, i8** %3, align 8
  %24 = getelementptr inbounds i8, i8* %23, i64 %22
  %25 = load i8, i8* %24, align 1
  %26 = icmp eq i8 %25, -2
  br i1 %26, label %27, label %137

27:                                               ; preds = %21
  %28 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %11, align 8
  %29 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %28, i64 %22, i32 0, i32 0, i32 0, i32 0
  %30 = load i8*, i8** %29, align 8
  %31 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %28, i64 %22, i32 0, i32 0, i32 0, i32 1
  %32 = load i64, i64* %31, align 8
  %33 = tail call i64 @_ZN4absl13hash_internal15MixingHashState18combine_contiguousES1_PKhm(i64 %12, i8* %30, i64 %32) #14
  %34 = add i64 %33, %32
  %35 = zext i64 %34 to i128
  %36 = mul nuw i128 %35, 11376068507788127593
  %37 = lshr i128 %36, 64
  %38 = xor i128 %37, %36
  %39 = trunc i128 %38 to i64
  %40 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %28, i64 %22, i32 0, i32 0, i32 1, i32 0
  %41 = load i8*, i8** %40, align 8
  %42 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %28, i64 %22, i32 0, i32 0, i32 1, i32 1
  %43 = load i64, i64* %42, align 8
  %44 = tail call i64 @_ZN4absl13hash_internal15MixingHashState18combine_contiguousES1_PKhm(i64 %39, i8* %41, i64 %43) #14
  %45 = add i64 %44, %43
  %46 = zext i64 %45 to i128
  %47 = mul nuw i128 %46, 11376068507788127593
  %48 = lshr i128 %47, 64
  %49 = xor i128 %48, %47
  %50 = trunc i128 %49 to i64
  %51 = load i8*, i8** %3, align 8
  %52 = load i64, i64* %5, align 8
  %53 = lshr i64 %50, 7
  %54 = ptrtoint i8* %51 to i64
  %55 = lshr i64 %54, 12
  %56 = xor i64 %53, %55
  %57 = and i64 %56, %52
  %58 = getelementptr inbounds i8, i8* %51, i64 %57
  %59 = bitcast i8* %58 to <16 x i8>*
  %60 = load <16 x i8>, <16 x i8>* %59, align 1
  %61 = icmp slt <16 x i8> %60, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %62 = bitcast <16 x i1> %61 to i16
  %63 = icmp eq i16 %62, 0
  br i1 %63, label %64, label %76

64:                                               ; preds = %27, %64
  %65 = phi i64 [ %69, %64 ], [ %57, %27 ]
  %66 = phi i64 [ %67, %64 ], [ 0, %27 ]
  %67 = add i64 %66, 16
  %68 = add i64 %67, %65
  %69 = and i64 %68, %52
  %70 = getelementptr inbounds i8, i8* %51, i64 %69
  %71 = bitcast i8* %70 to <16 x i8>*
  %72 = load <16 x i8>, <16 x i8>* %71, align 1
  %73 = icmp slt <16 x i8> %72, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %74 = bitcast <16 x i1> %73 to i16
  %75 = icmp eq i16 %74, 0
  br i1 %75, label %64, label %76

76:                                               ; preds = %64, %27
  %77 = phi i64 [ %57, %27 ], [ %69, %64 ]
  %78 = phi i16 [ %62, %27 ], [ %74, %64 ]
  %79 = zext i16 %78 to i32
  %80 = tail call i32 @llvm.cttz.i32(i32 %79, i1 false) #14, !range !39
  %81 = zext i32 %80 to i64
  %82 = add i64 %77, %81
  %83 = and i64 %82, %52
  %84 = sub i64 %83, %57
  %85 = sub i64 %22, %57
  %86 = xor i64 %84, %85
  %87 = and i64 %86, %52
  %88 = icmp ult i64 %87, 16
  br i1 %88, label %89, label %100, !prof !2

89:                                               ; preds = %76
  %90 = trunc i128 %49 to i8
  %91 = and i8 %90, 127
  %92 = getelementptr inbounds i8, i8* %51, i64 %22
  store i8 %91, i8* %92, align 1
  %93 = load i8*, i8** %3, align 8
  %94 = add i64 %22, -15
  %95 = load i64, i64* %5, align 8
  %96 = and i64 %95, %94
  %97 = and i64 %95, 15
  %98 = add i64 %96, %97
  %99 = getelementptr inbounds i8, i8* %93, i64 %98
  store i8 %91, i8* %99, align 1
  br label %137

100:                                              ; preds = %76
  %101 = getelementptr inbounds i8, i8* %51, i64 %83
  %102 = load i8, i8* %101, align 1
  %103 = icmp eq i8 %102, -128
  %104 = trunc i128 %49 to i8
  %105 = and i8 %104, 127
  store i8 %105, i8* %101, align 1
  %106 = load i8*, i8** %3, align 8
  %107 = add i64 %83, -15
  %108 = load i64, i64* %5, align 8
  %109 = and i64 %108, %107
  %110 = and i64 %108, 15
  %111 = add i64 %109, %110
  %112 = getelementptr inbounds i8, i8* %106, i64 %111
  store i8 %105, i8* %112, align 1
  %113 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %11, align 8
  br i1 %103, label %114, label %128

114:                                              ; preds = %100
  %115 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %113, i64 %83
  %116 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %113, i64 %22
  %117 = bitcast %"union.absl::container_internal::map_slot_type"* %115 to i8*
  %118 = bitcast %"union.absl::container_internal::map_slot_type"* %116 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %117, i8* align 8 %118, i64 40, i1 false) #14
  %119 = load i8*, i8** %3, align 8
  %120 = getelementptr inbounds i8, i8* %119, i64 %22
  store i8 -128, i8* %120, align 1
  %121 = load i8*, i8** %3, align 8
  %122 = add i64 %22, -15
  %123 = load i64, i64* %5, align 8
  %124 = and i64 %123, %122
  %125 = and i64 %123, 15
  %126 = add i64 %124, %125
  %127 = getelementptr inbounds i8, i8* %121, i64 %126
  store i8 -128, i8* %127, align 1
  br label %137

128:                                              ; preds = %100
  %129 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %113, i64 %22
  %130 = bitcast %"union.absl::container_internal::map_slot_type"* %129 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %7, i8* align 8 %130, i64 40, i1 false)
  %131 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %113, i64 %83
  %132 = bitcast %"union.absl::container_internal::map_slot_type"* %131 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %130, i8* align 8 %132, i64 40, i1 false) #14
  %133 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %11, align 8
  %134 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %133, i64 %83
  %135 = bitcast %"union.absl::container_internal::map_slot_type"* %134 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %135, i8* nonnull align 8 %7, i64 40, i1 false)
  %136 = add i64 %22, -1
  br label %137

137:                                              ; preds = %89, %128, %114, %21
  %138 = phi i64 [ %22, %21 ], [ %22, %89 ], [ %22, %114 ], [ %136, %128 ]
  %139 = add i64 %138, 1
  %140 = load i64, i64* %5, align 8
  %141 = icmp eq i64 %139, %140
  br i1 %141, label %13, label %21
}

declare void @_ZN4absl18container_internal37ConvertDeletedToEmptyAndFullToDeletedEPam(i8*, i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i64, i8 } @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS8_4pairIKS3_mEEEEE22find_or_prepare_insertIS3_EENSA_ImbEERKT_(%"class.absl::container_internal::raw_hash_set.15"*, %"class.absl::string_view"* dereferenceable(16)) local_unnamed_addr #12 comdat align 2 {
  %3 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %1, i64 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %1, i64 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = load i64, i64* bitcast (i8** @_ZN4absl13hash_internal15MixingHashState5kSeedE to i64*), align 8
  %8 = tail call i64 @_ZN4absl13hash_internal15MixingHashState18combine_contiguousES1_PKhm(i64 %7, i8* %4, i64 %6) #14
  %9 = add i64 %8, %6
  %10 = zext i64 %9 to i128
  %11 = mul nuw i128 %10, 11376068507788127593
  %12 = lshr i128 %11, 64
  %13 = xor i128 %12, %11
  %14 = trunc i128 %13 to i64
  %15 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.15", %"class.absl::container_internal::raw_hash_set.15"* %0, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  %17 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.15", %"class.absl::container_internal::raw_hash_set.15"* %0, i64 0, i32 3
  %18 = load i64, i64* %17, align 8
  %19 = lshr i64 %14, 7
  %20 = ptrtoint i8* %16 to i64
  %21 = lshr i64 %20, 12
  %22 = xor i64 %19, %21
  %23 = trunc i128 %13 to i8
  %24 = and i8 %23, 127
  %25 = insertelement <16 x i8> undef, i8 %24, i32 0
  %26 = shufflevector <16 x i8> %25, <16 x i8> undef, <16 x i32> zeroinitializer
  %27 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.15", %"class.absl::container_internal::raw_hash_set.15"* %0, i64 0, i32 1
  %28 = load i8*, i8** %3, align 8
  %29 = load i64, i64* %5, align 8
  %30 = icmp eq i64 %29, 0
  br label %31

31:                                               ; preds = %67, %2
  %32 = phi i64 [ %22, %2 ], [ %69, %67 ]
  %33 = phi i64 [ 0, %2 ], [ %68, %67 ]
  %34 = and i64 %32, %18
  %35 = getelementptr inbounds i8, i8* %16, i64 %34
  %36 = bitcast i8* %35 to <16 x i8>*
  %37 = load <16 x i8>, <16 x i8>* %36, align 1
  %38 = icmp eq <16 x i8> %26, %37
  %39 = bitcast <16 x i1> %38 to i16
  %40 = icmp eq i16 %39, 0
  br i1 %40, label %63, label %41

41:                                               ; preds = %31
  %42 = zext i16 %39 to i32
  %43 = load %"union.absl::container_internal::map_slot_type.16"*, %"union.absl::container_internal::map_slot_type.16"** %27, align 8
  br label %44

44:                                               ; preds = %41, %59
  %45 = phi i32 [ %42, %41 ], [ %61, %59 ]
  %46 = tail call i32 @llvm.cttz.i32(i32 %45, i1 false) #14, !range !39
  %47 = zext i32 %46 to i64
  %48 = add i64 %34, %47
  %49 = and i64 %48, %18
  %50 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.16", %"union.absl::container_internal::map_slot_type.16"* %43, i64 %49, i32 0, i32 0, i32 0
  %51 = load i8*, i8** %50, align 8
  %52 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.16", %"union.absl::container_internal::map_slot_type.16"* %43, i64 %49, i32 0, i32 0, i32 1
  %53 = load i64, i64* %52, align 8
  %54 = icmp eq i64 %53, %29
  br i1 %54, label %55, label %59, !prof !40

55:                                               ; preds = %44
  br i1 %30, label %72, label %56

56:                                               ; preds = %55
  %57 = tail call i32 @bcmp(i8* %51, i8* %28, i64 %29) #14
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %72, label %59, !prof !2

59:                                               ; preds = %44, %56
  %60 = add i32 %45, -1
  %61 = and i32 %60, %45
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %63, label %44

63:                                               ; preds = %59, %31
  %64 = icmp eq <16 x i8> %37, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %65 = bitcast <16 x i1> %64 to i16
  %66 = icmp eq i16 %65, 0
  br i1 %66, label %67, label %70, !prof !41

67:                                               ; preds = %63
  %68 = add i64 %33, 16
  %69 = add i64 %68, %34
  br label %31

70:                                               ; preds = %63
  %71 = tail call i64 @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS8_4pairIKS3_mEEEEE14prepare_insertEm(%"class.absl::container_internal::raw_hash_set.15"* %0, i64 %14)
  br label %72

72:                                               ; preds = %56, %55, %70
  %73 = phi i64 [ %71, %70 ], [ %49, %55 ], [ %49, %56 ]
  %74 = phi i8 [ 1, %70 ], [ 0, %55 ], [ 0, %56 ]
  %75 = insertvalue { i64, i8 } undef, i64 %73, 0
  %76 = insertvalue { i64, i8 } %75, i8 %74, 1
  ret { i64, i8 } %76
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS8_4pairIKS3_mEEEEE14prepare_insertEm(%"class.absl::container_internal::raw_hash_set.15"*, i64) local_unnamed_addr #13 comdat align 2 {
  %3 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.15", %"class.absl::container_internal::raw_hash_set.15"* %0, i64 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.15", %"class.absl::container_internal::raw_hash_set.15"* %0, i64 0, i32 3
  %6 = load i64, i64* %5, align 8
  %7 = lshr i64 %1, 7
  %8 = ptrtoint i8* %4 to i64
  %9 = lshr i64 %8, 12
  %10 = xor i64 %9, %7
  %11 = and i64 %10, %6
  %12 = getelementptr inbounds i8, i8* %4, i64 %11
  %13 = bitcast i8* %12 to <16 x i8>*
  %14 = load <16 x i8>, <16 x i8>* %13, align 1
  %15 = icmp slt <16 x i8> %14, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %16 = bitcast <16 x i1> %15 to i16
  %17 = icmp eq i16 %16, 0
  br i1 %17, label %18, label %30

18:                                               ; preds = %2, %18
  %19 = phi i64 [ %23, %18 ], [ %11, %2 ]
  %20 = phi i64 [ %21, %18 ], [ 0, %2 ]
  %21 = add i64 %20, 16
  %22 = add i64 %21, %19
  %23 = and i64 %22, %6
  %24 = getelementptr inbounds i8, i8* %4, i64 %23
  %25 = bitcast i8* %24 to <16 x i8>*
  %26 = load <16 x i8>, <16 x i8>* %25, align 1
  %27 = icmp slt <16 x i8> %26, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %28 = bitcast <16 x i1> %27 to i16
  %29 = icmp eq i16 %28, 0
  br i1 %29, label %18, label %30

30:                                               ; preds = %18, %2
  %31 = phi i64 [ %11, %2 ], [ %23, %18 ]
  %32 = phi i16 [ %16, %2 ], [ %28, %18 ]
  %33 = zext i16 %32 to i32
  %34 = tail call i32 @llvm.cttz.i32(i32 %33, i1 false) #14, !range !39
  %35 = zext i32 %34 to i64
  %36 = add i64 %31, %35
  %37 = and i64 %36, %6
  %38 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.15", %"class.absl::container_internal::raw_hash_set.15"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %39 = load i64, i64* %38, align 8
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %41, label %93

41:                                               ; preds = %30
  %42 = getelementptr inbounds i8, i8* %4, i64 %37
  %43 = load i8, i8* %42, align 1
  %44 = icmp eq i8 %43, -2
  br i1 %44, label %93, label %45, !prof !2

45:                                               ; preds = %41
  %46 = icmp eq i64 %6, 0
  br i1 %46, label %47, label %48

47:                                               ; preds = %45
  tail call void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS8_4pairIKS3_mEEEEE6resizeEm(%"class.absl::container_internal::raw_hash_set.15"* %0, i64 1) #14
  br label %59

48:                                               ; preds = %45
  %49 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.15", %"class.absl::container_internal::raw_hash_set.15"* %0, i64 0, i32 2
  %50 = load i64, i64* %49, align 8
  %51 = lshr i64 %6, 3
  %52 = sub i64 %6, %51
  %53 = lshr i64 %52, 1
  %54 = icmp ugt i64 %50, %53
  br i1 %54, label %56, label %55

55:                                               ; preds = %48
  tail call void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS8_4pairIKS3_mEEEEE27drop_deletes_without_resizeEv(%"class.absl::container_internal::raw_hash_set.15"* %0) #14
  br label %59

56:                                               ; preds = %48
  %57 = shl i64 %6, 1
  %58 = or i64 %57, 1
  tail call void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS8_4pairIKS3_mEEEEE6resizeEm(%"class.absl::container_internal::raw_hash_set.15"* %0, i64 %58) #14
  br label %59

59:                                               ; preds = %47, %55, %56
  %60 = load i8*, i8** %3, align 8
  %61 = load i64, i64* %5, align 8
  %62 = ptrtoint i8* %60 to i64
  %63 = lshr i64 %62, 12
  %64 = xor i64 %63, %7
  %65 = and i64 %64, %61
  %66 = getelementptr inbounds i8, i8* %60, i64 %65
  %67 = bitcast i8* %66 to <16 x i8>*
  %68 = load <16 x i8>, <16 x i8>* %67, align 1
  %69 = icmp slt <16 x i8> %68, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %70 = bitcast <16 x i1> %69 to i16
  %71 = icmp eq i16 %70, 0
  br i1 %71, label %72, label %84

72:                                               ; preds = %59, %72
  %73 = phi i64 [ %77, %72 ], [ %65, %59 ]
  %74 = phi i64 [ %75, %72 ], [ 0, %59 ]
  %75 = add i64 %74, 16
  %76 = add i64 %75, %73
  %77 = and i64 %76, %61
  %78 = getelementptr inbounds i8, i8* %60, i64 %77
  %79 = bitcast i8* %78 to <16 x i8>*
  %80 = load <16 x i8>, <16 x i8>* %79, align 1
  %81 = icmp slt <16 x i8> %80, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %82 = bitcast <16 x i1> %81 to i16
  %83 = icmp eq i16 %82, 0
  br i1 %83, label %72, label %84

84:                                               ; preds = %72, %59
  %85 = phi i64 [ %65, %59 ], [ %77, %72 ]
  %86 = phi i16 [ %70, %59 ], [ %82, %72 ]
  %87 = zext i16 %86 to i32
  %88 = tail call i32 @llvm.cttz.i32(i32 %87, i1 false) #14, !range !39
  %89 = zext i32 %88 to i64
  %90 = add i64 %85, %89
  %91 = and i64 %90, %61
  %92 = load i64, i64* %38, align 8
  br label %93

93:                                               ; preds = %41, %30, %84
  %94 = phi i64 [ %92, %84 ], [ 0, %41 ], [ %39, %30 ]
  %95 = phi i8* [ %60, %84 ], [ %4, %41 ], [ %4, %30 ]
  %96 = phi i64 [ %91, %84 ], [ %37, %41 ], [ %37, %30 ]
  %97 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.15", %"class.absl::container_internal::raw_hash_set.15"* %0, i64 0, i32 2
  %98 = load i64, i64* %97, align 8
  %99 = add i64 %98, 1
  store i64 %99, i64* %97, align 8
  %100 = getelementptr inbounds i8, i8* %95, i64 %96
  %101 = load i8, i8* %100, align 1
  %102 = icmp eq i8 %101, -128
  %103 = zext i1 %102 to i64
  %104 = sub i64 %94, %103
  store i64 %104, i64* %38, align 8
  %105 = trunc i64 %1 to i8
  %106 = and i8 %105, 127
  store i8 %106, i8* %100, align 1
  %107 = load i8*, i8** %3, align 8
  %108 = add i64 %96, -15
  %109 = load i64, i64* %5, align 8
  %110 = and i64 %109, %108
  %111 = and i64 %109, 15
  %112 = add i64 %110, %111
  %113 = getelementptr inbounds i8, i8* %107, i64 %112
  store i8 %106, i8* %113, align 1
  ret i64 %96
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS8_4pairIKS3_mEEEEE6resizeEm(%"class.absl::container_internal::raw_hash_set.15"*, i64) local_unnamed_addr #12 comdat align 2 {
  %3 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.15", %"class.absl::container_internal::raw_hash_set.15"* %0, i64 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.15", %"class.absl::container_internal::raw_hash_set.15"* %0, i64 0, i32 1
  %6 = load %"union.absl::container_internal::map_slot_type.16"*, %"union.absl::container_internal::map_slot_type.16"** %5, align 8
  %7 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.15", %"class.absl::container_internal::raw_hash_set.15"* %0, i64 0, i32 3
  %8 = load i64, i64* %7, align 8
  store i64 %1, i64* %7, align 8
  %9 = add i64 %1, 16
  %10 = add i64 %1, 23
  %11 = and i64 %10, -8
  %12 = mul i64 %1, 24
  %13 = add i64 %11, %12
  %14 = tail call i8* @_Znwm(i64 %13) #17
  store i8* %14, i8** %3, align 8
  %15 = getelementptr inbounds i8, i8* %14, i64 %11
  %16 = bitcast %"union.absl::container_internal::map_slot_type.16"** %5 to i8**
  store i8* %15, i8** %16, align 8
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %14, i8 -128, i64 %9, i1 false) #14
  %17 = getelementptr inbounds i8, i8* %14, i64 %1
  store i8 -1, i8* %17, align 1
  %18 = lshr i64 %1, 3
  %19 = sub i64 %1, %18
  %20 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.15", %"class.absl::container_internal::raw_hash_set.15"* %0, i64 0, i32 2
  %21 = load i64, i64* %20, align 8
  %22 = sub i64 %19, %21
  %23 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.15", %"class.absl::container_internal::raw_hash_set.15"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  store i64 %22, i64* %23, align 8
  %24 = icmp eq i64 %8, 0
  br i1 %24, label %97, label %25

25:                                               ; preds = %2
  %26 = load i64, i64* bitcast (i8** @_ZN4absl13hash_internal15MixingHashState5kSeedE to i64*), align 8
  br label %28

27:                                               ; preds = %93
  br i1 %24, label %97, label %96

28:                                               ; preds = %25, %93
  %29 = phi i64 [ 0, %25 ], [ %94, %93 ]
  %30 = getelementptr inbounds i8, i8* %4, i64 %29
  %31 = load i8, i8* %30, align 1
  %32 = icmp sgt i8 %31, -1
  br i1 %32, label %33, label %93

33:                                               ; preds = %28
  %34 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.16", %"union.absl::container_internal::map_slot_type.16"* %6, i64 %29
  %35 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.16", %"union.absl::container_internal::map_slot_type.16"* %34, i64 0, i32 0, i32 0, i32 0
  %36 = load i8*, i8** %35, align 8
  %37 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.16", %"union.absl::container_internal::map_slot_type.16"* %6, i64 %29, i32 0, i32 0, i32 1
  %38 = load i64, i64* %37, align 8
  %39 = tail call i64 @_ZN4absl13hash_internal15MixingHashState18combine_contiguousES1_PKhm(i64 %26, i8* %36, i64 %38) #14
  %40 = add i64 %39, %38
  %41 = zext i64 %40 to i128
  %42 = mul nuw i128 %41, 11376068507788127593
  %43 = lshr i128 %42, 64
  %44 = xor i128 %43, %42
  %45 = trunc i128 %44 to i64
  %46 = load i8*, i8** %3, align 8
  %47 = load i64, i64* %7, align 8
  %48 = lshr i64 %45, 7
  %49 = ptrtoint i8* %46 to i64
  %50 = lshr i64 %49, 12
  %51 = xor i64 %48, %50
  %52 = and i64 %51, %47
  %53 = getelementptr inbounds i8, i8* %46, i64 %52
  %54 = bitcast i8* %53 to <16 x i8>*
  %55 = load <16 x i8>, <16 x i8>* %54, align 1
  %56 = icmp slt <16 x i8> %55, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %57 = bitcast <16 x i1> %56 to i16
  %58 = icmp eq i16 %57, 0
  br i1 %58, label %59, label %71

59:                                               ; preds = %33, %59
  %60 = phi i64 [ %64, %59 ], [ %52, %33 ]
  %61 = phi i64 [ %62, %59 ], [ 0, %33 ]
  %62 = add i64 %61, 16
  %63 = add i64 %62, %60
  %64 = and i64 %63, %47
  %65 = getelementptr inbounds i8, i8* %46, i64 %64
  %66 = bitcast i8* %65 to <16 x i8>*
  %67 = load <16 x i8>, <16 x i8>* %66, align 1
  %68 = icmp slt <16 x i8> %67, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %69 = bitcast <16 x i1> %68 to i16
  %70 = icmp eq i16 %69, 0
  br i1 %70, label %59, label %71

71:                                               ; preds = %59, %33
  %72 = phi i64 [ %52, %33 ], [ %64, %59 ]
  %73 = phi i16 [ %57, %33 ], [ %69, %59 ]
  %74 = zext i16 %73 to i32
  %75 = tail call i32 @llvm.cttz.i32(i32 %74, i1 false) #14, !range !39
  %76 = zext i32 %75 to i64
  %77 = add i64 %72, %76
  %78 = and i64 %77, %47
  %79 = trunc i128 %44 to i8
  %80 = and i8 %79, 127
  %81 = getelementptr inbounds i8, i8* %46, i64 %78
  store i8 %80, i8* %81, align 1
  %82 = load i8*, i8** %3, align 8
  %83 = add i64 %78, -15
  %84 = load i64, i64* %7, align 8
  %85 = and i64 %83, %84
  %86 = and i64 %84, 15
  %87 = add i64 %85, %86
  %88 = getelementptr inbounds i8, i8* %82, i64 %87
  store i8 %80, i8* %88, align 1
  %89 = load %"union.absl::container_internal::map_slot_type.16"*, %"union.absl::container_internal::map_slot_type.16"** %5, align 8
  %90 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.16", %"union.absl::container_internal::map_slot_type.16"* %89, i64 %78
  %91 = bitcast %"union.absl::container_internal::map_slot_type.16"* %90 to i8*
  %92 = bitcast %"union.absl::container_internal::map_slot_type.16"* %34 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %91, i8* align 8 %92, i64 24, i1 false) #14
  br label %93

93:                                               ; preds = %28, %71
  %94 = add nuw i64 %29, 1
  %95 = icmp eq i64 %94, %8
  br i1 %95, label %27, label %28

96:                                               ; preds = %27
  tail call void @_ZdlPv(i8* %4) #17
  br label %97

97:                                               ; preds = %2, %27, %96
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS8_4pairIKS3_mEEEEE27drop_deletes_without_resizeEv(%"class.absl::container_internal::raw_hash_set.15"*) local_unnamed_addr #13 comdat align 2 {
  %2 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.15", %"class.absl::container_internal::raw_hash_set.15"* %0, i64 0, i32 0
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.15", %"class.absl::container_internal::raw_hash_set.15"* %0, i64 0, i32 3
  %5 = load i64, i64* %4, align 8
  tail call void @_ZN4absl18container_internal37ConvertDeletedToEmptyAndFullToDeletedEPam(i8* %3, i64 %5) #14
  %6 = load i64, i64* %4, align 8
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %11, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.15", %"class.absl::container_internal::raw_hash_set.15"* %0, i64 0, i32 1
  %10 = load i64, i64* bitcast (i8** @_ZN4absl13hash_internal15MixingHashState5kSeedE to i64*), align 8
  br label %19

11:                                               ; preds = %153, %1
  %12 = phi i64 [ 0, %1 ], [ %155, %153 ]
  %13 = lshr i64 %12, 3
  %14 = sub i64 %12, %13
  %15 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.15", %"class.absl::container_internal::raw_hash_set.15"* %0, i64 0, i32 2
  %16 = load i64, i64* %15, align 8
  %17 = sub i64 %14, %16
  %18 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.15", %"class.absl::container_internal::raw_hash_set.15"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  store i64 %17, i64* %18, align 8
  ret void

19:                                               ; preds = %8, %153
  %20 = phi i64 [ 0, %8 ], [ %155, %153 ]
  %21 = load i8*, i8** %2, align 8
  %22 = getelementptr inbounds i8, i8* %21, i64 %20
  %23 = load i8, i8* %22, align 1
  %24 = icmp eq i8 %23, -2
  br i1 %24, label %25, label %153

25:                                               ; preds = %19
  %26 = load %"union.absl::container_internal::map_slot_type.16"*, %"union.absl::container_internal::map_slot_type.16"** %9, align 8
  %27 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.16", %"union.absl::container_internal::map_slot_type.16"* %26, i64 %20, i32 0, i32 0, i32 0
  %28 = load i8*, i8** %27, align 8
  %29 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.16", %"union.absl::container_internal::map_slot_type.16"* %26, i64 %20, i32 0, i32 0, i32 1
  %30 = load i64, i64* %29, align 8
  %31 = tail call i64 @_ZN4absl13hash_internal15MixingHashState18combine_contiguousES1_PKhm(i64 %10, i8* %28, i64 %30) #14
  %32 = add i64 %31, %30
  %33 = zext i64 %32 to i128
  %34 = mul nuw i128 %33, 11376068507788127593
  %35 = lshr i128 %34, 64
  %36 = xor i128 %35, %34
  %37 = trunc i128 %36 to i64
  %38 = load i8*, i8** %2, align 8
  %39 = load i64, i64* %4, align 8
  %40 = lshr i64 %37, 7
  %41 = ptrtoint i8* %38 to i64
  %42 = lshr i64 %41, 12
  %43 = xor i64 %40, %42
  %44 = and i64 %43, %39
  %45 = getelementptr inbounds i8, i8* %38, i64 %44
  %46 = bitcast i8* %45 to <16 x i8>*
  %47 = load <16 x i8>, <16 x i8>* %46, align 1
  %48 = icmp slt <16 x i8> %47, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %49 = bitcast <16 x i1> %48 to i16
  %50 = icmp eq i16 %49, 0
  br i1 %50, label %51, label %63

51:                                               ; preds = %25, %51
  %52 = phi i64 [ %56, %51 ], [ %44, %25 ]
  %53 = phi i64 [ %54, %51 ], [ 0, %25 ]
  %54 = add i64 %53, 16
  %55 = add i64 %54, %52
  %56 = and i64 %55, %39
  %57 = getelementptr inbounds i8, i8* %38, i64 %56
  %58 = bitcast i8* %57 to <16 x i8>*
  %59 = load <16 x i8>, <16 x i8>* %58, align 1
  %60 = icmp slt <16 x i8> %59, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %61 = bitcast <16 x i1> %60 to i16
  %62 = icmp eq i16 %61, 0
  br i1 %62, label %51, label %63

63:                                               ; preds = %51, %25
  %64 = phi i64 [ %44, %25 ], [ %56, %51 ]
  %65 = phi i16 [ %49, %25 ], [ %61, %51 ]
  %66 = zext i16 %65 to i32
  %67 = tail call i32 @llvm.cttz.i32(i32 %66, i1 false) #14, !range !39
  %68 = zext i32 %67 to i64
  %69 = add i64 %64, %68
  %70 = and i64 %69, %39
  %71 = sub i64 %70, %44
  %72 = sub i64 %20, %44
  %73 = xor i64 %71, %72
  %74 = and i64 %73, %39
  %75 = icmp ult i64 %74, 16
  br i1 %75, label %76, label %87, !prof !2

76:                                               ; preds = %63
  %77 = trunc i128 %36 to i8
  %78 = and i8 %77, 127
  %79 = getelementptr inbounds i8, i8* %38, i64 %20
  store i8 %78, i8* %79, align 1
  %80 = load i8*, i8** %2, align 8
  %81 = add i64 %20, -15
  %82 = load i64, i64* %4, align 8
  %83 = and i64 %82, %81
  %84 = and i64 %82, 15
  %85 = add i64 %83, %84
  %86 = getelementptr inbounds i8, i8* %80, i64 %85
  store i8 %78, i8* %86, align 1
  br label %153

87:                                               ; preds = %63
  %88 = getelementptr inbounds i8, i8* %38, i64 %70
  %89 = load i8, i8* %88, align 1
  %90 = icmp eq i8 %89, -128
  %91 = trunc i128 %36 to i8
  %92 = and i8 %91, 127
  store i8 %92, i8* %88, align 1
  %93 = load i8*, i8** %2, align 8
  %94 = add i64 %70, -15
  %95 = load i64, i64* %4, align 8
  %96 = and i64 %95, %94
  %97 = and i64 %95, 15
  %98 = add i64 %96, %97
  %99 = getelementptr inbounds i8, i8* %93, i64 %98
  store i8 %92, i8* %99, align 1
  %100 = load %"union.absl::container_internal::map_slot_type.16"*, %"union.absl::container_internal::map_slot_type.16"** %9, align 8
  br i1 %90, label %101, label %115

101:                                              ; preds = %87
  %102 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.16", %"union.absl::container_internal::map_slot_type.16"* %100, i64 %70
  %103 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.16", %"union.absl::container_internal::map_slot_type.16"* %100, i64 %20
  %104 = bitcast %"union.absl::container_internal::map_slot_type.16"* %102 to i8*
  %105 = bitcast %"union.absl::container_internal::map_slot_type.16"* %103 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %104, i8* align 8 %105, i64 24, i1 false) #14
  %106 = load i8*, i8** %2, align 8
  %107 = getelementptr inbounds i8, i8* %106, i64 %20
  store i8 -128, i8* %107, align 1
  %108 = load i8*, i8** %2, align 8
  %109 = add i64 %20, -15
  %110 = load i64, i64* %4, align 8
  %111 = and i64 %110, %109
  %112 = and i64 %110, 15
  %113 = add i64 %111, %112
  %114 = getelementptr inbounds i8, i8* %108, i64 %113
  store i8 -128, i8* %114, align 1
  br label %153

115:                                              ; preds = %87
  %116 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.16", %"union.absl::container_internal::map_slot_type.16"* %100, i64 %20
  %117 = bitcast %"union.absl::container_internal::map_slot_type.16"* %116 to i8*
  %118 = bitcast %"union.absl::container_internal::map_slot_type.16"* %116 to <16 x i8>*
  %119 = load <16 x i8>, <16 x i8>* %118, align 8
  %120 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.16", %"union.absl::container_internal::map_slot_type.16"* %100, i64 %20, i32 0, i32 1
  %121 = bitcast i64* %120 to i8*
  %122 = load i8, i8* %121, align 8
  %123 = getelementptr inbounds i8, i8* %117, i64 17
  %124 = load i8, i8* %123, align 1
  %125 = getelementptr inbounds i8, i8* %117, i64 18
  %126 = load i8, i8* %125, align 2
  %127 = getelementptr inbounds i8, i8* %117, i64 19
  %128 = load i8, i8* %127, align 1
  %129 = getelementptr inbounds i8, i8* %117, i64 20
  %130 = load i8, i8* %129, align 4
  %131 = getelementptr inbounds i8, i8* %117, i64 21
  %132 = load i8, i8* %131, align 1
  %133 = getelementptr inbounds i8, i8* %117, i64 22
  %134 = load i8, i8* %133, align 2
  %135 = getelementptr inbounds i8, i8* %117, i64 23
  %136 = load i8, i8* %135, align 1
  %137 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.16", %"union.absl::container_internal::map_slot_type.16"* %100, i64 %70
  %138 = bitcast %"union.absl::container_internal::map_slot_type.16"* %137 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %117, i8* align 8 %138, i64 24, i1 false) #14
  %139 = load %"union.absl::container_internal::map_slot_type.16"*, %"union.absl::container_internal::map_slot_type.16"** %9, align 8
  %140 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.16", %"union.absl::container_internal::map_slot_type.16"* %139, i64 %70
  %141 = bitcast %"union.absl::container_internal::map_slot_type.16"* %140 to i8*
  %142 = bitcast %"union.absl::container_internal::map_slot_type.16"* %140 to <16 x i8>*
  store <16 x i8> %119, <16 x i8>* %142, align 8
  %143 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.16", %"union.absl::container_internal::map_slot_type.16"* %139, i64 %70, i32 0, i32 1
  %144 = bitcast i64* %143 to i8*
  store i8 %122, i8* %144, align 8
  %145 = getelementptr inbounds i8, i8* %141, i64 17
  store i8 %124, i8* %145, align 1
  %146 = getelementptr inbounds i8, i8* %141, i64 18
  store i8 %126, i8* %146, align 2
  %147 = getelementptr inbounds i8, i8* %141, i64 19
  store i8 %128, i8* %147, align 1
  %148 = getelementptr inbounds i8, i8* %141, i64 20
  store i8 %130, i8* %148, align 4
  %149 = getelementptr inbounds i8, i8* %141, i64 21
  store i8 %132, i8* %149, align 1
  %150 = getelementptr inbounds i8, i8* %141, i64 22
  store i8 %134, i8* %150, align 2
  %151 = getelementptr inbounds i8, i8* %141, i64 23
  store i8 %136, i8* %151, align 1
  %152 = add i64 %20, -1
  br label %153

153:                                              ; preds = %76, %115, %101, %19
  %154 = phi i64 [ %20, %19 ], [ %20, %76 ], [ %20, %101 ], [ %152, %115 ]
  %155 = add i64 %154, 1
  %156 = load i64, i64* %4, align 8
  %157 = icmp eq i64 %155, %156
  br i1 %157, label %11, label %19
}

; Function Attrs: nofree nounwind readonly
declare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #16

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { cold noreturn nounwind }
attributes #8 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = { nounwind }
attributes #15 = { nounwind readnone speculatable }
attributes #16 = { nofree nounwind readonly }
attributes #17 = { builtin nounwind }
attributes #18 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = !{!4}
!4 = distinct !{!4, !5, !"_ZNSt3__19make_pairIN4spdy16HpackLookupEntryERiEENS_4pairINS_18__unwrap_ref_decayIT_E4typeENS5_IT0_E4typeEEEOS6_OS9_: argument 0"}
!5 = distinct !{!5, !"_ZNSt3__19make_pairIN4spdy16HpackLookupEntryERiEENS_4pairINS_18__unwrap_ref_decayIT_E4typeENS5_IT0_E4typeEEEOS6_OS9_"}
!6 = !{!7, !9, !11, !13, !15, !17, !19}
!7 = distinct !{!7, !8, !"_ZNK4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS4_EENSt3__18equal_toIS4_EENS9_9allocatorINS9_4pairIKS4_mEEEEE19EmplaceDecomposableclIS4_JRKNS9_21piecewise_construct_tENS9_5tupleIJOS4_EEENSN_IJOiEEEEEENSD_INSH_8iteratorEbEERKT_DpOT0_: argument 0"}
!8 = distinct !{!8, !"_ZNK4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS4_EENSt3__18equal_toIS4_EENS9_9allocatorINS9_4pairIKS4_mEEEEE19EmplaceDecomposableclIS4_JRKNS9_21piecewise_construct_tENS9_5tupleIJOS4_EEENSN_IJOiEEEEEENSD_INSH_8iteratorEbEERKT_DpOT0_"}
!9 = distinct !{!9, !10, !"_ZN4absl18container_internal15memory_internal17DecomposePairImplINS0_12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS6_EENSt3__18equal_toIS6_EENSB_9allocatorINSB_4pairIKS6_mEEEEE19EmplaceDecomposableEOS6_NSB_5tupleIJOiEEEEEDTclclsr3stdE7declvalIT_EEclsr3stdE7declvalIRKT0_EEL_ZNSB_L19piecewise_constructEEclsr3stdE7declvalINSM_IJSQ_EEEEEclsr3stdE7declvalIT1_EEEEOSP_NSF_IST_SU_EE: argument 0"}
!10 = distinct !{!10, !"_ZN4absl18container_internal15memory_internal17DecomposePairImplINS0_12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS6_EENSt3__18equal_toIS6_EENSB_9allocatorINSB_4pairIKS6_mEEEEE19EmplaceDecomposableEOS6_NSB_5tupleIJOiEEEEEDTclclsr3stdE7declvalIT_EEclsr3stdE7declvalIRKT0_EEL_ZNSB_L19piecewise_constructEEclsr3stdE7declvalINSM_IJSQ_EEEEEclsr3stdE7declvalIT1_EEEEOSP_NSF_IST_SU_EE"}
!11 = distinct !{!11, !12, !"_ZN4absl18container_internal13DecomposePairINS0_12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS5_EENSt3__18equal_toIS5_EENSA_9allocatorINSA_4pairIKS5_mEEEEE19EmplaceDecomposableEJNSE_IS5_iEEEEEDTclsr15memory_internalE17DecomposePairImplclsr3stdE7forwardIT_Efp_Ecl8PairArgsspclsr3stdE7forwardIT0_Efp0_EEEEOSL_DpOSM_: argument 0"}
!12 = distinct !{!12, !"_ZN4absl18container_internal13DecomposePairINS0_12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS5_EENSt3__18equal_toIS5_EENSA_9allocatorINSA_4pairIKS5_mEEEEE19EmplaceDecomposableEJNSE_IS5_iEEEEEDTclsr15memory_internalE17DecomposePairImplclsr3stdE7forwardIT_Efp_Ecl8PairArgsspclsr3stdE7forwardIT0_Efp0_EEEEOSL_DpOSM_"}
!13 = distinct !{!13, !14, !"_ZN4absl18container_internal17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmE5applyINS0_12raw_hash_setIS4_NS_13hash_internal4HashIS3_EENSt3__18equal_toIS3_EENSA_9allocatorINSA_4pairIKS3_mEEEEE19EmplaceDecomposableEJNSE_IS3_iEEEEEDTclsr4absl18container_internalE13DecomposePairclsr3stdE7declvalIT_EEspclsr3stdE7declvalIT0_EEEEOSL_DpOSM_: argument 0"}
!14 = distinct !{!14, !"_ZN4absl18container_internal17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmE5applyINS0_12raw_hash_setIS4_NS_13hash_internal4HashIS3_EENSt3__18equal_toIS3_EENSA_9allocatorINSA_4pairIKS3_mEEEEE19EmplaceDecomposableEJNSE_IS3_iEEEEEDTclsr4absl18container_internalE13DecomposePairclsr3stdE7declvalIT_EEspclsr3stdE7declvalIT0_EEEEOSL_DpOSM_"}
!15 = distinct !{!15, !16, !"_ZN4absl18container_internal18hash_policy_traitsINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEEvE5applyINS0_12raw_hash_setIS5_NS_13hash_internal4HashIS4_EENSt3__18equal_toIS4_EENSC_9allocatorINSC_4pairIKS4_mEEEEE19EmplaceDecomposableEJNSG_IS4_iEEES5_EEDTclsrT1_5applyclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSO_DpOSP_: argument 0"}
!16 = distinct !{!16, !"_ZN4absl18container_internal18hash_policy_traitsINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEEvE5applyINS0_12raw_hash_setIS5_NS_13hash_internal4HashIS4_EENSt3__18equal_toIS4_EENSC_9allocatorINSC_4pairIKS4_mEEEEE19EmplaceDecomposableEJNSG_IS4_iEEES5_EEDTclsrT1_5applyclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSO_DpOSP_"}
!17 = distinct !{!17, !18, !"_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS4_EENSt3__18equal_toIS4_EENS9_9allocatorINS9_4pairIKS4_mEEEEE7emplaceIJNSD_IS4_iEEELi0EEENSD_INSH_8iteratorEbEEDpOT_: argument 0"}
!18 = distinct !{!18, !"_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS4_EENSt3__18equal_toIS4_EENS9_9allocatorINS9_4pairIKS4_mEEEEE7emplaceIJNSD_IS4_iEEELi0EEENSD_INSH_8iteratorEbEEDpOT_"}
!19 = distinct !{!19, !20, !"_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS4_EENSt3__18equal_toIS4_EENS9_9allocatorINS9_4pairIKS4_mEEEEE6insertINSD_IS4_iEELi0ESJ_Li0ELPSJ_0EEENSD_INSH_8iteratorEbEEOT_: argument 0"}
!20 = distinct !{!20, !"_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS4_EENSt3__18equal_toIS4_EENS9_9allocatorINS9_4pairIKS4_mEEEEE6insertINSD_IS4_iEELi0ESJ_Li0ELPSJ_0EEENSD_INSH_8iteratorEbEEOT_"}
!21 = !{!22}
!22 = distinct !{!22, !23, !"_ZNSt3__19make_pairIN4absl11string_viewERiEENS_4pairINS_18__unwrap_ref_decayIT_E4typeENS5_IT0_E4typeEEEOS6_OS9_: argument 0"}
!23 = distinct !{!23, !"_ZNSt3__19make_pairIN4absl11string_viewERiEENS_4pairINS_18__unwrap_ref_decayIT_E4typeENS5_IT0_E4typeEEEOS6_OS9_"}
!24 = !{!25, !27, !29, !31, !33, !35, !37}
!25 = distinct !{!25, !26, !"_ZNK4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS8_4pairIKS3_mEEEEE19EmplaceDecomposableclIS3_JRKNS8_21piecewise_construct_tENS8_5tupleIJOS3_EEENSK_IJOiEEEEEENSA_INSE_8iteratorEbEERKT_DpOT0_: argument 0"}
!26 = distinct !{!26, !"_ZNK4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS8_4pairIKS3_mEEEEE19EmplaceDecomposableclIS3_JRKNS8_21piecewise_construct_tENS8_5tupleIJOS3_EEENSK_IJOiEEEEEENSA_INSE_8iteratorEbEERKT_DpOT0_"}
!27 = distinct !{!27, !28, !"_ZN4absl18container_internal15memory_internal17DecomposePairImplINS0_12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINSA_4pairIKS5_mEEEEE19EmplaceDecomposableEOS5_NSA_5tupleIJOiEEEEEDTclclsr3stdE7declvalIT_EEclsr3stdE7declvalIRKT0_EEL_ZNSA_L19piecewise_constructEEclsr3stdE7declvalINSJ_IJSN_EEEEEclsr3stdE7declvalIT1_EEEEOSM_NSC_ISQ_SR_EE: argument 0"}
!28 = distinct !{!28, !"_ZN4absl18container_internal15memory_internal17DecomposePairImplINS0_12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINSA_4pairIKS5_mEEEEE19EmplaceDecomposableEOS5_NSA_5tupleIJOiEEEEEDTclclsr3stdE7declvalIT_EEclsr3stdE7declvalIRKT0_EEL_ZNSA_L19piecewise_constructEEclsr3stdE7declvalINSJ_IJSN_EEEEEclsr3stdE7declvalIT1_EEEEOSM_NSC_ISQ_SR_EE"}
!29 = distinct !{!29, !30, !"_ZN4absl18container_internal13DecomposePairINS0_12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS9_4pairIKS4_mEEEEE19EmplaceDecomposableEJNSB_IS4_iEEEEEDTclsr15memory_internalE17DecomposePairImplclsr3stdE7forwardIT_Efp_Ecl8PairArgsspclsr3stdE7forwardIT0_Efp0_EEEEOSI_DpOSJ_: argument 0"}
!30 = distinct !{!30, !"_ZN4absl18container_internal13DecomposePairINS0_12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS9_4pairIKS4_mEEEEE19EmplaceDecomposableEJNSB_IS4_iEEEEEDTclsr15memory_internalE17DecomposePairImplclsr3stdE7forwardIT_Efp_Ecl8PairArgsspclsr3stdE7forwardIT0_Efp0_EEEEOSI_DpOSJ_"}
!31 = distinct !{!31, !32, !"_ZN4absl18container_internal17FlatHashMapPolicyINS_11string_viewEmE5applyINS0_12raw_hash_setIS3_NS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS9_4pairIKS2_mEEEEE19EmplaceDecomposableEJNSB_IS2_iEEEEEDTclsr4absl18container_internalE13DecomposePairclsr3stdE7declvalIT_EEspclsr3stdE7declvalIT0_EEEEOSI_DpOSJ_: argument 0"}
!32 = distinct !{!32, !"_ZN4absl18container_internal17FlatHashMapPolicyINS_11string_viewEmE5applyINS0_12raw_hash_setIS3_NS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS9_4pairIKS2_mEEEEE19EmplaceDecomposableEJNSB_IS2_iEEEEEDTclsr4absl18container_internalE13DecomposePairclsr3stdE7declvalIT_EEspclsr3stdE7declvalIT0_EEEEOSI_DpOSJ_"}
!33 = distinct !{!33, !34, !"_ZN4absl18container_internal18hash_policy_traitsINS0_17FlatHashMapPolicyINS_11string_viewEmEEvE5applyINS0_12raw_hash_setIS4_NS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINSB_4pairIKS3_mEEEEE19EmplaceDecomposableEJNSD_IS3_iEEES4_EEDTclsrT1_5applyclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSL_DpOSM_: argument 0"}
!34 = distinct !{!34, !"_ZN4absl18container_internal18hash_policy_traitsINS0_17FlatHashMapPolicyINS_11string_viewEmEEvE5applyINS0_12raw_hash_setIS4_NS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINSB_4pairIKS3_mEEEEE19EmplaceDecomposableEJNSD_IS3_iEEES4_EEDTclsrT1_5applyclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSL_DpOSM_"}
!35 = distinct !{!35, !36, !"_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS8_4pairIKS3_mEEEEE7emplaceIJNSA_IS3_iEEELi0EEENSA_INSE_8iteratorEbEEDpOT_: argument 0"}
!36 = distinct !{!36, !"_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS8_4pairIKS3_mEEEEE7emplaceIJNSA_IS3_iEEELi0EEENSA_INSE_8iteratorEbEEDpOT_"}
!37 = distinct !{!37, !38, !"_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS8_4pairIKS3_mEEEEE6insertINSA_IS3_iEELi0ESG_Li0ELPSG_0EEENSA_INSE_8iteratorEbEEOT_: argument 0"}
!38 = distinct !{!38, !"_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS8_4pairIKS3_mEEEEE6insertINSA_IS3_iEELi0ESG_Li0ELPSG_0EEENSA_INSE_8iteratorEbEEOT_"}
!39 = !{i32 0, i32 33}
!40 = !{!"branch_weights", i32 2146410443, i32 1073205}
!41 = !{!"branch_weights", i32 1, i32 2000}
