; ModuleID = '../../third_party/abseil-cpp/absl/strings/internal/cordz_functions.cc'
source_filename = "../../third_party/abseil-cpp/absl/strings/internal/cordz_functions.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.absl::base_internal::ExponentialBiased" = type <{ i64, double, i8, [7 x i8] }>

@absl_internal_cordz_disabled = weak hidden local_unnamed_addr global i8 0, align 1
@_ZN4absl13cord_internal17cordz_next_sampleE = hidden thread_local global i64 -1, align 8
@.str = private unnamed_addr constant [70 x i8] c"../../third_party/abseil-cpp/absl/strings/internal/cordz_functions.cc\00", align 1
@.str.1 = private unnamed_addr constant [36 x i8] c"Cordz info disabled at compile time\00", align 1
@_ZZN4absl13cord_internal25cordz_should_profile_slowEvE28exponential_biased_generator = internal thread_local global { i64, double, i8 } zeroinitializer, align 8
@_ZN4absl13cord_internal12_GLOBAL__N_121g_cordz_mean_intervalE.0.0 = internal unnamed_addr global i32 50000, align 4

; Function Attrs: noinline nounwind ssp uwtable
define hidden zeroext i1 @_ZN4absl13cord_internal25cordz_should_profile_slowEv() local_unnamed_addr #0 {
  br label %1

1:                                                ; preds = %17, %0
  %2 = load i8, i8* @absl_internal_cordz_disabled, align 1, !range !2
  %3 = icmp eq i8 %2, 0
  br i1 %3, label %5, label %4

4:                                                ; preds = %1
  tail call void (i32, i8*, i32, i8*, ...) @_ZN4absl20raw_logging_internal6RawLogENS_11LogSeverityEPKciS3_z(i32 1, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str, i64 0, i64 51), i32 59, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.1, i64 0, i64 0)) #5
  br label %23

5:                                                ; preds = %1
  %6 = load atomic i32, i32* @_ZN4absl13cord_internal12_GLOBAL__N_121g_cordz_mean_intervalE.0.0 acquire, align 4
  %7 = icmp slt i32 %6, 1
  br i1 %7, label %23, label %8

8:                                                ; preds = %5
  %9 = icmp eq i32 %6, 1
  br i1 %9, label %23, label %10

10:                                               ; preds = %8
  %11 = load i64, i64* @_ZN4absl13cord_internal17cordz_next_sampleE, align 8
  %12 = icmp slt i64 %11, 1
  br i1 %12, label %13, label %21

13:                                               ; preds = %10
  %14 = icmp eq i64 %11, -1
  %15 = sext i32 %6 to i64
  %16 = tail call i64 @_ZN4absl13base_internal17ExponentialBiased9GetStrideEl(%"class.absl::base_internal::ExponentialBiased"* bitcast ({ i64, double, i8 }* @_ZZN4absl13cord_internal25cordz_should_profile_slowEvE28exponential_biased_generator to %"class.absl::base_internal::ExponentialBiased"*), i64 %15) #5
  store i64 %16, i64* @_ZN4absl13cord_internal17cordz_next_sampleE, align 8
  br i1 %14, label %17, label %26

17:                                               ; preds = %13
  %18 = icmp sgt i64 %16, 1
  br i1 %18, label %19, label %1, !prof !3

19:                                               ; preds = %17
  %20 = add nsw i64 %16, -1
  br label %23

21:                                               ; preds = %10
  %22 = add nsw i64 %11, -1
  br label %23

23:                                               ; preds = %8, %5, %4, %21, %19
  %24 = phi i64 [ %20, %19 ], [ %22, %21 ], [ 9223372036854775807, %4 ], [ 1, %8 ], [ 65536, %5 ]
  %25 = phi i1 [ false, %19 ], [ false, %21 ], [ false, %4 ], [ true, %8 ], [ false, %5 ]
  store i64 %24, i64* @_ZN4absl13cord_internal17cordz_next_sampleE, align 8
  br label %26

26:                                               ; preds = %13, %23
  %27 = phi i1 [ %25, %23 ], [ true, %13 ]
  ret i1 %27
}

declare void @_ZN4absl20raw_logging_internal6RawLogENS_11LogSeverityEPKciS3_z(i32, i8*, i32, i8*, ...) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64* @_ZTWN4absl13cord_internal17cordz_next_sampleE() local_unnamed_addr #2 {
  ret i64* @_ZN4absl13cord_internal17cordz_next_sampleE
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @_ZN4absl13cord_internal23get_cordz_mean_intervalEv() local_unnamed_addr #3 {
  %1 = load atomic i32, i32* @_ZN4absl13cord_internal12_GLOBAL__N_121g_cordz_mean_intervalE.0.0 acquire, align 4
  ret i32 %1
}

declare i64 @_ZN4absl13base_internal17ExponentialBiased9GetStrideEl(%"class.absl::base_internal::ExponentialBiased"*, i64) local_unnamed_addr #1

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN4absl13cord_internal33cordz_set_next_sample_for_testingEl(i64) local_unnamed_addr #4 {
  store i64 %0, i64* @_ZN4absl13cord_internal17cordz_next_sampleE, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN4absl13cord_internal23set_cordz_mean_intervalEi(i32) local_unnamed_addr #3 {
  store atomic i32 %0, i32* @_ZN4absl13cord_internal12_GLOBAL__N_121g_cordz_mean_intervalE.0.0 release, align 4
  ret void
}

attributes #0 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!"branch_weights", i32 2000, i32 1}
