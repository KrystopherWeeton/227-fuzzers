; ModuleID = '../../third_party/libvpx/source/libvpx/vpx_dsp/add_noise.c'
source_filename = "../../third_party/libvpx/source/libvpx/vpx_dsp/add_noise.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_plane_add_noise_c(i8* nocapture, i8* nocapture readonly, i32, i32, i32, i32, i32) local_unnamed_addr #0 {
  %8 = add nsw i32 %3, %2
  %9 = icmp sgt i32 %5, 0
  br i1 %9, label %10, label %104

10:                                               ; preds = %7
  %11 = icmp sgt i32 %4, 0
  %12 = sext i32 %6 to i64
  %13 = zext i32 %5 to i64
  %14 = zext i32 %4 to i64
  %15 = getelementptr i8, i8* %1, i64 %14
  %16 = icmp ult i32 %4, 16
  %17 = and i64 %14, 4294967280
  %18 = insertelement <16 x i32> undef, i32 %2, i32 0
  %19 = shufflevector <16 x i32> %18, <16 x i32> undef, <16 x i32> zeroinitializer
  %20 = insertelement <16 x i32> undef, i32 %8, i32 0
  %21 = shufflevector <16 x i32> %20, <16 x i32> undef, <16 x i32> zeroinitializer
  %22 = insertelement <16 x i32> undef, i32 %3, i32 0
  %23 = shufflevector <16 x i32> %22, <16 x i32> undef, <16 x i32> zeroinitializer
  %24 = icmp eq i64 %17, %14
  br label %25

25:                                               ; preds = %101, %10
  %26 = phi i64 [ 0, %10 ], [ %102, %101 ]
  %27 = mul i64 %26, %12
  %28 = getelementptr i8, i8* %0, i64 %27
  %29 = add i64 %27, %14
  %30 = getelementptr i8, i8* %0, i64 %29
  %31 = mul nsw i64 %26, %12
  %32 = getelementptr inbounds i8, i8* %0, i64 %31
  %33 = tail call i32 @rand() #4
  %34 = and i32 %33, 255
  %35 = zext i32 %34 to i64
  %36 = getelementptr inbounds i8, i8* %1, i64 %35
  br i1 %11, label %37, label %101

37:                                               ; preds = %25
  br i1 %16, label %73, label %38

38:                                               ; preds = %37
  %39 = getelementptr i8, i8* %15, i64 %35
  %40 = icmp ult i8* %28, %39
  %41 = icmp ult i8* %36, %30
  %42 = and i1 %40, %41
  br i1 %42, label %73, label %43

43:                                               ; preds = %38, %43
  %44 = phi i64 [ %70, %43 ], [ 0, %38 ]
  %45 = getelementptr inbounds i8, i8* %32, i64 %44
  %46 = bitcast i8* %45 to <16 x i8>*
  %47 = load <16 x i8>, <16 x i8>* %46, align 1, !alias.scope !2, !noalias !5
  %48 = zext <16 x i8> %47 to <16 x i32>
  %49 = sub nsw <16 x i32> %48, %19
  %50 = icmp slt <16 x i32> %49, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %51 = select <16 x i1> %50, <16 x i32> %49, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %52 = icmp sgt <16 x i32> %51, zeroinitializer
  %53 = select <16 x i1> %52, <16 x i32> %51, <16 x i32> zeroinitializer
  %54 = add nsw <16 x i32> %21, %53
  %55 = icmp slt <16 x i32> %54, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %56 = select <16 x i1> %55, <16 x i32> %54, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %57 = icmp sgt <16 x i32> %56, zeroinitializer
  %58 = select <16 x i1> %57, <16 x i32> %56, <16 x i32> zeroinitializer
  %59 = sub nsw <16 x i32> %58, %23
  %60 = icmp slt <16 x i32> %59, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %61 = select <16 x i1> %60, <16 x i32> %59, <16 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %62 = icmp sgt <16 x i32> %61, zeroinitializer
  %63 = select <16 x i1> %62, <16 x i32> %61, <16 x i32> zeroinitializer
  %64 = getelementptr inbounds i8, i8* %36, i64 %44
  %65 = bitcast i8* %64 to <16 x i8>*
  %66 = load <16 x i8>, <16 x i8>* %65, align 1, !alias.scope !5
  %67 = trunc <16 x i32> %63 to <16 x i8>
  %68 = add <16 x i8> %66, %67
  %69 = bitcast i8* %45 to <16 x i8>*
  store <16 x i8> %68, <16 x i8>* %69, align 1, !alias.scope !2, !noalias !5
  %70 = add i64 %44, 16
  %71 = icmp eq i64 %70, %17
  br i1 %71, label %72, label %43, !llvm.loop !7

72:                                               ; preds = %43
  br i1 %24, label %101, label %73

73:                                               ; preds = %72, %38, %37
  %74 = phi i64 [ 0, %38 ], [ 0, %37 ], [ %17, %72 ]
  br label %75

75:                                               ; preds = %73, %75
  %76 = phi i64 [ %99, %75 ], [ %74, %73 ]
  %77 = getelementptr inbounds i8, i8* %32, i64 %76
  %78 = load i8, i8* %77, align 1
  %79 = zext i8 %78 to i32
  %80 = sub nsw i32 %79, %2
  %81 = icmp slt i32 %80, 255
  %82 = select i1 %81, i32 %80, i32 255
  %83 = icmp sgt i32 %82, 0
  %84 = select i1 %83, i32 %82, i32 0
  %85 = add nsw i32 %8, %84
  %86 = icmp slt i32 %85, 255
  %87 = select i1 %86, i32 %85, i32 255
  %88 = icmp sgt i32 %87, 0
  %89 = select i1 %88, i32 %87, i32 0
  %90 = sub nsw i32 %89, %3
  %91 = icmp slt i32 %90, 255
  %92 = select i1 %91, i32 %90, i32 255
  %93 = icmp sgt i32 %92, 0
  %94 = select i1 %93, i32 %92, i32 0
  %95 = getelementptr inbounds i8, i8* %36, i64 %76
  %96 = load i8, i8* %95, align 1
  %97 = trunc i32 %94 to i8
  %98 = add i8 %96, %97
  store i8 %98, i8* %77, align 1
  %99 = add nuw nsw i64 %76, 1
  %100 = icmp eq i64 %99, %14
  br i1 %100, label %101, label %75, !llvm.loop !9

101:                                              ; preds = %75, %72, %25
  %102 = add nuw nsw i64 %26, 1
  %103 = icmp eq i64 %102, %13
  br i1 %103, label %104, label %25

104:                                              ; preds = %101, %7
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind
declare i32 @rand() local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vpx_setup_noise(double, i8* nocapture, i32) local_unnamed_addr #0 {
  %4 = alloca [256 x i8], align 16
  %5 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %5) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %5, i8 -86, i64 256, i1 false)
  %6 = fmul double %0, 0x40040D931FC4F1F6
  %7 = fdiv double 1.000000e+00, %6
  %8 = fmul double %0, 2.000000e+00
  %9 = fmul double %8, %0
  br label %18

10:                                               ; preds = %47
  %11 = icmp slt i32 %48, 256
  br i1 %11, label %12, label %51

12:                                               ; preds = %10
  %13 = sext i32 %48 to i64
  %14 = getelementptr [256 x i8], [256 x i8]* %4, i64 0, i64 %13
  %15 = sub i32 255, %48
  %16 = zext i32 %15 to i64
  %17 = add nuw nsw i64 %16, 1
  call void @llvm.memset.p0i8.i64(i8* align 1 %14, i8 0, i64 %17, i1 false)
  br label %51

18:                                               ; preds = %47, %3
  %19 = phi i32 [ -32, %3 ], [ %49, %47 ]
  %20 = phi i32 [ 0, %3 ], [ %48, %47 ]
  %21 = sitofp i32 %19 to double
  %22 = fmul double %21, %21
  %23 = fsub double -0.000000e+00, %22
  %24 = fdiv double %23, %9
  %25 = tail call double @exp(double %24) #4
  %26 = fmul double %7, %25
  %27 = fmul double %26, 2.560000e+02
  %28 = fadd double %27, 5.000000e-01
  %29 = fptosi double %28 to i32
  %30 = icmp sgt i32 %29, 0
  br i1 %30, label %31, label %47

31:                                               ; preds = %18
  %32 = trunc i32 %19 to i8
  %33 = sext i32 %20 to i64
  %34 = sext i32 %29 to i64
  br label %35

35:                                               ; preds = %39, %31
  %36 = phi i64 [ 0, %31 ], [ %41, %39 ]
  %37 = phi i64 [ %33, %31 ], [ %42, %39 ]
  %38 = icmp sgt i64 %37, 255
  br i1 %38, label %51, label %39

39:                                               ; preds = %35
  %40 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i64 0, i64 %37
  store i8 %32, i8* %40, align 1
  %41 = add nuw nsw i64 %36, 1
  %42 = add nsw i64 %37, 1
  %43 = icmp eq i64 %41, %34
  br i1 %43, label %44, label %35

44:                                               ; preds = %39
  %45 = trunc i64 %41 to i32
  %46 = add i32 %20, %45
  br label %47

47:                                               ; preds = %18, %44
  %48 = phi i32 [ %20, %18 ], [ %46, %44 ]
  %49 = add nsw i32 %19, 1
  %50 = icmp eq i32 %49, 32
  br i1 %50, label %10, label %18

51:                                               ; preds = %35, %12, %10
  %52 = icmp sgt i32 %2, 0
  br i1 %52, label %53, label %65

53:                                               ; preds = %51
  %54 = zext i32 %2 to i64
  br label %55

55:                                               ; preds = %55, %53
  %56 = phi i64 [ 0, %53 ], [ %63, %55 ]
  %57 = tail call i32 @rand() #4
  %58 = and i32 %57, 255
  %59 = zext i32 %58 to i64
  %60 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i64 0, i64 %59
  %61 = load i8, i8* %60, align 1
  %62 = getelementptr inbounds i8, i8* %1, i64 %56
  store i8 %61, i8* %62, align 1
  %63 = add nuw nsw i64 %56, 1
  %64 = icmp eq i64 %63, %54
  br i1 %64, label %65, label %55

65:                                               ; preds = %55, %51
  %66 = load i8, i8* %5, align 16
  %67 = sext i8 %66 to i32
  %68 = sub nsw i32 0, %67
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %5) #4
  ret i32 %68
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nofree nounwind
declare double @exp(double) local_unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !8}
