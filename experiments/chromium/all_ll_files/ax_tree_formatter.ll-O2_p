; ModuleID = '../../ui/accessibility/platform/inspect/ax_tree_formatter.cc'
source_filename = "../../ui/accessibility/platform/inspect/ax_tree_formatter.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.ui::AXPropertyFilter"*, %"struct.ui::AXPropertyFilter"*, %"class.std::__1::__compressed_pair.1" }
%"struct.ui::AXPropertyFilter" = type <{ %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", i32, [4 x i8] }>
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"struct.ui::AXPropertyFilter"* }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.std::__1::__basic_string_common" = type { i8 }
%"class.std::__1::vector.6" = type { %"class.std::__1::__vector_base.7" }
%"class.std::__1::__vector_base.7" = type { %"struct.ui::AXNodeFilter"*, %"struct.ui::AXNodeFilter"*, %"class.std::__1::__compressed_pair.8" }
%"struct.ui::AXNodeFilter" = type { %"class.std::__1::basic_string", %"class.std::__1::basic_string" }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { %"struct.ui::AXNodeFilter"* }
%"class.base::Value" = type { %"class.absl::variant" }
%"class.absl::variant" = type { %"class.absl::variant_internal::VariantCopyAssignBaseNontrivial" }
%"class.absl::variant_internal::VariantCopyAssignBaseNontrivial" = type { %"class.absl::variant_internal::VariantMoveAssignBaseNontrivial" }
%"class.absl::variant_internal::VariantMoveAssignBaseNontrivial" = type { %"class.absl::variant_internal::VariantCopyBaseNontrivial" }
%"class.absl::variant_internal::VariantCopyBaseNontrivial" = type { %"class.absl::variant_internal::VariantMoveBaseNontrivial" }
%"class.absl::variant_internal::VariantMoveBaseNontrivial" = type { %"class.absl::variant_internal::VariantStateBaseDestructorNontrivial" }
%"class.absl::variant_internal::VariantStateBaseDestructorNontrivial" = type { %"class.absl::variant_internal::VariantStateBase" }
%"class.absl::variant_internal::VariantStateBase" = type { %"union.absl::variant_internal::DestructibleUnionImpl", i64 }
%"union.absl::variant_internal::DestructibleUnionImpl" = type { %"union.absl::variant_internal::DestructibleUnionImpl.13" }
%"union.absl::variant_internal::DestructibleUnionImpl.13" = type { %"union.absl::variant_internal::DestructibleUnionImpl.14" }
%"union.absl::variant_internal::DestructibleUnionImpl.14" = type { %"union.absl::variant_internal::DestructibleUnionImpl.15" }
%"union.absl::variant_internal::DestructibleUnionImpl.15" = type { %"union.absl::variant_internal::DestructibleUnionImpl.16" }
%"union.absl::variant_internal::DestructibleUnionImpl.16" = type { %"class.std::__1::basic_string" }

@.str = private unnamed_addr constant [3 x i8] c"=*\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"*=''\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"*\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2ui15AXTreeFormatter22MatchesPropertyFiltersERKNSt3__16vectorINS_16AXPropertyFilterENS1_9allocatorIS3_EEEERKNS1_12basic_stringIcNS1_11char_traitsIcEENS4_IcEEEEb(%"class.std::__1::vector"* nocapture readonly dereferenceable(24), %"class.std::__1::basic_string"* dereferenceable(24), i1 zeroext) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.std::__1::basic_string", align 8
  %5 = zext i1 %2 to i8
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %7 = load %"struct.ui::AXPropertyFilter"*, %"struct.ui::AXPropertyFilter"** %6, align 8
  %8 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %9 = load %"struct.ui::AXPropertyFilter"*, %"struct.ui::AXPropertyFilter"** %8, align 8
  %10 = icmp eq %"struct.ui::AXPropertyFilter"* %7, %9
  br i1 %10, label %23, label %11

11:                                               ; preds = %3
  %12 = bitcast %"class.std::__1::basic_string"* %1 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %13 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %12, i64 0, i32 1, i32 0
  %14 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %15 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  %16 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %17 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  %18 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %20 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %21 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %22 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %21, i64 0, i32 1, i32 0
  br label %27

23:                                               ; preds = %144, %3
  %24 = phi i8 [ %5, %3 ], [ %145, %144 ]
  %25 = and i8 %24, 1
  %26 = icmp ne i8 %25, 0
  ret i1 %26

27:                                               ; preds = %11, %144
  %28 = phi i8 [ %5, %11 ], [ %145, %144 ]
  %29 = phi %"struct.ui::AXPropertyFilter"* [ %7, %11 ], [ %146, %144 ]
  %30 = load i8, i8* %13, align 1
  %31 = icmp slt i8 %30, 0
  %32 = load i8*, i8** %14, align 8
  %33 = select i1 %31, i8* %32, i8* %15
  %34 = load i64, i64* %16, align 8
  %35 = zext i8 %30 to i64
  %36 = select i1 %31, i64 %34, i64 %35
  %37 = getelementptr inbounds %"struct.ui::AXPropertyFilter", %"struct.ui::AXPropertyFilter"* %29, i64 0, i32 0
  %38 = bitcast %"struct.ui::AXPropertyFilter"* %29 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %39 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %38, i64 0, i32 1, i32 0
  %40 = load i8, i8* %39, align 1
  %41 = icmp slt i8 %40, 0
  %42 = getelementptr inbounds %"struct.ui::AXPropertyFilter", %"struct.ui::AXPropertyFilter"* %29, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %43 = load i8*, i8** %42, align 8
  %44 = bitcast %"struct.ui::AXPropertyFilter"* %29 to i8*
  %45 = select i1 %41, i8* %43, i8* %44
  %46 = getelementptr inbounds %"struct.ui::AXPropertyFilter", %"struct.ui::AXPropertyFilter"* %29, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %47 = load i64, i64* %46, align 8
  %48 = zext i8 %40 to i64
  %49 = select i1 %41, i64 %47, i64 %48
  %50 = call zeroext i1 @_ZN4base12MatchPatternENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEES4_(i8* %33, i64 %36, i8* %45, i64 %49) #7
  br i1 %50, label %128, label %51

51:                                               ; preds = %27
  %52 = load i8, i8* %39, align 1
  %53 = icmp slt i8 %52, 0
  br i1 %53, label %54, label %56

54:                                               ; preds = %51
  %55 = load i64, i64* %46, align 8
  br label %58

56:                                               ; preds = %51
  %57 = zext i8 %52 to i64
  br label %58

58:                                               ; preds = %54, %56
  %59 = phi i64 [ %55, %54 ], [ %57, %56 ]
  %60 = icmp eq i64 %59, 0
  br i1 %60, label %144, label %61

61:                                               ; preds = %58
  %62 = call i64 @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4findEcm(%"class.std::__1::basic_string"* %37, i8 signext 61, i64 0) #7
  %63 = icmp eq i64 %62, -1
  br i1 %63, label %64, label %144

64:                                               ; preds = %61
  %65 = load i8, i8* %39, align 1
  %66 = icmp slt i8 %65, 0
  br i1 %66, label %67, label %70

67:                                               ; preds = %64
  %68 = load i64, i64* %46, align 8
  %69 = load i8*, i8** %42, align 8
  br label %72

70:                                               ; preds = %64
  %71 = zext i8 %65 to i64
  br label %72

72:                                               ; preds = %67, %70
  %73 = phi i64 [ %68, %67 ], [ %71, %70 ]
  %74 = phi i8* [ %69, %67 ], [ %44, %70 ]
  %75 = add i64 %73, -1
  %76 = getelementptr inbounds i8, i8* %74, i64 %75
  %77 = load i8, i8* %76, align 1
  %78 = icmp eq i8 %77, 42
  br i1 %78, label %144, label %79

79:                                               ; preds = %72
  %80 = load i8, i8* %13, align 1
  %81 = icmp slt i8 %80, 0
  %82 = load i8*, i8** %14, align 8
  %83 = select i1 %81, i8* %82, i8* %15
  %84 = load i64, i64* %16, align 8
  %85 = zext i8 %80 to i64
  %86 = select i1 %81, i64 %84, i64 %85
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %17) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %17, i8 0, i64 24, i1 false) #7, !alias.scope !2
  br i1 %66, label %87, label %90

87:                                               ; preds = %79
  %88 = load i64, i64* %46, align 8, !noalias !2
  %89 = load i8*, i8** %42, align 8, !noalias !2
  br label %92

90:                                               ; preds = %79
  %91 = zext i8 %65 to i64
  br label %92

92:                                               ; preds = %90, %87
  %93 = phi i64 [ %88, %87 ], [ %91, %90 ]
  %94 = phi i8* [ %89, %87 ], [ %44, %90 ]
  %95 = add i64 %93, 2
  %96 = icmp ugt i64 %95, -17
  br i1 %96, label %97, label %99

97:                                               ; preds = %92
  %98 = bitcast %"class.std::__1::basic_string"* %4 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %98) #8
  unreachable

99:                                               ; preds = %92
  %100 = icmp ult i64 %95, 23
  br i1 %100, label %106, label %101

101:                                              ; preds = %99
  %102 = add nuw i64 %93, 18
  %103 = and i64 %102, -16
  %104 = call i8* @_Znwm(i64 %103) #9
  store i8* %104, i8** %18, align 8, !alias.scope !2
  %105 = or i64 %103, -9223372036854775808
  store i64 %105, i64* %20, align 8, !alias.scope !2
  store i64 %93, i64* %19, align 8, !alias.scope !2
  br label %109

106:                                              ; preds = %99
  %107 = trunc i64 %93 to i8
  store i8 %107, i8* %22, align 1, !alias.scope !2
  %108 = icmp eq i64 %93, 0
  br i1 %108, label %111, label %109

109:                                              ; preds = %101, %106
  %110 = phi i8* [ %104, %101 ], [ %17, %106 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %110, i8* align 1 %94, i64 %93, i1 false) #7
  br label %111

111:                                              ; preds = %106, %109
  %112 = phi i8* [ %17, %106 ], [ %110, %109 ]
  %113 = getelementptr inbounds i8, i8* %112, i64 %93
  store i8 0, i8* %113, align 1
  %114 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* nonnull %4, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i64 2) #7
  %115 = load i8, i8* %22, align 1
  %116 = icmp slt i8 %115, 0
  %117 = load i8*, i8** %18, align 8
  %118 = select i1 %116, i8* %117, i8* %17
  %119 = load i64, i64* %19, align 8
  %120 = zext i8 %115 to i64
  %121 = select i1 %116, i64 %119, i64 %120
  %122 = call zeroext i1 @_ZN4base12MatchPatternENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEES4_(i8* %83, i64 %86, i8* %118, i64 %121) #7
  %123 = load i8, i8* %22, align 1
  %124 = icmp slt i8 %123, 0
  br i1 %124, label %125, label %127

125:                                              ; preds = %111
  %126 = load i8*, i8** %18, align 8
  call void @_ZdlPv(i8* %126) #9
  br label %127

127:                                              ; preds = %125, %111
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %17) #7
  br i1 %122, label %128, label %144

128:                                              ; preds = %27, %127
  %129 = getelementptr inbounds %"struct.ui::AXPropertyFilter", %"struct.ui::AXPropertyFilter"* %29, i64 0, i32 3
  %130 = load i32, i32* %129, align 8
  switch i32 %130, label %144 [
    i32 1, label %131
    i32 3, label %131
    i32 0, label %132
    i32 2, label %143
  ]

131:                                              ; preds = %128, %128
  br label %144

132:                                              ; preds = %128
  %133 = load i8, i8* %13, align 1
  %134 = icmp slt i8 %133, 0
  %135 = load i8*, i8** %14, align 8
  %136 = select i1 %134, i8* %135, i8* %15
  %137 = load i64, i64* %16, align 8
  %138 = zext i8 %133 to i64
  %139 = select i1 %134, i64 %137, i64 %138
  %140 = call zeroext i1 @_ZN4base12MatchPatternENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEES4_(i8* %136, i64 %139, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i64 4) #7
  %141 = xor i1 %140, true
  %142 = zext i1 %141 to i8
  br label %144

143:                                              ; preds = %128
  br label %144

144:                                              ; preds = %72, %61, %58, %131, %132, %143, %128, %127
  %145 = phi i8 [ %28, %128 ], [ 0, %143 ], [ %142, %132 ], [ 1, %131 ], [ %28, %127 ], [ %28, %58 ], [ %28, %61 ], [ %28, %72 ]
  %146 = getelementptr inbounds %"struct.ui::AXPropertyFilter", %"struct.ui::AXPropertyFilter"* %29, i64 1
  %147 = icmp eq %"struct.ui::AXPropertyFilter"* %146, %9
  br i1 %147, label %23, label %27
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare zeroext i1 @_ZN4base12MatchPatternENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEES4_(i8*, i64, i8*, i64) local_unnamed_addr #2

; Function Attrs: nounwind
declare i64 @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4findEcm(%"class.std::__1::basic_string"*, i8 signext, i64) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2ui15AXTreeFormatter18MatchesNodeFiltersERKNSt3__16vectorINS_12AXNodeFilterENS1_9allocatorIS3_EEEERKN4base5ValueE(%"class.std::__1::vector.6"* nocapture readonly dereferenceable(24), %"class.base::Value"* dereferenceable(32)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %0, i64 0, i32 0, i32 0
  %4 = load %"struct.ui::AXNodeFilter"*, %"struct.ui::AXNodeFilter"** %3, align 8
  %5 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %0, i64 0, i32 0, i32 1
  %6 = load %"struct.ui::AXNodeFilter"*, %"struct.ui::AXNodeFilter"** %5, align 8
  %7 = icmp eq %"struct.ui::AXNodeFilter"* %4, %6
  br i1 %7, label %69, label %8

8:                                                ; preds = %2, %66
  %9 = phi %"struct.ui::AXNodeFilter"* [ %67, %66 ], [ %4, %2 ]
  %10 = bitcast %"struct.ui::AXNodeFilter"* %9 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %11 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %10, i64 0, i32 1, i32 0
  %12 = load i8, i8* %11, align 1
  %13 = icmp slt i8 %12, 0
  %14 = getelementptr inbounds %"struct.ui::AXNodeFilter", %"struct.ui::AXNodeFilter"* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %15 = load i64, i64* %14, align 8
  %16 = zext i8 %12 to i64
  %17 = select i1 %13, i64 %15, i64 %16
  %18 = icmp eq i64 %17, 1
  br i1 %18, label %19, label %27

19:                                               ; preds = %8
  %20 = getelementptr inbounds %"struct.ui::AXNodeFilter", %"struct.ui::AXNodeFilter"* %9, i64 0, i32 0
  %21 = tail call i32 @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm(%"class.std::__1::basic_string"* %20, i64 0, i64 -1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0), i64 1) #7
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %69, label %23

23:                                               ; preds = %19
  %24 = load i8, i8* %11, align 1
  %25 = load i64, i64* %14, align 8
  %26 = zext i8 %24 to i64
  br label %27

27:                                               ; preds = %23, %8
  %28 = phi i64 [ %26, %23 ], [ %16, %8 ]
  %29 = phi i64 [ %25, %23 ], [ %15, %8 ]
  %30 = phi i8 [ %24, %23 ], [ %12, %8 ]
  %31 = icmp slt i8 %30, 0
  %32 = getelementptr inbounds %"struct.ui::AXNodeFilter", %"struct.ui::AXNodeFilter"* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %33 = load i8*, i8** %32, align 8
  %34 = bitcast %"struct.ui::AXNodeFilter"* %9 to i8*
  %35 = select i1 %31, i8* %33, i8* %34
  %36 = select i1 %31, i64 %29, i64 %28
  %37 = tail call %"class.std::__1::basic_string"* @_ZNK4base5Value13FindStringKeyENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"class.base::Value"* %1, i8* %35, i64 %36) #7
  %38 = icmp eq %"class.std::__1::basic_string"* %37, null
  br i1 %38, label %66, label %39

39:                                               ; preds = %27
  %40 = bitcast %"class.std::__1::basic_string"* %37 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %41 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %40, i64 0, i32 1, i32 0
  %42 = load i8, i8* %41, align 1
  %43 = icmp slt i8 %42, 0
  %44 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %37, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %45 = load i8*, i8** %44, align 8
  %46 = bitcast %"class.std::__1::basic_string"* %37 to i8*
  %47 = select i1 %43, i8* %45, i8* %46
  %48 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %37, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %49 = load i64, i64* %48, align 8
  %50 = zext i8 %42 to i64
  %51 = select i1 %43, i64 %49, i64 %50
  %52 = getelementptr inbounds %"struct.ui::AXNodeFilter", %"struct.ui::AXNodeFilter"* %9, i64 0, i32 1
  %53 = bitcast %"class.std::__1::basic_string"* %52 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %54 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %53, i64 0, i32 1, i32 0
  %55 = load i8, i8* %54, align 1
  %56 = icmp slt i8 %55, 0
  %57 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %52, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %58 = load i8*, i8** %57, align 8
  %59 = bitcast %"class.std::__1::basic_string"* %52 to i8*
  %60 = select i1 %56, i8* %58, i8* %59
  %61 = getelementptr inbounds %"struct.ui::AXNodeFilter", %"struct.ui::AXNodeFilter"* %9, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %62 = load i64, i64* %61, align 8
  %63 = zext i8 %55 to i64
  %64 = select i1 %56, i64 %62, i64 %63
  %65 = tail call zeroext i1 @_ZN4base12MatchPatternENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEES4_(i8* %47, i64 %51, i8* %60, i64 %64) #7
  br i1 %65, label %69, label %66

66:                                               ; preds = %39, %27
  %67 = getelementptr inbounds %"struct.ui::AXNodeFilter", %"struct.ui::AXNodeFilter"* %9, i64 1
  %68 = icmp eq %"struct.ui::AXNodeFilter"* %67, %6
  br i1 %68, label %69, label %8

69:                                               ; preds = %19, %39, %66, %2
  %70 = phi i1 [ false, %2 ], [ false, %66 ], [ true, %39 ], [ true, %19 ]
  ret i1 %70
}

declare %"class.std::__1::basic_string"* @_ZNK4base5Value13FindStringKeyENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"class.base::Value"*, i8*, i64) local_unnamed_addr #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #2

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare i32 @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm(%"class.std::__1::basic_string"*, i64, i64, i8*, i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { noreturn nounwind }
attributes #9 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZNSt3__1plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EERKS9_PKS6_: argument 0"}
!4 = distinct !{!4, !"_ZNSt3__1plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EERKS9_PKS6_"}
