; ModuleID = '../../components/viz/common/quads/shared_quad_state.cc'
source_filename = "../../components/viz/common/quads/shared_quad_state.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.base::trace_event::TraceCategory" = type { i8, i32, i8* }
%"class.viz::SharedQuadState" = type <{ %"class.gfx::Transform", %"class.gfx::Rect", %"class.gfx::Rect", %"class.gfx::MaskFilterInfo", %"class.absl::optional", i8, [3 x i8], float, i32, i32, i8, [3 x i8], %"class.absl::optional.0", float, i8, [3 x i8] }>
%"class.gfx::Transform" = type { %class.SkMatrix44 }
%class.SkMatrix44 = type <{ [4 x [4 x float]], i8, [3 x i8] }>
%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }
%"class.gfx::Point" = type { i32, i32 }
%"class.gfx::Size" = type { i32, i32 }
%"class.gfx::MaskFilterInfo" = type { %"class.gfx::RRectF" }
%"class.gfx::RRectF" = type { %class.SkRRect }
%class.SkRRect = type { %struct.SkRect, [4 x %struct.SkPoint], i32 }
%struct.SkRect = type { float, float, float, float }
%struct.SkPoint = type { float, float }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"class.gfx::Rect" }
%"class.absl::optional.0" = type { %"class.absl::optional_internal::optional_data.1" }
%"class.absl::optional_internal::optional_data.1" = type { %"class.absl::optional_internal::optional_data_base.2" }
%"class.absl::optional_internal::optional_data_base.2" = type { %"class.absl::optional_internal::optional_data_dtor_base.3" }
%"class.absl::optional_internal::optional_data_dtor_base.3" = type { i8, %union.anon.4 }
%union.anon.4 = type { i64 }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.base::trace_event::TraceArguments" = type { i8, [2 x i8], [2 x i8*], [2 x %"union.base::trace_event::TraceValue"] }
%"union.base::trace_event::TraceValue" = type { i64 }
%"class.base::trace_event::TracedValue" = type { %"class.base::trace_event::ConvertableToTraceFormat", %"class.std::__1::unique_ptr" }
%"class.base::trace_event::ConvertableToTraceFormat" = type { i32 (...)** }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.base::trace_event::TracedValue::Writer"* }
%"class.base::trace_event::TracedValue::Writer" = type { i32 (...)** }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type opaque
%"class.gfx::RectF" = type { %"class.gfx::PointF", %"class.gfx::SizeF" }
%"class.gfx::PointF" = type { float, float }
%"class.gfx::SizeF" = type { float, float }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }

@_ZN4base11trace_event16CategoryRegistry11categories_E = external global [300 x %"struct.base::trace_event::TraceCategory"], align 16
@.str = private unnamed_addr constant [21 x i8] c"viz::SharedQuadState\00", align 1
@.str.1 = private unnamed_addr constant [10 x i8] c"transform\00", align 1
@.str.2 = private unnamed_addr constant [19 x i8] c"layer_content_rect\00", align 1
@.str.3 = private unnamed_addr constant [27 x i8] c"layer_visible_content_rect\00", align 1
@.str.4 = private unnamed_addr constant [19 x i8] c"mask_filter_bounds\00", align 1
@.str.5 = private unnamed_addr constant [34 x i8] c"mask_filter_rounded_corners_radii\00", align 1
@.str.6 = private unnamed_addr constant [10 x i8] c"clip_rect\00", align 1
@.str.7 = private unnamed_addr constant [20 x i8] c"are_contents_opaque\00", align 1
@.str.8 = private unnamed_addr constant [8 x i8] c"opacity\00", align 1
@.str.9 = private unnamed_addr constant [11 x i8] c"blend_mode\00", align 1
@.str.10 = private unnamed_addr constant [30 x i8] c"disabled-by-default-viz.quads\00", align 1
@constinit = private unnamed_addr constant [4 x [4 x float]] [[4 x float] [float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00], [4 x float] [float 0.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00], [4 x float] [float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float 0.000000e+00], [4 x float] [float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00]], align 4
@.str.12 = private unnamed_addr constant [34 x i8] c"../../base/strings/string_piece.h\00", align 1
@.str.13 = private unnamed_addr constant [2 x i8] c"s\00", align 1

@_ZN3viz15SharedQuadStateC1Ev = hidden unnamed_addr alias void (%"class.viz::SharedQuadState"*), void (%"class.viz::SharedQuadState"*)* @_ZN3viz15SharedQuadStateC2Ev
@_ZN3viz15SharedQuadStateC1ERKS0_ = hidden unnamed_addr alias void (%"class.viz::SharedQuadState"*, %"class.viz::SharedQuadState"*), void (%"class.viz::SharedQuadState"*, %"class.viz::SharedQuadState"*)* @_ZN3viz15SharedQuadStateC2ERKS0_
@_ZN3viz15SharedQuadStateD1Ev = hidden unnamed_addr alias void (%"class.viz::SharedQuadState"*), void (%"class.viz::SharedQuadState"*)* @_ZN3viz15SharedQuadStateD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz15SharedQuadStateC2Ev(%"class.viz::SharedQuadState"* nocapture) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.viz::SharedQuadState"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %2, i8* align 4 bitcast ([4 x [4 x float]]* @constinit to i8*), i64 64, i1 false) #5
  %3 = getelementptr inbounds %"class.viz::SharedQuadState", %"class.viz::SharedQuadState"* %0, i64 0, i32 0, i32 0, i32 1
  store i8 0, i8* %3, align 4
  %4 = getelementptr inbounds %"class.viz::SharedQuadState", %"class.viz::SharedQuadState"* %0, i64 0, i32 1
  %5 = getelementptr inbounds %"class.viz::SharedQuadState", %"class.viz::SharedQuadState"* %0, i64 0, i32 5
  %6 = bitcast %"class.gfx::Rect"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %6, i8 0, i64 85, i1 false)
  store i8 1, i8* %5, align 4
  %7 = getelementptr inbounds %"class.viz::SharedQuadState", %"class.viz::SharedQuadState"* %0, i64 0, i32 7
  store float 1.000000e+00, float* %7, align 8
  %8 = getelementptr inbounds %"class.viz::SharedQuadState", %"class.viz::SharedQuadState"* %0, i64 0, i32 8
  store i32 3, i32* %8, align 4
  %9 = getelementptr inbounds %"class.viz::SharedQuadState", %"class.viz::SharedQuadState"* %0, i64 0, i32 9
  store i32 0, i32* %9, align 8
  %10 = getelementptr inbounds %"class.viz::SharedQuadState", %"class.viz::SharedQuadState"* %0, i64 0, i32 10
  store i8 0, i8* %10, align 4
  %11 = getelementptr inbounds %"class.viz::SharedQuadState", %"class.viz::SharedQuadState"* %0, i64 0, i32 12, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %11, align 8
  %12 = getelementptr inbounds %"class.viz::SharedQuadState", %"class.viz::SharedQuadState"* %0, i64 0, i32 13
  store float 0.000000e+00, float* %12, align 8
  %13 = getelementptr inbounds %"class.viz::SharedQuadState", %"class.viz::SharedQuadState"* %0, i64 0, i32 14
  store i8 0, i8* %13, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz15SharedQuadStateC2ERKS0_(%"class.viz::SharedQuadState"* nocapture, %"class.viz::SharedQuadState"* nocapture readonly dereferenceable(216)) unnamed_addr #0 align 2 {
  %3 = bitcast %"class.viz::SharedQuadState"* %0 to i8*
  %4 = bitcast %"class.viz::SharedQuadState"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %3, i8* align 4 %4, i64 68, i1 false) #5
  %5 = getelementptr inbounds %"class.viz::SharedQuadState", %"class.viz::SharedQuadState"* %0, i64 0, i32 1
  %6 = getelementptr inbounds %"class.viz::SharedQuadState", %"class.viz::SharedQuadState"* %1, i64 0, i32 1
  %7 = bitcast %"class.gfx::Rect"* %5 to i8*
  %8 = bitcast %"class.gfx::Rect"* %6 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %7, i8* align 4 %8, i64 145, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz15SharedQuadStateD2Ev(%"class.viz::SharedQuadState"*) unnamed_addr #0 align 2 {
  %2 = alloca %"class.base::TimeTicks", align 8
  %3 = load i8, i8* getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 229, i32 0), align 16
  %4 = and i8 %3, 25
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %13, label %6, !prof !2

6:                                                ; preds = %1
  %7 = ptrtoint %"class.viz::SharedQuadState"* %0 to i64
  %8 = tail call i32 @_ZN4base14PlatformThread9CurrentIdEv() #5
  %9 = bitcast %"class.base::TimeTicks"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #5
  %10 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %2, i64 0, i32 0, i32 0
  %11 = tail call i64 @_ZN4base6subtle28TimeTicksNowIgnoringOverrideEv() #5
  store i64 %11, i64* %10, align 8
  %12 = call i64 @_ZN20trace_event_internal37AddTraceEventWithThreadIdAndTimestampEcPKhPKcS3_yyiRKN4base9TimeTicksEPNS4_11trace_event14TraceArgumentsEj(i8 signext 68, i8* getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 229, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0), i8* null, i64 %7, i64 0, i32 %8, %"class.base::TimeTicks"* nonnull dereferenceable(8) %2, %"class.base::trace_event::TraceArguments"* null, i32 2048) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #5
  br label %13

13:                                               ; preds = %1, %6
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz15SharedQuadState6SetAllERKN3gfx9TransformERKNS1_4RectES7_RKNS1_14MaskFilterInfoERKN4absl8optionalIS5_EEbf11SkBlendModei(%"class.viz::SharedQuadState"* nocapture, %"class.gfx::Transform"* nocapture readonly dereferenceable(68), %"class.gfx::Rect"* nocapture readonly dereferenceable(16), %"class.gfx::Rect"* nocapture readonly dereferenceable(16), %"class.gfx::MaskFilterInfo"* nocapture readonly dereferenceable(52), %"class.absl::optional"* nocapture readonly dereferenceable(20), i1 zeroext, float, i32, i32) local_unnamed_addr #0 align 2 {
  %11 = zext i1 %6 to i8
  %12 = bitcast %"class.viz::SharedQuadState"* %0 to i8*
  %13 = bitcast %"class.gfx::Transform"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %12, i8* align 4 %13, i64 68, i1 false)
  %14 = getelementptr inbounds %"class.viz::SharedQuadState", %"class.viz::SharedQuadState"* %0, i64 0, i32 1
  %15 = bitcast %"class.gfx::Rect"* %14 to i8*
  %16 = bitcast %"class.gfx::Rect"* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %15, i8* align 4 %16, i64 16, i1 false)
  %17 = getelementptr inbounds %"class.viz::SharedQuadState", %"class.viz::SharedQuadState"* %0, i64 0, i32 2
  %18 = bitcast %"class.gfx::Rect"* %17 to i8*
  %19 = bitcast %"class.gfx::Rect"* %3 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %18, i8* align 4 %19, i64 16, i1 false)
  %20 = getelementptr inbounds %"class.viz::SharedQuadState", %"class.viz::SharedQuadState"* %0, i64 0, i32 3
  %21 = bitcast %"class.gfx::MaskFilterInfo"* %20 to i8*
  %22 = bitcast %"class.gfx::MaskFilterInfo"* %4 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %21, i8* align 4 %22, i64 52, i1 false)
  %23 = getelementptr inbounds %"class.viz::SharedQuadState", %"class.viz::SharedQuadState"* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0
  %24 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %5, i64 0, i32 0, i32 0, i32 0, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %23, i8* align 4 %24, i64 20, i1 false)
  %25 = getelementptr inbounds %"class.viz::SharedQuadState", %"class.viz::SharedQuadState"* %0, i64 0, i32 5
  store i8 %11, i8* %25, align 4
  %26 = getelementptr inbounds %"class.viz::SharedQuadState", %"class.viz::SharedQuadState"* %0, i64 0, i32 7
  store float %7, float* %26, align 8
  %27 = getelementptr inbounds %"class.viz::SharedQuadState", %"class.viz::SharedQuadState"* %0, i64 0, i32 8
  store i32 %8, i32* %27, align 4
  %28 = getelementptr inbounds %"class.viz::SharedQuadState", %"class.viz::SharedQuadState"* %0, i64 0, i32 9
  store i32 %9, i32* %28, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK3viz15SharedQuadState11AsValueIntoEPN4base11trace_event11TracedValueE(%"class.viz::SharedQuadState"*, %"class.base::trace_event::TracedValue"*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.logging::CheckError", align 8
  %4 = alloca { <2 x float>, <2 x float> }, align 8
  %5 = bitcast { <2 x float>, <2 x float> }* %4 to %"class.gfx::RectF"*
  %6 = getelementptr inbounds %"class.viz::SharedQuadState", %"class.viz::SharedQuadState"* %0, i64 0, i32 0
  tail call void @_ZN2cc8MathUtil16AddToTracedValueEPKcRKN3gfx9TransformEPN4base11trace_event11TracedValueE(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0), %"class.gfx::Transform"* dereferenceable(68) %6, %"class.base::trace_event::TracedValue"* %1) #5
  %7 = getelementptr inbounds %"class.viz::SharedQuadState", %"class.viz::SharedQuadState"* %0, i64 0, i32 1
  tail call void @_ZN2cc8MathUtil16AddToTracedValueEPKcRKN3gfx4RectEPN4base11trace_event11TracedValueE(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.2, i64 0, i64 0), %"class.gfx::Rect"* dereferenceable(16) %7, %"class.base::trace_event::TracedValue"* %1) #5
  %8 = getelementptr inbounds %"class.viz::SharedQuadState", %"class.viz::SharedQuadState"* %0, i64 0, i32 2
  tail call void @_ZN2cc8MathUtil16AddToTracedValueEPKcRKN3gfx4RectEPN4base11trace_event11TracedValueE(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.3, i64 0, i64 0), %"class.gfx::Rect"* dereferenceable(16) %8, %"class.base::trace_event::TracedValue"* %1) #5
  %9 = bitcast { <2 x float>, <2 x float> }* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %9) #5
  %10 = getelementptr inbounds %"class.viz::SharedQuadState", %"class.viz::SharedQuadState"* %0, i64 0, i32 3
  %11 = getelementptr inbounds %"class.gfx::MaskFilterInfo", %"class.gfx::MaskFilterInfo"* %10, i64 0, i32 0, i32 0, i32 0
  %12 = tail call { <2 x float>, <2 x float> } @_ZN3gfx13SkRectToRectFERK6SkRect(%struct.SkRect* dereferenceable(16) %11) #5
  %13 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %4, i64 0, i32 0
  %14 = extractvalue { <2 x float>, <2 x float> } %12, 0
  store <2 x float> %14, <2 x float>* %13, align 8
  %15 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %4, i64 0, i32 1
  %16 = extractvalue { <2 x float>, <2 x float> } %12, 1
  store <2 x float> %16, <2 x float>* %15, align 8
  call void @_ZN2cc8MathUtil16AddToTracedValueEPKcRKN3gfx5RectFEPN4base11trace_event11TracedValueE(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.4, i64 0, i64 0), %"class.gfx::RectF"* nonnull dereferenceable(16) %5, %"class.base::trace_event::TracedValue"* %1) #5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %9) #5
  %17 = getelementptr inbounds %"class.gfx::MaskFilterInfo", %"class.gfx::MaskFilterInfo"* %10, i64 0, i32 0
  call void @_ZN2cc8MathUtil27AddCornerRadiiToTracedValueEPKcRKN3gfx6RRectFEPN4base11trace_event11TracedValueE(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.5, i64 0, i64 0), %"class.gfx::RRectF"* dereferenceable(52) %17, %"class.base::trace_event::TracedValue"* %1) #5
  %18 = getelementptr inbounds %"class.viz::SharedQuadState", %"class.viz::SharedQuadState"* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0
  %19 = load i8, i8* %18, align 4, !range !3
  %20 = icmp eq i8 %19, 0
  br i1 %20, label %23, label %21

21:                                               ; preds = %2
  %22 = getelementptr inbounds %"class.viz::SharedQuadState", %"class.viz::SharedQuadState"* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 1, i32 0
  call void @_ZN2cc8MathUtil16AddToTracedValueEPKcRKN3gfx4RectEPN4base11trace_event11TracedValueE(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.6, i64 0, i64 0), %"class.gfx::Rect"* dereferenceable(16) %22, %"class.base::trace_event::TracedValue"* %1) #5
  br label %23

23:                                               ; preds = %2, %21
  %24 = getelementptr inbounds %"class.viz::SharedQuadState", %"class.viz::SharedQuadState"* %0, i64 0, i32 5
  %25 = load i8, i8* %24, align 4, !range !3
  %26 = icmp ne i8 %25, 0
  call void @_ZN4base11trace_event11TracedValue10SetBooleanEPKcb(%"class.base::trace_event::TracedValue"* %1, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.7, i64 0, i64 0), i1 zeroext %26) #5
  %27 = getelementptr inbounds %"class.viz::SharedQuadState", %"class.viz::SharedQuadState"* %0, i64 0, i32 7
  %28 = load float, float* %27, align 8
  %29 = fpext float %28 to double
  call void @_ZN4base11trace_event11TracedValue9SetDoubleEPKcd(%"class.base::trace_event::TracedValue"* %1, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.8, i64 0, i64 0), double %29) #5
  %30 = getelementptr inbounds %"class.viz::SharedQuadState", %"class.viz::SharedQuadState"* %0, i64 0, i32 8
  %31 = load i32, i32* %30, align 4
  %32 = call i8* @_Z16SkBlendMode_Name11SkBlendMode(i32 %31) #5
  %33 = icmp eq i8* %32, null
  br i1 %33, label %36, label %34

34:                                               ; preds = %23
  %35 = call i64 @strlen(i8* nonnull %32) #5
  br label %39

36:                                               ; preds = %23
  %37 = bitcast %"class.logging::CheckError"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %37) #5
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %3, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.12, i64 0, i64 0), i32 125, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i64 0, i64 0)) #5
  %38 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %3) #5
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %3) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37) #5
  br label %39

39:                                               ; preds = %34, %36
  %40 = phi i64 [ 0, %36 ], [ %35, %34 ]
  call void @_ZN4base11trace_event11TracedValue9SetStringEPKcNS_16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"class.base::trace_event::TracedValue"* %1, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.9, i64 0, i64 0), i8* %32, i64 %40) #5
  %41 = bitcast %"class.viz::SharedQuadState"* %0 to i8*
  call void @_ZN3viz11TracedValue40MakeDictIntoImplicitSnapshotWithCategoryEPKcPN4base11trace_event11TracedValueES2_PKv(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.10, i64 0, i64 0), %"class.base::trace_event::TracedValue"* %1, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0), i8* %41) #5
  ret void
}

declare void @_ZN2cc8MathUtil16AddToTracedValueEPKcRKN3gfx9TransformEPN4base11trace_event11TracedValueE(i8*, %"class.gfx::Transform"* dereferenceable(68), %"class.base::trace_event::TracedValue"*) local_unnamed_addr #2

declare void @_ZN2cc8MathUtil16AddToTracedValueEPKcRKN3gfx4RectEPN4base11trace_event11TracedValueE(i8*, %"class.gfx::Rect"* dereferenceable(16), %"class.base::trace_event::TracedValue"*) local_unnamed_addr #2

declare void @_ZN2cc8MathUtil16AddToTracedValueEPKcRKN3gfx5RectFEPN4base11trace_event11TracedValueE(i8*, %"class.gfx::RectF"* dereferenceable(16), %"class.base::trace_event::TracedValue"*) local_unnamed_addr #2

declare void @_ZN2cc8MathUtil27AddCornerRadiiToTracedValueEPKcRKN3gfx6RRectFEPN4base11trace_event11TracedValueE(i8*, %"class.gfx::RRectF"* dereferenceable(52), %"class.base::trace_event::TracedValue"*) local_unnamed_addr #2

declare void @_ZN4base11trace_event11TracedValue10SetBooleanEPKcb(%"class.base::trace_event::TracedValue"*, i8*, i1 zeroext) local_unnamed_addr #2

declare void @_ZN4base11trace_event11TracedValue9SetDoubleEPKcd(%"class.base::trace_event::TracedValue"*, i8*, double) local_unnamed_addr #2

declare void @_ZN4base11trace_event11TracedValue9SetStringEPKcNS_16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"class.base::trace_event::TracedValue"*, i8*, i8*, i64) local_unnamed_addr #2

declare i8* @_Z16SkBlendMode_Name11SkBlendMode(i32) local_unnamed_addr #2

declare void @_ZN3viz11TracedValue40MakeDictIntoImplicitSnapshotWithCategoryEPKcPN4base11trace_event11TracedValueES2_PKv(i8*, %"class.base::trace_event::TracedValue"*, i8*, i8*) local_unnamed_addr #2

declare i32 @_ZN4base14PlatformThread9CurrentIdEv() local_unnamed_addr #2

declare i64 @_ZN4base6subtle28TimeTicksNowIgnoringOverrideEv() local_unnamed_addr #2

declare i64 @_ZN20trace_event_internal37AddTraceEventWithThreadIdAndTimestampEcPKhPKcS3_yyiRKN4base9TimeTicksEPNS4_11trace_event14TraceArgumentsEj(i8 signext, i8*, i8*, i8*, i64, i64, i32, %"class.base::TimeTicks"* dereferenceable(8), %"class.base::trace_event::TraceArguments"*, i32) local_unnamed_addr #2

declare { <2 x float>, <2 x float> } @_ZN3gfx13SkRectToRectFERK6SkRect(%struct.SkRect* dereferenceable(16)) local_unnamed_addr #2

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #2

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #3

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = !{i8 0, i8 2}
