; ModuleID = '../../media/filters/wsola_internals.cc'
source_filename = "../../media/filters/wsola_internals.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.media::AudioBus" = type { i32 (...)**, %"class.std::__1::unique_ptr", i8, i64, i32, %"class.std::__1::vector", i32, i8, %"class.base::OnceCallback" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { float* }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { float**, float**, %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { float** }
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.4" }
%"struct.std::__1::__atomic_base.4" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZN5media8internal10InIntervalEiNSt3__14pairIiiEE(i32, i64) local_unnamed_addr #0 {
  %3 = trunc i64 %1 to i32
  %4 = icmp sle i32 %3, %0
  %5 = lshr i64 %1, 32
  %6 = trunc i64 %5 to i32
  %7 = icmp sge i32 %6, %0
  %8 = and i1 %4, %7
  ret i1 %8
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden float @_ZN5media8internal29MultiChannelSimilarityMeasureEPKfS2_S2_i(float* nocapture readonly, float* nocapture readonly, float* nocapture readonly, i32) local_unnamed_addr #1 {
  %5 = icmp sgt i32 %3, 0
  br i1 %5, label %6, label %29

6:                                                ; preds = %4
  %7 = zext i32 %3 to i64
  %8 = and i64 %7, 1
  %9 = icmp eq i32 %3, 1
  br i1 %9, label %12, label %10

10:                                               ; preds = %6
  %11 = sub nsw i64 %7, %8
  br label %31

12:                                               ; preds = %31, %6
  %13 = phi float [ undef, %6 ], [ %57, %31 ]
  %14 = phi i64 [ 0, %6 ], [ %58, %31 ]
  %15 = phi float [ 0.000000e+00, %6 ], [ %57, %31 ]
  %16 = icmp eq i64 %8, 0
  br i1 %16, label %29, label %17

17:                                               ; preds = %12
  %18 = getelementptr inbounds float, float* %0, i64 %14
  %19 = load float, float* %18, align 4
  %20 = getelementptr inbounds float, float* %1, i64 %14
  %21 = load float, float* %20, align 4
  %22 = getelementptr inbounds float, float* %2, i64 %14
  %23 = load float, float* %22, align 4
  %24 = fmul float %21, %23
  %25 = fadd float %24, 0x3D71979980000000
  %26 = tail call float @sqrtf(float %25) #9
  %27 = fdiv float %19, %26
  %28 = fadd float %15, %27
  br label %29

29:                                               ; preds = %17, %12, %4
  %30 = phi float [ 0.000000e+00, %4 ], [ %13, %12 ], [ %28, %17 ]
  ret float %30

31:                                               ; preds = %31, %10
  %32 = phi i64 [ 0, %10 ], [ %58, %31 ]
  %33 = phi float [ 0.000000e+00, %10 ], [ %57, %31 ]
  %34 = phi i64 [ %11, %10 ], [ %59, %31 ]
  %35 = getelementptr inbounds float, float* %0, i64 %32
  %36 = load float, float* %35, align 4
  %37 = getelementptr inbounds float, float* %1, i64 %32
  %38 = load float, float* %37, align 4
  %39 = getelementptr inbounds float, float* %2, i64 %32
  %40 = load float, float* %39, align 4
  %41 = fmul float %38, %40
  %42 = fadd float %41, 0x3D71979980000000
  %43 = tail call float @sqrtf(float %42) #9
  %44 = fdiv float %36, %43
  %45 = fadd float %33, %44
  %46 = or i64 %32, 1
  %47 = getelementptr inbounds float, float* %0, i64 %46
  %48 = load float, float* %47, align 4
  %49 = getelementptr inbounds float, float* %1, i64 %46
  %50 = load float, float* %49, align 4
  %51 = getelementptr inbounds float, float* %2, i64 %46
  %52 = load float, float* %51, align 4
  %53 = fmul float %50, %52
  %54 = fadd float %53, 0x3D71979980000000
  %55 = tail call float @sqrtf(float %54) #9
  %56 = fdiv float %48, %55
  %57 = fadd float %45, %56
  %58 = add nuw nsw i64 %32, 2
  %59 = add i64 %34, -2
  %60 = icmp eq i64 %59, 0
  br i1 %60, label %12, label %31
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5media8internal22MultiChannelDotProductEPKNS_8AudioBusEiS3_iiPf(%"class.media::AudioBus"* nocapture readonly, i32, %"class.media::AudioBus"* nocapture readonly, i32, i32, float* nocapture) local_unnamed_addr #2 {
  %7 = srem i32 %4, 4
  %8 = sub nsw i32 %4, %7
  %9 = getelementptr inbounds %"class.media::AudioBus", %"class.media::AudioBus"* %0, i64 0, i32 5
  %10 = getelementptr inbounds %"class.media::AudioBus", %"class.media::AudioBus"* %0, i64 0, i32 5, i32 0, i32 1
  %11 = bitcast float*** %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = bitcast %"class.std::__1::vector"* %9 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = sub i64 %12, %14
  %16 = lshr exact i64 %15, 3
  %17 = trunc i64 %16 to i32
  %18 = icmp sgt i32 %17, 0
  br i1 %18, label %19, label %28

19:                                               ; preds = %6
  %20 = inttoptr i64 %14 to float**
  %21 = getelementptr inbounds %"class.media::AudioBus", %"class.media::AudioBus"* %0, i64 0, i32 5, i32 0, i32 0
  %22 = sext i32 %1 to i64
  %23 = getelementptr inbounds %"class.media::AudioBus", %"class.media::AudioBus"* %2, i64 0, i32 5, i32 0, i32 0
  %24 = sext i32 %3 to i64
  %25 = icmp sgt i32 %8, 0
  %26 = sext i32 %8 to i64
  %27 = and i64 %16, 4294967295
  br label %30

28:                                               ; preds = %40, %6
  %29 = icmp eq i32 %7, 0
  br i1 %29, label %137, label %65

30:                                               ; preds = %50, %19
  %31 = phi float** [ %20, %19 ], [ %51, %50 ]
  %32 = phi i64 [ 0, %19 ], [ %48, %50 ]
  %33 = getelementptr inbounds float*, float** %31, i64 %32
  %34 = load float*, float** %33, align 8
  %35 = getelementptr inbounds float, float* %34, i64 %22
  %36 = load float**, float*** %23, align 8
  %37 = getelementptr inbounds float*, float** %36, i64 %32
  %38 = load float*, float** %37, align 8
  %39 = getelementptr inbounds float, float* %38, i64 %24
  br i1 %25, label %52, label %40

40:                                               ; preds = %52, %30
  %41 = phi <4 x float> [ zeroinitializer, %30 ], [ %62, %52 ]
  %42 = shufflevector <4 x float> %41, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 2, i32 3>
  %43 = fadd <4 x float> %41, %42
  %44 = getelementptr inbounds float, float* %5, i64 %32
  %45 = extractelement <4 x float> %43, i32 1
  %46 = extractelement <4 x float> %43, i32 0
  %47 = fadd float %46, %45
  store float %47, float* %44, align 1
  %48 = add nuw nsw i64 %32, 1
  %49 = icmp eq i64 %48, %27
  br i1 %49, label %28, label %50

50:                                               ; preds = %40
  %51 = load float**, float*** %21, align 8
  br label %30

52:                                               ; preds = %30, %52
  %53 = phi i64 [ %63, %52 ], [ 0, %30 ]
  %54 = phi <4 x float> [ %62, %52 ], [ zeroinitializer, %30 ]
  %55 = getelementptr inbounds float, float* %35, i64 %53
  %56 = bitcast float* %55 to <4 x float>*
  %57 = load <4 x float>, <4 x float>* %56, align 1
  %58 = getelementptr inbounds float, float* %39, i64 %53
  %59 = bitcast float* %58 to <4 x float>*
  %60 = load <4 x float>, <4 x float>* %59, align 1
  %61 = fmul <4 x float> %57, %60
  %62 = fadd <4 x float> %54, %61
  %63 = add nuw nsw i64 %53, 4
  %64 = icmp slt i64 %63, %26
  br i1 %64, label %52, label %40

65:                                               ; preds = %28
  %66 = load i64, i64* %11, align 8
  %67 = load i64, i64* %13, align 8
  %68 = sub i64 %66, %67
  %69 = lshr exact i64 %68, 3
  %70 = trunc i64 %69 to i32
  %71 = icmp sgt i32 %70, 0
  br i1 %71, label %72, label %137

72:                                               ; preds = %65
  %73 = add nsw i32 %8, %3
  %74 = add nsw i32 %8, %1
  %75 = sext i32 %74 to i64
  %76 = getelementptr inbounds %"class.media::AudioBus", %"class.media::AudioBus"* %2, i64 0, i32 5, i32 0, i32 0
  %77 = sext i32 %73 to i64
  %78 = icmp sgt i32 %7, 0
  %79 = and i32 %7, 1
  %80 = icmp eq i32 %7, 1
  %81 = sub nsw i32 %7, %79
  %82 = icmp eq i32 %79, 0
  br label %83

83:                                               ; preds = %72, %110
  %84 = phi i64 [ %67, %72 ], [ %111, %110 ]
  %85 = phi i64 [ %66, %72 ], [ %112, %110 ]
  %86 = phi i64 [ 0, %72 ], [ %113, %110 ]
  br i1 %78, label %87, label %110

87:                                               ; preds = %83
  %88 = inttoptr i64 %84 to float**
  %89 = load float**, float*** %76, align 8
  %90 = getelementptr inbounds float*, float** %89, i64 %86
  %91 = load float*, float** %90, align 8
  %92 = getelementptr inbounds float, float* %91, i64 %77
  %93 = getelementptr inbounds float*, float** %88, i64 %86
  %94 = load float*, float** %93, align 8
  %95 = getelementptr inbounds float, float* %94, i64 %75
  %96 = getelementptr inbounds float, float* %5, i64 %86
  %97 = load float, float* %96, align 4
  br i1 %80, label %98, label %118

98:                                               ; preds = %118, %87
  %99 = phi float [ %97, %87 ], [ %134, %118 ]
  %100 = phi float* [ %92, %87 ], [ %131, %118 ]
  %101 = phi float* [ %95, %87 ], [ %129, %118 ]
  br i1 %82, label %107, label %102

102:                                              ; preds = %98
  %103 = load float, float* %101, align 4
  %104 = load float, float* %100, align 4
  %105 = fmul float %103, %104
  %106 = fadd float %99, %105
  store float %106, float* %96, align 4
  br label %107

107:                                              ; preds = %98, %102
  %108 = load i64, i64* %11, align 8
  %109 = load i64, i64* %13, align 8
  br label %110

110:                                              ; preds = %107, %83
  %111 = phi i64 [ %109, %107 ], [ %84, %83 ]
  %112 = phi i64 [ %108, %107 ], [ %85, %83 ]
  %113 = add nuw nsw i64 %86, 1
  %114 = sub i64 %112, %111
  %115 = shl i64 %114, 29
  %116 = ashr i64 %115, 32
  %117 = icmp slt i64 %113, %116
  br i1 %117, label %83, label %137

118:                                              ; preds = %87, %118
  %119 = phi float [ %134, %118 ], [ %97, %87 ]
  %120 = phi float* [ %131, %118 ], [ %92, %87 ]
  %121 = phi float* [ %129, %118 ], [ %95, %87 ]
  %122 = phi i32 [ %135, %118 ], [ %81, %87 ]
  %123 = getelementptr inbounds float, float* %121, i64 1
  %124 = load float, float* %121, align 4
  %125 = getelementptr inbounds float, float* %120, i64 1
  %126 = load float, float* %120, align 4
  %127 = fmul float %124, %126
  %128 = fadd float %119, %127
  store float %128, float* %96, align 4
  %129 = getelementptr inbounds float, float* %121, i64 2
  %130 = load float, float* %123, align 4
  %131 = getelementptr inbounds float, float* %120, i64 2
  %132 = load float, float* %125, align 4
  %133 = fmul float %130, %132
  %134 = fadd float %128, %133
  store float %134, float* %96, align 4
  %135 = add i32 %122, -2
  %136 = icmp eq i32 %135, 0
  br i1 %136, label %98, label %118

137:                                              ; preds = %110, %65, %28
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5media8internal31MultiChannelMovingBlockEnergiesEPKNS_8AudioBusEiPf(%"class.media::AudioBus"* nocapture readonly, i32, float* nocapture) local_unnamed_addr #3 {
  %4 = getelementptr inbounds %"class.media::AudioBus", %"class.media::AudioBus"* %0, i64 0, i32 6
  %5 = load i32, i32* %4, align 8
  %6 = sub i32 1, %1
  %7 = add i32 %6, %5
  %8 = getelementptr inbounds %"class.media::AudioBus", %"class.media::AudioBus"* %0, i64 0, i32 5
  %9 = getelementptr inbounds %"class.media::AudioBus", %"class.media::AudioBus"* %0, i64 0, i32 5, i32 0, i32 1
  %10 = bitcast float*** %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = bitcast %"class.std::__1::vector"* %8 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = sub i64 %11, %13
  %15 = lshr exact i64 %14, 3
  %16 = trunc i64 %15 to i32
  %17 = icmp sgt i32 %16, 0
  br i1 %17, label %18, label %37

18:                                               ; preds = %3
  %19 = icmp sgt i32 %1, 0
  %20 = sext i32 %1 to i64
  %21 = icmp sgt i32 %7, 1
  %22 = shl i64 %14, 29
  %23 = ashr exact i64 %22, 32
  %24 = zext i32 %1 to i64
  %25 = zext i32 %7 to i64
  %26 = add nsw i64 %24, -1
  %27 = add nsw i64 %25, -1
  %28 = and i64 %24, 3
  %29 = icmp ult i64 %26, 3
  %30 = sub nsw i64 %24, %28
  %31 = icmp eq i64 %28, 0
  %32 = icmp eq i64 %22, 4294967296
  %33 = and i64 %27, 1
  %34 = icmp eq i32 %7, 2
  %35 = sub nsw i64 %27, %33
  %36 = icmp eq i64 %33, 0
  br label %38

37:                                               ; preds = %129, %3
  ret void

38:                                               ; preds = %18, %129
  %39 = phi i64 [ %13, %18 ], [ %132, %129 ]
  %40 = phi i64 [ 0, %18 ], [ %130, %129 ]
  %41 = getelementptr float, float* %2, i64 %40
  %42 = inttoptr i64 %39 to float**
  %43 = getelementptr inbounds float*, float** %42, i64 %40
  %44 = load float*, float** %43, align 8
  %45 = getelementptr inbounds float, float* %2, i64 %40
  store float 0.000000e+00, float* %45, align 4
  br i1 %19, label %46, label %61

46:                                               ; preds = %38
  br i1 %29, label %47, label %88

47:                                               ; preds = %88, %46
  %48 = phi float [ 0.000000e+00, %46 ], [ %110, %88 ]
  %49 = phi i64 [ 0, %46 ], [ %111, %88 ]
  br i1 %31, label %61, label %50

50:                                               ; preds = %47, %50
  %51 = phi float [ %57, %50 ], [ %48, %47 ]
  %52 = phi i64 [ %58, %50 ], [ %49, %47 ]
  %53 = phi i64 [ %59, %50 ], [ %28, %47 ]
  %54 = getelementptr inbounds float, float* %44, i64 %52
  %55 = load float, float* %54, align 4
  %56 = fmul float %55, %55
  %57 = fadd float %51, %56
  store float %57, float* %45, align 4
  %58 = add nuw nsw i64 %52, 1
  %59 = add i64 %53, -1
  %60 = icmp eq i64 %59, 0
  br i1 %60, label %61, label %50, !llvm.loop !2

61:                                               ; preds = %47, %50, %38
  br i1 %21, label %62, label %129

62:                                               ; preds = %61
  %63 = getelementptr inbounds float, float* %44, i64 %20
  br i1 %32, label %86, label %64

64:                                               ; preds = %62, %64
  %65 = phi i64 [ %82, %64 ], [ 1, %62 ]
  %66 = phi float* [ %83, %64 ], [ %63, %62 ]
  %67 = phi float* [ %84, %64 ], [ %44, %62 ]
  %68 = add nsw i64 %65, -1
  %69 = mul nsw i64 %68, %23
  %70 = add nsw i64 %69, %40
  %71 = getelementptr inbounds float, float* %2, i64 %70
  %72 = load float, float* %71, align 4
  %73 = load float, float* %67, align 4
  %74 = fmul float %73, %73
  %75 = fsub float %72, %74
  %76 = load float, float* %66, align 4
  %77 = fmul float %76, %76
  %78 = fadd float %75, %77
  %79 = mul nsw i64 %65, %23
  %80 = add nsw i64 %79, %40
  %81 = getelementptr inbounds float, float* %2, i64 %80
  store float %78, float* %81, align 4
  %82 = add nuw nsw i64 %65, 1
  %83 = getelementptr inbounds float, float* %66, i64 1
  %84 = getelementptr inbounds float, float* %67, i64 1
  %85 = icmp eq i64 %82, %25
  br i1 %85, label %129, label %64

86:                                               ; preds = %62
  %87 = load float, float* %41, align 4
  br i1 %34, label %114, label %137

88:                                               ; preds = %46, %88
  %89 = phi float [ %110, %88 ], [ 0.000000e+00, %46 ]
  %90 = phi i64 [ %111, %88 ], [ 0, %46 ]
  %91 = phi i64 [ %112, %88 ], [ %30, %46 ]
  %92 = getelementptr inbounds float, float* %44, i64 %90
  %93 = load float, float* %92, align 4
  %94 = fmul float %93, %93
  %95 = fadd float %89, %94
  store float %95, float* %45, align 4
  %96 = or i64 %90, 1
  %97 = getelementptr inbounds float, float* %44, i64 %96
  %98 = load float, float* %97, align 4
  %99 = fmul float %98, %98
  %100 = fadd float %95, %99
  store float %100, float* %45, align 4
  %101 = or i64 %90, 2
  %102 = getelementptr inbounds float, float* %44, i64 %101
  %103 = load float, float* %102, align 4
  %104 = fmul float %103, %103
  %105 = fadd float %100, %104
  store float %105, float* %45, align 4
  %106 = or i64 %90, 3
  %107 = getelementptr inbounds float, float* %44, i64 %106
  %108 = load float, float* %107, align 4
  %109 = fmul float %108, %108
  %110 = fadd float %105, %109
  store float %110, float* %45, align 4
  %111 = add nuw nsw i64 %90, 4
  %112 = add i64 %91, -4
  %113 = icmp eq i64 %112, 0
  br i1 %113, label %47, label %88

114:                                              ; preds = %137, %86
  %115 = phi float [ %87, %86 ], [ %160, %137 ]
  %116 = phi i64 [ 1, %86 ], [ %164, %137 ]
  %117 = phi float* [ %63, %86 ], [ %165, %137 ]
  %118 = phi float* [ %44, %86 ], [ %166, %137 ]
  br i1 %36, label %129, label %119

119:                                              ; preds = %114
  %120 = load float, float* %118, align 4
  %121 = fmul float %120, %120
  %122 = fsub float %115, %121
  %123 = load float, float* %117, align 4
  %124 = fmul float %123, %123
  %125 = fadd float %122, %124
  %126 = mul nsw i64 %116, %23
  %127 = add nsw i64 %126, %40
  %128 = getelementptr inbounds float, float* %2, i64 %127
  store float %125, float* %128, align 4
  br label %129

129:                                              ; preds = %64, %119, %114, %61
  %130 = add nuw nsw i64 %40, 1
  %131 = load i64, i64* %10, align 8
  %132 = load i64, i64* %12, align 8
  %133 = sub i64 %131, %132
  %134 = shl i64 %133, 29
  %135 = ashr i64 %134, 32
  %136 = icmp slt i64 %130, %135
  br i1 %136, label %38, label %37

137:                                              ; preds = %86, %137
  %138 = phi float [ %160, %137 ], [ %87, %86 ]
  %139 = phi i64 [ %164, %137 ], [ 1, %86 ]
  %140 = phi float* [ %165, %137 ], [ %63, %86 ]
  %141 = phi float* [ %166, %137 ], [ %44, %86 ]
  %142 = phi i64 [ %167, %137 ], [ %35, %86 ]
  %143 = load float, float* %141, align 4
  %144 = fmul float %143, %143
  %145 = fsub float %138, %144
  %146 = load float, float* %140, align 4
  %147 = fmul float %146, %146
  %148 = fadd float %145, %147
  %149 = mul nsw i64 %139, %23
  %150 = add nsw i64 %149, %40
  %151 = getelementptr inbounds float, float* %2, i64 %150
  store float %148, float* %151, align 4
  %152 = add nuw nsw i64 %139, 1
  %153 = getelementptr inbounds float, float* %140, i64 1
  %154 = getelementptr inbounds float, float* %141, i64 1
  %155 = load float, float* %154, align 4
  %156 = fmul float %155, %155
  %157 = fsub float %148, %156
  %158 = load float, float* %153, align 4
  %159 = fmul float %158, %158
  %160 = fadd float %157, %159
  %161 = mul nsw i64 %152, %23
  %162 = add nsw i64 %161, %40
  %163 = getelementptr inbounds float, float* %2, i64 %162
  store float %160, float* %163, align 4
  %164 = add nuw nsw i64 %139, 2
  %165 = getelementptr inbounds float, float* %140, i64 2
  %166 = getelementptr inbounds float, float* %141, i64 2
  %167 = add i64 %142, -2
  %168 = icmp eq i64 %167, 0
  br i1 %168, label %114, label %137
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5media8internal22QuadraticInterpolationEPKfPfS3_(float* nocapture readonly, float* nocapture, float* nocapture) local_unnamed_addr #3 {
  %4 = getelementptr inbounds float, float* %0, i64 2
  %5 = load float, float* %4, align 4
  %6 = load float, float* %0, align 4
  %7 = fadd float %5, %6
  %8 = fmul float %7, 5.000000e-01
  %9 = getelementptr inbounds float, float* %0, i64 1
  %10 = load float, float* %9, align 4
  %11 = fsub float %8, %10
  %12 = fsub float %5, %6
  %13 = fmul float %12, 5.000000e-01
  %14 = fcmp oeq float %11, 0.000000e+00
  br i1 %14, label %15, label %17

15:                                               ; preds = %3
  store float 0.000000e+00, float* %1, align 4
  %16 = load float, float* %9, align 4
  br label %26

17:                                               ; preds = %3
  %18 = fsub float -0.000000e+00, %13
  %19 = fmul float %11, 2.000000e+00
  %20 = fdiv float %18, %19
  store float %20, float* %1, align 4
  %21 = fmul float %11, %20
  %22 = fmul float %20, %21
  %23 = fmul float %13, %20
  %24 = fadd float %23, %22
  %25 = fadd float %10, %24
  br label %26

26:                                               ; preds = %17, %15
  %27 = phi float [ %25, %17 ], [ %16, %15 ]
  store float %27, float* %2, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN5media8internal15DecimatedSearchEiNSt3__14pairIiiEEPKNS_8AudioBusES6_PKfS8_(i32, i64, %"class.media::AudioBus"* nocapture readonly, %"class.media::AudioBus"* nocapture readonly, float* nocapture readonly, float* nocapture readonly) local_unnamed_addr #4 {
  %7 = getelementptr inbounds %"class.media::AudioBus", %"class.media::AudioBus"* %3, i64 0, i32 5
  %8 = getelementptr inbounds %"class.media::AudioBus", %"class.media::AudioBus"* %3, i64 0, i32 5, i32 0, i32 1
  %9 = bitcast float*** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %"class.std::__1::vector"* %7 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = sub i64 %10, %12
  %14 = lshr exact i64 %13, 3
  %15 = trunc i64 %14 to i32
  %16 = getelementptr inbounds %"class.media::AudioBus", %"class.media::AudioBus"* %2, i64 0, i32 6
  %17 = load i32, i32* %16, align 8
  %18 = getelementptr inbounds %"class.media::AudioBus", %"class.media::AudioBus"* %3, i64 0, i32 6
  %19 = load i32, i32* %18, align 8
  %20 = sub i32 1, %17
  %21 = add i32 %20, %19
  %22 = shl i64 %13, 29
  %23 = ashr exact i64 %22, 32
  %24 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %23, i64 4)
  %25 = extractvalue { i64, i1 } %24, 1
  %26 = extractvalue { i64, i1 } %24, 0
  %27 = select i1 %25, i64 -1, i64 %26
  %28 = tail call i8* @_Znam(i64 %27) #10
  %29 = bitcast i8* %28 to float*
  tail call void @_ZN5media8internal22MultiChannelDotProductEPKNS_8AudioBusEiS3_iiPf(%"class.media::AudioBus"* %2, i32 0, %"class.media::AudioBus"* %3, i32 0, i32 %17, float* nonnull %29)
  %30 = icmp sgt i32 %15, 0
  br i1 %30, label %31, label %84

31:                                               ; preds = %6
  %32 = and i64 %14, 4294967295
  %33 = and i64 %14, 1
  %34 = icmp eq i64 %32, 1
  br i1 %34, label %67, label %35

35:                                               ; preds = %31
  %36 = sub nsw i64 %32, %33
  br label %37

37:                                               ; preds = %37, %35
  %38 = phi i64 [ 0, %35 ], [ %64, %37 ]
  %39 = phi float [ 0.000000e+00, %35 ], [ %63, %37 ]
  %40 = phi i64 [ %36, %35 ], [ %65, %37 ]
  %41 = getelementptr inbounds float, float* %29, i64 %38
  %42 = load float, float* %41, align 4
  %43 = getelementptr inbounds float, float* %4, i64 %38
  %44 = load float, float* %43, align 4
  %45 = getelementptr inbounds float, float* %5, i64 %38
  %46 = load float, float* %45, align 4
  %47 = fmul float %44, %46
  %48 = fadd float %47, 0x3D71979980000000
  %49 = tail call float @sqrtf(float %48) #9
  %50 = fdiv float %42, %49
  %51 = fadd float %39, %50
  %52 = or i64 %38, 1
  %53 = getelementptr inbounds float, float* %29, i64 %52
  %54 = load float, float* %53, align 4
  %55 = getelementptr inbounds float, float* %4, i64 %52
  %56 = load float, float* %55, align 4
  %57 = getelementptr inbounds float, float* %5, i64 %52
  %58 = load float, float* %57, align 4
  %59 = fmul float %56, %58
  %60 = fadd float %59, 0x3D71979980000000
  %61 = tail call float @sqrtf(float %60) #9
  %62 = fdiv float %54, %61
  %63 = fadd float %51, %62
  %64 = add nuw nsw i64 %38, 2
  %65 = add i64 %40, -2
  %66 = icmp eq i64 %65, 0
  br i1 %66, label %67, label %37

67:                                               ; preds = %37, %31
  %68 = phi float [ undef, %31 ], [ %63, %37 ]
  %69 = phi i64 [ 0, %31 ], [ %64, %37 ]
  %70 = phi float [ 0.000000e+00, %31 ], [ %63, %37 ]
  %71 = icmp eq i64 %33, 0
  br i1 %71, label %84, label %72

72:                                               ; preds = %67
  %73 = getelementptr inbounds float, float* %29, i64 %69
  %74 = load float, float* %73, align 4
  %75 = getelementptr inbounds float, float* %4, i64 %69
  %76 = load float, float* %75, align 4
  %77 = getelementptr inbounds float, float* %5, i64 %69
  %78 = load float, float* %77, align 4
  %79 = fmul float %76, %78
  %80 = fadd float %79, 0x3D71979980000000
  %81 = tail call float @sqrtf(float %80) #9
  %82 = fdiv float %74, %81
  %83 = fadd float %70, %82
  br label %84

84:                                               ; preds = %72, %67, %6
  %85 = phi float [ 0.000000e+00, %6 ], [ %68, %67 ], [ %83, %72 ]
  %86 = icmp sgt i32 %21, %0
  br i1 %86, label %87, label %282

87:                                               ; preds = %84
  tail call void @_ZN5media8internal22MultiChannelDotProductEPKNS_8AudioBusEiS3_iiPf(%"class.media::AudioBus"* %2, i32 0, %"class.media::AudioBus"* %3, i32 %0, i32 %17, float* nonnull %29)
  %88 = mul nsw i32 %15, %0
  %89 = sext i32 %88 to i64
  %90 = getelementptr inbounds float, float* %5, i64 %89
  br i1 %30, label %91, label %144

91:                                               ; preds = %87
  %92 = and i64 %14, 4294967295
  %93 = and i64 %14, 1
  %94 = icmp eq i64 %92, 1
  br i1 %94, label %127, label %95

95:                                               ; preds = %91
  %96 = sub nsw i64 %92, %93
  br label %97

97:                                               ; preds = %97, %95
  %98 = phi i64 [ 0, %95 ], [ %124, %97 ]
  %99 = phi float [ 0.000000e+00, %95 ], [ %123, %97 ]
  %100 = phi i64 [ %96, %95 ], [ %125, %97 ]
  %101 = getelementptr inbounds float, float* %29, i64 %98
  %102 = load float, float* %101, align 4
  %103 = getelementptr inbounds float, float* %4, i64 %98
  %104 = load float, float* %103, align 4
  %105 = getelementptr inbounds float, float* %90, i64 %98
  %106 = load float, float* %105, align 4
  %107 = fmul float %104, %106
  %108 = fadd float %107, 0x3D71979980000000
  %109 = tail call float @sqrtf(float %108) #9
  %110 = fdiv float %102, %109
  %111 = fadd float %99, %110
  %112 = or i64 %98, 1
  %113 = getelementptr inbounds float, float* %29, i64 %112
  %114 = load float, float* %113, align 4
  %115 = getelementptr inbounds float, float* %4, i64 %112
  %116 = load float, float* %115, align 4
  %117 = getelementptr inbounds float, float* %90, i64 %112
  %118 = load float, float* %117, align 4
  %119 = fmul float %116, %118
  %120 = fadd float %119, 0x3D71979980000000
  %121 = tail call float @sqrtf(float %120) #9
  %122 = fdiv float %114, %121
  %123 = fadd float %111, %122
  %124 = add nuw nsw i64 %98, 2
  %125 = add i64 %100, -2
  %126 = icmp eq i64 %125, 0
  br i1 %126, label %127, label %97

127:                                              ; preds = %97, %91
  %128 = phi float [ undef, %91 ], [ %123, %97 ]
  %129 = phi i64 [ 0, %91 ], [ %124, %97 ]
  %130 = phi float [ 0.000000e+00, %91 ], [ %123, %97 ]
  %131 = icmp eq i64 %93, 0
  br i1 %131, label %144, label %132

132:                                              ; preds = %127
  %133 = getelementptr inbounds float, float* %29, i64 %129
  %134 = load float, float* %133, align 4
  %135 = getelementptr inbounds float, float* %4, i64 %129
  %136 = load float, float* %135, align 4
  %137 = getelementptr inbounds float, float* %90, i64 %129
  %138 = load float, float* %137, align 4
  %139 = fmul float %136, %138
  %140 = fadd float %139, 0x3D71979980000000
  %141 = tail call float @sqrtf(float %140) #9
  %142 = fdiv float %134, %141
  %143 = fadd float %130, %142
  br label %144

144:                                              ; preds = %132, %127, %87
  %145 = phi float [ 0.000000e+00, %87 ], [ %128, %127 ], [ %143, %132 ]
  %146 = shl i32 %0, 1
  %147 = icmp slt i32 %146, %21
  br i1 %147, label %148, label %166

148:                                              ; preds = %144
  %149 = and i64 %14, 4294967295
  %150 = trunc i64 %1 to i32
  %151 = lshr i64 %1, 32
  %152 = trunc i64 %151 to i32
  %153 = sitofp i32 %0 to float
  %154 = sext i32 %146 to i64
  %155 = sext i32 %0 to i64
  %156 = sext i32 %21 to i64
  %157 = shl i64 %13, 29
  %158 = ashr exact i64 %157, 32
  %159 = ashr i64 %1, 32
  %160 = shl i64 %1, 32
  %161 = ashr exact i64 %160, 32
  %162 = and i64 %14, 1
  %163 = icmp eq i64 %149, 1
  %164 = sub nsw i64 %149, %162
  %165 = icmp eq i64 %162, 0
  br label %169

166:                                              ; preds = %144
  %167 = fcmp ogt float %145, %85
  %168 = select i1 %167, i32 %0, i32 0
  br label %282

169:                                              ; preds = %148, %277
  %170 = phi i64 [ %154, %148 ], [ %280, %277 ]
  %171 = phi i32 [ 0, %148 ], [ %279, %277 ]
  %172 = phi float [ %85, %148 ], [ %278, %277 ]
  %173 = phi float [ %85, %148 ], [ %174, %277 ]
  %174 = phi float [ %145, %148 ], [ %226, %277 ]
  %175 = trunc i64 %170 to i32
  tail call void @_ZN5media8internal22MultiChannelDotProductEPKNS_8AudioBusEiS3_iiPf(%"class.media::AudioBus"* %2, i32 0, %"class.media::AudioBus"* %3, i32 %175, i32 %17, float* nonnull %29)
  %176 = mul nsw i64 %170, %158
  %177 = getelementptr inbounds float, float* %5, i64 %176
  br i1 %30, label %178, label %225

178:                                              ; preds = %169
  br i1 %163, label %209, label %179

179:                                              ; preds = %178, %179
  %180 = phi i64 [ %206, %179 ], [ 0, %178 ]
  %181 = phi float [ %205, %179 ], [ 0.000000e+00, %178 ]
  %182 = phi i64 [ %207, %179 ], [ %164, %178 ]
  %183 = getelementptr inbounds float, float* %29, i64 %180
  %184 = load float, float* %183, align 4
  %185 = getelementptr inbounds float, float* %4, i64 %180
  %186 = load float, float* %185, align 4
  %187 = getelementptr inbounds float, float* %177, i64 %180
  %188 = load float, float* %187, align 4
  %189 = fmul float %186, %188
  %190 = fadd float %189, 0x3D71979980000000
  %191 = tail call float @sqrtf(float %190) #9
  %192 = fdiv float %184, %191
  %193 = fadd float %181, %192
  %194 = or i64 %180, 1
  %195 = getelementptr inbounds float, float* %29, i64 %194
  %196 = load float, float* %195, align 4
  %197 = getelementptr inbounds float, float* %4, i64 %194
  %198 = load float, float* %197, align 4
  %199 = getelementptr inbounds float, float* %177, i64 %194
  %200 = load float, float* %199, align 4
  %201 = fmul float %198, %200
  %202 = fadd float %201, 0x3D71979980000000
  %203 = tail call float @sqrtf(float %202) #9
  %204 = fdiv float %196, %203
  %205 = fadd float %193, %204
  %206 = add nuw nsw i64 %180, 2
  %207 = add i64 %182, -2
  %208 = icmp eq i64 %207, 0
  br i1 %208, label %209, label %179

209:                                              ; preds = %179, %178
  %210 = phi float [ undef, %178 ], [ %205, %179 ]
  %211 = phi i64 [ 0, %178 ], [ %206, %179 ]
  %212 = phi float [ 0.000000e+00, %178 ], [ %205, %179 ]
  br i1 %165, label %225, label %213

213:                                              ; preds = %209
  %214 = getelementptr inbounds float, float* %29, i64 %211
  %215 = load float, float* %214, align 4
  %216 = getelementptr inbounds float, float* %4, i64 %211
  %217 = load float, float* %216, align 4
  %218 = getelementptr inbounds float, float* %177, i64 %211
  %219 = load float, float* %218, align 4
  %220 = fmul float %217, %219
  %221 = fadd float %220, 0x3D71979980000000
  %222 = tail call float @sqrtf(float %221) #9
  %223 = fdiv float %215, %222
  %224 = fadd float %212, %223
  br label %225

225:                                              ; preds = %213, %209, %169
  %226 = phi float [ 0.000000e+00, %169 ], [ %210, %209 ], [ %224, %213 ]
  %227 = fcmp ule float %174, %173
  %228 = fcmp ult float %174, %226
  %229 = or i1 %227, %228
  br i1 %229, label %230, label %234

230:                                              ; preds = %225
  %231 = fcmp oge float %174, %173
  %232 = fcmp ogt float %174, %226
  %233 = and i1 %231, %232
  br i1 %233, label %234, label %266

234:                                              ; preds = %230, %225
  %235 = fadd float %173, %226
  %236 = fmul float %235, 5.000000e-01
  %237 = fsub float %236, %174
  %238 = fsub float %226, %173
  %239 = fmul float %238, 5.000000e-01
  %240 = fcmp oeq float %237, 0.000000e+00
  br i1 %240, label %250, label %241

241:                                              ; preds = %234
  %242 = fsub float -0.000000e+00, %239
  %243 = fmul float %237, 2.000000e+00
  %244 = fdiv float %242, %243
  %245 = fmul float %237, %244
  %246 = fmul float %244, %245
  %247 = fmul float %239, %244
  %248 = fadd float %247, %246
  %249 = fadd float %174, %248
  br label %250

250:                                              ; preds = %234, %241
  %251 = phi float [ %244, %241 ], [ 0.000000e+00, %234 ]
  %252 = phi float [ %249, %241 ], [ %174, %234 ]
  %253 = fmul float %251, %153
  %254 = fadd float %253, 5.000000e-01
  %255 = fptosi float %254 to i32
  %256 = trunc i64 %170 to i32
  %257 = sub i32 %256, %0
  %258 = add nsw i32 %257, %255
  %259 = fcmp ogt float %252, %172
  br i1 %259, label %260, label %277

260:                                              ; preds = %250
  %261 = icmp sge i32 %258, %150
  %262 = icmp sle i32 %258, %152
  %263 = and i1 %261, %262
  %264 = select i1 %263, float %172, float %252
  %265 = select i1 %263, i32 %171, i32 %258
  br label %277

266:                                              ; preds = %230
  %267 = add nsw i64 %170, %155
  %268 = icmp sge i64 %267, %156
  %269 = fcmp ogt float %226, %172
  %270 = and i1 %268, %269
  br i1 %270, label %271, label %277

271:                                              ; preds = %266
  %272 = icmp sge i64 %170, %161
  %273 = icmp sle i64 %170, %159
  %274 = and i1 %272, %273
  %275 = select i1 %274, float %172, float %226
  %276 = select i1 %274, i32 %171, i32 %175
  br label %277

277:                                              ; preds = %250, %260, %271, %266
  %278 = phi float [ %172, %266 ], [ %275, %271 ], [ %172, %250 ], [ %264, %260 ]
  %279 = phi i32 [ %171, %266 ], [ %276, %271 ], [ %171, %250 ], [ %265, %260 ]
  %280 = add i64 %170, %155
  %281 = icmp slt i64 %280, %156
  br i1 %281, label %169, label %282

282:                                              ; preds = %277, %84, %166
  %283 = phi i32 [ %168, %166 ], [ 0, %84 ], [ %279, %277 ]
  tail call void @_ZdaPv(i8* nonnull %28) #10
  ret i32 %283
}

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.umul.with.overflow.i64(i64, i64) #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znam(i64) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN5media8internal10FullSearchEiiNSt3__14pairIiiEEPKNS_8AudioBusES6_PKfS8_(i32, i32, i64, %"class.media::AudioBus"* nocapture readonly, %"class.media::AudioBus"* nocapture readonly, float* nocapture readonly, float* nocapture readonly) local_unnamed_addr #4 {
  %8 = getelementptr inbounds %"class.media::AudioBus", %"class.media::AudioBus"* %4, i64 0, i32 5
  %9 = getelementptr inbounds %"class.media::AudioBus", %"class.media::AudioBus"* %4, i64 0, i32 5, i32 0, i32 1
  %10 = bitcast float*** %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = bitcast %"class.std::__1::vector"* %8 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = sub i64 %11, %13
  %15 = lshr exact i64 %14, 3
  %16 = getelementptr inbounds %"class.media::AudioBus", %"class.media::AudioBus"* %3, i64 0, i32 6
  %17 = load i32, i32* %16, align 8
  %18 = shl i64 %14, 29
  %19 = ashr exact i64 %18, 32
  %20 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %19, i64 4)
  %21 = extractvalue { i64, i1 } %20, 1
  %22 = extractvalue { i64, i1 } %20, 0
  %23 = select i1 %21, i64 -1, i64 %22
  %24 = tail call i8* @_Znam(i64 %23) #10
  %25 = bitcast i8* %24 to float*
  %26 = icmp sgt i32 %0, %1
  br i1 %26, label %42, label %27

27:                                               ; preds = %7
  %28 = trunc i64 %15 to i32
  %29 = icmp sgt i32 %28, 0
  %30 = and i64 %15, 4294967295
  %31 = sext i32 %0 to i64
  %32 = shl i64 %14, 29
  %33 = ashr exact i64 %32, 32
  %34 = ashr i64 %2, 32
  %35 = shl i64 %2, 32
  %36 = ashr exact i64 %35, 32
  %37 = sext i32 %1 to i64
  %38 = and i64 %15, 1
  %39 = icmp eq i64 %30, 1
  %40 = sub nsw i64 %30, %38
  %41 = icmp eq i64 %38, 0
  br label %44

42:                                               ; preds = %107, %7
  %43 = phi i32 [ 0, %7 ], [ %109, %107 ]
  tail call void @_ZdaPv(i8* nonnull %24) #10
  ret i32 %43

44:                                               ; preds = %107, %27
  %45 = phi i64 [ %110, %107 ], [ %31, %27 ]
  %46 = phi i32 [ %109, %107 ], [ 0, %27 ]
  %47 = phi float [ %108, %107 ], [ 0x3810000000000000, %27 ]
  %48 = icmp sge i64 %45, %36
  %49 = icmp sle i64 %45, %34
  %50 = and i1 %48, %49
  br i1 %50, label %107, label %51

51:                                               ; preds = %44
  %52 = trunc i64 %45 to i32
  tail call void @_ZN5media8internal22MultiChannelDotProductEPKNS_8AudioBusEiS3_iiPf(%"class.media::AudioBus"* %3, i32 0, %"class.media::AudioBus"* %4, i32 %52, i32 %17, float* nonnull %25)
  %53 = mul nsw i64 %45, %33
  %54 = getelementptr inbounds float, float* %6, i64 %53
  br i1 %29, label %55, label %102

55:                                               ; preds = %51
  br i1 %39, label %86, label %56

56:                                               ; preds = %55, %56
  %57 = phi i64 [ %83, %56 ], [ 0, %55 ]
  %58 = phi float [ %82, %56 ], [ 0.000000e+00, %55 ]
  %59 = phi i64 [ %84, %56 ], [ %40, %55 ]
  %60 = getelementptr inbounds float, float* %25, i64 %57
  %61 = load float, float* %60, align 4
  %62 = getelementptr inbounds float, float* %5, i64 %57
  %63 = load float, float* %62, align 4
  %64 = getelementptr inbounds float, float* %54, i64 %57
  %65 = load float, float* %64, align 4
  %66 = fmul float %63, %65
  %67 = fadd float %66, 0x3D71979980000000
  %68 = tail call float @sqrtf(float %67) #9
  %69 = fdiv float %61, %68
  %70 = fadd float %58, %69
  %71 = or i64 %57, 1
  %72 = getelementptr inbounds float, float* %25, i64 %71
  %73 = load float, float* %72, align 4
  %74 = getelementptr inbounds float, float* %5, i64 %71
  %75 = load float, float* %74, align 4
  %76 = getelementptr inbounds float, float* %54, i64 %71
  %77 = load float, float* %76, align 4
  %78 = fmul float %75, %77
  %79 = fadd float %78, 0x3D71979980000000
  %80 = tail call float @sqrtf(float %79) #9
  %81 = fdiv float %73, %80
  %82 = fadd float %70, %81
  %83 = add nuw nsw i64 %57, 2
  %84 = add i64 %59, -2
  %85 = icmp eq i64 %84, 0
  br i1 %85, label %86, label %56

86:                                               ; preds = %56, %55
  %87 = phi float [ undef, %55 ], [ %82, %56 ]
  %88 = phi i64 [ 0, %55 ], [ %83, %56 ]
  %89 = phi float [ 0.000000e+00, %55 ], [ %82, %56 ]
  br i1 %41, label %102, label %90

90:                                               ; preds = %86
  %91 = getelementptr inbounds float, float* %25, i64 %88
  %92 = load float, float* %91, align 4
  %93 = getelementptr inbounds float, float* %5, i64 %88
  %94 = load float, float* %93, align 4
  %95 = getelementptr inbounds float, float* %54, i64 %88
  %96 = load float, float* %95, align 4
  %97 = fmul float %94, %96
  %98 = fadd float %97, 0x3D71979980000000
  %99 = tail call float @sqrtf(float %98) #9
  %100 = fdiv float %92, %99
  %101 = fadd float %89, %100
  br label %102

102:                                              ; preds = %90, %86, %51
  %103 = phi float [ 0.000000e+00, %51 ], [ %87, %86 ], [ %101, %90 ]
  %104 = fcmp ogt float %103, %47
  %105 = select i1 %104, float %103, float %47
  %106 = select i1 %104, i32 %52, i32 %46
  br label %107

107:                                              ; preds = %102, %44
  %108 = phi float [ %47, %44 ], [ %105, %102 ]
  %109 = phi i32 [ %46, %44 ], [ %106, %102 ]
  %110 = add nsw i64 %45, 1
  %111 = icmp slt i64 %45, %37
  br i1 %111, label %44, label %42
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN5media8internal12OptimalIndexEPKNS_8AudioBusES3_NSt3__14pairIiiEE(%"class.media::AudioBus"* nocapture readonly, %"class.media::AudioBus"* nocapture readonly, i64) local_unnamed_addr #4 {
  %4 = getelementptr inbounds %"class.media::AudioBus", %"class.media::AudioBus"* %0, i64 0, i32 5
  %5 = getelementptr inbounds %"class.media::AudioBus", %"class.media::AudioBus"* %0, i64 0, i32 5, i32 0, i32 1
  %6 = bitcast float*** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = bitcast %"class.std::__1::vector"* %4 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %7, %9
  %11 = lshr exact i64 %10, 3
  %12 = trunc i64 %11 to i32
  %13 = getelementptr inbounds %"class.media::AudioBus", %"class.media::AudioBus"* %1, i64 0, i32 6
  %14 = load i32, i32* %13, align 8
  %15 = getelementptr inbounds %"class.media::AudioBus", %"class.media::AudioBus"* %0, i64 0, i32 6
  %16 = load i32, i32* %15, align 8
  %17 = sub i32 1, %14
  %18 = add i32 %17, %16
  %19 = shl i64 %10, 29
  %20 = ashr i64 %19, 32
  %21 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %20, i64 4)
  %22 = extractvalue { i64, i1 } %21, 1
  %23 = extractvalue { i64, i1 } %21, 0
  %24 = select i1 %22, i64 -1, i64 %23
  %25 = tail call i8* @_Znam(i64 %24) #10
  %26 = bitcast i8* %25 to float*
  %27 = mul nsw i32 %18, %12
  %28 = sext i32 %27 to i64
  %29 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %28, i64 4)
  %30 = extractvalue { i64, i1 } %29, 1
  %31 = extractvalue { i64, i1 } %29, 0
  %32 = select i1 %30, i64 -1, i64 %31
  %33 = tail call i8* @_Znam(i64 %32) #10
  %34 = bitcast i8* %33 to float*
  %35 = icmp sgt i32 %12, 0
  br i1 %35, label %36, label %180

36:                                               ; preds = %3
  %37 = icmp sgt i32 %14, 0
  %38 = sext i32 %14 to i64
  %39 = icmp sgt i32 %18, 1
  %40 = zext i32 %14 to i64
  %41 = zext i32 %18 to i64
  %42 = inttoptr i64 %9 to float**
  %43 = add nsw i64 %40, -1
  %44 = add nsw i64 %41, -1
  %45 = and i64 %40, 3
  %46 = icmp ult i64 %43, 3
  %47 = sub nsw i64 %40, %45
  %48 = icmp eq i64 %45, 0
  %49 = icmp eq i64 %20, 1
  %50 = and i64 %44, 1
  %51 = icmp eq i32 %18, 2
  %52 = sub nsw i64 %44, %50
  %53 = icmp eq i64 %50, 0
  br label %54

54:                                               ; preds = %145, %36
  %55 = phi i64 [ 0, %36 ], [ %146, %145 ]
  %56 = shl nuw nsw i64 %55, 2
  %57 = getelementptr i8, i8* %33, i64 %56
  %58 = bitcast i8* %57 to float*
  %59 = getelementptr inbounds float*, float** %42, i64 %55
  %60 = load float*, float** %59, align 8
  %61 = getelementptr inbounds float, float* %34, i64 %55
  store float 0.000000e+00, float* %61, align 4
  br i1 %37, label %62, label %77

62:                                               ; preds = %54
  br i1 %46, label %63, label %104

63:                                               ; preds = %104, %62
  %64 = phi float [ 0.000000e+00, %62 ], [ %126, %104 ]
  %65 = phi i64 [ 0, %62 ], [ %127, %104 ]
  br i1 %48, label %77, label %66

66:                                               ; preds = %63, %66
  %67 = phi float [ %73, %66 ], [ %64, %63 ]
  %68 = phi i64 [ %74, %66 ], [ %65, %63 ]
  %69 = phi i64 [ %75, %66 ], [ %45, %63 ]
  %70 = getelementptr inbounds float, float* %60, i64 %68
  %71 = load float, float* %70, align 4
  %72 = fmul float %71, %71
  %73 = fadd float %67, %72
  store float %73, float* %61, align 4
  %74 = add nuw nsw i64 %68, 1
  %75 = add i64 %69, -1
  %76 = icmp eq i64 %75, 0
  br i1 %76, label %77, label %66, !llvm.loop !4

77:                                               ; preds = %63, %66, %54
  br i1 %39, label %78, label %145

78:                                               ; preds = %77
  %79 = getelementptr inbounds float, float* %60, i64 %38
  br i1 %49, label %102, label %80

80:                                               ; preds = %78, %80
  %81 = phi i64 [ %98, %80 ], [ 1, %78 ]
  %82 = phi float* [ %99, %80 ], [ %79, %78 ]
  %83 = phi float* [ %100, %80 ], [ %60, %78 ]
  %84 = add nsw i64 %81, -1
  %85 = mul nsw i64 %84, %20
  %86 = add nsw i64 %85, %55
  %87 = getelementptr inbounds float, float* %34, i64 %86
  %88 = load float, float* %87, align 4
  %89 = load float, float* %83, align 4
  %90 = fmul float %89, %89
  %91 = fsub float %88, %90
  %92 = load float, float* %82, align 4
  %93 = fmul float %92, %92
  %94 = fadd float %91, %93
  %95 = mul nsw i64 %81, %20
  %96 = add nsw i64 %95, %55
  %97 = getelementptr inbounds float, float* %34, i64 %96
  store float %94, float* %97, align 4
  %98 = add nuw nsw i64 %81, 1
  %99 = getelementptr inbounds float, float* %82, i64 1
  %100 = getelementptr inbounds float, float* %83, i64 1
  %101 = icmp eq i64 %98, %41
  br i1 %101, label %145, label %80

102:                                              ; preds = %78
  %103 = load float, float* %58, align 4
  br i1 %51, label %130, label %148

104:                                              ; preds = %62, %104
  %105 = phi float [ %126, %104 ], [ 0.000000e+00, %62 ]
  %106 = phi i64 [ %127, %104 ], [ 0, %62 ]
  %107 = phi i64 [ %128, %104 ], [ %47, %62 ]
  %108 = getelementptr inbounds float, float* %60, i64 %106
  %109 = load float, float* %108, align 4
  %110 = fmul float %109, %109
  %111 = fadd float %105, %110
  store float %111, float* %61, align 4
  %112 = or i64 %106, 1
  %113 = getelementptr inbounds float, float* %60, i64 %112
  %114 = load float, float* %113, align 4
  %115 = fmul float %114, %114
  %116 = fadd float %111, %115
  store float %116, float* %61, align 4
  %117 = or i64 %106, 2
  %118 = getelementptr inbounds float, float* %60, i64 %117
  %119 = load float, float* %118, align 4
  %120 = fmul float %119, %119
  %121 = fadd float %116, %120
  store float %121, float* %61, align 4
  %122 = or i64 %106, 3
  %123 = getelementptr inbounds float, float* %60, i64 %122
  %124 = load float, float* %123, align 4
  %125 = fmul float %124, %124
  %126 = fadd float %121, %125
  store float %126, float* %61, align 4
  %127 = add nuw nsw i64 %106, 4
  %128 = add i64 %107, -4
  %129 = icmp eq i64 %128, 0
  br i1 %129, label %63, label %104

130:                                              ; preds = %148, %102
  %131 = phi float [ %103, %102 ], [ %171, %148 ]
  %132 = phi i64 [ 1, %102 ], [ %175, %148 ]
  %133 = phi float* [ %79, %102 ], [ %176, %148 ]
  %134 = phi float* [ %60, %102 ], [ %177, %148 ]
  br i1 %53, label %145, label %135

135:                                              ; preds = %130
  %136 = load float, float* %134, align 4
  %137 = fmul float %136, %136
  %138 = fsub float %131, %137
  %139 = load float, float* %133, align 4
  %140 = fmul float %139, %139
  %141 = fadd float %138, %140
  %142 = mul nsw i64 %132, %20
  %143 = add nsw i64 %142, %55
  %144 = getelementptr inbounds float, float* %34, i64 %143
  store float %141, float* %144, align 4
  br label %145

145:                                              ; preds = %80, %135, %130, %77
  %146 = add nuw nsw i64 %55, 1
  %147 = icmp slt i64 %146, %20
  br i1 %147, label %54, label %180

148:                                              ; preds = %102, %148
  %149 = phi float [ %171, %148 ], [ %103, %102 ]
  %150 = phi i64 [ %175, %148 ], [ 1, %102 ]
  %151 = phi float* [ %176, %148 ], [ %79, %102 ]
  %152 = phi float* [ %177, %148 ], [ %60, %102 ]
  %153 = phi i64 [ %178, %148 ], [ %52, %102 ]
  %154 = load float, float* %152, align 4
  %155 = fmul float %154, %154
  %156 = fsub float %149, %155
  %157 = load float, float* %151, align 4
  %158 = fmul float %157, %157
  %159 = fadd float %156, %158
  %160 = mul nsw i64 %150, %20
  %161 = add nsw i64 %160, %55
  %162 = getelementptr inbounds float, float* %34, i64 %161
  store float %159, float* %162, align 4
  %163 = add nuw nsw i64 %150, 1
  %164 = getelementptr inbounds float, float* %151, i64 1
  %165 = getelementptr inbounds float, float* %152, i64 1
  %166 = load float, float* %165, align 4
  %167 = fmul float %166, %166
  %168 = fsub float %159, %167
  %169 = load float, float* %164, align 4
  %170 = fmul float %169, %169
  %171 = fadd float %168, %170
  %172 = mul nsw i64 %163, %20
  %173 = add nsw i64 %172, %55
  %174 = getelementptr inbounds float, float* %34, i64 %173
  store float %171, float* %174, align 4
  %175 = add nuw nsw i64 %150, 2
  %176 = getelementptr inbounds float, float* %151, i64 2
  %177 = getelementptr inbounds float, float* %152, i64 2
  %178 = add i64 %153, -2
  %179 = icmp eq i64 %178, 0
  br i1 %179, label %130, label %148

180:                                              ; preds = %145, %3
  tail call void @_ZN5media8internal22MultiChannelDotProductEPKNS_8AudioBusEiS3_iiPf(%"class.media::AudioBus"* %1, i32 0, %"class.media::AudioBus"* %1, i32 0, i32 %14, float* nonnull %26)
  %181 = tail call i32 @_ZN5media8internal15DecimatedSearchEiNSt3__14pairIiiEEPKNS_8AudioBusES6_PKfS8_(i32 5, i64 %2, %"class.media::AudioBus"* %1, %"class.media::AudioBus"* %0, float* nonnull %26, float* nonnull %34)
  %182 = icmp sgt i32 %181, 5
  %183 = select i1 %182, i32 %181, i32 5
  %184 = add nsw i32 %183, -5
  %185 = add nsw i32 %18, -1
  %186 = add nsw i32 %181, 5
  %187 = icmp slt i32 %186, %185
  %188 = select i1 %187, i32 %186, i32 %185
  %189 = tail call i32 @_ZN5media8internal10FullSearchEiiNSt3__14pairIiiEEPKNS_8AudioBusES6_PKfS8_(i32 %184, i32 %188, i64 %2, %"class.media::AudioBus"* %1, %"class.media::AudioBus"* %0, float* nonnull %26, float* nonnull %34)
  tail call void @_ZdaPv(i8* nonnull %33) #10
  tail call void @_ZdaPv(i8* nonnull %25) #10
  ret i32 %189
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @_ZN5media8internal24GetPeriodicHanningWindowEiPf(i32, float* nocapture) local_unnamed_addr #1 {
  %3 = sitofp i32 %0 to float
  %4 = fdiv float 0x401921FB60000000, %3
  %5 = icmp sgt i32 %0, 0
  br i1 %5, label %6, label %23

6:                                                ; preds = %2
  %7 = zext i32 %0 to i64
  %8 = and i64 %7, 1
  %9 = icmp eq i32 %0, 1
  br i1 %9, label %12, label %10

10:                                               ; preds = %6
  %11 = sub nsw i64 %7, %8
  br label %24

12:                                               ; preds = %24, %6
  %13 = phi i64 [ 0, %6 ], [ %42, %24 ]
  %14 = icmp eq i64 %8, 0
  br i1 %14, label %23, label %15

15:                                               ; preds = %12
  %16 = trunc i64 %13 to i32
  %17 = sitofp i32 %16 to float
  %18 = fmul float %4, %17
  %19 = tail call float @cosf(float %18) #9
  %20 = fsub float 1.000000e+00, %19
  %21 = fmul float %20, 5.000000e-01
  %22 = getelementptr inbounds float, float* %1, i64 %13
  store float %21, float* %22, align 4
  br label %23

23:                                               ; preds = %15, %12, %2
  ret void

24:                                               ; preds = %24, %10
  %25 = phi i64 [ 0, %10 ], [ %42, %24 ]
  %26 = phi i64 [ %11, %10 ], [ %43, %24 ]
  %27 = trunc i64 %25 to i32
  %28 = sitofp i32 %27 to float
  %29 = fmul float %4, %28
  %30 = tail call float @cosf(float %29) #9
  %31 = fsub float 1.000000e+00, %30
  %32 = fmul float %31, 5.000000e-01
  %33 = getelementptr inbounds float, float* %1, i64 %25
  store float %32, float* %33, align 4
  %34 = or i64 %25, 1
  %35 = trunc i64 %34 to i32
  %36 = sitofp i32 %35 to float
  %37 = fmul float %4, %36
  %38 = tail call float @cosf(float %37) #9
  %39 = fsub float 1.000000e+00, %38
  %40 = fmul float %39, 5.000000e-01
  %41 = getelementptr inbounds float, float* %1, i64 %34
  store float %40, float* %41, align 4
  %42 = add nuw nsw i64 %25, 2
  %43 = add i64 %26, -2
  %44 = icmp eq i64 %43, 0
  br i1 %44, label %12, label %24
}

; Function Attrs: nofree nounwind
declare float @sqrtf(float) local_unnamed_addr #7

; Function Attrs: nofree nounwind
declare float @cosf(float) local_unnamed_addr #7

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #8

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !3}
