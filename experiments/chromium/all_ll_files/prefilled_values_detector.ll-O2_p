; ModuleID = '../../components/autofill/content/renderer/prefilled_values_detector.cc'
source_filename = "../../components/autofill/content/renderer/prefilled_values_detector.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.base::internal::flat_tree" = type { %"struct.std::__1::array" }
%"struct.std::__1::array" = type { [62 x %"class.base::BasicStringPiece"] }
%"class.base::BasicStringPiece" = type { i8*, i64 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }

$_ZNK4base8internal9flat_treeINS_16BasicStringPieceIcNSt3__111char_traitsIcEEEENS_8identityENS3_4lessIvEENS3_5arrayIKS6_Lm62EEEE8containsINS3_12basic_stringIcS5_NS3_9allocatorIcEEEEEEbRKT_ = comdat any

@_ZN8autofill12_GLOBAL__N_126kKnownUsernamePlaceholdersE = internal constant %"class.base::internal::flat_tree" { %"struct.std::__1::array" { [62 x %"class.base::BasicStringPiece"] [%"class.base::BasicStringPiece" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i32 0, i32 0), i64 2 }, %"class.base::BasicStringPiece" { i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.3, i32 0, i32 0), i64 36 }, %"class.base::BasicStringPiece" { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.4, i32 0, i32 0), i64 14 }, %"class.base::BasicStringPiece" { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i32 0, i32 0), i64 12 }, %"class.base::BasicStringPiece" { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.6, i32 0, i32 0), i64 9 }, %"class.base::BasicStringPiece" { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.7, i32 0, i32 0), i64 15 }, %"class.base::BasicStringPiece" { i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.8, i32 0, i32 0), i64 24 }, %"class.base::BasicStringPiece" { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.9, i32 0, i32 0), i64 17 }, %"class.base::BasicStringPiece" { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.10, i32 0, i32 0), i64 14 }, %"class.base::BasicStringPiece" { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.11, i32 0, i32 0), i64 15 }, %"class.base::BasicStringPiece" { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.12, i32 0, i32 0), i64 5 }, %"class.base::BasicStringPiece" { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.13, i32 0, i32 0), i64 13 }, %"class.base::BasicStringPiece" { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.14, i32 0, i32 0), i64 18 }, %"class.base::BasicStringPiece" { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.15, i32 0, i32 0), i64 18 }, %"class.base::BasicStringPiece" { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.16, i32 0, i32 0), i64 15 }, %"class.base::BasicStringPiece" { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.17, i32 0, i32 0), i64 14 }, %"class.base::BasicStringPiece" { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.18, i32 0, i32 0), i64 11 }, %"class.base::BasicStringPiece" { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.19, i32 0, i32 0), i64 16 }, %"class.base::BasicStringPiece" { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.20, i32 0, i32 0), i64 9 }, %"class.base::BasicStringPiece" { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.21, i32 0, i32 0), i64 5 }, %"class.base::BasicStringPiece" { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.22, i32 0, i32 0), i64 4 }, %"class.base::BasicStringPiece" { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.23, i32 0, i32 0), i64 12 }, %"class.base::BasicStringPiece" { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.24, i32 0, i32 0), i64 15 }, %"class.base::BasicStringPiece" { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.25, i32 0, i32 0), i64 3 }, %"class.base::BasicStringPiece" { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.26, i32 0, i32 0), i64 5 }, %"class.base::BasicStringPiece" { i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.27, i32 0, i32 0), i64 34 }, %"class.base::BasicStringPiece" { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.28, i32 0, i32 0), i64 6 }, %"class.base::BasicStringPiece" { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.29, i32 0, i32 0), i64 19 }, %"class.base::BasicStringPiece" { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.30, i32 0, i32 0), i64 12 }, %"class.base::BasicStringPiece" { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.31, i32 0, i32 0), i64 7 }, %"class.base::BasicStringPiece" { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.32, i32 0, i32 0), i64 9 }, %"class.base::BasicStringPiece" { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.33, i32 0, i32 0), i64 11 }, %"class.base::BasicStringPiece" { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.34, i32 0, i32 0), i64 8 }, %"class.base::BasicStringPiece" { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.35, i32 0, i32 0), i64 17 }, %"class.base::BasicStringPiece" { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.36, i32 0, i32 0), i64 18 }, %"class.base::BasicStringPiece" { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.37, i32 0, i32 0), i64 14 }, %"class.base::BasicStringPiece" { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.38, i32 0, i32 0), i64 7 }, %"class.base::BasicStringPiece" { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.39, i32 0, i32 0), i64 18 }, %"class.base::BasicStringPiece" { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.40, i32 0, i32 0), i64 16 }, %"class.base::BasicStringPiece" { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.41, i32 0, i32 0), i64 6 }, %"class.base::BasicStringPiece" { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.42, i32 0, i32 0), i64 19 }, %"class.base::BasicStringPiece" { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.43, i32 0, i32 0), i64 10 }, %"class.base::BasicStringPiece" { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.44, i32 0, i32 0), i64 19 }, %"class.base::BasicStringPiece" { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.45, i32 0, i32 0), i64 13 }, %"class.base::BasicStringPiece" { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.46, i32 0, i32 0), i64 21 }, %"class.base::BasicStringPiece" { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.47, i32 0, i32 0), i64 15 }, %"class.base::BasicStringPiece" { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.48, i32 0, i32 0), i64 17 }, %"class.base::BasicStringPiece" { i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.49, i32 0, i32 0), i64 23 }, %"class.base::BasicStringPiece" { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.50, i32 0, i32 0), i64 10 }, %"class.base::BasicStringPiece" { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.51, i32 0, i32 0), i64 19 }, %"class.base::BasicStringPiece" { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.52, i32 0, i32 0), i64 15 }, %"class.base::BasicStringPiece" { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.53, i32 0, i32 0), i64 21 }, %"class.base::BasicStringPiece" { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.54, i32 0, i32 0), i64 6 }, %"class.base::BasicStringPiece" { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.55, i32 0, i32 0), i64 9 }, %"class.base::BasicStringPiece" { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.56, i32 0, i32 0), i64 15 }, %"class.base::BasicStringPiece" { i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.57, i32 0, i32 0), i64 24 }, %"class.base::BasicStringPiece" { i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.58, i32 0, i32 0), i64 24 }, %"class.base::BasicStringPiece" { i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.59, i32 0, i32 0), i64 27 }, %"class.base::BasicStringPiece" { i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.60, i32 0, i32 0), i64 27 }, %"class.base::BasicStringPiece" { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.61, i32 0, i32 0), i64 13 }, %"class.base::BasicStringPiece" { i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.62, i32 0, i32 0), i64 23 }, %"class.base::BasicStringPiece" { i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.63, i32 0, i32 0), i64 34 }] } }, align 8
@.str.2 = private unnamed_addr constant [3 x i8] c"+1\00", align 1
@.str.3 = private unnamed_addr constant [37 x i8] c"3~15\E4\B8\AA\E5\AD\97\E7\AC\A6,\E4\B8\AD\E6\96\87\E5\AD\97\E7\AC\A67\E4\B8\AA\E4\BB\A5\E5\86\85\00", align 1
@.str.4 = private unnamed_addr constant [15 x i8] c"___.___.___-__\00", align 1
@.str.5 = private unnamed_addr constant [13 x i8] c"benutzername\00", align 1
@.str.6 = private unnamed_addr constant [10 x i8] c"client id\00", align 1
@.str.7 = private unnamed_addr constant [16 x i8] c"codice titolare\00", align 1
@.str.8 = private unnamed_addr constant [25 x i8] c"digite seu cpf ou e-mail\00", align 1
@.str.9 = private unnamed_addr constant [18 x i8] c"ds logon username\00", align 1
@.str.10 = private unnamed_addr constant [15 x i8] c"e-mail address\00", align 1
@.str.11 = private unnamed_addr constant [16 x i8] c"e-mail/username\00", align 1
@.str.12 = private unnamed_addr constant [6 x i8] c"email\00", align 1
@.str.13 = private unnamed_addr constant [14 x i8] c"email address\00", align 1
@.str.14 = private unnamed_addr constant [19 x i8] c"email masih kosong\00", align 1
@.str.15 = private unnamed_addr constant [19 x i8] c"email/\E6\89\8B\E6\A9\9F\E8\99\9F\E7\A2\BC\00", align 1
@.str.16 = private unnamed_addr constant [16 x i8] c"enter user name\00", align 1
@.str.17 = private unnamed_addr constant [15 x i8] c"enter username\00", align 1
@.str.18 = private unnamed_addr constant [12 x i8] c"identifiant\00", align 1
@.str.19 = private unnamed_addr constant [17 x i8] c"kullan\C4\B1c\C4\B1 ad\C4\B1\00", align 1
@.str.20 = private unnamed_addr constant [10 x i8] c"kunden-id\00", align 1
@.str.21 = private unnamed_addr constant [6 x i8] c"login\00", align 1
@.str.22 = private unnamed_addr constant [5 x i8] c"nick\00", align 1
@.str.23 = private unnamed_addr constant [13 x i8] c"nom d'usuari\00", align 1
@.str.24 = private unnamed_addr constant [16 x i8] c"nom utilisateur\00", align 1
@.str.25 = private unnamed_addr constant [4 x i8] c"rut\00", align 1
@.str.26 = private unnamed_addr constant [6 x i8] c"siret\00", align 1
@.str.27 = private unnamed_addr constant [35 x i8] c"this is usually your email address\00", align 1
@.str.28 = private unnamed_addr constant [7 x i8] c"tu dni\00", align 1
@.str.29 = private unnamed_addr constant [20 x i8] c"uid/\E7\94\A8\E6\88\B6\E5\90\8D/email\00", align 1
@.str.30 = private unnamed_addr constant [13 x i8] c"uporabnik...\00", align 1
@.str.31 = private unnamed_addr constant [8 x i8] c"user id\00", align 1
@.str.32 = private unnamed_addr constant [10 x i8] c"user name\00", align 1
@.str.33 = private unnamed_addr constant [12 x i8] c"user/codice\00", align 1
@.str.34 = private unnamed_addr constant [9 x i8] c"username\00", align 1
@.str.35 = private unnamed_addr constant [18 x i8] c"username or email\00", align 1
@.str.36 = private unnamed_addr constant [19 x i8] c"username or email:\00", align 1
@.str.37 = private unnamed_addr constant [15 x i8] c"username/email\00", align 1
@.str.38 = private unnamed_addr constant [8 x i8] c"usuario\00", align 1
@.str.39 = private unnamed_addr constant [19 x i8] c"your email address\00", align 1
@.str.40 = private unnamed_addr constant [17 x i8] c"\C3\A5\C3\A5\C3\A5\C3\A5mmddxxxx\00", align 1
@.str.41 = private unnamed_addr constant [7 x i8] c"\D0\98\D0\BC\D1\8F\00", align 1
@.str.42 = private unnamed_addr constant [20 x i8] c"\D0\98\D0\BC\D1\8F (\D0\BB\D0\BE\D0\B3\D0\B8\D0\BD)\00", align 1
@.str.43 = private unnamed_addr constant [11 x i8] c"\D0\9B\D0\BE\D0\B3\D0\B8\D0\BD\00", align 1
@.str.44 = private unnamed_addr constant [20 x i8] c"\D0\9B\D0\BE\D0\B3\D0\B8\D0\BD (e-mail)\00", align 1
@.str.45 = private unnamed_addr constant [14 x i8] c"\D0\9B\D0\BE\D0\B3\D0\B8\D0\BD...\00", align 1
@.str.46 = private unnamed_addr constant [22 x i8] c"\D7\9B\D7\AA\D7\95\D7\91\D7\AA \D7\93\D7\95\D7\90''\D7\9C\00", align 1
@.str.47 = private unnamed_addr constant [16 x i8] c"\D7\A9\D7\9D \D7\9E\D7\A9\D7\AA\D7\9E\D7\A9\00", align 1
@.str.48 = private unnamed_addr constant [18 x i8] c"\D8\A7\D8\B3\D9\85 \D8\A7\D9\84\D8\B9\D8\B6\D9\88\00", align 1
@.str.49 = private unnamed_addr constant [24 x i8] c"\D8\A7\D8\B3\D9\85 \D8\A7\D9\84\D9\85\D8\B3\D8\AA\D8\AE\D8\AF\D9\85\00", align 1
@.str.50 = private unnamed_addr constant [11 x i8] c"\D8\A7\D9\84\D8\A7\D8\B3\D9\85\00", align 1
@.str.51 = private unnamed_addr constant [20 x i8] c"\D9\86\D8\A7\D9\85 \DA\A9\D8\A7\D8\B1\D8\A8\D8\B1\DB\8C\00", align 1
@.str.52 = private unnamed_addr constant [16 x i8] c"\E0\B8\AD\E0\B8\B5\E0\B9\80\E0\B8\A1\E0\B8\A5\00", align 1
@.str.53 = private unnamed_addr constant [22 x i8] c"\E3\83\A1\E3\83\BC\E3\83\AB\E3\82\A2\E3\83\89\E3\83\AC\E3\82\B9\00", align 1
@.str.54 = private unnamed_addr constant [7 x i8] c"\E5\B8\B3\E8\99\9F\00", align 1
@.str.55 = private unnamed_addr constant [10 x i8] c"\E7\94\A8\E6\88\B7\E5\90\8D\00", align 1
@.str.56 = private unnamed_addr constant [16 x i8] c"\E7\94\A8\E6\88\B7\E5\90\8D/email\00", align 1
@.str.57 = private unnamed_addr constant [25 x i8] c"\E8\AB\8B\E8\BC\B8\E5\85\A5\E8\BA\AB\E4\BB\BD\E8\AD\89\E5\AD\97\E8\99\9F\00", align 1
@.str.58 = private unnamed_addr constant [25 x i8] c"\E8\AF\B7\E7\94\A8\E5\BE\AE\E5\8D\9A\E5\B8\90\E5\8F\B7\E7\99\BB\E5\BD\95\00", align 1
@.str.59 = private unnamed_addr constant [28 x i8] c"\E8\AF\B7\E8\BE\93\E5\85\A5\E6\89\8B\E6\9C\BA\E5\8F\B7\E6\88\96\E9\82\AE\E7\AE\B1\00", align 1
@.str.60 = private unnamed_addr constant [28 x i8] c"\E8\AF\B7\E8\BE\93\E5\85\A5\E9\82\AE\E7\AE\B1\E6\88\96\E6\89\8B\E6\9C\BA\E5\8F\B7\00", align 1
@.str.61 = private unnamed_addr constant [14 x i8] c"\E9\82\AE\E7\AE\B1/\E6\89\8B\E6\9C\BA\00", align 1
@.str.62 = private unnamed_addr constant [24 x i8] c"\E9\82\AE\E7\AE\B1/\E6\89\8B\E6\9C\BA/\E5\B1\95\E4\BD\8D\E5\8F\B7\00", align 1
@.str.63 = private unnamed_addr constant [35 x i8] c"\EC\95\84\EC\9D\B4\EB\94\94 or @\EC\9D\B4\ED\95\98 \EB\AA\A8\EB\91\90 \EC\9E\85\EB\A0\A5\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden { i64, %"class.base::BasicStringPiece"* } @_ZN8autofill25KnownUsernamePlaceholdersEv() local_unnamed_addr #0 {
  ret { i64, %"class.base::BasicStringPiece"* } { i64 62, %"class.base::BasicStringPiece"* getelementptr inbounds (%"class.base::internal::flat_tree", %"class.base::internal::flat_tree"* @_ZN8autofill12_GLOBAL__N_126kKnownUsernamePlaceholdersE, i64 0, i32 0, i32 0, i64 0) }
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN8autofill30PossiblePrefilledUsernameValueERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_(%"class.std::__1::basic_string"* dereferenceable(24), %"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #0 {
  %3 = alloca %"class.std::__1::basic_string", align 8
  %4 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %4) #5
  %5 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %6 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %7 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %8 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %7, i64 0, i32 1, i32 0
  %9 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 24, i1 false)
  %10 = load i8, i8* %8, align 1
  %11 = icmp slt i8 %10, 0
  %12 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %13 = load i8*, i8** %12, align 8
  %14 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  %15 = select i1 %11, i8* %13, i8* %14
  %16 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %17 = load i64, i64* %16, align 8
  %18 = zext i8 %10 to i64
  %19 = select i1 %11, i64 %17, i64 %18
  %20 = tail call { i8*, i64 } @_ZN4base19TrimWhitespaceASCIIENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEENS_13TrimPositionsE(i8* %15, i64 %19, i32 3) #5
  %21 = extractvalue { i8*, i64 } %20, 0
  %22 = extractvalue { i8*, i64 } %20, 1
  call void @_ZN4base12ToLowerASCIIENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"class.std::__1::basic_string"* nonnull sret %3, i8* %21, i64 %22) #5
  %23 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %24 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %23, i64 0, i32 1, i32 0
  %25 = load i8, i8* %24, align 1
  %26 = icmp slt i8 %25, 0
  %27 = load i64, i64* %6, align 8
  %28 = zext i8 %25 to i64
  %29 = select i1 %26, i64 %27, i64 %28
  %30 = icmp eq i64 %29, 0
  br i1 %30, label %54, label %31

31:                                               ; preds = %2
  %32 = load i8*, i8** %5, align 8
  %33 = select i1 %26, i8* %32, i8* %4
  %34 = load i8, i8* %33, align 1
  %35 = icmp eq i8 %34, 64
  br i1 %35, label %36, label %52

36:                                               ; preds = %31
  %37 = bitcast %"class.std::__1::basic_string"* %1 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %38 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %37, i64 0, i32 1, i32 0
  %39 = load i8, i8* %38, align 1
  %40 = icmp slt i8 %39, 0
  %41 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %42 = load i64, i64* %41, align 8
  %43 = zext i8 %39 to i64
  %44 = select i1 %40, i64 %42, i64 %43
  %45 = icmp eq i64 %44, 0
  br i1 %45, label %52, label %46

46:                                               ; preds = %36
  %47 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %48 = load i8*, i8** %47, align 8
  %49 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  %50 = select i1 %40, i8* %48, i8* %49
  %51 = call zeroext i1 @_ZN4base8EndsWithENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEES4_NS_11CompareCaseE(i8* %33, i64 %29, i8* %50, i64 %44, i32 0) #5
  br i1 %51, label %54, label %52

52:                                               ; preds = %31, %36, %46
  %53 = call zeroext i1 @_ZNK4base8internal9flat_treeINS_16BasicStringPieceIcNSt3__111char_traitsIcEEEENS_8identityENS3_4lessIvEENS3_5arrayIKS6_Lm62EEEE8containsINS3_12basic_stringIcS5_NS3_9allocatorIcEEEEEEbRKT_(%"class.base::internal::flat_tree"* nonnull @_ZN8autofill12_GLOBAL__N_126kKnownUsernamePlaceholdersE, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %3)
  br label %54

54:                                               ; preds = %46, %2, %52
  %55 = phi i1 [ %53, %52 ], [ true, %2 ], [ true, %46 ]
  %56 = load i8, i8* %24, align 1
  %57 = icmp slt i8 %56, 0
  br i1 %57, label %58, label %60

58:                                               ; preds = %54
  %59 = load i8*, i8** %5, align 8
  call void @_ZdlPv(i8* %59) #6
  br label %60

60:                                               ; preds = %54, %58
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4) #5
  ret i1 %55
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN4base12ToLowerASCIIENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"class.std::__1::basic_string"* sret, i8*, i64) local_unnamed_addr #2

declare { i8*, i64 } @_ZN4base19TrimWhitespaceASCIIENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEENS_13TrimPositionsE(i8*, i64, i32) local_unnamed_addr #2

declare zeroext i1 @_ZN4base8EndsWithENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEES4_NS_11CompareCaseE(i8*, i64, i8*, i64, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK4base8internal9flat_treeINS_16BasicStringPieceIcNSt3__111char_traitsIcEEEENS_8identityENS3_4lessIvEENS3_5arrayIKS6_Lm62EEEE8containsINS3_12basic_stringIcS5_NS3_9allocatorIcEEEEEEbRKT_(%"class.base::internal::flat_tree"*, %"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.base::internal::flat_tree", %"class.base::internal::flat_tree"* %0, i64 0, i32 0, i32 0, i64 0
  %4 = bitcast %"class.std::__1::basic_string"* %1 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %5 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %4, i64 0, i32 1, i32 0
  %6 = load i8, i8* %5, align 1
  %7 = icmp slt i8 %6, 0
  %8 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  %11 = select i1 %7, i8* %9, i8* %10
  %12 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %13 = load i64, i64* %12, align 8
  %14 = zext i8 %6 to i64
  %15 = select i1 %7, i64 %13, i64 %14
  br label %16

16:                                               ; preds = %37, %2
  %17 = phi i64 [ 62, %2 ], [ %39, %37 ]
  %18 = phi %"class.base::BasicStringPiece"* [ %3, %2 ], [ %38, %37 ]
  %19 = lshr i64 %17, 1
  %20 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %18, i64 %19
  %21 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %20, i64 0, i32 0
  %22 = load i8*, i8** %21, align 8
  %23 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %18, i64 %19, i32 1
  %24 = load i64, i64* %23, align 8
  %25 = icmp ugt i64 %24, %15
  %26 = select i1 %25, i64 %15, i64 %24
  %27 = tail call i32 @memcmp(i8* %22, i8* %11, i64 %26) #5
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %31

29:                                               ; preds = %16
  %30 = icmp ult i64 %24, %15
  br i1 %30, label %33, label %37

31:                                               ; preds = %16
  %32 = icmp slt i32 %27, 0
  br i1 %32, label %33, label %37

33:                                               ; preds = %31, %29
  %34 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %20, i64 1
  %35 = xor i64 %19, -1
  %36 = add i64 %17, %35
  br label %37

37:                                               ; preds = %33, %31, %29
  %38 = phi %"class.base::BasicStringPiece"* [ %34, %33 ], [ %18, %31 ], [ %18, %29 ]
  %39 = phi i64 [ %36, %33 ], [ %19, %31 ], [ %19, %29 ]
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %41, label %16

41:                                               ; preds = %37
  %42 = getelementptr inbounds %"class.base::internal::flat_tree", %"class.base::internal::flat_tree"* %0, i64 0, i32 0, i32 0, i64 62
  %43 = icmp eq %"class.base::BasicStringPiece"* %38, %42
  br i1 %43, label %61, label %44

44:                                               ; preds = %41
  %45 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %38, i64 0, i32 0
  %46 = load i8*, i8** %45, align 8
  %47 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %38, i64 0, i32 1
  %48 = load i64, i64* %47, align 8
  %49 = icmp ugt i64 %15, %48
  %50 = select i1 %49, i64 %48, i64 %15
  %51 = tail call i32 @memcmp(i8* %11, i8* %46, i64 %50) #5
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %53, label %58

53:                                               ; preds = %44
  %54 = icmp eq i64 %15, %48
  br i1 %54, label %58, label %55

55:                                               ; preds = %53
  %56 = icmp ult i64 %15, %48
  %57 = select i1 %56, i32 -1, i32 1
  br label %58

58:                                               ; preds = %44, %53, %55
  %59 = phi i32 [ %57, %55 ], [ %51, %44 ], [ 0, %53 ]
  %60 = icmp sgt i32 %59, -1
  br label %61

61:                                               ; preds = %41, %58
  %62 = phi i1 [ false, %41 ], [ %60, %58 ]
  ret i1 %62
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: nofree nounwind readonly
declare i32 @memcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
