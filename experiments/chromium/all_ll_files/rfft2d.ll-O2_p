; ModuleID = '../../third_party/tflite/src/tensorflow/lite/kernels/rfft2d.cc'
source_filename = "../../third_party/tflite/src/tensorflow/lite/kernels/rfft2d.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.TfLiteContext = type { i64, i32 (%struct.TfLiteContext*, %struct.TfLiteIntArray**)*, %struct.TfLiteTensor*, i8*, i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)*, void (%struct.TfLiteContext*, i8*, ...)*, i32 (%struct.TfLiteContext*, i32, i32*)*, i32 (%struct.TfLiteContext*, i32, %struct.TfLiteNode**, %struct.TfLiteRegistration**)*, i32 (%struct.TfLiteContext*, %struct.TfLiteRegistration*, %struct.TfLiteIntArray*, %struct.TfLiteDelegate*)*, i32, %struct.TfLiteExternalContext* (%struct.TfLiteContext*, i32)*, void (%struct.TfLiteContext*, i32, %struct.TfLiteExternalContext*)*, i8, i8*, i32 (%struct.TfLiteContext*, i64, i8**)*, i32 (%struct.TfLiteContext*, i64, i8**)*, i32 (%struct.TfLiteContext*, i64, i32*)*, i8* (%struct.TfLiteContext*, i32)*, i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, i32, i32*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteIntArray*, %struct.TfLiteDelegateParams**, i32*)* }
%struct.TfLiteIntArray = type { i32, [0 x i32] }
%struct.TfLiteTensor = type { i32, %union.TfLitePtrUnion, %struct.TfLiteIntArray*, %struct.TfLiteQuantizationParams, i32, i64, i8*, i8*, %struct.TfLiteDelegate*, i32, i8, i8, %struct.TfLiteQuantization, %struct.TfLiteSparsity*, %struct.TfLiteIntArray* }
%union.TfLitePtrUnion = type { i32* }
%struct.TfLiteQuantizationParams = type { float, i32 }
%struct.TfLiteDelegate = type { i8*, i32 (%struct.TfLiteContext*, %struct.TfLiteDelegate*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteDelegate*, i32, %struct.TfLiteTensor*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteDelegate*, i32, %struct.TfLiteTensor*)*, void (%struct.TfLiteContext*, %struct.TfLiteDelegate*, i32*)*, i64 }
%struct.TfLiteQuantization = type { i32, i8* }
%struct.TfLiteSparsity = type { %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteDimensionMetadata*, i32 }
%struct.TfLiteDimensionMetadata = type { i32, i32, %struct.TfLiteIntArray*, %struct.TfLiteIntArray* }
%struct.TfLiteNode = type { %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, i8*, i8*, i8*, i32, %struct.TfLiteDelegate* }
%struct.TfLiteRegistration = type { i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, {}*, {}*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 }
%struct.TfLiteExternalContext = type { i32, i32 (%struct.TfLiteContext*)* }
%struct.TfLiteDelegateParams = type { %struct.TfLiteDelegate*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray* }
%"class.tflite::RuntimeShape" = type { i32, %union.anon }
%union.anon = type { i32*, [16 x i8] }
%"struct.tflite::ops::custom::rfft2d::OpData" = type { i32, i32 }
%"class.std::__1::complex" = type { float, float }

@.str = private unnamed_addr constant [23 x i8] c"%s:%d %s was not true.\00", align 1
@.str.1 = private unnamed_addr constant [63 x i8] c"../../third_party/tflite/src/tensorflow/lite/kernels/rfft2d.cc\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"num_dims >= 2\00", align 1
@.str.3 = private unnamed_addr constant [33 x i8] c"IsPowerOfTwo(fft_length_data[0])\00", align 1
@.str.4 = private unnamed_addr constant [33 x i8] c"IsPowerOfTwo(fft_length_data[1])\00", align 1
@.str.5 = private unnamed_addr constant [26 x i8] c"%s:%d %s != %s (%d != %d)\00", align 1
@.str.6 = private unnamed_addr constant [16 x i8] c"NumInputs(node)\00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c"2\00", align 1
@.str.8 = private unnamed_addr constant [17 x i8] c"NumOutputs(node)\00", align 1
@.str.9 = private unnamed_addr constant [2 x i8] c"1\00", align 1
@.str.10 = private unnamed_addr constant [26 x i8] c"NumDimensions(input) >= 2\00", align 1
@.str.11 = private unnamed_addr constant [48 x i8] c"Type '%s' for input is not supported by rfft2d.\00", align 1
@.str.12 = private unnamed_addr constant [26 x i8] c"NumDimensions(fft_length)\00", align 1
@.str.13 = private unnamed_addr constant [25 x i8] c"fft_length_shape.Dims(0)\00", align 1
@.str.14 = private unnamed_addr constant [53 x i8] c"Type '%s' for fft_length is not supported by rfft2d.\00", align 1
@.str.17 = private unnamed_addr constant [49 x i8] c"Type '%s' for output is not supported by rfft2d.\00", align 1
@.str.18 = private unnamed_addr constant [16 x i8] c"num_dims_output\00", align 1
@.str.19 = private unnamed_addr constant [21 x i8] c"NumDimensions(input)\00", align 1
@.str.20 = private unnamed_addr constant [21 x i8] c"num_dims_output >= 2\00", align 1
@.str.21 = private unnamed_addr constant [39 x i8] c"output_shape.Dims(num_dims_output - 2)\00", align 1
@.str.22 = private unnamed_addr constant [19 x i8] c"fft_length_data[0]\00", align 1
@.str.23 = private unnamed_addr constant [39 x i8] c"output_shape.Dims(num_dims_output - 1)\00", align 1
@.str.24 = private unnamed_addr constant [27 x i8] c"fft_length_data[1] / 2 + 1\00", align 1
@_ZZN6tflite3ops6custom15Register_RFFT2DEvE1r = internal global { i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 } { i8* (%struct.TfLiteContext*, i8*, i64)* @_ZN6tflite3ops6custom6rfft2d4InitEP13TfLiteContextPKcm, void (%struct.TfLiteContext*, i8*)* @_ZN6tflite3ops6custom6rfft2d4FreeEP13TfLiteContextPv, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops6custom6rfft2d7PrepareEP13TfLiteContextP10TfLiteNode, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops6custom6rfft2d4EvalEP13TfLiteContextP10TfLiteNode, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)* null, i32 0, i8* null, i32 0 }, align 8

; Function Attrs: nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZN6tflite3ops6custom6rfft2d12IsPowerOfTwoEj(i32) local_unnamed_addr #0 {
  %2 = tail call i32 @llvm.ctpop.i32(i32 %0), !range !2
  %3 = icmp eq i32 %2, 1
  ret i1 %3
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN6tflite3ops6custom6rfft2d31ResizeOutputandTemporaryTensorsEP13TfLiteContextP10TfLiteNode(%struct.TfLiteContext*, %struct.TfLiteNode* nocapture readonly) local_unnamed_addr #1 {
  %3 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 0
  %4 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %3, align 8
  %5 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %4, i64 0, i32 1, i64 0
  %6 = load i32, i32* %5, align 4
  %7 = icmp slt i32 %6, 0
  br i1 %7, label %13, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %10 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %9, align 8
  %11 = sext i32 %6 to i64
  %12 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %10, i64 %11
  br label %13

13:                                               ; preds = %2, %8
  %14 = phi %struct.TfLiteTensor* [ %12, %8 ], [ null, %2 ]
  %15 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %14, i64 0, i32 2
  %16 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %15, align 8
  %17 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %16, i64 0, i32 0
  %18 = load i32, i32* %17, align 4
  %19 = icmp sgt i32 %18, 1
  br i1 %19, label %23, label %20

20:                                               ; preds = %13
  %21 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %22 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %21, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %22(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.1, i64 0, i64 0), i32 105, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0)) #11
  br label %124

23:                                               ; preds = %13
  %24 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %4, i64 0, i32 1, i64 1
  %25 = load i32, i32* %24, align 4
  %26 = icmp slt i32 %25, 0
  br i1 %26, label %36, label %27

27:                                               ; preds = %23
  %28 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %29 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %28, align 8
  %30 = sext i32 %25 to i64
  %31 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %29, i64 %30
  %32 = icmp eq %struct.TfLiteTensor* %31, null
  br i1 %32, label %36, label %33

33:                                               ; preds = %27
  %34 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %29, i64 %30, i32 1, i32 0
  %35 = load i32*, i32** %34, align 8
  br label %36

36:                                               ; preds = %23, %27, %33
  %37 = phi i32* [ %35, %33 ], [ null, %27 ], [ null, %23 ]
  %38 = load i32, i32* %37, align 4
  %39 = tail call i32 @llvm.ctpop.i32(i32 %38) #11, !range !2
  %40 = icmp eq i32 %39, 1
  br i1 %40, label %44, label %41

41:                                               ; preds = %36
  %42 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %43 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %42, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %43(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.1, i64 0, i64 0), i32 109, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.3, i64 0, i64 0)) #11
  br label %124

44:                                               ; preds = %36
  %45 = getelementptr inbounds i32, i32* %37, i64 1
  %46 = load i32, i32* %45, align 4
  %47 = tail call i32 @llvm.ctpop.i32(i32 %46) #11, !range !2
  %48 = icmp eq i32 %47, 1
  br i1 %48, label %52, label %49

49:                                               ; preds = %44
  %50 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %51 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %50, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %51(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.1, i64 0, i64 0), i32 110, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.4, i64 0, i64 0)) #11
  br label %124

52:                                               ; preds = %44
  %53 = sdiv i32 %46, 2
  %54 = icmp slt i32 %38, %53
  %55 = select i1 %54, i32 %53, i32 %38
  %56 = sdiv i32 %55, 2
  %57 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 1
  %58 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %57, align 8
  %59 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %58, i64 0, i32 1, i64 0
  %60 = load i32, i32* %59, align 4
  %61 = icmp slt i32 %60, 0
  br i1 %61, label %67, label %62

62:                                               ; preds = %52
  %63 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %64 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %63, align 8
  %65 = sext i32 %60 to i64
  %66 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %64, i64 %65
  br label %67

67:                                               ; preds = %52, %62
  %68 = phi %struct.TfLiteTensor* [ %66, %62 ], [ null, %52 ]
  %69 = tail call %struct.TfLiteIntArray* @TfLiteIntArrayCopy(%struct.TfLiteIntArray* %16) #11
  %70 = load i32, i32* %37, align 4
  %71 = add nsw i32 %18, -2
  %72 = sext i32 %71 to i64
  %73 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %69, i64 0, i32 1, i64 %72
  store i32 %70, i32* %73, align 4
  %74 = load i32, i32* %45, align 4
  %75 = sdiv i32 %74, 2
  %76 = add nsw i32 %75, 1
  %77 = add nsw i32 %18, -1
  %78 = sext i32 %77 to i64
  %79 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %69, i64 0, i32 1, i64 %78
  store i32 %76, i32* %79, align 4
  %80 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 4
  %81 = load i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)** %80, align 8
  %82 = tail call i32 %81(%struct.TfLiteContext* %0, %struct.TfLiteTensor* %68, %struct.TfLiteIntArray* %69) #11
  %83 = icmp eq i32 %82, 0
  br i1 %83, label %84, label %124

84:                                               ; preds = %67
  %85 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 3
  %86 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %85, align 8
  %87 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %86, i64 0, i32 1, i64 0
  %88 = load i32, i32* %87, align 4
  %89 = icmp slt i32 %88, 0
  br i1 %89, label %95, label %90

90:                                               ; preds = %84
  %91 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %92 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %91, align 8
  %93 = sext i32 %88 to i64
  %94 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %92, i64 %93
  br label %95

95:                                               ; preds = %84, %90
  %96 = phi %struct.TfLiteTensor* [ %94, %90 ], [ null, %84 ]
  %97 = tail call %struct.TfLiteIntArray* @TfLiteIntArrayCreate(i32 1) #11
  %98 = sitofp i32 %55 to double
  %99 = tail call double @sqrt(double %98) #11
  %100 = fptosi double %99 to i32
  %101 = add nsw i32 %100, 2
  %102 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %97, i64 0, i32 1, i64 0
  store i32 %101, i32* %102, align 4
  %103 = load i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)** %80, align 8
  %104 = tail call i32 %103(%struct.TfLiteContext* %0, %struct.TfLiteTensor* %96, %struct.TfLiteIntArray* %97) #11
  %105 = icmp eq i32 %104, 0
  br i1 %105, label %106, label %124

106:                                              ; preds = %95
  %107 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %85, align 8
  %108 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %107, i64 0, i32 1, i64 1
  %109 = load i32, i32* %108, align 4
  %110 = icmp slt i32 %109, 0
  br i1 %110, label %116, label %111

111:                                              ; preds = %106
  %112 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %113 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %112, align 8
  %114 = sext i32 %109 to i64
  %115 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %113, i64 %114
  br label %116

116:                                              ; preds = %106, %111
  %117 = phi %struct.TfLiteTensor* [ %115, %111 ], [ null, %106 ]
  %118 = tail call %struct.TfLiteIntArray* @TfLiteIntArrayCreate(i32 1) #11
  %119 = sdiv i32 %46, 4
  %120 = add nsw i32 %56, %119
  %121 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %118, i64 0, i32 1, i64 0
  store i32 %120, i32* %121, align 4
  %122 = load i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)** %80, align 8
  %123 = tail call i32 %122(%struct.TfLiteContext* %0, %struct.TfLiteTensor* %117, %struct.TfLiteIntArray* %118) #11
  br label %124

124:                                              ; preds = %67, %116, %95, %41, %49, %20
  %125 = phi i32 [ 1, %20 ], [ 1, %49 ], [ 1, %41 ], [ %82, %67 ], [ %104, %95 ], [ %123, %116 ]
  ret i32 %125
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

declare %struct.TfLiteIntArray* @TfLiteIntArrayCopy(%struct.TfLiteIntArray*) local_unnamed_addr #3

declare %struct.TfLiteIntArray* @TfLiteIntArrayCreate(i32) local_unnamed_addr #3

; Function Attrs: nofree nounwind ssp uwtable
define hidden noalias nonnull i8* @_ZN6tflite3ops6custom6rfft2d4InitEP13TfLiteContextPKcm(%struct.TfLiteContext* nocapture readnone, i8* nocapture readnone, i64) #4 {
  %4 = tail call i8* @_Znwm(i64 8) #12
  %5 = bitcast i8* %4 to i32*
  store i32 -1, i32* %5, align 4
  %6 = getelementptr inbounds i8, i8* %4, i64 4
  %7 = bitcast i8* %6 to i32*
  store i32 -1, i32* %7, align 4
  ret i8* %4
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6tflite3ops6custom6rfft2d4FreeEP13TfLiteContextPv(%struct.TfLiteContext* nocapture readnone, i8*) #1 {
  %3 = icmp eq i8* %1, null
  br i1 %3, label %5, label %4

4:                                                ; preds = %2
  tail call void @_ZdlPv(i8* nonnull %1) #12
  br label %5

5:                                                ; preds = %4, %2
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN6tflite3ops6custom6rfft2d7PrepareEP13TfLiteContextP10TfLiteNode(%struct.TfLiteContext*, %struct.TfLiteNode* nocapture) #1 {
  %3 = alloca i32, align 4
  %4 = alloca %"class.tflite::RuntimeShape", align 8
  %5 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 0
  %6 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %5, align 8
  %7 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %6, i64 0, i32 0
  %8 = load i32, i32* %7, align 4
  %9 = icmp eq i32 %8, 2
  br i1 %9, label %13, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %12 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %11, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %12(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.1, i64 0, i64 0), i32 156, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i64 0, i64 0), i32 %8, i32 2) #11
  br label %250

13:                                               ; preds = %2
  %14 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 1
  %15 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %14, align 8
  %16 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %15, i64 0, i32 0
  %17 = load i32, i32* %16, align 4
  %18 = icmp eq i32 %17, 1
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %21 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %20, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %21(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.1, i64 0, i64 0), i32 157, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i64 0, i64 0), i32 %17, i32 1) #11
  br label %250

22:                                               ; preds = %13
  %23 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %6, i64 0, i32 1, i64 0
  %24 = load i32, i32* %23, align 4
  %25 = icmp slt i32 %24, 0
  br i1 %25, label %31, label %26

26:                                               ; preds = %22
  %27 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %28 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %27, align 8
  %29 = sext i32 %24 to i64
  %30 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %28, i64 %29
  br label %31

31:                                               ; preds = %22, %26
  %32 = phi %struct.TfLiteTensor* [ %30, %26 ], [ null, %22 ]
  %33 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %32, i64 0, i32 2
  %34 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %33, align 8
  %35 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %34, i64 0, i32 0
  %36 = load i32, i32* %35, align 4
  %37 = icmp sgt i32 %36, 1
  br i1 %37, label %41, label %38

38:                                               ; preds = %31
  %39 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %40 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %39, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %40(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.1, i64 0, i64 0), i32 161, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.10, i64 0, i64 0)) #11
  br label %250

41:                                               ; preds = %31
  %42 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %32, i64 0, i32 0
  %43 = load i32, i32* %42, align 8
  %44 = icmp eq i32 %43, 1
  br i1 %44, label %49, label %45

45:                                               ; preds = %41
  %46 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %47 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %46, align 8
  %48 = tail call i8* @TfLiteTypeGetName(i32 %43) #11
  tail call void (%struct.TfLiteContext*, i8*, ...) %47(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.11, i64 0, i64 0), i8* %48) #11
  br label %250

49:                                               ; preds = %41
  %50 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %6, i64 0, i32 1, i64 1
  %51 = load i32, i32* %50, align 4
  %52 = icmp slt i32 %51, 0
  br i1 %52, label %53, label %55

53:                                               ; preds = %49
  %54 = bitcast %"class.tflite::RuntimeShape"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %54) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %54, i8 -86, i64 32, i1 false)
  br label %62

55:                                               ; preds = %49
  %56 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %57 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %56, align 8
  %58 = sext i32 %51 to i64
  %59 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %57, i64 %58
  %60 = bitcast %"class.tflite::RuntimeShape"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %60) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %60, i8 -86, i64 32, i1 false)
  %61 = icmp eq %struct.TfLiteTensor* %59, null
  br i1 %61, label %62, label %65

62:                                               ; preds = %53, %55
  %63 = phi i8* [ %54, %53 ], [ %60, %55 ]
  %64 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 0
  store i32 0, i32* %64, align 8, !alias.scope !3
  br label %90

65:                                               ; preds = %55
  %66 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %57, i64 %58, i32 2
  %67 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %66, align 8, !noalias !3
  %68 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %67, i64 0, i32 0
  %69 = load i32, i32* %68, align 4, !noalias !3
  %70 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %67, i64 0, i32 1, i64 0
  %71 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 0
  store i32 %69, i32* %71, align 8, !alias.scope !3
  %72 = icmp sgt i32 %69, 5
  br i1 %72, label %73, label %80

73:                                               ; preds = %65
  %74 = sext i32 %69 to i64
  %75 = shl nsw i64 %74, 2
  %76 = tail call i8* @_Znam(i64 %75) #12, !noalias !3
  %77 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1, i32 0
  %78 = bitcast i32** %77 to i8**
  store i8* %76, i8** %78, align 8, !alias.scope !3
  %79 = bitcast i8* %76 to i32*
  br label %85

80:                                               ; preds = %65
  %81 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1
  %82 = bitcast %union.anon* %81 to i32*
  %83 = sext i32 %69 to i64
  %84 = shl nsw i64 %83, 2
  br label %85

85:                                               ; preds = %80, %73
  %86 = phi i64 [ %75, %73 ], [ %84, %80 ]
  %87 = phi i32* [ %79, %73 ], [ %82, %80 ]
  %88 = bitcast i32* %87 to i8*
  %89 = bitcast i32* %70 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %88, i8* align 4 %89, i64 %86, i1 false) #11
  br label %90

90:                                               ; preds = %62, %85
  %91 = phi i32 [ 0, %62 ], [ %69, %85 ]
  %92 = phi i8* [ %63, %62 ], [ %60, %85 ]
  %93 = phi %struct.TfLiteTensor* [ null, %62 ], [ %59, %85 ]
  %94 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %93, i64 0, i32 2
  %95 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %94, align 8
  %96 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %95, i64 0, i32 0
  %97 = load i32, i32* %96, align 4
  %98 = icmp eq i32 %97, 1
  br i1 %98, label %102, label %99

99:                                               ; preds = %90
  %100 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %101 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %100, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %101(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.1, i64 0, i64 0), i32 173, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.12, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i64 0, i64 0), i32 %97, i32 1) #11
  br label %240

102:                                              ; preds = %90
  %103 = icmp sgt i32 %91, 5
  %104 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1
  %105 = getelementptr inbounds %union.anon, %union.anon* %104, i64 0, i32 0
  %106 = load i32*, i32** %105, align 8
  %107 = bitcast %union.anon* %104 to i32*
  %108 = select i1 %103, i32* %106, i32* %107
  %109 = load i32, i32* %108, align 4
  %110 = icmp eq i32 %109, 2
  br i1 %110, label %114, label %111

111:                                              ; preds = %102
  %112 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %113 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %112, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %113(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.1, i64 0, i64 0), i32 174, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.13, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i64 0, i64 0), i32 %109, i32 2) #11
  br label %240

114:                                              ; preds = %102
  %115 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %93, i64 0, i32 0
  %116 = load i32, i32* %115, align 8
  %117 = icmp eq i32 %116, 2
  br i1 %117, label %122, label %118

118:                                              ; preds = %114
  %119 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %120 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %119, align 8
  %121 = tail call i8* @TfLiteTypeGetName(i32 %116) #11
  tail call void (%struct.TfLiteContext*, i8*, ...) %120(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.14, i64 0, i64 0), i8* %121) #11
  br label %240

122:                                              ; preds = %114
  %123 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 4
  %124 = bitcast i8** %123 to %"struct.tflite::ops::custom::rfft2d::OpData"**
  %125 = load %"struct.tflite::ops::custom::rfft2d::OpData"*, %"struct.tflite::ops::custom::rfft2d::OpData"** %124, align 8
  %126 = getelementptr inbounds %"struct.tflite::ops::custom::rfft2d::OpData", %"struct.tflite::ops::custom::rfft2d::OpData"* %125, i64 0, i32 0
  %127 = load i32, i32* %126, align 4
  %128 = icmp eq i32 %127, -1
  br i1 %128, label %133, label %129

129:                                              ; preds = %122
  %130 = getelementptr inbounds %"struct.tflite::ops::custom::rfft2d::OpData", %"struct.tflite::ops::custom::rfft2d::OpData"* %125, i64 0, i32 1
  %131 = load i32, i32* %130, align 4
  %132 = icmp eq i32 %131, -1
  br i1 %132, label %133, label %179

133:                                              ; preds = %129, %122
  %134 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 3
  %135 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %134, align 8
  tail call void @TfLiteIntArrayFree(%struct.TfLiteIntArray* %135) #11
  %136 = tail call %struct.TfLiteIntArray* @TfLiteIntArrayCreate(i32 2) #11
  store %struct.TfLiteIntArray* %136, %struct.TfLiteIntArray** %134, align 8
  %137 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %137) #11
  store i32 -1431655766, i32* %3, align 4
  %138 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 6
  %139 = load i32 (%struct.TfLiteContext*, i32, i32*)*, i32 (%struct.TfLiteContext*, i32, i32*)** %138, align 8
  %140 = call i32 %139(%struct.TfLiteContext* %0, i32 2, i32* nonnull %3) #11
  %141 = icmp eq i32 %140, 0
  br i1 %141, label %142, label %178

142:                                              ; preds = %133
  %143 = load i32, i32* %3, align 4
  %144 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %134, align 8
  %145 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %144, i64 0, i32 1, i64 0
  store i32 %143, i32* %145, align 4
  store i32 %143, i32* %126, align 4
  %146 = load i32, i32* %3, align 4
  %147 = add nsw i32 %146, 1
  %148 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %134, align 8
  %149 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %148, i64 0, i32 1, i64 1
  store i32 %147, i32* %149, align 4
  %150 = getelementptr inbounds %"struct.tflite::ops::custom::rfft2d::OpData", %"struct.tflite::ops::custom::rfft2d::OpData"* %125, i64 0, i32 1
  store i32 %147, i32* %150, align 4
  %151 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %134, align 8
  %152 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %151, i64 0, i32 1, i64 0
  %153 = load i32, i32* %152, align 4
  %154 = icmp slt i32 %153, 0
  br i1 %154, label %160, label %155

155:                                              ; preds = %142
  %156 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %157 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %156, align 8
  %158 = sext i32 %153 to i64
  %159 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %157, i64 %158
  br label %160

160:                                              ; preds = %155, %142
  %161 = phi %struct.TfLiteTensor* [ %159, %155 ], [ null, %142 ]
  %162 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %161, i64 0, i32 0
  store i32 2, i32* %162, align 8
  %163 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %161, i64 0, i32 4
  store i32 2, i32* %163, align 8
  %164 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %134, align 8
  %165 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %164, i64 0, i32 1, i64 1
  %166 = load i32, i32* %165, align 4
  %167 = icmp slt i32 %166, 0
  br i1 %167, label %173, label %168

168:                                              ; preds = %160
  %169 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %170 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %169, align 8
  %171 = sext i32 %166 to i64
  %172 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %170, i64 %171
  br label %173

173:                                              ; preds = %160, %168
  %174 = phi %struct.TfLiteTensor* [ %172, %168 ], [ null, %160 ]
  %175 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %174, i64 0, i32 0
  store i32 4, i32* %175, align 8
  %176 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %174, i64 0, i32 4
  store i32 2, i32* %176, align 8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %137) #11
  %177 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %14, align 8
  br label %179

178:                                              ; preds = %133
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %137) #11
  br label %240

179:                                              ; preds = %129, %173
  %180 = phi %struct.TfLiteIntArray* [ %15, %129 ], [ %177, %173 ]
  %181 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %180, i64 0, i32 1, i64 0
  %182 = load i32, i32* %181, align 4
  %183 = icmp slt i32 %182, 0
  br i1 %183, label %189, label %184

184:                                              ; preds = %179
  %185 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %186 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %185, align 8
  %187 = sext i32 %182 to i64
  %188 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %186, i64 %187
  br label %189

189:                                              ; preds = %179, %184
  %190 = phi %struct.TfLiteTensor* [ %188, %184 ], [ null, %179 ]
  %191 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %190, i64 0, i32 0
  store i32 8, i32* %191, align 8
  %192 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %93, i64 0, i32 4
  %193 = load i32, i32* %192, align 8
  %194 = icmp eq i32 %193, 1
  br i1 %194, label %238, label %195

195:                                              ; preds = %189
  %196 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 3
  %197 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %196, align 8
  %198 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %197, i64 0, i32 1, i64 0
  %199 = load i32, i32* %198, align 4
  %200 = icmp slt i32 %199, 0
  br i1 %200, label %206, label %201

201:                                              ; preds = %195
  %202 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %203 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %202, align 8
  %204 = sext i32 %199 to i64
  %205 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %203, i64 %204
  br label %206

206:                                              ; preds = %195, %201
  %207 = phi %struct.TfLiteTensor* [ %205, %201 ], [ null, %195 ]
  %208 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %197, i64 0, i32 1, i64 1
  %209 = load i32, i32* %208, align 4
  %210 = icmp slt i32 %209, 0
  br i1 %210, label %216, label %211

211:                                              ; preds = %206
  %212 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %213 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %212, align 8
  %214 = sext i32 %209 to i64
  %215 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %213, i64 %214
  br label %216

216:                                              ; preds = %206, %211
  %217 = phi %struct.TfLiteTensor* [ %215, %211 ], [ null, %206 ]
  %218 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %207, i64 0, i32 4
  %219 = load i32, i32* %218, align 8
  %220 = icmp eq i32 %219, 4
  br i1 %220, label %224, label %221

221:                                              ; preds = %216
  store i32 4, i32* %218, align 8
  %222 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %207, i64 0, i32 1
  %223 = bitcast %union.TfLitePtrUnion* %222 to i8**
  store i8* null, i8** %223, align 8
  br label %224

224:                                              ; preds = %216, %221
  %225 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %217, i64 0, i32 4
  %226 = load i32, i32* %225, align 8
  %227 = icmp eq i32 %226, 4
  br i1 %227, label %231, label %228

228:                                              ; preds = %224
  store i32 4, i32* %225, align 8
  %229 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %217, i64 0, i32 1
  %230 = bitcast %union.TfLitePtrUnion* %229 to i8**
  store i8* null, i8** %230, align 8
  br label %231

231:                                              ; preds = %224, %228
  %232 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %190, i64 0, i32 4
  %233 = load i32, i32* %232, align 8
  %234 = icmp eq i32 %233, 4
  br i1 %234, label %240, label %235

235:                                              ; preds = %231
  store i32 4, i32* %232, align 8
  %236 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %190, i64 0, i32 1
  %237 = bitcast %union.TfLitePtrUnion* %236 to i8**
  store i8* null, i8** %237, align 8
  br label %240

238:                                              ; preds = %189
  %239 = call i32 @_ZN6tflite3ops6custom6rfft2d31ResizeOutputandTemporaryTensorsEP13TfLiteContextP10TfLiteNode(%struct.TfLiteContext* %0, %struct.TfLiteNode* %1)
  br label %240

240:                                              ; preds = %235, %231, %178, %238, %118, %111, %99
  %241 = phi i32 [ 1, %99 ], [ 1, %111 ], [ 1, %118 ], [ %140, %178 ], [ %239, %238 ], [ 0, %231 ], [ 0, %235 ]
  %242 = icmp sgt i32 %91, 5
  br i1 %242, label %243, label %249

243:                                              ; preds = %240
  %244 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1, i32 0
  %245 = load i32*, i32** %244, align 8
  %246 = icmp eq i32* %245, null
  br i1 %246, label %249, label %247

247:                                              ; preds = %243
  %248 = bitcast i32* %245 to i8*
  call void @_ZdaPv(i8* %248) #12
  br label %249

249:                                              ; preds = %240, %243, %247
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %92) #11
  br label %250

250:                                              ; preds = %38, %45, %249, %19, %10
  %251 = phi i32 [ 1, %10 ], [ 1, %19 ], [ 1, %45 ], [ %241, %249 ], [ 1, %38 ]
  ret i32 %251
}

declare i8* @TfLiteTypeGetName(i32) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6tflite3ops6custom6rfft2d13Rfft2dReorderEiiPPd(i32, i32, double** nocapture readonly) local_unnamed_addr #1 {
  %4 = ashr i32 %0, 1
  %5 = add nsw i32 %4, 1
  %6 = icmp slt i32 %5, %0
  %7 = sext i32 %1 to i64
  %8 = add nsw i32 %1, 1
  %9 = sext i32 %8 to i64
  %10 = sext i32 %4 to i64
  br i1 %6, label %11, label %14

11:                                               ; preds = %3
  %12 = add nsw i64 %10, 1
  %13 = sext i32 %0 to i64
  br label %47

14:                                               ; preds = %47, %3
  %15 = load double*, double** %2, align 8
  %16 = getelementptr inbounds double, double* %15, i64 1
  %17 = bitcast double* %16 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = getelementptr inbounds double, double* %15, i64 %7
  %20 = bitcast double* %19 to i64*
  store i64 %18, i64* %20, align 8
  %21 = load double*, double** %2, align 8
  %22 = getelementptr inbounds double, double* %21, i64 %9
  store double 0.000000e+00, double* %22, align 8
  %23 = load double*, double** %2, align 8
  %24 = getelementptr inbounds double, double* %23, i64 1
  store double 0.000000e+00, double* %24, align 8
  %25 = getelementptr inbounds double*, double** %2, i64 %10
  %26 = load double*, double** %25, align 8
  %27 = getelementptr inbounds double, double* %26, i64 1
  %28 = bitcast double* %27 to i64*
  %29 = load i64, i64* %28, align 8
  %30 = getelementptr inbounds double, double* %26, i64 %7
  %31 = bitcast double* %30 to i64*
  store i64 %29, i64* %31, align 8
  %32 = load double*, double** %25, align 8
  %33 = getelementptr inbounds double, double* %32, i64 %9
  store double 0.000000e+00, double* %33, align 8
  %34 = load double*, double** %25, align 8
  %35 = getelementptr inbounds double, double* %34, i64 1
  store double 0.000000e+00, double* %35, align 8
  %36 = icmp sgt i32 %0, 0
  br i1 %36, label %37, label %85

37:                                               ; preds = %14
  %38 = icmp sgt i32 %1, -1
  %39 = zext i32 %0 to i64
  %40 = sext i32 %1 to i64
  %41 = lshr i64 %40, 1
  %42 = add nuw i64 %41, 1
  %43 = and i64 %42, 3
  %44 = icmp ult i32 %1, 6
  %45 = sub i64 %42, %43
  %46 = icmp eq i64 %43, 0
  br label %81

47:                                               ; preds = %47, %11
  %48 = phi i64 [ %12, %11 ], [ %78, %47 ]
  %49 = getelementptr inbounds double*, double** %2, i64 %48
  %50 = load double*, double** %49, align 8
  %51 = load double, double* %50, align 8
  %52 = getelementptr inbounds double, double* %50, i64 1
  %53 = bitcast double* %52 to i64*
  %54 = load i64, i64* %53, align 8
  %55 = getelementptr inbounds double, double* %50, i64 %7
  %56 = bitcast double* %55 to i64*
  store i64 %54, i64* %56, align 8
  %57 = load double*, double** %49, align 8
  %58 = getelementptr inbounds double, double* %57, i64 %9
  store double %51, double* %58, align 8
  %59 = sub nsw i64 %13, %48
  %60 = getelementptr inbounds double*, double** %2, i64 %59
  %61 = load double*, double** %60, align 8
  %62 = getelementptr inbounds double, double* %61, i64 %7
  %63 = bitcast double* %62 to i64*
  store i64 %54, i64* %63, align 8
  %64 = fsub double -0.000000e+00, %51
  %65 = load double*, double** %60, align 8
  %66 = getelementptr inbounds double, double* %65, i64 %9
  store double %64, double* %66, align 8
  %67 = bitcast double** %60 to i64**
  %68 = load i64*, i64** %67, align 8
  %69 = load i64, i64* %68, align 8
  %70 = bitcast double** %49 to i64**
  %71 = load i64*, i64** %70, align 8
  store i64 %69, i64* %71, align 8
  %72 = load double*, double** %60, align 8
  %73 = getelementptr inbounds double, double* %72, i64 1
  %74 = load double, double* %73, align 8
  %75 = fsub double -0.000000e+00, %74
  %76 = load double*, double** %49, align 8
  %77 = getelementptr inbounds double, double* %76, i64 1
  store double %75, double* %77, align 8
  %78 = add i64 %48, 1
  %79 = trunc i64 %78 to i32
  %80 = icmp eq i32 %79, %0
  br i1 %80, label %14, label %47

81:                                               ; preds = %98, %37
  %82 = phi i64 [ 0, %37 ], [ %99, %98 ]
  br i1 %38, label %83, label %98

83:                                               ; preds = %81
  %84 = getelementptr inbounds double*, double** %2, i64 %82
  br i1 %44, label %86, label %101

85:                                               ; preds = %98, %14
  ret void

86:                                               ; preds = %101, %83
  %87 = phi i64 [ 1, %83 ], [ %123, %101 ]
  br i1 %46, label %98, label %88

88:                                               ; preds = %86, %88
  %89 = phi i64 [ %95, %88 ], [ %87, %86 ]
  %90 = phi i64 [ %96, %88 ], [ %43, %86 ]
  %91 = load double*, double** %84, align 8
  %92 = getelementptr inbounds double, double* %91, i64 %89
  %93 = load double, double* %92, align 8
  %94 = fsub double -0.000000e+00, %93
  store double %94, double* %92, align 8
  %95 = add nuw nsw i64 %89, 2
  %96 = add i64 %90, -1
  %97 = icmp eq i64 %96, 0
  br i1 %97, label %98, label %88, !llvm.loop !6

98:                                               ; preds = %86, %88, %81
  %99 = add nuw nsw i64 %82, 1
  %100 = icmp eq i64 %99, %39
  br i1 %100, label %85, label %81

101:                                              ; preds = %83, %101
  %102 = phi i64 [ %123, %101 ], [ 1, %83 ]
  %103 = phi i64 [ %124, %101 ], [ %45, %83 ]
  %104 = load double*, double** %84, align 8
  %105 = getelementptr inbounds double, double* %104, i64 %102
  %106 = load double, double* %105, align 8
  %107 = fsub double -0.000000e+00, %106
  store double %107, double* %105, align 8
  %108 = add nuw nsw i64 %102, 2
  %109 = load double*, double** %84, align 8
  %110 = getelementptr inbounds double, double* %109, i64 %108
  %111 = load double, double* %110, align 8
  %112 = fsub double -0.000000e+00, %111
  store double %112, double* %110, align 8
  %113 = add nuw nsw i64 %102, 4
  %114 = load double*, double** %84, align 8
  %115 = getelementptr inbounds double, double* %114, i64 %113
  %116 = load double, double* %115, align 8
  %117 = fsub double -0.000000e+00, %116
  store double %117, double* %115, align 8
  %118 = add nuw nsw i64 %102, 6
  %119 = load double*, double** %84, align 8
  %120 = getelementptr inbounds double, double* %119, i64 %118
  %121 = load double, double* %120, align 8
  %122 = fsub double -0.000000e+00, %121
  store double %122, double* %120, align 8
  %123 = add nuw nsw i64 %102, 8
  %124 = add i64 %103, -4
  %125 = icmp eq i64 %124, 0
  br i1 %125, label %86, label %101
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6tflite3ops6custom6rfft2d10Rfft2dImplEiiPPdPiS3_(i32, i32, double**, i32*, double*) local_unnamed_addr #1 {
  tail call void @rdft2d(i32 %0, i32 %1, i32 1, double** %2, double* null, i32* %3, double* %4) #11
  tail call void @_ZN6tflite3ops6custom6rfft2d13Rfft2dReorderEiiPPd(i32 %0, i32 %1, double** %2)
  ret void
}

declare void @rdft2d(i32, i32, i32, double**, double*, i32*, double*) local_unnamed_addr #3

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN6tflite3ops6custom6rfft2d18PrepareInputBufferEPKfiiiiPPd(float* nocapture readonly, i32, i32, i32, i32, double** nocapture readonly) local_unnamed_addr #7 {
  %7 = icmp slt i32 %3, %1
  %8 = select i1 %7, i32 %3, i32 %1
  %9 = icmp slt i32 %4, %2
  %10 = select i1 %9, i32 %4, i32 %2
  %11 = icmp sgt i32 %8, 0
  br i1 %11, label %12, label %29

12:                                               ; preds = %6
  %13 = icmp sgt i32 %10, 0
  %14 = add nsw i32 %4, 2
  %15 = icmp slt i32 %10, %14
  %16 = sext i32 %10 to i64
  %17 = sext i32 %14 to i64
  %18 = sext i32 %8 to i64
  %19 = sub nsw i64 %17, %16
  %20 = xor i64 %16, -1
  %21 = add nsw i64 %20, %17
  %22 = and i64 %16, 1
  %23 = icmp eq i32 %10, 1
  %24 = sub nsw i64 %16, %22
  %25 = icmp eq i64 %22, 0
  %26 = and i64 %19, 3
  %27 = icmp eq i64 %26, 0
  %28 = icmp ult i64 %21, 3
  br label %42

29:                                               ; preds = %90, %6
  %30 = icmp sgt i32 %3, %1
  br i1 %30, label %31, label %113

31:                                               ; preds = %29
  %32 = add i32 %4, 2
  %33 = icmp sgt i32 %32, 0
  %34 = sext i32 %8 to i64
  %35 = sext i32 %3 to i64
  %36 = zext i32 %32 to i64
  %37 = add nsw i64 %36, -1
  %38 = and i64 %36, 3
  %39 = icmp ult i64 %37, 3
  %40 = sub nsw i64 %36, %38
  %41 = icmp eq i64 %38, 0
  br label %109

42:                                               ; preds = %12, %90
  %43 = phi i64 [ 0, %12 ], [ %91, %90 ]
  %44 = phi i32 [ 0, %12 ], [ %93, %90 ]
  br i1 %13, label %45, label %57

45:                                               ; preds = %42
  %46 = sext i32 %44 to i64
  %47 = getelementptr inbounds double*, double** %5, i64 %43
  br i1 %23, label %48, label %70

48:                                               ; preds = %70, %45
  %49 = phi i64 [ %46, %45 ], [ %81, %70 ]
  %50 = phi i64 [ 0, %45 ], [ %87, %70 ]
  br i1 %25, label %57, label %51

51:                                               ; preds = %48
  %52 = getelementptr inbounds float, float* %0, i64 %49
  %53 = load float, float* %52, align 4
  %54 = fpext float %53 to double
  %55 = load double*, double** %47, align 8
  %56 = getelementptr inbounds double, double* %55, i64 %50
  store double %54, double* %56, align 8
  br label %57

57:                                               ; preds = %51, %48, %42
  br i1 %15, label %58, label %90

58:                                               ; preds = %57
  %59 = getelementptr inbounds double*, double** %5, i64 %43
  br i1 %27, label %68, label %60

60:                                               ; preds = %58, %60
  %61 = phi i64 [ %65, %60 ], [ %16, %58 ]
  %62 = phi i64 [ %66, %60 ], [ %26, %58 ]
  %63 = load double*, double** %59, align 8
  %64 = getelementptr inbounds double, double* %63, i64 %61
  store double 0.000000e+00, double* %64, align 8
  %65 = add nsw i64 %61, 1
  %66 = add i64 %62, -1
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %68, label %60, !llvm.loop !8

68:                                               ; preds = %60, %58
  %69 = phi i64 [ %16, %58 ], [ %65, %60 ]
  br i1 %28, label %90, label %94

70:                                               ; preds = %45, %70
  %71 = phi i64 [ %81, %70 ], [ %46, %45 ]
  %72 = phi i64 [ %87, %70 ], [ 0, %45 ]
  %73 = phi i64 [ %88, %70 ], [ %24, %45 ]
  %74 = add nsw i64 %71, 1
  %75 = getelementptr inbounds float, float* %0, i64 %71
  %76 = load float, float* %75, align 4
  %77 = fpext float %76 to double
  %78 = load double*, double** %47, align 8
  %79 = getelementptr inbounds double, double* %78, i64 %72
  store double %77, double* %79, align 8
  %80 = or i64 %72, 1
  %81 = add nsw i64 %71, 2
  %82 = getelementptr inbounds float, float* %0, i64 %74
  %83 = load float, float* %82, align 4
  %84 = fpext float %83 to double
  %85 = load double*, double** %47, align 8
  %86 = getelementptr inbounds double, double* %85, i64 %80
  store double %84, double* %86, align 8
  %87 = add nuw nsw i64 %72, 2
  %88 = add i64 %73, -2
  %89 = icmp eq i64 %88, 0
  br i1 %89, label %48, label %70

90:                                               ; preds = %68, %94, %57
  %91 = add nuw nsw i64 %43, 1
  %92 = icmp slt i64 %91, %18
  %93 = add i32 %44, %2
  br i1 %92, label %42, label %29

94:                                               ; preds = %68, %94
  %95 = phi i64 [ %107, %94 ], [ %69, %68 ]
  %96 = load double*, double** %59, align 8
  %97 = getelementptr inbounds double, double* %96, i64 %95
  store double 0.000000e+00, double* %97, align 8
  %98 = add nsw i64 %95, 1
  %99 = load double*, double** %59, align 8
  %100 = getelementptr inbounds double, double* %99, i64 %98
  store double 0.000000e+00, double* %100, align 8
  %101 = add nsw i64 %95, 2
  %102 = load double*, double** %59, align 8
  %103 = getelementptr inbounds double, double* %102, i64 %101
  store double 0.000000e+00, double* %103, align 8
  %104 = add nsw i64 %95, 3
  %105 = load double*, double** %59, align 8
  %106 = getelementptr inbounds double, double* %105, i64 %104
  store double 0.000000e+00, double* %106, align 8
  %107 = add nsw i64 %95, 4
  %108 = icmp slt i64 %107, %17
  br i1 %108, label %94, label %90

109:                                              ; preds = %31, %124
  %110 = phi i64 [ %34, %31 ], [ %125, %124 ]
  br i1 %33, label %111, label %124

111:                                              ; preds = %109
  %112 = getelementptr inbounds double*, double** %5, i64 %110
  br i1 %39, label %114, label %127

113:                                              ; preds = %124, %29
  ret void

114:                                              ; preds = %127, %111
  %115 = phi i64 [ 0, %111 ], [ %141, %127 ]
  br i1 %41, label %124, label %116

116:                                              ; preds = %114, %116
  %117 = phi i64 [ %121, %116 ], [ %115, %114 ]
  %118 = phi i64 [ %122, %116 ], [ %38, %114 ]
  %119 = load double*, double** %112, align 8
  %120 = getelementptr inbounds double, double* %119, i64 %117
  store double 0.000000e+00, double* %120, align 8
  %121 = add nuw nsw i64 %117, 1
  %122 = add i64 %118, -1
  %123 = icmp eq i64 %122, 0
  br i1 %123, label %124, label %116, !llvm.loop !9

124:                                              ; preds = %114, %116, %109
  %125 = add nsw i64 %110, 1
  %126 = icmp slt i64 %125, %35
  br i1 %126, label %109, label %113

127:                                              ; preds = %111, %127
  %128 = phi i64 [ %141, %127 ], [ 0, %111 ]
  %129 = phi i64 [ %142, %127 ], [ %40, %111 ]
  %130 = load double*, double** %112, align 8
  %131 = getelementptr inbounds double, double* %130, i64 %128
  store double 0.000000e+00, double* %131, align 8
  %132 = or i64 %128, 1
  %133 = load double*, double** %112, align 8
  %134 = getelementptr inbounds double, double* %133, i64 %132
  store double 0.000000e+00, double* %134, align 8
  %135 = or i64 %128, 2
  %136 = load double*, double** %112, align 8
  %137 = getelementptr inbounds double, double* %136, i64 %135
  store double 0.000000e+00, double* %137, align 8
  %138 = or i64 %128, 3
  %139 = load double*, double** %112, align 8
  %140 = getelementptr inbounds double, double* %139, i64 %138
  store double 0.000000e+00, double* %140, align 8
  %141 = add nuw nsw i64 %128, 4
  %142 = add i64 %129, -4
  %143 = icmp eq i64 %142, 0
  br i1 %143, label %114, label %127
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6tflite3ops6custom6rfft2d19PrepareOutputBufferEPNSt3__17complexIfEEiiPPd(%"class.std::__1::complex"* nocapture, i32, i32, double** nocapture readonly) local_unnamed_addr #1 {
  %5 = icmp sgt i32 %1, 0
  br i1 %5, label %6, label %23

6:                                                ; preds = %4
  %7 = sdiv i32 %2, 2
  %8 = icmp slt i32 %2, -1
  %9 = add nsw i32 %7, 1
  %10 = zext i32 %1 to i64
  %11 = zext i32 %9 to i64
  %12 = and i64 %11, 1
  %13 = add i32 %2, 1
  %14 = icmp ult i32 %13, 3
  %15 = sub nsw i64 %11, %12
  %16 = icmp eq i64 %12, 0
  br label %17

17:                                               ; preds = %44, %6
  %18 = phi i64 [ 0, %6 ], [ %46, %44 ]
  %19 = phi i32 [ 0, %6 ], [ %45, %44 ]
  br i1 %8, label %44, label %20

20:                                               ; preds = %17
  %21 = getelementptr inbounds double*, double** %3, i64 %18
  %22 = sext i32 %19 to i64
  br i1 %14, label %24, label %48

23:                                               ; preds = %44, %4
  ret void

24:                                               ; preds = %48, %20
  %25 = phi i64 [ undef, %20 ], [ %74, %48 ]
  %26 = phi i64 [ %22, %20 ], [ %74, %48 ]
  %27 = phi i64 [ 0, %20 ], [ %77, %48 ]
  br i1 %16, label %41, label %28

28:                                               ; preds = %24
  %29 = load double*, double** %21, align 8
  %30 = shl nuw nsw i64 %27, 1
  %31 = getelementptr inbounds double, double* %29, i64 %30
  %32 = load double, double* %31, align 8
  %33 = fptrunc double %32 to float
  %34 = or i64 %30, 1
  %35 = getelementptr inbounds double, double* %29, i64 %34
  %36 = load double, double* %35, align 8
  %37 = fptrunc double %36 to float
  %38 = getelementptr inbounds %"class.std::__1::complex", %"class.std::__1::complex"* %0, i64 %26, i32 0
  store float %33, float* %38, align 4
  %39 = getelementptr inbounds %"class.std::__1::complex", %"class.std::__1::complex"* %0, i64 %26, i32 1
  store float %37, float* %39, align 4
  %40 = add nsw i64 %26, 1
  br label %41

41:                                               ; preds = %24, %28
  %42 = phi i64 [ %25, %24 ], [ %40, %28 ]
  %43 = trunc i64 %42 to i32
  br label %44

44:                                               ; preds = %41, %17
  %45 = phi i32 [ %19, %17 ], [ %43, %41 ]
  %46 = add nuw nsw i64 %18, 1
  %47 = icmp eq i64 %46, %10
  br i1 %47, label %23, label %17

48:                                               ; preds = %20, %48
  %49 = phi i64 [ %74, %48 ], [ %22, %20 ]
  %50 = phi i64 [ %77, %48 ], [ 0, %20 ]
  %51 = phi i64 [ %78, %48 ], [ %15, %20 ]
  %52 = load double*, double** %21, align 8
  %53 = shl nuw nsw i64 %50, 1
  %54 = getelementptr inbounds double, double* %52, i64 %53
  %55 = load double, double* %54, align 8
  %56 = fptrunc double %55 to float
  %57 = or i64 %53, 1
  %58 = getelementptr inbounds double, double* %52, i64 %57
  %59 = load double, double* %58, align 8
  %60 = fptrunc double %59 to float
  %61 = add nsw i64 %49, 1
  %62 = getelementptr inbounds %"class.std::__1::complex", %"class.std::__1::complex"* %0, i64 %49, i32 0
  store float %56, float* %62, align 4
  %63 = getelementptr inbounds %"class.std::__1::complex", %"class.std::__1::complex"* %0, i64 %49, i32 1
  store float %60, float* %63, align 4
  %64 = load double*, double** %21, align 8
  %65 = shl nuw i64 %50, 1
  %66 = or i64 %65, 2
  %67 = getelementptr inbounds double, double* %64, i64 %66
  %68 = load double, double* %67, align 8
  %69 = fptrunc double %68 to float
  %70 = or i64 %65, 3
  %71 = getelementptr inbounds double, double* %64, i64 %70
  %72 = load double, double* %71, align 8
  %73 = fptrunc double %72 to float
  %74 = add nsw i64 %49, 2
  %75 = getelementptr inbounds %"class.std::__1::complex", %"class.std::__1::complex"* %0, i64 %61, i32 0
  store float %69, float* %75, align 4
  %76 = getelementptr inbounds %"class.std::__1::complex", %"class.std::__1::complex"* %0, i64 %61, i32 1
  store float %73, float* %76, align 4
  %77 = add nuw nsw i64 %50, 2
  %78 = add i64 %51, -2
  %79 = icmp eq i64 %78, 0
  br i1 %79, label %24, label %48
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN6tflite3ops6custom6rfft2d12Rfft2dHelperEP13TfLiteContextP10TfLiteNode(%struct.TfLiteContext* nocapture readonly, %struct.TfLiteNode* nocapture readonly) local_unnamed_addr #1 {
  %3 = alloca %"class.tflite::RuntimeShape", align 8
  %4 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 0
  %5 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %4, align 8
  %6 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %5, i64 0, i32 1, i64 0
  %7 = load i32, i32* %6, align 4
  %8 = icmp slt i32 %7, 0
  br i1 %8, label %19, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %11 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %10, align 8
  %12 = sext i32 %7 to i64
  %13 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %11, i64 %12
  %14 = icmp eq %struct.TfLiteTensor* %13, null
  br i1 %14, label %19, label %15

15:                                               ; preds = %9
  %16 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %11, i64 %12, i32 1
  %17 = bitcast %union.TfLitePtrUnion* %16 to float**
  %18 = load float*, float** %17, align 8
  br label %19

19:                                               ; preds = %2, %9, %15
  %20 = phi i1 [ false, %15 ], [ true, %9 ], [ true, %2 ]
  %21 = phi %struct.TfLiteTensor* [ %13, %15 ], [ null, %9 ], [ null, %2 ]
  %22 = phi float* [ %18, %15 ], [ null, %9 ], [ null, %2 ]
  %23 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %5, i64 0, i32 1, i64 1
  %24 = load i32, i32* %23, align 4
  %25 = icmp slt i32 %24, 0
  br i1 %25, label %35, label %26

26:                                               ; preds = %19
  %27 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %28 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %27, align 8
  %29 = sext i32 %24 to i64
  %30 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %28, i64 %29
  %31 = icmp eq %struct.TfLiteTensor* %30, null
  br i1 %31, label %35, label %32

32:                                               ; preds = %26
  %33 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %28, i64 %29, i32 1, i32 0
  %34 = load i32*, i32** %33, align 8
  br label %35

35:                                               ; preds = %19, %26, %32
  %36 = phi i32* [ %34, %32 ], [ null, %26 ], [ null, %19 ]
  %37 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 1
  %38 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %37, align 8
  %39 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %38, i64 0, i32 1, i64 0
  %40 = load i32, i32* %39, align 4
  %41 = icmp slt i32 %40, 0
  br i1 %41, label %52, label %42

42:                                               ; preds = %35
  %43 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %44 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %43, align 8
  %45 = sext i32 %40 to i64
  %46 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %44, i64 %45
  %47 = icmp eq %struct.TfLiteTensor* %46, null
  br i1 %47, label %52, label %48

48:                                               ; preds = %42
  %49 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %44, i64 %45, i32 1
  %50 = bitcast %union.TfLitePtrUnion* %49 to %"class.std::__1::complex"**
  %51 = load %"class.std::__1::complex"*, %"class.std::__1::complex"** %50, align 8
  br label %52

52:                                               ; preds = %35, %42, %48
  %53 = phi %"class.std::__1::complex"* [ %51, %48 ], [ null, %42 ], [ null, %35 ]
  %54 = load i32, i32* %36, align 4
  %55 = getelementptr inbounds i32, i32* %36, i64 1
  %56 = load i32, i32* %55, align 4
  %57 = bitcast %"class.tflite::RuntimeShape"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %57) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %57, i8 -86, i64 32, i1 false)
  br i1 %20, label %58, label %63

58:                                               ; preds = %52
  %59 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 0
  store i32 0, i32* %59, align 8, !alias.scope !10
  %60 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 0
  %61 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1
  %62 = bitcast %union.anon* %61 to i32*
  br label %188

63:                                               ; preds = %52
  %64 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %21, i64 0, i32 2
  %65 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %64, align 8, !noalias !10
  %66 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %65, i64 0, i32 0
  %67 = load i32, i32* %66, align 4, !noalias !10
  %68 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %65, i64 0, i32 1, i64 0
  %69 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 0
  store i32 %67, i32* %69, align 8, !alias.scope !10
  %70 = icmp sgt i32 %67, 5
  br i1 %70, label %71, label %78

71:                                               ; preds = %63
  %72 = sext i32 %67 to i64
  %73 = shl nsw i64 %72, 2
  %74 = tail call i8* @_Znam(i64 %73) #12, !noalias !10
  %75 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1, i32 0
  %76 = bitcast i32** %75 to i8**
  store i8* %74, i8** %76, align 8, !alias.scope !10
  %77 = bitcast i8* %74 to i32*
  br label %83

78:                                               ; preds = %63
  %79 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1
  %80 = bitcast %union.anon* %79 to i32*
  %81 = sext i32 %67 to i64
  %82 = shl nsw i64 %81, 2
  br label %83

83:                                               ; preds = %71, %78
  %84 = phi i64 [ %73, %71 ], [ %82, %78 ]
  %85 = phi i32* [ %77, %71 ], [ %80, %78 ]
  %86 = bitcast i32* %85 to i8*
  %87 = bitcast i32* %68 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %86, i8* align 4 %87, i64 %84, i1 false) #11
  %88 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 0
  %89 = icmp sgt i32 %67, 5
  %90 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1
  %91 = getelementptr inbounds %union.anon, %union.anon* %90, i64 0, i32 0
  %92 = load i32*, i32** %91, align 8
  %93 = bitcast %union.anon* %90 to i32*
  %94 = select i1 %89, i32* %92, i32* %93
  %95 = add i32 %67, -2
  %96 = icmp sgt i32 %95, 0
  br i1 %96, label %97, label %188

97:                                               ; preds = %83
  %98 = zext i32 %95 to i64
  %99 = icmp ult i32 %95, 8
  br i1 %99, label %100, label %103

100:                                              ; preds = %178, %97
  %101 = phi i64 [ 0, %97 ], [ %104, %178 ]
  %102 = phi i32 [ 1, %97 ], [ %186, %178 ]
  br label %221

103:                                              ; preds = %97
  %104 = and i64 %98, 4294967288
  %105 = add nsw i64 %104, -8
  %106 = lshr exact i64 %105, 3
  %107 = add nuw nsw i64 %106, 1
  %108 = and i64 %107, 3
  %109 = icmp ult i64 %105, 24
  br i1 %109, label %155, label %110

110:                                              ; preds = %103
  %111 = sub nsw i64 %107, %108
  br label %112

112:                                              ; preds = %112, %110
  %113 = phi i64 [ 0, %110 ], [ %152, %112 ]
  %114 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %110 ], [ %150, %112 ]
  %115 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %110 ], [ %151, %112 ]
  %116 = phi i64 [ %111, %110 ], [ %153, %112 ]
  %117 = getelementptr inbounds i32, i32* %94, i64 %113
  %118 = bitcast i32* %117 to <4 x i32>*
  %119 = load <4 x i32>, <4 x i32>* %118, align 4
  %120 = getelementptr inbounds i32, i32* %117, i64 4
  %121 = bitcast i32* %120 to <4 x i32>*
  %122 = load <4 x i32>, <4 x i32>* %121, align 4
  %123 = mul nsw <4 x i32> %119, %114
  %124 = mul nsw <4 x i32> %122, %115
  %125 = or i64 %113, 8
  %126 = getelementptr inbounds i32, i32* %94, i64 %125
  %127 = bitcast i32* %126 to <4 x i32>*
  %128 = load <4 x i32>, <4 x i32>* %127, align 4
  %129 = getelementptr inbounds i32, i32* %126, i64 4
  %130 = bitcast i32* %129 to <4 x i32>*
  %131 = load <4 x i32>, <4 x i32>* %130, align 4
  %132 = mul nsw <4 x i32> %128, %123
  %133 = mul nsw <4 x i32> %131, %124
  %134 = or i64 %113, 16
  %135 = getelementptr inbounds i32, i32* %94, i64 %134
  %136 = bitcast i32* %135 to <4 x i32>*
  %137 = load <4 x i32>, <4 x i32>* %136, align 4
  %138 = getelementptr inbounds i32, i32* %135, i64 4
  %139 = bitcast i32* %138 to <4 x i32>*
  %140 = load <4 x i32>, <4 x i32>* %139, align 4
  %141 = mul nsw <4 x i32> %137, %132
  %142 = mul nsw <4 x i32> %140, %133
  %143 = or i64 %113, 24
  %144 = getelementptr inbounds i32, i32* %94, i64 %143
  %145 = bitcast i32* %144 to <4 x i32>*
  %146 = load <4 x i32>, <4 x i32>* %145, align 4
  %147 = getelementptr inbounds i32, i32* %144, i64 4
  %148 = bitcast i32* %147 to <4 x i32>*
  %149 = load <4 x i32>, <4 x i32>* %148, align 4
  %150 = mul nsw <4 x i32> %146, %141
  %151 = mul nsw <4 x i32> %149, %142
  %152 = add i64 %113, 32
  %153 = add i64 %116, -4
  %154 = icmp eq i64 %153, 0
  br i1 %154, label %155, label %112, !llvm.loop !13

155:                                              ; preds = %112, %103
  %156 = phi <4 x i32> [ undef, %103 ], [ %150, %112 ]
  %157 = phi <4 x i32> [ undef, %103 ], [ %151, %112 ]
  %158 = phi i64 [ 0, %103 ], [ %152, %112 ]
  %159 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %103 ], [ %150, %112 ]
  %160 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %103 ], [ %151, %112 ]
  %161 = icmp eq i64 %108, 0
  br i1 %161, label %178, label %162

162:                                              ; preds = %155, %162
  %163 = phi i64 [ %175, %162 ], [ %158, %155 ]
  %164 = phi <4 x i32> [ %173, %162 ], [ %159, %155 ]
  %165 = phi <4 x i32> [ %174, %162 ], [ %160, %155 ]
  %166 = phi i64 [ %176, %162 ], [ %108, %155 ]
  %167 = getelementptr inbounds i32, i32* %94, i64 %163
  %168 = bitcast i32* %167 to <4 x i32>*
  %169 = load <4 x i32>, <4 x i32>* %168, align 4
  %170 = getelementptr inbounds i32, i32* %167, i64 4
  %171 = bitcast i32* %170 to <4 x i32>*
  %172 = load <4 x i32>, <4 x i32>* %171, align 4
  %173 = mul nsw <4 x i32> %169, %164
  %174 = mul nsw <4 x i32> %172, %165
  %175 = add i64 %163, 8
  %176 = add i64 %166, -1
  %177 = icmp eq i64 %176, 0
  br i1 %177, label %178, label %162, !llvm.loop !15

178:                                              ; preds = %162, %155
  %179 = phi <4 x i32> [ %156, %155 ], [ %173, %162 ]
  %180 = phi <4 x i32> [ %157, %155 ], [ %174, %162 ]
  %181 = mul <4 x i32> %180, %179
  %182 = shufflevector <4 x i32> %181, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %183 = mul <4 x i32> %181, %182
  %184 = shufflevector <4 x i32> %183, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %185 = mul <4 x i32> %183, %184
  %186 = extractelement <4 x i32> %185, i32 0
  %187 = icmp eq i64 %104, %98
  br i1 %187, label %188, label %100

188:                                              ; preds = %221, %178, %58, %83
  %189 = phi i32 [ %95, %83 ], [ -2, %58 ], [ %95, %178 ], [ %95, %221 ]
  %190 = phi i32* [ %94, %83 ], [ %62, %58 ], [ %94, %178 ], [ %94, %221 ]
  %191 = phi i32 [ %67, %83 ], [ 0, %58 ], [ %67, %178 ], [ %67, %221 ]
  %192 = phi i32* [ %88, %83 ], [ %60, %58 ], [ %88, %178 ], [ %88, %221 ]
  %193 = phi i32 [ 1, %83 ], [ 1, %58 ], [ %186, %178 ], [ %226, %221 ]
  %194 = sext i32 %189 to i64
  %195 = getelementptr inbounds i32, i32* %190, i64 %194
  %196 = load i32, i32* %195, align 4
  %197 = add nsw i32 %191, -1
  %198 = sext i32 %197 to i64
  %199 = getelementptr inbounds i32, i32* %190, i64 %198
  %200 = load i32, i32* %199, align 4
  %201 = mul nsw i32 %200, %196
  %202 = sdiv i32 %56, 2
  %203 = add nsw i32 %202, 1
  %204 = mul nsw i32 %203, %54
  %205 = sext i32 %54 to i64
  %206 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %205, i64 8)
  %207 = extractvalue { i64, i1 } %206, 1
  %208 = extractvalue { i64, i1 } %206, 0
  %209 = select i1 %207, i64 -1, i64 %208
  %210 = tail call i8* @_Znam(i64 %209) #12
  %211 = bitcast i8* %210 to double**
  %212 = icmp sgt i32 %54, 0
  br i1 %212, label %213, label %229

213:                                              ; preds = %188
  %214 = add nsw i32 %56, 2
  %215 = sext i32 %214 to i64
  %216 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %215, i64 8)
  %217 = extractvalue { i64, i1 } %216, 1
  %218 = extractvalue { i64, i1 } %216, 0
  %219 = select i1 %217, i64 -1, i64 %218
  %220 = zext i32 %54 to i64
  br label %311

221:                                              ; preds = %100, %221
  %222 = phi i64 [ %227, %221 ], [ %101, %100 ]
  %223 = phi i32 [ %226, %221 ], [ %102, %100 ]
  %224 = getelementptr inbounds i32, i32* %94, i64 %222
  %225 = load i32, i32* %224, align 4
  %226 = mul nsw i32 %225, %223
  %227 = add nuw nsw i64 %222, 1
  %228 = icmp eq i64 %227, %98
  br i1 %228, label %188, label %221, !llvm.loop !16

229:                                              ; preds = %311, %188
  %230 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 3
  %231 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %230, align 8
  %232 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %231, i64 0, i32 1, i64 0
  %233 = load i32, i32* %232, align 4
  %234 = icmp slt i32 %233, 0
  br i1 %234, label %245, label %235

235:                                              ; preds = %229
  %236 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %237 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %236, align 8
  %238 = sext i32 %233 to i64
  %239 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %237, i64 %238
  %240 = icmp eq %struct.TfLiteTensor* %239, null
  br i1 %240, label %245, label %241

241:                                              ; preds = %235
  %242 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %237, i64 %238, i32 1, i32 0
  %243 = load i32*, i32** %242, align 8
  %244 = bitcast i32* %243 to i8*
  br label %245

245:                                              ; preds = %229, %235, %241
  %246 = phi %struct.TfLiteTensor* [ %239, %241 ], [ null, %235 ], [ null, %229 ]
  %247 = phi i8* [ %244, %241 ], [ null, %235 ], [ null, %229 ]
  %248 = phi i32* [ %243, %241 ], [ null, %235 ], [ null, %229 ]
  %249 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %231, i64 0, i32 1, i64 1
  %250 = load i32, i32* %249, align 4
  %251 = icmp slt i32 %250, 0
  br i1 %251, label %264, label %252

252:                                              ; preds = %245
  %253 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %254 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %253, align 8
  %255 = sext i32 %250 to i64
  %256 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %254, i64 %255
  %257 = icmp eq %struct.TfLiteTensor* %256, null
  br i1 %257, label %264, label %258

258:                                              ; preds = %252
  %259 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %254, i64 %255, i32 1
  %260 = bitcast %union.TfLitePtrUnion* %259 to i64**
  %261 = load i64*, i64** %260, align 8
  %262 = bitcast i64* %261 to double*
  %263 = bitcast i64* %261 to i8*
  br label %264

264:                                              ; preds = %245, %252, %258
  %265 = phi %struct.TfLiteTensor* [ %256, %258 ], [ null, %252 ], [ null, %245 ]
  %266 = phi double* [ %262, %258 ], [ null, %252 ], [ null, %245 ]
  %267 = phi i8* [ %263, %258 ], [ null, %252 ], [ null, %245 ]
  %268 = icmp sgt i32 %193, 0
  br i1 %268, label %269, label %318

269:                                              ; preds = %264
  %270 = icmp slt i32 %54, %196
  %271 = select i1 %270, i32 %54, i32 %196
  %272 = icmp slt i32 %56, %200
  %273 = select i1 %272, i32 %56, i32 %200
  %274 = icmp sgt i32 %271, 0
  %275 = icmp sgt i32 %273, 0
  %276 = add i32 %56, 2
  %277 = icmp slt i32 %273, %276
  %278 = sext i32 %273 to i64
  %279 = sext i32 %276 to i64
  %280 = sext i32 %271 to i64
  %281 = icmp sgt i32 %54, %196
  %282 = icmp sgt i32 %276, 0
  %283 = zext i32 %276 to i64
  %284 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %246, i64 0, i32 5
  %285 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %265, i64 0, i32 5
  %286 = icmp slt i32 %56, -1
  %287 = zext i32 %54 to i64
  %288 = zext i32 %203 to i64
  %289 = sext i32 %201 to i64
  %290 = sext i32 %204 to i64
  %291 = sub nsw i64 %279, %278
  %292 = xor i64 %278, -1
  %293 = add nsw i64 %292, %279
  %294 = add nsw i64 %283, -1
  %295 = and i64 %278, 1
  %296 = icmp eq i32 %273, 1
  %297 = sub nsw i64 %278, %295
  %298 = icmp eq i64 %295, 0
  %299 = and i64 %291, 3
  %300 = icmp eq i64 %299, 0
  %301 = icmp ult i64 %293, 3
  %302 = and i64 %283, 3
  %303 = icmp ult i64 %294, 3
  %304 = sub nsw i64 %283, %302
  %305 = icmp eq i64 %302, 0
  %306 = and i64 %288, 1
  %307 = add i32 %56, 1
  %308 = icmp ult i32 %307, 3
  %309 = sub nsw i64 %288, %306
  %310 = icmp eq i64 %306, 0
  br label %321

311:                                              ; preds = %311, %213
  %312 = phi i64 [ 0, %213 ], [ %316, %311 ]
  %313 = tail call i8* @_Znam(i64 %219) #12
  %314 = getelementptr inbounds double*, double** %211, i64 %312
  %315 = bitcast double** %314 to i8**
  store i8* %313, i8** %315, align 8
  %316 = add nuw nsw i64 %312, 1
  %317 = icmp eq i64 %316, %220
  br i1 %317, label %229, label %311

318:                                              ; preds = %492, %264
  br i1 %212, label %319, label %507

319:                                              ; preds = %318
  %320 = zext i32 %54 to i64
  br label %497

321:                                              ; preds = %492, %269
  %322 = phi i32 [ 0, %269 ], [ %495, %492 ]
  %323 = phi %"class.std::__1::complex"* [ %53, %269 ], [ %494, %492 ]
  %324 = phi float* [ %22, %269 ], [ %493, %492 ]
  br i1 %274, label %326, label %325

325:                                              ; preds = %374, %321
  br i1 %281, label %393, label %427

326:                                              ; preds = %321, %374
  %327 = phi i64 [ %375, %374 ], [ 0, %321 ]
  %328 = phi i32 [ %377, %374 ], [ 0, %321 ]
  br i1 %275, label %329, label %341

329:                                              ; preds = %326
  %330 = sext i32 %328 to i64
  %331 = getelementptr inbounds double*, double** %211, i64 %327
  br i1 %296, label %332, label %354

332:                                              ; preds = %354, %329
  %333 = phi i64 [ %330, %329 ], [ %365, %354 ]
  %334 = phi i64 [ 0, %329 ], [ %371, %354 ]
  br i1 %298, label %341, label %335

335:                                              ; preds = %332
  %336 = getelementptr inbounds float, float* %324, i64 %333
  %337 = load float, float* %336, align 4
  %338 = fpext float %337 to double
  %339 = load double*, double** %331, align 8
  %340 = getelementptr inbounds double, double* %339, i64 %334
  store double %338, double* %340, align 8
  br label %341

341:                                              ; preds = %335, %332, %326
  br i1 %277, label %342, label %374

342:                                              ; preds = %341
  %343 = getelementptr inbounds double*, double** %211, i64 %327
  br i1 %300, label %352, label %344

344:                                              ; preds = %342, %344
  %345 = phi i64 [ %349, %344 ], [ %278, %342 ]
  %346 = phi i64 [ %350, %344 ], [ %299, %342 ]
  %347 = load double*, double** %343, align 8
  %348 = getelementptr inbounds double, double* %347, i64 %345
  store double 0.000000e+00, double* %348, align 8
  %349 = add nsw i64 %345, 1
  %350 = add i64 %346, -1
  %351 = icmp eq i64 %350, 0
  br i1 %351, label %352, label %344, !llvm.loop !18

352:                                              ; preds = %344, %342
  %353 = phi i64 [ %278, %342 ], [ %349, %344 ]
  br i1 %301, label %374, label %378

354:                                              ; preds = %329, %354
  %355 = phi i64 [ %365, %354 ], [ %330, %329 ]
  %356 = phi i64 [ %371, %354 ], [ 0, %329 ]
  %357 = phi i64 [ %372, %354 ], [ %297, %329 ]
  %358 = add nsw i64 %355, 1
  %359 = getelementptr inbounds float, float* %324, i64 %355
  %360 = load float, float* %359, align 4
  %361 = fpext float %360 to double
  %362 = load double*, double** %331, align 8
  %363 = getelementptr inbounds double, double* %362, i64 %356
  store double %361, double* %363, align 8
  %364 = or i64 %356, 1
  %365 = add nsw i64 %355, 2
  %366 = getelementptr inbounds float, float* %324, i64 %358
  %367 = load float, float* %366, align 4
  %368 = fpext float %367 to double
  %369 = load double*, double** %331, align 8
  %370 = getelementptr inbounds double, double* %369, i64 %364
  store double %368, double* %370, align 8
  %371 = add nuw nsw i64 %356, 2
  %372 = add i64 %357, -2
  %373 = icmp eq i64 %372, 0
  br i1 %373, label %332, label %354

374:                                              ; preds = %352, %378, %341
  %375 = add nuw nsw i64 %327, 1
  %376 = icmp slt i64 %375, %280
  %377 = add i32 %328, %200
  br i1 %376, label %326, label %325

378:                                              ; preds = %352, %378
  %379 = phi i64 [ %391, %378 ], [ %353, %352 ]
  %380 = load double*, double** %343, align 8
  %381 = getelementptr inbounds double, double* %380, i64 %379
  store double 0.000000e+00, double* %381, align 8
  %382 = add nsw i64 %379, 1
  %383 = load double*, double** %343, align 8
  %384 = getelementptr inbounds double, double* %383, i64 %382
  store double 0.000000e+00, double* %384, align 8
  %385 = add nsw i64 %379, 2
  %386 = load double*, double** %343, align 8
  %387 = getelementptr inbounds double, double* %386, i64 %385
  store double 0.000000e+00, double* %387, align 8
  %388 = add nsw i64 %379, 3
  %389 = load double*, double** %343, align 8
  %390 = getelementptr inbounds double, double* %389, i64 %388
  store double 0.000000e+00, double* %390, align 8
  %391 = add nsw i64 %379, 4
  %392 = icmp slt i64 %391, %279
  br i1 %392, label %378, label %374

393:                                              ; preds = %325, %407
  %394 = phi i64 [ %408, %407 ], [ %280, %325 ]
  br i1 %282, label %395, label %407

395:                                              ; preds = %393
  %396 = getelementptr inbounds double*, double** %211, i64 %394
  br i1 %303, label %397, label %410

397:                                              ; preds = %410, %395
  %398 = phi i64 [ 0, %395 ], [ %424, %410 ]
  br i1 %305, label %407, label %399

399:                                              ; preds = %397, %399
  %400 = phi i64 [ %404, %399 ], [ %398, %397 ]
  %401 = phi i64 [ %405, %399 ], [ %302, %397 ]
  %402 = load double*, double** %396, align 8
  %403 = getelementptr inbounds double, double* %402, i64 %400
  store double 0.000000e+00, double* %403, align 8
  %404 = add nuw nsw i64 %400, 1
  %405 = add i64 %401, -1
  %406 = icmp eq i64 %405, 0
  br i1 %406, label %407, label %399, !llvm.loop !19

407:                                              ; preds = %397, %399, %393
  %408 = add nsw i64 %394, 1
  %409 = icmp slt i64 %408, %205
  br i1 %409, label %393, label %427

410:                                              ; preds = %395, %410
  %411 = phi i64 [ %424, %410 ], [ 0, %395 ]
  %412 = phi i64 [ %425, %410 ], [ %304, %395 ]
  %413 = load double*, double** %396, align 8
  %414 = getelementptr inbounds double, double* %413, i64 %411
  store double 0.000000e+00, double* %414, align 8
  %415 = or i64 %411, 1
  %416 = load double*, double** %396, align 8
  %417 = getelementptr inbounds double, double* %416, i64 %415
  store double 0.000000e+00, double* %417, align 8
  %418 = or i64 %411, 2
  %419 = load double*, double** %396, align 8
  %420 = getelementptr inbounds double, double* %419, i64 %418
  store double 0.000000e+00, double* %420, align 8
  %421 = or i64 %411, 3
  %422 = load double*, double** %396, align 8
  %423 = getelementptr inbounds double, double* %422, i64 %421
  store double 0.000000e+00, double* %423, align 8
  %424 = add nuw nsw i64 %411, 4
  %425 = add i64 %412, -4
  %426 = icmp eq i64 %425, 0
  br i1 %426, label %397, label %410

427:                                              ; preds = %407, %325
  %428 = load i64, i64* %284, align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %247, i8 0, i64 %428, i1 false)
  %429 = load i64, i64* %285, align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %267, i8 0, i64 %429, i1 false)
  tail call void @rdft2d(i32 %54, i32 %56, i32 1, double** nonnull %211, double* null, i32* %248, double* %266) #11
  tail call void @_ZN6tflite3ops6custom6rfft2d13Rfft2dReorderEiiPPd(i32 %54, i32 %56, double** nonnull %211) #11
  br i1 %212, label %430, label %492

430:                                              ; preds = %427, %456
  %431 = phi i64 [ %458, %456 ], [ 0, %427 ]
  %432 = phi i32 [ %457, %456 ], [ 0, %427 ]
  br i1 %286, label %456, label %433

433:                                              ; preds = %430
  %434 = getelementptr inbounds double*, double** %211, i64 %431
  %435 = sext i32 %432 to i64
  br i1 %308, label %436, label %460

436:                                              ; preds = %460, %433
  %437 = phi i64 [ undef, %433 ], [ %486, %460 ]
  %438 = phi i64 [ %435, %433 ], [ %486, %460 ]
  %439 = phi i64 [ 0, %433 ], [ %489, %460 ]
  br i1 %310, label %453, label %440

440:                                              ; preds = %436
  %441 = load double*, double** %434, align 8
  %442 = shl nuw nsw i64 %439, 1
  %443 = getelementptr inbounds double, double* %441, i64 %442
  %444 = load double, double* %443, align 8
  %445 = fptrunc double %444 to float
  %446 = or i64 %442, 1
  %447 = getelementptr inbounds double, double* %441, i64 %446
  %448 = load double, double* %447, align 8
  %449 = fptrunc double %448 to float
  %450 = getelementptr inbounds %"class.std::__1::complex", %"class.std::__1::complex"* %323, i64 %438, i32 0
  store float %445, float* %450, align 4
  %451 = getelementptr inbounds %"class.std::__1::complex", %"class.std::__1::complex"* %323, i64 %438, i32 1
  store float %449, float* %451, align 4
  %452 = add nsw i64 %438, 1
  br label %453

453:                                              ; preds = %436, %440
  %454 = phi i64 [ %437, %436 ], [ %452, %440 ]
  %455 = trunc i64 %454 to i32
  br label %456

456:                                              ; preds = %453, %430
  %457 = phi i32 [ %432, %430 ], [ %455, %453 ]
  %458 = add nuw nsw i64 %431, 1
  %459 = icmp eq i64 %458, %287
  br i1 %459, label %492, label %430

460:                                              ; preds = %433, %460
  %461 = phi i64 [ %486, %460 ], [ %435, %433 ]
  %462 = phi i64 [ %489, %460 ], [ 0, %433 ]
  %463 = phi i64 [ %490, %460 ], [ %309, %433 ]
  %464 = load double*, double** %434, align 8
  %465 = shl nuw nsw i64 %462, 1
  %466 = getelementptr inbounds double, double* %464, i64 %465
  %467 = load double, double* %466, align 8
  %468 = fptrunc double %467 to float
  %469 = or i64 %465, 1
  %470 = getelementptr inbounds double, double* %464, i64 %469
  %471 = load double, double* %470, align 8
  %472 = fptrunc double %471 to float
  %473 = add nsw i64 %461, 1
  %474 = getelementptr inbounds %"class.std::__1::complex", %"class.std::__1::complex"* %323, i64 %461, i32 0
  store float %468, float* %474, align 4
  %475 = getelementptr inbounds %"class.std::__1::complex", %"class.std::__1::complex"* %323, i64 %461, i32 1
  store float %472, float* %475, align 4
  %476 = load double*, double** %434, align 8
  %477 = shl nuw i64 %462, 1
  %478 = or i64 %477, 2
  %479 = getelementptr inbounds double, double* %476, i64 %478
  %480 = load double, double* %479, align 8
  %481 = fptrunc double %480 to float
  %482 = or i64 %477, 3
  %483 = getelementptr inbounds double, double* %476, i64 %482
  %484 = load double, double* %483, align 8
  %485 = fptrunc double %484 to float
  %486 = add nsw i64 %461, 2
  %487 = getelementptr inbounds %"class.std::__1::complex", %"class.std::__1::complex"* %323, i64 %473, i32 0
  store float %481, float* %487, align 4
  %488 = getelementptr inbounds %"class.std::__1::complex", %"class.std::__1::complex"* %323, i64 %473, i32 1
  store float %485, float* %488, align 4
  %489 = add nuw nsw i64 %462, 2
  %490 = add i64 %463, -2
  %491 = icmp eq i64 %490, 0
  br i1 %491, label %436, label %460

492:                                              ; preds = %456, %427
  %493 = getelementptr inbounds float, float* %324, i64 %289
  %494 = getelementptr inbounds %"class.std::__1::complex", %"class.std::__1::complex"* %323, i64 %290
  %495 = add nuw nsw i32 %322, 1
  %496 = icmp eq i32 %495, %193
  br i1 %496, label %318, label %321

497:                                              ; preds = %504, %319
  %498 = phi i64 [ 0, %319 ], [ %505, %504 ]
  %499 = getelementptr inbounds double*, double** %211, i64 %498
  %500 = load double*, double** %499, align 8
  %501 = icmp eq double* %500, null
  br i1 %501, label %504, label %502

502:                                              ; preds = %497
  %503 = bitcast double* %500 to i8*
  tail call void @_ZdaPv(i8* %503) #12
  br label %504

504:                                              ; preds = %497, %502
  %505 = add nuw nsw i64 %498, 1
  %506 = icmp eq i64 %505, %320
  br i1 %506, label %507, label %497

507:                                              ; preds = %504, %318
  tail call void @_ZdaPv(i8* nonnull %210) #12
  %508 = load i32, i32* %192, align 8
  %509 = icmp sgt i32 %508, 5
  br i1 %509, label %510, label %516

510:                                              ; preds = %507
  %511 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1, i32 0
  %512 = load i32*, i32** %511, align 8
  %513 = icmp eq i32* %512, null
  br i1 %513, label %516, label %514

514:                                              ; preds = %510
  %515 = bitcast i32* %512 to i8*
  tail call void @_ZdaPv(i8* %515) #12
  br label %516

516:                                              ; preds = %507, %510, %514
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %57) #11
  ret i32 0
}

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.umul.with.overflow.i64(i64, i64) #8

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znam(i64) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN6tflite3ops6custom6rfft2d4EvalEP13TfLiteContextP10TfLiteNode(%struct.TfLiteContext*, %struct.TfLiteNode* nocapture readonly) #1 {
  %3 = alloca %"class.tflite::RuntimeShape", align 8
  %4 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 0
  %5 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %4, align 8
  %6 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %5, i64 0, i32 1, i64 0
  %7 = load i32, i32* %6, align 4
  %8 = icmp slt i32 %7, 0
  br i1 %8, label %14, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %11 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %10, align 8
  %12 = sext i32 %7 to i64
  %13 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %11, i64 %12
  br label %14

14:                                               ; preds = %2, %9
  %15 = phi %struct.TfLiteTensor* [ %13, %9 ], [ null, %2 ]
  %16 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %5, i64 0, i32 1, i64 1
  %17 = load i32, i32* %16, align 4
  %18 = icmp slt i32 %17, 0
  br i1 %18, label %28, label %19

19:                                               ; preds = %14
  %20 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %21 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %20, align 8
  %22 = sext i32 %17 to i64
  %23 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %21, i64 %22
  %24 = icmp eq %struct.TfLiteTensor* %23, null
  br i1 %24, label %28, label %25

25:                                               ; preds = %19
  %26 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %21, i64 %22, i32 1, i32 0
  %27 = load i32*, i32** %26, align 8
  br label %28

28:                                               ; preds = %14, %19, %25
  %29 = phi %struct.TfLiteTensor* [ %23, %25 ], [ null, %19 ], [ null, %14 ]
  %30 = phi i32* [ %27, %25 ], [ null, %19 ], [ null, %14 ]
  %31 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 1
  %32 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %31, align 8
  %33 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %32, i64 0, i32 1, i64 0
  %34 = load i32, i32* %33, align 4
  %35 = icmp slt i32 %34, 0
  br i1 %35, label %41, label %36

36:                                               ; preds = %28
  %37 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %38 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %37, align 8
  %39 = sext i32 %34 to i64
  %40 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %38, i64 %39
  br label %41

41:                                               ; preds = %28, %36
  %42 = phi %struct.TfLiteTensor* [ %40, %36 ], [ null, %28 ]
  %43 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %42, i64 0, i32 0
  %44 = load i32, i32* %43, align 8
  %45 = icmp eq i32 %44, 8
  br i1 %45, label %50, label %46

46:                                               ; preds = %41
  %47 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %48 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %47, align 8
  %49 = tail call i8* @TfLiteTypeGetName(i32 %44) #11
  tail call void (%struct.TfLiteContext*, i8*, ...) %48(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.17, i64 0, i64 0), i8* %49) #11
  br label %171

50:                                               ; preds = %41
  %51 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %29, i64 0, i32 4
  %52 = load i32, i32* %51, align 8
  %53 = icmp eq i32 %52, 1
  br i1 %53, label %57, label %54

54:                                               ; preds = %50
  %55 = tail call i32 @_ZN6tflite3ops6custom6rfft2d31ResizeOutputandTemporaryTensorsEP13TfLiteContextP10TfLiteNode(%struct.TfLiteContext* %0, %struct.TfLiteNode* %1)
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %169, label %171

57:                                               ; preds = %50
  %58 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %42, i64 0, i32 2
  %59 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %58, align 8
  %60 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %59, i64 0, i32 0
  %61 = load i32, i32* %60, align 4
  %62 = bitcast %"class.tflite::RuntimeShape"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %62) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %62, i8 -86, i64 32, i1 false)
  %63 = icmp eq %struct.TfLiteTensor* %42, null
  br i1 %63, label %64, label %66

64:                                               ; preds = %57
  %65 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 0
  store i32 0, i32* %65, align 8, !alias.scope !20
  br label %87

66:                                               ; preds = %57
  %67 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %59, i64 0, i32 1, i64 0
  %68 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 0
  store i32 %61, i32* %68, align 8, !alias.scope !20
  %69 = icmp sgt i32 %61, 5
  br i1 %69, label %70, label %77

70:                                               ; preds = %66
  %71 = sext i32 %61 to i64
  %72 = shl nsw i64 %71, 2
  %73 = tail call i8* @_Znam(i64 %72) #12, !noalias !20
  %74 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1, i32 0
  %75 = bitcast i32** %74 to i8**
  store i8* %73, i8** %75, align 8, !alias.scope !20
  %76 = bitcast i8* %73 to i32*
  br label %82

77:                                               ; preds = %66
  %78 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1
  %79 = bitcast %union.anon* %78 to i32*
  %80 = sext i32 %61 to i64
  %81 = shl nsw i64 %80, 2
  br label %82

82:                                               ; preds = %77, %70
  %83 = phi i64 [ %72, %70 ], [ %81, %77 ]
  %84 = phi i32* [ %76, %70 ], [ %79, %77 ]
  %85 = bitcast i32* %84 to i8*
  %86 = bitcast i32* %67 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %85, i8* align 4 %86, i64 %83, i1 false) #11
  br label %87

87:                                               ; preds = %64, %82
  %88 = phi i32 [ 0, %64 ], [ %61, %82 ]
  %89 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %15, i64 0, i32 2
  %90 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %89, align 8
  %91 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %90, i64 0, i32 0
  %92 = load i32, i32* %91, align 4
  %93 = icmp eq i32 %61, %92
  br i1 %93, label %105, label %94

94:                                               ; preds = %87
  %95 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %96 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %95, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %96(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.1, i64 0, i64 0), i32 413, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.18, i64 0, i64 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.19, i64 0, i64 0), i32 %61, i32 %92) #11
  %97 = icmp sgt i32 %88, 5
  br i1 %97, label %98, label %104

98:                                               ; preds = %94
  %99 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1, i32 0
  %100 = load i32*, i32** %99, align 8
  %101 = icmp eq i32* %100, null
  br i1 %101, label %104, label %102

102:                                              ; preds = %98
  %103 = bitcast i32* %100 to i8*
  tail call void @_ZdaPv(i8* %103) #12
  br label %104

104:                                              ; preds = %94, %98, %102
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %62) #11
  br label %171

105:                                              ; preds = %87
  %106 = icmp sgt i32 %61, 1
  br i1 %106, label %118, label %107

107:                                              ; preds = %105
  %108 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %109 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %108, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %109(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.1, i64 0, i64 0), i32 414, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.20, i64 0, i64 0)) #11
  %110 = icmp sgt i32 %88, 5
  br i1 %110, label %111, label %117

111:                                              ; preds = %107
  %112 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1, i32 0
  %113 = load i32*, i32** %112, align 8
  %114 = icmp eq i32* %113, null
  br i1 %114, label %117, label %115

115:                                              ; preds = %111
  %116 = bitcast i32* %113 to i8*
  tail call void @_ZdaPv(i8* %116) #12
  br label %117

117:                                              ; preds = %107, %111, %115
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %62) #11
  br label %171

118:                                              ; preds = %105
  %119 = add nsw i32 %61, -2
  %120 = icmp sgt i32 %88, 5
  %121 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1
  %122 = getelementptr inbounds %union.anon, %union.anon* %121, i64 0, i32 0
  %123 = load i32*, i32** %122, align 8
  %124 = sext i32 %119 to i64
  %125 = getelementptr inbounds i32, i32* %123, i64 %124
  %126 = bitcast %union.anon* %121 to [5 x i32]*
  %127 = getelementptr inbounds [5 x i32], [5 x i32]* %126, i64 0, i64 %124
  %128 = select i1 %120, i32* %125, i32* %127
  %129 = load i32, i32* %128, align 4
  %130 = load i32, i32* %30, align 4
  %131 = icmp eq i32 %129, %130
  br i1 %131, label %141, label %132

132:                                              ; preds = %118
  %133 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %134 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %133, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %134(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.1, i64 0, i64 0), i32 416, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.21, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.22, i64 0, i64 0), i32 %129, i32 %130) #11
  %135 = xor i1 %120, true
  %136 = icmp eq i32* %123, null
  %137 = or i1 %136, %135
  br i1 %137, label %140, label %138

138:                                              ; preds = %132
  %139 = bitcast i32* %123 to i8*
  tail call void @_ZdaPv(i8* %139) #12
  br label %140

140:                                              ; preds = %132, %138
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %62) #11
  br label %171

141:                                              ; preds = %118
  %142 = add nsw i32 %61, -1
  %143 = sext i32 %142 to i64
  %144 = getelementptr inbounds i32, i32* %123, i64 %143
  %145 = getelementptr inbounds [5 x i32], [5 x i32]* %126, i64 0, i64 %143
  %146 = select i1 %120, i32* %144, i32* %145
  %147 = load i32, i32* %146, align 4
  %148 = getelementptr inbounds i32, i32* %30, i64 1
  %149 = load i32, i32* %148, align 4
  %150 = sdiv i32 %149, 2
  %151 = add nsw i32 %150, 1
  %152 = icmp eq i32 %147, %151
  br i1 %152, label %162, label %153

153:                                              ; preds = %141
  %154 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %155 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %154, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %155(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.1, i64 0, i64 0), i32 418, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.23, i64 0, i64 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.24, i64 0, i64 0), i32 %147, i32 %151) #11
  %156 = xor i1 %120, true
  %157 = icmp eq i32* %123, null
  %158 = or i1 %157, %156
  br i1 %158, label %161, label %159

159:                                              ; preds = %153
  %160 = bitcast i32* %123 to i8*
  tail call void @_ZdaPv(i8* %160) #12
  br label %161

161:                                              ; preds = %153, %159
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %62) #11
  br label %171

162:                                              ; preds = %141
  %163 = xor i1 %120, true
  %164 = icmp eq i32* %123, null
  %165 = or i1 %164, %163
  br i1 %165, label %168, label %166

166:                                              ; preds = %162
  %167 = bitcast i32* %123 to i8*
  tail call void @_ZdaPv(i8* %167) #12
  br label %168

168:                                              ; preds = %162, %166
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %62) #11
  br label %169

169:                                              ; preds = %168, %54
  %170 = tail call i32 @_ZN6tflite3ops6custom6rfft2d12Rfft2dHelperEP13TfLiteContextP10TfLiteNode(%struct.TfLiteContext* %0, %struct.TfLiteNode* %1)
  br label %171

171:                                              ; preds = %117, %161, %140, %104, %54, %169, %46
  %172 = phi i32 [ 1, %46 ], [ 0, %169 ], [ %55, %54 ], [ 1, %104 ], [ 1, %140 ], [ 1, %161 ], [ 1, %117 ]
  ret i32 %172
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden %struct.TfLiteRegistration* @_ZN6tflite3ops6custom15Register_RFFT2DEv() local_unnamed_addr #9 {
  ret %struct.TfLiteRegistration* bitcast ({ i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 }* @_ZZN6tflite3ops6custom15Register_RFFT2DEvE1r to %struct.TfLiteRegistration*)
}

declare void @TfLiteIntArrayFree(%struct.TfLiteIntArray*) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare double @sqrt(double) local_unnamed_addr #10

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctpop.i32(i32) #8

attributes #0 = { nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readnone speculatable }
attributes #9 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nounwind }
attributes #12 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 0, i32 33}
!3 = !{!4}
!4 = distinct !{!4, !5, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!5 = distinct !{!5, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.unroll.disable"}
!8 = distinct !{!8, !7}
!9 = distinct !{!9, !7}
!10 = !{!11}
!11 = distinct !{!11, !12, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!12 = distinct !{!12, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!13 = distinct !{!13, !14}
!14 = !{!"llvm.loop.isvectorized", i32 1}
!15 = distinct !{!15, !7}
!16 = distinct !{!16, !17, !14}
!17 = !{!"llvm.loop.unroll.runtime.disable"}
!18 = distinct !{!18, !7}
!19 = distinct !{!19, !7}
!20 = !{!21}
!21 = distinct !{!21, !22, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!22 = distinct !{!22, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
